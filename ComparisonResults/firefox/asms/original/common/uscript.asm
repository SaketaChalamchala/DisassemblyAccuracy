; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\mozilla\intl\icu\source\common\uscript.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
_JAPANESE DD	016H
	DD	014H
	DD	011H
_KOREAN	DD	012H
	DD	011H
_HAN_BOPO DD	011H
	DD	05H
CONST	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_uscript_getCode_56
EXTRN	_uloc_addLikelySubtags_56:PROC
EXTRN	_u_getPropertyValueEnum_56:PROC
EXTRN	__imp__strchr:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File d:\mozilla\intl\icu\source\common\uscript.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT _uscript_getCode_56
_TEXT	SEGMENT
tv71 = -428						; size = 4
_code$8993 = -228					; size = 4
_code$8982 = -216					; size = 4
_length$ = -204						; size = 4
_internalErrorCode$ = -192				; size = 4
_likely$ = -180						; size = 157
_triedCode$ = -9					; size = 1
__$ArrayPad$ = -4					; size = 4
_nameOrAbbrOrLocale$ = 8				; size = 4
_fillIn$ = 12						; size = 4
_capacity$ = 16						; size = 4
_err$ = 20						; size = 4
_uscript_getCode_56 PROC				; COMDAT
; Line 97
	push	ebp
	mov	ebp, esp
	sub	esp, 428				; 000001acH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-428]
	mov	ecx, 107				; 0000006bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 103
	mov	eax, DWORD PTR _err$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN12@uscript_ge
; Line 104
	xor	eax, eax
	jmp	$LN13@uscript_ge
$LN12@uscript_ge:
; Line 107
	cmp	DWORD PTR _nameOrAbbrOrLocale$[ebp], 0
	je	SHORT $LN10@uscript_ge
	cmp	DWORD PTR _fillIn$[ebp], 0
	jne	SHORT $LN15@uscript_ge
	xor	eax, eax
	cmp	DWORD PTR _capacity$[ebp], 0
	setne	al
	mov	DWORD PTR tv71[ebp], eax
	jmp	SHORT $LN16@uscript_ge
$LN15@uscript_ge:
	xor	ecx, ecx
	cmp	DWORD PTR _capacity$[ebp], 0
	setl	cl
	mov	DWORD PTR tv71[ebp], ecx
$LN16@uscript_ge:
	cmp	DWORD PTR tv71[ebp], 0
	je	SHORT $LN11@uscript_ge
$LN10@uscript_ge:
; Line 108
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 1
; Line 109
	xor	eax, eax
	jmp	$LN13@uscript_ge
$LN11@uscript_ge:
; Line 112
	mov	BYTE PTR _triedCode$[ebp], 0
; Line 113
	mov	esi, esp
	push	45					; 0000002dH
	mov	eax, DWORD PTR _nameOrAbbrOrLocale$[ebp]
	push	eax
	call	DWORD PTR __imp__strchr
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN9@uscript_ge
	mov	esi, esp
	push	95					; 0000005fH
	mov	eax, DWORD PTR _nameOrAbbrOrLocale$[ebp]
	push	eax
	call	DWORD PTR __imp__strchr
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN9@uscript_ge
; Line 115
	mov	eax, DWORD PTR _nameOrAbbrOrLocale$[ebp]
	push	eax
	push	4106					; 0000100aH
	call	_u_getPropertyValueEnum_56
	add	esp, 8
	mov	DWORD PTR _code$8982[ebp], eax
; Line 116
	cmp	DWORD PTR _code$8982[ebp], -1
	je	SHORT $LN8@uscript_ge
; Line 117
	mov	eax, DWORD PTR _err$[ebp]
	push	eax
	mov	ecx, DWORD PTR _capacity$[ebp]
	push	ecx
	mov	edx, DWORD PTR _fillIn$[ebp]
	push	edx
	mov	eax, DWORD PTR _code$8982[ebp]
	push	eax
	call	_setOneCode
	add	esp, 16					; 00000010H
	jmp	$LN13@uscript_ge
$LN8@uscript_ge:
; Line 119
	mov	BYTE PTR _triedCode$[ebp], 1
$LN9@uscript_ge:
; Line 121
	mov	DWORD PTR _internalErrorCode$[ebp], 0
; Line 122
	mov	eax, DWORD PTR _err$[ebp]
	push	eax
	mov	ecx, DWORD PTR _capacity$[ebp]
	push	ecx
	mov	edx, DWORD PTR _fillIn$[ebp]
	push	edx
	mov	eax, DWORD PTR _nameOrAbbrOrLocale$[ebp]
	push	eax
	call	_getCodesFromLocale
	add	esp, 16					; 00000010H
	mov	DWORD PTR _length$[ebp], eax
; Line 123
	mov	eax, DWORD PTR _err$[ebp]
	cmp	DWORD PTR [eax], 0
	jg	SHORT $LN6@uscript_ge
	cmp	DWORD PTR _length$[ebp], 0
	je	SHORT $LN7@uscript_ge
$LN6@uscript_ge:
; Line 124
	mov	eax, DWORD PTR _length$[ebp]
	jmp	$LN13@uscript_ge
$LN7@uscript_ge:
; Line 127
	lea	eax, DWORD PTR _internalErrorCode$[ebp]
	push	eax
	push	157					; 0000009dH
	lea	ecx, DWORD PTR _likely$[ebp]
	push	ecx
	mov	edx, DWORD PTR _nameOrAbbrOrLocale$[ebp]
	push	edx
	call	_uloc_addLikelySubtags_56
	add	esp, 16					; 00000010H
; Line 128
	cmp	DWORD PTR _internalErrorCode$[ebp], 0
	jg	SHORT $LN5@uscript_ge
	cmp	DWORD PTR _internalErrorCode$[ebp], -124 ; ffffff84H
	je	SHORT $LN5@uscript_ge
; Line 129
	mov	eax, DWORD PTR _err$[ebp]
	push	eax
	mov	ecx, DWORD PTR _capacity$[ebp]
	push	ecx
	mov	edx, DWORD PTR _fillIn$[ebp]
	push	edx
	lea	eax, DWORD PTR _likely$[ebp]
	push	eax
	call	_getCodesFromLocale
	add	esp, 16					; 00000010H
	mov	DWORD PTR _length$[ebp], eax
; Line 130
	mov	eax, DWORD PTR _err$[ebp]
	cmp	DWORD PTR [eax], 0
	jg	SHORT $LN3@uscript_ge
	cmp	DWORD PTR _length$[ebp], 0
	je	SHORT $LN5@uscript_ge
$LN3@uscript_ge:
; Line 131
	mov	eax, DWORD PTR _length$[ebp]
	jmp	SHORT $LN13@uscript_ge
$LN5@uscript_ge:
; Line 134
	movsx	eax, BYTE PTR _triedCode$[ebp]
	test	eax, eax
	jne	SHORT $LN2@uscript_ge
; Line 136
	mov	eax, DWORD PTR _nameOrAbbrOrLocale$[ebp]
	push	eax
	push	4106					; 0000100aH
	call	_u_getPropertyValueEnum_56
	add	esp, 8
	mov	DWORD PTR _code$8993[ebp], eax
; Line 137
	cmp	DWORD PTR _code$8993[ebp], -1
	je	SHORT $LN2@uscript_ge
; Line 138
	mov	eax, DWORD PTR _err$[ebp]
	push	eax
	mov	ecx, DWORD PTR _capacity$[ebp]
	push	ecx
	mov	edx, DWORD PTR _fillIn$[ebp]
	push	edx
	mov	eax, DWORD PTR _code$8993[ebp]
	push	eax
	call	_setOneCode
	add	esp, 16					; 00000010H
	jmp	SHORT $LN13@uscript_ge
$LN2@uscript_ge:
; Line 141
	xor	eax, eax
$LN13@uscript_ge:
; Line 142
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN20@uscript_ge
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 428				; 000001acH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN20@uscript_ge:
	DD	2
	DD	$LN19@uscript_ge
$LN19@uscript_ge:
	DD	-180					; ffffff4cH
	DD	157					; 0000009dH
	DD	$LN17@uscript_ge
	DD	-192					; ffffff40H
	DD	4
	DD	$LN18@uscript_ge
$LN18@uscript_ge:
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	110					; 0000006eH
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	69					; 00000045H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	67					; 00000043H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
$LN17@uscript_ge:
	DB	108					; 0000006cH
	DB	105					; 00000069H
	DB	107					; 0000006bH
	DB	101					; 00000065H
	DB	108					; 0000006cH
	DB	121					; 00000079H
	DB	0
_uscript_getCode_56 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _setOneCode
_TEXT	SEGMENT
_script$ = 8						; size = 4
_scripts$ = 12						; size = 4
_capacity$ = 16						; size = 4
_err$ = 20						; size = 4
_setOneCode PROC					; COMDAT
; Line 42
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 43
	mov	eax, DWORD PTR _err$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN2@setOneCode
	xor	eax, eax
	jmp	SHORT $LN3@setOneCode
$LN2@setOneCode:
; Line 44
	cmp	DWORD PTR _capacity$[ebp], 1
	jge	SHORT $LN1@setOneCode
; Line 45
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
; Line 46
	mov	eax, 1
	jmp	SHORT $LN3@setOneCode
$LN1@setOneCode:
; Line 48
	mov	eax, DWORD PTR _scripts$[ebp]
	mov	ecx, DWORD PTR _script$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 49
	mov	eax, 1
$LN3@setOneCode:
; Line 50
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_setOneCode ENDP
_TEXT	ENDS
PUBLIC	??_C@_04NLNONBNE@Hant?$AA@			; `string'
PUBLIC	??_C@_02PEPMCKME@zh?$AA@			; `string'
PUBLIC	??_C@_02KGFJHFEE@ko?$AA@			; `string'
PUBLIC	??_C@_02DJBIDCPN@ja?$AA@			; `string'
PUBLIC	__$ArrayPad$
EXTRN	_uloc_getScript_56:PROC
EXTRN	_strcmp:PROC
EXTRN	_uloc_getLanguage_56:PROC
;	COMDAT ??_C@_04NLNONBNE@Hant?$AA@
CONST	SEGMENT
??_C@_04NLNONBNE@Hant?$AA@ DB 'Hant', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02PEPMCKME@zh?$AA@
CONST	SEGMENT
??_C@_02PEPMCKME@zh?$AA@ DB 'zh', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02KGFJHFEE@ko?$AA@
CONST	SEGMENT
??_C@_02KGFJHFEE@ko?$AA@ DB 'ko', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02DJBIDCPN@ja?$AA@
CONST	SEGMENT
??_C@_02DJBIDCPN@ja?$AA@ DB 'ja', 00H			; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT _getCodesFromLocale
_TEXT	SEGMENT
_scriptCode$8956 = -68					; size = 4
_scriptLength$ = -56					; size = 4
_script$ = -44						; size = 8
_lang$ = -28						; size = 8
_internalErrorCode$ = -12				; size = 4
__$ArrayPad$ = -4					; size = 4
_locale$ = 8						; size = 4
_scripts$ = 12						; size = 4
_capacity$ = 16						; size = 4
_err$ = 20						; size = 4
_getCodesFromLocale PROC				; COMDAT
; Line 54
	push	ebp
	mov	ebp, esp
	sub	esp, 264				; 00000108H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-264]
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 55
	mov	DWORD PTR _internalErrorCode$[ebp], 0
; Line 59
	mov	eax, DWORD PTR _err$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN12@getCodesFr
	xor	eax, eax
	jmp	$LN13@getCodesFr
$LN12@getCodesFr:
; Line 62
	lea	eax, DWORD PTR _internalErrorCode$[ebp]
	push	eax
	push	8
	lea	ecx, DWORD PTR _lang$[ebp]
	push	ecx
	mov	edx, DWORD PTR _locale$[ebp]
	push	edx
	call	_uloc_getLanguage_56
	add	esp, 16					; 00000010H
; Line 63
	cmp	DWORD PTR _internalErrorCode$[ebp], 0
	jg	SHORT $LN10@getCodesFr
	cmp	DWORD PTR _internalErrorCode$[ebp], -124 ; ffffff84H
	jne	SHORT $LN11@getCodesFr
$LN10@getCodesFr:
; Line 64
	xor	eax, eax
	jmp	$LN13@getCodesFr
$LN11@getCodesFr:
; Line 66
	push	OFFSET ??_C@_02DJBIDCPN@ja?$AA@
	lea	eax, DWORD PTR _lang$[ebp]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN9@getCodesFr
; Line 67
	mov	eax, DWORD PTR _err$[ebp]
	push	eax
	mov	ecx, DWORD PTR _capacity$[ebp]
	push	ecx
	mov	edx, DWORD PTR _scripts$[ebp]
	push	edx
	push	3
	push	OFFSET _JAPANESE
	call	_setCodes
	add	esp, 20					; 00000014H
	jmp	$LN13@getCodesFr
$LN9@getCodesFr:
; Line 69
	push	OFFSET ??_C@_02KGFJHFEE@ko?$AA@
	lea	eax, DWORD PTR _lang$[ebp]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN8@getCodesFr
; Line 70
	mov	eax, DWORD PTR _err$[ebp]
	push	eax
	mov	ecx, DWORD PTR _capacity$[ebp]
	push	ecx
	mov	edx, DWORD PTR _scripts$[ebp]
	push	edx
	push	2
	push	OFFSET _KOREAN
	call	_setCodes
	add	esp, 20					; 00000014H
	jmp	$LN13@getCodesFr
$LN8@getCodesFr:
; Line 72
	lea	eax, DWORD PTR _internalErrorCode$[ebp]
	push	eax
	push	8
	lea	ecx, DWORD PTR _script$[ebp]
	push	ecx
	mov	edx, DWORD PTR _locale$[ebp]
	push	edx
	call	_uloc_getScript_56
	add	esp, 16					; 00000010H
	mov	DWORD PTR _scriptLength$[ebp], eax
; Line 73
	cmp	DWORD PTR _internalErrorCode$[ebp], 0
	jg	SHORT $LN6@getCodesFr
	cmp	DWORD PTR _internalErrorCode$[ebp], -124 ; ffffff84H
	jne	SHORT $LN7@getCodesFr
$LN6@getCodesFr:
; Line 74
	xor	eax, eax
	jmp	$LN13@getCodesFr
$LN7@getCodesFr:
; Line 76
	push	OFFSET ??_C@_02PEPMCKME@zh?$AA@
	lea	eax, DWORD PTR _lang$[ebp]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN5@getCodesFr
	push	OFFSET ??_C@_04NLNONBNE@Hant?$AA@
	lea	eax, DWORD PTR _script$[ebp]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN5@getCodesFr
; Line 77
	mov	eax, DWORD PTR _err$[ebp]
	push	eax
	mov	ecx, DWORD PTR _capacity$[ebp]
	push	ecx
	mov	edx, DWORD PTR _scripts$[ebp]
	push	edx
	push	2
	push	OFFSET _HAN_BOPO
	call	_setCodes
	add	esp, 20					; 00000014H
	jmp	SHORT $LN13@getCodesFr
$LN5@getCodesFr:
; Line 80
	cmp	DWORD PTR _scriptLength$[ebp], 0
	je	SHORT $LN4@getCodesFr
; Line 81
	lea	eax, DWORD PTR _script$[ebp]
	push	eax
	push	4106					; 0000100aH
	call	_u_getPropertyValueEnum_56
	add	esp, 8
	mov	DWORD PTR _scriptCode$8956[ebp], eax
; Line 82
	cmp	DWORD PTR _scriptCode$8956[ebp], -1
	je	SHORT $LN4@getCodesFr
; Line 83
	cmp	DWORD PTR _scriptCode$8956[ebp], 73	; 00000049H
	je	SHORT $LN1@getCodesFr
	cmp	DWORD PTR _scriptCode$8956[ebp], 74	; 0000004aH
	jne	SHORT $LN2@getCodesFr
$LN1@getCodesFr:
; Line 84
	mov	DWORD PTR _scriptCode$8956[ebp], 17	; 00000011H
$LN2@getCodesFr:
; Line 86
	mov	eax, DWORD PTR _err$[ebp]
	push	eax
	mov	ecx, DWORD PTR _capacity$[ebp]
	push	ecx
	mov	edx, DWORD PTR _scripts$[ebp]
	push	edx
	mov	eax, DWORD PTR _scriptCode$8956[ebp]
	push	eax
	call	_setOneCode
	add	esp, 16					; 00000010H
	jmp	SHORT $LN13@getCodesFr
$LN4@getCodesFr:
; Line 89
	xor	eax, eax
$LN13@getCodesFr:
; Line 90
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN19@getCodesFr
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 264				; 00000108H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN19@getCodesFr:
	DD	3
	DD	$LN18@getCodesFr
$LN18@getCodesFr:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN15@getCodesFr
	DD	-28					; ffffffe4H
	DD	8
	DD	$LN16@getCodesFr
	DD	-44					; ffffffd4H
	DD	8
	DD	$LN17@getCodesFr
$LN17@getCodesFr:
	DB	115					; 00000073H
	DB	99					; 00000063H
	DB	114					; 00000072H
	DB	105					; 00000069H
	DB	112					; 00000070H
	DB	116					; 00000074H
	DB	0
$LN16@getCodesFr:
	DB	108					; 0000006cH
	DB	97					; 00000061H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	0
$LN15@getCodesFr:
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	110					; 0000006eH
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	69					; 00000045H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	67					; 00000043H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
_getCodesFromLocale ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _setCodes
_TEXT	SEGMENT
_i$ = -8						; size = 4
_src$ = 8						; size = 4
_length$ = 12						; size = 4
_dest$ = 16						; size = 4
_capacity$ = 20						; size = 4
_err$ = 24						; size = 4
_setCodes PROC						; COMDAT
; Line 28
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 30
	mov	eax, DWORD PTR _err$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN5@setCodes
	xor	eax, eax
	jmp	SHORT $LN6@setCodes
$LN5@setCodes:
; Line 31
	mov	eax, DWORD PTR _length$[ebp]
	cmp	eax, DWORD PTR _capacity$[ebp]
	jle	SHORT $LN4@setCodes
; Line 32
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
; Line 33
	mov	eax, DWORD PTR _length$[ebp]
	jmp	SHORT $LN6@setCodes
$LN4@setCodes:
; Line 35
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@setCodes
$LN2@setCodes:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@setCodes:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _length$[ebp]
	jge	SHORT $LN1@setCodes
; Line 36
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _dest$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _src$[ebp]
	mov	edx, DWORD PTR [esi+edx*4]
	mov	DWORD PTR [ecx+eax*4], edx
; Line 37
	jmp	SHORT $LN2@setCodes
$LN1@setCodes:
; Line 38
	mov	eax, DWORD PTR _length$[ebp]
$LN6@setCodes:
; Line 39
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_setCodes ENDP
_TEXT	ENDS
END
