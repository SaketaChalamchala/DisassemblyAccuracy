; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\mozilla\intl\icu\source\common\uarrsort.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_uprv_uint16Comparator_56
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File d:\mozilla\intl\icu\source\common\uarrsort.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT _uprv_uint16Comparator_56
_TEXT	SEGMENT
_context$ = 8						; size = 4
_left$ = 12						; size = 4
_right$ = 16						; size = 4
_uprv_uint16Comparator_56 PROC				; COMDAT
; Line 38
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 39
	mov	eax, DWORD PTR _left$[ebp]
	movzx	eax, WORD PTR [eax]
	mov	ecx, DWORD PTR _right$[ebp]
	movzx	edx, WORD PTR [ecx]
	sub	eax, edx
; Line 40
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_uprv_uint16Comparator_56 ENDP
_TEXT	ENDS
PUBLIC	_uprv_int32Comparator_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _uprv_int32Comparator_56
_TEXT	SEGMENT
_context$ = 8						; size = 4
_left$ = 12						; size = 4
_right$ = 16						; size = 4
_uprv_int32Comparator_56 PROC				; COMDAT
; Line 43
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 44
	mov	eax, DWORD PTR _left$[ebp]
	mov	ecx, DWORD PTR _right$[ebp]
	mov	eax, DWORD PTR [eax]
	sub	eax, DWORD PTR [ecx]
; Line 45
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_uprv_int32Comparator_56 ENDP
_TEXT	ENDS
PUBLIC	_uprv_uint32Comparator_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _uprv_uint32Comparator_56
_TEXT	SEGMENT
_r$ = -20						; size = 4
_l$ = -8						; size = 4
_context$ = 8						; size = 4
_left$ = 12						; size = 4
_right$ = 16						; size = 4
_uprv_uint32Comparator_56 PROC				; COMDAT
; Line 48
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 49
	mov	eax, DWORD PTR _left$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _l$[ebp], ecx
	mov	eax, DWORD PTR _right$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _r$[ebp], ecx
; Line 52
	mov	eax, DWORD PTR _l$[ebp]
	cmp	eax, DWORD PTR _r$[ebp]
	jae	SHORT $LN4@uprv_uint3
; Line 53
	or	eax, -1
	jmp	SHORT $LN5@uprv_uint3
	jmp	SHORT $LN5@uprv_uint3
$LN4@uprv_uint3:
; Line 54
	mov	eax, DWORD PTR _l$[ebp]
	cmp	eax, DWORD PTR _r$[ebp]
	jne	SHORT $LN2@uprv_uint3
; Line 55
	xor	eax, eax
	jmp	SHORT $LN5@uprv_uint3
; Line 56
	jmp	SHORT $LN5@uprv_uint3
$LN2@uprv_uint3:
; Line 57
	mov	eax, 1
$LN5@uprv_uint3:
; Line 59
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_uprv_uint32Comparator_56 ENDP
_TEXT	ENDS
PUBLIC	_uprv_stableBinarySearch_56
EXTRN	__RTC_CheckEsp:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _uprv_stableBinarySearch_56
_TEXT	SEGMENT
tv91 = -256						; size = 4
_diff$5586 = -56					; size = 4
_diff$5578 = -44					; size = 4
_i$5577 = -32						; size = 4
_found$ = -17						; size = 1
_start$ = -8						; size = 4
_array$ = 8						; size = 4
_limit$ = 12						; size = 4
_item$ = 16						; size = 4
_itemSize$ = 20						; size = 4
_cmp$ = 24						; size = 4
_context$ = 28						; size = 4
_uprv_stableBinarySearch_56 PROC			; COMDAT
; Line 65
	push	ebp
	mov	ebp, esp
	sub	esp, 256				; 00000100H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-256]
	mov	ecx, 64					; 00000040H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 66
	mov	DWORD PTR _start$[ebp], 0
; Line 67
	mov	BYTE PTR _found$[ebp], 0
$LN11@uprv_stabl:
; Line 70
	mov	eax, DWORD PTR _limit$[ebp]
	sub	eax, DWORD PTR _start$[ebp]
	cmp	eax, 9
	jl	SHORT $LN5@uprv_stabl
; Line 71
	mov	eax, DWORD PTR _start$[ebp]
	add	eax, DWORD PTR _limit$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _i$5577[ebp], eax
; Line 72
	mov	eax, DWORD PTR _i$5577[ebp]
	imul	eax, DWORD PTR _itemSize$[ebp]
	add	eax, DWORD PTR _array$[ebp]
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _item$[ebp]
	push	ecx
	mov	edx, DWORD PTR _context$[ebp]
	push	edx
	call	DWORD PTR _cmp$[ebp]
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _diff$5578[ebp], eax
; Line 73
	cmp	DWORD PTR _diff$5578[ebp], 0
	jne	SHORT $LN9@uprv_stabl
; Line 85
	mov	BYTE PTR _found$[ebp], 1
; Line 86
	mov	eax, DWORD PTR _i$5577[ebp]
	add	eax, 1
	mov	DWORD PTR _start$[ebp], eax
	jmp	SHORT $LN8@uprv_stabl
$LN9@uprv_stabl:
; Line 87
	cmp	DWORD PTR _diff$5578[ebp], 0
	jge	SHORT $LN7@uprv_stabl
; Line 88
	mov	eax, DWORD PTR _i$5577[ebp]
	mov	DWORD PTR _limit$[ebp], eax
; Line 89
	jmp	SHORT $LN8@uprv_stabl
$LN7@uprv_stabl:
; Line 90
	mov	eax, DWORD PTR _i$5577[ebp]
	mov	DWORD PTR _start$[ebp], eax
$LN8@uprv_stabl:
; Line 92
	jmp	SHORT $LN11@uprv_stabl
$LN5@uprv_stabl:
; Line 95
	mov	eax, DWORD PTR _start$[ebp]
	cmp	eax, DWORD PTR _limit$[ebp]
	jge	SHORT $LN4@uprv_stabl
; Line 96
	mov	eax, DWORD PTR _start$[ebp]
	imul	eax, DWORD PTR _itemSize$[ebp]
	add	eax, DWORD PTR _array$[ebp]
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _item$[ebp]
	push	ecx
	mov	edx, DWORD PTR _context$[ebp]
	push	edx
	call	DWORD PTR _cmp$[ebp]
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _diff$5586[ebp], eax
; Line 97
	cmp	DWORD PTR _diff$5586[ebp], 0
	jne	SHORT $LN3@uprv_stabl
; Line 98
	mov	BYTE PTR _found$[ebp], 1
	jmp	SHORT $LN2@uprv_stabl
$LN3@uprv_stabl:
; Line 99
	cmp	DWORD PTR _diff$5586[ebp], 0
	jge	SHORT $LN2@uprv_stabl
; Line 100
	jmp	SHORT $LN4@uprv_stabl
$LN2@uprv_stabl:
; Line 102
	mov	eax, DWORD PTR _start$[ebp]
	add	eax, 1
	mov	DWORD PTR _start$[ebp], eax
; Line 103
	jmp	SHORT $LN5@uprv_stabl
$LN4@uprv_stabl:
; Line 104
	movsx	eax, BYTE PTR _found$[ebp]
	test	eax, eax
	je	SHORT $LN14@uprv_stabl
	mov	ecx, DWORD PTR _start$[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv91[ebp], ecx
	jmp	SHORT $LN15@uprv_stabl
$LN14@uprv_stabl:
	mov	edx, DWORD PTR _start$[ebp]
	not	edx
	mov	DWORD PTR tv91[ebp], edx
$LN15@uprv_stabl:
	mov	eax, DWORD PTR tv91[ebp]
; Line 105
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 256				; 00000100H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_uprv_stableBinarySearch_56 ENDP
_TEXT	ENDS
PUBLIC	_uprv_sortArray_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _uprv_sortArray_56
_TEXT	SEGMENT
_array$ = 8						; size = 4
_length$ = 12						; size = 4
_itemSize$ = 16						; size = 4
_cmp$ = 20						; size = 4
_context$ = 24						; size = 4
_sortStable$ = 28					; size = 1
_pErrorCode$ = 32					; size = 4
_uprv_sortArray_56 PROC					; COMDAT
; Line 267
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 268
	cmp	DWORD PTR _pErrorCode$[ebp], 0
	je	SHORT $LN9@uprv_sortA
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN10@uprv_sortA
$LN9@uprv_sortA:
; Line 269
	jmp	$LN11@uprv_sortA
$LN10@uprv_sortA:
; Line 271
	cmp	DWORD PTR _length$[ebp], 0
	jle	SHORT $LN6@uprv_sortA
	cmp	DWORD PTR _array$[ebp], 0
	je	SHORT $LN7@uprv_sortA
$LN6@uprv_sortA:
	cmp	DWORD PTR _length$[ebp], 0
	jl	SHORT $LN7@uprv_sortA
	cmp	DWORD PTR _itemSize$[ebp], 0
	jle	SHORT $LN7@uprv_sortA
	cmp	DWORD PTR _cmp$[ebp], 0
	jne	SHORT $LN8@uprv_sortA
$LN7@uprv_sortA:
; Line 272
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 1
; Line 273
	jmp	SHORT $LN11@uprv_sortA
$LN8@uprv_sortA:
; Line 276
	cmp	DWORD PTR _length$[ebp], 1
	jg	SHORT $LN5@uprv_sortA
; Line 277
	jmp	SHORT $LN11@uprv_sortA
	jmp	SHORT $LN11@uprv_sortA
$LN5@uprv_sortA:
; Line 278
	cmp	DWORD PTR _length$[ebp], 9
	jl	SHORT $LN2@uprv_sortA
	movsx	eax, BYTE PTR _sortStable$[ebp]
	test	eax, eax
	je	SHORT $LN3@uprv_sortA
$LN2@uprv_sortA:
; Line 279
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _context$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cmp$[ebp]
	push	edx
	mov	eax, DWORD PTR _itemSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _length$[ebp]
	push	ecx
	mov	edx, DWORD PTR _array$[ebp]
	push	edx
	call	_insertionSort
	add	esp, 24					; 00000018H
; Line 280
	jmp	SHORT $LN11@uprv_sortA
$LN3@uprv_sortA:
; Line 281
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _context$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cmp$[ebp]
	push	edx
	mov	eax, DWORD PTR _itemSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _length$[ebp]
	push	ecx
	mov	edx, DWORD PTR _array$[ebp]
	push	edx
	call	_quickSort
	add	esp, 24					; 00000018H
$LN11@uprv_sortA:
; Line 283
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_uprv_sortArray_56 ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_uprv_free_56:PROC
EXTRN	_uprv_malloc_56:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _insertionSort
_TEXT	SEGMENT
_pv$ = -228						; size = 4
_v$ = -216						; size = 208
__$ArrayPad$ = -4					; size = 4
_array$ = 8						; size = 4
_length$ = 12						; size = 4
_itemSize$ = 16						; size = 4
_cmp$ = 20						; size = 4
_context$ = 24						; size = 4
_pErrorCode$ = 28					; size = 4
_insertionSort PROC					; COMDAT
; Line 131
	push	ebp
	mov	ebp, esp
	sub	esp, 424				; 000001a8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-424]
	mov	ecx, 106				; 0000006aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 136
	cmp	DWORD PTR _itemSize$[ebp], 200		; 000000c8H
	jg	SHORT $LN4@insertionS
; Line 137
	lea	eax, DWORD PTR _v$[ebp]
	mov	DWORD PTR _pv$[ebp], eax
; Line 138
	jmp	SHORT $LN3@insertionS
$LN4@insertionS:
; Line 139
	mov	eax, DWORD PTR _itemSize$[ebp]
	push	eax
	call	_uprv_malloc_56
	add	esp, 4
	mov	DWORD PTR _pv$[ebp], eax
; Line 140
	cmp	DWORD PTR _pv$[ebp], 0
	jne	SHORT $LN3@insertionS
; Line 141
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 7
; Line 142
	jmp	SHORT $LN5@insertionS
$LN3@insertionS:
; Line 146
	mov	eax, DWORD PTR _pv$[ebp]
	push	eax
	mov	ecx, DWORD PTR _context$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cmp$[ebp]
	push	edx
	mov	eax, DWORD PTR _itemSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _length$[ebp]
	push	ecx
	mov	edx, DWORD PTR _array$[ebp]
	push	edx
	call	_doInsertionSort
	add	esp, 24					; 00000018H
; Line 148
	mov	eax, DWORD PTR _pv$[ebp]
	lea	ecx, DWORD PTR _v$[ebp]
	cmp	eax, ecx
	je	SHORT $LN5@insertionS
; Line 149
	mov	eax, DWORD PTR _pv$[ebp]
	push	eax
	call	_uprv_free_56
	add	esp, 4
$LN5@insertionS:
; Line 151
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@insertionS
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 424				; 000001a8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN9@insertionS:
	DD	1
	DD	$LN8@insertionS
$LN8@insertionS:
	DD	-216					; ffffff28H
	DD	208					; 000000d0H
	DD	$LN7@insertionS
$LN7@insertionS:
	DB	118					; 00000076H
	DB	0
_insertionSort ENDP
_TEXT	ENDS
EXTRN	__imp__memmove:PROC
EXTRN	_memcpy:PROC
EXTRN	_uprv_checkValidMemory:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _doInsertionSort
_TEXT	SEGMENT
_dest$5613 = -44					; size = 4
_insertionPoint$5609 = -32				; size = 4
_item$5608 = -20					; size = 4
_j$ = -8						; size = 4
_array$ = 8						; size = 4
_length$ = 12						; size = 4
_itemSize$ = 16						; size = 4
_cmp$ = 20						; size = 4
_context$ = 24						; size = 4
_pv$ = 28						; size = 4
_doInsertionSort PROC					; COMDAT
; Line 109
	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 112
	mov	DWORD PTR _j$[ebp], 1
	jmp	SHORT $LN6@doInsertio
$LN5@doInsertio:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN6@doInsertio:
	mov	eax, DWORD PTR _j$[ebp]
	cmp	eax, DWORD PTR _length$[ebp]
	jge	$LN7@doInsertio
; Line 113
	mov	eax, DWORD PTR _j$[ebp]
	imul	eax, DWORD PTR _itemSize$[ebp]
	add	eax, DWORD PTR _array$[ebp]
	mov	DWORD PTR _item$5608[ebp], eax
; Line 114
	mov	eax, DWORD PTR _context$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cmp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _itemSize$[ebp]
	push	edx
	mov	eax, DWORD PTR _item$5608[ebp]
	push	eax
	mov	ecx, DWORD PTR _j$[ebp]
	push	ecx
	mov	edx, DWORD PTR _array$[ebp]
	push	edx
	call	_uprv_stableBinarySearch_56
	add	esp, 24					; 00000018H
	mov	DWORD PTR _insertionPoint$5609[ebp], eax
; Line 115
	cmp	DWORD PTR _insertionPoint$5609[ebp], 0
	jge	SHORT $LN3@doInsertio
; Line 116
	mov	eax, DWORD PTR _insertionPoint$5609[ebp]
	not	eax
	mov	DWORD PTR _insertionPoint$5609[ebp], eax
; Line 117
	jmp	SHORT $LN2@doInsertio
$LN3@doInsertio:
; Line 118
	mov	eax, DWORD PTR _insertionPoint$5609[ebp]
	add	eax, 1
	mov	DWORD PTR _insertionPoint$5609[ebp], eax
$LN2@doInsertio:
; Line 120
	mov	eax, DWORD PTR _insertionPoint$5609[ebp]
	cmp	eax, DWORD PTR _j$[ebp]
	jge	$LN1@doInsertio
; Line 121
	mov	eax, DWORD PTR _insertionPoint$5609[ebp]
	imul	eax, DWORD PTR _itemSize$[ebp]
	add	eax, DWORD PTR _array$[ebp]
	mov	DWORD PTR _dest$5613[ebp], eax
; Line 122
	push	1
	mov	eax, DWORD PTR _item$5608[ebp]
	push	eax
	call	_uprv_checkValidMemory
	add	esp, 8
	mov	ecx, DWORD PTR _itemSize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _item$5608[ebp]
	push	edx
	mov	eax, DWORD PTR _pv$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 123
	push	1
	mov	eax, DWORD PTR _dest$5613[ebp]
	push	eax
	call	_uprv_checkValidMemory
	add	esp, 8
	mov	ecx, DWORD PTR _j$[ebp]
	sub	ecx, DWORD PTR _insertionPoint$5609[ebp]
	imul	ecx, DWORD PTR _itemSize$[ebp]
	mov	esi, esp
	push	ecx
	mov	edx, DWORD PTR _dest$5613[ebp]
	push	edx
	mov	eax, DWORD PTR _dest$5613[ebp]
	add	eax, DWORD PTR _itemSize$[ebp]
	push	eax
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 124
	push	1
	mov	eax, DWORD PTR _pv$[ebp]
	push	eax
	call	_uprv_checkValidMemory
	add	esp, 8
	mov	ecx, DWORD PTR _itemSize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pv$[ebp]
	push	edx
	mov	eax, DWORD PTR _dest$5613[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@doInsertio:
; Line 126
	jmp	$LN5@doInsertio
$LN7@doInsertio:
; Line 127
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_doInsertionSort ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _quickSort
_TEXT	SEGMENT
_p$ = -428						; size = 4
_xw$ = -416						; size = 408
__$ArrayPad$ = -4					; size = 4
_array$ = 8						; size = 4
_length$ = 12						; size = 4
_itemSize$ = 16						; size = 4
_cmp$ = 20						; size = 4
_context$ = 24						; size = 4
_pErrorCode$ = 28					; size = 4
_quickSort PROC						; COMDAT
; Line 235
	push	ebp
	mov	ebp, esp
	sub	esp, 624				; 00000270H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-624]
	mov	ecx, 156				; 0000009cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 240
	cmp	DWORD PTR _itemSize$[ebp], 200		; 000000c8H
	jg	SHORT $LN4@quickSort
; Line 241
	lea	eax, DWORD PTR _xw$[ebp]
	mov	DWORD PTR _p$[ebp], eax
; Line 242
	jmp	SHORT $LN3@quickSort
$LN4@quickSort:
; Line 243
	mov	eax, DWORD PTR _itemSize$[ebp]
	shl	eax, 1
	push	eax
	call	_uprv_malloc_56
	add	esp, 4
	mov	DWORD PTR _p$[ebp], eax
; Line 244
	cmp	DWORD PTR _p$[ebp], 0
	jne	SHORT $LN3@quickSort
; Line 245
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 7
; Line 246
	jmp	SHORT $LN5@quickSort
$LN3@quickSort:
; Line 251
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, DWORD PTR _itemSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	mov	edx, DWORD PTR _context$[ebp]
	push	edx
	mov	eax, DWORD PTR _cmp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _itemSize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _length$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _array$[ebp]
	push	eax
	call	_subQuickSort
	add	esp, 32					; 00000020H
; Line 253
	mov	eax, DWORD PTR _p$[ebp]
	lea	ecx, DWORD PTR _xw$[ebp]
	cmp	eax, ecx
	je	SHORT $LN5@quickSort
; Line 254
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_uprv_free_56
	add	esp, 4
$LN5@quickSort:
; Line 256
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@quickSort
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 624				; 00000270H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN9@quickSort:
	DD	1
	DD	$LN8@quickSort
$LN8@quickSort:
	DD	-416					; fffffe60H
	DD	408					; 00000198H
	DD	$LN7@quickSort
$LN7@quickSort:
	DB	120					; 00000078H
	DB	119					; 00000077H
	DB	0
_quickSort ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _subQuickSort
_TEXT	SEGMENT
_right$ = -20						; size = 4
_left$ = -8						; size = 4
_array$ = 8						; size = 4
_start$ = 12						; size = 4
_limit$ = 16						; size = 4
_itemSize$ = 20						; size = 4
_cmp$ = 24						; size = 4
_context$ = 28						; size = 4
_px$ = 32						; size = 4
_pw$ = 36						; size = 4
_subQuickSort PROC					; COMDAT
; Line 170
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
$LN17@subQuickSo:
; Line 175
	mov	eax, DWORD PTR _start$[ebp]
	add	eax, 9
	cmp	eax, DWORD PTR _limit$[ebp]
	jl	SHORT $LN14@subQuickSo
; Line 176
	mov	eax, DWORD PTR _px$[ebp]
	push	eax
	mov	ecx, DWORD PTR _context$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cmp$[ebp]
	push	edx
	mov	eax, DWORD PTR _itemSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _limit$[ebp]
	sub	ecx, DWORD PTR _start$[ebp]
	push	ecx
	mov	edx, DWORD PTR _start$[ebp]
	imul	edx, DWORD PTR _itemSize$[ebp]
	add	edx, DWORD PTR _array$[ebp]
	push	edx
	call	_doInsertionSort
	add	esp, 24					; 00000018H
; Line 177
	jmp	$LN18@subQuickSo
$LN14@subQuickSo:
; Line 180
	mov	eax, DWORD PTR _start$[ebp]
	mov	DWORD PTR _left$[ebp], eax
; Line 181
	mov	eax, DWORD PTR _limit$[ebp]
	mov	DWORD PTR _right$[ebp], eax
; Line 184
	push	1
	mov	eax, DWORD PTR _start$[ebp]
	add	eax, DWORD PTR _limit$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	imul	eax, DWORD PTR _itemSize$[ebp]
	add	eax, DWORD PTR _array$[ebp]
	push	eax
	call	_uprv_checkValidMemory
	add	esp, 8
	mov	eax, DWORD PTR _itemSize$[ebp]
	push	eax
	mov	eax, DWORD PTR _start$[ebp]
	add	eax, DWORD PTR _limit$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	imul	eax, DWORD PTR _itemSize$[ebp]
	add	eax, DWORD PTR _array$[ebp]
	push	eax
	mov	ecx, DWORD PTR _px$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN10@subQuickSo:
; Line 189
	mov	esi, esp
	mov	eax, DWORD PTR _px$[ebp]
	push	eax
	mov	ecx, DWORD PTR _left$[ebp]
	imul	ecx, DWORD PTR _itemSize$[ebp]
	add	ecx, DWORD PTR _array$[ebp]
	push	ecx
	mov	edx, DWORD PTR _context$[ebp]
	push	edx
	call	DWORD PTR _cmp$[ebp]
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jge	SHORT $LN8@subQuickSo
; Line 190
	mov	eax, DWORD PTR _left$[ebp]
	add	eax, 1
	mov	DWORD PTR _left$[ebp], eax
; Line 191
	jmp	SHORT $LN10@subQuickSo
$LN8@subQuickSo:
; Line 194
	mov	eax, DWORD PTR _right$[ebp]
	sub	eax, 1
	imul	eax, DWORD PTR _itemSize$[ebp]
	add	eax, DWORD PTR _array$[ebp]
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _px$[ebp]
	push	ecx
	mov	edx, DWORD PTR _context$[ebp]
	push	edx
	call	DWORD PTR _cmp$[ebp]
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jge	SHORT $LN7@subQuickSo
; Line 195
	mov	eax, DWORD PTR _right$[ebp]
	sub	eax, 1
	mov	DWORD PTR _right$[ebp], eax
; Line 196
	jmp	SHORT $LN8@subQuickSo
$LN7@subQuickSo:
; Line 199
	mov	eax, DWORD PTR _left$[ebp]
	cmp	eax, DWORD PTR _right$[ebp]
	jge	$LN12@subQuickSo
; Line 200
	mov	eax, DWORD PTR _right$[ebp]
	sub	eax, 1
	mov	DWORD PTR _right$[ebp], eax
; Line 202
	mov	eax, DWORD PTR _left$[ebp]
	cmp	eax, DWORD PTR _right$[ebp]
	jge	$LN5@subQuickSo
; Line 203
	push	1
	mov	eax, DWORD PTR _left$[ebp]
	imul	eax, DWORD PTR _itemSize$[ebp]
	add	eax, DWORD PTR _array$[ebp]
	push	eax
	call	_uprv_checkValidMemory
	add	esp, 8
	mov	ecx, DWORD PTR _itemSize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _left$[ebp]
	imul	edx, DWORD PTR _itemSize$[ebp]
	add	edx, DWORD PTR _array$[ebp]
	push	edx
	mov	eax, DWORD PTR _pw$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 204
	push	1
	mov	eax, DWORD PTR _right$[ebp]
	imul	eax, DWORD PTR _itemSize$[ebp]
	add	eax, DWORD PTR _array$[ebp]
	push	eax
	call	_uprv_checkValidMemory
	add	esp, 8
	mov	ecx, DWORD PTR _itemSize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _right$[ebp]
	imul	edx, DWORD PTR _itemSize$[ebp]
	add	edx, DWORD PTR _array$[ebp]
	push	edx
	mov	eax, DWORD PTR _left$[ebp]
	imul	eax, DWORD PTR _itemSize$[ebp]
	add	eax, DWORD PTR _array$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 205
	push	1
	mov	eax, DWORD PTR _pw$[ebp]
	push	eax
	call	_uprv_checkValidMemory
	add	esp, 8
	mov	ecx, DWORD PTR _itemSize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pw$[ebp]
	push	edx
	mov	eax, DWORD PTR _right$[ebp]
	imul	eax, DWORD PTR _itemSize$[ebp]
	add	eax, DWORD PTR _array$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN5@subQuickSo:
; Line 208
	mov	eax, DWORD PTR _left$[ebp]
	add	eax, 1
	mov	DWORD PTR _left$[ebp], eax
$LN12@subQuickSo:
; Line 210
	mov	eax, DWORD PTR _left$[ebp]
	cmp	eax, DWORD PTR _right$[ebp]
	jl	$LN10@subQuickSo
; Line 213
	mov	eax, DWORD PTR _right$[ebp]
	sub	eax, DWORD PTR _start$[ebp]
	mov	ecx, DWORD PTR _limit$[ebp]
	sub	ecx, DWORD PTR _left$[ebp]
	cmp	eax, ecx
	jge	SHORT $LN4@subQuickSo
; Line 215
	mov	eax, DWORD PTR _right$[ebp]
	sub	eax, 1
	cmp	DWORD PTR _start$[ebp], eax
	jge	SHORT $LN3@subQuickSo
; Line 216
	mov	eax, DWORD PTR _pw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _px$[ebp]
	push	ecx
	mov	edx, DWORD PTR _context$[ebp]
	push	edx
	mov	eax, DWORD PTR _cmp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _itemSize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _right$[ebp]
	push	edx
	mov	eax, DWORD PTR _start$[ebp]
	push	eax
	mov	ecx, DWORD PTR _array$[ebp]
	push	ecx
	call	_subQuickSort
	add	esp, 32					; 00000020H
$LN3@subQuickSo:
; Line 220
	mov	eax, DWORD PTR _left$[ebp]
	mov	DWORD PTR _start$[ebp], eax
; Line 221
	jmp	SHORT $LN16@subQuickSo
$LN4@subQuickSo:
; Line 223
	mov	eax, DWORD PTR _limit$[ebp]
	sub	eax, 1
	cmp	DWORD PTR _left$[ebp], eax
	jge	SHORT $LN1@subQuickSo
; Line 224
	mov	eax, DWORD PTR _pw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _px$[ebp]
	push	ecx
	mov	edx, DWORD PTR _context$[ebp]
	push	edx
	mov	eax, DWORD PTR _cmp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _itemSize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _limit$[ebp]
	push	edx
	mov	eax, DWORD PTR _left$[ebp]
	push	eax
	mov	ecx, DWORD PTR _array$[ebp]
	push	ecx
	call	_subQuickSort
	add	esp, 32					; 00000020H
$LN1@subQuickSo:
; Line 228
	mov	eax, DWORD PTR _right$[ebp]
	mov	DWORD PTR _limit$[ebp], eax
$LN16@subQuickSo:
; Line 230
	mov	eax, DWORD PTR _limit$[ebp]
	sub	eax, 1
	cmp	DWORD PTR _start$[ebp], eax
	jl	$LN17@subQuickSo
$LN18@subQuickSo:
; Line 231
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_subQuickSort ENDP
_TEXT	ENDS
END
