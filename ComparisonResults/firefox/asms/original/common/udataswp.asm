; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\mozilla\intl\icu\source\common\udataswp.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_udata_readInt16_56
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File d:\mozilla\intl\icu\source\common\udataswp.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT _udata_readInt16_56
_TEXT	SEGMENT
_ds$ = 8						; size = 4
_x$ = 12						; size = 2
_udata_readInt16_56 PROC				; COMDAT
; Line 216
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 217
	mov	esi, esp
	movzx	eax, WORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ds$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 218
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_udata_readInt16_56 ENDP
_TEXT	ENDS
PUBLIC	_udata_readInt32_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _udata_readInt32_56
_TEXT	SEGMENT
_ds$ = 8						; size = 4
_x$ = 12						; size = 4
_udata_readInt32_56 PROC				; COMDAT
; Line 221
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 222
	mov	esi, esp
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ds$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 223
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_udata_readInt32_56 ENDP
_TEXT	ENDS
PUBLIC	_udata_swapInvStringBlock_56
EXTRN	_memcpy:PROC
EXTRN	_uprv_checkValidMemory:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _udata_swapInvStringBlock_56
_TEXT	SEGMENT
_stringsLength$ = -20					; size = 4
_inChars$ = -8						; size = 4
_ds$ = 8						; size = 4
_inData$ = 12						; size = 4
_length$ = 16						; size = 4
_outData$ = 20						; size = 4
_pErrorCode$ = 24					; size = 4
_udata_swapInvStringBlock_56 PROC			; COMDAT
; Line 233
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 237
	cmp	DWORD PTR _pErrorCode$[ebp], 0
	je	SHORT $LN8@udata_swap
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN9@udata_swap
$LN8@udata_swap:
; Line 238
	xor	eax, eax
	jmp	$LN10@udata_swap
$LN9@udata_swap:
; Line 240
	cmp	DWORD PTR _ds$[ebp], 0
	je	SHORT $LN6@udata_swap
	cmp	DWORD PTR _inData$[ebp], 0
	je	SHORT $LN6@udata_swap
	cmp	DWORD PTR _length$[ebp], 0
	jl	SHORT $LN6@udata_swap
	cmp	DWORD PTR _length$[ebp], 0
	jle	SHORT $LN7@udata_swap
	cmp	DWORD PTR _outData$[ebp], 0
	jne	SHORT $LN7@udata_swap
$LN6@udata_swap:
; Line 241
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 1
; Line 242
	xor	eax, eax
	jmp	$LN10@udata_swap
$LN7@udata_swap:
; Line 246
	mov	eax, DWORD PTR _inData$[ebp]
	mov	DWORD PTR _inChars$[ebp], eax
; Line 247
	mov	eax, DWORD PTR _length$[ebp]
	mov	DWORD PTR _stringsLength$[ebp], eax
$LN5@udata_swap:
; Line 248
	cmp	DWORD PTR _stringsLength$[ebp], 0
	jle	SHORT $LN4@udata_swap
	mov	eax, DWORD PTR _inChars$[ebp]
	add	eax, DWORD PTR _stringsLength$[ebp]
	movsx	ecx, BYTE PTR [eax-1]
	test	ecx, ecx
	je	SHORT $LN4@udata_swap
; Line 249
	mov	eax, DWORD PTR _stringsLength$[ebp]
	sub	eax, 1
	mov	DWORD PTR _stringsLength$[ebp], eax
; Line 250
	jmp	SHORT $LN5@udata_swap
$LN4@udata_swap:
; Line 253
	mov	esi, esp
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _outData$[ebp]
	push	ecx
	mov	edx, DWORD PTR _stringsLength$[ebp]
	push	edx
	mov	eax, DWORD PTR _inData$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ds$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ds$[ebp]
	mov	eax, DWORD PTR [edx+36]
	call	eax
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 256
	mov	eax, DWORD PTR _inData$[ebp]
	cmp	eax, DWORD PTR _outData$[ebp]
	je	SHORT $LN3@udata_swap
	mov	eax, DWORD PTR _length$[ebp]
	cmp	eax, DWORD PTR _stringsLength$[ebp]
	jle	SHORT $LN3@udata_swap
; Line 257
	push	1
	mov	eax, DWORD PTR _inChars$[ebp]
	add	eax, DWORD PTR _stringsLength$[ebp]
	push	eax
	call	_uprv_checkValidMemory
	add	esp, 8
	mov	ecx, DWORD PTR _length$[ebp]
	sub	ecx, DWORD PTR _stringsLength$[ebp]
	push	ecx
	mov	edx, DWORD PTR _inChars$[ebp]
	add	edx, DWORD PTR _stringsLength$[ebp]
	push	edx
	mov	eax, DWORD PTR _outData$[ebp]
	add	eax, DWORD PTR _stringsLength$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN3@udata_swap:
; Line 261
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	cmp	DWORD PTR [eax], 0
	jg	SHORT $LN2@udata_swap
; Line 262
	mov	eax, DWORD PTR _length$[ebp]
	jmp	SHORT $LN10@udata_swap
; Line 263
	jmp	SHORT $LN10@udata_swap
$LN2@udata_swap:
; Line 264
	xor	eax, eax
$LN10@udata_swap:
; Line 266
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_udata_swapInvStringBlock_56 ENDP
_TEXT	ENDS
PUBLIC	_udata_printError_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _udata_printError_56
_TEXT	SEGMENT
_args$ = -8						; size = 4
_ds$ = 8						; size = 4
_fmt$ = 12						; size = 4
_udata_printError_56 PROC				; COMDAT
; Line 271
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 274
	mov	eax, DWORD PTR _ds$[ebp]
	cmp	DWORD PTR [eax+40], 0
	je	SHORT $LN2@udata_prin
; Line 275
	lea	eax, DWORD PTR _fmt$[ebp+4]
	mov	DWORD PTR _args$[ebp], eax
; Line 276
	mov	esi, esp
	mov	eax, DWORD PTR _args$[ebp]
	push	eax
	mov	ecx, DWORD PTR _fmt$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ds$[ebp]
	mov	eax, DWORD PTR [edx+44]
	push	eax
	mov	ecx, DWORD PTR _ds$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 277
	mov	DWORD PTR _args$[ebp], 0
$LN2@udata_prin:
; Line 279
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_udata_printError_56 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0FE@LPPODGNH@udata_swapDataHeader?$CI?$CJ?3?5header?5s@ ; `string'
PUBLIC	??_C@_0EB@GINDMELE@udata_swapDataHeader?$CI?$CJ?3?5initial?5@ ; `string'
PUBLIC	_udata_swapDataHeader_56
;	COMDAT ??_C@_0FE@LPPODGNH@udata_swapDataHeader?$CI?$CJ?3?5header?5s@
CONST	SEGMENT
??_C@_0FE@LPPODGNH@udata_swapDataHeader?$CI?$CJ?3?5header?5s@ DB 'udata_s'
	DB	'wapDataHeader(): header size mismatch - headerSize %d infoSiz'
	DB	'e %d length %d', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0EB@GINDMELE@udata_swapDataHeader?$CI?$CJ?3?5initial?5@
CONST	SEGMENT
??_C@_0EB@GINDMELE@udata_swapDataHeader?$CI?$CJ?3?5initial?5@ DB 'udata_s'
	DB	'wapDataHeader(): initial bytes do not look like ICU data', 0aH
	DB	00H						; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT _udata_swapDataHeader_56
_TEXT	SEGMENT
_maxLength$6269 = -68					; size = 4
_s$6268 = -56						; size = 4
_outHeader$6267 = -44					; size = 4
_infoSize$ = -32					; size = 2
_headerSize$ = -20					; size = 2
_pHeader$ = -8						; size = 4
_ds$ = 8						; size = 4
_inData$ = 12						; size = 4
_length$ = 16						; size = 4
_outData$ = 20						; size = 4
_pErrorCode$ = 24					; size = 4
_udata_swapDataHeader_56 PROC				; COMDAT
; Line 286
	push	ebp
	mov	ebp, esp
	sub	esp, 264				; 00000108H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-264]
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 291
	cmp	DWORD PTR _pErrorCode$[ebp], 0
	je	SHORT $LN13@udata_swap@2
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN14@udata_swap@2
$LN13@udata_swap@2:
; Line 292
	xor	eax, eax
	jmp	$LN15@udata_swap@2
$LN14@udata_swap@2:
; Line 294
	cmp	DWORD PTR _ds$[ebp], 0
	je	SHORT $LN11@udata_swap@2
	cmp	DWORD PTR _inData$[ebp], 0
	je	SHORT $LN11@udata_swap@2
	cmp	DWORD PTR _length$[ebp], -1
	jl	SHORT $LN11@udata_swap@2
	cmp	DWORD PTR _length$[ebp], 0
	jle	SHORT $LN12@udata_swap@2
	cmp	DWORD PTR _outData$[ebp], 0
	jne	SHORT $LN12@udata_swap@2
$LN11@udata_swap@2:
; Line 295
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 1
; Line 296
	xor	eax, eax
	jmp	$LN15@udata_swap@2
$LN12@udata_swap@2:
; Line 300
	mov	eax, DWORD PTR _inData$[ebp]
	mov	DWORD PTR _pHeader$[ebp], eax
; Line 305
	cmp	DWORD PTR _length$[ebp], 0
	jl	SHORT $LN8@udata_swap@2
	cmp	DWORD PTR _length$[ebp], 24		; 00000018H
	jb	SHORT $LN9@udata_swap@2
$LN8@udata_swap@2:
	mov	eax, DWORD PTR _pHeader$[ebp]
	movzx	ecx, BYTE PTR [eax+2]
	cmp	ecx, 218				; 000000daH
	jne	SHORT $LN9@udata_swap@2
	mov	eax, DWORD PTR _pHeader$[ebp]
	movzx	ecx, BYTE PTR [eax+3]
	cmp	ecx, 39					; 00000027H
	jne	SHORT $LN9@udata_swap@2
	mov	eax, DWORD PTR _pHeader$[ebp]
	movzx	ecx, BYTE PTR [eax+10]
	cmp	ecx, 2
	je	SHORT $LN10@udata_swap@2
$LN9@udata_swap@2:
; Line 306
	push	OFFSET ??_C@_0EB@GINDMELE@udata_swapDataHeader?$CI?$CJ?3?5initial?5@
	mov	eax, DWORD PTR _ds$[ebp]
	push	eax
	call	_udata_printError_56
	add	esp, 8
; Line 307
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 16			; 00000010H
; Line 308
	xor	eax, eax
	jmp	$LN15@udata_swap@2
$LN10@udata_swap@2:
; Line 311
	mov	esi, esp
	mov	eax, DWORD PTR _pHeader$[ebp]
	movzx	ecx, WORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _ds$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	WORD PTR _headerSize$[ebp], ax
; Line 312
	mov	esi, esp
	mov	eax, DWORD PTR _pHeader$[ebp]
	movzx	ecx, WORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _ds$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	WORD PTR _infoSize$[ebp], ax
; Line 318
	movzx	eax, WORD PTR _headerSize$[ebp]
	cmp	eax, 24					; 00000018H
	jb	SHORT $LN6@udata_swap@2
	movzx	eax, WORD PTR _infoSize$[ebp]
	cmp	eax, 20					; 00000014H
	jb	SHORT $LN6@udata_swap@2
	movzx	eax, WORD PTR _headerSize$[ebp]
	movzx	ecx, WORD PTR _infoSize$[ebp]
	add	ecx, 4
	cmp	eax, ecx
	jb	SHORT $LN6@udata_swap@2
	cmp	DWORD PTR _length$[ebp], 0
	jl	SHORT $LN7@udata_swap@2
	movzx	eax, WORD PTR _headerSize$[ebp]
	cmp	DWORD PTR _length$[ebp], eax
	jge	SHORT $LN7@udata_swap@2
$LN6@udata_swap@2:
; Line 320
	mov	eax, DWORD PTR _length$[ebp]
	push	eax
	movzx	ecx, WORD PTR _infoSize$[ebp]
	push	ecx
	movzx	edx, WORD PTR _headerSize$[ebp]
	push	edx
	push	OFFSET ??_C@_0FE@LPPODGNH@udata_swapDataHeader?$CI?$CJ?3?5header?5s@
	mov	eax, DWORD PTR _ds$[ebp]
	push	eax
	call	_udata_printError_56
	add	esp, 20					; 00000014H
; Line 321
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 8
; Line 322
	xor	eax, eax
	jmp	$LN15@udata_swap@2
$LN7@udata_swap@2:
; Line 325
	cmp	DWORD PTR _length$[ebp], 0
	jle	$LN5@udata_swap@2
; Line 331
	mov	eax, DWORD PTR _inData$[ebp]
	cmp	eax, DWORD PTR _outData$[ebp]
	je	SHORT $LN4@udata_swap@2
; Line 332
	push	1
	mov	eax, DWORD PTR _inData$[ebp]
	push	eax
	call	_uprv_checkValidMemory
	add	esp, 8
	movzx	ecx, WORD PTR _headerSize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _inData$[ebp]
	push	edx
	mov	eax, DWORD PTR _outData$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN4@udata_swap@2:
; Line 334
	mov	eax, DWORD PTR _outData$[ebp]
	mov	DWORD PTR _outHeader$6267[ebp], eax
; Line 336
	mov	eax, DWORD PTR _outHeader$6267[ebp]
	mov	ecx, DWORD PTR _ds$[ebp]
	mov	dl, BYTE PTR [ecx+2]
	mov	BYTE PTR [eax+8], dl
; Line 337
	mov	eax, DWORD PTR _outHeader$6267[ebp]
	mov	ecx, DWORD PTR _ds$[ebp]
	mov	dl, BYTE PTR [ecx+3]
	mov	BYTE PTR [eax+9], dl
; Line 340
	mov	esi, esp
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _outHeader$6267[ebp]
	push	ecx
	push	2
	mov	edx, DWORD PTR _pHeader$[ebp]
	push	edx
	mov	eax, DWORD PTR _ds$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ds$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	call	edx
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 343
	mov	esi, esp
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _outHeader$6267[ebp]
	add	ecx, 4
	push	ecx
	push	4
	mov	edx, DWORD PTR _pHeader$[ebp]
	add	edx, 4
	push	edx
	mov	eax, DWORD PTR _ds$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ds$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	call	edx
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 346
	movzx	eax, WORD PTR _infoSize$[ebp]
	add	eax, 4
	mov	WORD PTR _infoSize$[ebp], ax
; Line 347
	movzx	eax, WORD PTR _infoSize$[ebp]
	add	eax, DWORD PTR _inData$[ebp]
	mov	DWORD PTR _s$6268[ebp], eax
; Line 348
	movzx	eax, WORD PTR _headerSize$[ebp]
	movzx	ecx, WORD PTR _infoSize$[ebp]
	sub	eax, ecx
	mov	DWORD PTR _maxLength$6269[ebp], eax
; Line 350
	mov	DWORD PTR _length$[ebp], 0
	jmp	SHORT $LN3@udata_swap@2
$LN2@udata_swap@2:
	mov	eax, DWORD PTR _length$[ebp]
	add	eax, 1
	mov	DWORD PTR _length$[ebp], eax
$LN3@udata_swap@2:
	mov	eax, DWORD PTR _length$[ebp]
	cmp	eax, DWORD PTR _maxLength$6269[ebp]
	jge	SHORT $LN1@udata_swap@2
	mov	eax, DWORD PTR _s$6268[ebp]
	add	eax, DWORD PTR _length$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN1@udata_swap@2
	jmp	SHORT $LN2@udata_swap@2
$LN1@udata_swap@2:
; Line 352
	mov	esi, esp
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	movzx	ecx, WORD PTR _infoSize$[ebp]
	add	ecx, DWORD PTR _outData$[ebp]
	push	ecx
	mov	edx, DWORD PTR _length$[ebp]
	push	edx
	mov	eax, DWORD PTR _s$6268[ebp]
	push	eax
	mov	ecx, DWORD PTR _ds$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ds$[ebp]
	mov	eax, DWORD PTR [edx+36]
	call	eax
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN5@udata_swap@2:
; Line 355
	movzx	eax, WORD PTR _headerSize$[ebp]
$LN15@udata_swap@2:
; Line 356
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 264				; 00000108H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_udata_swapDataHeader_56 ENDP
_TEXT	ENDS
PUBLIC	_udata_openSwapper_56
EXTRN	_uprv_asciiFromEbcdic_56:PROC
EXTRN	_uprv_copyEbcdic_56:PROC
EXTRN	_uprv_ebcdicFromAscii_56:PROC
EXTRN	_uprv_copyAscii_56:PROC
EXTRN	_uprv_compareInvEbcdic_56:PROC
EXTRN	_uprv_compareInvAscii_56:PROC
EXTRN	_memset:PROC
EXTRN	_uprv_malloc_56:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _udata_openSwapper_56
_TEXT	SEGMENT
tv149 = -208						; size = 4
tv145 = -208						; size = 4
tv130 = -208						; size = 4
tv94 = -208						; size = 4
tv90 = -208						; size = 4
tv86 = -208						; size = 4
tv82 = -208						; size = 4
_swapper$ = -8						; size = 4
_inIsBigEndian$ = 8					; size = 1
_inCharset$ = 12					; size = 1
_outIsBigEndian$ = 16					; size = 1
_outCharset$ = 20					; size = 1
_pErrorCode$ = 24					; size = 4
_udata_openSwapper_56 PROC				; COMDAT
; Line 363
	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 366
	cmp	DWORD PTR _pErrorCode$[ebp], 0
	je	SHORT $LN8@udata_open
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN9@udata_open
$LN8@udata_open:
; Line 367
	xor	eax, eax
	jmp	$LN10@udata_open
$LN9@udata_open:
; Line 369
	movzx	eax, BYTE PTR _inCharset$[ebp]
	cmp	eax, 1
	jg	SHORT $LN6@udata_open
	movzx	eax, BYTE PTR _outCharset$[ebp]
	cmp	eax, 1
	jle	SHORT $LN7@udata_open
$LN6@udata_open:
; Line 370
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 1
; Line 371
	xor	eax, eax
	jmp	$LN10@udata_open
$LN7@udata_open:
; Line 375
	push	48					; 00000030H
	call	_uprv_malloc_56
	add	esp, 4
	mov	DWORD PTR _swapper$[ebp], eax
; Line 376
	cmp	DWORD PTR _swapper$[ebp], 0
	jne	SHORT $LN5@udata_open
; Line 377
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 7
; Line 378
	xor	eax, eax
	jmp	$LN10@udata_open
$LN5@udata_open:
; Line 380
	push	48					; 00000030H
	push	0
	mov	eax, DWORD PTR _swapper$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
; Line 383
	mov	eax, DWORD PTR _swapper$[ebp]
	mov	cl, BYTE PTR _inIsBigEndian$[ebp]
	mov	BYTE PTR [eax], cl
; Line 384
	mov	eax, DWORD PTR _swapper$[ebp]
	mov	cl, BYTE PTR _inCharset$[ebp]
	mov	BYTE PTR [eax+1], cl
; Line 385
	mov	eax, DWORD PTR _swapper$[ebp]
	mov	cl, BYTE PTR _outIsBigEndian$[ebp]
	mov	BYTE PTR [eax+2], cl
; Line 386
	mov	eax, DWORD PTR _swapper$[ebp]
	mov	cl, BYTE PTR _outCharset$[ebp]
	mov	BYTE PTR [eax+3], cl
; Line 388
	movsx	eax, BYTE PTR _inIsBigEndian$[ebp]
	test	eax, eax
	jne	SHORT $LN12@udata_open
	mov	DWORD PTR tv82[ebp], OFFSET _uprv_readDirectUInt16
	jmp	SHORT $LN13@udata_open
$LN12@udata_open:
	mov	DWORD PTR tv82[ebp], OFFSET _uprv_readSwapUInt16
$LN13@udata_open:
	mov	ecx, DWORD PTR _swapper$[ebp]
	mov	edx, DWORD PTR tv82[ebp]
	mov	DWORD PTR [ecx+4], edx
; Line 389
	movsx	eax, BYTE PTR _inIsBigEndian$[ebp]
	test	eax, eax
	jne	SHORT $LN14@udata_open
	mov	DWORD PTR tv86[ebp], OFFSET _uprv_readDirectUInt32
	jmp	SHORT $LN15@udata_open
$LN14@udata_open:
	mov	DWORD PTR tv86[ebp], OFFSET _uprv_readSwapUInt32
$LN15@udata_open:
	mov	ecx, DWORD PTR _swapper$[ebp]
	mov	edx, DWORD PTR tv86[ebp]
	mov	DWORD PTR [ecx+8], edx
; Line 391
	movsx	eax, BYTE PTR _outIsBigEndian$[ebp]
	test	eax, eax
	jne	SHORT $LN16@udata_open
	mov	DWORD PTR tv90[ebp], OFFSET _uprv_writeDirectUInt16
	jmp	SHORT $LN17@udata_open
$LN16@udata_open:
	mov	DWORD PTR tv90[ebp], OFFSET _uprv_writeSwapUInt16
$LN17@udata_open:
	mov	ecx, DWORD PTR _swapper$[ebp]
	mov	edx, DWORD PTR tv90[ebp]
	mov	DWORD PTR [ecx+16], edx
; Line 392
	movsx	eax, BYTE PTR _outIsBigEndian$[ebp]
	test	eax, eax
	jne	SHORT $LN18@udata_open
	mov	DWORD PTR tv94[ebp], OFFSET _uprv_writeDirectUInt32
	jmp	SHORT $LN19@udata_open
$LN18@udata_open:
	mov	DWORD PTR tv94[ebp], OFFSET _uprv_writeSwapUInt32
$LN19@udata_open:
	mov	ecx, DWORD PTR _swapper$[ebp]
	mov	edx, DWORD PTR tv94[ebp]
	mov	DWORD PTR [ecx+20], edx
; Line 394
	movzx	eax, BYTE PTR _outCharset$[ebp]
	test	eax, eax
	jne	SHORT $LN20@udata_open
	mov	DWORD PTR tv130[ebp], OFFSET _uprv_compareInvAscii_56
	jmp	SHORT $LN21@udata_open
$LN20@udata_open:
	mov	DWORD PTR tv130[ebp], OFFSET _uprv_compareInvEbcdic_56
$LN21@udata_open:
	mov	ecx, DWORD PTR _swapper$[ebp]
	mov	edx, DWORD PTR tv130[ebp]
	mov	DWORD PTR [ecx+12], edx
; Line 396
	movsx	eax, BYTE PTR _inIsBigEndian$[ebp]
	movsx	ecx, BYTE PTR _outIsBigEndian$[ebp]
	cmp	eax, ecx
	jne	SHORT $LN4@udata_open
; Line 397
	mov	eax, DWORD PTR _swapper$[ebp]
	mov	DWORD PTR [eax+24], OFFSET _uprv_copyArray16
; Line 398
	mov	eax, DWORD PTR _swapper$[ebp]
	mov	DWORD PTR [eax+28], OFFSET _uprv_copyArray32
; Line 399
	mov	eax, DWORD PTR _swapper$[ebp]
	mov	DWORD PTR [eax+32], OFFSET _uprv_copyArray64
; Line 400
	jmp	SHORT $LN3@udata_open
$LN4@udata_open:
; Line 401
	mov	eax, DWORD PTR _swapper$[ebp]
	mov	DWORD PTR [eax+24], OFFSET _uprv_swapArray16
; Line 402
	mov	eax, DWORD PTR _swapper$[ebp]
	mov	DWORD PTR [eax+28], OFFSET _uprv_swapArray32
; Line 403
	mov	eax, DWORD PTR _swapper$[ebp]
	mov	DWORD PTR [eax+32], OFFSET _uprv_swapArray64
$LN3@udata_open:
; Line 406
	movzx	eax, BYTE PTR _inCharset$[ebp]
	test	eax, eax
	jne	SHORT $LN2@udata_open
; Line 407
	movzx	eax, BYTE PTR _outCharset$[ebp]
	test	eax, eax
	jne	SHORT $LN22@udata_open
	mov	DWORD PTR tv145[ebp], OFFSET _uprv_copyAscii_56
	jmp	SHORT $LN23@udata_open
$LN22@udata_open:
	mov	DWORD PTR tv145[ebp], OFFSET _uprv_ebcdicFromAscii_56
$LN23@udata_open:
	mov	ecx, DWORD PTR _swapper$[ebp]
	mov	edx, DWORD PTR tv145[ebp]
	mov	DWORD PTR [ecx+36], edx
; Line 408
	jmp	SHORT $LN1@udata_open
$LN2@udata_open:
; Line 409
	movzx	eax, BYTE PTR _outCharset$[ebp]
	cmp	eax, 1
	jne	SHORT $LN24@udata_open
	mov	DWORD PTR tv149[ebp], OFFSET _uprv_copyEbcdic_56
	jmp	SHORT $LN25@udata_open
$LN24@udata_open:
	mov	DWORD PTR tv149[ebp], OFFSET _uprv_asciiFromEbcdic_56
$LN25@udata_open:
	mov	ecx, DWORD PTR _swapper$[ebp]
	mov	edx, DWORD PTR tv149[ebp]
	mov	DWORD PTR [ecx+36], edx
$LN1@udata_open:
; Line 412
	mov	eax, DWORD PTR _swapper$[ebp]
$LN10@udata_open:
; Line 413
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_udata_openSwapper_56 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _uprv_swapArray16
_TEXT	SEGMENT
_x$ = -44						; size = 2
_count$ = -32						; size = 4
_q$ = -20						; size = 4
_p$ = -8						; size = 4
_ds$ = 8						; size = 4
_inData$ = 12						; size = 4
_length$ = 16						; size = 4
_outData$ = 20						; size = 4
_pErrorCode$ = 24					; size = 4
_uprv_swapArray16 PROC					; COMDAT
; Line 33
	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 39
	cmp	DWORD PTR _pErrorCode$[ebp], 0
	je	SHORT $LN5@uprv_swapA
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN6@uprv_swapA
$LN5@uprv_swapA:
; Line 40
	xor	eax, eax
	jmp	$LN7@uprv_swapA
$LN6@uprv_swapA:
; Line 42
	cmp	DWORD PTR _ds$[ebp], 0
	je	SHORT $LN3@uprv_swapA
	cmp	DWORD PTR _inData$[ebp], 0
	je	SHORT $LN3@uprv_swapA
	cmp	DWORD PTR _length$[ebp], 0
	jl	SHORT $LN3@uprv_swapA
	mov	eax, DWORD PTR _length$[ebp]
	and	eax, 1
	jne	SHORT $LN3@uprv_swapA
	cmp	DWORD PTR _outData$[ebp], 0
	jne	SHORT $LN4@uprv_swapA
$LN3@uprv_swapA:
; Line 43
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 1
; Line 44
	xor	eax, eax
	jmp	SHORT $LN7@uprv_swapA
$LN4@uprv_swapA:
; Line 48
	mov	eax, DWORD PTR _inData$[ebp]
	mov	DWORD PTR _p$[ebp], eax
; Line 49
	mov	eax, DWORD PTR _outData$[ebp]
	mov	DWORD PTR _q$[ebp], eax
; Line 50
	mov	eax, DWORD PTR _length$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _count$[ebp], eax
$LN2@uprv_swapA:
; Line 51
	cmp	DWORD PTR _count$[ebp], 0
	jle	SHORT $LN1@uprv_swapA
; Line 52
	mov	eax, DWORD PTR _p$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR _x$[ebp], cx
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 2
	mov	DWORD PTR _p$[ebp], edx
; Line 53
	movzx	eax, WORD PTR _x$[ebp]
	shl	eax, 8
	movzx	ecx, WORD PTR _x$[ebp]
	sar	ecx, 8
	or	eax, ecx
	mov	edx, DWORD PTR _q$[ebp]
	mov	WORD PTR [edx], ax
	mov	eax, DWORD PTR _q$[ebp]
	add	eax, 2
	mov	DWORD PTR _q$[ebp], eax
; Line 54
	mov	eax, DWORD PTR _count$[ebp]
	sub	eax, 1
	mov	DWORD PTR _count$[ebp], eax
; Line 55
	jmp	SHORT $LN2@uprv_swapA
$LN1@uprv_swapA:
; Line 57
	mov	eax, DWORD PTR _length$[ebp]
$LN7@uprv_swapA:
; Line 58
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_uprv_swapArray16 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _uprv_copyArray16
_TEXT	SEGMENT
_ds$ = 8						; size = 4
_inData$ = 12						; size = 4
_length$ = 16						; size = 4
_outData$ = 20						; size = 4
_pErrorCode$ = 24					; size = 4
_uprv_copyArray16 PROC					; COMDAT
; Line 63
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 64
	cmp	DWORD PTR _pErrorCode$[ebp], 0
	je	SHORT $LN4@uprv_copyA
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN5@uprv_copyA
$LN4@uprv_copyA:
; Line 65
	xor	eax, eax
	jmp	SHORT $LN6@uprv_copyA
$LN5@uprv_copyA:
; Line 67
	cmp	DWORD PTR _ds$[ebp], 0
	je	SHORT $LN2@uprv_copyA
	cmp	DWORD PTR _inData$[ebp], 0
	je	SHORT $LN2@uprv_copyA
	cmp	DWORD PTR _length$[ebp], 0
	jl	SHORT $LN2@uprv_copyA
	mov	eax, DWORD PTR _length$[ebp]
	and	eax, 1
	jne	SHORT $LN2@uprv_copyA
	cmp	DWORD PTR _outData$[ebp], 0
	jne	SHORT $LN3@uprv_copyA
$LN2@uprv_copyA:
; Line 68
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 1
; Line 69
	xor	eax, eax
	jmp	SHORT $LN6@uprv_copyA
$LN3@uprv_copyA:
; Line 72
	cmp	DWORD PTR _length$[ebp], 0
	jle	SHORT $LN1@uprv_copyA
	mov	eax, DWORD PTR _inData$[ebp]
	cmp	eax, DWORD PTR _outData$[ebp]
	je	SHORT $LN1@uprv_copyA
; Line 73
	push	1
	mov	eax, DWORD PTR _inData$[ebp]
	push	eax
	call	_uprv_checkValidMemory
	add	esp, 8
	mov	ecx, DWORD PTR _length$[ebp]
	push	ecx
	mov	edx, DWORD PTR _inData$[ebp]
	push	edx
	mov	eax, DWORD PTR _outData$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@uprv_copyA:
; Line 75
	mov	eax, DWORD PTR _length$[ebp]
$LN6@uprv_copyA:
; Line 76
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_uprv_copyArray16 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _uprv_swapArray32
_TEXT	SEGMENT
_x$ = -44						; size = 4
_count$ = -32						; size = 4
_q$ = -20						; size = 4
_p$ = -8						; size = 4
_ds$ = 8						; size = 4
_inData$ = 12						; size = 4
_length$ = 16						; size = 4
_outData$ = 20						; size = 4
_pErrorCode$ = 24					; size = 4
_uprv_swapArray32 PROC					; COMDAT
; Line 81
	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 87
	cmp	DWORD PTR _pErrorCode$[ebp], 0
	je	SHORT $LN5@uprv_swapA@2
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN6@uprv_swapA@2
$LN5@uprv_swapA@2:
; Line 88
	xor	eax, eax
	jmp	$LN7@uprv_swapA@2
$LN6@uprv_swapA@2:
; Line 90
	cmp	DWORD PTR _ds$[ebp], 0
	je	SHORT $LN3@uprv_swapA@2
	cmp	DWORD PTR _inData$[ebp], 0
	je	SHORT $LN3@uprv_swapA@2
	cmp	DWORD PTR _length$[ebp], 0
	jl	SHORT $LN3@uprv_swapA@2
	mov	eax, DWORD PTR _length$[ebp]
	and	eax, 3
	jne	SHORT $LN3@uprv_swapA@2
	cmp	DWORD PTR _outData$[ebp], 0
	jne	SHORT $LN4@uprv_swapA@2
$LN3@uprv_swapA@2:
; Line 91
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 1
; Line 92
	xor	eax, eax
	jmp	SHORT $LN7@uprv_swapA@2
$LN4@uprv_swapA@2:
; Line 96
	mov	eax, DWORD PTR _inData$[ebp]
	mov	DWORD PTR _p$[ebp], eax
; Line 97
	mov	eax, DWORD PTR _outData$[ebp]
	mov	DWORD PTR _q$[ebp], eax
; Line 98
	mov	eax, DWORD PTR _length$[ebp]
	cdq
	and	edx, 3
	add	eax, edx
	sar	eax, 2
	mov	DWORD PTR _count$[ebp], eax
$LN2@uprv_swapA@2:
; Line 99
	cmp	DWORD PTR _count$[ebp], 0
	jle	SHORT $LN1@uprv_swapA@2
; Line 100
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _x$[ebp], ecx
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 4
	mov	DWORD PTR _p$[ebp], edx
; Line 101
	mov	eax, DWORD PTR _x$[ebp]
	shl	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _x$[ebp]
	shl	ecx, 8
	and	ecx, 16711680				; 00ff0000H
	or	eax, ecx
	mov	edx, DWORD PTR _x$[ebp]
	shr	edx, 8
	and	edx, 65280				; 0000ff00H
	or	eax, edx
	mov	ecx, DWORD PTR _x$[ebp]
	shr	ecx, 24					; 00000018H
	or	eax, ecx
	mov	edx, DWORD PTR _q$[ebp]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR _q$[ebp]
	add	eax, 4
	mov	DWORD PTR _q$[ebp], eax
; Line 102
	mov	eax, DWORD PTR _count$[ebp]
	sub	eax, 1
	mov	DWORD PTR _count$[ebp], eax
; Line 103
	jmp	SHORT $LN2@uprv_swapA@2
$LN1@uprv_swapA@2:
; Line 105
	mov	eax, DWORD PTR _length$[ebp]
$LN7@uprv_swapA@2:
; Line 106
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_uprv_swapArray32 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _uprv_copyArray32
_TEXT	SEGMENT
_ds$ = 8						; size = 4
_inData$ = 12						; size = 4
_length$ = 16						; size = 4
_outData$ = 20						; size = 4
_pErrorCode$ = 24					; size = 4
_uprv_copyArray32 PROC					; COMDAT
; Line 111
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 112
	cmp	DWORD PTR _pErrorCode$[ebp], 0
	je	SHORT $LN4@uprv_copyA@2
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN5@uprv_copyA@2
$LN4@uprv_copyA@2:
; Line 113
	xor	eax, eax
	jmp	SHORT $LN6@uprv_copyA@2
$LN5@uprv_copyA@2:
; Line 115
	cmp	DWORD PTR _ds$[ebp], 0
	je	SHORT $LN2@uprv_copyA@2
	cmp	DWORD PTR _inData$[ebp], 0
	je	SHORT $LN2@uprv_copyA@2
	cmp	DWORD PTR _length$[ebp], 0
	jl	SHORT $LN2@uprv_copyA@2
	mov	eax, DWORD PTR _length$[ebp]
	and	eax, 3
	jne	SHORT $LN2@uprv_copyA@2
	cmp	DWORD PTR _outData$[ebp], 0
	jne	SHORT $LN3@uprv_copyA@2
$LN2@uprv_copyA@2:
; Line 116
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 1
; Line 117
	xor	eax, eax
	jmp	SHORT $LN6@uprv_copyA@2
$LN3@uprv_copyA@2:
; Line 120
	cmp	DWORD PTR _length$[ebp], 0
	jle	SHORT $LN1@uprv_copyA@2
	mov	eax, DWORD PTR _inData$[ebp]
	cmp	eax, DWORD PTR _outData$[ebp]
	je	SHORT $LN1@uprv_copyA@2
; Line 121
	push	1
	mov	eax, DWORD PTR _inData$[ebp]
	push	eax
	call	_uprv_checkValidMemory
	add	esp, 8
	mov	ecx, DWORD PTR _length$[ebp]
	push	ecx
	mov	edx, DWORD PTR _inData$[ebp]
	push	edx
	mov	eax, DWORD PTR _outData$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@uprv_copyA@2:
; Line 123
	mov	eax, DWORD PTR _length$[ebp]
$LN6@uprv_copyA@2:
; Line 124
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_uprv_copyArray32 ENDP
_TEXT	ENDS
EXTRN	__aullshr:PROC
EXTRN	__allshl:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _uprv_swapArray64
_TEXT	SEGMENT
_x$6111 = -48						; size = 8
_count$ = -32						; size = 4
_q$ = -20						; size = 4
_p$ = -8						; size = 4
_ds$ = 8						; size = 4
_inData$ = 12						; size = 4
_length$ = 16						; size = 4
_outData$ = 20						; size = 4
_pErrorCode$ = 24					; size = 4
_uprv_swapArray64 PROC					; COMDAT
; Line 129
	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 134
	cmp	DWORD PTR _pErrorCode$[ebp], 0
	je	SHORT $LN5@uprv_swapA@3
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN6@uprv_swapA@3
$LN5@uprv_swapA@3:
; Line 135
	xor	eax, eax
	jmp	$LN7@uprv_swapA@3
$LN6@uprv_swapA@3:
; Line 137
	cmp	DWORD PTR _ds$[ebp], 0
	je	SHORT $LN3@uprv_swapA@3
	cmp	DWORD PTR _inData$[ebp], 0
	je	SHORT $LN3@uprv_swapA@3
	cmp	DWORD PTR _length$[ebp], 0
	jl	SHORT $LN3@uprv_swapA@3
	mov	eax, DWORD PTR _length$[ebp]
	and	eax, 7
	jne	SHORT $LN3@uprv_swapA@3
	cmp	DWORD PTR _outData$[ebp], 0
	jne	SHORT $LN4@uprv_swapA@3
$LN3@uprv_swapA@3:
; Line 138
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 1
; Line 139
	xor	eax, eax
	jmp	$LN7@uprv_swapA@3
$LN4@uprv_swapA@3:
; Line 143
	mov	eax, DWORD PTR _inData$[ebp]
	mov	DWORD PTR _p$[ebp], eax
; Line 144
	mov	eax, DWORD PTR _outData$[ebp]
	mov	DWORD PTR _q$[ebp], eax
; Line 145
	mov	eax, DWORD PTR _length$[ebp]
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	mov	DWORD PTR _count$[ebp], eax
$LN2@uprv_swapA@3:
; Line 146
	cmp	DWORD PTR _count$[ebp], 0
	jle	$LN1@uprv_swapA@3
; Line 147
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _x$6111[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _x$6111[ebp+4], edx
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 8
	mov	DWORD PTR _p$[ebp], eax
; Line 149
	mov	eax, DWORD PTR _x$6111[ebp]
	mov	edx, DWORD PTR _x$6111[ebp+4]
	mov	cl, 56					; 00000038H
	call	__allshl
	mov	esi, eax
	mov	edi, edx
	mov	eax, DWORD PTR _x$6111[ebp]
	and	eax, 65280				; 0000ff00H
	mov	edx, DWORD PTR _x$6111[ebp+4]
	and	edx, 0
	mov	cl, 40					; 00000028H
	call	__allshl
	or	esi, eax
	or	edi, edx
	mov	eax, DWORD PTR _x$6111[ebp]
	and	eax, 16711680				; 00ff0000H
	mov	edx, DWORD PTR _x$6111[ebp+4]
	and	edx, 0
	mov	cl, 24					; 00000018H
	call	__allshl
	or	esi, eax
	or	edi, edx
	mov	eax, DWORD PTR _x$6111[ebp]
	and	eax, -16777216				; ff000000H
	mov	edx, DWORD PTR _x$6111[ebp+4]
	and	edx, 0
	mov	cl, 8
	call	__allshl
	or	esi, eax
	or	edi, edx
	mov	eax, DWORD PTR _x$6111[ebp]
	mov	edx, DWORD PTR _x$6111[ebp+4]
	mov	cl, 8
	call	__aullshr
	and	eax, -16777216				; ff000000H
	and	edx, 0
	or	esi, eax
	or	edi, edx
	mov	eax, DWORD PTR _x$6111[ebp]
	mov	edx, DWORD PTR _x$6111[ebp+4]
	mov	cl, 24					; 00000018H
	call	__aullshr
	and	eax, 16711680				; 00ff0000H
	and	edx, 0
	or	esi, eax
	or	edi, edx
	mov	eax, DWORD PTR _x$6111[ebp]
	mov	edx, DWORD PTR _x$6111[ebp+4]
	mov	cl, 40					; 00000028H
	call	__aullshr
	and	eax, 65280				; 0000ff00H
	and	edx, 0
	or	esi, eax
	or	edi, edx
	mov	eax, DWORD PTR _x$6111[ebp]
	mov	edx, DWORD PTR _x$6111[ebp+4]
	mov	cl, 56					; 00000038H
	call	__aullshr
	or	esi, eax
	or	edi, edx
	mov	DWORD PTR _x$6111[ebp], esi
	mov	DWORD PTR _x$6111[ebp+4], edi
; Line 150
	mov	eax, DWORD PTR _q$[ebp]
	mov	ecx, DWORD PTR _x$6111[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _x$6111[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _q$[ebp]
	add	eax, 8
	mov	DWORD PTR _q$[ebp], eax
; Line 151
	mov	eax, DWORD PTR _count$[ebp]
	sub	eax, 1
	mov	DWORD PTR _count$[ebp], eax
; Line 152
	jmp	$LN2@uprv_swapA@3
$LN1@uprv_swapA@3:
; Line 154
	mov	eax, DWORD PTR _length$[ebp]
$LN7@uprv_swapA@3:
; Line 155
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_uprv_swapArray64 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _uprv_copyArray64
_TEXT	SEGMENT
_ds$ = 8						; size = 4
_inData$ = 12						; size = 4
_length$ = 16						; size = 4
_outData$ = 20						; size = 4
_pErrorCode$ = 24					; size = 4
_uprv_copyArray64 PROC					; COMDAT
; Line 160
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 161
	cmp	DWORD PTR _pErrorCode$[ebp], 0
	je	SHORT $LN4@uprv_copyA@3
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN5@uprv_copyA@3
$LN4@uprv_copyA@3:
; Line 162
	xor	eax, eax
	jmp	SHORT $LN6@uprv_copyA@3
$LN5@uprv_copyA@3:
; Line 164
	cmp	DWORD PTR _ds$[ebp], 0
	je	SHORT $LN2@uprv_copyA@3
	cmp	DWORD PTR _inData$[ebp], 0
	je	SHORT $LN2@uprv_copyA@3
	cmp	DWORD PTR _length$[ebp], 0
	jl	SHORT $LN2@uprv_copyA@3
	mov	eax, DWORD PTR _length$[ebp]
	and	eax, 7
	jne	SHORT $LN2@uprv_copyA@3
	cmp	DWORD PTR _outData$[ebp], 0
	jne	SHORT $LN3@uprv_copyA@3
$LN2@uprv_copyA@3:
; Line 165
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 1
; Line 166
	xor	eax, eax
	jmp	SHORT $LN6@uprv_copyA@3
$LN3@uprv_copyA@3:
; Line 169
	cmp	DWORD PTR _length$[ebp], 0
	jle	SHORT $LN1@uprv_copyA@3
	mov	eax, DWORD PTR _inData$[ebp]
	cmp	eax, DWORD PTR _outData$[ebp]
	je	SHORT $LN1@uprv_copyA@3
; Line 170
	push	1
	mov	eax, DWORD PTR _inData$[ebp]
	push	eax
	call	_uprv_checkValidMemory
	add	esp, 8
	mov	ecx, DWORD PTR _length$[ebp]
	push	ecx
	mov	edx, DWORD PTR _inData$[ebp]
	push	edx
	mov	eax, DWORD PTR _outData$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@uprv_copyA@3:
; Line 172
	mov	eax, DWORD PTR _length$[ebp]
$LN6@uprv_copyA@3:
; Line 173
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_uprv_copyArray64 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _uprv_readSwapUInt16
_TEXT	SEGMENT
_x$ = 8							; size = 2
_uprv_readSwapUInt16 PROC				; COMDAT
; Line 176
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 177
	movzx	eax, WORD PTR _x$[ebp]
	shl	eax, 8
	movzx	ecx, WORD PTR _x$[ebp]
	sar	ecx, 8
	or	eax, ecx
; Line 178
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_uprv_readSwapUInt16 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _uprv_readDirectUInt16
_TEXT	SEGMENT
_x$ = 8							; size = 2
_uprv_readDirectUInt16 PROC				; COMDAT
; Line 181
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 182
	mov	ax, WORD PTR _x$[ebp]
; Line 183
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_uprv_readDirectUInt16 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _uprv_readSwapUInt32
_TEXT	SEGMENT
_x$ = 8							; size = 4
_uprv_readSwapUInt32 PROC				; COMDAT
; Line 186
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 187
	mov	eax, DWORD PTR _x$[ebp]
	shl	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _x$[ebp]
	shl	ecx, 8
	and	ecx, 16711680				; 00ff0000H
	or	eax, ecx
	mov	edx, DWORD PTR _x$[ebp]
	shr	edx, 8
	and	edx, 65280				; 0000ff00H
	or	eax, edx
	mov	ecx, DWORD PTR _x$[ebp]
	shr	ecx, 24					; 00000018H
	or	eax, ecx
; Line 188
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_uprv_readSwapUInt32 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _uprv_readDirectUInt32
_TEXT	SEGMENT
_x$ = 8							; size = 4
_uprv_readDirectUInt32 PROC				; COMDAT
; Line 191
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 192
	mov	eax, DWORD PTR _x$[ebp]
; Line 193
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_uprv_readDirectUInt32 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _uprv_writeSwapUInt16
_TEXT	SEGMENT
_p$ = 8							; size = 4
_x$ = 12						; size = 2
_uprv_writeSwapUInt16 PROC				; COMDAT
; Line 196
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 197
	movzx	eax, WORD PTR _x$[ebp]
	shl	eax, 8
	movzx	ecx, WORD PTR _x$[ebp]
	sar	ecx, 8
	or	eax, ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	WORD PTR [edx], ax
; Line 198
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_uprv_writeSwapUInt16 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _uprv_writeDirectUInt16
_TEXT	SEGMENT
_p$ = 8							; size = 4
_x$ = 12						; size = 2
_uprv_writeDirectUInt16 PROC				; COMDAT
; Line 201
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 202
	mov	eax, DWORD PTR _p$[ebp]
	mov	cx, WORD PTR _x$[ebp]
	mov	WORD PTR [eax], cx
; Line 203
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_uprv_writeDirectUInt16 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _uprv_writeSwapUInt32
_TEXT	SEGMENT
_p$ = 8							; size = 4
_x$ = 12						; size = 4
_uprv_writeSwapUInt32 PROC				; COMDAT
; Line 206
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 207
	mov	eax, DWORD PTR _x$[ebp]
	shl	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _x$[ebp]
	shl	ecx, 8
	and	ecx, 16711680				; 00ff0000H
	or	eax, ecx
	mov	edx, DWORD PTR _x$[ebp]
	shr	edx, 8
	and	edx, 65280				; 0000ff00H
	or	eax, edx
	mov	ecx, DWORD PTR _x$[ebp]
	shr	ecx, 24					; 00000018H
	or	eax, ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx], eax
; Line 208
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_uprv_writeSwapUInt32 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _uprv_writeDirectUInt32
_TEXT	SEGMENT
_p$ = 8							; size = 4
_x$ = 12						; size = 4
_uprv_writeDirectUInt32 PROC				; COMDAT
; Line 211
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 212
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _x$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 213
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_uprv_writeDirectUInt32 ENDP
_TEXT	ENDS
PUBLIC	_udata_openSwapperForInputData_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _udata_openSwapperForInputData_56
_TEXT	SEGMENT
_inCharset$ = -53					; size = 1
_inIsBigEndian$ = -41					; size = 1
_infoSize$ = -32					; size = 2
_headerSize$ = -20					; size = 2
_pHeader$ = -8						; size = 4
_data$ = 8						; size = 4
_length$ = 12						; size = 4
_outIsBigEndian$ = 16					; size = 1
_outCharset$ = 20					; size = 1
_pErrorCode$ = 24					; size = 4
_udata_openSwapperForInputData_56 PROC			; COMDAT
; Line 418
	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 424
	cmp	DWORD PTR _pErrorCode$[ebp], 0
	je	SHORT $LN11@udata_open@2
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN12@udata_open@2
$LN11@udata_open@2:
; Line 425
	xor	eax, eax
	jmp	$LN13@udata_open@2
$LN12@udata_open@2:
; Line 430
	cmp	DWORD PTR _data$[ebp], 0
	je	SHORT $LN9@udata_open@2
	cmp	DWORD PTR _length$[ebp], 0
	jl	SHORT $LN8@udata_open@2
	cmp	DWORD PTR _length$[ebp], 24		; 00000018H
	jb	SHORT $LN9@udata_open@2
$LN8@udata_open@2:
	movzx	eax, BYTE PTR _outCharset$[ebp]
	cmp	eax, 1
	jle	SHORT $LN10@udata_open@2
$LN9@udata_open@2:
; Line 431
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 1
; Line 432
	xor	eax, eax
	jmp	$LN13@udata_open@2
$LN10@udata_open@2:
; Line 435
	mov	eax, DWORD PTR _data$[ebp]
	mov	DWORD PTR _pHeader$[ebp], eax
; Line 440
	cmp	DWORD PTR _length$[ebp], 0
	jl	SHORT $LN5@udata_open@2
	cmp	DWORD PTR _length$[ebp], 24		; 00000018H
	jb	SHORT $LN6@udata_open@2
$LN5@udata_open@2:
	mov	eax, DWORD PTR _pHeader$[ebp]
	movzx	ecx, BYTE PTR [eax+2]
	cmp	ecx, 218				; 000000daH
	jne	SHORT $LN6@udata_open@2
	mov	eax, DWORD PTR _pHeader$[ebp]
	movzx	ecx, BYTE PTR [eax+3]
	cmp	ecx, 39					; 00000027H
	jne	SHORT $LN6@udata_open@2
	mov	eax, DWORD PTR _pHeader$[ebp]
	movzx	ecx, BYTE PTR [eax+10]
	cmp	ecx, 2
	je	SHORT $LN7@udata_open@2
$LN6@udata_open@2:
; Line 441
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 16			; 00000010H
; Line 442
	xor	eax, eax
	jmp	$LN13@udata_open@2
$LN7@udata_open@2:
; Line 445
	mov	eax, DWORD PTR _pHeader$[ebp]
	mov	cl, BYTE PTR [eax+8]
	mov	BYTE PTR _inIsBigEndian$[ebp], cl
; Line 446
	mov	eax, DWORD PTR _pHeader$[ebp]
	mov	cl, BYTE PTR [eax+9]
	mov	BYTE PTR _inCharset$[ebp], cl
; Line 448
	movsx	eax, BYTE PTR _inIsBigEndian$[ebp]
	test	eax, eax
	jne	SHORT $LN4@udata_open@2
; Line 449
	mov	eax, DWORD PTR _pHeader$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR _headerSize$[ebp], cx
; Line 450
	mov	eax, DWORD PTR _pHeader$[ebp]
	mov	cx, WORD PTR [eax+4]
	mov	WORD PTR _infoSize$[ebp], cx
; Line 451
	jmp	SHORT $LN3@udata_open@2
$LN4@udata_open@2:
; Line 452
	mov	eax, DWORD PTR _pHeader$[ebp]
	movzx	ecx, WORD PTR [eax]
	push	ecx
	call	_uprv_readSwapUInt16
	add	esp, 4
	mov	WORD PTR _headerSize$[ebp], ax
; Line 453
	mov	eax, DWORD PTR _pHeader$[ebp]
	movzx	ecx, WORD PTR [eax+4]
	push	ecx
	call	_uprv_readSwapUInt16
	add	esp, 4
	mov	WORD PTR _infoSize$[ebp], ax
$LN3@udata_open@2:
; Line 460
	movzx	eax, WORD PTR _headerSize$[ebp]
	cmp	eax, 24					; 00000018H
	jb	SHORT $LN1@udata_open@2
	movzx	eax, WORD PTR _infoSize$[ebp]
	cmp	eax, 20					; 00000014H
	jb	SHORT $LN1@udata_open@2
	movzx	eax, WORD PTR _headerSize$[ebp]
	movzx	ecx, WORD PTR _infoSize$[ebp]
	add	ecx, 4
	cmp	eax, ecx
	jb	SHORT $LN1@udata_open@2
	cmp	DWORD PTR _length$[ebp], 0
	jl	SHORT $LN2@udata_open@2
	movzx	eax, WORD PTR _headerSize$[ebp]
	cmp	DWORD PTR _length$[ebp], eax
	jge	SHORT $LN2@udata_open@2
$LN1@udata_open@2:
; Line 461
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 16			; 00000010H
; Line 462
	xor	eax, eax
	jmp	SHORT $LN13@udata_open@2
$LN2@udata_open@2:
; Line 465
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _outCharset$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _outIsBigEndian$[ebp]
	push	edx
	movzx	eax, BYTE PTR _inCharset$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _inIsBigEndian$[ebp]
	push	ecx
	call	_udata_openSwapper_56
	add	esp, 20					; 00000014H
$LN13@udata_open@2:
; Line 466
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_udata_openSwapperForInputData_56 ENDP
_TEXT	ENDS
PUBLIC	_udata_closeSwapper_56
EXTRN	_uprv_free_56:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _udata_closeSwapper_56
_TEXT	SEGMENT
_ds$ = 8						; size = 4
_udata_closeSwapper_56 PROC				; COMDAT
; Line 469
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 470
	mov	eax, DWORD PTR _ds$[ebp]
	push	eax
	call	_uprv_free_56
	add	esp, 4
; Line 471
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_udata_closeSwapper_56 ENDP
_TEXT	ENDS
END
