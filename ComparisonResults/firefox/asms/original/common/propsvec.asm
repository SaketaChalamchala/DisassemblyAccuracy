; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\mozilla\intl\icu\source\common\propsvec.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_upvec_open_56
EXTRN	_memset:PROC
EXTRN	_uprv_free_56:PROC
EXTRN	_uprv_malloc_56:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File d:\mozilla\intl\icu\source\common\propsvec.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT _upvec_open_56
_TEXT	SEGMENT
_cp$ = -44						; size = 4
_row$ = -32						; size = 4
_v$ = -20						; size = 4
_pv$ = -8						; size = 4
_columns$ = 8						; size = 4
_pErrorCode$ = 12					; size = 4
_upvec_open_56 PROC					; COMDAT
; Line 42
	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 47
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN7@upvec_open
; Line 48
	xor	eax, eax
	jmp	$LN8@upvec_open
$LN7@upvec_open:
; Line 50
	cmp	DWORD PTR _columns$[ebp], 1
	jge	SHORT $LN6@upvec_open
; Line 51
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 1
; Line 52
	xor	eax, eax
	jmp	$LN8@upvec_open
$LN6@upvec_open:
; Line 54
	mov	eax, DWORD PTR _columns$[ebp]
	add	eax, 2
	mov	DWORD PTR _columns$[ebp], eax
; Line 56
	push	24					; 00000018H
	call	_uprv_malloc_56
	add	esp, 4
	mov	DWORD PTR _pv$[ebp], eax
; Line 57
	mov	eax, DWORD PTR _columns$[ebp]
	shl	eax, 12					; 0000000cH
	shl	eax, 2
	push	eax
	call	_uprv_malloc_56
	add	esp, 4
	mov	DWORD PTR _v$[ebp], eax
; Line 58
	cmp	DWORD PTR _pv$[ebp], 0
	je	SHORT $LN4@upvec_open
	cmp	DWORD PTR _v$[ebp], 0
	jne	SHORT $LN5@upvec_open
$LN4@upvec_open:
; Line 59
	mov	eax, DWORD PTR _pv$[ebp]
	push	eax
	call	_uprv_free_56
	add	esp, 4
; Line 60
	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	call	_uprv_free_56
	add	esp, 4
; Line 61
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 7
; Line 62
	xor	eax, eax
	jmp	$LN8@upvec_open
$LN5@upvec_open:
; Line 64
	push	24					; 00000018H
	push	0
	mov	eax, DWORD PTR _pv$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
; Line 65
	mov	eax, DWORD PTR _pv$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 66
	mov	eax, DWORD PTR _pv$[ebp]
	mov	ecx, DWORD PTR _columns$[ebp]
	mov	DWORD PTR [eax+4], ecx
; Line 67
	mov	eax, DWORD PTR _pv$[ebp]
	mov	DWORD PTR [eax+8], 4096			; 00001000H
; Line 68
	mov	eax, DWORD PTR _pv$[ebp]
	mov	DWORD PTR [eax+12], 3
; Line 71
	mov	eax, DWORD PTR _pv$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _row$[ebp], ecx
; Line 72
	mov	eax, DWORD PTR _pv$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	imul	ecx, DWORD PTR _columns$[ebp]
	shl	ecx, 2
	push	ecx
	push	0
	mov	edx, DWORD PTR _row$[ebp]
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH
; Line 73
	mov	eax, DWORD PTR _row$[ebp]
	mov	DWORD PTR [eax], 0
; Line 74
	mov	eax, DWORD PTR _row$[ebp]
	mov	DWORD PTR [eax+4], 1114112		; 00110000H
; Line 75
	mov	eax, DWORD PTR _columns$[ebp]
	mov	ecx, DWORD PTR _row$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _row$[ebp], edx
; Line 76
	mov	DWORD PTR _cp$[ebp], 1114112		; 00110000H
	jmp	SHORT $LN3@upvec_open
$LN2@upvec_open:
	mov	eax, DWORD PTR _cp$[ebp]
	add	eax, 1
	mov	DWORD PTR _cp$[ebp], eax
$LN3@upvec_open:
	cmp	DWORD PTR _cp$[ebp], 1114113		; 00110001H
	ja	SHORT $LN1@upvec_open
; Line 77
	mov	eax, DWORD PTR _row$[ebp]
	mov	ecx, DWORD PTR _cp$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 78
	mov	eax, DWORD PTR _cp$[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _row$[ebp]
	mov	DWORD PTR [ecx+4], eax
; Line 79
	mov	eax, DWORD PTR _columns$[ebp]
	mov	ecx, DWORD PTR _row$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _row$[ebp], edx
; Line 80
	jmp	SHORT $LN2@upvec_open
$LN1@upvec_open:
; Line 81
	mov	eax, DWORD PTR _pv$[ebp]
$LN8@upvec_open:
; Line 82
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_upvec_open_56 ENDP
_TEXT	ENDS
PUBLIC	_upvec_close_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _upvec_close_56
_TEXT	SEGMENT
_pv$ = 8						; size = 4
_upvec_close_56 PROC					; COMDAT
; Line 85
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 86
	cmp	DWORD PTR _pv$[ebp], 0
	je	SHORT $LN2@upvec_clos
; Line 87
	mov	eax, DWORD PTR _pv$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_uprv_free_56
	add	esp, 4
; Line 88
	mov	eax, DWORD PTR _pv$[ebp]
	push	eax
	call	_uprv_free_56
	add	esp, 4
$LN2@upvec_clos:
; Line 90
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_upvec_close_56 ENDP
_TEXT	ENDS
PUBLIC	_upvec_setValue_56
EXTRN	__imp__memmove:PROC
EXTRN	_memcpy:PROC
EXTRN	_uprv_checkValidMemory:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _upvec_setValue_56
_TEXT	SEGMENT
tv130 = -313						; size = 1
tv91 = -313						; size = 1
_newMaxRows$7985 = -116					; size = 4
_newVectors$7984 = -104					; size = 4
_rows$7982 = -92					; size = 4
_count$7981 = -80					; size = 4
_splitLastRow$ = -65					; size = 1
_splitFirstRow$ = -53					; size = 1
_limit$ = -44						; size = 4
_columns$ = -32						; size = 4
_lastRow$ = -20						; size = 4
_firstRow$ = -8						; size = 4
_pv$ = 8						; size = 4
_start$ = 12						; size = 4
_end$ = 16						; size = 4
_column$ = 20						; size = 4
_value$ = 24						; size = 4
_mask$ = 28						; size = 4
_pErrorCode$ = 32					; size = 4
_upvec_setValue_56 PROC					; COMDAT
; Line 156
	push	ebp
	mov	ebp, esp
	sub	esp, 316				; 0000013cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-316]
	mov	ecx, 79					; 0000004fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 163
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN18@upvec_setV
; Line 164
	jmp	$LN19@upvec_setV
$LN18@upvec_setV:
; Line 169
	cmp	DWORD PTR _pv$[ebp], 0
	je	SHORT $LN16@upvec_setV
	cmp	DWORD PTR _start$[ebp], 0
	jl	SHORT $LN16@upvec_setV
	mov	eax, DWORD PTR _start$[ebp]
	cmp	eax, DWORD PTR _end$[ebp]
	jg	SHORT $LN16@upvec_setV
	cmp	DWORD PTR _end$[ebp], 1114113		; 00110001H
	jg	SHORT $LN16@upvec_setV
	cmp	DWORD PTR _column$[ebp], 0
	jl	SHORT $LN16@upvec_setV
	mov	eax, DWORD PTR _pv$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 2
	cmp	DWORD PTR _column$[ebp], ecx
	jl	SHORT $LN17@upvec_setV
$LN16@upvec_setV:
; Line 170
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 1
; Line 171
	jmp	$LN19@upvec_setV
$LN17@upvec_setV:
; Line 173
	mov	eax, DWORD PTR _pv$[ebp]
	movsx	ecx, BYTE PTR [eax+20]
	test	ecx, ecx
	je	SHORT $LN15@upvec_setV
; Line 174
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 30			; 0000001eH
; Line 175
	jmp	$LN19@upvec_setV
$LN15@upvec_setV:
; Line 177
	mov	eax, DWORD PTR _end$[ebp]
	add	eax, 1
	mov	DWORD PTR _limit$[ebp], eax
; Line 180
	mov	eax, DWORD PTR _pv$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _columns$[ebp], ecx
; Line 181
	mov	eax, DWORD PTR _column$[ebp]
	add	eax, 2
	mov	DWORD PTR _column$[ebp], eax
; Line 182
	mov	eax, DWORD PTR _value$[ebp]
	and	eax, DWORD PTR _mask$[ebp]
	mov	DWORD PTR _value$[ebp], eax
; Line 187
	mov	eax, DWORD PTR _start$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pv$[ebp]
	push	ecx
	call	__findRow
	add	esp, 8
	mov	DWORD PTR _firstRow$[ebp], eax
; Line 188
	mov	eax, DWORD PTR _end$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pv$[ebp]
	push	ecx
	call	__findRow
	add	esp, 8
	mov	DWORD PTR _lastRow$[ebp], eax
; Line 195
	mov	eax, DWORD PTR _firstRow$[ebp]
	mov	ecx, DWORD PTR _start$[ebp]
	cmp	ecx, DWORD PTR [eax]
	je	SHORT $LN21@upvec_setV
	mov	edx, DWORD PTR _column$[ebp]
	mov	eax, DWORD PTR _firstRow$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	and	ecx, DWORD PTR _mask$[ebp]
	cmp	DWORD PTR _value$[ebp], ecx
	je	SHORT $LN21@upvec_setV
	mov	BYTE PTR tv91[ebp], 1
	jmp	SHORT $LN22@upvec_setV
$LN21@upvec_setV:
	mov	BYTE PTR tv91[ebp], 0
$LN22@upvec_setV:
	mov	dl, BYTE PTR tv91[ebp]
	mov	BYTE PTR _splitFirstRow$[ebp], dl
; Line 196
	mov	eax, DWORD PTR _lastRow$[ebp]
	mov	ecx, DWORD PTR _limit$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	je	SHORT $LN23@upvec_setV
	mov	edx, DWORD PTR _column$[ebp]
	mov	eax, DWORD PTR _lastRow$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	and	ecx, DWORD PTR _mask$[ebp]
	cmp	DWORD PTR _value$[ebp], ecx
	je	SHORT $LN23@upvec_setV
	mov	BYTE PTR tv130[ebp], 1
	jmp	SHORT $LN24@upvec_setV
$LN23@upvec_setV:
	mov	BYTE PTR tv130[ebp], 0
$LN24@upvec_setV:
	mov	dl, BYTE PTR tv130[ebp]
	mov	BYTE PTR _splitLastRow$[ebp], dl
; Line 199
	movsx	eax, BYTE PTR _splitFirstRow$[ebp]
	test	eax, eax
	jne	SHORT $LN13@upvec_setV
	movsx	eax, BYTE PTR _splitLastRow$[ebp]
	test	eax, eax
	je	$LN14@upvec_setV
$LN13@upvec_setV:
; Line 202
	mov	eax, DWORD PTR _pv$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _rows$7982[ebp], ecx
; Line 203
	movsx	eax, BYTE PTR _splitFirstRow$[ebp]
	add	eax, DWORD PTR _rows$7982[ebp]
	movsx	ecx, BYTE PTR _splitLastRow$[ebp]
	add	eax, ecx
	mov	edx, DWORD PTR _pv$[ebp]
	cmp	eax, DWORD PTR [edx+8]
	jle	$LN12@upvec_setV
; Line 207
	mov	eax, DWORD PTR _pv$[ebp]
	cmp	DWORD PTR [eax+8], 65536		; 00010000H
	jge	SHORT $LN11@upvec_setV
; Line 208
	mov	DWORD PTR _newMaxRows$7985[ebp], 65536	; 00010000H
	jmp	SHORT $LN10@upvec_setV
$LN11@upvec_setV:
; Line 209
	mov	eax, DWORD PTR _pv$[ebp]
	cmp	DWORD PTR [eax+8], 1114114		; 00110002H
	jge	SHORT $LN9@upvec_setV
; Line 210
	mov	DWORD PTR _newMaxRows$7985[ebp], 1114114 ; 00110002H
; Line 211
	jmp	SHORT $LN10@upvec_setV
$LN9@upvec_setV:
; Line 213
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 5
; Line 214
	jmp	$LN19@upvec_setV
$LN10@upvec_setV:
; Line 216
	mov	eax, DWORD PTR _newMaxRows$7985[ebp]
	imul	eax, DWORD PTR _columns$[ebp]
	shl	eax, 2
	push	eax
	call	_uprv_malloc_56
	add	esp, 4
	mov	DWORD PTR _newVectors$7984[ebp], eax
; Line 217
	cmp	DWORD PTR _newVectors$7984[ebp], 0
	jne	SHORT $LN7@upvec_setV
; Line 218
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 7
; Line 219
	jmp	$LN19@upvec_setV
$LN7@upvec_setV:
; Line 221
	push	1
	mov	eax, DWORD PTR _pv$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_uprv_checkValidMemory
	add	esp, 8
	mov	edx, DWORD PTR _rows$7982[ebp]
	imul	edx, DWORD PTR _columns$[ebp]
	shl	edx, 2
	push	edx
	mov	eax, DWORD PTR _pv$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _newVectors$7984[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 222
	mov	eax, DWORD PTR _pv$[ebp]
	mov	ecx, DWORD PTR _firstRow$[ebp]
	sub	ecx, DWORD PTR [eax]
	sar	ecx, 2
	mov	edx, DWORD PTR _newVectors$7984[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR _firstRow$[ebp], eax
; Line 223
	mov	eax, DWORD PTR _pv$[ebp]
	mov	ecx, DWORD PTR _lastRow$[ebp]
	sub	ecx, DWORD PTR [eax]
	sar	ecx, 2
	mov	edx, DWORD PTR _newVectors$7984[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR _lastRow$[ebp], eax
; Line 224
	mov	eax, DWORD PTR _pv$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_uprv_free_56
	add	esp, 4
; Line 225
	mov	eax, DWORD PTR _pv$[ebp]
	mov	ecx, DWORD PTR _newVectors$7984[ebp]
	mov	DWORD PTR [eax], ecx
; Line 226
	mov	eax, DWORD PTR _pv$[ebp]
	mov	ecx, DWORD PTR _newMaxRows$7985[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN12@upvec_setV:
; Line 230
	mov	eax, DWORD PTR _rows$7982[ebp]
	imul	eax, DWORD PTR _columns$[ebp]
	mov	ecx, DWORD PTR _pv$[ebp]
	mov	edx, DWORD PTR [ecx]
	lea	eax, DWORD PTR [edx+eax*4]
	mov	ecx, DWORD PTR _columns$[ebp]
	mov	edx, DWORD PTR _lastRow$[ebp]
	lea	ecx, DWORD PTR [edx+ecx*4]
	sub	eax, ecx
	sar	eax, 2
	mov	DWORD PTR _count$7981[ebp], eax
; Line 231
	cmp	DWORD PTR _count$7981[ebp], 0
	jle	SHORT $LN6@upvec_setV
; Line 235
	push	1
	mov	eax, DWORD PTR _columns$[ebp]
	mov	ecx, DWORD PTR _lastRow$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	push	edx
	call	_uprv_checkValidMemory
	add	esp, 8
	mov	eax, DWORD PTR _count$7981[ebp]
	shl	eax, 2
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _columns$[ebp]
	mov	edx, DWORD PTR _lastRow$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	push	eax
	movsx	ecx, BYTE PTR _splitFirstRow$[ebp]
	movsx	edx, BYTE PTR _splitLastRow$[ebp]
	lea	eax, DWORD PTR [ecx+edx+1]
	imul	eax, DWORD PTR _columns$[ebp]
	mov	ecx, DWORD PTR _lastRow$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	push	edx
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN6@upvec_setV:
; Line 237
	movsx	eax, BYTE PTR _splitFirstRow$[ebp]
	add	eax, DWORD PTR _rows$7982[ebp]
	movsx	ecx, BYTE PTR _splitLastRow$[ebp]
	add	eax, ecx
	mov	edx, DWORD PTR _pv$[ebp]
	mov	DWORD PTR [edx+12], eax
; Line 240
	movsx	eax, BYTE PTR _splitFirstRow$[ebp]
	test	eax, eax
	je	SHORT $LN5@upvec_setV
; Line 242
	mov	eax, DWORD PTR _lastRow$[ebp]
	sub	eax, DWORD PTR _firstRow$[ebp]
	sar	eax, 2
	add	eax, DWORD PTR _columns$[ebp]
	mov	DWORD PTR _count$7981[ebp], eax
; Line 243
	push	1
	mov	eax, DWORD PTR _firstRow$[ebp]
	push	eax
	call	_uprv_checkValidMemory
	add	esp, 8
	mov	ecx, DWORD PTR _count$7981[ebp]
	shl	ecx, 2
	mov	esi, esp
	push	ecx
	mov	edx, DWORD PTR _firstRow$[ebp]
	push	edx
	mov	eax, DWORD PTR _columns$[ebp]
	mov	ecx, DWORD PTR _firstRow$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	push	edx
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 244
	mov	eax, DWORD PTR _columns$[ebp]
	mov	ecx, DWORD PTR _lastRow$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _lastRow$[ebp], edx
; Line 247
	mov	eax, DWORD PTR _columns$[ebp]
	mov	ecx, DWORD PTR _firstRow$[ebp]
	mov	edx, DWORD PTR _start$[ebp]
	mov	DWORD PTR [ecx+eax*4], edx
	mov	eax, DWORD PTR _firstRow$[ebp]
	mov	ecx, DWORD PTR _start$[ebp]
	mov	DWORD PTR [eax+4], ecx
; Line 248
	mov	eax, DWORD PTR _columns$[ebp]
	mov	ecx, DWORD PTR _firstRow$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _firstRow$[ebp], edx
$LN5@upvec_setV:
; Line 252
	movsx	eax, BYTE PTR _splitLastRow$[ebp]
	test	eax, eax
	je	SHORT $LN14@upvec_setV
; Line 254
	push	1
	mov	eax, DWORD PTR _lastRow$[ebp]
	push	eax
	call	_uprv_checkValidMemory
	add	esp, 8
	mov	ecx, DWORD PTR _columns$[ebp]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR _lastRow$[ebp]
	push	edx
	mov	eax, DWORD PTR _columns$[ebp]
	mov	ecx, DWORD PTR _lastRow$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 257
	mov	eax, DWORD PTR _columns$[ebp]
	mov	ecx, DWORD PTR _lastRow$[ebp]
	mov	edx, DWORD PTR _limit$[ebp]
	mov	DWORD PTR [ecx+eax*4], edx
	mov	eax, DWORD PTR _lastRow$[ebp]
	mov	ecx, DWORD PTR _limit$[ebp]
	mov	DWORD PTR [eax+4], ecx
$LN14@upvec_setV:
; Line 262
	mov	eax, DWORD PTR _pv$[ebp]
	mov	ecx, DWORD PTR _lastRow$[ebp]
	sub	ecx, DWORD PTR [eax]
	sar	ecx, 2
	mov	eax, ecx
	cdq
	idiv	DWORD PTR _columns$[ebp]
	mov	edx, DWORD PTR _pv$[ebp]
	mov	DWORD PTR [edx+16], eax
; Line 265
	mov	eax, DWORD PTR _column$[ebp]
	mov	ecx, DWORD PTR _firstRow$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _firstRow$[ebp], edx
; Line 266
	mov	eax, DWORD PTR _column$[ebp]
	mov	ecx, DWORD PTR _lastRow$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _lastRow$[ebp], edx
; Line 267
	mov	eax, DWORD PTR _mask$[ebp]
	not	eax
	mov	DWORD PTR _mask$[ebp], eax
$LN3@upvec_setV:
; Line 269
	mov	eax, DWORD PTR _firstRow$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, DWORD PTR _mask$[ebp]
	or	ecx, DWORD PTR _value$[ebp]
	mov	edx, DWORD PTR _firstRow$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 270
	mov	eax, DWORD PTR _firstRow$[ebp]
	cmp	eax, DWORD PTR _lastRow$[ebp]
	jne	SHORT $LN1@upvec_setV
; Line 271
	jmp	SHORT $LN19@upvec_setV
$LN1@upvec_setV:
; Line 273
	mov	eax, DWORD PTR _columns$[ebp]
	mov	ecx, DWORD PTR _firstRow$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _firstRow$[ebp], edx
; Line 274
	jmp	SHORT $LN3@upvec_setV
$LN19@upvec_setV:
; Line 275
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 316				; 0000013cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_upvec_setValue_56 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __findRow
_TEXT	SEGMENT
_prevRow$ = -68						; size = 4
_limit$ = -56						; size = 4
_start$ = -44						; size = 4
_i$ = -32						; size = 4
_columns$ = -20						; size = 4
_row$ = -8						; size = 4
_pv$ = 8						; size = 4
_rangeStart$ = 12					; size = 4
__findRow PROC						; COMDAT
; Line 93
	push	ebp
	mov	ebp, esp
	sub	esp, 264				; 00000108H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-264]
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 97
	mov	eax, DWORD PTR _pv$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _columns$[ebp], ecx
; Line 98
	mov	eax, DWORD PTR _pv$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _limit$[ebp], ecx
; Line 99
	mov	eax, DWORD PTR _pv$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _prevRow$[ebp], ecx
; Line 102
	mov	eax, DWORD PTR _prevRow$[ebp]
	imul	eax, DWORD PTR _columns$[ebp]
	mov	ecx, DWORD PTR _pv$[ebp]
	mov	edx, DWORD PTR [ecx]
	lea	eax, DWORD PTR [edx+eax*4]
	mov	DWORD PTR _row$[ebp], eax
; Line 103
	mov	eax, DWORD PTR _row$[ebp]
	mov	ecx, DWORD PTR _rangeStart$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jl	$LN19@findRow
; Line 104
	mov	eax, DWORD PTR _row$[ebp]
	mov	ecx, DWORD PTR _rangeStart$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jge	SHORT $LN18@findRow
; Line 106
	mov	eax, DWORD PTR _row$[ebp]
	jmp	$LN20@findRow
	jmp	$LN17@findRow
$LN18@findRow:
; Line 107
	mov	eax, DWORD PTR _columns$[ebp]
	mov	ecx, DWORD PTR _row$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _row$[ebp], edx
	mov	eax, DWORD PTR _row$[ebp]
	mov	ecx, DWORD PTR _rangeStart$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jge	SHORT $LN16@findRow
; Line 109
	mov	eax, DWORD PTR _prevRow$[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _pv$[ebp]
	mov	DWORD PTR [ecx+16], eax
; Line 110
	mov	eax, DWORD PTR _row$[ebp]
	jmp	$LN20@findRow
	jmp	SHORT $LN17@findRow
$LN16@findRow:
; Line 111
	mov	eax, DWORD PTR _columns$[ebp]
	mov	ecx, DWORD PTR _row$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _row$[ebp], edx
	mov	eax, DWORD PTR _row$[ebp]
	mov	ecx, DWORD PTR _rangeStart$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jge	SHORT $LN14@findRow
; Line 113
	mov	eax, DWORD PTR _prevRow$[ebp]
	add	eax, 2
	mov	ecx, DWORD PTR _pv$[ebp]
	mov	DWORD PTR [ecx+16], eax
; Line 114
	mov	eax, DWORD PTR _row$[ebp]
	jmp	$LN20@findRow
	jmp	SHORT $LN17@findRow
$LN14@findRow:
; Line 115
	mov	eax, DWORD PTR _row$[ebp]
	mov	ecx, DWORD PTR _rangeStart$[ebp]
	sub	ecx, DWORD PTR [eax+4]
	cmp	ecx, 10					; 0000000aH
	jge	SHORT $LN17@findRow
; Line 117
	mov	eax, DWORD PTR _prevRow$[ebp]
	add	eax, 2
	mov	DWORD PTR _prevRow$[ebp], eax
$LN11@findRow:
; Line 119
	mov	eax, DWORD PTR _prevRow$[ebp]
	add	eax, 1
	mov	DWORD PTR _prevRow$[ebp], eax
; Line 120
	mov	eax, DWORD PTR _columns$[ebp]
	mov	ecx, DWORD PTR _row$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _row$[ebp], edx
; Line 121
	mov	eax, DWORD PTR _row$[ebp]
	mov	ecx, DWORD PTR _rangeStart$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jge	SHORT $LN11@findRow
; Line 122
	mov	eax, DWORD PTR _pv$[ebp]
	mov	ecx, DWORD PTR _prevRow$[ebp]
	mov	DWORD PTR [eax+16], ecx
; Line 123
	mov	eax, DWORD PTR _row$[ebp]
	jmp	$LN20@findRow
$LN17@findRow:
; Line 124
	jmp	SHORT $LN8@findRow
$LN19@findRow:
; Line 125
	mov	eax, DWORD PTR _pv$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _rangeStart$[ebp]
	cmp	edx, DWORD PTR [ecx+4]
	jge	SHORT $LN8@findRow
; Line 127
	mov	eax, DWORD PTR _pv$[ebp]
	mov	DWORD PTR [eax+16], 0
; Line 128
	mov	eax, DWORD PTR _pv$[ebp]
	mov	eax, DWORD PTR [eax]
	jmp	SHORT $LN20@findRow
$LN8@findRow:
; Line 132
	mov	DWORD PTR _start$[ebp], 0
$LN6@findRow:
; Line 133
	mov	eax, DWORD PTR _limit$[ebp]
	sub	eax, 1
	cmp	DWORD PTR _start$[ebp], eax
	jge	SHORT $LN5@findRow
; Line 134
	mov	eax, DWORD PTR _start$[ebp]
	add	eax, DWORD PTR _limit$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _i$[ebp], eax
; Line 135
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, DWORD PTR _columns$[ebp]
	mov	ecx, DWORD PTR _pv$[ebp]
	mov	edx, DWORD PTR [ecx]
	lea	eax, DWORD PTR [edx+eax*4]
	mov	DWORD PTR _row$[ebp], eax
; Line 136
	mov	eax, DWORD PTR _row$[ebp]
	mov	ecx, DWORD PTR _rangeStart$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jge	SHORT $LN4@findRow
; Line 137
	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR _limit$[ebp], eax
	jmp	SHORT $LN3@findRow
$LN4@findRow:
; Line 138
	mov	eax, DWORD PTR _row$[ebp]
	mov	ecx, DWORD PTR _rangeStart$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jge	SHORT $LN2@findRow
; Line 139
	mov	eax, DWORD PTR _pv$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [eax+16], ecx
; Line 140
	mov	eax, DWORD PTR _row$[ebp]
	jmp	SHORT $LN20@findRow
; Line 141
	jmp	SHORT $LN3@findRow
$LN2@findRow:
; Line 142
	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR _start$[ebp], eax
$LN3@findRow:
; Line 144
	jmp	SHORT $LN6@findRow
$LN5@findRow:
; Line 147
	mov	eax, DWORD PTR _pv$[ebp]
	mov	ecx, DWORD PTR _start$[ebp]
	mov	DWORD PTR [eax+16], ecx
; Line 148
	mov	eax, DWORD PTR _start$[ebp]
	imul	eax, DWORD PTR _columns$[ebp]
	mov	ecx, DWORD PTR _pv$[ebp]
	mov	edx, DWORD PTR [ecx]
	lea	eax, DWORD PTR [edx+eax*4]
$LN20@findRow:
; Line 149
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
__findRow ENDP
_TEXT	ENDS
PUBLIC	_upvec_getValue_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _upvec_getValue_56
_TEXT	SEGMENT
_ncpv$ = -20						; size = 4
_row$ = -8						; size = 4
_pv$ = 8						; size = 4
_c$ = 12						; size = 4
_column$ = 16						; size = 4
_upvec_getValue_56 PROC					; COMDAT
; Line 278
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 282
	mov	eax, DWORD PTR _pv$[ebp]
	movsx	ecx, BYTE PTR [eax+20]
	test	ecx, ecx
	jne	SHORT $LN1@upvec_getV
	cmp	DWORD PTR _c$[ebp], 0
	jl	SHORT $LN1@upvec_getV
	cmp	DWORD PTR _c$[ebp], 1114113		; 00110001H
	jg	SHORT $LN1@upvec_getV
	cmp	DWORD PTR _column$[ebp], 0
	jl	SHORT $LN1@upvec_getV
	mov	eax, DWORD PTR _pv$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 2
	cmp	DWORD PTR _column$[ebp], ecx
	jl	SHORT $LN2@upvec_getV
$LN1@upvec_getV:
; Line 283
	xor	eax, eax
	jmp	SHORT $LN3@upvec_getV
$LN2@upvec_getV:
; Line 285
	mov	eax, DWORD PTR _pv$[ebp]
	mov	DWORD PTR _ncpv$[ebp], eax
; Line 286
	mov	eax, DWORD PTR _c$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ncpv$[ebp]
	push	ecx
	call	__findRow
	add	esp, 8
	mov	DWORD PTR _row$[ebp], eax
; Line 287
	mov	eax, DWORD PTR _column$[ebp]
	mov	ecx, DWORD PTR _row$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4+8]
$LN3@upvec_getV:
; Line 288
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_upvec_getValue_56 ENDP
_TEXT	ENDS
PUBLIC	_upvec_getRow_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _upvec_getRow_56
_TEXT	SEGMENT
_columns$ = -20						; size = 4
_row$ = -8						; size = 4
_pv$ = 8						; size = 4
_rowIndex$ = 12						; size = 4
_pRangeStart$ = 16					; size = 4
_pRangeEnd$ = 20					; size = 4
_upvec_getRow_56 PROC					; COMDAT
; Line 292
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 296
	mov	eax, DWORD PTR _pv$[ebp]
	movsx	ecx, BYTE PTR [eax+20]
	test	ecx, ecx
	jne	SHORT $LN3@upvec_getR
	cmp	DWORD PTR _rowIndex$[ebp], 0
	jl	SHORT $LN3@upvec_getR
	mov	eax, DWORD PTR _pv$[ebp]
	mov	ecx, DWORD PTR _rowIndex$[ebp]
	cmp	ecx, DWORD PTR [eax+12]
	jl	SHORT $LN4@upvec_getR
$LN3@upvec_getR:
; Line 297
	xor	eax, eax
	jmp	SHORT $LN5@upvec_getR
$LN4@upvec_getR:
; Line 300
	mov	eax, DWORD PTR _pv$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _columns$[ebp], ecx
; Line 301
	mov	eax, DWORD PTR _rowIndex$[ebp]
	imul	eax, DWORD PTR _columns$[ebp]
	mov	ecx, DWORD PTR _pv$[ebp]
	mov	edx, DWORD PTR [ecx]
	lea	eax, DWORD PTR [edx+eax*4]
	mov	DWORD PTR _row$[ebp], eax
; Line 302
	cmp	DWORD PTR _pRangeStart$[ebp], 0
	je	SHORT $LN2@upvec_getR
; Line 303
	mov	eax, DWORD PTR _pRangeStart$[ebp]
	mov	ecx, DWORD PTR _row$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
$LN2@upvec_getR:
; Line 305
	cmp	DWORD PTR _pRangeEnd$[ebp], 0
	je	SHORT $LN1@upvec_getR
; Line 306
	mov	eax, DWORD PTR _row$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	mov	edx, DWORD PTR _pRangeEnd$[ebp]
	mov	DWORD PTR [edx], ecx
$LN1@upvec_getR:
; Line 308
	mov	eax, DWORD PTR _row$[ebp]
	add	eax, 8
$LN5@upvec_getR:
; Line 309
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_upvec_getRow_56 ENDP
_TEXT	ENDS
PUBLIC	??_C@_1BG@MOOHBLO@?$AAc?$AAo?$AAl?$AAu?$AAm?$AAn?$AAs?$AA?$DO?$AA?$DN?$AA3?$AA?$AA@ ; `string'
PUBLIC	??_C@_1FK@GGCEBNMF@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@ ; `string'
PUBLIC	?__LINE__Var@?1??upvec_compact_56@@9@9		; `upvec_compact_56'::`2'::__LINE__Var
PUBLIC	_upvec_compact_56
EXTRN	_memcmp:PROC
EXTRN	_uprv_sortArray_56:PROC
EXTRN	__imp___wassert:PROC
;	COMDAT ??_C@_1BG@MOOHBLO@?$AAc?$AAo?$AAl?$AAu?$AAm?$AAn?$AAs?$AA?$DO?$AA?$DN?$AA3?$AA?$AA@
CONST	SEGMENT
??_C@_1BG@MOOHBLO@?$AAc?$AAo?$AAl?$AAu?$AAm?$AAn?$AAs?$AA?$DO?$AA?$DN?$AA3?$AA?$AA@ DB 'c'
	DB	00H, 'o', 00H, 'l', 00H, 'u', 00H, 'm', 00H, 'n', 00H, 's', 00H
	DB	'>', 00H, '=', 00H, '3', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1FK@GGCEBNMF@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@
CONST	SEGMENT
??_C@_1FK@GGCEBNMF@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@ DB 'd'
	DB	00H, ':', 00H, '\', 00H, 'm', 00H, 'o', 00H, 'z', 00H, 'i', 00H
	DB	'l', 00H, 'l', 00H, 'a', 00H, '\', 00H, 'i', 00H, 'n', 00H, 't'
	DB	00H, 'l', 00H, '\', 00H, 'i', 00H, 'c', 00H, 'u', 00H, '\', 00H
	DB	's', 00H, 'o', 00H, 'u', 00H, 'r', 00H, 'c', 00H, 'e', 00H, '\'
	DB	00H, 'c', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'o', 00H, 'n', 00H
	DB	'\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'p', 00H, 's', 00H, 'v'
	DB	00H, 'e', 00H, 'c', 00H, '.', 00H, 'c', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??upvec_compact_56@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??upvec_compact_56@@9@9 DD 014eH		; `upvec_compact_56'::`2'::__LINE__Var
; Function compile flags: /Odtp /RTCsu /ZI
_DATA	ENDS
;	COMDAT _upvec_compact_56
_TEXT	SEGMENT
_limit$ = -92						; size = 4
_start$ = -80						; size = 4
_count$ = -68						; size = 4
_rows$ = -56						; size = 4
_valueColumns$ = -44					; size = 4
_columns$ = -32						; size = 4
_i$ = -20						; size = 4
_row$ = -8						; size = 4
_pv$ = 8						; size = 4
_handler$ = 12						; size = 4
_context$ = 16						; size = 4
_pErrorCode$ = 20					; size = 4
_upvec_compact_56 PROC					; COMDAT
; Line 334
	push	ebp
	mov	ebp, esp
	sub	esp, 288				; 00000120H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-288]
	mov	ecx, 72					; 00000048H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 340
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN19@upvec_comp
; Line 341
	jmp	$LN20@upvec_comp
$LN19@upvec_comp:
; Line 343
	cmp	DWORD PTR _handler$[ebp], 0
	jne	SHORT $LN18@upvec_comp
; Line 344
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 1
; Line 345
	jmp	$LN20@upvec_comp
$LN18@upvec_comp:
; Line 347
	mov	eax, DWORD PTR _pv$[ebp]
	movsx	ecx, BYTE PTR [eax+20]
	test	ecx, ecx
	je	SHORT $LN17@upvec_comp
; Line 348
	jmp	$LN20@upvec_comp
$LN17@upvec_comp:
; Line 352
	mov	eax, DWORD PTR _pv$[ebp]
	mov	BYTE PTR [eax+20], 1
; Line 354
	mov	eax, DWORD PTR _pv$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _rows$[ebp], ecx
; Line 355
	mov	eax, DWORD PTR _pv$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _columns$[ebp], ecx
; Line 356
	cmp	DWORD PTR _columns$[ebp], 3
	jge	SHORT $LN22@upvec_comp
	mov	eax, DWORD PTR ?__LINE__Var@?1??upvec_compact_56@@9@9
	add	eax, 22					; 00000016H
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1FK@GGCEBNMF@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@
	push	OFFSET ??_C@_1BG@MOOHBLO@?$AAc?$AAo?$AAl?$AAu?$AAm?$AAn?$AAs?$AA?$DO?$AA?$DN?$AA3?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN22@upvec_comp:
; Line 357
	mov	eax, DWORD PTR _columns$[ebp]
	sub	eax, 2
	mov	DWORD PTR _valueColumns$[ebp], eax
; Line 361
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _pv$[ebp]
	push	ecx
	push	OFFSET _upvec_compareRows
	mov	edx, DWORD PTR _columns$[ebp]
	shl	edx, 2
	push	edx
	mov	eax, DWORD PTR _rows$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pv$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_uprv_sortArray_56
	add	esp, 28					; 0000001cH
; Line 362
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN16@upvec_comp
; Line 363
	jmp	$LN20@upvec_comp
$LN16@upvec_comp:
; Line 371
	mov	eax, DWORD PTR _pv$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _row$[ebp], ecx
; Line 372
	mov	eax, DWORD PTR _valueColumns$[ebp]
	neg	eax
	mov	DWORD PTR _count$[ebp], eax
; Line 373
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN15@upvec_comp
$LN14@upvec_comp:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN15@upvec_comp:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _rows$[ebp]
	jge	$LN13@upvec_comp
; Line 374
	mov	eax, DWORD PTR _row$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _start$[ebp], ecx
; Line 377
	cmp	DWORD PTR _count$[ebp], 0
	jl	SHORT $LN11@upvec_comp
	mov	eax, DWORD PTR _valueColumns$[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR _valueColumns$[ebp]
	shl	ecx, 2
	mov	edx, DWORD PTR _row$[ebp]
	sub	edx, ecx
	push	edx
	mov	eax, DWORD PTR _row$[ebp]
	add	eax, 8
	push	eax
	call	_memcmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN12@upvec_comp
$LN11@upvec_comp:
; Line 378
	mov	eax, DWORD PTR _count$[ebp]
	add	eax, DWORD PTR _valueColumns$[ebp]
	mov	DWORD PTR _count$[ebp], eax
$LN12@upvec_comp:
; Line 381
	cmp	DWORD PTR _start$[ebp], 1114112		; 00110000H
	jl	SHORT $LN10@upvec_comp
; Line 382
	mov	esi, esp
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _valueColumns$[ebp]
	push	ecx
	mov	edx, DWORD PTR _row$[ebp]
	add	edx, 8
	push	edx
	mov	eax, DWORD PTR _count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _start$[ebp]
	push	ecx
	mov	edx, DWORD PTR _start$[ebp]
	push	edx
	mov	eax, DWORD PTR _context$[ebp]
	push	eax
	call	DWORD PTR _handler$[ebp]
	add	esp, 28					; 0000001cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 383
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN10@upvec_comp
; Line 384
	jmp	$LN20@upvec_comp
$LN10@upvec_comp:
; Line 388
	mov	eax, DWORD PTR _columns$[ebp]
	mov	ecx, DWORD PTR _row$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _row$[ebp], edx
; Line 389
	jmp	$LN14@upvec_comp
$LN13@upvec_comp:
; Line 392
	mov	eax, DWORD PTR _count$[ebp]
	add	eax, DWORD PTR _valueColumns$[ebp]
	mov	DWORD PTR _count$[ebp], eax
; Line 396
	mov	esi, esp
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _valueColumns$[ebp]
	push	ecx
	mov	edx, DWORD PTR _valueColumns$[ebp]
	shl	edx, 2
	mov	eax, DWORD PTR _row$[ebp]
	sub	eax, edx
	push	eax
	mov	ecx, DWORD PTR _count$[ebp]
	push	ecx
	push	2097152					; 00200000H
	push	2097152					; 00200000H
	mov	edx, DWORD PTR _context$[ebp]
	push	edx
	call	DWORD PTR _handler$[ebp]
	add	esp, 28					; 0000001cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 397
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN8@upvec_comp
; Line 398
	jmp	$LN20@upvec_comp
$LN8@upvec_comp:
; Line 408
	mov	eax, DWORD PTR _pv$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _row$[ebp], ecx
; Line 409
	mov	eax, DWORD PTR _valueColumns$[ebp]
	neg	eax
	mov	DWORD PTR _count$[ebp], eax
; Line 410
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN7@upvec_comp
$LN6@upvec_comp:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN7@upvec_comp:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _rows$[ebp]
	jge	$LN5@upvec_comp
; Line 412
	mov	eax, DWORD PTR _row$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _start$[ebp], ecx
; Line 413
	mov	eax, DWORD PTR _row$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _limit$[ebp], ecx
; Line 416
	cmp	DWORD PTR _count$[ebp], 0
	jl	SHORT $LN3@upvec_comp
	mov	eax, DWORD PTR _valueColumns$[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR _pv$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _count$[ebp]
	lea	ecx, DWORD PTR [edx+eax*4]
	push	ecx
	mov	edx, DWORD PTR _row$[ebp]
	add	edx, 8
	push	edx
	call	_memcmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN4@upvec_comp
$LN3@upvec_comp:
; Line 417
	mov	eax, DWORD PTR _count$[ebp]
	add	eax, DWORD PTR _valueColumns$[ebp]
	mov	DWORD PTR _count$[ebp], eax
; Line 418
	push	1
	mov	eax, DWORD PTR _row$[ebp]
	add	eax, 8
	push	eax
	call	_uprv_checkValidMemory
	add	esp, 8
	mov	ecx, DWORD PTR _valueColumns$[ebp]
	shl	ecx, 2
	mov	esi, esp
	push	ecx
	mov	edx, DWORD PTR _row$[ebp]
	add	edx, 8
	push	edx
	mov	eax, DWORD PTR _pv$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _count$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	push	eax
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN4@upvec_comp:
; Line 421
	cmp	DWORD PTR _start$[ebp], 1114112		; 00110000H
	jge	SHORT $LN2@upvec_comp
; Line 422
	mov	esi, esp
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _valueColumns$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pv$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _count$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	push	edx
	mov	eax, DWORD PTR _count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _limit$[ebp]
	sub	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _start$[ebp]
	push	edx
	mov	eax, DWORD PTR _context$[ebp]
	push	eax
	call	DWORD PTR _handler$[ebp]
	add	esp, 28					; 0000001cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 423
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN2@upvec_comp
; Line 424
	jmp	SHORT $LN20@upvec_comp
$LN2@upvec_comp:
; Line 428
	mov	eax, DWORD PTR _columns$[ebp]
	mov	ecx, DWORD PTR _row$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _row$[ebp], edx
; Line 429
	jmp	$LN6@upvec_comp
$LN5@upvec_comp:
; Line 432
	mov	eax, DWORD PTR _count$[ebp]
	cdq
	idiv	DWORD PTR _valueColumns$[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _pv$[ebp]
	mov	DWORD PTR [ecx+12], eax
$LN20@upvec_comp:
; Line 433
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 288				; 00000120H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_upvec_compact_56 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _upvec_compareRows
_TEXT	SEGMENT
_columns$ = -68						; size = 4
_count$ = -56						; size = 4
_i$ = -44						; size = 4
_pv$ = -32						; size = 4
_right$ = -20						; size = 4
_left$ = -8						; size = 4
_context$ = 8						; size = 4
_l$ = 12						; size = 4
_r$ = 16						; size = 4
_upvec_compareRows PROC					; COMDAT
; Line 312
	push	ebp
	mov	ebp, esp
	sub	esp, 264				; 00000108H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-264]
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 313
	mov	eax, DWORD PTR _l$[ebp]
	mov	DWORD PTR _left$[ebp], eax
	mov	eax, DWORD PTR _r$[ebp]
	mov	DWORD PTR _right$[ebp], eax
; Line 314
	mov	eax, DWORD PTR _context$[ebp]
	mov	DWORD PTR _pv$[ebp], eax
; Line 317
	mov	eax, DWORD PTR _pv$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _columns$[ebp], ecx
	mov	edx, DWORD PTR _columns$[ebp]
	mov	DWORD PTR _count$[ebp], edx
; Line 320
	mov	DWORD PTR _i$[ebp], 2
$LN5@upvec_comp@2:
; Line 322
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _left$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _right$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4]
	cmp	eax, DWORD PTR [esi+edx*4]
	je	SHORT $LN2@upvec_comp@2
; Line 323
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _left$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _right$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4]
	cmp	eax, DWORD PTR [esi+edx*4]
	sbb	eax, eax
	and	eax, -2					; fffffffeH
	add	eax, 1
	jmp	SHORT $LN6@upvec_comp@2
$LN2@upvec_comp@2:
; Line 325
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _columns$[ebp]
	jne	SHORT $LN4@upvec_comp@2
; Line 326
	mov	DWORD PTR _i$[ebp], 0
$LN4@upvec_comp@2:
; Line 328
	mov	eax, DWORD PTR _count$[ebp]
	sub	eax, 1
	mov	DWORD PTR _count$[ebp], eax
	cmp	DWORD PTR _count$[ebp], 0
	jg	SHORT $LN5@upvec_comp@2
; Line 330
	xor	eax, eax
$LN6@upvec_comp@2:
; Line 331
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_upvec_compareRows ENDP
_TEXT	ENDS
PUBLIC	_upvec_getArray_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _upvec_getArray_56
_TEXT	SEGMENT
_pv$ = 8						; size = 4
_pRows$ = 12						; size = 4
_pColumns$ = 16						; size = 4
_upvec_getArray_56 PROC					; COMDAT
; Line 436
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 437
	mov	eax, DWORD PTR _pv$[ebp]
	movsx	ecx, BYTE PTR [eax+20]
	test	ecx, ecx
	jne	SHORT $LN3@upvec_getA
; Line 438
	xor	eax, eax
	jmp	SHORT $LN4@upvec_getA
$LN3@upvec_getA:
; Line 440
	cmp	DWORD PTR _pRows$[ebp], 0
	je	SHORT $LN2@upvec_getA
; Line 441
	mov	eax, DWORD PTR _pRows$[ebp]
	mov	ecx, DWORD PTR _pv$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax], edx
$LN2@upvec_getA:
; Line 443
	cmp	DWORD PTR _pColumns$[ebp], 0
	je	SHORT $LN1@upvec_getA
; Line 444
	mov	eax, DWORD PTR _pv$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 2
	mov	edx, DWORD PTR _pColumns$[ebp]
	mov	DWORD PTR [edx], ecx
$LN1@upvec_getA:
; Line 446
	mov	eax, DWORD PTR _pv$[ebp]
	mov	eax, DWORD PTR [eax]
$LN4@upvec_getA:
; Line 447
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_upvec_getArray_56 ENDP
_TEXT	ENDS
PUBLIC	_upvec_cloneArray_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _upvec_cloneArray_56
_TEXT	SEGMENT
_byteLength$ = -20					; size = 4
_clonedArray$ = -8					; size = 4
_pv$ = 8						; size = 4
_pRows$ = 12						; size = 4
_pColumns$ = 16						; size = 4
_pErrorCode$ = 20					; size = 4
_upvec_cloneArray_56 PROC				; COMDAT
; Line 451
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 455
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN5@upvec_clon
; Line 456
	xor	eax, eax
	jmp	$LN6@upvec_clon
$LN5@upvec_clon:
; Line 458
	mov	eax, DWORD PTR _pv$[ebp]
	movsx	ecx, BYTE PTR [eax+20]
	test	ecx, ecx
	jne	SHORT $LN4@upvec_clon
; Line 459
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 1
; Line 460
	xor	eax, eax
	jmp	$LN6@upvec_clon
$LN4@upvec_clon:
; Line 462
	mov	eax, DWORD PTR _pv$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 2
	mov	edx, DWORD PTR _pv$[ebp]
	imul	ecx, DWORD PTR [edx+12]
	shl	ecx, 2
	mov	DWORD PTR _byteLength$[ebp], ecx
; Line 463
	mov	eax, DWORD PTR _byteLength$[ebp]
	push	eax
	call	_uprv_malloc_56
	add	esp, 4
	mov	DWORD PTR _clonedArray$[ebp], eax
; Line 464
	cmp	DWORD PTR _clonedArray$[ebp], 0
	jne	SHORT $LN3@upvec_clon
; Line 465
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 7
; Line 466
	xor	eax, eax
	jmp	SHORT $LN6@upvec_clon
$LN3@upvec_clon:
; Line 468
	push	1
	mov	eax, DWORD PTR _pv$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_uprv_checkValidMemory
	add	esp, 8
	mov	edx, DWORD PTR _byteLength$[ebp]
	push	edx
	mov	eax, DWORD PTR _pv$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _clonedArray$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 469
	cmp	DWORD PTR _pRows$[ebp], 0
	je	SHORT $LN2@upvec_clon
; Line 470
	mov	eax, DWORD PTR _pRows$[ebp]
	mov	ecx, DWORD PTR _pv$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax], edx
$LN2@upvec_clon:
; Line 472
	cmp	DWORD PTR _pColumns$[ebp], 0
	je	SHORT $LN1@upvec_clon
; Line 473
	mov	eax, DWORD PTR _pv$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 2
	mov	edx, DWORD PTR _pColumns$[ebp]
	mov	DWORD PTR [edx], ecx
$LN1@upvec_clon:
; Line 475
	mov	eax, DWORD PTR _clonedArray$[ebp]
$LN6@upvec_clon:
; Line 476
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_upvec_cloneArray_56 ENDP
_TEXT	ENDS
PUBLIC	_upvec_compactToUTrie2Handler_56
PUBLIC	_upvec_compactToUTrie2WithRowIndexes_56
EXTRN	_utrie2_close_56:PROC
EXTRN	_utrie2_freeze_56:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _upvec_compactToUTrie2WithRowIndexes_56
_TEXT	SEGMENT
_toUTrie2$ = -20					; size = 16
_pv$ = 8						; size = 4
_pErrorCode$ = 12					; size = 4
_upvec_compactToUTrie2WithRowIndexes_56 PROC		; COMDAT
; Line 479
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 480
	mov	DWORD PTR _toUTrie2$[ebp], 0
	xor	eax, eax
	mov	DWORD PTR _toUTrie2$[ebp+4], eax
	mov	DWORD PTR _toUTrie2$[ebp+8], eax
	mov	DWORD PTR _toUTrie2$[ebp+12], eax
; Line 481
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	lea	ecx, DWORD PTR _toUTrie2$[ebp]
	push	ecx
	push	OFFSET _upvec_compactToUTrie2Handler_56
	mov	edx, DWORD PTR _pv$[ebp]
	push	edx
	call	_upvec_compact_56
	add	esp, 16					; 00000010H
; Line 482
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _toUTrie2$[ebp]
	push	ecx
	call	_utrie2_freeze_56
	add	esp, 12					; 0000000cH
; Line 483
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN1@upvec_comp@3
; Line 484
	mov	eax, DWORD PTR _toUTrie2$[ebp]
	push	eax
	call	_utrie2_close_56
	add	esp, 4
; Line 485
	mov	DWORD PTR _toUTrie2$[ebp], 0
$LN1@upvec_comp@3:
; Line 487
	mov	eax, DWORD PTR _toUTrie2$[ebp]
; Line 488
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@upvec_comp@3
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN6@upvec_comp@3:
	DD	1
	DD	$LN5@upvec_comp@3
$LN5@upvec_comp@3:
	DD	-20					; ffffffecH
	DD	16					; 00000010H
	DD	$LN4@upvec_comp@3
$LN4@upvec_comp@3:
	DB	116					; 00000074H
	DB	111					; 0000006fH
	DB	85					; 00000055H
	DB	84					; 00000054H
	DB	114					; 00000072H
	DB	105					; 00000069H
	DB	101					; 00000065H
	DB	50					; 00000032H
	DB	0
_upvec_compactToUTrie2WithRowIndexes_56 ENDP
_TEXT	ENDS
EXTRN	_utrie2_open_56:PROC
EXTRN	_utrie2_setRange32_56:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _upvec_compactToUTrie2Handler_56
_TEXT	SEGMENT
tv71 = -208						; size = 4
_toUTrie2$ = -8						; size = 4
_context$ = 8						; size = 4
_start$ = 12						; size = 4
_end$ = 16						; size = 4
_rowIndex$ = 20						; size = 4
_row$ = 24						; size = 4
_columns$ = 28						; size = 4
_pErrorCode$ = 32					; size = 4
_upvec_compactToUTrie2Handler_56 PROC			; COMDAT
; Line 499
	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 500
	mov	eax, DWORD PTR _context$[ebp]
	mov	DWORD PTR _toUTrie2$[ebp], eax
; Line 501
	cmp	DWORD PTR _start$[ebp], 1114112		; 00110000H
	jge	SHORT $LN10@upvec_comp@4
; Line 502
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _rowIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _end$[ebp]
	push	edx
	mov	eax, DWORD PTR _start$[ebp]
	push	eax
	mov	ecx, DWORD PTR _toUTrie2$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_utrie2_setRange32_56
	add	esp, 24					; 00000018H
; Line 503
	jmp	$LN11@upvec_comp@4
$LN10@upvec_comp@4:
; Line 504
	mov	eax, DWORD PTR _start$[ebp]
	mov	DWORD PTR tv71[ebp], eax
	cmp	DWORD PTR tv71[ebp], 1114112		; 00110000H
	je	SHORT $LN6@upvec_comp@4
	cmp	DWORD PTR tv71[ebp], 1114113		; 00110001H
	je	SHORT $LN5@upvec_comp@4
	cmp	DWORD PTR tv71[ebp], 2097152		; 00200000H
	je	SHORT $LN4@upvec_comp@4
	jmp	SHORT $LN11@upvec_comp@4
$LN6@upvec_comp@4:
; Line 506
	mov	eax, DWORD PTR _toUTrie2$[ebp]
	mov	ecx, DWORD PTR _rowIndex$[ebp]
	mov	DWORD PTR [eax+4], ecx
; Line 507
	jmp	SHORT $LN11@upvec_comp@4
$LN5@upvec_comp@4:
; Line 509
	mov	eax, DWORD PTR _toUTrie2$[ebp]
	mov	ecx, DWORD PTR _rowIndex$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 510
	jmp	SHORT $LN11@upvec_comp@4
$LN4@upvec_comp@4:
; Line 512
	mov	eax, DWORD PTR _toUTrie2$[ebp]
	mov	ecx, DWORD PTR _rowIndex$[ebp]
	mov	DWORD PTR [eax+12], ecx
; Line 513
	cmp	DWORD PTR _rowIndex$[ebp], 65535	; 0000ffffH
	jle	SHORT $LN3@upvec_comp@4
; Line 515
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 8
; Line 516
	jmp	SHORT $LN11@upvec_comp@4
$LN3@upvec_comp@4:
; Line 518
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _toUTrie2$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _toUTrie2$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	_utrie2_open_56
	add	esp, 12					; 0000000cH
	mov	edx, DWORD PTR _toUTrie2$[ebp]
	mov	DWORD PTR [edx], eax
$LN11@upvec_comp@4:
; Line 525
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_upvec_compactToUTrie2Handler_56 ENDP
_TEXT	ENDS
END
