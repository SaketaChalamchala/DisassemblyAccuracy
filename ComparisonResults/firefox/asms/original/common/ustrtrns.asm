; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\mozilla\intl\icu\source\common\ustrtrns.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
_utf8_minLegal DD 00H
	DD	080H
	DD	0800H
	DD	010000H
CONST	ENDS
PUBLIC	??2@YAPAXI@Z					; operator new
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File d:\mozilla\intl\icu\source\common\unicode\utypes.h
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT ??2@YAPAXI@Z
_TEXT	SEGMENT
_q$ = -8						; size = 4
___formal$ = 8						; size = 4
??2@YAPAXI@Z PROC					; operator new, COMDAT
; Line 411
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 412
	mov	DWORD PTR _q$[ebp], 0
; Line 413
	mov	eax, DWORD PTR _q$[ebp]
	mov	BYTE PTR [eax], 5
; Line 414
	mov	eax, DWORD PTR _q$[ebp]
; Line 415
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??2@YAPAXI@Z ENDP					; operator new
_TEXT	ENDS
PUBLIC	??3@YAXPAX@Z					; operator delete
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??3@YAXPAX@Z
_TEXT	SEGMENT
_q$ = -8						; size = 4
___formal$ = 8						; size = 4
??3@YAXPAX@Z PROC					; operator delete, COMDAT
; Line 439
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 440
	mov	DWORD PTR _q$[ebp], 0
; Line 441
	mov	eax, DWORD PTR _q$[ebp]
	mov	BYTE PTR [eax], 5
; Line 442
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??3@YAXPAX@Z ENDP					; operator delete
_TEXT	ENDS
PUBLIC	_u_strFromUTF32WithSub_56
EXTRN	_u_terminateUChars_56:PROC
EXTRN	__RTC_CheckEsp:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _u_strFromUTF32WithSub_56
_TEXT	SEGMENT
tv129 = -268						; size = 4
tv81 = -268						; size = 4
_numSubstitutions$ = -68				; size = 4
_reqLength$ = -56					; size = 4
_pDest$ = -44						; size = 4
_destLimit$ = -32					; size = 4
_ch$ = -20						; size = 4
_srcLimit$ = -8						; size = 4
_dest$ = 8						; size = 4
_destCapacity$ = 12					; size = 4
_pDestLength$ = 16					; size = 4
_src$ = 20						; size = 4
_srcLength$ = 24					; size = 4
_subchar$ = 28						; size = 4
_pNumSubstitutions$ = 32				; size = 4
_pErrorCode$ = 36					; size = 4
_u_strFromUTF32WithSub_56 PROC				; COMDAT
; File d:\mozilla\intl\icu\source\common\ustrtrns.cpp
; Line 44
	push	ebp
	mov	ebp, esp
	sub	esp, 268				; 0000010cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-268]
	mov	ecx, 67					; 00000043H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 53
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN34@u_strFromU
; Line 54
	xor	eax, eax
	jmp	$LN35@u_strFromU
$LN34@u_strFromU:
; Line 59
	cmp	DWORD PTR _src$[ebp], 0
	jne	SHORT $LN31@u_strFromU
	cmp	DWORD PTR _srcLength$[ebp], 0
	jne	SHORT $LN32@u_strFromU
$LN31@u_strFromU:
	cmp	DWORD PTR _srcLength$[ebp], -1
	jl	SHORT $LN32@u_strFromU
	cmp	DWORD PTR _destCapacity$[ebp], 0
	jl	SHORT $LN32@u_strFromU
	cmp	DWORD PTR _dest$[ebp], 0
	jne	SHORT $LN30@u_strFromU
	cmp	DWORD PTR _destCapacity$[ebp], 0
	jg	SHORT $LN32@u_strFromU
$LN30@u_strFromU:
	cmp	DWORD PTR _subchar$[ebp], 1114111	; 0010ffffH
	jg	SHORT $LN32@u_strFromU
	mov	eax, DWORD PTR _subchar$[ebp]
	and	eax, -2048				; fffff800H
	cmp	eax, 55296				; 0000d800H
	jne	SHORT $LN33@u_strFromU
$LN32@u_strFromU:
; Line 60
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 1
; Line 61
	xor	eax, eax
	jmp	$LN35@u_strFromU
$LN33@u_strFromU:
; Line 64
	cmp	DWORD PTR _pNumSubstitutions$[ebp], 0
	je	SHORT $LN29@u_strFromU
; Line 65
	mov	eax, DWORD PTR _pNumSubstitutions$[ebp]
	mov	DWORD PTR [eax], 0
$LN29@u_strFromU:
; Line 68
	mov	eax, DWORD PTR _dest$[ebp]
	mov	DWORD PTR _pDest$[ebp], eax
; Line 69
	cmp	DWORD PTR _dest$[ebp], 0
	je	SHORT $LN37@u_strFromU
	mov	eax, DWORD PTR _destCapacity$[ebp]
	mov	ecx, DWORD PTR _dest$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR tv81[ebp], edx
	jmp	SHORT $LN38@u_strFromU
$LN37@u_strFromU:
	mov	DWORD PTR tv81[ebp], 0
$LN38@u_strFromU:
	mov	eax, DWORD PTR tv81[ebp]
	mov	DWORD PTR _destLimit$[ebp], eax
; Line 70
	mov	DWORD PTR _reqLength$[ebp], 0
; Line 71
	mov	DWORD PTR _numSubstitutions$[ebp], 0
; Line 73
	cmp	DWORD PTR _srcLength$[ebp], 0
	jge	SHORT $LN28@u_strFromU
$LN27@u_strFromU:
; Line 76
	mov	eax, DWORD PTR _src$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _ch$[ebp], ecx
	cmp	DWORD PTR _ch$[ebp], 0
	je	SHORT $LN26@u_strFromU
	cmp	DWORD PTR _ch$[ebp], 55296		; 0000d800H
	jb	SHORT $LN25@u_strFromU
	cmp	DWORD PTR _ch$[ebp], 57344		; 0000e000H
	jl	SHORT $LN26@u_strFromU
	cmp	DWORD PTR _ch$[ebp], 65535		; 0000ffffH
	jg	SHORT $LN26@u_strFromU
$LN25@u_strFromU:
; Line 77
	mov	eax, DWORD PTR _src$[ebp]
	add	eax, 4
	mov	DWORD PTR _src$[ebp], eax
; Line 78
	mov	eax, DWORD PTR _pDest$[ebp]
	cmp	eax, DWORD PTR _destLimit$[ebp]
	jae	SHORT $LN24@u_strFromU
; Line 79
	mov	eax, DWORD PTR _pDest$[ebp]
	mov	cx, WORD PTR _ch$[ebp]
	mov	WORD PTR [eax], cx
	mov	edx, DWORD PTR _pDest$[ebp]
	add	edx, 2
	mov	DWORD PTR _pDest$[ebp], edx
; Line 80
	jmp	SHORT $LN23@u_strFromU
$LN24@u_strFromU:
; Line 81
	mov	eax, DWORD PTR _reqLength$[ebp]
	add	eax, 1
	mov	DWORD PTR _reqLength$[ebp], eax
$LN23@u_strFromU:
; Line 83
	jmp	SHORT $LN27@u_strFromU
$LN26@u_strFromU:
; Line 84
	mov	eax, DWORD PTR _src$[ebp]
	mov	DWORD PTR _srcLimit$[ebp], eax
; Line 85
	cmp	DWORD PTR _ch$[ebp], 0
	je	SHORT $LN22@u_strFromU
$LN21@u_strFromU:
; Line 87
	mov	eax, DWORD PTR _srcLimit$[ebp]
	add	eax, 4
	mov	DWORD PTR _srcLimit$[ebp], eax
	mov	ecx, DWORD PTR _srcLimit$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN22@u_strFromU
	jmp	SHORT $LN21@u_strFromU
$LN22@u_strFromU:
; Line 89
	jmp	SHORT $LN18@u_strFromU
$LN28@u_strFromU:
; Line 90
	cmp	DWORD PTR _src$[ebp], 0
	je	SHORT $LN39@u_strFromU
	mov	eax, DWORD PTR _srcLength$[ebp]
	mov	ecx, DWORD PTR _src$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR tv129[ebp], edx
	jmp	SHORT $LN40@u_strFromU
$LN39@u_strFromU:
	mov	DWORD PTR tv129[ebp], 0
$LN40@u_strFromU:
	mov	eax, DWORD PTR tv129[ebp]
	mov	DWORD PTR _srcLimit$[ebp], eax
$LN18@u_strFromU:
; Line 94
	mov	eax, DWORD PTR _src$[ebp]
	cmp	eax, DWORD PTR _srcLimit$[ebp]
	jae	$LN17@u_strFromU
; Line 95
	mov	eax, DWORD PTR _src$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _ch$[ebp], ecx
	mov	edx, DWORD PTR _src$[ebp]
	add	edx, 4
	mov	DWORD PTR _src$[ebp], edx
$LN16@u_strFromU:
; Line 98
	cmp	DWORD PTR _ch$[ebp], 55296		; 0000d800H
	jb	SHORT $LN12@u_strFromU
	cmp	DWORD PTR _ch$[ebp], 57344		; 0000e000H
	jl	SHORT $LN13@u_strFromU
	cmp	DWORD PTR _ch$[ebp], 65535		; 0000ffffH
	jg	SHORT $LN13@u_strFromU
$LN12@u_strFromU:
; Line 99
	mov	eax, DWORD PTR _pDest$[ebp]
	cmp	eax, DWORD PTR _destLimit$[ebp]
	jae	SHORT $LN11@u_strFromU
; Line 100
	mov	eax, DWORD PTR _pDest$[ebp]
	mov	cx, WORD PTR _ch$[ebp]
	mov	WORD PTR [eax], cx
	mov	edx, DWORD PTR _pDest$[ebp]
	add	edx, 2
	mov	DWORD PTR _pDest$[ebp], edx
; Line 101
	jmp	SHORT $LN10@u_strFromU
$LN11@u_strFromU:
; Line 102
	mov	eax, DWORD PTR _reqLength$[ebp]
	add	eax, 1
	mov	DWORD PTR _reqLength$[ebp], eax
$LN10@u_strFromU:
; Line 104
	jmp	$LN14@u_strFromU
	jmp	$LN15@u_strFromU
$LN13@u_strFromU:
; Line 105
	cmp	DWORD PTR _ch$[ebp], 65536		; 00010000H
	jl	SHORT $LN8@u_strFromU
	cmp	DWORD PTR _ch$[ebp], 1114111		; 0010ffffH
	jg	SHORT $LN8@u_strFromU
; Line 106
	cmp	DWORD PTR _pDest$[ebp], 0
	je	SHORT $LN7@u_strFromU
	mov	eax, DWORD PTR _pDest$[ebp]
	add	eax, 4
	cmp	eax, DWORD PTR _destLimit$[ebp]
	ja	SHORT $LN7@u_strFromU
; Line 107
	mov	eax, DWORD PTR _ch$[ebp]
	sar	eax, 10					; 0000000aH
	add	eax, 55232				; 0000d7c0H
	mov	ecx, DWORD PTR _pDest$[ebp]
	mov	WORD PTR [ecx], ax
	mov	edx, DWORD PTR _pDest$[ebp]
	add	edx, 2
	mov	DWORD PTR _pDest$[ebp], edx
; Line 108
	mov	eax, DWORD PTR _ch$[ebp]
	and	eax, 1023				; 000003ffH
	or	eax, 56320				; 0000dc00H
	mov	ecx, DWORD PTR _pDest$[ebp]
	mov	WORD PTR [ecx], ax
	mov	edx, DWORD PTR _pDest$[ebp]
	add	edx, 2
	mov	DWORD PTR _pDest$[ebp], edx
; Line 109
	jmp	SHORT $LN6@u_strFromU
$LN7@u_strFromU:
; Line 110
	mov	eax, DWORD PTR _reqLength$[ebp]
	add	eax, 2
	mov	DWORD PTR _reqLength$[ebp], eax
$LN6@u_strFromU:
; Line 112
	jmp	SHORT $LN14@u_strFromU
	jmp	SHORT $LN15@u_strFromU
$LN8@u_strFromU:
; Line 113
	mov	eax, DWORD PTR _subchar$[ebp]
	mov	DWORD PTR _ch$[ebp], eax
	cmp	DWORD PTR _ch$[ebp], 0
	jge	SHORT $LN4@u_strFromU
; Line 115
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 10			; 0000000aH
; Line 116
	xor	eax, eax
	jmp	SHORT $LN35@u_strFromU
; Line 117
	jmp	SHORT $LN15@u_strFromU
$LN4@u_strFromU:
; Line 118
	mov	eax, DWORD PTR _numSubstitutions$[ebp]
	add	eax, 1
	mov	DWORD PTR _numSubstitutions$[ebp], eax
$LN15@u_strFromU:
; Line 120
	mov	eax, 1
	test	eax, eax
	jne	$LN16@u_strFromU
$LN14@u_strFromU:
; Line 121
	jmp	$LN18@u_strFromU
$LN17@u_strFromU:
; Line 123
	mov	eax, DWORD PTR _pDest$[ebp]
	sub	eax, DWORD PTR _dest$[ebp]
	sar	eax, 1
	add	eax, DWORD PTR _reqLength$[ebp]
	mov	DWORD PTR _reqLength$[ebp], eax
; Line 124
	cmp	DWORD PTR _pDestLength$[ebp], 0
	je	SHORT $LN2@u_strFromU
; Line 125
	mov	eax, DWORD PTR _pDestLength$[ebp]
	mov	ecx, DWORD PTR _reqLength$[ebp]
	mov	DWORD PTR [eax], ecx
$LN2@u_strFromU:
; Line 127
	cmp	DWORD PTR _pNumSubstitutions$[ebp], 0
	je	SHORT $LN1@u_strFromU
; Line 128
	mov	eax, DWORD PTR _pNumSubstitutions$[ebp]
	mov	ecx, DWORD PTR _numSubstitutions$[ebp]
	mov	DWORD PTR [eax], ecx
$LN1@u_strFromU:
; Line 132
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _reqLength$[ebp]
	push	ecx
	mov	edx, DWORD PTR _destCapacity$[ebp]
	push	edx
	mov	eax, DWORD PTR _dest$[ebp]
	push	eax
	call	_u_terminateUChars_56
	add	esp, 16					; 00000010H
; Line 134
	mov	eax, DWORD PTR _dest$[ebp]
$LN35@u_strFromU:
; Line 135
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 268				; 0000010cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_u_strFromUTF32WithSub_56 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?U_FAILURE@@YACW4UErrorCode@@@Z
_TEXT	SEGMENT
_code$ = 8						; size = 4
?U_FAILURE@@YACW4UErrorCode@@@Z PROC			; U_FAILURE, COMDAT
; File d:\mozilla\intl\icu\source\common\unicode\utypes.h
; Line 705
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	cmp	DWORD PTR _code$[ebp], 0
	setg	al
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?U_FAILURE@@YACW4UErrorCode@@@Z ENDP			; U_FAILURE
_TEXT	ENDS
PUBLIC	_u_strFromUTF32_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _u_strFromUTF32_56
_TEXT	SEGMENT
_dest$ = 8						; size = 4
_destCapacity$ = 12					; size = 4
_pDestLength$ = 16					; size = 4
_src$ = 20						; size = 4
_srcLength$ = 24					; size = 4
_pErrorCode$ = 28					; size = 4
_u_strFromUTF32_56 PROC					; COMDAT
; File d:\mozilla\intl\icu\source\common\ustrtrns.cpp
; Line 143
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 148
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	push	0
	push	-1
	mov	ecx, DWORD PTR _srcLength$[ebp]
	push	ecx
	mov	edx, DWORD PTR _src$[ebp]
	push	edx
	mov	eax, DWORD PTR _pDestLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _destCapacity$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dest$[ebp]
	push	edx
	call	_u_strFromUTF32WithSub_56
	add	esp, 32					; 00000020H
; Line 149
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_u_strFromUTF32_56 ENDP
_TEXT	ENDS
PUBLIC	_u_strToUTF32WithSub_56
EXTRN	_u_terminateUChar32s_56:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _u_strToUTF32WithSub_56
_TEXT	SEGMENT
tv130 = -280						; size = 4
tv81 = -280						; size = 4
_numSubstitutions$ = -80				; size = 4
_reqLength$ = -68					; size = 4
_pDest$ = -56						; size = 4
_destLimit$ = -44					; size = 4
_ch2$ = -32						; size = 2
_ch$ = -20						; size = 4
_srcLimit$ = -8						; size = 4
_dest$ = 8						; size = 4
_destCapacity$ = 12					; size = 4
_pDestLength$ = 16					; size = 4
_src$ = 20						; size = 4
_srcLength$ = 24					; size = 4
_subchar$ = 28						; size = 4
_pNumSubstitutions$ = 32				; size = 4
_pErrorCode$ = 36					; size = 4
_u_strToUTF32WithSub_56 PROC				; COMDAT
; Line 158
	push	ebp
	mov	ebp, esp
	sub	esp, 280				; 00000118H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-280]
	mov	ecx, 70					; 00000046H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 168
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN27@u_strToUTF
; Line 169
	xor	eax, eax
	jmp	$LN28@u_strToUTF
$LN27@u_strToUTF:
; Line 174
	cmp	DWORD PTR _src$[ebp], 0
	jne	SHORT $LN24@u_strToUTF
	cmp	DWORD PTR _srcLength$[ebp], 0
	jne	SHORT $LN25@u_strToUTF
$LN24@u_strToUTF:
	cmp	DWORD PTR _srcLength$[ebp], -1
	jl	SHORT $LN25@u_strToUTF
	cmp	DWORD PTR _destCapacity$[ebp], 0
	jl	SHORT $LN25@u_strToUTF
	cmp	DWORD PTR _dest$[ebp], 0
	jne	SHORT $LN23@u_strToUTF
	cmp	DWORD PTR _destCapacity$[ebp], 0
	jg	SHORT $LN25@u_strToUTF
$LN23@u_strToUTF:
	cmp	DWORD PTR _subchar$[ebp], 1114111	; 0010ffffH
	jg	SHORT $LN25@u_strToUTF
	mov	eax, DWORD PTR _subchar$[ebp]
	and	eax, -2048				; fffff800H
	cmp	eax, 55296				; 0000d800H
	jne	SHORT $LN26@u_strToUTF
$LN25@u_strToUTF:
; Line 175
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 1
; Line 176
	xor	eax, eax
	jmp	$LN28@u_strToUTF
$LN26@u_strToUTF:
; Line 179
	cmp	DWORD PTR _pNumSubstitutions$[ebp], 0
	je	SHORT $LN22@u_strToUTF
; Line 180
	mov	eax, DWORD PTR _pNumSubstitutions$[ebp]
	mov	DWORD PTR [eax], 0
$LN22@u_strToUTF:
; Line 183
	mov	eax, DWORD PTR _dest$[ebp]
	mov	DWORD PTR _pDest$[ebp], eax
; Line 184
	cmp	DWORD PTR _dest$[ebp], 0
	je	SHORT $LN30@u_strToUTF
	mov	eax, DWORD PTR _destCapacity$[ebp]
	mov	ecx, DWORD PTR _dest$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR tv81[ebp], edx
	jmp	SHORT $LN31@u_strToUTF
$LN30@u_strToUTF:
	mov	DWORD PTR tv81[ebp], 0
$LN31@u_strToUTF:
	mov	eax, DWORD PTR tv81[ebp]
	mov	DWORD PTR _destLimit$[ebp], eax
; Line 185
	mov	DWORD PTR _reqLength$[ebp], 0
; Line 186
	mov	DWORD PTR _numSubstitutions$[ebp], 0
; Line 188
	cmp	DWORD PTR _srcLength$[ebp], 0
	jge	SHORT $LN21@u_strToUTF
$LN20@u_strToUTF:
; Line 190
	mov	eax, DWORD PTR _src$[ebp]
	movzx	ecx, WORD PTR [eax]
	mov	DWORD PTR _ch$[ebp], ecx
	cmp	DWORD PTR _ch$[ebp], 0
	je	SHORT $LN19@u_strToUTF
	mov	eax, DWORD PTR _ch$[ebp]
	and	eax, -2048				; fffff800H
	cmp	eax, 55296				; 0000d800H
	je	SHORT $LN19@u_strToUTF
; Line 191
	mov	eax, DWORD PTR _src$[ebp]
	add	eax, 2
	mov	DWORD PTR _src$[ebp], eax
; Line 192
	mov	eax, DWORD PTR _pDest$[ebp]
	cmp	eax, DWORD PTR _destLimit$[ebp]
	jae	SHORT $LN18@u_strToUTF
; Line 193
	mov	eax, DWORD PTR _pDest$[ebp]
	mov	ecx, DWORD PTR _ch$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _pDest$[ebp]
	add	edx, 4
	mov	DWORD PTR _pDest$[ebp], edx
; Line 194
	jmp	SHORT $LN17@u_strToUTF
$LN18@u_strToUTF:
; Line 195
	mov	eax, DWORD PTR _reqLength$[ebp]
	add	eax, 1
	mov	DWORD PTR _reqLength$[ebp], eax
$LN17@u_strToUTF:
; Line 197
	jmp	SHORT $LN20@u_strToUTF
$LN19@u_strToUTF:
; Line 198
	mov	eax, DWORD PTR _src$[ebp]
	mov	DWORD PTR _srcLimit$[ebp], eax
; Line 199
	cmp	DWORD PTR _ch$[ebp], 0
	je	SHORT $LN16@u_strToUTF
$LN15@u_strToUTF:
; Line 201
	mov	eax, DWORD PTR _srcLimit$[ebp]
	add	eax, 2
	mov	DWORD PTR _srcLimit$[ebp], eax
	mov	ecx, DWORD PTR _srcLimit$[ebp]
	movzx	edx, WORD PTR [ecx]
	test	edx, edx
	je	SHORT $LN16@u_strToUTF
	jmp	SHORT $LN15@u_strToUTF
$LN16@u_strToUTF:
; Line 203
	jmp	SHORT $LN12@u_strToUTF
$LN21@u_strToUTF:
; Line 204
	cmp	DWORD PTR _src$[ebp], 0
	je	SHORT $LN32@u_strToUTF
	mov	eax, DWORD PTR _srcLength$[ebp]
	mov	ecx, DWORD PTR _src$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR tv130[ebp], edx
	jmp	SHORT $LN33@u_strToUTF
$LN32@u_strToUTF:
	mov	DWORD PTR tv130[ebp], 0
$LN33@u_strToUTF:
	mov	eax, DWORD PTR tv130[ebp]
	mov	DWORD PTR _srcLimit$[ebp], eax
$LN12@u_strToUTF:
; Line 208
	mov	eax, DWORD PTR _src$[ebp]
	cmp	eax, DWORD PTR _srcLimit$[ebp]
	jae	$LN11@u_strToUTF
; Line 209
	mov	eax, DWORD PTR _src$[ebp]
	movzx	ecx, WORD PTR [eax]
	mov	DWORD PTR _ch$[ebp], ecx
	mov	edx, DWORD PTR _src$[ebp]
	add	edx, 2
	mov	DWORD PTR _src$[ebp], edx
; Line 210
	mov	eax, DWORD PTR _ch$[ebp]
	and	eax, -2048				; fffff800H
	cmp	eax, 55296				; 0000d800H
	je	SHORT $LN10@u_strToUTF
	jmp	SHORT $LN9@u_strToUTF
$LN10@u_strToUTF:
; Line 212
	mov	eax, DWORD PTR _ch$[ebp]
	and	eax, 1024				; 00000400H
	jne	SHORT $LN8@u_strToUTF
	mov	eax, DWORD PTR _src$[ebp]
	cmp	eax, DWORD PTR _srcLimit$[ebp]
	jae	SHORT $LN8@u_strToUTF
	mov	eax, DWORD PTR _src$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR _ch2$[ebp], cx
	movzx	edx, WORD PTR _ch2$[ebp]
	and	edx, -1024				; fffffc00H
	cmp	edx, 56320				; 0000dc00H
	jne	SHORT $LN8@u_strToUTF
; Line 213
	mov	eax, DWORD PTR _src$[ebp]
	add	eax, 2
	mov	DWORD PTR _src$[ebp], eax
; Line 214
	mov	eax, DWORD PTR _ch$[ebp]
	shl	eax, 10					; 0000000aH
	movzx	ecx, WORD PTR _ch2$[ebp]
	lea	edx, DWORD PTR [eax+ecx-56613888]
	mov	DWORD PTR _ch$[ebp], edx
	jmp	SHORT $LN9@u_strToUTF
$LN8@u_strToUTF:
; Line 215
	mov	eax, DWORD PTR _subchar$[ebp]
	mov	DWORD PTR _ch$[ebp], eax
	cmp	DWORD PTR _ch$[ebp], 0
	jge	SHORT $LN6@u_strToUTF
; Line 217
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 10			; 0000000aH
; Line 218
	xor	eax, eax
	jmp	SHORT $LN28@u_strToUTF
; Line 219
	jmp	SHORT $LN9@u_strToUTF
$LN6@u_strToUTF:
; Line 220
	mov	eax, DWORD PTR _numSubstitutions$[ebp]
	add	eax, 1
	mov	DWORD PTR _numSubstitutions$[ebp], eax
$LN9@u_strToUTF:
; Line 222
	mov	eax, DWORD PTR _pDest$[ebp]
	cmp	eax, DWORD PTR _destLimit$[ebp]
	jae	SHORT $LN4@u_strToUTF
; Line 223
	mov	eax, DWORD PTR _pDest$[ebp]
	mov	ecx, DWORD PTR _ch$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _pDest$[ebp]
	add	edx, 4
	mov	DWORD PTR _pDest$[ebp], edx
; Line 224
	jmp	SHORT $LN3@u_strToUTF
$LN4@u_strToUTF:
; Line 225
	mov	eax, DWORD PTR _reqLength$[ebp]
	add	eax, 1
	mov	DWORD PTR _reqLength$[ebp], eax
$LN3@u_strToUTF:
; Line 227
	jmp	$LN12@u_strToUTF
$LN11@u_strToUTF:
; Line 229
	mov	eax, DWORD PTR _pDest$[ebp]
	sub	eax, DWORD PTR _dest$[ebp]
	sar	eax, 2
	add	eax, DWORD PTR _reqLength$[ebp]
	mov	DWORD PTR _reqLength$[ebp], eax
; Line 230
	cmp	DWORD PTR _pDestLength$[ebp], 0
	je	SHORT $LN2@u_strToUTF
; Line 231
	mov	eax, DWORD PTR _pDestLength$[ebp]
	mov	ecx, DWORD PTR _reqLength$[ebp]
	mov	DWORD PTR [eax], ecx
$LN2@u_strToUTF:
; Line 233
	cmp	DWORD PTR _pNumSubstitutions$[ebp], 0
	je	SHORT $LN1@u_strToUTF
; Line 234
	mov	eax, DWORD PTR _pNumSubstitutions$[ebp]
	mov	ecx, DWORD PTR _numSubstitutions$[ebp]
	mov	DWORD PTR [eax], ecx
$LN1@u_strToUTF:
; Line 238
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _reqLength$[ebp]
	push	ecx
	mov	edx, DWORD PTR _destCapacity$[ebp]
	push	edx
	mov	eax, DWORD PTR _dest$[ebp]
	push	eax
	call	_u_terminateUChar32s_56
	add	esp, 16					; 00000010H
; Line 240
	mov	eax, DWORD PTR _dest$[ebp]
$LN28@u_strToUTF:
; Line 241
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 280				; 00000118H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_u_strToUTF32WithSub_56 ENDP
_TEXT	ENDS
PUBLIC	_u_strToUTF32_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _u_strToUTF32_56
_TEXT	SEGMENT
_dest$ = 8						; size = 4
_destCapacity$ = 12					; size = 4
_pDestLength$ = 16					; size = 4
_src$ = 20						; size = 4
_srcLength$ = 24					; size = 4
_pErrorCode$ = 28					; size = 4
_u_strToUTF32_56 PROC					; COMDAT
; Line 249
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 254
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	push	0
	push	-1
	mov	ecx, DWORD PTR _srcLength$[ebp]
	push	ecx
	mov	edx, DWORD PTR _src$[ebp]
	push	edx
	mov	eax, DWORD PTR _pDestLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _destCapacity$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dest$[ebp]
	push	edx
	call	_u_strToUTF32WithSub_56
	add	esp, 32					; 00000020H
; Line 255
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_u_strToUTF32_56 ENDP
_TEXT	ENDS
PUBLIC	_u_strFromUTF8WithSub_56
EXTRN	@_RTC_CheckStackVars@8:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _u_strFromUTF8WithSub_56
_TEXT	SEGMENT
_count$11229 = -116					; size = 4
_pSrcLimit$11228 = -104					; size = 4
_numSubstitutions$ = -92				; size = 4
_t2$ = -77						; size = 1
_t1$ = -65						; size = 1
_pSrc$ = -56						; size = 4
_reqLength$ = -44					; size = 4
_ch$ = -32						; size = 4
_pDestLimit$ = -20					; size = 4
_pDest$ = -8						; size = 4
_dest$ = 8						; size = 4
_destCapacity$ = 12					; size = 4
_pDestLength$ = 16					; size = 4
_src$ = 20						; size = 4
_srcLength$ = 24					; size = 4
_subchar$ = 28						; size = 4
_pNumSubstitutions$ = 32				; size = 4
_pErrorCode$ = 36					; size = 4
_u_strFromUTF8WithSub_56 PROC				; COMDAT
; Line 406
	push	ebp
	mov	ebp, esp
	sub	esp, 312				; 00000138H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-312]
	mov	ecx, 78					; 0000004eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 407
	mov	eax, DWORD PTR _dest$[ebp]
	mov	DWORD PTR _pDest$[ebp], eax
; Line 408
	mov	eax, DWORD PTR _destCapacity$[ebp]
	mov	ecx, DWORD PTR _dest$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR _pDestLimit$[ebp], edx
; Line 410
	mov	DWORD PTR _reqLength$[ebp], 0
; Line 411
	mov	eax, DWORD PTR _src$[ebp]
	mov	DWORD PTR _pSrc$[ebp], eax
; Line 416
	cmp	DWORD PTR _pErrorCode$[ebp], 0
	je	SHORT $LN81@u_strFromU@2
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN82@u_strFromU@2
$LN81@u_strFromU@2:
; Line 417
	xor	eax, eax
	jmp	$LN83@u_strFromU@2
$LN82@u_strFromU@2:
; Line 423
	cmp	DWORD PTR _src$[ebp], 0
	jne	SHORT $LN78@u_strFromU@2
	cmp	DWORD PTR _srcLength$[ebp], 0
	jne	SHORT $LN79@u_strFromU@2
$LN78@u_strFromU@2:
	cmp	DWORD PTR _srcLength$[ebp], -1
	jl	SHORT $LN79@u_strFromU@2
	cmp	DWORD PTR _destCapacity$[ebp], 0
	jl	SHORT $LN79@u_strFromU@2
	cmp	DWORD PTR _dest$[ebp], 0
	jne	SHORT $LN77@u_strFromU@2
	cmp	DWORD PTR _destCapacity$[ebp], 0
	jg	SHORT $LN79@u_strFromU@2
$LN77@u_strFromU@2:
	cmp	DWORD PTR _subchar$[ebp], 1114111	; 0010ffffH
	jg	SHORT $LN79@u_strFromU@2
	mov	eax, DWORD PTR _subchar$[ebp]
	and	eax, -2048				; fffff800H
	cmp	eax, 55296				; 0000d800H
	jne	SHORT $LN80@u_strFromU@2
$LN79@u_strFromU@2:
; Line 424
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 1
; Line 425
	xor	eax, eax
	jmp	$LN83@u_strFromU@2
$LN80@u_strFromU@2:
; Line 428
	cmp	DWORD PTR _pNumSubstitutions$[ebp], 0
	je	SHORT $LN76@u_strFromU@2
; Line 429
	mov	eax, DWORD PTR _pNumSubstitutions$[ebp]
	mov	DWORD PTR [eax], 0
$LN76@u_strFromU@2:
; Line 431
	mov	DWORD PTR _numSubstitutions$[ebp], 0
; Line 446
	cmp	DWORD PTR _srcLength$[ebp], 0
	jge	$LN75@u_strFromU@2
$LN74@u_strFromU@2:
; Line 452
	mov	eax, DWORD PTR _pSrc$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _ch$[ebp], ecx
	cmp	DWORD PTR _ch$[ebp], 0
	je	$LN59@u_strFromU@2
	mov	eax, DWORD PTR _pDest$[ebp]
	cmp	eax, DWORD PTR _pDestLimit$[ebp]
	jae	$LN59@u_strFromU@2
; Line 453
	cmp	DWORD PTR _ch$[ebp], 127		; 0000007fH
	jg	SHORT $LN72@u_strFromU@2
; Line 454
	mov	eax, DWORD PTR _pDest$[ebp]
	mov	cx, WORD PTR _ch$[ebp]
	mov	WORD PTR [eax], cx
	mov	edx, DWORD PTR _pDest$[ebp]
	add	edx, 2
	mov	DWORD PTR _pDest$[ebp], edx
; Line 455
	mov	eax, DWORD PTR _pSrc$[ebp]
	add	eax, 1
	mov	DWORD PTR _pSrc$[ebp], eax
; Line 456
	jmp	$LN71@u_strFromU@2
$LN72@u_strFromU@2:
; Line 457
	cmp	DWORD PTR _ch$[ebp], 224		; 000000e0H
	jle	SHORT $LN70@u_strFromU@2
; Line 462
	cmp	DWORD PTR _ch$[ebp], 236		; 000000ecH
	jg	SHORT $LN69@u_strFromU@2
	mov	eax, DWORD PTR _pSrc$[ebp]
	movzx	ecx, BYTE PTR [eax+1]
	sub	ecx, 128				; 00000080H
	mov	BYTE PTR _t1$[ebp], cl
	movzx	edx, BYTE PTR _t1$[ebp]
	cmp	edx, 63					; 0000003fH
	jg	SHORT $LN69@u_strFromU@2
	mov	eax, DWORD PTR _pSrc$[ebp]
	movzx	ecx, BYTE PTR [eax+2]
	sub	ecx, 128				; 00000080H
	mov	BYTE PTR _t2$[ebp], cl
	movzx	edx, BYTE PTR _t2$[ebp]
	cmp	edx, 63					; 0000003fH
	jg	SHORT $LN69@u_strFromU@2
; Line 464
	mov	eax, DWORD PTR _ch$[ebp]
	shl	eax, 12					; 0000000cH
	movzx	ecx, BYTE PTR _t1$[ebp]
	shl	ecx, 6
	or	eax, ecx
	movzx	edx, BYTE PTR _t2$[ebp]
	or	eax, edx
	mov	ecx, DWORD PTR _pDest$[ebp]
	mov	WORD PTR [ecx], ax
	mov	edx, DWORD PTR _pDest$[ebp]
	add	edx, 2
	mov	DWORD PTR _pDest$[ebp], edx
; Line 465
	mov	eax, DWORD PTR _pSrc$[ebp]
	add	eax, 3
	mov	DWORD PTR _pSrc$[ebp], eax
; Line 466
	jmp	$LN74@u_strFromU@2
$LN69@u_strFromU@2:
; Line 467
	jmp	SHORT $LN68@u_strFromU@2
$LN70@u_strFromU@2:
; Line 468
	cmp	DWORD PTR _ch$[ebp], 224		; 000000e0H
	jge	SHORT $LN68@u_strFromU@2
; Line 472
	cmp	DWORD PTR _ch$[ebp], 194		; 000000c2H
	jl	SHORT $LN68@u_strFromU@2
	mov	eax, DWORD PTR _pSrc$[ebp]
	movzx	ecx, BYTE PTR [eax+1]
	sub	ecx, 128				; 00000080H
	mov	BYTE PTR _t1$[ebp], cl
	movzx	edx, BYTE PTR _t1$[ebp]
	cmp	edx, 63					; 0000003fH
	jg	SHORT $LN68@u_strFromU@2
; Line 473
	mov	eax, DWORD PTR _ch$[ebp]
	and	eax, 31					; 0000001fH
	shl	eax, 6
	movzx	ecx, BYTE PTR _t1$[ebp]
	or	eax, ecx
	mov	edx, DWORD PTR _pDest$[ebp]
	mov	WORD PTR [edx], ax
	mov	eax, DWORD PTR _pDest$[ebp]
	add	eax, 2
	mov	DWORD PTR _pDest$[ebp], eax
; Line 474
	mov	eax, DWORD PTR _pSrc$[ebp]
	add	eax, 2
	mov	DWORD PTR _pSrc$[ebp], eax
; Line 475
	jmp	$LN74@u_strFromU@2
$LN68@u_strFromU@2:
; Line 480
	mov	eax, DWORD PTR _pSrc$[ebp]
	add	eax, 1
	mov	DWORD PTR _pSrc$[ebp], eax
; Line 481
	mov	eax, DWORD PTR _ch$[ebp]
	push	eax
	lea	ecx, DWORD PTR _pSrc$[ebp]
	push	ecx
	call	?utf8_nextCharSafeBodyTerminated@@YAHPAPBEH@Z ; utf8_nextCharSafeBodyTerminated
	add	esp, 8
	mov	DWORD PTR _ch$[ebp], eax
; Line 482
	cmp	DWORD PTR _ch$[ebp], 0
	jge	SHORT $LN65@u_strFromU@2
	mov	eax, DWORD PTR _numSubstitutions$[ebp]
	add	eax, 1
	mov	DWORD PTR _numSubstitutions$[ebp], eax
	mov	ecx, DWORD PTR _subchar$[ebp]
	mov	DWORD PTR _ch$[ebp], ecx
	cmp	DWORD PTR _ch$[ebp], 0
	jge	SHORT $LN65@u_strFromU@2
; Line 483
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 10			; 0000000aH
; Line 484
	xor	eax, eax
	jmp	$LN83@u_strFromU@2
	jmp	SHORT $LN71@u_strFromU@2
$LN65@u_strFromU@2:
; Line 485
	cmp	DWORD PTR _ch$[ebp], 65535		; 0000ffffH
	jg	SHORT $LN63@u_strFromU@2
; Line 486
	mov	eax, DWORD PTR _pDest$[ebp]
	mov	cx, WORD PTR _ch$[ebp]
	mov	WORD PTR [eax], cx
	mov	edx, DWORD PTR _pDest$[ebp]
	add	edx, 2
	mov	DWORD PTR _pDest$[ebp], edx
; Line 487
	jmp	SHORT $LN71@u_strFromU@2
$LN63@u_strFromU@2:
; Line 488
	mov	eax, DWORD PTR _ch$[ebp]
	sar	eax, 10					; 0000000aH
	add	eax, 55232				; 0000d7c0H
	mov	ecx, DWORD PTR _pDest$[ebp]
	mov	WORD PTR [ecx], ax
	mov	edx, DWORD PTR _pDest$[ebp]
	add	edx, 2
	mov	DWORD PTR _pDest$[ebp], edx
; Line 489
	mov	eax, DWORD PTR _pDest$[ebp]
	cmp	eax, DWORD PTR _pDestLimit$[ebp]
	jae	SHORT $LN61@u_strFromU@2
; Line 490
	mov	eax, DWORD PTR _ch$[ebp]
	and	eax, 1023				; 000003ffH
	or	eax, 56320				; 0000dc00H
	mov	ecx, DWORD PTR _pDest$[ebp]
	mov	WORD PTR [ecx], ax
	mov	edx, DWORD PTR _pDest$[ebp]
	add	edx, 2
	mov	DWORD PTR _pDest$[ebp], edx
; Line 491
	jmp	SHORT $LN71@u_strFromU@2
$LN61@u_strFromU@2:
; Line 492
	mov	eax, DWORD PTR _reqLength$[ebp]
	add	eax, 1
	mov	DWORD PTR _reqLength$[ebp], eax
; Line 493
	jmp	SHORT $LN59@u_strFromU@2
$LN71@u_strFromU@2:
; Line 497
	jmp	$LN74@u_strFromU@2
$LN59@u_strFromU@2:
; Line 500
	mov	eax, DWORD PTR _pSrc$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _ch$[ebp], ecx
	cmp	DWORD PTR _ch$[ebp], 0
	je	$LN58@u_strFromU@2
; Line 501
	cmp	DWORD PTR _ch$[ebp], 127		; 0000007fH
	jg	SHORT $LN57@u_strFromU@2
; Line 502
	mov	eax, DWORD PTR _reqLength$[ebp]
	add	eax, 1
	mov	DWORD PTR _reqLength$[ebp], eax
; Line 503
	mov	eax, DWORD PTR _pSrc$[ebp]
	add	eax, 1
	mov	DWORD PTR _pSrc$[ebp], eax
; Line 504
	jmp	$LN56@u_strFromU@2
$LN57@u_strFromU@2:
; Line 505
	cmp	DWORD PTR _ch$[ebp], 224		; 000000e0H
	jle	SHORT $LN55@u_strFromU@2
; Line 510
	cmp	DWORD PTR _ch$[ebp], 236		; 000000ecH
	jg	SHORT $LN54@u_strFromU@2
	mov	eax, DWORD PTR _pSrc$[ebp]
	movzx	ecx, BYTE PTR [eax+1]
	sub	ecx, 128				; 00000080H
	movzx	edx, cl
	cmp	edx, 63					; 0000003fH
	jg	SHORT $LN54@u_strFromU@2
	mov	eax, DWORD PTR _pSrc$[ebp]
	movzx	ecx, BYTE PTR [eax+2]
	sub	ecx, 128				; 00000080H
	movzx	edx, cl
	cmp	edx, 63					; 0000003fH
	jg	SHORT $LN54@u_strFromU@2
; Line 511
	mov	eax, DWORD PTR _reqLength$[ebp]
	add	eax, 1
	mov	DWORD PTR _reqLength$[ebp], eax
; Line 512
	mov	eax, DWORD PTR _pSrc$[ebp]
	add	eax, 3
	mov	DWORD PTR _pSrc$[ebp], eax
; Line 513
	jmp	SHORT $LN59@u_strFromU@2
$LN54@u_strFromU@2:
; Line 514
	jmp	SHORT $LN53@u_strFromU@2
$LN55@u_strFromU@2:
; Line 515
	cmp	DWORD PTR _ch$[ebp], 224		; 000000e0H
	jge	SHORT $LN53@u_strFromU@2
; Line 519
	cmp	DWORD PTR _ch$[ebp], 194		; 000000c2H
	jl	SHORT $LN53@u_strFromU@2
	mov	eax, DWORD PTR _pSrc$[ebp]
	movzx	ecx, BYTE PTR [eax+1]
	sub	ecx, 128				; 00000080H
	movzx	edx, cl
	cmp	edx, 63					; 0000003fH
	jg	SHORT $LN53@u_strFromU@2
; Line 520
	mov	eax, DWORD PTR _reqLength$[ebp]
	add	eax, 1
	mov	DWORD PTR _reqLength$[ebp], eax
; Line 521
	mov	eax, DWORD PTR _pSrc$[ebp]
	add	eax, 2
	mov	DWORD PTR _pSrc$[ebp], eax
; Line 522
	jmp	$LN59@u_strFromU@2
$LN53@u_strFromU@2:
; Line 527
	mov	eax, DWORD PTR _pSrc$[ebp]
	add	eax, 1
	mov	DWORD PTR _pSrc$[ebp], eax
; Line 528
	mov	eax, DWORD PTR _ch$[ebp]
	push	eax
	lea	ecx, DWORD PTR _pSrc$[ebp]
	push	ecx
	call	?utf8_nextCharSafeBodyTerminated@@YAHPAPBEH@Z ; utf8_nextCharSafeBodyTerminated
	add	esp, 8
	mov	DWORD PTR _ch$[ebp], eax
; Line 529
	cmp	DWORD PTR _ch$[ebp], 0
	jge	SHORT $LN50@u_strFromU@2
	mov	eax, DWORD PTR _numSubstitutions$[ebp]
	add	eax, 1
	mov	DWORD PTR _numSubstitutions$[ebp], eax
	mov	ecx, DWORD PTR _subchar$[ebp]
	mov	DWORD PTR _ch$[ebp], ecx
	cmp	DWORD PTR _ch$[ebp], 0
	jge	SHORT $LN50@u_strFromU@2
; Line 530
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 10			; 0000000aH
; Line 531
	xor	eax, eax
	jmp	$LN83@u_strFromU@2
$LN50@u_strFromU@2:
; Line 533
	mov	eax, 65535				; 0000ffffH
	cmp	eax, DWORD PTR _ch$[ebp]
	sbb	ecx, ecx
	neg	ecx
	add	ecx, 1
	add	ecx, DWORD PTR _reqLength$[ebp]
	mov	DWORD PTR _reqLength$[ebp], ecx
$LN56@u_strFromU@2:
; Line 535
	jmp	$LN59@u_strFromU@2
$LN58@u_strFromU@2:
; Line 536
	jmp	$LN49@u_strFromU@2
$LN75@u_strFromU@2:
; Line 537
	mov	eax, DWORD PTR _pSrc$[ebp]
	add	eax, DWORD PTR _srcLength$[ebp]
	mov	DWORD PTR _pSrcLimit$11228[ebp], eax
$LN48@u_strFromU@2:
; Line 548
	mov	eax, DWORD PTR _pDestLimit$[ebp]
	sub	eax, DWORD PTR _pDest$[ebp]
	sar	eax, 1
	mov	DWORD PTR _count$11229[ebp], eax
; Line 549
	mov	eax, DWORD PTR _pSrcLimit$11228[ebp]
	sub	eax, DWORD PTR _pSrc$[ebp]
	cdq
	mov	ecx, 3
	idiv	ecx
	mov	DWORD PTR _srcLength$[ebp], eax
; Line 550
	mov	eax, DWORD PTR _count$11229[ebp]
	cmp	eax, DWORD PTR _srcLength$[ebp]
	jle	SHORT $LN46@u_strFromU@2
; Line 551
	mov	eax, DWORD PTR _srcLength$[ebp]
	mov	DWORD PTR _count$11229[ebp], eax
$LN46@u_strFromU@2:
; Line 553
	cmp	DWORD PTR _count$11229[ebp], 3
	jge	SHORT $LN44@u_strFromU@2
; Line 558
	jmp	$LN27@u_strFromU@2
$LN44@u_strFromU@2:
; Line 562
	mov	eax, DWORD PTR _pSrc$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _ch$[ebp], ecx
; Line 563
	cmp	DWORD PTR _ch$[ebp], 127		; 0000007fH
	jg	SHORT $LN41@u_strFromU@2
; Line 564
	mov	eax, DWORD PTR _pDest$[ebp]
	mov	cx, WORD PTR _ch$[ebp]
	mov	WORD PTR [eax], cx
	mov	edx, DWORD PTR _pDest$[ebp]
	add	edx, 2
	mov	DWORD PTR _pDest$[ebp], edx
; Line 565
	mov	eax, DWORD PTR _pSrc$[ebp]
	add	eax, 1
	mov	DWORD PTR _pSrc$[ebp], eax
; Line 566
	jmp	$LN43@u_strFromU@2
$LN41@u_strFromU@2:
; Line 567
	cmp	DWORD PTR _ch$[ebp], 224		; 000000e0H
	jle	SHORT $LN39@u_strFromU@2
; Line 572
	cmp	DWORD PTR _ch$[ebp], 236		; 000000ecH
	jg	SHORT $LN38@u_strFromU@2
	mov	eax, DWORD PTR _pSrc$[ebp]
	movzx	ecx, BYTE PTR [eax+1]
	sub	ecx, 128				; 00000080H
	mov	BYTE PTR _t1$[ebp], cl
	movzx	edx, BYTE PTR _t1$[ebp]
	cmp	edx, 63					; 0000003fH
	jg	SHORT $LN38@u_strFromU@2
	mov	eax, DWORD PTR _pSrc$[ebp]
	movzx	ecx, BYTE PTR [eax+2]
	sub	ecx, 128				; 00000080H
	mov	BYTE PTR _t2$[ebp], cl
	movzx	edx, BYTE PTR _t2$[ebp]
	cmp	edx, 63					; 0000003fH
	jg	SHORT $LN38@u_strFromU@2
; Line 574
	mov	eax, DWORD PTR _ch$[ebp]
	shl	eax, 12					; 0000000cH
	movzx	ecx, BYTE PTR _t1$[ebp]
	shl	ecx, 6
	or	eax, ecx
	movzx	edx, BYTE PTR _t2$[ebp]
	or	eax, edx
	mov	ecx, DWORD PTR _pDest$[ebp]
	mov	WORD PTR [ecx], ax
	mov	edx, DWORD PTR _pDest$[ebp]
	add	edx, 2
	mov	DWORD PTR _pDest$[ebp], edx
; Line 575
	mov	eax, DWORD PTR _pSrc$[ebp]
	add	eax, 3
	mov	DWORD PTR _pSrc$[ebp], eax
; Line 576
	jmp	$LN43@u_strFromU@2
$LN38@u_strFromU@2:
; Line 577
	jmp	SHORT $LN37@u_strFromU@2
$LN39@u_strFromU@2:
; Line 578
	cmp	DWORD PTR _ch$[ebp], 224		; 000000e0H
	jge	SHORT $LN37@u_strFromU@2
; Line 582
	cmp	DWORD PTR _ch$[ebp], 194		; 000000c2H
	jl	SHORT $LN37@u_strFromU@2
	mov	eax, DWORD PTR _pSrc$[ebp]
	movzx	ecx, BYTE PTR [eax+1]
	sub	ecx, 128				; 00000080H
	mov	BYTE PTR _t1$[ebp], cl
	movzx	edx, BYTE PTR _t1$[ebp]
	cmp	edx, 63					; 0000003fH
	jg	SHORT $LN37@u_strFromU@2
; Line 583
	mov	eax, DWORD PTR _ch$[ebp]
	and	eax, 31					; 0000001fH
	shl	eax, 6
	movzx	ecx, BYTE PTR _t1$[ebp]
	or	eax, ecx
	mov	edx, DWORD PTR _pDest$[ebp]
	mov	WORD PTR [edx], ax
	mov	eax, DWORD PTR _pDest$[ebp]
	add	eax, 2
	mov	DWORD PTR _pDest$[ebp], eax
; Line 584
	mov	eax, DWORD PTR _pSrc$[ebp]
	add	eax, 2
	mov	DWORD PTR _pSrc$[ebp], eax
; Line 585
	jmp	$LN43@u_strFromU@2
$LN37@u_strFromU@2:
; Line 589
	cmp	DWORD PTR _ch$[ebp], 240		; 000000f0H
	jge	SHORT $LN33@u_strFromU@2
	cmp	DWORD PTR _subchar$[ebp], 65535		; 0000ffffH
	jle	SHORT $LN34@u_strFromU@2
$LN33@u_strFromU@2:
; Line 595
	mov	eax, DWORD PTR _count$11229[ebp]
	sub	eax, 1
	mov	DWORD PTR _count$11229[ebp], eax
	jne	SHORT $LN34@u_strFromU@2
; Line 596
	jmp	$LN42@u_strFromU@2
$LN34@u_strFromU@2:
; Line 601
	mov	eax, DWORD PTR _pSrc$[ebp]
	add	eax, 1
	mov	DWORD PTR _pSrc$[ebp], eax
; Line 602
	mov	eax, DWORD PTR _ch$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pSrcLimit$11228[ebp]
	push	ecx
	lea	edx, DWORD PTR _pSrc$[ebp]
	push	edx
	call	?utf8_nextCharSafeBodyPointer@@YAHPAPBEPBEH@Z ; utf8_nextCharSafeBodyPointer
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _ch$[ebp], eax
; Line 603
	cmp	DWORD PTR _ch$[ebp], 0
	jge	SHORT $LN31@u_strFromU@2
	mov	eax, DWORD PTR _numSubstitutions$[ebp]
	add	eax, 1
	mov	DWORD PTR _numSubstitutions$[ebp], eax
	mov	ecx, DWORD PTR _subchar$[ebp]
	mov	DWORD PTR _ch$[ebp], ecx
	cmp	DWORD PTR _ch$[ebp], 0
	jge	SHORT $LN31@u_strFromU@2
; Line 604
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 10			; 0000000aH
; Line 605
	xor	eax, eax
	jmp	$LN83@u_strFromU@2
	jmp	SHORT $LN43@u_strFromU@2
$LN31@u_strFromU@2:
; Line 606
	cmp	DWORD PTR _ch$[ebp], 65535		; 0000ffffH
	jg	SHORT $LN29@u_strFromU@2
; Line 607
	mov	eax, DWORD PTR _pDest$[ebp]
	mov	cx, WORD PTR _ch$[ebp]
	mov	WORD PTR [eax], cx
	mov	edx, DWORD PTR _pDest$[ebp]
	add	edx, 2
	mov	DWORD PTR _pDest$[ebp], edx
; Line 608
	jmp	SHORT $LN43@u_strFromU@2
$LN29@u_strFromU@2:
; Line 609
	mov	eax, DWORD PTR _ch$[ebp]
	sar	eax, 10					; 0000000aH
	add	eax, 55232				; 0000d7c0H
	mov	ecx, DWORD PTR _pDest$[ebp]
	mov	WORD PTR [ecx], ax
	mov	edx, DWORD PTR _pDest$[ebp]
	add	edx, 2
	mov	DWORD PTR _pDest$[ebp], edx
; Line 610
	mov	eax, DWORD PTR _ch$[ebp]
	and	eax, 1023				; 000003ffH
	or	eax, 56320				; 0000dc00H
	mov	ecx, DWORD PTR _pDest$[ebp]
	mov	WORD PTR [ecx], ax
	mov	edx, DWORD PTR _pDest$[ebp]
	add	edx, 2
	mov	DWORD PTR _pDest$[ebp], edx
$LN43@u_strFromU@2:
; Line 613
	mov	eax, DWORD PTR _count$11229[ebp]
	sub	eax, 1
	mov	DWORD PTR _count$11229[ebp], eax
	cmp	DWORD PTR _count$11229[ebp], 0
	jg	$LN44@u_strFromU@2
$LN42@u_strFromU@2:
; Line 614
	jmp	$LN48@u_strFromU@2
$LN27@u_strFromU@2:
; Line 616
	mov	eax, DWORD PTR _pSrc$[ebp]
	cmp	eax, DWORD PTR _pSrcLimit$11228[ebp]
	jae	$LN12@u_strFromU@2
	mov	eax, DWORD PTR _pDest$[ebp]
	cmp	eax, DWORD PTR _pDestLimit$[ebp]
	jae	$LN12@u_strFromU@2
; Line 617
	mov	eax, DWORD PTR _pSrc$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _ch$[ebp], ecx
; Line 618
	cmp	DWORD PTR _ch$[ebp], 127		; 0000007fH
	jg	SHORT $LN25@u_strFromU@2
; Line 619
	mov	eax, DWORD PTR _pDest$[ebp]
	mov	cx, WORD PTR _ch$[ebp]
	mov	WORD PTR [eax], cx
	mov	edx, DWORD PTR _pDest$[ebp]
	add	edx, 2
	mov	DWORD PTR _pDest$[ebp], edx
; Line 620
	mov	eax, DWORD PTR _pSrc$[ebp]
	add	eax, 1
	mov	DWORD PTR _pSrc$[ebp], eax
; Line 621
	jmp	$LN24@u_strFromU@2
$LN25@u_strFromU@2:
; Line 622
	cmp	DWORD PTR _ch$[ebp], 224		; 000000e0H
	jle	SHORT $LN23@u_strFromU@2
; Line 628
	cmp	DWORD PTR _ch$[ebp], 236		; 000000ecH
	jg	SHORT $LN22@u_strFromU@2
	mov	eax, DWORD PTR _pSrcLimit$11228[ebp]
	sub	eax, DWORD PTR _pSrc$[ebp]
	cmp	eax, 3
	jl	SHORT $LN22@u_strFromU@2
	mov	eax, DWORD PTR _pSrc$[ebp]
	movzx	ecx, BYTE PTR [eax+1]
	sub	ecx, 128				; 00000080H
	mov	BYTE PTR _t1$[ebp], cl
	movzx	edx, BYTE PTR _t1$[ebp]
	cmp	edx, 63					; 0000003fH
	jg	SHORT $LN22@u_strFromU@2
	mov	eax, DWORD PTR _pSrc$[ebp]
	movzx	ecx, BYTE PTR [eax+2]
	sub	ecx, 128				; 00000080H
	mov	BYTE PTR _t2$[ebp], cl
	movzx	edx, BYTE PTR _t2$[ebp]
	cmp	edx, 63					; 0000003fH
	jg	SHORT $LN22@u_strFromU@2
; Line 630
	mov	eax, DWORD PTR _ch$[ebp]
	shl	eax, 12					; 0000000cH
	movzx	ecx, BYTE PTR _t1$[ebp]
	shl	ecx, 6
	or	eax, ecx
	movzx	edx, BYTE PTR _t2$[ebp]
	or	eax, edx
	mov	ecx, DWORD PTR _pDest$[ebp]
	mov	WORD PTR [ecx], ax
	mov	edx, DWORD PTR _pDest$[ebp]
	add	edx, 2
	mov	DWORD PTR _pDest$[ebp], edx
; Line 631
	mov	eax, DWORD PTR _pSrc$[ebp]
	add	eax, 3
	mov	DWORD PTR _pSrc$[ebp], eax
; Line 632
	jmp	$LN27@u_strFromU@2
$LN22@u_strFromU@2:
; Line 633
	jmp	SHORT $LN21@u_strFromU@2
$LN23@u_strFromU@2:
; Line 634
	cmp	DWORD PTR _ch$[ebp], 224		; 000000e0H
	jge	SHORT $LN21@u_strFromU@2
; Line 639
	cmp	DWORD PTR _ch$[ebp], 194		; 000000c2H
	jl	SHORT $LN21@u_strFromU@2
	mov	eax, DWORD PTR _pSrcLimit$11228[ebp]
	sub	eax, DWORD PTR _pSrc$[ebp]
	cmp	eax, 2
	jl	SHORT $LN21@u_strFromU@2
	mov	eax, DWORD PTR _pSrc$[ebp]
	movzx	ecx, BYTE PTR [eax+1]
	sub	ecx, 128				; 00000080H
	mov	BYTE PTR _t1$[ebp], cl
	movzx	edx, BYTE PTR _t1$[ebp]
	cmp	edx, 63					; 0000003fH
	jg	SHORT $LN21@u_strFromU@2
; Line 640
	mov	eax, DWORD PTR _ch$[ebp]
	and	eax, 31					; 0000001fH
	shl	eax, 6
	movzx	ecx, BYTE PTR _t1$[ebp]
	or	eax, ecx
	mov	edx, DWORD PTR _pDest$[ebp]
	mov	WORD PTR [edx], ax
	mov	eax, DWORD PTR _pDest$[ebp]
	add	eax, 2
	mov	DWORD PTR _pDest$[ebp], eax
; Line 641
	mov	eax, DWORD PTR _pSrc$[ebp]
	add	eax, 2
	mov	DWORD PTR _pSrc$[ebp], eax
; Line 642
	jmp	$LN27@u_strFromU@2
$LN21@u_strFromU@2:
; Line 647
	mov	eax, DWORD PTR _pSrc$[ebp]
	add	eax, 1
	mov	DWORD PTR _pSrc$[ebp], eax
; Line 648
	mov	eax, DWORD PTR _ch$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pSrcLimit$11228[ebp]
	push	ecx
	lea	edx, DWORD PTR _pSrc$[ebp]
	push	edx
	call	?utf8_nextCharSafeBodyPointer@@YAHPAPBEPBEH@Z ; utf8_nextCharSafeBodyPointer
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _ch$[ebp], eax
; Line 649
	cmp	DWORD PTR _ch$[ebp], 0
	jge	SHORT $LN18@u_strFromU@2
	mov	eax, DWORD PTR _numSubstitutions$[ebp]
	add	eax, 1
	mov	DWORD PTR _numSubstitutions$[ebp], eax
	mov	ecx, DWORD PTR _subchar$[ebp]
	mov	DWORD PTR _ch$[ebp], ecx
	cmp	DWORD PTR _ch$[ebp], 0
	jge	SHORT $LN18@u_strFromU@2
; Line 650
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 10			; 0000000aH
; Line 651
	xor	eax, eax
	jmp	$LN83@u_strFromU@2
	jmp	SHORT $LN24@u_strFromU@2
$LN18@u_strFromU@2:
; Line 652
	cmp	DWORD PTR _ch$[ebp], 65535		; 0000ffffH
	jg	SHORT $LN16@u_strFromU@2
; Line 653
	mov	eax, DWORD PTR _pDest$[ebp]
	mov	cx, WORD PTR _ch$[ebp]
	mov	WORD PTR [eax], cx
	mov	edx, DWORD PTR _pDest$[ebp]
	add	edx, 2
	mov	DWORD PTR _pDest$[ebp], edx
; Line 654
	jmp	SHORT $LN24@u_strFromU@2
$LN16@u_strFromU@2:
; Line 655
	mov	eax, DWORD PTR _ch$[ebp]
	sar	eax, 10					; 0000000aH
	add	eax, 55232				; 0000d7c0H
	mov	ecx, DWORD PTR _pDest$[ebp]
	mov	WORD PTR [ecx], ax
	mov	edx, DWORD PTR _pDest$[ebp]
	add	edx, 2
	mov	DWORD PTR _pDest$[ebp], edx
; Line 656
	mov	eax, DWORD PTR _pDest$[ebp]
	cmp	eax, DWORD PTR _pDestLimit$[ebp]
	jae	SHORT $LN14@u_strFromU@2
; Line 657
	mov	eax, DWORD PTR _ch$[ebp]
	and	eax, 1023				; 000003ffH
	or	eax, 56320				; 0000dc00H
	mov	ecx, DWORD PTR _pDest$[ebp]
	mov	WORD PTR [ecx], ax
	mov	edx, DWORD PTR _pDest$[ebp]
	add	edx, 2
	mov	DWORD PTR _pDest$[ebp], edx
; Line 658
	jmp	SHORT $LN24@u_strFromU@2
$LN14@u_strFromU@2:
; Line 659
	mov	eax, DWORD PTR _reqLength$[ebp]
	add	eax, 1
	mov	DWORD PTR _reqLength$[ebp], eax
; Line 660
	jmp	SHORT $LN12@u_strFromU@2
$LN24@u_strFromU@2:
; Line 664
	jmp	$LN27@u_strFromU@2
$LN12@u_strFromU@2:
; Line 666
	mov	eax, DWORD PTR _pSrc$[ebp]
	cmp	eax, DWORD PTR _pSrcLimit$11228[ebp]
	jae	$LN49@u_strFromU@2
; Line 667
	mov	eax, DWORD PTR _pSrc$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _ch$[ebp], ecx
; Line 668
	cmp	DWORD PTR _ch$[ebp], 127		; 0000007fH
	jg	SHORT $LN10@u_strFromU@2
; Line 669
	mov	eax, DWORD PTR _reqLength$[ebp]
	add	eax, 1
	mov	DWORD PTR _reqLength$[ebp], eax
; Line 670
	mov	eax, DWORD PTR _pSrc$[ebp]
	add	eax, 1
	mov	DWORD PTR _pSrc$[ebp], eax
; Line 671
	jmp	$LN9@u_strFromU@2
$LN10@u_strFromU@2:
; Line 672
	cmp	DWORD PTR _ch$[ebp], 224		; 000000e0H
	jle	SHORT $LN8@u_strFromU@2
; Line 678
	cmp	DWORD PTR _ch$[ebp], 236		; 000000ecH
	jg	SHORT $LN7@u_strFromU@2
	mov	eax, DWORD PTR _pSrcLimit$11228[ebp]
	sub	eax, DWORD PTR _pSrc$[ebp]
	cmp	eax, 3
	jl	SHORT $LN7@u_strFromU@2
	mov	eax, DWORD PTR _pSrc$[ebp]
	movzx	ecx, BYTE PTR [eax+1]
	sub	ecx, 128				; 00000080H
	movzx	edx, cl
	cmp	edx, 63					; 0000003fH
	jg	SHORT $LN7@u_strFromU@2
	mov	eax, DWORD PTR _pSrc$[ebp]
	movzx	ecx, BYTE PTR [eax+2]
	sub	ecx, 128				; 00000080H
	movzx	edx, cl
	cmp	edx, 63					; 0000003fH
	jg	SHORT $LN7@u_strFromU@2
; Line 679
	mov	eax, DWORD PTR _reqLength$[ebp]
	add	eax, 1
	mov	DWORD PTR _reqLength$[ebp], eax
; Line 680
	mov	eax, DWORD PTR _pSrc$[ebp]
	add	eax, 3
	mov	DWORD PTR _pSrc$[ebp], eax
; Line 681
	jmp	$LN12@u_strFromU@2
$LN7@u_strFromU@2:
; Line 682
	jmp	SHORT $LN6@u_strFromU@2
$LN8@u_strFromU@2:
; Line 683
	cmp	DWORD PTR _ch$[ebp], 224		; 000000e0H
	jge	SHORT $LN6@u_strFromU@2
; Line 688
	cmp	DWORD PTR _ch$[ebp], 194		; 000000c2H
	jl	SHORT $LN6@u_strFromU@2
	mov	eax, DWORD PTR _pSrcLimit$11228[ebp]
	sub	eax, DWORD PTR _pSrc$[ebp]
	cmp	eax, 2
	jl	SHORT $LN6@u_strFromU@2
	mov	eax, DWORD PTR _pSrc$[ebp]
	movzx	ecx, BYTE PTR [eax+1]
	sub	ecx, 128				; 00000080H
	movzx	edx, cl
	cmp	edx, 63					; 0000003fH
	jg	SHORT $LN6@u_strFromU@2
; Line 689
	mov	eax, DWORD PTR _reqLength$[ebp]
	add	eax, 1
	mov	DWORD PTR _reqLength$[ebp], eax
; Line 690
	mov	eax, DWORD PTR _pSrc$[ebp]
	add	eax, 2
	mov	DWORD PTR _pSrc$[ebp], eax
; Line 691
	jmp	$LN12@u_strFromU@2
$LN6@u_strFromU@2:
; Line 696
	mov	eax, DWORD PTR _pSrc$[ebp]
	add	eax, 1
	mov	DWORD PTR _pSrc$[ebp], eax
; Line 697
	mov	eax, DWORD PTR _ch$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pSrcLimit$11228[ebp]
	push	ecx
	lea	edx, DWORD PTR _pSrc$[ebp]
	push	edx
	call	?utf8_nextCharSafeBodyPointer@@YAHPAPBEPBEH@Z ; utf8_nextCharSafeBodyPointer
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _ch$[ebp], eax
; Line 698
	cmp	DWORD PTR _ch$[ebp], 0
	jge	SHORT $LN3@u_strFromU@2
	mov	eax, DWORD PTR _numSubstitutions$[ebp]
	add	eax, 1
	mov	DWORD PTR _numSubstitutions$[ebp], eax
	mov	ecx, DWORD PTR _subchar$[ebp]
	mov	DWORD PTR _ch$[ebp], ecx
	cmp	DWORD PTR _ch$[ebp], 0
	jge	SHORT $LN3@u_strFromU@2
; Line 699
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 10			; 0000000aH
; Line 700
	xor	eax, eax
	jmp	SHORT $LN83@u_strFromU@2
$LN3@u_strFromU@2:
; Line 702
	mov	eax, 65535				; 0000ffffH
	cmp	eax, DWORD PTR _ch$[ebp]
	sbb	ecx, ecx
	neg	ecx
	add	ecx, 1
	add	ecx, DWORD PTR _reqLength$[ebp]
	mov	DWORD PTR _reqLength$[ebp], ecx
$LN9@u_strFromU@2:
; Line 704
	jmp	$LN12@u_strFromU@2
$LN49@u_strFromU@2:
; Line 707
	mov	eax, DWORD PTR _pDest$[ebp]
	sub	eax, DWORD PTR _dest$[ebp]
	sar	eax, 1
	add	eax, DWORD PTR _reqLength$[ebp]
	mov	DWORD PTR _reqLength$[ebp], eax
; Line 709
	cmp	DWORD PTR _pNumSubstitutions$[ebp], 0
	je	SHORT $LN2@u_strFromU@2
; Line 710
	mov	eax, DWORD PTR _pNumSubstitutions$[ebp]
	mov	ecx, DWORD PTR _numSubstitutions$[ebp]
	mov	DWORD PTR [eax], ecx
$LN2@u_strFromU@2:
; Line 713
	cmp	DWORD PTR _pDestLength$[ebp], 0
	je	SHORT $LN1@u_strFromU@2
; Line 714
	mov	eax, DWORD PTR _pDestLength$[ebp]
	mov	ecx, DWORD PTR _reqLength$[ebp]
	mov	DWORD PTR [eax], ecx
$LN1@u_strFromU@2:
; Line 718
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _reqLength$[ebp]
	push	ecx
	mov	edx, DWORD PTR _destCapacity$[ebp]
	push	edx
	mov	eax, DWORD PTR _dest$[ebp]
	push	eax
	call	_u_terminateUChars_56
	add	esp, 16					; 00000010H
; Line 720
	mov	eax, DWORD PTR _dest$[ebp]
$LN83@u_strFromU@2:
; Line 721
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN95@u_strFromU@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 312				; 00000138H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN95@u_strFromU@2:
	DD	1
	DD	$LN94@u_strFromU@2
$LN94@u_strFromU@2:
	DD	-56					; ffffffc8H
	DD	4
	DD	$LN93@u_strFromU@2
$LN93@u_strFromU@2:
	DB	112					; 00000070H
	DB	83					; 00000053H
	DB	114					; 00000072H
	DB	99					; 00000063H
	DB	0
_u_strFromUTF8WithSub_56 ENDP
_TEXT	ENDS
PUBLIC	??_C@_1BA@CEKBILOG@?$AAc?$AAo?$AAu?$AAn?$AAt?$AA?$DM?$AA6?$AA?$AA@ ; `string'
PUBLIC	??_C@_1FO@LJNINEJA@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@ ; `string'
PUBLIC	?__LINE__Var@?1??utf8_nextCharSafeBodyTerminated@@YAHPAPBEH@Z@4JA@324cad1b ; `utf8_nextCharSafeBodyTerminated'::`2'::__LINE__Var
EXTRN	__imp___wassert:PROC
;	COMDAT ??_C@_1BA@CEKBILOG@?$AAc?$AAo?$AAu?$AAn?$AAt?$AA?$DM?$AA6?$AA?$AA@
CONST	SEGMENT
??_C@_1BA@CEKBILOG@?$AAc?$AAo?$AAu?$AAn?$AAt?$AA?$DM?$AA6?$AA?$AA@ DB 'c', 00H
	DB	'o', 00H, 'u', 00H, 'n', 00H, 't', 00H, '<', 00H, '6', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1FO@LJNINEJA@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@
CONST	SEGMENT
??_C@_1FO@LJNINEJA@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@ DB 'd'
	DB	00H, ':', 00H, '\', 00H, 'm', 00H, 'o', 00H, 'z', 00H, 'i', 00H
	DB	'l', 00H, 'l', 00H, 'a', 00H, '\', 00H, 'i', 00H, 'n', 00H, 't'
	DB	00H, 'l', 00H, '\', 00H, 'i', 00H, 'c', 00H, 'u', 00H, '\', 00H
	DB	's', 00H, 'o', 00H, 'u', 00H, 'r', 00H, 'c', 00H, 'e', 00H, '\'
	DB	00H, 'c', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'o', 00H, 'n', 00H
	DB	'\', 00H, 'u', 00H, 's', 00H, 't', 00H, 'r', 00H, 't', 00H, 'r'
	DB	00H, 'n', 00H, 's', 00H, '.', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??utf8_nextCharSafeBodyTerminated@@YAHPAPBEH@Z@4JA@324cad1b
_DATA	SEGMENT
?__LINE__Var@?1??utf8_nextCharSafeBodyTerminated@@YAHPAPBEH@Z@4JA@324cad1b DD 0110H ; `utf8_nextCharSafeBodyTerminated'::`2'::__LINE__Var
; Function compile flags: /Odtp /RTCsu /ZI
_DATA	ENDS
;	COMDAT ?utf8_nextCharSafeBodyTerminated@@YAHPAPBEH@Z
_TEXT	SEGMENT
tv83 = -248						; size = 4
tv131 = -244						; size = 4
tv84 = -244						; size = 4
_count$ = -41						; size = 1
_illegal$ = -29						; size = 1
_trail$ = -17						; size = 1
_s$ = -8						; size = 4
_ps$ = 8						; size = 4
_c$ = 12						; size = 4
?utf8_nextCharSafeBodyTerminated@@YAHPAPBEH@Z PROC	; utf8_nextCharSafeBodyTerminated, COMDAT
; Line 272
	push	ebp
	mov	ebp, esp
	sub	esp, 248				; 000000f8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-248]
	mov	ecx, 62					; 0000003eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 273
	mov	eax, DWORD PTR _ps$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _s$[ebp], ecx
; Line 274
	mov	BYTE PTR _illegal$[ebp], 0
; Line 275
	movzx	eax, BYTE PTR _c$[ebp]
	cmp	eax, 240				; 000000f0H
	jge	SHORT $LN20@utf8_nextC
	movzx	ecx, BYTE PTR _c$[ebp]
	xor	edx, edx
	cmp	ecx, 192				; 000000c0H
	setge	dl
	movzx	eax, BYTE PTR _c$[ebp]
	xor	ecx, ecx
	cmp	eax, 224				; 000000e0H
	setge	cl
	add	edx, ecx
	mov	DWORD PTR tv84[ebp], edx
	jmp	SHORT $LN21@utf8_nextC
$LN20@utf8_nextC:
	movzx	edx, BYTE PTR _c$[ebp]
	cmp	edx, 254				; 000000feH
	jge	SHORT $LN18@utf8_nextC
	movzx	eax, BYTE PTR _c$[ebp]
	xor	ecx, ecx
	cmp	eax, 248				; 000000f8H
	setge	cl
	movzx	edx, BYTE PTR _c$[ebp]
	xor	eax, eax
	cmp	edx, 252				; 000000fcH
	setge	al
	lea	ecx, DWORD PTR [ecx+eax+3]
	mov	DWORD PTR tv83[ebp], ecx
	jmp	SHORT $LN19@utf8_nextC
$LN18@utf8_nextC:
	mov	DWORD PTR tv83[ebp], 0
$LN19@utf8_nextC:
	mov	edx, DWORD PTR tv83[ebp]
	mov	DWORD PTR tv84[ebp], edx
$LN21@utf8_nextC:
	mov	al, BYTE PTR tv84[ebp]
	mov	BYTE PTR _count$[ebp], al
; Line 276
	movzx	eax, BYTE PTR _count$[ebp]
	cmp	eax, 6
	jl	SHORT $LN22@utf8_nextC
	mov	ecx, DWORD PTR ?__LINE__Var@?1??utf8_nextCharSafeBodyTerminated@@YAHPAPBEH@Z@4JA@324cad1b
	add	ecx, 4
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_1FO@LJNINEJA@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@
	push	OFFSET ??_C@_1BA@CEKBILOG@?$AAc?$AAo?$AAu?$AAn?$AAt?$AA?$DM?$AA6?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN22@utf8_nextC:
; Line 277
	movzx	eax, BYTE PTR _count$[ebp]
	mov	ecx, 6
	sub	ecx, eax
	mov	edx, 1
	shl	edx, cl
	sub	edx, 1
	and	edx, DWORD PTR _c$[ebp]
	mov	DWORD PTR _c$[ebp], edx
; Line 279
	movzx	eax, BYTE PTR _count$[ebp]
	mov	DWORD PTR tv131[ebp], eax
	cmp	DWORD PTR tv131[ebp], 5
	ja	$LN14@utf8_nextC
	mov	ecx, DWORD PTR tv131[ebp]
	jmp	DWORD PTR $LN23@utf8_nextC[ecx*4]
$LN13@utf8_nextC:
; Line 284
	mov	BYTE PTR _illegal$[ebp], 1
; Line 285
	jmp	$LN14@utf8_nextC
$LN12@utf8_nextC:
; Line 287
	mov	eax, DWORD PTR _s$[ebp]
	movzx	ecx, BYTE PTR [eax]
	sub	ecx, 128				; 00000080H
	mov	BYTE PTR _trail$[ebp], cl
	mov	edx, DWORD PTR _s$[ebp]
	add	edx, 1
	mov	DWORD PTR _s$[ebp], edx
; Line 288
	mov	eax, DWORD PTR _c$[ebp]
	shl	eax, 6
	movzx	ecx, BYTE PTR _trail$[ebp]
	or	eax, ecx
	mov	DWORD PTR _c$[ebp], eax
; Line 289
	movzx	eax, BYTE PTR _trail$[ebp]
	cmp	eax, 63					; 0000003fH
	jg	SHORT $LN10@utf8_nextC
	cmp	DWORD PTR _c$[ebp], 272			; 00000110H
	jl	SHORT $LN9@utf8_nextC
$LN10@utf8_nextC:
; Line 291
	mov	BYTE PTR _illegal$[ebp], 1
; Line 292
	jmp	SHORT $LN14@utf8_nextC
$LN9@utf8_nextC:
; Line 295
	mov	eax, DWORD PTR _s$[ebp]
	movzx	ecx, BYTE PTR [eax]
	sub	ecx, 128				; 00000080H
	mov	BYTE PTR _trail$[ebp], cl
	mov	edx, DWORD PTR _s$[ebp]
	add	edx, 1
	mov	DWORD PTR _s$[ebp], edx
; Line 296
	movzx	eax, BYTE PTR _trail$[ebp]
	cmp	eax, 63					; 0000003fH
	jle	SHORT $LN8@utf8_nextC
; Line 298
	mov	BYTE PTR _illegal$[ebp], 1
; Line 299
	jmp	SHORT $LN14@utf8_nextC
$LN8@utf8_nextC:
; Line 301
	mov	eax, DWORD PTR _c$[ebp]
	shl	eax, 6
	movzx	ecx, BYTE PTR _trail$[ebp]
	or	eax, ecx
	mov	DWORD PTR _c$[ebp], eax
$LN7@utf8_nextC:
; Line 303
	mov	eax, DWORD PTR _s$[ebp]
	movzx	ecx, BYTE PTR [eax]
	sub	ecx, 128				; 00000080H
	mov	BYTE PTR _trail$[ebp], cl
	mov	edx, DWORD PTR _s$[ebp]
	add	edx, 1
	mov	DWORD PTR _s$[ebp], edx
; Line 304
	movzx	eax, BYTE PTR _trail$[ebp]
	cmp	eax, 63					; 0000003fH
	jle	SHORT $LN6@utf8_nextC
; Line 306
	mov	BYTE PTR _illegal$[ebp], 1
$LN6@utf8_nextC:
; Line 308
	mov	eax, DWORD PTR _c$[ebp]
	shl	eax, 6
	movzx	ecx, BYTE PTR _trail$[ebp]
	or	eax, ecx
	mov	DWORD PTR _c$[ebp], eax
; Line 309
	jmp	SHORT $LN14@utf8_nextC
$LN5@utf8_nextC:
; Line 311
	or	eax, -1
	jmp	SHORT $LN16@utf8_nextC
$LN14@utf8_nextC:
; Line 317
	movzx	eax, BYTE PTR _illegal$[ebp]
	test	eax, eax
	jne	SHORT $LN3@utf8_nextC
	movzx	eax, BYTE PTR _count$[ebp]
	mov	ecx, DWORD PTR _c$[ebp]
	cmp	ecx, DWORD PTR _utf8_minLegal[eax*4]
	jl	SHORT $LN3@utf8_nextC
	mov	eax, DWORD PTR _c$[ebp]
	and	eax, -2048				; fffff800H
	cmp	eax, 55296				; 0000d800H
	jne	SHORT $LN4@utf8_nextC
$LN3@utf8_nextC:
; Line 320
	mov	eax, DWORD PTR _ps$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _s$[ebp], ecx
$LN2@utf8_nextC:
; Line 321
	movzx	eax, BYTE PTR _count$[ebp]
	test	eax, eax
	jle	SHORT $LN1@utf8_nextC
	mov	eax, DWORD PTR _s$[ebp]
	movzx	ecx, BYTE PTR [eax]
	and	ecx, 192				; 000000c0H
	cmp	ecx, 128				; 00000080H
	jne	SHORT $LN1@utf8_nextC
; Line 322
	mov	eax, DWORD PTR _s$[ebp]
	add	eax, 1
	mov	DWORD PTR _s$[ebp], eax
; Line 323
	mov	al, BYTE PTR _count$[ebp]
	sub	al, 1
	mov	BYTE PTR _count$[ebp], al
; Line 324
	jmp	SHORT $LN2@utf8_nextC
$LN1@utf8_nextC:
; Line 325
	mov	DWORD PTR _c$[ebp], -1
$LN4@utf8_nextC:
; Line 327
	mov	eax, DWORD PTR _ps$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 328
	mov	eax, DWORD PTR _c$[ebp]
$LN16@utf8_nextC:
; Line 329
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 248				; 000000f8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN23@utf8_nextC:
	DD	$LN5@utf8_nextC
	DD	$LN7@utf8_nextC
	DD	$LN9@utf8_nextC
	DD	$LN12@utf8_nextC
	DD	$LN13@utf8_nextC
	DD	$LN13@utf8_nextC
?utf8_nextCharSafeBodyTerminated@@YAHPAPBEH@Z ENDP	; utf8_nextCharSafeBodyTerminated
_TEXT	ENDS
PUBLIC	??_C@_1JK@GMEKFEEN@?$AAi?$AAl?$AAl?$AAe?$AAg?$AAa?$AAl?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AAc?$AAo?$AAu?$AAn?$AAt?$AA?$DM?$AA?$CI?$AAi?$AAn?$AAt?$AA3?$AA2?$AA_?$AAt?$AA?$CJ?$AA?$CI?$AAs?$AAi?$AAz?$AAe?$AAo@ ; `string'
PUBLIC	?__LINE__Var@?1??utf8_nextCharSafeBodyPointer@@YAHPAPBEPBEH@Z@4JA@324cad1b ; `utf8_nextCharSafeBodyPointer'::`2'::__LINE__Var
;	COMDAT ??_C@_1JK@GMEKFEEN@?$AAi?$AAl?$AAl?$AAe?$AAg?$AAa?$AAl?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AAc?$AAo?$AAu?$AAn?$AAt?$AA?$DM?$AA?$CI?$AAi?$AAn?$AAt?$AA3?$AA2?$AA_?$AAt?$AA?$CJ?$AA?$CI?$AAs?$AAi?$AAz?$AAe?$AAo@
CONST	SEGMENT
??_C@_1JK@GMEKFEEN@?$AAi?$AAl?$AAl?$AAe?$AAg?$AAa?$AAl?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AAc?$AAo?$AAu?$AAn?$AAt?$AA?$DM?$AA?$CI?$AAi?$AAn?$AAt?$AA3?$AA2?$AA_?$AAt?$AA?$CJ?$AA?$CI?$AAs?$AAi?$AAz?$AAe?$AAo@ DB 'i'
	DB	00H, 'l', 00H, 'l', 00H, 'e', 00H, 'g', 00H, 'a', 00H, 'l', 00H
	DB	' ', 00H, '|', 00H, '|', 00H, ' ', 00H, 'c', 00H, 'o', 00H, 'u'
	DB	00H, 'n', 00H, 't', 00H, '<', 00H, '(', 00H, 'i', 00H, 'n', 00H
	DB	't', 00H, '3', 00H, '2', 00H, '_', 00H, 't', 00H, ')', 00H, '('
	DB	00H, 's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, 'o', 00H, 'f', 00H
	DB	'(', 00H, 'u', 00H, 't', 00H, 'f', 00H, '8', 00H, '_', 00H, 'm'
	DB	00H, 'i', 00H, 'n', 00H, 'L', 00H, 'e', 00H, 'g', 00H, 'a', 00H
	DB	'l', 00H, ')', 00H, '/', 00H, 's', 00H, 'i', 00H, 'z', 00H, 'e'
	DB	00H, 'o', 00H, 'f', 00H, '(', 00H, '(', 00H, 'u', 00H, 't', 00H
	DB	'f', 00H, '8', 00H, '_', 00H, 'm', 00H, 'i', 00H, 'n', 00H, 'L'
	DB	00H, 'e', 00H, 'g', 00H, 'a', 00H, 'l', 00H, ')', 00H, '[', 00H
	DB	'0', 00H, ']', 00H, ')', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??utf8_nextCharSafeBodyPointer@@YAHPAPBEPBEH@Z@4JA@324cad1b
_DATA	SEGMENT
?__LINE__Var@?1??utf8_nextCharSafeBodyPointer@@YAHPAPBEPBEH@Z@4JA@324cad1b DD 0155H ; `utf8_nextCharSafeBodyPointer'::`2'::__LINE__Var
; Function compile flags: /Odtp /RTCsu /ZI
_DATA	ENDS
;	COMDAT ?utf8_nextCharSafeBodyPointer@@YAHPAPBEPBEH@Z
_TEXT	SEGMENT
tv83 = -248						; size = 4
tv95 = -244						; size = 4
tv84 = -244						; size = 4
_count$ = -41						; size = 1
_illegal$ = -29						; size = 1
_trail$ = -17						; size = 1
_s$ = -8						; size = 4
_ps$ = 8						; size = 4
_limit$ = 12						; size = 4
_c$ = 16						; size = 4
?utf8_nextCharSafeBodyPointer@@YAHPAPBEPBEH@Z PROC	; utf8_nextCharSafeBodyPointer, COMDAT
; Line 341
	push	ebp
	mov	ebp, esp
	sub	esp, 248				; 000000f8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-248]
	mov	ecx, 62					; 0000003eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 342
	mov	eax, DWORD PTR _ps$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _s$[ebp], ecx
; Line 343
	mov	BYTE PTR _illegal$[ebp], 0
; Line 344
	movzx	eax, BYTE PTR _c$[ebp]
	cmp	eax, 240				; 000000f0H
	jge	SHORT $LN20@utf8_nextC@2
	movzx	ecx, BYTE PTR _c$[ebp]
	xor	edx, edx
	cmp	ecx, 192				; 000000c0H
	setge	dl
	movzx	eax, BYTE PTR _c$[ebp]
	xor	ecx, ecx
	cmp	eax, 224				; 000000e0H
	setge	cl
	add	edx, ecx
	mov	DWORD PTR tv84[ebp], edx
	jmp	SHORT $LN21@utf8_nextC@2
$LN20@utf8_nextC@2:
	movzx	edx, BYTE PTR _c$[ebp]
	cmp	edx, 254				; 000000feH
	jge	SHORT $LN18@utf8_nextC@2
	movzx	eax, BYTE PTR _c$[ebp]
	xor	ecx, ecx
	cmp	eax, 248				; 000000f8H
	setge	cl
	movzx	edx, BYTE PTR _c$[ebp]
	xor	eax, eax
	cmp	edx, 252				; 000000fcH
	setge	al
	lea	ecx, DWORD PTR [ecx+eax+3]
	mov	DWORD PTR tv83[ebp], ecx
	jmp	SHORT $LN19@utf8_nextC@2
$LN18@utf8_nextC@2:
	mov	DWORD PTR tv83[ebp], 0
$LN19@utf8_nextC@2:
	mov	edx, DWORD PTR tv83[ebp]
	mov	DWORD PTR tv84[ebp], edx
$LN21@utf8_nextC@2:
	mov	al, BYTE PTR tv84[ebp]
	mov	BYTE PTR _count$[ebp], al
; Line 345
	mov	eax, DWORD PTR _limit$[ebp]
	sub	eax, DWORD PTR _s$[ebp]
	movzx	ecx, BYTE PTR _count$[ebp]
	cmp	eax, ecx
	jl	$LN15@utf8_nextC@2
; Line 346
	movzx	eax, BYTE PTR _count$[ebp]
	mov	ecx, 6
	sub	ecx, eax
	mov	edx, 1
	shl	edx, cl
	sub	edx, 1
	and	edx, DWORD PTR _c$[ebp]
	mov	DWORD PTR _c$[ebp], edx
; Line 348
	movzx	eax, BYTE PTR _count$[ebp]
	mov	DWORD PTR tv95[ebp], eax
	cmp	DWORD PTR tv95[ebp], 5
	ja	$LN13@utf8_nextC@2
	mov	ecx, DWORD PTR tv95[ebp]
	jmp	DWORD PTR $LN23@utf8_nextC@2[ecx*4]
$LN12@utf8_nextC@2:
; Line 353
	mov	BYTE PTR _illegal$[ebp], 1
; Line 354
	jmp	$LN13@utf8_nextC@2
$LN11@utf8_nextC@2:
; Line 356
	mov	eax, DWORD PTR _s$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _trail$[ebp], cl
	mov	edx, DWORD PTR _s$[ebp]
	add	edx, 1
	mov	DWORD PTR _s$[ebp], edx
; Line 357
	mov	eax, DWORD PTR _c$[ebp]
	shl	eax, 6
	movzx	ecx, BYTE PTR _trail$[ebp]
	and	ecx, 63					; 0000003fH
	or	eax, ecx
	mov	DWORD PTR _c$[ebp], eax
; Line 358
	cmp	DWORD PTR _c$[ebp], 272			; 00000110H
	jge	SHORT $LN10@utf8_nextC@2
; Line 359
	movzx	eax, BYTE PTR _trail$[ebp]
	and	eax, 192				; 000000c0H
	xor	eax, 128				; 00000080H
	movzx	ecx, BYTE PTR _illegal$[ebp]
	or	ecx, eax
	mov	BYTE PTR _illegal$[ebp], cl
; Line 360
	jmp	SHORT $LN8@utf8_nextC@2
$LN10@utf8_nextC@2:
; Line 362
	mov	BYTE PTR _illegal$[ebp], 1
; Line 363
	jmp	SHORT $LN13@utf8_nextC@2
$LN8@utf8_nextC@2:
; Line 366
	mov	eax, DWORD PTR _s$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _trail$[ebp], cl
	mov	edx, DWORD PTR _s$[ebp]
	add	edx, 1
	mov	DWORD PTR _s$[ebp], edx
; Line 367
	mov	eax, DWORD PTR _c$[ebp]
	shl	eax, 6
	movzx	ecx, BYTE PTR _trail$[ebp]
	and	ecx, 63					; 0000003fH
	or	eax, ecx
	mov	DWORD PTR _c$[ebp], eax
; Line 368
	movzx	eax, BYTE PTR _trail$[ebp]
	and	eax, 192				; 000000c0H
	xor	eax, 128				; 00000080H
	movzx	ecx, BYTE PTR _illegal$[ebp]
	or	ecx, eax
	mov	BYTE PTR _illegal$[ebp], cl
$LN7@utf8_nextC@2:
; Line 370
	mov	eax, DWORD PTR _s$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _trail$[ebp], cl
	mov	edx, DWORD PTR _s$[ebp]
	add	edx, 1
	mov	DWORD PTR _s$[ebp], edx
; Line 371
	mov	eax, DWORD PTR _c$[ebp]
	shl	eax, 6
	movzx	ecx, BYTE PTR _trail$[ebp]
	and	ecx, 63					; 0000003fH
	or	eax, ecx
	mov	DWORD PTR _c$[ebp], eax
; Line 372
	movzx	eax, BYTE PTR _trail$[ebp]
	and	eax, 192				; 000000c0H
	xor	eax, 128				; 00000080H
	movzx	ecx, BYTE PTR _illegal$[ebp]
	or	ecx, eax
	mov	BYTE PTR _illegal$[ebp], cl
; Line 373
	jmp	SHORT $LN13@utf8_nextC@2
$LN6@utf8_nextC@2:
; Line 375
	or	eax, -1
	jmp	$LN16@utf8_nextC@2
$LN13@utf8_nextC@2:
; Line 378
	jmp	SHORT $LN5@utf8_nextC@2
$LN15@utf8_nextC@2:
; Line 379
	mov	BYTE PTR _illegal$[ebp], 1
$LN5@utf8_nextC@2:
; Line 384
	movzx	eax, BYTE PTR _illegal$[ebp]
	test	eax, eax
	jne	SHORT $LN22@utf8_nextC@2
	movzx	ecx, BYTE PTR _count$[ebp]
	cmp	ecx, 4
	jl	SHORT $LN22@utf8_nextC@2
	mov	edx, DWORD PTR ?__LINE__Var@?1??utf8_nextCharSafeBodyPointer@@YAHPAPBEPBEH@Z@4JA@324cad1b
	add	edx, 43					; 0000002bH
	mov	esi, esp
	push	edx
	push	OFFSET ??_C@_1FO@LJNINEJA@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@
	push	OFFSET ??_C@_1JK@GMEKFEEN@?$AAi?$AAl?$AAl?$AAe?$AAg?$AAa?$AAl?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AAc?$AAo?$AAu?$AAn?$AAt?$AA?$DM?$AA?$CI?$AAi?$AAn?$AAt?$AA3?$AA2?$AA_?$AAt?$AA?$CJ?$AA?$CI?$AAs?$AAi?$AAz?$AAe?$AAo@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN22@utf8_nextC@2:
; Line 385
	movzx	eax, BYTE PTR _illegal$[ebp]
	test	eax, eax
	jne	SHORT $LN3@utf8_nextC@2
	movzx	eax, BYTE PTR _count$[ebp]
	mov	ecx, DWORD PTR _c$[ebp]
	cmp	ecx, DWORD PTR _utf8_minLegal[eax*4]
	jl	SHORT $LN3@utf8_nextC@2
	mov	eax, DWORD PTR _c$[ebp]
	and	eax, -2048				; fffff800H
	cmp	eax, 55296				; 0000d800H
	jne	SHORT $LN4@utf8_nextC@2
$LN3@utf8_nextC@2:
; Line 388
	mov	eax, DWORD PTR _ps$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _s$[ebp], ecx
$LN2@utf8_nextC@2:
; Line 389
	movzx	eax, BYTE PTR _count$[ebp]
	test	eax, eax
	jle	SHORT $LN1@utf8_nextC@2
	mov	eax, DWORD PTR _s$[ebp]
	cmp	eax, DWORD PTR _limit$[ebp]
	jae	SHORT $LN1@utf8_nextC@2
	mov	eax, DWORD PTR _s$[ebp]
	movzx	ecx, BYTE PTR [eax]
	and	ecx, 192				; 000000c0H
	cmp	ecx, 128				; 00000080H
	jne	SHORT $LN1@utf8_nextC@2
; Line 390
	mov	eax, DWORD PTR _s$[ebp]
	add	eax, 1
	mov	DWORD PTR _s$[ebp], eax
; Line 391
	mov	al, BYTE PTR _count$[ebp]
	sub	al, 1
	mov	BYTE PTR _count$[ebp], al
; Line 392
	jmp	SHORT $LN2@utf8_nextC@2
$LN1@utf8_nextC@2:
; Line 393
	mov	DWORD PTR _c$[ebp], -1
$LN4@utf8_nextC@2:
; Line 395
	mov	eax, DWORD PTR _ps$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 396
	mov	eax, DWORD PTR _c$[ebp]
$LN16@utf8_nextC@2:
; Line 397
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 248				; 000000f8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN23@utf8_nextC@2:
	DD	$LN6@utf8_nextC@2
	DD	$LN7@utf8_nextC@2
	DD	$LN8@utf8_nextC@2
	DD	$LN11@utf8_nextC@2
	DD	$LN12@utf8_nextC@2
	DD	$LN12@utf8_nextC@2
?utf8_nextCharSafeBodyPointer@@YAHPAPBEPBEH@Z ENDP	; utf8_nextCharSafeBodyPointer
_TEXT	ENDS
PUBLIC	_u_strFromUTF8_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _u_strFromUTF8_56
_TEXT	SEGMENT
_dest$ = 8						; size = 4
_destCapacity$ = 12					; size = 4
_pDestLength$ = 16					; size = 4
_src$ = 20						; size = 4
_srcLength$ = 24					; size = 4
_pErrorCode$ = 28					; size = 4
_u_strFromUTF8_56 PROC					; COMDAT
; Line 729
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 734
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	push	0
	push	-1
	mov	ecx, DWORD PTR _srcLength$[ebp]
	push	ecx
	mov	edx, DWORD PTR _src$[ebp]
	push	edx
	mov	eax, DWORD PTR _pDestLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _destCapacity$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dest$[ebp]
	push	edx
	call	_u_strFromUTF8WithSub_56
	add	esp, 32					; 00000020H
; Line 735
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_u_strFromUTF8_56 ENDP
_TEXT	ENDS
PUBLIC	_u_strFromUTF8Lenient_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _u_strFromUTF8Lenient_56
_TEXT	SEGMENT
tv213 = -304						; size = 4
tv79 = -304						; size = 4
_pSrcLimit$11372 = -104					; size = 4
_t3$11336 = -89						; size = 1
_t2$11335 = -77						; size = 1
_t1$11334 = -65						; size = 1
_pDestLimit$11333 = -56					; size = 4
_pSrc$ = -44						; size = 4
_reqLength$ = -32					; size = 4
_ch$ = -20						; size = 4
_pDest$ = -8						; size = 4
_dest$ = 8						; size = 4
_destCapacity$ = 12					; size = 4
_pDestLength$ = 16					; size = 4
_src$ = 20						; size = 4
_srcLength$ = 24					; size = 4
_pErrorCode$ = 28					; size = 4
_u_strFromUTF8Lenient_56 PROC				; COMDAT
; Line 743
	push	ebp
	mov	ebp, esp
	sub	esp, 304				; 00000130H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-304]
	mov	ecx, 76					; 0000004cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 744
	mov	eax, DWORD PTR _dest$[ebp]
	mov	DWORD PTR _pDest$[ebp], eax
; Line 746
	mov	DWORD PTR _reqLength$[ebp], 0
; Line 747
	mov	eax, DWORD PTR _src$[ebp]
	mov	DWORD PTR _pSrc$[ebp], eax
; Line 750
	cmp	DWORD PTR _pErrorCode$[ebp], 0
	je	SHORT $LN56@u_strFromU@3
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN57@u_strFromU@3
$LN56@u_strFromU@3:
; Line 751
	xor	eax, eax
	jmp	$LN58@u_strFromU@3
$LN57@u_strFromU@3:
; Line 756
	cmp	DWORD PTR _src$[ebp], 0
	jne	SHORT $LN53@u_strFromU@3
	cmp	DWORD PTR _srcLength$[ebp], 0
	jne	SHORT $LN54@u_strFromU@3
$LN53@u_strFromU@3:
	cmp	DWORD PTR _srcLength$[ebp], -1
	jl	SHORT $LN54@u_strFromU@3
	cmp	DWORD PTR _destCapacity$[ebp], 0
	jl	SHORT $LN54@u_strFromU@3
	cmp	DWORD PTR _dest$[ebp], 0
	jne	SHORT $LN55@u_strFromU@3
	cmp	DWORD PTR _destCapacity$[ebp], 0
	jle	SHORT $LN55@u_strFromU@3
$LN54@u_strFromU@3:
; Line 757
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 1
; Line 758
	xor	eax, eax
	jmp	$LN58@u_strFromU@3
$LN55@u_strFromU@3:
; Line 761
	cmp	DWORD PTR _srcLength$[ebp], 0
	jge	$LN52@u_strFromU@3
; Line 763
	cmp	DWORD PTR _dest$[ebp], 0
	je	SHORT $LN60@u_strFromU@3
	mov	eax, DWORD PTR _destCapacity$[ebp]
	mov	ecx, DWORD PTR _dest$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR tv79[ebp], edx
	jmp	SHORT $LN61@u_strFromU@3
$LN60@u_strFromU@3:
	mov	DWORD PTR tv79[ebp], 0
$LN61@u_strFromU@3:
	mov	eax, DWORD PTR tv79[ebp]
	mov	DWORD PTR _pDestLimit$11333[ebp], eax
$LN51@u_strFromU@3:
; Line 766
	mov	eax, DWORD PTR _pSrc$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _ch$[ebp], ecx
	cmp	DWORD PTR _ch$[ebp], 0
	je	$LN36@u_strFromU@3
	mov	eax, DWORD PTR _pDest$[ebp]
	cmp	eax, DWORD PTR _pDestLimit$11333[ebp]
	jae	$LN36@u_strFromU@3
; Line 767
	cmp	DWORD PTR _ch$[ebp], 192		; 000000c0H
	jge	SHORT $LN49@u_strFromU@3
; Line 773
	mov	eax, DWORD PTR _pDest$[ebp]
	mov	cx, WORD PTR _ch$[ebp]
	mov	WORD PTR [eax], cx
	mov	edx, DWORD PTR _pDest$[ebp]
	add	edx, 2
	mov	DWORD PTR _pDest$[ebp], edx
; Line 774
	mov	eax, DWORD PTR _pSrc$[ebp]
	add	eax, 1
	mov	DWORD PTR _pSrc$[ebp], eax
; Line 775
	jmp	SHORT $LN51@u_strFromU@3
	jmp	$LN48@u_strFromU@3
$LN49@u_strFromU@3:
; Line 776
	cmp	DWORD PTR _ch$[ebp], 224		; 000000e0H
	jge	SHORT $LN47@u_strFromU@3
; Line 777
	mov	eax, DWORD PTR _pSrc$[ebp]
	mov	cl, BYTE PTR [eax+1]
	mov	BYTE PTR _t1$11334[ebp], cl
	movzx	edx, BYTE PTR _t1$11334[ebp]
	test	edx, edx
	je	SHORT $LN46@u_strFromU@3
; Line 779
	mov	eax, DWORD PTR _ch$[ebp]
	shl	eax, 6
	movzx	ecx, BYTE PTR _t1$11334[ebp]
	lea	edx, DWORD PTR [eax+ecx-12416]
	mov	eax, DWORD PTR _pDest$[ebp]
	mov	WORD PTR [eax], dx
	mov	ecx, DWORD PTR _pDest$[ebp]
	add	ecx, 2
	mov	DWORD PTR _pDest$[ebp], ecx
; Line 780
	mov	eax, DWORD PTR _pSrc$[ebp]
	add	eax, 2
	mov	DWORD PTR _pSrc$[ebp], eax
; Line 781
	jmp	$LN51@u_strFromU@3
$LN46@u_strFromU@3:
; Line 782
	jmp	$LN48@u_strFromU@3
$LN47@u_strFromU@3:
; Line 783
	cmp	DWORD PTR _ch$[ebp], 240		; 000000f0H
	jge	SHORT $LN44@u_strFromU@3
; Line 784
	mov	eax, DWORD PTR _pSrc$[ebp]
	mov	cl, BYTE PTR [eax+1]
	mov	BYTE PTR _t1$11334[ebp], cl
	movzx	edx, BYTE PTR _t1$11334[ebp]
	test	edx, edx
	je	SHORT $LN43@u_strFromU@3
	mov	eax, DWORD PTR _pSrc$[ebp]
	mov	cl, BYTE PTR [eax+2]
	mov	BYTE PTR _t2$11335[ebp], cl
	movzx	edx, BYTE PTR _t2$11335[ebp]
	test	edx, edx
	je	SHORT $LN43@u_strFromU@3
; Line 787
	mov	eax, DWORD PTR _ch$[ebp]
	shl	eax, 12					; 0000000cH
	movzx	ecx, BYTE PTR _t1$11334[ebp]
	shl	ecx, 6
	add	eax, ecx
	movzx	edx, BYTE PTR _t2$11335[ebp]
	lea	eax, DWORD PTR [eax+edx-8320]
	mov	ecx, DWORD PTR _pDest$[ebp]
	mov	WORD PTR [ecx], ax
	mov	edx, DWORD PTR _pDest$[ebp]
	add	edx, 2
	mov	DWORD PTR _pDest$[ebp], edx
; Line 788
	mov	eax, DWORD PTR _pSrc$[ebp]
	add	eax, 3
	mov	DWORD PTR _pSrc$[ebp], eax
; Line 789
	jmp	$LN51@u_strFromU@3
$LN43@u_strFromU@3:
; Line 791
	jmp	$LN48@u_strFromU@3
$LN44@u_strFromU@3:
; Line 792
	mov	eax, DWORD PTR _pSrc$[ebp]
	mov	cl, BYTE PTR [eax+1]
	mov	BYTE PTR _t1$11334[ebp], cl
	movzx	edx, BYTE PTR _t1$11334[ebp]
	test	edx, edx
	je	$LN48@u_strFromU@3
	mov	eax, DWORD PTR _pSrc$[ebp]
	mov	cl, BYTE PTR [eax+2]
	mov	BYTE PTR _t2$11335[ebp], cl
	movzx	edx, BYTE PTR _t2$11335[ebp]
	test	edx, edx
	je	$LN48@u_strFromU@3
	mov	eax, DWORD PTR _pSrc$[ebp]
	mov	cl, BYTE PTR [eax+3]
	mov	BYTE PTR _t3$11336[ebp], cl
	movzx	edx, BYTE PTR _t3$11336[ebp]
	test	edx, edx
	je	SHORT $LN48@u_strFromU@3
; Line 793
	mov	eax, DWORD PTR _pSrc$[ebp]
	add	eax, 4
	mov	DWORD PTR _pSrc$[ebp], eax
; Line 795
	mov	eax, DWORD PTR _ch$[ebp]
	shl	eax, 18					; 00000012H
	movzx	ecx, BYTE PTR _t1$11334[ebp]
	shl	ecx, 12					; 0000000cH
	add	eax, ecx
	movzx	edx, BYTE PTR _t2$11335[ebp]
	shl	edx, 6
	add	eax, edx
	movzx	ecx, BYTE PTR _t3$11336[ebp]
	lea	edx, DWORD PTR [eax+ecx-63447168]
	mov	DWORD PTR _ch$[ebp], edx
; Line 796
	mov	eax, DWORD PTR _ch$[ebp]
	sar	eax, 10					; 0000000aH
	add	eax, 55232				; 0000d7c0H
	mov	ecx, DWORD PTR _pDest$[ebp]
	mov	WORD PTR [ecx], ax
	mov	edx, DWORD PTR _pDest$[ebp]
	add	edx, 2
	mov	DWORD PTR _pDest$[ebp], edx
; Line 797
	mov	eax, DWORD PTR _pDest$[ebp]
	cmp	eax, DWORD PTR _pDestLimit$11333[ebp]
	jae	SHORT $LN40@u_strFromU@3
; Line 798
	mov	eax, DWORD PTR _ch$[ebp]
	and	eax, 1023				; 000003ffH
	or	eax, 56320				; 0000dc00H
	mov	ecx, DWORD PTR _pDest$[ebp]
	mov	WORD PTR [ecx], ax
	mov	edx, DWORD PTR _pDest$[ebp]
	add	edx, 2
	mov	DWORD PTR _pDest$[ebp], edx
; Line 799
	jmp	SHORT $LN39@u_strFromU@3
$LN40@u_strFromU@3:
; Line 800
	mov	DWORD PTR _reqLength$[ebp], 1
; Line 801
	jmp	SHORT $LN36@u_strFromU@3
$LN39@u_strFromU@3:
; Line 803
	jmp	$LN51@u_strFromU@3
$LN48@u_strFromU@3:
; Line 808
	mov	eax, 65533				; 0000fffdH
	mov	ecx, DWORD PTR _pDest$[ebp]
	mov	WORD PTR [ecx], ax
	mov	edx, DWORD PTR _pDest$[ebp]
	add	edx, 2
	mov	DWORD PTR _pDest$[ebp], edx
$LN38@u_strFromU@3:
; Line 809
	mov	eax, DWORD PTR _pSrc$[ebp]
	add	eax, 1
	mov	DWORD PTR _pSrc$[ebp], eax
	mov	ecx, DWORD PTR _pSrc$[ebp]
	movzx	edx, BYTE PTR [ecx]
	test	edx, edx
	je	SHORT $LN37@u_strFromU@3
	jmp	SHORT $LN38@u_strFromU@3
$LN37@u_strFromU@3:
; Line 810
	jmp	SHORT $LN36@u_strFromU@3
; Line 811
	jmp	$LN51@u_strFromU@3
$LN36@u_strFromU@3:
; Line 814
	mov	eax, DWORD PTR _pSrc$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _ch$[ebp], ecx
	cmp	DWORD PTR _ch$[ebp], 0
	je	$LN35@u_strFromU@3
; Line 815
	cmp	DWORD PTR _ch$[ebp], 192		; 000000c0H
	jge	SHORT $LN34@u_strFromU@3
; Line 821
	mov	eax, DWORD PTR _reqLength$[ebp]
	add	eax, 1
	mov	DWORD PTR _reqLength$[ebp], eax
; Line 822
	mov	eax, DWORD PTR _pSrc$[ebp]
	add	eax, 1
	mov	DWORD PTR _pSrc$[ebp], eax
; Line 823
	jmp	SHORT $LN36@u_strFromU@3
	jmp	$LN33@u_strFromU@3
$LN34@u_strFromU@3:
; Line 824
	cmp	DWORD PTR _ch$[ebp], 224		; 000000e0H
	jge	SHORT $LN32@u_strFromU@3
; Line 825
	mov	eax, DWORD PTR _pSrc$[ebp]
	movzx	ecx, BYTE PTR [eax+1]
	test	ecx, ecx
	je	SHORT $LN31@u_strFromU@3
; Line 826
	mov	eax, DWORD PTR _reqLength$[ebp]
	add	eax, 1
	mov	DWORD PTR _reqLength$[ebp], eax
; Line 827
	mov	eax, DWORD PTR _pSrc$[ebp]
	add	eax, 2
	mov	DWORD PTR _pSrc$[ebp], eax
; Line 828
	jmp	SHORT $LN36@u_strFromU@3
$LN31@u_strFromU@3:
; Line 829
	jmp	SHORT $LN33@u_strFromU@3
$LN32@u_strFromU@3:
; Line 830
	cmp	DWORD PTR _ch$[ebp], 240		; 000000f0H
	jge	SHORT $LN29@u_strFromU@3
; Line 831
	mov	eax, DWORD PTR _pSrc$[ebp]
	movzx	ecx, BYTE PTR [eax+1]
	test	ecx, ecx
	je	SHORT $LN28@u_strFromU@3
	mov	eax, DWORD PTR _pSrc$[ebp]
	movzx	ecx, BYTE PTR [eax+2]
	test	ecx, ecx
	je	SHORT $LN28@u_strFromU@3
; Line 832
	mov	eax, DWORD PTR _reqLength$[ebp]
	add	eax, 1
	mov	DWORD PTR _reqLength$[ebp], eax
; Line 833
	mov	eax, DWORD PTR _pSrc$[ebp]
	add	eax, 3
	mov	DWORD PTR _pSrc$[ebp], eax
; Line 834
	jmp	$LN36@u_strFromU@3
$LN28@u_strFromU@3:
; Line 836
	jmp	SHORT $LN33@u_strFromU@3
$LN29@u_strFromU@3:
; Line 837
	mov	eax, DWORD PTR _pSrc$[ebp]
	movzx	ecx, BYTE PTR [eax+1]
	test	ecx, ecx
	je	SHORT $LN33@u_strFromU@3
	mov	eax, DWORD PTR _pSrc$[ebp]
	movzx	ecx, BYTE PTR [eax+2]
	test	ecx, ecx
	je	SHORT $LN33@u_strFromU@3
	mov	eax, DWORD PTR _pSrc$[ebp]
	movzx	ecx, BYTE PTR [eax+3]
	test	ecx, ecx
	je	SHORT $LN33@u_strFromU@3
; Line 838
	mov	eax, DWORD PTR _reqLength$[ebp]
	add	eax, 2
	mov	DWORD PTR _reqLength$[ebp], eax
; Line 839
	mov	eax, DWORD PTR _pSrc$[ebp]
	add	eax, 4
	mov	DWORD PTR _pSrc$[ebp], eax
; Line 840
	jmp	$LN36@u_strFromU@3
$LN33@u_strFromU@3:
; Line 845
	mov	eax, DWORD PTR _reqLength$[ebp]
	add	eax, 1
	mov	DWORD PTR _reqLength$[ebp], eax
; Line 846
	jmp	SHORT $LN35@u_strFromU@3
; Line 847
	jmp	$LN36@u_strFromU@3
$LN35@u_strFromU@3:
; Line 848
	jmp	$LN25@u_strFromU@3
$LN52@u_strFromU@3:
; Line 849
	cmp	DWORD PTR _pSrc$[ebp], 0
	je	SHORT $LN62@u_strFromU@3
	mov	eax, DWORD PTR _pSrc$[ebp]
	add	eax, DWORD PTR _srcLength$[ebp]
	mov	DWORD PTR tv213[ebp], eax
	jmp	SHORT $LN63@u_strFromU@3
$LN62@u_strFromU@3:
	mov	DWORD PTR tv213[ebp], 0
$LN63@u_strFromU@3:
	mov	ecx, DWORD PTR tv213[ebp]
	mov	DWORD PTR _pSrcLimit$11372[ebp], ecx
; Line 856
	mov	eax, DWORD PTR _destCapacity$[ebp]
	cmp	eax, DWORD PTR _srcLength$[ebp]
	jge	SHORT $LN24@u_strFromU@3
; Line 857
	cmp	DWORD PTR _pDestLength$[ebp], 0
	je	SHORT $LN23@u_strFromU@3
; Line 858
	mov	eax, DWORD PTR _pDestLength$[ebp]
	mov	ecx, DWORD PTR _srcLength$[ebp]
	mov	DWORD PTR [eax], ecx
$LN23@u_strFromU@3:
; Line 860
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
; Line 861
	xor	eax, eax
	jmp	$LN58@u_strFromU@3
$LN24@u_strFromU@3:
; Line 864
	mov	eax, DWORD PTR _pSrcLimit$11372[ebp]
	sub	eax, DWORD PTR _pSrc$[ebp]
	cmp	eax, 4
	jl	$LN12@u_strFromU@3
; Line 865
	mov	eax, DWORD PTR _pSrcLimit$11372[ebp]
	sub	eax, 3
	mov	DWORD PTR _pSrcLimit$11372[ebp], eax
$LN21@u_strFromU@3:
; Line 869
	mov	eax, DWORD PTR _pSrc$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _ch$[ebp], ecx
	mov	edx, DWORD PTR _pSrc$[ebp]
	add	edx, 1
	mov	DWORD PTR _pSrc$[ebp], edx
; Line 870
	cmp	DWORD PTR _ch$[ebp], 192		; 000000c0H
	jge	SHORT $LN18@u_strFromU@3
; Line 876
	mov	eax, DWORD PTR _pDest$[ebp]
	mov	cx, WORD PTR _ch$[ebp]
	mov	WORD PTR [eax], cx
	mov	edx, DWORD PTR _pDest$[ebp]
	add	edx, 2
	mov	DWORD PTR _pDest$[ebp], edx
	jmp	$LN20@u_strFromU@3
$LN18@u_strFromU@3:
; Line 877
	cmp	DWORD PTR _ch$[ebp], 224		; 000000e0H
	jge	SHORT $LN16@u_strFromU@3
; Line 879
	mov	eax, DWORD PTR _ch$[ebp]
	shl	eax, 6
	mov	ecx, DWORD PTR _pSrc$[ebp]
	movzx	edx, BYTE PTR [ecx]
	lea	eax, DWORD PTR [eax+edx-12416]
	mov	ecx, DWORD PTR _pDest$[ebp]
	mov	WORD PTR [ecx], ax
	mov	edx, DWORD PTR _pDest$[ebp]
	add	edx, 2
	mov	DWORD PTR _pDest$[ebp], edx
	mov	eax, DWORD PTR _pSrc$[ebp]
	add	eax, 1
	mov	DWORD PTR _pSrc$[ebp], eax
	jmp	$LN20@u_strFromU@3
$LN16@u_strFromU@3:
; Line 880
	cmp	DWORD PTR _ch$[ebp], 240		; 000000f0H
	jge	SHORT $LN14@u_strFromU@3
; Line 883
	mov	eax, DWORD PTR _ch$[ebp]
	shl	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _pSrc$[ebp]
	movzx	edx, BYTE PTR [ecx]
	shl	edx, 6
	add	eax, edx
	mov	DWORD PTR _ch$[ebp], eax
	mov	eax, DWORD PTR _pSrc$[ebp]
	add	eax, 1
	mov	DWORD PTR _pSrc$[ebp], eax
; Line 884
	mov	eax, DWORD PTR _pSrc$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _ch$[ebp]
	lea	eax, DWORD PTR [edx+ecx-8320]
	mov	ecx, DWORD PTR _pDest$[ebp]
	mov	WORD PTR [ecx], ax
	mov	edx, DWORD PTR _pDest$[ebp]
	add	edx, 2
	mov	DWORD PTR _pDest$[ebp], edx
	mov	eax, DWORD PTR _pSrc$[ebp]
	add	eax, 1
	mov	DWORD PTR _pSrc$[ebp], eax
; Line 885
	jmp	$LN20@u_strFromU@3
$LN14@u_strFromU@3:
; Line 887
	mov	eax, DWORD PTR _ch$[ebp]
	shl	eax, 18					; 00000012H
	mov	ecx, DWORD PTR _pSrc$[ebp]
	movzx	edx, BYTE PTR [ecx]
	shl	edx, 12					; 0000000cH
	add	eax, edx
	mov	DWORD PTR _ch$[ebp], eax
	mov	eax, DWORD PTR _pSrc$[ebp]
	add	eax, 1
	mov	DWORD PTR _pSrc$[ebp], eax
; Line 888
	mov	eax, DWORD PTR _pSrc$[ebp]
	movzx	ecx, BYTE PTR [eax]
	shl	ecx, 6
	add	ecx, DWORD PTR _ch$[ebp]
	mov	DWORD PTR _ch$[ebp], ecx
	mov	edx, DWORD PTR _pSrc$[ebp]
	add	edx, 1
	mov	DWORD PTR _pSrc$[ebp], edx
; Line 889
	mov	eax, DWORD PTR _pSrc$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _ch$[ebp]
	lea	eax, DWORD PTR [edx+ecx-63447168]
	mov	DWORD PTR _ch$[ebp], eax
	mov	ecx, DWORD PTR _pSrc$[ebp]
	add	ecx, 1
	mov	DWORD PTR _pSrc$[ebp], ecx
; Line 890
	mov	eax, DWORD PTR _ch$[ebp]
	sar	eax, 10					; 0000000aH
	add	eax, 55232				; 0000d7c0H
	mov	ecx, DWORD PTR _pDest$[ebp]
	mov	WORD PTR [ecx], ax
	mov	edx, DWORD PTR _pDest$[ebp]
	add	edx, 2
	mov	DWORD PTR _pDest$[ebp], edx
; Line 891
	mov	eax, DWORD PTR _ch$[ebp]
	and	eax, 1023				; 000003ffH
	or	eax, 56320				; 0000dc00H
	mov	ecx, DWORD PTR _pDest$[ebp]
	mov	WORD PTR [ecx], ax
	mov	edx, DWORD PTR _pDest$[ebp]
	add	edx, 2
	mov	DWORD PTR _pDest$[ebp], edx
$LN20@u_strFromU@3:
; Line 893
	mov	eax, DWORD PTR _pSrc$[ebp]
	cmp	eax, DWORD PTR _pSrcLimit$11372[ebp]
	jb	$LN21@u_strFromU@3
; Line 895
	mov	eax, DWORD PTR _pSrcLimit$11372[ebp]
	add	eax, 3
	mov	DWORD PTR _pSrcLimit$11372[ebp], eax
$LN12@u_strFromU@3:
; Line 898
	mov	eax, DWORD PTR _pSrc$[ebp]
	cmp	eax, DWORD PTR _pSrcLimit$11372[ebp]
	jae	$LN25@u_strFromU@3
; Line 899
	mov	eax, DWORD PTR _pSrc$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _ch$[ebp], ecx
	mov	edx, DWORD PTR _pSrc$[ebp]
	add	edx, 1
	mov	DWORD PTR _pSrc$[ebp], edx
; Line 900
	cmp	DWORD PTR _ch$[ebp], 192		; 000000c0H
	jge	SHORT $LN10@u_strFromU@3
; Line 906
	mov	eax, DWORD PTR _pDest$[ebp]
	mov	cx, WORD PTR _ch$[ebp]
	mov	WORD PTR [eax], cx
	mov	edx, DWORD PTR _pDest$[ebp]
	add	edx, 2
	mov	DWORD PTR _pDest$[ebp], edx
; Line 907
	jmp	SHORT $LN12@u_strFromU@3
	jmp	$LN9@u_strFromU@3
$LN10@u_strFromU@3:
; Line 908
	cmp	DWORD PTR _ch$[ebp], 224		; 000000e0H
	jge	SHORT $LN8@u_strFromU@3
; Line 909
	mov	eax, DWORD PTR _pSrc$[ebp]
	cmp	eax, DWORD PTR _pSrcLimit$11372[ebp]
	jae	SHORT $LN7@u_strFromU@3
; Line 911
	mov	eax, DWORD PTR _ch$[ebp]
	shl	eax, 6
	mov	ecx, DWORD PTR _pSrc$[ebp]
	movzx	edx, BYTE PTR [ecx]
	lea	eax, DWORD PTR [eax+edx-12416]
	mov	ecx, DWORD PTR _pDest$[ebp]
	mov	WORD PTR [ecx], ax
	mov	edx, DWORD PTR _pDest$[ebp]
	add	edx, 2
	mov	DWORD PTR _pDest$[ebp], edx
	mov	eax, DWORD PTR _pSrc$[ebp]
	add	eax, 1
	mov	DWORD PTR _pSrc$[ebp], eax
; Line 912
	jmp	SHORT $LN12@u_strFromU@3
$LN7@u_strFromU@3:
; Line 913
	jmp	$LN9@u_strFromU@3
$LN8@u_strFromU@3:
; Line 914
	cmp	DWORD PTR _ch$[ebp], 240		; 000000f0H
	jge	SHORT $LN5@u_strFromU@3
; Line 915
	mov	eax, DWORD PTR _pSrcLimit$11372[ebp]
	sub	eax, DWORD PTR _pSrc$[ebp]
	cmp	eax, 2
	jl	SHORT $LN4@u_strFromU@3
; Line 918
	mov	eax, DWORD PTR _ch$[ebp]
	shl	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _pSrc$[ebp]
	movzx	edx, BYTE PTR [ecx]
	shl	edx, 6
	add	eax, edx
	mov	DWORD PTR _ch$[ebp], eax
	mov	eax, DWORD PTR _pSrc$[ebp]
	add	eax, 1
	mov	DWORD PTR _pSrc$[ebp], eax
; Line 919
	mov	eax, DWORD PTR _pSrc$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _ch$[ebp]
	lea	eax, DWORD PTR [edx+ecx-8320]
	mov	ecx, DWORD PTR _pDest$[ebp]
	mov	WORD PTR [ecx], ax
	mov	edx, DWORD PTR _pDest$[ebp]
	add	edx, 2
	mov	DWORD PTR _pDest$[ebp], edx
	mov	eax, DWORD PTR _pSrc$[ebp]
	add	eax, 1
	mov	DWORD PTR _pSrc$[ebp], eax
; Line 920
	mov	eax, DWORD PTR _pSrc$[ebp]
	add	eax, 3
	mov	DWORD PTR _pSrc$[ebp], eax
; Line 921
	jmp	$LN12@u_strFromU@3
$LN4@u_strFromU@3:
; Line 923
	jmp	$LN9@u_strFromU@3
$LN5@u_strFromU@3:
; Line 924
	mov	eax, DWORD PTR _pSrcLimit$11372[ebp]
	sub	eax, DWORD PTR _pSrc$[ebp]
	cmp	eax, 3
	jl	$LN9@u_strFromU@3
; Line 926
	mov	eax, DWORD PTR _ch$[ebp]
	shl	eax, 18					; 00000012H
	mov	ecx, DWORD PTR _pSrc$[ebp]
	movzx	edx, BYTE PTR [ecx]
	shl	edx, 12					; 0000000cH
	add	eax, edx
	mov	DWORD PTR _ch$[ebp], eax
	mov	eax, DWORD PTR _pSrc$[ebp]
	add	eax, 1
	mov	DWORD PTR _pSrc$[ebp], eax
; Line 927
	mov	eax, DWORD PTR _pSrc$[ebp]
	movzx	ecx, BYTE PTR [eax]
	shl	ecx, 6
	add	ecx, DWORD PTR _ch$[ebp]
	mov	DWORD PTR _ch$[ebp], ecx
	mov	edx, DWORD PTR _pSrc$[ebp]
	add	edx, 1
	mov	DWORD PTR _pSrc$[ebp], edx
; Line 928
	mov	eax, DWORD PTR _pSrc$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _ch$[ebp]
	lea	eax, DWORD PTR [edx+ecx-63447168]
	mov	DWORD PTR _ch$[ebp], eax
	mov	ecx, DWORD PTR _pSrc$[ebp]
	add	ecx, 1
	mov	DWORD PTR _pSrc$[ebp], ecx
; Line 929
	mov	eax, DWORD PTR _ch$[ebp]
	sar	eax, 10					; 0000000aH
	add	eax, 55232				; 0000d7c0H
	mov	ecx, DWORD PTR _pDest$[ebp]
	mov	WORD PTR [ecx], ax
	mov	edx, DWORD PTR _pDest$[ebp]
	add	edx, 2
	mov	DWORD PTR _pDest$[ebp], edx
; Line 930
	mov	eax, DWORD PTR _ch$[ebp]
	and	eax, 1023				; 000003ffH
	or	eax, 56320				; 0000dc00H
	mov	ecx, DWORD PTR _pDest$[ebp]
	mov	WORD PTR [ecx], ax
	mov	edx, DWORD PTR _pDest$[ebp]
	add	edx, 2
	mov	DWORD PTR _pDest$[ebp], edx
; Line 931
	mov	eax, DWORD PTR _pSrc$[ebp]
	add	eax, 4
	mov	DWORD PTR _pSrc$[ebp], eax
; Line 932
	jmp	$LN12@u_strFromU@3
$LN9@u_strFromU@3:
; Line 937
	mov	eax, 65533				; 0000fffdH
	mov	ecx, DWORD PTR _pDest$[ebp]
	mov	WORD PTR [ecx], ax
	mov	edx, DWORD PTR _pDest$[ebp]
	add	edx, 2
	mov	DWORD PTR _pDest$[ebp], edx
; Line 938
	jmp	SHORT $LN25@u_strFromU@3
; Line 939
	jmp	$LN12@u_strFromU@3
$LN25@u_strFromU@3:
; Line 942
	mov	eax, DWORD PTR _pDest$[ebp]
	sub	eax, DWORD PTR _dest$[ebp]
	sar	eax, 1
	add	eax, DWORD PTR _reqLength$[ebp]
	mov	DWORD PTR _reqLength$[ebp], eax
; Line 944
	cmp	DWORD PTR _pDestLength$[ebp], 0
	je	SHORT $LN1@u_strFromU@3
; Line 945
	mov	eax, DWORD PTR _pDestLength$[ebp]
	mov	ecx, DWORD PTR _reqLength$[ebp]
	mov	DWORD PTR [eax], ecx
$LN1@u_strFromU@3:
; Line 949
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _reqLength$[ebp]
	push	ecx
	mov	edx, DWORD PTR _destCapacity$[ebp]
	push	edx
	mov	eax, DWORD PTR _dest$[ebp]
	push	eax
	call	_u_terminateUChars_56
	add	esp, 16					; 00000010H
; Line 951
	mov	eax, DWORD PTR _dest$[ebp]
$LN58@u_strFromU@3:
; Line 952
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 304				; 00000130H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_u_strFromUTF8Lenient_56 ENDP
_TEXT	ENDS
PUBLIC	_u_strToUTF8WithSub_56
EXTRN	_u_terminateChars_56:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _u_strToUTF8WithSub_56
_TEXT	SEGMENT
tv372 = -328						; size = 4
tv337 = -328						; size = 4
tv203 = -328						; size = 4
tv167 = -328						; size = 4
tv373 = -324						; size = 4
tv338 = -324						; size = 4
tv204 = -324						; size = 4
tv168 = -324						; size = 4
tv374 = -320						; size = 4
tv339 = -320						; size = 4
tv205 = -320						; size = 4
tv169 = -320						; size = 4
tv375 = -316						; size = 4
tv340 = -316						; size = 4
tv212 = -316						; size = 4
tv206 = -316						; size = 4
tv179 = -316						; size = 4
tv170 = -316						; size = 4
tv66 = -316						; size = 4
_length$11569 = -116					; size = 4
_count$11512 = -104					; size = 4
_pSrcLimit$11511 = -92					; size = 4
_length$11476 = -80					; size = 4
_numSubstitutions$ = -68				; size = 4
_pDestLimit$ = -56					; size = 4
_pDest$ = -44						; size = 4
_ch2$ = -32						; size = 4
_ch$ = -20						; size = 4
_reqLength$ = -8					; size = 4
_dest$ = 8						; size = 4
_destCapacity$ = 12					; size = 4
_pDestLength$ = 16					; size = 4
_pSrc$ = 20						; size = 4
_srcLength$ = 24					; size = 4
_subchar$ = 28						; size = 4
_pNumSubstitutions$ = 32				; size = 4
_pErrorCode$ = 36					; size = 4
_u_strToUTF8WithSub_56 PROC				; COMDAT
; Line 983
	push	ebp
	mov	ebp, esp
	sub	esp, 328				; 00000148H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-328]
	mov	ecx, 82					; 00000052H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 984
	mov	DWORD PTR _reqLength$[ebp], 0
; Line 985
	mov	DWORD PTR _ch$[ebp], 0
	mov	DWORD PTR _ch2$[ebp], 0
; Line 986
	mov	eax, DWORD PTR _dest$[ebp]
	mov	DWORD PTR _pDest$[ebp], eax
; Line 987
	cmp	DWORD PTR _pDest$[ebp], 0
	je	SHORT $LN99@u_strToUTF@2
	mov	eax, DWORD PTR _pDest$[ebp]
	add	eax, DWORD PTR _destCapacity$[ebp]
	mov	DWORD PTR tv66[ebp], eax
	jmp	SHORT $LN100@u_strToUTF@2
$LN99@u_strToUTF@2:
	mov	DWORD PTR tv66[ebp], 0
$LN100@u_strToUTF@2:
	mov	ecx, DWORD PTR tv66[ebp]
	mov	DWORD PTR _pDestLimit$[ebp], ecx
; Line 991
	cmp	DWORD PTR _pErrorCode$[ebp], 0
	je	SHORT $LN95@u_strToUTF@2
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN96@u_strToUTF@2
$LN95@u_strToUTF@2:
; Line 992
	xor	eax, eax
	jmp	$LN97@u_strToUTF@2
$LN96@u_strToUTF@2:
; Line 998
	cmp	DWORD PTR _pSrc$[ebp], 0
	jne	SHORT $LN92@u_strToUTF@2
	cmp	DWORD PTR _srcLength$[ebp], 0
	jne	SHORT $LN93@u_strToUTF@2
$LN92@u_strToUTF@2:
	cmp	DWORD PTR _srcLength$[ebp], -1
	jl	SHORT $LN93@u_strToUTF@2
	cmp	DWORD PTR _destCapacity$[ebp], 0
	jl	SHORT $LN93@u_strToUTF@2
	cmp	DWORD PTR _dest$[ebp], 0
	jne	SHORT $LN91@u_strToUTF@2
	cmp	DWORD PTR _destCapacity$[ebp], 0
	jg	SHORT $LN93@u_strToUTF@2
$LN91@u_strToUTF@2:
	cmp	DWORD PTR _subchar$[ebp], 1114111	; 0010ffffH
	jg	SHORT $LN93@u_strToUTF@2
	mov	eax, DWORD PTR _subchar$[ebp]
	and	eax, -2048				; fffff800H
	cmp	eax, 55296				; 0000d800H
	jne	SHORT $LN94@u_strToUTF@2
$LN93@u_strToUTF@2:
; Line 999
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 1
; Line 1000
	xor	eax, eax
	jmp	$LN97@u_strToUTF@2
$LN94@u_strToUTF@2:
; Line 1003
	cmp	DWORD PTR _pNumSubstitutions$[ebp], 0
	je	SHORT $LN90@u_strToUTF@2
; Line 1004
	mov	eax, DWORD PTR _pNumSubstitutions$[ebp]
	mov	DWORD PTR [eax], 0
$LN90@u_strToUTF@2:
; Line 1006
	mov	DWORD PTR _numSubstitutions$[ebp], 0
; Line 1008
	cmp	DWORD PTR _srcLength$[ebp], -1
	jne	$LN89@u_strToUTF@2
$LN88@u_strToUTF@2:
; Line 1009
	mov	eax, DWORD PTR _pSrc$[ebp]
	movzx	ecx, WORD PTR [eax]
	mov	DWORD PTR _ch$[ebp], ecx
	cmp	DWORD PTR _ch$[ebp], 0
	je	$LN67@u_strToUTF@2
; Line 1010
	mov	eax, DWORD PTR _pSrc$[ebp]
	add	eax, 2
	mov	DWORD PTR _pSrc$[ebp], eax
; Line 1011
	cmp	DWORD PTR _ch$[ebp], 127		; 0000007fH
	ja	SHORT $LN86@u_strToUTF@2
; Line 1012
	mov	eax, DWORD PTR _pDest$[ebp]
	cmp	eax, DWORD PTR _pDestLimit$[ebp]
	jae	SHORT $LN85@u_strToUTF@2
; Line 1013
	mov	eax, DWORD PTR _pDest$[ebp]
	mov	cl, BYTE PTR _ch$[ebp]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _pDest$[ebp]
	add	edx, 1
	mov	DWORD PTR _pDest$[ebp], edx
; Line 1014
	jmp	SHORT $LN84@u_strToUTF@2
$LN85@u_strToUTF@2:
; Line 1015
	mov	DWORD PTR _reqLength$[ebp], 1
; Line 1016
	jmp	$LN67@u_strToUTF@2
$LN84@u_strToUTF@2:
; Line 1017
	jmp	$LN83@u_strToUTF@2
$LN86@u_strToUTF@2:
; Line 1018
	cmp	DWORD PTR _ch$[ebp], 2047		; 000007ffH
	ja	SHORT $LN82@u_strToUTF@2
; Line 1019
	mov	eax, DWORD PTR _pDestLimit$[ebp]
	sub	eax, DWORD PTR _pDest$[ebp]
	cmp	eax, 2
	jl	SHORT $LN81@u_strToUTF@2
; Line 1020
	mov	eax, DWORD PTR _ch$[ebp]
	shr	eax, 6
	or	eax, 192				; 000000c0H
	mov	ecx, DWORD PTR _pDest$[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _pDest$[ebp]
	add	edx, 1
	mov	DWORD PTR _pDest$[ebp], edx
; Line 1021
	mov	eax, DWORD PTR _ch$[ebp]
	and	eax, 63					; 0000003fH
	or	eax, 128				; 00000080H
	mov	ecx, DWORD PTR _pDest$[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _pDest$[ebp]
	add	edx, 1
	mov	DWORD PTR _pDest$[ebp], edx
; Line 1022
	jmp	SHORT $LN80@u_strToUTF@2
$LN81@u_strToUTF@2:
; Line 1023
	mov	DWORD PTR _reqLength$[ebp], 2
; Line 1024
	jmp	$LN67@u_strToUTF@2
$LN80@u_strToUTF@2:
; Line 1025
	jmp	$LN83@u_strToUTF@2
$LN82@u_strToUTF@2:
; Line 1026
	cmp	DWORD PTR _ch$[ebp], 55295		; 0000d7ffH
	jbe	SHORT $LN77@u_strToUTF@2
	cmp	DWORD PTR _ch$[ebp], 57344		; 0000e000H
	jb	SHORT $LN78@u_strToUTF@2
$LN77@u_strToUTF@2:
; Line 1027
	mov	eax, DWORD PTR _pDestLimit$[ebp]
	sub	eax, DWORD PTR _pDest$[ebp]
	cmp	eax, 3
	jl	SHORT $LN76@u_strToUTF@2
; Line 1028
	mov	eax, DWORD PTR _ch$[ebp]
	shr	eax, 12					; 0000000cH
	or	eax, 224				; 000000e0H
	mov	ecx, DWORD PTR _pDest$[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _pDest$[ebp]
	add	edx, 1
	mov	DWORD PTR _pDest$[ebp], edx
; Line 1029
	mov	eax, DWORD PTR _ch$[ebp]
	shr	eax, 6
	and	eax, 63					; 0000003fH
	or	eax, 128				; 00000080H
	mov	ecx, DWORD PTR _pDest$[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _pDest$[ebp]
	add	edx, 1
	mov	DWORD PTR _pDest$[ebp], edx
; Line 1030
	mov	eax, DWORD PTR _ch$[ebp]
	and	eax, 63					; 0000003fH
	or	eax, 128				; 00000080H
	mov	ecx, DWORD PTR _pDest$[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _pDest$[ebp]
	add	edx, 1
	mov	DWORD PTR _pDest$[ebp], edx
; Line 1031
	jmp	SHORT $LN75@u_strToUTF@2
$LN76@u_strToUTF@2:
; Line 1032
	mov	DWORD PTR _reqLength$[ebp], 3
; Line 1033
	jmp	$LN67@u_strToUTF@2
$LN75@u_strToUTF@2:
; Line 1035
	jmp	$LN83@u_strToUTF@2
$LN78@u_strToUTF@2:
; Line 1039
	mov	eax, DWORD PTR _ch$[ebp]
	and	eax, 1024				; 00000400H
	jne	SHORT $LN73@u_strToUTF@2
	mov	eax, DWORD PTR _pSrc$[ebp]
	movzx	ecx, WORD PTR [eax]
	mov	DWORD PTR _ch2$[ebp], ecx
	mov	edx, DWORD PTR _ch2$[ebp]
	and	edx, -1024				; fffffc00H
	cmp	edx, 56320				; 0000dc00H
	jne	SHORT $LN73@u_strToUTF@2
; Line 1040
	mov	eax, DWORD PTR _pSrc$[ebp]
	add	eax, 2
	mov	DWORD PTR _pSrc$[ebp], eax
; Line 1041
	mov	eax, DWORD PTR _ch$[ebp]
	shl	eax, 10					; 0000000aH
	mov	ecx, DWORD PTR _ch2$[ebp]
	lea	edx, DWORD PTR [eax+ecx-56613888]
	mov	DWORD PTR _ch$[ebp], edx
	jmp	SHORT $LN72@u_strToUTF@2
$LN73@u_strToUTF@2:
; Line 1042
	cmp	DWORD PTR _subchar$[ebp], 0
	jl	SHORT $LN71@u_strToUTF@2
; Line 1043
	mov	eax, DWORD PTR _subchar$[ebp]
	mov	DWORD PTR _ch$[ebp], eax
; Line 1044
	mov	eax, DWORD PTR _numSubstitutions$[ebp]
	add	eax, 1
	mov	DWORD PTR _numSubstitutions$[ebp], eax
; Line 1045
	jmp	SHORT $LN72@u_strToUTF@2
$LN71@u_strToUTF@2:
; Line 1047
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 10			; 0000000aH
; Line 1048
	xor	eax, eax
	jmp	$LN97@u_strToUTF@2
$LN72@u_strToUTF@2:
; Line 1051
	cmp	DWORD PTR _ch$[ebp], 127		; 0000007fH
	ja	SHORT $LN107@u_strToUTF@2
	mov	DWORD PTR tv170[ebp], 1
	jmp	$LN108@u_strToUTF@2
$LN107@u_strToUTF@2:
	cmp	DWORD PTR _ch$[ebp], 2047		; 000007ffH
	ja	SHORT $LN105@u_strToUTF@2
	mov	DWORD PTR tv169[ebp], 2
	jmp	SHORT $LN106@u_strToUTF@2
$LN105@u_strToUTF@2:
	cmp	DWORD PTR _ch$[ebp], 55295		; 0000d7ffH
	ja	SHORT $LN103@u_strToUTF@2
	mov	DWORD PTR tv168[ebp], 3
	jmp	SHORT $LN104@u_strToUTF@2
$LN103@u_strToUTF@2:
	cmp	DWORD PTR _ch$[ebp], 57343		; 0000dfffH
	jbe	SHORT $LN101@u_strToUTF@2
	cmp	DWORD PTR _ch$[ebp], 1114111		; 0010ffffH
	ja	SHORT $LN101@u_strToUTF@2
	mov	eax, 65535				; 0000ffffH
	cmp	eax, DWORD PTR _ch$[ebp]
	sbb	ecx, ecx
	neg	ecx
	add	ecx, 3
	mov	DWORD PTR tv167[ebp], ecx
	jmp	SHORT $LN102@u_strToUTF@2
$LN101@u_strToUTF@2:
	mov	DWORD PTR tv167[ebp], 0
$LN102@u_strToUTF@2:
	mov	edx, DWORD PTR tv167[ebp]
	mov	DWORD PTR tv168[ebp], edx
$LN104@u_strToUTF@2:
	mov	eax, DWORD PTR tv168[ebp]
	mov	DWORD PTR tv169[ebp], eax
$LN106@u_strToUTF@2:
	mov	ecx, DWORD PTR tv169[ebp]
	mov	DWORD PTR tv170[ebp], ecx
$LN108@u_strToUTF@2:
	mov	edx, DWORD PTR tv170[ebp]
	mov	DWORD PTR _length$11476[ebp], edx
; Line 1052
	mov	eax, DWORD PTR _pDestLimit$[ebp]
	sub	eax, DWORD PTR _pDest$[ebp]
	cmp	eax, DWORD PTR _length$11476[ebp]
	jl	SHORT $LN69@u_strToUTF@2
; Line 1054
	mov	eax, DWORD PTR _ch$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pDest$[ebp]
	push	ecx
	call	?_appendUTF8@@YAPAEPAEH@Z		; _appendUTF8
	add	esp, 8
	mov	DWORD PTR _pDest$[ebp], eax
; Line 1055
	jmp	SHORT $LN83@u_strToUTF@2
$LN69@u_strToUTF@2:
; Line 1056
	mov	eax, DWORD PTR _length$11476[ebp]
	mov	DWORD PTR _reqLength$[ebp], eax
; Line 1057
	jmp	SHORT $LN67@u_strToUTF@2
$LN83@u_strToUTF@2:
; Line 1060
	jmp	$LN88@u_strToUTF@2
$LN67@u_strToUTF@2:
; Line 1061
	mov	eax, DWORD PTR _pSrc$[ebp]
	movzx	ecx, WORD PTR [eax]
	mov	DWORD PTR _ch$[ebp], ecx
	mov	edx, DWORD PTR _ch$[ebp]
	mov	eax, DWORD PTR _pSrc$[ebp]
	add	eax, 2
	mov	DWORD PTR _pSrc$[ebp], eax
	test	edx, edx
	je	SHORT $LN109@u_strToUTF@2
	mov	DWORD PTR tv179[ebp], 1
	jmp	SHORT $LN110@u_strToUTF@2
$LN109@u_strToUTF@2:
	mov	DWORD PTR tv179[ebp], 0
$LN110@u_strToUTF@2:
	cmp	DWORD PTR tv179[ebp], 0
	je	$LN66@u_strToUTF@2
; Line 1062
	cmp	DWORD PTR _ch$[ebp], 127		; 0000007fH
	ja	SHORT $LN65@u_strToUTF@2
; Line 1063
	mov	eax, DWORD PTR _reqLength$[ebp]
	add	eax, 1
	mov	DWORD PTR _reqLength$[ebp], eax
	jmp	$LN64@u_strToUTF@2
$LN65@u_strToUTF@2:
; Line 1064
	cmp	DWORD PTR _ch$[ebp], 2047		; 000007ffH
	ja	SHORT $LN63@u_strToUTF@2
; Line 1065
	mov	eax, DWORD PTR _reqLength$[ebp]
	add	eax, 2
	mov	DWORD PTR _reqLength$[ebp], eax
	jmp	$LN64@u_strToUTF@2
$LN63@u_strToUTF@2:
; Line 1066
	mov	eax, DWORD PTR _ch$[ebp]
	and	eax, -2048				; fffff800H
	cmp	eax, 55296				; 0000d800H
	je	SHORT $LN61@u_strToUTF@2
; Line 1067
	mov	eax, DWORD PTR _reqLength$[ebp]
	add	eax, 3
	mov	DWORD PTR _reqLength$[ebp], eax
	jmp	$LN64@u_strToUTF@2
$LN61@u_strToUTF@2:
; Line 1068
	mov	eax, DWORD PTR _ch$[ebp]
	and	eax, 1024				; 00000400H
	jne	SHORT $LN59@u_strToUTF@2
	mov	eax, DWORD PTR _pSrc$[ebp]
	movzx	ecx, WORD PTR [eax]
	mov	DWORD PTR _ch2$[ebp], ecx
	mov	edx, DWORD PTR _ch2$[ebp]
	and	edx, -1024				; fffffc00H
	cmp	edx, 56320				; 0000dc00H
	jne	SHORT $LN59@u_strToUTF@2
; Line 1069
	mov	eax, DWORD PTR _pSrc$[ebp]
	add	eax, 2
	mov	DWORD PTR _pSrc$[ebp], eax
; Line 1070
	mov	eax, DWORD PTR _reqLength$[ebp]
	add	eax, 4
	mov	DWORD PTR _reqLength$[ebp], eax
	jmp	$LN64@u_strToUTF@2
$LN59@u_strToUTF@2:
; Line 1071
	cmp	DWORD PTR _subchar$[ebp], 0
	jl	$LN57@u_strToUTF@2
; Line 1072
	cmp	DWORD PTR _subchar$[ebp], 127		; 0000007fH
	ja	SHORT $LN117@u_strToUTF@2
	mov	DWORD PTR tv206[ebp], 1
	jmp	$LN118@u_strToUTF@2
$LN117@u_strToUTF@2:
	cmp	DWORD PTR _subchar$[ebp], 2047		; 000007ffH
	ja	SHORT $LN115@u_strToUTF@2
	mov	DWORD PTR tv205[ebp], 2
	jmp	SHORT $LN116@u_strToUTF@2
$LN115@u_strToUTF@2:
	cmp	DWORD PTR _subchar$[ebp], 55295		; 0000d7ffH
	ja	SHORT $LN113@u_strToUTF@2
	mov	DWORD PTR tv204[ebp], 3
	jmp	SHORT $LN114@u_strToUTF@2
$LN113@u_strToUTF@2:
	cmp	DWORD PTR _subchar$[ebp], 57343		; 0000dfffH
	jbe	SHORT $LN111@u_strToUTF@2
	cmp	DWORD PTR _subchar$[ebp], 1114111	; 0010ffffH
	ja	SHORT $LN111@u_strToUTF@2
	mov	eax, 65535				; 0000ffffH
	cmp	eax, DWORD PTR _subchar$[ebp]
	sbb	ecx, ecx
	neg	ecx
	add	ecx, 3
	mov	DWORD PTR tv203[ebp], ecx
	jmp	SHORT $LN112@u_strToUTF@2
$LN111@u_strToUTF@2:
	mov	DWORD PTR tv203[ebp], 0
$LN112@u_strToUTF@2:
	mov	edx, DWORD PTR tv203[ebp]
	mov	DWORD PTR tv204[ebp], edx
$LN114@u_strToUTF@2:
	mov	eax, DWORD PTR tv204[ebp]
	mov	DWORD PTR tv205[ebp], eax
$LN116@u_strToUTF@2:
	mov	ecx, DWORD PTR tv205[ebp]
	mov	DWORD PTR tv206[ebp], ecx
$LN118@u_strToUTF@2:
	mov	edx, DWORD PTR _reqLength$[ebp]
	add	edx, DWORD PTR tv206[ebp]
	mov	DWORD PTR _reqLength$[ebp], edx
; Line 1073
	mov	eax, DWORD PTR _numSubstitutions$[ebp]
	add	eax, 1
	mov	DWORD PTR _numSubstitutions$[ebp], eax
; Line 1074
	jmp	SHORT $LN64@u_strToUTF@2
$LN57@u_strToUTF@2:
; Line 1076
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 10			; 0000000aH
; Line 1077
	xor	eax, eax
	jmp	$LN97@u_strToUTF@2
$LN64@u_strToUTF@2:
; Line 1079
	jmp	$LN67@u_strToUTF@2
$LN66@u_strToUTF@2:
; Line 1080
	jmp	$LN55@u_strToUTF@2
$LN89@u_strToUTF@2:
; Line 1081
	cmp	DWORD PTR _pSrc$[ebp], 0
	je	SHORT $LN119@u_strToUTF@2
	mov	eax, DWORD PTR _srcLength$[ebp]
	mov	ecx, DWORD PTR _pSrc$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR tv212[ebp], edx
	jmp	SHORT $LN120@u_strToUTF@2
$LN119@u_strToUTF@2:
	mov	DWORD PTR tv212[ebp], 0
$LN120@u_strToUTF@2:
	mov	eax, DWORD PTR tv212[ebp]
	mov	DWORD PTR _pSrcLimit$11511[ebp], eax
$LN54@u_strToUTF@2:
; Line 1092
	mov	eax, DWORD PTR _pDestLimit$[ebp]
	sub	eax, DWORD PTR _pDest$[ebp]
	cdq
	mov	ecx, 3
	idiv	ecx
	mov	DWORD PTR _count$11512[ebp], eax
; Line 1093
	mov	eax, DWORD PTR _pSrcLimit$11511[ebp]
	sub	eax, DWORD PTR _pSrc$[ebp]
	sar	eax, 1
	mov	DWORD PTR _srcLength$[ebp], eax
; Line 1094
	mov	eax, DWORD PTR _count$11512[ebp]
	cmp	eax, DWORD PTR _srcLength$[ebp]
	jle	SHORT $LN52@u_strToUTF@2
; Line 1095
	mov	eax, DWORD PTR _srcLength$[ebp]
	mov	DWORD PTR _count$11512[ebp], eax
$LN52@u_strToUTF@2:
; Line 1097
	cmp	DWORD PTR _count$11512[ebp], 3
	jge	SHORT $LN50@u_strToUTF@2
; Line 1102
	jmp	$LN35@u_strToUTF@2
$LN50@u_strToUTF@2:
; Line 1105
	mov	eax, DWORD PTR _pSrc$[ebp]
	movzx	ecx, WORD PTR [eax]
	mov	DWORD PTR _ch$[ebp], ecx
	mov	edx, DWORD PTR _pSrc$[ebp]
	add	edx, 2
	mov	DWORD PTR _pSrc$[ebp], edx
; Line 1106
	cmp	DWORD PTR _ch$[ebp], 127		; 0000007fH
	ja	SHORT $LN47@u_strToUTF@2
; Line 1107
	mov	eax, DWORD PTR _pDest$[ebp]
	mov	cl, BYTE PTR _ch$[ebp]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _pDest$[ebp]
	add	edx, 1
	mov	DWORD PTR _pDest$[ebp], edx
	jmp	$LN49@u_strToUTF@2
$LN47@u_strToUTF@2:
; Line 1108
	cmp	DWORD PTR _ch$[ebp], 2047		; 000007ffH
	ja	SHORT $LN45@u_strToUTF@2
; Line 1109
	mov	eax, DWORD PTR _ch$[ebp]
	shr	eax, 6
	or	eax, 192				; 000000c0H
	mov	ecx, DWORD PTR _pDest$[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _pDest$[ebp]
	add	edx, 1
	mov	DWORD PTR _pDest$[ebp], edx
; Line 1110
	mov	eax, DWORD PTR _ch$[ebp]
	and	eax, 63					; 0000003fH
	or	eax, 128				; 00000080H
	mov	ecx, DWORD PTR _pDest$[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _pDest$[ebp]
	add	edx, 1
	mov	DWORD PTR _pDest$[ebp], edx
	jmp	$LN49@u_strToUTF@2
$LN45@u_strToUTF@2:
; Line 1111
	cmp	DWORD PTR _ch$[ebp], 55295		; 0000d7ffH
	jbe	SHORT $LN42@u_strToUTF@2
	cmp	DWORD PTR _ch$[ebp], 57344		; 0000e000H
	jb	SHORT $LN43@u_strToUTF@2
$LN42@u_strToUTF@2:
; Line 1112
	mov	eax, DWORD PTR _ch$[ebp]
	shr	eax, 12					; 0000000cH
	or	eax, 224				; 000000e0H
	mov	ecx, DWORD PTR _pDest$[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _pDest$[ebp]
	add	edx, 1
	mov	DWORD PTR _pDest$[ebp], edx
; Line 1113
	mov	eax, DWORD PTR _ch$[ebp]
	shr	eax, 6
	and	eax, 63					; 0000003fH
	or	eax, 128				; 00000080H
	mov	ecx, DWORD PTR _pDest$[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _pDest$[ebp]
	add	edx, 1
	mov	DWORD PTR _pDest$[ebp], edx
; Line 1114
	mov	eax, DWORD PTR _ch$[ebp]
	and	eax, 63					; 0000003fH
	or	eax, 128				; 00000080H
	mov	ecx, DWORD PTR _pDest$[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _pDest$[ebp]
	add	edx, 1
	mov	DWORD PTR _pDest$[ebp], edx
; Line 1115
	jmp	$LN49@u_strToUTF@2
$LN43@u_strToUTF@2:
; Line 1121
	mov	eax, DWORD PTR _count$11512[ebp]
	sub	eax, 1
	mov	DWORD PTR _count$11512[ebp], eax
	jne	SHORT $LN40@u_strToUTF@2
; Line 1122
	mov	eax, DWORD PTR _pSrc$[ebp]
	sub	eax, 2
	mov	DWORD PTR _pSrc$[ebp], eax
; Line 1123
	jmp	$LN48@u_strToUTF@2
$LN40@u_strToUTF@2:
; Line 1126
	mov	eax, DWORD PTR _ch$[ebp]
	and	eax, 1024				; 00000400H
	jne	$LN39@u_strToUTF@2
	mov	eax, DWORD PTR _pSrc$[ebp]
	movzx	ecx, WORD PTR [eax]
	mov	DWORD PTR _ch2$[ebp], ecx
	mov	edx, DWORD PTR _ch2$[ebp]
	and	edx, -1024				; fffffc00H
	cmp	edx, 56320				; 0000dc00H
	jne	$LN39@u_strToUTF@2
; Line 1127
	mov	eax, DWORD PTR _pSrc$[ebp]
	add	eax, 2
	mov	DWORD PTR _pSrc$[ebp], eax
; Line 1128
	mov	eax, DWORD PTR _ch$[ebp]
	shl	eax, 10					; 0000000aH
	mov	ecx, DWORD PTR _ch2$[ebp]
	lea	edx, DWORD PTR [eax+ecx-56613888]
	mov	DWORD PTR _ch$[ebp], edx
; Line 1131
	mov	eax, DWORD PTR _ch$[ebp]
	shr	eax, 18					; 00000012H
	or	eax, 240				; 000000f0H
	mov	ecx, DWORD PTR _pDest$[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _pDest$[ebp]
	add	edx, 1
	mov	DWORD PTR _pDest$[ebp], edx
; Line 1132
	mov	eax, DWORD PTR _ch$[ebp]
	shr	eax, 12					; 0000000cH
	and	eax, 63					; 0000003fH
	or	eax, 128				; 00000080H
	mov	ecx, DWORD PTR _pDest$[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _pDest$[ebp]
	add	edx, 1
	mov	DWORD PTR _pDest$[ebp], edx
; Line 1133
	mov	eax, DWORD PTR _ch$[ebp]
	shr	eax, 6
	and	eax, 63					; 0000003fH
	or	eax, 128				; 00000080H
	mov	ecx, DWORD PTR _pDest$[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _pDest$[ebp]
	add	edx, 1
	mov	DWORD PTR _pDest$[ebp], edx
; Line 1134
	mov	eax, DWORD PTR _ch$[ebp]
	and	eax, 63					; 0000003fH
	or	eax, 128				; 00000080H
	mov	ecx, DWORD PTR _pDest$[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _pDest$[ebp]
	add	edx, 1
	mov	DWORD PTR _pDest$[ebp], edx
; Line 1135
	jmp	SHORT $LN49@u_strToUTF@2
$LN39@u_strToUTF@2:
; Line 1137
	cmp	DWORD PTR _subchar$[ebp], 0
	jl	SHORT $LN37@u_strToUTF@2
; Line 1138
	mov	eax, DWORD PTR _subchar$[ebp]
	mov	DWORD PTR _ch$[ebp], eax
; Line 1139
	mov	eax, DWORD PTR _numSubstitutions$[ebp]
	add	eax, 1
	mov	DWORD PTR _numSubstitutions$[ebp], eax
; Line 1140
	jmp	SHORT $LN36@u_strToUTF@2
$LN37@u_strToUTF@2:
; Line 1141
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 10			; 0000000aH
; Line 1142
	xor	eax, eax
	jmp	$LN97@u_strToUTF@2
$LN36@u_strToUTF@2:
; Line 1146
	mov	eax, DWORD PTR _ch$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pDest$[ebp]
	push	ecx
	call	?_appendUTF8@@YAPAEPAEH@Z		; _appendUTF8
	add	esp, 8
	mov	DWORD PTR _pDest$[ebp], eax
$LN49@u_strToUTF@2:
; Line 1149
	mov	eax, DWORD PTR _count$11512[ebp]
	sub	eax, 1
	mov	DWORD PTR _count$11512[ebp], eax
	cmp	DWORD PTR _count$11512[ebp], 0
	jg	$LN50@u_strToUTF@2
$LN48@u_strToUTF@2:
; Line 1150
	jmp	$LN54@u_strToUTF@2
$LN35@u_strToUTF@2:
; Line 1152
	mov	eax, DWORD PTR _pSrc$[ebp]
	cmp	eax, DWORD PTR _pSrcLimit$11511[ebp]
	jae	$LN14@u_strToUTF@2
; Line 1153
	mov	eax, DWORD PTR _pSrc$[ebp]
	movzx	ecx, WORD PTR [eax]
	mov	DWORD PTR _ch$[ebp], ecx
	mov	edx, DWORD PTR _pSrc$[ebp]
	add	edx, 2
	mov	DWORD PTR _pSrc$[ebp], edx
; Line 1154
	cmp	DWORD PTR _ch$[ebp], 127		; 0000007fH
	ja	SHORT $LN33@u_strToUTF@2
; Line 1155
	mov	eax, DWORD PTR _pDest$[ebp]
	cmp	eax, DWORD PTR _pDestLimit$[ebp]
	jae	SHORT $LN32@u_strToUTF@2
; Line 1156
	mov	eax, DWORD PTR _pDest$[ebp]
	mov	cl, BYTE PTR _ch$[ebp]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _pDest$[ebp]
	add	edx, 1
	mov	DWORD PTR _pDest$[ebp], edx
; Line 1157
	jmp	SHORT $LN31@u_strToUTF@2
$LN32@u_strToUTF@2:
; Line 1158
	mov	DWORD PTR _reqLength$[ebp], 1
; Line 1159
	jmp	$LN14@u_strToUTF@2
$LN31@u_strToUTF@2:
; Line 1160
	jmp	$LN30@u_strToUTF@2
$LN33@u_strToUTF@2:
; Line 1161
	cmp	DWORD PTR _ch$[ebp], 2047		; 000007ffH
	ja	SHORT $LN29@u_strToUTF@2
; Line 1162
	mov	eax, DWORD PTR _pDestLimit$[ebp]
	sub	eax, DWORD PTR _pDest$[ebp]
	cmp	eax, 2
	jl	SHORT $LN28@u_strToUTF@2
; Line 1163
	mov	eax, DWORD PTR _ch$[ebp]
	shr	eax, 6
	or	eax, 192				; 000000c0H
	mov	ecx, DWORD PTR _pDest$[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _pDest$[ebp]
	add	edx, 1
	mov	DWORD PTR _pDest$[ebp], edx
; Line 1164
	mov	eax, DWORD PTR _ch$[ebp]
	and	eax, 63					; 0000003fH
	or	eax, 128				; 00000080H
	mov	ecx, DWORD PTR _pDest$[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _pDest$[ebp]
	add	edx, 1
	mov	DWORD PTR _pDest$[ebp], edx
; Line 1165
	jmp	SHORT $LN27@u_strToUTF@2
$LN28@u_strToUTF@2:
; Line 1166
	mov	DWORD PTR _reqLength$[ebp], 2
; Line 1167
	jmp	$LN14@u_strToUTF@2
$LN27@u_strToUTF@2:
; Line 1168
	jmp	$LN30@u_strToUTF@2
$LN29@u_strToUTF@2:
; Line 1169
	cmp	DWORD PTR _ch$[ebp], 55295		; 0000d7ffH
	jbe	SHORT $LN24@u_strToUTF@2
	cmp	DWORD PTR _ch$[ebp], 57344		; 0000e000H
	jb	SHORT $LN25@u_strToUTF@2
$LN24@u_strToUTF@2:
; Line 1170
	mov	eax, DWORD PTR _pDestLimit$[ebp]
	sub	eax, DWORD PTR _pDest$[ebp]
	cmp	eax, 3
	jl	SHORT $LN23@u_strToUTF@2
; Line 1171
	mov	eax, DWORD PTR _ch$[ebp]
	shr	eax, 12					; 0000000cH
	or	eax, 224				; 000000e0H
	mov	ecx, DWORD PTR _pDest$[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _pDest$[ebp]
	add	edx, 1
	mov	DWORD PTR _pDest$[ebp], edx
; Line 1172
	mov	eax, DWORD PTR _ch$[ebp]
	shr	eax, 6
	and	eax, 63					; 0000003fH
	or	eax, 128				; 00000080H
	mov	ecx, DWORD PTR _pDest$[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _pDest$[ebp]
	add	edx, 1
	mov	DWORD PTR _pDest$[ebp], edx
; Line 1173
	mov	eax, DWORD PTR _ch$[ebp]
	and	eax, 63					; 0000003fH
	or	eax, 128				; 00000080H
	mov	ecx, DWORD PTR _pDest$[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _pDest$[ebp]
	add	edx, 1
	mov	DWORD PTR _pDest$[ebp], edx
; Line 1174
	jmp	SHORT $LN22@u_strToUTF@2
$LN23@u_strToUTF@2:
; Line 1175
	mov	DWORD PTR _reqLength$[ebp], 3
; Line 1176
	jmp	$LN14@u_strToUTF@2
$LN22@u_strToUTF@2:
; Line 1178
	jmp	$LN30@u_strToUTF@2
$LN25@u_strToUTF@2:
; Line 1181
	mov	eax, DWORD PTR _ch$[ebp]
	and	eax, 1024				; 00000400H
	jne	SHORT $LN20@u_strToUTF@2
	mov	eax, DWORD PTR _pSrc$[ebp]
	cmp	eax, DWORD PTR _pSrcLimit$11511[ebp]
	jae	SHORT $LN20@u_strToUTF@2
	mov	eax, DWORD PTR _pSrc$[ebp]
	movzx	ecx, WORD PTR [eax]
	mov	DWORD PTR _ch2$[ebp], ecx
	mov	edx, DWORD PTR _ch2$[ebp]
	and	edx, -1024				; fffffc00H
	cmp	edx, 56320				; 0000dc00H
	jne	SHORT $LN20@u_strToUTF@2
; Line 1182
	mov	eax, DWORD PTR _pSrc$[ebp]
	add	eax, 2
	mov	DWORD PTR _pSrc$[ebp], eax
; Line 1183
	mov	eax, DWORD PTR _ch$[ebp]
	shl	eax, 10					; 0000000aH
	mov	ecx, DWORD PTR _ch2$[ebp]
	lea	edx, DWORD PTR [eax+ecx-56613888]
	mov	DWORD PTR _ch$[ebp], edx
	jmp	SHORT $LN19@u_strToUTF@2
$LN20@u_strToUTF@2:
; Line 1184
	cmp	DWORD PTR _subchar$[ebp], 0
	jl	SHORT $LN18@u_strToUTF@2
; Line 1185
	mov	eax, DWORD PTR _subchar$[ebp]
	mov	DWORD PTR _ch$[ebp], eax
; Line 1186
	mov	eax, DWORD PTR _numSubstitutions$[ebp]
	add	eax, 1
	mov	DWORD PTR _numSubstitutions$[ebp], eax
; Line 1187
	jmp	SHORT $LN19@u_strToUTF@2
$LN18@u_strToUTF@2:
; Line 1189
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 10			; 0000000aH
; Line 1190
	xor	eax, eax
	jmp	$LN97@u_strToUTF@2
$LN19@u_strToUTF@2:
; Line 1193
	cmp	DWORD PTR _ch$[ebp], 127		; 0000007fH
	ja	SHORT $LN127@u_strToUTF@2
	mov	DWORD PTR tv340[ebp], 1
	jmp	$LN128@u_strToUTF@2
$LN127@u_strToUTF@2:
	cmp	DWORD PTR _ch$[ebp], 2047		; 000007ffH
	ja	SHORT $LN125@u_strToUTF@2
	mov	DWORD PTR tv339[ebp], 2
	jmp	SHORT $LN126@u_strToUTF@2
$LN125@u_strToUTF@2:
	cmp	DWORD PTR _ch$[ebp], 55295		; 0000d7ffH
	ja	SHORT $LN123@u_strToUTF@2
	mov	DWORD PTR tv338[ebp], 3
	jmp	SHORT $LN124@u_strToUTF@2
$LN123@u_strToUTF@2:
	cmp	DWORD PTR _ch$[ebp], 57343		; 0000dfffH
	jbe	SHORT $LN121@u_strToUTF@2
	cmp	DWORD PTR _ch$[ebp], 1114111		; 0010ffffH
	ja	SHORT $LN121@u_strToUTF@2
	mov	eax, 65535				; 0000ffffH
	cmp	eax, DWORD PTR _ch$[ebp]
	sbb	ecx, ecx
	neg	ecx
	add	ecx, 3
	mov	DWORD PTR tv337[ebp], ecx
	jmp	SHORT $LN122@u_strToUTF@2
$LN121@u_strToUTF@2:
	mov	DWORD PTR tv337[ebp], 0
$LN122@u_strToUTF@2:
	mov	edx, DWORD PTR tv337[ebp]
	mov	DWORD PTR tv338[ebp], edx
$LN124@u_strToUTF@2:
	mov	eax, DWORD PTR tv338[ebp]
	mov	DWORD PTR tv339[ebp], eax
$LN126@u_strToUTF@2:
	mov	ecx, DWORD PTR tv339[ebp]
	mov	DWORD PTR tv340[ebp], ecx
$LN128@u_strToUTF@2:
	mov	edx, DWORD PTR tv340[ebp]
	mov	DWORD PTR _length$11569[ebp], edx
; Line 1194
	mov	eax, DWORD PTR _pDestLimit$[ebp]
	sub	eax, DWORD PTR _pDest$[ebp]
	cmp	eax, DWORD PTR _length$11569[ebp]
	jl	SHORT $LN16@u_strToUTF@2
; Line 1196
	mov	eax, DWORD PTR _ch$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pDest$[ebp]
	push	ecx
	call	?_appendUTF8@@YAPAEPAEH@Z		; _appendUTF8
	add	esp, 8
	mov	DWORD PTR _pDest$[ebp], eax
; Line 1197
	jmp	SHORT $LN30@u_strToUTF@2
$LN16@u_strToUTF@2:
; Line 1198
	mov	eax, DWORD PTR _length$11569[ebp]
	mov	DWORD PTR _reqLength$[ebp], eax
; Line 1199
	jmp	SHORT $LN14@u_strToUTF@2
$LN30@u_strToUTF@2:
; Line 1202
	jmp	$LN35@u_strToUTF@2
$LN14@u_strToUTF@2:
; Line 1203
	mov	eax, DWORD PTR _pSrc$[ebp]
	cmp	eax, DWORD PTR _pSrcLimit$11511[ebp]
	jae	$LN55@u_strToUTF@2
; Line 1204
	mov	eax, DWORD PTR _pSrc$[ebp]
	movzx	ecx, WORD PTR [eax]
	mov	DWORD PTR _ch$[ebp], ecx
	mov	edx, DWORD PTR _pSrc$[ebp]
	add	edx, 2
	mov	DWORD PTR _pSrc$[ebp], edx
; Line 1205
	cmp	DWORD PTR _ch$[ebp], 127		; 0000007fH
	ja	SHORT $LN12@u_strToUTF@2
; Line 1206
	mov	eax, DWORD PTR _reqLength$[ebp]
	add	eax, 1
	mov	DWORD PTR _reqLength$[ebp], eax
	jmp	$LN11@u_strToUTF@2
$LN12@u_strToUTF@2:
; Line 1207
	cmp	DWORD PTR _ch$[ebp], 2047		; 000007ffH
	ja	SHORT $LN10@u_strToUTF@2
; Line 1208
	mov	eax, DWORD PTR _reqLength$[ebp]
	add	eax, 2
	mov	DWORD PTR _reqLength$[ebp], eax
	jmp	$LN11@u_strToUTF@2
$LN10@u_strToUTF@2:
; Line 1209
	mov	eax, DWORD PTR _ch$[ebp]
	and	eax, -2048				; fffff800H
	cmp	eax, 55296				; 0000d800H
	je	SHORT $LN8@u_strToUTF@2
; Line 1210
	mov	eax, DWORD PTR _reqLength$[ebp]
	add	eax, 3
	mov	DWORD PTR _reqLength$[ebp], eax
	jmp	$LN11@u_strToUTF@2
$LN8@u_strToUTF@2:
; Line 1211
	mov	eax, DWORD PTR _ch$[ebp]
	and	eax, 1024				; 00000400H
	jne	SHORT $LN6@u_strToUTF@2
	mov	eax, DWORD PTR _pSrc$[ebp]
	cmp	eax, DWORD PTR _pSrcLimit$11511[ebp]
	jae	SHORT $LN6@u_strToUTF@2
	mov	eax, DWORD PTR _pSrc$[ebp]
	movzx	ecx, WORD PTR [eax]
	mov	DWORD PTR _ch2$[ebp], ecx
	mov	edx, DWORD PTR _ch2$[ebp]
	and	edx, -1024				; fffffc00H
	cmp	edx, 56320				; 0000dc00H
	jne	SHORT $LN6@u_strToUTF@2
; Line 1212
	mov	eax, DWORD PTR _pSrc$[ebp]
	add	eax, 2
	mov	DWORD PTR _pSrc$[ebp], eax
; Line 1213
	mov	eax, DWORD PTR _reqLength$[ebp]
	add	eax, 4
	mov	DWORD PTR _reqLength$[ebp], eax
	jmp	$LN11@u_strToUTF@2
$LN6@u_strToUTF@2:
; Line 1214
	cmp	DWORD PTR _subchar$[ebp], 0
	jl	$LN4@u_strToUTF@2
; Line 1215
	cmp	DWORD PTR _subchar$[ebp], 127		; 0000007fH
	ja	SHORT $LN135@u_strToUTF@2
	mov	DWORD PTR tv375[ebp], 1
	jmp	$LN136@u_strToUTF@2
$LN135@u_strToUTF@2:
	cmp	DWORD PTR _subchar$[ebp], 2047		; 000007ffH
	ja	SHORT $LN133@u_strToUTF@2
	mov	DWORD PTR tv374[ebp], 2
	jmp	SHORT $LN134@u_strToUTF@2
$LN133@u_strToUTF@2:
	cmp	DWORD PTR _subchar$[ebp], 55295		; 0000d7ffH
	ja	SHORT $LN131@u_strToUTF@2
	mov	DWORD PTR tv373[ebp], 3
	jmp	SHORT $LN132@u_strToUTF@2
$LN131@u_strToUTF@2:
	cmp	DWORD PTR _subchar$[ebp], 57343		; 0000dfffH
	jbe	SHORT $LN129@u_strToUTF@2
	cmp	DWORD PTR _subchar$[ebp], 1114111	; 0010ffffH
	ja	SHORT $LN129@u_strToUTF@2
	mov	eax, 65535				; 0000ffffH
	cmp	eax, DWORD PTR _subchar$[ebp]
	sbb	ecx, ecx
	neg	ecx
	add	ecx, 3
	mov	DWORD PTR tv372[ebp], ecx
	jmp	SHORT $LN130@u_strToUTF@2
$LN129@u_strToUTF@2:
	mov	DWORD PTR tv372[ebp], 0
$LN130@u_strToUTF@2:
	mov	edx, DWORD PTR tv372[ebp]
	mov	DWORD PTR tv373[ebp], edx
$LN132@u_strToUTF@2:
	mov	eax, DWORD PTR tv373[ebp]
	mov	DWORD PTR tv374[ebp], eax
$LN134@u_strToUTF@2:
	mov	ecx, DWORD PTR tv374[ebp]
	mov	DWORD PTR tv375[ebp], ecx
$LN136@u_strToUTF@2:
	mov	edx, DWORD PTR _reqLength$[ebp]
	add	edx, DWORD PTR tv375[ebp]
	mov	DWORD PTR _reqLength$[ebp], edx
; Line 1216
	mov	eax, DWORD PTR _numSubstitutions$[ebp]
	add	eax, 1
	mov	DWORD PTR _numSubstitutions$[ebp], eax
; Line 1217
	jmp	SHORT $LN11@u_strToUTF@2
$LN4@u_strToUTF@2:
; Line 1219
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 10			; 0000000aH
; Line 1220
	xor	eax, eax
	jmp	SHORT $LN97@u_strToUTF@2
$LN11@u_strToUTF@2:
; Line 1222
	jmp	$LN14@u_strToUTF@2
$LN55@u_strToUTF@2:
; Line 1225
	mov	eax, DWORD PTR _pDest$[ebp]
	sub	eax, DWORD PTR _dest$[ebp]
	add	eax, DWORD PTR _reqLength$[ebp]
	mov	DWORD PTR _reqLength$[ebp], eax
; Line 1227
	cmp	DWORD PTR _pNumSubstitutions$[ebp], 0
	je	SHORT $LN2@u_strToUTF@2
; Line 1228
	mov	eax, DWORD PTR _pNumSubstitutions$[ebp]
	mov	ecx, DWORD PTR _numSubstitutions$[ebp]
	mov	DWORD PTR [eax], ecx
$LN2@u_strToUTF@2:
; Line 1231
	cmp	DWORD PTR _pDestLength$[ebp], 0
	je	SHORT $LN1@u_strToUTF@2
; Line 1232
	mov	eax, DWORD PTR _pDestLength$[ebp]
	mov	ecx, DWORD PTR _reqLength$[ebp]
	mov	DWORD PTR [eax], ecx
$LN1@u_strToUTF@2:
; Line 1236
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _reqLength$[ebp]
	push	ecx
	mov	edx, DWORD PTR _destCapacity$[ebp]
	push	edx
	mov	eax, DWORD PTR _dest$[ebp]
	push	eax
	call	_u_terminateChars_56
	add	esp, 16					; 00000010H
; Line 1237
	mov	eax, DWORD PTR _dest$[ebp]
$LN97@u_strToUTF@2:
; Line 1238
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 328				; 00000148H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_u_strToUTF8WithSub_56 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?_appendUTF8@@YAPAEPAEH@Z
_TEXT	SEGMENT
_pDest$ = 8						; size = 4
_c$ = 12						; size = 4
?_appendUTF8@@YAPAEPAEH@Z PROC				; _appendUTF8, COMDAT
; Line 955
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 957
	cmp	DWORD PTR _c$[ebp], 127			; 0000007fH
	jg	SHORT $LN6@appendUTF8
; Line 958
	mov	eax, DWORD PTR _pDest$[ebp]
	mov	cl, BYTE PTR _c$[ebp]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _pDest$[ebp]
	add	edx, 1
	mov	DWORD PTR _pDest$[ebp], edx
	jmp	$LN5@appendUTF8
$LN6@appendUTF8:
; Line 959
	cmp	DWORD PTR _c$[ebp], 2047		; 000007ffH
	jg	SHORT $LN4@appendUTF8
; Line 960
	mov	eax, DWORD PTR _c$[ebp]
	sar	eax, 6
	or	eax, 192				; 000000c0H
	mov	ecx, DWORD PTR _pDest$[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _pDest$[ebp]
	add	edx, 1
	mov	DWORD PTR _pDest$[ebp], edx
; Line 961
	mov	eax, DWORD PTR _c$[ebp]
	and	eax, 63					; 0000003fH
	or	eax, 128				; 00000080H
	mov	ecx, DWORD PTR _pDest$[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _pDest$[ebp]
	add	edx, 1
	mov	DWORD PTR _pDest$[ebp], edx
	jmp	$LN5@appendUTF8
$LN4@appendUTF8:
; Line 962
	cmp	DWORD PTR _c$[ebp], 65535		; 0000ffffH
	jg	SHORT $LN2@appendUTF8
; Line 963
	mov	eax, DWORD PTR _c$[ebp]
	sar	eax, 12					; 0000000cH
	or	eax, 224				; 000000e0H
	mov	ecx, DWORD PTR _pDest$[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _pDest$[ebp]
	add	edx, 1
	mov	DWORD PTR _pDest$[ebp], edx
; Line 964
	mov	eax, DWORD PTR _c$[ebp]
	sar	eax, 6
	and	eax, 63					; 0000003fH
	or	eax, 128				; 00000080H
	mov	ecx, DWORD PTR _pDest$[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _pDest$[ebp]
	add	edx, 1
	mov	DWORD PTR _pDest$[ebp], edx
; Line 965
	mov	eax, DWORD PTR _c$[ebp]
	and	eax, 63					; 0000003fH
	or	eax, 128				; 00000080H
	mov	ecx, DWORD PTR _pDest$[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _pDest$[ebp]
	add	edx, 1
	mov	DWORD PTR _pDest$[ebp], edx
; Line 966
	jmp	SHORT $LN5@appendUTF8
$LN2@appendUTF8:
; Line 967
	mov	eax, DWORD PTR _c$[ebp]
	sar	eax, 18					; 00000012H
	or	eax, 240				; 000000f0H
	mov	ecx, DWORD PTR _pDest$[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _pDest$[ebp]
	add	edx, 1
	mov	DWORD PTR _pDest$[ebp], edx
; Line 968
	mov	eax, DWORD PTR _c$[ebp]
	sar	eax, 12					; 0000000cH
	and	eax, 63					; 0000003fH
	or	eax, 128				; 00000080H
	mov	ecx, DWORD PTR _pDest$[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _pDest$[ebp]
	add	edx, 1
	mov	DWORD PTR _pDest$[ebp], edx
; Line 969
	mov	eax, DWORD PTR _c$[ebp]
	sar	eax, 6
	and	eax, 63					; 0000003fH
	or	eax, 128				; 00000080H
	mov	ecx, DWORD PTR _pDest$[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _pDest$[ebp]
	add	edx, 1
	mov	DWORD PTR _pDest$[ebp], edx
; Line 970
	mov	eax, DWORD PTR _c$[ebp]
	and	eax, 63					; 0000003fH
	or	eax, 128				; 00000080H
	mov	ecx, DWORD PTR _pDest$[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _pDest$[ebp]
	add	edx, 1
	mov	DWORD PTR _pDest$[ebp], edx
$LN5@appendUTF8:
; Line 972
	mov	eax, DWORD PTR _pDest$[ebp]
; Line 973
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?_appendUTF8@@YAPAEPAEH@Z ENDP				; _appendUTF8
_TEXT	ENDS
PUBLIC	_u_strToUTF8_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _u_strToUTF8_56
_TEXT	SEGMENT
_dest$ = 8						; size = 4
_destCapacity$ = 12					; size = 4
_pDestLength$ = 16					; size = 4
_pSrc$ = 20						; size = 4
_srcLength$ = 24					; size = 4
_pErrorCode$ = 28					; size = 4
_u_strToUTF8_56 PROC					; COMDAT
; Line 1246
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1251
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	push	0
	push	-1
	mov	ecx, DWORD PTR _srcLength$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pSrc$[ebp]
	push	edx
	mov	eax, DWORD PTR _pDestLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _destCapacity$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dest$[ebp]
	push	edx
	call	_u_strToUTF8WithSub_56
	add	esp, 32					; 00000020H
; Line 1252
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_u_strToUTF8_56 ENDP
_TEXT	ENDS
PUBLIC	_u_strFromJavaModifiedUTF8WithSub_56
EXTRN	_strlen:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _u_strFromJavaModifiedUTF8WithSub_56
_TEXT	SEGMENT
tv131 = -340						; size = 4
_delta$11658 = -140					; size = 4
_prevSrc$11657 = -128					; size = 4
_numSubstitutions$ = -116				; size = 4
_t2$ = -101						; size = 1
_t1$ = -89						; size = 1
_count$ = -80						; size = 4
_pSrcLimit$ = -68					; size = 4
_pSrc$ = -56						; size = 4
_reqLength$ = -44					; size = 4
_ch$ = -32						; size = 4
_pDestLimit$ = -20					; size = 4
_pDest$ = -8						; size = 4
_dest$ = 8						; size = 4
_destCapacity$ = 12					; size = 4
_pDestLength$ = 16					; size = 4
_src$ = 20						; size = 4
_srcLength$ = 24					; size = 4
_subchar$ = 28						; size = 4
_pNumSubstitutions$ = 32				; size = 4
_pErrorCode$ = 36					; size = 4
_u_strFromJavaModifiedUTF8WithSub_56 PROC		; COMDAT
; Line 1262
	push	ebp
	mov	ebp, esp
	sub	esp, 340				; 00000154H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-340]
	mov	ecx, 85					; 00000055H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1263
	mov	eax, DWORD PTR _dest$[ebp]
	mov	DWORD PTR _pDest$[ebp], eax
; Line 1264
	mov	eax, DWORD PTR _destCapacity$[ebp]
	mov	ecx, DWORD PTR _dest$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR _pDestLimit$[ebp], edx
; Line 1266
	mov	DWORD PTR _reqLength$[ebp], 0
; Line 1267
	mov	eax, DWORD PTR _src$[ebp]
	mov	DWORD PTR _pSrc$[ebp], eax
; Line 1274
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN59@u_strFromJ
; Line 1275
	xor	eax, eax
	jmp	$LN60@u_strFromJ
$LN59@u_strFromJ:
; Line 1280
	cmp	DWORD PTR _src$[ebp], 0
	jne	SHORT $LN56@u_strFromJ
	cmp	DWORD PTR _srcLength$[ebp], 0
	jne	SHORT $LN57@u_strFromJ
$LN56@u_strFromJ:
	cmp	DWORD PTR _srcLength$[ebp], -1
	jl	SHORT $LN57@u_strFromJ
	cmp	DWORD PTR _dest$[ebp], 0
	jne	SHORT $LN55@u_strFromJ
	cmp	DWORD PTR _destCapacity$[ebp], 0
	jne	SHORT $LN57@u_strFromJ
$LN55@u_strFromJ:
	cmp	DWORD PTR _destCapacity$[ebp], 0
	jl	SHORT $LN57@u_strFromJ
	cmp	DWORD PTR _subchar$[ebp], 1114111	; 0010ffffH
	jg	SHORT $LN57@u_strFromJ
	mov	eax, DWORD PTR _subchar$[ebp]
	and	eax, -2048				; fffff800H
	cmp	eax, 55296				; 0000d800H
	jne	SHORT $LN58@u_strFromJ
$LN57@u_strFromJ:
; Line 1281
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 1
; Line 1282
	xor	eax, eax
	jmp	$LN60@u_strFromJ
$LN58@u_strFromJ:
; Line 1285
	cmp	DWORD PTR _pNumSubstitutions$[ebp], 0
	je	SHORT $LN54@u_strFromJ
; Line 1286
	mov	eax, DWORD PTR _pNumSubstitutions$[ebp]
	mov	DWORD PTR [eax], 0
$LN54@u_strFromJ:
; Line 1288
	mov	DWORD PTR _numSubstitutions$[ebp], 0
; Line 1290
	cmp	DWORD PTR _srcLength$[ebp], 0
	jge	$LN53@u_strFromJ
$LN52@u_strFromJ:
; Line 1295
	mov	eax, DWORD PTR _pSrc$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _ch$[ebp], ecx
	cmp	DWORD PTR _ch$[ebp], 0
	je	SHORT $LN51@u_strFromJ
	cmp	DWORD PTR _ch$[ebp], 127		; 0000007fH
	jg	SHORT $LN51@u_strFromJ
	mov	eax, DWORD PTR _pDest$[ebp]
	cmp	eax, DWORD PTR _pDestLimit$[ebp]
	jae	SHORT $LN51@u_strFromJ
; Line 1296
	mov	eax, DWORD PTR _pDest$[ebp]
	mov	cx, WORD PTR _ch$[ebp]
	mov	WORD PTR [eax], cx
	mov	edx, DWORD PTR _pDest$[ebp]
	add	edx, 2
	mov	DWORD PTR _pDest$[ebp], edx
; Line 1297
	mov	eax, DWORD PTR _pSrc$[ebp]
	add	eax, 1
	mov	DWORD PTR _pSrc$[ebp], eax
; Line 1298
	jmp	SHORT $LN52@u_strFromJ
$LN51@u_strFromJ:
; Line 1299
	cmp	DWORD PTR _ch$[ebp], 0
	jne	SHORT $LN50@u_strFromJ
; Line 1300
	mov	eax, DWORD PTR _pDest$[ebp]
	sub	eax, DWORD PTR _dest$[ebp]
	sar	eax, 1
	mov	DWORD PTR _reqLength$[ebp], eax
; Line 1301
	cmp	DWORD PTR _pDestLength$[ebp], 0
	je	SHORT $LN49@u_strFromJ
; Line 1302
	mov	eax, DWORD PTR _pDestLength$[ebp]
	mov	ecx, DWORD PTR _reqLength$[ebp]
	mov	DWORD PTR [eax], ecx
$LN49@u_strFromJ:
; Line 1306
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _reqLength$[ebp]
	push	ecx
	mov	edx, DWORD PTR _destCapacity$[ebp]
	push	edx
	mov	eax, DWORD PTR _dest$[ebp]
	push	eax
	call	_u_terminateUChars_56
	add	esp, 16					; 00000010H
; Line 1307
	mov	eax, DWORD PTR _dest$[ebp]
	jmp	$LN60@u_strFromJ
$LN50@u_strFromJ:
; Line 1309
	mov	eax, DWORD PTR _pSrc$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	mov	DWORD PTR _srcLength$[ebp], eax
$LN53@u_strFromJ:
; Line 1313
	cmp	DWORD PTR _pSrc$[ebp], 0
	jne	SHORT $LN62@u_strFromJ
	mov	DWORD PTR tv131[ebp], 0
	jmp	SHORT $LN63@u_strFromJ
$LN62@u_strFromJ:
	mov	eax, DWORD PTR _pSrc$[ebp]
	add	eax, DWORD PTR _srcLength$[ebp]
	mov	DWORD PTR tv131[ebp], eax
$LN63@u_strFromJ:
	mov	ecx, DWORD PTR tv131[ebp]
	mov	DWORD PTR _pSrcLimit$[ebp], ecx
$LN48@u_strFromJ:
; Line 1315
	mov	eax, DWORD PTR _pDestLimit$[ebp]
	sub	eax, DWORD PTR _pDest$[ebp]
	sar	eax, 1
	mov	DWORD PTR _count$[ebp], eax
; Line 1316
	mov	eax, DWORD PTR _pSrcLimit$[ebp]
	sub	eax, DWORD PTR _pSrc$[ebp]
	mov	DWORD PTR _srcLength$[ebp], eax
; Line 1317
	mov	eax, DWORD PTR _count$[ebp]
	cmp	eax, DWORD PTR _srcLength$[ebp]
	jl	SHORT $LN46@u_strFromJ
	cmp	DWORD PTR _srcLength$[ebp], 0
	jle	SHORT $LN46@u_strFromJ
	mov	eax, DWORD PTR _pSrc$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 127				; 0000007fH
	jg	SHORT $LN46@u_strFromJ
; Line 1319
	mov	eax, DWORD PTR _pSrc$[ebp]
	mov	DWORD PTR _prevSrc$11657[ebp], eax
$LN45@u_strFromJ:
; Line 1321
	mov	eax, DWORD PTR _pSrc$[ebp]
	cmp	eax, DWORD PTR _pSrcLimit$[ebp]
	jae	SHORT $LN44@u_strFromJ
	mov	eax, DWORD PTR _pSrc$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _ch$[ebp], ecx
	cmp	DWORD PTR _ch$[ebp], 127		; 0000007fH
	jg	SHORT $LN44@u_strFromJ
; Line 1322
	mov	eax, DWORD PTR _pDest$[ebp]
	mov	cx, WORD PTR _ch$[ebp]
	mov	WORD PTR [eax], cx
	mov	edx, DWORD PTR _pDest$[ebp]
	add	edx, 2
	mov	DWORD PTR _pDest$[ebp], edx
; Line 1323
	mov	eax, DWORD PTR _pSrc$[ebp]
	add	eax, 1
	mov	DWORD PTR _pSrc$[ebp], eax
; Line 1324
	jmp	SHORT $LN45@u_strFromJ
$LN44@u_strFromJ:
; Line 1325
	mov	eax, DWORD PTR _pSrc$[ebp]
	sub	eax, DWORD PTR _prevSrc$11657[ebp]
	mov	DWORD PTR _delta$11658[ebp], eax
; Line 1326
	mov	eax, DWORD PTR _count$[ebp]
	sub	eax, DWORD PTR _delta$11658[ebp]
	mov	DWORD PTR _count$[ebp], eax
; Line 1327
	mov	eax, DWORD PTR _srcLength$[ebp]
	sub	eax, DWORD PTR _delta$11658[ebp]
	mov	DWORD PTR _srcLength$[ebp], eax
$LN46@u_strFromJ:
; Line 1333
	mov	eax, DWORD PTR _srcLength$[ebp]
	cdq
	mov	ecx, 3
	idiv	ecx
	mov	DWORD PTR _srcLength$[ebp], eax
; Line 1334
	mov	eax, DWORD PTR _count$[ebp]
	cmp	eax, DWORD PTR _srcLength$[ebp]
	jle	SHORT $LN43@u_strFromJ
; Line 1335
	mov	eax, DWORD PTR _srcLength$[ebp]
	mov	DWORD PTR _count$[ebp], eax
$LN43@u_strFromJ:
; Line 1337
	cmp	DWORD PTR _count$[ebp], 3
	jge	SHORT $LN41@u_strFromJ
; Line 1342
	jmp	$LN26@u_strFromJ
$LN41@u_strFromJ:
; Line 1345
	mov	eax, DWORD PTR _pSrc$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _ch$[ebp], ecx
; Line 1346
	cmp	DWORD PTR _ch$[ebp], 127		; 0000007fH
	jg	SHORT $LN38@u_strFromJ
; Line 1347
	mov	eax, DWORD PTR _pDest$[ebp]
	mov	cx, WORD PTR _ch$[ebp]
	mov	WORD PTR [eax], cx
	mov	edx, DWORD PTR _pDest$[ebp]
	add	edx, 2
	mov	DWORD PTR _pDest$[ebp], edx
; Line 1348
	mov	eax, DWORD PTR _pSrc$[ebp]
	add	eax, 1
	mov	DWORD PTR _pSrc$[ebp], eax
; Line 1349
	jmp	$LN40@u_strFromJ
$LN38@u_strFromJ:
; Line 1350
	cmp	DWORD PTR _ch$[ebp], 224		; 000000e0H
	jl	SHORT $LN36@u_strFromJ
; Line 1355
	cmp	DWORD PTR _ch$[ebp], 239		; 000000efH
	jg	SHORT $LN35@u_strFromJ
	mov	eax, DWORD PTR _pSrc$[ebp]
	movzx	ecx, BYTE PTR [eax+1]
	sub	ecx, 128				; 00000080H
	mov	BYTE PTR _t1$[ebp], cl
	movzx	edx, BYTE PTR _t1$[ebp]
	cmp	edx, 63					; 0000003fH
	jg	SHORT $LN35@u_strFromJ
	mov	eax, DWORD PTR _pSrc$[ebp]
	movzx	ecx, BYTE PTR [eax+2]
	sub	ecx, 128				; 00000080H
	mov	BYTE PTR _t2$[ebp], cl
	movzx	edx, BYTE PTR _t2$[ebp]
	cmp	edx, 63					; 0000003fH
	jg	SHORT $LN35@u_strFromJ
; Line 1357
	mov	eax, DWORD PTR _ch$[ebp]
	shl	eax, 12					; 0000000cH
	movzx	ecx, BYTE PTR _t1$[ebp]
	shl	ecx, 6
	or	eax, ecx
	movzx	edx, BYTE PTR _t2$[ebp]
	or	eax, edx
	mov	ecx, DWORD PTR _pDest$[ebp]
	mov	WORD PTR [ecx], ax
	mov	edx, DWORD PTR _pDest$[ebp]
	add	edx, 2
	mov	DWORD PTR _pDest$[ebp], edx
; Line 1358
	mov	eax, DWORD PTR _pSrc$[ebp]
	add	eax, 3
	mov	DWORD PTR _pSrc$[ebp], eax
; Line 1359
	jmp	$LN40@u_strFromJ
$LN35@u_strFromJ:
; Line 1361
	jmp	SHORT $LN34@u_strFromJ
$LN36@u_strFromJ:
; Line 1365
	cmp	DWORD PTR _ch$[ebp], 192		; 000000c0H
	jl	SHORT $LN34@u_strFromJ
	mov	eax, DWORD PTR _pSrc$[ebp]
	movzx	ecx, BYTE PTR [eax+1]
	sub	ecx, 128				; 00000080H
	mov	BYTE PTR _t1$[ebp], cl
	movzx	edx, BYTE PTR _t1$[ebp]
	cmp	edx, 63					; 0000003fH
	jg	SHORT $LN34@u_strFromJ
; Line 1366
	mov	eax, DWORD PTR _ch$[ebp]
	and	eax, 31					; 0000001fH
	shl	eax, 6
	movzx	ecx, BYTE PTR _t1$[ebp]
	or	eax, ecx
	mov	edx, DWORD PTR _pDest$[ebp]
	mov	WORD PTR [edx], ax
	mov	eax, DWORD PTR _pDest$[ebp]
	add	eax, 2
	mov	DWORD PTR _pDest$[ebp], eax
; Line 1367
	mov	eax, DWORD PTR _pSrc$[ebp]
	add	eax, 2
	mov	DWORD PTR _pSrc$[ebp], eax
; Line 1368
	jmp	$LN40@u_strFromJ
$LN34@u_strFromJ:
; Line 1372
	cmp	DWORD PTR _subchar$[ebp], 0
	jge	SHORT $LN32@u_strFromJ
; Line 1373
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 10			; 0000000aH
; Line 1374
	xor	eax, eax
	jmp	$LN60@u_strFromJ
	jmp	$LN40@u_strFromJ
$LN32@u_strFromJ:
; Line 1375
	cmp	DWORD PTR _subchar$[ebp], 65535		; 0000ffffH
	jle	SHORT $LN30@u_strFromJ
	mov	eax, DWORD PTR _count$[ebp]
	sub	eax, 1
	mov	DWORD PTR _count$[ebp], eax
	jne	SHORT $LN30@u_strFromJ
; Line 1380
	jmp	$LN39@u_strFromJ
; Line 1381
	jmp	SHORT $LN40@u_strFromJ
$LN30@u_strFromJ:
; Line 1383
	mov	eax, DWORD PTR _pSrc$[ebp]
	add	eax, 1
	mov	DWORD PTR _pSrc$[ebp], eax
; Line 1384
	mov	eax, DWORD PTR _ch$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pSrcLimit$[ebp]
	push	ecx
	lea	edx, DWORD PTR _pSrc$[ebp]
	push	edx
	call	?utf8_nextCharSafeBodyPointer@@YAHPAPBEPBEH@Z ; utf8_nextCharSafeBodyPointer
	add	esp, 12					; 0000000cH
; Line 1385
	mov	eax, DWORD PTR _numSubstitutions$[ebp]
	add	eax, 1
	mov	DWORD PTR _numSubstitutions$[ebp], eax
; Line 1386
	cmp	DWORD PTR _subchar$[ebp], 65535		; 0000ffffH
	jg	SHORT $LN28@u_strFromJ
; Line 1387
	mov	eax, DWORD PTR _pDest$[ebp]
	mov	cx, WORD PTR _subchar$[ebp]
	mov	WORD PTR [eax], cx
	mov	edx, DWORD PTR _pDest$[ebp]
	add	edx, 2
	mov	DWORD PTR _pDest$[ebp], edx
; Line 1388
	jmp	SHORT $LN40@u_strFromJ
$LN28@u_strFromJ:
; Line 1389
	mov	eax, DWORD PTR _subchar$[ebp]
	sar	eax, 10					; 0000000aH
	add	eax, 55232				; 0000d7c0H
	mov	ecx, DWORD PTR _pDest$[ebp]
	mov	WORD PTR [ecx], ax
	mov	edx, DWORD PTR _pDest$[ebp]
	add	edx, 2
	mov	DWORD PTR _pDest$[ebp], edx
; Line 1390
	mov	eax, DWORD PTR _subchar$[ebp]
	and	eax, 1023				; 000003ffH
	or	eax, 56320				; 0000dc00H
	mov	ecx, DWORD PTR _pDest$[ebp]
	mov	WORD PTR [ecx], ax
	mov	edx, DWORD PTR _pDest$[ebp]
	add	edx, 2
	mov	DWORD PTR _pDest$[ebp], edx
$LN40@u_strFromJ:
; Line 1394
	mov	eax, DWORD PTR _count$[ebp]
	sub	eax, 1
	mov	DWORD PTR _count$[ebp], eax
	cmp	DWORD PTR _count$[ebp], 0
	jg	$LN41@u_strFromJ
$LN39@u_strFromJ:
; Line 1395
	jmp	$LN48@u_strFromJ
$LN26@u_strFromJ:
; Line 1397
	mov	eax, DWORD PTR _pSrc$[ebp]
	cmp	eax, DWORD PTR _pSrcLimit$[ebp]
	jae	$LN12@u_strFromJ
	mov	eax, DWORD PTR _pDest$[ebp]
	cmp	eax, DWORD PTR _pDestLimit$[ebp]
	jae	$LN12@u_strFromJ
; Line 1398
	mov	eax, DWORD PTR _pSrc$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _ch$[ebp], ecx
; Line 1399
	cmp	DWORD PTR _ch$[ebp], 127		; 0000007fH
	jg	SHORT $LN24@u_strFromJ
; Line 1400
	mov	eax, DWORD PTR _pDest$[ebp]
	mov	cx, WORD PTR _ch$[ebp]
	mov	WORD PTR [eax], cx
	mov	edx, DWORD PTR _pDest$[ebp]
	add	edx, 2
	mov	DWORD PTR _pDest$[ebp], edx
; Line 1401
	mov	eax, DWORD PTR _pSrc$[ebp]
	add	eax, 1
	mov	DWORD PTR _pSrc$[ebp], eax
; Line 1402
	jmp	$LN23@u_strFromJ
$LN24@u_strFromJ:
; Line 1403
	cmp	DWORD PTR _ch$[ebp], 224		; 000000e0H
	jl	SHORT $LN22@u_strFromJ
; Line 1409
	cmp	DWORD PTR _ch$[ebp], 239		; 000000efH
	jg	SHORT $LN21@u_strFromJ
	mov	eax, DWORD PTR _pSrcLimit$[ebp]
	sub	eax, DWORD PTR _pSrc$[ebp]
	cmp	eax, 3
	jl	SHORT $LN21@u_strFromJ
	mov	eax, DWORD PTR _pSrc$[ebp]
	movzx	ecx, BYTE PTR [eax+1]
	sub	ecx, 128				; 00000080H
	mov	BYTE PTR _t1$[ebp], cl
	movzx	edx, BYTE PTR _t1$[ebp]
	cmp	edx, 63					; 0000003fH
	jg	SHORT $LN21@u_strFromJ
	mov	eax, DWORD PTR _pSrc$[ebp]
	movzx	ecx, BYTE PTR [eax+2]
	sub	ecx, 128				; 00000080H
	mov	BYTE PTR _t2$[ebp], cl
	movzx	edx, BYTE PTR _t2$[ebp]
	cmp	edx, 63					; 0000003fH
	jg	SHORT $LN21@u_strFromJ
; Line 1411
	mov	eax, DWORD PTR _ch$[ebp]
	shl	eax, 12					; 0000000cH
	movzx	ecx, BYTE PTR _t1$[ebp]
	shl	ecx, 6
	or	eax, ecx
	movzx	edx, BYTE PTR _t2$[ebp]
	or	eax, edx
	mov	ecx, DWORD PTR _pDest$[ebp]
	mov	WORD PTR [ecx], ax
	mov	edx, DWORD PTR _pDest$[ebp]
	add	edx, 2
	mov	DWORD PTR _pDest$[ebp], edx
; Line 1412
	mov	eax, DWORD PTR _pSrc$[ebp]
	add	eax, 3
	mov	DWORD PTR _pSrc$[ebp], eax
; Line 1413
	jmp	$LN26@u_strFromJ
$LN21@u_strFromJ:
; Line 1415
	jmp	SHORT $LN20@u_strFromJ
$LN22@u_strFromJ:
; Line 1420
	cmp	DWORD PTR _ch$[ebp], 192		; 000000c0H
	jl	SHORT $LN20@u_strFromJ
	mov	eax, DWORD PTR _pSrcLimit$[ebp]
	sub	eax, DWORD PTR _pSrc$[ebp]
	cmp	eax, 2
	jl	SHORT $LN20@u_strFromJ
	mov	eax, DWORD PTR _pSrc$[ebp]
	movzx	ecx, BYTE PTR [eax+1]
	sub	ecx, 128				; 00000080H
	mov	BYTE PTR _t1$[ebp], cl
	movzx	edx, BYTE PTR _t1$[ebp]
	cmp	edx, 63					; 0000003fH
	jg	SHORT $LN20@u_strFromJ
; Line 1421
	mov	eax, DWORD PTR _ch$[ebp]
	and	eax, 31					; 0000001fH
	shl	eax, 6
	movzx	ecx, BYTE PTR _t1$[ebp]
	or	eax, ecx
	mov	edx, DWORD PTR _pDest$[ebp]
	mov	WORD PTR [edx], ax
	mov	eax, DWORD PTR _pDest$[ebp]
	add	eax, 2
	mov	DWORD PTR _pDest$[ebp], eax
; Line 1422
	mov	eax, DWORD PTR _pSrc$[ebp]
	add	eax, 2
	mov	DWORD PTR _pSrc$[ebp], eax
; Line 1423
	jmp	$LN26@u_strFromJ
$LN20@u_strFromJ:
; Line 1427
	cmp	DWORD PTR _subchar$[ebp], 0
	jge	SHORT $LN18@u_strFromJ
; Line 1428
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 10			; 0000000aH
; Line 1429
	xor	eax, eax
	jmp	$LN60@u_strFromJ
; Line 1430
	jmp	$LN23@u_strFromJ
$LN18@u_strFromJ:
; Line 1432
	mov	eax, DWORD PTR _pSrc$[ebp]
	add	eax, 1
	mov	DWORD PTR _pSrc$[ebp], eax
; Line 1433
	mov	eax, DWORD PTR _ch$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pSrcLimit$[ebp]
	push	ecx
	lea	edx, DWORD PTR _pSrc$[ebp]
	push	edx
	call	?utf8_nextCharSafeBodyPointer@@YAHPAPBEPBEH@Z ; utf8_nextCharSafeBodyPointer
	add	esp, 12					; 0000000cH
; Line 1434
	mov	eax, DWORD PTR _numSubstitutions$[ebp]
	add	eax, 1
	mov	DWORD PTR _numSubstitutions$[ebp], eax
; Line 1435
	cmp	DWORD PTR _subchar$[ebp], 65535		; 0000ffffH
	jg	SHORT $LN16@u_strFromJ
; Line 1436
	mov	eax, DWORD PTR _pDest$[ebp]
	mov	cx, WORD PTR _subchar$[ebp]
	mov	WORD PTR [eax], cx
	mov	edx, DWORD PTR _pDest$[ebp]
	add	edx, 2
	mov	DWORD PTR _pDest$[ebp], edx
; Line 1437
	jmp	SHORT $LN23@u_strFromJ
$LN16@u_strFromJ:
; Line 1438
	mov	eax, DWORD PTR _subchar$[ebp]
	sar	eax, 10					; 0000000aH
	add	eax, 55232				; 0000d7c0H
	mov	ecx, DWORD PTR _pDest$[ebp]
	mov	WORD PTR [ecx], ax
	mov	edx, DWORD PTR _pDest$[ebp]
	add	edx, 2
	mov	DWORD PTR _pDest$[ebp], edx
; Line 1439
	mov	eax, DWORD PTR _pDest$[ebp]
	cmp	eax, DWORD PTR _pDestLimit$[ebp]
	jae	SHORT $LN14@u_strFromJ
; Line 1440
	mov	eax, DWORD PTR _subchar$[ebp]
	and	eax, 1023				; 000003ffH
	or	eax, 56320				; 0000dc00H
	mov	ecx, DWORD PTR _pDest$[ebp]
	mov	WORD PTR [ecx], ax
	mov	edx, DWORD PTR _pDest$[ebp]
	add	edx, 2
	mov	DWORD PTR _pDest$[ebp], edx
; Line 1441
	jmp	SHORT $LN23@u_strFromJ
$LN14@u_strFromJ:
; Line 1442
	mov	eax, DWORD PTR _reqLength$[ebp]
	add	eax, 1
	mov	DWORD PTR _reqLength$[ebp], eax
; Line 1443
	jmp	SHORT $LN12@u_strFromJ
$LN23@u_strFromJ:
; Line 1448
	jmp	$LN26@u_strFromJ
$LN12@u_strFromJ:
; Line 1451
	mov	eax, DWORD PTR _pSrc$[ebp]
	cmp	eax, DWORD PTR _pSrcLimit$[ebp]
	jae	$LN11@u_strFromJ
; Line 1452
	mov	eax, DWORD PTR _pSrc$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _ch$[ebp], ecx
; Line 1453
	cmp	DWORD PTR _ch$[ebp], 127		; 0000007fH
	jg	SHORT $LN10@u_strFromJ
; Line 1454
	mov	eax, DWORD PTR _reqLength$[ebp]
	add	eax, 1
	mov	DWORD PTR _reqLength$[ebp], eax
; Line 1455
	mov	eax, DWORD PTR _pSrc$[ebp]
	add	eax, 1
	mov	DWORD PTR _pSrc$[ebp], eax
; Line 1456
	jmp	$LN9@u_strFromJ
$LN10@u_strFromJ:
; Line 1457
	cmp	DWORD PTR _ch$[ebp], 224		; 000000e0H
	jl	SHORT $LN8@u_strFromJ
; Line 1463
	cmp	DWORD PTR _ch$[ebp], 239		; 000000efH
	jg	SHORT $LN7@u_strFromJ
	mov	eax, DWORD PTR _pSrcLimit$[ebp]
	sub	eax, DWORD PTR _pSrc$[ebp]
	cmp	eax, 3
	jl	SHORT $LN7@u_strFromJ
	mov	eax, DWORD PTR _pSrc$[ebp]
	movzx	ecx, BYTE PTR [eax+1]
	sub	ecx, 128				; 00000080H
	movzx	edx, cl
	cmp	edx, 63					; 0000003fH
	jg	SHORT $LN7@u_strFromJ
	mov	eax, DWORD PTR _pSrc$[ebp]
	movzx	ecx, BYTE PTR [eax+2]
	sub	ecx, 128				; 00000080H
	movzx	edx, cl
	cmp	edx, 63					; 0000003fH
	jg	SHORT $LN7@u_strFromJ
; Line 1464
	mov	eax, DWORD PTR _reqLength$[ebp]
	add	eax, 1
	mov	DWORD PTR _reqLength$[ebp], eax
; Line 1465
	mov	eax, DWORD PTR _pSrc$[ebp]
	add	eax, 3
	mov	DWORD PTR _pSrc$[ebp], eax
; Line 1466
	jmp	$LN12@u_strFromJ
$LN7@u_strFromJ:
; Line 1468
	jmp	SHORT $LN6@u_strFromJ
$LN8@u_strFromJ:
; Line 1473
	cmp	DWORD PTR _ch$[ebp], 192		; 000000c0H
	jl	SHORT $LN6@u_strFromJ
	mov	eax, DWORD PTR _pSrcLimit$[ebp]
	sub	eax, DWORD PTR _pSrc$[ebp]
	cmp	eax, 2
	jl	SHORT $LN6@u_strFromJ
	mov	eax, DWORD PTR _pSrc$[ebp]
	movzx	ecx, BYTE PTR [eax+1]
	sub	ecx, 128				; 00000080H
	movzx	edx, cl
	cmp	edx, 63					; 0000003fH
	jg	SHORT $LN6@u_strFromJ
; Line 1474
	mov	eax, DWORD PTR _reqLength$[ebp]
	add	eax, 1
	mov	DWORD PTR _reqLength$[ebp], eax
; Line 1475
	mov	eax, DWORD PTR _pSrc$[ebp]
	add	eax, 2
	mov	DWORD PTR _pSrc$[ebp], eax
; Line 1476
	jmp	$LN12@u_strFromJ
$LN6@u_strFromJ:
; Line 1480
	cmp	DWORD PTR _subchar$[ebp], 0
	jge	SHORT $LN4@u_strFromJ
; Line 1481
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 10			; 0000000aH
; Line 1482
	xor	eax, eax
	jmp	$LN60@u_strFromJ
; Line 1483
	jmp	SHORT $LN9@u_strFromJ
$LN4@u_strFromJ:
; Line 1485
	mov	eax, DWORD PTR _pSrc$[ebp]
	add	eax, 1
	mov	DWORD PTR _pSrc$[ebp], eax
; Line 1486
	mov	eax, DWORD PTR _ch$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pSrcLimit$[ebp]
	push	ecx
	lea	edx, DWORD PTR _pSrc$[ebp]
	push	edx
	call	?utf8_nextCharSafeBodyPointer@@YAHPAPBEPBEH@Z ; utf8_nextCharSafeBodyPointer
	add	esp, 12					; 0000000cH
; Line 1487
	mov	eax, DWORD PTR _numSubstitutions$[ebp]
	add	eax, 1
	mov	DWORD PTR _numSubstitutions$[ebp], eax
; Line 1488
	mov	eax, 65535				; 0000ffffH
	cmp	eax, DWORD PTR _ch$[ebp]
	sbb	ecx, ecx
	neg	ecx
	add	ecx, 1
	add	ecx, DWORD PTR _reqLength$[ebp]
	mov	DWORD PTR _reqLength$[ebp], ecx
$LN9@u_strFromJ:
; Line 1491
	jmp	$LN12@u_strFromJ
$LN11@u_strFromJ:
; Line 1493
	cmp	DWORD PTR _pNumSubstitutions$[ebp], 0
	je	SHORT $LN2@u_strFromJ
; Line 1494
	mov	eax, DWORD PTR _pNumSubstitutions$[ebp]
	mov	ecx, DWORD PTR _numSubstitutions$[ebp]
	mov	DWORD PTR [eax], ecx
$LN2@u_strFromJ:
; Line 1497
	mov	eax, DWORD PTR _pDest$[ebp]
	sub	eax, DWORD PTR _dest$[ebp]
	sar	eax, 1
	add	eax, DWORD PTR _reqLength$[ebp]
	mov	DWORD PTR _reqLength$[ebp], eax
; Line 1498
	cmp	DWORD PTR _pDestLength$[ebp], 0
	je	SHORT $LN1@u_strFromJ
; Line 1499
	mov	eax, DWORD PTR _pDestLength$[ebp]
	mov	ecx, DWORD PTR _reqLength$[ebp]
	mov	DWORD PTR [eax], ecx
$LN1@u_strFromJ:
; Line 1503
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _reqLength$[ebp]
	push	ecx
	mov	edx, DWORD PTR _destCapacity$[ebp]
	push	edx
	mov	eax, DWORD PTR _dest$[ebp]
	push	eax
	call	_u_terminateUChars_56
	add	esp, 16					; 00000010H
; Line 1504
	mov	eax, DWORD PTR _dest$[ebp]
$LN60@u_strFromJ:
; Line 1505
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN70@u_strFromJ
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 340				; 00000154H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN70@u_strFromJ:
	DD	1
	DD	$LN69@u_strFromJ
$LN69@u_strFromJ:
	DD	-56					; ffffffc8H
	DD	4
	DD	$LN68@u_strFromJ
$LN68@u_strFromJ:
	DB	112					; 00000070H
	DB	83					; 00000053H
	DB	114					; 00000072H
	DB	99					; 00000063H
	DB	0
_u_strFromJavaModifiedUTF8WithSub_56 ENDP
_TEXT	ENDS
PUBLIC	_u_strToJavaModifiedUTF8_56
EXTRN	_u_strlen_56:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _u_strToJavaModifiedUTF8_56
_TEXT	SEGMENT
tv94 = -292						; size = 4
_delta$11768 = -92					; size = 4
_prevSrc$11767 = -80					; size = 4
_count$ = -68						; size = 4
_pSrcLimit$ = -56					; size = 4
_pDestLimit$ = -44					; size = 4
_pDest$ = -32						; size = 4
_ch$ = -20						; size = 4
_reqLength$ = -8					; size = 4
_dest$ = 8						; size = 4
_destCapacity$ = 12					; size = 4
_pDestLength$ = 16					; size = 4
_src$ = 20						; size = 4
_srcLength$ = 24					; size = 4
_pErrorCode$ = 28					; size = 4
_u_strToJavaModifiedUTF8_56 PROC			; COMDAT
; Line 1514
	push	ebp
	mov	ebp, esp
	sub	esp, 292				; 00000124H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-292]
	mov	ecx, 73					; 00000049H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1515
	mov	DWORD PTR _reqLength$[ebp], 0
; Line 1516
	mov	DWORD PTR _ch$[ebp], 0
; Line 1517
	mov	eax, DWORD PTR _dest$[ebp]
	mov	DWORD PTR _pDest$[ebp], eax
; Line 1518
	mov	eax, DWORD PTR _pDest$[ebp]
	add	eax, DWORD PTR _destCapacity$[ebp]
	mov	DWORD PTR _pDestLimit$[ebp], eax
; Line 1523
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN43@u_strToJav
; Line 1524
	xor	eax, eax
	jmp	$LN44@u_strToJav
$LN43@u_strToJav:
; Line 1528
	cmp	DWORD PTR _src$[ebp], 0
	jne	SHORT $LN40@u_strToJav
	cmp	DWORD PTR _srcLength$[ebp], 0
	jne	SHORT $LN41@u_strToJav
$LN40@u_strToJav:
	cmp	DWORD PTR _srcLength$[ebp], -1
	jl	SHORT $LN41@u_strToJav
	cmp	DWORD PTR _dest$[ebp], 0
	jne	SHORT $LN39@u_strToJav
	cmp	DWORD PTR _destCapacity$[ebp], 0
	jne	SHORT $LN41@u_strToJav
$LN39@u_strToJav:
	cmp	DWORD PTR _destCapacity$[ebp], 0
	jge	SHORT $LN42@u_strToJav
$LN41@u_strToJav:
; Line 1529
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 1
; Line 1530
	xor	eax, eax
	jmp	$LN44@u_strToJav
$LN42@u_strToJav:
; Line 1533
	cmp	DWORD PTR _srcLength$[ebp], -1
	jne	$LN38@u_strToJav
$LN37@u_strToJav:
; Line 1535
	mov	eax, DWORD PTR _src$[ebp]
	movzx	ecx, WORD PTR [eax]
	mov	DWORD PTR _ch$[ebp], ecx
	cmp	DWORD PTR _ch$[ebp], 127		; 0000007fH
	ja	SHORT $LN36@u_strToJav
	cmp	DWORD PTR _ch$[ebp], 0
	je	SHORT $LN36@u_strToJav
	mov	eax, DWORD PTR _pDest$[ebp]
	cmp	eax, DWORD PTR _pDestLimit$[ebp]
	jae	SHORT $LN36@u_strToJav
; Line 1536
	mov	eax, DWORD PTR _pDest$[ebp]
	mov	cl, BYTE PTR _ch$[ebp]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _pDest$[ebp]
	add	edx, 1
	mov	DWORD PTR _pDest$[ebp], edx
; Line 1537
	mov	eax, DWORD PTR _src$[ebp]
	add	eax, 2
	mov	DWORD PTR _src$[ebp], eax
; Line 1538
	jmp	SHORT $LN37@u_strToJav
$LN36@u_strToJav:
; Line 1539
	cmp	DWORD PTR _ch$[ebp], 0
	jne	SHORT $LN35@u_strToJav
; Line 1540
	mov	eax, DWORD PTR _pDest$[ebp]
	sub	eax, DWORD PTR _dest$[ebp]
	mov	DWORD PTR _reqLength$[ebp], eax
; Line 1541
	cmp	DWORD PTR _pDestLength$[ebp], 0
	je	SHORT $LN34@u_strToJav
; Line 1542
	mov	eax, DWORD PTR _pDestLength$[ebp]
	mov	ecx, DWORD PTR _reqLength$[ebp]
	mov	DWORD PTR [eax], ecx
$LN34@u_strToJav:
; Line 1546
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _reqLength$[ebp]
	push	ecx
	mov	edx, DWORD PTR _destCapacity$[ebp]
	push	edx
	mov	eax, DWORD PTR _dest$[ebp]
	push	eax
	call	_u_terminateChars_56
	add	esp, 16					; 00000010H
; Line 1547
	mov	eax, DWORD PTR _dest$[ebp]
	jmp	$LN44@u_strToJav
$LN35@u_strToJav:
; Line 1549
	mov	eax, DWORD PTR _src$[ebp]
	push	eax
	call	_u_strlen_56
	add	esp, 4
	mov	DWORD PTR _srcLength$[ebp], eax
$LN38@u_strToJav:
; Line 1553
	cmp	DWORD PTR _src$[ebp], 0
	je	SHORT $LN46@u_strToJav
	mov	eax, DWORD PTR _srcLength$[ebp]
	mov	ecx, DWORD PTR _src$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR tv94[ebp], edx
	jmp	SHORT $LN47@u_strToJav
$LN46@u_strToJav:
	mov	DWORD PTR tv94[ebp], 0
$LN47@u_strToJav:
	mov	eax, DWORD PTR tv94[ebp]
	mov	DWORD PTR _pSrcLimit$[ebp], eax
$LN33@u_strToJav:
; Line 1555
	mov	eax, DWORD PTR _pDestLimit$[ebp]
	sub	eax, DWORD PTR _pDest$[ebp]
	mov	DWORD PTR _count$[ebp], eax
; Line 1556
	mov	eax, DWORD PTR _pSrcLimit$[ebp]
	sub	eax, DWORD PTR _src$[ebp]
	sar	eax, 1
	mov	DWORD PTR _srcLength$[ebp], eax
; Line 1557
	mov	eax, DWORD PTR _count$[ebp]
	cmp	eax, DWORD PTR _srcLength$[ebp]
	jl	SHORT $LN31@u_strToJav
	cmp	DWORD PTR _srcLength$[ebp], 0
	jle	SHORT $LN31@u_strToJav
	mov	eax, DWORD PTR _src$[ebp]
	movzx	ecx, WORD PTR [eax]
	cmp	ecx, 127				; 0000007fH
	jg	SHORT $LN31@u_strToJav
; Line 1559
	mov	eax, DWORD PTR _src$[ebp]
	mov	DWORD PTR _prevSrc$11767[ebp], eax
$LN30@u_strToJav:
; Line 1561
	mov	eax, DWORD PTR _src$[ebp]
	cmp	eax, DWORD PTR _pSrcLimit$[ebp]
	jae	SHORT $LN29@u_strToJav
	mov	eax, DWORD PTR _src$[ebp]
	movzx	ecx, WORD PTR [eax]
	mov	DWORD PTR _ch$[ebp], ecx
	cmp	DWORD PTR _ch$[ebp], 127		; 0000007fH
	ja	SHORT $LN29@u_strToJav
	cmp	DWORD PTR _ch$[ebp], 0
	je	SHORT $LN29@u_strToJav
; Line 1562
	mov	eax, DWORD PTR _pDest$[ebp]
	mov	cl, BYTE PTR _ch$[ebp]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _pDest$[ebp]
	add	edx, 1
	mov	DWORD PTR _pDest$[ebp], edx
; Line 1563
	mov	eax, DWORD PTR _src$[ebp]
	add	eax, 2
	mov	DWORD PTR _src$[ebp], eax
; Line 1564
	jmp	SHORT $LN30@u_strToJav
$LN29@u_strToJav:
; Line 1565
	mov	eax, DWORD PTR _src$[ebp]
	sub	eax, DWORD PTR _prevSrc$11767[ebp]
	sar	eax, 1
	mov	DWORD PTR _delta$11768[ebp], eax
; Line 1566
	mov	eax, DWORD PTR _count$[ebp]
	sub	eax, DWORD PTR _delta$11768[ebp]
	mov	DWORD PTR _count$[ebp], eax
; Line 1567
	mov	eax, DWORD PTR _srcLength$[ebp]
	sub	eax, DWORD PTR _delta$11768[ebp]
	mov	DWORD PTR _srcLength$[ebp], eax
$LN31@u_strToJav:
; Line 1573
	mov	eax, DWORD PTR _count$[ebp]
	cdq
	mov	ecx, 3
	idiv	ecx
	mov	DWORD PTR _count$[ebp], eax
; Line 1574
	mov	eax, DWORD PTR _count$[ebp]
	cmp	eax, DWORD PTR _srcLength$[ebp]
	jle	SHORT $LN28@u_strToJav
; Line 1575
	mov	eax, DWORD PTR _srcLength$[ebp]
	mov	DWORD PTR _count$[ebp], eax
$LN28@u_strToJav:
; Line 1577
	cmp	DWORD PTR _count$[ebp], 3
	jge	SHORT $LN26@u_strToJav
; Line 1582
	jmp	$LN19@u_strToJav
$LN26@u_strToJav:
; Line 1585
	mov	eax, DWORD PTR _src$[ebp]
	movzx	ecx, WORD PTR [eax]
	mov	DWORD PTR _ch$[ebp], ecx
	mov	edx, DWORD PTR _src$[ebp]
	add	edx, 2
	mov	DWORD PTR _src$[ebp], edx
; Line 1586
	cmp	DWORD PTR _ch$[ebp], 127		; 0000007fH
	ja	SHORT $LN23@u_strToJav
	cmp	DWORD PTR _ch$[ebp], 0
	je	SHORT $LN23@u_strToJav
; Line 1587
	mov	eax, DWORD PTR _pDest$[ebp]
	mov	cl, BYTE PTR _ch$[ebp]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _pDest$[ebp]
	add	edx, 1
	mov	DWORD PTR _pDest$[ebp], edx
	jmp	$LN25@u_strToJav
$LN23@u_strToJav:
; Line 1588
	cmp	DWORD PTR _ch$[ebp], 2047		; 000007ffH
	ja	SHORT $LN21@u_strToJav
; Line 1589
	mov	eax, DWORD PTR _ch$[ebp]
	shr	eax, 6
	or	eax, 192				; 000000c0H
	mov	ecx, DWORD PTR _pDest$[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _pDest$[ebp]
	add	edx, 1
	mov	DWORD PTR _pDest$[ebp], edx
; Line 1590
	mov	eax, DWORD PTR _ch$[ebp]
	and	eax, 63					; 0000003fH
	or	eax, 128				; 00000080H
	mov	ecx, DWORD PTR _pDest$[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _pDest$[ebp]
	add	edx, 1
	mov	DWORD PTR _pDest$[ebp], edx
; Line 1591
	jmp	SHORT $LN25@u_strToJav
$LN21@u_strToJav:
; Line 1592
	mov	eax, DWORD PTR _ch$[ebp]
	shr	eax, 12					; 0000000cH
	or	eax, 224				; 000000e0H
	mov	ecx, DWORD PTR _pDest$[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _pDest$[ebp]
	add	edx, 1
	mov	DWORD PTR _pDest$[ebp], edx
; Line 1593
	mov	eax, DWORD PTR _ch$[ebp]
	shr	eax, 6
	and	eax, 63					; 0000003fH
	or	eax, 128				; 00000080H
	mov	ecx, DWORD PTR _pDest$[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _pDest$[ebp]
	add	edx, 1
	mov	DWORD PTR _pDest$[ebp], edx
; Line 1594
	mov	eax, DWORD PTR _ch$[ebp]
	and	eax, 63					; 0000003fH
	or	eax, 128				; 00000080H
	mov	ecx, DWORD PTR _pDest$[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _pDest$[ebp]
	add	edx, 1
	mov	DWORD PTR _pDest$[ebp], edx
$LN25@u_strToJav:
; Line 1596
	mov	eax, DWORD PTR _count$[ebp]
	sub	eax, 1
	mov	DWORD PTR _count$[ebp], eax
	cmp	DWORD PTR _count$[ebp], 0
	jg	$LN26@u_strToJav
; Line 1597
	jmp	$LN33@u_strToJav
$LN19@u_strToJav:
; Line 1599
	mov	eax, DWORD PTR _src$[ebp]
	cmp	eax, DWORD PTR _pSrcLimit$[ebp]
	jae	$LN7@u_strToJav
; Line 1600
	mov	eax, DWORD PTR _src$[ebp]
	movzx	ecx, WORD PTR [eax]
	mov	DWORD PTR _ch$[ebp], ecx
	mov	edx, DWORD PTR _src$[ebp]
	add	edx, 2
	mov	DWORD PTR _src$[ebp], edx
; Line 1601
	cmp	DWORD PTR _ch$[ebp], 127		; 0000007fH
	ja	SHORT $LN17@u_strToJav
	cmp	DWORD PTR _ch$[ebp], 0
	je	SHORT $LN17@u_strToJav
; Line 1602
	mov	eax, DWORD PTR _pDest$[ebp]
	cmp	eax, DWORD PTR _pDestLimit$[ebp]
	jae	SHORT $LN16@u_strToJav
; Line 1603
	mov	eax, DWORD PTR _pDest$[ebp]
	mov	cl, BYTE PTR _ch$[ebp]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _pDest$[ebp]
	add	edx, 1
	mov	DWORD PTR _pDest$[ebp], edx
; Line 1604
	jmp	SHORT $LN15@u_strToJav
$LN16@u_strToJav:
; Line 1605
	mov	DWORD PTR _reqLength$[ebp], 1
; Line 1606
	jmp	$LN7@u_strToJav
$LN15@u_strToJav:
; Line 1607
	jmp	$LN14@u_strToJav
$LN17@u_strToJav:
; Line 1608
	cmp	DWORD PTR _ch$[ebp], 2047		; 000007ffH
	ja	SHORT $LN13@u_strToJav
; Line 1609
	mov	eax, DWORD PTR _pDestLimit$[ebp]
	sub	eax, DWORD PTR _pDest$[ebp]
	cmp	eax, 2
	jl	SHORT $LN12@u_strToJav
; Line 1610
	mov	eax, DWORD PTR _ch$[ebp]
	shr	eax, 6
	or	eax, 192				; 000000c0H
	mov	ecx, DWORD PTR _pDest$[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _pDest$[ebp]
	add	edx, 1
	mov	DWORD PTR _pDest$[ebp], edx
; Line 1611
	mov	eax, DWORD PTR _ch$[ebp]
	and	eax, 63					; 0000003fH
	or	eax, 128				; 00000080H
	mov	ecx, DWORD PTR _pDest$[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _pDest$[ebp]
	add	edx, 1
	mov	DWORD PTR _pDest$[ebp], edx
; Line 1612
	jmp	SHORT $LN11@u_strToJav
$LN12@u_strToJav:
; Line 1613
	mov	DWORD PTR _reqLength$[ebp], 2
; Line 1614
	jmp	SHORT $LN7@u_strToJav
$LN11@u_strToJav:
; Line 1616
	jmp	SHORT $LN14@u_strToJav
$LN13@u_strToJav:
; Line 1617
	mov	eax, DWORD PTR _pDestLimit$[ebp]
	sub	eax, DWORD PTR _pDest$[ebp]
	cmp	eax, 3
	jl	SHORT $LN9@u_strToJav
; Line 1618
	mov	eax, DWORD PTR _ch$[ebp]
	shr	eax, 12					; 0000000cH
	or	eax, 224				; 000000e0H
	mov	ecx, DWORD PTR _pDest$[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _pDest$[ebp]
	add	edx, 1
	mov	DWORD PTR _pDest$[ebp], edx
; Line 1619
	mov	eax, DWORD PTR _ch$[ebp]
	shr	eax, 6
	and	eax, 63					; 0000003fH
	or	eax, 128				; 00000080H
	mov	ecx, DWORD PTR _pDest$[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _pDest$[ebp]
	add	edx, 1
	mov	DWORD PTR _pDest$[ebp], edx
; Line 1620
	mov	eax, DWORD PTR _ch$[ebp]
	and	eax, 63					; 0000003fH
	or	eax, 128				; 00000080H
	mov	ecx, DWORD PTR _pDest$[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _pDest$[ebp]
	add	edx, 1
	mov	DWORD PTR _pDest$[ebp], edx
; Line 1621
	jmp	SHORT $LN14@u_strToJav
$LN9@u_strToJav:
; Line 1622
	mov	DWORD PTR _reqLength$[ebp], 3
; Line 1623
	jmp	SHORT $LN7@u_strToJav
$LN14@u_strToJav:
; Line 1626
	jmp	$LN19@u_strToJav
$LN7@u_strToJav:
; Line 1627
	mov	eax, DWORD PTR _src$[ebp]
	cmp	eax, DWORD PTR _pSrcLimit$[ebp]
	jae	SHORT $LN6@u_strToJav
; Line 1628
	mov	eax, DWORD PTR _src$[ebp]
	movzx	ecx, WORD PTR [eax]
	mov	DWORD PTR _ch$[ebp], ecx
	mov	edx, DWORD PTR _src$[ebp]
	add	edx, 2
	mov	DWORD PTR _src$[ebp], edx
; Line 1629
	cmp	DWORD PTR _ch$[ebp], 127		; 0000007fH
	ja	SHORT $LN5@u_strToJav
	cmp	DWORD PTR _ch$[ebp], 0
	je	SHORT $LN5@u_strToJav
; Line 1630
	mov	eax, DWORD PTR _reqLength$[ebp]
	add	eax, 1
	mov	DWORD PTR _reqLength$[ebp], eax
	jmp	SHORT $LN4@u_strToJav
$LN5@u_strToJav:
; Line 1631
	cmp	DWORD PTR _ch$[ebp], 2047		; 000007ffH
	ja	SHORT $LN3@u_strToJav
; Line 1632
	mov	eax, DWORD PTR _reqLength$[ebp]
	add	eax, 2
	mov	DWORD PTR _reqLength$[ebp], eax
; Line 1633
	jmp	SHORT $LN4@u_strToJav
$LN3@u_strToJav:
; Line 1634
	mov	eax, DWORD PTR _reqLength$[ebp]
	add	eax, 3
	mov	DWORD PTR _reqLength$[ebp], eax
$LN4@u_strToJav:
; Line 1636
	jmp	SHORT $LN7@u_strToJav
$LN6@u_strToJav:
; Line 1638
	mov	eax, DWORD PTR _pDest$[ebp]
	sub	eax, DWORD PTR _dest$[ebp]
	add	eax, DWORD PTR _reqLength$[ebp]
	mov	DWORD PTR _reqLength$[ebp], eax
; Line 1639
	cmp	DWORD PTR _pDestLength$[ebp], 0
	je	SHORT $LN1@u_strToJav
; Line 1640
	mov	eax, DWORD PTR _pDestLength$[ebp]
	mov	ecx, DWORD PTR _reqLength$[ebp]
	mov	DWORD PTR [eax], ecx
$LN1@u_strToJav:
; Line 1644
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _reqLength$[ebp]
	push	ecx
	mov	edx, DWORD PTR _destCapacity$[ebp]
	push	edx
	mov	eax, DWORD PTR _dest$[ebp]
	push	eax
	call	_u_terminateChars_56
	add	esp, 16					; 00000010H
; Line 1645
	mov	eax, DWORD PTR _dest$[ebp]
$LN44@u_strToJav:
; Line 1646
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 292				; 00000124H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_u_strToJavaModifiedUTF8_56 ENDP
_TEXT	ENDS
END
