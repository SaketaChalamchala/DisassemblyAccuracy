; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\mozilla\intl\icu\source\common\utrie2_builder.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	??2@YAPAXI@Z					; operator new
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File d:\mozilla\intl\icu\source\common\unicode\utypes.h
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT ??2@YAPAXI@Z
_TEXT	SEGMENT
_q$ = -8						; size = 4
___formal$ = 8						; size = 4
??2@YAPAXI@Z PROC					; operator new, COMDAT
; Line 411
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 412
	mov	DWORD PTR _q$[ebp], 0
; Line 413
	mov	eax, DWORD PTR _q$[ebp]
	mov	BYTE PTR [eax], 5
; Line 414
	mov	eax, DWORD PTR _q$[ebp]
; Line 415
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??2@YAPAXI@Z ENDP					; operator new
_TEXT	ENDS
PUBLIC	??3@YAXPAX@Z					; operator delete
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??3@YAXPAX@Z
_TEXT	SEGMENT
_q$ = -8						; size = 4
___formal$ = 8						; size = 4
??3@YAXPAX@Z PROC					; operator delete, COMDAT
; Line 439
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 440
	mov	DWORD PTR _q$[ebp], 0
; Line 441
	mov	eax, DWORD PTR _q$[ebp]
	mov	BYTE PTR [eax], 5
; Line 442
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??3@YAXPAX@Z ENDP					; operator delete
_TEXT	ENDS
PUBLIC	??2UMemory@icu_56@@SAPAXIPAX@Z			; icu_56::UMemory::operator new
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??2UMemory@icu_56@@SAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_ptr$ = 12						; size = 4
??2UMemory@icu_56@@SAPAXIPAX@Z PROC			; icu_56::UMemory::operator new, COMDAT
; File d:\mozilla\intl\icu\source\common\unicode\uobject.h
; Line 161
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR _ptr$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??2UMemory@icu_56@@SAPAXIPAX@Z ENDP			; icu_56::UMemory::operator new
_TEXT	ENDS
PUBLIC	??3UMemory@icu_56@@SAXPAX0@Z			; icu_56::UMemory::operator delete
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??3UMemory@icu_56@@SAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3UMemory@icu_56@@SAXPAX0@Z PROC			; icu_56::UMemory::operator delete, COMDAT
; Line 168
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??3UMemory@icu_56@@SAXPAX0@Z ENDP			; icu_56::UMemory::operator delete
_TEXT	ENDS
PUBLIC	??4UMemory@icu_56@@QAEAAV01@ABV01@@Z		; icu_56::UMemory::operator=
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??4UMemory@icu_56@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___that$ = 8						; size = 4
??4UMemory@icu_56@@QAEAAV01@ABV01@@Z PROC		; icu_56::UMemory::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4UMemory@icu_56@@QAEAAV01@ABV01@@Z ENDP		; icu_56::UMemory::operator=
_TEXT	ENDS
PUBLIC	??_7UObject@icu_56@@6B@				; icu_56::UObject::`vftable'
PUBLIC	??0UObject@icu_56@@QAE@XZ			; icu_56::UObject::UObject
PUBLIC	??_R4UObject@icu_56@@6B@			; icu_56::UObject::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVUObject@icu_56@@@8			; icu_56::UObject `RTTI Type Descriptor'
PUBLIC	??_R3UObject@icu_56@@8				; icu_56::UObject::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2UObject@icu_56@@8				; icu_56::UObject::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@UObject@icu_56@@8			; icu_56::UObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R13?0A@EA@UMemory@icu_56@@8			; icu_56::UMemory::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	??_R0?AVUMemory@icu_56@@@8			; icu_56::UMemory `RTTI Type Descriptor'
PUBLIC	??_R3UMemory@icu_56@@8				; icu_56::UMemory::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2UMemory@icu_56@@8				; icu_56::UMemory::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@UMemory@icu_56@@8			; icu_56::UMemory::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_EUObject@icu_56@@UAEPAXI@Z			; icu_56::UObject::`vector deleting destructor'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?getDynamicClassID@UObject@icu_56@@UBEPAXXZ:PROC ; icu_56::UObject::getDynamicClassID
;	COMDAT ??_R1A@?0A@EA@UMemory@icu_56@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@UMemory@icu_56@@8 DD FLAT:??_R0?AVUMemory@icu_56@@@8 ; icu_56::UMemory::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3UMemory@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_R2UMemory@icu_56@@8
rdata$r	SEGMENT
??_R2UMemory@icu_56@@8 DD FLAT:??_R1A@?0A@EA@UMemory@icu_56@@8 ; icu_56::UMemory::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3UMemory@icu_56@@8
rdata$r	SEGMENT
??_R3UMemory@icu_56@@8 DD 00H				; icu_56::UMemory::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2UMemory@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVUMemory@icu_56@@@8
_DATA	SEGMENT
??_R0?AVUMemory@icu_56@@@8 DD FLAT:??_7type_info@@6B@	; icu_56::UMemory `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVUMemory@icu_56@@', 00H
_DATA	ENDS
;	COMDAT ??_R13?0A@EA@UMemory@icu_56@@8
rdata$r	SEGMENT
??_R13?0A@EA@UMemory@icu_56@@8 DD FLAT:??_R0?AVUMemory@icu_56@@@8 ; icu_56::UMemory::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	00H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3UMemory@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@UObject@icu_56@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@UObject@icu_56@@8 DD FLAT:??_R0?AVUObject@icu_56@@@8 ; icu_56::UObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3UObject@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_R2UObject@icu_56@@8
rdata$r	SEGMENT
??_R2UObject@icu_56@@8 DD FLAT:??_R1A@?0A@EA@UObject@icu_56@@8 ; icu_56::UObject::`RTTI Base Class Array'
	DD	FLAT:??_R13?0A@EA@UMemory@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_R3UObject@icu_56@@8
rdata$r	SEGMENT
??_R3UObject@icu_56@@8 DD 00H				; icu_56::UObject::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2UObject@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVUObject@icu_56@@@8
_DATA	SEGMENT
??_R0?AVUObject@icu_56@@@8 DD FLAT:??_7type_info@@6B@	; icu_56::UObject `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVUObject@icu_56@@', 00H
_DATA	ENDS
;	COMDAT ??_R4UObject@icu_56@@6B@
rdata$r	SEGMENT
??_R4UObject@icu_56@@6B@ DD 00H				; icu_56::UObject::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVUObject@icu_56@@@8
	DD	FLAT:??_R3UObject@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_7UObject@icu_56@@6B@
CONST	SEGMENT
??_7UObject@icu_56@@6B@ DD FLAT:??_R4UObject@icu_56@@6B@ ; icu_56::UObject::`vftable'
	DD	FLAT:??_EUObject@icu_56@@UAEPAXI@Z
	DD	FLAT:?getDynamicClassID@UObject@icu_56@@UBEPAXXZ
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ??0UObject@icu_56@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0UObject@icu_56@@QAE@XZ PROC				; icu_56::UObject::UObject, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7UObject@icu_56@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0UObject@icu_56@@QAE@XZ ENDP				; icu_56::UObject::UObject
_TEXT	ENDS
PUBLIC	??0UObject@icu_56@@QAE@ABV01@@Z			; icu_56::UObject::UObject
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0UObject@icu_56@@QAE@ABV01@@Z
_TEXT	SEGMENT
tv68 = -208						; size = 4
_this$ = -8						; size = 4
___that$ = 8						; size = 4
??0UObject@icu_56@@QAE@ABV01@@Z PROC			; icu_56::UObject::UObject, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	cmp	DWORD PTR ___that$[ebp], 0
	je	SHORT $LN3@UObject
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 4
	mov	DWORD PTR tv68[ebp], eax
	jmp	SHORT $LN4@UObject
$LN3@UObject:
	mov	DWORD PTR tv68[ebp], 0
$LN4@UObject:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7UObject@icu_56@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0UObject@icu_56@@QAE@ABV01@@Z ENDP			; icu_56::UObject::UObject
_TEXT	ENDS
PUBLIC	??4UObject@icu_56@@QAEAAV01@ABV01@@Z		; icu_56::UObject::operator=
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??4UObject@icu_56@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___that$ = 8						; size = 4
??4UObject@icu_56@@QAEAAV01@ABV01@@Z PROC		; icu_56::UObject::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4UObject@icu_56@@QAEAAV01@ABV01@@Z ENDP		; icu_56::UObject::operator=
_TEXT	ENDS
PUBLIC	??_GUObject@icu_56@@UAEPAXI@Z			; icu_56::UObject::`scalar deleting destructor'
EXTRN	??3UMemory@icu_56@@SAXPAX@Z:PROC		; icu_56::UMemory::operator delete
EXTRN	??1UObject@icu_56@@UAE@XZ:PROC			; icu_56::UObject::~UObject
EXTRN	__RTC_CheckEsp:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GUObject@icu_56@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_GUObject@icu_56@@UAEPAXI@Z PROC			; icu_56::UObject::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1UObject@icu_56@@UAE@XZ		; icu_56::UObject::~UObject
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3UMemory@icu_56@@SAXPAX@Z		; icu_56::UMemory::operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GUObject@icu_56@@UAEPAXI@Z ENDP			; icu_56::UObject::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	??_VUMemory@icu_56@@SAXPAX@Z:PROC		; icu_56::UMemory::operator delete[]
EXTRN	??_M@YGXPAXIHP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_EUObject@icu_56@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_EUObject@icu_56@@UAEPAXI@Z PROC			; icu_56::UObject::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector
	push	OFFSET ??1UObject@icu_56@@UAE@XZ	; icu_56::UObject::~UObject
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	push	ecx
	push	4
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@vector
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	push	eax
	call	??_VUMemory@icu_56@@SAXPAX@Z		; icu_56::UMemory::operator delete[]
	add	esp, 4
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN3@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1UObject@icu_56@@UAE@XZ		; icu_56::UObject::~UObject
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3UMemory@icu_56@@SAXPAX@Z		; icu_56::UMemory::operator delete
	add	esp, 4
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_EUObject@icu_56@@UAEPAXI@Z ENDP			; icu_56::UObject::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	??0Mutex@icu_56@@QAE@PAUUMutex@@@Z		; icu_56::Mutex::Mutex
PUBLIC	??_FMutex@icu_56@@QAEXXZ			; icu_56::Mutex::`default constructor closure'
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_FMutex@icu_56@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??_FMutex@icu_56@@QAEXXZ PROC				; icu_56::Mutex::`default constructor closure', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Mutex@icu_56@@QAE@PAUUMutex@@@Z	; icu_56::Mutex::Mutex
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??_FMutex@icu_56@@QAEXXZ ENDP				; icu_56::Mutex::`default constructor closure'
_TEXT	ENDS
EXTRN	_umtx_lock_56:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0Mutex@icu_56@@QAE@PAUUMutex@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_mutex$ = 8						; size = 4
??0Mutex@icu_56@@QAE@PAUUMutex@@@Z PROC			; icu_56::Mutex::Mutex, COMDAT
; _this$ = ecx
; File d:\mozilla\intl\icu\source\common\mutex.h
; Line 65
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _mutex$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 66
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_umtx_lock_56
	add	esp, 4
; Line 67
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0Mutex@icu_56@@QAE@PAUUMutex@@@Z ENDP			; icu_56::Mutex::Mutex
_TEXT	ENDS
PUBLIC	??1Mutex@icu_56@@QAE@XZ				; icu_56::Mutex::~Mutex
EXTRN	_umtx_unlock_56:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1Mutex@icu_56@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1Mutex@icu_56@@QAE@XZ PROC				; icu_56::Mutex::~Mutex, COMDAT
; _this$ = ecx
; Line 70
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 71
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_umtx_unlock_56
	add	esp, 4
; Line 72
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1Mutex@icu_56@@QAE@XZ ENDP				; icu_56::Mutex::~Mutex
_TEXT	ENDS
PUBLIC	_utrie2_set32_56
PUBLIC	_utrie2_open_56
EXTRN	_memset:PROC
EXTRN	_uprv_free_56:PROC
EXTRN	_uprv_malloc_56:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _utrie2_open_56
_TEXT	SEGMENT
_j$ = -56						; size = 4
_i$ = -44						; size = 4
_data$ = -32						; size = 4
_newTrie$ = -20						; size = 4
_trie$ = -8						; size = 4
_initialValue$ = 8					; size = 4
_errorValue$ = 12					; size = 4
_pErrorCode$ = 16					; size = 4
_utrie2_open_56 PROC					; COMDAT
; File d:\mozilla\intl\icu\source\common\utrie2_builder.cpp
; Line 107
	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 113
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN39@utrie2_ope
; Line 114
	xor	eax, eax
	jmp	$LN40@utrie2_ope
$LN39@utrie2_ope:
; Line 117
	push	56					; 00000038H
	call	_uprv_malloc_56
	add	esp, 4
	mov	DWORD PTR _trie$[ebp], eax
; Line 118
	push	283580					; 000453bcH
	call	_uprv_malloc_56
	add	esp, 4
	mov	DWORD PTR _newTrie$[ebp], eax
; Line 119
	push	65536					; 00010000H
	call	_uprv_malloc_56
	add	esp, 4
	mov	DWORD PTR _data$[ebp], eax
; Line 120
	cmp	DWORD PTR _trie$[ebp], 0
	je	SHORT $LN37@utrie2_ope
	cmp	DWORD PTR _newTrie$[ebp], 0
	je	SHORT $LN37@utrie2_ope
	cmp	DWORD PTR _data$[ebp], 0
	jne	SHORT $LN38@utrie2_ope
$LN37@utrie2_ope:
; Line 121
	mov	eax, DWORD PTR _trie$[ebp]
	push	eax
	call	_uprv_free_56
	add	esp, 4
; Line 122
	mov	eax, DWORD PTR _newTrie$[ebp]
	push	eax
	call	_uprv_free_56
	add	esp, 4
; Line 123
	mov	eax, DWORD PTR _data$[ebp]
	push	eax
	call	_uprv_free_56
	add	esp, 4
; Line 124
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 7
; Line 125
	xor	eax, eax
	jmp	$LN40@utrie2_ope
$LN38@utrie2_ope:
; Line 128
	push	56					; 00000038H
	push	0
	mov	eax, DWORD PTR _trie$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
; Line 129
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR _initialValue$[ebp]
	mov	DWORD PTR [eax+24], ecx
; Line 130
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR _errorValue$[ebp]
	mov	DWORD PTR [eax+28], ecx
; Line 131
	mov	eax, DWORD PTR _trie$[ebp]
	mov	DWORD PTR [eax+32], 1114112		; 00110000H
; Line 132
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR _newTrie$[ebp]
	mov	DWORD PTR [eax+52], ecx
; Line 134
	mov	eax, DWORD PTR _newTrie$[ebp]
	mov	ecx, DWORD PTR _data$[ebp]
	mov	DWORD PTR [eax+144128], ecx
; Line 135
	mov	eax, DWORD PTR _newTrie$[ebp]
	mov	DWORD PTR [eax+144144], 16384		; 00004000H
; Line 136
	mov	eax, DWORD PTR _newTrie$[ebp]
	mov	ecx, DWORD PTR _initialValue$[ebp]
	mov	DWORD PTR [eax+144132], ecx
; Line 137
	mov	eax, DWORD PTR _newTrie$[ebp]
	mov	ecx, DWORD PTR _errorValue$[ebp]
	mov	DWORD PTR [eax+144136], ecx
; Line 138
	mov	eax, DWORD PTR _newTrie$[ebp]
	mov	DWORD PTR [eax+144164], 1114112		; 00110000H
; Line 139
	mov	eax, DWORD PTR _newTrie$[ebp]
	mov	DWORD PTR [eax+144152], 0
; Line 140
	mov	eax, DWORD PTR _newTrie$[ebp]
	mov	BYTE PTR [eax+144168], 0
; Line 148
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN36@utrie2_ope
$LN35@utrie2_ope:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN36@utrie2_ope:
	cmp	DWORD PTR _i$[ebp], 128			; 00000080H
	jge	SHORT $LN34@utrie2_ope
; Line 149
	mov	eax, DWORD PTR _newTrie$[ebp]
	mov	ecx, DWORD PTR [eax+144128]
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _initialValue$[ebp]
	mov	DWORD PTR [ecx+edx*4], eax
; Line 150
	jmp	SHORT $LN35@utrie2_ope
$LN34@utrie2_ope:
; Line 151
	jmp	SHORT $LN33@utrie2_ope
$LN32@utrie2_ope:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN33@utrie2_ope:
	cmp	DWORD PTR _i$[ebp], 192			; 000000c0H
	jge	SHORT $LN31@utrie2_ope
; Line 152
	mov	eax, DWORD PTR _newTrie$[ebp]
	mov	ecx, DWORD PTR [eax+144128]
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _errorValue$[ebp]
	mov	DWORD PTR [ecx+edx*4], eax
; Line 153
	jmp	SHORT $LN32@utrie2_ope
$LN31@utrie2_ope:
; Line 154
	mov	DWORD PTR _i$[ebp], 192			; 000000c0H
	jmp	SHORT $LN30@utrie2_ope
$LN29@utrie2_ope:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN30@utrie2_ope:
	cmp	DWORD PTR _i$[ebp], 256			; 00000100H
	jge	SHORT $LN28@utrie2_ope
; Line 155
	mov	eax, DWORD PTR _newTrie$[ebp]
	mov	ecx, DWORD PTR [eax+144128]
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _initialValue$[ebp]
	mov	DWORD PTR [ecx+edx*4], eax
; Line 156
	jmp	SHORT $LN29@utrie2_ope
$LN28@utrie2_ope:
; Line 157
	mov	eax, DWORD PTR _newTrie$[ebp]
	mov	DWORD PTR [eax+144160], 192		; 000000c0H
; Line 158
	mov	eax, DWORD PTR _newTrie$[ebp]
	mov	DWORD PTR [eax+144148], 256		; 00000100H
; Line 161
	mov	DWORD PTR _i$[ebp], 0
	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN27@utrie2_ope
$LN26@utrie2_ope:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 32					; 00000020H
	mov	DWORD PTR _j$[ebp], ecx
$LN27@utrie2_ope:
	cmp	DWORD PTR _j$[ebp], 128			; 00000080H
	jge	SHORT $LN25@utrie2_ope
; Line 162
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _newTrie$[ebp]
	mov	edx, DWORD PTR _j$[ebp]
	mov	DWORD PTR [ecx+eax*4+2176], edx
; Line 163
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _newTrie$[ebp]
	mov	DWORD PTR [ecx+eax*4+144172], 1
; Line 164
	jmp	SHORT $LN26@utrie2_ope
$LN25@utrie2_ope:
; Line 166
	jmp	SHORT $LN24@utrie2_ope
$LN23@utrie2_ope:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 32					; 00000020H
	mov	DWORD PTR _j$[ebp], ecx
$LN24@utrie2_ope:
	cmp	DWORD PTR _j$[ebp], 192			; 000000c0H
	jge	SHORT $LN22@utrie2_ope
; Line 167
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _newTrie$[ebp]
	mov	DWORD PTR [ecx+eax*4+144172], 0
; Line 168
	jmp	SHORT $LN23@utrie2_ope
$LN22@utrie2_ope:
; Line 179
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _newTrie$[ebp]
	mov	DWORD PTR [ecx+eax*4+144172], 34845	; 0000881dH
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
; Line 180
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 32					; 00000020H
	mov	DWORD PTR _j$[ebp], eax
	jmp	SHORT $LN21@utrie2_ope
$LN20@utrie2_ope:
; Line 181
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 32					; 00000020H
	mov	DWORD PTR _j$[ebp], ecx
$LN21@utrie2_ope:
	cmp	DWORD PTR _j$[ebp], 256			; 00000100H
	jge	SHORT $LN19@utrie2_ope
; Line 182
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _newTrie$[ebp]
	mov	DWORD PTR [ecx+eax*4+144172], 0
; Line 183
	jmp	SHORT $LN20@utrie2_ope
$LN19@utrie2_ope:
; Line 189
	mov	DWORD PTR _i$[ebp], 4
	jmp	SHORT $LN18@utrie2_ope
$LN17@utrie2_ope:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN18@utrie2_ope:
	cmp	DWORD PTR _i$[ebp], 2080		; 00000820H
	jge	SHORT $LN16@utrie2_ope
; Line 190
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _newTrie$[ebp]
	mov	DWORD PTR [ecx+eax*4+2176], 192		; 000000c0H
; Line 191
	jmp	SHORT $LN17@utrie2_ope
$LN16@utrie2_ope:
; Line 197
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN15@utrie2_ope
$LN14@utrie2_ope:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN15@utrie2_ope:
	cmp	DWORD PTR _i$[ebp], 576			; 00000240H
	jge	SHORT $LN13@utrie2_ope
; Line 198
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _newTrie$[ebp]
	mov	DWORD PTR [ecx+eax*4+10496], -1
; Line 199
	jmp	SHORT $LN14@utrie2_ope
$LN13@utrie2_ope:
; Line 202
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN12@utrie2_ope
$LN11@utrie2_ope:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN12@utrie2_ope:
	cmp	DWORD PTR _i$[ebp], 64			; 00000040H
	jge	SHORT $LN10@utrie2_ope
; Line 203
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _newTrie$[ebp]
	mov	DWORD PTR [ecx+eax*4+12800], 192	; 000000c0H
; Line 204
	jmp	SHORT $LN11@utrie2_ope
$LN10@utrie2_ope:
; Line 205
	mov	eax, DWORD PTR _newTrie$[ebp]
	mov	DWORD PTR [eax+144156], 2656		; 00000a60H
; Line 206
	mov	eax, DWORD PTR _newTrie$[ebp]
	mov	DWORD PTR [eax+144140], 2720		; 00000aa0H
; Line 209
	mov	DWORD PTR _i$[ebp], 0
	mov	DWORD PTR _j$[ebp], 0
; Line 210
	jmp	SHORT $LN9@utrie2_ope
$LN8@utrie2_ope:
; Line 212
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 64					; 00000040H
	mov	DWORD PTR _j$[ebp], ecx
$LN9@utrie2_ope:
	cmp	DWORD PTR _i$[ebp], 32			; 00000020H
	jge	SHORT $LN7@utrie2_ope
; Line 213
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _newTrie$[ebp]
	mov	edx, DWORD PTR _j$[ebp]
	mov	DWORD PTR [ecx+eax*4], edx
; Line 214
	jmp	SHORT $LN8@utrie2_ope
$LN7@utrie2_ope:
; Line 217
	jmp	SHORT $LN6@utrie2_ope
$LN5@utrie2_ope:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN6@utrie2_ope:
	cmp	DWORD PTR _i$[ebp], 544			; 00000220H
	jge	SHORT $LN4@utrie2_ope
; Line 218
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _newTrie$[ebp]
	mov	DWORD PTR [ecx+eax*4], 2656		; 00000a60H
; Line 219
	jmp	SHORT $LN5@utrie2_ope
$LN4@utrie2_ope:
; Line 226
	mov	DWORD PTR _i$[ebp], 128			; 00000080H
	jmp	SHORT $LN3@utrie2_ope
$LN2@utrie2_ope:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 32					; 00000020H
	mov	DWORD PTR _i$[ebp], eax
$LN3@utrie2_ope:
	cmp	DWORD PTR _i$[ebp], 2048		; 00000800H
	jge	SHORT $LN1@utrie2_ope
; Line 227
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _initialValue$[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	eax, DWORD PTR _trie$[ebp]
	push	eax
	call	_utrie2_set32_56
	add	esp, 16					; 00000010H
; Line 228
	jmp	SHORT $LN2@utrie2_ope
$LN1@utrie2_ope:
; Line 230
	mov	eax, DWORD PTR _trie$[ebp]
$LN40@utrie2_ope:
; Line 231
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_utrie2_open_56 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?U_FAILURE@@YACW4UErrorCode@@@Z
_TEXT	SEGMENT
_code$ = 8						; size = 4
?U_FAILURE@@YACW4UErrorCode@@@Z PROC			; U_FAILURE, COMDAT
; File d:\mozilla\intl\icu\source\common\unicode\utypes.h
; Line 705
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	cmp	DWORD PTR _code$[ebp], 0
	setg	al
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?U_FAILURE@@YACW4UErrorCode@@@Z ENDP			; U_FAILURE
_TEXT	ENDS
PUBLIC	_utrie2_clone_56
EXTRN	_memcpy:PROC
EXTRN	_uprv_checkValidMemory:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _utrie2_clone_56
_TEXT	SEGMENT
_trie$ = -8						; size = 4
_other$ = 8						; size = 4
_pErrorCode$ = 12					; size = 4
_utrie2_clone_56 PROC					; COMDAT
; File d:\mozilla\intl\icu\source\common\utrie2_builder.cpp
; Line 276
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 279
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN10@utrie2_clo
; Line 280
	xor	eax, eax
	jmp	$LN11@utrie2_clo
$LN10@utrie2_clo:
; Line 282
	cmp	DWORD PTR _other$[ebp], 0
	je	SHORT $LN8@utrie2_clo
	mov	eax, DWORD PTR _other$[ebp]
	cmp	DWORD PTR [eax+40], 0
	jne	SHORT $LN9@utrie2_clo
	mov	eax, DWORD PTR _other$[ebp]
	cmp	DWORD PTR [eax+52], 0
	jne	SHORT $LN9@utrie2_clo
$LN8@utrie2_clo:
; Line 283
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 1
; Line 284
	xor	eax, eax
	jmp	$LN11@utrie2_clo
$LN9@utrie2_clo:
; Line 287
	push	56					; 00000038H
	call	_uprv_malloc_56
	add	esp, 4
	mov	DWORD PTR _trie$[ebp], eax
; Line 288
	cmp	DWORD PTR _trie$[ebp], 0
	jne	SHORT $LN7@utrie2_clo
; Line 289
	xor	eax, eax
	jmp	$LN11@utrie2_clo
$LN7@utrie2_clo:
; Line 291
	push	1
	mov	eax, DWORD PTR _other$[ebp]
	push	eax
	call	_uprv_checkValidMemory
	add	esp, 8
	push	56					; 00000038H
	mov	ecx, DWORD PTR _other$[ebp]
	push	ecx
	mov	edx, DWORD PTR _trie$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 293
	mov	eax, DWORD PTR _other$[ebp]
	cmp	DWORD PTR [eax+40], 0
	je	$LN6@utrie2_clo
; Line 294
	mov	eax, DWORD PTR _other$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	push	ecx
	call	_uprv_malloc_56
	add	esp, 4
	mov	edx, DWORD PTR _trie$[ebp]
	mov	DWORD PTR [edx+40], eax
; Line 295
	mov	eax, DWORD PTR _trie$[ebp]
	cmp	DWORD PTR [eax+40], 0
	je	$LN5@utrie2_clo
; Line 296
	mov	eax, DWORD PTR _trie$[ebp]
	mov	BYTE PTR [eax+48], 1
; Line 297
	push	1
	mov	eax, DWORD PTR _other$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	call	_uprv_checkValidMemory
	add	esp, 8
	mov	edx, DWORD PTR _other$[ebp]
	mov	eax, DWORD PTR [edx+44]
	push	eax
	mov	ecx, DWORD PTR _other$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	push	edx
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 300
	mov	eax, DWORD PTR _other$[ebp]
	mov	ecx, DWORD PTR _other$[ebp]
	mov	edx, DWORD PTR [eax]
	sub	edx, DWORD PTR [ecx+40]
	sar	edx, 1
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	lea	edx, DWORD PTR [ecx+edx*2]
	mov	eax, DWORD PTR _trie$[ebp]
	mov	DWORD PTR [eax], edx
; Line 301
	mov	eax, DWORD PTR _other$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN4@utrie2_clo
; Line 302
	mov	eax, DWORD PTR _other$[ebp]
	mov	ecx, DWORD PTR _other$[ebp]
	mov	edx, DWORD PTR [eax+4]
	sub	edx, DWORD PTR [ecx+40]
	sar	edx, 1
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	lea	edx, DWORD PTR [ecx+edx*2]
	mov	eax, DWORD PTR _trie$[ebp]
	mov	DWORD PTR [eax+4], edx
$LN4@utrie2_clo:
; Line 304
	mov	eax, DWORD PTR _other$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN5@utrie2_clo
; Line 305
	mov	eax, DWORD PTR _other$[ebp]
	mov	ecx, DWORD PTR _other$[ebp]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR [ecx+40]
	sar	edx, 2
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	lea	edx, DWORD PTR [ecx+edx*4]
	mov	eax, DWORD PTR _trie$[ebp]
	mov	DWORD PTR [eax+8], edx
$LN5@utrie2_clo:
; Line 308
	jmp	SHORT $LN2@utrie2_clo
$LN6@utrie2_clo:
; Line 309
	mov	eax, DWORD PTR _other$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	push	ecx
	call	?cloneBuilder@@YAPAUUNewTrie2@@PBU1@@Z	; cloneBuilder
	add	esp, 4
	mov	edx, DWORD PTR _trie$[ebp]
	mov	DWORD PTR [edx+52], eax
$LN2@utrie2_clo:
; Line 312
	mov	eax, DWORD PTR _trie$[ebp]
	cmp	DWORD PTR [eax+40], 0
	jne	SHORT $LN1@utrie2_clo
	mov	eax, DWORD PTR _trie$[ebp]
	cmp	DWORD PTR [eax+52], 0
	jne	SHORT $LN1@utrie2_clo
; Line 313
	mov	eax, DWORD PTR _trie$[ebp]
	push	eax
	call	_uprv_free_56
	add	esp, 4
; Line 314
	mov	DWORD PTR _trie$[ebp], 0
$LN1@utrie2_clo:
; Line 316
	mov	eax, DWORD PTR _trie$[ebp]
$LN11@utrie2_clo:
; Line 317
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_utrie2_clone_56 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?cloneBuilder@@YAPAUUNewTrie2@@PBU1@@Z
_TEXT	SEGMENT
_trie$ = -8						; size = 4
_other$ = 8						; size = 4
?cloneBuilder@@YAPAUUNewTrie2@@PBU1@@Z PROC		; cloneBuilder, COMDAT
; Line 234
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 237
	push	283580					; 000453bcH
	call	_uprv_malloc_56
	add	esp, 4
	mov	DWORD PTR _trie$[ebp], eax
; Line 238
	cmp	DWORD PTR _trie$[ebp], 0
	jne	SHORT $LN4@cloneBuild
; Line 239
	xor	eax, eax
	jmp	$LN5@cloneBuild
$LN4@cloneBuild:
; Line 242
	mov	eax, DWORD PTR _other$[ebp]
	mov	ecx, DWORD PTR [eax+144144]
	shl	ecx, 2
	push	ecx
	call	_uprv_malloc_56
	add	esp, 4
	mov	edx, DWORD PTR _trie$[ebp]
	mov	DWORD PTR [edx+144128], eax
; Line 243
	mov	eax, DWORD PTR _trie$[ebp]
	cmp	DWORD PTR [eax+144128], 0
	jne	SHORT $LN3@cloneBuild
; Line 244
	mov	eax, DWORD PTR _trie$[ebp]
	push	eax
	call	_uprv_free_56
	add	esp, 4
; Line 245
	xor	eax, eax
	jmp	$LN5@cloneBuild
$LN3@cloneBuild:
; Line 247
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR _other$[ebp]
	mov	edx, DWORD PTR [ecx+144144]
	mov	DWORD PTR [eax+144144], edx
; Line 250
	push	1
	mov	eax, DWORD PTR _other$[ebp]
	push	eax
	call	_uprv_checkValidMemory
	add	esp, 8
	push	2176					; 00000880H
	mov	ecx, DWORD PTR _other$[ebp]
	push	ecx
	mov	edx, DWORD PTR _trie$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 251
	push	1
	mov	eax, DWORD PTR _other$[ebp]
	add	eax, 2176				; 00000880H
	push	eax
	call	_uprv_checkValidMemory
	add	esp, 8
	mov	ecx, DWORD PTR _other$[ebp]
	mov	edx, DWORD PTR [ecx+144140]
	shl	edx, 2
	push	edx
	mov	eax, DWORD PTR _other$[ebp]
	add	eax, 2176				; 00000880H
	push	eax
	mov	ecx, DWORD PTR _trie$[ebp]
	add	ecx, 2176				; 00000880H
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 252
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR _other$[ebp]
	mov	edx, DWORD PTR [ecx+144156]
	mov	DWORD PTR [eax+144156], edx
; Line 253
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR _other$[ebp]
	mov	edx, DWORD PTR [ecx+144140]
	mov	DWORD PTR [eax+144140], edx
; Line 255
	push	1
	mov	eax, DWORD PTR _other$[ebp]
	mov	ecx, DWORD PTR [eax+144128]
	push	ecx
	call	_uprv_checkValidMemory
	add	esp, 8
	mov	edx, DWORD PTR _other$[ebp]
	mov	eax, DWORD PTR [edx+144148]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR _other$[ebp]
	mov	edx, DWORD PTR [ecx+144128]
	push	edx
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR [eax+144128]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 256
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR _other$[ebp]
	mov	edx, DWORD PTR [ecx+144160]
	mov	DWORD PTR [eax+144160], edx
; Line 257
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR _other$[ebp]
	mov	edx, DWORD PTR [ecx+144148]
	mov	DWORD PTR [eax+144148], edx
; Line 260
	mov	eax, DWORD PTR _other$[ebp]
	movsx	ecx, BYTE PTR [eax+144168]
	test	ecx, ecx
	je	SHORT $LN2@cloneBuild
; Line 261
	mov	eax, DWORD PTR _trie$[ebp]
	mov	DWORD PTR [eax+144152], 0
; Line 262
	jmp	SHORT $LN1@cloneBuild
$LN2@cloneBuild:
; Line 263
	push	1
	mov	eax, DWORD PTR _other$[ebp]
	add	eax, 144172				; 0002332cH
	push	eax
	call	_uprv_checkValidMemory
	add	esp, 8
	mov	ecx, DWORD PTR _other$[ebp]
	mov	edx, DWORD PTR [ecx+144148]
	sar	edx, 5
	shl	edx, 2
	push	edx
	mov	eax, DWORD PTR _other$[ebp]
	add	eax, 144172				; 0002332cH
	push	eax
	mov	ecx, DWORD PTR _trie$[ebp]
	add	ecx, 144172				; 0002332cH
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 264
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR _other$[ebp]
	mov	edx, DWORD PTR [ecx+144152]
	mov	DWORD PTR [eax+144152], edx
$LN1@cloneBuild:
; Line 267
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR _other$[ebp]
	mov	edx, DWORD PTR [ecx+144132]
	mov	DWORD PTR [eax+144132], edx
; Line 268
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR _other$[ebp]
	mov	edx, DWORD PTR [ecx+144136]
	mov	DWORD PTR [eax+144136], edx
; Line 269
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR _other$[ebp]
	mov	edx, DWORD PTR [ecx+144164]
	mov	DWORD PTR [eax+144164], edx
; Line 270
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR _other$[ebp]
	mov	dl, BYTE PTR [ecx+144168]
	mov	BYTE PTR [eax+144168], dl
; Line 272
	mov	eax, DWORD PTR _trie$[ebp]
$LN5@cloneBuild:
; Line 273
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?cloneBuilder@@YAPAUUNewTrie2@@PBU1@@Z ENDP		; cloneBuilder
_TEXT	ENDS
PUBLIC	_utrie2_set32ForLeadSurrogateCodeUnit_56
PUBLIC	_utrie2_cloneAsThawed_56
EXTRN	_utrie2_close_56:PROC
EXTRN	_utrie2_enum_56:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _utrie2_cloneAsThawed_56
_TEXT	SEGMENT
_value$41569 = -40					; size = 4
_lead$ = -28						; size = 2
_context$ = -16						; size = 12
_other$ = 8						; size = 4
_pErrorCode$ = 12					; size = 4
_utrie2_cloneAsThawed_56 PROC				; COMDAT
; Line 364
	push	ebp
	mov	ebp, esp
	sub	esp, 236				; 000000ecH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-236]
	mov	ecx, 59					; 0000003bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 368
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN12@utrie2_clo@2
; Line 369
	xor	eax, eax
	jmp	$LN13@utrie2_clo@2
$LN12@utrie2_clo@2:
; Line 371
	cmp	DWORD PTR _other$[ebp], 0
	je	SHORT $LN10@utrie2_clo@2
	mov	eax, DWORD PTR _other$[ebp]
	cmp	DWORD PTR [eax+40], 0
	jne	SHORT $LN11@utrie2_clo@2
	mov	eax, DWORD PTR _other$[ebp]
	cmp	DWORD PTR [eax+52], 0
	jne	SHORT $LN11@utrie2_clo@2
$LN10@utrie2_clo@2:
; Line 372
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 1
; Line 373
	xor	eax, eax
	jmp	$LN13@utrie2_clo@2
$LN11@utrie2_clo@2:
; Line 375
	mov	eax, DWORD PTR _other$[ebp]
	cmp	DWORD PTR [eax+52], 0
	je	SHORT $LN9@utrie2_clo@2
	mov	eax, DWORD PTR _other$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	movsx	edx, BYTE PTR [ecx+144168]
	test	edx, edx
	jne	SHORT $LN9@utrie2_clo@2
; Line 376
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _other$[ebp]
	push	ecx
	call	_utrie2_clone_56
	add	esp, 8
	jmp	$LN13@utrie2_clo@2
$LN9@utrie2_clo@2:
; Line 380
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _other$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	push	edx
	mov	eax, DWORD PTR _other$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	call	_utrie2_open_56
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _context$[ebp], eax
; Line 381
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN8@utrie2_clo@2
; Line 382
	xor	eax, eax
	jmp	$LN13@utrie2_clo@2
$LN8@utrie2_clo@2:
; Line 384
	mov	BYTE PTR _context$[ebp+8], 0
; Line 385
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _context$[ebp+4], ecx
; Line 386
	lea	eax, DWORD PTR _context$[ebp]
	push	eax
	push	OFFSET ?copyEnumRange@@YACPBXHHI@Z	; copyEnumRange
	push	0
	mov	ecx, DWORD PTR _other$[ebp]
	push	ecx
	call	_utrie2_enum_56
	add	esp, 16					; 00000010H
; Line 387
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	ecx, DWORD PTR _context$[ebp+4]
	mov	DWORD PTR [eax], ecx
; Line 388
	mov	eax, 55296				; 0000d800H
	mov	WORD PTR _lead$[ebp], ax
	jmp	SHORT $LN7@utrie2_clo@2
$LN6@utrie2_clo@2:
	mov	ax, WORD PTR _lead$[ebp]
	add	ax, 1
	mov	WORD PTR _lead$[ebp], ax
$LN7@utrie2_clo@2:
	movzx	eax, WORD PTR _lead$[ebp]
	cmp	eax, 56320				; 0000dc00H
	jge	$LN5@utrie2_clo@2
; Line 390
	mov	eax, DWORD PTR _other$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN4@utrie2_clo@2
; Line 391
	movzx	eax, WORD PTR _lead$[ebp]
	sar	eax, 5
	mov	ecx, DWORD PTR _other$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, WORD PTR [edx+eax*2]
	movzx	ecx, WORD PTR _lead$[ebp]
	and	ecx, 31					; 0000001fH
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _other$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, WORD PTR [ecx+edx*2]
	mov	DWORD PTR _value$41569[ebp], edx
; Line 392
	jmp	SHORT $LN3@utrie2_clo@2
$LN4@utrie2_clo@2:
; Line 393
	movzx	eax, WORD PTR _lead$[ebp]
	sar	eax, 5
	mov	ecx, DWORD PTR _other$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, WORD PTR [edx+eax*2]
	movzx	ecx, WORD PTR _lead$[ebp]
	and	ecx, 31					; 0000001fH
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _other$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR _value$41569[ebp], edx
$LN3@utrie2_clo@2:
; Line 395
	mov	eax, DWORD PTR _other$[ebp]
	mov	ecx, DWORD PTR _value$41569[ebp]
	cmp	ecx, DWORD PTR [eax+24]
	je	SHORT $LN2@utrie2_clo@2
; Line 396
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _value$41569[ebp]
	push	ecx
	movzx	edx, WORD PTR _lead$[ebp]
	push	edx
	mov	eax, DWORD PTR _context$[ebp]
	push	eax
	call	_utrie2_set32ForLeadSurrogateCodeUnit_56
	add	esp, 16					; 00000010H
$LN2@utrie2_clo@2:
; Line 398
	jmp	$LN6@utrie2_clo@2
$LN5@utrie2_clo@2:
; Line 399
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN1@utrie2_clo@2
; Line 400
	mov	eax, DWORD PTR _context$[ebp]
	push	eax
	call	_utrie2_close_56
	add	esp, 4
; Line 401
	mov	DWORD PTR _context$[ebp], 0
$LN1@utrie2_clo@2:
; Line 403
	mov	eax, DWORD PTR _context$[ebp]
$LN13@utrie2_clo@2:
; Line 404
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN17@utrie2_clo@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 236				; 000000ecH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN17@utrie2_clo@2:
	DD	1
	DD	$LN16@utrie2_clo@2
$LN16@utrie2_clo@2:
	DD	-16					; fffffff0H
	DD	12					; 0000000cH
	DD	$LN15@utrie2_clo@2
$LN15@utrie2_clo@2:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	116					; 00000074H
	DB	0
_utrie2_cloneAsThawed_56 ENDP
_TEXT	ENDS
PUBLIC	_utrie2_setRange32_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?copyEnumRange@@YACPBXHHI@Z
_TEXT	SEGMENT
_nt$ = -8						; size = 4
_context$ = 8						; size = 4
_start$ = 12						; size = 4
_end$ = 16						; size = 4
_value$ = 20						; size = 4
?copyEnumRange@@YACPBXHHI@Z PROC			; copyEnumRange, COMDAT
; Line 326
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 327
	mov	eax, DWORD PTR _context$[ebp]
	mov	DWORD PTR _nt$[ebp], eax
; Line 328
	mov	eax, DWORD PTR _nt$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _value$[ebp]
	cmp	edx, DWORD PTR [ecx+24]
	je	SHORT $LN5@copyEnumRa
; Line 329
	mov	eax, DWORD PTR _nt$[ebp]
	movsx	ecx, BYTE PTR [eax+8]
	test	ecx, ecx
	je	SHORT $LN4@copyEnumRa
; Line 330
	mov	eax, DWORD PTR _end$[ebp]
	sub	eax, 1
	mov	DWORD PTR _end$[ebp], eax
$LN4@copyEnumRa:
; Line 332
	mov	eax, DWORD PTR _start$[ebp]
	cmp	eax, DWORD PTR _end$[ebp]
	jne	SHORT $LN3@copyEnumRa
; Line 333
	mov	eax, DWORD PTR _nt$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _value$[ebp]
	push	ecx
	mov	edx, DWORD PTR _start$[ebp]
	push	edx
	mov	eax, DWORD PTR _nt$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_utrie2_set32_56
	add	esp, 16					; 00000010H
; Line 334
	jmp	SHORT $LN2@copyEnumRa
$LN3@copyEnumRa:
; Line 335
	mov	eax, DWORD PTR _nt$[ebp]
	add	eax, 4
	push	eax
	push	1
	mov	ecx, DWORD PTR _value$[ebp]
	push	ecx
	mov	edx, DWORD PTR _end$[ebp]
	push	edx
	mov	eax, DWORD PTR _start$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nt$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_utrie2_setRange32_56
	add	esp, 24					; 00000018H
$LN2@copyEnumRa:
; Line 337
	mov	eax, DWORD PTR _nt$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	?U_SUCCESS@@YACW4UErrorCode@@@Z		; U_SUCCESS
	add	esp, 4
	jmp	SHORT $LN6@copyEnumRa
; Line 338
	jmp	SHORT $LN6@copyEnumRa
$LN5@copyEnumRa:
; Line 339
	mov	al, 1
$LN6@copyEnumRa:
; Line 341
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?copyEnumRange@@YACPBXHHI@Z ENDP			; copyEnumRange
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?U_SUCCESS@@YACW4UErrorCode@@@Z
_TEXT	SEGMENT
_code$ = 8						; size = 4
?U_SUCCESS@@YACW4UErrorCode@@@Z PROC			; U_SUCCESS, COMDAT
; File d:\mozilla\intl\icu\source\common\unicode\utypes.h
; Line 699
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	cmp	DWORD PTR _code$[ebp], 0
	setle	al
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?U_SUCCESS@@YACW4UErrorCode@@@Z ENDP			; U_SUCCESS
_TEXT	ENDS
PUBLIC	_utrie2_freeze_56
PUBLIC	_utrie2_fromUTrie_56
EXTRN	_utrie_enum_56:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _utrie2_fromUTrie_56
_TEXT	SEGMENT
_value$41589 = -40					; size = 4
_lead$ = -28						; size = 2
_context$ = -16						; size = 12
_trie1$ = 8						; size = 4
_errorValue$ = 12					; size = 4
_pErrorCode$ = 16					; size = 4
_utrie2_fromUTrie_56 PROC				; COMDAT
; File d:\mozilla\intl\icu\source\common\utrie2_builder.cpp
; Line 408
	push	ebp
	mov	ebp, esp
	sub	esp, 236				; 000000ecH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-236]
	mov	ecx, 59					; 0000003bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 412
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN11@utrie2_fro
; Line 413
	xor	eax, eax
	jmp	$LN12@utrie2_fro
$LN11@utrie2_fro:
; Line 415
	cmp	DWORD PTR _trie1$[ebp], 0
	jne	SHORT $LN10@utrie2_fro
; Line 416
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 1
; Line 417
	xor	eax, eax
	jmp	$LN12@utrie2_fro
$LN10@utrie2_fro:
; Line 419
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _errorValue$[ebp]
	push	ecx
	mov	edx, DWORD PTR _trie1$[ebp]
	mov	eax, DWORD PTR [edx+20]
	push	eax
	call	_utrie2_open_56
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _context$[ebp], eax
; Line 420
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN9@utrie2_fro
; Line 421
	xor	eax, eax
	jmp	$LN12@utrie2_fro
$LN9@utrie2_fro:
; Line 423
	mov	BYTE PTR _context$[ebp+8], 1
; Line 424
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _context$[ebp+4], ecx
; Line 425
	lea	eax, DWORD PTR _context$[ebp]
	push	eax
	push	OFFSET ?copyEnumRange@@YACPBXHHI@Z	; copyEnumRange
	push	0
	mov	ecx, DWORD PTR _trie1$[ebp]
	push	ecx
	call	_utrie_enum_56
	add	esp, 16					; 00000010H
; Line 426
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	ecx, DWORD PTR _context$[ebp+4]
	mov	DWORD PTR [eax], ecx
; Line 427
	mov	eax, 55296				; 0000d800H
	mov	WORD PTR _lead$[ebp], ax
	jmp	SHORT $LN8@utrie2_fro
$LN7@utrie2_fro:
	mov	ax, WORD PTR _lead$[ebp]
	add	ax, 1
	mov	WORD PTR _lead$[ebp], ax
$LN8@utrie2_fro:
	movzx	eax, WORD PTR _lead$[ebp]
	cmp	eax, 56320				; 0000dc00H
	jge	$LN6@utrie2_fro
; Line 429
	mov	eax, DWORD PTR _trie1$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN5@utrie2_fro
; Line 430
	movzx	eax, WORD PTR _lead$[ebp]
	sar	eax, 5
	mov	ecx, DWORD PTR _trie1$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, WORD PTR [edx+eax*2]
	movzx	ecx, WORD PTR _lead$[ebp]
	and	ecx, 31					; 0000001fH
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _trie1$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, WORD PTR [ecx+edx*2]
	mov	DWORD PTR _value$41589[ebp], edx
; Line 431
	jmp	SHORT $LN4@utrie2_fro
$LN5@utrie2_fro:
; Line 432
	movzx	eax, WORD PTR _lead$[ebp]
	sar	eax, 5
	mov	ecx, DWORD PTR _trie1$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, WORD PTR [edx+eax*2]
	movzx	ecx, WORD PTR _lead$[ebp]
	and	ecx, 31					; 0000001fH
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _trie1$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR _value$41589[ebp], edx
$LN4@utrie2_fro:
; Line 434
	mov	eax, DWORD PTR _trie1$[ebp]
	mov	ecx, DWORD PTR _value$41589[ebp]
	cmp	ecx, DWORD PTR [eax+20]
	je	SHORT $LN3@utrie2_fro
; Line 435
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _value$41589[ebp]
	push	ecx
	movzx	edx, WORD PTR _lead$[ebp]
	push	edx
	mov	eax, DWORD PTR _context$[ebp]
	push	eax
	call	_utrie2_set32ForLeadSurrogateCodeUnit_56
	add	esp, 16					; 00000010H
$LN3@utrie2_fro:
; Line 437
	jmp	$LN7@utrie2_fro
$LN6@utrie2_fro:
; Line 438
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_SUCCESS@@YACW4UErrorCode@@@Z		; U_SUCCESS
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN2@utrie2_fro
; Line 441
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _trie1$[ebp]
	xor	edx, edx
	cmp	DWORD PTR [ecx+4], 0
	setne	dl
	push	edx
	mov	eax, DWORD PTR _context$[ebp]
	push	eax
	call	_utrie2_freeze_56
	add	esp, 12					; 0000000cH
$LN2@utrie2_fro:
; Line 449
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN1@utrie2_fro
; Line 450
	mov	eax, DWORD PTR _context$[ebp]
	push	eax
	call	_utrie2_close_56
	add	esp, 4
; Line 451
	mov	DWORD PTR _context$[ebp], 0
$LN1@utrie2_fro:
; Line 453
	mov	eax, DWORD PTR _context$[ebp]
$LN12@utrie2_fro:
; Line 454
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN16@utrie2_fro
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 236				; 000000ecH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN16@utrie2_fro:
	DD	1
	DD	$LN15@utrie2_fro
$LN15@utrie2_fro:
	DD	-16					; fffffff0H
	DD	12					; 0000000cH
	DD	$LN14@utrie2_fro
$LN14@utrie2_fro:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	116					; 00000074H
	DB	0
_utrie2_fromUTrie_56 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _utrie2_set32_56
_TEXT	SEGMENT
_trie$ = 8						; size = 4
_c$ = 12						; size = 4
_value$ = 16						; size = 4
_pErrorCode$ = 20					; size = 4
_utrie2_set32_56 PROC					; COMDAT
; Line 634
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 635
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN2@utrie2_set
; Line 636
	jmp	SHORT $LN3@utrie2_set
$LN2@utrie2_set:
; Line 638
	cmp	DWORD PTR _c$[ebp], 1114111		; 0010ffffH
	jbe	SHORT $LN1@utrie2_set
; Line 639
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 1
; Line 640
	jmp	SHORT $LN3@utrie2_set
$LN1@utrie2_set:
; Line 642
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _value$[ebp]
	push	ecx
	push	1
	mov	edx, DWORD PTR _c$[ebp]
	push	edx
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	push	ecx
	call	?set32@@YAXPAUUNewTrie2@@HCIPAW4UErrorCode@@@Z ; set32
	add	esp, 20					; 00000014H
$LN3@utrie2_set:
; Line 643
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_utrie2_set32_56 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?set32@@YAXPAUUNewTrie2@@HCIPAW4UErrorCode@@@Z
_TEXT	SEGMENT
_block$ = -8						; size = 4
_trie$ = 8						; size = 4
_c$ = 12						; size = 4
_forLSCP$ = 16						; size = 1
_value$ = 20						; size = 4
_pErrorCode$ = 24					; size = 4
?set32@@YAXPAUUNewTrie2@@HCIPAW4UErrorCode@@@Z PROC	; set32, COMDAT
; Line 616
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 619
	cmp	DWORD PTR _trie$[ebp], 0
	je	SHORT $LN2@set32
	mov	eax, DWORD PTR _trie$[ebp]
	movsx	ecx, BYTE PTR [eax+144168]
	test	ecx, ecx
	je	SHORT $LN3@set32
$LN2@set32:
; Line 620
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 30			; 0000001eH
; Line 621
	jmp	SHORT $LN4@set32
$LN3@set32:
; Line 624
	movzx	eax, BYTE PTR _forLSCP$[ebp]
	push	eax
	mov	ecx, DWORD PTR _c$[ebp]
	push	ecx
	mov	edx, DWORD PTR _trie$[ebp]
	push	edx
	call	?getDataBlock@@YAHPAUUNewTrie2@@HC@Z	; getDataBlock
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _block$[ebp], eax
; Line 625
	cmp	DWORD PTR _block$[ebp], 0
	jge	SHORT $LN1@set32
; Line 626
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 7
; Line 627
	jmp	SHORT $LN4@set32
$LN1@set32:
; Line 630
	mov	eax, DWORD PTR _c$[ebp]
	and	eax, 31					; 0000001fH
	add	eax, DWORD PTR _block$[ebp]
	mov	ecx, DWORD PTR _trie$[ebp]
	mov	edx, DWORD PTR [ecx+144128]
	mov	ecx, DWORD PTR _value$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
$LN4@set32:
; Line 631
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?set32@@YAXPAUUNewTrie2@@HCIPAW4UErrorCode@@@Z ENDP	; set32
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?getDataBlock@@YAHPAUUNewTrie2@@HC@Z
_TEXT	SEGMENT
_newBlock$ = -32					; size = 4
_oldBlock$ = -20					; size = 4
_i2$ = -8						; size = 4
_trie$ = 8						; size = 4
_c$ = 12						; size = 4
_forLSCP$ = 16						; size = 1
?getDataBlock@@YAHPAUUNewTrie2@@HC@Z PROC		; getDataBlock, COMDAT
; Line 586
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 589
	movzx	eax, BYTE PTR _forLSCP$[ebp]
	push	eax
	mov	ecx, DWORD PTR _c$[ebp]
	push	ecx
	mov	edx, DWORD PTR _trie$[ebp]
	push	edx
	call	?getIndex2Block@@YAHPAUUNewTrie2@@HC@Z	; getIndex2Block
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _i2$[ebp], eax
; Line 590
	cmp	DWORD PTR _i2$[ebp], 0
	jge	SHORT $LN3@getDataBlo
; Line 591
	or	eax, -1
	jmp	SHORT $LN4@getDataBlo
$LN3@getDataBlo:
; Line 594
	mov	eax, DWORD PTR _c$[ebp]
	sar	eax, 5
	and	eax, 63					; 0000003fH
	add	eax, DWORD PTR _i2$[ebp]
	mov	DWORD PTR _i2$[ebp], eax
; Line 595
	mov	eax, DWORD PTR _i2$[ebp]
	mov	ecx, DWORD PTR _trie$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+2176]
	mov	DWORD PTR _oldBlock$[ebp], edx
; Line 596
	mov	eax, DWORD PTR _oldBlock$[ebp]
	push	eax
	mov	ecx, DWORD PTR _trie$[ebp]
	push	ecx
	call	?isWritableBlock@@YACPAUUNewTrie2@@H@Z	; isWritableBlock
	add	esp, 8
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN2@getDataBlo
; Line 597
	mov	eax, DWORD PTR _oldBlock$[ebp]
	jmp	SHORT $LN4@getDataBlo
$LN2@getDataBlo:
; Line 601
	mov	eax, DWORD PTR _oldBlock$[ebp]
	push	eax
	mov	ecx, DWORD PTR _trie$[ebp]
	push	ecx
	call	?allocDataBlock@@YAHPAUUNewTrie2@@H@Z	; allocDataBlock
	add	esp, 8
	mov	DWORD PTR _newBlock$[ebp], eax
; Line 602
	cmp	DWORD PTR _newBlock$[ebp], 0
	jge	SHORT $LN1@getDataBlo
; Line 604
	or	eax, -1
	jmp	SHORT $LN4@getDataBlo
$LN1@getDataBlo:
; Line 606
	mov	eax, DWORD PTR _newBlock$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i2$[ebp]
	push	ecx
	mov	edx, DWORD PTR _trie$[ebp]
	push	edx
	call	?setIndex2Entry@@YAXPAUUNewTrie2@@HH@Z	; setIndex2Entry
	add	esp, 12					; 0000000cH
; Line 607
	mov	eax, DWORD PTR _newBlock$[ebp]
$LN4@getDataBlo:
; Line 608
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?getDataBlock@@YAHPAUUNewTrie2@@HC@Z ENDP		; getDataBlock
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?getIndex2Block@@YAHPAUUNewTrie2@@HC@Z
_TEXT	SEGMENT
_i2$ = -20						; size = 4
_i1$ = -8						; size = 4
_trie$ = 8						; size = 4
_c$ = 12						; size = 4
_forLSCP$ = 16						; size = 1
?getIndex2Block@@YAHPAUUNewTrie2@@HC@Z PROC		; getIndex2Block, COMDAT
; Line 491
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 494
	mov	eax, DWORD PTR _c$[ebp]
	and	eax, -1024				; fffffc00H
	cmp	eax, 55296				; 0000d800H
	jne	SHORT $LN3@getIndex2B
	movsx	eax, BYTE PTR _forLSCP$[ebp]
	test	eax, eax
	je	SHORT $LN3@getIndex2B
; Line 495
	mov	eax, 2048				; 00000800H
	jmp	SHORT $LN4@getIndex2B
$LN3@getIndex2B:
; Line 498
	mov	eax, DWORD PTR _c$[ebp]
	sar	eax, 11					; 0000000bH
	mov	DWORD PTR _i1$[ebp], eax
; Line 499
	mov	eax, DWORD PTR _i1$[ebp]
	mov	ecx, DWORD PTR _trie$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _i2$[ebp], edx
; Line 500
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR _i2$[ebp]
	cmp	ecx, DWORD PTR [eax+144156]
	jne	SHORT $LN2@getIndex2B
; Line 501
	mov	eax, DWORD PTR _trie$[ebp]
	push	eax
	call	?allocIndex2Block@@YAHPAUUNewTrie2@@@Z	; allocIndex2Block
	add	esp, 4
	mov	DWORD PTR _i2$[ebp], eax
; Line 502
	cmp	DWORD PTR _i2$[ebp], 0
	jge	SHORT $LN1@getIndex2B
; Line 503
	or	eax, -1
	jmp	SHORT $LN4@getIndex2B
$LN1@getIndex2B:
; Line 505
	mov	eax, DWORD PTR _i1$[ebp]
	mov	ecx, DWORD PTR _trie$[ebp]
	mov	edx, DWORD PTR _i2$[ebp]
	mov	DWORD PTR [ecx+eax*4], edx
$LN2@getIndex2B:
; Line 507
	mov	eax, DWORD PTR _i2$[ebp]
$LN4@getIndex2B:
; Line 508
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?getIndex2Block@@YAHPAUUNewTrie2@@HC@Z ENDP		; getIndex2Block
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?allocIndex2Block@@YAHPAUUNewTrie2@@@Z
_TEXT	SEGMENT
_newTop$ = -20						; size = 4
_newBlock$ = -8						; size = 4
_trie$ = 8						; size = 4
?allocIndex2Block@@YAHPAUUNewTrie2@@@Z PROC		; allocIndex2Block, COMDAT
; Line 472
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 475
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR [eax+144140]
	mov	DWORD PTR _newBlock$[ebp], ecx
; Line 476
	mov	eax, DWORD PTR _newBlock$[ebp]
	add	eax, 64					; 00000040H
	mov	DWORD PTR _newTop$[ebp], eax
; Line 477
	cmp	DWORD PTR _newTop$[ebp], 35488		; 00008aa0H
	jle	SHORT $LN1@allocIndex
; Line 483
	or	eax, -1
	jmp	SHORT $LN2@allocIndex
$LN1@allocIndex:
; Line 485
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR _newTop$[ebp]
	mov	DWORD PTR [eax+144140], ecx
; Line 486
	push	1
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR [eax+144156]
	mov	edx, DWORD PTR _trie$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4+2176]
	push	eax
	call	_uprv_checkValidMemory
	add	esp, 8
	push	256					; 00000100H
	mov	ecx, DWORD PTR _trie$[ebp]
	mov	edx, DWORD PTR [ecx+144156]
	mov	eax, DWORD PTR _trie$[ebp]
	lea	ecx, DWORD PTR [eax+edx*4+2176]
	push	ecx
	mov	edx, DWORD PTR _newBlock$[ebp]
	mov	eax, DWORD PTR _trie$[ebp]
	lea	ecx, DWORD PTR [eax+edx*4+2176]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 487
	mov	eax, DWORD PTR _newBlock$[ebp]
$LN2@allocIndex:
; Line 488
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?allocIndex2Block@@YAHPAUUNewTrie2@@@Z ENDP		; allocIndex2Block
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?allocDataBlock@@YAHPAUUNewTrie2@@H@Z
_TEXT	SEGMENT
_data$41634 = -44					; size = 4
_capacity$41633 = -32					; size = 4
_newTop$ = -20						; size = 4
_newBlock$ = -8						; size = 4
_trie$ = 8						; size = 4
_copyBlock$ = 12					; size = 4
?allocDataBlock@@YAHPAUUNewTrie2@@H@Z PROC		; allocDataBlock, COMDAT
; Line 511
	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 514
	mov	eax, DWORD PTR _trie$[ebp]
	cmp	DWORD PTR [eax+144152], 0
	je	SHORT $LN8@allocDataB
; Line 516
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR [eax+144152]
	mov	DWORD PTR _newBlock$[ebp], ecx
; Line 517
	mov	eax, DWORD PTR _newBlock$[ebp]
	sar	eax, 5
	mov	ecx, DWORD PTR _trie$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+144172]
	neg	edx
	mov	eax, DWORD PTR _trie$[ebp]
	mov	DWORD PTR [eax+144152], edx
; Line 518
	jmp	$LN7@allocDataB
$LN8@allocDataB:
; Line 520
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR [eax+144148]
	mov	DWORD PTR _newBlock$[ebp], ecx
; Line 521
	mov	eax, DWORD PTR _newBlock$[ebp]
	add	eax, 32					; 00000020H
	mov	DWORD PTR _newTop$[ebp], eax
; Line 522
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR _newTop$[ebp]
	cmp	ecx, DWORD PTR [eax+144144]
	jle	$LN6@allocDataB
; Line 527
	mov	eax, DWORD PTR _trie$[ebp]
	cmp	DWORD PTR [eax+144144], 131072		; 00020000H
	jge	SHORT $LN5@allocDataB
; Line 528
	mov	DWORD PTR _capacity$41633[ebp], 131072	; 00020000H
	jmp	SHORT $LN4@allocDataB
$LN5@allocDataB:
; Line 529
	mov	eax, DWORD PTR _trie$[ebp]
	cmp	DWORD PTR [eax+144144], 1115264		; 00110480H
	jge	SHORT $LN3@allocDataB
; Line 530
	mov	DWORD PTR _capacity$41633[ebp], 1115264	; 00110480H
; Line 531
	jmp	SHORT $LN4@allocDataB
$LN3@allocDataB:
; Line 537
	or	eax, -1
	jmp	$LN9@allocDataB
$LN4@allocDataB:
; Line 539
	mov	eax, DWORD PTR _capacity$41633[ebp]
	shl	eax, 2
	push	eax
	call	_uprv_malloc_56
	add	esp, 4
	mov	DWORD PTR _data$41634[ebp], eax
; Line 540
	cmp	DWORD PTR _data$41634[ebp], 0
	jne	SHORT $LN1@allocDataB
; Line 541
	or	eax, -1
	jmp	$LN9@allocDataB
$LN1@allocDataB:
; Line 543
	push	1
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR [eax+144128]
	push	ecx
	call	_uprv_checkValidMemory
	add	esp, 8
	mov	edx, DWORD PTR _trie$[ebp]
	mov	eax, DWORD PTR [edx+144148]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR _trie$[ebp]
	mov	edx, DWORD PTR [ecx+144128]
	push	edx
	mov	eax, DWORD PTR _data$41634[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 544
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR [eax+144128]
	push	ecx
	call	_uprv_free_56
	add	esp, 4
; Line 545
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR _data$41634[ebp]
	mov	DWORD PTR [eax+144128], ecx
; Line 546
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR _capacity$41633[ebp]
	mov	DWORD PTR [eax+144144], ecx
$LN6@allocDataB:
; Line 548
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR _newTop$[ebp]
	mov	DWORD PTR [eax+144148], ecx
$LN7@allocDataB:
; Line 550
	push	1
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR [eax+144128]
	mov	edx, DWORD PTR _copyBlock$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	push	eax
	call	_uprv_checkValidMemory
	add	esp, 8
	push	128					; 00000080H
	mov	ecx, DWORD PTR _trie$[ebp]
	mov	edx, DWORD PTR [ecx+144128]
	mov	eax, DWORD PTR _copyBlock$[ebp]
	lea	ecx, DWORD PTR [edx+eax*4]
	push	ecx
	mov	edx, DWORD PTR _trie$[ebp]
	mov	eax, DWORD PTR [edx+144128]
	mov	ecx, DWORD PTR _newBlock$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 551
	mov	eax, DWORD PTR _newBlock$[ebp]
	sar	eax, 5
	mov	ecx, DWORD PTR _trie$[ebp]
	mov	DWORD PTR [ecx+eax*4+144172], 0
; Line 552
	mov	eax, DWORD PTR _newBlock$[ebp]
$LN9@allocDataB:
; Line 553
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?allocDataBlock@@YAHPAUUNewTrie2@@H@Z ENDP		; allocDataBlock
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?isWritableBlock@@YACPAUUNewTrie2@@H@Z
_TEXT	SEGMENT
tv71 = -193						; size = 1
_trie$ = 8						; size = 4
_block$ = 12						; size = 4
?isWritableBlock@@YACPAUUNewTrie2@@H@Z PROC		; isWritableBlock, COMDAT
; Line 564
	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 565
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR _block$[ebp]
	cmp	ecx, DWORD PTR [eax+144160]
	je	SHORT $LN3@isWritable
	mov	edx, DWORD PTR _block$[ebp]
	sar	edx, 5
	mov	eax, DWORD PTR _trie$[ebp]
	cmp	DWORD PTR [eax+edx*4+144172], 1
	jne	SHORT $LN3@isWritable
	mov	BYTE PTR tv71[ebp], 1
	jmp	SHORT $LN4@isWritable
$LN3@isWritable:
	mov	BYTE PTR tv71[ebp], 0
$LN4@isWritable:
	mov	al, BYTE PTR tv71[ebp]
; Line 566
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?isWritableBlock@@YACPAUUNewTrie2@@H@Z ENDP		; isWritableBlock
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?setIndex2Entry@@YAXPAUUNewTrie2@@HH@Z
_TEXT	SEGMENT
tv84 = -208						; size = 4
_oldBlock$ = -8						; size = 4
_trie$ = 8						; size = 4
_i2$ = 12						; size = 4
_block$ = 16						; size = 4
?setIndex2Entry@@YAXPAUUNewTrie2@@HH@Z PROC		; setIndex2Entry, COMDAT
; Line 569
	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 571
	mov	eax, DWORD PTR _block$[ebp]
	sar	eax, 5
	mov	ecx, DWORD PTR _trie$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+144172]
	add	edx, 1
	mov	eax, DWORD PTR _block$[ebp]
	sar	eax, 5
	mov	ecx, DWORD PTR _trie$[ebp]
	mov	DWORD PTR [ecx+eax*4+144172], edx
; Line 572
	mov	eax, DWORD PTR _i2$[ebp]
	mov	ecx, DWORD PTR _trie$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+2176]
	mov	DWORD PTR _oldBlock$[ebp], edx
; Line 573
	mov	eax, DWORD PTR _oldBlock$[ebp]
	sar	eax, 5
	mov	ecx, DWORD PTR _trie$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+144172]
	sub	edx, 1
	mov	DWORD PTR tv84[ebp], edx
	mov	eax, DWORD PTR _oldBlock$[ebp]
	sar	eax, 5
	mov	ecx, DWORD PTR _trie$[ebp]
	mov	edx, DWORD PTR tv84[ebp]
	mov	DWORD PTR [ecx+eax*4+144172], edx
	cmp	DWORD PTR tv84[ebp], 0
	jne	SHORT $LN1@setIndex2E
; Line 574
	mov	eax, DWORD PTR _oldBlock$[ebp]
	push	eax
	mov	ecx, DWORD PTR _trie$[ebp]
	push	ecx
	call	?releaseDataBlock@@YAXPAUUNewTrie2@@H@Z	; releaseDataBlock
	add	esp, 8
$LN1@setIndex2E:
; Line 576
	mov	eax, DWORD PTR _i2$[ebp]
	mov	ecx, DWORD PTR _trie$[ebp]
	mov	edx, DWORD PTR _block$[ebp]
	mov	DWORD PTR [ecx+eax*4+2176], edx
; Line 577
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?setIndex2Entry@@YAXPAUUNewTrie2@@HH@Z ENDP		; setIndex2Entry
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?releaseDataBlock@@YAXPAUUNewTrie2@@H@Z
_TEXT	SEGMENT
_trie$ = 8						; size = 4
_block$ = 12						; size = 4
?releaseDataBlock@@YAXPAUUNewTrie2@@H@Z PROC		; releaseDataBlock, COMDAT
; Line 557
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 559
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR [eax+144152]
	neg	ecx
	mov	edx, DWORD PTR _block$[ebp]
	sar	edx, 5
	mov	eax, DWORD PTR _trie$[ebp]
	mov	DWORD PTR [eax+edx*4+144172], ecx
; Line 560
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR _block$[ebp]
	mov	DWORD PTR [eax+144152], ecx
; Line 561
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?releaseDataBlock@@YAXPAUUNewTrie2@@H@Z ENDP		; releaseDataBlock
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _utrie2_set32ForLeadSurrogateCodeUnit_56
_TEXT	SEGMENT
_trie$ = 8						; size = 4
_c$ = 12						; size = 4
_value$ = 16						; size = 4
_pErrorCode$ = 20					; size = 4
_utrie2_set32ForLeadSurrogateCodeUnit_56 PROC		; COMDAT
; Line 648
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 649
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN2@utrie2_set@2
; Line 650
	jmp	SHORT $LN3@utrie2_set@2
$LN2@utrie2_set@2:
; Line 652
	mov	eax, DWORD PTR _c$[ebp]
	and	eax, -1024				; fffffc00H
	cmp	eax, 55296				; 0000d800H
	je	SHORT $LN1@utrie2_set@2
; Line 653
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 1
; Line 654
	jmp	SHORT $LN3@utrie2_set@2
$LN1@utrie2_set@2:
; Line 656
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _value$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _c$[ebp]
	push	edx
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	push	ecx
	call	?set32@@YAXPAUUNewTrie2@@HCIPAW4UErrorCode@@@Z ; set32
	add	esp, 20					; 00000014H
$LN3@utrie2_set@2:
; Line 657
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_utrie2_set32ForLeadSurrogateCodeUnit_56 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _utrie2_setRange32_56
_TEXT	SEGMENT
_setRepeatBlock$41756 = -89				; size = 1
_i2$41755 = -80						; size = 4
_nextStart$41746 = -68					; size = 4
_limit$ = -56						; size = 4
_repeatBlock$ = -44					; size = 4
_rest$ = -32						; size = 4
_block$ = -20						; size = 4
_newTrie$ = -8						; size = 4
_trie$ = 8						; size = 4
_start$ = 12						; size = 4
_end$ = 16						; size = 4
_value$ = 20						; size = 4
_overwrite$ = 24					; size = 1
_pErrorCode$ = 28					; size = 4
_utrie2_setRange32_56 PROC				; COMDAT
; Line 696
	push	ebp
	mov	ebp, esp
	sub	esp, 288				; 00000120H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-288]
	mov	ecx, 72					; 00000048H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 706
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN28@utrie2_set@3
; Line 707
	jmp	$LN29@utrie2_set@3
$LN28@utrie2_set@3:
; Line 709
	cmp	DWORD PTR _start$[ebp], 1114111		; 0010ffffH
	ja	SHORT $LN26@utrie2_set@3
	cmp	DWORD PTR _end$[ebp], 1114111		; 0010ffffH
	ja	SHORT $LN26@utrie2_set@3
	mov	eax, DWORD PTR _start$[ebp]
	cmp	eax, DWORD PTR _end$[ebp]
	jle	SHORT $LN27@utrie2_set@3
$LN26@utrie2_set@3:
; Line 710
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 1
; Line 711
	jmp	$LN29@utrie2_set@3
$LN27@utrie2_set@3:
; Line 713
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	mov	DWORD PTR _newTrie$[ebp], ecx
; Line 714
	cmp	DWORD PTR _newTrie$[ebp], 0
	je	SHORT $LN24@utrie2_set@3
	mov	eax, DWORD PTR _newTrie$[ebp]
	movsx	ecx, BYTE PTR [eax+144168]
	test	ecx, ecx
	je	SHORT $LN25@utrie2_set@3
$LN24@utrie2_set@3:
; Line 715
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 30			; 0000001eH
; Line 716
	jmp	$LN29@utrie2_set@3
$LN25@utrie2_set@3:
; Line 718
	movsx	eax, BYTE PTR _overwrite$[ebp]
	test	eax, eax
	jne	SHORT $LN23@utrie2_set@3
	mov	eax, DWORD PTR _newTrie$[ebp]
	mov	ecx, DWORD PTR _value$[ebp]
	cmp	ecx, DWORD PTR [eax+144132]
	jne	SHORT $LN23@utrie2_set@3
; Line 719
	jmp	$LN29@utrie2_set@3
$LN23@utrie2_set@3:
; Line 722
	mov	eax, DWORD PTR _end$[ebp]
	add	eax, 1
	mov	DWORD PTR _limit$[ebp], eax
; Line 723
	mov	eax, DWORD PTR _start$[ebp]
	and	eax, 31					; 0000001fH
	je	$LN22@utrie2_set@3
; Line 727
	push	1
	mov	eax, DWORD PTR _start$[ebp]
	push	eax
	mov	ecx, DWORD PTR _newTrie$[ebp]
	push	ecx
	call	?getDataBlock@@YAHPAUUNewTrie2@@HC@Z	; getDataBlock
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _block$[ebp], eax
; Line 728
	cmp	DWORD PTR _block$[ebp], 0
	jge	SHORT $LN21@utrie2_set@3
; Line 729
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 7
; Line 730
	jmp	$LN29@utrie2_set@3
$LN21@utrie2_set@3:
; Line 733
	mov	eax, DWORD PTR _start$[ebp]
	add	eax, 32					; 00000020H
	and	eax, -32				; ffffffe0H
	mov	DWORD PTR _nextStart$41746[ebp], eax
; Line 734
	mov	eax, DWORD PTR _nextStart$41746[ebp]
	cmp	eax, DWORD PTR _limit$[ebp]
	jg	SHORT $LN20@utrie2_set@3
; Line 736
	movzx	eax, BYTE PTR _overwrite$[ebp]
	push	eax
	mov	ecx, DWORD PTR _newTrie$[ebp]
	mov	edx, DWORD PTR [ecx+144132]
	push	edx
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	push	32					; 00000020H
	mov	ecx, DWORD PTR _start$[ebp]
	and	ecx, 31					; 0000001fH
	push	ecx
	mov	edx, DWORD PTR _newTrie$[ebp]
	mov	eax, DWORD PTR [edx+144128]
	mov	ecx, DWORD PTR _block$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	push	edx
	call	?fillBlock@@YAXPAIHHIIC@Z		; fillBlock
	add	esp, 24					; 00000018H
; Line 737
	mov	eax, DWORD PTR _nextStart$41746[ebp]
	mov	DWORD PTR _start$[ebp], eax
; Line 738
	jmp	SHORT $LN22@utrie2_set@3
$LN20@utrie2_set@3:
; Line 740
	movzx	eax, BYTE PTR _overwrite$[ebp]
	push	eax
	mov	ecx, DWORD PTR _newTrie$[ebp]
	mov	edx, DWORD PTR [ecx+144132]
	push	edx
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _limit$[ebp]
	and	ecx, 31					; 0000001fH
	push	ecx
	mov	edx, DWORD PTR _start$[ebp]
	and	edx, 31					; 0000001fH
	push	edx
	mov	eax, DWORD PTR _newTrie$[ebp]
	mov	ecx, DWORD PTR [eax+144128]
	mov	edx, DWORD PTR _block$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	push	eax
	call	?fillBlock@@YAXPAIHHIIC@Z		; fillBlock
	add	esp, 24					; 00000018H
; Line 741
	jmp	$LN29@utrie2_set@3
$LN22@utrie2_set@3:
; Line 746
	mov	eax, DWORD PTR _limit$[ebp]
	and	eax, 31					; 0000001fH
	mov	DWORD PTR _rest$[ebp], eax
; Line 749
	mov	eax, DWORD PTR _limit$[ebp]
	and	eax, -32				; ffffffe0H
	mov	DWORD PTR _limit$[ebp], eax
; Line 752
	mov	eax, DWORD PTR _newTrie$[ebp]
	mov	ecx, DWORD PTR _value$[ebp]
	cmp	ecx, DWORD PTR [eax+144132]
	jne	SHORT $LN18@utrie2_set@3
; Line 753
	mov	eax, DWORD PTR _newTrie$[ebp]
	mov	ecx, DWORD PTR [eax+144160]
	mov	DWORD PTR _repeatBlock$[ebp], ecx
; Line 754
	jmp	SHORT $LN16@utrie2_set@3
$LN18@utrie2_set@3:
; Line 755
	mov	DWORD PTR _repeatBlock$[ebp], -1
$LN16@utrie2_set@3:
; Line 758
	mov	eax, DWORD PTR _start$[ebp]
	cmp	eax, DWORD PTR _limit$[ebp]
	jge	$LN15@utrie2_set@3
; Line 760
	mov	BYTE PTR _setRepeatBlock$41756[ebp], 0
; Line 762
	mov	eax, DWORD PTR _newTrie$[ebp]
	mov	ecx, DWORD PTR _value$[ebp]
	cmp	ecx, DWORD PTR [eax+144132]
	jne	SHORT $LN14@utrie2_set@3
	push	1
	mov	eax, DWORD PTR _start$[ebp]
	push	eax
	mov	ecx, DWORD PTR _newTrie$[ebp]
	push	ecx
	call	?isInNullBlock@@YACPAUUNewTrie2@@HC@Z	; isInNullBlock
	add	esp, 12					; 0000000cH
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN14@utrie2_set@3
; Line 763
	mov	eax, DWORD PTR _start$[ebp]
	add	eax, 32					; 00000020H
	mov	DWORD PTR _start$[ebp], eax
; Line 764
	jmp	SHORT $LN16@utrie2_set@3
$LN14@utrie2_set@3:
; Line 768
	push	1
	mov	eax, DWORD PTR _start$[ebp]
	push	eax
	mov	ecx, DWORD PTR _newTrie$[ebp]
	push	ecx
	call	?getIndex2Block@@YAHPAUUNewTrie2@@HC@Z	; getIndex2Block
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _i2$41755[ebp], eax
; Line 769
	cmp	DWORD PTR _i2$41755[ebp], 0
	jge	SHORT $LN13@utrie2_set@3
; Line 770
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 5
; Line 771
	jmp	$LN29@utrie2_set@3
$LN13@utrie2_set@3:
; Line 773
	mov	eax, DWORD PTR _start$[ebp]
	sar	eax, 5
	and	eax, 63					; 0000003fH
	add	eax, DWORD PTR _i2$41755[ebp]
	mov	DWORD PTR _i2$41755[ebp], eax
; Line 774
	mov	eax, DWORD PTR _i2$41755[ebp]
	mov	ecx, DWORD PTR _newTrie$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+2176]
	mov	DWORD PTR _block$[ebp], edx
; Line 775
	mov	eax, DWORD PTR _block$[ebp]
	push	eax
	mov	ecx, DWORD PTR _newTrie$[ebp]
	push	ecx
	call	?isWritableBlock@@YACPAUUNewTrie2@@H@Z	; isWritableBlock
	add	esp, 8
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN12@utrie2_set@3
; Line 777
	movsx	eax, BYTE PTR _overwrite$[ebp]
	test	eax, eax
	je	SHORT $LN11@utrie2_set@3
	cmp	DWORD PTR _block$[ebp], 2176		; 00000880H
	jl	SHORT $LN11@utrie2_set@3
; Line 783
	mov	BYTE PTR _setRepeatBlock$41756[ebp], 1
; Line 784
	jmp	SHORT $LN10@utrie2_set@3
$LN11@utrie2_set@3:
; Line 788
	movzx	eax, BYTE PTR _overwrite$[ebp]
	push	eax
	mov	ecx, DWORD PTR _newTrie$[ebp]
	mov	edx, DWORD PTR [ecx+144132]
	push	edx
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	push	32					; 00000020H
	push	0
	mov	ecx, DWORD PTR _newTrie$[ebp]
	mov	edx, DWORD PTR [ecx+144128]
	mov	eax, DWORD PTR _block$[ebp]
	lea	ecx, DWORD PTR [edx+eax*4]
	push	ecx
	call	?fillBlock@@YAXPAIHHIIC@Z		; fillBlock
	add	esp, 24					; 00000018H
$LN10@utrie2_set@3:
; Line 789
	jmp	SHORT $LN9@utrie2_set@3
$LN12@utrie2_set@3:
; Line 790
	mov	eax, DWORD PTR _newTrie$[ebp]
	mov	ecx, DWORD PTR [eax+144128]
	mov	edx, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	cmp	eax, DWORD PTR _value$[ebp]
	je	SHORT $LN9@utrie2_set@3
	movsx	eax, BYTE PTR _overwrite$[ebp]
	test	eax, eax
	jne	SHORT $LN7@utrie2_set@3
	mov	eax, DWORD PTR _newTrie$[ebp]
	mov	ecx, DWORD PTR _block$[ebp]
	cmp	ecx, DWORD PTR [eax+144160]
	jne	SHORT $LN9@utrie2_set@3
$LN7@utrie2_set@3:
; Line 807
	mov	BYTE PTR _setRepeatBlock$41756[ebp], 1
$LN9@utrie2_set@3:
; Line 809
	movsx	eax, BYTE PTR _setRepeatBlock$41756[ebp]
	test	eax, eax
	je	SHORT $LN6@utrie2_set@3
; Line 810
	cmp	DWORD PTR _repeatBlock$[ebp], 0
	jl	SHORT $LN5@utrie2_set@3
; Line 811
	mov	eax, DWORD PTR _repeatBlock$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i2$41755[ebp]
	push	ecx
	mov	edx, DWORD PTR _newTrie$[ebp]
	push	edx
	call	?setIndex2Entry@@YAXPAUUNewTrie2@@HH@Z	; setIndex2Entry
	add	esp, 12					; 0000000cH
; Line 812
	jmp	SHORT $LN6@utrie2_set@3
$LN5@utrie2_set@3:
; Line 814
	push	1
	mov	eax, DWORD PTR _start$[ebp]
	push	eax
	mov	ecx, DWORD PTR _newTrie$[ebp]
	push	ecx
	call	?getDataBlock@@YAHPAUUNewTrie2@@HC@Z	; getDataBlock
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _repeatBlock$[ebp], eax
; Line 815
	cmp	DWORD PTR _repeatBlock$[ebp], 0
	jge	SHORT $LN3@utrie2_set@3
; Line 816
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 7
; Line 817
	jmp	$LN29@utrie2_set@3
$LN3@utrie2_set@3:
; Line 819
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _newTrie$[ebp]
	mov	edx, DWORD PTR [ecx+144128]
	mov	eax, DWORD PTR _repeatBlock$[ebp]
	lea	ecx, DWORD PTR [edx+eax*4]
	push	ecx
	call	?writeBlock@@YAXPAII@Z			; writeBlock
	add	esp, 8
$LN6@utrie2_set@3:
; Line 823
	mov	eax, DWORD PTR _start$[ebp]
	add	eax, 32					; 00000020H
	mov	DWORD PTR _start$[ebp], eax
; Line 824
	jmp	$LN16@utrie2_set@3
$LN15@utrie2_set@3:
; Line 826
	cmp	DWORD PTR _rest$[ebp], 0
	jle	SHORT $LN29@utrie2_set@3
; Line 828
	push	1
	mov	eax, DWORD PTR _start$[ebp]
	push	eax
	mov	ecx, DWORD PTR _newTrie$[ebp]
	push	ecx
	call	?getDataBlock@@YAHPAUUNewTrie2@@HC@Z	; getDataBlock
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _block$[ebp], eax
; Line 829
	cmp	DWORD PTR _block$[ebp], 0
	jge	SHORT $LN1@utrie2_set@3
; Line 830
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 7
; Line 831
	jmp	SHORT $LN29@utrie2_set@3
$LN1@utrie2_set@3:
; Line 834
	movzx	eax, BYTE PTR _overwrite$[ebp]
	push	eax
	mov	ecx, DWORD PTR _newTrie$[ebp]
	mov	edx, DWORD PTR [ecx+144132]
	push	edx
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _rest$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _newTrie$[ebp]
	mov	eax, DWORD PTR [edx+144128]
	mov	ecx, DWORD PTR _block$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	push	edx
	call	?fillBlock@@YAXPAIHHIIC@Z		; fillBlock
	add	esp, 24					; 00000018H
$LN29@utrie2_set@3:
; Line 838
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 288				; 00000120H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_utrie2_setRange32_56 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?isInNullBlock@@YACPAUUNewTrie2@@HC@Z
_TEXT	SEGMENT
_block$ = -20						; size = 4
_i2$ = -8						; size = 4
_trie$ = 8						; size = 4
_c$ = 12						; size = 4
_forLSCP$ = 16						; size = 1
?isInNullBlock@@YACPAUUNewTrie2@@HC@Z PROC		; isInNullBlock, COMDAT
; Line 457
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 460
	mov	eax, DWORD PTR _c$[ebp]
	and	eax, -1024				; fffffc00H
	cmp	eax, 55296				; 0000d800H
	jne	SHORT $LN2@isInNullBl
	movsx	eax, BYTE PTR _forLSCP$[ebp]
	test	eax, eax
	je	SHORT $LN2@isInNullBl
; Line 462
	mov	eax, DWORD PTR _c$[ebp]
	sar	eax, 5
	add	eax, 320				; 00000140H
	mov	DWORD PTR _i2$[ebp], eax
; Line 463
	jmp	SHORT $LN1@isInNullBl
$LN2@isInNullBl:
; Line 465
	mov	eax, DWORD PTR _c$[ebp]
	sar	eax, 11					; 0000000bH
	mov	ecx, DWORD PTR _c$[ebp]
	sar	ecx, 5
	and	ecx, 63					; 0000003fH
	mov	edx, DWORD PTR _trie$[ebp]
	add	ecx, DWORD PTR [edx+eax*4]
	mov	DWORD PTR _i2$[ebp], ecx
$LN1@isInNullBl:
; Line 467
	mov	eax, DWORD PTR _i2$[ebp]
	mov	ecx, DWORD PTR _trie$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+2176]
	mov	DWORD PTR _block$[ebp], edx
; Line 468
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR _block$[ebp]
	cmp	ecx, DWORD PTR [eax+144160]
	sete	al
; Line 469
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?isInNullBlock@@YACPAUUNewTrie2@@HC@Z ENDP		; isInNullBlock
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?writeBlock@@YAXPAII@Z
_TEXT	SEGMENT
_limit$ = -8						; size = 4
_block$ = 8						; size = 4
_value$ = 12						; size = 4
?writeBlock@@YAXPAII@Z PROC				; writeBlock, COMDAT
; Line 660
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 661
	mov	eax, DWORD PTR _block$[ebp]
	add	eax, 128				; 00000080H
	mov	DWORD PTR _limit$[ebp], eax
$LN2@writeBlock:
; Line 662
	mov	eax, DWORD PTR _block$[ebp]
	cmp	eax, DWORD PTR _limit$[ebp]
	jae	SHORT $LN3@writeBlock
; Line 663
	mov	eax, DWORD PTR _block$[ebp]
	mov	ecx, DWORD PTR _value$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _block$[ebp]
	add	edx, 4
	mov	DWORD PTR _block$[ebp], edx
; Line 664
	jmp	SHORT $LN2@writeBlock
$LN3@writeBlock:
; Line 665
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?writeBlock@@YAXPAII@Z ENDP				; writeBlock
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?fillBlock@@YAXPAIHHIIC@Z
_TEXT	SEGMENT
_pLimit$ = -8						; size = 4
_block$ = 8						; size = 4
_start$ = 12						; size = 4
_limit$ = 16						; size = 4
_value$ = 20						; size = 4
_initialValue$ = 24					; size = 4
_overwrite$ = 28					; size = 1
?fillBlock@@YAXPAIHHIIC@Z PROC				; fillBlock, COMDAT
; Line 673
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 676
	mov	eax, DWORD PTR _limit$[ebp]
	mov	ecx, DWORD PTR _block$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _pLimit$[ebp], edx
; Line 677
	mov	eax, DWORD PTR _start$[ebp]
	mov	ecx, DWORD PTR _block$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _block$[ebp], edx
; Line 678
	movsx	eax, BYTE PTR _overwrite$[ebp]
	test	eax, eax
	je	SHORT $LN3@fillBlock
$LN6@fillBlock:
; Line 679
	mov	eax, DWORD PTR _block$[ebp]
	cmp	eax, DWORD PTR _pLimit$[ebp]
	jae	SHORT $LN5@fillBlock
; Line 680
	mov	eax, DWORD PTR _block$[ebp]
	mov	ecx, DWORD PTR _value$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _block$[ebp]
	add	edx, 4
	mov	DWORD PTR _block$[ebp], edx
; Line 681
	jmp	SHORT $LN6@fillBlock
$LN5@fillBlock:
; Line 682
	jmp	SHORT $LN8@fillBlock
$LN3@fillBlock:
; Line 683
	mov	eax, DWORD PTR _block$[ebp]
	cmp	eax, DWORD PTR _pLimit$[ebp]
	jae	SHORT $LN8@fillBlock
; Line 684
	mov	eax, DWORD PTR _block$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR _initialValue$[ebp]
	jne	SHORT $LN1@fillBlock
; Line 685
	mov	eax, DWORD PTR _block$[ebp]
	mov	ecx, DWORD PTR _value$[ebp]
	mov	DWORD PTR [eax], ecx
$LN1@fillBlock:
; Line 687
	mov	eax, DWORD PTR _block$[ebp]
	add	eax, 4
	mov	DWORD PTR _block$[ebp], eax
; Line 688
	jmp	SHORT $LN3@fillBlock
$LN8@fillBlock:
; Line 690
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?fillBlock@@YAXPAIHHIIC@Z ENDP				; fillBlock
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _utrie2_freeze_56
_TEXT	SEGMENT
tv221 = -340						; size = 4
_index2Offset$41997 = -140				; size = 4
_index1Length$41996 = -128				; size = 4
_frozenValueBits$41959 = -116				; size = 4
_highStart$ = -104					; size = 4
_dataMove$ = -92					; size = 4
_allIndexesLength$ = -80				; size = 4
_length$ = -68						; size = 4
_i$ = -56						; size = 4
_dest16$ = -44						; size = 4
_p$ = -32						; size = 4
_header$ = -20						; size = 4
_newTrie$ = -8						; size = 4
_trie$ = 8						; size = 4
_valueBits$ = 12					; size = 4
_pErrorCode$ = 16					; size = 4
_utrie2_freeze_56 PROC					; COMDAT
; Line 1249
	push	ebp
	mov	ebp, esp
	sub	esp, 340				; 00000154H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-340]
	mov	ecx, 85					; 00000055H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1260
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN42@utrie2_fre
; Line 1261
	jmp	$LN43@utrie2_fre
$LN42@utrie2_fre:
; Line 1265
	cmp	DWORD PTR _trie$[ebp], 0
	je	SHORT $LN40@utrie2_fre
	cmp	DWORD PTR _valueBits$[ebp], 0
	jl	SHORT $LN40@utrie2_fre
	cmp	DWORD PTR _valueBits$[ebp], 2
	jl	SHORT $LN41@utrie2_fre
$LN40@utrie2_fre:
; Line 1266
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 1
; Line 1267
	jmp	$LN43@utrie2_fre
$LN41@utrie2_fre:
; Line 1269
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	mov	DWORD PTR _newTrie$[ebp], ecx
; Line 1270
	cmp	DWORD PTR _newTrie$[ebp], 0
	jne	SHORT $LN39@utrie2_fre
; Line 1273
	mov	eax, DWORD PTR _trie$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax+4], 0
	sete	cl
	mov	DWORD PTR _frozenValueBits$41959[ebp], ecx
; Line 1274
	mov	eax, DWORD PTR _valueBits$[ebp]
	cmp	eax, DWORD PTR _frozenValueBits$41959[ebp]
	je	SHORT $LN38@utrie2_fre
; Line 1275
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 1
$LN38@utrie2_fre:
; Line 1277
	jmp	$LN43@utrie2_fre
$LN39@utrie2_fre:
; Line 1281
	mov	eax, DWORD PTR _newTrie$[ebp]
	movsx	ecx, BYTE PTR [eax+144168]
	test	ecx, ecx
	jne	SHORT $LN37@utrie2_fre
; Line 1282
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _trie$[ebp]
	push	ecx
	call	?compactTrie@@YAXPAUUTrie2@@PAW4UErrorCode@@@Z ; compactTrie
	add	esp, 8
; Line 1283
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN37@utrie2_fre
; Line 1284
	jmp	$LN43@utrie2_fre
$LN37@utrie2_fre:
; Line 1287
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	DWORD PTR _highStart$[ebp], ecx
; Line 1289
	cmp	DWORD PTR _highStart$[ebp], 65536	; 00010000H
	jg	SHORT $LN35@utrie2_fre
; Line 1290
	mov	DWORD PTR _allIndexesLength$[ebp], 2112	; 00000840H
; Line 1291
	jmp	SHORT $LN34@utrie2_fre
$LN35@utrie2_fre:
; Line 1292
	mov	eax, DWORD PTR _newTrie$[ebp]
	mov	ecx, DWORD PTR [eax+144140]
	mov	DWORD PTR _allIndexesLength$[ebp], ecx
$LN34@utrie2_fre:
; Line 1294
	cmp	DWORD PTR _valueBits$[ebp], 0
	jne	SHORT $LN33@utrie2_fre
; Line 1295
	mov	eax, DWORD PTR _allIndexesLength$[ebp]
	mov	DWORD PTR _dataMove$[ebp], eax
; Line 1296
	jmp	SHORT $LN32@utrie2_fre
$LN33@utrie2_fre:
; Line 1297
	mov	DWORD PTR _dataMove$[ebp], 0
$LN32@utrie2_fre:
; Line 1309
	cmp	DWORD PTR _allIndexesLength$[ebp], 65535 ; 0000ffffH
	jg	SHORT $LN30@utrie2_fre
	mov	eax, DWORD PTR _newTrie$[ebp]
	mov	ecx, DWORD PTR _dataMove$[ebp]
	add	ecx, DWORD PTR [eax+144160]
	cmp	ecx, 65535				; 0000ffffH
	jg	SHORT $LN30@utrie2_fre
	mov	eax, DWORD PTR _dataMove$[ebp]
	add	eax, 2176				; 00000880H
	cmp	eax, 65535				; 0000ffffH
	jg	SHORT $LN30@utrie2_fre
	mov	eax, DWORD PTR _newTrie$[ebp]
	mov	ecx, DWORD PTR _dataMove$[ebp]
	add	ecx, DWORD PTR [eax+144148]
	cmp	ecx, 262140				; 0003fffcH
	jle	SHORT $LN31@utrie2_fre
$LN30@utrie2_fre:
; Line 1310
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 8
; Line 1311
	jmp	$LN43@utrie2_fre
$LN31@utrie2_fre:
; Line 1315
	mov	eax, DWORD PTR _allIndexesLength$[ebp]
	lea	ecx, DWORD PTR [eax+eax+16]
	mov	DWORD PTR _length$[ebp], ecx
; Line 1316
	cmp	DWORD PTR _valueBits$[ebp], 0
	jne	SHORT $LN29@utrie2_fre
; Line 1317
	mov	eax, DWORD PTR _newTrie$[ebp]
	mov	ecx, DWORD PTR [eax+144148]
	mov	edx, DWORD PTR _length$[ebp]
	lea	eax, DWORD PTR [edx+ecx*2]
	mov	DWORD PTR _length$[ebp], eax
; Line 1318
	jmp	SHORT $LN28@utrie2_fre
$LN29@utrie2_fre:
; Line 1319
	mov	eax, DWORD PTR _newTrie$[ebp]
	mov	ecx, DWORD PTR [eax+144148]
	mov	edx, DWORD PTR _length$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR _length$[ebp], eax
$LN28@utrie2_fre:
; Line 1322
	mov	eax, DWORD PTR _length$[ebp]
	push	eax
	call	_uprv_malloc_56
	add	esp, 4
	mov	ecx, DWORD PTR _trie$[ebp]
	mov	DWORD PTR [ecx+40], eax
; Line 1323
	mov	eax, DWORD PTR _trie$[ebp]
	cmp	DWORD PTR [eax+40], 0
	jne	SHORT $LN27@utrie2_fre
; Line 1324
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 7
; Line 1325
	jmp	$LN43@utrie2_fre
$LN27@utrie2_fre:
; Line 1327
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR _length$[ebp]
	mov	DWORD PTR [eax+44], ecx
; Line 1328
	mov	eax, DWORD PTR _trie$[ebp]
	mov	BYTE PTR [eax+48], 1
; Line 1330
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR _allIndexesLength$[ebp]
	mov	DWORD PTR [eax+12], ecx
; Line 1331
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR _newTrie$[ebp]
	mov	edx, DWORD PTR [ecx+144148]
	mov	DWORD PTR [eax+16], edx
; Line 1332
	cmp	DWORD PTR _highStart$[ebp], 65536	; 00010000H
	jg	SHORT $LN26@utrie2_fre
; Line 1333
	mov	eax, 65535				; 0000ffffH
	mov	ecx, DWORD PTR _trie$[ebp]
	mov	WORD PTR [ecx+20], ax
; Line 1334
	jmp	SHORT $LN25@utrie2_fre
$LN26@utrie2_fre:
; Line 1335
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR _newTrie$[ebp]
	mov	dx, WORD PTR [ecx+144156]
	mov	WORD PTR [eax+20], dx
$LN25@utrie2_fre:
; Line 1337
	mov	eax, DWORD PTR _newTrie$[ebp]
	mov	ecx, DWORD PTR _dataMove$[ebp]
	add	ecx, DWORD PTR [eax+144160]
	mov	edx, DWORD PTR _trie$[ebp]
	mov	WORD PTR [edx+22], cx
; Line 1338
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _dataMove$[ebp]
	lea	eax, DWORD PTR [edx+ecx-4]
	mov	ecx, DWORD PTR _trie$[ebp]
	mov	DWORD PTR [ecx+36], eax
; Line 1341
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR _header$[ebp], ecx
; Line 1343
	mov	eax, DWORD PTR _header$[ebp]
	mov	DWORD PTR [eax], 1416784178		; 54726932H
; Line 1344
	mov	eax, DWORD PTR _header$[ebp]
	mov	cx, WORD PTR _valueBits$[ebp]
	mov	WORD PTR [eax+4], cx
; Line 1346
	mov	eax, DWORD PTR _header$[ebp]
	mov	ecx, DWORD PTR _trie$[ebp]
	mov	dx, WORD PTR [ecx+12]
	mov	WORD PTR [eax+6], dx
; Line 1347
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	sar	ecx, 2
	mov	edx, DWORD PTR _header$[ebp]
	mov	WORD PTR [edx+8], cx
; Line 1348
	mov	eax, DWORD PTR _header$[ebp]
	mov	ecx, DWORD PTR _trie$[ebp]
	mov	dx, WORD PTR [ecx+20]
	mov	WORD PTR [eax+10], dx
; Line 1349
	mov	eax, DWORD PTR _header$[ebp]
	mov	ecx, DWORD PTR _trie$[ebp]
	mov	dx, WORD PTR [ecx+22]
	mov	WORD PTR [eax+12], dx
; Line 1350
	mov	eax, DWORD PTR _highStart$[ebp]
	sar	eax, 11					; 0000000bH
	mov	ecx, DWORD PTR _header$[ebp]
	mov	WORD PTR [ecx+14], ax
; Line 1353
	mov	eax, DWORD PTR _header$[ebp]
	add	eax, 16					; 00000010H
	mov	DWORD PTR _dest16$[ebp], eax
; Line 1354
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR _dest16$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 1357
	mov	eax, DWORD PTR _newTrie$[ebp]
	add	eax, 2176				; 00000880H
	mov	DWORD PTR _p$[ebp], eax
; Line 1358
	mov	DWORD PTR _i$[ebp], 2080		; 00000820H
	jmp	SHORT $LN24@utrie2_fre
$LN23@utrie2_fre:
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN24@utrie2_fre:
	cmp	DWORD PTR _i$[ebp], 0
	jle	SHORT $LN22@utrie2_fre
; Line 1359
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _dataMove$[ebp]
	add	ecx, DWORD PTR [eax]
	shr	ecx, 2
	mov	edx, DWORD PTR _dest16$[ebp]
	mov	WORD PTR [edx], cx
	mov	eax, DWORD PTR _dest16$[ebp]
	add	eax, 2
	mov	DWORD PTR _dest16$[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 4
	mov	DWORD PTR _p$[ebp], ecx
; Line 1360
	jmp	SHORT $LN23@utrie2_fre
$LN22@utrie2_fre:
; Line 1363
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN21@utrie2_fre
$LN20@utrie2_fre:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN21@utrie2_fre:
	cmp	DWORD PTR _i$[ebp], 2
	jge	SHORT $LN19@utrie2_fre
; Line 1364
	mov	eax, DWORD PTR _dataMove$[ebp]
	add	eax, 128				; 00000080H
	mov	ecx, DWORD PTR _dest16$[ebp]
	mov	WORD PTR [ecx], ax
	mov	edx, DWORD PTR _dest16$[ebp]
	add	edx, 2
	mov	DWORD PTR _dest16$[ebp], edx
; Line 1365
	jmp	SHORT $LN20@utrie2_fre
$LN19@utrie2_fre:
; Line 1366
	jmp	SHORT $LN18@utrie2_fre
$LN17@utrie2_fre:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN18@utrie2_fre:
	cmp	DWORD PTR _i$[ebp], 32			; 00000020H
	jge	SHORT $LN16@utrie2_fre
; Line 1367
	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 1
	mov	ecx, DWORD PTR _newTrie$[ebp]
	mov	edx, DWORD PTR _dataMove$[ebp]
	add	edx, DWORD PTR [ecx+eax*4+2176]
	mov	eax, DWORD PTR _dest16$[ebp]
	mov	WORD PTR [eax], dx
	mov	ecx, DWORD PTR _dest16$[ebp]
	add	ecx, 2
	mov	DWORD PTR _dest16$[ebp], ecx
; Line 1368
	jmp	SHORT $LN17@utrie2_fre
$LN16@utrie2_fre:
; Line 1370
	cmp	DWORD PTR _highStart$[ebp], 65536	; 00010000H
	jle	$LN15@utrie2_fre
; Line 1371
	mov	eax, DWORD PTR _highStart$[ebp]
	sub	eax, 65536				; 00010000H
	sar	eax, 11					; 0000000bH
	mov	DWORD PTR _index1Length$41996[ebp], eax
; Line 1372
	mov	eax, DWORD PTR _index1Length$41996[ebp]
	add	eax, 2112				; 00000840H
	mov	DWORD PTR _index2Offset$41997[ebp], eax
; Line 1375
	mov	eax, DWORD PTR _newTrie$[ebp]
	add	eax, 128				; 00000080H
	mov	DWORD PTR _p$[ebp], eax
; Line 1376
	mov	eax, DWORD PTR _index1Length$41996[ebp]
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN14@utrie2_fre
$LN13@utrie2_fre:
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN14@utrie2_fre:
	cmp	DWORD PTR _i$[ebp], 0
	jle	SHORT $LN12@utrie2_fre
; Line 1377
	mov	eax, DWORD PTR _dest16$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	dx, WORD PTR [ecx]
	mov	WORD PTR [eax], dx
	mov	eax, DWORD PTR _dest16$[ebp]
	add	eax, 2
	mov	DWORD PTR _dest16$[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 4
	mov	DWORD PTR _p$[ebp], ecx
; Line 1378
	jmp	SHORT $LN13@utrie2_fre
$LN12@utrie2_fre:
; Line 1384
	mov	eax, DWORD PTR _index2Offset$41997[ebp]
	mov	ecx, DWORD PTR _newTrie$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4+2176]
	mov	DWORD PTR _p$[ebp], edx
; Line 1385
	mov	eax, DWORD PTR _newTrie$[ebp]
	mov	ecx, DWORD PTR [eax+144140]
	sub	ecx, DWORD PTR _index2Offset$41997[ebp]
	mov	DWORD PTR _i$[ebp], ecx
	jmp	SHORT $LN11@utrie2_fre
$LN10@utrie2_fre:
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN11@utrie2_fre:
	cmp	DWORD PTR _i$[ebp], 0
	jle	SHORT $LN15@utrie2_fre
; Line 1386
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _dataMove$[ebp]
	add	ecx, DWORD PTR [eax]
	shr	ecx, 2
	mov	edx, DWORD PTR _dest16$[ebp]
	mov	WORD PTR [edx], cx
	mov	eax, DWORD PTR _dest16$[ebp]
	add	eax, 2
	mov	DWORD PTR _dest16$[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 4
	mov	DWORD PTR _p$[ebp], ecx
; Line 1387
	jmp	SHORT $LN10@utrie2_fre
$LN15@utrie2_fre:
; Line 1391
	mov	eax, DWORD PTR _valueBits$[ebp]
	mov	DWORD PTR tv221[ebp], eax
	cmp	DWORD PTR tv221[ebp], 0
	je	SHORT $LN6@utrie2_fre
	cmp	DWORD PTR tv221[ebp], 1
	je	SHORT $LN2@utrie2_fre
	jmp	$LN1@utrie2_fre
$LN6@utrie2_fre:
; Line 1394
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR _dest16$[ebp]
	mov	DWORD PTR [eax+4], ecx
; Line 1395
	mov	eax, DWORD PTR _trie$[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 1396
	mov	eax, DWORD PTR _newTrie$[ebp]
	mov	ecx, DWORD PTR [eax+144128]
	mov	DWORD PTR _p$[ebp], ecx
; Line 1397
	mov	eax, DWORD PTR _newTrie$[ebp]
	mov	ecx, DWORD PTR [eax+144148]
	mov	DWORD PTR _i$[ebp], ecx
	jmp	SHORT $LN5@utrie2_fre
$LN4@utrie2_fre:
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN5@utrie2_fre:
	cmp	DWORD PTR _i$[ebp], 0
	jle	SHORT $LN3@utrie2_fre
; Line 1398
	mov	eax, DWORD PTR _dest16$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	dx, WORD PTR [ecx]
	mov	WORD PTR [eax], dx
	mov	eax, DWORD PTR _dest16$[ebp]
	add	eax, 2
	mov	DWORD PTR _dest16$[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 4
	mov	DWORD PTR _p$[ebp], ecx
; Line 1399
	jmp	SHORT $LN4@utrie2_fre
$LN3@utrie2_fre:
; Line 1400
	jmp	SHORT $LN7@utrie2_fre
$LN2@utrie2_fre:
; Line 1403
	mov	eax, DWORD PTR _trie$[ebp]
	mov	DWORD PTR [eax+4], 0
; Line 1404
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR _dest16$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 1405
	push	1
	mov	eax, DWORD PTR _newTrie$[ebp]
	mov	ecx, DWORD PTR [eax+144128]
	push	ecx
	call	_uprv_checkValidMemory
	add	esp, 8
	mov	edx, DWORD PTR _newTrie$[ebp]
	mov	eax, DWORD PTR [edx+144148]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR _newTrie$[ebp]
	mov	edx, DWORD PTR [ecx+144128]
	push	edx
	mov	eax, DWORD PTR _dest16$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 1406
	jmp	SHORT $LN7@utrie2_fre
$LN1@utrie2_fre:
; Line 1408
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 1
; Line 1409
	jmp	SHORT $LN43@utrie2_fre
$LN7@utrie2_fre:
; Line 1413
	mov	eax, DWORD PTR _newTrie$[ebp]
	mov	ecx, DWORD PTR [eax+144128]
	push	ecx
	call	_uprv_free_56
	add	esp, 4
; Line 1414
	mov	eax, DWORD PTR _newTrie$[ebp]
	push	eax
	call	_uprv_free_56
	add	esp, 4
; Line 1415
	mov	eax, DWORD PTR _trie$[ebp]
	mov	DWORD PTR [eax+52], 0
$LN43@utrie2_fre:
; Line 1416
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 340				; 00000154H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_utrie2_freeze_56 ENDP
_TEXT	ENDS
EXTRN	_utrie2_get32_56:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?compactTrie@@YAXPAUUTrie2@@PAW4UErrorCode@@@Z
_TEXT	SEGMENT
tv79 = -244						; size = 4
_highValue$ = -44					; size = 4
_suppHighStart$ = -32					; size = 4
_highStart$ = -20					; size = 4
_newTrie$ = -8						; size = 4
_trie$ = 8						; size = 4
_pErrorCode$ = 12					; size = 4
?compactTrie@@YAXPAUUTrie2@@PAW4UErrorCode@@@Z PROC	; compactTrie, COMDAT
; Line 1172
	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1177
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	mov	DWORD PTR _newTrie$[ebp], ecx
; Line 1180
	push	1114111					; 0010ffffH
	mov	eax, DWORD PTR _trie$[ebp]
	push	eax
	call	_utrie2_get32_56
	add	esp, 8
	mov	DWORD PTR _highValue$[ebp], eax
; Line 1181
	mov	eax, DWORD PTR _highValue$[ebp]
	push	eax
	mov	ecx, DWORD PTR _newTrie$[ebp]
	push	ecx
	call	?findHighStart@@YAHPAUUNewTrie2@@I@Z	; findHighStart
	add	esp, 8
	mov	DWORD PTR _highStart$[ebp], eax
; Line 1182
	mov	eax, DWORD PTR _highStart$[ebp]
	add	eax, 2047				; 000007ffH
	and	eax, -2048				; fffff800H
	mov	DWORD PTR _highStart$[ebp], eax
; Line 1183
	cmp	DWORD PTR _highStart$[ebp], 1114112	; 00110000H
	jne	SHORT $LN6@compactTri
; Line 1184
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _highValue$[ebp], ecx
$LN6@compactTri:
; Line 1191
	mov	eax, DWORD PTR _newTrie$[ebp]
	mov	ecx, DWORD PTR _highStart$[ebp]
	mov	DWORD PTR [eax+144164], ecx
	mov	edx, DWORD PTR _trie$[ebp]
	mov	eax, DWORD PTR _highStart$[ebp]
	mov	DWORD PTR [edx+32], eax
; Line 1198
	cmp	DWORD PTR _highStart$[ebp], 1114112	; 00110000H
	jge	SHORT $LN5@compactTri
; Line 1200
	cmp	DWORD PTR _highStart$[ebp], 65536	; 00010000H
	jg	SHORT $LN9@compactTri
	mov	DWORD PTR tv79[ebp], 65536		; 00010000H
	jmp	SHORT $LN10@compactTri
$LN9@compactTri:
	mov	eax, DWORD PTR _highStart$[ebp]
	mov	DWORD PTR tv79[ebp], eax
$LN10@compactTri:
	mov	ecx, DWORD PTR tv79[ebp]
	mov	DWORD PTR _suppHighStart$[ebp], ecx
; Line 1201
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _trie$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	push	1114111					; 0010ffffH
	mov	eax, DWORD PTR _suppHighStart$[ebp]
	push	eax
	mov	ecx, DWORD PTR _trie$[ebp]
	push	ecx
	call	_utrie2_setRange32_56
	add	esp, 24					; 00000018H
; Line 1202
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN5@compactTri
; Line 1203
	jmp	$LN7@compactTri
$LN5@compactTri:
; Line 1207
	mov	eax, DWORD PTR _newTrie$[ebp]
	push	eax
	call	?compactData@@YAXPAUUNewTrie2@@@Z	; compactData
	add	esp, 4
; Line 1208
	cmp	DWORD PTR _highStart$[ebp], 65536	; 00010000H
	jle	SHORT $LN3@compactTri
; Line 1209
	mov	eax, DWORD PTR _newTrie$[ebp]
	push	eax
	call	?compactIndex2@@YAXPAUUNewTrie2@@@Z	; compactIndex2
	add	esp, 4
$LN3@compactTri:
; Line 1222
	mov	eax, DWORD PTR _newTrie$[ebp]
	mov	ecx, DWORD PTR [eax+144148]
	mov	edx, DWORD PTR _newTrie$[ebp]
	mov	eax, DWORD PTR [edx+144128]
	mov	edx, DWORD PTR _highValue$[ebp]
	mov	DWORD PTR [eax+ecx*4], edx
	mov	eax, DWORD PTR _newTrie$[ebp]
	mov	ecx, DWORD PTR [eax+144148]
	add	ecx, 1
	mov	edx, DWORD PTR _newTrie$[ebp]
	mov	DWORD PTR [edx+144148], ecx
$LN2@compactTri:
; Line 1223
	mov	eax, DWORD PTR _newTrie$[ebp]
	mov	ecx, DWORD PTR [eax+144148]
	and	ecx, 3
	je	SHORT $LN1@compactTri
; Line 1224
	mov	eax, DWORD PTR _newTrie$[ebp]
	mov	ecx, DWORD PTR [eax+144148]
	mov	edx, DWORD PTR _newTrie$[ebp]
	mov	eax, DWORD PTR [edx+144128]
	mov	edx, DWORD PTR _trie$[ebp]
	mov	edx, DWORD PTR [edx+24]
	mov	DWORD PTR [eax+ecx*4], edx
	mov	eax, DWORD PTR _newTrie$[ebp]
	mov	ecx, DWORD PTR [eax+144148]
	add	ecx, 1
	mov	edx, DWORD PTR _newTrie$[ebp]
	mov	DWORD PTR [edx+144148], ecx
; Line 1225
	jmp	SHORT $LN2@compactTri
$LN1@compactTri:
; Line 1227
	mov	eax, DWORD PTR _newTrie$[ebp]
	mov	BYTE PTR [eax+144168], 1
$LN7@compactTri:
; Line 1228
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?compactTrie@@YAXPAUUTrie2@@PAW4UErrorCode@@@Z ENDP	; compactTrie
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?findHighStart@@YAHPAUUNewTrie2@@I@Z
_TEXT	SEGMENT
_nullBlock$ = -164					; size = 4
_prevBlock$ = -152					; size = 4
_block$ = -140						; size = 4
_index2NullOffset$ = -128				; size = 4
_prevI2Block$ = -116					; size = 4
_i2Block$ = -104					; size = 4
_j$ = -92						; size = 4
_i2$ = -80						; size = 4
_i1$ = -68						; size = 4
_prev$ = -56						; size = 4
_c$ = -44						; size = 4
_initialValue$ = -32					; size = 4
_value$ = -20						; size = 4
_data32$ = -8						; size = 4
_trie$ = 8						; size = 4
_highValue$ = 12					; size = 4
?findHighStart@@YAHPAUUNewTrie2@@I@Z PROC		; findHighStart, COMDAT
; Line 897
	push	ebp
	mov	ebp, esp
	sub	esp, 360				; 00000168H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-360]
	mov	ecx, 90					; 0000005aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 904
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR [eax+144128]
	mov	DWORD PTR _data32$[ebp], ecx
; Line 905
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR [eax+144132]
	mov	DWORD PTR _initialValue$[ebp], ecx
; Line 907
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR [eax+144156]
	mov	DWORD PTR _index2NullOffset$[ebp], ecx
; Line 908
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR [eax+144160]
	mov	DWORD PTR _nullBlock$[ebp], ecx
; Line 911
	mov	eax, DWORD PTR _highValue$[ebp]
	cmp	eax, DWORD PTR _initialValue$[ebp]
	jne	SHORT $LN17@findHighSt
; Line 912
	mov	eax, DWORD PTR _index2NullOffset$[ebp]
	mov	DWORD PTR _prevI2Block$[ebp], eax
; Line 913
	mov	eax, DWORD PTR _nullBlock$[ebp]
	mov	DWORD PTR _prevBlock$[ebp], eax
; Line 914
	jmp	SHORT $LN16@findHighSt
$LN17@findHighSt:
; Line 915
	mov	DWORD PTR _prevI2Block$[ebp], -1
; Line 916
	mov	DWORD PTR _prevBlock$[ebp], -1
$LN16@findHighSt:
; Line 918
	mov	DWORD PTR _prev$[ebp], 1114112		; 00110000H
; Line 921
	mov	DWORD PTR _i1$[ebp], 544		; 00000220H
; Line 922
	mov	eax, DWORD PTR _prev$[ebp]
	mov	DWORD PTR _c$[ebp], eax
$LN15@findHighSt:
; Line 923
	cmp	DWORD PTR _c$[ebp], 0
	jle	$LN14@findHighSt
; Line 924
	mov	eax, DWORD PTR _i1$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i1$[ebp], eax
	mov	ecx, DWORD PTR _i1$[ebp]
	mov	edx, DWORD PTR _trie$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR _i2Block$[ebp], eax
; Line 925
	mov	eax, DWORD PTR _i2Block$[ebp]
	cmp	eax, DWORD PTR _prevI2Block$[ebp]
	jne	SHORT $LN13@findHighSt
; Line 927
	mov	eax, DWORD PTR _c$[ebp]
	sub	eax, 2048				; 00000800H
	mov	DWORD PTR _c$[ebp], eax
; Line 928
	jmp	SHORT $LN15@findHighSt
$LN13@findHighSt:
; Line 930
	mov	eax, DWORD PTR _i2Block$[ebp]
	mov	DWORD PTR _prevI2Block$[ebp], eax
; Line 931
	mov	eax, DWORD PTR _i2Block$[ebp]
	cmp	eax, DWORD PTR _index2NullOffset$[ebp]
	jne	SHORT $LN12@findHighSt
; Line 933
	mov	eax, DWORD PTR _highValue$[ebp]
	cmp	eax, DWORD PTR _initialValue$[ebp]
	je	SHORT $LN11@findHighSt
; Line 934
	mov	eax, DWORD PTR _c$[ebp]
	jmp	$LN18@findHighSt
$LN11@findHighSt:
; Line 936
	mov	eax, DWORD PTR _c$[ebp]
	sub	eax, 2048				; 00000800H
	mov	DWORD PTR _c$[ebp], eax
; Line 937
	jmp	$LN10@findHighSt
$LN12@findHighSt:
; Line 939
	mov	DWORD PTR _i2$[ebp], 64			; 00000040H
$LN9@findHighSt:
	cmp	DWORD PTR _i2$[ebp], 0
	jle	$LN10@findHighSt
; Line 940
	mov	eax, DWORD PTR _i2$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i2$[ebp], eax
	mov	ecx, DWORD PTR _i2Block$[ebp]
	add	ecx, DWORD PTR _i2$[ebp]
	mov	edx, DWORD PTR _trie$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4+2176]
	mov	DWORD PTR _block$[ebp], eax
; Line 941
	mov	eax, DWORD PTR _block$[ebp]
	cmp	eax, DWORD PTR _prevBlock$[ebp]
	jne	SHORT $LN7@findHighSt
; Line 943
	mov	eax, DWORD PTR _c$[ebp]
	sub	eax, 32					; 00000020H
	mov	DWORD PTR _c$[ebp], eax
; Line 944
	jmp	SHORT $LN9@findHighSt
$LN7@findHighSt:
; Line 946
	mov	eax, DWORD PTR _block$[ebp]
	mov	DWORD PTR _prevBlock$[ebp], eax
; Line 947
	mov	eax, DWORD PTR _block$[ebp]
	cmp	eax, DWORD PTR _nullBlock$[ebp]
	jne	SHORT $LN6@findHighSt
; Line 949
	mov	eax, DWORD PTR _highValue$[ebp]
	cmp	eax, DWORD PTR _initialValue$[ebp]
	je	SHORT $LN5@findHighSt
; Line 950
	mov	eax, DWORD PTR _c$[ebp]
	jmp	SHORT $LN18@findHighSt
$LN5@findHighSt:
; Line 952
	mov	eax, DWORD PTR _c$[ebp]
	sub	eax, 32					; 00000020H
	mov	DWORD PTR _c$[ebp], eax
; Line 953
	jmp	SHORT $LN4@findHighSt
$LN6@findHighSt:
; Line 954
	mov	DWORD PTR _j$[ebp], 32			; 00000020H
$LN3@findHighSt:
	cmp	DWORD PTR _j$[ebp], 0
	jle	SHORT $LN4@findHighSt
; Line 955
	mov	eax, DWORD PTR _j$[ebp]
	sub	eax, 1
	mov	DWORD PTR _j$[ebp], eax
	mov	ecx, DWORD PTR _block$[ebp]
	add	ecx, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR _data32$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR _value$[ebp], eax
; Line 956
	mov	eax, DWORD PTR _value$[ebp]
	cmp	eax, DWORD PTR _highValue$[ebp]
	je	SHORT $LN1@findHighSt
; Line 957
	mov	eax, DWORD PTR _c$[ebp]
	jmp	SHORT $LN18@findHighSt
$LN1@findHighSt:
; Line 959
	mov	eax, DWORD PTR _c$[ebp]
	sub	eax, 1
	mov	DWORD PTR _c$[ebp], eax
; Line 960
	jmp	SHORT $LN3@findHighSt
$LN4@findHighSt:
; Line 962
	jmp	$LN9@findHighSt
$LN10@findHighSt:
; Line 964
	jmp	$LN15@findHighSt
$LN14@findHighSt:
; Line 967
	xor	eax, eax
$LN18@findHighSt:
; Line 968
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?findHighStart@@YAHPAUUNewTrie2@@I@Z ENDP		; findHighStart
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?compactData@@YAXPAUUNewTrie2@@@Z
_TEXT	SEGMENT
_blockCount$ = -92					; size = 4
_mapIndex$ = -80					; size = 4
_i$ = -68						; size = 4
_overlap$ = -56						; size = 4
_blockLength$ = -44					; size = 4
_movedStart$ = -32					; size = 4
_newStart$ = -20					; size = 4
_start$ = -8						; size = 4
_trie$ = 8						; size = 4
?compactData@@YAXPAUUNewTrie2@@@Z PROC			; compactData, COMDAT
; Line 983
	push	ebp
	mov	ebp, esp
	sub	esp, 288				; 00000120H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-288]
	mov	ecx, 72					; 00000048H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 989
	mov	DWORD PTR _newStart$[ebp], 192		; 000000c0H
; Line 990
	mov	DWORD PTR _start$[ebp], 0
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN32@compactDat
$LN31@compactDat:
	mov	eax, DWORD PTR _start$[ebp]
	add	eax, 32					; 00000020H
	mov	DWORD PTR _start$[ebp], eax
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN32@compactDat:
	mov	eax, DWORD PTR _start$[ebp]
	cmp	eax, DWORD PTR _newStart$[ebp]
	jge	SHORT $LN30@compactDat
; Line 991
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _trie$[ebp]
	mov	edx, DWORD PTR _start$[ebp]
	mov	DWORD PTR [ecx+eax*4+144172], edx
; Line 992
	jmp	SHORT $LN31@compactDat
$LN30@compactDat:
; Line 998
	mov	DWORD PTR _blockLength$[ebp], 64	; 00000040H
; Line 999
	mov	eax, DWORD PTR _blockLength$[ebp]
	sar	eax, 5
	mov	DWORD PTR _blockCount$[ebp], eax
; Line 1000
	mov	eax, DWORD PTR _newStart$[ebp]
	mov	DWORD PTR _start$[ebp], eax
$LN29@compactDat:
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR _start$[ebp]
	cmp	ecx, DWORD PTR [eax+144148]
	jge	$LN28@compactDat
; Line 1006
	cmp	DWORD PTR _start$[ebp], 2176		; 00000880H
	jne	SHORT $LN27@compactDat
; Line 1007
	mov	DWORD PTR _blockLength$[ebp], 32	; 00000020H
; Line 1008
	mov	DWORD PTR _blockCount$[ebp], 1
$LN27@compactDat:
; Line 1012
	mov	eax, DWORD PTR _start$[ebp]
	sar	eax, 5
	mov	ecx, DWORD PTR _trie$[ebp]
	cmp	DWORD PTR [ecx+eax*4+144172], 0
	jg	SHORT $LN26@compactDat
; Line 1014
	mov	eax, DWORD PTR _start$[ebp]
	add	eax, DWORD PTR _blockLength$[ebp]
	mov	DWORD PTR _start$[ebp], eax
; Line 1017
	jmp	SHORT $LN29@compactDat
$LN26@compactDat:
; Line 1023
	mov	eax, DWORD PTR _blockLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _start$[ebp]
	push	ecx
	mov	edx, DWORD PTR _newStart$[ebp]
	push	edx
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR [eax+144128]
	push	ecx
	call	?findSameDataBlock@@YAHPBIHHH@Z		; findSameDataBlock
	add	esp, 16					; 00000010H
	mov	DWORD PTR _movedStart$[ebp], eax
	cmp	DWORD PTR _movedStart$[ebp], 0
	jl	SHORT $LN25@compactDat
; Line 1025
	mov	eax, DWORD PTR _blockCount$[ebp]
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _start$[ebp]
	sar	ecx, 5
	mov	DWORD PTR _mapIndex$[ebp], ecx
	jmp	SHORT $LN24@compactDat
$LN23@compactDat:
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN24@compactDat:
	cmp	DWORD PTR _i$[ebp], 0
	jle	SHORT $LN22@compactDat
; Line 1026
	mov	eax, DWORD PTR _mapIndex$[ebp]
	mov	ecx, DWORD PTR _trie$[ebp]
	mov	edx, DWORD PTR _movedStart$[ebp]
	mov	DWORD PTR [ecx+eax*4+144172], edx
	mov	eax, DWORD PTR _mapIndex$[ebp]
	add	eax, 1
	mov	DWORD PTR _mapIndex$[ebp], eax
; Line 1027
	mov	eax, DWORD PTR _movedStart$[ebp]
	add	eax, 32					; 00000020H
	mov	DWORD PTR _movedStart$[ebp], eax
; Line 1028
	jmp	SHORT $LN23@compactDat
$LN22@compactDat:
; Line 1031
	mov	eax, DWORD PTR _start$[ebp]
	add	eax, DWORD PTR _blockLength$[ebp]
	mov	DWORD PTR _start$[ebp], eax
; Line 1034
	jmp	$LN29@compactDat
$LN25@compactDat:
; Line 1039
	mov	eax, DWORD PTR _blockLength$[ebp]
	sub	eax, 4
	mov	DWORD PTR _overlap$[ebp], eax
; Line 1040
	jmp	SHORT $LN21@compactDat
$LN20@compactDat:
; Line 1041
	mov	eax, DWORD PTR _overlap$[ebp]
	sub	eax, 4
	mov	DWORD PTR _overlap$[ebp], eax
$LN21@compactDat:
	cmp	DWORD PTR _overlap$[ebp], 0
	jle	SHORT $LN19@compactDat
	mov	eax, DWORD PTR _overlap$[ebp]
	push	eax
	mov	ecx, DWORD PTR _trie$[ebp]
	mov	edx, DWORD PTR [ecx+144128]
	mov	eax, DWORD PTR _start$[ebp]
	lea	ecx, DWORD PTR [edx+eax*4]
	push	ecx
	mov	edx, DWORD PTR _newStart$[ebp]
	sub	edx, DWORD PTR _overlap$[ebp]
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR [eax+144128]
	lea	edx, DWORD PTR [ecx+edx*4]
	push	edx
	call	?equal_uint32@@YACPBI0H@Z		; equal_uint32
	add	esp, 12					; 0000000cH
	movsx	eax, al
	test	eax, eax
	jne	SHORT $LN19@compactDat
	jmp	SHORT $LN20@compactDat
$LN19@compactDat:
; Line 1043
	cmp	DWORD PTR _overlap$[ebp], 0
	jg	SHORT $LN17@compactDat
	mov	eax, DWORD PTR _newStart$[ebp]
	cmp	eax, DWORD PTR _start$[ebp]
	jge	$LN18@compactDat
$LN17@compactDat:
; Line 1045
	mov	eax, DWORD PTR _newStart$[ebp]
	sub	eax, DWORD PTR _overlap$[ebp]
	mov	DWORD PTR _movedStart$[ebp], eax
; Line 1046
	mov	eax, DWORD PTR _blockCount$[ebp]
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _start$[ebp]
	sar	ecx, 5
	mov	DWORD PTR _mapIndex$[ebp], ecx
	jmp	SHORT $LN16@compactDat
$LN15@compactDat:
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN16@compactDat:
	cmp	DWORD PTR _i$[ebp], 0
	jle	SHORT $LN14@compactDat
; Line 1047
	mov	eax, DWORD PTR _mapIndex$[ebp]
	mov	ecx, DWORD PTR _trie$[ebp]
	mov	edx, DWORD PTR _movedStart$[ebp]
	mov	DWORD PTR [ecx+eax*4+144172], edx
	mov	eax, DWORD PTR _mapIndex$[ebp]
	add	eax, 1
	mov	DWORD PTR _mapIndex$[ebp], eax
; Line 1048
	mov	eax, DWORD PTR _movedStart$[ebp]
	add	eax, 32					; 00000020H
	mov	DWORD PTR _movedStart$[ebp], eax
; Line 1049
	jmp	SHORT $LN15@compactDat
$LN14@compactDat:
; Line 1052
	mov	eax, DWORD PTR _start$[ebp]
	add	eax, DWORD PTR _overlap$[ebp]
	mov	DWORD PTR _start$[ebp], eax
; Line 1053
	mov	eax, DWORD PTR _blockLength$[ebp]
	sub	eax, DWORD PTR _overlap$[ebp]
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN13@compactDat
$LN12@compactDat:
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN13@compactDat:
	cmp	DWORD PTR _i$[ebp], 0
	jle	SHORT $LN11@compactDat
; Line 1054
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR [eax+144128]
	mov	edx, DWORD PTR _trie$[ebp]
	mov	eax, DWORD PTR [edx+144128]
	mov	edx, DWORD PTR _newStart$[ebp]
	mov	esi, DWORD PTR _start$[ebp]
	mov	ecx, DWORD PTR [ecx+esi*4]
	mov	DWORD PTR [eax+edx*4], ecx
	mov	edx, DWORD PTR _newStart$[ebp]
	add	edx, 1
	mov	DWORD PTR _newStart$[ebp], edx
	mov	eax, DWORD PTR _start$[ebp]
	add	eax, 1
	mov	DWORD PTR _start$[ebp], eax
; Line 1055
	jmp	SHORT $LN12@compactDat
$LN11@compactDat:
	jmp	SHORT $LN10@compactDat
$LN18@compactDat:
; Line 1057
	mov	eax, DWORD PTR _blockCount$[ebp]
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _start$[ebp]
	sar	ecx, 5
	mov	DWORD PTR _mapIndex$[ebp], ecx
	jmp	SHORT $LN9@compactDat
$LN8@compactDat:
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN9@compactDat:
	cmp	DWORD PTR _i$[ebp], 0
	jle	SHORT $LN7@compactDat
; Line 1058
	mov	eax, DWORD PTR _mapIndex$[ebp]
	mov	ecx, DWORD PTR _trie$[ebp]
	mov	edx, DWORD PTR _start$[ebp]
	mov	DWORD PTR [ecx+eax*4+144172], edx
	mov	eax, DWORD PTR _mapIndex$[ebp]
	add	eax, 1
	mov	DWORD PTR _mapIndex$[ebp], eax
; Line 1059
	mov	eax, DWORD PTR _start$[ebp]
	add	eax, 32					; 00000020H
	mov	DWORD PTR _start$[ebp], eax
; Line 1060
	jmp	SHORT $LN8@compactDat
$LN7@compactDat:
; Line 1061
	mov	eax, DWORD PTR _start$[ebp]
	mov	DWORD PTR _newStart$[ebp], eax
$LN10@compactDat:
; Line 1063
	jmp	$LN29@compactDat
$LN28@compactDat:
; Line 1066
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN6@compactDat
$LN5@compactDat:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN6@compactDat:
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR [eax+144140]
	jge	SHORT $LN4@compactDat
; Line 1067
	cmp	DWORD PTR _i$[ebp], 2080		; 00000820H
	jne	SHORT $LN3@compactDat
; Line 1069
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 576				; 00000240H
	mov	DWORD PTR _i$[ebp], eax
$LN3@compactDat:
; Line 1071
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _trie$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+2176]
	sar	edx, 5
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _trie$[ebp]
	mov	esi, DWORD PTR _trie$[ebp]
	mov	edx, DWORD PTR [esi+edx*4+144172]
	mov	DWORD PTR [ecx+eax*4+2176], edx
; Line 1072
	jmp	SHORT $LN5@compactDat
$LN4@compactDat:
; Line 1073
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR [eax+144160]
	sar	ecx, 5
	mov	edx, DWORD PTR _trie$[ebp]
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR [eax+ecx*4+144172]
	mov	DWORD PTR [edx+144160], ecx
$LN2@compactDat:
; Line 1076
	mov	eax, DWORD PTR _newStart$[ebp]
	and	eax, 3
	je	SHORT $LN1@compactDat
; Line 1077
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR [eax+144128]
	mov	edx, DWORD PTR _newStart$[ebp]
	mov	eax, DWORD PTR _trie$[ebp]
	mov	eax, DWORD PTR [eax+144132]
	mov	DWORD PTR [ecx+edx*4], eax
	mov	ecx, DWORD PTR _newStart$[ebp]
	add	ecx, 1
	mov	DWORD PTR _newStart$[ebp], ecx
; Line 1078
	jmp	SHORT $LN2@compactDat
$LN1@compactDat:
; Line 1086
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR _newStart$[ebp]
	mov	DWORD PTR [eax+144148], ecx
; Line 1087
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 288				; 00000120H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?compactData@@YAXPAUUNewTrie2@@@Z ENDP			; compactData
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?equal_uint32@@YACPBI0H@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
_t$ = 12						; size = 4
_length$ = 16						; size = 4
?equal_uint32@@YACPBI0H@Z PROC				; equal_uint32, COMDAT
; Line 853
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
$LN2@equal_uint:
; Line 854
	cmp	DWORD PTR _length$[ebp], 0
	jle	SHORT $LN1@equal_uint
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _t$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN1@equal_uint
; Line 855
	mov	eax, DWORD PTR _s$[ebp]
	add	eax, 4
	mov	DWORD PTR _s$[ebp], eax
; Line 856
	mov	eax, DWORD PTR _t$[ebp]
	add	eax, 4
	mov	DWORD PTR _t$[ebp], eax
; Line 857
	mov	eax, DWORD PTR _length$[ebp]
	sub	eax, 1
	mov	DWORD PTR _length$[ebp], eax
; Line 858
	jmp	SHORT $LN2@equal_uint
$LN1@equal_uint:
; Line 859
	cmp	DWORD PTR _length$[ebp], 0
	sete	al
; Line 860
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?equal_uint32@@YACPBI0H@Z ENDP				; equal_uint32
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?findSameDataBlock@@YAHPBIHHH@Z
_TEXT	SEGMENT
_block$ = -8						; size = 4
_data$ = 8						; size = 4
_dataLength$ = 12					; size = 4
_otherBlock$ = 16					; size = 4
_blockLength$ = 20					; size = 4
?findSameDataBlock@@YAHPBIHHH@Z PROC			; findSameDataBlock, COMDAT
; Line 878
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 882
	mov	eax, DWORD PTR _dataLength$[ebp]
	sub	eax, DWORD PTR _blockLength$[ebp]
	mov	DWORD PTR _dataLength$[ebp], eax
; Line 884
	mov	DWORD PTR _block$[ebp], 0
	jmp	SHORT $LN4@findSameDa
$LN3@findSameDa:
	mov	eax, DWORD PTR _block$[ebp]
	add	eax, 4
	mov	DWORD PTR _block$[ebp], eax
$LN4@findSameDa:
	mov	eax, DWORD PTR _block$[ebp]
	cmp	eax, DWORD PTR _dataLength$[ebp]
	jg	SHORT $LN2@findSameDa
; Line 885
	mov	eax, DWORD PTR _blockLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _otherBlock$[ebp]
	mov	edx, DWORD PTR _data$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	push	eax
	mov	ecx, DWORD PTR _block$[ebp]
	mov	edx, DWORD PTR _data$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	push	eax
	call	?equal_uint32@@YACPBI0H@Z		; equal_uint32
	add	esp, 12					; 0000000cH
	movsx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@findSameDa
; Line 886
	mov	eax, DWORD PTR _block$[ebp]
	jmp	SHORT $LN5@findSameDa
$LN1@findSameDa:
; Line 888
	jmp	SHORT $LN3@findSameDa
$LN2@findSameDa:
; Line 889
	or	eax, -1
$LN5@findSameDa:
; Line 890
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?findSameDataBlock@@YAHPBIHHH@Z ENDP			; findSameDataBlock
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?compactIndex2@@YAXPAUUNewTrie2@@@Z
_TEXT	SEGMENT
_overlap$ = -56						; size = 4
_movedStart$ = -44					; size = 4
_newStart$ = -32					; size = 4
_start$ = -20						; size = 4
_i$ = -8						; size = 4
_trie$ = 8						; size = 4
?compactIndex2@@YAXPAUUNewTrie2@@@Z PROC		; compactIndex2, COMDAT
; Line 1090
	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1094
	mov	DWORD PTR _newStart$[ebp], 2080		; 00000820H
; Line 1095
	mov	DWORD PTR _start$[ebp], 0
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN20@compactInd
$LN19@compactInd:
	mov	eax, DWORD PTR _start$[ebp]
	add	eax, 64					; 00000040H
	mov	DWORD PTR _start$[ebp], eax
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN20@compactInd:
	mov	eax, DWORD PTR _start$[ebp]
	cmp	eax, DWORD PTR _newStart$[ebp]
	jge	SHORT $LN18@compactInd
; Line 1096
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _trie$[ebp]
	mov	edx, DWORD PTR _start$[ebp]
	mov	DWORD PTR [ecx+eax*4+144172], edx
; Line 1097
	jmp	SHORT $LN19@compactInd
$LN18@compactInd:
; Line 1100
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR [eax+144164]
	sub	ecx, 65536				; 00010000H
	sar	ecx, 11					; 0000000bH
	mov	edx, DWORD PTR _newStart$[ebp]
	lea	eax, DWORD PTR [edx+ecx+32]
	mov	DWORD PTR _newStart$[ebp], eax
; Line 1102
	mov	DWORD PTR _start$[ebp], 2656		; 00000a60H
$LN17@compactInd:
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR _start$[ebp]
	cmp	ecx, DWORD PTR [eax+144140]
	jge	$LN16@compactInd
; Line 1112
	mov	eax, DWORD PTR _start$[ebp]
	push	eax
	mov	ecx, DWORD PTR _newStart$[ebp]
	push	ecx
	mov	edx, DWORD PTR _trie$[ebp]
	add	edx, 2176				; 00000880H
	push	edx
	call	?findSameIndex2Block@@YAHPBHHH@Z	; findSameIndex2Block
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _movedStart$[ebp], eax
	cmp	DWORD PTR _movedStart$[ebp], 0
	jl	SHORT $LN15@compactInd
; Line 1114
	mov	eax, DWORD PTR _start$[ebp]
	sar	eax, 6
	mov	ecx, DWORD PTR _trie$[ebp]
	mov	edx, DWORD PTR _movedStart$[ebp]
	mov	DWORD PTR [ecx+eax*4+144172], edx
; Line 1117
	mov	eax, DWORD PTR _start$[ebp]
	add	eax, 64					; 00000040H
	mov	DWORD PTR _start$[ebp], eax
; Line 1120
	jmp	SHORT $LN17@compactInd
$LN15@compactInd:
; Line 1125
	mov	DWORD PTR _overlap$[ebp], 63		; 0000003fH
; Line 1126
	jmp	SHORT $LN14@compactInd
$LN13@compactInd:
; Line 1127
	mov	eax, DWORD PTR _overlap$[ebp]
	sub	eax, 1
	mov	DWORD PTR _overlap$[ebp], eax
$LN14@compactInd:
	cmp	DWORD PTR _overlap$[ebp], 0
	jle	SHORT $LN12@compactInd
	mov	eax, DWORD PTR _overlap$[ebp]
	push	eax
	mov	ecx, DWORD PTR _start$[ebp]
	mov	edx, DWORD PTR _trie$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4+2176]
	push	eax
	mov	ecx, DWORD PTR _newStart$[ebp]
	sub	ecx, DWORD PTR _overlap$[ebp]
	mov	edx, DWORD PTR _trie$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4+2176]
	push	eax
	call	?equal_int32@@YACPBH0H@Z		; equal_int32
	add	esp, 12					; 0000000cH
	movsx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN12@compactInd
	jmp	SHORT $LN13@compactInd
$LN12@compactInd:
; Line 1129
	cmp	DWORD PTR _overlap$[ebp], 0
	jg	SHORT $LN10@compactInd
	mov	eax, DWORD PTR _newStart$[ebp]
	cmp	eax, DWORD PTR _start$[ebp]
	jge	SHORT $LN11@compactInd
$LN10@compactInd:
; Line 1131
	mov	eax, DWORD PTR _newStart$[ebp]
	sub	eax, DWORD PTR _overlap$[ebp]
	mov	ecx, DWORD PTR _start$[ebp]
	sar	ecx, 6
	mov	edx, DWORD PTR _trie$[ebp]
	mov	DWORD PTR [edx+ecx*4+144172], eax
; Line 1134
	mov	eax, DWORD PTR _start$[ebp]
	add	eax, DWORD PTR _overlap$[ebp]
	mov	DWORD PTR _start$[ebp], eax
; Line 1135
	mov	eax, 64					; 00000040H
	sub	eax, DWORD PTR _overlap$[ebp]
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN9@compactInd
$LN8@compactInd:
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN9@compactInd:
	cmp	DWORD PTR _i$[ebp], 0
	jle	SHORT $LN7@compactInd
; Line 1136
	mov	eax, DWORD PTR _newStart$[ebp]
	mov	ecx, DWORD PTR _trie$[ebp]
	mov	edx, DWORD PTR _start$[ebp]
	mov	esi, DWORD PTR _trie$[ebp]
	mov	edx, DWORD PTR [esi+edx*4+2176]
	mov	DWORD PTR [ecx+eax*4+2176], edx
	mov	eax, DWORD PTR _newStart$[ebp]
	add	eax, 1
	mov	DWORD PTR _newStart$[ebp], eax
	mov	ecx, DWORD PTR _start$[ebp]
	add	ecx, 1
	mov	DWORD PTR _start$[ebp], ecx
; Line 1137
	jmp	SHORT $LN8@compactInd
$LN7@compactInd:
	jmp	SHORT $LN6@compactInd
$LN11@compactInd:
; Line 1139
	mov	eax, DWORD PTR _start$[ebp]
	sar	eax, 6
	mov	ecx, DWORD PTR _trie$[ebp]
	mov	edx, DWORD PTR _start$[ebp]
	mov	DWORD PTR [ecx+eax*4+144172], edx
; Line 1140
	mov	eax, DWORD PTR _start$[ebp]
	add	eax, 64					; 00000040H
	mov	DWORD PTR _start$[ebp], eax
; Line 1141
	mov	eax, DWORD PTR _start$[ebp]
	mov	DWORD PTR _newStart$[ebp], eax
$LN6@compactInd:
; Line 1143
	jmp	$LN17@compactInd
$LN16@compactInd:
; Line 1146
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN5@compactInd
$LN4@compactInd:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN5@compactInd:
	cmp	DWORD PTR _i$[ebp], 544			; 00000220H
	jge	SHORT $LN3@compactInd
; Line 1147
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _trie$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	sar	edx, 6
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _trie$[ebp]
	mov	esi, DWORD PTR _trie$[ebp]
	mov	edx, DWORD PTR [esi+edx*4+144172]
	mov	DWORD PTR [ecx+eax*4], edx
; Line 1148
	jmp	SHORT $LN4@compactInd
$LN3@compactInd:
; Line 1149
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR [eax+144156]
	sar	ecx, 6
	mov	edx, DWORD PTR _trie$[ebp]
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR [eax+ecx*4+144172]
	mov	DWORD PTR [edx+144156], ecx
$LN2@compactInd:
; Line 1157
	mov	eax, DWORD PTR _newStart$[ebp]
	and	eax, 3
	je	SHORT $LN1@compactInd
; Line 1159
	mov	eax, DWORD PTR _newStart$[ebp]
	mov	ecx, DWORD PTR _trie$[ebp]
	mov	DWORD PTR [ecx+eax*4+2176], 262140	; 0003fffcH
	mov	edx, DWORD PTR _newStart$[ebp]
	add	edx, 1
	mov	DWORD PTR _newStart$[ebp], edx
; Line 1160
	jmp	SHORT $LN2@compactInd
$LN1@compactInd:
; Line 1168
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR _newStart$[ebp]
	mov	DWORD PTR [eax+144140], ecx
; Line 1169
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?compactIndex2@@YAXPAUUNewTrie2@@@Z ENDP		; compactIndex2
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?equal_int32@@YACPBH0H@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
_t$ = 12						; size = 4
_length$ = 16						; size = 4
?equal_int32@@YACPBH0H@Z PROC				; equal_int32, COMDAT
; Line 843
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
$LN2@equal_int3:
; Line 844
	cmp	DWORD PTR _length$[ebp], 0
	jle	SHORT $LN1@equal_int3
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _t$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN1@equal_int3
; Line 845
	mov	eax, DWORD PTR _s$[ebp]
	add	eax, 4
	mov	DWORD PTR _s$[ebp], eax
; Line 846
	mov	eax, DWORD PTR _t$[ebp]
	add	eax, 4
	mov	DWORD PTR _t$[ebp], eax
; Line 847
	mov	eax, DWORD PTR _length$[ebp]
	sub	eax, 1
	mov	DWORD PTR _length$[ebp], eax
; Line 848
	jmp	SHORT $LN2@equal_int3
$LN1@equal_int3:
; Line 849
	cmp	DWORD PTR _length$[ebp], 0
	sete	al
; Line 850
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?equal_int32@@YACPBH0H@Z ENDP				; equal_int32
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?findSameIndex2Block@@YAHPBHHH@Z
_TEXT	SEGMENT
_block$ = -8						; size = 4
_idx$ = 8						; size = 4
_index2Length$ = 12					; size = 4
_otherBlock$ = 16					; size = 4
?findSameIndex2Block@@YAHPBHHH@Z PROC			; findSameIndex2Block, COMDAT
; Line 863
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 867
	mov	eax, DWORD PTR _index2Length$[ebp]
	sub	eax, 64					; 00000040H
	mov	DWORD PTR _index2Length$[ebp], eax
; Line 869
	mov	DWORD PTR _block$[ebp], 0
	jmp	SHORT $LN4@findSameIn
$LN3@findSameIn:
	mov	eax, DWORD PTR _block$[ebp]
	add	eax, 1
	mov	DWORD PTR _block$[ebp], eax
$LN4@findSameIn:
	mov	eax, DWORD PTR _block$[ebp]
	cmp	eax, DWORD PTR _index2Length$[ebp]
	jg	SHORT $LN2@findSameIn
; Line 870
	push	64					; 00000040H
	mov	eax, DWORD PTR _otherBlock$[ebp]
	mov	ecx, DWORD PTR _idx$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	push	edx
	mov	eax, DWORD PTR _block$[ebp]
	mov	ecx, DWORD PTR _idx$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	push	edx
	call	?equal_int32@@YACPBH0H@Z		; equal_int32
	add	esp, 12					; 0000000cH
	movsx	eax, al
	test	eax, eax
	je	SHORT $LN1@findSameIn
; Line 871
	mov	eax, DWORD PTR _block$[ebp]
	jmp	SHORT $LN5@findSameIn
$LN1@findSameIn:
; Line 873
	jmp	SHORT $LN3@findSameIn
$LN2@findSameIn:
; Line 874
	or	eax, -1
$LN5@findSameIn:
; Line 875
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?findSameIndex2Block@@YAHPBHHH@Z ENDP			; findSameIndex2Block
_TEXT	ENDS
PUBLIC	_utrie2_swapAnyVersion_56
EXTRN	_utrie2_swap_56:PROC
EXTRN	_utrie_swap_56:PROC
EXTRN	_utrie2_getVersion_56:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _utrie2_swapAnyVersion_56
_TEXT	SEGMENT
tv72 = -196						; size = 4
_ds$ = 8						; size = 4
_inData$ = 12						; size = 4
_length$ = 16						; size = 4
_outData$ = 20						; size = 4
_pErrorCode$ = 24					; size = 4
_utrie2_swapAnyVersion_56 PROC				; COMDAT
; Line 1426
	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1427
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_SUCCESS@@YACW4UErrorCode@@@Z		; U_SUCCESS
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN6@utrie2_swa
; Line 1428
	push	1
	mov	eax, DWORD PTR _length$[ebp]
	push	eax
	mov	ecx, DWORD PTR _inData$[ebp]
	push	ecx
	call	_utrie2_getVersion_56
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv72[ebp], eax
	cmp	DWORD PTR tv72[ebp], 1
	je	SHORT $LN3@utrie2_swa
	cmp	DWORD PTR tv72[ebp], 2
	je	SHORT $LN2@utrie2_swa
	jmp	SHORT $LN1@utrie2_swa
$LN3@utrie2_swa:
; Line 1430
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _outData$[ebp]
	push	ecx
	mov	edx, DWORD PTR _length$[ebp]
	push	edx
	mov	eax, DWORD PTR _inData$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ds$[ebp]
	push	ecx
	call	_utrie_swap_56
	add	esp, 20					; 00000014H
	jmp	SHORT $LN7@utrie2_swa
$LN2@utrie2_swa:
; Line 1432
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _outData$[ebp]
	push	ecx
	mov	edx, DWORD PTR _length$[ebp]
	push	edx
	mov	eax, DWORD PTR _inData$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ds$[ebp]
	push	ecx
	call	_utrie2_swap_56
	add	esp, 20					; 00000014H
	jmp	SHORT $LN7@utrie2_swa
$LN1@utrie2_swa:
; Line 1434
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 3
; Line 1435
	xor	eax, eax
	jmp	SHORT $LN7@utrie2_swa
$LN6@utrie2_swa:
; Line 1438
	xor	eax, eax
$LN7@utrie2_swa:
; Line 1439
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_utrie2_swapAnyVersion_56 ENDP
_TEXT	ENDS
END
