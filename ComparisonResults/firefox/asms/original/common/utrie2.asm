; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\mozilla\intl\icu\source\common\utrie2.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	??2@YAPAXI@Z					; operator new
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File d:\mozilla\intl\icu\source\common\unicode\utypes.h
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT ??2@YAPAXI@Z
_TEXT	SEGMENT
_q$ = -8						; size = 4
___formal$ = 8						; size = 4
??2@YAPAXI@Z PROC					; operator new, COMDAT
; Line 411
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 412
	mov	DWORD PTR _q$[ebp], 0
; Line 413
	mov	eax, DWORD PTR _q$[ebp]
	mov	BYTE PTR [eax], 5
; Line 414
	mov	eax, DWORD PTR _q$[ebp]
; Line 415
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??2@YAPAXI@Z ENDP					; operator new
_TEXT	ENDS
PUBLIC	??3@YAXPAX@Z					; operator delete
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??3@YAXPAX@Z
_TEXT	SEGMENT
_q$ = -8						; size = 4
___formal$ = 8						; size = 4
??3@YAXPAX@Z PROC					; operator delete, COMDAT
; Line 439
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 440
	mov	DWORD PTR _q$[ebp], 0
; Line 441
	mov	eax, DWORD PTR _q$[ebp]
	mov	BYTE PTR [eax], 5
; Line 442
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??3@YAXPAX@Z ENDP					; operator delete
_TEXT	ENDS
PUBLIC	??2UMemory@icu_56@@SAPAXIPAX@Z			; icu_56::UMemory::operator new
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??2UMemory@icu_56@@SAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_ptr$ = 12						; size = 4
??2UMemory@icu_56@@SAPAXIPAX@Z PROC			; icu_56::UMemory::operator new, COMDAT
; File d:\mozilla\intl\icu\source\common\unicode\uobject.h
; Line 161
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR _ptr$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??2UMemory@icu_56@@SAPAXIPAX@Z ENDP			; icu_56::UMemory::operator new
_TEXT	ENDS
PUBLIC	??3UMemory@icu_56@@SAXPAX0@Z			; icu_56::UMemory::operator delete
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??3UMemory@icu_56@@SAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3UMemory@icu_56@@SAXPAX0@Z PROC			; icu_56::UMemory::operator delete, COMDAT
; Line 168
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??3UMemory@icu_56@@SAXPAX0@Z ENDP			; icu_56::UMemory::operator delete
_TEXT	ENDS
PUBLIC	??4UMemory@icu_56@@QAEAAV01@ABV01@@Z		; icu_56::UMemory::operator=
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??4UMemory@icu_56@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___that$ = 8						; size = 4
??4UMemory@icu_56@@QAEAAV01@ABV01@@Z PROC		; icu_56::UMemory::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4UMemory@icu_56@@QAEAAV01@ABV01@@Z ENDP		; icu_56::UMemory::operator=
_TEXT	ENDS
PUBLIC	??_7UObject@icu_56@@6B@				; icu_56::UObject::`vftable'
PUBLIC	??0UObject@icu_56@@QAE@XZ			; icu_56::UObject::UObject
PUBLIC	??_R4UObject@icu_56@@6B@			; icu_56::UObject::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVUObject@icu_56@@@8			; icu_56::UObject `RTTI Type Descriptor'
PUBLIC	??_R3UObject@icu_56@@8				; icu_56::UObject::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2UObject@icu_56@@8				; icu_56::UObject::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@UObject@icu_56@@8			; icu_56::UObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R13?0A@EA@UMemory@icu_56@@8			; icu_56::UMemory::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	??_R0?AVUMemory@icu_56@@@8			; icu_56::UMemory `RTTI Type Descriptor'
PUBLIC	??_R3UMemory@icu_56@@8				; icu_56::UMemory::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2UMemory@icu_56@@8				; icu_56::UMemory::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@UMemory@icu_56@@8			; icu_56::UMemory::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_EUObject@icu_56@@UAEPAXI@Z			; icu_56::UObject::`vector deleting destructor'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?getDynamicClassID@UObject@icu_56@@UBEPAXXZ:PROC ; icu_56::UObject::getDynamicClassID
;	COMDAT ??_R1A@?0A@EA@UMemory@icu_56@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@UMemory@icu_56@@8 DD FLAT:??_R0?AVUMemory@icu_56@@@8 ; icu_56::UMemory::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3UMemory@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_R2UMemory@icu_56@@8
rdata$r	SEGMENT
??_R2UMemory@icu_56@@8 DD FLAT:??_R1A@?0A@EA@UMemory@icu_56@@8 ; icu_56::UMemory::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3UMemory@icu_56@@8
rdata$r	SEGMENT
??_R3UMemory@icu_56@@8 DD 00H				; icu_56::UMemory::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2UMemory@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVUMemory@icu_56@@@8
_DATA	SEGMENT
??_R0?AVUMemory@icu_56@@@8 DD FLAT:??_7type_info@@6B@	; icu_56::UMemory `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVUMemory@icu_56@@', 00H
_DATA	ENDS
;	COMDAT ??_R13?0A@EA@UMemory@icu_56@@8
rdata$r	SEGMENT
??_R13?0A@EA@UMemory@icu_56@@8 DD FLAT:??_R0?AVUMemory@icu_56@@@8 ; icu_56::UMemory::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	00H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3UMemory@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@UObject@icu_56@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@UObject@icu_56@@8 DD FLAT:??_R0?AVUObject@icu_56@@@8 ; icu_56::UObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3UObject@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_R2UObject@icu_56@@8
rdata$r	SEGMENT
??_R2UObject@icu_56@@8 DD FLAT:??_R1A@?0A@EA@UObject@icu_56@@8 ; icu_56::UObject::`RTTI Base Class Array'
	DD	FLAT:??_R13?0A@EA@UMemory@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_R3UObject@icu_56@@8
rdata$r	SEGMENT
??_R3UObject@icu_56@@8 DD 00H				; icu_56::UObject::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2UObject@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVUObject@icu_56@@@8
_DATA	SEGMENT
??_R0?AVUObject@icu_56@@@8 DD FLAT:??_7type_info@@6B@	; icu_56::UObject `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVUObject@icu_56@@', 00H
_DATA	ENDS
;	COMDAT ??_R4UObject@icu_56@@6B@
rdata$r	SEGMENT
??_R4UObject@icu_56@@6B@ DD 00H				; icu_56::UObject::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVUObject@icu_56@@@8
	DD	FLAT:??_R3UObject@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_7UObject@icu_56@@6B@
CONST	SEGMENT
??_7UObject@icu_56@@6B@ DD FLAT:??_R4UObject@icu_56@@6B@ ; icu_56::UObject::`vftable'
	DD	FLAT:??_EUObject@icu_56@@UAEPAXI@Z
	DD	FLAT:?getDynamicClassID@UObject@icu_56@@UBEPAXXZ
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ??0UObject@icu_56@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0UObject@icu_56@@QAE@XZ PROC				; icu_56::UObject::UObject, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7UObject@icu_56@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0UObject@icu_56@@QAE@XZ ENDP				; icu_56::UObject::UObject
_TEXT	ENDS
PUBLIC	??0UObject@icu_56@@QAE@ABV01@@Z			; icu_56::UObject::UObject
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0UObject@icu_56@@QAE@ABV01@@Z
_TEXT	SEGMENT
tv68 = -208						; size = 4
_this$ = -8						; size = 4
___that$ = 8						; size = 4
??0UObject@icu_56@@QAE@ABV01@@Z PROC			; icu_56::UObject::UObject, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	cmp	DWORD PTR ___that$[ebp], 0
	je	SHORT $LN3@UObject
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 4
	mov	DWORD PTR tv68[ebp], eax
	jmp	SHORT $LN4@UObject
$LN3@UObject:
	mov	DWORD PTR tv68[ebp], 0
$LN4@UObject:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7UObject@icu_56@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0UObject@icu_56@@QAE@ABV01@@Z ENDP			; icu_56::UObject::UObject
_TEXT	ENDS
PUBLIC	??4UObject@icu_56@@QAEAAV01@ABV01@@Z		; icu_56::UObject::operator=
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??4UObject@icu_56@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___that$ = 8						; size = 4
??4UObject@icu_56@@QAEAAV01@ABV01@@Z PROC		; icu_56::UObject::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4UObject@icu_56@@QAEAAV01@ABV01@@Z ENDP		; icu_56::UObject::operator=
_TEXT	ENDS
PUBLIC	??_GUObject@icu_56@@UAEPAXI@Z			; icu_56::UObject::`scalar deleting destructor'
EXTRN	??3UMemory@icu_56@@SAXPAX@Z:PROC		; icu_56::UMemory::operator delete
EXTRN	??1UObject@icu_56@@UAE@XZ:PROC			; icu_56::UObject::~UObject
EXTRN	__RTC_CheckEsp:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GUObject@icu_56@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_GUObject@icu_56@@UAEPAXI@Z PROC			; icu_56::UObject::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1UObject@icu_56@@UAE@XZ		; icu_56::UObject::~UObject
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3UMemory@icu_56@@SAXPAX@Z		; icu_56::UMemory::operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GUObject@icu_56@@UAEPAXI@Z ENDP			; icu_56::UObject::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	??_VUMemory@icu_56@@SAXPAX@Z:PROC		; icu_56::UMemory::operator delete[]
EXTRN	??_M@YGXPAXIHP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_EUObject@icu_56@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_EUObject@icu_56@@UAEPAXI@Z PROC			; icu_56::UObject::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector
	push	OFFSET ??1UObject@icu_56@@UAE@XZ	; icu_56::UObject::~UObject
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	push	ecx
	push	4
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@vector
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	push	eax
	call	??_VUMemory@icu_56@@SAXPAX@Z		; icu_56::UMemory::operator delete[]
	add	esp, 4
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN3@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1UObject@icu_56@@UAE@XZ		; icu_56::UObject::~UObject
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3UMemory@icu_56@@SAXPAX@Z		; icu_56::UMemory::operator delete
	add	esp, 4
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_EUObject@icu_56@@UAEPAXI@Z ENDP			; icu_56::UObject::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	??0Mutex@icu_56@@QAE@PAUUMutex@@@Z		; icu_56::Mutex::Mutex
PUBLIC	??_FMutex@icu_56@@QAEXXZ			; icu_56::Mutex::`default constructor closure'
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_FMutex@icu_56@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??_FMutex@icu_56@@QAEXXZ PROC				; icu_56::Mutex::`default constructor closure', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Mutex@icu_56@@QAE@PAUUMutex@@@Z	; icu_56::Mutex::Mutex
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??_FMutex@icu_56@@QAEXXZ ENDP				; icu_56::Mutex::`default constructor closure'
_TEXT	ENDS
EXTRN	_umtx_lock_56:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0Mutex@icu_56@@QAE@PAUUMutex@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_mutex$ = 8						; size = 4
??0Mutex@icu_56@@QAE@PAUUMutex@@@Z PROC			; icu_56::Mutex::Mutex, COMDAT
; _this$ = ecx
; File d:\mozilla\intl\icu\source\common\mutex.h
; Line 65
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _mutex$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 66
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_umtx_lock_56
	add	esp, 4
; Line 67
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0Mutex@icu_56@@QAE@PAUUMutex@@@Z ENDP			; icu_56::Mutex::Mutex
_TEXT	ENDS
PUBLIC	??1Mutex@icu_56@@QAE@XZ				; icu_56::Mutex::~Mutex
EXTRN	_umtx_unlock_56:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1Mutex@icu_56@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1Mutex@icu_56@@QAE@XZ PROC				; icu_56::Mutex::~Mutex, COMDAT
; _this$ = ecx
; Line 70
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 71
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_umtx_unlock_56
	add	esp, 4
; Line 72
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1Mutex@icu_56@@QAE@XZ ENDP				; icu_56::Mutex::~Mutex
_TEXT	ENDS
PUBLIC	_utrie2_get32_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _utrie2_get32_56
_TEXT	SEGMENT
tv184 = -208						; size = 4
tv137 = -208						; size = 4
tv185 = -204						; size = 4
tv138 = -204						; size = 4
tv186 = -200						; size = 4
tv139 = -200						; size = 4
tv187 = -196						; size = 4
tv140 = -196						; size = 4
_trie$ = 8						; size = 4
_c$ = 12						; size = 4
_utrie2_get32_56 PROC					; COMDAT
; File d:\mozilla\intl\icu\source\common\utrie2.cpp
; Line 60
	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 61
	mov	eax, DWORD PTR _trie$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	$LN6@utrie2_get
; Line 62
	cmp	DWORD PTR _c$[ebp], 55296		; 0000d800H
	jae	SHORT $LN15@utrie2_get
	mov	eax, DWORD PTR _c$[ebp]
	sar	eax, 5
	mov	ecx, DWORD PTR _trie$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, WORD PTR [edx+eax*2]
	mov	ecx, DWORD PTR _c$[ebp]
	and	ecx, 31					; 0000001fH
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR tv140[ebp], edx
	jmp	$LN16@utrie2_get
$LN15@utrie2_get:
	cmp	DWORD PTR _c$[ebp], 65535		; 0000ffffH
	ja	SHORT $LN13@utrie2_get
	xor	eax, eax
	cmp	DWORD PTR _c$[ebp], 56319		; 0000dbffH
	setg	al
	sub	eax, 1
	and	eax, 320				; 00000140H
	mov	ecx, DWORD PTR _c$[ebp]
	sar	ecx, 5
	add	eax, ecx
	mov	edx, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR [edx]
	movzx	edx, WORD PTR [ecx+eax*2]
	mov	eax, DWORD PTR _c$[ebp]
	and	eax, 31					; 0000001fH
	lea	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR tv139[ebp], ecx
	jmp	$LN14@utrie2_get
$LN13@utrie2_get:
	cmp	DWORD PTR _c$[ebp], 1114111		; 0010ffffH
	jbe	SHORT $LN11@utrie2_get
	mov	edx, DWORD PTR _trie$[ebp]
	mov	eax, DWORD PTR [edx+12]
	add	eax, 128				; 00000080H
	mov	DWORD PTR tv138[ebp], eax
	jmp	SHORT $LN12@utrie2_get
$LN11@utrie2_get:
	mov	ecx, DWORD PTR _trie$[ebp]
	mov	edx, DWORD PTR _c$[ebp]
	cmp	edx, DWORD PTR [ecx+32]
	jl	SHORT $LN9@utrie2_get
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	DWORD PTR tv137[ebp], ecx
	jmp	SHORT $LN10@utrie2_get
$LN9@utrie2_get:
	mov	edx, DWORD PTR _c$[ebp]
	sar	edx, 11					; 0000000bH
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, WORD PTR [ecx+edx*2+4160]
	mov	eax, DWORD PTR _c$[ebp]
	sar	eax, 5
	and	eax, 63					; 0000003fH
	add	edx, eax
	mov	ecx, DWORD PTR _trie$[ebp]
	mov	eax, DWORD PTR [ecx]
	movzx	ecx, WORD PTR [eax+edx*2]
	mov	edx, DWORD PTR _c$[ebp]
	and	edx, 31					; 0000001fH
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR tv137[ebp], eax
$LN10@utrie2_get:
	mov	ecx, DWORD PTR tv137[ebp]
	mov	DWORD PTR tv138[ebp], ecx
$LN12@utrie2_get:
	mov	edx, DWORD PTR tv138[ebp]
	mov	DWORD PTR tv139[ebp], edx
$LN14@utrie2_get:
	mov	eax, DWORD PTR tv139[ebp]
	mov	DWORD PTR tv140[ebp], eax
$LN16@utrie2_get:
	mov	ecx, DWORD PTR _trie$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR tv140[ebp]
	movzx	eax, WORD PTR [edx+eax*2]
	jmp	$LN7@utrie2_get
	jmp	$LN7@utrie2_get
$LN6@utrie2_get:
; Line 63
	mov	eax, DWORD PTR _trie$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	$LN4@utrie2_get
; Line 64
	cmp	DWORD PTR _c$[ebp], 55296		; 0000d800H
	jae	SHORT $LN23@utrie2_get
	mov	eax, DWORD PTR _c$[ebp]
	sar	eax, 5
	mov	ecx, DWORD PTR _trie$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, WORD PTR [edx+eax*2]
	mov	ecx, DWORD PTR _c$[ebp]
	and	ecx, 31					; 0000001fH
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR tv187[ebp], edx
	jmp	$LN24@utrie2_get
$LN23@utrie2_get:
	cmp	DWORD PTR _c$[ebp], 65535		; 0000ffffH
	ja	SHORT $LN21@utrie2_get
	xor	eax, eax
	cmp	DWORD PTR _c$[ebp], 56319		; 0000dbffH
	setg	al
	sub	eax, 1
	and	eax, 320				; 00000140H
	mov	ecx, DWORD PTR _c$[ebp]
	sar	ecx, 5
	add	eax, ecx
	mov	edx, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR [edx]
	movzx	edx, WORD PTR [ecx+eax*2]
	mov	eax, DWORD PTR _c$[ebp]
	and	eax, 31					; 0000001fH
	lea	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR tv186[ebp], ecx
	jmp	SHORT $LN22@utrie2_get
$LN21@utrie2_get:
	cmp	DWORD PTR _c$[ebp], 1114111		; 0010ffffH
	jbe	SHORT $LN19@utrie2_get
	mov	DWORD PTR tv185[ebp], 128		; 00000080H
	jmp	SHORT $LN20@utrie2_get
$LN19@utrie2_get:
	mov	edx, DWORD PTR _trie$[ebp]
	mov	eax, DWORD PTR _c$[ebp]
	cmp	eax, DWORD PTR [edx+32]
	jl	SHORT $LN17@utrie2_get
	mov	ecx, DWORD PTR _trie$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR tv184[ebp], edx
	jmp	SHORT $LN18@utrie2_get
$LN17@utrie2_get:
	mov	eax, DWORD PTR _c$[ebp]
	sar	eax, 11					; 0000000bH
	mov	ecx, DWORD PTR _trie$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, WORD PTR [edx+eax*2+4160]
	mov	ecx, DWORD PTR _c$[ebp]
	sar	ecx, 5
	and	ecx, 63					; 0000003fH
	add	eax, ecx
	mov	edx, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR [edx]
	movzx	edx, WORD PTR [ecx+eax*2]
	mov	eax, DWORD PTR _c$[ebp]
	and	eax, 31					; 0000001fH
	lea	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR tv184[ebp], ecx
$LN18@utrie2_get:
	mov	edx, DWORD PTR tv184[ebp]
	mov	DWORD PTR tv185[ebp], edx
$LN20@utrie2_get:
	mov	eax, DWORD PTR tv185[ebp]
	mov	DWORD PTR tv186[ebp], eax
$LN22@utrie2_get:
	mov	ecx, DWORD PTR tv186[ebp]
	mov	DWORD PTR tv187[ebp], ecx
$LN24@utrie2_get:
	mov	edx, DWORD PTR _trie$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR tv187[ebp]
	mov	eax, DWORD PTR [eax+ecx*4]
	jmp	SHORT $LN7@utrie2_get
	jmp	SHORT $LN7@utrie2_get
$LN4@utrie2_get:
; Line 65
	cmp	DWORD PTR _c$[ebp], 1114111		; 0010ffffH
	jbe	SHORT $LN2@utrie2_get
; Line 66
	mov	eax, DWORD PTR _trie$[ebp]
	mov	eax, DWORD PTR [eax+28]
	jmp	SHORT $LN7@utrie2_get
; Line 67
	jmp	SHORT $LN7@utrie2_get
$LN2@utrie2_get:
; Line 68
	push	1
	mov	eax, DWORD PTR _c$[ebp]
	push	eax
	mov	ecx, DWORD PTR _trie$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	push	edx
	call	?get32@@YAIPBUUNewTrie2@@HC@Z		; get32
	add	esp, 12					; 0000000cH
$LN7@utrie2_get:
; Line 70
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_utrie2_get32_56 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?get32@@YAIPBUUNewTrie2@@HC@Z
_TEXT	SEGMENT
_block$ = -20						; size = 4
_i2$ = -8						; size = 4
_trie$ = 8						; size = 4
_c$ = 12						; size = 4
_fromLSCP$ = 16						; size = 1
?get32@@YAIPBUUNewTrie2@@HC@Z PROC			; get32, COMDAT
; Line 41
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 44
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR _c$[ebp]
	cmp	ecx, DWORD PTR [eax+144164]
	jl	SHORT $LN4@get32
	mov	eax, DWORD PTR _c$[ebp]
	and	eax, -1024				; fffffc00H
	cmp	eax, 55296				; 0000d800H
	jne	SHORT $LN3@get32
	movsx	eax, BYTE PTR _fromLSCP$[ebp]
	test	eax, eax
	je	SHORT $LN4@get32
$LN3@get32:
; Line 45
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR [eax+144148]
	mov	edx, DWORD PTR _trie$[ebp]
	mov	eax, DWORD PTR [edx+144128]
	mov	eax, DWORD PTR [eax+ecx*4-16]
	jmp	SHORT $LN5@get32
$LN4@get32:
; Line 48
	mov	eax, DWORD PTR _c$[ebp]
	and	eax, -1024				; fffffc00H
	cmp	eax, 55296				; 0000d800H
	jne	SHORT $LN2@get32
	movsx	eax, BYTE PTR _fromLSCP$[ebp]
	test	eax, eax
	je	SHORT $LN2@get32
; Line 50
	mov	eax, DWORD PTR _c$[ebp]
	sar	eax, 5
	add	eax, 320				; 00000140H
	mov	DWORD PTR _i2$[ebp], eax
; Line 51
	jmp	SHORT $LN1@get32
$LN2@get32:
; Line 53
	mov	eax, DWORD PTR _c$[ebp]
	sar	eax, 11					; 0000000bH
	mov	ecx, DWORD PTR _c$[ebp]
	sar	ecx, 5
	and	ecx, 63					; 0000003fH
	mov	edx, DWORD PTR _trie$[ebp]
	add	ecx, DWORD PTR [edx+eax*4]
	mov	DWORD PTR _i2$[ebp], ecx
$LN1@get32:
; Line 55
	mov	eax, DWORD PTR _i2$[ebp]
	mov	ecx, DWORD PTR _trie$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+2176]
	mov	DWORD PTR _block$[ebp], edx
; Line 56
	mov	eax, DWORD PTR _c$[ebp]
	and	eax, 31					; 0000001fH
	add	eax, DWORD PTR _block$[ebp]
	mov	ecx, DWORD PTR _trie$[ebp]
	mov	edx, DWORD PTR [ecx+144128]
	mov	eax, DWORD PTR [edx+eax*4]
$LN5@get32:
; Line 57
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?get32@@YAIPBUUNewTrie2@@HC@Z ENDP			; get32
_TEXT	ENDS
PUBLIC	_utrie2_get32FromLeadSurrogateCodeUnit_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _utrie2_get32FromLeadSurrogateCodeUnit_56
_TEXT	SEGMENT
_trie$ = 8						; size = 4
_c$ = 12						; size = 4
_utrie2_get32FromLeadSurrogateCodeUnit_56 PROC		; COMDAT
; Line 73
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 74
	mov	eax, DWORD PTR _c$[ebp]
	and	eax, -1024				; fffffc00H
	cmp	eax, 55296				; 0000d800H
	je	SHORT $LN5@utrie2_get@2
; Line 75
	mov	eax, DWORD PTR _trie$[ebp]
	mov	eax, DWORD PTR [eax+28]
	jmp	SHORT $LN6@utrie2_get@2
$LN5@utrie2_get@2:
; Line 77
	mov	eax, DWORD PTR _trie$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN4@utrie2_get@2
; Line 78
	mov	eax, DWORD PTR _c$[ebp]
	sar	eax, 5
	mov	ecx, DWORD PTR _trie$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, WORD PTR [edx+eax*2]
	mov	ecx, DWORD PTR _c$[ebp]
	and	ecx, 31					; 0000001fH
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	eax, WORD PTR [ecx+edx*2]
	jmp	SHORT $LN6@utrie2_get@2
	jmp	SHORT $LN6@utrie2_get@2
$LN4@utrie2_get@2:
; Line 79
	mov	eax, DWORD PTR _trie$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN2@utrie2_get@2
; Line 80
	mov	eax, DWORD PTR _c$[ebp]
	sar	eax, 5
	mov	ecx, DWORD PTR _trie$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, WORD PTR [edx+eax*2]
	mov	ecx, DWORD PTR _c$[ebp]
	and	ecx, 31					; 0000001fH
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	eax, DWORD PTR [ecx+edx*4]
	jmp	SHORT $LN6@utrie2_get@2
; Line 81
	jmp	SHORT $LN6@utrie2_get@2
$LN2@utrie2_get@2:
; Line 82
	push	0
	mov	eax, DWORD PTR _c$[ebp]
	push	eax
	mov	ecx, DWORD PTR _trie$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	push	edx
	call	?get32@@YAIPBUUNewTrie2@@HC@Z		; get32
	add	esp, 12					; 0000000cH
$LN6@utrie2_get@2:
; Line 84
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_utrie2_get32FromLeadSurrogateCodeUnit_56 ENDP
_TEXT	ENDS
PUBLIC	_utrie2_internalU8NextIndex_56
EXTRN	_utf8_nextCharSafeBody_56:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _utrie2_internalU8NextIndex_56
_TEXT	SEGMENT
_length$ = -20						; size = 4
_i$ = -8						; size = 4
_trie$ = 8						; size = 4
_c$ = 12						; size = 4
_src$ = 16						; size = 4
_limit$ = 20						; size = 4
_utrie2_internalU8NextIndex_56 PROC			; COMDAT
; Line 98
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 100
	mov	DWORD PTR _i$[ebp], 0
; Line 102
	mov	eax, DWORD PTR _limit$[ebp]
	sub	eax, DWORD PTR _src$[ebp]
	cmp	eax, 7
	jg	SHORT $LN2@utrie2_int
; Line 103
	mov	eax, DWORD PTR _limit$[ebp]
	sub	eax, DWORD PTR _src$[ebp]
	mov	DWORD PTR _length$[ebp], eax
; Line 104
	jmp	SHORT $LN1@utrie2_int
$LN2@utrie2_int:
; Line 105
	mov	DWORD PTR _length$[ebp], 7
$LN1@utrie2_int:
; Line 107
	push	-1
	mov	eax, DWORD PTR _c$[ebp]
	push	eax
	mov	ecx, DWORD PTR _length$[ebp]
	push	ecx
	lea	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	eax, DWORD PTR _src$[ebp]
	push	eax
	call	_utf8_nextCharSafeBody_56
	add	esp, 20					; 00000014H
	mov	DWORD PTR _c$[ebp], eax
; Line 108
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _c$[ebp]
	push	ecx
	mov	edx, DWORD PTR _trie$[ebp]
	push	edx
	call	?u8Index@@YAHPBUUTrie2@@HH@Z		; u8Index
	add	esp, 12					; 0000000cH
; Line 109
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@utrie2_int
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN7@utrie2_int:
	DD	1
	DD	$LN6@utrie2_int
$LN6@utrie2_int:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN5@utrie2_int
$LN5@utrie2_int:
	DB	105					; 00000069H
	DB	0
_utrie2_internalU8NextIndex_56 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?u8Index@@YAHPBUUTrie2@@HH@Z
_TEXT	SEGMENT
tv138 = -224						; size = 4
tv139 = -220						; size = 4
tv87 = -216						; size = 4
tv140 = -212						; size = 4
tv141 = -208						; size = 4
_idx$ = -8						; size = 4
_trie$ = 8						; size = 4
_c$ = 12						; size = 4
_i$ = 16						; size = 4
?u8Index@@YAHPBUUTrie2@@HH@Z PROC			; u8Index, COMDAT
; Line 87
	push	ebp
	mov	ebp, esp
	sub	esp, 224				; 000000e0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-224]
	mov	ecx, 56					; 00000038H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 92
	cmp	DWORD PTR _c$[ebp], 55296		; 0000d800H
	jae	SHORT $LN11@u8Index
	mov	eax, DWORD PTR _c$[ebp]
	sar	eax, 5
	mov	ecx, DWORD PTR _trie$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, WORD PTR [edx+eax*2]
	mov	ecx, DWORD PTR _c$[ebp]
	and	ecx, 31					; 0000001fH
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR tv141[ebp], edx
	jmp	$LN12@u8Index
$LN11@u8Index:
	cmp	DWORD PTR _c$[ebp], 65535		; 0000ffffH
	ja	SHORT $LN9@u8Index
	xor	eax, eax
	cmp	DWORD PTR _c$[ebp], 56319		; 0000dbffH
	setg	al
	sub	eax, 1
	and	eax, 320				; 00000140H
	mov	ecx, DWORD PTR _c$[ebp]
	sar	ecx, 5
	add	eax, ecx
	mov	edx, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR [edx]
	movzx	edx, WORD PTR [ecx+eax*2]
	mov	eax, DWORD PTR _c$[ebp]
	and	eax, 31					; 0000001fH
	lea	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR tv140[ebp], ecx
	jmp	$LN10@u8Index
$LN9@u8Index:
	cmp	DWORD PTR _c$[ebp], 1114111		; 0010ffffH
	jbe	SHORT $LN7@u8Index
	mov	edx, DWORD PTR _trie$[ebp]
	cmp	DWORD PTR [edx+8], 0
	jne	SHORT $LN3@u8Index
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR tv87[ebp], ecx
	jmp	SHORT $LN4@u8Index
$LN3@u8Index:
	mov	DWORD PTR tv87[ebp], 0
$LN4@u8Index:
	mov	edx, DWORD PTR tv87[ebp]
	add	edx, 128				; 00000080H
	mov	DWORD PTR tv139[ebp], edx
	jmp	SHORT $LN8@u8Index
$LN7@u8Index:
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR _c$[ebp]
	cmp	ecx, DWORD PTR [eax+32]
	jl	SHORT $LN5@u8Index
	mov	edx, DWORD PTR _trie$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	DWORD PTR tv138[ebp], eax
	jmp	SHORT $LN6@u8Index
$LN5@u8Index:
	mov	ecx, DWORD PTR _c$[ebp]
	sar	ecx, 11					; 0000000bH
	mov	edx, DWORD PTR _trie$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, WORD PTR [eax+ecx*2+4160]
	mov	edx, DWORD PTR _c$[ebp]
	sar	edx, 5
	and	edx, 63					; 0000003fH
	add	ecx, edx
	mov	eax, DWORD PTR _trie$[ebp]
	mov	edx, DWORD PTR [eax]
	movzx	eax, WORD PTR [edx+ecx*2]
	mov	ecx, DWORD PTR _c$[ebp]
	and	ecx, 31					; 0000001fH
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR tv138[ebp], edx
$LN6@u8Index:
	mov	eax, DWORD PTR tv138[ebp]
	mov	DWORD PTR tv139[ebp], eax
$LN8@u8Index:
	mov	ecx, DWORD PTR tv139[ebp]
	mov	DWORD PTR tv140[ebp], ecx
$LN10@u8Index:
	mov	edx, DWORD PTR tv140[ebp]
	mov	DWORD PTR tv141[ebp], edx
$LN12@u8Index:
	mov	eax, DWORD PTR tv141[ebp]
	mov	DWORD PTR _idx$[ebp], eax
; Line 93
	mov	eax, DWORD PTR _idx$[ebp]
	shl	eax, 3
	or	eax, DWORD PTR _i$[ebp]
; Line 94
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?u8Index@@YAHPBUUTrie2@@HH@Z ENDP			; u8Index
_TEXT	ENDS
PUBLIC	_utrie2_internalU8PrevIndex_56
EXTRN	_utf8_prevCharSafeBody_56:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _utrie2_internalU8PrevIndex_56
_TEXT	SEGMENT
_length$ = -20						; size = 4
_i$ = -8						; size = 4
_trie$ = 8						; size = 4
_c$ = 12						; size = 4
_start$ = 16						; size = 4
_src$ = 20						; size = 4
_utrie2_internalU8PrevIndex_56 PROC			; COMDAT
; Line 113
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 116
	mov	eax, DWORD PTR _src$[ebp]
	sub	eax, DWORD PTR _start$[ebp]
	cmp	eax, 7
	jg	SHORT $LN2@utrie2_int@2
; Line 117
	mov	eax, DWORD PTR _src$[ebp]
	sub	eax, DWORD PTR _start$[ebp]
	mov	DWORD PTR _length$[ebp], eax
	mov	ecx, DWORD PTR _length$[ebp]
	mov	DWORD PTR _i$[ebp], ecx
; Line 118
	jmp	SHORT $LN1@utrie2_int@2
$LN2@utrie2_int@2:
; Line 119
	mov	DWORD PTR _length$[ebp], 7
	mov	eax, DWORD PTR _length$[ebp]
	mov	DWORD PTR _i$[ebp], eax
; Line 120
	mov	eax, DWORD PTR _src$[ebp]
	sub	eax, 7
	mov	DWORD PTR _start$[ebp], eax
$LN1@utrie2_int@2:
; Line 122
	push	-1
	mov	eax, DWORD PTR _c$[ebp]
	push	eax
	lea	ecx, DWORD PTR _i$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _start$[ebp]
	push	edx
	call	_utf8_prevCharSafeBody_56
	add	esp, 20					; 00000014H
	mov	DWORD PTR _c$[ebp], eax
; Line 123
	mov	eax, DWORD PTR _length$[ebp]
	sub	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR _i$[ebp], eax
; Line 124
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _c$[ebp]
	push	ecx
	mov	edx, DWORD PTR _trie$[ebp]
	push	edx
	call	?u8Index@@YAHPBUUTrie2@@HH@Z		; u8Index
	add	esp, 12					; 0000000cH
; Line 125
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@utrie2_int@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN7@utrie2_int@2:
	DD	1
	DD	$LN6@utrie2_int@2
$LN6@utrie2_int@2:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN5@utrie2_int@2
$LN5@utrie2_int@2:
	DB	105					; 00000069H
	DB	0
_utrie2_internalU8PrevIndex_56 ENDP
_TEXT	ENDS
PUBLIC	_utrie2_openFromSerialized_56
EXTRN	_memcpy:PROC
EXTRN	_uprv_checkValidMemory:PROC
EXTRN	_uprv_malloc_56:PROC
EXTRN	_memset:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _utrie2_openFromSerialized_56
_TEXT	SEGMENT
tv150 = -308						; size = 4
_trie$ = -108						; size = 4
_tempTrie$ = -96					; size = 56
_actualLength$ = -32					; size = 4
_p16$ = -20						; size = 4
_header$ = -8						; size = 4
_valueBits$ = 8						; size = 4
_data$ = 12						; size = 4
_length$ = 16						; size = 4
_pActualLength$ = 20					; size = 4
_pErrorCode$ = 24					; size = 4
_utrie2_openFromSerialized_56 PROC			; COMDAT
; Line 130
	push	ebp
	mov	ebp, esp
	sub	esp, 308				; 00000134H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-308]
	mov	ecx, 77					; 0000004dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 138
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN17@utrie2_ope
; Line 139
	xor	eax, eax
	jmp	$LN18@utrie2_ope
$LN17@utrie2_ope:
; Line 144
	cmp	DWORD PTR _length$[ebp], 0
	jle	SHORT $LN15@utrie2_ope
	mov	eax, DWORD PTR _data$[ebp]
	and	eax, 3
	jne	SHORT $LN15@utrie2_ope
	cmp	DWORD PTR _valueBits$[ebp], 0
	jl	SHORT $LN15@utrie2_ope
	cmp	DWORD PTR _valueBits$[ebp], 2
	jl	SHORT $LN16@utrie2_ope
$LN15@utrie2_ope:
; Line 145
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 1
; Line 146
	xor	eax, eax
	jmp	$LN18@utrie2_ope
$LN16@utrie2_ope:
; Line 150
	cmp	DWORD PTR _length$[ebp], 16		; 00000010H
	jge	SHORT $LN14@utrie2_ope
; Line 151
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 3
; Line 152
	xor	eax, eax
	jmp	$LN18@utrie2_ope
$LN14@utrie2_ope:
; Line 156
	mov	eax, DWORD PTR _data$[ebp]
	mov	DWORD PTR _header$[ebp], eax
; Line 157
	mov	eax, DWORD PTR _header$[ebp]
	cmp	DWORD PTR [eax], 1416784178		; 54726932H
	je	SHORT $LN13@utrie2_ope
; Line 158
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 3
; Line 159
	xor	eax, eax
	jmp	$LN18@utrie2_ope
$LN13@utrie2_ope:
; Line 163
	mov	eax, DWORD PTR _header$[ebp]
	movzx	ecx, WORD PTR [eax+4]
	and	ecx, 15					; 0000000fH
	cmp	DWORD PTR _valueBits$[ebp], ecx
	je	SHORT $LN12@utrie2_ope
; Line 164
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 3
; Line 165
	xor	eax, eax
	jmp	$LN18@utrie2_ope
$LN12@utrie2_ope:
; Line 169
	push	56					; 00000038H
	push	0
	lea	eax, DWORD PTR _tempTrie$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
; Line 170
	mov	eax, DWORD PTR _header$[ebp]
	movzx	ecx, WORD PTR [eax+6]
	mov	DWORD PTR _tempTrie$[ebp+12], ecx
; Line 171
	mov	eax, DWORD PTR _header$[ebp]
	movzx	ecx, WORD PTR [eax+8]
	shl	ecx, 2
	mov	DWORD PTR _tempTrie$[ebp+16], ecx
; Line 172
	mov	eax, DWORD PTR _header$[ebp]
	mov	cx, WORD PTR [eax+10]
	mov	WORD PTR _tempTrie$[ebp+20], cx
; Line 173
	mov	eax, DWORD PTR _header$[ebp]
	mov	cx, WORD PTR [eax+12]
	mov	WORD PTR _tempTrie$[ebp+22], cx
; Line 175
	mov	eax, DWORD PTR _header$[ebp]
	movzx	ecx, WORD PTR [eax+14]
	shl	ecx, 11					; 0000000bH
	mov	DWORD PTR _tempTrie$[ebp+32], ecx
; Line 176
	mov	eax, DWORD PTR _tempTrie$[ebp+16]
	sub	eax, 4
	mov	DWORD PTR _tempTrie$[ebp+36], eax
; Line 177
	cmp	DWORD PTR _valueBits$[ebp], 0
	jne	SHORT $LN11@utrie2_ope
; Line 178
	mov	eax, DWORD PTR _tempTrie$[ebp+36]
	add	eax, DWORD PTR _tempTrie$[ebp+12]
	mov	DWORD PTR _tempTrie$[ebp+36], eax
$LN11@utrie2_ope:
; Line 182
	mov	eax, DWORD PTR _tempTrie$[ebp+12]
	lea	ecx, DWORD PTR [eax+eax+16]
	mov	DWORD PTR _actualLength$[ebp], ecx
; Line 183
	cmp	DWORD PTR _valueBits$[ebp], 0
	jne	SHORT $LN10@utrie2_ope
; Line 184
	mov	eax, DWORD PTR _tempTrie$[ebp+16]
	mov	ecx, DWORD PTR _actualLength$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR _actualLength$[ebp], edx
; Line 185
	jmp	SHORT $LN9@utrie2_ope
$LN10@utrie2_ope:
; Line 186
	mov	eax, DWORD PTR _tempTrie$[ebp+16]
	mov	ecx, DWORD PTR _actualLength$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _actualLength$[ebp], edx
$LN9@utrie2_ope:
; Line 188
	mov	eax, DWORD PTR _length$[ebp]
	cmp	eax, DWORD PTR _actualLength$[ebp]
	jge	SHORT $LN8@utrie2_ope
; Line 189
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 3
; Line 190
	xor	eax, eax
	jmp	$LN18@utrie2_ope
$LN8@utrie2_ope:
; Line 194
	push	56					; 00000038H
	call	_uprv_malloc_56
	add	esp, 4
	mov	DWORD PTR _trie$[ebp], eax
; Line 195
	cmp	DWORD PTR _trie$[ebp], 0
	jne	SHORT $LN7@utrie2_ope
; Line 196
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 7
; Line 197
	xor	eax, eax
	jmp	$LN18@utrie2_ope
$LN7@utrie2_ope:
; Line 199
	push	1
	lea	eax, DWORD PTR _tempTrie$[ebp]
	push	eax
	call	_uprv_checkValidMemory
	add	esp, 8
	push	56					; 00000038H
	lea	ecx, DWORD PTR _tempTrie$[ebp]
	push	ecx
	mov	edx, DWORD PTR _trie$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 200
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR _data$[ebp]
	mov	DWORD PTR [eax+40], ecx
; Line 201
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR _actualLength$[ebp]
	mov	DWORD PTR [eax+44], ecx
; Line 202
	mov	eax, DWORD PTR _trie$[ebp]
	mov	BYTE PTR [eax+48], 0
; Line 205
	mov	eax, DWORD PTR _header$[ebp]
	add	eax, 16					; 00000010H
	mov	DWORD PTR _p16$[ebp], eax
; Line 206
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR _p16$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 207
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _p16$[ebp]
	lea	eax, DWORD PTR [edx+ecx*2]
	mov	DWORD PTR _p16$[ebp], eax
; Line 210
	mov	eax, DWORD PTR _valueBits$[ebp]
	mov	DWORD PTR tv150[ebp], eax
	cmp	DWORD PTR tv150[ebp], 0
	je	SHORT $LN4@utrie2_ope
	cmp	DWORD PTR tv150[ebp], 1
	je	SHORT $LN3@utrie2_ope
	jmp	SHORT $LN2@utrie2_ope
$LN4@utrie2_ope:
; Line 212
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR _p16$[ebp]
	mov	DWORD PTR [eax+4], ecx
; Line 213
	mov	eax, DWORD PTR _trie$[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 214
	mov	eax, DWORD PTR _trie$[ebp]
	movzx	ecx, WORD PTR [eax+22]
	mov	edx, DWORD PTR _trie$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, WORD PTR [eax+ecx*2]
	mov	edx, DWORD PTR _trie$[ebp]
	mov	DWORD PTR [edx+24], ecx
; Line 215
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	movzx	edx, WORD PTR [ecx+256]
	mov	eax, DWORD PTR _trie$[ebp]
	mov	DWORD PTR [eax+28], edx
; Line 216
	jmp	SHORT $LN5@utrie2_ope
$LN3@utrie2_ope:
; Line 218
	mov	eax, DWORD PTR _trie$[ebp]
	mov	DWORD PTR [eax+4], 0
; Line 219
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR _p16$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 220
	mov	eax, DWORD PTR _trie$[ebp]
	movzx	ecx, WORD PTR [eax+22]
	mov	edx, DWORD PTR _trie$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	edx, DWORD PTR _trie$[ebp]
	mov	eax, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR [edx+24], eax
; Line 221
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _trie$[ebp]
	mov	eax, DWORD PTR [ecx+512]
	mov	DWORD PTR [edx+28], eax
; Line 222
	jmp	SHORT $LN5@utrie2_ope
$LN2@utrie2_ope:
; Line 224
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 3
; Line 225
	xor	eax, eax
	jmp	SHORT $LN18@utrie2_ope
$LN5@utrie2_ope:
; Line 228
	cmp	DWORD PTR _pActualLength$[ebp], 0
	je	SHORT $LN1@utrie2_ope
; Line 229
	mov	eax, DWORD PTR _pActualLength$[ebp]
	mov	ecx, DWORD PTR _actualLength$[ebp]
	mov	DWORD PTR [eax], ecx
$LN1@utrie2_ope:
; Line 231
	mov	eax, DWORD PTR _trie$[ebp]
$LN18@utrie2_ope:
; Line 232
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN22@utrie2_ope
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 308				; 00000134H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN22@utrie2_ope:
	DD	1
	DD	$LN21@utrie2_ope
$LN21@utrie2_ope:
	DD	-96					; ffffffa0H
	DD	56					; 00000038H
	DD	$LN20@utrie2_ope
$LN20@utrie2_ope:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	84					; 00000054H
	DB	114					; 00000072H
	DB	105					; 00000069H
	DB	101					; 00000065H
	DB	0
_utrie2_openFromSerialized_56 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?U_FAILURE@@YACW4UErrorCode@@@Z
_TEXT	SEGMENT
_code$ = 8						; size = 4
?U_FAILURE@@YACW4UErrorCode@@@Z PROC			; U_FAILURE, COMDAT
; File d:\mozilla\intl\icu\source\common\unicode\utypes.h
; Line 705
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	cmp	DWORD PTR _code$[ebp], 0
	setg	al
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?U_FAILURE@@YACW4UErrorCode@@@Z ENDP			; U_FAILURE
_TEXT	ENDS
PUBLIC	_utrie2_openDummy_56
EXTRN	_uprv_free_56:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _utrie2_openDummy_56
_TEXT	SEGMENT
tv156 = -304						; size = 4
_dataMove$ = -104					; size = 4
_i$ = -92						; size = 4
_length$ = -80						; size = 4
_dataLength$ = -68					; size = 4
_indexLength$ = -56					; size = 4
_dest16$ = -44						; size = 4
_p$ = -32						; size = 4
_header$ = -20						; size = 4
_trie$ = -8						; size = 4
_valueBits$ = 8						; size = 4
_initialValue$ = 12					; size = 4
_errorValue$ = 16					; size = 4
_pErrorCode$ = 20					; size = 4
_utrie2_openDummy_56 PROC				; COMDAT
; File d:\mozilla\intl\icu\source\common\utrie2.cpp
; Line 237
	push	ebp
	mov	ebp, esp
	sub	esp, 304				; 00000130H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-304]
	mov	ecx, 76					; 0000004cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 245
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN41@utrie2_ope@2
; Line 246
	xor	eax, eax
	jmp	$LN42@utrie2_ope@2
$LN41@utrie2_ope@2:
; Line 249
	cmp	DWORD PTR _valueBits$[ebp], 0
	jl	SHORT $LN39@utrie2_ope@2
	cmp	DWORD PTR _valueBits$[ebp], 2
	jl	SHORT $LN40@utrie2_ope@2
$LN39@utrie2_ope@2:
; Line 250
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 1
; Line 251
	xor	eax, eax
	jmp	$LN42@utrie2_ope@2
$LN40@utrie2_ope@2:
; Line 255
	mov	DWORD PTR _indexLength$[ebp], 2112	; 00000840H
; Line 256
	mov	DWORD PTR _dataLength$[ebp], 196	; 000000c4H
; Line 257
	mov	eax, DWORD PTR _indexLength$[ebp]
	lea	ecx, DWORD PTR [eax+eax+16]
	mov	DWORD PTR _length$[ebp], ecx
; Line 258
	cmp	DWORD PTR _valueBits$[ebp], 0
	jne	SHORT $LN38@utrie2_ope@2
; Line 259
	mov	eax, DWORD PTR _dataLength$[ebp]
	mov	ecx, DWORD PTR _length$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR _length$[ebp], edx
; Line 260
	jmp	SHORT $LN37@utrie2_ope@2
$LN38@utrie2_ope@2:
; Line 261
	mov	eax, DWORD PTR _dataLength$[ebp]
	mov	ecx, DWORD PTR _length$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _length$[ebp], edx
$LN37@utrie2_ope@2:
; Line 265
	push	56					; 00000038H
	call	_uprv_malloc_56
	add	esp, 4
	mov	DWORD PTR _trie$[ebp], eax
; Line 266
	cmp	DWORD PTR _trie$[ebp], 0
	jne	SHORT $LN36@utrie2_ope@2
; Line 267
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 7
; Line 268
	xor	eax, eax
	jmp	$LN42@utrie2_ope@2
$LN36@utrie2_ope@2:
; Line 270
	push	56					; 00000038H
	push	0
	mov	eax, DWORD PTR _trie$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
; Line 271
	mov	eax, DWORD PTR _length$[ebp]
	push	eax
	call	_uprv_malloc_56
	add	esp, 4
	mov	ecx, DWORD PTR _trie$[ebp]
	mov	DWORD PTR [ecx+40], eax
; Line 272
	mov	eax, DWORD PTR _trie$[ebp]
	cmp	DWORD PTR [eax+40], 0
	jne	SHORT $LN35@utrie2_ope@2
; Line 273
	mov	eax, DWORD PTR _trie$[ebp]
	push	eax
	call	_uprv_free_56
	add	esp, 4
; Line 274
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 7
; Line 275
	xor	eax, eax
	jmp	$LN42@utrie2_ope@2
$LN35@utrie2_ope@2:
; Line 277
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR _length$[ebp]
	mov	DWORD PTR [eax+44], ecx
; Line 278
	mov	eax, DWORD PTR _trie$[ebp]
	mov	BYTE PTR [eax+48], 1
; Line 281
	cmp	DWORD PTR _valueBits$[ebp], 0
	jne	SHORT $LN34@utrie2_ope@2
; Line 282
	mov	eax, DWORD PTR _indexLength$[ebp]
	mov	DWORD PTR _dataMove$[ebp], eax
; Line 283
	jmp	SHORT $LN33@utrie2_ope@2
$LN34@utrie2_ope@2:
; Line 284
	mov	DWORD PTR _dataMove$[ebp], 0
$LN33@utrie2_ope@2:
; Line 287
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR _indexLength$[ebp]
	mov	DWORD PTR [eax+12], ecx
; Line 288
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR _dataLength$[ebp]
	mov	DWORD PTR [eax+16], ecx
; Line 289
	xor	eax, eax
	mov	ecx, DWORD PTR _trie$[ebp]
	mov	WORD PTR [ecx+20], ax
; Line 290
	mov	eax, DWORD PTR _trie$[ebp]
	mov	cx, WORD PTR _dataMove$[ebp]
	mov	WORD PTR [eax+22], cx
; Line 291
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR _initialValue$[ebp]
	mov	DWORD PTR [eax+24], ecx
; Line 292
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR _errorValue$[ebp]
	mov	DWORD PTR [eax+28], ecx
; Line 293
	mov	eax, DWORD PTR _trie$[ebp]
	mov	DWORD PTR [eax+32], 0
; Line 294
	mov	eax, DWORD PTR _dataMove$[ebp]
	add	eax, 192				; 000000c0H
	mov	ecx, DWORD PTR _trie$[ebp]
	mov	DWORD PTR [ecx+36], eax
; Line 297
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR _header$[ebp], ecx
; Line 299
	mov	eax, DWORD PTR _header$[ebp]
	mov	DWORD PTR [eax], 1416784178		; 54726932H
; Line 300
	mov	eax, DWORD PTR _header$[ebp]
	mov	cx, WORD PTR _valueBits$[ebp]
	mov	WORD PTR [eax+4], cx
; Line 302
	mov	eax, DWORD PTR _header$[ebp]
	mov	cx, WORD PTR _indexLength$[ebp]
	mov	WORD PTR [eax+6], cx
; Line 303
	mov	eax, DWORD PTR _dataLength$[ebp]
	sar	eax, 2
	mov	ecx, DWORD PTR _header$[ebp]
	mov	WORD PTR [ecx+8], ax
; Line 304
	xor	eax, eax
	mov	ecx, DWORD PTR _header$[ebp]
	mov	WORD PTR [ecx+10], ax
; Line 305
	mov	eax, DWORD PTR _header$[ebp]
	mov	cx, WORD PTR _dataMove$[ebp]
	mov	WORD PTR [eax+12], cx
; Line 306
	xor	eax, eax
	mov	ecx, DWORD PTR _header$[ebp]
	mov	WORD PTR [ecx+14], ax
; Line 309
	mov	eax, DWORD PTR _header$[ebp]
	add	eax, 16					; 00000010H
	mov	DWORD PTR _dest16$[ebp], eax
; Line 310
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR _dest16$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 313
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN32@utrie2_ope@2
$LN31@utrie2_ope@2:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN32@utrie2_ope@2:
	cmp	DWORD PTR _i$[ebp], 2080		; 00000820H
	jge	SHORT $LN30@utrie2_ope@2
; Line 314
	mov	eax, DWORD PTR _dataMove$[ebp]
	sar	eax, 2
	mov	ecx, DWORD PTR _dest16$[ebp]
	mov	WORD PTR [ecx], ax
	mov	edx, DWORD PTR _dest16$[ebp]
	add	edx, 2
	mov	DWORD PTR _dest16$[ebp], edx
; Line 315
	jmp	SHORT $LN31@utrie2_ope@2
$LN30@utrie2_ope@2:
; Line 318
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN29@utrie2_ope@2
$LN28@utrie2_ope@2:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN29@utrie2_ope@2:
	cmp	DWORD PTR _i$[ebp], 2
	jge	SHORT $LN27@utrie2_ope@2
; Line 319
	mov	eax, DWORD PTR _dataMove$[ebp]
	add	eax, 128				; 00000080H
	mov	ecx, DWORD PTR _dest16$[ebp]
	mov	WORD PTR [ecx], ax
	mov	edx, DWORD PTR _dest16$[ebp]
	add	edx, 2
	mov	DWORD PTR _dest16$[ebp], edx
; Line 320
	jmp	SHORT $LN28@utrie2_ope@2
$LN27@utrie2_ope@2:
; Line 321
	jmp	SHORT $LN26@utrie2_ope@2
$LN25@utrie2_ope@2:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN26@utrie2_ope@2:
	cmp	DWORD PTR _i$[ebp], 32			; 00000020H
	jge	SHORT $LN24@utrie2_ope@2
; Line 322
	mov	eax, DWORD PTR _dest16$[ebp]
	mov	cx, WORD PTR _dataMove$[ebp]
	mov	WORD PTR [eax], cx
	mov	edx, DWORD PTR _dest16$[ebp]
	add	edx, 2
	mov	DWORD PTR _dest16$[ebp], edx
; Line 323
	jmp	SHORT $LN25@utrie2_ope@2
$LN24@utrie2_ope@2:
; Line 326
	mov	eax, DWORD PTR _valueBits$[ebp]
	mov	DWORD PTR tv156[ebp], eax
	cmp	DWORD PTR tv156[ebp], 0
	je	SHORT $LN21@utrie2_ope@2
	cmp	DWORD PTR tv156[ebp], 1
	je	$LN11@utrie2_ope@2
	jmp	$LN1@utrie2_ope@2
$LN21@utrie2_ope@2:
; Line 329
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR _dest16$[ebp]
	mov	DWORD PTR [eax+4], ecx
; Line 330
	mov	eax, DWORD PTR _trie$[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 331
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN20@utrie2_ope@2
$LN19@utrie2_ope@2:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN20@utrie2_ope@2:
	cmp	DWORD PTR _i$[ebp], 128			; 00000080H
	jge	SHORT $LN18@utrie2_ope@2
; Line 332
	mov	eax, DWORD PTR _dest16$[ebp]
	mov	cx, WORD PTR _initialValue$[ebp]
	mov	WORD PTR [eax], cx
	mov	edx, DWORD PTR _dest16$[ebp]
	add	edx, 2
	mov	DWORD PTR _dest16$[ebp], edx
; Line 333
	jmp	SHORT $LN19@utrie2_ope@2
$LN18@utrie2_ope@2:
; Line 334
	jmp	SHORT $LN17@utrie2_ope@2
$LN16@utrie2_ope@2:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN17@utrie2_ope@2:
	cmp	DWORD PTR _i$[ebp], 192			; 000000c0H
	jge	SHORT $LN15@utrie2_ope@2
; Line 335
	mov	eax, DWORD PTR _dest16$[ebp]
	mov	cx, WORD PTR _errorValue$[ebp]
	mov	WORD PTR [eax], cx
	mov	edx, DWORD PTR _dest16$[ebp]
	add	edx, 2
	mov	DWORD PTR _dest16$[ebp], edx
; Line 336
	jmp	SHORT $LN16@utrie2_ope@2
$LN15@utrie2_ope@2:
; Line 338
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN14@utrie2_ope@2
$LN13@utrie2_ope@2:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN14@utrie2_ope@2:
	cmp	DWORD PTR _i$[ebp], 4
	jge	SHORT $LN12@utrie2_ope@2
; Line 339
	mov	eax, DWORD PTR _dest16$[ebp]
	mov	cx, WORD PTR _initialValue$[ebp]
	mov	WORD PTR [eax], cx
	mov	edx, DWORD PTR _dest16$[ebp]
	add	edx, 2
	mov	DWORD PTR _dest16$[ebp], edx
; Line 340
	jmp	SHORT $LN13@utrie2_ope@2
$LN12@utrie2_ope@2:
; Line 341
	jmp	$LN22@utrie2_ope@2
$LN11@utrie2_ope@2:
; Line 344
	mov	eax, DWORD PTR _dest16$[ebp]
	mov	DWORD PTR _p$[ebp], eax
; Line 345
	mov	eax, DWORD PTR _trie$[ebp]
	mov	DWORD PTR [eax+4], 0
; Line 346
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 347
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN10@utrie2_ope@2
$LN9@utrie2_ope@2:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN10@utrie2_ope@2:
	cmp	DWORD PTR _i$[ebp], 128			; 00000080H
	jge	SHORT $LN8@utrie2_ope@2
; Line 348
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _initialValue$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 4
	mov	DWORD PTR _p$[ebp], edx
; Line 349
	jmp	SHORT $LN9@utrie2_ope@2
$LN8@utrie2_ope@2:
; Line 350
	jmp	SHORT $LN7@utrie2_ope@2
$LN6@utrie2_ope@2:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN7@utrie2_ope@2:
	cmp	DWORD PTR _i$[ebp], 192			; 000000c0H
	jge	SHORT $LN5@utrie2_ope@2
; Line 351
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _errorValue$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 4
	mov	DWORD PTR _p$[ebp], edx
; Line 352
	jmp	SHORT $LN6@utrie2_ope@2
$LN5@utrie2_ope@2:
; Line 354
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@utrie2_ope@2
$LN3@utrie2_ope@2:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@utrie2_ope@2:
	cmp	DWORD PTR _i$[ebp], 4
	jge	SHORT $LN2@utrie2_ope@2
; Line 355
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _initialValue$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 4
	mov	DWORD PTR _p$[ebp], edx
; Line 356
	jmp	SHORT $LN3@utrie2_ope@2
$LN2@utrie2_ope@2:
; Line 357
	jmp	SHORT $LN22@utrie2_ope@2
$LN1@utrie2_ope@2:
; Line 359
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 1
; Line 360
	xor	eax, eax
	jmp	SHORT $LN42@utrie2_ope@2
$LN22@utrie2_ope@2:
; Line 363
	mov	eax, DWORD PTR _trie$[ebp]
$LN42@utrie2_ope@2:
; Line 364
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 304				; 00000130H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_utrie2_openDummy_56 ENDP
_TEXT	ENDS
PUBLIC	_utrie2_close_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _utrie2_close_56
_TEXT	SEGMENT
_trie$ = 8						; size = 4
_utrie2_close_56 PROC					; COMDAT
; Line 367
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 368
	cmp	DWORD PTR _trie$[ebp], 0
	je	SHORT $LN4@utrie2_clo
; Line 369
	mov	eax, DWORD PTR _trie$[ebp]
	movsx	ecx, BYTE PTR [eax+48]
	test	ecx, ecx
	je	SHORT $LN2@utrie2_clo
; Line 370
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	call	_uprv_free_56
	add	esp, 4
$LN2@utrie2_clo:
; Line 372
	mov	eax, DWORD PTR _trie$[ebp]
	cmp	DWORD PTR [eax+52], 0
	je	SHORT $LN1@utrie2_clo
; Line 373
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	mov	edx, DWORD PTR [ecx+144128]
	push	edx
	call	_uprv_free_56
	add	esp, 4
; Line 374
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	push	ecx
	call	_uprv_free_56
	add	esp, 4
$LN1@utrie2_clo:
; Line 376
	mov	eax, DWORD PTR _trie$[ebp]
	push	eax
	call	_uprv_free_56
	add	esp, 4
$LN4@utrie2_clo:
; Line 378
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_utrie2_close_56 ENDP
_TEXT	ENDS
PUBLIC	_utrie2_getVersion_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _utrie2_getVersion_56
_TEXT	SEGMENT
_signature$ = -8					; size = 4
_data$ = 8						; size = 4
_length$ = 12						; size = 4
_anyEndianOk$ = 16					; size = 1
_utrie2_getVersion_56 PROC				; COMDAT
; Line 381
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 383
	cmp	DWORD PTR _length$[ebp], 16		; 00000010H
	jl	SHORT $LN5@utrie2_get@3
	cmp	DWORD PTR _data$[ebp], 0
	je	SHORT $LN5@utrie2_get@3
	mov	eax, DWORD PTR _data$[ebp]
	and	eax, 3
	je	SHORT $LN6@utrie2_get@3
$LN5@utrie2_get@3:
; Line 384
	xor	eax, eax
	jmp	SHORT $LN7@utrie2_get@3
$LN6@utrie2_get@3:
; Line 386
	mov	eax, DWORD PTR _data$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _signature$[ebp], ecx
; Line 387
	cmp	DWORD PTR _signature$[ebp], 1416784178	; 54726932H
	jne	SHORT $LN4@utrie2_get@3
; Line 388
	mov	eax, 2
	jmp	SHORT $LN7@utrie2_get@3
$LN4@utrie2_get@3:
; Line 390
	movsx	eax, BYTE PTR _anyEndianOk$[ebp]
	test	eax, eax
	je	SHORT $LN3@utrie2_get@3
	cmp	DWORD PTR _signature$[ebp], 845771348	; 32697254H
	jne	SHORT $LN3@utrie2_get@3
; Line 391
	mov	eax, 2
	jmp	SHORT $LN7@utrie2_get@3
$LN3@utrie2_get@3:
; Line 393
	cmp	DWORD PTR _signature$[ebp], 1416784229	; 54726965H
	jne	SHORT $LN2@utrie2_get@3
; Line 394
	mov	eax, 1
	jmp	SHORT $LN7@utrie2_get@3
$LN2@utrie2_get@3:
; Line 396
	movsx	eax, BYTE PTR _anyEndianOk$[ebp]
	test	eax, eax
	je	SHORT $LN1@utrie2_get@3
	cmp	DWORD PTR _signature$[ebp], 1701409364	; 65697254H
	jne	SHORT $LN1@utrie2_get@3
; Line 397
	mov	eax, 1
	jmp	SHORT $LN7@utrie2_get@3
$LN1@utrie2_get@3:
; Line 399
	xor	eax, eax
$LN7@utrie2_get@3:
; Line 400
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_utrie2_getVersion_56 ENDP
_TEXT	ENDS
PUBLIC	_utrie2_isFrozen_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _utrie2_isFrozen_56
_TEXT	SEGMENT
_trie$ = 8						; size = 4
_utrie2_isFrozen_56 PROC				; COMDAT
; Line 403
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 404
	mov	eax, DWORD PTR _trie$[ebp]
	cmp	DWORD PTR [eax+52], 0
	sete	al
; Line 405
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_utrie2_isFrozen_56 ENDP
_TEXT	ENDS
PUBLIC	_utrie2_serialize_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _utrie2_serialize_56
_TEXT	SEGMENT
_trie$ = 8						; size = 4
_data$ = 12						; size = 4
_capacity$ = 16						; size = 4
_pErrorCode$ = 20					; size = 4
_utrie2_serialize_56 PROC				; COMDAT
; Line 410
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 412
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN6@utrie2_ser
; Line 413
	xor	eax, eax
	jmp	$LN7@utrie2_ser
$LN6@utrie2_ser:
; Line 418
	cmp	DWORD PTR _trie$[ebp], 0
	je	SHORT $LN4@utrie2_ser
	mov	eax, DWORD PTR _trie$[ebp]
	cmp	DWORD PTR [eax+40], 0
	je	SHORT $LN4@utrie2_ser
	mov	eax, DWORD PTR _trie$[ebp]
	cmp	DWORD PTR [eax+52], 0
	jne	SHORT $LN4@utrie2_ser
	cmp	DWORD PTR _capacity$[ebp], 0
	jl	SHORT $LN4@utrie2_ser
	cmp	DWORD PTR _capacity$[ebp], 0
	jle	SHORT $LN5@utrie2_ser
	cmp	DWORD PTR _data$[ebp], 0
	je	SHORT $LN4@utrie2_ser
	mov	eax, DWORD PTR _data$[ebp]
	and	eax, 3
	je	SHORT $LN5@utrie2_ser
$LN4@utrie2_ser:
; Line 419
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 1
; Line 420
	xor	eax, eax
	jmp	SHORT $LN7@utrie2_ser
$LN5@utrie2_ser:
; Line 423
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR _capacity$[ebp]
	cmp	ecx, DWORD PTR [eax+44]
	jl	SHORT $LN2@utrie2_ser
; Line 424
	push	1
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	call	_uprv_checkValidMemory
	add	esp, 8
	mov	edx, DWORD PTR _trie$[ebp]
	mov	eax, DWORD PTR [edx+44]
	push	eax
	mov	ecx, DWORD PTR _trie$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	push	edx
	mov	eax, DWORD PTR _data$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 425
	jmp	SHORT $LN1@utrie2_ser
$LN2@utrie2_ser:
; Line 426
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
$LN1@utrie2_ser:
; Line 428
	mov	eax, DWORD PTR _trie$[ebp]
	mov	eax, DWORD PTR [eax+44]
$LN7@utrie2_ser:
; Line 429
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_utrie2_serialize_56 ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_utrie2_swap_56
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _utrie2_swap_56
_TEXT	SEGMENT
tv150 = -284						; size = 4
tv134 = -284						; size = 4
_outTrie$41604 = -84					; size = 4
_valueBits$ = -72					; size = 4
_size$ = -60						; size = 4
_dataLength$ = -48					; size = 4
_trie$ = -36						; size = 16
_inTrie$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_ds$ = 8						; size = 4
_inData$ = 12						; size = 4
_length$ = 16						; size = 4
_outData$ = 20						; size = 4
_pErrorCode$ = 24					; size = 4
_utrie2_swap_56 PROC					; COMDAT
; Line 434
	push	ebp
	mov	ebp, esp
	sub	esp, 284				; 0000011cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-284]
	mov	ecx, 71					; 00000047H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 440
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN18@utrie2_swa
; Line 441
	xor	eax, eax
	jmp	$LN19@utrie2_swa
$LN18@utrie2_swa:
; Line 443
	cmp	DWORD PTR _ds$[ebp], 0
	je	SHORT $LN16@utrie2_swa
	cmp	DWORD PTR _inData$[ebp], 0
	je	SHORT $LN16@utrie2_swa
	cmp	DWORD PTR _length$[ebp], 0
	jl	SHORT $LN17@utrie2_swa
	cmp	DWORD PTR _outData$[ebp], 0
	jne	SHORT $LN17@utrie2_swa
$LN16@utrie2_swa:
; Line 444
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 1
; Line 445
	xor	eax, eax
	jmp	$LN19@utrie2_swa
$LN17@utrie2_swa:
; Line 449
	cmp	DWORD PTR _length$[ebp], 0
	jl	SHORT $LN15@utrie2_swa
	cmp	DWORD PTR _length$[ebp], 16		; 00000010H
	jge	SHORT $LN15@utrie2_swa
; Line 450
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 8
; Line 451
	xor	eax, eax
	jmp	$LN19@utrie2_swa
$LN15@utrie2_swa:
; Line 454
	mov	eax, DWORD PTR _inData$[ebp]
	mov	DWORD PTR _inTrie$[ebp], eax
; Line 455
	mov	esi, esp
	mov	eax, DWORD PTR _inTrie$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _ds$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _trie$[ebp], eax
; Line 456
	mov	esi, esp
	mov	eax, DWORD PTR _inTrie$[ebp]
	movzx	ecx, WORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _ds$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	WORD PTR _trie$[ebp+4], ax
; Line 457
	mov	esi, esp
	mov	eax, DWORD PTR _inTrie$[ebp]
	movzx	ecx, WORD PTR [eax+6]
	push	ecx
	mov	edx, DWORD PTR _ds$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	WORD PTR _trie$[ebp+6], ax
; Line 458
	mov	esi, esp
	mov	eax, DWORD PTR _inTrie$[ebp]
	movzx	ecx, WORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _ds$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	WORD PTR _trie$[ebp+8], ax
; Line 460
	movzx	eax, WORD PTR _trie$[ebp+4]
	and	eax, 15					; 0000000fH
	mov	DWORD PTR _valueBits$[ebp], eax
; Line 461
	movzx	eax, WORD PTR _trie$[ebp+8]
	shl	eax, 2
	mov	DWORD PTR _dataLength$[ebp], eax
; Line 467
	cmp	DWORD PTR _trie$[ebp], 1416784178	; 54726932H
	jne	SHORT $LN13@utrie2_swa
	cmp	DWORD PTR _valueBits$[ebp], 0
	jl	SHORT $LN13@utrie2_swa
	cmp	DWORD PTR _valueBits$[ebp], 2
	jge	SHORT $LN13@utrie2_swa
	movzx	eax, WORD PTR _trie$[ebp+6]
	cmp	eax, 2112				; 00000840H
	jl	SHORT $LN13@utrie2_swa
	cmp	DWORD PTR _dataLength$[ebp], 192	; 000000c0H
	jge	SHORT $LN14@utrie2_swa
$LN13@utrie2_swa:
; Line 468
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 3
; Line 469
	xor	eax, eax
	jmp	$LN19@utrie2_swa
$LN14@utrie2_swa:
; Line 472
	movzx	eax, WORD PTR _trie$[ebp+6]
	lea	ecx, DWORD PTR [eax+eax+16]
	mov	DWORD PTR _size$[ebp], ecx
; Line 473
	mov	eax, DWORD PTR _valueBits$[ebp]
	mov	DWORD PTR tv134[ebp], eax
	cmp	DWORD PTR tv134[ebp], 0
	je	SHORT $LN10@utrie2_swa
	cmp	DWORD PTR tv134[ebp], 1
	je	SHORT $LN9@utrie2_swa
	jmp	SHORT $LN8@utrie2_swa
$LN10@utrie2_swa:
; Line 475
	mov	eax, DWORD PTR _dataLength$[ebp]
	mov	ecx, DWORD PTR _size$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR _size$[ebp], edx
; Line 476
	jmp	SHORT $LN11@utrie2_swa
$LN9@utrie2_swa:
; Line 478
	mov	eax, DWORD PTR _dataLength$[ebp]
	mov	ecx, DWORD PTR _size$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _size$[ebp], edx
; Line 479
	jmp	SHORT $LN11@utrie2_swa
$LN8@utrie2_swa:
; Line 481
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 3
; Line 482
	xor	eax, eax
	jmp	$LN19@utrie2_swa
$LN11@utrie2_swa:
; Line 485
	cmp	DWORD PTR _length$[ebp], 0
	jl	$LN7@utrie2_swa
; Line 488
	mov	eax, DWORD PTR _length$[ebp]
	cmp	eax, DWORD PTR _size$[ebp]
	jge	SHORT $LN6@utrie2_swa
; Line 489
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 8
; Line 490
	xor	eax, eax
	jmp	$LN19@utrie2_swa
$LN6@utrie2_swa:
; Line 493
	mov	eax, DWORD PTR _outData$[ebp]
	mov	DWORD PTR _outTrie$41604[ebp], eax
; Line 496
	mov	esi, esp
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _outTrie$41604[ebp]
	push	ecx
	push	4
	mov	edx, DWORD PTR _inTrie$[ebp]
	push	edx
	mov	eax, DWORD PTR _ds$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ds$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	call	edx
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 497
	mov	esi, esp
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _outTrie$41604[ebp]
	add	ecx, 4
	push	ecx
	push	12					; 0000000cH
	mov	edx, DWORD PTR _inTrie$[ebp]
	add	edx, 4
	push	edx
	mov	eax, DWORD PTR _ds$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ds$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	call	edx
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 500
	mov	eax, DWORD PTR _valueBits$[ebp]
	mov	DWORD PTR tv150[ebp], eax
	cmp	DWORD PTR tv150[ebp], 0
	je	SHORT $LN3@utrie2_swa
	cmp	DWORD PTR tv150[ebp], 1
	je	SHORT $LN2@utrie2_swa
	jmp	$LN1@utrie2_swa
$LN3@utrie2_swa:
; Line 502
	mov	esi, esp
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _outTrie$41604[ebp]
	add	ecx, 16					; 00000010H
	push	ecx
	movzx	edx, WORD PTR _trie$[ebp+6]
	add	edx, DWORD PTR _dataLength$[ebp]
	shl	edx, 1
	push	edx
	mov	eax, DWORD PTR _inTrie$[ebp]
	add	eax, 16					; 00000010H
	push	eax
	mov	ecx, DWORD PTR _ds$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ds$[ebp]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 503
	jmp	SHORT $LN7@utrie2_swa
$LN2@utrie2_swa:
; Line 505
	mov	esi, esp
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _outTrie$41604[ebp]
	add	ecx, 16					; 00000010H
	push	ecx
	movzx	edx, WORD PTR _trie$[ebp+6]
	shl	edx, 1
	push	edx
	mov	eax, DWORD PTR _inTrie$[ebp]
	add	eax, 16					; 00000010H
	push	eax
	mov	ecx, DWORD PTR _ds$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ds$[ebp]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 507
	mov	esi, esp
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	movzx	ecx, WORD PTR _trie$[ebp+6]
	mov	edx, DWORD PTR _outTrie$41604[ebp]
	lea	eax, DWORD PTR [edx+ecx*2+16]
	push	eax
	mov	ecx, DWORD PTR _dataLength$[ebp]
	shl	ecx, 2
	push	ecx
	movzx	edx, WORD PTR _trie$[ebp+6]
	mov	eax, DWORD PTR _inTrie$[ebp]
	lea	ecx, DWORD PTR [eax+edx*2+16]
	push	ecx
	mov	edx, DWORD PTR _ds$[ebp]
	push	edx
	mov	eax, DWORD PTR _ds$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	call	ecx
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 508
	jmp	SHORT $LN7@utrie2_swa
$LN1@utrie2_swa:
; Line 510
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 3
; Line 511
	xor	eax, eax
	jmp	SHORT $LN19@utrie2_swa
$LN7@utrie2_swa:
; Line 515
	mov	eax, DWORD PTR _size$[ebp]
$LN19@utrie2_swa:
; Line 516
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN23@utrie2_swa
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 284				; 0000011cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN23@utrie2_swa:
	DD	1
	DD	$LN22@utrie2_swa
$LN22@utrie2_swa:
	DD	-36					; ffffffdcH
	DD	16					; 00000010H
	DD	$LN21@utrie2_swa
$LN21@utrie2_swa:
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	105					; 00000069H
	DB	101					; 00000065H
	DB	0
_utrie2_swap_56 ENDP
_TEXT	ENDS
PUBLIC	_utrie2_enum_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _utrie2_enum_56
_TEXT	SEGMENT
_trie$ = 8						; size = 4
_enumValue$ = 12					; size = 4
_enumRange$ = 16					; size = 4
_context$ = 20						; size = 4
_utrie2_enum_56 PROC					; COMDAT
; Line 724
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 725
	mov	eax, DWORD PTR _context$[ebp]
	push	eax
	mov	ecx, DWORD PTR _enumRange$[ebp]
	push	ecx
	mov	edx, DWORD PTR _enumValue$[ebp]
	push	edx
	push	1114112					; 00110000H
	push	0
	mov	eax, DWORD PTR _trie$[ebp]
	push	eax
	call	?enumEitherTrie@@YAXPBUUTrie2@@HHP6AIPBXI@ZP6AC1HHI@Z1@Z ; enumEitherTrie
	add	esp, 24					; 00000018H
; Line 726
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_utrie2_enum_56 ENDP
_TEXT	ENDS
PUBLIC	??_C@_1BE@PBHNKIKN@?$AAd?$AAa?$AAt?$AAa?$AA3?$AA2?$AA?$CB?$AA?$DN?$AA0?$AA?$AA@ ; `string'
PUBLIC	??_C@_1O@LPBGOKFA@?$AAi?$AAd?$AAx?$AA?$CB?$AA?$DN?$AA0?$AA?$AA@ ; `string'
PUBLIC	??_C@_1FK@PALNECJH@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@ ; `string'
PUBLIC	?__LINE__Var@?1??enumEitherTrie@@YAXPBUUTrie2@@HHP6AIPBXI@ZP6AC1HHI@Z1@Z@4JA@d5d937bd ; `enumEitherTrie'::`2'::__LINE__Var
EXTRN	__imp___wassert:PROC
;	COMDAT ??_C@_1BE@PBHNKIKN@?$AAd?$AAa?$AAt?$AAa?$AA3?$AA2?$AA?$CB?$AA?$DN?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_1BE@PBHNKIKN@?$AAd?$AAa?$AAt?$AAa?$AA3?$AA2?$AA?$CB?$AA?$DN?$AA0?$AA?$AA@ DB 'd'
	DB	00H, 'a', 00H, 't', 00H, 'a', 00H, '3', 00H, '2', 00H, '!', 00H
	DB	'=', 00H, '0', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1O@LPBGOKFA@?$AAi?$AAd?$AAx?$AA?$CB?$AA?$DN?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_1O@LPBGOKFA@?$AAi?$AAd?$AAx?$AA?$CB?$AA?$DN?$AA0?$AA?$AA@ DB 'i', 00H
	DB	'd', 00H, 'x', 00H, '!', 00H, '=', 00H, '0', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1FK@PALNECJH@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@
CONST	SEGMENT
??_C@_1FK@PALNECJH@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@ DB 'd'
	DB	00H, ':', 00H, '\', 00H, 'm', 00H, 'o', 00H, 'z', 00H, 'i', 00H
	DB	'l', 00H, 'l', 00H, 'a', 00H, '\', 00H, 'i', 00H, 'n', 00H, 't'
	DB	00H, 'l', 00H, '\', 00H, 'i', 00H, 'c', 00H, 'u', 00H, '\', 00H
	DB	's', 00H, 'o', 00H, 'u', 00H, 'r', 00H, 'c', 00H, 'e', 00H, '\'
	DB	00H, 'c', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'o', 00H, 'n', 00H
	DB	'\', 00H, 'u', 00H, 't', 00H, 'r', 00H, 'i', 00H, 'e', 00H, '2'
	DB	00H, '.', 00H, 'c', 00H, 'p', 00H, 'p', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??enumEitherTrie@@YAXPBUUTrie2@@HHP6AIPBXI@ZP6AC1HHI@Z1@Z@4JA@d5d937bd
_DATA	SEGMENT
?__LINE__Var@?1??enumEitherTrie@@YAXPBUUTrie2@@HHP6AIPBXI@ZP6AC1HHI@Z1@Z@4JA@d5d937bd DD 0223H ; `enumEitherTrie'::`2'::__LINE__Var
; Function compile flags: /Odtp /RTCsu /ZI
_DATA	ENDS
;	COMDAT ?enumEitherTrie@@YAXPBUUTrie2@@HHP6AIPBXI@ZP6AC1HHI@Z1@Z
_TEXT	SEGMENT
tv240 = -424						; size = 4
tv215 = -424						; size = 4
tv141 = -424						; size = 4
tv139 = -424						; size = 4
_highValue$41695 = -224					; size = 4
_i2Limit$41673 = -212					; size = 4
_i2$41672 = -200					; size = 4
_tempLimit$41657 = -188					; size = 4
_nullBlock$ = -176					; size = 4
_prevBlock$ = -164					; size = 4
_block$ = -152						; size = 4
_index2NullOffset$ = -140				; size = 4
_prevI2Block$ = -128					; size = 4
_i2Block$ = -116					; size = 4
_j$ = -104						; size = 4
_highStart$ = -92					; size = 4
_prev$ = -80						; size = 4
_c$ = -68						; size = 4
_initialValue$ = -56					; size = 4
_prevValue$ = -44					; size = 4
_value$ = -32						; size = 4
_idx$ = -20						; size = 4
_data32$ = -8						; size = 4
_trie$ = 8						; size = 4
_start$ = 12						; size = 4
_limit$ = 16						; size = 4
_enumValue$ = 20					; size = 4
_enumRange$ = 24					; size = 4
_context$ = 28						; size = 4
?enumEitherTrie@@YAXPBUUTrie2@@HHP6AIPBXI@ZP6AC1HHI@Z1@Z PROC ; enumEitherTrie, COMDAT
; Line 547
	push	ebp
	mov	ebp, esp
	sub	esp, 424				; 000001a8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-424]
	mov	ecx, 106				; 0000006aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 555
	cmp	DWORD PTR _enumRange$[ebp], 0
	jne	SHORT $LN44@enumEither
; Line 556
	jmp	$LN45@enumEither
$LN44@enumEither:
; Line 558
	cmp	DWORD PTR _enumValue$[ebp], 0
	jne	SHORT $LN43@enumEither
; Line 559
	mov	DWORD PTR _enumValue$[ebp], OFFSET ?enumSameValue@@YAIPBXI@Z ; enumSameValue
$LN43@enumEither:
; Line 562
	mov	eax, DWORD PTR _trie$[ebp]
	cmp	DWORD PTR [eax+52], 0
	jne	SHORT $LN42@enumEither
; Line 564
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _idx$[ebp], ecx
; Line 565
	cmp	DWORD PTR _idx$[ebp], 0
	jne	SHORT $LN47@enumEither
	mov	eax, DWORD PTR ?__LINE__Var@?1??enumEitherTrie@@YAXPBUUTrie2@@HHP6AIPBXI@ZP6AC1HHI@Z1@Z@4JA@d5d937bd
	add	eax, 18					; 00000012H
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1FK@PALNECJH@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@
	push	OFFSET ??_C@_1O@LPBGOKFA@?$AAi?$AAd?$AAx?$AA?$CB?$AA?$DN?$AA0?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN47@enumEither:
; Line 566
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _data32$[ebp], ecx
; Line 568
	mov	eax, DWORD PTR _trie$[ebp]
	movzx	ecx, WORD PTR [eax+20]
	mov	DWORD PTR _index2NullOffset$[ebp], ecx
; Line 569
	mov	eax, DWORD PTR _trie$[ebp]
	movzx	ecx, WORD PTR [eax+22]
	mov	DWORD PTR _nullBlock$[ebp], ecx
; Line 570
	jmp	SHORT $LN41@enumEither
$LN42@enumEither:
; Line 572
	mov	DWORD PTR _idx$[ebp], 0
; Line 573
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	mov	edx, DWORD PTR [ecx+144128]
	mov	DWORD PTR _data32$[ebp], edx
; Line 574
	cmp	DWORD PTR _data32$[ebp], 0
	jne	SHORT $LN48@enumEither
	mov	eax, DWORD PTR ?__LINE__Var@?1??enumEitherTrie@@YAXPBUUTrie2@@HHP6AIPBXI@ZP6AC1HHI@Z1@Z@4JA@d5d937bd
	add	eax, 27					; 0000001bH
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1FK@PALNECJH@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@
	push	OFFSET ??_C@_1BE@PBHNKIKN@?$AAd?$AAa?$AAt?$AAa?$AA3?$AA2?$AA?$CB?$AA?$DN?$AA0?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN48@enumEither:
; Line 576
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	mov	edx, DWORD PTR [ecx+144156]
	mov	DWORD PTR _index2NullOffset$[ebp], edx
; Line 577
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	mov	edx, DWORD PTR [ecx+144160]
	mov	DWORD PTR _nullBlock$[ebp], edx
$LN41@enumEither:
; Line 580
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	DWORD PTR _highStart$[ebp], ecx
; Line 583
	mov	esi, esp
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	mov	edx, DWORD PTR _context$[ebp]
	push	edx
	call	DWORD PTR _enumValue$[ebp]
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _initialValue$[ebp], eax
; Line 586
	mov	DWORD PTR _prevI2Block$[ebp], -1
; Line 587
	mov	DWORD PTR _prevBlock$[ebp], -1
; Line 588
	mov	eax, DWORD PTR _start$[ebp]
	mov	DWORD PTR _prev$[ebp], eax
; Line 589
	mov	DWORD PTR _prevValue$[ebp], 0
; Line 592
	mov	eax, DWORD PTR _start$[ebp]
	mov	DWORD PTR _c$[ebp], eax
$LN40@enumEither:
	mov	eax, DWORD PTR _c$[ebp]
	cmp	eax, DWORD PTR _limit$[ebp]
	jge	$LN39@enumEither
	mov	eax, DWORD PTR _c$[ebp]
	cmp	eax, DWORD PTR _highStart$[ebp]
	jge	$LN39@enumEither
; Line 594
	mov	eax, DWORD PTR _c$[ebp]
	add	eax, 2048				; 00000800H
	mov	DWORD PTR _tempLimit$41657[ebp], eax
; Line 595
	mov	eax, DWORD PTR _limit$[ebp]
	cmp	eax, DWORD PTR _tempLimit$41657[ebp]
	jge	SHORT $LN38@enumEither
; Line 596
	mov	eax, DWORD PTR _limit$[ebp]
	mov	DWORD PTR _tempLimit$41657[ebp], eax
$LN38@enumEither:
; Line 598
	cmp	DWORD PTR _c$[ebp], 65535		; 0000ffffH
	jg	$LN37@enumEither
; Line 599
	mov	eax, DWORD PTR _c$[ebp]
	and	eax, -2048				; fffff800H
	cmp	eax, 55296				; 0000d800H
	je	SHORT $LN36@enumEither
; Line 600
	mov	eax, DWORD PTR _c$[ebp]
	sar	eax, 5
	mov	DWORD PTR _i2Block$[ebp], eax
	jmp	SHORT $LN35@enumEither
$LN36@enumEither:
; Line 601
	mov	eax, DWORD PTR _c$[ebp]
	and	eax, 1024				; 00000400H
	jne	SHORT $LN34@enumEither
; Line 606
	mov	DWORD PTR _i2Block$[ebp], 2048		; 00000800H
; Line 607
	cmp	DWORD PTR _limit$[ebp], 56320		; 0000dc00H
	jle	SHORT $LN49@enumEither
	mov	DWORD PTR tv139[ebp], 56320		; 0000dc00H
	jmp	SHORT $LN50@enumEither
$LN49@enumEither:
	mov	eax, DWORD PTR _limit$[ebp]
	mov	DWORD PTR tv139[ebp], eax
$LN50@enumEither:
	mov	ecx, DWORD PTR tv139[ebp]
	mov	DWORD PTR _tempLimit$41657[ebp], ecx
; Line 608
	jmp	SHORT $LN35@enumEither
$LN34@enumEither:
; Line 613
	mov	DWORD PTR _i2Block$[ebp], 1728		; 000006c0H
; Line 614
	cmp	DWORD PTR _limit$[ebp], 57344		; 0000e000H
	jle	SHORT $LN51@enumEither
	mov	DWORD PTR tv141[ebp], 57344		; 0000e000H
	jmp	SHORT $LN52@enumEither
$LN51@enumEither:
	mov	eax, DWORD PTR _limit$[ebp]
	mov	DWORD PTR tv141[ebp], eax
$LN52@enumEither:
	mov	ecx, DWORD PTR tv141[ebp]
	mov	DWORD PTR _tempLimit$41657[ebp], ecx
$LN35@enumEither:
; Line 616
	jmp	SHORT $LN32@enumEither
$LN37@enumEither:
; Line 618
	cmp	DWORD PTR _idx$[ebp], 0
	je	SHORT $LN31@enumEither
; Line 620
	mov	eax, DWORD PTR _c$[ebp]
	sar	eax, 11					; 0000000bH
	mov	ecx, DWORD PTR _idx$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2+4160]
	mov	DWORD PTR _i2Block$[ebp], edx
; Line 621
	jmp	SHORT $LN30@enumEither
$LN31@enumEither:
; Line 622
	mov	eax, DWORD PTR _c$[ebp]
	sar	eax, 11					; 0000000bH
	mov	ecx, DWORD PTR _trie$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR [edx+eax*4]
	mov	DWORD PTR _i2Block$[ebp], eax
$LN30@enumEither:
; Line 624
	mov	eax, DWORD PTR _i2Block$[ebp]
	cmp	eax, DWORD PTR _prevI2Block$[ebp]
	jne	SHORT $LN32@enumEither
	mov	eax, DWORD PTR _c$[ebp]
	sub	eax, DWORD PTR _prev$[ebp]
	cmp	eax, 2048				; 00000800H
	jl	SHORT $LN32@enumEither
; Line 630
	mov	eax, DWORD PTR _c$[ebp]
	add	eax, 2048				; 00000800H
	mov	DWORD PTR _c$[ebp], eax
; Line 631
	jmp	$LN40@enumEither
$LN32@enumEither:
; Line 634
	mov	eax, DWORD PTR _i2Block$[ebp]
	mov	DWORD PTR _prevI2Block$[ebp], eax
; Line 635
	mov	eax, DWORD PTR _i2Block$[ebp]
	cmp	eax, DWORD PTR _index2NullOffset$[ebp]
	jne	SHORT $LN28@enumEither
; Line 637
	mov	eax, DWORD PTR _prevValue$[ebp]
	cmp	eax, DWORD PTR _initialValue$[ebp]
	je	SHORT $LN27@enumEither
; Line 638
	mov	eax, DWORD PTR _prev$[ebp]
	cmp	eax, DWORD PTR _c$[ebp]
	jge	SHORT $LN26@enumEither
	mov	esi, esp
	mov	eax, DWORD PTR _prevValue$[ebp]
	push	eax
	mov	ecx, DWORD PTR _c$[ebp]
	sub	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _prev$[ebp]
	push	edx
	mov	eax, DWORD PTR _context$[ebp]
	push	eax
	call	DWORD PTR _enumRange$[ebp]
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	movsx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN26@enumEither
; Line 639
	jmp	$LN45@enumEither
$LN26@enumEither:
; Line 641
	mov	eax, DWORD PTR _nullBlock$[ebp]
	mov	DWORD PTR _prevBlock$[ebp], eax
; Line 642
	mov	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR _prev$[ebp], eax
; Line 643
	mov	eax, DWORD PTR _initialValue$[ebp]
	mov	DWORD PTR _prevValue$[ebp], eax
$LN27@enumEither:
; Line 645
	mov	eax, DWORD PTR _c$[ebp]
	add	eax, 2048				; 00000800H
	mov	DWORD PTR _c$[ebp], eax
; Line 646
	jmp	$LN25@enumEither
$LN28@enumEither:
; Line 649
	mov	eax, DWORD PTR _c$[ebp]
	sar	eax, 5
	and	eax, 63					; 0000003fH
	mov	DWORD PTR _i2$41672[ebp], eax
; Line 650
	mov	eax, DWORD PTR _c$[ebp]
	sar	eax, 11					; 0000000bH
	mov	ecx, DWORD PTR _tempLimit$41657[ebp]
	sar	ecx, 11					; 0000000bH
	cmp	eax, ecx
	jne	SHORT $LN24@enumEither
; Line 651
	mov	eax, DWORD PTR _tempLimit$41657[ebp]
	sar	eax, 5
	and	eax, 63					; 0000003fH
	mov	DWORD PTR _i2Limit$41673[ebp], eax
; Line 652
	jmp	SHORT $LN23@enumEither
$LN24@enumEither:
; Line 653
	mov	DWORD PTR _i2Limit$41673[ebp], 64	; 00000040H
$LN23@enumEither:
; Line 654
	jmp	SHORT $LN22@enumEither
$LN21@enumEither:
; Line 655
	mov	eax, DWORD PTR _i2$41672[ebp]
	add	eax, 1
	mov	DWORD PTR _i2$41672[ebp], eax
$LN22@enumEither:
	mov	eax, DWORD PTR _i2$41672[ebp]
	cmp	eax, DWORD PTR _i2Limit$41673[ebp]
	jge	$LN25@enumEither
; Line 656
	cmp	DWORD PTR _idx$[ebp], 0
	je	SHORT $LN19@enumEither
; Line 657
	mov	eax, DWORD PTR _i2Block$[ebp]
	add	eax, DWORD PTR _i2$41672[ebp]
	mov	ecx, DWORD PTR _idx$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	shl	edx, 2
	mov	DWORD PTR _block$[ebp], edx
; Line 658
	jmp	SHORT $LN18@enumEither
$LN19@enumEither:
; Line 659
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	mov	edx, DWORD PTR _i2Block$[ebp]
	add	edx, DWORD PTR _i2$41672[ebp]
	mov	eax, DWORD PTR [ecx+edx*4+2176]
	mov	DWORD PTR _block$[ebp], eax
$LN18@enumEither:
; Line 661
	mov	eax, DWORD PTR _block$[ebp]
	cmp	eax, DWORD PTR _prevBlock$[ebp]
	jne	SHORT $LN17@enumEither
	mov	eax, DWORD PTR _c$[ebp]
	sub	eax, DWORD PTR _prev$[ebp]
	cmp	eax, 32					; 00000020H
	jl	SHORT $LN17@enumEither
; Line 663
	mov	eax, DWORD PTR _c$[ebp]
	add	eax, 32					; 00000020H
	mov	DWORD PTR _c$[ebp], eax
; Line 664
	jmp	$LN21@enumEither
$LN17@enumEither:
; Line 666
	mov	eax, DWORD PTR _block$[ebp]
	mov	DWORD PTR _prevBlock$[ebp], eax
; Line 667
	mov	eax, DWORD PTR _block$[ebp]
	cmp	eax, DWORD PTR _nullBlock$[ebp]
	jne	SHORT $LN16@enumEither
; Line 669
	mov	eax, DWORD PTR _prevValue$[ebp]
	cmp	eax, DWORD PTR _initialValue$[ebp]
	je	SHORT $LN15@enumEither
; Line 670
	mov	eax, DWORD PTR _prev$[ebp]
	cmp	eax, DWORD PTR _c$[ebp]
	jge	SHORT $LN14@enumEither
	mov	esi, esp
	mov	eax, DWORD PTR _prevValue$[ebp]
	push	eax
	mov	ecx, DWORD PTR _c$[ebp]
	sub	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _prev$[ebp]
	push	edx
	mov	eax, DWORD PTR _context$[ebp]
	push	eax
	call	DWORD PTR _enumRange$[ebp]
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	movsx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN14@enumEither
; Line 671
	jmp	$LN45@enumEither
$LN14@enumEither:
; Line 673
	mov	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR _prev$[ebp], eax
; Line 674
	mov	eax, DWORD PTR _initialValue$[ebp]
	mov	DWORD PTR _prevValue$[ebp], eax
$LN15@enumEither:
; Line 676
	mov	eax, DWORD PTR _c$[ebp]
	add	eax, 32					; 00000020H
	mov	DWORD PTR _c$[ebp], eax
; Line 677
	jmp	$LN13@enumEither
$LN16@enumEither:
; Line 678
	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN12@enumEither
$LN11@enumEither:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN12@enumEither:
	cmp	DWORD PTR _j$[ebp], 32			; 00000020H
	jge	$LN13@enumEither
; Line 679
	cmp	DWORD PTR _data32$[ebp], 0
	je	SHORT $LN53@enumEither
	mov	eax, DWORD PTR _block$[ebp]
	add	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _data32$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR tv215[ebp], edx
	jmp	SHORT $LN54@enumEither
$LN53@enumEither:
	mov	eax, DWORD PTR _block$[ebp]
	add	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _idx$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	mov	DWORD PTR tv215[ebp], edx
$LN54@enumEither:
	mov	esi, esp
	mov	eax, DWORD PTR tv215[ebp]
	push	eax
	mov	ecx, DWORD PTR _context$[ebp]
	push	ecx
	call	DWORD PTR _enumValue$[ebp]
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _value$[ebp], eax
; Line 680
	mov	eax, DWORD PTR _value$[ebp]
	cmp	eax, DWORD PTR _prevValue$[ebp]
	je	SHORT $LN9@enumEither
; Line 681
	mov	eax, DWORD PTR _prev$[ebp]
	cmp	eax, DWORD PTR _c$[ebp]
	jge	SHORT $LN8@enumEither
	mov	esi, esp
	mov	eax, DWORD PTR _prevValue$[ebp]
	push	eax
	mov	ecx, DWORD PTR _c$[ebp]
	sub	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _prev$[ebp]
	push	edx
	mov	eax, DWORD PTR _context$[ebp]
	push	eax
	call	DWORD PTR _enumRange$[ebp]
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	movsx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN8@enumEither
; Line 682
	jmp	$LN45@enumEither
$LN8@enumEither:
; Line 684
	mov	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR _prev$[ebp], eax
; Line 685
	mov	eax, DWORD PTR _value$[ebp]
	mov	DWORD PTR _prevValue$[ebp], eax
$LN9@enumEither:
; Line 687
	mov	eax, DWORD PTR _c$[ebp]
	add	eax, 1
	mov	DWORD PTR _c$[ebp], eax
; Line 688
	jmp	$LN11@enumEither
$LN13@enumEither:
; Line 690
	jmp	$LN21@enumEither
$LN25@enumEither:
; Line 692
	jmp	$LN40@enumEither
$LN39@enumEither:
; Line 694
	mov	eax, DWORD PTR _c$[ebp]
	cmp	eax, DWORD PTR _limit$[ebp]
	jle	SHORT $LN7@enumEither
; Line 695
	mov	eax, DWORD PTR _limit$[ebp]
	mov	DWORD PTR _c$[ebp], eax
	jmp	$LN6@enumEither
$LN7@enumEither:
; Line 696
	mov	eax, DWORD PTR _c$[ebp]
	cmp	eax, DWORD PTR _limit$[ebp]
	jge	$LN6@enumEither
; Line 699
	cmp	DWORD PTR _idx$[ebp], 0
	je	SHORT $LN4@enumEither
; Line 703
	cmp	DWORD PTR _data32$[ebp], 0
	je	SHORT $LN55@enumEither
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _data32$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR tv240[ebp], eax
	jmp	SHORT $LN56@enumEither
$LN55@enumEither:
	mov	ecx, DWORD PTR _trie$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR _idx$[ebp]
	movzx	ecx, WORD PTR [eax+edx*2]
	mov	DWORD PTR tv240[ebp], ecx
$LN56@enumEither:
	mov	edx, DWORD PTR tv240[ebp]
	mov	DWORD PTR _highValue$41695[ebp], edx
; Line 704
	jmp	SHORT $LN3@enumEither
$LN4@enumEither:
; Line 705
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	mov	edx, DWORD PTR _trie$[ebp]
	mov	eax, DWORD PTR [edx+52]
	mov	edx, DWORD PTR [eax+144148]
	mov	eax, DWORD PTR [ecx+144128]
	mov	ecx, DWORD PTR [eax+edx*4-16]
	mov	DWORD PTR _highValue$41695[ebp], ecx
$LN3@enumEither:
; Line 707
	mov	esi, esp
	mov	eax, DWORD PTR _highValue$41695[ebp]
	push	eax
	mov	ecx, DWORD PTR _context$[ebp]
	push	ecx
	call	DWORD PTR _enumValue$[ebp]
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _value$[ebp], eax
; Line 708
	mov	eax, DWORD PTR _value$[ebp]
	cmp	eax, DWORD PTR _prevValue$[ebp]
	je	SHORT $LN2@enumEither
; Line 709
	mov	eax, DWORD PTR _prev$[ebp]
	cmp	eax, DWORD PTR _c$[ebp]
	jge	SHORT $LN1@enumEither
	mov	esi, esp
	mov	eax, DWORD PTR _prevValue$[ebp]
	push	eax
	mov	ecx, DWORD PTR _c$[ebp]
	sub	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _prev$[ebp]
	push	edx
	mov	eax, DWORD PTR _context$[ebp]
	push	eax
	call	DWORD PTR _enumRange$[ebp]
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	movsx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN1@enumEither
; Line 710
	jmp	SHORT $LN45@enumEither
$LN1@enumEither:
; Line 712
	mov	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR _prev$[ebp], eax
; Line 713
	mov	eax, DWORD PTR _value$[ebp]
	mov	DWORD PTR _prevValue$[ebp], eax
$LN2@enumEither:
; Line 715
	mov	eax, DWORD PTR _limit$[ebp]
	mov	DWORD PTR _c$[ebp], eax
$LN6@enumEither:
; Line 719
	mov	esi, esp
	mov	eax, DWORD PTR _prevValue$[ebp]
	push	eax
	mov	ecx, DWORD PTR _c$[ebp]
	sub	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _prev$[ebp]
	push	edx
	mov	eax, DWORD PTR _context$[ebp]
	push	eax
	call	DWORD PTR _enumRange$[ebp]
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN45@enumEither:
; Line 720
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 424				; 000001a8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?enumEitherTrie@@YAXPBUUTrie2@@HHP6AIPBXI@ZP6AC1HHI@Z1@Z ENDP ; enumEitherTrie
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?enumSameValue@@YAIPBXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_value$ = 12						; size = 4
?enumSameValue@@YAIPBXI@Z PROC				; enumSameValue, COMDAT
; Line 527
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 528
	mov	eax, DWORD PTR _value$[ebp]
; Line 529
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?enumSameValue@@YAIPBXI@Z ENDP				; enumSameValue
_TEXT	ENDS
PUBLIC	_utrie2_enumForLeadSurrogate_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _utrie2_enumForLeadSurrogate_56
_TEXT	SEGMENT
_trie$ = 8						; size = 4
_lead$ = 12						; size = 4
_enumValue$ = 16					; size = 4
_enumRange$ = 20					; size = 4
_context$ = 24						; size = 4
_utrie2_enumForLeadSurrogate_56 PROC			; COMDAT
; Line 731
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 732
	mov	eax, DWORD PTR _lead$[ebp]
	and	eax, -1024				; fffffc00H
	cmp	eax, 55296				; 0000d800H
	je	SHORT $LN1@utrie2_enu
; Line 733
	jmp	SHORT $LN2@utrie2_enu
$LN1@utrie2_enu:
; Line 735
	mov	eax, DWORD PTR _lead$[ebp]
	sub	eax, 55232				; 0000d7c0H
	shl	eax, 10					; 0000000aH
	mov	DWORD PTR _lead$[ebp], eax
; Line 736
	mov	eax, DWORD PTR _context$[ebp]
	push	eax
	mov	ecx, DWORD PTR _enumRange$[ebp]
	push	ecx
	mov	edx, DWORD PTR _enumValue$[ebp]
	push	edx
	mov	eax, DWORD PTR _lead$[ebp]
	add	eax, 1024				; 00000400H
	push	eax
	mov	ecx, DWORD PTR _lead$[ebp]
	push	ecx
	mov	edx, DWORD PTR _trie$[ebp]
	push	edx
	call	?enumEitherTrie@@YAXPBUUTrie2@@HHP6AIPBXI@ZP6AC1HHI@Z1@Z ; enumEitherTrie
	add	esp, 24					; 00000018H
$LN2@utrie2_enu:
; Line 737
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_utrie2_enumForLeadSurrogate_56 ENDP
_TEXT	ENDS
PUBLIC	?previous16@BackwardUTrie2StringIterator@icu_56@@QAEGXZ ; icu_56::BackwardUTrie2StringIterator::previous16
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?previous16@BackwardUTrie2StringIterator@icu_56@@QAEGXZ
_TEXT	SEGMENT
tv280 = -232						; size = 4
tv129 = -232						; size = 4
___c2$41719 = -32					; size = 2
_result$ = -20						; size = 2
_this$ = -8						; size = 4
?previous16@BackwardUTrie2StringIterator@icu_56@@QAEGXZ PROC ; icu_56::BackwardUTrie2StringIterator::previous16, COMDAT
; _this$ = ecx
; Line 743
	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 744
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+8], edx
; Line 745
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+16]
	cmp	edx, DWORD PTR [ecx+4]
	jb	SHORT $LN4@previous16
; Line 746
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], -1
; Line 747
	xor	eax, eax
	jmp	$LN5@previous16
$LN4@previous16:
; Line 750
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 2
	mov	DWORD PTR tv129[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv129[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	ecx, DWORD PTR tv129[ebp]
	movzx	edx, WORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	and	ecx, -1024				; fffffc00H
	cmp	ecx, 56320				; 0000dc00H
	jne	SHORT $LN2@previous16
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+16]
	je	SHORT $LN2@previous16
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	dx, WORD PTR [ecx-2]
	mov	WORD PTR ___c2$41719[ebp], dx
	movzx	eax, WORD PTR ___c2$41719[ebp]
	and	eax, -1024				; fffffc00H
	cmp	eax, 55296				; 0000d800H
	je	SHORT $LN3@previous16
$LN2@previous16:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx+12]
	and	edx, -1024				; fffffc00H
	sub	edx, 55296				; 0000d800H
	neg	edx
	sbb	edx, edx
	and	edx, -320				; fffffec0H
	add	edx, 320				; 00000140H
	mov	esi, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [esi+12]
	sar	esi, 5
	add	edx, esi
	mov	eax, DWORD PTR [eax]
	movzx	edx, WORD PTR [eax+edx*2]
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+12]
	and	eax, 31					; 0000001fH
	lea	edx, DWORD PTR [eax+edx*4]
	mov	eax, DWORD PTR [ecx]
	mov	cx, WORD PTR [eax+edx*2]
	mov	WORD PTR _result$[ebp], cx
	jmp	$LN1@previous16
$LN3@previous16:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx
	movzx	eax, WORD PTR ___c2$41719[ebp]
	shl	eax, 10					; 0000000aH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	lea	eax, DWORD PTR [eax+edx-56613888]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	cmp	eax, DWORD PTR [ecx+32]
	jl	SHORT $LN7@previous16
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+36]
	mov	DWORD PTR tv280[ebp], eax
	jmp	SHORT $LN8@previous16
$LN7@previous16:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+12]
	sar	eax, 11					; 0000000bH
	mov	ecx, DWORD PTR [ecx]
	movzx	eax, WORD PTR [ecx+eax*2+4160]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+12]
	sar	ecx, 5
	and	ecx, 63					; 0000003fH
	add	eax, ecx
	mov	edx, DWORD PTR [edx]
	movzx	eax, WORD PTR [edx+eax*2]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	and	edx, 31					; 0000001fH
	lea	eax, DWORD PTR [edx+eax*4]
	mov	DWORD PTR tv280[ebp], eax
$LN8@previous16:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv280[ebp]
	mov	dx, WORD PTR [eax+ecx*2]
	mov	WORD PTR _result$[ebp], dx
$LN1@previous16:
; Line 751
	mov	ax, WORD PTR _result$[ebp]
$LN5@previous16:
; Line 752
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?previous16@BackwardUTrie2StringIterator@icu_56@@QAEGXZ ENDP ; icu_56::BackwardUTrie2StringIterator::previous16
_TEXT	ENDS
PUBLIC	?next16@ForwardUTrie2StringIterator@icu_56@@QAEGXZ ; icu_56::ForwardUTrie2StringIterator::next16
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?next16@ForwardUTrie2StringIterator@icu_56@@QAEGXZ
_TEXT	SEGMENT
tv305 = -232						; size = 4
___c2$41732 = -32					; size = 2
_result$ = -20						; size = 2
_this$ = -8						; size = 4
?next16@ForwardUTrie2StringIterator@icu_56@@QAEGXZ PROC	; icu_56::ForwardUTrie2StringIterator::next16, COMDAT
; _this$ = ecx
; Line 754
	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 755
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+4], edx
; Line 756
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	cmp	edx, DWORD PTR [ecx+16]
	jne	SHORT $LN6@next16
; Line 757
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], -1
; Line 758
	xor	eax, eax
	jmp	$LN7@next16
$LN6@next16:
; Line 761
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	movzx	edx, WORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], edx
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	add	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	and	ecx, -1024				; fffffc00H
	cmp	ecx, 55296				; 0000d800H
	je	SHORT $LN5@next16
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx+12]
	sar	edx, 5
	mov	eax, DWORD PTR [eax]
	movzx	edx, WORD PTR [eax+edx*2]
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+12]
	and	eax, 31					; 0000001fH
	lea	edx, DWORD PTR [eax+edx*4]
	mov	eax, DWORD PTR [ecx]
	mov	cx, WORD PTR [eax+edx*2]
	mov	WORD PTR _result$[ebp], cx
	jmp	$LN4@next16
$LN5@next16:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	cmp	edx, DWORD PTR [ecx+16]
	je	SHORT $LN2@next16
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	dx, WORD PTR [ecx]
	mov	WORD PTR ___c2$41732[ebp], dx
	movzx	eax, WORD PTR ___c2$41732[ebp]
	and	eax, -1024				; fffffc00H
	cmp	eax, 56320				; 0000dc00H
	je	SHORT $LN3@next16
$LN2@next16:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx+12]
	sar	edx, 5
	mov	eax, DWORD PTR [eax]
	movzx	edx, WORD PTR [eax+edx*2+640]
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+12]
	and	eax, 31					; 0000001fH
	lea	edx, DWORD PTR [eax+edx*4]
	mov	eax, DWORD PTR [ecx]
	mov	cx, WORD PTR [eax+edx*2]
	mov	WORD PTR _result$[ebp], cx
	jmp	$LN4@next16
$LN3@next16:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	shl	ecx, 10					; 0000000aH
	movzx	edx, WORD PTR ___c2$41732[ebp]
	lea	eax, DWORD PTR [ecx+edx-56613888]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	cmp	eax, DWORD PTR [ecx+32]
	jl	SHORT $LN9@next16
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+36]
	mov	DWORD PTR tv305[ebp], eax
	jmp	SHORT $LN10@next16
$LN9@next16:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+12]
	sar	eax, 11					; 0000000bH
	mov	ecx, DWORD PTR [ecx]
	movzx	eax, WORD PTR [ecx+eax*2+4160]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+12]
	sar	ecx, 5
	and	ecx, 63					; 0000003fH
	add	eax, ecx
	mov	edx, DWORD PTR [edx]
	movzx	eax, WORD PTR [edx+eax*2]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	and	edx, 31					; 0000001fH
	lea	eax, DWORD PTR [edx+eax*4]
	mov	DWORD PTR tv305[ebp], eax
$LN10@next16:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv305[ebp]
	mov	dx, WORD PTR [eax+ecx*2]
	mov	WORD PTR _result$[ebp], dx
$LN4@next16:
; Line 762
	mov	ax, WORD PTR _result$[ebp]
$LN7@next16:
; Line 763
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?next16@ForwardUTrie2StringIterator@icu_56@@QAEGXZ ENDP	; icu_56::ForwardUTrie2StringIterator::next16
_TEXT	ENDS
END
