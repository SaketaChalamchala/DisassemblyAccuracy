; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\mozilla\intl\icu\source\common\ucmndata.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
_CmnDFuncs DD	FLAT:_offsetTOCLookupFn
	DD	FLAT:_offsetTOCEntryCount
_ToCPFuncs DD	FLAT:_pointerTOCLookupFn
	DD	FLAT:_pointerTOCEntryCount
CONST	ENDS
PUBLIC	_udata_getHeaderSize_56
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File d:\mozilla\intl\icu\source\common\ucmndata.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT _udata_getHeaderSize_56
_TEXT	SEGMENT
_x$7609 = -8						; size = 2
_udh$ = 8						; size = 4
_udata_getHeaderSize_56 PROC				; COMDAT
; Line 34
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 35
	cmp	DWORD PTR _udh$[ebp], 0
	jne	SHORT $LN4@udata_getH
; Line 36
	xor	eax, eax
	jmp	SHORT $LN5@udata_getH
	jmp	SHORT $LN5@udata_getH
$LN4@udata_getH:
; Line 37
	mov	eax, DWORD PTR _udh$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	test	ecx, ecx
	jne	SHORT $LN2@udata_getH
; Line 39
	mov	eax, DWORD PTR _udh$[ebp]
	mov	ax, WORD PTR [eax]
	jmp	SHORT $LN5@udata_getH
; Line 40
	jmp	SHORT $LN5@udata_getH
$LN2@udata_getH:
; Line 42
	mov	eax, DWORD PTR _udh$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR _x$7609[ebp], cx
; Line 43
	movzx	eax, WORD PTR _x$7609[ebp]
	shl	eax, 8
	movzx	ecx, WORD PTR _x$7609[ebp]
	sar	ecx, 8
	or	eax, ecx
$LN5@udata_getH:
; Line 45
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_udata_getHeaderSize_56 ENDP
_TEXT	ENDS
PUBLIC	_udata_getInfoSize_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _udata_getInfoSize_56
_TEXT	SEGMENT
_x$7619 = -8						; size = 2
_info$ = 8						; size = 4
_udata_getInfoSize_56 PROC				; COMDAT
; Line 48
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 49
	cmp	DWORD PTR _info$[ebp], 0
	jne	SHORT $LN4@udata_getI
; Line 50
	xor	eax, eax
	jmp	SHORT $LN5@udata_getI
	jmp	SHORT $LN5@udata_getI
$LN4@udata_getI:
; Line 51
	mov	eax, DWORD PTR _info$[ebp]
	movzx	ecx, BYTE PTR [eax+4]
	test	ecx, ecx
	jne	SHORT $LN2@udata_getI
; Line 53
	mov	eax, DWORD PTR _info$[ebp]
	mov	ax, WORD PTR [eax]
	jmp	SHORT $LN5@udata_getI
; Line 54
	jmp	SHORT $LN5@udata_getI
$LN2@udata_getI:
; Line 56
	mov	eax, DWORD PTR _info$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR _x$7619[ebp], cx
; Line 57
	movzx	eax, WORD PTR _x$7619[ebp]
	shl	eax, 8
	movzx	ecx, WORD PTR _x$7619[ebp]
	sar	ecx, 8
	or	eax, ecx
$LN5@udata_getI:
; Line 59
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_udata_getInfoSize_56 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _offsetTOCEntryCount
_TEXT	SEGMENT
_toc$ = -20						; size = 4
_retVal$ = -8						; size = 4
_pData$ = 8						; size = 4
_offsetTOCEntryCount PROC				; COMDAT
; Line 208
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 209
	mov	DWORD PTR _retVal$[ebp], 0
; Line 210
	mov	eax, DWORD PTR _pData$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _toc$[ebp], ecx
; Line 211
	cmp	DWORD PTR _toc$[ebp], 0
	je	SHORT $LN1@offsetTOCE
; Line 212
	mov	eax, DWORD PTR _toc$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _retVal$[ebp], ecx
$LN1@offsetTOCE:
; Line 214
	mov	eax, DWORD PTR _retVal$[ebp]
; Line 215
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_offsetTOCEntryCount ENDP
_TEXT	ENDS
EXTRN	__RTC_CheckEsp:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _offsetTOCLookupFn
_TEXT	SEGMENT
_entry$7731 = -56					; size = 4
_count$7728 = -44					; size = 4
_number$7727 = -32					; size = 4
_base$7725 = -20					; size = 4
_toc$ = -8						; size = 4
_pData$ = 8						; size = 4
_tocEntryName$ = 12					; size = 4
_pLength$ = 16						; size = 4
_pErrorCode$ = 20					; size = 4
_offsetTOCLookupFn PROC					; COMDAT
; Line 221
	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 222
	mov	eax, DWORD PTR _pData$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _toc$[ebp], ecx
; Line 223
	cmp	DWORD PTR _toc$[ebp], 0
	je	SHORT $LN6@offsetTOCL
; Line 224
	mov	eax, DWORD PTR _toc$[ebp]
	mov	DWORD PTR _base$7725[ebp], eax
; Line 225
	mov	eax, DWORD PTR _toc$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _count$7728[ebp], ecx
; Line 234
	mov	eax, DWORD PTR _count$7728[ebp]
	push	eax
	mov	ecx, DWORD PTR _toc$[ebp]
	add	ecx, 4
	push	ecx
	mov	edx, DWORD PTR _base$7725[ebp]
	push	edx
	mov	eax, DWORD PTR _tocEntryName$[ebp]
	push	eax
	call	_offsetTOCPrefixBinarySearch
	add	esp, 16					; 00000010H
	mov	DWORD PTR _number$7727[ebp], eax
; Line 235
	cmp	DWORD PTR _number$7727[ebp], 0
	jl	SHORT $LN5@offsetTOCL
; Line 237
	mov	eax, DWORD PTR _number$7727[ebp]
	mov	ecx, DWORD PTR _toc$[ebp]
	lea	edx, DWORD PTR [ecx+eax*8+4]
	mov	DWORD PTR _entry$7731[ebp], edx
; Line 241
	mov	eax, DWORD PTR _number$7727[ebp]
	add	eax, 1
	cmp	eax, DWORD PTR _count$7728[ebp]
	jge	SHORT $LN4@offsetTOCL
; Line 242
	mov	eax, DWORD PTR _entry$7731[ebp]
	mov	ecx, DWORD PTR _entry$7731[ebp]
	mov	edx, DWORD PTR [eax+12]
	sub	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _pLength$[ebp]
	mov	DWORD PTR [eax], edx
; Line 243
	jmp	SHORT $LN3@offsetTOCL
$LN4@offsetTOCL:
; Line 244
	mov	eax, DWORD PTR _pLength$[ebp]
	mov	DWORD PTR [eax], -1
$LN3@offsetTOCL:
; Line 246
	mov	eax, DWORD PTR _entry$7731[ebp]
	mov	ecx, DWORD PTR _base$7725[ebp]
	add	ecx, DWORD PTR [eax+4]
	mov	eax, ecx
	jmp	SHORT $LN7@offsetTOCL
; Line 247
	jmp	SHORT $LN2@offsetTOCL
$LN5@offsetTOCL:
; Line 251
	xor	eax, eax
	jmp	SHORT $LN7@offsetTOCL
$LN2@offsetTOCL:
; Line 253
	jmp	SHORT $LN7@offsetTOCL
$LN6@offsetTOCL:
; Line 258
	mov	eax, DWORD PTR _pData$[ebp]
	mov	eax, DWORD PTR [eax+4]
$LN7@offsetTOCL:
; Line 260
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_offsetTOCLookupFn ENDP
_TEXT	ENDS
EXTRN	@_RTC_CheckStackVars@8:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _offsetTOCPrefixBinarySearch
_TEXT	SEGMENT
tv85 = -280						; size = 4
_cmp$7672 = -80						; size = 4
_prefixLength$7671 = -68				; size = 4
_i$7670 = -56						; size = 4
_limitPrefixLength$ = -44				; size = 4
_startPrefixLength$ = -32				; size = 4
_limit$ = -20						; size = 4
_start$ = -8						; size = 4
_s$ = 8							; size = 4
_names$ = 12						; size = 4
_toc$ = 16						; size = 4
_count$ = 20						; size = 4
_offsetTOCPrefixBinarySearch PROC			; COMDAT
; Line 119
	push	ebp
	mov	ebp, esp
	sub	esp, 280				; 00000118H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-280]
	mov	ecx, 70					; 00000046H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 120
	mov	DWORD PTR _start$[ebp], 0
; Line 121
	mov	eax, DWORD PTR _count$[ebp]
	mov	DWORD PTR _limit$[ebp], eax
; Line 127
	mov	DWORD PTR _startPrefixLength$[ebp], 0
; Line 128
	mov	DWORD PTR _limitPrefixLength$[ebp], 0
; Line 129
	cmp	DWORD PTR _count$[ebp], 0
	jne	SHORT $LN9@offsetTOCP
; Line 130
	or	eax, -1
	jmp	$LN10@offsetTOCP
$LN9@offsetTOCP:
; Line 138
	lea	eax, DWORD PTR _startPrefixLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _toc$[ebp]
	mov	edx, DWORD PTR _names$[ebp]
	add	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_strcmpAfterPrefix
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN8@offsetTOCP
; Line 139
	xor	eax, eax
	jmp	$LN10@offsetTOCP
$LN8@offsetTOCP:
; Line 141
	mov	eax, DWORD PTR _start$[ebp]
	add	eax, 1
	mov	DWORD PTR _start$[ebp], eax
; Line 142
	mov	eax, DWORD PTR _limit$[ebp]
	sub	eax, 1
	mov	DWORD PTR _limit$[ebp], eax
; Line 143
	lea	eax, DWORD PTR _limitPrefixLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _limit$[ebp]
	mov	edx, DWORD PTR _toc$[ebp]
	mov	eax, DWORD PTR _names$[ebp]
	add	eax, DWORD PTR [edx+ecx*8]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	call	_strcmpAfterPrefix
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN6@offsetTOCP
; Line 144
	mov	eax, DWORD PTR _limit$[ebp]
	jmp	$LN10@offsetTOCP
$LN6@offsetTOCP:
; Line 146
	mov	eax, DWORD PTR _start$[ebp]
	cmp	eax, DWORD PTR _limit$[ebp]
	jge	$LN5@offsetTOCP
; Line 147
	mov	eax, DWORD PTR _start$[ebp]
	add	eax, DWORD PTR _limit$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _i$7670[ebp], eax
; Line 148
	mov	eax, DWORD PTR _startPrefixLength$[ebp]
	cmp	eax, DWORD PTR _limitPrefixLength$[ebp]
	jge	SHORT $LN12@offsetTOCP
	mov	ecx, DWORD PTR _startPrefixLength$[ebp]
	mov	DWORD PTR tv85[ebp], ecx
	jmp	SHORT $LN13@offsetTOCP
$LN12@offsetTOCP:
	mov	edx, DWORD PTR _limitPrefixLength$[ebp]
	mov	DWORD PTR tv85[ebp], edx
$LN13@offsetTOCP:
	mov	eax, DWORD PTR tv85[ebp]
	mov	DWORD PTR _prefixLength$7671[ebp], eax
; Line 149
	lea	eax, DWORD PTR _prefixLength$7671[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$7670[ebp]
	mov	edx, DWORD PTR _toc$[ebp]
	mov	eax, DWORD PTR _names$[ebp]
	add	eax, DWORD PTR [edx+ecx*8]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	call	_strcmpAfterPrefix
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _cmp$7672[ebp], eax
; Line 150
	cmp	DWORD PTR _cmp$7672[ebp], 0
	jge	SHORT $LN4@offsetTOCP
; Line 151
	mov	eax, DWORD PTR _i$7670[ebp]
	mov	DWORD PTR _limit$[ebp], eax
; Line 152
	mov	eax, DWORD PTR _prefixLength$7671[ebp]
	mov	DWORD PTR _limitPrefixLength$[ebp], eax
	jmp	SHORT $LN3@offsetTOCP
$LN4@offsetTOCP:
; Line 153
	cmp	DWORD PTR _cmp$7672[ebp], 0
	jne	SHORT $LN2@offsetTOCP
; Line 154
	mov	eax, DWORD PTR _i$7670[ebp]
	jmp	SHORT $LN10@offsetTOCP
; Line 155
	jmp	SHORT $LN3@offsetTOCP
$LN2@offsetTOCP:
; Line 156
	mov	eax, DWORD PTR _i$7670[ebp]
	add	eax, 1
	mov	DWORD PTR _start$[ebp], eax
; Line 157
	mov	eax, DWORD PTR _prefixLength$7671[ebp]
	mov	DWORD PTR _startPrefixLength$[ebp], eax
$LN3@offsetTOCP:
; Line 159
	jmp	$LN6@offsetTOCP
$LN5@offsetTOCP:
; Line 160
	or	eax, -1
$LN10@offsetTOCP:
; Line 161
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN18@offsetTOCP
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 280				; 00000118H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN18@offsetTOCP:
	DD	3
	DD	$LN17@offsetTOCP
$LN17@offsetTOCP:
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN14@offsetTOCP
	DD	-44					; ffffffd4H
	DD	4
	DD	$LN15@offsetTOCP
	DD	-68					; ffffffbcH
	DD	4
	DD	$LN16@offsetTOCP
$LN16@offsetTOCP:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	102					; 00000066H
	DB	105					; 00000069H
	DB	120					; 00000078H
	DB	76					; 0000004cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	0
$LN15@offsetTOCP:
	DB	108					; 0000006cH
	DB	105					; 00000069H
	DB	109					; 0000006dH
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	80					; 00000050H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	102					; 00000066H
	DB	105					; 00000069H
	DB	120					; 00000078H
	DB	76					; 0000004cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	0
$LN14@offsetTOCP:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	116					; 00000074H
	DB	80					; 00000050H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	102					; 00000066H
	DB	105					; 00000069H
	DB	120					; 00000078H
	DB	76					; 0000004cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	0
_offsetTOCPrefixBinarySearch ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _strcmpAfterPrefix
_TEXT	SEGMENT
_c2$7646 = -44						; size = 4
_c1$7644 = -32						; size = 4
_cmp$ = -20						; size = 4
_pl$ = -8						; size = 4
_s1$ = 8						; size = 4
_s2$ = 12						; size = 4
_pPrefixLength$ = 16					; size = 4
_strcmpAfterPrefix PROC					; COMDAT
; Line 99
	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 100
	mov	eax, DWORD PTR _pPrefixLength$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pl$[ebp], ecx
; Line 101
	mov	DWORD PTR _cmp$[ebp], 0
; Line 102
	mov	eax, DWORD PTR _s1$[ebp]
	add	eax, DWORD PTR _pl$[ebp]
	mov	DWORD PTR _s1$[ebp], eax
; Line 103
	mov	eax, DWORD PTR _s2$[ebp]
	add	eax, DWORD PTR _pl$[ebp]
	mov	DWORD PTR _s2$[ebp], eax
$LN4@strcmpAfte:
; Line 105
	mov	eax, DWORD PTR _s1$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _c1$7644[ebp], ecx
	mov	edx, DWORD PTR _s1$[ebp]
	add	edx, 1
	mov	DWORD PTR _s1$[ebp], edx
; Line 106
	mov	eax, DWORD PTR _s2$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _c2$7646[ebp], ecx
	mov	edx, DWORD PTR _s2$[ebp]
	add	edx, 1
	mov	DWORD PTR _s2$[ebp], edx
; Line 107
	mov	eax, DWORD PTR _c1$7644[ebp]
	sub	eax, DWORD PTR _c2$7646[ebp]
	mov	DWORD PTR _cmp$[ebp], eax
; Line 108
	jne	SHORT $LN1@strcmpAfte
	cmp	DWORD PTR _c1$7644[ebp], 0
	jne	SHORT $LN2@strcmpAfte
$LN1@strcmpAfte:
; Line 109
	jmp	SHORT $LN3@strcmpAfte
$LN2@strcmpAfte:
; Line 111
	mov	eax, DWORD PTR _pl$[ebp]
	add	eax, 1
	mov	DWORD PTR _pl$[ebp], eax
; Line 112
	jmp	SHORT $LN4@strcmpAfte
$LN3@strcmpAfte:
; Line 113
	mov	eax, DWORD PTR _pPrefixLength$[ebp]
	mov	ecx, DWORD PTR _pl$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 114
	mov	eax, DWORD PTR _cmp$[ebp]
; Line 115
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_strcmpAfterPrefix ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _pointerTOCEntryCount
_TEXT	SEGMENT
tv66 = -208						; size = 4
_toc$ = -8						; size = 4
_pData$ = 8						; size = 4
_pointerTOCEntryCount PROC				; COMDAT
; Line 263
	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 264
	mov	eax, DWORD PTR _pData$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _toc$[ebp], ecx
; Line 265
	cmp	DWORD PTR _toc$[ebp], 0
	je	SHORT $LN3@pointerTOC
	mov	eax, DWORD PTR _toc$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv66[ebp], ecx
	jmp	SHORT $LN4@pointerTOC
$LN3@pointerTOC:
	mov	DWORD PTR tv66[ebp], 0
$LN4@pointerTOC:
	mov	eax, DWORD PTR tv66[ebp]
; Line 266
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_pointerTOCEntryCount ENDP
_TEXT	ENDS
EXTRN	_UDataMemory_normalizeDataPointer_56:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _pointerTOCLookupFn
_TEXT	SEGMENT
_count$7762 = -32					; size = 4
_number$7761 = -20					; size = 4
_toc$7759 = -8						; size = 4
_pData$ = 8						; size = 4
_name$ = 12						; size = 4
_pLength$ = 16						; size = 4
_pErrorCode$ = 20					; size = 4
_pointerTOCLookupFn PROC				; COMDAT
; Line 272
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 273
	mov	eax, DWORD PTR _pData$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN4@pointerTOC@2
; Line 274
	mov	eax, DWORD PTR _pData$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _toc$7759[ebp], ecx
; Line 275
	mov	eax, DWORD PTR _toc$7759[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _count$7762[ebp], ecx
; Line 283
	mov	eax, DWORD PTR _count$7762[ebp]
	push	eax
	mov	ecx, DWORD PTR _toc$7759[ebp]
	add	ecx, 8
	push	ecx
	mov	edx, DWORD PTR _name$[ebp]
	push	edx
	call	_pointerTOCPrefixBinarySearch
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _number$7761[ebp], eax
; Line 284
	cmp	DWORD PTR _number$7761[ebp], 0
	jl	SHORT $LN3@pointerTOC@2
; Line 289
	mov	eax, DWORD PTR _pLength$[ebp]
	mov	DWORD PTR [eax], -1
; Line 290
	mov	eax, DWORD PTR _number$7761[ebp]
	mov	ecx, DWORD PTR _toc$7759[ebp]
	mov	edx, DWORD PTR [ecx+eax*8+12]
	push	edx
	call	_UDataMemory_normalizeDataPointer_56
	add	esp, 4
	jmp	SHORT $LN5@pointerTOC@2
; Line 291
	jmp	SHORT $LN2@pointerTOC@2
$LN3@pointerTOC@2:
; Line 295
	xor	eax, eax
	jmp	SHORT $LN5@pointerTOC@2
$LN2@pointerTOC@2:
; Line 297
	jmp	SHORT $LN5@pointerTOC@2
$LN4@pointerTOC@2:
; Line 298
	mov	eax, DWORD PTR _pData$[ebp]
	mov	eax, DWORD PTR [eax+4]
$LN5@pointerTOC@2:
; Line 300
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_pointerTOCLookupFn ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _pointerTOCPrefixBinarySearch
_TEXT	SEGMENT
tv83 = -280						; size = 4
_cmp$7697 = -80						; size = 4
_prefixLength$7696 = -68				; size = 4
_i$7695 = -56						; size = 4
_limitPrefixLength$ = -44				; size = 4
_startPrefixLength$ = -32				; size = 4
_limit$ = -20						; size = 4
_start$ = -8						; size = 4
_s$ = 8							; size = 4
_toc$ = 12						; size = 4
_count$ = 16						; size = 4
_pointerTOCPrefixBinarySearch PROC			; COMDAT
; Line 164
	push	ebp
	mov	ebp, esp
	sub	esp, 280				; 00000118H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-280]
	mov	ecx, 70					; 00000046H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 165
	mov	DWORD PTR _start$[ebp], 0
; Line 166
	mov	eax, DWORD PTR _count$[ebp]
	mov	DWORD PTR _limit$[ebp], eax
; Line 172
	mov	DWORD PTR _startPrefixLength$[ebp], 0
; Line 173
	mov	DWORD PTR _limitPrefixLength$[ebp], 0
; Line 174
	cmp	DWORD PTR _count$[ebp], 0
	jne	SHORT $LN9@pointerTOC@3
; Line 175
	or	eax, -1
	jmp	$LN10@pointerTOC@3
$LN9@pointerTOC@3:
; Line 183
	lea	eax, DWORD PTR _startPrefixLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _toc$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_strcmpAfterPrefix
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN8@pointerTOC@3
; Line 184
	xor	eax, eax
	jmp	$LN10@pointerTOC@3
$LN8@pointerTOC@3:
; Line 186
	mov	eax, DWORD PTR _start$[ebp]
	add	eax, 1
	mov	DWORD PTR _start$[ebp], eax
; Line 187
	mov	eax, DWORD PTR _limit$[ebp]
	sub	eax, 1
	mov	DWORD PTR _limit$[ebp], eax
; Line 188
	lea	eax, DWORD PTR _limitPrefixLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _limit$[ebp]
	mov	edx, DWORD PTR _toc$[ebp]
	mov	eax, DWORD PTR [edx+ecx*8]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	call	_strcmpAfterPrefix
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN6@pointerTOC@3
; Line 189
	mov	eax, DWORD PTR _limit$[ebp]
	jmp	$LN10@pointerTOC@3
$LN6@pointerTOC@3:
; Line 191
	mov	eax, DWORD PTR _start$[ebp]
	cmp	eax, DWORD PTR _limit$[ebp]
	jge	$LN5@pointerTOC@3
; Line 192
	mov	eax, DWORD PTR _start$[ebp]
	add	eax, DWORD PTR _limit$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _i$7695[ebp], eax
; Line 193
	mov	eax, DWORD PTR _startPrefixLength$[ebp]
	cmp	eax, DWORD PTR _limitPrefixLength$[ebp]
	jge	SHORT $LN12@pointerTOC@3
	mov	ecx, DWORD PTR _startPrefixLength$[ebp]
	mov	DWORD PTR tv83[ebp], ecx
	jmp	SHORT $LN13@pointerTOC@3
$LN12@pointerTOC@3:
	mov	edx, DWORD PTR _limitPrefixLength$[ebp]
	mov	DWORD PTR tv83[ebp], edx
$LN13@pointerTOC@3:
	mov	eax, DWORD PTR tv83[ebp]
	mov	DWORD PTR _prefixLength$7696[ebp], eax
; Line 194
	lea	eax, DWORD PTR _prefixLength$7696[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$7695[ebp]
	mov	edx, DWORD PTR _toc$[ebp]
	mov	eax, DWORD PTR [edx+ecx*8]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	call	_strcmpAfterPrefix
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _cmp$7697[ebp], eax
; Line 195
	cmp	DWORD PTR _cmp$7697[ebp], 0
	jge	SHORT $LN4@pointerTOC@3
; Line 196
	mov	eax, DWORD PTR _i$7695[ebp]
	mov	DWORD PTR _limit$[ebp], eax
; Line 197
	mov	eax, DWORD PTR _prefixLength$7696[ebp]
	mov	DWORD PTR _limitPrefixLength$[ebp], eax
	jmp	SHORT $LN3@pointerTOC@3
$LN4@pointerTOC@3:
; Line 198
	cmp	DWORD PTR _cmp$7697[ebp], 0
	jne	SHORT $LN2@pointerTOC@3
; Line 199
	mov	eax, DWORD PTR _i$7695[ebp]
	jmp	SHORT $LN10@pointerTOC@3
; Line 200
	jmp	SHORT $LN3@pointerTOC@3
$LN2@pointerTOC@3:
; Line 201
	mov	eax, DWORD PTR _i$7695[ebp]
	add	eax, 1
	mov	DWORD PTR _start$[ebp], eax
; Line 202
	mov	eax, DWORD PTR _prefixLength$7696[ebp]
	mov	DWORD PTR _startPrefixLength$[ebp], eax
$LN3@pointerTOC@3:
; Line 204
	jmp	$LN6@pointerTOC@3
$LN5@pointerTOC@3:
; Line 205
	or	eax, -1
$LN10@pointerTOC@3:
; Line 206
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN18@pointerTOC@3
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 280				; 00000118H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN18@pointerTOC@3:
	DD	3
	DD	$LN17@pointerTOC@3
$LN17@pointerTOC@3:
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN14@pointerTOC@3
	DD	-44					; ffffffd4H
	DD	4
	DD	$LN15@pointerTOC@3
	DD	-68					; ffffffbcH
	DD	4
	DD	$LN16@pointerTOC@3
$LN16@pointerTOC@3:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	102					; 00000066H
	DB	105					; 00000069H
	DB	120					; 00000078H
	DB	76					; 0000004cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	0
$LN15@pointerTOC@3:
	DB	108					; 0000006cH
	DB	105					; 00000069H
	DB	109					; 0000006dH
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	80					; 00000050H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	102					; 00000066H
	DB	105					; 00000069H
	DB	120					; 00000078H
	DB	76					; 0000004cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	0
$LN14@pointerTOC@3:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	116					; 00000074H
	DB	80					; 00000050H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	102					; 00000066H
	DB	105					; 00000069H
	DB	120					; 00000078H
	DB	76					; 0000004cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	0
_pointerTOCPrefixBinarySearch ENDP
_TEXT	ENDS
PUBLIC	_udata_checkCommonData_56
EXTRN	_udata_close_56:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _udata_checkCommonData_56
_TEXT	SEGMENT
_udm$ = 8						; size = 4
_err$ = 12						; size = 4
_udata_checkCommonData_56 PROC				; COMDAT
; Line 315
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 316
	mov	eax, DWORD PTR _err$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN12@udata_chec
; Line 317
	jmp	$LN13@udata_chec
$LN12@udata_chec:
; Line 320
	cmp	DWORD PTR _udm$[ebp], 0
	je	SHORT $LN10@udata_chec
	mov	eax, DWORD PTR _udm$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN11@udata_chec
$LN10@udata_chec:
; Line 321
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 3
; Line 322
	jmp	$LN9@udata_chec
$LN11@udata_chec:
; Line 326
	mov	eax, DWORD PTR _udm$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	movzx	edx, BYTE PTR [ecx+2]
	cmp	edx, 218				; 000000daH
	jne	SHORT $LN7@udata_chec
	mov	eax, DWORD PTR _udm$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	movzx	edx, BYTE PTR [ecx+3]
	cmp	edx, 39					; 00000027H
	jne	SHORT $LN7@udata_chec
	mov	eax, DWORD PTR _udm$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	movzx	edx, BYTE PTR [ecx+8]
	test	edx, edx
	jne	SHORT $LN7@udata_chec
	mov	eax, DWORD PTR _udm$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	movzx	edx, BYTE PTR [ecx+9]
	test	edx, edx
	je	SHORT $LN8@udata_chec
$LN7@udata_chec:
; Line 328
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 3
; Line 330
	jmp	$LN9@udata_chec
$LN8@udata_chec:
; Line 335
	mov	eax, DWORD PTR _udm$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	movzx	edx, BYTE PTR [ecx+12]
	cmp	edx, 67					; 00000043H
	jne	SHORT $LN5@udata_chec
	mov	eax, DWORD PTR _udm$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	movzx	edx, BYTE PTR [ecx+13]
	cmp	edx, 109				; 0000006dH
	jne	SHORT $LN5@udata_chec
	mov	eax, DWORD PTR _udm$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	movzx	edx, BYTE PTR [ecx+14]
	cmp	edx, 110				; 0000006eH
	jne	SHORT $LN5@udata_chec
	mov	eax, DWORD PTR _udm$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	movzx	edx, BYTE PTR [ecx+15]
	cmp	edx, 68					; 00000044H
	jne	SHORT $LN5@udata_chec
	mov	eax, DWORD PTR _udm$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	movzx	edx, BYTE PTR [ecx+16]
	cmp	edx, 1
	jne	SHORT $LN5@udata_chec
; Line 337
	mov	eax, DWORD PTR _udm$[ebp]
	mov	DWORD PTR [eax], OFFSET _CmnDFuncs
; Line 338
	mov	eax, DWORD PTR _udm$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	_udata_getHeaderSize_56
	add	esp, 4
	movzx	edx, ax
	mov	eax, DWORD PTR _udm$[ebp]
	add	edx, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _udm$[ebp]
	mov	DWORD PTR [ecx+8], edx
; Line 340
	jmp	SHORT $LN9@udata_chec
$LN5@udata_chec:
; Line 345
	mov	eax, DWORD PTR _udm$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	movzx	edx, BYTE PTR [ecx+12]
	cmp	edx, 84					; 00000054H
	jne	SHORT $LN3@udata_chec
	mov	eax, DWORD PTR _udm$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	movzx	edx, BYTE PTR [ecx+13]
	cmp	edx, 111				; 0000006fH
	jne	SHORT $LN3@udata_chec
	mov	eax, DWORD PTR _udm$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	movzx	edx, BYTE PTR [ecx+14]
	cmp	edx, 67					; 00000043H
	jne	SHORT $LN3@udata_chec
	mov	eax, DWORD PTR _udm$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	movzx	edx, BYTE PTR [ecx+15]
	cmp	edx, 80					; 00000050H
	jne	SHORT $LN3@udata_chec
	mov	eax, DWORD PTR _udm$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	movzx	edx, BYTE PTR [ecx+16]
	cmp	edx, 1
	jne	SHORT $LN3@udata_chec
; Line 347
	mov	eax, DWORD PTR _udm$[ebp]
	mov	DWORD PTR [eax], OFFSET _ToCPFuncs
; Line 348
	mov	eax, DWORD PTR _udm$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	_udata_getHeaderSize_56
	add	esp, 4
	movzx	edx, ax
	mov	eax, DWORD PTR _udm$[ebp]
	add	edx, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _udm$[ebp]
	mov	DWORD PTR [ecx+8], edx
; Line 350
	jmp	SHORT $LN9@udata_chec
$LN3@udata_chec:
; Line 352
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 3
$LN9@udata_chec:
; Line 355
	mov	eax, DWORD PTR _err$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN13@udata_chec
; Line 360
	mov	eax, DWORD PTR _udm$[ebp]
	push	eax
	call	_udata_close_56
	add	esp, 4
$LN13@udata_chec:
; Line 362
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_udata_checkCommonData_56 ENDP
_TEXT	ENDS
END
