; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\mozilla\intl\icu\source\common\ucnv_u32.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	__UTF32BEData_56
PUBLIC	__UTF32LEData_56
PUBLIC	__UTF32Data_56
EXTRN	_ucnv_getNonSurrogateUnicodeSet_56:PROC
CONST	SEGMENT
?bom@?3??T_UConverter_fromUnicode_UTF32_BE@@9@9 DB 00H	; `T_UConverter_fromUnicode_UTF32_BE'::`4'::bom
	DB	00H
	DB	0feH
	DB	0ffH
?bom@?3??T_UConverter_fromUnicode_UTF32_BE_OFFSET_LOGIC@@9@9 DB 00H ; `T_UConverter_fromUnicode_UTF32_BE_OFFSET_LOGIC'::`4'::bom
	DB	00H
	DB	0feH
	DB	0ffH
__UTF32BEImpl DD 07H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:_T_UConverter_toUnicode_UTF32_BE
	DD	FLAT:_T_UConverter_toUnicode_UTF32_BE_OFFSET_LOGIC
	DD	FLAT:_T_UConverter_fromUnicode_UTF32_BE
	DD	FLAT:_T_UConverter_fromUnicode_UTF32_BE_OFFSET_LOGIC
	DD	FLAT:_T_UConverter_getNextUChar_UTF32_BE
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:_ucnv_getNonSurrogateUnicodeSet_56
	ORG $+8
__UTF32BEStaticData DD 064H
	DB	'UTF-32BE', 00H
	ORG $+51
	DD	04d0H
	DB	00H
	DB	07H
	DB	04H
	DB	04H
	DB	00H
	DB	00H
	DB	0ffH
	DB	0fdH
	DB	04H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
?bom@?3??T_UConverter_fromUnicode_UTF32_LE@@9@9 DB 0ffH	; `T_UConverter_fromUnicode_UTF32_LE'::`4'::bom
	DB	0feH
	DB	00H
	DB	00H
__UTF32BEData_56 DD 0e4H
	DD	0ffffffffH
	DD	00H
	DD	FLAT:__UTF32BEStaticData
	DB	00H
	DB	00H
	ORG $+2
	DD	FLAT:__UTF32BEImpl
	DD	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+1
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	ORG $+126
	DD	00H
	DD	00H
	DD	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+1
	DW	00H
	ORG $+2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
?bom@?3??T_UConverter_fromUnicode_UTF32_LE_OFFSET_LOGIC@@9@9 DB 0ffH ; `T_UConverter_fromUnicode_UTF32_LE_OFFSET_LOGIC'::`4'::bom
	DB	0feH
	DB	00H
	DB	00H
__UTF32LEImpl DD 08H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:_T_UConverter_toUnicode_UTF32_LE
	DD	FLAT:_T_UConverter_toUnicode_UTF32_LE_OFFSET_LOGIC
	DD	FLAT:_T_UConverter_fromUnicode_UTF32_LE
	DD	FLAT:_T_UConverter_fromUnicode_UTF32_LE_OFFSET_LOGIC
	DD	FLAT:_T_UConverter_getNextUChar_UTF32_LE
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:_ucnv_getNonSurrogateUnicodeSet_56
	ORG $+8
__UTF32LEStaticData DD 064H
	DB	'UTF-32LE', 00H
	ORG $+51
	DD	04d2H
	DB	00H
	DB	08H
	DB	04H
	DB	04H
	DB	0fdH
	DB	0ffH
	DB	00H
	DB	00H
	DB	04H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+4
__UTF32LEData_56 DD 0e4H
	DD	0ffffffffH
	DD	00H
	DD	FLAT:__UTF32LEStaticData
	DB	00H
	DB	00H
	ORG $+2
	DD	FLAT:__UTF32LEImpl
	DD	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+1
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	ORG $+126
	DD	00H
	DD	00H
	DD	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+1
	DW	00H
	ORG $+2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_utf32BOM DB	00H
	DB	00H
	DB	0feH
	DB	0ffH
	DB	0ffH
	DB	0feH
	DB	00H
	DB	00H
	ORG $+4
__UTF32Impl DD	01eH
	DD	00H
	DD	00H
	DD	FLAT:__UTF32Open
	DD	00H
	DD	FLAT:__UTF32Reset
	DD	FLAT:__UTF32ToUnicodeWithOffsets
	DD	FLAT:__UTF32ToUnicodeWithOffsets
	DD	FLAT:_T_UConverter_fromUnicode_UTF32_LE
	DD	FLAT:_T_UConverter_fromUnicode_UTF32_LE_OFFSET_LOGIC
	DD	FLAT:__UTF32GetNextUChar
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:_ucnv_getNonSurrogateUnicodeSet_56
	ORG $+8
__UTF32StaticData DD 064H
	DB	'UTF-32', 00H
	ORG $+53
	DD	04d4H
	DB	00H
	DB	01eH
	DB	04H
	DB	04H
	DB	0fdH
	DB	0ffH
	DB	00H
	DB	00H
	DB	04H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+4
__UTF32Data_56 DD 0e4H
	DD	0ffffffffH
	DD	00H
	DD	FLAT:__UTF32StaticData
	DB	00H
	DB	00H
	ORG $+2
	DD	FLAT:__UTF32Impl
	DD	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+1
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	ORG $+126
	DD	00H
	DD	00H
	DD	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+1
	DW	00H
	ORG $+2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
CONST	ENDS
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File d:\mozilla\intl\icu\source\common\ucnv_u32.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT _T_UConverter_toUnicode_UTF32_BE
_TEXT	SEGMENT
_i$ = -80						; size = 4
_ch$ = -68						; size = 4
_toUBytes$ = -56					; size = 4
_targetLimit$ = -44					; size = 4
_sourceLimit$ = -32					; size = 4
_myTarget$ = -20					; size = 4
_mySource$ = -8						; size = 4
_args$ = 8						; size = 4
_err$ = 12						; size = 4
_T_UConverter_toUnicode_UTF32_BE PROC			; COMDAT
; Line 47
	push	ebp
	mov	ebp, esp
	sub	esp, 276				; 00000114H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-276]
	mov	ecx, 69					; 00000045H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 48
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _mySource$[ebp], ecx
; Line 49
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _myTarget$[ebp], ecx
; Line 50
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _sourceLimit$[ebp], ecx
; Line 51
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _targetLimit$[ebp], ecx
; Line 52
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 37					; 00000025H
	mov	DWORD PTR _toUBytes$[ebp], ecx
; Line 56
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cmp	DWORD PTR [ecx+44], 0
	je	SHORT $LN13@T_UConvert
	mov	eax, DWORD PTR _myTarget$[ebp]
	cmp	eax, DWORD PTR _targetLimit$[ebp]
	jae	SHORT $LN13@T_UConvert
; Line 57
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	movsx	edx, BYTE PTR [ecx+36]
	mov	DWORD PTR _i$[ebp], edx
; Line 58
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx+36], 0
; Line 60
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+44]
	sub	edx, 1
	mov	DWORD PTR _ch$[ebp], edx
; Line 61
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+44], 0
; Line 62
	jmp	SHORT $morebytes$8560
$LN13@T_UConvert:
; Line 65
	mov	eax, DWORD PTR _mySource$[ebp]
	cmp	eax, DWORD PTR _sourceLimit$[ebp]
	jae	$donefornow$8573
	mov	eax, DWORD PTR _myTarget$[ebp]
	cmp	eax, DWORD PTR _targetLimit$[ebp]
	jae	$donefornow$8573
; Line 66
	mov	DWORD PTR _i$[ebp], 0
; Line 67
	mov	DWORD PTR _ch$[ebp], 0
$morebytes$8560:
; Line 69
	cmp	DWORD PTR _i$[ebp], 4
	jae	SHORT $LN10@T_UConvert
; Line 70
	mov	eax, DWORD PTR _mySource$[ebp]
	cmp	eax, DWORD PTR _sourceLimit$[ebp]
	jae	SHORT $LN9@T_UConvert
; Line 71
	mov	eax, DWORD PTR _ch$[ebp]
	shl	eax, 8
	mov	ecx, DWORD PTR _mySource$[ebp]
	movzx	edx, BYTE PTR [ecx]
	or	eax, edx
	mov	DWORD PTR _ch$[ebp], eax
; Line 72
	mov	eax, DWORD PTR _toUBytes$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _mySource$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _mySource$[ebp]
	add	ecx, 1
	mov	DWORD PTR _mySource$[ebp], ecx
; Line 74
	jmp	SHORT $LN8@T_UConvert
$LN9@T_UConvert:
; Line 77
	mov	eax, DWORD PTR _ch$[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+44], eax
; Line 78
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	dl, BYTE PTR _i$[ebp]
	mov	BYTE PTR [ecx+36], dl
; Line 79
	jmp	$donefornow$8573
$LN8@T_UConvert:
; Line 81
	jmp	SHORT $morebytes$8560
$LN10@T_UConvert:
; Line 83
	cmp	DWORD PTR _ch$[ebp], 1114111		; 0010ffffH
	ja	$LN7@T_UConvert
	mov	eax, DWORD PTR _ch$[ebp]
	and	eax, -2048				; fffff800H
	cmp	eax, 55296				; 0000d800H
	je	$LN7@T_UConvert
; Line 85
	cmp	DWORD PTR _ch$[ebp], 65535		; 0000ffffH
	ja	SHORT $LN6@T_UConvert
; Line 88
	mov	eax, DWORD PTR _myTarget$[ebp]
	mov	cx, WORD PTR _ch$[ebp]
	mov	WORD PTR [eax], cx
	mov	edx, DWORD PTR _myTarget$[ebp]
	add	edx, 2
	mov	DWORD PTR _myTarget$[ebp], edx
; Line 90
	jmp	SHORT $LN5@T_UConvert
$LN6@T_UConvert:
; Line 92
	mov	eax, DWORD PTR _ch$[ebp]
	shr	eax, 10					; 0000000aH
	add	eax, 55232				; 0000d7c0H
	mov	ecx, DWORD PTR _myTarget$[ebp]
	mov	WORD PTR [ecx], ax
	mov	edx, DWORD PTR _myTarget$[ebp]
	add	edx, 2
	mov	DWORD PTR _myTarget$[ebp], edx
; Line 93
	mov	eax, DWORD PTR _ch$[ebp]
	and	eax, 1023				; 000003ffH
	or	eax, 56320				; 0000dc00H
	movzx	ecx, ax
	mov	DWORD PTR _ch$[ebp], ecx
; Line 94
	mov	eax, DWORD PTR _myTarget$[ebp]
	cmp	eax, DWORD PTR _targetLimit$[ebp]
	jae	SHORT $LN4@T_UConvert
; Line 95
	mov	eax, DWORD PTR _myTarget$[ebp]
	mov	cx, WORD PTR _ch$[ebp]
	mov	WORD PTR [eax], cx
	mov	edx, DWORD PTR _myTarget$[ebp]
	add	edx, 2
	mov	DWORD PTR _myTarget$[ebp], edx
; Line 97
	jmp	SHORT $LN5@T_UConvert
$LN4@T_UConvert:
; Line 99
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	dx, WORD PTR _ch$[ebp]
	mov	WORD PTR [ecx+116], dx
; Line 100
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx+65], 1
; Line 101
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
; Line 102
	jmp	SHORT $donefornow$8573
$LN5@T_UConvert:
; Line 106
	jmp	SHORT $LN2@T_UConvert
$LN7@T_UConvert:
; Line 107
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	dl, BYTE PTR _i$[ebp]
	mov	BYTE PTR [ecx+36], dl
; Line 108
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 12			; 0000000cH
; Line 109
	jmp	SHORT $donefornow$8573
$LN2@T_UConvert:
; Line 111
	jmp	$LN13@T_UConvert
$donefornow$8573:
; Line 114
	mov	eax, DWORD PTR _mySource$[ebp]
	cmp	eax, DWORD PTR _sourceLimit$[ebp]
	jae	SHORT $LN1@T_UConvert
	mov	eax, DWORD PTR _myTarget$[ebp]
	cmp	eax, DWORD PTR _targetLimit$[ebp]
	jb	SHORT $LN1@T_UConvert
	mov	eax, DWORD PTR _err$[ebp]
	cmp	DWORD PTR [eax], 0
	jg	SHORT $LN1@T_UConvert
; Line 116
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
$LN1@T_UConvert:
; Line 119
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _myTarget$[ebp]
	mov	DWORD PTR [eax+16], ecx
; Line 120
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _mySource$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 121
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_T_UConverter_toUnicode_UTF32_BE ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _T_UConverter_toUnicode_UTF32_BE_OFFSET_LOGIC
_TEXT	SEGMENT
_offsetNum$ = -104					; size = 4
_i$ = -92						; size = 4
_ch$ = -80						; size = 4
_toUBytes$ = -68					; size = 4
_targetLimit$ = -56					; size = 4
_sourceLimit$ = -44					; size = 4
_myOffsets$ = -32					; size = 4
_myTarget$ = -20					; size = 4
_mySource$ = -8						; size = 4
_args$ = 8						; size = 4
_err$ = 12						; size = 4
_T_UConverter_toUnicode_UTF32_BE_OFFSET_LOGIC PROC	; COMDAT
; Line 126
	push	ebp
	mov	ebp, esp
	sub	esp, 300				; 0000012cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-300]
	mov	ecx, 75					; 0000004bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 127
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _mySource$[ebp], ecx
; Line 128
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _myTarget$[ebp], ecx
; Line 129
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR _myOffsets$[ebp], ecx
; Line 130
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _sourceLimit$[ebp], ecx
; Line 131
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _targetLimit$[ebp], ecx
; Line 132
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 37					; 00000025H
	mov	DWORD PTR _toUBytes$[ebp], ecx
; Line 134
	mov	DWORD PTR _offsetNum$[ebp], 0
; Line 137
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cmp	DWORD PTR [ecx+44], 0
	je	SHORT $LN13@T_UConvert@2
	mov	eax, DWORD PTR _myTarget$[ebp]
	cmp	eax, DWORD PTR _targetLimit$[ebp]
	jae	SHORT $LN13@T_UConvert@2
; Line 138
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	movsx	edx, BYTE PTR [ecx+36]
	mov	DWORD PTR _i$[ebp], edx
; Line 139
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx+36], 0
; Line 141
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+44]
	sub	edx, 1
	mov	DWORD PTR _ch$[ebp], edx
; Line 142
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+44], 0
; Line 143
	jmp	SHORT $morebytes$8606
$LN13@T_UConvert@2:
; Line 146
	mov	eax, DWORD PTR _mySource$[ebp]
	cmp	eax, DWORD PTR _sourceLimit$[ebp]
	jae	$donefornow$8619
	mov	eax, DWORD PTR _myTarget$[ebp]
	cmp	eax, DWORD PTR _targetLimit$[ebp]
	jae	$donefornow$8619
; Line 147
	mov	DWORD PTR _i$[ebp], 0
; Line 148
	mov	DWORD PTR _ch$[ebp], 0
$morebytes$8606:
; Line 150
	cmp	DWORD PTR _i$[ebp], 4
	jae	SHORT $LN10@T_UConvert@2
; Line 151
	mov	eax, DWORD PTR _mySource$[ebp]
	cmp	eax, DWORD PTR _sourceLimit$[ebp]
	jae	SHORT $LN9@T_UConvert@2
; Line 152
	mov	eax, DWORD PTR _ch$[ebp]
	shl	eax, 8
	mov	ecx, DWORD PTR _mySource$[ebp]
	movzx	edx, BYTE PTR [ecx]
	or	eax, edx
	mov	DWORD PTR _ch$[ebp], eax
; Line 153
	mov	eax, DWORD PTR _toUBytes$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _mySource$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _mySource$[ebp]
	add	ecx, 1
	mov	DWORD PTR _mySource$[ebp], ecx
; Line 155
	jmp	SHORT $LN8@T_UConvert@2
$LN9@T_UConvert@2:
; Line 158
	mov	eax, DWORD PTR _ch$[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+44], eax
; Line 159
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	dl, BYTE PTR _i$[ebp]
	mov	BYTE PTR [ecx+36], dl
; Line 160
	jmp	$donefornow$8619
$LN8@T_UConvert@2:
; Line 162
	jmp	SHORT $morebytes$8606
$LN10@T_UConvert@2:
; Line 164
	cmp	DWORD PTR _ch$[ebp], 1114111		; 0010ffffH
	ja	$LN7@T_UConvert@2
	mov	eax, DWORD PTR _ch$[ebp]
	and	eax, -2048				; fffff800H
	cmp	eax, 55296				; 0000d800H
	je	$LN7@T_UConvert@2
; Line 166
	cmp	DWORD PTR _ch$[ebp], 65535		; 0000ffffH
	ja	SHORT $LN6@T_UConvert@2
; Line 168
	mov	eax, DWORD PTR _myTarget$[ebp]
	mov	cx, WORD PTR _ch$[ebp]
	mov	WORD PTR [eax], cx
	mov	edx, DWORD PTR _myTarget$[ebp]
	add	edx, 2
	mov	DWORD PTR _myTarget$[ebp], edx
; Line 169
	mov	eax, DWORD PTR _myOffsets$[ebp]
	mov	ecx, DWORD PTR _offsetNum$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _myOffsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _myOffsets$[ebp], edx
; Line 171
	jmp	$LN5@T_UConvert@2
$LN6@T_UConvert@2:
; Line 173
	mov	eax, DWORD PTR _ch$[ebp]
	shr	eax, 10					; 0000000aH
	add	eax, 55232				; 0000d7c0H
	mov	ecx, DWORD PTR _myTarget$[ebp]
	mov	WORD PTR [ecx], ax
	mov	edx, DWORD PTR _myTarget$[ebp]
	add	edx, 2
	mov	DWORD PTR _myTarget$[ebp], edx
; Line 174
	mov	eax, DWORD PTR _myOffsets$[ebp]
	mov	ecx, DWORD PTR _offsetNum$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _myOffsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _myOffsets$[ebp], edx
; Line 175
	mov	eax, DWORD PTR _ch$[ebp]
	and	eax, 1023				; 000003ffH
	or	eax, 56320				; 0000dc00H
	movzx	ecx, ax
	mov	DWORD PTR _ch$[ebp], ecx
; Line 176
	mov	eax, DWORD PTR _myTarget$[ebp]
	cmp	eax, DWORD PTR _targetLimit$[ebp]
	jae	SHORT $LN4@T_UConvert@2
; Line 178
	mov	eax, DWORD PTR _myTarget$[ebp]
	mov	cx, WORD PTR _ch$[ebp]
	mov	WORD PTR [eax], cx
	mov	edx, DWORD PTR _myTarget$[ebp]
	add	edx, 2
	mov	DWORD PTR _myTarget$[ebp], edx
; Line 179
	mov	eax, DWORD PTR _myOffsets$[ebp]
	mov	ecx, DWORD PTR _offsetNum$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _myOffsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _myOffsets$[ebp], edx
; Line 181
	jmp	SHORT $LN5@T_UConvert@2
$LN4@T_UConvert@2:
; Line 183
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	dx, WORD PTR _ch$[ebp]
	mov	WORD PTR [ecx+116], dx
; Line 184
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx+65], 1
; Line 185
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
; Line 186
	jmp	SHORT $donefornow$8619
$LN5@T_UConvert@2:
; Line 190
	jmp	SHORT $LN2@T_UConvert@2
$LN7@T_UConvert@2:
; Line 191
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	dl, BYTE PTR _i$[ebp]
	mov	BYTE PTR [ecx+36], dl
; Line 192
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 12			; 0000000cH
; Line 193
	jmp	SHORT $donefornow$8619
$LN2@T_UConvert@2:
; Line 195
	mov	eax, DWORD PTR _offsetNum$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR _offsetNum$[ebp], eax
; Line 196
	jmp	$LN13@T_UConvert@2
$donefornow$8619:
; Line 199
	mov	eax, DWORD PTR _mySource$[ebp]
	cmp	eax, DWORD PTR _sourceLimit$[ebp]
	jae	SHORT $LN1@T_UConvert@2
	mov	eax, DWORD PTR _myTarget$[ebp]
	cmp	eax, DWORD PTR _targetLimit$[ebp]
	jb	SHORT $LN1@T_UConvert@2
	mov	eax, DWORD PTR _err$[ebp]
	cmp	DWORD PTR [eax], 0
	jg	SHORT $LN1@T_UConvert@2
; Line 202
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
$LN1@T_UConvert@2:
; Line 205
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _myTarget$[ebp]
	mov	DWORD PTR [eax+16], ecx
; Line 206
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _mySource$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 207
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _myOffsets$[ebp]
	mov	DWORD PTR [eax+24], ecx
; Line 208
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_T_UConverter_toUnicode_UTF32_BE_OFFSET_LOGIC ENDP
_TEXT	ENDS
EXTRN	_ucnv_fromUWriteBytes_56:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _T_UConverter_fromUnicode_UTF32_BE
_TEXT	SEGMENT
_temp$ = -92						; size = 4
_indexToWrite$ = -80					; size = 4
_ch2$ = -68						; size = 4
_ch$ = -56						; size = 4
_targetLimit$ = -44					; size = 4
_sourceLimit$ = -32					; size = 4
_myTarget$ = -20					; size = 4
_mySource$ = -8						; size = 4
_args$ = 8						; size = 4
_err$ = 12						; size = 4
_T_UConverter_fromUnicode_UTF32_BE PROC			; COMDAT
; Line 213
	push	ebp
	mov	ebp, esp
	sub	esp, 288				; 00000120H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-288]
	mov	ecx, 72					; 00000048H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 214
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _mySource$[ebp], ecx
; Line 216
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _sourceLimit$[ebp], ecx
; Line 217
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _targetLimit$[ebp], ecx
; Line 222
	mov	eax, DWORD PTR _mySource$[ebp]
	cmp	eax, DWORD PTR _sourceLimit$[ebp]
	jb	SHORT $LN19@T_UConvert@3
; Line 224
	jmp	$LN20@T_UConvert@3
$LN19@T_UConvert@3:
; Line 228
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cmp	DWORD PTR [ecx+52], 1
	jne	SHORT $LN18@T_UConvert@3
; Line 234
	mov	eax, DWORD PTR _err$[ebp]
	push	eax
	push	-1
	mov	ecx, DWORD PTR _args$[ebp]
	add	ecx, 24					; 00000018H
	push	ecx
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+20]
	push	eax
	mov	ecx, DWORD PTR _args$[ebp]
	add	ecx, 16					; 00000010H
	push	ecx
	push	4
	push	OFFSET ?bom@?3??T_UConverter_fromUnicode_UTF32_BE@@9@9
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	_ucnv_fromUWriteBytes_56
	add	esp, 32					; 00000020H
; Line 235
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+52], 0
$LN18@T_UConvert@3:
; Line 238
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _myTarget$[ebp], ecx
; Line 239
	mov	BYTE PTR _temp$[ebp], 0
; Line 241
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cmp	DWORD PTR [ecx+56], 0
	je	SHORT $LN16@T_UConvert@3
; Line 242
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+56]
	mov	DWORD PTR _ch$[ebp], edx
; Line 243
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+56], 0
; Line 244
	jmp	SHORT $lowsurogate$8658
$LN16@T_UConvert@3:
; Line 247
	mov	eax, DWORD PTR _mySource$[ebp]
	cmp	eax, DWORD PTR _sourceLimit$[ebp]
	jae	$LN15@T_UConvert@3
	mov	eax, DWORD PTR _myTarget$[ebp]
	cmp	eax, DWORD PTR _targetLimit$[ebp]
	jae	$LN15@T_UConvert@3
; Line 248
	mov	eax, DWORD PTR _mySource$[ebp]
	movzx	ecx, WORD PTR [eax]
	mov	DWORD PTR _ch$[ebp], ecx
	mov	edx, DWORD PTR _mySource$[ebp]
	add	edx, 2
	mov	DWORD PTR _mySource$[ebp], edx
; Line 250
	mov	eax, DWORD PTR _ch$[ebp]
	and	eax, -2048				; fffff800H
	cmp	eax, 55296				; 0000d800H
	jne	$LN14@T_UConvert@3
; Line 251
	mov	eax, DWORD PTR _ch$[ebp]
	and	eax, -1024				; fffffc00H
	cmp	eax, 55296				; 0000d800H
	jne	$LN13@T_UConvert@3
$lowsurogate$8658:
; Line 253
	mov	eax, DWORD PTR _mySource$[ebp]
	cmp	eax, DWORD PTR _sourceLimit$[ebp]
	jae	SHORT $LN12@T_UConvert@3
; Line 254
	mov	eax, DWORD PTR _mySource$[ebp]
	movzx	ecx, WORD PTR [eax]
	mov	DWORD PTR _ch2$[ebp], ecx
; Line 255
	mov	eax, DWORD PTR _ch2$[ebp]
	and	eax, -1024				; fffffc00H
	cmp	eax, 56320				; 0000dc00H
	jne	SHORT $LN11@T_UConvert@3
; Line 256
	mov	eax, DWORD PTR _ch$[ebp]
	sub	eax, 55296				; 0000d800H
	shl	eax, 10					; 0000000aH
	mov	ecx, DWORD PTR _ch2$[ebp]
	lea	edx, DWORD PTR [eax+ecx+9216]
	mov	DWORD PTR _ch$[ebp], edx
; Line 257
	mov	eax, DWORD PTR _mySource$[ebp]
	add	eax, 2
	mov	DWORD PTR _mySource$[ebp], eax
; Line 259
	jmp	SHORT $LN10@T_UConvert@3
$LN11@T_UConvert@3:
; Line 262
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _ch$[ebp]
	mov	DWORD PTR [ecx+56], edx
; Line 263
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 12			; 0000000cH
; Line 264
	jmp	$LN15@T_UConvert@3
$LN10@T_UConvert@3:
; Line 267
	jmp	SHORT $LN9@T_UConvert@3
$LN12@T_UConvert@3:
; Line 269
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _ch$[ebp]
	mov	DWORD PTR [ecx+56], edx
; Line 270
	mov	eax, DWORD PTR _args$[ebp]
	movsx	ecx, BYTE PTR [eax+2]
	test	ecx, ecx
	je	SHORT $LN8@T_UConvert@3
; Line 273
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 12			; 0000000cH
$LN8@T_UConvert@3:
; Line 275
	jmp	$LN15@T_UConvert@3
$LN9@T_UConvert@3:
; Line 278
	jmp	SHORT $LN14@T_UConvert@3
$LN13@T_UConvert@3:
; Line 281
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _ch$[ebp]
	mov	DWORD PTR [ecx+56], edx
; Line 282
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 12			; 0000000cH
; Line 283
	jmp	$LN15@T_UConvert@3
$LN14@T_UConvert@3:
; Line 288
	mov	eax, DWORD PTR _ch$[ebp]
	sar	eax, 16					; 00000010H
	and	eax, 31					; 0000001fH
	mov	BYTE PTR _temp$[ebp+1], al
; Line 289
	mov	eax, DWORD PTR _ch$[ebp]
	sar	eax, 8
	mov	BYTE PTR _temp$[ebp+2], al
; Line 290
	mov	al, BYTE PTR _ch$[ebp]
	mov	BYTE PTR _temp$[ebp+3], al
; Line 292
	mov	DWORD PTR _indexToWrite$[ebp], 0
	jmp	SHORT $LN6@T_UConvert@3
$LN5@T_UConvert@3:
	mov	eax, DWORD PTR _indexToWrite$[ebp]
	add	eax, 1
	mov	DWORD PTR _indexToWrite$[ebp], eax
$LN6@T_UConvert@3:
	cmp	DWORD PTR _indexToWrite$[ebp], 3
	ja	SHORT $LN4@T_UConvert@3
; Line 293
	mov	eax, DWORD PTR _myTarget$[ebp]
	cmp	eax, DWORD PTR _targetLimit$[ebp]
	jae	SHORT $LN3@T_UConvert@3
; Line 294
	mov	eax, DWORD PTR _myTarget$[ebp]
	mov	ecx, DWORD PTR _indexToWrite$[ebp]
	mov	dl, BYTE PTR _temp$[ebp+ecx]
	mov	BYTE PTR [eax], dl
	mov	eax, DWORD PTR _myTarget$[ebp]
	add	eax, 1
	mov	DWORD PTR _myTarget$[ebp], eax
; Line 296
	jmp	SHORT $LN2@T_UConvert@3
$LN3@T_UConvert@3:
; Line 297
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+4]
	movsx	edx, BYTE PTR [eax+63]
	mov	eax, DWORD PTR _indexToWrite$[ebp]
	mov	al, BYTE PTR _temp$[ebp+eax]
	mov	BYTE PTR [ecx+edx+76], al
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	al, BYTE PTR [edx+63]
	add	al, 1
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx+63], al
; Line 298
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
$LN2@T_UConvert@3:
; Line 300
	jmp	SHORT $LN5@T_UConvert@3
$LN4@T_UConvert@3:
; Line 301
	jmp	$LN16@T_UConvert@3
$LN15@T_UConvert@3:
; Line 303
	mov	eax, DWORD PTR _mySource$[ebp]
	cmp	eax, DWORD PTR _sourceLimit$[ebp]
	jae	SHORT $LN1@T_UConvert@3
	mov	eax, DWORD PTR _myTarget$[ebp]
	cmp	eax, DWORD PTR _targetLimit$[ebp]
	jb	SHORT $LN1@T_UConvert@3
	mov	eax, DWORD PTR _err$[ebp]
	cmp	DWORD PTR [eax], 0
	jg	SHORT $LN1@T_UConvert@3
; Line 304
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
$LN1@T_UConvert@3:
; Line 307
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _myTarget$[ebp]
	mov	DWORD PTR [eax+16], ecx
; Line 308
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _mySource$[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN20@T_UConvert@3:
; Line 309
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN24@T_UConvert@3
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 288				; 00000120H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN24@T_UConvert@3:
	DD	1
	DD	$LN23@T_UConvert@3
$LN23@T_UConvert@3:
	DD	-92					; ffffffa4H
	DD	4
	DD	$LN22@T_UConvert@3
$LN22@T_UConvert@3:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
_T_UConverter_fromUnicode_UTF32_BE ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _T_UConverter_fromUnicode_UTF32_BE_OFFSET_LOGIC
_TEXT	SEGMENT
_temp$ = -116						; size = 4
_indexToWrite$ = -104					; size = 4
_offsetNum$ = -92					; size = 4
_ch2$ = -80						; size = 4
_ch$ = -68						; size = 4
_targetLimit$ = -56					; size = 4
_sourceLimit$ = -44					; size = 4
_myOffsets$ = -32					; size = 4
_myTarget$ = -20					; size = 4
_mySource$ = -8						; size = 4
_args$ = 8						; size = 4
_err$ = 12						; size = 4
_T_UConverter_fromUnicode_UTF32_BE_OFFSET_LOGIC PROC	; COMDAT
; Line 314
	push	ebp
	mov	ebp, esp
	sub	esp, 312				; 00000138H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-312]
	mov	ecx, 78					; 0000004eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 315
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _mySource$[ebp], ecx
; Line 318
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _sourceLimit$[ebp], ecx
; Line 319
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _targetLimit$[ebp], ecx
; Line 321
	mov	DWORD PTR _offsetNum$[ebp], 0
; Line 325
	mov	eax, DWORD PTR _mySource$[ebp]
	cmp	eax, DWORD PTR _sourceLimit$[ebp]
	jb	SHORT $LN19@T_UConvert@4
; Line 327
	jmp	$LN20@T_UConvert@4
$LN19@T_UConvert@4:
; Line 331
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cmp	DWORD PTR [ecx+52], 1
	jne	SHORT $LN18@T_UConvert@4
; Line 337
	mov	eax, DWORD PTR _err$[ebp]
	push	eax
	push	-1
	mov	ecx, DWORD PTR _args$[ebp]
	add	ecx, 24					; 00000018H
	push	ecx
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+20]
	push	eax
	mov	ecx, DWORD PTR _args$[ebp]
	add	ecx, 16					; 00000010H
	push	ecx
	push	4
	push	OFFSET ?bom@?3??T_UConverter_fromUnicode_UTF32_BE_OFFSET_LOGIC@@9@9
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	_ucnv_fromUWriteBytes_56
	add	esp, 32					; 00000020H
; Line 338
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+52], 0
$LN18@T_UConvert@4:
; Line 341
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _myTarget$[ebp], ecx
; Line 342
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR _myOffsets$[ebp], ecx
; Line 343
	mov	BYTE PTR _temp$[ebp], 0
; Line 345
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cmp	DWORD PTR [ecx+56], 0
	je	SHORT $LN16@T_UConvert@4
; Line 346
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+56]
	mov	DWORD PTR _ch$[ebp], edx
; Line 347
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+56], 0
; Line 348
	jmp	SHORT $lowsurogate$8707
$LN16@T_UConvert@4:
; Line 351
	mov	eax, DWORD PTR _mySource$[ebp]
	cmp	eax, DWORD PTR _sourceLimit$[ebp]
	jae	$LN15@T_UConvert@4
	mov	eax, DWORD PTR _myTarget$[ebp]
	cmp	eax, DWORD PTR _targetLimit$[ebp]
	jae	$LN15@T_UConvert@4
; Line 352
	mov	eax, DWORD PTR _mySource$[ebp]
	movzx	ecx, WORD PTR [eax]
	mov	DWORD PTR _ch$[ebp], ecx
	mov	edx, DWORD PTR _mySource$[ebp]
	add	edx, 2
	mov	DWORD PTR _mySource$[ebp], edx
; Line 354
	mov	eax, DWORD PTR _ch$[ebp]
	and	eax, -2048				; fffff800H
	cmp	eax, 55296				; 0000d800H
	jne	$LN14@T_UConvert@4
; Line 355
	mov	eax, DWORD PTR _ch$[ebp]
	and	eax, -1024				; fffffc00H
	cmp	eax, 55296				; 0000d800H
	jne	$LN13@T_UConvert@4
$lowsurogate$8707:
; Line 357
	mov	eax, DWORD PTR _mySource$[ebp]
	cmp	eax, DWORD PTR _sourceLimit$[ebp]
	jae	SHORT $LN12@T_UConvert@4
; Line 358
	mov	eax, DWORD PTR _mySource$[ebp]
	movzx	ecx, WORD PTR [eax]
	mov	DWORD PTR _ch2$[ebp], ecx
; Line 359
	mov	eax, DWORD PTR _ch2$[ebp]
	and	eax, -1024				; fffffc00H
	cmp	eax, 56320				; 0000dc00H
	jne	SHORT $LN11@T_UConvert@4
; Line 360
	mov	eax, DWORD PTR _ch$[ebp]
	sub	eax, 55296				; 0000d800H
	shl	eax, 10					; 0000000aH
	mov	ecx, DWORD PTR _ch2$[ebp]
	lea	edx, DWORD PTR [eax+ecx+9216]
	mov	DWORD PTR _ch$[ebp], edx
; Line 361
	mov	eax, DWORD PTR _mySource$[ebp]
	add	eax, 2
	mov	DWORD PTR _mySource$[ebp], eax
; Line 363
	jmp	SHORT $LN10@T_UConvert@4
$LN11@T_UConvert@4:
; Line 366
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _ch$[ebp]
	mov	DWORD PTR [ecx+56], edx
; Line 367
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 12			; 0000000cH
; Line 368
	jmp	$LN15@T_UConvert@4
$LN10@T_UConvert@4:
; Line 371
	jmp	SHORT $LN9@T_UConvert@4
$LN12@T_UConvert@4:
; Line 373
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _ch$[ebp]
	mov	DWORD PTR [ecx+56], edx
; Line 374
	mov	eax, DWORD PTR _args$[ebp]
	movsx	ecx, BYTE PTR [eax+2]
	test	ecx, ecx
	je	SHORT $LN8@T_UConvert@4
; Line 377
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 12			; 0000000cH
$LN8@T_UConvert@4:
; Line 379
	jmp	$LN15@T_UConvert@4
$LN9@T_UConvert@4:
; Line 382
	jmp	SHORT $LN14@T_UConvert@4
$LN13@T_UConvert@4:
; Line 385
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _ch$[ebp]
	mov	DWORD PTR [ecx+56], edx
; Line 386
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 12			; 0000000cH
; Line 387
	jmp	$LN15@T_UConvert@4
$LN14@T_UConvert@4:
; Line 392
	mov	eax, DWORD PTR _ch$[ebp]
	sar	eax, 16					; 00000010H
	and	eax, 31					; 0000001fH
	mov	BYTE PTR _temp$[ebp+1], al
; Line 393
	mov	eax, DWORD PTR _ch$[ebp]
	sar	eax, 8
	mov	BYTE PTR _temp$[ebp+2], al
; Line 394
	mov	al, BYTE PTR _ch$[ebp]
	mov	BYTE PTR _temp$[ebp+3], al
; Line 396
	mov	DWORD PTR _indexToWrite$[ebp], 0
	jmp	SHORT $LN6@T_UConvert@4
$LN5@T_UConvert@4:
	mov	eax, DWORD PTR _indexToWrite$[ebp]
	add	eax, 1
	mov	DWORD PTR _indexToWrite$[ebp], eax
$LN6@T_UConvert@4:
	cmp	DWORD PTR _indexToWrite$[ebp], 3
	ja	SHORT $LN4@T_UConvert@4
; Line 397
	mov	eax, DWORD PTR _myTarget$[ebp]
	cmp	eax, DWORD PTR _targetLimit$[ebp]
	jae	SHORT $LN3@T_UConvert@4
; Line 398
	mov	eax, DWORD PTR _myTarget$[ebp]
	mov	ecx, DWORD PTR _indexToWrite$[ebp]
	mov	dl, BYTE PTR _temp$[ebp+ecx]
	mov	BYTE PTR [eax], dl
	mov	eax, DWORD PTR _myTarget$[ebp]
	add	eax, 1
	mov	DWORD PTR _myTarget$[ebp], eax
; Line 399
	mov	eax, DWORD PTR _myOffsets$[ebp]
	mov	ecx, DWORD PTR _offsetNum$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _myOffsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _myOffsets$[ebp], edx
; Line 401
	jmp	SHORT $LN2@T_UConvert@4
$LN3@T_UConvert@4:
; Line 402
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+4]
	movsx	edx, BYTE PTR [eax+63]
	mov	eax, DWORD PTR _indexToWrite$[ebp]
	mov	al, BYTE PTR _temp$[ebp+eax]
	mov	BYTE PTR [ecx+edx+76], al
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	al, BYTE PTR [edx+63]
	add	al, 1
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx+63], al
; Line 403
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
$LN2@T_UConvert@4:
; Line 405
	jmp	SHORT $LN5@T_UConvert@4
$LN4@T_UConvert@4:
; Line 406
	movzx	eax, BYTE PTR _temp$[ebp+1]
	neg	eax
	sbb	eax, eax
	neg	eax
	mov	ecx, DWORD PTR _offsetNum$[ebp]
	lea	edx, DWORD PTR [ecx+eax+1]
	mov	DWORD PTR _offsetNum$[ebp], edx
; Line 407
	jmp	$LN16@T_UConvert@4
$LN15@T_UConvert@4:
; Line 409
	mov	eax, DWORD PTR _mySource$[ebp]
	cmp	eax, DWORD PTR _sourceLimit$[ebp]
	jae	SHORT $LN1@T_UConvert@4
	mov	eax, DWORD PTR _myTarget$[ebp]
	cmp	eax, DWORD PTR _targetLimit$[ebp]
	jb	SHORT $LN1@T_UConvert@4
	mov	eax, DWORD PTR _err$[ebp]
	cmp	DWORD PTR [eax], 0
	jg	SHORT $LN1@T_UConvert@4
; Line 410
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
$LN1@T_UConvert@4:
; Line 413
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _myTarget$[ebp]
	mov	DWORD PTR [eax+16], ecx
; Line 414
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _mySource$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 415
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _myOffsets$[ebp]
	mov	DWORD PTR [eax+24], ecx
$LN20@T_UConvert@4:
; Line 416
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN24@T_UConvert@4
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 312				; 00000138H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN24@T_UConvert@4:
	DD	1
	DD	$LN23@T_UConvert@4
$LN23@T_UConvert@4:
	DD	-116					; ffffff8cH
	DD	4
	DD	$LN22@T_UConvert@4
$LN22@T_UConvert@4:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
_T_UConverter_fromUnicode_UTF32_BE_OFFSET_LOGIC ENDP
_TEXT	ENDS
EXTRN	_memcpy:PROC
EXTRN	_uprv_checkValidMemory:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _T_UConverter_getNextUChar_UTF32_BE
_TEXT	SEGMENT
_length$ = -32						; size = 4
_myUChar$ = -20						; size = 4
_mySource$ = -8						; size = 4
_args$ = 8						; size = 4
_err$ = 12						; size = 4
_T_UConverter_getNextUChar_UTF32_BE PROC		; COMDAT
; Line 421
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 426
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _mySource$[ebp], ecx
; Line 427
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _mySource$[ebp]
	cmp	ecx, DWORD PTR [eax+12]
	jb	SHORT $LN3@T_UConvert@5
; Line 430
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 8
; Line 431
	mov	eax, 65535				; 0000ffffH
	jmp	$LN4@T_UConvert@5
$LN3@T_UConvert@5:
; Line 434
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	sub	ecx, DWORD PTR _mySource$[ebp]
	mov	DWORD PTR _length$[ebp], ecx
; Line 435
	cmp	DWORD PTR _length$[ebp], 4
	jge	SHORT $LN2@T_UConvert@5
; Line 438
	push	1
	mov	eax, DWORD PTR _mySource$[ebp]
	push	eax
	call	_uprv_checkValidMemory
	add	esp, 8
	mov	ecx, DWORD PTR _length$[ebp]
	push	ecx
	mov	edx, DWORD PTR _mySource$[ebp]
	push	edx
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 37					; 00000025H
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 439
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	dl, BYTE PTR _length$[ebp]
	mov	BYTE PTR [ecx+36], dl
; Line 440
	mov	eax, DWORD PTR _mySource$[ebp]
	add	eax, DWORD PTR _length$[ebp]
	mov	ecx, DWORD PTR _args$[ebp]
	mov	DWORD PTR [ecx+8], eax
; Line 441
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 11			; 0000000bH
; Line 442
	mov	eax, 65535				; 0000ffffH
	jmp	$LN4@T_UConvert@5
$LN2@T_UConvert@5:
; Line 449
	mov	eax, DWORD PTR _mySource$[ebp]
	movzx	ecx, BYTE PTR [eax]
	shl	ecx, 24					; 00000018H
	mov	edx, DWORD PTR _mySource$[ebp]
	movzx	eax, BYTE PTR [edx+1]
	shl	eax, 16					; 00000010H
	or	ecx, eax
	mov	edx, DWORD PTR _mySource$[ebp]
	movzx	eax, BYTE PTR [edx+2]
	shl	eax, 8
	or	ecx, eax
	mov	edx, DWORD PTR _mySource$[ebp]
	movzx	eax, BYTE PTR [edx+3]
	or	ecx, eax
	mov	DWORD PTR _myUChar$[ebp], ecx
; Line 451
	mov	eax, DWORD PTR _mySource$[ebp]
	add	eax, 4
	mov	ecx, DWORD PTR _args$[ebp]
	mov	DWORD PTR [ecx+8], eax
; Line 452
	cmp	DWORD PTR _myUChar$[ebp], 1114111	; 0010ffffH
	ja	SHORT $LN1@T_UConvert@5
	mov	eax, DWORD PTR _myUChar$[ebp]
	and	eax, -2048				; fffff800H
	cmp	eax, 55296				; 0000d800H
	je	SHORT $LN1@T_UConvert@5
; Line 453
	mov	eax, DWORD PTR _myUChar$[ebp]
	jmp	SHORT $LN4@T_UConvert@5
$LN1@T_UConvert@5:
; Line 456
	push	1
	mov	eax, DWORD PTR _mySource$[ebp]
	push	eax
	call	_uprv_checkValidMemory
	add	esp, 8
	push	4
	mov	ecx, DWORD PTR _mySource$[ebp]
	push	ecx
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 37					; 00000025H
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 457
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx+36], 4
; Line 459
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 12			; 0000000cH
; Line 460
	mov	eax, 65535				; 0000ffffH
$LN4@T_UConvert@5:
; Line 461
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_T_UConverter_getNextUChar_UTF32_BE ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _T_UConverter_toUnicode_UTF32_LE
_TEXT	SEGMENT
_i$ = -80						; size = 4
_ch$ = -68						; size = 4
_toUBytes$ = -56					; size = 4
_targetLimit$ = -44					; size = 4
_sourceLimit$ = -32					; size = 4
_myTarget$ = -20					; size = 4
_mySource$ = -8						; size = 4
_args$ = 8						; size = 4
_err$ = 12						; size = 4
_T_UConverter_toUnicode_UTF32_LE PROC			; COMDAT
; Line 506
	push	ebp
	mov	ebp, esp
	sub	esp, 276				; 00000114H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-276]
	mov	ecx, 69					; 00000045H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 507
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _mySource$[ebp], ecx
; Line 508
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _myTarget$[ebp], ecx
; Line 509
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _sourceLimit$[ebp], ecx
; Line 510
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _targetLimit$[ebp], ecx
; Line 511
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 37					; 00000025H
	mov	DWORD PTR _toUBytes$[ebp], ecx
; Line 515
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cmp	DWORD PTR [ecx+44], 0
	je	SHORT $LN13@T_UConvert@6
	mov	eax, DWORD PTR _myTarget$[ebp]
	cmp	eax, DWORD PTR _targetLimit$[ebp]
	jae	SHORT $LN13@T_UConvert@6
; Line 517
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	movsx	edx, BYTE PTR [ecx+36]
	mov	DWORD PTR _i$[ebp], edx
; Line 518
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx+36], 0
; Line 521
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+44]
	sub	edx, 1
	mov	DWORD PTR _ch$[ebp], edx
; Line 522
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+44], 0
; Line 523
	jmp	SHORT $morebytes$8797
$LN13@T_UConvert@6:
; Line 526
	mov	eax, DWORD PTR _mySource$[ebp]
	cmp	eax, DWORD PTR _sourceLimit$[ebp]
	jae	$donefornow$8810
	mov	eax, DWORD PTR _myTarget$[ebp]
	cmp	eax, DWORD PTR _targetLimit$[ebp]
	jae	$donefornow$8810
; Line 528
	mov	DWORD PTR _i$[ebp], 0
; Line 529
	mov	DWORD PTR _ch$[ebp], 0
$morebytes$8797:
; Line 531
	cmp	DWORD PTR _i$[ebp], 4
	jae	SHORT $LN10@T_UConvert@6
; Line 533
	mov	eax, DWORD PTR _mySource$[ebp]
	cmp	eax, DWORD PTR _sourceLimit$[ebp]
	jae	SHORT $LN9@T_UConvert@6
; Line 535
	mov	eax, DWORD PTR _mySource$[ebp]
	movzx	edx, BYTE PTR [eax]
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 3
	shl	edx, cl
	or	edx, DWORD PTR _ch$[ebp]
	mov	DWORD PTR _ch$[ebp], edx
; Line 536
	mov	eax, DWORD PTR _toUBytes$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _mySource$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _mySource$[ebp]
	add	ecx, 1
	mov	DWORD PTR _mySource$[ebp], ecx
; Line 538
	jmp	SHORT $LN8@T_UConvert@6
$LN9@T_UConvert@6:
; Line 542
	mov	eax, DWORD PTR _ch$[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+44], eax
; Line 543
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	dl, BYTE PTR _i$[ebp]
	mov	BYTE PTR [ecx+36], dl
; Line 544
	jmp	$donefornow$8810
$LN8@T_UConvert@6:
; Line 546
	jmp	SHORT $morebytes$8797
$LN10@T_UConvert@6:
; Line 548
	cmp	DWORD PTR _ch$[ebp], 1114111		; 0010ffffH
	ja	$LN7@T_UConvert@6
	mov	eax, DWORD PTR _ch$[ebp]
	and	eax, -2048				; fffff800H
	cmp	eax, 55296				; 0000d800H
	je	$LN7@T_UConvert@6
; Line 550
	cmp	DWORD PTR _ch$[ebp], 65535		; 0000ffffH
	ja	SHORT $LN6@T_UConvert@6
; Line 552
	mov	eax, DWORD PTR _myTarget$[ebp]
	mov	cx, WORD PTR _ch$[ebp]
	mov	WORD PTR [eax], cx
	mov	edx, DWORD PTR _myTarget$[ebp]
	add	edx, 2
	mov	DWORD PTR _myTarget$[ebp], edx
; Line 554
	jmp	SHORT $LN5@T_UConvert@6
$LN6@T_UConvert@6:
; Line 556
	mov	eax, DWORD PTR _ch$[ebp]
	shr	eax, 10					; 0000000aH
	add	eax, 55232				; 0000d7c0H
	mov	ecx, DWORD PTR _myTarget$[ebp]
	mov	WORD PTR [ecx], ax
	mov	edx, DWORD PTR _myTarget$[ebp]
	add	edx, 2
	mov	DWORD PTR _myTarget$[ebp], edx
; Line 557
	mov	eax, DWORD PTR _ch$[ebp]
	and	eax, 1023				; 000003ffH
	or	eax, 56320				; 0000dc00H
	movzx	ecx, ax
	mov	DWORD PTR _ch$[ebp], ecx
; Line 558
	mov	eax, DWORD PTR _myTarget$[ebp]
	cmp	eax, DWORD PTR _targetLimit$[ebp]
	jae	SHORT $LN4@T_UConvert@6
; Line 559
	mov	eax, DWORD PTR _myTarget$[ebp]
	mov	cx, WORD PTR _ch$[ebp]
	mov	WORD PTR [eax], cx
	mov	edx, DWORD PTR _myTarget$[ebp]
	add	edx, 2
	mov	DWORD PTR _myTarget$[ebp], edx
; Line 561
	jmp	SHORT $LN5@T_UConvert@6
$LN4@T_UConvert@6:
; Line 563
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	dx, WORD PTR _ch$[ebp]
	mov	WORD PTR [ecx+116], dx
; Line 564
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx+65], 1
; Line 565
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
; Line 566
	jmp	SHORT $donefornow$8810
$LN5@T_UConvert@6:
; Line 570
	jmp	SHORT $LN2@T_UConvert@6
$LN7@T_UConvert@6:
; Line 571
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	dl, BYTE PTR _i$[ebp]
	mov	BYTE PTR [ecx+36], dl
; Line 572
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 12			; 0000000cH
; Line 573
	jmp	SHORT $donefornow$8810
$LN2@T_UConvert@6:
; Line 575
	jmp	$LN13@T_UConvert@6
$donefornow$8810:
; Line 578
	mov	eax, DWORD PTR _mySource$[ebp]
	cmp	eax, DWORD PTR _sourceLimit$[ebp]
	jae	SHORT $LN1@T_UConvert@6
	mov	eax, DWORD PTR _myTarget$[ebp]
	cmp	eax, DWORD PTR _targetLimit$[ebp]
	jb	SHORT $LN1@T_UConvert@6
	mov	eax, DWORD PTR _err$[ebp]
	cmp	DWORD PTR [eax], 0
	jg	SHORT $LN1@T_UConvert@6
; Line 581
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
$LN1@T_UConvert@6:
; Line 584
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _myTarget$[ebp]
	mov	DWORD PTR [eax+16], ecx
; Line 585
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _mySource$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 586
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_T_UConverter_toUnicode_UTF32_LE ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _T_UConverter_toUnicode_UTF32_LE_OFFSET_LOGIC
_TEXT	SEGMENT
_offsetNum$ = -104					; size = 4
_i$ = -92						; size = 4
_ch$ = -80						; size = 4
_toUBytes$ = -68					; size = 4
_targetLimit$ = -56					; size = 4
_sourceLimit$ = -44					; size = 4
_myOffsets$ = -32					; size = 4
_myTarget$ = -20					; size = 4
_mySource$ = -8						; size = 4
_args$ = 8						; size = 4
_err$ = 12						; size = 4
_T_UConverter_toUnicode_UTF32_LE_OFFSET_LOGIC PROC	; COMDAT
; Line 591
	push	ebp
	mov	ebp, esp
	sub	esp, 300				; 0000012cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-300]
	mov	ecx, 75					; 0000004bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 592
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _mySource$[ebp], ecx
; Line 593
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _myTarget$[ebp], ecx
; Line 594
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR _myOffsets$[ebp], ecx
; Line 595
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _sourceLimit$[ebp], ecx
; Line 596
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _targetLimit$[ebp], ecx
; Line 597
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 37					; 00000025H
	mov	DWORD PTR _toUBytes$[ebp], ecx
; Line 599
	mov	DWORD PTR _offsetNum$[ebp], 0
; Line 602
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cmp	DWORD PTR [ecx+44], 0
	je	SHORT $LN13@T_UConvert@7
	mov	eax, DWORD PTR _myTarget$[ebp]
	cmp	eax, DWORD PTR _targetLimit$[ebp]
	jae	SHORT $LN13@T_UConvert@7
; Line 604
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	movsx	edx, BYTE PTR [ecx+36]
	mov	DWORD PTR _i$[ebp], edx
; Line 605
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx+36], 0
; Line 608
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+44]
	sub	edx, 1
	mov	DWORD PTR _ch$[ebp], edx
; Line 609
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+44], 0
; Line 610
	jmp	SHORT $morebytes$8843
$LN13@T_UConvert@7:
; Line 613
	mov	eax, DWORD PTR _mySource$[ebp]
	cmp	eax, DWORD PTR _sourceLimit$[ebp]
	jae	$donefornow$8856
	mov	eax, DWORD PTR _myTarget$[ebp]
	cmp	eax, DWORD PTR _targetLimit$[ebp]
	jae	$donefornow$8856
; Line 615
	mov	DWORD PTR _i$[ebp], 0
; Line 616
	mov	DWORD PTR _ch$[ebp], 0
$morebytes$8843:
; Line 618
	cmp	DWORD PTR _i$[ebp], 4
	jae	SHORT $LN10@T_UConvert@7
; Line 620
	mov	eax, DWORD PTR _mySource$[ebp]
	cmp	eax, DWORD PTR _sourceLimit$[ebp]
	jae	SHORT $LN9@T_UConvert@7
; Line 622
	mov	eax, DWORD PTR _mySource$[ebp]
	movzx	edx, BYTE PTR [eax]
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 3
	shl	edx, cl
	or	edx, DWORD PTR _ch$[ebp]
	mov	DWORD PTR _ch$[ebp], edx
; Line 623
	mov	eax, DWORD PTR _toUBytes$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _mySource$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _mySource$[ebp]
	add	ecx, 1
	mov	DWORD PTR _mySource$[ebp], ecx
; Line 625
	jmp	SHORT $LN8@T_UConvert@7
$LN9@T_UConvert@7:
; Line 629
	mov	eax, DWORD PTR _ch$[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+44], eax
; Line 630
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	dl, BYTE PTR _i$[ebp]
	mov	BYTE PTR [ecx+36], dl
; Line 631
	jmp	$donefornow$8856
$LN8@T_UConvert@7:
; Line 633
	jmp	SHORT $morebytes$8843
$LN10@T_UConvert@7:
; Line 635
	cmp	DWORD PTR _ch$[ebp], 1114111		; 0010ffffH
	ja	$LN7@T_UConvert@7
	mov	eax, DWORD PTR _ch$[ebp]
	and	eax, -2048				; fffff800H
	cmp	eax, 55296				; 0000d800H
	je	$LN7@T_UConvert@7
; Line 638
	cmp	DWORD PTR _ch$[ebp], 65535		; 0000ffffH
	ja	SHORT $LN6@T_UConvert@7
; Line 641
	mov	eax, DWORD PTR _myTarget$[ebp]
	mov	cx, WORD PTR _ch$[ebp]
	mov	WORD PTR [eax], cx
	mov	edx, DWORD PTR _myTarget$[ebp]
	add	edx, 2
	mov	DWORD PTR _myTarget$[ebp], edx
; Line 642
	mov	eax, DWORD PTR _myOffsets$[ebp]
	mov	ecx, DWORD PTR _offsetNum$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _myOffsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _myOffsets$[ebp], edx
; Line 644
	jmp	$LN5@T_UConvert@7
$LN6@T_UConvert@7:
; Line 646
	mov	eax, DWORD PTR _ch$[ebp]
	shr	eax, 10					; 0000000aH
	add	eax, 55232				; 0000d7c0H
	mov	ecx, DWORD PTR _myTarget$[ebp]
	mov	WORD PTR [ecx], ax
	mov	edx, DWORD PTR _myTarget$[ebp]
	add	edx, 2
	mov	DWORD PTR _myTarget$[ebp], edx
; Line 647
	mov	eax, DWORD PTR _myOffsets$[ebp]
	mov	ecx, DWORD PTR _offsetNum$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _myOffsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _myOffsets$[ebp], edx
; Line 648
	mov	eax, DWORD PTR _ch$[ebp]
	and	eax, 1023				; 000003ffH
	or	eax, 56320				; 0000dc00H
	movzx	ecx, ax
	mov	DWORD PTR _ch$[ebp], ecx
; Line 649
	mov	eax, DWORD PTR _myTarget$[ebp]
	cmp	eax, DWORD PTR _targetLimit$[ebp]
	jae	SHORT $LN4@T_UConvert@7
; Line 651
	mov	eax, DWORD PTR _myTarget$[ebp]
	mov	cx, WORD PTR _ch$[ebp]
	mov	WORD PTR [eax], cx
	mov	edx, DWORD PTR _myTarget$[ebp]
	add	edx, 2
	mov	DWORD PTR _myTarget$[ebp], edx
; Line 652
	mov	eax, DWORD PTR _myOffsets$[ebp]
	mov	ecx, DWORD PTR _offsetNum$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _myOffsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _myOffsets$[ebp], edx
; Line 654
	jmp	SHORT $LN5@T_UConvert@7
$LN4@T_UConvert@7:
; Line 657
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	dx, WORD PTR _ch$[ebp]
	mov	WORD PTR [ecx+116], dx
; Line 658
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx+65], 1
; Line 659
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
; Line 660
	jmp	SHORT $donefornow$8856
$LN5@T_UConvert@7:
; Line 664
	jmp	SHORT $LN2@T_UConvert@7
$LN7@T_UConvert@7:
; Line 666
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	dl, BYTE PTR _i$[ebp]
	mov	BYTE PTR [ecx+36], dl
; Line 667
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 12			; 0000000cH
; Line 668
	jmp	SHORT $donefornow$8856
$LN2@T_UConvert@7:
; Line 670
	mov	eax, DWORD PTR _offsetNum$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR _offsetNum$[ebp], eax
; Line 671
	jmp	$LN13@T_UConvert@7
$donefornow$8856:
; Line 674
	mov	eax, DWORD PTR _mySource$[ebp]
	cmp	eax, DWORD PTR _sourceLimit$[ebp]
	jae	SHORT $LN1@T_UConvert@7
	mov	eax, DWORD PTR _myTarget$[ebp]
	cmp	eax, DWORD PTR _targetLimit$[ebp]
	jb	SHORT $LN1@T_UConvert@7
	mov	eax, DWORD PTR _err$[ebp]
	cmp	DWORD PTR [eax], 0
	jg	SHORT $LN1@T_UConvert@7
; Line 677
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
$LN1@T_UConvert@7:
; Line 680
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _myTarget$[ebp]
	mov	DWORD PTR [eax+16], ecx
; Line 681
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _mySource$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 682
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _myOffsets$[ebp]
	mov	DWORD PTR [eax+24], ecx
; Line 683
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_T_UConverter_toUnicode_UTF32_LE_OFFSET_LOGIC ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _T_UConverter_fromUnicode_UTF32_LE
_TEXT	SEGMENT
_temp$ = -92						; size = 4
_indexToWrite$ = -80					; size = 4
_ch2$ = -68						; size = 4
_ch$ = -56						; size = 4
_targetLimit$ = -44					; size = 4
_sourceLimit$ = -32					; size = 4
_myTarget$ = -20					; size = 4
_mySource$ = -8						; size = 4
_args$ = 8						; size = 4
_err$ = 12						; size = 4
_T_UConverter_fromUnicode_UTF32_LE PROC			; COMDAT
; Line 688
	push	ebp
	mov	ebp, esp
	sub	esp, 288				; 00000120H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-288]
	mov	ecx, 72					; 00000048H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 689
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _mySource$[ebp], ecx
; Line 691
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _sourceLimit$[ebp], ecx
; Line 692
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _targetLimit$[ebp], ecx
; Line 697
	mov	eax, DWORD PTR _mySource$[ebp]
	cmp	eax, DWORD PTR _sourceLimit$[ebp]
	jb	SHORT $LN19@T_UConvert@8
; Line 699
	jmp	$LN20@T_UConvert@8
$LN19@T_UConvert@8:
; Line 703
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cmp	DWORD PTR [ecx+52], 1
	jne	SHORT $LN18@T_UConvert@8
; Line 709
	mov	eax, DWORD PTR _err$[ebp]
	push	eax
	push	-1
	mov	ecx, DWORD PTR _args$[ebp]
	add	ecx, 24					; 00000018H
	push	ecx
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+20]
	push	eax
	mov	ecx, DWORD PTR _args$[ebp]
	add	ecx, 16					; 00000010H
	push	ecx
	push	4
	push	OFFSET ?bom@?3??T_UConverter_fromUnicode_UTF32_LE@@9@9
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	_ucnv_fromUWriteBytes_56
	add	esp, 32					; 00000020H
; Line 710
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+52], 0
$LN18@T_UConvert@8:
; Line 713
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _myTarget$[ebp], ecx
; Line 714
	mov	BYTE PTR _temp$[ebp+3], 0
; Line 716
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cmp	DWORD PTR [ecx+56], 0
	je	SHORT $LN16@T_UConvert@8
; Line 718
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+56]
	mov	DWORD PTR _ch$[ebp], edx
; Line 719
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+56], 0
; Line 720
	jmp	SHORT $lowsurogate$8895
$LN16@T_UConvert@8:
; Line 723
	mov	eax, DWORD PTR _mySource$[ebp]
	cmp	eax, DWORD PTR _sourceLimit$[ebp]
	jae	$LN15@T_UConvert@8
	mov	eax, DWORD PTR _myTarget$[ebp]
	cmp	eax, DWORD PTR _targetLimit$[ebp]
	jae	$LN15@T_UConvert@8
; Line 725
	mov	eax, DWORD PTR _mySource$[ebp]
	movzx	ecx, WORD PTR [eax]
	mov	DWORD PTR _ch$[ebp], ecx
	mov	edx, DWORD PTR _mySource$[ebp]
	add	edx, 2
	mov	DWORD PTR _mySource$[ebp], edx
; Line 727
	mov	eax, DWORD PTR _ch$[ebp]
	and	eax, -2048				; fffff800H
	cmp	eax, 55296				; 0000d800H
	jne	$LN14@T_UConvert@8
; Line 728
	mov	eax, DWORD PTR _ch$[ebp]
	and	eax, -1024				; fffffc00H
	cmp	eax, 55296				; 0000d800H
	jne	$LN13@T_UConvert@8
$lowsurogate$8895:
; Line 731
	mov	eax, DWORD PTR _mySource$[ebp]
	cmp	eax, DWORD PTR _sourceLimit$[ebp]
	jae	SHORT $LN12@T_UConvert@8
; Line 733
	mov	eax, DWORD PTR _mySource$[ebp]
	movzx	ecx, WORD PTR [eax]
	mov	DWORD PTR _ch2$[ebp], ecx
; Line 734
	mov	eax, DWORD PTR _ch2$[ebp]
	and	eax, -1024				; fffffc00H
	cmp	eax, 56320				; 0000dc00H
	jne	SHORT $LN11@T_UConvert@8
; Line 735
	mov	eax, DWORD PTR _ch$[ebp]
	sub	eax, 55296				; 0000d800H
	shl	eax, 10					; 0000000aH
	mov	ecx, DWORD PTR _ch2$[ebp]
	lea	edx, DWORD PTR [eax+ecx+9216]
	mov	DWORD PTR _ch$[ebp], edx
; Line 736
	mov	eax, DWORD PTR _mySource$[ebp]
	add	eax, 2
	mov	DWORD PTR _mySource$[ebp], eax
; Line 738
	jmp	SHORT $LN10@T_UConvert@8
$LN11@T_UConvert@8:
; Line 741
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _ch$[ebp]
	mov	DWORD PTR [ecx+56], edx
; Line 742
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 12			; 0000000cH
; Line 743
	jmp	$LN15@T_UConvert@8
$LN10@T_UConvert@8:
; Line 746
	jmp	SHORT $LN9@T_UConvert@8
$LN12@T_UConvert@8:
; Line 748
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _ch$[ebp]
	mov	DWORD PTR [ecx+56], edx
; Line 749
	mov	eax, DWORD PTR _args$[ebp]
	movsx	ecx, BYTE PTR [eax+2]
	test	ecx, ecx
	je	SHORT $LN8@T_UConvert@8
; Line 752
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 12			; 0000000cH
$LN8@T_UConvert@8:
; Line 754
	jmp	$LN15@T_UConvert@8
$LN9@T_UConvert@8:
; Line 757
	jmp	SHORT $LN14@T_UConvert@8
$LN13@T_UConvert@8:
; Line 760
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _ch$[ebp]
	mov	DWORD PTR [ecx+56], edx
; Line 761
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 12			; 0000000cH
; Line 762
	jmp	$LN15@T_UConvert@8
$LN14@T_UConvert@8:
; Line 767
	mov	eax, DWORD PTR _ch$[ebp]
	sar	eax, 16					; 00000010H
	and	eax, 31					; 0000001fH
	mov	BYTE PTR _temp$[ebp+2], al
; Line 768
	mov	eax, DWORD PTR _ch$[ebp]
	sar	eax, 8
	mov	BYTE PTR _temp$[ebp+1], al
; Line 769
	mov	al, BYTE PTR _ch$[ebp]
	mov	BYTE PTR _temp$[ebp], al
; Line 771
	mov	DWORD PTR _indexToWrite$[ebp], 0
	jmp	SHORT $LN6@T_UConvert@8
$LN5@T_UConvert@8:
	mov	eax, DWORD PTR _indexToWrite$[ebp]
	add	eax, 1
	mov	DWORD PTR _indexToWrite$[ebp], eax
$LN6@T_UConvert@8:
	cmp	DWORD PTR _indexToWrite$[ebp], 3
	ja	SHORT $LN4@T_UConvert@8
; Line 773
	mov	eax, DWORD PTR _myTarget$[ebp]
	cmp	eax, DWORD PTR _targetLimit$[ebp]
	jae	SHORT $LN3@T_UConvert@8
; Line 775
	mov	eax, DWORD PTR _myTarget$[ebp]
	mov	ecx, DWORD PTR _indexToWrite$[ebp]
	mov	dl, BYTE PTR _temp$[ebp+ecx]
	mov	BYTE PTR [eax], dl
	mov	eax, DWORD PTR _myTarget$[ebp]
	add	eax, 1
	mov	DWORD PTR _myTarget$[ebp], eax
; Line 777
	jmp	SHORT $LN2@T_UConvert@8
$LN3@T_UConvert@8:
; Line 779
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+4]
	movsx	edx, BYTE PTR [eax+63]
	mov	eax, DWORD PTR _indexToWrite$[ebp]
	mov	al, BYTE PTR _temp$[ebp+eax]
	mov	BYTE PTR [ecx+edx+76], al
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	al, BYTE PTR [edx+63]
	add	al, 1
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx+63], al
; Line 780
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
$LN2@T_UConvert@8:
; Line 782
	jmp	SHORT $LN5@T_UConvert@8
$LN4@T_UConvert@8:
; Line 783
	jmp	$LN16@T_UConvert@8
$LN15@T_UConvert@8:
; Line 785
	mov	eax, DWORD PTR _mySource$[ebp]
	cmp	eax, DWORD PTR _sourceLimit$[ebp]
	jae	SHORT $LN1@T_UConvert@8
	mov	eax, DWORD PTR _myTarget$[ebp]
	cmp	eax, DWORD PTR _targetLimit$[ebp]
	jb	SHORT $LN1@T_UConvert@8
	mov	eax, DWORD PTR _err$[ebp]
	cmp	DWORD PTR [eax], 0
	jg	SHORT $LN1@T_UConvert@8
; Line 787
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
$LN1@T_UConvert@8:
; Line 790
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _myTarget$[ebp]
	mov	DWORD PTR [eax+16], ecx
; Line 791
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _mySource$[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN20@T_UConvert@8:
; Line 792
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN24@T_UConvert@8
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 288				; 00000120H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN24@T_UConvert@8:
	DD	1
	DD	$LN23@T_UConvert@8
$LN23@T_UConvert@8:
	DD	-92					; ffffffa4H
	DD	4
	DD	$LN22@T_UConvert@8
$LN22@T_UConvert@8:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
_T_UConverter_fromUnicode_UTF32_LE ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _T_UConverter_fromUnicode_UTF32_LE_OFFSET_LOGIC
_TEXT	SEGMENT
_offsetNum$ = -116					; size = 4
_temp$ = -104						; size = 4
_indexToWrite$ = -92					; size = 4
_ch2$ = -80						; size = 4
_ch$ = -68						; size = 4
_targetLimit$ = -56					; size = 4
_sourceLimit$ = -44					; size = 4
_myOffsets$ = -32					; size = 4
_myTarget$ = -20					; size = 4
_mySource$ = -8						; size = 4
_args$ = 8						; size = 4
_err$ = 12						; size = 4
_T_UConverter_fromUnicode_UTF32_LE_OFFSET_LOGIC PROC	; COMDAT
; Line 797
	push	ebp
	mov	ebp, esp
	sub	esp, 312				; 00000138H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-312]
	mov	ecx, 78					; 0000004eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 798
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _mySource$[ebp], ecx
; Line 801
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _sourceLimit$[ebp], ecx
; Line 802
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _targetLimit$[ebp], ecx
; Line 806
	mov	DWORD PTR _offsetNum$[ebp], 0
; Line 808
	mov	eax, DWORD PTR _mySource$[ebp]
	cmp	eax, DWORD PTR _sourceLimit$[ebp]
	jb	SHORT $LN19@T_UConvert@9
; Line 810
	jmp	$LN20@T_UConvert@9
$LN19@T_UConvert@9:
; Line 814
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cmp	DWORD PTR [ecx+52], 1
	jne	SHORT $LN18@T_UConvert@9
; Line 820
	mov	eax, DWORD PTR _err$[ebp]
	push	eax
	push	-1
	mov	ecx, DWORD PTR _args$[ebp]
	add	ecx, 24					; 00000018H
	push	ecx
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+20]
	push	eax
	mov	ecx, DWORD PTR _args$[ebp]
	add	ecx, 16					; 00000010H
	push	ecx
	push	4
	push	OFFSET ?bom@?3??T_UConverter_fromUnicode_UTF32_LE_OFFSET_LOGIC@@9@9
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	_ucnv_fromUWriteBytes_56
	add	esp, 32					; 00000020H
; Line 821
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+52], 0
$LN18@T_UConvert@9:
; Line 824
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _myTarget$[ebp], ecx
; Line 825
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR _myOffsets$[ebp], ecx
; Line 826
	mov	BYTE PTR _temp$[ebp+3], 0
; Line 828
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cmp	DWORD PTR [ecx+56], 0
	je	SHORT $LN16@T_UConvert@9
; Line 830
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+56]
	mov	DWORD PTR _ch$[ebp], edx
; Line 831
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+56], 0
; Line 832
	jmp	SHORT $lowsurogate$8944
$LN16@T_UConvert@9:
; Line 835
	mov	eax, DWORD PTR _mySource$[ebp]
	cmp	eax, DWORD PTR _sourceLimit$[ebp]
	jae	$LN15@T_UConvert@9
	mov	eax, DWORD PTR _myTarget$[ebp]
	cmp	eax, DWORD PTR _targetLimit$[ebp]
	jae	$LN15@T_UConvert@9
; Line 837
	mov	eax, DWORD PTR _mySource$[ebp]
	movzx	ecx, WORD PTR [eax]
	mov	DWORD PTR _ch$[ebp], ecx
	mov	edx, DWORD PTR _mySource$[ebp]
	add	edx, 2
	mov	DWORD PTR _mySource$[ebp], edx
; Line 839
	mov	eax, DWORD PTR _ch$[ebp]
	and	eax, -2048				; fffff800H
	cmp	eax, 55296				; 0000d800H
	jne	$LN14@T_UConvert@9
; Line 840
	mov	eax, DWORD PTR _ch$[ebp]
	and	eax, -1024				; fffffc00H
	cmp	eax, 55296				; 0000d800H
	jne	$LN13@T_UConvert@9
$lowsurogate$8944:
; Line 843
	mov	eax, DWORD PTR _mySource$[ebp]
	cmp	eax, DWORD PTR _sourceLimit$[ebp]
	jae	SHORT $LN12@T_UConvert@9
; Line 845
	mov	eax, DWORD PTR _mySource$[ebp]
	movzx	ecx, WORD PTR [eax]
	mov	DWORD PTR _ch2$[ebp], ecx
; Line 846
	mov	eax, DWORD PTR _ch2$[ebp]
	and	eax, -1024				; fffffc00H
	cmp	eax, 56320				; 0000dc00H
	jne	SHORT $LN11@T_UConvert@9
; Line 848
	mov	eax, DWORD PTR _ch$[ebp]
	sub	eax, 55296				; 0000d800H
	shl	eax, 10					; 0000000aH
	mov	ecx, DWORD PTR _ch2$[ebp]
	lea	edx, DWORD PTR [eax+ecx+9216]
	mov	DWORD PTR _ch$[ebp], edx
; Line 849
	mov	eax, DWORD PTR _mySource$[ebp]
	add	eax, 2
	mov	DWORD PTR _mySource$[ebp], eax
; Line 851
	jmp	SHORT $LN10@T_UConvert@9
$LN11@T_UConvert@9:
; Line 854
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _ch$[ebp]
	mov	DWORD PTR [ecx+56], edx
; Line 855
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 12			; 0000000cH
; Line 856
	jmp	$LN15@T_UConvert@9
$LN10@T_UConvert@9:
; Line 859
	jmp	SHORT $LN9@T_UConvert@9
$LN12@T_UConvert@9:
; Line 861
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _ch$[ebp]
	mov	DWORD PTR [ecx+56], edx
; Line 862
	mov	eax, DWORD PTR _args$[ebp]
	movsx	ecx, BYTE PTR [eax+2]
	test	ecx, ecx
	je	SHORT $LN8@T_UConvert@9
; Line 865
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 12			; 0000000cH
$LN8@T_UConvert@9:
; Line 867
	jmp	$LN15@T_UConvert@9
$LN9@T_UConvert@9:
; Line 870
	jmp	SHORT $LN14@T_UConvert@9
$LN13@T_UConvert@9:
; Line 873
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _ch$[ebp]
	mov	DWORD PTR [ecx+56], edx
; Line 874
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 12			; 0000000cH
; Line 875
	jmp	$LN15@T_UConvert@9
$LN14@T_UConvert@9:
; Line 880
	mov	eax, DWORD PTR _ch$[ebp]
	sar	eax, 16					; 00000010H
	and	eax, 31					; 0000001fH
	mov	BYTE PTR _temp$[ebp+2], al
; Line 881
	mov	eax, DWORD PTR _ch$[ebp]
	sar	eax, 8
	mov	BYTE PTR _temp$[ebp+1], al
; Line 882
	mov	al, BYTE PTR _ch$[ebp]
	mov	BYTE PTR _temp$[ebp], al
; Line 884
	mov	DWORD PTR _indexToWrite$[ebp], 0
	jmp	SHORT $LN6@T_UConvert@9
$LN5@T_UConvert@9:
	mov	eax, DWORD PTR _indexToWrite$[ebp]
	add	eax, 1
	mov	DWORD PTR _indexToWrite$[ebp], eax
$LN6@T_UConvert@9:
	cmp	DWORD PTR _indexToWrite$[ebp], 3
	ja	SHORT $LN4@T_UConvert@9
; Line 886
	mov	eax, DWORD PTR _myTarget$[ebp]
	cmp	eax, DWORD PTR _targetLimit$[ebp]
	jae	SHORT $LN3@T_UConvert@9
; Line 888
	mov	eax, DWORD PTR _myTarget$[ebp]
	mov	ecx, DWORD PTR _indexToWrite$[ebp]
	mov	dl, BYTE PTR _temp$[ebp+ecx]
	mov	BYTE PTR [eax], dl
	mov	eax, DWORD PTR _myTarget$[ebp]
	add	eax, 1
	mov	DWORD PTR _myTarget$[ebp], eax
; Line 889
	mov	eax, DWORD PTR _myOffsets$[ebp]
	mov	ecx, DWORD PTR _offsetNum$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _myOffsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _myOffsets$[ebp], edx
; Line 891
	jmp	SHORT $LN2@T_UConvert@9
$LN3@T_UConvert@9:
; Line 893
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+4]
	movsx	edx, BYTE PTR [eax+63]
	mov	eax, DWORD PTR _indexToWrite$[ebp]
	mov	al, BYTE PTR _temp$[ebp+eax]
	mov	BYTE PTR [ecx+edx+76], al
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	al, BYTE PTR [edx+63]
	add	al, 1
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx+63], al
; Line 894
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
$LN2@T_UConvert@9:
; Line 896
	jmp	SHORT $LN5@T_UConvert@9
$LN4@T_UConvert@9:
; Line 897
	movzx	eax, BYTE PTR _temp$[ebp+2]
	neg	eax
	sbb	eax, eax
	neg	eax
	mov	ecx, DWORD PTR _offsetNum$[ebp]
	lea	edx, DWORD PTR [ecx+eax+1]
	mov	DWORD PTR _offsetNum$[ebp], edx
; Line 898
	jmp	$LN16@T_UConvert@9
$LN15@T_UConvert@9:
; Line 900
	mov	eax, DWORD PTR _mySource$[ebp]
	cmp	eax, DWORD PTR _sourceLimit$[ebp]
	jae	SHORT $LN1@T_UConvert@9
	mov	eax, DWORD PTR _myTarget$[ebp]
	cmp	eax, DWORD PTR _targetLimit$[ebp]
	jb	SHORT $LN1@T_UConvert@9
	mov	eax, DWORD PTR _err$[ebp]
	cmp	DWORD PTR [eax], 0
	jg	SHORT $LN1@T_UConvert@9
; Line 902
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
$LN1@T_UConvert@9:
; Line 905
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _myTarget$[ebp]
	mov	DWORD PTR [eax+16], ecx
; Line 906
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _mySource$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 907
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _myOffsets$[ebp]
	mov	DWORD PTR [eax+24], ecx
$LN20@T_UConvert@9:
; Line 908
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN24@T_UConvert@9
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 312				; 00000138H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN24@T_UConvert@9:
	DD	1
	DD	$LN23@T_UConvert@9
$LN23@T_UConvert@9:
	DD	-104					; ffffff98H
	DD	4
	DD	$LN22@T_UConvert@9
$LN22@T_UConvert@9:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
_T_UConverter_fromUnicode_UTF32_LE_OFFSET_LOGIC ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _T_UConverter_getNextUChar_UTF32_LE
_TEXT	SEGMENT
_length$ = -32						; size = 4
_myUChar$ = -20						; size = 4
_mySource$ = -8						; size = 4
_args$ = 8						; size = 4
_err$ = 12						; size = 4
_T_UConverter_getNextUChar_UTF32_LE PROC		; COMDAT
; Line 913
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 918
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _mySource$[ebp], ecx
; Line 919
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _mySource$[ebp]
	cmp	ecx, DWORD PTR [eax+12]
	jb	SHORT $LN3@T_UConvert@10
; Line 922
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 8
; Line 923
	mov	eax, 65535				; 0000ffffH
	jmp	$LN4@T_UConvert@10
$LN3@T_UConvert@10:
; Line 926
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	sub	ecx, DWORD PTR _mySource$[ebp]
	mov	DWORD PTR _length$[ebp], ecx
; Line 927
	cmp	DWORD PTR _length$[ebp], 4
	jge	SHORT $LN2@T_UConvert@10
; Line 930
	push	1
	mov	eax, DWORD PTR _mySource$[ebp]
	push	eax
	call	_uprv_checkValidMemory
	add	esp, 8
	mov	ecx, DWORD PTR _length$[ebp]
	push	ecx
	mov	edx, DWORD PTR _mySource$[ebp]
	push	edx
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 37					; 00000025H
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 931
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	dl, BYTE PTR _length$[ebp]
	mov	BYTE PTR [ecx+36], dl
; Line 932
	mov	eax, DWORD PTR _mySource$[ebp]
	add	eax, DWORD PTR _length$[ebp]
	mov	ecx, DWORD PTR _args$[ebp]
	mov	DWORD PTR [ecx+8], eax
; Line 933
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 11			; 0000000bH
; Line 934
	mov	eax, 65535				; 0000ffffH
	jmp	$LN4@T_UConvert@10
$LN2@T_UConvert@10:
; Line 941
	mov	eax, DWORD PTR _mySource$[ebp]
	movzx	ecx, BYTE PTR [eax+3]
	shl	ecx, 24					; 00000018H
	mov	edx, DWORD PTR _mySource$[ebp]
	movzx	eax, BYTE PTR [edx+2]
	shl	eax, 16					; 00000010H
	or	ecx, eax
	mov	edx, DWORD PTR _mySource$[ebp]
	movzx	eax, BYTE PTR [edx+1]
	shl	eax, 8
	or	ecx, eax
	mov	edx, DWORD PTR _mySource$[ebp]
	movzx	eax, BYTE PTR [edx]
	or	ecx, eax
	mov	DWORD PTR _myUChar$[ebp], ecx
; Line 943
	mov	eax, DWORD PTR _mySource$[ebp]
	add	eax, 4
	mov	ecx, DWORD PTR _args$[ebp]
	mov	DWORD PTR [ecx+8], eax
; Line 944
	cmp	DWORD PTR _myUChar$[ebp], 1114111	; 0010ffffH
	ja	SHORT $LN1@T_UConvert@10
	mov	eax, DWORD PTR _myUChar$[ebp]
	and	eax, -2048				; fffff800H
	cmp	eax, 55296				; 0000d800H
	je	SHORT $LN1@T_UConvert@10
; Line 945
	mov	eax, DWORD PTR _myUChar$[ebp]
	jmp	SHORT $LN4@T_UConvert@10
$LN1@T_UConvert@10:
; Line 948
	push	1
	mov	eax, DWORD PTR _mySource$[ebp]
	push	eax
	call	_uprv_checkValidMemory
	add	esp, 8
	push	4
	mov	ecx, DWORD PTR _mySource$[ebp]
	push	ecx
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 37					; 00000025H
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 949
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx+36], 4
; Line 951
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 12			; 0000000cH
; Line 952
	mov	eax, 65535				; 0000ffffH
$LN4@T_UConvert@10:
; Line 953
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_T_UConverter_getNextUChar_UTF32_LE ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __UTF32Reset
_TEXT	SEGMENT
_cnv$ = 8						; size = 4
_choice$ = 12						; size = 4
__UTF32Reset PROC					; COMDAT
; Line 1018
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1019
	cmp	DWORD PTR _choice$[ebp], 1
	jg	SHORT $LN2@UTF32Reset
; Line 1021
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	DWORD PTR [eax+48], 0
$LN2@UTF32Reset:
; Line 1023
	cmp	DWORD PTR _choice$[ebp], 1
	je	SHORT $LN3@UTF32Reset
; Line 1025
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	DWORD PTR [eax+52], 1
$LN3@UTF32Reset:
; Line 1027
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
__UTF32Reset ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __UTF32Open
_TEXT	SEGMENT
_cnv$ = 8						; size = 4
_pArgs$ = 12						; size = 4
_pErrorCode$ = 16					; size = 4
__UTF32Open PROC					; COMDAT
; Line 1032
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1033
	push	0
	mov	eax, DWORD PTR _cnv$[ebp]
	push	eax
	call	__UTF32Reset
	add	esp, 8
; Line 1034
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__UTF32Open ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __UTF32ToUnicodeWithOffsets
_TEXT	SEGMENT
tv166 = -316						; size = 4
tv71 = -316						; size = 4
_offsetsLimit$9089 = -116				; size = 4
_oldFlush$9077 = -101					; size = 1
_count$9073 = -92					; size = 4
_b$ = -77						; size = 1
_offsetDelta$ = -68					; size = 4
_state$ = -56						; size = 4
_offsets$ = -44						; size = 4
_sourceLimit$ = -32					; size = 4
_source$ = -20						; size = 4
_cnv$ = -8						; size = 4
_pArgs$ = 8						; size = 4
_pErrorCode$ = 12					; size = 4
__UTF32ToUnicodeWithOffsets PROC			; COMDAT
; Line 1040
	push	ebp
	mov	ebp, esp
	sub	esp, 316				; 0000013cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-316]
	mov	ecx, 79					; 0000004fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1041
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _cnv$[ebp], ecx
; Line 1042
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _source$[ebp], ecx
; Line 1043
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _sourceLimit$[ebp], ecx
; Line 1044
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR _offsets$[ebp], ecx
; Line 1049
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	DWORD PTR _state$[ebp], ecx
; Line 1056
	mov	DWORD PTR _offsetDelta$[ebp], 0
$LN34@UTF32ToUni:
; Line 1058
	mov	eax, DWORD PTR _source$[ebp]
	cmp	eax, DWORD PTR _sourceLimit$[ebp]
	jae	$LN33@UTF32ToUni
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	cmp	DWORD PTR [eax], 0
	jg	$LN33@UTF32ToUni
; Line 1059
	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR tv71[ebp], eax
	cmp	DWORD PTR tv71[ebp], 9
	ja	$LN31@UTF32ToUni
	mov	ecx, DWORD PTR tv71[ebp]
	movzx	edx, BYTE PTR $LN39@UTF32ToUni[ecx]
	jmp	DWORD PTR $LN40@UTF32ToUni[edx*4]
$LN30@UTF32ToUni:
; Line 1061
	mov	eax, DWORD PTR _source$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _b$[ebp], cl
; Line 1062
	movsx	eax, BYTE PTR _b$[ebp]
	test	eax, eax
	jne	SHORT $LN29@UTF32ToUni
; Line 1063
	mov	DWORD PTR _state$[ebp], 1
	jmp	SHORT $LN28@UTF32ToUni
$LN29@UTF32ToUni:
; Line 1064
	movsx	eax, BYTE PTR _b$[ebp]
	cmp	eax, -1
	jne	SHORT $LN27@UTF32ToUni
; Line 1065
	mov	DWORD PTR _state$[ebp], 5
; Line 1066
	jmp	SHORT $LN28@UTF32ToUni
$LN27@UTF32ToUni:
; Line 1067
	mov	DWORD PTR _state$[ebp], 8
; Line 1068
	jmp	SHORT $LN34@UTF32ToUni
$LN28@UTF32ToUni:
; Line 1070
	mov	eax, DWORD PTR _source$[ebp]
	add	eax, 1
	mov	DWORD PTR _source$[ebp], eax
; Line 1071
	jmp	$LN31@UTF32ToUni
$LN25@UTF32ToUni:
; Line 1078
	mov	eax, DWORD PTR _source$[ebp]
	movsx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _state$[ebp]
	movsx	eax, BYTE PTR _utf32BOM[edx]
	cmp	ecx, eax
	jne	SHORT $LN24@UTF32ToUni
; Line 1079
	mov	eax, DWORD PTR _state$[ebp]
	add	eax, 1
	mov	DWORD PTR _state$[ebp], eax
; Line 1080
	mov	eax, DWORD PTR _source$[ebp]
	add	eax, 1
	mov	DWORD PTR _source$[ebp], eax
; Line 1081
	cmp	DWORD PTR _state$[ebp], 4
	jne	SHORT $LN23@UTF32ToUni
; Line 1082
	mov	DWORD PTR _state$[ebp], 8
; Line 1083
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR _source$[ebp]
	sub	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _offsetDelta$[ebp], ecx
	jmp	SHORT $LN22@UTF32ToUni
$LN23@UTF32ToUni:
; Line 1084
	cmp	DWORD PTR _state$[ebp], 8
	jne	SHORT $LN22@UTF32ToUni
; Line 1085
	mov	DWORD PTR _state$[ebp], 9
; Line 1086
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR _source$[ebp]
	sub	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _offsetDelta$[ebp], ecx
$LN22@UTF32ToUni:
; Line 1088
	jmp	$LN20@UTF32ToUni
$LN24@UTF32ToUni:
; Line 1090
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR _source$[ebp]
	sub	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _count$9073[ebp], ecx
; Line 1093
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _source$[ebp], ecx
; Line 1095
	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 3
	cmp	DWORD PTR _count$9073[ebp], eax
	jne	SHORT $LN19@UTF32ToUni
; Line 1097
	jmp	SHORT $LN18@UTF32ToUni
$LN19@UTF32ToUni:
; Line 1098
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	cl, BYTE PTR [eax+2]
	mov	BYTE PTR _oldFlush$9077[ebp], cl
; Line 1101
	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 4
	add	eax, OFFSET _utf32BOM
	mov	ecx, DWORD PTR _pArgs$[ebp]
	mov	DWORD PTR [ecx+8], eax
; Line 1102
	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 3
	sub	eax, DWORD PTR _count$9073[ebp]
	mov	ecx, DWORD PTR _pArgs$[ebp]
	add	eax, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _pArgs$[ebp]
	mov	DWORD PTR [edx+12], eax
; Line 1103
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	BYTE PTR [eax+2], 0
; Line 1106
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pArgs$[ebp]
	push	ecx
	call	_T_UConverter_toUnicode_UTF32_BE
	add	esp, 8
; Line 1109
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR _sourceLimit$[ebp]
	mov	DWORD PTR [eax+12], ecx
; Line 1110
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	cl, BYTE PTR _oldFlush$9077[ebp]
	mov	BYTE PTR [eax+2], cl
$LN18@UTF32ToUni:
; Line 1112
	mov	DWORD PTR _state$[ebp], 8
; Line 1113
	jmp	$LN34@UTF32ToUni
$LN20@UTF32ToUni:
; Line 1115
	jmp	SHORT $LN31@UTF32ToUni
$LN17@UTF32ToUni:
; Line 1118
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR _source$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 1119
	cmp	DWORD PTR _offsets$[ebp], 0
	jne	SHORT $LN16@UTF32ToUni
; Line 1120
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pArgs$[ebp]
	push	ecx
	call	_T_UConverter_toUnicode_UTF32_BE
	add	esp, 8
; Line 1121
	jmp	SHORT $LN15@UTF32ToUni
$LN16@UTF32ToUni:
; Line 1122
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pArgs$[ebp]
	push	ecx
	call	_T_UConverter_toUnicode_UTF32_BE_OFFSET_LOGIC
	add	esp, 8
$LN15@UTF32ToUni:
; Line 1124
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _source$[ebp], ecx
; Line 1125
	jmp	SHORT $LN31@UTF32ToUni
$LN14@UTF32ToUni:
; Line 1128
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR _source$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 1129
	cmp	DWORD PTR _offsets$[ebp], 0
	jne	SHORT $LN13@UTF32ToUni
; Line 1130
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pArgs$[ebp]
	push	ecx
	call	_T_UConverter_toUnicode_UTF32_LE
	add	esp, 8
; Line 1131
	jmp	SHORT $LN12@UTF32ToUni
$LN13@UTF32ToUni:
; Line 1132
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pArgs$[ebp]
	push	ecx
	call	_T_UConverter_toUnicode_UTF32_LE_OFFSET_LOGIC
	add	esp, 8
$LN12@UTF32ToUni:
; Line 1134
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _source$[ebp], ecx
$LN31@UTF32ToUni:
; Line 1139
	jmp	$LN34@UTF32ToUni
$LN33@UTF32ToUni:
; Line 1142
	cmp	DWORD PTR _offsets$[ebp], 0
	je	SHORT $LN10@UTF32ToUni
	cmp	DWORD PTR _offsetDelta$[ebp], 0
	je	SHORT $LN10@UTF32ToUni
; Line 1143
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR _offsetsLimit$9089[ebp], ecx
$LN9@UTF32ToUni:
; Line 1144
	mov	eax, DWORD PTR _offsets$[ebp]
	cmp	eax, DWORD PTR _offsetsLimit$9089[ebp]
	jae	SHORT $LN10@UTF32ToUni
; Line 1145
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, DWORD PTR _offsetDelta$[ebp]
	mov	edx, DWORD PTR _offsets$[ebp]
	mov	DWORD PTR [edx], ecx
	mov	eax, DWORD PTR _offsets$[ebp]
	add	eax, 4
	mov	DWORD PTR _offsets$[ebp], eax
; Line 1146
	jmp	SHORT $LN9@UTF32ToUni
$LN10@UTF32ToUni:
; Line 1149
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR _source$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 1151
	mov	eax, DWORD PTR _source$[ebp]
	cmp	eax, DWORD PTR _sourceLimit$[ebp]
	jne	$LN7@UTF32ToUni
	mov	eax, DWORD PTR _pArgs$[ebp]
	movsx	ecx, BYTE PTR [eax+2]
	test	ecx, ecx
	je	$LN7@UTF32ToUni
; Line 1153
	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR tv166[ebp], eax
	cmp	DWORD PTR tv166[ebp], 0
	je	SHORT $LN4@UTF32ToUni
	cmp	DWORD PTR tv166[ebp], 8
	je	SHORT $LN3@UTF32ToUni
	cmp	DWORD PTR tv166[ebp], 9
	je	SHORT $LN2@UTF32ToUni
	jmp	SHORT $LN1@UTF32ToUni
$LN4@UTF32ToUni:
; Line 1155
	jmp	SHORT $LN7@UTF32ToUni
$LN3@UTF32ToUni:
; Line 1157
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pArgs$[ebp]
	push	ecx
	call	_T_UConverter_toUnicode_UTF32_BE
	add	esp, 8
; Line 1158
	jmp	SHORT $LN7@UTF32ToUni
$LN2@UTF32ToUni:
; Line 1160
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pArgs$[ebp]
	push	ecx
	call	_T_UConverter_toUnicode_UTF32_LE
	add	esp, 8
; Line 1161
	jmp	SHORT $LN7@UTF32ToUni
$LN1@UTF32ToUni:
; Line 1164
	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 4
	add	eax, OFFSET _utf32BOM
	mov	ecx, DWORD PTR _pArgs$[ebp]
	mov	DWORD PTR [ecx+8], eax
; Line 1165
	mov	eax, DWORD PTR _state$[ebp]
	and	eax, 3
	mov	ecx, DWORD PTR _pArgs$[ebp]
	add	eax, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _pArgs$[ebp]
	mov	DWORD PTR [edx+12], eax
; Line 1168
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pArgs$[ebp]
	push	ecx
	call	_T_UConverter_toUnicode_UTF32_BE
	add	esp, 8
; Line 1169
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR _source$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 1170
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR _sourceLimit$[ebp]
	mov	DWORD PTR [eax+12], ecx
; Line 1171
	mov	DWORD PTR _state$[ebp], 8
$LN7@UTF32ToUni:
; Line 1176
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+48], ecx
; Line 1177
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 316				; 0000013cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN40@UTF32ToUni:
	DD	$LN30@UTF32ToUni
	DD	$LN25@UTF32ToUni
	DD	$LN17@UTF32ToUni
	DD	$LN14@UTF32ToUni
	DD	$LN31@UTF32ToUni
$LN39@UTF32ToUni:
	DB	0
	DB	1
	DB	1
	DB	1
	DB	4
	DB	1
	DB	1
	DB	1
	DB	2
	DB	3
__UTF32ToUnicodeWithOffsets ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __UTF32GetNextUChar
_TEXT	SEGMENT
tv66 = -196						; size = 4
_pArgs$ = 8						; size = 4
_pErrorCode$ = 12					; size = 4
__UTF32GetNextUChar PROC				; COMDAT
; Line 1181
	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1182
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+48]
	mov	DWORD PTR tv66[ebp], edx
	cmp	DWORD PTR tv66[ebp], 8
	je	SHORT $LN3@UTF32GetNe
	cmp	DWORD PTR tv66[ebp], 9
	je	SHORT $LN2@UTF32GetNe
	jmp	SHORT $LN1@UTF32GetNe
$LN3@UTF32GetNe:
; Line 1184
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pArgs$[ebp]
	push	ecx
	call	_T_UConverter_getNextUChar_UTF32_BE
	add	esp, 8
	jmp	SHORT $LN6@UTF32GetNe
$LN2@UTF32GetNe:
; Line 1186
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pArgs$[ebp]
	push	ecx
	call	_T_UConverter_getNextUChar_UTF32_LE
	add	esp, 8
	jmp	SHORT $LN6@UTF32GetNe
$LN1@UTF32GetNe:
; Line 1188
	mov	eax, -9					; fffffff7H
$LN6@UTF32GetNe:
; Line 1190
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__UTF32GetNextUChar ENDP
_TEXT	ENDS
END
