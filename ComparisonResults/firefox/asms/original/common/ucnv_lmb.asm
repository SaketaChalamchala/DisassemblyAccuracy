; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\mozilla\intl\icu\source\common\ucnv_lmb.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	??_C@_02PEPMCKME@zh?$AA@			; `string'
PUBLIC	??_C@_04OKGCGCJP@zhTW?$AA@			; `string'
PUBLIC	??_C@_02NEINDODK@uk?$AA@			; `string'
PUBLIC	??_C@_02EOEPPNBF@tr?$AA@			; `string'
PUBLIC	??_C@_02POGCAHMO@th?$AA@			; `string'
PUBLIC	??_C@_02ELAAOLJA@sr?$AA@			; `string'
PUBLIC	??_C@_02GACNLIFD@sq?$AA@			; `string'
PUBLIC	??_C@_02JPEBNEEP@sl?$AA@			; `string'
PUBLIC	??_C@_02NAAAECII@sk?$AA@			; `string'
PUBLIC	??_C@_02PLCNBBEL@sh?$AA@			; `string'
PUBLIC	??_C@_02FIDBHGA@ru?$AA@				; `string'
PUBLIC	??_C@_02LFKOONLL@ro?$AA@			; `string'
PUBLIC	??_C@_02JNAHGKBG@pl?$AA@			; `string'
PUBLIC	??_C@_02MGLIMMPC@mk?$AA@			; `string'
PUBLIC	??_C@_02KGFJHFEE@ko?$AA@			; `string'
PUBLIC	??_C@_02DJBIDCPN@ja?$AA@			; `string'
PUBLIC	??_C@_02CHMGDJHD@iw?$AA@			; `string'
PUBLIC	??_C@_02BEDCDBMG@hu?$AA@			; `string'
PUBLIC	??_C@_02FOPACDJH@he?$AA@			; `string'
PUBLIC	??_C@_02IHOKALIN@el?$AA@			; `string'
PUBLIC	??_C@_02EODNHJKB@cs?$AA@			; `string'
PUBLIC	??_C@_02GBFBMEMD@bg?$AA@			; `string'
PUBLIC	??_C@_02FDGHKGEB@be?$AA@			; `string'
PUBLIC	??_C@_02FEKCJMIO@ar?$AA@			; `string'
PUBLIC	??_C@_0M@IHDBKIMC@windows?9936?$AA@		; `string'
PUBLIC	??_C@_0M@NFOGHDPG@windows?9950?$AA@		; `string'
PUBLIC	??_C@_0M@FOGKCII@windows?9949?$AA@		; `string'
PUBLIC	??_C@_0M@ODFNGNMG@windows?9932?$AA@		; `string'
PUBLIC	??_C@_0M@KLCAFPJ@windows?9874?$AA@		; `string'
PUBLIC	??_C@_0N@EEENPDDO@windows?91254?$AA@		; `string'
PUBLIC	??_C@_07DOCEJCLP@ibm?9852?$AA@			; `string'
PUBLIC	??_C@_0N@DJDKAHHL@windows?91251?$AA@		; `string'
PUBLIC	??_C@_0N@HGHLJBLM@windows?91256?$AA@		; `string'
PUBLIC	??_C@_0N@FNFGMCHP@windows?91255?$AA@		; `string'
PUBLIC	??_C@_07BFAJMBHM@ibm?9851?$AA@			; `string'
PUBLIC	??_C@_07MBCPADN@ibm?9850?$AA@			; `string'
PUBLIC	??_C@_08NFKDBLGO@lmb?9excp?$AA@			; `string'
PUBLIC	__LMBCSData1_56
PUBLIC	__LMBCSData2_56
PUBLIC	__LMBCSData3_56
PUBLIC	__LMBCSData4_56
PUBLIC	__LMBCSData5_56
PUBLIC	__LMBCSData6_56
PUBLIC	__LMBCSData8_56
PUBLIC	__LMBCSData11_56
PUBLIC	__LMBCSData16_56
PUBLIC	__LMBCSData17_56
PUBLIC	__LMBCSData18_56
PUBLIC	__LMBCSData19_56
EXTRN	_ucnv_getCompleteUnicodeSet_56:PROC
;	COMDAT ??_C@_02PEPMCKME@zh?$AA@
CONST	SEGMENT
??_C@_02PEPMCKME@zh?$AA@ DB 'zh', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04OKGCGCJP@zhTW?$AA@
CONST	SEGMENT
??_C@_04OKGCGCJP@zhTW?$AA@ DB 'zhTW', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02NEINDODK@uk?$AA@
CONST	SEGMENT
??_C@_02NEINDODK@uk?$AA@ DB 'uk', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02EOEPPNBF@tr?$AA@
CONST	SEGMENT
??_C@_02EOEPPNBF@tr?$AA@ DB 'tr', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02POGCAHMO@th?$AA@
CONST	SEGMENT
??_C@_02POGCAHMO@th?$AA@ DB 'th', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02ELAAOLJA@sr?$AA@
CONST	SEGMENT
??_C@_02ELAAOLJA@sr?$AA@ DB 'sr', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02GACNLIFD@sq?$AA@
CONST	SEGMENT
??_C@_02GACNLIFD@sq?$AA@ DB 'sq', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02JPEBNEEP@sl?$AA@
CONST	SEGMENT
??_C@_02JPEBNEEP@sl?$AA@ DB 'sl', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02NAAAECII@sk?$AA@
CONST	SEGMENT
??_C@_02NAAAECII@sk?$AA@ DB 'sk', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02PLCNBBEL@sh?$AA@
CONST	SEGMENT
??_C@_02PLCNBBEL@sh?$AA@ DB 'sh', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02FIDBHGA@ru?$AA@
CONST	SEGMENT
??_C@_02FIDBHGA@ru?$AA@ DB 'ru', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02LFKOONLL@ro?$AA@
CONST	SEGMENT
??_C@_02LFKOONLL@ro?$AA@ DB 'ro', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02JNAHGKBG@pl?$AA@
CONST	SEGMENT
??_C@_02JNAHGKBG@pl?$AA@ DB 'pl', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02MGLIMMPC@mk?$AA@
CONST	SEGMENT
??_C@_02MGLIMMPC@mk?$AA@ DB 'mk', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02KGFJHFEE@ko?$AA@
CONST	SEGMENT
??_C@_02KGFJHFEE@ko?$AA@ DB 'ko', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02DJBIDCPN@ja?$AA@
CONST	SEGMENT
??_C@_02DJBIDCPN@ja?$AA@ DB 'ja', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02CHMGDJHD@iw?$AA@
CONST	SEGMENT
??_C@_02CHMGDJHD@iw?$AA@ DB 'iw', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02BEDCDBMG@hu?$AA@
CONST	SEGMENT
??_C@_02BEDCDBMG@hu?$AA@ DB 'hu', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02FOPACDJH@he?$AA@
CONST	SEGMENT
??_C@_02FOPACDJH@he?$AA@ DB 'he', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02IHOKALIN@el?$AA@
CONST	SEGMENT
??_C@_02IHOKALIN@el?$AA@ DB 'el', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02EODNHJKB@cs?$AA@
CONST	SEGMENT
??_C@_02EODNHJKB@cs?$AA@ DB 'cs', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02GBFBMEMD@bg?$AA@
CONST	SEGMENT
??_C@_02GBFBMEMD@bg?$AA@ DB 'bg', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02FDGHKGEB@be?$AA@
CONST	SEGMENT
??_C@_02FDGHKGEB@be?$AA@ DB 'be', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02FEKCJMIO@ar?$AA@
CONST	SEGMENT
??_C@_02FEKCJMIO@ar?$AA@ DB 'ar', 00H			; `string'
CONST	ENDS
CONST	SEGMENT
_OptGroupByteToCPName DD FLAT:??_C@_08NFKDBLGO@lmb?9excp?$AA@
	DD	FLAT:??_C@_07MBCPADN@ibm?9850?$AA@
	DD	FLAT:??_C@_07BFAJMBHM@ibm?9851?$AA@
	DD	FLAT:??_C@_0N@FNFGMCHP@windows?91255?$AA@
	DD	FLAT:??_C@_0N@HGHLJBLM@windows?91256?$AA@
	DD	FLAT:??_C@_0N@DJDKAHHL@windows?91251?$AA@
	DD	FLAT:??_C@_07DOCEJCLP@ibm?9852?$AA@
	DD	00H
	DD	FLAT:??_C@_0N@EEENPDDO@windows?91254?$AA@
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0M@KLCAFPJ@windows?9874?$AA@
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0M@ODFNGNMG@windows?9932?$AA@
	DD	FLAT:??_C@_0M@FOGKCII@windows?9949?$AA@
	DD	FLAT:??_C@_0M@NFOGHDPG@windows?9950?$AA@
	DD	FLAT:??_C@_0M@IHDBKIMC@windows?9936?$AA@
_UniLMBCSGrpMap DW 01H
	DW	01fH
	DB	0fH
	ORG $+1
	DW	080H
	DW	09fH
	DB	0fH
	ORG $+1
	DW	0a0H
	DW	0a6H
	DB	080H
	ORG $+1
	DW	0a7H
	DW	0a8H
	DB	082H
	ORG $+1
	DW	0a9H
	DW	0afH
	DB	080H
	ORG $+1
	DW	0b0H
	DW	0b1H
	DB	082H
	ORG $+1
	DW	0b2H
	DW	0b3H
	DB	080H
	ORG $+1
	DW	0b4H
	DW	0b4H
	DB	082H
	ORG $+1
	DW	0b5H
	DW	0b5H
	DB	080H
	ORG $+1
	DW	0b6H
	DW	0b6H
	DB	082H
	ORG $+1
	DW	0b7H
	DW	0d6H
	DB	080H
	ORG $+1
	DW	0d7H
	DW	0d7H
	DB	082H
	ORG $+1
	DW	0d8H
	DW	0f6H
	DB	080H
	ORG $+1
	DW	0f7H
	DW	0f7H
	DB	082H
	ORG $+1
	DW	0f8H
	DW	01cdH
	DB	080H
	ORG $+1
	DW	01ceH
	DW	01ceH
	DB	012H
	ORG $+1
	DW	01cfH
	DW	02b9H
	DB	080H
	ORG $+1
	DW	02baH
	DW	02baH
	DB	013H
	ORG $+1
	DW	02bcH
	DW	02c8H
	DB	080H
	ORG $+1
	DW	02c9H
	DW	02d0H
	DB	081H
	ORG $+1
	DW	02d8H
	DW	02ddH
	DB	080H
	ORG $+1
	DW	0384H
	DW	0390H
	DB	080H
	ORG $+1
	DW	0391H
	DW	03a9H
	DB	082H
	ORG $+1
	DW	03aaH
	DW	03b0H
	DB	080H
	ORG $+1
	DW	03b1H
	DW	03c9H
	DB	082H
	ORG $+1
	DW	03caH
	DW	03ceH
	DB	080H
	ORG $+1
	DW	0400H
	DW	0400H
	DB	05H
	ORG $+1
	DW	0401H
	DW	0401H
	DB	082H
	ORG $+1
	DW	0402H
	DW	040fH
	DB	05H
	ORG $+1
	DW	0410H
	DW	0431H
	DB	082H
	ORG $+1
	DW	0432H
	DW	044eH
	DB	05H
	ORG $+1
	DW	044fH
	DW	044fH
	DB	082H
	ORG $+1
	DW	0450H
	DW	0491H
	DB	05H
	ORG $+1
	DW	05b0H
	DW	05f2H
	DB	03H
	ORG $+1
	DW	060cH
	DW	06afH
	DB	04H
	ORG $+1
	DW	0e01H
	DW	0e5bH
	DB	0bH
	ORG $+1
	DW	0200cH
	DW	0200fH
	DB	080H
	ORG $+1
	DW	02010H
	DW	02010H
	DB	081H
	ORG $+1
	DW	02013H
	DW	02014H
	DB	080H
	ORG $+1
	DW	02015H
	DW	02015H
	DB	081H
	ORG $+1
	DW	02016H
	DW	02016H
	DB	081H
	ORG $+1
	DW	02017H
	DW	02017H
	DB	080H
	ORG $+1
	DW	02018H
	DW	02019H
	DB	082H
	ORG $+1
	DW	0201aH
	DW	0201bH
	DB	080H
	ORG $+1
	DW	0201cH
	DW	0201dH
	DB	082H
	ORG $+1
	DW	0201eH
	DW	0201fH
	DB	080H
	ORG $+1
	DW	02020H
	DW	02021H
	DB	082H
	ORG $+1
	DW	02022H
	DW	02024H
	DB	080H
	ORG $+1
	DW	02025H
	DW	02025H
	DB	081H
	ORG $+1
	DW	02026H
	DW	02026H
	DB	082H
	ORG $+1
	DW	02027H
	DW	02027H
	DB	012H
	ORG $+1
	DW	02030H
	DW	02030H
	DB	082H
	ORG $+1
	DW	02031H
	DW	02031H
	DB	080H
	ORG $+1
	DW	02032H
	DW	02033H
	DB	081H
	ORG $+1
	DW	02035H
	DW	02035H
	DB	081H
	ORG $+1
	DW	02039H
	DW	0203aH
	DB	080H
	ORG $+1
	DW	0203bH
	DW	0203bH
	DB	081H
	ORG $+1
	DW	0203cH
	DW	0203cH
	DB	00H
	ORG $+1
	DW	02074H
	DW	02074H
	DB	011H
	ORG $+1
	DW	0207fH
	DW	0207fH
	DB	00H
	ORG $+1
	DW	02081H
	DW	02084H
	DB	011H
	ORG $+1
	DW	020a4H
	DW	020acH
	DB	080H
	ORG $+1
	DW	02103H
	DW	02109H
	DB	081H
	ORG $+1
	DW	02111H
	DW	02120H
	DB	080H
	ORG $+1
	DW	02121H
	DW	02121H
	DB	081H
	ORG $+1
	DW	02122H
	DW	02126H
	DB	080H
	ORG $+1
	DW	0212bH
	DW	0212bH
	DB	081H
	ORG $+1
	DW	02135H
	DW	02135H
	DB	080H
	ORG $+1
	DW	02153H
	DW	02154H
	DB	011H
	ORG $+1
	DW	0215bH
	DW	0215eH
	DB	00H
	ORG $+1
	DW	02160H
	DW	02179H
	DB	081H
	ORG $+1
	DW	02190H
	DW	02193H
	DB	082H
	ORG $+1
	DW	02194H
	DW	02195H
	DB	00H
	ORG $+1
	DW	02196H
	DW	02199H
	DB	081H
	ORG $+1
	DW	021a8H
	DW	021a8H
	DB	00H
	ORG $+1
	DW	021b8H
	DW	021b9H
	DB	013H
	ORG $+1
	DW	021d0H
	DW	021d1H
	DB	00H
	ORG $+1
	DW	021d2H
	DW	021d2H
	DB	081H
	ORG $+1
	DW	021d3H
	DW	021d3H
	DB	00H
	ORG $+1
	DW	021d4H
	DW	021d4H
	DB	081H
	ORG $+1
	DW	021d5H
	DW	021d5H
	DB	00H
	ORG $+1
	DW	021e7H
	DW	021e7H
	DB	013H
	ORG $+1
	DW	02200H
	DW	02200H
	DB	081H
	ORG $+1
	DW	02201H
	DW	02201H
	DB	00H
	ORG $+1
	DW	02202H
	DW	02202H
	DB	081H
	ORG $+1
	DW	02203H
	DW	02203H
	DB	081H
	ORG $+1
	DW	02204H
	DW	02206H
	DB	00H
	ORG $+1
	DW	02207H
	DW	02208H
	DB	081H
	ORG $+1
	DW	02209H
	DW	0220aH
	DB	00H
	ORG $+1
	DW	0220bH
	DW	0220bH
	DB	081H
	ORG $+1
	DW	0220fH
	DW	02215H
	DB	081H
	ORG $+1
	DW	02219H
	DW	02219H
	DB	00H
	ORG $+1
	DW	0221aH
	DW	0221aH
	DB	081H
	ORG $+1
	DW	0221bH
	DW	0221cH
	DB	00H
	ORG $+1
	DW	0221dH
	DW	0221eH
	DB	081H
	ORG $+1
	DW	0221fH
	DW	0221fH
	DB	00H
	ORG $+1
	DW	02220H
	DW	02220H
	DB	081H
	ORG $+1
	DW	02223H
	DW	0222aH
	DB	081H
	ORG $+1
	DW	0222bH
	DW	0223dH
	DB	081H
	ORG $+1
	DW	02245H
	DW	02248H
	DB	00H
	ORG $+1
	DW	0224cH
	DW	0224cH
	DB	012H
	ORG $+1
	DW	02252H
	DW	02252H
	DB	081H
	ORG $+1
	DW	02260H
	DW	02261H
	DB	081H
	ORG $+1
	DW	02262H
	DW	02265H
	DB	00H
	ORG $+1
	DW	02266H
	DW	0226fH
	DB	081H
	ORG $+1
	DW	02282H
	DW	02283H
	DB	081H
	ORG $+1
	DW	02284H
	DW	02285H
	DB	00H
	ORG $+1
	DW	02286H
	DW	02287H
	DB	081H
	ORG $+1
	DW	02288H
	DW	02297H
	DB	00H
	ORG $+1
	DW	02299H
	DW	022bfH
	DB	081H
	ORG $+1
	DW	022c0H
	DW	022c0H
	DB	00H
	ORG $+1
	DW	02310H
	DW	02310H
	DB	00H
	ORG $+1
	DW	02312H
	DW	02312H
	DB	081H
	ORG $+1
	DW	02318H
	DW	02321H
	DB	00H
	ORG $+1
	DW	02318H
	DW	02321H
	DB	013H
	ORG $+1
	DW	02460H
	DW	024e9H
	DB	081H
	ORG $+1
	DW	02500H
	DW	02500H
	DB	080H
	ORG $+1
	DW	02501H
	DW	02501H
	DB	081H
	ORG $+1
	DW	02502H
	DW	02502H
	DB	082H
	ORG $+1
	DW	02503H
	DW	02503H
	DB	081H
	ORG $+1
	DW	02504H
	DW	02505H
	DB	012H
	ORG $+1
	DW	02506H
	DW	02665H
	DB	082H
	ORG $+1
	DW	02666H
	DW	02666H
	DB	00H
	ORG $+1
	DW	02667H
	DW	02669H
	DB	080H
	ORG $+1
	DW	0266aH
	DW	0266aH
	DB	082H
	ORG $+1
	DW	0266bH
	DW	0266cH
	DB	080H
	ORG $+1
	DW	0266dH
	DW	0266dH
	DB	081H
	ORG $+1
	DW	0266eH
	DW	0266eH
	DB	080H
	ORG $+1
	DW	0266fH
	DW	0266fH
	DB	010H
	ORG $+1
	DW	02670H
	DW	02e7fH
	DB	080H
	ORG $+1
	DW	02e80H
	DW	0f861H
	DB	081H
	ORG $+1
	DW	0f862H
	DW	0f8ffH
	DB	00H
	ORG $+1
	DW	0f900H
	DW	0fa2dH
	DB	081H
	ORG $+1
	DW	0fb00H
	DW	0feffH
	DB	080H
	ORG $+1
	DW	0ff01H
	DW	0ffeeH
	DB	081H
	ORG $+1
	DW	0ffffH
	DW	0ffffH
	DB	014H
	ORG $+1
_LocaleLMBCSGrpMap DD FLAT:??_C@_02FEKCJMIO@ar?$AA@
	DB	04H
	ORG $+3
	DD	FLAT:??_C@_02FDGHKGEB@be?$AA@
	DB	05H
	ORG $+3
	DD	FLAT:??_C@_02GBFBMEMD@bg?$AA@
	DB	06H
	ORG $+3
	DD	FLAT:??_C@_02EODNHJKB@cs?$AA@
	DB	06H
	ORG $+3
	DD	FLAT:??_C@_02IHOKALIN@el?$AA@
	DB	02H
	ORG $+3
	DD	FLAT:??_C@_02FOPACDJH@he?$AA@
	DB	03H
	ORG $+3
	DD	FLAT:??_C@_02BEDCDBMG@hu?$AA@
	DB	06H
	ORG $+3
	DD	FLAT:??_C@_02CHMGDJHD@iw?$AA@
	DB	03H
	ORG $+3
	DD	FLAT:??_C@_02DJBIDCPN@ja?$AA@
	DB	010H
	ORG $+3
	DD	FLAT:??_C@_02KGFJHFEE@ko?$AA@
	DB	011H
	ORG $+3
	DD	FLAT:??_C@_02MGLIMMPC@mk?$AA@
	DB	05H
	ORG $+3
	DD	FLAT:??_C@_02JNAHGKBG@pl?$AA@
	DB	06H
	ORG $+3
	DD	FLAT:??_C@_02LFKOONLL@ro?$AA@
	DB	06H
	ORG $+3
	DD	FLAT:??_C@_02FIDBHGA@ru?$AA@
	DB	05H
	ORG $+3
	DD	FLAT:??_C@_02PLCNBBEL@sh?$AA@
	DB	06H
	ORG $+3
	DD	FLAT:??_C@_02NAAAECII@sk?$AA@
	DB	06H
	ORG $+3
	DD	FLAT:??_C@_02JPEBNEEP@sl?$AA@
	DB	06H
	ORG $+3
	DD	FLAT:??_C@_02GACNLIFD@sq?$AA@
	DB	06H
	ORG $+3
	DD	FLAT:??_C@_02ELAAOLJA@sr?$AA@
	DB	05H
	ORG $+3
	DD	FLAT:??_C@_02POGCAHMO@th?$AA@
	DB	0bH
	ORG $+3
	DD	FLAT:??_C@_02EOEPPNBF@tr?$AA@
	DB	08H
	ORG $+3
	DD	FLAT:??_C@_02NEINDODK@uk?$AA@
	DB	05H
	ORG $+3
	DD	FLAT:??_C@_04OKGCGCJP@zhTW?$AA@
	DB	012H
	ORG $+3
	DD	FLAT:??_C@_02PEPMCKME@zh?$AA@
	DB	013H
	ORG $+3
	DD	00H
	DB	01H
	ORG $+3
__LMBCSImpl1 DD	0bH
	DD	00H
	DD	00H
	DD	FLAT:__LMBCSOpen1
	DD	FLAT:__LMBCSClose
	DD	00H
	DD	FLAT:__LMBCSToUnicodeWithOffsets
	DD	FLAT:__LMBCSToUnicodeWithOffsets
	DD	FLAT:__LMBCSFromUnicode
	DD	FLAT:__LMBCSFromUnicode
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:__LMBCSSafeClone
	DD	FLAT:_ucnv_getCompleteUnicodeSet_56
	ORG $+8
__LMBCSStaticData1 DD 064H
	DB	'LMBCS-1', 00H
	ORG $+52
	DD	00H
	DB	00H
	DB	0bH
	DB	01H
	DB	03H
	DB	03fH
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+4
__LMBCSData1_56 DD 0e4H
	DD	0ffffffffH
	DD	00H
	DD	FLAT:__LMBCSStaticData1
	DB	00H
	DB	00H
	ORG $+2
	DD	FLAT:__LMBCSImpl1
	DD	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+1
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	ORG $+126
	DD	00H
	DD	00H
	DD	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+1
	DW	00H
	ORG $+2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	ORG $+4
__LMBCSImpl2 DD	0cH
	DD	00H
	DD	00H
	DD	FLAT:__LMBCSOpen2
	DD	FLAT:__LMBCSClose
	DD	00H
	DD	FLAT:__LMBCSToUnicodeWithOffsets
	DD	FLAT:__LMBCSToUnicodeWithOffsets
	DD	FLAT:__LMBCSFromUnicode
	DD	FLAT:__LMBCSFromUnicode
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:__LMBCSSafeClone
	DD	FLAT:_ucnv_getCompleteUnicodeSet_56
	ORG $+8
__LMBCSStaticData2 DD 064H
	DB	'LMBCS-2', 00H
	ORG $+52
	DD	00H
	DB	00H
	DB	0cH
	DB	01H
	DB	03H
	DB	03fH
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+4
__LMBCSData2_56 DD 0e4H
	DD	0ffffffffH
	DD	00H
	DD	FLAT:__LMBCSStaticData2
	DB	00H
	DB	00H
	ORG $+2
	DD	FLAT:__LMBCSImpl2
	DD	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+1
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	ORG $+126
	DD	00H
	DD	00H
	DD	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+1
	DW	00H
	ORG $+2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	ORG $+4
__LMBCSImpl3 DD	0dH
	DD	00H
	DD	00H
	DD	FLAT:__LMBCSOpen3
	DD	FLAT:__LMBCSClose
	DD	00H
	DD	FLAT:__LMBCSToUnicodeWithOffsets
	DD	FLAT:__LMBCSToUnicodeWithOffsets
	DD	FLAT:__LMBCSFromUnicode
	DD	FLAT:__LMBCSFromUnicode
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:__LMBCSSafeClone
	DD	FLAT:_ucnv_getCompleteUnicodeSet_56
	ORG $+8
__LMBCSStaticData3 DD 064H
	DB	'LMBCS-3', 00H
	ORG $+52
	DD	00H
	DB	00H
	DB	0dH
	DB	01H
	DB	03H
	DB	03fH
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+4
__LMBCSData3_56 DD 0e4H
	DD	0ffffffffH
	DD	00H
	DD	FLAT:__LMBCSStaticData3
	DB	00H
	DB	00H
	ORG $+2
	DD	FLAT:__LMBCSImpl3
	DD	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+1
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	ORG $+126
	DD	00H
	DD	00H
	DD	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+1
	DW	00H
	ORG $+2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	ORG $+4
__LMBCSImpl4 DD	0eH
	DD	00H
	DD	00H
	DD	FLAT:__LMBCSOpen4
	DD	FLAT:__LMBCSClose
	DD	00H
	DD	FLAT:__LMBCSToUnicodeWithOffsets
	DD	FLAT:__LMBCSToUnicodeWithOffsets
	DD	FLAT:__LMBCSFromUnicode
	DD	FLAT:__LMBCSFromUnicode
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:__LMBCSSafeClone
	DD	FLAT:_ucnv_getCompleteUnicodeSet_56
	ORG $+8
__LMBCSStaticData4 DD 064H
	DB	'LMBCS-4', 00H
	ORG $+52
	DD	00H
	DB	00H
	DB	0eH
	DB	01H
	DB	03H
	DB	03fH
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+4
__LMBCSData4_56 DD 0e4H
	DD	0ffffffffH
	DD	00H
	DD	FLAT:__LMBCSStaticData4
	DB	00H
	DB	00H
	ORG $+2
	DD	FLAT:__LMBCSImpl4
	DD	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+1
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	ORG $+126
	DD	00H
	DD	00H
	DD	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+1
	DW	00H
	ORG $+2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	ORG $+4
__LMBCSImpl5 DD	0fH
	DD	00H
	DD	00H
	DD	FLAT:__LMBCSOpen5
	DD	FLAT:__LMBCSClose
	DD	00H
	DD	FLAT:__LMBCSToUnicodeWithOffsets
	DD	FLAT:__LMBCSToUnicodeWithOffsets
	DD	FLAT:__LMBCSFromUnicode
	DD	FLAT:__LMBCSFromUnicode
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:__LMBCSSafeClone
	DD	FLAT:_ucnv_getCompleteUnicodeSet_56
	ORG $+8
__LMBCSStaticData5 DD 064H
	DB	'LMBCS-5', 00H
	ORG $+52
	DD	00H
	DB	00H
	DB	0fH
	DB	01H
	DB	03H
	DB	03fH
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+4
__LMBCSData5_56 DD 0e4H
	DD	0ffffffffH
	DD	00H
	DD	FLAT:__LMBCSStaticData5
	DB	00H
	DB	00H
	ORG $+2
	DD	FLAT:__LMBCSImpl5
	DD	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+1
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	ORG $+126
	DD	00H
	DD	00H
	DD	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+1
	DW	00H
	ORG $+2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	ORG $+4
__LMBCSImpl6 DD	010H
	DD	00H
	DD	00H
	DD	FLAT:__LMBCSOpen6
	DD	FLAT:__LMBCSClose
	DD	00H
	DD	FLAT:__LMBCSToUnicodeWithOffsets
	DD	FLAT:__LMBCSToUnicodeWithOffsets
	DD	FLAT:__LMBCSFromUnicode
	DD	FLAT:__LMBCSFromUnicode
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:__LMBCSSafeClone
	DD	FLAT:_ucnv_getCompleteUnicodeSet_56
	ORG $+8
__LMBCSStaticData6 DD 064H
	DB	'LMBCS-6', 00H
	ORG $+52
	DD	00H
	DB	00H
	DB	010H
	DB	01H
	DB	03H
	DB	03fH
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+4
__LMBCSData6_56 DD 0e4H
	DD	0ffffffffH
	DD	00H
	DD	FLAT:__LMBCSStaticData6
	DB	00H
	DB	00H
	ORG $+2
	DD	FLAT:__LMBCSImpl6
	DD	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+1
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	ORG $+126
	DD	00H
	DD	00H
	DD	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+1
	DW	00H
	ORG $+2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	ORG $+4
__LMBCSImpl8 DD	011H
	DD	00H
	DD	00H
	DD	FLAT:__LMBCSOpen8
	DD	FLAT:__LMBCSClose
	DD	00H
	DD	FLAT:__LMBCSToUnicodeWithOffsets
	DD	FLAT:__LMBCSToUnicodeWithOffsets
	DD	FLAT:__LMBCSFromUnicode
	DD	FLAT:__LMBCSFromUnicode
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:__LMBCSSafeClone
	DD	FLAT:_ucnv_getCompleteUnicodeSet_56
	ORG $+8
__LMBCSStaticData8 DD 064H
	DB	'LMBCS-8', 00H
	ORG $+52
	DD	00H
	DB	00H
	DB	011H
	DB	01H
	DB	03H
	DB	03fH
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+4
__LMBCSData8_56 DD 0e4H
	DD	0ffffffffH
	DD	00H
	DD	FLAT:__LMBCSStaticData8
	DB	00H
	DB	00H
	ORG $+2
	DD	FLAT:__LMBCSImpl8
	DD	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+1
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	ORG $+126
	DD	00H
	DD	00H
	DD	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+1
	DW	00H
	ORG $+2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	ORG $+4
__LMBCSImpl11 DD 012H
	DD	00H
	DD	00H
	DD	FLAT:__LMBCSOpen11
	DD	FLAT:__LMBCSClose
	DD	00H
	DD	FLAT:__LMBCSToUnicodeWithOffsets
	DD	FLAT:__LMBCSToUnicodeWithOffsets
	DD	FLAT:__LMBCSFromUnicode
	DD	FLAT:__LMBCSFromUnicode
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:__LMBCSSafeClone
	DD	FLAT:_ucnv_getCompleteUnicodeSet_56
	ORG $+8
__LMBCSStaticData11 DD 064H
	DB	'LMBCS-11', 00H
	ORG $+51
	DD	00H
	DB	00H
	DB	012H
	DB	01H
	DB	03H
	DB	03fH
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+4
__LMBCSData11_56 DD 0e4H
	DD	0ffffffffH
	DD	00H
	DD	FLAT:__LMBCSStaticData11
	DB	00H
	DB	00H
	ORG $+2
	DD	FLAT:__LMBCSImpl11
	DD	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+1
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	ORG $+126
	DD	00H
	DD	00H
	DD	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+1
	DW	00H
	ORG $+2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	ORG $+4
__LMBCSImpl16 DD 013H
	DD	00H
	DD	00H
	DD	FLAT:__LMBCSOpen16
	DD	FLAT:__LMBCSClose
	DD	00H
	DD	FLAT:__LMBCSToUnicodeWithOffsets
	DD	FLAT:__LMBCSToUnicodeWithOffsets
	DD	FLAT:__LMBCSFromUnicode
	DD	FLAT:__LMBCSFromUnicode
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:__LMBCSSafeClone
	DD	FLAT:_ucnv_getCompleteUnicodeSet_56
	ORG $+8
__LMBCSStaticData16 DD 064H
	DB	'LMBCS-16', 00H
	ORG $+51
	DD	00H
	DB	00H
	DB	013H
	DB	01H
	DB	03H
	DB	03fH
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+4
__LMBCSData16_56 DD 0e4H
	DD	0ffffffffH
	DD	00H
	DD	FLAT:__LMBCSStaticData16
	DB	00H
	DB	00H
	ORG $+2
	DD	FLAT:__LMBCSImpl16
	DD	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+1
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	ORG $+126
	DD	00H
	DD	00H
	DD	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+1
	DW	00H
	ORG $+2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	ORG $+4
__LMBCSImpl17 DD 014H
	DD	00H
	DD	00H
	DD	FLAT:__LMBCSOpen17
	DD	FLAT:__LMBCSClose
	DD	00H
	DD	FLAT:__LMBCSToUnicodeWithOffsets
	DD	FLAT:__LMBCSToUnicodeWithOffsets
	DD	FLAT:__LMBCSFromUnicode
	DD	FLAT:__LMBCSFromUnicode
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:__LMBCSSafeClone
	DD	FLAT:_ucnv_getCompleteUnicodeSet_56
	ORG $+8
__LMBCSStaticData17 DD 064H
	DB	'LMBCS-17', 00H
	ORG $+51
	DD	00H
	DB	00H
	DB	014H
	DB	01H
	DB	03H
	DB	03fH
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+4
__LMBCSData17_56 DD 0e4H
	DD	0ffffffffH
	DD	00H
	DD	FLAT:__LMBCSStaticData17
	DB	00H
	DB	00H
	ORG $+2
	DD	FLAT:__LMBCSImpl17
	DD	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+1
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	ORG $+126
	DD	00H
	DD	00H
	DD	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+1
	DW	00H
	ORG $+2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	ORG $+4
__LMBCSImpl18 DD 015H
	DD	00H
	DD	00H
	DD	FLAT:__LMBCSOpen18
	DD	FLAT:__LMBCSClose
	DD	00H
	DD	FLAT:__LMBCSToUnicodeWithOffsets
	DD	FLAT:__LMBCSToUnicodeWithOffsets
	DD	FLAT:__LMBCSFromUnicode
	DD	FLAT:__LMBCSFromUnicode
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:__LMBCSSafeClone
	DD	FLAT:_ucnv_getCompleteUnicodeSet_56
	ORG $+8
__LMBCSStaticData18 DD 064H
	DB	'LMBCS-18', 00H
	ORG $+51
	DD	00H
	DB	00H
	DB	015H
	DB	01H
	DB	03H
	DB	03fH
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+4
__LMBCSData18_56 DD 0e4H
	DD	0ffffffffH
	DD	00H
	DD	FLAT:__LMBCSStaticData18
	DB	00H
	DB	00H
	ORG $+2
	DD	FLAT:__LMBCSImpl18
	DD	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+1
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	ORG $+126
	DD	00H
	DD	00H
	DD	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+1
	DW	00H
	ORG $+2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	ORG $+4
__LMBCSImpl19 DD 016H
	DD	00H
	DD	00H
	DD	FLAT:__LMBCSOpen19
	DD	FLAT:__LMBCSClose
	DD	00H
	DD	FLAT:__LMBCSToUnicodeWithOffsets
	DD	FLAT:__LMBCSToUnicodeWithOffsets
	DD	FLAT:__LMBCSFromUnicode
	DD	FLAT:__LMBCSFromUnicode
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:__LMBCSSafeClone
	DD	FLAT:_ucnv_getCompleteUnicodeSet_56
	ORG $+8
__LMBCSStaticData19 DD 064H
	DB	'LMBCS-19', 00H
	ORG $+51
	DD	00H
	DB	00H
	DB	016H
	DB	01H
	DB	03H
	DB	03fH
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+4
__LMBCSData19_56 DD 0e4H
	DD	0ffffffffH
	DD	00H
	DD	FLAT:__LMBCSStaticData19
	DB	00H
	DB	00H
	ORG $+2
	DD	FLAT:__LMBCSImpl19
	DD	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+1
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	ORG $+126
	DD	00H
	DD	00H
	DD	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+1
	DW	00H
	ORG $+2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
CONST	ENDS
;	COMDAT ??_C@_0M@IHDBKIMC@windows?9936?$AA@
CONST	SEGMENT
??_C@_0M@IHDBKIMC@windows?9936?$AA@ DB 'windows-936', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@NFOGHDPG@windows?9950?$AA@
CONST	SEGMENT
??_C@_0M@NFOGHDPG@windows?9950?$AA@ DB 'windows-950', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@FOGKCII@windows?9949?$AA@
CONST	SEGMENT
??_C@_0M@FOGKCII@windows?9949?$AA@ DB 'windows-949', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@ODFNGNMG@windows?9932?$AA@
CONST	SEGMENT
??_C@_0M@ODFNGNMG@windows?9932?$AA@ DB 'windows-932', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@KLCAFPJ@windows?9874?$AA@
CONST	SEGMENT
??_C@_0M@KLCAFPJ@windows?9874?$AA@ DB 'windows-874', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@EEENPDDO@windows?91254?$AA@
CONST	SEGMENT
??_C@_0N@EEENPDDO@windows?91254?$AA@ DB 'windows-1254', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07DOCEJCLP@ibm?9852?$AA@
CONST	SEGMENT
??_C@_07DOCEJCLP@ibm?9852?$AA@ DB 'ibm-852', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@DJDKAHHL@windows?91251?$AA@
CONST	SEGMENT
??_C@_0N@DJDKAHHL@windows?91251?$AA@ DB 'windows-1251', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@HGHLJBLM@windows?91256?$AA@
CONST	SEGMENT
??_C@_0N@HGHLJBLM@windows?91256?$AA@ DB 'windows-1256', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@FNFGMCHP@windows?91255?$AA@
CONST	SEGMENT
??_C@_0N@FNFGMCHP@windows?91255?$AA@ DB 'windows-1255', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07BFAJMBHM@ibm?9851?$AA@
CONST	SEGMENT
??_C@_07BFAJMBHM@ibm?9851?$AA@ DB 'ibm-851', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07MBCPADN@ibm?9850?$AA@
CONST	SEGMENT
??_C@_07MBCPADN@ibm?9850?$AA@ DB 'ibm-850', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08NFKDBLGO@lmb?9excp?$AA@
CONST	SEGMENT
??_C@_08NFKDBLGO@lmb?9excp?$AA@ DB 'lmb-excp', 00H	; `string'
CONST	ENDS
EXTRN	_uprv_free_56:PROC
EXTRN	_ucnv_unloadSharedDataIfReady_56:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File d:\mozilla\intl\icu\source\common\ucnv_lmb.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT __LMBCSClose
_TEXT	SEGMENT
_extraInfo$10908 = -20					; size = 4
_Ix$10907 = -5						; size = 1
__this$ = 8						; size = 4
__LMBCSClose PROC					; COMDAT
; Line 664
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 665
	mov	eax, DWORD PTR __this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN7@LMBCSClose
; Line 668
	mov	eax, DWORD PTR __this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _extraInfo$10908[ebp], ecx
; Line 670
	mov	BYTE PTR _Ix$10907[ebp], 0
	jmp	SHORT $LN5@LMBCSClose
$LN4@LMBCSClose:
	mov	al, BYTE PTR _Ix$10907[ebp]
	add	al, 1
	mov	BYTE PTR _Ix$10907[ebp], al
$LN5@LMBCSClose:
	movzx	eax, BYTE PTR _Ix$10907[ebp]
	cmp	eax, 19					; 00000013H
	jg	SHORT $LN3@LMBCSClose
; Line 672
	movzx	eax, BYTE PTR _Ix$10907[ebp]
	mov	ecx, DWORD PTR _extraInfo$10908[ebp]
	cmp	DWORD PTR [ecx+eax*4], 0
	je	SHORT $LN2@LMBCSClose
; Line 673
	movzx	eax, BYTE PTR _Ix$10907[ebp]
	mov	ecx, DWORD PTR _extraInfo$10908[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	push	edx
	call	_ucnv_unloadSharedDataIfReady_56
	add	esp, 4
$LN2@LMBCSClose:
; Line 674
	jmp	SHORT $LN4@LMBCSClose
$LN3@LMBCSClose:
; Line 675
	mov	eax, DWORD PTR __this$[ebp]
	movsx	ecx, BYTE PTR [eax+34]
	test	ecx, ecx
	jne	SHORT $LN7@LMBCSClose
; Line 676
	mov	eax, DWORD PTR __this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_uprv_free_56
	add	esp, 4
; Line 677
	mov	eax, DWORD PTR __this$[ebp]
	mov	DWORD PTR [eax+8], 0
$LN7@LMBCSClose:
; Line 680
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__LMBCSClose ENDP
_TEXT	ENDS
EXTRN	_ucnv_incrementRefCount_56:PROC
EXTRN	_memcpy:PROC
EXTRN	_uprv_checkValidMemory:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __LMBCSSafeClone
_TEXT	SEGMENT
_i$ = -32						; size = 4
_extraInfo$ = -20					; size = 4
_newLMBCS$ = -8						; size = 4
_cnv$ = 8						; size = 4
_stackBuffer$ = 12					; size = 4
_pBufferSize$ = 16					; size = 4
_status$ = 20						; size = 4
__LMBCSSafeClone PROC					; COMDAT
; Line 691
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 696
	mov	eax, DWORD PTR _pBufferSize$[ebp]
	cmp	DWORD PTR [eax], 0
	jg	SHORT $LN5@LMBCSSafeC
; Line 697
	mov	eax, DWORD PTR _pBufferSize$[ebp]
	mov	DWORD PTR [eax], 344			; 00000158H
; Line 698
	xor	eax, eax
	jmp	$LN6@LMBCSSafeC
$LN5@LMBCSSafeC:
; Line 701
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _extraInfo$[ebp], ecx
; Line 702
	mov	eax, DWORD PTR _stackBuffer$[ebp]
	mov	DWORD PTR _newLMBCS$[ebp], eax
; Line 706
	push	1
	mov	eax, DWORD PTR _extraInfo$[ebp]
	push	eax
	call	_uprv_checkValidMemory
	add	esp, 8
	push	84					; 00000054H
	mov	ecx, DWORD PTR _extraInfo$[ebp]
	push	ecx
	mov	edx, DWORD PTR _newLMBCS$[ebp]
	add	edx, 260				; 00000104H
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 709
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@LMBCSSafeC
$LN3@LMBCSSafeC:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@LMBCSSafeC:
	cmp	DWORD PTR _i$[ebp], 19			; 00000013H
	jg	SHORT $LN2@LMBCSSafeC
; Line 710
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _extraInfo$[ebp]
	cmp	DWORD PTR [ecx+eax*4], 0
	je	SHORT $LN1@LMBCSSafeC
; Line 711
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _extraInfo$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	push	edx
	call	_ucnv_incrementRefCount_56
	add	esp, 4
$LN1@LMBCSSafeC:
; Line 713
	jmp	SHORT $LN3@LMBCSSafeC
$LN2@LMBCSSafeC:
; Line 715
	mov	eax, DWORD PTR _newLMBCS$[ebp]
	add	eax, 260				; 00000104H
	mov	ecx, DWORD PTR _newLMBCS$[ebp]
	mov	DWORD PTR [ecx+8], eax
; Line 716
	mov	eax, DWORD PTR _newLMBCS$[ebp]
	mov	BYTE PTR [eax+34], 1
; Line 717
	mov	eax, DWORD PTR _newLMBCS$[ebp]
$LN6@LMBCSSafeC:
; Line 718
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__LMBCSSafeClone ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_memset:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __LMBCSFromUnicode
_TEXT	SEGMENT
tv357 = -384						; size = 4
tv335 = -384						; size = 4
_pErrorBuffer$11084 = -184				; size = 4
_grp_ix$11066 = -169					; size = 1
_grp_end$11065 = -157					; size = 1
_grp_start$11064 = -145					; size = 1
_group$11030 = -133					; size = 1
_OldConverterIndex$ = -121				; size = 1
_sourceIndex$ = -112					; size = 4
_extraInfo$ = -100					; size = 4
_groups_tried$ = -88					; size = 20
_bytes_written$ = -60					; size = 4
_pLMBCS$ = -48						; size = 4
_LMBCS$ = -36						; size = 3
_uniChar$ = -24						; size = 2
_lastConverterIndex$ = -9				; size = 1
__$ArrayPad$ = -4					; size = 4
_args$ = 8						; size = 4
_err$ = 12						; size = 4
__LMBCSFromUnicode PROC					; COMDAT
; Line 842
	push	ebp
	mov	ebp, esp
	sub	esp, 384				; 00000180H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-384]
	mov	ecx, 96					; 00000060H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 843
	mov	BYTE PTR _lastConverterIndex$[ebp], 0
; Line 849
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _extraInfo$[ebp], edx
; Line 850
	mov	DWORD PTR _sourceIndex$[ebp], 0
; Line 876
	mov	BYTE PTR _OldConverterIndex$[ebp], 0
$LN47@LMBCSFromU:
; Line 878
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [eax+8]
	cmp	edx, DWORD PTR [ecx+12]
	jae	$LN48@LMBCSFromU
	mov	eax, DWORD PTR _err$[ebp]
	cmp	DWORD PTR [eax], 0
	jg	$LN48@LMBCSFromU
; Line 881
	mov	eax, DWORD PTR _extraInfo$[ebp]
	mov	cl, BYTE PTR [eax+81]
	mov	BYTE PTR _OldConverterIndex$[ebp], cl
; Line 883
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [eax+16]
	cmp	edx, DWORD PTR [ecx+20]
	jb	SHORT $LN45@LMBCSFromU
; Line 885
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
; Line 886
	jmp	$LN48@LMBCSFromU
$LN45@LMBCSFromU:
; Line 888
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	dx, WORD PTR [ecx]
	mov	WORD PTR _uniChar$[ebp], dx
; Line 889
	mov	DWORD PTR _bytes_written$[ebp], 0
; Line 890
	lea	eax, DWORD PTR _LMBCS$[ebp]
	mov	DWORD PTR _pLMBCS$[ebp], eax
; Line 898
	movzx	eax, WORD PTR _uniChar$[ebp]
	cmp	eax, 128				; 00000080H
	jl	SHORT $LN44@LMBCSFromU
	movzx	eax, WORD PTR _uniChar$[ebp]
	cmp	eax, 255				; 000000ffH
	jg	SHORT $LN44@LMBCSFromU
	movzx	eax, WORD PTR _uniChar$[ebp]
	cmp	eax, 177				; 000000b1H
	je	SHORT $LN44@LMBCSFromU
	movzx	eax, WORD PTR _uniChar$[ebp]
	cmp	eax, 215				; 000000d7H
	je	SHORT $LN44@LMBCSFromU
	movzx	eax, WORD PTR _uniChar$[ebp]
	cmp	eax, 247				; 000000f7H
	je	SHORT $LN44@LMBCSFromU
	movzx	eax, WORD PTR _uniChar$[ebp]
	cmp	eax, 176				; 000000b0H
	je	SHORT $LN44@LMBCSFromU
	movzx	eax, WORD PTR _uniChar$[ebp]
	cmp	eax, 180				; 000000b4H
	je	SHORT $LN44@LMBCSFromU
	movzx	eax, WORD PTR _uniChar$[ebp]
	cmp	eax, 182				; 000000b6H
	je	SHORT $LN44@LMBCSFromU
	movzx	eax, WORD PTR _uniChar$[ebp]
	cmp	eax, 167				; 000000a7H
	je	SHORT $LN44@LMBCSFromU
	movzx	eax, WORD PTR _uniChar$[ebp]
	cmp	eax, 168				; 000000a8H
	je	SHORT $LN44@LMBCSFromU
; Line 900
	mov	eax, DWORD PTR _extraInfo$[ebp]
	mov	BYTE PTR [eax+81], 1
$LN44@LMBCSFromU:
; Line 905
	movzx	eax, WORD PTR _uniChar$[ebp]
	cmp	eax, 31					; 0000001fH
	jle	SHORT $LN41@LMBCSFromU
	movzx	eax, WORD PTR _uniChar$[ebp]
	cmp	eax, 128				; 00000080H
	jl	SHORT $LN42@LMBCSFromU
$LN41@LMBCSFromU:
	movzx	eax, WORD PTR _uniChar$[ebp]
	test	eax, eax
	je	SHORT $LN42@LMBCSFromU
	movzx	eax, WORD PTR _uniChar$[ebp]
	cmp	eax, 9
	je	SHORT $LN42@LMBCSFromU
	movzx	eax, WORD PTR _uniChar$[ebp]
	cmp	eax, 13					; 0000000dH
	je	SHORT $LN42@LMBCSFromU
	movzx	eax, WORD PTR _uniChar$[ebp]
	cmp	eax, 10					; 0000000aH
	je	SHORT $LN42@LMBCSFromU
	movzx	eax, WORD PTR _uniChar$[ebp]
	cmp	eax, 25					; 00000019H
	jne	SHORT $LN43@LMBCSFromU
$LN42@LMBCSFromU:
; Line 907
	mov	eax, DWORD PTR _pLMBCS$[ebp]
	mov	cl, BYTE PTR _uniChar$[ebp]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _pLMBCS$[ebp]
	add	edx, 1
	mov	DWORD PTR _pLMBCS$[ebp], edx
; Line 908
	mov	DWORD PTR _bytes_written$[ebp], 1
$LN43@LMBCSFromU:
; Line 912
	cmp	DWORD PTR _bytes_written$[ebp], 0
	jne	$LN40@LMBCSFromU
; Line 915
	movzx	eax, WORD PTR _uniChar$[ebp]
	push	eax
	call	_FindLMBCSUniRange
	add	esp, 4
	mov	BYTE PTR _group$11030[ebp], al
; Line 917
	movzx	eax, BYTE PTR _group$11030[ebp]
	cmp	eax, 20					; 00000014H
	jne	SHORT $LN39@LMBCSFromU
; Line 919
	movzx	eax, WORD PTR _uniChar$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pLMBCS$[ebp]
	push	ecx
	call	_LMBCSConvertUni
	add	esp, 8
	add	eax, DWORD PTR _pLMBCS$[ebp]
	mov	DWORD PTR _pLMBCS$[ebp], eax
; Line 921
	mov	eax, DWORD PTR _pLMBCS$[ebp]
	lea	ecx, DWORD PTR _LMBCS$[ebp]
	sub	eax, ecx
	mov	DWORD PTR _bytes_written$[ebp], eax
	jmp	$LN38@LMBCSFromU
$LN39@LMBCSFromU:
; Line 923
	movzx	eax, BYTE PTR _group$11030[ebp]
	cmp	eax, 15					; 0000000fH
	jne	SHORT $LN37@LMBCSFromU
; Line 926
	movzx	eax, WORD PTR _uniChar$[ebp]
	cmp	eax, 31					; 0000001fH
	jg	SHORT $LN36@LMBCSFromU
; Line 928
	mov	eax, DWORD PTR _pLMBCS$[ebp]
	mov	BYTE PTR [eax], 15			; 0000000fH
	mov	ecx, DWORD PTR _pLMBCS$[ebp]
	add	ecx, 1
	mov	DWORD PTR _pLMBCS$[ebp], ecx
; Line 929
	movzx	eax, WORD PTR _uniChar$[ebp]
	add	eax, 32					; 00000020H
	mov	ecx, DWORD PTR _pLMBCS$[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _pLMBCS$[ebp]
	add	edx, 1
	mov	DWORD PTR _pLMBCS$[ebp], edx
	jmp	SHORT $LN35@LMBCSFromU
$LN36@LMBCSFromU:
; Line 931
	movzx	eax, WORD PTR _uniChar$[ebp]
	cmp	eax, 128				; 00000080H
	jl	SHORT $LN35@LMBCSFromU
	movzx	eax, WORD PTR _uniChar$[ebp]
	cmp	eax, 160				; 000000a0H
	jg	SHORT $LN35@LMBCSFromU
; Line 933
	mov	eax, DWORD PTR _pLMBCS$[ebp]
	mov	BYTE PTR [eax], 15			; 0000000fH
	mov	ecx, DWORD PTR _pLMBCS$[ebp]
	add	ecx, 1
	mov	DWORD PTR _pLMBCS$[ebp], ecx
; Line 934
	movzx	eax, WORD PTR _uniChar$[ebp]
	and	eax, 255				; 000000ffH
	mov	ecx, DWORD PTR _pLMBCS$[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _pLMBCS$[ebp]
	add	edx, 1
	mov	DWORD PTR _pLMBCS$[ebp], edx
$LN35@LMBCSFromU:
; Line 936
	mov	eax, DWORD PTR _pLMBCS$[ebp]
	lea	ecx, DWORD PTR _LMBCS$[ebp]
	sub	eax, ecx
	mov	DWORD PTR _bytes_written$[ebp], eax
	jmp	SHORT $LN38@LMBCSFromU
$LN37@LMBCSFromU:
; Line 938
	movzx	eax, BYTE PTR _group$11030[ebp]
	cmp	eax, 20					; 00000014H
	jge	SHORT $LN38@LMBCSFromU
; Line 943
	lea	eax, DWORD PTR _groups_tried$[ebp]
	push	eax
	lea	ecx, DWORD PTR _lastConverterIndex$[ebp]
	push	ecx
	lea	edx, DWORD PTR _uniChar$[ebp]
	push	edx
	mov	eax, DWORD PTR _pLMBCS$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _group$11030[ebp]
	push	ecx
	mov	edx, DWORD PTR _extraInfo$[ebp]
	push	edx
	call	_LMBCSConversionWorker
	add	esp, 24					; 00000018H
	mov	DWORD PTR _bytes_written$[ebp], eax
$LN38@LMBCSFromU:
; Line 945
	cmp	DWORD PTR _bytes_written$[ebp], 0
	jne	$LN40@LMBCSFromU
; Line 947
	push	20					; 00000014H
	push	0
	lea	eax, DWORD PTR _groups_tried$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
; Line 950
	mov	eax, DWORD PTR _extraInfo$[ebp]
	movzx	ecx, BYTE PTR [eax+80]
	cmp	ecx, 1
	je	$LN30@LMBCSFromU
	movzx	eax, BYTE PTR _group$11030[ebp]
	cmp	eax, 128				; 00000080H
	jne	SHORT $LN28@LMBCSFromU
	mov	eax, DWORD PTR _extraInfo$[ebp]
	movzx	ecx, BYTE PTR [eax+80]
	cmp	ecx, 16					; 00000010H
	jl	SHORT $LN29@LMBCSFromU
$LN28@LMBCSFromU:
	movzx	eax, BYTE PTR _group$11030[ebp]
	cmp	eax, 129				; 00000081H
	jne	SHORT $LN27@LMBCSFromU
	mov	eax, DWORD PTR _extraInfo$[ebp]
	movzx	ecx, BYTE PTR [eax+80]
	cmp	ecx, 16					; 00000010H
	jge	SHORT $LN29@LMBCSFromU
$LN27@LMBCSFromU:
	movzx	eax, BYTE PTR _group$11030[ebp]
	cmp	eax, 130				; 00000082H
	jne	$LN30@LMBCSFromU
$LN29@LMBCSFromU:
; Line 955
	mov	eax, DWORD PTR _extraInfo$[ebp]
	movzx	ecx, BYTE PTR [eax+81]
	cmp	ecx, 16					; 00000010H
	jge	SHORT $LN26@LMBCSFromU
; Line 959
	lea	eax, DWORD PTR _groups_tried$[ebp]
	push	eax
	lea	ecx, DWORD PTR _lastConverterIndex$[ebp]
	push	ecx
	lea	edx, DWORD PTR _uniChar$[ebp]
	push	edx
	mov	eax, DWORD PTR _pLMBCS$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _extraInfo$[ebp]
	push	ecx
	call	_LMBCSConversionWorker
	add	esp, 24					; 00000018H
	mov	DWORD PTR _bytes_written$[ebp], eax
; Line 961
	cmp	DWORD PTR _bytes_written$[ebp], 0
	jne	SHORT $LN25@LMBCSFromU
; Line 965
	lea	eax, DWORD PTR _groups_tried$[ebp]
	push	eax
	lea	ecx, DWORD PTR _lastConverterIndex$[ebp]
	push	ecx
	lea	edx, DWORD PTR _uniChar$[ebp]
	push	edx
	mov	eax, DWORD PTR _pLMBCS$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _extraInfo$[ebp]
	push	ecx
	call	_LMBCSConversionWorker
	add	esp, 24					; 00000018H
	mov	DWORD PTR _bytes_written$[ebp], eax
$LN25@LMBCSFromU:
; Line 967
	cmp	DWORD PTR _bytes_written$[ebp], 0
	jne	SHORT $LN24@LMBCSFromU
; Line 971
	lea	eax, DWORD PTR _groups_tried$[ebp]
	push	eax
	lea	ecx, DWORD PTR _lastConverterIndex$[ebp]
	push	ecx
	lea	edx, DWORD PTR _uniChar$[ebp]
	push	edx
	mov	eax, DWORD PTR _pLMBCS$[ebp]
	push	eax
	mov	ecx, DWORD PTR _extraInfo$[ebp]
	movzx	edx, BYTE PTR [ecx+81]
	push	edx
	mov	eax, DWORD PTR _extraInfo$[ebp]
	push	eax
	call	_LMBCSConversionWorker
	add	esp, 24					; 00000018H
	mov	DWORD PTR _bytes_written$[ebp], eax
$LN24@LMBCSFromU:
; Line 974
	jmp	SHORT $LN30@LMBCSFromU
$LN26@LMBCSFromU:
; Line 978
	lea	eax, DWORD PTR _groups_tried$[ebp]
	push	eax
	lea	ecx, DWORD PTR _lastConverterIndex$[ebp]
	push	ecx
	lea	edx, DWORD PTR _uniChar$[ebp]
	push	edx
	mov	eax, DWORD PTR _pLMBCS$[ebp]
	push	eax
	mov	ecx, DWORD PTR _extraInfo$[ebp]
	movzx	edx, BYTE PTR [ecx+81]
	push	edx
	mov	eax, DWORD PTR _extraInfo$[ebp]
	push	eax
	call	_LMBCSConversionWorker
	add	esp, 24					; 00000018H
	mov	DWORD PTR _bytes_written$[ebp], eax
$LN30@LMBCSFromU:
; Line 982
	cmp	DWORD PTR _bytes_written$[ebp], 0
	jne	SHORT $LN22@LMBCSFromU
	mov	eax, DWORD PTR _extraInfo$[ebp]
	movzx	ecx, BYTE PTR [eax+81]
	test	ecx, ecx
	je	SHORT $LN22@LMBCSFromU
	movzx	eax, BYTE PTR _group$11030[ebp]
	cmp	eax, 128				; 00000080H
	jne	SHORT $LN20@LMBCSFromU
	mov	eax, DWORD PTR _extraInfo$[ebp]
	movzx	ecx, BYTE PTR [eax+81]
	cmp	ecx, 16					; 00000010H
	jl	SHORT $LN21@LMBCSFromU
$LN20@LMBCSFromU:
	movzx	eax, BYTE PTR _group$11030[ebp]
	cmp	eax, 129				; 00000081H
	jne	SHORT $LN19@LMBCSFromU
	mov	eax, DWORD PTR _extraInfo$[ebp]
	movzx	ecx, BYTE PTR [eax+81]
	cmp	ecx, 16					; 00000010H
	jge	SHORT $LN21@LMBCSFromU
$LN19@LMBCSFromU:
	movzx	eax, BYTE PTR _group$11030[ebp]
	cmp	eax, 130				; 00000082H
	jne	SHORT $LN22@LMBCSFromU
$LN21@LMBCSFromU:
; Line 985
	lea	eax, DWORD PTR _groups_tried$[ebp]
	push	eax
	lea	ecx, DWORD PTR _lastConverterIndex$[ebp]
	push	ecx
	lea	edx, DWORD PTR _uniChar$[ebp]
	push	edx
	mov	eax, DWORD PTR _pLMBCS$[ebp]
	push	eax
	mov	ecx, DWORD PTR _extraInfo$[ebp]
	movzx	edx, BYTE PTR [ecx+81]
	push	edx
	mov	eax, DWORD PTR _extraInfo$[ebp]
	push	eax
	call	_LMBCSConversionWorker
	add	esp, 24					; 00000018H
	mov	DWORD PTR _bytes_written$[ebp], eax
$LN22@LMBCSFromU:
; Line 988
	cmp	DWORD PTR _bytes_written$[ebp], 0
	jne	SHORT $LN18@LMBCSFromU
	movzx	eax, BYTE PTR _lastConverterIndex$[ebp]
	test	eax, eax
	je	SHORT $LN18@LMBCSFromU
	movzx	eax, BYTE PTR _group$11030[ebp]
	cmp	eax, 128				; 00000080H
	jne	SHORT $LN16@LMBCSFromU
	movzx	eax, BYTE PTR _lastConverterIndex$[ebp]
	cmp	eax, 16					; 00000010H
	jl	SHORT $LN17@LMBCSFromU
$LN16@LMBCSFromU:
	movzx	eax, BYTE PTR _group$11030[ebp]
	cmp	eax, 129				; 00000081H
	jne	SHORT $LN15@LMBCSFromU
	movzx	eax, BYTE PTR _lastConverterIndex$[ebp]
	cmp	eax, 16					; 00000010H
	jge	SHORT $LN17@LMBCSFromU
$LN15@LMBCSFromU:
	movzx	eax, BYTE PTR _group$11030[ebp]
	cmp	eax, 130				; 00000082H
	jne	SHORT $LN18@LMBCSFromU
$LN17@LMBCSFromU:
; Line 991
	lea	eax, DWORD PTR _groups_tried$[ebp]
	push	eax
	lea	ecx, DWORD PTR _lastConverterIndex$[ebp]
	push	ecx
	lea	edx, DWORD PTR _uniChar$[ebp]
	push	edx
	mov	eax, DWORD PTR _pLMBCS$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _lastConverterIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _extraInfo$[ebp]
	push	edx
	call	_LMBCSConversionWorker
	add	esp, 24					; 00000018H
	mov	DWORD PTR _bytes_written$[ebp], eax
$LN18@LMBCSFromU:
; Line 993
	cmp	DWORD PTR _bytes_written$[ebp], 0
	jne	$LN14@LMBCSFromU
; Line 1001
	movzx	eax, BYTE PTR _group$11030[ebp]
	sub	eax, 129				; 00000081H
	neg	eax
	sbb	eax, eax
	and	eax, -15				; fffffff1H
	add	eax, 16					; 00000010H
	mov	BYTE PTR _grp_start$11064[ebp], al
; Line 1004
	movzx	eax, BYTE PTR _group$11030[ebp]
	xor	ecx, ecx
	cmp	eax, 129				; 00000081H
	sete	cl
	lea	ecx, DWORD PTR [ecx*8+11]
	mov	BYTE PTR _grp_end$11065[ebp], cl
; Line 1005
	movzx	eax, BYTE PTR _group$11030[ebp]
	cmp	eax, 130				; 00000082H
	jne	SHORT $LN13@LMBCSFromU
; Line 1007
	mov	BYTE PTR _grp_start$11064[ebp], 1
; Line 1008
	mov	BYTE PTR _grp_end$11065[ebp], 19	; 00000013H
$LN13@LMBCSFromU:
; Line 1012
	mov	al, BYTE PTR _grp_start$11064[ebp]
	mov	BYTE PTR _grp_ix$11066[ebp], al
	jmp	SHORT $LN12@LMBCSFromU
$LN11@LMBCSFromU:
	mov	al, BYTE PTR _grp_ix$11066[ebp]
	add	al, 1
	mov	BYTE PTR _grp_ix$11066[ebp], al
$LN12@LMBCSFromU:
	movzx	eax, BYTE PTR _grp_ix$11066[ebp]
	movzx	ecx, BYTE PTR _grp_end$11065[ebp]
	cmp	eax, ecx
	jg	SHORT $LN10@LMBCSFromU
	cmp	DWORD PTR _bytes_written$[ebp], 0
	jne	SHORT $LN10@LMBCSFromU
; Line 1014
	movzx	eax, BYTE PTR _grp_ix$11066[ebp]
	mov	ecx, DWORD PTR _extraInfo$[ebp]
	cmp	DWORD PTR [ecx+eax*4], 0
	je	SHORT $LN9@LMBCSFromU
	movzx	eax, BYTE PTR _grp_ix$11066[ebp]
	movsx	ecx, BYTE PTR _groups_tried$[ebp+eax]
	test	ecx, ecx
	jne	SHORT $LN9@LMBCSFromU
; Line 1018
	lea	eax, DWORD PTR _groups_tried$[ebp]
	push	eax
	lea	ecx, DWORD PTR _lastConverterIndex$[ebp]
	push	ecx
	lea	edx, DWORD PTR _uniChar$[ebp]
	push	edx
	mov	eax, DWORD PTR _pLMBCS$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _grp_ix$11066[ebp]
	push	ecx
	mov	edx, DWORD PTR _extraInfo$[ebp]
	push	edx
	call	_LMBCSConversionWorker
	add	esp, 24					; 00000018H
	mov	DWORD PTR _bytes_written$[ebp], eax
$LN9@LMBCSFromU:
; Line 1020
	jmp	SHORT $LN11@LMBCSFromU
$LN10@LMBCSFromU:
; Line 1023
	cmp	DWORD PTR _bytes_written$[ebp], 0
	jne	SHORT $LN14@LMBCSFromU
	movzx	eax, BYTE PTR _grp_start$11064[ebp]
	cmp	eax, 1
	jne	SHORT $LN14@LMBCSFromU
; Line 1027
	lea	eax, DWORD PTR _groups_tried$[ebp]
	push	eax
	lea	ecx, DWORD PTR _lastConverterIndex$[ebp]
	push	ecx
	lea	edx, DWORD PTR _uniChar$[ebp]
	push	edx
	mov	eax, DWORD PTR _pLMBCS$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _extraInfo$[ebp]
	push	ecx
	call	_LMBCSConversionWorker
	add	esp, 24					; 00000018H
	mov	DWORD PTR _bytes_written$[ebp], eax
$LN14@LMBCSFromU:
; Line 1031
	cmp	DWORD PTR _bytes_written$[ebp], 0
	jne	SHORT $LN40@LMBCSFromU
; Line 1034
	movzx	eax, WORD PTR _uniChar$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pLMBCS$[ebp]
	push	ecx
	call	_LMBCSConvertUni
	add	esp, 8
	add	eax, DWORD PTR _pLMBCS$[ebp]
	mov	DWORD PTR _pLMBCS$[ebp], eax
; Line 1035
	mov	eax, DWORD PTR _pLMBCS$[ebp]
	lea	ecx, DWORD PTR _LMBCS$[ebp]
	sub	eax, ecx
	mov	DWORD PTR _bytes_written$[ebp], eax
$LN40@LMBCSFromU:
; Line 1041
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 2
	mov	edx, DWORD PTR _args$[ebp]
	mov	DWORD PTR [edx+8], ecx
; Line 1042
	lea	eax, DWORD PTR _LMBCS$[ebp]
	mov	DWORD PTR _pLMBCS$[ebp], eax
$LN6@LMBCSFromU:
; Line 1043
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [eax+16]
	cmp	edx, DWORD PTR [ecx+20]
	jae	SHORT $LN5@LMBCSFromU
	mov	eax, DWORD PTR _bytes_written$[ebp]
	mov	DWORD PTR tv335[ebp], eax
	mov	ecx, DWORD PTR _bytes_written$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _bytes_written$[ebp], ecx
	cmp	DWORD PTR tv335[ebp], 0
	je	SHORT $LN5@LMBCSFromU
; Line 1045
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _pLMBCS$[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR [ecx], al
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	add	edx, 1
	mov	eax, DWORD PTR _args$[ebp]
	mov	DWORD PTR [eax+16], edx
	mov	ecx, DWORD PTR _pLMBCS$[ebp]
	add	ecx, 1
	mov	DWORD PTR _pLMBCS$[ebp], ecx
; Line 1046
	mov	eax, DWORD PTR _args$[ebp]
	cmp	DWORD PTR [eax+24], 0
	je	SHORT $LN4@LMBCSFromU
; Line 1048
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR _sourceIndex$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	add	ecx, 4
	mov	edx, DWORD PTR _args$[ebp]
	mov	DWORD PTR [edx+24], ecx
$LN4@LMBCSFromU:
; Line 1050
	jmp	SHORT $LN6@LMBCSFromU
$LN5@LMBCSFromU:
; Line 1051
	mov	eax, DWORD PTR _sourceIndex$[ebp]
	add	eax, 1
	mov	DWORD PTR _sourceIndex$[ebp], eax
; Line 1052
	cmp	DWORD PTR _bytes_written$[ebp], 0
	jle	SHORT $LN3@LMBCSFromU
; Line 1058
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 76					; 0000004cH
	mov	DWORD PTR _pErrorBuffer$11084[ebp], ecx
; Line 1059
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
; Line 1060
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	dl, BYTE PTR _bytes_written$[ebp]
	mov	BYTE PTR [ecx+63], dl
$LN2@LMBCSFromU:
; Line 1061
	mov	eax, DWORD PTR _bytes_written$[ebp]
	mov	DWORD PTR tv357[ebp], eax
	mov	ecx, DWORD PTR _bytes_written$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _bytes_written$[ebp], ecx
	cmp	DWORD PTR tv357[ebp], 0
	je	SHORT $LN3@LMBCSFromU
; Line 1063
	mov	eax, DWORD PTR _pErrorBuffer$11084[ebp]
	mov	ecx, DWORD PTR _pLMBCS$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl
	mov	eax, DWORD PTR _pErrorBuffer$11084[ebp]
	add	eax, 1
	mov	DWORD PTR _pErrorBuffer$11084[ebp], eax
	mov	ecx, DWORD PTR _pLMBCS$[ebp]
	add	ecx, 1
	mov	DWORD PTR _pLMBCS$[ebp], ecx
; Line 1064
	jmp	SHORT $LN2@LMBCSFromU
$LN3@LMBCSFromU:
; Line 1067
	mov	eax, DWORD PTR _extraInfo$[ebp]
	mov	cl, BYTE PTR _OldConverterIndex$[ebp]
	mov	BYTE PTR [eax+81], cl
; Line 1068
	jmp	$LN47@LMBCSFromU
$LN48@LMBCSFromU:
; Line 1069
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN55@LMBCSFromU
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 384				; 00000180H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN55@LMBCSFromU:
	DD	4
	DD	$LN54@LMBCSFromU
$LN54@LMBCSFromU:
	DD	-9					; fffffff7H
	DD	1
	DD	$LN50@LMBCSFromU
	DD	-24					; ffffffe8H
	DD	2
	DD	$LN51@LMBCSFromU
	DD	-36					; ffffffdcH
	DD	3
	DD	$LN52@LMBCSFromU
	DD	-88					; ffffffa8H
	DD	20					; 00000014H
	DD	$LN53@LMBCSFromU
$LN53@LMBCSFromU:
	DB	103					; 00000067H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	112					; 00000070H
	DB	115					; 00000073H
	DB	95					; 0000005fH
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	105					; 00000069H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	0
$LN52@LMBCSFromU:
	DB	76					; 0000004cH
	DB	77					; 0000004dH
	DB	66					; 00000042H
	DB	67					; 00000043H
	DB	83					; 00000053H
	DB	0
$LN51@LMBCSFromU:
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	105					; 00000069H
	DB	67					; 00000043H
	DB	104					; 00000068H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	0
$LN50@LMBCSFromU:
	DB	108					; 0000006cH
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	67					; 00000043H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	118					; 00000076H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	0
__LMBCSFromUnicode ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _FindLMBCSUniRange
_TEXT	SEGMENT
_pTable$ = -8						; size = 4
_uniChar$ = 8						; size = 2
_FindLMBCSUniRange PROC					; COMDAT
; Line 447
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 448
	mov	DWORD PTR _pTable$[ebp], OFFSET _UniLMBCSGrpMap
$LN3@FindLMBCSU:
; Line 450
	movzx	eax, WORD PTR _uniChar$[ebp]
	mov	ecx, DWORD PTR _pTable$[ebp]
	movzx	edx, WORD PTR [ecx+2]
	cmp	eax, edx
	jle	SHORT $LN2@FindLMBCSU
; Line 452
	mov	eax, DWORD PTR _pTable$[ebp]
	add	eax, 6
	mov	DWORD PTR _pTable$[ebp], eax
; Line 453
	jmp	SHORT $LN3@FindLMBCSU
$LN2@FindLMBCSU:
; Line 455
	movzx	eax, WORD PTR _uniChar$[ebp]
	mov	ecx, DWORD PTR _pTable$[ebp]
	movzx	edx, WORD PTR [ecx]
	cmp	eax, edx
	jl	SHORT $LN1@FindLMBCSU
; Line 457
	mov	eax, DWORD PTR _pTable$[ebp]
	mov	al, BYTE PTR [eax+4]
	jmp	SHORT $LN4@FindLMBCSU
$LN1@FindLMBCSU:
; Line 459
	mov	al, 20					; 00000014H
$LN4@FindLMBCSU:
; Line 460
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_FindLMBCSUniRange ENDP
_TEXT	ENDS
PUBLIC	??_C@_1HM@JBBJNMGH@?$AA?$CI?$AAf?$AAi?$AAr?$AAs?$AAt?$AAB?$AAy?$AAt?$AAe?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA0?$AAx?$AA1?$AAF?$AA?$CJ?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AA?$CI?$AAf?$AAi?$AAr?$AAs?$AAt?$AAB?$AAy?$AAt@ ; `string'
PUBLIC	??_C@_1BG@JNDMJFPL@?$AAg?$AAr?$AAo?$AAu?$AAp?$AA?$DM?$AA0?$AAx?$AA1?$AA4?$AA?$AA@ ; `string'
PUBLIC	??_C@_19NLCFGENH@?$AAx?$AAc?$AAn?$AAv?$AA?$AA@	; `string'
PUBLIC	??_C@_1FK@MKAMAJGB@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@ ; `string'
PUBLIC	?__LINE__Var@?1??LMBCSConversionWorker@@9@9@addd29c7 ; `LMBCSConversionWorker'::`2'::__LINE__Var
EXTRN	_ucnv_MBCSFromUChar32_56:PROC
EXTRN	__imp___wassert:PROC
;	COMDAT ??_C@_1HM@JBBJNMGH@?$AA?$CI?$AAf?$AAi?$AAr?$AAs?$AAt?$AAB?$AAy?$AAt?$AAe?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA0?$AAx?$AA1?$AAF?$AA?$CJ?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AA?$CI?$AAf?$AAi?$AAr?$AAs?$AAt?$AAB?$AAy?$AAt@
CONST	SEGMENT
??_C@_1HM@JBBJNMGH@?$AA?$CI?$AAf?$AAi?$AAr?$AAs?$AAt?$AAB?$AAy?$AAt?$AAe?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA0?$AAx?$AA1?$AAF?$AA?$CJ?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AA?$CI?$AAf?$AAi?$AAr?$AAs?$AAt?$AAB?$AAy?$AAt@ DB '('
	DB	00H, 'f', 00H, 'i', 00H, 'r', 00H, 's', 00H, 't', 00H, 'B', 00H
	DB	'y', 00H, 't', 00H, 'e', 00H, ' ', 00H, '<', 00H, '=', 00H, ' '
	DB	00H, '0', 00H, 'x', 00H, '1', 00H, 'F', 00H, ')', 00H, ' ', 00H
	DB	'|', 00H, '|', 00H, ' ', 00H, '(', 00H, 'f', 00H, 'i', 00H, 'r'
	DB	00H, 's', 00H, 't', 00H, 'B', 00H, 'y', 00H, 't', 00H, 'e', 00H
	DB	' ', 00H, '>', 00H, '=', 00H, ' ', 00H, '0', 00H, 'x', 00H, '8'
	DB	00H, '0', 00H, ')', 00H, ' ', 00H, '|', 00H, '|', 00H, ' ', 00H
	DB	'(', 00H, 'g', 00H, 'r', 00H, 'o', 00H, 'u', 00H, 'p', 00H, ' '
	DB	00H, '=', 00H, '=', 00H, ' ', 00H, '0', 00H, 'x', 00H, '0', 00H
	DB	'0', 00H, ')', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1BG@JNDMJFPL@?$AAg?$AAr?$AAo?$AAu?$AAp?$AA?$DM?$AA0?$AAx?$AA1?$AA4?$AA?$AA@
CONST	SEGMENT
??_C@_1BG@JNDMJFPL@?$AAg?$AAr?$AAo?$AAu?$AAp?$AA?$DM?$AA0?$AAx?$AA1?$AA4?$AA?$AA@ DB 'g'
	DB	00H, 'r', 00H, 'o', 00H, 'u', 00H, 'p', 00H, '<', 00H, '0', 00H
	DB	'x', 00H, '1', 00H, '4', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_19NLCFGENH@?$AAx?$AAc?$AAn?$AAv?$AA?$AA@
CONST	SEGMENT
??_C@_19NLCFGENH@?$AAx?$AAc?$AAn?$AAv?$AA?$AA@ DB 'x', 00H, 'c', 00H, 'n', 00H
	DB	'v', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1FK@MKAMAJGB@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@
CONST	SEGMENT
??_C@_1FK@MKAMAJGB@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@ DB 'd'
	DB	00H, ':', 00H, '\', 00H, 'm', 00H, 'o', 00H, 'z', 00H, 'i', 00H
	DB	'l', 00H, 'l', 00H, 'a', 00H, '\', 00H, 'i', 00H, 'n', 00H, 't'
	DB	00H, 'l', 00H, '\', 00H, 'i', 00H, 'c', 00H, 'u', 00H, '\', 00H
	DB	's', 00H, 'o', 00H, 'u', 00H, 'r', 00H, 'c', 00H, 'e', 00H, '\'
	DB	00H, 'c', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'o', 00H, 'n', 00H
	DB	'\', 00H, 'u', 00H, 'c', 00H, 'n', 00H, 'v', 00H, '_', 00H, 'l'
	DB	00H, 'm', 00H, 'b', 00H, '.', 00H, 'c', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??LMBCSConversionWorker@@9@9@addd29c7
_DATA	SEGMENT
?__LINE__Var@?1??LMBCSConversionWorker@@9@9@addd29c7 DD 02ebH ; `LMBCSConversionWorker'::`2'::__LINE__Var
; Function compile flags: /Odtp /RTCsu /ZI
_DATA	ENDS
;	COMDAT _LMBCSConversionWorker
_TEXT	SEGMENT
tv150 = -256						; size = 4
_firstByte$ = -53					; size = 1
_value$ = -44						; size = 4
_bytesConverted$ = -32					; size = 4
_xcnv$ = -20						; size = 4
_pLMBCS$ = -8						; size = 4
_extraInfo$ = 8						; size = 4
_group$ = 12						; size = 1
_pStartLMBCS$ = 16					; size = 4
_pUniChar$ = 20						; size = 4
_lastConverterIndex$ = 24				; size = 4
_groups_tried$ = 28					; size = 4
_LMBCSConversionWorker PROC				; COMDAT
; Line 747
	push	ebp
	mov	ebp, esp
	sub	esp, 256				; 00000100H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-256]
	mov	ecx, 64					; 00000040H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 748
	mov	eax, DWORD PTR _pStartLMBCS$[ebp]
	mov	DWORD PTR _pLMBCS$[ebp], eax
; Line 749
	movzx	eax, BYTE PTR _group$[ebp]
	mov	ecx, DWORD PTR _extraInfo$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _xcnv$[ebp], edx
; Line 755
	cmp	DWORD PTR _xcnv$[ebp], 0
	jne	SHORT $LN15@LMBCSConve
	mov	eax, DWORD PTR ?__LINE__Var@?1??LMBCSConversionWorker@@9@9@addd29c7
	add	eax, 8
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1FK@MKAMAJGB@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@
	push	OFFSET ??_C@_19NLCFGENH@?$AAx?$AAc?$AAn?$AAv?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN15@LMBCSConve:
; Line 756
	movzx	eax, BYTE PTR _group$[ebp]
	cmp	eax, 20					; 00000014H
	jl	SHORT $LN16@LMBCSConve
	mov	ecx, DWORD PTR ?__LINE__Var@?1??LMBCSConversionWorker@@9@9@addd29c7
	add	ecx, 9
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_1FK@MKAMAJGB@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@
	push	OFFSET ??_C@_1BG@JNDMJFPL@?$AAg?$AAr?$AAo?$AAu?$AAp?$AA?$DM?$AA0?$AAx?$AA1?$AA4?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN16@LMBCSConve:
; Line 758
	push	0
	lea	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pUniChar$[ebp]
	movzx	edx, WORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _xcnv$[ebp]
	push	eax
	call	_ucnv_MBCSFromUChar32_56
	add	esp, 16					; 00000010H
	mov	DWORD PTR _bytesConverted$[ebp], eax
; Line 761
	cmp	DWORD PTR _bytesConverted$[ebp], 0
	jle	SHORT $LN12@LMBCSConve
; Line 762
	mov	eax, DWORD PTR _bytesConverted$[ebp]
	lea	ecx, DWORD PTR [eax*8-8]
	mov	edx, DWORD PTR _value$[ebp]
	shr	edx, cl
	mov	BYTE PTR _firstByte$[ebp], dl
; Line 763
	jmp	SHORT $LN11@LMBCSConve
$LN12@LMBCSConve:
; Line 765
	movzx	eax, BYTE PTR _group$[ebp]
	mov	ecx, DWORD PTR _groups_tried$[ebp]
	mov	BYTE PTR [ecx+eax], 1
; Line 766
	xor	eax, eax
	jmp	$LN13@LMBCSConve
$LN11@LMBCSConve:
; Line 769
	mov	eax, DWORD PTR _lastConverterIndex$[ebp]
	mov	cl, BYTE PTR _group$[ebp]
	mov	BYTE PTR [eax], cl
; Line 774
	movzx	eax, BYTE PTR _firstByte$[ebp]
	cmp	eax, 31					; 0000001fH
	jle	SHORT $LN17@LMBCSConve
	movzx	ecx, BYTE PTR _firstByte$[ebp]
	cmp	ecx, 128				; 00000080H
	jge	SHORT $LN17@LMBCSConve
	movzx	edx, BYTE PTR _group$[ebp]
	test	edx, edx
	je	SHORT $LN17@LMBCSConve
	mov	eax, DWORD PTR ?__LINE__Var@?1??LMBCSConversionWorker@@9@9@addd29c7
	add	eax, 27					; 0000001bH
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1FK@MKAMAJGB@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@
	push	OFFSET ??_C@_1HM@JBBJNMGH@?$AA?$CI?$AAf?$AAi?$AAr?$AAs?$AAt?$AAB?$AAy?$AAt?$AAe?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA0?$AAx?$AA1?$AAF?$AA?$CJ?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AA?$CI?$AAf?$AAi?$AAr?$AAs?$AAt?$AAB?$AAy?$AAt@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN17@LMBCSConve:
; Line 777
	movzx	eax, BYTE PTR _group$[ebp]
	test	eax, eax
	je	SHORT $LN10@LMBCSConve
	mov	eax, DWORD PTR _extraInfo$[ebp]
	movzx	ecx, BYTE PTR [eax+80]
	movzx	edx, BYTE PTR _group$[ebp]
	cmp	ecx, edx
	je	SHORT $LN10@LMBCSConve
; Line 779
	mov	eax, DWORD PTR _pLMBCS$[ebp]
	mov	cl, BYTE PTR _group$[ebp]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _pLMBCS$[ebp]
	add	edx, 1
	mov	DWORD PTR _pLMBCS$[ebp], edx
; Line 780
	cmp	DWORD PTR _bytesConverted$[ebp], 1
	jne	SHORT $LN10@LMBCSConve
	movzx	eax, BYTE PTR _group$[ebp]
	cmp	eax, 16					; 00000010H
	jl	SHORT $LN10@LMBCSConve
; Line 782
	mov	eax, DWORD PTR _pLMBCS$[ebp]
	mov	cl, BYTE PTR _group$[ebp]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _pLMBCS$[ebp]
	add	edx, 1
	mov	DWORD PTR _pLMBCS$[ebp], edx
$LN10@LMBCSConve:
; Line 787
	cmp	DWORD PTR _bytesConverted$[ebp], 1
	jne	SHORT $LN8@LMBCSConve
	movzx	eax, BYTE PTR _firstByte$[ebp]
	cmp	eax, 32					; 00000020H
	jge	SHORT $LN8@LMBCSConve
; Line 788
	xor	eax, eax
	jmp	$LN13@LMBCSConve
$LN8@LMBCSConve:
; Line 792
	mov	eax, DWORD PTR _bytesConverted$[ebp]
	mov	DWORD PTR tv150[ebp], eax
	mov	ecx, DWORD PTR tv150[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv150[ebp], ecx
	cmp	DWORD PTR tv150[ebp], 3
	ja	SHORT $LN6@LMBCSConve
	mov	edx, DWORD PTR tv150[ebp]
	jmp	DWORD PTR $LN21@LMBCSConve[edx*4]
$LN5@LMBCSConve:
; Line 795
	mov	eax, DWORD PTR _value$[ebp]
	shr	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _pLMBCS$[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _pLMBCS$[ebp]
	add	edx, 1
	mov	DWORD PTR _pLMBCS$[ebp], edx
$LN4@LMBCSConve:
; Line 797
	mov	eax, DWORD PTR _value$[ebp]
	shr	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _pLMBCS$[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _pLMBCS$[ebp]
	add	edx, 1
	mov	DWORD PTR _pLMBCS$[ebp], edx
$LN3@LMBCSConve:
; Line 799
	mov	eax, DWORD PTR _value$[ebp]
	shr	eax, 8
	mov	ecx, DWORD PTR _pLMBCS$[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _pLMBCS$[ebp]
	add	edx, 1
	mov	DWORD PTR _pLMBCS$[ebp], edx
$LN2@LMBCSConve:
; Line 801
	mov	eax, DWORD PTR _pLMBCS$[ebp]
	mov	cl, BYTE PTR _value$[ebp]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _pLMBCS$[ebp]
	add	edx, 1
	mov	DWORD PTR _pLMBCS$[ebp], edx
$LN6@LMBCSConve:
; Line 807
	mov	eax, DWORD PTR _pLMBCS$[ebp]
	sub	eax, DWORD PTR _pStartLMBCS$[ebp]
$LN13@LMBCSConve:
; Line 808
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN20@LMBCSConve
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 256				; 00000100H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN20@LMBCSConve:
	DD	1
	DD	$LN19@LMBCSConve
$LN19@LMBCSConve:
	DD	-44					; ffffffd4H
	DD	4
	DD	$LN18@LMBCSConve
$LN18@LMBCSConve:
	DB	118					; 00000076H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	117					; 00000075H
	DB	101					; 00000065H
	DB	0
	npad	2
$LN21@LMBCSConve:
	DD	$LN2@LMBCSConve
	DD	$LN3@LMBCSConve
	DD	$LN4@LMBCSConve
	DD	$LN5@LMBCSConve
_LMBCSConversionWorker ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _LMBCSConvertUni
_TEXT	SEGMENT
_HighCh$ = -17						; size = 1
_LowCh$ = -5						; size = 1
_pLMBCS$ = 8						; size = 4
_uniChar$ = 12						; size = 2
_LMBCSConvertUni PROC					; COMDAT
; Line 816
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 818
	movzx	eax, WORD PTR _uniChar$[ebp]
	and	eax, 255				; 000000ffH
	mov	BYTE PTR _LowCh$[ebp], al
; Line 819
	movzx	eax, WORD PTR _uniChar$[ebp]
	sar	eax, 8
	mov	BYTE PTR _HighCh$[ebp], al
; Line 821
	mov	eax, DWORD PTR _pLMBCS$[ebp]
	mov	BYTE PTR [eax], 20			; 00000014H
	mov	ecx, DWORD PTR _pLMBCS$[ebp]
	add	ecx, 1
	mov	DWORD PTR _pLMBCS$[ebp], ecx
; Line 823
	movzx	eax, BYTE PTR _LowCh$[ebp]
	test	eax, eax
	jne	SHORT $LN2@LMBCSConve@2
; Line 825
	mov	eax, DWORD PTR _pLMBCS$[ebp]
	mov	BYTE PTR [eax], 246			; 000000f6H
	mov	ecx, DWORD PTR _pLMBCS$[ebp]
	add	ecx, 1
	mov	DWORD PTR _pLMBCS$[ebp], ecx
; Line 826
	mov	eax, DWORD PTR _pLMBCS$[ebp]
	mov	cl, BYTE PTR _HighCh$[ebp]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _pLMBCS$[ebp]
	add	edx, 1
	mov	DWORD PTR _pLMBCS$[ebp], edx
; Line 828
	jmp	SHORT $LN1@LMBCSConve@2
$LN2@LMBCSConve@2:
; Line 830
	mov	eax, DWORD PTR _pLMBCS$[ebp]
	mov	cl, BYTE PTR _HighCh$[ebp]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _pLMBCS$[ebp]
	add	edx, 1
	mov	DWORD PTR _pLMBCS$[ebp], edx
; Line 831
	mov	eax, DWORD PTR _pLMBCS$[ebp]
	mov	cl, BYTE PTR _LowCh$[ebp]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _pLMBCS$[ebp]
	add	edx, 1
	mov	DWORD PTR _pLMBCS$[ebp], edx
$LN1@LMBCSConve@2:
; Line 833
	mov	eax, 3
; Line 834
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_LMBCSConvertUni ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __LMBCSToUnicodeWithOffsets
_TEXT	SEGMENT
tv85 = -328						; size = 4
_size_new$11174 = -128					; size = 4
_size_new_maybe_2$11173 = -116				; size = 4
_size_new_maybe_1$11172 = -104				; size = 4
_size_old$11171 = -92					; size = 4
_saveSourceLimit$11170 = -80				; size = 4
_savebytes$ = -65					; size = 1
_errSource$ = -56					; size = 4
_pStartLMBCS$ = -44					; size = 4
_saveSource$ = -32					; size = 4
_uniChar$ = -20						; size = 2
_LMBCS$ = -8						; size = 3
_args$ = 8						; size = 4
_err$ = 12						; size = 4
__LMBCSToUnicodeWithOffsets PROC			; COMDAT
; Line 1251
	push	ebp
	mov	ebp, esp
	sub	esp, 328				; 00000148H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-328]
	mov	ecx, 82					; 00000052H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1255
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _pStartLMBCS$[ebp], ecx
; Line 1256
	mov	DWORD PTR _errSource$[ebp], 0
; Line 1257
	mov	BYTE PTR _savebytes$[ebp], 0
$LN17@LMBCSToUni:
; Line 1260
	mov	eax, DWORD PTR _err$[ebp]
	cmp	DWORD PTR [eax], 0
	jg	$LN16@LMBCSToUni
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [eax+12]
	cmp	edx, DWORD PTR [ecx+8]
	jbe	$LN16@LMBCSToUni
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [eax+20]
	cmp	edx, DWORD PTR [ecx+16]
	jbe	$LN16@LMBCSToUni
; Line 1262
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _saveSource$[ebp], ecx
; Line 1264
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	movsx	edx, BYTE PTR [ecx+36]
	test	edx, edx
	je	$LN15@LMBCSToUni
; Line 1267
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	movsx	edx, BYTE PTR [ecx+36]
	mov	DWORD PTR _size_old$11171[ebp], edx
; Line 1270
	mov	eax, 3
	sub	eax, DWORD PTR _size_old$11171[ebp]
	mov	DWORD PTR _size_new_maybe_1$11172[ebp], eax
; Line 1271
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [eax+12]
	sub	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _size_new_maybe_2$11173[ebp], edx
; Line 1272
	mov	eax, DWORD PTR _size_new_maybe_1$11172[ebp]
	cmp	eax, DWORD PTR _size_new_maybe_2$11173[ebp]
	jae	SHORT $LN20@LMBCSToUni
	mov	ecx, DWORD PTR _size_new_maybe_1$11172[ebp]
	mov	DWORD PTR tv85[ebp], ecx
	jmp	SHORT $LN21@LMBCSToUni
$LN20@LMBCSToUni:
	mov	edx, DWORD PTR _size_new_maybe_2$11173[ebp]
	mov	DWORD PTR tv85[ebp], edx
$LN21@LMBCSToUni:
	mov	eax, DWORD PTR tv85[ebp]
	mov	DWORD PTR _size_new$11174[ebp], eax
; Line 1275
	push	1
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 37					; 00000025H
	push	ecx
	call	_uprv_checkValidMemory
	add	esp, 8
	mov	edx, DWORD PTR _size_old$11171[ebp]
	push	edx
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 37					; 00000025H
	push	ecx
	lea	edx, DWORD PTR _LMBCS$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 1276
	push	1
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_uprv_checkValidMemory
	add	esp, 8
	mov	edx, DWORD PTR _size_new$11174[ebp]
	push	edx
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _size_old$11171[ebp]
	lea	eax, DWORD PTR _LMBCS$[ebp+edx]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 1277
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _saveSourceLimit$11170[ebp], ecx
; Line 1278
	lea	eax, DWORD PTR _LMBCS$[ebp]
	mov	DWORD PTR _errSource$[ebp], eax
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR _errSource$[ebp]
	mov	DWORD PTR [ecx+8], edx
; Line 1279
	mov	eax, DWORD PTR _size_old$11171[ebp]
	lea	ecx, DWORD PTR _LMBCS$[ebp+eax]
	add	ecx, DWORD PTR _size_new$11174[ebp]
	mov	edx, DWORD PTR _args$[ebp]
	mov	DWORD PTR [edx+12], ecx
; Line 1280
	mov	eax, DWORD PTR _size_old$11171[ebp]
	add	eax, DWORD PTR _size_new$11174[ebp]
	mov	BYTE PTR _savebytes$[ebp], al
; Line 1281
	mov	eax, DWORD PTR _err$[ebp]
	push	eax
	mov	ecx, DWORD PTR _args$[ebp]
	push	ecx
	call	__LMBCSGetNextUCharWorker
	add	esp, 8
	mov	WORD PTR _uniChar$[ebp], ax
; Line 1282
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	lea	edx, DWORD PTR _LMBCS$[ebp]
	sub	ecx, edx
	sub	ecx, DWORD PTR _size_old$11171[ebp]
	add	ecx, DWORD PTR _saveSource$[ebp]
	mov	eax, DWORD PTR _args$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 1283
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _saveSourceLimit$11170[ebp]
	mov	DWORD PTR [eax+12], ecx
; Line 1285
	mov	eax, DWORD PTR _err$[ebp]
	cmp	DWORD PTR [eax], 11			; 0000000bH
	jne	SHORT $LN14@LMBCSToUni
; Line 1288
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	dl, BYTE PTR _savebytes$[ebp]
	mov	BYTE PTR [ecx+36], dl
; Line 1289
	push	1
	lea	eax, DWORD PTR _LMBCS$[ebp]
	push	eax
	call	_uprv_checkValidMemory
	add	esp, 8
	movsx	ecx, BYTE PTR _savebytes$[ebp]
	push	ecx
	lea	edx, DWORD PTR _LMBCS$[ebp]
	push	edx
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 37					; 00000025H
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 1290
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+8], edx
; Line 1291
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 0
; Line 1292
	jmp	$LN18@LMBCSToUni
; Line 1294
	jmp	SHORT $LN13@LMBCSToUni
$LN14@LMBCSToUni:
; Line 1297
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx+36], 0
$LN13@LMBCSToUni:
; Line 1300
	jmp	SHORT $LN12@LMBCSToUni
$LN15@LMBCSToUni:
; Line 1302
	mov	eax, DWORD PTR _saveSource$[ebp]
	mov	DWORD PTR _errSource$[ebp], eax
; Line 1303
	mov	eax, DWORD PTR _err$[ebp]
	push	eax
	mov	ecx, DWORD PTR _args$[ebp]
	push	ecx
	call	__LMBCSGetNextUCharWorker
	add	esp, 8
	mov	WORD PTR _uniChar$[ebp], ax
; Line 1304
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	sub	ecx, DWORD PTR _saveSource$[ebp]
	mov	BYTE PTR _savebytes$[ebp], cl
$LN12@LMBCSToUni:
; Line 1306
	mov	eax, DWORD PTR _err$[ebp]
	cmp	DWORD PTR [eax], 0
	jg	SHORT $LN11@LMBCSToUni
; Line 1308
	movzx	eax, WORD PTR _uniChar$[ebp]
	cmp	eax, 65534				; 0000fffeH
	jge	SHORT $LN10@LMBCSToUni
; Line 1310
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	dx, WORD PTR _uniChar$[ebp]
	mov	WORD PTR [ecx], dx
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	add	ecx, 2
	mov	edx, DWORD PTR _args$[ebp]
	mov	DWORD PTR [edx+16], ecx
; Line 1311
	mov	eax, DWORD PTR _args$[ebp]
	cmp	DWORD PTR [eax+24], 0
	je	SHORT $LN9@LMBCSToUni
; Line 1313
	mov	eax, DWORD PTR _saveSource$[ebp]
	sub	eax, DWORD PTR _pStartLMBCS$[ebp]
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	add	ecx, 4
	mov	edx, DWORD PTR _args$[ebp]
	mov	DWORD PTR [edx+24], ecx
$LN9@LMBCSToUni:
; Line 1314
	jmp	SHORT $LN11@LMBCSToUni
$LN10@LMBCSToUni:
; Line 1316
	movzx	eax, WORD PTR _uniChar$[ebp]
	cmp	eax, 65534				; 0000fffeH
	jne	SHORT $LN7@LMBCSToUni
; Line 1318
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 10			; 0000000aH
; Line 1320
	jmp	SHORT $LN11@LMBCSToUni
$LN7@LMBCSToUni:
; Line 1322
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 12			; 0000000cH
$LN11@LMBCSToUni:
; Line 1325
	jmp	$LN17@LMBCSToUni
$LN16@LMBCSToUni:
; Line 1327
	mov	eax, DWORD PTR _err$[ebp]
	cmp	DWORD PTR [eax], 0
	jg	SHORT $LN5@LMBCSToUni
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [eax+12]
	cmp	edx, DWORD PTR [ecx+8]
	jbe	SHORT $LN5@LMBCSToUni
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [eax+20]
	cmp	edx, DWORD PTR [ecx+16]
	ja	SHORT $LN5@LMBCSToUni
; Line 1329
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
	jmp	SHORT $LN18@LMBCSToUni
$LN5@LMBCSToUni:
; Line 1331
	mov	eax, DWORD PTR _err$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN18@LMBCSToUni
; Line 1334
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	dl, BYTE PTR _savebytes$[ebp]
	mov	BYTE PTR [ecx+36], dl
; Line 1335
	movsx	eax, BYTE PTR _savebytes$[ebp]
	test	eax, eax
	jle	SHORT $LN2@LMBCSToUni
; Line 1336
	push	1
	mov	eax, DWORD PTR _errSource$[ebp]
	push	eax
	call	_uprv_checkValidMemory
	add	esp, 8
	movsx	ecx, BYTE PTR _savebytes$[ebp]
	push	ecx
	mov	edx, DWORD PTR _errSource$[ebp]
	push	edx
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 37					; 00000025H
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN2@LMBCSToUni:
; Line 1338
	mov	eax, DWORD PTR _err$[ebp]
	cmp	DWORD PTR [eax], 11			; 0000000bH
	jne	SHORT $LN18@LMBCSToUni
; Line 1339
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 0
$LN18@LMBCSToUni:
; Line 1342
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN24@LMBCSToUni
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 328				; 00000148H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN24@LMBCSToUni:
	DD	1
	DD	$LN23@LMBCSToUni
$LN23@LMBCSToUni:
	DD	-8					; fffffff8H
	DD	3
	DD	$LN22@LMBCSToUni
$LN22@LMBCSToUni:
	DB	76					; 0000004cH
	DB	77					; 0000004dH
	DB	66					; 00000042H
	DB	67					; 00000043H
	DB	83					; 00000053H
	DB	0
__LMBCSToUnicodeWithOffsets ENDP
_TEXT	ENDS
EXTRN	_ucnv_MBCSIsLeadByte_56:PROC
EXTRN	_ucnv_MBCSSimpleGetNextUChar_56:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __LMBCSGetNextUCharWorker
_TEXT	SEGMENT
tv137 = -280						; size = 4
_bytes$11139 = -80					; size = 2
_C0C1byte$11116 = -65					; size = 1
_cnv$11114 = -56					; size = 4
_group$11113 = -41					; size = 1
_extraInfo$11112 = -32					; size = 4
_CurByte$ = -17						; size = 1
_uniChar$ = -8						; size = 4
_args$ = 8						; size = 4
_err$ = 12						; size = 4
__LMBCSGetNextUCharWorker PROC				; COMDAT
; Line 1109
	push	ebp
	mov	ebp, esp
	sub	esp, 280				; 00000118H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-280]
	mov	ecx, 70					; 00000046H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1110
	mov	DWORD PTR _uniChar$[ebp], 0
; Line 1114
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [eax+8]
	cmp	edx, DWORD PTR [ecx+12]
	jb	SHORT $LN31@LMBCSGetNe
; Line 1116
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 1
; Line 1117
	mov	eax, 65535				; 0000ffffH
	jmp	$LN32@LMBCSGetNe
$LN31@LMBCSGetNe:
; Line 1120
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR _CurByte$[ebp], dl
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 1
	mov	edx, DWORD PTR _args$[ebp]
	mov	DWORD PTR [edx+8], ecx
; Line 1137
	movzx	eax, BYTE PTR _CurByte$[ebp]
	cmp	eax, 31					; 0000001fH
	jle	SHORT $LN28@LMBCSGetNe
	movzx	eax, BYTE PTR _CurByte$[ebp]
	cmp	eax, 128				; 00000080H
	jl	SHORT $LN29@LMBCSGetNe
$LN28@LMBCSGetNe:
	movzx	eax, BYTE PTR _CurByte$[ebp]
	test	eax, eax
	je	SHORT $LN29@LMBCSGetNe
	movzx	eax, BYTE PTR _CurByte$[ebp]
	cmp	eax, 9
	je	SHORT $LN29@LMBCSGetNe
	movzx	eax, BYTE PTR _CurByte$[ebp]
	cmp	eax, 13					; 0000000dH
	je	SHORT $LN29@LMBCSGetNe
	movzx	eax, BYTE PTR _CurByte$[ebp]
	cmp	eax, 10					; 0000000aH
	je	SHORT $LN29@LMBCSGetNe
	movzx	eax, BYTE PTR _CurByte$[ebp]
	cmp	eax, 25					; 00000019H
	jne	SHORT $LN30@LMBCSGetNe
$LN29@LMBCSGetNe:
; Line 1139
	movzx	eax, BYTE PTR _CurByte$[ebp]
	mov	DWORD PTR _uniChar$[ebp], eax
; Line 1141
	jmp	$LN27@LMBCSGetNe
$LN30@LMBCSGetNe:
; Line 1147
	movzx	eax, BYTE PTR _CurByte$[ebp]
	cmp	eax, 15					; 0000000fH
	jne	SHORT $LN26@LMBCSGetNe
; Line 1150
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 1
	mov	edx, DWORD PTR _args$[ebp]
	cmp	ecx, DWORD PTR [edx+12]
	jbe	SHORT $LN25@LMBCSGetNe
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 11			; 0000000bH
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+8], edx
	mov	eax, 65535				; 0000ffffH
	jmp	$LN32@LMBCSGetNe
$LN25@LMBCSGetNe:
; Line 1151
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR _C0C1byte$11116[ebp], dl
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 1
	mov	edx, DWORD PTR _args$[ebp]
	mov	DWORD PTR [edx+8], ecx
; Line 1152
	movzx	eax, BYTE PTR _C0C1byte$11116[ebp]
	cmp	eax, 128				; 00000080H
	jge	SHORT $LN34@LMBCSGetNe
	movzx	ecx, BYTE PTR _C0C1byte$11116[ebp]
	sub	ecx, 32					; 00000020H
	mov	DWORD PTR tv137[ebp], ecx
	jmp	SHORT $LN35@LMBCSGetNe
$LN34@LMBCSGetNe:
	movzx	edx, BYTE PTR _C0C1byte$11116[ebp]
	mov	DWORD PTR tv137[ebp], edx
$LN35@LMBCSGetNe:
	mov	eax, DWORD PTR tv137[ebp]
	mov	DWORD PTR _uniChar$[ebp], eax
; Line 1154
	jmp	$LN27@LMBCSGetNe
$LN26@LMBCSGetNe:
; Line 1155
	movzx	eax, BYTE PTR _CurByte$[ebp]
	cmp	eax, 20					; 00000014H
	jne	SHORT $LN23@LMBCSGetNe
; Line 1157
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 2
	mov	edx, DWORD PTR _args$[ebp]
	cmp	ecx, DWORD PTR [edx+12]
	jbe	SHORT $LN22@LMBCSGetNe
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 11			; 0000000bH
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+8], edx
	mov	eax, 65535				; 0000ffffH
	jmp	$LN32@LMBCSGetNe
$LN22@LMBCSGetNe:
; Line 1160
	mov	eax, DWORD PTR _args$[ebp]
	add	eax, 8
	push	eax
	call	_GetUniFromLMBCSUni
	add	esp, 4
	movzx	eax, ax
	jmp	$LN32@LMBCSGetNe
	jmp	$LN27@LMBCSGetNe
$LN23@LMBCSGetNe:
; Line 1162
	movzx	eax, BYTE PTR _CurByte$[ebp]
	cmp	eax, 32					; 00000020H
	jg	$LN20@LMBCSGetNe
; Line 1164
	mov	al, BYTE PTR _CurByte$[ebp]
	mov	BYTE PTR _group$11113[ebp], al
; Line 1165
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _extraInfo$11112[ebp], edx
; Line 1166
	movzx	eax, BYTE PTR _group$11113[ebp]
	cmp	eax, 19					; 00000013H
	jg	SHORT $LN18@LMBCSGetNe
	movzx	eax, BYTE PTR _group$11113[ebp]
	mov	ecx, DWORD PTR _extraInfo$11112[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _cnv$11114[ebp], edx
	cmp	DWORD PTR _cnv$11114[ebp], 0
	jne	SHORT $LN19@LMBCSGetNe
$LN18@LMBCSGetNe:
; Line 1169
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 10			; 0000000aH
	jmp	$LN17@LMBCSGetNe
$LN19@LMBCSGetNe:
; Line 1171
	movzx	eax, BYTE PTR _group$11113[ebp]
	cmp	eax, 16					; 00000010H
	jl	$LN16@LMBCSGetNe
; Line 1174
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 2
	mov	edx, DWORD PTR _args$[ebp]
	cmp	ecx, DWORD PTR [edx+12]
	jbe	SHORT $LN15@LMBCSGetNe
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 11			; 0000000bH
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+8], edx
	mov	eax, 65535				; 0000ffffH
	jmp	$LN32@LMBCSGetNe
$LN15@LMBCSGetNe:
; Line 1177
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	movsx	edx, BYTE PTR [ecx]
	movzx	eax, BYTE PTR _group$11113[ebp]
	cmp	edx, eax
	jne	SHORT $LN14@LMBCSGetNe
; Line 1179
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 1
	mov	edx, DWORD PTR _args$[ebp]
	mov	DWORD PTR [edx+8], ecx
; Line 1180
	push	0
	push	1
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _cnv$11114[ebp]
	push	edx
	call	_ucnv_MBCSSimpleGetNextUChar_56
	add	esp, 16					; 00000010H
	mov	DWORD PTR _uniChar$[ebp], eax
; Line 1181
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 1
	mov	edx, DWORD PTR _args$[ebp]
	mov	DWORD PTR [edx+8], ecx
; Line 1182
	jmp	SHORT $LN13@LMBCSGetNe
$LN14@LMBCSGetNe:
; Line 1184
	push	0
	push	2
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _cnv$11114[ebp]
	push	edx
	call	_ucnv_MBCSSimpleGetNextUChar_56
	add	esp, 16					; 00000010H
	mov	DWORD PTR _uniChar$[ebp], eax
; Line 1185
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 2
	mov	edx, DWORD PTR _args$[ebp]
	mov	DWORD PTR [edx+8], ecx
$LN13@LMBCSGetNe:
; Line 1188
	jmp	$LN17@LMBCSGetNe
$LN16@LMBCSGetNe:
; Line 1189
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 1
	mov	edx, DWORD PTR _args$[ebp]
	cmp	ecx, DWORD PTR [edx+12]
	jbe	SHORT $LN11@LMBCSGetNe
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 11			; 0000000bH
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+8], edx
	mov	eax, 65535				; 0000ffffH
	jmp	$LN32@LMBCSGetNe
$LN11@LMBCSGetNe:
; Line 1190
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR _CurByte$[ebp], dl
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 1
	mov	edx, DWORD PTR _args$[ebp]
	mov	DWORD PTR [edx+8], ecx
; Line 1192
	movzx	eax, BYTE PTR _CurByte$[ebp]
	cmp	eax, 128				; 00000080H
	jl	SHORT $LN10@LMBCSGetNe
; Line 1194
	movzx	eax, BYTE PTR _CurByte$[ebp]
	mov	ecx, DWORD PTR _cnv$11114[ebp]
	mov	edx, DWORD PTR [ecx+36]
	movzx	eax, WORD PTR [edx+eax*4]
	mov	DWORD PTR _uniChar$[ebp], eax
; Line 1196
	jmp	SHORT $LN17@LMBCSGetNe
$LN10@LMBCSGetNe:
; Line 1203
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _extraInfo$11112[ebp], edx
; Line 1204
	mov	eax, DWORD PTR _extraInfo$11112[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _cnv$11114[ebp], ecx
; Line 1207
	mov	al, BYTE PTR _group$11113[ebp]
	mov	BYTE PTR _bytes$11139[ebp], al
; Line 1208
	mov	al, BYTE PTR _CurByte$[ebp]
	mov	BYTE PTR _bytes$11139[ebp+1], al
; Line 1209
	push	0
	push	2
	lea	eax, DWORD PTR _bytes$11139[ebp]
	push	eax
	mov	ecx, DWORD PTR _cnv$11114[ebp]
	push	ecx
	call	_ucnv_MBCSSimpleGetNextUChar_56
	add	esp, 16					; 00000010H
	mov	DWORD PTR _uniChar$[ebp], eax
$LN17@LMBCSGetNe:
; Line 1211
	jmp	$LN27@LMBCSGetNe
$LN20@LMBCSGetNe:
; Line 1213
	movzx	eax, BYTE PTR _CurByte$[ebp]
	cmp	eax, 128				; 00000080H
	jl	$LN27@LMBCSGetNe
; Line 1215
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _extraInfo$11112[ebp], edx
; Line 1216
	mov	eax, DWORD PTR _extraInfo$11112[ebp]
	mov	cl, BYTE PTR [eax+80]
	mov	BYTE PTR _group$11113[ebp], cl
; Line 1217
	movzx	eax, BYTE PTR _group$11113[ebp]
	mov	ecx, DWORD PTR _extraInfo$11112[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _cnv$11114[ebp], edx
; Line 1218
	movzx	eax, BYTE PTR _group$11113[ebp]
	cmp	eax, 16					; 00000010H
	jl	$LN6@LMBCSGetNe
; Line 1220
	movzx	eax, BYTE PTR _CurByte$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cnv$11114[ebp]
	push	ecx
	call	_ucnv_MBCSIsLeadByte_56
	add	esp, 8
	movsx	edx, al
	test	edx, edx
	jne	SHORT $LN5@LMBCSGetNe
; Line 1222
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [eax+8]
	cmp	edx, DWORD PTR [ecx+12]
	jbe	SHORT $LN4@LMBCSGetNe
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 11			; 0000000bH
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+8], edx
	mov	eax, 65535				; 0000ffffH
	jmp	$LN32@LMBCSGetNe
$LN4@LMBCSGetNe:
; Line 1225
	push	0
	push	1
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	sub	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _cnv$11114[ebp]
	push	edx
	call	_ucnv_MBCSSimpleGetNextUChar_56
	add	esp, 16					; 00000010H
	mov	DWORD PTR _uniChar$[ebp], eax
; Line 1227
	jmp	SHORT $LN3@LMBCSGetNe
$LN5@LMBCSGetNe:
; Line 1229
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 1
	mov	edx, DWORD PTR _args$[ebp]
	cmp	ecx, DWORD PTR [edx+12]
	jbe	SHORT $LN2@LMBCSGetNe
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 11			; 0000000bH
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+8], edx
	mov	eax, 65535				; 0000ffffH
	jmp	SHORT $LN32@LMBCSGetNe
$LN2@LMBCSGetNe:
; Line 1231
	push	0
	push	2
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	sub	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _cnv$11114[ebp]
	push	edx
	call	_ucnv_MBCSSimpleGetNextUChar_56
	add	esp, 16					; 00000010H
	mov	DWORD PTR _uniChar$[ebp], eax
; Line 1232
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 1
	mov	edx, DWORD PTR _args$[ebp]
	mov	DWORD PTR [edx+8], ecx
$LN3@LMBCSGetNe:
; Line 1235
	jmp	SHORT $LN27@LMBCSGetNe
$LN6@LMBCSGetNe:
; Line 1237
	movzx	eax, BYTE PTR _CurByte$[ebp]
	mov	ecx, DWORD PTR _cnv$11114[ebp]
	mov	edx, DWORD PTR [ecx+36]
	movzx	eax, WORD PTR [edx+eax*4]
	mov	DWORD PTR _uniChar$[ebp], eax
$LN27@LMBCSGetNe:
; Line 1241
	mov	eax, DWORD PTR _uniChar$[ebp]
$LN32@LMBCSGetNe:
; Line 1242
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN38@LMBCSGetNe
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 280				; 00000118H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN38@LMBCSGetNe:
	DD	1
	DD	$LN37@LMBCSGetNe
$LN37@LMBCSGetNe:
	DD	-80					; ffffffb0H
	DD	2
	DD	$LN36@LMBCSGetNe
$LN36@LMBCSGetNe:
	DB	98					; 00000062H
	DB	121					; 00000079H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
__LMBCSGetNextUCharWorker ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _GetUniFromLMBCSUni
_TEXT	SEGMENT
_LowCh$ = -17						; size = 1
_HighCh$ = -5						; size = 1
_ppLMBCSin$ = 8						; size = 4
_GetUniFromLMBCSUni PROC				; COMDAT
; Line 1078
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1079
	mov	eax, DWORD PTR _ppLMBCSin$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR _HighCh$[ebp], dl
	mov	eax, DWORD PTR _ppLMBCSin$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _ppLMBCSin$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 1080
	mov	eax, DWORD PTR _ppLMBCSin$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR _LowCh$[ebp], dl
	mov	eax, DWORD PTR _ppLMBCSin$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _ppLMBCSin$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 1082
	movzx	eax, BYTE PTR _HighCh$[ebp]
	cmp	eax, 246				; 000000f6H
	jne	SHORT $LN1@GetUniFrom
; Line 1084
	mov	al, BYTE PTR _LowCh$[ebp]
	mov	BYTE PTR _HighCh$[ebp], al
; Line 1085
	mov	BYTE PTR _LowCh$[ebp], 0
$LN1@GetUniFrom:
; Line 1087
	movzx	eax, BYTE PTR _HighCh$[ebp]
	shl	eax, 8
	movzx	ecx, BYTE PTR _LowCh$[ebp]
	or	eax, ecx
; Line 1088
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_GetUniFromLMBCSUni ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __LMBCSOpen1
_TEXT	SEGMENT
__this$ = 8						; size = 4
_pArgs$ = 12						; size = 4
_err$ = 16						; size = 4
__LMBCSOpen1 PROC					; COMDAT
; Line 1345
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	push	1
	mov	eax, DWORD PTR _err$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pArgs$[ebp]
	push	ecx
	mov	edx, DWORD PTR __this$[ebp]
	push	edx
	call	__LMBCSOpenWorker
	add	esp, 16					; 00000010H
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__LMBCSOpen1 ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_ucnv_loadSharedData_56:PROC
EXTRN	_uprv_malloc_56:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __LMBCSOpenWorker
_TEXT	SEGMENT
tv65 = -492						; size = 4
_i$10892 = -289						; size = 1
_stackArgs$10889 = -280					; size = 28
_stackPieces$10888 = -244				; size = 224
_extraInfo$ = -12					; size = 4
__$ArrayPad$ = -4					; size = 4
__this$ = 8						; size = 4
_pArgs$ = 12						; size = 4
_err$ = 16						; size = 4
_OptGroup$ = 20						; size = 1
__LMBCSOpenWorker PROC					; COMDAT
; Line 629
	push	ebp
	mov	ebp, esp
	sub	esp, 492				; 000001ecH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-492]
	mov	ecx, 123				; 0000007bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 631
	push	84					; 00000054H
	call	_uprv_malloc_56
	add	esp, 4
	mov	DWORD PTR tv65[ebp], eax
	mov	eax, DWORD PTR __this$[ebp]
	mov	ecx, DWORD PTR tv65[ebp]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR tv65[ebp]
	mov	DWORD PTR _extraInfo$[ebp], edx
; Line 632
	cmp	DWORD PTR _extraInfo$[ebp], 0
	je	$LN8@LMBCSOpenW
; Line 635
	mov	DWORD PTR _stackArgs$10889[ebp], 28	; 0000001cH
	xor	eax, eax
	mov	DWORD PTR _stackArgs$10889[ebp+4], eax
	mov	DWORD PTR _stackArgs$10889[ebp+8], eax
	mov	DWORD PTR _stackArgs$10889[ebp+12], eax
	mov	DWORD PTR _stackArgs$10889[ebp+16], eax
	mov	DWORD PTR _stackArgs$10889[ebp+20], eax
	mov	DWORD PTR _stackArgs$10889[ebp+24], eax
; Line 638
	push	84					; 00000054H
	push	0
	mov	eax, DWORD PTR _extraInfo$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
; Line 640
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	cl, BYTE PTR [eax+8]
	mov	BYTE PTR _stackArgs$10889[ebp+8], cl
; Line 642
	mov	BYTE PTR _i$10892[ebp], 0
	jmp	SHORT $LN7@LMBCSOpenW
$LN6@LMBCSOpenW:
	mov	al, BYTE PTR _i$10892[ebp]
	add	al, 1
	mov	BYTE PTR _i$10892[ebp], al
$LN7@LMBCSOpenW:
	movzx	eax, BYTE PTR _i$10892[ebp]
	cmp	eax, 19					; 00000013H
	jg	SHORT $LN5@LMBCSOpenW
	mov	eax, DWORD PTR _err$[ebp]
	cmp	DWORD PTR [eax], 0
	jg	SHORT $LN5@LMBCSOpenW
; Line 644
	movzx	eax, BYTE PTR _i$10892[ebp]
	cmp	DWORD PTR _OptGroupByteToCPName[eax*4], 0
	je	SHORT $LN4@LMBCSOpenW
; Line 645
	mov	eax, DWORD PTR _err$[ebp]
	push	eax
	lea	ecx, DWORD PTR _stackArgs$10889[ebp]
	push	ecx
	lea	edx, DWORD PTR _stackPieces$10888[ebp]
	push	edx
	movzx	eax, BYTE PTR _i$10892[ebp]
	mov	ecx, DWORD PTR _OptGroupByteToCPName[eax*4]
	push	ecx
	call	_ucnv_loadSharedData_56
	add	esp, 16					; 00000010H
	movzx	edx, BYTE PTR _i$10892[ebp]
	mov	ecx, DWORD PTR _extraInfo$[ebp]
	mov	DWORD PTR [ecx+edx*4], eax
$LN4@LMBCSOpenW:
; Line 647
	jmp	SHORT $LN6@LMBCSOpenW
$LN5@LMBCSOpenW:
; Line 649
	mov	eax, DWORD PTR _err$[ebp]
	cmp	DWORD PTR [eax], 0
	jg	SHORT $LN2@LMBCSOpenW
	mov	eax, DWORD PTR _pArgs$[ebp]
	movsx	ecx, BYTE PTR [eax+8]
	test	ecx, ecx
	je	SHORT $LN3@LMBCSOpenW
$LN2@LMBCSOpenW:
; Line 650
	mov	eax, DWORD PTR __this$[ebp]
	push	eax
	call	__LMBCSClose
	add	esp, 4
; Line 651
	jmp	SHORT $LN9@LMBCSOpenW
$LN3@LMBCSOpenW:
; Line 653
	mov	eax, DWORD PTR _extraInfo$[ebp]
	mov	cl, BYTE PTR _OptGroup$[ebp]
	mov	BYTE PTR [eax+80], cl
; Line 654
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	call	_FindLMBCSLocale
	add	esp, 4
	mov	edx, DWORD PTR _extraInfo$[ebp]
	mov	BYTE PTR [edx+81], al
; Line 656
	jmp	SHORT $LN9@LMBCSOpenW
$LN8@LMBCSOpenW:
; Line 658
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 7
$LN9@LMBCSOpenW:
; Line 660
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@LMBCSOpenW
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 492				; 000001ecH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN14@LMBCSOpenW:
	DD	2
	DD	$LN13@LMBCSOpenW
$LN13@LMBCSOpenW:
	DD	-244					; ffffff0cH
	DD	224					; 000000e0H
	DD	$LN11@LMBCSOpenW
	DD	-280					; fffffee8H
	DD	28					; 0000001cH
	DD	$LN12@LMBCSOpenW
$LN12@LMBCSOpenW:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	65					; 00000041H
	DB	114					; 00000072H
	DB	103					; 00000067H
	DB	115					; 00000073H
	DB	0
$LN11@LMBCSOpenW:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	80					; 00000050H
	DB	105					; 00000069H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
__LMBCSOpenWorker ENDP
_TEXT	ENDS
EXTRN	__imp__strncmp:PROC
EXTRN	_strlen:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _FindLMBCSLocale
_TEXT	SEGMENT
_pTable$ = -8						; size = 4
_LocaleID$ = 8						; size = 4
_FindLMBCSLocale PROC					; COMDAT
; Line 537
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 538
	mov	DWORD PTR _pTable$[ebp], OFFSET _LocaleLMBCSGrpMap
; Line 540
	cmp	DWORD PTR _LocaleID$[ebp], 0
	je	SHORT $LN7@FindLMBCSL
	mov	eax, DWORD PTR _LocaleID$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN6@FindLMBCSL
$LN7@FindLMBCSL:
; Line 542
	xor	al, al
	jmp	$LN9@FindLMBCSL
$LN6@FindLMBCSL:
; Line 545
	mov	eax, DWORD PTR _pTable$[ebp]
	cmp	DWORD PTR [eax], 0
	je	$LN5@FindLMBCSL
; Line 547
	mov	eax, DWORD PTR _pTable$[ebp]
	mov	ecx, DWORD PTR [eax]
	movsx	edx, BYTE PTR [ecx]
	mov	eax, DWORD PTR _LocaleID$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	edx, ecx
	jne	SHORT $LN4@FindLMBCSL
; Line 550
	push	1
	mov	eax, DWORD PTR _pTable$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_uprv_checkValidMemory
	add	esp, 8
	push	1
	mov	edx, DWORD PTR _LocaleID$[ebp]
	push	edx
	call	_uprv_checkValidMemory
	add	esp, 8
	mov	eax, DWORD PTR _pTable$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_strlen
	add	esp, 4
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR _LocaleID$[ebp]
	push	edx
	mov	eax, DWORD PTR _pTable$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	DWORD PTR __imp__strncmp
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN3@FindLMBCSL
; Line 551
	mov	eax, DWORD PTR _pTable$[ebp]
	mov	al, BYTE PTR [eax+4]
	jmp	SHORT $LN9@FindLMBCSL
$LN3@FindLMBCSL:
; Line 553
	jmp	SHORT $LN2@FindLMBCSL
$LN4@FindLMBCSL:
; Line 554
	mov	eax, DWORD PTR _pTable$[ebp]
	mov	ecx, DWORD PTR [eax]
	movsx	edx, BYTE PTR [ecx]
	mov	eax, DWORD PTR _LocaleID$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	edx, ecx
	jle	SHORT $LN2@FindLMBCSL
; Line 555
	jmp	SHORT $LN5@FindLMBCSL
$LN2@FindLMBCSL:
; Line 556
	mov	eax, DWORD PTR _pTable$[ebp]
	add	eax, 8
	mov	DWORD PTR _pTable$[ebp], eax
; Line 557
	jmp	$LN6@FindLMBCSL
$LN5@FindLMBCSL:
; Line 558
	mov	al, 1
$LN9@FindLMBCSL:
; Line 559
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_FindLMBCSLocale ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __LMBCSOpen2
_TEXT	SEGMENT
__this$ = 8						; size = 4
_pArgs$ = 12						; size = 4
_err$ = 16						; size = 4
__LMBCSOpen2 PROC					; COMDAT
; Line 1346
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	push	2
	mov	eax, DWORD PTR _err$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pArgs$[ebp]
	push	ecx
	mov	edx, DWORD PTR __this$[ebp]
	push	edx
	call	__LMBCSOpenWorker
	add	esp, 16					; 00000010H
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__LMBCSOpen2 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __LMBCSOpen3
_TEXT	SEGMENT
__this$ = 8						; size = 4
_pArgs$ = 12						; size = 4
_err$ = 16						; size = 4
__LMBCSOpen3 PROC					; COMDAT
; Line 1347
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	push	3
	mov	eax, DWORD PTR _err$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pArgs$[ebp]
	push	ecx
	mov	edx, DWORD PTR __this$[ebp]
	push	edx
	call	__LMBCSOpenWorker
	add	esp, 16					; 00000010H
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__LMBCSOpen3 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __LMBCSOpen4
_TEXT	SEGMENT
__this$ = 8						; size = 4
_pArgs$ = 12						; size = 4
_err$ = 16						; size = 4
__LMBCSOpen4 PROC					; COMDAT
; Line 1348
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	push	4
	mov	eax, DWORD PTR _err$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pArgs$[ebp]
	push	ecx
	mov	edx, DWORD PTR __this$[ebp]
	push	edx
	call	__LMBCSOpenWorker
	add	esp, 16					; 00000010H
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__LMBCSOpen4 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __LMBCSOpen5
_TEXT	SEGMENT
__this$ = 8						; size = 4
_pArgs$ = 12						; size = 4
_err$ = 16						; size = 4
__LMBCSOpen5 PROC					; COMDAT
; Line 1349
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	push	5
	mov	eax, DWORD PTR _err$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pArgs$[ebp]
	push	ecx
	mov	edx, DWORD PTR __this$[ebp]
	push	edx
	call	__LMBCSOpenWorker
	add	esp, 16					; 00000010H
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__LMBCSOpen5 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __LMBCSOpen6
_TEXT	SEGMENT
__this$ = 8						; size = 4
_pArgs$ = 12						; size = 4
_err$ = 16						; size = 4
__LMBCSOpen6 PROC					; COMDAT
; Line 1350
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	push	6
	mov	eax, DWORD PTR _err$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pArgs$[ebp]
	push	ecx
	mov	edx, DWORD PTR __this$[ebp]
	push	edx
	call	__LMBCSOpenWorker
	add	esp, 16					; 00000010H
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__LMBCSOpen6 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __LMBCSOpen8
_TEXT	SEGMENT
__this$ = 8						; size = 4
_pArgs$ = 12						; size = 4
_err$ = 16						; size = 4
__LMBCSOpen8 PROC					; COMDAT
; Line 1351
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	push	8
	mov	eax, DWORD PTR _err$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pArgs$[ebp]
	push	ecx
	mov	edx, DWORD PTR __this$[ebp]
	push	edx
	call	__LMBCSOpenWorker
	add	esp, 16					; 00000010H
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__LMBCSOpen8 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __LMBCSOpen11
_TEXT	SEGMENT
__this$ = 8						; size = 4
_pArgs$ = 12						; size = 4
_err$ = 16						; size = 4
__LMBCSOpen11 PROC					; COMDAT
; Line 1352
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	push	11					; 0000000bH
	mov	eax, DWORD PTR _err$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pArgs$[ebp]
	push	ecx
	mov	edx, DWORD PTR __this$[ebp]
	push	edx
	call	__LMBCSOpenWorker
	add	esp, 16					; 00000010H
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__LMBCSOpen11 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __LMBCSOpen16
_TEXT	SEGMENT
__this$ = 8						; size = 4
_pArgs$ = 12						; size = 4
_err$ = 16						; size = 4
__LMBCSOpen16 PROC					; COMDAT
; Line 1353
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	push	16					; 00000010H
	mov	eax, DWORD PTR _err$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pArgs$[ebp]
	push	ecx
	mov	edx, DWORD PTR __this$[ebp]
	push	edx
	call	__LMBCSOpenWorker
	add	esp, 16					; 00000010H
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__LMBCSOpen16 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __LMBCSOpen17
_TEXT	SEGMENT
__this$ = 8						; size = 4
_pArgs$ = 12						; size = 4
_err$ = 16						; size = 4
__LMBCSOpen17 PROC					; COMDAT
; Line 1354
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	push	17					; 00000011H
	mov	eax, DWORD PTR _err$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pArgs$[ebp]
	push	ecx
	mov	edx, DWORD PTR __this$[ebp]
	push	edx
	call	__LMBCSOpenWorker
	add	esp, 16					; 00000010H
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__LMBCSOpen17 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __LMBCSOpen18
_TEXT	SEGMENT
__this$ = 8						; size = 4
_pArgs$ = 12						; size = 4
_err$ = 16						; size = 4
__LMBCSOpen18 PROC					; COMDAT
; Line 1355
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	push	18					; 00000012H
	mov	eax, DWORD PTR _err$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pArgs$[ebp]
	push	ecx
	mov	edx, DWORD PTR __this$[ebp]
	push	edx
	call	__LMBCSOpenWorker
	add	esp, 16					; 00000010H
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__LMBCSOpen18 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __LMBCSOpen19
_TEXT	SEGMENT
__this$ = 8						; size = 4
_pArgs$ = 12						; size = 4
_err$ = 16						; size = 4
__LMBCSOpen19 PROC					; COMDAT
; Line 1356
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	push	19					; 00000013H
	mov	eax, DWORD PTR _err$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pArgs$[ebp]
	push	ecx
	mov	edx, DWORD PTR __this$[ebp]
	push	edx
	call	__LMBCSOpenWorker
	add	esp, 16					; 00000010H
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__LMBCSOpen19 ENDP
_TEXT	ENDS
END
