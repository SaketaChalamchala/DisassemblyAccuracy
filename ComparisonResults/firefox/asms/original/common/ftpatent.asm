; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

	TITLE	D:\mozilla\modules\freetype2\src\base\ftpatent.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD

_DATA	SEGMENT
$SG7284	DB	'sfnt-table', 00H
	ORG $+1
$SG7328	DB	'tt-glyf', 00H
_DATA	ENDS
PUBLIC	_FT_Face_CheckTrueTypePatents
PUBLIC	_FT_Face_SetUnpatentedHinting
EXTRN	_FT_Stream_Seek:PROC
EXTRN	_FT_Stream_Skip:PROC
EXTRN	_FT_Stream_EnterFrame:PROC
EXTRN	_FT_Stream_ExitFrame:PROC
EXTRN	_FT_Stream_ReadUShort:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_toskip$1 = -72						; size = 4
_flags$2 = -68						; size = 4
_has_instr$3 = -61					; size = 1
_num_contours$4 = -60					; size = 4
_size$5 = -52						; size = 4
_num_ins$6 = -44					; size = 4
_offset$7 = -40						; size = 4
__tmp_$8 = -36						; size = 4
_module$9 = -32						; size = 4
_service$ = -28						; size = 4
_result$ = -21						; size = 1
_error$ = -16						; size = 4
_gindex$ = -8						; size = 4
_stream$ = -4						; size = 4
_face$ = 8						; size = 4
__tt_face_check_patents PROC
; File d:\mozilla\modules\freetype2\src\base\ftpatent.c
; Line 148
	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-72]
	mov	ecx, 18					; 00000012H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 149
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+104]
	mov	DWORD PTR _stream$[ebp], ecx
; Line 157
	push	1718642541				; 6670676dH
	mov	edx, DWORD PTR _face$[ebp]
	push	edx
	call	__tt_check_patents_in_table
	add	esp, 8
	mov	BYTE PTR _result$[ebp], al
; Line 158
	movzx	eax, BYTE PTR _result$[ebp]
	test	eax, eax
	je	SHORT $LN32@tt_face_ch
; Line 159
	jmp	$Exit$39
$LN32@tt_face_ch:
; Line 161
	push	1886545264				; 70726570H
	mov	ecx, DWORD PTR _face$[ebp]
	push	ecx
	call	__tt_check_patents_in_table
	add	esp, 8
	mov	BYTE PTR _result$[ebp], al
; Line 162
	movzx	edx, BYTE PTR _result$[ebp]
	test	edx, edx
	je	SHORT $LN30@tt_face_ch
; Line 163
	jmp	$Exit$39
$LN30@tt_face_ch:
; Line 165
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	mov	DWORD PTR _module$9[ebp], ecx
	mov	DWORD PTR __tmp_$8[ebp], 0
	mov	edx, DWORD PTR _module$9[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	DWORD PTR [eax+32], 0
	je	SHORT $LN27@tt_face_ch
	mov	esi, esp
	push	OFFSET $SG7328
	mov	ecx, DWORD PTR _module$9[ebp]
	push	ecx
	mov	edx, DWORD PTR _module$9[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+32]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR __tmp_$8[ebp], eax
$LN27@tt_face_ch:
	mov	edx, DWORD PTR __tmp_$8[ebp]
	mov	DWORD PTR _service$[ebp], edx
	xor	eax, eax
	jne	SHORT $LN30@tt_face_ch
; Line 166
	cmp	DWORD PTR _service$[ebp], 0
	jne	SHORT $LN26@tt_face_ch
; Line 167
	jmp	$Exit$39
$LN26@tt_face_ch:
; Line 169
	mov	DWORD PTR _gindex$[ebp], 0
	jmp	SHORT $LN25@tt_face_ch
$LN24@tt_face_ch:
	mov	ecx, DWORD PTR _gindex$[ebp]
	add	ecx, 1
	mov	DWORD PTR _gindex$[ebp], ecx
$LN25@tt_face_ch:
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR _gindex$[ebp]
	cmp	eax, DWORD PTR [edx+16]
	jae	$Exit$39
; Line 175
	mov	esi, esp
	lea	ecx, DWORD PTR _size$5[ebp]
	push	ecx
	mov	edx, DWORD PTR _gindex$[ebp]
	push	edx
	mov	eax, DWORD PTR _face$[ebp]
	push	eax
	mov	ecx, DWORD PTR _service$[ebp]
	mov	edx, DWORD PTR [ecx]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _offset$7[ebp], eax
; Line 176
	cmp	DWORD PTR _size$5[ebp], 0
	jne	SHORT $LN22@tt_face_ch
; Line 177
	jmp	SHORT $LN24@tt_face_ch
$LN22@tt_face_ch:
; Line 180
	mov	eax, DWORD PTR _offset$7[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_Seek
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN20@tt_face_ch
	lea	edx, DWORD PTR _error$[ebp]
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_ReadUShort
	add	esp, 8
	movsx	ecx, ax
	mov	DWORD PTR _num_contours$4[ebp], ecx
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN21@tt_face_ch
$LN20@tt_face_ch:
; Line 181
	jmp	SHORT $LN24@tt_face_ch
$LN21@tt_face_ch:
; Line 183
	cmp	DWORD PTR _num_contours$4[ebp], 0
	jl	SHORT $LN19@tt_face_ch
; Line 185
	mov	edx, DWORD PTR _num_contours$4[ebp]
	lea	eax, DWORD PTR [edx+edx+8]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_Skip
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN18@tt_face_ch
; Line 186
	jmp	$LN24@tt_face_ch
$LN18@tt_face_ch:
; Line 188
	jmp	$LN17@tt_face_ch
$LN19@tt_face_ch:
; Line 190
	mov	BYTE PTR _has_instr$3[ebp], 0
; Line 193
	push	8
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_FT_Stream_Skip
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN15@tt_face_ch
; Line 194
	jmp	$LN24@tt_face_ch
$LN15@tt_face_ch:
; Line 202
	lea	eax, DWORD PTR _error$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_ReadUShort
	add	esp, 8
	movzx	edx, ax
	mov	DWORD PTR _flags$2[ebp], edx
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN13@tt_face_ch
; Line 203
	jmp	$LN14@tt_face_ch
$LN13@tt_face_ch:
; Line 205
	mov	DWORD PTR _toskip$1[ebp], 4
; Line 207
	mov	eax, DWORD PTR _flags$2[ebp]
	and	eax, 1
	je	SHORT $LN12@tt_face_ch
; Line 208
	mov	ecx, DWORD PTR _toskip$1[ebp]
	add	ecx, 2
	mov	DWORD PTR _toskip$1[ebp], ecx
$LN12@tt_face_ch:
; Line 210
	mov	edx, DWORD PTR _flags$2[ebp]
	and	edx, 8
	je	SHORT $LN11@tt_face_ch
; Line 211
	mov	eax, DWORD PTR _toskip$1[ebp]
	add	eax, 2
	mov	DWORD PTR _toskip$1[ebp], eax
	jmp	SHORT $LN10@tt_face_ch
$LN11@tt_face_ch:
; Line 212
	mov	ecx, DWORD PTR _flags$2[ebp]
	and	ecx, 64					; 00000040H
	je	SHORT $LN9@tt_face_ch
; Line 213
	mov	edx, DWORD PTR _toskip$1[ebp]
	add	edx, 4
	mov	DWORD PTR _toskip$1[ebp], edx
	jmp	SHORT $LN10@tt_face_ch
$LN9@tt_face_ch:
; Line 214
	mov	eax, DWORD PTR _flags$2[ebp]
	and	eax, 128				; 00000080H
	je	SHORT $LN10@tt_face_ch
; Line 215
	mov	ecx, DWORD PTR _toskip$1[ebp]
	add	ecx, 8
	mov	DWORD PTR _toskip$1[ebp], ecx
$LN10@tt_face_ch:
; Line 217
	mov	edx, DWORD PTR _flags$2[ebp]
	and	edx, 256				; 00000100H
	je	SHORT $LN6@tt_face_ch
; Line 218
	mov	BYTE PTR _has_instr$3[ebp], 1
$LN6@tt_face_ch:
; Line 220
	mov	eax, DWORD PTR _toskip$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_Skip
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN5@tt_face_ch
; Line 221
	jmp	SHORT $NextGlyph$40
$LN5@tt_face_ch:
; Line 223
	mov	edx, DWORD PTR _flags$2[ebp]
	and	edx, 32					; 00000020H
	jne	SHORT $LN4@tt_face_ch
; Line 224
	jmp	SHORT $LN14@tt_face_ch
$LN4@tt_face_ch:
; Line 225
	jmp	$LN15@tt_face_ch
$LN14@tt_face_ch:
; Line 227
	movzx	eax, BYTE PTR _has_instr$3[ebp]
	test	eax, eax
	jne	SHORT $LN17@tt_face_ch
; Line 228
	jmp	SHORT $NextGlyph$40
$LN17@tt_face_ch:
; Line 231
	lea	ecx, DWORD PTR _error$[ebp]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_FT_Stream_ReadUShort
	add	esp, 8
	movzx	eax, ax
	mov	DWORD PTR _num_ins$6[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN2@tt_face_ch
; Line 232
	jmp	$LN24@tt_face_ch
$LN2@tt_face_ch:
; Line 234
	mov	ecx, DWORD PTR _num_ins$6[ebp]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	__tt_check_patents_in_range
	add	esp, 8
	mov	BYTE PTR _result$[ebp], al
; Line 235
	movzx	eax, BYTE PTR _result$[ebp]
	test	eax, eax
	je	SHORT $NextGlyph$40
; Line 236
	jmp	SHORT $Exit$39
$NextGlyph$40:
; Line 240
	jmp	$LN24@tt_face_ch
$Exit$39:
; Line 243
	mov	al, BYTE PTR _result$[ebp]
; Line 244
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN38@tt_face_ch
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 72					; 00000048H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN38@tt_face_ch:
	DD	2
	DD	$LN37@tt_face_ch
$LN37@tt_face_ch:
	DD	-16					; fffffff0H
	DD	4
	DD	$LN35@tt_face_ch
	DD	-52					; ffffffccH
	DD	4
	DD	$LN36@tt_face_ch
$LN36@tt_face_ch:
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
$LN35@tt_face_ch:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
__tt_face_check_patents ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_length_i$1 = -60					; size = 4
_offset_i$2 = -48					; size = 4
_tag_i$3 = -36						; size = 4
_i$4 = -28						; size = 4
__tmp_$5 = -24						; size = 4
_module$6 = -20						; size = 4
_result$ = -13						; size = 1
_service$ = -12						; size = 4
_error$ = -8						; size = 4
_stream$ = -4						; size = 4
_face$ = 8						; size = 4
_tag$ = 12						; size = 4
__tt_check_patents_in_table PROC
; File d:\mozilla\modules\freetype2\src\base\ftpatent.c
; Line 115
	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-64]
	mov	ecx, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 116
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+104]
	mov	DWORD PTR _stream$[ebp], ecx
; Line 117
	mov	DWORD PTR _error$[ebp], 0
; Line 119
	mov	BYTE PTR _result$[ebp], 0
$LN10@tt_check_p:
; Line 122
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+96]
	mov	DWORD PTR _module$6[ebp], eax
	mov	DWORD PTR __tmp_$5[ebp], 0
	mov	ecx, DWORD PTR _module$6[ebp]
	mov	edx, DWORD PTR [ecx]
	cmp	DWORD PTR [edx+32], 0
	je	SHORT $LN7@tt_check_p
	mov	esi, esp
	push	OFFSET $SG7284
	mov	eax, DWORD PTR _module$6[ebp]
	push	eax
	mov	ecx, DWORD PTR _module$6[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+32]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR __tmp_$5[ebp], eax
$LN7@tt_check_p:
	mov	ecx, DWORD PTR __tmp_$5[ebp]
	mov	DWORD PTR _service$[ebp], ecx
	xor	edx, edx
	jne	SHORT $LN10@tt_check_p
; Line 124
	cmp	DWORD PTR _service$[ebp], 0
	je	$Exit$18
; Line 126
	mov	DWORD PTR _i$4[ebp], 0
; Line 127
	mov	DWORD PTR _tag_i$3[ebp], 0
	mov	DWORD PTR _offset_i$2[ebp], 0
	mov	DWORD PTR _length_i$1[ebp], 0
; Line 130
	mov	DWORD PTR _i$4[ebp], 0
	jmp	SHORT $LN5@tt_check_p
$LN4@tt_check_p:
	mov	eax, DWORD PTR _i$4[ebp]
	add	eax, 1
	mov	DWORD PTR _i$4[ebp], eax
$LN5@tt_check_p:
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN3@tt_check_p
	mov	ecx, DWORD PTR _tag_i$3[ebp]
	cmp	ecx, DWORD PTR _tag$[ebp]
	je	SHORT $LN3@tt_check_p
; Line 132
	mov	esi, esp
	lea	edx, DWORD PTR _length_i$1[ebp]
	push	edx
	lea	eax, DWORD PTR _offset_i$2[ebp]
	push	eax
	lea	ecx, DWORD PTR _tag_i$3[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$4[ebp]
	push	edx
	mov	eax, DWORD PTR _face$[ebp]
	push	eax
	mov	ecx, DWORD PTR _service$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _error$[ebp], eax
	jmp	SHORT $LN4@tt_check_p
$LN3@tt_check_p:
; Line 135
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN1@tt_check_p
	mov	eax, DWORD PTR _offset_i$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_Seek
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN2@tt_check_p
$LN1@tt_check_p:
; Line 136
	jmp	SHORT $Exit$18
$LN2@tt_check_p:
; Line 138
	mov	edx, DWORD PTR _length_i$1[ebp]
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	__tt_check_patents_in_range
	add	esp, 8
	mov	BYTE PTR _result$[ebp], al
$Exit$18:
; Line 142
	mov	al, BYTE PTR _result$[ebp]
; Line 143
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN17@tt_check_p
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 64					; 00000040H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN17@tt_check_p:
	DD	3
	DD	$LN16@tt_check_p
$LN16@tt_check_p:
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN13@tt_check_p
	DD	-48					; ffffffd0H
	DD	4
	DD	$LN14@tt_check_p
	DD	-60					; ffffffc4H
	DD	4
	DD	$LN15@tt_check_p
$LN15@tt_check_p:
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	95					; 0000005fH
	DB	105					; 00000069H
	DB	0
$LN14@tt_check_p:
	DB	111					; 0000006fH
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	105					; 00000069H
	DB	0
$LN13@tt_check_p:
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	103					; 00000067H
	DB	95					; 0000005fH
	DB	105					; 00000069H
	DB	0
__tt_check_patents_in_table ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv74 = -20						; size = 4
_end$ = -16						; size = 4
_p$ = -12						; size = 4
_error$ = -8						; size = 4
_result$ = -1						; size = 1
_stream$ = 8						; size = 4
_size$ = 12						; size = 4
__tt_check_patents_in_range PROC
; File d:\mozilla\modules\freetype2\src\base\ftpatent.c
; Line 30
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 31
	mov	BYTE PTR _result$[ebp], 0
; Line 36
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_FT_Stream_EnterFrame
	add	esp, 8
	mov	DWORD PTR _error$[ebp], eax
	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN14@tt_check_p
; Line 37
	xor	al, al
	jmp	$LN15@tt_check_p
$LN14@tt_check_p:
; Line 39
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	DWORD PTR _p$[ebp], eax
; Line 40
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, DWORD PTR _size$[ebp]
	mov	DWORD PTR _end$[ebp], ecx
$LN13@tt_check_p:
; Line 42
	mov	edx, DWORD PTR _p$[ebp]
	cmp	edx, DWORD PTR _end$[ebp]
	jae	$Exit$19
; Line 44
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	mov	DWORD PTR tv74[ebp], eax
	mov	ecx, DWORD PTR tv74[ebp]
	sub	ecx, 6
	mov	DWORD PTR tv74[ebp], ecx
	cmp	DWORD PTR tv74[ebp], 185		; 000000b9H
	ja	$LN1@tt_check_p
	mov	edx, DWORD PTR tv74[ebp]
	movzx	eax, BYTE PTR $LN17@tt_check_p[edx]
	jmp	DWORD PTR $LN18@tt_check_p[eax*4]
$LN9@tt_check_p:
; Line 52
	mov	BYTE PTR _result$[ebp], 1
; Line 53
	jmp	$Exit$19
$LN8@tt_check_p:
; Line 56
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 1
	cmp	ecx, DWORD PTR _end$[ebp]
	jb	SHORT $LN7@tt_check_p
; Line 57
	jmp	$Exit$19
$LN7@tt_check_p:
; Line 59
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+edx]
	mov	edx, DWORD PTR _p$[ebp]
	lea	eax, DWORD PTR [edx+ecx+2]
	mov	DWORD PTR _p$[ebp], eax
; Line 60
	jmp	SHORT $LN10@tt_check_p
$LN6@tt_check_p:
; Line 63
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 1
	cmp	ecx, DWORD PTR _end$[ebp]
	jb	SHORT $LN5@tt_check_p
; Line 64
	jmp	SHORT $Exit$19
$LN5@tt_check_p:
; Line 66
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+edx]
	mov	edx, DWORD PTR _p$[ebp]
	lea	eax, DWORD PTR [edx+ecx*2+2]
	mov	DWORD PTR _p$[ebp], eax
; Line 67
	jmp	SHORT $LN10@tt_check_p
$LN4@tt_check_p:
; Line 74
	mov	BYTE PTR _result$[ebp], 1
; Line 75
	jmp	SHORT $Exit$19
$LN3@tt_check_p:
; Line 85
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+edx]
	mov	edx, DWORD PTR _p$[ebp]
	lea	eax, DWORD PTR [edx+ecx-174]
	mov	DWORD PTR _p$[ebp], eax
; Line 86
	jmp	SHORT $LN10@tt_check_p
$LN2@tt_check_p:
; Line 96
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+edx]
	mov	edx, DWORD PTR _p$[ebp]
	lea	eax, DWORD PTR [edx+ecx*2-365]
	mov	DWORD PTR _p$[ebp], eax
; Line 97
	jmp	SHORT $LN10@tt_check_p
$LN1@tt_check_p:
; Line 100
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 1
	mov	DWORD PTR _p$[ebp], ecx
$LN10@tt_check_p:
; Line 103
	jmp	$LN13@tt_check_p
$Exit$19:
; Line 106
	mov	edx, DWORD PTR _error$[ebp]
	mov	DWORD PTR _error$[ebp], edx
; Line 107
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_FT_Stream_ExitFrame
	add	esp, 4
; Line 108
	mov	al, BYTE PTR _result$[ebp]
$LN15@tt_check_p:
; Line 109
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN18@tt_check_p:
	DD	$LN9@tt_check_p
	DD	$LN8@tt_check_p
	DD	$LN6@tt_check_p
	DD	$LN4@tt_check_p
	DD	$LN3@tt_check_p
	DD	$LN2@tt_check_p
	DD	$LN1@tt_check_p
$LN17@tt_check_p:
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	1
	DB	2
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
__tt_check_patents_in_range ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_result$ = -1						; size = 1
_face$ = 8						; size = 4
_value$ = 12						; size = 1
_FT_Face_SetUnpatentedHinting PROC
; File d:\mozilla\modules\freetype2\src\base\ftpatent.c
; Line 267
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 268
	mov	BYTE PTR _result$[ebp], 0
; Line 279
	mov	eax, DWORD PTR _face$[ebp]
	mov	DWORD PTR _face$[ebp], eax
; Line 280
	mov	cl, BYTE PTR _value$[ebp]
	mov	BYTE PTR _value$[ebp], cl
; Line 283
	mov	al, BYTE PTR _result$[ebp]
; Line 284
	mov	esp, ebp
	pop	ebp
	ret	0
_FT_Face_SetUnpatentedHinting ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_result$ = -1						; size = 1
_face$ = 8						; size = 4
_FT_Face_CheckTrueTypePatents PROC
; File d:\mozilla\modules\freetype2\src\base\ftpatent.c
; Line 251
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 252
	mov	BYTE PTR _result$[ebp], 0
; Line 255
	cmp	DWORD PTR _face$[ebp], 0
	je	SHORT $LN1@FT_Face_Ch
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, 8
	je	SHORT $LN1@FT_Face_Ch
; Line 256
	mov	edx, DWORD PTR _face$[ebp]
	push	edx
	call	__tt_face_check_patents
	add	esp, 4
	mov	BYTE PTR _result$[ebp], al
$LN1@FT_Face_Ch:
; Line 258
	mov	al, BYTE PTR _result$[ebp]
; Line 259
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_FT_Face_CheckTrueTypePatents ENDP
_TEXT	ENDS
END
