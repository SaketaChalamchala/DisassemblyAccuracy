; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\mozilla\intl\icu\source\common\ucnv_u7.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	__UTF7Data_56
PUBLIC	__IMAPData_56
EXTRN	_ucnv_getCompleteUnicodeSet_56:PROC
CONST	SEGMENT
_encodeDirectlyMaximum DB 00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
_encodeDirectlyRestricted DB 00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
_toBase64 DB	041H
	DB	042H
	DB	043H
	DB	044H
	DB	045H
	DB	046H
	DB	047H
	DB	048H
	DB	049H
	DB	04aH
	DB	04bH
	DB	04cH
	DB	04dH
	DB	04eH
	DB	04fH
	DB	050H
	DB	051H
	DB	052H
	DB	053H
	DB	054H
	DB	055H
	DB	056H
	DB	057H
	DB	058H
	DB	059H
	DB	05aH
	DB	061H
	DB	062H
	DB	063H
	DB	064H
	DB	065H
	DB	066H
	DB	067H
	DB	068H
	DB	069H
	DB	06aH
	DB	06bH
	DB	06cH
	DB	06dH
	DB	06eH
	DB	06fH
	DB	070H
	DB	071H
	DB	072H
	DB	073H
	DB	074H
	DB	075H
	DB	076H
	DB	077H
	DB	078H
	DB	079H
	DB	07aH
	DB	030H
	DB	031H
	DB	032H
	DB	033H
	DB	034H
	DB	035H
	DB	036H
	DB	037H
	DB	038H
	DB	039H
	DB	02bH
	DB	02fH
_fromBase64 DB	0fdH
	DB	0fdH
	DB	0fdH
	DB	0fdH
	DB	0fdH
	DB	0fdH
	DB	0fdH
	DB	0fdH
	DB	0fdH
	DB	0ffH
	DB	0ffH
	DB	0fdH
	DB	0fdH
	DB	0ffH
	DB	0fdH
	DB	0fdH
	DB	0fdH
	DB	0fdH
	DB	0fdH
	DB	0fdH
	DB	0fdH
	DB	0fdH
	DB	0fdH
	DB	0fdH
	DB	0fdH
	DB	0fdH
	DB	0fdH
	DB	0fdH
	DB	0fdH
	DB	0fdH
	DB	0fdH
	DB	0fdH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	03eH
	DB	0ffH
	DB	0feH
	DB	0ffH
	DB	03fH
	DB	034H
	DB	035H
	DB	036H
	DB	037H
	DB	038H
	DB	039H
	DB	03aH
	DB	03bH
	DB	03cH
	DB	03dH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	09H
	DB	0aH
	DB	0bH
	DB	0cH
	DB	0dH
	DB	0eH
	DB	0fH
	DB	010H
	DB	011H
	DB	012H
	DB	013H
	DB	014H
	DB	015H
	DB	016H
	DB	017H
	DB	018H
	DB	019H
	DB	0ffH
	DB	0fdH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	01aH
	DB	01bH
	DB	01cH
	DB	01dH
	DB	01eH
	DB	01fH
	DB	020H
	DB	021H
	DB	022H
	DB	023H
	DB	024H
	DB	025H
	DB	026H
	DB	027H
	DB	028H
	DB	029H
	DB	02aH
	DB	02bH
	DB	02cH
	DB	02dH
	DB	02eH
	DB	02fH
	DB	030H
	DB	031H
	DB	032H
	DB	033H
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0fdH
	DB	0fdH
__UTF7Impl DD	01bH
	DD	00H
	DD	00H
	DD	FLAT:__UTF7Open
	DD	00H
	DD	FLAT:__UTF7Reset
	DD	FLAT:__UTF7ToUnicodeWithOffsets
	DD	FLAT:__UTF7ToUnicodeWithOffsets
	DD	FLAT:__UTF7FromUnicodeWithOffsets
	DD	FLAT:__UTF7FromUnicodeWithOffsets
	DD	00H
	DD	00H
	DD	FLAT:__UTF7GetName
	DD	00H
	DD	00H
	DD	FLAT:_ucnv_getCompleteUnicodeSet_56
	ORG $+8
__UTF7StaticData DD 064H
	DB	'UTF-7', 00H
	ORG $+54
	DD	00H
	DB	00H
	DB	01bH
	DB	01H
	DB	04H
	DB	03fH
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+4
__UTF7Data_56 DD 0e4H
	DD	0ffffffffH
	DD	00H
	DD	FLAT:__UTF7StaticData
	DB	00H
	DB	00H
	ORG $+2
	DD	FLAT:__UTF7Impl
	DD	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+1
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	ORG $+126
	DD	00H
	DD	00H
	DD	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+1
	DW	00H
	ORG $+2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	ORG $+4
__IMAPImpl DD	020H
	DD	00H
	DD	00H
	DD	FLAT:__UTF7Open
	DD	00H
	DD	FLAT:__UTF7Reset
	DD	FLAT:__IMAPToUnicodeWithOffsets
	DD	FLAT:__IMAPToUnicodeWithOffsets
	DD	FLAT:__IMAPFromUnicodeWithOffsets
	DD	FLAT:__IMAPFromUnicodeWithOffsets
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:_ucnv_getCompleteUnicodeSet_56
	ORG $+8
__IMAPStaticData DD 064H
	DB	'IMAP-mailbox-name', 00H
	ORG $+42
	DD	00H
	DB	00H
	DB	020H
	DB	01H
	DB	04H
	DB	03fH
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+4
__IMAPData_56 DD 0e4H
	DD	0ffffffffH
	DD	00H
	DD	FLAT:__IMAPStaticData
	DB	00H
	DB	00H
	ORG $+2
	DD	FLAT:__IMAPImpl
	DD	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+1
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	ORG $+126
	DD	00H
	DD	00H
	DD	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+1
	DW	00H
	ORG $+2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
CONST	ENDS
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File d:\mozilla\intl\icu\source\common\ucnv_u7.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT __UTF7Reset
_TEXT	SEGMENT
_cnv$ = 8						; size = 4
_choice$ = 12						; size = 4
__UTF7Reset PROC					; COMDAT
; Line 180
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 181
	cmp	DWORD PTR _choice$[ebp], 1
	jg	SHORT $LN2@UTF7Reset
; Line 183
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	DWORD PTR [eax+44], 16777216		; 01000000H
; Line 184
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	BYTE PTR [eax+36], 0
$LN2@UTF7Reset:
; Line 186
	cmp	DWORD PTR _choice$[ebp], 1
	je	SHORT $LN3@UTF7Reset
; Line 188
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	and	ecx, -268435456				; f0000000H
	or	ecx, 16777216				; 01000000H
	mov	edx, DWORD PTR _cnv$[ebp]
	mov	DWORD PTR [edx+52], ecx
$LN3@UTF7Reset:
; Line 190
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
__UTF7Reset ENDP
_TEXT	ENDS
EXTRN	__RTC_CheckEsp:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __UTF7Open
_TEXT	SEGMENT
_cnv$ = 8						; size = 4
_pArgs$ = 12						; size = 4
_pErrorCode$ = 16					; size = 4
__UTF7Open PROC						; COMDAT
; Line 195
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 196
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	and	ecx, 15					; 0000000fH
	cmp	ecx, 1
	ja	SHORT $LN2@UTF7Open
; Line 198
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	and	ecx, 15					; 0000000fH
	shl	ecx, 28					; 0000001cH
	mov	edx, DWORD PTR _cnv$[ebp]
	mov	DWORD PTR [edx+52], ecx
; Line 199
	push	0
	mov	eax, DWORD PTR _cnv$[ebp]
	push	eax
	call	__UTF7Reset
	add	esp, 8
; Line 200
	jmp	SHORT $LN3@UTF7Open
$LN2@UTF7Open:
; Line 201
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 1
$LN3@UTF7Open:
; Line 203
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__UTF7Open ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __UTF7ToUnicodeWithOffsets
_TEXT	SEGMENT
tv174 = -412						; size = 4
_status$7733 = -212					; size = 4
_b$ = -197						; size = 1
_nextSourceIndex$ = -188				; size = 4
_sourceIndex$ = -176					; size = 4
_base64Value$ = -161					; size = 1
_inDirectMode$ = -149					; size = 1
_base64Counter$ = -137					; size = 1
_bits$ = -128						; size = 2
_targetCapacity$ = -116					; size = 4
_length$ = -104						; size = 4
_byteIndex$ = -89					; size = 1
_bytes$ = -80						; size = 4
_offsets$ = -68						; size = 4
_targetLimit$ = -56					; size = 4
_target$ = -44						; size = 4
_sourceLimit$ = -32					; size = 4
_source$ = -20						; size = 4
_cnv$ = -8						; size = 4
_pArgs$ = 8						; size = 4
_pErrorCode$ = 12					; size = 4
__UTF7ToUnicodeWithOffsets PROC				; COMDAT
; Line 207
	push	ebp
	mov	ebp, esp
	sub	esp, 412				; 0000019cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-412]
	mov	ecx, 103				; 00000067H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 230
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _cnv$[ebp], ecx
; Line 232
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _source$[ebp], ecx
; Line 233
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _sourceLimit$[ebp], ecx
; Line 234
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _target$[ebp], ecx
; Line 235
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _targetLimit$[ebp], ecx
; Line 236
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR _offsets$[ebp], ecx
; Line 239
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	DWORD PTR _status$7733[ebp], ecx
; Line 240
	mov	eax, DWORD PTR _status$7733[ebp]
	shr	eax, 24					; 00000018H
	and	eax, 1
	mov	BYTE PTR _inDirectMode$[ebp], al
; Line 241
	mov	eax, DWORD PTR _status$7733[ebp]
	shr	eax, 16					; 00000010H
	mov	BYTE PTR _base64Counter$[ebp], al
; Line 242
	mov	ax, WORD PTR _status$7733[ebp]
	mov	WORD PTR _bits$[ebp], ax
; Line 244
	mov	eax, DWORD PTR _cnv$[ebp]
	add	eax, 37					; 00000025H
	mov	DWORD PTR _bytes$[ebp], eax
; Line 245
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	cl, BYTE PTR [eax+36]
	mov	BYTE PTR _byteIndex$[ebp], cl
; Line 248
	movzx	eax, BYTE PTR _byteIndex$[ebp]
	neg	eax
	sbb	eax, eax
	mov	DWORD PTR _sourceIndex$[ebp], eax
; Line 249
	mov	DWORD PTR _nextSourceIndex$[ebp], 0
; Line 251
	movsx	eax, BYTE PTR _inDirectMode$[ebp]
	test	eax, eax
	je	$unicodeMode$7753
$directMode$7738:
; Line 261
	mov	BYTE PTR _byteIndex$[ebp], 0
; Line 262
	mov	eax, DWORD PTR _sourceLimit$[ebp]
	sub	eax, DWORD PTR _source$[ebp]
	mov	DWORD PTR _length$[ebp], eax
; Line 263
	mov	eax, DWORD PTR _targetLimit$[ebp]
	sub	eax, DWORD PTR _target$[ebp]
	sar	eax, 1
	mov	DWORD PTR _targetCapacity$[ebp], eax
; Line 264
	mov	eax, DWORD PTR _length$[ebp]
	cmp	eax, DWORD PTR _targetCapacity$[ebp]
	jle	SHORT $LN41@UTF7ToUnic
; Line 265
	mov	eax, DWORD PTR _targetCapacity$[ebp]
	mov	DWORD PTR _length$[ebp], eax
$LN41@UTF7ToUnic:
; Line 267
	cmp	DWORD PTR _length$[ebp], 0
	jle	$LN40@UTF7ToUnic
; Line 268
	mov	eax, DWORD PTR _source$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _b$[ebp], cl
	mov	edx, DWORD PTR _source$[ebp]
	add	edx, 1
	mov	DWORD PTR _source$[ebp], edx
; Line 269
	movzx	eax, BYTE PTR _b$[ebp]
	sub	eax, 32					; 00000020H
	movzx	ecx, al
	cmp	ecx, 94					; 0000005eH
	jge	SHORT $LN38@UTF7ToUnic
	movzx	eax, BYTE PTR _b$[ebp]
	cmp	eax, 92					; 0000005cH
	jne	SHORT $LN39@UTF7ToUnic
$LN38@UTF7ToUnic:
	movzx	eax, BYTE PTR _b$[ebp]
	cmp	eax, 13					; 0000000dH
	je	SHORT $LN39@UTF7ToUnic
	movzx	eax, BYTE PTR _b$[ebp]
	cmp	eax, 10					; 0000000aH
	je	SHORT $LN39@UTF7ToUnic
	movzx	eax, BYTE PTR _b$[ebp]
	cmp	eax, 9
	je	SHORT $LN39@UTF7ToUnic
; Line 271
	mov	eax, DWORD PTR _bytes$[ebp]
	mov	cl, BYTE PTR _b$[ebp]
	mov	BYTE PTR [eax], cl
; Line 272
	mov	BYTE PTR _byteIndex$[ebp], 1
; Line 273
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 12			; 0000000cH
; Line 274
	jmp	$LN40@UTF7ToUnic
	jmp	$LN37@UTF7ToUnic
$LN39@UTF7ToUnic:
; Line 275
	movzx	eax, BYTE PTR _b$[ebp]
	cmp	eax, 43					; 0000002bH
	je	SHORT $LN36@UTF7ToUnic
; Line 277
	movzx	ax, BYTE PTR _b$[ebp]
	mov	ecx, DWORD PTR _target$[ebp]
	mov	WORD PTR [ecx], ax
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 2
	mov	DWORD PTR _target$[ebp], edx
; Line 278
	cmp	DWORD PTR _offsets$[ebp], 0
	je	SHORT $LN35@UTF7ToUnic
; Line 279
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _sourceIndex$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
	mov	eax, DWORD PTR _sourceIndex$[ebp]
	add	eax, 1
	mov	DWORD PTR _sourceIndex$[ebp], eax
$LN35@UTF7ToUnic:
; Line 281
	jmp	SHORT $LN37@UTF7ToUnic
$LN36@UTF7ToUnic:
; Line 283
	mov	eax, DWORD PTR _sourceIndex$[ebp]
	add	eax, 1
	mov	DWORD PTR _sourceIndex$[ebp], eax
	mov	ecx, DWORD PTR _sourceIndex$[ebp]
	mov	DWORD PTR _nextSourceIndex$[ebp], ecx
; Line 284
	mov	BYTE PTR _inDirectMode$[ebp], 0
; Line 285
	mov	BYTE PTR _byteIndex$[ebp], 0
; Line 286
	xor	eax, eax
	mov	WORD PTR _bits$[ebp], ax
; Line 287
	mov	BYTE PTR _base64Counter$[ebp], -1
; Line 288
	jmp	SHORT $unicodeMode$7753
$LN37@UTF7ToUnic:
; Line 290
	mov	eax, DWORD PTR _length$[ebp]
	sub	eax, 1
	mov	DWORD PTR _length$[ebp], eax
; Line 291
	jmp	$LN41@UTF7ToUnic
$LN40@UTF7ToUnic:
; Line 292
	mov	eax, DWORD PTR _source$[ebp]
	cmp	eax, DWORD PTR _sourceLimit$[ebp]
	jae	SHORT $LN33@UTF7ToUnic
	mov	eax, DWORD PTR _target$[ebp]
	cmp	eax, DWORD PTR _targetLimit$[ebp]
	jb	SHORT $LN33@UTF7ToUnic
; Line 294
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
$LN33@UTF7ToUnic:
; Line 296
	jmp	$LN32@UTF7ToUnic
$unicodeMode$7753:
; Line 308
	mov	eax, DWORD PTR _source$[ebp]
	cmp	eax, DWORD PTR _sourceLimit$[ebp]
	jae	$LN32@UTF7ToUnic
; Line 309
	mov	eax, DWORD PTR _target$[ebp]
	cmp	eax, DWORD PTR _targetLimit$[ebp]
	jae	$LN29@UTF7ToUnic
; Line 310
	mov	eax, DWORD PTR _source$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _b$[ebp], cl
	movzx	edx, BYTE PTR _byteIndex$[ebp]
	mov	eax, DWORD PTR _bytes$[ebp]
	mov	cl, BYTE PTR _b$[ebp]
	mov	BYTE PTR [eax+edx], cl
	mov	dl, BYTE PTR _byteIndex$[ebp]
	add	dl, 1
	mov	BYTE PTR _byteIndex$[ebp], dl
	mov	eax, DWORD PTR _source$[ebp]
	add	eax, 1
	mov	DWORD PTR _source$[ebp], eax
; Line 311
	mov	eax, DWORD PTR _nextSourceIndex$[ebp]
	add	eax, 1
	mov	DWORD PTR _nextSourceIndex$[ebp], eax
; Line 312
	mov	BYTE PTR _base64Value$[ebp], -3		; fffffffdH
; Line 313
	movzx	eax, BYTE PTR _b$[ebp]
	cmp	eax, 126				; 0000007eH
	jge	SHORT $LN27@UTF7ToUnic
	movzx	eax, BYTE PTR _b$[ebp]
	mov	cl, BYTE PTR _fromBase64[eax]
	mov	BYTE PTR _base64Value$[ebp], cl
	movsx	edx, BYTE PTR _base64Value$[ebp]
	cmp	edx, -3					; fffffffdH
	je	SHORT $LN27@UTF7ToUnic
	movsx	eax, BYTE PTR _base64Value$[ebp]
	cmp	eax, -1
	jne	$LN28@UTF7ToUnic
$LN27@UTF7ToUnic:
; Line 327
	mov	BYTE PTR _inDirectMode$[ebp], 1
; Line 328
	movsx	eax, BYTE PTR _base64Counter$[ebp]
	cmp	eax, -1
	jne	SHORT $LN26@UTF7ToUnic
; Line 331
	mov	eax, DWORD PTR _source$[ebp]
	sub	eax, 1
	mov	DWORD PTR _source$[ebp], eax
; Line 332
	mov	eax, DWORD PTR _bytes$[ebp]
	mov	BYTE PTR [eax], 43			; 0000002bH
; Line 333
	mov	BYTE PTR _byteIndex$[ebp], 1
; Line 334
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 12			; 0000000cH
; Line 335
	jmp	$LN32@UTF7ToUnic
	jmp	SHORT $LN25@UTF7ToUnic
$LN26@UTF7ToUnic:
; Line 336
	movzx	eax, WORD PTR _bits$[ebp]
	test	eax, eax
	je	SHORT $LN24@UTF7ToUnic
; Line 339
	mov	eax, DWORD PTR _source$[ebp]
	sub	eax, 1
	mov	DWORD PTR _source$[ebp], eax
; Line 340
	mov	al, BYTE PTR _byteIndex$[ebp]
	sub	al, 1
	mov	BYTE PTR _byteIndex$[ebp], al
; Line 341
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 12			; 0000000cH
; Line 342
	jmp	$LN32@UTF7ToUnic
; Line 343
	jmp	SHORT $LN25@UTF7ToUnic
$LN24@UTF7ToUnic:
; Line 345
	movsx	eax, BYTE PTR _base64Value$[ebp]
	cmp	eax, -3					; fffffffdH
	jne	SHORT $LN22@UTF7ToUnic
; Line 347
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 12			; 0000000cH
; Line 348
	jmp	$LN32@UTF7ToUnic
; Line 349
	jmp	SHORT $LN25@UTF7ToUnic
$LN22@UTF7ToUnic:
; Line 351
	mov	eax, DWORD PTR _source$[ebp]
	sub	eax, 1
	mov	DWORD PTR _source$[ebp], eax
; Line 352
	mov	eax, DWORD PTR _nextSourceIndex$[ebp]
	sub	eax, 1
	mov	DWORD PTR _sourceIndex$[ebp], eax
; Line 353
	jmp	$directMode$7738
$LN25@UTF7ToUnic:
; Line 355
	jmp	$LN20@UTF7ToUnic
$LN28@UTF7ToUnic:
; Line 356
	movsx	eax, BYTE PTR _base64Value$[ebp]
	test	eax, eax
	jl	$LN19@UTF7ToUnic
; Line 358
	movsx	eax, BYTE PTR _base64Counter$[ebp]
	mov	DWORD PTR tv174[ebp], eax
	mov	ecx, DWORD PTR tv174[ebp]
	add	ecx, 1
	mov	DWORD PTR tv174[ebp], ecx
	cmp	DWORD PTR tv174[ebp], 8
	ja	$LN17@UTF7ToUnic
	mov	edx, DWORD PTR tv174[ebp]
	jmp	DWORD PTR $LN46@UTF7ToUnic[edx*4]
$LN16@UTF7ToUnic:
; Line 361
	movsx	ax, BYTE PTR _base64Value$[ebp]
	mov	WORD PTR _bits$[ebp], ax
; Line 362
	mov	BYTE PTR _base64Counter$[ebp], 1
; Line 363
	jmp	$LN17@UTF7ToUnic
$LN15@UTF7ToUnic:
; Line 368
	movzx	eax, WORD PTR _bits$[ebp]
	shl	eax, 6
	movsx	ecx, BYTE PTR _base64Value$[ebp]
	or	eax, ecx
	mov	WORD PTR _bits$[ebp], ax
; Line 369
	mov	al, BYTE PTR _base64Counter$[ebp]
	add	al, 1
	mov	BYTE PTR _base64Counter$[ebp], al
; Line 370
	jmp	$LN17@UTF7ToUnic
$LN14@UTF7ToUnic:
; Line 372
	movzx	eax, WORD PTR _bits$[ebp]
	shl	eax, 4
	movsx	ecx, BYTE PTR _base64Value$[ebp]
	sar	ecx, 2
	or	eax, ecx
	mov	edx, DWORD PTR _target$[ebp]
	mov	WORD PTR [edx], ax
	mov	eax, DWORD PTR _target$[ebp]
	add	eax, 2
	mov	DWORD PTR _target$[ebp], eax
; Line 373
	cmp	DWORD PTR _offsets$[ebp], 0
	je	SHORT $LN13@UTF7ToUnic
; Line 374
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _sourceIndex$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
; Line 375
	mov	eax, DWORD PTR _nextSourceIndex$[ebp]
	sub	eax, 1
	mov	DWORD PTR _sourceIndex$[ebp], eax
$LN13@UTF7ToUnic:
; Line 377
	mov	eax, DWORD PTR _bytes$[ebp]
	mov	cl, BYTE PTR _b$[ebp]
	mov	BYTE PTR [eax], cl
; Line 378
	mov	BYTE PTR _byteIndex$[ebp], 1
; Line 379
	movsx	eax, BYTE PTR _base64Value$[ebp]
	and	eax, 3
	mov	WORD PTR _bits$[ebp], ax
; Line 380
	mov	BYTE PTR _base64Counter$[ebp], 3
; Line 381
	jmp	$LN17@UTF7ToUnic
$LN12@UTF7ToUnic:
; Line 383
	movzx	eax, WORD PTR _bits$[ebp]
	shl	eax, 2
	movsx	ecx, BYTE PTR _base64Value$[ebp]
	sar	ecx, 4
	or	eax, ecx
	mov	edx, DWORD PTR _target$[ebp]
	mov	WORD PTR [edx], ax
	mov	eax, DWORD PTR _target$[ebp]
	add	eax, 2
	mov	DWORD PTR _target$[ebp], eax
; Line 384
	cmp	DWORD PTR _offsets$[ebp], 0
	je	SHORT $LN11@UTF7ToUnic
; Line 385
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _sourceIndex$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
; Line 386
	mov	eax, DWORD PTR _nextSourceIndex$[ebp]
	sub	eax, 1
	mov	DWORD PTR _sourceIndex$[ebp], eax
$LN11@UTF7ToUnic:
; Line 388
	mov	eax, DWORD PTR _bytes$[ebp]
	mov	cl, BYTE PTR _b$[ebp]
	mov	BYTE PTR [eax], cl
; Line 389
	mov	BYTE PTR _byteIndex$[ebp], 1
; Line 390
	movsx	eax, BYTE PTR _base64Value$[ebp]
	and	eax, 15					; 0000000fH
	mov	WORD PTR _bits$[ebp], ax
; Line 391
	mov	BYTE PTR _base64Counter$[ebp], 6
; Line 392
	jmp	SHORT $LN17@UTF7ToUnic
$LN10@UTF7ToUnic:
; Line 394
	movzx	eax, WORD PTR _bits$[ebp]
	shl	eax, 6
	movsx	ecx, BYTE PTR _base64Value$[ebp]
	or	eax, ecx
	mov	edx, DWORD PTR _target$[ebp]
	mov	WORD PTR [edx], ax
	mov	eax, DWORD PTR _target$[ebp]
	add	eax, 2
	mov	DWORD PTR _target$[ebp], eax
; Line 395
	cmp	DWORD PTR _offsets$[ebp], 0
	je	SHORT $LN9@UTF7ToUnic
; Line 396
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _sourceIndex$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
; Line 397
	mov	eax, DWORD PTR _nextSourceIndex$[ebp]
	mov	DWORD PTR _sourceIndex$[ebp], eax
$LN9@UTF7ToUnic:
; Line 399
	mov	BYTE PTR _byteIndex$[ebp], 0
; Line 400
	xor	eax, eax
	mov	WORD PTR _bits$[ebp], ax
; Line 401
	mov	BYTE PTR _base64Counter$[ebp], 0
$LN17@UTF7ToUnic:
; Line 407
	jmp	SHORT $LN20@UTF7ToUnic
$LN19@UTF7ToUnic:
; Line 409
	mov	BYTE PTR _inDirectMode$[ebp], 1
; Line 410
	movsx	eax, BYTE PTR _base64Counter$[ebp]
	cmp	eax, -1
	jne	SHORT $LN6@UTF7ToUnic
; Line 412
	mov	eax, 43					; 0000002bH
	mov	ecx, DWORD PTR _target$[ebp]
	mov	WORD PTR [ecx], ax
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 2
	mov	DWORD PTR _target$[ebp], edx
; Line 413
	cmp	DWORD PTR _offsets$[ebp], 0
	je	SHORT $LN5@UTF7ToUnic
; Line 414
	mov	eax, DWORD PTR _sourceIndex$[ebp]
	sub	eax, 1
	mov	ecx, DWORD PTR _offsets$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
$LN5@UTF7ToUnic:
; Line 416
	jmp	SHORT $LN4@UTF7ToUnic
$LN6@UTF7ToUnic:
; Line 418
	movzx	eax, WORD PTR _bits$[ebp]
	test	eax, eax
	je	SHORT $LN4@UTF7ToUnic
; Line 420
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 12			; 0000000cH
; Line 421
	jmp	SHORT $LN32@UTF7ToUnic
$LN4@UTF7ToUnic:
; Line 424
	mov	eax, DWORD PTR _nextSourceIndex$[ebp]
	mov	DWORD PTR _sourceIndex$[ebp], eax
; Line 425
	jmp	$directMode$7738
$LN20@UTF7ToUnic:
; Line 427
	jmp	SHORT $LN2@UTF7ToUnic
$LN29@UTF7ToUnic:
; Line 429
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
; Line 430
	jmp	SHORT $LN32@UTF7ToUnic
$LN2@UTF7ToUnic:
; Line 432
	jmp	$unicodeMode$7753
$LN32@UTF7ToUnic:
; Line 435
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	cmp	DWORD PTR [eax], 0
	jg	SHORT $LN1@UTF7ToUnic
	mov	eax, DWORD PTR _pArgs$[ebp]
	movsx	ecx, BYTE PTR [eax+2]
	test	ecx, ecx
	je	SHORT $LN1@UTF7ToUnic
	mov	eax, DWORD PTR _source$[ebp]
	cmp	eax, DWORD PTR _sourceLimit$[ebp]
	jne	SHORT $LN1@UTF7ToUnic
	movzx	eax, WORD PTR _bits$[ebp]
	test	eax, eax
	jne	SHORT $LN1@UTF7ToUnic
; Line 442
	mov	BYTE PTR _byteIndex$[ebp], 0
$LN1@UTF7ToUnic:
; Line 446
	movsx	eax, BYTE PTR _inDirectMode$[ebp]
	shl	eax, 24					; 00000018H
	movzx	ecx, BYTE PTR _base64Counter$[ebp]
	shl	ecx, 16					; 00000010H
	or	eax, ecx
	movzx	edx, WORD PTR _bits$[ebp]
	or	eax, edx
	mov	ecx, DWORD PTR _cnv$[ebp]
	mov	DWORD PTR [ecx+44], eax
; Line 447
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	cl, BYTE PTR _byteIndex$[ebp]
	mov	BYTE PTR [eax+36], cl
; Line 450
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR _source$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 451
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR _target$[ebp]
	mov	DWORD PTR [eax+16], ecx
; Line 452
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR _offsets$[ebp]
	mov	DWORD PTR [eax+24], ecx
; Line 454
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN46@UTF7ToUnic:
	DD	$LN16@UTF7ToUnic
	DD	$LN16@UTF7ToUnic
	DD	$LN15@UTF7ToUnic
	DD	$LN14@UTF7ToUnic
	DD	$LN15@UTF7ToUnic
	DD	$LN15@UTF7ToUnic
	DD	$LN12@UTF7ToUnic
	DD	$LN15@UTF7ToUnic
	DD	$LN10@UTF7ToUnic
__UTF7ToUnicodeWithOffsets ENDP
_TEXT	ENDS
PUBLIC	??_C@_1FG@DHKPIIEL@?$AAb?$AAi?$AAt?$AAs?$AA?$DM?$AA?$DN?$AAs?$AAi?$AAz?$AAe?$AAo?$AAf?$AA?$CI?$AAt?$AAo?$AAB?$AAa?$AAs?$AAe?$AA6?$AA4?$AA?$CJ?$AA?1?$AAs?$AAi?$AAz?$AAe?$AAo?$AAf?$AA?$CI?$AAt?$AAo@ ; `string'
PUBLIC	??_C@_1FI@ONKPPLIA@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@ ; `string'
PUBLIC	?__LINE__Var@?1??_UTF7FromUnicodeWithOffsets@@9@9@a23a0f5e ; `_UTF7FromUnicodeWithOffsets'::`2'::__LINE__Var
EXTRN	__imp___wassert:PROC
;	COMDAT ??_C@_1FG@DHKPIIEL@?$AAb?$AAi?$AAt?$AAs?$AA?$DM?$AA?$DN?$AAs?$AAi?$AAz?$AAe?$AAo?$AAf?$AA?$CI?$AAt?$AAo?$AAB?$AAa?$AAs?$AAe?$AA6?$AA4?$AA?$CJ?$AA?1?$AAs?$AAi?$AAz?$AAe?$AAo?$AAf?$AA?$CI?$AAt?$AAo@
CONST	SEGMENT
??_C@_1FG@DHKPIIEL@?$AAb?$AAi?$AAt?$AAs?$AA?$DM?$AA?$DN?$AAs?$AAi?$AAz?$AAe?$AAo?$AAf?$AA?$CI?$AAt?$AAo?$AAB?$AAa?$AAs?$AAe?$AA6?$AA4?$AA?$CJ?$AA?1?$AAs?$AAi?$AAz?$AAe?$AAo?$AAf?$AA?$CI?$AAt?$AAo@ DB 'b'
	DB	00H, 'i', 00H, 't', 00H, 's', 00H, '<', 00H, '=', 00H, 's', 00H
	DB	'i', 00H, 'z', 00H, 'e', 00H, 'o', 00H, 'f', 00H, '(', 00H, 't'
	DB	00H, 'o', 00H, 'B', 00H, 'a', 00H, 's', 00H, 'e', 00H, '6', 00H
	DB	'4', 00H, ')', 00H, '/', 00H, 's', 00H, 'i', 00H, 'z', 00H, 'e'
	DB	00H, 'o', 00H, 'f', 00H, '(', 00H, 't', 00H, 'o', 00H, 'B', 00H
	DB	'a', 00H, 's', 00H, 'e', 00H, '6', 00H, '4', 00H, '[', 00H, '0'
	DB	00H, ']', 00H, ')', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1FI@ONKPPLIA@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@
CONST	SEGMENT
??_C@_1FI@ONKPPLIA@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@ DB 'd'
	DB	00H, ':', 00H, '\', 00H, 'm', 00H, 'o', 00H, 'z', 00H, 'i', 00H
	DB	'l', 00H, 'l', 00H, 'a', 00H, '\', 00H, 'i', 00H, 'n', 00H, 't'
	DB	00H, 'l', 00H, '\', 00H, 'i', 00H, 'c', 00H, 'u', 00H, '\', 00H
	DB	's', 00H, 'o', 00H, 'u', 00H, 'r', 00H, 'c', 00H, 'e', 00H, '\'
	DB	00H, 'c', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'o', 00H, 'n', 00H
	DB	'\', 00H, 'u', 00H, 'c', 00H, 'n', 00H, 'v', 00H, '_', 00H, 'u'
	DB	00H, '7', 00H, '.', 00H, 'c', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??_UTF7FromUnicodeWithOffsets@@9@9@a23a0f5e
_DATA	SEGMENT
?__LINE__Var@?1??_UTF7FromUnicodeWithOffsets@@9@9@a23a0f5e DD 01caH ; `_UTF7FromUnicodeWithOffsets'::`2'::__LINE__Var
; Function compile flags: /Odtp /RTCsu /ZI
_DATA	ENDS
;	COMDAT __UTF7FromUnicodeWithOffsets
_TEXT	SEGMENT
tv188 = -376						; size = 4
tv72 = -376						; size = 4
_status$7827 = -176					; size = 4
_inDirectMode$ = -161					; size = 1
_base64Counter$ = -149					; size = 1
_bits$ = -137						; size = 1
_encodeDirectly$ = -128					; size = 4
_c$ = -116						; size = 2
_sourceIndex$ = -104					; size = 4
_targetCapacity$ = -92					; size = 4
_length$ = -80						; size = 4
_offsets$ = -68						; size = 4
_targetLimit$ = -56					; size = 4
_target$ = -44						; size = 4
_sourceLimit$ = -32					; size = 4
_source$ = -20						; size = 4
_cnv$ = -8						; size = 4
_pArgs$ = 8						; size = 4
_pErrorCode$ = 12					; size = 4
__UTF7FromUnicodeWithOffsets PROC			; COMDAT
; Line 458
	push	ebp
	mov	ebp, esp
	sub	esp, 376				; 00000178H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-376]
	mov	ecx, 94					; 0000005eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 474
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _cnv$[ebp], ecx
; Line 477
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _source$[ebp], ecx
; Line 478
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _sourceLimit$[ebp], ecx
; Line 479
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _target$[ebp], ecx
; Line 480
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _targetLimit$[ebp], ecx
; Line 481
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR _offsets$[ebp], ecx
; Line 485
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	mov	DWORD PTR _status$7827[ebp], ecx
; Line 486
	cmp	DWORD PTR _status$7827[ebp], 268435456	; 10000000H
	jae	SHORT $LN65@UTF7FromUn
	mov	DWORD PTR tv72[ebp], OFFSET _encodeDirectlyMaximum
	jmp	SHORT $LN66@UTF7FromUn
$LN65@UTF7FromUn:
	mov	DWORD PTR tv72[ebp], OFFSET _encodeDirectlyRestricted
$LN66@UTF7FromUn:
	mov	eax, DWORD PTR tv72[ebp]
	mov	DWORD PTR _encodeDirectly$[ebp], eax
; Line 487
	mov	eax, DWORD PTR _status$7827[ebp]
	shr	eax, 24					; 00000018H
	and	eax, 1
	mov	BYTE PTR _inDirectMode$[ebp], al
; Line 488
	mov	eax, DWORD PTR _status$7827[ebp]
	shr	eax, 16					; 00000010H
	mov	BYTE PTR _base64Counter$[ebp], al
; Line 489
	mov	al, BYTE PTR _status$7827[ebp]
	mov	BYTE PTR _bits$[ebp], al
; Line 490
	movzx	eax, BYTE PTR _bits$[ebp]
	cmp	eax, 64					; 00000040H
	jbe	SHORT $LN67@UTF7FromUn
	mov	ecx, DWORD PTR ?__LINE__Var@?1??_UTF7FromUnicodeWithOffsets@@9@9@a23a0f5e
	add	ecx, 32					; 00000020H
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_1FI@ONKPPLIA@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@
	push	OFFSET ??_C@_1FG@DHKPIIEL@?$AAb?$AAi?$AAt?$AAs?$AA?$DM?$AA?$DN?$AAs?$AAi?$AAz?$AAe?$AAo?$AAf?$AA?$CI?$AAt?$AAo?$AAB?$AAa?$AAs?$AAe?$AA6?$AA4?$AA?$CJ?$AA?1?$AAs?$AAi?$AAz?$AAe?$AAo?$AAf?$AA?$CI?$AAt?$AAo@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN67@UTF7FromUn:
; Line 494
	mov	DWORD PTR _sourceIndex$[ebp], 0
; Line 496
	movsx	eax, BYTE PTR _inDirectMode$[ebp]
	test	eax, eax
	je	$unicodeMode$7858
$directMode$7836:
; Line 498
	mov	eax, DWORD PTR _sourceLimit$[ebp]
	sub	eax, DWORD PTR _source$[ebp]
	sar	eax, 1
	mov	DWORD PTR _length$[ebp], eax
; Line 499
	mov	eax, DWORD PTR _targetLimit$[ebp]
	sub	eax, DWORD PTR _target$[ebp]
	mov	DWORD PTR _targetCapacity$[ebp], eax
; Line 500
	mov	eax, DWORD PTR _length$[ebp]
	cmp	eax, DWORD PTR _targetCapacity$[ebp]
	jle	SHORT $LN60@UTF7FromUn
; Line 501
	mov	eax, DWORD PTR _targetCapacity$[ebp]
	mov	DWORD PTR _length$[ebp], eax
$LN60@UTF7FromUn:
; Line 503
	cmp	DWORD PTR _length$[ebp], 0
	jle	$LN59@UTF7FromUn
; Line 504
	mov	eax, DWORD PTR _source$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR _c$[ebp], cx
	mov	edx, DWORD PTR _source$[ebp]
	add	edx, 2
	mov	DWORD PTR _source$[ebp], edx
; Line 506
	movzx	eax, WORD PTR _c$[ebp]
	cmp	eax, 127				; 0000007fH
	jg	SHORT $LN58@UTF7FromUn
	movzx	eax, WORD PTR _c$[ebp]
	mov	ecx, DWORD PTR _encodeDirectly$[ebp]
	movsx	edx, BYTE PTR [ecx+eax]
	test	edx, edx
	je	SHORT $LN58@UTF7FromUn
; Line 508
	mov	eax, DWORD PTR _target$[ebp]
	mov	cl, BYTE PTR _c$[ebp]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 1
	mov	DWORD PTR _target$[ebp], edx
; Line 509
	cmp	DWORD PTR _offsets$[ebp], 0
	je	SHORT $LN57@UTF7FromUn
; Line 510
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _sourceIndex$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
	mov	eax, DWORD PTR _sourceIndex$[ebp]
	add	eax, 1
	mov	DWORD PTR _sourceIndex$[ebp], eax
$LN57@UTF7FromUn:
; Line 511
	jmp	$LN56@UTF7FromUn
$LN58@UTF7FromUn:
; Line 512
	movzx	eax, WORD PTR _c$[ebp]
	cmp	eax, 43					; 0000002bH
	jne	$LN55@UTF7FromUn
; Line 514
	mov	eax, DWORD PTR _target$[ebp]
	mov	BYTE PTR [eax], 43			; 0000002bH
	mov	ecx, DWORD PTR _target$[ebp]
	add	ecx, 1
	mov	DWORD PTR _target$[ebp], ecx
; Line 515
	mov	eax, DWORD PTR _target$[ebp]
	cmp	eax, DWORD PTR _targetLimit$[ebp]
	jae	SHORT $LN54@UTF7FromUn
; Line 516
	mov	eax, DWORD PTR _target$[ebp]
	mov	BYTE PTR [eax], 45			; 0000002dH
	mov	ecx, DWORD PTR _target$[ebp]
	add	ecx, 1
	mov	DWORD PTR _target$[ebp], ecx
; Line 517
	cmp	DWORD PTR _offsets$[ebp], 0
	je	SHORT $LN53@UTF7FromUn
; Line 518
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _sourceIndex$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
; Line 519
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _sourceIndex$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
	mov	eax, DWORD PTR _sourceIndex$[ebp]
	add	eax, 1
	mov	DWORD PTR _sourceIndex$[ebp], eax
$LN53@UTF7FromUn:
; Line 522
	jmp	$directMode$7836
; Line 523
	jmp	SHORT $LN52@UTF7FromUn
$LN54@UTF7FromUn:
; Line 524
	cmp	DWORD PTR _offsets$[ebp], 0
	je	SHORT $LN51@UTF7FromUn
; Line 525
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _sourceIndex$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
	mov	eax, DWORD PTR _sourceIndex$[ebp]
	add	eax, 1
	mov	DWORD PTR _sourceIndex$[ebp], eax
$LN51@UTF7FromUn:
; Line 527
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	BYTE PTR [eax+76], 45			; 0000002dH
; Line 528
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	BYTE PTR [eax+63], 1
; Line 529
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
; Line 530
	jmp	SHORT $LN59@UTF7FromUn
$LN52@UTF7FromUn:
; Line 532
	jmp	SHORT $LN56@UTF7FromUn
$LN55@UTF7FromUn:
; Line 534
	mov	eax, DWORD PTR _source$[ebp]
	sub	eax, 2
	mov	DWORD PTR _source$[ebp], eax
; Line 535
	mov	eax, DWORD PTR _target$[ebp]
	mov	BYTE PTR [eax], 43			; 0000002bH
	mov	ecx, DWORD PTR _target$[ebp]
	add	ecx, 1
	mov	DWORD PTR _target$[ebp], ecx
; Line 536
	cmp	DWORD PTR _offsets$[ebp], 0
	je	SHORT $LN49@UTF7FromUn
; Line 537
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _sourceIndex$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
$LN49@UTF7FromUn:
; Line 539
	mov	BYTE PTR _inDirectMode$[ebp], 0
; Line 540
	mov	BYTE PTR _base64Counter$[ebp], 0
; Line 541
	jmp	SHORT $unicodeMode$7858
$LN56@UTF7FromUn:
; Line 543
	mov	eax, DWORD PTR _length$[ebp]
	sub	eax, 1
	mov	DWORD PTR _length$[ebp], eax
; Line 544
	jmp	$LN60@UTF7FromUn
$LN59@UTF7FromUn:
; Line 545
	mov	eax, DWORD PTR _source$[ebp]
	cmp	eax, DWORD PTR _sourceLimit$[ebp]
	jae	SHORT $LN48@UTF7FromUn
	mov	eax, DWORD PTR _target$[ebp]
	cmp	eax, DWORD PTR _targetLimit$[ebp]
	jb	SHORT $LN48@UTF7FromUn
; Line 547
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
$LN48@UTF7FromUn:
; Line 549
	jmp	$LN47@UTF7FromUn
$unicodeMode$7858:
; Line 551
	mov	eax, DWORD PTR _source$[ebp]
	cmp	eax, DWORD PTR _sourceLimit$[ebp]
	jae	$LN47@UTF7FromUn
; Line 552
	mov	eax, DWORD PTR _target$[ebp]
	cmp	eax, DWORD PTR _targetLimit$[ebp]
	jae	$LN44@UTF7FromUn
; Line 553
	mov	eax, DWORD PTR _source$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR _c$[ebp], cx
	mov	edx, DWORD PTR _source$[ebp]
	add	edx, 2
	mov	DWORD PTR _source$[ebp], edx
; Line 554
	movzx	eax, WORD PTR _c$[ebp]
	cmp	eax, 127				; 0000007fH
	jg	$LN43@UTF7FromUn
	movzx	eax, WORD PTR _c$[ebp]
	mov	ecx, DWORD PTR _encodeDirectly$[ebp]
	movsx	edx, BYTE PTR [ecx+eax]
	test	edx, edx
	je	$LN43@UTF7FromUn
; Line 556
	mov	BYTE PTR _inDirectMode$[ebp], 1
; Line 559
	mov	eax, DWORD PTR _source$[ebp]
	sub	eax, 2
	mov	DWORD PTR _source$[ebp], eax
; Line 562
	movsx	eax, BYTE PTR _base64Counter$[ebp]
	test	eax, eax
	je	SHORT $LN42@UTF7FromUn
; Line 564
	movzx	eax, BYTE PTR _bits$[ebp]
	mov	ecx, DWORD PTR _target$[ebp]
	mov	dl, BYTE PTR _toBase64[eax]
	mov	BYTE PTR [ecx], dl
	mov	eax, DWORD PTR _target$[ebp]
	add	eax, 1
	mov	DWORD PTR _target$[ebp], eax
; Line 565
	cmp	DWORD PTR _offsets$[ebp], 0
	je	SHORT $LN42@UTF7FromUn
; Line 566
	mov	eax, DWORD PTR _sourceIndex$[ebp]
	sub	eax, 1
	mov	ecx, DWORD PTR _offsets$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
$LN42@UTF7FromUn:
; Line 569
	movzx	eax, WORD PTR _c$[ebp]
	movsx	ecx, BYTE PTR _fromBase64[eax]
	cmp	ecx, -1
	je	SHORT $LN40@UTF7FromUn
; Line 571
	mov	eax, DWORD PTR _target$[ebp]
	cmp	eax, DWORD PTR _targetLimit$[ebp]
	jae	SHORT $LN39@UTF7FromUn
; Line 572
	mov	eax, DWORD PTR _target$[ebp]
	mov	BYTE PTR [eax], 45			; 0000002dH
	mov	ecx, DWORD PTR _target$[ebp]
	add	ecx, 1
	mov	DWORD PTR _target$[ebp], ecx
; Line 573
	cmp	DWORD PTR _offsets$[ebp], 0
	je	SHORT $LN38@UTF7FromUn
; Line 574
	mov	eax, DWORD PTR _sourceIndex$[ebp]
	sub	eax, 1
	mov	ecx, DWORD PTR _offsets$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
$LN38@UTF7FromUn:
; Line 576
	jmp	SHORT $LN40@UTF7FromUn
$LN39@UTF7FromUn:
; Line 577
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	BYTE PTR [eax+76], 45			; 0000002dH
; Line 578
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	BYTE PTR [eax+63], 1
; Line 579
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
; Line 580
	jmp	$LN47@UTF7FromUn
$LN40@UTF7FromUn:
; Line 583
	jmp	$directMode$7836
; Line 584
	jmp	$LN36@UTF7FromUn
$LN43@UTF7FromUn:
; Line 594
	mov	al, BYTE PTR _base64Counter$[ebp]
	mov	BYTE PTR tv188[ebp], al
	cmp	BYTE PTR tv188[ebp], 0
	je	SHORT $LN33@UTF7FromUn
	cmp	BYTE PTR tv188[ebp], 1
	je	$LN28@UTF7FromUn
	cmp	BYTE PTR tv188[ebp], 2
	je	$LN20@UTF7FromUn
	jmp	$LN36@UTF7FromUn
$LN33@UTF7FromUn:
; Line 596
	movzx	eax, WORD PTR _c$[ebp]
	sar	eax, 10					; 0000000aH
	mov	ecx, DWORD PTR _target$[ebp]
	mov	dl, BYTE PTR _toBase64[eax]
	mov	BYTE PTR [ecx], dl
	mov	eax, DWORD PTR _target$[ebp]
	add	eax, 1
	mov	DWORD PTR _target$[ebp], eax
; Line 597
	mov	eax, DWORD PTR _target$[ebp]
	cmp	eax, DWORD PTR _targetLimit$[ebp]
	jae	SHORT $LN32@UTF7FromUn
; Line 598
	movzx	eax, WORD PTR _c$[ebp]
	sar	eax, 4
	and	eax, 63					; 0000003fH
	mov	ecx, DWORD PTR _target$[ebp]
	mov	dl, BYTE PTR _toBase64[eax]
	mov	BYTE PTR [ecx], dl
	mov	eax, DWORD PTR _target$[ebp]
	add	eax, 1
	mov	DWORD PTR _target$[ebp], eax
; Line 599
	cmp	DWORD PTR _offsets$[ebp], 0
	je	SHORT $LN31@UTF7FromUn
; Line 600
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _sourceIndex$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
; Line 601
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _sourceIndex$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
	mov	eax, DWORD PTR _sourceIndex$[ebp]
	add	eax, 1
	mov	DWORD PTR _sourceIndex$[ebp], eax
$LN31@UTF7FromUn:
; Line 603
	jmp	SHORT $LN30@UTF7FromUn
$LN32@UTF7FromUn:
; Line 604
	cmp	DWORD PTR _offsets$[ebp], 0
	je	SHORT $LN29@UTF7FromUn
; Line 605
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _sourceIndex$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
	mov	eax, DWORD PTR _sourceIndex$[ebp]
	add	eax, 1
	mov	DWORD PTR _sourceIndex$[ebp], eax
$LN29@UTF7FromUn:
; Line 607
	movzx	eax, WORD PTR _c$[ebp]
	sar	eax, 4
	and	eax, 63					; 0000003fH
	mov	ecx, DWORD PTR _cnv$[ebp]
	mov	dl, BYTE PTR _toBase64[eax]
	mov	BYTE PTR [ecx+76], dl
; Line 608
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	BYTE PTR [eax+63], 1
; Line 609
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
$LN30@UTF7FromUn:
; Line 611
	movzx	eax, WORD PTR _c$[ebp]
	and	eax, 15					; 0000000fH
	shl	eax, 2
	mov	BYTE PTR _bits$[ebp], al
; Line 612
	mov	BYTE PTR _base64Counter$[ebp], 1
; Line 613
	jmp	$LN36@UTF7FromUn
$LN28@UTF7FromUn:
; Line 615
	movzx	eax, BYTE PTR _bits$[ebp]
	movzx	ecx, WORD PTR _c$[ebp]
	sar	ecx, 14					; 0000000eH
	or	eax, ecx
	mov	edx, DWORD PTR _target$[ebp]
	mov	al, BYTE PTR _toBase64[eax]
	mov	BYTE PTR [edx], al
	mov	ecx, DWORD PTR _target$[ebp]
	add	ecx, 1
	mov	DWORD PTR _target$[ebp], ecx
; Line 616
	mov	eax, DWORD PTR _target$[ebp]
	cmp	eax, DWORD PTR _targetLimit$[ebp]
	jae	$LN27@UTF7FromUn
; Line 617
	movzx	eax, WORD PTR _c$[ebp]
	sar	eax, 8
	and	eax, 63					; 0000003fH
	mov	ecx, DWORD PTR _target$[ebp]
	mov	dl, BYTE PTR _toBase64[eax]
	mov	BYTE PTR [ecx], dl
	mov	eax, DWORD PTR _target$[ebp]
	add	eax, 1
	mov	DWORD PTR _target$[ebp], eax
; Line 618
	mov	eax, DWORD PTR _target$[ebp]
	cmp	eax, DWORD PTR _targetLimit$[ebp]
	jae	SHORT $LN26@UTF7FromUn
; Line 619
	movzx	eax, WORD PTR _c$[ebp]
	sar	eax, 2
	and	eax, 63					; 0000003fH
	mov	ecx, DWORD PTR _target$[ebp]
	mov	dl, BYTE PTR _toBase64[eax]
	mov	BYTE PTR [ecx], dl
	mov	eax, DWORD PTR _target$[ebp]
	add	eax, 1
	mov	DWORD PTR _target$[ebp], eax
; Line 620
	cmp	DWORD PTR _offsets$[ebp], 0
	je	SHORT $LN25@UTF7FromUn
; Line 621
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _sourceIndex$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
; Line 622
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _sourceIndex$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
; Line 623
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _sourceIndex$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
	mov	eax, DWORD PTR _sourceIndex$[ebp]
	add	eax, 1
	mov	DWORD PTR _sourceIndex$[ebp], eax
$LN25@UTF7FromUn:
; Line 625
	jmp	SHORT $LN24@UTF7FromUn
$LN26@UTF7FromUn:
; Line 626
	cmp	DWORD PTR _offsets$[ebp], 0
	je	SHORT $LN23@UTF7FromUn
; Line 627
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _sourceIndex$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
; Line 628
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _sourceIndex$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
	mov	eax, DWORD PTR _sourceIndex$[ebp]
	add	eax, 1
	mov	DWORD PTR _sourceIndex$[ebp], eax
$LN23@UTF7FromUn:
; Line 630
	movzx	eax, WORD PTR _c$[ebp]
	sar	eax, 2
	and	eax, 63					; 0000003fH
	mov	ecx, DWORD PTR _cnv$[ebp]
	mov	dl, BYTE PTR _toBase64[eax]
	mov	BYTE PTR [ecx+76], dl
; Line 631
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	BYTE PTR [eax+63], 1
; Line 632
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
$LN24@UTF7FromUn:
; Line 634
	jmp	SHORT $LN22@UTF7FromUn
$LN27@UTF7FromUn:
; Line 635
	cmp	DWORD PTR _offsets$[ebp], 0
	je	SHORT $LN21@UTF7FromUn
; Line 636
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _sourceIndex$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
	mov	eax, DWORD PTR _sourceIndex$[ebp]
	add	eax, 1
	mov	DWORD PTR _sourceIndex$[ebp], eax
$LN21@UTF7FromUn:
; Line 638
	movzx	eax, WORD PTR _c$[ebp]
	sar	eax, 8
	and	eax, 63					; 0000003fH
	mov	ecx, DWORD PTR _cnv$[ebp]
	mov	dl, BYTE PTR _toBase64[eax]
	mov	BYTE PTR [ecx+76], dl
; Line 639
	movzx	eax, WORD PTR _c$[ebp]
	sar	eax, 2
	and	eax, 63					; 0000003fH
	mov	ecx, DWORD PTR _cnv$[ebp]
	mov	dl, BYTE PTR _toBase64[eax]
	mov	BYTE PTR [ecx+77], dl
; Line 640
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	BYTE PTR [eax+63], 2
; Line 641
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
$LN22@UTF7FromUn:
; Line 643
	movzx	eax, WORD PTR _c$[ebp]
	and	eax, 3
	shl	eax, 4
	mov	BYTE PTR _bits$[ebp], al
; Line 644
	mov	BYTE PTR _base64Counter$[ebp], 2
; Line 645
	jmp	$LN36@UTF7FromUn
$LN20@UTF7FromUn:
; Line 647
	movzx	eax, BYTE PTR _bits$[ebp]
	movzx	ecx, WORD PTR _c$[ebp]
	sar	ecx, 12					; 0000000cH
	or	eax, ecx
	mov	edx, DWORD PTR _target$[ebp]
	mov	al, BYTE PTR _toBase64[eax]
	mov	BYTE PTR [edx], al
	mov	ecx, DWORD PTR _target$[ebp]
	add	ecx, 1
	mov	DWORD PTR _target$[ebp], ecx
; Line 648
	mov	eax, DWORD PTR _target$[ebp]
	cmp	eax, DWORD PTR _targetLimit$[ebp]
	jae	$LN19@UTF7FromUn
; Line 649
	movzx	eax, WORD PTR _c$[ebp]
	sar	eax, 6
	and	eax, 63					; 0000003fH
	mov	ecx, DWORD PTR _target$[ebp]
	mov	dl, BYTE PTR _toBase64[eax]
	mov	BYTE PTR [ecx], dl
	mov	eax, DWORD PTR _target$[ebp]
	add	eax, 1
	mov	DWORD PTR _target$[ebp], eax
; Line 650
	mov	eax, DWORD PTR _target$[ebp]
	cmp	eax, DWORD PTR _targetLimit$[ebp]
	jae	SHORT $LN18@UTF7FromUn
; Line 651
	movzx	eax, WORD PTR _c$[ebp]
	and	eax, 63					; 0000003fH
	mov	ecx, DWORD PTR _target$[ebp]
	mov	dl, BYTE PTR _toBase64[eax]
	mov	BYTE PTR [ecx], dl
	mov	eax, DWORD PTR _target$[ebp]
	add	eax, 1
	mov	DWORD PTR _target$[ebp], eax
; Line 652
	cmp	DWORD PTR _offsets$[ebp], 0
	je	SHORT $LN17@UTF7FromUn
; Line 653
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _sourceIndex$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
; Line 654
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _sourceIndex$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
; Line 655
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _sourceIndex$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
	mov	eax, DWORD PTR _sourceIndex$[ebp]
	add	eax, 1
	mov	DWORD PTR _sourceIndex$[ebp], eax
$LN17@UTF7FromUn:
; Line 657
	jmp	SHORT $LN16@UTF7FromUn
$LN18@UTF7FromUn:
; Line 658
	cmp	DWORD PTR _offsets$[ebp], 0
	je	SHORT $LN15@UTF7FromUn
; Line 659
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _sourceIndex$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
; Line 660
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _sourceIndex$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
	mov	eax, DWORD PTR _sourceIndex$[ebp]
	add	eax, 1
	mov	DWORD PTR _sourceIndex$[ebp], eax
$LN15@UTF7FromUn:
; Line 662
	movzx	eax, WORD PTR _c$[ebp]
	and	eax, 63					; 0000003fH
	mov	ecx, DWORD PTR _cnv$[ebp]
	mov	dl, BYTE PTR _toBase64[eax]
	mov	BYTE PTR [ecx+76], dl
; Line 663
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	BYTE PTR [eax+63], 1
; Line 664
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
$LN16@UTF7FromUn:
; Line 666
	jmp	SHORT $LN14@UTF7FromUn
$LN19@UTF7FromUn:
; Line 667
	cmp	DWORD PTR _offsets$[ebp], 0
	je	SHORT $LN13@UTF7FromUn
; Line 668
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _sourceIndex$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
	mov	eax, DWORD PTR _sourceIndex$[ebp]
	add	eax, 1
	mov	DWORD PTR _sourceIndex$[ebp], eax
$LN13@UTF7FromUn:
; Line 670
	movzx	eax, WORD PTR _c$[ebp]
	sar	eax, 6
	and	eax, 63					; 0000003fH
	mov	ecx, DWORD PTR _cnv$[ebp]
	mov	dl, BYTE PTR _toBase64[eax]
	mov	BYTE PTR [ecx+76], dl
; Line 671
	movzx	eax, WORD PTR _c$[ebp]
	and	eax, 63					; 0000003fH
	mov	ecx, DWORD PTR _cnv$[ebp]
	mov	dl, BYTE PTR _toBase64[eax]
	mov	BYTE PTR [ecx+77], dl
; Line 672
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	BYTE PTR [eax+63], 2
; Line 673
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
$LN14@UTF7FromUn:
; Line 675
	mov	BYTE PTR _bits$[ebp], 0
; Line 676
	mov	BYTE PTR _base64Counter$[ebp], 0
$LN36@UTF7FromUn:
; Line 683
	jmp	SHORT $LN11@UTF7FromUn
$LN44@UTF7FromUn:
; Line 685
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
; Line 686
	jmp	SHORT $LN47@UTF7FromUn
$LN11@UTF7FromUn:
; Line 688
	jmp	$unicodeMode$7858
$LN47@UTF7FromUn:
; Line 691
	mov	eax, DWORD PTR _pArgs$[ebp]
	movsx	ecx, BYTE PTR [eax+2]
	test	ecx, ecx
	je	$LN10@UTF7FromUn
	mov	eax, DWORD PTR _source$[ebp]
	cmp	eax, DWORD PTR _sourceLimit$[ebp]
	jb	$LN10@UTF7FromUn
; Line 693
	movsx	eax, BYTE PTR _inDirectMode$[ebp]
	test	eax, eax
	jne	$LN9@UTF7FromUn
; Line 694
	movsx	eax, BYTE PTR _base64Counter$[ebp]
	test	eax, eax
	je	SHORT $LN8@UTF7FromUn
; Line 695
	mov	eax, DWORD PTR _target$[ebp]
	cmp	eax, DWORD PTR _targetLimit$[ebp]
	jae	SHORT $LN7@UTF7FromUn
; Line 696
	movzx	eax, BYTE PTR _bits$[ebp]
	mov	ecx, DWORD PTR _target$[ebp]
	mov	dl, BYTE PTR _toBase64[eax]
	mov	BYTE PTR [ecx], dl
	mov	eax, DWORD PTR _target$[ebp]
	add	eax, 1
	mov	DWORD PTR _target$[ebp], eax
; Line 697
	cmp	DWORD PTR _offsets$[ebp], 0
	je	SHORT $LN6@UTF7FromUn
; Line 698
	mov	eax, DWORD PTR _sourceIndex$[ebp]
	sub	eax, 1
	mov	ecx, DWORD PTR _offsets$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
$LN6@UTF7FromUn:
; Line 700
	jmp	SHORT $LN8@UTF7FromUn
$LN7@UTF7FromUn:
; Line 701
	movzx	eax, BYTE PTR _bits$[ebp]
	mov	ecx, DWORD PTR _cnv$[ebp]
	movsx	edx, BYTE PTR [ecx+63]
	mov	ecx, DWORD PTR _cnv$[ebp]
	mov	al, BYTE PTR _toBase64[eax]
	mov	BYTE PTR [ecx+edx+76], al
	mov	ecx, DWORD PTR _cnv$[ebp]
	mov	dl, BYTE PTR [ecx+63]
	add	dl, 1
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	BYTE PTR [eax+63], dl
; Line 702
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
$LN8@UTF7FromUn:
; Line 706
	mov	eax, DWORD PTR _target$[ebp]
	cmp	eax, DWORD PTR _targetLimit$[ebp]
	jae	SHORT $LN4@UTF7FromUn
; Line 707
	mov	eax, DWORD PTR _target$[ebp]
	mov	BYTE PTR [eax], 45			; 0000002dH
	mov	ecx, DWORD PTR _target$[ebp]
	add	ecx, 1
	mov	DWORD PTR _target$[ebp], ecx
; Line 708
	cmp	DWORD PTR _offsets$[ebp], 0
	je	SHORT $LN3@UTF7FromUn
; Line 709
	mov	eax, DWORD PTR _sourceIndex$[ebp]
	sub	eax, 1
	mov	ecx, DWORD PTR _offsets$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
$LN3@UTF7FromUn:
; Line 711
	jmp	SHORT $LN9@UTF7FromUn
$LN4@UTF7FromUn:
; Line 712
	mov	eax, DWORD PTR _cnv$[ebp]
	movsx	ecx, BYTE PTR [eax+63]
	mov	edx, DWORD PTR _cnv$[ebp]
	mov	BYTE PTR [edx+ecx+76], 45		; 0000002dH
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	cl, BYTE PTR [eax+63]
	add	cl, 1
	mov	edx, DWORD PTR _cnv$[ebp]
	mov	BYTE PTR [edx+63], cl
; Line 713
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
$LN9@UTF7FromUn:
; Line 717
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	and	ecx, -268435456				; f0000000H
	or	ecx, 16777216				; 01000000H
	mov	edx, DWORD PTR _cnv$[ebp]
	mov	DWORD PTR [edx+52], ecx
; Line 718
	jmp	SHORT $LN1@UTF7FromUn
$LN10@UTF7FromUn:
; Line 722
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	and	ecx, -268435456				; f0000000H
	movsx	edx, BYTE PTR _inDirectMode$[ebp]
	shl	edx, 24					; 00000018H
	or	ecx, edx
	movsx	eax, BYTE PTR _base64Counter$[ebp]
	shl	eax, 16					; 00000010H
	or	ecx, eax
	movzx	edx, BYTE PTR _bits$[ebp]
	or	ecx, edx
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	DWORD PTR [eax+52], ecx
$LN1@UTF7FromUn:
; Line 726
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR _source$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 727
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR _target$[ebp]
	mov	DWORD PTR [eax+16], ecx
; Line 728
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR _offsets$[ebp]
	mov	DWORD PTR [eax+24], ecx
; Line 730
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 376				; 00000178H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__UTF7FromUnicodeWithOffsets ENDP
_TEXT	ENDS
PUBLIC	??_C@_05MBAANMHF@UTF?97?$AA@			; `string'
PUBLIC	??_C@_0BA@NPGHFHPO@UTF?97?0version?$DN1?$AA@	; `string'
;	COMDAT ??_C@_05MBAANMHF@UTF?97?$AA@
CONST	SEGMENT
??_C@_05MBAANMHF@UTF?97?$AA@ DB 'UTF-7', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@NPGHFHPO@UTF?97?0version?$DN1?$AA@
CONST	SEGMENT
??_C@_0BA@NPGHFHPO@UTF?97?0version?$DN1?$AA@ DB 'UTF-7,version=1', 00H ; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT __UTF7GetName
_TEXT	SEGMENT
tv66 = -196						; size = 4
_cnv$ = 8						; size = 4
__UTF7GetName PROC					; COMDAT
; Line 733
	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 734
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	shr	ecx, 28					; 0000001cH
	mov	DWORD PTR tv66[ebp], ecx
	cmp	DWORD PTR tv66[ebp], 1
	je	SHORT $LN2@UTF7GetNam
	jmp	SHORT $LN1@UTF7GetNam
$LN2@UTF7GetNam:
; Line 736
	mov	eax, OFFSET ??_C@_0BA@NPGHFHPO@UTF?97?0version?$DN1?$AA@
	jmp	SHORT $LN5@UTF7GetNam
$LN1@UTF7GetNam:
; Line 738
	mov	eax, OFFSET ??_C@_05MBAANMHF@UTF?97?$AA@
$LN5@UTF7GetNam:
; Line 740
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
__UTF7GetName ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __IMAPToUnicodeWithOffsets
_TEXT	SEGMENT
tv152 = -428						; size = 4
tv158 = -424						; size = 4
tv153 = -424						; size = 4
_status$7998 = -224					; size = 4
_b$ = -209						; size = 1
_c$ = -200						; size = 2
_nextSourceIndex$ = -188				; size = 4
_sourceIndex$ = -176					; size = 4
_base64Value$ = -161					; size = 1
_inDirectMode$ = -149					; size = 1
_base64Counter$ = -137					; size = 1
_bits$ = -128						; size = 2
_targetCapacity$ = -116					; size = 4
_length$ = -104						; size = 4
_byteIndex$ = -89					; size = 1
_bytes$ = -80						; size = 4
_offsets$ = -68						; size = 4
_targetLimit$ = -56					; size = 4
_target$ = -44						; size = 4
_sourceLimit$ = -32					; size = 4
_source$ = -20						; size = 4
_cnv$ = -8						; size = 4
_pArgs$ = 8						; size = 4
_pErrorCode$ = 12					; size = 4
__IMAPToUnicodeWithOffsets PROC				; COMDAT
; Line 886
	push	ebp
	mov	ebp, esp
	sub	esp, 428				; 000001acH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-428]
	mov	ecx, 107				; 0000006bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 911
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _cnv$[ebp], ecx
; Line 913
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _source$[ebp], ecx
; Line 914
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _sourceLimit$[ebp], ecx
; Line 915
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _target$[ebp], ecx
; Line 916
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _targetLimit$[ebp], ecx
; Line 917
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR _offsets$[ebp], ecx
; Line 920
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	DWORD PTR _status$7998[ebp], ecx
; Line 921
	mov	eax, DWORD PTR _status$7998[ebp]
	shr	eax, 24					; 00000018H
	and	eax, 1
	mov	BYTE PTR _inDirectMode$[ebp], al
; Line 922
	mov	eax, DWORD PTR _status$7998[ebp]
	shr	eax, 16					; 00000010H
	mov	BYTE PTR _base64Counter$[ebp], al
; Line 923
	mov	ax, WORD PTR _status$7998[ebp]
	mov	WORD PTR _bits$[ebp], ax
; Line 925
	mov	eax, DWORD PTR _cnv$[ebp]
	add	eax, 37					; 00000025H
	mov	DWORD PTR _bytes$[ebp], eax
; Line 926
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	cl, BYTE PTR [eax+36]
	mov	BYTE PTR _byteIndex$[ebp], cl
; Line 929
	movzx	eax, BYTE PTR _byteIndex$[ebp]
	neg	eax
	sbb	eax, eax
	mov	DWORD PTR _sourceIndex$[ebp], eax
; Line 930
	mov	DWORD PTR _nextSourceIndex$[ebp], 0
; Line 932
	movsx	eax, BYTE PTR _inDirectMode$[ebp]
	test	eax, eax
	je	$unicodeMode$8017
$directMode$8003:
; Line 941
	mov	BYTE PTR _byteIndex$[ebp], 0
; Line 942
	mov	eax, DWORD PTR _sourceLimit$[ebp]
	sub	eax, DWORD PTR _source$[ebp]
	mov	DWORD PTR _length$[ebp], eax
; Line 943
	mov	eax, DWORD PTR _targetLimit$[ebp]
	sub	eax, DWORD PTR _target$[ebp]
	sar	eax, 1
	mov	DWORD PTR _targetCapacity$[ebp], eax
; Line 944
	mov	eax, DWORD PTR _length$[ebp]
	cmp	eax, DWORD PTR _targetCapacity$[ebp]
	jle	SHORT $LN42@IMAPToUnic
; Line 945
	mov	eax, DWORD PTR _targetCapacity$[ebp]
	mov	DWORD PTR _length$[ebp], eax
$LN42@IMAPToUnic:
; Line 947
	cmp	DWORD PTR _length$[ebp], 0
	jle	$LN41@IMAPToUnic
; Line 948
	mov	eax, DWORD PTR _source$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _b$[ebp], cl
	mov	edx, DWORD PTR _source$[ebp]
	add	edx, 1
	mov	DWORD PTR _source$[ebp], edx
; Line 949
	movzx	eax, BYTE PTR _b$[ebp]
	cmp	eax, 32					; 00000020H
	jl	SHORT $LN39@IMAPToUnic
	movzx	eax, BYTE PTR _b$[ebp]
	cmp	eax, 126				; 0000007eH
	jle	SHORT $LN40@IMAPToUnic
$LN39@IMAPToUnic:
; Line 951
	mov	eax, DWORD PTR _bytes$[ebp]
	mov	cl, BYTE PTR _b$[ebp]
	mov	BYTE PTR [eax], cl
; Line 952
	mov	BYTE PTR _byteIndex$[ebp], 1
; Line 953
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 12			; 0000000cH
; Line 954
	jmp	$LN41@IMAPToUnic
	jmp	$LN38@IMAPToUnic
$LN40@IMAPToUnic:
; Line 955
	movzx	eax, BYTE PTR _b$[ebp]
	cmp	eax, 38					; 00000026H
	je	SHORT $LN37@IMAPToUnic
; Line 957
	movzx	ax, BYTE PTR _b$[ebp]
	mov	ecx, DWORD PTR _target$[ebp]
	mov	WORD PTR [ecx], ax
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 2
	mov	DWORD PTR _target$[ebp], edx
; Line 958
	cmp	DWORD PTR _offsets$[ebp], 0
	je	SHORT $LN36@IMAPToUnic
; Line 959
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _sourceIndex$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
	mov	eax, DWORD PTR _sourceIndex$[ebp]
	add	eax, 1
	mov	DWORD PTR _sourceIndex$[ebp], eax
$LN36@IMAPToUnic:
; Line 961
	jmp	SHORT $LN38@IMAPToUnic
$LN37@IMAPToUnic:
; Line 963
	mov	eax, DWORD PTR _sourceIndex$[ebp]
	add	eax, 1
	mov	DWORD PTR _sourceIndex$[ebp], eax
	mov	ecx, DWORD PTR _sourceIndex$[ebp]
	mov	DWORD PTR _nextSourceIndex$[ebp], ecx
; Line 964
	mov	BYTE PTR _inDirectMode$[ebp], 0
; Line 965
	mov	BYTE PTR _byteIndex$[ebp], 0
; Line 966
	xor	eax, eax
	mov	WORD PTR _bits$[ebp], ax
; Line 967
	mov	BYTE PTR _base64Counter$[ebp], -1
; Line 968
	jmp	SHORT $unicodeMode$8017
$LN38@IMAPToUnic:
; Line 970
	mov	eax, DWORD PTR _length$[ebp]
	sub	eax, 1
	mov	DWORD PTR _length$[ebp], eax
; Line 971
	jmp	$LN42@IMAPToUnic
$LN41@IMAPToUnic:
; Line 972
	mov	eax, DWORD PTR _source$[ebp]
	cmp	eax, DWORD PTR _sourceLimit$[ebp]
	jae	SHORT $LN34@IMAPToUnic
	mov	eax, DWORD PTR _target$[ebp]
	cmp	eax, DWORD PTR _targetLimit$[ebp]
	jb	SHORT $LN34@IMAPToUnic
; Line 974
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
$LN34@IMAPToUnic:
; Line 976
	jmp	$endloop$8037
$unicodeMode$8017:
; Line 989
	mov	eax, DWORD PTR _source$[ebp]
	cmp	eax, DWORD PTR _sourceLimit$[ebp]
	jae	$endloop$8037
; Line 990
	mov	eax, DWORD PTR _target$[ebp]
	cmp	eax, DWORD PTR _targetLimit$[ebp]
	jae	$LN30@IMAPToUnic
; Line 991
	mov	eax, DWORD PTR _source$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _b$[ebp], cl
	movzx	edx, BYTE PTR _byteIndex$[ebp]
	mov	eax, DWORD PTR _bytes$[ebp]
	mov	cl, BYTE PTR _b$[ebp]
	mov	BYTE PTR [eax+edx], cl
	mov	dl, BYTE PTR _byteIndex$[ebp]
	add	dl, 1
	mov	BYTE PTR _byteIndex$[ebp], dl
	mov	eax, DWORD PTR _source$[ebp]
	add	eax, 1
	mov	DWORD PTR _source$[ebp], eax
; Line 992
	mov	eax, DWORD PTR _nextSourceIndex$[ebp]
	add	eax, 1
	mov	DWORD PTR _nextSourceIndex$[ebp], eax
; Line 993
	movzx	eax, BYTE PTR _b$[ebp]
	cmp	eax, 126				; 0000007eH
	jle	SHORT $LN29@IMAPToUnic
; Line 995
	mov	BYTE PTR _inDirectMode$[ebp], 1
; Line 996
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 12			; 0000000cH
; Line 997
	jmp	$endloop$8037
	jmp	$LN28@IMAPToUnic
$LN29@IMAPToUnic:
; Line 998
	movzx	eax, BYTE PTR _b$[ebp]
	cmp	eax, 44					; 0000002cH
	jne	SHORT $LN49@IMAPToUnic
	mov	DWORD PTR tv153[ebp], 63		; 0000003fH
	jmp	SHORT $LN50@IMAPToUnic
$LN49@IMAPToUnic:
	movzx	ecx, BYTE PTR _b$[ebp]
	cmp	ecx, 47					; 0000002fH
	jne	SHORT $LN47@IMAPToUnic
	mov	DWORD PTR tv152[ebp], -1
	jmp	SHORT $LN48@IMAPToUnic
$LN47@IMAPToUnic:
	movzx	edx, BYTE PTR _b$[ebp]
	movsx	eax, BYTE PTR _fromBase64[edx]
	mov	DWORD PTR tv152[ebp], eax
$LN48@IMAPToUnic:
	mov	ecx, DWORD PTR tv152[ebp]
	mov	DWORD PTR tv153[ebp], ecx
$LN50@IMAPToUnic:
	mov	dl, BYTE PTR tv153[ebp]
	mov	BYTE PTR _base64Value$[ebp], dl
	movsx	eax, BYTE PTR _base64Value$[ebp]
	test	eax, eax
	jl	$LN27@IMAPToUnic
; Line 1000
	movsx	eax, BYTE PTR _base64Counter$[ebp]
	mov	DWORD PTR tv158[ebp], eax
	mov	ecx, DWORD PTR tv158[ebp]
	add	ecx, 1
	mov	DWORD PTR tv158[ebp], ecx
	cmp	DWORD PTR tv158[ebp], 8
	ja	$LN25@IMAPToUnic
	mov	edx, DWORD PTR tv158[ebp]
	jmp	DWORD PTR $LN51@IMAPToUnic[edx*4]
$LN24@IMAPToUnic:
; Line 1003
	movsx	ax, BYTE PTR _base64Value$[ebp]
	mov	WORD PTR _bits$[ebp], ax
; Line 1004
	mov	BYTE PTR _base64Counter$[ebp], 1
; Line 1005
	jmp	$LN25@IMAPToUnic
$LN23@IMAPToUnic:
; Line 1010
	movzx	eax, WORD PTR _bits$[ebp]
	shl	eax, 6
	movsx	ecx, BYTE PTR _base64Value$[ebp]
	or	eax, ecx
	mov	WORD PTR _bits$[ebp], ax
; Line 1011
	mov	al, BYTE PTR _base64Counter$[ebp]
	add	al, 1
	mov	BYTE PTR _base64Counter$[ebp], al
; Line 1012
	jmp	$LN25@IMAPToUnic
$LN22@IMAPToUnic:
; Line 1014
	movzx	eax, WORD PTR _bits$[ebp]
	shl	eax, 4
	movsx	ecx, BYTE PTR _base64Value$[ebp]
	sar	ecx, 2
	or	eax, ecx
	mov	WORD PTR _c$[ebp], ax
; Line 1015
	movzx	eax, WORD PTR _c$[ebp]
	cmp	eax, 32					; 00000020H
	jl	SHORT $LN21@IMAPToUnic
	movzx	eax, WORD PTR _c$[ebp]
	cmp	eax, 126				; 0000007eH
	jg	SHORT $LN21@IMAPToUnic
; Line 1017
	mov	BYTE PTR _inDirectMode$[ebp], 1
; Line 1018
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 12			; 0000000cH
; Line 1019
	jmp	$endloop$8037
$LN21@IMAPToUnic:
; Line 1021
	mov	eax, DWORD PTR _target$[ebp]
	mov	cx, WORD PTR _c$[ebp]
	mov	WORD PTR [eax], cx
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 2
	mov	DWORD PTR _target$[ebp], edx
; Line 1022
	cmp	DWORD PTR _offsets$[ebp], 0
	je	SHORT $LN20@IMAPToUnic
; Line 1023
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _sourceIndex$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
; Line 1024
	mov	eax, DWORD PTR _nextSourceIndex$[ebp]
	sub	eax, 1
	mov	DWORD PTR _sourceIndex$[ebp], eax
$LN20@IMAPToUnic:
; Line 1026
	mov	eax, DWORD PTR _bytes$[ebp]
	mov	cl, BYTE PTR _b$[ebp]
	mov	BYTE PTR [eax], cl
; Line 1027
	mov	BYTE PTR _byteIndex$[ebp], 1
; Line 1028
	movsx	eax, BYTE PTR _base64Value$[ebp]
	and	eax, 3
	mov	WORD PTR _bits$[ebp], ax
; Line 1029
	mov	BYTE PTR _base64Counter$[ebp], 3
; Line 1030
	jmp	$LN25@IMAPToUnic
$LN19@IMAPToUnic:
; Line 1032
	movzx	eax, WORD PTR _bits$[ebp]
	shl	eax, 2
	movsx	ecx, BYTE PTR _base64Value$[ebp]
	sar	ecx, 4
	or	eax, ecx
	mov	WORD PTR _c$[ebp], ax
; Line 1033
	movzx	eax, WORD PTR _c$[ebp]
	cmp	eax, 32					; 00000020H
	jl	SHORT $LN18@IMAPToUnic
	movzx	eax, WORD PTR _c$[ebp]
	cmp	eax, 126				; 0000007eH
	jg	SHORT $LN18@IMAPToUnic
; Line 1035
	mov	BYTE PTR _inDirectMode$[ebp], 1
; Line 1036
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 12			; 0000000cH
; Line 1037
	jmp	$endloop$8037
$LN18@IMAPToUnic:
; Line 1039
	mov	eax, DWORD PTR _target$[ebp]
	mov	cx, WORD PTR _c$[ebp]
	mov	WORD PTR [eax], cx
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 2
	mov	DWORD PTR _target$[ebp], edx
; Line 1040
	cmp	DWORD PTR _offsets$[ebp], 0
	je	SHORT $LN17@IMAPToUnic
; Line 1041
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _sourceIndex$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
; Line 1042
	mov	eax, DWORD PTR _nextSourceIndex$[ebp]
	sub	eax, 1
	mov	DWORD PTR _sourceIndex$[ebp], eax
$LN17@IMAPToUnic:
; Line 1044
	mov	eax, DWORD PTR _bytes$[ebp]
	mov	cl, BYTE PTR _b$[ebp]
	mov	BYTE PTR [eax], cl
; Line 1045
	mov	BYTE PTR _byteIndex$[ebp], 1
; Line 1046
	movsx	eax, BYTE PTR _base64Value$[ebp]
	and	eax, 15					; 0000000fH
	mov	WORD PTR _bits$[ebp], ax
; Line 1047
	mov	BYTE PTR _base64Counter$[ebp], 6
; Line 1048
	jmp	$LN25@IMAPToUnic
$LN16@IMAPToUnic:
; Line 1050
	movzx	eax, WORD PTR _bits$[ebp]
	shl	eax, 6
	movsx	ecx, BYTE PTR _base64Value$[ebp]
	or	eax, ecx
	mov	WORD PTR _c$[ebp], ax
; Line 1051
	movzx	eax, WORD PTR _c$[ebp]
	cmp	eax, 32					; 00000020H
	jl	SHORT $LN15@IMAPToUnic
	movzx	eax, WORD PTR _c$[ebp]
	cmp	eax, 126				; 0000007eH
	jg	SHORT $LN15@IMAPToUnic
; Line 1053
	mov	BYTE PTR _inDirectMode$[ebp], 1
; Line 1054
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 12			; 0000000cH
; Line 1055
	jmp	$endloop$8037
$LN15@IMAPToUnic:
; Line 1057
	mov	eax, DWORD PTR _target$[ebp]
	mov	cx, WORD PTR _c$[ebp]
	mov	WORD PTR [eax], cx
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 2
	mov	DWORD PTR _target$[ebp], edx
; Line 1058
	cmp	DWORD PTR _offsets$[ebp], 0
	je	SHORT $LN14@IMAPToUnic
; Line 1059
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _sourceIndex$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
; Line 1060
	mov	eax, DWORD PTR _nextSourceIndex$[ebp]
	mov	DWORD PTR _sourceIndex$[ebp], eax
$LN14@IMAPToUnic:
; Line 1062
	mov	BYTE PTR _byteIndex$[ebp], 0
; Line 1063
	xor	eax, eax
	mov	WORD PTR _bits$[ebp], ax
; Line 1064
	mov	BYTE PTR _base64Counter$[ebp], 0
$LN25@IMAPToUnic:
; Line 1070
	jmp	$LN28@IMAPToUnic
$LN27@IMAPToUnic:
	movsx	eax, BYTE PTR _base64Value$[ebp]
	cmp	eax, -2					; fffffffeH
	jne	$LN11@IMAPToUnic
; Line 1072
	mov	BYTE PTR _inDirectMode$[ebp], 1
; Line 1073
	movsx	eax, BYTE PTR _base64Counter$[ebp]
	cmp	eax, -1
	jne	SHORT $LN10@IMAPToUnic
; Line 1075
	mov	eax, 38					; 00000026H
	mov	ecx, DWORD PTR _target$[ebp]
	mov	WORD PTR [ecx], ax
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 2
	mov	DWORD PTR _target$[ebp], edx
; Line 1076
	cmp	DWORD PTR _offsets$[ebp], 0
	je	SHORT $LN9@IMAPToUnic
; Line 1077
	mov	eax, DWORD PTR _sourceIndex$[ebp]
	sub	eax, 1
	mov	ecx, DWORD PTR _offsets$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
$LN9@IMAPToUnic:
; Line 1079
	jmp	SHORT $LN8@IMAPToUnic
$LN10@IMAPToUnic:
; Line 1081
	movzx	eax, WORD PTR _bits$[ebp]
	test	eax, eax
	jne	SHORT $LN6@IMAPToUnic
	movsx	eax, BYTE PTR _base64Counter$[ebp]
	test	eax, eax
	je	SHORT $LN8@IMAPToUnic
	movsx	eax, BYTE PTR _base64Counter$[ebp]
	cmp	eax, 3
	je	SHORT $LN8@IMAPToUnic
	movsx	eax, BYTE PTR _base64Counter$[ebp]
	cmp	eax, 6
	je	SHORT $LN8@IMAPToUnic
$LN6@IMAPToUnic:
; Line 1084
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 12			; 0000000cH
; Line 1085
	jmp	SHORT $endloop$8037
$LN8@IMAPToUnic:
; Line 1088
	mov	eax, DWORD PTR _nextSourceIndex$[ebp]
	mov	DWORD PTR _sourceIndex$[ebp], eax
; Line 1089
	jmp	$directMode$8003
; Line 1090
	jmp	SHORT $LN28@IMAPToUnic
$LN11@IMAPToUnic:
; Line 1091
	movsx	eax, BYTE PTR _base64Counter$[ebp]
	cmp	eax, -1
	jne	SHORT $LN4@IMAPToUnic
; Line 1094
	mov	eax, DWORD PTR _sourceIndex$[ebp]
	sub	eax, 1
	mov	DWORD PTR _sourceIndex$[ebp], eax
; Line 1095
	mov	eax, DWORD PTR _bytes$[ebp]
	mov	BYTE PTR [eax], 38			; 00000026H
; Line 1096
	mov	eax, DWORD PTR _bytes$[ebp]
	mov	cl, BYTE PTR _b$[ebp]
	mov	BYTE PTR [eax+1], cl
; Line 1097
	mov	BYTE PTR _byteIndex$[ebp], 2
$LN4@IMAPToUnic:
; Line 1102
	mov	BYTE PTR _inDirectMode$[ebp], 1
; Line 1103
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 12			; 0000000cH
; Line 1104
	jmp	SHORT $endloop$8037
$LN28@IMAPToUnic:
; Line 1106
	jmp	SHORT $LN3@IMAPToUnic
$LN30@IMAPToUnic:
; Line 1108
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
; Line 1109
	jmp	SHORT $endloop$8037
$LN3@IMAPToUnic:
; Line 1111
	jmp	$unicodeMode$8017
$endloop$8037:
; Line 1128
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	cmp	DWORD PTR [eax], 0
	jg	SHORT $LN2@IMAPToUnic
	movsx	eax, BYTE PTR _inDirectMode$[ebp]
	test	eax, eax
	jne	SHORT $LN2@IMAPToUnic
	movzx	eax, BYTE PTR _byteIndex$[ebp]
	test	eax, eax
	jne	SHORT $LN2@IMAPToUnic
	mov	eax, DWORD PTR _pArgs$[ebp]
	movsx	ecx, BYTE PTR [eax+2]
	test	ecx, ecx
	je	SHORT $LN2@IMAPToUnic
	mov	eax, DWORD PTR _source$[ebp]
	cmp	eax, DWORD PTR _sourceLimit$[ebp]
	jb	SHORT $LN2@IMAPToUnic
; Line 1129
	movsx	eax, BYTE PTR _base64Counter$[ebp]
	cmp	eax, -1
	jne	SHORT $LN1@IMAPToUnic
; Line 1132
	mov	eax, DWORD PTR _bytes$[ebp]
	mov	BYTE PTR [eax], 38			; 00000026H
; Line 1133
	mov	BYTE PTR _byteIndex$[ebp], 1
$LN1@IMAPToUnic:
; Line 1137
	mov	BYTE PTR _inDirectMode$[ebp], 1
; Line 1138
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 11			; 0000000bH
$LN2@IMAPToUnic:
; Line 1142
	movsx	eax, BYTE PTR _inDirectMode$[ebp]
	shl	eax, 24					; 00000018H
	movzx	ecx, BYTE PTR _base64Counter$[ebp]
	shl	ecx, 16					; 00000010H
	or	eax, ecx
	movzx	edx, WORD PTR _bits$[ebp]
	or	eax, edx
	mov	ecx, DWORD PTR _cnv$[ebp]
	mov	DWORD PTR [ecx+44], eax
; Line 1143
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	cl, BYTE PTR _byteIndex$[ebp]
	mov	BYTE PTR [eax+36], cl
; Line 1146
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR _source$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 1147
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR _target$[ebp]
	mov	DWORD PTR [eax+16], ecx
; Line 1148
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR _offsets$[ebp]
	mov	DWORD PTR [eax+24], ecx
; Line 1150
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN51@IMAPToUnic:
	DD	$LN24@IMAPToUnic
	DD	$LN24@IMAPToUnic
	DD	$LN23@IMAPToUnic
	DD	$LN22@IMAPToUnic
	DD	$LN23@IMAPToUnic
	DD	$LN23@IMAPToUnic
	DD	$LN19@IMAPToUnic
	DD	$LN23@IMAPToUnic
	DD	$LN16@IMAPToUnic
__IMAPToUnicodeWithOffsets ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __IMAPFromUnicodeWithOffsets
_TEXT	SEGMENT
tv450 = -376						; size = 4
tv433 = -376						; size = 4
tv410 = -376						; size = 4
tv398 = -376						; size = 4
tv381 = -376						; size = 4
tv360 = -376						; size = 4
tv348 = -376						; size = 4
tv335 = -376						; size = 4
tv317 = -376						; size = 4
tv304 = -376						; size = 4
tv287 = -376						; size = 4
tv265 = -376						; size = 4
tv252 = -376						; size = 4
tv239 = -376						; size = 4
tv221 = -376						; size = 4
tv201 = -376						; size = 4
tv188 = -376						; size = 4
tv178 = -376						; size = 4
tv164 = -376						; size = 4
_status$8093 = -176					; size = 4
_inDirectMode$ = -161					; size = 1
_base64Counter$ = -149					; size = 1
_bits$ = -137						; size = 1
_b$ = -125						; size = 1
_c$ = -116						; size = 2
_sourceIndex$ = -104					; size = 4
_targetCapacity$ = -92					; size = 4
_length$ = -80						; size = 4
_offsets$ = -68						; size = 4
_targetLimit$ = -56					; size = 4
_target$ = -44						; size = 4
_sourceLimit$ = -32					; size = 4
_source$ = -20						; size = 4
_cnv$ = -8						; size = 4
_pArgs$ = 8						; size = 4
_pErrorCode$ = 12					; size = 4
__IMAPFromUnicodeWithOffsets PROC			; COMDAT
; Line 1154
	push	ebp
	mov	ebp, esp
	sub	esp, 376				; 00000178H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-376]
	mov	ecx, 94					; 0000005eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1170
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _cnv$[ebp], ecx
; Line 1173
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _source$[ebp], ecx
; Line 1174
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _sourceLimit$[ebp], ecx
; Line 1175
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _target$[ebp], ecx
; Line 1176
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _targetLimit$[ebp], ecx
; Line 1177
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR _offsets$[ebp], ecx
; Line 1181
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	mov	DWORD PTR _status$8093[ebp], ecx
; Line 1182
	mov	eax, DWORD PTR _status$8093[ebp]
	shr	eax, 24					; 00000018H
	and	eax, 1
	mov	BYTE PTR _inDirectMode$[ebp], al
; Line 1183
	mov	eax, DWORD PTR _status$8093[ebp]
	shr	eax, 16					; 00000010H
	mov	BYTE PTR _base64Counter$[ebp], al
; Line 1184
	mov	al, BYTE PTR _status$8093[ebp]
	mov	BYTE PTR _bits$[ebp], al
; Line 1188
	mov	DWORD PTR _sourceIndex$[ebp], 0
; Line 1190
	movsx	eax, BYTE PTR _inDirectMode$[ebp]
	test	eax, eax
	je	$unicodeMode$8120
$directMode$8098:
; Line 1192
	mov	eax, DWORD PTR _sourceLimit$[ebp]
	sub	eax, DWORD PTR _source$[ebp]
	sar	eax, 1
	mov	DWORD PTR _length$[ebp], eax
; Line 1193
	mov	eax, DWORD PTR _targetLimit$[ebp]
	sub	eax, DWORD PTR _target$[ebp]
	mov	DWORD PTR _targetCapacity$[ebp], eax
; Line 1194
	mov	eax, DWORD PTR _length$[ebp]
	cmp	eax, DWORD PTR _targetCapacity$[ebp]
	jle	SHORT $LN59@IMAPFromUn
; Line 1195
	mov	eax, DWORD PTR _targetCapacity$[ebp]
	mov	DWORD PTR _length$[ebp], eax
$LN59@IMAPFromUn:
; Line 1197
	cmp	DWORD PTR _length$[ebp], 0
	jle	$LN58@IMAPFromUn
; Line 1198
	mov	eax, DWORD PTR _source$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR _c$[ebp], cx
	mov	edx, DWORD PTR _source$[ebp]
	add	edx, 2
	mov	DWORD PTR _source$[ebp], edx
; Line 1200
	movzx	eax, WORD PTR _c$[ebp]
	cmp	eax, 32					; 00000020H
	jl	SHORT $LN57@IMAPFromUn
	movzx	eax, WORD PTR _c$[ebp]
	cmp	eax, 126				; 0000007eH
	jg	SHORT $LN57@IMAPFromUn
	movzx	eax, WORD PTR _c$[ebp]
	cmp	eax, 38					; 00000026H
	je	SHORT $LN57@IMAPFromUn
; Line 1202
	mov	eax, DWORD PTR _target$[ebp]
	mov	cl, BYTE PTR _c$[ebp]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 1
	mov	DWORD PTR _target$[ebp], edx
; Line 1203
	cmp	DWORD PTR _offsets$[ebp], 0
	je	SHORT $LN56@IMAPFromUn
; Line 1204
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _sourceIndex$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
	mov	eax, DWORD PTR _sourceIndex$[ebp]
	add	eax, 1
	mov	DWORD PTR _sourceIndex$[ebp], eax
$LN56@IMAPFromUn:
; Line 1205
	jmp	$LN55@IMAPFromUn
$LN57@IMAPFromUn:
; Line 1206
	movzx	eax, WORD PTR _c$[ebp]
	cmp	eax, 38					; 00000026H
	jne	$LN54@IMAPFromUn
; Line 1208
	mov	eax, DWORD PTR _target$[ebp]
	mov	BYTE PTR [eax], 38			; 00000026H
	mov	ecx, DWORD PTR _target$[ebp]
	add	ecx, 1
	mov	DWORD PTR _target$[ebp], ecx
; Line 1209
	mov	eax, DWORD PTR _target$[ebp]
	cmp	eax, DWORD PTR _targetLimit$[ebp]
	jae	SHORT $LN53@IMAPFromUn
; Line 1210
	mov	eax, DWORD PTR _target$[ebp]
	mov	BYTE PTR [eax], 45			; 0000002dH
	mov	ecx, DWORD PTR _target$[ebp]
	add	ecx, 1
	mov	DWORD PTR _target$[ebp], ecx
; Line 1211
	cmp	DWORD PTR _offsets$[ebp], 0
	je	SHORT $LN52@IMAPFromUn
; Line 1212
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _sourceIndex$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
; Line 1213
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _sourceIndex$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
	mov	eax, DWORD PTR _sourceIndex$[ebp]
	add	eax, 1
	mov	DWORD PTR _sourceIndex$[ebp], eax
$LN52@IMAPFromUn:
; Line 1216
	jmp	$directMode$8098
; Line 1217
	jmp	SHORT $LN51@IMAPFromUn
$LN53@IMAPFromUn:
; Line 1218
	cmp	DWORD PTR _offsets$[ebp], 0
	je	SHORT $LN50@IMAPFromUn
; Line 1219
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _sourceIndex$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
	mov	eax, DWORD PTR _sourceIndex$[ebp]
	add	eax, 1
	mov	DWORD PTR _sourceIndex$[ebp], eax
$LN50@IMAPFromUn:
; Line 1221
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	BYTE PTR [eax+76], 45			; 0000002dH
; Line 1222
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	BYTE PTR [eax+63], 1
; Line 1223
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
; Line 1224
	jmp	SHORT $LN58@IMAPFromUn
$LN51@IMAPFromUn:
; Line 1226
	jmp	SHORT $LN55@IMAPFromUn
$LN54@IMAPFromUn:
; Line 1228
	mov	eax, DWORD PTR _source$[ebp]
	sub	eax, 2
	mov	DWORD PTR _source$[ebp], eax
; Line 1229
	mov	eax, DWORD PTR _target$[ebp]
	mov	BYTE PTR [eax], 38			; 00000026H
	mov	ecx, DWORD PTR _target$[ebp]
	add	ecx, 1
	mov	DWORD PTR _target$[ebp], ecx
; Line 1230
	cmp	DWORD PTR _offsets$[ebp], 0
	je	SHORT $LN48@IMAPFromUn
; Line 1231
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _sourceIndex$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
$LN48@IMAPFromUn:
; Line 1233
	mov	BYTE PTR _inDirectMode$[ebp], 0
; Line 1234
	mov	BYTE PTR _base64Counter$[ebp], 0
; Line 1235
	jmp	SHORT $unicodeMode$8120
$LN55@IMAPFromUn:
; Line 1237
	mov	eax, DWORD PTR _length$[ebp]
	sub	eax, 1
	mov	DWORD PTR _length$[ebp], eax
; Line 1238
	jmp	$LN59@IMAPFromUn
$LN58@IMAPFromUn:
; Line 1239
	mov	eax, DWORD PTR _source$[ebp]
	cmp	eax, DWORD PTR _sourceLimit$[ebp]
	jae	SHORT $LN47@IMAPFromUn
	mov	eax, DWORD PTR _target$[ebp]
	cmp	eax, DWORD PTR _targetLimit$[ebp]
	jb	SHORT $LN47@IMAPFromUn
; Line 1241
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
$LN47@IMAPFromUn:
; Line 1243
	jmp	$LN46@IMAPFromUn
$unicodeMode$8120:
; Line 1245
	mov	eax, DWORD PTR _source$[ebp]
	cmp	eax, DWORD PTR _sourceLimit$[ebp]
	jae	$LN46@IMAPFromUn
; Line 1246
	mov	eax, DWORD PTR _target$[ebp]
	cmp	eax, DWORD PTR _targetLimit$[ebp]
	jae	$LN43@IMAPFromUn
; Line 1247
	mov	eax, DWORD PTR _source$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR _c$[ebp], cx
	mov	edx, DWORD PTR _source$[ebp]
	add	edx, 2
	mov	DWORD PTR _source$[ebp], edx
; Line 1248
	movzx	eax, WORD PTR _c$[ebp]
	cmp	eax, 32					; 00000020H
	jl	$LN42@IMAPFromUn
	movzx	eax, WORD PTR _c$[ebp]
	cmp	eax, 126				; 0000007eH
	jg	$LN42@IMAPFromUn
; Line 1250
	mov	BYTE PTR _inDirectMode$[ebp], 1
; Line 1253
	mov	eax, DWORD PTR _source$[ebp]
	sub	eax, 2
	mov	DWORD PTR _source$[ebp], eax
; Line 1256
	movsx	eax, BYTE PTR _base64Counter$[ebp]
	test	eax, eax
	je	SHORT $LN41@IMAPFromUn
; Line 1258
	movzx	eax, BYTE PTR _bits$[ebp]
	cmp	eax, 63					; 0000003fH
	jge	SHORT $LN64@IMAPFromUn
	movzx	ecx, BYTE PTR _bits$[ebp]
	movzx	edx, BYTE PTR _toBase64[ecx]
	mov	DWORD PTR tv164[ebp], edx
	jmp	SHORT $LN65@IMAPFromUn
$LN64@IMAPFromUn:
	mov	DWORD PTR tv164[ebp], 44		; 0000002cH
$LN65@IMAPFromUn:
	mov	eax, DWORD PTR _target$[ebp]
	mov	cl, BYTE PTR tv164[ebp]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 1
	mov	DWORD PTR _target$[ebp], edx
; Line 1259
	cmp	DWORD PTR _offsets$[ebp], 0
	je	SHORT $LN41@IMAPFromUn
; Line 1260
	mov	eax, DWORD PTR _sourceIndex$[ebp]
	sub	eax, 1
	mov	ecx, DWORD PTR _offsets$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
$LN41@IMAPFromUn:
; Line 1264
	mov	eax, DWORD PTR _target$[ebp]
	cmp	eax, DWORD PTR _targetLimit$[ebp]
	jae	SHORT $LN39@IMAPFromUn
; Line 1265
	mov	eax, DWORD PTR _target$[ebp]
	mov	BYTE PTR [eax], 45			; 0000002dH
	mov	ecx, DWORD PTR _target$[ebp]
	add	ecx, 1
	mov	DWORD PTR _target$[ebp], ecx
; Line 1266
	cmp	DWORD PTR _offsets$[ebp], 0
	je	SHORT $LN38@IMAPFromUn
; Line 1267
	mov	eax, DWORD PTR _sourceIndex$[ebp]
	sub	eax, 1
	mov	ecx, DWORD PTR _offsets$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
$LN38@IMAPFromUn:
; Line 1269
	jmp	SHORT $LN37@IMAPFromUn
$LN39@IMAPFromUn:
; Line 1270
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	BYTE PTR [eax+76], 45			; 0000002dH
; Line 1271
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	BYTE PTR [eax+63], 1
; Line 1272
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
; Line 1273
	jmp	$LN46@IMAPFromUn
$LN37@IMAPFromUn:
; Line 1275
	jmp	$directMode$8098
; Line 1276
	jmp	$LN36@IMAPFromUn
$LN42@IMAPFromUn:
; Line 1286
	mov	al, BYTE PTR _base64Counter$[ebp]
	mov	BYTE PTR tv178[ebp], al
	cmp	BYTE PTR tv178[ebp], 0
	je	SHORT $LN33@IMAPFromUn
	cmp	BYTE PTR tv178[ebp], 1
	je	$LN28@IMAPFromUn
	cmp	BYTE PTR tv178[ebp], 2
	je	$LN20@IMAPFromUn
	jmp	$LN36@IMAPFromUn
$LN33@IMAPFromUn:
; Line 1288
	movzx	eax, WORD PTR _c$[ebp]
	sar	eax, 10					; 0000000aH
	mov	BYTE PTR _b$[ebp], al
; Line 1289
	movzx	eax, BYTE PTR _b$[ebp]
	cmp	eax, 63					; 0000003fH
	jge	SHORT $LN66@IMAPFromUn
	movzx	ecx, BYTE PTR _b$[ebp]
	movzx	edx, BYTE PTR _toBase64[ecx]
	mov	DWORD PTR tv188[ebp], edx
	jmp	SHORT $LN67@IMAPFromUn
$LN66@IMAPFromUn:
	mov	DWORD PTR tv188[ebp], 44		; 0000002cH
$LN67@IMAPFromUn:
	mov	eax, DWORD PTR _target$[ebp]
	mov	cl, BYTE PTR tv188[ebp]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 1
	mov	DWORD PTR _target$[ebp], edx
; Line 1290
	mov	eax, DWORD PTR _target$[ebp]
	cmp	eax, DWORD PTR _targetLimit$[ebp]
	jae	SHORT $LN32@IMAPFromUn
; Line 1291
	movzx	eax, WORD PTR _c$[ebp]
	sar	eax, 4
	and	eax, 63					; 0000003fH
	mov	BYTE PTR _b$[ebp], al
; Line 1292
	movzx	eax, BYTE PTR _b$[ebp]
	cmp	eax, 63					; 0000003fH
	jge	SHORT $LN68@IMAPFromUn
	movzx	ecx, BYTE PTR _b$[ebp]
	movzx	edx, BYTE PTR _toBase64[ecx]
	mov	DWORD PTR tv201[ebp], edx
	jmp	SHORT $LN69@IMAPFromUn
$LN68@IMAPFromUn:
	mov	DWORD PTR tv201[ebp], 44		; 0000002cH
$LN69@IMAPFromUn:
	mov	eax, DWORD PTR _target$[ebp]
	mov	cl, BYTE PTR tv201[ebp]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 1
	mov	DWORD PTR _target$[ebp], edx
; Line 1293
	cmp	DWORD PTR _offsets$[ebp], 0
	je	SHORT $LN31@IMAPFromUn
; Line 1294
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _sourceIndex$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
; Line 1295
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _sourceIndex$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
	mov	eax, DWORD PTR _sourceIndex$[ebp]
	add	eax, 1
	mov	DWORD PTR _sourceIndex$[ebp], eax
$LN31@IMAPFromUn:
; Line 1297
	jmp	SHORT $LN30@IMAPFromUn
$LN32@IMAPFromUn:
; Line 1298
	cmp	DWORD PTR _offsets$[ebp], 0
	je	SHORT $LN29@IMAPFromUn
; Line 1299
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _sourceIndex$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
	mov	eax, DWORD PTR _sourceIndex$[ebp]
	add	eax, 1
	mov	DWORD PTR _sourceIndex$[ebp], eax
$LN29@IMAPFromUn:
; Line 1301
	movzx	eax, WORD PTR _c$[ebp]
	sar	eax, 4
	and	eax, 63					; 0000003fH
	mov	BYTE PTR _b$[ebp], al
; Line 1302
	movzx	eax, BYTE PTR _b$[ebp]
	cmp	eax, 63					; 0000003fH
	jge	SHORT $LN70@IMAPFromUn
	movzx	ecx, BYTE PTR _b$[ebp]
	movzx	edx, BYTE PTR _toBase64[ecx]
	mov	DWORD PTR tv221[ebp], edx
	jmp	SHORT $LN71@IMAPFromUn
$LN70@IMAPFromUn:
	mov	DWORD PTR tv221[ebp], 44		; 0000002cH
$LN71@IMAPFromUn:
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	cl, BYTE PTR tv221[ebp]
	mov	BYTE PTR [eax+76], cl
; Line 1303
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	BYTE PTR [eax+63], 1
; Line 1304
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
$LN30@IMAPFromUn:
; Line 1306
	movzx	eax, WORD PTR _c$[ebp]
	and	eax, 15					; 0000000fH
	shl	eax, 2
	mov	BYTE PTR _bits$[ebp], al
; Line 1307
	mov	BYTE PTR _base64Counter$[ebp], 1
; Line 1308
	jmp	$LN36@IMAPFromUn
$LN28@IMAPFromUn:
; Line 1310
	movzx	eax, BYTE PTR _bits$[ebp]
	movzx	ecx, WORD PTR _c$[ebp]
	sar	ecx, 14					; 0000000eH
	or	eax, ecx
	mov	BYTE PTR _b$[ebp], al
; Line 1311
	movzx	eax, BYTE PTR _b$[ebp]
	cmp	eax, 63					; 0000003fH
	jge	SHORT $LN72@IMAPFromUn
	movzx	ecx, BYTE PTR _b$[ebp]
	movzx	edx, BYTE PTR _toBase64[ecx]
	mov	DWORD PTR tv239[ebp], edx
	jmp	SHORT $LN73@IMAPFromUn
$LN72@IMAPFromUn:
	mov	DWORD PTR tv239[ebp], 44		; 0000002cH
$LN73@IMAPFromUn:
	mov	eax, DWORD PTR _target$[ebp]
	mov	cl, BYTE PTR tv239[ebp]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 1
	mov	DWORD PTR _target$[ebp], edx
; Line 1312
	mov	eax, DWORD PTR _target$[ebp]
	cmp	eax, DWORD PTR _targetLimit$[ebp]
	jae	$LN27@IMAPFromUn
; Line 1313
	movzx	eax, WORD PTR _c$[ebp]
	sar	eax, 8
	and	eax, 63					; 0000003fH
	mov	BYTE PTR _b$[ebp], al
; Line 1314
	movzx	eax, BYTE PTR _b$[ebp]
	cmp	eax, 63					; 0000003fH
	jge	SHORT $LN74@IMAPFromUn
	movzx	ecx, BYTE PTR _b$[ebp]
	movzx	edx, BYTE PTR _toBase64[ecx]
	mov	DWORD PTR tv252[ebp], edx
	jmp	SHORT $LN75@IMAPFromUn
$LN74@IMAPFromUn:
	mov	DWORD PTR tv252[ebp], 44		; 0000002cH
$LN75@IMAPFromUn:
	mov	eax, DWORD PTR _target$[ebp]
	mov	cl, BYTE PTR tv252[ebp]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 1
	mov	DWORD PTR _target$[ebp], edx
; Line 1315
	mov	eax, DWORD PTR _target$[ebp]
	cmp	eax, DWORD PTR _targetLimit$[ebp]
	jae	$LN26@IMAPFromUn
; Line 1316
	movzx	eax, WORD PTR _c$[ebp]
	sar	eax, 2
	and	eax, 63					; 0000003fH
	mov	BYTE PTR _b$[ebp], al
; Line 1317
	movzx	eax, BYTE PTR _b$[ebp]
	cmp	eax, 63					; 0000003fH
	jge	SHORT $LN76@IMAPFromUn
	movzx	ecx, BYTE PTR _b$[ebp]
	movzx	edx, BYTE PTR _toBase64[ecx]
	mov	DWORD PTR tv265[ebp], edx
	jmp	SHORT $LN77@IMAPFromUn
$LN76@IMAPFromUn:
	mov	DWORD PTR tv265[ebp], 44		; 0000002cH
$LN77@IMAPFromUn:
	mov	eax, DWORD PTR _target$[ebp]
	mov	cl, BYTE PTR tv265[ebp]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 1
	mov	DWORD PTR _target$[ebp], edx
; Line 1318
	cmp	DWORD PTR _offsets$[ebp], 0
	je	SHORT $LN25@IMAPFromUn
; Line 1319
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _sourceIndex$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
; Line 1320
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _sourceIndex$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
; Line 1321
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _sourceIndex$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
	mov	eax, DWORD PTR _sourceIndex$[ebp]
	add	eax, 1
	mov	DWORD PTR _sourceIndex$[ebp], eax
$LN25@IMAPFromUn:
; Line 1323
	jmp	$LN24@IMAPFromUn
$LN26@IMAPFromUn:
; Line 1324
	cmp	DWORD PTR _offsets$[ebp], 0
	je	SHORT $LN23@IMAPFromUn
; Line 1325
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _sourceIndex$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
; Line 1326
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _sourceIndex$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
	mov	eax, DWORD PTR _sourceIndex$[ebp]
	add	eax, 1
	mov	DWORD PTR _sourceIndex$[ebp], eax
$LN23@IMAPFromUn:
; Line 1328
	movzx	eax, WORD PTR _c$[ebp]
	sar	eax, 2
	and	eax, 63					; 0000003fH
	mov	BYTE PTR _b$[ebp], al
; Line 1329
	movzx	eax, BYTE PTR _b$[ebp]
	cmp	eax, 63					; 0000003fH
	jge	SHORT $LN78@IMAPFromUn
	movzx	ecx, BYTE PTR _b$[ebp]
	movzx	edx, BYTE PTR _toBase64[ecx]
	mov	DWORD PTR tv287[ebp], edx
	jmp	SHORT $LN79@IMAPFromUn
$LN78@IMAPFromUn:
	mov	DWORD PTR tv287[ebp], 44		; 0000002cH
$LN79@IMAPFromUn:
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	cl, BYTE PTR tv287[ebp]
	mov	BYTE PTR [eax+76], cl
; Line 1330
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	BYTE PTR [eax+63], 1
; Line 1331
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
$LN24@IMAPFromUn:
; Line 1333
	jmp	$LN22@IMAPFromUn
$LN27@IMAPFromUn:
; Line 1334
	cmp	DWORD PTR _offsets$[ebp], 0
	je	SHORT $LN21@IMAPFromUn
; Line 1335
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _sourceIndex$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
	mov	eax, DWORD PTR _sourceIndex$[ebp]
	add	eax, 1
	mov	DWORD PTR _sourceIndex$[ebp], eax
$LN21@IMAPFromUn:
; Line 1337
	movzx	eax, WORD PTR _c$[ebp]
	sar	eax, 8
	and	eax, 63					; 0000003fH
	mov	BYTE PTR _b$[ebp], al
; Line 1338
	movzx	eax, BYTE PTR _b$[ebp]
	cmp	eax, 63					; 0000003fH
	jge	SHORT $LN80@IMAPFromUn
	movzx	ecx, BYTE PTR _b$[ebp]
	movzx	edx, BYTE PTR _toBase64[ecx]
	mov	DWORD PTR tv304[ebp], edx
	jmp	SHORT $LN81@IMAPFromUn
$LN80@IMAPFromUn:
	mov	DWORD PTR tv304[ebp], 44		; 0000002cH
$LN81@IMAPFromUn:
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	cl, BYTE PTR tv304[ebp]
	mov	BYTE PTR [eax+76], cl
; Line 1339
	movzx	eax, WORD PTR _c$[ebp]
	sar	eax, 2
	and	eax, 63					; 0000003fH
	mov	BYTE PTR _b$[ebp], al
; Line 1340
	movzx	eax, BYTE PTR _b$[ebp]
	cmp	eax, 63					; 0000003fH
	jge	SHORT $LN82@IMAPFromUn
	movzx	ecx, BYTE PTR _b$[ebp]
	movzx	edx, BYTE PTR _toBase64[ecx]
	mov	DWORD PTR tv317[ebp], edx
	jmp	SHORT $LN83@IMAPFromUn
$LN82@IMAPFromUn:
	mov	DWORD PTR tv317[ebp], 44		; 0000002cH
$LN83@IMAPFromUn:
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	cl, BYTE PTR tv317[ebp]
	mov	BYTE PTR [eax+77], cl
; Line 1341
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	BYTE PTR [eax+63], 2
; Line 1342
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
$LN22@IMAPFromUn:
; Line 1344
	movzx	eax, WORD PTR _c$[ebp]
	and	eax, 3
	shl	eax, 4
	mov	BYTE PTR _bits$[ebp], al
; Line 1345
	mov	BYTE PTR _base64Counter$[ebp], 2
; Line 1346
	jmp	$LN36@IMAPFromUn
$LN20@IMAPFromUn:
; Line 1348
	movzx	eax, BYTE PTR _bits$[ebp]
	movzx	ecx, WORD PTR _c$[ebp]
	sar	ecx, 12					; 0000000cH
	or	eax, ecx
	mov	BYTE PTR _b$[ebp], al
; Line 1349
	movzx	eax, BYTE PTR _b$[ebp]
	cmp	eax, 63					; 0000003fH
	jge	SHORT $LN84@IMAPFromUn
	movzx	ecx, BYTE PTR _b$[ebp]
	movzx	edx, BYTE PTR _toBase64[ecx]
	mov	DWORD PTR tv335[ebp], edx
	jmp	SHORT $LN85@IMAPFromUn
$LN84@IMAPFromUn:
	mov	DWORD PTR tv335[ebp], 44		; 0000002cH
$LN85@IMAPFromUn:
	mov	eax, DWORD PTR _target$[ebp]
	mov	cl, BYTE PTR tv335[ebp]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 1
	mov	DWORD PTR _target$[ebp], edx
; Line 1350
	mov	eax, DWORD PTR _target$[ebp]
	cmp	eax, DWORD PTR _targetLimit$[ebp]
	jae	$LN19@IMAPFromUn
; Line 1351
	movzx	eax, WORD PTR _c$[ebp]
	sar	eax, 6
	and	eax, 63					; 0000003fH
	mov	BYTE PTR _b$[ebp], al
; Line 1352
	movzx	eax, BYTE PTR _b$[ebp]
	cmp	eax, 63					; 0000003fH
	jge	SHORT $LN86@IMAPFromUn
	movzx	ecx, BYTE PTR _b$[ebp]
	movzx	edx, BYTE PTR _toBase64[ecx]
	mov	DWORD PTR tv348[ebp], edx
	jmp	SHORT $LN87@IMAPFromUn
$LN86@IMAPFromUn:
	mov	DWORD PTR tv348[ebp], 44		; 0000002cH
$LN87@IMAPFromUn:
	mov	eax, DWORD PTR _target$[ebp]
	mov	cl, BYTE PTR tv348[ebp]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 1
	mov	DWORD PTR _target$[ebp], edx
; Line 1353
	mov	eax, DWORD PTR _target$[ebp]
	cmp	eax, DWORD PTR _targetLimit$[ebp]
	jae	$LN18@IMAPFromUn
; Line 1354
	movzx	eax, WORD PTR _c$[ebp]
	and	eax, 63					; 0000003fH
	mov	BYTE PTR _b$[ebp], al
; Line 1355
	movzx	eax, BYTE PTR _b$[ebp]
	cmp	eax, 63					; 0000003fH
	jge	SHORT $LN88@IMAPFromUn
	movzx	ecx, BYTE PTR _b$[ebp]
	movzx	edx, BYTE PTR _toBase64[ecx]
	mov	DWORD PTR tv360[ebp], edx
	jmp	SHORT $LN89@IMAPFromUn
$LN88@IMAPFromUn:
	mov	DWORD PTR tv360[ebp], 44		; 0000002cH
$LN89@IMAPFromUn:
	mov	eax, DWORD PTR _target$[ebp]
	mov	cl, BYTE PTR tv360[ebp]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 1
	mov	DWORD PTR _target$[ebp], edx
; Line 1356
	cmp	DWORD PTR _offsets$[ebp], 0
	je	SHORT $LN17@IMAPFromUn
; Line 1357
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _sourceIndex$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
; Line 1358
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _sourceIndex$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
; Line 1359
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _sourceIndex$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
	mov	eax, DWORD PTR _sourceIndex$[ebp]
	add	eax, 1
	mov	DWORD PTR _sourceIndex$[ebp], eax
$LN17@IMAPFromUn:
; Line 1361
	jmp	SHORT $LN16@IMAPFromUn
$LN18@IMAPFromUn:
; Line 1362
	cmp	DWORD PTR _offsets$[ebp], 0
	je	SHORT $LN15@IMAPFromUn
; Line 1363
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _sourceIndex$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
; Line 1364
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _sourceIndex$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
	mov	eax, DWORD PTR _sourceIndex$[ebp]
	add	eax, 1
	mov	DWORD PTR _sourceIndex$[ebp], eax
$LN15@IMAPFromUn:
; Line 1366
	movzx	eax, WORD PTR _c$[ebp]
	and	eax, 63					; 0000003fH
	mov	BYTE PTR _b$[ebp], al
; Line 1367
	movzx	eax, BYTE PTR _b$[ebp]
	cmp	eax, 63					; 0000003fH
	jge	SHORT $LN90@IMAPFromUn
	movzx	ecx, BYTE PTR _b$[ebp]
	movzx	edx, BYTE PTR _toBase64[ecx]
	mov	DWORD PTR tv381[ebp], edx
	jmp	SHORT $LN91@IMAPFromUn
$LN90@IMAPFromUn:
	mov	DWORD PTR tv381[ebp], 44		; 0000002cH
$LN91@IMAPFromUn:
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	cl, BYTE PTR tv381[ebp]
	mov	BYTE PTR [eax+76], cl
; Line 1368
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	BYTE PTR [eax+63], 1
; Line 1369
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
$LN16@IMAPFromUn:
; Line 1371
	jmp	$LN14@IMAPFromUn
$LN19@IMAPFromUn:
; Line 1372
	cmp	DWORD PTR _offsets$[ebp], 0
	je	SHORT $LN13@IMAPFromUn
; Line 1373
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _sourceIndex$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
	mov	eax, DWORD PTR _sourceIndex$[ebp]
	add	eax, 1
	mov	DWORD PTR _sourceIndex$[ebp], eax
$LN13@IMAPFromUn:
; Line 1375
	movzx	eax, WORD PTR _c$[ebp]
	sar	eax, 6
	and	eax, 63					; 0000003fH
	mov	BYTE PTR _b$[ebp], al
; Line 1376
	movzx	eax, BYTE PTR _b$[ebp]
	cmp	eax, 63					; 0000003fH
	jge	SHORT $LN92@IMAPFromUn
	movzx	ecx, BYTE PTR _b$[ebp]
	movzx	edx, BYTE PTR _toBase64[ecx]
	mov	DWORD PTR tv398[ebp], edx
	jmp	SHORT $LN93@IMAPFromUn
$LN92@IMAPFromUn:
	mov	DWORD PTR tv398[ebp], 44		; 0000002cH
$LN93@IMAPFromUn:
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	cl, BYTE PTR tv398[ebp]
	mov	BYTE PTR [eax+76], cl
; Line 1377
	movzx	eax, WORD PTR _c$[ebp]
	and	eax, 63					; 0000003fH
	mov	BYTE PTR _b$[ebp], al
; Line 1378
	movzx	eax, BYTE PTR _b$[ebp]
	cmp	eax, 63					; 0000003fH
	jge	SHORT $LN94@IMAPFromUn
	movzx	ecx, BYTE PTR _b$[ebp]
	movzx	edx, BYTE PTR _toBase64[ecx]
	mov	DWORD PTR tv410[ebp], edx
	jmp	SHORT $LN95@IMAPFromUn
$LN94@IMAPFromUn:
	mov	DWORD PTR tv410[ebp], 44		; 0000002cH
$LN95@IMAPFromUn:
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	cl, BYTE PTR tv410[ebp]
	mov	BYTE PTR [eax+77], cl
; Line 1379
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	BYTE PTR [eax+63], 2
; Line 1380
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
$LN14@IMAPFromUn:
; Line 1382
	mov	BYTE PTR _bits$[ebp], 0
; Line 1383
	mov	BYTE PTR _base64Counter$[ebp], 0
$LN36@IMAPFromUn:
; Line 1390
	jmp	SHORT $LN11@IMAPFromUn
$LN43@IMAPFromUn:
; Line 1392
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
; Line 1393
	jmp	SHORT $LN46@IMAPFromUn
$LN11@IMAPFromUn:
; Line 1395
	jmp	$unicodeMode$8120
$LN46@IMAPFromUn:
; Line 1398
	mov	eax, DWORD PTR _pArgs$[ebp]
	movsx	ecx, BYTE PTR [eax+2]
	test	ecx, ecx
	je	$LN10@IMAPFromUn
	mov	eax, DWORD PTR _source$[ebp]
	cmp	eax, DWORD PTR _sourceLimit$[ebp]
	jb	$LN10@IMAPFromUn
; Line 1400
	movsx	eax, BYTE PTR _inDirectMode$[ebp]
	test	eax, eax
	jne	$LN9@IMAPFromUn
; Line 1401
	movsx	eax, BYTE PTR _base64Counter$[ebp]
	test	eax, eax
	je	$LN8@IMAPFromUn
; Line 1402
	mov	eax, DWORD PTR _target$[ebp]
	cmp	eax, DWORD PTR _targetLimit$[ebp]
	jae	SHORT $LN7@IMAPFromUn
; Line 1403
	movzx	eax, BYTE PTR _bits$[ebp]
	cmp	eax, 63					; 0000003fH
	jge	SHORT $LN96@IMAPFromUn
	movzx	ecx, BYTE PTR _bits$[ebp]
	movzx	edx, BYTE PTR _toBase64[ecx]
	mov	DWORD PTR tv433[ebp], edx
	jmp	SHORT $LN97@IMAPFromUn
$LN96@IMAPFromUn:
	mov	DWORD PTR tv433[ebp], 44		; 0000002cH
$LN97@IMAPFromUn:
	mov	eax, DWORD PTR _target$[ebp]
	mov	cl, BYTE PTR tv433[ebp]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 1
	mov	DWORD PTR _target$[ebp], edx
; Line 1404
	cmp	DWORD PTR _offsets$[ebp], 0
	je	SHORT $LN6@IMAPFromUn
; Line 1405
	mov	eax, DWORD PTR _sourceIndex$[ebp]
	sub	eax, 1
	mov	ecx, DWORD PTR _offsets$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
$LN6@IMAPFromUn:
; Line 1407
	jmp	SHORT $LN8@IMAPFromUn
$LN7@IMAPFromUn:
; Line 1408
	movzx	eax, BYTE PTR _bits$[ebp]
	cmp	eax, 63					; 0000003fH
	jge	SHORT $LN98@IMAPFromUn
	movzx	ecx, BYTE PTR _bits$[ebp]
	movzx	edx, BYTE PTR _toBase64[ecx]
	mov	DWORD PTR tv450[ebp], edx
	jmp	SHORT $LN99@IMAPFromUn
$LN98@IMAPFromUn:
	mov	DWORD PTR tv450[ebp], 44		; 0000002cH
$LN99@IMAPFromUn:
	mov	eax, DWORD PTR _cnv$[ebp]
	movsx	ecx, BYTE PTR [eax+63]
	mov	edx, DWORD PTR _cnv$[ebp]
	mov	al, BYTE PTR tv450[ebp]
	mov	BYTE PTR [edx+ecx+76], al
	mov	ecx, DWORD PTR _cnv$[ebp]
	mov	dl, BYTE PTR [ecx+63]
	add	dl, 1
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	BYTE PTR [eax+63], dl
; Line 1409
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
$LN8@IMAPFromUn:
; Line 1413
	mov	eax, DWORD PTR _target$[ebp]
	cmp	eax, DWORD PTR _targetLimit$[ebp]
	jae	SHORT $LN4@IMAPFromUn
; Line 1414
	mov	eax, DWORD PTR _target$[ebp]
	mov	BYTE PTR [eax], 45			; 0000002dH
	mov	ecx, DWORD PTR _target$[ebp]
	add	ecx, 1
	mov	DWORD PTR _target$[ebp], ecx
; Line 1415
	cmp	DWORD PTR _offsets$[ebp], 0
	je	SHORT $LN3@IMAPFromUn
; Line 1416
	mov	eax, DWORD PTR _sourceIndex$[ebp]
	sub	eax, 1
	mov	ecx, DWORD PTR _offsets$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
$LN3@IMAPFromUn:
; Line 1418
	jmp	SHORT $LN9@IMAPFromUn
$LN4@IMAPFromUn:
; Line 1419
	mov	eax, DWORD PTR _cnv$[ebp]
	movsx	ecx, BYTE PTR [eax+63]
	mov	edx, DWORD PTR _cnv$[ebp]
	mov	BYTE PTR [edx+ecx+76], 45		; 0000002dH
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	cl, BYTE PTR [eax+63]
	add	cl, 1
	mov	edx, DWORD PTR _cnv$[ebp]
	mov	BYTE PTR [edx+63], cl
; Line 1420
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
$LN9@IMAPFromUn:
; Line 1424
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	and	ecx, -268435456				; f0000000H
	or	ecx, 16777216				; 01000000H
	mov	edx, DWORD PTR _cnv$[ebp]
	mov	DWORD PTR [edx+52], ecx
; Line 1425
	jmp	SHORT $LN1@IMAPFromUn
$LN10@IMAPFromUn:
; Line 1429
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	and	ecx, -268435456				; f0000000H
	movsx	edx, BYTE PTR _inDirectMode$[ebp]
	shl	edx, 24					; 00000018H
	or	ecx, edx
	movsx	eax, BYTE PTR _base64Counter$[ebp]
	shl	eax, 16					; 00000010H
	or	ecx, eax
	movzx	edx, BYTE PTR _bits$[ebp]
	or	ecx, edx
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	DWORD PTR [eax+52], ecx
$LN1@IMAPFromUn:
; Line 1433
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR _source$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 1434
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR _target$[ebp]
	mov	DWORD PTR [eax+16], ecx
; Line 1435
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR _offsets$[ebp]
	mov	DWORD PTR [eax+24], ecx
; Line 1437
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
__IMAPFromUnicodeWithOffsets ENDP
_TEXT	ENDS
END
