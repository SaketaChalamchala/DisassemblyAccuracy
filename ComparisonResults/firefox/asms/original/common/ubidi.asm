; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\mozilla\intl\icu\source\common\ubidi.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
_flagLR	DD	01H
	DD	02H
_flagE	DD	0800H
	DD	04000H
_flagO	DD	01000H
	DD	08000H
_groupProp DB	00H
	DB	01H
	DB	02H
	DB	07H
	DB	08H
	DB	03H
	DB	09H
	DB	06H
	DB	05H
	DB	04H
	DB	04H
	DB	0aH
	DB	0aH
	DB	0cH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0bH
	DB	0aH
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	0dH
	DB	0eH
	ORG $+7
_impTabProps DB	01H
	DB	02H
	DB	04H
	DB	05H
	DB	07H
	DB	0fH
	DB	011H
	DB	07H
	DB	09H
	DB	07H
	DB	00H
	DB	07H
	DB	03H
	DB	012H
	DB	015H
	DB	04H
	DB	01H
	DB	022H
	DB	024H
	DB	025H
	DB	027H
	DB	02fH
	DB	031H
	DB	027H
	DB	029H
	DB	027H
	DB	01H
	DB	01H
	DB	023H
	DB	032H
	DB	035H
	DB	00H
	DB	021H
	DB	02H
	DB	024H
	DB	025H
	DB	027H
	DB	02fH
	DB	031H
	DB	027H
	DB	029H
	DB	027H
	DB	02H
	DB	02H
	DB	023H
	DB	032H
	DB	035H
	DB	01H
	DB	021H
	DB	022H
	DB	026H
	DB	026H
	DB	028H
	DB	030H
	DB	031H
	DB	028H
	DB	028H
	DB	028H
	DB	03H
	DB	03H
	DB	03H
	DB	032H
	DB	035H
	DB	01H
	DB	021H
	DB	022H
	DB	04H
	DB	025H
	DB	027H
	DB	02fH
	DB	031H
	DB	04aH
	DB	0bH
	DB	04aH
	DB	04H
	DB	04H
	DB	023H
	DB	012H
	DB	015H
	DB	02H
	DB	021H
	DB	022H
	DB	024H
	DB	05H
	DB	027H
	DB	02fH
	DB	031H
	DB	027H
	DB	029H
	DB	04cH
	DB	05H
	DB	05H
	DB	023H
	DB	032H
	DB	035H
	DB	03H
	DB	021H
	DB	022H
	DB	06H
	DB	06H
	DB	028H
	DB	030H
	DB	031H
	DB	028H
	DB	028H
	DB	04dH
	DB	06H
	DB	06H
	DB	023H
	DB	012H
	DB	015H
	DB	03H
	DB	021H
	DB	022H
	DB	024H
	DB	025H
	DB	07H
	DB	02fH
	DB	031H
	DB	07H
	DB	04eH
	DB	07H
	DB	07H
	DB	07H
	DB	023H
	DB	032H
	DB	035H
	DB	04H
	DB	021H
	DB	022H
	DB	026H
	DB	026H
	DB	08H
	DB	030H
	DB	031H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	023H
	DB	032H
	DB	035H
	DB	04H
	DB	021H
	DB	022H
	DB	04H
	DB	025H
	DB	07H
	DB	02fH
	DB	031H
	DB	07H
	DB	09H
	DB	07H
	DB	09H
	DB	09H
	DB	023H
	DB	012H
	DB	015H
	DB	04H
	DB	061H
	DB	062H
	DB	04H
	DB	065H
	DB	087H
	DB	06fH
	DB	071H
	DB	087H
	DB	08eH
	DB	087H
	DB	0aH
	DB	087H
	DB	063H
	DB	012H
	DB	015H
	DB	02H
	DB	021H
	DB	022H
	DB	04H
	DB	025H
	DB	027H
	DB	02fH
	DB	031H
	DB	027H
	DB	0bH
	DB	027H
	DB	0bH
	DB	0bH
	DB	023H
	DB	012H
	DB	015H
	DB	02H
	DB	061H
	DB	062H
	DB	064H
	DB	05H
	DB	087H
	DB	06fH
	DB	071H
	DB	087H
	DB	08eH
	DB	087H
	DB	0cH
	DB	087H
	DB	063H
	DB	072H
	DB	075H
	DB	03H
	DB	061H
	DB	062H
	DB	06H
	DB	06H
	DB	088H
	DB	070H
	DB	071H
	DB	088H
	DB	088H
	DB	088H
	DB	0dH
	DB	088H
	DB	063H
	DB	012H
	DB	015H
	DB	03H
	DB	021H
	DB	022H
	DB	084H
	DB	025H
	DB	07H
	DB	02fH
	DB	031H
	DB	07H
	DB	0eH
	DB	07H
	DB	0eH
	DB	0eH
	DB	023H
	DB	092H
	DB	095H
	DB	04H
	DB	021H
	DB	022H
	DB	024H
	DB	025H
	DB	027H
	DB	0fH
	DB	031H
	DB	027H
	DB	029H
	DB	027H
	DB	0fH
	DB	027H
	DB	023H
	DB	032H
	DB	035H
	DB	05H
	DB	021H
	DB	022H
	DB	026H
	DB	026H
	DB	028H
	DB	010H
	DB	031H
	DB	028H
	DB	028H
	DB	028H
	DB	010H
	DB	028H
	DB	023H
	DB	032H
	DB	035H
	DB	05H
	DB	021H
	DB	022H
	DB	024H
	DB	025H
	DB	027H
	DB	02fH
	DB	011H
	DB	027H
	DB	029H
	DB	027H
	DB	011H
	DB	027H
	DB	023H
	DB	032H
	DB	035H
	DB	06H
	DB	021H
	DB	022H
	DB	012H
	DB	025H
	DB	027H
	DB	02fH
	DB	031H
	DB	053H
	DB	014H
	DB	053H
	DB	012H
	DB	012H
	DB	023H
	DB	012H
	DB	015H
	DB	00H
	DB	061H
	DB	062H
	DB	012H
	DB	065H
	DB	087H
	DB	06fH
	DB	071H
	DB	087H
	DB	08eH
	DB	087H
	DB	013H
	DB	087H
	DB	063H
	DB	012H
	DB	015H
	DB	00H
	DB	021H
	DB	022H
	DB	012H
	DB	025H
	DB	027H
	DB	02fH
	DB	031H
	DB	027H
	DB	014H
	DB	027H
	DB	014H
	DB	014H
	DB	023H
	DB	012H
	DB	015H
	DB	00H
	DB	021H
	DB	022H
	DB	015H
	DB	025H
	DB	027H
	DB	02fH
	DB	031H
	DB	056H
	DB	017H
	DB	056H
	DB	015H
	DB	015H
	DB	023H
	DB	012H
	DB	015H
	DB	03H
	DB	061H
	DB	062H
	DB	015H
	DB	065H
	DB	087H
	DB	06fH
	DB	071H
	DB	087H
	DB	08eH
	DB	087H
	DB	016H
	DB	087H
	DB	063H
	DB	012H
	DB	015H
	DB	03H
	DB	021H
	DB	022H
	DB	015H
	DB	025H
	DB	027H
	DB	02fH
	DB	031H
	DB	027H
	DB	017H
	DB	027H
	DB	017H
	DB	017H
	DB	023H
	DB	012H
	DB	015H
	DB	03H
_impTabL_DEFAULT DB 00H
	DB	01H
	DB	00H
	DB	02H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	03H
	DB	03H
	DB	014H
	DB	014H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	02H
	DB	015H
	DB	015H
	DB	00H
	DB	02H
	DB	00H
	DB	01H
	DB	03H
	DB	03H
	DB	014H
	DB	014H
	DB	00H
	DB	02H
	DB	00H
	DB	021H
	DB	033H
	DB	033H
	DB	04H
	DB	04H
	DB	00H
	DB	00H
	DB	00H
	DB	021H
	DB	00H
	DB	032H
	DB	05H
	DB	05H
	DB	00H
	DB	00H
_impTabR_DEFAULT DB 01H
	DB	00H
	DB	02H
	DB	02H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	03H
	DB	014H
	DB	014H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	02H
	DB	02H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	03H
	DB	05H
	DB	05H
	DB	00H
	DB	01H
	DB	021H
	DB	00H
	DB	021H
	DB	03H
	DB	04H
	DB	04H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	03H
	DB	05H
	DB	05H
	DB	00H
	DB	00H
_impAct0 DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	ORG $+3
_impTab_DEFAULT DD FLAT:_impTabL_DEFAULT
	DD	FLAT:_impTabR_DEFAULT
	DD	FLAT:_impAct0
	DD	FLAT:_impAct0
_impTabL_NUMBERS_SPECIAL DB 00H
	DB	02H
	DB	011H
	DB	011H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	042H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	02H
	DB	04H
	DB	04H
	DB	013H
	DB	013H
	DB	00H
	DB	01H
	DB	00H
	DB	022H
	DB	034H
	DB	034H
	DB	03H
	DB	03H
	DB	00H
	DB	00H
	DB	00H
	DB	02H
	DB	04H
	DB	04H
	DB	013H
	DB	013H
	DB	00H
	DB	02H
_impTab_NUMBERS_SPECIAL DD FLAT:_impTabL_NUMBERS_SPECIAL
	DD	FLAT:_impTabR_DEFAULT
	DD	FLAT:_impAct0
	DD	FLAT:_impAct0
_impTabL_GROUP_NUMBERS_WITH_R DB 00H
	DB	03H
	DB	011H
	DB	011H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	020H
	DB	03H
	DB	01H
	DB	01H
	DB	02H
	DB	020H
	DB	020H
	DB	02H
	DB	020H
	DB	03H
	DB	01H
	DB	01H
	DB	02H
	DB	020H
	DB	020H
	DB	01H
	DB	00H
	DB	03H
	DB	05H
	DB	05H
	DB	014H
	DB	00H
	DB	00H
	DB	01H
	DB	020H
	DB	03H
	DB	05H
	DB	05H
	DB	04H
	DB	020H
	DB	020H
	DB	01H
	DB	00H
	DB	03H
	DB	05H
	DB	05H
	DB	014H
	DB	00H
	DB	00H
	DB	02H
_impTabR_GROUP_NUMBERS_WITH_R DB 02H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	02H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	02H
	DB	00H
	DB	014H
	DB	014H
	DB	013H
	DB	00H
	DB	00H
	DB	01H
	DB	022H
	DB	00H
	DB	04H
	DB	04H
	DB	03H
	DB	00H
	DB	00H
	DB	00H
	DB	022H
	DB	00H
	DB	04H
	DB	04H
	DB	03H
	DB	00H
	DB	00H
	DB	01H
_impTab_GROUP_NUMBERS_WITH_R DD FLAT:_impTabL_GROUP_NUMBERS_WITH_R
	DD	FLAT:_impTabR_GROUP_NUMBERS_WITH_R
	DD	FLAT:_impAct0
	DD	FLAT:_impAct0
_impTabL_INVERSE_NUMBERS_AS_L DB 00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	014H
	DB	014H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	015H
	DB	015H
	DB	00H
	DB	02H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	014H
	DB	014H
	DB	00H
	DB	02H
	DB	020H
	DB	01H
	DB	020H
	DB	020H
	DB	04H
	DB	04H
	DB	020H
	DB	01H
	DB	020H
	DB	01H
	DB	020H
	DB	020H
	DB	05H
	DB	05H
	DB	020H
	DB	01H
_impTabR_INVERSE_NUMBERS_AS_L DB 01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	014H
	DB	014H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	05H
	DB	05H
	DB	00H
	DB	01H
	DB	021H
	DB	00H
	DB	021H
	DB	021H
	DB	04H
	DB	04H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	05H
	DB	05H
	DB	00H
	DB	00H
_impTab_INVERSE_NUMBERS_AS_L DD FLAT:_impTabL_INVERSE_NUMBERS_AS_L
	DD	FLAT:_impTabR_INVERSE_NUMBERS_AS_L
	DD	FLAT:_impAct0
	DD	FLAT:_impAct0
_impTabR_INVERSE_LIKE_DIRECT DB 01H
	DB	00H
	DB	02H
	DB	02H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	02H
	DB	013H
	DB	013H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	02H
	DB	02H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	021H
	DB	030H
	DB	06H
	DB	04H
	DB	03H
	DB	03H
	DB	030H
	DB	00H
	DB	021H
	DB	030H
	DB	06H
	DB	04H
	DB	05H
	DB	05H
	DB	030H
	DB	03H
	DB	021H
	DB	030H
	DB	06H
	DB	04H
	DB	05H
	DB	05H
	DB	030H
	DB	02H
	DB	021H
	DB	030H
	DB	06H
	DB	04H
	DB	03H
	DB	03H
	DB	030H
	DB	01H
_impAct1 DB	00H
	DB	01H
	DB	0dH
	DB	0eH
_impTab_INVERSE_LIKE_DIRECT DD FLAT:_impTabL_DEFAULT
	DD	FLAT:_impTabR_INVERSE_LIKE_DIRECT
	DD	FLAT:_impAct0
	DD	FLAT:_impAct1
_impTabL_INVERSE_LIKE_DIRECT_WITH_MARKS DB 00H
	DB	063H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	063H
	DB	00H
	DB	01H
	DB	012H
	DB	030H
	DB	00H
	DB	04H
	DB	020H
	DB	063H
	DB	020H
	DB	01H
	DB	02H
	DB	030H
	DB	020H
	DB	03H
	DB	00H
	DB	063H
	DB	055H
	DB	056H
	DB	014H
	DB	030H
	DB	00H
	DB	03H
	DB	030H
	DB	043H
	DB	055H
	DB	056H
	DB	04H
	DB	030H
	DB	030H
	DB	03H
	DB	030H
	DB	043H
	DB	05H
	DB	056H
	DB	014H
	DB	030H
	DB	030H
	DB	04H
	DB	030H
	DB	043H
	DB	055H
	DB	06H
	DB	014H
	DB	030H
	DB	030H
	DB	04H
_impTabR_INVERSE_LIKE_DIRECT_WITH_MARKS DB 013H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	023H
	DB	00H
	DB	01H
	DB	01H
	DB	02H
	DB	040H
	DB	00H
	DB	01H
	DB	023H
	DB	00H
	DB	01H
	DB	01H
	DB	02H
	DB	040H
	DB	00H
	DB	00H
	DB	03H
	DB	00H
	DB	03H
	DB	036H
	DB	014H
	DB	040H
	DB	00H
	DB	01H
	DB	053H
	DB	040H
	DB	05H
	DB	036H
	DB	04H
	DB	040H
	DB	040H
	DB	00H
	DB	053H
	DB	040H
	DB	05H
	DB	036H
	DB	04H
	DB	040H
	DB	040H
	DB	01H
	DB	053H
	DB	040H
	DB	06H
	DB	06H
	DB	04H
	DB	040H
	DB	040H
	DB	03H
_impAct2 DB	00H
	DB	01H
	DB	02H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	ORG $+1
_impAct3 DB	00H
	DB	01H
	DB	09H
	DB	0aH
	DB	0bH
	DB	0cH
	ORG $+2
_impTab_INVERSE_LIKE_DIRECT_WITH_MARKS DD FLAT:_impTabL_INVERSE_LIKE_DIRECT_WITH_MARKS
	DD	FLAT:_impTabR_INVERSE_LIKE_DIRECT_WITH_MARKS
	DD	FLAT:_impAct2
	DD	FLAT:_impAct3
_impTab_INVERSE_FOR_NUMBERS_SPECIAL DD FLAT:_impTabL_NUMBERS_SPECIAL
	DD	FLAT:_impTabR_INVERSE_LIKE_DIRECT
	DD	FLAT:_impAct0
	DD	FLAT:_impAct1
_impTabL_INVERSE_FOR_NUMBERS_SPECIAL_WITH_MARKS DB 00H
	DB	062H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	062H
	DB	01H
	DB	01H
	DB	00H
	DB	030H
	DB	00H
	DB	04H
	DB	00H
	DB	062H
	DB	054H
	DB	054H
	DB	013H
	DB	030H
	DB	00H
	DB	03H
	DB	030H
	DB	042H
	DB	054H
	DB	054H
	DB	03H
	DB	030H
	DB	030H
	DB	03H
	DB	030H
	DB	042H
	DB	04H
	DB	04H
	DB	013H
	DB	030H
	DB	030H
	DB	04H
_impTab_INVERSE_FOR_NUMBERS_SPECIAL_WITH_MARKS DD FLAT:_impTabL_INVERSE_FOR_NUMBERS_SPECIAL_WITH_MARKS
	DD	FLAT:_impTabR_INVERSE_LIKE_DIRECT_WITH_MARKS
	DD	FLAT:_impAct2
	DD	FLAT:_impAct3
CONST	ENDS
PUBLIC	_ubidi_openSized_56
PUBLIC	_ubidi_open_56
EXTRN	__RTC_CheckEsp:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File d:\mozilla\intl\icu\source\common\ubidi.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT _ubidi_open_56
_TEXT	SEGMENT
_errorCode$ = -8					; size = 4
_ubidi_open_56 PROC					; COMDAT
; Line 126
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 127
	mov	DWORD PTR _errorCode$[ebp], 0
; Line 128
	lea	eax, DWORD PTR _errorCode$[ebp]
	push	eax
	push	0
	push	0
	call	_ubidi_openSized_56
	add	esp, 12					; 0000000cH
; Line 129
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@ubidi_open
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN5@ubidi_open:
	DD	1
	DD	$LN4@ubidi_open
$LN4@ubidi_open:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN3@ubidi_open
$LN3@ubidi_open:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	67					; 00000043H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
_ubidi_open_56 ENDP
_TEXT	ENDS
PUBLIC	_ubidi_close_56
PUBLIC	_ubidi_getMemory_56
EXTRN	_ubidi_getSingleton_56:PROC
EXTRN	_memset:PROC
EXTRN	_uprv_malloc_56:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _ubidi_openSized_56
_TEXT	SEGMENT
_pBiDi$ = -8						; size = 4
_maxLength$ = 8						; size = 4
_maxRunCount$ = 12					; size = 4
_pErrorCode$ = 16					; size = 4
_ubidi_openSized_56 PROC				; COMDAT
; Line 132
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 136
	cmp	DWORD PTR _pErrorCode$[ebp], 0
	je	SHORT $LN16@ubidi_open@2
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN17@ubidi_open@2
$LN16@ubidi_open@2:
; Line 137
	xor	eax, eax
	jmp	$LN18@ubidi_open@2
	jmp	SHORT $LN15@ubidi_open@2
$LN17@ubidi_open@2:
; Line 138
	cmp	DWORD PTR _maxLength$[ebp], 0
	jl	SHORT $LN13@ubidi_open@2
	cmp	DWORD PTR _maxRunCount$[ebp], 0
	jge	SHORT $LN15@ubidi_open@2
$LN13@ubidi_open@2:
; Line 139
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 1
; Line 140
	xor	eax, eax
	jmp	$LN18@ubidi_open@2
$LN15@ubidi_open@2:
; Line 144
	push	364					; 0000016cH
	call	_uprv_malloc_56
	add	esp, 4
	mov	DWORD PTR _pBiDi$[ebp], eax
; Line 145
	cmp	DWORD PTR _pBiDi$[ebp], 0
	jne	SHORT $LN12@ubidi_open@2
; Line 146
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 7
; Line 147
	xor	eax, eax
	jmp	$LN18@ubidi_open@2
$LN12@ubidi_open@2:
; Line 151
	push	364					; 0000016cH
	push	0
	mov	eax, DWORD PTR _pBiDi$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
; Line 154
	call	_ubidi_getSingleton_56
	mov	ecx, DWORD PTR _pBiDi$[ebp]
	mov	DWORD PTR [ecx+4], eax
; Line 157
	cmp	DWORD PTR _maxLength$[ebp], 0
	jle	SHORT $LN11@ubidi_open@2
; Line 160
	mov	eax, DWORD PTR _maxLength$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _pBiDi$[ebp]
	add	ecx, 24					; 00000018H
	push	ecx
	mov	edx, DWORD PTR _pBiDi$[ebp]
	add	edx, 48					; 00000030H
	push	edx
	call	_ubidi_getMemory_56
	add	esp, 16					; 00000010H
	movsx	eax, al
	test	eax, eax
	je	SHORT $LN9@ubidi_open@2
	mov	eax, DWORD PTR _maxLength$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _pBiDi$[ebp]
	add	ecx, 28					; 0000001cH
	push	ecx
	mov	edx, DWORD PTR _pBiDi$[ebp]
	add	edx, 52					; 00000034H
	push	edx
	call	_ubidi_getMemory_56
	add	esp, 16					; 00000010H
	movsx	eax, al
	test	eax, eax
	jne	SHORT $LN10@ubidi_open@2
$LN9@ubidi_open@2:
; Line 161
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 7
$LN10@ubidi_open@2:
; Line 163
	jmp	SHORT $LN8@ubidi_open@2
$LN11@ubidi_open@2:
; Line 164
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	BYTE PTR [eax+72], 1
$LN8@ubidi_open@2:
; Line 167
	cmp	DWORD PTR _maxRunCount$[ebp], 0
	jle	SHORT $LN7@ubidi_open@2
; Line 168
	cmp	DWORD PTR _maxRunCount$[ebp], 1
	jne	SHORT $LN6@ubidi_open@2
; Line 170
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	DWORD PTR [eax+40], 12			; 0000000cH
	jmp	SHORT $LN5@ubidi_open@2
$LN6@ubidi_open@2:
; Line 171
	mov	eax, DWORD PTR _maxRunCount$[ebp]
	imul	eax, 12					; 0000000cH
	push	eax
	push	1
	mov	ecx, DWORD PTR _pBiDi$[ebp]
	add	ecx, 40					; 00000028H
	push	ecx
	mov	edx, DWORD PTR _pBiDi$[ebp]
	add	edx, 64					; 00000040H
	push	edx
	call	_ubidi_getMemory_56
	add	esp, 16					; 00000010H
	movsx	eax, al
	test	eax, eax
	jne	SHORT $LN5@ubidi_open@2
; Line 172
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 7
$LN5@ubidi_open@2:
; Line 174
	jmp	SHORT $LN3@ubidi_open@2
$LN7@ubidi_open@2:
; Line 175
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	BYTE PTR [eax+73], 1
$LN3@ubidi_open@2:
; Line 178
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	cmp	DWORD PTR [eax], 0
	jg	SHORT $LN2@ubidi_open@2
; Line 179
	mov	eax, DWORD PTR _pBiDi$[ebp]
	jmp	SHORT $LN18@ubidi_open@2
; Line 180
	jmp	SHORT $LN18@ubidi_open@2
$LN2@ubidi_open@2:
; Line 181
	mov	eax, DWORD PTR _pBiDi$[ebp]
	push	eax
	call	_ubidi_close_56
	add	esp, 4
; Line 182
	xor	eax, eax
$LN18@ubidi_open@2:
; Line 184
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ubidi_openSized_56 ENDP
_TEXT	ENDS
EXTRN	_uprv_realloc_56:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _ubidi_getMemory_56
_TEXT	SEGMENT
_memory$8666 = -20					; size = 4
_pMemory$ = -8						; size = 4
_bidiMem$ = 8						; size = 4
_pSize$ = 12						; size = 4
_mayAllocate$ = 16					; size = 1
_sizeNeeded$ = 20					; size = 4
_ubidi_getMemory_56 PROC				; COMDAT
; Line 200
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 201
	mov	eax, DWORD PTR _bidiMem$[ebp]
	mov	DWORD PTR _pMemory$[ebp], eax
; Line 203
	mov	eax, DWORD PTR _pMemory$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN10@ubidi_getM
; Line 205
	movsx	eax, BYTE PTR _mayAllocate$[ebp]
	test	eax, eax
	je	SHORT $LN9@ubidi_getM
	mov	eax, DWORD PTR _sizeNeeded$[ebp]
	push	eax
	call	_uprv_malloc_56
	add	esp, 4
	mov	ecx, DWORD PTR _pMemory$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	edx, DWORD PTR _pMemory$[ebp]
	cmp	DWORD PTR [edx], 0
	je	SHORT $LN9@ubidi_getM
; Line 206
	mov	eax, DWORD PTR _pSize$[ebp]
	mov	ecx, DWORD PTR _sizeNeeded$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 207
	mov	al, 1
	jmp	SHORT $LN11@ubidi_getM
; Line 208
	jmp	SHORT $LN8@ubidi_getM
$LN9@ubidi_getM:
; Line 209
	xor	al, al
	jmp	SHORT $LN11@ubidi_getM
$LN8@ubidi_getM:
; Line 211
	jmp	SHORT $LN11@ubidi_getM
$LN10@ubidi_getM:
; Line 212
	mov	eax, DWORD PTR _pSize$[ebp]
	mov	ecx, DWORD PTR _sizeNeeded$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jg	SHORT $LN6@ubidi_getM
; Line 214
	mov	al, 1
	jmp	SHORT $LN11@ubidi_getM
	jmp	SHORT $LN11@ubidi_getM
$LN6@ubidi_getM:
; Line 216
	movsx	eax, BYTE PTR _mayAllocate$[ebp]
	test	eax, eax
	jne	SHORT $LN4@ubidi_getM
; Line 218
	xor	al, al
	jmp	SHORT $LN11@ubidi_getM
; Line 219
	jmp	SHORT $LN11@ubidi_getM
$LN4@ubidi_getM:
; Line 226
	mov	eax, DWORD PTR _sizeNeeded$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pMemory$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_uprv_realloc_56
	add	esp, 8
	mov	DWORD PTR _memory$8666[ebp], eax
	cmp	DWORD PTR _memory$8666[ebp], 0
	je	SHORT $LN2@ubidi_getM
; Line 227
	mov	eax, DWORD PTR _pMemory$[ebp]
	mov	ecx, DWORD PTR _memory$8666[ebp]
	mov	DWORD PTR [eax], ecx
; Line 228
	mov	eax, DWORD PTR _pSize$[ebp]
	mov	ecx, DWORD PTR _sizeNeeded$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 229
	mov	al, 1
	jmp	SHORT $LN11@ubidi_getM
; Line 230
	jmp	SHORT $LN11@ubidi_getM
$LN2@ubidi_getM:
; Line 232
	xor	al, al
$LN11@ubidi_getM:
; Line 236
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ubidi_getMemory_56 ENDP
_TEXT	ENDS
EXTRN	_uprv_free_56:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _ubidi_close_56
_TEXT	SEGMENT
_pBiDi$ = 8						; size = 4
_ubidi_close_56 PROC					; COMDAT
; Line 239
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 240
	cmp	DWORD PTR _pBiDi$[ebp], 0
	je	$LN9@ubidi_clos
; Line 241
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	DWORD PTR [eax], 0
; Line 242
	mov	eax, DWORD PTR _pBiDi$[ebp]
	cmp	DWORD PTR [eax+48], 0
	je	SHORT $LN7@ubidi_clos
; Line 243
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	push	ecx
	call	_uprv_free_56
	add	esp, 4
$LN7@ubidi_clos:
; Line 245
	mov	eax, DWORD PTR _pBiDi$[ebp]
	cmp	DWORD PTR [eax+52], 0
	je	SHORT $LN6@ubidi_clos
; Line 246
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	push	ecx
	call	_uprv_free_56
	add	esp, 4
$LN6@ubidi_clos:
; Line 248
	mov	eax, DWORD PTR _pBiDi$[ebp]
	cmp	DWORD PTR [eax+56], 0
	je	SHORT $LN5@ubidi_clos
; Line 249
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	push	ecx
	call	_uprv_free_56
	add	esp, 4
$LN5@ubidi_clos:
; Line 251
	mov	eax, DWORD PTR _pBiDi$[ebp]
	cmp	DWORD PTR [eax+60], 0
	je	SHORT $LN4@ubidi_clos
; Line 252
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	push	ecx
	call	_uprv_free_56
	add	esp, 4
$LN4@ubidi_clos:
; Line 254
	mov	eax, DWORD PTR _pBiDi$[ebp]
	cmp	DWORD PTR [eax+64], 0
	je	SHORT $LN3@ubidi_clos
; Line 255
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	push	ecx
	call	_uprv_free_56
	add	esp, 4
$LN3@ubidi_clos:
; Line 257
	mov	eax, DWORD PTR _pBiDi$[ebp]
	cmp	DWORD PTR [eax+68], 0
	je	SHORT $LN2@ubidi_clos
; Line 258
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	push	ecx
	call	_uprv_free_56
	add	esp, 4
$LN2@ubidi_clos:
; Line 260
	mov	eax, DWORD PTR _pBiDi$[ebp]
	cmp	DWORD PTR [eax+348], 0
	je	SHORT $LN1@ubidi_clos
; Line 261
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+348]
	push	ecx
	call	_uprv_free_56
	add	esp, 4
$LN1@ubidi_clos:
; Line 264
	mov	eax, DWORD PTR _pBiDi$[ebp]
	push	eax
	call	_uprv_free_56
	add	esp, 4
$LN9@ubidi_clos:
; Line 266
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ubidi_close_56 ENDP
_TEXT	ENDS
PUBLIC	_ubidi_setInverse_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _ubidi_setInverse_56
_TEXT	SEGMENT
_pBiDi$ = 8						; size = 4
_isInverse$ = 12					; size = 1
_ubidi_setInverse_56 PROC				; COMDAT
; Line 271
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 272
	cmp	DWORD PTR _pBiDi$[ebp], 0
	je	SHORT $LN2@ubidi_setI
; Line 273
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	cl, BYTE PTR _isInverse$[ebp]
	mov	BYTE PTR [eax+84], cl
; Line 275
	movsx	eax, BYTE PTR _isInverse$[ebp]
	neg	eax
	sbb	eax, eax
	and	eax, 4
	mov	ecx, DWORD PTR _pBiDi$[ebp]
	mov	DWORD PTR [ecx+88], eax
$LN2@ubidi_setI:
; Line 277
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_ubidi_setInverse_56 ENDP
_TEXT	ENDS
PUBLIC	_ubidi_isInverse_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _ubidi_isInverse_56
_TEXT	SEGMENT
_pBiDi$ = 8						; size = 4
_ubidi_isInverse_56 PROC				; COMDAT
; Line 280
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 281
	cmp	DWORD PTR _pBiDi$[ebp], 0
	je	SHORT $LN2@ubidi_isIn
; Line 282
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	al, BYTE PTR [eax+84]
	jmp	SHORT $LN3@ubidi_isIn
; Line 283
	jmp	SHORT $LN3@ubidi_isIn
$LN2@ubidi_isIn:
; Line 284
	xor	al, al
$LN3@ubidi_isIn:
; Line 286
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_ubidi_isInverse_56 ENDP
_TEXT	ENDS
PUBLIC	_ubidi_setReorderingMode_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _ubidi_setReorderingMode_56
_TEXT	SEGMENT
_pBiDi$ = 8						; size = 4
_reorderingMode$ = 12					; size = 4
_ubidi_setReorderingMode_56 PROC			; COMDAT
; Line 304
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 306
	cmp	DWORD PTR _pBiDi$[ebp], 0
	je	SHORT $LN2@ubidi_setR
	cmp	DWORD PTR _reorderingMode$[ebp], 0
	jl	SHORT $LN2@ubidi_setR
	cmp	DWORD PTR _reorderingMode$[ebp], 7
	jge	SHORT $LN2@ubidi_setR
; Line 307
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR _reorderingMode$[ebp]
	mov	DWORD PTR [eax+88], ecx
; Line 308
	cmp	DWORD PTR _reorderingMode$[ebp], 4
	sete	al
	mov	ecx, DWORD PTR _pBiDi$[ebp]
	mov	BYTE PTR [ecx+84], al
$LN2@ubidi_setR:
; Line 310
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_ubidi_setReorderingMode_56 ENDP
_TEXT	ENDS
PUBLIC	_ubidi_getReorderingMode_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _ubidi_getReorderingMode_56
_TEXT	SEGMENT
_pBiDi$ = 8						; size = 4
_ubidi_getReorderingMode_56 PROC			; COMDAT
; Line 313
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 314
	cmp	DWORD PTR _pBiDi$[ebp], 0
	je	SHORT $LN2@ubidi_getR
; Line 315
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	eax, DWORD PTR [eax+88]
	jmp	SHORT $LN3@ubidi_getR
; Line 316
	jmp	SHORT $LN3@ubidi_getR
$LN2@ubidi_getR:
; Line 317
	xor	eax, eax
$LN3@ubidi_getR:
; Line 319
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_ubidi_getReorderingMode_56 ENDP
_TEXT	ENDS
PUBLIC	_ubidi_setReorderingOptions_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _ubidi_setReorderingOptions_56
_TEXT	SEGMENT
_pBiDi$ = 8						; size = 4
_reorderingOptions$ = 12				; size = 4
_ubidi_setReorderingOptions_56 PROC			; COMDAT
; Line 322
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 323
	mov	eax, DWORD PTR _reorderingOptions$[ebp]
	and	eax, 2
	je	SHORT $LN2@ubidi_setR@2
; Line 324
	mov	eax, DWORD PTR _reorderingOptions$[ebp]
	and	eax, -2					; fffffffeH
	mov	DWORD PTR _reorderingOptions$[ebp], eax
$LN2@ubidi_setR@2:
; Line 326
	cmp	DWORD PTR _pBiDi$[ebp], 0
	je	SHORT $LN3@ubidi_setR@2
; Line 327
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR _reorderingOptions$[ebp]
	mov	DWORD PTR [eax+92], ecx
$LN3@ubidi_setR@2:
; Line 329
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_ubidi_setReorderingOptions_56 ENDP
_TEXT	ENDS
PUBLIC	_ubidi_getReorderingOptions_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _ubidi_getReorderingOptions_56
_TEXT	SEGMENT
_pBiDi$ = 8						; size = 4
_ubidi_getReorderingOptions_56 PROC			; COMDAT
; Line 332
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 333
	cmp	DWORD PTR _pBiDi$[ebp], 0
	je	SHORT $LN2@ubidi_getR@2
; Line 334
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	eax, DWORD PTR [eax+92]
	jmp	SHORT $LN3@ubidi_getR@2
; Line 335
	jmp	SHORT $LN3@ubidi_getR@2
$LN2@ubidi_getR@2:
; Line 336
	xor	eax, eax
$LN3@ubidi_getR@2:
; Line 338
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_ubidi_getReorderingOptions_56 ENDP
_TEXT	ENDS
PUBLIC	_ubidi_getBaseDirection_56
EXTRN	_u_charDirection_56:PROC
EXTRN	_u_strlen_56:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _ubidi_getBaseDirection_56
_TEXT	SEGMENT
___c2$8747 = -44					; size = 2
_dir$ = -32						; size = 4
_uchar$ = -20						; size = 4
_i$ = -8						; size = 4
_text$ = 8						; size = 4
_length$ = 12						; size = 4
_ubidi_getBaseDirection_56 PROC				; COMDAT
; Line 342
	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 348
	cmp	DWORD PTR _text$[ebp], 0
	je	SHORT $LN9@ubidi_getB
	cmp	DWORD PTR _length$[ebp], -1
	jge	SHORT $LN10@ubidi_getB
$LN9@ubidi_getB:
; Line 349
	mov	eax, 3
	jmp	$LN11@ubidi_getB
$LN10@ubidi_getB:
; Line 352
	cmp	DWORD PTR _length$[ebp], -1
	jne	SHORT $LN8@ubidi_getB
; Line 353
	mov	eax, DWORD PTR _text$[ebp]
	push	eax
	call	_u_strlen_56
	add	esp, 4
	mov	DWORD PTR _length$[ebp], eax
$LN8@ubidi_getB:
; Line 356
	mov	DWORD PTR _i$[ebp], 0
$LN7@ubidi_getB:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _length$[ebp]
	jge	$LN6@ubidi_getB
; Line 358
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _text$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	mov	DWORD PTR _uchar$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	eax, DWORD PTR _uchar$[ebp]
	and	eax, -1024				; fffffc00H
	cmp	eax, 55296				; 0000d800H
	jne	SHORT $LN5@ubidi_getB
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _length$[ebp]
	je	SHORT $LN5@ubidi_getB
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _text$[ebp]
	mov	dx, WORD PTR [ecx+eax*2]
	mov	WORD PTR ___c2$8747[ebp], dx
	movzx	eax, WORD PTR ___c2$8747[ebp]
	and	eax, -1024				; fffffc00H
	cmp	eax, 56320				; 0000dc00H
	jne	SHORT $LN5@ubidi_getB
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	eax, DWORD PTR _uchar$[ebp]
	shl	eax, 10					; 0000000aH
	movzx	ecx, WORD PTR ___c2$8747[ebp]
	lea	edx, DWORD PTR [eax+ecx-56613888]
	mov	DWORD PTR _uchar$[ebp], edx
$LN5@ubidi_getB:
; Line 359
	mov	eax, DWORD PTR _uchar$[ebp]
	push	eax
	call	_u_charDirection_56
	add	esp, 4
	mov	DWORD PTR _dir$[ebp], eax
; Line 360
	cmp	DWORD PTR _dir$[ebp], 0
	jne	SHORT $LN3@ubidi_getB
; Line 361
	xor	eax, eax
	jmp	SHORT $LN11@ubidi_getB
$LN3@ubidi_getB:
; Line 362
	cmp	DWORD PTR _dir$[ebp], 1
	je	SHORT $LN1@ubidi_getB
	cmp	DWORD PTR _dir$[ebp], 13		; 0000000dH
	jne	SHORT $LN2@ubidi_getB
$LN1@ubidi_getB:
; Line 363
	mov	eax, 1
	jmp	SHORT $LN11@ubidi_getB
$LN2@ubidi_getB:
; Line 364
	jmp	$LN7@ubidi_getB
$LN6@ubidi_getB:
; Line 365
	mov	eax, 3
$LN11@ubidi_getB:
; Line 366
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ubidi_getBaseDirection_56 ENDP
_TEXT	ENDS
PUBLIC	_ubidi_getParaLevelAtIndex_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _ubidi_getParaLevelAtIndex_56
_TEXT	SEGMENT
_i$ = -8						; size = 4
_pBiDi$ = 8						; size = 4
_pindex$ = 12						; size = 4
_ubidi_getParaLevelAtIndex_56 PROC			; COMDAT
; Line 645
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 647
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN5@ubidi_getP
$LN4@ubidi_getP:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN5@ubidi_getP:
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR [eax+136]
	jge	SHORT $LN3@ubidi_getP
; Line 648
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _pindex$[ebp]
	cmp	eax, DWORD PTR [ecx+edx*8]
	jge	SHORT $LN2@ubidi_getP
; Line 649
	jmp	SHORT $LN3@ubidi_getP
$LN2@ubidi_getP:
; Line 650
	jmp	SHORT $LN4@ubidi_getP
$LN3@ubidi_getP:
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR [eax+136]
	jl	SHORT $LN1@ubidi_getP
; Line 651
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+136]
	sub	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN1@ubidi_getP:
; Line 652
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	edx, DWORD PTR _i$[ebp]
	mov	al, BYTE PTR [ecx+edx*8+4]
; Line 653
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_ubidi_getParaLevelAtIndex_56 ENDP
_TEXT	ENDS
PUBLIC	_ubidi_setContext_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _ubidi_setContext_56
_TEXT	SEGMENT
_pBiDi$ = 8						; size = 4
_prologue$ = 12						; size = 4
_proLength$ = 16					; size = 4
_epilogue$ = 20						; size = 4
_epiLength$ = 24					; size = 4
_pErrorCode$ = 28					; size = 4
_ubidi_setContext_56 PROC				; COMDAT
; Line 2307
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2309
	cmp	DWORD PTR _pErrorCode$[ebp], 0
	je	SHORT $LN8@ubidi_setC
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN9@ubidi_setC
$LN8@ubidi_setC:
	jmp	$LN10@ubidi_setC
$LN9@ubidi_setC:
; Line 2311
	cmp	DWORD PTR _pBiDi$[ebp], 0
	je	SHORT $LN6@ubidi_setC
	cmp	DWORD PTR _proLength$[ebp], -1
	jl	SHORT $LN6@ubidi_setC
	cmp	DWORD PTR _epiLength$[ebp], -1
	jl	SHORT $LN6@ubidi_setC
	cmp	DWORD PTR _prologue$[ebp], 0
	jne	SHORT $LN5@ubidi_setC
	cmp	DWORD PTR _proLength$[ebp], 0
	jne	SHORT $LN6@ubidi_setC
$LN5@ubidi_setC:
	cmp	DWORD PTR _epilogue$[ebp], 0
	jne	SHORT $LN7@ubidi_setC
	cmp	DWORD PTR _epiLength$[ebp], 0
	je	SHORT $LN7@ubidi_setC
$LN6@ubidi_setC:
; Line 2312
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 1
; Line 2313
	jmp	SHORT $LN10@ubidi_setC
$LN7@ubidi_setC:
; Line 2316
	cmp	DWORD PTR _proLength$[ebp], -1
	jne	SHORT $LN4@ubidi_setC
; Line 2317
	mov	eax, DWORD PTR _prologue$[ebp]
	push	eax
	call	_u_strlen_56
	add	esp, 4
	mov	ecx, DWORD PTR _pBiDi$[ebp]
	mov	DWORD PTR [ecx+104], eax
; Line 2318
	jmp	SHORT $LN3@ubidi_setC
$LN4@ubidi_setC:
; Line 2319
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR _proLength$[ebp]
	mov	DWORD PTR [eax+104], ecx
$LN3@ubidi_setC:
; Line 2321
	cmp	DWORD PTR _epiLength$[ebp], -1
	jne	SHORT $LN2@ubidi_setC
; Line 2322
	mov	eax, DWORD PTR _epilogue$[ebp]
	push	eax
	call	_u_strlen_56
	add	esp, 4
	mov	ecx, DWORD PTR _pBiDi$[ebp]
	mov	DWORD PTR [ecx+112], eax
; Line 2323
	jmp	SHORT $LN1@ubidi_setC
$LN2@ubidi_setC:
; Line 2324
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR _epiLength$[ebp]
	mov	DWORD PTR [eax+112], ecx
$LN1@ubidi_setC:
; Line 2326
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR _prologue$[ebp]
	mov	DWORD PTR [eax+100], ecx
; Line 2327
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR _epilogue$[ebp]
	mov	DWORD PTR [eax+108], ecx
$LN10@ubidi_setC:
; Line 2328
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ubidi_setContext_56 ENDP
_TEXT	ENDS
PUBLIC	??_C@_13COJANIEC@?$AA0?$AA?$AA@			; `string'
PUBLIC	??_C@_1FE@CHIMDBDO@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@ ; `string'
PUBLIC	?__LINE__Var@?1??ubidi_setPara_56@@9@9		; `ubidi_setPara_56'::`2'::__LINE__Var
PUBLIC	_ubidi_setPara_56
EXTRN	__imp___wassert:PROC
;	COMDAT ??_C@_13COJANIEC@?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_13COJANIEC@?$AA0?$AA?$AA@ DB '0', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1FE@CHIMDBDO@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@
CONST	SEGMENT
??_C@_1FE@CHIMDBDO@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@ DB 'd'
	DB	00H, ':', 00H, '\', 00H, 'm', 00H, 'o', 00H, 'z', 00H, 'i', 00H
	DB	'l', 00H, 'l', 00H, 'a', 00H, '\', 00H, 'i', 00H, 'n', 00H, 't'
	DB	00H, 'l', 00H, '\', 00H, 'i', 00H, 'c', 00H, 'u', 00H, '\', 00H
	DB	's', 00H, 'o', 00H, 'u', 00H, 'r', 00H, 'c', 00H, 'e', 00H, '\'
	DB	00H, 'c', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'o', 00H, 'n', 00H
	DB	'\', 00H, 'u', 00H, 'b', 00H, 'i', 00H, 'd', 00H, 'i', 00H, '.'
	DB	00H, 'c', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??ubidi_setPara_56@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??ubidi_setPara_56@@9@9 DD 09e4H		; `ubidi_setPara_56'::`2'::__LINE__Var
; Function compile flags: /Odtp /RTCsu /ZI
_DATA	ENDS
;	COMDAT _ubidi_setPara_56
_TEXT	SEGMENT
tv288 = -380						; size = 4
tv433 = -376						; size = 4
tv370 = -376						; size = 4
tv338 = -376						; size = 4
tv310 = -376						; size = 4
tv270 = -376						; size = 4
tv228 = -376						; size = 4
tv224 = -376						; size = 4
_dirProp$10231 = -173					; size = 1
_level$10230 = -161					; size = 1
_last$10229 = -152					; size = 4
_start$10228 = -140					; size = 4
_j$10227 = -128						; size = 4
_i$10226 = -116						; size = 4
_eor$10194 = -101					; size = 1
_sor$10193 = -89					; size = 1
_nextLevel$10192 = -77					; size = 1
_level$10191 = -65					; size = 1
_limit$10190 = -56					; size = 4
_start$10189 = -44					; size = 4
_levels$10188 = -32					; size = 4
_dirProps$ = -20					; size = 4
_direction$ = -8					; size = 4
_pBiDi$ = 8						; size = 4
_text$ = 12						; size = 4
_length$ = 16						; size = 4
_paraLevel$ = 20					; size = 1
_embeddingLevels$ = 24					; size = 4
_pErrorCode$ = 28					; size = 4
_ubidi_setPara_56 PROC					; COMDAT
; Line 2532
	push	ebp
	mov	ebp, esp
	sub	esp, 380				; 0000017cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-380]
	mov	ecx, 95					; 0000005fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2537
	cmp	DWORD PTR _pErrorCode$[ebp], 0
	je	SHORT $LN80@ubidi_setP
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN81@ubidi_setP
$LN80@ubidi_setP:
	jmp	$LN82@ubidi_setP
$LN81@ubidi_setP:
; Line 2539
	cmp	DWORD PTR _pBiDi$[ebp], 0
	je	SHORT $LN78@ubidi_setP
	cmp	DWORD PTR _text$[ebp], 0
	je	SHORT $LN78@ubidi_setP
	cmp	DWORD PTR _length$[ebp], -1
	jl	SHORT $LN78@ubidi_setP
	movzx	eax, BYTE PTR _paraLevel$[ebp]
	cmp	eax, 125				; 0000007dH
	jle	SHORT $LN79@ubidi_setP
	movzx	eax, BYTE PTR _paraLevel$[ebp]
	cmp	eax, 254				; 000000feH
	jge	SHORT $LN79@ubidi_setP
$LN78@ubidi_setP:
; Line 2540
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 1
; Line 2541
	jmp	$LN82@ubidi_setP
$LN79@ubidi_setP:
; Line 2544
	cmp	DWORD PTR _length$[ebp], -1
	jne	SHORT $LN77@ubidi_setP
; Line 2545
	mov	eax, DWORD PTR _text$[ebp]
	push	eax
	call	_u_strlen_56
	add	esp, 4
	mov	DWORD PTR _length$[ebp], eax
$LN77@ubidi_setP:
; Line 2549
	mov	eax, DWORD PTR _pBiDi$[ebp]
	cmp	DWORD PTR [eax+88], 3
	jne	SHORT $LN76@ubidi_setP
; Line 2550
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _paraLevel$[ebp]
	push	ecx
	mov	edx, DWORD PTR _length$[ebp]
	push	edx
	mov	eax, DWORD PTR _text$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pBiDi$[ebp]
	push	ecx
	call	_setParaRunsOnly
	add	esp, 20					; 00000014H
; Line 2551
	jmp	$LN82@ubidi_setP
$LN76@ubidi_setP:
; Line 2555
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	DWORD PTR [eax], 0
; Line 2556
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR _text$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 2557
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR _length$[ebp]
	mov	DWORD PTR [eax+20], ecx
	mov	edx, DWORD PTR _pBiDi$[ebp]
	mov	eax, DWORD PTR _length$[ebp]
	mov	DWORD PTR [edx+12], eax
	mov	ecx, DWORD PTR _pBiDi$[ebp]
	mov	edx, DWORD PTR _length$[ebp]
	mov	DWORD PTR [ecx+16], edx
; Line 2558
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	cl, BYTE PTR _paraLevel$[ebp]
	mov	BYTE PTR [eax+97], cl
; Line 2559
	movzx	eax, BYTE PTR _paraLevel$[ebp]
	and	eax, 1
	mov	ecx, DWORD PTR _pBiDi$[ebp]
	mov	DWORD PTR [ecx+120], eax
; Line 2560
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	DWORD PTR [eax+136], 1
; Line 2562
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	DWORD PTR [eax+76], 0
; Line 2563
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	DWORD PTR [eax+80], 0
; Line 2564
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	DWORD PTR [eax+228], 0
; Line 2565
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	DWORD PTR [eax+336], 0
; Line 2566
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	DWORD PTR [eax+340], 0
; Line 2571
	movzx	eax, BYTE PTR _paraLevel$[ebp]
	xor	ecx, ecx
	cmp	eax, 254				; 000000feH
	setge	cl
	mov	edx, DWORD PTR _pBiDi$[ebp]
	mov	BYTE PTR [edx+98], cl
; Line 2573
	cmp	DWORD PTR _length$[ebp], 0
	jne	SHORT $LN75@ubidi_setP
; Line 2579
	movzx	eax, BYTE PTR _paraLevel$[ebp]
	cmp	eax, 254				; 000000feH
	jl	SHORT $LN74@ubidi_setP
; Line 2580
	mov	eax, DWORD PTR _pBiDi$[ebp]
	movzx	ecx, BYTE PTR [eax+97]
	and	ecx, 1
	mov	edx, DWORD PTR _pBiDi$[ebp]
	mov	BYTE PTR [edx+97], cl
; Line 2581
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	BYTE PTR [eax+98], 0
$LN74@ubidi_setP:
; Line 2583
	movzx	eax, BYTE PTR _paraLevel$[ebp]
	and	eax, 1
	mov	ecx, DWORD PTR _pBiDi$[ebp]
	mov	edx, DWORD PTR _flagLR[eax*4]
	mov	DWORD PTR [ecx+124], edx
; Line 2584
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	DWORD PTR [eax+224], 0
; Line 2585
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	DWORD PTR [eax+136], 0
; Line 2586
	mov	eax, DWORD PTR _pBiDi$[ebp]
	push	eax
	call	_setParaSuccess
	add	esp, 4
; Line 2587
	jmp	$LN82@ubidi_setP
$LN75@ubidi_setP:
; Line 2590
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	DWORD PTR [eax+224], -1
; Line 2593
	mov	eax, DWORD PTR _pBiDi$[ebp]
	cmp	DWORD PTR [eax+60], 0
	je	SHORT $LN73@ubidi_setP
; Line 2594
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR _pBiDi$[ebp]
	mov	edx, DWORD PTR [ecx+60]
	mov	DWORD PTR [eax+140], edx
; Line 2595
	jmp	SHORT $LN72@ubidi_setP
$LN73@ubidi_setP:
; Line 2596
	mov	eax, DWORD PTR _pBiDi$[ebp]
	add	eax, 144				; 00000090H
	mov	ecx, DWORD PTR _pBiDi$[ebp]
	mov	DWORD PTR [ecx+140], eax
$LN72@ubidi_setP:
; Line 2603
	mov	eax, DWORD PTR _length$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pBiDi$[ebp]
	movzx	edx, BYTE PTR [ecx+72]
	push	edx
	mov	eax, DWORD PTR _pBiDi$[ebp]
	add	eax, 24					; 00000018H
	push	eax
	mov	ecx, DWORD PTR _pBiDi$[ebp]
	add	ecx, 48					; 00000030H
	push	ecx
	call	_ubidi_getMemory_56
	add	esp, 16					; 00000010H
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN71@ubidi_setP
; Line 2604
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR _pBiDi$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	DWORD PTR [eax+76], edx
; Line 2605
	mov	eax, DWORD PTR _pBiDi$[ebp]
	push	eax
	call	_getDirProps
	add	esp, 4
	movsx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN70@ubidi_setP
; Line 2606
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 7
; Line 2607
	jmp	$LN82@ubidi_setP
$LN70@ubidi_setP:
; Line 2609
	jmp	SHORT $LN69@ubidi_setP
$LN71@ubidi_setP:
; Line 2610
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 7
; Line 2611
	jmp	$LN82@ubidi_setP
$LN69@ubidi_setP:
; Line 2613
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	mov	DWORD PTR _dirProps$[ebp], ecx
; Line 2615
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _length$[ebp], ecx
; Line 2616
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR _length$[ebp]
	mov	DWORD PTR [eax+132], ecx
; Line 2619
	cmp	DWORD PTR _embeddingLevels$[ebp], 0
	jne	SHORT $LN68@ubidi_setP
; Line 2621
	mov	eax, DWORD PTR _length$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pBiDi$[ebp]
	movzx	edx, BYTE PTR [ecx+72]
	push	edx
	mov	eax, DWORD PTR _pBiDi$[ebp]
	add	eax, 28					; 0000001cH
	push	eax
	mov	ecx, DWORD PTR _pBiDi$[ebp]
	add	ecx, 52					; 00000034H
	push	ecx
	call	_ubidi_getMemory_56
	add	esp, 16					; 00000010H
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN67@ubidi_setP
; Line 2622
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR _pBiDi$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	mov	DWORD PTR [eax+80], edx
; Line 2623
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pBiDi$[ebp]
	push	ecx
	call	_resolveExplicitLevels
	add	esp, 8
	mov	DWORD PTR _direction$[ebp], eax
; Line 2624
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN66@ubidi_setP
; Line 2625
	jmp	$LN82@ubidi_setP
$LN66@ubidi_setP:
; Line 2627
	jmp	SHORT $LN65@ubidi_setP
$LN67@ubidi_setP:
; Line 2628
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 7
; Line 2629
	jmp	$LN82@ubidi_setP
$LN65@ubidi_setP:
; Line 2631
	jmp	SHORT $LN64@ubidi_setP
$LN68@ubidi_setP:
; Line 2633
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR _embeddingLevels$[ebp]
	mov	DWORD PTR [eax+80], ecx
; Line 2634
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pBiDi$[ebp]
	push	ecx
	call	_checkExplicitLevels
	add	esp, 8
	mov	DWORD PTR _direction$[ebp], eax
; Line 2635
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN64@ubidi_setP
; Line 2636
	jmp	$LN82@ubidi_setP
$LN64@ubidi_setP:
; Line 2641
	mov	eax, DWORD PTR _pBiDi$[ebp]
	cmp	DWORD PTR [eax+244], 5
	jg	SHORT $LN62@ubidi_setP
; Line 2642
	mov	eax, DWORD PTR _pBiDi$[ebp]
	add	eax, 252				; 000000fcH
	mov	ecx, DWORD PTR _pBiDi$[ebp]
	mov	DWORD PTR [ecx+248], eax
; Line 2643
	jmp	SHORT $LN61@ubidi_setP
$LN62@ubidi_setP:
; Line 2644
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+244]
	shl	ecx, 4
	mov	edx, DWORD PTR _pBiDi$[ebp]
	cmp	ecx, DWORD PTR [edx+44]
	jg	SHORT $LN60@ubidi_setP
; Line 2645
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR _pBiDi$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	mov	DWORD PTR [eax+248], edx
; Line 2646
	jmp	SHORT $LN61@ubidi_setP
$LN60@ubidi_setP:
; Line 2647
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+244]
	shl	ecx, 4
	push	ecx
	push	1
	mov	edx, DWORD PTR _pBiDi$[ebp]
	add	edx, 44					; 0000002cH
	push	edx
	mov	eax, DWORD PTR _pBiDi$[ebp]
	add	eax, 68					; 00000044H
	push	eax
	call	_ubidi_getMemory_56
	add	esp, 16					; 00000010H
	movsx	ecx, al
	test	ecx, ecx
	je	SHORT $LN58@ubidi_setP
; Line 2648
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR _pBiDi$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	mov	DWORD PTR [eax+248], edx
; Line 2649
	jmp	SHORT $LN61@ubidi_setP
$LN58@ubidi_setP:
; Line 2650
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 7
; Line 2651
	jmp	$LN82@ubidi_setP
$LN61@ubidi_setP:
; Line 2654
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	DWORD PTR [eax+244], -1
; Line 2660
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR _direction$[ebp]
	mov	DWORD PTR [eax+120], ecx
; Line 2661
	mov	eax, DWORD PTR _direction$[ebp]
	mov	DWORD PTR tv224[ebp], eax
	cmp	DWORD PTR tv224[ebp], 0
	je	SHORT $LN54@ubidi_setP
	cmp	DWORD PTR tv224[ebp], 1
	je	SHORT $LN53@ubidi_setP
	jmp	SHORT $LN52@ubidi_setP
$LN54@ubidi_setP:
; Line 2664
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	DWORD PTR [eax+132], 0
; Line 2665
	jmp	$LN55@ubidi_setP
$LN53@ubidi_setP:
; Line 2668
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	DWORD PTR [eax+132], 0
; Line 2669
	jmp	$LN55@ubidi_setP
$LN52@ubidi_setP:
; Line 2674
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	mov	DWORD PTR tv228[ebp], ecx
	cmp	DWORD PTR tv228[ebp], 6
	ja	$LN39@ubidi_setP
	mov	edx, DWORD PTR tv228[ebp]
	jmp	DWORD PTR $LN97@ubidi_setP[edx*4]
$LN49@ubidi_setP:
; Line 2676
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	DWORD PTR [eax+116], OFFSET _impTab_DEFAULT
; Line 2677
	jmp	$LN50@ubidi_setP
$LN48@ubidi_setP:
; Line 2679
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	DWORD PTR [eax+116], OFFSET _impTab_NUMBERS_SPECIAL
; Line 2680
	jmp	$LN50@ubidi_setP
$LN47@ubidi_setP:
; Line 2682
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	DWORD PTR [eax+116], OFFSET _impTab_GROUP_NUMBERS_WITH_R
; Line 2683
	jmp	SHORT $LN50@ubidi_setP
$LN46@ubidi_setP:
; Line 2685
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	DWORD PTR [eax+116], OFFSET _impTab_INVERSE_NUMBERS_AS_L
; Line 2686
	jmp	SHORT $LN50@ubidi_setP
$LN45@ubidi_setP:
; Line 2688
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+92]
	and	ecx, 1
	je	SHORT $LN44@ubidi_setP
; Line 2689
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	DWORD PTR [eax+116], OFFSET _impTab_INVERSE_LIKE_DIRECT_WITH_MARKS
; Line 2690
	jmp	SHORT $LN43@ubidi_setP
$LN44@ubidi_setP:
; Line 2691
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	DWORD PTR [eax+116], OFFSET _impTab_INVERSE_LIKE_DIRECT
$LN43@ubidi_setP:
; Line 2693
	jmp	SHORT $LN50@ubidi_setP
$LN42@ubidi_setP:
; Line 2695
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+92]
	and	ecx, 1
	je	SHORT $LN41@ubidi_setP
; Line 2696
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	DWORD PTR [eax+116], OFFSET _impTab_INVERSE_FOR_NUMBERS_SPECIAL_WITH_MARKS
; Line 2697
	jmp	SHORT $LN40@ubidi_setP
$LN41@ubidi_setP:
; Line 2698
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	DWORD PTR [eax+116], OFFSET _impTab_INVERSE_FOR_NUMBERS_SPECIAL
$LN40@ubidi_setP:
; Line 2700
	jmp	SHORT $LN50@ubidi_setP
$LN39@ubidi_setP:
; Line 2703
	xor	eax, eax
	jne	SHORT $LN50@ubidi_setP
	mov	ecx, DWORD PTR ?__LINE__Var@?1??ubidi_setPara_56@@9@9
	add	ecx, 171				; 000000abH
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_1FE@CHIMDBDO@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@
	push	OFFSET ??_C@_13COJANIEC@?$AA0?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN50@ubidi_setP:
; Line 2718
	cmp	DWORD PTR _embeddingLevels$[ebp], 0
	jne	$LN38@ubidi_setP
	mov	eax, DWORD PTR _pBiDi$[ebp]
	cmp	DWORD PTR [eax+136], 1
	jg	$LN38@ubidi_setP
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+124]
	and	ecx, -2147483648			; 80000000H
	jne	$LN38@ubidi_setP
; Line 2721
	mov	eax, DWORD PTR _pBiDi$[ebp]
	movzx	ecx, BYTE PTR [eax+98]
	test	ecx, ecx
	je	SHORT $LN85@ubidi_setP
	mov	edx, DWORD PTR _length$[ebp]
	sub	edx, 1
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	cmp	edx, DWORD PTR [ecx]
	jl	SHORT $LN85@ubidi_setP
	mov	edx, DWORD PTR _length$[ebp]
	sub	edx, 1
	push	edx
	mov	eax, DWORD PTR _pBiDi$[ebp]
	push	eax
	call	_ubidi_getParaLevelAtIndex_56
	add	esp, 8
	movzx	ecx, al
	mov	DWORD PTR tv270[ebp], ecx
	jmp	SHORT $LN86@ubidi_setP
$LN85@ubidi_setP:
	mov	edx, DWORD PTR _pBiDi$[ebp]
	movzx	eax, BYTE PTR [edx+97]
	mov	DWORD PTR tv270[ebp], eax
$LN86@ubidi_setP:
	mov	ecx, DWORD PTR _pBiDi$[ebp]
	movzx	edx, BYTE PTR [ecx+98]
	test	edx, edx
	je	SHORT $LN87@ubidi_setP
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	cmp	DWORD PTR [ecx], 0
	jg	SHORT $LN87@ubidi_setP
	push	0
	mov	edx, DWORD PTR _pBiDi$[ebp]
	push	edx
	call	_ubidi_getParaLevelAtIndex_56
	add	esp, 8
	movzx	eax, al
	mov	DWORD PTR tv288[ebp], eax
	jmp	SHORT $LN88@ubidi_setP
$LN87@ubidi_setP:
	mov	ecx, DWORD PTR _pBiDi$[ebp]
	movzx	edx, BYTE PTR [ecx+97]
	mov	DWORD PTR tv288[ebp], edx
$LN88@ubidi_setP:
	movzx	eax, BYTE PTR tv270[ebp]
	and	eax, 1
	push	eax
	movzx	ecx, BYTE PTR tv288[ebp]
	and	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _length$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _pBiDi$[ebp]
	push	eax
	call	_resolveImplicitLevels
	add	esp, 20					; 00000014H
; Line 2722
	jmp	$LN37@ubidi_setP
$LN38@ubidi_setP:
; Line 2724
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+80]
	mov	DWORD PTR _levels$10188[ebp], ecx
; Line 2725
	mov	DWORD PTR _limit$10190[ebp], 0
; Line 2730
	mov	eax, DWORD PTR _pBiDi$[ebp]
	movzx	ecx, BYTE PTR [eax+98]
	test	ecx, ecx
	je	SHORT $LN89@ubidi_setP
	mov	edx, DWORD PTR _pBiDi$[ebp]
	mov	eax, DWORD PTR [edx+140]
	cmp	DWORD PTR [eax], 0
	jg	SHORT $LN89@ubidi_setP
	push	0
	mov	ecx, DWORD PTR _pBiDi$[ebp]
	push	ecx
	call	_ubidi_getParaLevelAtIndex_56
	add	esp, 8
	movzx	edx, al
	mov	DWORD PTR tv310[ebp], edx
	jmp	SHORT $LN90@ubidi_setP
$LN89@ubidi_setP:
	mov	eax, DWORD PTR _pBiDi$[ebp]
	movzx	ecx, BYTE PTR [eax+97]
	mov	DWORD PTR tv310[ebp], ecx
$LN90@ubidi_setP:
	mov	dl, BYTE PTR tv310[ebp]
	mov	BYTE PTR _level$10191[ebp], dl
; Line 2731
	mov	eax, DWORD PTR _levels$10188[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _nextLevel$10192[ebp], cl
; Line 2732
	movzx	eax, BYTE PTR _level$10191[ebp]
	movzx	ecx, BYTE PTR _nextLevel$10192[ebp]
	cmp	eax, ecx
	jge	SHORT $LN36@ubidi_setP
; Line 2733
	movzx	eax, BYTE PTR _nextLevel$10192[ebp]
	and	eax, 1
	mov	BYTE PTR _eor$10194[ebp], al
; Line 2734
	jmp	SHORT $LN34@ubidi_setP
$LN36@ubidi_setP:
; Line 2735
	movzx	eax, BYTE PTR _level$10191[ebp]
	and	eax, 1
	mov	BYTE PTR _eor$10194[ebp], al
$LN34@ubidi_setP:
; Line 2742
	mov	eax, DWORD PTR _limit$10190[ebp]
	mov	DWORD PTR _start$10189[ebp], eax
; Line 2743
	mov	al, BYTE PTR _nextLevel$10192[ebp]
	mov	BYTE PTR _level$10191[ebp], al
; Line 2744
	cmp	DWORD PTR _start$10189[ebp], 0
	jle	SHORT $LN31@ubidi_setP
	mov	eax, DWORD PTR _dirProps$[ebp]
	add	eax, DWORD PTR _start$10189[ebp]
	movzx	ecx, BYTE PTR [eax-1]
	cmp	ecx, 7
	jne	SHORT $LN31@ubidi_setP
; Line 2746
	mov	eax, DWORD PTR _pBiDi$[ebp]
	movzx	ecx, BYTE PTR [eax+98]
	test	ecx, ecx
	je	SHORT $LN91@ubidi_setP
	mov	edx, DWORD PTR _pBiDi$[ebp]
	mov	eax, DWORD PTR [edx+140]
	mov	ecx, DWORD PTR _start$10189[ebp]
	cmp	ecx, DWORD PTR [eax]
	jl	SHORT $LN91@ubidi_setP
	mov	edx, DWORD PTR _start$10189[ebp]
	push	edx
	mov	eax, DWORD PTR _pBiDi$[ebp]
	push	eax
	call	_ubidi_getParaLevelAtIndex_56
	add	esp, 8
	movzx	ecx, al
	mov	DWORD PTR tv338[ebp], ecx
	jmp	SHORT $LN92@ubidi_setP
$LN91@ubidi_setP:
	mov	edx, DWORD PTR _pBiDi$[ebp]
	movzx	eax, BYTE PTR [edx+97]
	mov	DWORD PTR tv338[ebp], eax
$LN92@ubidi_setP:
	movzx	ecx, BYTE PTR tv338[ebp]
	and	ecx, 1
	mov	BYTE PTR _sor$10193[ebp], cl
; Line 2747
	jmp	SHORT $LN29@ubidi_setP
$LN31@ubidi_setP:
; Line 2748
	mov	al, BYTE PTR _eor$10194[ebp]
	mov	BYTE PTR _sor$10193[ebp], al
$LN29@ubidi_setP:
; Line 2754
	mov	eax, DWORD PTR _limit$10190[ebp]
	add	eax, 1
	mov	DWORD PTR _limit$10190[ebp], eax
	mov	ecx, DWORD PTR _limit$10190[ebp]
	cmp	ecx, DWORD PTR _length$[ebp]
	jge	SHORT $LN28@ubidi_setP
	mov	eax, DWORD PTR _levels$10188[ebp]
	add	eax, DWORD PTR _limit$10190[ebp]
	movzx	ecx, BYTE PTR [eax]
	movzx	edx, BYTE PTR _level$10191[ebp]
	cmp	ecx, edx
	je	SHORT $LN27@ubidi_setP
	mov	eax, DWORD PTR _dirProps$[ebp]
	add	eax, DWORD PTR _limit$10190[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	edx, 1
	shl	edx, cl
	and	edx, 382976				; 0005d800H
	je	SHORT $LN28@ubidi_setP
$LN27@ubidi_setP:
	jmp	SHORT $LN29@ubidi_setP
$LN28@ubidi_setP:
; Line 2757
	mov	eax, DWORD PTR _limit$10190[ebp]
	cmp	eax, DWORD PTR _length$[ebp]
	jge	SHORT $LN26@ubidi_setP
; Line 2758
	mov	eax, DWORD PTR _levels$10188[ebp]
	add	eax, DWORD PTR _limit$10190[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _nextLevel$10192[ebp], cl
; Line 2759
	jmp	SHORT $LN25@ubidi_setP
$LN26@ubidi_setP:
; Line 2760
	mov	eax, DWORD PTR _pBiDi$[ebp]
	movzx	ecx, BYTE PTR [eax+98]
	test	ecx, ecx
	je	SHORT $LN93@ubidi_setP
	mov	edx, DWORD PTR _length$[ebp]
	sub	edx, 1
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	cmp	edx, DWORD PTR [ecx]
	jl	SHORT $LN93@ubidi_setP
	mov	edx, DWORD PTR _length$[ebp]
	sub	edx, 1
	push	edx
	mov	eax, DWORD PTR _pBiDi$[ebp]
	push	eax
	call	_ubidi_getParaLevelAtIndex_56
	add	esp, 8
	movzx	ecx, al
	mov	DWORD PTR tv370[ebp], ecx
	jmp	SHORT $LN94@ubidi_setP
$LN93@ubidi_setP:
	mov	edx, DWORD PTR _pBiDi$[ebp]
	movzx	eax, BYTE PTR [edx+97]
	mov	DWORD PTR tv370[ebp], eax
$LN94@ubidi_setP:
	mov	cl, BYTE PTR tv370[ebp]
	mov	BYTE PTR _nextLevel$10192[ebp], cl
$LN25@ubidi_setP:
; Line 2764
	movzx	eax, BYTE PTR _level$10191[ebp]
	and	eax, -129				; ffffff7fH
	movzx	ecx, BYTE PTR _nextLevel$10192[ebp]
	and	ecx, -129				; ffffff7fH
	cmp	eax, ecx
	jge	SHORT $LN24@ubidi_setP
; Line 2765
	movzx	eax, BYTE PTR _nextLevel$10192[ebp]
	and	eax, 1
	mov	BYTE PTR _eor$10194[ebp], al
; Line 2766
	jmp	SHORT $LN23@ubidi_setP
$LN24@ubidi_setP:
; Line 2767
	movzx	eax, BYTE PTR _level$10191[ebp]
	and	eax, 1
	mov	BYTE PTR _eor$10194[ebp], al
$LN23@ubidi_setP:
; Line 2772
	movzx	eax, BYTE PTR _level$10191[ebp]
	and	eax, 128				; 00000080H
	jne	SHORT $LN20@ubidi_setP
; Line 2773
	movzx	eax, BYTE PTR _eor$10194[ebp]
	push	eax
	movzx	ecx, BYTE PTR _sor$10193[ebp]
	push	ecx
	mov	edx, DWORD PTR _limit$10190[ebp]
	push	edx
	mov	eax, DWORD PTR _start$10189[ebp]
	push	eax
	mov	ecx, DWORD PTR _pBiDi$[ebp]
	push	ecx
	call	_resolveImplicitLevels
	add	esp, 20					; 00000014H
; Line 2774
	jmp	SHORT $LN33@ubidi_setP
$LN20@ubidi_setP:
; Line 2777
	mov	eax, DWORD PTR _levels$10188[ebp]
	add	eax, DWORD PTR _start$10189[ebp]
	movzx	ecx, BYTE PTR [eax]
	and	ecx, -129				; ffffff7fH
	mov	edx, DWORD PTR _levels$10188[ebp]
	add	edx, DWORD PTR _start$10189[ebp]
	mov	BYTE PTR [edx], cl
	mov	eax, DWORD PTR _start$10189[ebp]
	add	eax, 1
	mov	DWORD PTR _start$10189[ebp], eax
; Line 2778
	mov	eax, DWORD PTR _start$10189[ebp]
	cmp	eax, DWORD PTR _limit$10190[ebp]
	jl	SHORT $LN20@ubidi_setP
$LN33@ubidi_setP:
; Line 2780
	mov	eax, DWORD PTR _limit$10190[ebp]
	cmp	eax, DWORD PTR _length$[ebp]
	jl	$LN34@ubidi_setP
$LN37@ubidi_setP:
; Line 2783
	mov	eax, DWORD PTR _pBiDi$[ebp]
	cmp	DWORD PTR [eax+344], 0
	jle	SHORT $LN17@ubidi_setP
; Line 2785
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	ecx, DWORD PTR _pBiDi$[ebp]
	mov	edx, DWORD PTR [ecx+344]
	mov	DWORD PTR [eax], edx
; Line 2786
	jmp	$LN82@ubidi_setP
$LN17@ubidi_setP:
; Line 2789
	mov	eax, DWORD PTR _pBiDi$[ebp]
	push	eax
	call	_adjustWSLevels
	add	esp, 4
$LN55@ubidi_setP:
; Line 2798
	mov	eax, DWORD PTR _pBiDi$[ebp]
	movzx	ecx, BYTE PTR [eax+98]
	test	ecx, ecx
	jle	$LN16@ubidi_setP
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+92]
	and	ecx, 1
	je	$LN16@ubidi_setP
	mov	eax, DWORD PTR _pBiDi$[ebp]
	cmp	DWORD PTR [eax+88], 5
	je	SHORT $LN15@ubidi_setP
	mov	eax, DWORD PTR _pBiDi$[ebp]
	cmp	DWORD PTR [eax+88], 6
	jne	$LN16@ubidi_setP
$LN15@ubidi_setP:
; Line 2802
	mov	DWORD PTR _i$10226[ebp], 0
	jmp	SHORT $LN14@ubidi_setP
$LN13@ubidi_setP:
	mov	eax, DWORD PTR _i$10226[ebp]
	add	eax, 1
	mov	DWORD PTR _i$10226[ebp], eax
$LN14@ubidi_setP:
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR _i$10226[ebp]
	cmp	ecx, DWORD PTR [eax+136]
	jge	$LN16@ubidi_setP
; Line 2803
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	edx, DWORD PTR _i$10226[ebp]
	mov	eax, DWORD PTR [ecx+edx*8]
	sub	eax, 1
	mov	DWORD PTR _last$10229[ebp], eax
; Line 2804
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	edx, DWORD PTR _i$10226[ebp]
	mov	al, BYTE PTR [ecx+edx*8+4]
	mov	BYTE PTR _level$10230[ebp], al
; Line 2805
	movzx	eax, BYTE PTR _level$10230[ebp]
	test	eax, eax
	jne	SHORT $LN11@ubidi_setP
; Line 2806
	jmp	SHORT $LN13@ubidi_setP
$LN11@ubidi_setP:
; Line 2807
	cmp	DWORD PTR _i$10226[ebp], 0
	jne	SHORT $LN95@ubidi_setP
	mov	DWORD PTR tv433[ebp], 0
	jmp	SHORT $LN96@ubidi_setP
$LN95@ubidi_setP:
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	edx, DWORD PTR _i$10226[ebp]
	mov	eax, DWORD PTR [ecx+edx*8-8]
	mov	DWORD PTR tv433[ebp], eax
$LN96@ubidi_setP:
	mov	ecx, DWORD PTR tv433[ebp]
	mov	DWORD PTR _start$10228[ebp], ecx
; Line 2808
	mov	eax, DWORD PTR _last$10229[ebp]
	mov	DWORD PTR _j$10227[ebp], eax
	jmp	SHORT $LN10@ubidi_setP
$LN9@ubidi_setP:
	mov	eax, DWORD PTR _j$10227[ebp]
	sub	eax, 1
	mov	DWORD PTR _j$10227[ebp], eax
$LN10@ubidi_setP:
	mov	eax, DWORD PTR _j$10227[ebp]
	cmp	eax, DWORD PTR _start$10228[ebp]
	jl	SHORT $LN8@ubidi_setP
; Line 2809
	mov	eax, DWORD PTR _dirProps$[ebp]
	add	eax, DWORD PTR _j$10227[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _dirProp$10231[ebp], cl
; Line 2810
	movzx	eax, BYTE PTR _dirProp$10231[ebp]
	test	eax, eax
	jne	SHORT $LN7@ubidi_setP
; Line 2811
	mov	eax, DWORD PTR _j$10227[ebp]
	cmp	eax, DWORD PTR _last$10229[ebp]
	jge	SHORT $LN6@ubidi_setP
$LN5@ubidi_setP:
; Line 2812
	mov	eax, DWORD PTR _dirProps$[ebp]
	add	eax, DWORD PTR _last$10229[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 7
	jne	SHORT $LN6@ubidi_setP
; Line 2813
	mov	eax, DWORD PTR _last$10229[ebp]
	sub	eax, 1
	mov	DWORD PTR _last$10229[ebp], eax
; Line 2814
	jmp	SHORT $LN5@ubidi_setP
$LN6@ubidi_setP:
; Line 2816
	push	4
	mov	eax, DWORD PTR _last$10229[ebp]
	push	eax
	mov	ecx, DWORD PTR _pBiDi$[ebp]
	push	ecx
	call	_addPoint
	add	esp, 12					; 0000000cH
; Line 2817
	jmp	SHORT $LN8@ubidi_setP
$LN7@ubidi_setP:
; Line 2819
	movzx	ecx, BYTE PTR _dirProp$10231[ebp]
	mov	eax, 1
	shl	eax, cl
	and	eax, 8194				; 00002002H
	je	SHORT $LN3@ubidi_setP
; Line 2820
	jmp	SHORT $LN8@ubidi_setP
$LN3@ubidi_setP:
; Line 2822
	jmp	$LN9@ubidi_setP
$LN8@ubidi_setP:
; Line 2823
	jmp	$LN13@ubidi_setP
$LN16@ubidi_setP:
; Line 2826
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+92]
	and	ecx, 2
	je	SHORT $LN2@ubidi_setP
; Line 2827
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR _pBiDi$[ebp]
	mov	edx, DWORD PTR [eax+20]
	sub	edx, DWORD PTR [ecx+352]
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	DWORD PTR [eax+20], edx
; Line 2828
	jmp	SHORT $LN1@ubidi_setP
$LN2@ubidi_setP:
; Line 2829
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _pBiDi$[ebp]
	add	ecx, DWORD PTR [edx+336]
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	DWORD PTR [eax+20], ecx
$LN1@ubidi_setP:
; Line 2831
	mov	eax, DWORD PTR _pBiDi$[ebp]
	push	eax
	call	_setParaSuccess
	add	esp, 4
$LN82@ubidi_setP:
; Line 2832
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 380				; 0000017cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN97@ubidi_setP:
	DD	$LN49@ubidi_setP
	DD	$LN48@ubidi_setP
	DD	$LN47@ubidi_setP
	DD	$LN39@ubidi_setP
	DD	$LN46@ubidi_setP
	DD	$LN45@ubidi_setP
	DD	$LN42@ubidi_setP
_ubidi_setPara_56 ENDP
_TEXT	ENDS
PUBLIC	_ubidi_getCustomizedClass_56
PUBLIC	__$ArrayPad$
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _getDirProps
_TEXT	SEGMENT
tv81 = -1056						; size = 4
tv76 = -1049						; size = 1
___c2$8833 = -852					; size = 2
_stackLast$ = -840					; size = 4
_previousStateStack$ = -828				; size = 126
_isolateStartStack$ = -692				; size = 504
_lastStrong$ = -177					; size = 1
_state$ = -168						; size = 4
_removeBiDiControls$ = -153				; size = 1
_controlCount$ = -144					; size = 4
_lastArabicPos$ = -132					; size = 4
_isDefaultLevelInverse$ = -117				; size = 1
_isDefaultLevel$ = -105					; size = 1
_defaultParaLevel$ = -93				; size = 1
_dirProp$ = -81						; size = 1
_uchar$ = -72						; size = 4
_flags$ = -60						; size = 4
_originalLength$ = -48					; size = 4
_i$ = -36						; size = 4
_dirProps$ = -24					; size = 4
_text$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_pBiDi$ = 8						; size = 4
_getDirProps PROC					; COMDAT
; Line 429
	push	ebp
	mov	ebp, esp
	sub	esp, 1056				; 00000420H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-1056]
	mov	ecx, 264				; 00000108H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 430
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _text$[ebp], ecx
; Line 431
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	DWORD PTR _dirProps$[ebp], ecx
; Line 433
	mov	DWORD PTR _i$[ebp], 0
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _originalLength$[ebp], ecx
; Line 434
	mov	DWORD PTR _flags$[ebp], 0
; Line 436
	mov	BYTE PTR _dirProp$[ebp], 0
	mov	BYTE PTR _defaultParaLevel$[ebp], 0
; Line 437
	mov	eax, DWORD PTR _pBiDi$[ebp]
	movzx	ecx, BYTE PTR [eax+97]
	xor	edx, edx
	cmp	ecx, 254				; 000000feH
	setge	dl
	mov	BYTE PTR _isDefaultLevel$[ebp], dl
; Line 442
	movsx	eax, BYTE PTR _isDefaultLevel$[ebp]
	test	eax, eax
	je	SHORT $LN61@getDirProp
	mov	ecx, DWORD PTR _pBiDi$[ebp]
	cmp	DWORD PTR [ecx+88], 5
	je	SHORT $LN59@getDirProp
	mov	edx, DWORD PTR _pBiDi$[ebp]
	cmp	DWORD PTR [edx+88], 6
	je	SHORT $LN59@getDirProp
	mov	BYTE PTR tv76[ebp], 0
	jmp	SHORT $LN60@getDirProp
$LN59@getDirProp:
	mov	BYTE PTR tv76[ebp], 1
$LN60@getDirProp:
	movsx	eax, BYTE PTR tv76[ebp]
	test	eax, eax
	je	SHORT $LN61@getDirProp
	mov	DWORD PTR tv81[ebp], 1
	jmp	SHORT $LN62@getDirProp
$LN61@getDirProp:
	mov	DWORD PTR tv81[ebp], 0
$LN62@getDirProp:
	mov	cl, BYTE PTR tv81[ebp]
	mov	BYTE PTR _isDefaultLevelInverse$[ebp], cl
; Line 443
	mov	DWORD PTR _lastArabicPos$[ebp], -1
; Line 444
	mov	DWORD PTR _controlCount$[ebp], 0
; Line 446
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+92]
	and	ecx, 2
	mov	BYTE PTR _removeBiDiControls$[ebp], cl
; Line 455
	mov	BYTE PTR _lastStrong$[ebp], 10		; 0000000aH
; Line 468
	mov	DWORD PTR _stackLast$[ebp], -1
; Line 470
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+92]
	and	ecx, 4
	je	SHORT $LN56@getDirProp
; Line 471
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	DWORD PTR [eax+16], 0
$LN56@getDirProp:
; Line 472
	mov	eax, DWORD PTR _pBiDi$[ebp]
	movzx	ecx, BYTE PTR [eax+97]
	and	ecx, 1
	mov	BYTE PTR _defaultParaLevel$[ebp], cl
; Line 473
	movsx	eax, BYTE PTR _isDefaultLevel$[ebp]
	test	eax, eax
	je	SHORT $LN55@getDirProp
; Line 474
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	movzx	edx, BYTE PTR _defaultParaLevel$[ebp]
	mov	DWORD PTR [ecx+4], edx
; Line 475
	mov	al, BYTE PTR _defaultParaLevel$[ebp]
	mov	BYTE PTR _lastStrong$[ebp], al
; Line 477
	mov	eax, DWORD PTR _pBiDi$[ebp]
	cmp	DWORD PTR [eax+104], 0
	jle	SHORT $LN54@getDirProp
	mov	eax, DWORD PTR _pBiDi$[ebp]
	push	eax
	call	_firstL_R_AL
	add	esp, 4
	mov	BYTE PTR _dirProp$[ebp], al
	movzx	ecx, BYTE PTR _dirProp$[ebp]
	cmp	ecx, 10					; 0000000aH
	je	SHORT $LN54@getDirProp
; Line 478
	movzx	eax, BYTE PTR _dirProp$[ebp]
	test	eax, eax
	jne	SHORT $LN53@getDirProp
; Line 479
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	DWORD PTR [ecx+4], 0
; Line 480
	jmp	SHORT $LN52@getDirProp
$LN53@getDirProp:
; Line 481
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	DWORD PTR [ecx+4], 1
$LN52@getDirProp:
; Line 482
	mov	DWORD PTR _state$[ebp], 0
; Line 483
	jmp	SHORT $LN51@getDirProp
$LN54@getDirProp:
; Line 484
	mov	DWORD PTR _state$[ebp], 1
$LN51@getDirProp:
; Line 486
	jmp	SHORT $LN49@getDirProp
$LN55@getDirProp:
; Line 487
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	edx, DWORD PTR _pBiDi$[ebp]
	movzx	eax, BYTE PTR [edx+97]
	mov	DWORD PTR [ecx+4], eax
; Line 488
	mov	DWORD PTR _state$[ebp], 0
$LN49@getDirProp:
; Line 496
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _originalLength$[ebp]
	jge	$LN48@getDirProp
; Line 498
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _text$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	mov	DWORD PTR _uchar$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	eax, DWORD PTR _uchar$[ebp]
	and	eax, -1024				; fffffc00H
	cmp	eax, 55296				; 0000d800H
	jne	SHORT $LN47@getDirProp
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _originalLength$[ebp]
	je	SHORT $LN47@getDirProp
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _text$[ebp]
	mov	dx, WORD PTR [ecx+eax*2]
	mov	WORD PTR ___c2$8833[ebp], dx
	movzx	eax, WORD PTR ___c2$8833[ebp]
	and	eax, -1024				; fffffc00H
	cmp	eax, 56320				; 0000dc00H
	jne	SHORT $LN47@getDirProp
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	eax, DWORD PTR _uchar$[ebp]
	shl	eax, 10					; 0000000aH
	movzx	ecx, WORD PTR ___c2$8833[ebp]
	lea	edx, DWORD PTR [eax+ecx-56613888]
	mov	DWORD PTR _uchar$[ebp], edx
$LN47@getDirProp:
; Line 499
	mov	eax, DWORD PTR _uchar$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pBiDi$[ebp]
	push	ecx
	call	_ubidi_getCustomizedClass_56
	add	esp, 8
	mov	BYTE PTR _dirProp$[ebp], al
	movzx	ecx, BYTE PTR _dirProp$[ebp]
	mov	edx, 1
	shl	edx, cl
	or	edx, DWORD PTR _flags$[ebp]
	mov	DWORD PTR _flags$[ebp], edx
; Line 500
	mov	eax, DWORD PTR _dirProps$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	mov	cl, BYTE PTR _dirProp$[ebp]
	mov	BYTE PTR [eax-1], cl
; Line 501
	cmp	DWORD PTR _uchar$[ebp], 65535		; 0000ffffH
	jle	SHORT $LN45@getDirProp
; Line 502
	mov	eax, DWORD PTR _flags$[ebp]
	or	eax, 262144				; 00040000H
	mov	DWORD PTR _flags$[ebp], eax
; Line 503
	mov	eax, DWORD PTR _dirProps$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	mov	BYTE PTR [eax-2], 18			; 00000012H
$LN45@getDirProp:
; Line 505
	movsx	eax, BYTE PTR _removeBiDiControls$[ebp]
	test	eax, eax
	je	SHORT $LN44@getDirProp
	mov	eax, DWORD PTR _uchar$[ebp]
	and	eax, -4					; fffffffcH
	cmp	eax, 8204				; 0000200cH
	je	SHORT $LN43@getDirProp
	mov	eax, DWORD PTR _uchar$[ebp]
	sub	eax, 8234				; 0000202aH
	cmp	eax, 5
	jb	SHORT $LN43@getDirProp
	mov	eax, DWORD PTR _uchar$[ebp]
	sub	eax, 8294				; 00002066H
	cmp	eax, 4
	jae	SHORT $LN44@getDirProp
$LN43@getDirProp:
; Line 506
	mov	eax, DWORD PTR _controlCount$[ebp]
	add	eax, 1
	mov	DWORD PTR _controlCount$[ebp], eax
$LN44@getDirProp:
; Line 507
	movzx	eax, BYTE PTR _dirProp$[ebp]
	test	eax, eax
	jne	SHORT $LN42@getDirProp
; Line 508
	cmp	DWORD PTR _state$[ebp], 1
	jne	SHORT $LN41@getDirProp
; Line 509
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+136]
	mov	edx, DWORD PTR _pBiDi$[ebp]
	mov	eax, DWORD PTR [edx+140]
	mov	DWORD PTR [eax+ecx*8-4], 0
; Line 510
	mov	DWORD PTR _state$[ebp], 0
	jmp	SHORT $LN40@getDirProp
$LN41@getDirProp:
; Line 512
	cmp	DWORD PTR _state$[ebp], 2
	jne	SHORT $LN40@getDirProp
; Line 513
	cmp	DWORD PTR _stackLast$[ebp], 125		; 0000007dH
	jg	SHORT $LN38@getDirProp
; Line 516
	mov	eax, DWORD PTR _flags$[ebp]
	or	eax, 1048576				; 00100000H
	mov	DWORD PTR _flags$[ebp], eax
$LN38@getDirProp:
; Line 518
	mov	DWORD PTR _state$[ebp], 3
$LN40@getDirProp:
; Line 520
	mov	BYTE PTR _lastStrong$[ebp], 0
; Line 521
	jmp	$LN49@getDirProp
$LN42@getDirProp:
; Line 523
	movzx	eax, BYTE PTR _dirProp$[ebp]
	cmp	eax, 1
	je	SHORT $LN36@getDirProp
	movzx	eax, BYTE PTR _dirProp$[ebp]
	cmp	eax, 13					; 0000000dH
	jne	$LN37@getDirProp
$LN36@getDirProp:
; Line 524
	cmp	DWORD PTR _state$[ebp], 1
	jne	SHORT $LN35@getDirProp
; Line 525
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+136]
	mov	edx, DWORD PTR _pBiDi$[ebp]
	mov	eax, DWORD PTR [edx+140]
	mov	DWORD PTR [eax+ecx*8-4], 1
; Line 526
	mov	DWORD PTR _state$[ebp], 0
	jmp	SHORT $LN34@getDirProp
$LN35@getDirProp:
; Line 528
	cmp	DWORD PTR _state$[ebp], 2
	jne	SHORT $LN34@getDirProp
; Line 529
	cmp	DWORD PTR _stackLast$[ebp], 125		; 0000007dH
	jg	SHORT $LN32@getDirProp
; Line 530
	mov	eax, DWORD PTR _stackLast$[ebp]
	mov	ecx, DWORD PTR _isolateStartStack$[ebp+eax*4]
	mov	edx, DWORD PTR _dirProps$[ebp]
	mov	BYTE PTR [edx+ecx], 21			; 00000015H
; Line 531
	mov	eax, DWORD PTR _flags$[ebp]
	or	eax, 2097152				; 00200000H
	mov	DWORD PTR _flags$[ebp], eax
$LN32@getDirProp:
; Line 533
	mov	DWORD PTR _state$[ebp], 3
$LN34@getDirProp:
; Line 535
	mov	BYTE PTR _lastStrong$[ebp], 1
; Line 536
	movzx	eax, BYTE PTR _dirProp$[ebp]
	cmp	eax, 13					; 0000000dH
	jne	SHORT $LN31@getDirProp
; Line 537
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _lastArabicPos$[ebp], eax
$LN31@getDirProp:
; Line 538
	jmp	$LN49@getDirProp
$LN37@getDirProp:
; Line 540
	movzx	eax, BYTE PTR _dirProp$[ebp]
	cmp	eax, 19					; 00000013H
	jl	SHORT $LN30@getDirProp
	movzx	eax, BYTE PTR _dirProp$[ebp]
	cmp	eax, 21					; 00000015H
	jg	SHORT $LN30@getDirProp
; Line 541
	mov	eax, DWORD PTR _stackLast$[ebp]
	add	eax, 1
	mov	DWORD PTR _stackLast$[ebp], eax
; Line 542
	cmp	DWORD PTR _stackLast$[ebp], 125		; 0000007dH
	jg	SHORT $LN29@getDirProp
; Line 543
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	ecx, DWORD PTR _stackLast$[ebp]
	mov	DWORD PTR _isolateStartStack$[ebp+ecx*4], eax
; Line 544
	mov	eax, DWORD PTR _stackLast$[ebp]
	mov	cl, BYTE PTR _state$[ebp]
	mov	BYTE PTR _previousStateStack$[ebp+eax], cl
$LN29@getDirProp:
; Line 546
	movzx	eax, BYTE PTR _dirProp$[ebp]
	cmp	eax, 19					; 00000013H
	jne	SHORT $LN28@getDirProp
; Line 547
	mov	eax, DWORD PTR _dirProps$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	mov	BYTE PTR [eax-1], 20			; 00000014H
; Line 548
	mov	DWORD PTR _state$[ebp], 2
; Line 550
	jmp	SHORT $LN27@getDirProp
$LN28@getDirProp:
; Line 551
	mov	DWORD PTR _state$[ebp], 3
$LN27@getDirProp:
; Line 552
	jmp	$LN49@getDirProp
$LN30@getDirProp:
; Line 554
	movzx	eax, BYTE PTR _dirProp$[ebp]
	cmp	eax, 22					; 00000016H
	jne	SHORT $LN26@getDirProp
; Line 555
	cmp	DWORD PTR _state$[ebp], 2
	jne	SHORT $LN25@getDirProp
; Line 556
	cmp	DWORD PTR _stackLast$[ebp], 125		; 0000007dH
	jg	SHORT $LN25@getDirProp
; Line 559
	mov	eax, DWORD PTR _flags$[ebp]
	or	eax, 1048576				; 00100000H
	mov	DWORD PTR _flags$[ebp], eax
$LN25@getDirProp:
; Line 562
	cmp	DWORD PTR _stackLast$[ebp], 0
	jl	SHORT $LN23@getDirProp
; Line 563
	cmp	DWORD PTR _stackLast$[ebp], 125		; 0000007dH
	jg	SHORT $LN22@getDirProp
; Line 564
	mov	eax, DWORD PTR _stackLast$[ebp]
	movsx	ecx, BYTE PTR _previousStateStack$[ebp+eax]
	mov	DWORD PTR _state$[ebp], ecx
$LN22@getDirProp:
; Line 565
	mov	eax, DWORD PTR _stackLast$[ebp]
	sub	eax, 1
	mov	DWORD PTR _stackLast$[ebp], eax
$LN23@getDirProp:
; Line 567
	jmp	$LN49@getDirProp
$LN26@getDirProp:
; Line 569
	movzx	eax, BYTE PTR _dirProp$[ebp]
	cmp	eax, 7
	jne	$LN21@getDirProp
; Line 570
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _originalLength$[ebp]
	jge	SHORT $LN20@getDirProp
	cmp	DWORD PTR _uchar$[ebp], 13		; 0000000dH
	jne	SHORT $LN20@getDirProp
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _text$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	cmp	edx, 10					; 0000000aH
	jne	SHORT $LN20@getDirProp
; Line 571
	jmp	$LN49@getDirProp
$LN20@getDirProp:
; Line 572
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+136]
	mov	edx, DWORD PTR _pBiDi$[ebp]
	mov	eax, DWORD PTR [edx+140]
	mov	edx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [eax+ecx*8-8], edx
; Line 573
	movsx	eax, BYTE PTR _isDefaultLevelInverse$[ebp]
	test	eax, eax
	je	SHORT $LN19@getDirProp
	movzx	eax, BYTE PTR _lastStrong$[ebp]
	cmp	eax, 1
	jne	SHORT $LN19@getDirProp
; Line 574
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+136]
	mov	edx, DWORD PTR _pBiDi$[ebp]
	mov	eax, DWORD PTR [edx+140]
	mov	DWORD PTR [eax+ecx*8-4], 1
$LN19@getDirProp:
; Line 575
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+92]
	and	ecx, 4
	je	SHORT $LN18@getDirProp
; Line 578
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [eax+16], ecx
; Line 579
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR _controlCount$[ebp]
	mov	DWORD PTR [eax+352], ecx
$LN18@getDirProp:
; Line 581
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _originalLength$[ebp]
	jge	$LN17@getDirProp
; Line 582
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+136]
	add	ecx, 1
	mov	edx, DWORD PTR _pBiDi$[ebp]
	mov	DWORD PTR [edx+136], ecx
; Line 583
	mov	eax, DWORD PTR _pBiDi$[ebp]
	push	eax
	call	_checkParaCount
	add	esp, 4
	movsx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN16@getDirProp
; Line 584
	xor	al, al
	jmp	$LN57@getDirProp
$LN16@getDirProp:
; Line 585
	movsx	eax, BYTE PTR _isDefaultLevel$[ebp]
	test	eax, eax
	je	SHORT $LN15@getDirProp
; Line 586
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+136]
	mov	edx, DWORD PTR _pBiDi$[ebp]
	mov	eax, DWORD PTR [edx+140]
	movzx	edx, BYTE PTR _defaultParaLevel$[ebp]
	mov	DWORD PTR [eax+ecx*8-4], edx
; Line 587
	mov	DWORD PTR _state$[ebp], 1
; Line 588
	mov	al, BYTE PTR _defaultParaLevel$[ebp]
	mov	BYTE PTR _lastStrong$[ebp], al
; Line 589
	jmp	SHORT $LN14@getDirProp
$LN15@getDirProp:
; Line 590
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+136]
	mov	edx, DWORD PTR _pBiDi$[ebp]
	mov	eax, DWORD PTR [edx+140]
	mov	edx, DWORD PTR _pBiDi$[ebp]
	movzx	edx, BYTE PTR [edx+97]
	mov	DWORD PTR [eax+ecx*8-4], edx
; Line 591
	mov	DWORD PTR _state$[ebp], 0
$LN14@getDirProp:
; Line 593
	mov	DWORD PTR _stackLast$[ebp], -1
$LN17@getDirProp:
; Line 595
	jmp	$LN49@getDirProp
$LN21@getDirProp:
; Line 597
	jmp	$LN49@getDirProp
$LN48@getDirProp:
; Line 599
	cmp	DWORD PTR _stackLast$[ebp], 125		; 0000007dH
	jle	SHORT $LN12@getDirProp
; Line 600
	mov	DWORD PTR _stackLast$[ebp], 125		; 0000007dH
; Line 601
	mov	DWORD PTR _state$[ebp], 2
$LN12@getDirProp:
; Line 604
	cmp	DWORD PTR _stackLast$[ebp], 0
	jl	SHORT $LN11@getDirProp
; Line 605
	cmp	DWORD PTR _state$[ebp], 2
	jne	SHORT $LN10@getDirProp
; Line 608
	mov	eax, DWORD PTR _flags$[ebp]
	or	eax, 1048576				; 00100000H
	mov	DWORD PTR _flags$[ebp], eax
; Line 609
	jmp	SHORT $LN11@getDirProp
$LN10@getDirProp:
; Line 611
	mov	eax, DWORD PTR _stackLast$[ebp]
	movsx	ecx, BYTE PTR _previousStateStack$[ebp+eax]
	mov	DWORD PTR _state$[ebp], ecx
; Line 612
	mov	eax, DWORD PTR _stackLast$[ebp]
	sub	eax, 1
	mov	DWORD PTR _stackLast$[ebp], eax
; Line 613
	jmp	SHORT $LN12@getDirProp
$LN11@getDirProp:
; Line 615
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+92]
	and	ecx, 4
	je	SHORT $LN9@getDirProp
; Line 616
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR _originalLength$[ebp]
	jge	SHORT $LN8@getDirProp
; Line 617
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+136]
	sub	ecx, 1
	mov	edx, DWORD PTR _pBiDi$[ebp]
	mov	DWORD PTR [edx+136], ecx
$LN8@getDirProp:
; Line 618
	jmp	SHORT $LN7@getDirProp
$LN9@getDirProp:
; Line 619
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+136]
	mov	edx, DWORD PTR _pBiDi$[ebp]
	mov	eax, DWORD PTR [edx+140]
	mov	edx, DWORD PTR _originalLength$[ebp]
	mov	DWORD PTR [eax+ecx*8-8], edx
; Line 620
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR _controlCount$[ebp]
	mov	DWORD PTR [eax+352], ecx
$LN7@getDirProp:
; Line 624
	movsx	eax, BYTE PTR _isDefaultLevelInverse$[ebp]
	test	eax, eax
	je	SHORT $LN6@getDirProp
	movzx	eax, BYTE PTR _lastStrong$[ebp]
	cmp	eax, 1
	jne	SHORT $LN6@getDirProp
; Line 625
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+136]
	mov	edx, DWORD PTR _pBiDi$[ebp]
	mov	eax, DWORD PTR [edx+140]
	mov	DWORD PTR [eax+ecx*8-4], 1
$LN6@getDirProp:
; Line 627
	movsx	eax, BYTE PTR _isDefaultLevel$[ebp]
	test	eax, eax
	je	SHORT $LN5@getDirProp
; Line 628
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	edx, DWORD PTR _pBiDi$[ebp]
	mov	al, BYTE PTR [ecx+4]
	mov	BYTE PTR [edx+97], al
$LN5@getDirProp:
; Line 632
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@getDirProp
$LN3@getDirProp:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@getDirProp:
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR [eax+136]
	jge	SHORT $LN2@getDirProp
; Line 633
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR [ecx+edx*8+4]
	and	eax, 1
	mov	ecx, DWORD PTR _flags$[ebp]
	or	ecx, DWORD PTR _flagLR[eax*4]
	mov	DWORD PTR _flags$[ebp], ecx
	jmp	SHORT $LN3@getDirProp
$LN2@getDirProp:
; Line 635
	mov	eax, DWORD PTR _pBiDi$[ebp]
	movsx	ecx, BYTE PTR [eax+96]
	test	ecx, ecx
	je	SHORT $LN1@getDirProp
	mov	eax, DWORD PTR _flags$[ebp]
	and	eax, 128				; 00000080H
	je	SHORT $LN1@getDirProp
; Line 636
	mov	eax, DWORD PTR _flags$[ebp]
	or	eax, 1
	mov	DWORD PTR _flags$[ebp], eax
$LN1@getDirProp:
; Line 638
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR _flags$[ebp]
	mov	DWORD PTR [eax+124], ecx
; Line 639
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR _lastArabicPos$[ebp]
	mov	DWORD PTR [eax+128], ecx
; Line 640
	mov	al, 1
$LN57@getDirProp:
; Line 641
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN72@getDirProp
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 1056				; 00000420H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN72@getDirProp:
	DD	2
	DD	$LN71@getDirProp
$LN71@getDirProp:
	DD	-692					; fffffd4cH
	DD	504					; 000001f8H
	DD	$LN69@getDirProp
	DD	-828					; fffffcc4H
	DD	126					; 0000007eH
	DD	$LN70@getDirProp
$LN70@getDirProp:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	118					; 00000076H
	DB	105					; 00000069H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	115					; 00000073H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
$LN69@getDirProp:
	DB	105					; 00000069H
	DB	115					; 00000073H
	DB	111					; 0000006fH
	DB	108					; 0000006cH
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	116					; 00000074H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_getDirProps ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _firstL_R_AL
_TEXT	SEGMENT
___c2$8768 = -80					; size = 2
_result$ = -65						; size = 1
_dirProp$ = -53						; size = 1
_uchar$ = -44						; size = 4
_i$ = -32						; size = 4
_length$ = -20						; size = 4
_text$ = -8						; size = 4
_pBiDi$ = 8						; size = 4
_firstL_R_AL PROC					; COMDAT
; Line 376
	push	ebp
	mov	ebp, esp
	sub	esp, 276				; 00000114H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-276]
	mov	ecx, 69					; 00000045H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 377
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+100]
	mov	DWORD PTR _text$[ebp], ecx
; Line 378
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+104]
	mov	DWORD PTR _length$[ebp], ecx
; Line 381
	mov	BYTE PTR _result$[ebp], 10		; 0000000aH
; Line 382
	mov	DWORD PTR _i$[ebp], 0
$LN9@firstL_R_A:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _length$[ebp]
	jge	$LN8@firstL_R_A
; Line 384
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _text$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	mov	DWORD PTR _uchar$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	eax, DWORD PTR _uchar$[ebp]
	and	eax, -1024				; fffffc00H
	cmp	eax, 55296				; 0000d800H
	jne	SHORT $LN7@firstL_R_A
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _length$[ebp]
	je	SHORT $LN7@firstL_R_A
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _text$[ebp]
	mov	dx, WORD PTR [ecx+eax*2]
	mov	WORD PTR ___c2$8768[ebp], dx
	movzx	eax, WORD PTR ___c2$8768[ebp]
	and	eax, -1024				; fffffc00H
	cmp	eax, 56320				; 0000dc00H
	jne	SHORT $LN7@firstL_R_A
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	eax, DWORD PTR _uchar$[ebp]
	shl	eax, 10					; 0000000aH
	movzx	ecx, WORD PTR ___c2$8768[ebp]
	lea	edx, DWORD PTR [eax+ecx-56613888]
	mov	DWORD PTR _uchar$[ebp], edx
$LN7@firstL_R_A:
; Line 385
	mov	eax, DWORD PTR _uchar$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pBiDi$[ebp]
	push	ecx
	call	_ubidi_getCustomizedClass_56
	add	esp, 8
	mov	BYTE PTR _dirProp$[ebp], al
; Line 386
	movzx	eax, BYTE PTR _result$[ebp]
	cmp	eax, 10					; 0000000aH
	jne	SHORT $LN5@firstL_R_A
; Line 387
	movzx	eax, BYTE PTR _dirProp$[ebp]
	test	eax, eax
	je	SHORT $LN3@firstL_R_A
	movzx	eax, BYTE PTR _dirProp$[ebp]
	cmp	eax, 1
	je	SHORT $LN3@firstL_R_A
	movzx	eax, BYTE PTR _dirProp$[ebp]
	cmp	eax, 13					; 0000000dH
	jne	SHORT $LN4@firstL_R_A
$LN3@firstL_R_A:
; Line 388
	mov	al, BYTE PTR _dirProp$[ebp]
	mov	BYTE PTR _result$[ebp], al
$LN4@firstL_R_A:
; Line 390
	jmp	SHORT $LN2@firstL_R_A
$LN5@firstL_R_A:
; Line 391
	movzx	eax, BYTE PTR _dirProp$[ebp]
	cmp	eax, 7
	jne	SHORT $LN2@firstL_R_A
; Line 392
	mov	BYTE PTR _result$[ebp], 10		; 0000000aH
$LN2@firstL_R_A:
; Line 395
	jmp	$LN9@firstL_R_A
$LN8@firstL_R_A:
; Line 396
	mov	al, BYTE PTR _result$[ebp]
; Line 397
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 276				; 00000114H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_firstL_R_AL ENDP
_TEXT	ENDS
EXTRN	_memcpy:PROC
EXTRN	_uprv_checkValidMemory:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _checkParaCount
_TEXT	SEGMENT
_count$ = -8						; size = 4
_pBiDi$ = 8						; size = 4
_checkParaCount PROC					; COMDAT
; Line 403
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 404
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+136]
	mov	DWORD PTR _count$[ebp], ecx
; Line 405
	mov	eax, DWORD PTR _pBiDi$[ebp]
	add	eax, 144				; 00000090H
	mov	ecx, DWORD PTR _pBiDi$[ebp]
	cmp	DWORD PTR [ecx+140], eax
	jne	SHORT $LN4@checkParaC
; Line 406
	cmp	DWORD PTR _count$[ebp], 10		; 0000000aH
	jg	SHORT $LN3@checkParaC
; Line 407
	mov	al, 1
	jmp	$LN5@checkParaC
$LN3@checkParaC:
; Line 408
	push	160					; 000000a0H
	push	1
	mov	eax, DWORD PTR _pBiDi$[ebp]
	add	eax, 36					; 00000024H
	push	eax
	mov	ecx, DWORD PTR _pBiDi$[ebp]
	add	ecx, 60					; 0000003cH
	push	ecx
	call	_ubidi_getMemory_56
	add	esp, 16					; 00000010H
	movsx	edx, al
	test	edx, edx
	jne	SHORT $LN2@checkParaC
; Line 409
	xor	al, al
	jmp	SHORT $LN5@checkParaC
$LN2@checkParaC:
; Line 410
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR _pBiDi$[ebp]
	mov	edx, DWORD PTR [ecx+60]
	mov	DWORD PTR [eax+140], edx
; Line 411
	push	1
	mov	eax, DWORD PTR _pBiDi$[ebp]
	add	eax, 144				; 00000090H
	push	eax
	call	_uprv_checkValidMemory
	add	esp, 8
	push	80					; 00000050H
	mov	ecx, DWORD PTR _pBiDi$[ebp]
	add	ecx, 144				; 00000090H
	push	ecx
	mov	edx, DWORD PTR _pBiDi$[ebp]
	mov	eax, DWORD PTR [edx+60]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 412
	mov	al, 1
	jmp	SHORT $LN5@checkParaC
$LN4@checkParaC:
; Line 414
	mov	eax, DWORD PTR _count$[ebp]
	shl	eax, 1
	shl	eax, 3
	push	eax
	push	1
	mov	ecx, DWORD PTR _pBiDi$[ebp]
	add	ecx, 36					; 00000024H
	push	ecx
	mov	edx, DWORD PTR _pBiDi$[ebp]
	add	edx, 60					; 0000003cH
	push	edx
	call	_ubidi_getMemory_56
	add	esp, 16					; 00000010H
	movsx	eax, al
	test	eax, eax
	jne	SHORT $LN1@checkParaC
; Line 415
	xor	al, al
	jmp	SHORT $LN5@checkParaC
$LN1@checkParaC:
; Line 416
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR _pBiDi$[ebp]
	mov	edx, DWORD PTR [ecx+60]
	mov	DWORD PTR [eax+140], edx
; Line 417
	mov	al, 1
$LN5@checkParaC:
; Line 418
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_checkParaCount ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	__chkstk:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _resolveExplicitLevels
_TEXT	SEGMENT
tv370 = -5820						; size = 4
tv343 = -5820						; size = 4
tv192 = -5820						; size = 4
tv81 = -5820						; size = 4
_bracketData$9148 = -5620				; size = 2532
_validIsolateCount$9147 = -3080				; size = 4
_overflowEmbeddingCount$9146 = -3068			; size = 4
_overflowIsolateCount$9145 = -3056			; size = 4
_stackLast$9144 = -3044					; size = 4
_stack$9143 = -3032					; size = 254
_lastCcPos$9142 = -2768					; size = 4
_previousLevel$9141 = -2753				; size = 1
_newLevel$9140 = -2741					; size = 1
_embeddingLevel$9139 = -2729				; size = 1
_bracketData$9125 = -2720				; size = 2532
_limit$9124 = -180					; size = 4
_start$9123 = -168					; size = 4
_paraIndex$9122 = -156					; size = 4
_limit$9112 = -144					; size = 4
_start$9111 = -132					; size = 4
_paraIndex$9110 = -120					; size = 4
_direction$ = -108					; size = 4
_level$ = -93						; size = 1
_dirProp$ = -81						; size = 1
_flags$ = -72						; size = 4
_length$ = -60						; size = 4
_i$ = -48						; size = 4
_text$ = -36						; size = 4
_levels$ = -24						; size = 4
_dirProps$ = -12					; size = 4
__$ArrayPad$ = -4					; size = 4
_pBiDi$ = 8						; size = 4
_pErrorCode$ = 12					; size = 4
_resolveExplicitLevels PROC				; COMDAT
; Line 1068
	push	ebp
	mov	ebp, esp
	mov	eax, 5820				; 000016bcH
	call	__chkstk
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-5820]
	mov	ecx, 1455				; 000005afH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 1069
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	mov	DWORD PTR _dirProps$[ebp], ecx
; Line 1070
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+80]
	mov	DWORD PTR _levels$[ebp], ecx
; Line 1071
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _text$[ebp], ecx
; Line 1073
	mov	DWORD PTR _i$[ebp], 0
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _length$[ebp], ecx
; Line 1074
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+124]
	mov	DWORD PTR _flags$[ebp], ecx
; Line 1076
	mov	eax, DWORD PTR _pBiDi$[ebp]
	movzx	ecx, BYTE PTR [eax+98]
	test	ecx, ecx
	je	SHORT $LN72@resolveExp
	mov	edx, DWORD PTR _pBiDi$[ebp]
	mov	eax, DWORD PTR [edx+140]
	cmp	DWORD PTR [eax], 0
	jg	SHORT $LN72@resolveExp
	push	0
	mov	ecx, DWORD PTR _pBiDi$[ebp]
	push	ecx
	call	_ubidi_getParaLevelAtIndex_56
	add	esp, 8
	movzx	edx, al
	mov	DWORD PTR tv81[ebp], edx
	jmp	SHORT $LN73@resolveExp
$LN72@resolveExp:
	mov	eax, DWORD PTR _pBiDi$[ebp]
	movzx	ecx, BYTE PTR [eax+97]
	mov	DWORD PTR tv81[ebp], ecx
$LN73@resolveExp:
	mov	dl, BYTE PTR tv81[ebp]
	mov	BYTE PTR _level$[ebp], dl
; Line 1078
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	DWORD PTR [eax+244], 0
; Line 1080
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN69@resolveExp
	xor	eax, eax
	jmp	$LN70@resolveExp
$LN69@resolveExp:
; Line 1083
	mov	eax, DWORD PTR _pBiDi$[ebp]
	push	eax
	call	_directionFromFlags
	add	esp, 4
	mov	DWORD PTR _direction$[ebp], eax
; Line 1086
	cmp	DWORD PTR _direction$[ebp], 2
	je	SHORT $LN68@resolveExp
; Line 1088
	mov	eax, DWORD PTR _direction$[ebp]
	jmp	$LN70@resolveExp
$LN68@resolveExp:
; Line 1090
	mov	eax, DWORD PTR _pBiDi$[ebp]
	cmp	DWORD PTR [eax+88], 1
	jle	$LN67@resolveExp
; Line 1094
	mov	DWORD PTR _paraIndex$9110[ebp], 0
	jmp	SHORT $LN66@resolveExp
$LN65@resolveExp:
	mov	eax, DWORD PTR _paraIndex$9110[ebp]
	add	eax, 1
	mov	DWORD PTR _paraIndex$9110[ebp], eax
$LN66@resolveExp:
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR _paraIndex$9110[ebp]
	cmp	ecx, DWORD PTR [eax+136]
	jge	$LN64@resolveExp
; Line 1095
	cmp	DWORD PTR _paraIndex$9110[ebp], 0
	jne	SHORT $LN63@resolveExp
; Line 1096
	mov	DWORD PTR _start$9111[ebp], 0
; Line 1097
	jmp	SHORT $LN62@resolveExp
$LN63@resolveExp:
; Line 1098
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	edx, DWORD PTR _paraIndex$9110[ebp]
	mov	eax, DWORD PTR [ecx+edx*8-8]
	mov	DWORD PTR _start$9111[ebp], eax
$LN62@resolveExp:
; Line 1099
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	edx, DWORD PTR _paraIndex$9110[ebp]
	mov	eax, DWORD PTR [ecx+edx*8]
	mov	DWORD PTR _limit$9112[ebp], eax
; Line 1100
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	edx, DWORD PTR _paraIndex$9110[ebp]
	mov	al, BYTE PTR [ecx+edx*8+4]
	mov	BYTE PTR _level$[ebp], al
; Line 1101
	mov	eax, DWORD PTR _start$9111[ebp]
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN61@resolveExp
$LN60@resolveExp:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN61@resolveExp:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _limit$9112[ebp]
	jge	SHORT $LN59@resolveExp
; Line 1102
	mov	eax, DWORD PTR _levels$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	mov	cl, BYTE PTR _level$[ebp]
	mov	BYTE PTR [eax], cl
	jmp	SHORT $LN60@resolveExp
$LN59@resolveExp:
; Line 1103
	jmp	$LN65@resolveExp
$LN64@resolveExp:
; Line 1104
	mov	eax, DWORD PTR _direction$[ebp]
	jmp	$LN70@resolveExp
$LN67@resolveExp:
; Line 1106
	mov	eax, DWORD PTR _flags$[ebp]
	and	eax, 7985152				; 0079d800H
	jne	$LN58@resolveExp
; Line 1111
	lea	eax, DWORD PTR _bracketData$9125[ebp]
	push	eax
	mov	ecx, DWORD PTR _pBiDi$[ebp]
	push	ecx
	call	_bracketInit
	add	esp, 8
; Line 1112
	mov	DWORD PTR _paraIndex$9122[ebp], 0
	jmp	SHORT $LN57@resolveExp
$LN56@resolveExp:
	mov	eax, DWORD PTR _paraIndex$9122[ebp]
	add	eax, 1
	mov	DWORD PTR _paraIndex$9122[ebp], eax
$LN57@resolveExp:
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR _paraIndex$9122[ebp]
	cmp	ecx, DWORD PTR [eax+136]
	jge	$LN55@resolveExp
; Line 1113
	cmp	DWORD PTR _paraIndex$9122[ebp], 0
	jne	SHORT $LN54@resolveExp
; Line 1114
	mov	DWORD PTR _start$9123[ebp], 0
; Line 1115
	jmp	SHORT $LN53@resolveExp
$LN54@resolveExp:
; Line 1116
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	edx, DWORD PTR _paraIndex$9122[ebp]
	mov	eax, DWORD PTR [ecx+edx*8-8]
	mov	DWORD PTR _start$9123[ebp], eax
$LN53@resolveExp:
; Line 1117
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	edx, DWORD PTR _paraIndex$9122[ebp]
	mov	eax, DWORD PTR [ecx+edx*8]
	mov	DWORD PTR _limit$9124[ebp], eax
; Line 1118
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	edx, DWORD PTR _paraIndex$9122[ebp]
	mov	al, BYTE PTR [ecx+edx*8+4]
	mov	BYTE PTR _level$[ebp], al
; Line 1119
	mov	eax, DWORD PTR _start$9123[ebp]
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN52@resolveExp
$LN51@resolveExp:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN52@resolveExp:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _limit$9124[ebp]
	jge	$LN50@resolveExp
; Line 1120
	mov	eax, DWORD PTR _levels$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	mov	cl, BYTE PTR _level$[ebp]
	mov	BYTE PTR [eax], cl
; Line 1121
	mov	eax, DWORD PTR _dirProps$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _dirProp$[ebp], cl
; Line 1122
	movzx	eax, BYTE PTR _dirProp$[ebp]
	cmp	eax, 18					; 00000012H
	jne	SHORT $LN49@resolveExp
; Line 1123
	jmp	SHORT $LN51@resolveExp
$LN49@resolveExp:
; Line 1124
	movzx	eax, BYTE PTR _dirProp$[ebp]
	cmp	eax, 7
	jne	SHORT $LN48@resolveExp
; Line 1125
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	cmp	eax, DWORD PTR _length$[ebp]
	jge	SHORT $LN47@resolveExp
; Line 1126
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _text$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	cmp	edx, 13					; 0000000dH
	jne	SHORT $LN46@resolveExp
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _text$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2+2]
	cmp	edx, 10					; 0000000aH
	jne	SHORT $LN46@resolveExp
; Line 1127
	jmp	SHORT $LN51@resolveExp
$LN46@resolveExp:
; Line 1128
	movzx	eax, BYTE PTR _level$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bracketData$9125[ebp]
	push	ecx
	call	_bracketProcessB
	add	esp, 8
$LN47@resolveExp:
; Line 1130
	jmp	$LN51@resolveExp
$LN48@resolveExp:
; Line 1132
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bracketData$9125[ebp]
	push	ecx
	call	_bracketProcessChar
	add	esp, 8
	movsx	edx, al
	test	edx, edx
	jne	SHORT $LN45@resolveExp
; Line 1133
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 7
; Line 1134
	xor	eax, eax
	jmp	$LN70@resolveExp
$LN45@resolveExp:
; Line 1136
	jmp	$LN51@resolveExp
$LN50@resolveExp:
; Line 1137
	jmp	$LN56@resolveExp
$LN55@resolveExp:
; Line 1138
	mov	eax, DWORD PTR _direction$[ebp]
	jmp	$LN70@resolveExp
$LN58@resolveExp:
; Line 1145
	mov	al, BYTE PTR _level$[ebp]
	mov	BYTE PTR _embeddingLevel$9139[ebp], al
; Line 1146
	mov	al, BYTE PTR _level$[ebp]
	mov	BYTE PTR _previousLevel$9141[ebp], al
; Line 1147
	mov	DWORD PTR _lastCcPos$9142[ebp], 0
; Line 1153
	mov	DWORD PTR _stackLast$9144[ebp], 0
; Line 1154
	mov	DWORD PTR _overflowIsolateCount$9145[ebp], 0
; Line 1155
	mov	DWORD PTR _overflowEmbeddingCount$9146[ebp], 0
; Line 1156
	mov	DWORD PTR _validIsolateCount$9147[ebp], 0
; Line 1158
	lea	eax, DWORD PTR _bracketData$9148[ebp]
	push	eax
	mov	ecx, DWORD PTR _pBiDi$[ebp]
	push	ecx
	call	_bracketInit
	add	esp, 8
; Line 1159
	movzx	ax, BYTE PTR _level$[ebp]
	mov	WORD PTR _stack$9143[ebp], ax
; Line 1162
	mov	DWORD PTR _flags$[ebp], 0
; Line 1164
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN44@resolveExp
$LN43@resolveExp:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN44@resolveExp:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _length$[ebp]
	jge	$LN42@resolveExp
; Line 1165
	mov	eax, DWORD PTR _dirProps$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _dirProp$[ebp], cl
; Line 1166
	movzx	eax, BYTE PTR _dirProp$[ebp]
	mov	DWORD PTR tv192[ebp], eax
	mov	ecx, DWORD PTR tv192[ebp]
	sub	ecx, 7
	mov	DWORD PTR tv192[ebp], ecx
	cmp	DWORD PTR tv192[ebp], 15		; 0000000fH
	ja	$LN7@resolveExp
	mov	edx, DWORD PTR tv192[ebp]
	movzx	eax, BYTE PTR $LN78@resolveExp[edx]
	jmp	DWORD PTR $LN84@resolveExp[eax*4]
$LN39@resolveExp:
; Line 1172
	mov	eax, DWORD PTR _flags$[ebp]
	or	eax, 262144				; 00040000H
	mov	DWORD PTR _flags$[ebp], eax
; Line 1173
	mov	eax, DWORD PTR _levels$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	mov	cl, BYTE PTR _previousLevel$9141[ebp]
	mov	BYTE PTR [eax], cl
; Line 1174
	movzx	eax, BYTE PTR _dirProp$[ebp]
	cmp	eax, 11					; 0000000bH
	je	SHORT $LN37@resolveExp
	movzx	eax, BYTE PTR _dirProp$[ebp]
	cmp	eax, 12					; 0000000cH
	jne	SHORT $LN38@resolveExp
$LN37@resolveExp:
; Line 1176
	movzx	eax, BYTE PTR _embeddingLevel$9139[ebp]
	add	eax, 2
	and	eax, -130				; ffffff7eH
	mov	BYTE PTR _newLevel$9140[ebp], al
; Line 1177
	jmp	SHORT $LN36@resolveExp
$LN38@resolveExp:
; Line 1179
	movzx	eax, BYTE PTR _embeddingLevel$9139[ebp]
	and	eax, -129				; ffffff7fH
	add	eax, 1
	or	eax, 1
	mov	BYTE PTR _newLevel$9140[ebp], al
$LN36@resolveExp:
; Line 1181
	movzx	eax, BYTE PTR _newLevel$9140[ebp]
	cmp	eax, 125				; 0000007dH
	jg	SHORT $LN35@resolveExp
	cmp	DWORD PTR _overflowIsolateCount$9145[ebp], 0
	jne	SHORT $LN35@resolveExp
	cmp	DWORD PTR _overflowEmbeddingCount$9146[ebp], 0
	jne	SHORT $LN35@resolveExp
; Line 1182
	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR _lastCcPos$9142[ebp], eax
; Line 1183
	mov	al, BYTE PTR _newLevel$9140[ebp]
	mov	BYTE PTR _embeddingLevel$9139[ebp], al
; Line 1184
	movzx	eax, BYTE PTR _dirProp$[ebp]
	cmp	eax, 12					; 0000000cH
	je	SHORT $LN33@resolveExp
	movzx	eax, BYTE PTR _dirProp$[ebp]
	cmp	eax, 15					; 0000000fH
	jne	SHORT $LN34@resolveExp
$LN33@resolveExp:
; Line 1185
	movzx	eax, BYTE PTR _embeddingLevel$9139[ebp]
	or	eax, 128				; 00000080H
	mov	BYTE PTR _embeddingLevel$9139[ebp], al
$LN34@resolveExp:
; Line 1186
	mov	eax, DWORD PTR _stackLast$9144[ebp]
	add	eax, 1
	mov	DWORD PTR _stackLast$9144[ebp], eax
; Line 1187
	movzx	ax, BYTE PTR _embeddingLevel$9139[ebp]
	mov	ecx, DWORD PTR _stackLast$9144[ebp]
	mov	WORD PTR _stack$9143[ebp+ecx*2], ax
; Line 1192
	jmp	SHORT $LN32@resolveExp
$LN35@resolveExp:
; Line 1193
	cmp	DWORD PTR _overflowIsolateCount$9145[ebp], 0
	jne	SHORT $LN32@resolveExp
; Line 1194
	mov	eax, DWORD PTR _overflowEmbeddingCount$9146[ebp]
	add	eax, 1
	mov	DWORD PTR _overflowEmbeddingCount$9146[ebp], eax
$LN32@resolveExp:
; Line 1196
	jmp	$LN40@resolveExp
$LN30@resolveExp:
; Line 1199
	mov	eax, DWORD PTR _flags$[ebp]
	or	eax, 262144				; 00040000H
	mov	DWORD PTR _flags$[ebp], eax
; Line 1200
	mov	eax, DWORD PTR _levels$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	mov	cl, BYTE PTR _previousLevel$9141[ebp]
	mov	BYTE PTR [eax], cl
; Line 1202
	cmp	DWORD PTR _overflowIsolateCount$9145[ebp], 0
	je	SHORT $LN29@resolveExp
; Line 1203
	jmp	$LN40@resolveExp
$LN29@resolveExp:
; Line 1205
	cmp	DWORD PTR _overflowEmbeddingCount$9146[ebp], 0
	je	SHORT $LN28@resolveExp
; Line 1206
	mov	eax, DWORD PTR _overflowEmbeddingCount$9146[ebp]
	sub	eax, 1
	mov	DWORD PTR _overflowEmbeddingCount$9146[ebp], eax
; Line 1207
	jmp	$LN40@resolveExp
$LN28@resolveExp:
; Line 1209
	cmp	DWORD PTR _stackLast$9144[ebp], 0
	jbe	SHORT $LN27@resolveExp
	mov	eax, DWORD PTR _stackLast$9144[ebp]
	movzx	ecx, WORD PTR _stack$9143[ebp+eax*2]
	cmp	ecx, 256				; 00000100H
	jge	SHORT $LN27@resolveExp
; Line 1210
	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR _lastCcPos$9142[ebp], eax
; Line 1211
	mov	eax, DWORD PTR _stackLast$9144[ebp]
	sub	eax, 1
	mov	DWORD PTR _stackLast$9144[ebp], eax
; Line 1212
	mov	eax, DWORD PTR _stackLast$9144[ebp]
	mov	cl, BYTE PTR _stack$9143[ebp+eax*2]
	mov	BYTE PTR _embeddingLevel$9139[ebp], cl
$LN27@resolveExp:
; Line 1214
	jmp	$LN40@resolveExp
$LN26@resolveExp:
; Line 1217
	movzx	eax, BYTE PTR _embeddingLevel$9139[ebp]
	and	eax, 1
	mov	ecx, DWORD PTR _flagLR[eax*4]
	or	ecx, 1024				; 00000400H
	or	ecx, DWORD PTR _flags$[ebp]
	mov	DWORD PTR _flags$[ebp], ecx
; Line 1218
	movzx	eax, BYTE PTR _embeddingLevel$9139[ebp]
	and	eax, -129				; ffffff7fH
	mov	ecx, DWORD PTR _levels$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	mov	BYTE PTR [ecx], al
; Line 1219
	movzx	eax, BYTE PTR _embeddingLevel$9139[ebp]
	and	eax, -129				; ffffff7fH
	movzx	ecx, BYTE PTR _previousLevel$9141[ebp]
	and	ecx, -129				; ffffff7fH
	cmp	eax, ecx
	je	SHORT $LN25@resolveExp
; Line 1221
	movzx	eax, BYTE PTR _embeddingLevel$9139[ebp]
	push	eax
	movzx	ecx, BYTE PTR _previousLevel$9141[ebp]
	push	ecx
	mov	edx, DWORD PTR _lastCcPos$9142[ebp]
	push	edx
	lea	eax, DWORD PTR _bracketData$9148[ebp]
	push	eax
	call	_bracketProcessBoundary
	add	esp, 16					; 00000010H
; Line 1222
	mov	eax, DWORD PTR _flags$[ebp]
	or	eax, -2147483648			; 80000000H
	mov	DWORD PTR _flags$[ebp], eax
$LN25@resolveExp:
; Line 1224
	mov	al, BYTE PTR _embeddingLevel$9139[ebp]
	mov	BYTE PTR _previousLevel$9141[ebp], al
; Line 1226
	movzx	eax, BYTE PTR _dirProp$[ebp]
	cmp	eax, 20					; 00000014H
	jne	SHORT $LN24@resolveExp
; Line 1228
	movzx	eax, BYTE PTR _embeddingLevel$9139[ebp]
	add	eax, 2
	and	eax, -130				; ffffff7eH
	mov	BYTE PTR _newLevel$9140[ebp], al
; Line 1229
	jmp	SHORT $LN23@resolveExp
$LN24@resolveExp:
; Line 1231
	movzx	eax, BYTE PTR _embeddingLevel$9139[ebp]
	and	eax, -129				; ffffff7fH
	add	eax, 1
	or	eax, 1
	mov	BYTE PTR _newLevel$9140[ebp], al
$LN23@resolveExp:
; Line 1233
	movzx	eax, BYTE PTR _newLevel$9140[ebp]
	cmp	eax, 125				; 0000007dH
	jg	$LN22@resolveExp
	cmp	DWORD PTR _overflowIsolateCount$9145[ebp], 0
	jne	$LN22@resolveExp
	cmp	DWORD PTR _overflowEmbeddingCount$9146[ebp], 0
	jne	$LN22@resolveExp
; Line 1234
	movzx	ecx, BYTE PTR _dirProp$[ebp]
	mov	eax, 1
	shl	eax, cl
	or	eax, DWORD PTR _flags$[ebp]
	mov	DWORD PTR _flags$[ebp], eax
; Line 1235
	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR _lastCcPos$9142[ebp], eax
; Line 1236
	mov	eax, DWORD PTR _validIsolateCount$9147[ebp]
	add	eax, 1
	mov	DWORD PTR _validIsolateCount$9147[ebp], eax
; Line 1237
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR _validIsolateCount$9147[ebp]
	cmp	ecx, DWORD PTR [eax+244]
	jle	SHORT $LN21@resolveExp
; Line 1238
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR _validIsolateCount$9147[ebp]
	mov	DWORD PTR [eax+244], ecx
$LN21@resolveExp:
; Line 1239
	mov	al, BYTE PTR _newLevel$9140[ebp]
	mov	BYTE PTR _embeddingLevel$9139[ebp], al
; Line 1242
	mov	eax, DWORD PTR _stackLast$9144[ebp]
	add	eax, 1
	mov	DWORD PTR _stackLast$9144[ebp], eax
; Line 1243
	movzx	eax, BYTE PTR _embeddingLevel$9139[ebp]
	add	eax, 256				; 00000100H
	mov	ecx, DWORD PTR _stackLast$9144[ebp]
	mov	WORD PTR _stack$9143[ebp+ecx*2], ax
; Line 1244
	movzx	eax, BYTE PTR _embeddingLevel$9139[ebp]
	push	eax
	lea	ecx, DWORD PTR _bracketData$9148[ebp]
	push	ecx
	call	_bracketProcessLRI_RLI
	add	esp, 8
; Line 1245
	jmp	SHORT $LN20@resolveExp
$LN22@resolveExp:
; Line 1247
	mov	eax, DWORD PTR _dirProps$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	mov	BYTE PTR [eax], 9
; Line 1248
	mov	eax, DWORD PTR _overflowIsolateCount$9145[ebp]
	add	eax, 1
	mov	DWORD PTR _overflowIsolateCount$9145[ebp], eax
$LN20@resolveExp:
; Line 1250
	jmp	$LN40@resolveExp
$LN19@resolveExp:
; Line 1252
	movzx	eax, BYTE PTR _embeddingLevel$9139[ebp]
	and	eax, -129				; ffffff7fH
	movzx	ecx, BYTE PTR _previousLevel$9141[ebp]
	and	ecx, -129				; ffffff7fH
	cmp	eax, ecx
	je	SHORT $LN18@resolveExp
; Line 1254
	movzx	eax, BYTE PTR _embeddingLevel$9139[ebp]
	push	eax
	movzx	ecx, BYTE PTR _previousLevel$9141[ebp]
	push	ecx
	mov	edx, DWORD PTR _lastCcPos$9142[ebp]
	push	edx
	lea	eax, DWORD PTR _bracketData$9148[ebp]
	push	eax
	call	_bracketProcessBoundary
	add	esp, 16					; 00000010H
; Line 1255
	mov	eax, DWORD PTR _flags$[ebp]
	or	eax, -2147483648			; 80000000H
	mov	DWORD PTR _flags$[ebp], eax
$LN18@resolveExp:
; Line 1258
	cmp	DWORD PTR _overflowIsolateCount$9145[ebp], 0
	je	SHORT $LN17@resolveExp
; Line 1259
	mov	eax, DWORD PTR _overflowIsolateCount$9145[ebp]
	sub	eax, 1
	mov	DWORD PTR _overflowIsolateCount$9145[ebp], eax
; Line 1261
	mov	eax, DWORD PTR _dirProps$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	mov	BYTE PTR [eax], 9
	jmp	$LN16@resolveExp
$LN17@resolveExp:
; Line 1263
	cmp	DWORD PTR _validIsolateCount$9147[ebp], 0
	je	SHORT $LN15@resolveExp
; Line 1264
	mov	eax, DWORD PTR _flags$[ebp]
	or	eax, 4194304				; 00400000H
	mov	DWORD PTR _flags$[ebp], eax
; Line 1265
	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR _lastCcPos$9142[ebp], eax
; Line 1266
	mov	DWORD PTR _overflowEmbeddingCount$9146[ebp], 0
$LN14@resolveExp:
; Line 1267
	mov	eax, DWORD PTR _stackLast$9144[ebp]
	movzx	ecx, WORD PTR _stack$9143[ebp+eax*2]
	cmp	ecx, 256				; 00000100H
	jge	SHORT $LN13@resolveExp
; Line 1268
	mov	eax, DWORD PTR _stackLast$9144[ebp]
	sub	eax, 1
	mov	DWORD PTR _stackLast$9144[ebp], eax
	jmp	SHORT $LN14@resolveExp
$LN13@resolveExp:
; Line 1269
	mov	eax, DWORD PTR _stackLast$9144[ebp]
	sub	eax, 1
	mov	DWORD PTR _stackLast$9144[ebp], eax
; Line 1270
	mov	eax, DWORD PTR _validIsolateCount$9147[ebp]
	sub	eax, 1
	mov	DWORD PTR _validIsolateCount$9147[ebp], eax
; Line 1271
	lea	eax, DWORD PTR _bracketData$9148[ebp]
	push	eax
	call	_bracketProcessPDI
	add	esp, 4
; Line 1272
	jmp	SHORT $LN16@resolveExp
$LN15@resolveExp:
; Line 1274
	mov	eax, DWORD PTR _dirProps$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	mov	BYTE PTR [eax], 9
$LN16@resolveExp:
; Line 1275
	mov	eax, DWORD PTR _stackLast$9144[ebp]
	movzx	ecx, BYTE PTR _stack$9143[ebp+eax*2]
	and	ecx, -257				; fffffeffH
	mov	BYTE PTR _embeddingLevel$9139[ebp], cl
; Line 1276
	movzx	eax, BYTE PTR _embeddingLevel$9139[ebp]
	and	eax, 1
	mov	ecx, DWORD PTR _flagLR[eax*4]
	or	ecx, 1024				; 00000400H
	or	ecx, DWORD PTR _flags$[ebp]
	mov	DWORD PTR _flags$[ebp], ecx
; Line 1277
	mov	al, BYTE PTR _embeddingLevel$9139[ebp]
	mov	BYTE PTR _previousLevel$9141[ebp], al
; Line 1278
	movzx	eax, BYTE PTR _embeddingLevel$9139[ebp]
	and	eax, -129				; ffffff7fH
	mov	ecx, DWORD PTR _levels$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	mov	BYTE PTR [ecx], al
; Line 1279
	jmp	$LN40@resolveExp
$LN11@resolveExp:
; Line 1281
	mov	eax, DWORD PTR _flags$[ebp]
	or	eax, 128				; 00000080H
	mov	DWORD PTR _flags$[ebp], eax
; Line 1282
	mov	eax, DWORD PTR _pBiDi$[ebp]
	movzx	ecx, BYTE PTR [eax+98]
	test	ecx, ecx
	je	SHORT $LN74@resolveExp
	mov	edx, DWORD PTR _pBiDi$[ebp]
	mov	eax, DWORD PTR [edx+140]
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jl	SHORT $LN74@resolveExp
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	eax, DWORD PTR _pBiDi$[ebp]
	push	eax
	call	_ubidi_getParaLevelAtIndex_56
	add	esp, 8
	movzx	ecx, al
	mov	DWORD PTR tv343[ebp], ecx
	jmp	SHORT $LN75@resolveExp
$LN74@resolveExp:
	mov	edx, DWORD PTR _pBiDi$[ebp]
	movzx	eax, BYTE PTR [edx+97]
	mov	DWORD PTR tv343[ebp], eax
$LN75@resolveExp:
	mov	ecx, DWORD PTR _levels$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	mov	dl, BYTE PTR tv343[ebp]
	mov	BYTE PTR [ecx], dl
; Line 1283
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	cmp	eax, DWORD PTR _length$[ebp]
	jge	$LN10@resolveExp
; Line 1284
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _text$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	cmp	edx, 13					; 0000000dH
	jne	SHORT $LN9@resolveExp
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _text$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2+2]
	cmp	edx, 10					; 0000000aH
	jne	SHORT $LN9@resolveExp
; Line 1285
	jmp	$LN40@resolveExp
$LN9@resolveExp:
; Line 1286
	mov	DWORD PTR _overflowIsolateCount$9145[ebp], 0
	mov	eax, DWORD PTR _overflowIsolateCount$9145[ebp]
	mov	DWORD PTR _overflowEmbeddingCount$9146[ebp], eax
; Line 1287
	mov	DWORD PTR _validIsolateCount$9147[ebp], 0
; Line 1288
	mov	DWORD PTR _stackLast$9144[ebp], 0
; Line 1289
	mov	eax, DWORD PTR _pBiDi$[ebp]
	movzx	ecx, BYTE PTR [eax+98]
	test	ecx, ecx
	je	SHORT $LN76@resolveExp
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	cmp	edx, DWORD PTR [ecx]
	jl	SHORT $LN76@resolveExp
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	push	edx
	mov	eax, DWORD PTR _pBiDi$[ebp]
	push	eax
	call	_ubidi_getParaLevelAtIndex_56
	add	esp, 8
	movzx	ecx, al
	mov	DWORD PTR tv370[ebp], ecx
	jmp	SHORT $LN77@resolveExp
$LN76@resolveExp:
	mov	edx, DWORD PTR _pBiDi$[ebp]
	movzx	eax, BYTE PTR [edx+97]
	mov	DWORD PTR tv370[ebp], eax
$LN77@resolveExp:
	mov	cl, BYTE PTR tv370[ebp]
	mov	BYTE PTR _embeddingLevel$9139[ebp], cl
	mov	dl, BYTE PTR _embeddingLevel$9139[ebp]
	mov	BYTE PTR _previousLevel$9141[ebp], dl
; Line 1290
	movzx	ax, BYTE PTR _embeddingLevel$9139[ebp]
	mov	WORD PTR _stack$9143[ebp], ax
; Line 1291
	movzx	eax, BYTE PTR _embeddingLevel$9139[ebp]
	push	eax
	lea	ecx, DWORD PTR _bracketData$9148[ebp]
	push	ecx
	call	_bracketProcessB
	add	esp, 8
$LN10@resolveExp:
; Line 1293
	jmp	$LN40@resolveExp
$LN8@resolveExp:
; Line 1297
	mov	eax, DWORD PTR _levels$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	mov	cl, BYTE PTR _previousLevel$9141[ebp]
	mov	BYTE PTR [eax], cl
; Line 1298
	mov	eax, DWORD PTR _flags$[ebp]
	or	eax, 262144				; 00040000H
	mov	DWORD PTR _flags$[ebp], eax
; Line 1299
	jmp	$LN40@resolveExp
$LN7@resolveExp:
; Line 1302
	movzx	eax, BYTE PTR _embeddingLevel$9139[ebp]
	and	eax, -129				; ffffff7fH
	movzx	ecx, BYTE PTR _previousLevel$9141[ebp]
	and	ecx, -129				; ffffff7fH
	cmp	eax, ecx
	je	SHORT $LN6@resolveExp
; Line 1304
	movzx	eax, BYTE PTR _embeddingLevel$9139[ebp]
	push	eax
	movzx	ecx, BYTE PTR _previousLevel$9141[ebp]
	push	ecx
	mov	edx, DWORD PTR _lastCcPos$9142[ebp]
	push	edx
	lea	eax, DWORD PTR _bracketData$9148[ebp]
	push	eax
	call	_bracketProcessBoundary
	add	esp, 16					; 00000010H
; Line 1305
	mov	eax, DWORD PTR _flags$[ebp]
	or	eax, -2147483648			; 80000000H
	mov	DWORD PTR _flags$[ebp], eax
; Line 1306
	movzx	eax, BYTE PTR _embeddingLevel$9139[ebp]
	and	eax, 128				; 00000080H
	je	SHORT $LN5@resolveExp
; Line 1307
	movzx	eax, BYTE PTR _embeddingLevel$9139[ebp]
	and	eax, 1
	mov	ecx, DWORD PTR _flags$[ebp]
	or	ecx, DWORD PTR _flagO[eax*4]
	mov	DWORD PTR _flags$[ebp], ecx
; Line 1308
	jmp	SHORT $LN6@resolveExp
$LN5@resolveExp:
; Line 1309
	movzx	eax, BYTE PTR _embeddingLevel$9139[ebp]
	and	eax, 1
	mov	ecx, DWORD PTR _flags$[ebp]
	or	ecx, DWORD PTR _flagE[eax*4]
	mov	DWORD PTR _flags$[ebp], ecx
$LN6@resolveExp:
; Line 1311
	mov	al, BYTE PTR _embeddingLevel$9139[ebp]
	mov	BYTE PTR _previousLevel$9141[ebp], al
; Line 1312
	mov	eax, DWORD PTR _levels$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	mov	cl, BYTE PTR _embeddingLevel$9139[ebp]
	mov	BYTE PTR [eax], cl
; Line 1313
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bracketData$9148[ebp]
	push	ecx
	call	_bracketProcessChar
	add	esp, 8
	movsx	edx, al
	test	edx, edx
	jne	SHORT $LN3@resolveExp
; Line 1314
	or	eax, -1
	jmp	SHORT $LN70@resolveExp
$LN3@resolveExp:
; Line 1316
	mov	eax, DWORD PTR _dirProps$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	edx, 1
	shl	edx, cl
	or	edx, DWORD PTR _flags$[ebp]
	mov	DWORD PTR _flags$[ebp], edx
$LN40@resolveExp:
; Line 1319
	jmp	$LN43@resolveExp
$LN42@resolveExp:
; Line 1320
	mov	eax, DWORD PTR _flags$[ebp]
	and	eax, 8380376				; 007fdfd8H
	je	SHORT $LN2@resolveExp
; Line 1321
	mov	eax, DWORD PTR _pBiDi$[ebp]
	movzx	ecx, BYTE PTR [eax+97]
	and	ecx, 1
	mov	edx, DWORD PTR _flags$[ebp]
	or	edx, DWORD PTR _flagLR[ecx*4]
	mov	DWORD PTR _flags$[ebp], edx
$LN2@resolveExp:
; Line 1322
	mov	eax, DWORD PTR _pBiDi$[ebp]
	movsx	ecx, BYTE PTR [eax+96]
	test	ecx, ecx
	je	SHORT $LN1@resolveExp
	mov	eax, DWORD PTR _flags$[ebp]
	and	eax, 128				; 00000080H
	je	SHORT $LN1@resolveExp
; Line 1323
	mov	eax, DWORD PTR _flags$[ebp]
	or	eax, 1
	mov	DWORD PTR _flags$[ebp], eax
$LN1@resolveExp:
; Line 1325
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR _flags$[ebp]
	mov	DWORD PTR [eax+124], ecx
; Line 1326
	mov	eax, DWORD PTR _pBiDi$[ebp]
	push	eax
	call	_directionFromFlags
	add	esp, 4
	mov	DWORD PTR _direction$[ebp], eax
; Line 1328
	mov	eax, DWORD PTR _direction$[ebp]
$LN70@resolveExp:
; Line 1329
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN83@resolveExp
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 5820				; 000016bcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN83@resolveExp:
	DD	3
	DD	$LN82@resolveExp
$LN82@resolveExp:
	DD	-2720					; fffff560H
	DD	2532					; 000009e4H
	DD	$LN79@resolveExp
	DD	-3032					; fffff428H
	DD	254					; 000000feH
	DD	$LN80@resolveExp
	DD	-5620					; ffffea0cH
	DD	2532					; 000009e4H
	DD	$LN81@resolveExp
$LN81@resolveExp:
	DB	98					; 00000062H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	68					; 00000044H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	0
$LN80@resolveExp:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
$LN79@resolveExp:
	DB	98					; 00000062H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	68					; 00000044H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	0
	npad	2
$LN84@resolveExp:
	DD	$LN11@resolveExp
	DD	$LN39@resolveExp
	DD	$LN30@resolveExp
	DD	$LN8@resolveExp
	DD	$LN26@resolveExp
	DD	$LN19@resolveExp
	DD	$LN7@resolveExp
$LN78@resolveExp:
	DB	0
	DB	6
	DB	6
	DB	6
	DB	1
	DB	1
	DB	6
	DB	1
	DB	1
	DB	2
	DB	6
	DB	3
	DB	6
	DB	4
	DB	4
	DB	5
_resolveExplicitLevels ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _bracketInit
_TEXT	SEGMENT
tv144 = -200						; size = 4
tv164 = -196						; size = 4
tv141 = -196						; size = 4
tv86 = -196						; size = 4
_pBiDi$ = 8						; size = 4
_bd$ = 12						; size = 4
_bracketInit PROC					; COMDAT
; Line 672
	push	ebp
	mov	ebp, esp
	sub	esp, 200				; 000000c8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-200]
	mov	ecx, 50					; 00000032H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 673
	mov	eax, DWORD PTR _bd$[ebp]
	mov	ecx, DWORD PTR _pBiDi$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 674
	mov	eax, DWORD PTR _bd$[ebp]
	mov	DWORD PTR [eax+492], 0
; Line 675
	xor	eax, eax
	mov	ecx, DWORD PTR _bd$[ebp]
	mov	WORD PTR [ecx+500], ax
; Line 676
	xor	eax, eax
	mov	ecx, DWORD PTR _bd$[ebp]
	mov	WORD PTR [ecx+502], ax
; Line 677
	mov	eax, DWORD PTR _pBiDi$[ebp]
	movzx	ecx, BYTE PTR [eax+98]
	test	ecx, ecx
	je	SHORT $LN5@bracketIni
	mov	edx, DWORD PTR _pBiDi$[ebp]
	mov	eax, DWORD PTR [edx+140]
	cmp	DWORD PTR [eax], 0
	jg	SHORT $LN5@bracketIni
	push	0
	mov	ecx, DWORD PTR _pBiDi$[ebp]
	push	ecx
	call	_ubidi_getParaLevelAtIndex_56
	add	esp, 8
	movzx	edx, al
	mov	DWORD PTR tv86[ebp], edx
	jmp	SHORT $LN6@bracketIni
$LN5@bracketIni:
	mov	eax, DWORD PTR _pBiDi$[ebp]
	movzx	ecx, BYTE PTR [eax+97]
	mov	DWORD PTR tv86[ebp], ecx
$LN6@bracketIni:
	mov	edx, DWORD PTR _bd$[ebp]
	mov	al, BYTE PTR tv86[ebp]
	mov	BYTE PTR [edx+504], al
; Line 678
	mov	eax, DWORD PTR _pBiDi$[ebp]
	movzx	ecx, BYTE PTR [eax+98]
	test	ecx, ecx
	je	SHORT $LN7@bracketIni
	mov	edx, DWORD PTR _pBiDi$[ebp]
	mov	eax, DWORD PTR [edx+140]
	cmp	DWORD PTR [eax], 0
	jg	SHORT $LN7@bracketIni
	push	0
	mov	ecx, DWORD PTR _pBiDi$[ebp]
	push	ecx
	call	_ubidi_getParaLevelAtIndex_56
	add	esp, 8
	movzx	edx, al
	mov	DWORD PTR tv141[ebp], edx
	jmp	SHORT $LN8@bracketIni
$LN7@bracketIni:
	mov	eax, DWORD PTR _pBiDi$[ebp]
	movzx	ecx, BYTE PTR [eax+97]
	mov	DWORD PTR tv141[ebp], ecx
$LN8@bracketIni:
	movzx	edx, BYTE PTR tv141[ebp]
	and	edx, 1
	mov	DWORD PTR tv144[ebp], edx
	mov	eax, DWORD PTR _bd$[ebp]
	mov	ecx, DWORD PTR tv144[ebp]
	mov	DWORD PTR [eax+508], ecx
	mov	edx, DWORD PTR _bd$[ebp]
	mov	al, BYTE PTR tv144[ebp]
	mov	BYTE PTR [edx+506], al
	mov	ecx, DWORD PTR _bd$[ebp]
	mov	dl, BYTE PTR tv144[ebp]
	mov	BYTE PTR [ecx+505], dl
; Line 679
	mov	eax, DWORD PTR _bd$[ebp]
	mov	DWORD PTR [eax+496], 0
; Line 680
	mov	eax, DWORD PTR _pBiDi$[ebp]
	cmp	DWORD PTR [eax+56], 0
	je	SHORT $LN2@bracketIni
; Line 681
	mov	eax, DWORD PTR _bd$[ebp]
	mov	ecx, DWORD PTR _pBiDi$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	DWORD PTR [eax+484], edx
; Line 682
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	eax, DWORD PTR [eax+32]
	xor	edx, edx
	mov	ecx, 24					; 00000018H
	div	ecx
	mov	edx, DWORD PTR _bd$[ebp]
	mov	DWORD PTR [edx+488], eax
; Line 683
	jmp	SHORT $LN1@bracketIni
$LN2@bracketIni:
; Line 684
	mov	eax, DWORD PTR _bd$[ebp]
	add	eax, 4
	mov	ecx, DWORD PTR _bd$[ebp]
	mov	DWORD PTR [ecx+484], eax
; Line 685
	mov	eax, DWORD PTR _bd$[ebp]
	mov	DWORD PTR [eax+488], 20			; 00000014H
$LN1@bracketIni:
; Line 688
	mov	eax, DWORD PTR _bd$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx+88], 1
	je	SHORT $LN9@bracketIni
	mov	edx, DWORD PTR _bd$[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	DWORD PTR [eax+88], 6
	je	SHORT $LN9@bracketIni
	mov	DWORD PTR tv164[ebp], 0
	jmp	SHORT $LN10@bracketIni
$LN9@bracketIni:
	mov	DWORD PTR tv164[ebp], 1
$LN10@bracketIni:
	mov	ecx, DWORD PTR _bd$[ebp]
	mov	dl, BYTE PTR tv164[ebp]
	mov	BYTE PTR [ecx+2528], dl
; Line 689
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 200				; 000000c8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_bracketInit ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _bracketProcessB
_TEXT	SEGMENT
tv81 = -196						; size = 4
_bd$ = 8						; size = 4
_level$ = 12						; size = 1
_bracketProcessB PROC					; COMDAT
; Line 693
	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 694
	mov	eax, DWORD PTR _bd$[ebp]
	mov	DWORD PTR [eax+492], 0
; Line 695
	xor	eax, eax
	mov	ecx, DWORD PTR _bd$[ebp]
	mov	WORD PTR [ecx+502], ax
; Line 696
	mov	eax, DWORD PTR _bd$[ebp]
	mov	cl, BYTE PTR _level$[ebp]
	mov	BYTE PTR [eax+504], cl
; Line 697
	movzx	eax, BYTE PTR _level$[ebp]
	and	eax, 1
	mov	DWORD PTR tv81[ebp], eax
	mov	ecx, DWORD PTR _bd$[ebp]
	mov	edx, DWORD PTR tv81[ebp]
	mov	DWORD PTR [ecx+508], edx
	mov	eax, DWORD PTR _bd$[ebp]
	mov	cl, BYTE PTR tv81[ebp]
	mov	BYTE PTR [eax+506], cl
	mov	edx, DWORD PTR _bd$[ebp]
	mov	al, BYTE PTR tv81[ebp]
	mov	BYTE PTR [edx+505], al
; Line 698
	mov	eax, DWORD PTR _bd$[ebp]
	mov	DWORD PTR [eax+496], 0
; Line 699
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_bracketProcessB ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _bracketProcessBoundary
_TEXT	SEGMENT
tv86 = -220						; size = 4
_dirProps$ = -20					; size = 4
_pLastIsoRun$ = -8					; size = 4
_bd$ = 8						; size = 4
_lastCcPos$ = 12					; size = 4
_contextLevel$ = 16					; size = 1
_embeddingLevel$ = 20					; size = 1
_bracketProcessBoundary PROC				; COMDAT
; Line 704
	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 705
	mov	eax, DWORD PTR _bd$[ebp]
	mov	ecx, DWORD PTR [eax+492]
	shl	ecx, 4
	mov	edx, DWORD PTR _bd$[ebp]
	lea	eax, DWORD PTR [edx+ecx+496]
	mov	DWORD PTR _pLastIsoRun$[ebp], eax
; Line 706
	mov	eax, DWORD PTR _bd$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+76]
	mov	DWORD PTR _dirProps$[ebp], edx
; Line 707
	mov	eax, DWORD PTR _dirProps$[ebp]
	add	eax, DWORD PTR _lastCcPos$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	edx, 1
	shl	edx, cl
	and	edx, 7864320				; 00780000H
	je	SHORT $LN2@bracketPro
; Line 708
	jmp	SHORT $LN3@bracketPro
$LN2@bracketPro:
; Line 709
	movzx	eax, BYTE PTR _embeddingLevel$[ebp]
	and	eax, -129				; ffffff7fH
	movzx	ecx, BYTE PTR _contextLevel$[ebp]
	and	ecx, -129				; ffffff7fH
	cmp	eax, ecx
	jle	SHORT $LN1@bracketPro
; Line 710
	mov	al, BYTE PTR _embeddingLevel$[ebp]
	mov	BYTE PTR _contextLevel$[ebp], al
$LN1@bracketPro:
; Line 711
	mov	eax, DWORD PTR _pLastIsoRun$[ebp]
	mov	ecx, DWORD PTR _pLastIsoRun$[ebp]
	mov	dx, WORD PTR [ecx+4]
	mov	WORD PTR [eax+6], dx
; Line 712
	mov	eax, DWORD PTR _pLastIsoRun$[ebp]
	mov	cl, BYTE PTR _embeddingLevel$[ebp]
	mov	BYTE PTR [eax+8], cl
; Line 713
	movzx	eax, BYTE PTR _contextLevel$[ebp]
	and	eax, 1
	mov	DWORD PTR tv86[ebp], eax
	mov	ecx, DWORD PTR _pLastIsoRun$[ebp]
	mov	edx, DWORD PTR tv86[ebp]
	mov	DWORD PTR [ecx+12], edx
	mov	eax, DWORD PTR _pLastIsoRun$[ebp]
	mov	cl, BYTE PTR tv86[ebp]
	mov	BYTE PTR [eax+10], cl
	mov	edx, DWORD PTR _pLastIsoRun$[ebp]
	mov	al, BYTE PTR tv86[ebp]
	mov	BYTE PTR [edx+9], al
; Line 714
	mov	eax, DWORD PTR _pLastIsoRun$[ebp]
	mov	ecx, DWORD PTR _lastCcPos$[ebp]
	mov	DWORD PTR [eax], ecx
$LN3@bracketPro:
; Line 715
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_bracketProcessBoundary ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _bracketProcessLRI_RLI
_TEXT	SEGMENT
tv82 = -220						; size = 4
_lastLimit$ = -20					; size = 2
_pLastIsoRun$ = -8					; size = 4
_bd$ = 8						; size = 4
_level$ = 12						; size = 1
_bracketProcessLRI_RLI PROC				; COMDAT
; Line 719
	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 720
	mov	eax, DWORD PTR _bd$[ebp]
	mov	ecx, DWORD PTR [eax+492]
	shl	ecx, 4
	mov	edx, DWORD PTR _bd$[ebp]
	lea	eax, DWORD PTR [edx+ecx+496]
	mov	DWORD PTR _pLastIsoRun$[ebp], eax
; Line 722
	mov	eax, DWORD PTR _pLastIsoRun$[ebp]
	mov	BYTE PTR [eax+10], 10			; 0000000aH
; Line 723
	mov	eax, DWORD PTR _pLastIsoRun$[ebp]
	mov	cx, WORD PTR [eax+6]
	mov	WORD PTR _lastLimit$[ebp], cx
; Line 724
	mov	eax, DWORD PTR _bd$[ebp]
	mov	ecx, DWORD PTR [eax+492]
	add	ecx, 1
	mov	edx, DWORD PTR _bd$[ebp]
	mov	DWORD PTR [edx+492], ecx
; Line 725
	mov	eax, DWORD PTR _pLastIsoRun$[ebp]
	add	eax, 16					; 00000010H
	mov	DWORD PTR _pLastIsoRun$[ebp], eax
; Line 726
	mov	eax, DWORD PTR _pLastIsoRun$[ebp]
	mov	cx, WORD PTR _lastLimit$[ebp]
	mov	WORD PTR [eax+6], cx
	mov	edx, DWORD PTR _pLastIsoRun$[ebp]
	mov	ax, WORD PTR _lastLimit$[ebp]
	mov	WORD PTR [edx+4], ax
; Line 727
	mov	eax, DWORD PTR _pLastIsoRun$[ebp]
	mov	cl, BYTE PTR _level$[ebp]
	mov	BYTE PTR [eax+8], cl
; Line 728
	movzx	eax, BYTE PTR _level$[ebp]
	and	eax, 1
	mov	DWORD PTR tv82[ebp], eax
	mov	ecx, DWORD PTR _pLastIsoRun$[ebp]
	mov	edx, DWORD PTR tv82[ebp]
	mov	DWORD PTR [ecx+12], edx
	mov	eax, DWORD PTR _pLastIsoRun$[ebp]
	mov	cl, BYTE PTR tv82[ebp]
	mov	BYTE PTR [eax+10], cl
	mov	edx, DWORD PTR _pLastIsoRun$[ebp]
	mov	al, BYTE PTR tv82[ebp]
	mov	BYTE PTR [edx+9], al
; Line 729
	mov	eax, DWORD PTR _pLastIsoRun$[ebp]
	mov	DWORD PTR [eax], 0
; Line 730
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_bracketProcessLRI_RLI ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _bracketProcessPDI
_TEXT	SEGMENT
_pLastIsoRun$ = -8					; size = 4
_bd$ = 8						; size = 4
_bracketProcessPDI PROC					; COMDAT
; Line 734
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 736
	mov	eax, DWORD PTR _bd$[ebp]
	mov	ecx, DWORD PTR [eax+492]
	sub	ecx, 1
	mov	edx, DWORD PTR _bd$[ebp]
	mov	DWORD PTR [edx+492], ecx
; Line 737
	mov	eax, DWORD PTR _bd$[ebp]
	mov	ecx, DWORD PTR [eax+492]
	shl	ecx, 4
	mov	edx, DWORD PTR _bd$[ebp]
	lea	eax, DWORD PTR [edx+ecx+496]
	mov	DWORD PTR _pLastIsoRun$[ebp], eax
; Line 738
	mov	eax, DWORD PTR _pLastIsoRun$[ebp]
	mov	BYTE PTR [eax+10], 10			; 0000000aH
; Line 739
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_bracketProcessPDI ENDP
_TEXT	ENDS
EXTRN	_ubidi_getPairedBracketType_56:PROC
EXTRN	_u_getBidiPairedBracket_56:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _bracketProcessChar
_TEXT	SEGMENT
_flag$9076 = -140					; size = 2
_i$9075 = -128						; size = 4
_i$9042 = -116						; size = 4
_flag$9041 = -104					; size = 2
_idx$9034 = -92						; size = 4
_match$9033 = -80					; size = 2
_c$9032 = -68						; size = 2
_level$ = -53						; size = 1
_newProp$ = -41						; size = 1
_dirProp$ = -29						; size = 1
_dirProps$ = -20					; size = 4
_pLastIsoRun$ = -8					; size = 4
_bd$ = 8						; size = 4
_position$ = 12						; size = 4
_bracketProcessChar PROC				; COMDAT
; Line 873
	push	ebp
	mov	ebp, esp
	sub	esp, 336				; 00000150H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-336]
	mov	ecx, 84					; 00000054H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 874
	mov	eax, DWORD PTR _bd$[ebp]
	mov	ecx, DWORD PTR [eax+492]
	shl	ecx, 4
	mov	edx, DWORD PTR _bd$[ebp]
	lea	eax, DWORD PTR [edx+ecx+496]
	mov	DWORD PTR _pLastIsoRun$[ebp], eax
; Line 877
	mov	eax, DWORD PTR _bd$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+76]
	mov	DWORD PTR _dirProps$[ebp], edx
; Line 878
	mov	eax, DWORD PTR _dirProps$[ebp]
	add	eax, DWORD PTR _position$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _dirProp$[ebp], cl
; Line 879
	movzx	eax, BYTE PTR _dirProp$[ebp]
	cmp	eax, 10					; 0000000aH
	jne	$LN43@bracketPro@2
; Line 884
	mov	eax, DWORD PTR _bd$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _position$[ebp]
	mov	cx, WORD PTR [edx+eax*2]
	mov	WORD PTR _c$9032[ebp], cx
; Line 885
	mov	eax, DWORD PTR _pLastIsoRun$[ebp]
	movzx	ecx, WORD PTR [eax+6]
	sub	ecx, 1
	mov	DWORD PTR _idx$9034[ebp], ecx
	jmp	SHORT $LN42@bracketPro@2
$LN41@bracketPro@2:
	mov	eax, DWORD PTR _idx$9034[ebp]
	sub	eax, 1
	mov	DWORD PTR _idx$9034[ebp], eax
$LN42@bracketPro@2:
	mov	eax, DWORD PTR _pLastIsoRun$[ebp]
	movzx	ecx, WORD PTR [eax+4]
	cmp	DWORD PTR _idx$9034[ebp], ecx
	jl	$LN40@bracketPro@2
; Line 886
	mov	eax, DWORD PTR _idx$9034[ebp]
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _bd$[ebp]
	mov	edx, DWORD PTR [ecx+484]
	movzx	ecx, WORD PTR _c$9032[ebp]
	cmp	DWORD PTR [edx+eax+4], ecx
	je	SHORT $LN39@bracketPro@2
; Line 887
	jmp	SHORT $LN41@bracketPro@2
$LN39@bracketPro@2:
; Line 889
	mov	eax, DWORD PTR _position$[ebp]
	push	eax
	mov	ecx, DWORD PTR _idx$9034[ebp]
	push	ecx
	mov	edx, DWORD PTR _bd$[ebp]
	push	edx
	call	_bracketProcessClosing
	add	esp, 12					; 0000000cH
	mov	BYTE PTR _newProp$[ebp], al
; Line 890
	movzx	eax, BYTE PTR _newProp$[ebp]
	cmp	eax, 10					; 0000000aH
	jne	SHORT $LN38@bracketPro@2
; Line 891
	xor	eax, eax
	mov	WORD PTR _c$9032[ebp], ax
; Line 892
	jmp	$LN40@bracketPro@2
$LN38@bracketPro@2:
; Line 894
	mov	eax, DWORD PTR _pLastIsoRun$[ebp]
	mov	BYTE PTR [eax+10], 10			; 0000000aH
; Line 895
	movzx	eax, BYTE PTR _newProp$[ebp]
	mov	ecx, DWORD PTR _pLastIsoRun$[ebp]
	mov	DWORD PTR [ecx+12], eax
; Line 896
	mov	eax, DWORD PTR _pLastIsoRun$[ebp]
	mov	ecx, DWORD PTR _position$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 897
	mov	eax, DWORD PTR _bd$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+80]
	mov	eax, DWORD PTR _position$[ebp]
	mov	cl, BYTE PTR [edx+eax]
	mov	BYTE PTR _level$[ebp], cl
; Line 898
	movzx	eax, BYTE PTR _level$[ebp]
	and	eax, 128				; 00000080H
	je	$LN37@bracketPro@2
; Line 901
	movzx	eax, BYTE PTR _level$[ebp]
	and	eax, 1
	mov	BYTE PTR _newProp$[ebp], al
; Line 902
	mov	eax, DWORD PTR _pLastIsoRun$[ebp]
	mov	cl, BYTE PTR _newProp$[ebp]
	mov	BYTE PTR [eax+9], cl
; Line 903
	movzx	ecx, BYTE PTR _newProp$[ebp]
	mov	eax, 1
	shl	eax, cl
	mov	WORD PTR _flag$9041[ebp], ax
; Line 904
	mov	eax, DWORD PTR _pLastIsoRun$[ebp]
	movzx	ecx, WORD PTR [eax+4]
	mov	DWORD PTR _i$9042[ebp], ecx
	jmp	SHORT $LN36@bracketPro@2
$LN35@bracketPro@2:
	mov	eax, DWORD PTR _i$9042[ebp]
	add	eax, 1
	mov	DWORD PTR _i$9042[ebp], eax
$LN36@bracketPro@2:
	mov	eax, DWORD PTR _i$9042[ebp]
	cmp	eax, DWORD PTR _idx$9034[ebp]
	jge	SHORT $LN34@bracketPro@2
; Line 905
	mov	eax, DWORD PTR _i$9042[ebp]
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _bd$[ebp]
	mov	edx, DWORD PTR [ecx+484]
	movzx	ecx, WORD PTR _flag$9041[ebp]
	movzx	edx, WORD PTR [edx+eax+12]
	or	edx, ecx
	mov	eax, DWORD PTR _i$9042[ebp]
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _bd$[ebp]
	mov	ecx, DWORD PTR [ecx+484]
	mov	WORD PTR [ecx+eax+12], dx
	jmp	SHORT $LN35@bracketPro@2
$LN34@bracketPro@2:
; Line 907
	mov	eax, DWORD PTR _bd$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+80]
	mov	eax, DWORD PTR _position$[ebp]
	movzx	ecx, BYTE PTR [edx+eax]
	and	ecx, -129				; ffffff7fH
	mov	edx, DWORD PTR _bd$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR [eax+80]
	mov	eax, DWORD PTR _position$[ebp]
	mov	BYTE PTR [edx+eax], cl
$LN37@bracketPro@2:
; Line 910
	mov	eax, DWORD PTR _bd$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _idx$9034[ebp]
	imul	edx, 24					; 00000018H
	mov	eax, DWORD PTR _bd$[ebp]
	mov	eax, DWORD PTR [eax+484]
	mov	ecx, DWORD PTR [ecx+80]
	mov	edx, DWORD PTR [eax+edx]
	movzx	eax, BYTE PTR [ecx+edx]
	and	eax, -129				; ffffff7fH
	mov	ecx, DWORD PTR _idx$9034[ebp]
	imul	ecx, 24					; 00000018H
	mov	edx, DWORD PTR _bd$[ebp]
	mov	edx, DWORD PTR [edx+484]
	mov	esi, DWORD PTR _bd$[ebp]
	mov	esi, DWORD PTR [esi]
	mov	esi, DWORD PTR [esi+80]
	mov	ecx, DWORD PTR [edx+ecx]
	mov	BYTE PTR [esi+ecx], al
; Line 911
	mov	al, 1
	jmp	$LN44@bracketPro@2
; Line 912
	jmp	$LN41@bracketPro@2
$LN40@bracketPro@2:
; Line 916
	movzx	eax, WORD PTR _c$9032[ebp]
	test	eax, eax
	je	SHORT $LN33@bracketPro@2
; Line 917
	movzx	eax, WORD PTR _c$9032[ebp]
	push	eax
	call	_u_getBidiPairedBracket_56
	add	esp, 4
	mov	WORD PTR _match$9033[ebp], ax
; Line 918
	jmp	SHORT $LN32@bracketPro@2
$LN33@bracketPro@2:
; Line 919
	xor	eax, eax
	mov	WORD PTR _match$9033[ebp], ax
$LN32@bracketPro@2:
; Line 921
	movzx	eax, WORD PTR _match$9033[ebp]
	movzx	ecx, WORD PTR _c$9032[ebp]
	cmp	eax, ecx
	je	$LN43@bracketPro@2
	movzx	eax, WORD PTR _c$9032[ebp]
	push	eax
	mov	ecx, DWORD PTR _bd$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	_ubidi_getPairedBracketType_56
	add	esp, 8
	cmp	eax, 1
	jne	$LN43@bracketPro@2
; Line 924
	movzx	eax, WORD PTR _match$9033[ebp]
	cmp	eax, 9002				; 0000232aH
	jne	SHORT $LN30@bracketPro@2
; Line 925
	mov	eax, DWORD PTR _position$[ebp]
	push	eax
	push	12297					; 00003009H
	mov	ecx, DWORD PTR _bd$[ebp]
	push	ecx
	call	_bracketAddOpening
	add	esp, 12					; 0000000cH
	movsx	edx, al
	test	edx, edx
	jne	SHORT $LN29@bracketPro@2
; Line 926
	xor	al, al
	jmp	$LN44@bracketPro@2
$LN29@bracketPro@2:
; Line 928
	jmp	SHORT $LN28@bracketPro@2
$LN30@bracketPro@2:
	movzx	eax, WORD PTR _match$9033[ebp]
	cmp	eax, 12297				; 00003009H
	jne	SHORT $LN28@bracketPro@2
; Line 929
	mov	eax, DWORD PTR _position$[ebp]
	push	eax
	push	9002					; 0000232aH
	mov	ecx, DWORD PTR _bd$[ebp]
	push	ecx
	call	_bracketAddOpening
	add	esp, 12					; 0000000cH
	movsx	edx, al
	test	edx, edx
	jne	SHORT $LN28@bracketPro@2
; Line 930
	xor	al, al
	jmp	$LN44@bracketPro@2
$LN28@bracketPro@2:
; Line 932
	mov	eax, DWORD PTR _position$[ebp]
	push	eax
	movzx	ecx, WORD PTR _match$9033[ebp]
	push	ecx
	mov	edx, DWORD PTR _bd$[ebp]
	push	edx
	call	_bracketAddOpening
	add	esp, 12					; 0000000cH
	movsx	eax, al
	test	eax, eax
	jne	SHORT $LN43@bracketPro@2
; Line 933
	xor	al, al
	jmp	$LN44@bracketPro@2
$LN43@bracketPro@2:
; Line 936
	mov	eax, DWORD PTR _bd$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+80]
	mov	eax, DWORD PTR _position$[ebp]
	mov	cl, BYTE PTR [edx+eax]
	mov	BYTE PTR _level$[ebp], cl
; Line 937
	movzx	eax, BYTE PTR _level$[ebp]
	and	eax, 128				; 00000080H
	je	SHORT $LN24@bracketPro@2
; Line 938
	movzx	eax, BYTE PTR _level$[ebp]
	and	eax, 1
	mov	BYTE PTR _newProp$[ebp], al
; Line 939
	movzx	eax, BYTE PTR _dirProp$[ebp]
	cmp	eax, 8
	je	SHORT $LN23@bracketPro@2
	movzx	eax, BYTE PTR _dirProp$[ebp]
	cmp	eax, 9
	je	SHORT $LN23@bracketPro@2
	movzx	eax, BYTE PTR _dirProp$[ebp]
	cmp	eax, 10					; 0000000aH
	je	SHORT $LN23@bracketPro@2
; Line 940
	mov	eax, DWORD PTR _dirProps$[ebp]
	add	eax, DWORD PTR _position$[ebp]
	mov	cl, BYTE PTR _newProp$[ebp]
	mov	BYTE PTR [eax], cl
$LN23@bracketPro@2:
; Line 941
	mov	eax, DWORD PTR _pLastIsoRun$[ebp]
	mov	cl, BYTE PTR _newProp$[ebp]
	mov	BYTE PTR [eax+10], cl
; Line 942
	mov	eax, DWORD PTR _pLastIsoRun$[ebp]
	mov	cl, BYTE PTR _newProp$[ebp]
	mov	BYTE PTR [eax+9], cl
; Line 943
	movzx	eax, BYTE PTR _newProp$[ebp]
	mov	ecx, DWORD PTR _pLastIsoRun$[ebp]
	mov	DWORD PTR [ecx+12], eax
; Line 944
	mov	eax, DWORD PTR _pLastIsoRun$[ebp]
	mov	ecx, DWORD PTR _position$[ebp]
	mov	DWORD PTR [eax], ecx
	jmp	$LN22@bracketPro@2
$LN24@bracketPro@2:
; Line 946
	movzx	eax, BYTE PTR _dirProp$[ebp]
	cmp	eax, 1
	jle	SHORT $LN20@bracketPro@2
	movzx	eax, BYTE PTR _dirProp$[ebp]
	cmp	eax, 13					; 0000000dH
	jne	SHORT $LN21@bracketPro@2
$LN20@bracketPro@2:
; Line 947
	movzx	eax, BYTE PTR _dirProp$[ebp]
	neg	eax
	sbb	eax, eax
	neg	eax
	mov	BYTE PTR _newProp$[ebp], al
; Line 948
	mov	eax, DWORD PTR _pLastIsoRun$[ebp]
	mov	cl, BYTE PTR _dirProp$[ebp]
	mov	BYTE PTR [eax+10], cl
; Line 949
	mov	eax, DWORD PTR _pLastIsoRun$[ebp]
	mov	cl, BYTE PTR _dirProp$[ebp]
	mov	BYTE PTR [eax+9], cl
; Line 950
	movzx	eax, BYTE PTR _newProp$[ebp]
	mov	ecx, DWORD PTR _pLastIsoRun$[ebp]
	mov	DWORD PTR [ecx+12], eax
; Line 951
	mov	eax, DWORD PTR _pLastIsoRun$[ebp]
	mov	ecx, DWORD PTR _position$[ebp]
	mov	DWORD PTR [eax], ecx
	jmp	$LN22@bracketPro@2
$LN21@bracketPro@2:
; Line 953
	movzx	eax, BYTE PTR _dirProp$[ebp]
	cmp	eax, 2
	jne	SHORT $LN18@bracketPro@2
; Line 954
	mov	eax, DWORD PTR _pLastIsoRun$[ebp]
	mov	BYTE PTR [eax+10], 2
; Line 955
	mov	eax, DWORD PTR _pLastIsoRun$[ebp]
	movzx	ecx, BYTE PTR [eax+9]
	test	ecx, ecx
	jne	SHORT $LN17@bracketPro@2
; Line 956
	mov	BYTE PTR _newProp$[ebp], 0
; Line 957
	mov	eax, DWORD PTR _bd$[ebp]
	movsx	ecx, BYTE PTR [eax+2528]
	test	ecx, ecx
	jne	SHORT $LN16@bracketPro@2
; Line 958
	mov	eax, DWORD PTR _dirProps$[ebp]
	add	eax, DWORD PTR _position$[ebp]
	mov	BYTE PTR [eax], 23			; 00000017H
$LN16@bracketPro@2:
; Line 959
	mov	eax, DWORD PTR _pLastIsoRun$[ebp]
	mov	DWORD PTR [eax+12], 0
; Line 960
	mov	eax, DWORD PTR _pLastIsoRun$[ebp]
	mov	ecx, DWORD PTR _position$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 962
	jmp	SHORT $LN15@bracketPro@2
$LN17@bracketPro@2:
; Line 963
	mov	BYTE PTR _newProp$[ebp], 1
; Line 964
	mov	eax, DWORD PTR _pLastIsoRun$[ebp]
	movzx	ecx, BYTE PTR [eax+9]
	cmp	ecx, 13					; 0000000dH
	jne	SHORT $LN14@bracketPro@2
; Line 965
	mov	eax, DWORD PTR _dirProps$[ebp]
	add	eax, DWORD PTR _position$[ebp]
	mov	BYTE PTR [eax], 5
; Line 966
	jmp	SHORT $LN13@bracketPro@2
$LN14@bracketPro@2:
; Line 967
	mov	eax, DWORD PTR _dirProps$[ebp]
	add	eax, DWORD PTR _position$[ebp]
	mov	BYTE PTR [eax], 24			; 00000018H
$LN13@bracketPro@2:
; Line 968
	mov	eax, DWORD PTR _pLastIsoRun$[ebp]
	mov	DWORD PTR [eax+12], 1
; Line 969
	mov	eax, DWORD PTR _pLastIsoRun$[ebp]
	mov	ecx, DWORD PTR _position$[ebp]
	mov	DWORD PTR [eax], ecx
$LN15@bracketPro@2:
; Line 970
	jmp	SHORT $LN22@bracketPro@2
$LN18@bracketPro@2:
; Line 972
	movzx	eax, BYTE PTR _dirProp$[ebp]
	cmp	eax, 5
	jne	SHORT $LN11@bracketPro@2
; Line 973
	mov	BYTE PTR _newProp$[ebp], 1
; Line 974
	mov	eax, DWORD PTR _pLastIsoRun$[ebp]
	mov	BYTE PTR [eax+10], 5
; Line 975
	mov	eax, DWORD PTR _pLastIsoRun$[ebp]
	mov	DWORD PTR [eax+12], 1
; Line 976
	mov	eax, DWORD PTR _pLastIsoRun$[ebp]
	mov	ecx, DWORD PTR _position$[ebp]
	mov	DWORD PTR [eax], ecx
	jmp	SHORT $LN22@bracketPro@2
$LN11@bracketPro@2:
; Line 978
	movzx	eax, BYTE PTR _dirProp$[ebp]
	cmp	eax, 17					; 00000011H
	jne	SHORT $LN9@bracketPro@2
; Line 982
	mov	eax, DWORD PTR _pLastIsoRun$[ebp]
	mov	cl, BYTE PTR [eax+10]
	mov	BYTE PTR _newProp$[ebp], cl
; Line 983
	movzx	eax, BYTE PTR _newProp$[ebp]
	cmp	eax, 10					; 0000000aH
	jne	SHORT $LN8@bracketPro@2
; Line 984
	mov	eax, DWORD PTR _dirProps$[ebp]
	add	eax, DWORD PTR _position$[ebp]
	mov	cl, BYTE PTR _newProp$[ebp]
	mov	BYTE PTR [eax], cl
$LN8@bracketPro@2:
; Line 986
	jmp	SHORT $LN22@bracketPro@2
$LN9@bracketPro@2:
; Line 987
	mov	al, BYTE PTR _dirProp$[ebp]
	mov	BYTE PTR _newProp$[ebp], al
; Line 988
	mov	eax, DWORD PTR _pLastIsoRun$[ebp]
	mov	cl, BYTE PTR _dirProp$[ebp]
	mov	BYTE PTR [eax+10], cl
$LN22@bracketPro@2:
; Line 990
	movzx	eax, BYTE PTR _newProp$[ebp]
	cmp	eax, 1
	jle	SHORT $LN5@bracketPro@2
	movzx	eax, BYTE PTR _newProp$[ebp]
	cmp	eax, 13					; 0000000dH
	jne	$LN6@bracketPro@2
$LN5@bracketPro@2:
; Line 992
	movzx	ecx, BYTE PTR _newProp$[ebp]
	neg	ecx
	sbb	ecx, ecx
	neg	ecx
	mov	eax, 1
	shl	eax, cl
	mov	WORD PTR _flag$9076[ebp], ax
; Line 993
	mov	eax, DWORD PTR _pLastIsoRun$[ebp]
	movzx	ecx, WORD PTR [eax+4]
	mov	DWORD PTR _i$9075[ebp], ecx
	jmp	SHORT $LN4@bracketPro@2
$LN3@bracketPro@2:
	mov	eax, DWORD PTR _i$9075[ebp]
	add	eax, 1
	mov	DWORD PTR _i$9075[ebp], eax
$LN4@bracketPro@2:
	mov	eax, DWORD PTR _pLastIsoRun$[ebp]
	movzx	ecx, WORD PTR [eax+6]
	cmp	DWORD PTR _i$9075[ebp], ecx
	jge	SHORT $LN6@bracketPro@2
; Line 994
	mov	eax, DWORD PTR _i$9075[ebp]
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _bd$[ebp]
	mov	edx, DWORD PTR [ecx+484]
	mov	ecx, DWORD PTR _position$[ebp]
	cmp	ecx, DWORD PTR [eax+edx]
	jle	SHORT $LN1@bracketPro@2
; Line 995
	mov	eax, DWORD PTR _i$9075[ebp]
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _bd$[ebp]
	mov	edx, DWORD PTR [ecx+484]
	movzx	ecx, WORD PTR _flag$9076[ebp]
	movzx	edx, WORD PTR [edx+eax+12]
	or	edx, ecx
	mov	eax, DWORD PTR _i$9075[ebp]
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _bd$[ebp]
	mov	ecx, DWORD PTR [ecx+484]
	mov	WORD PTR [ecx+eax+12], dx
$LN1@bracketPro@2:
; Line 996
	jmp	SHORT $LN3@bracketPro@2
$LN6@bracketPro@2:
; Line 997
	mov	al, 1
$LN44@bracketPro@2:
; Line 998
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 336				; 00000150H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_bracketProcessChar ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _bracketAddOpening
_TEXT	SEGMENT
_pBiDi$8954 = -32					; size = 4
_pOpening$ = -20					; size = 4
_pLastIsoRun$ = -8					; size = 4
_bd$ = 8						; size = 4
_match$ = 12						; size = 2
_position$ = 16						; size = 4
_bracketAddOpening PROC					; COMDAT
; Line 743
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 744
	mov	eax, DWORD PTR _bd$[ebp]
	mov	ecx, DWORD PTR [eax+492]
	shl	ecx, 4
	mov	edx, DWORD PTR _bd$[ebp]
	lea	eax, DWORD PTR [edx+ecx+496]
	mov	DWORD PTR _pLastIsoRun$[ebp], eax
; Line 746
	mov	eax, DWORD PTR _pLastIsoRun$[ebp]
	movzx	ecx, WORD PTR [eax+6]
	mov	edx, DWORD PTR _bd$[ebp]
	cmp	ecx, DWORD PTR [edx+488]
	jl	$LN3@bracketAdd
; Line 747
	mov	eax, DWORD PTR _bd$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pBiDi$8954[ebp], ecx
; Line 748
	mov	eax, DWORD PTR _pLastIsoRun$[ebp]
	movzx	ecx, WORD PTR [eax+6]
	shl	ecx, 1
	imul	ecx, 24					; 00000018H
	push	ecx
	push	1
	mov	edx, DWORD PTR _pBiDi$8954[ebp]
	add	edx, 32					; 00000020H
	push	edx
	mov	eax, DWORD PTR _pBiDi$8954[ebp]
	add	eax, 56					; 00000038H
	push	eax
	call	_ubidi_getMemory_56
	add	esp, 16					; 00000010H
	movsx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN2@bracketAdd
; Line 749
	xor	al, al
	jmp	$LN4@bracketAdd
$LN2@bracketAdd:
; Line 750
	mov	eax, DWORD PTR _bd$[ebp]
	add	eax, 4
	mov	ecx, DWORD PTR _bd$[ebp]
	cmp	DWORD PTR [ecx+484], eax
	jne	SHORT $LN1@bracketAdd
; Line 752
	push	1
	mov	eax, DWORD PTR _bd$[ebp]
	add	eax, 4
	push	eax
	call	_uprv_checkValidMemory
	add	esp, 8
	push	480					; 000001e0H
	mov	ecx, DWORD PTR _bd$[ebp]
	add	ecx, 4
	push	ecx
	mov	edx, DWORD PTR _pBiDi$8954[ebp]
	mov	eax, DWORD PTR [edx+56]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@bracketAdd:
; Line 753
	mov	eax, DWORD PTR _bd$[ebp]
	mov	ecx, DWORD PTR _pBiDi$8954[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	DWORD PTR [eax+484], edx
; Line 754
	mov	eax, DWORD PTR _pBiDi$8954[ebp]
	mov	eax, DWORD PTR [eax+32]
	xor	edx, edx
	mov	ecx, 24					; 00000018H
	div	ecx
	mov	edx, DWORD PTR _bd$[ebp]
	mov	DWORD PTR [edx+488], eax
$LN3@bracketAdd:
; Line 756
	mov	eax, DWORD PTR _pLastIsoRun$[ebp]
	movzx	ecx, WORD PTR [eax+6]
	imul	ecx, 24					; 00000018H
	mov	edx, DWORD PTR _bd$[ebp]
	add	ecx, DWORD PTR [edx+484]
	mov	DWORD PTR _pOpening$[ebp], ecx
; Line 757
	mov	eax, DWORD PTR _pOpening$[ebp]
	mov	ecx, DWORD PTR _position$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 758
	movzx	eax, WORD PTR _match$[ebp]
	mov	ecx, DWORD PTR _pOpening$[ebp]
	mov	DWORD PTR [ecx+4], eax
; Line 759
	mov	eax, DWORD PTR _pOpening$[ebp]
	mov	ecx, DWORD PTR _pLastIsoRun$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+16], edx
; Line 760
	mov	eax, DWORD PTR _pOpening$[ebp]
	mov	ecx, DWORD PTR _pLastIsoRun$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+8], edx
; Line 761
	xor	eax, eax
	mov	ecx, DWORD PTR _pOpening$[ebp]
	mov	WORD PTR [ecx+12], ax
; Line 762
	mov	eax, DWORD PTR _pLastIsoRun$[ebp]
	mov	cx, WORD PTR [eax+6]
	add	cx, 1
	mov	edx, DWORD PTR _pLastIsoRun$[ebp]
	mov	WORD PTR [edx+6], cx
; Line 763
	mov	al, 1
$LN4@bracketAdd:
; Line 764
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_bracketAddOpening ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _bracketProcessClosing
_TEXT	SEGMENT
_k$9011 = -80						; size = 4
_newProp$ = -65						; size = 1
_stable$ = -53						; size = 1
_direction$ = -44					; size = 4
_qOpening$ = -32					; size = 4
_pOpening$ = -20					; size = 4
_pLastIsoRun$ = -8					; size = 4
_bd$ = 8						; size = 4
_openIdx$ = 12						; size = 4
_position$ = 16						; size = 4
_bracketProcessClosing PROC				; COMDAT
; Line 795
	push	ebp
	mov	ebp, esp
	sub	esp, 276				; 00000114H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-276]
	mov	ecx, 69					; 00000045H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 796
	mov	eax, DWORD PTR _bd$[ebp]
	mov	ecx, DWORD PTR [eax+492]
	shl	ecx, 4
	mov	edx, DWORD PTR _bd$[ebp]
	lea	eax, DWORD PTR [edx+ecx+496]
	mov	DWORD PTR _pLastIsoRun$[ebp], eax
; Line 801
	mov	eax, DWORD PTR _openIdx$[ebp]
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _bd$[ebp]
	add	eax, DWORD PTR [ecx+484]
	mov	DWORD PTR _pOpening$[ebp], eax
; Line 802
	mov	eax, DWORD PTR _pLastIsoRun$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	and	ecx, 1
	mov	DWORD PTR _direction$[ebp], ecx
; Line 803
	mov	BYTE PTR _stable$[ebp], 1
; Line 824
	cmp	DWORD PTR _direction$[ebp], 0
	jne	SHORT $LN17@bracketPro@3
	mov	eax, DWORD PTR _pOpening$[ebp]
	movzx	ecx, WORD PTR [eax+12]
	and	ecx, 1
	jne	SHORT $LN18@bracketPro@3
$LN17@bracketPro@3:
	cmp	DWORD PTR _direction$[ebp], 1
	jne	SHORT $LN19@bracketPro@3
	mov	eax, DWORD PTR _pOpening$[ebp]
	movzx	ecx, WORD PTR [eax+12]
	and	ecx, 2
	je	SHORT $LN19@bracketPro@3
$LN18@bracketPro@3:
; Line 825
	mov	al, BYTE PTR _direction$[ebp]
	mov	BYTE PTR _newProp$[ebp], al
	jmp	SHORT $LN16@bracketPro@3
$LN19@bracketPro@3:
; Line 827
	mov	eax, DWORD PTR _pOpening$[ebp]
	movzx	ecx, WORD PTR [eax+12]
	and	ecx, 3
	je	SHORT $LN15@bracketPro@3
; Line 830
	mov	eax, DWORD PTR _pLastIsoRun$[ebp]
	movzx	ecx, WORD PTR [eax+4]
	xor	edx, edx
	cmp	DWORD PTR _openIdx$[ebp], ecx
	sete	dl
	mov	BYTE PTR _stable$[ebp], dl
; Line 831
	mov	eax, DWORD PTR _pOpening$[ebp]
	mov	ecx, DWORD PTR _direction$[ebp]
	cmp	ecx, DWORD PTR [eax+16]
	je	SHORT $LN14@bracketPro@3
; Line 832
	mov	eax, DWORD PTR _pOpening$[ebp]
	mov	cl, BYTE PTR [eax+16]
	mov	BYTE PTR _newProp$[ebp], cl
; Line 833
	jmp	SHORT $LN13@bracketPro@3
$LN14@bracketPro@3:
; Line 834
	mov	al, BYTE PTR _direction$[ebp]
	mov	BYTE PTR _newProp$[ebp], al
$LN13@bracketPro@3:
; Line 835
	jmp	SHORT $LN16@bracketPro@3
$LN15@bracketPro@3:
; Line 837
	mov	eax, DWORD PTR _pLastIsoRun$[ebp]
	mov	cx, WORD PTR _openIdx$[ebp]
	mov	WORD PTR [eax+6], cx
; Line 838
	mov	al, 10					; 0000000aH
	jmp	$LN20@bracketPro@3
$LN16@bracketPro@3:
; Line 840
	mov	eax, DWORD PTR _bd$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+76]
	mov	eax, DWORD PTR _pOpening$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	al, BYTE PTR _newProp$[ebp]
	mov	BYTE PTR [edx+ecx], al
; Line 841
	mov	eax, DWORD PTR _bd$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+76]
	mov	eax, DWORD PTR _position$[ebp]
	mov	cl, BYTE PTR _newProp$[ebp]
	mov	BYTE PTR [edx+eax], cl
; Line 843
	movzx	eax, BYTE PTR _newProp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pOpening$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _openIdx$[ebp]
	push	eax
	mov	ecx, DWORD PTR _bd$[ebp]
	push	ecx
	call	_fixN0c
	add	esp, 16					; 00000010H
; Line 844
	movsx	eax, BYTE PTR _stable$[ebp]
	test	eax, eax
	je	SHORT $LN11@bracketPro@3
; Line 845
	mov	eax, DWORD PTR _pLastIsoRun$[ebp]
	mov	cx, WORD PTR _openIdx$[ebp]
	mov	WORD PTR [eax+6], cx
$LN10@bracketPro@3:
; Line 848
	mov	eax, DWORD PTR _pLastIsoRun$[ebp]
	movzx	ecx, WORD PTR [eax+6]
	mov	edx, DWORD PTR _pLastIsoRun$[ebp]
	movzx	eax, WORD PTR [edx+4]
	cmp	ecx, eax
	jle	SHORT $LN9@bracketPro@3
	mov	eax, DWORD PTR _pLastIsoRun$[ebp]
	movzx	ecx, WORD PTR [eax+6]
	sub	ecx, 1
	imul	ecx, 24					; 00000018H
	mov	edx, DWORD PTR _bd$[ebp]
	mov	eax, DWORD PTR [edx+484]
	mov	edx, DWORD PTR _pOpening$[ebp]
	mov	eax, DWORD PTR [ecx+eax]
	cmp	eax, DWORD PTR [edx]
	jne	SHORT $LN9@bracketPro@3
; Line 849
	mov	eax, DWORD PTR _pLastIsoRun$[ebp]
	mov	cx, WORD PTR [eax+6]
	sub	cx, 1
	mov	edx, DWORD PTR _pLastIsoRun$[ebp]
	mov	WORD PTR [edx+6], cx
	jmp	SHORT $LN10@bracketPro@3
$LN9@bracketPro@3:
; Line 850
	jmp	$LN8@bracketPro@3
$LN11@bracketPro@3:
; Line 852
	mov	eax, DWORD PTR _position$[ebp]
	neg	eax
	mov	ecx, DWORD PTR _pOpening$[ebp]
	mov	DWORD PTR [ecx+4], eax
; Line 854
	mov	eax, DWORD PTR _openIdx$[ebp]
	sub	eax, 1
	mov	DWORD PTR _k$9011[ebp], eax
$LN7@bracketPro@3:
; Line 856
	mov	eax, DWORD PTR _pLastIsoRun$[ebp]
	movzx	ecx, WORD PTR [eax+4]
	cmp	DWORD PTR _k$9011[ebp], ecx
	jl	SHORT $LN6@bracketPro@3
	mov	eax, DWORD PTR _k$9011[ebp]
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _bd$[ebp]
	mov	edx, DWORD PTR [ecx+484]
	mov	ecx, DWORD PTR _pOpening$[ebp]
	mov	edx, DWORD PTR [eax+edx]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN6@bracketPro@3
; Line 857
	mov	eax, DWORD PTR _k$9011[ebp]
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _bd$[ebp]
	mov	edx, DWORD PTR [ecx+484]
	mov	DWORD PTR [edx+eax+4], 0
	mov	eax, DWORD PTR _k$9011[ebp]
	sub	eax, 1
	mov	DWORD PTR _k$9011[ebp], eax
	jmp	SHORT $LN7@bracketPro@3
$LN6@bracketPro@3:
; Line 860
	mov	eax, DWORD PTR _openIdx$[ebp]
	add	eax, 1
	mov	DWORD PTR _k$9011[ebp], eax
	jmp	SHORT $LN5@bracketPro@3
$LN4@bracketPro@3:
	mov	eax, DWORD PTR _k$9011[ebp]
	add	eax, 1
	mov	DWORD PTR _k$9011[ebp], eax
$LN5@bracketPro@3:
	mov	eax, DWORD PTR _pLastIsoRun$[ebp]
	movzx	ecx, WORD PTR [eax+6]
	cmp	DWORD PTR _k$9011[ebp], ecx
	jge	SHORT $LN8@bracketPro@3
; Line 861
	mov	eax, DWORD PTR _k$9011[ebp]
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _bd$[ebp]
	add	eax, DWORD PTR [ecx+484]
	mov	DWORD PTR _qOpening$[ebp], eax
; Line 862
	mov	eax, DWORD PTR _qOpening$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR _position$[ebp]
	jl	SHORT $LN2@bracketPro@3
; Line 863
	jmp	SHORT $LN8@bracketPro@3
$LN2@bracketPro@3:
; Line 864
	mov	eax, DWORD PTR _qOpening$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jle	SHORT $LN1@bracketPro@3
; Line 865
	mov	eax, DWORD PTR _qOpening$[ebp]
	mov	DWORD PTR [eax+4], 0
$LN1@bracketPro@3:
; Line 866
	jmp	SHORT $LN4@bracketPro@3
$LN8@bracketPro@3:
; Line 868
	mov	al, BYTE PTR _newProp$[ebp]
$LN20@bracketPro@3:
; Line 869
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 276				; 00000114H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_bracketProcessClosing ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _fixN0c
_TEXT	SEGMENT
_closingPosition$ = -68					; size = 4
_openingPosition$ = -56					; size = 4
_k$ = -44						; size = 4
_dirProps$ = -32					; size = 4
_qOpening$ = -20					; size = 4
_pLastIsoRun$ = -8					; size = 4
_bd$ = 8						; size = 4
_openingIndex$ = 12					; size = 4
_newPropPosition$ = 16					; size = 4
_newProp$ = 20						; size = 1
_fixN0c	PROC						; COMDAT
; Line 768
	push	ebp
	mov	ebp, esp
	sub	esp, 264				; 00000108H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-264]
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 770
	mov	eax, DWORD PTR _bd$[ebp]
	mov	ecx, DWORD PTR [eax+492]
	shl	ecx, 4
	mov	edx, DWORD PTR _bd$[ebp]
	lea	eax, DWORD PTR [edx+ecx+496]
	mov	DWORD PTR _pLastIsoRun$[ebp], eax
; Line 772
	mov	eax, DWORD PTR _bd$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+76]
	mov	DWORD PTR _dirProps$[ebp], edx
; Line 774
	mov	eax, DWORD PTR _openingIndex$[ebp]
	add	eax, 1
	mov	DWORD PTR _k$[ebp], eax
	mov	ecx, DWORD PTR _k$[ebp]
	imul	ecx, 24					; 00000018H
	mov	edx, DWORD PTR _bd$[ebp]
	add	ecx, DWORD PTR [edx+484]
	mov	DWORD PTR _qOpening$[ebp], ecx
	jmp	SHORT $LN7@fixN0c
$LN6@fixN0c:
	mov	eax, DWORD PTR _k$[ebp]
	add	eax, 1
	mov	DWORD PTR _k$[ebp], eax
	mov	ecx, DWORD PTR _qOpening$[ebp]
	add	ecx, 24					; 00000018H
	mov	DWORD PTR _qOpening$[ebp], ecx
$LN7@fixN0c:
	mov	eax, DWORD PTR _pLastIsoRun$[ebp]
	movzx	ecx, WORD PTR [eax+6]
	cmp	DWORD PTR _k$[ebp], ecx
	jge	$LN8@fixN0c
; Line 775
	mov	eax, DWORD PTR _qOpening$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jl	SHORT $LN4@fixN0c
; Line 776
	jmp	SHORT $LN6@fixN0c
$LN4@fixN0c:
; Line 777
	mov	eax, DWORD PTR _qOpening$[ebp]
	mov	ecx, DWORD PTR _newPropPosition$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jge	SHORT $LN3@fixN0c
; Line 778
	jmp	$LN8@fixN0c
$LN3@fixN0c:
; Line 779
	mov	eax, DWORD PTR _qOpening$[ebp]
	mov	ecx, DWORD PTR _newPropPosition$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jl	SHORT $LN2@fixN0c
; Line 780
	jmp	SHORT $LN6@fixN0c
$LN2@fixN0c:
; Line 781
	movzx	eax, BYTE PTR _newProp$[ebp]
	mov	ecx, DWORD PTR _qOpening$[ebp]
	cmp	eax, DWORD PTR [ecx+16]
	jne	SHORT $LN1@fixN0c
; Line 782
	jmp	SHORT $LN8@fixN0c
$LN1@fixN0c:
; Line 783
	mov	eax, DWORD PTR _qOpening$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _openingPosition$[ebp], ecx
; Line 784
	mov	eax, DWORD PTR _dirProps$[ebp]
	add	eax, DWORD PTR _openingPosition$[ebp]
	mov	cl, BYTE PTR _newProp$[ebp]
	mov	BYTE PTR [eax], cl
; Line 785
	mov	eax, DWORD PTR _qOpening$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	neg	ecx
	mov	DWORD PTR _closingPosition$[ebp], ecx
; Line 786
	mov	eax, DWORD PTR _dirProps$[ebp]
	add	eax, DWORD PTR _closingPosition$[ebp]
	mov	cl, BYTE PTR _newProp$[ebp]
	mov	BYTE PTR [eax], cl
; Line 787
	mov	eax, DWORD PTR _qOpening$[ebp]
	mov	DWORD PTR [eax+4], 0
; Line 788
	movzx	eax, BYTE PTR _newProp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _openingPosition$[ebp]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	mov	eax, DWORD PTR _bd$[ebp]
	push	eax
	call	_fixN0c
	add	esp, 16					; 00000010H
; Line 789
	movzx	eax, BYTE PTR _newProp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _closingPosition$[ebp]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	mov	eax, DWORD PTR _bd$[ebp]
	push	eax
	call	_fixN0c
	add	esp, 16					; 00000010H
; Line 790
	jmp	$LN6@fixN0c
$LN8@fixN0c:
; Line 791
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 264				; 00000108H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_fixN0c	ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _directionFromFlags
_TEXT	SEGMENT
_flags$ = -8						; size = 4
_pBiDi$ = 8						; size = 4
_directionFromFlags PROC				; COMDAT
; Line 1004
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1005
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+124]
	mov	DWORD PTR _flags$[ebp], ecx
; Line 1007
	mov	eax, DWORD PTR _flags$[ebp]
	and	eax, 2154498				; 0020e002H
	jne	SHORT $LN5@directionF
	mov	eax, DWORD PTR _flags$[ebp]
	and	eax, 32					; 00000020H
	je	SHORT $LN4@directionF
	mov	eax, DWORD PTR _flags$[ebp]
	and	eax, 8249304				; 007ddfd8H
	jne	SHORT $LN5@directionF
$LN4@directionF:
; Line 1008
	xor	eax, eax
	jmp	SHORT $LN6@directionF
	jmp	SHORT $LN6@directionF
$LN5@directionF:
; Line 1009
	mov	eax, DWORD PTR _flags$[ebp]
	and	eax, 26220581				; 01901825H
	jne	SHORT $LN2@directionF
; Line 1010
	mov	eax, 1
	jmp	SHORT $LN6@directionF
; Line 1011
	jmp	SHORT $LN6@directionF
$LN2@directionF:
; Line 1012
	mov	eax, 2
$LN6@directionF:
; Line 1014
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_directionFromFlags ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _checkExplicitLevels
_TEXT	SEGMENT
tv149 = -292						; size = 4
_level$ = -89						; size = 1
_flags$ = -80						; size = 4
_length$ = -68						; size = 4
_i$ = -56						; size = 4
_isolateCount$ = -44					; size = 4
_levels$ = -32						; size = 4
_dirProp$ = -17						; size = 1
_dirProps$ = -8						; size = 4
_pBiDi$ = 8						; size = 4
_pErrorCode$ = 12					; size = 4
_checkExplicitLevels PROC				; COMDAT
; Line 1342
	push	ebp
	mov	ebp, esp
	sub	esp, 292				; 00000124H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-292]
	mov	ecx, 73					; 00000049H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1343
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	mov	DWORD PTR _dirProps$[ebp], ecx
; Line 1345
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+80]
	mov	DWORD PTR _levels$[ebp], ecx
; Line 1346
	mov	DWORD PTR _isolateCount$[ebp], 0
; Line 1348
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _length$[ebp], ecx
; Line 1349
	mov	DWORD PTR _flags$[ebp], 0
; Line 1351
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	DWORD PTR [eax+244], 0
; Line 1353
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN16@checkExpli
$LN15@checkExpli:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN16@checkExpli:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _length$[ebp]
	jge	$LN14@checkExpli
; Line 1354
	mov	eax, DWORD PTR _levels$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _level$[ebp], cl
; Line 1355
	mov	eax, DWORD PTR _dirProps$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _dirProp$[ebp], cl
; Line 1356
	movzx	eax, BYTE PTR _dirProp$[ebp]
	cmp	eax, 20					; 00000014H
	je	SHORT $LN12@checkExpli
	movzx	eax, BYTE PTR _dirProp$[ebp]
	cmp	eax, 21					; 00000015H
	jne	SHORT $LN13@checkExpli
$LN12@checkExpli:
; Line 1357
	mov	eax, DWORD PTR _isolateCount$[ebp]
	add	eax, 1
	mov	DWORD PTR _isolateCount$[ebp], eax
; Line 1358
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR _isolateCount$[ebp]
	cmp	ecx, DWORD PTR [eax+244]
	jle	SHORT $LN11@checkExpli
; Line 1359
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR _isolateCount$[ebp]
	mov	DWORD PTR [eax+244], ecx
$LN11@checkExpli:
; Line 1361
	jmp	SHORT $LN10@checkExpli
$LN13@checkExpli:
	movzx	eax, BYTE PTR _dirProp$[ebp]
	cmp	eax, 22					; 00000016H
	jne	SHORT $LN9@checkExpli
; Line 1362
	mov	eax, DWORD PTR _isolateCount$[ebp]
	sub	eax, 1
	mov	DWORD PTR _isolateCount$[ebp], eax
	jmp	SHORT $LN10@checkExpli
$LN9@checkExpli:
; Line 1363
	movzx	eax, BYTE PTR _dirProp$[ebp]
	cmp	eax, 7
	jne	SHORT $LN10@checkExpli
; Line 1364
	mov	DWORD PTR _isolateCount$[ebp], 0
$LN10@checkExpli:
; Line 1365
	movzx	eax, BYTE PTR _level$[ebp]
	and	eax, 128				; 00000080H
	je	SHORT $LN6@checkExpli
; Line 1367
	movzx	eax, BYTE PTR _level$[ebp]
	and	eax, -129				; ffffff7fH
	mov	BYTE PTR _level$[ebp], al
; Line 1368
	movzx	eax, BYTE PTR _level$[ebp]
	and	eax, 1
	mov	ecx, DWORD PTR _flags$[ebp]
	or	ecx, DWORD PTR _flagO[eax*4]
	mov	DWORD PTR _flags$[ebp], ecx
; Line 1369
	jmp	SHORT $LN5@checkExpli
$LN6@checkExpli:
; Line 1371
	movzx	eax, BYTE PTR _level$[ebp]
	and	eax, 1
	movzx	ecx, BYTE PTR _dirProp$[ebp]
	mov	edx, 1
	shl	edx, cl
	or	edx, DWORD PTR _flagE[eax*4]
	or	edx, DWORD PTR _flags$[ebp]
	mov	DWORD PTR _flags$[ebp], edx
$LN5@checkExpli:
; Line 1375
	mov	eax, DWORD PTR _pBiDi$[ebp]
	movzx	ecx, BYTE PTR [eax+98]
	test	ecx, ecx
	je	SHORT $LN19@checkExpli
	mov	edx, DWORD PTR _pBiDi$[ebp]
	mov	eax, DWORD PTR [edx+140]
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jl	SHORT $LN19@checkExpli
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	eax, DWORD PTR _pBiDi$[ebp]
	push	eax
	call	_ubidi_getParaLevelAtIndex_56
	add	esp, 8
	movzx	ecx, al
	mov	DWORD PTR tv149[ebp], ecx
	jmp	SHORT $LN20@checkExpli
$LN19@checkExpli:
	mov	edx, DWORD PTR _pBiDi$[ebp]
	movzx	eax, BYTE PTR [edx+97]
	mov	DWORD PTR tv149[ebp], eax
$LN20@checkExpli:
	movzx	ecx, BYTE PTR _level$[ebp]
	movzx	edx, BYTE PTR tv149[ebp]
	cmp	ecx, edx
	jge	SHORT $LN2@checkExpli
	movzx	eax, BYTE PTR _level$[ebp]
	test	eax, eax
	jne	SHORT $LN3@checkExpli
	movzx	eax, BYTE PTR _dirProp$[ebp]
	cmp	eax, 7
	jne	SHORT $LN3@checkExpli
$LN2@checkExpli:
	movzx	eax, BYTE PTR _level$[ebp]
	cmp	eax, 125				; 0000007dH
	jle	SHORT $LN4@checkExpli
$LN3@checkExpli:
; Line 1377
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 1
; Line 1378
	xor	eax, eax
	jmp	SHORT $LN17@checkExpli
$LN4@checkExpli:
; Line 1380
	jmp	$LN15@checkExpli
$LN14@checkExpli:
; Line 1381
	mov	eax, DWORD PTR _flags$[ebp]
	and	eax, 8380376				; 007fdfd8H
	je	SHORT $LN1@checkExpli
; Line 1382
	mov	eax, DWORD PTR _pBiDi$[ebp]
	movzx	ecx, BYTE PTR [eax+97]
	and	ecx, 1
	mov	edx, DWORD PTR _flags$[ebp]
	or	edx, DWORD PTR _flagLR[ecx*4]
	mov	DWORD PTR _flags$[ebp], edx
$LN1@checkExpli:
; Line 1384
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR _flags$[ebp]
	mov	DWORD PTR [eax+124], ecx
; Line 1385
	mov	eax, DWORD PTR _pBiDi$[ebp]
	push	eax
	call	_directionFromFlags
	add	esp, 4
$LN17@checkExpli:
; Line 1386
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 292				; 00000124H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_checkExplicitLevels ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _addPoint
_TEXT	SEGMENT
_savePoints$9698 = -36					; size = 4
_pInsertPoints$ = -24					; size = 4
_point$ = -12						; size = 8
_pBiDi$ = 8						; size = 4
_pos$ = 12						; size = 4
_flag$ = 16						; size = 4
_addPoint PROC						; COMDAT
; Line 1766
	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1769
	mov	eax, DWORD PTR _pBiDi$[ebp]
	add	eax, 332				; 0000014cH
	mov	DWORD PTR _pInsertPoints$[ebp], eax
; Line 1771
	mov	eax, DWORD PTR _pInsertPoints$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN5@addPoint
; Line 1773
	push	80					; 00000050H
	call	_uprv_malloc_56
	add	esp, 4
	mov	ecx, DWORD PTR _pInsertPoints$[ebp]
	mov	DWORD PTR [ecx+16], eax
; Line 1774
	mov	eax, DWORD PTR _pInsertPoints$[ebp]
	cmp	DWORD PTR [eax+16], 0
	jne	SHORT $LN4@addPoint
; Line 1776
	mov	eax, DWORD PTR _pInsertPoints$[ebp]
	mov	DWORD PTR [eax+12], 7
; Line 1777
	jmp	$LN6@addPoint
$LN4@addPoint:
; Line 1779
	mov	eax, DWORD PTR _pInsertPoints$[ebp]
	mov	DWORD PTR [eax], 10			; 0000000aH
$LN5@addPoint:
; Line 1781
	mov	eax, DWORD PTR _pInsertPoints$[ebp]
	mov	ecx, DWORD PTR _pInsertPoints$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx]
	jl	SHORT $LN3@addPoint
; Line 1783
	mov	eax, DWORD PTR _pInsertPoints$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _savePoints$9698[ebp], ecx
; Line 1785
	mov	eax, DWORD PTR _pInsertPoints$[ebp]
	mov	ecx, DWORD PTR [eax]
	shl	ecx, 1
	shl	ecx, 3
	push	ecx
	mov	edx, DWORD PTR _pInsertPoints$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	call	_uprv_realloc_56
	add	esp, 8
	mov	ecx, DWORD PTR _pInsertPoints$[ebp]
	mov	DWORD PTR [ecx+16], eax
; Line 1786
	mov	eax, DWORD PTR _pInsertPoints$[ebp]
	cmp	DWORD PTR [eax+16], 0
	jne	SHORT $LN2@addPoint
; Line 1788
	mov	eax, DWORD PTR _pInsertPoints$[ebp]
	mov	ecx, DWORD PTR _savePoints$9698[ebp]
	mov	DWORD PTR [eax+16], ecx
; Line 1789
	mov	eax, DWORD PTR _pInsertPoints$[ebp]
	mov	DWORD PTR [eax+12], 7
; Line 1790
	jmp	SHORT $LN6@addPoint
	jmp	SHORT $LN3@addPoint
$LN2@addPoint:
; Line 1792
	mov	eax, DWORD PTR _pInsertPoints$[ebp]
	mov	ecx, DWORD PTR [eax]
	shl	ecx, 1
	mov	edx, DWORD PTR _pInsertPoints$[ebp]
	mov	DWORD PTR [edx], ecx
$LN3@addPoint:
; Line 1794
	mov	eax, DWORD PTR _pos$[ebp]
	mov	DWORD PTR _point$[ebp], eax
; Line 1795
	mov	eax, DWORD PTR _flag$[ebp]
	mov	DWORD PTR _point$[ebp+4], eax
; Line 1796
	mov	eax, DWORD PTR _pInsertPoints$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _pInsertPoints$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	edx, DWORD PTR _point$[ebp]
	mov	DWORD PTR [eax+ecx*8], edx
	mov	edx, DWORD PTR _point$[ebp+4]
	mov	DWORD PTR [eax+ecx*8+4], edx
; Line 1797
	mov	eax, DWORD PTR _pInsertPoints$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _pInsertPoints$[ebp]
	mov	DWORD PTR [edx+4], ecx
$LN6@addPoint:
; Line 1799
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@addPoint
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN10@addPoint:
	DD	1
	DD	$LN9@addPoint
$LN9@addPoint:
	DD	-12					; fffffff4H
	DD	8
	DD	$LN8@addPoint
$LN8@addPoint:
	DB	112					; 00000070H
	DB	111					; 0000006fH
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	0
_addPoint ENDP
_TEXT	ENDS
PUBLIC	?__LINE__Var@?1??resolveImplicitLevels@@9@9@80f45a25 ; `resolveImplicitLevels'::`2'::__LINE__Var
;	COMDAT ?__LINE__Var@?1??resolveImplicitLevels@@9@9@80f45a25
_DATA	SEGMENT
?__LINE__Var@?1??resolveImplicitLevels@@9@9@80f45a25 DD 0836H ; `resolveImplicitLevels'::`2'::__LINE__Var
; Function compile flags: /Odtp /RTCsu /ZI
_DATA	ENDS
;	COMDAT _resolveImplicitLevels
_TEXT	SEGMENT
tv88 = -477						; size = 1
tv274 = -476						; size = 4
tv79 = -476						; size = 4
_firstStrong$9941 = -273				; size = 1
_j$9920 = -264						; size = 4
_prop1$9913 = -249					; size = 1
_prop$9912 = -237					; size = 1
_k$9905 = -228						; size = 4
_lastStrong$9895 = -213					; size = 1
_nextStrongPos$ = -204					; size = 4
_nextStrongProp$ = -189					; size = 1
_inverseRTL$ = -177					; size = 1
_cell$ = -165						; size = 1
_resProp$ = -153					; size = 1
_gprop$ = -141						; size = 1
_actionImp$ = -132					; size = 2
_stateImp$ = -120					; size = 2
_oldStateImp$ = -108					; size = 2
_start2$ = -96						; size = 4
_start1$ = -84						; size = 4
_i$ = -72						; size = 4
_levState$ = -60					; size = 32
_dirProp$ = -17						; size = 1
_dirProps$ = -8						; size = 4
_pBiDi$ = 8						; size = 4
_start$ = 12						; size = 4
_limit$ = 16						; size = 4
_sor$ = 20						; size = 1
_eor$ = 24						; size = 1
_resolveImplicitLevels PROC				; COMDAT
; Line 2102
	push	ebp
	mov	ebp, esp
	sub	esp, 480				; 000001e0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-480]
	mov	ecx, 120				; 00000078H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2103
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	mov	DWORD PTR _dirProps$[ebp], ecx
; Line 2110
	mov	BYTE PTR _nextStrongProp$[ebp], 1
; Line 2111
	mov	DWORD PTR _nextStrongPos$[ebp], -1
; Line 2123
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR _start$[ebp]
	cmp	ecx, DWORD PTR [eax+128]
	jge	SHORT $LN50@resolveImp
	mov	edx, DWORD PTR _pBiDi$[ebp]
	movzx	eax, BYTE PTR [edx+98]
	test	eax, eax
	je	SHORT $LN48@resolveImp
	mov	ecx, DWORD PTR _pBiDi$[ebp]
	mov	edx, DWORD PTR [ecx+140]
	mov	eax, DWORD PTR _start$[ebp]
	cmp	eax, DWORD PTR [edx]
	jl	SHORT $LN48@resolveImp
	mov	ecx, DWORD PTR _start$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pBiDi$[ebp]
	push	edx
	call	_ubidi_getParaLevelAtIndex_56
	add	esp, 8
	movzx	eax, al
	mov	DWORD PTR tv79[ebp], eax
	jmp	SHORT $LN49@resolveImp
$LN48@resolveImp:
	mov	ecx, DWORD PTR _pBiDi$[ebp]
	movzx	edx, BYTE PTR [ecx+97]
	mov	DWORD PTR tv79[ebp], edx
$LN49@resolveImp:
	movzx	eax, BYTE PTR tv79[ebp]
	and	eax, 1
	je	SHORT $LN50@resolveImp
	mov	ecx, DWORD PTR _pBiDi$[ebp]
	cmp	DWORD PTR [ecx+88], 5
	je	SHORT $LN51@resolveImp
	mov	edx, DWORD PTR _pBiDi$[ebp]
	cmp	DWORD PTR [edx+88], 6
	jne	SHORT $LN50@resolveImp
$LN51@resolveImp:
	mov	BYTE PTR tv88[ebp], 1
	jmp	SHORT $LN52@resolveImp
$LN50@resolveImp:
	mov	BYTE PTR tv88[ebp], 0
$LN52@resolveImp:
	mov	al, BYTE PTR tv88[ebp]
	mov	BYTE PTR _inverseRTL$[ebp], al
; Line 2126
	mov	DWORD PTR _levState$[ebp+12], -1
; Line 2127
	mov	DWORD PTR _levState$[ebp+16], -1
; Line 2128
	mov	eax, DWORD PTR _start$[ebp]
	mov	DWORD PTR _levState$[ebp+24], eax
; Line 2129
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+80]
	mov	edx, DWORD PTR _start$[ebp]
	mov	al, BYTE PTR [ecx+edx]
	mov	BYTE PTR _levState$[ebp+28], al
; Line 2130
	movzx	eax, BYTE PTR _levState$[ebp+28]
	and	eax, 1
	mov	ecx, DWORD PTR _pBiDi$[ebp]
	mov	edx, DWORD PTR [ecx+116]
	mov	eax, DWORD PTR [edx+eax*4]
	mov	DWORD PTR _levState$[ebp], eax
; Line 2131
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+116]
	movzx	edx, BYTE PTR _levState$[ebp+28]
	and	edx, 1
	mov	eax, DWORD PTR [ecx+edx*4+8]
	mov	DWORD PTR _levState$[ebp+4], eax
; Line 2132
	cmp	DWORD PTR _start$[ebp], 0
	jne	SHORT $LN45@resolveImp
	mov	eax, DWORD PTR _pBiDi$[ebp]
	cmp	DWORD PTR [eax+104], 0
	jle	SHORT $LN45@resolveImp
; Line 2133
	mov	eax, DWORD PTR _pBiDi$[ebp]
	push	eax
	call	_lastL_R_AL
	add	esp, 4
	mov	BYTE PTR _lastStrong$9895[ebp], al
; Line 2134
	movzx	eax, BYTE PTR _lastStrong$9895[ebp]
	cmp	eax, 4
	je	SHORT $LN45@resolveImp
; Line 2135
	mov	al, BYTE PTR _lastStrong$9895[ebp]
	mov	BYTE PTR _sor$[ebp], al
$LN45@resolveImp:
; Line 2141
	mov	eax, DWORD PTR _dirProps$[ebp]
	add	eax, DWORD PTR _start$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 22					; 00000016H
	jne	$LN43@resolveImp
	mov	eax, DWORD PTR _pBiDi$[ebp]
	cmp	DWORD PTR [eax+244], 0
	jl	$LN43@resolveImp
; Line 2142
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+244]
	shl	ecx, 4
	mov	edx, DWORD PTR _pBiDi$[ebp]
	mov	eax, DWORD PTR [edx+248]
	mov	ecx, DWORD PTR [ecx+eax]
	mov	DWORD PTR _levState$[ebp+8], ecx
; Line 2143
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+244]
	shl	ecx, 4
	mov	edx, DWORD PTR _pBiDi$[ebp]
	mov	eax, DWORD PTR [edx+248]
	mov	ecx, DWORD PTR [eax+ecx+4]
	mov	DWORD PTR _start1$[ebp], ecx
; Line 2144
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+244]
	shl	ecx, 4
	mov	edx, DWORD PTR _pBiDi$[ebp]
	mov	eax, DWORD PTR [edx+248]
	mov	cx, WORD PTR [eax+ecx+12]
	mov	WORD PTR _stateImp$[ebp], cx
; Line 2145
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+244]
	shl	ecx, 4
	mov	edx, DWORD PTR _pBiDi$[ebp]
	mov	eax, DWORD PTR [edx+248]
	mov	ecx, DWORD PTR [eax+ecx+8]
	mov	DWORD PTR _levState$[ebp+20], ecx
; Line 2146
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+244]
	sub	ecx, 1
	mov	edx, DWORD PTR _pBiDi$[ebp]
	mov	DWORD PTR [edx+244], ecx
; Line 2147
	jmp	SHORT $LN42@resolveImp
$LN43@resolveImp:
; Line 2148
	mov	DWORD PTR _levState$[ebp+8], -1
; Line 2149
	mov	eax, DWORD PTR _start$[ebp]
	mov	DWORD PTR _start1$[ebp], eax
; Line 2150
	mov	eax, DWORD PTR _dirProps$[ebp]
	add	eax, DWORD PTR _start$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 17					; 00000011H
	jne	SHORT $LN41@resolveImp
; Line 2151
	movzx	eax, BYTE PTR _sor$[ebp]
	add	eax, 1
	mov	WORD PTR _stateImp$[ebp], ax
; Line 2152
	jmp	SHORT $LN40@resolveImp
$LN41@resolveImp:
; Line 2153
	xor	eax, eax
	mov	WORD PTR _stateImp$[ebp], ax
$LN40@resolveImp:
; Line 2154
	mov	DWORD PTR _levState$[ebp+20], 0
; Line 2155
	mov	eax, DWORD PTR _start$[ebp]
	push	eax
	mov	ecx, DWORD PTR _start$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _sor$[ebp]
	push	edx
	lea	eax, DWORD PTR _levState$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pBiDi$[ebp]
	push	ecx
	call	_processPropertySeq
	add	esp, 20					; 00000014H
$LN42@resolveImp:
; Line 2157
	mov	eax, DWORD PTR _start$[ebp]
	mov	DWORD PTR _start2$[ebp], eax
; Line 2159
	mov	eax, DWORD PTR _start$[ebp]
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN39@resolveImp
$LN38@resolveImp:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN39@resolveImp:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _limit$[ebp]
	jg	$LN37@resolveImp
; Line 2160
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _limit$[ebp]
	jl	SHORT $LN36@resolveImp
; Line 2162
	mov	eax, DWORD PTR _limit$[ebp]
	sub	eax, 1
	mov	DWORD PTR _k$9905[ebp], eax
	jmp	SHORT $LN35@resolveImp
$LN34@resolveImp:
	mov	eax, DWORD PTR _k$9905[ebp]
	sub	eax, 1
	mov	DWORD PTR _k$9905[ebp], eax
$LN35@resolveImp:
	mov	eax, DWORD PTR _k$9905[ebp]
	cmp	eax, DWORD PTR _start$[ebp]
	jle	SHORT $LN33@resolveImp
	mov	eax, DWORD PTR _dirProps$[ebp]
	add	eax, DWORD PTR _k$9905[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	edx, 1
	shl	edx, cl
	and	edx, 382976				; 0005d800H
	je	SHORT $LN33@resolveImp
	jmp	SHORT $LN34@resolveImp
$LN33@resolveImp:
; Line 2163
	mov	eax, DWORD PTR _dirProps$[ebp]
	add	eax, DWORD PTR _k$9905[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _dirProp$[ebp], cl
; Line 2164
	movzx	eax, BYTE PTR _dirProp$[ebp]
	cmp	eax, 20					; 00000014H
	je	SHORT $LN31@resolveImp
	movzx	eax, BYTE PTR _dirProp$[ebp]
	cmp	eax, 21					; 00000015H
	jne	SHORT $LN32@resolveImp
$LN31@resolveImp:
; Line 2165
	jmp	$LN37@resolveImp
$LN32@resolveImp:
; Line 2166
	mov	al, BYTE PTR _eor$[ebp]
	mov	BYTE PTR _gprop$[ebp], al
; Line 2167
	jmp	$LN30@resolveImp
$LN36@resolveImp:
; Line 2169
	mov	eax, DWORD PTR _dirProps$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _prop$9912[ebp], cl
; Line 2170
	movzx	eax, BYTE PTR _prop$9912[ebp]
	cmp	eax, 7
	jne	SHORT $LN29@resolveImp
; Line 2171
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	DWORD PTR [eax+244], -1
$LN29@resolveImp:
; Line 2173
	movsx	eax, BYTE PTR _inverseRTL$[ebp]
	test	eax, eax
	je	$LN28@resolveImp
; Line 2174
	movzx	eax, BYTE PTR _prop$9912[ebp]
	cmp	eax, 13					; 0000000dH
	jne	SHORT $LN27@resolveImp
; Line 2176
	mov	BYTE PTR _prop$9912[ebp], 1
	jmp	$LN28@resolveImp
$LN27@resolveImp:
; Line 2177
	movzx	eax, BYTE PTR _prop$9912[ebp]
	cmp	eax, 2
	jne	$LN28@resolveImp
; Line 2178
	mov	eax, DWORD PTR _nextStrongPos$[ebp]
	cmp	eax, DWORD PTR _i$[ebp]
	jg	$LN24@resolveImp
; Line 2181
	mov	BYTE PTR _nextStrongProp$[ebp], 1
; Line 2182
	mov	eax, DWORD PTR _limit$[ebp]
	mov	DWORD PTR _nextStrongPos$[ebp], eax
; Line 2183
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$9920[ebp], eax
	jmp	SHORT $LN23@resolveImp
$LN22@resolveImp:
	mov	eax, DWORD PTR _j$9920[ebp]
	add	eax, 1
	mov	DWORD PTR _j$9920[ebp], eax
$LN23@resolveImp:
	mov	eax, DWORD PTR _j$9920[ebp]
	cmp	eax, DWORD PTR _limit$[ebp]
	jge	SHORT $LN24@resolveImp
; Line 2184
	mov	eax, DWORD PTR _dirProps$[ebp]
	add	eax, DWORD PTR _j$9920[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _prop1$9913[ebp], cl
; Line 2185
	movzx	eax, BYTE PTR _prop1$9913[ebp]
	test	eax, eax
	je	SHORT $LN19@resolveImp
	movzx	eax, BYTE PTR _prop1$9913[ebp]
	cmp	eax, 1
	je	SHORT $LN19@resolveImp
	movzx	eax, BYTE PTR _prop1$9913[ebp]
	cmp	eax, 13					; 0000000dH
	jne	SHORT $LN20@resolveImp
$LN19@resolveImp:
; Line 2186
	mov	al, BYTE PTR _prop1$9913[ebp]
	mov	BYTE PTR _nextStrongProp$[ebp], al
; Line 2187
	mov	eax, DWORD PTR _j$9920[ebp]
	mov	DWORD PTR _nextStrongPos$[ebp], eax
; Line 2188
	jmp	SHORT $LN24@resolveImp
$LN20@resolveImp:
; Line 2190
	jmp	SHORT $LN22@resolveImp
$LN24@resolveImp:
; Line 2192
	movzx	eax, BYTE PTR _nextStrongProp$[ebp]
	cmp	eax, 13					; 0000000dH
	jne	SHORT $LN28@resolveImp
; Line 2193
	mov	BYTE PTR _prop$9912[ebp], 5
$LN28@resolveImp:
; Line 2197
	movzx	eax, BYTE PTR _prop$9912[ebp]
	mov	cl, BYTE PTR _groupProp[eax]
	mov	BYTE PTR _gprop$[ebp], cl
$LN30@resolveImp:
; Line 2199
	mov	ax, WORD PTR _stateImp$[ebp]
	mov	WORD PTR _oldStateImp$[ebp], ax
; Line 2200
	movzx	eax, WORD PTR _oldStateImp$[ebp]
	shl	eax, 4
	movzx	ecx, BYTE PTR _gprop$[ebp]
	mov	dl, BYTE PTR _impTabProps[eax+ecx]
	mov	BYTE PTR _cell$[ebp], dl
; Line 2201
	movzx	eax, BYTE PTR _cell$[ebp]
	and	eax, 31					; 0000001fH
	mov	WORD PTR _stateImp$[ebp], ax
; Line 2202
	movzx	eax, BYTE PTR _cell$[ebp]
	sar	eax, 5
	mov	WORD PTR _actionImp$[ebp], ax
; Line 2203
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _limit$[ebp]
	jne	SHORT $LN17@resolveImp
	movzx	eax, WORD PTR _actionImp$[ebp]
	test	eax, eax
	jne	SHORT $LN17@resolveImp
; Line 2205
	mov	eax, 1
	mov	WORD PTR _actionImp$[ebp], ax
$LN17@resolveImp:
; Line 2207
	movzx	eax, WORD PTR _actionImp$[ebp]
	test	eax, eax
	je	$LN16@resolveImp
; Line 2208
	movzx	eax, WORD PTR _oldStateImp$[ebp]
	shl	eax, 4
	mov	cl, BYTE PTR _impTabProps[eax+15]
	mov	BYTE PTR _resProp$[ebp], cl
; Line 2209
	movzx	eax, WORD PTR _actionImp$[ebp]
	mov	DWORD PTR tv274[ebp], eax
	mov	ecx, DWORD PTR tv274[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv274[ebp], ecx
	cmp	DWORD PTR tv274[ebp], 3
	ja	$LN9@resolveImp
	mov	edx, DWORD PTR tv274[ebp]
	jmp	DWORD PTR $LN57@resolveImp[edx*4]
$LN13@resolveImp:
; Line 2211
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _start1$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _resProp$[ebp]
	push	edx
	lea	eax, DWORD PTR _levState$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pBiDi$[ebp]
	push	ecx
	call	_processPropertySeq
	add	esp, 20					; 00000014H
; Line 2212
	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR _start1$[ebp], eax
; Line 2213
	jmp	$LN16@resolveImp
$LN12@resolveImp:
; Line 2215
	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR _start2$[ebp], eax
; Line 2216
	jmp	$LN16@resolveImp
$LN11@resolveImp:
; Line 2218
	mov	eax, DWORD PTR _start2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _start1$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _resProp$[ebp]
	push	edx
	lea	eax, DWORD PTR _levState$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pBiDi$[ebp]
	push	ecx
	call	_processPropertySeq
	add	esp, 20					; 00000014H
; Line 2219
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _start2$[ebp]
	push	ecx
	push	4
	lea	edx, DWORD PTR _levState$[ebp]
	push	edx
	mov	eax, DWORD PTR _pBiDi$[ebp]
	push	eax
	call	_processPropertySeq
	add	esp, 20					; 00000014H
; Line 2220
	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR _start1$[ebp], eax
; Line 2221
	jmp	SHORT $LN16@resolveImp
$LN10@resolveImp:
; Line 2223
	mov	eax, DWORD PTR _start2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _start1$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _resProp$[ebp]
	push	edx
	lea	eax, DWORD PTR _levState$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pBiDi$[ebp]
	push	ecx
	call	_processPropertySeq
	add	esp, 20					; 00000014H
; Line 2224
	mov	eax, DWORD PTR _start2$[ebp]
	mov	DWORD PTR _start1$[ebp], eax
; Line 2225
	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR _start2$[ebp], eax
; Line 2226
	jmp	SHORT $LN16@resolveImp
$LN9@resolveImp:
; Line 2228
	xor	eax, eax
	jne	SHORT $LN16@resolveImp
	mov	ecx, DWORD PTR ?__LINE__Var@?1??resolveImplicitLevels@@9@9@80f45a25
	add	ecx, 126				; 0000007eH
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_1FE@CHIMDBDO@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@
	push	OFFSET ??_C@_13COJANIEC@?$AA0?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN16@resolveImp:
; Line 2232
	jmp	$LN38@resolveImp
$LN37@resolveImp:
; Line 2235
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR _limit$[ebp]
	cmp	ecx, DWORD PTR [eax+16]
	jne	SHORT $LN8@resolveImp
	mov	eax, DWORD PTR _pBiDi$[ebp]
	cmp	DWORD PTR [eax+112], 0
	jle	SHORT $LN8@resolveImp
; Line 2236
	mov	eax, DWORD PTR _pBiDi$[ebp]
	push	eax
	call	_firstL_R_AL_EN_AN
	add	esp, 4
	mov	BYTE PTR _firstStrong$9941[ebp], al
; Line 2237
	movzx	eax, BYTE PTR _firstStrong$9941[ebp]
	cmp	eax, 4
	je	SHORT $LN8@resolveImp
; Line 2238
	mov	al, BYTE PTR _firstStrong$9941[ebp]
	mov	BYTE PTR _eor$[ebp], al
$LN8@resolveImp:
; Line 2243
	mov	eax, DWORD PTR _limit$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN6@resolveImp
$LN5@resolveImp:
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN6@resolveImp:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _start$[ebp]
	jle	SHORT $LN4@resolveImp
	mov	eax, DWORD PTR _dirProps$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	edx, 1
	shl	edx, cl
	and	edx, 382976				; 0005d800H
	je	SHORT $LN4@resolveImp
	jmp	SHORT $LN5@resolveImp
$LN4@resolveImp:
; Line 2244
	mov	eax, DWORD PTR _dirProps$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _dirProp$[ebp], cl
; Line 2245
	movzx	eax, BYTE PTR _dirProp$[ebp]
	cmp	eax, 20					; 00000014H
	je	SHORT $LN2@resolveImp
	movzx	eax, BYTE PTR _dirProp$[ebp]
	cmp	eax, 21					; 00000015H
	jne	$LN3@resolveImp
$LN2@resolveImp:
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR _limit$[ebp]
	cmp	ecx, DWORD PTR [eax+16]
	jge	$LN3@resolveImp
; Line 2246
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+244]
	add	ecx, 1
	mov	edx, DWORD PTR _pBiDi$[ebp]
	mov	DWORD PTR [edx+244], ecx
; Line 2247
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+244]
	shl	ecx, 4
	mov	edx, DWORD PTR _pBiDi$[ebp]
	mov	eax, DWORD PTR [edx+248]
	mov	dx, WORD PTR _stateImp$[ebp]
	mov	WORD PTR [eax+ecx+12], dx
; Line 2248
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+244]
	shl	ecx, 4
	mov	edx, DWORD PTR _pBiDi$[ebp]
	mov	eax, DWORD PTR [edx+248]
	mov	edx, DWORD PTR _levState$[ebp+20]
	mov	DWORD PTR [eax+ecx+8], edx
; Line 2249
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+244]
	shl	ecx, 4
	mov	edx, DWORD PTR _pBiDi$[ebp]
	mov	eax, DWORD PTR [edx+248]
	mov	edx, DWORD PTR _start1$[ebp]
	mov	DWORD PTR [eax+ecx+4], edx
; Line 2250
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+244]
	shl	ecx, 4
	mov	edx, DWORD PTR _pBiDi$[ebp]
	mov	eax, DWORD PTR [edx+248]
	mov	edx, DWORD PTR _levState$[ebp+8]
	mov	DWORD PTR [ecx+eax], edx
; Line 2252
	jmp	SHORT $LN46@resolveImp
$LN3@resolveImp:
; Line 2253
	mov	eax, DWORD PTR _limit$[ebp]
	push	eax
	mov	ecx, DWORD PTR _limit$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _eor$[ebp]
	push	edx
	lea	eax, DWORD PTR _levState$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pBiDi$[ebp]
	push	ecx
	call	_processPropertySeq
	add	esp, 20					; 00000014H
$LN46@resolveImp:
; Line 2254
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN56@resolveImp
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 480				; 000001e0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN56@resolveImp:
	DD	1
	DD	$LN55@resolveImp
$LN55@resolveImp:
	DD	-60					; ffffffc4H
	DD	32					; 00000020H
	DD	$LN54@resolveImp
$LN54@resolveImp:
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	118					; 00000076H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	0
	npad	3
$LN57@resolveImp:
	DD	$LN13@resolveImp
	DD	$LN12@resolveImp
	DD	$LN11@resolveImp
	DD	$LN10@resolveImp
_resolveImplicitLevels ENDP
_TEXT	ENDS
PUBLIC	?__LINE__Var@?1??processPropertySeq@@9@9@80f45a25 ; `processPropertySeq'::`2'::__LINE__Var
;	COMDAT ?__LINE__Var@?1??processPropertySeq@@9@9@80f45a25
_DATA	SEGMENT
?__LINE__Var@?1??processPropertySeq@@9@9@80f45a25 DD 072bH ; `processPropertySeq'::`2'::__LINE__Var
; Function compile flags: /Odtp /RTCsu /ZI
_DATA	ENDS
;	COMDAT _processPropertySeq
_TEXT	SEGMENT
tv85 = -328						; size = 4
_k$ = -128						; size = 4
_start0$ = -116						; size = 4
_pInsertPoints$ = -104					; size = 4
_addLevel$ = -89					; size = 1
_level$ = -77						; size = 1
_levels$ = -68						; size = 4
_pImpAct$ = -56						; size = 4
_pImpTab$ = -44						; size = 4
_actionSeq$ = -29					; size = 1
_oldStateSeq$ = -17					; size = 1
_cell$ = -5						; size = 1
_pBiDi$ = 8						; size = 4
_pLevState$ = 12					; size = 4
__prop$ = 16						; size = 1
_start$ = 20						; size = 4
_limit$ = 24						; size = 4
_processPropertySeq PROC				; COMDAT
; Line 1835
	push	ebp
	mov	ebp, esp
	sub	esp, 328				; 00000148H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-328]
	mov	ecx, 82					; 00000052H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1837
	mov	eax, DWORD PTR _pLevState$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pImpTab$[ebp], ecx
; Line 1838
	mov	eax, DWORD PTR _pLevState$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _pImpAct$[ebp], ecx
; Line 1839
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+80]
	mov	DWORD PTR _levels$[ebp], ecx
; Line 1844
	mov	eax, DWORD PTR _start$[ebp]
	mov	DWORD PTR _start0$[ebp], eax
; Line 1845
	mov	eax, DWORD PTR _pLevState$[ebp]
	mov	cl, BYTE PTR [eax+20]
	mov	BYTE PTR _oldStateSeq$[ebp], cl
; Line 1846
	movzx	eax, BYTE PTR _oldStateSeq$[ebp]
	mov	ecx, DWORD PTR _pImpTab$[ebp]
	lea	edx, DWORD PTR [ecx+eax*8]
	movzx	eax, BYTE PTR __prop$[ebp]
	mov	cl, BYTE PTR [edx+eax]
	mov	BYTE PTR _cell$[ebp], cl
; Line 1847
	movzx	eax, BYTE PTR _cell$[ebp]
	and	eax, 15					; 0000000fH
	mov	ecx, DWORD PTR _pLevState$[ebp]
	mov	DWORD PTR [ecx+20], eax
; Line 1848
	movzx	eax, BYTE PTR _cell$[ebp]
	sar	eax, 4
	mov	ecx, DWORD PTR _pImpAct$[ebp]
	mov	dl, BYTE PTR [ecx+eax]
	mov	BYTE PTR _actionSeq$[ebp], dl
; Line 1849
	mov	eax, DWORD PTR _pLevState$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _pImpTab$[ebp]
	mov	al, BYTE PTR [edx+ecx*8+7]
	mov	BYTE PTR _addLevel$[ebp], al
; Line 1851
	movzx	eax, BYTE PTR _actionSeq$[ebp]
	test	eax, eax
	je	$LN61@processPro
; Line 1852
	movzx	eax, BYTE PTR _actionSeq$[ebp]
	mov	DWORD PTR tv85[ebp], eax
	mov	ecx, DWORD PTR tv85[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv85[ebp], ecx
	cmp	DWORD PTR tv85[ebp], 13			; 0000000dH
	ja	$LN8@processPro
	mov	edx, DWORD PTR tv85[ebp]
	jmp	DWORD PTR $LN65@processPro[edx*4]
$LN58@processPro:
; Line 1854
	mov	eax, DWORD PTR _pLevState$[ebp]
	mov	ecx, DWORD PTR _start0$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 1855
	jmp	$LN61@processPro
$LN57@processPro:
; Line 1858
	mov	eax, DWORD PTR _pLevState$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _start$[ebp], ecx
; Line 1859
	jmp	$LN61@processPro
$LN56@processPro:
; Line 1862
	mov	eax, DWORD PTR _pLevState$[ebp]
	movzx	ecx, BYTE PTR [eax+28]
	add	ecx, 1
	mov	BYTE PTR _level$[ebp], cl
; Line 1863
	movzx	eax, BYTE PTR _level$[ebp]
	push	eax
	mov	ecx, DWORD PTR _start0$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pLevState$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _pBiDi$[ebp]
	push	ecx
	call	_setLevelsOutsideIsolates
	add	esp, 16					; 00000010H
; Line 1864
	jmp	$LN61@processPro
$LN55@processPro:
; Line 1867
	mov	eax, DWORD PTR _pLevState$[ebp]
	movzx	ecx, BYTE PTR [eax+28]
	add	ecx, 2
	mov	BYTE PTR _level$[ebp], cl
; Line 1868
	movzx	eax, BYTE PTR _level$[ebp]
	push	eax
	mov	ecx, DWORD PTR _start0$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pLevState$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _pBiDi$[ebp]
	push	ecx
	call	_setLevelsOutsideIsolates
	add	esp, 16					; 00000010H
; Line 1869
	jmp	$LN61@processPro
$LN54@processPro:
; Line 1873
	mov	eax, DWORD PTR _pLevState$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jl	SHORT $LN53@processPro
; Line 1874
	push	1
	mov	eax, DWORD PTR _pLevState$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _pBiDi$[ebp]
	push	edx
	call	_addPoint
	add	esp, 12					; 0000000cH
$LN53@processPro:
; Line 1876
	mov	eax, DWORD PTR _pLevState$[ebp]
	mov	DWORD PTR [eax+12], -1
; Line 1878
	mov	eax, DWORD PTR _pBiDi$[ebp]
	add	eax, 332				; 0000014cH
	mov	DWORD PTR _pInsertPoints$[ebp], eax
; Line 1880
	mov	eax, DWORD PTR _pInsertPoints$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN51@processPro
	mov	eax, DWORD PTR _pInsertPoints$[ebp]
	mov	ecx, DWORD PTR _pInsertPoints$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+8]
	jg	SHORT $LN52@processPro
$LN51@processPro:
; Line 1883
	mov	eax, DWORD PTR _pLevState$[ebp]
	mov	DWORD PTR [eax+16], -1
; Line 1885
	movzx	eax, BYTE PTR _oldStateSeq$[ebp]
	mov	ecx, DWORD PTR _pImpTab$[ebp]
	mov	dl, BYTE PTR [ecx+eax*8+7]
	mov	BYTE PTR _level$[ebp], dl
; Line 1886
	movzx	eax, BYTE PTR _level$[ebp]
	and	eax, 1
	je	SHORT $LN50@processPro
	mov	eax, DWORD PTR _pLevState$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jle	SHORT $LN50@processPro
; Line 1887
	mov	eax, DWORD PTR _pLevState$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _start$[ebp], ecx
$LN50@processPro:
; Line 1889
	movzx	eax, BYTE PTR __prop$[ebp]
	cmp	eax, 5
	jne	SHORT $LN49@processPro
; Line 1891
	push	1
	mov	eax, DWORD PTR _start0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pBiDi$[ebp]
	push	ecx
	call	_addPoint
	add	esp, 12					; 0000000cH
; Line 1892
	mov	eax, DWORD PTR _pInsertPoints$[ebp]
	mov	ecx, DWORD PTR _pInsertPoints$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+8], edx
$LN49@processPro:
; Line 1894
	jmp	$LN61@processPro
$LN52@processPro:
; Line 1897
	mov	eax, DWORD PTR _pLevState$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	add	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx
	jmp	SHORT $LN48@processPro
$LN47@processPro:
	mov	eax, DWORD PTR _k$[ebp]
	add	eax, 1
	mov	DWORD PTR _k$[ebp], eax
$LN48@processPro:
	mov	eax, DWORD PTR _k$[ebp]
	cmp	eax, DWORD PTR _start0$[ebp]
	jge	SHORT $LN46@processPro
; Line 1900
	mov	eax, DWORD PTR _levels$[ebp]
	add	eax, DWORD PTR _k$[ebp]
	movzx	ecx, BYTE PTR [eax]
	sub	ecx, 2
	and	ecx, -2					; fffffffeH
	mov	edx, DWORD PTR _levels$[ebp]
	add	edx, DWORD PTR _k$[ebp]
	mov	BYTE PTR [edx], cl
; Line 1901
	jmp	SHORT $LN47@processPro
$LN46@processPro:
; Line 1903
	mov	eax, DWORD PTR _pInsertPoints$[ebp]
	mov	ecx, DWORD PTR _pInsertPoints$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+8], edx
; Line 1904
	mov	eax, DWORD PTR _pLevState$[ebp]
	mov	DWORD PTR [eax+16], -1
; Line 1905
	movzx	eax, BYTE PTR __prop$[ebp]
	cmp	eax, 5
	jne	SHORT $LN45@processPro
; Line 1907
	push	1
	mov	eax, DWORD PTR _start0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pBiDi$[ebp]
	push	ecx
	call	_addPoint
	add	esp, 12					; 0000000cH
; Line 1908
	mov	eax, DWORD PTR _pInsertPoints$[ebp]
	mov	ecx, DWORD PTR _pInsertPoints$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+8], edx
$LN45@processPro:
; Line 1910
	jmp	$LN61@processPro
$LN44@processPro:
; Line 1914
	mov	eax, DWORD PTR _pBiDi$[ebp]
	add	eax, 332				; 0000014cH
	mov	DWORD PTR _pInsertPoints$[ebp], eax
; Line 1915
	mov	eax, DWORD PTR _pInsertPoints$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN43@processPro
; Line 1917
	mov	eax, DWORD PTR _pInsertPoints$[ebp]
	mov	ecx, DWORD PTR _pInsertPoints$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+4], edx
$LN43@processPro:
; Line 1918
	mov	eax, DWORD PTR _pLevState$[ebp]
	mov	DWORD PTR [eax+8], -1
; Line 1919
	mov	eax, DWORD PTR _pLevState$[ebp]
	mov	DWORD PTR [eax+12], -1
; Line 1920
	mov	eax, DWORD PTR _limit$[ebp]
	sub	eax, 1
	mov	ecx, DWORD PTR _pLevState$[ebp]
	mov	DWORD PTR [ecx+16], eax
; Line 1921
	jmp	$LN61@processPro
$LN42@processPro:
; Line 1926
	movzx	eax, BYTE PTR __prop$[ebp]
	cmp	eax, 3
	jne	SHORT $LN41@processPro
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	mov	edx, DWORD PTR _start0$[ebp]
	movzx	eax, BYTE PTR [ecx+edx]
	cmp	eax, 5
	jne	SHORT $LN41@processPro
	mov	eax, DWORD PTR _pBiDi$[ebp]
	cmp	DWORD PTR [eax+88], 6
	je	SHORT $LN41@processPro
; Line 1929
	mov	eax, DWORD PTR _pLevState$[ebp]
	cmp	DWORD PTR [eax+12], -1
	jne	SHORT $LN40@processPro
; Line 1932
	mov	eax, DWORD PTR _limit$[ebp]
	sub	eax, 1
	mov	ecx, DWORD PTR _pLevState$[ebp]
	mov	DWORD PTR [ecx+16], eax
; Line 1933
	jmp	$LN61@processPro
$LN40@processPro:
; Line 1935
	mov	eax, DWORD PTR _pLevState$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jl	SHORT $LN39@processPro
; Line 1937
	push	1
	mov	eax, DWORD PTR _pLevState$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _pBiDi$[ebp]
	push	edx
	call	_addPoint
	add	esp, 12					; 0000000cH
; Line 1938
	mov	eax, DWORD PTR _pLevState$[ebp]
	mov	DWORD PTR [eax+12], -2			; fffffffeH
$LN39@processPro:
; Line 1941
	push	1
	mov	eax, DWORD PTR _start0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pBiDi$[ebp]
	push	ecx
	call	_addPoint
	add	esp, 12					; 0000000cH
; Line 1942
	jmp	$LN61@processPro
$LN41@processPro:
; Line 1945
	mov	eax, DWORD PTR _pLevState$[ebp]
	cmp	DWORD PTR [eax+12], -1
	jne	SHORT $LN38@processPro
; Line 1946
	mov	eax, DWORD PTR _pLevState$[ebp]
	mov	ecx, DWORD PTR _start0$[ebp]
	mov	DWORD PTR [eax+12], ecx
$LN38@processPro:
; Line 1948
	jmp	$LN61@processPro
$LN37@processPro:
; Line 1951
	mov	eax, DWORD PTR _limit$[ebp]
	sub	eax, 1
	mov	ecx, DWORD PTR _pLevState$[ebp]
	mov	DWORD PTR [ecx+16], eax
; Line 1952
	mov	eax, DWORD PTR _pLevState$[ebp]
	mov	DWORD PTR [eax+8], -1
; Line 1953
	jmp	$LN61@processPro
$LN36@processPro:
; Line 1957
	mov	eax, DWORD PTR _start0$[ebp]
	sub	eax, 1
	mov	DWORD PTR _k$[ebp], eax
	jmp	SHORT $LN35@processPro
$LN34@processPro:
	mov	eax, DWORD PTR _k$[ebp]
	sub	eax, 1
	mov	DWORD PTR _k$[ebp], eax
$LN35@processPro:
	cmp	DWORD PTR _k$[ebp], 0
	jl	SHORT $LN33@processPro
	mov	eax, DWORD PTR _levels$[ebp]
	add	eax, DWORD PTR _k$[ebp]
	movzx	ecx, BYTE PTR [eax]
	and	ecx, 1
	jne	SHORT $LN33@processPro
	jmp	SHORT $LN34@processPro
$LN33@processPro:
; Line 1958
	cmp	DWORD PTR _k$[ebp], 0
	jl	SHORT $LN32@processPro
; Line 1959
	push	4
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pBiDi$[ebp]
	push	ecx
	call	_addPoint
	add	esp, 12					; 0000000cH
; Line 1960
	mov	eax, DWORD PTR _pBiDi$[ebp]
	add	eax, 332				; 0000014cH
	mov	DWORD PTR _pInsertPoints$[ebp], eax
; Line 1961
	mov	eax, DWORD PTR _pInsertPoints$[ebp]
	mov	ecx, DWORD PTR _pInsertPoints$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+8], edx
$LN32@processPro:
; Line 1963
	mov	eax, DWORD PTR _pLevState$[ebp]
	mov	ecx, DWORD PTR _start0$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 1964
	jmp	$LN61@processPro
$LN31@processPro:
; Line 1969
	push	1
	mov	eax, DWORD PTR _start0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pBiDi$[ebp]
	push	ecx
	call	_addPoint
	add	esp, 12					; 0000000cH
; Line 1970
	push	2
	mov	eax, DWORD PTR _start0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pBiDi$[ebp]
	push	ecx
	call	_addPoint
	add	esp, 12					; 0000000cH
; Line 1971
	jmp	$LN61@processPro
$LN30@processPro:
; Line 1975
	mov	eax, DWORD PTR _pBiDi$[ebp]
	add	eax, 332				; 0000014cH
	mov	DWORD PTR _pInsertPoints$[ebp], eax
; Line 1976
	mov	eax, DWORD PTR _pInsertPoints$[ebp]
	mov	ecx, DWORD PTR _pInsertPoints$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+4], edx
; Line 1977
	movzx	eax, BYTE PTR __prop$[ebp]
	cmp	eax, 5
	jne	SHORT $LN29@processPro
; Line 1979
	push	4
	mov	eax, DWORD PTR _start0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pBiDi$[ebp]
	push	ecx
	call	_addPoint
	add	esp, 12					; 0000000cH
; Line 1980
	mov	eax, DWORD PTR _pInsertPoints$[ebp]
	mov	ecx, DWORD PTR _pInsertPoints$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+8], edx
$LN29@processPro:
; Line 1982
	jmp	$LN61@processPro
$LN28@processPro:
; Line 1985
	mov	eax, DWORD PTR _pLevState$[ebp]
	movzx	ecx, BYTE PTR [eax+28]
	movzx	edx, BYTE PTR _addLevel$[ebp]
	add	ecx, edx
	mov	BYTE PTR _level$[ebp], cl
; Line 1986
	mov	eax, DWORD PTR _pLevState$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _k$[ebp], ecx
	jmp	SHORT $LN27@processPro
$LN26@processPro:
	mov	eax, DWORD PTR _k$[ebp]
	add	eax, 1
	mov	DWORD PTR _k$[ebp], eax
$LN27@processPro:
	mov	eax, DWORD PTR _k$[ebp]
	cmp	eax, DWORD PTR _start0$[ebp]
	jge	SHORT $LN25@processPro
; Line 1987
	mov	eax, DWORD PTR _levels$[ebp]
	add	eax, DWORD PTR _k$[ebp]
	movzx	ecx, BYTE PTR [eax]
	movzx	edx, BYTE PTR _level$[ebp]
	cmp	ecx, edx
	jge	SHORT $LN24@processPro
; Line 1988
	mov	eax, DWORD PTR _levels$[ebp]
	add	eax, DWORD PTR _k$[ebp]
	mov	cl, BYTE PTR _level$[ebp]
	mov	BYTE PTR [eax], cl
$LN24@processPro:
; Line 1989
	jmp	SHORT $LN26@processPro
$LN25@processPro:
; Line 1990
	mov	eax, DWORD PTR _pBiDi$[ebp]
	add	eax, 332				; 0000014cH
	mov	DWORD PTR _pInsertPoints$[ebp], eax
; Line 1991
	mov	eax, DWORD PTR _pInsertPoints$[ebp]
	mov	ecx, DWORD PTR _pInsertPoints$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+8], edx
; Line 1992
	mov	eax, DWORD PTR _pLevState$[ebp]
	mov	ecx, DWORD PTR _start0$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 1993
	jmp	$LN61@processPro
$LN23@processPro:
; Line 1996
	mov	eax, DWORD PTR _pLevState$[ebp]
	mov	cl, BYTE PTR [eax+28]
	mov	BYTE PTR _level$[ebp], cl
; Line 1997
	mov	eax, DWORD PTR _start0$[ebp]
	sub	eax, 1
	mov	DWORD PTR _k$[ebp], eax
	jmp	SHORT $LN22@processPro
$LN21@processPro:
	mov	eax, DWORD PTR _k$[ebp]
	sub	eax, 1
	mov	DWORD PTR _k$[ebp], eax
$LN22@processPro:
	mov	eax, DWORD PTR _pLevState$[ebp]
	mov	ecx, DWORD PTR _k$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jl	$LN20@processPro
; Line 1998
	mov	eax, DWORD PTR _levels$[ebp]
	add	eax, DWORD PTR _k$[ebp]
	movzx	ecx, BYTE PTR [eax]
	movzx	edx, BYTE PTR _level$[ebp]
	add	edx, 3
	cmp	ecx, edx
	jne	SHORT $LN19@processPro
$LN18@processPro:
; Line 1999
	mov	eax, DWORD PTR _levels$[ebp]
	add	eax, DWORD PTR _k$[ebp]
	movzx	ecx, BYTE PTR [eax]
	movzx	edx, BYTE PTR _level$[ebp]
	add	edx, 3
	cmp	ecx, edx
	jne	SHORT $LN16@processPro
; Line 2000
	mov	eax, DWORD PTR _levels$[ebp]
	add	eax, DWORD PTR _k$[ebp]
	movzx	ecx, BYTE PTR [eax]
	sub	ecx, 2
	mov	edx, DWORD PTR _levels$[ebp]
	add	edx, DWORD PTR _k$[ebp]
	mov	BYTE PTR [edx], cl
	mov	eax, DWORD PTR _k$[ebp]
	sub	eax, 1
	mov	DWORD PTR _k$[ebp], eax
; Line 2001
	jmp	SHORT $LN18@processPro
$LN16@processPro:
; Line 2002
	mov	eax, DWORD PTR _levels$[ebp]
	add	eax, DWORD PTR _k$[ebp]
	movzx	ecx, BYTE PTR [eax]
	movzx	edx, BYTE PTR _level$[ebp]
	cmp	ecx, edx
	jne	SHORT $LN19@processPro
; Line 2003
	mov	eax, DWORD PTR _k$[ebp]
	sub	eax, 1
	mov	DWORD PTR _k$[ebp], eax
; Line 2004
	jmp	SHORT $LN16@processPro
$LN19@processPro:
; Line 2006
	mov	eax, DWORD PTR _levels$[ebp]
	add	eax, DWORD PTR _k$[ebp]
	movzx	ecx, BYTE PTR [eax]
	movzx	edx, BYTE PTR _level$[ebp]
	add	edx, 2
	cmp	ecx, edx
	jne	SHORT $LN14@processPro
; Line 2007
	mov	eax, DWORD PTR _levels$[ebp]
	add	eax, DWORD PTR _k$[ebp]
	mov	cl, BYTE PTR _level$[ebp]
	mov	BYTE PTR [eax], cl
; Line 2008
	jmp	$LN21@processPro
$LN14@processPro:
; Line 2010
	movzx	eax, BYTE PTR _level$[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _levels$[ebp]
	add	ecx, DWORD PTR _k$[ebp]
	mov	BYTE PTR [ecx], al
; Line 2011
	jmp	$LN21@processPro
$LN20@processPro:
; Line 2012
	jmp	$LN61@processPro
$LN13@processPro:
; Line 2015
	mov	eax, DWORD PTR _pLevState$[ebp]
	movzx	ecx, BYTE PTR [eax+28]
	add	ecx, 1
	mov	BYTE PTR _level$[ebp], cl
; Line 2016
	mov	eax, DWORD PTR _start0$[ebp]
	sub	eax, 1
	mov	DWORD PTR _k$[ebp], eax
	jmp	SHORT $LN12@processPro
$LN11@processPro:
	mov	eax, DWORD PTR _k$[ebp]
	sub	eax, 1
	mov	DWORD PTR _k$[ebp], eax
$LN12@processPro:
	mov	eax, DWORD PTR _pLevState$[ebp]
	mov	ecx, DWORD PTR _k$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jl	SHORT $LN10@processPro
; Line 2017
	mov	eax, DWORD PTR _levels$[ebp]
	add	eax, DWORD PTR _k$[ebp]
	movzx	ecx, BYTE PTR [eax]
	movzx	edx, BYTE PTR _level$[ebp]
	cmp	ecx, edx
	jle	SHORT $LN9@processPro
; Line 2018
	mov	eax, DWORD PTR _levels$[ebp]
	add	eax, DWORD PTR _k$[ebp]
	movzx	ecx, BYTE PTR [eax]
	sub	ecx, 2
	mov	edx, DWORD PTR _levels$[ebp]
	add	edx, DWORD PTR _k$[ebp]
	mov	BYTE PTR [edx], cl
$LN9@processPro:
; Line 2020
	jmp	SHORT $LN11@processPro
$LN10@processPro:
; Line 2021
	jmp	SHORT $LN61@processPro
$LN8@processPro:
; Line 2024
	xor	eax, eax
	jne	SHORT $LN61@processPro
	mov	ecx, DWORD PTR ?__LINE__Var@?1??processPropertySeq@@9@9@80f45a25
	add	ecx, 189				; 000000bdH
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_1FE@CHIMDBDO@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@
	push	OFFSET ??_C@_13COJANIEC@?$AA0?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN61@processPro:
; Line 2028
	movzx	eax, BYTE PTR _addLevel$[ebp]
	test	eax, eax
	jne	SHORT $LN6@processPro
	mov	eax, DWORD PTR _start$[ebp]
	cmp	eax, DWORD PTR _start0$[ebp]
	jge	SHORT $LN62@processPro
$LN6@processPro:
; Line 2029
	mov	eax, DWORD PTR _pLevState$[ebp]
	movzx	ecx, BYTE PTR [eax+28]
	movzx	edx, BYTE PTR _addLevel$[ebp]
	add	ecx, edx
	mov	BYTE PTR _level$[ebp], cl
; Line 2030
	mov	eax, DWORD PTR _pLevState$[ebp]
	mov	ecx, DWORD PTR _start$[ebp]
	cmp	ecx, DWORD PTR [eax+24]
	jl	SHORT $LN5@processPro
; Line 2031
	mov	eax, DWORD PTR _start$[ebp]
	mov	DWORD PTR _k$[ebp], eax
	jmp	SHORT $LN4@processPro
$LN3@processPro:
	mov	eax, DWORD PTR _k$[ebp]
	add	eax, 1
	mov	DWORD PTR _k$[ebp], eax
$LN4@processPro:
	mov	eax, DWORD PTR _k$[ebp]
	cmp	eax, DWORD PTR _limit$[ebp]
	jge	SHORT $LN2@processPro
; Line 2032
	mov	eax, DWORD PTR _levels$[ebp]
	add	eax, DWORD PTR _k$[ebp]
	mov	cl, BYTE PTR _level$[ebp]
	mov	BYTE PTR [eax], cl
; Line 2033
	jmp	SHORT $LN3@processPro
$LN2@processPro:
; Line 2034
	jmp	SHORT $LN62@processPro
$LN5@processPro:
; Line 2035
	movzx	eax, BYTE PTR _level$[ebp]
	push	eax
	mov	ecx, DWORD PTR _limit$[ebp]
	push	ecx
	mov	edx, DWORD PTR _start$[ebp]
	push	edx
	mov	eax, DWORD PTR _pBiDi$[ebp]
	push	eax
	call	_setLevelsOutsideIsolates
	add	esp, 16					; 00000010H
$LN62@processPro:
; Line 2038
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 328				; 00000148H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN65@processPro:
	DD	$LN58@processPro
	DD	$LN57@processPro
	DD	$LN56@processPro
	DD	$LN55@processPro
	DD	$LN54@processPro
	DD	$LN44@processPro
	DD	$LN42@processPro
	DD	$LN37@processPro
	DD	$LN36@processPro
	DD	$LN31@processPro
	DD	$LN30@processPro
	DD	$LN28@processPro
	DD	$LN23@processPro
	DD	$LN13@processPro
_processPropertySeq ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _setLevelsOutsideIsolates
_TEXT	SEGMENT
_k$ = -56						; size = 4
_isolateCount$ = -44					; size = 4
_levels$ = -32						; size = 4
_dirProp$ = -17						; size = 1
_dirProps$ = -8						; size = 4
_pBiDi$ = 8						; size = 4
_start$ = 12						; size = 4
_limit$ = 16						; size = 4
_level$ = 20						; size = 1
_setLevelsOutsideIsolates PROC				; COMDAT
; Line 1803
	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1804
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	mov	DWORD PTR _dirProps$[ebp], ecx
; Line 1805
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+80]
	mov	DWORD PTR _levels$[ebp], ecx
; Line 1806
	mov	DWORD PTR _isolateCount$[ebp], 0
; Line 1807
	mov	eax, DWORD PTR _start$[ebp]
	mov	DWORD PTR _k$[ebp], eax
	jmp	SHORT $LN7@setLevelsO
$LN6@setLevelsO:
	mov	eax, DWORD PTR _k$[ebp]
	add	eax, 1
	mov	DWORD PTR _k$[ebp], eax
$LN7@setLevelsO:
	mov	eax, DWORD PTR _k$[ebp]
	cmp	eax, DWORD PTR _limit$[ebp]
	jge	SHORT $LN8@setLevelsO
; Line 1808
	mov	eax, DWORD PTR _dirProps$[ebp]
	add	eax, DWORD PTR _k$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _dirProp$[ebp], cl
; Line 1809
	movzx	eax, BYTE PTR _dirProp$[ebp]
	cmp	eax, 22					; 00000016H
	jne	SHORT $LN4@setLevelsO
; Line 1810
	mov	eax, DWORD PTR _isolateCount$[ebp]
	sub	eax, 1
	mov	DWORD PTR _isolateCount$[ebp], eax
$LN4@setLevelsO:
; Line 1811
	cmp	DWORD PTR _isolateCount$[ebp], 0
	jne	SHORT $LN3@setLevelsO
; Line 1812
	mov	eax, DWORD PTR _levels$[ebp]
	add	eax, DWORD PTR _k$[ebp]
	mov	cl, BYTE PTR _level$[ebp]
	mov	BYTE PTR [eax], cl
$LN3@setLevelsO:
; Line 1813
	movzx	eax, BYTE PTR _dirProp$[ebp]
	cmp	eax, 20					; 00000014H
	je	SHORT $LN1@setLevelsO
	movzx	eax, BYTE PTR _dirProp$[ebp]
	cmp	eax, 21					; 00000015H
	jne	SHORT $LN2@setLevelsO
$LN1@setLevelsO:
; Line 1814
	mov	eax, DWORD PTR _isolateCount$[ebp]
	add	eax, 1
	mov	DWORD PTR _isolateCount$[ebp], eax
$LN2@setLevelsO:
; Line 1815
	jmp	SHORT $LN6@setLevelsO
$LN8@setLevelsO:
; Line 1816
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_setLevelsOutsideIsolates ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _lastL_R_AL
_TEXT	SEGMENT
___c2$9831 = -68					; size = 2
_dirProp$ = -53						; size = 1
_uchar$ = -44						; size = 4
_i$ = -32						; size = 4
_length$ = -20						; size = 4
_text$ = -8						; size = 4
_pBiDi$ = 8						; size = 4
_lastL_R_AL PROC					; COMDAT
; Line 2045
	push	ebp
	mov	ebp, esp
	sub	esp, 264				; 00000108H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-264]
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2046
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+100]
	mov	DWORD PTR _text$[ebp], ecx
; Line 2047
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+104]
	mov	DWORD PTR _length$[ebp], ecx
; Line 2051
	mov	eax, DWORD PTR _length$[ebp]
	mov	DWORD PTR _i$[ebp], eax
$LN8@lastL_R_AL:
	cmp	DWORD PTR _i$[ebp], 0
	jle	$LN7@lastL_R_AL
; Line 2053
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _text$[ebp]
	movzx	eax, WORD PTR [edx+ecx*2]
	mov	DWORD PTR _uchar$[ebp], eax
	mov	eax, DWORD PTR _uchar$[ebp]
	and	eax, -1024				; fffffc00H
	cmp	eax, 56320				; 0000dc00H
	jne	SHORT $LN6@lastL_R_AL
	cmp	DWORD PTR _i$[ebp], 0
	jle	SHORT $LN6@lastL_R_AL
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _text$[ebp]
	mov	dx, WORD PTR [ecx+eax*2-2]
	mov	WORD PTR ___c2$9831[ebp], dx
	movzx	eax, WORD PTR ___c2$9831[ebp]
	and	eax, -1024				; fffffc00H
	cmp	eax, 55296				; 0000d800H
	jne	SHORT $LN6@lastL_R_AL
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	movzx	eax, WORD PTR ___c2$9831[ebp]
	shl	eax, 10					; 0000000aH
	mov	ecx, DWORD PTR _uchar$[ebp]
	lea	edx, DWORD PTR [eax+ecx-56613888]
	mov	DWORD PTR _uchar$[ebp], edx
$LN6@lastL_R_AL:
; Line 2054
	mov	eax, DWORD PTR _uchar$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pBiDi$[ebp]
	push	ecx
	call	_ubidi_getCustomizedClass_56
	add	esp, 8
	mov	BYTE PTR _dirProp$[ebp], al
; Line 2055
	movzx	eax, BYTE PTR _dirProp$[ebp]
	test	eax, eax
	jne	SHORT $LN4@lastL_R_AL
; Line 2056
	xor	al, al
	jmp	SHORT $LN9@lastL_R_AL
$LN4@lastL_R_AL:
; Line 2058
	movzx	eax, BYTE PTR _dirProp$[ebp]
	cmp	eax, 1
	je	SHORT $LN2@lastL_R_AL
	movzx	eax, BYTE PTR _dirProp$[ebp]
	cmp	eax, 13					; 0000000dH
	jne	SHORT $LN3@lastL_R_AL
$LN2@lastL_R_AL:
; Line 2059
	mov	al, 1
	jmp	SHORT $LN9@lastL_R_AL
$LN3@lastL_R_AL:
; Line 2061
	movzx	eax, BYTE PTR _dirProp$[ebp]
	cmp	eax, 7
	jne	SHORT $LN1@lastL_R_AL
; Line 2062
	mov	al, 4
	jmp	SHORT $LN9@lastL_R_AL
$LN1@lastL_R_AL:
; Line 2064
	jmp	$LN8@lastL_R_AL
$LN7@lastL_R_AL:
; Line 2065
	mov	al, 4
$LN9@lastL_R_AL:
; Line 2066
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 264				; 00000108H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_lastL_R_AL ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _firstL_R_AL_EN_AN
_TEXT	SEGMENT
___c2$9853 = -68					; size = 2
_dirProp$ = -53						; size = 1
_uchar$ = -44						; size = 4
_i$ = -32						; size = 4
_length$ = -20						; size = 4
_text$ = -8						; size = 4
_pBiDi$ = 8						; size = 4
_firstL_R_AL_EN_AN PROC					; COMDAT
; Line 2073
	push	ebp
	mov	ebp, esp
	sub	esp, 264				; 00000108H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-264]
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2074
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	mov	DWORD PTR _text$[ebp], ecx
; Line 2075
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+112]
	mov	DWORD PTR _length$[ebp], ecx
; Line 2079
	mov	DWORD PTR _i$[ebp], 0
$LN9@firstL_R_A@2:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _length$[ebp]
	jge	$LN8@firstL_R_A@2
; Line 2081
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _text$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	mov	DWORD PTR _uchar$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	eax, DWORD PTR _uchar$[ebp]
	and	eax, -1024				; fffffc00H
	cmp	eax, 55296				; 0000d800H
	jne	SHORT $LN7@firstL_R_A@2
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _length$[ebp]
	je	SHORT $LN7@firstL_R_A@2
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _text$[ebp]
	mov	dx, WORD PTR [ecx+eax*2]
	mov	WORD PTR ___c2$9853[ebp], dx
	movzx	eax, WORD PTR ___c2$9853[ebp]
	and	eax, -1024				; fffffc00H
	cmp	eax, 56320				; 0000dc00H
	jne	SHORT $LN7@firstL_R_A@2
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	eax, DWORD PTR _uchar$[ebp]
	shl	eax, 10					; 0000000aH
	movzx	ecx, WORD PTR ___c2$9853[ebp]
	lea	edx, DWORD PTR [eax+ecx-56613888]
	mov	DWORD PTR _uchar$[ebp], edx
$LN7@firstL_R_A@2:
; Line 2082
	mov	eax, DWORD PTR _uchar$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pBiDi$[ebp]
	push	ecx
	call	_ubidi_getCustomizedClass_56
	add	esp, 8
	mov	BYTE PTR _dirProp$[ebp], al
; Line 2083
	movzx	eax, BYTE PTR _dirProp$[ebp]
	test	eax, eax
	jne	SHORT $LN5@firstL_R_A@2
; Line 2084
	xor	al, al
	jmp	SHORT $LN10@firstL_R_A@2
$LN5@firstL_R_A@2:
; Line 2086
	movzx	eax, BYTE PTR _dirProp$[ebp]
	cmp	eax, 1
	je	SHORT $LN3@firstL_R_A@2
	movzx	eax, BYTE PTR _dirProp$[ebp]
	cmp	eax, 13					; 0000000dH
	jne	SHORT $LN4@firstL_R_A@2
$LN3@firstL_R_A@2:
; Line 2087
	mov	al, 1
	jmp	SHORT $LN10@firstL_R_A@2
$LN4@firstL_R_A@2:
; Line 2089
	movzx	eax, BYTE PTR _dirProp$[ebp]
	cmp	eax, 2
	jne	SHORT $LN2@firstL_R_A@2
; Line 2090
	mov	al, 2
	jmp	SHORT $LN10@firstL_R_A@2
$LN2@firstL_R_A@2:
; Line 2092
	movzx	eax, BYTE PTR _dirProp$[ebp]
	cmp	eax, 5
	jne	SHORT $LN1@firstL_R_A@2
; Line 2093
	mov	al, 3
	jmp	SHORT $LN10@firstL_R_A@2
$LN1@firstL_R_A@2:
; Line 2095
	jmp	$LN9@firstL_R_A@2
$LN8@firstL_R_A@2:
; Line 2096
	mov	al, 4
$LN10@firstL_R_A@2:
; Line 2097
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 264				; 00000108H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_firstL_R_AL_EN_AN ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _adjustWSLevels
_TEXT	SEGMENT
tv161 = -256						; size = 4
tv129 = -256						; size = 4
_flag$9958 = -56					; size = 4
_orderParagraphsLTR$9957 = -41				; size = 1
_i$ = -32						; size = 4
_levels$ = -20						; size = 4
_dirProps$ = -8						; size = 4
_pBiDi$ = 8						; size = 4
_adjustWSLevels PROC					; COMDAT
; Line 2265
	push	ebp
	mov	ebp, esp
	sub	esp, 256				; 00000100H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-256]
	mov	ecx, 64					; 00000040H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2266
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	mov	DWORD PTR _dirProps$[ebp], ecx
; Line 2267
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+80]
	mov	DWORD PTR _levels$[ebp], ecx
; Line 2270
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+124]
	and	ecx, 8248192				; 007ddb80H
	je	$LN15@adjustWSLe
; Line 2271
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	cl, BYTE PTR [eax+96]
	mov	BYTE PTR _orderParagraphsLTR$9957[ebp], cl
; Line 2274
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+132]
	mov	DWORD PTR _i$[ebp], ecx
$LN13@adjustWSLe:
; Line 2275
	cmp	DWORD PTR _i$[ebp], 0
	jle	$LN15@adjustWSLe
$LN11@adjustWSLe:
; Line 2277
	cmp	DWORD PTR _i$[ebp], 0
	jle	$LN7@adjustWSLe
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _dirProps$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	movzx	ecx, BYTE PTR [ecx]
	mov	edx, 1
	shl	edx, cl
	mov	DWORD PTR _flag$9958[ebp], edx
	mov	eax, DWORD PTR _flag$9958[ebp]
	and	eax, 8248192				; 007ddb80H
	je	SHORT $LN7@adjustWSLe
; Line 2278
	movsx	eax, BYTE PTR _orderParagraphsLTR$9957[ebp]
	test	eax, eax
	je	SHORT $LN9@adjustWSLe
	mov	eax, DWORD PTR _flag$9958[ebp]
	and	eax, 128				; 00000080H
	je	SHORT $LN9@adjustWSLe
; Line 2279
	mov	eax, DWORD PTR _levels$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	mov	BYTE PTR [eax], 0
; Line 2280
	jmp	SHORT $LN8@adjustWSLe
$LN9@adjustWSLe:
; Line 2281
	mov	eax, DWORD PTR _pBiDi$[ebp]
	movzx	ecx, BYTE PTR [eax+98]
	test	ecx, ecx
	je	SHORT $LN17@adjustWSLe
	mov	edx, DWORD PTR _pBiDi$[ebp]
	mov	eax, DWORD PTR [edx+140]
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jl	SHORT $LN17@adjustWSLe
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	eax, DWORD PTR _pBiDi$[ebp]
	push	eax
	call	_ubidi_getParaLevelAtIndex_56
	add	esp, 8
	movzx	ecx, al
	mov	DWORD PTR tv129[ebp], ecx
	jmp	SHORT $LN18@adjustWSLe
$LN17@adjustWSLe:
	mov	edx, DWORD PTR _pBiDi$[ebp]
	movzx	eax, BYTE PTR [edx+97]
	mov	DWORD PTR tv129[ebp], eax
$LN18@adjustWSLe:
	mov	ecx, DWORD PTR _levels$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	mov	dl, BYTE PTR tv129[ebp]
	mov	BYTE PTR [ecx], dl
$LN8@adjustWSLe:
; Line 2283
	jmp	$LN11@adjustWSLe
$LN7@adjustWSLe:
; Line 2287
	cmp	DWORD PTR _i$[ebp], 0
	jle	$LN6@adjustWSLe
; Line 2288
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _dirProps$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	movzx	ecx, BYTE PTR [ecx]
	mov	edx, 1
	shl	edx, cl
	mov	DWORD PTR _flag$9958[ebp], edx
; Line 2289
	mov	eax, DWORD PTR _flag$9958[ebp]
	and	eax, 382976				; 0005d800H
	je	SHORT $LN5@adjustWSLe
; Line 2290
	mov	eax, DWORD PTR _levels$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _levels$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	mov	dl, BYTE PTR [ecx+1]
	mov	BYTE PTR [eax], dl
	jmp	SHORT $LN4@adjustWSLe
$LN5@adjustWSLe:
; Line 2291
	movsx	eax, BYTE PTR _orderParagraphsLTR$9957[ebp]
	test	eax, eax
	je	SHORT $LN3@adjustWSLe
	mov	eax, DWORD PTR _flag$9958[ebp]
	and	eax, 128				; 00000080H
	je	SHORT $LN3@adjustWSLe
; Line 2292
	mov	eax, DWORD PTR _levels$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	mov	BYTE PTR [eax], 0
; Line 2293
	jmp	SHORT $LN6@adjustWSLe
	jmp	SHORT $LN4@adjustWSLe
$LN3@adjustWSLe:
; Line 2294
	mov	eax, DWORD PTR _flag$9958[ebp]
	and	eax, 384				; 00000180H
	je	SHORT $LN4@adjustWSLe
; Line 2295
	mov	eax, DWORD PTR _pBiDi$[ebp]
	movzx	ecx, BYTE PTR [eax+98]
	test	ecx, ecx
	je	SHORT $LN19@adjustWSLe
	mov	edx, DWORD PTR _pBiDi$[ebp]
	mov	eax, DWORD PTR [edx+140]
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jl	SHORT $LN19@adjustWSLe
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	eax, DWORD PTR _pBiDi$[ebp]
	push	eax
	call	_ubidi_getParaLevelAtIndex_56
	add	esp, 8
	movzx	ecx, al
	mov	DWORD PTR tv161[ebp], ecx
	jmp	SHORT $LN20@adjustWSLe
$LN19@adjustWSLe:
	mov	edx, DWORD PTR _pBiDi$[ebp]
	movzx	eax, BYTE PTR [edx+97]
	mov	DWORD PTR tv161[ebp], eax
$LN20@adjustWSLe:
	mov	ecx, DWORD PTR _levels$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	mov	dl, BYTE PTR tv161[ebp]
	mov	BYTE PTR [ecx], dl
; Line 2296
	jmp	SHORT $LN6@adjustWSLe
$LN4@adjustWSLe:
; Line 2298
	jmp	$LN7@adjustWSLe
$LN6@adjustWSLe:
; Line 2299
	jmp	$LN13@adjustWSLe
$LN15@adjustWSLe:
; Line 2301
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 256				; 00000100H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_adjustWSLevels ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _setParaSuccess
_TEXT	SEGMENT
_pBiDi$ = 8						; size = 4
_setParaSuccess PROC					; COMDAT
; Line 2331
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2332
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	DWORD PTR [eax+104], 0
; Line 2333
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	DWORD PTR [eax+112], 0
; Line 2334
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR _pBiDi$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 2335
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_setParaSuccess ENDP
_TEXT	ENDS
EXTRN	_ubidi_getRuns_56:PROC
EXTRN	_ubidi_getVisualMap_56:PROC
EXTRN	_ubidi_writeReordered_56:PROC
EXTRN	_ubidi_getLevels_56:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _setParaRunsOnly
_TEXT	SEGMENT
tv389 = -520						; size = 4
tv317 = -520						; size = 4
tv293 = -520						; size = 4
tv281 = -520						; size = 4
tv241 = -520						; size = 4
tv197 = -520						; size = 4
_saveOptions$ = -320					; size = 4
_index1$ = -308						; size = 4
_index0$ = -296						; size = 4
_logicalPos$ = -284					; size = 4
_indexOddBit$ = -272					; size = 4
_step$ = -260						; size = 4
_limit$ = -248						; size = 4
_start$ = -236						; size = 4
_insertRemove$ = -224					; size = 4
_addedRuns$ = -212					; size = 4
_runLength$ = -200					; size = 4
_runCount$ = -188					; size = 4
_logicalStart$ = -176					; size = 4
_visualStart$ = -164					; size = 4
_j$ = -152						; size = 4
_i$ = -140						; size = 4
_visualLength$ = -128					; size = 4
_runs$ = -116						; size = 4
_saveMayAllocateText$ = -101				; size = 1
_saveDirection$ = -92					; size = 4
_saveLevels$ = -80					; size = 4
_levels$ = -68						; size = 4
_saveTrailingWSStart$ = -56				; size = 4
_saveLength$ = -44					; size = 4
_visualText$ = -32					; size = 4
_visualMap$ = -20					; size = 4
_runsOnlyMemory$ = -8					; size = 4
_pBiDi$ = 8						; size = 4
_text$ = 12						; size = 4
_length$ = 16						; size = 4
_paraLevel$ = 20					; size = 1
_pErrorCode$ = 24					; size = 4
_setParaRunsOnly PROC					; COMDAT
; Line 2342
	push	ebp
	mov	ebp, esp
	sub	esp, 520				; 00000208H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-520]
	mov	ecx, 130				; 00000082H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2343
	mov	DWORD PTR _runsOnlyMemory$[ebp], 0
; Line 2358
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	DWORD PTR [eax+88], 0
; Line 2359
	cmp	DWORD PTR _length$[ebp], 0
	jne	SHORT $LN34@setParaRun
; Line 2360
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	push	0
	movzx	ecx, BYTE PTR _paraLevel$[ebp]
	push	ecx
	mov	edx, DWORD PTR _length$[ebp]
	push	edx
	mov	eax, DWORD PTR _text$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pBiDi$[ebp]
	push	ecx
	call	_ubidi_setPara_56
	add	esp, 24					; 00000018H
; Line 2361
	jmp	$cleanup3$10051
$LN34@setParaRun:
; Line 2364
	mov	eax, DWORD PTR _length$[ebp]
	imul	eax, 7
	push	eax
	call	_uprv_malloc_56
	add	esp, 4
	mov	DWORD PTR _runsOnlyMemory$[ebp], eax
; Line 2365
	cmp	DWORD PTR _runsOnlyMemory$[ebp], 0
	jne	SHORT $LN33@setParaRun
; Line 2366
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 7
; Line 2367
	jmp	$cleanup3$10051
$LN33@setParaRun:
; Line 2369
	mov	eax, DWORD PTR _runsOnlyMemory$[ebp]
	mov	DWORD PTR _visualMap$[ebp], eax
; Line 2370
	mov	eax, DWORD PTR _length$[ebp]
	mov	ecx, DWORD PTR _visualMap$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _visualText$[ebp], edx
; Line 2371
	mov	eax, DWORD PTR _length$[ebp]
	mov	ecx, DWORD PTR _visualText$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR _saveLevels$[ebp], edx
; Line 2372
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+92]
	mov	DWORD PTR _saveOptions$[ebp], ecx
; Line 2373
	mov	eax, DWORD PTR _saveOptions$[ebp]
	and	eax, 1
	je	SHORT $LN32@setParaRun
; Line 2374
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+92]
	and	ecx, -2					; fffffffeH
	mov	edx, DWORD PTR _pBiDi$[ebp]
	mov	DWORD PTR [edx+92], ecx
; Line 2375
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+92]
	or	ecx, 2
	mov	edx, DWORD PTR _pBiDi$[ebp]
	mov	DWORD PTR [edx+92], ecx
$LN32@setParaRun:
; Line 2377
	movzx	eax, BYTE PTR _paraLevel$[ebp]
	and	eax, 1
	mov	BYTE PTR _paraLevel$[ebp], al
; Line 2378
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	push	0
	movzx	ecx, BYTE PTR _paraLevel$[ebp]
	push	ecx
	mov	edx, DWORD PTR _length$[ebp]
	push	edx
	mov	eax, DWORD PTR _text$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pBiDi$[ebp]
	push	ecx
	call	_ubidi_setPara_56
	add	esp, 24					; 00000018H
; Line 2379
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN31@setParaRun
; Line 2380
	jmp	$cleanup3$10051
$LN31@setParaRun:
; Line 2385
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pBiDi$[ebp]
	push	ecx
	call	_ubidi_getLevels_56
	add	esp, 8
	mov	DWORD PTR _levels$[ebp], eax
; Line 2386
	push	1
	mov	eax, DWORD PTR _levels$[ebp]
	push	eax
	call	_uprv_checkValidMemory
	add	esp, 8
	mov	ecx, DWORD PTR _pBiDi$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _levels$[ebp]
	push	eax
	mov	ecx, DWORD PTR _saveLevels$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 2387
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+132]
	mov	DWORD PTR _saveTrailingWSStart$[ebp], ecx
; Line 2388
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _saveLength$[ebp], ecx
; Line 2389
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+120]
	mov	DWORD PTR _saveDirection$[ebp], ecx
; Line 2398
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	push	2
	mov	ecx, DWORD PTR _length$[ebp]
	push	ecx
	mov	edx, DWORD PTR _visualText$[ebp]
	push	edx
	mov	eax, DWORD PTR _pBiDi$[ebp]
	push	eax
	call	_ubidi_writeReordered_56
	add	esp, 20					; 00000014H
	mov	DWORD PTR _visualLength$[ebp], eax
; Line 2399
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _visualMap$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pBiDi$[ebp]
	push	edx
	call	_ubidi_getVisualMap_56
	add	esp, 12					; 0000000cH
; Line 2400
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN30@setParaRun
; Line 2401
	jmp	$cleanup2$10064
$LN30@setParaRun:
; Line 2403
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR _saveOptions$[ebp]
	mov	DWORD PTR [eax+92], ecx
; Line 2405
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	DWORD PTR [eax+88], 5
; Line 2406
	movzx	eax, BYTE PTR _paraLevel$[ebp]
	xor	eax, 1
	mov	BYTE PTR _paraLevel$[ebp], al
; Line 2414
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	cl, BYTE PTR [eax+72]
	mov	BYTE PTR _saveMayAllocateText$[ebp], cl
; Line 2415
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	BYTE PTR [eax+72], 0
; Line 2416
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	push	0
	movzx	ecx, BYTE PTR _paraLevel$[ebp]
	push	ecx
	mov	edx, DWORD PTR _visualLength$[ebp]
	push	edx
	mov	eax, DWORD PTR _visualText$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pBiDi$[ebp]
	push	ecx
	call	_ubidi_setPara_56
	add	esp, 24					; 00000018H
; Line 2417
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	cl, BYTE PTR _saveMayAllocateText$[ebp]
	mov	BYTE PTR [eax+72], cl
; Line 2418
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pBiDi$[ebp]
	push	ecx
	call	_ubidi_getRuns_56
	add	esp, 8
; Line 2419
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN29@setParaRun
; Line 2420
	jmp	$cleanup1$10067
$LN29@setParaRun:
; Line 2423
	mov	DWORD PTR _addedRuns$[ebp], 0
; Line 2424
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+224]
	mov	DWORD PTR _runCount$[ebp], ecx
; Line 2425
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+228]
	mov	DWORD PTR _runs$[ebp], ecx
; Line 2426
	mov	DWORD PTR _visualStart$[ebp], 0
; Line 2427
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN28@setParaRun
$LN27@setParaRun:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _visualStart$[ebp]
	add	ecx, DWORD PTR _runLength$[ebp]
	mov	DWORD PTR _visualStart$[ebp], ecx
$LN28@setParaRun:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _runCount$[ebp]
	jge	$LN26@setParaRun
; Line 2428
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _runs$[ebp]
	mov	edx, DWORD PTR [ecx+eax+4]
	sub	edx, DWORD PTR _visualStart$[ebp]
	mov	DWORD PTR _runLength$[ebp], edx
; Line 2429
	cmp	DWORD PTR _runLength$[ebp], 2
	jge	SHORT $LN25@setParaRun
; Line 2430
	jmp	SHORT $LN27@setParaRun
$LN25@setParaRun:
; Line 2432
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _runs$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	and	edx, 2147483647				; 7fffffffH
	mov	DWORD PTR _logicalStart$[ebp], edx
; Line 2433
	mov	eax, DWORD PTR _logicalStart$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
	jmp	SHORT $LN24@setParaRun
$LN23@setParaRun:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN24@setParaRun:
	mov	eax, DWORD PTR _logicalStart$[ebp]
	add	eax, DWORD PTR _runLength$[ebp]
	cmp	DWORD PTR _j$[ebp], eax
	jge	$LN22@setParaRun
; Line 2434
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _visualMap$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _index0$[ebp], edx
; Line 2435
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _visualMap$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4-4]
	mov	DWORD PTR _index1$[ebp], edx
; Line 2436
	mov	eax, DWORD PTR _index0$[ebp]
	sub	eax, DWORD PTR _index1$[ebp]
	js	SHORT $LN37@setParaRun
	mov	ecx, DWORD PTR _index0$[ebp]
	sub	ecx, DWORD PTR _index1$[ebp]
	mov	DWORD PTR tv197[ebp], ecx
	jmp	SHORT $LN38@setParaRun
$LN37@setParaRun:
	mov	edx, DWORD PTR _index0$[ebp]
	sub	edx, DWORD PTR _index1$[ebp]
	neg	edx
	mov	DWORD PTR tv197[ebp], edx
$LN38@setParaRun:
	cmp	DWORD PTR tv197[ebp], 1
	jne	SHORT $LN20@setParaRun
	mov	eax, DWORD PTR _saveLevels$[ebp]
	add	eax, DWORD PTR _index0$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _saveLevels$[ebp]
	add	edx, DWORD PTR _index1$[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	ecx, eax
	je	SHORT $LN21@setParaRun
$LN20@setParaRun:
; Line 2437
	mov	eax, DWORD PTR _addedRuns$[ebp]
	add	eax, 1
	mov	DWORD PTR _addedRuns$[ebp], eax
$LN21@setParaRun:
; Line 2439
	jmp	$LN23@setParaRun
$LN22@setParaRun:
; Line 2440
	jmp	$LN27@setParaRun
$LN26@setParaRun:
; Line 2441
	cmp	DWORD PTR _addedRuns$[ebp], 0
	je	$LN19@setParaRun
; Line 2442
	mov	eax, DWORD PTR _runCount$[ebp]
	add	eax, DWORD PTR _addedRuns$[ebp]
	imul	eax, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _pBiDi$[ebp]
	movzx	edx, BYTE PTR [ecx+73]
	push	edx
	mov	eax, DWORD PTR _pBiDi$[ebp]
	add	eax, 40					; 00000028H
	push	eax
	mov	ecx, DWORD PTR _pBiDi$[ebp]
	add	ecx, 64					; 00000040H
	push	ecx
	call	_ubidi_getMemory_56
	add	esp, 16					; 00000010H
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN18@setParaRun
; Line 2443
	cmp	DWORD PTR _runCount$[ebp], 1
	jne	SHORT $LN17@setParaRun
; Line 2445
	mov	eax, DWORD PTR _runs$[ebp]
	mov	ecx, DWORD PTR _pBiDi$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], eax
$LN17@setParaRun:
; Line 2447
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR _pBiDi$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	mov	DWORD PTR [eax+228], edx
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+228]
	mov	DWORD PTR _runs$[ebp], ecx
; Line 2448
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+224]
	add	ecx, DWORD PTR _addedRuns$[ebp]
	mov	edx, DWORD PTR _pBiDi$[ebp]
	mov	DWORD PTR [edx+224], ecx
; Line 2449
	jmp	SHORT $LN19@setParaRun
$LN18@setParaRun:
; Line 2450
	jmp	$cleanup1$10067
$LN19@setParaRun:
; Line 2454
	mov	eax, DWORD PTR _runCount$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN15@setParaRun
$LN14@setParaRun:
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN15@setParaRun:
	cmp	DWORD PTR _i$[ebp], 0
	jl	$cleanup1$10067
; Line 2456
	cmp	DWORD PTR _i$[ebp], 0
	jne	SHORT $LN39@setParaRun
	mov	eax, DWORD PTR _runs$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR tv241[ebp], ecx
	jmp	SHORT $LN40@setParaRun
$LN39@setParaRun:
	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 12					; 0000000cH
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _runs$[ebp]
	mov	esi, DWORD PTR _runs$[ebp]
	mov	edx, DWORD PTR [ecx+edx+4]
	sub	edx, DWORD PTR [esi+eax+4]
	mov	DWORD PTR tv241[ebp], edx
$LN40@setParaRun:
	mov	eax, DWORD PTR tv241[ebp]
	mov	DWORD PTR _runLength$[ebp], eax
; Line 2457
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _runs$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	mov	DWORD PTR _logicalStart$[ebp], edx
; Line 2458
	mov	eax, DWORD PTR _logicalStart$[ebp]
	shr	eax, 31					; 0000001fH
	mov	DWORD PTR _indexOddBit$[ebp], eax
; Line 2459
	mov	eax, DWORD PTR _logicalStart$[ebp]
	and	eax, 2147483647				; 7fffffffH
	mov	DWORD PTR _logicalStart$[ebp], eax
; Line 2460
	cmp	DWORD PTR _runLength$[ebp], 2
	jge	SHORT $LN12@setParaRun
; Line 2461
	cmp	DWORD PTR _addedRuns$[ebp], 0
	je	SHORT $LN11@setParaRun
; Line 2462
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 12					; 0000000cH
	add	eax, DWORD PTR _runs$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, DWORD PTR _addedRuns$[ebp]
	imul	ecx, 12					; 0000000cH
	add	ecx, DWORD PTR _runs$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax
$LN11@setParaRun:
; Line 2464
	mov	eax, DWORD PTR _logicalStart$[ebp]
	mov	ecx, DWORD PTR _visualMap$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _logicalPos$[ebp], edx
; Line 2466
	mov	eax, DWORD PTR _saveLevels$[ebp]
	add	eax, DWORD PTR _logicalPos$[ebp]
	movzx	ecx, BYTE PTR [eax]
	xor	ecx, DWORD PTR _indexOddBit$[ebp]
	shl	ecx, 31					; 0000001fH
	or	ecx, DWORD PTR _logicalPos$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, DWORD PTR _addedRuns$[ebp]
	imul	edx, 12					; 0000000cH
	mov	eax, DWORD PTR _runs$[ebp]
	mov	DWORD PTR [eax+edx], ecx
; Line 2467
	jmp	$LN14@setParaRun
$LN12@setParaRun:
; Line 2469
	cmp	DWORD PTR _indexOddBit$[ebp], 0
	je	SHORT $LN10@setParaRun
; Line 2470
	mov	eax, DWORD PTR _logicalStart$[ebp]
	mov	DWORD PTR _start$[ebp], eax
; Line 2471
	mov	eax, DWORD PTR _runLength$[ebp]
	mov	ecx, DWORD PTR _logicalStart$[ebp]
	lea	edx, DWORD PTR [ecx+eax-1]
	mov	DWORD PTR _limit$[ebp], edx
; Line 2472
	mov	DWORD PTR _step$[ebp], 1
; Line 2473
	jmp	SHORT $LN9@setParaRun
$LN10@setParaRun:
; Line 2474
	mov	eax, DWORD PTR _runLength$[ebp]
	mov	ecx, DWORD PTR _logicalStart$[ebp]
	lea	edx, DWORD PTR [ecx+eax-1]
	mov	DWORD PTR _start$[ebp], edx
; Line 2475
	mov	eax, DWORD PTR _logicalStart$[ebp]
	mov	DWORD PTR _limit$[ebp], eax
; Line 2476
	mov	DWORD PTR _step$[ebp], -1
$LN9@setParaRun:
; Line 2478
	mov	eax, DWORD PTR _start$[ebp]
	mov	DWORD PTR _j$[ebp], eax
	jmp	SHORT $LN8@setParaRun
$LN7@setParaRun:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, DWORD PTR _step$[ebp]
	mov	DWORD PTR _j$[ebp], eax
$LN8@setParaRun:
	mov	eax, DWORD PTR _j$[ebp]
	cmp	eax, DWORD PTR _limit$[ebp]
	je	$LN6@setParaRun
; Line 2479
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _visualMap$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _index0$[ebp], edx
; Line 2480
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, DWORD PTR _step$[ebp]
	mov	ecx, DWORD PTR _visualMap$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _index1$[ebp], edx
; Line 2481
	mov	eax, DWORD PTR _index0$[ebp]
	sub	eax, DWORD PTR _index1$[ebp]
	js	SHORT $LN41@setParaRun
	mov	ecx, DWORD PTR _index0$[ebp]
	sub	ecx, DWORD PTR _index1$[ebp]
	mov	DWORD PTR tv281[ebp], ecx
	jmp	SHORT $LN42@setParaRun
$LN41@setParaRun:
	mov	edx, DWORD PTR _index0$[ebp]
	sub	edx, DWORD PTR _index1$[ebp]
	neg	edx
	mov	DWORD PTR tv281[ebp], edx
$LN42@setParaRun:
	cmp	DWORD PTR tv281[ebp], 1
	jne	SHORT $LN4@setParaRun
	mov	eax, DWORD PTR _saveLevels$[ebp]
	add	eax, DWORD PTR _index0$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _saveLevels$[ebp]
	add	edx, DWORD PTR _index1$[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	ecx, eax
	je	$LN5@setParaRun
$LN4@setParaRun:
; Line 2482
	mov	eax, DWORD PTR _start$[ebp]
	mov	ecx, DWORD PTR _visualMap$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	cmp	edx, DWORD PTR _index0$[ebp]
	jge	SHORT $LN43@setParaRun
	mov	eax, DWORD PTR _start$[ebp]
	mov	ecx, DWORD PTR _visualMap$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR tv293[ebp], edx
	jmp	SHORT $LN44@setParaRun
$LN43@setParaRun:
	mov	eax, DWORD PTR _index0$[ebp]
	mov	DWORD PTR tv293[ebp], eax
$LN44@setParaRun:
	mov	ecx, DWORD PTR tv293[ebp]
	mov	DWORD PTR _logicalPos$[ebp], ecx
; Line 2484
	mov	eax, DWORD PTR _saveLevels$[ebp]
	add	eax, DWORD PTR _logicalPos$[ebp]
	movzx	ecx, BYTE PTR [eax]
	xor	ecx, DWORD PTR _indexOddBit$[ebp]
	shl	ecx, 31					; 0000001fH
	or	ecx, DWORD PTR _logicalPos$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, DWORD PTR _addedRuns$[ebp]
	imul	edx, 12					; 0000000cH
	mov	eax, DWORD PTR _runs$[ebp]
	mov	DWORD PTR [eax+edx], ecx
; Line 2485
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, DWORD PTR _addedRuns$[ebp]
	imul	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _runs$[ebp]
	mov	esi, DWORD PTR _runs$[ebp]
	mov	eax, DWORD PTR [esi+eax+4]
	mov	DWORD PTR [edx+ecx+4], eax
; Line 2486
	mov	eax, DWORD PTR _j$[ebp]
	sub	eax, DWORD PTR _start$[ebp]
	js	SHORT $LN45@setParaRun
	mov	ecx, DWORD PTR _j$[ebp]
	sub	ecx, DWORD PTR _start$[ebp]
	mov	DWORD PTR tv317[ebp], ecx
	jmp	SHORT $LN46@setParaRun
$LN45@setParaRun:
	mov	edx, DWORD PTR _j$[ebp]
	sub	edx, DWORD PTR _start$[ebp]
	neg	edx
	mov	DWORD PTR tv317[ebp], edx
$LN46@setParaRun:
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR tv317[ebp]
	add	ecx, 1
	mov	edx, DWORD PTR _runs$[ebp]
	mov	eax, DWORD PTR [edx+eax+4]
	sub	eax, ecx
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _runs$[ebp]
	mov	DWORD PTR [edx+ecx+4], eax
; Line 2487
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _runs$[ebp]
	mov	edx, DWORD PTR [ecx+eax+8]
	and	edx, 10					; 0000000aH
	mov	DWORD PTR _insertRemove$[ebp], edx
; Line 2488
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, DWORD PTR _addedRuns$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _runs$[ebp]
	mov	edx, DWORD PTR _insertRemove$[ebp]
	mov	DWORD PTR [ecx+eax+8], edx
; Line 2489
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _insertRemove$[ebp]
	not	ecx
	mov	edx, DWORD PTR _runs$[ebp]
	and	ecx, DWORD PTR [edx+eax+8]
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 12					; 0000000cH
	mov	edx, DWORD PTR _runs$[ebp]
	mov	DWORD PTR [edx+eax+8], ecx
; Line 2490
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, DWORD PTR _step$[ebp]
	mov	DWORD PTR _start$[ebp], eax
; Line 2491
	mov	eax, DWORD PTR _addedRuns$[ebp]
	sub	eax, 1
	mov	DWORD PTR _addedRuns$[ebp], eax
$LN5@setParaRun:
; Line 2493
	jmp	$LN7@setParaRun
$LN6@setParaRun:
; Line 2494
	cmp	DWORD PTR _addedRuns$[ebp], 0
	je	SHORT $LN3@setParaRun
; Line 2495
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 12					; 0000000cH
	add	eax, DWORD PTR _runs$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, DWORD PTR _addedRuns$[ebp]
	imul	ecx, 12					; 0000000cH
	add	ecx, DWORD PTR _runs$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax
$LN3@setParaRun:
; Line 2497
	mov	eax, DWORD PTR _start$[ebp]
	mov	ecx, DWORD PTR _visualMap$[ebp]
	mov	edx, DWORD PTR _limit$[ebp]
	mov	esi, DWORD PTR _visualMap$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4]
	cmp	eax, DWORD PTR [esi+edx*4]
	jge	SHORT $LN47@setParaRun
	mov	ecx, DWORD PTR _start$[ebp]
	mov	edx, DWORD PTR _visualMap$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR tv389[ebp], eax
	jmp	SHORT $LN48@setParaRun
$LN47@setParaRun:
	mov	ecx, DWORD PTR _limit$[ebp]
	mov	edx, DWORD PTR _visualMap$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR tv389[ebp], eax
$LN48@setParaRun:
	mov	ecx, DWORD PTR tv389[ebp]
	mov	DWORD PTR _logicalPos$[ebp], ecx
; Line 2499
	mov	eax, DWORD PTR _saveLevels$[ebp]
	add	eax, DWORD PTR _logicalPos$[ebp]
	movzx	ecx, BYTE PTR [eax]
	xor	ecx, DWORD PTR _indexOddBit$[ebp]
	shl	ecx, 31					; 0000001fH
	or	ecx, DWORD PTR _logicalPos$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, DWORD PTR _addedRuns$[ebp]
	imul	edx, 12					; 0000000cH
	mov	eax, DWORD PTR _runs$[ebp]
	mov	DWORD PTR [eax+edx], ecx
; Line 2500
	jmp	$LN14@setParaRun
$cleanup1$10067:
; Line 2504
	mov	eax, DWORD PTR _pBiDi$[ebp]
	movzx	ecx, BYTE PTR [eax+97]
	xor	ecx, 1
	mov	edx, DWORD PTR _pBiDi$[ebp]
	mov	BYTE PTR [edx+97], cl
$cleanup2$10064:
; Line 2507
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR _text$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 2508
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR _saveLength$[ebp]
	mov	DWORD PTR [eax+16], ecx
; Line 2509
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR _length$[ebp]
	mov	DWORD PTR [eax+12], ecx
; Line 2510
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR _saveDirection$[ebp]
	mov	DWORD PTR [eax+120], ecx
; Line 2512
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR _saveLength$[ebp]
	cmp	ecx, DWORD PTR [eax+28]
	jle	SHORT $LN2@setParaRun
; Line 2513
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _saveLength$[ebp], ecx
$LN2@setParaRun:
; Line 2515
	push	1
	mov	eax, DWORD PTR _saveLevels$[ebp]
	push	eax
	call	_uprv_checkValidMemory
	add	esp, 8
	mov	ecx, DWORD PTR _saveLength$[ebp]
	push	ecx
	mov	edx, DWORD PTR _saveLevels$[ebp]
	push	edx
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+80]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 2516
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR _saveTrailingWSStart$[ebp]
	mov	DWORD PTR [eax+132], ecx
; Line 2517
	mov	eax, DWORD PTR _pBiDi$[ebp]
	cmp	DWORD PTR [eax+224], 1
	jle	SHORT $cleanup3$10051
; Line 2518
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	DWORD PTR [eax+120], 2
$cleanup3$10051:
; Line 2522
	mov	eax, DWORD PTR _runsOnlyMemory$[ebp]
	push	eax
	call	_uprv_free_56
	add	esp, 4
; Line 2524
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	DWORD PTR [eax+88], 3
; Line 2525
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 520				; 00000208H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_setParaRunsOnly ENDP
_TEXT	ENDS
PUBLIC	_ubidi_orderParagraphsLTR_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _ubidi_orderParagraphsLTR_56
_TEXT	SEGMENT
_pBiDi$ = 8						; size = 4
_orderParagraphsLTR$ = 12				; size = 1
_ubidi_orderParagraphsLTR_56 PROC			; COMDAT
; Line 2835
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2836
	cmp	DWORD PTR _pBiDi$[ebp], 0
	je	SHORT $LN2@ubidi_orde
; Line 2837
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	cl, BYTE PTR _orderParagraphsLTR$[ebp]
	mov	BYTE PTR [eax+96], cl
$LN2@ubidi_orde:
; Line 2839
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_ubidi_orderParagraphsLTR_56 ENDP
_TEXT	ENDS
PUBLIC	_ubidi_isOrderParagraphsLTR_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _ubidi_isOrderParagraphsLTR_56
_TEXT	SEGMENT
_pBiDi$ = 8						; size = 4
_ubidi_isOrderParagraphsLTR_56 PROC			; COMDAT
; Line 2842
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2843
	cmp	DWORD PTR _pBiDi$[ebp], 0
	je	SHORT $LN2@ubidi_isOr
; Line 2844
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	al, BYTE PTR [eax+96]
	jmp	SHORT $LN3@ubidi_isOr
; Line 2845
	jmp	SHORT $LN3@ubidi_isOr
$LN2@ubidi_isOr:
; Line 2846
	xor	al, al
$LN3@ubidi_isOr:
; Line 2848
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_ubidi_isOrderParagraphsLTR_56 ENDP
_TEXT	ENDS
PUBLIC	_ubidi_getDirection_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _ubidi_getDirection_56
_TEXT	SEGMENT
_pBiDi$ = 8						; size = 4
_ubidi_getDirection_56 PROC				; COMDAT
; Line 2851
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2852
	cmp	DWORD PTR _pBiDi$[ebp], 0
	je	SHORT $LN3@ubidi_getD
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR _pBiDi$[ebp]
	je	SHORT $LN2@ubidi_getD
	mov	eax, DWORD PTR _pBiDi$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN3@ubidi_getD
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _pBiDi$[ebp]
	mov	eax, DWORD PTR [ecx]
	cmp	eax, DWORD PTR [edx]
	jne	SHORT $LN3@ubidi_getD
$LN2@ubidi_getD:
; Line 2853
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	eax, DWORD PTR [eax+120]
	jmp	SHORT $LN4@ubidi_getD
; Line 2854
	jmp	SHORT $LN4@ubidi_getD
$LN3@ubidi_getD:
; Line 2855
	xor	eax, eax
$LN4@ubidi_getD:
; Line 2857
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_ubidi_getDirection_56 ENDP
_TEXT	ENDS
PUBLIC	_ubidi_getText_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _ubidi_getText_56
_TEXT	SEGMENT
_pBiDi$ = 8						; size = 4
_ubidi_getText_56 PROC					; COMDAT
; Line 2860
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2861
	cmp	DWORD PTR _pBiDi$[ebp], 0
	je	SHORT $LN3@ubidi_getT
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR _pBiDi$[ebp]
	je	SHORT $LN2@ubidi_getT
	mov	eax, DWORD PTR _pBiDi$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN3@ubidi_getT
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _pBiDi$[ebp]
	mov	eax, DWORD PTR [ecx]
	cmp	eax, DWORD PTR [edx]
	jne	SHORT $LN3@ubidi_getT
$LN2@ubidi_getT:
; Line 2862
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	eax, DWORD PTR [eax+8]
	jmp	SHORT $LN4@ubidi_getT
; Line 2863
	jmp	SHORT $LN4@ubidi_getT
$LN3@ubidi_getT:
; Line 2864
	xor	eax, eax
$LN4@ubidi_getT:
; Line 2866
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_ubidi_getText_56 ENDP
_TEXT	ENDS
PUBLIC	_ubidi_getLength_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _ubidi_getLength_56
_TEXT	SEGMENT
_pBiDi$ = 8						; size = 4
_ubidi_getLength_56 PROC				; COMDAT
; Line 2869
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2870
	cmp	DWORD PTR _pBiDi$[ebp], 0
	je	SHORT $LN3@ubidi_getL
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR _pBiDi$[ebp]
	je	SHORT $LN2@ubidi_getL
	mov	eax, DWORD PTR _pBiDi$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN3@ubidi_getL
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _pBiDi$[ebp]
	mov	eax, DWORD PTR [ecx]
	cmp	eax, DWORD PTR [edx]
	jne	SHORT $LN3@ubidi_getL
$LN2@ubidi_getL:
; Line 2871
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	eax, DWORD PTR [eax+12]
	jmp	SHORT $LN4@ubidi_getL
; Line 2872
	jmp	SHORT $LN4@ubidi_getL
$LN3@ubidi_getL:
; Line 2873
	xor	eax, eax
$LN4@ubidi_getL:
; Line 2875
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_ubidi_getLength_56 ENDP
_TEXT	ENDS
PUBLIC	_ubidi_getProcessedLength_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _ubidi_getProcessedLength_56
_TEXT	SEGMENT
_pBiDi$ = 8						; size = 4
_ubidi_getProcessedLength_56 PROC			; COMDAT
; Line 2878
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2879
	cmp	DWORD PTR _pBiDi$[ebp], 0
	je	SHORT $LN3@ubidi_getP@2
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR _pBiDi$[ebp]
	je	SHORT $LN2@ubidi_getP@2
	mov	eax, DWORD PTR _pBiDi$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN3@ubidi_getP@2
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _pBiDi$[ebp]
	mov	eax, DWORD PTR [ecx]
	cmp	eax, DWORD PTR [edx]
	jne	SHORT $LN3@ubidi_getP@2
$LN2@ubidi_getP@2:
; Line 2880
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	eax, DWORD PTR [eax+16]
	jmp	SHORT $LN4@ubidi_getP@2
; Line 2881
	jmp	SHORT $LN4@ubidi_getP@2
$LN3@ubidi_getP@2:
; Line 2882
	xor	eax, eax
$LN4@ubidi_getP@2:
; Line 2884
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_ubidi_getProcessedLength_56 ENDP
_TEXT	ENDS
PUBLIC	_ubidi_getResultLength_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _ubidi_getResultLength_56
_TEXT	SEGMENT
_pBiDi$ = 8						; size = 4
_ubidi_getResultLength_56 PROC				; COMDAT
; Line 2887
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2888
	cmp	DWORD PTR _pBiDi$[ebp], 0
	je	SHORT $LN3@ubidi_getR@3
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR _pBiDi$[ebp]
	je	SHORT $LN2@ubidi_getR@3
	mov	eax, DWORD PTR _pBiDi$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN3@ubidi_getR@3
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _pBiDi$[ebp]
	mov	eax, DWORD PTR [ecx]
	cmp	eax, DWORD PTR [edx]
	jne	SHORT $LN3@ubidi_getR@3
$LN2@ubidi_getR@3:
; Line 2889
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	eax, DWORD PTR [eax+20]
	jmp	SHORT $LN4@ubidi_getR@3
; Line 2890
	jmp	SHORT $LN4@ubidi_getR@3
$LN3@ubidi_getR@3:
; Line 2891
	xor	eax, eax
$LN4@ubidi_getR@3:
; Line 2893
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_ubidi_getResultLength_56 ENDP
_TEXT	ENDS
PUBLIC	_ubidi_getParaLevel_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _ubidi_getParaLevel_56
_TEXT	SEGMENT
_pBiDi$ = 8						; size = 4
_ubidi_getParaLevel_56 PROC				; COMDAT
; Line 2898
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2899
	cmp	DWORD PTR _pBiDi$[ebp], 0
	je	SHORT $LN3@ubidi_getP@3
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR _pBiDi$[ebp]
	je	SHORT $LN2@ubidi_getP@3
	mov	eax, DWORD PTR _pBiDi$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN3@ubidi_getP@3
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _pBiDi$[ebp]
	mov	eax, DWORD PTR [ecx]
	cmp	eax, DWORD PTR [edx]
	jne	SHORT $LN3@ubidi_getP@3
$LN2@ubidi_getP@3:
; Line 2900
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	al, BYTE PTR [eax+97]
	jmp	SHORT $LN4@ubidi_getP@3
; Line 2901
	jmp	SHORT $LN4@ubidi_getP@3
$LN3@ubidi_getP@3:
; Line 2902
	xor	al, al
$LN4@ubidi_getP@3:
; Line 2904
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_ubidi_getParaLevel_56 ENDP
_TEXT	ENDS
PUBLIC	_ubidi_countParagraphs_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _ubidi_countParagraphs_56
_TEXT	SEGMENT
_pBiDi$ = 8						; size = 4
_ubidi_countParagraphs_56 PROC				; COMDAT
; Line 2907
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2908
	cmp	DWORD PTR _pBiDi$[ebp], 0
	je	SHORT $LN3@ubidi_coun
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR _pBiDi$[ebp]
	je	SHORT $LN4@ubidi_coun
	mov	eax, DWORD PTR _pBiDi$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN3@ubidi_coun
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _pBiDi$[ebp]
	mov	eax, DWORD PTR [ecx]
	cmp	eax, DWORD PTR [edx]
	je	SHORT $LN4@ubidi_coun
$LN3@ubidi_coun:
; Line 2909
	xor	eax, eax
	jmp	SHORT $LN5@ubidi_coun
; Line 2910
	jmp	SHORT $LN5@ubidi_coun
$LN4@ubidi_coun:
; Line 2911
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	eax, DWORD PTR [eax+136]
$LN5@ubidi_coun:
; Line 2913
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_ubidi_countParagraphs_56 ENDP
_TEXT	ENDS
PUBLIC	_ubidi_getParagraphByIndex_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _ubidi_getParagraphByIndex_56
_TEXT	SEGMENT
tv129 = -208						; size = 4
_paraStart$ = -8					; size = 4
_pBiDi$ = 8						; size = 4
_paraIndex$ = 12					; size = 4
_pParaStart$ = 16					; size = 4
_pParaLimit$ = 20					; size = 4
_pParaLevel$ = 24					; size = 4
_pErrorCode$ = 28					; size = 4
_ubidi_getParagraphByIndex_56 PROC			; COMDAT
; Line 2918
	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2922
	cmp	DWORD PTR _pErrorCode$[ebp], 0
	je	SHORT $LN11@ubidi_getP@4
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN12@ubidi_getP@4
$LN11@ubidi_getP@4:
	jmp	$LN13@ubidi_getP@4
$LN12@ubidi_getP@4:
; Line 2923
	cmp	DWORD PTR _pBiDi$[ebp], 0
	je	SHORT $LN9@ubidi_getP@4
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR _pBiDi$[ebp]
	je	SHORT $LN10@ubidi_getP@4
	mov	eax, DWORD PTR _pBiDi$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN9@ubidi_getP@4
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _pBiDi$[ebp]
	mov	eax, DWORD PTR [ecx]
	cmp	eax, DWORD PTR [edx]
	je	SHORT $LN10@ubidi_getP@4
$LN9@ubidi_getP@4:
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 27			; 0000001bH
	jmp	$LN13@ubidi_getP@4
$LN10@ubidi_getP@4:
; Line 2924
	cmp	DWORD PTR _paraIndex$[ebp], 0
	jl	SHORT $LN6@ubidi_getP@4
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR _paraIndex$[ebp]
	cmp	ecx, DWORD PTR [eax+136]
	jl	SHORT $LN7@ubidi_getP@4
$LN6@ubidi_getP@4:
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 1
	jmp	$LN13@ubidi_getP@4
$LN7@ubidi_getP@4:
; Line 2926
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pBiDi$[ebp], ecx
; Line 2927
	cmp	DWORD PTR _paraIndex$[ebp], 0
	je	SHORT $LN5@ubidi_getP@4
; Line 2928
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	edx, DWORD PTR _paraIndex$[ebp]
	mov	eax, DWORD PTR [ecx+edx*8-8]
	mov	DWORD PTR _paraStart$[ebp], eax
; Line 2929
	jmp	SHORT $LN4@ubidi_getP@4
$LN5@ubidi_getP@4:
; Line 2930
	mov	DWORD PTR _paraStart$[ebp], 0
$LN4@ubidi_getP@4:
; Line 2932
	cmp	DWORD PTR _pParaStart$[ebp], 0
	je	SHORT $LN3@ubidi_getP@4
; Line 2933
	mov	eax, DWORD PTR _pParaStart$[ebp]
	mov	ecx, DWORD PTR _paraStart$[ebp]
	mov	DWORD PTR [eax], ecx
$LN3@ubidi_getP@4:
; Line 2935
	cmp	DWORD PTR _pParaLimit$[ebp], 0
	je	SHORT $LN2@ubidi_getP@4
; Line 2936
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	edx, DWORD PTR _pParaLimit$[ebp]
	mov	eax, DWORD PTR _paraIndex$[ebp]
	mov	ecx, DWORD PTR [ecx+eax*8]
	mov	DWORD PTR [edx], ecx
$LN2@ubidi_getP@4:
; Line 2938
	cmp	DWORD PTR _pParaLevel$[ebp], 0
	je	SHORT $LN13@ubidi_getP@4
; Line 2939
	mov	eax, DWORD PTR _pBiDi$[ebp]
	movzx	ecx, BYTE PTR [eax+98]
	test	ecx, ecx
	je	SHORT $LN15@ubidi_getP@4
	mov	edx, DWORD PTR _pBiDi$[ebp]
	mov	eax, DWORD PTR [edx+140]
	mov	ecx, DWORD PTR _paraStart$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jl	SHORT $LN15@ubidi_getP@4
	mov	edx, DWORD PTR _paraStart$[ebp]
	push	edx
	mov	eax, DWORD PTR _pBiDi$[ebp]
	push	eax
	call	_ubidi_getParaLevelAtIndex_56
	add	esp, 8
	movzx	ecx, al
	mov	DWORD PTR tv129[ebp], ecx
	jmp	SHORT $LN16@ubidi_getP@4
$LN15@ubidi_getP@4:
	mov	edx, DWORD PTR _pBiDi$[ebp]
	movzx	eax, BYTE PTR [edx+97]
	mov	DWORD PTR tv129[ebp], eax
$LN16@ubidi_getP@4:
	mov	ecx, DWORD PTR _pParaLevel$[ebp]
	mov	dl, BYTE PTR tv129[ebp]
	mov	BYTE PTR [ecx], dl
$LN13@ubidi_getP@4:
; Line 2941
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ubidi_getParagraphByIndex_56 ENDP
_TEXT	ENDS
PUBLIC	_ubidi_getParagraph_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _ubidi_getParagraph_56
_TEXT	SEGMENT
_paraIndex$ = -8					; size = 4
_pBiDi$ = 8						; size = 4
_charIndex$ = 12					; size = 4
_pParaStart$ = 16					; size = 4
_pParaLimit$ = 20					; size = 4
_pParaLevel$ = 24					; size = 4
_pErrorCode$ = 28					; size = 4
_ubidi_getParagraph_56 PROC				; COMDAT
; Line 2946
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2951
	cmp	DWORD PTR _pErrorCode$[ebp], 0
	je	SHORT $LN9@ubidi_getP@5
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN10@ubidi_getP@5
$LN9@ubidi_getP@5:
	or	eax, -1
	jmp	$LN11@ubidi_getP@5
$LN10@ubidi_getP@5:
; Line 2952
	cmp	DWORD PTR _pBiDi$[ebp], 0
	je	SHORT $LN7@ubidi_getP@5
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR _pBiDi$[ebp]
	je	SHORT $LN8@ubidi_getP@5
	mov	eax, DWORD PTR _pBiDi$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN7@ubidi_getP@5
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _pBiDi$[ebp]
	mov	eax, DWORD PTR [ecx]
	cmp	eax, DWORD PTR [edx]
	je	SHORT $LN8@ubidi_getP@5
$LN7@ubidi_getP@5:
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 27			; 0000001bH
	or	eax, -1
	jmp	SHORT $LN11@ubidi_getP@5
$LN8@ubidi_getP@5:
; Line 2953
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pBiDi$[ebp], ecx
; Line 2954
	cmp	DWORD PTR _charIndex$[ebp], 0
	jl	SHORT $LN4@ubidi_getP@5
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR _charIndex$[ebp]
	cmp	ecx, DWORD PTR [eax+16]
	jl	SHORT $LN5@ubidi_getP@5
$LN4@ubidi_getP@5:
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 1
	or	eax, -1
	jmp	SHORT $LN11@ubidi_getP@5
$LN5@ubidi_getP@5:
; Line 2956
	mov	DWORD PTR _paraIndex$[ebp], 0
	jmp	SHORT $LN3@ubidi_getP@5
$LN2@ubidi_getP@5:
	mov	eax, DWORD PTR _paraIndex$[ebp]
	add	eax, 1
	mov	DWORD PTR _paraIndex$[ebp], eax
$LN3@ubidi_getP@5:
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	edx, DWORD PTR _paraIndex$[ebp]
	mov	eax, DWORD PTR _charIndex$[ebp]
	cmp	eax, DWORD PTR [ecx+edx*8]
	jl	SHORT $LN1@ubidi_getP@5
	jmp	SHORT $LN2@ubidi_getP@5
$LN1@ubidi_getP@5:
; Line 2957
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pParaLevel$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pParaLimit$[ebp]
	push	edx
	mov	eax, DWORD PTR _pParaStart$[ebp]
	push	eax
	mov	ecx, DWORD PTR _paraIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pBiDi$[ebp]
	push	edx
	call	_ubidi_getParagraphByIndex_56
	add	esp, 24					; 00000018H
; Line 2958
	mov	eax, DWORD PTR _paraIndex$[ebp]
$LN11@ubidi_getP@5:
; Line 2959
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ubidi_getParagraph_56 ENDP
_TEXT	ENDS
PUBLIC	_ubidi_setClassCallback_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _ubidi_setClassCallback_56
_TEXT	SEGMENT
_pBiDi$ = 8						; size = 4
_newFn$ = 12						; size = 4
_newContext$ = 16					; size = 4
_oldFn$ = 20						; size = 4
_oldContext$ = 24					; size = 4
_pErrorCode$ = 28					; size = 4
_ubidi_setClassCallback_56 PROC				; COMDAT
; Line 2965
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2966
	cmp	DWORD PTR _pErrorCode$[ebp], 0
	je	SHORT $LN4@ubidi_setC@2
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN5@ubidi_setC@2
$LN4@ubidi_setC@2:
	jmp	SHORT $LN6@ubidi_setC@2
$LN5@ubidi_setC@2:
; Line 2967
	cmp	DWORD PTR _pBiDi$[ebp], 0
	jne	SHORT $LN3@ubidi_setC@2
; Line 2968
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 1
; Line 2969
	jmp	SHORT $LN6@ubidi_setC@2
$LN3@ubidi_setC@2:
; Line 2971
	cmp	DWORD PTR _oldFn$[ebp], 0
	je	SHORT $LN2@ubidi_setC@2
; Line 2973
	mov	eax, DWORD PTR _oldFn$[ebp]
	mov	ecx, DWORD PTR _pBiDi$[ebp]
	mov	edx, DWORD PTR [ecx+356]
	mov	DWORD PTR [eax], edx
$LN2@ubidi_setC@2:
; Line 2975
	cmp	DWORD PTR _oldContext$[ebp], 0
	je	SHORT $LN1@ubidi_setC@2
; Line 2977
	mov	eax, DWORD PTR _oldContext$[ebp]
	mov	ecx, DWORD PTR _pBiDi$[ebp]
	mov	edx, DWORD PTR [ecx+360]
	mov	DWORD PTR [eax], edx
$LN1@ubidi_setC@2:
; Line 2979
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR _newFn$[ebp]
	mov	DWORD PTR [eax+356], ecx
; Line 2980
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR _newContext$[ebp]
	mov	DWORD PTR [eax+360], ecx
$LN6@ubidi_setC@2:
; Line 2981
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_ubidi_setClassCallback_56 ENDP
_TEXT	ENDS
PUBLIC	_ubidi_getClassCallback_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _ubidi_getClassCallback_56
_TEXT	SEGMENT
_pBiDi$ = 8						; size = 4
_fn$ = 12						; size = 4
_context$ = 16						; size = 4
_ubidi_getClassCallback_56 PROC				; COMDAT
; Line 2985
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2986
	cmp	DWORD PTR _pBiDi$[ebp], 0
	jne	SHORT $LN3@ubidi_getC
; Line 2987
	jmp	SHORT $LN4@ubidi_getC
$LN3@ubidi_getC:
; Line 2989
	cmp	DWORD PTR _fn$[ebp], 0
	je	SHORT $LN2@ubidi_getC
; Line 2991
	mov	eax, DWORD PTR _fn$[ebp]
	mov	ecx, DWORD PTR _pBiDi$[ebp]
	mov	edx, DWORD PTR [ecx+356]
	mov	DWORD PTR [eax], edx
$LN2@ubidi_getC:
; Line 2993
	cmp	DWORD PTR _context$[ebp], 0
	je	SHORT $LN4@ubidi_getC
; Line 2995
	mov	eax, DWORD PTR _context$[ebp]
	mov	ecx, DWORD PTR _pBiDi$[ebp]
	mov	edx, DWORD PTR [ecx+360]
	mov	DWORD PTR [eax], edx
$LN4@ubidi_getC:
; Line 2997
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_ubidi_getClassCallback_56 ENDP
_TEXT	ENDS
EXTRN	_ubidi_getClass_56:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _ubidi_getCustomizedClass_56
_TEXT	SEGMENT
_dir$ = -8						; size = 4
_pBiDi$ = 8						; size = 4
_c$ = 12						; size = 4
_ubidi_getCustomizedClass_56 PROC			; COMDAT
; Line 3001
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 3005
	mov	eax, DWORD PTR _pBiDi$[ebp]
	cmp	DWORD PTR [eax+356], 0
	je	SHORT $LN2@ubidi_getC@2
	mov	esi, esp
	mov	eax, DWORD PTR _c$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pBiDi$[ebp]
	mov	edx, DWORD PTR [ecx+360]
	push	edx
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+356]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _dir$[ebp], eax
	cmp	DWORD PTR _dir$[ebp], 23		; 00000017H
	jne	SHORT $LN3@ubidi_getC@2
$LN2@ubidi_getC@2:
; Line 3007
	mov	eax, DWORD PTR _c$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pBiDi$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	_ubidi_getClass_56
	add	esp, 8
	mov	DWORD PTR _dir$[ebp], eax
$LN3@ubidi_getC@2:
; Line 3009
	cmp	DWORD PTR _dir$[ebp], 23		; 00000017H
	jl	SHORT $LN1@ubidi_getC@2
; Line 3010
	mov	DWORD PTR _dir$[ebp], 10		; 0000000aH
$LN1@ubidi_getC@2:
; Line 3012
	mov	eax, DWORD PTR _dir$[ebp]
; Line 3013
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ubidi_getCustomizedClass_56 ENDP
_TEXT	ENDS
END
