; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\mozilla\intl\icu\source\common\ucnv_u8.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_ucnv_fromUnicode_UTF8_OFFSETS_LOGIC_56
PUBLIC	_ucnv_fromUnicode_UTF8_56
PUBLIC	__UTF8Data_56
PUBLIC	__CESU8Data_56
EXTRN	_ucnv_getCompleteUnicodeSet_56:PROC
EXTRN	_ucnv_getNonSurrogateUnicodeSet_56:PROC
CONST	SEGMENT
_offsetsFromUTF8 DD 00H
	DD	00H
	DD	03080H
	DD	0e2080H
	DD	03c82080H
	DD	0fa082080H
	DD	082082080H
_utf8_minChar32 DD 00H
	DD	00H
	DD	080H
	DD	0800H
	DD	010000H
	DD	0ffffffffH
	DD	0ffffffffH
_bytesFromUTF8 DB 01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	06H
	DB	06H
	DB	00H
	DB	00H
_utf8_minLegal DD 00H
	DD	00H
	DD	080H
	DD	0800H
	DD	010000H
_utf8_offsets DD 00H
	DD	00H
	DD	03080H
	DD	0e2080H
	DD	03c82080H
	ORG $+8
__UTF8Impl DD	04H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:_ucnv_toUnicode_UTF8
	DD	FLAT:_ucnv_toUnicode_UTF8_OFFSETS_LOGIC
	DD	FLAT:_ucnv_fromUnicode_UTF8_56
	DD	FLAT:_ucnv_fromUnicode_UTF8_OFFSETS_LOGIC_56
	DD	FLAT:_ucnv_getNextUChar_UTF8
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:_ucnv_getNonSurrogateUnicodeSet_56
	DD	FLAT:_ucnv_UTF8FromUTF8
	DD	FLAT:_ucnv_UTF8FromUTF8
__UTF8StaticData DD 064H
	DB	'UTF-8', 00H
	ORG $+54
	DD	04b8H
	DB	00H
	DB	04H
	DB	01H
	DB	03H
	DB	0efH
	DB	0bfH
	DB	0bdH
	DB	00H
	DB	03H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+4
__UTF8Data_56 DD 0e4H
	DD	0ffffffffH
	DD	00H
	DD	FLAT:__UTF8StaticData
	DB	00H
	DB	00H
	ORG $+2
	DD	FLAT:__UTF8Impl
	DD	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+1
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	ORG $+126
	DD	00H
	DD	00H
	DD	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+1
	DW	00H
	ORG $+2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	ORG $+4
__CESU8Impl DD	01fH
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:_ucnv_toUnicode_UTF8
	DD	FLAT:_ucnv_toUnicode_UTF8_OFFSETS_LOGIC
	DD	FLAT:_ucnv_fromUnicode_UTF8_56
	DD	FLAT:_ucnv_fromUnicode_UTF8_OFFSETS_LOGIC_56
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:_ucnv_getCompleteUnicodeSet_56
	ORG $+8
__CESU8StaticData DD 064H
	DB	'CESU-8', 00H
	ORG $+53
	DD	024b8H
	DB	0ffH
	DB	01fH
	DB	01H
	DB	03H
	DB	0efH
	DB	0bfH
	DB	0bdH
	DB	00H
	DB	03H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+4
__CESU8Data_56 DD 0e4H
	DD	0ffffffffH
	DD	00H
	DD	FLAT:__CESU8StaticData
	DB	00H
	DB	00H
	ORG $+2
	DD	FLAT:__CESU8Impl
	DD	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+1
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	ORG $+126
	DD	00H
	DD	00H
	DD	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+1
	DW	00H
	ORG $+2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
CONST	ENDS
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File d:\mozilla\intl\icu\source\common\ucnv_u8.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT _ucnv_toUnicode_UTF8
_TEXT	SEGMENT
tv149 = -328						; size = 4
_inBytes$ = -128					; size = 4
_i$ = -116						; size = 4
_ch2$ = -104						; size = 4
_ch$ = -92						; size = 4
_isCESU8$ = -77						; size = 1
_toUBytes$ = -68					; size = 4
_targetLimit$ = -56					; size = 4
_sourceLimit$ = -44					; size = 4
_myTarget$ = -32					; size = 4
_mySource$ = -20					; size = 4
_cnv$ = -8						; size = 4
_args$ = 8						; size = 4
_err$ = 12						; size = 4
_ucnv_toUnicode_UTF8 PROC				; COMDAT
; Line 101
	push	ebp
	mov	ebp, esp
	sub	esp, 328				; 00000148H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-328]
	mov	ecx, 82					; 00000052H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 102
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _cnv$[ebp], ecx
; Line 103
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _mySource$[ebp], ecx
; Line 104
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _myTarget$[ebp], ecx
; Line 105
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _sourceLimit$[ebp], ecx
; Line 106
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _targetLimit$[ebp], ecx
; Line 107
	mov	eax, DWORD PTR _cnv$[ebp]
	add	eax, 37					; 00000025H
	mov	DWORD PTR _toUBytes$[ebp], eax
; Line 108
	mov	eax, DWORD PTR _cnv$[ebp]
	push	eax
	call	_hasCESU8Data
	add	esp, 4
	mov	BYTE PTR _isCESU8$[ebp], al
; Line 109
	mov	DWORD PTR _ch2$[ebp], 0
; Line 113
	mov	eax, DWORD PTR _cnv$[ebp]
	cmp	DWORD PTR [eax+44], 0
	je	SHORT $LN16@ucnv_toUni
	mov	eax, DWORD PTR _myTarget$[ebp]
	cmp	eax, DWORD PTR _targetLimit$[ebp]
	jae	SHORT $LN16@ucnv_toUni
; Line 115
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	DWORD PTR _inBytes$[ebp], ecx
; Line 116
	mov	eax, DWORD PTR _cnv$[ebp]
	movsx	ecx, BYTE PTR [eax+36]
	mov	DWORD PTR _i$[ebp], ecx
; Line 117
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	BYTE PTR [eax+36], 0
; Line 119
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	DWORD PTR _ch$[ebp], ecx
; Line 120
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	DWORD PTR [eax+44], 0
; Line 121
	jmp	SHORT $morebytes$8663
$LN16@ucnv_toUni:
; Line 125
	mov	eax, DWORD PTR _mySource$[ebp]
	cmp	eax, DWORD PTR _sourceLimit$[ebp]
	jae	$donefornow$8679
	mov	eax, DWORD PTR _myTarget$[ebp]
	cmp	eax, DWORD PTR _targetLimit$[ebp]
	jae	$donefornow$8679
; Line 127
	mov	eax, DWORD PTR _mySource$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _ch$[ebp], ecx
	mov	edx, DWORD PTR _mySource$[ebp]
	add	edx, 1
	mov	DWORD PTR _mySource$[ebp], edx
; Line 128
	cmp	DWORD PTR _ch$[ebp], 128		; 00000080H
	jae	SHORT $LN14@ucnv_toUni
; Line 130
	mov	eax, DWORD PTR _myTarget$[ebp]
	mov	cx, WORD PTR _ch$[ebp]
	mov	WORD PTR [eax], cx
	mov	edx, DWORD PTR _myTarget$[ebp]
	add	edx, 2
	mov	DWORD PTR _myTarget$[ebp], edx
; Line 132
	jmp	$LN13@ucnv_toUni
$LN14@ucnv_toUni:
; Line 135
	mov	eax, DWORD PTR _toUBytes$[ebp]
	mov	cl, BYTE PTR _ch$[ebp]
	mov	BYTE PTR [eax], cl
; Line 136
	mov	eax, DWORD PTR _ch$[ebp]
	movsx	ecx, BYTE PTR _bytesFromUTF8[eax]
	mov	DWORD PTR _inBytes$[ebp], ecx
; Line 137
	mov	DWORD PTR _i$[ebp], 1
$morebytes$8663:
; Line 140
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _inBytes$[ebp]
	jge	SHORT $LN11@ucnv_toUni
; Line 142
	mov	eax, DWORD PTR _mySource$[ebp]
	cmp	eax, DWORD PTR _sourceLimit$[ebp]
	jae	SHORT $LN10@ucnv_toUni
; Line 144
	mov	eax, DWORD PTR _mySource$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _ch2$[ebp], ecx
	mov	edx, DWORD PTR _toUBytes$[ebp]
	add	edx, DWORD PTR _i$[ebp]
	mov	al, BYTE PTR _ch2$[ebp]
	mov	BYTE PTR [edx], al
; Line 145
	mov	eax, DWORD PTR _ch2$[ebp]
	and	eax, 192				; 000000c0H
	cmp	eax, 128				; 00000080H
	je	SHORT $LN9@ucnv_toUni
; Line 147
	jmp	SHORT $LN11@ucnv_toUni
$LN9@ucnv_toUni:
; Line 149
	mov	eax, DWORD PTR _ch$[ebp]
	shl	eax, 6
	add	eax, DWORD PTR _ch2$[ebp]
	mov	DWORD PTR _ch$[ebp], eax
; Line 150
	mov	eax, DWORD PTR _mySource$[ebp]
	add	eax, 1
	mov	DWORD PTR _mySource$[ebp], eax
; Line 151
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
; Line 153
	jmp	SHORT $LN8@ucnv_toUni
$LN10@ucnv_toUni:
; Line 156
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	ecx, DWORD PTR _ch$[ebp]
	mov	DWORD PTR [eax+44], ecx
; Line 157
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	ecx, DWORD PTR _inBytes$[ebp]
	mov	DWORD PTR [eax+48], ecx
; Line 158
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	cl, BYTE PTR _i$[ebp]
	mov	BYTE PTR [eax+36], cl
; Line 159
	jmp	$donefornow$8679
$LN8@ucnv_toUni:
; Line 161
	jmp	SHORT $morebytes$8663
$LN11@ucnv_toUni:
; Line 164
	mov	eax, DWORD PTR _inBytes$[ebp]
	mov	ecx, DWORD PTR _ch$[ebp]
	sub	ecx, DWORD PTR _offsetsFromUTF8[eax*4]
	mov	DWORD PTR _ch$[ebp], ecx
; Line 179
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _inBytes$[ebp]
	jne	$LN7@ucnv_toUni
	cmp	DWORD PTR _ch$[ebp], 1114111		; 0010ffffH
	ja	$LN7@ucnv_toUni
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _ch$[ebp]
	cmp	ecx, DWORD PTR _utf8_minChar32[eax*4]
	jb	$LN7@ucnv_toUni
	movsx	eax, BYTE PTR _isCESU8$[ebp]
	test	eax, eax
	je	SHORT $LN20@ucnv_toUni
	xor	ecx, ecx
	cmp	DWORD PTR _i$[ebp], 3
	setle	cl
	mov	DWORD PTR tv149[ebp], ecx
	jmp	SHORT $LN21@ucnv_toUni
$LN20@ucnv_toUni:
	mov	edx, DWORD PTR _ch$[ebp]
	and	edx, -2048				; fffff800H
	xor	eax, eax
	cmp	edx, 55296				; 0000d800H
	setne	al
	mov	DWORD PTR tv149[ebp], eax
$LN21@ucnv_toUni:
	cmp	DWORD PTR tv149[ebp], 0
	je	$LN7@ucnv_toUni
; Line 182
	cmp	DWORD PTR _ch$[ebp], 65535		; 0000ffffH
	ja	SHORT $LN6@ucnv_toUni
; Line 185
	mov	eax, DWORD PTR _myTarget$[ebp]
	mov	cx, WORD PTR _ch$[ebp]
	mov	WORD PTR [eax], cx
	mov	edx, DWORD PTR _myTarget$[ebp]
	add	edx, 2
	mov	DWORD PTR _myTarget$[ebp], edx
; Line 187
	jmp	SHORT $LN5@ucnv_toUni
$LN6@ucnv_toUni:
; Line 190
	mov	eax, DWORD PTR _ch$[ebp]
	sub	eax, 65536				; 00010000H
	mov	DWORD PTR _ch$[ebp], eax
; Line 191
	mov	eax, DWORD PTR _ch$[ebp]
	shr	eax, 10					; 0000000aH
	add	eax, 55296				; 0000d800H
	mov	ecx, DWORD PTR _myTarget$[ebp]
	mov	WORD PTR [ecx], ax
	mov	edx, DWORD PTR _myTarget$[ebp]
	add	edx, 2
	mov	DWORD PTR _myTarget$[ebp], edx
; Line 192
	mov	eax, DWORD PTR _ch$[ebp]
	and	eax, 1023				; 000003ffH
	add	eax, 56320				; 0000dc00H
	mov	DWORD PTR _ch$[ebp], eax
; Line 193
	mov	eax, DWORD PTR _myTarget$[ebp]
	cmp	eax, DWORD PTR _targetLimit$[ebp]
	jae	SHORT $LN4@ucnv_toUni
; Line 195
	mov	eax, DWORD PTR _myTarget$[ebp]
	mov	cx, WORD PTR _ch$[ebp]
	mov	WORD PTR [eax], cx
	mov	edx, DWORD PTR _myTarget$[ebp]
	add	edx, 2
	mov	DWORD PTR _myTarget$[ebp], edx
; Line 197
	jmp	SHORT $LN5@ucnv_toUni
$LN4@ucnv_toUni:
; Line 200
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	cx, WORD PTR _ch$[ebp]
	mov	WORD PTR [eax+116], cx
; Line 201
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	BYTE PTR [eax+65], 1
; Line 202
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
; Line 203
	jmp	SHORT $donefornow$8679
$LN5@ucnv_toUni:
; Line 207
	jmp	SHORT $LN13@ucnv_toUni
$LN7@ucnv_toUni:
; Line 209
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	cl, BYTE PTR _i$[ebp]
	mov	BYTE PTR [eax+36], cl
; Line 210
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 12			; 0000000cH
; Line 211
	jmp	SHORT $donefornow$8679
$LN13@ucnv_toUni:
; Line 214
	jmp	$LN16@ucnv_toUni
$donefornow$8679:
; Line 217
	mov	eax, DWORD PTR _mySource$[ebp]
	cmp	eax, DWORD PTR _sourceLimit$[ebp]
	jae	SHORT $LN1@ucnv_toUni
	mov	eax, DWORD PTR _myTarget$[ebp]
	cmp	eax, DWORD PTR _targetLimit$[ebp]
	jb	SHORT $LN1@ucnv_toUni
	mov	eax, DWORD PTR _err$[ebp]
	cmp	DWORD PTR [eax], 0
	jg	SHORT $LN1@ucnv_toUni
; Line 220
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
$LN1@ucnv_toUni:
; Line 223
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _myTarget$[ebp]
	mov	DWORD PTR [eax+16], ecx
; Line 224
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _mySource$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 225
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 328				; 00000148H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ucnv_toUnicode_UTF8 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _hasCESU8Data
_TEXT	SEGMENT
_cnv$ = 8						; size = 4
_hasCESU8Data PROC					; COMDAT
; Line 91
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 95
	mov	eax, DWORD PTR _cnv$[ebp]
	cmp	DWORD PTR [eax+24], OFFSET __CESU8Data_56
	sete	al
; Line 97
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_hasCESU8Data ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _ucnv_toUnicode_UTF8_OFFSETS_LOGIC
_TEXT	SEGMENT
tv152 = -352						; size = 4
_inBytes$ = -152					; size = 4
_i$ = -140						; size = 4
_ch2$ = -128						; size = 4
_ch$ = -116						; size = 4
_isCESU8$ = -101					; size = 1
_toUBytes$ = -92					; size = 4
_targetLimit$ = -80					; size = 4
_sourceLimit$ = -68					; size = 4
_offsetNum$ = -56					; size = 4
_myOffsets$ = -44					; size = 4
_myTarget$ = -32					; size = 4
_mySource$ = -20					; size = 4
_cnv$ = -8						; size = 4
_args$ = 8						; size = 4
_err$ = 12						; size = 4
_ucnv_toUnicode_UTF8_OFFSETS_LOGIC PROC			; COMDAT
; Line 229
	push	ebp
	mov	ebp, esp
	sub	esp, 352				; 00000160H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-352]
	mov	ecx, 88					; 00000058H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 230
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _cnv$[ebp], ecx
; Line 231
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _mySource$[ebp], ecx
; Line 232
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _myTarget$[ebp], ecx
; Line 233
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR _myOffsets$[ebp], ecx
; Line 234
	mov	DWORD PTR _offsetNum$[ebp], 0
; Line 235
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _sourceLimit$[ebp], ecx
; Line 236
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _targetLimit$[ebp], ecx
; Line 237
	mov	eax, DWORD PTR _cnv$[ebp]
	add	eax, 37					; 00000025H
	mov	DWORD PTR _toUBytes$[ebp], eax
; Line 238
	mov	eax, DWORD PTR _cnv$[ebp]
	push	eax
	call	_hasCESU8Data
	add	esp, 4
	mov	BYTE PTR _isCESU8$[ebp], al
; Line 239
	mov	DWORD PTR _ch2$[ebp], 0
; Line 243
	mov	eax, DWORD PTR _cnv$[ebp]
	cmp	DWORD PTR [eax+44], 0
	je	SHORT $LN16@ucnv_toUni@2
	mov	eax, DWORD PTR _myTarget$[ebp]
	cmp	eax, DWORD PTR _targetLimit$[ebp]
	jae	SHORT $LN16@ucnv_toUni@2
; Line 245
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	DWORD PTR _inBytes$[ebp], ecx
; Line 246
	mov	eax, DWORD PTR _cnv$[ebp]
	movsx	ecx, BYTE PTR [eax+36]
	mov	DWORD PTR _i$[ebp], ecx
; Line 247
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	BYTE PTR [eax+36], 0
; Line 249
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	DWORD PTR _ch$[ebp], ecx
; Line 250
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	DWORD PTR [eax+44], 0
; Line 251
	jmp	$morebytes$8715
$LN16@ucnv_toUni@2:
; Line 254
	mov	eax, DWORD PTR _mySource$[ebp]
	cmp	eax, DWORD PTR _sourceLimit$[ebp]
	jae	$donefornow$8731
	mov	eax, DWORD PTR _myTarget$[ebp]
	cmp	eax, DWORD PTR _targetLimit$[ebp]
	jae	$donefornow$8731
; Line 256
	mov	eax, DWORD PTR _mySource$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _ch$[ebp], ecx
	mov	edx, DWORD PTR _mySource$[ebp]
	add	edx, 1
	mov	DWORD PTR _mySource$[ebp], edx
; Line 257
	cmp	DWORD PTR _ch$[ebp], 128		; 00000080H
	jae	SHORT $LN14@ucnv_toUni@2
; Line 259
	mov	eax, DWORD PTR _myTarget$[ebp]
	mov	cx, WORD PTR _ch$[ebp]
	mov	WORD PTR [eax], cx
	mov	edx, DWORD PTR _myTarget$[ebp]
	add	edx, 2
	mov	DWORD PTR _myTarget$[ebp], edx
; Line 260
	mov	eax, DWORD PTR _myOffsets$[ebp]
	mov	ecx, DWORD PTR _offsetNum$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _myOffsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _myOffsets$[ebp], edx
	mov	eax, DWORD PTR _offsetNum$[ebp]
	add	eax, 1
	mov	DWORD PTR _offsetNum$[ebp], eax
; Line 262
	jmp	$LN13@ucnv_toUni@2
$LN14@ucnv_toUni@2:
; Line 264
	mov	eax, DWORD PTR _toUBytes$[ebp]
	mov	cl, BYTE PTR _ch$[ebp]
	mov	BYTE PTR [eax], cl
; Line 265
	mov	eax, DWORD PTR _ch$[ebp]
	movsx	ecx, BYTE PTR _bytesFromUTF8[eax]
	mov	DWORD PTR _inBytes$[ebp], ecx
; Line 266
	mov	DWORD PTR _i$[ebp], 1
$morebytes$8715:
; Line 269
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _inBytes$[ebp]
	jge	$LN11@ucnv_toUni@2
; Line 271
	mov	eax, DWORD PTR _mySource$[ebp]
	cmp	eax, DWORD PTR _sourceLimit$[ebp]
	jae	SHORT $LN10@ucnv_toUni@2
; Line 273
	mov	eax, DWORD PTR _mySource$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _ch2$[ebp], ecx
	mov	edx, DWORD PTR _toUBytes$[ebp]
	add	edx, DWORD PTR _i$[ebp]
	mov	al, BYTE PTR _ch2$[ebp]
	mov	BYTE PTR [edx], al
; Line 274
	mov	eax, DWORD PTR _ch2$[ebp]
	and	eax, 192				; 000000c0H
	cmp	eax, 128				; 00000080H
	je	SHORT $LN9@ucnv_toUni@2
; Line 276
	jmp	SHORT $LN11@ucnv_toUni@2
$LN9@ucnv_toUni@2:
; Line 278
	mov	eax, DWORD PTR _ch$[ebp]
	shl	eax, 6
	add	eax, DWORD PTR _ch2$[ebp]
	mov	DWORD PTR _ch$[ebp], eax
; Line 279
	mov	eax, DWORD PTR _mySource$[ebp]
	add	eax, 1
	mov	DWORD PTR _mySource$[ebp], eax
; Line 280
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
; Line 282
	jmp	SHORT $LN8@ucnv_toUni@2
$LN10@ucnv_toUni@2:
; Line 284
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	ecx, DWORD PTR _ch$[ebp]
	mov	DWORD PTR [eax+44], ecx
; Line 285
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	ecx, DWORD PTR _inBytes$[ebp]
	mov	DWORD PTR [eax+48], ecx
; Line 286
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	cl, BYTE PTR _i$[ebp]
	mov	BYTE PTR [eax+36], cl
; Line 287
	jmp	$donefornow$8731
$LN8@ucnv_toUni@2:
; Line 289
	jmp	$morebytes$8715
$LN11@ucnv_toUni@2:
; Line 292
	mov	eax, DWORD PTR _inBytes$[ebp]
	mov	ecx, DWORD PTR _ch$[ebp]
	sub	ecx, DWORD PTR _offsetsFromUTF8[eax*4]
	mov	DWORD PTR _ch$[ebp], ecx
; Line 307
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _inBytes$[ebp]
	jne	$LN7@ucnv_toUni@2
	cmp	DWORD PTR _ch$[ebp], 1114111		; 0010ffffH
	ja	$LN7@ucnv_toUni@2
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _ch$[ebp]
	cmp	ecx, DWORD PTR _utf8_minChar32[eax*4]
	jb	$LN7@ucnv_toUni@2
	movsx	eax, BYTE PTR _isCESU8$[ebp]
	test	eax, eax
	je	SHORT $LN20@ucnv_toUni@2
	xor	ecx, ecx
	cmp	DWORD PTR _i$[ebp], 3
	setle	cl
	mov	DWORD PTR tv152[ebp], ecx
	jmp	SHORT $LN21@ucnv_toUni@2
$LN20@ucnv_toUni@2:
	mov	edx, DWORD PTR _ch$[ebp]
	and	edx, -2048				; fffff800H
	xor	eax, eax
	cmp	edx, 55296				; 0000d800H
	setne	al
	mov	DWORD PTR tv152[ebp], eax
$LN21@ucnv_toUni@2:
	cmp	DWORD PTR tv152[ebp], 0
	je	$LN7@ucnv_toUni@2
; Line 310
	cmp	DWORD PTR _ch$[ebp], 65535		; 0000ffffH
	ja	SHORT $LN6@ucnv_toUni@2
; Line 313
	mov	eax, DWORD PTR _myTarget$[ebp]
	mov	cx, WORD PTR _ch$[ebp]
	mov	WORD PTR [eax], cx
	mov	edx, DWORD PTR _myTarget$[ebp]
	add	edx, 2
	mov	DWORD PTR _myTarget$[ebp], edx
; Line 314
	mov	eax, DWORD PTR _myOffsets$[ebp]
	mov	ecx, DWORD PTR _offsetNum$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _myOffsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _myOffsets$[ebp], edx
; Line 316
	jmp	$LN5@ucnv_toUni@2
$LN6@ucnv_toUni@2:
; Line 319
	mov	eax, DWORD PTR _ch$[ebp]
	sub	eax, 65536				; 00010000H
	mov	DWORD PTR _ch$[ebp], eax
; Line 320
	mov	eax, DWORD PTR _ch$[ebp]
	shr	eax, 10					; 0000000aH
	add	eax, 55296				; 0000d800H
	mov	ecx, DWORD PTR _myTarget$[ebp]
	mov	WORD PTR [ecx], ax
	mov	edx, DWORD PTR _myTarget$[ebp]
	add	edx, 2
	mov	DWORD PTR _myTarget$[ebp], edx
; Line 321
	mov	eax, DWORD PTR _myOffsets$[ebp]
	mov	ecx, DWORD PTR _offsetNum$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _myOffsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _myOffsets$[ebp], edx
; Line 322
	mov	eax, DWORD PTR _ch$[ebp]
	and	eax, 1023				; 000003ffH
	add	eax, 56320				; 0000dc00H
	mov	DWORD PTR _ch$[ebp], eax
; Line 323
	mov	eax, DWORD PTR _myTarget$[ebp]
	cmp	eax, DWORD PTR _targetLimit$[ebp]
	jae	SHORT $LN4@ucnv_toUni@2
; Line 325
	mov	eax, DWORD PTR _myTarget$[ebp]
	mov	cx, WORD PTR _ch$[ebp]
	mov	WORD PTR [eax], cx
	mov	edx, DWORD PTR _myTarget$[ebp]
	add	edx, 2
	mov	DWORD PTR _myTarget$[ebp], edx
; Line 326
	mov	eax, DWORD PTR _myOffsets$[ebp]
	mov	ecx, DWORD PTR _offsetNum$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _myOffsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _myOffsets$[ebp], edx
; Line 328
	jmp	SHORT $LN5@ucnv_toUni@2
$LN4@ucnv_toUni@2:
; Line 330
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	cx, WORD PTR _ch$[ebp]
	mov	WORD PTR [eax+116], cx
; Line 331
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	BYTE PTR [eax+65], 1
; Line 332
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
$LN5@ucnv_toUni@2:
; Line 335
	mov	eax, DWORD PTR _offsetNum$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR _offsetNum$[ebp], eax
; Line 337
	jmp	SHORT $LN13@ucnv_toUni@2
$LN7@ucnv_toUni@2:
; Line 339
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	cl, BYTE PTR _i$[ebp]
	mov	BYTE PTR [eax+36], cl
; Line 340
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 12			; 0000000cH
; Line 341
	jmp	SHORT $donefornow$8731
$LN13@ucnv_toUni@2:
; Line 344
	jmp	$LN16@ucnv_toUni@2
$donefornow$8731:
; Line 347
	mov	eax, DWORD PTR _mySource$[ebp]
	cmp	eax, DWORD PTR _sourceLimit$[ebp]
	jae	SHORT $LN1@ucnv_toUni@2
	mov	eax, DWORD PTR _myTarget$[ebp]
	cmp	eax, DWORD PTR _targetLimit$[ebp]
	jb	SHORT $LN1@ucnv_toUni@2
	mov	eax, DWORD PTR _err$[ebp]
	cmp	DWORD PTR [eax], 0
	jg	SHORT $LN1@ucnv_toUni@2
; Line 349
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
$LN1@ucnv_toUni@2:
; Line 352
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _myTarget$[ebp]
	mov	DWORD PTR [eax+16], ecx
; Line 353
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _mySource$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 354
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _myOffsets$[ebp]
	mov	DWORD PTR [eax+24], ecx
; Line 355
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 352				; 00000160H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ucnv_toUnicode_UTF8_OFFSETS_LOGIC ENDP
_TEXT	ENDS
EXTRN	@_RTC_CheckStackVars@8:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _ucnv_fromUnicode_UTF8_56
_TEXT	SEGMENT
tv153 = -316						; size = 4
_isNotCESU8$ = -113					; size = 1
_indexToWrite$ = -104					; size = 4
_tempBuf$ = -92						; size = 4
_ch$ = -80						; size = 4
_tempPtr$ = -68						; size = 4
_targetLimit$ = -56					; size = 4
_myTarget$ = -44					; size = 4
_sourceLimit$ = -32					; size = 4
_mySource$ = -20					; size = 4
_cnv$ = -8						; size = 4
_args$ = 8						; size = 4
_err$ = 12						; size = 4
_ucnv_fromUnicode_UTF8_56 PROC				; COMDAT
; Line 359
	push	ebp
	mov	ebp, esp
	sub	esp, 316				; 0000013cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-316]
	mov	ecx, 79					; 0000004fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 360
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _cnv$[ebp], ecx
; Line 361
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _mySource$[ebp], ecx
; Line 362
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _sourceLimit$[ebp], ecx
; Line 363
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _myTarget$[ebp], ecx
; Line 364
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _targetLimit$[ebp], ecx
; Line 369
	mov	eax, DWORD PTR _cnv$[ebp]
	push	eax
	call	_hasCESU8Data
	add	esp, 4
	movsx	ecx, al
	neg	ecx
	sbb	ecx, ecx
	add	ecx, 1
	mov	BYTE PTR _isNotCESU8$[ebp], cl
; Line 371
	mov	eax, DWORD PTR _cnv$[ebp]
	cmp	DWORD PTR [eax+56], 0
	je	SHORT $LN23@ucnv_fromU
	mov	eax, DWORD PTR _myTarget$[ebp]
	cmp	eax, DWORD PTR _targetLimit$[ebp]
	jae	SHORT $LN23@ucnv_fromU
; Line 373
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	DWORD PTR _ch$[ebp], ecx
; Line 374
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	DWORD PTR [eax+56], 0
; Line 375
	jmp	$lowsurrogate$8763
$LN23@ucnv_fromU:
; Line 378
	mov	eax, DWORD PTR _mySource$[ebp]
	cmp	eax, DWORD PTR _sourceLimit$[ebp]
	jae	$LN22@ucnv_fromU
	mov	eax, DWORD PTR _myTarget$[ebp]
	cmp	eax, DWORD PTR _targetLimit$[ebp]
	jae	$LN22@ucnv_fromU
; Line 380
	mov	eax, DWORD PTR _mySource$[ebp]
	movzx	ecx, WORD PTR [eax]
	mov	DWORD PTR _ch$[ebp], ecx
	mov	edx, DWORD PTR _mySource$[ebp]
	add	edx, 2
	mov	DWORD PTR _mySource$[ebp], edx
; Line 382
	cmp	DWORD PTR _ch$[ebp], 128		; 00000080H
	jge	SHORT $LN21@ucnv_fromU
; Line 384
	mov	eax, DWORD PTR _myTarget$[ebp]
	mov	cl, BYTE PTR _ch$[ebp]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _myTarget$[ebp]
	add	edx, 1
	mov	DWORD PTR _myTarget$[ebp], edx
	jmp	$LN20@ucnv_fromU
$LN21@ucnv_fromU:
; Line 386
	cmp	DWORD PTR _ch$[ebp], 2048		; 00000800H
	jge	SHORT $LN19@ucnv_fromU
; Line 388
	mov	eax, DWORD PTR _ch$[ebp]
	sar	eax, 6
	or	eax, 192				; 000000c0H
	mov	ecx, DWORD PTR _myTarget$[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _myTarget$[ebp]
	add	edx, 1
	mov	DWORD PTR _myTarget$[ebp], edx
; Line 389
	mov	eax, DWORD PTR _myTarget$[ebp]
	cmp	eax, DWORD PTR _targetLimit$[ebp]
	jae	SHORT $LN18@ucnv_fromU
; Line 391
	mov	eax, DWORD PTR _ch$[ebp]
	and	eax, 63					; 0000003fH
	or	eax, 128				; 00000080H
	mov	ecx, DWORD PTR _myTarget$[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _myTarget$[ebp]
	add	edx, 1
	mov	DWORD PTR _myTarget$[ebp], edx
; Line 393
	jmp	SHORT $LN17@ucnv_fromU
$LN18@ucnv_fromU:
; Line 395
	mov	eax, DWORD PTR _ch$[ebp]
	and	eax, 63					; 0000003fH
	or	eax, 128				; 00000080H
	mov	ecx, DWORD PTR _cnv$[ebp]
	mov	BYTE PTR [ecx+76], al
; Line 396
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	BYTE PTR [eax+63], 1
; Line 397
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
$LN17@ucnv_fromU:
; Line 400
	jmp	$LN20@ucnv_fromU
$LN19@ucnv_fromU:
; Line 402
	mov	eax, DWORD PTR _ch$[ebp]
	and	eax, -2048				; fffff800H
	cmp	eax, 55296				; 0000d800H
	jne	SHORT $LN15@ucnv_fromU
	movsx	eax, BYTE PTR _isNotCESU8$[ebp]
	test	eax, eax
	je	SHORT $LN15@ucnv_fromU
$lowsurrogate$8763:
; Line 404
	mov	eax, DWORD PTR _mySource$[ebp]
	cmp	eax, DWORD PTR _sourceLimit$[ebp]
	jae	SHORT $LN14@ucnv_fromU
; Line 406
	mov	eax, DWORD PTR _ch$[ebp]
	and	eax, 1024				; 00000400H
	jne	SHORT $LN13@ucnv_fromU
	mov	eax, DWORD PTR _mySource$[ebp]
	movzx	ecx, WORD PTR [eax]
	and	ecx, -1024				; fffffc00H
	cmp	ecx, 56320				; 0000dc00H
	jne	SHORT $LN13@ucnv_fromU
; Line 408
	mov	eax, DWORD PTR _ch$[ebp]
	shl	eax, 10					; 0000000aH
	mov	ecx, DWORD PTR _mySource$[ebp]
	movzx	edx, WORD PTR [ecx]
	lea	eax, DWORD PTR [eax+edx-56613888]
	mov	DWORD PTR _ch$[ebp], eax
; Line 409
	mov	eax, DWORD PTR _mySource$[ebp]
	add	eax, 2
	mov	DWORD PTR _mySource$[ebp], eax
; Line 412
	jmp	SHORT $LN12@ucnv_fromU
$LN13@ucnv_fromU:
; Line 415
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	ecx, DWORD PTR _ch$[ebp]
	mov	DWORD PTR [eax+56], ecx
; Line 416
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 12			; 0000000cH
; Line 417
	jmp	$LN22@ucnv_fromU
$LN12@ucnv_fromU:
; Line 420
	jmp	SHORT $LN15@ucnv_fromU
$LN14@ucnv_fromU:
; Line 422
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	ecx, DWORD PTR _ch$[ebp]
	mov	DWORD PTR [eax+56], ecx
; Line 423
	jmp	$LN22@ucnv_fromU
$LN15@ucnv_fromU:
; Line 429
	mov	eax, DWORD PTR _targetLimit$[ebp]
	sub	eax, DWORD PTR _myTarget$[ebp]
	cmp	eax, 4
	jl	SHORT $LN27@ucnv_fromU
	mov	ecx, DWORD PTR _myTarget$[ebp]
	mov	DWORD PTR tv153[ebp], ecx
	jmp	SHORT $LN28@ucnv_fromU
$LN27@ucnv_fromU:
	lea	edx, DWORD PTR _tempBuf$[ebp]
	mov	DWORD PTR tv153[ebp], edx
$LN28@ucnv_fromU:
	mov	eax, DWORD PTR tv153[ebp]
	mov	DWORD PTR _tempPtr$[ebp], eax
; Line 431
	cmp	DWORD PTR _ch$[ebp], 65535		; 0000ffffH
	jg	SHORT $LN10@ucnv_fromU
; Line 432
	mov	DWORD PTR _indexToWrite$[ebp], 2
; Line 433
	mov	eax, DWORD PTR _ch$[ebp]
	sar	eax, 12					; 0000000cH
	or	eax, 224				; 000000e0H
	mov	ecx, DWORD PTR _tempPtr$[ebp]
	mov	BYTE PTR [ecx], al
; Line 435
	jmp	SHORT $LN9@ucnv_fromU
$LN10@ucnv_fromU:
; Line 436
	mov	DWORD PTR _indexToWrite$[ebp], 3
; Line 437
	mov	eax, DWORD PTR _ch$[ebp]
	sar	eax, 18					; 00000012H
	or	eax, 240				; 000000f0H
	mov	ecx, DWORD PTR _tempPtr$[ebp]
	mov	BYTE PTR [ecx], al
; Line 438
	mov	eax, DWORD PTR _ch$[ebp]
	sar	eax, 12					; 0000000cH
	and	eax, 63					; 0000003fH
	or	eax, 128				; 00000080H
	mov	ecx, DWORD PTR _tempPtr$[ebp]
	mov	BYTE PTR [ecx+1], al
$LN9@ucnv_fromU:
; Line 440
	mov	eax, DWORD PTR _ch$[ebp]
	sar	eax, 6
	and	eax, 63					; 0000003fH
	or	eax, 128				; 00000080H
	mov	ecx, DWORD PTR _tempPtr$[ebp]
	add	ecx, DWORD PTR _indexToWrite$[ebp]
	mov	BYTE PTR [ecx-1], al
; Line 441
	mov	eax, DWORD PTR _ch$[ebp]
	and	eax, 63					; 0000003fH
	or	eax, 128				; 00000080H
	mov	ecx, DWORD PTR _tempPtr$[ebp]
	add	ecx, DWORD PTR _indexToWrite$[ebp]
	mov	BYTE PTR [ecx], al
; Line 443
	mov	eax, DWORD PTR _tempPtr$[ebp]
	cmp	eax, DWORD PTR _myTarget$[ebp]
	jne	SHORT $LN8@ucnv_fromU
; Line 445
	mov	eax, DWORD PTR _indexToWrite$[ebp]
	mov	ecx, DWORD PTR _myTarget$[ebp]
	lea	edx, DWORD PTR [ecx+eax+1]
	mov	DWORD PTR _myTarget$[ebp], edx
; Line 447
	jmp	SHORT $LN20@ucnv_fromU
$LN8@ucnv_fromU:
; Line 449
	jmp	SHORT $LN6@ucnv_fromU
$LN5@ucnv_fromU:
	mov	eax, DWORD PTR _tempPtr$[ebp]
	add	eax, 1
	mov	DWORD PTR _tempPtr$[ebp], eax
$LN6@ucnv_fromU:
	mov	eax, DWORD PTR _indexToWrite$[ebp]
	lea	ecx, DWORD PTR _tempBuf$[ebp+eax]
	cmp	DWORD PTR _tempPtr$[ebp], ecx
	ja	SHORT $LN20@ucnv_fromU
; Line 450
	mov	eax, DWORD PTR _myTarget$[ebp]
	cmp	eax, DWORD PTR _targetLimit$[ebp]
	jae	SHORT $LN3@ucnv_fromU
; Line 451
	mov	eax, DWORD PTR _myTarget$[ebp]
	mov	ecx, DWORD PTR _tempPtr$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl
	mov	eax, DWORD PTR _myTarget$[ebp]
	add	eax, 1
	mov	DWORD PTR _myTarget$[ebp], eax
; Line 453
	jmp	SHORT $LN2@ucnv_fromU
$LN3@ucnv_fromU:
; Line 454
	mov	eax, DWORD PTR _cnv$[ebp]
	movsx	ecx, BYTE PTR [eax+63]
	mov	edx, DWORD PTR _cnv$[ebp]
	mov	eax, DWORD PTR _tempPtr$[ebp]
	mov	al, BYTE PTR [eax]
	mov	BYTE PTR [edx+ecx+76], al
	mov	ecx, DWORD PTR _cnv$[ebp]
	mov	dl, BYTE PTR [ecx+63]
	add	dl, 1
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	BYTE PTR [eax+63], dl
; Line 455
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
$LN2@ucnv_fromU:
; Line 457
	jmp	SHORT $LN5@ucnv_fromU
$LN20@ucnv_fromU:
; Line 460
	jmp	$LN23@ucnv_fromU
$LN22@ucnv_fromU:
; Line 462
	mov	eax, DWORD PTR _mySource$[ebp]
	cmp	eax, DWORD PTR _sourceLimit$[ebp]
	jae	SHORT $LN1@ucnv_fromU
	mov	eax, DWORD PTR _myTarget$[ebp]
	cmp	eax, DWORD PTR _targetLimit$[ebp]
	jb	SHORT $LN1@ucnv_fromU
	mov	eax, DWORD PTR _err$[ebp]
	cmp	DWORD PTR [eax], 0
	jg	SHORT $LN1@ucnv_fromU
; Line 464
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
$LN1@ucnv_fromU:
; Line 467
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _myTarget$[ebp]
	mov	DWORD PTR [eax+16], ecx
; Line 468
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _mySource$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 469
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN31@ucnv_fromU
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 316				; 0000013cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN31@ucnv_fromU:
	DD	1
	DD	$LN30@ucnv_fromU
$LN30@ucnv_fromU:
	DD	-92					; ffffffa4H
	DD	4
	DD	$LN29@ucnv_fromU
$LN29@ucnv_fromU:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	66					; 00000042H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
_ucnv_fromUnicode_UTF8_56 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _ucnv_fromUnicode_UTF8_OFFSETS_LOGIC_56
_TEXT	SEGMENT
tv161 = -352						; size = 4
_isNotCESU8$ = -149					; size = 1
_tempBuf$ = -140					; size = 4
_indexToWrite$ = -128					; size = 4
_nextSourceIndex$ = -116				; size = 4
_offsetNum$ = -104					; size = 4
_ch$ = -92						; size = 4
_tempPtr$ = -80						; size = 4
_targetLimit$ = -68					; size = 4
_myTarget$ = -56					; size = 4
_sourceLimit$ = -44					; size = 4
_myOffsets$ = -32					; size = 4
_mySource$ = -20					; size = 4
_cnv$ = -8						; size = 4
_args$ = 8						; size = 4
_err$ = 12						; size = 4
_ucnv_fromUnicode_UTF8_OFFSETS_LOGIC_56 PROC		; COMDAT
; Line 473
	push	ebp
	mov	ebp, esp
	sub	esp, 352				; 00000160H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-352]
	mov	ecx, 88					; 00000058H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 474
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _cnv$[ebp], ecx
; Line 475
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _mySource$[ebp], ecx
; Line 476
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR _myOffsets$[ebp], ecx
; Line 477
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _sourceLimit$[ebp], ecx
; Line 478
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _myTarget$[ebp], ecx
; Line 479
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _targetLimit$[ebp], ecx
; Line 485
	mov	eax, DWORD PTR _cnv$[ebp]
	push	eax
	call	_hasCESU8Data
	add	esp, 4
	movsx	ecx, al
	neg	ecx
	sbb	ecx, ecx
	add	ecx, 1
	mov	BYTE PTR _isNotCESU8$[ebp], cl
; Line 487
	mov	eax, DWORD PTR _cnv$[ebp]
	cmp	DWORD PTR [eax+56], 0
	je	SHORT $LN26@ucnv_fromU@2
	mov	eax, DWORD PTR _myTarget$[ebp]
	cmp	eax, DWORD PTR _targetLimit$[ebp]
	jae	SHORT $LN26@ucnv_fromU@2
; Line 489
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	DWORD PTR _ch$[ebp], ecx
; Line 490
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	DWORD PTR [eax+56], 0
; Line 491
	mov	DWORD PTR _offsetNum$[ebp], -1
; Line 492
	mov	DWORD PTR _nextSourceIndex$[ebp], 0
; Line 493
	jmp	$lowsurrogate$8821
; Line 494
	jmp	SHORT $LN24@ucnv_fromU@2
$LN26@ucnv_fromU@2:
; Line 495
	mov	DWORD PTR _offsetNum$[ebp], 0
$LN24@ucnv_fromU@2:
; Line 498
	mov	eax, DWORD PTR _mySource$[ebp]
	cmp	eax, DWORD PTR _sourceLimit$[ebp]
	jae	$LN23@ucnv_fromU@2
	mov	eax, DWORD PTR _myTarget$[ebp]
	cmp	eax, DWORD PTR _targetLimit$[ebp]
	jae	$LN23@ucnv_fromU@2
; Line 500
	mov	eax, DWORD PTR _mySource$[ebp]
	movzx	ecx, WORD PTR [eax]
	mov	DWORD PTR _ch$[ebp], ecx
	mov	edx, DWORD PTR _mySource$[ebp]
	add	edx, 2
	mov	DWORD PTR _mySource$[ebp], edx
; Line 502
	cmp	DWORD PTR _ch$[ebp], 128		; 00000080H
	jge	SHORT $LN22@ucnv_fromU@2
; Line 504
	mov	eax, DWORD PTR _myOffsets$[ebp]
	mov	ecx, DWORD PTR _offsetNum$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _myOffsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _myOffsets$[ebp], edx
	mov	eax, DWORD PTR _offsetNum$[ebp]
	add	eax, 1
	mov	DWORD PTR _offsetNum$[ebp], eax
; Line 505
	mov	eax, DWORD PTR _myTarget$[ebp]
	mov	cl, BYTE PTR _ch$[ebp]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _myTarget$[ebp]
	add	edx, 1
	mov	DWORD PTR _myTarget$[ebp], edx
	jmp	$LN21@ucnv_fromU@2
$LN22@ucnv_fromU@2:
; Line 507
	cmp	DWORD PTR _ch$[ebp], 2048		; 00000800H
	jge	$LN20@ucnv_fromU@2
; Line 509
	mov	eax, DWORD PTR _myOffsets$[ebp]
	mov	ecx, DWORD PTR _offsetNum$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _myOffsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _myOffsets$[ebp], edx
; Line 510
	mov	eax, DWORD PTR _ch$[ebp]
	sar	eax, 6
	or	eax, 192				; 000000c0H
	mov	ecx, DWORD PTR _myTarget$[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _myTarget$[ebp]
	add	edx, 1
	mov	DWORD PTR _myTarget$[ebp], edx
; Line 511
	mov	eax, DWORD PTR _myTarget$[ebp]
	cmp	eax, DWORD PTR _targetLimit$[ebp]
	jae	SHORT $LN19@ucnv_fromU@2
; Line 513
	mov	eax, DWORD PTR _myOffsets$[ebp]
	mov	ecx, DWORD PTR _offsetNum$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _myOffsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _myOffsets$[ebp], edx
	mov	eax, DWORD PTR _offsetNum$[ebp]
	add	eax, 1
	mov	DWORD PTR _offsetNum$[ebp], eax
; Line 514
	mov	eax, DWORD PTR _ch$[ebp]
	and	eax, 63					; 0000003fH
	or	eax, 128				; 00000080H
	mov	ecx, DWORD PTR _myTarget$[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _myTarget$[ebp]
	add	edx, 1
	mov	DWORD PTR _myTarget$[ebp], edx
; Line 516
	jmp	SHORT $LN18@ucnv_fromU@2
$LN19@ucnv_fromU@2:
; Line 518
	mov	eax, DWORD PTR _ch$[ebp]
	and	eax, 63					; 0000003fH
	or	eax, 128				; 00000080H
	mov	ecx, DWORD PTR _cnv$[ebp]
	mov	BYTE PTR [ecx+76], al
; Line 519
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	BYTE PTR [eax+63], 1
; Line 520
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
$LN18@ucnv_fromU@2:
; Line 523
	jmp	$LN21@ucnv_fromU@2
$LN20@ucnv_fromU@2:
; Line 526
	mov	eax, DWORD PTR _offsetNum$[ebp]
	add	eax, 1
	mov	DWORD PTR _nextSourceIndex$[ebp], eax
; Line 528
	mov	eax, DWORD PTR _ch$[ebp]
	and	eax, -2048				; fffff800H
	cmp	eax, 55296				; 0000d800H
	jne	$LN16@ucnv_fromU@2
	movsx	eax, BYTE PTR _isNotCESU8$[ebp]
	test	eax, eax
	je	SHORT $LN16@ucnv_fromU@2
$lowsurrogate$8821:
; Line 530
	mov	eax, DWORD PTR _mySource$[ebp]
	cmp	eax, DWORD PTR _sourceLimit$[ebp]
	jae	SHORT $LN15@ucnv_fromU@2
; Line 532
	mov	eax, DWORD PTR _ch$[ebp]
	and	eax, 1024				; 00000400H
	jne	SHORT $LN14@ucnv_fromU@2
	mov	eax, DWORD PTR _mySource$[ebp]
	movzx	ecx, WORD PTR [eax]
	and	ecx, -1024				; fffffc00H
	cmp	ecx, 56320				; 0000dc00H
	jne	SHORT $LN14@ucnv_fromU@2
; Line 534
	mov	eax, DWORD PTR _ch$[ebp]
	shl	eax, 10					; 0000000aH
	mov	ecx, DWORD PTR _mySource$[ebp]
	movzx	edx, WORD PTR [ecx]
	lea	eax, DWORD PTR [eax+edx-56613888]
	mov	DWORD PTR _ch$[ebp], eax
; Line 535
	mov	eax, DWORD PTR _mySource$[ebp]
	add	eax, 2
	mov	DWORD PTR _mySource$[ebp], eax
; Line 536
	mov	eax, DWORD PTR _nextSourceIndex$[ebp]
	add	eax, 1
	mov	DWORD PTR _nextSourceIndex$[ebp], eax
; Line 539
	jmp	SHORT $LN13@ucnv_fromU@2
$LN14@ucnv_fromU@2:
; Line 542
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	ecx, DWORD PTR _ch$[ebp]
	mov	DWORD PTR [eax+56], ecx
; Line 543
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 12			; 0000000cH
; Line 544
	jmp	$LN23@ucnv_fromU@2
$LN13@ucnv_fromU@2:
; Line 547
	jmp	SHORT $LN16@ucnv_fromU@2
$LN15@ucnv_fromU@2:
; Line 549
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	ecx, DWORD PTR _ch$[ebp]
	mov	DWORD PTR [eax+56], ecx
; Line 550
	jmp	$LN23@ucnv_fromU@2
$LN16@ucnv_fromU@2:
; Line 556
	mov	eax, DWORD PTR _targetLimit$[ebp]
	sub	eax, DWORD PTR _myTarget$[ebp]
	cmp	eax, 4
	jl	SHORT $LN29@ucnv_fromU@2
	mov	ecx, DWORD PTR _myTarget$[ebp]
	mov	DWORD PTR tv161[ebp], ecx
	jmp	SHORT $LN30@ucnv_fromU@2
$LN29@ucnv_fromU@2:
	lea	edx, DWORD PTR _tempBuf$[ebp]
	mov	DWORD PTR tv161[ebp], edx
$LN30@ucnv_fromU@2:
	mov	eax, DWORD PTR tv161[ebp]
	mov	DWORD PTR _tempPtr$[ebp], eax
; Line 558
	cmp	DWORD PTR _ch$[ebp], 65535		; 0000ffffH
	jg	SHORT $LN11@ucnv_fromU@2
; Line 559
	mov	DWORD PTR _indexToWrite$[ebp], 2
; Line 560
	mov	eax, DWORD PTR _ch$[ebp]
	sar	eax, 12					; 0000000cH
	or	eax, 224				; 000000e0H
	mov	ecx, DWORD PTR _tempPtr$[ebp]
	mov	BYTE PTR [ecx], al
; Line 562
	jmp	SHORT $LN10@ucnv_fromU@2
$LN11@ucnv_fromU@2:
; Line 563
	mov	DWORD PTR _indexToWrite$[ebp], 3
; Line 564
	mov	eax, DWORD PTR _ch$[ebp]
	sar	eax, 18					; 00000012H
	or	eax, 240				; 000000f0H
	mov	ecx, DWORD PTR _tempPtr$[ebp]
	mov	BYTE PTR [ecx], al
; Line 565
	mov	eax, DWORD PTR _ch$[ebp]
	sar	eax, 12					; 0000000cH
	and	eax, 63					; 0000003fH
	or	eax, 128				; 00000080H
	mov	ecx, DWORD PTR _tempPtr$[ebp]
	mov	BYTE PTR [ecx+1], al
$LN10@ucnv_fromU@2:
; Line 567
	mov	eax, DWORD PTR _ch$[ebp]
	sar	eax, 6
	and	eax, 63					; 0000003fH
	or	eax, 128				; 00000080H
	mov	ecx, DWORD PTR _tempPtr$[ebp]
	add	ecx, DWORD PTR _indexToWrite$[ebp]
	mov	BYTE PTR [ecx-1], al
; Line 568
	mov	eax, DWORD PTR _ch$[ebp]
	and	eax, 63					; 0000003fH
	or	eax, 128				; 00000080H
	mov	ecx, DWORD PTR _tempPtr$[ebp]
	add	ecx, DWORD PTR _indexToWrite$[ebp]
	mov	BYTE PTR [ecx], al
; Line 570
	mov	eax, DWORD PTR _tempPtr$[ebp]
	cmp	eax, DWORD PTR _myTarget$[ebp]
	jne	SHORT $LN9@ucnv_fromU@2
; Line 572
	mov	eax, DWORD PTR _indexToWrite$[ebp]
	mov	ecx, DWORD PTR _myTarget$[ebp]
	lea	edx, DWORD PTR [ecx+eax+1]
	mov	DWORD PTR _myTarget$[ebp], edx
; Line 573
	mov	eax, DWORD PTR _myOffsets$[ebp]
	mov	ecx, DWORD PTR _offsetNum$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 574
	mov	eax, DWORD PTR _myOffsets$[ebp]
	mov	ecx, DWORD PTR _offsetNum$[ebp]
	mov	DWORD PTR [eax+4], ecx
; Line 575
	mov	eax, DWORD PTR _myOffsets$[ebp]
	mov	ecx, DWORD PTR _offsetNum$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 576
	cmp	DWORD PTR _indexToWrite$[ebp], 3
	jl	SHORT $LN8@ucnv_fromU@2
; Line 577
	mov	eax, DWORD PTR _myOffsets$[ebp]
	mov	ecx, DWORD PTR _offsetNum$[ebp]
	mov	DWORD PTR [eax+12], ecx
$LN8@ucnv_fromU@2:
; Line 579
	mov	eax, DWORD PTR _indexToWrite$[ebp]
	mov	ecx, DWORD PTR _myOffsets$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4+4]
	mov	DWORD PTR _myOffsets$[ebp], edx
; Line 581
	jmp	SHORT $LN7@ucnv_fromU@2
$LN9@ucnv_fromU@2:
; Line 583
	jmp	SHORT $LN6@ucnv_fromU@2
$LN5@ucnv_fromU@2:
	mov	eax, DWORD PTR _tempPtr$[ebp]
	add	eax, 1
	mov	DWORD PTR _tempPtr$[ebp], eax
$LN6@ucnv_fromU@2:
	mov	eax, DWORD PTR _indexToWrite$[ebp]
	lea	ecx, DWORD PTR _tempBuf$[ebp+eax]
	cmp	DWORD PTR _tempPtr$[ebp], ecx
	ja	SHORT $LN7@ucnv_fromU@2
; Line 584
	mov	eax, DWORD PTR _myTarget$[ebp]
	cmp	eax, DWORD PTR _targetLimit$[ebp]
	jae	SHORT $LN3@ucnv_fromU@2
; Line 586
	mov	eax, DWORD PTR _myOffsets$[ebp]
	mov	ecx, DWORD PTR _offsetNum$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _myOffsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _myOffsets$[ebp], edx
; Line 587
	mov	eax, DWORD PTR _myTarget$[ebp]
	mov	ecx, DWORD PTR _tempPtr$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl
	mov	eax, DWORD PTR _myTarget$[ebp]
	add	eax, 1
	mov	DWORD PTR _myTarget$[ebp], eax
; Line 589
	jmp	SHORT $LN2@ucnv_fromU@2
$LN3@ucnv_fromU@2:
; Line 591
	mov	eax, DWORD PTR _cnv$[ebp]
	movsx	ecx, BYTE PTR [eax+63]
	mov	edx, DWORD PTR _cnv$[ebp]
	mov	eax, DWORD PTR _tempPtr$[ebp]
	mov	al, BYTE PTR [eax]
	mov	BYTE PTR [edx+ecx+76], al
	mov	ecx, DWORD PTR _cnv$[ebp]
	mov	dl, BYTE PTR [ecx+63]
	add	dl, 1
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	BYTE PTR [eax+63], dl
; Line 592
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
$LN2@ucnv_fromU@2:
; Line 594
	jmp	SHORT $LN5@ucnv_fromU@2
$LN7@ucnv_fromU@2:
; Line 596
	mov	eax, DWORD PTR _nextSourceIndex$[ebp]
	mov	DWORD PTR _offsetNum$[ebp], eax
$LN21@ucnv_fromU@2:
; Line 598
	jmp	$LN24@ucnv_fromU@2
$LN23@ucnv_fromU@2:
; Line 600
	mov	eax, DWORD PTR _mySource$[ebp]
	cmp	eax, DWORD PTR _sourceLimit$[ebp]
	jae	SHORT $LN1@ucnv_fromU@2
	mov	eax, DWORD PTR _myTarget$[ebp]
	cmp	eax, DWORD PTR _targetLimit$[ebp]
	jb	SHORT $LN1@ucnv_fromU@2
	mov	eax, DWORD PTR _err$[ebp]
	cmp	DWORD PTR [eax], 0
	jg	SHORT $LN1@ucnv_fromU@2
; Line 602
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
$LN1@ucnv_fromU@2:
; Line 605
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _myTarget$[ebp]
	mov	DWORD PTR [eax+16], ecx
; Line 606
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _mySource$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 607
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _myOffsets$[ebp]
	mov	DWORD PTR [eax+24], ecx
; Line 608
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN33@ucnv_fromU@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 352				; 00000160H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN33@ucnv_fromU@2:
	DD	1
	DD	$LN32@ucnv_fromU@2
$LN32@ucnv_fromU@2:
	DD	-140					; ffffff74H
	DD	4
	DD	$LN31@ucnv_fromU@2
$LN31@ucnv_fromU@2:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	66					; 00000042H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
_ucnv_fromUnicode_UTF8_OFFSETS_LOGIC_56 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _ucnv_getNextUChar_UTF8
_TEXT	SEGMENT
tv136 = -292						; size = 4
_isLegalSequence$ = -89					; size = 1
_i$ = -77						; size = 1
_ch$ = -68						; size = 4
_myByte$ = -53						; size = 1
_extraBytesToWrite$ = -44				; size = 2
_source$ = -32						; size = 4
_sourceInitial$ = -20					; size = 4
_cnv$ = -8						; size = 4
_args$ = 8						; size = 4
_err$ = 12						; size = 4
_ucnv_getNextUChar_UTF8 PROC				; COMDAT
; Line 611
	push	ebp
	mov	ebp, esp
	sub	esp, 292				; 00000124H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-292]
	mov	ecx, 73					; 00000049H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 622
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _cnv$[ebp], ecx
; Line 623
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _source$[ebp], ecx
	mov	edx, DWORD PTR _source$[ebp]
	mov	DWORD PTR _sourceInitial$[ebp], edx
; Line 624
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _source$[ebp]
	cmp	ecx, DWORD PTR [eax+12]
	jb	SHORT $LN24@ucnv_getNe
; Line 627
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 8
; Line 628
	mov	eax, 65535				; 0000ffffH
	jmp	$LN25@ucnv_getNe
$LN24@ucnv_getNe:
; Line 631
	mov	eax, DWORD PTR _source$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _myByte$[ebp], cl
	mov	edx, DWORD PTR _source$[ebp]
	add	edx, 1
	mov	DWORD PTR _source$[ebp], edx
; Line 632
	movzx	eax, BYTE PTR _myByte$[ebp]
	cmp	eax, 128				; 00000080H
	jge	SHORT $LN23@ucnv_getNe
; Line 634
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _source$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 635
	movzx	eax, BYTE PTR _myByte$[ebp]
	jmp	$LN25@ucnv_getNe
$LN23@ucnv_getNe:
; Line 638
	movzx	eax, BYTE PTR _myByte$[ebp]
	movsx	cx, BYTE PTR _bytesFromUTF8[eax]
	mov	WORD PTR _extraBytesToWrite$[ebp], cx
; Line 639
	movzx	eax, WORD PTR _extraBytesToWrite$[ebp]
	test	eax, eax
	jne	SHORT $LN22@ucnv_getNe
; Line 640
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	cl, BYTE PTR _myByte$[ebp]
	mov	BYTE PTR [eax+37], cl
; Line 641
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	BYTE PTR [eax+36], 1
; Line 642
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 12			; 0000000cH
; Line 643
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _source$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 644
	mov	eax, 65535				; 0000ffffH
	jmp	$LN25@ucnv_getNe
$LN22@ucnv_getNe:
; Line 648
	movzx	eax, WORD PTR _extraBytesToWrite$[ebp]
	mov	ecx, DWORD PTR _source$[ebp]
	lea	edx, DWORD PTR [ecx+eax-1]
	mov	eax, DWORD PTR _args$[ebp]
	cmp	edx, DWORD PTR [eax+12]
	jbe	$LN21@ucnv_getNe
; Line 651
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	cl, BYTE PTR _myByte$[ebp]
	mov	BYTE PTR [eax+37], cl
; Line 652
	mov	BYTE PTR _i$[ebp], 1
; Line 653
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 11			; 0000000bH
$LN20@ucnv_getNe:
; Line 654
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _source$[ebp]
	cmp	ecx, DWORD PTR [eax+12]
	jae	SHORT $LN19@ucnv_getNe
; Line 655
	mov	eax, DWORD PTR _source$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _myByte$[ebp], cl
	movzx	edx, BYTE PTR _myByte$[ebp]
	and	edx, 192				; 000000c0H
	cmp	edx, 128				; 00000080H
	jne	SHORT $LN18@ucnv_getNe
; Line 656
	movsx	eax, BYTE PTR _i$[ebp]
	mov	ecx, DWORD PTR _cnv$[ebp]
	mov	dl, BYTE PTR _myByte$[ebp]
	mov	BYTE PTR [ecx+eax+37], dl
	mov	al, BYTE PTR _i$[ebp]
	add	al, 1
	mov	BYTE PTR _i$[ebp], al
; Line 657
	mov	eax, DWORD PTR _source$[ebp]
	add	eax, 1
	mov	DWORD PTR _source$[ebp], eax
; Line 658
	jmp	SHORT $LN17@ucnv_getNe
$LN18@ucnv_getNe:
; Line 660
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 12			; 0000000cH
; Line 661
	jmp	SHORT $LN19@ucnv_getNe
$LN17@ucnv_getNe:
; Line 663
	jmp	SHORT $LN20@ucnv_getNe
$LN19@ucnv_getNe:
; Line 664
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	cl, BYTE PTR _i$[ebp]
	mov	BYTE PTR [eax+36], cl
; Line 665
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _source$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 666
	mov	eax, 65535				; 0000ffffH
	jmp	$LN25@ucnv_getNe
$LN21@ucnv_getNe:
; Line 669
	mov	BYTE PTR _isLegalSequence$[ebp], 1
; Line 670
	movzx	eax, BYTE PTR _myByte$[ebp]
	shl	eax, 6
	mov	DWORD PTR _ch$[ebp], eax
; Line 671
	movzx	eax, WORD PTR _extraBytesToWrite$[ebp]
	mov	DWORD PTR tv136[ebp], eax
	mov	ecx, DWORD PTR tv136[ebp]
	sub	ecx, 2
	mov	DWORD PTR tv136[ebp], ecx
	cmp	DWORD PTR tv136[ebp], 4
	ja	$LN15@ucnv_getNe
	mov	edx, DWORD PTR tv136[ebp]
	jmp	DWORD PTR $LN27@ucnv_getNe[edx*4]
$LN14@ucnv_getNe:
; Line 675
	mov	eax, DWORD PTR _source$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _myByte$[ebp], cl
	movzx	edx, BYTE PTR _myByte$[ebp]
	add	edx, DWORD PTR _ch$[ebp]
	mov	DWORD PTR _ch$[ebp], edx
; Line 676
	mov	eax, DWORD PTR _ch$[ebp]
	shl	eax, 6
	mov	DWORD PTR _ch$[ebp], eax
; Line 677
	movzx	eax, BYTE PTR _myByte$[ebp]
	and	eax, 192				; 000000c0H
	cmp	eax, 128				; 00000080H
	je	SHORT $LN13@ucnv_getNe
; Line 679
	mov	BYTE PTR _isLegalSequence$[ebp], 0
; Line 680
	jmp	$LN15@ucnv_getNe
$LN13@ucnv_getNe:
; Line 682
	mov	eax, DWORD PTR _source$[ebp]
	add	eax, 1
	mov	DWORD PTR _source$[ebp], eax
$LN12@ucnv_getNe:
; Line 684
	mov	eax, DWORD PTR _source$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _myByte$[ebp], cl
	movzx	edx, BYTE PTR _myByte$[ebp]
	add	edx, DWORD PTR _ch$[ebp]
	mov	DWORD PTR _ch$[ebp], edx
; Line 685
	mov	eax, DWORD PTR _ch$[ebp]
	shl	eax, 6
	mov	DWORD PTR _ch$[ebp], eax
; Line 686
	movzx	eax, BYTE PTR _myByte$[ebp]
	and	eax, 192				; 000000c0H
	cmp	eax, 128				; 00000080H
	je	SHORT $LN11@ucnv_getNe
; Line 688
	mov	BYTE PTR _isLegalSequence$[ebp], 0
; Line 689
	jmp	$LN15@ucnv_getNe
$LN11@ucnv_getNe:
; Line 691
	mov	eax, DWORD PTR _source$[ebp]
	add	eax, 1
	mov	DWORD PTR _source$[ebp], eax
$LN10@ucnv_getNe:
; Line 693
	mov	eax, DWORD PTR _source$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _myByte$[ebp], cl
	movzx	edx, BYTE PTR _myByte$[ebp]
	add	edx, DWORD PTR _ch$[ebp]
	mov	DWORD PTR _ch$[ebp], edx
; Line 694
	mov	eax, DWORD PTR _ch$[ebp]
	shl	eax, 6
	mov	DWORD PTR _ch$[ebp], eax
; Line 695
	movzx	eax, BYTE PTR _myByte$[ebp]
	and	eax, 192				; 000000c0H
	cmp	eax, 128				; 00000080H
	je	SHORT $LN9@ucnv_getNe
; Line 697
	mov	BYTE PTR _isLegalSequence$[ebp], 0
; Line 698
	jmp	SHORT $LN15@ucnv_getNe
$LN9@ucnv_getNe:
; Line 700
	mov	eax, DWORD PTR _source$[ebp]
	add	eax, 1
	mov	DWORD PTR _source$[ebp], eax
$LN8@ucnv_getNe:
; Line 702
	mov	eax, DWORD PTR _source$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _myByte$[ebp], cl
	movzx	edx, BYTE PTR _myByte$[ebp]
	add	edx, DWORD PTR _ch$[ebp]
	mov	DWORD PTR _ch$[ebp], edx
; Line 703
	mov	eax, DWORD PTR _ch$[ebp]
	shl	eax, 6
	mov	DWORD PTR _ch$[ebp], eax
; Line 704
	movzx	eax, BYTE PTR _myByte$[ebp]
	and	eax, 192				; 000000c0H
	cmp	eax, 128				; 00000080H
	je	SHORT $LN7@ucnv_getNe
; Line 706
	mov	BYTE PTR _isLegalSequence$[ebp], 0
; Line 707
	jmp	SHORT $LN15@ucnv_getNe
$LN7@ucnv_getNe:
; Line 709
	mov	eax, DWORD PTR _source$[ebp]
	add	eax, 1
	mov	DWORD PTR _source$[ebp], eax
$LN6@ucnv_getNe:
; Line 711
	mov	eax, DWORD PTR _source$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _myByte$[ebp], cl
	movzx	edx, BYTE PTR _myByte$[ebp]
	add	edx, DWORD PTR _ch$[ebp]
	mov	DWORD PTR _ch$[ebp], edx
; Line 712
	movzx	eax, BYTE PTR _myByte$[ebp]
	and	eax, 192				; 000000c0H
	cmp	eax, 128				; 00000080H
	je	SHORT $LN5@ucnv_getNe
; Line 714
	mov	BYTE PTR _isLegalSequence$[ebp], 0
; Line 715
	jmp	SHORT $LN15@ucnv_getNe
$LN5@ucnv_getNe:
; Line 717
	mov	eax, DWORD PTR _source$[ebp]
	add	eax, 1
	mov	DWORD PTR _source$[ebp], eax
$LN15@ucnv_getNe:
; Line 719
	movzx	eax, WORD PTR _extraBytesToWrite$[ebp]
	mov	ecx, DWORD PTR _ch$[ebp]
	sub	ecx, DWORD PTR _offsetsFromUTF8[eax*4]
	mov	DWORD PTR _ch$[ebp], ecx
; Line 720
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _source$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 737
	movsx	eax, BYTE PTR _isLegalSequence$[ebp]
	test	eax, eax
	je	SHORT $LN4@ucnv_getNe
	cmp	DWORD PTR _ch$[ebp], 1114111		; 0010ffffH
	ja	SHORT $LN4@ucnv_getNe
	movzx	eax, WORD PTR _extraBytesToWrite$[ebp]
	mov	ecx, DWORD PTR _ch$[ebp]
	cmp	ecx, DWORD PTR _utf8_minChar32[eax*4]
	jb	SHORT $LN4@ucnv_getNe
	mov	eax, DWORD PTR _ch$[ebp]
	and	eax, -2048				; fffff800H
	cmp	eax, 55296				; 0000d800H
	je	SHORT $LN4@ucnv_getNe
; Line 738
	mov	eax, DWORD PTR _ch$[ebp]
	jmp	SHORT $LN25@ucnv_getNe
$LN4@ucnv_getNe:
; Line 741
	mov	BYTE PTR _i$[ebp], 0
	jmp	SHORT $LN3@ucnv_getNe
$LN2@ucnv_getNe:
	mov	al, BYTE PTR _i$[ebp]
	add	al, 1
	mov	BYTE PTR _i$[ebp], al
$LN3@ucnv_getNe:
	mov	eax, DWORD PTR _sourceInitial$[ebp]
	cmp	eax, DWORD PTR _source$[ebp]
	jae	SHORT $LN1@ucnv_getNe
; Line 742
	movsx	eax, BYTE PTR _i$[ebp]
	mov	ecx, DWORD PTR _cnv$[ebp]
	mov	edx, DWORD PTR _sourceInitial$[ebp]
	mov	dl, BYTE PTR [edx]
	mov	BYTE PTR [ecx+eax+37], dl
	mov	eax, DWORD PTR _sourceInitial$[ebp]
	add	eax, 1
	mov	DWORD PTR _sourceInitial$[ebp], eax
; Line 743
	jmp	SHORT $LN2@ucnv_getNe
$LN1@ucnv_getNe:
; Line 744
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	cl, BYTE PTR _i$[ebp]
	mov	BYTE PTR [eax+36], cl
; Line 745
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 12			; 0000000cH
; Line 746
	mov	eax, 65535				; 0000ffffH
$LN25@ucnv_getNe:
; Line 747
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN27@ucnv_getNe:
	DD	$LN6@ucnv_getNe
	DD	$LN8@ucnv_getNe
	DD	$LN10@ucnv_getNe
	DD	$LN12@ucnv_getNe
	DD	$LN14@ucnv_getNe
_ucnv_getNextUChar_UTF8 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _ucnv_UTF8FromUTF8
_TEXT	SEGMENT
tv349 = -380						; size = 4
tv230 = -380						; size = 4
tv147 = -380						; size = 4
tv350 = -376						; size = 4
tv231 = -376						; size = 4
tv148 = -376						; size = 4
_i$9011 = -173						; size = 1
_i$8950 = -164						; size = 4
_t2$ = -149						; size = 1
_t1$ = -137						; size = 1
_b$ = -125						; size = 1
_c$ = -116						; size = 4
_toULimit$ = -101					; size = 1
_toULength$ = -89					; size = 1
_oldToULength$ = -77					; size = 1
_count$ = -68						; size = 4
_targetCapacity$ = -56					; size = 4
_target$ = -44						; size = 4
_sourceLimit$ = -32					; size = 4
_source$ = -20						; size = 4
_utf8$ = -8						; size = 4
_pFromUArgs$ = 8					; size = 4
_pToUArgs$ = 12						; size = 4
_pErrorCode$ = 16					; size = 4
_ucnv_UTF8FromUTF8 PROC					; COMDAT
; Line 763
	push	ebp
	mov	ebp, esp
	sub	esp, 380				; 0000017cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-380]
	mov	ecx, 95					; 0000005fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 776
	mov	eax, DWORD PTR _pToUArgs$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _utf8$[ebp], ecx
; Line 777
	mov	eax, DWORD PTR _pToUArgs$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _source$[ebp], ecx
; Line 778
	mov	eax, DWORD PTR _pToUArgs$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _sourceLimit$[ebp], ecx
; Line 779
	mov	eax, DWORD PTR _pFromUArgs$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _target$[ebp], ecx
; Line 780
	mov	eax, DWORD PTR _pFromUArgs$[ebp]
	mov	ecx, DWORD PTR _pFromUArgs$[ebp]
	mov	edx, DWORD PTR [eax+20]
	sub	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _targetCapacity$[ebp], edx
; Line 783
	mov	eax, DWORD PTR _utf8$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	DWORD PTR _c$[ebp], ecx
; Line 784
	cmp	DWORD PTR _c$[ebp], 0
	je	SHORT $LN59@ucnv_UTF8F
; Line 785
	mov	eax, DWORD PTR _utf8$[ebp]
	mov	cl, BYTE PTR [eax+36]
	mov	BYTE PTR _oldToULength$[ebp], cl
	mov	dl, BYTE PTR _oldToULength$[ebp]
	mov	BYTE PTR _toULength$[ebp], dl
; Line 786
	mov	eax, DWORD PTR _utf8$[ebp]
	mov	cl, BYTE PTR [eax+48]
	mov	BYTE PTR _toULimit$[ebp], cl
; Line 787
	jmp	SHORT $LN58@ucnv_UTF8F
$LN59@ucnv_UTF8F:
; Line 788
	mov	BYTE PTR _toULimit$[ebp], 0
	mov	al, BYTE PTR _toULimit$[ebp]
	mov	BYTE PTR _oldToULength$[ebp], al
	mov	cl, BYTE PTR _oldToULength$[ebp]
	mov	BYTE PTR _toULength$[ebp], cl
$LN58@ucnv_UTF8F:
; Line 791
	mov	eax, DWORD PTR _sourceLimit$[ebp]
	sub	eax, DWORD PTR _source$[ebp]
	movsx	ecx, BYTE PTR _oldToULength$[ebp]
	add	eax, ecx
	mov	DWORD PTR _count$[ebp], eax
; Line 792
	movsx	eax, BYTE PTR _toULimit$[ebp]
	cmp	DWORD PTR _count$[ebp], eax
	jge	SHORT $LN57@ucnv_UTF8F
	jmp	$LN56@ucnv_UTF8F
$LN57@ucnv_UTF8F:
; Line 797
	movsx	eax, BYTE PTR _toULimit$[ebp]
	cmp	DWORD PTR _targetCapacity$[ebp], eax
	jge	SHORT $LN55@ucnv_UTF8F
; Line 802
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], -127			; ffffff81H
; Line 803
	jmp	$LN60@ucnv_UTF8F
; Line 804
	jmp	$LN56@ucnv_UTF8F
$LN55@ucnv_UTF8F:
; Line 823
	mov	eax, DWORD PTR _count$[ebp]
	cmp	eax, DWORD PTR _targetCapacity$[ebp]
	jle	SHORT $LN53@ucnv_UTF8F
; Line 824
	mov	eax, DWORD PTR _targetCapacity$[ebp]
	mov	DWORD PTR _count$[ebp], eax
$LN53@ucnv_UTF8F:
; Line 827
	mov	DWORD PTR _i$8950[ebp], 0
$LN52@ucnv_UTF8F:
; Line 828
	cmp	DWORD PTR _i$8950[ebp], 3
	jge	$LN56@ucnv_UTF8F
	movsx	eax, BYTE PTR _toULimit$[ebp]
	mov	ecx, DWORD PTR _count$[ebp]
	sub	ecx, eax
	cmp	DWORD PTR _i$8950[ebp], ecx
	jge	$LN56@ucnv_UTF8F
; Line 829
	movsx	eax, BYTE PTR _oldToULength$[ebp]
	mov	ecx, DWORD PTR _count$[ebp]
	sub	ecx, eax
	sub	ecx, DWORD PTR _i$8950[ebp]
	mov	edx, DWORD PTR _source$[ebp]
	mov	al, BYTE PTR [edx+ecx-1]
	mov	BYTE PTR _b$[ebp], al
; Line 830
	movzx	eax, BYTE PTR _b$[ebp]
	and	eax, 192				; 000000c0H
	cmp	eax, 128				; 00000080H
	jne	SHORT $LN50@ucnv_UTF8F
; Line 831
	mov	eax, DWORD PTR _i$8950[ebp]
	add	eax, 1
	mov	DWORD PTR _i$8950[ebp], eax
; Line 832
	jmp	$LN49@ucnv_UTF8F
$LN50@ucnv_UTF8F:
; Line 833
	movzx	eax, BYTE PTR _b$[ebp]
	cmp	eax, 240				; 000000f0H
	jge	SHORT $LN64@ucnv_UTF8F
	movzx	ecx, BYTE PTR _b$[ebp]
	xor	edx, edx
	cmp	ecx, 192				; 000000c0H
	setge	dl
	movzx	eax, BYTE PTR _b$[ebp]
	xor	ecx, ecx
	cmp	eax, 224				; 000000e0H
	setge	cl
	add	edx, ecx
	mov	DWORD PTR tv148[ebp], edx
	jmp	SHORT $LN65@ucnv_UTF8F
$LN64@ucnv_UTF8F:
	movzx	edx, BYTE PTR _b$[ebp]
	cmp	edx, 254				; 000000feH
	jge	SHORT $LN62@ucnv_UTF8F
	movzx	eax, BYTE PTR _b$[ebp]
	xor	ecx, ecx
	cmp	eax, 248				; 000000f8H
	setge	cl
	movzx	edx, BYTE PTR _b$[ebp]
	xor	eax, eax
	cmp	edx, 252				; 000000fcH
	setge	al
	lea	ecx, DWORD PTR [ecx+eax+3]
	mov	DWORD PTR tv147[ebp], ecx
	jmp	SHORT $LN63@ucnv_UTF8F
$LN62@ucnv_UTF8F:
	mov	DWORD PTR tv147[ebp], 0
$LN63@ucnv_UTF8F:
	mov	edx, DWORD PTR tv147[ebp]
	mov	DWORD PTR tv148[ebp], edx
$LN65@ucnv_UTF8F:
	mov	eax, DWORD PTR _i$8950[ebp]
	cmp	eax, DWORD PTR tv148[ebp]
	jge	SHORT $LN48@ucnv_UTF8F
; Line 835
	mov	eax, DWORD PTR _i$8950[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _count$[ebp]
	sub	ecx, eax
	mov	DWORD PTR _count$[ebp], ecx
$LN48@ucnv_UTF8F:
; Line 837
	jmp	SHORT $LN56@ucnv_UTF8F
$LN49@ucnv_UTF8F:
; Line 839
	jmp	$LN52@ucnv_UTF8F
$LN56@ucnv_UTF8F:
; Line 842
	cmp	DWORD PTR _c$[ebp], 0
	je	SHORT $LN46@ucnv_UTF8F
; Line 843
	mov	eax, DWORD PTR _utf8$[ebp]
	mov	DWORD PTR [eax+44], 0
; Line 844
	mov	eax, DWORD PTR _utf8$[ebp]
	mov	BYTE PTR [eax+36], 0
; Line 845
	jmp	$moreBytes$8965
$LN46@ucnv_UTF8F:
; Line 850
	cmp	DWORD PTR _count$[ebp], 0
	jle	$LN45@ucnv_UTF8F
; Line 851
	mov	eax, DWORD PTR _source$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _b$[ebp], cl
	mov	edx, DWORD PTR _source$[ebp]
	add	edx, 1
	mov	DWORD PTR _source$[ebp], edx
; Line 852
	movsx	eax, BYTE PTR _b$[ebp]
	test	eax, eax
	jl	SHORT $LN44@ucnv_UTF8F
; Line 854
	mov	eax, DWORD PTR _target$[ebp]
	mov	cl, BYTE PTR _b$[ebp]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 1
	mov	DWORD PTR _target$[ebp], edx
; Line 855
	mov	eax, DWORD PTR _count$[ebp]
	sub	eax, 1
	mov	DWORD PTR _count$[ebp], eax
; Line 856
	jmp	SHORT $LN46@ucnv_UTF8F
; Line 857
	jmp	$LN43@ucnv_UTF8F
$LN44@ucnv_UTF8F:
; Line 858
	movzx	eax, BYTE PTR _b$[ebp]
	cmp	eax, 224				; 000000e0H
	jle	$LN42@ucnv_UTF8F
; Line 863
	mov	eax, DWORD PTR _source$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _t1$[ebp], cl
	movzx	edx, BYTE PTR _t1$[ebp]
	cmp	edx, 128				; 00000080H
	jl	$LN41@ucnv_UTF8F
	movzx	eax, BYTE PTR _b$[ebp]
	cmp	eax, 237				; 000000edH
	jge	SHORT $LN39@ucnv_UTF8F
	movzx	eax, BYTE PTR _t1$[ebp]
	cmp	eax, 191				; 000000bfH
	jle	SHORT $LN40@ucnv_UTF8F
$LN39@ucnv_UTF8F:
	movzx	eax, BYTE PTR _b$[ebp]
	cmp	eax, 237				; 000000edH
	jne	$LN41@ucnv_UTF8F
	movzx	eax, BYTE PTR _t1$[ebp]
	cmp	eax, 159				; 0000009fH
	jg	SHORT $LN41@ucnv_UTF8F
$LN40@ucnv_UTF8F:
	mov	eax, DWORD PTR _source$[ebp]
	mov	cl, BYTE PTR [eax+1]
	mov	BYTE PTR _t2$[ebp], cl
	movzx	edx, BYTE PTR _t2$[ebp]
	cmp	edx, 128				; 00000080H
	jl	SHORT $LN41@ucnv_UTF8F
	movzx	eax, BYTE PTR _t2$[ebp]
	cmp	eax, 191				; 000000bfH
	jg	SHORT $LN41@ucnv_UTF8F
; Line 864
	mov	eax, DWORD PTR _source$[ebp]
	add	eax, 2
	mov	DWORD PTR _source$[ebp], eax
; Line 865
	mov	eax, DWORD PTR _target$[ebp]
	mov	cl, BYTE PTR _b$[ebp]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 1
	mov	DWORD PTR _target$[ebp], edx
; Line 866
	mov	eax, DWORD PTR _target$[ebp]
	mov	cl, BYTE PTR _t1$[ebp]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 1
	mov	DWORD PTR _target$[ebp], edx
; Line 867
	mov	eax, DWORD PTR _target$[ebp]
	mov	cl, BYTE PTR _t2$[ebp]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 1
	mov	DWORD PTR _target$[ebp], edx
; Line 868
	mov	eax, DWORD PTR _count$[ebp]
	sub	eax, 3
	mov	DWORD PTR _count$[ebp], eax
; Line 869
	jmp	$LN46@ucnv_UTF8F
$LN41@ucnv_UTF8F:
; Line 870
	jmp	$LN38@ucnv_UTF8F
$LN42@ucnv_UTF8F:
; Line 871
	movzx	eax, BYTE PTR _b$[ebp]
	cmp	eax, 224				; 000000e0H
	jge	SHORT $LN37@ucnv_UTF8F
; Line 875
	movzx	eax, BYTE PTR _b$[ebp]
	cmp	eax, 194				; 000000c2H
	jl	SHORT $LN36@ucnv_UTF8F
	mov	eax, DWORD PTR _source$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _t1$[ebp], cl
	movzx	edx, BYTE PTR _t1$[ebp]
	cmp	edx, 128				; 00000080H
	jl	SHORT $LN36@ucnv_UTF8F
	movzx	eax, BYTE PTR _t1$[ebp]
	cmp	eax, 191				; 000000bfH
	jg	SHORT $LN36@ucnv_UTF8F
; Line 876
	mov	eax, DWORD PTR _source$[ebp]
	add	eax, 1
	mov	DWORD PTR _source$[ebp], eax
; Line 877
	mov	eax, DWORD PTR _target$[ebp]
	mov	cl, BYTE PTR _b$[ebp]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 1
	mov	DWORD PTR _target$[ebp], edx
; Line 878
	mov	eax, DWORD PTR _target$[ebp]
	mov	cl, BYTE PTR _t1$[ebp]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 1
	mov	DWORD PTR _target$[ebp], edx
; Line 879
	mov	eax, DWORD PTR _count$[ebp]
	sub	eax, 2
	mov	DWORD PTR _count$[ebp], eax
; Line 880
	jmp	$LN46@ucnv_UTF8F
$LN36@ucnv_UTF8F:
; Line 881
	jmp	$LN38@ucnv_UTF8F
$LN37@ucnv_UTF8F:
; Line 882
	movzx	eax, BYTE PTR _b$[ebp]
	cmp	eax, 224				; 000000e0H
	jne	$LN38@ucnv_UTF8F
; Line 886
	mov	eax, DWORD PTR _source$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _t1$[ebp], cl
	movzx	edx, BYTE PTR _t1$[ebp]
	cmp	edx, 160				; 000000a0H
	jl	$LN38@ucnv_UTF8F
	movzx	eax, BYTE PTR _t1$[ebp]
	cmp	eax, 191				; 000000bfH
	jg	SHORT $LN38@ucnv_UTF8F
	mov	eax, DWORD PTR _source$[ebp]
	mov	cl, BYTE PTR [eax+1]
	mov	BYTE PTR _t2$[ebp], cl
	movzx	edx, BYTE PTR _t2$[ebp]
	cmp	edx, 128				; 00000080H
	jl	SHORT $LN38@ucnv_UTF8F
	movzx	eax, BYTE PTR _t2$[ebp]
	cmp	eax, 191				; 000000bfH
	jg	SHORT $LN38@ucnv_UTF8F
; Line 887
	mov	eax, DWORD PTR _source$[ebp]
	add	eax, 2
	mov	DWORD PTR _source$[ebp], eax
; Line 888
	mov	eax, DWORD PTR _target$[ebp]
	mov	cl, BYTE PTR _b$[ebp]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 1
	mov	DWORD PTR _target$[ebp], edx
; Line 889
	mov	eax, DWORD PTR _target$[ebp]
	mov	cl, BYTE PTR _t1$[ebp]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 1
	mov	DWORD PTR _target$[ebp], edx
; Line 890
	mov	eax, DWORD PTR _target$[ebp]
	mov	cl, BYTE PTR _t2$[ebp]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 1
	mov	DWORD PTR _target$[ebp], edx
; Line 891
	mov	eax, DWORD PTR _count$[ebp]
	sub	eax, 3
	mov	DWORD PTR _count$[ebp], eax
; Line 892
	jmp	$LN46@ucnv_UTF8F
$LN38@ucnv_UTF8F:
; Line 897
	mov	BYTE PTR _oldToULength$[ebp], 0
; Line 898
	mov	BYTE PTR _toULength$[ebp], 1
; Line 899
	movzx	eax, BYTE PTR _b$[ebp]
	cmp	eax, 240				; 000000f0H
	jge	SHORT $LN68@ucnv_UTF8F
	movzx	ecx, BYTE PTR _b$[ebp]
	xor	edx, edx
	cmp	ecx, 192				; 000000c0H
	setge	dl
	movzx	eax, BYTE PTR _b$[ebp]
	xor	ecx, ecx
	cmp	eax, 224				; 000000e0H
	setge	cl
	add	edx, ecx
	mov	DWORD PTR tv231[ebp], edx
	jmp	SHORT $LN69@ucnv_UTF8F
$LN68@ucnv_UTF8F:
	movzx	edx, BYTE PTR _b$[ebp]
	cmp	edx, 254				; 000000feH
	jge	SHORT $LN66@ucnv_UTF8F
	movzx	eax, BYTE PTR _b$[ebp]
	xor	ecx, ecx
	cmp	eax, 248				; 000000f8H
	setge	cl
	movzx	edx, BYTE PTR _b$[ebp]
	xor	eax, eax
	cmp	edx, 252				; 000000fcH
	setge	al
	lea	ecx, DWORD PTR [ecx+eax+3]
	mov	DWORD PTR tv230[ebp], ecx
	jmp	SHORT $LN67@ucnv_UTF8F
$LN66@ucnv_UTF8F:
	mov	DWORD PTR tv230[ebp], 0
$LN67@ucnv_UTF8F:
	mov	edx, DWORD PTR tv230[ebp]
	mov	DWORD PTR tv231[ebp], edx
$LN69@ucnv_UTF8F:
	mov	eax, DWORD PTR tv231[ebp]
	add	eax, 1
	mov	BYTE PTR _toULimit$[ebp], al
; Line 900
	movzx	eax, BYTE PTR _b$[ebp]
	mov	DWORD PTR _c$[ebp], eax
$moreBytes$8965:
; Line 902
	movsx	eax, BYTE PTR _toULength$[ebp]
	movsx	ecx, BYTE PTR _toULimit$[ebp]
	cmp	eax, ecx
	jge	$LN31@ucnv_UTF8F
; Line 903
	mov	eax, DWORD PTR _source$[ebp]
	cmp	eax, DWORD PTR _sourceLimit$[ebp]
	jae	SHORT $LN30@ucnv_UTF8F
; Line 904
	mov	eax, DWORD PTR _source$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _b$[ebp], cl
; Line 905
	movzx	eax, BYTE PTR _b$[ebp]
	and	eax, 192				; 000000c0H
	cmp	eax, 128				; 00000080H
	jne	SHORT $LN29@ucnv_UTF8F
; Line 906
	mov	eax, DWORD PTR _source$[ebp]
	add	eax, 1
	mov	DWORD PTR _source$[ebp], eax
; Line 907
	mov	al, BYTE PTR _toULength$[ebp]
	add	al, 1
	mov	BYTE PTR _toULength$[ebp], al
; Line 908
	mov	eax, DWORD PTR _c$[ebp]
	shl	eax, 6
	movzx	ecx, BYTE PTR _b$[ebp]
	add	eax, ecx
	mov	DWORD PTR _c$[ebp], eax
; Line 909
	jmp	SHORT $LN28@ucnv_UTF8F
$LN29@ucnv_UTF8F:
; Line 910
	jmp	SHORT $LN31@ucnv_UTF8F
$LN28@ucnv_UTF8F:
; Line 912
	jmp	SHORT $LN27@ucnv_UTF8F
$LN30@ucnv_UTF8F:
; Line 914
	movsx	eax, BYTE PTR _toULength$[ebp]
	movsx	ecx, BYTE PTR _oldToULength$[ebp]
	sub	eax, ecx
	mov	edx, DWORD PTR _source$[ebp]
	sub	edx, eax
	mov	DWORD PTR _source$[ebp], edx
$LN26@ucnv_UTF8F:
; Line 915
	movsx	eax, BYTE PTR _oldToULength$[ebp]
	movsx	ecx, BYTE PTR _toULength$[ebp]
	cmp	eax, ecx
	jge	SHORT $LN25@ucnv_UTF8F
; Line 916
	movsx	eax, BYTE PTR _oldToULength$[ebp]
	mov	ecx, DWORD PTR _utf8$[ebp]
	mov	edx, DWORD PTR _source$[ebp]
	mov	dl, BYTE PTR [edx]
	mov	BYTE PTR [ecx+eax+37], dl
	mov	al, BYTE PTR _oldToULength$[ebp]
	add	al, 1
	mov	BYTE PTR _oldToULength$[ebp], al
	mov	ecx, DWORD PTR _source$[ebp]
	add	ecx, 1
	mov	DWORD PTR _source$[ebp], ecx
; Line 917
	jmp	SHORT $LN26@ucnv_UTF8F
$LN25@ucnv_UTF8F:
; Line 918
	mov	eax, DWORD PTR _utf8$[ebp]
	mov	ecx, DWORD PTR _c$[ebp]
	mov	DWORD PTR [eax+44], ecx
; Line 919
	mov	eax, DWORD PTR _utf8$[ebp]
	mov	cl, BYTE PTR _toULength$[ebp]
	mov	BYTE PTR [eax+36], cl
; Line 920
	movsx	eax, BYTE PTR _toULimit$[ebp]
	mov	ecx, DWORD PTR _utf8$[ebp]
	mov	DWORD PTR [ecx+48], eax
; Line 921
	mov	eax, DWORD PTR _pToUArgs$[ebp]
	mov	ecx, DWORD PTR _source$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 922
	mov	eax, DWORD PTR _pFromUArgs$[ebp]
	mov	ecx, DWORD PTR _target$[ebp]
	mov	DWORD PTR [eax+16], ecx
; Line 923
	jmp	$LN60@ucnv_UTF8F
$LN27@ucnv_UTF8F:
; Line 925
	jmp	$moreBytes$8965
$LN31@ucnv_UTF8F:
; Line 931
	movsx	eax, BYTE PTR _toULength$[ebp]
	movsx	ecx, BYTE PTR _toULimit$[ebp]
	cmp	eax, ecx
	jne	SHORT $LN24@ucnv_UTF8F
	movsx	eax, BYTE PTR _toULength$[ebp]
	cmp	eax, 3
	je	SHORT $LN23@ucnv_UTF8F
	movsx	eax, BYTE PTR _toULength$[ebp]
	cmp	eax, 2
	jne	SHORT $LN24@ucnv_UTF8F
$LN23@ucnv_UTF8F:
	movsx	eax, BYTE PTR _toULength$[ebp]
	mov	ecx, DWORD PTR _c$[ebp]
	sub	ecx, DWORD PTR _utf8_offsets[eax*4]
	mov	DWORD PTR _c$[ebp], ecx
	movsx	edx, BYTE PTR _toULength$[ebp]
	mov	eax, DWORD PTR _c$[ebp]
	cmp	eax, DWORD PTR _utf8_minLegal[edx*4]
	jl	SHORT $LN24@ucnv_UTF8F
	cmp	DWORD PTR _c$[ebp], 55295		; 0000d7ffH
	jle	SHORT $LN22@ucnv_UTF8F
	cmp	DWORD PTR _c$[ebp], 57344		; 0000e000H
	jl	SHORT $LN24@ucnv_UTF8F
$LN22@ucnv_UTF8F:
; Line 933
	jmp	$LN21@ucnv_UTF8F
$LN24@ucnv_UTF8F:
; Line 936
	movsx	eax, BYTE PTR _toULength$[ebp]
	movsx	ecx, BYTE PTR _toULimit$[ebp]
	cmp	eax, ecx
	jne	SHORT $LN20@ucnv_UTF8F
	movsx	eax, BYTE PTR _toULength$[ebp]
	cmp	eax, 4
	jne	SHORT $LN20@ucnv_UTF8F
	mov	eax, DWORD PTR _c$[ebp]
	sub	eax, DWORD PTR _utf8_offsets+16
	mov	DWORD PTR _c$[ebp], eax
	cmp	DWORD PTR _c$[ebp], 65536		; 00010000H
	jl	SHORT $LN20@ucnv_UTF8F
	cmp	DWORD PTR _c$[ebp], 1114111		; 0010ffffH
	jg	SHORT $LN20@ucnv_UTF8F
; Line 938
	jmp	SHORT $LN21@ucnv_UTF8F
$LN20@ucnv_UTF8F:
; Line 940
	movsx	eax, BYTE PTR _toULength$[ebp]
	movsx	ecx, BYTE PTR _oldToULength$[ebp]
	sub	eax, ecx
	mov	edx, DWORD PTR _source$[ebp]
	sub	edx, eax
	mov	DWORD PTR _source$[ebp], edx
$LN18@ucnv_UTF8F:
; Line 941
	movsx	eax, BYTE PTR _oldToULength$[ebp]
	movsx	ecx, BYTE PTR _toULength$[ebp]
	cmp	eax, ecx
	jge	SHORT $LN17@ucnv_UTF8F
; Line 942
	movsx	eax, BYTE PTR _oldToULength$[ebp]
	mov	ecx, DWORD PTR _utf8$[ebp]
	mov	edx, DWORD PTR _source$[ebp]
	mov	dl, BYTE PTR [edx]
	mov	BYTE PTR [ecx+eax+37], dl
	mov	al, BYTE PTR _oldToULength$[ebp]
	add	al, 1
	mov	BYTE PTR _oldToULength$[ebp], al
	mov	ecx, DWORD PTR _source$[ebp]
	add	ecx, 1
	mov	DWORD PTR _source$[ebp], ecx
; Line 943
	jmp	SHORT $LN18@ucnv_UTF8F
$LN17@ucnv_UTF8F:
; Line 944
	mov	eax, DWORD PTR _utf8$[ebp]
	mov	cl, BYTE PTR _toULength$[ebp]
	mov	BYTE PTR [eax+36], cl
; Line 945
	mov	eax, DWORD PTR _pToUArgs$[ebp]
	mov	ecx, DWORD PTR _source$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 946
	mov	eax, DWORD PTR _pFromUArgs$[ebp]
	mov	ecx, DWORD PTR _target$[ebp]
	mov	DWORD PTR [eax+16], ecx
; Line 947
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 12			; 0000000cH
; Line 948
	jmp	$LN60@ucnv_UTF8F
$LN21@ucnv_UTF8F:
; Line 955
	mov	BYTE PTR _i$9011[ebp], 0
	jmp	SHORT $LN16@ucnv_UTF8F
$LN15@ucnv_UTF8F:
	mov	al, BYTE PTR _i$9011[ebp]
	add	al, 1
	mov	BYTE PTR _i$9011[ebp], al
$LN16@ucnv_UTF8F:
	movsx	eax, BYTE PTR _i$9011[ebp]
	movsx	ecx, BYTE PTR _oldToULength$[ebp]
	cmp	eax, ecx
	jge	SHORT $LN14@ucnv_UTF8F
; Line 956
	movsx	eax, BYTE PTR _i$9011[ebp]
	mov	ecx, DWORD PTR _target$[ebp]
	mov	edx, DWORD PTR _utf8$[ebp]
	mov	al, BYTE PTR [edx+eax+37]
	mov	BYTE PTR [ecx], al
	mov	ecx, DWORD PTR _target$[ebp]
	add	ecx, 1
	mov	DWORD PTR _target$[ebp], ecx
; Line 957
	jmp	SHORT $LN15@ucnv_UTF8F
$LN14@ucnv_UTF8F:
; Line 958
	movsx	eax, BYTE PTR _toULength$[ebp]
	movsx	ecx, BYTE PTR _oldToULength$[ebp]
	sub	eax, ecx
	mov	edx, DWORD PTR _source$[ebp]
	sub	edx, eax
	mov	DWORD PTR _source$[ebp], edx
	jmp	SHORT $LN13@ucnv_UTF8F
$LN12@ucnv_UTF8F:
; Line 959
	mov	al, BYTE PTR _i$9011[ebp]
	add	al, 1
	mov	BYTE PTR _i$9011[ebp], al
$LN13@ucnv_UTF8F:
	movsx	eax, BYTE PTR _i$9011[ebp]
	movsx	ecx, BYTE PTR _toULength$[ebp]
	cmp	eax, ecx
	jge	SHORT $LN11@ucnv_UTF8F
; Line 960
	mov	eax, DWORD PTR _target$[ebp]
	mov	ecx, DWORD PTR _source$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl
	mov	eax, DWORD PTR _target$[ebp]
	add	eax, 1
	mov	DWORD PTR _target$[ebp], eax
	mov	ecx, DWORD PTR _source$[ebp]
	add	ecx, 1
	mov	DWORD PTR _source$[ebp], ecx
; Line 961
	jmp	SHORT $LN12@ucnv_UTF8F
$LN11@ucnv_UTF8F:
; Line 962
	movsx	eax, BYTE PTR _toULength$[ebp]
	mov	ecx, DWORD PTR _count$[ebp]
	sub	ecx, eax
	mov	DWORD PTR _count$[ebp], ecx
$LN43@ucnv_UTF8F:
; Line 965
	jmp	$LN46@ucnv_UTF8F
$LN45@ucnv_UTF8F:
; Line 967
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	cmp	DWORD PTR [eax], 0
	jg	$LN10@ucnv_UTF8F
	mov	eax, DWORD PTR _source$[ebp]
	cmp	eax, DWORD PTR _sourceLimit$[ebp]
	jae	$LN10@ucnv_UTF8F
; Line 968
	mov	eax, DWORD PTR _pFromUArgs$[ebp]
	mov	ecx, DWORD PTR _target$[ebp]
	cmp	ecx, DWORD PTR [eax+20]
	jne	SHORT $LN9@ucnv_UTF8F
; Line 969
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
; Line 970
	jmp	$LN10@ucnv_UTF8F
$LN9@ucnv_UTF8F:
; Line 971
	mov	eax, DWORD PTR _source$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _b$[ebp], cl
; Line 972
	movzx	eax, BYTE PTR _b$[ebp]
	cmp	eax, 240				; 000000f0H
	jge	SHORT $LN72@ucnv_UTF8F
	movzx	ecx, BYTE PTR _b$[ebp]
	xor	edx, edx
	cmp	ecx, 192				; 000000c0H
	setge	dl
	movzx	eax, BYTE PTR _b$[ebp]
	xor	ecx, ecx
	cmp	eax, 224				; 000000e0H
	setge	cl
	add	edx, ecx
	mov	DWORD PTR tv350[ebp], edx
	jmp	SHORT $LN73@ucnv_UTF8F
$LN72@ucnv_UTF8F:
	movzx	edx, BYTE PTR _b$[ebp]
	cmp	edx, 254				; 000000feH
	jge	SHORT $LN70@ucnv_UTF8F
	movzx	eax, BYTE PTR _b$[ebp]
	xor	ecx, ecx
	cmp	eax, 248				; 000000f8H
	setge	cl
	movzx	edx, BYTE PTR _b$[ebp]
	xor	eax, eax
	cmp	edx, 252				; 000000fcH
	setge	al
	lea	ecx, DWORD PTR [ecx+eax+3]
	mov	DWORD PTR tv349[ebp], ecx
	jmp	SHORT $LN71@ucnv_UTF8F
$LN70@ucnv_UTF8F:
	mov	DWORD PTR tv349[ebp], 0
$LN71@ucnv_UTF8F:
	mov	edx, DWORD PTR tv349[ebp]
	mov	DWORD PTR tv350[ebp], edx
$LN73@ucnv_UTF8F:
	mov	eax, DWORD PTR tv350[ebp]
	add	eax, 1
	mov	BYTE PTR _toULimit$[ebp], al
; Line 973
	movsx	eax, BYTE PTR _toULimit$[ebp]
	mov	ecx, DWORD PTR _sourceLimit$[ebp]
	sub	ecx, DWORD PTR _source$[ebp]
	cmp	eax, ecx
	jle	$LN7@ucnv_UTF8F
; Line 975
	mov	BYTE PTR _toULength$[ebp], 0
; Line 976
	movzx	eax, BYTE PTR _b$[ebp]
	mov	DWORD PTR _c$[ebp], eax
$LN6@ucnv_UTF8F:
; Line 978
	movsx	eax, BYTE PTR _toULength$[ebp]
	mov	ecx, DWORD PTR _utf8$[ebp]
	mov	dl, BYTE PTR _b$[ebp]
	mov	BYTE PTR [ecx+eax+37], dl
	mov	al, BYTE PTR _toULength$[ebp]
	add	al, 1
	mov	BYTE PTR _toULength$[ebp], al
; Line 979
	mov	eax, DWORD PTR _source$[ebp]
	add	eax, 1
	mov	DWORD PTR _source$[ebp], eax
	mov	ecx, DWORD PTR _source$[ebp]
	cmp	ecx, DWORD PTR _sourceLimit$[ebp]
	jne	SHORT $LN4@ucnv_UTF8F
; Line 981
	mov	eax, DWORD PTR _utf8$[ebp]
	mov	ecx, DWORD PTR _c$[ebp]
	mov	DWORD PTR [eax+44], ecx
; Line 982
	mov	eax, DWORD PTR _utf8$[ebp]
	mov	cl, BYTE PTR _toULength$[ebp]
	mov	BYTE PTR [eax+36], cl
; Line 983
	movsx	eax, BYTE PTR _toULimit$[ebp]
	mov	ecx, DWORD PTR _utf8$[ebp]
	mov	DWORD PTR [ecx+48], eax
; Line 984
	jmp	SHORT $LN5@ucnv_UTF8F
	jmp	SHORT $LN3@ucnv_UTF8F
$LN4@ucnv_UTF8F:
; Line 985
	mov	eax, DWORD PTR _source$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _b$[ebp], cl
	movzx	edx, BYTE PTR _b$[ebp]
	and	edx, 192				; 000000c0H
	cmp	edx, 128				; 00000080H
	je	SHORT $LN3@ucnv_UTF8F
; Line 987
	mov	eax, DWORD PTR _utf8$[ebp]
	mov	cl, BYTE PTR _toULength$[ebp]
	mov	BYTE PTR [eax+36], cl
; Line 988
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 12			; 0000000cH
; Line 989
	jmp	SHORT $LN5@ucnv_UTF8F
$LN3@ucnv_UTF8F:
; Line 991
	mov	eax, DWORD PTR _c$[ebp]
	shl	eax, 6
	movzx	ecx, BYTE PTR _b$[ebp]
	add	eax, ecx
	mov	DWORD PTR _c$[ebp], eax
; Line 992
	jmp	$LN6@ucnv_UTF8F
$LN5@ucnv_UTF8F:
; Line 993
	jmp	SHORT $LN10@ucnv_UTF8F
$LN7@ucnv_UTF8F:
; Line 995
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], -127			; ffffff81H
$LN10@ucnv_UTF8F:
; Line 1001
	mov	eax, DWORD PTR _pToUArgs$[ebp]
	mov	ecx, DWORD PTR _source$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 1002
	mov	eax, DWORD PTR _pFromUArgs$[ebp]
	mov	ecx, DWORD PTR _target$[ebp]
	mov	DWORD PTR [eax+16], ecx
$LN60@ucnv_UTF8F:
; Line 1003
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_ucnv_UTF8FromUTF8 ENDP
_TEXT	ENDS
END
