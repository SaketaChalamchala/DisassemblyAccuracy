; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\mozilla\intl\icu\source\common\uinvchar.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
_asciiFromEbcdic DB 00H
	DB	01H
	DB	02H
	DB	03H
	DB	00H
	DB	09H
	DB	00H
	DB	07fH
	DB	00H
	DB	00H
	DB	00H
	DB	0bH
	DB	0cH
	DB	0dH
	DB	0eH
	DB	0fH
	DB	010H
	DB	011H
	DB	012H
	DB	013H
	DB	00H
	DB	0aH
	DB	08H
	DB	00H
	DB	018H
	DB	019H
	DB	00H
	DB	00H
	DB	01cH
	DB	01dH
	DB	01eH
	DB	01fH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	0aH
	DB	017H
	DB	01bH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	05H
	DB	06H
	DB	07H
	DB	00H
	DB	00H
	DB	016H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	04H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	014H
	DB	015H
	DB	00H
	DB	01aH
	DB	020H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	02eH
	DB	03cH
	DB	028H
	DB	02bH
	DB	07cH
	DB	026H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	021H
	DB	024H
	DB	02aH
	DB	029H
	DB	03bH
	DB	05eH
	DB	02dH
	DB	02fH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	02cH
	DB	025H
	DB	05fH
	DB	03eH
	DB	03fH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	060H
	DB	03aH
	DB	023H
	DB	040H
	DB	027H
	DB	03dH
	DB	022H
	DB	00H
	DB	061H
	DB	062H
	DB	063H
	DB	064H
	DB	065H
	DB	066H
	DB	067H
	DB	068H
	DB	069H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	06aH
	DB	06bH
	DB	06cH
	DB	06dH
	DB	06eH
	DB	06fH
	DB	070H
	DB	071H
	DB	072H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	07eH
	DB	073H
	DB	074H
	DB	075H
	DB	076H
	DB	077H
	DB	078H
	DB	079H
	DB	07aH
	DB	00H
	DB	00H
	DB	00H
	DB	05bH
	DB	00H
	DB	00H
	DB	05eH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	05bH
	DB	05dH
	DB	00H
	DB	05dH
	DB	00H
	DB	00H
	DB	07bH
	DB	041H
	DB	042H
	DB	043H
	DB	044H
	DB	045H
	DB	046H
	DB	047H
	DB	048H
	DB	049H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	07dH
	DB	04aH
	DB	04bH
	DB	04cH
	DB	04dH
	DB	04eH
	DB	04fH
	DB	050H
	DB	051H
	DB	052H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	05cH
	DB	00H
	DB	053H
	DB	054H
	DB	055H
	DB	056H
	DB	057H
	DB	058H
	DB	059H
	DB	05aH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	030H
	DB	031H
	DB	032H
	DB	033H
	DB	034H
	DB	035H
	DB	036H
	DB	037H
	DB	038H
	DB	039H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
_ebcdicFromAscii DB 00H
	DB	01H
	DB	02H
	DB	03H
	DB	037H
	DB	02dH
	DB	02eH
	DB	02fH
	DB	016H
	DB	05H
	DB	00H
	DB	0bH
	DB	0cH
	DB	0dH
	DB	0eH
	DB	0fH
	DB	010H
	DB	011H
	DB	012H
	DB	013H
	DB	03cH
	DB	03dH
	DB	032H
	DB	026H
	DB	018H
	DB	019H
	DB	03fH
	DB	027H
	DB	01cH
	DB	01dH
	DB	01eH
	DB	01fH
	DB	040H
	DB	00H
	DB	07fH
	DB	00H
	DB	00H
	DB	06cH
	DB	050H
	DB	07dH
	DB	04dH
	DB	05dH
	DB	05cH
	DB	04eH
	DB	06bH
	DB	060H
	DB	04bH
	DB	061H
	DB	0f0H
	DB	0f1H
	DB	0f2H
	DB	0f3H
	DB	0f4H
	DB	0f5H
	DB	0f6H
	DB	0f7H
	DB	0f8H
	DB	0f9H
	DB	07aH
	DB	05eH
	DB	04cH
	DB	07eH
	DB	06eH
	DB	06fH
	DB	00H
	DB	0c1H
	DB	0c2H
	DB	0c3H
	DB	0c4H
	DB	0c5H
	DB	0c6H
	DB	0c7H
	DB	0c8H
	DB	0c9H
	DB	0d1H
	DB	0d2H
	DB	0d3H
	DB	0d4H
	DB	0d5H
	DB	0d6H
	DB	0d7H
	DB	0d8H
	DB	0d9H
	DB	0e2H
	DB	0e3H
	DB	0e4H
	DB	0e5H
	DB	0e6H
	DB	0e7H
	DB	0e8H
	DB	0e9H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	06dH
	DB	00H
	DB	081H
	DB	082H
	DB	083H
	DB	084H
	DB	085H
	DB	086H
	DB	087H
	DB	088H
	DB	089H
	DB	091H
	DB	092H
	DB	093H
	DB	094H
	DB	095H
	DB	096H
	DB	097H
	DB	098H
	DB	099H
	DB	0a2H
	DB	0a3H
	DB	0a4H
	DB	0a5H
	DB	0a6H
	DB	0a7H
	DB	0a8H
	DB	0a9H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	07H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
_lowercaseAsciiFromEbcdic DB 00H
	DB	01H
	DB	02H
	DB	03H
	DB	00H
	DB	09H
	DB	00H
	DB	07fH
	DB	00H
	DB	00H
	DB	00H
	DB	0bH
	DB	0cH
	DB	0dH
	DB	0eH
	DB	0fH
	DB	010H
	DB	011H
	DB	012H
	DB	013H
	DB	00H
	DB	0aH
	DB	08H
	DB	00H
	DB	018H
	DB	019H
	DB	00H
	DB	00H
	DB	01cH
	DB	01dH
	DB	01eH
	DB	01fH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	0aH
	DB	017H
	DB	01bH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	05H
	DB	06H
	DB	07H
	DB	00H
	DB	00H
	DB	016H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	04H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	014H
	DB	015H
	DB	00H
	DB	01aH
	DB	020H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	02eH
	DB	03cH
	DB	028H
	DB	02bH
	DB	07cH
	DB	026H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	021H
	DB	024H
	DB	02aH
	DB	029H
	DB	03bH
	DB	05eH
	DB	02dH
	DB	02fH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	02cH
	DB	025H
	DB	05fH
	DB	03eH
	DB	03fH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	060H
	DB	03aH
	DB	023H
	DB	040H
	DB	027H
	DB	03dH
	DB	022H
	DB	00H
	DB	061H
	DB	062H
	DB	063H
	DB	064H
	DB	065H
	DB	066H
	DB	067H
	DB	068H
	DB	069H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	06aH
	DB	06bH
	DB	06cH
	DB	06dH
	DB	06eH
	DB	06fH
	DB	070H
	DB	071H
	DB	072H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	07eH
	DB	073H
	DB	074H
	DB	075H
	DB	076H
	DB	077H
	DB	078H
	DB	079H
	DB	07aH
	DB	00H
	DB	00H
	DB	00H
	DB	05bH
	DB	00H
	DB	00H
	DB	05eH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	05bH
	DB	05dH
	DB	00H
	DB	05dH
	DB	00H
	DB	00H
	DB	07bH
	DB	061H
	DB	062H
	DB	063H
	DB	064H
	DB	065H
	DB	066H
	DB	067H
	DB	068H
	DB	069H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	07dH
	DB	06aH
	DB	06bH
	DB	06cH
	DB	06dH
	DB	06eH
	DB	06fH
	DB	070H
	DB	071H
	DB	072H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	07cH
	DB	00H
	DB	073H
	DB	074H
	DB	075H
	DB	076H
	DB	077H
	DB	078H
	DB	079H
	DB	07aH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	030H
	DB	031H
	DB	032H
	DB	033H
	DB	034H
	DB	035H
	DB	036H
	DB	037H
	DB	038H
	DB	039H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
_invariantChars DD 0fffffbffH
	DD	0ffffffe5H
	DD	087fffffeH
	DD	087fffffeH
CONST	ENDS
PUBLIC	??_C@_1BO@OMJPKALG@?$AA?$CI?$AAu?$AA?$CB?$AA?$DN?$AA0?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AAc?$AA?$DN?$AA?$DN?$AA0?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1FK@HJLLJGBM@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@ ; `string'
PUBLIC	?__LINE__Var@?1??u_charsToUChars_56@@9@9	; `u_charsToUChars_56'::`2'::__LINE__Var
PUBLIC	_u_charsToUChars_56
EXTRN	__imp___wassert:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT ??_C@_1BO@OMJPKALG@?$AA?$CI?$AAu?$AA?$CB?$AA?$DN?$AA0?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AAc?$AA?$DN?$AA?$DN?$AA0?$AA?$CJ?$AA?$AA@
; File d:\mozilla\intl\icu\source\common\uinvchar.c
CONST	SEGMENT
??_C@_1BO@OMJPKALG@?$AA?$CI?$AAu?$AA?$CB?$AA?$DN?$AA0?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AAc?$AA?$DN?$AA?$DN?$AA0?$AA?$CJ?$AA?$AA@ DB '('
	DB	00H, 'u', 00H, '!', 00H, '=', 00H, '0', 00H, ' ', 00H, '|', 00H
	DB	'|', 00H, ' ', 00H, 'c', 00H, '=', 00H, '=', 00H, '0', 00H, ')'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1FK@HJLLJGBM@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@
CONST	SEGMENT
??_C@_1FK@HJLLJGBM@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@ DB 'd'
	DB	00H, ':', 00H, '\', 00H, 'm', 00H, 'o', 00H, 'z', 00H, 'i', 00H
	DB	'l', 00H, 'l', 00H, 'a', 00H, '\', 00H, 'i', 00H, 'n', 00H, 't'
	DB	00H, 'l', 00H, '\', 00H, 'i', 00H, 'c', 00H, 'u', 00H, '\', 00H
	DB	's', 00H, 'o', 00H, 'u', 00H, 'r', 00H, 'c', 00H, 'e', 00H, '\'
	DB	00H, 'c', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'o', 00H, 'n', 00H
	DB	'\', 00H, 'u', 00H, 'i', 00H, 'n', 00H, 'v', 00H, 'c', 00H, 'h'
	DB	00H, 'a', 00H, 'r', 00H, '.', 00H, 'c', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??u_charsToUChars_56@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??u_charsToUChars_56@@9@9 DD 0b7H	; `u_charsToUChars_56'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT _u_charsToUChars_56
_TEXT	SEGMENT
_c$ = -17						; size = 1
_u$ = -8						; size = 2
_cs$ = 8						; size = 4
_us$ = 12						; size = 4
_length$ = 16						; size = 4
_u_charsToUChars_56 PROC				; COMDAT
; Line 183
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
$LN2@u_charsToU:
; Line 192
	cmp	DWORD PTR _length$[ebp], 0
	jle	SHORT $LN3@u_charsToU
; Line 193
	mov	eax, DWORD PTR _cs$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _c$[ebp], cl
	mov	edx, DWORD PTR _cs$[ebp]
	add	edx, 1
	mov	DWORD PTR _cs$[ebp], edx
; Line 194
	movzx	ax, BYTE PTR _c$[ebp]
	mov	WORD PTR _u$[ebp], ax
; Line 195
	movzx	eax, WORD PTR _u$[ebp]
	test	eax, eax
	jne	SHORT $LN5@u_charsToU
	movzx	ecx, BYTE PTR _c$[ebp]
	test	ecx, ecx
	je	SHORT $LN5@u_charsToU
	mov	edx, DWORD PTR ?__LINE__Var@?1??u_charsToUChars_56@@9@9
	add	edx, 12					; 0000000cH
	mov	esi, esp
	push	edx
	push	OFFSET ??_C@_1FK@HJLLJGBM@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@
	push	OFFSET ??_C@_1BO@OMJPKALG@?$AA?$CI?$AAu?$AA?$CB?$AA?$DN?$AA0?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AAc?$AA?$DN?$AA?$DN?$AA0?$AA?$CJ?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN5@u_charsToU:
; Line 196
	mov	eax, DWORD PTR _us$[ebp]
	mov	cx, WORD PTR _u$[ebp]
	mov	WORD PTR [eax], cx
	mov	edx, DWORD PTR _us$[ebp]
	add	edx, 2
	mov	DWORD PTR _us$[ebp], edx
; Line 197
	mov	eax, DWORD PTR _length$[ebp]
	sub	eax, 1
	mov	DWORD PTR _length$[ebp], eax
; Line 198
	jmp	SHORT $LN2@u_charsToU
$LN3@u_charsToU:
; Line 199
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_u_charsToUChars_56 ENDP
_TEXT	ENDS
PUBLIC	??_C@_13COJANIEC@?$AA0?$AA?$AA@			; `string'
PUBLIC	?__LINE__Var@?1??u_UCharsToChars_56@@9@9	; `u_UCharsToChars_56'::`2'::__LINE__Var
PUBLIC	_u_UCharsToChars_56
;	COMDAT ??_C@_13COJANIEC@?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_13COJANIEC@?$AA0?$AA?$AA@ DB '0', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??u_UCharsToChars_56@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??u_UCharsToChars_56@@9@9 DD 0caH	; `u_UCharsToChars_56'::`2'::__LINE__Var
; Function compile flags: /Odtp /RTCsu /ZI
_DATA	ENDS
;	COMDAT _u_UCharsToChars_56
_TEXT	SEGMENT
_u$ = -8						; size = 2
_us$ = 8						; size = 4
_cs$ = 12						; size = 4
_length$ = 16						; size = 4
_u_UCharsToChars_56 PROC				; COMDAT
; Line 202
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
$LN4@u_UCharsTo:
; Line 205
	cmp	DWORD PTR _length$[ebp], 0
	jle	$LN5@u_UCharsTo
; Line 206
	mov	eax, DWORD PTR _us$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR _u$[ebp], cx
	mov	edx, DWORD PTR _us$[ebp]
	add	edx, 2
	mov	DWORD PTR _us$[ebp], edx
; Line 207
	movzx	eax, WORD PTR _u$[ebp]
	cmp	eax, 127				; 0000007fH
	jg	SHORT $LN1@u_UCharsTo
	movzx	eax, WORD PTR _u$[ebp]
	sar	eax, 5
	movzx	ecx, WORD PTR _u$[ebp]
	and	ecx, 31					; 0000001fH
	mov	edx, 1
	shl	edx, cl
	and	edx, DWORD PTR _invariantChars[eax*4]
	jne	SHORT $LN2@u_UCharsTo
$LN1@u_UCharsTo:
; Line 208
	xor	eax, eax
	jne	SHORT $LN7@u_UCharsTo
	mov	ecx, DWORD PTR ?__LINE__Var@?1??u_UCharsToChars_56@@9@9
	add	ecx, 6
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_1FK@HJLLJGBM@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@
	push	OFFSET ??_C@_13COJANIEC@?$AA0?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN7@u_UCharsTo:
; Line 209
	xor	eax, eax
	mov	WORD PTR _u$[ebp], ax
$LN2@u_UCharsTo:
; Line 211
	mov	eax, DWORD PTR _cs$[ebp]
	mov	cl, BYTE PTR _u$[ebp]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _cs$[ebp]
	add	edx, 1
	mov	DWORD PTR _cs$[ebp], edx
; Line 212
	mov	eax, DWORD PTR _length$[ebp]
	sub	eax, 1
	mov	DWORD PTR _length$[ebp], eax
; Line 213
	jmp	$LN4@u_UCharsTo
$LN5@u_UCharsTo:
; Line 214
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_u_UCharsToChars_56 ENDP
_TEXT	ENDS
PUBLIC	_uprv_isInvariantString_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _uprv_isInvariantString_56
_TEXT	SEGMENT
_c$ = -5						; size = 1
_s$ = 8							; size = 4
_length$ = 12						; size = 4
_uprv_isInvariantString_56 PROC				; COMDAT
; Line 217
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
$LN9@uprv_isInv:
; Line 221
	cmp	DWORD PTR _length$[ebp], 0
	jge	SHORT $LN7@uprv_isInv
; Line 223
	mov	eax, DWORD PTR _s$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _c$[ebp], cl
	mov	edx, DWORD PTR _s$[ebp]
	add	edx, 1
	mov	DWORD PTR _s$[ebp], edx
; Line 224
	movzx	eax, BYTE PTR _c$[ebp]
	test	eax, eax
	jne	SHORT $LN6@uprv_isInv
; Line 225
	jmp	SHORT $LN8@uprv_isInv
$LN6@uprv_isInv:
; Line 227
	jmp	SHORT $LN5@uprv_isInv
$LN7@uprv_isInv:
; Line 229
	cmp	DWORD PTR _length$[ebp], 0
	jne	SHORT $LN4@uprv_isInv
; Line 230
	jmp	SHORT $LN8@uprv_isInv
$LN4@uprv_isInv:
; Line 232
	mov	eax, DWORD PTR _length$[ebp]
	sub	eax, 1
	mov	DWORD PTR _length$[ebp], eax
; Line 233
	mov	eax, DWORD PTR _s$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _c$[ebp], cl
	mov	edx, DWORD PTR _s$[ebp]
	add	edx, 1
	mov	DWORD PTR _s$[ebp], edx
; Line 234
	movzx	eax, BYTE PTR _c$[ebp]
	test	eax, eax
	jne	SHORT $LN5@uprv_isInv
; Line 235
	jmp	SHORT $LN9@uprv_isInv
$LN5@uprv_isInv:
; Line 245
	movzx	eax, BYTE PTR _c$[ebp]
	cmp	eax, 127				; 0000007fH
	jg	SHORT $LN1@uprv_isInv
	movzx	eax, BYTE PTR _c$[ebp]
	sar	eax, 5
	movzx	ecx, BYTE PTR _c$[ebp]
	and	ecx, 31					; 0000001fH
	mov	edx, 1
	shl	edx, cl
	and	edx, DWORD PTR _invariantChars[eax*4]
	jne	SHORT $LN2@uprv_isInv
$LN1@uprv_isInv:
; Line 246
	xor	al, al
	jmp	SHORT $LN10@uprv_isInv
$LN2@uprv_isInv:
; Line 256
	jmp	SHORT $LN9@uprv_isInv
$LN8@uprv_isInv:
; Line 257
	mov	al, 1
$LN10@uprv_isInv:
; Line 258
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_uprv_isInvariantString_56 ENDP
_TEXT	ENDS
PUBLIC	_uprv_isInvariantUString_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _uprv_isInvariantUString_56
_TEXT	SEGMENT
_c$ = -8						; size = 2
_s$ = 8							; size = 4
_length$ = 12						; size = 4
_uprv_isInvariantUString_56 PROC			; COMDAT
; Line 261
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
$LN8@uprv_isInv@2:
; Line 265
	cmp	DWORD PTR _length$[ebp], 0
	jge	SHORT $LN6@uprv_isInv@2
; Line 267
	mov	eax, DWORD PTR _s$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR _c$[ebp], cx
	mov	edx, DWORD PTR _s$[ebp]
	add	edx, 2
	mov	DWORD PTR _s$[ebp], edx
; Line 268
	movzx	eax, WORD PTR _c$[ebp]
	test	eax, eax
	jne	SHORT $LN5@uprv_isInv@2
; Line 269
	jmp	SHORT $LN7@uprv_isInv@2
$LN5@uprv_isInv@2:
; Line 271
	jmp	SHORT $LN4@uprv_isInv@2
$LN6@uprv_isInv@2:
; Line 273
	cmp	DWORD PTR _length$[ebp], 0
	jne	SHORT $LN3@uprv_isInv@2
; Line 274
	jmp	SHORT $LN7@uprv_isInv@2
$LN3@uprv_isInv@2:
; Line 276
	mov	eax, DWORD PTR _length$[ebp]
	sub	eax, 1
	mov	DWORD PTR _length$[ebp], eax
; Line 277
	mov	eax, DWORD PTR _s$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR _c$[ebp], cx
	mov	edx, DWORD PTR _s$[ebp]
	add	edx, 2
	mov	DWORD PTR _s$[ebp], edx
$LN4@uprv_isInv@2:
; Line 284
	movzx	eax, WORD PTR _c$[ebp]
	cmp	eax, 127				; 0000007fH
	jg	SHORT $LN1@uprv_isInv@2
	movzx	eax, WORD PTR _c$[ebp]
	sar	eax, 5
	movzx	ecx, WORD PTR _c$[ebp]
	and	ecx, 31					; 0000001fH
	mov	edx, 1
	shl	edx, cl
	and	edx, DWORD PTR _invariantChars[eax*4]
	jne	SHORT $LN2@uprv_isInv@2
$LN1@uprv_isInv@2:
; Line 285
	xor	al, al
	jmp	SHORT $LN9@uprv_isInv@2
$LN2@uprv_isInv@2:
; Line 287
	jmp	SHORT $LN8@uprv_isInv@2
$LN7@uprv_isInv@2:
; Line 288
	mov	al, 1
$LN9@uprv_isInv@2:
; Line 289
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_uprv_isInvariantUString_56 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0EP@FOAJOBKF@uprv_ebcdicFromAscii?$CI?$CJ?5string?$FL?$CFd@ ; `string'
PUBLIC	_uprv_ebcdicFromAscii_56
EXTRN	_udata_printError_56:PROC
;	COMDAT ??_C@_0EP@FOAJOBKF@uprv_ebcdicFromAscii?$CI?$CJ?5string?$FL?$CFd@
CONST	SEGMENT
??_C@_0EP@FOAJOBKF@uprv_ebcdicFromAscii?$CI?$CJ?5string?$FL?$CFd@ DB 'upr'
	DB	'v_ebcdicFromAscii() string[%d] contains a variant character i'
	DB	'n position %d', 0aH, 00H			; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT _uprv_ebcdicFromAscii_56
_TEXT	SEGMENT
_count$ = -44						; size = 4
_c$ = -29						; size = 1
_t$ = -20						; size = 4
_s$ = -8						; size = 4
_ds$ = 8						; size = 4
_inData$ = 12						; size = 4
_length$ = 16						; size = 4
_outData$ = 20						; size = 4
_pErrorCode$ = 24					; size = 4
_uprv_ebcdicFromAscii_56 PROC				; COMDAT
; Line 297
	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 304
	cmp	DWORD PTR _pErrorCode$[ebp], 0
	je	SHORT $LN7@uprv_ebcdi
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN8@uprv_ebcdi
$LN7@uprv_ebcdi:
; Line 305
	xor	eax, eax
	jmp	$LN9@uprv_ebcdi
$LN8@uprv_ebcdi:
; Line 307
	cmp	DWORD PTR _ds$[ebp], 0
	je	SHORT $LN5@uprv_ebcdi
	cmp	DWORD PTR _inData$[ebp], 0
	je	SHORT $LN5@uprv_ebcdi
	cmp	DWORD PTR _length$[ebp], 0
	jl	SHORT $LN5@uprv_ebcdi
	cmp	DWORD PTR _length$[ebp], 0
	jle	SHORT $LN6@uprv_ebcdi
	cmp	DWORD PTR _outData$[ebp], 0
	jne	SHORT $LN6@uprv_ebcdi
$LN5@uprv_ebcdi:
; Line 308
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 1
; Line 309
	xor	eax, eax
	jmp	$LN9@uprv_ebcdi
$LN6@uprv_ebcdi:
; Line 313
	mov	eax, DWORD PTR _inData$[ebp]
	mov	DWORD PTR _s$[ebp], eax
; Line 314
	mov	eax, DWORD PTR _outData$[ebp]
	mov	DWORD PTR _t$[ebp], eax
; Line 315
	mov	eax, DWORD PTR _length$[ebp]
	mov	DWORD PTR _count$[ebp], eax
$LN4@uprv_ebcdi:
; Line 316
	cmp	DWORD PTR _count$[ebp], 0
	jle	$LN3@uprv_ebcdi
; Line 317
	mov	eax, DWORD PTR _s$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _c$[ebp], cl
	mov	edx, DWORD PTR _s$[ebp]
	add	edx, 1
	mov	DWORD PTR _s$[ebp], edx
; Line 318
	movzx	eax, BYTE PTR _c$[ebp]
	cmp	eax, 127				; 0000007fH
	jg	SHORT $LN1@uprv_ebcdi
	movzx	eax, BYTE PTR _c$[ebp]
	sar	eax, 5
	movzx	ecx, BYTE PTR _c$[ebp]
	and	ecx, 31					; 0000001fH
	mov	edx, 1
	shl	edx, cl
	and	edx, DWORD PTR _invariantChars[eax*4]
	jne	SHORT $LN2@uprv_ebcdi
$LN1@uprv_ebcdi:
; Line 320
	mov	eax, DWORD PTR _length$[ebp]
	sub	eax, DWORD PTR _count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _length$[ebp]
	push	ecx
	push	OFFSET ??_C@_0EP@FOAJOBKF@uprv_ebcdicFromAscii?$CI?$CJ?5string?$FL?$CFd@
	mov	edx, DWORD PTR _ds$[ebp]
	push	edx
	call	_udata_printError_56
	add	esp, 16					; 00000010H
; Line 321
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 10			; 0000000aH
; Line 322
	xor	eax, eax
	jmp	SHORT $LN9@uprv_ebcdi
$LN2@uprv_ebcdi:
; Line 324
	movzx	eax, BYTE PTR _c$[ebp]
	mov	ecx, DWORD PTR _t$[ebp]
	mov	dl, BYTE PTR _ebcdicFromAscii[eax]
	mov	BYTE PTR [ecx], dl
	mov	eax, DWORD PTR _t$[ebp]
	add	eax, 1
	mov	DWORD PTR _t$[ebp], eax
; Line 325
	mov	eax, DWORD PTR _count$[ebp]
	sub	eax, 1
	mov	DWORD PTR _count$[ebp], eax
; Line 326
	jmp	$LN4@uprv_ebcdi
$LN3@uprv_ebcdi:
; Line 328
	mov	eax, DWORD PTR _length$[ebp]
$LN9@uprv_ebcdi:
; Line 329
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_uprv_ebcdicFromAscii_56 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0EN@GNKNHFM@uprv_copyFromAscii?$CI?$CJ?5string?$FL?$CFd?$FN?5@ ; `string'
PUBLIC	_uprv_copyAscii_56
EXTRN	_memcpy:PROC
EXTRN	_uprv_checkValidMemory:PROC
;	COMDAT ??_C@_0EN@GNKNHFM@uprv_copyFromAscii?$CI?$CJ?5string?$FL?$CFd?$FN?5@
CONST	SEGMENT
??_C@_0EN@GNKNHFM@uprv_copyFromAscii?$CI?$CJ?5string?$FL?$CFd?$FN?5@ DB 'u'
	DB	'prv_copyFromAscii() string[%d] contains a variant character i'
	DB	'n position %d', 0aH, 00H			; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT _uprv_copyAscii_56
_TEXT	SEGMENT
_count$ = -32						; size = 4
_c$ = -17						; size = 1
_s$ = -8						; size = 4
_ds$ = 8						; size = 4
_inData$ = 12						; size = 4
_length$ = 16						; size = 4
_outData$ = 20						; size = 4
_pErrorCode$ = 24					; size = 4
_uprv_copyAscii_56 PROC					; COMDAT
; Line 335
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 341
	cmp	DWORD PTR _pErrorCode$[ebp], 0
	je	SHORT $LN8@uprv_copyA
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN9@uprv_copyA
$LN8@uprv_copyA:
; Line 342
	xor	eax, eax
	jmp	$LN10@uprv_copyA
$LN9@uprv_copyA:
; Line 344
	cmp	DWORD PTR _ds$[ebp], 0
	je	SHORT $LN6@uprv_copyA
	cmp	DWORD PTR _inData$[ebp], 0
	je	SHORT $LN6@uprv_copyA
	cmp	DWORD PTR _length$[ebp], 0
	jl	SHORT $LN6@uprv_copyA
	cmp	DWORD PTR _length$[ebp], 0
	jle	SHORT $LN7@uprv_copyA
	cmp	DWORD PTR _outData$[ebp], 0
	jne	SHORT $LN7@uprv_copyA
$LN6@uprv_copyA:
; Line 345
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 1
; Line 346
	xor	eax, eax
	jmp	$LN10@uprv_copyA
$LN7@uprv_copyA:
; Line 350
	mov	eax, DWORD PTR _inData$[ebp]
	mov	DWORD PTR _s$[ebp], eax
; Line 351
	mov	eax, DWORD PTR _length$[ebp]
	mov	DWORD PTR _count$[ebp], eax
$LN5@uprv_copyA:
; Line 352
	cmp	DWORD PTR _count$[ebp], 0
	jle	SHORT $LN4@uprv_copyA
; Line 353
	mov	eax, DWORD PTR _s$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _c$[ebp], cl
	mov	edx, DWORD PTR _s$[ebp]
	add	edx, 1
	mov	DWORD PTR _s$[ebp], edx
; Line 354
	movzx	eax, BYTE PTR _c$[ebp]
	cmp	eax, 127				; 0000007fH
	jg	SHORT $LN2@uprv_copyA
	movzx	eax, BYTE PTR _c$[ebp]
	sar	eax, 5
	movzx	ecx, BYTE PTR _c$[ebp]
	and	ecx, 31					; 0000001fH
	mov	edx, 1
	shl	edx, cl
	and	edx, DWORD PTR _invariantChars[eax*4]
	jne	SHORT $LN3@uprv_copyA
$LN2@uprv_copyA:
; Line 356
	mov	eax, DWORD PTR _length$[ebp]
	sub	eax, DWORD PTR _count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _length$[ebp]
	push	ecx
	push	OFFSET ??_C@_0EN@GNKNHFM@uprv_copyFromAscii?$CI?$CJ?5string?$FL?$CFd?$FN?5@
	mov	edx, DWORD PTR _ds$[ebp]
	push	edx
	call	_udata_printError_56
	add	esp, 16					; 00000010H
; Line 357
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 10			; 0000000aH
; Line 358
	xor	eax, eax
	jmp	SHORT $LN10@uprv_copyA
$LN3@uprv_copyA:
; Line 360
	mov	eax, DWORD PTR _count$[ebp]
	sub	eax, 1
	mov	DWORD PTR _count$[ebp], eax
; Line 361
	jmp	SHORT $LN5@uprv_copyA
$LN4@uprv_copyA:
; Line 363
	cmp	DWORD PTR _length$[ebp], 0
	jle	SHORT $LN1@uprv_copyA
	mov	eax, DWORD PTR _inData$[ebp]
	cmp	eax, DWORD PTR _outData$[ebp]
	je	SHORT $LN1@uprv_copyA
; Line 364
	push	1
	mov	eax, DWORD PTR _inData$[ebp]
	push	eax
	call	_uprv_checkValidMemory
	add	esp, 8
	mov	ecx, DWORD PTR _length$[ebp]
	push	ecx
	mov	edx, DWORD PTR _inData$[ebp]
	push	edx
	mov	eax, DWORD PTR _outData$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@uprv_copyA:
; Line 367
	mov	eax, DWORD PTR _length$[ebp]
$LN10@uprv_copyA:
; Line 368
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_uprv_copyAscii_56 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0EP@ICFODGAO@uprv_asciiFromEbcdic?$CI?$CJ?5string?$FL?$CFd@ ; `string'
PUBLIC	_uprv_asciiFromEbcdic_56
;	COMDAT ??_C@_0EP@ICFODGAO@uprv_asciiFromEbcdic?$CI?$CJ?5string?$FL?$CFd@
CONST	SEGMENT
??_C@_0EP@ICFODGAO@uprv_asciiFromEbcdic?$CI?$CJ?5string?$FL?$CFd@ DB 'upr'
	DB	'v_asciiFromEbcdic() string[%d] contains a variant character i'
	DB	'n position %d', 0aH, 00H			; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT _uprv_asciiFromEbcdic_56
_TEXT	SEGMENT
_count$ = -44						; size = 4
_c$ = -29						; size = 1
_t$ = -20						; size = 4
_s$ = -8						; size = 4
_ds$ = 8						; size = 4
_inData$ = 12						; size = 4
_length$ = 16						; size = 4
_outData$ = 20						; size = 4
_pErrorCode$ = 24					; size = 4
_uprv_asciiFromEbcdic_56 PROC				; COMDAT
; Line 374
	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 381
	cmp	DWORD PTR _pErrorCode$[ebp], 0
	je	SHORT $LN8@uprv_ascii
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN9@uprv_ascii
$LN8@uprv_ascii:
; Line 382
	xor	eax, eax
	jmp	$LN10@uprv_ascii
$LN9@uprv_ascii:
; Line 384
	cmp	DWORD PTR _ds$[ebp], 0
	je	SHORT $LN6@uprv_ascii
	cmp	DWORD PTR _inData$[ebp], 0
	je	SHORT $LN6@uprv_ascii
	cmp	DWORD PTR _length$[ebp], 0
	jl	SHORT $LN6@uprv_ascii
	cmp	DWORD PTR _length$[ebp], 0
	jle	SHORT $LN7@uprv_ascii
	cmp	DWORD PTR _outData$[ebp], 0
	jne	SHORT $LN7@uprv_ascii
$LN6@uprv_ascii:
; Line 385
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 1
; Line 386
	xor	eax, eax
	jmp	$LN10@uprv_ascii
$LN7@uprv_ascii:
; Line 390
	mov	eax, DWORD PTR _inData$[ebp]
	mov	DWORD PTR _s$[ebp], eax
; Line 391
	mov	eax, DWORD PTR _outData$[ebp]
	mov	DWORD PTR _t$[ebp], eax
; Line 392
	mov	eax, DWORD PTR _length$[ebp]
	mov	DWORD PTR _count$[ebp], eax
$LN5@uprv_ascii:
; Line 393
	cmp	DWORD PTR _count$[ebp], 0
	jle	$LN4@uprv_ascii
; Line 394
	mov	eax, DWORD PTR _s$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _c$[ebp], cl
	mov	edx, DWORD PTR _s$[ebp]
	add	edx, 1
	mov	DWORD PTR _s$[ebp], edx
; Line 395
	movzx	eax, BYTE PTR _c$[ebp]
	test	eax, eax
	je	SHORT $LN3@uprv_ascii
	movzx	eax, BYTE PTR _c$[ebp]
	mov	cl, BYTE PTR _asciiFromEbcdic[eax]
	mov	BYTE PTR _c$[ebp], cl
	movzx	edx, BYTE PTR _c$[ebp]
	test	edx, edx
	je	SHORT $LN2@uprv_ascii
	movzx	eax, BYTE PTR _c$[ebp]
	cmp	eax, 127				; 0000007fH
	jg	SHORT $LN2@uprv_ascii
	movzx	eax, BYTE PTR _c$[ebp]
	sar	eax, 5
	movzx	ecx, BYTE PTR _c$[ebp]
	and	ecx, 31					; 0000001fH
	mov	edx, 1
	shl	edx, cl
	and	edx, DWORD PTR _invariantChars[eax*4]
	jne	SHORT $LN3@uprv_ascii
$LN2@uprv_ascii:
; Line 397
	mov	eax, DWORD PTR _length$[ebp]
	sub	eax, DWORD PTR _count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _length$[ebp]
	push	ecx
	push	OFFSET ??_C@_0EP@ICFODGAO@uprv_asciiFromEbcdic?$CI?$CJ?5string?$FL?$CFd@
	mov	edx, DWORD PTR _ds$[ebp]
	push	edx
	call	_udata_printError_56
	add	esp, 16					; 00000010H
; Line 398
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 10			; 0000000aH
; Line 399
	xor	eax, eax
	jmp	SHORT $LN10@uprv_ascii
$LN3@uprv_ascii:
; Line 401
	mov	eax, DWORD PTR _t$[ebp]
	mov	cl, BYTE PTR _c$[ebp]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _t$[ebp]
	add	edx, 1
	mov	DWORD PTR _t$[ebp], edx
; Line 402
	mov	eax, DWORD PTR _count$[ebp]
	sub	eax, 1
	mov	DWORD PTR _count$[ebp], eax
; Line 403
	jmp	$LN5@uprv_ascii
$LN4@uprv_ascii:
; Line 405
	mov	eax, DWORD PTR _length$[ebp]
$LN10@uprv_ascii:
; Line 406
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_uprv_asciiFromEbcdic_56 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0EJ@KCIFDGKN@uprv_copyEbcdic?$CI?$CJ?5string?$FL?$CF?$FN?5cont@ ; `string'
PUBLIC	_uprv_copyEbcdic_56
;	COMDAT ??_C@_0EJ@KCIFDGKN@uprv_copyEbcdic?$CI?$CJ?5string?$FL?$CF?$FN?5cont@
CONST	SEGMENT
??_C@_0EJ@KCIFDGKN@uprv_copyEbcdic?$CI?$CJ?5string?$FL?$CF?$FN?5cont@ DB 'u'
	DB	'prv_copyEbcdic() string[%] contains a variant character in po'
	DB	'sition %d', 0aH, 00H			; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT _uprv_copyEbcdic_56
_TEXT	SEGMENT
_count$ = -32						; size = 4
_c$ = -17						; size = 1
_s$ = -8						; size = 4
_ds$ = 8						; size = 4
_inData$ = 12						; size = 4
_length$ = 16						; size = 4
_outData$ = 20						; size = 4
_pErrorCode$ = 24					; size = 4
_uprv_copyEbcdic_56 PROC				; COMDAT
; Line 412
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 418
	cmp	DWORD PTR _pErrorCode$[ebp], 0
	je	SHORT $LN9@uprv_copyE
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN10@uprv_copyE
$LN9@uprv_copyE:
; Line 419
	xor	eax, eax
	jmp	$LN11@uprv_copyE
$LN10@uprv_copyE:
; Line 421
	cmp	DWORD PTR _ds$[ebp], 0
	je	SHORT $LN7@uprv_copyE
	cmp	DWORD PTR _inData$[ebp], 0
	je	SHORT $LN7@uprv_copyE
	cmp	DWORD PTR _length$[ebp], 0
	jl	SHORT $LN7@uprv_copyE
	cmp	DWORD PTR _length$[ebp], 0
	jle	SHORT $LN8@uprv_copyE
	cmp	DWORD PTR _outData$[ebp], 0
	jne	SHORT $LN8@uprv_copyE
$LN7@uprv_copyE:
; Line 422
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 1
; Line 423
	xor	eax, eax
	jmp	$LN11@uprv_copyE
$LN8@uprv_copyE:
; Line 427
	mov	eax, DWORD PTR _inData$[ebp]
	mov	DWORD PTR _s$[ebp], eax
; Line 428
	mov	eax, DWORD PTR _length$[ebp]
	mov	DWORD PTR _count$[ebp], eax
$LN6@uprv_copyE:
; Line 429
	cmp	DWORD PTR _count$[ebp], 0
	jle	$LN5@uprv_copyE
; Line 430
	mov	eax, DWORD PTR _s$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _c$[ebp], cl
	mov	edx, DWORD PTR _s$[ebp]
	add	edx, 1
	mov	DWORD PTR _s$[ebp], edx
; Line 431
	movzx	eax, BYTE PTR _c$[ebp]
	test	eax, eax
	je	SHORT $LN4@uprv_copyE
	movzx	eax, BYTE PTR _c$[ebp]
	mov	cl, BYTE PTR _asciiFromEbcdic[eax]
	mov	BYTE PTR _c$[ebp], cl
	movzx	edx, BYTE PTR _c$[ebp]
	test	edx, edx
	je	SHORT $LN3@uprv_copyE
	movzx	eax, BYTE PTR _c$[ebp]
	cmp	eax, 127				; 0000007fH
	jg	SHORT $LN3@uprv_copyE
	movzx	eax, BYTE PTR _c$[ebp]
	sar	eax, 5
	movzx	ecx, BYTE PTR _c$[ebp]
	and	ecx, 31					; 0000001fH
	mov	edx, 1
	shl	edx, cl
	and	edx, DWORD PTR _invariantChars[eax*4]
	jne	SHORT $LN4@uprv_copyE
$LN3@uprv_copyE:
; Line 433
	mov	eax, DWORD PTR _length$[ebp]
	sub	eax, DWORD PTR _count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _length$[ebp]
	push	ecx
	push	OFFSET ??_C@_0EJ@KCIFDGKN@uprv_copyEbcdic?$CI?$CJ?5string?$FL?$CF?$FN?5cont@
	mov	edx, DWORD PTR _ds$[ebp]
	push	edx
	call	_udata_printError_56
	add	esp, 16					; 00000010H
; Line 434
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 10			; 0000000aH
; Line 435
	xor	eax, eax
	jmp	SHORT $LN11@uprv_copyE
$LN4@uprv_copyE:
; Line 437
	mov	eax, DWORD PTR _count$[ebp]
	sub	eax, 1
	mov	DWORD PTR _count$[ebp], eax
; Line 438
	jmp	$LN6@uprv_copyE
$LN5@uprv_copyE:
; Line 440
	cmp	DWORD PTR _length$[ebp], 0
	jle	SHORT $LN1@uprv_copyE
	mov	eax, DWORD PTR _inData$[ebp]
	cmp	eax, DWORD PTR _outData$[ebp]
	je	SHORT $LN1@uprv_copyE
; Line 441
	push	1
	mov	eax, DWORD PTR _inData$[ebp]
	push	eax
	call	_uprv_checkValidMemory
	add	esp, 8
	mov	ecx, DWORD PTR _length$[ebp]
	push	ecx
	mov	edx, DWORD PTR _inData$[ebp]
	push	edx
	mov	eax, DWORD PTR _outData$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@uprv_copyE:
; Line 444
	mov	eax, DWORD PTR _length$[ebp]
$LN11@uprv_copyE:
; Line 445
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_uprv_copyEbcdic_56 ENDP
_TEXT	ENDS
PUBLIC	_uprv_compareInvAscii_56
EXTRN	_u_strlen_56:PROC
EXTRN	_strlen:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _uprv_compareInvAscii_56
_TEXT	SEGMENT
tv75 = -244						; size = 4
_c$ = -41						; size = 1
_c2$ = -32						; size = 4
_c1$ = -20						; size = 4
_minLength$ = -8					; size = 4
_ds$ = 8						; size = 4
_outString$ = 12					; size = 4
_outLength$ = 16					; size = 4
_localString$ = 20					; size = 4
_localLength$ = 24					; size = 4
_uprv_compareInvAscii_56 PROC				; COMDAT
; Line 451
	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 456
	cmp	DWORD PTR _outString$[ebp], 0
	je	SHORT $LN10@uprv_compa
	cmp	DWORD PTR _outLength$[ebp], -1
	jl	SHORT $LN10@uprv_compa
	cmp	DWORD PTR _localString$[ebp], 0
	je	SHORT $LN10@uprv_compa
	cmp	DWORD PTR _localLength$[ebp], -1
	jge	SHORT $LN11@uprv_compa
$LN10@uprv_compa:
; Line 457
	xor	eax, eax
	jmp	$LN12@uprv_compa
$LN11@uprv_compa:
; Line 460
	cmp	DWORD PTR _outLength$[ebp], 0
	jge	SHORT $LN9@uprv_compa
; Line 461
	mov	eax, DWORD PTR _outString$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	mov	DWORD PTR _outLength$[ebp], eax
$LN9@uprv_compa:
; Line 463
	cmp	DWORD PTR _localLength$[ebp], 0
	jge	SHORT $LN8@uprv_compa
; Line 464
	mov	eax, DWORD PTR _localString$[ebp]
	push	eax
	call	_u_strlen_56
	add	esp, 4
	mov	DWORD PTR _localLength$[ebp], eax
$LN8@uprv_compa:
; Line 467
	mov	eax, DWORD PTR _outLength$[ebp]
	cmp	eax, DWORD PTR _localLength$[ebp]
	jge	SHORT $LN14@uprv_compa
	mov	ecx, DWORD PTR _outLength$[ebp]
	mov	DWORD PTR tv75[ebp], ecx
	jmp	SHORT $LN15@uprv_compa
$LN14@uprv_compa:
	mov	edx, DWORD PTR _localLength$[ebp]
	mov	DWORD PTR tv75[ebp], edx
$LN15@uprv_compa:
	mov	eax, DWORD PTR tv75[ebp]
	mov	DWORD PTR _minLength$[ebp], eax
$LN7@uprv_compa:
; Line 469
	cmp	DWORD PTR _minLength$[ebp], 0
	jle	$LN6@uprv_compa
; Line 470
	mov	eax, DWORD PTR _outString$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _c$[ebp], cl
	mov	edx, DWORD PTR _outString$[ebp]
	add	edx, 1
	mov	DWORD PTR _outString$[ebp], edx
; Line 471
	movzx	eax, BYTE PTR _c$[ebp]
	cmp	eax, 127				; 0000007fH
	jg	SHORT $LN5@uprv_compa
	movzx	eax, BYTE PTR _c$[ebp]
	sar	eax, 5
	movzx	ecx, BYTE PTR _c$[ebp]
	and	ecx, 31					; 0000001fH
	mov	edx, 1
	shl	edx, cl
	and	edx, DWORD PTR _invariantChars[eax*4]
	je	SHORT $LN5@uprv_compa
; Line 472
	movzx	eax, BYTE PTR _c$[ebp]
	mov	DWORD PTR _c1$[ebp], eax
; Line 473
	jmp	SHORT $LN4@uprv_compa
$LN5@uprv_compa:
; Line 474
	mov	DWORD PTR _c1$[ebp], -1
$LN4@uprv_compa:
; Line 477
	mov	eax, DWORD PTR _localString$[ebp]
	movzx	ecx, WORD PTR [eax]
	mov	DWORD PTR _c2$[ebp], ecx
	mov	edx, DWORD PTR _localString$[ebp]
	add	edx, 2
	mov	DWORD PTR _localString$[ebp], edx
; Line 478
	cmp	DWORD PTR _c2$[ebp], 127		; 0000007fH
	jg	SHORT $LN2@uprv_compa
	mov	eax, DWORD PTR _c2$[ebp]
	sar	eax, 5
	mov	ecx, DWORD PTR _c2$[ebp]
	and	ecx, 31					; 0000001fH
	mov	edx, 1
	shl	edx, cl
	and	edx, DWORD PTR _invariantChars[eax*4]
	jne	SHORT $LN3@uprv_compa
$LN2@uprv_compa:
; Line 479
	mov	DWORD PTR _c2$[ebp], -2			; fffffffeH
$LN3@uprv_compa:
; Line 482
	mov	eax, DWORD PTR _c1$[ebp]
	sub	eax, DWORD PTR _c2$[ebp]
	mov	DWORD PTR _c1$[ebp], eax
	je	SHORT $LN1@uprv_compa
; Line 483
	mov	eax, DWORD PTR _c1$[ebp]
	jmp	SHORT $LN12@uprv_compa
$LN1@uprv_compa:
; Line 486
	mov	eax, DWORD PTR _minLength$[ebp]
	sub	eax, 1
	mov	DWORD PTR _minLength$[ebp], eax
; Line 487
	jmp	$LN7@uprv_compa
$LN6@uprv_compa:
; Line 490
	mov	eax, DWORD PTR _outLength$[ebp]
	sub	eax, DWORD PTR _localLength$[ebp]
$LN12@uprv_compa:
; Line 491
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_uprv_compareInvAscii_56 ENDP
_TEXT	ENDS
PUBLIC	_uprv_compareInvEbcdic_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _uprv_compareInvEbcdic_56
_TEXT	SEGMENT
tv75 = -244						; size = 4
_c$ = -41						; size = 1
_c2$ = -32						; size = 4
_c1$ = -20						; size = 4
_minLength$ = -8					; size = 4
_ds$ = 8						; size = 4
_outString$ = 12					; size = 4
_outLength$ = 16					; size = 4
_localString$ = 20					; size = 4
_localLength$ = 24					; size = 4
_uprv_compareInvEbcdic_56 PROC				; COMDAT
; Line 496
	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 501
	cmp	DWORD PTR _outString$[ebp], 0
	je	SHORT $LN12@uprv_compa@2
	cmp	DWORD PTR _outLength$[ebp], -1
	jl	SHORT $LN12@uprv_compa@2
	cmp	DWORD PTR _localString$[ebp], 0
	je	SHORT $LN12@uprv_compa@2
	cmp	DWORD PTR _localLength$[ebp], -1
	jge	SHORT $LN13@uprv_compa@2
$LN12@uprv_compa@2:
; Line 502
	xor	eax, eax
	jmp	$LN14@uprv_compa@2
$LN13@uprv_compa@2:
; Line 505
	cmp	DWORD PTR _outLength$[ebp], 0
	jge	SHORT $LN11@uprv_compa@2
; Line 506
	mov	eax, DWORD PTR _outString$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	mov	DWORD PTR _outLength$[ebp], eax
$LN11@uprv_compa@2:
; Line 508
	cmp	DWORD PTR _localLength$[ebp], 0
	jge	SHORT $LN10@uprv_compa@2
; Line 509
	mov	eax, DWORD PTR _localString$[ebp]
	push	eax
	call	_u_strlen_56
	add	esp, 4
	mov	DWORD PTR _localLength$[ebp], eax
$LN10@uprv_compa@2:
; Line 512
	mov	eax, DWORD PTR _outLength$[ebp]
	cmp	eax, DWORD PTR _localLength$[ebp]
	jge	SHORT $LN16@uprv_compa@2
	mov	ecx, DWORD PTR _outLength$[ebp]
	mov	DWORD PTR tv75[ebp], ecx
	jmp	SHORT $LN17@uprv_compa@2
$LN16@uprv_compa@2:
	mov	edx, DWORD PTR _localLength$[ebp]
	mov	DWORD PTR tv75[ebp], edx
$LN17@uprv_compa@2:
	mov	eax, DWORD PTR tv75[ebp]
	mov	DWORD PTR _minLength$[ebp], eax
$LN9@uprv_compa@2:
; Line 514
	cmp	DWORD PTR _minLength$[ebp], 0
	jle	$LN8@uprv_compa@2
; Line 515
	mov	eax, DWORD PTR _outString$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _c$[ebp], cl
	mov	edx, DWORD PTR _outString$[ebp]
	add	edx, 1
	mov	DWORD PTR _outString$[ebp], edx
; Line 516
	movzx	eax, BYTE PTR _c$[ebp]
	test	eax, eax
	jne	SHORT $LN7@uprv_compa@2
; Line 517
	mov	DWORD PTR _c1$[ebp], 0
	jmp	SHORT $LN6@uprv_compa@2
$LN7@uprv_compa@2:
; Line 518
	movzx	eax, BYTE PTR _c$[ebp]
	movzx	ecx, BYTE PTR _asciiFromEbcdic[eax]
	mov	DWORD PTR _c1$[ebp], ecx
	cmp	DWORD PTR _c1$[ebp], 0
	je	SHORT $LN5@uprv_compa@2
	cmp	DWORD PTR _c1$[ebp], 127		; 0000007fH
	jg	SHORT $LN5@uprv_compa@2
	mov	eax, DWORD PTR _c1$[ebp]
	sar	eax, 5
	mov	ecx, DWORD PTR _c1$[ebp]
	and	ecx, 31					; 0000001fH
	mov	edx, 1
	shl	edx, cl
	and	edx, DWORD PTR _invariantChars[eax*4]
	je	SHORT $LN5@uprv_compa@2
; Line 520
	jmp	SHORT $LN6@uprv_compa@2
$LN5@uprv_compa@2:
; Line 521
	mov	DWORD PTR _c1$[ebp], -1
$LN6@uprv_compa@2:
; Line 524
	mov	eax, DWORD PTR _localString$[ebp]
	movzx	ecx, WORD PTR [eax]
	mov	DWORD PTR _c2$[ebp], ecx
	mov	edx, DWORD PTR _localString$[ebp]
	add	edx, 2
	mov	DWORD PTR _localString$[ebp], edx
; Line 525
	cmp	DWORD PTR _c2$[ebp], 127		; 0000007fH
	jg	SHORT $LN2@uprv_compa@2
	mov	eax, DWORD PTR _c2$[ebp]
	sar	eax, 5
	mov	ecx, DWORD PTR _c2$[ebp]
	and	ecx, 31					; 0000001fH
	mov	edx, 1
	shl	edx, cl
	and	edx, DWORD PTR _invariantChars[eax*4]
	jne	SHORT $LN3@uprv_compa@2
$LN2@uprv_compa@2:
; Line 526
	mov	DWORD PTR _c2$[ebp], -2			; fffffffeH
$LN3@uprv_compa@2:
; Line 529
	mov	eax, DWORD PTR _c1$[ebp]
	sub	eax, DWORD PTR _c2$[ebp]
	mov	DWORD PTR _c1$[ebp], eax
	je	SHORT $LN1@uprv_compa@2
; Line 530
	mov	eax, DWORD PTR _c1$[ebp]
	jmp	SHORT $LN14@uprv_compa@2
$LN1@uprv_compa@2:
; Line 533
	mov	eax, DWORD PTR _minLength$[ebp]
	sub	eax, 1
	mov	DWORD PTR _minLength$[ebp], eax
; Line 534
	jmp	$LN9@uprv_compa@2
$LN8@uprv_compa@2:
; Line 537
	mov	eax, DWORD PTR _outLength$[ebp]
	sub	eax, DWORD PTR _localLength$[ebp]
$LN14@uprv_compa@2:
; Line 538
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_uprv_compareInvEbcdic_56 ENDP
_TEXT	ENDS
PUBLIC	_uprv_compareInvEbcdicAsAscii_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _uprv_compareInvEbcdicAsAscii_56
_TEXT	SEGMENT
_c2$ = -20						; size = 4
_c1$ = -8						; size = 4
_s1$ = 8						; size = 4
_s2$ = 12						; size = 4
_uprv_compareInvEbcdicAsAscii_56 PROC			; COMDAT
; Line 541
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 544
	jmp	SHORT $LN12@uprv_compa@3
$LN11@uprv_compa@3:
	mov	eax, DWORD PTR _s1$[ebp]
	add	eax, 1
	mov	DWORD PTR _s1$[ebp], eax
	mov	ecx, DWORD PTR _s2$[ebp]
	add	ecx, 1
	mov	DWORD PTR _s2$[ebp], ecx
$LN12@uprv_compa@3:
; Line 545
	mov	eax, DWORD PTR _s1$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _c1$[ebp], ecx
; Line 546
	mov	eax, DWORD PTR _s2$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _c2$[ebp], ecx
; Line 547
	mov	eax, DWORD PTR _c1$[ebp]
	cmp	eax, DWORD PTR _c2$[ebp]
	je	$LN9@uprv_compa@3
; Line 548
	cmp	DWORD PTR _c1$[ebp], 0
	je	SHORT $LN8@uprv_compa@3
	mov	eax, DWORD PTR _c1$[ebp]
	movzx	ecx, BYTE PTR _asciiFromEbcdic[eax]
	mov	DWORD PTR _c1$[ebp], ecx
	cmp	DWORD PTR _c1$[ebp], 0
	je	SHORT $LN7@uprv_compa@3
	cmp	DWORD PTR _c1$[ebp], 127		; 0000007fH
	jg	SHORT $LN7@uprv_compa@3
	mov	eax, DWORD PTR _c1$[ebp]
	sar	eax, 5
	mov	ecx, DWORD PTR _c1$[ebp]
	and	ecx, 31					; 0000001fH
	mov	edx, 1
	shl	edx, cl
	and	edx, DWORD PTR _invariantChars[eax*4]
	jne	SHORT $LN8@uprv_compa@3
$LN7@uprv_compa@3:
; Line 549
	mov	eax, DWORD PTR _s1$[ebp]
	movzx	ecx, BYTE PTR [eax]
	neg	ecx
	mov	DWORD PTR _c1$[ebp], ecx
$LN8@uprv_compa@3:
; Line 551
	cmp	DWORD PTR _c2$[ebp], 0
	je	SHORT $LN5@uprv_compa@3
	mov	eax, DWORD PTR _c2$[ebp]
	movzx	ecx, BYTE PTR _asciiFromEbcdic[eax]
	mov	DWORD PTR _c2$[ebp], ecx
	cmp	DWORD PTR _c2$[ebp], 0
	je	SHORT $LN4@uprv_compa@3
	cmp	DWORD PTR _c2$[ebp], 127		; 0000007fH
	jg	SHORT $LN4@uprv_compa@3
	mov	eax, DWORD PTR _c2$[ebp]
	sar	eax, 5
	mov	ecx, DWORD PTR _c2$[ebp]
	and	ecx, 31					; 0000001fH
	mov	edx, 1
	shl	edx, cl
	and	edx, DWORD PTR _invariantChars[eax*4]
	jne	SHORT $LN5@uprv_compa@3
$LN4@uprv_compa@3:
; Line 552
	mov	eax, DWORD PTR _s2$[ebp]
	movzx	ecx, BYTE PTR [eax]
	neg	ecx
	mov	DWORD PTR _c2$[ebp], ecx
$LN5@uprv_compa@3:
; Line 554
	mov	eax, DWORD PTR _c1$[ebp]
	sub	eax, DWORD PTR _c2$[ebp]
	jmp	SHORT $LN13@uprv_compa@3
	jmp	SHORT $LN2@uprv_compa@3
$LN9@uprv_compa@3:
; Line 555
	cmp	DWORD PTR _c1$[ebp], 0
	jne	SHORT $LN2@uprv_compa@3
; Line 556
	xor	eax, eax
	jmp	SHORT $LN13@uprv_compa@3
$LN2@uprv_compa@3:
; Line 558
	jmp	$LN11@uprv_compa@3
$LN13@uprv_compa@3:
; Line 559
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_uprv_compareInvEbcdicAsAscii_56 ENDP
_TEXT	ENDS
PUBLIC	_uprv_ebcdicToLowercaseAscii_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _uprv_ebcdicToLowercaseAscii_56
_TEXT	SEGMENT
_c$ = 8							; size = 1
_uprv_ebcdicToLowercaseAscii_56 PROC			; COMDAT
; Line 562
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 563
	movzx	eax, BYTE PTR _c$[ebp]
	mov	al, BYTE PTR _lowercaseAsciiFromEbcdic[eax]
; Line 564
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_uprv_ebcdicToLowercaseAscii_56 ENDP
_TEXT	ENDS
PUBLIC	_uprv_aestrncpy_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _uprv_aestrncpy_56
_TEXT	SEGMENT
_orig_dst$ = -8						; size = 4
_dst$ = 8						; size = 4
_src$ = 12						; size = 4
_n$ = 16						; size = 4
_uprv_aestrncpy_56 PROC					; COMDAT
; Line 568
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 569
	mov	eax, DWORD PTR _dst$[ebp]
	mov	DWORD PTR _orig_dst$[ebp], eax
; Line 571
	cmp	DWORD PTR _n$[ebp], -1
	jne	SHORT $LN4@uprv_aestr
; Line 572
	mov	eax, DWORD PTR _src$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	add	eax, 1
	mov	DWORD PTR _n$[ebp], eax
$LN4@uprv_aestr:
; Line 575
	mov	eax, DWORD PTR _src$[ebp]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN2@uprv_aestr
	cmp	DWORD PTR _n$[ebp], 0
	jle	SHORT $LN2@uprv_aestr
; Line 576
	mov	eax, DWORD PTR _src$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _dst$[ebp]
	mov	al, BYTE PTR _asciiFromEbcdic[ecx]
	mov	BYTE PTR [edx], al
	mov	ecx, DWORD PTR _dst$[ebp]
	add	ecx, 1
	mov	DWORD PTR _dst$[ebp], ecx
	mov	edx, DWORD PTR _src$[ebp]
	add	edx, 1
	mov	DWORD PTR _src$[ebp], edx
; Line 577
	mov	eax, DWORD PTR _n$[ebp]
	sub	eax, 1
	mov	DWORD PTR _n$[ebp], eax
; Line 578
	jmp	SHORT $LN4@uprv_aestr
$LN2@uprv_aestr:
; Line 580
	cmp	DWORD PTR _n$[ebp], 0
	jle	SHORT $LN1@uprv_aestr
; Line 581
	mov	eax, DWORD PTR _dst$[ebp]
	mov	BYTE PTR [eax], 0
	mov	ecx, DWORD PTR _dst$[ebp]
	add	ecx, 1
	mov	DWORD PTR _dst$[ebp], ecx
; Line 582
	mov	eax, DWORD PTR _n$[ebp]
	sub	eax, 1
	mov	DWORD PTR _n$[ebp], eax
; Line 583
	jmp	SHORT $LN2@uprv_aestr
$LN1@uprv_aestr:
; Line 584
	mov	eax, DWORD PTR _orig_dst$[ebp]
; Line 585
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_uprv_aestrncpy_56 ENDP
_TEXT	ENDS
PUBLIC	_uprv_eastrncpy_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _uprv_eastrncpy_56
_TEXT	SEGMENT
_ch$8520 = -17						; size = 1
_orig_dst$ = -8						; size = 4
_dst$ = 8						; size = 4
_src$ = 12						; size = 4
_n$ = 16						; size = 4
_uprv_eastrncpy_56 PROC					; COMDAT
; Line 589
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 590
	mov	eax, DWORD PTR _dst$[ebp]
	mov	DWORD PTR _orig_dst$[ebp], eax
; Line 592
	cmp	DWORD PTR _n$[ebp], -1
	jne	SHORT $LN5@uprv_eastr
; Line 593
	mov	eax, DWORD PTR _src$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	add	eax, 1
	mov	DWORD PTR _n$[ebp], eax
$LN5@uprv_eastr:
; Line 596
	mov	eax, DWORD PTR _src$[ebp]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN2@uprv_eastr
	cmp	DWORD PTR _n$[ebp], 0
	jle	SHORT $LN2@uprv_eastr
; Line 597
	mov	eax, DWORD PTR _src$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	dl, BYTE PTR _ebcdicFromAscii[ecx]
	mov	BYTE PTR _ch$8520[ebp], dl
	mov	eax, DWORD PTR _src$[ebp]
	add	eax, 1
	mov	DWORD PTR _src$[ebp], eax
; Line 598
	movsx	eax, BYTE PTR _ch$8520[ebp]
	test	eax, eax
	jne	SHORT $LN3@uprv_eastr
; Line 599
	mov	al, BYTE PTR _ebcdicFromAscii+63
	mov	BYTE PTR _ch$8520[ebp], al
$LN3@uprv_eastr:
; Line 601
	mov	eax, DWORD PTR _dst$[ebp]
	mov	cl, BYTE PTR _ch$8520[ebp]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _dst$[ebp]
	add	edx, 1
	mov	DWORD PTR _dst$[ebp], edx
; Line 602
	mov	eax, DWORD PTR _n$[ebp]
	sub	eax, 1
	mov	DWORD PTR _n$[ebp], eax
; Line 603
	jmp	SHORT $LN5@uprv_eastr
$LN2@uprv_eastr:
; Line 605
	cmp	DWORD PTR _n$[ebp], 0
	jle	SHORT $LN1@uprv_eastr
; Line 606
	mov	eax, DWORD PTR _dst$[ebp]
	mov	BYTE PTR [eax], 0
	mov	ecx, DWORD PTR _dst$[ebp]
	add	ecx, 1
	mov	DWORD PTR _dst$[ebp], ecx
; Line 607
	mov	eax, DWORD PTR _n$[ebp]
	sub	eax, 1
	mov	DWORD PTR _n$[ebp], eax
; Line 608
	jmp	SHORT $LN2@uprv_eastr
$LN1@uprv_eastr:
; Line 609
	mov	eax, DWORD PTR _orig_dst$[ebp]
; Line 610
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_uprv_eastrncpy_56 ENDP
_TEXT	ENDS
END
