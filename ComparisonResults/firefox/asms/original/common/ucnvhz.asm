; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\mozilla\intl\icu\source\common\ucnvhz.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	__HZData_56
CONST	SEGMENT
__HZImpl DD	017H
	DD	00H
	DD	00H
	DD	FLAT:__HZOpen
	DD	FLAT:__HZClose
	DD	FLAT:__HZReset
	DD	FLAT:_UConverter_toUnicode_HZ_OFFSETS_LOGIC
	DD	FLAT:_UConverter_toUnicode_HZ_OFFSETS_LOGIC
	DD	FLAT:_UConverter_fromUnicode_HZ_OFFSETS_LOGIC
	DD	FLAT:_UConverter_fromUnicode_HZ_OFFSETS_LOGIC
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:__HZ_WriteSub
	DD	FLAT:__HZ_SafeClone
	DD	FLAT:__HZ_GetUnicodeSet
	ORG $+8
__HZStaticData DD 064H
	DB	'HZ', 00H
	ORG $+57
	DD	00H
	DB	00H
	DB	017H
	DB	01H
	DB	04H
	DB	01aH
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+4
__HZData_56 DD	0e4H
	DD	0ffffffffH
	DD	00H
	DD	FLAT:__HZStaticData
	DB	00H
	DB	00H
	ORG $+2
	DD	FLAT:__HZImpl
	DD	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+1
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	ORG $+126
	DD	00H
	DD	00H
	DD	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+1
	DW	00H
	ORG $+2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
CONST	ENDS
PUBLIC	??_C@_03LIOLIPAH@GBK?$AA@			; `string'
EXTRN	_ucnv_close_56:PROC
EXTRN	_uprv_calloc_56:PROC
EXTRN	_ucnv_open_56:PROC
EXTRN	_ucnv_canCreateConverter_56:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT ??_C@_03LIOLIPAH@GBK?$AA@
; File d:\mozilla\intl\icu\source\common\ucnvhz.c
CONST	SEGMENT
??_C@_03LIOLIPAH@GBK?$AA@ DB 'GBK', 00H			; `string'
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT __HZOpen
_TEXT	SEGMENT
_gbConverter$ = -8					; size = 4
_cnv$ = 8						; size = 4
_pArgs$ = 12						; size = 4
_errorCode$ = 16					; size = 4
__HZOpen PROC						; COMDAT
; Line 70
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 72
	mov	eax, DWORD PTR _pArgs$[ebp]
	movsx	ecx, BYTE PTR [eax+8]
	test	ecx, ecx
	je	SHORT $LN4@HZOpen
; Line 73
	mov	eax, DWORD PTR _errorCode$[ebp]
	push	eax
	push	OFFSET ??_C@_03LIOLIPAH@GBK?$AA@
	call	_ucnv_canCreateConverter_56
	add	esp, 8
; Line 74
	jmp	$LN5@HZOpen
$LN4@HZOpen:
; Line 76
	mov	eax, DWORD PTR _errorCode$[ebp]
	push	eax
	push	OFFSET ??_C@_03LIOLIPAH@GBK?$AA@
	call	_ucnv_open_56
	add	esp, 8
	mov	DWORD PTR _gbConverter$[ebp], eax
; Line 77
	mov	eax, DWORD PTR _errorCode$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN3@HZOpen
; Line 78
	jmp	SHORT $LN5@HZOpen
$LN3@HZOpen:
; Line 80
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	DWORD PTR [eax+44], 0
; Line 81
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	DWORD PTR [eax+52], 0
; Line 82
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	DWORD PTR [eax+48], 0
; Line 83
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	DWORD PTR [eax+56], 0
; Line 84
	push	16					; 00000010H
	push	1
	call	_uprv_calloc_56
	add	esp, 8
	mov	ecx, DWORD PTR _cnv$[ebp]
	mov	DWORD PTR [ecx+8], eax
; Line 85
	mov	eax, DWORD PTR _cnv$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN2@HZOpen
; Line 86
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _gbConverter$[ebp]
	mov	DWORD PTR [ecx], edx
; Line 88
	jmp	SHORT $LN5@HZOpen
$LN2@HZOpen:
; Line 89
	mov	eax, DWORD PTR _gbConverter$[ebp]
	push	eax
	call	_ucnv_close_56
	add	esp, 4
; Line 90
	mov	eax, DWORD PTR _errorCode$[ebp]
	mov	DWORD PTR [eax], 7
$LN5@HZOpen:
; Line 93
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__HZOpen ENDP
_TEXT	ENDS
EXTRN	_uprv_free_56:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __HZClose
_TEXT	SEGMENT
_cnv$ = 8						; size = 4
__HZClose PROC						; COMDAT
; Line 96
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 97
	mov	eax, DWORD PTR _cnv$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN3@HZClose
; Line 98
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_ucnv_close_56
	add	esp, 4
; Line 99
	mov	eax, DWORD PTR _cnv$[ebp]
	movsx	ecx, BYTE PTR [eax+34]
	test	ecx, ecx
	jne	SHORT $LN1@HZClose
; Line 100
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_uprv_free_56
	add	esp, 4
$LN1@HZClose:
; Line 102
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	DWORD PTR [eax+8], 0
$LN3@HZClose:
; Line 104
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__HZClose ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __HZReset
_TEXT	SEGMENT
_cnv$ = 8						; size = 4
_choice$ = 12						; size = 4
__HZReset PROC						; COMDAT
; Line 107
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 108
	cmp	DWORD PTR _choice$[ebp], 1
	jg	SHORT $LN4@HZReset
; Line 109
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	DWORD PTR [eax+44], 0
; Line 110
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	DWORD PTR [eax+48], 0
; Line 111
	mov	eax, DWORD PTR _cnv$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN4@HZReset
; Line 112
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	BYTE PTR [ecx+13], 0
; Line 113
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	BYTE PTR [ecx+15], 0
$LN4@HZReset:
; Line 116
	cmp	DWORD PTR _choice$[ebp], 1
	je	SHORT $LN5@HZReset
; Line 117
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	DWORD PTR [eax+52], 0
; Line 118
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	DWORD PTR [eax+56], 0
; Line 119
	mov	eax, DWORD PTR _cnv$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN5@HZReset
; Line 120
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	BYTE PTR [ecx+12], 0
; Line 121
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+4], 0
; Line 122
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], 0
; Line 123
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	BYTE PTR [ecx+14], 0
$LN5@HZReset:
; Line 126
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
__HZReset ENDP
_TEXT	ENDS
EXTRN	_ucnv_MBCSSimpleGetNextUChar_56:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _UConverter_toUnicode_HZ_OFFSETS_LOGIC
_TEXT	SEGMENT
tv159 = -320						; size = 4
tv157 = -316						; size = 4
tv80 = -316						; size = 4
_leadByte$9114 = -116					; size = 4
_trailIsOk$9113 = -104					; size = 4
_leadIsOk$9112 = -92					; size = 4
_myData$ = -80						; size = 4
_mySourceChar$ = -68					; size = 4
_targetUniChar$ = -56					; size = 4
_mySourceLimit$ = -44					; size = 4
_myTarget$ = -32					; size = 4
_mySource$ = -20					; size = 4
_tempBuf$ = -8						; size = 2
_args$ = 8						; size = 4
_err$ = 12						; size = 4
_UConverter_toUnicode_HZ_OFFSETS_LOGIC PROC		; COMDAT
; Line 155
	push	ebp
	mov	ebp, esp
	sub	esp, 320				; 00000140H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-320]
	mov	ecx, 80					; 00000050H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 157
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _mySource$[ebp], ecx
; Line 158
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _myTarget$[ebp], ecx
; Line 159
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _mySourceLimit$[ebp], ecx
; Line 160
	mov	DWORD PTR _targetUniChar$[ebp], 0
; Line 161
	mov	DWORD PTR _mySourceChar$[ebp], 0
; Line 162
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _myData$[ebp], edx
; Line 163
	mov	BYTE PTR _tempBuf$[ebp], 0
; Line 164
	mov	BYTE PTR _tempBuf$[ebp+1], 0
$LN37@UConverter:
; Line 172
	mov	eax, DWORD PTR _mySource$[ebp]
	cmp	eax, DWORD PTR _mySourceLimit$[ebp]
	jae	$LN36@UConverter
; Line 174
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _myTarget$[ebp]
	cmp	ecx, DWORD PTR [eax+20]
	jae	$LN35@UConverter
; Line 176
	mov	eax, DWORD PTR _mySource$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _mySourceChar$[ebp], ecx
	mov	edx, DWORD PTR _mySource$[ebp]
	add	edx, 1
	mov	DWORD PTR _mySource$[ebp], edx
; Line 178
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cmp	DWORD PTR [ecx+48], 126			; 0000007eH
	jne	$LN34@UConverter
; Line 180
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+48], 0
; Line 181
	mov	eax, DWORD PTR _mySourceChar$[ebp]
	mov	DWORD PTR tv80[ebp], eax
	mov	ecx, DWORD PTR tv80[ebp]
	sub	ecx, 10					; 0000000aH
	mov	DWORD PTR tv80[ebp], ecx
	cmp	DWORD PTR tv80[ebp], 116		; 00000074H
	ja	$LN26@UConverter
	mov	edx, DWORD PTR tv80[ebp]
	movzx	eax, BYTE PTR $LN49@UConverter[edx]
	jmp	DWORD PTR $LN53@UConverter[eax*4]
$LN31@UConverter:
; Line 184
	jmp	$LN37@UConverter
$LN30@UConverter:
; Line 186
	mov	eax, DWORD PTR _args$[ebp]
	cmp	DWORD PTR [eax+24], 0
	je	SHORT $LN29@UConverter
; Line 187
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _mySource$[ebp]
	sub	ecx, DWORD PTR [eax+8]
	sub	ecx, 2
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR _myTarget$[ebp]
	sub	eax, DWORD PTR [edx+16]
	sar	eax, 1
	mov	edx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [edx+24]
	mov	DWORD PTR [edx+eax*4], ecx
$LN29@UConverter:
; Line 189
	mov	eax, DWORD PTR _myTarget$[ebp]
	mov	cx, WORD PTR _mySourceChar$[ebp]
	mov	WORD PTR [eax], cx
	mov	edx, DWORD PTR _myTarget$[ebp]
	add	edx, 2
	mov	DWORD PTR _myTarget$[ebp], edx
; Line 190
	mov	eax, DWORD PTR _myData$[ebp]
	mov	BYTE PTR [eax+15], 0
; Line 191
	jmp	$LN37@UConverter
$LN28@UConverter:
; Line 194
	xor	eax, eax
	cmp	DWORD PTR _mySourceChar$[ebp], 123	; 0000007bH
	sete	al
	mov	ecx, DWORD PTR _myData$[ebp]
	mov	BYTE PTR [ecx+13], al
; Line 195
	mov	eax, DWORD PTR _myData$[ebp]
	movsx	ecx, BYTE PTR [eax+15]
	test	ecx, ecx
	je	SHORT $LN27@UConverter
; Line 196
	mov	eax, DWORD PTR _myData$[ebp]
	mov	BYTE PTR [eax+15], 0
; Line 197
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 18			; 00000012H
; Line 198
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+256], 2
; Line 199
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx+37], 126			; 0000007eH
; Line 200
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	dl, BYTE PTR _mySourceChar$[ebp]
	mov	BYTE PTR [ecx+38], dl
; Line 201
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx+36], 2
; Line 202
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _myTarget$[ebp]
	mov	DWORD PTR [eax+16], ecx
; Line 203
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _mySource$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 204
	jmp	$LN38@UConverter
$LN27@UConverter:
; Line 206
	mov	eax, DWORD PTR _myData$[ebp]
	mov	BYTE PTR [eax+15], 1
; Line 207
	jmp	$LN37@UConverter
$LN26@UConverter:
; Line 218
	mov	eax, DWORD PTR _myData$[ebp]
	mov	BYTE PTR [eax+15], 0
; Line 219
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 18			; 00000012H
; Line 220
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx+37], 126			; 0000007eH
; Line 224
	mov	eax, DWORD PTR _myData$[ebp]
	movsx	ecx, BYTE PTR [eax+13]
	test	ecx, ecx
	je	SHORT $LN42@UConverter
	cmp	DWORD PTR _mySourceChar$[ebp], 33	; 00000021H
	jl	SHORT $LN40@UConverter
	cmp	DWORD PTR _mySourceChar$[ebp], 126	; 0000007eH
	jg	SHORT $LN40@UConverter
	mov	DWORD PTR tv157[ebp], 1
	jmp	SHORT $LN41@UConverter
$LN40@UConverter:
	mov	DWORD PTR tv157[ebp], 0
$LN41@UConverter:
	mov	edx, DWORD PTR tv157[ebp]
	mov	DWORD PTR tv159[ebp], edx
	jmp	SHORT $LN43@UConverter
$LN42@UConverter:
	xor	eax, eax
	cmp	DWORD PTR _mySourceChar$[ebp], 127	; 0000007fH
	setle	al
	mov	DWORD PTR tv159[ebp], eax
$LN43@UConverter:
	cmp	DWORD PTR tv159[ebp], 0
	je	SHORT $LN25@UConverter
; Line 226
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx+36], 1
; Line 227
	mov	eax, DWORD PTR _mySource$[ebp]
	sub	eax, 1
	mov	DWORD PTR _mySource$[ebp], eax
; Line 228
	jmp	SHORT $LN24@UConverter
$LN25@UConverter:
; Line 230
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	dl, BYTE PTR _mySourceChar$[ebp]
	mov	BYTE PTR [ecx+38], dl
; Line 231
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx+36], 2
$LN24@UConverter:
; Line 233
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _myTarget$[ebp]
	mov	DWORD PTR [eax+16], ecx
; Line 234
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _mySource$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 235
	jmp	$LN38@UConverter
; Line 237
	jmp	$LN23@UConverter
$LN34@UConverter:
	mov	eax, DWORD PTR _myData$[ebp]
	movsx	ecx, BYTE PTR [eax+13]
	test	ecx, ecx
	je	$LN22@UConverter
; Line 238
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cmp	DWORD PTR [ecx+44], 0
	jne	SHORT $LN21@UConverter
; Line 240
	cmp	DWORD PTR _mySourceChar$[ebp], 126	; 0000007eH
	jne	SHORT $LN20@UConverter
; Line 241
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+48], 126			; 0000007eH
; Line 242
	jmp	SHORT $LN19@UConverter
$LN20@UConverter:
; Line 244
	mov	eax, DWORD PTR _mySourceChar$[ebp]
	or	eax, 256				; 00000100H
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+44], eax
; Line 245
	mov	eax, DWORD PTR _myData$[ebp]
	mov	BYTE PTR [eax+15], 0
$LN19@UConverter:
; Line 247
	jmp	$LN37@UConverter
; Line 249
	jmp	$LN18@UConverter
$LN21@UConverter:
; Line 252
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+44]
	and	edx, 255				; 000000ffH
	mov	DWORD PTR _leadByte$9114[ebp], edx
; Line 253
	mov	DWORD PTR _targetUniChar$[ebp], 65535	; 0000ffffH
; Line 264
	mov	eax, DWORD PTR _leadByte$9114[ebp]
	sub	eax, 33					; 00000021H
	movzx	ecx, al
	xor	edx, edx
	cmp	ecx, 92					; 0000005cH
	setle	dl
	mov	DWORD PTR _leadIsOk$9112[ebp], edx
; Line 265
	mov	eax, DWORD PTR _mySourceChar$[ebp]
	sub	eax, 33					; 00000021H
	movzx	ecx, al
	xor	edx, edx
	cmp	ecx, 93					; 0000005dH
	setle	dl
	mov	DWORD PTR _trailIsOk$9113[ebp], edx
; Line 266
	cmp	DWORD PTR _leadIsOk$9112[ebp], 0
	je	SHORT $LN17@UConverter
	cmp	DWORD PTR _trailIsOk$9113[ebp], 0
	je	SHORT $LN17@UConverter
; Line 267
	mov	eax, DWORD PTR _leadByte$9114[ebp]
	add	eax, 128				; 00000080H
	mov	BYTE PTR _tempBuf$[ebp], al
; Line 268
	mov	eax, DWORD PTR _mySourceChar$[ebp]
	add	eax, 128				; 00000080H
	mov	BYTE PTR _tempBuf$[ebp+1], al
; Line 270
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	movzx	edx, BYTE PTR [ecx+35]
	push	edx
	push	2
	lea	eax, DWORD PTR _tempBuf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _myData$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	call	_ucnv_MBCSSimpleGetNextUChar_56
	add	esp, 16					; 00000010H
	mov	DWORD PTR _targetUniChar$[ebp], eax
; Line 271
	mov	eax, DWORD PTR _leadByte$9114[ebp]
	shl	eax, 8
	or	eax, DWORD PTR _mySourceChar$[ebp]
	mov	DWORD PTR _mySourceChar$[ebp], eax
	jmp	SHORT $LN16@UConverter
$LN17@UConverter:
; Line 272
	cmp	DWORD PTR _trailIsOk$9113[ebp], 0
	je	SHORT $LN15@UConverter
; Line 274
	mov	eax, DWORD PTR _mySource$[ebp]
	sub	eax, 1
	mov	DWORD PTR _mySource$[ebp], eax
; Line 275
	mov	eax, DWORD PTR _leadByte$9114[ebp]
	mov	DWORD PTR _mySourceChar$[ebp], eax
; Line 276
	jmp	SHORT $LN16@UConverter
$LN15@UConverter:
; Line 279
	mov	eax, DWORD PTR _leadByte$9114[ebp]
	shl	eax, 8
	or	eax, 65536				; 00010000H
	or	eax, DWORD PTR _mySourceChar$[ebp]
	mov	DWORD PTR _mySourceChar$[ebp], eax
$LN16@UConverter:
; Line 281
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+44], 0
$LN18@UConverter:
; Line 284
	jmp	SHORT $LN23@UConverter
$LN22@UConverter:
; Line 285
	cmp	DWORD PTR _mySourceChar$[ebp], 126	; 0000007eH
	jne	SHORT $LN12@UConverter
; Line 286
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+48], 126			; 0000007eH
; Line 287
	jmp	$LN37@UConverter
	jmp	SHORT $LN23@UConverter
$LN12@UConverter:
; Line 288
	cmp	DWORD PTR _mySourceChar$[ebp], 127	; 0000007fH
	jg	SHORT $LN10@UConverter
; Line 289
	movzx	eax, WORD PTR _mySourceChar$[ebp]
	mov	DWORD PTR _targetUniChar$[ebp], eax
; Line 290
	mov	eax, DWORD PTR _myData$[ebp]
	mov	BYTE PTR [eax+15], 0
; Line 291
	jmp	SHORT $LN23@UConverter
$LN10@UConverter:
; Line 292
	mov	DWORD PTR _targetUniChar$[ebp], 65535	; 0000ffffH
; Line 293
	mov	eax, DWORD PTR _myData$[ebp]
	mov	BYTE PTR [eax+15], 0
$LN23@UConverter:
; Line 296
	cmp	DWORD PTR _targetUniChar$[ebp], 65534	; 0000fffeH
	jge	SHORT $LN8@UConverter
; Line 297
	mov	eax, DWORD PTR _args$[ebp]
	cmp	DWORD PTR [eax+24], 0
	je	SHORT $LN7@UConverter
; Line 298
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _mySource$[ebp]
	sub	ecx, DWORD PTR [eax+8]
	sub	ecx, 1
	mov	edx, DWORD PTR _myData$[ebp]
	movsx	eax, BYTE PTR [edx+13]
	sub	ecx, eax
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR _myTarget$[ebp]
	sub	eax, DWORD PTR [edx+16]
	sar	eax, 1
	mov	edx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [edx+24]
	mov	DWORD PTR [edx+eax*4], ecx
$LN7@UConverter:
; Line 301
	mov	eax, DWORD PTR _myTarget$[ebp]
	mov	cx, WORD PTR _targetUniChar$[ebp]
	mov	WORD PTR [eax], cx
	mov	edx, DWORD PTR _myTarget$[ebp]
	add	edx, 2
	mov	DWORD PTR _myTarget$[ebp], edx
; Line 303
	jmp	SHORT $LN6@UConverter
$LN8@UConverter:
; Line 304
	cmp	DWORD PTR _targetUniChar$[ebp], 65534	; 0000fffeH
	jne	SHORT $LN5@UConverter
; Line 305
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 10			; 0000000aH
; Line 307
	jmp	SHORT $LN4@UConverter
$LN5@UConverter:
; Line 308
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 12			; 0000000cH
$LN4@UConverter:
; Line 310
	cmp	DWORD PTR _mySourceChar$[ebp], 255	; 000000ffH
	jle	SHORT $LN3@UConverter
; Line 311
	mov	eax, DWORD PTR _mySourceChar$[ebp]
	sar	eax, 8
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx+37], al
; Line 312
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	dl, BYTE PTR _mySourceChar$[ebp]
	mov	BYTE PTR [ecx+38], dl
; Line 313
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx+36], 2
; Line 315
	jmp	SHORT $LN2@UConverter
$LN3@UConverter:
; Line 316
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	dl, BYTE PTR _mySourceChar$[ebp]
	mov	BYTE PTR [ecx+37], dl
; Line 317
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx+36], 1
$LN2@UConverter:
; Line 319
	jmp	SHORT $LN36@UConverter
$LN6@UConverter:
; Line 322
	jmp	SHORT $LN1@UConverter
$LN35@UConverter:
; Line 323
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
; Line 324
	jmp	SHORT $LN36@UConverter
$LN1@UConverter:
; Line 326
	jmp	$LN37@UConverter
$LN36@UConverter:
; Line 328
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _myTarget$[ebp]
	mov	DWORD PTR [eax+16], ecx
; Line 329
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _mySource$[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN38@UConverter:
; Line 330
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN52@UConverter
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 320				; 00000140H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN52@UConverter:
	DD	1
	DD	$LN51@UConverter
$LN51@UConverter:
	DD	-8					; fffffff8H
	DD	2
	DD	$LN50@UConverter
$LN50@UConverter:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	66					; 00000042H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
$LN53@UConverter:
	DD	$LN31@UConverter
	DD	$LN28@UConverter
	DD	$LN30@UConverter
	DD	$LN26@UConverter
$LN49@UConverter:
	DB	0
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	1
	DB	3
	DB	1
	DB	2
_UConverter_toUnicode_HZ_OFFSETS_LOGIC ENDP
_TEXT	ENDS
PUBLIC	??_C@_02JCBKMDIK@?$HO?$HL?$AA@			; `string'
PUBLIC	??_C@_02MEEAGEAM@?$HO?$HN?$AA@			; `string'
PUBLIC	??_C@_02OPGNDHMP@?$HO?$HO?$AA@			; `string'
EXTRN	_ucnv_MBCSFromUChar32_56:PROC
;	COMDAT ??_C@_02JCBKMDIK@?$HO?$HL?$AA@
CONST	SEGMENT
??_C@_02JCBKMDIK@?$HO?$HL?$AA@ DB '~{', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02MEEAGEAM@?$HO?$HN?$AA@
CONST	SEGMENT
??_C@_02MEEAGEAM@?$HO?$HN?$AA@ DB '~}', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02OPGNDHMP@?$HO?$HO?$AA@
CONST	SEGMENT
??_C@_02OPGNDHMP@?$HO?$HO?$AA@ DB '~~', 00H		; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT _UConverter_fromUnicode_HZ_OFFSETS_LOGIC
_TEXT	SEGMENT
tv201 = -388						; size = 4
tv176 = -388						; size = 4
tv89 = -388						; size = 4
_trail$9245 = -188					; size = 2
_length$9190 = -176					; size = 4
_escSeq$ = -164						; size = 4
_len$ = -152						; size = 4
_oldIsTargetUCharDBCS$ = -137				; size = 1
_isTargetUCharDBCS$ = -125				; size = 1
_myConverterData$ = -116				; size = 4
_mySourceChar$ = -104					; size = 4
_targetUniChar$ = -92					; size = 4
_mySourceLength$ = -80					; size = 4
_targetLength$ = -68					; size = 4
_myTargetIndex$ = -56					; size = 4
_mySourceIndex$ = -44					; size = 4
_offsets$ = -32						; size = 4
_myTarget$ = -20					; size = 4
_mySource$ = -8						; size = 4
_args$ = 8						; size = 4
_err$ = 12						; size = 4
_UConverter_fromUnicode_HZ_OFFSETS_LOGIC PROC		; COMDAT
; Line 335
	push	ebp
	mov	ebp, esp
	sub	esp, 388				; 00000184H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-388]
	mov	ecx, 97					; 00000061H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 336
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _mySource$[ebp], ecx
; Line 337
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _myTarget$[ebp], ecx
; Line 338
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR _offsets$[ebp], ecx
; Line 339
	mov	DWORD PTR _mySourceIndex$[ebp], 0
; Line 340
	mov	DWORD PTR _myTargetIndex$[ebp], 0
; Line 341
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	sub	ecx, DWORD PTR _myTarget$[ebp]
	mov	DWORD PTR _targetLength$[ebp], ecx
; Line 342
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [eax+12]
	sub	edx, DWORD PTR [ecx+8]
	sar	edx, 1
	mov	DWORD PTR _mySourceLength$[ebp], edx
; Line 343
	mov	DWORD PTR _targetUniChar$[ebp], 0
; Line 344
	mov	DWORD PTR _mySourceChar$[ebp], 0
; Line 345
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _myConverterData$[ebp], edx
; Line 346
	mov	eax, DWORD PTR _myConverterData$[ebp]
	mov	cl, BYTE PTR [eax+14]
	mov	BYTE PTR _isTargetUCharDBCS$[ebp], cl
; Line 348
	mov	DWORD PTR _len$[ebp], 0
; Line 349
	mov	DWORD PTR _escSeq$[ebp], 0
; Line 356
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cmp	DWORD PTR [ecx+56], 0
	je	SHORT $LN50@UConverter@2
	mov	eax, DWORD PTR _myTargetIndex$[ebp]
	cmp	eax, DWORD PTR _targetLength$[ebp]
	jge	SHORT $LN50@UConverter@2
; Line 357
	jmp	$getTrail$9169
$LN50@UConverter@2:
; Line 360
	mov	eax, DWORD PTR _mySourceIndex$[ebp]
	cmp	eax, DWORD PTR _mySourceLength$[ebp]
	jge	$LN49@UConverter@2
; Line 361
	mov	DWORD PTR _targetUniChar$[ebp], 65535	; 0000ffffH
; Line 362
	mov	eax, DWORD PTR _myTargetIndex$[ebp]
	cmp	eax, DWORD PTR _targetLength$[ebp]
	jge	$LN48@UConverter@2
; Line 364
	mov	eax, DWORD PTR _mySourceIndex$[ebp]
	mov	ecx, DWORD PTR _mySource$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	mov	DWORD PTR _mySourceChar$[ebp], edx
	mov	eax, DWORD PTR _mySourceIndex$[ebp]
	add	eax, 1
	mov	DWORD PTR _mySourceIndex$[ebp], eax
; Line 367
	mov	al, BYTE PTR _isTargetUCharDBCS$[ebp]
	mov	BYTE PTR _oldIsTargetUCharDBCS$[ebp], al
; Line 368
	cmp	DWORD PTR _mySourceChar$[ebp], 126	; 0000007eH
	jne	$LN47@UConverter@2
; Line 370
	mov	DWORD PTR _len$[ebp], 2
; Line 371
	mov	DWORD PTR _escSeq$[ebp], OFFSET ??_C@_02OPGNDHMP@?$HO?$HO?$AA@
$LN46@UConverter@2:
; Line 372
	mov	eax, DWORD PTR _len$[ebp]
	mov	ecx, DWORD PTR _len$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _len$[ebp], ecx
	test	eax, eax
	jle	SHORT $LN54@UConverter@2
	mov	DWORD PTR tv89[ebp], 1
	jmp	SHORT $LN55@UConverter@2
$LN54@UConverter@2:
	mov	DWORD PTR tv89[ebp], 0
$LN55@UConverter@2:
	cmp	DWORD PTR tv89[ebp], 0
	je	$LN45@UConverter@2
	mov	eax, DWORD PTR _myTargetIndex$[ebp]
	cmp	eax, DWORD PTR _targetLength$[ebp]
	jge	SHORT $LN44@UConverter@2
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _myTargetIndex$[ebp]
	mov	eax, DWORD PTR _escSeq$[ebp]
	mov	al, BYTE PTR [eax]
	mov	BYTE PTR [ecx+edx], al
	mov	eax, DWORD PTR _args$[ebp]
	cmp	DWORD PTR [eax+24], 0
	je	SHORT $LN43@UConverter@2
	mov	eax, DWORD PTR _mySourceIndex$[ebp]
	sub	eax, 1
	mov	ecx, DWORD PTR _offsets$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
$LN43@UConverter@2:
	mov	eax, DWORD PTR _myTargetIndex$[ebp]
	add	eax, 1
	mov	DWORD PTR _myTargetIndex$[ebp], eax
	jmp	SHORT $LN42@UConverter@2
$LN44@UConverter@2:
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+4]
	movsx	edx, BYTE PTR [eax+63]
	mov	eax, DWORD PTR _escSeq$[ebp]
	mov	al, BYTE PTR [eax]
	mov	BYTE PTR [ecx+edx+76], al
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	al, BYTE PTR [edx+63]
	add	al, 1
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx+63], al
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
$LN42@UConverter@2:
	mov	eax, DWORD PTR _escSeq$[ebp]
	add	eax, 1
	mov	DWORD PTR _escSeq$[ebp], eax
	jmp	$LN46@UConverter@2
$LN45@UConverter@2:
; Line 373
	jmp	$LN50@UConverter@2
	jmp	SHORT $LN41@UConverter@2
$LN47@UConverter@2:
; Line 374
	cmp	DWORD PTR _mySourceChar$[ebp], 127	; 0000007fH
	jg	SHORT $LN40@UConverter@2
; Line 375
	mov	eax, DWORD PTR _mySourceChar$[ebp]
	mov	DWORD PTR _targetUniChar$[ebp], eax
; Line 376
	jmp	SHORT $LN41@UConverter@2
$LN40@UConverter@2:
; Line 378
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	movzx	edx, BYTE PTR [ecx+35]
	push	edx
	lea	eax, DWORD PTR _targetUniChar$[ebp]
	push	eax
	mov	ecx, DWORD PTR _mySourceChar$[ebp]
	push	ecx
	mov	edx, DWORD PTR _myConverterData$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	call	_ucnv_MBCSFromUChar32_56
	add	esp, 16					; 00000010H
	mov	DWORD PTR _length$9190[ebp], eax
; Line 383
	cmp	DWORD PTR _length$9190[ebp], 2
	jne	SHORT $LN38@UConverter@2
	mov	eax, DWORD PTR _targetUniChar$[ebp]
	sub	eax, 41377				; 0000a1a1H
	movzx	ecx, ax
	cmp	ecx, 23645				; 00005c5dH
	jg	SHORT $LN38@UConverter@2
	mov	eax, DWORD PTR _targetUniChar$[ebp]
	sub	eax, 161				; 000000a1H
	movzx	ecx, al
	cmp	ecx, 93					; 0000005dH
	jg	SHORT $LN38@UConverter@2
; Line 384
	mov	eax, DWORD PTR _targetUniChar$[ebp]
	sub	eax, 32896				; 00008080H
	mov	DWORD PTR _targetUniChar$[ebp], eax
; Line 385
	jmp	SHORT $LN41@UConverter@2
$LN38@UConverter@2:
; Line 386
	mov	DWORD PTR _targetUniChar$[ebp], 65535	; 0000ffffH
$LN41@UConverter@2:
; Line 389
	cmp	DWORD PTR _targetUniChar$[ebp], 65535	; 0000ffffH
	je	$LN36@UConverter@2
; Line 390
	cmp	DWORD PTR _targetUniChar$[ebp], 255	; 000000ffH
	seta	al
	mov	BYTE PTR _isTargetUCharDBCS$[ebp], al
	mov	ecx, DWORD PTR _myConverterData$[ebp]
	mov	dl, BYTE PTR _isTargetUCharDBCS$[ebp]
	mov	BYTE PTR [ecx+14], dl
; Line 391
	movsx	eax, BYTE PTR _oldIsTargetUCharDBCS$[ebp]
	movsx	ecx, BYTE PTR _isTargetUCharDBCS$[ebp]
	cmp	eax, ecx
	jne	SHORT $LN34@UConverter@2
	mov	eax, DWORD PTR _myConverterData$[ebp]
	movsx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jne	$LN35@UConverter@2
$LN34@UConverter@2:
; Line 393
	movsx	eax, BYTE PTR _isTargetUCharDBCS$[ebp]
	test	eax, eax
	jne	$LN33@UConverter@2
; Line 394
	mov	DWORD PTR _len$[ebp], 2
; Line 395
	mov	DWORD PTR _escSeq$[ebp], OFFSET ??_C@_02MEEAGEAM@?$HO?$HN?$AA@
$LN32@UConverter@2:
; Line 396
	mov	eax, DWORD PTR _len$[ebp]
	mov	ecx, DWORD PTR _len$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _len$[ebp], ecx
	test	eax, eax
	jle	SHORT $LN56@UConverter@2
	mov	DWORD PTR tv176[ebp], 1
	jmp	SHORT $LN57@UConverter@2
$LN56@UConverter@2:
	mov	DWORD PTR tv176[ebp], 0
$LN57@UConverter@2:
	cmp	DWORD PTR tv176[ebp], 0
	je	$LN31@UConverter@2
	mov	eax, DWORD PTR _myTargetIndex$[ebp]
	cmp	eax, DWORD PTR _targetLength$[ebp]
	jge	SHORT $LN30@UConverter@2
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _myTargetIndex$[ebp]
	mov	eax, DWORD PTR _escSeq$[ebp]
	mov	al, BYTE PTR [eax]
	mov	BYTE PTR [ecx+edx], al
	mov	eax, DWORD PTR _args$[ebp]
	cmp	DWORD PTR [eax+24], 0
	je	SHORT $LN29@UConverter@2
	mov	eax, DWORD PTR _mySourceIndex$[ebp]
	sub	eax, 1
	mov	ecx, DWORD PTR _offsets$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
$LN29@UConverter@2:
	mov	eax, DWORD PTR _myTargetIndex$[ebp]
	add	eax, 1
	mov	DWORD PTR _myTargetIndex$[ebp], eax
	jmp	SHORT $LN28@UConverter@2
$LN30@UConverter@2:
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+4]
	movsx	edx, BYTE PTR [eax+63]
	mov	eax, DWORD PTR _escSeq$[ebp]
	mov	al, BYTE PTR [eax]
	mov	BYTE PTR [ecx+edx+76], al
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	al, BYTE PTR [edx+63]
	add	al, 1
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx+63], al
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
$LN28@UConverter@2:
	mov	eax, DWORD PTR _escSeq$[ebp]
	add	eax, 1
	mov	DWORD PTR _escSeq$[ebp], eax
	jmp	$LN32@UConverter@2
$LN31@UConverter@2:
; Line 397
	mov	eax, DWORD PTR _myConverterData$[ebp]
	mov	BYTE PTR [eax+12], 1
; Line 399
	jmp	$LN35@UConverter@2
$LN33@UConverter@2:
; Line 400
	mov	DWORD PTR _len$[ebp], 2
; Line 401
	mov	DWORD PTR _escSeq$[ebp], OFFSET ??_C@_02JCBKMDIK@?$HO?$HL?$AA@
$LN26@UConverter@2:
; Line 402
	mov	eax, DWORD PTR _len$[ebp]
	mov	ecx, DWORD PTR _len$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _len$[ebp], ecx
	test	eax, eax
	jle	SHORT $LN58@UConverter@2
	mov	DWORD PTR tv201[ebp], 1
	jmp	SHORT $LN59@UConverter@2
$LN58@UConverter@2:
	mov	DWORD PTR tv201[ebp], 0
$LN59@UConverter@2:
	cmp	DWORD PTR tv201[ebp], 0
	je	$LN25@UConverter@2
	mov	eax, DWORD PTR _myTargetIndex$[ebp]
	cmp	eax, DWORD PTR _targetLength$[ebp]
	jge	SHORT $LN24@UConverter@2
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _myTargetIndex$[ebp]
	mov	eax, DWORD PTR _escSeq$[ebp]
	mov	al, BYTE PTR [eax]
	mov	BYTE PTR [ecx+edx], al
	mov	eax, DWORD PTR _args$[ebp]
	cmp	DWORD PTR [eax+24], 0
	je	SHORT $LN23@UConverter@2
	mov	eax, DWORD PTR _mySourceIndex$[ebp]
	sub	eax, 1
	mov	ecx, DWORD PTR _offsets$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
$LN23@UConverter@2:
	mov	eax, DWORD PTR _myTargetIndex$[ebp]
	add	eax, 1
	mov	DWORD PTR _myTargetIndex$[ebp], eax
	jmp	SHORT $LN22@UConverter@2
$LN24@UConverter@2:
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+4]
	movsx	edx, BYTE PTR [eax+63]
	mov	eax, DWORD PTR _escSeq$[ebp]
	mov	al, BYTE PTR [eax]
	mov	BYTE PTR [ecx+edx+76], al
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	al, BYTE PTR [edx+63]
	add	al, 1
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx+63], al
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
$LN22@UConverter@2:
	mov	eax, DWORD PTR _escSeq$[ebp]
	add	eax, 1
	mov	DWORD PTR _escSeq$[ebp], eax
	jmp	$LN26@UConverter@2
$LN25@UConverter@2:
; Line 403
	mov	eax, DWORD PTR _myConverterData$[ebp]
	mov	BYTE PTR [eax+12], 1
$LN35@UConverter@2:
; Line 408
	movsx	eax, BYTE PTR _isTargetUCharDBCS$[ebp]
	test	eax, eax
	je	$LN21@UConverter@2
; Line 409
	mov	eax, DWORD PTR _myTargetIndex$[ebp]
	cmp	eax, DWORD PTR _targetLength$[ebp]
	jge	$LN20@UConverter@2
; Line 410
	mov	eax, DWORD PTR _targetUniChar$[ebp]
	shr	eax, 8
	mov	ecx, DWORD PTR _myTarget$[ebp]
	add	ecx, DWORD PTR _myTargetIndex$[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _myTargetIndex$[ebp]
	add	edx, 1
	mov	DWORD PTR _myTargetIndex$[ebp], edx
; Line 411
	cmp	DWORD PTR _offsets$[ebp], 0
	je	SHORT $LN19@UConverter@2
; Line 412
	mov	eax, DWORD PTR _mySourceIndex$[ebp]
	sub	eax, 1
	mov	ecx, DWORD PTR _offsets$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
$LN19@UConverter@2:
; Line 414
	mov	eax, DWORD PTR _myTargetIndex$[ebp]
	cmp	eax, DWORD PTR _targetLength$[ebp]
	jge	SHORT $LN18@UConverter@2
; Line 415
	mov	eax, DWORD PTR _myTarget$[ebp]
	add	eax, DWORD PTR _myTargetIndex$[ebp]
	mov	cl, BYTE PTR _targetUniChar$[ebp]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _myTargetIndex$[ebp]
	add	edx, 1
	mov	DWORD PTR _myTargetIndex$[ebp], edx
; Line 416
	cmp	DWORD PTR _offsets$[ebp], 0
	je	SHORT $LN17@UConverter@2
; Line 417
	mov	eax, DWORD PTR _mySourceIndex$[ebp]
	sub	eax, 1
	mov	ecx, DWORD PTR _offsets$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
$LN17@UConverter@2:
; Line 419
	jmp	SHORT $LN16@UConverter@2
$LN18@UConverter@2:
; Line 420
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+4]
	movsx	edx, BYTE PTR [eax+63]
	mov	al, BYTE PTR _targetUniChar$[ebp]
	mov	BYTE PTR [ecx+edx+76], al
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	al, BYTE PTR [edx+63]
	add	al, 1
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx+63], al
; Line 421
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
$LN16@UConverter@2:
; Line 423
	jmp	SHORT $LN15@UConverter@2
$LN20@UConverter@2:
; Line 424
	mov	eax, DWORD PTR _targetUniChar$[ebp]
	shr	eax, 8
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	movsx	ecx, BYTE PTR [ecx+63]
	mov	BYTE PTR [edx+ecx+76], al
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	cl, BYTE PTR [eax+63]
	add	cl, 1
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax+63], cl
; Line 425
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+4]
	movsx	edx, BYTE PTR [eax+63]
	mov	al, BYTE PTR _targetUniChar$[ebp]
	mov	BYTE PTR [ecx+edx+76], al
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	al, BYTE PTR [edx+63]
	add	al, 1
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx+63], al
; Line 426
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
$LN15@UConverter@2:
; Line 429
	jmp	SHORT $LN14@UConverter@2
$LN21@UConverter@2:
; Line 430
	mov	eax, DWORD PTR _myTargetIndex$[ebp]
	cmp	eax, DWORD PTR _targetLength$[ebp]
	jge	SHORT $LN13@UConverter@2
; Line 431
	mov	eax, DWORD PTR _myTarget$[ebp]
	add	eax, DWORD PTR _myTargetIndex$[ebp]
	mov	cl, BYTE PTR _targetUniChar$[ebp]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _myTargetIndex$[ebp]
	add	edx, 1
	mov	DWORD PTR _myTargetIndex$[ebp], edx
; Line 432
	cmp	DWORD PTR _offsets$[ebp], 0
	je	SHORT $LN12@UConverter@2
; Line 433
	mov	eax, DWORD PTR _mySourceIndex$[ebp]
	sub	eax, 1
	mov	ecx, DWORD PTR _offsets$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
$LN12@UConverter@2:
; Line 436
	jmp	SHORT $LN14@UConverter@2
$LN13@UConverter@2:
; Line 437
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+4]
	movsx	edx, BYTE PTR [eax+63]
	mov	al, BYTE PTR _targetUniChar$[ebp]
	mov	BYTE PTR [ecx+edx+76], al
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	al, BYTE PTR [edx+63]
	add	al, 1
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx+63], al
; Line 438
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
$LN14@UConverter@2:
; Line 443
	jmp	$LN10@UConverter@2
$LN36@UConverter@2:
; Line 447
	mov	eax, DWORD PTR _mySourceChar$[ebp]
	and	eax, -2048				; fffff800H
	cmp	eax, 55296				; 0000d800H
	jne	$LN9@UConverter@2
; Line 448
	mov	eax, DWORD PTR _mySourceChar$[ebp]
	and	eax, 1024				; 00000400H
	jne	$LN8@UConverter@2
; Line 449
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _mySourceChar$[ebp]
	mov	DWORD PTR [ecx+56], edx
$getTrail$9169:
; Line 452
	mov	eax, DWORD PTR _mySourceIndex$[ebp]
	cmp	eax, DWORD PTR _mySourceLength$[ebp]
	jge	SHORT $LN7@UConverter@2
; Line 454
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _mySourceIndex$[ebp]
	mov	ax, WORD PTR [ecx+edx*2]
	mov	WORD PTR _trail$9245[ebp], ax
; Line 455
	movzx	eax, WORD PTR _trail$9245[ebp]
	and	eax, -1024				; fffffc00H
	cmp	eax, 56320				; 0000dc00H
	jne	SHORT $LN6@UConverter@2
; Line 456
	mov	eax, DWORD PTR _mySourceIndex$[ebp]
	add	eax, 1
	mov	DWORD PTR _mySourceIndex$[ebp], eax
; Line 457
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+56]
	shl	edx, 10					; 0000000aH
	movzx	eax, WORD PTR _trail$9245[ebp]
	lea	ecx, DWORD PTR [edx+eax-56613888]
	mov	DWORD PTR _mySourceChar$[ebp], ecx
; Line 458
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+56], 0
; Line 460
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 10			; 0000000aH
; Line 462
	jmp	SHORT $LN5@UConverter@2
$LN6@UConverter@2:
; Line 465
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 12			; 0000000cH
$LN5@UConverter@2:
; Line 467
	jmp	SHORT $LN4@UConverter@2
$LN7@UConverter@2:
; Line 469
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 0
$LN4@UConverter@2:
; Line 471
	jmp	SHORT $LN3@UConverter@2
$LN8@UConverter@2:
; Line 474
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 12			; 0000000cH
$LN3@UConverter@2:
; Line 476
	jmp	SHORT $LN2@UConverter@2
$LN9@UConverter@2:
; Line 478
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 10			; 0000000aH
$LN2@UConverter@2:
; Line 481
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _mySourceChar$[ebp]
	mov	DWORD PTR [ecx+56], edx
; Line 482
	jmp	SHORT $LN49@UConverter@2
$LN10@UConverter@2:
; Line 485
	jmp	SHORT $LN1@UConverter@2
$LN48@UConverter@2:
; Line 486
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
; Line 487
	jmp	SHORT $LN49@UConverter@2
$LN1@UConverter@2:
; Line 489
	mov	DWORD PTR _targetUniChar$[ebp], 65535	; 0000ffffH
; Line 490
	jmp	$LN50@UConverter@2
$LN49@UConverter@2:
; Line 492
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	add	ecx, DWORD PTR _myTargetIndex$[ebp]
	mov	edx, DWORD PTR _args$[ebp]
	mov	DWORD PTR [edx+16], ecx
; Line 493
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _mySourceIndex$[ebp]
	lea	eax, DWORD PTR [ecx+edx*2]
	mov	ecx, DWORD PTR _args$[ebp]
	mov	DWORD PTR [ecx+8], eax
; Line 494
	mov	eax, DWORD PTR _myConverterData$[ebp]
	mov	cl, BYTE PTR _isTargetUCharDBCS$[ebp]
	mov	BYTE PTR [eax+14], cl
; Line 495
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN63@UConverter@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 388				; 00000184H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN63@UConverter@2:
	DD	1
	DD	$LN62@UConverter@2
$LN62@UConverter@2:
	DD	-92					; ffffffa4H
	DD	4
	DD	$LN61@UConverter@2
$LN61@UConverter@2:
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	103					; 00000067H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	85					; 00000055H
	DB	110					; 0000006eH
	DB	105					; 00000069H
	DB	67					; 00000043H
	DB	104					; 00000068H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	0
_UConverter_fromUnicode_HZ_OFFSETS_LOGIC ENDP
_TEXT	ENDS
EXTRN	_ucnv_cbFromUWriteBytes_56:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __HZ_WriteSub
_TEXT	SEGMENT
_buffer$ = -44						; size = 4
_p$ = -32						; size = 4
_convData$ = -20					; size = 4
_cnv$ = -8						; size = 4
_args$ = 8						; size = 4
_offsetIndex$ = 12					; size = 4
_err$ = 16						; size = 4
__HZ_WriteSub PROC					; COMDAT
; Line 498
	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 499
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _cnv$[ebp], ecx
; Line 500
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _convData$[ebp], ecx
; Line 503
	lea	eax, DWORD PTR _buffer$[ebp]
	mov	DWORD PTR _p$[ebp], eax
; Line 505
	mov	eax, DWORD PTR _convData$[ebp]
	movsx	ecx, BYTE PTR [eax+14]
	test	ecx, ecx
	je	SHORT $LN1@HZ_WriteSu
; Line 506
	mov	eax, DWORD PTR _p$[ebp]
	mov	BYTE PTR [eax], 126			; 0000007eH
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 1
	mov	DWORD PTR _p$[ebp], ecx
; Line 507
	mov	eax, DWORD PTR _p$[ebp]
	mov	BYTE PTR [eax], 125			; 0000007dH
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 1
	mov	DWORD PTR _p$[ebp], ecx
; Line 508
	mov	eax, DWORD PTR _convData$[ebp]
	mov	BYTE PTR [eax+14], 0
$LN1@HZ_WriteSu:
; Line 510
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _p$[ebp]
	mov	al, BYTE PTR [ecx]
	mov	BYTE PTR [edx], al
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 1
	mov	DWORD PTR _p$[ebp], ecx
; Line 514
	mov	eax, DWORD PTR _err$[ebp]
	push	eax
	mov	ecx, DWORD PTR _offsetIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	lea	eax, DWORD PTR _buffer$[ebp]
	sub	edx, eax
	push	edx
	lea	ecx, DWORD PTR _buffer$[ebp]
	push	ecx
	mov	edx, DWORD PTR _args$[ebp]
	push	edx
	call	_ucnv_cbFromUWriteBytes_56
	add	esp, 20					; 00000014H
; Line 515
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@HZ_WriteSu
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN6@HZ_WriteSu:
	DD	1
	DD	$LN5@HZ_WriteSu
$LN5@HZ_WriteSu:
	DD	-44					; ffffffd4H
	DD	4
	DD	$LN4@HZ_WriteSu
$LN4@HZ_WriteSu:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
__HZ_WriteSub ENDP
_TEXT	ENDS
EXTRN	_ucnv_safeClone_56:PROC
EXTRN	_memcpy:PROC
EXTRN	_uprv_checkValidMemory:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __HZ_SafeClone
_TEXT	SEGMENT
_bufferSizeNeeded$ = -32				; size = 4
_size$ = -20						; size = 4
_localClone$ = -8					; size = 4
_cnv$ = 8						; size = 4
_stackBuffer$ = 12					; size = 4
_pBufferSize$ = 16					; size = 4
_status$ = 20						; size = 4
__HZ_SafeClone PROC					; COMDAT
; Line 541
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 543
	mov	DWORD PTR _bufferSizeNeeded$[ebp], 544	; 00000220H
; Line 545
	mov	eax, DWORD PTR _status$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN2@HZ_SafeClo
; Line 546
	xor	eax, eax
	jmp	$LN3@HZ_SafeClo
$LN2@HZ_SafeClo:
; Line 549
	mov	eax, DWORD PTR _pBufferSize$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN1@HZ_SafeClo
; Line 550
	mov	eax, DWORD PTR _pBufferSize$[ebp]
	mov	ecx, DWORD PTR _bufferSizeNeeded$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 551
	xor	eax, eax
	jmp	SHORT $LN3@HZ_SafeClo
$LN1@HZ_SafeClo:
; Line 554
	mov	eax, DWORD PTR _stackBuffer$[ebp]
	mov	DWORD PTR _localClone$[ebp], eax
; Line 557
	push	1
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_uprv_checkValidMemory
	add	esp, 8
	push	16					; 00000010H
	mov	edx, DWORD PTR _cnv$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _localClone$[ebp]
	add	ecx, 528				; 00000210H
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 558
	mov	eax, DWORD PTR _localClone$[ebp]
	add	eax, 528				; 00000210H
	mov	ecx, DWORD PTR _localClone$[ebp]
	mov	DWORD PTR [ecx+8], eax
; Line 559
	mov	eax, DWORD PTR _localClone$[ebp]
	mov	BYTE PTR [eax+34], 1
; Line 562
	mov	DWORD PTR _size$[ebp], 268		; 0000010cH
; Line 564
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	lea	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _localClone$[ebp]
	add	edx, 260				; 00000104H
	push	edx
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_ucnv_safeClone_56
	add	esp, 16					; 00000010H
	mov	ecx, DWORD PTR _localClone$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx], eax
; Line 566
	mov	eax, DWORD PTR _localClone$[ebp]
$LN3@HZ_SafeClo:
; Line 567
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@HZ_SafeClo
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN7@HZ_SafeClo:
	DD	1
	DD	$LN6@HZ_SafeClo
$LN6@HZ_SafeClo:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN5@HZ_SafeClo
$LN5@HZ_SafeClo:
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
__HZ_SafeClone ENDP
_TEXT	ENDS
EXTRN	_ucnv_MBCSGetFilteredUnicodeSetForUnicode_56:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __HZ_GetUnicodeSet
_TEXT	SEGMENT
_cnv$ = 8						; size = 4
_sa$ = 12						; size = 4
_which$ = 16						; size = 4
_pErrorCode$ = 20					; size = 4
__HZ_GetUnicodeSet PROC					; COMDAT
; Line 573
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 575
	mov	esi, esp
	push	127					; 0000007fH
	push	0
	mov	eax, DWORD PTR _sa$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _sa$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 581
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	push	5
	mov	ecx, DWORD PTR _which$[ebp]
	push	ecx
	mov	edx, DWORD PTR _sa$[ebp]
	push	edx
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	call	_ucnv_MBCSGetFilteredUnicodeSetForUnicode_56
	add	esp, 20					; 00000014H
; Line 582
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__HZ_GetUnicodeSet ENDP
_TEXT	ENDS
END
