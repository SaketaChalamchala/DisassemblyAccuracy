; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\mozilla\intl\icu\source\common\cstring.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_uprv_isASCIILetter_56
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File d:\mozilla\intl\icu\source\common\cstring.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT _uprv_isASCIILetter_56
_TEXT	SEGMENT
tv72 = -196						; size = 4
_c$ = 8							; size = 1
_uprv_isASCIILetter_56 PROC				; COMDAT
; Line 50
	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 56
	movsx	eax, BYTE PTR _c$[ebp]
	cmp	eax, 97					; 00000061H
	jl	SHORT $LN3@uprv_isASC
	movsx	ecx, BYTE PTR _c$[ebp]
	cmp	ecx, 122				; 0000007aH
	jle	SHORT $LN5@uprv_isASC
$LN3@uprv_isASC:
	movsx	edx, BYTE PTR _c$[ebp]
	cmp	edx, 65					; 00000041H
	jl	SHORT $LN4@uprv_isASC
	movsx	eax, BYTE PTR _c$[ebp]
	cmp	eax, 90					; 0000005aH
	jle	SHORT $LN5@uprv_isASC
$LN4@uprv_isASC:
	mov	DWORD PTR tv72[ebp], 0
	jmp	SHORT $LN6@uprv_isASC
$LN5@uprv_isASC:
	mov	DWORD PTR tv72[ebp], 1
$LN6@uprv_isASC:
	mov	al, BYTE PTR tv72[ebp]
; Line 58
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_uprv_isASCIILetter_56 ENDP
_TEXT	ENDS
PUBLIC	_uprv_toupper_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _uprv_toupper_56
_TEXT	SEGMENT
_c$ = 8							; size = 1
_uprv_toupper_56 PROC					; COMDAT
; Line 61
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 67
	movsx	eax, BYTE PTR _c$[ebp]
	cmp	eax, 97					; 00000061H
	jl	SHORT $LN1@uprv_toupp
	movsx	eax, BYTE PTR _c$[ebp]
	cmp	eax, 122				; 0000007aH
	jg	SHORT $LN1@uprv_toupp
; Line 68
	movsx	eax, BYTE PTR _c$[ebp]
	sub	eax, 32					; 00000020H
	mov	BYTE PTR _c$[ebp], al
$LN1@uprv_toupp:
; Line 71
	mov	al, BYTE PTR _c$[ebp]
; Line 72
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_uprv_toupper_56 ENDP
_TEXT	ENDS
PUBLIC	_uprv_asciitolower_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _uprv_asciitolower_56
_TEXT	SEGMENT
_c$ = 8							; size = 1
_uprv_asciitolower_56 PROC				; COMDAT
; Line 101
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 102
	movsx	eax, BYTE PTR _c$[ebp]
	cmp	eax, 65					; 00000041H
	jl	SHORT $LN1@uprv_ascii
	movsx	eax, BYTE PTR _c$[ebp]
	cmp	eax, 90					; 0000005aH
	jg	SHORT $LN1@uprv_ascii
; Line 103
	movsx	eax, BYTE PTR _c$[ebp]
	add	eax, 32					; 00000020H
	mov	BYTE PTR _c$[ebp], al
$LN1@uprv_ascii:
; Line 105
	mov	al, BYTE PTR _c$[ebp]
; Line 106
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_uprv_asciitolower_56 ENDP
_TEXT	ENDS
PUBLIC	_uprv_ebcdictolower_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _uprv_ebcdictolower_56
_TEXT	SEGMENT
_c$ = 8							; size = 1
_uprv_ebcdictolower_56 PROC				; COMDAT
; Line 109
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 113
	movzx	eax, BYTE PTR _c$[ebp]
	cmp	eax, 193				; 000000c1H
	jl	SHORT $LN2@uprv_ebcdi
	movzx	eax, BYTE PTR _c$[ebp]
	cmp	eax, 201				; 000000c9H
	jle	SHORT $LN3@uprv_ebcdi
$LN2@uprv_ebcdi:
	movzx	eax, BYTE PTR _c$[ebp]
	cmp	eax, 209				; 000000d1H
	jl	SHORT $LN1@uprv_ebcdi
	movzx	eax, BYTE PTR _c$[ebp]
	cmp	eax, 217				; 000000d9H
	jle	SHORT $LN3@uprv_ebcdi
$LN1@uprv_ebcdi:
	movzx	eax, BYTE PTR _c$[ebp]
	cmp	eax, 226				; 000000e2H
	jl	SHORT $LN4@uprv_ebcdi
	movzx	eax, BYTE PTR _c$[ebp]
	cmp	eax, 233				; 000000e9H
	jg	SHORT $LN4@uprv_ebcdi
$LN3@uprv_ebcdi:
; Line 114
	movsx	eax, BYTE PTR _c$[ebp]
	sub	eax, 64					; 00000040H
	mov	BYTE PTR _c$[ebp], al
$LN4@uprv_ebcdi:
; Line 116
	mov	al, BYTE PTR _c$[ebp]
; Line 117
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_uprv_ebcdictolower_56 ENDP
_TEXT	ENDS
PUBLIC	_T_CString_toLowerCase_56
EXTRN	__RTC_CheckEsp:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _T_CString_toLowerCase_56
_TEXT	SEGMENT
tv68 = -205						; size = 1
_origPtr$ = -8						; size = 4
_str$ = 8						; size = 4
_T_CString_toLowerCase_56 PROC				; COMDAT
; Line 122
	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 123
	mov	eax, DWORD PTR _str$[ebp]
	mov	DWORD PTR _origPtr$[ebp], eax
; Line 125
	cmp	DWORD PTR _str$[ebp], 0
	je	SHORT $LN4@T_CString_
$LN3@T_CString_:
; Line 127
	mov	eax, DWORD PTR _str$[ebp]
	movzx	ecx, BYTE PTR [eax]
	push	ecx
	call	_uprv_asciitolower_56
	add	esp, 4
	mov	edx, DWORD PTR _str$[ebp]
	mov	BYTE PTR [edx], al
; Line 128
	mov	eax, DWORD PTR _str$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR tv68[ebp], cl
	mov	edx, DWORD PTR _str$[ebp]
	add	edx, 1
	mov	DWORD PTR _str$[ebp], edx
	movsx	eax, BYTE PTR tv68[ebp]
	test	eax, eax
	jne	SHORT $LN3@T_CString_
$LN4@T_CString_:
; Line 131
	mov	eax, DWORD PTR _origPtr$[ebp]
; Line 132
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_T_CString_toLowerCase_56 ENDP
_TEXT	ENDS
PUBLIC	_T_CString_toUpperCase_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _T_CString_toUpperCase_56
_TEXT	SEGMENT
tv68 = -205						; size = 1
_origPtr$ = -8						; size = 4
_str$ = 8						; size = 4
_T_CString_toUpperCase_56 PROC				; COMDAT
; Line 136
	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 137
	mov	eax, DWORD PTR _str$[ebp]
	mov	DWORD PTR _origPtr$[ebp], eax
; Line 139
	cmp	DWORD PTR _str$[ebp], 0
	je	SHORT $LN4@T_CString_@2
$LN3@T_CString_@2:
; Line 141
	mov	eax, DWORD PTR _str$[ebp]
	movzx	ecx, BYTE PTR [eax]
	push	ecx
	call	_uprv_toupper_56
	add	esp, 4
	mov	edx, DWORD PTR _str$[ebp]
	mov	BYTE PTR [edx], al
; Line 142
	mov	eax, DWORD PTR _str$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR tv68[ebp], cl
	mov	edx, DWORD PTR _str$[ebp]
	add	edx, 1
	mov	DWORD PTR _str$[ebp], edx
	movsx	eax, BYTE PTR tv68[ebp]
	test	eax, eax
	jne	SHORT $LN3@T_CString_@2
$LN4@T_CString_@2:
; Line 145
	mov	eax, DWORD PTR _origPtr$[ebp]
; Line 146
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_T_CString_toUpperCase_56 ENDP
_TEXT	ENDS
PUBLIC	??_C@_1CM@NPJAKICH@?$AAr?$AAa?$AAd?$AAi?$AAx?$AA?$DO?$AA?$DN?$AA2?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAr?$AAa?$AAd?$AAi?$AAx?$AA?$DM?$AA?$DN?$AA1?$AA6?$AA?$AA@ ; `string'
PUBLIC	??_C@_1FI@NNKNIAPM@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@ ; `string'
PUBLIC	?__LINE__Var@?1??T_CString_integerToString_56@@9@9 ; `T_CString_integerToString_56'::`2'::__LINE__Var
PUBLIC	__$ArrayPad$
PUBLIC	_T_CString_integerToString_56
EXTRN	_strcpy:PROC
EXTRN	__imp___wassert:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
;	COMDAT ??_C@_1CM@NPJAKICH@?$AAr?$AAa?$AAd?$AAi?$AAx?$AA?$DO?$AA?$DN?$AA2?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAr?$AAa?$AAd?$AAi?$AAx?$AA?$DM?$AA?$DN?$AA1?$AA6?$AA?$AA@
CONST	SEGMENT
??_C@_1CM@NPJAKICH@?$AAr?$AAa?$AAd?$AAi?$AAx?$AA?$DO?$AA?$DN?$AA2?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAr?$AAa?$AAd?$AAi?$AAx?$AA?$DM?$AA?$DN?$AA1?$AA6?$AA?$AA@ DB 'r'
	DB	00H, 'a', 00H, 'd', 00H, 'i', 00H, 'x', 00H, '>', 00H, '=', 00H
	DB	'2', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, 'r', 00H, 'a'
	DB	00H, 'd', 00H, 'i', 00H, 'x', 00H, '<', 00H, '=', 00H, '1', 00H
	DB	'6', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1FI@NNKNIAPM@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@
CONST	SEGMENT
??_C@_1FI@NNKNIAPM@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@ DB 'd'
	DB	00H, ':', 00H, '\', 00H, 'm', 00H, 'o', 00H, 'z', 00H, 'i', 00H
	DB	'l', 00H, 'l', 00H, 'a', 00H, '\', 00H, 'i', 00H, 'n', 00H, 't'
	DB	00H, 'l', 00H, '\', 00H, 'i', 00H, 'c', 00H, 'u', 00H, '\', 00H
	DB	's', 00H, 'o', 00H, 'u', 00H, 'r', 00H, 'c', 00H, 'e', 00H, '\'
	DB	00H, 'c', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'o', 00H, 'n', 00H
	DB	'\', 00H, 'c', 00H, 's', 00H, 't', 00H, 'r', 00H, 'i', 00H, 'n'
	DB	00H, 'g', 00H, '.', 00H, 'c', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??T_CString_integerToString_56@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??T_CString_integerToString_56@@9@9 DD 09cH ; `T_CString_integerToString_56'::`2'::__LINE__Var
; Function compile flags: /Odtp /RTCsu /ZI
_DATA	ENDS
;	COMDAT _T_CString_integerToString_56
_TEXT	SEGMENT
tv88 = -288						; size = 4
_uval$ = -88						; size = 4
_length$ = -76						; size = 4
_digit$ = -61						; size = 1
_tbx$ = -52						; size = 4
_tbuf$ = -40						; size = 30
__$ArrayPad$ = -4					; size = 4
_buffer$ = 8						; size = 4
_v$ = 12						; size = 4
_radix$ = 16						; size = 4
_T_CString_integerToString_56 PROC			; COMDAT
; Line 156
	push	ebp
	mov	ebp, esp
	sub	esp, 288				; 00000120H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-288]
	mov	ecx, 72					; 00000048H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 158
	mov	DWORD PTR _tbx$[ebp], 30		; 0000001eH
; Line 160
	mov	DWORD PTR _length$[ebp], 0
; Line 163
	cmp	DWORD PTR _radix$[ebp], 2
	jl	SHORT $LN7@T_CString_@3
	cmp	DWORD PTR _radix$[ebp], 16		; 00000010H
	jle	SHORT $LN8@T_CString_@3
$LN7@T_CString_@3:
	mov	eax, DWORD PTR ?__LINE__Var@?1??T_CString_integerToString_56@@9@9
	add	eax, 7
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1FI@NNKNIAPM@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@
	push	OFFSET ??_C@_1CM@NPJAKICH@?$AAr?$AAa?$AAd?$AAi?$AAx?$AA?$DO?$AA?$DN?$AA2?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAr?$AAa?$AAd?$AAi?$AAx?$AA?$DM?$AA?$DN?$AA1?$AA6?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN8@T_CString_@3:
; Line 164
	mov	eax, DWORD PTR _v$[ebp]
	mov	DWORD PTR _uval$[ebp], eax
; Line 165
	cmp	DWORD PTR _v$[ebp], 0
	jge	SHORT $LN4@T_CString_@3
	cmp	DWORD PTR _radix$[ebp], 10		; 0000000aH
	jne	SHORT $LN4@T_CString_@3
; Line 167
	mov	eax, DWORD PTR _v$[ebp]
	neg	eax
	mov	DWORD PTR _uval$[ebp], eax
; Line 168
	mov	eax, DWORD PTR _buffer$[ebp]
	add	eax, DWORD PTR _length$[ebp]
	mov	BYTE PTR [eax], 45			; 0000002dH
	mov	ecx, DWORD PTR _length$[ebp]
	add	ecx, 1
	mov	DWORD PTR _length$[ebp], ecx
$LN4@T_CString_@3:
; Line 171
	mov	DWORD PTR _tbx$[ebp], 29		; 0000001dH
; Line 172
	mov	eax, DWORD PTR _tbx$[ebp]
	mov	BYTE PTR _tbuf$[ebp+eax], 0
$LN3@T_CString_@3:
; Line 174
	mov	eax, DWORD PTR _uval$[ebp]
	xor	edx, edx
	div	DWORD PTR _radix$[ebp]
	mov	BYTE PTR _digit$[ebp], dl
; Line 175
	movzx	eax, BYTE PTR _digit$[ebp]
	cmp	eax, 9
	jg	SHORT $LN9@T_CString_@3
	movzx	ecx, BYTE PTR _digit$[ebp]
	add	ecx, 48					; 00000030H
	mov	DWORD PTR tv88[ebp], ecx
	jmp	SHORT $LN10@T_CString_@3
$LN9@T_CString_@3:
	movzx	edx, BYTE PTR _digit$[ebp]
	add	edx, 55					; 00000037H
	mov	DWORD PTR tv88[ebp], edx
$LN10@T_CString_@3:
	mov	eax, DWORD PTR _tbx$[ebp]
	sub	eax, 1
	mov	DWORD PTR _tbx$[ebp], eax
	mov	ecx, DWORD PTR _tbx$[ebp]
	mov	dl, BYTE PTR tv88[ebp]
	mov	BYTE PTR _tbuf$[ebp+ecx], dl
; Line 176
	mov	eax, DWORD PTR _uval$[ebp]
	xor	edx, edx
	div	DWORD PTR _radix$[ebp]
	mov	DWORD PTR _uval$[ebp], eax
; Line 177
	cmp	DWORD PTR _uval$[ebp], 0
	jne	SHORT $LN3@T_CString_@3
; Line 180
	mov	eax, DWORD PTR _tbx$[ebp]
	lea	ecx, DWORD PTR _tbuf$[ebp+eax]
	push	ecx
	mov	edx, DWORD PTR _buffer$[ebp]
	add	edx, DWORD PTR _length$[ebp]
	push	edx
	call	_strcpy
	add	esp, 8
; Line 181
	mov	eax, 30					; 0000001eH
	sub	eax, DWORD PTR _tbx$[ebp]
	mov	ecx, DWORD PTR _length$[ebp]
	lea	edx, DWORD PTR [ecx+eax-1]
	mov	DWORD PTR _length$[ebp], edx
; Line 182
	mov	eax, DWORD PTR _length$[ebp]
; Line 183
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@T_CString_@3
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 288				; 00000120H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN13@T_CString_@3:
	DD	1
	DD	$LN12@T_CString_@3
$LN12@T_CString_@3:
	DD	-40					; ffffffd8H
	DD	30					; 0000001eH
	DD	$LN11@T_CString_@3
$LN11@T_CString_@3:
	DB	116					; 00000074H
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
_T_CString_integerToString_56 ENDP
_TEXT	ENDS
PUBLIC	?__LINE__Var@?1??T_CString_int64ToString_56@@9@9 ; `T_CString_int64ToString_56'::`2'::__LINE__Var
PUBLIC	__$ArrayPad$
PUBLIC	_T_CString_int64ToString_56
EXTRN	__aulldiv:PROC
EXTRN	__aullrem:PROC
;	COMDAT ?__LINE__Var@?1??T_CString_int64ToString_56@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??T_CString_int64ToString_56@@9@9 DD 0c2H ; `T_CString_int64ToString_56'::`2'::__LINE__Var
; Function compile flags: /Odtp /RTCsu /ZI
_DATA	ENDS
;	COMDAT _T_CString_int64ToString_56
_TEXT	SEGMENT
tv89 = -292						; size = 4
_uval$ = -92						; size = 8
_length$ = -76						; size = 4
_digit$ = -61						; size = 1
_tbx$ = -52						; size = 4
_tbuf$ = -40						; size = 30
__$ArrayPad$ = -4					; size = 4
_buffer$ = 8						; size = 4
_v$ = 12						; size = 8
_radix$ = 20						; size = 4
_T_CString_int64ToString_56 PROC			; COMDAT
; Line 194
	push	ebp
	mov	ebp, esp
	sub	esp, 292				; 00000124H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-292]
	mov	ecx, 73					; 00000049H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 196
	mov	DWORD PTR _tbx$[ebp], 30		; 0000001eH
; Line 198
	mov	DWORD PTR _length$[ebp], 0
; Line 201
	cmp	DWORD PTR _radix$[ebp], 2
	jb	SHORT $LN7@T_CString_@4
	cmp	DWORD PTR _radix$[ebp], 16		; 00000010H
	jbe	SHORT $LN8@T_CString_@4
$LN7@T_CString_@4:
	mov	eax, DWORD PTR ?__LINE__Var@?1??T_CString_int64ToString_56@@9@9
	add	eax, 7
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1FI@NNKNIAPM@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@
	push	OFFSET ??_C@_1CM@NPJAKICH@?$AAr?$AAa?$AAd?$AAi?$AAx?$AA?$DO?$AA?$DN?$AA2?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAr?$AAa?$AAd?$AAi?$AAx?$AA?$DM?$AA?$DN?$AA1?$AA6?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN8@T_CString_@4:
; Line 202
	mov	eax, DWORD PTR _v$[ebp]
	mov	DWORD PTR _uval$[ebp], eax
	mov	ecx, DWORD PTR _v$[ebp+4]
	mov	DWORD PTR _uval$[ebp+4], ecx
; Line 203
	cmp	DWORD PTR _v$[ebp+4], 0
	jg	SHORT $LN4@T_CString_@4
	jl	SHORT $LN11@T_CString_@4
	cmp	DWORD PTR _v$[ebp], 0
	jae	SHORT $LN4@T_CString_@4
$LN11@T_CString_@4:
	cmp	DWORD PTR _radix$[ebp], 10		; 0000000aH
	jne	SHORT $LN4@T_CString_@4
; Line 205
	mov	eax, DWORD PTR _v$[ebp]
	neg	eax
	mov	ecx, DWORD PTR _v$[ebp+4]
	adc	ecx, 0
	neg	ecx
	mov	DWORD PTR _uval$[ebp], eax
	mov	DWORD PTR _uval$[ebp+4], ecx
; Line 206
	mov	eax, DWORD PTR _buffer$[ebp]
	add	eax, DWORD PTR _length$[ebp]
	mov	BYTE PTR [eax], 45			; 0000002dH
	mov	ecx, DWORD PTR _length$[ebp]
	add	ecx, 1
	mov	DWORD PTR _length$[ebp], ecx
$LN4@T_CString_@4:
; Line 209
	mov	DWORD PTR _tbx$[ebp], 29		; 0000001dH
; Line 210
	mov	eax, DWORD PTR _tbx$[ebp]
	mov	BYTE PTR _tbuf$[ebp+eax], 0
$LN3@T_CString_@4:
; Line 212
	mov	eax, DWORD PTR _radix$[ebp]
	xor	ecx, ecx
	push	ecx
	push	eax
	mov	edx, DWORD PTR _uval$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _uval$[ebp]
	push	eax
	call	__aullrem
	mov	BYTE PTR _digit$[ebp], al
; Line 213
	movzx	eax, BYTE PTR _digit$[ebp]
	cmp	eax, 9
	jg	SHORT $LN9@T_CString_@4
	movzx	ecx, BYTE PTR _digit$[ebp]
	add	ecx, 48					; 00000030H
	mov	DWORD PTR tv89[ebp], ecx
	jmp	SHORT $LN10@T_CString_@4
$LN9@T_CString_@4:
	movzx	edx, BYTE PTR _digit$[ebp]
	add	edx, 55					; 00000037H
	mov	DWORD PTR tv89[ebp], edx
$LN10@T_CString_@4:
	mov	eax, DWORD PTR _tbx$[ebp]
	sub	eax, 1
	mov	DWORD PTR _tbx$[ebp], eax
	mov	ecx, DWORD PTR _tbx$[ebp]
	mov	dl, BYTE PTR tv89[ebp]
	mov	BYTE PTR _tbuf$[ebp+ecx], dl
; Line 214
	mov	eax, DWORD PTR _radix$[ebp]
	xor	ecx, ecx
	push	ecx
	push	eax
	mov	edx, DWORD PTR _uval$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _uval$[ebp]
	push	eax
	call	__aulldiv
	mov	DWORD PTR _uval$[ebp], eax
	mov	DWORD PTR _uval$[ebp+4], edx
; Line 215
	mov	eax, DWORD PTR _uval$[ebp]
	or	eax, DWORD PTR _uval$[ebp+4]
	jne	SHORT $LN3@T_CString_@4
; Line 218
	mov	eax, DWORD PTR _tbx$[ebp]
	lea	ecx, DWORD PTR _tbuf$[ebp+eax]
	push	ecx
	mov	edx, DWORD PTR _buffer$[ebp]
	add	edx, DWORD PTR _length$[ebp]
	push	edx
	call	_strcpy
	add	esp, 8
; Line 219
	mov	eax, 30					; 0000001eH
	sub	eax, DWORD PTR _tbx$[ebp]
	mov	ecx, DWORD PTR _length$[ebp]
	lea	edx, DWORD PTR [ecx+eax-1]
	mov	DWORD PTR _length$[ebp], edx
; Line 220
	mov	eax, DWORD PTR _length$[ebp]
; Line 221
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@T_CString_@4
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 292				; 00000124H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN14@T_CString_@4:
	DD	1
	DD	$LN13@T_CString_@4
$LN13@T_CString_@4:
	DD	-40					; ffffffd8H
	DD	30					; 0000001eH
	DD	$LN12@T_CString_@4
$LN12@T_CString_@4:
	DB	116					; 00000074H
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
_T_CString_int64ToString_56 ENDP
_TEXT	ENDS
PUBLIC	_T_CString_stringToInteger_56
EXTRN	__imp__strtoul:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _T_CString_stringToInteger_56
_TEXT	SEGMENT
_end$ = -8						; size = 4
_integerString$ = 8					; size = 4
_radix$ = 12						; size = 4
_T_CString_stringToInteger_56 PROC			; COMDAT
; Line 226
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 228
	mov	esi, esp
	mov	eax, DWORD PTR _radix$[ebp]
	push	eax
	lea	ecx, DWORD PTR _end$[ebp]
	push	ecx
	mov	edx, DWORD PTR _integerString$[ebp]
	push	edx
	call	DWORD PTR __imp__strtoul
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 230
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@T_CString_@5
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN5@T_CString_@5:
	DD	1
	DD	$LN4@T_CString_@5
$LN4@T_CString_@5:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN3@T_CString_@5
$LN3@T_CString_@5:
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	0
_T_CString_stringToInteger_56 ENDP
_TEXT	ENDS
PUBLIC	_uprv_stricmp_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _uprv_stricmp_56
_TEXT	SEGMENT
_c2$9000 = -29						; size = 1
_c1$8999 = -17						; size = 1
_rc$8998 = -8						; size = 4
_str1$ = 8						; size = 4
_str2$ = 12						; size = 4
_uprv_stricmp_56 PROC					; COMDAT
; Line 233
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 234
	cmp	DWORD PTR _str1$[ebp], 0
	jne	SHORT $LN15@uprv_stric
; Line 235
	cmp	DWORD PTR _str2$[ebp], 0
	jne	SHORT $LN14@uprv_stric
; Line 236
	xor	eax, eax
	jmp	$LN16@uprv_stric
; Line 237
	jmp	SHORT $LN13@uprv_stric
$LN14@uprv_stric:
; Line 238
	or	eax, -1
	jmp	$LN16@uprv_stric
$LN13@uprv_stric:
; Line 239
	jmp	$LN16@uprv_stric
$LN15@uprv_stric:
; Line 240
	cmp	DWORD PTR _str2$[ebp], 0
	jne	SHORT $LN9@uprv_stric
; Line 241
	mov	eax, 1
	jmp	$LN16@uprv_stric
; Line 242
	jmp	SHORT $LN16@uprv_stric
$LN9@uprv_stric:
; Line 248
	mov	eax, DWORD PTR _str1$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _c1$8999[ebp], cl
; Line 249
	mov	eax, DWORD PTR _str2$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _c2$9000[ebp], cl
; Line 250
	movzx	eax, BYTE PTR _c1$8999[ebp]
	test	eax, eax
	jne	SHORT $LN7@uprv_stric
; Line 251
	movzx	eax, BYTE PTR _c2$9000[ebp]
	test	eax, eax
	jne	SHORT $LN6@uprv_stric
; Line 252
	xor	eax, eax
	jmp	SHORT $LN16@uprv_stric
; Line 253
	jmp	SHORT $LN5@uprv_stric
$LN6@uprv_stric:
; Line 254
	or	eax, -1
	jmp	SHORT $LN16@uprv_stric
$LN5@uprv_stric:
; Line 255
	jmp	SHORT $LN4@uprv_stric
$LN7@uprv_stric:
; Line 256
	movzx	eax, BYTE PTR _c2$9000[ebp]
	test	eax, eax
	jne	SHORT $LN3@uprv_stric
; Line 257
	mov	eax, 1
	jmp	SHORT $LN16@uprv_stric
; Line 258
	jmp	SHORT $LN4@uprv_stric
$LN3@uprv_stric:
; Line 260
	movzx	eax, BYTE PTR _c1$8999[ebp]
	push	eax
	call	_uprv_asciitolower_56
	add	esp, 4
	movzx	esi, al
	movzx	ecx, BYTE PTR _c2$9000[ebp]
	push	ecx
	call	_uprv_asciitolower_56
	add	esp, 4
	movzx	edx, al
	sub	esi, edx
	mov	DWORD PTR _rc$8998[ebp], esi
; Line 261
	je	SHORT $LN4@uprv_stric
; Line 262
	mov	eax, DWORD PTR _rc$8998[ebp]
	jmp	SHORT $LN16@uprv_stric
$LN4@uprv_stric:
; Line 265
	mov	eax, DWORD PTR _str1$[ebp]
	add	eax, 1
	mov	DWORD PTR _str1$[ebp], eax
; Line 266
	mov	eax, DWORD PTR _str2$[ebp]
	add	eax, 1
	mov	DWORD PTR _str2$[ebp], eax
; Line 267
	jmp	SHORT $LN9@uprv_stric
$LN16@uprv_stric:
; Line 269
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_uprv_stricmp_56 ENDP
_TEXT	ENDS
PUBLIC	_uprv_strnicmp_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _uprv_strnicmp_56
_TEXT	SEGMENT
tv68 = -232						; size = 4
_c2$9035 = -29						; size = 1
_c1$9034 = -17						; size = 1
_rc$9033 = -8						; size = 4
_str1$ = 8						; size = 4
_str2$ = 12						; size = 4
_n$ = 16						; size = 4
_uprv_strnicmp_56 PROC					; COMDAT
; Line 272
	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 273
	cmp	DWORD PTR _str1$[ebp], 0
	jne	SHORT $LN15@uprv_strni
; Line 274
	cmp	DWORD PTR _str2$[ebp], 0
	jne	SHORT $LN14@uprv_strni
; Line 275
	xor	eax, eax
	jmp	$LN16@uprv_strni
; Line 276
	jmp	SHORT $LN13@uprv_strni
$LN14@uprv_strni:
; Line 277
	or	eax, -1
	jmp	$LN16@uprv_strni
$LN13@uprv_strni:
; Line 278
	jmp	$LN12@uprv_strni
$LN15@uprv_strni:
; Line 279
	cmp	DWORD PTR _str2$[ebp], 0
	jne	SHORT $LN9@uprv_strni
; Line 280
	mov	eax, 1
	jmp	$LN16@uprv_strni
; Line 281
	jmp	$LN12@uprv_strni
$LN9@uprv_strni:
; Line 286
	mov	eax, DWORD PTR _n$[ebp]
	mov	DWORD PTR tv68[ebp], eax
	mov	ecx, DWORD PTR _n$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _n$[ebp], ecx
	cmp	DWORD PTR tv68[ebp], 0
	je	$LN12@uprv_strni
; Line 287
	mov	eax, DWORD PTR _str1$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _c1$9034[ebp], cl
; Line 288
	mov	eax, DWORD PTR _str2$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _c2$9035[ebp], cl
; Line 289
	movzx	eax, BYTE PTR _c1$9034[ebp]
	test	eax, eax
	jne	SHORT $LN7@uprv_strni
; Line 290
	movzx	eax, BYTE PTR _c2$9035[ebp]
	test	eax, eax
	jne	SHORT $LN6@uprv_strni
; Line 291
	xor	eax, eax
	jmp	SHORT $LN16@uprv_strni
; Line 292
	jmp	SHORT $LN5@uprv_strni
$LN6@uprv_strni:
; Line 293
	or	eax, -1
	jmp	SHORT $LN16@uprv_strni
$LN5@uprv_strni:
; Line 294
	jmp	SHORT $LN4@uprv_strni
$LN7@uprv_strni:
; Line 295
	movzx	eax, BYTE PTR _c2$9035[ebp]
	test	eax, eax
	jne	SHORT $LN3@uprv_strni
; Line 296
	mov	eax, 1
	jmp	SHORT $LN16@uprv_strni
; Line 297
	jmp	SHORT $LN4@uprv_strni
$LN3@uprv_strni:
; Line 299
	movzx	eax, BYTE PTR _c1$9034[ebp]
	push	eax
	call	_uprv_asciitolower_56
	add	esp, 4
	movzx	esi, al
	movzx	ecx, BYTE PTR _c2$9035[ebp]
	push	ecx
	call	_uprv_asciitolower_56
	add	esp, 4
	movzx	edx, al
	sub	esi, edx
	mov	DWORD PTR _rc$9033[ebp], esi
; Line 300
	je	SHORT $LN4@uprv_strni
; Line 301
	mov	eax, DWORD PTR _rc$9033[ebp]
	jmp	SHORT $LN16@uprv_strni
$LN4@uprv_strni:
; Line 304
	mov	eax, DWORD PTR _str1$[ebp]
	add	eax, 1
	mov	DWORD PTR _str1$[ebp], eax
; Line 305
	mov	eax, DWORD PTR _str2$[ebp]
	add	eax, 1
	mov	DWORD PTR _str2$[ebp], eax
; Line 306
	jmp	$LN9@uprv_strni
$LN12@uprv_strni:
; Line 309
	xor	eax, eax
$LN16@uprv_strni:
; Line 310
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_uprv_strnicmp_56 ENDP
_TEXT	ENDS
PUBLIC	_uprv_strdup_56
EXTRN	_memcpy:PROC
EXTRN	_uprv_checkValidMemory:PROC
EXTRN	_uprv_malloc_56:PROC
EXTRN	_strlen:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _uprv_strdup_56
_TEXT	SEGMENT
_dup$ = -20						; size = 4
_len$ = -8						; size = 4
_src$ = 8						; size = 4
_uprv_strdup_56 PROC					; COMDAT
; Line 313
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 314
	mov	eax, DWORD PTR _src$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	add	eax, 1
	mov	DWORD PTR _len$[ebp], eax
; Line 315
	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	call	_uprv_malloc_56
	add	esp, 4
	mov	DWORD PTR _dup$[ebp], eax
; Line 317
	cmp	DWORD PTR _dup$[ebp], 0
	je	SHORT $LN1@uprv_strdu
; Line 318
	push	1
	mov	eax, DWORD PTR _src$[ebp]
	push	eax
	call	_uprv_checkValidMemory
	add	esp, 8
	mov	ecx, DWORD PTR _len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _src$[ebp]
	push	edx
	mov	eax, DWORD PTR _dup$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@uprv_strdu:
; Line 321
	mov	eax, DWORD PTR _dup$[ebp]
; Line 322
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_uprv_strdup_56 ENDP
_TEXT	ENDS
PUBLIC	_uprv_strndup_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _uprv_strndup_56
_TEXT	SEGMENT
_dup$ = -8						; size = 4
_src$ = 8						; size = 4
_n$ = 12						; size = 4
_uprv_strndup_56 PROC					; COMDAT
; Line 325
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 328
	cmp	DWORD PTR _n$[ebp], 0
	jge	SHORT $LN3@uprv_strnd
; Line 329
	mov	eax, DWORD PTR _src$[ebp]
	push	eax
	call	_uprv_strdup_56
	add	esp, 4
	mov	DWORD PTR _dup$[ebp], eax
; Line 330
	jmp	SHORT $LN2@uprv_strnd
$LN3@uprv_strnd:
; Line 331
	mov	eax, DWORD PTR _n$[ebp]
	add	eax, 1
	push	eax
	call	_uprv_malloc_56
	add	esp, 4
	mov	DWORD PTR _dup$[ebp], eax
; Line 332
	cmp	DWORD PTR _dup$[ebp], 0
	je	SHORT $LN2@uprv_strnd
; Line 333
	push	1
	mov	eax, DWORD PTR _src$[ebp]
	push	eax
	call	_uprv_checkValidMemory
	add	esp, 8
	mov	ecx, DWORD PTR _n$[ebp]
	push	ecx
	mov	edx, DWORD PTR _src$[ebp]
	push	edx
	mov	eax, DWORD PTR _dup$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 334
	mov	eax, DWORD PTR _dup$[ebp]
	add	eax, DWORD PTR _n$[ebp]
	mov	BYTE PTR [eax], 0
$LN2@uprv_strnd:
; Line 338
	mov	eax, DWORD PTR _dup$[ebp]
; Line 339
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_uprv_strndup_56 ENDP
_TEXT	ENDS
END
