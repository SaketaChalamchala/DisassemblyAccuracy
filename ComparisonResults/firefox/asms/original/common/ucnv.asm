; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\mozilla\intl\icu\source\common\ucnv.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	??_C@_0BD@PJLBLOOH@ibm?91088_P100?91995?$AA@	; `string'
PUBLIC	??_C@_0BN@PBNBDHCD@ISO_2022?0locale?$DNko?0version?$DN0?$AA@ ; `string'
PUBLIC	??_C@_0BD@PADIFBJO@ibm?91363_P110?91997?$AA@	; `string'
PUBLIC	??_C@_0BC@CKIHHKII@ibm?9949_P110?91999?$AA@	; `string'
PUBLIC	??_C@_0BC@NEDHDEPE@ibm?9944_P100?91995?$AA@	; `string'
PUBLIC	??_C@_0BD@POKCDNIN@ibm?91041_P100?91995?$AA@	; `string'
PUBLIC	??_C@_0BE@MPAMLOAO@ibm?933722_P120?91999?$AA@	; `string'
PUBLIC	??_C@_0BC@DIAMKKGL@ibm?9946_P100?91995?$AA@	; `string'
PUBLIC	??_C@_0BC@ICJFJFJE@ibm?9943_P130?91999?$AA@	; `string'
PUBLIC	??_C@_0BC@NFJKNJGF@ibm?9942_P120?91999?$AA@	; `string'
PUBLIC	??_C@_0BC@HJIKGHAM@ibm?9897_P100?91995?$AA@	; `string'
CONST	SEGMENT
_ambiguousConverters DD FLAT:??_C@_0BC@HJIKGHAM@ibm?9897_P100?91995?$AA@
	DW	0a5H
	ORG $+2
	DD	FLAT:??_C@_0BC@NFJKNJGF@ibm?9942_P120?91999?$AA@
	DW	0a5H
	ORG $+2
	DD	FLAT:??_C@_0BC@ICJFJFJE@ibm?9943_P130?91999?$AA@
	DW	0a5H
	ORG $+2
	DD	FLAT:??_C@_0BC@DIAMKKGL@ibm?9946_P100?91995?$AA@
	DW	0a5H
	ORG $+2
	DD	FLAT:??_C@_0BE@MPAMLOAO@ibm?933722_P120?91999?$AA@
	DW	0a5H
	ORG $+2
	DD	FLAT:??_C@_0BD@POKCDNIN@ibm?91041_P100?91995?$AA@
	DW	0a5H
	ORG $+2
	DD	FLAT:??_C@_0BC@NEDHDEPE@ibm?9944_P100?91995?$AA@
	DW	020a9H
	ORG $+2
	DD	FLAT:??_C@_0BC@CKIHHKII@ibm?9949_P110?91999?$AA@
	DW	020a9H
	ORG $+2
	DD	FLAT:??_C@_0BD@PADIFBJO@ibm?91363_P110?91997?$AA@
	DW	020a9H
	ORG $+2
	DD	FLAT:??_C@_0BN@PBNBDHCD@ISO_2022?0locale?$DNko?0version?$DN0?$AA@
	DW	020a9H
	ORG $+2
	DD	FLAT:??_C@_0BD@PJLBLOOH@ibm?91088_P100?91995?$AA@
	DW	020a9H
	ORG $+2
CONST	ENDS
;	COMDAT ??_C@_0BD@PJLBLOOH@ibm?91088_P100?91995?$AA@
CONST	SEGMENT
??_C@_0BD@PJLBLOOH@ibm?91088_P100?91995?$AA@ DB 'ibm-1088_P100-1995', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@PBNBDHCD@ISO_2022?0locale?$DNko?0version?$DN0?$AA@
CONST	SEGMENT
??_C@_0BN@PBNBDHCD@ISO_2022?0locale?$DNko?0version?$DN0?$AA@ DB 'ISO_2022'
	DB	',locale=ko,version=0', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@PADIFBJO@ibm?91363_P110?91997?$AA@
CONST	SEGMENT
??_C@_0BD@PADIFBJO@ibm?91363_P110?91997?$AA@ DB 'ibm-1363_P110-1997', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@CKIHHKII@ibm?9949_P110?91999?$AA@
CONST	SEGMENT
??_C@_0BC@CKIHHKII@ibm?9949_P110?91999?$AA@ DB 'ibm-949_P110-1999', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@NEDHDEPE@ibm?9944_P100?91995?$AA@
CONST	SEGMENT
??_C@_0BC@NEDHDEPE@ibm?9944_P100?91995?$AA@ DB 'ibm-944_P100-1995', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@POKCDNIN@ibm?91041_P100?91995?$AA@
CONST	SEGMENT
??_C@_0BD@POKCDNIN@ibm?91041_P100?91995?$AA@ DB 'ibm-1041_P100-1995', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@MPAMLOAO@ibm?933722_P120?91999?$AA@
CONST	SEGMENT
??_C@_0BE@MPAMLOAO@ibm?933722_P120?91999?$AA@ DB 'ibm-33722_P120-1999', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@DIAMKKGL@ibm?9946_P100?91995?$AA@
CONST	SEGMENT
??_C@_0BC@DIAMKKGL@ibm?9946_P100?91995?$AA@ DB 'ibm-946_P100-1995', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@ICJFJFJE@ibm?9943_P130?91999?$AA@
CONST	SEGMENT
??_C@_0BC@ICJFJFJE@ibm?9943_P130?91999?$AA@ DB 'ibm-943_P130-1999', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@NFJKNJGF@ibm?9942_P120?91999?$AA@
CONST	SEGMENT
??_C@_0BC@NFJKNJGF@ibm?9942_P120?91999?$AA@ DB 'ibm-942_P120-1999', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@HJIKGHAM@ibm?9897_P100?91995?$AA@
CONST	SEGMENT
??_C@_0BC@HJIKGHAM@ibm?9897_P100?91995?$AA@ DB 'ibm-897_P100-1995', 00H ; `string'
CONST	ENDS
PUBLIC	_ucnv_open_56
EXTRN	_ucnv_createConverter_56:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File d:\mozilla\intl\icu\source\common\ucnv.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT _ucnv_open_56
_TEXT	SEGMENT
_r$ = -8						; size = 4
_name$ = 8						; size = 4
_err$ = 12						; size = 4
_ucnv_open_56 PROC					; COMDAT
; Line 71
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 74
	cmp	DWORD PTR _err$[ebp], 0
	je	SHORT $LN1@ucnv_open_
	mov	eax, DWORD PTR _err$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN2@ucnv_open_
$LN1@ucnv_open_:
; Line 75
	xor	eax, eax
	jmp	SHORT $LN3@ucnv_open_
$LN2@ucnv_open_:
; Line 78
	mov	eax, DWORD PTR _err$[ebp]
	push	eax
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	push	0
	call	_ucnv_createConverter_56
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _r$[ebp], eax
; Line 79
	mov	eax, DWORD PTR _r$[ebp]
$LN3@ucnv_open_:
; Line 80
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ucnv_open_56 ENDP
_TEXT	ENDS
PUBLIC	_ucnv_openPackage_56
EXTRN	_ucnv_createConverterFromPackage_56:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _ucnv_openPackage_56
_TEXT	SEGMENT
_packageName$ = 8					; size = 4
_converterName$ = 12					; size = 4
_err$ = 16						; size = 4
_ucnv_openPackage_56 PROC				; COMDAT
; Line 84
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 85
	mov	eax, DWORD PTR _err$[ebp]
	push	eax
	mov	ecx, DWORD PTR _converterName$[ebp]
	push	ecx
	mov	edx, DWORD PTR _packageName$[ebp]
	push	edx
	call	_ucnv_createConverterFromPackage_56
	add	esp, 12					; 0000000cH
; Line 86
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ucnv_openPackage_56 ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_ucnv_openU_56
EXTRN	_u_austrcpy_56:PROC
EXTRN	_u_strlen_56:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _ucnv_openU_56
_TEXT	SEGMENT
_asciiName$ = -68					; size = 60
__$ArrayPad$ = -4					; size = 4
_name$ = 8						; size = 4
_err$ = 12						; size = 4
_ucnv_openU_56 PROC					; COMDAT
; Line 92
	push	ebp
	mov	ebp, esp
	sub	esp, 264				; 00000108H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-264]
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 95
	cmp	DWORD PTR _err$[ebp], 0
	je	SHORT $LN3@ucnv_openU
	mov	eax, DWORD PTR _err$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN4@ucnv_openU
$LN3@ucnv_openU:
; Line 96
	xor	eax, eax
	jmp	SHORT $LN5@ucnv_openU
$LN4@ucnv_openU:
; Line 97
	cmp	DWORD PTR _name$[ebp], 0
	jne	SHORT $LN2@ucnv_openU
; Line 98
	mov	eax, DWORD PTR _err$[ebp]
	push	eax
	push	0
	call	_ucnv_open_56
	add	esp, 8
	jmp	SHORT $LN5@ucnv_openU
$LN2@ucnv_openU:
; Line 99
	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	call	_u_strlen_56
	add	esp, 4
	cmp	eax, 60					; 0000003cH
	jl	SHORT $LN1@ucnv_openU
; Line 101
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 1
; Line 102
	xor	eax, eax
	jmp	SHORT $LN5@ucnv_openU
$LN1@ucnv_openU:
; Line 104
	mov	eax, DWORD PTR _err$[ebp]
	push	eax
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	lea	edx, DWORD PTR _asciiName$[ebp]
	push	edx
	call	_u_austrcpy_56
	add	esp, 8
	push	eax
	call	_ucnv_open_56
	add	esp, 8
$LN5@ucnv_openU:
; Line 105
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@ucnv_openU
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 264				; 00000108H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN9@ucnv_openU:
	DD	1
	DD	$LN8@ucnv_openU
$LN8@ucnv_openU:
	DD	-68					; ffffffbcH
	DD	60					; 0000003cH
	DD	$LN7@ucnv_openU
$LN7@ucnv_openU:
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	99					; 00000063H
	DB	105					; 00000069H
	DB	105					; 00000069H
	DB	78					; 0000004eH
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	0
_ucnv_openU_56 ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_ucnv_openCCSID_56
EXTRN	_T_CString_integerToString_56:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _ucnv_openCCSID_56
_TEXT	SEGMENT
_myNameLen$ = -80					; size = 4
_myName$ = -68						; size = 60
__$ArrayPad$ = -4					; size = 4
_codepage$ = 8						; size = 4
_platform$ = 12						; size = 4
_err$ = 16						; size = 4
_ucnv_openCCSID_56 PROC					; COMDAT
; Line 135
	push	ebp
	mov	ebp, esp
	sub	esp, 276				; 00000114H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-276]
	mov	ecx, 69					; 00000045H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 139
	cmp	DWORD PTR _err$[ebp], 0
	je	SHORT $LN1@ucnv_openC
	mov	eax, DWORD PTR _err$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN2@ucnv_openC
$LN1@ucnv_openC:
; Line 140
	xor	eax, eax
	jmp	SHORT $LN3@ucnv_openC
$LN2@ucnv_openC:
; Line 143
	mov	eax, DWORD PTR _platform$[ebp]
	push	eax
	lea	ecx, DWORD PTR _myName$[ebp]
	push	ecx
	call	_ucnv_copyPlatformString
	add	esp, 8
	mov	DWORD PTR _myNameLen$[ebp], eax
; Line 144
	push	10					; 0000000aH
	mov	eax, DWORD PTR _codepage$[ebp]
	push	eax
	mov	ecx, DWORD PTR _myNameLen$[ebp]
	lea	edx, DWORD PTR _myName$[ebp+ecx]
	push	edx
	call	_T_CString_integerToString_56
	add	esp, 12					; 0000000cH
; Line 146
	mov	eax, DWORD PTR _err$[ebp]
	push	eax
	lea	ecx, DWORD PTR _myName$[ebp]
	push	ecx
	push	0
	call	_ucnv_createConverter_56
	add	esp, 12					; 0000000cH
$LN3@ucnv_openC:
; Line 147
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@ucnv_openC
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 276				; 00000114H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN7@ucnv_openC:
	DD	1
	DD	$LN6@ucnv_openC
$LN6@ucnv_openC:
	DD	-68					; ffffffbcH
	DD	60					; 0000003cH
	DD	$LN5@ucnv_openC
$LN5@ucnv_openC:
	DB	109					; 0000006dH
	DB	121					; 00000079H
	DB	78					; 0000004eH
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	0
_ucnv_openCCSID_56 ENDP
_TEXT	ENDS
PUBLIC	??_C@_04FMPFCAMK@ibm?9?$AA@			; `string'
EXTRN	_strcpy:PROC
;	COMDAT ??_C@_04FMPFCAMK@ibm?9?$AA@
CONST	SEGMENT
??_C@_04FMPFCAMK@ibm?9?$AA@ DB 'ibm-', 00H		; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT _ucnv_copyPlatformString
_TEXT	SEGMENT
tv64 = -196						; size = 4
_platformString$ = 8					; size = 4
_pltfrm$ = 12						; size = 4
_ucnv_copyPlatformString PROC				; COMDAT
; Line 114
	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 115
	mov	eax, DWORD PTR _pltfrm$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	cmp	DWORD PTR tv64[ebp], 0
	je	SHORT $LN2@ucnv_copyP
	jmp	SHORT $LN3@ucnv_copyP
$LN2@ucnv_copyP:
; Line 118
	push	OFFSET ??_C@_04FMPFCAMK@ibm?9?$AA@
	mov	eax, DWORD PTR _platformString$[ebp]
	push	eax
	call	_strcpy
	add	esp, 8
; Line 119
	mov	eax, 4
	jmp	SHORT $LN5@ucnv_copyP
$LN3@ucnv_copyP:
; Line 125
	mov	eax, DWORD PTR _platformString$[ebp]
	mov	BYTE PTR [eax], 0
; Line 126
	xor	eax, eax
$LN5@ucnv_copyP:
; Line 127
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ucnv_copyPlatformString ENDP
_TEXT	ENDS
PUBLIC	_ucnv_safeClone_56
EXTRN	_ucnv_incrementRefCount_56:PROC
EXTRN	_uprv_free_56:PROC
EXTRN	_memcpy:PROC
EXTRN	_uprv_checkValidMemory:PROC
EXTRN	_memset:PROC
EXTRN	_uprv_malloc_56:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _ucnv_safeClone_56
_TEXT	SEGMENT
_offsetUp$12350 = -152					; size = 4
_fromUArgs$ = -140					; size = 28
_toUArgs$ = -104					; size = 28
_cbErr$ = -68						; size = 4
_stackBufferChars$ = -56				; size = 4
_bufferSizeNeeded$ = -44				; size = 4
_stackBufferSize$ = -32					; size = 4
_allocatedConverter$ = -20				; size = 4
_localConverter$ = -8					; size = 4
_cnv$ = 8						; size = 4
_stackBuffer$ = 12					; size = 4
_pBufferSize$ = 16					; size = 4
_status$ = 20						; size = 4
_ucnv_safeClone_56 PROC					; COMDAT
; Line 155
	push	ebp
	mov	ebp, esp
	sub	esp, 348				; 0000015cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-348]
	mov	ecx, 87					; 00000057H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 159
	mov	eax, DWORD PTR _stackBuffer$[ebp]
	mov	DWORD PTR _stackBufferChars$[ebp], eax
; Line 162
	mov	eax, 28					; 0000001cH
	mov	WORD PTR _toUArgs$[ebp], ax
; Line 163
	mov	BYTE PTR _toUArgs$[ebp+2], 1
; Line 164
	mov	DWORD PTR _toUArgs$[ebp+4], 0
; Line 165
	mov	DWORD PTR _toUArgs$[ebp+8], 0
; Line 166
	mov	DWORD PTR _toUArgs$[ebp+12], 0
; Line 167
	mov	DWORD PTR _toUArgs$[ebp+16], 0
; Line 168
	mov	DWORD PTR _toUArgs$[ebp+20], 0
; Line 170
	mov	DWORD PTR _toUArgs$[ebp+24], 0
; Line 172
	mov	eax, 28					; 0000001cH
	mov	WORD PTR _fromUArgs$[ebp], ax
; Line 173
	mov	BYTE PTR _fromUArgs$[ebp+2], 1
; Line 174
	mov	DWORD PTR _fromUArgs$[ebp+4], 0
; Line 175
	mov	DWORD PTR _fromUArgs$[ebp+8], 0
; Line 176
	mov	DWORD PTR _fromUArgs$[ebp+12], 0
; Line 177
	mov	DWORD PTR _fromUArgs$[ebp+16], 0
; Line 178
	mov	DWORD PTR _fromUArgs$[ebp+20], 0
; Line 180
	mov	DWORD PTR _fromUArgs$[ebp+24], 0
; Line 184
	cmp	DWORD PTR _status$[ebp], 0
	je	SHORT $LN24@ucnv_safeC
	mov	eax, DWORD PTR _status$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN25@ucnv_safeC
$LN24@ucnv_safeC:
; Line 186
	xor	eax, eax
	jmp	$LN26@ucnv_safeC
$LN25@ucnv_safeC:
; Line 189
	cmp	DWORD PTR _cnv$[ebp], 0
	jne	SHORT $LN23@ucnv_safeC
; Line 190
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 1
; Line 192
	xor	eax, eax
	jmp	$LN26@ucnv_safeC
$LN23@ucnv_safeC:
; Line 198
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx+20]
	cmp	DWORD PTR [edx+56], 0
	je	SHORT $LN22@ucnv_safeC
; Line 200
	mov	DWORD PTR _bufferSizeNeeded$[ebp], 0
; Line 201
	mov	esi, esp
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bufferSizeNeeded$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _cnv$[ebp]
	push	edx
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [edx+56]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 202
	mov	eax, DWORD PTR _status$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN21@ucnv_safeC
; Line 204
	xor	eax, eax
	jmp	$LN26@ucnv_safeC
$LN21@ucnv_safeC:
; Line 207
	jmp	SHORT $LN20@ucnv_safeC
$LN22@ucnv_safeC:
; Line 210
	mov	DWORD PTR _bufferSizeNeeded$[ebp], 260	; 00000104H
$LN20@ucnv_safeC:
; Line 213
	cmp	DWORD PTR _pBufferSize$[ebp], 0
	jne	SHORT $LN19@ucnv_safeC
; Line 214
	mov	DWORD PTR _stackBufferSize$[ebp], 1
; Line 215
	lea	eax, DWORD PTR _stackBufferSize$[ebp]
	mov	DWORD PTR _pBufferSize$[ebp], eax
; Line 216
	jmp	SHORT $LN18@ucnv_safeC
$LN19@ucnv_safeC:
; Line 217
	mov	eax, DWORD PTR _pBufferSize$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _stackBufferSize$[ebp], ecx
; Line 218
	cmp	DWORD PTR _stackBufferSize$[ebp], 0
	jg	SHORT $LN18@ucnv_safeC
; Line 219
	mov	eax, DWORD PTR _pBufferSize$[ebp]
	mov	ecx, DWORD PTR _bufferSizeNeeded$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 221
	xor	eax, eax
	jmp	$LN26@ucnv_safeC
$LN18@ucnv_safeC:
; Line 229
	mov	eax, DWORD PTR _stackBuffer$[ebp]
	and	eax, 7
	je	SHORT $LN16@ucnv_safeC
; Line 230
	mov	eax, DWORD PTR _stackBufferChars$[ebp]
	and	eax, 7
	mov	ecx, 8
	sub	ecx, eax
	mov	DWORD PTR _offsetUp$12350[ebp], ecx
; Line 231
	mov	eax, DWORD PTR _stackBufferSize$[ebp]
	cmp	eax, DWORD PTR _offsetUp$12350[ebp]
	jle	SHORT $LN15@ucnv_safeC
; Line 232
	mov	eax, DWORD PTR _stackBufferSize$[ebp]
	sub	eax, DWORD PTR _offsetUp$12350[ebp]
	mov	DWORD PTR _stackBufferSize$[ebp], eax
; Line 233
	mov	eax, DWORD PTR _stackBufferChars$[ebp]
	add	eax, DWORD PTR _offsetUp$12350[ebp]
	mov	DWORD PTR _stackBufferChars$[ebp], eax
; Line 234
	jmp	SHORT $LN16@ucnv_safeC
$LN15@ucnv_safeC:
; Line 236
	mov	DWORD PTR _stackBufferSize$[ebp], 1
$LN16@ucnv_safeC:
; Line 240
	mov	eax, DWORD PTR _stackBufferChars$[ebp]
	mov	DWORD PTR _stackBuffer$[ebp], eax
; Line 243
	mov	eax, DWORD PTR _stackBufferSize$[ebp]
	cmp	eax, DWORD PTR _bufferSizeNeeded$[ebp]
	jl	SHORT $LN12@ucnv_safeC
	cmp	DWORD PTR _stackBuffer$[ebp], 0
	jne	SHORT $LN13@ucnv_safeC
$LN12@ucnv_safeC:
; Line 246
	mov	eax, DWORD PTR _bufferSizeNeeded$[ebp]
	push	eax
	call	_uprv_malloc_56
	add	esp, 4
	mov	DWORD PTR _allocatedConverter$[ebp], eax
	mov	ecx, DWORD PTR _allocatedConverter$[ebp]
	mov	DWORD PTR _localConverter$[ebp], ecx
; Line 248
	cmp	DWORD PTR _localConverter$[ebp], 0
	jne	SHORT $LN11@ucnv_safeC
; Line 249
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 7
; Line 251
	xor	eax, eax
	jmp	$LN26@ucnv_safeC
$LN11@ucnv_safeC:
; Line 253
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], -126			; ffffff82H
; Line 256
	mov	eax, DWORD PTR _pBufferSize$[ebp]
	mov	ecx, DWORD PTR _bufferSizeNeeded$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 257
	jmp	SHORT $LN10@ucnv_safeC
$LN13@ucnv_safeC:
; Line 259
	mov	eax, DWORD PTR _stackBuffer$[ebp]
	mov	DWORD PTR _localConverter$[ebp], eax
; Line 260
	mov	DWORD PTR _allocatedConverter$[ebp], 0
$LN10@ucnv_safeC:
; Line 263
	mov	eax, DWORD PTR _bufferSizeNeeded$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _localConverter$[ebp]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH
; Line 266
	push	1
	mov	eax, DWORD PTR _cnv$[ebp]
	push	eax
	call	_uprv_checkValidMemory
	add	esp, 8
	push	260					; 00000104H
	mov	ecx, DWORD PTR _cnv$[ebp]
	push	ecx
	mov	edx, DWORD PTR _localConverter$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 267
	mov	eax, DWORD PTR _localConverter$[ebp]
	mov	BYTE PTR [eax+34], 0
	mov	ecx, DWORD PTR _localConverter$[ebp]
	mov	BYTE PTR [ecx+33], 0
; Line 270
	mov	eax, DWORD PTR _cnv$[ebp]
	add	eax, 108				; 0000006cH
	mov	ecx, DWORD PTR _cnv$[ebp]
	cmp	DWORD PTR [ecx+20], eax
	jne	SHORT $LN9@ucnv_safeC
; Line 271
	mov	eax, DWORD PTR _localConverter$[ebp]
	add	eax, 108				; 0000006cH
	mov	ecx, DWORD PTR _localConverter$[ebp]
	mov	DWORD PTR [ecx+20], eax
; Line 272
	jmp	SHORT $LN8@ucnv_safeC
$LN9@ucnv_safeC:
; Line 273
	push	64					; 00000040H
	call	_uprv_malloc_56
	add	esp, 4
	mov	ecx, DWORD PTR _localConverter$[ebp]
	mov	DWORD PTR [ecx+20], eax
; Line 274
	mov	eax, DWORD PTR _localConverter$[ebp]
	cmp	DWORD PTR [eax+20], 0
	jne	SHORT $LN7@ucnv_safeC
; Line 275
	mov	eax, DWORD PTR _allocatedConverter$[ebp]
	push	eax
	call	_uprv_free_56
	add	esp, 4
; Line 277
	xor	eax, eax
	jmp	$LN26@ucnv_safeC
$LN7@ucnv_safeC:
; Line 279
	push	1
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	call	_uprv_checkValidMemory
	add	esp, 8
	push	64					; 00000040H
	mov	edx, DWORD PTR _cnv$[ebp]
	mov	eax, DWORD PTR [edx+20]
	push	eax
	mov	ecx, DWORD PTR _localConverter$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN8@ucnv_safeC:
; Line 283
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx+20]
	cmp	DWORD PTR [edx+56], 0
	je	SHORT $LN6@ucnv_safeC
; Line 285
	mov	esi, esp
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pBufferSize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _localConverter$[ebp]
	push	edx
	mov	eax, DWORD PTR _cnv$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cnv$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR [eax+56]
	call	ecx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _localConverter$[ebp], eax
$LN6@ucnv_safeC:
; Line 288
	cmp	DWORD PTR _localConverter$[ebp], 0
	je	SHORT $LN4@ucnv_safeC
	mov	eax, DWORD PTR _status$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN5@ucnv_safeC
$LN4@ucnv_safeC:
; Line 289
	cmp	DWORD PTR _allocatedConverter$[ebp], 0
	je	SHORT $LN3@ucnv_safeC
	mov	eax, DWORD PTR _allocatedConverter$[ebp]
	add	eax, 108				; 0000006cH
	mov	ecx, DWORD PTR _allocatedConverter$[ebp]
	cmp	DWORD PTR [ecx+20], eax
	je	SHORT $LN3@ucnv_safeC
; Line 290
	mov	eax, DWORD PTR _allocatedConverter$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	call	_uprv_free_56
	add	esp, 4
$LN3@ucnv_safeC:
; Line 292
	mov	eax, DWORD PTR _allocatedConverter$[ebp]
	push	eax
	call	_uprv_free_56
	add	esp, 4
; Line 294
	xor	eax, eax
	jmp	$LN26@ucnv_safeC
$LN5@ucnv_safeC:
; Line 298
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	movsx	edx, BYTE PTR [ecx+17]
	test	edx, edx
	je	SHORT $LN2@ucnv_safeC
; Line 299
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	call	_ucnv_incrementRefCount_56
	add	esp, 4
$LN2@ucnv_safeC:
; Line 302
	mov	eax, DWORD PTR _localConverter$[ebp]
	cmp	eax, DWORD PTR _stackBuffer$[ebp]
	jne	SHORT $LN1@ucnv_safeC
; Line 304
	mov	eax, DWORD PTR _localConverter$[ebp]
	mov	BYTE PTR [eax+33], 1
$LN1@ucnv_safeC:
; Line 308
	mov	eax, DWORD PTR _localConverter$[ebp]
	mov	DWORD PTR _fromUArgs$[ebp+4], eax
	mov	ecx, DWORD PTR _fromUArgs$[ebp+4]
	mov	DWORD PTR _toUArgs$[ebp+4], ecx
; Line 309
	mov	DWORD PTR _cbErr$[ebp], 0
; Line 310
	mov	esi, esp
	lea	eax, DWORD PTR _cbErr$[ebp]
	push	eax
	push	5
	push	0
	push	0
	lea	ecx, DWORD PTR _toUArgs$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cnv$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR _cnv$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	call	edx
	add	esp, 24					; 00000018H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 311
	mov	DWORD PTR _cbErr$[ebp], 0
; Line 312
	mov	esi, esp
	lea	eax, DWORD PTR _cbErr$[ebp]
	push	eax
	push	5
	push	0
	push	0
	push	0
	lea	ecx, DWORD PTR _fromUArgs$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cnv$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _cnv$[ebp]
	mov	edx, DWORD PTR [ecx]
	call	edx
	add	esp, 28					; 0000001cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 315
	mov	eax, DWORD PTR _localConverter$[ebp]
$LN26@ucnv_safeC:
; Line 316
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN34@ucnv_safeC
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 348				; 0000015cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN34@ucnv_safeC:
	DD	5
	DD	$LN33@ucnv_safeC
$LN33@ucnv_safeC:
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN28@ucnv_safeC
	DD	-44					; ffffffd4H
	DD	4
	DD	$LN29@ucnv_safeC
	DD	-68					; ffffffbcH
	DD	4
	DD	$LN30@ucnv_safeC
	DD	-104					; ffffff98H
	DD	28					; 0000001cH
	DD	$LN31@ucnv_safeC
	DD	-140					; ffffff74H
	DD	28					; 0000001cH
	DD	$LN32@ucnv_safeC
$LN32@ucnv_safeC:
	DB	102					; 00000066H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	109					; 0000006dH
	DB	85					; 00000055H
	DB	65					; 00000041H
	DB	114					; 00000072H
	DB	103					; 00000067H
	DB	115					; 00000073H
	DB	0
$LN31@ucnv_safeC:
	DB	116					; 00000074H
	DB	111					; 0000006fH
	DB	85					; 00000055H
	DB	65					; 00000041H
	DB	114					; 00000072H
	DB	103					; 00000067H
	DB	115					; 00000073H
	DB	0
$LN30@ucnv_safeC:
	DB	99					; 00000063H
	DB	98					; 00000062H
	DB	69					; 00000045H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	0
$LN29@ucnv_safeC:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	83					; 00000053H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	78					; 0000004eH
	DB	101					; 00000065H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	0
$LN28@ucnv_safeC:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	66					; 00000042H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	83					; 00000053H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
_ucnv_safeClone_56 ENDP
_TEXT	ENDS
PUBLIC	_ucnv_close_56
EXTRN	_ucnv_unloadSharedDataIfReady_56:PROC
EXTRN	_UCNV_FROM_U_CALLBACK_SUBSTITUTE_56:PROC
EXTRN	_UCNV_TO_U_CALLBACK_SUBSTITUTE_56:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _ucnv_close_56
_TEXT	SEGMENT
_fromUArgs$12411 = -80					; size = 28
_toUArgs$12400 = -44					; size = 28
_errorCode$ = -8					; size = 4
_converter$ = 8						; size = 4
_ucnv_close_56 PROC					; COMDAT
; Line 325
	push	ebp
	mov	ebp, esp
	sub	esp, 276				; 00000114H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-276]
	mov	ecx, 69					; 00000045H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 326
	mov	DWORD PTR _errorCode$[ebp], 0
; Line 330
	cmp	DWORD PTR _converter$[ebp], 0
	jne	SHORT $LN7@ucnv_close
; Line 333
	jmp	$LN8@ucnv_close
$LN7@ucnv_close:
; Line 343
	mov	eax, DWORD PTR _converter$[ebp]
	cmp	DWORD PTR [eax+4], OFFSET _UCNV_TO_U_CALLBACK_SUBSTITUTE_56
	je	SHORT $LN6@ucnv_close
; Line 345
	mov	eax, 28					; 0000001cH
	mov	WORD PTR _toUArgs$12400[ebp], ax
; Line 346
	mov	BYTE PTR _toUArgs$12400[ebp+2], 1
; Line 347
	mov	DWORD PTR _toUArgs$12400[ebp+4], 0
; Line 348
	mov	DWORD PTR _toUArgs$12400[ebp+8], 0
; Line 349
	mov	DWORD PTR _toUArgs$12400[ebp+12], 0
; Line 350
	mov	DWORD PTR _toUArgs$12400[ebp+16], 0
; Line 351
	mov	DWORD PTR _toUArgs$12400[ebp+20], 0
; Line 353
	mov	DWORD PTR _toUArgs$12400[ebp+24], 0
; Line 355
	mov	eax, DWORD PTR _converter$[ebp]
	mov	DWORD PTR _toUArgs$12400[ebp+4], eax
; Line 356
	mov	DWORD PTR _errorCode$[ebp], 0
; Line 357
	mov	esi, esp
	lea	eax, DWORD PTR _errorCode$[ebp]
	push	eax
	push	4
	push	0
	push	0
	lea	ecx, DWORD PTR _toUArgs$12400[ebp]
	push	ecx
	mov	edx, DWORD PTR _converter$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR _converter$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	call	edx
	add	esp, 24					; 00000018H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN6@ucnv_close:
; Line 359
	mov	eax, DWORD PTR _converter$[ebp]
	cmp	DWORD PTR [eax], OFFSET _UCNV_FROM_U_CALLBACK_SUBSTITUTE_56
	je	SHORT $LN5@ucnv_close
; Line 361
	mov	eax, 28					; 0000001cH
	mov	WORD PTR _fromUArgs$12411[ebp], ax
; Line 362
	mov	BYTE PTR _fromUArgs$12411[ebp+2], 1
; Line 363
	mov	DWORD PTR _fromUArgs$12411[ebp+4], 0
; Line 364
	mov	DWORD PTR _fromUArgs$12411[ebp+8], 0
; Line 365
	mov	DWORD PTR _fromUArgs$12411[ebp+12], 0
; Line 366
	mov	DWORD PTR _fromUArgs$12411[ebp+16], 0
; Line 367
	mov	DWORD PTR _fromUArgs$12411[ebp+20], 0
; Line 369
	mov	DWORD PTR _fromUArgs$12411[ebp+24], 0
; Line 370
	mov	eax, DWORD PTR _converter$[ebp]
	mov	DWORD PTR _fromUArgs$12411[ebp+4], eax
; Line 371
	mov	DWORD PTR _errorCode$[ebp], 0
; Line 372
	mov	esi, esp
	lea	eax, DWORD PTR _errorCode$[ebp]
	push	eax
	push	4
	push	0
	push	0
	push	0
	lea	ecx, DWORD PTR _fromUArgs$12411[ebp]
	push	ecx
	mov	edx, DWORD PTR _converter$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _converter$[ebp]
	mov	edx, DWORD PTR [ecx]
	call	edx
	add	esp, 28					; 0000001cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN5@ucnv_close:
; Line 375
	mov	eax, DWORD PTR _converter$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx+20]
	cmp	DWORD PTR [edx+16], 0
	je	SHORT $LN4@ucnv_close
; Line 376
	mov	esi, esp
	mov	eax, DWORD PTR _converter$[ebp]
	push	eax
	mov	ecx, DWORD PTR _converter$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR [eax+16]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN4@ucnv_close:
; Line 379
	mov	eax, DWORD PTR _converter$[ebp]
	add	eax, 108				; 0000006cH
	mov	ecx, DWORD PTR _converter$[ebp]
	cmp	DWORD PTR [ecx+20], eax
	je	SHORT $LN3@ucnv_close
; Line 380
	mov	eax, DWORD PTR _converter$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	call	_uprv_free_56
	add	esp, 4
$LN3@ucnv_close:
; Line 383
	mov	eax, DWORD PTR _converter$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	movsx	edx, BYTE PTR [ecx+17]
	test	edx, edx
	je	SHORT $LN2@ucnv_close
; Line 384
	mov	eax, DWORD PTR _converter$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	call	_ucnv_unloadSharedDataIfReady_56
	add	esp, 4
$LN2@ucnv_close:
; Line 387
	mov	eax, DWORD PTR _converter$[ebp]
	movsx	ecx, BYTE PTR [eax+33]
	test	ecx, ecx
	jne	SHORT $LN8@ucnv_close
; Line 388
	mov	eax, DWORD PTR _converter$[ebp]
	push	eax
	call	_uprv_free_56
	add	esp, 4
$LN8@ucnv_close:
; Line 392
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@ucnv_close
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 276				; 00000114H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN14@ucnv_close:
	DD	3
	DD	$LN13@ucnv_close
$LN13@ucnv_close:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN10@ucnv_close
	DD	-44					; ffffffd4H
	DD	28					; 0000001cH
	DD	$LN11@ucnv_close
	DD	-80					; ffffffb0H
	DD	28					; 0000001cH
	DD	$LN12@ucnv_close
$LN12@ucnv_close:
	DB	102					; 00000066H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	109					; 0000006dH
	DB	85					; 00000055H
	DB	65					; 00000041H
	DB	114					; 00000072H
	DB	103					; 00000067H
	DB	115					; 00000073H
	DB	0
$LN11@ucnv_close:
	DB	116					; 00000074H
	DB	111					; 0000006fH
	DB	85					; 00000055H
	DB	65					; 00000041H
	DB	114					; 00000072H
	DB	103					; 00000067H
	DB	115					; 00000073H
	DB	0
$LN10@ucnv_close:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	67					; 00000043H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
_ucnv_close_56 ENDP
_TEXT	ENDS
PUBLIC	_ucnv_getAvailableName_56
EXTRN	_ucnv_bld_getAvailableConverter_56:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _ucnv_getAvailableName_56
_TEXT	SEGMENT
_name$12431 = -20					; size = 4
_err$12430 = -8						; size = 4
_n$ = 8							; size = 4
_ucnv_getAvailableName_56 PROC				; COMDAT
; Line 398
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 399
	cmp	DWORD PTR _n$[ebp], 0
	jl	SHORT $LN2@ucnv_getAv
	cmp	DWORD PTR _n$[ebp], 65535		; 0000ffffH
	jg	SHORT $LN2@ucnv_getAv
; Line 400
	mov	DWORD PTR _err$12430[ebp], 0
; Line 401
	lea	eax, DWORD PTR _err$12430[ebp]
	push	eax
	movzx	ecx, WORD PTR _n$[ebp]
	push	ecx
	call	_ucnv_bld_getAvailableConverter_56
	add	esp, 8
	mov	DWORD PTR _name$12431[ebp], eax
; Line 402
	cmp	DWORD PTR _err$12430[ebp], 0
	jg	SHORT $LN2@ucnv_getAv
; Line 403
	mov	eax, DWORD PTR _name$12431[ebp]
	jmp	SHORT $LN3@ucnv_getAv
$LN2@ucnv_getAv:
; Line 406
	xor	eax, eax
$LN3@ucnv_getAv:
; Line 407
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@ucnv_getAv
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN7@ucnv_getAv:
	DD	1
	DD	$LN6@ucnv_getAv
$LN6@ucnv_getAv:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN5@ucnv_getAv
$LN5@ucnv_getAv:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	0
_ucnv_getAvailableName_56 ENDP
_TEXT	ENDS
PUBLIC	_ucnv_countAvailable_56
EXTRN	_ucnv_bld_countAvailableConverters_56:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _ucnv_countAvailable_56
_TEXT	SEGMENT
_err$ = -8						; size = 4
_ucnv_countAvailable_56 PROC				; COMDAT
; Line 411
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 412
	mov	DWORD PTR _err$[ebp], 0
; Line 413
	lea	eax, DWORD PTR _err$[ebp]
	push	eax
	call	_ucnv_bld_countAvailableConverters_56
	add	esp, 4
	movzx	eax, ax
; Line 414
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@ucnv_count
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN5@ucnv_count:
	DD	1
	DD	$LN4@ucnv_count
$LN4@ucnv_count:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN3@ucnv_count
$LN3@ucnv_count:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	0
_ucnv_countAvailable_56 ENDP
_TEXT	ENDS
PUBLIC	_ucnv_getSubstChars_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _ucnv_getSubstChars_56
_TEXT	SEGMENT
_converter$ = 8						; size = 4
_mySubChar$ = 12					; size = 4
_len$ = 16						; size = 4
_err$ = 20						; size = 4
_ucnv_getSubstChars_56 PROC				; COMDAT
; Line 421
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 422
	mov	eax, DWORD PTR _err$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN3@ucnv_getSu
; Line 423
	jmp	SHORT $LN4@ucnv_getSu
$LN3@ucnv_getSu:
; Line 425
	mov	eax, DWORD PTR _converter$[ebp]
	movsx	ecx, BYTE PTR [eax+61]
	test	ecx, ecx
	jg	SHORT $LN2@ucnv_getSu
; Line 427
	mov	eax, DWORD PTR _len$[ebp]
	mov	BYTE PTR [eax], 0
; Line 428
	jmp	SHORT $LN4@ucnv_getSu
$LN2@ucnv_getSu:
; Line 431
	mov	eax, DWORD PTR _len$[ebp]
	movsx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _converter$[ebp]
	movsx	eax, BYTE PTR [edx+61]
	cmp	ecx, eax
	jge	SHORT $LN1@ucnv_getSu
; Line 433
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 8
; Line 434
	jmp	SHORT $LN4@ucnv_getSu
$LN1@ucnv_getSu:
; Line 437
	push	1
	mov	eax, DWORD PTR _converter$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	call	_uprv_checkValidMemory
	add	esp, 8
	mov	edx, DWORD PTR _converter$[ebp]
	movsx	eax, BYTE PTR [edx+61]
	push	eax
	mov	ecx, DWORD PTR _converter$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	mov	eax, DWORD PTR _mySubChar$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 438
	mov	eax, DWORD PTR _len$[ebp]
	mov	ecx, DWORD PTR _converter$[ebp]
	mov	dl, BYTE PTR [ecx+61]
	mov	BYTE PTR [eax], dl
$LN4@ucnv_getSu:
; Line 439
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ucnv_getSubstChars_56 ENDP
_TEXT	ENDS
PUBLIC	_ucnv_setSubstChars_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _ucnv_setSubstChars_56
_TEXT	SEGMENT
_converter$ = 8						; size = 4
_mySubChar$ = 12					; size = 4
_len$ = 16						; size = 1
_err$ = 20						; size = 4
_ucnv_setSubstChars_56 PROC				; COMDAT
; Line 446
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 447
	mov	eax, DWORD PTR _err$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN3@ucnv_setSu
; Line 448
	jmp	SHORT $LN4@ucnv_setSu
$LN3@ucnv_setSu:
; Line 452
	movsx	eax, BYTE PTR _len$[ebp]
	mov	ecx, DWORD PTR _converter$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	ecx, DWORD PTR [edx+12]
	movsx	edx, BYTE PTR [ecx+71]
	cmp	eax, edx
	jg	SHORT $LN1@ucnv_setSu
	movsx	eax, BYTE PTR _len$[ebp]
	mov	ecx, DWORD PTR _converter$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	ecx, DWORD PTR [edx+12]
	movsx	edx, BYTE PTR [ecx+70]
	cmp	eax, edx
	jge	SHORT $LN2@ucnv_setSu
$LN1@ucnv_setSu:
; Line 454
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 1
; Line 455
	jmp	SHORT $LN4@ucnv_setSu
$LN2@ucnv_setSu:
; Line 458
	push	1
	mov	eax, DWORD PTR _mySubChar$[ebp]
	push	eax
	call	_uprv_checkValidMemory
	add	esp, 8
	movsx	ecx, BYTE PTR _len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _mySubChar$[ebp]
	push	edx
	mov	eax, DWORD PTR _converter$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 459
	mov	eax, DWORD PTR _converter$[ebp]
	mov	cl, BYTE PTR _len$[ebp]
	mov	BYTE PTR [eax+61], cl
; Line 466
	mov	eax, DWORD PTR _converter$[ebp]
	mov	BYTE PTR [eax+66], 0
$LN4@ucnv_setSu:
; Line 469
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ucnv_setSubstChars_56 ENDP
_TEXT	ENDS
PUBLIC	_ucnv_fromUChars_56
PUBLIC	_ucnv_setFromUCallBack_56
PUBLIC	__$ArrayPad$
PUBLIC	_ucnv_setSubstString_56
EXTRN	_ucnv_MBCSGetType_56:PROC
EXTRN	_UCNV_FROM_U_CALLBACK_STOP_56:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _ucnv_setSubstString_56
_TEXT	SEGMENT
_length8$ = -1128					; size = 4
_cloneSize$ = -1116					; size = 4
_subChars$ = -1104					; size = 4
_clone$ = -1092						; size = 4
_chars$ = -1080						; size = 32
_cloneBuffer$ = -1040					; size = 1032
__$ArrayPad$ = -4					; size = 4
_cnv$ = 8						; size = 4
_s$ = 12						; size = 4
_length$ = 16						; size = 4
_err$ = 20						; size = 4
_ucnv_setSubstString_56 PROC				; COMDAT
; Line 475
	push	ebp
	mov	ebp, esp
	sub	esp, 1324				; 0000052cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-1324]
	mov	ecx, 331				; 0000014bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 484
	mov	DWORD PTR _cloneSize$[ebp], 1032	; 00000408H
; Line 485
	mov	eax, DWORD PTR _err$[ebp]
	push	eax
	lea	ecx, DWORD PTR _cloneSize$[ebp]
	push	ecx
	lea	edx, DWORD PTR _cloneBuffer$[ebp]
	push	edx
	mov	eax, DWORD PTR _cnv$[ebp]
	push	eax
	call	_ucnv_safeClone_56
	add	esp, 16					; 00000010H
	mov	DWORD PTR _clone$[ebp], eax
; Line 486
	mov	eax, DWORD PTR _err$[ebp]
	push	eax
	push	0
	push	0
	push	0
	push	OFFSET _UCNV_FROM_U_CALLBACK_STOP_56
	mov	ecx, DWORD PTR _clone$[ebp]
	push	ecx
	call	_ucnv_setFromUCallBack_56
	add	esp, 24					; 00000018H
; Line 487
	mov	eax, DWORD PTR _err$[ebp]
	push	eax
	mov	ecx, DWORD PTR _length$[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	push	32					; 00000020H
	lea	eax, DWORD PTR _chars$[ebp]
	push	eax
	mov	ecx, DWORD PTR _clone$[ebp]
	push	ecx
	call	_ucnv_fromUChars_56
	add	esp, 24					; 00000018H
	mov	DWORD PTR _length8$[ebp], eax
; Line 488
	mov	eax, DWORD PTR _clone$[ebp]
	push	eax
	call	_ucnv_close_56
	add	esp, 4
; Line 489
	mov	eax, DWORD PTR _err$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN13@ucnv_setSu@2
; Line 490
	jmp	$LN14@ucnv_setSu@2
$LN13@ucnv_setSu@2:
; Line 498
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx+20]
	cmp	DWORD PTR [edx+52], 0
	je	SHORT $LN11@ucnv_setSu@2
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx+12]
	movsx	eax, BYTE PTR [edx+69]
	cmp	eax, 2
	jne	SHORT $LN12@ucnv_setSu@2
	mov	eax, DWORD PTR _cnv$[ebp]
	push	eax
	call	_ucnv_MBCSGetType_56
	add	esp, 4
	cmp	eax, 9
	je	SHORT $LN12@ucnv_setSu@2
$LN11@ucnv_setSu@2:
; Line 500
	lea	eax, DWORD PTR _chars$[ebp]
	mov	DWORD PTR _subChars$[ebp], eax
; Line 501
	jmp	SHORT $LN10@ucnv_setSu@2
$LN12@ucnv_setSu@2:
; Line 508
	cmp	DWORD PTR _length$[ebp], 32		; 00000020H
	jle	SHORT $LN9@ucnv_setSu@2
; Line 514
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
; Line 515
	jmp	$LN14@ucnv_setSu@2
$LN9@ucnv_setSu@2:
; Line 517
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR _subChars$[ebp], eax
; Line 518
	cmp	DWORD PTR _length$[ebp], 0
	jge	SHORT $LN8@ucnv_setSu@2
; Line 519
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_u_strlen_56
	add	esp, 4
	mov	DWORD PTR _length$[ebp], eax
$LN8@ucnv_setSu@2:
; Line 521
	mov	eax, DWORD PTR _length$[ebp]
	shl	eax, 1
	mov	DWORD PTR _length8$[ebp], eax
$LN10@ucnv_setSu@2:
; Line 528
	cmp	DWORD PTR _length8$[ebp], 4
	jle	SHORT $LN7@ucnv_setSu@2
; Line 530
	mov	eax, DWORD PTR _cnv$[ebp]
	add	eax, 108				; 0000006cH
	mov	ecx, DWORD PTR _cnv$[ebp]
	cmp	DWORD PTR [ecx+20], eax
	jne	SHORT $LN7@ucnv_setSu@2
; Line 532
	push	64					; 00000040H
	call	_uprv_malloc_56
	add	esp, 4
	mov	ecx, DWORD PTR _cnv$[ebp]
	mov	DWORD PTR [ecx+20], eax
; Line 533
	mov	eax, DWORD PTR _cnv$[ebp]
	cmp	DWORD PTR [eax+20], 0
	jne	SHORT $LN5@ucnv_setSu@2
; Line 534
	mov	eax, DWORD PTR _cnv$[ebp]
	add	eax, 108				; 0000006cH
	mov	ecx, DWORD PTR _cnv$[ebp]
	mov	DWORD PTR [ecx+20], eax
; Line 535
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 7
; Line 536
	jmp	$LN14@ucnv_setSu@2
$LN5@ucnv_setSu@2:
; Line 538
	push	64					; 00000040H
	push	0
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH
$LN7@ucnv_setSu@2:
; Line 543
	cmp	DWORD PTR _length8$[ebp], 0
	jne	SHORT $LN4@ucnv_setSu@2
; Line 544
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	BYTE PTR [eax+61], 0
; Line 545
	jmp	SHORT $LN3@ucnv_setSu@2
$LN4@ucnv_setSu@2:
; Line 546
	push	1
	mov	eax, DWORD PTR _subChars$[ebp]
	push	eax
	call	_uprv_checkValidMemory
	add	esp, 8
	mov	ecx, DWORD PTR _length8$[ebp]
	push	ecx
	mov	edx, DWORD PTR _subChars$[ebp]
	push	edx
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 547
	mov	eax, DWORD PTR _subChars$[ebp]
	lea	ecx, DWORD PTR _chars$[ebp]
	cmp	eax, ecx
	jne	SHORT $LN2@ucnv_setSu@2
; Line 548
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	cl, BYTE PTR _length8$[ebp]
	mov	BYTE PTR [eax+61], cl
; Line 549
	jmp	SHORT $LN3@ucnv_setSu@2
$LN2@ucnv_setSu@2:
; Line 550
	mov	eax, DWORD PTR _length$[ebp]
	neg	eax
	mov	ecx, DWORD PTR _cnv$[ebp]
	mov	BYTE PTR [ecx+61], al
$LN3@ucnv_setSu@2:
; Line 555
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	BYTE PTR [eax+66], 0
$LN14@ucnv_setSu@2:
; Line 556
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN20@ucnv_setSu@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 1324				; 0000052cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN20@ucnv_setSu@2:
	DD	3
	DD	$LN19@ucnv_setSu@2
$LN19@ucnv_setSu@2:
	DD	-1040					; fffffbf0H
	DD	1032					; 00000408H
	DD	$LN16@ucnv_setSu@2
	DD	-1080					; fffffbc8H
	DD	32					; 00000020H
	DD	$LN17@ucnv_setSu@2
	DD	-1116					; fffffba4H
	DD	4
	DD	$LN18@ucnv_setSu@2
$LN18@ucnv_setSu@2:
	DB	99					; 00000063H
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	101					; 00000065H
	DB	83					; 00000053H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
$LN17@ucnv_setSu@2:
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	115					; 00000073H
	DB	0
$LN16@ucnv_setSu@2:
	DB	99					; 00000063H
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	101					; 00000065H
	DB	66					; 00000042H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
_ucnv_setSubstString_56 ENDP
_TEXT	ENDS
PUBLIC	_ucnv_reset_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _ucnv_reset_56
_TEXT	SEGMENT
_converter$ = 8						; size = 4
_ucnv_reset_56 PROC					; COMDAT
; Line 627
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 628
	push	1
	push	0
	mov	eax, DWORD PTR _converter$[ebp]
	push	eax
	call	__reset
	add	esp, 12					; 0000000cH
; Line 629
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ucnv_reset_56 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __reset
_TEXT	SEGMENT
_fromUArgs$12529 = -80					; size = 28
_toUArgs$12518 = -44					; size = 28
_errorCode$12515 = -8					; size = 4
_converter$ = 8						; size = 4
_choice$ = 12						; size = 4
_callCallback$ = 16					; size = 1
__reset	PROC						; COMDAT
; Line 562
	push	ebp
	mov	ebp, esp
	sub	esp, 276				; 00000114H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-276]
	mov	ecx, 69					; 00000045H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 563
	cmp	DWORD PTR _converter$[ebp], 0
	jne	SHORT $LN7@reset
; Line 564
	jmp	$LN8@reset
$LN7@reset:
; Line 567
	movsx	eax, BYTE PTR _callCallback$[ebp]
	test	eax, eax
	je	$LN6@reset
; Line 571
	cmp	DWORD PTR _choice$[ebp], 1
	jg	SHORT $LN5@reset
	mov	eax, DWORD PTR _converter$[ebp]
	cmp	DWORD PTR [eax+4], OFFSET _UCNV_TO_U_CALLBACK_SUBSTITUTE_56
	je	SHORT $LN5@reset
; Line 573
	mov	eax, 28					; 0000001cH
	mov	WORD PTR _toUArgs$12518[ebp], ax
; Line 574
	mov	BYTE PTR _toUArgs$12518[ebp+2], 1
; Line 575
	mov	DWORD PTR _toUArgs$12518[ebp+4], 0
; Line 576
	mov	DWORD PTR _toUArgs$12518[ebp+8], 0
; Line 577
	mov	DWORD PTR _toUArgs$12518[ebp+12], 0
; Line 578
	mov	DWORD PTR _toUArgs$12518[ebp+16], 0
; Line 579
	mov	DWORD PTR _toUArgs$12518[ebp+20], 0
; Line 581
	mov	DWORD PTR _toUArgs$12518[ebp+24], 0
; Line 582
	mov	eax, DWORD PTR _converter$[ebp]
	mov	DWORD PTR _toUArgs$12518[ebp+4], eax
; Line 583
	mov	DWORD PTR _errorCode$12515[ebp], 0
; Line 584
	mov	esi, esp
	lea	eax, DWORD PTR _errorCode$12515[ebp]
	push	eax
	push	3
	push	0
	push	0
	lea	ecx, DWORD PTR _toUArgs$12518[ebp]
	push	ecx
	mov	edx, DWORD PTR _converter$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR _converter$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	call	edx
	add	esp, 24					; 00000018H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN5@reset:
; Line 586
	cmp	DWORD PTR _choice$[ebp], 1
	je	SHORT $LN6@reset
	mov	eax, DWORD PTR _converter$[ebp]
	cmp	DWORD PTR [eax], OFFSET _UCNV_FROM_U_CALLBACK_SUBSTITUTE_56
	je	SHORT $LN6@reset
; Line 588
	mov	eax, 28					; 0000001cH
	mov	WORD PTR _fromUArgs$12529[ebp], ax
; Line 589
	mov	BYTE PTR _fromUArgs$12529[ebp+2], 1
; Line 590
	mov	DWORD PTR _fromUArgs$12529[ebp+4], 0
; Line 591
	mov	DWORD PTR _fromUArgs$12529[ebp+8], 0
; Line 592
	mov	DWORD PTR _fromUArgs$12529[ebp+12], 0
; Line 593
	mov	DWORD PTR _fromUArgs$12529[ebp+16], 0
; Line 594
	mov	DWORD PTR _fromUArgs$12529[ebp+20], 0
; Line 596
	mov	DWORD PTR _fromUArgs$12529[ebp+24], 0
; Line 597
	mov	eax, DWORD PTR _converter$[ebp]
	mov	DWORD PTR _fromUArgs$12529[ebp+4], eax
; Line 598
	mov	DWORD PTR _errorCode$12515[ebp], 0
; Line 599
	mov	esi, esp
	lea	eax, DWORD PTR _errorCode$12515[ebp]
	push	eax
	push	3
	push	0
	push	0
	push	0
	lea	ecx, DWORD PTR _fromUArgs$12529[ebp]
	push	ecx
	mov	edx, DWORD PTR _converter$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _converter$[ebp]
	mov	edx, DWORD PTR [ecx]
	call	edx
	add	esp, 28					; 0000001cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN6@reset:
; Line 604
	cmp	DWORD PTR _choice$[ebp], 1
	jg	SHORT $LN3@reset
; Line 605
	mov	eax, DWORD PTR _converter$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR _converter$[ebp]
	mov	eax, DWORD PTR [ecx+24]
	mov	DWORD PTR [edx+44], eax
; Line 606
	mov	eax, DWORD PTR _converter$[ebp]
	mov	DWORD PTR [eax+48], 0
; Line 607
	mov	eax, DWORD PTR _converter$[ebp]
	mov	BYTE PTR [eax+36], 0
; Line 608
	mov	eax, DWORD PTR _converter$[ebp]
	mov	BYTE PTR [eax+65], 0
	mov	ecx, DWORD PTR _converter$[ebp]
	mov	BYTE PTR [ecx+62], 0
; Line 609
	mov	eax, DWORD PTR _converter$[ebp]
	mov	BYTE PTR [eax+254], 0
$LN3@reset:
; Line 611
	cmp	DWORD PTR _choice$[ebp], 1
	je	SHORT $LN2@reset
; Line 612
	mov	eax, DWORD PTR _converter$[ebp]
	mov	DWORD PTR [eax+52], 0
; Line 613
	mov	eax, DWORD PTR _converter$[ebp]
	mov	DWORD PTR [eax+56], 0
; Line 614
	mov	eax, DWORD PTR _converter$[ebp]
	mov	BYTE PTR [eax+63], 0
	mov	ecx, DWORD PTR _converter$[ebp]
	mov	BYTE PTR [ecx+64], 0
; Line 615
	mov	eax, DWORD PTR _converter$[ebp]
	mov	DWORD PTR [eax+180], -1
; Line 616
	mov	eax, DWORD PTR _converter$[ebp]
	mov	BYTE PTR [eax+253], 0
$LN2@reset:
; Line 619
	mov	eax, DWORD PTR _converter$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx+20]
	cmp	DWORD PTR [edx+20], 0
	je	SHORT $LN8@reset
; Line 621
	mov	esi, esp
	mov	eax, DWORD PTR _choice$[ebp]
	push	eax
	mov	ecx, DWORD PTR _converter$[ebp]
	push	ecx
	mov	edx, DWORD PTR _converter$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+20]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN8@reset:
; Line 623
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@reset
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 276				; 00000114H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN14@reset:
	DD	3
	DD	$LN13@reset
$LN13@reset:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN10@reset
	DD	-44					; ffffffd4H
	DD	28					; 0000001cH
	DD	$LN11@reset
	DD	-80					; ffffffb0H
	DD	28					; 0000001cH
	DD	$LN12@reset
$LN12@reset:
	DB	102					; 00000066H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	109					; 0000006dH
	DB	85					; 00000055H
	DB	65					; 00000041H
	DB	114					; 00000072H
	DB	103					; 00000067H
	DB	115					; 00000073H
	DB	0
$LN11@reset:
	DB	116					; 00000074H
	DB	111					; 0000006fH
	DB	85					; 00000055H
	DB	65					; 00000041H
	DB	114					; 00000072H
	DB	103					; 00000067H
	DB	115					; 00000073H
	DB	0
$LN10@reset:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	67					; 00000043H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
__reset	ENDP
_TEXT	ENDS
PUBLIC	_ucnv_resetToUnicode_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _ucnv_resetToUnicode_56
_TEXT	SEGMENT
_converter$ = 8						; size = 4
_ucnv_resetToUnicode_56 PROC				; COMDAT
; Line 633
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 634
	push	1
	push	1
	mov	eax, DWORD PTR _converter$[ebp]
	push	eax
	call	__reset
	add	esp, 12					; 0000000cH
; Line 635
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ucnv_resetToUnicode_56 ENDP
_TEXT	ENDS
PUBLIC	_ucnv_resetFromUnicode_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _ucnv_resetFromUnicode_56
_TEXT	SEGMENT
_converter$ = 8						; size = 4
_ucnv_resetFromUnicode_56 PROC				; COMDAT
; Line 639
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 640
	push	1
	push	2
	mov	eax, DWORD PTR _converter$[ebp]
	push	eax
	call	__reset
	add	esp, 12					; 0000000cH
; Line 641
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ucnv_resetFromUnicode_56 ENDP
_TEXT	ENDS
PUBLIC	_ucnv_getMaxCharSize_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _ucnv_getMaxCharSize_56
_TEXT	SEGMENT
_converter$ = 8						; size = 4
_ucnv_getMaxCharSize_56 PROC				; COMDAT
; Line 645
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 646
	mov	eax, DWORD PTR _converter$[ebp]
	mov	al, BYTE PTR [eax+60]
; Line 647
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_ucnv_getMaxCharSize_56 ENDP
_TEXT	ENDS
PUBLIC	_ucnv_getMinCharSize_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _ucnv_getMinCharSize_56
_TEXT	SEGMENT
_converter$ = 8						; size = 4
_ucnv_getMinCharSize_56 PROC				; COMDAT
; Line 652
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 653
	mov	eax, DWORD PTR _converter$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx+12]
	mov	al, BYTE PTR [edx+70]
; Line 654
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_ucnv_getMinCharSize_56 ENDP
_TEXT	ENDS
PUBLIC	_ucnv_getName_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _ucnv_getName_56
_TEXT	SEGMENT
_temp$12565 = -8					; size = 4
_converter$ = 8						; size = 4
_err$ = 12						; size = 4
_ucnv_getName_56 PROC					; COMDAT
; Line 659
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 660
	mov	eax, DWORD PTR _err$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN3@ucnv_getNa
; Line 661
	xor	eax, eax
	jmp	SHORT $LN4@ucnv_getNa
$LN3@ucnv_getNa:
; Line 662
	mov	eax, DWORD PTR _converter$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx+20]
	cmp	DWORD PTR [edx+48], 0
	je	SHORT $LN2@ucnv_getNa
; Line 663
	mov	esi, esp
	mov	eax, DWORD PTR _converter$[ebp]
	push	eax
	mov	ecx, DWORD PTR _converter$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR [eax+48]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _temp$12565[ebp], eax
; Line 664
	cmp	DWORD PTR _temp$12565[ebp], 0
	je	SHORT $LN2@ucnv_getNa
; Line 665
	mov	eax, DWORD PTR _temp$12565[ebp]
	jmp	SHORT $LN4@ucnv_getNa
$LN2@ucnv_getNa:
; Line 667
	mov	eax, DWORD PTR _converter$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	eax, DWORD PTR [ecx+12]
	add	eax, 4
$LN4@ucnv_getNa:
; Line 668
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ucnv_getName_56 ENDP
_TEXT	ENDS
PUBLIC	??_C@_03OGOFPLC@IBM?$AA@			; `string'
PUBLIC	_ucnv_getCCSID_56
EXTRN	__imp__atol:PROC
EXTRN	__imp__strchr:PROC
EXTRN	_ucnv_getStandardName_56:PROC
;	COMDAT ??_C@_03OGOFPLC@IBM?$AA@
CONST	SEGMENT
??_C@_03OGOFPLC@IBM?$AA@ DB 'IBM', 00H			; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT _ucnv_getCCSID_56
_TEXT	SEGMENT
_ccsidStr$12578 = -32					; size = 4
_standardName$12575 = -20				; size = 4
_ccsid$ = -8						; size = 4
_converter$ = 8						; size = 4
_err$ = 12						; size = 4
_ucnv_getCCSID_56 PROC					; COMDAT
; Line 673
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 675
	mov	eax, DWORD PTR _err$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN4@ucnv_getCC
; Line 676
	or	eax, -1
	jmp	$LN5@ucnv_getCC
$LN4@ucnv_getCC:
; Line 678
	mov	eax, DWORD PTR _converter$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+64]
	mov	DWORD PTR _ccsid$[ebp], eax
; Line 679
	cmp	DWORD PTR _ccsid$[ebp], 0
	jne	SHORT $LN3@ucnv_getCC
; Line 682
	mov	eax, DWORD PTR _err$[ebp]
	push	eax
	push	OFFSET ??_C@_03OGOFPLC@IBM?$AA@
	mov	ecx, DWORD PTR _err$[ebp]
	push	ecx
	mov	edx, DWORD PTR _converter$[ebp]
	push	edx
	call	_ucnv_getName_56
	add	esp, 8
	push	eax
	call	_ucnv_getStandardName_56
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _standardName$12575[ebp], eax
; Line 683
	mov	eax, DWORD PTR _err$[ebp]
	cmp	DWORD PTR [eax], 0
	jg	SHORT $LN3@ucnv_getCC
	cmp	DWORD PTR _standardName$12575[ebp], 0
	je	SHORT $LN3@ucnv_getCC
; Line 684
	mov	esi, esp
	push	45					; 0000002dH
	mov	eax, DWORD PTR _standardName$12575[ebp]
	push	eax
	call	DWORD PTR __imp__strchr
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _ccsidStr$12578[ebp], eax
; Line 685
	cmp	DWORD PTR _ccsidStr$12578[ebp], 0
	je	SHORT $LN3@ucnv_getCC
; Line 686
	mov	eax, DWORD PTR _ccsidStr$12578[ebp]
	add	eax, 1
	mov	esi, esp
	push	eax
	call	DWORD PTR __imp__atol
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _ccsid$[ebp], eax
$LN3@ucnv_getCC:
; Line 690
	mov	eax, DWORD PTR _ccsid$[ebp]
$LN5@ucnv_getCC:
; Line 691
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ucnv_getCCSID_56 ENDP
_TEXT	ENDS
PUBLIC	_ucnv_getPlatform_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _ucnv_getPlatform_56
_TEXT	SEGMENT
_converter$ = 8						; size = 4
_err$ = 12						; size = 4
_ucnv_getPlatform_56 PROC				; COMDAT
; Line 697
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 698
	mov	eax, DWORD PTR _err$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN1@ucnv_getPl
; Line 699
	or	eax, -1
	jmp	SHORT $LN2@ucnv_getPl
$LN1@ucnv_getPl:
; Line 701
	mov	eax, DWORD PTR _converter$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx+12]
	movsx	eax, BYTE PTR [edx+68]
$LN2@ucnv_getPl:
; Line 702
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_ucnv_getPlatform_56 ENDP
_TEXT	ENDS
PUBLIC	_ucnv_getToUCallBack_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _ucnv_getToUCallBack_56
_TEXT	SEGMENT
_converter$ = 8						; size = 4
_action$ = 12						; size = 4
_context$ = 16						; size = 4
_ucnv_getToUCallBack_56 PROC				; COMDAT
; Line 708
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 709
	mov	eax, DWORD PTR _action$[ebp]
	mov	ecx, DWORD PTR _converter$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax], edx
; Line 710
	mov	eax, DWORD PTR _context$[ebp]
	mov	ecx, DWORD PTR _converter$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax], edx
; Line 711
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_ucnv_getToUCallBack_56 ENDP
_TEXT	ENDS
PUBLIC	_ucnv_getFromUCallBack_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _ucnv_getFromUCallBack_56
_TEXT	SEGMENT
_converter$ = 8						; size = 4
_action$ = 12						; size = 4
_context$ = 16						; size = 4
_ucnv_getFromUCallBack_56 PROC				; COMDAT
; Line 717
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 718
	mov	eax, DWORD PTR _action$[ebp]
	mov	ecx, DWORD PTR _converter$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
; Line 719
	mov	eax, DWORD PTR _context$[ebp]
	mov	ecx, DWORD PTR _converter$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax], edx
; Line 720
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_ucnv_getFromUCallBack_56 ENDP
_TEXT	ENDS
PUBLIC	_ucnv_setToUCallBack_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _ucnv_setToUCallBack_56
_TEXT	SEGMENT
_converter$ = 8						; size = 4
_newAction$ = 12					; size = 4
_newContext$ = 16					; size = 4
_oldAction$ = 20					; size = 4
_oldContext$ = 24					; size = 4
_err$ = 28						; size = 4
_ucnv_setToUCallBack_56 PROC				; COMDAT
; Line 729
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 730
	mov	eax, DWORD PTR _err$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN3@ucnv_setTo
; Line 731
	jmp	SHORT $LN4@ucnv_setTo
$LN3@ucnv_setTo:
; Line 732
	cmp	DWORD PTR _oldAction$[ebp], 0
	je	SHORT $LN2@ucnv_setTo
	mov	eax, DWORD PTR _oldAction$[ebp]
	mov	ecx, DWORD PTR _converter$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax], edx
$LN2@ucnv_setTo:
; Line 733
	mov	eax, DWORD PTR _converter$[ebp]
	mov	ecx, DWORD PTR _newAction$[ebp]
	mov	DWORD PTR [eax+4], ecx
; Line 734
	cmp	DWORD PTR _oldContext$[ebp], 0
	je	SHORT $LN1@ucnv_setTo
	mov	eax, DWORD PTR _oldContext$[ebp]
	mov	ecx, DWORD PTR _converter$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax], edx
$LN1@ucnv_setTo:
; Line 735
	mov	eax, DWORD PTR _converter$[ebp]
	mov	ecx, DWORD PTR _newContext$[ebp]
	mov	DWORD PTR [eax+16], ecx
$LN4@ucnv_setTo:
; Line 736
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_ucnv_setToUCallBack_56 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _ucnv_setFromUCallBack_56
_TEXT	SEGMENT
_converter$ = 8						; size = 4
_newAction$ = 12					; size = 4
_newContext$ = 16					; size = 4
_oldAction$ = 20					; size = 4
_oldContext$ = 24					; size = 4
_err$ = 28						; size = 4
_ucnv_setFromUCallBack_56 PROC				; COMDAT
; Line 745
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 746
	mov	eax, DWORD PTR _err$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN3@ucnv_setFr
; Line 747
	jmp	SHORT $LN4@ucnv_setFr
$LN3@ucnv_setFr:
; Line 748
	cmp	DWORD PTR _oldAction$[ebp], 0
	je	SHORT $LN2@ucnv_setFr
	mov	eax, DWORD PTR _oldAction$[ebp]
	mov	ecx, DWORD PTR _converter$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
$LN2@ucnv_setFr:
; Line 749
	mov	eax, DWORD PTR _converter$[ebp]
	mov	ecx, DWORD PTR _newAction$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 750
	cmp	DWORD PTR _oldContext$[ebp], 0
	je	SHORT $LN1@ucnv_setFr
	mov	eax, DWORD PTR _oldContext$[ebp]
	mov	ecx, DWORD PTR _converter$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax], edx
$LN1@ucnv_setFr:
; Line 751
	mov	eax, DWORD PTR _converter$[ebp]
	mov	ecx, DWORD PTR _newContext$[ebp]
	mov	DWORD PTR [eax+12], ecx
$LN4@ucnv_setFr:
; Line 752
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_ucnv_setFromUCallBack_56 ENDP
_TEXT	ENDS
PUBLIC	_ucnv_fromUnicode_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _ucnv_fromUnicode_56
_TEXT	SEGMENT
tv72 = -256						; size = 4
_t$ = -56						; size = 4
_s$ = -44						; size = 4
_args$ = -32						; size = 28
_cnv$ = 8						; size = 4
_target$ = 12						; size = 4
_targetLimit$ = 16					; size = 4
_source$ = 20						; size = 4
_sourceLimit$ = 24					; size = 4
_offsets$ = 28						; size = 4
_flush$ = 32						; size = 1
_err$ = 36						; size = 4
_ucnv_fromUnicode_56 PROC				; COMDAT
; Line 1173
	push	ebp
	mov	ebp, esp
	sub	esp, 256				; 00000100H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-256]
	mov	ecx, 64					; 00000040H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1179
	cmp	DWORD PTR _err$[ebp], 0
	je	SHORT $LN10@ucnv_fromU
	mov	eax, DWORD PTR _err$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN11@ucnv_fromU
$LN10@ucnv_fromU:
; Line 1180
	jmp	$LN12@ucnv_fromU
$LN11@ucnv_fromU:
; Line 1183
	cmp	DWORD PTR _cnv$[ebp], 0
	je	SHORT $LN8@ucnv_fromU
	cmp	DWORD PTR _target$[ebp], 0
	je	SHORT $LN8@ucnv_fromU
	cmp	DWORD PTR _source$[ebp], 0
	jne	SHORT $LN9@ucnv_fromU
$LN8@ucnv_fromU:
; Line 1184
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 1
; Line 1185
	jmp	$LN12@ucnv_fromU
$LN9@ucnv_fromU:
; Line 1188
	mov	eax, DWORD PTR _source$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _s$[ebp], ecx
; Line 1189
	mov	eax, DWORD PTR _target$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _t$[ebp], ecx
; Line 1191
	mov	eax, DWORD PTR _sourceLimit$[ebp]
	add	eax, 2147483647				; 7fffffffH
	cmp	eax, DWORD PTR _sourceLimit$[ebp]
	jbe	SHORT $LN14@ucnv_fromU
	mov	ecx, DWORD PTR _sourceLimit$[ebp]
	add	ecx, 2147483647				; 7fffffffH
	mov	DWORD PTR tv72[ebp], ecx
	jmp	SHORT $LN15@ucnv_fromU
$LN14@ucnv_fromU:
	mov	DWORD PTR tv72[ebp], -1
$LN15@ucnv_fromU:
	mov	edx, DWORD PTR tv72[ebp]
	cmp	edx, DWORD PTR _sourceLimit$[ebp]
	jne	SHORT $LN7@ucnv_fromU
; Line 1197
	mov	eax, DWORD PTR _sourceLimit$[ebp]
	sub	eax, 1
	mov	DWORD PTR _sourceLimit$[ebp], eax
$LN7@ucnv_fromU:
; Line 1222
	mov	eax, DWORD PTR _sourceLimit$[ebp]
	cmp	eax, DWORD PTR _s$[ebp]
	jb	SHORT $LN5@ucnv_fromU
	mov	eax, DWORD PTR _targetLimit$[ebp]
	cmp	eax, DWORD PTR _t$[ebp]
	jb	SHORT $LN5@ucnv_fromU
	mov	eax, DWORD PTR _sourceLimit$[ebp]
	sub	eax, DWORD PTR _s$[ebp]
	sar	eax, 1
	cmp	eax, 1073741823				; 3fffffffH
	jbe	SHORT $LN4@ucnv_fromU
	mov	eax, DWORD PTR _sourceLimit$[ebp]
	cmp	eax, DWORD PTR _s$[ebp]
	ja	SHORT $LN5@ucnv_fromU
$LN4@ucnv_fromU:
	mov	eax, DWORD PTR _targetLimit$[ebp]
	sub	eax, DWORD PTR _t$[ebp]
	cmp	eax, 2147483647				; 7fffffffH
	jbe	SHORT $LN3@ucnv_fromU
	mov	eax, DWORD PTR _targetLimit$[ebp]
	cmp	eax, DWORD PTR _t$[ebp]
	ja	SHORT $LN5@ucnv_fromU
$LN3@ucnv_fromU:
	mov	eax, DWORD PTR _sourceLimit$[ebp]
	sub	eax, DWORD PTR _s$[ebp]
	and	eax, 1
	je	SHORT $LN6@ucnv_fromU
$LN5@ucnv_fromU:
; Line 1224
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 1
; Line 1225
	jmp	$LN12@ucnv_fromU
$LN6@ucnv_fromU:
; Line 1231
	mov	eax, DWORD PTR _cnv$[ebp]
	movsx	ecx, BYTE PTR [eax+63]
	test	ecx, ecx
	jle	SHORT $LN2@ucnv_fromU
	mov	eax, DWORD PTR _err$[ebp]
	push	eax
	lea	ecx, DWORD PTR _offsets$[ebp]
	push	ecx
	mov	edx, DWORD PTR _targetLimit$[ebp]
	push	edx
	mov	eax, DWORD PTR _target$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cnv$[ebp]
	push	ecx
	call	_ucnv_outputOverflowFromUnicode
	add	esp, 20					; 00000014H
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN2@ucnv_fromU
; Line 1233
	jmp	SHORT $LN12@ucnv_fromU
$LN2@ucnv_fromU:
; Line 1237
	movsx	eax, BYTE PTR _flush$[ebp]
	test	eax, eax
	jne	SHORT $LN1@ucnv_fromU
	mov	eax, DWORD PTR _s$[ebp]
	cmp	eax, DWORD PTR _sourceLimit$[ebp]
	jne	SHORT $LN1@ucnv_fromU
	mov	eax, DWORD PTR _cnv$[ebp]
	movsx	ecx, BYTE PTR [eax+253]
	test	ecx, ecx
	jl	SHORT $LN1@ucnv_fromU
; Line 1239
	jmp	SHORT $LN12@ucnv_fromU
$LN1@ucnv_fromU:
; Line 1251
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	DWORD PTR _args$[ebp+4], eax
; Line 1252
	mov	al, BYTE PTR _flush$[ebp]
	mov	BYTE PTR _args$[ebp+2], al
; Line 1253
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	DWORD PTR _args$[ebp+24], eax
; Line 1254
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR _args$[ebp+8], eax
; Line 1255
	mov	eax, DWORD PTR _sourceLimit$[ebp]
	mov	DWORD PTR _args$[ebp+12], eax
; Line 1256
	mov	eax, DWORD PTR _target$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _args$[ebp+16], ecx
; Line 1257
	mov	eax, DWORD PTR _targetLimit$[ebp]
	mov	DWORD PTR _args$[ebp+20], eax
; Line 1258
	mov	eax, 28					; 0000001cH
	mov	WORD PTR _args$[ebp], ax
; Line 1260
	mov	eax, DWORD PTR _err$[ebp]
	push	eax
	lea	ecx, DWORD PTR _args$[ebp]
	push	ecx
	call	__fromUnicodeWithCallback
	add	esp, 8
; Line 1262
	mov	eax, DWORD PTR _source$[ebp]
	mov	ecx, DWORD PTR _args$[ebp+8]
	mov	DWORD PTR [eax], ecx
; Line 1263
	mov	eax, DWORD PTR _target$[ebp]
	mov	ecx, DWORD PTR _args$[ebp+16]
	mov	DWORD PTR [eax], ecx
$LN12@ucnv_fromU:
; Line 1264
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN18@ucnv_fromU
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 256				; 00000100H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN18@ucnv_fromU:
	DD	1
	DD	$LN17@ucnv_fromU
$LN17@ucnv_fromU:
	DD	-32					; ffffffe0H
	DD	28					; 0000001cH
	DD	$LN16@ucnv_fromU
$LN16@ucnv_fromU:
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	103					; 00000067H
	DB	115					; 00000073H
	DB	0
_ucnv_fromUnicode_56 ENDP
_TEXT	ENDS
PUBLIC	??_C@_1CO@MOCKHAPJ@?$AAc?$AAn?$AAv?$AA?9?$AA?$DO?$AAp?$AAr?$AAe?$AAF?$AAr?$AAo?$AAm?$AAU?$AAL?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$DN?$AA?$DN?$AA0?$AA?$AA@ ; `string'
PUBLIC	??_C@_1DA@OOJEBMON@?$AAr?$AAe?$AAa?$AAl?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?$DN?$AA?$DN?$AA?$CI?$AA?$CI?$AAv?$AAo?$AAi?$AAd?$AA?5?$AA?$CK?$AA?$CJ?$AA0?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1FC@LMGPGLIN@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@ ; `string'
PUBLIC	?__LINE__Var@?1??_fromUnicodeWithCallback@@9@9@997d6c0e ; `_fromUnicodeWithCallback'::`2'::__LINE__Var
PUBLIC	__$ArrayPad$
EXTRN	__imp___wassert:PROC
;	COMDAT ??_C@_1CO@MOCKHAPJ@?$AAc?$AAn?$AAv?$AA?9?$AA?$DO?$AAp?$AAr?$AAe?$AAF?$AAr?$AAo?$AAm?$AAU?$AAL?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$DN?$AA?$DN?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_1CO@MOCKHAPJ@?$AAc?$AAn?$AAv?$AA?9?$AA?$DO?$AAp?$AAr?$AAe?$AAF?$AAr?$AAo?$AAm?$AAU?$AAL?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$DN?$AA?$DN?$AA0?$AA?$AA@ DB 'c'
	DB	00H, 'n', 00H, 'v', 00H, '-', 00H, '>', 00H, 'p', 00H, 'r', 00H
	DB	'e', 00H, 'F', 00H, 'r', 00H, 'o', 00H, 'm', 00H, 'U', 00H, 'L'
	DB	00H, 'e', 00H, 'n', 00H, 'g', 00H, 't', 00H, 'h', 00H, '=', 00H
	DB	'=', 00H, '0', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1DA@OOJEBMON@?$AAr?$AAe?$AAa?$AAl?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?$DN?$AA?$DN?$AA?$CI?$AA?$CI?$AAv?$AAo?$AAi?$AAd?$AA?5?$AA?$CK?$AA?$CJ?$AA0?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DA@OOJEBMON@?$AAr?$AAe?$AAa?$AAl?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?$DN?$AA?$DN?$AA?$CI?$AA?$CI?$AAv?$AAo?$AAi?$AAd?$AA?5?$AA?$CK?$AA?$CJ?$AA0?$AA?$CJ?$AA?$AA@ DB 'r'
	DB	00H, 'e', 00H, 'a', 00H, 'l', 00H, 'S', 00H, 'o', 00H, 'u', 00H
	DB	'r', 00H, 'c', 00H, 'e', 00H, '=', 00H, '=', 00H, '(', 00H, '('
	DB	00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, ' ', 00H, '*', 00H
	DB	')', 00H, '0', 00H, ')', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1FC@LMGPGLIN@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@
CONST	SEGMENT
??_C@_1FC@LMGPGLIN@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@ DB 'd'
	DB	00H, ':', 00H, '\', 00H, 'm', 00H, 'o', 00H, 'z', 00H, 'i', 00H
	DB	'l', 00H, 'l', 00H, 'a', 00H, '\', 00H, 'i', 00H, 'n', 00H, 't'
	DB	00H, 'l', 00H, '\', 00H, 'i', 00H, 'c', 00H, 'u', 00H, '\', 00H
	DB	's', 00H, 'o', 00H, 'u', 00H, 'r', 00H, 'c', 00H, 'e', 00H, '\'
	DB	00H, 'c', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'o', 00H, 'n', 00H
	DB	'\', 00H, 'u', 00H, 'c', 00H, 'n', 00H, 'v', 00H, '.', 00H, 'c'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??_fromUnicodeWithCallback@@9@9@997d6c0e
_DATA	SEGMENT
?__LINE__Var@?1??_fromUnicodeWithCallback@@9@9@997d6c0e DD 0338H ; `_fromUnicodeWithCallback'::`2'::__LINE__Var
; Function compile flags: /Odtp /RTCsu /ZI
_DATA	ENDS
;	COMDAT __fromUnicodeWithCallback
_TEXT	SEGMENT
tv148 = -449						; size = 1
_codePoint$12737 = -252					; size = 4
_length$12731 = -240					; size = 4
_e$12726 = -228						; size = 4
_length$12700 = -216					; size = 4
_realFlush$ = -201					; size = 1
_realSourceIndex$ = -192				; size = 4
_realSourceLimit$ = -180				; size = 4
_realSource$ = -168					; size = 4
_replay$ = -156						; size = 38
_calledCallback$ = -105					; size = 1
_converterSawEndOfInput$ = -93				; size = 1
_errorInputLength$ = -84				; size = 4
_sourceIndex$ = -72					; size = 4
_offsets$ = -60						; size = 4
_t$ = -48						; size = 4
_s$ = -36						; size = 4
_cnv$ = -24						; size = 4
_fromUnicode$ = -12					; size = 4
__$ArrayPad$ = -4					; size = 4
_pArgs$ = 8						; size = 4
_err$ = 12						; size = 4
__fromUnicodeWithCallback PROC				; COMDAT
; Line 824
	push	ebp
	mov	ebp, esp
	sub	esp, 452				; 000001c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-452]
	mov	ecx, 113				; 00000071H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 840
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _cnv$[ebp], ecx
; Line 841
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _s$[ebp], ecx
; Line 842
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _t$[ebp], ecx
; Line 843
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR _offsets$[ebp], ecx
; Line 846
	mov	DWORD PTR _sourceIndex$[ebp], 0
; Line 847
	cmp	DWORD PTR _offsets$[ebp], 0
	jne	SHORT $LN33@fromUnicod
; Line 848
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [edx+32]
	mov	DWORD PTR _fromUnicode$[ebp], eax
; Line 849
	jmp	SHORT $LN32@fromUnicod
$LN33@fromUnicod:
; Line 850
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [edx+36]
	mov	DWORD PTR _fromUnicode$[ebp], eax
; Line 851
	cmp	DWORD PTR _fromUnicode$[ebp], 0
	jne	SHORT $LN32@fromUnicod
; Line 853
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [edx+32]
	mov	DWORD PTR _fromUnicode$[ebp], eax
; Line 855
	mov	DWORD PTR _sourceIndex$[ebp], -1
$LN32@fromUnicod:
; Line 859
	mov	eax, DWORD PTR _cnv$[ebp]
	movsx	ecx, BYTE PTR [eax+253]
	test	ecx, ecx
	jl	SHORT $LN30@fromUnicod
; Line 861
	mov	DWORD PTR _realSource$[ebp], 0
; Line 864
	mov	DWORD PTR _realSourceLimit$[ebp], 0
; Line 865
	mov	BYTE PTR _realFlush$[ebp], 0
; Line 866
	mov	DWORD PTR _realSourceIndex$[ebp], 0
; Line 867
	jmp	$LN28@fromUnicod
$LN30@fromUnicod:
; Line 873
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _realSource$[ebp], ecx
; Line 874
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _realSourceLimit$[ebp], ecx
; Line 875
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	cl, BYTE PTR [eax+2]
	mov	BYTE PTR _realFlush$[ebp], cl
; Line 876
	mov	eax, DWORD PTR _sourceIndex$[ebp]
	mov	DWORD PTR _realSourceIndex$[ebp], eax
; Line 878
	push	1
	mov	eax, DWORD PTR _cnv$[ebp]
	add	eax, 184				; 000000b8H
	push	eax
	call	_uprv_checkValidMemory
	add	esp, 8
	mov	ecx, DWORD PTR _cnv$[ebp]
	movsx	edx, BYTE PTR [ecx+253]
	neg	edx
	shl	edx, 1
	push	edx
	mov	eax, DWORD PTR _cnv$[ebp]
	add	eax, 184				; 000000b8H
	push	eax
	lea	ecx, DWORD PTR _replay$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 879
	mov	eax, DWORD PTR _pArgs$[ebp]
	lea	ecx, DWORD PTR _replay$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 880
	mov	eax, DWORD PTR _cnv$[ebp]
	movsx	ecx, BYTE PTR [eax+253]
	shl	ecx, 1
	lea	edx, DWORD PTR _replay$[ebp]
	sub	edx, ecx
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	DWORD PTR [eax+12], edx
; Line 881
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	BYTE PTR [eax+2], 0
; Line 882
	mov	DWORD PTR _sourceIndex$[ebp], -1
; Line 884
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	BYTE PTR [eax+253], 0
$LN28@fromUnicod:
; Line 900
	mov	eax, DWORD PTR _err$[ebp]
	cmp	DWORD PTR [eax], 0
	jg	SHORT $LN26@fromUnicod
; Line 902
	mov	esi, esp
	mov	eax, DWORD PTR _err$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pArgs$[ebp]
	push	ecx
	call	DWORD PTR _fromUnicode$[ebp]
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 914
	mov	eax, DWORD PTR _err$[ebp]
	cmp	DWORD PTR [eax], 0
	jg	SHORT $LN36@fromUnicod
	mov	ecx, DWORD PTR _pArgs$[ebp]
	movsx	edx, BYTE PTR [ecx+2]
	test	edx, edx
	je	SHORT $LN36@fromUnicod
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR _pArgs$[ebp]
	mov	edx, DWORD PTR [eax+8]
	cmp	edx, DWORD PTR [ecx+12]
	jne	SHORT $LN36@fromUnicod
	mov	eax, DWORD PTR _cnv$[ebp]
	cmp	DWORD PTR [eax+56], 0
	jne	SHORT $LN36@fromUnicod
	mov	BYTE PTR tv148[ebp], 1
	jmp	SHORT $LN37@fromUnicod
$LN36@fromUnicod:
	mov	BYTE PTR tv148[ebp], 0
$LN37@fromUnicod:
	mov	cl, BYTE PTR tv148[ebp]
	mov	BYTE PTR _converterSawEndOfInput$[ebp], cl
; Line 915
	jmp	SHORT $LN25@fromUnicod
$LN26@fromUnicod:
; Line 917
	mov	BYTE PTR _converterSawEndOfInput$[ebp], 0
$LN25@fromUnicod:
; Line 921
	mov	BYTE PTR _calledCallback$[ebp], 0
; Line 924
	mov	DWORD PTR _errorInputLength$[ebp], 0
$LN24@fromUnicod:
; Line 936
	cmp	DWORD PTR _offsets$[ebp], 0
	je	SHORT $LN22@fromUnicod
; Line 937
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	sub	ecx, DWORD PTR _t$[ebp]
	mov	DWORD PTR _length$12700[ebp], ecx
; Line 938
	cmp	DWORD PTR _length$12700[ebp], 0
	jle	SHORT $LN21@fromUnicod
; Line 939
	mov	eax, DWORD PTR _errorInputLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sourceIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _length$12700[ebp]
	push	edx
	mov	eax, DWORD PTR _offsets$[ebp]
	push	eax
	call	__updateOffsets
	add	esp, 16					; 00000010H
; Line 948
	mov	eax, DWORD PTR _length$12700[ebp]
	mov	ecx, DWORD PTR _offsets$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _offsets$[ebp], edx
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR _offsets$[ebp]
	mov	DWORD PTR [eax+24], ecx
$LN21@fromUnicod:
; Line 951
	cmp	DWORD PTR _sourceIndex$[ebp], 0
	jl	SHORT $LN22@fromUnicod
; Line 952
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	sub	ecx, DWORD PTR _s$[ebp]
	sar	ecx, 1
	add	ecx, DWORD PTR _sourceIndex$[ebp]
	mov	DWORD PTR _sourceIndex$[ebp], ecx
$LN22@fromUnicod:
; Line 956
	mov	eax, DWORD PTR _cnv$[ebp]
	movsx	ecx, BYTE PTR [eax+253]
	test	ecx, ecx
	jge	$LN19@fromUnicod
; Line 961
	cmp	DWORD PTR _realSource$[ebp], 0
	jne	$LN18@fromUnicod
; Line 962
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _realSource$[ebp], ecx
; Line 963
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _realSourceLimit$[ebp], ecx
; Line 964
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	cl, BYTE PTR [eax+2]
	mov	BYTE PTR _realFlush$[ebp], cl
; Line 965
	mov	eax, DWORD PTR _sourceIndex$[ebp]
	mov	DWORD PTR _realSourceIndex$[ebp], eax
; Line 967
	push	1
	mov	eax, DWORD PTR _cnv$[ebp]
	add	eax, 184				; 000000b8H
	push	eax
	call	_uprv_checkValidMemory
	add	esp, 8
	mov	ecx, DWORD PTR _cnv$[ebp]
	movsx	edx, BYTE PTR [ecx+253]
	neg	edx
	shl	edx, 1
	push	edx
	mov	eax, DWORD PTR _cnv$[ebp]
	add	eax, 184				; 000000b8H
	push	eax
	lea	ecx, DWORD PTR _replay$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 968
	mov	eax, DWORD PTR _pArgs$[ebp]
	lea	ecx, DWORD PTR _replay$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 969
	mov	eax, DWORD PTR _cnv$[ebp]
	movsx	ecx, BYTE PTR [eax+253]
	shl	ecx, 1
	lea	edx, DWORD PTR _replay$[ebp]
	sub	edx, ecx
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	DWORD PTR [eax+12], edx
; Line 970
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	BYTE PTR [eax+2], 0
; Line 971
	mov	eax, DWORD PTR _cnv$[ebp]
	movsx	ecx, BYTE PTR [eax+253]
	add	ecx, DWORD PTR _sourceIndex$[ebp]
	mov	DWORD PTR _sourceIndex$[ebp], ecx
	jns	SHORT $LN17@fromUnicod
; Line 972
	mov	DWORD PTR _sourceIndex$[ebp], -1
$LN17@fromUnicod:
; Line 975
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	BYTE PTR [eax+253], 0
; Line 976
	jmp	SHORT $LN19@fromUnicod
$LN18@fromUnicod:
; Line 978
	cmp	DWORD PTR _realSource$[ebp], 0
	je	SHORT $LN38@fromUnicod
	mov	eax, DWORD PTR ?__LINE__Var@?1??_fromUnicodeWithCallback@@9@9@997d6c0e
	add	eax, 154				; 0000009aH
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1FC@LMGPGLIN@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@
	push	OFFSET ??_C@_1DA@OOJEBMON@?$AAr?$AAe?$AAa?$AAl?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?$DN?$AA?$DN?$AA?$CI?$AA?$CI?$AAv?$AAo?$AAi?$AAd?$AA?5?$AA?$CK?$AA?$CJ?$AA0?$AA?$CJ?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN38@fromUnicod:
; Line 979
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 5
$LN19@fromUnicod:
; Line 984
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _s$[ebp], ecx
; Line 985
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _t$[ebp], ecx
; Line 987
	mov	eax, DWORD PTR _err$[ebp]
	cmp	DWORD PTR [eax], 0
	jg	$LN15@fromUnicod
; Line 988
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	cmp	ecx, DWORD PTR [eax+12]
	jae	SHORT $LN14@fromUnicod
; Line 993
	jmp	$LN23@fromUnicod
	jmp	$LN15@fromUnicod
$LN14@fromUnicod:
; Line 994
	cmp	DWORD PTR _realSource$[ebp], 0
	je	SHORT $LN12@fromUnicod
; Line 996
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR _realSource$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 997
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR _realSourceLimit$[ebp]
	mov	DWORD PTR [eax+12], ecx
; Line 998
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	cl, BYTE PTR _realFlush$[ebp]
	mov	BYTE PTR [eax+2], cl
; Line 999
	mov	eax, DWORD PTR _realSourceIndex$[ebp]
	mov	DWORD PTR _sourceIndex$[ebp], eax
; Line 1001
	mov	DWORD PTR _realSource$[ebp], 0
; Line 1002
	jmp	$LN23@fromUnicod
	jmp	SHORT $LN15@fromUnicod
$LN12@fromUnicod:
; Line 1003
	mov	eax, DWORD PTR _pArgs$[ebp]
	movsx	ecx, BYTE PTR [eax+2]
	test	ecx, ecx
	je	SHORT $LN10@fromUnicod
	mov	eax, DWORD PTR _cnv$[ebp]
	cmp	DWORD PTR [eax+56], 0
	je	SHORT $LN10@fromUnicod
; Line 1010
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 11			; 0000000bH
; Line 1011
	mov	BYTE PTR _calledCallback$[ebp], 0
; Line 1012
	jmp	SHORT $LN15@fromUnicod
$LN10@fromUnicod:
; Line 1014
	mov	eax, DWORD PTR _pArgs$[ebp]
	movsx	ecx, BYTE PTR [eax+2]
	test	ecx, ecx
	je	SHORT $LN8@fromUnicod
; Line 1022
	movsx	eax, BYTE PTR _converterSawEndOfInput$[ebp]
	test	eax, eax
	jne	SHORT $LN7@fromUnicod
; Line 1023
	jmp	$LN23@fromUnicod
$LN7@fromUnicod:
; Line 1027
	push	0
	push	2
	mov	eax, DWORD PTR _cnv$[ebp]
	push	eax
	call	__reset
	add	esp, 12					; 0000000cH
$LN8@fromUnicod:
; Line 1031
	jmp	$LN34@fromUnicod
$LN15@fromUnicod:
; Line 1044
	movsx	eax, BYTE PTR _calledCallback$[ebp]
	test	eax, eax
	jne	SHORT $LN5@fromUnicod
	mov	eax, DWORD PTR _err$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _e$12726[ebp], ecx
	cmp	DWORD PTR _e$12726[ebp], 15		; 0000000fH
	je	SHORT $LN5@fromUnicod
	cmp	DWORD PTR _e$12726[ebp], 10		; 0000000aH
	je	$LN6@fromUnicod
	cmp	DWORD PTR _e$12726[ebp], 12		; 0000000cH
	je	$LN6@fromUnicod
	cmp	DWORD PTR _e$12726[ebp], 11		; 0000000bH
	je	$LN6@fromUnicod
$LN5@fromUnicod:
; Line 1057
	cmp	DWORD PTR _realSource$[ebp], 0
	je	$LN4@fromUnicod
; Line 1060
	mov	eax, DWORD PTR _cnv$[ebp]
	movsx	ecx, BYTE PTR [eax+253]
	test	ecx, ecx
	je	SHORT $LN39@fromUnicod
	mov	edx, DWORD PTR ?__LINE__Var@?1??_fromUnicodeWithCallback@@9@9@997d6c0e
	add	edx, 236				; 000000ecH
	mov	esi, esp
	push	edx
	push	OFFSET ??_C@_1FC@LMGPGLIN@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@
	push	OFFSET ??_C@_1CO@MOCKHAPJ@?$AAc?$AAn?$AAv?$AA?9?$AA?$DO?$AAp?$AAr?$AAe?$AAF?$AAr?$AAo?$AAm?$AAU?$AAL?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$DN?$AA?$DN?$AA0?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN39@fromUnicod:
; Line 1062
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR _pArgs$[ebp]
	mov	edx, DWORD PTR [eax+12]
	sub	edx, DWORD PTR [ecx+8]
	sar	edx, 1
	mov	DWORD PTR _length$12731[ebp], edx
; Line 1063
	cmp	DWORD PTR _length$12731[ebp], 0
	jle	SHORT $LN3@fromUnicod
; Line 1064
	push	1
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_uprv_checkValidMemory
	add	esp, 8
	mov	edx, DWORD PTR _length$12731[ebp]
	shl	edx, 1
	push	edx
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _cnv$[ebp]
	add	edx, 184				; 000000b8H
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 1065
	mov	eax, DWORD PTR _length$12731[ebp]
	neg	eax
	mov	ecx, DWORD PTR _cnv$[ebp]
	mov	BYTE PTR [ecx+253], al
$LN3@fromUnicod:
; Line 1068
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR _realSource$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 1069
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR _realSourceLimit$[ebp]
	mov	DWORD PTR [eax+12], ecx
; Line 1070
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	cl, BYTE PTR _realFlush$[ebp]
	mov	BYTE PTR [eax+2], cl
$LN4@fromUnicod:
; Line 1073
	jmp	$LN34@fromUnicod
$LN6@fromUnicod:
; Line 1082
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	DWORD PTR _codePoint$12737[ebp], ecx
; Line 1083
	mov	DWORD PTR _errorInputLength$[ebp], 0
; Line 1084
	cmp	DWORD PTR _codePoint$12737[ebp], 65535	; 0000ffffH
	ja	SHORT $LN2@fromUnicod
	mov	eax, DWORD PTR _errorInputLength$[ebp]
	mov	ecx, DWORD PTR _cnv$[ebp]
	mov	dx, WORD PTR _codePoint$12737[ebp]
	mov	WORD PTR [ecx+eax*2+112], dx
	mov	eax, DWORD PTR _errorInputLength$[ebp]
	add	eax, 1
	mov	DWORD PTR _errorInputLength$[ebp], eax
	jmp	SHORT $LN1@fromUnicod
$LN2@fromUnicod:
	mov	eax, DWORD PTR _codePoint$12737[ebp]
	sar	eax, 10					; 0000000aH
	add	eax, 55232				; 0000d7c0H
	mov	ecx, DWORD PTR _errorInputLength$[ebp]
	mov	edx, DWORD PTR _cnv$[ebp]
	mov	WORD PTR [edx+ecx*2+112], ax
	mov	eax, DWORD PTR _errorInputLength$[ebp]
	add	eax, 1
	mov	DWORD PTR _errorInputLength$[ebp], eax
	mov	eax, DWORD PTR _codePoint$12737[ebp]
	and	eax, 1023				; 000003ffH
	or	eax, 56320				; 0000dc00H
	mov	ecx, DWORD PTR _errorInputLength$[ebp]
	mov	edx, DWORD PTR _cnv$[ebp]
	mov	WORD PTR [edx+ecx*2+112], ax
	mov	eax, DWORD PTR _errorInputLength$[ebp]
	add	eax, 1
	mov	DWORD PTR _errorInputLength$[ebp], eax
$LN1@fromUnicod:
; Line 1085
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	cl, BYTE PTR _errorInputLength$[ebp]
	mov	BYTE PTR [eax+64], cl
; Line 1088
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	DWORD PTR [eax+56], 0
; Line 1094
	mov	esi, esp
	mov	eax, DWORD PTR _err$[ebp]
	push	eax
	mov	ecx, DWORD PTR _err$[ebp]
	xor	edx, edx
	cmp	DWORD PTR [ecx], 10			; 0000000aH
	setne	dl
	push	edx
	mov	eax, DWORD PTR _codePoint$12737[ebp]
	push	eax
	mov	ecx, DWORD PTR _errorInputLength$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cnv$[ebp]
	add	edx, 112				; 00000070H
	push	edx
	mov	eax, DWORD PTR _pArgs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cnv$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	ecx
	add	esp, 28					; 0000001cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1104
	mov	BYTE PTR _calledCallback$[ebp], 1
; Line 1105
	jmp	$LN24@fromUnicod
$LN23@fromUnicod:
; Line 1106
	jmp	$LN28@fromUnicod
$LN34@fromUnicod:
; Line 1107
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN42@fromUnicod
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 452				; 000001c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN42@fromUnicod:
	DD	1
	DD	$LN41@fromUnicod
$LN41@fromUnicod:
	DD	-156					; ffffff64H
	DD	38					; 00000026H
	DD	$LN40@fromUnicod
$LN40@fromUnicod:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	112					; 00000070H
	DB	108					; 0000006cH
	DB	97					; 00000061H
	DB	121					; 00000079H
	DB	0
__fromUnicodeWithCallback ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __updateOffsets
_TEXT	SEGMENT
_offset$ = -32						; size = 4
_delta$ = -20						; size = 4
_limit$ = -8						; size = 4
_offsets$ = 8						; size = 4
_length$ = 12						; size = 4
_sourceIndex$ = 16					; size = 4
_errorInputLength$ = 20					; size = 4
__updateOffsets PROC					; COMDAT
; Line 756
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 760
	cmp	DWORD PTR _sourceIndex$[ebp], 0
	jl	SHORT $LN11@updateOffs
; Line 766
	mov	eax, DWORD PTR _sourceIndex$[ebp]
	sub	eax, DWORD PTR _errorInputLength$[ebp]
	mov	DWORD PTR _delta$[ebp], eax
; Line 767
	jmp	SHORT $LN10@updateOffs
$LN11@updateOffs:
; Line 772
	mov	DWORD PTR _delta$[ebp], -1
$LN10@updateOffs:
; Line 775
	mov	eax, DWORD PTR _length$[ebp]
	mov	ecx, DWORD PTR _offsets$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _limit$[ebp], edx
; Line 776
	cmp	DWORD PTR _delta$[ebp], 0
	jne	SHORT $LN9@updateOffs
	jmp	SHORT $LN12@updateOffs
$LN9@updateOffs:
; Line 778
	cmp	DWORD PTR _delta$[ebp], 0
	jle	SHORT $LN2@updateOffs
$LN6@updateOffs:
; Line 780
	mov	eax, DWORD PTR _offsets$[ebp]
	cmp	eax, DWORD PTR _limit$[ebp]
	jae	SHORT $LN5@updateOffs
; Line 781
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _offset$[ebp], ecx
; Line 782
	cmp	DWORD PTR _offset$[ebp], 0
	jl	SHORT $LN4@updateOffs
; Line 783
	mov	eax, DWORD PTR _offset$[ebp]
	add	eax, DWORD PTR _delta$[ebp]
	mov	ecx, DWORD PTR _offsets$[ebp]
	mov	DWORD PTR [ecx], eax
$LN4@updateOffs:
; Line 785
	mov	eax, DWORD PTR _offsets$[ebp]
	add	eax, 4
	mov	DWORD PTR _offsets$[ebp], eax
; Line 786
	jmp	SHORT $LN6@updateOffs
$LN5@updateOffs:
; Line 787
	jmp	SHORT $LN12@updateOffs
$LN2@updateOffs:
; Line 793
	mov	eax, DWORD PTR _offsets$[ebp]
	cmp	eax, DWORD PTR _limit$[ebp]
	jae	SHORT $LN12@updateOffs
; Line 794
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	DWORD PTR [eax], -1
	mov	ecx, DWORD PTR _offsets$[ebp]
	add	ecx, 4
	mov	DWORD PTR _offsets$[ebp], ecx
; Line 795
	jmp	SHORT $LN2@updateOffs
$LN12@updateOffs:
; Line 797
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
__updateOffsets ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _ucnv_outputOverflowFromUnicode
_TEXT	SEGMENT
_j$12771 = -68						; size = 4
_length$ = -56						; size = 4
_i$ = -44						; size = 4
_t$ = -32						; size = 4
_overflow$ = -20					; size = 4
_offsets$ = -8						; size = 4
_cnv$ = 8						; size = 4
_target$ = 12						; size = 4
_targetLimit$ = 16					; size = 4
_pOffsets$ = 20						; size = 4
_err$ = 24						; size = 4
_ucnv_outputOverflowFromUnicode PROC			; COMDAT
; Line 1118
	push	ebp
	mov	ebp, esp
	sub	esp, 264				; 00000108H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-264]
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1123
	mov	eax, DWORD PTR _target$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _t$[ebp], ecx
; Line 1124
	cmp	DWORD PTR _pOffsets$[ebp], 0
	je	SHORT $LN11@ucnv_outpu
; Line 1125
	mov	eax, DWORD PTR _pOffsets$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _offsets$[ebp], ecx
; Line 1126
	jmp	SHORT $LN10@ucnv_outpu
$LN11@ucnv_outpu:
; Line 1127
	mov	DWORD PTR _offsets$[ebp], 0
$LN10@ucnv_outpu:
; Line 1130
	mov	eax, DWORD PTR _cnv$[ebp]
	add	eax, 76					; 0000004cH
	mov	DWORD PTR _overflow$[ebp], eax
; Line 1131
	mov	eax, DWORD PTR _cnv$[ebp]
	movsx	ecx, BYTE PTR [eax+63]
	mov	DWORD PTR _length$[ebp], ecx
; Line 1132
	mov	DWORD PTR _i$[ebp], 0
$LN9@ucnv_outpu:
; Line 1133
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _length$[ebp]
	jge	$LN8@ucnv_outpu
; Line 1134
	mov	eax, DWORD PTR _t$[ebp]
	cmp	eax, DWORD PTR _targetLimit$[ebp]
	jne	SHORT $LN7@ucnv_outpu
; Line 1136
	mov	DWORD PTR _j$12771[ebp], 0
$LN6@ucnv_outpu:
; Line 1139
	mov	eax, DWORD PTR _overflow$[ebp]
	add	eax, DWORD PTR _j$12771[ebp]
	mov	ecx, DWORD PTR _overflow$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl
	mov	eax, DWORD PTR _j$12771[ebp]
	add	eax, 1
	mov	DWORD PTR _j$12771[ebp], eax
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
; Line 1140
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _length$[ebp]
	jl	SHORT $LN6@ucnv_outpu
; Line 1142
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	cl, BYTE PTR _j$12771[ebp]
	mov	BYTE PTR [eax+63], cl
; Line 1143
	mov	eax, DWORD PTR _target$[ebp]
	mov	ecx, DWORD PTR _t$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 1144
	cmp	DWORD PTR _offsets$[ebp], 0
	je	SHORT $LN3@ucnv_outpu
; Line 1145
	mov	eax, DWORD PTR _pOffsets$[ebp]
	mov	ecx, DWORD PTR _offsets$[ebp]
	mov	DWORD PTR [eax], ecx
$LN3@ucnv_outpu:
; Line 1147
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
; Line 1148
	mov	al, 1
	jmp	SHORT $LN12@ucnv_outpu
$LN7@ucnv_outpu:
; Line 1152
	mov	eax, DWORD PTR _overflow$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _t$[ebp]
	mov	dl, BYTE PTR [eax]
	mov	BYTE PTR [ecx], dl
	mov	eax, DWORD PTR _t$[ebp]
	add	eax, 1
	mov	DWORD PTR _t$[ebp], eax
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
; Line 1153
	cmp	DWORD PTR _offsets$[ebp], 0
	je	SHORT $LN2@ucnv_outpu
; Line 1154
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	DWORD PTR [eax], -1
	mov	ecx, DWORD PTR _offsets$[ebp]
	add	ecx, 4
	mov	DWORD PTR _offsets$[ebp], ecx
$LN2@ucnv_outpu:
; Line 1156
	jmp	$LN9@ucnv_outpu
$LN8@ucnv_outpu:
; Line 1159
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	BYTE PTR [eax+63], 0
; Line 1160
	mov	eax, DWORD PTR _target$[ebp]
	mov	ecx, DWORD PTR _t$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 1161
	cmp	DWORD PTR _offsets$[ebp], 0
	je	SHORT $LN1@ucnv_outpu
; Line 1162
	mov	eax, DWORD PTR _pOffsets$[ebp]
	mov	ecx, DWORD PTR _offsets$[ebp]
	mov	DWORD PTR [eax], ecx
$LN1@ucnv_outpu:
; Line 1164
	xor	al, al
$LN12@ucnv_outpu:
; Line 1165
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_ucnv_outputOverflowFromUnicode ENDP
_TEXT	ENDS
PUBLIC	_ucnv_toUnicode_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _ucnv_toUnicode_56
_TEXT	SEGMENT
tv72 = -256						; size = 4
_t$ = -56						; size = 4
_s$ = -44						; size = 4
_args$ = -32						; size = 28
_cnv$ = 8						; size = 4
_target$ = 12						; size = 4
_targetLimit$ = 16					; size = 4
_source$ = 20						; size = 4
_sourceLimit$ = 24					; size = 4
_offsets$ = 28						; size = 4
_flush$ = 32						; size = 1
_err$ = 36						; size = 4
_ucnv_toUnicode_56 PROC					; COMDAT
; Line 1619
	push	ebp
	mov	ebp, esp
	sub	esp, 256				; 00000100H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-256]
	mov	ecx, 64					; 00000040H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1625
	cmp	DWORD PTR _err$[ebp], 0
	je	SHORT $LN10@ucnv_toUni
	mov	eax, DWORD PTR _err$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN11@ucnv_toUni
$LN10@ucnv_toUni:
; Line 1626
	jmp	$LN12@ucnv_toUni
$LN11@ucnv_toUni:
; Line 1629
	cmp	DWORD PTR _cnv$[ebp], 0
	je	SHORT $LN8@ucnv_toUni
	cmp	DWORD PTR _target$[ebp], 0
	je	SHORT $LN8@ucnv_toUni
	cmp	DWORD PTR _source$[ebp], 0
	jne	SHORT $LN9@ucnv_toUni
$LN8@ucnv_toUni:
; Line 1630
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 1
; Line 1631
	jmp	$LN12@ucnv_toUni
$LN9@ucnv_toUni:
; Line 1634
	mov	eax, DWORD PTR _source$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _s$[ebp], ecx
; Line 1635
	mov	eax, DWORD PTR _target$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _t$[ebp], ecx
; Line 1637
	mov	eax, DWORD PTR _targetLimit$[ebp]
	add	eax, 2147483647				; 7fffffffH
	cmp	eax, DWORD PTR _targetLimit$[ebp]
	jbe	SHORT $LN14@ucnv_toUni
	mov	ecx, DWORD PTR _targetLimit$[ebp]
	add	ecx, 2147483647				; 7fffffffH
	mov	DWORD PTR tv72[ebp], ecx
	jmp	SHORT $LN15@ucnv_toUni
$LN14@ucnv_toUni:
	mov	DWORD PTR tv72[ebp], -1
$LN15@ucnv_toUni:
	mov	edx, DWORD PTR tv72[ebp]
	cmp	edx, DWORD PTR _targetLimit$[ebp]
	jne	SHORT $LN7@ucnv_toUni
; Line 1643
	mov	eax, DWORD PTR _targetLimit$[ebp]
	sub	eax, 1
	mov	DWORD PTR _targetLimit$[ebp], eax
$LN7@ucnv_toUni:
; Line 1669
	mov	eax, DWORD PTR _sourceLimit$[ebp]
	cmp	eax, DWORD PTR _s$[ebp]
	jb	SHORT $LN5@ucnv_toUni
	mov	eax, DWORD PTR _targetLimit$[ebp]
	cmp	eax, DWORD PTR _t$[ebp]
	jb	SHORT $LN5@ucnv_toUni
	mov	eax, DWORD PTR _sourceLimit$[ebp]
	sub	eax, DWORD PTR _s$[ebp]
	cmp	eax, 2147483647				; 7fffffffH
	jbe	SHORT $LN4@ucnv_toUni
	mov	eax, DWORD PTR _sourceLimit$[ebp]
	cmp	eax, DWORD PTR _s$[ebp]
	ja	SHORT $LN5@ucnv_toUni
$LN4@ucnv_toUni:
	mov	eax, DWORD PTR _targetLimit$[ebp]
	sub	eax, DWORD PTR _t$[ebp]
	sar	eax, 1
	cmp	eax, 1073741823				; 3fffffffH
	jbe	SHORT $LN3@ucnv_toUni
	mov	eax, DWORD PTR _targetLimit$[ebp]
	cmp	eax, DWORD PTR _t$[ebp]
	ja	SHORT $LN5@ucnv_toUni
$LN3@ucnv_toUni:
	mov	eax, DWORD PTR _targetLimit$[ebp]
	sub	eax, DWORD PTR _t$[ebp]
	and	eax, 1
	je	SHORT $LN6@ucnv_toUni
$LN5@ucnv_toUni:
; Line 1670
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 1
; Line 1671
	jmp	$LN12@ucnv_toUni
$LN6@ucnv_toUni:
; Line 1677
	mov	eax, DWORD PTR _cnv$[ebp]
	movsx	ecx, BYTE PTR [eax+65]
	test	ecx, ecx
	jle	SHORT $LN2@ucnv_toUni
	mov	eax, DWORD PTR _err$[ebp]
	push	eax
	lea	ecx, DWORD PTR _offsets$[ebp]
	push	ecx
	mov	edx, DWORD PTR _targetLimit$[ebp]
	push	edx
	mov	eax, DWORD PTR _target$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cnv$[ebp]
	push	ecx
	call	_ucnv_outputOverflowToUnicode
	add	esp, 20					; 00000014H
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN2@ucnv_toUni
; Line 1679
	jmp	SHORT $LN12@ucnv_toUni
$LN2@ucnv_toUni:
; Line 1683
	movsx	eax, BYTE PTR _flush$[ebp]
	test	eax, eax
	jne	SHORT $LN1@ucnv_toUni
	mov	eax, DWORD PTR _s$[ebp]
	cmp	eax, DWORD PTR _sourceLimit$[ebp]
	jne	SHORT $LN1@ucnv_toUni
	mov	eax, DWORD PTR _cnv$[ebp]
	movsx	ecx, BYTE PTR [eax+254]
	test	ecx, ecx
	jl	SHORT $LN1@ucnv_toUni
; Line 1685
	jmp	SHORT $LN12@ucnv_toUni
$LN1@ucnv_toUni:
; Line 1697
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	DWORD PTR _args$[ebp+4], eax
; Line 1698
	mov	al, BYTE PTR _flush$[ebp]
	mov	BYTE PTR _args$[ebp+2], al
; Line 1699
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	DWORD PTR _args$[ebp+24], eax
; Line 1700
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR _args$[ebp+8], eax
; Line 1701
	mov	eax, DWORD PTR _sourceLimit$[ebp]
	mov	DWORD PTR _args$[ebp+12], eax
; Line 1702
	mov	eax, DWORD PTR _target$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _args$[ebp+16], ecx
; Line 1703
	mov	eax, DWORD PTR _targetLimit$[ebp]
	mov	DWORD PTR _args$[ebp+20], eax
; Line 1704
	mov	eax, 28					; 0000001cH
	mov	WORD PTR _args$[ebp], ax
; Line 1706
	mov	eax, DWORD PTR _err$[ebp]
	push	eax
	lea	ecx, DWORD PTR _args$[ebp]
	push	ecx
	call	__toUnicodeWithCallback
	add	esp, 8
; Line 1708
	mov	eax, DWORD PTR _source$[ebp]
	mov	ecx, DWORD PTR _args$[ebp+8]
	mov	DWORD PTR [eax], ecx
; Line 1709
	mov	eax, DWORD PTR _target$[ebp]
	mov	ecx, DWORD PTR _args$[ebp+16]
	mov	DWORD PTR [eax], ecx
$LN12@ucnv_toUni:
; Line 1710
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN18@ucnv_toUni
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 256				; 00000100H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN18@ucnv_toUni:
	DD	1
	DD	$LN17@ucnv_toUni
$LN17@ucnv_toUni:
	DD	-32					; ffffffe0H
	DD	28					; 0000001cH
	DD	$LN16@ucnv_toUni
$LN16@ucnv_toUni:
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	103					; 00000067H
	DB	115					; 00000073H
	DB	0
_ucnv_toUnicode_56 ENDP
_TEXT	ENDS
PUBLIC	??_C@_1CK@JEEADFHD@?$AAc?$AAn?$AAv?$AA?9?$AA?$DO?$AAp?$AAr?$AAe?$AAT?$AAo?$AAU?$AAL?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$DN?$AA?$DN?$AA0?$AA?$AA@ ; `string'
PUBLIC	?__LINE__Var@?1??_toUnicodeWithCallback@@9@9@997d6c0e ; `_toUnicodeWithCallback'::`2'::__LINE__Var
PUBLIC	__$ArrayPad$
;	COMDAT ??_C@_1CK@JEEADFHD@?$AAc?$AAn?$AAv?$AA?9?$AA?$DO?$AAp?$AAr?$AAe?$AAT?$AAo?$AAU?$AAL?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$DN?$AA?$DN?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_1CK@JEEADFHD@?$AAc?$AAn?$AAv?$AA?9?$AA?$DO?$AAp?$AAr?$AAe?$AAT?$AAo?$AAU?$AAL?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$DN?$AA?$DN?$AA0?$AA?$AA@ DB 'c'
	DB	00H, 'n', 00H, 'v', 00H, '-', 00H, '>', 00H, 'p', 00H, 'r', 00H
	DB	'e', 00H, 'T', 00H, 'o', 00H, 'U', 00H, 'L', 00H, 'e', 00H, 'n'
	DB	00H, 'g', 00H, 't', 00H, 'h', 00H, '=', 00H, '=', 00H, '0', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??_toUnicodeWithCallback@@9@9@997d6c0e
_DATA	SEGMENT
?__LINE__Var@?1??_toUnicodeWithCallback@@9@9@997d6c0e DD 04f5H ; `_toUnicodeWithCallback'::`2'::__LINE__Var
; Function compile flags: /Odtp /RTCsu /ZI
_DATA	ENDS
;	COMDAT __toUnicodeWithCallback
_TEXT	SEGMENT
tv147 = -429						; size = 1
_length$12901 = -232					; size = 4
_e$12896 = -220						; size = 4
_length$12872 = -208					; size = 4
_realFlush$ = -193					; size = 1
_realSourceIndex$ = -184				; size = 4
_realSourceLimit$ = -172				; size = 4
_realSource$ = -160					; size = 4
_replay$ = -148						; size = 31
_calledCallback$ = -105					; size = 1
_converterSawEndOfInput$ = -93				; size = 1
_errorInputLength$ = -84				; size = 4
_sourceIndex$ = -72					; size = 4
_offsets$ = -60						; size = 4
_t$ = -48						; size = 4
_s$ = -36						; size = 4
_cnv$ = -24						; size = 4
_toUnicode$ = -12					; size = 4
__$ArrayPad$ = -4					; size = 4
_pArgs$ = 8						; size = 4
_err$ = 12						; size = 4
__toUnicodeWithCallback PROC				; COMDAT
; Line 1269
	push	ebp
	mov	ebp, esp
	sub	esp, 432				; 000001b0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-432]
	mov	ecx, 108				; 0000006cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 1285
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _cnv$[ebp], ecx
; Line 1286
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _s$[ebp], ecx
; Line 1287
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _t$[ebp], ecx
; Line 1288
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR _offsets$[ebp], ecx
; Line 1291
	mov	DWORD PTR _sourceIndex$[ebp], 0
; Line 1292
	cmp	DWORD PTR _offsets$[ebp], 0
	jne	SHORT $LN33@toUnicodeW
; Line 1293
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [edx+24]
	mov	DWORD PTR _toUnicode$[ebp], eax
; Line 1294
	jmp	SHORT $LN32@toUnicodeW
$LN33@toUnicodeW:
; Line 1295
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [edx+28]
	mov	DWORD PTR _toUnicode$[ebp], eax
; Line 1296
	cmp	DWORD PTR _toUnicode$[ebp], 0
	jne	SHORT $LN32@toUnicodeW
; Line 1298
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [edx+24]
	mov	DWORD PTR _toUnicode$[ebp], eax
; Line 1300
	mov	DWORD PTR _sourceIndex$[ebp], -1
$LN32@toUnicodeW:
; Line 1304
	mov	eax, DWORD PTR _cnv$[ebp]
	movsx	ecx, BYTE PTR [eax+254]
	test	ecx, ecx
	jl	SHORT $LN30@toUnicodeW
; Line 1306
	mov	DWORD PTR _realSource$[ebp], 0
; Line 1309
	mov	DWORD PTR _realSourceLimit$[ebp], 0
; Line 1310
	mov	BYTE PTR _realFlush$[ebp], 0
; Line 1311
	mov	DWORD PTR _realSourceIndex$[ebp], 0
; Line 1312
	jmp	$LN28@toUnicodeW
$LN30@toUnicodeW:
; Line 1318
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _realSource$[ebp], ecx
; Line 1319
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _realSourceLimit$[ebp], ecx
; Line 1320
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	cl, BYTE PTR [eax+2]
	mov	BYTE PTR _realFlush$[ebp], cl
; Line 1321
	mov	eax, DWORD PTR _sourceIndex$[ebp]
	mov	DWORD PTR _realSourceIndex$[ebp], eax
; Line 1323
	push	1
	mov	eax, DWORD PTR _cnv$[ebp]
	add	eax, 222				; 000000deH
	push	eax
	call	_uprv_checkValidMemory
	add	esp, 8
	mov	ecx, DWORD PTR _cnv$[ebp]
	movsx	edx, BYTE PTR [ecx+254]
	neg	edx
	push	edx
	mov	eax, DWORD PTR _cnv$[ebp]
	add	eax, 222				; 000000deH
	push	eax
	lea	ecx, DWORD PTR _replay$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 1324
	mov	eax, DWORD PTR _pArgs$[ebp]
	lea	ecx, DWORD PTR _replay$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 1325
	mov	eax, DWORD PTR _cnv$[ebp]
	movsx	ecx, BYTE PTR [eax+254]
	lea	edx, DWORD PTR _replay$[ebp]
	sub	edx, ecx
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	DWORD PTR [eax+12], edx
; Line 1326
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	BYTE PTR [eax+2], 0
; Line 1327
	mov	DWORD PTR _sourceIndex$[ebp], -1
; Line 1329
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	BYTE PTR [eax+254], 0
$LN28@toUnicodeW:
; Line 1345
	mov	eax, DWORD PTR _err$[ebp]
	cmp	DWORD PTR [eax], 0
	jg	SHORT $LN26@toUnicodeW
; Line 1347
	mov	esi, esp
	mov	eax, DWORD PTR _err$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pArgs$[ebp]
	push	ecx
	call	DWORD PTR _toUnicode$[ebp]
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1359
	mov	eax, DWORD PTR _err$[ebp]
	cmp	DWORD PTR [eax], 0
	jg	SHORT $LN36@toUnicodeW
	mov	ecx, DWORD PTR _pArgs$[ebp]
	movsx	edx, BYTE PTR [ecx+2]
	test	edx, edx
	je	SHORT $LN36@toUnicodeW
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR _pArgs$[ebp]
	mov	edx, DWORD PTR [eax+8]
	cmp	edx, DWORD PTR [ecx+12]
	jne	SHORT $LN36@toUnicodeW
	mov	eax, DWORD PTR _cnv$[ebp]
	movsx	ecx, BYTE PTR [eax+36]
	test	ecx, ecx
	jne	SHORT $LN36@toUnicodeW
	mov	BYTE PTR tv147[ebp], 1
	jmp	SHORT $LN37@toUnicodeW
$LN36@toUnicodeW:
	mov	BYTE PTR tv147[ebp], 0
$LN37@toUnicodeW:
	mov	dl, BYTE PTR tv147[ebp]
	mov	BYTE PTR _converterSawEndOfInput$[ebp], dl
; Line 1360
	jmp	SHORT $LN25@toUnicodeW
$LN26@toUnicodeW:
; Line 1362
	mov	BYTE PTR _converterSawEndOfInput$[ebp], 0
$LN25@toUnicodeW:
; Line 1366
	mov	BYTE PTR _calledCallback$[ebp], 0
; Line 1369
	mov	DWORD PTR _errorInputLength$[ebp], 0
$LN24@toUnicodeW:
; Line 1381
	cmp	DWORD PTR _offsets$[ebp], 0
	je	SHORT $LN22@toUnicodeW
; Line 1382
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	sub	ecx, DWORD PTR _t$[ebp]
	sar	ecx, 1
	mov	DWORD PTR _length$12872[ebp], ecx
; Line 1383
	cmp	DWORD PTR _length$12872[ebp], 0
	jle	SHORT $LN21@toUnicodeW
; Line 1384
	mov	eax, DWORD PTR _errorInputLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sourceIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _length$12872[ebp]
	push	edx
	mov	eax, DWORD PTR _offsets$[ebp]
	push	eax
	call	__updateOffsets
	add	esp, 16					; 00000010H
; Line 1393
	mov	eax, DWORD PTR _length$12872[ebp]
	mov	ecx, DWORD PTR _offsets$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _offsets$[ebp], edx
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR _offsets$[ebp]
	mov	DWORD PTR [eax+24], ecx
$LN21@toUnicodeW:
; Line 1396
	cmp	DWORD PTR _sourceIndex$[ebp], 0
	jl	SHORT $LN22@toUnicodeW
; Line 1397
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	sub	ecx, DWORD PTR _s$[ebp]
	add	ecx, DWORD PTR _sourceIndex$[ebp]
	mov	DWORD PTR _sourceIndex$[ebp], ecx
$LN22@toUnicodeW:
; Line 1401
	mov	eax, DWORD PTR _cnv$[ebp]
	movsx	ecx, BYTE PTR [eax+254]
	test	ecx, ecx
	jge	$LN19@toUnicodeW
; Line 1406
	cmp	DWORD PTR _realSource$[ebp], 0
	jne	$LN18@toUnicodeW
; Line 1407
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _realSource$[ebp], ecx
; Line 1408
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _realSourceLimit$[ebp], ecx
; Line 1409
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	cl, BYTE PTR [eax+2]
	mov	BYTE PTR _realFlush$[ebp], cl
; Line 1410
	mov	eax, DWORD PTR _sourceIndex$[ebp]
	mov	DWORD PTR _realSourceIndex$[ebp], eax
; Line 1412
	push	1
	mov	eax, DWORD PTR _cnv$[ebp]
	add	eax, 222				; 000000deH
	push	eax
	call	_uprv_checkValidMemory
	add	esp, 8
	mov	ecx, DWORD PTR _cnv$[ebp]
	movsx	edx, BYTE PTR [ecx+254]
	neg	edx
	push	edx
	mov	eax, DWORD PTR _cnv$[ebp]
	add	eax, 222				; 000000deH
	push	eax
	lea	ecx, DWORD PTR _replay$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 1413
	mov	eax, DWORD PTR _pArgs$[ebp]
	lea	ecx, DWORD PTR _replay$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 1414
	mov	eax, DWORD PTR _cnv$[ebp]
	movsx	ecx, BYTE PTR [eax+254]
	lea	edx, DWORD PTR _replay$[ebp]
	sub	edx, ecx
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	DWORD PTR [eax+12], edx
; Line 1415
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	BYTE PTR [eax+2], 0
; Line 1416
	mov	eax, DWORD PTR _cnv$[ebp]
	movsx	ecx, BYTE PTR [eax+254]
	add	ecx, DWORD PTR _sourceIndex$[ebp]
	mov	DWORD PTR _sourceIndex$[ebp], ecx
	jns	SHORT $LN17@toUnicodeW
; Line 1417
	mov	DWORD PTR _sourceIndex$[ebp], -1
$LN17@toUnicodeW:
; Line 1420
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	BYTE PTR [eax+254], 0
; Line 1421
	jmp	SHORT $LN19@toUnicodeW
$LN18@toUnicodeW:
; Line 1423
	cmp	DWORD PTR _realSource$[ebp], 0
	je	SHORT $LN38@toUnicodeW
	mov	eax, DWORD PTR ?__LINE__Var@?1??_toUnicodeWithCallback@@9@9@997d6c0e
	add	eax, 154				; 0000009aH
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1FC@LMGPGLIN@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@
	push	OFFSET ??_C@_1DA@OOJEBMON@?$AAr?$AAe?$AAa?$AAl?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?$DN?$AA?$DN?$AA?$CI?$AA?$CI?$AAv?$AAo?$AAi?$AAd?$AA?5?$AA?$CK?$AA?$CJ?$AA0?$AA?$CJ?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN38@toUnicodeW:
; Line 1424
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 5
$LN19@toUnicodeW:
; Line 1429
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _s$[ebp], ecx
; Line 1430
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _t$[ebp], ecx
; Line 1432
	mov	eax, DWORD PTR _err$[ebp]
	cmp	DWORD PTR [eax], 0
	jg	$LN15@toUnicodeW
; Line 1433
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	cmp	ecx, DWORD PTR [eax+12]
	jae	SHORT $LN14@toUnicodeW
; Line 1438
	jmp	$LN23@toUnicodeW
	jmp	$LN15@toUnicodeW
$LN14@toUnicodeW:
; Line 1439
	cmp	DWORD PTR _realSource$[ebp], 0
	je	SHORT $LN12@toUnicodeW
; Line 1441
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR _realSource$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 1442
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR _realSourceLimit$[ebp]
	mov	DWORD PTR [eax+12], ecx
; Line 1443
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	cl, BYTE PTR _realFlush$[ebp]
	mov	BYTE PTR [eax+2], cl
; Line 1444
	mov	eax, DWORD PTR _realSourceIndex$[ebp]
	mov	DWORD PTR _sourceIndex$[ebp], eax
; Line 1446
	mov	DWORD PTR _realSource$[ebp], 0
; Line 1447
	jmp	$LN23@toUnicodeW
	jmp	SHORT $LN15@toUnicodeW
$LN12@toUnicodeW:
; Line 1448
	mov	eax, DWORD PTR _pArgs$[ebp]
	movsx	ecx, BYTE PTR [eax+2]
	test	ecx, ecx
	je	SHORT $LN10@toUnicodeW
	mov	eax, DWORD PTR _cnv$[ebp]
	movsx	ecx, BYTE PTR [eax+36]
	test	ecx, ecx
	jle	SHORT $LN10@toUnicodeW
; Line 1455
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 11			; 0000000bH
; Line 1456
	mov	BYTE PTR _calledCallback$[ebp], 0
; Line 1457
	jmp	SHORT $LN15@toUnicodeW
$LN10@toUnicodeW:
; Line 1459
	mov	eax, DWORD PTR _pArgs$[ebp]
	movsx	ecx, BYTE PTR [eax+2]
	test	ecx, ecx
	je	SHORT $LN8@toUnicodeW
; Line 1467
	movsx	eax, BYTE PTR _converterSawEndOfInput$[ebp]
	test	eax, eax
	jne	SHORT $LN7@toUnicodeW
; Line 1468
	jmp	$LN23@toUnicodeW
$LN7@toUnicodeW:
; Line 1472
	push	0
	push	1
	mov	eax, DWORD PTR _cnv$[ebp]
	push	eax
	call	__reset
	add	esp, 12					; 0000000cH
$LN8@toUnicodeW:
; Line 1476
	jmp	$LN34@toUnicodeW
$LN15@toUnicodeW:
; Line 1491
	movsx	eax, BYTE PTR _calledCallback$[ebp]
	test	eax, eax
	jne	SHORT $LN5@toUnicodeW
	mov	eax, DWORD PTR _err$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _e$12896[ebp], ecx
	cmp	DWORD PTR _e$12896[ebp], 15		; 0000000fH
	je	SHORT $LN5@toUnicodeW
	cmp	DWORD PTR _e$12896[ebp], 10		; 0000000aH
	je	$LN6@toUnicodeW
	cmp	DWORD PTR _e$12896[ebp], 12		; 0000000cH
	je	$LN6@toUnicodeW
	cmp	DWORD PTR _e$12896[ebp], 11		; 0000000bH
	je	$LN6@toUnicodeW
	cmp	DWORD PTR _e$12896[ebp], 18		; 00000012H
	je	$LN6@toUnicodeW
	cmp	DWORD PTR _e$12896[ebp], 19		; 00000013H
	je	$LN6@toUnicodeW
$LN5@toUnicodeW:
; Line 1504
	cmp	DWORD PTR _realSource$[ebp], 0
	je	$LN4@toUnicodeW
; Line 1507
	mov	eax, DWORD PTR _cnv$[ebp]
	movsx	ecx, BYTE PTR [eax+254]
	test	ecx, ecx
	je	SHORT $LN39@toUnicodeW
	mov	edx, DWORD PTR ?__LINE__Var@?1??_toUnicodeWithCallback@@9@9@997d6c0e
	add	edx, 238				; 000000eeH
	mov	esi, esp
	push	edx
	push	OFFSET ??_C@_1FC@LMGPGLIN@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@
	push	OFFSET ??_C@_1CK@JEEADFHD@?$AAc?$AAn?$AAv?$AA?9?$AA?$DO?$AAp?$AAr?$AAe?$AAT?$AAo?$AAU?$AAL?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$DN?$AA?$DN?$AA0?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN39@toUnicodeW:
; Line 1509
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR _pArgs$[ebp]
	mov	edx, DWORD PTR [eax+12]
	sub	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _length$12901[ebp], edx
; Line 1510
	cmp	DWORD PTR _length$12901[ebp], 0
	jle	SHORT $LN3@toUnicodeW
; Line 1511
	push	1
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_uprv_checkValidMemory
	add	esp, 8
	mov	edx, DWORD PTR _length$12901[ebp]
	push	edx
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _cnv$[ebp]
	add	edx, 222				; 000000deH
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 1512
	mov	eax, DWORD PTR _length$12901[ebp]
	neg	eax
	mov	ecx, DWORD PTR _cnv$[ebp]
	mov	BYTE PTR [ecx+254], al
$LN3@toUnicodeW:
; Line 1515
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR _realSource$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 1516
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR _realSourceLimit$[ebp]
	mov	DWORD PTR [eax+12], ecx
; Line 1517
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	cl, BYTE PTR _realFlush$[ebp]
	mov	BYTE PTR [eax+2], cl
$LN4@toUnicodeW:
; Line 1520
	jmp	$LN34@toUnicodeW
$LN6@toUnicodeW:
; Line 1525
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	ecx, DWORD PTR _cnv$[ebp]
	mov	dl, BYTE PTR [ecx+36]
	mov	BYTE PTR [eax+62], dl
	mov	eax, DWORD PTR _cnv$[ebp]
	movsx	ecx, BYTE PTR [eax+62]
	mov	DWORD PTR _errorInputLength$[ebp], ecx
; Line 1526
	cmp	DWORD PTR _errorInputLength$[ebp], 0
	jle	SHORT $LN2@toUnicodeW
; Line 1527
	push	1
	mov	eax, DWORD PTR _cnv$[ebp]
	add	eax, 37					; 00000025H
	push	eax
	call	_uprv_checkValidMemory
	add	esp, 8
	mov	ecx, DWORD PTR _errorInputLength$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cnv$[ebp]
	add	edx, 37					; 00000025H
	push	edx
	mov	eax, DWORD PTR _cnv$[ebp]
	add	eax, 68					; 00000044H
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN2@toUnicodeW:
; Line 1531
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	BYTE PTR [eax+36], 0
; Line 1534
	mov	eax, DWORD PTR _cnv$[ebp]
	cmp	DWORD PTR [eax+256], 1
	jne	SHORT $LN1@toUnicodeW
	mov	eax, DWORD PTR _err$[ebp]
	cmp	DWORD PTR [eax], 10			; 0000000aH
	jne	SHORT $LN1@toUnicodeW
; Line 1535
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	DWORD PTR [eax+256], 0
$LN1@toUnicodeW:
; Line 1540
	mov	esi, esp
	mov	eax, DWORD PTR _err$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cnv$[ebp]
	mov	edx, DWORD PTR [ecx+256]
	push	edx
	mov	eax, DWORD PTR _errorInputLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cnv$[ebp]
	add	ecx, 68					; 00000044H
	push	ecx
	mov	edx, DWORD PTR _pArgs$[ebp]
	push	edx
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR _cnv$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	add	esp, 24					; 00000018H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1541
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	DWORD PTR [eax+256], 1
; Line 1550
	mov	BYTE PTR _calledCallback$[ebp], 1
; Line 1551
	jmp	$LN24@toUnicodeW
$LN23@toUnicodeW:
; Line 1552
	jmp	$LN28@toUnicodeW
$LN34@toUnicodeW:
; Line 1553
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN42@toUnicodeW
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 432				; 000001b0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN42@toUnicodeW:
	DD	1
	DD	$LN41@toUnicodeW
$LN41@toUnicodeW:
	DD	-148					; ffffff6cH
	DD	31					; 0000001fH
	DD	$LN40@toUnicodeW
$LN40@toUnicodeW:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	112					; 00000070H
	DB	108					; 0000006cH
	DB	97					; 00000061H
	DB	121					; 00000079H
	DB	0
__toUnicodeWithCallback ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _ucnv_outputOverflowToUnicode
_TEXT	SEGMENT
_j$12934 = -68						; size = 4
_length$ = -56						; size = 4
_i$ = -44						; size = 4
_t$ = -32						; size = 4
_overflow$ = -20					; size = 4
_offsets$ = -8						; size = 4
_cnv$ = 8						; size = 4
_target$ = 12						; size = 4
_targetLimit$ = 16					; size = 4
_pOffsets$ = 20						; size = 4
_err$ = 24						; size = 4
_ucnv_outputOverflowToUnicode PROC			; COMDAT
; Line 1564
	push	ebp
	mov	ebp, esp
	sub	esp, 264				; 00000108H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-264]
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1569
	mov	eax, DWORD PTR _target$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _t$[ebp], ecx
; Line 1570
	cmp	DWORD PTR _pOffsets$[ebp], 0
	je	SHORT $LN11@ucnv_outpu@2
; Line 1571
	mov	eax, DWORD PTR _pOffsets$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _offsets$[ebp], ecx
; Line 1572
	jmp	SHORT $LN10@ucnv_outpu@2
$LN11@ucnv_outpu@2:
; Line 1573
	mov	DWORD PTR _offsets$[ebp], 0
$LN10@ucnv_outpu@2:
; Line 1576
	mov	eax, DWORD PTR _cnv$[ebp]
	add	eax, 116				; 00000074H
	mov	DWORD PTR _overflow$[ebp], eax
; Line 1577
	mov	eax, DWORD PTR _cnv$[ebp]
	movsx	ecx, BYTE PTR [eax+65]
	mov	DWORD PTR _length$[ebp], ecx
; Line 1578
	mov	DWORD PTR _i$[ebp], 0
$LN9@ucnv_outpu@2:
; Line 1579
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _length$[ebp]
	jge	$LN8@ucnv_outpu@2
; Line 1580
	mov	eax, DWORD PTR _t$[ebp]
	cmp	eax, DWORD PTR _targetLimit$[ebp]
	jne	SHORT $LN7@ucnv_outpu@2
; Line 1582
	mov	DWORD PTR _j$12934[ebp], 0
$LN6@ucnv_outpu@2:
; Line 1585
	mov	eax, DWORD PTR _j$12934[ebp]
	mov	ecx, DWORD PTR _overflow$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _overflow$[ebp]
	mov	dx, WORD PTR [esi+edx*2]
	mov	WORD PTR [ecx+eax*2], dx
	mov	eax, DWORD PTR _j$12934[ebp]
	add	eax, 1
	mov	DWORD PTR _j$12934[ebp], eax
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
; Line 1586
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _length$[ebp]
	jl	SHORT $LN6@ucnv_outpu@2
; Line 1588
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	cl, BYTE PTR _j$12934[ebp]
	mov	BYTE PTR [eax+65], cl
; Line 1589
	mov	eax, DWORD PTR _target$[ebp]
	mov	ecx, DWORD PTR _t$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 1590
	cmp	DWORD PTR _offsets$[ebp], 0
	je	SHORT $LN3@ucnv_outpu@2
; Line 1591
	mov	eax, DWORD PTR _pOffsets$[ebp]
	mov	ecx, DWORD PTR _offsets$[ebp]
	mov	DWORD PTR [eax], ecx
$LN3@ucnv_outpu@2:
; Line 1593
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
; Line 1594
	mov	al, 1
	jmp	SHORT $LN12@ucnv_outpu@2
$LN7@ucnv_outpu@2:
; Line 1598
	mov	eax, DWORD PTR _t$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _overflow$[ebp]
	mov	cx, WORD PTR [edx+ecx*2]
	mov	WORD PTR [eax], cx
	mov	edx, DWORD PTR _t$[ebp]
	add	edx, 2
	mov	DWORD PTR _t$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
; Line 1599
	cmp	DWORD PTR _offsets$[ebp], 0
	je	SHORT $LN2@ucnv_outpu@2
; Line 1600
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	DWORD PTR [eax], -1
	mov	ecx, DWORD PTR _offsets$[ebp]
	add	ecx, 4
	mov	DWORD PTR _offsets$[ebp], ecx
$LN2@ucnv_outpu@2:
; Line 1602
	jmp	$LN9@ucnv_outpu@2
$LN8@ucnv_outpu@2:
; Line 1605
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	BYTE PTR [eax+65], 0
; Line 1606
	mov	eax, DWORD PTR _target$[ebp]
	mov	ecx, DWORD PTR _t$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 1607
	cmp	DWORD PTR _offsets$[ebp], 0
	je	SHORT $LN1@ucnv_outpu@2
; Line 1608
	mov	eax, DWORD PTR _pOffsets$[ebp]
	mov	ecx, DWORD PTR _offsets$[ebp]
	mov	DWORD PTR [eax], ecx
$LN1@ucnv_outpu@2:
; Line 1610
	xor	al, al
$LN12@ucnv_outpu@2:
; Line 1611
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_ucnv_outputOverflowToUnicode ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_u_terminateChars_56:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _ucnv_fromUChars_56
_TEXT	SEGMENT
tv87 = -1280						; size = 4
_buffer$13035 = -1080					; size = 1024
_destLength$ = -48					; size = 4
_destLimit$ = -36					; size = 4
_originalDest$ = -24					; size = 4
_srcLimit$ = -12					; size = 4
__$ArrayPad$ = -4					; size = 4
_cnv$ = 8						; size = 4
_dest$ = 12						; size = 4
_destCapacity$ = 16					; size = 4
_src$ = 20						; size = 4
_srcLength$ = 24					; size = 4
_pErrorCode$ = 28					; size = 4
_ucnv_fromUChars_56 PROC				; COMDAT
; Line 1718
	push	ebp
	mov	ebp, esp
	sub	esp, 1280				; 00000500H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-1280]
	mov	ecx, 320				; 00000140H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 1724
	cmp	DWORD PTR _pErrorCode$[ebp], 0
	je	SHORT $LN13@ucnv_fromU@2
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN14@ucnv_fromU@2
$LN13@ucnv_fromU@2:
; Line 1725
	xor	eax, eax
	jmp	$LN15@ucnv_fromU@2
$LN14@ucnv_fromU@2:
; Line 1731
	cmp	DWORD PTR _cnv$[ebp], 0
	je	SHORT $LN11@ucnv_fromU@2
	cmp	DWORD PTR _destCapacity$[ebp], 0
	jl	SHORT $LN11@ucnv_fromU@2
	cmp	DWORD PTR _destCapacity$[ebp], 0
	jle	SHORT $LN10@ucnv_fromU@2
	cmp	DWORD PTR _dest$[ebp], 0
	je	SHORT $LN11@ucnv_fromU@2
$LN10@ucnv_fromU@2:
	cmp	DWORD PTR _srcLength$[ebp], -1
	jl	SHORT $LN11@ucnv_fromU@2
	cmp	DWORD PTR _srcLength$[ebp], 0
	je	SHORT $LN12@ucnv_fromU@2
	cmp	DWORD PTR _src$[ebp], 0
	jne	SHORT $LN12@ucnv_fromU@2
$LN11@ucnv_fromU@2:
; Line 1732
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 1
; Line 1733
	xor	eax, eax
	jmp	$LN15@ucnv_fromU@2
$LN12@ucnv_fromU@2:
; Line 1737
	mov	eax, DWORD PTR _cnv$[ebp]
	push	eax
	call	_ucnv_resetFromUnicode_56
	add	esp, 4
; Line 1738
	mov	eax, DWORD PTR _dest$[ebp]
	mov	DWORD PTR _originalDest$[ebp], eax
; Line 1739
	cmp	DWORD PTR _srcLength$[ebp], -1
	jne	SHORT $LN9@ucnv_fromU@2
; Line 1740
	mov	eax, DWORD PTR _src$[ebp]
	push	eax
	call	_u_strlen_56
	add	esp, 4
	mov	DWORD PTR _srcLength$[ebp], eax
$LN9@ucnv_fromU@2:
; Line 1742
	cmp	DWORD PTR _srcLength$[ebp], 0
	jle	$LN8@ucnv_fromU@2
; Line 1743
	mov	eax, DWORD PTR _srcLength$[ebp]
	mov	ecx, DWORD PTR _src$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR _srcLimit$[ebp], edx
; Line 1744
	mov	eax, DWORD PTR _dest$[ebp]
	add	eax, DWORD PTR _destCapacity$[ebp]
	mov	DWORD PTR _destLimit$[ebp], eax
; Line 1747
	mov	eax, DWORD PTR _destLimit$[ebp]
	cmp	eax, DWORD PTR _dest$[ebp]
	jb	SHORT $LN6@ucnv_fromU@2
	cmp	DWORD PTR _destLimit$[ebp], 0
	jne	SHORT $LN7@ucnv_fromU@2
	cmp	DWORD PTR _dest$[ebp], 0
	je	SHORT $LN7@ucnv_fromU@2
$LN6@ucnv_fromU@2:
; Line 1748
	mov	eax, DWORD PTR _dest$[ebp]
	add	eax, 2147483647				; 7fffffffH
	cmp	eax, DWORD PTR _dest$[ebp]
	jbe	SHORT $LN17@ucnv_fromU@2
	mov	ecx, DWORD PTR _dest$[ebp]
	add	ecx, 2147483647				; 7fffffffH
	mov	DWORD PTR tv87[ebp], ecx
	jmp	SHORT $LN18@ucnv_fromU@2
$LN17@ucnv_fromU@2:
	mov	DWORD PTR tv87[ebp], -1
$LN18@ucnv_fromU@2:
	mov	edx, DWORD PTR tv87[ebp]
	mov	DWORD PTR _destLimit$[ebp], edx
$LN7@ucnv_fromU@2:
; Line 1752
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	push	1
	push	0
	mov	ecx, DWORD PTR _srcLimit$[ebp]
	push	ecx
	lea	edx, DWORD PTR _src$[ebp]
	push	edx
	mov	eax, DWORD PTR _destLimit$[ebp]
	push	eax
	lea	ecx, DWORD PTR _dest$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cnv$[ebp]
	push	edx
	call	_ucnv_fromUnicode_56
	add	esp, 32					; 00000020H
; Line 1753
	mov	eax, DWORD PTR _dest$[ebp]
	sub	eax, DWORD PTR _originalDest$[ebp]
	mov	DWORD PTR _destLength$[ebp], eax
; Line 1756
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	cmp	DWORD PTR [eax], 15			; 0000000fH
	jne	SHORT $LN5@ucnv_fromU@2
; Line 1759
	lea	eax, DWORD PTR _buffer$13035[ebp+1024]
	mov	DWORD PTR _destLimit$[ebp], eax
$LN4@ucnv_fromU@2:
; Line 1761
	lea	eax, DWORD PTR _buffer$13035[ebp]
	mov	DWORD PTR _dest$[ebp], eax
; Line 1762
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 0
; Line 1763
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	push	1
	push	0
	mov	ecx, DWORD PTR _srcLimit$[ebp]
	push	ecx
	lea	edx, DWORD PTR _src$[ebp]
	push	edx
	mov	eax, DWORD PTR _destLimit$[ebp]
	push	eax
	lea	ecx, DWORD PTR _dest$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cnv$[ebp]
	push	edx
	call	_ucnv_fromUnicode_56
	add	esp, 32					; 00000020H
; Line 1764
	mov	eax, DWORD PTR _dest$[ebp]
	lea	ecx, DWORD PTR _buffer$13035[ebp]
	sub	eax, ecx
	add	eax, DWORD PTR _destLength$[ebp]
	mov	DWORD PTR _destLength$[ebp], eax
; Line 1765
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	cmp	DWORD PTR [eax], 15			; 0000000fH
	je	SHORT $LN4@ucnv_fromU@2
$LN5@ucnv_fromU@2:
; Line 1767
	jmp	SHORT $LN1@ucnv_fromU@2
$LN8@ucnv_fromU@2:
; Line 1768
	mov	DWORD PTR _destLength$[ebp], 0
$LN1@ucnv_fromU@2:
; Line 1771
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _destLength$[ebp]
	push	ecx
	mov	edx, DWORD PTR _destCapacity$[ebp]
	push	edx
	mov	eax, DWORD PTR _originalDest$[ebp]
	push	eax
	call	_u_terminateChars_56
	add	esp, 16					; 00000010H
$LN15@ucnv_fromU@2:
; Line 1772
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN21@ucnv_fromU@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 1280				; 00000500H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN21@ucnv_fromU@2:
	DD	1
	DD	$LN20@ucnv_fromU@2
$LN20@ucnv_fromU@2:
	DD	-1080					; fffffbc8H
	DD	1024					; 00000400H
	DD	$LN19@ucnv_fromU@2
$LN19@ucnv_fromU@2:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
_ucnv_fromUChars_56 ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_ucnv_toUChars_56
EXTRN	_u_terminateUChars_56:PROC
EXTRN	_strlen:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _ucnv_toUChars_56
_TEXT	SEGMENT
tv87 = -2304						; size = 4
_buffer$13082 = -2104					; size = 2048
_destLength$ = -48					; size = 4
_destLimit$ = -36					; size = 4
_originalDest$ = -24					; size = 4
_srcLimit$ = -12					; size = 4
__$ArrayPad$ = -4					; size = 4
_cnv$ = 8						; size = 4
_dest$ = 12						; size = 4
_destCapacity$ = 16					; size = 4
_src$ = 20						; size = 4
_srcLength$ = 24					; size = 4
_pErrorCode$ = 28					; size = 4
_ucnv_toUChars_56 PROC					; COMDAT
; Line 1778
	push	ebp
	mov	ebp, esp
	sub	esp, 2304				; 00000900H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-2304]
	mov	ecx, 576				; 00000240H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 1784
	cmp	DWORD PTR _pErrorCode$[ebp], 0
	je	SHORT $LN13@ucnv_toUCh
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN14@ucnv_toUCh
$LN13@ucnv_toUCh:
; Line 1785
	xor	eax, eax
	jmp	$LN15@ucnv_toUCh
$LN14@ucnv_toUCh:
; Line 1790
	cmp	DWORD PTR _cnv$[ebp], 0
	je	SHORT $LN11@ucnv_toUCh
	cmp	DWORD PTR _destCapacity$[ebp], 0
	jl	SHORT $LN11@ucnv_toUCh
	cmp	DWORD PTR _destCapacity$[ebp], 0
	jle	SHORT $LN10@ucnv_toUCh
	cmp	DWORD PTR _dest$[ebp], 0
	je	SHORT $LN11@ucnv_toUCh
$LN10@ucnv_toUCh:
	cmp	DWORD PTR _srcLength$[ebp], -1
	jl	SHORT $LN11@ucnv_toUCh
	cmp	DWORD PTR _srcLength$[ebp], 0
	je	SHORT $LN12@ucnv_toUCh
	cmp	DWORD PTR _src$[ebp], 0
	jne	SHORT $LN12@ucnv_toUCh
$LN11@ucnv_toUCh:
; Line 1792
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 1
; Line 1793
	xor	eax, eax
	jmp	$LN15@ucnv_toUCh
$LN12@ucnv_toUCh:
; Line 1797
	mov	eax, DWORD PTR _cnv$[ebp]
	push	eax
	call	_ucnv_resetToUnicode_56
	add	esp, 4
; Line 1798
	mov	eax, DWORD PTR _dest$[ebp]
	mov	DWORD PTR _originalDest$[ebp], eax
; Line 1799
	cmp	DWORD PTR _srcLength$[ebp], -1
	jne	SHORT $LN9@ucnv_toUCh
; Line 1800
	mov	eax, DWORD PTR _src$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	mov	DWORD PTR _srcLength$[ebp], eax
$LN9@ucnv_toUCh:
; Line 1802
	cmp	DWORD PTR _srcLength$[ebp], 0
	jle	$LN8@ucnv_toUCh
; Line 1803
	mov	eax, DWORD PTR _src$[ebp]
	add	eax, DWORD PTR _srcLength$[ebp]
	mov	DWORD PTR _srcLimit$[ebp], eax
; Line 1804
	mov	eax, DWORD PTR _destCapacity$[ebp]
	mov	ecx, DWORD PTR _dest$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR _destLimit$[ebp], edx
; Line 1807
	mov	eax, DWORD PTR _destLimit$[ebp]
	cmp	eax, DWORD PTR _dest$[ebp]
	jb	SHORT $LN6@ucnv_toUCh
	cmp	DWORD PTR _destLimit$[ebp], 0
	jne	SHORT $LN7@ucnv_toUCh
	cmp	DWORD PTR _dest$[ebp], 0
	je	SHORT $LN7@ucnv_toUCh
$LN6@ucnv_toUCh:
; Line 1808
	mov	eax, DWORD PTR _dest$[ebp]
	add	eax, 2147483647				; 7fffffffH
	cmp	eax, DWORD PTR _dest$[ebp]
	jbe	SHORT $LN17@ucnv_toUCh
	mov	ecx, DWORD PTR _dest$[ebp]
	add	ecx, 2147483647				; 7fffffffH
	mov	DWORD PTR tv87[ebp], ecx
	jmp	SHORT $LN18@ucnv_toUCh
$LN17@ucnv_toUCh:
	mov	DWORD PTR tv87[ebp], -1
$LN18@ucnv_toUCh:
	mov	edx, DWORD PTR tv87[ebp]
	mov	DWORD PTR _destLimit$[ebp], edx
$LN7@ucnv_toUCh:
; Line 1812
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	push	1
	push	0
	mov	ecx, DWORD PTR _srcLimit$[ebp]
	push	ecx
	lea	edx, DWORD PTR _src$[ebp]
	push	edx
	mov	eax, DWORD PTR _destLimit$[ebp]
	push	eax
	lea	ecx, DWORD PTR _dest$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cnv$[ebp]
	push	edx
	call	_ucnv_toUnicode_56
	add	esp, 32					; 00000020H
; Line 1813
	mov	eax, DWORD PTR _dest$[ebp]
	sub	eax, DWORD PTR _originalDest$[ebp]
	sar	eax, 1
	mov	DWORD PTR _destLength$[ebp], eax
; Line 1816
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	cmp	DWORD PTR [eax], 15			; 0000000fH
	jne	SHORT $LN5@ucnv_toUCh
; Line 1820
	lea	eax, DWORD PTR _buffer$13082[ebp+2048]
	mov	DWORD PTR _destLimit$[ebp], eax
$LN4@ucnv_toUCh:
; Line 1822
	lea	eax, DWORD PTR _buffer$13082[ebp]
	mov	DWORD PTR _dest$[ebp], eax
; Line 1823
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 0
; Line 1824
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	push	1
	push	0
	mov	ecx, DWORD PTR _srcLimit$[ebp]
	push	ecx
	lea	edx, DWORD PTR _src$[ebp]
	push	edx
	mov	eax, DWORD PTR _destLimit$[ebp]
	push	eax
	lea	ecx, DWORD PTR _dest$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cnv$[ebp]
	push	edx
	call	_ucnv_toUnicode_56
	add	esp, 32					; 00000020H
; Line 1825
	mov	eax, DWORD PTR _dest$[ebp]
	lea	ecx, DWORD PTR _buffer$13082[ebp]
	sub	eax, ecx
	sar	eax, 1
	add	eax, DWORD PTR _destLength$[ebp]
	mov	DWORD PTR _destLength$[ebp], eax
; Line 1827
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	cmp	DWORD PTR [eax], 15			; 0000000fH
	je	SHORT $LN4@ucnv_toUCh
$LN5@ucnv_toUCh:
; Line 1829
	jmp	SHORT $LN1@ucnv_toUCh
$LN8@ucnv_toUCh:
; Line 1830
	mov	DWORD PTR _destLength$[ebp], 0
$LN1@ucnv_toUCh:
; Line 1833
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _destLength$[ebp]
	push	ecx
	mov	edx, DWORD PTR _destCapacity$[ebp]
	push	edx
	mov	eax, DWORD PTR _originalDest$[ebp]
	push	eax
	call	_u_terminateUChars_56
	add	esp, 16					; 00000010H
$LN15@ucnv_toUCh:
; Line 1834
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN21@ucnv_toUCh
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 2304				; 00000900H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN21@ucnv_toUCh:
	DD	1
	DD	$LN20@ucnv_toUCh
$LN20@ucnv_toUCh:
	DD	-2104					; fffff7c8H
	DD	2048					; 00000800H
	DD	$LN19@ucnv_toUCh
$LN19@ucnv_toUCh:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
_ucnv_toUChars_56 ENDP
_TEXT	ENDS
PUBLIC	_ucnv_getNextUChar_56
EXTRN	__imp__memmove:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _ucnv_getNextUChar_56
_TEXT	SEGMENT
tv128 = -340						; size = 4
tv196 = -337						; size = 1
_delta$13157 = -140					; size = 4
_c2$13142 = -128					; size = 2
___c2$13117 = -116					; size = 2
_overflow$13115 = -104					; size = 4
_length$ = -92						; size = 4
_i$ = -80						; size = 4
_c$ = -68						; size = 4
_s$ = -56						; size = 4
_buffer$ = -44						; size = 4
_args$ = -32						; size = 28
_cnv$ = 8						; size = 4
_source$ = 12						; size = 4
_sourceLimit$ = 16					; size = 4
_err$ = 20						; size = 4
_ucnv_getNextUChar_56 PROC				; COMDAT
; Line 1841
	push	ebp
	mov	ebp, esp
	sub	esp, 340				; 00000154H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-340]
	mov	ecx, 85					; 00000055H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1849
	cmp	DWORD PTR _err$[ebp], 0
	je	SHORT $LN35@ucnv_getNe
	mov	eax, DWORD PTR _err$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN36@ucnv_getNe
$LN35@ucnv_getNe:
; Line 1850
	mov	eax, 65535				; 0000ffffH
	jmp	$LN37@ucnv_getNe
$LN36@ucnv_getNe:
; Line 1853
	cmp	DWORD PTR _cnv$[ebp], 0
	je	SHORT $LN33@ucnv_getNe
	cmp	DWORD PTR _source$[ebp], 0
	jne	SHORT $LN34@ucnv_getNe
$LN33@ucnv_getNe:
; Line 1854
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 1
; Line 1855
	mov	eax, 65535				; 0000ffffH
	jmp	$LN37@ucnv_getNe
$LN34@ucnv_getNe:
; Line 1858
	mov	eax, DWORD PTR _source$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _s$[ebp], ecx
; Line 1859
	mov	eax, DWORD PTR _sourceLimit$[ebp]
	cmp	eax, DWORD PTR _s$[ebp]
	jae	SHORT $LN32@ucnv_getNe
; Line 1860
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 1
; Line 1861
	mov	eax, 65535				; 0000ffffH
	jmp	$LN37@ucnv_getNe
$LN32@ucnv_getNe:
; Line 1876
	mov	eax, DWORD PTR _sourceLimit$[ebp]
	sub	eax, DWORD PTR _s$[ebp]
	cmp	eax, 2147483647				; 7fffffffH
	jbe	SHORT $LN31@ucnv_getNe
	mov	eax, DWORD PTR _sourceLimit$[ebp]
	cmp	eax, DWORD PTR _s$[ebp]
	jbe	SHORT $LN31@ucnv_getNe
; Line 1877
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 1
; Line 1878
	mov	eax, 65535				; 0000ffffH
	jmp	$LN37@ucnv_getNe
$LN31@ucnv_getNe:
; Line 1881
	mov	DWORD PTR _c$[ebp], -1
; Line 1884
	mov	eax, DWORD PTR _cnv$[ebp]
	movsx	ecx, BYTE PTR [eax+65]
	test	ecx, ecx
	jle	$LN30@ucnv_getNe
; Line 1887
	mov	eax, DWORD PTR _cnv$[ebp]
	add	eax, 116				; 00000074H
	mov	DWORD PTR _overflow$13115[ebp], eax
; Line 1888
	mov	DWORD PTR _i$[ebp], 0
; Line 1889
	mov	eax, DWORD PTR _cnv$[ebp]
	movsx	ecx, BYTE PTR [eax+65]
	mov	DWORD PTR _length$[ebp], ecx
; Line 1890
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _overflow$13115[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	mov	DWORD PTR _c$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	eax, DWORD PTR _c$[ebp]
	and	eax, -1024				; fffffc00H
	cmp	eax, 55296				; 0000d800H
	jne	SHORT $LN29@ucnv_getNe
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _length$[ebp]
	je	SHORT $LN29@ucnv_getNe
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _overflow$13115[ebp]
	mov	dx, WORD PTR [ecx+eax*2]
	mov	WORD PTR ___c2$13117[ebp], dx
	movzx	eax, WORD PTR ___c2$13117[ebp]
	and	eax, -1024				; fffffc00H
	cmp	eax, 56320				; 0000dc00H
	jne	SHORT $LN29@ucnv_getNe
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	eax, DWORD PTR _c$[ebp]
	shl	eax, 10					; 0000000aH
	movzx	ecx, WORD PTR ___c2$13117[ebp]
	lea	edx, DWORD PTR [eax+ecx-56613888]
	mov	DWORD PTR _c$[ebp], edx
$LN29@ucnv_getNe:
; Line 1893
	mov	eax, DWORD PTR _length$[ebp]
	sub	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR tv128[ebp], eax
	mov	ecx, DWORD PTR _cnv$[ebp]
	mov	dl, BYTE PTR tv128[ebp]
	mov	BYTE PTR [ecx+65], dl
	movsx	eax, BYTE PTR tv128[ebp]
	test	eax, eax
	jle	SHORT $LN27@ucnv_getNe
; Line 1895
	push	1
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _cnv$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2+116]
	push	edx
	call	_uprv_checkValidMemory
	add	esp, 8
	mov	eax, DWORD PTR _cnv$[ebp]
	movsx	ecx, BYTE PTR [eax+65]
	shl	ecx, 1
	mov	esi, esp
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _cnv$[ebp]
	lea	ecx, DWORD PTR [eax+edx*2+116]
	push	ecx
	mov	edx, DWORD PTR _cnv$[ebp]
	add	edx, 116				; 00000074H
	push	edx
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN27@ucnv_getNe:
; Line 1898
	mov	eax, DWORD PTR _c$[ebp]
	and	eax, -1024				; fffffc00H
	cmp	eax, 55296				; 0000d800H
	jne	SHORT $LN25@ucnv_getNe
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _length$[ebp]
	jge	SHORT $LN30@ucnv_getNe
$LN25@ucnv_getNe:
; Line 1899
	mov	eax, DWORD PTR _c$[ebp]
	jmp	$LN37@ucnv_getNe
$LN30@ucnv_getNe:
; Line 1916
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	DWORD PTR _args$[ebp+4], eax
; Line 1917
	mov	BYTE PTR _args$[ebp+2], 1
; Line 1918
	mov	DWORD PTR _args$[ebp+24], 0
; Line 1919
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR _args$[ebp+8], eax
; Line 1920
	mov	eax, DWORD PTR _sourceLimit$[ebp]
	mov	DWORD PTR _args$[ebp+12], eax
; Line 1921
	lea	eax, DWORD PTR _buffer$[ebp]
	mov	DWORD PTR _args$[ebp+16], eax
; Line 1922
	lea	eax, DWORD PTR _buffer$[ebp+2]
	mov	DWORD PTR _args$[ebp+20], eax
; Line 1923
	mov	eax, 28					; 0000001cH
	mov	WORD PTR _args$[ebp], ax
; Line 1925
	cmp	DWORD PTR _c$[ebp], 0
	jge	$LN24@ucnv_getNe
; Line 1934
	mov	eax, DWORD PTR _cnv$[ebp]
	movsx	ecx, BYTE PTR [eax+36]
	test	ecx, ecx
	jne	SHORT $LN23@ucnv_getNe
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx+20]
	cmp	DWORD PTR [edx+40], 0
	je	SHORT $LN23@ucnv_getNe
; Line 1935
	mov	esi, esp
	mov	eax, DWORD PTR _err$[ebp]
	push	eax
	lea	ecx, DWORD PTR _args$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cnv$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+40]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _c$[ebp], eax
; Line 1936
	mov	eax, DWORD PTR _args$[ebp+8]
	mov	DWORD PTR _s$[ebp], eax
	mov	ecx, DWORD PTR _source$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx], edx
; Line 1937
	mov	eax, DWORD PTR _err$[ebp]
	cmp	DWORD PTR [eax], 8
	jne	SHORT $LN22@ucnv_getNe
; Line 1939
	push	0
	push	1
	mov	eax, DWORD PTR _cnv$[ebp]
	push	eax
	call	__reset
	add	esp, 12					; 0000000cH
; Line 1940
	mov	eax, 65535				; 0000ffffH
	jmp	$LN37@ucnv_getNe
	jmp	SHORT $LN23@ucnv_getNe
$LN22@ucnv_getNe:
; Line 1941
	mov	eax, DWORD PTR _err$[ebp]
	cmp	DWORD PTR [eax], 0
	jg	SHORT $LN23@ucnv_getNe
	cmp	DWORD PTR _c$[ebp], 0
	jl	SHORT $LN23@ucnv_getNe
; Line 1942
	mov	eax, DWORD PTR _c$[ebp]
	jmp	$LN37@ucnv_getNe
$LN23@ucnv_getNe:
; Line 1952
	mov	eax, DWORD PTR _err$[ebp]
	push	eax
	lea	ecx, DWORD PTR _args$[ebp]
	push	ecx
	call	__toUnicodeWithCallback
	add	esp, 8
; Line 1954
	mov	eax, DWORD PTR _err$[ebp]
	cmp	DWORD PTR [eax], 15			; 0000000fH
	jne	SHORT $LN19@ucnv_getNe
; Line 1955
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 0
$LN19@ucnv_getNe:
; Line 1958
	mov	DWORD PTR _i$[ebp], 0
; Line 1959
	mov	eax, DWORD PTR _args$[ebp+16]
	lea	ecx, DWORD PTR _buffer$[ebp]
	sub	eax, ecx
	sar	eax, 1
	mov	DWORD PTR _length$[ebp], eax
; Line 1960
	jmp	SHORT $LN18@ucnv_getNe
$LN24@ucnv_getNe:
; Line 1962
	mov	ax, WORD PTR _c$[ebp]
	mov	WORD PTR _buffer$[ebp], ax
; Line 1963
	lea	eax, DWORD PTR _buffer$[ebp+2]
	mov	DWORD PTR _args$[ebp+16], eax
; Line 1964
	mov	DWORD PTR _i$[ebp], 0
; Line 1965
	mov	DWORD PTR _length$[ebp], 1
$LN18@ucnv_getNe:
; Line 1970
	mov	eax, DWORD PTR _err$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN17@ucnv_getNe
; Line 1971
	mov	DWORD PTR _c$[ebp], 65535		; 0000ffffH
	jmp	$LN16@ucnv_getNe
$LN17@ucnv_getNe:
; Line 1972
	cmp	DWORD PTR _length$[ebp], 0
	jne	SHORT $LN15@ucnv_getNe
; Line 1974
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 8
; Line 1976
	mov	DWORD PTR _c$[ebp], 65535		; 0000ffffH
; Line 1977
	jmp	$LN16@ucnv_getNe
$LN15@ucnv_getNe:
; Line 1978
	movzx	eax, WORD PTR _buffer$[ebp]
	mov	DWORD PTR _c$[ebp], eax
; Line 1979
	mov	DWORD PTR _i$[ebp], 1
; Line 1980
	mov	eax, DWORD PTR _c$[ebp]
	and	eax, -1024				; fffffc00H
	cmp	eax, 55296				; 0000d800H
	je	SHORT $LN13@ucnv_getNe
; Line 1982
	jmp	$LN16@ucnv_getNe
$LN13@ucnv_getNe:
; Line 1986
	mov	eax, DWORD PTR _cnv$[ebp]
	movsx	ecx, BYTE PTR [eax+65]
	test	ecx, ecx
	jle	$LN11@ucnv_getNe
; Line 1988
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	cx, WORD PTR [eax+116]
	mov	WORD PTR _c2$13142[ebp], cx
	movzx	edx, WORD PTR _c2$13142[ebp]
	and	edx, -1024				; fffffc00H
	cmp	edx, 56320				; 0000dc00H
	jne	SHORT $LN8@ucnv_getNe
; Line 1990
	mov	eax, DWORD PTR _c$[ebp]
	shl	eax, 10					; 0000000aH
	movzx	ecx, WORD PTR _c2$13142[ebp]
	lea	edx, DWORD PTR [eax+ecx-56613888]
	mov	DWORD PTR _c$[ebp], edx
; Line 1993
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	cl, BYTE PTR [eax+65]
	sub	cl, 1
	mov	BYTE PTR tv196[ebp], cl
	mov	edx, DWORD PTR _cnv$[ebp]
	mov	al, BYTE PTR tv196[ebp]
	mov	BYTE PTR [edx+65], al
	movsx	ecx, BYTE PTR tv196[ebp]
	test	ecx, ecx
	jle	SHORT $LN8@ucnv_getNe
; Line 1995
	push	1
	mov	eax, DWORD PTR _cnv$[ebp]
	add	eax, 118				; 00000076H
	push	eax
	call	_uprv_checkValidMemory
	add	esp, 8
	mov	ecx, DWORD PTR _cnv$[ebp]
	movsx	edx, BYTE PTR [ecx+65]
	shl	edx, 1
	mov	esi, esp
	push	edx
	mov	eax, DWORD PTR _cnv$[ebp]
	add	eax, 118				; 00000076H
	push	eax
	mov	ecx, DWORD PTR _cnv$[ebp]
	add	ecx, 116				; 00000074H
	push	ecx
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN8@ucnv_getNe:
; Line 1999
	jmp	SHORT $LN16@ucnv_getNe
$LN11@ucnv_getNe:
; Line 2000
	mov	eax, DWORD PTR _args$[ebp+8]
	cmp	eax, DWORD PTR _sourceLimit$[ebp]
	jae	SHORT $LN16@ucnv_getNe
; Line 2002
	lea	eax, DWORD PTR _buffer$[ebp+4]
	mov	DWORD PTR _args$[ebp+20], eax
; Line 2003
	mov	eax, DWORD PTR _err$[ebp]
	push	eax
	lea	ecx, DWORD PTR _args$[ebp]
	push	ecx
	call	__toUnicodeWithCallback
	add	esp, 8
; Line 2004
	mov	eax, DWORD PTR _err$[ebp]
	cmp	DWORD PTR [eax], 15			; 0000000fH
	jne	SHORT $LN5@ucnv_getNe
; Line 2005
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 0
$LN5@ucnv_getNe:
; Line 2008
	mov	eax, DWORD PTR _args$[ebp+16]
	lea	ecx, DWORD PTR _buffer$[ebp]
	sub	eax, ecx
	sar	eax, 1
	mov	DWORD PTR _length$[ebp], eax
; Line 2009
	mov	eax, DWORD PTR _err$[ebp]
	cmp	DWORD PTR [eax], 0
	jg	SHORT $LN16@ucnv_getNe
	cmp	DWORD PTR _length$[ebp], 2
	jne	SHORT $LN16@ucnv_getNe
	mov	ax, WORD PTR _buffer$[ebp+2]
	mov	WORD PTR _c2$13142[ebp], ax
	movzx	ecx, WORD PTR _c2$13142[ebp]
	and	ecx, -1024				; fffffc00H
	cmp	ecx, 56320				; 0000dc00H
	jne	SHORT $LN16@ucnv_getNe
; Line 2011
	mov	eax, DWORD PTR _c$[ebp]
	shl	eax, 10					; 0000000aH
	movzx	ecx, WORD PTR _c2$13142[ebp]
	lea	edx, DWORD PTR [eax+ecx-56613888]
	mov	DWORD PTR _c$[ebp], edx
; Line 2012
	mov	DWORD PTR _i$[ebp], 2
$LN16@ucnv_getNe:
; Line 2022
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _length$[ebp]
	jge	$LN3@ucnv_getNe
; Line 2024
	mov	eax, DWORD PTR _length$[ebp]
	sub	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR _delta$13157[ebp], eax
; Line 2025
	mov	eax, DWORD PTR _cnv$[ebp]
	movsx	ecx, BYTE PTR [eax+65]
	mov	DWORD PTR _length$[ebp], ecx
	cmp	DWORD PTR _length$[ebp], 0
	jle	SHORT $LN2@ucnv_getNe
; Line 2027
	push	1
	mov	eax, DWORD PTR _cnv$[ebp]
	add	eax, 116				; 00000074H
	push	eax
	call	_uprv_checkValidMemory
	add	esp, 8
	mov	ecx, DWORD PTR _length$[ebp]
	shl	ecx, 1
	mov	esi, esp
	push	ecx
	mov	edx, DWORD PTR _cnv$[ebp]
	add	edx, 116				; 00000074H
	push	edx
	mov	eax, DWORD PTR _delta$13157[ebp]
	mov	ecx, DWORD PTR _cnv$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2+116]
	push	edx
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@ucnv_getNe:
; Line 2029
	mov	eax, DWORD PTR _length$[ebp]
	add	eax, DWORD PTR _delta$13157[ebp]
	mov	ecx, DWORD PTR _cnv$[ebp]
	mov	BYTE PTR [ecx+65], al
; Line 2031
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	dx, WORD PTR _buffer$[ebp+ecx*2]
	mov	WORD PTR [eax+116], dx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
; Line 2032
	cmp	DWORD PTR _delta$13157[ebp], 1
	jle	SHORT $LN3@ucnv_getNe
; Line 2033
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	dx, WORD PTR _buffer$[ebp+ecx*2]
	mov	WORD PTR [eax+118], dx
$LN3@ucnv_getNe:
; Line 2037
	mov	eax, DWORD PTR _source$[ebp]
	mov	ecx, DWORD PTR _args$[ebp+8]
	mov	DWORD PTR [eax], ecx
; Line 2038
	mov	eax, DWORD PTR _c$[ebp]
$LN37@ucnv_getNe:
; Line 2039
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN42@ucnv_getNe
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 340				; 00000154H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN42@ucnv_getNe:
	DD	2
	DD	$LN41@ucnv_getNe
$LN41@ucnv_getNe:
	DD	-32					; ffffffe0H
	DD	28					; 0000001cH
	DD	$LN39@ucnv_getNe
	DD	-44					; ffffffd4H
	DD	4
	DD	$LN40@ucnv_getNe
$LN40@ucnv_getNe:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
$LN39@ucnv_getNe:
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	103					; 00000067H
	DB	115					; 00000073H
	DB	0
_ucnv_getNextUChar_56 ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_ucnv_convertEx_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _ucnv_convertEx_56
_TEXT	SEGMENT
_convert$ = -2188					; size = 4
_fromUArgs$ = -2176					; size = 28
_toUArgs$ = -2140					; size = 28
_t$ = -2104						; size = 4
_s$ = -2092						; size = 4
_myPivotTarget$ = -2080					; size = 4
_myPivotSource$ = -2068					; size = 4
_pivotBuffer$ = -2056					; size = 2048
__$ArrayPad$ = -4					; size = 4
_targetCnv$ = 8						; size = 4
_sourceCnv$ = 12					; size = 4
_target$ = 16						; size = 4
_targetLimit$ = 20					; size = 4
_source$ = 24						; size = 4
_sourceLimit$ = 28					; size = 4
_pivotStart$ = 32					; size = 4
_pivotSource$ = 36					; size = 4
_pivotTarget$ = 40					; size = 4
_pivotLimit$ = 44					; size = 4
_reset$ = 48						; size = 1
_flush$ = 52						; size = 1
_pErrorCode$ = 56					; size = 4
_ucnv_convertEx_56 PROC					; COMDAT
; Line 2050
	push	ebp
	mov	ebp, esp
	sub	esp, 2384				; 00000950H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-2384]
	mov	ecx, 596				; 00000254H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 2062
	cmp	DWORD PTR _pErrorCode$[ebp], 0
	je	SHORT $LN57@ucnv_conve
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN58@ucnv_conve
$LN57@ucnv_conve:
; Line 2063
	jmp	$LN59@ucnv_conve
$LN58@ucnv_conve:
; Line 2069
	cmp	DWORD PTR _targetCnv$[ebp], 0
	je	SHORT $LN55@ucnv_conve
	cmp	DWORD PTR _sourceCnv$[ebp], 0
	je	SHORT $LN55@ucnv_conve
	cmp	DWORD PTR _source$[ebp], 0
	je	SHORT $LN55@ucnv_conve
	mov	eax, DWORD PTR _source$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN55@ucnv_conve
	cmp	DWORD PTR _target$[ebp], 0
	je	SHORT $LN55@ucnv_conve
	mov	eax, DWORD PTR _target$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN55@ucnv_conve
	cmp	DWORD PTR _targetLimit$[ebp], 0
	jne	SHORT $LN56@ucnv_conve
$LN55@ucnv_conve:
; Line 2070
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 1
; Line 2071
	jmp	$LN59@ucnv_conve
$LN56@ucnv_conve:
; Line 2074
	mov	eax, DWORD PTR _source$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _s$[ebp], ecx
; Line 2075
	mov	eax, DWORD PTR _target$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _t$[ebp], ecx
; Line 2076
	cmp	DWORD PTR _sourceLimit$[ebp], 0
	je	SHORT $LN52@ucnv_conve
	mov	eax, DWORD PTR _sourceLimit$[ebp]
	cmp	eax, DWORD PTR _s$[ebp]
	jb	SHORT $LN53@ucnv_conve
$LN52@ucnv_conve:
	mov	eax, DWORD PTR _targetLimit$[ebp]
	cmp	eax, DWORD PTR _t$[ebp]
	jae	SHORT $LN54@ucnv_conve
$LN53@ucnv_conve:
; Line 2077
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 1
; Line 2078
	jmp	$LN59@ucnv_conve
$LN54@ucnv_conve:
; Line 2088
	cmp	DWORD PTR _sourceLimit$[ebp], 0
	je	SHORT $LN49@ucnv_conve
	mov	eax, DWORD PTR _sourceLimit$[ebp]
	sub	eax, DWORD PTR _s$[ebp]
	cmp	eax, 2147483647				; 7fffffffH
	jbe	SHORT $LN49@ucnv_conve
	mov	eax, DWORD PTR _sourceLimit$[ebp]
	cmp	eax, DWORD PTR _s$[ebp]
	ja	SHORT $LN50@ucnv_conve
$LN49@ucnv_conve:
	mov	eax, DWORD PTR _targetLimit$[ebp]
	sub	eax, DWORD PTR _t$[ebp]
	cmp	eax, 2147483647				; 7fffffffH
	jbe	SHORT $LN51@ucnv_conve
	mov	eax, DWORD PTR _targetLimit$[ebp]
	cmp	eax, DWORD PTR _t$[ebp]
	jbe	SHORT $LN51@ucnv_conve
$LN50@ucnv_conve:
; Line 2089
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 1
; Line 2090
	jmp	$LN59@ucnv_conve
$LN51@ucnv_conve:
; Line 2093
	cmp	DWORD PTR _pivotStart$[ebp], 0
	jne	SHORT $LN47@ucnv_conve
; Line 2094
	movsx	eax, BYTE PTR _flush$[ebp]
	test	eax, eax
	jne	SHORT $LN46@ucnv_conve
; Line 2096
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 1
; Line 2097
	jmp	$LN59@ucnv_conve
$LN46@ucnv_conve:
; Line 2101
	lea	eax, DWORD PTR _pivotBuffer$[ebp]
	mov	DWORD PTR _pivotStart$[ebp], eax
	mov	ecx, DWORD PTR _pivotStart$[ebp]
	mov	DWORD PTR _myPivotTarget$[ebp], ecx
	mov	edx, DWORD PTR _myPivotTarget$[ebp]
	mov	DWORD PTR _myPivotSource$[ebp], edx
; Line 2102
	lea	eax, DWORD PTR _myPivotSource$[ebp]
	mov	DWORD PTR _pivotSource$[ebp], eax
; Line 2103
	lea	eax, DWORD PTR _myPivotTarget$[ebp]
	mov	DWORD PTR _pivotTarget$[ebp], eax
; Line 2104
	lea	eax, DWORD PTR _pivotBuffer$[ebp+2048]
	mov	DWORD PTR _pivotLimit$[ebp], eax
; Line 2105
	jmp	SHORT $LN45@ucnv_conve
$LN47@ucnv_conve:
; Line 2109
	mov	eax, DWORD PTR _pivotStart$[ebp]
	cmp	eax, DWORD PTR _pivotLimit$[ebp]
	jae	SHORT $LN43@ucnv_conve
	cmp	DWORD PTR _pivotSource$[ebp], 0
	je	SHORT $LN43@ucnv_conve
	mov	eax, DWORD PTR _pivotSource$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN43@ucnv_conve
	cmp	DWORD PTR _pivotTarget$[ebp], 0
	je	SHORT $LN43@ucnv_conve
	mov	eax, DWORD PTR _pivotTarget$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN43@ucnv_conve
	cmp	DWORD PTR _pivotLimit$[ebp], 0
	jne	SHORT $LN45@ucnv_conve
$LN43@ucnv_conve:
; Line 2110
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 1
; Line 2111
	jmp	$LN59@ucnv_conve
$LN45@ucnv_conve:
; Line 2114
	cmp	DWORD PTR _sourceLimit$[ebp], 0
	jne	SHORT $LN42@ucnv_conve
; Line 2116
	mov	esi, esp
	push	0
	mov	eax, DWORD PTR _source$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	DWORD PTR __imp__strchr
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _sourceLimit$[ebp], eax
$LN42@ucnv_conve:
; Line 2119
	movsx	eax, BYTE PTR _reset$[ebp]
	test	eax, eax
	je	SHORT $LN41@ucnv_conve
; Line 2120
	mov	eax, DWORD PTR _sourceCnv$[ebp]
	push	eax
	call	_ucnv_resetToUnicode_56
	add	esp, 4
; Line 2121
	mov	eax, DWORD PTR _targetCnv$[ebp]
	push	eax
	call	_ucnv_resetFromUnicode_56
	add	esp, 4
; Line 2122
	mov	eax, DWORD PTR _pivotTarget$[ebp]
	mov	ecx, DWORD PTR _pivotStart$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _pivotSource$[ebp]
	mov	eax, DWORD PTR _pivotStart$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN40@ucnv_conve
$LN41@ucnv_conve:
; Line 2123
	mov	eax, DWORD PTR _targetCnv$[ebp]
	movsx	ecx, BYTE PTR [eax+63]
	test	ecx, ecx
	jle	SHORT $LN40@ucnv_conve
; Line 2125
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _targetLimit$[ebp]
	push	ecx
	mov	edx, DWORD PTR _target$[ebp]
	push	edx
	mov	eax, DWORD PTR _targetCnv$[ebp]
	push	eax
	call	_ucnv_outputOverflowFromUnicode
	add	esp, 20					; 00000014H
	movsx	ecx, al
	test	ecx, ecx
	je	SHORT $LN38@ucnv_conve
; Line 2127
	jmp	$LN59@ucnv_conve
$LN38@ucnv_conve:
; Line 2134
	movsx	eax, BYTE PTR _flush$[ebp]
	test	eax, eax
	jne	SHORT $LN40@ucnv_conve
	mov	eax, DWORD PTR _targetCnv$[ebp]
	movsx	ecx, BYTE PTR [eax+253]
	test	ecx, ecx
	jl	SHORT $LN40@ucnv_conve
	mov	eax, DWORD PTR _pivotSource$[ebp]
	mov	ecx, DWORD PTR _pivotTarget$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN40@ucnv_conve
	mov	eax, DWORD PTR _sourceCnv$[ebp]
	movsx	ecx, BYTE PTR [eax+65]
	test	ecx, ecx
	jne	SHORT $LN40@ucnv_conve
	mov	eax, DWORD PTR _sourceCnv$[ebp]
	movsx	ecx, BYTE PTR [eax+254]
	test	ecx, ecx
	jl	SHORT $LN40@ucnv_conve
	mov	eax, DWORD PTR _s$[ebp]
	cmp	eax, DWORD PTR _sourceLimit$[ebp]
	jne	SHORT $LN40@ucnv_conve
; Line 2136
	jmp	$LN59@ucnv_conve
$LN40@ucnv_conve:
; Line 2143
	mov	eax, DWORD PTR _sourceCnv$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx+12]
	movsx	eax, BYTE PTR [edx+69]
	cmp	eax, 4
	jne	SHORT $LN36@ucnv_conve
	mov	eax, DWORD PTR _targetCnv$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx+20]
	cmp	DWORD PTR [edx+68], 0
	je	SHORT $LN36@ucnv_conve
; Line 2144
	mov	eax, DWORD PTR _targetCnv$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [edx+68]
	mov	DWORD PTR _convert$[ebp], eax
; Line 2145
	jmp	SHORT $LN35@ucnv_conve
$LN36@ucnv_conve:
; Line 2147
	mov	eax, DWORD PTR _targetCnv$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx+12]
	movsx	eax, BYTE PTR [edx+69]
	cmp	eax, 4
	jne	SHORT $LN34@ucnv_conve
	mov	eax, DWORD PTR _sourceCnv$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx+20]
	cmp	DWORD PTR [edx+64], 0
	je	SHORT $LN34@ucnv_conve
; Line 2148
	mov	eax, DWORD PTR _sourceCnv$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [edx+64]
	mov	DWORD PTR _convert$[ebp], eax
; Line 2149
	jmp	SHORT $LN35@ucnv_conve
$LN34@ucnv_conve:
; Line 2150
	mov	DWORD PTR _convert$[ebp], 0
$LN35@ucnv_conve:
; Line 2172
	cmp	DWORD PTR _convert$[ebp], 0
	je	SHORT $LN32@ucnv_conve
	mov	eax, DWORD PTR _pivotLimit$[ebp]
	sub	eax, DWORD PTR _pivotStart$[ebp]
	sar	eax, 1
	cmp	eax, 32					; 00000020H
	jle	SHORT $LN32@ucnv_conve
; Line 2173
	mov	eax, DWORD PTR _pivotStart$[ebp]
	add	eax, 64					; 00000040H
	mov	DWORD PTR _pivotLimit$[ebp], eax
$LN32@ucnv_conve:
; Line 2177
	mov	eax, DWORD PTR _targetCnv$[ebp]
	mov	DWORD PTR _fromUArgs$[ebp+4], eax
; Line 2178
	mov	BYTE PTR _fromUArgs$[ebp+2], 0
; Line 2179
	mov	DWORD PTR _fromUArgs$[ebp+24], 0
; Line 2180
	mov	eax, DWORD PTR _target$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _fromUArgs$[ebp+16], ecx
; Line 2181
	mov	eax, DWORD PTR _targetLimit$[ebp]
	mov	DWORD PTR _fromUArgs$[ebp+20], eax
; Line 2182
	mov	eax, 28					; 0000001cH
	mov	WORD PTR _fromUArgs$[ebp], ax
; Line 2184
	mov	eax, DWORD PTR _sourceCnv$[ebp]
	mov	DWORD PTR _toUArgs$[ebp+4], eax
; Line 2185
	mov	al, BYTE PTR _flush$[ebp]
	mov	BYTE PTR _toUArgs$[ebp+2], al
; Line 2186
	mov	DWORD PTR _toUArgs$[ebp+24], 0
; Line 2187
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR _toUArgs$[ebp+8], eax
; Line 2188
	mov	eax, DWORD PTR _sourceLimit$[ebp]
	mov	DWORD PTR _toUArgs$[ebp+12], eax
; Line 2189
	mov	eax, DWORD PTR _pivotLimit$[ebp]
	mov	DWORD PTR _toUArgs$[ebp+20], eax
; Line 2190
	mov	eax, 28					; 0000001cH
	mov	WORD PTR _toUArgs$[ebp], ax
; Line 2199
	mov	DWORD PTR _t$[ebp], 0
	mov	eax, DWORD PTR _t$[ebp]
	mov	DWORD PTR _s$[ebp], eax
$LN31@ucnv_conve:
; Line 2225
	mov	eax, DWORD PTR _pivotSource$[ebp]
	mov	ecx, DWORD PTR _pivotTarget$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jb	SHORT $LN28@ucnv_conve
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	cmp	DWORD PTR [eax], 0
	jg	SHORT $LN28@ucnv_conve
	mov	eax, DWORD PTR _targetCnv$[ebp]
	movsx	ecx, BYTE PTR [eax+253]
	test	ecx, ecx
	jl	SHORT $LN28@ucnv_conve
	movsx	eax, BYTE PTR _fromUArgs$[ebp+2]
	test	eax, eax
	je	SHORT $LN29@ucnv_conve
$LN28@ucnv_conve:
; Line 2226
	mov	eax, DWORD PTR _pivotSource$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _fromUArgs$[ebp+8], ecx
; Line 2227
	mov	eax, DWORD PTR _pivotTarget$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _fromUArgs$[ebp+12], ecx
; Line 2228
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	lea	ecx, DWORD PTR _fromUArgs$[ebp]
	push	ecx
	call	__fromUnicodeWithCallback
	add	esp, 8
; Line 2229
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN29@ucnv_conve
; Line 2231
	mov	eax, DWORD PTR _pivotSource$[ebp]
	mov	ecx, DWORD PTR _fromUArgs$[ebp+8]
	mov	DWORD PTR [eax], ecx
; Line 2232
	jmp	$LN30@ucnv_conve
$LN29@ucnv_conve:
; Line 2242
	mov	eax, DWORD PTR _pivotTarget$[ebp]
	mov	ecx, DWORD PTR _pivotStart$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _pivotSource$[ebp]
	mov	eax, DWORD PTR _pivotStart$[ebp]
	mov	DWORD PTR [edx], eax
; Line 2251
	mov	eax, DWORD PTR _sourceCnv$[ebp]
	movsx	ecx, BYTE PTR [eax+65]
	test	ecx, ecx
	jle	SHORT $LN26@ucnv_conve
; Line 2252
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _pivotLimit$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pivotTarget$[ebp]
	push	edx
	mov	eax, DWORD PTR _sourceCnv$[ebp]
	push	eax
	call	_ucnv_outputOverflowToUnicode
	add	esp, 20					; 00000014H
	movsx	ecx, al
	test	ecx, ecx
	je	SHORT $LN25@ucnv_conve
; Line 2254
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 0
$LN25@ucnv_conve:
; Line 2256
	jmp	$LN31@ucnv_conve
$LN26@ucnv_conve:
; Line 2269
	mov	eax, DWORD PTR _toUArgs$[ebp+8]
	cmp	eax, DWORD PTR _sourceLimit$[ebp]
	jne	SHORT $LN24@ucnv_conve
	mov	eax, DWORD PTR _sourceCnv$[ebp]
	movsx	ecx, BYTE PTR [eax+254]
	test	ecx, ecx
	jl	SHORT $LN24@ucnv_conve
	mov	eax, DWORD PTR _sourceCnv$[ebp]
	movsx	ecx, BYTE PTR [eax+36]
	test	ecx, ecx
	jne	SHORT $LN24@ucnv_conve
	movsx	eax, BYTE PTR _flush$[ebp]
	test	eax, eax
	je	SHORT $LN23@ucnv_conve
	movsx	eax, BYTE PTR _fromUArgs$[ebp+2]
	test	eax, eax
	je	SHORT $LN24@ucnv_conve
$LN23@ucnv_conve:
; Line 2271
	jmp	$LN30@ucnv_conve
$LN24@ucnv_conve:
; Line 2279
	cmp	DWORD PTR _convert$[ebp], 0
	je	$LN22@ucnv_conve
	mov	eax, DWORD PTR _targetCnv$[ebp]
	cmp	DWORD PTR [eax+180], 0
	jge	$LN22@ucnv_conve
	mov	eax, DWORD PTR _sourceCnv$[ebp]
	movsx	ecx, BYTE PTR [eax+254]
	test	ecx, ecx
	jne	$LN22@ucnv_conve
; Line 2280
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	cmp	DWORD PTR [eax], -127			; ffffff81H
	jne	SHORT $LN21@ucnv_conve
; Line 2282
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 0
$LN21@ucnv_conve:
; Line 2284
	mov	esi, esp
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	lea	ecx, DWORD PTR _toUArgs$[ebp]
	push	ecx
	lea	edx, DWORD PTR _fromUArgs$[ebp]
	push	edx
	call	DWORD PTR _convert$[ebp]
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2285
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	cmp	DWORD PTR [eax], 15			; 0000000fH
	jne	SHORT $LN20@ucnv_conve
; Line 2286
	jmp	$LN30@ucnv_conve
	jmp	$LN22@ucnv_conve
$LN20@ucnv_conve:
; Line 2287
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN18@ucnv_conve
; Line 2288
	mov	eax, DWORD PTR _sourceCnv$[ebp]
	movsx	ecx, BYTE PTR [eax+36]
	test	ecx, ecx
	jle	SHORT $LN17@ucnv_conve
; Line 2298
	jmp	SHORT $LN16@ucnv_conve
$LN17@ucnv_conve:
; Line 2303
	mov	eax, DWORD PTR _pivotStart$[ebp]
	add	eax, 2
	mov	ecx, DWORD PTR _pivotTarget$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	edx, DWORD PTR _pivotSource$[ebp]
	mov	eax, DWORD PTR _pivotTarget$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
; Line 2308
	jmp	$LN31@ucnv_conve
$LN16@ucnv_conve:
; Line 2309
	jmp	SHORT $LN22@ucnv_conve
$LN18@ucnv_conve:
; Line 2310
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	cmp	DWORD PTR [eax], -127			; ffffff81H
	jne	SHORT $LN14@ucnv_conve
; Line 2315
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 0
	jmp	SHORT $LN22@ucnv_conve
$LN14@ucnv_conve:
; Line 2321
	movsx	eax, BYTE PTR _flush$[ebp]
	test	eax, eax
	je	SHORT $LN12@ucnv_conve
	mov	eax, DWORD PTR _sourceCnv$[ebp]
	movsx	ecx, BYTE PTR [eax+36]
	test	ecx, ecx
	jle	SHORT $LN12@ucnv_conve
; Line 2328
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 11			; 0000000bH
; Line 2329
	jmp	SHORT $LN22@ucnv_conve
$LN12@ucnv_conve:
; Line 2331
	movsx	eax, BYTE PTR _flush$[ebp]
	test	eax, eax
	je	SHORT $LN10@ucnv_conve
; Line 2333
	push	0
	push	1
	mov	eax, DWORD PTR _sourceCnv$[ebp]
	push	eax
	call	__reset
	add	esp, 12					; 0000000cH
; Line 2334
	push	0
	push	2
	mov	eax, DWORD PTR _targetCnv$[ebp]
	push	eax
	call	__reset
	add	esp, 12					; 0000000cH
$LN10@ucnv_conve:
; Line 2338
	jmp	$LN30@ucnv_conve
$LN22@ucnv_conve:
; Line 2351
	mov	eax, DWORD PTR _pivotStart$[ebp]
	mov	DWORD PTR _toUArgs$[ebp+16], eax
; Line 2353
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	lea	ecx, DWORD PTR _toUArgs$[ebp]
	push	ecx
	call	__toUnicodeWithCallback
	add	esp, 8
; Line 2354
	mov	eax, DWORD PTR _pivotTarget$[ebp]
	mov	ecx, DWORD PTR _toUArgs$[ebp+16]
	mov	DWORD PTR [eax], ecx
; Line 2355
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	cmp	DWORD PTR [eax], 15			; 0000000fH
	jne	SHORT $LN9@ucnv_conve
; Line 2357
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 0
	jmp	SHORT $LN8@ucnv_conve
$LN9@ucnv_conve:
; Line 2358
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	cmp	DWORD PTR [eax], 0
	jg	SHORT $LN6@ucnv_conve
	movsx	eax, BYTE PTR _flush$[ebp]
	test	eax, eax
	jne	SHORT $LN8@ucnv_conve
	mov	eax, DWORD PTR _pivotTarget$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR _pivotStart$[ebp]
	jne	SHORT $LN8@ucnv_conve
$LN6@ucnv_conve:
; Line 2360
	jmp	SHORT $LN30@ucnv_conve
$LN8@ucnv_conve:
; Line 2373
	movsx	eax, BYTE PTR _flush$[ebp]
	test	eax, eax
	je	SHORT $LN5@ucnv_conve
	mov	eax, DWORD PTR _toUArgs$[ebp+8]
	cmp	eax, DWORD PTR _sourceLimit$[ebp]
	jne	SHORT $LN5@ucnv_conve
	mov	eax, DWORD PTR _sourceCnv$[ebp]
	movsx	ecx, BYTE PTR [eax+254]
	test	ecx, ecx
	jl	SHORT $LN5@ucnv_conve
	mov	eax, DWORD PTR _sourceCnv$[ebp]
	movsx	ecx, BYTE PTR [eax+65]
	test	ecx, ecx
	jne	SHORT $LN5@ucnv_conve
; Line 2374
	mov	BYTE PTR _fromUArgs$[ebp+2], 1
$LN5@ucnv_conve:
; Line 2376
	jmp	$LN31@ucnv_conve
$LN30@ucnv_conve:
; Line 2385
	mov	eax, DWORD PTR _source$[ebp]
	mov	ecx, DWORD PTR _toUArgs$[ebp+8]
	mov	DWORD PTR [eax], ecx
; Line 2386
	mov	eax, DWORD PTR _target$[ebp]
	mov	ecx, DWORD PTR _fromUArgs$[ebp+16]
	mov	DWORD PTR [eax], ecx
; Line 2389
	movsx	eax, BYTE PTR _flush$[ebp]
	test	eax, eax
	je	SHORT $LN59@ucnv_conve
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	cmp	DWORD PTR [eax], 0
	jg	SHORT $LN59@ucnv_conve
; Line 2390
	mov	eax, DWORD PTR _target$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR _targetLimit$[ebp]
	je	SHORT $LN3@ucnv_conve
; Line 2391
	mov	eax, DWORD PTR _target$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	BYTE PTR [ecx], 0
; Line 2392
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	cmp	DWORD PTR [eax], -124			; ffffff84H
	jne	SHORT $LN2@ucnv_conve
; Line 2393
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 0
$LN2@ucnv_conve:
; Line 2395
	jmp	SHORT $LN59@ucnv_conve
$LN3@ucnv_conve:
; Line 2396
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], -124			; ffffff84H
$LN59@ucnv_conve:
; Line 2399
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN69@ucnv_conve
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 2384				; 00000950H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN69@ucnv_conve:
	DD	5
	DD	$LN68@ucnv_conve
$LN68@ucnv_conve:
	DD	-2056					; fffff7f8H
	DD	2048					; 00000800H
	DD	$LN63@ucnv_conve
	DD	-2068					; fffff7ecH
	DD	4
	DD	$LN64@ucnv_conve
	DD	-2080					; fffff7e0H
	DD	4
	DD	$LN65@ucnv_conve
	DD	-2140					; fffff7a4H
	DD	28					; 0000001cH
	DD	$LN66@ucnv_conve
	DD	-2176					; fffff780H
	DD	28					; 0000001cH
	DD	$LN67@ucnv_conve
$LN67@ucnv_conve:
	DB	102					; 00000066H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	109					; 0000006dH
	DB	85					; 00000055H
	DB	65					; 00000041H
	DB	114					; 00000072H
	DB	103					; 00000067H
	DB	115					; 00000073H
	DB	0
$LN66@ucnv_conve:
	DB	116					; 00000074H
	DB	111					; 0000006fH
	DB	85					; 00000055H
	DB	65					; 00000041H
	DB	114					; 00000072H
	DB	103					; 00000067H
	DB	115					; 00000073H
	DB	0
$LN65@ucnv_conve:
	DB	109					; 0000006dH
	DB	121					; 00000079H
	DB	80					; 00000050H
	DB	105					; 00000069H
	DB	118					; 00000076H
	DB	111					; 0000006fH
	DB	116					; 00000074H
	DB	84					; 00000054H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	103					; 00000067H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	0
$LN64@ucnv_conve:
	DB	109					; 0000006dH
	DB	121					; 00000079H
	DB	80					; 00000050H
	DB	105					; 00000069H
	DB	118					; 00000076H
	DB	111					; 0000006fH
	DB	116					; 00000074H
	DB	83					; 00000053H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	0
$LN63@ucnv_conve:
	DB	112					; 00000070H
	DB	105					; 00000069H
	DB	118					; 00000076H
	DB	111					; 0000006fH
	DB	116					; 00000074H
	DB	66					; 00000042H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
_ucnv_convertEx_56 ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_ucnv_convert_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _ucnv_convert_56
_TEXT	SEGMENT
_targetLength$ = -572					; size = 4
_outConverter$ = -560					; size = 4
_inConverter$ = -548					; size = 4
_out$ = -536						; size = 260
_in$ = -268						; size = 260
__$ArrayPad$ = -4					; size = 4
_toConverterName$ = 8					; size = 4
_fromConverterName$ = 12				; size = 4
_target$ = 16						; size = 4
_targetCapacity$ = 20					; size = 4
_source$ = 24						; size = 4
_sourceLength$ = 28					; size = 4
_pErrorCode$ = 32					; size = 4
_ucnv_convert_56 PROC					; COMDAT
; Line 2479
	push	ebp
	mov	ebp, esp
	sub	esp, 768				; 00000300H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-768]
	mov	ecx, 192				; 000000c0H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 2484
	cmp	DWORD PTR _pErrorCode$[ebp], 0
	je	SHORT $LN7@ucnv_conve@2
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN8@ucnv_conve@2
$LN7@ucnv_conve@2:
; Line 2485
	xor	eax, eax
	jmp	$LN9@ucnv_conve@2
$LN8@ucnv_conve@2:
; Line 2490
	cmp	DWORD PTR _source$[ebp], 0
	je	SHORT $LN5@ucnv_conve@2
	cmp	DWORD PTR _sourceLength$[ebp], -1
	jl	SHORT $LN5@ucnv_conve@2
	cmp	DWORD PTR _targetCapacity$[ebp], 0
	jl	SHORT $LN5@ucnv_conve@2
	cmp	DWORD PTR _targetCapacity$[ebp], 0
	jle	SHORT $LN6@ucnv_conve@2
	cmp	DWORD PTR _target$[ebp], 0
	jne	SHORT $LN6@ucnv_conve@2
$LN5@ucnv_conve@2:
; Line 2491
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 1
; Line 2492
	xor	eax, eax
	jmp	$LN9@ucnv_conve@2
$LN6@ucnv_conve@2:
; Line 2496
	cmp	DWORD PTR _sourceLength$[ebp], 0
	je	SHORT $LN3@ucnv_conve@2
	cmp	DWORD PTR _sourceLength$[ebp], 0
	jge	SHORT $LN4@ucnv_conve@2
	mov	eax, DWORD PTR _source$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN4@ucnv_conve@2
$LN3@ucnv_conve@2:
; Line 2497
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _targetCapacity$[ebp]
	push	ecx
	mov	edx, DWORD PTR _target$[ebp]
	push	edx
	call	_u_terminateChars_56
	add	esp, 16					; 00000010H
	jmp	$LN9@ucnv_conve@2
$LN4@ucnv_conve@2:
; Line 2501
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _fromConverterName$[ebp]
	push	ecx
	lea	edx, DWORD PTR _in$[ebp]
	push	edx
	call	_ucnv_createConverter_56
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _inConverter$[ebp], eax
; Line 2502
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN2@ucnv_conve@2
; Line 2503
	xor	eax, eax
	jmp	$LN9@ucnv_conve@2
$LN2@ucnv_conve@2:
; Line 2506
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _toConverterName$[ebp]
	push	ecx
	lea	edx, DWORD PTR _out$[ebp]
	push	edx
	call	_ucnv_createConverter_56
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _outConverter$[ebp], eax
; Line 2507
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN1@ucnv_conve@2
; Line 2508
	mov	eax, DWORD PTR _inConverter$[ebp]
	push	eax
	call	_ucnv_close_56
	add	esp, 4
; Line 2509
	xor	eax, eax
	jmp	SHORT $LN9@ucnv_conve@2
$LN1@ucnv_conve@2:
; Line 2515
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sourceLength$[ebp]
	push	ecx
	mov	edx, DWORD PTR _source$[ebp]
	push	edx
	mov	eax, DWORD PTR _targetCapacity$[ebp]
	push	eax
	mov	ecx, DWORD PTR _target$[ebp]
	push	ecx
	mov	edx, DWORD PTR _inConverter$[ebp]
	push	edx
	mov	eax, DWORD PTR _outConverter$[ebp]
	push	eax
	call	_ucnv_internalConvert
	add	esp, 28					; 0000001cH
	mov	DWORD PTR _targetLength$[ebp], eax
; Line 2517
	mov	eax, DWORD PTR _inConverter$[ebp]
	push	eax
	call	_ucnv_close_56
	add	esp, 4
; Line 2518
	mov	eax, DWORD PTR _outConverter$[ebp]
	push	eax
	call	_ucnv_close_56
	add	esp, 4
; Line 2520
	mov	eax, DWORD PTR _targetLength$[ebp]
$LN9@ucnv_conve@2:
; Line 2521
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@ucnv_conve@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 768				; 00000300H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN14@ucnv_conve@2:
	DD	2
	DD	$LN13@ucnv_conve@2
$LN13@ucnv_conve@2:
	DD	-268					; fffffef4H
	DD	260					; 00000104H
	DD	$LN11@ucnv_conve@2
	DD	-536					; fffffde8H
	DD	260					; 00000104H
	DD	$LN12@ucnv_conve@2
$LN12@ucnv_conve@2:
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	0
$LN11@ucnv_conve@2:
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	0
_ucnv_convert_56 ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _ucnv_internalConvert
_TEXT	SEGMENT
_targetBuffer$13318 = -3160				; size = 1024
_targetLength$ = -2128					; size = 4
_targetLimit$ = -2116					; size = 4
_sourceLimit$ = -2104					; size = 4
_myTarget$ = -2092					; size = 4
_pivot2$ = -2080					; size = 4
_pivot$ = -2068						; size = 4
_pivotBuffer$ = -2056					; size = 2048
__$ArrayPad$ = -4					; size = 4
_outConverter$ = 8					; size = 4
_inConverter$ = 12					; size = 4
_target$ = 16						; size = 4
_targetCapacity$ = 20					; size = 4
_source$ = 24						; size = 4
_sourceLength$ = 28					; size = 4
_pErrorCode$ = 32					; size = 4
_ucnv_internalConvert PROC				; COMDAT
; Line 2406
	push	ebp
	mov	ebp, esp
	sub	esp, 3356				; 00000d1cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-3356]
	mov	ecx, 839				; 00000347H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 2413
	mov	DWORD PTR _targetLength$[ebp], 0
; Line 2416
	cmp	DWORD PTR _sourceLength$[ebp], 0
	jge	SHORT $LN9@ucnv_inter
; Line 2417
	mov	esi, esp
	push	0
	mov	eax, DWORD PTR _source$[ebp]
	push	eax
	call	DWORD PTR __imp__strchr
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _sourceLimit$[ebp], eax
; Line 2418
	jmp	SHORT $LN8@ucnv_inter
$LN9@ucnv_inter:
; Line 2419
	mov	eax, DWORD PTR _source$[ebp]
	add	eax, DWORD PTR _sourceLength$[ebp]
	mov	DWORD PTR _sourceLimit$[ebp], eax
$LN8@ucnv_inter:
; Line 2423
	mov	eax, DWORD PTR _source$[ebp]
	cmp	eax, DWORD PTR _sourceLimit$[ebp]
	jne	SHORT $LN7@ucnv_inter
; Line 2424
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _targetCapacity$[ebp]
	push	ecx
	mov	edx, DWORD PTR _target$[ebp]
	push	edx
	call	_u_terminateChars_56
	add	esp, 16					; 00000010H
	jmp	$LN10@ucnv_inter
$LN7@ucnv_inter:
; Line 2427
	lea	eax, DWORD PTR _pivotBuffer$[ebp]
	mov	DWORD PTR _pivot2$[ebp], eax
	mov	ecx, DWORD PTR _pivot2$[ebp]
	mov	DWORD PTR _pivot$[ebp], ecx
; Line 2428
	mov	eax, DWORD PTR _target$[ebp]
	mov	DWORD PTR _myTarget$[ebp], eax
; Line 2429
	mov	DWORD PTR _targetLength$[ebp], 0
; Line 2431
	cmp	DWORD PTR _targetCapacity$[ebp], 0
	jle	SHORT $LN6@ucnv_inter
; Line 2433
	mov	eax, DWORD PTR _target$[ebp]
	add	eax, DWORD PTR _targetCapacity$[ebp]
	mov	DWORD PTR _targetLimit$[ebp], eax
; Line 2440
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	push	1
	push	0
	lea	ecx, DWORD PTR _pivotBuffer$[ebp+2048]
	push	ecx
	lea	edx, DWORD PTR _pivot2$[ebp]
	push	edx
	lea	eax, DWORD PTR _pivot$[ebp]
	push	eax
	lea	ecx, DWORD PTR _pivotBuffer$[ebp]
	push	ecx
	mov	edx, DWORD PTR _sourceLimit$[ebp]
	push	edx
	lea	eax, DWORD PTR _source$[ebp]
	push	eax
	mov	ecx, DWORD PTR _targetLimit$[ebp]
	push	ecx
	lea	edx, DWORD PTR _myTarget$[ebp]
	push	edx
	mov	eax, DWORD PTR _inConverter$[ebp]
	push	eax
	mov	ecx, DWORD PTR _outConverter$[ebp]
	push	ecx
	call	_ucnv_convertEx_56
	add	esp, 52					; 00000034H
; Line 2441
	mov	eax, DWORD PTR _myTarget$[ebp]
	sub	eax, DWORD PTR _target$[ebp]
	mov	DWORD PTR _targetLength$[ebp], eax
$LN6@ucnv_inter:
; Line 2449
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	cmp	DWORD PTR [eax], 15			; 0000000fH
	je	SHORT $LN4@ucnv_inter
	cmp	DWORD PTR _targetCapacity$[ebp], 0
	jne	$LN5@ucnv_inter
$LN4@ucnv_inter:
; Line 2453
	lea	eax, DWORD PTR _targetBuffer$13318[ebp+1024]
	mov	DWORD PTR _targetLimit$[ebp], eax
$LN3@ucnv_inter:
; Line 2455
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 0
; Line 2456
	lea	eax, DWORD PTR _targetBuffer$13318[ebp]
	mov	DWORD PTR _myTarget$[ebp], eax
; Line 2463
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	push	1
	push	0
	lea	ecx, DWORD PTR _pivotBuffer$[ebp+2048]
	push	ecx
	lea	edx, DWORD PTR _pivot2$[ebp]
	push	edx
	lea	eax, DWORD PTR _pivot$[ebp]
	push	eax
	lea	ecx, DWORD PTR _pivotBuffer$[ebp]
	push	ecx
	mov	edx, DWORD PTR _sourceLimit$[ebp]
	push	edx
	lea	eax, DWORD PTR _source$[ebp]
	push	eax
	mov	ecx, DWORD PTR _targetLimit$[ebp]
	push	ecx
	lea	edx, DWORD PTR _myTarget$[ebp]
	push	edx
	mov	eax, DWORD PTR _inConverter$[ebp]
	push	eax
	mov	ecx, DWORD PTR _outConverter$[ebp]
	push	ecx
	call	_ucnv_convertEx_56
	add	esp, 52					; 00000034H
; Line 2464
	mov	eax, DWORD PTR _myTarget$[ebp]
	lea	ecx, DWORD PTR _targetBuffer$13318[ebp]
	sub	eax, ecx
	add	eax, DWORD PTR _targetLength$[ebp]
	mov	DWORD PTR _targetLength$[ebp], eax
; Line 2465
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	cmp	DWORD PTR [eax], 15			; 0000000fH
	je	$LN3@ucnv_inter
; Line 2468
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _targetLength$[ebp]
	push	ecx
	mov	edx, DWORD PTR _targetCapacity$[ebp]
	push	edx
	mov	eax, DWORD PTR _target$[ebp]
	push	eax
	call	_u_terminateChars_56
	add	esp, 16					; 00000010H
	jmp	SHORT $LN10@ucnv_inter
$LN5@ucnv_inter:
; Line 2472
	mov	eax, DWORD PTR _targetLength$[ebp]
$LN10@ucnv_inter:
; Line 2473
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN18@ucnv_inter
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 3356				; 00000d1cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN18@ucnv_inter:
	DD	5
	DD	$LN17@ucnv_inter
$LN17@ucnv_inter:
	DD	-2056					; fffff7f8H
	DD	2048					; 00000800H
	DD	$LN12@ucnv_inter
	DD	-2068					; fffff7ecH
	DD	4
	DD	$LN13@ucnv_inter
	DD	-2080					; fffff7e0H
	DD	4
	DD	$LN14@ucnv_inter
	DD	-2092					; fffff7d4H
	DD	4
	DD	$LN15@ucnv_inter
	DD	-3160					; fffff3a8H
	DD	1024					; 00000400H
	DD	$LN16@ucnv_inter
$LN16@ucnv_inter:
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	103					; 00000067H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	66					; 00000042H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
$LN15@ucnv_inter:
	DB	109					; 0000006dH
	DB	121					; 00000079H
	DB	84					; 00000054H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	103					; 00000067H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	0
$LN14@ucnv_inter:
	DB	112					; 00000070H
	DB	105					; 00000069H
	DB	118					; 00000076H
	DB	111					; 0000006fH
	DB	116					; 00000074H
	DB	50					; 00000032H
	DB	0
$LN13@ucnv_inter:
	DB	112					; 00000070H
	DB	105					; 00000069H
	DB	118					; 00000076H
	DB	111					; 0000006fH
	DB	116					; 00000074H
	DB	0
$LN12@ucnv_inter:
	DB	112					; 00000070H
	DB	105					; 00000069H
	DB	118					; 00000076H
	DB	111					; 0000006fH
	DB	116					; 00000074H
	DB	66					; 00000042H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
_ucnv_internalConvert ENDP
_TEXT	ENDS
PUBLIC	_ucnv_toAlgorithmic_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _ucnv_toAlgorithmic_56
_TEXT	SEGMENT
_algorithmicType$ = 8					; size = 4
_cnv$ = 12						; size = 4
_target$ = 16						; size = 4
_targetCapacity$ = 20					; size = 4
_source$ = 24						; size = 4
_sourceLength$ = 28					; size = 4
_pErrorCode$ = 32					; size = 4
_ucnv_toAlgorithmic_56 PROC				; COMDAT
; Line 2586
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2590
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sourceLength$[ebp]
	push	ecx
	mov	edx, DWORD PTR _source$[ebp]
	push	edx
	mov	eax, DWORD PTR _targetCapacity$[ebp]
	push	eax
	mov	ecx, DWORD PTR _target$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cnv$[ebp]
	push	edx
	mov	eax, DWORD PTR _algorithmicType$[ebp]
	push	eax
	push	1
	call	_ucnv_convertAlgorithmic
	add	esp, 32					; 00000020H
; Line 2591
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ucnv_toAlgorithmic_56 ENDP
_TEXT	ENDS
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	__$ArrayPad$
EXTRN	_ucnv_createAlgorithmicConverter_56:PROC
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT _ucnv_convertAlgorithmic
_TEXT	SEGMENT
_targetLength$ = -316					; size = 4
_from$ = -304						; size = 4
_to$ = -292						; size = 4
_algoConverter$ = -280					; size = 4
_algoConverterStatic$ = -268				; size = 260
__$ArrayPad$ = -4					; size = 4
_convertToAlgorithmic$ = 8				; size = 1
_algorithmicType$ = 12					; size = 4
_cnv$ = 16						; size = 4
_target$ = 20						; size = 4
_targetCapacity$ = 24					; size = 4
_source$ = 28						; size = 4
_sourceLength$ = 32					; size = 4
_pErrorCode$ = 36					; size = 4
_ucnv_convertAlgorithmic PROC				; COMDAT
; Line 2530
	push	ebp
	mov	ebp, esp
	sub	esp, 512				; 00000200H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-512]
	mov	ecx, 128				; 00000080H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 2535
	cmp	DWORD PTR _pErrorCode$[ebp], 0
	je	SHORT $LN8@ucnv_conve@3
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN9@ucnv_conve@3
$LN8@ucnv_conve@3:
; Line 2536
	xor	eax, eax
	jmp	$LN10@ucnv_conve@3
$LN9@ucnv_conve@3:
; Line 2541
	cmp	DWORD PTR _cnv$[ebp], 0
	je	SHORT $LN6@ucnv_conve@3
	cmp	DWORD PTR _source$[ebp], 0
	je	SHORT $LN6@ucnv_conve@3
	cmp	DWORD PTR _sourceLength$[ebp], -1
	jl	SHORT $LN6@ucnv_conve@3
	cmp	DWORD PTR _targetCapacity$[ebp], 0
	jl	SHORT $LN6@ucnv_conve@3
	cmp	DWORD PTR _targetCapacity$[ebp], 0
	jle	SHORT $LN7@ucnv_conve@3
	cmp	DWORD PTR _target$[ebp], 0
	jne	SHORT $LN7@ucnv_conve@3
$LN6@ucnv_conve@3:
; Line 2542
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 1
; Line 2543
	xor	eax, eax
	jmp	$LN10@ucnv_conve@3
$LN7@ucnv_conve@3:
; Line 2547
	cmp	DWORD PTR _sourceLength$[ebp], 0
	je	SHORT $LN4@ucnv_conve@3
	cmp	DWORD PTR _sourceLength$[ebp], 0
	jge	SHORT $LN5@ucnv_conve@3
	mov	eax, DWORD PTR _source$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN5@ucnv_conve@3
$LN4@ucnv_conve@3:
; Line 2548
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _targetCapacity$[ebp]
	push	ecx
	mov	edx, DWORD PTR _target$[ebp]
	push	edx
	call	_u_terminateChars_56
	add	esp, 16					; 00000010H
	jmp	$LN10@ucnv_conve@3
$LN5@ucnv_conve@3:
; Line 2553
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	push	0
	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	mov	ecx, DWORD PTR _algorithmicType$[ebp]
	push	ecx
	lea	edx, DWORD PTR _algoConverterStatic$[ebp]
	push	edx
	call	_ucnv_createAlgorithmicConverter_56
	add	esp, 20					; 00000014H
	mov	DWORD PTR _algoConverter$[ebp], eax
; Line 2554
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN3@ucnv_conve@3
; Line 2555
	xor	eax, eax
	jmp	$LN10@ucnv_conve@3
$LN3@ucnv_conve@3:
; Line 2559
	movsx	eax, BYTE PTR _convertToAlgorithmic$[ebp]
	test	eax, eax
	je	SHORT $LN2@ucnv_conve@3
; Line 2561
	mov	eax, DWORD PTR _cnv$[ebp]
	push	eax
	call	_ucnv_resetToUnicode_56
	add	esp, 4
; Line 2562
	mov	eax, DWORD PTR _algoConverter$[ebp]
	mov	DWORD PTR _to$[ebp], eax
; Line 2563
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	DWORD PTR _from$[ebp], eax
; Line 2564
	jmp	SHORT $LN1@ucnv_conve@3
$LN2@ucnv_conve@3:
; Line 2566
	mov	eax, DWORD PTR _cnv$[ebp]
	push	eax
	call	_ucnv_resetFromUnicode_56
	add	esp, 4
; Line 2567
	mov	eax, DWORD PTR _algoConverter$[ebp]
	mov	DWORD PTR _from$[ebp], eax
; Line 2568
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	DWORD PTR _to$[ebp], eax
$LN1@ucnv_conve@3:
; Line 2574
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sourceLength$[ebp]
	push	ecx
	mov	edx, DWORD PTR _source$[ebp]
	push	edx
	mov	eax, DWORD PTR _targetCapacity$[ebp]
	push	eax
	mov	ecx, DWORD PTR _target$[ebp]
	push	ecx
	mov	edx, DWORD PTR _from$[ebp]
	push	edx
	mov	eax, DWORD PTR _to$[ebp]
	push	eax
	call	_ucnv_internalConvert
	add	esp, 28					; 0000001cH
	mov	DWORD PTR _targetLength$[ebp], eax
; Line 2576
	mov	eax, DWORD PTR _algoConverter$[ebp]
	push	eax
	call	_ucnv_close_56
	add	esp, 4
; Line 2578
	mov	eax, DWORD PTR _targetLength$[ebp]
$LN10@ucnv_conve@3:
; Line 2579
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@ucnv_conve@3
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 512				; 00000200H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN14@ucnv_conve@3:
	DD	1
	DD	$LN13@ucnv_conve@3
$LN13@ucnv_conve@3:
	DD	-268					; fffffef4H
	DD	260					; 00000104H
	DD	$LN12@ucnv_conve@3
$LN12@ucnv_conve@3:
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	103					; 00000067H
	DB	111					; 0000006fH
	DB	67					; 00000043H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	118					; 00000076H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	105					; 00000069H
	DB	99					; 00000063H
	DB	0
_ucnv_convertAlgorithmic ENDP
_TEXT	ENDS
PUBLIC	_ucnv_fromAlgorithmic_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _ucnv_fromAlgorithmic_56
_TEXT	SEGMENT
_cnv$ = 8						; size = 4
_algorithmicType$ = 12					; size = 4
_target$ = 16						; size = 4
_targetCapacity$ = 20					; size = 4
_source$ = 24						; size = 4
_sourceLength$ = 28					; size = 4
_pErrorCode$ = 32					; size = 4
_ucnv_fromAlgorithmic_56 PROC				; COMDAT
; Line 2598
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2602
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sourceLength$[ebp]
	push	ecx
	mov	edx, DWORD PTR _source$[ebp]
	push	edx
	mov	eax, DWORD PTR _targetCapacity$[ebp]
	push	eax
	mov	ecx, DWORD PTR _target$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cnv$[ebp]
	push	edx
	mov	eax, DWORD PTR _algorithmicType$[ebp]
	push	eax
	push	0
	call	_ucnv_convertAlgorithmic
	add	esp, 32					; 00000020H
; Line 2603
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ucnv_fromAlgorithmic_56 ENDP
_TEXT	ENDS
PUBLIC	_ucnv_getType_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _ucnv_getType_56
_TEXT	SEGMENT
_type$ = -5						; size = 1
_converter$ = 8						; size = 4
_ucnv_getType_56 PROC					; COMDAT
; Line 2607
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2608
	mov	eax, DWORD PTR _converter$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx+12]
	mov	al, BYTE PTR [edx+69]
	mov	BYTE PTR _type$[ebp], al
; Line 2610
	movsx	eax, BYTE PTR _type$[ebp]
	cmp	eax, 2
	jne	SHORT $LN1@ucnv_getTy
; Line 2611
	mov	eax, DWORD PTR _converter$[ebp]
	push	eax
	call	_ucnv_MBCSGetType_56
	add	esp, 4
	jmp	SHORT $LN2@ucnv_getTy
$LN1@ucnv_getTy:
; Line 2614
	movsx	eax, BYTE PTR _type$[ebp]
$LN2@ucnv_getTy:
; Line 2615
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ucnv_getType_56 ENDP
_TEXT	ENDS
PUBLIC	_ucnv_getStarters_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _ucnv_getStarters_56
_TEXT	SEGMENT
_converter$ = 8						; size = 4
_starters$ = 12						; size = 4
_err$ = 16						; size = 4
_ucnv_getStarters_56 PROC				; COMDAT
; Line 2621
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2622
	cmp	DWORD PTR _err$[ebp], 0
	je	SHORT $LN3@ucnv_getSt
	mov	eax, DWORD PTR _err$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN4@ucnv_getSt
$LN3@ucnv_getSt:
; Line 2623
	jmp	SHORT $LN5@ucnv_getSt
$LN4@ucnv_getSt:
; Line 2626
	mov	eax, DWORD PTR _converter$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx+20]
	cmp	DWORD PTR [edx+44], 0
	je	SHORT $LN2@ucnv_getSt
; Line 2627
	mov	esi, esp
	mov	eax, DWORD PTR _err$[ebp]
	push	eax
	mov	ecx, DWORD PTR _starters$[ebp]
	push	ecx
	mov	edx, DWORD PTR _converter$[ebp]
	push	edx
	mov	eax, DWORD PTR _converter$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [edx+44]
	call	eax
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2628
	jmp	SHORT $LN5@ucnv_getSt
$LN2@ucnv_getSt:
; Line 2629
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 1
$LN5@ucnv_getSt:
; Line 2631
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ucnv_getStarters_56 ENDP
_TEXT	ENDS
PUBLIC	_ucnv_fixFileSeparator_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _ucnv_fixFileSeparator_56
_TEXT	SEGMENT
_variant5c$ = -32					; size = 2
_i$ = -20						; size = 4
_a$ = -8						; size = 4
_cnv$ = 8						; size = 4
_source$ = 12						; size = 4
_sourceLength$ = 16					; size = 4
_ucnv_fixFileSeparator_56 PROC				; COMDAT
; Line 2663
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2668
	cmp	DWORD PTR _cnv$[ebp], 0
	je	SHORT $LN5@ucnv_fixFi
	cmp	DWORD PTR _source$[ebp], 0
	je	SHORT $LN5@ucnv_fixFi
	cmp	DWORD PTR _sourceLength$[ebp], 0
	jle	SHORT $LN5@ucnv_fixFi
	mov	eax, DWORD PTR _cnv$[ebp]
	push	eax
	call	_ucnv_getAmbiguous
	add	esp, 4
	mov	DWORD PTR _a$[ebp], eax
	cmp	DWORD PTR _a$[ebp], 0
	jne	SHORT $LN6@ucnv_fixFi
$LN5@ucnv_fixFi:
; Line 2670
	jmp	SHORT $LN7@ucnv_fixFi
$LN6@ucnv_fixFi:
; Line 2673
	mov	eax, DWORD PTR _a$[ebp]
	mov	cx, WORD PTR [eax+4]
	mov	WORD PTR _variant5c$[ebp], cx
; Line 2674
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@ucnv_fixFi
$LN3@ucnv_fixFi:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@ucnv_fixFi:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _sourceLength$[ebp]
	jge	SHORT $LN7@ucnv_fixFi
; Line 2675
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _source$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	movzx	eax, WORD PTR _variant5c$[ebp]
	cmp	edx, eax
	jne	SHORT $LN1@ucnv_fixFi
; Line 2676
	mov	eax, 92					; 0000005cH
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _source$[ebp]
	mov	WORD PTR [edx+ecx*2], ax
$LN1@ucnv_fixFi:
; Line 2678
	jmp	SHORT $LN3@ucnv_fixFi
$LN7@ucnv_fixFi:
; Line 2679
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ucnv_fixFileSeparator_56 ENDP
_TEXT	ENDS
EXTRN	_strcmp:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _ucnv_getAmbiguous
_TEXT	SEGMENT
_i$ = -32						; size = 4
_name$ = -20						; size = 4
_errorCode$ = -8					; size = 4
_cnv$ = 8						; size = 4
_ucnv_getAmbiguous PROC					; COMDAT
; Line 2634
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2639
	cmp	DWORD PTR _cnv$[ebp], 0
	jne	SHORT $LN6@ucnv_getAm
; Line 2640
	xor	eax, eax
	jmp	SHORT $LN7@ucnv_getAm
$LN6@ucnv_getAm:
; Line 2643
	mov	DWORD PTR _errorCode$[ebp], 0
; Line 2644
	lea	eax, DWORD PTR _errorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cnv$[ebp]
	push	ecx
	call	_ucnv_getName_56
	add	esp, 8
	mov	DWORD PTR _name$[ebp], eax
; Line 2645
	cmp	DWORD PTR _errorCode$[ebp], 0
	jle	SHORT $LN5@ucnv_getAm
; Line 2646
	xor	eax, eax
	jmp	SHORT $LN7@ucnv_getAm
$LN5@ucnv_getAm:
; Line 2649
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@ucnv_getAm
$LN3@ucnv_getAm:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@ucnv_getAm:
	cmp	DWORD PTR _i$[ebp], 11			; 0000000bH
	jge	SHORT $LN2@ucnv_getAm
; Line 2651
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _ambiguousConverters[eax*8]
	push	ecx
	mov	edx, DWORD PTR _name$[ebp]
	push	edx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN1@ucnv_getAm
; Line 2653
	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR _ambiguousConverters[eax*8]
	jmp	SHORT $LN7@ucnv_getAm
$LN1@ucnv_getAm:
; Line 2655
	jmp	SHORT $LN3@ucnv_getAm
$LN2@ucnv_getAm:
; Line 2657
	xor	eax, eax
$LN7@ucnv_getAm:
; Line 2658
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN11@ucnv_getAm
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN11@ucnv_getAm:
	DD	1
	DD	$LN10@ucnv_getAm
$LN10@ucnv_getAm:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN9@ucnv_getAm
$LN9@ucnv_getAm:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	67					; 00000043H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
_ucnv_getAmbiguous ENDP
_TEXT	ENDS
PUBLIC	_ucnv_isAmbiguous_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _ucnv_isAmbiguous_56
_TEXT	SEGMENT
_cnv$ = 8						; size = 4
_ucnv_isAmbiguous_56 PROC				; COMDAT
; Line 2682
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2683
	mov	eax, DWORD PTR _cnv$[ebp]
	push	eax
	call	_ucnv_getAmbiguous
	add	esp, 4
	test	eax, eax
	setne	al
; Line 2684
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ucnv_isAmbiguous_56 ENDP
_TEXT	ENDS
PUBLIC	_ucnv_setFallback_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _ucnv_setFallback_56
_TEXT	SEGMENT
_cnv$ = 8						; size = 4
_usesFallback$ = 12					; size = 1
_ucnv_setFallback_56 PROC				; COMDAT
; Line 2688
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2689
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	cl, BYTE PTR _usesFallback$[ebp]
	mov	BYTE PTR [eax+35], cl
; Line 2690
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_ucnv_setFallback_56 ENDP
_TEXT	ENDS
PUBLIC	_ucnv_usesFallback_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _ucnv_usesFallback_56
_TEXT	SEGMENT
_cnv$ = 8						; size = 4
_ucnv_usesFallback_56 PROC				; COMDAT
; Line 2694
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2695
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	al, BYTE PTR [eax+35]
; Line 2696
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_ucnv_usesFallback_56 ENDP
_TEXT	ENDS
PUBLIC	_ucnv_getInvalidChars_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _ucnv_getInvalidChars_56
_TEXT	SEGMENT
_converter$ = 8						; size = 4
_errBytes$ = 12						; size = 4
_len$ = 16						; size = 4
_err$ = 20						; size = 4
_ucnv_getInvalidChars_56 PROC				; COMDAT
; Line 2703
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2704
	cmp	DWORD PTR _err$[ebp], 0
	je	SHORT $LN5@ucnv_getIn
	mov	eax, DWORD PTR _err$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN6@ucnv_getIn
$LN5@ucnv_getIn:
; Line 2706
	jmp	SHORT $LN7@ucnv_getIn
$LN6@ucnv_getIn:
; Line 2708
	cmp	DWORD PTR _len$[ebp], 0
	je	SHORT $LN3@ucnv_getIn
	cmp	DWORD PTR _errBytes$[ebp], 0
	je	SHORT $LN3@ucnv_getIn
	cmp	DWORD PTR _converter$[ebp], 0
	jne	SHORT $LN4@ucnv_getIn
$LN3@ucnv_getIn:
; Line 2710
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 1
; Line 2711
	jmp	SHORT $LN7@ucnv_getIn
$LN4@ucnv_getIn:
; Line 2713
	mov	eax, DWORD PTR _len$[ebp]
	movsx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _converter$[ebp]
	movsx	eax, BYTE PTR [edx+62]
	cmp	ecx, eax
	jge	SHORT $LN2@ucnv_getIn
; Line 2715
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 8
; Line 2716
	jmp	SHORT $LN7@ucnv_getIn
$LN2@ucnv_getIn:
; Line 2718
	mov	eax, DWORD PTR _len$[ebp]
	mov	ecx, DWORD PTR _converter$[ebp]
	mov	dl, BYTE PTR [ecx+62]
	mov	BYTE PTR [eax], dl
	mov	eax, DWORD PTR _len$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jle	SHORT $LN7@ucnv_getIn
; Line 2720
	push	1
	mov	eax, DWORD PTR _converter$[ebp]
	add	eax, 68					; 00000044H
	push	eax
	call	_uprv_checkValidMemory
	add	esp, 8
	mov	ecx, DWORD PTR _len$[ebp]
	movsx	edx, BYTE PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _converter$[ebp]
	add	eax, 68					; 00000044H
	push	eax
	mov	ecx, DWORD PTR _errBytes$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN7@ucnv_getIn:
; Line 2722
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ucnv_getInvalidChars_56 ENDP
_TEXT	ENDS
PUBLIC	_ucnv_getInvalidUChars_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _ucnv_getInvalidUChars_56
_TEXT	SEGMENT
_converter$ = 8						; size = 4
_errChars$ = 12						; size = 4
_len$ = 16						; size = 4
_err$ = 20						; size = 4
_ucnv_getInvalidUChars_56 PROC				; COMDAT
; Line 2729
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2730
	cmp	DWORD PTR _err$[ebp], 0
	je	SHORT $LN5@ucnv_getIn@2
	mov	eax, DWORD PTR _err$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN6@ucnv_getIn@2
$LN5@ucnv_getIn@2:
; Line 2732
	jmp	SHORT $LN7@ucnv_getIn@2
$LN6@ucnv_getIn@2:
; Line 2734
	cmp	DWORD PTR _len$[ebp], 0
	je	SHORT $LN3@ucnv_getIn@2
	cmp	DWORD PTR _errChars$[ebp], 0
	je	SHORT $LN3@ucnv_getIn@2
	cmp	DWORD PTR _converter$[ebp], 0
	jne	SHORT $LN4@ucnv_getIn@2
$LN3@ucnv_getIn@2:
; Line 2736
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 1
; Line 2737
	jmp	SHORT $LN7@ucnv_getIn@2
$LN4@ucnv_getIn@2:
; Line 2739
	mov	eax, DWORD PTR _len$[ebp]
	movsx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _converter$[ebp]
	movsx	eax, BYTE PTR [edx+64]
	cmp	ecx, eax
	jge	SHORT $LN2@ucnv_getIn@2
; Line 2741
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 8
; Line 2742
	jmp	SHORT $LN7@ucnv_getIn@2
$LN2@ucnv_getIn@2:
; Line 2744
	mov	eax, DWORD PTR _len$[ebp]
	mov	ecx, DWORD PTR _converter$[ebp]
	mov	dl, BYTE PTR [ecx+64]
	mov	BYTE PTR [eax], dl
	mov	eax, DWORD PTR _len$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jle	SHORT $LN7@ucnv_getIn@2
; Line 2746
	push	1
	mov	eax, DWORD PTR _converter$[ebp]
	add	eax, 112				; 00000070H
	push	eax
	call	_uprv_checkValidMemory
	add	esp, 8
	mov	ecx, DWORD PTR _len$[ebp]
	movsx	edx, BYTE PTR [ecx]
	shl	edx, 1
	push	edx
	mov	eax, DWORD PTR _converter$[ebp]
	add	eax, 112				; 00000070H
	push	eax
	mov	ecx, DWORD PTR _errChars$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN7@ucnv_getIn@2:
; Line 2748
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ucnv_getInvalidUChars_56 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@BJAMKCIO@UTF?9EBCDIC?$AA@		; `string'
PUBLIC	??_C@_05MBAANMHF@UTF?97?$AA@			; `string'
PUBLIC	??_C@_06FKEBPDGA@BOCU?91?$AA@			; `string'
PUBLIC	??_C@_04GGPJHDNC@SCSU?$AA@			; `string'
PUBLIC	??_C@_08COAFFEGN@UTF?932BE?$AA@			; `string'
PUBLIC	??_C@_05EGJIMALK@UTF?98?$AA@			; `string'
PUBLIC	??_C@_08NBDJLNFA@UTF?916LE?$AA@			; `string'
PUBLIC	??_C@_08CEJLHJGH@UTF?932LE?$AA@			; `string'
PUBLIC	??_C@_08NLKHJAFK@UTF?916BE?$AA@			; `string'
PUBLIC	__$ArrayPad$
PUBLIC	_ucnv_detectUnicodeSignature_56
;	COMDAT ??_C@_0L@BJAMKCIO@UTF?9EBCDIC?$AA@
CONST	SEGMENT
??_C@_0L@BJAMKCIO@UTF?9EBCDIC?$AA@ DB 'UTF-EBCDIC', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05MBAANMHF@UTF?97?$AA@
CONST	SEGMENT
??_C@_05MBAANMHF@UTF?97?$AA@ DB 'UTF-7', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06FKEBPDGA@BOCU?91?$AA@
CONST	SEGMENT
??_C@_06FKEBPDGA@BOCU?91?$AA@ DB 'BOCU-1', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04GGPJHDNC@SCSU?$AA@
CONST	SEGMENT
??_C@_04GGPJHDNC@SCSU?$AA@ DB 'SCSU', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08COAFFEGN@UTF?932BE?$AA@
CONST	SEGMENT
??_C@_08COAFFEGN@UTF?932BE?$AA@ DB 'UTF-32BE', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05EGJIMALK@UTF?98?$AA@
CONST	SEGMENT
??_C@_05EGJIMALK@UTF?98?$AA@ DB 'UTF-8', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08NBDJLNFA@UTF?916LE?$AA@
CONST	SEGMENT
??_C@_08NBDJLNFA@UTF?916LE?$AA@ DB 'UTF-16LE', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08CEJLHJGH@UTF?932LE?$AA@
CONST	SEGMENT
??_C@_08CEJLHJGH@UTF?932LE?$AA@ DB 'UTF-32LE', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08NLKHJAFK@UTF?916BE?$AA@
CONST	SEGMENT
??_C@_08NLKHJAFK@UTF?916BE?$AA@ DB 'UTF-16BE', 00H	; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT _ucnv_detectUnicodeSignature_56
_TEXT	SEGMENT
_i$ = -40						; size = 4
_start$ = -28						; size = 5
_dummy$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_source$ = 8						; size = 4
_sourceLength$ = 12					; size = 4
_signatureLength$ = 16					; size = 4
_pErrorCode$ = 20					; size = 4
_ucnv_detectUnicodeSignature_56 PROC			; COMDAT
; Line 2756
	push	ebp
	mov	ebp, esp
	sub	esp, 236				; 000000ecH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-236]
	mov	ecx, 59					; 0000003bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 2762
	mov	BYTE PTR _start$[ebp], -91		; ffffffa5H
	mov	BYTE PTR _start$[ebp+1], -91		; ffffffa5H
	mov	BYTE PTR _start$[ebp+2], -91		; ffffffa5H
	mov	BYTE PTR _start$[ebp+3], -91		; ffffffa5H
	mov	BYTE PTR _start$[ebp+4], -91		; ffffffa5H
; Line 2763
	mov	DWORD PTR _i$[ebp], 0
; Line 2765
	cmp	DWORD PTR _pErrorCode$[ebp], 0
	je	SHORT $LN28@ucnv_detec
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN29@ucnv_detec
$LN28@ucnv_detec:
; Line 2766
	xor	eax, eax
	jmp	$LN30@ucnv_detec
$LN29@ucnv_detec:
; Line 2769
	cmp	DWORD PTR _source$[ebp], 0
	je	SHORT $LN26@ucnv_detec
	cmp	DWORD PTR _sourceLength$[ebp], -1
	jge	SHORT $LN27@ucnv_detec
$LN26@ucnv_detec:
; Line 2770
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 1
; Line 2771
	xor	eax, eax
	jmp	$LN30@ucnv_detec
$LN27@ucnv_detec:
; Line 2774
	cmp	DWORD PTR _signatureLength$[ebp], 0
	jne	SHORT $LN25@ucnv_detec
; Line 2775
	lea	eax, DWORD PTR _dummy$[ebp]
	mov	DWORD PTR _signatureLength$[ebp], eax
$LN25@ucnv_detec:
; Line 2778
	cmp	DWORD PTR _sourceLength$[ebp], -1
	jne	SHORT $LN23@ucnv_detec
; Line 2779
	mov	eax, DWORD PTR _source$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	mov	DWORD PTR _sourceLength$[ebp], eax
$LN23@ucnv_detec:
; Line 2783
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _sourceLength$[ebp]
	jge	SHORT $LN22@ucnv_detec
	cmp	DWORD PTR _i$[ebp], 5
	jge	SHORT $LN22@ucnv_detec
; Line 2784
	mov	eax, DWORD PTR _source$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	dl, BYTE PTR [eax]
	mov	BYTE PTR _start$[ebp+ecx], dl
; Line 2785
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
; Line 2786
	jmp	SHORT $LN23@ucnv_detec
$LN22@ucnv_detec:
; Line 2788
	movsx	eax, BYTE PTR _start$[ebp]
	cmp	eax, -2					; fffffffeH
	jne	SHORT $LN21@ucnv_detec
	movsx	eax, BYTE PTR _start$[ebp+1]
	cmp	eax, -1
	jne	SHORT $LN21@ucnv_detec
; Line 2789
	mov	eax, DWORD PTR _signatureLength$[ebp]
	mov	DWORD PTR [eax], 2
; Line 2790
	mov	eax, OFFSET ??_C@_08NLKHJAFK@UTF?916BE?$AA@
	jmp	$LN30@ucnv_detec
	jmp	$LN20@ucnv_detec
$LN21@ucnv_detec:
; Line 2791
	movsx	eax, BYTE PTR _start$[ebp]
	cmp	eax, -1
	jne	SHORT $LN19@ucnv_detec
	movsx	eax, BYTE PTR _start$[ebp+1]
	cmp	eax, -2					; fffffffeH
	jne	SHORT $LN19@ucnv_detec
; Line 2792
	movsx	eax, BYTE PTR _start$[ebp+2]
	test	eax, eax
	jne	SHORT $LN18@ucnv_detec
	movsx	eax, BYTE PTR _start$[ebp+3]
	test	eax, eax
	jne	SHORT $LN18@ucnv_detec
; Line 2793
	mov	eax, DWORD PTR _signatureLength$[ebp]
	mov	DWORD PTR [eax], 4
; Line 2794
	mov	eax, OFFSET ??_C@_08CEJLHJGH@UTF?932LE?$AA@
	jmp	$LN30@ucnv_detec
; Line 2795
	jmp	SHORT $LN17@ucnv_detec
$LN18@ucnv_detec:
; Line 2796
	mov	eax, DWORD PTR _signatureLength$[ebp]
	mov	DWORD PTR [eax], 2
; Line 2797
	mov	eax, OFFSET ??_C@_08NBDJLNFA@UTF?916LE?$AA@
	jmp	$LN30@ucnv_detec
$LN17@ucnv_detec:
; Line 2798
	jmp	$LN20@ucnv_detec
$LN19@ucnv_detec:
; Line 2799
	movsx	eax, BYTE PTR _start$[ebp]
	cmp	eax, -17				; ffffffefH
	jne	SHORT $LN15@ucnv_detec
	movsx	eax, BYTE PTR _start$[ebp+1]
	cmp	eax, -69				; ffffffbbH
	jne	SHORT $LN15@ucnv_detec
	movsx	eax, BYTE PTR _start$[ebp+2]
	cmp	eax, -65				; ffffffbfH
	jne	SHORT $LN15@ucnv_detec
; Line 2800
	mov	eax, DWORD PTR _signatureLength$[ebp]
	mov	DWORD PTR [eax], 3
; Line 2801
	mov	eax, OFFSET ??_C@_05EGJIMALK@UTF?98?$AA@
	jmp	$LN30@ucnv_detec
; Line 2802
	jmp	$LN20@ucnv_detec
$LN15@ucnv_detec:
; Line 2803
	movsx	eax, BYTE PTR _start$[ebp]
	test	eax, eax
	jne	SHORT $LN13@ucnv_detec
	movsx	eax, BYTE PTR _start$[ebp+1]
	test	eax, eax
	jne	SHORT $LN13@ucnv_detec
	movsx	eax, BYTE PTR _start$[ebp+2]
	cmp	eax, -2					; fffffffeH
	jne	SHORT $LN13@ucnv_detec
	movsx	eax, BYTE PTR _start$[ebp+3]
	cmp	eax, -1
	jne	SHORT $LN13@ucnv_detec
; Line 2804
	mov	eax, DWORD PTR _signatureLength$[ebp]
	mov	DWORD PTR [eax], 4
; Line 2805
	mov	eax, OFFSET ??_C@_08COAFFEGN@UTF?932BE?$AA@
	jmp	$LN30@ucnv_detec
	jmp	$LN20@ucnv_detec
$LN13@ucnv_detec:
; Line 2806
	movsx	eax, BYTE PTR _start$[ebp]
	cmp	eax, 14					; 0000000eH
	jne	SHORT $LN11@ucnv_detec
	movsx	eax, BYTE PTR _start$[ebp+1]
	cmp	eax, -2					; fffffffeH
	jne	SHORT $LN11@ucnv_detec
	movsx	eax, BYTE PTR _start$[ebp+2]
	cmp	eax, -1
	jne	SHORT $LN11@ucnv_detec
; Line 2807
	mov	eax, DWORD PTR _signatureLength$[ebp]
	mov	DWORD PTR [eax], 3
; Line 2808
	mov	eax, OFFSET ??_C@_04GGPJHDNC@SCSU?$AA@
	jmp	$LN30@ucnv_detec
	jmp	$LN20@ucnv_detec
$LN11@ucnv_detec:
; Line 2809
	movsx	eax, BYTE PTR _start$[ebp]
	cmp	eax, -5					; fffffffbH
	jne	SHORT $LN9@ucnv_detec
	movsx	eax, BYTE PTR _start$[ebp+1]
	cmp	eax, -18				; ffffffeeH
	jne	SHORT $LN9@ucnv_detec
	movsx	eax, BYTE PTR _start$[ebp+2]
	cmp	eax, 40					; 00000028H
	jne	SHORT $LN9@ucnv_detec
; Line 2810
	mov	eax, DWORD PTR _signatureLength$[ebp]
	mov	DWORD PTR [eax], 3
; Line 2811
	mov	eax, OFFSET ??_C@_06FKEBPDGA@BOCU?91?$AA@
	jmp	$LN30@ucnv_detec
	jmp	$LN20@ucnv_detec
$LN9@ucnv_detec:
; Line 2812
	movsx	eax, BYTE PTR _start$[ebp]
	cmp	eax, 43					; 0000002bH
	jne	SHORT $LN7@ucnv_detec
	movsx	eax, BYTE PTR _start$[ebp+1]
	cmp	eax, 47					; 0000002fH
	jne	SHORT $LN7@ucnv_detec
	movsx	eax, BYTE PTR _start$[ebp+2]
	cmp	eax, 118				; 00000076H
	jne	SHORT $LN7@ucnv_detec
; Line 2821
	movsx	eax, BYTE PTR _start$[ebp+3]
	cmp	eax, 56					; 00000038H
	jne	SHORT $LN6@ucnv_detec
	movsx	eax, BYTE PTR _start$[ebp+4]
	cmp	eax, 45					; 0000002dH
	jne	SHORT $LN6@ucnv_detec
; Line 2823
	mov	eax, DWORD PTR _signatureLength$[ebp]
	mov	DWORD PTR [eax], 5
; Line 2824
	mov	eax, OFFSET ??_C@_05MBAANMHF@UTF?97?$AA@
	jmp	SHORT $LN30@ucnv_detec
	jmp	SHORT $LN5@ucnv_detec
$LN6@ucnv_detec:
; Line 2825
	movsx	eax, BYTE PTR _start$[ebp+3]
	cmp	eax, 56					; 00000038H
	je	SHORT $LN3@ucnv_detec
	movsx	eax, BYTE PTR _start$[ebp+3]
	cmp	eax, 57					; 00000039H
	je	SHORT $LN3@ucnv_detec
	movsx	eax, BYTE PTR _start$[ebp+3]
	cmp	eax, 43					; 0000002bH
	je	SHORT $LN3@ucnv_detec
	movsx	eax, BYTE PTR _start$[ebp+3]
	cmp	eax, 47					; 0000002fH
	jne	SHORT $LN5@ucnv_detec
$LN3@ucnv_detec:
; Line 2827
	mov	eax, DWORD PTR _signatureLength$[ebp]
	mov	DWORD PTR [eax], 4
; Line 2828
	mov	eax, OFFSET ??_C@_05MBAANMHF@UTF?97?$AA@
	jmp	SHORT $LN30@ucnv_detec
$LN5@ucnv_detec:
; Line 2829
	jmp	SHORT $LN20@ucnv_detec
$LN7@ucnv_detec:
; Line 2830
	movsx	eax, BYTE PTR _start$[ebp]
	cmp	eax, -35				; ffffffddH
	jne	SHORT $LN20@ucnv_detec
	movsx	eax, BYTE PTR _start$[ebp+1]
	cmp	eax, 115				; 00000073H
	jne	SHORT $LN20@ucnv_detec
	movsx	eax, BYTE PTR _start$[ebp+2]
	cmp	eax, 102				; 00000066H
	jne	SHORT $LN20@ucnv_detec
	movsx	eax, BYTE PTR _start$[ebp+3]
	cmp	eax, 115				; 00000073H
	jne	SHORT $LN20@ucnv_detec
; Line 2831
	mov	eax, DWORD PTR _signatureLength$[ebp]
	mov	DWORD PTR [eax], 4
; Line 2832
	mov	eax, OFFSET ??_C@_0L@BJAMKCIO@UTF?9EBCDIC?$AA@
	jmp	SHORT $LN30@ucnv_detec
$LN20@ucnv_detec:
; Line 2837
	mov	eax, DWORD PTR _signatureLength$[ebp]
	mov	DWORD PTR [eax], 0
; Line 2838
	xor	eax, eax
$LN30@ucnv_detec:
; Line 2839
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN35@ucnv_detec
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 236				; 000000ecH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN35@ucnv_detec:
	DD	2
	DD	$LN34@ucnv_detec
$LN34@ucnv_detec:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN32@ucnv_detec
	DD	-28					; ffffffe4H
	DD	5
	DD	$LN33@ucnv_detec
$LN33@ucnv_detec:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	116					; 00000074H
	DB	0
$LN32@ucnv_detec:
	DB	100					; 00000064H
	DB	117					; 00000075H
	DB	109					; 0000006dH
	DB	109					; 0000006dH
	DB	121					; 00000079H
	DB	0
_ucnv_detectUnicodeSignature_56 ENDP
_TEXT	ENDS
PUBLIC	_ucnv_fromUCountPending_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _ucnv_fromUCountPending_56
_TEXT	SEGMENT
_cnv$ = 8						; size = 4
_status$ = 12						; size = 4
_ucnv_fromUCountPending_56 PROC				; COMDAT
; Line 2843
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2844
	cmp	DWORD PTR _status$[ebp], 0
	je	SHORT $LN7@ucnv_fromU@3
	mov	eax, DWORD PTR _status$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN8@ucnv_fromU@3
$LN7@ucnv_fromU@3:
; Line 2845
	or	eax, -1
	jmp	SHORT $LN9@ucnv_fromU@3
$LN8@ucnv_fromU@3:
; Line 2847
	cmp	DWORD PTR _cnv$[ebp], 0
	jne	SHORT $LN6@ucnv_fromU@3
; Line 2848
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 1
; Line 2849
	or	eax, -1
	jmp	SHORT $LN9@ucnv_fromU@3
$LN6@ucnv_fromU@3:
; Line 2852
	mov	eax, DWORD PTR _cnv$[ebp]
	cmp	DWORD PTR [eax+180], 0
	jl	SHORT $LN5@ucnv_fromU@3
; Line 2853
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	ecx, 65535				; 0000ffffH
	cmp	ecx, DWORD PTR [eax+180]
	sbb	eax, eax
	neg	eax
	add	eax, 1
	mov	edx, DWORD PTR _cnv$[ebp]
	movsx	ecx, BYTE PTR [edx+253]
	add	eax, ecx
	jmp	SHORT $LN9@ucnv_fromU@3
	jmp	SHORT $LN4@ucnv_fromU@3
$LN5@ucnv_fromU@3:
; Line 2854
	mov	eax, DWORD PTR _cnv$[ebp]
	movsx	ecx, BYTE PTR [eax+253]
	test	ecx, ecx
	jge	SHORT $LN3@ucnv_fromU@3
; Line 2855
	mov	eax, DWORD PTR _cnv$[ebp]
	movsx	eax, BYTE PTR [eax+253]
	neg	eax
	jmp	SHORT $LN9@ucnv_fromU@3
	jmp	SHORT $LN4@ucnv_fromU@3
$LN3@ucnv_fromU@3:
; Line 2856
	mov	eax, DWORD PTR _cnv$[ebp]
	cmp	DWORD PTR [eax+56], 0
	jle	SHORT $LN4@ucnv_fromU@3
; Line 2857
	mov	eax, 1
	jmp	SHORT $LN9@ucnv_fromU@3
$LN4@ucnv_fromU@3:
; Line 2859
	xor	eax, eax
$LN9@ucnv_fromU@3:
; Line 2861
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_ucnv_fromUCountPending_56 ENDP
_TEXT	ENDS
PUBLIC	_ucnv_toUCountPending_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _ucnv_toUCountPending_56
_TEXT	SEGMENT
_cnv$ = 8						; size = 4
_status$ = 12						; size = 4
_ucnv_toUCountPending_56 PROC				; COMDAT
; Line 2864
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2866
	cmp	DWORD PTR _status$[ebp], 0
	je	SHORT $LN7@ucnv_toUCo
	mov	eax, DWORD PTR _status$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN8@ucnv_toUCo
$LN7@ucnv_toUCo:
; Line 2867
	or	eax, -1
	jmp	SHORT $LN9@ucnv_toUCo
$LN8@ucnv_toUCo:
; Line 2869
	cmp	DWORD PTR _cnv$[ebp], 0
	jne	SHORT $LN6@ucnv_toUCo
; Line 2870
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 1
; Line 2871
	or	eax, -1
	jmp	SHORT $LN9@ucnv_toUCo
$LN6@ucnv_toUCo:
; Line 2874
	mov	eax, DWORD PTR _cnv$[ebp]
	movsx	ecx, BYTE PTR [eax+254]
	test	ecx, ecx
	jle	SHORT $LN5@ucnv_toUCo
; Line 2875
	mov	eax, DWORD PTR _cnv$[ebp]
	movsx	eax, BYTE PTR [eax+254]
	jmp	SHORT $LN9@ucnv_toUCo
	jmp	SHORT $LN4@ucnv_toUCo
$LN5@ucnv_toUCo:
; Line 2876
	mov	eax, DWORD PTR _cnv$[ebp]
	movsx	ecx, BYTE PTR [eax+254]
	test	ecx, ecx
	jge	SHORT $LN3@ucnv_toUCo
; Line 2877
	mov	eax, DWORD PTR _cnv$[ebp]
	movsx	eax, BYTE PTR [eax+254]
	neg	eax
	jmp	SHORT $LN9@ucnv_toUCo
	jmp	SHORT $LN4@ucnv_toUCo
$LN3@ucnv_toUCo:
; Line 2878
	mov	eax, DWORD PTR _cnv$[ebp]
	movsx	ecx, BYTE PTR [eax+36]
	test	ecx, ecx
	jle	SHORT $LN4@ucnv_toUCo
; Line 2879
	mov	eax, DWORD PTR _cnv$[ebp]
	movsx	eax, BYTE PTR [eax+36]
	jmp	SHORT $LN9@ucnv_toUCo
$LN4@ucnv_toUCo:
; Line 2881
	xor	eax, eax
$LN9@ucnv_toUCo:
; Line 2882
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_ucnv_toUCountPending_56 ENDP
_TEXT	ENDS
PUBLIC	_ucnv_isFixedWidth_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _ucnv_isFixedWidth_56
_TEXT	SEGMENT
tv68 = -196						; size = 4
_cnv$ = 8						; size = 4
_status$ = 12						; size = 4
_ucnv_isFixedWidth_56 PROC				; COMDAT
; Line 2885
	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2886
	mov	eax, DWORD PTR _status$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN6@ucnv_isFix
; Line 2887
	xor	al, al
	jmp	SHORT $LN7@ucnv_isFix
$LN6@ucnv_isFix:
; Line 2890
	cmp	DWORD PTR _cnv$[ebp], 0
	jne	SHORT $LN5@ucnv_isFix
; Line 2891
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 1
; Line 2892
	xor	al, al
	jmp	SHORT $LN7@ucnv_isFix
$LN5@ucnv_isFix:
; Line 2895
	mov	eax, DWORD PTR _cnv$[ebp]
	push	eax
	call	_ucnv_getType_56
	add	esp, 4
	mov	DWORD PTR tv68[ebp], eax
	cmp	DWORD PTR tv68[ebp], 30			; 0000001eH
	ja	SHORT $LN1@ucnv_isFix
	mov	ecx, DWORD PTR tv68[ebp]
	movzx	edx, BYTE PTR $LN9@ucnv_isFix[ecx]
	jmp	DWORD PTR $LN10@ucnv_isFix[edx*4]
$LN2@ucnv_isFix:
; Line 2902
	mov	al, 1
	jmp	SHORT $LN7@ucnv_isFix
$LN1@ucnv_isFix:
; Line 2904
	xor	al, al
$LN7@ucnv_isFix:
; Line 2906
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN10@ucnv_isFix:
	DD	$LN2@ucnv_isFix
	DD	$LN1@ucnv_isFix
$LN9@ucnv_isFix:
	DB	0
	DB	0
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	0
	DB	0
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	0
	DB	1
	DB	1
	DB	1
	DB	0
_ucnv_isFixedWidth_56 ENDP
_TEXT	ENDS
END
