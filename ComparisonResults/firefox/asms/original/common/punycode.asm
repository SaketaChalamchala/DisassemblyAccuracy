; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\mozilla\intl\icu\source\common\punycode.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
_basicToDigit DB 0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	01aH
	DB	01bH
	DB	01cH
	DB	01dH
	DB	01eH
	DB	01fH
	DB	020H
	DB	021H
	DB	022H
	DB	023H
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	09H
	DB	0aH
	DB	0bH
	DB	0cH
	DB	0dH
	DB	0eH
	DB	0fH
	DB	010H
	DB	011H
	DB	012H
	DB	013H
	DB	014H
	DB	015H
	DB	016H
	DB	017H
	DB	018H
	DB	019H
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	09H
	DB	0aH
	DB	0bH
	DB	0cH
	DB	0dH
	DB	0eH
	DB	0fH
	DB	010H
	DB	011H
	DB	012H
	DB	013H
	DB	014H
	DB	015H
	DB	016H
	DB	017H
	DB	018H
	DB	019H
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
CONST	ENDS
PUBLIC	??2@YAPAXI@Z					; operator new
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File d:\mozilla\intl\icu\source\common\unicode\utypes.h
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT ??2@YAPAXI@Z
_TEXT	SEGMENT
_q$ = -8						; size = 4
___formal$ = 8						; size = 4
??2@YAPAXI@Z PROC					; operator new, COMDAT
; Line 411
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 412
	mov	DWORD PTR _q$[ebp], 0
; Line 413
	mov	eax, DWORD PTR _q$[ebp]
	mov	BYTE PTR [eax], 5
; Line 414
	mov	eax, DWORD PTR _q$[ebp]
; Line 415
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??2@YAPAXI@Z ENDP					; operator new
_TEXT	ENDS
PUBLIC	??3@YAXPAX@Z					; operator delete
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??3@YAXPAX@Z
_TEXT	SEGMENT
_q$ = -8						; size = 4
___formal$ = 8						; size = 4
??3@YAXPAX@Z PROC					; operator delete, COMDAT
; Line 439
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 440
	mov	DWORD PTR _q$[ebp], 0
; Line 441
	mov	eax, DWORD PTR _q$[ebp]
	mov	BYTE PTR [eax], 5
; Line 442
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??3@YAXPAX@Z ENDP					; operator delete
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_u_strToPunycode_56
EXTRN	_u_terminateUChars_56:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__RTC_CheckEsp:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _u_strToPunycode_56
_TEXT	SEGMENT
tv183 = -1176						; size = 4
tv132 = -1176						; size = 4
tv176 = -1173						; size = 1
tv93 = -1173						; size = 1
_c2$ = -976						; size = 2
_c$ = -964						; size = 2
_srcCPCount$ = -952					; size = 4
_t$ = -940						; size = 4
_k$ = -928						; size = 4
_q$ = -916						; size = 4
_m$ = -904						; size = 4
_j$ = -892						; size = 4
_bias$ = -880						; size = 4
_destLength$ = -868					; size = 4
_basicLength$ = -856					; size = 4
_handledCPCount$ = -844					; size = 4
_delta$ = -832						; size = 4
_n$ = -820						; size = 4
_cpBuffer$ = -808					; size = 800
__$ArrayPad$ = -4					; size = 4
_src$ = 8						; size = 4
_srcLength$ = 12					; size = 4
_dest$ = 16						; size = 4
_destCapacity$ = 20					; size = 4
_caseFlags$ = 24					; size = 4
_pErrorCode$ = 28					; size = 4
_u_strToPunycode_56 PROC				; COMDAT
; File d:\mozilla\intl\icu\source\common\punycode.cpp
; Line 185
	push	ebp
	mov	ebp, esp
	sub	esp, 1176				; 00000498H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-1176]
	mov	ecx, 294				; 00000126H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 192
	cmp	DWORD PTR _pErrorCode$[ebp], 0
	je	SHORT $LN52@u_strToPun
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN53@u_strToPun
$LN52@u_strToPun:
; Line 193
	xor	eax, eax
	jmp	$LN54@u_strToPun
$LN53@u_strToPun:
; Line 196
	cmp	DWORD PTR _src$[ebp], 0
	je	SHORT $LN50@u_strToPun
	cmp	DWORD PTR _srcLength$[ebp], -1
	jl	SHORT $LN50@u_strToPun
	cmp	DWORD PTR _dest$[ebp], 0
	jne	SHORT $LN51@u_strToPun
	cmp	DWORD PTR _destCapacity$[ebp], 0
	je	SHORT $LN51@u_strToPun
$LN50@u_strToPun:
; Line 197
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 1
; Line 198
	xor	eax, eax
	jmp	$LN54@u_strToPun
$LN51@u_strToPun:
; Line 205
	mov	DWORD PTR _destLength$[ebp], 0
	mov	eax, DWORD PTR _destLength$[ebp]
	mov	DWORD PTR _srcCPCount$[ebp], eax
; Line 206
	cmp	DWORD PTR _srcLength$[ebp], -1
	jne	$LN49@u_strToPun
; Line 208
	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN48@u_strToPun
$LN47@u_strToPun:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN48@u_strToPun:
; Line 209
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _src$[ebp]
	mov	dx, WORD PTR [ecx+eax*2]
	mov	WORD PTR _c$[ebp], dx
	movzx	eax, WORD PTR _c$[ebp]
	test	eax, eax
	jne	SHORT $LN45@u_strToPun
; Line 210
	jmp	$LN46@u_strToPun
$LN45@u_strToPun:
; Line 212
	cmp	DWORD PTR _srcCPCount$[ebp], 200	; 000000c8H
	jne	SHORT $LN44@u_strToPun
; Line 214
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 8
; Line 215
	xor	eax, eax
	jmp	$LN54@u_strToPun
$LN44@u_strToPun:
; Line 217
	movzx	eax, WORD PTR _c$[ebp]
	cmp	eax, 128				; 00000080H
	jge	$LN43@u_strToPun
; Line 218
	mov	eax, DWORD PTR _srcCPCount$[ebp]
	mov	DWORD PTR _cpBuffer$[ebp+eax*4], 0
	mov	ecx, DWORD PTR _srcCPCount$[ebp]
	add	ecx, 1
	mov	DWORD PTR _srcCPCount$[ebp], ecx
; Line 219
	mov	eax, DWORD PTR _destLength$[ebp]
	cmp	eax, DWORD PTR _destCapacity$[ebp]
	jge	SHORT $LN42@u_strToPun
; Line 223
	cmp	DWORD PTR _caseFlags$[ebp], 0
	je	SHORT $LN56@u_strToPun
	mov	eax, DWORD PTR _caseFlags$[ebp]
	add	eax, DWORD PTR _j$[ebp]
	movzx	ecx, BYTE PTR [eax]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	?asciiCaseMap@@YADDC@Z			; asciiCaseMap
	add	esp, 8
	mov	BYTE PTR tv93[ebp], al
	jmp	SHORT $LN57@u_strToPun
$LN56@u_strToPun:
	mov	al, BYTE PTR _c$[ebp]
	mov	BYTE PTR tv93[ebp], al
$LN57@u_strToPun:
	movsx	cx, BYTE PTR tv93[ebp]
	mov	edx, DWORD PTR _destLength$[ebp]
	mov	eax, DWORD PTR _dest$[ebp]
	mov	WORD PTR [eax+edx*2], cx
$LN42@u_strToPun:
; Line 225
	mov	eax, DWORD PTR _destLength$[ebp]
	add	eax, 1
	mov	DWORD PTR _destLength$[ebp], eax
; Line 226
	jmp	$LN41@u_strToPun
$LN43@u_strToPun:
; Line 227
	cmp	DWORD PTR _caseFlags$[ebp], 0
	je	SHORT $LN58@u_strToPun
	mov	eax, DWORD PTR _caseFlags$[ebp]
	add	eax, DWORD PTR _j$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN58@u_strToPun
	mov	DWORD PTR tv132[ebp], 1
	jmp	SHORT $LN59@u_strToPun
$LN58@u_strToPun:
	mov	DWORD PTR tv132[ebp], 0
$LN59@u_strToPun:
	mov	edx, DWORD PTR tv132[ebp]
	shl	edx, 31					; 0000001fH
	mov	DWORD PTR _n$[ebp], edx
; Line 228
	movzx	eax, WORD PTR _c$[ebp]
	and	eax, -2048				; fffff800H
	cmp	eax, 55296				; 0000d800H
	je	SHORT $LN40@u_strToPun
; Line 229
	movzx	eax, WORD PTR _c$[ebp]
	or	eax, DWORD PTR _n$[ebp]
	mov	DWORD PTR _n$[ebp], eax
	jmp	$LN39@u_strToPun
$LN40@u_strToPun:
; Line 230
	movzx	eax, WORD PTR _c$[ebp]
	and	eax, -1024				; fffffc00H
	cmp	eax, 55296				; 0000d800H
	jne	SHORT $LN38@u_strToPun
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _src$[ebp]
	mov	dx, WORD PTR [ecx+eax*2+2]
	mov	WORD PTR _c2$[ebp], dx
	movzx	eax, WORD PTR _c2$[ebp]
	and	eax, -1024				; fffffc00H
	cmp	eax, 56320				; 0000dc00H
	jne	SHORT $LN38@u_strToPun
; Line 231
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
; Line 232
	movzx	eax, WORD PTR _c$[ebp]
	shl	eax, 10					; 0000000aH
	movzx	ecx, WORD PTR _c2$[ebp]
	lea	edx, DWORD PTR [eax+ecx-56613888]
	or	edx, DWORD PTR _n$[ebp]
	mov	DWORD PTR _n$[ebp], edx
; Line 233
	jmp	SHORT $LN39@u_strToPun
$LN38@u_strToPun:
; Line 235
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 10			; 0000000aH
; Line 236
	xor	eax, eax
	jmp	$LN54@u_strToPun
$LN39@u_strToPun:
; Line 238
	mov	eax, DWORD PTR _srcCPCount$[ebp]
	mov	ecx, DWORD PTR _n$[ebp]
	mov	DWORD PTR _cpBuffer$[ebp+eax*4], ecx
	mov	edx, DWORD PTR _srcCPCount$[ebp]
	add	edx, 1
	mov	DWORD PTR _srcCPCount$[ebp], edx
$LN41@u_strToPun:
; Line 240
	jmp	$LN47@u_strToPun
$LN46@u_strToPun:
	jmp	$LN36@u_strToPun
$LN49@u_strToPun:
; Line 243
	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN35@u_strToPun
$LN34@u_strToPun:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN35@u_strToPun:
	mov	eax, DWORD PTR _j$[ebp]
	cmp	eax, DWORD PTR _srcLength$[ebp]
	jge	$LN36@u_strToPun
; Line 244
	cmp	DWORD PTR _srcCPCount$[ebp], 200	; 000000c8H
	jne	SHORT $LN32@u_strToPun
; Line 246
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 8
; Line 247
	xor	eax, eax
	jmp	$LN54@u_strToPun
$LN32@u_strToPun:
; Line 249
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _src$[ebp]
	mov	dx, WORD PTR [ecx+eax*2]
	mov	WORD PTR _c$[ebp], dx
; Line 250
	movzx	eax, WORD PTR _c$[ebp]
	cmp	eax, 128				; 00000080H
	jge	$LN31@u_strToPun
; Line 251
	mov	eax, DWORD PTR _srcCPCount$[ebp]
	mov	DWORD PTR _cpBuffer$[ebp+eax*4], 0
	mov	ecx, DWORD PTR _srcCPCount$[ebp]
	add	ecx, 1
	mov	DWORD PTR _srcCPCount$[ebp], ecx
; Line 252
	mov	eax, DWORD PTR _destLength$[ebp]
	cmp	eax, DWORD PTR _destCapacity$[ebp]
	jge	SHORT $LN30@u_strToPun
; Line 256
	cmp	DWORD PTR _caseFlags$[ebp], 0
	je	SHORT $LN60@u_strToPun
	mov	eax, DWORD PTR _caseFlags$[ebp]
	add	eax, DWORD PTR _j$[ebp]
	movzx	ecx, BYTE PTR [eax]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	?asciiCaseMap@@YADDC@Z			; asciiCaseMap
	add	esp, 8
	mov	BYTE PTR tv176[ebp], al
	jmp	SHORT $LN61@u_strToPun
$LN60@u_strToPun:
	mov	al, BYTE PTR _c$[ebp]
	mov	BYTE PTR tv176[ebp], al
$LN61@u_strToPun:
	movsx	cx, BYTE PTR tv176[ebp]
	mov	edx, DWORD PTR _destLength$[ebp]
	mov	eax, DWORD PTR _dest$[ebp]
	mov	WORD PTR [eax+edx*2], cx
$LN30@u_strToPun:
; Line 258
	mov	eax, DWORD PTR _destLength$[ebp]
	add	eax, 1
	mov	DWORD PTR _destLength$[ebp], eax
; Line 259
	jmp	$LN29@u_strToPun
$LN31@u_strToPun:
; Line 260
	cmp	DWORD PTR _caseFlags$[ebp], 0
	je	SHORT $LN62@u_strToPun
	mov	eax, DWORD PTR _caseFlags$[ebp]
	add	eax, DWORD PTR _j$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN62@u_strToPun
	mov	DWORD PTR tv183[ebp], 1
	jmp	SHORT $LN63@u_strToPun
$LN62@u_strToPun:
	mov	DWORD PTR tv183[ebp], 0
$LN63@u_strToPun:
	mov	edx, DWORD PTR tv183[ebp]
	shl	edx, 31					; 0000001fH
	mov	DWORD PTR _n$[ebp], edx
; Line 261
	movzx	eax, WORD PTR _c$[ebp]
	and	eax, -2048				; fffff800H
	cmp	eax, 55296				; 0000d800H
	je	SHORT $LN28@u_strToPun
; Line 262
	movzx	eax, WORD PTR _c$[ebp]
	or	eax, DWORD PTR _n$[ebp]
	mov	DWORD PTR _n$[ebp], eax
	jmp	$LN27@u_strToPun
$LN28@u_strToPun:
; Line 263
	movzx	eax, WORD PTR _c$[ebp]
	and	eax, -1024				; fffffc00H
	cmp	eax, 55296				; 0000d800H
	jne	SHORT $LN26@u_strToPun
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	cmp	eax, DWORD PTR _srcLength$[ebp]
	jge	SHORT $LN26@u_strToPun
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _src$[ebp]
	mov	dx, WORD PTR [ecx+eax*2+2]
	mov	WORD PTR _c2$[ebp], dx
	movzx	eax, WORD PTR _c2$[ebp]
	and	eax, -1024				; fffffc00H
	cmp	eax, 56320				; 0000dc00H
	jne	SHORT $LN26@u_strToPun
; Line 264
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
; Line 265
	movzx	eax, WORD PTR _c$[ebp]
	shl	eax, 10					; 0000000aH
	movzx	ecx, WORD PTR _c2$[ebp]
	lea	edx, DWORD PTR [eax+ecx-56613888]
	or	edx, DWORD PTR _n$[ebp]
	mov	DWORD PTR _n$[ebp], edx
; Line 266
	jmp	SHORT $LN27@u_strToPun
$LN26@u_strToPun:
; Line 268
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 10			; 0000000aH
; Line 269
	xor	eax, eax
	jmp	$LN54@u_strToPun
$LN27@u_strToPun:
; Line 271
	mov	eax, DWORD PTR _srcCPCount$[ebp]
	mov	ecx, DWORD PTR _n$[ebp]
	mov	DWORD PTR _cpBuffer$[ebp+eax*4], ecx
	mov	edx, DWORD PTR _srcCPCount$[ebp]
	add	edx, 1
	mov	DWORD PTR _srcCPCount$[ebp], edx
$LN29@u_strToPun:
; Line 273
	jmp	$LN34@u_strToPun
$LN36@u_strToPun:
; Line 277
	mov	eax, DWORD PTR _destLength$[ebp]
	mov	DWORD PTR _basicLength$[ebp], eax
; Line 278
	cmp	DWORD PTR _basicLength$[ebp], 0
	jle	SHORT $LN24@u_strToPun
; Line 279
	mov	eax, DWORD PTR _destLength$[ebp]
	cmp	eax, DWORD PTR _destCapacity$[ebp]
	jge	SHORT $LN23@u_strToPun
; Line 280
	mov	eax, 45					; 0000002dH
	mov	ecx, DWORD PTR _destLength$[ebp]
	mov	edx, DWORD PTR _dest$[ebp]
	mov	WORD PTR [edx+ecx*2], ax
$LN23@u_strToPun:
; Line 282
	mov	eax, DWORD PTR _destLength$[ebp]
	add	eax, 1
	mov	DWORD PTR _destLength$[ebp], eax
$LN24@u_strToPun:
; Line 292
	mov	DWORD PTR _n$[ebp], 128			; 00000080H
; Line 293
	mov	DWORD PTR _delta$[ebp], 0
; Line 294
	mov	DWORD PTR _bias$[ebp], 72		; 00000048H
; Line 297
	mov	eax, DWORD PTR _basicLength$[ebp]
	mov	DWORD PTR _handledCPCount$[ebp], eax
$LN22@u_strToPun:
	mov	eax, DWORD PTR _handledCPCount$[ebp]
	cmp	eax, DWORD PTR _srcCPCount$[ebp]
	jge	$LN21@u_strToPun
; Line 302
	mov	DWORD PTR _m$[ebp], 2147483647		; 7fffffffH
	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN20@u_strToPun
$LN19@u_strToPun:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN20@u_strToPun:
	mov	eax, DWORD PTR _j$[ebp]
	cmp	eax, DWORD PTR _srcCPCount$[ebp]
	jge	SHORT $LN18@u_strToPun
; Line 303
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _cpBuffer$[ebp+eax*4]
	and	ecx, 2147483647				; 7fffffffH
	mov	DWORD PTR _q$[ebp], ecx
; Line 304
	mov	eax, DWORD PTR _n$[ebp]
	cmp	eax, DWORD PTR _q$[ebp]
	jg	SHORT $LN17@u_strToPun
	mov	eax, DWORD PTR _q$[ebp]
	cmp	eax, DWORD PTR _m$[ebp]
	jge	SHORT $LN17@u_strToPun
; Line 305
	mov	eax, DWORD PTR _q$[ebp]
	mov	DWORD PTR _m$[ebp], eax
$LN17@u_strToPun:
; Line 307
	jmp	SHORT $LN19@u_strToPun
$LN18@u_strToPun:
; Line 313
	mov	ecx, DWORD PTR _m$[ebp]
	sub	ecx, DWORD PTR _n$[ebp]
	mov	eax, 2147483447				; 7fffff37H
	sub	eax, DWORD PTR _delta$[ebp]
	mov	esi, DWORD PTR _handledCPCount$[ebp]
	add	esi, 1
	cdq
	idiv	esi
	cmp	ecx, eax
	jle	SHORT $LN16@u_strToPun
; Line 314
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 5
; Line 315
	xor	eax, eax
	jmp	$LN54@u_strToPun
$LN16@u_strToPun:
; Line 317
	mov	eax, DWORD PTR _m$[ebp]
	sub	eax, DWORD PTR _n$[ebp]
	mov	ecx, DWORD PTR _handledCPCount$[ebp]
	add	ecx, 1
	imul	eax, ecx
	add	eax, DWORD PTR _delta$[ebp]
	mov	DWORD PTR _delta$[ebp], eax
; Line 318
	mov	eax, DWORD PTR _m$[ebp]
	mov	DWORD PTR _n$[ebp], eax
; Line 321
	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN15@u_strToPun
$LN14@u_strToPun:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN15@u_strToPun:
	mov	eax, DWORD PTR _j$[ebp]
	cmp	eax, DWORD PTR _srcCPCount$[ebp]
	jge	$LN13@u_strToPun
; Line 322
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _cpBuffer$[ebp+eax*4]
	and	ecx, 2147483647				; 7fffffffH
	mov	DWORD PTR _q$[ebp], ecx
; Line 323
	mov	eax, DWORD PTR _q$[ebp]
	cmp	eax, DWORD PTR _n$[ebp]
	jge	SHORT $LN12@u_strToPun
; Line 324
	mov	eax, DWORD PTR _delta$[ebp]
	add	eax, 1
	mov	DWORD PTR _delta$[ebp], eax
	jmp	$LN11@u_strToPun
$LN12@u_strToPun:
; Line 325
	mov	eax, DWORD PTR _q$[ebp]
	cmp	eax, DWORD PTR _n$[ebp]
	jne	$LN11@u_strToPun
; Line 327
	mov	eax, DWORD PTR _delta$[ebp]
	mov	DWORD PTR _q$[ebp], eax
	mov	DWORD PTR _k$[ebp], 36			; 00000024H
	jmp	SHORT $LN9@u_strToPun
$LN8@u_strToPun:
	mov	eax, DWORD PTR _k$[ebp]
	add	eax, 36					; 00000024H
	mov	DWORD PTR _k$[ebp], eax
$LN9@u_strToPun:
; Line 339
	mov	eax, DWORD PTR _k$[ebp]
	sub	eax, DWORD PTR _bias$[ebp]
	mov	DWORD PTR _t$[ebp], eax
; Line 340
	cmp	DWORD PTR _t$[ebp], 1
	jge	SHORT $LN6@u_strToPun
; Line 341
	mov	DWORD PTR _t$[ebp], 1
	jmp	SHORT $LN5@u_strToPun
$LN6@u_strToPun:
; Line 342
	mov	eax, DWORD PTR _bias$[ebp]
	add	eax, 26					; 0000001aH
	cmp	DWORD PTR _k$[ebp], eax
	jl	SHORT $LN5@u_strToPun
; Line 343
	mov	DWORD PTR _t$[ebp], 26			; 0000001aH
$LN5@u_strToPun:
; Line 346
	mov	eax, DWORD PTR _q$[ebp]
	cmp	eax, DWORD PTR _t$[ebp]
	jge	SHORT $LN3@u_strToPun
; Line 347
	jmp	SHORT $LN7@u_strToPun
$LN3@u_strToPun:
; Line 350
	mov	eax, DWORD PTR _destLength$[ebp]
	cmp	eax, DWORD PTR _destCapacity$[ebp]
	jge	SHORT $LN2@u_strToPun
; Line 351
	push	0
	mov	eax, DWORD PTR _q$[ebp]
	sub	eax, DWORD PTR _t$[ebp]
	mov	ecx, 36					; 00000024H
	sub	ecx, DWORD PTR _t$[ebp]
	cdq
	idiv	ecx
	add	edx, DWORD PTR _t$[ebp]
	push	edx
	call	?digitToBasic@@YADHC@Z			; digitToBasic
	add	esp, 8
	movsx	dx, al
	mov	eax, DWORD PTR _destLength$[ebp]
	mov	ecx, DWORD PTR _dest$[ebp]
	mov	WORD PTR [ecx+eax*2], dx
$LN2@u_strToPun:
; Line 353
	mov	eax, DWORD PTR _destLength$[ebp]
	add	eax, 1
	mov	DWORD PTR _destLength$[ebp], eax
; Line 354
	mov	eax, DWORD PTR _q$[ebp]
	sub	eax, DWORD PTR _t$[ebp]
	mov	ecx, 36					; 00000024H
	sub	ecx, DWORD PTR _t$[ebp]
	cdq
	idiv	ecx
	mov	DWORD PTR _q$[ebp], eax
; Line 355
	jmp	$LN8@u_strToPun
$LN7@u_strToPun:
; Line 357
	mov	eax, DWORD PTR _destLength$[ebp]
	cmp	eax, DWORD PTR _destCapacity$[ebp]
	jge	SHORT $LN1@u_strToPun
; Line 358
	mov	eax, DWORD PTR _j$[ebp]
	cmp	DWORD PTR _cpBuffer$[ebp+eax*4], 0
	setl	cl
	movzx	edx, cl
	push	edx
	mov	eax, DWORD PTR _q$[ebp]
	push	eax
	call	?digitToBasic@@YADHC@Z			; digitToBasic
	add	esp, 8
	movsx	cx, al
	mov	edx, DWORD PTR _destLength$[ebp]
	mov	eax, DWORD PTR _dest$[ebp]
	mov	WORD PTR [eax+edx*2], cx
$LN1@u_strToPun:
; Line 360
	mov	eax, DWORD PTR _destLength$[ebp]
	add	eax, 1
	mov	DWORD PTR _destLength$[ebp], eax
; Line 361
	mov	eax, DWORD PTR _handledCPCount$[ebp]
	cmp	eax, DWORD PTR _basicLength$[ebp]
	sete	cl
	movzx	edx, cl
	push	edx
	mov	eax, DWORD PTR _handledCPCount$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _delta$[ebp]
	push	ecx
	call	?adaptBias@@YAHHHC@Z			; adaptBias
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _bias$[ebp], eax
; Line 362
	mov	DWORD PTR _delta$[ebp], 0
; Line 363
	mov	eax, DWORD PTR _handledCPCount$[ebp]
	add	eax, 1
	mov	DWORD PTR _handledCPCount$[ebp], eax
$LN11@u_strToPun:
; Line 365
	jmp	$LN14@u_strToPun
$LN13@u_strToPun:
; Line 367
	mov	eax, DWORD PTR _delta$[ebp]
	add	eax, 1
	mov	DWORD PTR _delta$[ebp], eax
; Line 368
	mov	eax, DWORD PTR _n$[ebp]
	add	eax, 1
	mov	DWORD PTR _n$[ebp], eax
; Line 369
	jmp	$LN22@u_strToPun
$LN21@u_strToPun:
; Line 371
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _destLength$[ebp]
	push	ecx
	mov	edx, DWORD PTR _destCapacity$[ebp]
	push	edx
	mov	eax, DWORD PTR _dest$[ebp]
	push	eax
	call	_u_terminateUChars_56
	add	esp, 16					; 00000010H
$LN54@u_strToPun:
; Line 372
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN66@u_strToPun
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 1176				; 00000498H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN66@u_strToPun:
	DD	1
	DD	$LN65@u_strToPun
$LN65@u_strToPun:
	DD	-808					; fffffcd8H
	DD	800					; 00000320H
	DD	$LN64@u_strToPun
$LN64@u_strToPun:
	DB	99					; 00000063H
	DB	112					; 00000070H
	DB	66					; 00000042H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
_u_strToPunycode_56 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?U_FAILURE@@YACW4UErrorCode@@@Z
_TEXT	SEGMENT
_code$ = 8						; size = 4
?U_FAILURE@@YACW4UErrorCode@@@Z PROC			; U_FAILURE, COMDAT
; File d:\mozilla\intl\icu\source\common\unicode\utypes.h
; Line 705
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	cmp	DWORD PTR _code$[ebp], 0
	setg	al
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?U_FAILURE@@YACW4UErrorCode@@@Z ENDP			; U_FAILURE
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?digitToBasic@@YADHC@Z
_TEXT	SEGMENT
_digit$ = 8						; size = 4
_uppercase$ = 12					; size = 1
?digitToBasic@@YADHC@Z PROC				; digitToBasic, COMDAT
; File d:\mozilla\intl\icu\source\common\punycode.cpp
; Line 93
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 96
	cmp	DWORD PTR _digit$[ebp], 26		; 0000001aH
	jge	SHORT $LN4@digitToBas
; Line 97
	movsx	eax, BYTE PTR _uppercase$[ebp]
	test	eax, eax
	je	SHORT $LN3@digitToBas
; Line 98
	mov	eax, DWORD PTR _digit$[ebp]
	add	eax, 65					; 00000041H
	jmp	SHORT $LN5@digitToBas
; Line 99
	jmp	SHORT $LN2@digitToBas
$LN3@digitToBas:
; Line 100
	mov	eax, DWORD PTR _digit$[ebp]
	add	eax, 97					; 00000061H
	jmp	SHORT $LN5@digitToBas
$LN2@digitToBas:
; Line 102
	jmp	SHORT $LN5@digitToBas
$LN4@digitToBas:
; Line 103
	mov	eax, DWORD PTR _digit$[ebp]
	add	eax, 22					; 00000016H
$LN5@digitToBas:
; Line 105
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?digitToBasic@@YADHC@Z ENDP				; digitToBasic
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?asciiCaseMap@@YADDC@Z
_TEXT	SEGMENT
_b$ = 8							; size = 1
_uppercase$ = 12					; size = 1
?asciiCaseMap@@YADDC@Z PROC				; asciiCaseMap, COMDAT
; Line 140
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 141
	movsx	eax, BYTE PTR _uppercase$[ebp]
	test	eax, eax
	je	SHORT $LN4@asciiCaseM
; Line 142
	movsx	eax, BYTE PTR _b$[ebp]
	cmp	eax, 97					; 00000061H
	jl	SHORT $LN3@asciiCaseM
	movsx	eax, BYTE PTR _b$[ebp]
	cmp	eax, 122				; 0000007aH
	jg	SHORT $LN3@asciiCaseM
; Line 143
	movsx	eax, BYTE PTR _b$[ebp]
	sub	eax, 32					; 00000020H
	mov	BYTE PTR _b$[ebp], al
$LN3@asciiCaseM:
; Line 145
	jmp	SHORT $LN2@asciiCaseM
$LN4@asciiCaseM:
; Line 146
	movsx	eax, BYTE PTR _b$[ebp]
	cmp	eax, 65					; 00000041H
	jl	SHORT $LN2@asciiCaseM
	movsx	eax, BYTE PTR _b$[ebp]
	cmp	eax, 90					; 0000005aH
	jg	SHORT $LN2@asciiCaseM
; Line 147
	movsx	eax, BYTE PTR _b$[ebp]
	add	eax, 32					; 00000020H
	mov	BYTE PTR _b$[ebp], al
$LN2@asciiCaseM:
; Line 150
	mov	al, BYTE PTR _b$[ebp]
; Line 151
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?asciiCaseMap@@YADDC@Z ENDP				; asciiCaseMap
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?adaptBias@@YAHHHC@Z
_TEXT	SEGMENT
_count$ = -8						; size = 4
_delta$ = 8						; size = 4
_length$ = 12						; size = 4
_firstTime$ = 16					; size = 1
?adaptBias@@YAHHHC@Z PROC				; adaptBias, COMDAT
; Line 162
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 165
	movsx	eax, BYTE PTR _firstTime$[ebp]
	test	eax, eax
	je	SHORT $LN5@adaptBias
; Line 166
	mov	eax, DWORD PTR _delta$[ebp]
	cdq
	mov	ecx, 700				; 000002bcH
	idiv	ecx
	mov	DWORD PTR _delta$[ebp], eax
; Line 167
	jmp	SHORT $LN4@adaptBias
$LN5@adaptBias:
; Line 168
	mov	eax, DWORD PTR _delta$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _delta$[ebp], eax
$LN4@adaptBias:
; Line 171
	mov	eax, DWORD PTR _delta$[ebp]
	cdq
	idiv	DWORD PTR _length$[ebp]
	add	eax, DWORD PTR _delta$[ebp]
	mov	DWORD PTR _delta$[ebp], eax
; Line 172
	mov	DWORD PTR _count$[ebp], 0
	jmp	SHORT $LN3@adaptBias
$LN2@adaptBias:
	mov	eax, DWORD PTR _count$[ebp]
	add	eax, 36					; 00000024H
	mov	DWORD PTR _count$[ebp], eax
$LN3@adaptBias:
	cmp	DWORD PTR _delta$[ebp], 455		; 000001c7H
	jle	SHORT $LN1@adaptBias
; Line 173
	mov	eax, DWORD PTR _delta$[ebp]
	cdq
	mov	ecx, 35					; 00000023H
	idiv	ecx
	mov	DWORD PTR _delta$[ebp], eax
; Line 174
	jmp	SHORT $LN2@adaptBias
$LN1@adaptBias:
; Line 176
	mov	eax, DWORD PTR _delta$[ebp]
	imul	eax, 36					; 00000024H
	mov	ecx, DWORD PTR _delta$[ebp]
	add	ecx, 38					; 00000026H
	cdq
	idiv	ecx
	add	eax, DWORD PTR _count$[ebp]
; Line 177
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?adaptBias@@YAHHHC@Z ENDP				; adaptBias
_TEXT	ENDS
PUBLIC	??_C@_1BM@MEDOPMNL@?$AAd?$AAe?$AAs?$AAt?$AAL?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$DO?$AA?$DN?$AA0?$AA?$AA@ ; `string'
PUBLIC	??_C@_1FO@NJAIDAAM@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@ ; `string'
PUBLIC	?__LINE__Var@?1??u_strFromPunycode_56@@9@4JA	; `u_strFromPunycode_56'::`2'::__LINE__Var
PUBLIC	_u_strFromPunycode_56
EXTRN	__imp__memmove:PROC
EXTRN	_uprv_checkValidMemory:PROC
EXTRN	__imp___wassert:PROC
EXTRN	_u_strlen_56:PROC
;	COMDAT ??_C@_1BM@MEDOPMNL@?$AAd?$AAe?$AAs?$AAt?$AAL?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$DO?$AA?$DN?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_1BM@MEDOPMNL@?$AAd?$AAe?$AAs?$AAt?$AAL?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$DO?$AA?$DN?$AA0?$AA?$AA@ DB 'd'
	DB	00H, 'e', 00H, 's', 00H, 't', 00H, 'L', 00H, 'e', 00H, 'n', 00H
	DB	'g', 00H, 't', 00H, 'h', 00H, '>', 00H, '=', 00H, '0', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1FO@NJAIDAAM@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@
CONST	SEGMENT
??_C@_1FO@NJAIDAAM@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@ DB 'd'
	DB	00H, ':', 00H, '\', 00H, 'm', 00H, 'o', 00H, 'z', 00H, 'i', 00H
	DB	'l', 00H, 'l', 00H, 'a', 00H, '\', 00H, 'i', 00H, 'n', 00H, 't'
	DB	00H, 'l', 00H, '\', 00H, 'i', 00H, 'c', 00H, 'u', 00H, '\', 00H
	DB	's', 00H, 'o', 00H, 'u', 00H, 'r', 00H, 'c', 00H, 'e', 00H, '\'
	DB	00H, 'c', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'o', 00H, 'n', 00H
	DB	'\', 00H, 'p', 00H, 'u', 00H, 'n', 00H, 'y', 00H, 'c', 00H, 'o'
	DB	00H, 'd', 00H, 'e', 00H, '.', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??u_strFromPunycode_56@@9@4JA
_DATA	SEGMENT
?__LINE__Var@?1??u_strFromPunycode_56@@9@4JA DD 017aH	; `u_strFromPunycode_56'::`2'::__LINE__Var
; Function compile flags: /Odtp /RTCsu /ZI
_DATA	ENDS
;	COMDAT _u_strFromPunycode_56
_TEXT	SEGMENT
tv203 = -412						; size = 4
tv138 = -412						; size = 4
tv266 = -409						; size = 1
tv135 = -409						; size = 1
___N$11125 = -212					; size = 4
_codeUnitIndex$11120 = -200				; size = 4
_b$ = -188						; size = 2
_cpLength$ = -176					; size = 4
_firstSupplementaryIndex$ = -164			; size = 4
_destCPCount$ = -152					; size = 4
_t$ = -140						; size = 4
_digit$ = -128						; size = 4
_k$ = -116						; size = 4
_w$ = -104						; size = 4
_oldi$ = -92						; size = 4
_in$ = -80						; size = 4
_j$ = -68						; size = 4
_basicLength$ = -56					; size = 4
_bias$ = -44						; size = 4
_i$ = -32						; size = 4
_destLength$ = -20					; size = 4
_n$ = -8						; size = 4
_src$ = 8						; size = 4
_srcLength$ = 12					; size = 4
_dest$ = 16						; size = 4
_destCapacity$ = 20					; size = 4
_caseFlags$ = 24					; size = 4
_pErrorCode$ = 28					; size = 4
_u_strFromPunycode_56 PROC				; COMDAT
; Line 378
	push	ebp
	mov	ebp, esp
	sub	esp, 412				; 0000019cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-412]
	mov	ecx, 103				; 00000067H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 384
	cmp	DWORD PTR _pErrorCode$[ebp], 0
	je	SHORT $LN43@u_strFromP
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN44@u_strFromP
$LN43@u_strFromP:
; Line 385
	xor	eax, eax
	jmp	$LN45@u_strFromP
$LN44@u_strFromP:
; Line 388
	cmp	DWORD PTR _src$[ebp], 0
	je	SHORT $LN41@u_strFromP
	cmp	DWORD PTR _srcLength$[ebp], -1
	jl	SHORT $LN41@u_strFromP
	cmp	DWORD PTR _dest$[ebp], 0
	jne	SHORT $LN42@u_strFromP
	cmp	DWORD PTR _destCapacity$[ebp], 0
	je	SHORT $LN42@u_strFromP
$LN41@u_strFromP:
; Line 389
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 1
; Line 390
	xor	eax, eax
	jmp	$LN45@u_strFromP
$LN42@u_strFromP:
; Line 393
	cmp	DWORD PTR _srcLength$[ebp], -1
	jne	SHORT $LN40@u_strFromP
; Line 394
	mov	eax, DWORD PTR _src$[ebp]
	push	eax
	call	_u_strlen_56
	add	esp, 4
	mov	DWORD PTR _srcLength$[ebp], eax
$LN40@u_strFromP:
; Line 405
	mov	eax, DWORD PTR _srcLength$[ebp]
	mov	DWORD PTR _j$[ebp], eax
$LN39@u_strFromP:
	cmp	DWORD PTR _j$[ebp], 0
	jle	SHORT $LN38@u_strFromP
; Line 406
	mov	eax, DWORD PTR _j$[ebp]
	sub	eax, 1
	mov	DWORD PTR _j$[ebp], eax
	mov	ecx, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR _src$[ebp]
	movzx	eax, WORD PTR [edx+ecx*2]
	cmp	eax, 45					; 0000002dH
	jne	SHORT $LN37@u_strFromP
; Line 407
	jmp	SHORT $LN38@u_strFromP
$LN37@u_strFromP:
; Line 409
	jmp	SHORT $LN39@u_strFromP
$LN38@u_strFromP:
; Line 410
	mov	eax, DWORD PTR _j$[ebp]
	mov	DWORD PTR _destCPCount$[ebp], eax
	mov	ecx, DWORD PTR _destCPCount$[ebp]
	mov	DWORD PTR _basicLength$[ebp], ecx
	mov	edx, DWORD PTR _basicLength$[ebp]
	mov	DWORD PTR _destLength$[ebp], edx
; Line 411
	cmp	DWORD PTR _destLength$[ebp], 0
	jge	SHORT $LN36@u_strFromP
	mov	eax, DWORD PTR ?__LINE__Var@?1??u_strFromPunycode_56@@9@4JA
	add	eax, 33					; 00000021H
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1FO@NJAIDAAM@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@
	push	OFFSET ??_C@_1BM@MEDOPMNL@?$AAd?$AAe?$AAs?$AAt?$AAL?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$DO?$AA?$DN?$AA0?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN36@u_strFromP:
; Line 413
	cmp	DWORD PTR _j$[ebp], 0
	jle	$LN35@u_strFromP
; Line 414
	mov	eax, DWORD PTR _j$[ebp]
	sub	eax, 1
	mov	DWORD PTR _j$[ebp], eax
	mov	ecx, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR _src$[ebp]
	mov	ax, WORD PTR [edx+ecx*2]
	mov	WORD PTR _b$[ebp], ax
; Line 415
	movzx	eax, WORD PTR _b$[ebp]
	cmp	eax, 128				; 00000080H
	jl	SHORT $LN34@u_strFromP
; Line 416
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 10			; 0000000aH
; Line 417
	xor	eax, eax
	jmp	$LN45@u_strFromP
$LN34@u_strFromP:
; Line 420
	mov	eax, DWORD PTR _j$[ebp]
	cmp	eax, DWORD PTR _destCapacity$[ebp]
	jge	SHORT $LN33@u_strFromP
; Line 421
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _dest$[ebp]
	mov	dx, WORD PTR _b$[ebp]
	mov	WORD PTR [ecx+eax*2], dx
; Line 423
	cmp	DWORD PTR _caseFlags$[ebp], 0
	je	SHORT $LN33@u_strFromP
; Line 424
	movzx	eax, WORD PTR _b$[ebp]
	cmp	eax, 65					; 00000041H
	jl	SHORT $LN48@u_strFromP
	movzx	ecx, WORD PTR _b$[ebp]
	cmp	ecx, 90					; 0000005aH
	jg	SHORT $LN48@u_strFromP
	mov	BYTE PTR tv135[ebp], 1
	jmp	SHORT $LN49@u_strFromP
$LN48@u_strFromP:
	mov	BYTE PTR tv135[ebp], 0
$LN49@u_strFromP:
	mov	edx, DWORD PTR _caseFlags$[ebp]
	add	edx, DWORD PTR _j$[ebp]
	mov	al, BYTE PTR tv135[ebp]
	mov	BYTE PTR [edx], al
$LN33@u_strFromP:
; Line 427
	jmp	$LN36@u_strFromP
$LN35@u_strFromP:
; Line 430
	mov	DWORD PTR _n$[ebp], 128			; 00000080H
; Line 431
	mov	DWORD PTR _i$[ebp], 0
; Line 432
	mov	DWORD PTR _bias$[ebp], 72		; 00000048H
; Line 433
	mov	DWORD PTR _firstSupplementaryIndex$[ebp], 1000000000 ; 3b9aca00H
; Line 440
	cmp	DWORD PTR _basicLength$[ebp], 0
	jle	SHORT $LN50@u_strFromP
	mov	eax, DWORD PTR _basicLength$[ebp]
	add	eax, 1
	mov	DWORD PTR tv138[ebp], eax
	jmp	SHORT $LN51@u_strFromP
$LN50@u_strFromP:
	mov	DWORD PTR tv138[ebp], 0
$LN51@u_strFromP:
	mov	ecx, DWORD PTR tv138[ebp]
	mov	DWORD PTR _in$[ebp], ecx
$LN31@u_strFromP:
	mov	eax, DWORD PTR _in$[ebp]
	cmp	eax, DWORD PTR _srcLength$[ebp]
	jge	$LN30@u_strFromP
; Line 450
	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR _oldi$[ebp], eax
	mov	DWORD PTR _w$[ebp], 1
	mov	DWORD PTR _k$[ebp], 36			; 00000024H
	jmp	SHORT $LN29@u_strFromP
$LN28@u_strFromP:
	mov	eax, DWORD PTR _k$[ebp]
	add	eax, 36					; 00000024H
	mov	DWORD PTR _k$[ebp], eax
$LN29@u_strFromP:
; Line 451
	mov	eax, DWORD PTR _in$[ebp]
	cmp	eax, DWORD PTR _srcLength$[ebp]
	jl	SHORT $LN26@u_strFromP
; Line 452
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 12			; 0000000cH
; Line 453
	xor	eax, eax
	jmp	$LN45@u_strFromP
$LN26@u_strFromP:
; Line 456
	mov	eax, DWORD PTR _in$[ebp]
	mov	ecx, DWORD PTR _src$[ebp]
	movzx	edx, BYTE PTR [ecx+eax*2]
	movsx	eax, BYTE PTR _basicToDigit[edx]
	mov	DWORD PTR _digit$[ebp], eax
	mov	ecx, DWORD PTR _in$[ebp]
	add	ecx, 1
	mov	DWORD PTR _in$[ebp], ecx
; Line 457
	cmp	DWORD PTR _digit$[ebp], 0
	jge	SHORT $LN25@u_strFromP
; Line 458
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 10			; 0000000aH
; Line 459
	xor	eax, eax
	jmp	$LN45@u_strFromP
$LN25@u_strFromP:
; Line 461
	mov	eax, 2147483647				; 7fffffffH
	sub	eax, DWORD PTR _i$[ebp]
	cdq
	idiv	DWORD PTR _w$[ebp]
	cmp	DWORD PTR _digit$[ebp], eax
	jle	SHORT $LN24@u_strFromP
; Line 463
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 12			; 0000000cH
; Line 464
	xor	eax, eax
	jmp	$LN45@u_strFromP
$LN24@u_strFromP:
; Line 467
	mov	eax, DWORD PTR _digit$[ebp]
	imul	eax, DWORD PTR _w$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR _i$[ebp], eax
; Line 476
	mov	eax, DWORD PTR _k$[ebp]
	sub	eax, DWORD PTR _bias$[ebp]
	mov	DWORD PTR _t$[ebp], eax
; Line 477
	cmp	DWORD PTR _t$[ebp], 1
	jge	SHORT $LN23@u_strFromP
; Line 478
	mov	DWORD PTR _t$[ebp], 1
	jmp	SHORT $LN22@u_strFromP
$LN23@u_strFromP:
; Line 479
	mov	eax, DWORD PTR _bias$[ebp]
	add	eax, 26					; 0000001aH
	cmp	DWORD PTR _k$[ebp], eax
	jl	SHORT $LN22@u_strFromP
; Line 480
	mov	DWORD PTR _t$[ebp], 26			; 0000001aH
$LN22@u_strFromP:
; Line 482
	mov	eax, DWORD PTR _digit$[ebp]
	cmp	eax, DWORD PTR _t$[ebp]
	jge	SHORT $LN20@u_strFromP
; Line 483
	jmp	SHORT $LN27@u_strFromP
$LN20@u_strFromP:
; Line 486
	mov	ecx, 36					; 00000024H
	sub	ecx, DWORD PTR _t$[ebp]
	mov	eax, 2147483647				; 7fffffffH
	cdq
	idiv	ecx
	cmp	DWORD PTR _w$[ebp], eax
	jle	SHORT $LN19@u_strFromP
; Line 488
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 12			; 0000000cH
; Line 489
	xor	eax, eax
	jmp	$LN45@u_strFromP
$LN19@u_strFromP:
; Line 491
	mov	eax, 36					; 00000024H
	sub	eax, DWORD PTR _t$[ebp]
	imul	eax, DWORD PTR _w$[ebp]
	mov	DWORD PTR _w$[ebp], eax
; Line 492
	jmp	$LN28@u_strFromP
$LN27@u_strFromP:
; Line 499
	mov	eax, DWORD PTR _destCPCount$[ebp]
	add	eax, 1
	mov	DWORD PTR _destCPCount$[ebp], eax
; Line 500
	cmp	DWORD PTR _oldi$[ebp], 0
	sete	al
	movzx	ecx, al
	push	ecx
	mov	edx, DWORD PTR _destCPCount$[ebp]
	push	edx
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, DWORD PTR _oldi$[ebp]
	push	eax
	call	?adaptBias@@YAHHHC@Z			; adaptBias
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _bias$[ebp], eax
; Line 506
	mov	eax, DWORD PTR _i$[ebp]
	cdq
	idiv	DWORD PTR _destCPCount$[ebp]
	mov	ecx, 2147483647				; 7fffffffH
	sub	ecx, DWORD PTR _n$[ebp]
	cmp	eax, ecx
	jle	SHORT $LN18@u_strFromP
; Line 508
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 12			; 0000000cH
; Line 509
	xor	eax, eax
	jmp	$LN45@u_strFromP
$LN18@u_strFromP:
; Line 512
	mov	eax, DWORD PTR _i$[ebp]
	cdq
	idiv	DWORD PTR _destCPCount$[ebp]
	add	eax, DWORD PTR _n$[ebp]
	mov	DWORD PTR _n$[ebp], eax
; Line 513
	mov	eax, DWORD PTR _i$[ebp]
	cdq
	idiv	DWORD PTR _destCPCount$[ebp]
	mov	DWORD PTR _i$[ebp], edx
; Line 517
	cmp	DWORD PTR _n$[ebp], 1114111		; 0010ffffH
	jg	SHORT $LN16@u_strFromP
	mov	eax, DWORD PTR _n$[ebp]
	and	eax, -2048				; fffff800H
	cmp	eax, 55296				; 0000d800H
	jne	SHORT $LN17@u_strFromP
$LN16@u_strFromP:
; Line 519
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 12			; 0000000cH
; Line 520
	xor	eax, eax
	jmp	$LN45@u_strFromP
$LN17@u_strFromP:
; Line 524
	mov	eax, 65535				; 0000ffffH
	cmp	eax, DWORD PTR _n$[ebp]
	sbb	ecx, ecx
	neg	ecx
	add	ecx, 1
	mov	DWORD PTR _cpLength$[ebp], ecx
; Line 525
	cmp	DWORD PTR _dest$[ebp], 0
	je	$LN15@u_strFromP
	mov	eax, DWORD PTR _destLength$[ebp]
	add	eax, DWORD PTR _cpLength$[ebp]
	cmp	eax, DWORD PTR _destCapacity$[ebp]
	jg	$LN15@u_strFromP
; Line 538
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _firstSupplementaryIndex$[ebp]
	jg	SHORT $LN14@u_strFromP
; Line 539
	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR _codeUnitIndex$11120[ebp], eax
; Line 540
	cmp	DWORD PTR _cpLength$[ebp], 1
	jle	SHORT $LN13@u_strFromP
; Line 541
	mov	eax, DWORD PTR _codeUnitIndex$11120[ebp]
	mov	DWORD PTR _firstSupplementaryIndex$[ebp], eax
; Line 542
	jmp	SHORT $LN12@u_strFromP
$LN13@u_strFromP:
; Line 543
	mov	eax, DWORD PTR _firstSupplementaryIndex$[ebp]
	add	eax, 1
	mov	DWORD PTR _firstSupplementaryIndex$[ebp], eax
$LN12@u_strFromP:
; Line 545
	jmp	$LN11@u_strFromP
$LN14@u_strFromP:
; Line 546
	mov	eax, DWORD PTR _firstSupplementaryIndex$[ebp]
	mov	DWORD PTR _codeUnitIndex$11120[ebp], eax
; Line 547
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, DWORD PTR _codeUnitIndex$11120[ebp]
	mov	DWORD PTR ___N$11125[ebp], eax
$LN10@u_strFromP:
	cmp	DWORD PTR ___N$11125[ebp], 0
	jle	$LN11@u_strFromP
	mov	eax, DWORD PTR _codeUnitIndex$11120[ebp]
	cmp	eax, DWORD PTR _destLength$[ebp]
	jl	SHORT $LN8@u_strFromP
	cmp	DWORD PTR _destLength$[ebp], 0
	jge	$LN11@u_strFromP
	mov	eax, DWORD PTR _codeUnitIndex$11120[ebp]
	mov	ecx, DWORD PTR _dest$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	test	edx, edx
	je	$LN11@u_strFromP
$LN8@u_strFromP:
	mov	eax, DWORD PTR _codeUnitIndex$11120[ebp]
	mov	ecx, DWORD PTR _dest$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	and	edx, -1024				; fffffc00H
	mov	eax, DWORD PTR _codeUnitIndex$11120[ebp]
	add	eax, 1
	mov	DWORD PTR _codeUnitIndex$11120[ebp], eax
	cmp	edx, 55296				; 0000d800H
	jne	SHORT $LN52@u_strFromP
	mov	DWORD PTR tv203[ebp], 1
	jmp	SHORT $LN53@u_strFromP
$LN52@u_strFromP:
	mov	DWORD PTR tv203[ebp], 0
$LN53@u_strFromP:
	cmp	DWORD PTR tv203[ebp], 0
	je	SHORT $LN7@u_strFromP
	mov	eax, DWORD PTR _codeUnitIndex$11120[ebp]
	cmp	eax, DWORD PTR _destLength$[ebp]
	je	SHORT $LN7@u_strFromP
	mov	eax, DWORD PTR _codeUnitIndex$11120[ebp]
	mov	ecx, DWORD PTR _dest$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	and	edx, -1024				; fffffc00H
	cmp	edx, 56320				; 0000dc00H
	jne	SHORT $LN7@u_strFromP
	mov	eax, DWORD PTR _codeUnitIndex$11120[ebp]
	add	eax, 1
	mov	DWORD PTR _codeUnitIndex$11120[ebp], eax
$LN7@u_strFromP:
	mov	eax, DWORD PTR ___N$11125[ebp]
	sub	eax, 1
	mov	DWORD PTR ___N$11125[ebp], eax
	jmp	$LN10@u_strFromP
$LN11@u_strFromP:
; Line 551
	mov	eax, DWORD PTR _codeUnitIndex$11120[ebp]
	cmp	eax, DWORD PTR _destLength$[ebp]
	jge	$LN6@u_strFromP
; Line 554
	push	1
	mov	eax, DWORD PTR _codeUnitIndex$11120[ebp]
	mov	ecx, DWORD PTR _dest$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	push	edx
	call	_uprv_checkValidMemory
	add	esp, 8
	mov	eax, DWORD PTR _destLength$[ebp]
	sub	eax, DWORD PTR _codeUnitIndex$11120[ebp]
	shl	eax, 1
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _codeUnitIndex$11120[ebp]
	mov	edx, DWORD PTR _dest$[ebp]
	lea	eax, DWORD PTR [edx+ecx*2]
	push	eax
	mov	ecx, DWORD PTR _codeUnitIndex$11120[ebp]
	mov	edx, DWORD PTR _dest$[ebp]
	lea	eax, DWORD PTR [edx+ecx*2]
	mov	ecx, DWORD PTR _cpLength$[ebp]
	lea	edx, DWORD PTR [eax+ecx*2]
	push	edx
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 555
	cmp	DWORD PTR _caseFlags$[ebp], 0
	je	SHORT $LN6@u_strFromP
; Line 558
	push	1
	mov	eax, DWORD PTR _caseFlags$[ebp]
	add	eax, DWORD PTR _codeUnitIndex$11120[ebp]
	push	eax
	call	_uprv_checkValidMemory
	add	esp, 8
	mov	ecx, DWORD PTR _destLength$[ebp]
	sub	ecx, DWORD PTR _codeUnitIndex$11120[ebp]
	mov	esi, esp
	push	ecx
	mov	edx, DWORD PTR _caseFlags$[ebp]
	add	edx, DWORD PTR _codeUnitIndex$11120[ebp]
	push	edx
	mov	eax, DWORD PTR _caseFlags$[ebp]
	add	eax, DWORD PTR _codeUnitIndex$11120[ebp]
	add	eax, DWORD PTR _cpLength$[ebp]
	push	eax
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN6@u_strFromP:
; Line 561
	cmp	DWORD PTR _cpLength$[ebp], 1
	jne	SHORT $LN4@u_strFromP
; Line 563
	mov	eax, DWORD PTR _codeUnitIndex$11120[ebp]
	mov	ecx, DWORD PTR _dest$[ebp]
	mov	dx, WORD PTR _n$[ebp]
	mov	WORD PTR [ecx+eax*2], dx
; Line 564
	jmp	SHORT $LN3@u_strFromP
$LN4@u_strFromP:
; Line 566
	mov	eax, DWORD PTR _n$[ebp]
	sar	eax, 10					; 0000000aH
	add	eax, 55232				; 0000d7c0H
	mov	ecx, DWORD PTR _codeUnitIndex$11120[ebp]
	mov	edx, DWORD PTR _dest$[ebp]
	mov	WORD PTR [edx+ecx*2], ax
; Line 567
	mov	eax, DWORD PTR _n$[ebp]
	and	eax, 1023				; 000003ffH
	or	eax, 56320				; 0000dc00H
	mov	ecx, DWORD PTR _codeUnitIndex$11120[ebp]
	mov	edx, DWORD PTR _dest$[ebp]
	mov	WORD PTR [edx+ecx*2+2], ax
$LN3@u_strFromP:
; Line 569
	cmp	DWORD PTR _caseFlags$[ebp], 0
	je	SHORT $LN15@u_strFromP
; Line 571
	mov	eax, DWORD PTR _in$[ebp]
	mov	ecx, DWORD PTR _src$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2-2]
	cmp	edx, 65					; 00000041H
	jl	SHORT $LN54@u_strFromP
	mov	eax, DWORD PTR _in$[ebp]
	mov	ecx, DWORD PTR _src$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2-2]
	cmp	edx, 90					; 0000005aH
	jg	SHORT $LN54@u_strFromP
	mov	BYTE PTR tv266[ebp], 1
	jmp	SHORT $LN55@u_strFromP
$LN54@u_strFromP:
	mov	BYTE PTR tv266[ebp], 0
$LN55@u_strFromP:
	mov	eax, DWORD PTR _caseFlags$[ebp]
	add	eax, DWORD PTR _codeUnitIndex$11120[ebp]
	mov	cl, BYTE PTR tv266[ebp]
	mov	BYTE PTR [eax], cl
; Line 572
	cmp	DWORD PTR _cpLength$[ebp], 2
	jne	SHORT $LN15@u_strFromP
; Line 573
	mov	eax, DWORD PTR _caseFlags$[ebp]
	add	eax, DWORD PTR _codeUnitIndex$11120[ebp]
	mov	BYTE PTR [eax+1], 0
$LN15@u_strFromP:
; Line 577
	mov	eax, DWORD PTR _destLength$[ebp]
	add	eax, DWORD PTR _cpLength$[ebp]
	mov	DWORD PTR _destLength$[ebp], eax
; Line 578
	jns	SHORT $LN56@u_strFromP
	mov	eax, DWORD PTR ?__LINE__Var@?1??u_strFromPunycode_56@@9@4JA
	add	eax, 200				; 000000c8H
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1FO@NJAIDAAM@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@
	push	OFFSET ??_C@_1BM@MEDOPMNL@?$AAd?$AAe?$AAs?$AAt?$AAL?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$DO?$AA?$DN?$AA0?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN56@u_strFromP:
; Line 579
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
; Line 580
	jmp	$LN31@u_strFromP
$LN30@u_strFromP:
; Line 582
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _destLength$[ebp]
	push	ecx
	mov	edx, DWORD PTR _destCapacity$[ebp]
	push	edx
	mov	eax, DWORD PTR _dest$[ebp]
	push	eax
	call	_u_terminateUChars_56
	add	esp, 16					; 00000010H
$LN45@u_strFromP:
; Line 583
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 412				; 0000019cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_u_strFromPunycode_56 ENDP
_TEXT	ENDS
END
