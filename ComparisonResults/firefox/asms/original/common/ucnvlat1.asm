; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\mozilla\intl\icu\source\common\ucnvlat1.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	__Latin1Data_56
PUBLIC	__ASCIIData_56
CONST	SEGMENT
__Latin1Impl DD	03H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:__Latin1ToUnicodeWithOffsets
	DD	FLAT:__Latin1ToUnicodeWithOffsets
	DD	FLAT:__Latin1FromUnicodeWithOffsets
	DD	FLAT:__Latin1FromUnicodeWithOffsets
	DD	FLAT:__Latin1GetNextUChar
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:__Latin1GetUnicodeSet
	DD	00H
	DD	FLAT:_ucnv_Latin1FromUTF8
__Latin1StaticData DD 064H
	DB	'ISO-8859-1', 00H
	ORG $+49
	DD	0333H
	DB	00H
	DB	03H
	DB	01H
	DB	01H
	DB	01aH
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+4
__Latin1Data_56 DD 0e4H
	DD	0ffffffffH
	DD	00H
	DD	FLAT:__Latin1StaticData
	DB	00H
	DB	00H
	ORG $+2
	DD	FLAT:__Latin1Impl
	DD	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+1
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	ORG $+126
	DD	00H
	DD	00H
	DD	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+1
	DW	00H
	ORG $+2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	ORG $+4
__ASCIIImpl DD	01aH
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:__ASCIIToUnicodeWithOffsets
	DD	FLAT:__ASCIIToUnicodeWithOffsets
	DD	FLAT:__Latin1FromUnicodeWithOffsets
	DD	FLAT:__Latin1FromUnicodeWithOffsets
	DD	FLAT:__ASCIIGetNextUChar
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:__ASCIIGetUnicodeSet
	DD	00H
	DD	FLAT:_ucnv_ASCIIFromUTF8
__ASCIIStaticData DD 064H
	DB	'US-ASCII', 00H
	ORG $+51
	DD	016fH
	DB	00H
	DB	01aH
	DB	01H
	DB	01H
	DB	01aH
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+4
__ASCIIData_56 DD 0e4H
	DD	0ffffffffH
	DD	00H
	DD	FLAT:__ASCIIStaticData
	DB	00H
	DB	00H
	ORG $+2
	DD	FLAT:__ASCIIImpl
	DD	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+1
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	ORG $+126
	DD	00H
	DD	00H
	DD	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+1
	DW	00H
	ORG $+2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
CONST	ENDS
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File d:\mozilla\intl\icu\source\common\ucnvlat1.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT __Latin1ToUnicodeWithOffsets
_TEXT	SEGMENT
_loops$7760 = -92					; size = 4
_count$7759 = -80					; size = 4
_sourceIndex$ = -68					; size = 4
_offsets$ = -56						; size = 4
_length$ = -44						; size = 4
_targetCapacity$ = -32					; size = 4
_target$ = -20						; size = 4
_source$ = -8						; size = 4
_pArgs$ = 8						; size = 4
_pErrorCode$ = 12					; size = 4
__Latin1ToUnicodeWithOffsets PROC			; COMDAT
; Line 33
	push	ebp
	mov	ebp, esp
	sub	esp, 288				; 00000120H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-288]
	mov	ecx, 72					; 00000048H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 42
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _source$[ebp], ecx
; Line 43
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _target$[ebp], ecx
; Line 44
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR _pArgs$[ebp]
	mov	edx, DWORD PTR [eax+20]
	sub	edx, DWORD PTR [ecx+16]
	sar	edx, 1
	mov	DWORD PTR _targetCapacity$[ebp], edx
; Line 45
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR _offsets$[ebp], ecx
; Line 47
	mov	DWORD PTR _sourceIndex$[ebp], 0
; Line 53
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	sub	ecx, DWORD PTR _source$[ebp]
	mov	DWORD PTR _length$[ebp], ecx
; Line 54
	mov	eax, DWORD PTR _length$[ebp]
	cmp	eax, DWORD PTR _targetCapacity$[ebp]
	jg	SHORT $LN15@Latin1ToUn
; Line 55
	mov	eax, DWORD PTR _length$[ebp]
	mov	DWORD PTR _targetCapacity$[ebp], eax
; Line 56
	jmp	SHORT $LN14@Latin1ToUn
$LN15@Latin1ToUn:
; Line 58
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
; Line 59
	mov	eax, DWORD PTR _targetCapacity$[ebp]
	mov	DWORD PTR _length$[ebp], eax
$LN14@Latin1ToUn:
; Line 62
	cmp	DWORD PTR _targetCapacity$[ebp], 8
	jl	$LN5@Latin1ToUn
; Line 66
	mov	eax, DWORD PTR _targetCapacity$[ebp]
	sar	eax, 3
	mov	DWORD PTR _count$7759[ebp], eax
	mov	ecx, DWORD PTR _count$7759[ebp]
	mov	DWORD PTR _loops$7760[ebp], ecx
; Line 67
	mov	eax, DWORD PTR _targetCapacity$[ebp]
	and	eax, 7
	mov	DWORD PTR _targetCapacity$[ebp], eax
	mov	ecx, DWORD PTR _targetCapacity$[ebp]
	mov	DWORD PTR _length$[ebp], ecx
$LN12@Latin1ToUn:
; Line 69
	mov	eax, DWORD PTR _source$[ebp]
	movzx	cx, BYTE PTR [eax]
	mov	edx, DWORD PTR _target$[ebp]
	mov	WORD PTR [edx], cx
; Line 70
	mov	eax, DWORD PTR _source$[ebp]
	movzx	cx, BYTE PTR [eax+1]
	mov	edx, DWORD PTR _target$[ebp]
	mov	WORD PTR [edx+2], cx
; Line 71
	mov	eax, DWORD PTR _source$[ebp]
	movzx	cx, BYTE PTR [eax+2]
	mov	edx, DWORD PTR _target$[ebp]
	mov	WORD PTR [edx+4], cx
; Line 72
	mov	eax, DWORD PTR _source$[ebp]
	movzx	cx, BYTE PTR [eax+3]
	mov	edx, DWORD PTR _target$[ebp]
	mov	WORD PTR [edx+6], cx
; Line 73
	mov	eax, DWORD PTR _source$[ebp]
	movzx	cx, BYTE PTR [eax+4]
	mov	edx, DWORD PTR _target$[ebp]
	mov	WORD PTR [edx+8], cx
; Line 74
	mov	eax, DWORD PTR _source$[ebp]
	movzx	cx, BYTE PTR [eax+5]
	mov	edx, DWORD PTR _target$[ebp]
	mov	WORD PTR [edx+10], cx
; Line 75
	mov	eax, DWORD PTR _source$[ebp]
	movzx	cx, BYTE PTR [eax+6]
	mov	edx, DWORD PTR _target$[ebp]
	mov	WORD PTR [edx+12], cx
; Line 76
	mov	eax, DWORD PTR _source$[ebp]
	movzx	cx, BYTE PTR [eax+7]
	mov	edx, DWORD PTR _target$[ebp]
	mov	WORD PTR [edx+14], cx
; Line 77
	mov	eax, DWORD PTR _target$[ebp]
	add	eax, 16					; 00000010H
	mov	DWORD PTR _target$[ebp], eax
; Line 78
	mov	eax, DWORD PTR _source$[ebp]
	add	eax, 8
	mov	DWORD PTR _source$[ebp], eax
; Line 79
	mov	eax, DWORD PTR _count$7759[ebp]
	sub	eax, 1
	mov	DWORD PTR _count$7759[ebp], eax
	cmp	DWORD PTR _count$7759[ebp], 0
	jg	$LN12@Latin1ToUn
; Line 81
	cmp	DWORD PTR _offsets$[ebp], 0
	je	$LN5@Latin1ToUn
$LN8@Latin1ToUn:
; Line 83
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _sourceIndex$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _sourceIndex$[ebp]
	add	edx, 1
	mov	DWORD PTR _sourceIndex$[ebp], edx
; Line 84
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _sourceIndex$[ebp]
	mov	DWORD PTR [eax+4], ecx
	mov	edx, DWORD PTR _sourceIndex$[ebp]
	add	edx, 1
	mov	DWORD PTR _sourceIndex$[ebp], edx
; Line 85
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _sourceIndex$[ebp]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _sourceIndex$[ebp]
	add	edx, 1
	mov	DWORD PTR _sourceIndex$[ebp], edx
; Line 86
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _sourceIndex$[ebp]
	mov	DWORD PTR [eax+12], ecx
	mov	edx, DWORD PTR _sourceIndex$[ebp]
	add	edx, 1
	mov	DWORD PTR _sourceIndex$[ebp], edx
; Line 87
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _sourceIndex$[ebp]
	mov	DWORD PTR [eax+16], ecx
	mov	edx, DWORD PTR _sourceIndex$[ebp]
	add	edx, 1
	mov	DWORD PTR _sourceIndex$[ebp], edx
; Line 88
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _sourceIndex$[ebp]
	mov	DWORD PTR [eax+20], ecx
	mov	edx, DWORD PTR _sourceIndex$[ebp]
	add	edx, 1
	mov	DWORD PTR _sourceIndex$[ebp], edx
; Line 89
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _sourceIndex$[ebp]
	mov	DWORD PTR [eax+24], ecx
	mov	edx, DWORD PTR _sourceIndex$[ebp]
	add	edx, 1
	mov	DWORD PTR _sourceIndex$[ebp], edx
; Line 90
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _sourceIndex$[ebp]
	mov	DWORD PTR [eax+28], ecx
	mov	edx, DWORD PTR _sourceIndex$[ebp]
	add	edx, 1
	mov	DWORD PTR _sourceIndex$[ebp], edx
; Line 91
	mov	eax, DWORD PTR _offsets$[ebp]
	add	eax, 32					; 00000020H
	mov	DWORD PTR _offsets$[ebp], eax
; Line 92
	mov	eax, DWORD PTR _loops$7760[ebp]
	sub	eax, 1
	mov	DWORD PTR _loops$7760[ebp], eax
	cmp	DWORD PTR _loops$7760[ebp], 0
	jg	$LN8@Latin1ToUn
$LN5@Latin1ToUn:
; Line 97
	cmp	DWORD PTR _targetCapacity$[ebp], 0
	jle	SHORT $LN4@Latin1ToUn
; Line 98
	mov	eax, DWORD PTR _source$[ebp]
	movzx	cx, BYTE PTR [eax]
	mov	edx, DWORD PTR _target$[ebp]
	mov	WORD PTR [edx], cx
	mov	eax, DWORD PTR _target$[ebp]
	add	eax, 2
	mov	DWORD PTR _target$[ebp], eax
	mov	ecx, DWORD PTR _source$[ebp]
	add	ecx, 1
	mov	DWORD PTR _source$[ebp], ecx
; Line 99
	mov	eax, DWORD PTR _targetCapacity$[ebp]
	sub	eax, 1
	mov	DWORD PTR _targetCapacity$[ebp], eax
; Line 100
	jmp	SHORT $LN5@Latin1ToUn
$LN4@Latin1ToUn:
; Line 103
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR _source$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 104
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR _target$[ebp]
	mov	DWORD PTR [eax+16], ecx
; Line 107
	cmp	DWORD PTR _offsets$[ebp], 0
	je	SHORT $LN16@Latin1ToUn
$LN2@Latin1ToUn:
; Line 108
	cmp	DWORD PTR _length$[ebp], 0
	jle	SHORT $LN1@Latin1ToUn
; Line 109
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _sourceIndex$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
	mov	eax, DWORD PTR _sourceIndex$[ebp]
	add	eax, 1
	mov	DWORD PTR _sourceIndex$[ebp], eax
; Line 110
	mov	eax, DWORD PTR _length$[ebp]
	sub	eax, 1
	mov	DWORD PTR _length$[ebp], eax
; Line 111
	jmp	SHORT $LN2@Latin1ToUn
$LN1@Latin1ToUn:
; Line 112
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR _offsets$[ebp]
	mov	DWORD PTR [eax+24], ecx
$LN16@Latin1ToUn:
; Line 114
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
__Latin1ToUnicodeWithOffsets ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __Latin1GetNextUChar
_TEXT	SEGMENT
_source$ = -8						; size = 4
_pArgs$ = 8						; size = 4
_pErrorCode$ = 12					; size = 4
__Latin1GetNextUChar PROC				; COMDAT
; Line 119
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 120
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _source$[ebp], ecx
; Line 121
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR _source$[ebp]
	cmp	ecx, DWORD PTR [eax+12]
	jae	SHORT $LN1@Latin1GetN
; Line 122
	mov	eax, DWORD PTR _source$[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _pArgs$[ebp]
	mov	DWORD PTR [ecx+8], eax
; Line 123
	mov	eax, DWORD PTR _source$[ebp]
	movzx	eax, BYTE PTR [eax]
	jmp	SHORT $LN2@Latin1GetN
$LN1@Latin1GetN:
; Line 127
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 8
; Line 128
	mov	eax, 65535				; 0000ffffH
$LN2@Latin1GetN:
; Line 129
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
__Latin1GetNextUChar ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __Latin1FromUnicodeWithOffsets
_TEXT	SEGMENT
tv260 = -412						; size = 4
_count$7864 = -212					; size = 4
_trail$7854 = -200					; size = 2
_oredChars$7819 = -188					; size = 2
_u$7818 = -176						; size = 2
_loops$7817 = -164					; size = 4
_count$7816 = -152					; size = 4
_sourceIndex$ = -140					; size = 4
_max$ = -128						; size = 2
_c$ = -116						; size = 2
_cp$ = -104						; size = 4
_offsets$ = -92						; size = 4
_length$ = -80						; size = 4
_targetCapacity$ = -68					; size = 4
_oldTarget$ = -56					; size = 4
_target$ = -44						; size = 4
_sourceLimit$ = -32					; size = 4
_source$ = -20						; size = 4
_cnv$ = -8						; size = 4
_pArgs$ = 8						; size = 4
_pErrorCode$ = 12					; size = 4
__Latin1FromUnicodeWithOffsets PROC			; COMDAT
; Line 134
	push	ebp
	mov	ebp, esp
	sub	esp, 412				; 0000019cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-412]
	mov	ecx, 103				; 00000067H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 147
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _cnv$[ebp], ecx
; Line 148
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _source$[ebp], ecx
; Line 149
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _sourceLimit$[ebp], ecx
; Line 150
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _oldTarget$[ebp], ecx
	mov	edx, DWORD PTR _oldTarget$[ebp]
	mov	DWORD PTR _target$[ebp], edx
; Line 151
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR _pArgs$[ebp]
	mov	edx, DWORD PTR [eax+20]
	sub	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _targetCapacity$[ebp], edx
; Line 152
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR _offsets$[ebp], ecx
; Line 154
	mov	eax, DWORD PTR _cnv$[ebp]
	cmp	DWORD PTR [eax+24], OFFSET __Latin1Data_56
	jne	SHORT $LN27@Latin1From
; Line 155
	mov	eax, 255				; 000000ffH
	mov	WORD PTR _max$[ebp], ax
; Line 156
	jmp	SHORT $LN26@Latin1From
$LN27@Latin1From:
; Line 157
	mov	eax, 127				; 0000007fH
	mov	WORD PTR _max$[ebp], ax
$LN26@Latin1From:
; Line 161
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	DWORD PTR _cp$[ebp], ecx
; Line 164
	mov	eax, DWORD PTR _cp$[ebp]
	neg	eax
	sbb	eax, eax
	mov	DWORD PTR _sourceIndex$[ebp], eax
; Line 170
	mov	eax, DWORD PTR _sourceLimit$[ebp]
	sub	eax, DWORD PTR _source$[ebp]
	sar	eax, 1
	mov	DWORD PTR _length$[ebp], eax
; Line 171
	mov	eax, DWORD PTR _length$[ebp]
	cmp	eax, DWORD PTR _targetCapacity$[ebp]
	jge	SHORT $LN25@Latin1From
; Line 172
	mov	eax, DWORD PTR _length$[ebp]
	mov	DWORD PTR _targetCapacity$[ebp], eax
$LN25@Latin1From:
; Line 176
	cmp	DWORD PTR _cp$[ebp], 0
	je	SHORT $LN24@Latin1From
	cmp	DWORD PTR _targetCapacity$[ebp], 0
	jle	SHORT $LN24@Latin1From
; Line 177
	jmp	$getTrail$7814
$LN24@Latin1From:
; Line 182
	cmp	DWORD PTR _targetCapacity$[ebp], 16	; 00000010H
	jl	$LN23@Latin1From
; Line 186
	mov	eax, DWORD PTR _targetCapacity$[ebp]
	sar	eax, 4
	mov	DWORD PTR _count$7816[ebp], eax
	mov	ecx, DWORD PTR _count$7816[ebp]
	mov	DWORD PTR _loops$7817[ebp], ecx
$LN22@Latin1From:
; Line 188
	mov	eax, DWORD PTR _source$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR _u$7818[ebp], cx
	mov	dx, WORD PTR _u$7818[ebp]
	mov	WORD PTR _oredChars$7819[ebp], dx
	mov	eax, DWORD PTR _source$[ebp]
	add	eax, 2
	mov	DWORD PTR _source$[ebp], eax
; Line 189
	mov	eax, DWORD PTR _target$[ebp]
	mov	cl, BYTE PTR _u$7818[ebp]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 1
	mov	DWORD PTR _target$[ebp], edx
; Line 190
	mov	eax, DWORD PTR _source$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR _u$7818[ebp], cx
	movzx	edx, WORD PTR _u$7818[ebp]
	movzx	eax, WORD PTR _oredChars$7819[ebp]
	or	eax, edx
	mov	WORD PTR _oredChars$7819[ebp], ax
	mov	ecx, DWORD PTR _source$[ebp]
	add	ecx, 2
	mov	DWORD PTR _source$[ebp], ecx
; Line 191
	mov	eax, DWORD PTR _target$[ebp]
	mov	cl, BYTE PTR _u$7818[ebp]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 1
	mov	DWORD PTR _target$[ebp], edx
; Line 192
	mov	eax, DWORD PTR _source$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR _u$7818[ebp], cx
	movzx	edx, WORD PTR _u$7818[ebp]
	movzx	eax, WORD PTR _oredChars$7819[ebp]
	or	eax, edx
	mov	WORD PTR _oredChars$7819[ebp], ax
	mov	ecx, DWORD PTR _source$[ebp]
	add	ecx, 2
	mov	DWORD PTR _source$[ebp], ecx
; Line 193
	mov	eax, DWORD PTR _target$[ebp]
	mov	cl, BYTE PTR _u$7818[ebp]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 1
	mov	DWORD PTR _target$[ebp], edx
; Line 194
	mov	eax, DWORD PTR _source$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR _u$7818[ebp], cx
	movzx	edx, WORD PTR _u$7818[ebp]
	movzx	eax, WORD PTR _oredChars$7819[ebp]
	or	eax, edx
	mov	WORD PTR _oredChars$7819[ebp], ax
	mov	ecx, DWORD PTR _source$[ebp]
	add	ecx, 2
	mov	DWORD PTR _source$[ebp], ecx
; Line 195
	mov	eax, DWORD PTR _target$[ebp]
	mov	cl, BYTE PTR _u$7818[ebp]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 1
	mov	DWORD PTR _target$[ebp], edx
; Line 196
	mov	eax, DWORD PTR _source$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR _u$7818[ebp], cx
	movzx	edx, WORD PTR _u$7818[ebp]
	movzx	eax, WORD PTR _oredChars$7819[ebp]
	or	eax, edx
	mov	WORD PTR _oredChars$7819[ebp], ax
	mov	ecx, DWORD PTR _source$[ebp]
	add	ecx, 2
	mov	DWORD PTR _source$[ebp], ecx
; Line 197
	mov	eax, DWORD PTR _target$[ebp]
	mov	cl, BYTE PTR _u$7818[ebp]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 1
	mov	DWORD PTR _target$[ebp], edx
; Line 198
	mov	eax, DWORD PTR _source$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR _u$7818[ebp], cx
	movzx	edx, WORD PTR _u$7818[ebp]
	movzx	eax, WORD PTR _oredChars$7819[ebp]
	or	eax, edx
	mov	WORD PTR _oredChars$7819[ebp], ax
	mov	ecx, DWORD PTR _source$[ebp]
	add	ecx, 2
	mov	DWORD PTR _source$[ebp], ecx
; Line 199
	mov	eax, DWORD PTR _target$[ebp]
	mov	cl, BYTE PTR _u$7818[ebp]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 1
	mov	DWORD PTR _target$[ebp], edx
; Line 200
	mov	eax, DWORD PTR _source$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR _u$7818[ebp], cx
	movzx	edx, WORD PTR _u$7818[ebp]
	movzx	eax, WORD PTR _oredChars$7819[ebp]
	or	eax, edx
	mov	WORD PTR _oredChars$7819[ebp], ax
	mov	ecx, DWORD PTR _source$[ebp]
	add	ecx, 2
	mov	DWORD PTR _source$[ebp], ecx
; Line 201
	mov	eax, DWORD PTR _target$[ebp]
	mov	cl, BYTE PTR _u$7818[ebp]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 1
	mov	DWORD PTR _target$[ebp], edx
; Line 202
	mov	eax, DWORD PTR _source$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR _u$7818[ebp], cx
	movzx	edx, WORD PTR _u$7818[ebp]
	movzx	eax, WORD PTR _oredChars$7819[ebp]
	or	eax, edx
	mov	WORD PTR _oredChars$7819[ebp], ax
	mov	ecx, DWORD PTR _source$[ebp]
	add	ecx, 2
	mov	DWORD PTR _source$[ebp], ecx
; Line 203
	mov	eax, DWORD PTR _target$[ebp]
	mov	cl, BYTE PTR _u$7818[ebp]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 1
	mov	DWORD PTR _target$[ebp], edx
; Line 204
	mov	eax, DWORD PTR _source$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR _u$7818[ebp], cx
	movzx	edx, WORD PTR _u$7818[ebp]
	movzx	eax, WORD PTR _oredChars$7819[ebp]
	or	eax, edx
	mov	WORD PTR _oredChars$7819[ebp], ax
	mov	ecx, DWORD PTR _source$[ebp]
	add	ecx, 2
	mov	DWORD PTR _source$[ebp], ecx
; Line 205
	mov	eax, DWORD PTR _target$[ebp]
	mov	cl, BYTE PTR _u$7818[ebp]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 1
	mov	DWORD PTR _target$[ebp], edx
; Line 206
	mov	eax, DWORD PTR _source$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR _u$7818[ebp], cx
	movzx	edx, WORD PTR _u$7818[ebp]
	movzx	eax, WORD PTR _oredChars$7819[ebp]
	or	eax, edx
	mov	WORD PTR _oredChars$7819[ebp], ax
	mov	ecx, DWORD PTR _source$[ebp]
	add	ecx, 2
	mov	DWORD PTR _source$[ebp], ecx
; Line 207
	mov	eax, DWORD PTR _target$[ebp]
	mov	cl, BYTE PTR _u$7818[ebp]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 1
	mov	DWORD PTR _target$[ebp], edx
; Line 208
	mov	eax, DWORD PTR _source$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR _u$7818[ebp], cx
	movzx	edx, WORD PTR _u$7818[ebp]
	movzx	eax, WORD PTR _oredChars$7819[ebp]
	or	eax, edx
	mov	WORD PTR _oredChars$7819[ebp], ax
	mov	ecx, DWORD PTR _source$[ebp]
	add	ecx, 2
	mov	DWORD PTR _source$[ebp], ecx
; Line 209
	mov	eax, DWORD PTR _target$[ebp]
	mov	cl, BYTE PTR _u$7818[ebp]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 1
	mov	DWORD PTR _target$[ebp], edx
; Line 210
	mov	eax, DWORD PTR _source$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR _u$7818[ebp], cx
	movzx	edx, WORD PTR _u$7818[ebp]
	movzx	eax, WORD PTR _oredChars$7819[ebp]
	or	eax, edx
	mov	WORD PTR _oredChars$7819[ebp], ax
	mov	ecx, DWORD PTR _source$[ebp]
	add	ecx, 2
	mov	DWORD PTR _source$[ebp], ecx
; Line 211
	mov	eax, DWORD PTR _target$[ebp]
	mov	cl, BYTE PTR _u$7818[ebp]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 1
	mov	DWORD PTR _target$[ebp], edx
; Line 212
	mov	eax, DWORD PTR _source$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR _u$7818[ebp], cx
	movzx	edx, WORD PTR _u$7818[ebp]
	movzx	eax, WORD PTR _oredChars$7819[ebp]
	or	eax, edx
	mov	WORD PTR _oredChars$7819[ebp], ax
	mov	ecx, DWORD PTR _source$[ebp]
	add	ecx, 2
	mov	DWORD PTR _source$[ebp], ecx
; Line 213
	mov	eax, DWORD PTR _target$[ebp]
	mov	cl, BYTE PTR _u$7818[ebp]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 1
	mov	DWORD PTR _target$[ebp], edx
; Line 214
	mov	eax, DWORD PTR _source$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR _u$7818[ebp], cx
	movzx	edx, WORD PTR _u$7818[ebp]
	movzx	eax, WORD PTR _oredChars$7819[ebp]
	or	eax, edx
	mov	WORD PTR _oredChars$7819[ebp], ax
	mov	ecx, DWORD PTR _source$[ebp]
	add	ecx, 2
	mov	DWORD PTR _source$[ebp], ecx
; Line 215
	mov	eax, DWORD PTR _target$[ebp]
	mov	cl, BYTE PTR _u$7818[ebp]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 1
	mov	DWORD PTR _target$[ebp], edx
; Line 216
	mov	eax, DWORD PTR _source$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR _u$7818[ebp], cx
	movzx	edx, WORD PTR _u$7818[ebp]
	movzx	eax, WORD PTR _oredChars$7819[ebp]
	or	eax, edx
	mov	WORD PTR _oredChars$7819[ebp], ax
	mov	ecx, DWORD PTR _source$[ebp]
	add	ecx, 2
	mov	DWORD PTR _source$[ebp], ecx
; Line 217
	mov	eax, DWORD PTR _target$[ebp]
	mov	cl, BYTE PTR _u$7818[ebp]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 1
	mov	DWORD PTR _target$[ebp], edx
; Line 218
	mov	eax, DWORD PTR _source$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR _u$7818[ebp], cx
	movzx	edx, WORD PTR _u$7818[ebp]
	movzx	eax, WORD PTR _oredChars$7819[ebp]
	or	eax, edx
	mov	WORD PTR _oredChars$7819[ebp], ax
	mov	ecx, DWORD PTR _source$[ebp]
	add	ecx, 2
	mov	DWORD PTR _source$[ebp], ecx
; Line 219
	mov	eax, DWORD PTR _target$[ebp]
	mov	cl, BYTE PTR _u$7818[ebp]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 1
	mov	DWORD PTR _target$[ebp], edx
; Line 222
	movzx	eax, WORD PTR _oredChars$7819[ebp]
	movzx	ecx, WORD PTR _max$[ebp]
	cmp	eax, ecx
	jle	SHORT $LN21@Latin1From
; Line 224
	mov	eax, DWORD PTR _source$[ebp]
	sub	eax, 32					; 00000020H
	mov	DWORD PTR _source$[ebp], eax
; Line 225
	mov	eax, DWORD PTR _target$[ebp]
	sub	eax, 16					; 00000010H
	mov	DWORD PTR _target$[ebp], eax
; Line 226
	jmp	SHORT $LN20@Latin1From
$LN21@Latin1From:
; Line 228
	mov	eax, DWORD PTR _count$7816[ebp]
	sub	eax, 1
	mov	DWORD PTR _count$7816[ebp], eax
	cmp	DWORD PTR _count$7816[ebp], 0
	jg	$LN22@Latin1From
$LN20@Latin1From:
; Line 229
	mov	eax, DWORD PTR _loops$7817[ebp]
	sub	eax, DWORD PTR _count$7816[ebp]
	mov	DWORD PTR _count$7816[ebp], eax
; Line 230
	mov	eax, DWORD PTR _count$7816[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _targetCapacity$[ebp]
	sub	ecx, eax
	mov	DWORD PTR _targetCapacity$[ebp], ecx
; Line 232
	cmp	DWORD PTR _offsets$[ebp], 0
	je	$LN23@Latin1From
; Line 233
	mov	eax, DWORD PTR _count$7816[ebp]
	shl	eax, 4
	add	eax, DWORD PTR _oldTarget$[ebp]
	mov	DWORD PTR _oldTarget$[ebp], eax
$LN17@Latin1From:
; Line 234
	cmp	DWORD PTR _count$7816[ebp], 0
	jle	$LN23@Latin1From
; Line 235
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _sourceIndex$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
	mov	eax, DWORD PTR _sourceIndex$[ebp]
	add	eax, 1
	mov	DWORD PTR _sourceIndex$[ebp], eax
; Line 236
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _sourceIndex$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
	mov	eax, DWORD PTR _sourceIndex$[ebp]
	add	eax, 1
	mov	DWORD PTR _sourceIndex$[ebp], eax
; Line 237
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _sourceIndex$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
	mov	eax, DWORD PTR _sourceIndex$[ebp]
	add	eax, 1
	mov	DWORD PTR _sourceIndex$[ebp], eax
; Line 238
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _sourceIndex$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
	mov	eax, DWORD PTR _sourceIndex$[ebp]
	add	eax, 1
	mov	DWORD PTR _sourceIndex$[ebp], eax
; Line 239
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _sourceIndex$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
	mov	eax, DWORD PTR _sourceIndex$[ebp]
	add	eax, 1
	mov	DWORD PTR _sourceIndex$[ebp], eax
; Line 240
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _sourceIndex$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
	mov	eax, DWORD PTR _sourceIndex$[ebp]
	add	eax, 1
	mov	DWORD PTR _sourceIndex$[ebp], eax
; Line 241
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _sourceIndex$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
	mov	eax, DWORD PTR _sourceIndex$[ebp]
	add	eax, 1
	mov	DWORD PTR _sourceIndex$[ebp], eax
; Line 242
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _sourceIndex$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
	mov	eax, DWORD PTR _sourceIndex$[ebp]
	add	eax, 1
	mov	DWORD PTR _sourceIndex$[ebp], eax
; Line 243
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _sourceIndex$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
	mov	eax, DWORD PTR _sourceIndex$[ebp]
	add	eax, 1
	mov	DWORD PTR _sourceIndex$[ebp], eax
; Line 244
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _sourceIndex$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
	mov	eax, DWORD PTR _sourceIndex$[ebp]
	add	eax, 1
	mov	DWORD PTR _sourceIndex$[ebp], eax
; Line 245
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _sourceIndex$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
	mov	eax, DWORD PTR _sourceIndex$[ebp]
	add	eax, 1
	mov	DWORD PTR _sourceIndex$[ebp], eax
; Line 246
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _sourceIndex$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
	mov	eax, DWORD PTR _sourceIndex$[ebp]
	add	eax, 1
	mov	DWORD PTR _sourceIndex$[ebp], eax
; Line 247
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _sourceIndex$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
	mov	eax, DWORD PTR _sourceIndex$[ebp]
	add	eax, 1
	mov	DWORD PTR _sourceIndex$[ebp], eax
; Line 248
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _sourceIndex$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
	mov	eax, DWORD PTR _sourceIndex$[ebp]
	add	eax, 1
	mov	DWORD PTR _sourceIndex$[ebp], eax
; Line 249
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _sourceIndex$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
	mov	eax, DWORD PTR _sourceIndex$[ebp]
	add	eax, 1
	mov	DWORD PTR _sourceIndex$[ebp], eax
; Line 250
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _sourceIndex$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
	mov	eax, DWORD PTR _sourceIndex$[ebp]
	add	eax, 1
	mov	DWORD PTR _sourceIndex$[ebp], eax
; Line 251
	mov	eax, DWORD PTR _count$7816[ebp]
	sub	eax, 1
	mov	DWORD PTR _count$7816[ebp], eax
; Line 252
	jmp	$LN17@Latin1From
$LN23@Latin1From:
; Line 258
	xor	eax, eax
	mov	WORD PTR _c$[ebp], ax
$LN15@Latin1From:
; Line 259
	cmp	DWORD PTR _targetCapacity$[ebp], 0
	jle	SHORT $LN14@Latin1From
	mov	eax, DWORD PTR _source$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR _c$[ebp], cx
	movzx	edx, WORD PTR _max$[ebp]
	movzx	eax, WORD PTR _c$[ebp]
	mov	ecx, DWORD PTR _source$[ebp]
	add	ecx, 2
	mov	DWORD PTR _source$[ebp], ecx
	cmp	eax, edx
	jg	SHORT $LN30@Latin1From
	mov	DWORD PTR tv260[ebp], 1
	jmp	SHORT $LN31@Latin1From
$LN30@Latin1From:
	mov	DWORD PTR tv260[ebp], 0
$LN31@Latin1From:
	cmp	DWORD PTR tv260[ebp], 0
	je	SHORT $LN14@Latin1From
; Line 261
	mov	eax, DWORD PTR _target$[ebp]
	mov	cl, BYTE PTR _c$[ebp]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 1
	mov	DWORD PTR _target$[ebp], edx
; Line 262
	mov	eax, DWORD PTR _targetCapacity$[ebp]
	sub	eax, 1
	mov	DWORD PTR _targetCapacity$[ebp], eax
; Line 263
	jmp	SHORT $LN15@Latin1From
$LN14@Latin1From:
; Line 265
	movzx	eax, WORD PTR _c$[ebp]
	movzx	ecx, WORD PTR _max$[ebp]
	cmp	eax, ecx
	jle	$noMoreInput$7860
; Line 266
	movzx	eax, WORD PTR _c$[ebp]
	mov	DWORD PTR _cp$[ebp], eax
; Line 267
	mov	eax, DWORD PTR _cp$[ebp]
	and	eax, -2048				; fffff800H
	cmp	eax, 55296				; 0000d800H
	je	SHORT $LN12@Latin1From
	jmp	SHORT $LN11@Latin1From
$LN12@Latin1From:
; Line 269
	mov	eax, DWORD PTR _cp$[ebp]
	and	eax, 1024				; 00000400H
	jne	SHORT $LN11@Latin1From
$getTrail$7814:
; Line 271
	mov	eax, DWORD PTR _source$[ebp]
	cmp	eax, DWORD PTR _sourceLimit$[ebp]
	jae	SHORT $LN9@Latin1From
; Line 273
	mov	eax, DWORD PTR _source$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR _trail$7854[ebp], cx
; Line 274
	movzx	eax, WORD PTR _trail$7854[ebp]
	and	eax, -1024				; fffffc00H
	cmp	eax, 56320				; 0000dc00H
	jne	SHORT $LN7@Latin1From
; Line 275
	mov	eax, DWORD PTR _source$[ebp]
	add	eax, 2
	mov	DWORD PTR _source$[ebp], eax
; Line 276
	mov	eax, DWORD PTR _cp$[ebp]
	shl	eax, 10					; 0000000aH
	movzx	ecx, WORD PTR _trail$7854[ebp]
	lea	edx, DWORD PTR [eax+ecx-56613888]
	mov	DWORD PTR _cp$[ebp], edx
$LN7@Latin1From:
; Line 283
	jmp	SHORT $LN11@Latin1From
$LN9@Latin1From:
; Line 285
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	ecx, DWORD PTR _cp$[ebp]
	mov	DWORD PTR [eax+56], ecx
; Line 286
	jmp	SHORT $noMoreInput$7860
$LN11@Latin1From:
; Line 293
	mov	eax, DWORD PTR _cp$[ebp]
	and	eax, -2048				; fffff800H
	xor	ecx, ecx
	cmp	eax, 55296				; 0000d800H
	sete	cl
	lea	ecx, DWORD PTR [ecx+ecx+10]
	mov	edx, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 294
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	ecx, DWORD PTR _cp$[ebp]
	mov	DWORD PTR [eax+56], ecx
$noMoreInput$7860:
; Line 299
	cmp	DWORD PTR _offsets$[ebp], 0
	je	SHORT $LN4@Latin1From
; Line 300
	mov	eax, DWORD PTR _target$[ebp]
	sub	eax, DWORD PTR _oldTarget$[ebp]
	mov	DWORD PTR _count$7864[ebp], eax
$LN3@Latin1From:
; Line 301
	cmp	DWORD PTR _count$7864[ebp], 0
	jbe	SHORT $LN4@Latin1From
; Line 302
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _sourceIndex$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
	mov	eax, DWORD PTR _sourceIndex$[ebp]
	add	eax, 1
	mov	DWORD PTR _sourceIndex$[ebp], eax
; Line 303
	mov	eax, DWORD PTR _count$7864[ebp]
	sub	eax, 1
	mov	DWORD PTR _count$7864[ebp], eax
; Line 304
	jmp	SHORT $LN3@Latin1From
$LN4@Latin1From:
; Line 307
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	cmp	DWORD PTR [eax], 0
	jg	SHORT $LN1@Latin1From
	mov	eax, DWORD PTR _source$[ebp]
	cmp	eax, DWORD PTR _sourceLimit$[ebp]
	jae	SHORT $LN1@Latin1From
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR _target$[ebp]
	cmp	ecx, DWORD PTR [eax+20]
	jb	SHORT $LN1@Latin1From
; Line 309
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
$LN1@Latin1From:
; Line 313
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR _source$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 314
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR _target$[ebp]
	mov	DWORD PTR [eax+16], ecx
; Line 315
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR _offsets$[ebp]
	mov	DWORD PTR [eax+24], ecx
; Line 316
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
__Latin1FromUnicodeWithOffsets ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _ucnv_Latin1FromUTF8
_TEXT	SEGMENT
tv189 = -296						; size = 4
tv190 = -292						; size = 4
_t1$ = -89						; size = 1
_b$ = -77						; size = 1
_c$ = -68						; size = 4
_targetCapacity$ = -56					; size = 4
_target$ = -44						; size = 4
_sourceLimit$ = -32					; size = 4
_source$ = -20						; size = 4
_utf8$ = -8						; size = 4
_pFromUArgs$ = 8					; size = 4
_pToUArgs$ = 12						; size = 4
_pErrorCode$ = 16					; size = 4
_ucnv_Latin1FromUTF8 PROC				; COMDAT
; Line 322
	push	ebp
	mov	ebp, esp
	sub	esp, 296				; 00000128H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-296]
	mov	ecx, 74					; 0000004aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 332
	mov	eax, DWORD PTR _pToUArgs$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _utf8$[ebp], ecx
; Line 333
	mov	eax, DWORD PTR _pToUArgs$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _source$[ebp], ecx
; Line 334
	mov	eax, DWORD PTR _pToUArgs$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _sourceLimit$[ebp], ecx
; Line 335
	mov	eax, DWORD PTR _pFromUArgs$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _target$[ebp], ecx
; Line 336
	mov	eax, DWORD PTR _pFromUArgs$[ebp]
	mov	ecx, DWORD PTR _pFromUArgs$[ebp]
	mov	edx, DWORD PTR [eax+20]
	sub	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _targetCapacity$[ebp], edx
; Line 339
	mov	eax, DWORD PTR _utf8$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	DWORD PTR _c$[ebp], ecx
; Line 340
	cmp	DWORD PTR _c$[ebp], 0
	je	$LN15@ucnv_Latin
	mov	eax, DWORD PTR _source$[ebp]
	cmp	eax, DWORD PTR _sourceLimit$[ebp]
	jae	$LN15@ucnv_Latin
; Line 341
	cmp	DWORD PTR _targetCapacity$[ebp], 0
	jne	SHORT $LN14@ucnv_Latin
; Line 342
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
; Line 343
	jmp	$LN16@ucnv_Latin
	jmp	SHORT $LN15@ucnv_Latin
$LN14@ucnv_Latin:
; Line 344
	cmp	DWORD PTR _c$[ebp], 194			; 000000c2H
	jl	SHORT $LN12@ucnv_Latin
	cmp	DWORD PTR _c$[ebp], 195			; 000000c3H
	jg	SHORT $LN12@ucnv_Latin
	mov	eax, DWORD PTR _source$[ebp]
	movzx	ecx, BYTE PTR [eax]
	sub	ecx, 128				; 00000080H
	mov	BYTE PTR _t1$[ebp], cl
	movzx	edx, BYTE PTR _t1$[ebp]
	cmp	edx, 63					; 0000003fH
	jg	SHORT $LN12@ucnv_Latin
; Line 345
	mov	eax, DWORD PTR _source$[ebp]
	add	eax, 1
	mov	DWORD PTR _source$[ebp], eax
; Line 346
	mov	eax, DWORD PTR _c$[ebp]
	and	eax, 3
	shl	eax, 6
	movzx	ecx, BYTE PTR _t1$[ebp]
	or	eax, ecx
	mov	edx, DWORD PTR _target$[ebp]
	mov	BYTE PTR [edx], al
	mov	eax, DWORD PTR _target$[ebp]
	add	eax, 1
	mov	DWORD PTR _target$[ebp], eax
; Line 347
	mov	eax, DWORD PTR _targetCapacity$[ebp]
	sub	eax, 1
	mov	DWORD PTR _targetCapacity$[ebp], eax
; Line 349
	mov	eax, DWORD PTR _utf8$[ebp]
	mov	DWORD PTR [eax+44], 0
; Line 350
	mov	eax, DWORD PTR _utf8$[ebp]
	mov	BYTE PTR [eax+36], 0
; Line 351
	jmp	SHORT $LN15@ucnv_Latin
$LN12@ucnv_Latin:
; Line 353
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], -127			; ffffff81H
; Line 354
	jmp	$LN16@ucnv_Latin
$LN15@ucnv_Latin:
; Line 366
	mov	eax, DWORD PTR _source$[ebp]
	cmp	eax, DWORD PTR _sourceLimit$[ebp]
	jae	SHORT $LN9@ucnv_Latin
	mov	eax, DWORD PTR _sourceLimit$[ebp]
	movzx	ecx, BYTE PTR [eax-1]
	sub	ecx, 192				; 000000c0H
	movzx	edx, cl
	cmp	edx, 62					; 0000003eH
	jge	SHORT $LN9@ucnv_Latin
; Line 367
	mov	eax, DWORD PTR _sourceLimit$[ebp]
	sub	eax, 1
	mov	DWORD PTR _sourceLimit$[ebp], eax
$LN9@ucnv_Latin:
; Line 371
	mov	eax, DWORD PTR _source$[ebp]
	cmp	eax, DWORD PTR _sourceLimit$[ebp]
	jae	$LN8@ucnv_Latin
; Line 372
	cmp	DWORD PTR _targetCapacity$[ebp], 0
	jle	$LN7@ucnv_Latin
; Line 373
	mov	eax, DWORD PTR _source$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _b$[ebp], cl
	mov	edx, DWORD PTR _source$[ebp]
	add	edx, 1
	mov	DWORD PTR _source$[ebp], edx
; Line 374
	movsx	eax, BYTE PTR _b$[ebp]
	test	eax, eax
	jl	SHORT $LN6@ucnv_Latin
; Line 376
	mov	eax, DWORD PTR _target$[ebp]
	mov	cl, BYTE PTR _b$[ebp]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 1
	mov	DWORD PTR _target$[ebp], edx
; Line 377
	mov	eax, DWORD PTR _targetCapacity$[ebp]
	sub	eax, 1
	mov	DWORD PTR _targetCapacity$[ebp], eax
; Line 378
	jmp	$LN5@ucnv_Latin
$LN6@ucnv_Latin:
; Line 381
	movzx	eax, BYTE PTR _b$[ebp]
	cmp	eax, 194				; 000000c2H
	jl	SHORT $LN4@ucnv_Latin
	movzx	eax, BYTE PTR _b$[ebp]
	cmp	eax, 195				; 000000c3H
	jg	SHORT $LN4@ucnv_Latin
	mov	eax, DWORD PTR _source$[ebp]
	movzx	ecx, BYTE PTR [eax]
	sub	ecx, 128				; 00000080H
	mov	BYTE PTR _t1$[ebp], cl
	movzx	edx, BYTE PTR _t1$[ebp]
	cmp	edx, 63					; 0000003fH
	jg	SHORT $LN4@ucnv_Latin
; Line 382
	mov	eax, DWORD PTR _source$[ebp]
	add	eax, 1
	mov	DWORD PTR _source$[ebp], eax
; Line 383
	movzx	eax, BYTE PTR _b$[ebp]
	and	eax, 3
	shl	eax, 6
	movzx	ecx, BYTE PTR _t1$[ebp]
	or	eax, ecx
	mov	edx, DWORD PTR _target$[ebp]
	mov	BYTE PTR [edx], al
	mov	eax, DWORD PTR _target$[ebp]
	add	eax, 1
	mov	DWORD PTR _target$[ebp], eax
; Line 384
	mov	eax, DWORD PTR _targetCapacity$[ebp]
	sub	eax, 1
	mov	DWORD PTR _targetCapacity$[ebp], eax
; Line 385
	jmp	SHORT $LN5@ucnv_Latin
$LN4@ucnv_Latin:
; Line 387
	mov	eax, DWORD PTR _source$[ebp]
	sub	eax, 1
	mov	ecx, DWORD PTR _pToUArgs$[ebp]
	mov	DWORD PTR [ecx+8], eax
; Line 388
	mov	eax, DWORD PTR _pFromUArgs$[ebp]
	mov	ecx, DWORD PTR _target$[ebp]
	mov	DWORD PTR [eax+16], ecx
; Line 389
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], -127			; ffffff81H
; Line 390
	jmp	$LN16@ucnv_Latin
$LN5@ucnv_Latin:
; Line 392
	jmp	SHORT $LN2@ucnv_Latin
$LN7@ucnv_Latin:
; Line 394
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
; Line 395
	jmp	SHORT $LN8@ucnv_Latin
$LN2@ucnv_Latin:
; Line 397
	jmp	$LN9@ucnv_Latin
$LN8@ucnv_Latin:
; Line 406
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	cmp	DWORD PTR [eax], 0
	jg	$LN1@ucnv_Latin
	mov	eax, DWORD PTR _pToUArgs$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _sourceLimit$[ebp], ecx
	mov	edx, DWORD PTR _source$[ebp]
	cmp	edx, DWORD PTR _sourceLimit$[ebp]
	jae	$LN1@ucnv_Latin
; Line 407
	mov	eax, DWORD PTR _source$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _b$[ebp], cl
	mov	edx, DWORD PTR _utf8$[ebp]
	mov	al, BYTE PTR _b$[ebp]
	mov	BYTE PTR [edx+37], al
	movzx	ecx, BYTE PTR _b$[ebp]
	mov	edx, DWORD PTR _utf8$[ebp]
	mov	DWORD PTR [edx+44], ecx
	mov	eax, DWORD PTR _source$[ebp]
	add	eax, 1
	mov	DWORD PTR _source$[ebp], eax
; Line 408
	mov	eax, DWORD PTR _utf8$[ebp]
	mov	BYTE PTR [eax+36], 1
; Line 409
	movzx	eax, BYTE PTR _b$[ebp]
	cmp	eax, 240				; 000000f0H
	jge	SHORT $LN20@ucnv_Latin
	movzx	ecx, BYTE PTR _b$[ebp]
	xor	edx, edx
	cmp	ecx, 192				; 000000c0H
	setge	dl
	movzx	eax, BYTE PTR _b$[ebp]
	xor	ecx, ecx
	cmp	eax, 224				; 000000e0H
	setge	cl
	add	edx, ecx
	mov	DWORD PTR tv190[ebp], edx
	jmp	SHORT $LN21@ucnv_Latin
$LN20@ucnv_Latin:
	movzx	edx, BYTE PTR _b$[ebp]
	cmp	edx, 254				; 000000feH
	jge	SHORT $LN18@ucnv_Latin
	movzx	eax, BYTE PTR _b$[ebp]
	xor	ecx, ecx
	cmp	eax, 248				; 000000f8H
	setge	cl
	movzx	edx, BYTE PTR _b$[ebp]
	xor	eax, eax
	cmp	edx, 252				; 000000fcH
	setge	al
	lea	ecx, DWORD PTR [ecx+eax+3]
	mov	DWORD PTR tv189[ebp], ecx
	jmp	SHORT $LN19@ucnv_Latin
$LN18@ucnv_Latin:
	mov	DWORD PTR tv189[ebp], 0
$LN19@ucnv_Latin:
	mov	edx, DWORD PTR tv189[ebp]
	mov	DWORD PTR tv190[ebp], edx
$LN21@ucnv_Latin:
	mov	eax, DWORD PTR tv190[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _utf8$[ebp]
	mov	DWORD PTR [ecx+48], eax
$LN1@ucnv_Latin:
; Line 413
	mov	eax, DWORD PTR _pToUArgs$[ebp]
	mov	ecx, DWORD PTR _source$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 414
	mov	eax, DWORD PTR _pFromUArgs$[ebp]
	mov	ecx, DWORD PTR _target$[ebp]
	mov	DWORD PTR [eax+16], ecx
$LN16@ucnv_Latin:
; Line 415
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_ucnv_Latin1FromUTF8 ENDP
_TEXT	ENDS
EXTRN	__RTC_CheckEsp:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __Latin1GetUnicodeSet
_TEXT	SEGMENT
_cnv$ = 8						; size = 4
_sa$ = 12						; size = 4
_which$ = 16						; size = 4
_pErrorCode$ = 20					; size = 4
__Latin1GetUnicodeSet PROC				; COMDAT
; Line 421
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 422
	mov	esi, esp
	push	255					; 000000ffH
	push	0
	mov	eax, DWORD PTR _sa$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _sa$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 423
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__Latin1GetUnicodeSet ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __ASCIIToUnicodeWithOffsets
_TEXT	SEGMENT
tv193 = -364						; size = 4
tv153 = -362						; size = 2
tv146 = -362						; size = 2
tv139 = -362						; size = 2
tv132 = -362						; size = 2
tv93 = -362						; size = 2
tv86 = -362						; size = 2
tv79 = -362						; size = 2
_count$8006 = -164					; size = 4
_cnv$8001 = -152					; size = 4
_oredChars$7987 = -140					; size = 2
_loops$7986 = -128					; size = 4
_count$7985 = -116					; size = 4
_c$ = -101						; size = 1
_sourceIndex$ = -92					; size = 4
_offsets$ = -80						; size = 4
_length$ = -68						; size = 4
_targetCapacity$ = -56					; size = 4
_oldTarget$ = -44					; size = 4
_target$ = -32						; size = 4
_sourceLimit$ = -20					; size = 4
_source$ = -8						; size = 4
_pArgs$ = 8						; size = 4
_pErrorCode$ = 12					; size = 4
__ASCIIToUnicodeWithOffsets PROC			; COMDAT
; Line 469
	push	ebp
	mov	ebp, esp
	sub	esp, 364				; 0000016cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-364]
	mov	ecx, 91					; 0000005bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 480
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _source$[ebp], ecx
; Line 481
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _sourceLimit$[ebp], ecx
; Line 482
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _oldTarget$[ebp], ecx
	mov	edx, DWORD PTR _oldTarget$[ebp]
	mov	DWORD PTR _target$[ebp], edx
; Line 483
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR _pArgs$[ebp]
	mov	edx, DWORD PTR [eax+20]
	sub	edx, DWORD PTR [ecx+16]
	sar	edx, 1
	mov	DWORD PTR _targetCapacity$[ebp], edx
; Line 484
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR _offsets$[ebp], ecx
; Line 487
	mov	DWORD PTR _sourceIndex$[ebp], 0
; Line 493
	mov	eax, DWORD PTR _sourceLimit$[ebp]
	sub	eax, DWORD PTR _source$[ebp]
	mov	DWORD PTR _length$[ebp], eax
; Line 494
	mov	eax, DWORD PTR _length$[ebp]
	cmp	eax, DWORD PTR _targetCapacity$[ebp]
	jge	SHORT $LN17@ASCIIToUni
; Line 495
	mov	eax, DWORD PTR _length$[ebp]
	mov	DWORD PTR _targetCapacity$[ebp], eax
$LN17@ASCIIToUni:
; Line 498
	cmp	DWORD PTR _targetCapacity$[ebp], 8
	jl	$LN16@ASCIIToUni
; Line 503
	mov	eax, DWORD PTR _targetCapacity$[ebp]
	sar	eax, 3
	mov	DWORD PTR _count$7985[ebp], eax
	mov	ecx, DWORD PTR _count$7985[ebp]
	mov	DWORD PTR _loops$7986[ebp], ecx
$LN15@ASCIIToUni:
; Line 505
	mov	eax, DWORD PTR _source$[ebp]
	movzx	cx, BYTE PTR [eax]
	mov	edx, DWORD PTR _target$[ebp]
	mov	WORD PTR [edx], cx
	mov	eax, DWORD PTR _target$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR _oredChars$7987[ebp], cx
; Line 506
	mov	eax, DWORD PTR _source$[ebp]
	movzx	cx, BYTE PTR [eax+1]
	mov	WORD PTR tv79[ebp], cx
	mov	edx, DWORD PTR _target$[ebp]
	mov	ax, WORD PTR tv79[ebp]
	mov	WORD PTR [edx+2], ax
	movzx	ecx, WORD PTR tv79[ebp]
	movzx	edx, WORD PTR _oredChars$7987[ebp]
	or	edx, ecx
	mov	WORD PTR _oredChars$7987[ebp], dx
; Line 507
	mov	eax, DWORD PTR _source$[ebp]
	movzx	cx, BYTE PTR [eax+2]
	mov	WORD PTR tv86[ebp], cx
	mov	edx, DWORD PTR _target$[ebp]
	mov	ax, WORD PTR tv86[ebp]
	mov	WORD PTR [edx+4], ax
	movzx	ecx, WORD PTR tv86[ebp]
	movzx	edx, WORD PTR _oredChars$7987[ebp]
	or	edx, ecx
	mov	WORD PTR _oredChars$7987[ebp], dx
; Line 508
	mov	eax, DWORD PTR _source$[ebp]
	movzx	cx, BYTE PTR [eax+3]
	mov	WORD PTR tv93[ebp], cx
	mov	edx, DWORD PTR _target$[ebp]
	mov	ax, WORD PTR tv93[ebp]
	mov	WORD PTR [edx+6], ax
	movzx	ecx, WORD PTR tv93[ebp]
	movzx	edx, WORD PTR _oredChars$7987[ebp]
	or	edx, ecx
	mov	WORD PTR _oredChars$7987[ebp], dx
; Line 509
	mov	eax, DWORD PTR _source$[ebp]
	movzx	cx, BYTE PTR [eax+4]
	mov	WORD PTR tv132[ebp], cx
	mov	edx, DWORD PTR _target$[ebp]
	mov	ax, WORD PTR tv132[ebp]
	mov	WORD PTR [edx+8], ax
	movzx	ecx, WORD PTR tv132[ebp]
	movzx	edx, WORD PTR _oredChars$7987[ebp]
	or	edx, ecx
	mov	WORD PTR _oredChars$7987[ebp], dx
; Line 510
	mov	eax, DWORD PTR _source$[ebp]
	movzx	cx, BYTE PTR [eax+5]
	mov	WORD PTR tv139[ebp], cx
	mov	edx, DWORD PTR _target$[ebp]
	mov	ax, WORD PTR tv139[ebp]
	mov	WORD PTR [edx+10], ax
	movzx	ecx, WORD PTR tv139[ebp]
	movzx	edx, WORD PTR _oredChars$7987[ebp]
	or	edx, ecx
	mov	WORD PTR _oredChars$7987[ebp], dx
; Line 511
	mov	eax, DWORD PTR _source$[ebp]
	movzx	cx, BYTE PTR [eax+6]
	mov	WORD PTR tv146[ebp], cx
	mov	edx, DWORD PTR _target$[ebp]
	mov	ax, WORD PTR tv146[ebp]
	mov	WORD PTR [edx+12], ax
	movzx	ecx, WORD PTR tv146[ebp]
	movzx	edx, WORD PTR _oredChars$7987[ebp]
	or	edx, ecx
	mov	WORD PTR _oredChars$7987[ebp], dx
; Line 512
	mov	eax, DWORD PTR _source$[ebp]
	movzx	cx, BYTE PTR [eax+7]
	mov	WORD PTR tv153[ebp], cx
	mov	edx, DWORD PTR _target$[ebp]
	mov	ax, WORD PTR tv153[ebp]
	mov	WORD PTR [edx+14], ax
	movzx	ecx, WORD PTR tv153[ebp]
	movzx	edx, WORD PTR _oredChars$7987[ebp]
	or	edx, ecx
	mov	WORD PTR _oredChars$7987[ebp], dx
; Line 515
	movzx	eax, WORD PTR _oredChars$7987[ebp]
	cmp	eax, 127				; 0000007fH
	jle	SHORT $LN12@ASCIIToUni
; Line 517
	jmp	SHORT $LN13@ASCIIToUni
$LN12@ASCIIToUni:
; Line 519
	mov	eax, DWORD PTR _source$[ebp]
	add	eax, 8
	mov	DWORD PTR _source$[ebp], eax
; Line 520
	mov	eax, DWORD PTR _target$[ebp]
	add	eax, 16					; 00000010H
	mov	DWORD PTR _target$[ebp], eax
; Line 521
	mov	eax, DWORD PTR _count$7985[ebp]
	sub	eax, 1
	mov	DWORD PTR _count$7985[ebp], eax
	cmp	DWORD PTR _count$7985[ebp], 0
	jg	$LN15@ASCIIToUni
$LN13@ASCIIToUni:
; Line 522
	mov	eax, DWORD PTR _loops$7986[ebp]
	sub	eax, DWORD PTR _count$7985[ebp]
	mov	DWORD PTR _count$7985[ebp], eax
; Line 523
	mov	eax, DWORD PTR _count$7985[ebp]
	shl	eax, 3
	mov	ecx, DWORD PTR _targetCapacity$[ebp]
	sub	ecx, eax
	mov	DWORD PTR _targetCapacity$[ebp], ecx
; Line 525
	cmp	DWORD PTR _offsets$[ebp], 0
	je	$LN16@ASCIIToUni
; Line 526
	mov	eax, DWORD PTR _count$7985[ebp]
	shl	eax, 3
	mov	ecx, DWORD PTR _oldTarget$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR _oldTarget$[ebp], edx
$LN10@ASCIIToUni:
; Line 527
	cmp	DWORD PTR _count$7985[ebp], 0
	jle	$LN16@ASCIIToUni
; Line 528
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _sourceIndex$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _sourceIndex$[ebp]
	add	edx, 1
	mov	DWORD PTR _sourceIndex$[ebp], edx
; Line 529
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _sourceIndex$[ebp]
	mov	DWORD PTR [eax+4], ecx
	mov	edx, DWORD PTR _sourceIndex$[ebp]
	add	edx, 1
	mov	DWORD PTR _sourceIndex$[ebp], edx
; Line 530
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _sourceIndex$[ebp]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _sourceIndex$[ebp]
	add	edx, 1
	mov	DWORD PTR _sourceIndex$[ebp], edx
; Line 531
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _sourceIndex$[ebp]
	mov	DWORD PTR [eax+12], ecx
	mov	edx, DWORD PTR _sourceIndex$[ebp]
	add	edx, 1
	mov	DWORD PTR _sourceIndex$[ebp], edx
; Line 532
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _sourceIndex$[ebp]
	mov	DWORD PTR [eax+16], ecx
	mov	edx, DWORD PTR _sourceIndex$[ebp]
	add	edx, 1
	mov	DWORD PTR _sourceIndex$[ebp], edx
; Line 533
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _sourceIndex$[ebp]
	mov	DWORD PTR [eax+20], ecx
	mov	edx, DWORD PTR _sourceIndex$[ebp]
	add	edx, 1
	mov	DWORD PTR _sourceIndex$[ebp], edx
; Line 534
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _sourceIndex$[ebp]
	mov	DWORD PTR [eax+24], ecx
	mov	edx, DWORD PTR _sourceIndex$[ebp]
	add	edx, 1
	mov	DWORD PTR _sourceIndex$[ebp], edx
; Line 535
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _sourceIndex$[ebp]
	mov	DWORD PTR [eax+28], ecx
	mov	edx, DWORD PTR _sourceIndex$[ebp]
	add	edx, 1
	mov	DWORD PTR _sourceIndex$[ebp], edx
; Line 536
	mov	eax, DWORD PTR _offsets$[ebp]
	add	eax, 32					; 00000020H
	mov	DWORD PTR _offsets$[ebp], eax
; Line 537
	mov	eax, DWORD PTR _count$7985[ebp]
	sub	eax, 1
	mov	DWORD PTR _count$7985[ebp], eax
; Line 538
	jmp	$LN10@ASCIIToUni
$LN16@ASCIIToUni:
; Line 543
	mov	BYTE PTR _c$[ebp], 0
$LN8@ASCIIToUni:
; Line 544
	cmp	DWORD PTR _targetCapacity$[ebp], 0
	jle	SHORT $LN7@ASCIIToUni
	mov	eax, DWORD PTR _source$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _c$[ebp], cl
	movzx	edx, BYTE PTR _c$[ebp]
	mov	eax, DWORD PTR _source$[ebp]
	add	eax, 1
	mov	DWORD PTR _source$[ebp], eax
	cmp	edx, 127				; 0000007fH
	jg	SHORT $LN20@ASCIIToUni
	mov	DWORD PTR tv193[ebp], 1
	jmp	SHORT $LN21@ASCIIToUni
$LN20@ASCIIToUni:
	mov	DWORD PTR tv193[ebp], 0
$LN21@ASCIIToUni:
	cmp	DWORD PTR tv193[ebp], 0
	je	SHORT $LN7@ASCIIToUni
; Line 545
	movzx	ax, BYTE PTR _c$[ebp]
	mov	ecx, DWORD PTR _target$[ebp]
	mov	WORD PTR [ecx], ax
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 2
	mov	DWORD PTR _target$[ebp], edx
; Line 546
	mov	eax, DWORD PTR _targetCapacity$[ebp]
	sub	eax, 1
	mov	DWORD PTR _targetCapacity$[ebp], eax
; Line 547
	jmp	SHORT $LN8@ASCIIToUni
$LN7@ASCIIToUni:
; Line 549
	movzx	eax, BYTE PTR _c$[ebp]
	cmp	eax, 127				; 0000007fH
	jle	SHORT $LN6@ASCIIToUni
; Line 551
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _cnv$8001[ebp], ecx
; Line 552
	mov	eax, DWORD PTR _cnv$8001[ebp]
	mov	cl, BYTE PTR _c$[ebp]
	mov	BYTE PTR [eax+37], cl
; Line 553
	mov	eax, DWORD PTR _cnv$8001[ebp]
	mov	BYTE PTR [eax+36], 1
; Line 554
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 12			; 0000000cH
	jmp	SHORT $LN5@ASCIIToUni
$LN6@ASCIIToUni:
; Line 555
	mov	eax, DWORD PTR _source$[ebp]
	cmp	eax, DWORD PTR _sourceLimit$[ebp]
	jae	SHORT $LN5@ASCIIToUni
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR _target$[ebp]
	cmp	ecx, DWORD PTR [eax+20]
	jb	SHORT $LN5@ASCIIToUni
; Line 557
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
$LN5@ASCIIToUni:
; Line 561
	cmp	DWORD PTR _offsets$[ebp], 0
	je	SHORT $LN3@ASCIIToUni
; Line 562
	mov	eax, DWORD PTR _target$[ebp]
	sub	eax, DWORD PTR _oldTarget$[ebp]
	sar	eax, 1
	mov	DWORD PTR _count$8006[ebp], eax
$LN2@ASCIIToUni:
; Line 563
	cmp	DWORD PTR _count$8006[ebp], 0
	jbe	SHORT $LN3@ASCIIToUni
; Line 564
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _sourceIndex$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
	mov	eax, DWORD PTR _sourceIndex$[ebp]
	add	eax, 1
	mov	DWORD PTR _sourceIndex$[ebp], eax
; Line 565
	mov	eax, DWORD PTR _count$8006[ebp]
	sub	eax, 1
	mov	DWORD PTR _count$8006[ebp], eax
; Line 566
	jmp	SHORT $LN2@ASCIIToUni
$LN3@ASCIIToUni:
; Line 570
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR _source$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 571
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR _target$[ebp]
	mov	DWORD PTR [eax+16], ecx
; Line 572
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR _offsets$[ebp]
	mov	DWORD PTR [eax+24], ecx
; Line 573
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
__ASCIIToUnicodeWithOffsets ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __ASCIIGetNextUChar
_TEXT	SEGMENT
_cnv$8025 = -32						; size = 4
_b$ = -17						; size = 1
_source$ = -8						; size = 4
_pArgs$ = 8						; size = 4
_pErrorCode$ = 12					; size = 4
__ASCIIGetNextUChar PROC				; COMDAT
; Line 578
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 582
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _source$[ebp], ecx
; Line 583
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR _source$[ebp]
	cmp	ecx, DWORD PTR [eax+12]
	jae	SHORT $LN3@ASCIIGetNe
; Line 584
	mov	eax, DWORD PTR _source$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _b$[ebp], cl
	mov	edx, DWORD PTR _source$[ebp]
	add	edx, 1
	mov	DWORD PTR _source$[ebp], edx
; Line 585
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR _source$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 586
	movzx	eax, BYTE PTR _b$[ebp]
	cmp	eax, 127				; 0000007fH
	jg	SHORT $LN2@ASCIIGetNe
; Line 587
	movzx	eax, BYTE PTR _b$[ebp]
	jmp	SHORT $LN4@ASCIIGetNe
; Line 588
	jmp	SHORT $LN3@ASCIIGetNe
$LN2@ASCIIGetNe:
; Line 589
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _cnv$8025[ebp], ecx
; Line 590
	mov	eax, DWORD PTR _cnv$8025[ebp]
	mov	cl, BYTE PTR _b$[ebp]
	mov	BYTE PTR [eax+37], cl
; Line 591
	mov	eax, DWORD PTR _cnv$8025[ebp]
	mov	BYTE PTR [eax+36], 1
; Line 592
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 12			; 0000000cH
; Line 593
	mov	eax, 65535				; 0000ffffH
	jmp	SHORT $LN4@ASCIIGetNe
$LN3@ASCIIGetNe:
; Line 598
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 8
; Line 599
	mov	eax, 65535				; 0000ffffH
$LN4@ASCIIGetNe:
; Line 600
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
__ASCIIGetNextUChar ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _ucnv_ASCIIFromUTF8
_TEXT	SEGMENT
_oredChars$8050 = -101					; size = 1
_loops$8049 = -92					; size = 4
_count$8048 = -80					; size = 4
_c$ = -65						; size = 1
_length$ = -56						; size = 4
_targetCapacity$ = -44					; size = 4
_target$ = -32						; size = 4
_sourceLimit$ = -20					; size = 4
_source$ = -8						; size = 4
_pFromUArgs$ = 8					; size = 4
_pToUArgs$ = 12						; size = 4
_pErrorCode$ = 16					; size = 4
_ucnv_ASCIIFromUTF8 PROC				; COMDAT
; Line 606
	push	ebp
	mov	ebp, esp
	sub	esp, 300				; 0000012cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-300]
	mov	ecx, 75					; 0000004bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 613
	mov	eax, DWORD PTR _pToUArgs$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cmp	DWORD PTR [ecx+44], 0
	je	SHORT $LN12@ucnv_ASCII
; Line 615
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], -127			; ffffff81H
; Line 616
	jmp	$LN13@ucnv_ASCII
$LN12@ucnv_ASCII:
; Line 620
	mov	eax, DWORD PTR _pToUArgs$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _source$[ebp], ecx
; Line 621
	mov	eax, DWORD PTR _pToUArgs$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _sourceLimit$[ebp], ecx
; Line 622
	mov	eax, DWORD PTR _pFromUArgs$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _target$[ebp], ecx
; Line 623
	mov	eax, DWORD PTR _pFromUArgs$[ebp]
	mov	ecx, DWORD PTR _pFromUArgs$[ebp]
	mov	edx, DWORD PTR [eax+20]
	sub	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _targetCapacity$[ebp], edx
; Line 629
	mov	eax, DWORD PTR _sourceLimit$[ebp]
	sub	eax, DWORD PTR _source$[ebp]
	mov	DWORD PTR _length$[ebp], eax
; Line 630
	mov	eax, DWORD PTR _length$[ebp]
	cmp	eax, DWORD PTR _targetCapacity$[ebp]
	jge	SHORT $LN11@ucnv_ASCII
; Line 631
	mov	eax, DWORD PTR _length$[ebp]
	mov	DWORD PTR _targetCapacity$[ebp], eax
$LN11@ucnv_ASCII:
; Line 635
	cmp	DWORD PTR _targetCapacity$[ebp], 16	; 00000010H
	jl	$LN10@ucnv_ASCII
; Line 639
	mov	eax, DWORD PTR _targetCapacity$[ebp]
	sar	eax, 4
	mov	DWORD PTR _count$8048[ebp], eax
	mov	ecx, DWORD PTR _count$8048[ebp]
	mov	DWORD PTR _loops$8049[ebp], ecx
$LN9@ucnv_ASCII:
; Line 641
	mov	eax, DWORD PTR _target$[ebp]
	mov	ecx, DWORD PTR _source$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl
	mov	eax, DWORD PTR _target$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _oredChars$8050[ebp], cl
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 1
	mov	DWORD PTR _target$[ebp], edx
	mov	eax, DWORD PTR _source$[ebp]
	add	eax, 1
	mov	DWORD PTR _source$[ebp], eax
; Line 642
	mov	eax, DWORD PTR _target$[ebp]
	mov	ecx, DWORD PTR _source$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl
	mov	eax, DWORD PTR _target$[ebp]
	movzx	ecx, BYTE PTR [eax]
	movzx	edx, BYTE PTR _oredChars$8050[ebp]
	or	edx, ecx
	mov	BYTE PTR _oredChars$8050[ebp], dl
	mov	eax, DWORD PTR _target$[ebp]
	add	eax, 1
	mov	DWORD PTR _target$[ebp], eax
	mov	ecx, DWORD PTR _source$[ebp]
	add	ecx, 1
	mov	DWORD PTR _source$[ebp], ecx
; Line 643
	mov	eax, DWORD PTR _target$[ebp]
	mov	ecx, DWORD PTR _source$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl
	mov	eax, DWORD PTR _target$[ebp]
	movzx	ecx, BYTE PTR [eax]
	movzx	edx, BYTE PTR _oredChars$8050[ebp]
	or	edx, ecx
	mov	BYTE PTR _oredChars$8050[ebp], dl
	mov	eax, DWORD PTR _target$[ebp]
	add	eax, 1
	mov	DWORD PTR _target$[ebp], eax
	mov	ecx, DWORD PTR _source$[ebp]
	add	ecx, 1
	mov	DWORD PTR _source$[ebp], ecx
; Line 644
	mov	eax, DWORD PTR _target$[ebp]
	mov	ecx, DWORD PTR _source$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl
	mov	eax, DWORD PTR _target$[ebp]
	movzx	ecx, BYTE PTR [eax]
	movzx	edx, BYTE PTR _oredChars$8050[ebp]
	or	edx, ecx
	mov	BYTE PTR _oredChars$8050[ebp], dl
	mov	eax, DWORD PTR _target$[ebp]
	add	eax, 1
	mov	DWORD PTR _target$[ebp], eax
	mov	ecx, DWORD PTR _source$[ebp]
	add	ecx, 1
	mov	DWORD PTR _source$[ebp], ecx
; Line 645
	mov	eax, DWORD PTR _target$[ebp]
	mov	ecx, DWORD PTR _source$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl
	mov	eax, DWORD PTR _target$[ebp]
	movzx	ecx, BYTE PTR [eax]
	movzx	edx, BYTE PTR _oredChars$8050[ebp]
	or	edx, ecx
	mov	BYTE PTR _oredChars$8050[ebp], dl
	mov	eax, DWORD PTR _target$[ebp]
	add	eax, 1
	mov	DWORD PTR _target$[ebp], eax
	mov	ecx, DWORD PTR _source$[ebp]
	add	ecx, 1
	mov	DWORD PTR _source$[ebp], ecx
; Line 646
	mov	eax, DWORD PTR _target$[ebp]
	mov	ecx, DWORD PTR _source$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl
	mov	eax, DWORD PTR _target$[ebp]
	movzx	ecx, BYTE PTR [eax]
	movzx	edx, BYTE PTR _oredChars$8050[ebp]
	or	edx, ecx
	mov	BYTE PTR _oredChars$8050[ebp], dl
	mov	eax, DWORD PTR _target$[ebp]
	add	eax, 1
	mov	DWORD PTR _target$[ebp], eax
	mov	ecx, DWORD PTR _source$[ebp]
	add	ecx, 1
	mov	DWORD PTR _source$[ebp], ecx
; Line 647
	mov	eax, DWORD PTR _target$[ebp]
	mov	ecx, DWORD PTR _source$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl
	mov	eax, DWORD PTR _target$[ebp]
	movzx	ecx, BYTE PTR [eax]
	movzx	edx, BYTE PTR _oredChars$8050[ebp]
	or	edx, ecx
	mov	BYTE PTR _oredChars$8050[ebp], dl
	mov	eax, DWORD PTR _target$[ebp]
	add	eax, 1
	mov	DWORD PTR _target$[ebp], eax
	mov	ecx, DWORD PTR _source$[ebp]
	add	ecx, 1
	mov	DWORD PTR _source$[ebp], ecx
; Line 648
	mov	eax, DWORD PTR _target$[ebp]
	mov	ecx, DWORD PTR _source$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl
	mov	eax, DWORD PTR _target$[ebp]
	movzx	ecx, BYTE PTR [eax]
	movzx	edx, BYTE PTR _oredChars$8050[ebp]
	or	edx, ecx
	mov	BYTE PTR _oredChars$8050[ebp], dl
	mov	eax, DWORD PTR _target$[ebp]
	add	eax, 1
	mov	DWORD PTR _target$[ebp], eax
	mov	ecx, DWORD PTR _source$[ebp]
	add	ecx, 1
	mov	DWORD PTR _source$[ebp], ecx
; Line 649
	mov	eax, DWORD PTR _target$[ebp]
	mov	ecx, DWORD PTR _source$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl
	mov	eax, DWORD PTR _target$[ebp]
	movzx	ecx, BYTE PTR [eax]
	movzx	edx, BYTE PTR _oredChars$8050[ebp]
	or	edx, ecx
	mov	BYTE PTR _oredChars$8050[ebp], dl
	mov	eax, DWORD PTR _target$[ebp]
	add	eax, 1
	mov	DWORD PTR _target$[ebp], eax
	mov	ecx, DWORD PTR _source$[ebp]
	add	ecx, 1
	mov	DWORD PTR _source$[ebp], ecx
; Line 650
	mov	eax, DWORD PTR _target$[ebp]
	mov	ecx, DWORD PTR _source$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl
	mov	eax, DWORD PTR _target$[ebp]
	movzx	ecx, BYTE PTR [eax]
	movzx	edx, BYTE PTR _oredChars$8050[ebp]
	or	edx, ecx
	mov	BYTE PTR _oredChars$8050[ebp], dl
	mov	eax, DWORD PTR _target$[ebp]
	add	eax, 1
	mov	DWORD PTR _target$[ebp], eax
	mov	ecx, DWORD PTR _source$[ebp]
	add	ecx, 1
	mov	DWORD PTR _source$[ebp], ecx
; Line 651
	mov	eax, DWORD PTR _target$[ebp]
	mov	ecx, DWORD PTR _source$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl
	mov	eax, DWORD PTR _target$[ebp]
	movzx	ecx, BYTE PTR [eax]
	movzx	edx, BYTE PTR _oredChars$8050[ebp]
	or	edx, ecx
	mov	BYTE PTR _oredChars$8050[ebp], dl
	mov	eax, DWORD PTR _target$[ebp]
	add	eax, 1
	mov	DWORD PTR _target$[ebp], eax
	mov	ecx, DWORD PTR _source$[ebp]
	add	ecx, 1
	mov	DWORD PTR _source$[ebp], ecx
; Line 652
	mov	eax, DWORD PTR _target$[ebp]
	mov	ecx, DWORD PTR _source$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl
	mov	eax, DWORD PTR _target$[ebp]
	movzx	ecx, BYTE PTR [eax]
	movzx	edx, BYTE PTR _oredChars$8050[ebp]
	or	edx, ecx
	mov	BYTE PTR _oredChars$8050[ebp], dl
	mov	eax, DWORD PTR _target$[ebp]
	add	eax, 1
	mov	DWORD PTR _target$[ebp], eax
	mov	ecx, DWORD PTR _source$[ebp]
	add	ecx, 1
	mov	DWORD PTR _source$[ebp], ecx
; Line 653
	mov	eax, DWORD PTR _target$[ebp]
	mov	ecx, DWORD PTR _source$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl
	mov	eax, DWORD PTR _target$[ebp]
	movzx	ecx, BYTE PTR [eax]
	movzx	edx, BYTE PTR _oredChars$8050[ebp]
	or	edx, ecx
	mov	BYTE PTR _oredChars$8050[ebp], dl
	mov	eax, DWORD PTR _target$[ebp]
	add	eax, 1
	mov	DWORD PTR _target$[ebp], eax
	mov	ecx, DWORD PTR _source$[ebp]
	add	ecx, 1
	mov	DWORD PTR _source$[ebp], ecx
; Line 654
	mov	eax, DWORD PTR _target$[ebp]
	mov	ecx, DWORD PTR _source$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl
	mov	eax, DWORD PTR _target$[ebp]
	movzx	ecx, BYTE PTR [eax]
	movzx	edx, BYTE PTR _oredChars$8050[ebp]
	or	edx, ecx
	mov	BYTE PTR _oredChars$8050[ebp], dl
	mov	eax, DWORD PTR _target$[ebp]
	add	eax, 1
	mov	DWORD PTR _target$[ebp], eax
	mov	ecx, DWORD PTR _source$[ebp]
	add	ecx, 1
	mov	DWORD PTR _source$[ebp], ecx
; Line 655
	mov	eax, DWORD PTR _target$[ebp]
	mov	ecx, DWORD PTR _source$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl
	mov	eax, DWORD PTR _target$[ebp]
	movzx	ecx, BYTE PTR [eax]
	movzx	edx, BYTE PTR _oredChars$8050[ebp]
	or	edx, ecx
	mov	BYTE PTR _oredChars$8050[ebp], dl
	mov	eax, DWORD PTR _target$[ebp]
	add	eax, 1
	mov	DWORD PTR _target$[ebp], eax
	mov	ecx, DWORD PTR _source$[ebp]
	add	ecx, 1
	mov	DWORD PTR _source$[ebp], ecx
; Line 656
	mov	eax, DWORD PTR _target$[ebp]
	mov	ecx, DWORD PTR _source$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl
	mov	eax, DWORD PTR _target$[ebp]
	movzx	ecx, BYTE PTR [eax]
	movzx	edx, BYTE PTR _oredChars$8050[ebp]
	or	edx, ecx
	mov	BYTE PTR _oredChars$8050[ebp], dl
	mov	eax, DWORD PTR _target$[ebp]
	add	eax, 1
	mov	DWORD PTR _target$[ebp], eax
	mov	ecx, DWORD PTR _source$[ebp]
	add	ecx, 1
	mov	DWORD PTR _source$[ebp], ecx
; Line 659
	movzx	eax, BYTE PTR _oredChars$8050[ebp]
	cmp	eax, 127				; 0000007fH
	jle	SHORT $LN8@ucnv_ASCII
; Line 661
	mov	eax, DWORD PTR _source$[ebp]
	sub	eax, 16					; 00000010H
	mov	DWORD PTR _source$[ebp], eax
; Line 662
	mov	eax, DWORD PTR _target$[ebp]
	sub	eax, 16					; 00000010H
	mov	DWORD PTR _target$[ebp], eax
; Line 663
	jmp	SHORT $LN7@ucnv_ASCII
$LN8@ucnv_ASCII:
; Line 665
	mov	eax, DWORD PTR _count$8048[ebp]
	sub	eax, 1
	mov	DWORD PTR _count$8048[ebp], eax
	cmp	DWORD PTR _count$8048[ebp], 0
	jg	$LN9@ucnv_ASCII
$LN7@ucnv_ASCII:
; Line 666
	mov	eax, DWORD PTR _loops$8049[ebp]
	sub	eax, DWORD PTR _count$8048[ebp]
	mov	DWORD PTR _count$8048[ebp], eax
; Line 667
	mov	eax, DWORD PTR _count$8048[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _targetCapacity$[ebp]
	sub	ecx, eax
	mov	DWORD PTR _targetCapacity$[ebp], ecx
$LN10@ucnv_ASCII:
; Line 671
	mov	BYTE PTR _c$[ebp], 0
$LN5@ucnv_ASCII:
; Line 672
	cmp	DWORD PTR _targetCapacity$[ebp], 0
	jle	SHORT $LN4@ucnv_ASCII
	mov	eax, DWORD PTR _source$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _c$[ebp], cl
	movzx	edx, BYTE PTR _c$[ebp]
	cmp	edx, 127				; 0000007fH
	jg	SHORT $LN4@ucnv_ASCII
; Line 673
	mov	eax, DWORD PTR _source$[ebp]
	add	eax, 1
	mov	DWORD PTR _source$[ebp], eax
; Line 674
	mov	eax, DWORD PTR _target$[ebp]
	mov	cl, BYTE PTR _c$[ebp]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 1
	mov	DWORD PTR _target$[ebp], edx
; Line 675
	mov	eax, DWORD PTR _targetCapacity$[ebp]
	sub	eax, 1
	mov	DWORD PTR _targetCapacity$[ebp], eax
; Line 676
	jmp	SHORT $LN5@ucnv_ASCII
$LN4@ucnv_ASCII:
; Line 678
	movzx	eax, BYTE PTR _c$[ebp]
	cmp	eax, 127				; 0000007fH
	jle	SHORT $LN3@ucnv_ASCII
; Line 680
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], -127			; ffffff81H
	jmp	SHORT $LN2@ucnv_ASCII
$LN3@ucnv_ASCII:
; Line 681
	mov	eax, DWORD PTR _source$[ebp]
	cmp	eax, DWORD PTR _sourceLimit$[ebp]
	jae	SHORT $LN2@ucnv_ASCII
	mov	eax, DWORD PTR _pFromUArgs$[ebp]
	mov	ecx, DWORD PTR _target$[ebp]
	cmp	ecx, DWORD PTR [eax+20]
	jb	SHORT $LN2@ucnv_ASCII
; Line 683
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
$LN2@ucnv_ASCII:
; Line 687
	mov	eax, DWORD PTR _pToUArgs$[ebp]
	mov	ecx, DWORD PTR _source$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 688
	mov	eax, DWORD PTR _pFromUArgs$[ebp]
	mov	ecx, DWORD PTR _target$[ebp]
	mov	DWORD PTR [eax+16], ecx
$LN13@ucnv_ASCII:
; Line 689
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_ucnv_ASCIIFromUTF8 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __ASCIIGetUnicodeSet
_TEXT	SEGMENT
_cnv$ = 8						; size = 4
_sa$ = 12						; size = 4
_which$ = 16						; size = 4
_pErrorCode$ = 20					; size = 4
__ASCIIGetUnicodeSet PROC				; COMDAT
; Line 695
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 696
	mov	esi, esp
	push	127					; 0000007fH
	push	0
	mov	eax, DWORD PTR _sa$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _sa$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 697
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__ASCIIGetUnicodeSet ENDP
_TEXT	ENDS
END
