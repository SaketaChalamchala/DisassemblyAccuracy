; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\mozilla\intl\icu\source\common\utrace.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	??_C@_0BB@EPGFDLCH@ucol_strcollUTF8?$AA@	; `string'
PUBLIC	??_C@_0BJ@LMBKEEBD@ucol_openFromShortString?$AA@ ; `string'
PUBLIC	??_C@_0BB@HKNKLBKM@ucol_strcollIter?$AA@	; `string'
PUBLIC	??_C@_0BF@POMMKAHN@ucol_nextSortKeyPart?$AA@	; `string'
PUBLIC	??_C@_0P@HBEFODJK@ucol_getLocale?$AA@		; `string'
PUBLIC	??_C@_0BA@BGKCIAMK@ucol_getSortKey?$AA@		; `string'
PUBLIC	??_C@_0N@OEMAPCBD@ucol_strcoll?$AA@		; `string'
PUBLIC	??_C@_0L@PAECEAI@ucol_close?$AA@		; `string'
PUBLIC	??_C@_09BEMBEFHC@ucol_open?$AA@			; `string'
PUBLIC	??_C@_0M@MKMJLDLA@ucnv_unload?$AA@		; `string'
PUBLIC	??_C@_09KJPJPLCD@ucnv_load?$AA@			; `string'
PUBLIC	??_C@_0BA@PPMLJIPE@ucnv_flushCache?$AA@		; `string'
PUBLIC	??_C@_0L@PFAEBNKI@ucnv_close?$AA@		; `string'
PUBLIC	??_C@_0L@OBPKCNIL@ucnv_clone?$AA@		; `string'
PUBLIC	??_C@_0BF@CKINLDEK@ucnv_openAlgorithmic?$AA@	; `string'
PUBLIC	??_C@_0BB@OMPPDLHP@ucnv_openPackage?$AA@	; `string'
PUBLIC	??_C@_09BLMFIGGM@ucnv_open?$AA@			; `string'
PUBLIC	??_C@_09OJBLEFFC@u_cleanup?$AA@			; `string'
PUBLIC	??_C@_06GCJFLMHO@u_init?$AA@			; `string'
PUBLIC	_utrace_level_56
_BSS	SEGMENT
_pTraceEntryFunc DD 01H DUP (?)
_pTraceExitFunc DD 01H DUP (?)
_pTraceDataFunc DD 01H DUP (?)
_gTraceContext DD 01H DUP (?)
_utrace_level_56 DD 01H DUP (?)
_BSS	ENDS
;	COMDAT ??_C@_0BB@EPGFDLCH@ucol_strcollUTF8?$AA@
CONST	SEGMENT
??_C@_0BB@EPGFDLCH@ucol_strcollUTF8?$AA@ DB 'ucol_strcollUTF8', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@LMBKEEBD@ucol_openFromShortString?$AA@
CONST	SEGMENT
??_C@_0BJ@LMBKEEBD@ucol_openFromShortString?$AA@ DB 'ucol_openFromShortSt'
	DB	'ring', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@HKNKLBKM@ucol_strcollIter?$AA@
CONST	SEGMENT
??_C@_0BB@HKNKLBKM@ucol_strcollIter?$AA@ DB 'ucol_strcollIter', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@POMMKAHN@ucol_nextSortKeyPart?$AA@
CONST	SEGMENT
??_C@_0BF@POMMKAHN@ucol_nextSortKeyPart?$AA@ DB 'ucol_nextSortKeyPart', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@HBEFODJK@ucol_getLocale?$AA@
CONST	SEGMENT
??_C@_0P@HBEFODJK@ucol_getLocale?$AA@ DB 'ucol_getLocale', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@BGKCIAMK@ucol_getSortKey?$AA@
CONST	SEGMENT
??_C@_0BA@BGKCIAMK@ucol_getSortKey?$AA@ DB 'ucol_getSortKey', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@OEMAPCBD@ucol_strcoll?$AA@
CONST	SEGMENT
??_C@_0N@OEMAPCBD@ucol_strcoll?$AA@ DB 'ucol_strcoll', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@PAECEAI@ucol_close?$AA@
CONST	SEGMENT
??_C@_0L@PAECEAI@ucol_close?$AA@ DB 'ucol_close', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09BEMBEFHC@ucol_open?$AA@
CONST	SEGMENT
??_C@_09BEMBEFHC@ucol_open?$AA@ DB 'ucol_open', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@MKMJLDLA@ucnv_unload?$AA@
CONST	SEGMENT
??_C@_0M@MKMJLDLA@ucnv_unload?$AA@ DB 'ucnv_unload', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09KJPJPLCD@ucnv_load?$AA@
CONST	SEGMENT
??_C@_09KJPJPLCD@ucnv_load?$AA@ DB 'ucnv_load', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@PPMLJIPE@ucnv_flushCache?$AA@
CONST	SEGMENT
??_C@_0BA@PPMLJIPE@ucnv_flushCache?$AA@ DB 'ucnv_flushCache', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@PFAEBNKI@ucnv_close?$AA@
CONST	SEGMENT
??_C@_0L@PFAEBNKI@ucnv_close?$AA@ DB 'ucnv_close', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@OBPKCNIL@ucnv_clone?$AA@
CONST	SEGMENT
??_C@_0L@OBPKCNIL@ucnv_clone?$AA@ DB 'ucnv_clone', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@CKINLDEK@ucnv_openAlgorithmic?$AA@
CONST	SEGMENT
??_C@_0BF@CKINLDEK@ucnv_openAlgorithmic?$AA@ DB 'ucnv_openAlgorithmic', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@OMPPDLHP@ucnv_openPackage?$AA@
CONST	SEGMENT
??_C@_0BB@OMPPDLHP@ucnv_openPackage?$AA@ DB 'ucnv_openPackage', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09BLMFIGGM@ucnv_open?$AA@
CONST	SEGMENT
??_C@_09BLMFIGGM@ucnv_open?$AA@ DB 'ucnv_open', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09OJBLEFFC@u_cleanup?$AA@
CONST	SEGMENT
??_C@_09OJBLEFFC@u_cleanup?$AA@ DB 'u_cleanup', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06GCJFLMHO@u_init?$AA@
CONST	SEGMENT
??_C@_06GCJFLMHO@u_init?$AA@ DB 'u_init', 00H		; `string'
CONST	ENDS
CONST	SEGMENT
_gExitFmt DB	'Returns.', 00H
	ORG $+3
_gExitFmtValue DB 'Returns %d.', 00H
_gExitFmtStatus DB 'Returns.  Status = %d.', 00H
	ORG $+1
_gExitFmtValueStatus DB 'Returns %d.  Status = %d.', 00H
	ORG $+2
_gExitFmtPtrStatus DB 'Returns %d.  Status = %p.', 00H
	ORG $+2
?gHexChars@?1??outputHexBytes@@9@9 DB '0123456789abcdef', 00H ; `outputHexBytes'::`2'::gHexChars
	ORG $+3
_trFnName DD	FLAT:??_C@_06GCJFLMHO@u_init?$AA@
	DD	FLAT:??_C@_09OJBLEFFC@u_cleanup?$AA@
	DD	00H
_trConvNames DD	FLAT:??_C@_09BLMFIGGM@ucnv_open?$AA@
	DD	FLAT:??_C@_0BB@OMPPDLHP@ucnv_openPackage?$AA@
	DD	FLAT:??_C@_0BF@CKINLDEK@ucnv_openAlgorithmic?$AA@
	DD	FLAT:??_C@_0L@OBPKCNIL@ucnv_clone?$AA@
	DD	FLAT:??_C@_0L@PFAEBNKI@ucnv_close?$AA@
	DD	FLAT:??_C@_0BA@PPMLJIPE@ucnv_flushCache?$AA@
	DD	FLAT:??_C@_09KJPJPLCD@ucnv_load?$AA@
	DD	FLAT:??_C@_0M@MKMJLDLA@ucnv_unload?$AA@
	DD	00H
_trCollNames DD	FLAT:??_C@_09BEMBEFHC@ucol_open?$AA@
	DD	FLAT:??_C@_0L@PAECEAI@ucol_close?$AA@
	DD	FLAT:??_C@_0N@OEMAPCBD@ucol_strcoll?$AA@
	DD	FLAT:??_C@_0BA@BGKCIAMK@ucol_getSortKey?$AA@
	DD	FLAT:??_C@_0P@HBEFODJK@ucol_getLocale?$AA@
	DD	FLAT:??_C@_0BF@POMMKAHN@ucol_nextSortKeyPart?$AA@
	DD	FLAT:??_C@_0BB@HKNKLBKM@ucol_strcollIter?$AA@
	DD	FLAT:??_C@_0BJ@LMBKEEBD@ucol_openFromShortString?$AA@
	DD	FLAT:??_C@_0BB@EPGFDLCH@ucol_strcollUTF8?$AA@
	DD	00H
CONST	ENDS
PUBLIC	_utrace_entry_56
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File d:\mozilla\intl\icu\source\common\utrace.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT _utrace_entry_56
_TEXT	SEGMENT
_fnNumber$ = 8						; size = 4
_utrace_entry_56 PROC					; COMDAT
; Line 29
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 30
	cmp	DWORD PTR _pTraceEntryFunc, 0
	je	SHORT $LN2@utrace_ent
; Line 31
	mov	esi, esp
	mov	eax, DWORD PTR _fnNumber$[ebp]
	push	eax
	mov	ecx, DWORD PTR _gTraceContext
	push	ecx
	call	DWORD PTR _pTraceEntryFunc
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@utrace_ent:
; Line 33
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_utrace_entry_56 ENDP
_TEXT	ENDS
PUBLIC	??_C@_13COJANIEC@?$AA0?$AA?$AA@			; `string'
PUBLIC	??_C@_1FG@ONAEBEAN@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@ ; `string'
PUBLIC	?__LINE__Var@?1??utrace_exit_56@@9@9		; `utrace_exit_56'::`2'::__LINE__Var
PUBLIC	_utrace_exit_56
EXTRN	__imp___wassert:PROC
;	COMDAT ??_C@_13COJANIEC@?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_13COJANIEC@?$AA0?$AA?$AA@ DB '0', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1FG@ONAEBEAN@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@
CONST	SEGMENT
??_C@_1FG@ONAEBEAN@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@ DB 'd'
	DB	00H, ':', 00H, '\', 00H, 'm', 00H, 'o', 00H, 'z', 00H, 'i', 00H
	DB	'l', 00H, 'l', 00H, 'a', 00H, '\', 00H, 'i', 00H, 'n', 00H, 't'
	DB	00H, 'l', 00H, '\', 00H, 'i', 00H, 'c', 00H, 'u', 00H, '\', 00H
	DB	's', 00H, 'o', 00H, 'u', 00H, 'r', 00H, 'c', 00H, 'e', 00H, '\'
	DB	00H, 'c', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'o', 00H, 'n', 00H
	DB	'\', 00H, 'u', 00H, 't', 00H, 'r', 00H, 'a', 00H, 'c', 00H, 'e'
	DB	00H, '.', 00H, 'c', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??utrace_exit_56@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??utrace_exit_56@@9@9 DD 02bH		; `utrace_exit_56'::`2'::__LINE__Var
; Function compile flags: /Odtp /RTCsu /ZI
_DATA	ENDS
;	COMDAT _utrace_exit_56
_TEXT	SEGMENT
tv65 = -220						; size = 4
_fmt$7504 = -20						; size = 4
_args$7503 = -8						; size = 4
_fnNumber$ = 8						; size = 4
_returnType$ = 12					; size = 4
_utrace_exit_56 PROC					; COMDAT
; Line 43
	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 44
	cmp	DWORD PTR _pTraceExitFunc, 0
	je	$LN10@utrace_exi
; Line 48
	mov	eax, DWORD PTR _returnType$[ebp]
	mov	DWORD PTR tv65[ebp], eax
	cmp	DWORD PTR tv65[ebp], 18			; 00000012H
	ja	SHORT $LN1@utrace_exi
	mov	ecx, DWORD PTR tv65[ebp]
	movzx	edx, BYTE PTR $LN13@utrace_exi[ecx]
	jmp	DWORD PTR $LN14@utrace_exi[edx*4]
$LN6@utrace_exi:
; Line 50
	mov	DWORD PTR _fmt$7504[ebp], OFFSET _gExitFmt
; Line 51
	jmp	SHORT $LN7@utrace_exi
$LN5@utrace_exi:
; Line 53
	mov	DWORD PTR _fmt$7504[ebp], OFFSET _gExitFmtValue
; Line 54
	jmp	SHORT $LN7@utrace_exi
$LN4@utrace_exi:
; Line 56
	mov	DWORD PTR _fmt$7504[ebp], OFFSET _gExitFmtStatus
; Line 57
	jmp	SHORT $LN7@utrace_exi
$LN3@utrace_exi:
; Line 59
	mov	DWORD PTR _fmt$7504[ebp], OFFSET _gExitFmtValueStatus
; Line 60
	jmp	SHORT $LN7@utrace_exi
$LN2@utrace_exi:
; Line 62
	mov	DWORD PTR _fmt$7504[ebp], OFFSET _gExitFmtPtrStatus
; Line 63
	jmp	SHORT $LN7@utrace_exi
$LN1@utrace_exi:
; Line 65
	xor	eax, eax
	jne	SHORT $LN12@utrace_exi
	mov	ecx, DWORD PTR ?__LINE__Var@?1??utrace_exit_56@@9@9
	add	ecx, 22					; 00000016H
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_1FG@ONAEBEAN@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@
	push	OFFSET ??_C@_13COJANIEC@?$AA0?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN12@utrace_exi:
; Line 66
	mov	DWORD PTR _fmt$7504[ebp], OFFSET _gExitFmt
$LN7@utrace_exi:
; Line 69
	lea	eax, DWORD PTR _returnType$[ebp+4]
	mov	DWORD PTR _args$7503[ebp], eax
; Line 70
	mov	esi, esp
	mov	eax, DWORD PTR _args$7503[ebp]
	push	eax
	mov	ecx, DWORD PTR _fmt$7504[ebp]
	push	ecx
	mov	edx, DWORD PTR _fnNumber$[ebp]
	push	edx
	mov	eax, DWORD PTR _gTraceContext
	push	eax
	call	DWORD PTR _pTraceExitFunc
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 71
	mov	DWORD PTR _args$7503[ebp], 0
$LN10@utrace_exi:
; Line 73
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN14@utrace_exi:
	DD	$LN6@utrace_exi
	DD	$LN5@utrace_exi
	DD	$LN4@utrace_exi
	DD	$LN3@utrace_exi
	DD	$LN2@utrace_exi
	DD	$LN1@utrace_exi
$LN13@utrace_exi:
	DB	0
	DB	1
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	2
	DB	3
	DB	4
_utrace_exit_56 ENDP
_TEXT	ENDS
PUBLIC	_utrace_data_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _utrace_data_56
_TEXT	SEGMENT
_args$7533 = -8						; size = 4
_fnNumber$ = 8						; size = 4
_level$ = 12						; size = 4
_fmt$ = 16						; size = 4
_utrace_data_56 PROC					; COMDAT
; Line 78
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 79
	cmp	DWORD PTR _pTraceDataFunc, 0
	je	SHORT $LN2@utrace_dat
; Line 81
	lea	eax, DWORD PTR _fmt$[ebp+4]
	mov	DWORD PTR _args$7533[ebp], eax
; Line 82
	mov	esi, esp
	mov	eax, DWORD PTR _args$7533[ebp]
	push	eax
	mov	ecx, DWORD PTR _fmt$[ebp]
	push	ecx
	mov	edx, DWORD PTR _level$[ebp]
	push	edx
	mov	eax, DWORD PTR _fnNumber$[ebp]
	push	eax
	mov	ecx, DWORD PTR _gTraceContext
	push	ecx
	call	DWORD PTR _pTraceDataFunc
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 83
	mov	DWORD PTR _args$7533[ebp], 0
$LN2@utrace_dat:
; Line 85
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_utrace_data_56 ENDP
_TEXT	ENDS
PUBLIC	??_C@_07FGIDHMDB@?$CKNULL?$CK?5?$AA@		; `string'
PUBLIC	_utrace_vformat_56
EXTRN	@_RTC_CheckStackVars@8:PROC
;	COMDAT ??_C@_07FGIDHMDB@?$CKNULL?$CK?5?$AA@
CONST	SEGMENT
??_C@_07FGIDHMDB@?$CKNULL?$CK?5?$AA@ DB '*NULL* ', 00H	; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT _utrace_vformat_56
_TEXT	SEGMENT
tv196 = -392						; size = 4
tv78 = -392						; size = 4
_i$7754 = -192						; size = 4
_charsToOutput$7753 = -180				; size = 4
_ptrPtr$7752 = -168					; size = 4
_i64Ptr$7751 = -156					; size = 4
_i32Ptr$7750 = -144					; size = 4
_i16Ptr$7749 = -132					; size = 4
_i8Ptr$7748 = -120					; size = 4
_vectorLen$7747 = -108					; size = 4
_vectorType$7746 = -93					; size = 1
_ptrArg$ = -84						; size = 4
_longArg$ = -72						; size = 8
_intArg$ = -56						; size = 4
_c$ = -41						; size = 1
_fmtC$ = -29						; size = 1
_fmtIx$ = -20						; size = 4
_outIx$ = -8						; size = 4
_outBuf$ = 8						; size = 4
_capacity$ = 12						; size = 4
_indent$ = 16						; size = 4
_fmt$ = 20						; size = 4
_args$ = 24						; size = 4
_utrace_vformat_56 PROC					; COMDAT
; Line 187
	push	ebp
	mov	ebp, esp
	sub	esp, 392				; 00000188H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-392]
	mov	ecx, 98					; 00000062H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 188
	mov	DWORD PTR _outIx$[ebp], 0
; Line 189
	mov	DWORD PTR _fmtIx$[ebp], 0
; Line 193
	mov	DWORD PTR _longArg$[ebp], 0
	mov	DWORD PTR _longArg$[ebp+4], 0
$LN36@utrace_vfo:
; Line 199
	mov	eax, DWORD PTR _fmt$[ebp]
	add	eax, DWORD PTR _fmtIx$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _fmtC$[ebp], cl
	mov	edx, DWORD PTR _fmtIx$[ebp]
	add	edx, 1
	mov	DWORD PTR _fmtIx$[ebp], edx
; Line 200
	movsx	eax, BYTE PTR _fmtC$[ebp]
	cmp	eax, 37					; 00000025H
	je	SHORT $LN34@utrace_vfo
; Line 202
	mov	eax, DWORD PTR _indent$[ebp]
	push	eax
	mov	ecx, DWORD PTR _capacity$[ebp]
	push	ecx
	lea	edx, DWORD PTR _outIx$[ebp]
	push	edx
	mov	eax, DWORD PTR _outBuf$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _fmtC$[ebp]
	push	ecx
	call	_outputChar
	add	esp, 20					; 00000014H
; Line 203
	movsx	eax, BYTE PTR _fmtC$[ebp]
	test	eax, eax
	jne	SHORT $LN33@utrace_vfo
; Line 208
	jmp	$LN35@utrace_vfo
$LN33@utrace_vfo:
; Line 210
	jmp	SHORT $LN36@utrace_vfo
$LN34@utrace_vfo:
; Line 214
	mov	eax, DWORD PTR _fmt$[ebp]
	add	eax, DWORD PTR _fmtIx$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _fmtC$[ebp], cl
	mov	edx, DWORD PTR _fmtIx$[ebp]
	add	edx, 1
	mov	DWORD PTR _fmtIx$[ebp], edx
; Line 216
	movsx	eax, BYTE PTR _fmtC$[ebp]
	mov	DWORD PTR tv78[ebp], eax
	cmp	DWORD PTR tv78[ebp], 118		; 00000076H
	ja	$LN1@utrace_vfo
	mov	ecx, DWORD PTR tv78[ebp]
	movzx	edx, BYTE PTR $LN40@utrace_vfo[ecx]
	jmp	DWORD PTR $LN45@utrace_vfo[edx*4]
$LN30@utrace_vfo:
; Line 219
	mov	eax, DWORD PTR _args$[ebp]
	add	eax, 4
	mov	DWORD PTR _args$[ebp], eax
	mov	ecx, DWORD PTR _args$[ebp]
	mov	dl, BYTE PTR [ecx-4]
	mov	BYTE PTR _c$[ebp], dl
; Line 220
	mov	eax, DWORD PTR _indent$[ebp]
	push	eax
	mov	ecx, DWORD PTR _capacity$[ebp]
	push	ecx
	lea	edx, DWORD PTR _outIx$[ebp]
	push	edx
	mov	eax, DWORD PTR _outBuf$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	_outputChar
	add	esp, 20					; 00000014H
; Line 221
	jmp	$LN31@utrace_vfo
$LN29@utrace_vfo:
; Line 225
	mov	eax, DWORD PTR _args$[ebp]
	add	eax, 4
	mov	DWORD PTR _args$[ebp], eax
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	mov	DWORD PTR _ptrArg$[ebp], edx
; Line 226
	mov	eax, DWORD PTR _indent$[ebp]
	push	eax
	mov	ecx, DWORD PTR _capacity$[ebp]
	push	ecx
	lea	edx, DWORD PTR _outIx$[ebp]
	push	edx
	mov	eax, DWORD PTR _outBuf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ptrArg$[ebp]
	push	ecx
	call	_outputString
	add	esp, 20					; 00000014H
; Line 227
	jmp	$LN31@utrace_vfo
$LN28@utrace_vfo:
; Line 231
	mov	eax, DWORD PTR _args$[ebp]
	add	eax, 4
	mov	DWORD PTR _args$[ebp], eax
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	mov	DWORD PTR _ptrArg$[ebp], edx
; Line 232
	mov	eax, DWORD PTR _args$[ebp]
	add	eax, 4
	mov	DWORD PTR _args$[ebp], eax
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	mov	DWORD PTR _intArg$[ebp], edx
; Line 233
	mov	eax, DWORD PTR _indent$[ebp]
	push	eax
	mov	ecx, DWORD PTR _capacity$[ebp]
	push	ecx
	lea	edx, DWORD PTR _outIx$[ebp]
	push	edx
	mov	eax, DWORD PTR _outBuf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _intArg$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ptrArg$[ebp]
	push	edx
	call	_outputUString
	add	esp, 24					; 00000018H
; Line 234
	jmp	$LN31@utrace_vfo
$LN27@utrace_vfo:
; Line 238
	mov	eax, DWORD PTR _args$[ebp]
	add	eax, 4
	mov	DWORD PTR _args$[ebp], eax
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	mov	DWORD PTR _intArg$[ebp], edx
; Line 239
	mov	eax, DWORD PTR _capacity$[ebp]
	push	eax
	lea	ecx, DWORD PTR _outIx$[ebp]
	push	ecx
	mov	edx, DWORD PTR _outBuf$[ebp]
	push	edx
	push	2
	mov	eax, DWORD PTR _intArg$[ebp]
	cdq
	push	edx
	push	eax
	call	_outputHexBytes
	add	esp, 24					; 00000018H
; Line 240
	jmp	$LN31@utrace_vfo
$LN26@utrace_vfo:
; Line 244
	mov	eax, DWORD PTR _args$[ebp]
	add	eax, 4
	mov	DWORD PTR _args$[ebp], eax
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	mov	DWORD PTR _intArg$[ebp], edx
; Line 245
	mov	eax, DWORD PTR _capacity$[ebp]
	push	eax
	lea	ecx, DWORD PTR _outIx$[ebp]
	push	ecx
	mov	edx, DWORD PTR _outBuf$[ebp]
	push	edx
	push	4
	mov	eax, DWORD PTR _intArg$[ebp]
	cdq
	push	edx
	push	eax
	call	_outputHexBytes
	add	esp, 24					; 00000018H
; Line 246
	jmp	$LN31@utrace_vfo
$LN25@utrace_vfo:
; Line 250
	mov	eax, DWORD PTR _args$[ebp]
	add	eax, 4
	mov	DWORD PTR _args$[ebp], eax
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	mov	DWORD PTR _intArg$[ebp], edx
; Line 251
	mov	eax, DWORD PTR _capacity$[ebp]
	push	eax
	lea	ecx, DWORD PTR _outIx$[ebp]
	push	ecx
	mov	edx, DWORD PTR _outBuf$[ebp]
	push	edx
	push	8
	mov	eax, DWORD PTR _intArg$[ebp]
	cdq
	push	edx
	push	eax
	call	_outputHexBytes
	add	esp, 24					; 00000018H
; Line 252
	jmp	$LN31@utrace_vfo
$LN24@utrace_vfo:
; Line 256
	mov	eax, DWORD PTR _args$[ebp]
	add	eax, 8
	mov	DWORD PTR _args$[ebp], eax
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx-8]
	mov	DWORD PTR _longArg$[ebp], edx
	mov	eax, DWORD PTR [ecx-4]
	mov	DWORD PTR _longArg$[ebp+4], eax
; Line 257
	mov	eax, DWORD PTR _capacity$[ebp]
	push	eax
	lea	ecx, DWORD PTR _outIx$[ebp]
	push	ecx
	mov	edx, DWORD PTR _outBuf$[ebp]
	push	edx
	push	16					; 00000010H
	mov	eax, DWORD PTR _longArg$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _longArg$[ebp]
	push	ecx
	call	_outputHexBytes
	add	esp, 24					; 00000018H
; Line 258
	jmp	$LN31@utrace_vfo
$LN23@utrace_vfo:
; Line 262
	mov	eax, DWORD PTR _args$[ebp]
	add	eax, 4
	mov	DWORD PTR _args$[ebp], eax
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	mov	DWORD PTR _ptrArg$[ebp], edx
; Line 263
	mov	eax, DWORD PTR _capacity$[ebp]
	push	eax
	lea	ecx, DWORD PTR _outIx$[ebp]
	push	ecx
	mov	edx, DWORD PTR _outBuf$[ebp]
	push	edx
	mov	eax, DWORD PTR _ptrArg$[ebp]
	push	eax
	call	_outputPtrBytes
	add	esp, 16					; 00000010H
; Line 264
	jmp	$LN31@utrace_vfo
$LN22@utrace_vfo:
; Line 271
	mov	eax, DWORD PTR _indent$[ebp]
	push	eax
	mov	ecx, DWORD PTR _capacity$[ebp]
	push	ecx
	lea	edx, DWORD PTR _outIx$[ebp]
	push	edx
	mov	eax, DWORD PTR _outBuf$[ebp]
	push	eax
	push	37					; 00000025H
	call	_outputChar
	add	esp, 20					; 00000014H
; Line 272
	mov	eax, DWORD PTR _fmtIx$[ebp]
	sub	eax, 1
	mov	DWORD PTR _fmtIx$[ebp], eax
; Line 273
	jmp	$LN31@utrace_vfo
$LN21@utrace_vfo:
; Line 285
	mov	DWORD PTR _charsToOutput$7753[ebp], 0
; Line 288
	mov	eax, DWORD PTR _fmt$[ebp]
	add	eax, DWORD PTR _fmtIx$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _vectorType$7746[ebp], cl
; Line 289
	movsx	eax, BYTE PTR _vectorType$7746[ebp]
	test	eax, eax
	je	SHORT $LN20@utrace_vfo
; Line 290
	mov	eax, DWORD PTR _fmtIx$[ebp]
	add	eax, 1
	mov	DWORD PTR _fmtIx$[ebp], eax
$LN20@utrace_vfo:
; Line 292
	mov	eax, DWORD PTR _args$[ebp]
	add	eax, 4
	mov	DWORD PTR _args$[ebp], eax
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	mov	DWORD PTR _i8Ptr$7748[ebp], edx
; Line 293
	mov	eax, DWORD PTR _i8Ptr$7748[ebp]
	mov	DWORD PTR _i16Ptr$7749[ebp], eax
; Line 294
	mov	eax, DWORD PTR _i8Ptr$7748[ebp]
	mov	DWORD PTR _i32Ptr$7750[ebp], eax
; Line 295
	mov	eax, DWORD PTR _i8Ptr$7748[ebp]
	mov	DWORD PTR _i64Ptr$7751[ebp], eax
; Line 296
	mov	eax, DWORD PTR _i8Ptr$7748[ebp]
	mov	DWORD PTR _ptrPtr$7752[ebp], eax
; Line 297
	mov	eax, DWORD PTR _args$[ebp]
	add	eax, 4
	mov	DWORD PTR _args$[ebp], eax
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	mov	DWORD PTR _vectorLen$7747[ebp], edx
; Line 298
	cmp	DWORD PTR _ptrPtr$7752[ebp], 0
	jne	SHORT $LN19@utrace_vfo
; Line 299
	mov	eax, DWORD PTR _indent$[ebp]
	push	eax
	mov	ecx, DWORD PTR _capacity$[ebp]
	push	ecx
	lea	edx, DWORD PTR _outIx$[ebp]
	push	edx
	mov	eax, DWORD PTR _outBuf$[ebp]
	push	eax
	push	OFFSET ??_C@_07FGIDHMDB@?$CKNULL?$CK?5?$AA@
	call	_outputString
	add	esp, 20					; 00000014H
; Line 300
	jmp	$LN18@utrace_vfo
$LN19@utrace_vfo:
; Line 301
	mov	DWORD PTR _i$7754[ebp], 0
	jmp	SHORT $LN17@utrace_vfo
$LN16@utrace_vfo:
	mov	eax, DWORD PTR _i$7754[ebp]
	add	eax, 1
	mov	DWORD PTR _i$7754[ebp], eax
$LN17@utrace_vfo:
	mov	eax, DWORD PTR _i$7754[ebp]
	cmp	eax, DWORD PTR _vectorLen$7747[ebp]
	jl	SHORT $LN14@utrace_vfo
	cmp	DWORD PTR _vectorLen$7747[ebp], -1
	jne	$LN18@utrace_vfo
$LN14@utrace_vfo:
; Line 302
	movsx	eax, BYTE PTR _vectorType$7746[ebp]
	mov	DWORD PTR tv196[ebp], eax
	mov	ecx, DWORD PTR tv196[ebp]
	sub	ecx, 83					; 00000053H
	mov	DWORD PTR tv196[ebp], ecx
	cmp	DWORD PTR tv196[ebp], 32		; 00000020H
	ja	$LN12@utrace_vfo
	mov	edx, DWORD PTR tv196[ebp]
	movzx	eax, BYTE PTR $LN41@utrace_vfo[edx]
	jmp	DWORD PTR $LN46@utrace_vfo[eax*4]
$LN11@utrace_vfo:
; Line 304
	mov	DWORD PTR _charsToOutput$7753[ebp], 2
; Line 305
	mov	eax, DWORD PTR _i8Ptr$7748[ebp]
	movsx	eax, BYTE PTR [eax]
	cdq
	mov	DWORD PTR _longArg$[ebp], eax
	mov	DWORD PTR _longArg$[ebp+4], edx
	mov	ecx, DWORD PTR _i8Ptr$7748[ebp]
	add	ecx, 1
	mov	DWORD PTR _i8Ptr$7748[ebp], ecx
; Line 306
	jmp	$LN12@utrace_vfo
$LN10@utrace_vfo:
; Line 308
	mov	DWORD PTR _charsToOutput$7753[ebp], 4
; Line 309
	mov	eax, DWORD PTR _i16Ptr$7749[ebp]
	movsx	eax, WORD PTR [eax]
	cdq
	mov	DWORD PTR _longArg$[ebp], eax
	mov	DWORD PTR _longArg$[ebp+4], edx
	mov	ecx, DWORD PTR _i16Ptr$7749[ebp]
	add	ecx, 2
	mov	DWORD PTR _i16Ptr$7749[ebp], ecx
; Line 310
	jmp	$LN12@utrace_vfo
$LN9@utrace_vfo:
; Line 312
	mov	DWORD PTR _charsToOutput$7753[ebp], 8
; Line 313
	mov	eax, DWORD PTR _i32Ptr$7750[ebp]
	mov	eax, DWORD PTR [eax]
	cdq
	mov	DWORD PTR _longArg$[ebp], eax
	mov	DWORD PTR _longArg$[ebp+4], edx
	mov	ecx, DWORD PTR _i32Ptr$7750[ebp]
	add	ecx, 4
	mov	DWORD PTR _i32Ptr$7750[ebp], ecx
; Line 314
	jmp	$LN12@utrace_vfo
$LN8@utrace_vfo:
; Line 316
	mov	DWORD PTR _charsToOutput$7753[ebp], 16	; 00000010H
; Line 317
	mov	eax, DWORD PTR _i64Ptr$7751[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _longArg$[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _longArg$[ebp+4], edx
	mov	eax, DWORD PTR _i64Ptr$7751[ebp]
	add	eax, 8
	mov	DWORD PTR _i64Ptr$7751[ebp], eax
; Line 318
	jmp	$LN12@utrace_vfo
$LN7@utrace_vfo:
; Line 320
	mov	DWORD PTR _charsToOutput$7753[ebp], 0
; Line 321
	mov	eax, DWORD PTR _capacity$[ebp]
	push	eax
	lea	ecx, DWORD PTR _outIx$[ebp]
	push	ecx
	mov	edx, DWORD PTR _outBuf$[ebp]
	push	edx
	mov	eax, DWORD PTR _ptrPtr$7752[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_outputPtrBytes
	add	esp, 16					; 00000010H
; Line 322
	mov	eax, DWORD PTR _ptrPtr$7752[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax], 0
	setne	cl
	mov	eax, ecx
	cdq
	mov	DWORD PTR _longArg$[ebp], eax
	mov	DWORD PTR _longArg$[ebp+4], edx
; Line 323
	mov	eax, DWORD PTR _ptrPtr$7752[ebp]
	add	eax, 4
	mov	DWORD PTR _ptrPtr$7752[ebp], eax
; Line 324
	jmp	$LN12@utrace_vfo
$LN6@utrace_vfo:
; Line 326
	mov	DWORD PTR _charsToOutput$7753[ebp], 0
; Line 327
	mov	eax, DWORD PTR _indent$[ebp]
	push	eax
	mov	ecx, DWORD PTR _capacity$[ebp]
	push	ecx
	lea	edx, DWORD PTR _outIx$[ebp]
	push	edx
	mov	eax, DWORD PTR _outBuf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i8Ptr$7748[ebp]
	movzx	edx, BYTE PTR [ecx]
	push	edx
	call	_outputChar
	add	esp, 20					; 00000014H
; Line 328
	mov	eax, DWORD PTR _i8Ptr$7748[ebp]
	movsx	eax, BYTE PTR [eax]
	cdq
	mov	DWORD PTR _longArg$[ebp], eax
	mov	DWORD PTR _longArg$[ebp+4], edx
; Line 329
	mov	eax, DWORD PTR _i8Ptr$7748[ebp]
	add	eax, 1
	mov	DWORD PTR _i8Ptr$7748[ebp], eax
; Line 330
	jmp	$LN12@utrace_vfo
$LN5@utrace_vfo:
; Line 332
	mov	DWORD PTR _charsToOutput$7753[ebp], 0
; Line 333
	mov	eax, DWORD PTR _indent$[ebp]
	push	eax
	mov	ecx, DWORD PTR _capacity$[ebp]
	push	ecx
	lea	edx, DWORD PTR _outIx$[ebp]
	push	edx
	mov	eax, DWORD PTR _outBuf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ptrPtr$7752[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_outputString
	add	esp, 20					; 00000014H
; Line 334
	mov	eax, DWORD PTR _indent$[ebp]
	push	eax
	mov	ecx, DWORD PTR _capacity$[ebp]
	push	ecx
	lea	edx, DWORD PTR _outIx$[ebp]
	push	edx
	mov	eax, DWORD PTR _outBuf$[ebp]
	push	eax
	push	10					; 0000000aH
	call	_outputChar
	add	esp, 20					; 00000014H
; Line 335
	mov	eax, DWORD PTR _ptrPtr$7752[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax], 0
	setne	cl
	mov	eax, ecx
	cdq
	mov	DWORD PTR _longArg$[ebp], eax
	mov	DWORD PTR _longArg$[ebp+4], edx
; Line 336
	mov	eax, DWORD PTR _ptrPtr$7752[ebp]
	add	eax, 4
	mov	DWORD PTR _ptrPtr$7752[ebp], eax
; Line 337
	jmp	SHORT $LN12@utrace_vfo
$LN4@utrace_vfo:
; Line 340
	mov	DWORD PTR _charsToOutput$7753[ebp], 0
; Line 341
	mov	eax, DWORD PTR _indent$[ebp]
	push	eax
	mov	ecx, DWORD PTR _capacity$[ebp]
	push	ecx
	lea	edx, DWORD PTR _outIx$[ebp]
	push	edx
	mov	eax, DWORD PTR _outBuf$[ebp]
	push	eax
	push	-1
	mov	ecx, DWORD PTR _ptrPtr$7752[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_outputUString
	add	esp, 24					; 00000018H
; Line 342
	mov	eax, DWORD PTR _indent$[ebp]
	push	eax
	mov	ecx, DWORD PTR _capacity$[ebp]
	push	ecx
	lea	edx, DWORD PTR _outIx$[ebp]
	push	edx
	mov	eax, DWORD PTR _outBuf$[ebp]
	push	eax
	push	10					; 0000000aH
	call	_outputChar
	add	esp, 20					; 00000014H
; Line 343
	mov	eax, DWORD PTR _ptrPtr$7752[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax], 0
	setne	cl
	mov	eax, ecx
	cdq
	mov	DWORD PTR _longArg$[ebp], eax
	mov	DWORD PTR _longArg$[ebp+4], edx
; Line 344
	mov	eax, DWORD PTR _ptrPtr$7752[ebp]
	add	eax, 4
	mov	DWORD PTR _ptrPtr$7752[ebp], eax
$LN12@utrace_vfo:
; Line 349
	cmp	DWORD PTR _charsToOutput$7753[ebp], 0
	jle	SHORT $LN3@utrace_vfo
; Line 350
	mov	eax, DWORD PTR _capacity$[ebp]
	push	eax
	lea	ecx, DWORD PTR _outIx$[ebp]
	push	ecx
	mov	edx, DWORD PTR _outBuf$[ebp]
	push	edx
	mov	eax, DWORD PTR _charsToOutput$7753[ebp]
	push	eax
	mov	ecx, DWORD PTR _longArg$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _longArg$[ebp]
	push	edx
	call	_outputHexBytes
	add	esp, 24					; 00000018H
; Line 351
	mov	eax, DWORD PTR _indent$[ebp]
	push	eax
	mov	ecx, DWORD PTR _capacity$[ebp]
	push	ecx
	lea	edx, DWORD PTR _outIx$[ebp]
	push	edx
	mov	eax, DWORD PTR _outBuf$[ebp]
	push	eax
	push	32					; 00000020H
	call	_outputChar
	add	esp, 20					; 00000014H
$LN3@utrace_vfo:
; Line 353
	cmp	DWORD PTR _vectorLen$7747[ebp], -1
	jne	SHORT $LN2@utrace_vfo
	mov	eax, DWORD PTR _longArg$[ebp]
	or	eax, DWORD PTR _longArg$[ebp+4]
	jne	SHORT $LN2@utrace_vfo
; Line 354
	jmp	SHORT $LN18@utrace_vfo
$LN2@utrace_vfo:
; Line 356
	jmp	$LN16@utrace_vfo
$LN18@utrace_vfo:
; Line 358
	mov	eax, DWORD PTR _indent$[ebp]
	push	eax
	mov	ecx, DWORD PTR _capacity$[ebp]
	push	ecx
	lea	edx, DWORD PTR _outIx$[ebp]
	push	edx
	mov	eax, DWORD PTR _outBuf$[ebp]
	push	eax
	push	91					; 0000005bH
	call	_outputChar
	add	esp, 20					; 00000014H
; Line 359
	mov	eax, DWORD PTR _capacity$[ebp]
	push	eax
	lea	ecx, DWORD PTR _outIx$[ebp]
	push	ecx
	mov	edx, DWORD PTR _outBuf$[ebp]
	push	edx
	push	8
	mov	eax, DWORD PTR _vectorLen$7747[ebp]
	cdq
	push	edx
	push	eax
	call	_outputHexBytes
	add	esp, 24					; 00000018H
; Line 360
	mov	eax, DWORD PTR _indent$[ebp]
	push	eax
	mov	ecx, DWORD PTR _capacity$[ebp]
	push	ecx
	lea	edx, DWORD PTR _outIx$[ebp]
	push	edx
	mov	eax, DWORD PTR _outBuf$[ebp]
	push	eax
	push	93					; 0000005dH
	call	_outputChar
	add	esp, 20					; 00000014H
; Line 362
	jmp	SHORT $LN31@utrace_vfo
$LN1@utrace_vfo:
; Line 370
	mov	eax, DWORD PTR _indent$[ebp]
	push	eax
	mov	ecx, DWORD PTR _capacity$[ebp]
	push	ecx
	lea	edx, DWORD PTR _outIx$[ebp]
	push	edx
	mov	eax, DWORD PTR _outBuf$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _fmtC$[ebp]
	push	ecx
	call	_outputChar
	add	esp, 20					; 00000014H
$LN31@utrace_vfo:
; Line 372
	jmp	$LN36@utrace_vfo
$LN35@utrace_vfo:
; Line 373
	mov	eax, DWORD PTR _indent$[ebp]
	push	eax
	mov	ecx, DWORD PTR _capacity$[ebp]
	push	ecx
	lea	edx, DWORD PTR _outIx$[ebp]
	push	edx
	mov	eax, DWORD PTR _outBuf$[ebp]
	push	eax
	push	0
	call	_outputChar
	add	esp, 20					; 00000014H
; Line 374
	mov	eax, DWORD PTR _outIx$[ebp]
	add	eax, 1
; Line 375
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN44@utrace_vfo
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 392				; 00000188H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN44@utrace_vfo:
	DD	1
	DD	$LN43@utrace_vfo
$LN43@utrace_vfo:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN42@utrace_vfo
$LN42@utrace_vfo:
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	73					; 00000049H
	DB	120					; 00000078H
	DB	0
	npad	2
$LN45@utrace_vfo:
	DD	$LN22@utrace_vfo
	DD	$LN28@utrace_vfo
	DD	$LN27@utrace_vfo
	DD	$LN30@utrace_vfo
	DD	$LN25@utrace_vfo
	DD	$LN26@utrace_vfo
	DD	$LN24@utrace_vfo
	DD	$LN23@utrace_vfo
	DD	$LN29@utrace_vfo
	DD	$LN21@utrace_vfo
	DD	$LN1@utrace_vfo
$LN40@utrace_vfo:
	DB	0
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	1
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	2
	DB	3
	DB	4
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	5
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	6
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	7
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	8
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	9
	npad	1
$LN46@utrace_vfo:
	DD	$LN4@utrace_vfo
	DD	$LN11@utrace_vfo
	DD	$LN6@utrace_vfo
	DD	$LN9@utrace_vfo
	DD	$LN10@utrace_vfo
	DD	$LN8@utrace_vfo
	DD	$LN7@utrace_vfo
	DD	$LN5@utrace_vfo
	DD	$LN12@utrace_vfo
$LN41@utrace_vfo:
	DB	0
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	1
	DB	2
	DB	3
	DB	8
	DB	8
	DB	8
	DB	4
	DB	8
	DB	8
	DB	8
	DB	5
	DB	8
	DB	8
	DB	8
	DB	6
	DB	8
	DB	8
	DB	7
_utrace_vformat_56 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _outputChar
_TEXT	SEGMENT
_i$ = -8						; size = 4
_c$ = 8							; size = 1
_outBuf$ = 12						; size = 4
_outIx$ = 16						; size = 4
_capacity$ = 20						; size = 4
_indent$ = 24						; size = 4
_outputChar PROC					; COMDAT
; Line 88
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 101
	mov	eax, DWORD PTR _outIx$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN8@outputChar
	movsx	eax, BYTE PTR _c$[ebp]
	cmp	eax, 10					; 0000000aH
	je	SHORT $LN7@outputChar
	movsx	eax, BYTE PTR _c$[ebp]
	test	eax, eax
	je	SHORT $LN7@outputChar
	mov	eax, DWORD PTR _outIx$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR _capacity$[ebp]
	jge	SHORT $LN7@outputChar
	mov	eax, DWORD PTR _outIx$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _outBuf$[ebp]
	movsx	eax, BYTE PTR [edx+ecx-1]
	cmp	eax, 10					; 0000000aH
	je	SHORT $LN8@outputChar
$LN7@outputChar:
	movsx	eax, BYTE PTR _c$[ebp]
	cmp	eax, 10					; 0000000aH
	jne	SHORT $LN9@outputChar
	mov	eax, DWORD PTR _outIx$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR _capacity$[ebp]
	jl	SHORT $LN9@outputChar
$LN8@outputChar:
; Line 104
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN6@outputChar
$LN5@outputChar:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN6@outputChar:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _indent$[ebp]
	jge	SHORT $LN9@outputChar
; Line 105
	mov	eax, DWORD PTR _outIx$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR _capacity$[ebp]
	jge	SHORT $LN3@outputChar
; Line 106
	mov	eax, DWORD PTR _outIx$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _outBuf$[ebp]
	mov	BYTE PTR [edx+ecx], 32			; 00000020H
$LN3@outputChar:
; Line 108
	mov	eax, DWORD PTR _outIx$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _outIx$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 109
	jmp	SHORT $LN5@outputChar
$LN9@outputChar:
; Line 112
	mov	eax, DWORD PTR _outIx$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR _capacity$[ebp]
	jge	SHORT $LN2@outputChar
; Line 113
	mov	eax, DWORD PTR _outIx$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _outBuf$[ebp]
	mov	al, BYTE PTR _c$[ebp]
	mov	BYTE PTR [edx+ecx], al
$LN2@outputChar:
; Line 115
	movsx	eax, BYTE PTR _c$[ebp]
	test	eax, eax
	je	SHORT $LN10@outputChar
; Line 119
	mov	eax, DWORD PTR _outIx$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _outIx$[ebp]
	mov	DWORD PTR [edx], ecx
$LN10@outputChar:
; Line 121
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_outputChar ENDP
_TEXT	ENDS
EXTRN	__allshr:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _outputHexBytes
_TEXT	SEGMENT
_c$7578 = -17						; size = 1
_shiftCount$ = -8					; size = 4
_val$ = 8						; size = 8
_charsToOutput$ = 16					; size = 4
_outBuf$ = 20						; size = 4
_outIx$ = 24						; size = 4
_capacity$ = 28						; size = 4
_outputHexBytes PROC					; COMDAT
; Line 124
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 127
	mov	eax, DWORD PTR _charsToOutput$[ebp]
	lea	ecx, DWORD PTR [eax*4-4]
	mov	DWORD PTR _shiftCount$[ebp], ecx
	jmp	SHORT $LN3@outputHexB
$LN2@outputHexB:
	mov	eax, DWORD PTR _shiftCount$[ebp]
	sub	eax, 4
	mov	DWORD PTR _shiftCount$[ebp], eax
$LN3@outputHexB:
	cmp	DWORD PTR _shiftCount$[ebp], 0
	jl	SHORT $LN4@outputHexB
; Line 128
	mov	eax, DWORD PTR _val$[ebp]
	mov	edx, DWORD PTR _val$[ebp+4]
	mov	ecx, DWORD PTR _shiftCount$[ebp]
	call	__allshr
	and	eax, 15					; 0000000fH
	and	edx, 0
	mov	al, BYTE PTR ?gHexChars@?1??outputHexBytes@@9@9[eax]
	mov	BYTE PTR _c$7578[ebp], al
; Line 129
	push	0
	mov	eax, DWORD PTR _capacity$[ebp]
	push	eax
	mov	ecx, DWORD PTR _outIx$[ebp]
	push	ecx
	mov	edx, DWORD PTR _outBuf$[ebp]
	push	edx
	movzx	eax, BYTE PTR _c$7578[ebp]
	push	eax
	call	_outputChar
	add	esp, 20					; 00000014H
; Line 130
	jmp	SHORT $LN2@outputHexB
$LN4@outputHexB:
; Line 131
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_outputHexBytes ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _outputPtrBytes
_TEXT	SEGMENT
_p$ = -32						; size = 4
_incVal$ = -20						; size = 4
_i$ = -8						; size = 4
_val$ = 8						; size = 4
_outBuf$ = 12						; size = 4
_outIx$ = 16						; size = 4
_capacity$ = 20						; size = 4
_outputPtrBytes PROC					; COMDAT
; Line 134
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 136
	mov	DWORD PTR _incVal$[ebp], 1
; Line 137
	lea	eax, DWORD PTR _val$[ebp]
	mov	DWORD PTR _p$[ebp], eax
; Line 141
	mov	DWORD PTR _incVal$[ebp], -1
; Line 142
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 3
	mov	DWORD PTR _p$[ebp], eax
; Line 147
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@outputPtrB
$LN2@outputPtrB:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@outputPtrB:
	cmp	DWORD PTR _i$[ebp], 4
	jae	SHORT $LN4@outputPtrB
; Line 148
	mov	eax, DWORD PTR _capacity$[ebp]
	push	eax
	mov	ecx, DWORD PTR _outIx$[ebp]
	push	ecx
	mov	edx, DWORD PTR _outBuf$[ebp]
	push	edx
	push	2
	mov	eax, DWORD PTR _p$[ebp]
	movsx	eax, BYTE PTR [eax]
	cdq
	push	edx
	push	eax
	call	_outputHexBytes
	add	esp, 24					; 00000018H
; Line 149
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, DWORD PTR _incVal$[ebp]
	mov	DWORD PTR _p$[ebp], eax
; Line 150
	jmp	SHORT $LN2@outputPtrB
$LN4@outputPtrB:
; Line 151
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_outputPtrBytes ENDP
_TEXT	ENDS
PUBLIC	??_C@_06LNGDCPN@?$CKNULL?$CK?$AA@		; `string'
;	COMDAT ??_C@_06LNGDCPN@?$CKNULL?$CK?$AA@
CONST	SEGMENT
??_C@_06LNGDCPN@?$CKNULL?$CK?$AA@ DB '*NULL*', 00H	; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT _outputString
_TEXT	SEGMENT
_c$ = -17						; size = 1
_i$ = -8						; size = 4
_s$ = 8							; size = 4
_outBuf$ = 12						; size = 4
_outIx$ = 16						; size = 4
_capacity$ = 20						; size = 4
_indent$ = 24						; size = 4
_outputString PROC					; COMDAT
; Line 153
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 154
	mov	DWORD PTR _i$[ebp], 0
; Line 156
	cmp	DWORD PTR _s$[ebp], 0
	jne	SHORT $LN3@outputStri
; Line 157
	mov	DWORD PTR _s$[ebp], OFFSET ??_C@_06LNGDCPN@?$CKNULL?$CK?$AA@
$LN3@outputStri:
; Line 160
	mov	eax, DWORD PTR _s$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _c$[ebp], cl
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
; Line 161
	mov	eax, DWORD PTR _indent$[ebp]
	push	eax
	mov	ecx, DWORD PTR _capacity$[ebp]
	push	ecx
	mov	edx, DWORD PTR _outIx$[ebp]
	push	edx
	mov	eax, DWORD PTR _outBuf$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	_outputChar
	add	esp, 20					; 00000014H
; Line 162
	movsx	eax, BYTE PTR _c$[ebp]
	test	eax, eax
	jne	SHORT $LN3@outputStri
; Line 163
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_outputString ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _outputUString
_TEXT	SEGMENT
_c$ = -20						; size = 2
_i$ = -8						; size = 4
_s$ = 8							; size = 4
_len$ = 12						; size = 4
_outBuf$ = 16						; size = 4
_outIx$ = 20						; size = 4
_capacity$ = 24						; size = 4
_indent$ = 28						; size = 4
_outputUString PROC					; COMDAT
; Line 168
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 169
	mov	DWORD PTR _i$[ebp], 0
; Line 171
	cmp	DWORD PTR _s$[ebp], 0
	jne	SHORT $LN6@outputUStr
; Line 172
	mov	eax, DWORD PTR _indent$[ebp]
	push	eax
	mov	ecx, DWORD PTR _capacity$[ebp]
	push	ecx
	mov	edx, DWORD PTR _outIx$[ebp]
	push	edx
	mov	eax, DWORD PTR _outBuf$[ebp]
	push	eax
	push	0
	call	_outputString
	add	esp, 20					; 00000014H
; Line 173
	jmp	SHORT $LN7@outputUStr
$LN6@outputUStr:
; Line 176
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN5@outputUStr
$LN4@outputUStr:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN5@outputUStr:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _len$[ebp]
	jl	SHORT $LN2@outputUStr
	cmp	DWORD PTR _len$[ebp], -1
	jne	SHORT $LN7@outputUStr
$LN2@outputUStr:
; Line 177
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	dx, WORD PTR [ecx+eax*2]
	mov	WORD PTR _c$[ebp], dx
; Line 178
	mov	eax, DWORD PTR _capacity$[ebp]
	push	eax
	mov	ecx, DWORD PTR _outIx$[ebp]
	push	ecx
	mov	edx, DWORD PTR _outBuf$[ebp]
	push	edx
	push	4
	movzx	eax, WORD PTR _c$[ebp]
	cdq
	push	edx
	push	eax
	call	_outputHexBytes
	add	esp, 24					; 00000018H
; Line 179
	mov	eax, DWORD PTR _indent$[ebp]
	push	eax
	mov	ecx, DWORD PTR _capacity$[ebp]
	push	ecx
	mov	edx, DWORD PTR _outIx$[ebp]
	push	edx
	mov	eax, DWORD PTR _outBuf$[ebp]
	push	eax
	push	32					; 00000020H
	call	_outputChar
	add	esp, 20					; 00000014H
; Line 180
	cmp	DWORD PTR _len$[ebp], -1
	jne	SHORT $LN1@outputUStr
	movzx	eax, WORD PTR _c$[ebp]
	test	eax, eax
	jne	SHORT $LN1@outputUStr
; Line 181
	jmp	SHORT $LN7@outputUStr
$LN1@outputUStr:
; Line 183
	jmp	SHORT $LN4@outputUStr
$LN7@outputUStr:
; Line 184
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_outputUString ENDP
_TEXT	ENDS
PUBLIC	_utrace_format_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _utrace_format_56
_TEXT	SEGMENT
_args$ = -20						; size = 4
_retVal$ = -8						; size = 4
_outBuf$ = 8						; size = 4
_capacity$ = 12						; size = 4
_indent$ = 16						; size = 4
_fmt$ = 20						; size = 4
_utrace_format_56 PROC					; COMDAT
; Line 382
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 385
	lea	eax, DWORD PTR _fmt$[ebp+4]
	mov	DWORD PTR _args$[ebp], eax
; Line 386
	mov	eax, DWORD PTR _args$[ebp]
	push	eax
	mov	ecx, DWORD PTR _fmt$[ebp]
	push	ecx
	mov	edx, DWORD PTR _indent$[ebp]
	push	edx
	mov	eax, DWORD PTR _capacity$[ebp]
	push	eax
	mov	ecx, DWORD PTR _outBuf$[ebp]
	push	ecx
	call	_utrace_vformat_56
	add	esp, 20					; 00000014H
	mov	DWORD PTR _retVal$[ebp], eax
; Line 387
	mov	DWORD PTR _args$[ebp], 0
; Line 388
	mov	eax, DWORD PTR _retVal$[ebp]
; Line 389
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_utrace_format_56 ENDP
_TEXT	ENDS
PUBLIC	_utrace_setFunctions_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _utrace_setFunctions_56
_TEXT	SEGMENT
_context$ = 8						; size = 4
_e$ = 12						; size = 4
_x$ = 16						; size = 4
_d$ = 20						; size = 4
_utrace_setFunctions_56 PROC				; COMDAT
; Line 394
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 395
	mov	eax, DWORD PTR _e$[ebp]
	mov	DWORD PTR _pTraceEntryFunc, eax
; Line 396
	mov	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR _pTraceExitFunc, eax
; Line 397
	mov	eax, DWORD PTR _d$[ebp]
	mov	DWORD PTR _pTraceDataFunc, eax
; Line 398
	mov	eax, DWORD PTR _context$[ebp]
	mov	DWORD PTR _gTraceContext, eax
; Line 399
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_utrace_setFunctions_56 ENDP
_TEXT	ENDS
PUBLIC	_utrace_getFunctions_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _utrace_getFunctions_56
_TEXT	SEGMENT
_context$ = 8						; size = 4
_e$ = 12						; size = 4
_x$ = 16						; size = 4
_d$ = 20						; size = 4
_utrace_getFunctions_56 PROC				; COMDAT
; Line 404
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 405
	mov	eax, DWORD PTR _e$[ebp]
	mov	ecx, DWORD PTR _pTraceEntryFunc
	mov	DWORD PTR [eax], ecx
; Line 406
	mov	eax, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR _pTraceExitFunc
	mov	DWORD PTR [eax], ecx
; Line 407
	mov	eax, DWORD PTR _d$[ebp]
	mov	ecx, DWORD PTR _pTraceDataFunc
	mov	DWORD PTR [eax], ecx
; Line 408
	mov	eax, DWORD PTR _context$[ebp]
	mov	ecx, DWORD PTR _gTraceContext
	mov	DWORD PTR [eax], ecx
; Line 409
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_utrace_getFunctions_56 ENDP
_TEXT	ENDS
PUBLIC	_utrace_setLevel_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _utrace_setLevel_56
_TEXT	SEGMENT
_level$ = 8						; size = 4
_utrace_setLevel_56 PROC				; COMDAT
; Line 412
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 413
	cmp	DWORD PTR _level$[ebp], -1
	jge	SHORT $LN2@utrace_set
; Line 414
	mov	DWORD PTR _level$[ebp], -1
$LN2@utrace_set:
; Line 416
	cmp	DWORD PTR _level$[ebp], 9
	jle	SHORT $LN1@utrace_set
; Line 417
	mov	DWORD PTR _level$[ebp], 9
$LN1@utrace_set:
; Line 419
	mov	eax, DWORD PTR _level$[ebp]
	mov	DWORD PTR _utrace_level_56, eax
; Line 420
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_utrace_setLevel_56 ENDP
_TEXT	ENDS
PUBLIC	_utrace_getLevel_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _utrace_getLevel_56
_TEXT	SEGMENT
_utrace_getLevel_56 PROC				; COMDAT
; Line 423
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 424
	mov	eax, DWORD PTR _utrace_level_56
; Line 425
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_utrace_getLevel_56 ENDP
_TEXT	ENDS
PUBLIC	_utrace_cleanup_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _utrace_cleanup_56
_TEXT	SEGMENT
_utrace_cleanup_56 PROC					; COMDAT
; Line 429
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 430
	mov	DWORD PTR _pTraceEntryFunc, 0
; Line 431
	mov	DWORD PTR _pTraceExitFunc, 0
; Line 432
	mov	DWORD PTR _pTraceDataFunc, 0
; Line 433
	mov	DWORD PTR _utrace_level_56, -1
; Line 434
	mov	DWORD PTR _gTraceContext, 0
; Line 435
	mov	al, 1
; Line 436
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_utrace_cleanup_56 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BO@LBCCFANB@?$FLBOGUS?5Trace?5Function?5Number?$FN?$AA@ ; `string'
PUBLIC	_utrace_functionName_56
;	COMDAT ??_C@_0BO@LBCCFANB@?$FLBOGUS?5Trace?5Function?5Number?$FN?$AA@
CONST	SEGMENT
??_C@_0BO@LBCCFANB@?$FLBOGUS?5Trace?5Function?5Number?$FN?$AA@ DB '[BOGUS'
	DB	' Trace Function Number]', 00H		; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT _utrace_functionName_56
_TEXT	SEGMENT
_fnNumber$ = 8						; size = 4
_utrace_functionName_56 PROC				; COMDAT
; Line 477
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 478
	cmp	DWORD PTR _fnNumber$[ebp], 0
	jl	SHORT $LN6@utrace_fun
	cmp	DWORD PTR _fnNumber$[ebp], 2
	jge	SHORT $LN6@utrace_fun
; Line 479
	mov	eax, DWORD PTR _fnNumber$[ebp]
	mov	eax, DWORD PTR _trFnName[eax*4]
	jmp	SHORT $LN7@utrace_fun
	jmp	SHORT $LN7@utrace_fun
$LN6@utrace_fun:
; Line 480
	cmp	DWORD PTR _fnNumber$[ebp], 4096		; 00001000H
	jl	SHORT $LN4@utrace_fun
	cmp	DWORD PTR _fnNumber$[ebp], 4104		; 00001008H
	jge	SHORT $LN4@utrace_fun
; Line 481
	mov	eax, DWORD PTR _fnNumber$[ebp]
	mov	eax, DWORD PTR _trConvNames[eax*4-16384]
	jmp	SHORT $LN7@utrace_fun
	jmp	SHORT $LN7@utrace_fun
$LN4@utrace_fun:
; Line 482
	cmp	DWORD PTR _fnNumber$[ebp], 8192		; 00002000H
	jl	SHORT $LN2@utrace_fun
	cmp	DWORD PTR _fnNumber$[ebp], 8201		; 00002009H
	jge	SHORT $LN2@utrace_fun
; Line 483
	mov	eax, DWORD PTR _fnNumber$[ebp]
	mov	eax, DWORD PTR _trCollNames[eax*4-32768]
	jmp	SHORT $LN7@utrace_fun
; Line 484
	jmp	SHORT $LN7@utrace_fun
$LN2@utrace_fun:
; Line 485
	mov	eax, OFFSET ??_C@_0BO@LBCCFANB@?$FLBOGUS?5Trace?5Function?5Number?$FN?$AA@
$LN7@utrace_fun:
; Line 487
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_utrace_functionName_56 ENDP
_TEXT	ENDS
END
