; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\mozilla\intl\icu\source\common\utext.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?value@?$integral_constant@_N$0A@@tr1@std@@2_NB	; std::tr1::integral_constant<bool,0>::value
PUBLIC	?value@?$integral_constant@_N$00@tr1@std@@2_NB	; std::tr1::integral_constant<bool,1>::value
PUBLIC	?value@?$integral_constant@I$0A@@tr1@std@@2IB	; std::tr1::integral_constant<unsigned int,0>::value
PUBLIC	?_Rank@?$_Arithmetic_traits@_N@std@@2HB		; std::_Arithmetic_traits<bool>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@D@std@@2HB		; std::_Arithmetic_traits<char>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@C@std@@2HB		; std::_Arithmetic_traits<signed char>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@E@std@@2HB		; std::_Arithmetic_traits<unsigned char>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@F@std@@2HB		; std::_Arithmetic_traits<short>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@G@std@@2HB		; std::_Arithmetic_traits<unsigned short>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@H@std@@2HB		; std::_Arithmetic_traits<int>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@I@std@@2HB		; std::_Arithmetic_traits<unsigned int>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@J@std@@2HB		; std::_Arithmetic_traits<long>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@K@std@@2HB		; std::_Arithmetic_traits<unsigned long>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@_J@std@@2HB		; std::_Arithmetic_traits<__int64>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@_K@std@@2HB		; std::_Arithmetic_traits<unsigned __int64>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@M@std@@2HB		; std::_Arithmetic_traits<float>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@N@std@@2HB		; std::_Arithmetic_traits<double>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@O@std@@2HB		; std::_Arithmetic_traits<long double>::_Rank
PUBLIC	?collate@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::collate
PUBLIC	?ctype@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::ctype
PUBLIC	?monetary@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::monetary
PUBLIC	?numeric@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::numeric
PUBLIC	?time@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::time
PUBLIC	?messages@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::messages
PUBLIC	?all@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::all
PUBLIC	?none@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::none
PUBLIC	?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::skipws
PUBLIC	?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::unitbuf
PUBLIC	?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::uppercase
PUBLIC	?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showbase
PUBLIC	?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpoint
PUBLIC	?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpos
PUBLIC	?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::left
PUBLIC	?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::right
PUBLIC	?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::internal
PUBLIC	?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::dec
PUBLIC	?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::oct
PUBLIC	?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::hex
PUBLIC	?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::scientific
PUBLIC	?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::fixed
PUBLIC	?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::hexfloat
PUBLIC	?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::boolalpha
PUBLIC	?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::_Stdio
PUBLIC	?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::adjustfield
PUBLIC	?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::basefield
PUBLIC	?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::floatfield
PUBLIC	?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::goodbit
PUBLIC	?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::eofbit
PUBLIC	?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::failbit
PUBLIC	?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::badbit
PUBLIC	?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::_Hardfail
PUBLIC	?in@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::in
PUBLIC	?out@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::out
PUBLIC	?ate@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::ate
PUBLIC	?app@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::app
PUBLIC	?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::trunc
PUBLIC	?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Nocreate
PUBLIC	?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Noreplace
PUBLIC	?binary@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::binary
PUBLIC	?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::beg
PUBLIC	?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::cur
PUBLIC	?end@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::end
CONST	SEGMENT
_emptyText DD	0345ad82cH
	DD	00H
	DD	00H
	DD	070H
	DQ	0000000000000000H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DD	00H
	DD	00H
_utf8Funcs DD	040H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:_utf8TextClone
	DD	FLAT:_utf8TextLength
	DD	FLAT:_utf8TextAccess
	DD	FLAT:_utf8TextExtract
	DD	00H
	DD	00H
	DD	FLAT:_utf8TextMapOffsetToNative
	DD	FLAT:_utf8TextMapIndexToUTF16
	DD	FLAT:_utf8TextClose
	DD	00H
	DD	00H
	DD	00H
_gEmptyString DB 00H
	ORG $+7
_repFuncs DD	040H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:_repTextClone
	DD	FLAT:_repTextLength
	DD	FLAT:_repTextAccess
	DD	FLAT:_repTextExtract
	DD	FLAT:_repTextReplace
	DD	FLAT:_repTextCopy
	DD	00H
	DD	00H
	DD	FLAT:_repTextClose
	DD	00H
	DD	00H
	DD	00H
_unistrFuncs DD	040H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:_unistrTextClone
	DD	FLAT:_unistrTextLength
	DD	FLAT:_unistrTextAccess
	DD	FLAT:_unistrTextExtract
	DD	FLAT:_unistrTextReplace
	DD	FLAT:_unistrTextCopy
	DD	00H
	DD	00H
	DD	FLAT:_unistrTextClose
	DD	00H
	DD	00H
	DD	00H
_ucstrFuncs DD	040H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:_ucstrTextClone
	DD	FLAT:_ucstrTextLength
	DD	FLAT:_ucstrTextAccess
	DD	FLAT:_ucstrTextExtract
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:_ucstrTextClose
	DD	00H
	DD	00H
	DD	00H
_gEmptyUString DW 00H
	ORG $+6
_charIterFuncs DD 040H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:_charIterTextClone
	DD	FLAT:_charIterTextLength
	DD	FLAT:_charIterTextAccess
	DD	FLAT:_charIterTextExtract
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:_charIterTextClose
	DD	00H
	DD	00H
	DD	00H
CONST	ENDS
;	COMDAT ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 02H		; std::_Iosb<int>::end
CONST	ENDS
;	COMDAT ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 01H		; std::_Iosb<int>::cur
CONST	ENDS
;	COMDAT ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 00H		; std::_Iosb<int>::beg
CONST	ENDS
;	COMDAT ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B DD 020H	; std::_Iosb<int>::binary
CONST	ENDS
;	COMDAT ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B DD 080H	; std::_Iosb<int>::_Noreplace
CONST	ENDS
;	COMDAT ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 040H	; std::_Iosb<int>::_Nocreate
CONST	ENDS
;	COMDAT ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B DD 010H		; std::_Iosb<int>::trunc
CONST	ENDS
;	COMDAT ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?app@?$_Iosb@H@std@@2W4_Openmode@12@B DD 08H		; std::_Iosb<int>::app
CONST	ENDS
;	COMDAT ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 04H		; std::_Iosb<int>::ate
CONST	ENDS
;	COMDAT ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?out@?$_Iosb@H@std@@2W4_Openmode@12@B DD 02H		; std::_Iosb<int>::out
CONST	ENDS
;	COMDAT ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?in@?$_Iosb@H@std@@2W4_Openmode@12@B DD 01H		; std::_Iosb<int>::in
CONST	ENDS
;	COMDAT ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B DD 010H	; std::_Iosb<int>::_Hardfail
CONST	ENDS
;	COMDAT ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 04H		; std::_Iosb<int>::badbit
CONST	ENDS
;	COMDAT ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 02H		; std::_Iosb<int>::failbit
CONST	ENDS
;	COMDAT ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 01H		; std::_Iosb<int>::eofbit
CONST	ENDS
;	COMDAT ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 00H		; std::_Iosb<int>::goodbit
CONST	ENDS
;	COMDAT ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::floatfield
CONST	ENDS
;	COMDAT ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0e00H	; std::_Iosb<int>::basefield
CONST	ENDS
;	COMDAT ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01c0H	; std::_Iosb<int>::adjustfield
CONST	ENDS
;	COMDAT ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08000H	; std::_Iosb<int>::_Stdio
CONST	ENDS
;	COMDAT ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04000H	; std::_Iosb<int>::boolalpha
CONST	ENDS
;	COMDAT ?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::hexfloat
CONST	ENDS
;	COMDAT ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02000H	; std::_Iosb<int>::fixed
CONST	ENDS
;	COMDAT ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01000H	; std::_Iosb<int>::scientific
CONST	ENDS
;	COMDAT ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0800H		; std::_Iosb<int>::hex
CONST	ENDS
;	COMDAT ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0400H		; std::_Iosb<int>::oct
CONST	ENDS
;	COMDAT ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0200H		; std::_Iosb<int>::dec
CONST	ENDS
;	COMDAT ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0100H	; std::_Iosb<int>::internal
CONST	ENDS
;	COMDAT ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 080H		; std::_Iosb<int>::right
CONST	ENDS
;	COMDAT ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 040H		; std::_Iosb<int>::left
CONST	ENDS
;	COMDAT ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 020H	; std::_Iosb<int>::showpos
CONST	ENDS
;	COMDAT ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 010H	; std::_Iosb<int>::showpoint
CONST	ENDS
;	COMDAT ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08H	; std::_Iosb<int>::showbase
CONST	ENDS
;	COMDAT ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04H	; std::_Iosb<int>::uppercase
CONST	ENDS
;	COMDAT ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02H	; std::_Iosb<int>::unitbuf
CONST	ENDS
;	COMDAT ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01H		; std::_Iosb<int>::skipws
CONST	ENDS
;	COMDAT ?none@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?none@?$_Locbase@H@std@@2HB DD 00H			; std::_Locbase<int>::none
CONST	ENDS
;	COMDAT ?all@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?all@?$_Locbase@H@std@@2HB DD 03fH			; std::_Locbase<int>::all
CONST	ENDS
;	COMDAT ?messages@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?messages@?$_Locbase@H@std@@2HB DD 020H			; std::_Locbase<int>::messages
CONST	ENDS
;	COMDAT ?time@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?time@?$_Locbase@H@std@@2HB DD 010H			; std::_Locbase<int>::time
CONST	ENDS
;	COMDAT ?numeric@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?numeric@?$_Locbase@H@std@@2HB DD 08H			; std::_Locbase<int>::numeric
CONST	ENDS
;	COMDAT ?monetary@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?monetary@?$_Locbase@H@std@@2HB DD 04H			; std::_Locbase<int>::monetary
CONST	ENDS
;	COMDAT ?ctype@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?ctype@?$_Locbase@H@std@@2HB DD 02H			; std::_Locbase<int>::ctype
CONST	ENDS
;	COMDAT ?collate@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?collate@?$_Locbase@H@std@@2HB DD 01H			; std::_Locbase<int>::collate
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@O@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@O@std@@2HB DD 09H		; std::_Arithmetic_traits<long double>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@N@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@N@std@@2HB DD 08H		; std::_Arithmetic_traits<double>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@M@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@M@std@@2HB DD 07H		; std::_Arithmetic_traits<float>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@_K@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@_K@std@@2HB DD 06H		; std::_Arithmetic_traits<unsigned __int64>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@_J@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@_J@std@@2HB DD 06H		; std::_Arithmetic_traits<__int64>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@K@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@K@std@@2HB DD 05H		; std::_Arithmetic_traits<unsigned long>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@J@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@J@std@@2HB DD 05H		; std::_Arithmetic_traits<long>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@I@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@I@std@@2HB DD 04H		; std::_Arithmetic_traits<unsigned int>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@H@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@H@std@@2HB DD 04H		; std::_Arithmetic_traits<int>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@G@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@G@std@@2HB DD 03H		; std::_Arithmetic_traits<unsigned short>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@F@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@F@std@@2HB DD 03H		; std::_Arithmetic_traits<short>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@E@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@E@std@@2HB DD 02H		; std::_Arithmetic_traits<unsigned char>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@C@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@C@std@@2HB DD 02H		; std::_Arithmetic_traits<signed char>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@D@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@D@std@@2HB DD 02H		; std::_Arithmetic_traits<char>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@_N@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@_N@std@@2HB DD 01H		; std::_Arithmetic_traits<bool>::_Rank
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@tr1@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@tr1@std@@2IB DD 00H	; std::tr1::integral_constant<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@tr1@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@tr1@std@@2_NB DB 01H	; std::tr1::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@tr1@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@tr1@std@@2_NB DB 00H	; std::tr1::integral_constant<bool,0>::value
CONST	ENDS
PUBLIC	??2@YAPAXI@Z					; operator new
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File d:\mozilla\intl\icu\source\common\unicode\utypes.h
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT ??2@YAPAXI@Z
_TEXT	SEGMENT
_q$ = -8						; size = 4
___formal$ = 8						; size = 4
??2@YAPAXI@Z PROC					; operator new, COMDAT
; Line 411
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 412
	mov	DWORD PTR _q$[ebp], 0
; Line 413
	mov	eax, DWORD PTR _q$[ebp]
	mov	BYTE PTR [eax], 5
; Line 414
	mov	eax, DWORD PTR _q$[ebp]
; Line 415
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??2@YAPAXI@Z ENDP					; operator new
_TEXT	ENDS
PUBLIC	??3@YAXPAX@Z					; operator delete
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??3@YAXPAX@Z
_TEXT	SEGMENT
_q$ = -8						; size = 4
___formal$ = 8						; size = 4
??3@YAXPAX@Z PROC					; operator delete, COMDAT
; Line 439
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 440
	mov	DWORD PTR _q$[ebp], 0
; Line 441
	mov	eax, DWORD PTR _q$[ebp]
	mov	BYTE PTR [eax], 5
; Line 442
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??3@YAXPAX@Z ENDP					; operator delete
_TEXT	ENDS
PUBLIC	??2UMemory@icu_56@@SAPAXIPAX@Z			; icu_56::UMemory::operator new
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??2UMemory@icu_56@@SAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_ptr$ = 12						; size = 4
??2UMemory@icu_56@@SAPAXIPAX@Z PROC			; icu_56::UMemory::operator new, COMDAT
; File d:\mozilla\intl\icu\source\common\unicode\uobject.h
; Line 161
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR _ptr$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??2UMemory@icu_56@@SAPAXIPAX@Z ENDP			; icu_56::UMemory::operator new
_TEXT	ENDS
PUBLIC	??3UMemory@icu_56@@SAXPAX0@Z			; icu_56::UMemory::operator delete
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??3UMemory@icu_56@@SAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3UMemory@icu_56@@SAXPAX0@Z PROC			; icu_56::UMemory::operator delete, COMDAT
; Line 168
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??3UMemory@icu_56@@SAXPAX0@Z ENDP			; icu_56::UMemory::operator delete
_TEXT	ENDS
PUBLIC	??4UMemory@icu_56@@QAEAAV01@ABV01@@Z		; icu_56::UMemory::operator=
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??4UMemory@icu_56@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___that$ = 8						; size = 4
??4UMemory@icu_56@@QAEAAV01@ABV01@@Z PROC		; icu_56::UMemory::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4UMemory@icu_56@@QAEAAV01@ABV01@@Z ENDP		; icu_56::UMemory::operator=
_TEXT	ENDS
PUBLIC	??_7UObject@icu_56@@6B@				; icu_56::UObject::`vftable'
PUBLIC	??0UObject@icu_56@@QAE@XZ			; icu_56::UObject::UObject
PUBLIC	??_R4UObject@icu_56@@6B@			; icu_56::UObject::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVUObject@icu_56@@@8			; icu_56::UObject `RTTI Type Descriptor'
PUBLIC	??_R3UObject@icu_56@@8				; icu_56::UObject::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2UObject@icu_56@@8				; icu_56::UObject::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@UObject@icu_56@@8			; icu_56::UObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R13?0A@EA@UMemory@icu_56@@8			; icu_56::UMemory::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	??_R0?AVUMemory@icu_56@@@8			; icu_56::UMemory `RTTI Type Descriptor'
PUBLIC	??_R3UMemory@icu_56@@8				; icu_56::UMemory::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2UMemory@icu_56@@8				; icu_56::UMemory::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@UMemory@icu_56@@8			; icu_56::UMemory::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_EUObject@icu_56@@UAEPAXI@Z			; icu_56::UObject::`vector deleting destructor'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?getDynamicClassID@UObject@icu_56@@UBEPAXXZ:PROC ; icu_56::UObject::getDynamicClassID
;	COMDAT ??_R1A@?0A@EA@UMemory@icu_56@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@UMemory@icu_56@@8 DD FLAT:??_R0?AVUMemory@icu_56@@@8 ; icu_56::UMemory::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3UMemory@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_R2UMemory@icu_56@@8
rdata$r	SEGMENT
??_R2UMemory@icu_56@@8 DD FLAT:??_R1A@?0A@EA@UMemory@icu_56@@8 ; icu_56::UMemory::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3UMemory@icu_56@@8
rdata$r	SEGMENT
??_R3UMemory@icu_56@@8 DD 00H				; icu_56::UMemory::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2UMemory@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVUMemory@icu_56@@@8
_DATA	SEGMENT
??_R0?AVUMemory@icu_56@@@8 DD FLAT:??_7type_info@@6B@	; icu_56::UMemory `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVUMemory@icu_56@@', 00H
_DATA	ENDS
;	COMDAT ??_R13?0A@EA@UMemory@icu_56@@8
rdata$r	SEGMENT
??_R13?0A@EA@UMemory@icu_56@@8 DD FLAT:??_R0?AVUMemory@icu_56@@@8 ; icu_56::UMemory::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	00H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3UMemory@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@UObject@icu_56@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@UObject@icu_56@@8 DD FLAT:??_R0?AVUObject@icu_56@@@8 ; icu_56::UObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3UObject@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_R2UObject@icu_56@@8
rdata$r	SEGMENT
??_R2UObject@icu_56@@8 DD FLAT:??_R1A@?0A@EA@UObject@icu_56@@8 ; icu_56::UObject::`RTTI Base Class Array'
	DD	FLAT:??_R13?0A@EA@UMemory@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_R3UObject@icu_56@@8
rdata$r	SEGMENT
??_R3UObject@icu_56@@8 DD 00H				; icu_56::UObject::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2UObject@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVUObject@icu_56@@@8
_DATA	SEGMENT
??_R0?AVUObject@icu_56@@@8 DD FLAT:??_7type_info@@6B@	; icu_56::UObject `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVUObject@icu_56@@', 00H
_DATA	ENDS
;	COMDAT ??_R4UObject@icu_56@@6B@
rdata$r	SEGMENT
??_R4UObject@icu_56@@6B@ DD 00H				; icu_56::UObject::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVUObject@icu_56@@@8
	DD	FLAT:??_R3UObject@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_7UObject@icu_56@@6B@
CONST	SEGMENT
??_7UObject@icu_56@@6B@ DD FLAT:??_R4UObject@icu_56@@6B@ ; icu_56::UObject::`vftable'
	DD	FLAT:??_EUObject@icu_56@@UAEPAXI@Z
	DD	FLAT:?getDynamicClassID@UObject@icu_56@@UBEPAXXZ
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ??0UObject@icu_56@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0UObject@icu_56@@QAE@XZ PROC				; icu_56::UObject::UObject, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7UObject@icu_56@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0UObject@icu_56@@QAE@XZ ENDP				; icu_56::UObject::UObject
_TEXT	ENDS
PUBLIC	??0UObject@icu_56@@QAE@ABV01@@Z			; icu_56::UObject::UObject
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0UObject@icu_56@@QAE@ABV01@@Z
_TEXT	SEGMENT
tv68 = -208						; size = 4
_this$ = -8						; size = 4
___that$ = 8						; size = 4
??0UObject@icu_56@@QAE@ABV01@@Z PROC			; icu_56::UObject::UObject, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	cmp	DWORD PTR ___that$[ebp], 0
	je	SHORT $LN3@UObject
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 4
	mov	DWORD PTR tv68[ebp], eax
	jmp	SHORT $LN4@UObject
$LN3@UObject:
	mov	DWORD PTR tv68[ebp], 0
$LN4@UObject:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7UObject@icu_56@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0UObject@icu_56@@QAE@ABV01@@Z ENDP			; icu_56::UObject::UObject
_TEXT	ENDS
PUBLIC	??4UObject@icu_56@@QAEAAV01@ABV01@@Z		; icu_56::UObject::operator=
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??4UObject@icu_56@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___that$ = 8						; size = 4
??4UObject@icu_56@@QAEAAV01@ABV01@@Z PROC		; icu_56::UObject::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4UObject@icu_56@@QAEAAV01@ABV01@@Z ENDP		; icu_56::UObject::operator=
_TEXT	ENDS
PUBLIC	??_GUObject@icu_56@@UAEPAXI@Z			; icu_56::UObject::`scalar deleting destructor'
EXTRN	??3UMemory@icu_56@@SAXPAX@Z:PROC		; icu_56::UMemory::operator delete
EXTRN	??1UObject@icu_56@@UAE@XZ:PROC			; icu_56::UObject::~UObject
EXTRN	__RTC_CheckEsp:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GUObject@icu_56@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_GUObject@icu_56@@UAEPAXI@Z PROC			; icu_56::UObject::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1UObject@icu_56@@UAE@XZ		; icu_56::UObject::~UObject
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3UMemory@icu_56@@SAXPAX@Z		; icu_56::UMemory::operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GUObject@icu_56@@UAEPAXI@Z ENDP			; icu_56::UObject::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	??_VUMemory@icu_56@@SAXPAX@Z:PROC		; icu_56::UMemory::operator delete[]
EXTRN	??_M@YGXPAXIHP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_EUObject@icu_56@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_EUObject@icu_56@@UAEPAXI@Z PROC			; icu_56::UObject::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector
	push	OFFSET ??1UObject@icu_56@@UAE@XZ	; icu_56::UObject::~UObject
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	push	ecx
	push	4
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@vector
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	push	eax
	call	??_VUMemory@icu_56@@SAXPAX@Z		; icu_56::UMemory::operator delete[]
	add	esp, 4
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN3@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1UObject@icu_56@@UAE@XZ		; icu_56::UObject::~UObject
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3UMemory@icu_56@@SAXPAX@Z		; icu_56::UMemory::operator delete
	add	esp, 4
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_EUObject@icu_56@@UAEPAXI@Z ENDP			; icu_56::UObject::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	??_7Replaceable@icu_56@@6B@			; icu_56::Replaceable::`vftable'
PUBLIC	??0Replaceable@icu_56@@QAE@ABV01@@Z		; icu_56::Replaceable::Replaceable
PUBLIC	??_R4Replaceable@icu_56@@6B@			; icu_56::Replaceable::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVReplaceable@icu_56@@@8			; icu_56::Replaceable `RTTI Type Descriptor'
PUBLIC	??_R3Replaceable@icu_56@@8			; icu_56::Replaceable::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Replaceable@icu_56@@8			; icu_56::Replaceable::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@Replaceable@icu_56@@8		; icu_56::Replaceable::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_EReplaceable@icu_56@@UAEPAXI@Z		; icu_56::Replaceable::`vector deleting destructor'
EXTRN	__purecall:PROC
EXTRN	?hasMetaData@Replaceable@icu_56@@UBECXZ:PROC	; icu_56::Replaceable::hasMetaData
EXTRN	?clone@Replaceable@icu_56@@UBEPAV12@XZ:PROC	; icu_56::Replaceable::clone
;	COMDAT ??_R1A@?0A@EA@Replaceable@icu_56@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Replaceable@icu_56@@8 DD FLAT:??_R0?AVReplaceable@icu_56@@@8 ; icu_56::Replaceable::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Replaceable@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_R2Replaceable@icu_56@@8
rdata$r	SEGMENT
??_R2Replaceable@icu_56@@8 DD FLAT:??_R1A@?0A@EA@Replaceable@icu_56@@8 ; icu_56::Replaceable::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@UObject@icu_56@@8
	DD	FLAT:??_R13?0A@EA@UMemory@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_R3Replaceable@icu_56@@8
rdata$r	SEGMENT
??_R3Replaceable@icu_56@@8 DD 00H			; icu_56::Replaceable::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2Replaceable@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVReplaceable@icu_56@@@8
_DATA	SEGMENT
??_R0?AVReplaceable@icu_56@@@8 DD FLAT:??_7type_info@@6B@ ; icu_56::Replaceable `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVReplaceable@icu_56@@', 00H
_DATA	ENDS
;	COMDAT ??_R4Replaceable@icu_56@@6B@
rdata$r	SEGMENT
??_R4Replaceable@icu_56@@6B@ DD 00H			; icu_56::Replaceable::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVReplaceable@icu_56@@@8
	DD	FLAT:??_R3Replaceable@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_7Replaceable@icu_56@@6B@
CONST	SEGMENT
??_7Replaceable@icu_56@@6B@ DD FLAT:??_R4Replaceable@icu_56@@6B@ ; icu_56::Replaceable::`vftable'
	DD	FLAT:??_EReplaceable@icu_56@@UAEPAXI@Z
	DD	FLAT:?getDynamicClassID@UObject@icu_56@@UBEPAXXZ
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?hasMetaData@Replaceable@icu_56@@UBECXZ
	DD	FLAT:?clone@Replaceable@icu_56@@UBEPAV12@XZ
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ??0Replaceable@icu_56@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___that$ = 8						; size = 4
??0Replaceable@icu_56@@QAE@ABV01@@Z PROC		; icu_56::Replaceable::Replaceable, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0UObject@icu_56@@QAE@ABV01@@Z
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7Replaceable@icu_56@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0Replaceable@icu_56@@QAE@ABV01@@Z ENDP		; icu_56::Replaceable::Replaceable
_TEXT	ENDS
PUBLIC	??4Replaceable@icu_56@@QAEAAV01@ABV01@@Z	; icu_56::Replaceable::operator=
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??4Replaceable@icu_56@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___that$ = 8						; size = 4
??4Replaceable@icu_56@@QAEAAV01@ABV01@@Z PROC		; icu_56::Replaceable::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4UObject@icu_56@@QAEAAV01@ABV01@@Z
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4Replaceable@icu_56@@QAEAAV01@ABV01@@Z ENDP		; icu_56::Replaceable::operator=
_TEXT	ENDS
PUBLIC	??_GReplaceable@icu_56@@UAEPAXI@Z		; icu_56::Replaceable::`scalar deleting destructor'
EXTRN	??1Replaceable@icu_56@@UAE@XZ:PROC		; icu_56::Replaceable::~Replaceable
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GReplaceable@icu_56@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_GReplaceable@icu_56@@UAEPAXI@Z PROC			; icu_56::Replaceable::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1Replaceable@icu_56@@UAE@XZ		; icu_56::Replaceable::~Replaceable
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@2
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3UMemory@icu_56@@SAXPAX@Z		; icu_56::UMemory::operator delete
	add	esp, 4
$LN1@scalar@2:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GReplaceable@icu_56@@UAEPAXI@Z ENDP			; icu_56::Replaceable::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??_EReplaceable@icu_56@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_EReplaceable@icu_56@@UAEPAXI@Z PROC			; icu_56::Replaceable::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector@2
	push	OFFSET ??1Replaceable@icu_56@@UAE@XZ	; icu_56::Replaceable::~Replaceable
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	push	ecx
	push	4
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@vector@2
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	push	eax
	call	??_VUMemory@icu_56@@SAXPAX@Z		; icu_56::UMemory::operator delete[]
	add	esp, 4
$LN2@vector@2:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector@2
$LN3@vector@2:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1Replaceable@icu_56@@UAE@XZ		; icu_56::Replaceable::~Replaceable
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector@2
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3UMemory@icu_56@@SAXPAX@Z		; icu_56::UMemory::operator delete
	add	esp, 4
$LN1@vector@2:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@2:
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_EReplaceable@icu_56@@UAEPAXI@Z ENDP			; icu_56::Replaceable::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	??0Replaceable@icu_56@@IAE@XZ			; icu_56::Replaceable::Replaceable
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0Replaceable@icu_56@@IAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0Replaceable@icu_56@@IAE@XZ PROC			; icu_56::Replaceable::Replaceable, COMDAT
; _this$ = ecx
; File d:\mozilla\intl\icu\source\common\unicode\rep.h
; Line 240
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0UObject@icu_56@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7Replaceable@icu_56@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0Replaceable@icu_56@@IAE@XZ ENDP			; icu_56::Replaceable::Replaceable
_TEXT	ENDS
PUBLIC	?length@Replaceable@icu_56@@QBEHXZ		; icu_56::Replaceable::length
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?length@Replaceable@icu_56@@QBEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?length@Replaceable@icu_56@@QBEHXZ PROC			; icu_56::Replaceable::length, COMDAT
; _this$ = ecx
; Line 243
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 244
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 245
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?length@Replaceable@icu_56@@QBEHXZ ENDP			; icu_56::Replaceable::length
_TEXT	ENDS
PUBLIC	?charAt@Replaceable@icu_56@@QBE_WH@Z		; icu_56::Replaceable::charAt
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?charAt@Replaceable@icu_56@@QBE_WH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_offset$ = 8						; size = 4
?charAt@Replaceable@icu_56@@QBE_WH@Z PROC		; icu_56::Replaceable::charAt, COMDAT
; _this$ = ecx
; Line 248
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 249
	mov	esi, esp
	mov	eax, DWORD PTR _offset$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+32]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 250
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?charAt@Replaceable@icu_56@@QBE_WH@Z ENDP		; icu_56::Replaceable::charAt
_TEXT	ENDS
PUBLIC	?char32At@Replaceable@icu_56@@QBEHH@Z		; icu_56::Replaceable::char32At
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?char32At@Replaceable@icu_56@@QBEHH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_offset$ = 8						; size = 4
?char32At@Replaceable@icu_56@@QBEHH@Z PROC		; icu_56::Replaceable::char32At, COMDAT
; _this$ = ecx
; Line 253
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 254
	mov	esi, esp
	mov	eax, DWORD PTR _offset$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+36]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 255
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?char32At@Replaceable@icu_56@@QBEHH@Z ENDP		; icu_56::Replaceable::char32At
_TEXT	ENDS
PUBLIC	??0StringPiece@icu_56@@QAE@XZ			; icu_56::StringPiece::StringPiece
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0StringPiece@icu_56@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0StringPiece@icu_56@@QAE@XZ PROC			; icu_56::StringPiece::StringPiece, COMDAT
; _this$ = ecx
; File d:\mozilla\intl\icu\source\common\unicode\stringpiece.h
; Line 62
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0StringPiece@icu_56@@QAE@XZ ENDP			; icu_56::StringPiece::StringPiece
_TEXT	ENDS
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
PUBLIC	?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::data
PUBLIC	??0StringPiece@icu_56@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; icu_56::StringPiece::StringPiece
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0StringPiece@icu_56@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_str$ = 8						; size = 4
??0StringPiece@icu_56@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; icu_56::StringPiece::StringPiece, COMDAT
; _this$ = ecx
; Line 74
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _str$[ebp]
	call	?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::data
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	ecx, DWORD PTR _str$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0StringPiece@icu_56@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; icu_56::StringPiece::StringPiece
_TEXT	ENDS
PUBLIC	??0StringPiece@icu_56@@QAE@PBDH@Z		; icu_56::StringPiece::StringPiece
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0StringPiece@icu_56@@QAE@PBDH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_offset$ = 8						; size = 4
_len$ = 12						; size = 4
??0StringPiece@icu_56@@QAE@PBDH@Z PROC			; icu_56::StringPiece::StringPiece, COMDAT
; _this$ = ecx
; Line 83
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _offset$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _len$[ebp]
	mov	DWORD PTR [eax+4], ecx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0StringPiece@icu_56@@QAE@PBDH@Z ENDP			; icu_56::StringPiece::StringPiece
_TEXT	ENDS
PUBLIC	?data@StringPiece@icu_56@@QBEPBDXZ		; icu_56::StringPiece::data
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?data@StringPiece@icu_56@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?data@StringPiece@icu_56@@QBEPBDXZ PROC			; icu_56::StringPiece::data, COMDAT
; _this$ = ecx
; Line 111
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?data@StringPiece@icu_56@@QBEPBDXZ ENDP			; icu_56::StringPiece::data
_TEXT	ENDS
PUBLIC	?size@StringPiece@icu_56@@QBEHXZ		; icu_56::StringPiece::size
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?size@StringPiece@icu_56@@QBEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?size@StringPiece@icu_56@@QBEHXZ PROC			; icu_56::StringPiece::size, COMDAT
; _this$ = ecx
; Line 117
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?size@StringPiece@icu_56@@QBEHXZ ENDP			; icu_56::StringPiece::size
_TEXT	ENDS
PUBLIC	?length@StringPiece@icu_56@@QBEHXZ		; icu_56::StringPiece::length
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?length@StringPiece@icu_56@@QBEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?length@StringPiece@icu_56@@QBEHXZ PROC			; icu_56::StringPiece::length, COMDAT
; _this$ = ecx
; Line 123
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?length@StringPiece@icu_56@@QBEHXZ ENDP			; icu_56::StringPiece::length
_TEXT	ENDS
PUBLIC	?empty@StringPiece@icu_56@@QBECXZ		; icu_56::StringPiece::empty
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?empty@StringPiece@icu_56@@QBECXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?empty@StringPiece@icu_56@@QBECXZ PROC			; icu_56::StringPiece::empty, COMDAT
; _this$ = ecx
; Line 129
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	sete	al
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?empty@StringPiece@icu_56@@QBECXZ ENDP			; icu_56::StringPiece::empty
_TEXT	ENDS
PUBLIC	?clear@StringPiece@icu_56@@QAEXXZ		; icu_56::StringPiece::clear
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?clear@StringPiece@icu_56@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?clear@StringPiece@icu_56@@QAEXXZ PROC			; icu_56::StringPiece::clear, COMDAT
; _this$ = ecx
; Line 135
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?clear@StringPiece@icu_56@@QAEXXZ ENDP			; icu_56::StringPiece::clear
_TEXT	ENDS
PUBLIC	?set@StringPiece@icu_56@@QAEXPBDH@Z		; icu_56::StringPiece::set
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?set@StringPiece@icu_56@@QAEXPBDH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_xdata$ = 8						; size = 4
_len$ = 12						; size = 4
?set@StringPiece@icu_56@@QAEXPBDH@Z PROC		; icu_56::StringPiece::set, COMDAT
; _this$ = ecx
; Line 143
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _xdata$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _len$[ebp]
	mov	DWORD PTR [eax+4], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?set@StringPiece@icu_56@@QAEXPBDH@Z ENDP		; icu_56::StringPiece::set
_TEXT	ENDS
PUBLIC	?remove_prefix@StringPiece@icu_56@@QAEXH@Z	; icu_56::StringPiece::remove_prefix
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?remove_prefix@StringPiece@icu_56@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_n$ = 8							; size = 4
?remove_prefix@StringPiece@icu_56@@QAEXH@Z PROC		; icu_56::StringPiece::remove_prefix, COMDAT
; _this$ = ecx
; Line 157
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 158
	cmp	DWORD PTR _n$[ebp], 0
	jl	SHORT $LN3@remove_pre
; Line 159
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _n$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jle	SHORT $LN1@remove_pre
; Line 160
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _n$[ebp], ecx
$LN1@remove_pre:
; Line 162
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 163
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx
$LN3@remove_pre:
; Line 165
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?remove_prefix@StringPiece@icu_56@@QAEXH@Z ENDP		; icu_56::StringPiece::remove_prefix
_TEXT	ENDS
PUBLIC	?remove_suffix@StringPiece@icu_56@@QAEXH@Z	; icu_56::StringPiece::remove_suffix
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?remove_suffix@StringPiece@icu_56@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_n$ = 8							; size = 4
?remove_suffix@StringPiece@icu_56@@QAEXH@Z PROC		; icu_56::StringPiece::remove_suffix, COMDAT
; _this$ = ecx
; Line 172
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 173
	cmp	DWORD PTR _n$[ebp], 0
	jl	SHORT $LN4@remove_suf
; Line 174
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _n$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jg	SHORT $LN2@remove_suf
; Line 175
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx
; Line 176
	jmp	SHORT $LN4@remove_suf
$LN2@remove_suf:
; Line 177
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
$LN4@remove_suf:
; Line 180
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?remove_suffix@StringPiece@icu_56@@QAEXH@Z ENDP		; icu_56::StringPiece::remove_suffix
_TEXT	ENDS
PUBLIC	?substr@StringPiece@icu_56@@QBE?AV12@HH@Z	; icu_56::StringPiece::substr
EXTRN	??0StringPiece@icu_56@@QAE@ABV01@HH@Z:PROC	; icu_56::StringPiece::StringPiece
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?substr@StringPiece@icu_56@@QBE?AV12@HH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
_pos$ = 12						; size = 4
_len$ = 16						; size = 4
?substr@StringPiece@icu_56@@QBE?AV12@HH@Z PROC		; icu_56::StringPiece::substr, COMDAT
; _this$ = ecx
; Line 196
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 197
	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pos$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0StringPiece@icu_56@@QAE@ABV01@HH@Z	; icu_56::StringPiece::StringPiece
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 198
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?substr@StringPiece@icu_56@@QBE?AV12@HH@Z ENDP		; icu_56::StringPiece::substr
_TEXT	ENDS
PUBLIC	??4StringPiece@icu_56@@QAEAAV01@ABV01@@Z	; icu_56::StringPiece::operator=
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??4StringPiece@icu_56@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___that$ = 8						; size = 4
??4StringPiece@icu_56@@QAEAAV01@ABV01@@Z PROC		; icu_56::StringPiece::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4StringPiece@icu_56@@QAEAAV01@ABV01@@Z ENDP		; icu_56::StringPiece::operator=
_TEXT	ENDS
PUBLIC	??_7ByteSink@icu_56@@6B@			; icu_56::ByteSink::`vftable'
PUBLIC	??0ByteSink@icu_56@@QAE@XZ			; icu_56::ByteSink::ByteSink
PUBLIC	??_R4ByteSink@icu_56@@6B@			; icu_56::ByteSink::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVByteSink@icu_56@@@8			; icu_56::ByteSink `RTTI Type Descriptor'
PUBLIC	??_R3ByteSink@icu_56@@8				; icu_56::ByteSink::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ByteSink@icu_56@@8				; icu_56::ByteSink::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ByteSink@icu_56@@8		; icu_56::ByteSink::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_EByteSink@icu_56@@UAEPAXI@Z			; icu_56::ByteSink::`vector deleting destructor'
EXTRN	?GetAppendBuffer@ByteSink@icu_56@@UAEPADHHPADHPAH@Z:PROC ; icu_56::ByteSink::GetAppendBuffer
EXTRN	?Flush@ByteSink@icu_56@@UAEXXZ:PROC		; icu_56::ByteSink::Flush
;	COMDAT ??_R1A@?0A@EA@ByteSink@icu_56@@8
; File d:\mozilla\intl\icu\source\common\unicode\bytestream.h
rdata$r	SEGMENT
??_R1A@?0A@EA@ByteSink@icu_56@@8 DD FLAT:??_R0?AVByteSink@icu_56@@@8 ; icu_56::ByteSink::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ByteSink@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_R2ByteSink@icu_56@@8
rdata$r	SEGMENT
??_R2ByteSink@icu_56@@8 DD FLAT:??_R1A@?0A@EA@ByteSink@icu_56@@8 ; icu_56::ByteSink::`RTTI Base Class Array'
	DD	FLAT:??_R13?0A@EA@UMemory@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_R3ByteSink@icu_56@@8
rdata$r	SEGMENT
??_R3ByteSink@icu_56@@8 DD 00H				; icu_56::ByteSink::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ByteSink@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVByteSink@icu_56@@@8
_DATA	SEGMENT
??_R0?AVByteSink@icu_56@@@8 DD FLAT:??_7type_info@@6B@	; icu_56::ByteSink `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVByteSink@icu_56@@', 00H
_DATA	ENDS
;	COMDAT ??_R4ByteSink@icu_56@@6B@
rdata$r	SEGMENT
??_R4ByteSink@icu_56@@6B@ DD 00H			; icu_56::ByteSink::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVByteSink@icu_56@@@8
	DD	FLAT:??_R3ByteSink@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_7ByteSink@icu_56@@6B@
CONST	SEGMENT
??_7ByteSink@icu_56@@6B@ DD FLAT:??_R4ByteSink@icu_56@@6B@ ; icu_56::ByteSink::`vftable'
	DD	FLAT:??_EByteSink@icu_56@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:?GetAppendBuffer@ByteSink@icu_56@@UAEPADHHPADHPAH@Z
	DD	FLAT:?Flush@ByteSink@icu_56@@UAEXXZ
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ??0ByteSink@icu_56@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0ByteSink@icu_56@@QAE@XZ PROC				; icu_56::ByteSink::ByteSink, COMDAT
; _this$ = ecx
; Line 54
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7ByteSink@icu_56@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0ByteSink@icu_56@@QAE@XZ ENDP				; icu_56::ByteSink::ByteSink
_TEXT	ENDS
PUBLIC	??_GByteSink@icu_56@@UAEPAXI@Z			; icu_56::ByteSink::`scalar deleting destructor'
EXTRN	??1ByteSink@icu_56@@UAE@XZ:PROC			; icu_56::ByteSink::~ByteSink
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GByteSink@icu_56@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_GByteSink@icu_56@@UAEPAXI@Z PROC			; icu_56::ByteSink::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ByteSink@icu_56@@UAE@XZ		; icu_56::ByteSink::~ByteSink
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@3
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3UMemory@icu_56@@SAXPAX@Z		; icu_56::UMemory::operator delete
	add	esp, 4
$LN1@scalar@3:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GByteSink@icu_56@@UAEPAXI@Z ENDP			; icu_56::ByteSink::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??_EByteSink@icu_56@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_EByteSink@icu_56@@UAEPAXI@Z PROC			; icu_56::ByteSink::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector@3
	push	OFFSET ??1ByteSink@icu_56@@UAE@XZ	; icu_56::ByteSink::~ByteSink
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	push	ecx
	push	4
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@vector@3
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	push	eax
	call	??_VUMemory@icu_56@@SAXPAX@Z		; icu_56::UMemory::operator delete[]
	add	esp, 4
$LN2@vector@3:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector@3
$LN3@vector@3:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ByteSink@icu_56@@UAE@XZ		; icu_56::ByteSink::~ByteSink
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector@3
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3UMemory@icu_56@@SAXPAX@Z		; icu_56::UMemory::operator delete
	add	esp, 4
$LN1@vector@3:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@3:
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_EByteSink@icu_56@@UAEPAXI@Z ENDP			; icu_56::ByteSink::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	?NumberOfBytesWritten@CheckedArrayByteSink@icu_56@@QBEHXZ ; icu_56::CheckedArrayByteSink::NumberOfBytesWritten
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?NumberOfBytesWritten@CheckedArrayByteSink@icu_56@@QBEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?NumberOfBytesWritten@CheckedArrayByteSink@icu_56@@QBEHXZ PROC ; icu_56::CheckedArrayByteSink::NumberOfBytesWritten, COMDAT
; _this$ = ecx
; Line 196
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+12]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?NumberOfBytesWritten@CheckedArrayByteSink@icu_56@@QBEHXZ ENDP ; icu_56::CheckedArrayByteSink::NumberOfBytesWritten
_TEXT	ENDS
PUBLIC	?Overflowed@CheckedArrayByteSink@icu_56@@QBECXZ	; icu_56::CheckedArrayByteSink::Overflowed
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?Overflowed@CheckedArrayByteSink@icu_56@@QBECXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?Overflowed@CheckedArrayByteSink@icu_56@@QBECXZ PROC	; icu_56::CheckedArrayByteSink::Overflowed, COMDAT
; _this$ = ecx
; Line 203
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+20]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Overflowed@CheckedArrayByteSink@icu_56@@QBECXZ ENDP	; icu_56::CheckedArrayByteSink::Overflowed
_TEXT	ENDS
PUBLIC	?NumberOfBytesAppended@CheckedArrayByteSink@icu_56@@QBEHXZ ; icu_56::CheckedArrayByteSink::NumberOfBytesAppended
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?NumberOfBytesAppended@CheckedArrayByteSink@icu_56@@QBEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?NumberOfBytesAppended@CheckedArrayByteSink@icu_56@@QBEHXZ PROC ; icu_56::CheckedArrayByteSink::NumberOfBytesAppended, COMDAT
; _this$ = ecx
; Line 211
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?NumberOfBytesAppended@CheckedArrayByteSink@icu_56@@QBEHXZ ENDP ; icu_56::CheckedArrayByteSink::NumberOfBytesAppended
_TEXT	ENDS
PUBLIC	??4UnicodeString@icu_56@@QAEAAV01@$$QAV01@@Z	; icu_56::UnicodeString::operator=
EXTRN	?moveFrom@UnicodeString@icu_56@@QAEAAV12@AAV12@@Z:PROC ; icu_56::UnicodeString::moveFrom
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??4UnicodeString@icu_56@@QAEAAV01@$$QAV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_src$ = 8						; size = 4
??4UnicodeString@icu_56@@QAEAAV01@$$QAV01@@Z PROC	; icu_56::UnicodeString::operator=, COMDAT
; _this$ = ecx
; File d:\mozilla\intl\icu\source\common\unicode\unistr.h
; Line 1915
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1916
	mov	eax, DWORD PTR _src$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?moveFrom@UnicodeString@icu_56@@QAEAAV12@AAV12@@Z ; icu_56::UnicodeString::moveFrom
; Line 1917
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4UnicodeString@icu_56@@QAEAAV01@$$QAV01@@Z ENDP	; icu_56::UnicodeString::operator=
_TEXT	ENDS
PUBLIC	?swap@icu_56@@YAXAAVUnicodeString@1@0@Z		; icu_56::swap
EXTRN	?swap@UnicodeString@icu_56@@QAEXAAV12@@Z:PROC	; icu_56::UnicodeString::swap
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?swap@icu_56@@YAXAAVUnicodeString@1@0@Z
_TEXT	SEGMENT
_s1$ = 8						; size = 4
_s2$ = 12						; size = 4
?swap@icu_56@@YAXAAVUnicodeString@1@0@Z PROC		; icu_56::swap, COMDAT
; Line 1945
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1946
	mov	eax, DWORD PTR _s2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _s1$[ebp]
	call	?swap@UnicodeString@icu_56@@QAEXAAV12@@Z ; icu_56::UnicodeString::swap
; Line 1947
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?swap@icu_56@@YAXAAVUnicodeString@1@0@Z ENDP		; icu_56::swap
_TEXT	ENDS
PUBLIC	??_GUnicodeString@icu_56@@UAEPAXI@Z		; icu_56::UnicodeString::`scalar deleting destructor'
EXTRN	??1UnicodeString@icu_56@@UAE@XZ:PROC		; icu_56::UnicodeString::~UnicodeString
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GUnicodeString@icu_56@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_GUnicodeString@icu_56@@UAEPAXI@Z PROC		; icu_56::UnicodeString::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1UnicodeString@icu_56@@UAE@XZ		; icu_56::UnicodeString::~UnicodeString
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@4
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3UMemory@icu_56@@SAXPAX@Z		; icu_56::UMemory::operator delete
	add	esp, 4
$LN1@scalar@4:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GUnicodeString@icu_56@@UAEPAXI@Z ENDP		; icu_56::UnicodeString::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_EUnicodeString@icu_56@@UAEPAXI@Z		; icu_56::UnicodeString::`vector deleting destructor'
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_EUnicodeString@icu_56@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_EUnicodeString@icu_56@@UAEPAXI@Z PROC		; icu_56::UnicodeString::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector@4
	push	OFFSET ??1UnicodeString@icu_56@@UAE@XZ	; icu_56::UnicodeString::~UnicodeString
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	push	ecx
	push	64					; 00000040H
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@vector@4
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	push	eax
	call	??_VUMemory@icu_56@@SAXPAX@Z		; icu_56::UMemory::operator delete[]
	add	esp, 4
$LN2@vector@4:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector@4
$LN3@vector@4:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1UnicodeString@icu_56@@UAE@XZ		; icu_56::UnicodeString::~UnicodeString
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector@4
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3UMemory@icu_56@@SAXPAX@Z		; icu_56::UMemory::operator delete
	add	esp, 4
$LN1@vector@4:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@4:
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_EUnicodeString@icu_56@@UAEPAXI@Z ENDP		; icu_56::UnicodeString::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	?length@UnicodeString@icu_56@@QBEHXZ		; icu_56::UnicodeString::length
PUBLIC	?pinIndex@UnicodeString@icu_56@@ABEXAAH@Z	; icu_56::UnicodeString::pinIndex
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?pinIndex@UnicodeString@icu_56@@ABEXAAH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_start$ = 8						; size = 4
?pinIndex@UnicodeString@icu_56@@ABEXAAH@Z PROC		; icu_56::UnicodeString::pinIndex, COMDAT
; _this$ = ecx
; Line 3730
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 3732
	mov	eax, DWORD PTR _start$[ebp]
	cmp	DWORD PTR [eax], 0
	jge	SHORT $LN3@pinIndex
; Line 3733
	mov	eax, DWORD PTR _start$[ebp]
	mov	DWORD PTR [eax], 0
	jmp	SHORT $LN4@pinIndex
$LN3@pinIndex:
; Line 3734
	mov	ecx, DWORD PTR _this$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	mov	ecx, DWORD PTR _start$[ebp]
	cmp	DWORD PTR [ecx], eax
	jle	SHORT $LN4@pinIndex
; Line 3735
	mov	ecx, DWORD PTR _this$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	mov	ecx, DWORD PTR _start$[ebp]
	mov	DWORD PTR [ecx], eax
$LN4@pinIndex:
; Line 3737
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?pinIndex@UnicodeString@icu_56@@ABEXAAH@Z ENDP		; icu_56::UnicodeString::pinIndex
_TEXT	ENDS
PUBLIC	?pinIndices@UnicodeString@icu_56@@ABEXAAH0@Z	; icu_56::UnicodeString::pinIndices
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?pinIndices@UnicodeString@icu_56@@ABEXAAH0@Z
_TEXT	SEGMENT
_len$ = -20						; size = 4
_this$ = -8						; size = 4
_start$ = 8						; size = 4
__length$ = 12						; size = 4
?pinIndices@UnicodeString@icu_56@@ABEXAAH0@Z PROC	; icu_56::UnicodeString::pinIndices, COMDAT
; _this$ = ecx
; Line 3742
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 3744
	mov	ecx, DWORD PTR _this$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	mov	DWORD PTR _len$[ebp], eax
; Line 3745
	mov	eax, DWORD PTR _start$[ebp]
	cmp	DWORD PTR [eax], 0
	jge	SHORT $LN6@pinIndices
; Line 3746
	mov	eax, DWORD PTR _start$[ebp]
	mov	DWORD PTR [eax], 0
	jmp	SHORT $LN5@pinIndices
$LN6@pinIndices:
; Line 3747
	mov	eax, DWORD PTR _start$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR _len$[ebp]
	jle	SHORT $LN5@pinIndices
; Line 3748
	mov	eax, DWORD PTR _start$[ebp]
	mov	ecx, DWORD PTR _len$[ebp]
	mov	DWORD PTR [eax], ecx
$LN5@pinIndices:
; Line 3750
	mov	eax, DWORD PTR __length$[ebp]
	cmp	DWORD PTR [eax], 0
	jge	SHORT $LN3@pinIndices
; Line 3751
	mov	eax, DWORD PTR __length$[ebp]
	mov	DWORD PTR [eax], 0
	jmp	SHORT $LN7@pinIndices
$LN3@pinIndices:
; Line 3752
	mov	eax, DWORD PTR _start$[ebp]
	mov	ecx, DWORD PTR _len$[ebp]
	sub	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __length$[ebp]
	cmp	DWORD PTR [edx], ecx
	jle	SHORT $LN7@pinIndices
; Line 3753
	mov	eax, DWORD PTR _start$[ebp]
	mov	ecx, DWORD PTR _len$[ebp]
	sub	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __length$[ebp]
	mov	DWORD PTR [edx], ecx
$LN7@pinIndices:
; Line 3755
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?pinIndices@UnicodeString@icu_56@@ABEXAAH0@Z ENDP	; icu_56::UnicodeString::pinIndices
_TEXT	ENDS
PUBLIC	?getArrayStart@UnicodeString@icu_56@@AAEPA_WXZ	; icu_56::UnicodeString::getArrayStart
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?getArrayStart@UnicodeString@icu_56@@AAEPA_WXZ
_TEXT	SEGMENT
tv76 = -208						; size = 4
_this$ = -8						; size = 4
?getArrayStart@UnicodeString@icu_56@@AAEPA_WXZ PROC	; icu_56::UnicodeString::getArrayStart, COMDAT
; _this$ = ecx
; Line 3758
	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 3760
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+4]
	and	ecx, 2
	je	SHORT $LN3@getArraySt
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 6
	mov	DWORD PTR tv76[ebp], edx
	jmp	SHORT $LN4@getArraySt
$LN3@getArraySt:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR tv76[ebp], ecx
$LN4@getArraySt:
	mov	eax, DWORD PTR tv76[ebp]
; Line 3761
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?getArrayStart@UnicodeString@icu_56@@AAEPA_WXZ ENDP	; icu_56::UnicodeString::getArrayStart
_TEXT	ENDS
PUBLIC	?getArrayStart@UnicodeString@icu_56@@ABEPB_WXZ	; icu_56::UnicodeString::getArrayStart
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?getArrayStart@UnicodeString@icu_56@@ABEPB_WXZ
_TEXT	SEGMENT
tv76 = -208						; size = 4
_this$ = -8						; size = 4
?getArrayStart@UnicodeString@icu_56@@ABEPB_WXZ PROC	; icu_56::UnicodeString::getArrayStart, COMDAT
; _this$ = ecx
; Line 3764
	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 3766
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+4]
	and	ecx, 2
	je	SHORT $LN3@getArraySt@2
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 6
	mov	DWORD PTR tv76[ebp], edx
	jmp	SHORT $LN4@getArraySt@2
$LN3@getArraySt@2:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR tv76[ebp], ecx
$LN4@getArraySt@2:
	mov	eax, DWORD PTR tv76[ebp]
; Line 3767
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?getArrayStart@UnicodeString@icu_56@@ABEPB_WXZ ENDP	; icu_56::UnicodeString::getArrayStart
_TEXT	ENDS
PUBLIC	??_7UnicodeString@icu_56@@6B@			; icu_56::UnicodeString::`vftable'
PUBLIC	??0UnicodeString@icu_56@@QAE@XZ			; icu_56::UnicodeString::UnicodeString
PUBLIC	??_R4UnicodeString@icu_56@@6B@			; icu_56::UnicodeString::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVUnicodeString@icu_56@@@8		; icu_56::UnicodeString `RTTI Type Descriptor'
PUBLIC	??_R3UnicodeString@icu_56@@8			; icu_56::UnicodeString::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2UnicodeString@icu_56@@8			; icu_56::UnicodeString::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@UnicodeString@icu_56@@8		; icu_56::UnicodeString::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	?getDynamicClassID@UnicodeString@icu_56@@UBEPAXXZ:PROC ; icu_56::UnicodeString::getDynamicClassID
EXTRN	?extractBetween@UnicodeString@icu_56@@UBEXHHAAV12@@Z:PROC ; icu_56::UnicodeString::extractBetween
EXTRN	?handleReplaceBetween@UnicodeString@icu_56@@UAEXHHABV12@@Z:PROC ; icu_56::UnicodeString::handleReplaceBetween
EXTRN	?copy@UnicodeString@icu_56@@UAEXHHH@Z:PROC	; icu_56::UnicodeString::copy
EXTRN	?hasMetaData@UnicodeString@icu_56@@UBECXZ:PROC	; icu_56::UnicodeString::hasMetaData
EXTRN	?clone@UnicodeString@icu_56@@UBEPAVReplaceable@2@XZ:PROC ; icu_56::UnicodeString::clone
EXTRN	?getLength@UnicodeString@icu_56@@MBEHXZ:PROC	; icu_56::UnicodeString::getLength
EXTRN	?getCharAt@UnicodeString@icu_56@@MBE_WH@Z:PROC	; icu_56::UnicodeString::getCharAt
EXTRN	?getChar32At@UnicodeString@icu_56@@MBEHH@Z:PROC	; icu_56::UnicodeString::getChar32At
;	COMDAT ??_R1A@?0A@EA@UnicodeString@icu_56@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@UnicodeString@icu_56@@8 DD FLAT:??_R0?AVUnicodeString@icu_56@@@8 ; icu_56::UnicodeString::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3UnicodeString@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_R2UnicodeString@icu_56@@8
rdata$r	SEGMENT
??_R2UnicodeString@icu_56@@8 DD FLAT:??_R1A@?0A@EA@UnicodeString@icu_56@@8 ; icu_56::UnicodeString::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Replaceable@icu_56@@8
	DD	FLAT:??_R1A@?0A@EA@UObject@icu_56@@8
	DD	FLAT:??_R13?0A@EA@UMemory@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_R3UnicodeString@icu_56@@8
rdata$r	SEGMENT
??_R3UnicodeString@icu_56@@8 DD 00H			; icu_56::UnicodeString::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2UnicodeString@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVUnicodeString@icu_56@@@8
_DATA	SEGMENT
??_R0?AVUnicodeString@icu_56@@@8 DD FLAT:??_7type_info@@6B@ ; icu_56::UnicodeString `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVUnicodeString@icu_56@@', 00H
_DATA	ENDS
;	COMDAT ??_R4UnicodeString@icu_56@@6B@
rdata$r	SEGMENT
??_R4UnicodeString@icu_56@@6B@ DD 00H			; icu_56::UnicodeString::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVUnicodeString@icu_56@@@8
	DD	FLAT:??_R3UnicodeString@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_7UnicodeString@icu_56@@6B@
CONST	SEGMENT
??_7UnicodeString@icu_56@@6B@ DD FLAT:??_R4UnicodeString@icu_56@@6B@ ; icu_56::UnicodeString::`vftable'
	DD	FLAT:??_EUnicodeString@icu_56@@UAEPAXI@Z
	DD	FLAT:?getDynamicClassID@UnicodeString@icu_56@@UBEPAXXZ
	DD	FLAT:?extractBetween@UnicodeString@icu_56@@UBEXHHAAV12@@Z
	DD	FLAT:?handleReplaceBetween@UnicodeString@icu_56@@UAEXHHABV12@@Z
	DD	FLAT:?copy@UnicodeString@icu_56@@UAEXHHH@Z
	DD	FLAT:?hasMetaData@UnicodeString@icu_56@@UBECXZ
	DD	FLAT:?clone@UnicodeString@icu_56@@UBEPAVReplaceable@2@XZ
	DD	FLAT:?getLength@UnicodeString@icu_56@@MBEHXZ
	DD	FLAT:?getCharAt@UnicodeString@icu_56@@MBE_WH@Z
	DD	FLAT:?getChar32At@UnicodeString@icu_56@@MBEHH@Z
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ??0UnicodeString@icu_56@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0UnicodeString@icu_56@@QAE@XZ PROC			; icu_56::UnicodeString::UnicodeString, COMDAT
; _this$ = ecx
; Line 3774
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Replaceable@icu_56@@IAE@XZ		; icu_56::Replaceable::Replaceable
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7UnicodeString@icu_56@@6B@
; Line 3775
	mov	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+4], ax
; Line 3776
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0UnicodeString@icu_56@@QAE@XZ ENDP			; icu_56::UnicodeString::UnicodeString
_TEXT	ENDS
PUBLIC	?hasShortLength@UnicodeString@icu_56@@ABECXZ	; icu_56::UnicodeString::hasShortLength
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?hasShortLength@UnicodeString@icu_56@@ABECXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?hasShortLength@UnicodeString@icu_56@@ABECXZ PROC	; icu_56::UnicodeString::hasShortLength, COMDAT
; _this$ = ecx
; Line 3782
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 3783
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+4]
	test	ecx, ecx
	setge	al
; Line 3784
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?hasShortLength@UnicodeString@icu_56@@ABECXZ ENDP	; icu_56::UnicodeString::hasShortLength
_TEXT	ENDS
PUBLIC	?getShortLength@UnicodeString@icu_56@@ABEHXZ	; icu_56::UnicodeString::getShortLength
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?getShortLength@UnicodeString@icu_56@@ABEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?getShortLength@UnicodeString@icu_56@@ABEHXZ PROC	; icu_56::UnicodeString::getShortLength, COMDAT
; _this$ = ecx
; Line 3787
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 3790
	mov	eax, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [eax+4]
	sar	eax, 5
; Line 3791
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?getShortLength@UnicodeString@icu_56@@ABEHXZ ENDP	; icu_56::UnicodeString::getShortLength
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?length@UnicodeString@icu_56@@QBEHXZ
_TEXT	SEGMENT
tv73 = -208						; size = 4
_this$ = -8						; size = 4
?length@UnicodeString@icu_56@@QBEHXZ PROC		; icu_56::UnicodeString::length, COMDAT
; _this$ = ecx
; Line 3794
	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 3795
	mov	ecx, DWORD PTR _this$[ebp]
	call	?hasShortLength@UnicodeString@icu_56@@ABECXZ ; icu_56::UnicodeString::hasShortLength
	movsx	eax, al
	test	eax, eax
	je	SHORT $LN3@length
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getShortLength@UnicodeString@icu_56@@ABEHXZ ; icu_56::UnicodeString::getShortLength
	mov	DWORD PTR tv73[ebp], eax
	jmp	SHORT $LN4@length
$LN3@length:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR tv73[ebp], edx
$LN4@length:
	mov	eax, DWORD PTR tv73[ebp]
; Line 3796
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?length@UnicodeString@icu_56@@QBEHXZ ENDP		; icu_56::UnicodeString::length
_TEXT	ENDS
PUBLIC	?getCapacity@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::getCapacity
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?getCapacity@UnicodeString@icu_56@@QBEHXZ
_TEXT	SEGMENT
tv73 = -208						; size = 4
_this$ = -8						; size = 4
?getCapacity@UnicodeString@icu_56@@QBEHXZ PROC		; icu_56::UnicodeString::getCapacity, COMDAT
; _this$ = ecx
; Line 3799
	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 3801
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+4]
	and	ecx, 2
	je	SHORT $LN3@getCapacit
	mov	DWORD PTR tv73[ebp], 29			; 0000001dH
	jmp	SHORT $LN4@getCapacit
$LN3@getCapacit:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR tv73[ebp], eax
$LN4@getCapacit:
	mov	eax, DWORD PTR tv73[ebp]
; Line 3802
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?getCapacity@UnicodeString@icu_56@@QBEHXZ ENDP		; icu_56::UnicodeString::getCapacity
_TEXT	ENDS
PUBLIC	?hashCode@UnicodeString@icu_56@@QBEHXZ		; icu_56::UnicodeString::hashCode
EXTRN	?doHashCode@UnicodeString@icu_56@@ABEHXZ:PROC	; icu_56::UnicodeString::doHashCode
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?hashCode@UnicodeString@icu_56@@QBEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?hashCode@UnicodeString@icu_56@@QBEHXZ PROC		; icu_56::UnicodeString::hashCode, COMDAT
; _this$ = ecx
; Line 3806
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doHashCode@UnicodeString@icu_56@@ABEHXZ ; icu_56::UnicodeString::doHashCode
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?hashCode@UnicodeString@icu_56@@QBEHXZ ENDP		; icu_56::UnicodeString::hashCode
_TEXT	ENDS
PUBLIC	?isBogus@UnicodeString@icu_56@@QBECXZ		; icu_56::UnicodeString::isBogus
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?isBogus@UnicodeString@icu_56@@QBECXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?isBogus@UnicodeString@icu_56@@QBECXZ PROC		; icu_56::UnicodeString::isBogus, COMDAT
; _this$ = ecx
; Line 3810
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [eax+4]
	and	eax, 1
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?isBogus@UnicodeString@icu_56@@QBECXZ ENDP		; icu_56::UnicodeString::isBogus
_TEXT	ENDS
PUBLIC	?isWritable@UnicodeString@icu_56@@ABECXZ	; icu_56::UnicodeString::isWritable
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?isWritable@UnicodeString@icu_56@@ABECXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?isWritable@UnicodeString@icu_56@@ABECXZ PROC		; icu_56::UnicodeString::isWritable, COMDAT
; _this$ = ecx
; Line 3814
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+4]
	and	ecx, 17					; 00000011H
	sete	al
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?isWritable@UnicodeString@icu_56@@ABECXZ ENDP		; icu_56::UnicodeString::isWritable
_TEXT	ENDS
PUBLIC	?isBufferWritable@UnicodeString@icu_56@@ABECXZ	; icu_56::UnicodeString::isBufferWritable
EXTRN	?refCount@UnicodeString@icu_56@@ABEHXZ:PROC	; icu_56::UnicodeString::refCount
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?isBufferWritable@UnicodeString@icu_56@@ABECXZ
_TEXT	SEGMENT
tv79 = -205						; size = 1
_this$ = -8						; size = 4
?isBufferWritable@UnicodeString@icu_56@@ABECXZ PROC	; icu_56::UnicodeString::isBufferWritable, COMDAT
; _this$ = ecx
; Line 3818
	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 3821
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+4]
	and	ecx, 25					; 00000019H
	jne	SHORT $LN4@isBufferWr
	mov	edx, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [edx+4]
	and	eax, 4
	je	SHORT $LN3@isBufferWr
	mov	ecx, DWORD PTR _this$[ebp]
	call	?refCount@UnicodeString@icu_56@@ABEHXZ	; icu_56::UnicodeString::refCount
	cmp	eax, 1
	jne	SHORT $LN4@isBufferWr
$LN3@isBufferWr:
	mov	BYTE PTR tv79[ebp], 1
	jmp	SHORT $LN5@isBufferWr
$LN4@isBufferWr:
	mov	BYTE PTR tv79[ebp], 0
$LN5@isBufferWr:
	mov	al, BYTE PTR tv79[ebp]
; Line 3822
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?isBufferWritable@UnicodeString@icu_56@@ABECXZ ENDP	; icu_56::UnicodeString::isBufferWritable
_TEXT	ENDS
PUBLIC	?getBuffer@UnicodeString@icu_56@@QBEPB_WXZ	; icu_56::UnicodeString::getBuffer
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?getBuffer@UnicodeString@icu_56@@QBEPB_WXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?getBuffer@UnicodeString@icu_56@@QBEPB_WXZ PROC		; icu_56::UnicodeString::getBuffer, COMDAT
; _this$ = ecx
; Line 3825
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 3826
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+4]
	and	ecx, 17					; 00000011H
	je	SHORT $LN4@getBuffer
; Line 3827
	xor	eax, eax
	jmp	SHORT $LN5@getBuffer
	jmp	SHORT $LN5@getBuffer
$LN4@getBuffer:
; Line 3828
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+4]
	and	ecx, 2
	je	SHORT $LN2@getBuffer
; Line 3829
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 6
	jmp	SHORT $LN5@getBuffer
; Line 3830
	jmp	SHORT $LN5@getBuffer
$LN2@getBuffer:
; Line 3831
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]
$LN5@getBuffer:
; Line 3833
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?getBuffer@UnicodeString@icu_56@@QBEPB_WXZ ENDP		; icu_56::UnicodeString::getBuffer
_TEXT	ENDS
PUBLIC	?doCompare@UnicodeString@icu_56@@ABECHHABV12@HH@Z ; icu_56::UnicodeString::doCompare
EXTRN	?doCompare@UnicodeString@icu_56@@ABECHHPB_WHH@Z:PROC ; icu_56::UnicodeString::doCompare
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?doCompare@UnicodeString@icu_56@@ABECHHABV12@HH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_start$ = 8						; size = 4
_thisLength$ = 12					; size = 4
_srcText$ = 16						; size = 4
_srcStart$ = 20						; size = 4
_srcLength$ = 24					; size = 4
?doCompare@UnicodeString@icu_56@@ABECHHABV12@HH@Z PROC	; icu_56::UnicodeString::doCompare, COMDAT
; _this$ = ecx
; Line 3844
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 3845
	mov	ecx, DWORD PTR _srcText$[ebp]
	call	?isBogus@UnicodeString@icu_56@@QBECXZ	; icu_56::UnicodeString::isBogus
	movsx	eax, al
	test	eax, eax
	je	SHORT $LN2@doCompare
; Line 3846
	mov	ecx, DWORD PTR _this$[ebp]
	call	?isBogus@UnicodeString@icu_56@@QBECXZ	; icu_56::UnicodeString::isBogus
	movsx	eax, al
	test	eax, eax
	sete	al
	jmp	SHORT $LN3@doCompare
; Line 3847
	jmp	SHORT $LN3@doCompare
$LN2@doCompare:
; Line 3848
	lea	eax, DWORD PTR _srcLength$[ebp]
	push	eax
	lea	ecx, DWORD PTR _srcStart$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _srcText$[ebp]
	call	?pinIndices@UnicodeString@icu_56@@ABEXAAH0@Z ; icu_56::UnicodeString::pinIndices
; Line 3849
	mov	eax, DWORD PTR _srcLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _srcStart$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _srcText$[ebp]
	call	?getArrayStart@UnicodeString@icu_56@@ABEPB_WXZ ; icu_56::UnicodeString::getArrayStart
	push	eax
	mov	edx, DWORD PTR _thisLength$[ebp]
	push	edx
	mov	eax, DWORD PTR _start$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doCompare@UnicodeString@icu_56@@ABECHHPB_WHH@Z ; icu_56::UnicodeString::doCompare
$LN3@doCompare:
; Line 3851
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?doCompare@UnicodeString@icu_56@@ABECHHABV12@HH@Z ENDP	; icu_56::UnicodeString::doCompare
_TEXT	ENDS
PUBLIC	??8UnicodeString@icu_56@@QBECABV01@@Z		; icu_56::UnicodeString::operator==
EXTRN	?doEquals@UnicodeString@icu_56@@ABECABV12@H@Z:PROC ; icu_56::UnicodeString::doEquals
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??8UnicodeString@icu_56@@QBECABV01@@Z
_TEXT	SEGMENT
tv85 = -229						; size = 1
_textLength$33245 = -32					; size = 4
_len$33244 = -20					; size = 4
_this$ = -8						; size = 4
_text$ = 8						; size = 4
??8UnicodeString@icu_56@@QBECABV01@@Z PROC		; icu_56::UnicodeString::operator==, COMDAT
; _this$ = ecx
; Line 3855
	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 3856
	mov	ecx, DWORD PTR _this$[ebp]
	call	?isBogus@UnicodeString@icu_56@@QBECXZ	; icu_56::UnicodeString::isBogus
	movsx	eax, al
	test	eax, eax
	je	SHORT $LN2@operator
; Line 3857
	mov	ecx, DWORD PTR _text$[ebp]
	call	?isBogus@UnicodeString@icu_56@@QBECXZ	; icu_56::UnicodeString::isBogus
	jmp	SHORT $LN3@operator
; Line 3858
	jmp	SHORT $LN3@operator
$LN2@operator:
; Line 3859
	mov	ecx, DWORD PTR _this$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	mov	DWORD PTR _len$33244[ebp], eax
	mov	ecx, DWORD PTR _text$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	mov	DWORD PTR _textLength$33245[ebp], eax
; Line 3860
	mov	ecx, DWORD PTR _text$[ebp]
	call	?isBogus@UnicodeString@icu_56@@QBECXZ	; icu_56::UnicodeString::isBogus
	movsx	eax, al
	test	eax, eax
	jne	SHORT $LN5@operator
	mov	ecx, DWORD PTR _len$33244[ebp]
	cmp	ecx, DWORD PTR _textLength$33245[ebp]
	jne	SHORT $LN5@operator
	mov	edx, DWORD PTR _len$33244[ebp]
	push	edx
	mov	eax, DWORD PTR _text$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doEquals@UnicodeString@icu_56@@ABECABV12@H@Z ; icu_56::UnicodeString::doEquals
	movsx	ecx, al
	test	ecx, ecx
	je	SHORT $LN5@operator
	mov	BYTE PTR tv85[ebp], 1
	jmp	SHORT $LN6@operator
$LN5@operator:
	mov	BYTE PTR tv85[ebp], 0
$LN6@operator:
	mov	al, BYTE PTR tv85[ebp]
$LN3@operator:
; Line 3862
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??8UnicodeString@icu_56@@QBECABV01@@Z ENDP		; icu_56::UnicodeString::operator==
_TEXT	ENDS
PUBLIC	??9UnicodeString@icu_56@@QBECABV01@@Z		; icu_56::UnicodeString::operator!=
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??9UnicodeString@icu_56@@QBECABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_text$ = 8						; size = 4
??9UnicodeString@icu_56@@QBECABV01@@Z PROC		; icu_56::UnicodeString::operator!=, COMDAT
; _this$ = ecx
; Line 3866
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _text$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8UnicodeString@icu_56@@QBECABV01@@Z	; icu_56::UnicodeString::operator==
	movsx	ecx, al
	test	ecx, ecx
	sete	al
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??9UnicodeString@icu_56@@QBECABV01@@Z ENDP		; icu_56::UnicodeString::operator!=
_TEXT	ENDS
PUBLIC	??OUnicodeString@icu_56@@QBECABV01@@Z		; icu_56::UnicodeString::operator>
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??OUnicodeString@icu_56@@QBECABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_text$ = 8						; size = 4
??OUnicodeString@icu_56@@QBECABV01@@Z PROC		; icu_56::UnicodeString::operator>, COMDAT
; _this$ = ecx
; Line 3870
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _text$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	push	eax
	push	0
	mov	eax, DWORD PTR _text$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doCompare@UnicodeString@icu_56@@ABECHHABV12@HH@Z ; icu_56::UnicodeString::doCompare
	movsx	ecx, al
	cmp	ecx, 1
	sete	al
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??OUnicodeString@icu_56@@QBECABV01@@Z ENDP		; icu_56::UnicodeString::operator>
_TEXT	ENDS
PUBLIC	??MUnicodeString@icu_56@@QBECABV01@@Z		; icu_56::UnicodeString::operator<
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??MUnicodeString@icu_56@@QBECABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_text$ = 8						; size = 4
??MUnicodeString@icu_56@@QBECABV01@@Z PROC		; icu_56::UnicodeString::operator<, COMDAT
; _this$ = ecx
; Line 3874
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _text$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	push	eax
	push	0
	mov	eax, DWORD PTR _text$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doCompare@UnicodeString@icu_56@@ABECHHABV12@HH@Z ; icu_56::UnicodeString::doCompare
	movsx	ecx, al
	cmp	ecx, -1
	sete	al
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??MUnicodeString@icu_56@@QBECABV01@@Z ENDP		; icu_56::UnicodeString::operator<
_TEXT	ENDS
PUBLIC	??PUnicodeString@icu_56@@QBECABV01@@Z		; icu_56::UnicodeString::operator>=
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??PUnicodeString@icu_56@@QBECABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_text$ = 8						; size = 4
??PUnicodeString@icu_56@@QBECABV01@@Z PROC		; icu_56::UnicodeString::operator>=, COMDAT
; _this$ = ecx
; Line 3878
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _text$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	push	eax
	push	0
	mov	eax, DWORD PTR _text$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doCompare@UnicodeString@icu_56@@ABECHHABV12@HH@Z ; icu_56::UnicodeString::doCompare
	movsx	ecx, al
	cmp	ecx, -1
	setne	al
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??PUnicodeString@icu_56@@QBECABV01@@Z ENDP		; icu_56::UnicodeString::operator>=
_TEXT	ENDS
PUBLIC	??NUnicodeString@icu_56@@QBECABV01@@Z		; icu_56::UnicodeString::operator<=
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??NUnicodeString@icu_56@@QBECABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_text$ = 8						; size = 4
??NUnicodeString@icu_56@@QBECABV01@@Z PROC		; icu_56::UnicodeString::operator<=, COMDAT
; _this$ = ecx
; Line 3882
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _text$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	push	eax
	push	0
	mov	eax, DWORD PTR _text$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doCompare@UnicodeString@icu_56@@ABECHHABV12@HH@Z ; icu_56::UnicodeString::doCompare
	movsx	ecx, al
	cmp	ecx, 1
	setne	al
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??NUnicodeString@icu_56@@QBECABV01@@Z ENDP		; icu_56::UnicodeString::operator<=
_TEXT	ENDS
PUBLIC	?compare@UnicodeString@icu_56@@QBECABV12@@Z	; icu_56::UnicodeString::compare
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?compare@UnicodeString@icu_56@@QBECABV12@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_text$ = 8						; size = 4
?compare@UnicodeString@icu_56@@QBECABV12@@Z PROC	; icu_56::UnicodeString::compare, COMDAT
; _this$ = ecx
; Line 3886
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _text$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	push	eax
	push	0
	mov	eax, DWORD PTR _text$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doCompare@UnicodeString@icu_56@@ABECHHABV12@HH@Z ; icu_56::UnicodeString::doCompare
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?compare@UnicodeString@icu_56@@QBECABV12@@Z ENDP	; icu_56::UnicodeString::compare
_TEXT	ENDS
PUBLIC	?compare@UnicodeString@icu_56@@QBECHHABV12@@Z	; icu_56::UnicodeString::compare
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?compare@UnicodeString@icu_56@@QBECHHABV12@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_start$ = 8						; size = 4
__length$ = 12						; size = 4
_srcText$ = 16						; size = 4
?compare@UnicodeString@icu_56@@QBECHHABV12@@Z PROC	; icu_56::UnicodeString::compare, COMDAT
; _this$ = ecx
; Line 3892
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _srcText$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	push	eax
	push	0
	mov	eax, DWORD PTR _srcText$[ebp]
	push	eax
	mov	ecx, DWORD PTR __length$[ebp]
	push	ecx
	mov	edx, DWORD PTR _start$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doCompare@UnicodeString@icu_56@@ABECHHABV12@HH@Z ; icu_56::UnicodeString::doCompare
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?compare@UnicodeString@icu_56@@QBECHHABV12@@Z ENDP	; icu_56::UnicodeString::compare
_TEXT	ENDS
PUBLIC	?compare@UnicodeString@icu_56@@QBECPB_WH@Z	; icu_56::UnicodeString::compare
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?compare@UnicodeString@icu_56@@QBECPB_WH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_srcChars$ = 8						; size = 4
_srcLength$ = 12					; size = 4
?compare@UnicodeString@icu_56@@QBECPB_WH@Z PROC		; icu_56::UnicodeString::compare, COMDAT
; _this$ = ecx
; Line 3897
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _srcLength$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _srcChars$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doCompare@UnicodeString@icu_56@@ABECHHPB_WHH@Z ; icu_56::UnicodeString::doCompare
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?compare@UnicodeString@icu_56@@QBECPB_WH@Z ENDP		; icu_56::UnicodeString::compare
_TEXT	ENDS
PUBLIC	?compare@UnicodeString@icu_56@@QBECHHABV12@HH@Z	; icu_56::UnicodeString::compare
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?compare@UnicodeString@icu_56@@QBECHHABV12@HH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_start$ = 8						; size = 4
__length$ = 12						; size = 4
_srcText$ = 16						; size = 4
_srcStart$ = 20						; size = 4
_srcLength$ = 24					; size = 4
?compare@UnicodeString@icu_56@@QBECHHABV12@HH@Z PROC	; icu_56::UnicodeString::compare, COMDAT
; _this$ = ecx
; Line 3905
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _srcLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _srcStart$[ebp]
	push	ecx
	mov	edx, DWORD PTR _srcText$[ebp]
	push	edx
	mov	eax, DWORD PTR __length$[ebp]
	push	eax
	mov	ecx, DWORD PTR _start$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doCompare@UnicodeString@icu_56@@ABECHHABV12@HH@Z ; icu_56::UnicodeString::doCompare
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?compare@UnicodeString@icu_56@@QBECHHABV12@HH@Z ENDP	; icu_56::UnicodeString::compare
_TEXT	ENDS
PUBLIC	?compare@UnicodeString@icu_56@@QBECHHPB_W@Z	; icu_56::UnicodeString::compare
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?compare@UnicodeString@icu_56@@QBECHHPB_W@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_start$ = 8						; size = 4
__length$ = 12						; size = 4
_srcChars$ = 16						; size = 4
?compare@UnicodeString@icu_56@@QBECHHPB_W@Z PROC	; icu_56::UnicodeString::compare, COMDAT
; _this$ = ecx
; Line 3911
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __length$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _srcChars$[ebp]
	push	ecx
	mov	edx, DWORD PTR __length$[ebp]
	push	edx
	mov	eax, DWORD PTR _start$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doCompare@UnicodeString@icu_56@@ABECHHPB_WHH@Z ; icu_56::UnicodeString::doCompare
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?compare@UnicodeString@icu_56@@QBECHHPB_W@Z ENDP	; icu_56::UnicodeString::compare
_TEXT	ENDS
PUBLIC	?compare@UnicodeString@icu_56@@QBECHHPB_WHH@Z	; icu_56::UnicodeString::compare
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?compare@UnicodeString@icu_56@@QBECHHPB_WHH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_start$ = 8						; size = 4
__length$ = 12						; size = 4
_srcChars$ = 16						; size = 4
_srcStart$ = 20						; size = 4
_srcLength$ = 24					; size = 4
?compare@UnicodeString@icu_56@@QBECHHPB_WHH@Z PROC	; icu_56::UnicodeString::compare, COMDAT
; _this$ = ecx
; Line 3919
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _srcLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _srcStart$[ebp]
	push	ecx
	mov	edx, DWORD PTR _srcChars$[ebp]
	push	edx
	mov	eax, DWORD PTR __length$[ebp]
	push	eax
	mov	ecx, DWORD PTR _start$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doCompare@UnicodeString@icu_56@@ABECHHPB_WHH@Z ; icu_56::UnicodeString::doCompare
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?compare@UnicodeString@icu_56@@QBECHHPB_WHH@Z ENDP	; icu_56::UnicodeString::compare
_TEXT	ENDS
PUBLIC	?compareBetween@UnicodeString@icu_56@@QBECHHABV12@HH@Z ; icu_56::UnicodeString::compareBetween
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?compareBetween@UnicodeString@icu_56@@QBECHHABV12@HH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_start$ = 8						; size = 4
_limit$ = 12						; size = 4
_srcText$ = 16						; size = 4
_srcStart$ = 20						; size = 4
_srcLimit$ = 24						; size = 4
?compareBetween@UnicodeString@icu_56@@QBECHHABV12@HH@Z PROC ; icu_56::UnicodeString::compareBetween, COMDAT
; _this$ = ecx
; Line 3927
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 3928
	mov	eax, DWORD PTR _srcLimit$[ebp]
	sub	eax, DWORD PTR _srcStart$[ebp]
	push	eax
	mov	ecx, DWORD PTR _srcStart$[ebp]
	push	ecx
	mov	edx, DWORD PTR _srcText$[ebp]
	push	edx
	mov	eax, DWORD PTR _limit$[ebp]
	sub	eax, DWORD PTR _start$[ebp]
	push	eax
	mov	ecx, DWORD PTR _start$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doCompare@UnicodeString@icu_56@@ABECHHABV12@HH@Z ; icu_56::UnicodeString::doCompare
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?compareBetween@UnicodeString@icu_56@@QBECHHABV12@HH@Z ENDP ; icu_56::UnicodeString::compareBetween
_TEXT	ENDS
PUBLIC	?doCompareCodePointOrder@UnicodeString@icu_56@@ABECHHABV12@HH@Z ; icu_56::UnicodeString::doCompareCodePointOrder
EXTRN	?doCompareCodePointOrder@UnicodeString@icu_56@@ABECHHPB_WHH@Z:PROC ; icu_56::UnicodeString::doCompareCodePointOrder
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?doCompareCodePointOrder@UnicodeString@icu_56@@ABECHHABV12@HH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_start$ = 8						; size = 4
_thisLength$ = 12					; size = 4
_srcText$ = 16						; size = 4
_srcStart$ = 20						; size = 4
_srcLength$ = 24					; size = 4
?doCompareCodePointOrder@UnicodeString@icu_56@@ABECHHABV12@HH@Z PROC ; icu_56::UnicodeString::doCompareCodePointOrder, COMDAT
; _this$ = ecx
; Line 3936
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 3937
	mov	ecx, DWORD PTR _srcText$[ebp]
	call	?isBogus@UnicodeString@icu_56@@QBECXZ	; icu_56::UnicodeString::isBogus
	movsx	eax, al
	test	eax, eax
	je	SHORT $LN2@doCompareC
; Line 3938
	mov	ecx, DWORD PTR _this$[ebp]
	call	?isBogus@UnicodeString@icu_56@@QBECXZ	; icu_56::UnicodeString::isBogus
	movsx	eax, al
	test	eax, eax
	sete	al
	jmp	SHORT $LN3@doCompareC
; Line 3939
	jmp	SHORT $LN3@doCompareC
$LN2@doCompareC:
; Line 3940
	lea	eax, DWORD PTR _srcLength$[ebp]
	push	eax
	lea	ecx, DWORD PTR _srcStart$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _srcText$[ebp]
	call	?pinIndices@UnicodeString@icu_56@@ABEXAAH0@Z ; icu_56::UnicodeString::pinIndices
; Line 3941
	mov	eax, DWORD PTR _srcLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _srcStart$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _srcText$[ebp]
	call	?getArrayStart@UnicodeString@icu_56@@ABEPB_WXZ ; icu_56::UnicodeString::getArrayStart
	push	eax
	mov	edx, DWORD PTR _thisLength$[ebp]
	push	edx
	mov	eax, DWORD PTR _start$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doCompareCodePointOrder@UnicodeString@icu_56@@ABECHHPB_WHH@Z ; icu_56::UnicodeString::doCompareCodePointOrder
$LN3@doCompareC:
; Line 3943
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?doCompareCodePointOrder@UnicodeString@icu_56@@ABECHHABV12@HH@Z ENDP ; icu_56::UnicodeString::doCompareCodePointOrder
_TEXT	ENDS
PUBLIC	?compareCodePointOrder@UnicodeString@icu_56@@QBECABV12@@Z ; icu_56::UnicodeString::compareCodePointOrder
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?compareCodePointOrder@UnicodeString@icu_56@@QBECABV12@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_text$ = 8						; size = 4
?compareCodePointOrder@UnicodeString@icu_56@@QBECABV12@@Z PROC ; icu_56::UnicodeString::compareCodePointOrder, COMDAT
; _this$ = ecx
; Line 3947
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _text$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	push	eax
	push	0
	mov	eax, DWORD PTR _text$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doCompareCodePointOrder@UnicodeString@icu_56@@ABECHHABV12@HH@Z ; icu_56::UnicodeString::doCompareCodePointOrder
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?compareCodePointOrder@UnicodeString@icu_56@@QBECABV12@@Z ENDP ; icu_56::UnicodeString::compareCodePointOrder
_TEXT	ENDS
PUBLIC	?compareCodePointOrder@UnicodeString@icu_56@@QBECHHABV12@@Z ; icu_56::UnicodeString::compareCodePointOrder
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?compareCodePointOrder@UnicodeString@icu_56@@QBECHHABV12@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_start$ = 8						; size = 4
__length$ = 12						; size = 4
_srcText$ = 16						; size = 4
?compareCodePointOrder@UnicodeString@icu_56@@QBECHHABV12@@Z PROC ; icu_56::UnicodeString::compareCodePointOrder, COMDAT
; _this$ = ecx
; Line 3953
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _srcText$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	push	eax
	push	0
	mov	eax, DWORD PTR _srcText$[ebp]
	push	eax
	mov	ecx, DWORD PTR __length$[ebp]
	push	ecx
	mov	edx, DWORD PTR _start$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doCompareCodePointOrder@UnicodeString@icu_56@@ABECHHABV12@HH@Z ; icu_56::UnicodeString::doCompareCodePointOrder
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?compareCodePointOrder@UnicodeString@icu_56@@QBECHHABV12@@Z ENDP ; icu_56::UnicodeString::compareCodePointOrder
_TEXT	ENDS
PUBLIC	?compareCodePointOrder@UnicodeString@icu_56@@QBECPB_WH@Z ; icu_56::UnicodeString::compareCodePointOrder
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?compareCodePointOrder@UnicodeString@icu_56@@QBECPB_WH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_srcChars$ = 8						; size = 4
_srcLength$ = 12					; size = 4
?compareCodePointOrder@UnicodeString@icu_56@@QBECPB_WH@Z PROC ; icu_56::UnicodeString::compareCodePointOrder, COMDAT
; _this$ = ecx
; Line 3958
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _srcLength$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _srcChars$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doCompareCodePointOrder@UnicodeString@icu_56@@ABECHHPB_WHH@Z ; icu_56::UnicodeString::doCompareCodePointOrder
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?compareCodePointOrder@UnicodeString@icu_56@@QBECPB_WH@Z ENDP ; icu_56::UnicodeString::compareCodePointOrder
_TEXT	ENDS
PUBLIC	?compareCodePointOrder@UnicodeString@icu_56@@QBECHHABV12@HH@Z ; icu_56::UnicodeString::compareCodePointOrder
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?compareCodePointOrder@UnicodeString@icu_56@@QBECHHABV12@HH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_start$ = 8						; size = 4
__length$ = 12						; size = 4
_srcText$ = 16						; size = 4
_srcStart$ = 20						; size = 4
_srcLength$ = 24					; size = 4
?compareCodePointOrder@UnicodeString@icu_56@@QBECHHABV12@HH@Z PROC ; icu_56::UnicodeString::compareCodePointOrder, COMDAT
; _this$ = ecx
; Line 3966
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _srcLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _srcStart$[ebp]
	push	ecx
	mov	edx, DWORD PTR _srcText$[ebp]
	push	edx
	mov	eax, DWORD PTR __length$[ebp]
	push	eax
	mov	ecx, DWORD PTR _start$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doCompareCodePointOrder@UnicodeString@icu_56@@ABECHHABV12@HH@Z ; icu_56::UnicodeString::doCompareCodePointOrder
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?compareCodePointOrder@UnicodeString@icu_56@@QBECHHABV12@HH@Z ENDP ; icu_56::UnicodeString::compareCodePointOrder
_TEXT	ENDS
PUBLIC	?compareCodePointOrder@UnicodeString@icu_56@@QBECHHPB_W@Z ; icu_56::UnicodeString::compareCodePointOrder
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?compareCodePointOrder@UnicodeString@icu_56@@QBECHHPB_W@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_start$ = 8						; size = 4
__length$ = 12						; size = 4
_srcChars$ = 16						; size = 4
?compareCodePointOrder@UnicodeString@icu_56@@QBECHHPB_W@Z PROC ; icu_56::UnicodeString::compareCodePointOrder, COMDAT
; _this$ = ecx
; Line 3972
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __length$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _srcChars$[ebp]
	push	ecx
	mov	edx, DWORD PTR __length$[ebp]
	push	edx
	mov	eax, DWORD PTR _start$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doCompareCodePointOrder@UnicodeString@icu_56@@ABECHHPB_WHH@Z ; icu_56::UnicodeString::doCompareCodePointOrder
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?compareCodePointOrder@UnicodeString@icu_56@@QBECHHPB_W@Z ENDP ; icu_56::UnicodeString::compareCodePointOrder
_TEXT	ENDS
PUBLIC	?compareCodePointOrder@UnicodeString@icu_56@@QBECHHPB_WHH@Z ; icu_56::UnicodeString::compareCodePointOrder
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?compareCodePointOrder@UnicodeString@icu_56@@QBECHHPB_WHH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_start$ = 8						; size = 4
__length$ = 12						; size = 4
_srcChars$ = 16						; size = 4
_srcStart$ = 20						; size = 4
_srcLength$ = 24					; size = 4
?compareCodePointOrder@UnicodeString@icu_56@@QBECHHPB_WHH@Z PROC ; icu_56::UnicodeString::compareCodePointOrder, COMDAT
; _this$ = ecx
; Line 3980
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _srcLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _srcStart$[ebp]
	push	ecx
	mov	edx, DWORD PTR _srcChars$[ebp]
	push	edx
	mov	eax, DWORD PTR __length$[ebp]
	push	eax
	mov	ecx, DWORD PTR _start$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doCompareCodePointOrder@UnicodeString@icu_56@@ABECHHPB_WHH@Z ; icu_56::UnicodeString::doCompareCodePointOrder
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?compareCodePointOrder@UnicodeString@icu_56@@QBECHHPB_WHH@Z ENDP ; icu_56::UnicodeString::compareCodePointOrder
_TEXT	ENDS
PUBLIC	?compareCodePointOrderBetween@UnicodeString@icu_56@@QBECHHABV12@HH@Z ; icu_56::UnicodeString::compareCodePointOrderBetween
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?compareCodePointOrderBetween@UnicodeString@icu_56@@QBECHHABV12@HH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_start$ = 8						; size = 4
_limit$ = 12						; size = 4
_srcText$ = 16						; size = 4
_srcStart$ = 20						; size = 4
_srcLimit$ = 24						; size = 4
?compareCodePointOrderBetween@UnicodeString@icu_56@@QBECHHABV12@HH@Z PROC ; icu_56::UnicodeString::compareCodePointOrderBetween, COMDAT
; _this$ = ecx
; Line 3988
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 3989
	mov	eax, DWORD PTR _srcLimit$[ebp]
	sub	eax, DWORD PTR _srcStart$[ebp]
	push	eax
	mov	ecx, DWORD PTR _srcStart$[ebp]
	push	ecx
	mov	edx, DWORD PTR _srcText$[ebp]
	push	edx
	mov	eax, DWORD PTR _limit$[ebp]
	sub	eax, DWORD PTR _start$[ebp]
	push	eax
	mov	ecx, DWORD PTR _start$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doCompareCodePointOrder@UnicodeString@icu_56@@ABECHHABV12@HH@Z ; icu_56::UnicodeString::doCompareCodePointOrder
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?compareCodePointOrderBetween@UnicodeString@icu_56@@QBECHHABV12@HH@Z ENDP ; icu_56::UnicodeString::compareCodePointOrderBetween
_TEXT	ENDS
PUBLIC	?doCaseCompare@UnicodeString@icu_56@@ABECHHABV12@HHI@Z ; icu_56::UnicodeString::doCaseCompare
EXTRN	?doCaseCompare@UnicodeString@icu_56@@ABECHHPB_WHHI@Z:PROC ; icu_56::UnicodeString::doCaseCompare
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?doCaseCompare@UnicodeString@icu_56@@ABECHHABV12@HHI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_start$ = 8						; size = 4
_thisLength$ = 12					; size = 4
_srcText$ = 16						; size = 4
_srcStart$ = 20						; size = 4
_srcLength$ = 24					; size = 4
_options$ = 28						; size = 4
?doCaseCompare@UnicodeString@icu_56@@ABECHHABV12@HHI@Z PROC ; icu_56::UnicodeString::doCaseCompare, COMDAT
; _this$ = ecx
; Line 3998
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 3999
	mov	ecx, DWORD PTR _srcText$[ebp]
	call	?isBogus@UnicodeString@icu_56@@QBECXZ	; icu_56::UnicodeString::isBogus
	movsx	eax, al
	test	eax, eax
	je	SHORT $LN2@doCaseComp
; Line 4000
	mov	ecx, DWORD PTR _this$[ebp]
	call	?isBogus@UnicodeString@icu_56@@QBECXZ	; icu_56::UnicodeString::isBogus
	movsx	eax, al
	test	eax, eax
	sete	al
	jmp	SHORT $LN3@doCaseComp
; Line 4001
	jmp	SHORT $LN3@doCaseComp
$LN2@doCaseComp:
; Line 4002
	lea	eax, DWORD PTR _srcLength$[ebp]
	push	eax
	lea	ecx, DWORD PTR _srcStart$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _srcText$[ebp]
	call	?pinIndices@UnicodeString@icu_56@@ABEXAAH0@Z ; icu_56::UnicodeString::pinIndices
; Line 4003
	mov	eax, DWORD PTR _options$[ebp]
	push	eax
	mov	ecx, DWORD PTR _srcLength$[ebp]
	push	ecx
	mov	edx, DWORD PTR _srcStart$[ebp]
	push	edx
	mov	ecx, DWORD PTR _srcText$[ebp]
	call	?getArrayStart@UnicodeString@icu_56@@ABEPB_WXZ ; icu_56::UnicodeString::getArrayStart
	push	eax
	mov	eax, DWORD PTR _thisLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _start$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doCaseCompare@UnicodeString@icu_56@@ABECHHPB_WHHI@Z ; icu_56::UnicodeString::doCaseCompare
$LN3@doCaseComp:
; Line 4005
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
?doCaseCompare@UnicodeString@icu_56@@ABECHHABV12@HHI@Z ENDP ; icu_56::UnicodeString::doCaseCompare
_TEXT	ENDS
PUBLIC	?caseCompare@UnicodeString@icu_56@@QBECABV12@I@Z ; icu_56::UnicodeString::caseCompare
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?caseCompare@UnicodeString@icu_56@@QBECABV12@I@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_text$ = 8						; size = 4
_options$ = 12						; size = 4
?caseCompare@UnicodeString@icu_56@@QBECABV12@I@Z PROC	; icu_56::UnicodeString::caseCompare, COMDAT
; _this$ = ecx
; Line 4008
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 4009
	mov	eax, DWORD PTR _options$[ebp]
	push	eax
	mov	ecx, DWORD PTR _text$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	push	eax
	push	0
	mov	ecx, DWORD PTR _text$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doCaseCompare@UnicodeString@icu_56@@ABECHHABV12@HHI@Z ; icu_56::UnicodeString::doCaseCompare
; Line 4010
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?caseCompare@UnicodeString@icu_56@@QBECABV12@I@Z ENDP	; icu_56::UnicodeString::caseCompare
_TEXT	ENDS
PUBLIC	?caseCompare@UnicodeString@icu_56@@QBECHHABV12@I@Z ; icu_56::UnicodeString::caseCompare
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?caseCompare@UnicodeString@icu_56@@QBECHHABV12@I@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_start$ = 8						; size = 4
__length$ = 12						; size = 4
_srcText$ = 16						; size = 4
_options$ = 20						; size = 4
?caseCompare@UnicodeString@icu_56@@QBECHHABV12@I@Z PROC	; icu_56::UnicodeString::caseCompare, COMDAT
; _this$ = ecx
; Line 4016
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 4017
	mov	eax, DWORD PTR _options$[ebp]
	push	eax
	mov	ecx, DWORD PTR _srcText$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	push	eax
	push	0
	mov	ecx, DWORD PTR _srcText$[ebp]
	push	ecx
	mov	edx, DWORD PTR __length$[ebp]
	push	edx
	mov	eax, DWORD PTR _start$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doCaseCompare@UnicodeString@icu_56@@ABECHHABV12@HHI@Z ; icu_56::UnicodeString::doCaseCompare
; Line 4018
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?caseCompare@UnicodeString@icu_56@@QBECHHABV12@I@Z ENDP	; icu_56::UnicodeString::caseCompare
_TEXT	ENDS
PUBLIC	?caseCompare@UnicodeString@icu_56@@QBECPB_WHI@Z	; icu_56::UnicodeString::caseCompare
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?caseCompare@UnicodeString@icu_56@@QBECPB_WHI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_srcChars$ = 8						; size = 4
_srcLength$ = 12					; size = 4
_options$ = 16						; size = 4
?caseCompare@UnicodeString@icu_56@@QBECPB_WHI@Z PROC	; icu_56::UnicodeString::caseCompare, COMDAT
; _this$ = ecx
; Line 4023
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 4024
	mov	eax, DWORD PTR _options$[ebp]
	push	eax
	mov	ecx, DWORD PTR _srcLength$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _srcChars$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doCaseCompare@UnicodeString@icu_56@@ABECHHPB_WHHI@Z ; icu_56::UnicodeString::doCaseCompare
; Line 4025
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?caseCompare@UnicodeString@icu_56@@QBECPB_WHI@Z ENDP	; icu_56::UnicodeString::caseCompare
_TEXT	ENDS
PUBLIC	?caseCompare@UnicodeString@icu_56@@QBECHHABV12@HHI@Z ; icu_56::UnicodeString::caseCompare
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?caseCompare@UnicodeString@icu_56@@QBECHHABV12@HHI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_start$ = 8						; size = 4
__length$ = 12						; size = 4
_srcText$ = 16						; size = 4
_srcStart$ = 20						; size = 4
_srcLength$ = 24					; size = 4
_options$ = 28						; size = 4
?caseCompare@UnicodeString@icu_56@@QBECHHABV12@HHI@Z PROC ; icu_56::UnicodeString::caseCompare, COMDAT
; _this$ = ecx
; Line 4033
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 4034
	mov	eax, DWORD PTR _options$[ebp]
	push	eax
	mov	ecx, DWORD PTR _srcLength$[ebp]
	push	ecx
	mov	edx, DWORD PTR _srcStart$[ebp]
	push	edx
	mov	eax, DWORD PTR _srcText$[ebp]
	push	eax
	mov	ecx, DWORD PTR __length$[ebp]
	push	ecx
	mov	edx, DWORD PTR _start$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doCaseCompare@UnicodeString@icu_56@@ABECHHABV12@HHI@Z ; icu_56::UnicodeString::doCaseCompare
; Line 4035
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
?caseCompare@UnicodeString@icu_56@@QBECHHABV12@HHI@Z ENDP ; icu_56::UnicodeString::caseCompare
_TEXT	ENDS
PUBLIC	?caseCompare@UnicodeString@icu_56@@QBECHHPB_WI@Z ; icu_56::UnicodeString::caseCompare
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?caseCompare@UnicodeString@icu_56@@QBECHHPB_WI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_start$ = 8						; size = 4
__length$ = 12						; size = 4
_srcChars$ = 16						; size = 4
_options$ = 20						; size = 4
?caseCompare@UnicodeString@icu_56@@QBECHHPB_WI@Z PROC	; icu_56::UnicodeString::caseCompare, COMDAT
; _this$ = ecx
; Line 4041
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 4042
	mov	eax, DWORD PTR _options$[ebp]
	push	eax
	mov	ecx, DWORD PTR __length$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _srcChars$[ebp]
	push	edx
	mov	eax, DWORD PTR __length$[ebp]
	push	eax
	mov	ecx, DWORD PTR _start$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doCaseCompare@UnicodeString@icu_56@@ABECHHPB_WHHI@Z ; icu_56::UnicodeString::doCaseCompare
; Line 4043
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?caseCompare@UnicodeString@icu_56@@QBECHHPB_WI@Z ENDP	; icu_56::UnicodeString::caseCompare
_TEXT	ENDS
PUBLIC	?caseCompare@UnicodeString@icu_56@@QBECHHPB_WHHI@Z ; icu_56::UnicodeString::caseCompare
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?caseCompare@UnicodeString@icu_56@@QBECHHPB_WHHI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_start$ = 8						; size = 4
__length$ = 12						; size = 4
_srcChars$ = 16						; size = 4
_srcStart$ = 20						; size = 4
_srcLength$ = 24					; size = 4
_options$ = 28						; size = 4
?caseCompare@UnicodeString@icu_56@@QBECHHPB_WHHI@Z PROC	; icu_56::UnicodeString::caseCompare, COMDAT
; _this$ = ecx
; Line 4051
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 4052
	mov	eax, DWORD PTR _options$[ebp]
	push	eax
	mov	ecx, DWORD PTR _srcLength$[ebp]
	push	ecx
	mov	edx, DWORD PTR _srcStart$[ebp]
	push	edx
	mov	eax, DWORD PTR _srcChars$[ebp]
	push	eax
	mov	ecx, DWORD PTR __length$[ebp]
	push	ecx
	mov	edx, DWORD PTR _start$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doCaseCompare@UnicodeString@icu_56@@ABECHHPB_WHHI@Z ; icu_56::UnicodeString::doCaseCompare
; Line 4053
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
?caseCompare@UnicodeString@icu_56@@QBECHHPB_WHHI@Z ENDP	; icu_56::UnicodeString::caseCompare
_TEXT	ENDS
PUBLIC	?caseCompareBetween@UnicodeString@icu_56@@QBECHHABV12@HHI@Z ; icu_56::UnicodeString::caseCompareBetween
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?caseCompareBetween@UnicodeString@icu_56@@QBECHHABV12@HHI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_start$ = 8						; size = 4
_limit$ = 12						; size = 4
_srcText$ = 16						; size = 4
_srcStart$ = 20						; size = 4
_srcLimit$ = 24						; size = 4
_options$ = 28						; size = 4
?caseCompareBetween@UnicodeString@icu_56@@QBECHHABV12@HHI@Z PROC ; icu_56::UnicodeString::caseCompareBetween, COMDAT
; _this$ = ecx
; Line 4061
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 4062
	mov	eax, DWORD PTR _options$[ebp]
	push	eax
	mov	ecx, DWORD PTR _srcLimit$[ebp]
	sub	ecx, DWORD PTR _srcStart$[ebp]
	push	ecx
	mov	edx, DWORD PTR _srcStart$[ebp]
	push	edx
	mov	eax, DWORD PTR _srcText$[ebp]
	push	eax
	mov	ecx, DWORD PTR _limit$[ebp]
	sub	ecx, DWORD PTR _start$[ebp]
	push	ecx
	mov	edx, DWORD PTR _start$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doCaseCompare@UnicodeString@icu_56@@ABECHHABV12@HHI@Z ; icu_56::UnicodeString::doCaseCompare
; Line 4063
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
?caseCompareBetween@UnicodeString@icu_56@@QBECHHABV12@HHI@Z ENDP ; icu_56::UnicodeString::caseCompareBetween
_TEXT	ENDS
PUBLIC	?indexOf@UnicodeString@icu_56@@QBEHABV12@HHHH@Z	; icu_56::UnicodeString::indexOf
EXTRN	?indexOf@UnicodeString@icu_56@@QBEHPB_WHHHH@Z:PROC ; icu_56::UnicodeString::indexOf
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?indexOf@UnicodeString@icu_56@@QBEHABV12@HHHH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_srcText$ = 8						; size = 4
_srcStart$ = 12						; size = 4
_srcLength$ = 16					; size = 4
_start$ = 20						; size = 4
__length$ = 24						; size = 4
?indexOf@UnicodeString@icu_56@@QBEHABV12@HHHH@Z PROC	; icu_56::UnicodeString::indexOf, COMDAT
; _this$ = ecx
; Line 4071
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 4072
	mov	ecx, DWORD PTR _srcText$[ebp]
	call	?isBogus@UnicodeString@icu_56@@QBECXZ	; icu_56::UnicodeString::isBogus
	movsx	eax, al
	test	eax, eax
	jne	SHORT $LN2@indexOf
; Line 4073
	lea	eax, DWORD PTR _srcLength$[ebp]
	push	eax
	lea	ecx, DWORD PTR _srcStart$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _srcText$[ebp]
	call	?pinIndices@UnicodeString@icu_56@@ABEXAAH0@Z ; icu_56::UnicodeString::pinIndices
; Line 4074
	cmp	DWORD PTR _srcLength$[ebp], 0
	jle	SHORT $LN2@indexOf
; Line 4075
	mov	eax, DWORD PTR __length$[ebp]
	push	eax
	mov	ecx, DWORD PTR _start$[ebp]
	push	ecx
	mov	edx, DWORD PTR _srcLength$[ebp]
	push	edx
	mov	eax, DWORD PTR _srcStart$[ebp]
	push	eax
	mov	ecx, DWORD PTR _srcText$[ebp]
	call	?getArrayStart@UnicodeString@icu_56@@ABEPB_WXZ ; icu_56::UnicodeString::getArrayStart
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?indexOf@UnicodeString@icu_56@@QBEHPB_WHHHH@Z ; icu_56::UnicodeString::indexOf
	jmp	SHORT $LN3@indexOf
$LN2@indexOf:
; Line 4078
	or	eax, -1
$LN3@indexOf:
; Line 4079
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?indexOf@UnicodeString@icu_56@@QBEHABV12@HHHH@Z ENDP	; icu_56::UnicodeString::indexOf
_TEXT	ENDS
PUBLIC	?indexOf@UnicodeString@icu_56@@QBEHABV12@@Z	; icu_56::UnicodeString::indexOf
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?indexOf@UnicodeString@icu_56@@QBEHABV12@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_text$ = 8						; size = 4
?indexOf@UnicodeString@icu_56@@QBEHABV12@@Z PROC	; icu_56::UnicodeString::indexOf, COMDAT
; _this$ = ecx
; Line 4083
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	push	eax
	push	0
	mov	ecx, DWORD PTR _text$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	push	eax
	push	0
	mov	eax, DWORD PTR _text$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?indexOf@UnicodeString@icu_56@@QBEHABV12@HHHH@Z ; icu_56::UnicodeString::indexOf
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?indexOf@UnicodeString@icu_56@@QBEHABV12@@Z ENDP	; icu_56::UnicodeString::indexOf
_TEXT	ENDS
PUBLIC	?indexOf@UnicodeString@icu_56@@QBEHABV12@H@Z	; icu_56::UnicodeString::indexOf
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?indexOf@UnicodeString@icu_56@@QBEHABV12@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_text$ = 8						; size = 4
_start$ = 12						; size = 4
?indexOf@UnicodeString@icu_56@@QBEHABV12@H@Z PROC	; icu_56::UnicodeString::indexOf, COMDAT
; _this$ = ecx
; Line 4087
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 4088
	lea	eax, DWORD PTR _start$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?pinIndex@UnicodeString@icu_56@@ABEXAAH@Z ; icu_56::UnicodeString::pinIndex
; Line 4089
	mov	ecx, DWORD PTR _this$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	sub	eax, DWORD PTR _start$[ebp]
	push	eax
	mov	eax, DWORD PTR _start$[ebp]
	push	eax
	mov	ecx, DWORD PTR _text$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	push	eax
	push	0
	mov	ecx, DWORD PTR _text$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?indexOf@UnicodeString@icu_56@@QBEHABV12@HHHH@Z ; icu_56::UnicodeString::indexOf
; Line 4090
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?indexOf@UnicodeString@icu_56@@QBEHABV12@H@Z ENDP	; icu_56::UnicodeString::indexOf
_TEXT	ENDS
PUBLIC	?indexOf@UnicodeString@icu_56@@QBEHABV12@HH@Z	; icu_56::UnicodeString::indexOf
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?indexOf@UnicodeString@icu_56@@QBEHABV12@HH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_text$ = 8						; size = 4
_start$ = 12						; size = 4
__length$ = 16						; size = 4
?indexOf@UnicodeString@icu_56@@QBEHABV12@HH@Z PROC	; icu_56::UnicodeString::indexOf, COMDAT
; _this$ = ecx
; Line 4096
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __length$[ebp]
	push	eax
	mov	ecx, DWORD PTR _start$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _text$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	push	eax
	push	0
	mov	edx, DWORD PTR _text$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?indexOf@UnicodeString@icu_56@@QBEHABV12@HHHH@Z ; icu_56::UnicodeString::indexOf
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?indexOf@UnicodeString@icu_56@@QBEHABV12@HH@Z ENDP	; icu_56::UnicodeString::indexOf
_TEXT	ENDS
PUBLIC	?indexOf@UnicodeString@icu_56@@QBEHPB_WHH@Z	; icu_56::UnicodeString::indexOf
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?indexOf@UnicodeString@icu_56@@QBEHPB_WHH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_srcChars$ = 8						; size = 4
_srcLength$ = 12					; size = 4
_start$ = 16						; size = 4
?indexOf@UnicodeString@icu_56@@QBEHPB_WHH@Z PROC	; icu_56::UnicodeString::indexOf, COMDAT
; _this$ = ecx
; Line 4101
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 4102
	lea	eax, DWORD PTR _start$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?pinIndex@UnicodeString@icu_56@@ABEXAAH@Z ; icu_56::UnicodeString::pinIndex
; Line 4103
	mov	ecx, DWORD PTR _this$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	sub	eax, DWORD PTR _start$[ebp]
	push	eax
	mov	eax, DWORD PTR _start$[ebp]
	push	eax
	mov	ecx, DWORD PTR _srcLength$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _srcChars$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?indexOf@UnicodeString@icu_56@@QBEHPB_WHHHH@Z ; icu_56::UnicodeString::indexOf
; Line 4104
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?indexOf@UnicodeString@icu_56@@QBEHPB_WHH@Z ENDP	; icu_56::UnicodeString::indexOf
_TEXT	ENDS
PUBLIC	?indexOf@UnicodeString@icu_56@@QBEHPB_WHHH@Z	; icu_56::UnicodeString::indexOf
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?indexOf@UnicodeString@icu_56@@QBEHPB_WHHH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_srcChars$ = 8						; size = 4
_srcLength$ = 12					; size = 4
_start$ = 16						; size = 4
__length$ = 20						; size = 4
?indexOf@UnicodeString@icu_56@@QBEHPB_WHHH@Z PROC	; icu_56::UnicodeString::indexOf, COMDAT
; _this$ = ecx
; Line 4111
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __length$[ebp]
	push	eax
	mov	ecx, DWORD PTR _start$[ebp]
	push	ecx
	mov	edx, DWORD PTR _srcLength$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _srcChars$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?indexOf@UnicodeString@icu_56@@QBEHPB_WHHHH@Z ; icu_56::UnicodeString::indexOf
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?indexOf@UnicodeString@icu_56@@QBEHPB_WHHH@Z ENDP	; icu_56::UnicodeString::indexOf
_TEXT	ENDS
PUBLIC	?indexOf@UnicodeString@icu_56@@QBEH_WHH@Z	; icu_56::UnicodeString::indexOf
EXTRN	?doIndexOf@UnicodeString@icu_56@@ABEH_WHH@Z:PROC ; icu_56::UnicodeString::doIndexOf
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?indexOf@UnicodeString@icu_56@@QBEH_WHH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_c$ = 8							; size = 2
_start$ = 12						; size = 4
__length$ = 16						; size = 4
?indexOf@UnicodeString@icu_56@@QBEH_WHH@Z PROC		; icu_56::UnicodeString::indexOf, COMDAT
; _this$ = ecx
; Line 4117
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __length$[ebp]
	push	eax
	mov	ecx, DWORD PTR _start$[ebp]
	push	ecx
	movzx	edx, WORD PTR _c$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doIndexOf@UnicodeString@icu_56@@ABEH_WHH@Z ; icu_56::UnicodeString::doIndexOf
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?indexOf@UnicodeString@icu_56@@QBEH_WHH@Z ENDP		; icu_56::UnicodeString::indexOf
_TEXT	ENDS
PUBLIC	?indexOf@UnicodeString@icu_56@@QBEHHHH@Z	; icu_56::UnicodeString::indexOf
EXTRN	?doIndexOf@UnicodeString@icu_56@@ABEHHHH@Z:PROC	; icu_56::UnicodeString::doIndexOf
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?indexOf@UnicodeString@icu_56@@QBEHHHH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_c$ = 8							; size = 4
_start$ = 12						; size = 4
__length$ = 16						; size = 4
?indexOf@UnicodeString@icu_56@@QBEHHHH@Z PROC		; icu_56::UnicodeString::indexOf, COMDAT
; _this$ = ecx
; Line 4123
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __length$[ebp]
	push	eax
	mov	ecx, DWORD PTR _start$[ebp]
	push	ecx
	mov	edx, DWORD PTR _c$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doIndexOf@UnicodeString@icu_56@@ABEHHHH@Z ; icu_56::UnicodeString::doIndexOf
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?indexOf@UnicodeString@icu_56@@QBEHHHH@Z ENDP		; icu_56::UnicodeString::indexOf
_TEXT	ENDS
PUBLIC	?indexOf@UnicodeString@icu_56@@QBEH_W@Z		; icu_56::UnicodeString::indexOf
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?indexOf@UnicodeString@icu_56@@QBEH_W@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_c$ = 8							; size = 2
?indexOf@UnicodeString@icu_56@@QBEH_W@Z PROC		; icu_56::UnicodeString::indexOf, COMDAT
; _this$ = ecx
; Line 4127
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	push	eax
	push	0
	movzx	eax, WORD PTR _c$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doIndexOf@UnicodeString@icu_56@@ABEH_WHH@Z ; icu_56::UnicodeString::doIndexOf
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?indexOf@UnicodeString@icu_56@@QBEH_W@Z ENDP		; icu_56::UnicodeString::indexOf
_TEXT	ENDS
PUBLIC	?indexOf@UnicodeString@icu_56@@QBEHH@Z		; icu_56::UnicodeString::indexOf
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?indexOf@UnicodeString@icu_56@@QBEHH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_c$ = 8							; size = 4
?indexOf@UnicodeString@icu_56@@QBEHH@Z PROC		; icu_56::UnicodeString::indexOf, COMDAT
; _this$ = ecx
; Line 4131
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	push	eax
	push	0
	mov	eax, DWORD PTR _c$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?indexOf@UnicodeString@icu_56@@QBEHHHH@Z ; icu_56::UnicodeString::indexOf
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?indexOf@UnicodeString@icu_56@@QBEHH@Z ENDP		; icu_56::UnicodeString::indexOf
_TEXT	ENDS
PUBLIC	?indexOf@UnicodeString@icu_56@@QBEH_WH@Z	; icu_56::UnicodeString::indexOf
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?indexOf@UnicodeString@icu_56@@QBEH_WH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_c$ = 8							; size = 2
_start$ = 12						; size = 4
?indexOf@UnicodeString@icu_56@@QBEH_WH@Z PROC		; icu_56::UnicodeString::indexOf, COMDAT
; _this$ = ecx
; Line 4135
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 4136
	lea	eax, DWORD PTR _start$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?pinIndex@UnicodeString@icu_56@@ABEXAAH@Z ; icu_56::UnicodeString::pinIndex
; Line 4137
	mov	ecx, DWORD PTR _this$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	sub	eax, DWORD PTR _start$[ebp]
	push	eax
	mov	eax, DWORD PTR _start$[ebp]
	push	eax
	movzx	ecx, WORD PTR _c$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doIndexOf@UnicodeString@icu_56@@ABEH_WHH@Z ; icu_56::UnicodeString::doIndexOf
; Line 4138
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?indexOf@UnicodeString@icu_56@@QBEH_WH@Z ENDP		; icu_56::UnicodeString::indexOf
_TEXT	ENDS
PUBLIC	?indexOf@UnicodeString@icu_56@@QBEHHH@Z		; icu_56::UnicodeString::indexOf
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?indexOf@UnicodeString@icu_56@@QBEHHH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_c$ = 8							; size = 4
_start$ = 12						; size = 4
?indexOf@UnicodeString@icu_56@@QBEHHH@Z PROC		; icu_56::UnicodeString::indexOf, COMDAT
; _this$ = ecx
; Line 4142
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 4143
	lea	eax, DWORD PTR _start$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?pinIndex@UnicodeString@icu_56@@ABEXAAH@Z ; icu_56::UnicodeString::pinIndex
; Line 4144
	mov	ecx, DWORD PTR _this$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	sub	eax, DWORD PTR _start$[ebp]
	push	eax
	mov	eax, DWORD PTR _start$[ebp]
	push	eax
	mov	ecx, DWORD PTR _c$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?indexOf@UnicodeString@icu_56@@QBEHHHH@Z ; icu_56::UnicodeString::indexOf
; Line 4145
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?indexOf@UnicodeString@icu_56@@QBEHHH@Z ENDP		; icu_56::UnicodeString::indexOf
_TEXT	ENDS
PUBLIC	?lastIndexOf@UnicodeString@icu_56@@QBEHPB_WHHH@Z ; icu_56::UnicodeString::lastIndexOf
EXTRN	?lastIndexOf@UnicodeString@icu_56@@QBEHPB_WHHHH@Z:PROC ; icu_56::UnicodeString::lastIndexOf
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?lastIndexOf@UnicodeString@icu_56@@QBEHPB_WHHH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_srcChars$ = 8						; size = 4
_srcLength$ = 12					; size = 4
_start$ = 16						; size = 4
__length$ = 20						; size = 4
?lastIndexOf@UnicodeString@icu_56@@QBEHPB_WHHH@Z PROC	; icu_56::UnicodeString::lastIndexOf, COMDAT
; _this$ = ecx
; Line 4152
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __length$[ebp]
	push	eax
	mov	ecx, DWORD PTR _start$[ebp]
	push	ecx
	mov	edx, DWORD PTR _srcLength$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _srcChars$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?lastIndexOf@UnicodeString@icu_56@@QBEHPB_WHHHH@Z ; icu_56::UnicodeString::lastIndexOf
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?lastIndexOf@UnicodeString@icu_56@@QBEHPB_WHHH@Z ENDP	; icu_56::UnicodeString::lastIndexOf
_TEXT	ENDS
PUBLIC	?lastIndexOf@UnicodeString@icu_56@@QBEHPB_WHH@Z	; icu_56::UnicodeString::lastIndexOf
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?lastIndexOf@UnicodeString@icu_56@@QBEHPB_WHH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_srcChars$ = 8						; size = 4
_srcLength$ = 12					; size = 4
_start$ = 16						; size = 4
?lastIndexOf@UnicodeString@icu_56@@QBEHPB_WHH@Z PROC	; icu_56::UnicodeString::lastIndexOf, COMDAT
; _this$ = ecx
; Line 4157
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 4158
	lea	eax, DWORD PTR _start$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?pinIndex@UnicodeString@icu_56@@ABEXAAH@Z ; icu_56::UnicodeString::pinIndex
; Line 4159
	mov	ecx, DWORD PTR _this$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	sub	eax, DWORD PTR _start$[ebp]
	push	eax
	mov	eax, DWORD PTR _start$[ebp]
	push	eax
	mov	ecx, DWORD PTR _srcLength$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _srcChars$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?lastIndexOf@UnicodeString@icu_56@@QBEHPB_WHHHH@Z ; icu_56::UnicodeString::lastIndexOf
; Line 4160
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?lastIndexOf@UnicodeString@icu_56@@QBEHPB_WHH@Z ENDP	; icu_56::UnicodeString::lastIndexOf
_TEXT	ENDS
PUBLIC	?lastIndexOf@UnicodeString@icu_56@@QBEHABV12@HHHH@Z ; icu_56::UnicodeString::lastIndexOf
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?lastIndexOf@UnicodeString@icu_56@@QBEHABV12@HHHH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_srcText$ = 8						; size = 4
_srcStart$ = 12						; size = 4
_srcLength$ = 16					; size = 4
_start$ = 20						; size = 4
__length$ = 24						; size = 4
?lastIndexOf@UnicodeString@icu_56@@QBEHABV12@HHHH@Z PROC ; icu_56::UnicodeString::lastIndexOf, COMDAT
; _this$ = ecx
; Line 4168
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 4169
	mov	ecx, DWORD PTR _srcText$[ebp]
	call	?isBogus@UnicodeString@icu_56@@QBECXZ	; icu_56::UnicodeString::isBogus
	movsx	eax, al
	test	eax, eax
	jne	SHORT $LN2@lastIndexO
; Line 4170
	lea	eax, DWORD PTR _srcLength$[ebp]
	push	eax
	lea	ecx, DWORD PTR _srcStart$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _srcText$[ebp]
	call	?pinIndices@UnicodeString@icu_56@@ABEXAAH0@Z ; icu_56::UnicodeString::pinIndices
; Line 4171
	cmp	DWORD PTR _srcLength$[ebp], 0
	jle	SHORT $LN2@lastIndexO
; Line 4172
	mov	eax, DWORD PTR __length$[ebp]
	push	eax
	mov	ecx, DWORD PTR _start$[ebp]
	push	ecx
	mov	edx, DWORD PTR _srcLength$[ebp]
	push	edx
	mov	eax, DWORD PTR _srcStart$[ebp]
	push	eax
	mov	ecx, DWORD PTR _srcText$[ebp]
	call	?getArrayStart@UnicodeString@icu_56@@ABEPB_WXZ ; icu_56::UnicodeString::getArrayStart
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?lastIndexOf@UnicodeString@icu_56@@QBEHPB_WHHHH@Z ; icu_56::UnicodeString::lastIndexOf
	jmp	SHORT $LN3@lastIndexO
$LN2@lastIndexO:
; Line 4175
	or	eax, -1
$LN3@lastIndexO:
; Line 4176
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?lastIndexOf@UnicodeString@icu_56@@QBEHABV12@HHHH@Z ENDP ; icu_56::UnicodeString::lastIndexOf
_TEXT	ENDS
PUBLIC	?lastIndexOf@UnicodeString@icu_56@@QBEHABV12@HH@Z ; icu_56::UnicodeString::lastIndexOf
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?lastIndexOf@UnicodeString@icu_56@@QBEHABV12@HH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_text$ = 8						; size = 4
_start$ = 12						; size = 4
__length$ = 16						; size = 4
?lastIndexOf@UnicodeString@icu_56@@QBEHABV12@HH@Z PROC	; icu_56::UnicodeString::lastIndexOf, COMDAT
; _this$ = ecx
; Line 4182
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __length$[ebp]
	push	eax
	mov	ecx, DWORD PTR _start$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _text$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	push	eax
	push	0
	mov	edx, DWORD PTR _text$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?lastIndexOf@UnicodeString@icu_56@@QBEHABV12@HHHH@Z ; icu_56::UnicodeString::lastIndexOf
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?lastIndexOf@UnicodeString@icu_56@@QBEHABV12@HH@Z ENDP	; icu_56::UnicodeString::lastIndexOf
_TEXT	ENDS
PUBLIC	?lastIndexOf@UnicodeString@icu_56@@QBEHABV12@H@Z ; icu_56::UnicodeString::lastIndexOf
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?lastIndexOf@UnicodeString@icu_56@@QBEHABV12@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_text$ = 8						; size = 4
_start$ = 12						; size = 4
?lastIndexOf@UnicodeString@icu_56@@QBEHABV12@H@Z PROC	; icu_56::UnicodeString::lastIndexOf, COMDAT
; _this$ = ecx
; Line 4186
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 4187
	lea	eax, DWORD PTR _start$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?pinIndex@UnicodeString@icu_56@@ABEXAAH@Z ; icu_56::UnicodeString::pinIndex
; Line 4188
	mov	ecx, DWORD PTR _this$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	sub	eax, DWORD PTR _start$[ebp]
	push	eax
	mov	eax, DWORD PTR _start$[ebp]
	push	eax
	mov	ecx, DWORD PTR _text$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	push	eax
	push	0
	mov	ecx, DWORD PTR _text$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?lastIndexOf@UnicodeString@icu_56@@QBEHABV12@HHHH@Z ; icu_56::UnicodeString::lastIndexOf
; Line 4189
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?lastIndexOf@UnicodeString@icu_56@@QBEHABV12@H@Z ENDP	; icu_56::UnicodeString::lastIndexOf
_TEXT	ENDS
PUBLIC	?lastIndexOf@UnicodeString@icu_56@@QBEHABV12@@Z	; icu_56::UnicodeString::lastIndexOf
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?lastIndexOf@UnicodeString@icu_56@@QBEHABV12@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_text$ = 8						; size = 4
?lastIndexOf@UnicodeString@icu_56@@QBEHABV12@@Z PROC	; icu_56::UnicodeString::lastIndexOf, COMDAT
; _this$ = ecx
; Line 4193
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	push	eax
	push	0
	mov	ecx, DWORD PTR _text$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	push	eax
	push	0
	mov	eax, DWORD PTR _text$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?lastIndexOf@UnicodeString@icu_56@@QBEHABV12@HHHH@Z ; icu_56::UnicodeString::lastIndexOf
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?lastIndexOf@UnicodeString@icu_56@@QBEHABV12@@Z ENDP	; icu_56::UnicodeString::lastIndexOf
_TEXT	ENDS
PUBLIC	?lastIndexOf@UnicodeString@icu_56@@QBEH_WHH@Z	; icu_56::UnicodeString::lastIndexOf
EXTRN	?doLastIndexOf@UnicodeString@icu_56@@ABEH_WHH@Z:PROC ; icu_56::UnicodeString::doLastIndexOf
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?lastIndexOf@UnicodeString@icu_56@@QBEH_WHH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_c$ = 8							; size = 2
_start$ = 12						; size = 4
__length$ = 16						; size = 4
?lastIndexOf@UnicodeString@icu_56@@QBEH_WHH@Z PROC	; icu_56::UnicodeString::lastIndexOf, COMDAT
; _this$ = ecx
; Line 4199
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __length$[ebp]
	push	eax
	mov	ecx, DWORD PTR _start$[ebp]
	push	ecx
	movzx	edx, WORD PTR _c$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doLastIndexOf@UnicodeString@icu_56@@ABEH_WHH@Z ; icu_56::UnicodeString::doLastIndexOf
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?lastIndexOf@UnicodeString@icu_56@@QBEH_WHH@Z ENDP	; icu_56::UnicodeString::lastIndexOf
_TEXT	ENDS
PUBLIC	?lastIndexOf@UnicodeString@icu_56@@QBEHHHH@Z	; icu_56::UnicodeString::lastIndexOf
EXTRN	?doLastIndexOf@UnicodeString@icu_56@@ABEHHHH@Z:PROC ; icu_56::UnicodeString::doLastIndexOf
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?lastIndexOf@UnicodeString@icu_56@@QBEHHHH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_c$ = 8							; size = 4
_start$ = 12						; size = 4
__length$ = 16						; size = 4
?lastIndexOf@UnicodeString@icu_56@@QBEHHHH@Z PROC	; icu_56::UnicodeString::lastIndexOf, COMDAT
; _this$ = ecx
; Line 4204
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 4205
	mov	eax, DWORD PTR __length$[ebp]
	push	eax
	mov	ecx, DWORD PTR _start$[ebp]
	push	ecx
	mov	edx, DWORD PTR _c$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doLastIndexOf@UnicodeString@icu_56@@ABEHHHH@Z ; icu_56::UnicodeString::doLastIndexOf
; Line 4206
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?lastIndexOf@UnicodeString@icu_56@@QBEHHHH@Z ENDP	; icu_56::UnicodeString::lastIndexOf
_TEXT	ENDS
PUBLIC	?lastIndexOf@UnicodeString@icu_56@@QBEH_W@Z	; icu_56::UnicodeString::lastIndexOf
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?lastIndexOf@UnicodeString@icu_56@@QBEH_W@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_c$ = 8							; size = 2
?lastIndexOf@UnicodeString@icu_56@@QBEH_W@Z PROC	; icu_56::UnicodeString::lastIndexOf, COMDAT
; _this$ = ecx
; Line 4210
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	push	eax
	push	0
	movzx	eax, WORD PTR _c$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doLastIndexOf@UnicodeString@icu_56@@ABEH_WHH@Z ; icu_56::UnicodeString::doLastIndexOf
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?lastIndexOf@UnicodeString@icu_56@@QBEH_W@Z ENDP	; icu_56::UnicodeString::lastIndexOf
_TEXT	ENDS
PUBLIC	?lastIndexOf@UnicodeString@icu_56@@QBEHH@Z	; icu_56::UnicodeString::lastIndexOf
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?lastIndexOf@UnicodeString@icu_56@@QBEHH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_c$ = 8							; size = 4
?lastIndexOf@UnicodeString@icu_56@@QBEHH@Z PROC		; icu_56::UnicodeString::lastIndexOf, COMDAT
; _this$ = ecx
; Line 4213
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 4214
	mov	ecx, DWORD PTR _this$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	push	eax
	push	0
	mov	eax, DWORD PTR _c$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?lastIndexOf@UnicodeString@icu_56@@QBEHHHH@Z ; icu_56::UnicodeString::lastIndexOf
; Line 4215
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?lastIndexOf@UnicodeString@icu_56@@QBEHH@Z ENDP		; icu_56::UnicodeString::lastIndexOf
_TEXT	ENDS
PUBLIC	?lastIndexOf@UnicodeString@icu_56@@QBEH_WH@Z	; icu_56::UnicodeString::lastIndexOf
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?lastIndexOf@UnicodeString@icu_56@@QBEH_WH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_c$ = 8							; size = 2
_start$ = 12						; size = 4
?lastIndexOf@UnicodeString@icu_56@@QBEH_WH@Z PROC	; icu_56::UnicodeString::lastIndexOf, COMDAT
; _this$ = ecx
; Line 4219
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 4220
	lea	eax, DWORD PTR _start$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?pinIndex@UnicodeString@icu_56@@ABEXAAH@Z ; icu_56::UnicodeString::pinIndex
; Line 4221
	mov	ecx, DWORD PTR _this$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	sub	eax, DWORD PTR _start$[ebp]
	push	eax
	mov	eax, DWORD PTR _start$[ebp]
	push	eax
	movzx	ecx, WORD PTR _c$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doLastIndexOf@UnicodeString@icu_56@@ABEH_WHH@Z ; icu_56::UnicodeString::doLastIndexOf
; Line 4222
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?lastIndexOf@UnicodeString@icu_56@@QBEH_WH@Z ENDP	; icu_56::UnicodeString::lastIndexOf
_TEXT	ENDS
PUBLIC	?lastIndexOf@UnicodeString@icu_56@@QBEHHH@Z	; icu_56::UnicodeString::lastIndexOf
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?lastIndexOf@UnicodeString@icu_56@@QBEHHH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_c$ = 8							; size = 4
_start$ = 12						; size = 4
?lastIndexOf@UnicodeString@icu_56@@QBEHHH@Z PROC	; icu_56::UnicodeString::lastIndexOf, COMDAT
; _this$ = ecx
; Line 4226
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 4227
	lea	eax, DWORD PTR _start$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?pinIndex@UnicodeString@icu_56@@ABEXAAH@Z ; icu_56::UnicodeString::pinIndex
; Line 4228
	mov	ecx, DWORD PTR _this$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	sub	eax, DWORD PTR _start$[ebp]
	push	eax
	mov	eax, DWORD PTR _start$[ebp]
	push	eax
	mov	ecx, DWORD PTR _c$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?lastIndexOf@UnicodeString@icu_56@@QBEHHHH@Z ; icu_56::UnicodeString::lastIndexOf
; Line 4229
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?lastIndexOf@UnicodeString@icu_56@@QBEHHH@Z ENDP	; icu_56::UnicodeString::lastIndexOf
_TEXT	ENDS
PUBLIC	?startsWith@UnicodeString@icu_56@@QBECABV12@@Z	; icu_56::UnicodeString::startsWith
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?startsWith@UnicodeString@icu_56@@QBECABV12@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_text$ = 8						; size = 4
?startsWith@UnicodeString@icu_56@@QBECABV12@@Z PROC	; icu_56::UnicodeString::startsWith, COMDAT
; _this$ = ecx
; Line 4233
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _text$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	push	eax
	push	0
	mov	eax, DWORD PTR _text$[ebp]
	push	eax
	mov	ecx, DWORD PTR _text$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?compare@UnicodeString@icu_56@@QBECHHABV12@HH@Z ; icu_56::UnicodeString::compare
	movsx	ecx, al
	test	ecx, ecx
	sete	al
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?startsWith@UnicodeString@icu_56@@QBECABV12@@Z ENDP	; icu_56::UnicodeString::startsWith
_TEXT	ENDS
PUBLIC	?startsWith@UnicodeString@icu_56@@QBECABV12@HH@Z ; icu_56::UnicodeString::startsWith
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?startsWith@UnicodeString@icu_56@@QBECABV12@HH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_srcText$ = 8						; size = 4
_srcStart$ = 12						; size = 4
_srcLength$ = 16					; size = 4
?startsWith@UnicodeString@icu_56@@QBECABV12@HH@Z PROC	; icu_56::UnicodeString::startsWith, COMDAT
; _this$ = ecx
; Line 4239
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _srcLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _srcStart$[ebp]
	push	ecx
	mov	edx, DWORD PTR _srcText$[ebp]
	push	edx
	mov	eax, DWORD PTR _srcLength$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doCompare@UnicodeString@icu_56@@ABECHHABV12@HH@Z ; icu_56::UnicodeString::doCompare
	movsx	ecx, al
	test	ecx, ecx
	sete	al
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?startsWith@UnicodeString@icu_56@@QBECABV12@HH@Z ENDP	; icu_56::UnicodeString::startsWith
_TEXT	ENDS
PUBLIC	?startsWith@UnicodeString@icu_56@@QBECPB_WH@Z	; icu_56::UnicodeString::startsWith
EXTRN	_u_strlen_56:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?startsWith@UnicodeString@icu_56@@QBECPB_WH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_srcChars$ = 8						; size = 4
_srcLength$ = 12					; size = 4
?startsWith@UnicodeString@icu_56@@QBECPB_WH@Z PROC	; icu_56::UnicodeString::startsWith, COMDAT
; _this$ = ecx
; Line 4242
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 4243
	cmp	DWORD PTR _srcLength$[ebp], 0
	jge	SHORT $LN1@startsWith
; Line 4244
	mov	eax, DWORD PTR _srcChars$[ebp]
	push	eax
	call	_u_strlen_56
	add	esp, 4
	mov	DWORD PTR _srcLength$[ebp], eax
$LN1@startsWith:
; Line 4246
	mov	eax, DWORD PTR _srcLength$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _srcChars$[ebp]
	push	ecx
	mov	edx, DWORD PTR _srcLength$[ebp]
	push	edx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doCompare@UnicodeString@icu_56@@ABECHHPB_WHH@Z ; icu_56::UnicodeString::doCompare
	movsx	eax, al
	test	eax, eax
	sete	al
; Line 4247
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?startsWith@UnicodeString@icu_56@@QBECPB_WH@Z ENDP	; icu_56::UnicodeString::startsWith
_TEXT	ENDS
PUBLIC	?startsWith@UnicodeString@icu_56@@QBECPB_WHH@Z	; icu_56::UnicodeString::startsWith
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?startsWith@UnicodeString@icu_56@@QBECPB_WHH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_srcChars$ = 8						; size = 4
_srcStart$ = 12						; size = 4
_srcLength$ = 16					; size = 4
?startsWith@UnicodeString@icu_56@@QBECPB_WHH@Z PROC	; icu_56::UnicodeString::startsWith, COMDAT
; _this$ = ecx
; Line 4250
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 4251
	cmp	DWORD PTR _srcLength$[ebp], 0
	jge	SHORT $LN1@startsWith@2
; Line 4252
	mov	eax, DWORD PTR _srcChars$[ebp]
	push	eax
	call	_u_strlen_56
	add	esp, 4
	mov	DWORD PTR _srcLength$[ebp], eax
$LN1@startsWith@2:
; Line 4254
	mov	eax, DWORD PTR _srcLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _srcStart$[ebp]
	push	ecx
	mov	edx, DWORD PTR _srcChars$[ebp]
	push	edx
	mov	eax, DWORD PTR _srcLength$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doCompare@UnicodeString@icu_56@@ABECHHPB_WHH@Z ; icu_56::UnicodeString::doCompare
	movsx	ecx, al
	test	ecx, ecx
	sete	al
; Line 4255
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?startsWith@UnicodeString@icu_56@@QBECPB_WHH@Z ENDP	; icu_56::UnicodeString::startsWith
_TEXT	ENDS
PUBLIC	?endsWith@UnicodeString@icu_56@@QBECABV12@@Z	; icu_56::UnicodeString::endsWith
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?endsWith@UnicodeString@icu_56@@QBECABV12@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_text$ = 8						; size = 4
?endsWith@UnicodeString@icu_56@@QBECABV12@@Z PROC	; icu_56::UnicodeString::endsWith, COMDAT
; _this$ = ecx
; Line 4259
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 4260
	mov	ecx, DWORD PTR _text$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	push	eax
	push	0
	mov	eax, DWORD PTR _text$[ebp]
	push	eax
	mov	ecx, DWORD PTR _text$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	mov	esi, eax
	mov	ecx, DWORD PTR _text$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	sub	esi, eax
	push	esi
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doCompare@UnicodeString@icu_56@@ABECHHABV12@HH@Z ; icu_56::UnicodeString::doCompare
	movsx	ecx, al
	test	ecx, ecx
	sete	al
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?endsWith@UnicodeString@icu_56@@QBECABV12@@Z ENDP	; icu_56::UnicodeString::endsWith
_TEXT	ENDS
PUBLIC	?endsWith@UnicodeString@icu_56@@QBECABV12@HH@Z	; icu_56::UnicodeString::endsWith
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?endsWith@UnicodeString@icu_56@@QBECABV12@HH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_srcText$ = 8						; size = 4
_srcStart$ = 12						; size = 4
_srcLength$ = 16					; size = 4
?endsWith@UnicodeString@icu_56@@QBECABV12@HH@Z PROC	; icu_56::UnicodeString::endsWith, COMDAT
; _this$ = ecx
; Line 4265
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 4266
	lea	eax, DWORD PTR _srcLength$[ebp]
	push	eax
	lea	ecx, DWORD PTR _srcStart$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _srcText$[ebp]
	call	?pinIndices@UnicodeString@icu_56@@ABEXAAH0@Z ; icu_56::UnicodeString::pinIndices
; Line 4268
	mov	eax, DWORD PTR _srcLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _srcStart$[ebp]
	push	ecx
	mov	edx, DWORD PTR _srcText$[ebp]
	push	edx
	mov	eax, DWORD PTR _srcLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	sub	eax, DWORD PTR _srcLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doCompare@UnicodeString@icu_56@@ABECHHABV12@HH@Z ; icu_56::UnicodeString::doCompare
	movsx	ecx, al
	test	ecx, ecx
	sete	al
; Line 4269
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?endsWith@UnicodeString@icu_56@@QBECABV12@HH@Z ENDP	; icu_56::UnicodeString::endsWith
_TEXT	ENDS
PUBLIC	?endsWith@UnicodeString@icu_56@@QBECPB_WH@Z	; icu_56::UnicodeString::endsWith
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?endsWith@UnicodeString@icu_56@@QBECPB_WH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_srcChars$ = 8						; size = 4
_srcLength$ = 12					; size = 4
?endsWith@UnicodeString@icu_56@@QBECPB_WH@Z PROC	; icu_56::UnicodeString::endsWith, COMDAT
; _this$ = ecx
; Line 4273
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 4274
	cmp	DWORD PTR _srcLength$[ebp], 0
	jge	SHORT $LN1@endsWith
; Line 4275
	mov	eax, DWORD PTR _srcChars$[ebp]
	push	eax
	call	_u_strlen_56
	add	esp, 4
	mov	DWORD PTR _srcLength$[ebp], eax
$LN1@endsWith:
; Line 4278
	mov	eax, DWORD PTR _srcLength$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _srcChars$[ebp]
	push	ecx
	mov	edx, DWORD PTR _srcLength$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	sub	eax, DWORD PTR _srcLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doCompare@UnicodeString@icu_56@@ABECHHPB_WHH@Z ; icu_56::UnicodeString::doCompare
	movsx	eax, al
	test	eax, eax
	sete	al
; Line 4279
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?endsWith@UnicodeString@icu_56@@QBECPB_WH@Z ENDP	; icu_56::UnicodeString::endsWith
_TEXT	ENDS
PUBLIC	?endsWith@UnicodeString@icu_56@@QBECPB_WHH@Z	; icu_56::UnicodeString::endsWith
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?endsWith@UnicodeString@icu_56@@QBECPB_WHH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_srcChars$ = 8						; size = 4
_srcStart$ = 12						; size = 4
_srcLength$ = 16					; size = 4
?endsWith@UnicodeString@icu_56@@QBECPB_WHH@Z PROC	; icu_56::UnicodeString::endsWith, COMDAT
; _this$ = ecx
; Line 4284
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 4285
	cmp	DWORD PTR _srcLength$[ebp], 0
	jge	SHORT $LN1@endsWith@2
; Line 4286
	mov	eax, DWORD PTR _srcStart$[ebp]
	mov	ecx, DWORD PTR _srcChars$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	push	edx
	call	_u_strlen_56
	add	esp, 4
	mov	DWORD PTR _srcLength$[ebp], eax
$LN1@endsWith@2:
; Line 4289
	mov	eax, DWORD PTR _srcLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _srcStart$[ebp]
	push	ecx
	mov	edx, DWORD PTR _srcChars$[ebp]
	push	edx
	mov	eax, DWORD PTR _srcLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	sub	eax, DWORD PTR _srcLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doCompare@UnicodeString@icu_56@@ABECHHPB_WHH@Z ; icu_56::UnicodeString::doCompare
	movsx	ecx, al
	test	ecx, ecx
	sete	al
; Line 4290
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?endsWith@UnicodeString@icu_56@@QBECPB_WHH@Z ENDP	; icu_56::UnicodeString::endsWith
_TEXT	ENDS
PUBLIC	?replace@UnicodeString@icu_56@@QAEAAV12@HHABV12@@Z ; icu_56::UnicodeString::replace
EXTRN	?doReplace@UnicodeString@icu_56@@AAEAAV12@HHABV12@HH@Z:PROC ; icu_56::UnicodeString::doReplace
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?replace@UnicodeString@icu_56@@QAEAAV12@HHABV12@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_start$ = 8						; size = 4
__length$ = 12						; size = 4
_srcText$ = 16						; size = 4
?replace@UnicodeString@icu_56@@QAEAAV12@HHABV12@@Z PROC	; icu_56::UnicodeString::replace, COMDAT
; _this$ = ecx
; Line 4299
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _srcText$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	push	eax
	push	0
	mov	eax, DWORD PTR _srcText$[ebp]
	push	eax
	mov	ecx, DWORD PTR __length$[ebp]
	push	ecx
	mov	edx, DWORD PTR _start$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doReplace@UnicodeString@icu_56@@AAEAAV12@HHABV12@HH@Z ; icu_56::UnicodeString::doReplace
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?replace@UnicodeString@icu_56@@QAEAAV12@HHABV12@@Z ENDP	; icu_56::UnicodeString::replace
_TEXT	ENDS
PUBLIC	?replace@UnicodeString@icu_56@@QAEAAV12@HHABV12@HH@Z ; icu_56::UnicodeString::replace
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?replace@UnicodeString@icu_56@@QAEAAV12@HHABV12@HH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_start$ = 8						; size = 4
__length$ = 12						; size = 4
_srcText$ = 16						; size = 4
_srcStart$ = 20						; size = 4
_srcLength$ = 24					; size = 4
?replace@UnicodeString@icu_56@@QAEAAV12@HHABV12@HH@Z PROC ; icu_56::UnicodeString::replace, COMDAT
; _this$ = ecx
; Line 4307
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _srcLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _srcStart$[ebp]
	push	ecx
	mov	edx, DWORD PTR _srcText$[ebp]
	push	edx
	mov	eax, DWORD PTR __length$[ebp]
	push	eax
	mov	ecx, DWORD PTR _start$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doReplace@UnicodeString@icu_56@@AAEAAV12@HHABV12@HH@Z ; icu_56::UnicodeString::doReplace
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?replace@UnicodeString@icu_56@@QAEAAV12@HHABV12@HH@Z ENDP ; icu_56::UnicodeString::replace
_TEXT	ENDS
PUBLIC	?replace@UnicodeString@icu_56@@QAEAAV12@HHPB_WH@Z ; icu_56::UnicodeString::replace
EXTRN	?doReplace@UnicodeString@icu_56@@AAEAAV12@HHPB_WHH@Z:PROC ; icu_56::UnicodeString::doReplace
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?replace@UnicodeString@icu_56@@QAEAAV12@HHPB_WH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_start$ = 8						; size = 4
__length$ = 12						; size = 4
_srcChars$ = 16						; size = 4
_srcLength$ = 20					; size = 4
?replace@UnicodeString@icu_56@@QAEAAV12@HHPB_WH@Z PROC	; icu_56::UnicodeString::replace, COMDAT
; _this$ = ecx
; Line 4314
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _srcLength$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _srcChars$[ebp]
	push	ecx
	mov	edx, DWORD PTR __length$[ebp]
	push	edx
	mov	eax, DWORD PTR _start$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doReplace@UnicodeString@icu_56@@AAEAAV12@HHPB_WHH@Z ; icu_56::UnicodeString::doReplace
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?replace@UnicodeString@icu_56@@QAEAAV12@HHPB_WH@Z ENDP	; icu_56::UnicodeString::replace
_TEXT	ENDS
PUBLIC	?replace@UnicodeString@icu_56@@QAEAAV12@HHPB_WHH@Z ; icu_56::UnicodeString::replace
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?replace@UnicodeString@icu_56@@QAEAAV12@HHPB_WHH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_start$ = 8						; size = 4
__length$ = 12						; size = 4
_srcChars$ = 16						; size = 4
_srcStart$ = 20						; size = 4
_srcLength$ = 24					; size = 4
?replace@UnicodeString@icu_56@@QAEAAV12@HHPB_WHH@Z PROC	; icu_56::UnicodeString::replace, COMDAT
; _this$ = ecx
; Line 4322
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _srcLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _srcStart$[ebp]
	push	ecx
	mov	edx, DWORD PTR _srcChars$[ebp]
	push	edx
	mov	eax, DWORD PTR __length$[ebp]
	push	eax
	mov	ecx, DWORD PTR _start$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doReplace@UnicodeString@icu_56@@AAEAAV12@HHPB_WHH@Z ; icu_56::UnicodeString::doReplace
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?replace@UnicodeString@icu_56@@QAEAAV12@HHPB_WHH@Z ENDP	; icu_56::UnicodeString::replace
_TEXT	ENDS
PUBLIC	?replace@UnicodeString@icu_56@@QAEAAV12@HH_W@Z	; icu_56::UnicodeString::replace
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?replace@UnicodeString@icu_56@@QAEAAV12@HH_W@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_start$ = 8						; size = 4
__length$ = 12						; size = 4
_srcChar$ = 16						; size = 2
?replace@UnicodeString@icu_56@@QAEAAV12@HH_W@Z PROC	; icu_56::UnicodeString::replace, COMDAT
; _this$ = ecx
; Line 4328
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	1
	push	0
	lea	eax, DWORD PTR _srcChar$[ebp]
	push	eax
	mov	ecx, DWORD PTR __length$[ebp]
	push	ecx
	mov	edx, DWORD PTR _start$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doReplace@UnicodeString@icu_56@@AAEAAV12@HHPB_WHH@Z ; icu_56::UnicodeString::doReplace
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?replace@UnicodeString@icu_56@@QAEAAV12@HH_W@Z ENDP	; icu_56::UnicodeString::replace
_TEXT	ENDS
PUBLIC	?replaceBetween@UnicodeString@icu_56@@QAEAAV12@HHABV12@@Z ; icu_56::UnicodeString::replaceBetween
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?replaceBetween@UnicodeString@icu_56@@QAEAAV12@HHABV12@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_start$ = 8						; size = 4
_limit$ = 12						; size = 4
_srcText$ = 16						; size = 4
?replaceBetween@UnicodeString@icu_56@@QAEAAV12@HHABV12@@Z PROC ; icu_56::UnicodeString::replaceBetween, COMDAT
; _this$ = ecx
; Line 4334
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _srcText$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	push	eax
	push	0
	mov	eax, DWORD PTR _srcText$[ebp]
	push	eax
	mov	ecx, DWORD PTR _limit$[ebp]
	sub	ecx, DWORD PTR _start$[ebp]
	push	ecx
	mov	edx, DWORD PTR _start$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doReplace@UnicodeString@icu_56@@AAEAAV12@HHABV12@HH@Z ; icu_56::UnicodeString::doReplace
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?replaceBetween@UnicodeString@icu_56@@QAEAAV12@HHABV12@@Z ENDP ; icu_56::UnicodeString::replaceBetween
_TEXT	ENDS
PUBLIC	?replaceBetween@UnicodeString@icu_56@@QAEAAV12@HHABV12@HH@Z ; icu_56::UnicodeString::replaceBetween
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?replaceBetween@UnicodeString@icu_56@@QAEAAV12@HHABV12@HH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_start$ = 8						; size = 4
_limit$ = 12						; size = 4
_srcText$ = 16						; size = 4
_srcStart$ = 20						; size = 4
_srcLimit$ = 24						; size = 4
?replaceBetween@UnicodeString@icu_56@@QAEAAV12@HHABV12@HH@Z PROC ; icu_56::UnicodeString::replaceBetween, COMDAT
; _this$ = ecx
; Line 4342
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _srcLimit$[ebp]
	sub	eax, DWORD PTR _srcStart$[ebp]
	push	eax
	mov	ecx, DWORD PTR _srcStart$[ebp]
	push	ecx
	mov	edx, DWORD PTR _srcText$[ebp]
	push	edx
	mov	eax, DWORD PTR _limit$[ebp]
	sub	eax, DWORD PTR _start$[ebp]
	push	eax
	mov	ecx, DWORD PTR _start$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doReplace@UnicodeString@icu_56@@AAEAAV12@HHABV12@HH@Z ; icu_56::UnicodeString::doReplace
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?replaceBetween@UnicodeString@icu_56@@QAEAAV12@HHABV12@HH@Z ENDP ; icu_56::UnicodeString::replaceBetween
_TEXT	ENDS
PUBLIC	?findAndReplace@UnicodeString@icu_56@@QAEAAV12@ABV12@0@Z ; icu_56::UnicodeString::findAndReplace
EXTRN	?findAndReplace@UnicodeString@icu_56@@QAEAAV12@HHABV12@HH0HH@Z:PROC ; icu_56::UnicodeString::findAndReplace
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?findAndReplace@UnicodeString@icu_56@@QAEAAV12@ABV12@0@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_oldText$ = 8						; size = 4
_newText$ = 12						; size = 4
?findAndReplace@UnicodeString@icu_56@@QAEAAV12@ABV12@0@Z PROC ; icu_56::UnicodeString::findAndReplace, COMDAT
; _this$ = ecx
; Line 4347
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 4348
	mov	ecx, DWORD PTR _newText$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	push	eax
	push	0
	mov	eax, DWORD PTR _newText$[ebp]
	push	eax
	mov	ecx, DWORD PTR _oldText$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	push	eax
	push	0
	mov	ecx, DWORD PTR _oldText$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?findAndReplace@UnicodeString@icu_56@@QAEAAV12@HHABV12@HH0HH@Z ; icu_56::UnicodeString::findAndReplace
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?findAndReplace@UnicodeString@icu_56@@QAEAAV12@ABV12@0@Z ENDP ; icu_56::UnicodeString::findAndReplace
_TEXT	ENDS
PUBLIC	?findAndReplace@UnicodeString@icu_56@@QAEAAV12@HHABV12@0@Z ; icu_56::UnicodeString::findAndReplace
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?findAndReplace@UnicodeString@icu_56@@QAEAAV12@HHABV12@0@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_start$ = 8						; size = 4
__length$ = 12						; size = 4
_oldText$ = 16						; size = 4
_newText$ = 20						; size = 4
?findAndReplace@UnicodeString@icu_56@@QAEAAV12@HHABV12@0@Z PROC ; icu_56::UnicodeString::findAndReplace, COMDAT
; _this$ = ecx
; Line 4355
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 4356
	mov	ecx, DWORD PTR _newText$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	push	eax
	push	0
	mov	eax, DWORD PTR _newText$[ebp]
	push	eax
	mov	ecx, DWORD PTR _oldText$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	push	eax
	push	0
	mov	ecx, DWORD PTR _oldText$[ebp]
	push	ecx
	mov	edx, DWORD PTR __length$[ebp]
	push	edx
	mov	eax, DWORD PTR _start$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?findAndReplace@UnicodeString@icu_56@@QAEAAV12@HHABV12@HH0HH@Z ; icu_56::UnicodeString::findAndReplace
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?findAndReplace@UnicodeString@icu_56@@QAEAAV12@HHABV12@0@Z ENDP ; icu_56::UnicodeString::findAndReplace
_TEXT	ENDS
PUBLIC	?doExtract@UnicodeString@icu_56@@ABEXHHAAV12@@Z	; icu_56::UnicodeString::doExtract
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?doExtract@UnicodeString@icu_56@@ABEXHHAAV12@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_start$ = 8						; size = 4
__length$ = 12						; size = 4
_target$ = 16						; size = 4
?doExtract@UnicodeString@icu_56@@ABEXHHAAV12@@Z PROC	; icu_56::UnicodeString::doExtract, COMDAT
; _this$ = ecx
; Line 4365
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __length$[ebp]
	push	eax
	mov	ecx, DWORD PTR _start$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR _target$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	push	eax
	push	0
	mov	ecx, DWORD PTR _target$[ebp]
	call	?replace@UnicodeString@icu_56@@QAEAAV12@HHABV12@HH@Z ; icu_56::UnicodeString::replace
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?doExtract@UnicodeString@icu_56@@ABEXHHAAV12@@Z ENDP	; icu_56::UnicodeString::doExtract
_TEXT	ENDS
PUBLIC	?extract@UnicodeString@icu_56@@QBEXHHPA_WH@Z	; icu_56::UnicodeString::extract
EXTRN	?doExtract@UnicodeString@icu_56@@ABEXHHPA_WH@Z:PROC ; icu_56::UnicodeString::doExtract
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?extract@UnicodeString@icu_56@@QBEXHHPA_WH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_start$ = 8						; size = 4
__length$ = 12						; size = 4
_target$ = 16						; size = 4
_targetStart$ = 20					; size = 4
?extract@UnicodeString@icu_56@@QBEXHHPA_WH@Z PROC	; icu_56::UnicodeString::extract, COMDAT
; _this$ = ecx
; Line 4372
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _targetStart$[ebp]
	push	eax
	mov	ecx, DWORD PTR _target$[ebp]
	push	ecx
	mov	edx, DWORD PTR __length$[ebp]
	push	edx
	mov	eax, DWORD PTR _start$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doExtract@UnicodeString@icu_56@@ABEXHHPA_WH@Z ; icu_56::UnicodeString::doExtract
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?extract@UnicodeString@icu_56@@QBEXHHPA_WH@Z ENDP	; icu_56::UnicodeString::extract
_TEXT	ENDS
PUBLIC	?extract@UnicodeString@icu_56@@QBEXHHAAV12@@Z	; icu_56::UnicodeString::extract
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?extract@UnicodeString@icu_56@@QBEXHHAAV12@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_start$ = 8						; size = 4
__length$ = 12						; size = 4
_target$ = 16						; size = 4
?extract@UnicodeString@icu_56@@QBEXHHAAV12@@Z PROC	; icu_56::UnicodeString::extract, COMDAT
; _this$ = ecx
; Line 4378
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _target$[ebp]
	push	eax
	mov	ecx, DWORD PTR __length$[ebp]
	push	ecx
	mov	edx, DWORD PTR _start$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doExtract@UnicodeString@icu_56@@ABEXHHAAV12@@Z ; icu_56::UnicodeString::doExtract
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?extract@UnicodeString@icu_56@@QBEXHHAAV12@@Z ENDP	; icu_56::UnicodeString::extract
_TEXT	ENDS
PUBLIC	?extract@UnicodeString@icu_56@@QBEHHHPADPBD@Z	; icu_56::UnicodeString::extract
EXTRN	?extract@UnicodeString@icu_56@@QBEHHHPADIPBD@Z:PROC ; icu_56::UnicodeString::extract
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?extract@UnicodeString@icu_56@@QBEHHHPADPBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_start$ = 8						; size = 4
__length$ = 12						; size = 4
_dst$ = 16						; size = 4
_codepage$ = 20						; size = 4
?extract@UnicodeString@icu_56@@QBEHHHPADPBD@Z PROC	; icu_56::UnicodeString::extract, COMDAT
; _this$ = ecx
; Line 4388
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 4390
	mov	eax, DWORD PTR _codepage$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dst$[ebp]
	neg	ecx
	sbb	ecx, ecx
	push	ecx
	mov	edx, DWORD PTR _dst$[ebp]
	push	edx
	mov	eax, DWORD PTR __length$[ebp]
	push	eax
	mov	ecx, DWORD PTR _start$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?extract@UnicodeString@icu_56@@QBEHHHPADIPBD@Z ; icu_56::UnicodeString::extract
; Line 4391
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?extract@UnicodeString@icu_56@@QBEHHHPADPBD@Z ENDP	; icu_56::UnicodeString::extract
_TEXT	ENDS
PUBLIC	?extractBetween@UnicodeString@icu_56@@QBEXHHPA_WH@Z ; icu_56::UnicodeString::extractBetween
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?extractBetween@UnicodeString@icu_56@@QBEXHHPA_WH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_start$ = 8						; size = 4
_limit$ = 12						; size = 4
_dst$ = 16						; size = 4
_dstStart$ = 20						; size = 4
?extractBetween@UnicodeString@icu_56@@QBEXHHPA_WH@Z PROC ; icu_56::UnicodeString::extractBetween, COMDAT
; _this$ = ecx
; Line 4399
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 4400
	lea	eax, DWORD PTR _start$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?pinIndex@UnicodeString@icu_56@@ABEXAAH@Z ; icu_56::UnicodeString::pinIndex
; Line 4401
	lea	eax, DWORD PTR _limit$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?pinIndex@UnicodeString@icu_56@@ABEXAAH@Z ; icu_56::UnicodeString::pinIndex
; Line 4402
	mov	eax, DWORD PTR _dstStart$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dst$[ebp]
	push	ecx
	mov	edx, DWORD PTR _limit$[ebp]
	sub	edx, DWORD PTR _start$[ebp]
	push	edx
	mov	eax, DWORD PTR _start$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doExtract@UnicodeString@icu_56@@ABEXHHPA_WH@Z ; icu_56::UnicodeString::doExtract
; Line 4403
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?extractBetween@UnicodeString@icu_56@@QBEXHHPA_WH@Z ENDP ; icu_56::UnicodeString::extractBetween
_TEXT	ENDS
PUBLIC	?tempSubStringBetween@UnicodeString@icu_56@@QBE?AV12@HH@Z ; icu_56::UnicodeString::tempSubStringBetween
EXTRN	?tempSubString@UnicodeString@icu_56@@QBE?AV12@HH@Z:PROC ; icu_56::UnicodeString::tempSubString
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?tempSubStringBetween@UnicodeString@icu_56@@QBE?AV12@HH@Z
_TEXT	SEGMENT
$T44780 = -212						; size = 4
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
_start$ = 12						; size = 4
_limit$ = 16						; size = 4
?tempSubStringBetween@UnicodeString@icu_56@@QBE?AV12@HH@Z PROC ; icu_56::UnicodeString::tempSubStringBetween, COMDAT
; _this$ = ecx
; Line 4406
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T44780[ebp], 0
; Line 4407
	mov	eax, DWORD PTR _limit$[ebp]
	sub	eax, DWORD PTR _start$[ebp]
	push	eax
	mov	ecx, DWORD PTR _start$[ebp]
	push	ecx
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?tempSubString@UnicodeString@icu_56@@QBE?AV12@HH@Z ; icu_56::UnicodeString::tempSubString
	mov	eax, DWORD PTR $T44780[ebp]
	or	eax, 1
	mov	DWORD PTR $T44780[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 4408
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?tempSubStringBetween@UnicodeString@icu_56@@QBE?AV12@HH@Z ENDP ; icu_56::UnicodeString::tempSubStringBetween
_TEXT	ENDS
PUBLIC	?doCharAt@UnicodeString@icu_56@@ABE_WH@Z	; icu_56::UnicodeString::doCharAt
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?doCharAt@UnicodeString@icu_56@@ABE_WH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_offset$ = 8						; size = 4
?doCharAt@UnicodeString@icu_56@@ABE_WH@Z PROC		; icu_56::UnicodeString::doCharAt, COMDAT
; _this$ = ecx
; Line 4412
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 4413
	mov	ecx, DWORD PTR _this$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	cmp	DWORD PTR _offset$[ebp], eax
	jae	SHORT $LN2@doCharAt
; Line 4414
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getArrayStart@UnicodeString@icu_56@@ABEPB_WXZ ; icu_56::UnicodeString::getArrayStart
	mov	ecx, DWORD PTR _offset$[ebp]
	mov	ax, WORD PTR [eax+ecx*2]
	jmp	SHORT $LN3@doCharAt
; Line 4415
	jmp	SHORT $LN3@doCharAt
$LN2@doCharAt:
; Line 4416
	mov	eax, 65535				; 0000ffffH
$LN3@doCharAt:
; Line 4418
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?doCharAt@UnicodeString@icu_56@@ABE_WH@Z ENDP		; icu_56::UnicodeString::doCharAt
_TEXT	ENDS
PUBLIC	?charAt@UnicodeString@icu_56@@QBE_WH@Z		; icu_56::UnicodeString::charAt
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?charAt@UnicodeString@icu_56@@QBE_WH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_offset$ = 8						; size = 4
?charAt@UnicodeString@icu_56@@QBE_WH@Z PROC		; icu_56::UnicodeString::charAt, COMDAT
; _this$ = ecx
; Line 4422
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _offset$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doCharAt@UnicodeString@icu_56@@ABE_WH@Z ; icu_56::UnicodeString::doCharAt
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?charAt@UnicodeString@icu_56@@QBE_WH@Z ENDP		; icu_56::UnicodeString::charAt
_TEXT	ENDS
PUBLIC	??AUnicodeString@icu_56@@QBE_WH@Z		; icu_56::UnicodeString::operator[]
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??AUnicodeString@icu_56@@QBE_WH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_offset$ = 8						; size = 4
??AUnicodeString@icu_56@@QBE_WH@Z PROC			; icu_56::UnicodeString::operator[], COMDAT
; _this$ = ecx
; Line 4426
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _offset$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doCharAt@UnicodeString@icu_56@@ABE_WH@Z ; icu_56::UnicodeString::doCharAt
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??AUnicodeString@icu_56@@QBE_WH@Z ENDP			; icu_56::UnicodeString::operator[]
_TEXT	ENDS
PUBLIC	?isEmpty@UnicodeString@icu_56@@QBECXZ		; icu_56::UnicodeString::isEmpty
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?isEmpty@UnicodeString@icu_56@@QBECXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?isEmpty@UnicodeString@icu_56@@QBECXZ PROC		; icu_56::UnicodeString::isEmpty, COMDAT
; _this$ = ecx
; Line 4429
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 4431
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+4]
	sar	ecx, 5
	test	ecx, ecx
	sete	al
; Line 4432
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?isEmpty@UnicodeString@icu_56@@QBECXZ ENDP		; icu_56::UnicodeString::isEmpty
_TEXT	ENDS
PUBLIC	?setZeroLength@UnicodeString@icu_56@@AAEXXZ	; icu_56::UnicodeString::setZeroLength
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?setZeroLength@UnicodeString@icu_56@@AAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?setZeroLength@UnicodeString@icu_56@@AAEXXZ PROC	; icu_56::UnicodeString::setZeroLength, COMDAT
; _this$ = ecx
; Line 4438
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 4439
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+4]
	and	ecx, 31					; 0000001fH
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+4], cx
; Line 4440
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?setZeroLength@UnicodeString@icu_56@@AAEXXZ ENDP	; icu_56::UnicodeString::setZeroLength
_TEXT	ENDS
PUBLIC	?setShortLength@UnicodeString@icu_56@@AAEXH@Z	; icu_56::UnicodeString::setShortLength
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?setShortLength@UnicodeString@icu_56@@AAEXH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_len$ = 8						; size = 4
?setShortLength@UnicodeString@icu_56@@AAEXH@Z PROC	; icu_56::UnicodeString::setShortLength, COMDAT
; _this$ = ecx
; Line 4443
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 4446
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+4]
	and	ecx, 31					; 0000001fH
	mov	edx, DWORD PTR _len$[ebp]
	shl	edx, 5
	or	ecx, edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+4], cx
; Line 4447
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?setShortLength@UnicodeString@icu_56@@AAEXH@Z ENDP	; icu_56::UnicodeString::setShortLength
_TEXT	ENDS
PUBLIC	?setLength@UnicodeString@icu_56@@AAEXH@Z	; icu_56::UnicodeString::setLength
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?setLength@UnicodeString@icu_56@@AAEXH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_len$ = 8						; size = 4
?setLength@UnicodeString@icu_56@@AAEXH@Z PROC		; icu_56::UnicodeString::setLength, COMDAT
; _this$ = ecx
; Line 4450
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 4451
	cmp	DWORD PTR _len$[ebp], 1023		; 000003ffH
	jg	SHORT $LN2@setLength
; Line 4452
	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?setShortLength@UnicodeString@icu_56@@AAEXH@Z ; icu_56::UnicodeString::setShortLength
; Line 4453
	jmp	SHORT $LN3@setLength
$LN2@setLength:
; Line 4454
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+4]
	or	ecx, 65504				; 0000ffe0H
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+4], cx
; Line 4455
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _len$[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN3@setLength:
; Line 4457
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?setLength@UnicodeString@icu_56@@AAEXH@Z ENDP		; icu_56::UnicodeString::setLength
_TEXT	ENDS
PUBLIC	?setToEmpty@UnicodeString@icu_56@@AAEXXZ	; icu_56::UnicodeString::setToEmpty
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?setToEmpty@UnicodeString@icu_56@@AAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?setToEmpty@UnicodeString@icu_56@@AAEXXZ PROC		; icu_56::UnicodeString::setToEmpty, COMDAT
; _this$ = ecx
; Line 4460
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 4461
	mov	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+4], ax
; Line 4462
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?setToEmpty@UnicodeString@icu_56@@AAEXXZ ENDP		; icu_56::UnicodeString::setToEmpty
_TEXT	ENDS
PUBLIC	?setArray@UnicodeString@icu_56@@AAEXPA_WHH@Z	; icu_56::UnicodeString::setArray
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?setArray@UnicodeString@icu_56@@AAEXPA_WHH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_array$ = 8						; size = 4
_len$ = 12						; size = 4
_capacity$ = 16						; size = 4
?setArray@UnicodeString@icu_56@@AAEXPA_WHH@Z PROC	; icu_56::UnicodeString::setArray, COMDAT
; _this$ = ecx
; Line 4465
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 4466
	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?setLength@UnicodeString@icu_56@@AAEXH@Z ; icu_56::UnicodeString::setLength
; Line 4467
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _array$[ebp]
	mov	DWORD PTR [eax+16], ecx
; Line 4468
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _capacity$[ebp]
	mov	DWORD PTR [eax+12], ecx
; Line 4469
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?setArray@UnicodeString@icu_56@@AAEXPA_WHH@Z ENDP	; icu_56::UnicodeString::setArray
_TEXT	ENDS
PUBLIC	??4UnicodeString@icu_56@@QAEAAV01@_W@Z		; icu_56::UnicodeString::operator=
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??4UnicodeString@icu_56@@QAEAAV01@_W@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_ch$ = 8						; size = 2
??4UnicodeString@icu_56@@QAEAAV01@_W@Z PROC		; icu_56::UnicodeString::operator=, COMDAT
; _this$ = ecx
; Line 4473
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	1
	push	0
	lea	eax, DWORD PTR _ch$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doReplace@UnicodeString@icu_56@@AAEAAV12@HHPB_WHH@Z ; icu_56::UnicodeString::doReplace
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4UnicodeString@icu_56@@QAEAAV01@_W@Z ENDP		; icu_56::UnicodeString::operator=
_TEXT	ENDS
PUBLIC	??4UnicodeString@icu_56@@QAEAAV01@H@Z		; icu_56::UnicodeString::operator=
EXTRN	?replace@UnicodeString@icu_56@@QAEAAV12@HHH@Z:PROC ; icu_56::UnicodeString::replace
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??4UnicodeString@icu_56@@QAEAAV01@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_ch$ = 8						; size = 4
??4UnicodeString@icu_56@@QAEAAV01@H@Z PROC		; icu_56::UnicodeString::operator=, COMDAT
; _this$ = ecx
; Line 4477
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _ch$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?replace@UnicodeString@icu_56@@QAEAAV12@HHH@Z ; icu_56::UnicodeString::replace
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4UnicodeString@icu_56@@QAEAAV01@H@Z ENDP		; icu_56::UnicodeString::operator=
_TEXT	ENDS
PUBLIC	?setTo@UnicodeString@icu_56@@QAEAAV12@ABV12@HH@Z ; icu_56::UnicodeString::setTo
EXTRN	?unBogus@UnicodeString@icu_56@@AAEXXZ:PROC	; icu_56::UnicodeString::unBogus
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?setTo@UnicodeString@icu_56@@QAEAAV12@ABV12@HH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_srcText$ = 8						; size = 4
_srcStart$ = 12						; size = 4
_srcLength$ = 16					; size = 4
?setTo@UnicodeString@icu_56@@QAEAAV12@ABV12@HH@Z PROC	; icu_56::UnicodeString::setTo, COMDAT
; _this$ = ecx
; Line 4483
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 4484
	mov	ecx, DWORD PTR _this$[ebp]
	call	?unBogus@UnicodeString@icu_56@@AAEXXZ	; icu_56::UnicodeString::unBogus
; Line 4485
	mov	eax, DWORD PTR _srcLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _srcStart$[ebp]
	push	ecx
	mov	edx, DWORD PTR _srcText$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doReplace@UnicodeString@icu_56@@AAEAAV12@HHABV12@HH@Z ; icu_56::UnicodeString::doReplace
; Line 4486
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?setTo@UnicodeString@icu_56@@QAEAAV12@ABV12@HH@Z ENDP	; icu_56::UnicodeString::setTo
_TEXT	ENDS
PUBLIC	?setTo@UnicodeString@icu_56@@QAEAAV12@ABV12@H@Z	; icu_56::UnicodeString::setTo
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?setTo@UnicodeString@icu_56@@QAEAAV12@ABV12@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_srcText$ = 8						; size = 4
_srcStart$ = 12						; size = 4
?setTo@UnicodeString@icu_56@@QAEAAV12@ABV12@H@Z PROC	; icu_56::UnicodeString::setTo, COMDAT
; _this$ = ecx
; Line 4491
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 4492
	mov	ecx, DWORD PTR _this$[ebp]
	call	?unBogus@UnicodeString@icu_56@@AAEXXZ	; icu_56::UnicodeString::unBogus
; Line 4493
	lea	eax, DWORD PTR _srcStart$[ebp]
	push	eax
	mov	ecx, DWORD PTR _srcText$[ebp]
	call	?pinIndex@UnicodeString@icu_56@@ABEXAAH@Z ; icu_56::UnicodeString::pinIndex
; Line 4494
	mov	ecx, DWORD PTR _srcText$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	sub	eax, DWORD PTR _srcStart$[ebp]
	push	eax
	mov	eax, DWORD PTR _srcStart$[ebp]
	push	eax
	mov	ecx, DWORD PTR _srcText$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doReplace@UnicodeString@icu_56@@AAEAAV12@HHABV12@HH@Z ; icu_56::UnicodeString::doReplace
; Line 4495
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?setTo@UnicodeString@icu_56@@QAEAAV12@ABV12@H@Z ENDP	; icu_56::UnicodeString::setTo
_TEXT	ENDS
PUBLIC	?setTo@UnicodeString@icu_56@@QAEAAV12@ABV12@@Z	; icu_56::UnicodeString::setTo
EXTRN	?copyFrom@UnicodeString@icu_56@@AAEAAV12@ABV12@C@Z:PROC ; icu_56::UnicodeString::copyFrom
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?setTo@UnicodeString@icu_56@@QAEAAV12@ABV12@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_srcText$ = 8						; size = 4
?setTo@UnicodeString@icu_56@@QAEAAV12@ABV12@@Z PROC	; icu_56::UnicodeString::setTo, COMDAT
; _this$ = ecx
; Line 4499
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 4500
	push	0
	mov	eax, DWORD PTR _srcText$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?copyFrom@UnicodeString@icu_56@@AAEAAV12@ABV12@C@Z ; icu_56::UnicodeString::copyFrom
; Line 4501
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?setTo@UnicodeString@icu_56@@QAEAAV12@ABV12@@Z ENDP	; icu_56::UnicodeString::setTo
_TEXT	ENDS
PUBLIC	?setTo@UnicodeString@icu_56@@QAEAAV12@PB_WH@Z	; icu_56::UnicodeString::setTo
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?setTo@UnicodeString@icu_56@@QAEAAV12@PB_WH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_srcChars$ = 8						; size = 4
_srcLength$ = 12					; size = 4
?setTo@UnicodeString@icu_56@@QAEAAV12@PB_WH@Z PROC	; icu_56::UnicodeString::setTo, COMDAT
; _this$ = ecx
; Line 4506
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 4507
	mov	ecx, DWORD PTR _this$[ebp]
	call	?unBogus@UnicodeString@icu_56@@AAEXXZ	; icu_56::UnicodeString::unBogus
; Line 4508
	mov	eax, DWORD PTR _srcLength$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _srcChars$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doReplace@UnicodeString@icu_56@@AAEAAV12@HHPB_WHH@Z ; icu_56::UnicodeString::doReplace
; Line 4509
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?setTo@UnicodeString@icu_56@@QAEAAV12@PB_WH@Z ENDP	; icu_56::UnicodeString::setTo
_TEXT	ENDS
PUBLIC	?setTo@UnicodeString@icu_56@@QAEAAV12@_W@Z	; icu_56::UnicodeString::setTo
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?setTo@UnicodeString@icu_56@@QAEAAV12@_W@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_srcChar$ = 8						; size = 2
?setTo@UnicodeString@icu_56@@QAEAAV12@_W@Z PROC		; icu_56::UnicodeString::setTo, COMDAT
; _this$ = ecx
; Line 4513
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 4514
	mov	ecx, DWORD PTR _this$[ebp]
	call	?unBogus@UnicodeString@icu_56@@AAEXXZ	; icu_56::UnicodeString::unBogus
; Line 4515
	push	1
	push	0
	lea	eax, DWORD PTR _srcChar$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doReplace@UnicodeString@icu_56@@AAEAAV12@HHPB_WHH@Z ; icu_56::UnicodeString::doReplace
; Line 4516
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?setTo@UnicodeString@icu_56@@QAEAAV12@_W@Z ENDP		; icu_56::UnicodeString::setTo
_TEXT	ENDS
PUBLIC	?setTo@UnicodeString@icu_56@@QAEAAV12@H@Z	; icu_56::UnicodeString::setTo
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?setTo@UnicodeString@icu_56@@QAEAAV12@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_srcChar$ = 8						; size = 4
?setTo@UnicodeString@icu_56@@QAEAAV12@H@Z PROC		; icu_56::UnicodeString::setTo, COMDAT
; _this$ = ecx
; Line 4520
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 4521
	mov	ecx, DWORD PTR _this$[ebp]
	call	?unBogus@UnicodeString@icu_56@@AAEXXZ	; icu_56::UnicodeString::unBogus
; Line 4522
	mov	eax, DWORD PTR _srcChar$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?replace@UnicodeString@icu_56@@QAEAAV12@HHH@Z ; icu_56::UnicodeString::replace
; Line 4523
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?setTo@UnicodeString@icu_56@@QAEAAV12@H@Z ENDP		; icu_56::UnicodeString::setTo
_TEXT	ENDS
PUBLIC	?append@UnicodeString@icu_56@@QAEAAV12@ABV12@HH@Z ; icu_56::UnicodeString::append
EXTRN	?doAppend@UnicodeString@icu_56@@AAEAAV12@ABV12@HH@Z:PROC ; icu_56::UnicodeString::doAppend
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?append@UnicodeString@icu_56@@QAEAAV12@ABV12@HH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_srcText$ = 8						; size = 4
_srcStart$ = 12						; size = 4
_srcLength$ = 16					; size = 4
?append@UnicodeString@icu_56@@QAEAAV12@ABV12@HH@Z PROC	; icu_56::UnicodeString::append, COMDAT
; _this$ = ecx
; Line 4529
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _srcLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _srcStart$[ebp]
	push	ecx
	mov	edx, DWORD PTR _srcText$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doAppend@UnicodeString@icu_56@@AAEAAV12@ABV12@HH@Z ; icu_56::UnicodeString::doAppend
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?append@UnicodeString@icu_56@@QAEAAV12@ABV12@HH@Z ENDP	; icu_56::UnicodeString::append
_TEXT	ENDS
PUBLIC	?append@UnicodeString@icu_56@@QAEAAV12@ABV12@@Z	; icu_56::UnicodeString::append
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?append@UnicodeString@icu_56@@QAEAAV12@ABV12@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_srcText$ = 8						; size = 4
?append@UnicodeString@icu_56@@QAEAAV12@ABV12@@Z PROC	; icu_56::UnicodeString::append, COMDAT
; _this$ = ecx
; Line 4533
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _srcText$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	push	eax
	push	0
	mov	eax, DWORD PTR _srcText$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doAppend@UnicodeString@icu_56@@AAEAAV12@ABV12@HH@Z ; icu_56::UnicodeString::doAppend
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?append@UnicodeString@icu_56@@QAEAAV12@ABV12@@Z ENDP	; icu_56::UnicodeString::append
_TEXT	ENDS
PUBLIC	?append@UnicodeString@icu_56@@QAEAAV12@PB_WHH@Z	; icu_56::UnicodeString::append
EXTRN	?doAppend@UnicodeString@icu_56@@AAEAAV12@PB_WHH@Z:PROC ; icu_56::UnicodeString::doAppend
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?append@UnicodeString@icu_56@@QAEAAV12@PB_WHH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_srcChars$ = 8						; size = 4
_srcStart$ = 12						; size = 4
_srcLength$ = 16					; size = 4
?append@UnicodeString@icu_56@@QAEAAV12@PB_WHH@Z PROC	; icu_56::UnicodeString::append, COMDAT
; _this$ = ecx
; Line 4539
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _srcLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _srcStart$[ebp]
	push	ecx
	mov	edx, DWORD PTR _srcChars$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doAppend@UnicodeString@icu_56@@AAEAAV12@PB_WHH@Z ; icu_56::UnicodeString::doAppend
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?append@UnicodeString@icu_56@@QAEAAV12@PB_WHH@Z ENDP	; icu_56::UnicodeString::append
_TEXT	ENDS
PUBLIC	?append@UnicodeString@icu_56@@QAEAAV12@PB_WH@Z	; icu_56::UnicodeString::append
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?append@UnicodeString@icu_56@@QAEAAV12@PB_WH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_srcChars$ = 8						; size = 4
_srcLength$ = 12					; size = 4
?append@UnicodeString@icu_56@@QAEAAV12@PB_WH@Z PROC	; icu_56::UnicodeString::append, COMDAT
; _this$ = ecx
; Line 4544
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _srcLength$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _srcChars$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doAppend@UnicodeString@icu_56@@AAEAAV12@PB_WHH@Z ; icu_56::UnicodeString::doAppend
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?append@UnicodeString@icu_56@@QAEAAV12@PB_WH@Z ENDP	; icu_56::UnicodeString::append
_TEXT	ENDS
PUBLIC	?append@UnicodeString@icu_56@@QAEAAV12@_W@Z	; icu_56::UnicodeString::append
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?append@UnicodeString@icu_56@@QAEAAV12@_W@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_srcChar$ = 8						; size = 2
?append@UnicodeString@icu_56@@QAEAAV12@_W@Z PROC	; icu_56::UnicodeString::append, COMDAT
; _this$ = ecx
; Line 4548
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	1
	push	0
	lea	eax, DWORD PTR _srcChar$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doAppend@UnicodeString@icu_56@@AAEAAV12@PB_WHH@Z ; icu_56::UnicodeString::doAppend
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?append@UnicodeString@icu_56@@QAEAAV12@_W@Z ENDP	; icu_56::UnicodeString::append
_TEXT	ENDS
PUBLIC	??YUnicodeString@icu_56@@QAEAAV01@_W@Z		; icu_56::UnicodeString::operator+=
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??YUnicodeString@icu_56@@QAEAAV01@_W@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_ch$ = 8						; size = 2
??YUnicodeString@icu_56@@QAEAAV01@_W@Z PROC		; icu_56::UnicodeString::operator+=, COMDAT
; _this$ = ecx
; Line 4552
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	1
	push	0
	lea	eax, DWORD PTR _ch$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doAppend@UnicodeString@icu_56@@AAEAAV12@PB_WHH@Z ; icu_56::UnicodeString::doAppend
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??YUnicodeString@icu_56@@QAEAAV01@_W@Z ENDP		; icu_56::UnicodeString::operator+=
_TEXT	ENDS
PUBLIC	??YUnicodeString@icu_56@@QAEAAV01@H@Z		; icu_56::UnicodeString::operator+=
EXTRN	?append@UnicodeString@icu_56@@QAEAAV12@H@Z:PROC	; icu_56::UnicodeString::append
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??YUnicodeString@icu_56@@QAEAAV01@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_ch$ = 8						; size = 4
??YUnicodeString@icu_56@@QAEAAV01@H@Z PROC		; icu_56::UnicodeString::operator+=, COMDAT
; _this$ = ecx
; Line 4555
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 4556
	mov	eax, DWORD PTR _ch$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?append@UnicodeString@icu_56@@QAEAAV12@H@Z ; icu_56::UnicodeString::append
; Line 4557
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??YUnicodeString@icu_56@@QAEAAV01@H@Z ENDP		; icu_56::UnicodeString::operator+=
_TEXT	ENDS
PUBLIC	??YUnicodeString@icu_56@@QAEAAV01@ABV01@@Z	; icu_56::UnicodeString::operator+=
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??YUnicodeString@icu_56@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_srcText$ = 8						; size = 4
??YUnicodeString@icu_56@@QAEAAV01@ABV01@@Z PROC		; icu_56::UnicodeString::operator+=, COMDAT
; _this$ = ecx
; Line 4561
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _srcText$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	push	eax
	push	0
	mov	eax, DWORD PTR _srcText$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doAppend@UnicodeString@icu_56@@AAEAAV12@ABV12@HH@Z ; icu_56::UnicodeString::doAppend
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??YUnicodeString@icu_56@@QAEAAV01@ABV01@@Z ENDP		; icu_56::UnicodeString::operator+=
_TEXT	ENDS
PUBLIC	?insert@UnicodeString@icu_56@@QAEAAV12@HABV12@HH@Z ; icu_56::UnicodeString::insert
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?insert@UnicodeString@icu_56@@QAEAAV12@HABV12@HH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_start$ = 8						; size = 4
_srcText$ = 12						; size = 4
_srcStart$ = 16						; size = 4
_srcLength$ = 20					; size = 4
?insert@UnicodeString@icu_56@@QAEAAV12@HABV12@HH@Z PROC	; icu_56::UnicodeString::insert, COMDAT
; _this$ = ecx
; Line 4568
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _srcLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _srcStart$[ebp]
	push	ecx
	mov	edx, DWORD PTR _srcText$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _start$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doReplace@UnicodeString@icu_56@@AAEAAV12@HHABV12@HH@Z ; icu_56::UnicodeString::doReplace
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?insert@UnicodeString@icu_56@@QAEAAV12@HABV12@HH@Z ENDP	; icu_56::UnicodeString::insert
_TEXT	ENDS
PUBLIC	?insert@UnicodeString@icu_56@@QAEAAV12@HABV12@@Z ; icu_56::UnicodeString::insert
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?insert@UnicodeString@icu_56@@QAEAAV12@HABV12@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_start$ = 8						; size = 4
_srcText$ = 12						; size = 4
?insert@UnicodeString@icu_56@@QAEAAV12@HABV12@@Z PROC	; icu_56::UnicodeString::insert, COMDAT
; _this$ = ecx
; Line 4573
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _srcText$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	push	eax
	push	0
	mov	eax, DWORD PTR _srcText$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _start$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doReplace@UnicodeString@icu_56@@AAEAAV12@HHABV12@HH@Z ; icu_56::UnicodeString::doReplace
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?insert@UnicodeString@icu_56@@QAEAAV12@HABV12@@Z ENDP	; icu_56::UnicodeString::insert
_TEXT	ENDS
PUBLIC	?insert@UnicodeString@icu_56@@QAEAAV12@HPB_WHH@Z ; icu_56::UnicodeString::insert
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?insert@UnicodeString@icu_56@@QAEAAV12@HPB_WHH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_start$ = 8						; size = 4
_srcChars$ = 12						; size = 4
_srcStart$ = 16						; size = 4
_srcLength$ = 20					; size = 4
?insert@UnicodeString@icu_56@@QAEAAV12@HPB_WHH@Z PROC	; icu_56::UnicodeString::insert, COMDAT
; _this$ = ecx
; Line 4580
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _srcLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _srcStart$[ebp]
	push	ecx
	mov	edx, DWORD PTR _srcChars$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _start$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doReplace@UnicodeString@icu_56@@AAEAAV12@HHPB_WHH@Z ; icu_56::UnicodeString::doReplace
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?insert@UnicodeString@icu_56@@QAEAAV12@HPB_WHH@Z ENDP	; icu_56::UnicodeString::insert
_TEXT	ENDS
PUBLIC	?insert@UnicodeString@icu_56@@QAEAAV12@HPB_WH@Z	; icu_56::UnicodeString::insert
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?insert@UnicodeString@icu_56@@QAEAAV12@HPB_WH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_start$ = 8						; size = 4
_srcChars$ = 12						; size = 4
_srcLength$ = 16					; size = 4
?insert@UnicodeString@icu_56@@QAEAAV12@HPB_WH@Z PROC	; icu_56::UnicodeString::insert, COMDAT
; _this$ = ecx
; Line 4586
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _srcLength$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _srcChars$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _start$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doReplace@UnicodeString@icu_56@@AAEAAV12@HHPB_WHH@Z ; icu_56::UnicodeString::doReplace
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?insert@UnicodeString@icu_56@@QAEAAV12@HPB_WH@Z ENDP	; icu_56::UnicodeString::insert
_TEXT	ENDS
PUBLIC	?insert@UnicodeString@icu_56@@QAEAAV12@H_W@Z	; icu_56::UnicodeString::insert
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?insert@UnicodeString@icu_56@@QAEAAV12@H_W@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_start$ = 8						; size = 4
_srcChar$ = 12						; size = 2
?insert@UnicodeString@icu_56@@QAEAAV12@H_W@Z PROC	; icu_56::UnicodeString::insert, COMDAT
; _this$ = ecx
; Line 4591
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	1
	push	0
	lea	eax, DWORD PTR _srcChar$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _start$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doReplace@UnicodeString@icu_56@@AAEAAV12@HHPB_WHH@Z ; icu_56::UnicodeString::doReplace
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?insert@UnicodeString@icu_56@@QAEAAV12@H_W@Z ENDP	; icu_56::UnicodeString::insert
_TEXT	ENDS
PUBLIC	?insert@UnicodeString@icu_56@@QAEAAV12@HH@Z	; icu_56::UnicodeString::insert
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?insert@UnicodeString@icu_56@@QAEAAV12@HH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_start$ = 8						; size = 4
_srcChar$ = 12						; size = 4
?insert@UnicodeString@icu_56@@QAEAAV12@HH@Z PROC	; icu_56::UnicodeString::insert, COMDAT
; _this$ = ecx
; Line 4596
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _srcChar$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _start$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?replace@UnicodeString@icu_56@@QAEAAV12@HHH@Z ; icu_56::UnicodeString::replace
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?insert@UnicodeString@icu_56@@QAEAAV12@HH@Z ENDP	; icu_56::UnicodeString::insert
_TEXT	ENDS
PUBLIC	?remove@UnicodeString@icu_56@@QAEAAV12@XZ	; icu_56::UnicodeString::remove
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?remove@UnicodeString@icu_56@@QAEAAV12@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?remove@UnicodeString@icu_56@@QAEAAV12@XZ PROC		; icu_56::UnicodeString::remove, COMDAT
; _this$ = ecx
; Line 4601
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 4603
	mov	ecx, DWORD PTR _this$[ebp]
	call	?isBogus@UnicodeString@icu_56@@QBECXZ	; icu_56::UnicodeString::isBogus
	movsx	eax, al
	test	eax, eax
	je	SHORT $LN2@remove
; Line 4604
	mov	ecx, DWORD PTR _this$[ebp]
	call	?setToEmpty@UnicodeString@icu_56@@AAEXXZ ; icu_56::UnicodeString::setToEmpty
; Line 4605
	jmp	SHORT $LN1@remove
$LN2@remove:
; Line 4606
	mov	ecx, DWORD PTR _this$[ebp]
	call	?setZeroLength@UnicodeString@icu_56@@AAEXXZ ; icu_56::UnicodeString::setZeroLength
$LN1@remove:
; Line 4608
	mov	eax, DWORD PTR _this$[ebp]
; Line 4609
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?remove@UnicodeString@icu_56@@QAEAAV12@XZ ENDP		; icu_56::UnicodeString::remove
_TEXT	ENDS
PUBLIC	?remove@UnicodeString@icu_56@@QAEAAV12@HH@Z	; icu_56::UnicodeString::remove
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?remove@UnicodeString@icu_56@@QAEAAV12@HH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_start$ = 8						; size = 4
__length$ = 12						; size = 4
?remove@UnicodeString@icu_56@@QAEAAV12@HH@Z PROC	; icu_56::UnicodeString::remove, COMDAT
; _this$ = ecx
; Line 4614
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 4615
	cmp	DWORD PTR _start$[ebp], 0
	jg	SHORT $LN1@remove@2
	cmp	DWORD PTR __length$[ebp], 2147483647	; 7fffffffH
	jne	SHORT $LN1@remove@2
; Line 4617
	mov	ecx, DWORD PTR _this$[ebp]
	call	?remove@UnicodeString@icu_56@@QAEAAV12@XZ ; icu_56::UnicodeString::remove
	jmp	SHORT $LN2@remove@2
$LN1@remove@2:
; Line 4619
	push	0
	push	0
	push	0
	mov	eax, DWORD PTR __length$[ebp]
	push	eax
	mov	ecx, DWORD PTR _start$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doReplace@UnicodeString@icu_56@@AAEAAV12@HHPB_WHH@Z ; icu_56::UnicodeString::doReplace
$LN2@remove@2:
; Line 4620
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?remove@UnicodeString@icu_56@@QAEAAV12@HH@Z ENDP	; icu_56::UnicodeString::remove
_TEXT	ENDS
PUBLIC	?removeBetween@UnicodeString@icu_56@@QAEAAV12@HH@Z ; icu_56::UnicodeString::removeBetween
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?removeBetween@UnicodeString@icu_56@@QAEAAV12@HH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_start$ = 8						; size = 4
_limit$ = 12						; size = 4
?removeBetween@UnicodeString@icu_56@@QAEAAV12@HH@Z PROC	; icu_56::UnicodeString::removeBetween, COMDAT
; _this$ = ecx
; Line 4625
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	0
	push	0
	push	0
	mov	eax, DWORD PTR _limit$[ebp]
	sub	eax, DWORD PTR _start$[ebp]
	push	eax
	mov	ecx, DWORD PTR _start$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doReplace@UnicodeString@icu_56@@AAEAAV12@HHPB_WHH@Z ; icu_56::UnicodeString::doReplace
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?removeBetween@UnicodeString@icu_56@@QAEAAV12@HH@Z ENDP	; icu_56::UnicodeString::removeBetween
_TEXT	ENDS
PUBLIC	?truncate@UnicodeString@icu_56@@QAECH@Z		; icu_56::UnicodeString::truncate
PUBLIC	?retainBetween@UnicodeString@icu_56@@QAEAAV12@HH@Z ; icu_56::UnicodeString::retainBetween
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?retainBetween@UnicodeString@icu_56@@QAEAAV12@HH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_start$ = 8						; size = 4
_limit$ = 12						; size = 4
?retainBetween@UnicodeString@icu_56@@QAEAAV12@HH@Z PROC	; icu_56::UnicodeString::retainBetween, COMDAT
; _this$ = ecx
; Line 4628
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 4629
	mov	eax, DWORD PTR _limit$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?truncate@UnicodeString@icu_56@@QAECH@Z	; icu_56::UnicodeString::truncate
; Line 4630
	push	0
	push	0
	push	0
	mov	eax, DWORD PTR _start$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doReplace@UnicodeString@icu_56@@AAEAAV12@HHPB_WHH@Z ; icu_56::UnicodeString::doReplace
; Line 4631
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?retainBetween@UnicodeString@icu_56@@QAEAAV12@HH@Z ENDP	; icu_56::UnicodeString::retainBetween
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?truncate@UnicodeString@icu_56@@QAECH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_targetLength$ = 8					; size = 4
?truncate@UnicodeString@icu_56@@QAECH@Z PROC		; icu_56::UnicodeString::truncate, COMDAT
; _this$ = ecx
; Line 4635
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 4636
	mov	ecx, DWORD PTR _this$[ebp]
	call	?isBogus@UnicodeString@icu_56@@QBECXZ	; icu_56::UnicodeString::isBogus
	movsx	eax, al
	test	eax, eax
	je	SHORT $LN4@truncate
	cmp	DWORD PTR _targetLength$[ebp], 0
	jne	SHORT $LN4@truncate
; Line 4638
	mov	ecx, DWORD PTR _this$[ebp]
	call	?unBogus@UnicodeString@icu_56@@AAEXXZ	; icu_56::UnicodeString::unBogus
; Line 4639
	xor	al, al
	jmp	SHORT $LN5@truncate
	jmp	SHORT $LN5@truncate
$LN4@truncate:
; Line 4640
	mov	ecx, DWORD PTR _this$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	cmp	DWORD PTR _targetLength$[ebp], eax
	jae	SHORT $LN2@truncate
; Line 4641
	mov	eax, DWORD PTR _targetLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?setLength@UnicodeString@icu_56@@AAEXH@Z ; icu_56::UnicodeString::setLength
; Line 4642
	mov	al, 1
	jmp	SHORT $LN5@truncate
; Line 4643
	jmp	SHORT $LN5@truncate
$LN2@truncate:
; Line 4644
	xor	al, al
$LN5@truncate:
; Line 4646
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?truncate@UnicodeString@icu_56@@QAECH@Z ENDP		; icu_56::UnicodeString::truncate
_TEXT	ENDS
PUBLIC	?reverse@UnicodeString@icu_56@@QAEAAV12@XZ	; icu_56::UnicodeString::reverse
EXTRN	?doReverse@UnicodeString@icu_56@@AAEAAV12@HH@Z:PROC ; icu_56::UnicodeString::doReverse
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?reverse@UnicodeString@icu_56@@QAEAAV12@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?reverse@UnicodeString@icu_56@@QAEAAV12@XZ PROC		; icu_56::UnicodeString::reverse, COMDAT
; _this$ = ecx
; Line 4650
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doReverse@UnicodeString@icu_56@@AAEAAV12@HH@Z ; icu_56::UnicodeString::doReverse
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?reverse@UnicodeString@icu_56@@QAEAAV12@XZ ENDP		; icu_56::UnicodeString::reverse
_TEXT	ENDS
PUBLIC	?reverse@UnicodeString@icu_56@@QAEAAV12@HH@Z	; icu_56::UnicodeString::reverse
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?reverse@UnicodeString@icu_56@@QAEAAV12@HH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_start$ = 8						; size = 4
__length$ = 12						; size = 4
?reverse@UnicodeString@icu_56@@QAEAAV12@HH@Z PROC	; icu_56::UnicodeString::reverse, COMDAT
; _this$ = ecx
; Line 4655
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __length$[ebp]
	push	eax
	mov	ecx, DWORD PTR _start$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doReverse@UnicodeString@icu_56@@AAEAAV12@HH@Z ; icu_56::UnicodeString::doReverse
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?reverse@UnicodeString@icu_56@@QAEAAV12@HH@Z ENDP	; icu_56::UnicodeString::reverse
_TEXT	ENDS
PUBLIC	??4ForwardCharacterIterator@icu_56@@IAEAAV01@ABV01@@Z ; icu_56::ForwardCharacterIterator::operator=
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??4ForwardCharacterIterator@icu_56@@IAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___formal$ = 8						; size = 4
??4ForwardCharacterIterator@icu_56@@IAEAAV01@ABV01@@Z PROC ; icu_56::ForwardCharacterIterator::operator=, COMDAT
; _this$ = ecx
; File d:\mozilla\intl\icu\source\common\unicode\chariter.h
; Line 184
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4ForwardCharacterIterator@icu_56@@IAEAAV01@ABV01@@Z ENDP ; icu_56::ForwardCharacterIterator::operator=
_TEXT	ENDS
PUBLIC	??9ForwardCharacterIterator@icu_56@@QBECABV01@@Z ; icu_56::ForwardCharacterIterator::operator!=
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??9ForwardCharacterIterator@icu_56@@QBECABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_that$ = 8						; size = 4
??9ForwardCharacterIterator@icu_56@@QBECABV01@@Z PROC	; icu_56::ForwardCharacterIterator::operator!=, COMDAT
; _this$ = ecx
; Line 687
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 688
	mov	esi, esp
	mov	eax, DWORD PTR _that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	movsx	ecx, al
	test	ecx, ecx
	sete	al
; Line 689
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??9ForwardCharacterIterator@icu_56@@QBECABV01@@Z ENDP	; icu_56::ForwardCharacterIterator::operator!=
_TEXT	ENDS
PUBLIC	?setToStart@CharacterIterator@icu_56@@QAEHXZ	; icu_56::CharacterIterator::setToStart
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?setToStart@CharacterIterator@icu_56@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?setToStart@CharacterIterator@icu_56@@QAEHXZ PROC	; icu_56::CharacterIterator::setToStart, COMDAT
; _this$ = ecx
; Line 692
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 693
	mov	esi, esp
	push	0
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+92]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 694
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?setToStart@CharacterIterator@icu_56@@QAEHXZ ENDP	; icu_56::CharacterIterator::setToStart
_TEXT	ENDS
PUBLIC	?setToEnd@CharacterIterator@icu_56@@QAEHXZ	; icu_56::CharacterIterator::setToEnd
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?setToEnd@CharacterIterator@icu_56@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?setToEnd@CharacterIterator@icu_56@@QAEHXZ PROC		; icu_56::CharacterIterator::setToEnd, COMDAT
; _this$ = ecx
; Line 697
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 698
	mov	esi, esp
	push	2
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+92]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 699
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?setToEnd@CharacterIterator@icu_56@@QAEHXZ ENDP		; icu_56::CharacterIterator::setToEnd
_TEXT	ENDS
PUBLIC	?startIndex@CharacterIterator@icu_56@@QBEHXZ	; icu_56::CharacterIterator::startIndex
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?startIndex@CharacterIterator@icu_56@@QBEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?startIndex@CharacterIterator@icu_56@@QBEHXZ PROC	; icu_56::CharacterIterator::startIndex, COMDAT
; _this$ = ecx
; Line 702
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 703
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+12]
; Line 704
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?startIndex@CharacterIterator@icu_56@@QBEHXZ ENDP	; icu_56::CharacterIterator::startIndex
_TEXT	ENDS
PUBLIC	?endIndex@CharacterIterator@icu_56@@QBEHXZ	; icu_56::CharacterIterator::endIndex
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?endIndex@CharacterIterator@icu_56@@QBEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?endIndex@CharacterIterator@icu_56@@QBEHXZ PROC		; icu_56::CharacterIterator::endIndex, COMDAT
; _this$ = ecx
; Line 707
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 708
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]
; Line 709
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?endIndex@CharacterIterator@icu_56@@QBEHXZ ENDP		; icu_56::CharacterIterator::endIndex
_TEXT	ENDS
PUBLIC	?getIndex@CharacterIterator@icu_56@@QBEHXZ	; icu_56::CharacterIterator::getIndex
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?getIndex@CharacterIterator@icu_56@@QBEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?getIndex@CharacterIterator@icu_56@@QBEHXZ PROC		; icu_56::CharacterIterator::getIndex, COMDAT
; _this$ = ecx
; Line 712
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 713
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
; Line 714
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?getIndex@CharacterIterator@icu_56@@QBEHXZ ENDP		; icu_56::CharacterIterator::getIndex
_TEXT	ENDS
PUBLIC	?getLength@CharacterIterator@icu_56@@QBEHXZ	; icu_56::CharacterIterator::getLength
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?getLength@CharacterIterator@icu_56@@QBEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?getLength@CharacterIterator@icu_56@@QBEHXZ PROC	; icu_56::CharacterIterator::getLength, COMDAT
; _this$ = ecx
; Line 717
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 718
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
; Line 719
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?getLength@CharacterIterator@icu_56@@QBEHXZ ENDP	; icu_56::CharacterIterator::getLength
_TEXT	ENDS
PUBLIC	_utext_previous32_56
PUBLIC	_utext_next32_56
PUBLIC	_utext_moveIndex32_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _utext_moveIndex32_56
_TEXT	SEGMENT
_c$ = -8						; size = 4
_ut$ = 8						; size = 4
_delta$ = 12						; size = 4
_utext_moveIndex32_56 PROC				; COMDAT
; File d:\mozilla\intl\icu\source\common\utext.cpp
; Line 44
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 46
	cmp	DWORD PTR _delta$[ebp], 0
	jle	$LN17@utext_move
$LN16@utext_move:
; Line 48
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR _ut$[ebp]
	mov	edx, DWORD PTR [eax+40]
	cmp	edx, DWORD PTR [ecx+44]
	jl	SHORT $LN13@utext_move
	push	1
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	mov	edx, DWORD PTR [eax+16]
	push	edx
	mov	eax, DWORD PTR _ut$[ebp]
	push	eax
	call	?utext_access@@YACPAUUText@@_JC@Z	; utext_access
	add	esp, 16					; 00000010H
	movsx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN13@utext_move
; Line 49
	xor	al, al
	jmp	$LN18@utext_move
$LN13@utext_move:
; Line 51
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR _ut$[ebp]
	mov	eax, DWORD PTR [edx+48]
	movzx	ecx, WORD PTR [eax+ecx*2]
	mov	DWORD PTR _c$[ebp], ecx
; Line 52
	mov	eax, DWORD PTR _c$[ebp]
	and	eax, -2048				; fffff800H
	cmp	eax, 55296				; 0000d800H
	jne	SHORT $LN12@utext_move
; Line 53
	mov	eax, DWORD PTR _ut$[ebp]
	push	eax
	call	_utext_next32_56
	add	esp, 4
	mov	DWORD PTR _c$[ebp], eax
; Line 54
	cmp	DWORD PTR _c$[ebp], -1
	jne	SHORT $LN11@utext_move
; Line 55
	xor	al, al
	jmp	$LN18@utext_move
$LN11@utext_move:
; Line 57
	jmp	SHORT $LN15@utext_move
$LN12@utext_move:
; Line 58
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	add	ecx, 1
	mov	edx, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [edx+40], ecx
$LN15@utext_move:
; Line 60
	mov	eax, DWORD PTR _delta$[ebp]
	sub	eax, 1
	mov	DWORD PTR _delta$[ebp], eax
	cmp	DWORD PTR _delta$[ebp], 0
	jg	$LN16@utext_move
; Line 62
	jmp	$LN9@utext_move
$LN17@utext_move:
	cmp	DWORD PTR _delta$[ebp], 0
	jge	$LN9@utext_move
$LN7@utext_move:
; Line 64
	mov	eax, DWORD PTR _ut$[ebp]
	cmp	DWORD PTR [eax+40], 0
	jg	SHORT $LN4@utext_move
	push	0
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	push	ecx
	mov	edx, DWORD PTR [eax+32]
	push	edx
	mov	eax, DWORD PTR _ut$[ebp]
	push	eax
	call	?utext_access@@YACPAUUText@@_JC@Z	; utext_access
	add	esp, 16					; 00000010H
	movsx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN4@utext_move
; Line 65
	xor	al, al
	jmp	SHORT $LN18@utext_move
$LN4@utext_move:
; Line 67
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR _ut$[ebp]
	mov	eax, DWORD PTR [edx+48]
	movzx	ecx, WORD PTR [eax+ecx*2-2]
	mov	DWORD PTR _c$[ebp], ecx
; Line 68
	mov	eax, DWORD PTR _c$[ebp]
	and	eax, -2048				; fffff800H
	cmp	eax, 55296				; 0000d800H
	jne	SHORT $LN3@utext_move
; Line 69
	mov	eax, DWORD PTR _ut$[ebp]
	push	eax
	call	_utext_previous32_56
	add	esp, 4
	mov	DWORD PTR _c$[ebp], eax
; Line 70
	cmp	DWORD PTR _c$[ebp], -1
	jne	SHORT $LN2@utext_move
; Line 71
	xor	al, al
	jmp	SHORT $LN18@utext_move
$LN2@utext_move:
; Line 73
	jmp	SHORT $LN6@utext_move
$LN3@utext_move:
; Line 74
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	sub	ecx, 1
	mov	edx, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [edx+40], ecx
$LN6@utext_move:
; Line 76
	mov	eax, DWORD PTR _delta$[ebp]
	add	eax, 1
	mov	DWORD PTR _delta$[ebp], eax
	js	$LN7@utext_move
$LN9@utext_move:
; Line 79
	mov	al, 1
$LN18@utext_move:
; Line 80
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_utext_moveIndex32_56 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?utext_access@@YACPAUUText@@_JC@Z
_TEXT	SEGMENT
_ut$ = 8						; size = 4
_index$ = 12						; size = 8
_forward$ = 20						; size = 1
?utext_access@@YACPAUUText@@_JC@Z PROC			; utext_access, COMDAT
; Line 37
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 38
	mov	esi, esp
	movzx	eax, BYTE PTR _forward$[ebp]
	push	eax
	mov	ecx, DWORD PTR _index$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _index$[ebp]
	push	edx
	mov	eax, DWORD PTR _ut$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ut$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 39
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?utext_access@@YACPAUUText@@_JC@Z ENDP			; utext_access
_TEXT	ENDS
PUBLIC	_utext_nativeLength_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _utext_nativeLength_56
_TEXT	SEGMENT
_ut$ = 8						; size = 4
_utext_nativeLength_56 PROC				; COMDAT
; Line 84
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 85
	mov	esi, esp
	mov	eax, DWORD PTR _ut$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ut$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR [edx+20]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 86
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_utext_nativeLength_56 ENDP
_TEXT	ENDS
PUBLIC	_utext_isLengthExpensive_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _utext_isLengthExpensive_56
_TEXT	SEGMENT
_r$ = -5						; size = 1
_ut$ = 8						; size = 4
_utext_isLengthExpensive_56 PROC			; COMDAT
; Line 90
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 91
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, 2
	setne	dl
	mov	BYTE PTR _r$[ebp], dl
; Line 92
	mov	al, BYTE PTR _r$[ebp]
; Line 93
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_utext_isLengthExpensive_56 ENDP
_TEXT	ENDS
PUBLIC	_utext_getNativeIndex_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _utext_getNativeIndex_56
_TEXT	SEGMENT
_ut$ = 8						; size = 4
_utext_getNativeIndex_56 PROC				; COMDAT
; Line 97
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 98
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR _ut$[ebp]
	mov	edx, DWORD PTR [eax+40]
	cmp	edx, DWORD PTR [ecx+28]
	jg	SHORT $LN2@utext_getN
; Line 99
	mov	eax, DWORD PTR _ut$[ebp]
	mov	eax, DWORD PTR [eax+40]
	cdq
	mov	ecx, DWORD PTR _ut$[ebp]
	add	eax, DWORD PTR [ecx+32]
	adc	edx, DWORD PTR [ecx+36]
	jmp	SHORT $LN3@utext_getN
; Line 100
	jmp	SHORT $LN3@utext_getN
$LN2@utext_getN:
; Line 101
	mov	esi, esp
	mov	eax, DWORD PTR _ut$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ut$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR [edx+40]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@utext_getN:
; Line 103
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_utext_getNativeIndex_56 ENDP
_TEXT	ENDS
PUBLIC	_utext_setNativeIndex_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _utext_setNativeIndex_56
_TEXT	SEGMENT
tv169 = -220						; size = 4
tv161 = -220						; size = 4
_lead$36559 = -20					; size = 2
_c$36555 = -8						; size = 2
_ut$ = 8						; size = 4
_index$ = 12						; size = 8
_utext_setNativeIndex_56 PROC				; COMDAT
; Line 107
	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 108
	mov	eax, DWORD PTR _ut$[ebp]
	mov	DWORD PTR tv161[ebp], eax
	mov	ecx, DWORD PTR tv161[ebp]
	mov	edx, DWORD PTR _index$[ebp+4]
	cmp	edx, DWORD PTR [ecx+36]
	jl	SHORT $LN9@utext_setN
	jg	SHORT $LN13@utext_setN
	mov	eax, DWORD PTR tv161[ebp]
	mov	ecx, DWORD PTR _index$[ebp]
	cmp	ecx, DWORD PTR [eax+32]
	jb	SHORT $LN9@utext_setN
$LN13@utext_setN:
	mov	eax, DWORD PTR _ut$[ebp]
	mov	DWORD PTR tv169[ebp], eax
	mov	ecx, DWORD PTR tv169[ebp]
	mov	edx, DWORD PTR _index$[ebp+4]
	cmp	edx, DWORD PTR [ecx+20]
	jl	SHORT $LN10@utext_setN
	jg	SHORT $LN9@utext_setN
	mov	eax, DWORD PTR tv169[ebp]
	mov	ecx, DWORD PTR _index$[ebp]
	cmp	ecx, DWORD PTR [eax+16]
	jb	SHORT $LN10@utext_setN
$LN9@utext_setN:
; Line 113
	mov	esi, esp
	push	1
	mov	eax, DWORD PTR _index$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _index$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ut$[ebp]
	push	edx
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	mov	edx, DWORD PTR [ecx+24]
	call	edx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	SHORT $LN8@utext_setN
$LN10@utext_setN:
; Line 114
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR _index$[ebp]
	sub	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR _index$[ebp+4]
	sbb	edx, DWORD PTR [eax+36]
	mov	eax, DWORD PTR _ut$[ebp]
	cmp	ecx, DWORD PTR [eax+28]
	jg	SHORT $LN7@utext_setN
; Line 116
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR _index$[ebp]
	sub	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR _index$[ebp+4]
	sbb	edx, DWORD PTR [eax+36]
	mov	eax, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [eax+40], ecx
; Line 117
	jmp	SHORT $LN8@utext_setN
$LN7@utext_setN:
; Line 118
	mov	esi, esp
	mov	eax, DWORD PTR _index$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _index$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ut$[ebp]
	push	edx
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	mov	edx, DWORD PTR [ecx+44]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [ecx+40], eax
$LN8@utext_setN:
; Line 122
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR _ut$[ebp]
	mov	edx, DWORD PTR [eax+40]
	cmp	edx, DWORD PTR [ecx+44]
	jge	$LN11@utext_setN
; Line 123
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR _ut$[ebp]
	mov	eax, DWORD PTR [edx+48]
	mov	cx, WORD PTR [eax+ecx*2]
	mov	WORD PTR _c$36555[ebp], cx
; Line 124
	movzx	eax, WORD PTR _c$36555[ebp]
	and	eax, -1024				; fffffc00H
	cmp	eax, 56320				; 0000dc00H
	jne	SHORT $LN11@utext_setN
; Line 125
	mov	eax, DWORD PTR _ut$[ebp]
	cmp	DWORD PTR [eax+40], 0
	jne	SHORT $LN3@utext_setN
; Line 126
	mov	esi, esp
	push	0
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	push	ecx
	mov	edx, DWORD PTR [eax+32]
	push	edx
	mov	eax, DWORD PTR _ut$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ut$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@utext_setN:
; Line 128
	mov	eax, DWORD PTR _ut$[ebp]
	cmp	DWORD PTR [eax+40], 0
	jle	SHORT $LN11@utext_setN
; Line 129
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR _ut$[ebp]
	mov	eax, DWORD PTR [edx+48]
	mov	cx, WORD PTR [eax+ecx*2-2]
	mov	WORD PTR _lead$36559[ebp], cx
; Line 130
	movzx	eax, WORD PTR _lead$36559[ebp]
	and	eax, -1024				; fffffc00H
	cmp	eax, 55296				; 0000d800H
	jne	SHORT $LN11@utext_setN
; Line 131
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	sub	ecx, 1
	mov	edx, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [edx+40], ecx
$LN11@utext_setN:
; Line 136
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_utext_setNativeIndex_56 ENDP
_TEXT	ENDS
PUBLIC	_utext_getPreviousNativeIndex_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _utext_getPreviousNativeIndex_56
_TEXT	SEGMENT
tv137 = -240						; size = 8
tv181 = -236						; size = 4
_c$36567 = -36						; size = 2
_result$ = -24						; size = 8
_i$ = -8						; size = 4
_ut$ = 8						; size = 4
_utext_getPreviousNativeIndex_56 PROC			; COMDAT
; Line 141
	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 147
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	sub	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
; Line 149
	js	$LN5@utext_getP
; Line 150
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	edx, DWORD PTR _i$[ebp]
	mov	ax, WORD PTR [ecx+edx*2]
	mov	WORD PTR _c$36567[ebp], ax
; Line 151
	movzx	eax, WORD PTR _c$36567[ebp]
	and	eax, -1024				; fffffc00H
	xor	ecx, ecx
	cmp	eax, 56320				; 0000dc00H
	sete	cl
	test	ecx, ecx
	jne	SHORT $LN5@utext_getP
; Line 152
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR [eax+28]
	jg	SHORT $LN3@utext_getP
; Line 153
	mov	eax, DWORD PTR _i$[ebp]
	cdq
	mov	ecx, DWORD PTR _ut$[ebp]
	add	eax, DWORD PTR [ecx+32]
	adc	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR _result$[ebp], eax
	mov	DWORD PTR _result$[ebp+4], edx
; Line 154
	jmp	SHORT $LN2@utext_getP
$LN3@utext_getP:
; Line 155
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [eax+40], ecx
; Line 156
	mov	esi, esp
	mov	eax, DWORD PTR _ut$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ut$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR [edx+40]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
	mov	DWORD PTR _result$[ebp+4], edx
; Line 157
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	add	ecx, 1
	mov	edx, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [edx+40], ecx
$LN2@utext_getP:
; Line 159
	mov	eax, DWORD PTR _result$[ebp]
	mov	edx, DWORD PTR _result$[ebp+4]
	jmp	$LN6@utext_getP
$LN5@utext_getP:
; Line 164
	mov	eax, DWORD PTR _ut$[ebp]
	cmp	DWORD PTR [eax+40], 0
	jne	SHORT $LN1@utext_getP
	mov	eax, DWORD PTR _ut$[ebp]
	mov	DWORD PTR tv181[ebp], eax
	mov	ecx, DWORD PTR tv181[ebp]
	mov	edx, DWORD PTR tv181[ebp]
	mov	eax, DWORD PTR [ecx+32]
	or	eax, DWORD PTR [edx+36]
	jne	SHORT $LN1@utext_getP
; Line 165
	xor	eax, eax
	xor	edx, edx
	jmp	$LN6@utext_getP
$LN1@utext_getP:
; Line 171
	mov	eax, DWORD PTR _ut$[ebp]
	push	eax
	call	_utext_previous32_56
	add	esp, 4
; Line 172
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR _ut$[ebp]
	mov	edx, DWORD PTR [eax+40]
	cmp	edx, DWORD PTR [ecx+28]
	jg	SHORT $LN8@utext_getP
	mov	eax, DWORD PTR _ut$[ebp]
	mov	eax, DWORD PTR [eax+40]
	cdq
	mov	ecx, DWORD PTR _ut$[ebp]
	add	eax, DWORD PTR [ecx+32]
	adc	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR tv137[ebp], eax
	mov	DWORD PTR tv137[ebp+4], edx
	jmp	SHORT $LN9@utext_getP
$LN8@utext_getP:
	mov	esi, esp
	mov	edx, DWORD PTR _ut$[ebp]
	push	edx
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	mov	edx, DWORD PTR [ecx+40]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv137[ebp], eax
	mov	DWORD PTR tv137[ebp+4], edx
$LN9@utext_getP:
	mov	eax, DWORD PTR tv137[ebp]
	mov	DWORD PTR _result$[ebp], eax
	mov	ecx, DWORD PTR tv137[ebp+4]
	mov	DWORD PTR _result$[ebp+4], ecx
; Line 173
	mov	eax, DWORD PTR _ut$[ebp]
	push	eax
	call	_utext_next32_56
	add	esp, 4
; Line 174
	mov	eax, DWORD PTR _result$[ebp]
	mov	edx, DWORD PTR _result$[ebp+4]
$LN6@utext_getP:
; Line 175
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_utext_getPreviousNativeIndex_56 ENDP
_TEXT	ENDS
PUBLIC	??_C@_19HCAPDH@?$AAr?$AA?$DN?$AA?$DN?$AA1?$AA?$AA@ ; `string'
PUBLIC	??_C@_1FI@DOHBLNEC@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@ ; `string'
PUBLIC	?__LINE__Var@?1??utext_current32_56@@9@4JA	; `utext_current32_56'::`2'::__LINE__Var
PUBLIC	_utext_current32_56
EXTRN	__imp___wassert:PROC
;	COMDAT ??_C@_19HCAPDH@?$AAr?$AA?$DN?$AA?$DN?$AA1?$AA?$AA@
CONST	SEGMENT
??_C@_19HCAPDH@?$AAr?$AA?$DN?$AA?$DN?$AA1?$AA?$AA@ DB 'r', 00H, '=', 00H, '='
	DB	00H, '1', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1FI@DOHBLNEC@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@
CONST	SEGMENT
??_C@_1FI@DOHBLNEC@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@ DB 'd'
	DB	00H, ':', 00H, '\', 00H, 'm', 00H, 'o', 00H, 'z', 00H, 'i', 00H
	DB	'l', 00H, 'l', 00H, 'a', 00H, '\', 00H, 'i', 00H, 'n', 00H, 't'
	DB	00H, 'l', 00H, '\', 00H, 'i', 00H, 'c', 00H, 'u', 00H, '\', 00H
	DB	's', 00H, 'o', 00H, 'u', 00H, 'r', 00H, 'c', 00H, 'e', 00H, '\'
	DB	00H, 'c', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'o', 00H, 'n', 00H
	DB	'\', 00H, 'u', 00H, 't', 00H, 'e', 00H, 'x', 00H, 't', 00H, '.'
	DB	00H, 'c', 00H, 'p', 00H, 'p', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??utext_current32_56@@9@4JA
_DATA	SEGMENT
?__LINE__Var@?1??utext_current32_56@@9@4JA DD 0b8H	; `utext_current32_56'::`2'::__LINE__Var
; Function compile flags: /Odtp /RTCsu /ZI
_DATA	ENDS
;	COMDAT _utext_current32_56
_TEXT	SEGMENT
_r$36586 = -69						; size = 1
_originalOffset$36584 = -60				; size = 4
_nativePosition$36583 = -48				; size = 8
_supplementaryC$ = -32					; size = 4
_trail$ = -20						; size = 4
_c$ = -8						; size = 4
_ut$ = 8						; size = 4
_utext_current32_56 PROC				; COMDAT
; Line 184
	push	ebp
	mov	ebp, esp
	sub	esp, 268				; 0000010cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-268]
	mov	ecx, 67					; 00000043H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 186
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR _ut$[ebp]
	mov	edx, DWORD PTR [eax+40]
	cmp	edx, DWORD PTR [ecx+44]
	jne	SHORT $LN8@utext_curr
; Line 188
	mov	esi, esp
	push	1
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	mov	edx, DWORD PTR [eax+16]
	push	edx
	mov	eax, DWORD PTR _ut$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ut$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	movsx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN8@utext_curr
; Line 190
	or	eax, -1
	jmp	$LN9@utext_curr
$LN8@utext_curr:
; Line 194
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR _ut$[ebp]
	mov	eax, DWORD PTR [edx+48]
	movzx	ecx, WORD PTR [eax+ecx*2]
	mov	DWORD PTR _c$[ebp], ecx
; Line 195
	mov	eax, DWORD PTR _c$[ebp]
	and	eax, -1024				; fffffc00H
	xor	ecx, ecx
	cmp	eax, 55296				; 0000d800H
	sete	cl
	test	ecx, ecx
	jne	SHORT $LN6@utext_curr
; Line 197
	mov	eax, DWORD PTR _c$[ebp]
	jmp	$LN9@utext_curr
$LN6@utext_curr:
; Line 203
	mov	DWORD PTR _trail$[ebp], 0
; Line 204
	mov	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR _supplementaryC$[ebp], eax
; Line 205
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	add	ecx, 1
	mov	edx, DWORD PTR _ut$[ebp]
	cmp	ecx, DWORD PTR [edx+44]
	jge	SHORT $LN5@utext_curr
; Line 207
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR _ut$[ebp]
	mov	eax, DWORD PTR [edx+48]
	movzx	ecx, WORD PTR [eax+ecx*2+2]
	mov	DWORD PTR _trail$[ebp], ecx
; Line 208
	jmp	$LN4@utext_curr
$LN5@utext_curr:
; Line 216
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _nativePosition$36583[ebp], ecx
	mov	edx, DWORD PTR [eax+20]
	mov	DWORD PTR _nativePosition$36583[ebp+4], edx
; Line 217
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR _originalOffset$36584[ebp], ecx
; Line 218
	mov	esi, esp
	push	1
	mov	eax, DWORD PTR _nativePosition$36583[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _nativePosition$36583[ebp]
	push	ecx
	mov	edx, DWORD PTR _ut$[ebp]
	push	edx
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	mov	edx, DWORD PTR [ecx+24]
	call	edx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	movsx	eax, al
	test	eax, eax
	je	SHORT $LN3@utext_curr
; Line 219
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR _ut$[ebp]
	mov	eax, DWORD PTR [edx+48]
	movzx	ecx, WORD PTR [eax+ecx*2]
	mov	DWORD PTR _trail$[ebp], ecx
$LN3@utext_curr:
; Line 221
	mov	esi, esp
	push	0
	mov	eax, DWORD PTR _nativePosition$36583[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _nativePosition$36583[ebp]
	push	ecx
	mov	edx, DWORD PTR _ut$[ebp]
	push	edx
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	mov	edx, DWORD PTR [ecx+24]
	call	edx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	BYTE PTR _r$36586[ebp], al
; Line 222
	movsx	eax, BYTE PTR _r$36586[ebp]
	cmp	eax, 1
	je	SHORT $LN11@utext_curr
	mov	ecx, DWORD PTR ?__LINE__Var@?1??utext_current32_56@@9@4JA
	add	ecx, 38					; 00000026H
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_1FI@DOHBLNEC@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@
	push	OFFSET ??_C@_19HCAPDH@?$AAr?$AA?$DN?$AA?$DN?$AA1?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN11@utext_curr:
; Line 223
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR _originalOffset$36584[ebp]
	mov	DWORD PTR [eax+40], ecx
; Line 224
	movsx	eax, BYTE PTR _r$36586[ebp]
	test	eax, eax
	jne	SHORT $LN4@utext_curr
; Line 225
	or	eax, -1
	jmp	SHORT $LN9@utext_curr
$LN4@utext_curr:
; Line 229
	mov	eax, DWORD PTR _trail$[ebp]
	and	eax, -1024				; fffffc00H
	cmp	eax, 56320				; 0000dc00H
	jne	SHORT $LN1@utext_curr
; Line 230
	mov	eax, DWORD PTR _c$[ebp]
	shl	eax, 10					; 0000000aH
	mov	ecx, DWORD PTR _trail$[ebp]
	lea	edx, DWORD PTR [eax+ecx-56613888]
	mov	DWORD PTR _supplementaryC$[ebp], edx
$LN1@utext_curr:
; Line 232
	mov	eax, DWORD PTR _supplementaryC$[ebp]
$LN9@utext_curr:
; Line 234
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 268				; 0000010cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_utext_current32_56 ENDP
_TEXT	ENDS
PUBLIC	_utext_char32At_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _utext_char32At_56
_TEXT	SEGMENT
tv156 = -212						; size = 8
tv183 = -208						; size = 4
tv137 = -208						; size = 4
_c$ = -8						; size = 4
_ut$ = 8						; size = 4
_nativeIndex$ = 12					; size = 8
_utext_char32At_56 PROC					; COMDAT
; Line 238
	push	ebp
	mov	ebp, esp
	sub	esp, 212				; 000000d4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-212]
	mov	ecx, 53					; 00000035H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 239
	mov	DWORD PTR _c$[ebp], -1
; Line 242
	mov	eax, DWORD PTR _ut$[ebp]
	mov	DWORD PTR tv137[ebp], eax
	mov	ecx, DWORD PTR tv137[ebp]
	mov	edx, DWORD PTR _nativeIndex$[ebp+4]
	cmp	edx, DWORD PTR [ecx+36]
	jl	$LN4@utext_char
	jg	SHORT $LN7@utext_char
	mov	eax, DWORD PTR tv137[ebp]
	mov	ecx, DWORD PTR _nativeIndex$[ebp]
	cmp	ecx, DWORD PTR [eax+32]
	jb	SHORT $LN4@utext_char
$LN7@utext_char:
	mov	eax, DWORD PTR _ut$[ebp]
	mov	eax, DWORD PTR [eax+28]
	cdq
	mov	ecx, DWORD PTR _ut$[ebp]
	add	eax, DWORD PTR [ecx+32]
	adc	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR tv156[ebp], eax
	mov	DWORD PTR tv156[ebp+4], edx
	mov	edx, DWORD PTR _nativeIndex$[ebp+4]
	cmp	edx, DWORD PTR tv156[ebp+4]
	jg	SHORT $LN4@utext_char
	jl	SHORT $LN8@utext_char
	mov	eax, DWORD PTR _nativeIndex$[ebp]
	cmp	eax, DWORD PTR tv156[ebp]
	jae	SHORT $LN4@utext_char
$LN8@utext_char:
; Line 243
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR _nativeIndex$[ebp]
	sub	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR _nativeIndex$[ebp+4]
	sbb	edx, DWORD PTR [eax+36]
	mov	eax, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [eax+40], ecx
; Line 244
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR _ut$[ebp]
	mov	eax, DWORD PTR [edx+48]
	movzx	ecx, WORD PTR [eax+ecx*2]
	mov	DWORD PTR _c$[ebp], ecx
; Line 245
	mov	eax, DWORD PTR _c$[ebp]
	and	eax, -2048				; fffff800H
	xor	ecx, ecx
	cmp	eax, 55296				; 0000d800H
	sete	cl
	test	ecx, ecx
	jne	SHORT $LN4@utext_char
; Line 246
	mov	eax, DWORD PTR _c$[ebp]
	jmp	SHORT $LN5@utext_char
$LN4@utext_char:
; Line 251
	mov	eax, DWORD PTR _nativeIndex$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _nativeIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ut$[ebp]
	push	edx
	call	_utext_setNativeIndex_56
	add	esp, 12					; 0000000cH
; Line 252
	mov	eax, DWORD PTR _ut$[ebp]
	mov	DWORD PTR tv183[ebp], eax
	mov	ecx, DWORD PTR tv183[ebp]
	mov	edx, DWORD PTR _nativeIndex$[ebp+4]
	cmp	edx, DWORD PTR [ecx+36]
	jl	SHORT $LN2@utext_char
	jg	SHORT $LN9@utext_char
	mov	eax, DWORD PTR tv183[ebp]
	mov	ecx, DWORD PTR _nativeIndex$[ebp]
	cmp	ecx, DWORD PTR [eax+32]
	jb	SHORT $LN2@utext_char
$LN9@utext_char:
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR _ut$[ebp]
	mov	edx, DWORD PTR [eax+40]
	cmp	edx, DWORD PTR [ecx+44]
	jge	SHORT $LN2@utext_char
; Line 253
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR _ut$[ebp]
	mov	eax, DWORD PTR [edx+48]
	movzx	ecx, WORD PTR [eax+ecx*2]
	mov	DWORD PTR _c$[ebp], ecx
; Line 254
	mov	eax, DWORD PTR _c$[ebp]
	and	eax, -2048				; fffff800H
	cmp	eax, 55296				; 0000d800H
	jne	SHORT $LN2@utext_char
; Line 257
	mov	eax, DWORD PTR _ut$[ebp]
	push	eax
	call	_utext_current32_56
	add	esp, 4
	mov	DWORD PTR _c$[ebp], eax
$LN2@utext_char:
; Line 260
	mov	eax, DWORD PTR _c$[ebp]
$LN5@utext_char:
; Line 261
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 212				; 000000d4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_utext_char32At_56 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _utext_next32_56
_TEXT	SEGMENT
_supplementary$ = -32					; size = 4
_trail$ = -20						; size = 4
_c$ = -8						; size = 4
_ut$ = 8						; size = 4
_utext_next32_56 PROC					; COMDAT
; Line 265
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 268
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR _ut$[ebp]
	mov	edx, DWORD PTR [eax+40]
	cmp	edx, DWORD PTR [ecx+44]
	jl	SHORT $LN6@utext_next
; Line 269
	mov	esi, esp
	push	1
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	mov	edx, DWORD PTR [eax+16]
	push	edx
	mov	eax, DWORD PTR _ut$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ut$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	movsx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN6@utext_next
; Line 270
	or	eax, -1
	jmp	$LN7@utext_next
$LN6@utext_next:
; Line 274
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR _ut$[ebp]
	mov	eax, DWORD PTR [edx+48]
	movzx	ecx, WORD PTR [eax+ecx*2]
	mov	DWORD PTR _c$[ebp], ecx
	mov	edx, DWORD PTR _ut$[ebp]
	mov	eax, DWORD PTR [edx+40]
	add	eax, 1
	mov	ecx, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [ecx+40], eax
; Line 275
	mov	eax, DWORD PTR _c$[ebp]
	and	eax, -1024				; fffffc00H
	xor	ecx, ecx
	cmp	eax, 55296				; 0000d800H
	sete	cl
	test	ecx, ecx
	jne	SHORT $LN4@utext_next
; Line 279
	mov	eax, DWORD PTR _c$[ebp]
	jmp	$LN7@utext_next
$LN4@utext_next:
; Line 282
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR _ut$[ebp]
	mov	edx, DWORD PTR [eax+40]
	cmp	edx, DWORD PTR [ecx+44]
	jl	SHORT $LN3@utext_next
; Line 283
	mov	esi, esp
	push	1
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	mov	edx, DWORD PTR [eax+16]
	push	edx
	mov	eax, DWORD PTR _ut$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ut$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	movsx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN3@utext_next
; Line 286
	mov	eax, DWORD PTR _c$[ebp]
	jmp	SHORT $LN7@utext_next
$LN3@utext_next:
; Line 289
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR _ut$[ebp]
	mov	eax, DWORD PTR [edx+48]
	movzx	ecx, WORD PTR [eax+ecx*2]
	mov	DWORD PTR _trail$[ebp], ecx
; Line 290
	mov	eax, DWORD PTR _trail$[ebp]
	and	eax, -1024				; fffffc00H
	xor	ecx, ecx
	cmp	eax, 56320				; 0000dc00H
	sete	cl
	test	ecx, ecx
	jne	SHORT $LN1@utext_next
; Line 295
	mov	eax, DWORD PTR _c$[ebp]
	jmp	SHORT $LN7@utext_next
$LN1@utext_next:
; Line 298
	mov	eax, DWORD PTR _c$[ebp]
	shl	eax, 10					; 0000000aH
	mov	ecx, DWORD PTR _trail$[ebp]
	lea	edx, DWORD PTR [eax+ecx-56613888]
	mov	DWORD PTR _supplementary$[ebp], edx
; Line 299
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	add	ecx, 1
	mov	edx, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [edx+40], ecx
; Line 300
	mov	eax, DWORD PTR _supplementary$[ebp]
$LN7@utext_next:
; Line 301
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_utext_next32_56 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _utext_previous32_56
_TEXT	SEGMENT
_supplementary$ = -32					; size = 4
_lead$ = -20						; size = 4
_c$ = -8						; size = 4
_ut$ = 8						; size = 4
_utext_previous32_56 PROC				; COMDAT
; Line 305
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 308
	mov	eax, DWORD PTR _ut$[ebp]
	cmp	DWORD PTR [eax+40], 0
	jg	SHORT $LN6@utext_prev
; Line 309
	mov	esi, esp
	push	0
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	push	ecx
	mov	edx, DWORD PTR [eax+32]
	push	edx
	mov	eax, DWORD PTR _ut$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ut$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	movsx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN6@utext_prev
; Line 310
	or	eax, -1
	jmp	$LN7@utext_prev
$LN6@utext_prev:
; Line 313
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	sub	ecx, 1
	mov	edx, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [edx+40], ecx
; Line 314
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR _ut$[ebp]
	mov	eax, DWORD PTR [edx+48]
	movzx	ecx, WORD PTR [eax+ecx*2]
	mov	DWORD PTR _c$[ebp], ecx
; Line 315
	mov	eax, DWORD PTR _c$[ebp]
	and	eax, -1024				; fffffc00H
	xor	ecx, ecx
	cmp	eax, 56320				; 0000dc00H
	sete	cl
	test	ecx, ecx
	jne	SHORT $LN4@utext_prev
; Line 319
	mov	eax, DWORD PTR _c$[ebp]
	jmp	$LN7@utext_prev
$LN4@utext_prev:
; Line 322
	mov	eax, DWORD PTR _ut$[ebp]
	cmp	DWORD PTR [eax+40], 0
	jg	SHORT $LN3@utext_prev
; Line 323
	mov	esi, esp
	push	0
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	push	ecx
	mov	edx, DWORD PTR [eax+32]
	push	edx
	mov	eax, DWORD PTR _ut$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ut$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	movsx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN3@utext_prev
; Line 326
	mov	eax, DWORD PTR _c$[ebp]
	jmp	SHORT $LN7@utext_prev
$LN3@utext_prev:
; Line 330
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR _ut$[ebp]
	mov	eax, DWORD PTR [edx+48]
	movzx	ecx, WORD PTR [eax+ecx*2-2]
	mov	DWORD PTR _lead$[ebp], ecx
; Line 331
	mov	eax, DWORD PTR _lead$[ebp]
	and	eax, -1024				; fffffc00H
	xor	ecx, ecx
	cmp	eax, 55296				; 0000d800H
	sete	cl
	test	ecx, ecx
	jne	SHORT $LN1@utext_prev
; Line 334
	mov	eax, DWORD PTR _c$[ebp]
	jmp	SHORT $LN7@utext_prev
$LN1@utext_prev:
; Line 337
	mov	eax, DWORD PTR _lead$[ebp]
	shl	eax, 10					; 0000000aH
	mov	ecx, DWORD PTR _c$[ebp]
	lea	edx, DWORD PTR [eax+ecx-56613888]
	mov	DWORD PTR _supplementary$[ebp], edx
; Line 338
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	sub	ecx, 1
	mov	edx, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [edx+40], ecx
; Line 339
	mov	eax, DWORD PTR _supplementary$[ebp]
$LN7@utext_prev:
; Line 340
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_utext_previous32_56 ENDP
_TEXT	ENDS
PUBLIC	_utext_next32From_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _utext_next32From_56
_TEXT	SEGMENT
tv186 = -220						; size = 8
tv183 = -212						; size = 8
tv151 = -208						; size = 4
tv143 = -208						; size = 4
_c$ = -8						; size = 4
_ut$ = 8						; size = 4
_index$ = 12						; size = 8
_utext_next32From_56 PROC				; COMDAT
; Line 345
	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 346
	mov	DWORD PTR _c$[ebp], -1
; Line 348
	mov	eax, DWORD PTR _ut$[ebp]
	mov	DWORD PTR tv143[ebp], eax
	mov	ecx, DWORD PTR tv143[ebp]
	mov	edx, DWORD PTR _index$[ebp+4]
	cmp	edx, DWORD PTR [ecx+36]
	jl	SHORT $LN6@utext_next@2
	jg	SHORT $LN10@utext_next@2
	mov	eax, DWORD PTR tv143[ebp]
	mov	ecx, DWORD PTR _index$[ebp]
	cmp	ecx, DWORD PTR [eax+32]
	jb	SHORT $LN6@utext_next@2
$LN10@utext_next@2:
	mov	eax, DWORD PTR _ut$[ebp]
	mov	DWORD PTR tv151[ebp], eax
	mov	ecx, DWORD PTR tv151[ebp]
	mov	edx, DWORD PTR _index$[ebp+4]
	cmp	edx, DWORD PTR [ecx+20]
	jl	SHORT $LN7@utext_next@2
	jg	SHORT $LN6@utext_next@2
	mov	eax, DWORD PTR tv151[ebp]
	mov	ecx, DWORD PTR _index$[ebp]
	cmp	ecx, DWORD PTR [eax+16]
	jb	SHORT $LN7@utext_next@2
$LN6@utext_next@2:
; Line 350
	mov	esi, esp
	push	1
	mov	eax, DWORD PTR _index$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _index$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ut$[ebp]
	push	edx
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	mov	edx, DWORD PTR [ecx+24]
	call	edx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	movsx	eax, al
	test	eax, eax
	jne	SHORT $LN5@utext_next@2
; Line 352
	or	eax, -1
	jmp	$LN8@utext_next@2
$LN5@utext_next@2:
; Line 353
	jmp	$LN4@utext_next@2
$LN7@utext_next@2:
; Line 354
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR _index$[ebp]
	sub	ecx, DWORD PTR [eax+32]
	mov	esi, DWORD PTR _index$[ebp+4]
	sbb	esi, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _ut$[ebp]
	mov	eax, DWORD PTR [edx+28]
	cdq
	mov	DWORD PTR tv183[ebp], ecx
	mov	DWORD PTR tv183[ebp+4], esi
	mov	DWORD PTR tv186[ebp], eax
	mov	DWORD PTR tv186[ebp+4], edx
	mov	eax, DWORD PTR tv183[ebp+4]
	cmp	eax, DWORD PTR tv186[ebp+4]
	jg	SHORT $LN3@utext_next@2
	jl	SHORT $LN12@utext_next@2
	mov	ecx, DWORD PTR tv183[ebp]
	cmp	ecx, DWORD PTR tv186[ebp]
	ja	SHORT $LN3@utext_next@2
$LN12@utext_next@2:
; Line 356
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR _index$[ebp]
	sub	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR _index$[ebp+4]
	sbb	edx, DWORD PTR [eax+36]
	mov	eax, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [eax+40], ecx
; Line 357
	jmp	SHORT $LN4@utext_next@2
$LN3@utext_next@2:
; Line 359
	mov	esi, esp
	mov	eax, DWORD PTR _index$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _index$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ut$[ebp]
	push	edx
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	mov	edx, DWORD PTR [ecx+44]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [ecx+40], eax
$LN4@utext_next@2:
; Line 362
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR _ut$[ebp]
	mov	eax, DWORD PTR [edx+48]
	movzx	ecx, WORD PTR [eax+ecx*2]
	mov	DWORD PTR _c$[ebp], ecx
	mov	edx, DWORD PTR _ut$[ebp]
	mov	eax, DWORD PTR [edx+40]
	add	eax, 1
	mov	ecx, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [ecx+40], eax
; Line 363
	mov	eax, DWORD PTR _c$[ebp]
	and	eax, -2048				; fffff800H
	cmp	eax, 55296				; 0000d800H
	jne	SHORT $LN1@utext_next@2
; Line 366
	mov	eax, DWORD PTR _index$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _index$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ut$[ebp]
	push	edx
	call	_utext_setNativeIndex_56
	add	esp, 12					; 0000000cH
; Line 367
	mov	eax, DWORD PTR _ut$[ebp]
	push	eax
	call	_utext_next32_56
	add	esp, 4
	mov	DWORD PTR _c$[ebp], eax
$LN1@utext_next@2:
; Line 369
	mov	eax, DWORD PTR _c$[ebp]
$LN8@utext_next@2:
; Line 370
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_utext_next32From_56 ENDP
_TEXT	ENDS
PUBLIC	_utext_previous32From_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _utext_previous32From_56
_TEXT	SEGMENT
tv198 = -220						; size = 8
tv195 = -212						; size = 8
tv163 = -208						; size = 4
tv155 = -208						; size = 4
_cPrev$ = -8						; size = 4
_ut$ = 8						; size = 4
_index$ = 12						; size = 8
_utext_previous32From_56 PROC				; COMDAT
; Line 374
	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 388
	mov	eax, DWORD PTR _ut$[ebp]
	mov	DWORD PTR tv155[ebp], eax
	mov	ecx, DWORD PTR tv155[ebp]
	mov	edx, DWORD PTR _index$[ebp+4]
	cmp	edx, DWORD PTR [ecx+36]
	jl	SHORT $LN7@utext_prev@2
	jg	SHORT $LN11@utext_prev@2
	mov	eax, DWORD PTR tv155[ebp]
	mov	ecx, DWORD PTR _index$[ebp]
	cmp	ecx, DWORD PTR [eax+32]
	jbe	SHORT $LN7@utext_prev@2
$LN11@utext_prev@2:
	mov	eax, DWORD PTR _ut$[ebp]
	mov	DWORD PTR tv163[ebp], eax
	mov	ecx, DWORD PTR tv163[ebp]
	mov	edx, DWORD PTR _index$[ebp+4]
	cmp	edx, DWORD PTR [ecx+20]
	jl	SHORT $LN8@utext_prev@2
	jg	SHORT $LN7@utext_prev@2
	mov	eax, DWORD PTR tv163[ebp]
	mov	ecx, DWORD PTR _index$[ebp]
	cmp	ecx, DWORD PTR [eax+16]
	jbe	SHORT $LN8@utext_prev@2
$LN7@utext_prev@2:
; Line 390
	mov	esi, esp
	push	0
	mov	eax, DWORD PTR _index$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _index$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ut$[ebp]
	push	edx
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	mov	edx, DWORD PTR [ecx+24]
	call	edx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	movsx	eax, al
	test	eax, eax
	jne	SHORT $LN6@utext_prev@2
; Line 392
	or	eax, -1
	jmp	$LN9@utext_prev@2
$LN6@utext_prev@2:
; Line 393
	jmp	$LN5@utext_prev@2
$LN8@utext_prev@2:
; Line 394
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR _index$[ebp]
	sub	ecx, DWORD PTR [eax+32]
	mov	esi, DWORD PTR _index$[ebp+4]
	sbb	esi, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _ut$[ebp]
	mov	eax, DWORD PTR [edx+28]
	cdq
	mov	DWORD PTR tv195[ebp], ecx
	mov	DWORD PTR tv195[ebp+4], esi
	mov	DWORD PTR tv198[ebp], eax
	mov	DWORD PTR tv198[ebp+4], edx
	mov	eax, DWORD PTR tv195[ebp+4]
	cmp	eax, DWORD PTR tv198[ebp+4]
	jg	SHORT $LN4@utext_prev@2
	jl	SHORT $LN13@utext_prev@2
	mov	ecx, DWORD PTR tv195[ebp]
	cmp	ecx, DWORD PTR tv198[ebp]
	ja	SHORT $LN4@utext_prev@2
$LN13@utext_prev@2:
; Line 396
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR _index$[ebp]
	sub	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR _index$[ebp+4]
	sbb	edx, DWORD PTR [eax+36]
	mov	eax, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [eax+40], ecx
; Line 397
	jmp	SHORT $LN5@utext_prev@2
$LN4@utext_prev@2:
; Line 398
	mov	esi, esp
	mov	eax, DWORD PTR _index$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _index$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ut$[ebp]
	push	edx
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	mov	edx, DWORD PTR [ecx+44]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [ecx+40], eax
; Line 399
	mov	eax, DWORD PTR _ut$[ebp]
	cmp	DWORD PTR [eax+40], 0
	jne	SHORT $LN5@utext_prev@2
	mov	esi, esp
	push	0
	mov	eax, DWORD PTR _index$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _index$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ut$[ebp]
	push	edx
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	mov	edx, DWORD PTR [ecx+24]
	call	edx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	movsx	eax, al
	test	eax, eax
	jne	SHORT $LN5@utext_prev@2
; Line 401
	or	eax, -1
	jmp	SHORT $LN9@utext_prev@2
$LN5@utext_prev@2:
; Line 408
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	sub	ecx, 1
	mov	edx, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [edx+40], ecx
; Line 409
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR _ut$[ebp]
	mov	eax, DWORD PTR [edx+48]
	movzx	ecx, WORD PTR [eax+ecx*2]
	mov	DWORD PTR _cPrev$[ebp], ecx
; Line 411
	mov	eax, DWORD PTR _cPrev$[ebp]
	and	eax, -2048				; fffff800H
	cmp	eax, 55296				; 0000d800H
	jne	SHORT $LN1@utext_prev@2
; Line 414
	mov	eax, DWORD PTR _index$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _index$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ut$[ebp]
	push	edx
	call	_utext_setNativeIndex_56
	add	esp, 12					; 0000000cH
; Line 415
	mov	eax, DWORD PTR _ut$[ebp]
	push	eax
	call	_utext_previous32_56
	add	esp, 4
	mov	DWORD PTR _cPrev$[ebp], eax
$LN1@utext_prev@2:
; Line 417
	mov	eax, DWORD PTR _cPrev$[ebp]
$LN9@utext_prev@2:
; Line 418
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_utext_previous32From_56 ENDP
_TEXT	ENDS
PUBLIC	_utext_extract_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _utext_extract_56
_TEXT	SEGMENT
_ut$ = 8						; size = 4
_start$ = 12						; size = 8
_limit$ = 20						; size = 8
_dest$ = 28						; size = 4
_destCapacity$ = 32					; size = 4
_status$ = 36						; size = 4
_utext_extract_56 PROC					; COMDAT
; Line 425
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 426
	mov	esi, esp
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _destCapacity$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dest$[ebp]
	push	edx
	mov	eax, DWORD PTR _limit$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _limit$[ebp]
	push	ecx
	mov	edx, DWORD PTR _start$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _start$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ut$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ut$[ebp]
	mov	eax, DWORD PTR [edx+52]
	mov	ecx, DWORD PTR [eax+28]
	call	ecx
	add	esp, 32					; 00000020H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 427
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_utext_extract_56 ENDP
_TEXT	ENDS
PUBLIC	_utext_equals_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _utext_equals_56
_TEXT	SEGMENT
tv137 = -208						; size = 8
tv134 = -200						; size = 8
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_utext_equals_56 PROC					; COMDAT
; Line 432
	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 435
	cmp	DWORD PTR _a$[ebp], 0
	je	SHORT $LN4@utext_equa
	cmp	DWORD PTR _b$[ebp], 0
	je	SHORT $LN4@utext_equa
	mov	eax, DWORD PTR _a$[ebp]
	cmp	DWORD PTR [eax], 878368812		; 345ad82cH
	jne	SHORT $LN4@utext_equa
	mov	eax, DWORD PTR _b$[ebp]
	cmp	DWORD PTR [eax], 878368812		; 345ad82cH
	je	SHORT $LN5@utext_equa
$LN4@utext_equa:
; Line 437
	xor	al, al
	jmp	SHORT $LN6@utext_equa
$LN5@utext_equa:
; Line 440
	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
	mov	edx, DWORD PTR [eax+52]
	cmp	edx, DWORD PTR [ecx+52]
	je	SHORT $LN3@utext_equa
; Line 442
	xor	al, al
	jmp	SHORT $LN6@utext_equa
$LN3@utext_equa:
; Line 445
	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
	mov	edx, DWORD PTR [eax+60]
	cmp	edx, DWORD PTR [ecx+60]
	je	SHORT $LN2@utext_equa
; Line 447
	xor	al, al
	jmp	SHORT $LN6@utext_equa
$LN2@utext_equa:
; Line 449
	mov	eax, DWORD PTR _a$[ebp]
	push	eax
	call	_utext_getNativeIndex_56
	add	esp, 4
	mov	esi, eax
	mov	edi, edx
	mov	ecx, DWORD PTR _b$[ebp]
	push	ecx
	call	_utext_getNativeIndex_56
	add	esp, 4
	mov	DWORD PTR tv134[ebp], esi
	mov	DWORD PTR tv134[ebp+4], edi
	mov	DWORD PTR tv137[ebp], eax
	mov	DWORD PTR tv137[ebp+4], edx
	mov	edx, DWORD PTR tv134[ebp]
	cmp	edx, DWORD PTR tv137[ebp]
	jne	SHORT $LN8@utext_equa
	mov	eax, DWORD PTR tv134[ebp+4]
	cmp	eax, DWORD PTR tv137[ebp+4]
	je	SHORT $LN1@utext_equa
$LN8@utext_equa:
; Line 451
	xor	al, al
	jmp	SHORT $LN6@utext_equa
$LN1@utext_equa:
; Line 454
	mov	al, 1
$LN6@utext_equa:
; Line 455
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_utext_equals_56 ENDP
_TEXT	ENDS
PUBLIC	_utext_isWritable_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _utext_isWritable_56
_TEXT	SEGMENT
_b$ = -5						; size = 1
_ut$ = 8						; size = 4
_utext_isWritable_56 PROC				; COMDAT
; Line 459
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 460
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, 8
	setne	dl
	mov	BYTE PTR _b$[ebp], dl
; Line 461
	mov	al, BYTE PTR _b$[ebp]
; Line 462
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_utext_isWritable_56 ENDP
_TEXT	ENDS
PUBLIC	_utext_freeze_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _utext_freeze_56
_TEXT	SEGMENT
_ut$ = 8						; size = 4
_utext_freeze_56 PROC					; COMDAT
; Line 466
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 468
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, -9					; fffffff7H
	mov	edx, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [edx+8], ecx
; Line 469
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_utext_freeze_56 ENDP
_TEXT	ENDS
PUBLIC	_utext_hasMetaData_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _utext_hasMetaData_56
_TEXT	SEGMENT
_b$ = -5						; size = 1
_ut$ = 8						; size = 4
_utext_hasMetaData_56 PROC				; COMDAT
; Line 474
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 475
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, 16					; 00000010H
	setne	dl
	mov	BYTE PTR _b$[ebp], dl
; Line 476
	mov	al, BYTE PTR _b$[ebp]
; Line 477
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_utext_hasMetaData_56 ENDP
_TEXT	ENDS
PUBLIC	_utext_replace_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _utext_replace_56
_TEXT	SEGMENT
_i$ = -8						; size = 4
_ut$ = 8						; size = 4
_nativeStart$ = 12					; size = 8
_nativeLimit$ = 20					; size = 8
_replacementText$ = 28					; size = 4
_replacementLength$ = 32				; size = 4
_status$ = 36						; size = 4
_utext_replace_56 PROC					; COMDAT
; Line 486
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 487
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN2@utext_repl
; Line 488
	xor	eax, eax
	jmp	SHORT $LN3@utext_repl
$LN2@utext_repl:
; Line 490
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, 8
	jne	SHORT $LN1@utext_repl
; Line 491
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 30			; 0000001eH
; Line 492
	xor	eax, eax
	jmp	SHORT $LN3@utext_repl
$LN1@utext_repl:
; Line 494
	mov	esi, esp
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _replacementLength$[ebp]
	push	ecx
	mov	edx, DWORD PTR _replacementText$[ebp]
	push	edx
	mov	eax, DWORD PTR _nativeLimit$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _nativeLimit$[ebp]
	push	ecx
	mov	edx, DWORD PTR _nativeStart$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _nativeStart$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ut$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ut$[ebp]
	mov	eax, DWORD PTR [edx+52]
	mov	ecx, DWORD PTR [eax+32]
	call	ecx
	add	esp, 32					; 00000020H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _i$[ebp], eax
; Line 495
	mov	eax, DWORD PTR _i$[ebp]
$LN3@utext_repl:
; Line 496
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_utext_replace_56 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?U_FAILURE@@YACW4UErrorCode@@@Z
_TEXT	SEGMENT
_code$ = 8						; size = 4
?U_FAILURE@@YACW4UErrorCode@@@Z PROC			; U_FAILURE, COMDAT
; File d:\mozilla\intl\icu\source\common\unicode\utypes.h
; Line 705
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	cmp	DWORD PTR _code$[ebp], 0
	setg	al
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?U_FAILURE@@YACW4UErrorCode@@@Z ENDP			; U_FAILURE
_TEXT	ENDS
PUBLIC	_utext_copy_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _utext_copy_56
_TEXT	SEGMENT
_ut$ = 8						; size = 4
_nativeStart$ = 12					; size = 8
_nativeLimit$ = 20					; size = 8
_destIndex$ = 28					; size = 8
_move$ = 36						; size = 1
_status$ = 40						; size = 4
_utext_copy_56 PROC					; COMDAT
; File d:\mozilla\intl\icu\source\common\utext.cpp
; Line 504
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 505
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN2@utext_copy
; Line 506
	jmp	SHORT $LN3@utext_copy
$LN2@utext_copy:
; Line 508
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, 8
	jne	SHORT $LN1@utext_copy
; Line 509
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 30			; 0000001eH
; Line 510
	jmp	SHORT $LN3@utext_copy
$LN1@utext_copy:
; Line 512
	mov	esi, esp
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _move$[ebp]
	push	ecx
	mov	edx, DWORD PTR _destIndex$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _destIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nativeLimit$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _nativeLimit$[ebp]
	push	edx
	mov	eax, DWORD PTR _nativeStart$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _nativeStart$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ut$[ebp]
	push	edx
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	mov	edx, DWORD PTR [ecx+36]
	call	edx
	add	esp, 36					; 00000024H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@utext_copy:
; Line 513
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_utext_copy_56 ENDP
_TEXT	ENDS
PUBLIC	_utext_clone_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _utext_clone_56
_TEXT	SEGMENT
_result$ = -8						; size = 4
_dest$ = 8						; size = 4
_src$ = 12						; size = 4
_deep$ = 16						; size = 1
_readOnly$ = 20						; size = 1
_status$ = 24						; size = 4
_utext_clone_56 PROC					; COMDAT
; Line 518
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 519
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN4@utext_clon
; Line 520
	mov	eax, DWORD PTR _dest$[ebp]
	jmp	SHORT $LN5@utext_clon
$LN4@utext_clon:
; Line 522
	mov	esi, esp
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _deep$[ebp]
	push	ecx
	mov	edx, DWORD PTR _src$[ebp]
	push	edx
	mov	eax, DWORD PTR _dest$[ebp]
	push	eax
	mov	ecx, DWORD PTR _src$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
; Line 523
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN3@utext_clon
; Line 524
	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN5@utext_clon
$LN3@utext_clon:
; Line 526
	cmp	DWORD PTR _result$[ebp], 0
	jne	SHORT $LN2@utext_clon
; Line 527
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 7
; Line 528
	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN5@utext_clon
$LN2@utext_clon:
; Line 530
	movsx	eax, BYTE PTR _readOnly$[ebp]
	test	eax, eax
	je	SHORT $LN1@utext_clon
; Line 531
	mov	eax, DWORD PTR _result$[ebp]
	push	eax
	call	_utext_freeze_56
	add	esp, 4
$LN1@utext_clon:
; Line 533
	mov	eax, DWORD PTR _result$[ebp]
$LN5@utext_clon:
; Line 534
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_utext_clone_56 ENDP
_TEXT	ENDS
PUBLIC	_utext_setup_56
EXTRN	_memset:PROC
EXTRN	_uprv_free_56:PROC
EXTRN	_uprv_malloc_56:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _utext_setup_56
_TEXT	SEGMENT
_spaceRequired$36750 = -8				; size = 4
_ut$ = 8						; size = 4
_extraSpace$ = 12					; size = 4
_status$ = 16						; size = 4
_utext_setup_56 PROC					; COMDAT
; Line 574
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 575
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN15@utext_setu
; Line 576
	mov	eax, DWORD PTR _ut$[ebp]
	jmp	$LN16@utext_setu
$LN15@utext_setu:
; Line 579
	cmp	DWORD PTR _ut$[ebp], 0
	jne	SHORT $LN14@utext_setu
; Line 581
	mov	DWORD PTR _spaceRequired$36750[ebp], 112 ; 00000070H
; Line 582
	cmp	DWORD PTR _extraSpace$[ebp], 0
	jle	SHORT $LN13@utext_setu
; Line 583
	mov	eax, DWORD PTR _extraSpace$[ebp]
	add	eax, 112				; 00000070H
	mov	DWORD PTR _spaceRequired$36750[ebp], eax
$LN13@utext_setu:
; Line 585
	mov	eax, DWORD PTR _spaceRequired$36750[ebp]
	push	eax
	call	_uprv_malloc_56
	add	esp, 4
	mov	DWORD PTR _ut$[ebp], eax
; Line 586
	cmp	DWORD PTR _ut$[ebp], 0
	jne	SHORT $LN12@utext_setu
; Line 587
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 7
; Line 588
	xor	eax, eax
	jmp	$LN16@utext_setu
; Line 589
	jmp	SHORT $LN11@utext_setu
$LN12@utext_setu:
; Line 590
	mov	ecx, 28					; 0000001cH
	mov	esi, OFFSET _emptyText
	mov	edi, DWORD PTR _ut$[ebp]
	rep movsd
; Line 591
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	or	ecx, 1
	mov	edx, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [edx+4], ecx
; Line 592
	cmp	DWORD PTR _spaceRequired$36750[ebp], 0
	jle	SHORT $LN11@utext_setu
; Line 593
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR _extraSpace$[ebp]
	mov	DWORD PTR [eax+24], ecx
; Line 594
	mov	eax, DWORD PTR _ut$[ebp]
	add	eax, 112				; 00000070H
	mov	ecx, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [ecx+56], eax
$LN11@utext_setu:
; Line 597
	jmp	$LN9@utext_setu
$LN14@utext_setu:
; Line 600
	mov	eax, DWORD PTR _ut$[ebp]
	cmp	DWORD PTR [eax], 878368812		; 345ad82cH
	je	SHORT $LN8@utext_setu
; Line 601
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 1
; Line 602
	mov	eax, DWORD PTR _ut$[ebp]
	jmp	$LN16@utext_setu
$LN8@utext_setu:
; Line 606
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	and	ecx, 4
	je	SHORT $LN7@utext_setu
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	cmp	DWORD PTR [ecx+48], 0
	je	SHORT $LN7@utext_setu
; Line 607
	mov	esi, esp
	mov	eax, DWORD PTR _ut$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ut$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR [edx+48]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN7@utext_setu:
; Line 609
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	and	ecx, -5					; fffffffbH
	mov	edx, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [edx+4], ecx
; Line 613
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR _extraSpace$[ebp]
	cmp	ecx, DWORD PTR [eax+24]
	jle	SHORT $LN9@utext_setu
; Line 616
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	and	ecx, 2
	je	SHORT $LN5@utext_setu
; Line 617
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	push	ecx
	call	_uprv_free_56
	add	esp, 4
; Line 618
	mov	eax, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [eax+24], 0
$LN5@utext_setu:
; Line 620
	mov	eax, DWORD PTR _extraSpace$[ebp]
	push	eax
	call	_uprv_malloc_56
	add	esp, 4
	mov	ecx, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [ecx+56], eax
; Line 621
	mov	eax, DWORD PTR _ut$[ebp]
	cmp	DWORD PTR [eax+56], 0
	jne	SHORT $LN4@utext_setu
; Line 622
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 7
; Line 623
	jmp	SHORT $LN9@utext_setu
$LN4@utext_setu:
; Line 624
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR _extraSpace$[ebp]
	mov	DWORD PTR [eax+24], ecx
; Line 625
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	or	ecx, 2
	mov	edx, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [edx+4], ecx
$LN9@utext_setu:
; Line 629
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_SUCCESS@@YACW4UErrorCode@@@Z		; U_SUCCESS
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	$LN2@utext_setu
; Line 630
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	or	ecx, 4
	mov	edx, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [edx+4], ecx
; Line 634
	mov	eax, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [eax+60], 0
; Line 635
	mov	eax, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [eax+48], 0
; Line 636
	mov	eax, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [eax+64], 0
; Line 637
	mov	eax, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [eax+68], 0
; Line 638
	mov	eax, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [eax+72], 0
; Line 639
	mov	eax, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [eax+80], 0
	mov	DWORD PTR [eax+84], 0
; Line 640
	mov	eax, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [eax+88], 0
; Line 641
	mov	eax, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [eax+92], 0
; Line 642
	mov	eax, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [eax+40], 0
; Line 643
	mov	eax, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [eax+44], 0
; Line 644
	mov	eax, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [eax+32], 0
	mov	DWORD PTR [eax+36], 0
; Line 645
	mov	eax, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [eax+16], 0
	mov	DWORD PTR [eax+20], 0
; Line 646
	mov	eax, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [eax+28], 0
; Line 647
	mov	eax, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 648
	mov	eax, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [eax+96], 0
	mov	DWORD PTR [eax+100], 0
; Line 649
	mov	eax, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [eax+104], 0
; Line 650
	mov	eax, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [eax+108], 0
; Line 651
	mov	eax, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [eax+76], 0
; Line 652
	mov	eax, DWORD PTR _ut$[ebp]
	cmp	DWORD PTR [eax+56], 0
	je	SHORT $LN2@utext_setu
	mov	eax, DWORD PTR _ut$[ebp]
	cmp	DWORD PTR [eax+24], 0
	jle	SHORT $LN2@utext_setu
; Line 653
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	push	0
	mov	edx, DWORD PTR _ut$[ebp]
	mov	eax, DWORD PTR [edx+56]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
$LN2@utext_setu:
; Line 656
	mov	eax, DWORD PTR _ut$[ebp]
$LN16@utext_setu:
; Line 657
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_utext_setup_56 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?U_SUCCESS@@YACW4UErrorCode@@@Z
_TEXT	SEGMENT
_code$ = 8						; size = 4
?U_SUCCESS@@YACW4UErrorCode@@@Z PROC			; U_SUCCESS, COMDAT
; File d:\mozilla\intl\icu\source\common\unicode\utypes.h
; Line 699
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	cmp	DWORD PTR _code$[ebp], 0
	setle	al
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?U_SUCCESS@@YACW4UErrorCode@@@Z ENDP			; U_SUCCESS
_TEXT	ENDS
PUBLIC	_utext_close_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _utext_close_56
_TEXT	SEGMENT
_ut$ = 8						; size = 4
_utext_close_56 PROC					; COMDAT
; File d:\mozilla\intl\icu\source\common\utext.cpp
; Line 661
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 664
	cmp	DWORD PTR _ut$[ebp], 0
	je	SHORT $LN4@utext_clos
	mov	eax, DWORD PTR _ut$[ebp]
	cmp	DWORD PTR [eax], 878368812		; 345ad82cH
	jne	SHORT $LN4@utext_clos
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	and	ecx, 4
	jne	SHORT $LN5@utext_clos
$LN4@utext_clos:
; Line 668
	mov	eax, DWORD PTR _ut$[ebp]
	jmp	$LN6@utext_clos
$LN5@utext_clos:
; Line 673
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	cmp	DWORD PTR [ecx+48], 0
	je	SHORT $LN3@utext_clos
; Line 674
	mov	esi, esp
	mov	eax, DWORD PTR _ut$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ut$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR [edx+48]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@utext_clos:
; Line 676
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	and	ecx, -5					; fffffffbH
	mov	edx, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [edx+4], ecx
; Line 680
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	and	ecx, 2
	je	SHORT $LN2@utext_clos
; Line 681
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	push	ecx
	call	_uprv_free_56
	add	esp, 4
; Line 682
	mov	eax, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [eax+56], 0
; Line 683
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	and	ecx, -3					; fffffffdH
	mov	edx, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [edx+4], ecx
; Line 684
	mov	eax, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [eax+24], 0
$LN2@utext_clos:
; Line 690
	mov	eax, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [eax+52], 0
; Line 692
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	and	ecx, 1
	je	SHORT $LN1@utext_clos
; Line 696
	mov	eax, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [eax], 0
; Line 697
	mov	eax, DWORD PTR _ut$[ebp]
	push	eax
	call	_uprv_free_56
	add	esp, 4
; Line 698
	mov	DWORD PTR _ut$[ebp], 0
$LN1@utext_clos:
; Line 700
	mov	eax, DWORD PTR _ut$[ebp]
$LN6@utext_clos:
; Line 701
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_utext_close_56 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _utf8TextLength
_TEXT	SEGMENT
_r$36844 = -8						; size = 4
_ut$ = 8						; size = 4
_utf8TextLength PROC					; COMDAT
; Line 904
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 905
	mov	eax, DWORD PTR _ut$[ebp]
	cmp	DWORD PTR [eax+88], 0
	jge	SHORT $LN5@utf8TextLe
; Line 908
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	mov	edx, DWORD PTR _ut$[ebp]
	add	ecx, DWORD PTR [edx+92]
	mov	DWORD PTR _r$36844[ebp], ecx
$LN4@utf8TextLe:
; Line 909
	mov	eax, DWORD PTR _r$36844[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN3@utf8TextLe
; Line 910
	mov	eax, DWORD PTR _r$36844[ebp]
	add	eax, 1
	mov	DWORD PTR _r$36844[ebp], eax
; Line 911
	jmp	SHORT $LN4@utf8TextLe
$LN3@utf8TextLe:
; Line 912
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR _r$36844[ebp]
	sub	ecx, DWORD PTR [eax+60]
	cmp	ecx, 2147483647				; 7fffffffH
	jge	SHORT $LN2@utf8TextLe
; Line 913
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR _r$36844[ebp]
	sub	ecx, DWORD PTR [eax+60]
	mov	edx, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [edx+88], ecx
; Line 914
	jmp	SHORT $LN1@utf8TextLe
$LN2@utf8TextLe:
; Line 917
	mov	eax, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [eax+88], 2147483647		; 7fffffffH
$LN1@utf8TextLe:
; Line 919
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, -3					; fffffffdH
	mov	edx, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [edx+8], ecx
$LN5@utf8TextLe:
; Line 921
	mov	eax, DWORD PTR _ut$[ebp]
	mov	eax, DWORD PTR [eax+88]
	cdq
; Line 922
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_utf8TextLength ENDP
_TEXT	ENDS
PUBLIC	??_C@_1DE@OCIKOEBK@?$AAi?$AAx?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAu?$AA8?$AAb?$AA?9?$AA?$DO?$AAb?$AAu?$AAf?$AAN?$AAa?$AAt?$AAi?$AAv?$AAe?$AAS?$AAt?$AAa?$AAr?$AAt?$AA?$AA@ ; `string'
PUBLIC	??_C@_1FG@FGNNNOCG@?$AAm?$AAa?$AAp?$AAI?$AAn?$AAd?$AAe?$AAx?$AA?$DM?$AA?$CI?$AAi?$AAn?$AAt?$AA3?$AA2?$AA_?$AAt?$AA?$CJ?$AAs?$AAi?$AAz?$AAe?$AAo?$AAf?$AA?$CI?$AAu?$AA8?$AAb?$AA?9?$AA?$DO?$AAm?$AAa@ ; `string'
PUBLIC	??_C@_1BI@GHPKBIFA@?$AAm?$AAa?$AAp?$AAI?$AAn?$AAd?$AAe?$AAx?$AA?$DO?$AA?$DN?$AA0?$AA?$AA@ ; `string'
PUBLIC	??_C@_1DA@HOAKNNGO@?$AAi?$AAx?$AA?$DM?$AA?$DN?$AAu?$AA8?$AAb?$AA?9?$AA?$DO?$AAb?$AAu?$AAf?$AAN?$AAa?$AAt?$AAi?$AAv?$AAe?$AAL?$AAi?$AAm?$AAi?$AAt?$AA?$AA@ ; `string'
PUBLIC	??_C@_1DA@LIDIDCGI@?$AAi?$AAx?$AA?$DO?$AA?$DN?$AAu?$AA8?$AAb?$AA?9?$AA?$DO?$AAb?$AAu?$AAf?$AAN?$AAa?$AAt?$AAi?$AAv?$AAe?$AAS?$AAt?$AAa?$AAr?$AAt?$AA?$AA@ ; `string'
PUBLIC	?__LINE__Var@?1??utf8TextAccess@@9@4JA@8d672338	; `utf8TextAccess'::`2'::__LINE__Var
EXTRN	_utf8_prevCharSafeBody_56:PROC
EXTRN	_utf8_nextCharSafeBody_56:PROC
EXTRN	_utf8_back1SafeBody_56:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
;	COMDAT ??_C@_1DE@OCIKOEBK@?$AAi?$AAx?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAu?$AA8?$AAb?$AA?9?$AA?$DO?$AAb?$AAu?$AAf?$AAN?$AAa?$AAt?$AAi?$AAv?$AAe?$AAS?$AAt?$AAa?$AAr?$AAt?$AA?$AA@
CONST	SEGMENT
??_C@_1DE@OCIKOEBK@?$AAi?$AAx?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAu?$AA8?$AAb?$AA?9?$AA?$DO?$AAb?$AAu?$AAf?$AAN?$AAa?$AAt?$AAi?$AAv?$AAe?$AAS?$AAt?$AAa?$AAr?$AAt?$AA?$AA@ DB 'i'
	DB	00H, 'x', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'u', 00H
	DB	'8', 00H, 'b', 00H, '-', 00H, '>', 00H, 'b', 00H, 'u', 00H, 'f'
	DB	00H, 'N', 00H, 'a', 00H, 't', 00H, 'i', 00H, 'v', 00H, 'e', 00H
	DB	'S', 00H, 't', 00H, 'a', 00H, 'r', 00H, 't', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1FG@FGNNNOCG@?$AAm?$AAa?$AAp?$AAI?$AAn?$AAd?$AAe?$AAx?$AA?$DM?$AA?$CI?$AAi?$AAn?$AAt?$AA3?$AA2?$AA_?$AAt?$AA?$CJ?$AAs?$AAi?$AAz?$AAe?$AAo?$AAf?$AA?$CI?$AAu?$AA8?$AAb?$AA?9?$AA?$DO?$AAm?$AAa@
CONST	SEGMENT
??_C@_1FG@FGNNNOCG@?$AAm?$AAa?$AAp?$AAI?$AAn?$AAd?$AAe?$AAx?$AA?$DM?$AA?$CI?$AAi?$AAn?$AAt?$AA3?$AA2?$AA_?$AAt?$AA?$CJ?$AAs?$AAi?$AAz?$AAe?$AAo?$AAf?$AA?$CI?$AAu?$AA8?$AAb?$AA?9?$AA?$DO?$AAm?$AAa@ DB 'm'
	DB	00H, 'a', 00H, 'p', 00H, 'I', 00H, 'n', 00H, 'd', 00H, 'e', 00H
	DB	'x', 00H, '<', 00H, '(', 00H, 'i', 00H, 'n', 00H, 't', 00H, '3'
	DB	00H, '2', 00H, '_', 00H, 't', 00H, ')', 00H, 's', 00H, 'i', 00H
	DB	'z', 00H, 'e', 00H, 'o', 00H, 'f', 00H, '(', 00H, 'u', 00H, '8'
	DB	00H, 'b', 00H, '-', 00H, '>', 00H, 'm', 00H, 'a', 00H, 'p', 00H
	DB	'T', 00H, 'o', 00H, 'U', 00H, 'C', 00H, 'h', 00H, 'a', 00H, 'r'
	DB	00H, 's', 00H, ')', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1BI@GHPKBIFA@?$AAm?$AAa?$AAp?$AAI?$AAn?$AAd?$AAe?$AAx?$AA?$DO?$AA?$DN?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_1BI@GHPKBIFA@?$AAm?$AAa?$AAp?$AAI?$AAn?$AAd?$AAe?$AAx?$AA?$DO?$AA?$DN?$AA0?$AA?$AA@ DB 'm'
	DB	00H, 'a', 00H, 'p', 00H, 'I', 00H, 'n', 00H, 'd', 00H, 'e', 00H
	DB	'x', 00H, '>', 00H, '=', 00H, '0', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DA@HOAKNNGO@?$AAi?$AAx?$AA?$DM?$AA?$DN?$AAu?$AA8?$AAb?$AA?9?$AA?$DO?$AAb?$AAu?$AAf?$AAN?$AAa?$AAt?$AAi?$AAv?$AAe?$AAL?$AAi?$AAm?$AAi?$AAt?$AA?$AA@
CONST	SEGMENT
??_C@_1DA@HOAKNNGO@?$AAi?$AAx?$AA?$DM?$AA?$DN?$AAu?$AA8?$AAb?$AA?9?$AA?$DO?$AAb?$AAu?$AAf?$AAN?$AAa?$AAt?$AAi?$AAv?$AAe?$AAL?$AAi?$AAm?$AAi?$AAt?$AA?$AA@ DB 'i'
	DB	00H, 'x', 00H, '<', 00H, '=', 00H, 'u', 00H, '8', 00H, 'b', 00H
	DB	'-', 00H, '>', 00H, 'b', 00H, 'u', 00H, 'f', 00H, 'N', 00H, 'a'
	DB	00H, 't', 00H, 'i', 00H, 'v', 00H, 'e', 00H, 'L', 00H, 'i', 00H
	DB	'm', 00H, 'i', 00H, 't', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1DA@LIDIDCGI@?$AAi?$AAx?$AA?$DO?$AA?$DN?$AAu?$AA8?$AAb?$AA?9?$AA?$DO?$AAb?$AAu?$AAf?$AAN?$AAa?$AAt?$AAi?$AAv?$AAe?$AAS?$AAt?$AAa?$AAr?$AAt?$AA?$AA@
CONST	SEGMENT
??_C@_1DA@LIDIDCGI@?$AAi?$AAx?$AA?$DO?$AA?$DN?$AAu?$AA8?$AAb?$AA?9?$AA?$DO?$AAb?$AAu?$AAf?$AAN?$AAa?$AAt?$AAi?$AAv?$AAe?$AAS?$AAt?$AAa?$AAr?$AAt?$AA?$AA@ DB 'i'
	DB	00H, 'x', 00H, '>', 00H, '=', 00H, 'u', 00H, '8', 00H, 'b', 00H
	DB	'-', 00H, '>', 00H, 'b', 00H, 'u', 00H, 'f', 00H, 'N', 00H, 'a'
	DB	00H, 't', 00H, 'i', 00H, 'v', 00H, 'e', 00H, 'S', 00H, 't', 00H
	DB	'a', 00H, 'r', 00H, 't', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??utf8TextAccess@@9@4JA@8d672338
_DATA	SEGMENT
?__LINE__Var@?1??utf8TextAccess@@9@4JA@8d672338 DD 03a2H ; `utf8TextAccess'::`2'::__LINE__Var
; Function compile flags: /Odtp /RTCsu /ZI
_DATA	ENDS
;	COMDAT _utf8TextAccess
_TEXT	SEGMENT
tv759 = -588						; size = 4
tv742 = -588						; size = 4
tv711 = -588						; size = 4
tv686 = -588						; size = 4
tv669 = -588						; size = 4
tv647 = -588						; size = 4
tv613 = -588						; size = 4
tv756 = -584						; size = 8
tv739 = -584						; size = 8
tv708 = -584						; size = 8
tv683 = -584						; size = 8
tv666 = -584						; size = 8
tv644 = -584						; size = 8
tv610 = -584						; size = 8
_sIx$37025 = -380					; size = 4
_c$37014 = -368						; size = 4
_bufNILimit$37013 = -356				; size = 4
_srcIx$37012 = -344					; size = 4
_destIx$37011 = -332					; size = 4
_toUCharsMapStart$37010 = -320				; size = 4
_mapToUChars$37009 = -308				; size = 4
_mapToNative$37008 = -296				; size = 4
_buf$37007 = -284					; size = 4
_u8b$37005 = -272					; size = 4
___t2$36970 = -257					; size = 1
___t1$36969 = -245					; size = 1
_dIxSaved$36966 = -236					; size = 4
_dIx$36965 = -224					; size = 4
_cIx$36964 = -212					; size = 4
_c$36954 = -200						; size = 4
_seenNonAscii$36953 = -185				; size = 1
_srcIx$36952 = -176					; size = 4
_destIx$36951 = -164					; size = 4
_mapToUChars$36950 = -152				; size = 4
_mapToNative$36949 = -140				; size = 4
_buf$36948 = -128					; size = 4
_nulTerminated$36946 = -113				; size = 1
_strLen$36945 = -104					; size = 4
_u8b$36943 = -92					; size = 4
_altB$36906 = -80					; size = 4
_altB$36883 = -68					; size = 4
_mapIndex$ = -56					; size = 4
_ix$ = -44						; size = 4
_length$ = -32						; size = 4
_u8b$ = -20						; size = 4
_s8$ = -8						; size = 4
_ut$ = 8						; size = 4
_index$ = 12						; size = 8
_forward$ = 20						; size = 1
_utf8TextAccess PROC					; COMDAT
; Line 930
	push	ebp
	mov	ebp, esp
	sub	esp, 588				; 0000024cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-588]
	mov	ecx, 147				; 00000093H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 937
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	mov	DWORD PTR _s8$[ebp], ecx
; Line 938
	mov	DWORD PTR _u8b$[ebp], 0
; Line 939
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	mov	DWORD PTR _length$[ebp], ecx
; Line 940
	mov	eax, DWORD PTR _index$[ebp]
	mov	DWORD PTR _ix$[ebp], eax
; Line 941
	mov	DWORD PTR _mapIndex$[ebp], 0
; Line 942
	cmp	DWORD PTR _index$[ebp+4], 0
	jg	SHORT $LN82@utf8TextAc
	jl	SHORT $LN90@utf8TextAc
	cmp	DWORD PTR _index$[ebp], 0
	jae	SHORT $LN82@utf8TextAc
$LN90@utf8TextAc:
; Line 943
	mov	DWORD PTR _ix$[ebp], 0
	jmp	SHORT $LN81@utf8TextAc
$LN82@utf8TextAc:
; Line 944
	cmp	DWORD PTR _index$[ebp+4], 0
	jl	SHORT $LN81@utf8TextAc
	jg	SHORT $LN91@utf8TextAc
	cmp	DWORD PTR _index$[ebp], 2147483647	; 7fffffffH
	jbe	SHORT $LN81@utf8TextAc
$LN91@utf8TextAc:
; Line 946
	mov	DWORD PTR _ix$[ebp], 2147483647		; 7fffffffH
$LN81@utf8TextAc:
; Line 950
	mov	eax, DWORD PTR _ix$[ebp]
	cmp	eax, DWORD PTR _length$[ebp]
	jle	$LN79@utf8TextAc
; Line 951
	cmp	DWORD PTR _length$[ebp], 0
	jl	SHORT $LN78@utf8TextAc
; Line 952
	mov	eax, DWORD PTR _length$[ebp]
	mov	DWORD PTR _ix$[ebp], eax
	jmp	SHORT $LN79@utf8TextAc
$LN78@utf8TextAc:
; Line 953
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR _ix$[ebp]
	cmp	ecx, DWORD PTR [eax+92]
	jl	SHORT $LN79@utf8TextAc
$LN75@utf8TextAc:
; Line 958
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+92]
	cmp	ecx, DWORD PTR _ix$[ebp]
	jge	SHORT $LN74@utf8TextAc
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+92]
	mov	edx, DWORD PTR _s8$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	test	eax, eax
	je	SHORT $LN74@utf8TextAc
; Line 959
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+92]
	add	ecx, 1
	mov	edx, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [edx+92], ecx
; Line 960
	jmp	SHORT $LN75@utf8TextAc
$LN74@utf8TextAc:
; Line 962
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+92]
	mov	edx, DWORD PTR _s8$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	test	eax, eax
	jne	SHORT $LN79@utf8TextAc
; Line 965
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+92]
	mov	DWORD PTR _ix$[ebp], ecx
; Line 966
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR _ut$[ebp]
	mov	edx, DWORD PTR [ecx+92]
	mov	DWORD PTR [eax+88], edx
; Line 967
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+92]
	mov	DWORD PTR _length$[ebp], ecx
; Line 968
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, -3					; fffffffdH
	mov	edx, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [edx+8], ecx
$LN79@utf8TextAc:
; Line 976
	movsx	eax, BYTE PTR _forward$[ebp]
	test	eax, eax
	je	$LN72@utf8TextAc
; Line 977
	mov	eax, DWORD PTR _ix$[ebp]
	cdq
	mov	ecx, DWORD PTR _ut$[ebp]
	mov	DWORD PTR tv610[ebp], eax
	mov	DWORD PTR tv610[ebp+4], edx
	mov	DWORD PTR tv613[ebp], ecx
	mov	edx, DWORD PTR tv613[ebp]
	mov	eax, DWORD PTR tv610[ebp]
	cmp	eax, DWORD PTR [edx+16]
	jne	SHORT $LN71@utf8TextAc
	mov	ecx, DWORD PTR tv613[ebp]
	mov	edx, DWORD PTR tv610[ebp+4]
	cmp	edx, DWORD PTR [ecx+20]
	jne	SHORT $LN71@utf8TextAc
; Line 979
	mov	eax, DWORD PTR _ix$[ebp]
	cmp	eax, DWORD PTR _length$[ebp]
	jne	SHORT $LN70@utf8TextAc
; Line 983
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR _ut$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR [eax+40], edx
; Line 984
	xor	al, al
	jmp	$LN83@utf8TextAc
; Line 985
	jmp	SHORT $LN71@utf8TextAc
$LN70@utf8TextAc:
; Line 988
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	mov	DWORD PTR _altB$36883[ebp], ecx
; Line 989
	mov	eax, DWORD PTR _altB$36883[ebp]
	mov	ecx, DWORD PTR _ix$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jl	SHORT $LN71@utf8TextAc
	mov	eax, DWORD PTR _altB$36883[ebp]
	mov	ecx, DWORD PTR _ix$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jge	SHORT $LN71@utf8TextAc
; Line 990
	jmp	$swapBuffers$36886
	jmp	$swapBuffers$36886
$LN71@utf8TextAc:
; Line 1000
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	mov	DWORD PTR _u8b$[ebp], ecx
; Line 1001
	mov	eax, DWORD PTR _u8b$[ebp]
	mov	ecx, DWORD PTR _ix$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jl	SHORT $LN66@utf8TextAc
	mov	eax, DWORD PTR _u8b$[ebp]
	mov	ecx, DWORD PTR _ix$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jge	SHORT $LN66@utf8TextAc
; Line 1003
	jmp	$swapBuffers$36886
	jmp	$swapBuffers$36886
$LN66@utf8TextAc:
; Line 1005
	mov	eax, DWORD PTR _ix$[ebp]
	cmp	eax, DWORD PTR _length$[ebp]
	jne	SHORT $LN64@utf8TextAc
; Line 1009
	mov	eax, DWORD PTR _ix$[ebp]
	cdq
	mov	ecx, DWORD PTR _ut$[ebp]
	mov	DWORD PTR tv644[ebp], eax
	mov	DWORD PTR tv644[ebp+4], edx
	mov	DWORD PTR tv647[ebp], ecx
	mov	edx, DWORD PTR tv647[ebp]
	mov	eax, DWORD PTR tv644[ebp]
	cmp	eax, DWORD PTR [edx+16]
	jne	SHORT $LN63@utf8TextAc
	mov	ecx, DWORD PTR tv647[ebp]
	mov	edx, DWORD PTR tv644[ebp+4]
	cmp	edx, DWORD PTR [ecx+20]
	jne	SHORT $LN63@utf8TextAc
; Line 1012
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR _ut$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR [eax+40], edx
; Line 1013
	xor	al, al
	jmp	$LN83@utf8TextAc
$LN63@utf8TextAc:
; Line 1015
	mov	eax, DWORD PTR _u8b$[ebp]
	mov	ecx, DWORD PTR _ix$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jne	SHORT $LN62@utf8TextAc
; Line 1018
	jmp	$swapBuffersAndFail$36894
	jmp	$swapBuffersAndFail$36894
$LN62@utf8TextAc:
; Line 1022
	jmp	$makeStubBuffer$36896
	jmp	$makeStubBuffer$36896
$LN64@utf8TextAc:
; Line 1025
	mov	eax, DWORD PTR _ix$[ebp]
	cdq
	mov	ecx, DWORD PTR _ut$[ebp]
	mov	DWORD PTR tv666[ebp], eax
	mov	DWORD PTR tv666[ebp+4], edx
	mov	DWORD PTR tv669[ebp], ecx
	mov	edx, DWORD PTR tv669[ebp]
	mov	eax, DWORD PTR tv666[ebp+4]
	cmp	eax, DWORD PTR [edx+36]
	jl	SHORT $LN58@utf8TextAc
	jg	SHORT $LN92@utf8TextAc
	mov	ecx, DWORD PTR tv669[ebp]
	mov	edx, DWORD PTR tv666[ebp]
	cmp	edx, DWORD PTR [ecx+32]
	jb	SHORT $LN58@utf8TextAc
$LN92@utf8TextAc:
	mov	eax, DWORD PTR _ix$[ebp]
	cdq
	mov	ecx, DWORD PTR _ut$[ebp]
	mov	DWORD PTR tv683[ebp], eax
	mov	DWORD PTR tv683[ebp+4], edx
	mov	DWORD PTR tv686[ebp], ecx
	mov	edx, DWORD PTR tv686[ebp]
	mov	eax, DWORD PTR tv683[ebp+4]
	cmp	eax, DWORD PTR [edx+20]
	jl	SHORT $LN59@utf8TextAc
	jg	SHORT $LN58@utf8TextAc
	mov	ecx, DWORD PTR tv686[ebp]
	mov	edx, DWORD PTR tv683[ebp]
	cmp	edx, DWORD PTR [ecx+16]
	jb	SHORT $LN59@utf8TextAc
$LN58@utf8TextAc:
; Line 1027
	jmp	$fillForward$36900
	jmp	$fillForward$36900
$LN59@utf8TextAc:
; Line 1031
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	DWORD PTR _u8b$[ebp], ecx
; Line 1032
	mov	eax, DWORD PTR _u8b$[ebp]
	mov	ecx, DWORD PTR _ix$[ebp]
	sub	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _mapIndex$[ebp], ecx
; Line 1033
	mov	eax, DWORD PTR _u8b$[ebp]
	add	eax, DWORD PTR _mapIndex$[ebp]
	movzx	ecx, BYTE PTR [eax+132]
	mov	edx, DWORD PTR _u8b$[ebp]
	sub	ecx, DWORD PTR [edx+8]
	mov	eax, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [eax+40], ecx
; Line 1034
	mov	al, 1
	jmp	$LN83@utf8TextAc
$LN72@utf8TextAc:
; Line 1044
	mov	eax, DWORD PTR _ix$[ebp]
	cdq
	mov	ecx, DWORD PTR _ut$[ebp]
	mov	DWORD PTR tv708[ebp], eax
	mov	DWORD PTR tv708[ebp+4], edx
	mov	DWORD PTR tv711[ebp], ecx
	mov	edx, DWORD PTR tv711[ebp]
	mov	eax, DWORD PTR tv708[ebp]
	cmp	eax, DWORD PTR [edx+32]
	jne	SHORT $LN56@utf8TextAc
	mov	ecx, DWORD PTR tv711[ebp]
	mov	edx, DWORD PTR tv708[ebp+4]
	cmp	edx, DWORD PTR [ecx+36]
	jne	SHORT $LN56@utf8TextAc
; Line 1046
	cmp	DWORD PTR _ix$[ebp], 0
	jne	SHORT $LN55@utf8TextAc
; Line 1050
	mov	eax, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [eax+40], 0
; Line 1051
	xor	al, al
	jmp	$LN83@utf8TextAc
; Line 1052
	jmp	SHORT $LN56@utf8TextAc
$LN55@utf8TextAc:
; Line 1055
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	mov	DWORD PTR _altB$36906[ebp], ecx
; Line 1056
	mov	eax, DWORD PTR _altB$36906[ebp]
	mov	ecx, DWORD PTR _ix$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jle	SHORT $LN56@utf8TextAc
	mov	eax, DWORD PTR _altB$36906[ebp]
	mov	ecx, DWORD PTR _ix$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jg	SHORT $LN56@utf8TextAc
; Line 1057
	jmp	$swapBuffers$36886
	jmp	$swapBuffers$36886
$LN56@utf8TextAc:
; Line 1067
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	mov	DWORD PTR _u8b$[ebp], ecx
; Line 1068
	mov	eax, DWORD PTR _u8b$[ebp]
	mov	ecx, DWORD PTR _ix$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jle	SHORT $LN51@utf8TextAc
	mov	eax, DWORD PTR _u8b$[ebp]
	mov	ecx, DWORD PTR _ix$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jg	SHORT $LN51@utf8TextAc
; Line 1070
	jmp	$swapBuffers$36886
	jmp	$swapBuffers$36886
$LN51@utf8TextAc:
; Line 1075
	cmp	DWORD PTR _ix$[ebp], 0
	jne	SHORT $LN49@utf8TextAc
; Line 1076
	mov	eax, DWORD PTR _u8b$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN48@utf8TextAc
; Line 1079
	jmp	$swapBuffersAndFail$36894
	jmp	$swapBuffersAndFail$36894
; Line 1080
	jmp	SHORT $LN49@utf8TextAc
$LN48@utf8TextAc:
; Line 1084
	jmp	$makeStubBuffer$36896
	jmp	$makeStubBuffer$36896
$LN49@utf8TextAc:
; Line 1088
	mov	eax, DWORD PTR _ix$[ebp]
	cdq
	mov	ecx, DWORD PTR _ut$[ebp]
	mov	DWORD PTR tv739[ebp], eax
	mov	DWORD PTR tv739[ebp+4], edx
	mov	DWORD PTR tv742[ebp], ecx
	mov	edx, DWORD PTR tv742[ebp]
	mov	eax, DWORD PTR tv739[ebp+4]
	cmp	eax, DWORD PTR [edx+36]
	jl	SHORT $LN43@utf8TextAc
	jg	SHORT $LN94@utf8TextAc
	mov	ecx, DWORD PTR tv742[ebp]
	mov	edx, DWORD PTR tv739[ebp]
	cmp	edx, DWORD PTR [ecx+32]
	jbe	SHORT $LN43@utf8TextAc
$LN94@utf8TextAc:
	mov	eax, DWORD PTR _ix$[ebp]
	cdq
	mov	ecx, DWORD PTR _ut$[ebp]
	mov	DWORD PTR tv756[ebp], eax
	mov	DWORD PTR tv756[ebp+4], edx
	mov	DWORD PTR tv759[ebp], ecx
	mov	edx, DWORD PTR tv759[ebp]
	mov	eax, DWORD PTR tv756[ebp+4]
	cmp	eax, DWORD PTR [edx+20]
	jl	SHORT $LN44@utf8TextAc
	jg	SHORT $LN43@utf8TextAc
	mov	ecx, DWORD PTR tv759[ebp]
	mov	edx, DWORD PTR tv756[ebp]
	cmp	edx, DWORD PTR [ecx+16]
	jbe	SHORT $LN44@utf8TextAc
$LN43@utf8TextAc:
; Line 1090
	jmp	$fillReverse$36920
	jmp	$fillReverse$36920
$LN44@utf8TextAc:
; Line 1095
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	DWORD PTR _u8b$[ebp], ecx
; Line 1096
	mov	eax, DWORD PTR _u8b$[ebp]
	mov	ecx, DWORD PTR _ix$[ebp]
	sub	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _mapIndex$[ebp], ecx
; Line 1097
	mov	eax, DWORD PTR _u8b$[ebp]
	add	eax, DWORD PTR _mapIndex$[ebp]
	movzx	ecx, BYTE PTR [eax+132]
	mov	edx, DWORD PTR _u8b$[ebp]
	sub	ecx, DWORD PTR [edx+8]
	mov	eax, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [eax+40], ecx
; Line 1098
	mov	eax, DWORD PTR _ut$[ebp]
	cmp	DWORD PTR [eax+40], 0
	jne	SHORT $LN41@utf8TextAc
; Line 1104
	xor	al, al
	jmp	$LN83@utf8TextAc
; Line 1105
	jmp	SHORT $swapBuffers$36886
$LN41@utf8TextAc:
; Line 1106
	mov	al, 1
	jmp	$LN83@utf8TextAc
$swapBuffers$36886:
; Line 1116
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	mov	DWORD PTR _u8b$[ebp], ecx
; Line 1117
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR _ut$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	mov	DWORD PTR [eax+68], edx
; Line 1118
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR _u8b$[ebp]
	mov	DWORD PTR [eax+64], ecx
; Line 1119
	mov	eax, DWORD PTR _u8b$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _u8b$[ebp]
	lea	eax, DWORD PTR [edx+ecx*2+24]
	mov	ecx, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [ecx+48], eax
; Line 1120
	mov	eax, DWORD PTR _u8b$[ebp]
	mov	ecx, DWORD PTR _u8b$[ebp]
	mov	edx, DWORD PTR [eax+12]
	sub	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [eax+44], edx
; Line 1121
	mov	eax, DWORD PTR _u8b$[ebp]
	mov	eax, DWORD PTR [eax]
	cdq
	mov	ecx, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [ecx+32], eax
	mov	DWORD PTR [ecx+36], edx
; Line 1122
	mov	eax, DWORD PTR _u8b$[ebp]
	mov	eax, DWORD PTR [eax+4]
	cdq
	mov	ecx, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [ecx+16], eax
	mov	DWORD PTR [ecx+20], edx
; Line 1123
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR _u8b$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+28], edx
; Line 1128
	mov	eax, DWORD PTR _u8b$[ebp]
	mov	ecx, DWORD PTR _ix$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jge	SHORT $LN85@utf8TextAc
	mov	edx, DWORD PTR ?__LINE__Var@?1??utf8TextAccess@@9@4JA@8d672338
	add	edx, 198				; 000000c6H
	mov	esi, esp
	push	edx
	push	OFFSET ??_C@_1FI@DOHBLNEC@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@
	push	OFFSET ??_C@_1DA@LIDIDCGI@?$AAi?$AAx?$AA?$DO?$AA?$DN?$AAu?$AA8?$AAb?$AA?9?$AA?$DO?$AAb?$AAu?$AAf?$AAN?$AAa?$AAt?$AAi?$AAv?$AAe?$AAS?$AAt?$AAa?$AAr?$AAt?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN85@utf8TextAc:
; Line 1129
	mov	eax, DWORD PTR _u8b$[ebp]
	mov	ecx, DWORD PTR _ix$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jle	SHORT $LN86@utf8TextAc
	mov	edx, DWORD PTR ?__LINE__Var@?1??utf8TextAccess@@9@4JA@8d672338
	add	edx, 199				; 000000c7H
	mov	esi, esp
	push	edx
	push	OFFSET ??_C@_1FI@DOHBLNEC@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@
	push	OFFSET ??_C@_1DA@HOAKNNGO@?$AAi?$AAx?$AA?$DM?$AA?$DN?$AAu?$AA8?$AAb?$AA?9?$AA?$DO?$AAb?$AAu?$AAf?$AAN?$AAa?$AAt?$AAi?$AAv?$AAe?$AAL?$AAi?$AAm?$AAi?$AAt?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN86@utf8TextAc:
; Line 1130
	mov	eax, DWORD PTR _u8b$[ebp]
	mov	ecx, DWORD PTR _ix$[ebp]
	sub	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _mapIndex$[ebp], ecx
; Line 1131
	jns	SHORT $LN87@utf8TextAc
	mov	eax, DWORD PTR ?__LINE__Var@?1??utf8TextAccess@@9@4JA@8d672338
	add	eax, 201				; 000000c9H
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1FI@DOHBLNEC@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@
	push	OFFSET ??_C@_1BI@GHPKBIFA@?$AAm?$AAa?$AAp?$AAI?$AAn?$AAd?$AAe?$AAx?$AA?$DO?$AA?$DN?$AA0?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN87@utf8TextAc:
; Line 1132
	cmp	DWORD PTR _mapIndex$[ebp], 102		; 00000066H
	jl	SHORT $LN88@utf8TextAc
	mov	eax, DWORD PTR ?__LINE__Var@?1??utf8TextAccess@@9@4JA@8d672338
	add	eax, 202				; 000000caH
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1FI@DOHBLNEC@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@
	push	OFFSET ??_C@_1FG@FGNNNOCG@?$AAm?$AAa?$AAp?$AAI?$AAn?$AAd?$AAe?$AAx?$AA?$DM?$AA?$CI?$AAi?$AAn?$AAt?$AA3?$AA2?$AA_?$AAt?$AA?$CJ?$AAs?$AAi?$AAz?$AAe?$AAo?$AAf?$AA?$CI?$AAu?$AA8?$AAb?$AA?9?$AA?$DO?$AAm?$AAa@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN88@utf8TextAc:
; Line 1133
	mov	eax, DWORD PTR _u8b$[ebp]
	add	eax, DWORD PTR _mapIndex$[ebp]
	movzx	ecx, BYTE PTR [eax+132]
	mov	edx, DWORD PTR _u8b$[ebp]
	sub	ecx, DWORD PTR [edx+8]
	mov	eax, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [eax+40], ecx
; Line 1135
	mov	al, 1
	jmp	$LN83@utf8TextAc
$swapBuffersAndFail$36894:
; Line 1148
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	mov	DWORD PTR _u8b$[ebp], ecx
; Line 1149
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR _ut$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	mov	DWORD PTR [eax+68], edx
; Line 1150
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR _u8b$[ebp]
	mov	DWORD PTR [eax+64], ecx
; Line 1151
	mov	eax, DWORD PTR _u8b$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _u8b$[ebp]
	lea	eax, DWORD PTR [edx+ecx*2+24]
	mov	ecx, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [ecx+48], eax
; Line 1152
	mov	eax, DWORD PTR _u8b$[ebp]
	mov	ecx, DWORD PTR _u8b$[ebp]
	mov	edx, DWORD PTR [eax+12]
	sub	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [eax+44], edx
; Line 1153
	mov	eax, DWORD PTR _u8b$[ebp]
	mov	eax, DWORD PTR [eax]
	cdq
	mov	ecx, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [ecx+32], eax
	mov	DWORD PTR [ecx+36], edx
; Line 1154
	mov	eax, DWORD PTR _u8b$[ebp]
	mov	eax, DWORD PTR [eax+4]
	cdq
	mov	ecx, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [ecx+16], eax
	mov	DWORD PTR [ecx+20], edx
; Line 1155
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR _u8b$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+28], edx
; Line 1160
	mov	eax, DWORD PTR _u8b$[ebp]
	mov	ecx, DWORD PTR _ix$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jne	SHORT $LN39@utf8TextAc
; Line 1161
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR _ut$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR [eax+40], edx
; Line 1162
	jmp	SHORT $LN38@utf8TextAc
$LN39@utf8TextAc:
; Line 1163
	mov	eax, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [eax+40], 0
; Line 1164
	mov	eax, DWORD PTR _u8b$[ebp]
	mov	ecx, DWORD PTR _ix$[ebp]
	cmp	ecx, DWORD PTR [eax]
	je	SHORT $LN38@utf8TextAc
	mov	edx, DWORD PTR ?__LINE__Var@?1??utf8TextAccess@@9@4JA@8d672338
	add	edx, 234				; 000000eaH
	mov	esi, esp
	push	edx
	push	OFFSET ??_C@_1FI@DOHBLNEC@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@
	push	OFFSET ??_C@_1DE@OCIKOEBK@?$AAi?$AAx?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAu?$AA8?$AAb?$AA?9?$AA?$DO?$AAb?$AAu?$AAf?$AAN?$AAa?$AAt?$AAi?$AAv?$AAe?$AAS?$AAt?$AAa?$AAr?$AAt?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN38@utf8TextAc:
; Line 1166
	xor	al, al
	jmp	$LN83@utf8TextAc
$makeStubBuffer$36896:
; Line 1173
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	mov	DWORD PTR _u8b$[ebp], ecx
; Line 1174
	mov	eax, DWORD PTR _u8b$[ebp]
	mov	ecx, DWORD PTR _ix$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 1175
	mov	eax, DWORD PTR _u8b$[ebp]
	mov	ecx, DWORD PTR _ix$[ebp]
	mov	DWORD PTR [eax+4], ecx
; Line 1176
	mov	eax, DWORD PTR _u8b$[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 1177
	mov	eax, DWORD PTR _u8b$[ebp]
	mov	DWORD PTR [eax+12], 0
; Line 1178
	mov	eax, DWORD PTR _u8b$[ebp]
	mov	DWORD PTR [eax+16], 0
; Line 1179
	mov	eax, DWORD PTR _u8b$[ebp]
	mov	ecx, DWORD PTR _ix$[ebp]
	mov	DWORD PTR [eax+20], ecx
; Line 1180
	mov	eax, DWORD PTR _u8b$[ebp]
	mov	BYTE PTR [eax+96], 0
; Line 1181
	mov	eax, DWORD PTR _u8b$[ebp]
	mov	BYTE PTR [eax+132], 0
; Line 1182
	jmp	$swapBuffersAndFail$36894
$fillForward$36900:
; Line 1189
	mov	eax, DWORD PTR _s8$[ebp]
	add	eax, DWORD PTR _ix$[ebp]
	movzx	ecx, BYTE PTR [eax]
	and	ecx, 192				; 000000c0H
	cmp	ecx, 128				; 00000080H
	jne	SHORT $LN37@utf8TextAc
	mov	eax, DWORD PTR _ix$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _s8$[ebp]
	push	ecx
	call	_utf8_back1SafeBody_56
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _ix$[ebp], eax
$LN37@utf8TextAc:
; Line 1194
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	mov	DWORD PTR _u8b$36943[ebp], ecx
; Line 1195
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR _ut$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	mov	DWORD PTR [eax+68], edx
; Line 1196
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR _u8b$36943[ebp]
	mov	DWORD PTR [eax+64], ecx
; Line 1198
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	mov	DWORD PTR _strLen$36945[ebp], ecx
; Line 1199
	mov	BYTE PTR _nulTerminated$36946[ebp], 0
; Line 1200
	cmp	DWORD PTR _strLen$36945[ebp], 0
	jge	SHORT $LN36@utf8TextAc
; Line 1201
	mov	DWORD PTR _strLen$36945[ebp], 2147483647 ; 7fffffffH
; Line 1202
	mov	BYTE PTR _nulTerminated$36946[ebp], 1
$LN36@utf8TextAc:
; Line 1205
	mov	eax, DWORD PTR _u8b$36943[ebp]
	add	eax, 24					; 00000018H
	mov	DWORD PTR _buf$36948[ebp], eax
; Line 1206
	mov	eax, DWORD PTR _u8b$36943[ebp]
	add	eax, 96					; 00000060H
	mov	DWORD PTR _mapToNative$36949[ebp], eax
; Line 1207
	mov	eax, DWORD PTR _u8b$36943[ebp]
	add	eax, 132				; 00000084H
	mov	DWORD PTR _mapToUChars$36950[ebp], eax
; Line 1208
	mov	DWORD PTR _destIx$36951[ebp], 0
; Line 1209
	mov	eax, DWORD PTR _ix$[ebp]
	mov	DWORD PTR _srcIx$36952[ebp], eax
; Line 1210
	mov	BYTE PTR _seenNonAscii$36953[ebp], 0
; Line 1211
	mov	DWORD PTR _c$36954[ebp], 0
$LN35@utf8TextAc:
; Line 1214
	cmp	DWORD PTR _destIx$36951[ebp], 32	; 00000020H
	jge	$LN34@utf8TextAc
; Line 1215
	mov	eax, DWORD PTR _s8$[ebp]
	add	eax, DWORD PTR _srcIx$36952[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _c$36954[ebp], ecx
; Line 1216
	cmp	DWORD PTR _c$36954[ebp], 0
	jle	SHORT $LN33@utf8TextAc
	cmp	DWORD PTR _c$36954[ebp], 128		; 00000080H
	jge	SHORT $LN33@utf8TextAc
; Line 1219
	mov	eax, DWORD PTR _destIx$36951[ebp]
	mov	ecx, DWORD PTR _buf$36948[ebp]
	mov	dx, WORD PTR _c$36954[ebp]
	mov	WORD PTR [ecx+eax*2], dx
; Line 1220
	mov	eax, DWORD PTR _srcIx$36952[ebp]
	sub	eax, DWORD PTR _ix$[ebp]
	mov	ecx, DWORD PTR _mapToNative$36949[ebp]
	add	ecx, DWORD PTR _destIx$36951[ebp]
	mov	BYTE PTR [ecx], al
; Line 1221
	mov	eax, DWORD PTR _srcIx$36952[ebp]
	sub	eax, DWORD PTR _ix$[ebp]
	mov	ecx, DWORD PTR _mapToUChars$36950[ebp]
	mov	dl, BYTE PTR _destIx$36951[ebp]
	mov	BYTE PTR [ecx+eax], dl
; Line 1222
	mov	eax, DWORD PTR _srcIx$36952[ebp]
	add	eax, 1
	mov	DWORD PTR _srcIx$36952[ebp], eax
; Line 1223
	mov	eax, DWORD PTR _destIx$36951[ebp]
	add	eax, 1
	mov	DWORD PTR _destIx$36951[ebp], eax
; Line 1224
	jmp	$LN32@utf8TextAc
$LN33@utf8TextAc:
; Line 1226
	movsx	eax, BYTE PTR _seenNonAscii$36953[ebp]
	test	eax, eax
	jne	SHORT $LN31@utf8TextAc
; Line 1227
	mov	BYTE PTR _seenNonAscii$36953[ebp], 1
; Line 1228
	mov	eax, DWORD PTR _u8b$36943[ebp]
	mov	ecx, DWORD PTR _destIx$36951[ebp]
	mov	DWORD PTR [eax+16], ecx
$LN31@utf8TextAc:
; Line 1231
	mov	eax, DWORD PTR _srcIx$36952[ebp]
	mov	DWORD PTR _cIx$36964[ebp], eax
; Line 1232
	mov	eax, DWORD PTR _destIx$36951[ebp]
	mov	DWORD PTR _dIx$36965[ebp], eax
; Line 1233
	mov	eax, DWORD PTR _destIx$36951[ebp]
	mov	DWORD PTR _dIxSaved$36966[ebp], eax
; Line 1234
	mov	eax, DWORD PTR _s8$[ebp]
	add	eax, DWORD PTR _srcIx$36952[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _c$36954[ebp], ecx
	mov	edx, DWORD PTR _srcIx$36952[ebp]
	add	edx, 1
	mov	DWORD PTR _srcIx$36952[ebp], edx
	cmp	DWORD PTR _c$36954[ebp], 128		; 00000080H
	jl	$LN30@utf8TextAc
	cmp	DWORD PTR _c$36954[ebp], 224		; 000000e0H
	jle	$LN29@utf8TextAc
	cmp	DWORD PTR _c$36954[ebp], 236		; 000000ecH
	jg	$LN29@utf8TextAc
	mov	eax, DWORD PTR _srcIx$36952[ebp]
	add	eax, 1
	cmp	eax, DWORD PTR _strLen$36945[ebp]
	jl	SHORT $LN28@utf8TextAc
	cmp	DWORD PTR _strLen$36945[ebp], 0
	jge	$LN29@utf8TextAc
$LN28@utf8TextAc:
	mov	eax, DWORD PTR _s8$[ebp]
	add	eax, DWORD PTR _srcIx$36952[ebp]
	movzx	ecx, BYTE PTR [eax]
	sub	ecx, 128				; 00000080H
	mov	BYTE PTR ___t1$36969[ebp], cl
	movzx	edx, BYTE PTR ___t1$36969[ebp]
	cmp	edx, 63					; 0000003fH
	jg	SHORT $LN29@utf8TextAc
	mov	eax, DWORD PTR _s8$[ebp]
	add	eax, DWORD PTR _srcIx$36952[ebp]
	movzx	ecx, BYTE PTR [eax+1]
	sub	ecx, 128				; 00000080H
	mov	BYTE PTR ___t2$36970[ebp], cl
	movzx	edx, BYTE PTR ___t2$36970[ebp]
	cmp	edx, 63					; 0000003fH
	jg	SHORT $LN29@utf8TextAc
	mov	eax, DWORD PTR _c$36954[ebp]
	shl	eax, 12					; 0000000cH
	movzx	ecx, BYTE PTR ___t1$36969[ebp]
	shl	ecx, 6
	or	eax, ecx
	movzx	edx, BYTE PTR ___t2$36970[ebp]
	or	eax, edx
	movzx	eax, ax
	mov	DWORD PTR _c$36954[ebp], eax
	mov	eax, DWORD PTR _srcIx$36952[ebp]
	add	eax, 2
	mov	DWORD PTR _srcIx$36952[ebp], eax
	jmp	$LN30@utf8TextAc
$LN29@utf8TextAc:
	cmp	DWORD PTR _c$36954[ebp], 224		; 000000e0H
	jge	SHORT $LN26@utf8TextAc
	cmp	DWORD PTR _c$36954[ebp], 194		; 000000c2H
	jl	SHORT $LN26@utf8TextAc
	mov	eax, DWORD PTR _srcIx$36952[ebp]
	cmp	eax, DWORD PTR _strLen$36945[ebp]
	je	SHORT $LN26@utf8TextAc
	mov	eax, DWORD PTR _s8$[ebp]
	add	eax, DWORD PTR _srcIx$36952[ebp]
	movzx	ecx, BYTE PTR [eax]
	sub	ecx, 128				; 00000080H
	mov	BYTE PTR ___t1$36969[ebp], cl
	movzx	edx, BYTE PTR ___t1$36969[ebp]
	cmp	edx, 63					; 0000003fH
	jg	SHORT $LN26@utf8TextAc
	mov	eax, DWORD PTR _c$36954[ebp]
	and	eax, 31					; 0000001fH
	shl	eax, 6
	movzx	ecx, BYTE PTR ___t1$36969[ebp]
	or	eax, ecx
	mov	DWORD PTR _c$36954[ebp], eax
	mov	eax, DWORD PTR _srcIx$36952[ebp]
	add	eax, 1
	mov	DWORD PTR _srcIx$36952[ebp], eax
	jmp	SHORT $LN30@utf8TextAc
$LN26@utf8TextAc:
	push	-3					; fffffffdH
	mov	eax, DWORD PTR _c$36954[ebp]
	push	eax
	mov	ecx, DWORD PTR _strLen$36945[ebp]
	push	ecx
	lea	edx, DWORD PTR _srcIx$36952[ebp]
	push	edx
	mov	eax, DWORD PTR _s8$[ebp]
	push	eax
	call	_utf8_nextCharSafeBody_56
	add	esp, 20					; 00000014H
	mov	DWORD PTR _c$36954[ebp], eax
$LN30@utf8TextAc:
; Line 1235
	cmp	DWORD PTR _c$36954[ebp], 0
	jne	SHORT $LN24@utf8TextAc
	movsx	eax, BYTE PTR _nulTerminated$36946[ebp]
	test	eax, eax
	je	SHORT $LN24@utf8TextAc
; Line 1236
	mov	eax, DWORD PTR _srcIx$36952[ebp]
	sub	eax, 1
	mov	DWORD PTR _srcIx$36952[ebp], eax
; Line 1237
	jmp	$LN34@utf8TextAc
$LN24@utf8TextAc:
; Line 1240
	cmp	DWORD PTR _c$36954[ebp], 65535		; 0000ffffH
	ja	SHORT $LN23@utf8TextAc
	mov	eax, DWORD PTR _destIx$36951[ebp]
	mov	ecx, DWORD PTR _buf$36948[ebp]
	mov	dx, WORD PTR _c$36954[ebp]
	mov	WORD PTR [ecx+eax*2], dx
	mov	eax, DWORD PTR _destIx$36951[ebp]
	add	eax, 1
	mov	DWORD PTR _destIx$36951[ebp], eax
	jmp	SHORT $LN21@utf8TextAc
$LN23@utf8TextAc:
	mov	eax, DWORD PTR _c$36954[ebp]
	sar	eax, 10					; 0000000aH
	add	eax, 55232				; 0000d7c0H
	mov	ecx, DWORD PTR _destIx$36951[ebp]
	mov	edx, DWORD PTR _buf$36948[ebp]
	mov	WORD PTR [edx+ecx*2], ax
	mov	eax, DWORD PTR _destIx$36951[ebp]
	add	eax, 1
	mov	DWORD PTR _destIx$36951[ebp], eax
	mov	eax, DWORD PTR _c$36954[ebp]
	and	eax, 1023				; 000003ffH
	or	eax, 56320				; 0000dc00H
	mov	ecx, DWORD PTR _destIx$36951[ebp]
	mov	edx, DWORD PTR _buf$36948[ebp]
	mov	WORD PTR [edx+ecx*2], ax
	mov	eax, DWORD PTR _destIx$36951[ebp]
	add	eax, 1
	mov	DWORD PTR _destIx$36951[ebp], eax
$LN21@utf8TextAc:
; Line 1242
	mov	eax, DWORD PTR _cIx$36964[ebp]
	sub	eax, DWORD PTR _ix$[ebp]
	mov	ecx, DWORD PTR _mapToNative$36949[ebp]
	add	ecx, DWORD PTR _dIx$36965[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _dIx$36965[ebp]
	add	edx, 1
	mov	DWORD PTR _dIx$36965[ebp], edx
; Line 1243
	mov	eax, DWORD PTR _dIx$36965[ebp]
	cmp	eax, DWORD PTR _destIx$36951[ebp]
	jl	SHORT $LN21@utf8TextAc
$LN18@utf8TextAc:
; Line 1246
	mov	eax, DWORD PTR _cIx$36964[ebp]
	sub	eax, DWORD PTR _ix$[ebp]
	mov	ecx, DWORD PTR _mapToUChars$36950[ebp]
	mov	dl, BYTE PTR _dIxSaved$36966[ebp]
	mov	BYTE PTR [ecx+eax], dl
	mov	eax, DWORD PTR _cIx$36964[ebp]
	add	eax, 1
	mov	DWORD PTR _cIx$36964[ebp], eax
; Line 1247
	mov	eax, DWORD PTR _cIx$36964[ebp]
	cmp	eax, DWORD PTR _srcIx$36952[ebp]
	jl	SHORT $LN18@utf8TextAc
$LN32@utf8TextAc:
; Line 1249
	mov	eax, DWORD PTR _srcIx$36952[ebp]
	cmp	eax, DWORD PTR _strLen$36945[ebp]
	jl	SHORT $LN15@utf8TextAc
; Line 1250
	jmp	SHORT $LN34@utf8TextAc
$LN15@utf8TextAc:
; Line 1253
	jmp	$LN35@utf8TextAc
$LN34@utf8TextAc:
; Line 1257
	mov	eax, DWORD PTR _srcIx$36952[ebp]
	sub	eax, DWORD PTR _ix$[ebp]
	mov	ecx, DWORD PTR _mapToNative$36949[ebp]
	add	ecx, DWORD PTR _destIx$36951[ebp]
	mov	BYTE PTR [ecx], al
; Line 1258
	mov	eax, DWORD PTR _srcIx$36952[ebp]
	sub	eax, DWORD PTR _ix$[ebp]
	mov	ecx, DWORD PTR _mapToUChars$36950[ebp]
	mov	dl, BYTE PTR _destIx$36951[ebp]
	mov	BYTE PTR [ecx+eax], dl
; Line 1261
	mov	eax, DWORD PTR _u8b$36943[ebp]
	mov	ecx, DWORD PTR _ix$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 1262
	mov	eax, DWORD PTR _u8b$36943[ebp]
	mov	ecx, DWORD PTR _srcIx$36952[ebp]
	mov	DWORD PTR [eax+4], ecx
; Line 1263
	mov	eax, DWORD PTR _u8b$36943[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 1264
	mov	eax, DWORD PTR _u8b$36943[ebp]
	mov	ecx, DWORD PTR _destIx$36951[ebp]
	mov	DWORD PTR [eax+12], ecx
; Line 1265
	movsx	eax, BYTE PTR _seenNonAscii$36953[ebp]
	test	eax, eax
	jne	SHORT $LN14@utf8TextAc
; Line 1266
	mov	eax, DWORD PTR _u8b$36943[ebp]
	mov	ecx, DWORD PTR _destIx$36951[ebp]
	mov	DWORD PTR [eax+16], ecx
$LN14@utf8TextAc:
; Line 1268
	mov	eax, DWORD PTR _u8b$36943[ebp]
	mov	ecx, DWORD PTR _u8b$36943[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+20], edx
; Line 1271
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR _buf$36948[ebp]
	mov	DWORD PTR [eax+48], ecx
; Line 1272
	mov	eax, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [eax+40], 0
; Line 1273
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR _u8b$36943[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+44], edx
; Line 1274
	mov	eax, DWORD PTR _u8b$36943[ebp]
	mov	eax, DWORD PTR [eax]
	cdq
	mov	ecx, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [ecx+32], eax
	mov	DWORD PTR [ecx+36], edx
; Line 1275
	mov	eax, DWORD PTR _u8b$36943[ebp]
	mov	eax, DWORD PTR [eax+4]
	cdq
	mov	ecx, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [ecx+16], eax
	mov	DWORD PTR [ecx+20], edx
; Line 1276
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR _u8b$36943[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+28], edx
; Line 1280
	movsx	eax, BYTE PTR _nulTerminated$36946[ebp]
	test	eax, eax
	je	SHORT $LN13@utf8TextAc
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR _srcIx$36952[ebp]
	cmp	ecx, DWORD PTR [eax+92]
	jle	SHORT $LN13@utf8TextAc
; Line 1281
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR _srcIx$36952[ebp]
	mov	DWORD PTR [eax+92], ecx
; Line 1282
	cmp	DWORD PTR _c$36954[ebp], 0
	jne	SHORT $LN13@utf8TextAc
; Line 1285
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR _srcIx$36952[ebp]
	mov	DWORD PTR [eax+88], ecx
; Line 1286
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, -3					; fffffffdH
	mov	edx, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [edx+8], ecx
$LN13@utf8TextAc:
; Line 1289
	mov	al, 1
	jmp	$LN83@utf8TextAc
$fillReverse$36920:
; Line 1298
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR _ix$[ebp]
	cmp	ecx, DWORD PTR [eax+88]
	je	SHORT $LN11@utf8TextAc
; Line 1299
	mov	eax, DWORD PTR _s8$[ebp]
	add	eax, DWORD PTR _ix$[ebp]
	movzx	ecx, BYTE PTR [eax]
	and	ecx, 192				; 000000c0H
	cmp	ecx, 128				; 00000080H
	jne	SHORT $LN11@utf8TextAc
	mov	eax, DWORD PTR _ix$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _s8$[ebp]
	push	ecx
	call	_utf8_back1SafeBody_56
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _ix$[ebp], eax
$LN11@utf8TextAc:
; Line 1305
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	mov	DWORD PTR _u8b$37005[ebp], ecx
; Line 1306
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR _ut$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	mov	DWORD PTR [eax+68], edx
; Line 1307
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR _u8b$37005[ebp]
	mov	DWORD PTR [eax+64], ecx
; Line 1309
	mov	eax, DWORD PTR _u8b$37005[ebp]
	add	eax, 24					; 00000018H
	mov	DWORD PTR _buf$37007[ebp], eax
; Line 1310
	mov	eax, DWORD PTR _u8b$37005[ebp]
	add	eax, 96					; 00000060H
	mov	DWORD PTR _mapToNative$37008[ebp], eax
; Line 1311
	mov	eax, DWORD PTR _u8b$37005[ebp]
	add	eax, 132				; 00000084H
	mov	DWORD PTR _mapToUChars$37009[ebp], eax
; Line 1312
	mov	eax, DWORD PTR _ix$[ebp]
	sub	eax, 97					; 00000061H
	mov	DWORD PTR _toUCharsMapStart$37010[ebp], eax
; Line 1313
	mov	DWORD PTR _destIx$37011[ebp], 34	; 00000022H
; Line 1317
	mov	eax, DWORD PTR _ix$[ebp]
	mov	DWORD PTR _srcIx$37012[ebp], eax
; Line 1318
	mov	eax, DWORD PTR _destIx$37011[ebp]
	mov	DWORD PTR _bufNILimit$37013[ebp], eax
; Line 1324
	mov	eax, DWORD PTR _srcIx$37012[ebp]
	sub	eax, DWORD PTR _toUCharsMapStart$37010[ebp]
	mov	ecx, DWORD PTR _mapToNative$37008[ebp]
	add	ecx, DWORD PTR _destIx$37011[ebp]
	mov	BYTE PTR [ecx], al
; Line 1325
	mov	eax, DWORD PTR _srcIx$37012[ebp]
	sub	eax, DWORD PTR _toUCharsMapStart$37010[ebp]
	mov	ecx, DWORD PTR _mapToUChars$37009[ebp]
	mov	dl, BYTE PTR _destIx$37011[ebp]
	mov	BYTE PTR [ecx+eax], dl
$LN9@utf8TextAc:
; Line 1330
	cmp	DWORD PTR _destIx$37011[ebp], 2
	jle	$LN8@utf8TextAc
	mov	eax, DWORD PTR _srcIx$37012[ebp]
	sub	eax, DWORD PTR _toUCharsMapStart$37010[ebp]
	cmp	eax, 5
	jle	$LN8@utf8TextAc
	cmp	DWORD PTR _srcIx$37012[ebp], 0
	jle	$LN8@utf8TextAc
; Line 1331
	mov	eax, DWORD PTR _srcIx$37012[ebp]
	sub	eax, 1
	mov	DWORD PTR _srcIx$37012[ebp], eax
; Line 1332
	mov	eax, DWORD PTR _destIx$37011[ebp]
	sub	eax, 1
	mov	DWORD PTR _destIx$37011[ebp], eax
; Line 1335
	mov	eax, DWORD PTR _s8$[ebp]
	add	eax, DWORD PTR _srcIx$37012[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _c$37014[ebp], ecx
; Line 1336
	cmp	DWORD PTR _c$37014[ebp], 128		; 00000080H
	jge	SHORT $LN7@utf8TextAc
; Line 1338
	mov	eax, DWORD PTR _destIx$37011[ebp]
	mov	ecx, DWORD PTR _buf$37007[ebp]
	mov	dx, WORD PTR _c$37014[ebp]
	mov	WORD PTR [ecx+eax*2], dx
; Line 1339
	mov	eax, DWORD PTR _srcIx$37012[ebp]
	sub	eax, DWORD PTR _toUCharsMapStart$37010[ebp]
	mov	ecx, DWORD PTR _mapToUChars$37009[ebp]
	mov	dl, BYTE PTR _destIx$37011[ebp]
	mov	BYTE PTR [ecx+eax], dl
; Line 1340
	mov	eax, DWORD PTR _srcIx$37012[ebp]
	sub	eax, DWORD PTR _toUCharsMapStart$37010[ebp]
	mov	ecx, DWORD PTR _mapToNative$37008[ebp]
	add	ecx, DWORD PTR _destIx$37011[ebp]
	mov	BYTE PTR [ecx], al
; Line 1341
	jmp	$LN6@utf8TextAc
$LN7@utf8TextAc:
; Line 1344
	mov	eax, DWORD PTR _srcIx$37012[ebp]
	mov	DWORD PTR _sIx$37025[ebp], eax
; Line 1350
	push	-3					; fffffffdH
	mov	eax, DWORD PTR _c$37014[ebp]
	push	eax
	lea	ecx, DWORD PTR _srcIx$37012[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _s8$[ebp]
	push	edx
	call	_utf8_prevCharSafeBody_56
	add	esp, 20					; 00000014H
	mov	DWORD PTR _c$37014[ebp], eax
; Line 1354
	cmp	DWORD PTR _c$37014[ebp], 65536		; 00010000H
	jge	SHORT $LN5@utf8TextAc
; Line 1355
	mov	eax, DWORD PTR _destIx$37011[ebp]
	mov	ecx, DWORD PTR _buf$37007[ebp]
	mov	dx, WORD PTR _c$37014[ebp]
	mov	WORD PTR [ecx+eax*2], dx
; Line 1356
	mov	eax, DWORD PTR _srcIx$37012[ebp]
	sub	eax, DWORD PTR _toUCharsMapStart$37010[ebp]
	mov	ecx, DWORD PTR _mapToNative$37008[ebp]
	add	ecx, DWORD PTR _destIx$37011[ebp]
	mov	BYTE PTR [ecx], al
; Line 1357
	jmp	$LN3@utf8TextAc
$LN5@utf8TextAc:
; Line 1358
	mov	eax, DWORD PTR _c$37014[ebp]
	and	eax, 1023				; 000003ffH
	or	eax, 56320				; 0000dc00H
	mov	ecx, DWORD PTR _destIx$37011[ebp]
	mov	edx, DWORD PTR _buf$37007[ebp]
	mov	WORD PTR [edx+ecx*2], ax
; Line 1359
	mov	eax, DWORD PTR _srcIx$37012[ebp]
	sub	eax, DWORD PTR _toUCharsMapStart$37010[ebp]
	mov	ecx, DWORD PTR _mapToNative$37008[ebp]
	add	ecx, DWORD PTR _destIx$37011[ebp]
	mov	BYTE PTR [ecx], al
; Line 1360
	mov	eax, DWORD PTR _destIx$37011[ebp]
	sub	eax, 1
	mov	DWORD PTR _destIx$37011[ebp], eax
	mov	ecx, DWORD PTR _c$37014[ebp]
	sar	ecx, 10					; 0000000aH
	add	ecx, 55232				; 0000d7c0H
	mov	edx, DWORD PTR _destIx$37011[ebp]
	mov	eax, DWORD PTR _buf$37007[ebp]
	mov	WORD PTR [eax+edx*2], cx
; Line 1361
	mov	eax, DWORD PTR _srcIx$37012[ebp]
	sub	eax, DWORD PTR _toUCharsMapStart$37010[ebp]
	mov	ecx, DWORD PTR _mapToNative$37008[ebp]
	add	ecx, DWORD PTR _destIx$37011[ebp]
	mov	BYTE PTR [ecx], al
$LN3@utf8TextAc:
; Line 1366
	mov	eax, DWORD PTR _sIx$37025[ebp]
	sub	eax, DWORD PTR _toUCharsMapStart$37010[ebp]
	mov	ecx, DWORD PTR _mapToUChars$37009[ebp]
	mov	dl, BYTE PTR _destIx$37011[ebp]
	mov	BYTE PTR [ecx+eax], dl
	mov	eax, DWORD PTR _sIx$37025[ebp]
	sub	eax, 1
	mov	DWORD PTR _sIx$37025[ebp], eax
; Line 1367
	mov	eax, DWORD PTR _sIx$37025[ebp]
	cmp	eax, DWORD PTR _srcIx$37012[ebp]
	jge	SHORT $LN3@utf8TextAc
; Line 1373
	mov	eax, DWORD PTR _destIx$37011[ebp]
	mov	DWORD PTR _bufNILimit$37013[ebp], eax
$LN6@utf8TextAc:
; Line 1375
	jmp	$LN9@utf8TextAc
$LN8@utf8TextAc:
; Line 1376
	mov	eax, DWORD PTR _u8b$37005[ebp]
	mov	ecx, DWORD PTR _srcIx$37012[ebp]
	mov	DWORD PTR [eax], ecx
; Line 1377
	mov	eax, DWORD PTR _u8b$37005[ebp]
	mov	ecx, DWORD PTR _ix$[ebp]
	mov	DWORD PTR [eax+4], ecx
; Line 1378
	mov	eax, DWORD PTR _u8b$37005[ebp]
	mov	ecx, DWORD PTR _destIx$37011[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 1379
	mov	eax, DWORD PTR _u8b$37005[ebp]
	mov	DWORD PTR [eax+12], 34			; 00000022H
; Line 1380
	mov	eax, DWORD PTR _u8b$37005[ebp]
	mov	ecx, DWORD PTR _bufNILimit$37013[ebp]
	sub	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _u8b$37005[ebp]
	mov	DWORD PTR [edx+16], ecx
; Line 1381
	mov	eax, DWORD PTR _u8b$37005[ebp]
	mov	ecx, DWORD PTR _toUCharsMapStart$37010[ebp]
	mov	DWORD PTR [eax+20], ecx
; Line 1383
	mov	eax, DWORD PTR _u8b$37005[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _buf$37007[ebp]
	lea	eax, DWORD PTR [edx+ecx*2]
	mov	ecx, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [ecx+48], eax
; Line 1384
	mov	eax, DWORD PTR _u8b$37005[ebp]
	mov	ecx, DWORD PTR _u8b$37005[ebp]
	mov	edx, DWORD PTR [eax+12]
	sub	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [eax+44], edx
; Line 1385
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR _ut$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR [eax+40], edx
; Line 1386
	mov	eax, DWORD PTR _u8b$37005[ebp]
	mov	eax, DWORD PTR [eax]
	cdq
	mov	ecx, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [ecx+32], eax
	mov	DWORD PTR [ecx+36], edx
; Line 1387
	mov	eax, DWORD PTR _u8b$37005[ebp]
	mov	eax, DWORD PTR [eax+4]
	cdq
	mov	ecx, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [ecx+16], eax
	mov	DWORD PTR [ecx+20], edx
; Line 1388
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR _u8b$37005[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+28], edx
; Line 1389
	mov	al, 1
$LN83@utf8TextAc:
; Line 1392
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN99@utf8TextAc
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 588				; 0000024cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN99@utf8TextAc:
	DD	2
	DD	$LN98@utf8TextAc
$LN98@utf8TextAc:
	DD	-176					; ffffff50H
	DD	4
	DD	$LN96@utf8TextAc
	DD	-344					; fffffea8H
	DD	4
	DD	$LN97@utf8TextAc
$LN97@utf8TextAc:
	DB	115					; 00000073H
	DB	114					; 00000072H
	DB	99					; 00000063H
	DB	73					; 00000049H
	DB	120					; 00000078H
	DB	0
$LN96@utf8TextAc:
	DB	115					; 00000073H
	DB	114					; 00000072H
	DB	99					; 00000063H
	DB	73					; 00000049H
	DB	120					; 00000078H
	DB	0
_utf8TextAccess ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _utf8TextExtract
_TEXT	SEGMENT
tv226 = -276						; size = 4
tv205 = -276						; size = 4
tv223 = -272						; size = 8
tv202 = -272						; size = 8
_destLength$ = -68					; size = 4
_i$ = -56						; size = 4
_buf$ = -44						; size = 4
_limit32$ = -32						; size = 4
_start32$ = -20						; size = 4
_length$ = -8						; size = 4
_ut$ = 8						; size = 4
_start$ = 12						; size = 8
_limit$ = 20						; size = 8
_dest$ = 28						; size = 4
_destCapacity$ = 32					; size = 4
_pErrorCode$ = 36					; size = 4
_utf8TextExtract PROC					; COMDAT
; Line 1467
	push	ebp
	mov	ebp, esp
	sub	esp, 276				; 00000114H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-276]
	mov	ecx, 69					; 00000045H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1468
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN16@utf8TextEx
; Line 1469
	xor	eax, eax
	jmp	$LN17@utf8TextEx
$LN16@utf8TextEx:
; Line 1471
	cmp	DWORD PTR _destCapacity$[ebp], 0
	jl	SHORT $LN14@utf8TextEx
	cmp	DWORD PTR _dest$[ebp], 0
	jne	SHORT $LN15@utf8TextEx
	cmp	DWORD PTR _destCapacity$[ebp], 0
	jle	SHORT $LN15@utf8TextEx
$LN14@utf8TextEx:
; Line 1472
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 1
; Line 1473
	xor	eax, eax
	jmp	$LN17@utf8TextEx
$LN15@utf8TextEx:
; Line 1475
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	mov	DWORD PTR _length$[ebp], ecx
; Line 1476
	mov	eax, DWORD PTR _length$[ebp]
	cdq
	push	edx
	push	eax
	lea	eax, DWORD PTR _start$[ebp]
	push	eax
	call	?pinIndex@@YAHAA_J_J@Z			; pinIndex
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _start32$[ebp], eax
; Line 1477
	mov	eax, DWORD PTR _length$[ebp]
	cdq
	push	edx
	push	eax
	lea	eax, DWORD PTR _limit$[ebp]
	push	eax
	call	?pinIndex@@YAHAA_J_J@Z			; pinIndex
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _limit32$[ebp], eax
; Line 1479
	mov	eax, DWORD PTR _start32$[ebp]
	cmp	eax, DWORD PTR _limit32$[ebp]
	jle	SHORT $LN13@utf8TextEx
; Line 1480
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 8
; Line 1481
	xor	eax, eax
	jmp	$LN17@utf8TextEx
$LN13@utf8TextEx:
; Line 1488
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	mov	DWORD PTR _buf$[ebp], ecx
; Line 1490
	mov	eax, DWORD PTR _start32$[ebp]
	cdq
	mov	ecx, DWORD PTR _ut$[ebp]
	mov	DWORD PTR tv202[ebp], eax
	mov	DWORD PTR tv202[ebp+4], edx
	mov	DWORD PTR tv205[ebp], ecx
	mov	edx, DWORD PTR tv205[ebp]
	mov	eax, DWORD PTR tv202[ebp+4]
	cmp	eax, DWORD PTR [edx+20]
	jg	SHORT $LN12@utf8TextEx
	jl	SHORT $LN19@utf8TextEx
	mov	ecx, DWORD PTR tv205[ebp]
	mov	edx, DWORD PTR tv202[ebp]
	cmp	edx, DWORD PTR [ecx+16]
	jae	SHORT $LN12@utf8TextEx
$LN19@utf8TextEx:
; Line 1491
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN11@utf8TextEx
$LN10@utf8TextEx:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN11@utf8TextEx:
	cmp	DWORD PTR _i$[ebp], 3
	jge	SHORT $LN12@utf8TextEx
; Line 1492
	mov	eax, DWORD PTR _buf$[ebp]
	add	eax, DWORD PTR _start32$[ebp]
	movzx	ecx, BYTE PTR [eax]
	and	ecx, 128				; 00000080H
	je	SHORT $LN7@utf8TextEx
	mov	eax, DWORD PTR _buf$[ebp]
	add	eax, DWORD PTR _start32$[ebp]
	movzx	ecx, BYTE PTR [eax]
	sub	ecx, 192				; 000000c0H
	movzx	edx, cl
	cmp	edx, 62					; 0000003eH
	jl	SHORT $LN7@utf8TextEx
	cmp	DWORD PTR _start32$[ebp], 0
	jne	SHORT $LN8@utf8TextEx
$LN7@utf8TextEx:
; Line 1493
	jmp	SHORT $LN12@utf8TextEx
$LN8@utf8TextEx:
; Line 1495
	mov	eax, DWORD PTR _start32$[ebp]
	sub	eax, 1
	mov	DWORD PTR _start32$[ebp], eax
; Line 1496
	jmp	SHORT $LN10@utf8TextEx
$LN12@utf8TextEx:
; Line 1499
	mov	eax, DWORD PTR _limit32$[ebp]
	cdq
	mov	ecx, DWORD PTR _ut$[ebp]
	mov	DWORD PTR tv223[ebp], eax
	mov	DWORD PTR tv223[ebp+4], edx
	mov	DWORD PTR tv226[ebp], ecx
	mov	edx, DWORD PTR tv226[ebp]
	mov	eax, DWORD PTR tv223[ebp+4]
	cmp	eax, DWORD PTR [edx+20]
	jg	SHORT $LN6@utf8TextEx
	jl	SHORT $LN20@utf8TextEx
	mov	ecx, DWORD PTR tv226[ebp]
	mov	edx, DWORD PTR tv223[ebp]
	cmp	edx, DWORD PTR [ecx+16]
	jae	SHORT $LN6@utf8TextEx
$LN20@utf8TextEx:
; Line 1500
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN5@utf8TextEx
$LN4@utf8TextEx:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN5@utf8TextEx:
	cmp	DWORD PTR _i$[ebp], 3
	jge	SHORT $LN6@utf8TextEx
; Line 1501
	mov	eax, DWORD PTR _buf$[ebp]
	add	eax, DWORD PTR _limit32$[ebp]
	movzx	ecx, BYTE PTR [eax]
	and	ecx, 128				; 00000080H
	je	SHORT $LN1@utf8TextEx
	mov	eax, DWORD PTR _buf$[ebp]
	add	eax, DWORD PTR _limit32$[ebp]
	movzx	ecx, BYTE PTR [eax]
	sub	ecx, 192				; 000000c0H
	movzx	edx, cl
	cmp	edx, 62					; 0000003eH
	jl	SHORT $LN1@utf8TextEx
	cmp	DWORD PTR _limit32$[ebp], 0
	jne	SHORT $LN2@utf8TextEx
$LN1@utf8TextEx:
; Line 1502
	jmp	SHORT $LN6@utf8TextEx
$LN2@utf8TextEx:
; Line 1504
	mov	eax, DWORD PTR _limit32$[ebp]
	sub	eax, 1
	mov	DWORD PTR _limit32$[ebp], eax
; Line 1505
	jmp	SHORT $LN4@utf8TextEx
$LN6@utf8TextEx:
; Line 1509
	mov	DWORD PTR _destLength$[ebp], 0
; Line 1512
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _limit32$[ebp]
	sub	ecx, DWORD PTR _start32$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ut$[ebp]
	mov	eax, DWORD PTR [edx+60]
	add	eax, DWORD PTR _start32$[ebp]
	push	eax
	lea	ecx, DWORD PTR _destLength$[ebp]
	push	ecx
	mov	edx, DWORD PTR _destCapacity$[ebp]
	push	edx
	mov	eax, DWORD PTR _dest$[ebp]
	push	eax
	call	_utext_strFromUTF8
	add	esp, 24					; 00000018H
; Line 1513
	push	1
	mov	eax, DWORD PTR _limit32$[ebp]
	cdq
	push	edx
	push	eax
	mov	eax, DWORD PTR _ut$[ebp]
	push	eax
	call	_utf8TextAccess
	add	esp, 16					; 00000010H
; Line 1514
	mov	eax, DWORD PTR _destLength$[ebp]
$LN17@utf8TextEx:
; Line 1515
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN23@utf8TextEx
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 276				; 00000114H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN23@utf8TextEx:
	DD	1
	DD	$LN22@utf8TextEx
$LN22@utf8TextEx:
	DD	-68					; ffffffbcH
	DD	4
	DD	$LN21@utf8TextEx
$LN21@utf8TextEx:
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	76					; 0000004cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	0
_utf8TextExtract ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?pinIndex@@YAHAA_J_J@Z
_TEXT	SEGMENT
tv76 = -196						; size = 4
tv68 = -196						; size = 4
_index$ = 8						; size = 4
_limit$ = 12						; size = 8
?pinIndex@@YAHAA_J_J@Z PROC				; pinIndex, COMDAT
; Line 728
	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 729
	mov	eax, DWORD PTR _index$[ebp]
	mov	DWORD PTR tv68[ebp], eax
	mov	ecx, DWORD PTR tv68[ebp]
	cmp	DWORD PTR [ecx+4], 0
	jg	SHORT $LN3@pinIndex@2
	jl	SHORT $LN6@pinIndex@2
	mov	edx, DWORD PTR tv68[ebp]
	cmp	DWORD PTR [edx], 0
	jae	SHORT $LN3@pinIndex@2
$LN6@pinIndex@2:
; Line 730
	mov	eax, DWORD PTR _index$[ebp]
	mov	DWORD PTR [eax], 0
	mov	DWORD PTR [eax+4], 0
	jmp	SHORT $LN2@pinIndex@2
$LN3@pinIndex@2:
; Line 731
	mov	eax, DWORD PTR _index$[ebp]
	mov	DWORD PTR tv76[ebp], eax
	mov	ecx, DWORD PTR tv76[ebp]
	mov	edx, DWORD PTR [ecx+4]
	cmp	edx, DWORD PTR _limit$[ebp+4]
	jl	SHORT $LN2@pinIndex@2
	jg	SHORT $LN7@pinIndex@2
	mov	eax, DWORD PTR tv76[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR _limit$[ebp]
	jbe	SHORT $LN2@pinIndex@2
$LN7@pinIndex@2:
; Line 732
	mov	eax, DWORD PTR _index$[ebp]
	mov	ecx, DWORD PTR _limit$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _limit$[ebp+4]
	mov	DWORD PTR [eax+4], edx
$LN2@pinIndex@2:
; Line 734
	mov	eax, DWORD PTR _index$[ebp]
	mov	eax, DWORD PTR [eax]
; Line 735
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?pinIndex@@YAHAA_J_J@Z ENDP				; pinIndex
_TEXT	ENDS
EXTRN	_u_terminateUChars_56:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _utext_strFromUTF8
_TEXT	SEGMENT
tv67 = -268						; size = 4
_pSrc$ = -68						; size = 4
_reqLength$ = -56					; size = 4
_index$ = -44						; size = 4
_ch$ = -32						; size = 4
_pDestLimit$ = -20					; size = 4
_pDest$ = -8						; size = 4
_dest$ = 8						; size = 4
_destCapacity$ = 12					; size = 4
_pDestLength$ = 16					; size = 4
_src$ = 20						; size = 4
_srcLength$ = 24					; size = 4
_pErrorCode$ = 28					; size = 4
_utext_strFromUTF8 PROC					; COMDAT
; Line 1409
	push	ebp
	mov	ebp, esp
	sub	esp, 268				; 0000010cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-268]
	mov	ecx, 67					; 00000043H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1411
	mov	eax, DWORD PTR _dest$[ebp]
	mov	DWORD PTR _pDest$[ebp], eax
; Line 1412
	cmp	DWORD PTR _dest$[ebp], 0
	je	SHORT $LN16@utext_strF
	mov	eax, DWORD PTR _destCapacity$[ebp]
	mov	ecx, DWORD PTR _dest$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR tv67[ebp], edx
	jmp	SHORT $LN17@utext_strF
$LN16@utext_strF:
	mov	DWORD PTR tv67[ebp], 0
$LN17@utext_strF:
	mov	eax, DWORD PTR tv67[ebp]
	mov	DWORD PTR _pDestLimit$[ebp], eax
; Line 1413
	mov	DWORD PTR _ch$[ebp], 0
; Line 1414
	mov	DWORD PTR _index$[ebp], 0
; Line 1415
	mov	DWORD PTR _reqLength$[ebp], 0
; Line 1416
	mov	eax, DWORD PTR _src$[ebp]
	mov	DWORD PTR _pSrc$[ebp], eax
$LN13@utext_strF:
; Line 1419
	mov	eax, DWORD PTR _index$[ebp]
	cmp	eax, DWORD PTR _srcLength$[ebp]
	jge	$LN5@utext_strF
	mov	eax, DWORD PTR _pDest$[ebp]
	cmp	eax, DWORD PTR _pDestLimit$[ebp]
	jae	$LN5@utext_strF
; Line 1420
	mov	eax, DWORD PTR _pSrc$[ebp]
	add	eax, DWORD PTR _index$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _ch$[ebp], ecx
	mov	edx, DWORD PTR _index$[ebp]
	add	edx, 1
	mov	DWORD PTR _index$[ebp], edx
; Line 1421
	cmp	DWORD PTR _ch$[ebp], 127		; 0000007fH
	jg	SHORT $LN11@utext_strF
; Line 1422
	mov	eax, DWORD PTR _pDest$[ebp]
	mov	cx, WORD PTR _ch$[ebp]
	mov	WORD PTR [eax], cx
	mov	edx, DWORD PTR _pDest$[ebp]
	add	edx, 2
	mov	DWORD PTR _pDest$[ebp], edx
; Line 1423
	jmp	$LN10@utext_strF
$LN11@utext_strF:
; Line 1424
	push	-3					; fffffffdH
	mov	eax, DWORD PTR _ch$[ebp]
	push	eax
	mov	ecx, DWORD PTR _srcLength$[ebp]
	push	ecx
	lea	edx, DWORD PTR _index$[ebp]
	push	edx
	mov	eax, DWORD PTR _pSrc$[ebp]
	push	eax
	call	_utf8_nextCharSafeBody_56
	add	esp, 20					; 00000014H
	mov	DWORD PTR _ch$[ebp], eax
; Line 1425
	cmp	DWORD PTR _ch$[ebp], 65535		; 0000ffffH
	ja	SHORT $LN9@utext_strF
; Line 1426
	mov	eax, DWORD PTR _pDest$[ebp]
	mov	cx, WORD PTR _ch$[ebp]
	mov	WORD PTR [eax], cx
	mov	edx, DWORD PTR _pDest$[ebp]
	add	edx, 2
	mov	DWORD PTR _pDest$[ebp], edx
; Line 1427
	jmp	SHORT $LN10@utext_strF
$LN9@utext_strF:
; Line 1428
	mov	eax, DWORD PTR _ch$[ebp]
	sar	eax, 10					; 0000000aH
	add	eax, 55232				; 0000d7c0H
	mov	ecx, DWORD PTR _pDest$[ebp]
	mov	WORD PTR [ecx], ax
	mov	edx, DWORD PTR _pDest$[ebp]
	add	edx, 2
	mov	DWORD PTR _pDest$[ebp], edx
; Line 1429
	mov	eax, DWORD PTR _pDest$[ebp]
	cmp	eax, DWORD PTR _pDestLimit$[ebp]
	jae	SHORT $LN7@utext_strF
; Line 1430
	mov	eax, DWORD PTR _ch$[ebp]
	and	eax, 1023				; 000003ffH
	or	eax, 56320				; 0000dc00H
	mov	ecx, DWORD PTR _pDest$[ebp]
	mov	WORD PTR [ecx], ax
	mov	edx, DWORD PTR _pDest$[ebp]
	add	edx, 2
	mov	DWORD PTR _pDest$[ebp], edx
; Line 1431
	jmp	SHORT $LN10@utext_strF
$LN7@utext_strF:
; Line 1432
	mov	eax, DWORD PTR _reqLength$[ebp]
	add	eax, 1
	mov	DWORD PTR _reqLength$[ebp], eax
; Line 1433
	jmp	SHORT $LN5@utext_strF
$LN10@utext_strF:
; Line 1437
	jmp	$LN13@utext_strF
$LN5@utext_strF:
; Line 1439
	mov	eax, DWORD PTR _index$[ebp]
	cmp	eax, DWORD PTR _srcLength$[ebp]
	jge	SHORT $LN4@utext_strF
; Line 1440
	mov	eax, DWORD PTR _pSrc$[ebp]
	add	eax, DWORD PTR _index$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _ch$[ebp], ecx
	mov	edx, DWORD PTR _index$[ebp]
	add	edx, 1
	mov	DWORD PTR _index$[ebp], edx
; Line 1441
	cmp	DWORD PTR _ch$[ebp], 127		; 0000007fH
	jg	SHORT $LN3@utext_strF
; Line 1442
	mov	eax, DWORD PTR _reqLength$[ebp]
	add	eax, 1
	mov	DWORD PTR _reqLength$[ebp], eax
; Line 1443
	jmp	SHORT $LN2@utext_strF
$LN3@utext_strF:
; Line 1444
	push	-3					; fffffffdH
	mov	eax, DWORD PTR _ch$[ebp]
	push	eax
	mov	ecx, DWORD PTR _srcLength$[ebp]
	push	ecx
	lea	edx, DWORD PTR _index$[ebp]
	push	edx
	mov	eax, DWORD PTR _pSrc$[ebp]
	push	eax
	call	_utf8_nextCharSafeBody_56
	add	esp, 20					; 00000014H
	mov	DWORD PTR _ch$[ebp], eax
; Line 1445
	mov	eax, 65535				; 0000ffffH
	cmp	eax, DWORD PTR _ch$[ebp]
	sbb	ecx, ecx
	neg	ecx
	add	ecx, 1
	add	ecx, DWORD PTR _reqLength$[ebp]
	mov	DWORD PTR _reqLength$[ebp], ecx
$LN2@utext_strF:
; Line 1447
	jmp	SHORT $LN5@utext_strF
$LN4@utext_strF:
; Line 1449
	mov	eax, DWORD PTR _pDest$[ebp]
	sub	eax, DWORD PTR _dest$[ebp]
	sar	eax, 1
	add	eax, DWORD PTR _reqLength$[ebp]
	mov	DWORD PTR _reqLength$[ebp], eax
; Line 1451
	cmp	DWORD PTR _pDestLength$[ebp], 0
	je	SHORT $LN1@utext_strF
; Line 1452
	mov	eax, DWORD PTR _pDestLength$[ebp]
	mov	ecx, DWORD PTR _reqLength$[ebp]
	mov	DWORD PTR [eax], ecx
$LN1@utext_strF:
; Line 1456
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _reqLength$[ebp]
	push	ecx
	mov	edx, DWORD PTR _destCapacity$[ebp]
	push	edx
	mov	eax, DWORD PTR _dest$[ebp]
	push	eax
	call	_u_terminateUChars_56
	add	esp, 16					; 00000010H
; Line 1458
	mov	eax, DWORD PTR _dest$[ebp]
; Line 1459
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN20@utext_strF
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 268				; 0000010cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN20@utext_strF:
	DD	1
	DD	$LN19@utext_strF
$LN19@utext_strF:
	DD	-44					; ffffffd4H
	DD	4
	DD	$LN18@utext_strF
$LN18@utext_strF:
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	0
_utext_strFromUTF8 ENDP
_TEXT	ENDS
PUBLIC	??_C@_1JK@MEHKDALN@?$AAn?$AAa?$AAt?$AAi?$AAv?$AAe?$AAO?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAu?$AAt?$AA?9?$AA?$DO?$AAc?$AAh?$AAu?$AAn?$AAk?$AAN?$AAa?$AAt?$AAi?$AAv?$AAe?$AAS@ ; `string'
PUBLIC	??_C@_1JI@ICBDKHPO@?$AAu?$AAt?$AA?9?$AA?$DO?$AAc?$AAh?$AAu?$AAn?$AAk?$AAO?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?$DO?$AAu?$AAt?$AA?9?$AA?$DO?$AAn?$AAa?$AAt?$AAi?$AAv?$AAe?$AAI?$AAn?$AAd?$AAe?$AAx?$AAi@ ; `string'
PUBLIC	?__LINE__Var@?1??utf8TextMapOffsetToNative@@9@4JA@8d672338 ; `utf8TextMapOffsetToNative'::`2'::__LINE__Var
;	COMDAT ??_C@_1JK@MEHKDALN@?$AAn?$AAa?$AAt?$AAi?$AAv?$AAe?$AAO?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAu?$AAt?$AA?9?$AA?$DO?$AAc?$AAh?$AAu?$AAn?$AAk?$AAN?$AAa?$AAt?$AAi?$AAv?$AAe?$AAS@
CONST	SEGMENT
??_C@_1JK@MEHKDALN@?$AAn?$AAa?$AAt?$AAi?$AAv?$AAe?$AAO?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAu?$AAt?$AA?9?$AA?$DO?$AAc?$AAh?$AAu?$AAn?$AAk?$AAN?$AAa?$AAt?$AAi?$AAv?$AAe?$AAS@ DB 'n'
	DB	00H, 'a', 00H, 't', 00H, 'i', 00H, 'v', 00H, 'e', 00H, 'O', 00H
	DB	'f', 00H, 'f', 00H, 's', 00H, 'e', 00H, 't', 00H, ' ', 00H, '>'
	DB	00H, '=', 00H, ' ', 00H, 'u', 00H, 't', 00H, '-', 00H, '>', 00H
	DB	'c', 00H, 'h', 00H, 'u', 00H, 'n', 00H, 'k', 00H, 'N', 00H, 'a'
	DB	00H, 't', 00H, 'i', 00H, 'v', 00H, 'e', 00H, 'S', 00H, 't', 00H
	DB	'a', 00H, 'r', 00H, 't', 00H, ' ', 00H, '&', 00H, '&', 00H, ' '
	DB	00H, 'n', 00H, 'a', 00H, 't', 00H, 'i', 00H, 'v', 00H, 'e', 00H
	DB	'O', 00H, 'f', 00H, 'f', 00H, 's', 00H, 'e', 00H, 't', 00H, ' '
	DB	00H, '<', 00H, '=', 00H, ' ', 00H, 'u', 00H, 't', 00H, '-', 00H
	DB	'>', 00H, 'c', 00H, 'h', 00H, 'u', 00H, 'n', 00H, 'k', 00H, 'N'
	DB	00H, 'a', 00H, 't', 00H, 'i', 00H, 'v', 00H, 'e', 00H, 'L', 00H
	DB	'i', 00H, 'm', 00H, 'i', 00H, 't', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1JI@ICBDKHPO@?$AAu?$AAt?$AA?9?$AA?$DO?$AAc?$AAh?$AAu?$AAn?$AAk?$AAO?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?$DO?$AAu?$AAt?$AA?9?$AA?$DO?$AAn?$AAa?$AAt?$AAi?$AAv?$AAe?$AAI?$AAn?$AAd?$AAe?$AAx?$AAi@
CONST	SEGMENT
??_C@_1JI@ICBDKHPO@?$AAu?$AAt?$AA?9?$AA?$DO?$AAc?$AAh?$AAu?$AAn?$AAk?$AAO?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?$DO?$AAu?$AAt?$AA?9?$AA?$DO?$AAn?$AAa?$AAt?$AAi?$AAv?$AAe?$AAI?$AAn?$AAd?$AAe?$AAx?$AAi@ DB 'u'
	DB	00H, 't', 00H, '-', 00H, '>', 00H, 'c', 00H, 'h', 00H, 'u', 00H
	DB	'n', 00H, 'k', 00H, 'O', 00H, 'f', 00H, 'f', 00H, 's', 00H, 'e'
	DB	00H, 't', 00H, '>', 00H, 'u', 00H, 't', 00H, '-', 00H, '>', 00H
	DB	'n', 00H, 'a', 00H, 't', 00H, 'i', 00H, 'v', 00H, 'e', 00H, 'I'
	DB	00H, 'n', 00H, 'd', 00H, 'e', 00H, 'x', 00H, 'i', 00H, 'n', 00H
	DB	'g', 00H, 'L', 00H, 'i', 00H, 'm', 00H, 'i', 00H, 't', 00H, ' '
	DB	00H, '&', 00H, '&', 00H, ' ', 00H, 'u', 00H, 't', 00H, '-', 00H
	DB	'>', 00H, 'c', 00H, 'h', 00H, 'u', 00H, 'n', 00H, 'k', 00H, 'O'
	DB	00H, 'f', 00H, 'f', 00H, 's', 00H, 'e', 00H, 't', 00H, '<', 00H
	DB	'=', 00H, 'u', 00H, 't', 00H, '-', 00H, '>', 00H, 'c', 00H, 'h'
	DB	00H, 'u', 00H, 'n', 00H, 'k', 00H, 'L', 00H, 'e', 00H, 'n', 00H
	DB	'g', 00H, 't', 00H, 'h', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??utf8TextMapOffsetToNative@@9@4JA@8d672338
_DATA	SEGMENT
?__LINE__Var@?1??utf8TextMapOffsetToNative@@9@4JA@8d672338 DD 05f2H ; `utf8TextMapOffsetToNative'::`2'::__LINE__Var
; Function compile flags: /Odtp /RTCsu /ZI
_DATA	ENDS
;	COMDAT _utf8TextMapOffsetToNative
_TEXT	SEGMENT
tv174 = -240						; size = 4
tv171 = -236						; size = 8
tv157 = -228						; size = 4
tv154 = -224						; size = 8
_nativeOffset$ = -20					; size = 4
_u8b$ = -8						; size = 4
_ut$ = 8						; size = 4
_utf8TextMapOffsetToNative PROC				; COMDAT
; Line 1522
	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1524
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	DWORD PTR _u8b$[ebp], ecx
; Line 1525
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR _ut$[ebp]
	mov	edx, DWORD PTR [eax+40]
	cmp	edx, DWORD PTR [ecx+28]
	jle	SHORT $LN3@utf8TextMa
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR _ut$[ebp]
	mov	edx, DWORD PTR [eax+40]
	cmp	edx, DWORD PTR [ecx+44]
	jle	SHORT $LN4@utf8TextMa
$LN3@utf8TextMa:
	mov	eax, DWORD PTR ?__LINE__Var@?1??utf8TextMapOffsetToNative@@9@4JA@8d672338
	add	eax, 3
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1FI@DOHBLNEC@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@
	push	OFFSET ??_C@_1JI@ICBDKHPO@?$AAu?$AAt?$AA?9?$AA?$DO?$AAc?$AAh?$AAu?$AAn?$AAk?$AAO?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?$DO?$AAu?$AAt?$AA?9?$AA?$DO?$AAn?$AAa?$AAt?$AAi?$AAv?$AAe?$AAI?$AAn?$AAd?$AAe?$AAx?$AAi@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN4@utf8TextMa:
; Line 1526
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR _u8b$[ebp]
	add	ecx, DWORD PTR [edx+8]
	mov	eax, DWORD PTR _u8b$[ebp]
	movzx	ecx, BYTE PTR [eax+ecx+96]
	mov	edx, DWORD PTR _u8b$[ebp]
	add	ecx, DWORD PTR [edx+20]
	mov	DWORD PTR _nativeOffset$[ebp], ecx
; Line 1527
	mov	eax, DWORD PTR _nativeOffset$[ebp]
	cdq
	mov	ecx, DWORD PTR _ut$[ebp]
	mov	DWORD PTR tv154[ebp], eax
	mov	DWORD PTR tv154[ebp+4], edx
	mov	DWORD PTR tv157[ebp], ecx
	mov	edx, DWORD PTR tv157[ebp]
	mov	eax, DWORD PTR tv154[ebp+4]
	cmp	eax, DWORD PTR [edx+36]
	jl	SHORT $LN5@utf8TextMa
	jg	SHORT $LN7@utf8TextMa
	mov	ecx, DWORD PTR tv157[ebp]
	mov	edx, DWORD PTR tv154[ebp]
	cmp	edx, DWORD PTR [ecx+32]
	jb	SHORT $LN5@utf8TextMa
$LN7@utf8TextMa:
	mov	eax, DWORD PTR _nativeOffset$[ebp]
	cdq
	mov	ecx, DWORD PTR _ut$[ebp]
	mov	DWORD PTR tv171[ebp], eax
	mov	DWORD PTR tv171[ebp+4], edx
	mov	DWORD PTR tv174[ebp], ecx
	mov	edx, DWORD PTR tv174[ebp]
	mov	eax, DWORD PTR tv171[ebp+4]
	cmp	eax, DWORD PTR [edx+20]
	jl	SHORT $LN6@utf8TextMa
	jg	SHORT $LN5@utf8TextMa
	mov	ecx, DWORD PTR tv174[ebp]
	mov	edx, DWORD PTR tv171[ebp]
	cmp	edx, DWORD PTR [ecx+16]
	jbe	SHORT $LN6@utf8TextMa
$LN5@utf8TextMa:
	mov	eax, DWORD PTR ?__LINE__Var@?1??utf8TextMapOffsetToNative@@9@4JA@8d672338
	add	eax, 5
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1FI@DOHBLNEC@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@
	push	OFFSET ??_C@_1JK@MEHKDALN@?$AAn?$AAa?$AAt?$AAi?$AAv?$AAe?$AAO?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAu?$AAt?$AA?9?$AA?$DO?$AAc?$AAh?$AAu?$AAn?$AAk?$AAN?$AAa?$AAt?$AAi?$AAv?$AAe?$AAS@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN6@utf8TextMa:
; Line 1528
	mov	eax, DWORD PTR _nativeOffset$[ebp]
	cdq
; Line 1529
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_utf8TextMapOffsetToNative ENDP
_TEXT	ENDS
PUBLIC	??_C@_1EK@OJNDMMAI@?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?$DO?$AA?$DN?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?$DM?$AA?$DN?$AAu?$AAt?$AA?9?$AA?$DO?$AAc?$AAh?$AAu?$AAn?$AAk?$AAL?$AAe@ ; `string'
PUBLIC	??_C@_1DI@NEMBKDBO@?$AAi?$AAn?$AAd?$AAe?$AAx?$AA?$DM?$AA?$DN?$AAu?$AAt?$AA?9?$AA?$DO?$AAc?$AAh?$AAu?$AAn?$AAk?$AAN?$AAa?$AAt?$AAi?$AAv?$AAe?$AAL?$AAi?$AAm?$AAi?$AAt?$AA?$AA@ ; `string'
PUBLIC	??_C@_1GI@PMDKFDFH@?$AAi?$AAn?$AAd?$AAe?$AAx?$AA?$DO?$AA?$DN?$AAu?$AAt?$AA?9?$AA?$DO?$AAc?$AAh?$AAu?$AAn?$AAk?$AAN?$AAa?$AAt?$AAi?$AAv?$AAe?$AAS?$AAt?$AAa?$AAr?$AAt?$AA?$CL?$AAu?$AAt?$AA?9?$AA?$DO@ ; `string'
PUBLIC	??_C@_1CM@LECLFDGF@?$AAi?$AAn?$AAd?$AAe?$AAx?$AA6?$AA4?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA0?$AAx?$AA7?$AAf?$AAf?$AAf?$AAf?$AAf?$AAf?$AAf?$AA?$AA@ ; `string'
PUBLIC	?__LINE__Var@?1??utf8TextMapIndexToUTF16@@9@4JA@8d672338 ; `utf8TextMapIndexToUTF16'::`2'::__LINE__Var
;	COMDAT ??_C@_1EK@OJNDMMAI@?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?$DO?$AA?$DN?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?$DM?$AA?$DN?$AAu?$AAt?$AA?9?$AA?$DO?$AAc?$AAh?$AAu?$AAn?$AAk?$AAL?$AAe@
CONST	SEGMENT
??_C@_1EK@OJNDMMAI@?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?$DO?$AA?$DN?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?$DM?$AA?$DN?$AAu?$AAt?$AA?9?$AA?$DO?$AAc?$AAh?$AAu?$AAn?$AAk?$AAL?$AAe@ DB 'o'
	DB	00H, 'f', 00H, 'f', 00H, 's', 00H, 'e', 00H, 't', 00H, '>', 00H
	DB	'=', 00H, '0', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, 'o'
	DB	00H, 'f', 00H, 'f', 00H, 's', 00H, 'e', 00H, 't', 00H, '<', 00H
	DB	'=', 00H, 'u', 00H, 't', 00H, '-', 00H, '>', 00H, 'c', 00H, 'h'
	DB	00H, 'u', 00H, 'n', 00H, 'k', 00H, 'L', 00H, 'e', 00H, 'n', 00H
	DB	'g', 00H, 't', 00H, 'h', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1DI@NEMBKDBO@?$AAi?$AAn?$AAd?$AAe?$AAx?$AA?$DM?$AA?$DN?$AAu?$AAt?$AA?9?$AA?$DO?$AAc?$AAh?$AAu?$AAn?$AAk?$AAN?$AAa?$AAt?$AAi?$AAv?$AAe?$AAL?$AAi?$AAm?$AAi?$AAt?$AA?$AA@
CONST	SEGMENT
??_C@_1DI@NEMBKDBO@?$AAi?$AAn?$AAd?$AAe?$AAx?$AA?$DM?$AA?$DN?$AAu?$AAt?$AA?9?$AA?$DO?$AAc?$AAh?$AAu?$AAn?$AAk?$AAN?$AAa?$AAt?$AAi?$AAv?$AAe?$AAL?$AAi?$AAm?$AAi?$AAt?$AA?$AA@ DB 'i'
	DB	00H, 'n', 00H, 'd', 00H, 'e', 00H, 'x', 00H, '<', 00H, '=', 00H
	DB	'u', 00H, 't', 00H, '-', 00H, '>', 00H, 'c', 00H, 'h', 00H, 'u'
	DB	00H, 'n', 00H, 'k', 00H, 'N', 00H, 'a', 00H, 't', 00H, 'i', 00H
	DB	'v', 00H, 'e', 00H, 'L', 00H, 'i', 00H, 'm', 00H, 'i', 00H, 't'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1GI@PMDKFDFH@?$AAi?$AAn?$AAd?$AAe?$AAx?$AA?$DO?$AA?$DN?$AAu?$AAt?$AA?9?$AA?$DO?$AAc?$AAh?$AAu?$AAn?$AAk?$AAN?$AAa?$AAt?$AAi?$AAv?$AAe?$AAS?$AAt?$AAa?$AAr?$AAt?$AA?$CL?$AAu?$AAt?$AA?9?$AA?$DO@
CONST	SEGMENT
??_C@_1GI@PMDKFDFH@?$AAi?$AAn?$AAd?$AAe?$AAx?$AA?$DO?$AA?$DN?$AAu?$AAt?$AA?9?$AA?$DO?$AAc?$AAh?$AAu?$AAn?$AAk?$AAN?$AAa?$AAt?$AAi?$AAv?$AAe?$AAS?$AAt?$AAa?$AAr?$AAt?$AA?$CL?$AAu?$AAt?$AA?9?$AA?$DO@ DB 'i'
	DB	00H, 'n', 00H, 'd', 00H, 'e', 00H, 'x', 00H, '>', 00H, '=', 00H
	DB	'u', 00H, 't', 00H, '-', 00H, '>', 00H, 'c', 00H, 'h', 00H, 'u'
	DB	00H, 'n', 00H, 'k', 00H, 'N', 00H, 'a', 00H, 't', 00H, 'i', 00H
	DB	'v', 00H, 'e', 00H, 'S', 00H, 't', 00H, 'a', 00H, 'r', 00H, 't'
	DB	00H, '+', 00H, 'u', 00H, 't', 00H, '-', 00H, '>', 00H, 'n', 00H
	DB	'a', 00H, 't', 00H, 'i', 00H, 'v', 00H, 'e', 00H, 'I', 00H, 'n'
	DB	00H, 'd', 00H, 'e', 00H, 'x', 00H, 'i', 00H, 'n', 00H, 'g', 00H
	DB	'L', 00H, 'i', 00H, 'm', 00H, 'i', 00H, 't', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CM@LECLFDGF@?$AAi?$AAn?$AAd?$AAe?$AAx?$AA6?$AA4?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA0?$AAx?$AA7?$AAf?$AAf?$AAf?$AAf?$AAf?$AAf?$AAf?$AA?$AA@
CONST	SEGMENT
??_C@_1CM@LECLFDGF@?$AAi?$AAn?$AAd?$AAe?$AAx?$AA6?$AA4?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA0?$AAx?$AA7?$AAf?$AAf?$AAf?$AAf?$AAf?$AAf?$AAf?$AA?$AA@ DB 'i'
	DB	00H, 'n', 00H, 'd', 00H, 'e', 00H, 'x', 00H, '6', 00H, '4', 00H
	DB	' ', 00H, '<', 00H, '=', 00H, ' ', 00H, '0', 00H, 'x', 00H, '7'
	DB	00H, 'f', 00H, 'f', 00H, 'f', 00H, 'f', 00H, 'f', 00H, 'f', 00H
	DB	'f', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??utf8TextMapIndexToUTF16@@9@4JA@8d672338
_DATA	SEGMENT
?__LINE__Var@?1??utf8TextMapIndexToUTF16@@9@4JA@8d672338 DD 05ffH ; `utf8TextMapIndexToUTF16'::`2'::__LINE__Var
; Function compile flags: /Odtp /RTCsu /ZI
_DATA	ENDS
;	COMDAT _utf8TextMapIndexToUTF16
_TEXT	SEGMENT
tv167 = -256						; size = 8
tv188 = -252						; size = 4
tv185 = -248						; size = 8
tv164 = -248						; size = 8
_offset$ = -44						; size = 4
_mapIndex$ = -32					; size = 4
_u8b$ = -20						; size = 4
_index$ = -8						; size = 4
_ut$ = 8						; size = 4
_index64$ = 12						; size = 8
_utf8TextMapIndexToUTF16 PROC				; COMDAT
; Line 1535
	push	ebp
	mov	ebp, esp
	sub	esp, 256				; 00000100H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-256]
	mov	ecx, 64					; 00000040H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1536
	cmp	DWORD PTR _index64$[ebp+4], 0
	jl	SHORT $LN3@utf8TextMa@2
	jg	SHORT $LN8@utf8TextMa@2
	cmp	DWORD PTR _index64$[ebp], 2147483647	; 7fffffffH
	jbe	SHORT $LN3@utf8TextMa@2
$LN8@utf8TextMa@2:
	mov	eax, DWORD PTR ?__LINE__Var@?1??utf8TextMapIndexToUTF16@@9@4JA@8d672338
	add	eax, 1
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1FI@DOHBLNEC@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@
	push	OFFSET ??_C@_1CM@LECLFDGF@?$AAi?$AAn?$AAd?$AAe?$AAx?$AA6?$AA4?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA0?$AAx?$AA7?$AAf?$AAf?$AAf?$AAf?$AAf?$AAf?$AAf?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@utf8TextMa@2:
; Line 1537
	mov	eax, DWORD PTR _index64$[ebp]
	mov	DWORD PTR _index$[ebp], eax
; Line 1538
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	DWORD PTR _u8b$[ebp], ecx
; Line 1539
	mov	eax, DWORD PTR _index$[ebp]
	cdq
	mov	ecx, eax
	mov	esi, edx
	mov	edx, DWORD PTR _ut$[ebp]
	mov	eax, DWORD PTR [edx+28]
	cdq
	mov	edi, DWORD PTR _ut$[ebp]
	add	eax, DWORD PTR [edi+32]
	adc	edx, DWORD PTR [edi+36]
	mov	DWORD PTR tv164[ebp], ecx
	mov	DWORD PTR tv164[ebp+4], esi
	mov	DWORD PTR tv167[ebp], eax
	mov	DWORD PTR tv167[ebp+4], edx
	mov	eax, DWORD PTR tv164[ebp+4]
	cmp	eax, DWORD PTR tv167[ebp+4]
	jg	SHORT $LN4@utf8TextMa@2
	jl	SHORT $LN9@utf8TextMa@2
	mov	ecx, DWORD PTR tv164[ebp]
	cmp	ecx, DWORD PTR tv167[ebp]
	jae	SHORT $LN4@utf8TextMa@2
$LN9@utf8TextMa@2:
	mov	edx, DWORD PTR ?__LINE__Var@?1??utf8TextMapIndexToUTF16@@9@4JA@8d672338
	add	edx, 4
	mov	esi, esp
	push	edx
	push	OFFSET ??_C@_1FI@DOHBLNEC@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@
	push	OFFSET ??_C@_1GI@PMDKFDFH@?$AAi?$AAn?$AAd?$AAe?$AAx?$AA?$DO?$AA?$DN?$AAu?$AAt?$AA?9?$AA?$DO?$AAc?$AAh?$AAu?$AAn?$AAk?$AAN?$AAa?$AAt?$AAi?$AAv?$AAe?$AAS?$AAt?$AAa?$AAr?$AAt?$AA?$CL?$AAu?$AAt?$AA?9?$AA?$DO@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN4@utf8TextMa@2:
; Line 1540
	mov	eax, DWORD PTR _index$[ebp]
	cdq
	mov	ecx, DWORD PTR _ut$[ebp]
	mov	DWORD PTR tv185[ebp], eax
	mov	DWORD PTR tv185[ebp+4], edx
	mov	DWORD PTR tv188[ebp], ecx
	mov	edx, DWORD PTR tv188[ebp]
	mov	eax, DWORD PTR tv185[ebp+4]
	cmp	eax, DWORD PTR [edx+20]
	jl	SHORT $LN5@utf8TextMa@2
	jg	SHORT $LN10@utf8TextMa@2
	mov	ecx, DWORD PTR tv188[ebp]
	mov	edx, DWORD PTR tv185[ebp]
	cmp	edx, DWORD PTR [ecx+16]
	jbe	SHORT $LN5@utf8TextMa@2
$LN10@utf8TextMa@2:
	mov	eax, DWORD PTR ?__LINE__Var@?1??utf8TextMapIndexToUTF16@@9@4JA@8d672338
	add	eax, 5
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1FI@DOHBLNEC@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@
	push	OFFSET ??_C@_1DI@NEMBKDBO@?$AAi?$AAn?$AAd?$AAe?$AAx?$AA?$DM?$AA?$DN?$AAu?$AAt?$AA?9?$AA?$DO?$AAc?$AAh?$AAu?$AAn?$AAk?$AAN?$AAa?$AAt?$AAi?$AAv?$AAe?$AAL?$AAi?$AAm?$AAi?$AAt?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN5@utf8TextMa@2:
; Line 1541
	mov	eax, DWORD PTR _u8b$[ebp]
	mov	ecx, DWORD PTR _index$[ebp]
	sub	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _mapIndex$[ebp], ecx
; Line 1542
	mov	eax, DWORD PTR _u8b$[ebp]
	add	eax, DWORD PTR _mapIndex$[ebp]
	movzx	ecx, BYTE PTR [eax+132]
	mov	edx, DWORD PTR _u8b$[ebp]
	sub	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR _offset$[ebp], ecx
; Line 1543
	js	SHORT $LN6@utf8TextMa@2
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR _offset$[ebp]
	cmp	ecx, DWORD PTR [eax+44]
	jle	SHORT $LN7@utf8TextMa@2
$LN6@utf8TextMa@2:
	mov	edx, DWORD PTR ?__LINE__Var@?1??utf8TextMapIndexToUTF16@@9@4JA@8d672338
	add	edx, 8
	mov	esi, esp
	push	edx
	push	OFFSET ??_C@_1FI@DOHBLNEC@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@
	push	OFFSET ??_C@_1EK@OJNDMMAI@?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?$DO?$AA?$DN?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?$DM?$AA?$DN?$AAu?$AAt?$AA?9?$AA?$DO?$AAc?$AAh?$AAu?$AAn?$AAk?$AAL?$AAe@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN7@utf8TextMa@2:
; Line 1544
	mov	eax, DWORD PTR _offset$[ebp]
; Line 1545
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 256				; 00000100H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_utf8TextMapIndexToUTF16 ENDP
_TEXT	ENDS
EXTRN	_memcpy:PROC
EXTRN	_uprv_checkValidMemory:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _utf8TextClone
_TEXT	SEGMENT
_copyStr$37149 = -20					; size = 4
_len$37146 = -8						; size = 4
_dest$ = 8						; size = 4
_src$ = 12						; size = 4
_deep$ = 16						; size = 1
_status$ = 20						; size = 4
_utf8TextClone PROC					; COMDAT
; Line 1549
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1551
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _src$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dest$[ebp]
	push	edx
	call	_shallowTextClone
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _dest$[ebp], eax
; Line 1562
	movsx	eax, BYTE PTR _deep$[ebp]
	test	eax, eax
	je	$LN3@utf8TextCl
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_SUCCESS@@YACW4UErrorCode@@@Z		; U_SUCCESS
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN3@utf8TextCl
; Line 1563
	mov	eax, DWORD PTR _src$[ebp]
	push	eax
	call	_utext_nativeLength_56
	add	esp, 4
	mov	DWORD PTR _len$37146[ebp], eax
; Line 1564
	mov	eax, DWORD PTR _len$37146[ebp]
	add	eax, 1
	push	eax
	call	_uprv_malloc_56
	add	esp, 4
	mov	DWORD PTR _copyStr$37149[ebp], eax
; Line 1565
	cmp	DWORD PTR _copyStr$37149[ebp], 0
	jne	SHORT $LN2@utf8TextCl
; Line 1566
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 7
; Line 1567
	jmp	SHORT $LN3@utf8TextCl
$LN2@utf8TextCl:
; Line 1568
	push	1
	mov	eax, DWORD PTR _src$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	push	ecx
	call	_uprv_checkValidMemory
	add	esp, 8
	mov	edx, DWORD PTR _len$37146[ebp]
	add	edx, 1
	push	edx
	mov	eax, DWORD PTR _src$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	push	ecx
	mov	edx, DWORD PTR _copyStr$37149[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 1569
	mov	eax, DWORD PTR _dest$[ebp]
	mov	ecx, DWORD PTR _copyStr$37149[ebp]
	mov	DWORD PTR [eax+60], ecx
; Line 1570
	mov	eax, DWORD PTR _dest$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	or	ecx, 32					; 00000020H
	mov	edx, DWORD PTR _dest$[ebp]
	mov	DWORD PTR [edx+8], ecx
$LN3@utf8TextCl:
; Line 1573
	mov	eax, DWORD PTR _dest$[ebp]
; Line 1574
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_utf8TextClone ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _shallowTextClone
_TEXT	SEGMENT
_sizeToCopy$ = -44					; size = 4
_flags$ = -32						; size = 4
_destExtra$ = -20					; size = 4
_srcExtraSize$ = -8					; size = 4
_dest$ = 8						; size = 4
_src$ = 12						; size = 4
_status$ = 16						; size = 4
_shallowTextClone PROC					; COMDAT
; Line 769
	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 770
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN4@shallowTex
; Line 771
	xor	eax, eax
	jmp	$LN5@shallowTex
$LN4@shallowTex:
; Line 773
	mov	eax, DWORD PTR _src$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR _srcExtraSize$[ebp], ecx
; Line 778
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _srcExtraSize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dest$[ebp]
	push	edx
	call	_utext_setup_56
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _dest$[ebp], eax
; Line 779
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN3@shallowTex
; Line 780
	mov	eax, DWORD PTR _dest$[ebp]
	jmp	$LN5@shallowTex
$LN3@shallowTex:
; Line 789
	mov	eax, DWORD PTR _dest$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	DWORD PTR _destExtra$[ebp], ecx
; Line 790
	mov	eax, DWORD PTR _dest$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _flags$[ebp], ecx
; Line 797
	mov	eax, DWORD PTR _src$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _sizeToCopy$[ebp], ecx
; Line 798
	mov	eax, DWORD PTR _dest$[ebp]
	mov	ecx, DWORD PTR _sizeToCopy$[ebp]
	cmp	ecx, DWORD PTR [eax+12]
	jle	SHORT $LN2@shallowTex
; Line 799
	mov	eax, DWORD PTR _dest$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _sizeToCopy$[ebp], ecx
$LN2@shallowTex:
; Line 801
	push	1
	mov	eax, DWORD PTR _src$[ebp]
	push	eax
	call	_uprv_checkValidMemory
	add	esp, 8
	mov	ecx, DWORD PTR _sizeToCopy$[ebp]
	push	ecx
	mov	edx, DWORD PTR _src$[ebp]
	push	edx
	mov	eax, DWORD PTR _dest$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 802
	mov	eax, DWORD PTR _dest$[ebp]
	mov	ecx, DWORD PTR _destExtra$[ebp]
	mov	DWORD PTR [eax+56], ecx
; Line 803
	mov	eax, DWORD PTR _dest$[ebp]
	mov	ecx, DWORD PTR _flags$[ebp]
	mov	DWORD PTR [eax+4], ecx
; Line 804
	cmp	DWORD PTR _srcExtraSize$[ebp], 0
	jle	SHORT $LN1@shallowTex
; Line 805
	push	1
	mov	eax, DWORD PTR _src$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	push	ecx
	call	_uprv_checkValidMemory
	add	esp, 8
	mov	edx, DWORD PTR _srcExtraSize$[ebp]
	push	edx
	mov	eax, DWORD PTR _src$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	push	ecx
	mov	edx, DWORD PTR _dest$[ebp]
	mov	eax, DWORD PTR [edx+56]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@shallowTex:
; Line 812
	mov	eax, DWORD PTR _src$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dest$[ebp]
	add	ecx, 60					; 0000003cH
	push	ecx
	mov	edx, DWORD PTR _dest$[ebp]
	push	edx
	call	_adjustPointer
	add	esp, 12					; 0000000cH
; Line 813
	mov	eax, DWORD PTR _src$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dest$[ebp]
	add	ecx, 64					; 00000040H
	push	ecx
	mov	edx, DWORD PTR _dest$[ebp]
	push	edx
	call	_adjustPointer
	add	esp, 12					; 0000000cH
; Line 814
	mov	eax, DWORD PTR _src$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dest$[ebp]
	add	ecx, 68					; 00000044H
	push	ecx
	mov	edx, DWORD PTR _dest$[ebp]
	push	edx
	call	_adjustPointer
	add	esp, 12					; 0000000cH
; Line 815
	mov	eax, DWORD PTR _src$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dest$[ebp]
	add	ecx, 72					; 00000048H
	push	ecx
	mov	edx, DWORD PTR _dest$[ebp]
	push	edx
	call	_adjustPointer
	add	esp, 12					; 0000000cH
; Line 816
	mov	eax, DWORD PTR _src$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dest$[ebp]
	add	ecx, 48					; 00000030H
	push	ecx
	mov	edx, DWORD PTR _dest$[ebp]
	push	edx
	call	_adjustPointer
	add	esp, 12					; 0000000cH
; Line 821
	mov	eax, DWORD PTR _dest$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, -33				; ffffffdfH
	mov	edx, DWORD PTR _dest$[ebp]
	mov	DWORD PTR [edx+8], ecx
; Line 823
	mov	eax, DWORD PTR _dest$[ebp]
$LN5@shallowTex:
; Line 824
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_shallowTextClone ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _adjustPointer
_TEXT	SEGMENT
_sUText$ = -32						; size = 4
_dUText$ = -20						; size = 4
_dptr$ = -8						; size = 4
_dest$ = 8						; size = 4
_destPtr$ = 12						; size = 4
_src$ = 16						; size = 4
_adjustPointer PROC					; COMDAT
; Line 746
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 748
	mov	eax, DWORD PTR _destPtr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _dptr$[ebp], ecx
; Line 749
	mov	eax, DWORD PTR _dest$[ebp]
	mov	DWORD PTR _dUText$[ebp], eax
; Line 750
	mov	eax, DWORD PTR _src$[ebp]
	mov	DWORD PTR _sUText$[ebp], eax
; Line 752
	mov	eax, DWORD PTR _src$[ebp]
	mov	ecx, DWORD PTR _dptr$[ebp]
	cmp	ecx, DWORD PTR [eax+56]
	jb	SHORT $LN3@adjustPoin
	mov	eax, DWORD PTR _src$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	edx, DWORD PTR _src$[ebp]
	add	ecx, DWORD PTR [edx+24]
	cmp	DWORD PTR _dptr$[ebp], ecx
	jae	SHORT $LN3@adjustPoin
; Line 755
	mov	eax, DWORD PTR _src$[ebp]
	mov	ecx, DWORD PTR _dptr$[ebp]
	sub	ecx, DWORD PTR [eax+56]
	mov	edx, DWORD PTR _dest$[ebp]
	add	ecx, DWORD PTR [edx+56]
	mov	eax, DWORD PTR _destPtr$[ebp]
	mov	DWORD PTR [eax], ecx
	jmp	SHORT $LN4@adjustPoin
$LN3@adjustPoin:
; Line 756
	mov	eax, DWORD PTR _dptr$[ebp]
	cmp	eax, DWORD PTR _sUText$[ebp]
	jb	SHORT $LN4@adjustPoin
	mov	eax, DWORD PTR _src$[ebp]
	mov	ecx, DWORD PTR _sUText$[ebp]
	add	ecx, DWORD PTR [eax+12]
	cmp	DWORD PTR _dptr$[ebp], ecx
	jae	SHORT $LN4@adjustPoin
; Line 759
	mov	eax, DWORD PTR _dptr$[ebp]
	sub	eax, DWORD PTR _sUText$[ebp]
	add	eax, DWORD PTR _dUText$[ebp]
	mov	ecx, DWORD PTR _destPtr$[ebp]
	mov	DWORD PTR [ecx], eax
$LN4@adjustPoin:
; Line 761
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_adjustPointer ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _utf8TextClose
_TEXT	SEGMENT
_s$37159 = -8						; size = 4
_ut$ = 8						; size = 4
_utf8TextClose PROC					; COMDAT
; Line 1578
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1582
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, 32					; 00000020H
	je	SHORT $LN2@utf8TextCl@2
; Line 1583
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	mov	DWORD PTR _s$37159[ebp], ecx
; Line 1584
	mov	eax, DWORD PTR _s$37159[ebp]
	push	eax
	call	_uprv_free_56
	add	esp, 4
; Line 1585
	mov	eax, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [eax+60], 0
$LN2@utf8TextCl@2:
; Line 1587
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_utf8TextClose ENDP
_TEXT	ENDS
PUBLIC	_utext_openUTF8_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _utext_openUTF8_56
_TEXT	SEGMENT
_ut$ = 8						; size = 4
_s$ = 12						; size = 4
_length$ = 16						; size = 8
_status$ = 24						; size = 4
_utext_openUTF8_56 PROC					; COMDAT
; Line 1614
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1615
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN6@utext_open
; Line 1616
	xor	eax, eax
	jmp	$LN7@utext_open
$LN6@utext_open:
; Line 1618
	cmp	DWORD PTR _s$[ebp], 0
	jne	SHORT $LN5@utext_open
	mov	eax, DWORD PTR _length$[ebp]
	or	eax, DWORD PTR _length$[ebp+4]
	jne	SHORT $LN5@utext_open
; Line 1619
	mov	DWORD PTR _s$[ebp], OFFSET _gEmptyString
$LN5@utext_open:
; Line 1622
	cmp	DWORD PTR _s$[ebp], 0
	je	SHORT $LN3@utext_open
	cmp	DWORD PTR _length$[ebp+4], -1
	jl	SHORT $LN3@utext_open
	jg	SHORT $LN9@utext_open
	cmp	DWORD PTR _length$[ebp], -1
	jb	SHORT $LN3@utext_open
$LN9@utext_open:
	cmp	DWORD PTR _length$[ebp+4], 0
	jl	SHORT $LN4@utext_open
	jg	SHORT $LN3@utext_open
	cmp	DWORD PTR _length$[ebp], 2147483647	; 7fffffffH
	jbe	SHORT $LN4@utext_open
$LN3@utext_open:
; Line 1623
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 1
; Line 1624
	xor	eax, eax
	jmp	$LN7@utext_open
$LN4@utext_open:
; Line 1627
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	push	480					; 000001e0H
	mov	ecx, DWORD PTR _ut$[ebp]
	push	ecx
	call	_utext_setup_56
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _ut$[ebp], eax
; Line 1628
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN2@utext_open
; Line 1629
	mov	eax, DWORD PTR _ut$[ebp]
	jmp	SHORT $LN7@utext_open
$LN2@utext_open:
; Line 1632
	mov	eax, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [eax+52], OFFSET _utf8Funcs
; Line 1633
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+60], ecx
; Line 1634
	mov	eax, DWORD PTR _length$[ebp]
	mov	ecx, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [ecx+88], eax
; Line 1635
	mov	eax, DWORD PTR _length$[ebp]
	mov	ecx, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [ecx+92], eax
; Line 1636
	mov	eax, DWORD PTR _ut$[ebp]
	cmp	DWORD PTR [eax+92], 0
	jge	SHORT $LN1@utext_open
; Line 1637
	mov	eax, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [eax+92], 0
; Line 1638
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	or	ecx, 2
	mov	edx, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [edx+8], ecx
$LN1@utext_open:
; Line 1640
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR _ut$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	DWORD PTR [eax+64], edx
; Line 1641
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	add	ecx, 240				; 000000f0H
	mov	edx, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [edx+68], ecx
; Line 1642
	mov	eax, DWORD PTR _ut$[ebp]
$LN7@utext_open:
; Line 1644
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_utext_openUTF8_56 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _repTextClone
_TEXT	SEGMENT
_replSrc$37199 = -8					; size = 4
_dest$ = 8						; size = 4
_src$ = 12						; size = 4
_deep$ = 16						; size = 1
_status$ = 20						; size = 4
_repTextClone PROC					; COMDAT
; Line 1681
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1683
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _src$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dest$[ebp]
	push	edx
	call	_shallowTextClone
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _dest$[ebp], eax
; Line 1690
	movsx	eax, BYTE PTR _deep$[ebp]
	test	eax, eax
	je	SHORT $LN1@repTextClo
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_SUCCESS@@YACW4UErrorCode@@@Z		; U_SUCCESS
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN1@repTextClo
; Line 1691
	mov	eax, DWORD PTR _src$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	mov	DWORD PTR _replSrc$37199[ebp], ecx
; Line 1692
	mov	eax, DWORD PTR _replSrc$37199[ebp]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR _replSrc$37199[ebp]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _dest$[ebp]
	mov	DWORD PTR [ecx+60], eax
; Line 1693
	mov	eax, DWORD PTR _dest$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	or	ecx, 32					; 00000020H
	mov	edx, DWORD PTR _dest$[ebp]
	mov	DWORD PTR [edx+8], ecx
; Line 1696
	mov	eax, DWORD PTR _dest$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	or	ecx, 8
	mov	edx, DWORD PTR _dest$[ebp]
	mov	DWORD PTR [edx+8], ecx
$LN1@repTextClo:
; Line 1698
	mov	eax, DWORD PTR _dest$[ebp]
; Line 1699
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_repTextClone ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _repTextClose
_TEXT	SEGMENT
tv78 = -232						; size = 4
$T45011 = -224						; size = 4
$T45012 = -212						; size = 4
_rep$37208 = -8						; size = 4
_ut$ = 8						; size = 4
_repTextClose PROC					; COMDAT
; Line 1703
	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1707
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, 32					; 00000020H
	je	SHORT $LN2@repTextClo@2
; Line 1708
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	mov	DWORD PTR _rep$37208[ebp], ecx
; Line 1709
	mov	eax, DWORD PTR _rep$37208[ebp]
	mov	DWORD PTR $T45012[ebp], eax
	mov	ecx, DWORD PTR $T45012[ebp]
	mov	DWORD PTR $T45011[ebp], ecx
	cmp	DWORD PTR $T45011[ebp], 0
	je	SHORT $LN4@repTextClo@2
	mov	esi, esp
	push	1
	mov	edx, DWORD PTR $T45011[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR $T45011[ebp]
	mov	edx, DWORD PTR [eax]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv78[ebp], eax
	jmp	SHORT $LN5@repTextClo@2
$LN4@repTextClo@2:
	mov	DWORD PTR tv78[ebp], 0
$LN5@repTextClo@2:
; Line 1710
	mov	eax, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [eax+60], 0
$LN2@repTextClo@2:
; Line 1712
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_repTextClose ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _repTextLength
_TEXT	SEGMENT
_len$ = -20						; size = 4
_replSrc$ = -8						; size = 4
_ut$ = 8						; size = 4
_repTextLength PROC					; COMDAT
; Line 1716
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1717
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	mov	DWORD PTR _replSrc$[ebp], ecx
; Line 1718
	mov	ecx, DWORD PTR _replSrc$[ebp]
	call	?length@Replaceable@icu_56@@QBEHXZ	; icu_56::Replaceable::length
	mov	DWORD PTR _len$[ebp], eax
; Line 1719
	mov	eax, DWORD PTR _len$[ebp]
	cdq
; Line 1720
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_repTextLength ENDP
_TEXT	ENDS
PUBLIC	??_C@_1CE@DHOOMOBN@?$AAi?$AAn?$AAd?$AAe?$AAx?$AA?$DM?$AA?$DN?$AA0?$AAx?$AA7?$AAf?$AAf?$AAf?$AAf?$AAf?$AAf?$AAf?$AA?$AA@ ; `string'
PUBLIC	?__LINE__Var@?1??repTextAccess@@9@4JA@8d672338	; `repTextAccess'::`2'::__LINE__Var
PUBLIC	__$ArrayPad$
EXTRN	??0UnicodeString@icu_56@@QAE@PA_WHH@Z:PROC	; icu_56::UnicodeString::UnicodeString
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
;	COMDAT ??_C@_1CE@DHOOMOBN@?$AAi?$AAn?$AAd?$AAe?$AAx?$AA?$DM?$AA?$DN?$AA0?$AAx?$AA7?$AAf?$AAf?$AAf?$AAf?$AAf?$AAf?$AAf?$AA?$AA@
CONST	SEGMENT
??_C@_1CE@DHOOMOBN@?$AAi?$AAn?$AAd?$AAe?$AAx?$AA?$DM?$AA?$DN?$AA0?$AAx?$AA7?$AAf?$AAf?$AAf?$AAf?$AAf?$AAf?$AAf?$AA?$AA@ DB 'i'
	DB	00H, 'n', 00H, 'd', 00H, 'e', 00H, 'x', 00H, '<', 00H, '=', 00H
	DB	'0', 00H, 'x', 00H, '7', 00H, 'f', 00H, 'f', 00H, 'f', 00H, 'f'
	DB	00H, 'f', 00H, 'f', 00H, 'f', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??repTextAccess@@9@4JA@8d672338
_DATA	SEGMENT
?__LINE__Var@?1??repTextAccess@@9@4JA@8d672338 DD 06bcH	; `repTextAccess'::`2'::__LINE__Var
; Function compile flags: /Odtp /RTCsu /ZI
_DATA	ENDS
;	COMDAT _repTextAccess
_TEXT	SEGMENT
tv548 = -340						; size = 8
tv489 = -340						; size = 8
tv435 = -340						; size = 4
tv418 = -340						; size = 4
tv374 = -340						; size = 8
tv344 = -340						; size = 8
tv319 = -340						; size = 4
tv302 = -340						; size = 4
tv432 = -336						; size = 8
tv415 = -336						; size = 8
tv316 = -336						; size = 8
tv299 = -336						; size = 8
tv577 = -332						; size = 4
tv547 = -332						; size = 4
tv488 = -332						; size = 4
tv465 = -332						; size = 4
tv447 = -332						; size = 4
tv401 = -332						; size = 4
tv373 = -332						; size = 4
tv343 = -332						; size = 4
$T45021 = -321						; size = 1
_buffer$ = -120						; size = 64
_ex$ = -48						; size = 4
_index32$ = -36						; size = 4
_length$ = -24						; size = 4
_rep$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_ut$ = 8						; size = 4
_index$ = 12						; size = 8
_forward$ = 20						; size = 1
_repTextAccess PROC					; COMDAT
; Line 1724
	push	ebp
	mov	ebp, esp
	sub	esp, 340				; 00000154H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-340]
	mov	ecx, 85					; 00000055H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 1725
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	mov	DWORD PTR _rep$[ebp], ecx
; Line 1726
	mov	ecx, DWORD PTR _rep$[ebp]
	call	?length@Replaceable@icu_56@@QBEHXZ	; icu_56::Replaceable::length
	mov	DWORD PTR _length$[ebp], eax
; Line 1729
	mov	eax, DWORD PTR _length$[ebp]
	cdq
	push	edx
	push	eax
	lea	eax, DWORD PTR _index$[ebp]
	push	eax
	call	?pinIndex@@YAHAA_J_J@Z			; pinIndex
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _index32$[ebp], eax
; Line 1730
	cmp	DWORD PTR _index$[ebp+4], 0
	jl	SHORT $LN17@repTextAcc
	jg	SHORT $LN18@repTextAcc
	cmp	DWORD PTR _index$[ebp], 2147483647	; 7fffffffH
	jbe	SHORT $LN17@repTextAcc
$LN18@repTextAcc:
	mov	eax, DWORD PTR ?__LINE__Var@?1??repTextAccess@@9@4JA@8d672338
	add	eax, 6
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1FI@DOHBLNEC@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@
	push	OFFSET ??_C@_1CE@DHOOMOBN@?$AAi?$AAn?$AAd?$AAe?$AAx?$AA?$DM?$AA?$DN?$AA0?$AAx?$AA7?$AAf?$AAf?$AAf?$AAf?$AAf?$AAf?$AAf?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN17@repTextAcc:
; Line 1741
	movsx	eax, BYTE PTR _forward$[ebp]
	test	eax, eax
	je	$LN14@repTextAcc
; Line 1743
	mov	eax, DWORD PTR _index32$[ebp]
	cdq
	mov	ecx, DWORD PTR _ut$[ebp]
	mov	DWORD PTR tv299[ebp], eax
	mov	DWORD PTR tv299[ebp+4], edx
	mov	DWORD PTR tv302[ebp], ecx
	mov	edx, DWORD PTR tv302[ebp]
	mov	eax, DWORD PTR tv299[ebp+4]
	cmp	eax, DWORD PTR [edx+36]
	jl	SHORT $LN13@repTextAcc
	jg	SHORT $LN19@repTextAcc
	mov	ecx, DWORD PTR tv302[ebp]
	mov	edx, DWORD PTR tv299[ebp]
	cmp	edx, DWORD PTR [ecx+32]
	jb	SHORT $LN13@repTextAcc
$LN19@repTextAcc:
	mov	eax, DWORD PTR _index32$[ebp]
	cdq
	mov	ecx, DWORD PTR _ut$[ebp]
	mov	DWORD PTR tv316[ebp], eax
	mov	DWORD PTR tv316[ebp+4], edx
	mov	DWORD PTR tv319[ebp], ecx
	mov	edx, DWORD PTR tv319[ebp]
	mov	eax, DWORD PTR tv316[ebp+4]
	cmp	eax, DWORD PTR [edx+20]
	jg	SHORT $LN13@repTextAcc
	jl	SHORT $LN20@repTextAcc
	mov	ecx, DWORD PTR tv319[ebp]
	mov	edx, DWORD PTR tv316[ebp]
	cmp	edx, DWORD PTR [ecx+16]
	jae	SHORT $LN13@repTextAcc
$LN20@repTextAcc:
; Line 1745
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR _index$[ebp]
	sub	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR _index$[ebp+4]
	sbb	edx, DWORD PTR [eax+36]
	mov	eax, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [eax+40], ecx
; Line 1746
	mov	al, 1
	jmp	$LN15@repTextAcc
$LN13@repTextAcc:
; Line 1748
	mov	eax, DWORD PTR _index32$[ebp]
	cmp	eax, DWORD PTR _length$[ebp]
	jl	SHORT $LN12@repTextAcc
	mov	eax, DWORD PTR _length$[ebp]
	cdq
	mov	ecx, DWORD PTR _ut$[ebp]
	mov	DWORD PTR tv343[ebp], ecx
	mov	DWORD PTR tv344[ebp], eax
	mov	DWORD PTR tv344[ebp+4], edx
	mov	edx, DWORD PTR tv343[ebp]
	mov	eax, DWORD PTR [edx+16]
	cmp	eax, DWORD PTR tv344[ebp]
	jne	SHORT $LN12@repTextAcc
	mov	ecx, DWORD PTR tv343[ebp]
	mov	edx, DWORD PTR [ecx+20]
	cmp	edx, DWORD PTR tv344[ebp+4]
	jne	SHORT $LN12@repTextAcc
; Line 1751
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR _length$[ebp]
	sub	edx, ecx
	mov	eax, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [eax+40], edx
; Line 1752
	xor	al, al
	jmp	$LN15@repTextAcc
$LN12@repTextAcc:
; Line 1755
	mov	eax, DWORD PTR _index$[ebp]
	add	eax, 10					; 0000000aH
	mov	ecx, DWORD PTR _index$[ebp+4]
	adc	ecx, 0
	sub	eax, 1
	sbb	ecx, 0
	mov	edx, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [edx+16], eax
	mov	DWORD PTR [edx+20], ecx
; Line 1760
	mov	eax, DWORD PTR _length$[ebp]
	cdq
	mov	ecx, DWORD PTR _ut$[ebp]
	mov	DWORD PTR tv373[ebp], ecx
	mov	DWORD PTR tv374[ebp], eax
	mov	DWORD PTR tv374[ebp+4], edx
	mov	edx, DWORD PTR tv373[ebp]
	mov	eax, DWORD PTR [edx+20]
	cmp	eax, DWORD PTR tv374[ebp+4]
	jl	SHORT $LN11@repTextAcc
	jg	SHORT $LN21@repTextAcc
	mov	ecx, DWORD PTR tv373[ebp]
	mov	edx, DWORD PTR [ecx+16]
	cmp	edx, DWORD PTR tv374[ebp]
	jbe	SHORT $LN11@repTextAcc
$LN21@repTextAcc:
; Line 1761
	mov	eax, DWORD PTR _length$[ebp]
	cdq
	mov	ecx, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [ecx+16], eax
	mov	DWORD PTR [ecx+20], edx
$LN11@repTextAcc:
; Line 1764
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	sub	ecx, 10					; 0000000aH
	mov	edx, DWORD PTR [eax+20]
	sbb	edx, 0
	mov	eax, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [eax+32], ecx
	mov	DWORD PTR [eax+36], edx
; Line 1765
	mov	eax, DWORD PTR _ut$[ebp]
	mov	DWORD PTR tv401[ebp], eax
	mov	ecx, DWORD PTR tv401[ebp]
	cmp	DWORD PTR [ecx+36], 0
	jg	SHORT $LN10@repTextAcc
	jl	SHORT $LN22@repTextAcc
	mov	edx, DWORD PTR tv401[ebp]
	cmp	DWORD PTR [edx+32], 0
	jae	SHORT $LN10@repTextAcc
$LN22@repTextAcc:
; Line 1766
	mov	eax, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [eax+32], 0
	mov	DWORD PTR [eax+36], 0
$LN10@repTextAcc:
; Line 1768
	jmp	$LN9@repTextAcc
$LN14@repTextAcc:
; Line 1770
	mov	eax, DWORD PTR _index32$[ebp]
	cdq
	mov	ecx, DWORD PTR _ut$[ebp]
	mov	DWORD PTR tv415[ebp], eax
	mov	DWORD PTR tv415[ebp+4], edx
	mov	DWORD PTR tv418[ebp], ecx
	mov	edx, DWORD PTR tv418[ebp]
	mov	eax, DWORD PTR tv415[ebp+4]
	cmp	eax, DWORD PTR [edx+36]
	jl	SHORT $LN8@repTextAcc
	jg	SHORT $LN23@repTextAcc
	mov	ecx, DWORD PTR tv418[ebp]
	mov	edx, DWORD PTR tv415[ebp]
	cmp	edx, DWORD PTR [ecx+32]
	jbe	SHORT $LN8@repTextAcc
$LN23@repTextAcc:
	mov	eax, DWORD PTR _index32$[ebp]
	cdq
	mov	ecx, DWORD PTR _ut$[ebp]
	mov	DWORD PTR tv432[ebp], eax
	mov	DWORD PTR tv432[ebp+4], edx
	mov	DWORD PTR tv435[ebp], ecx
	mov	edx, DWORD PTR tv435[ebp]
	mov	eax, DWORD PTR tv432[ebp+4]
	cmp	eax, DWORD PTR [edx+20]
	jg	SHORT $LN8@repTextAcc
	jl	SHORT $LN24@repTextAcc
	mov	ecx, DWORD PTR tv435[ebp]
	mov	edx, DWORD PTR tv432[ebp]
	cmp	edx, DWORD PTR [ecx+16]
	ja	SHORT $LN8@repTextAcc
$LN24@repTextAcc:
; Line 1772
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR _index32$[ebp]
	sub	edx, ecx
	mov	eax, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [eax+40], edx
; Line 1773
	mov	al, 1
	jmp	$LN15@repTextAcc
$LN8@repTextAcc:
; Line 1775
	cmp	DWORD PTR _index32$[ebp], 0
	jne	SHORT $LN7@repTextAcc
	mov	eax, DWORD PTR _ut$[ebp]
	mov	DWORD PTR tv447[ebp], eax
	mov	ecx, DWORD PTR tv447[ebp]
	mov	edx, DWORD PTR tv447[ebp]
	mov	eax, DWORD PTR [ecx+32]
	or	eax, DWORD PTR [edx+36]
	jne	SHORT $LN7@repTextAcc
; Line 1778
	mov	eax, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [eax+40], 0
; Line 1779
	xor	al, al
	jmp	$LN15@repTextAcc
$LN7@repTextAcc:
; Line 1788
	mov	eax, DWORD PTR _index32$[ebp]
	sub	eax, 9
	cdq
	mov	ecx, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [ecx+32], eax
	mov	DWORD PTR [ecx+36], edx
; Line 1789
	mov	eax, DWORD PTR _ut$[ebp]
	mov	DWORD PTR tv465[ebp], eax
	mov	ecx, DWORD PTR tv465[ebp]
	cmp	DWORD PTR [ecx+36], 0
	jg	SHORT $LN6@repTextAcc
	jl	SHORT $LN25@repTextAcc
	mov	edx, DWORD PTR tv465[ebp]
	cmp	DWORD PTR [edx+32], 0
	jae	SHORT $LN6@repTextAcc
$LN25@repTextAcc:
; Line 1790
	mov	eax, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [eax+32], 0
	mov	DWORD PTR [eax+36], 0
$LN6@repTextAcc:
; Line 1793
	mov	eax, DWORD PTR _index32$[ebp]
	add	eax, 1
	cdq
	mov	ecx, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [ecx+16], eax
	mov	DWORD PTR [ecx+20], edx
; Line 1794
	mov	eax, DWORD PTR _length$[ebp]
	cdq
	mov	ecx, DWORD PTR _ut$[ebp]
	mov	DWORD PTR tv488[ebp], ecx
	mov	DWORD PTR tv489[ebp], eax
	mov	DWORD PTR tv489[ebp+4], edx
	mov	edx, DWORD PTR tv488[ebp]
	mov	eax, DWORD PTR [edx+20]
	cmp	eax, DWORD PTR tv489[ebp+4]
	jl	SHORT $LN9@repTextAcc
	jg	SHORT $LN26@repTextAcc
	mov	ecx, DWORD PTR tv488[ebp]
	mov	edx, DWORD PTR [ecx+16]
	cmp	edx, DWORD PTR tv489[ebp]
	jbe	SHORT $LN9@repTextAcc
$LN26@repTextAcc:
; Line 1795
	mov	eax, DWORD PTR _length$[ebp]
	cdq
	mov	ecx, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [ecx+16], eax
	mov	DWORD PTR [ecx+20], edx
$LN9@repTextAcc:
; Line 1800
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	DWORD PTR _ex$[ebp], ecx
; Line 1802
	push	10					; 0000000aH
	push	0
	mov	eax, DWORD PTR _ex$[ebp]
	push	eax
	lea	ecx, DWORD PTR _buffer$[ebp]
	call	??0UnicodeString@icu_56@@QAE@PA_WHH@Z	; icu_56::UnicodeString::UnicodeString
; Line 1803
	mov	esi, esp
	lea	eax, DWORD PTR _buffer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ut$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR _rep$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _rep$[ebp]
	mov	edx, DWORD PTR [eax+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1805
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR _ex$[ebp]
	mov	DWORD PTR [eax+48], ecx
; Line 1806
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR _ut$[ebp]
	mov	edx, DWORD PTR [eax+16]
	sub	edx, DWORD PTR [ecx+32]
	mov	eax, DWORD PTR [eax+20]
	sbb	eax, DWORD PTR [ecx+36]
	mov	ecx, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [ecx+44], edx
; Line 1807
	mov	eax, DWORD PTR _index32$[ebp]
	cdq
	mov	ecx, DWORD PTR _ut$[ebp]
	sub	eax, DWORD PTR [ecx+32]
	sbb	edx, DWORD PTR [ecx+36]
	mov	edx, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [edx+40], eax
; Line 1812
	mov	eax, DWORD PTR _length$[ebp]
	cdq
	mov	ecx, DWORD PTR _ut$[ebp]
	mov	DWORD PTR tv547[ebp], ecx
	mov	DWORD PTR tv548[ebp], eax
	mov	DWORD PTR tv548[ebp+4], edx
	mov	edx, DWORD PTR tv547[ebp]
	mov	eax, DWORD PTR [edx+20]
	cmp	eax, DWORD PTR tv548[ebp+4]
	jg	SHORT $LN4@repTextAcc
	jl	SHORT $LN27@repTextAcc
	mov	ecx, DWORD PTR tv547[ebp]
	mov	edx, DWORD PTR [ecx+16]
	cmp	edx, DWORD PTR tv548[ebp]
	jae	SHORT $LN4@repTextAcc
$LN27@repTextAcc:
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	edx, DWORD PTR _ex$[ebp]
	movzx	eax, WORD PTR [edx+ecx*2-2]
	and	eax, -1024				; fffffc00H
	cmp	eax, 55296				; 0000d800H
	jne	SHORT $LN4@repTextAcc
; Line 1813
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	sub	ecx, 1
	mov	edx, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [edx+44], ecx
; Line 1814
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	sub	ecx, 1
	mov	edx, DWORD PTR [eax+20]
	sbb	edx, 0
	mov	eax, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [eax+16], ecx
	mov	DWORD PTR [eax+20], edx
; Line 1815
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR _ut$[ebp]
	mov	edx, DWORD PTR [eax+40]
	cmp	edx, DWORD PTR [ecx+44]
	jle	SHORT $LN4@repTextAcc
; Line 1816
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR _ut$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR [eax+40], edx
$LN4@repTextAcc:
; Line 1822
	mov	eax, DWORD PTR _ut$[ebp]
	mov	DWORD PTR tv577[ebp], eax
	mov	ecx, DWORD PTR tv577[ebp]
	cmp	DWORD PTR [ecx+36], 0
	jl	SHORT $LN2@repTextAcc
	jg	SHORT $LN28@repTextAcc
	mov	edx, DWORD PTR tv577[ebp]
	cmp	DWORD PTR [edx+32], 0
	jbe	SHORT $LN2@repTextAcc
$LN28@repTextAcc:
	mov	eax, DWORD PTR _ex$[ebp]
	movzx	ecx, WORD PTR [eax]
	and	ecx, -1024				; fffffc00H
	cmp	ecx, 56320				; 0000dc00H
	jne	SHORT $LN2@repTextAcc
; Line 1823
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	add	ecx, 2
	mov	edx, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [edx+48], ecx
; Line 1824
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	add	ecx, 1
	mov	edx, DWORD PTR [eax+36]
	adc	edx, 0
	mov	eax, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [eax+32], ecx
	mov	DWORD PTR [eax+36], edx
; Line 1825
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	sub	ecx, 1
	mov	edx, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [edx+44], ecx
; Line 1826
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	sub	ecx, 1
	mov	edx, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [edx+40], ecx
$LN2@repTextAcc:
; Line 1830
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR _ut$[ebp]
	mov	eax, DWORD PTR [edx+48]
	movzx	ecx, WORD PTR [eax+ecx*2]
	and	ecx, -1024				; fffffc00H
	cmp	ecx, 56320				; 0000dc00H
	jne	SHORT $LN1@repTextAcc
	mov	eax, DWORD PTR _ut$[ebp]
	cmp	DWORD PTR [eax+40], 0
	jle	SHORT $LN1@repTextAcc
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR _ut$[ebp]
	mov	eax, DWORD PTR [edx+48]
	movzx	ecx, WORD PTR [eax+ecx*2-2]
	and	ecx, -1024				; fffffc00H
	cmp	ecx, 55296				; 0000d800H
	jne	SHORT $LN1@repTextAcc
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	sub	ecx, 1
	mov	edx, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [edx+40], ecx
$LN1@repTextAcc:
; Line 1833
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR _ut$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR [eax+28], edx
; Line 1835
	mov	BYTE PTR $T45021[ebp], 1
	lea	ecx, DWORD PTR _buffer$[ebp]
	call	??1UnicodeString@icu_56@@UAE@XZ		; icu_56::UnicodeString::~UnicodeString
	mov	al, BYTE PTR $T45021[ebp]
$LN15@repTextAcc:
; Line 1836
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN31@repTextAcc
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 340				; 00000154H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN31@repTextAcc:
	DD	1
	DD	$LN30@repTextAcc
$LN30@repTextAcc:
	DD	-120					; ffffff88H
	DD	64					; 00000040H
	DD	$LN29@repTextAcc
$LN29@repTextAcc:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
_repTextAccess ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _repTextExtract
_TEXT	SEGMENT
$T45041 = -324						; size = 4
_buffer$ = -120						; size = 64
_limit32$ = -48						; size = 4
_start32$ = -36						; size = 4
_length$ = -24						; size = 4
_rep$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_ut$ = 8						; size = 4
_start$ = 12						; size = 8
_limit$ = 20						; size = 8
_dest$ = 28						; size = 4
_destCapacity$ = 32					; size = 4
_status$ = 36						; size = 4
_repTextExtract PROC					; COMDAT
; Line 1844
	push	ebp
	mov	ebp, esp
	sub	esp, 328				; 00000148H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-328]
	mov	ecx, 82					; 00000052H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 1845
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	mov	DWORD PTR _rep$[ebp], ecx
; Line 1846
	mov	ecx, DWORD PTR _rep$[ebp]
	call	?length@Replaceable@icu_56@@QBEHXZ	; icu_56::Replaceable::length
	mov	DWORD PTR _length$[ebp], eax
; Line 1848
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN7@repTextExt
; Line 1849
	xor	eax, eax
	jmp	$LN8@repTextExt
$LN7@repTextExt:
; Line 1851
	cmp	DWORD PTR _destCapacity$[ebp], 0
	jl	SHORT $LN5@repTextExt
	cmp	DWORD PTR _dest$[ebp], 0
	jne	SHORT $LN6@repTextExt
	cmp	DWORD PTR _destCapacity$[ebp], 0
	jle	SHORT $LN6@repTextExt
$LN5@repTextExt:
; Line 1852
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 1
$LN6@repTextExt:
; Line 1854
	mov	eax, DWORD PTR _start$[ebp+4]
	cmp	eax, DWORD PTR _limit$[ebp+4]
	jl	SHORT $LN4@repTextExt
	jg	SHORT $LN10@repTextExt
	mov	ecx, DWORD PTR _start$[ebp]
	cmp	ecx, DWORD PTR _limit$[ebp]
	jbe	SHORT $LN4@repTextExt
$LN10@repTextExt:
; Line 1855
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 8
; Line 1856
	xor	eax, eax
	jmp	$LN8@repTextExt
$LN4@repTextExt:
; Line 1859
	mov	eax, DWORD PTR _length$[ebp]
	cdq
	push	edx
	push	eax
	lea	eax, DWORD PTR _start$[ebp]
	push	eax
	call	?pinIndex@@YAHAA_J_J@Z			; pinIndex
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _start32$[ebp], eax
; Line 1860
	mov	eax, DWORD PTR _length$[ebp]
	cdq
	push	edx
	push	eax
	lea	eax, DWORD PTR _limit$[ebp]
	push	eax
	call	?pinIndex@@YAHAA_J_J@Z			; pinIndex
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _limit32$[ebp], eax
; Line 1864
	mov	eax, DWORD PTR _start32$[ebp]
	cmp	eax, DWORD PTR _length$[ebp]
	jge	SHORT $LN3@repTextExt
	mov	eax, DWORD PTR _start32$[ebp]
	push	eax
	mov	ecx, DWORD PTR _rep$[ebp]
	call	?charAt@Replaceable@icu_56@@QBE_WH@Z	; icu_56::Replaceable::charAt
	movzx	ecx, ax
	and	ecx, -1024				; fffffc00H
	cmp	ecx, 56320				; 0000dc00H
	jne	SHORT $LN3@repTextExt
	mov	eax, DWORD PTR _start32$[ebp]
	push	eax
	mov	ecx, DWORD PTR _rep$[ebp]
	call	?char32At@Replaceable@icu_56@@QBEHH@Z	; icu_56::Replaceable::char32At
	sub	eax, 65536				; 00010000H
	cmp	eax, 1048575				; 000fffffH
	ja	SHORT $LN3@repTextExt
; Line 1865
	mov	eax, DWORD PTR _start32$[ebp]
	sub	eax, 1
	mov	DWORD PTR _start32$[ebp], eax
$LN3@repTextExt:
; Line 1868
	mov	eax, DWORD PTR _limit32$[ebp]
	cmp	eax, DWORD PTR _length$[ebp]
	jge	SHORT $LN2@repTextExt
	mov	eax, DWORD PTR _limit32$[ebp]
	push	eax
	mov	ecx, DWORD PTR _rep$[ebp]
	call	?charAt@Replaceable@icu_56@@QBE_WH@Z	; icu_56::Replaceable::charAt
	movzx	ecx, ax
	and	ecx, -1024				; fffffc00H
	cmp	ecx, 56320				; 0000dc00H
	jne	SHORT $LN2@repTextExt
	mov	eax, DWORD PTR _limit32$[ebp]
	push	eax
	mov	ecx, DWORD PTR _rep$[ebp]
	call	?char32At@Replaceable@icu_56@@QBEHH@Z	; icu_56::Replaceable::char32At
	sub	eax, 65536				; 00010000H
	cmp	eax, 1048575				; 000fffffH
	ja	SHORT $LN2@repTextExt
; Line 1869
	mov	eax, DWORD PTR _limit32$[ebp]
	sub	eax, 1
	mov	DWORD PTR _limit32$[ebp], eax
$LN2@repTextExt:
; Line 1872
	mov	eax, DWORD PTR _limit32$[ebp]
	sub	eax, DWORD PTR _start32$[ebp]
	mov	DWORD PTR _length$[ebp], eax
; Line 1873
	mov	eax, DWORD PTR _length$[ebp]
	cmp	eax, DWORD PTR _destCapacity$[ebp]
	jle	SHORT $LN1@repTextExt
; Line 1874
	mov	eax, DWORD PTR _start32$[ebp]
	add	eax, DWORD PTR _destCapacity$[ebp]
	mov	DWORD PTR _limit32$[ebp], eax
$LN1@repTextExt:
; Line 1876
	mov	eax, DWORD PTR _destCapacity$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _dest$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _buffer$[ebp]
	call	??0UnicodeString@icu_56@@QAE@PA_WHH@Z	; icu_56::UnicodeString::UnicodeString
; Line 1877
	mov	esi, esp
	lea	eax, DWORD PTR _buffer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _limit32$[ebp]
	push	ecx
	mov	edx, DWORD PTR _start32$[ebp]
	push	edx
	mov	eax, DWORD PTR _rep$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _rep$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1878
	push	1
	mov	eax, DWORD PTR _limit32$[ebp]
	cdq
	push	edx
	push	eax
	mov	eax, DWORD PTR _ut$[ebp]
	push	eax
	call	_repTextAccess
	add	esp, 16					; 00000010H
; Line 1880
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _length$[ebp]
	push	ecx
	mov	edx, DWORD PTR _destCapacity$[ebp]
	push	edx
	mov	eax, DWORD PTR _dest$[ebp]
	push	eax
	call	_u_terminateUChars_56
	add	esp, 16					; 00000010H
	mov	DWORD PTR $T45041[ebp], eax
	lea	ecx, DWORD PTR _buffer$[ebp]
	call	??1UnicodeString@icu_56@@UAE@XZ		; icu_56::UnicodeString::~UnicodeString
	mov	eax, DWORD PTR $T45041[ebp]
$LN8@repTextExt:
; Line 1881
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@repTextExt
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 328				; 00000148H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN13@repTextExt:
	DD	1
	DD	$LN12@repTextExt
$LN12@repTextExt:
	DD	-120					; ffffff88H
	DD	64					; 00000040H
	DD	$LN11@repTextExt
$LN11@repTextExt:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
_repTextExtract ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	??0UnicodeString@icu_56@@QAE@CPB_WH@Z:PROC	; icu_56::UnicodeString::UnicodeString
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _repTextReplace
_TEXT	SEGMENT
tv239 = -376						; size = 8
tv238 = -368						; size = 4
$T45049 = -360						; size = 4
_newIndexPos$ = -156					; size = 4
_lengthDelta$ = -144					; size = 4
_newLength$ = -132					; size = 4
_replStr$ = -120					; size = 64
_limit32$ = -48						; size = 4
_start32$ = -36						; size = 4
_oldLength$ = -24					; size = 4
_rep$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_ut$ = 8						; size = 4
_start$ = 12						; size = 8
_limit$ = 20						; size = 8
_src$ = 28						; size = 4
_length$ = 32						; size = 4
_status$ = 36						; size = 4
_repTextReplace PROC					; COMDAT
; Line 1887
	push	ebp
	mov	ebp, esp
	sub	esp, 376				; 00000178H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-376]
	mov	ecx, 94					; 0000005eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 1888
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	mov	DWORD PTR _rep$[ebp], ecx
; Line 1891
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN6@repTextRep
; Line 1892
	xor	eax, eax
	jmp	$LN7@repTextRep
$LN6@repTextRep:
; Line 1894
	cmp	DWORD PTR _src$[ebp], 0
	jne	SHORT $LN5@repTextRep
	cmp	DWORD PTR _length$[ebp], 0
	je	SHORT $LN5@repTextRep
; Line 1895
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 1
; Line 1896
	xor	eax, eax
	jmp	$LN7@repTextRep
$LN5@repTextRep:
; Line 1898
	mov	ecx, DWORD PTR _rep$[ebp]
	call	?length@Replaceable@icu_56@@QBEHXZ	; icu_56::Replaceable::length
	mov	DWORD PTR _oldLength$[ebp], eax
; Line 1899
	mov	eax, DWORD PTR _start$[ebp+4]
	cmp	eax, DWORD PTR _limit$[ebp+4]
	jl	SHORT $LN4@repTextRep
	jg	SHORT $LN9@repTextRep
	mov	ecx, DWORD PTR _start$[ebp]
	cmp	ecx, DWORD PTR _limit$[ebp]
	jbe	SHORT $LN4@repTextRep
$LN9@repTextRep:
; Line 1900
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 8
; Line 1901
	xor	eax, eax
	jmp	$LN7@repTextRep
$LN4@repTextRep:
; Line 1904
	mov	eax, DWORD PTR _oldLength$[ebp]
	cdq
	push	edx
	push	eax
	lea	eax, DWORD PTR _start$[ebp]
	push	eax
	call	?pinIndex@@YAHAA_J_J@Z			; pinIndex
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _start32$[ebp], eax
; Line 1905
	mov	eax, DWORD PTR _oldLength$[ebp]
	cdq
	push	edx
	push	eax
	lea	eax, DWORD PTR _limit$[ebp]
	push	eax
	call	?pinIndex@@YAHAA_J_J@Z			; pinIndex
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _limit32$[ebp], eax
; Line 1909
	mov	eax, DWORD PTR _start32$[ebp]
	cmp	eax, DWORD PTR _oldLength$[ebp]
	jge	SHORT $LN3@repTextRep
	mov	eax, DWORD PTR _start32$[ebp]
	push	eax
	mov	ecx, DWORD PTR _rep$[ebp]
	call	?charAt@Replaceable@icu_56@@QBE_WH@Z	; icu_56::Replaceable::charAt
	movzx	ecx, ax
	and	ecx, -1024				; fffffc00H
	cmp	ecx, 56320				; 0000dc00H
	jne	SHORT $LN3@repTextRep
	cmp	DWORD PTR _start32$[ebp], 0
	jle	SHORT $LN3@repTextRep
	mov	eax, DWORD PTR _start32$[ebp]
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _rep$[ebp]
	call	?charAt@Replaceable@icu_56@@QBE_WH@Z	; icu_56::Replaceable::charAt
	movzx	ecx, ax
	and	ecx, -1024				; fffffc00H
	cmp	ecx, 55296				; 0000d800H
	jne	SHORT $LN3@repTextRep
; Line 1911
	mov	eax, DWORD PTR _start32$[ebp]
	sub	eax, 1
	mov	DWORD PTR _start32$[ebp], eax
$LN3@repTextRep:
; Line 1914
	mov	eax, DWORD PTR _limit32$[ebp]
	cmp	eax, DWORD PTR _oldLength$[ebp]
	jge	SHORT $LN2@repTextRep
	mov	eax, DWORD PTR _limit32$[ebp]
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _rep$[ebp]
	call	?charAt@Replaceable@icu_56@@QBE_WH@Z	; icu_56::Replaceable::charAt
	movzx	ecx, ax
	and	ecx, -1024				; fffffc00H
	cmp	ecx, 55296				; 0000d800H
	jne	SHORT $LN2@repTextRep
	mov	eax, DWORD PTR _limit32$[ebp]
	push	eax
	mov	ecx, DWORD PTR _rep$[ebp]
	call	?charAt@Replaceable@icu_56@@QBE_WH@Z	; icu_56::Replaceable::charAt
	movzx	ecx, ax
	and	ecx, -1024				; fffffc00H
	cmp	ecx, 56320				; 0000dc00H
	jne	SHORT $LN2@repTextRep
; Line 1916
	mov	eax, DWORD PTR _limit32$[ebp]
	add	eax, 1
	mov	DWORD PTR _limit32$[ebp], eax
$LN2@repTextRep:
; Line 1920
	mov	eax, DWORD PTR _length$[ebp]
	push	eax
	mov	ecx, DWORD PTR _src$[ebp]
	push	ecx
	cmp	DWORD PTR _length$[ebp], 0
	setl	dl
	movzx	eax, dl
	push	eax
	lea	ecx, DWORD PTR _replStr$[ebp]
	call	??0UnicodeString@icu_56@@QAE@CPB_WH@Z	; icu_56::UnicodeString::UnicodeString
; Line 1921
	mov	esi, esp
	lea	eax, DWORD PTR _replStr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _limit32$[ebp]
	push	ecx
	mov	edx, DWORD PTR _start32$[ebp]
	push	edx
	mov	eax, DWORD PTR _rep$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _rep$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1922
	mov	ecx, DWORD PTR _rep$[ebp]
	call	?length@Replaceable@icu_56@@QBEHXZ	; icu_56::Replaceable::length
	mov	DWORD PTR _newLength$[ebp], eax
; Line 1923
	mov	eax, DWORD PTR _newLength$[ebp]
	sub	eax, DWORD PTR _oldLength$[ebp]
	mov	DWORD PTR _lengthDelta$[ebp], eax
; Line 1926
	mov	eax, DWORD PTR _start32$[ebp]
	cdq
	mov	ecx, DWORD PTR _ut$[ebp]
	mov	DWORD PTR tv238[ebp], ecx
	mov	DWORD PTR tv239[ebp], eax
	mov	DWORD PTR tv239[ebp+4], edx
	mov	edx, DWORD PTR tv238[ebp]
	mov	eax, DWORD PTR [edx+20]
	cmp	eax, DWORD PTR tv239[ebp+4]
	jl	SHORT $LN1@repTextRep
	jg	SHORT $LN10@repTextRep
	mov	ecx, DWORD PTR tv238[ebp]
	mov	edx, DWORD PTR [ecx+16]
	cmp	edx, DWORD PTR tv239[ebp]
	jbe	SHORT $LN1@repTextRep
$LN10@repTextRep:
; Line 1929
	mov	eax, DWORD PTR _ut$[ebp]
	push	eax
	call	?invalidateChunk@@YAXPAUUText@@@Z	; invalidateChunk
	add	esp, 4
$LN1@repTextRep:
; Line 1933
	mov	eax, DWORD PTR _limit32$[ebp]
	add	eax, DWORD PTR _lengthDelta$[ebp]
	mov	DWORD PTR _newIndexPos$[ebp], eax
; Line 1934
	push	1
	mov	eax, DWORD PTR _newIndexPos$[ebp]
	cdq
	push	edx
	push	eax
	mov	eax, DWORD PTR _ut$[ebp]
	push	eax
	call	_repTextAccess
	add	esp, 16					; 00000010H
; Line 1936
	mov	eax, DWORD PTR _lengthDelta$[ebp]
	mov	DWORD PTR $T45049[ebp], eax
	lea	ecx, DWORD PTR _replStr$[ebp]
	call	??1UnicodeString@icu_56@@UAE@XZ		; icu_56::UnicodeString::~UnicodeString
	mov	eax, DWORD PTR $T45049[ebp]
$LN7@repTextRep:
; Line 1937
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@repTextRep
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 376				; 00000178H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN13@repTextRep:
	DD	1
	DD	$LN12@repTextRep
$LN12@repTextRep:
	DD	-120					; ffffff88H
	DD	64					; 00000040H
	DD	$LN11@repTextRep
$LN11@repTextRep:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	112					; 00000070H
	DB	108					; 0000006cH
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	0
_repTextReplace ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?invalidateChunk@@YAXPAUUText@@@Z
_TEXT	SEGMENT
_ut$ = 8						; size = 4
?invalidateChunk@@YAXPAUUText@@@Z PROC			; invalidateChunk, COMDAT
; Line 714
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 715
	mov	eax, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [eax+44], 0
; Line 716
	mov	eax, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [eax+16], 0
	mov	DWORD PTR [eax+20], 0
; Line 717
	mov	eax, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [eax+32], 0
	mov	DWORD PTR [eax+36], 0
; Line 718
	mov	eax, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [eax+40], 0
; Line 719
	mov	eax, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [eax+28], 0
; Line 720
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?invalidateChunk@@YAXPAUUText@@@Z ENDP			; invalidateChunk
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _repTextCopy
_TEXT	SEGMENT
tv252 = -376						; size = 4
tv249 = -372						; size = 8
$T37324 = -360						; size = 64
_nativeIterIndex$ = -96					; size = 4
_firstAffectedIndex$ = -84				; size = 4
_segLength$37322 = -72					; size = 4
_destIndex32$ = -60					; size = 4
_limit32$ = -48						; size = 4
_start32$ = -36						; size = 4
_length$ = -24						; size = 4
_rep$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_ut$ = 8						; size = 4
_start$ = 12						; size = 8
_limit$ = 20						; size = 8
_destIndex$ = 28					; size = 8
_move$ = 36						; size = 1
_status$ = 40						; size = 4
_repTextCopy PROC					; COMDAT
; Line 1946
	push	ebp
	mov	ebp, esp
	sub	esp, 376				; 00000178H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-376]
	mov	ecx, 94					; 0000005eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 1947
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	mov	DWORD PTR _rep$[ebp], ecx
; Line 1948
	mov	ecx, DWORD PTR _rep$[ebp]
	call	?length@Replaceable@icu_56@@QBEHXZ	; icu_56::Replaceable::length
	mov	DWORD PTR _length$[ebp], eax
; Line 1950
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN9@repTextCop
; Line 1951
	jmp	$LN10@repTextCop
$LN9@repTextCop:
; Line 1953
	mov	eax, DWORD PTR _start$[ebp+4]
	cmp	eax, DWORD PTR _limit$[ebp+4]
	jg	SHORT $LN7@repTextCop
	jl	SHORT $LN12@repTextCop
	mov	ecx, DWORD PTR _start$[ebp]
	cmp	ecx, DWORD PTR _limit$[ebp]
	ja	SHORT $LN7@repTextCop
$LN12@repTextCop:
	mov	eax, DWORD PTR _start$[ebp+4]
	cmp	eax, DWORD PTR _destIndex$[ebp+4]
	jg	SHORT $LN8@repTextCop
	jl	SHORT $LN13@repTextCop
	mov	ecx, DWORD PTR _start$[ebp]
	cmp	ecx, DWORD PTR _destIndex$[ebp]
	jae	SHORT $LN8@repTextCop
$LN13@repTextCop:
	mov	eax, DWORD PTR _destIndex$[ebp+4]
	cmp	eax, DWORD PTR _limit$[ebp+4]
	jg	SHORT $LN8@repTextCop
	jl	SHORT $LN7@repTextCop
	mov	ecx, DWORD PTR _destIndex$[ebp]
	cmp	ecx, DWORD PTR _limit$[ebp]
	jae	SHORT $LN8@repTextCop
$LN7@repTextCop:
; Line 1955
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 8
; Line 1956
	jmp	$LN10@repTextCop
$LN8@repTextCop:
; Line 1959
	mov	eax, DWORD PTR _length$[ebp]
	cdq
	push	edx
	push	eax
	lea	eax, DWORD PTR _start$[ebp]
	push	eax
	call	?pinIndex@@YAHAA_J_J@Z			; pinIndex
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _start32$[ebp], eax
; Line 1960
	mov	eax, DWORD PTR _length$[ebp]
	cdq
	push	edx
	push	eax
	lea	eax, DWORD PTR _limit$[ebp]
	push	eax
	call	?pinIndex@@YAHAA_J_J@Z			; pinIndex
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _limit32$[ebp], eax
; Line 1961
	mov	eax, DWORD PTR _length$[ebp]
	cdq
	push	edx
	push	eax
	lea	eax, DWORD PTR _destIndex$[ebp]
	push	eax
	call	?pinIndex@@YAHAA_J_J@Z			; pinIndex
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _destIndex32$[ebp], eax
; Line 1965
	movsx	eax, BYTE PTR _move$[ebp]
	test	eax, eax
	je	SHORT $LN6@repTextCop
; Line 1967
	mov	eax, DWORD PTR _limit32$[ebp]
	sub	eax, DWORD PTR _start32$[ebp]
	mov	DWORD PTR _segLength$37322[ebp], eax
; Line 1968
	mov	esi, esp
	mov	eax, DWORD PTR _destIndex32$[ebp]
	push	eax
	mov	ecx, DWORD PTR _limit32$[ebp]
	push	ecx
	mov	edx, DWORD PTR _start32$[ebp]
	push	edx
	mov	eax, DWORD PTR _rep$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _rep$[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1969
	mov	eax, DWORD PTR _destIndex32$[ebp]
	cmp	eax, DWORD PTR _start32$[ebp]
	jge	SHORT $LN5@repTextCop
; Line 1970
	mov	eax, DWORD PTR _start32$[ebp]
	add	eax, DWORD PTR _segLength$37322[ebp]
	mov	DWORD PTR _start32$[ebp], eax
; Line 1971
	mov	eax, DWORD PTR _limit32$[ebp]
	add	eax, DWORD PTR _segLength$37322[ebp]
	mov	DWORD PTR _limit32$[ebp], eax
$LN5@repTextCop:
; Line 1973
	lea	ecx, DWORD PTR $T37324[ebp]
	call	??0UnicodeString@icu_56@@QAE@XZ		; icu_56::UnicodeString::UnicodeString
	mov	esi, esp
	push	eax
	mov	eax, DWORD PTR _limit32$[ebp]
	push	eax
	mov	ecx, DWORD PTR _start32$[ebp]
	push	ecx
	mov	edx, DWORD PTR _rep$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _rep$[ebp]
	mov	edx, DWORD PTR [eax+12]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	lea	ecx, DWORD PTR $T37324[ebp]
	call	??1UnicodeString@icu_56@@UAE@XZ		; icu_56::UnicodeString::~UnicodeString
; Line 1974
	jmp	SHORT $LN4@repTextCop
$LN6@repTextCop:
; Line 1976
	mov	esi, esp
	mov	eax, DWORD PTR _destIndex32$[ebp]
	push	eax
	mov	ecx, DWORD PTR _limit32$[ebp]
	push	ecx
	mov	edx, DWORD PTR _start32$[ebp]
	push	edx
	mov	eax, DWORD PTR _rep$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _rep$[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN4@repTextCop:
; Line 1981
	mov	eax, DWORD PTR _destIndex32$[ebp]
	mov	DWORD PTR _firstAffectedIndex$[ebp], eax
; Line 1982
	movsx	eax, BYTE PTR _move$[ebp]
	test	eax, eax
	je	SHORT $LN3@repTextCop
	mov	eax, DWORD PTR _start32$[ebp]
	cmp	eax, DWORD PTR _firstAffectedIndex$[ebp]
	jge	SHORT $LN3@repTextCop
; Line 1983
	mov	eax, DWORD PTR _start32$[ebp]
	mov	DWORD PTR _firstAffectedIndex$[ebp], eax
$LN3@repTextCop:
; Line 1985
	mov	eax, DWORD PTR _firstAffectedIndex$[ebp]
	cdq
	mov	ecx, DWORD PTR _ut$[ebp]
	mov	DWORD PTR tv249[ebp], eax
	mov	DWORD PTR tv249[ebp+4], edx
	mov	DWORD PTR tv252[ebp], ecx
	mov	edx, DWORD PTR tv252[ebp]
	mov	eax, DWORD PTR tv249[ebp+4]
	cmp	eax, DWORD PTR [edx+20]
	jg	SHORT $LN2@repTextCop
	jl	SHORT $LN15@repTextCop
	mov	ecx, DWORD PTR tv252[ebp]
	mov	edx, DWORD PTR tv249[ebp]
	cmp	edx, DWORD PTR [ecx+16]
	jae	SHORT $LN2@repTextCop
$LN15@repTextCop:
; Line 1987
	mov	eax, DWORD PTR _ut$[ebp]
	push	eax
	call	?invalidateChunk@@YAXPAUUText@@@Z	; invalidateChunk
	add	esp, 4
$LN2@repTextCop:
; Line 1991
	mov	eax, DWORD PTR _destIndex32$[ebp]
	add	eax, DWORD PTR _limit32$[ebp]
	sub	eax, DWORD PTR _start32$[ebp]
	mov	DWORD PTR _nativeIterIndex$[ebp], eax
; Line 1992
	movsx	eax, BYTE PTR _move$[ebp]
	test	eax, eax
	je	SHORT $LN1@repTextCop
	mov	eax, DWORD PTR _destIndex32$[ebp]
	cmp	eax, DWORD PTR _start32$[ebp]
	jle	SHORT $LN1@repTextCop
; Line 1994
	mov	eax, DWORD PTR _destIndex32$[ebp]
	mov	DWORD PTR _nativeIterIndex$[ebp], eax
$LN1@repTextCop:
; Line 1998
	push	1
	mov	eax, DWORD PTR _nativeIterIndex$[ebp]
	cdq
	push	edx
	push	eax
	mov	eax, DWORD PTR _ut$[ebp]
	push	eax
	call	_repTextAccess
	add	esp, 16					; 00000010H
$LN10@repTextCop:
; Line 1999
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 376				; 00000178H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_repTextCopy ENDP
_TEXT	ENDS
PUBLIC	_utext_openReplaceable_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _utext_openReplaceable_56
_TEXT	SEGMENT
_ut$ = 8						; size = 4
_rep$ = 12						; size = 4
_status$ = 16						; size = 4
_utext_openReplaceable_56 PROC				; COMDAT
; Line 2022
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2023
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN4@utext_open@2
; Line 2024
	xor	eax, eax
	jmp	$LN5@utext_open@2
$LN4@utext_open@2:
; Line 2026
	cmp	DWORD PTR _rep$[ebp], 0
	jne	SHORT $LN3@utext_open@2
; Line 2027
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 1
; Line 2028
	xor	eax, eax
	jmp	SHORT $LN5@utext_open@2
$LN3@utext_open@2:
; Line 2030
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	push	22					; 00000016H
	mov	ecx, DWORD PTR _ut$[ebp]
	push	ecx
	call	_utext_setup_56
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _ut$[ebp], eax
; Line 2031
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN2@utext_open@2
; Line 2032
	mov	eax, DWORD PTR _ut$[ebp]
	jmp	SHORT $LN5@utext_open@2
$LN2@utext_open@2:
; Line 2035
	mov	eax, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [eax+8], 8
; Line 2036
	mov	eax, DWORD PTR _rep$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR _rep$[ebp]
	mov	eax, DWORD PTR [edx+20]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	movsx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@utext_open@2
; Line 2037
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	or	ecx, 16					; 00000010H
	mov	edx, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [edx+8], ecx
$LN1@utext_open@2:
; Line 2040
	mov	eax, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [eax+52], OFFSET _repFuncs
; Line 2041
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR _rep$[ebp]
	mov	DWORD PTR [eax+60], ecx
; Line 2042
	mov	eax, DWORD PTR _ut$[ebp]
$LN5@utext_open@2:
; Line 2043
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_utext_openReplaceable_56 ENDP
_TEXT	ENDS
EXTRN	??0UnicodeString@icu_56@@QAE@ABV01@@Z:PROC	; icu_56::UnicodeString::UnicodeString
EXTRN	??2UMemory@icu_56@@SAPAXI@Z:PROC		; icu_56::UMemory::operator new
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _unistrTextClone
_TEXT	SEGMENT
tv84 = -232						; size = 4
$T45068 = -224						; size = 4
$T45069 = -212						; size = 4
_srcString$37352 = -8					; size = 4
_dest$ = 8						; size = 4
_src$ = 12						; size = 4
_deep$ = 16						; size = 1
_status$ = 20						; size = 4
_unistrTextClone PROC					; COMDAT
; Line 2071
	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2073
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _src$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dest$[ebp]
	push	edx
	call	_shallowTextClone
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _dest$[ebp], eax
; Line 2080
	movsx	eax, BYTE PTR _deep$[ebp]
	test	eax, eax
	je	$LN1@unistrText
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_SUCCESS@@YACW4UErrorCode@@@Z		; U_SUCCESS
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN1@unistrText
; Line 2081
	mov	eax, DWORD PTR _src$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	mov	DWORD PTR _srcString$37352[ebp], ecx
; Line 2082
	push	64					; 00000040H
	call	??2UMemory@icu_56@@SAPAXI@Z		; icu_56::UMemory::operator new
	add	esp, 4
	mov	DWORD PTR $T45069[ebp], eax
	cmp	DWORD PTR $T45069[ebp], 0
	je	SHORT $LN4@unistrText
	mov	eax, DWORD PTR _srcString$37352[ebp]
	push	eax
	mov	ecx, DWORD PTR $T45069[ebp]
	call	??0UnicodeString@icu_56@@QAE@ABV01@@Z	; icu_56::UnicodeString::UnicodeString
	mov	DWORD PTR tv84[ebp], eax
	jmp	SHORT $LN5@unistrText
$LN4@unistrText:
	mov	DWORD PTR tv84[ebp], 0
$LN5@unistrText:
	mov	ecx, DWORD PTR tv84[ebp]
	mov	DWORD PTR $T45068[ebp], ecx
	mov	edx, DWORD PTR _dest$[ebp]
	mov	eax, DWORD PTR $T45068[ebp]
	mov	DWORD PTR [edx+60], eax
; Line 2083
	mov	eax, DWORD PTR _dest$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	or	ecx, 32					; 00000020H
	mov	edx, DWORD PTR _dest$[ebp]
	mov	DWORD PTR [edx+8], ecx
; Line 2086
	mov	eax, DWORD PTR _dest$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	or	ecx, 8
	mov	edx, DWORD PTR _dest$[ebp]
	mov	DWORD PTR [edx+8], ecx
$LN1@unistrText:
; Line 2088
	mov	eax, DWORD PTR _dest$[ebp]
; Line 2089
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_unistrTextClone ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _unistrTextClose
_TEXT	SEGMENT
tv78 = -232						; size = 4
$T45074 = -224						; size = 4
$T45075 = -212						; size = 4
_str$37365 = -8						; size = 4
_ut$ = 8						; size = 4
_unistrTextClose PROC					; COMDAT
; Line 2092
	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2096
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, 32					; 00000020H
	je	SHORT $LN2@unistrText@2
; Line 2097
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	mov	DWORD PTR _str$37365[ebp], ecx
; Line 2098
	mov	eax, DWORD PTR _str$37365[ebp]
	mov	DWORD PTR $T45075[ebp], eax
	mov	ecx, DWORD PTR $T45075[ebp]
	mov	DWORD PTR $T45074[ebp], ecx
	cmp	DWORD PTR $T45074[ebp], 0
	je	SHORT $LN4@unistrText@2
	mov	esi, esp
	push	1
	mov	edx, DWORD PTR $T45074[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR $T45074[ebp]
	mov	edx, DWORD PTR [eax]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv78[ebp], eax
	jmp	SHORT $LN5@unistrText@2
$LN4@unistrText@2:
	mov	DWORD PTR tv78[ebp], 0
$LN5@unistrText@2:
; Line 2099
	mov	eax, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [eax+60], 0
$LN2@unistrText@2:
; Line 2101
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_unistrTextClose ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _unistrTextLength
_TEXT	SEGMENT
_t$ = 8							; size = 4
_unistrTextLength PROC					; COMDAT
; Line 2105
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2106
	mov	eax, DWORD PTR _t$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	cdq
; Line 2107
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_unistrTextLength ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _unistrTextAccess
_TEXT	SEGMENT
tv77 = -225						; size = 1
tv129 = -224						; size = 8
_retVal$ = -17						; size = 1
_length$ = -8						; size = 4
_ut$ = 8						; size = 4
_index$ = 12						; size = 8
_forward$ = 20						; size = 1
_unistrTextAccess PROC					; COMDAT
; Line 2111
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2112
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	DWORD PTR _length$[ebp], ecx
; Line 2113
	mov	eax, DWORD PTR _length$[ebp]
	cdq
	push	edx
	push	eax
	lea	eax, DWORD PTR _index$[ebp]
	push	eax
	call	?pinIndex@@YAHAA_J_J@Z			; pinIndex
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [ecx+40], eax
; Line 2116
	movsx	eax, BYTE PTR _forward$[ebp]
	test	eax, eax
	je	SHORT $LN3@unistrText@3
	mov	eax, DWORD PTR _length$[ebp]
	cdq
	mov	DWORD PTR tv129[ebp], eax
	mov	DWORD PTR tv129[ebp+4], edx
	mov	ecx, DWORD PTR _index$[ebp+4]
	cmp	ecx, DWORD PTR tv129[ebp+4]
	jl	SHORT $LN5@unistrText@3
	jg	SHORT $LN3@unistrText@3
	mov	edx, DWORD PTR _index$[ebp]
	cmp	edx, DWORD PTR tv129[ebp]
	jb	SHORT $LN5@unistrText@3
$LN3@unistrText@3:
	movsx	eax, BYTE PTR _forward$[ebp]
	test	eax, eax
	jne	SHORT $LN4@unistrText@3
	cmp	DWORD PTR _index$[ebp+4], 0
	jg	SHORT $LN5@unistrText@3
	jl	SHORT $LN4@unistrText@3
	cmp	DWORD PTR _index$[ebp], 0
	ja	SHORT $LN5@unistrText@3
$LN4@unistrText@3:
	mov	BYTE PTR tv77[ebp], 0
	jmp	SHORT $LN6@unistrText@3
$LN5@unistrText@3:
	mov	BYTE PTR tv77[ebp], 1
$LN6@unistrText@3:
	mov	cl, BYTE PTR tv77[ebp]
	mov	BYTE PTR _retVal$[ebp], cl
; Line 2117
	mov	al, BYTE PTR _retVal$[ebp]
; Line 2118
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_unistrTextAccess ENDP
_TEXT	ENDS
EXTRN	?getChar32Start@UnicodeString@icu_56@@QBEHH@Z:PROC ; icu_56::UnicodeString::getChar32Start
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _unistrTextExtract
_TEXT	SEGMENT
tv89 = -264						; size = 4
tv82 = -264						; size = 4
tv176 = -260						; size = 8
tv160 = -260						; size = 8
_trimmedLength$37401 = -56				; size = 4
_limit32$ = -44						; size = 4
_start32$ = -32						; size = 4
_length$ = -20						; size = 4
_us$ = -8						; size = 4
_t$ = 8							; size = 4
_start$ = 12						; size = 8
_limit$ = 20						; size = 8
_dest$ = 28						; size = 4
_destCapacity$ = 32					; size = 4
_pErrorCode$ = 36					; size = 4
_unistrTextExtract PROC					; COMDAT
; Line 2126
	push	ebp
	mov	ebp, esp
	sub	esp, 264				; 00000108H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-264]
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2127
	mov	eax, DWORD PTR _t$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	mov	DWORD PTR _us$[ebp], ecx
; Line 2128
	mov	ecx, DWORD PTR _us$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	mov	DWORD PTR _length$[ebp], eax
; Line 2130
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN8@unistrText@4
; Line 2131
	xor	eax, eax
	jmp	$LN9@unistrText@4
$LN8@unistrText@4:
; Line 2133
	cmp	DWORD PTR _destCapacity$[ebp], 0
	jl	SHORT $LN6@unistrText@4
	cmp	DWORD PTR _dest$[ebp], 0
	jne	SHORT $LN7@unistrText@4
	cmp	DWORD PTR _destCapacity$[ebp], 0
	jle	SHORT $LN7@unistrText@4
$LN6@unistrText@4:
; Line 2134
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 1
$LN7@unistrText@4:
; Line 2136
	cmp	DWORD PTR _start$[ebp+4], 0
	jl	SHORT $LN4@unistrText@4
	jg	SHORT $LN15@unistrText@4
	cmp	DWORD PTR _start$[ebp], 0
	jb	SHORT $LN4@unistrText@4
$LN15@unistrText@4:
	mov	eax, DWORD PTR _start$[ebp+4]
	cmp	eax, DWORD PTR _limit$[ebp+4]
	jl	SHORT $LN5@unistrText@4
	jg	SHORT $LN4@unistrText@4
	mov	ecx, DWORD PTR _start$[ebp]
	cmp	ecx, DWORD PTR _limit$[ebp]
	jbe	SHORT $LN5@unistrText@4
$LN4@unistrText@4:
; Line 2137
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 8
; Line 2138
	xor	eax, eax
	jmp	$LN9@unistrText@4
$LN5@unistrText@4:
; Line 2141
	mov	eax, DWORD PTR _length$[ebp]
	cdq
	mov	DWORD PTR tv160[ebp], eax
	mov	DWORD PTR tv160[ebp+4], edx
	mov	eax, DWORD PTR _start$[ebp+4]
	cmp	eax, DWORD PTR tv160[ebp+4]
	jg	SHORT $LN11@unistrText@4
	jl	SHORT $LN17@unistrText@4
	mov	ecx, DWORD PTR _start$[ebp]
	cmp	ecx, DWORD PTR tv160[ebp]
	jae	SHORT $LN11@unistrText@4
$LN17@unistrText@4:
	mov	edx, DWORD PTR _start$[ebp]
	push	edx
	mov	ecx, DWORD PTR _us$[ebp]
	call	?getChar32Start@UnicodeString@icu_56@@QBEHH@Z ; icu_56::UnicodeString::getChar32Start
	mov	DWORD PTR tv82[ebp], eax
	jmp	SHORT $LN12@unistrText@4
$LN11@unistrText@4:
	mov	eax, DWORD PTR _length$[ebp]
	mov	DWORD PTR tv82[ebp], eax
$LN12@unistrText@4:
	mov	ecx, DWORD PTR tv82[ebp]
	mov	DWORD PTR _start32$[ebp], ecx
; Line 2142
	mov	eax, DWORD PTR _length$[ebp]
	cdq
	mov	DWORD PTR tv176[ebp], eax
	mov	DWORD PTR tv176[ebp+4], edx
	mov	eax, DWORD PTR _limit$[ebp+4]
	cmp	eax, DWORD PTR tv176[ebp+4]
	jg	SHORT $LN13@unistrText@4
	jl	SHORT $LN18@unistrText@4
	mov	ecx, DWORD PTR _limit$[ebp]
	cmp	ecx, DWORD PTR tv176[ebp]
	jae	SHORT $LN13@unistrText@4
$LN18@unistrText@4:
	mov	edx, DWORD PTR _limit$[ebp]
	push	edx
	mov	ecx, DWORD PTR _us$[ebp]
	call	?getChar32Start@UnicodeString@icu_56@@QBEHH@Z ; icu_56::UnicodeString::getChar32Start
	mov	DWORD PTR tv89[ebp], eax
	jmp	SHORT $LN14@unistrText@4
$LN13@unistrText@4:
	mov	eax, DWORD PTR _length$[ebp]
	mov	DWORD PTR tv89[ebp], eax
$LN14@unistrText@4:
	mov	ecx, DWORD PTR tv89[ebp]
	mov	DWORD PTR _limit32$[ebp], ecx
; Line 2144
	mov	eax, DWORD PTR _limit32$[ebp]
	sub	eax, DWORD PTR _start32$[ebp]
	mov	DWORD PTR _length$[ebp], eax
; Line 2145
	cmp	DWORD PTR _destCapacity$[ebp], 0
	jle	SHORT $LN3@unistrText@4
	cmp	DWORD PTR _dest$[ebp], 0
	je	SHORT $LN3@unistrText@4
; Line 2146
	mov	eax, DWORD PTR _length$[ebp]
	mov	DWORD PTR _trimmedLength$37401[ebp], eax
; Line 2147
	mov	eax, DWORD PTR _trimmedLength$37401[ebp]
	cmp	eax, DWORD PTR _destCapacity$[ebp]
	jle	SHORT $LN2@unistrText@4
; Line 2148
	mov	eax, DWORD PTR _destCapacity$[ebp]
	mov	DWORD PTR _trimmedLength$37401[ebp], eax
$LN2@unistrText@4:
; Line 2150
	push	0
	mov	eax, DWORD PTR _dest$[ebp]
	push	eax
	mov	ecx, DWORD PTR _trimmedLength$37401[ebp]
	push	ecx
	mov	edx, DWORD PTR _start32$[ebp]
	push	edx
	mov	ecx, DWORD PTR _us$[ebp]
	call	?extract@UnicodeString@icu_56@@QBEXHHPA_WH@Z ; icu_56::UnicodeString::extract
; Line 2151
	mov	eax, DWORD PTR _start32$[ebp]
	add	eax, DWORD PTR _trimmedLength$37401[ebp]
	mov	ecx, DWORD PTR _t$[ebp]
	mov	DWORD PTR [ecx+40], eax
; Line 2152
	jmp	SHORT $LN1@unistrText@4
$LN3@unistrText@4:
; Line 2153
	mov	eax, DWORD PTR _t$[ebp]
	mov	ecx, DWORD PTR _start32$[ebp]
	mov	DWORD PTR [eax+40], ecx
$LN1@unistrText@4:
; Line 2155
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _length$[ebp]
	push	ecx
	mov	edx, DWORD PTR _destCapacity$[ebp]
	push	edx
	mov	eax, DWORD PTR _dest$[ebp]
	push	eax
	call	_u_terminateUChars_56
	add	esp, 16					; 00000010H
; Line 2156
	mov	eax, DWORD PTR _length$[ebp]
$LN9@unistrText@4:
; Line 2157
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 264				; 00000108H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_unistrTextExtract ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _unistrTextReplace
_TEXT	SEGMENT
_lengthDelta$ = -68					; size = 4
_newLength$ = -56					; size = 4
_limit32$ = -44						; size = 4
_start32$ = -32						; size = 4
_oldLength$ = -20					; size = 4
_us$ = -8						; size = 4
_ut$ = 8						; size = 4
_start$ = 12						; size = 8
_limit$ = 20						; size = 8
_src$ = 28						; size = 4
_length$ = 32						; size = 4
_pErrorCode$ = 36					; size = 4
_unistrTextReplace PROC					; COMDAT
; Line 2163
	push	ebp
	mov	ebp, esp
	sub	esp, 264				; 00000108H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-264]
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2164
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	mov	DWORD PTR _us$[ebp], ecx
; Line 2167
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN5@unistrText@5
; Line 2168
	xor	eax, eax
	jmp	$LN6@unistrText@5
$LN5@unistrText@5:
; Line 2170
	cmp	DWORD PTR _src$[ebp], 0
	jne	SHORT $LN4@unistrText@5
	cmp	DWORD PTR _length$[ebp], 0
	je	SHORT $LN4@unistrText@5
; Line 2171
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 1
$LN4@unistrText@5:
; Line 2173
	mov	eax, DWORD PTR _start$[ebp+4]
	cmp	eax, DWORD PTR _limit$[ebp+4]
	jl	SHORT $LN3@unistrText@5
	jg	SHORT $LN8@unistrText@5
	mov	ecx, DWORD PTR _start$[ebp]
	cmp	ecx, DWORD PTR _limit$[ebp]
	jbe	SHORT $LN3@unistrText@5
$LN8@unistrText@5:
; Line 2174
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 8
; Line 2175
	xor	eax, eax
	jmp	$LN6@unistrText@5
$LN3@unistrText@5:
; Line 2177
	mov	ecx, DWORD PTR _us$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	mov	DWORD PTR _oldLength$[ebp], eax
; Line 2178
	mov	eax, DWORD PTR _oldLength$[ebp]
	cdq
	push	edx
	push	eax
	lea	eax, DWORD PTR _start$[ebp]
	push	eax
	call	?pinIndex@@YAHAA_J_J@Z			; pinIndex
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _start32$[ebp], eax
; Line 2179
	mov	eax, DWORD PTR _oldLength$[ebp]
	cdq
	push	edx
	push	eax
	lea	eax, DWORD PTR _limit$[ebp]
	push	eax
	call	?pinIndex@@YAHAA_J_J@Z			; pinIndex
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _limit32$[ebp], eax
; Line 2180
	mov	eax, DWORD PTR _start32$[ebp]
	cmp	eax, DWORD PTR _oldLength$[ebp]
	jge	SHORT $LN2@unistrText@5
; Line 2181
	mov	eax, DWORD PTR _start32$[ebp]
	push	eax
	mov	ecx, DWORD PTR _us$[ebp]
	call	?getChar32Start@UnicodeString@icu_56@@QBEHH@Z ; icu_56::UnicodeString::getChar32Start
	mov	DWORD PTR _start32$[ebp], eax
$LN2@unistrText@5:
; Line 2183
	mov	eax, DWORD PTR _limit32$[ebp]
	cmp	eax, DWORD PTR _oldLength$[ebp]
	jge	SHORT $LN1@unistrText@5
; Line 2184
	mov	eax, DWORD PTR _limit32$[ebp]
	push	eax
	mov	ecx, DWORD PTR _us$[ebp]
	call	?getChar32Start@UnicodeString@icu_56@@QBEHH@Z ; icu_56::UnicodeString::getChar32Start
	mov	DWORD PTR _limit32$[ebp], eax
$LN1@unistrText@5:
; Line 2188
	mov	eax, DWORD PTR _length$[ebp]
	push	eax
	mov	ecx, DWORD PTR _src$[ebp]
	push	ecx
	mov	edx, DWORD PTR _limit32$[ebp]
	sub	edx, DWORD PTR _start32$[ebp]
	push	edx
	mov	eax, DWORD PTR _start32$[ebp]
	push	eax
	mov	ecx, DWORD PTR _us$[ebp]
	call	?replace@UnicodeString@icu_56@@QAEAAV12@HHPB_WH@Z ; icu_56::UnicodeString::replace
; Line 2189
	mov	ecx, DWORD PTR _us$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	mov	DWORD PTR _newLength$[ebp], eax
; Line 2192
	mov	ecx, DWORD PTR _us$[ebp]
	call	?getBuffer@UnicodeString@icu_56@@QBEPB_WXZ ; icu_56::UnicodeString::getBuffer
	mov	ecx, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [ecx+48], eax
; Line 2193
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR _newLength$[ebp]
	mov	DWORD PTR [eax+44], ecx
; Line 2194
	mov	eax, DWORD PTR _newLength$[ebp]
	cdq
	mov	ecx, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [ecx+16], eax
	mov	DWORD PTR [ecx+20], edx
; Line 2195
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR _newLength$[ebp]
	mov	DWORD PTR [eax+28], ecx
; Line 2198
	mov	eax, DWORD PTR _newLength$[ebp]
	sub	eax, DWORD PTR _oldLength$[ebp]
	mov	DWORD PTR _lengthDelta$[ebp], eax
; Line 2199
	mov	eax, DWORD PTR _limit32$[ebp]
	add	eax, DWORD PTR _lengthDelta$[ebp]
	mov	ecx, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [ecx+40], eax
; Line 2201
	mov	eax, DWORD PTR _lengthDelta$[ebp]
$LN6@unistrText@5:
; Line 2202
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 264				; 00000108H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_unistrTextReplace ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _unistrTextCopy
_TEXT	SEGMENT
_segLength$37442 = -68					; size = 4
_destIndex32$ = -56					; size = 4
_limit32$ = -44						; size = 4
_start32$ = -32						; size = 4
_length$ = -20						; size = 4
_us$ = -8						; size = 4
_ut$ = 8						; size = 4
_start$ = 12						; size = 8
_limit$ = 20						; size = 8
_destIndex$ = 28					; size = 8
_move$ = 36						; size = 1
_pErrorCode$ = 40					; size = 4
_unistrTextCopy PROC					; COMDAT
; Line 2209
	push	ebp
	mov	ebp, esp
	sub	esp, 264				; 00000108H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-264]
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2210
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	mov	DWORD PTR _us$[ebp], ecx
; Line 2211
	mov	ecx, DWORD PTR _us$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	mov	DWORD PTR _length$[ebp], eax
; Line 2213
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN8@unistrText@6
; Line 2214
	jmp	$LN9@unistrText@6
$LN8@unistrText@6:
; Line 2216
	mov	eax, DWORD PTR _length$[ebp]
	cdq
	push	edx
	push	eax
	lea	eax, DWORD PTR _start$[ebp]
	push	eax
	call	?pinIndex@@YAHAA_J_J@Z			; pinIndex
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _start32$[ebp], eax
; Line 2217
	mov	eax, DWORD PTR _length$[ebp]
	cdq
	push	edx
	push	eax
	lea	eax, DWORD PTR _limit$[ebp]
	push	eax
	call	?pinIndex@@YAHAA_J_J@Z			; pinIndex
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _limit32$[ebp], eax
; Line 2218
	mov	eax, DWORD PTR _length$[ebp]
	cdq
	push	edx
	push	eax
	lea	eax, DWORD PTR _destIndex$[ebp]
	push	eax
	call	?pinIndex@@YAHAA_J_J@Z			; pinIndex
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _destIndex32$[ebp], eax
; Line 2220
	mov	eax, DWORD PTR _start32$[ebp]
	cmp	eax, DWORD PTR _limit32$[ebp]
	jg	SHORT $LN6@unistrText@6
	mov	eax, DWORD PTR _start32$[ebp]
	cmp	eax, DWORD PTR _destIndex32$[ebp]
	jge	SHORT $LN7@unistrText@6
	mov	eax, DWORD PTR _destIndex32$[ebp]
	cmp	eax, DWORD PTR _limit32$[ebp]
	jge	SHORT $LN7@unistrText@6
$LN6@unistrText@6:
; Line 2221
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 8
; Line 2222
	jmp	$LN9@unistrText@6
$LN7@unistrText@6:
; Line 2225
	movsx	eax, BYTE PTR _move$[ebp]
	test	eax, eax
	je	SHORT $LN5@unistrText@6
; Line 2227
	mov	eax, DWORD PTR _limit32$[ebp]
	sub	eax, DWORD PTR _start32$[ebp]
	mov	DWORD PTR _segLength$37442[ebp], eax
; Line 2228
	mov	esi, esp
	mov	eax, DWORD PTR _destIndex32$[ebp]
	push	eax
	mov	ecx, DWORD PTR _limit32$[ebp]
	push	ecx
	mov	edx, DWORD PTR _start32$[ebp]
	push	edx
	mov	eax, DWORD PTR _us$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _us$[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2229
	mov	eax, DWORD PTR _destIndex32$[ebp]
	cmp	eax, DWORD PTR _start32$[ebp]
	jge	SHORT $LN4@unistrText@6
; Line 2230
	mov	eax, DWORD PTR _start32$[ebp]
	add	eax, DWORD PTR _segLength$37442[ebp]
	mov	DWORD PTR _start32$[ebp], eax
$LN4@unistrText@6:
; Line 2232
	push	0
	push	0
	mov	eax, DWORD PTR _segLength$37442[ebp]
	push	eax
	mov	ecx, DWORD PTR _start32$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _us$[ebp]
	call	?replace@UnicodeString@icu_56@@QAEAAV12@HHPB_WH@Z ; icu_56::UnicodeString::replace
; Line 2233
	jmp	SHORT $LN3@unistrText@6
$LN5@unistrText@6:
; Line 2235
	mov	esi, esp
	mov	eax, DWORD PTR _destIndex32$[ebp]
	push	eax
	mov	ecx, DWORD PTR _limit32$[ebp]
	push	ecx
	mov	edx, DWORD PTR _start32$[ebp]
	push	edx
	mov	eax, DWORD PTR _us$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _us$[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@unistrText@6:
; Line 2239
	mov	ecx, DWORD PTR _us$[ebp]
	call	?getBuffer@UnicodeString@icu_56@@QBEPB_WXZ ; icu_56::UnicodeString::getBuffer
	mov	ecx, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [ecx+48], eax
; Line 2240
	movsx	eax, BYTE PTR _move$[ebp]
	test	eax, eax
	jne	SHORT $LN2@unistrText@6
; Line 2242
	mov	eax, DWORD PTR _limit32$[ebp]
	sub	eax, DWORD PTR _start32$[ebp]
	mov	ecx, DWORD PTR _ut$[ebp]
	add	eax, DWORD PTR [ecx+44]
	mov	edx, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [edx+44], eax
; Line 2243
	mov	eax, DWORD PTR _ut$[ebp]
	mov	eax, DWORD PTR [eax+44]
	cdq
	mov	ecx, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [ecx+16], eax
	mov	DWORD PTR [ecx+20], edx
; Line 2244
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR _ut$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR [eax+28], edx
$LN2@unistrText@6:
; Line 2248
	mov	eax, DWORD PTR _destIndex32$[ebp]
	add	eax, DWORD PTR _limit32$[ebp]
	sub	eax, DWORD PTR _start32$[ebp]
	mov	ecx, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [ecx+40], eax
; Line 2249
	movsx	eax, BYTE PTR _move$[ebp]
	test	eax, eax
	je	SHORT $LN9@unistrText@6
	mov	eax, DWORD PTR _destIndex32$[ebp]
	cmp	eax, DWORD PTR _start32$[ebp]
	jle	SHORT $LN9@unistrText@6
; Line 2250
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR _destIndex32$[ebp]
	mov	DWORD PTR [eax+40], ecx
$LN9@unistrText@6:
; Line 2253
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 264				; 00000108H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_unistrTextCopy ENDP
_TEXT	ENDS
PUBLIC	_utext_openConstUnicodeString_56
PUBLIC	_utext_openUnicodeString_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _utext_openUnicodeString_56
_TEXT	SEGMENT
_ut$ = 8						; size = 4
_s$ = 12						; size = 4
_status$ = 16						; size = 4
_utext_openUnicodeString_56 PROC			; COMDAT
; Line 2279
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2280
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ut$[ebp]
	push	edx
	call	_utext_openConstUnicodeString_56
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _ut$[ebp], eax
; Line 2281
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_SUCCESS@@YACW4UErrorCode@@@Z		; U_SUCCESS
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN1@utext_open@3
; Line 2282
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	or	ecx, 8
	mov	edx, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [edx+8], ecx
$LN1@utext_open@3:
; Line 2284
	mov	eax, DWORD PTR _ut$[ebp]
; Line 2285
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_utext_openUnicodeString_56 ENDP
_TEXT	ENDS
PUBLIC	_utext_openUChars_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _utext_openConstUnicodeString_56
_TEXT	SEGMENT
_ut$ = 8						; size = 4
_s$ = 12						; size = 4
_status$ = 16						; size = 4
_utext_openConstUnicodeString_56 PROC			; COMDAT
; Line 2290
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2291
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_SUCCESS@@YACW4UErrorCode@@@Z		; U_SUCCESS
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN2@utext_open@4
	mov	ecx, DWORD PTR _s$[ebp]
	call	?isBogus@UnicodeString@icu_56@@QBECXZ	; icu_56::UnicodeString::isBogus
	movsx	eax, al
	test	eax, eax
	je	SHORT $LN2@utext_open@4
; Line 2294
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	push	0
	push	0
	push	0
	mov	ecx, DWORD PTR _ut$[ebp]
	push	ecx
	call	_utext_openUChars_56
	add	esp, 20					; 00000014H
; Line 2295
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 1
; Line 2296
	mov	eax, DWORD PTR _ut$[ebp]
	jmp	$LN3@utext_open@4
$LN2@utext_open@4:
; Line 2298
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _ut$[ebp]
	push	ecx
	call	_utext_setup_56
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _ut$[ebp], eax
; Line 2302
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_SUCCESS@@YACW4UErrorCode@@@Z		; U_SUCCESS
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN1@utext_open@4
; Line 2303
	mov	eax, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [eax+52], OFFSET _unistrFuncs
; Line 2304
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+60], ecx
; Line 2305
	mov	eax, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [eax+8], 4
; Line 2306
	mov	ecx, DWORD PTR _s$[ebp]
	call	?getBuffer@UnicodeString@icu_56@@QBEPB_WXZ ; icu_56::UnicodeString::getBuffer
	mov	ecx, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [ecx+48], eax
; Line 2307
	mov	ecx, DWORD PTR _s$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	mov	ecx, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [ecx+44], eax
; Line 2308
	mov	eax, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [eax+32], 0
	mov	DWORD PTR [eax+36], 0
; Line 2309
	mov	eax, DWORD PTR _ut$[ebp]
	mov	eax, DWORD PTR [eax+44]
	cdq
	mov	ecx, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [ecx+16], eax
	mov	DWORD PTR [ecx+20], edx
; Line 2310
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR _ut$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR [eax+28], edx
$LN1@utext_open@4:
; Line 2312
	mov	eax, DWORD PTR _ut$[ebp]
$LN3@utext_open@4:
; Line 2313
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_utext_openConstUnicodeString_56 ENDP
_TEXT	ENDS
PUBLIC	??_C@_1FC@DHKAKMO@?$AAu?$AAt?$AAe?$AAx?$AAt?$AA_?$AAn?$AAa?$AAt?$AAi?$AAv?$AAe?$AAL?$AAe?$AAn?$AAg?$AAt?$AAh?$AA_?$AA5?$AA6?$AA?$CI?$AAd?$AAe?$AAs?$AAt?$AA?$CJ?$AA?5?$AA?$DM?$AA?5?$AA0?$AAx@ ; `string'
PUBLIC	?__LINE__Var@?1??ucstrTextClone@@9@4JA@8d672338	; `ucstrTextClone'::`2'::__LINE__Var
EXTRN	__allmul:PROC
;	COMDAT ??_C@_1FC@DHKAKMO@?$AAu?$AAt?$AAe?$AAx?$AAt?$AA_?$AAn?$AAa?$AAt?$AAi?$AAv?$AAe?$AAL?$AAe?$AAn?$AAg?$AAt?$AAh?$AA_?$AA5?$AA6?$AA?$CI?$AAd?$AAe?$AAs?$AAt?$AA?$CJ?$AA?5?$AA?$DM?$AA?5?$AA0?$AAx@
CONST	SEGMENT
??_C@_1FC@DHKAKMO@?$AAu?$AAt?$AAe?$AAx?$AAt?$AA_?$AAn?$AAa?$AAt?$AAi?$AAv?$AAe?$AAL?$AAe?$AAn?$AAg?$AAt?$AAh?$AA_?$AA5?$AA6?$AA?$CI?$AAd?$AAe?$AAs?$AAt?$AA?$CJ?$AA?5?$AA?$DM?$AA?5?$AA0?$AAx@ DB 'u'
	DB	00H, 't', 00H, 'e', 00H, 'x', 00H, 't', 00H, '_', 00H, 'n', 00H
	DB	'a', 00H, 't', 00H, 'i', 00H, 'v', 00H, 'e', 00H, 'L', 00H, 'e'
	DB	00H, 'n', 00H, 'g', 00H, 't', 00H, 'h', 00H, '_', 00H, '5', 00H
	DB	'6', 00H, '(', 00H, 'd', 00H, 'e', 00H, 's', 00H, 't', 00H, ')'
	DB	00H, ' ', 00H, '<', 00H, ' ', 00H, '0', 00H, 'x', 00H, '7', 00H
	DB	'f', 00H, 'f', 00H, 'f', 00H, 'f', 00H, 'f', 00H, 'f', 00H, 'f'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??ucstrTextClone@@9@4JA@8d672338
_DATA	SEGMENT
?__LINE__Var@?1??ucstrTextClone@@9@4JA@8d672338 DD 091bH ; `ucstrTextClone'::`2'::__LINE__Var
; Function compile flags: /Odtp /RTCsu /ZI
_DATA	ENDS
;	COMDAT _ucstrTextClone
_TEXT	SEGMENT
tv182 = -252						; size = 8
tv151 = -252						; size = 8
_i$37483 = -48						; size = 8
_copyStr$37478 = -32					; size = 4
_srcStr$37476 = -20					; size = 4
_len$37474 = -8						; size = 4
_dest$ = 8						; size = 4
_src$ = 12						; size = 4
_deep$ = 16						; size = 1
_status$ = 20						; size = 4
_ucstrTextClone PROC					; COMDAT
; Line 2331
	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2333
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _src$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dest$[ebp]
	push	edx
	call	_shallowTextClone
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _dest$[ebp], eax
; Line 2340
	movsx	eax, BYTE PTR _deep$[ebp]
	test	eax, eax
	je	$LN6@ucstrTextC
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_SUCCESS@@YACW4UErrorCode@@@Z		; U_SUCCESS
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	$LN6@ucstrTextC
; Line 2341
	mov	eax, DWORD PTR _dest$[ebp]
	push	eax
	call	_utext_nativeLength_56
	add	esp, 4
	mov	DWORD PTR tv151[ebp], eax
	mov	DWORD PTR tv151[ebp+4], edx
	cmp	DWORD PTR tv151[ebp+4], 0
	jl	SHORT $LN9@ucstrTextC
	jg	SHORT $LN10@ucstrTextC
	cmp	DWORD PTR tv151[ebp], 2147483647	; 7fffffffH
	jb	SHORT $LN9@ucstrTextC
$LN10@ucstrTextC:
	mov	ecx, DWORD PTR ?__LINE__Var@?1??ucstrTextClone@@9@4JA@8d672338
	add	ecx, 10					; 0000000aH
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_1FI@DOHBLNEC@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@
	push	OFFSET ??_C@_1FC@DHKAKMO@?$AAu?$AAt?$AAe?$AAx?$AAt?$AA_?$AAn?$AAa?$AAt?$AAi?$AAv?$AAe?$AAL?$AAe?$AAn?$AAg?$AAt?$AAh?$AA_?$AA5?$AA6?$AA?$CI?$AAd?$AAe?$AAs?$AAt?$AA?$CJ?$AA?5?$AA?$DM?$AA?5?$AA0?$AAx@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN9@ucstrTextC:
; Line 2342
	mov	eax, DWORD PTR _dest$[ebp]
	push	eax
	call	_utext_nativeLength_56
	add	esp, 4
	mov	DWORD PTR _len$37474[ebp], eax
; Line 2345
	mov	eax, DWORD PTR _src$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	mov	DWORD PTR _srcStr$37476[ebp], ecx
; Line 2346
	mov	eax, DWORD PTR _len$37474[ebp]
	lea	ecx, DWORD PTR [eax+eax+2]
	push	ecx
	call	_uprv_malloc_56
	add	esp, 4
	mov	DWORD PTR _copyStr$37478[ebp], eax
; Line 2347
	cmp	DWORD PTR _copyStr$37478[ebp], 0
	jne	SHORT $LN5@ucstrTextC
; Line 2348
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 7
; Line 2349
	jmp	$LN6@ucstrTextC
$LN5@ucstrTextC:
; Line 2351
	mov	DWORD PTR _i$37483[ebp], 0
	mov	DWORD PTR _i$37483[ebp+4], 0
	jmp	SHORT $LN3@ucstrTextC
$LN2@ucstrTextC:
	mov	eax, DWORD PTR _i$37483[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _i$37483[ebp+4]
	adc	ecx, 0
	mov	DWORD PTR _i$37483[ebp], eax
	mov	DWORD PTR _i$37483[ebp+4], ecx
$LN3@ucstrTextC:
	mov	eax, DWORD PTR _len$37474[ebp]
	cdq
	mov	DWORD PTR tv182[ebp], eax
	mov	DWORD PTR tv182[ebp+4], edx
	mov	eax, DWORD PTR _i$37483[ebp+4]
	cmp	eax, DWORD PTR tv182[ebp+4]
	jg	SHORT $LN1@ucstrTextC
	jl	SHORT $LN11@ucstrTextC
	mov	ecx, DWORD PTR _i$37483[ebp]
	cmp	ecx, DWORD PTR tv182[ebp]
	jae	SHORT $LN1@ucstrTextC
$LN11@ucstrTextC:
; Line 2352
	push	0
	push	2
	mov	eax, DWORD PTR _i$37483[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _i$37483[ebp]
	push	ecx
	call	__allmul
	mov	esi, eax
	push	0
	push	2
	mov	edx, DWORD PTR _i$37483[ebp+4]
	push	edx
	mov	eax, DWORD PTR _i$37483[ebp]
	push	eax
	call	__allmul
	mov	ecx, DWORD PTR _copyStr$37478[ebp]
	mov	edx, DWORD PTR _srcStr$37476[ebp]
	mov	dx, WORD PTR [edx+esi]
	mov	WORD PTR [ecx+eax], dx
; Line 2353
	jmp	SHORT $LN2@ucstrTextC
$LN1@ucstrTextC:
; Line 2354
	xor	eax, eax
	mov	ecx, DWORD PTR _len$37474[ebp]
	mov	edx, DWORD PTR _copyStr$37478[ebp]
	mov	WORD PTR [edx+ecx*2], ax
; Line 2355
	mov	eax, DWORD PTR _dest$[ebp]
	mov	ecx, DWORD PTR _copyStr$37478[ebp]
	mov	DWORD PTR [eax+60], ecx
; Line 2356
	mov	eax, DWORD PTR _dest$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	or	ecx, 32					; 00000020H
	mov	edx, DWORD PTR _dest$[ebp]
	mov	DWORD PTR [edx+8], ecx
$LN6@ucstrTextC:
; Line 2359
	mov	eax, DWORD PTR _dest$[ebp]
; Line 2360
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ucstrTextClone ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _ucstrTextClose
_TEXT	SEGMENT
_s$37493 = -8						; size = 4
_ut$ = 8						; size = 4
_ucstrTextClose PROC					; COMDAT
; Line 2364
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2368
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, 32					; 00000020H
	je	SHORT $LN2@ucstrTextC@2
; Line 2369
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	mov	DWORD PTR _s$37493[ebp], ecx
; Line 2370
	mov	eax, DWORD PTR _s$37493[ebp]
	push	eax
	call	_uprv_free_56
	add	esp, 4
; Line 2371
	mov	eax, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [eax+60], 0
$LN2@ucstrTextC@2:
; Line 2373
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ucstrTextClose ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _ucstrTextLength
_TEXT	SEGMENT
tv89 = -208						; size = 4
_str$37499 = -8						; size = 4
_ut$ = 8						; size = 4
_ucstrTextLength PROC					; COMDAT
; Line 2378
	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2379
	mov	eax, DWORD PTR _ut$[ebp]
	mov	DWORD PTR tv89[ebp], eax
	mov	ecx, DWORD PTR tv89[ebp]
	cmp	DWORD PTR [ecx+84], 0
	jg	$LN4@ucstrTextL
	jl	SHORT $LN7@ucstrTextL
	mov	edx, DWORD PTR tv89[ebp]
	cmp	DWORD PTR [edx+80], 0
	jae	SHORT $LN4@ucstrTextL
$LN7@ucstrTextL:
; Line 2383
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	mov	DWORD PTR _str$37499[ebp], ecx
$LN3@ucstrTextL:
; Line 2385
	mov	eax, DWORD PTR _ut$[ebp]
	push	0
	push	2
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	mov	edx, DWORD PTR [eax+16]
	push	edx
	call	__allmul
	mov	ecx, DWORD PTR _str$37499[ebp]
	movzx	edx, WORD PTR [ecx+eax]
	test	edx, edx
	jne	SHORT $LN1@ucstrTextL
; Line 2386
	jmp	SHORT $LN2@ucstrTextL
$LN1@ucstrTextL:
; Line 2388
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	add	ecx, 1
	mov	edx, DWORD PTR [eax+20]
	adc	edx, 0
	mov	eax, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [eax+16], ecx
	mov	DWORD PTR [eax+20], edx
; Line 2389
	jmp	SHORT $LN3@ucstrTextL
$LN2@ucstrTextL:
; Line 2390
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR _ut$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+80], edx
	mov	ecx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+84], ecx
; Line 2391
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [edx+44], ecx
; Line 2392
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR _ut$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR [eax+28], edx
; Line 2393
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, -3					; fffffffdH
	mov	edx, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [edx+8], ecx
$LN4@ucstrTextL:
; Line 2395
	mov	ecx, DWORD PTR _ut$[ebp]
	mov	eax, DWORD PTR [ecx+80]
	mov	edx, DWORD PTR [ecx+84]
; Line 2396
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ucstrTextLength ENDP
_TEXT	ENDS
PUBLIC	?__LINE__Var@?1??ucstrTextAccess@@9@4JA@8d672338 ; `ucstrTextAccess'::`2'::__LINE__Var
;	COMDAT ?__LINE__Var@?1??ucstrTextAccess@@9@4JA@8d672338
_DATA	SEGMENT
?__LINE__Var@?1??ucstrTextAccess@@9@4JA@8d672338 DD 0960H ; `ucstrTextAccess'::`2'::__LINE__Var
; Function compile flags: /Odtp /RTCsu /ZI
_DATA	ENDS
;	COMDAT _ucstrTextAccess
_TEXT	SEGMENT
tv435 = -248						; size = 8
tv317 = -248						; size = 8
tv289 = -248						; size = 8
tv279 = -248						; size = 8
tv213 = -245						; size = 1
tv482 = -244						; size = 4
tv265 = -244						; size = 4
tv219 = -244						; size = 4
_retVal$ = -41						; size = 1
_chunkLimit$37525 = -32					; size = 4
_scanLimit$37521 = -20					; size = 4
_str$ = -8						; size = 4
_ut$ = 8						; size = 4
_index$ = 12						; size = 8
_forward$ = 20						; size = 1
_ucstrTextAccess PROC					; COMDAT
; Line 2400
	push	ebp
	mov	ebp, esp
	sub	esp, 248				; 000000f8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-248]
	mov	ecx, 62					; 0000003eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2401
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	mov	DWORD PTR _str$[ebp], ecx
; Line 2405
	cmp	DWORD PTR _index$[ebp+4], 0
	jg	SHORT $LN22@ucstrTextA
	jl	SHORT $LN30@ucstrTextA
	cmp	DWORD PTR _index$[ebp], 0
	jae	SHORT $LN22@ucstrTextA
$LN30@ucstrTextA:
; Line 2406
	mov	DWORD PTR _index$[ebp], 0
	mov	DWORD PTR _index$[ebp+4], 0
	jmp	$breakout$37535
$LN22@ucstrTextA:
; Line 2407
	mov	eax, DWORD PTR _ut$[ebp]
	mov	DWORD PTR tv219[ebp], eax
	mov	ecx, DWORD PTR tv219[ebp]
	mov	edx, DWORD PTR _index$[ebp+4]
	cmp	edx, DWORD PTR [ecx+20]
	jg	$LN20@ucstrTextA
	jl	SHORT $LN31@ucstrTextA
	mov	eax, DWORD PTR tv219[ebp]
	mov	ecx, DWORD PTR _index$[ebp]
	cmp	ecx, DWORD PTR [eax+16]
	jae	SHORT $LN20@ucstrTextA
$LN31@ucstrTextA:
; Line 2410
	push	0
	push	2
	mov	eax, DWORD PTR _index$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _index$[ebp]
	push	ecx
	call	__allmul
	mov	edx, DWORD PTR _str$[ebp]
	movzx	eax, WORD PTR [edx+eax]
	and	eax, -1024				; fffffc00H
	cmp	eax, 56320				; 0000dc00H
	jne	SHORT $LN19@ucstrTextA
	cmp	DWORD PTR _index$[ebp+4], 0
	jl	SHORT $LN19@ucstrTextA
	jg	SHORT $LN32@ucstrTextA
	cmp	DWORD PTR _index$[ebp], 0
	jbe	SHORT $LN19@ucstrTextA
$LN32@ucstrTextA:
	mov	eax, DWORD PTR _index$[ebp]
	sub	eax, 1
	mov	ecx, DWORD PTR _index$[ebp+4]
	sbb	ecx, 0
	push	0
	push	2
	push	ecx
	push	eax
	call	__allmul
	mov	edx, DWORD PTR _str$[ebp]
	movzx	eax, WORD PTR [edx+eax]
	and	eax, -1024				; fffffc00H
	cmp	eax, 55296				; 0000d800H
	jne	SHORT $LN19@ucstrTextA
	mov	eax, DWORD PTR _index$[ebp]
	sub	eax, 1
	mov	ecx, DWORD PTR _index$[ebp+4]
	sbb	ecx, 0
	mov	DWORD PTR _index$[ebp], eax
	mov	DWORD PTR _index$[ebp+4], ecx
$LN19@ucstrTextA:
	jmp	$breakout$37535
$LN20@ucstrTextA:
; Line 2411
	mov	eax, DWORD PTR _ut$[ebp]
	mov	DWORD PTR tv265[ebp], eax
	mov	ecx, DWORD PTR tv265[ebp]
	cmp	DWORD PTR [ecx+84], 0
	jl	SHORT $LN17@ucstrTextA
	jg	SHORT $LN33@ucstrTextA
	mov	edx, DWORD PTR tv265[ebp]
	cmp	DWORD PTR [edx+80], 0
	jb	SHORT $LN17@ucstrTextA
$LN33@ucstrTextA:
; Line 2414
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+80]
	mov	DWORD PTR _index$[ebp], ecx
	mov	edx, DWORD PTR [eax+84]
	mov	DWORD PTR _index$[ebp+4], edx
; Line 2415
	jmp	$breakout$37535
$LN17@ucstrTextA:
; Line 2421
	mov	eax, DWORD PTR _index$[ebp]
	add	eax, 32					; 00000020H
	mov	DWORD PTR _scanLimit$37521[ebp], eax
; Line 2422
	mov	eax, DWORD PTR _index$[ebp]
	add	eax, 32					; 00000020H
	mov	ecx, DWORD PTR _index$[ebp+4]
	adc	ecx, 0
	mov	DWORD PTR tv279[ebp], eax
	mov	DWORD PTR tv279[ebp+4], ecx
	cmp	DWORD PTR tv279[ebp+4], 0
	jg	SHORT $LN14@ucstrTextA
	jl	SHORT $LN34@ucstrTextA
	cmp	DWORD PTR tv279[ebp], 2147483647	; 7fffffffH
	ja	SHORT $LN14@ucstrTextA
$LN34@ucstrTextA:
	mov	eax, DWORD PTR _index$[ebp]
	add	eax, 32					; 00000020H
	mov	ecx, DWORD PTR _index$[ebp+4]
	adc	ecx, 0
	mov	DWORD PTR tv289[ebp], eax
	mov	DWORD PTR tv289[ebp+4], ecx
	cmp	DWORD PTR tv289[ebp+4], 0
	jg	SHORT $LN15@ucstrTextA
	jl	SHORT $LN14@ucstrTextA
	cmp	DWORD PTR tv289[ebp], 0
	jae	SHORT $LN15@ucstrTextA
$LN14@ucstrTextA:
; Line 2423
	mov	DWORD PTR _scanLimit$37521[ebp], 2147483647 ; 7fffffffH
$LN15@ucstrTextA:
; Line 2426
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _chunkLimit$37525[ebp], ecx
	jmp	SHORT $LN13@ucstrTextA
$LN12@ucstrTextA:
; Line 2427
	mov	eax, DWORD PTR _chunkLimit$37525[ebp]
	add	eax, 1
	mov	DWORD PTR _chunkLimit$37525[ebp], eax
$LN13@ucstrTextA:
	mov	eax, DWORD PTR _chunkLimit$37525[ebp]
	cmp	eax, DWORD PTR _scanLimit$37521[ebp]
	jge	$LN11@ucstrTextA
; Line 2428
	mov	eax, DWORD PTR _chunkLimit$37525[ebp]
	mov	ecx, DWORD PTR _str$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	test	edx, edx
	jne	$LN10@ucstrTextA
; Line 2431
	mov	eax, DWORD PTR _chunkLimit$37525[ebp]
	cdq
	mov	ecx, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [ecx+80], eax
	mov	DWORD PTR [ecx+84], edx
; Line 2432
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR _chunkLimit$37525[ebp]
	mov	DWORD PTR [eax+44], ecx
; Line 2433
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR _chunkLimit$37525[ebp]
	mov	DWORD PTR [eax+28], ecx
; Line 2434
	mov	eax, DWORD PTR _chunkLimit$37525[ebp]
	cdq
	mov	DWORD PTR tv317[ebp], eax
	mov	DWORD PTR tv317[ebp+4], edx
	mov	eax, DWORD PTR _index$[ebp+4]
	cmp	eax, DWORD PTR tv317[ebp+4]
	jl	SHORT $LN9@ucstrTextA
	jg	SHORT $LN36@ucstrTextA
	mov	ecx, DWORD PTR _index$[ebp]
	cmp	ecx, DWORD PTR tv317[ebp]
	jb	SHORT $LN9@ucstrTextA
$LN36@ucstrTextA:
; Line 2435
	mov	eax, DWORD PTR _chunkLimit$37525[ebp]
	cdq
	mov	DWORD PTR _index$[ebp], eax
	mov	DWORD PTR _index$[ebp+4], edx
; Line 2436
	jmp	SHORT $LN8@ucstrTextA
$LN9@ucstrTextA:
; Line 2437
	push	0
	push	2
	mov	eax, DWORD PTR _index$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _index$[ebp]
	push	ecx
	call	__allmul
	mov	edx, DWORD PTR _str$[ebp]
	movzx	eax, WORD PTR [edx+eax]
	and	eax, -1024				; fffffc00H
	cmp	eax, 56320				; 0000dc00H
	jne	SHORT $LN8@ucstrTextA
	cmp	DWORD PTR _index$[ebp+4], 0
	jl	SHORT $LN8@ucstrTextA
	jg	SHORT $LN37@ucstrTextA
	cmp	DWORD PTR _index$[ebp], 0
	jbe	SHORT $LN8@ucstrTextA
$LN37@ucstrTextA:
	mov	eax, DWORD PTR _index$[ebp]
	sub	eax, 1
	mov	ecx, DWORD PTR _index$[ebp+4]
	sbb	ecx, 0
	push	0
	push	2
	push	ecx
	push	eax
	call	__allmul
	mov	edx, DWORD PTR _str$[ebp]
	movzx	eax, WORD PTR [edx+eax]
	and	eax, -1024				; fffffc00H
	cmp	eax, 55296				; 0000d800H
	jne	SHORT $LN8@ucstrTextA
	mov	eax, DWORD PTR _index$[ebp]
	sub	eax, 1
	mov	ecx, DWORD PTR _index$[ebp+4]
	sbb	ecx, 0
	mov	DWORD PTR _index$[ebp], eax
	mov	DWORD PTR _index$[ebp+4], ecx
$LN8@ucstrTextA:
; Line 2440
	mov	eax, DWORD PTR _chunkLimit$37525[ebp]
	cdq
	mov	ecx, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [ecx+16], eax
	mov	DWORD PTR [ecx+20], edx
; Line 2441
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, -3					; fffffffdH
	mov	edx, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [edx+8], ecx
; Line 2442
	jmp	$breakout$37535
	jmp	$breakout$37535
$LN10@ucstrTextA:
; Line 2444
	jmp	$LN12@ucstrTextA
$LN11@ucstrTextA:
; Line 2446
	push	0
	push	2
	mov	eax, DWORD PTR _index$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _index$[ebp]
	push	ecx
	call	__allmul
	mov	edx, DWORD PTR _str$[ebp]
	movzx	eax, WORD PTR [edx+eax]
	and	eax, -1024				; fffffc00H
	cmp	eax, 56320				; 0000dc00H
	jne	SHORT $LN5@ucstrTextA
	cmp	DWORD PTR _index$[ebp+4], 0
	jl	SHORT $LN5@ucstrTextA
	jg	SHORT $LN38@ucstrTextA
	cmp	DWORD PTR _index$[ebp], 0
	jbe	SHORT $LN5@ucstrTextA
$LN38@ucstrTextA:
	mov	eax, DWORD PTR _index$[ebp]
	sub	eax, 1
	mov	ecx, DWORD PTR _index$[ebp+4]
	sbb	ecx, 0
	push	0
	push	2
	push	ecx
	push	eax
	call	__allmul
	mov	edx, DWORD PTR _str$[ebp]
	movzx	eax, WORD PTR [edx+eax]
	and	eax, -1024				; fffffc00H
	cmp	eax, 55296				; 0000d800H
	jne	SHORT $LN5@ucstrTextA
	mov	eax, DWORD PTR _index$[ebp]
	sub	eax, 1
	mov	ecx, DWORD PTR _index$[ebp+4]
	sbb	ecx, 0
	mov	DWORD PTR _index$[ebp], eax
	mov	DWORD PTR _index$[ebp+4], ecx
$LN5@ucstrTextA:
; Line 2447
	cmp	DWORD PTR _chunkLimit$37525[ebp], 2147483647 ; 7fffffffH
	jne	SHORT $LN4@ucstrTextA
; Line 2451
	mov	eax, DWORD PTR _chunkLimit$37525[ebp]
	cdq
	mov	ecx, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [ecx+80], eax
	mov	DWORD PTR [ecx+84], edx
; Line 2452
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR _chunkLimit$37525[ebp]
	mov	DWORD PTR [eax+44], ecx
; Line 2453
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR _chunkLimit$37525[ebp]
	mov	DWORD PTR [eax+28], ecx
; Line 2454
	mov	eax, DWORD PTR _chunkLimit$37525[ebp]
	cdq
	mov	DWORD PTR tv435[ebp], eax
	mov	DWORD PTR tv435[ebp+4], edx
	mov	eax, DWORD PTR _index$[ebp+4]
	cmp	eax, DWORD PTR tv435[ebp+4]
	jl	SHORT $LN3@ucstrTextA
	jg	SHORT $LN39@ucstrTextA
	mov	ecx, DWORD PTR _index$[ebp]
	cmp	ecx, DWORD PTR tv435[ebp]
	jbe	SHORT $LN3@ucstrTextA
$LN39@ucstrTextA:
; Line 2455
	mov	eax, DWORD PTR _chunkLimit$37525[ebp]
	cdq
	mov	DWORD PTR _index$[ebp], eax
	mov	DWORD PTR _index$[ebp+4], edx
$LN3@ucstrTextA:
; Line 2457
	mov	eax, DWORD PTR _chunkLimit$37525[ebp]
	cdq
	mov	ecx, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [ecx+16], eax
	mov	DWORD PTR [ecx+20], edx
; Line 2458
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, -3					; fffffffdH
	mov	edx, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [edx+8], ecx
; Line 2459
	jmp	SHORT $breakout$37535
$LN4@ucstrTextA:
; Line 2464
	mov	eax, DWORD PTR _chunkLimit$37525[ebp]
	mov	ecx, DWORD PTR _str$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2-2]
	and	edx, -1024				; fffffc00H
	cmp	edx, 55296				; 0000d800H
	jne	SHORT $LN1@ucstrTextA
; Line 2465
	mov	eax, DWORD PTR _chunkLimit$37525[ebp]
	sub	eax, 1
	mov	DWORD PTR _chunkLimit$37525[ebp], eax
$LN1@ucstrTextA:
; Line 2471
	mov	eax, DWORD PTR _chunkLimit$37525[ebp]
	cdq
	mov	ecx, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [ecx+16], eax
	mov	DWORD PTR [ecx+20], edx
; Line 2472
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR _chunkLimit$37525[ebp]
	mov	DWORD PTR [eax+28], ecx
; Line 2473
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR _chunkLimit$37525[ebp]
	mov	DWORD PTR [eax+44], ecx
$breakout$37535:
; Line 2478
	cmp	DWORD PTR _index$[ebp+4], 0
	jl	SHORT $LN25@ucstrTextA
	jg	SHORT $LN40@ucstrTextA
	cmp	DWORD PTR _index$[ebp], 2147483647	; 7fffffffH
	jbe	SHORT $LN25@ucstrTextA
$LN40@ucstrTextA:
	mov	eax, DWORD PTR ?__LINE__Var@?1??ucstrTextAccess@@9@4JA@8d672338
	add	eax, 78					; 0000004eH
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1FI@DOHBLNEC@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@
	push	OFFSET ??_C@_1CE@DHOOMOBN@?$AAi?$AAn?$AAd?$AAe?$AAx?$AA?$DM?$AA?$DN?$AA0?$AAx?$AA7?$AAf?$AAf?$AAf?$AAf?$AAf?$AAf?$AAf?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN25@ucstrTextA:
; Line 2479
	mov	eax, DWORD PTR _index$[ebp]
	mov	ecx, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [ecx+40], eax
; Line 2482
	movsx	eax, BYTE PTR _forward$[ebp]
	test	eax, eax
	je	SHORT $LN26@ucstrTextA
	mov	ecx, DWORD PTR _ut$[ebp]
	mov	DWORD PTR tv482[ebp], ecx
	mov	edx, DWORD PTR tv482[ebp]
	mov	eax, DWORD PTR _index$[ebp+4]
	cmp	eax, DWORD PTR [edx+20]
	jl	SHORT $LN28@ucstrTextA
	jg	SHORT $LN26@ucstrTextA
	mov	ecx, DWORD PTR tv482[ebp]
	mov	edx, DWORD PTR _index$[ebp]
	cmp	edx, DWORD PTR [ecx+16]
	jb	SHORT $LN28@ucstrTextA
$LN26@ucstrTextA:
	movsx	eax, BYTE PTR _forward$[ebp]
	test	eax, eax
	jne	SHORT $LN27@ucstrTextA
	cmp	DWORD PTR _index$[ebp+4], 0
	jg	SHORT $LN28@ucstrTextA
	jl	SHORT $LN27@ucstrTextA
	cmp	DWORD PTR _index$[ebp], 0
	ja	SHORT $LN28@ucstrTextA
$LN27@ucstrTextA:
	mov	BYTE PTR tv213[ebp], 0
	jmp	SHORT $LN29@ucstrTextA
$LN28@ucstrTextA:
	mov	BYTE PTR tv213[ebp], 1
$LN29@ucstrTextA:
	mov	cl, BYTE PTR tv213[ebp]
	mov	BYTE PTR _retVal$[ebp], cl
; Line 2483
	mov	al, BYTE PTR _retVal$[ebp]
; Line 2484
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 248				; 000000f8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ucstrTextAccess ENDP
_TEXT	ENDS
PUBLIC	??_C@_1M@FKAEOMMA@?$AAd?$AAi?$AA?$DO?$AA?$DN?$AA0?$AA?$AA@ ; `string'
PUBLIC	?__LINE__Var@?1??ucstrTextExtract@@9@4JA@8d672338 ; `ucstrTextExtract'::`2'::__LINE__Var
EXTRN	_uprv_min_56:PROC
;	COMDAT ??_C@_1M@FKAEOMMA@?$AAd?$AAi?$AA?$DO?$AA?$DN?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_1M@FKAEOMMA@?$AAd?$AAi?$AA?$DO?$AA?$DN?$AA0?$AA?$AA@ DB 'd', 00H, 'i'
	DB	00H, '>', 00H, '=', 00H, '0', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??ucstrTextExtract@@9@4JA@8d672338
_DATA	SEGMENT
?__LINE__Var@?1??ucstrTextExtract@@9@4JA@8d672338 DD 09bdH ; `ucstrTextExtract'::`2'::__LINE__Var
; Function compile flags: /Odtp /RTCsu /ZI
_DATA	ENDS
;	COMDAT _ucstrTextExtract
_TEXT	SEGMENT
_strLength$ = -68					; size = 4
_s$ = -56						; size = 4
_limit32$ = -44						; size = 4
_start32$ = -32						; size = 4
_di$ = -20						; size = 4
_si$ = -8						; size = 4
_ut$ = 8						; size = 4
_start$ = 12						; size = 8
_limit$ = 20						; size = 8
_dest$ = 28						; size = 4
_destCapacity$ = 32					; size = 4
_pErrorCode$ = 36					; size = 4
_ucstrTextExtract PROC					; COMDAT
; Line 2493
	push	ebp
	mov	ebp, esp
	sub	esp, 264				; 00000108H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-264]
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2494
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN16@ucstrTextE
; Line 2495
	xor	eax, eax
	jmp	$LN17@ucstrTextE
$LN16@ucstrTextE:
; Line 2497
	cmp	DWORD PTR _destCapacity$[ebp], 0
	jl	SHORT $LN14@ucstrTextE
	cmp	DWORD PTR _dest$[ebp], 0
	jne	SHORT $LN13@ucstrTextE
	cmp	DWORD PTR _destCapacity$[ebp], 0
	jg	SHORT $LN14@ucstrTextE
$LN13@ucstrTextE:
	mov	eax, DWORD PTR _start$[ebp+4]
	cmp	eax, DWORD PTR _limit$[ebp+4]
	jl	SHORT $LN15@ucstrTextE
	jg	SHORT $LN14@ucstrTextE
	mov	ecx, DWORD PTR _start$[ebp]
	cmp	ecx, DWORD PTR _limit$[ebp]
	jbe	SHORT $LN15@ucstrTextE
$LN14@ucstrTextE:
; Line 2498
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 1
; Line 2499
	xor	eax, eax
	jmp	$LN17@ucstrTextE
$LN15@ucstrTextE:
; Line 2511
	push	1
	mov	eax, DWORD PTR _start$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _start$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ut$[ebp]
	push	edx
	call	_ucstrTextAccess
	add	esp, 16					; 00000010H
; Line 2512
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	DWORD PTR _s$[ebp], ecx
; Line 2513
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR _start32$[ebp], ecx
; Line 2515
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+80]
	mov	DWORD PTR _strLength$[ebp], ecx
; Line 2516
	cmp	DWORD PTR _strLength$[ebp], 0
	jl	SHORT $LN12@ucstrTextE
; Line 2517
	mov	eax, DWORD PTR _strLength$[ebp]
	cdq
	push	edx
	push	eax
	lea	eax, DWORD PTR _limit$[ebp]
	push	eax
	call	?pinIndex@@YAHAA_J_J@Z			; pinIndex
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _limit32$[ebp], eax
; Line 2518
	jmp	SHORT $LN11@ucstrTextE
$LN12@ucstrTextE:
; Line 2519
	push	0
	push	2147483647				; 7fffffffH
	lea	eax, DWORD PTR _limit$[ebp]
	push	eax
	call	?pinIndex@@YAHAA_J_J@Z			; pinIndex
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _limit32$[ebp], eax
$LN11@ucstrTextE:
; Line 2521
	mov	DWORD PTR _di$[ebp], 0
; Line 2522
	mov	eax, DWORD PTR _start32$[ebp]
	mov	DWORD PTR _si$[ebp], eax
	jmp	SHORT $LN10@ucstrTextE
$LN9@ucstrTextE:
	mov	eax, DWORD PTR _si$[ebp]
	add	eax, 1
	mov	DWORD PTR _si$[ebp], eax
$LN10@ucstrTextE:
	mov	eax, DWORD PTR _si$[ebp]
	cmp	eax, DWORD PTR _limit32$[ebp]
	jge	$LN8@ucstrTextE
; Line 2523
	cmp	DWORD PTR _strLength$[ebp], 0
	jge	SHORT $LN7@ucstrTextE
	mov	eax, DWORD PTR _si$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	test	edx, edx
	jne	SHORT $LN7@ucstrTextE
; Line 2525
	mov	eax, DWORD PTR _si$[ebp]
	cdq
	mov	ecx, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [ecx+80], eax
	mov	DWORD PTR [ecx+84], edx
; Line 2526
	mov	eax, DWORD PTR _si$[ebp]
	cdq
	mov	ecx, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [ecx+16], eax
	mov	DWORD PTR [ecx+20], edx
; Line 2527
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR _si$[ebp]
	mov	DWORD PTR [eax+44], ecx
; Line 2528
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR _si$[ebp]
	mov	DWORD PTR [eax+28], ecx
; Line 2529
	mov	eax, DWORD PTR _si$[ebp]
	mov	DWORD PTR _strLength$[ebp], eax
; Line 2530
	jmp	SHORT $LN8@ucstrTextE
$LN7@ucstrTextE:
; Line 2532
	cmp	DWORD PTR _di$[ebp], 0
	jge	SHORT $LN19@ucstrTextE
	mov	eax, DWORD PTR ?__LINE__Var@?1??ucstrTextExtract@@9@4JA@8d672338
	add	eax, 39					; 00000027H
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1FI@DOHBLNEC@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@
	push	OFFSET ??_C@_1M@FKAEOMMA@?$AAd?$AAi?$AA?$DO?$AA?$DN?$AA0?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN19@ucstrTextE:
; Line 2533
	mov	eax, DWORD PTR _di$[ebp]
	cmp	eax, DWORD PTR _destCapacity$[ebp]
	jge	SHORT $LN6@ucstrTextE
; Line 2535
	mov	eax, DWORD PTR _di$[ebp]
	mov	ecx, DWORD PTR _dest$[ebp]
	mov	edx, DWORD PTR _si$[ebp]
	mov	esi, DWORD PTR _s$[ebp]
	mov	dx, WORD PTR [esi+edx*2]
	mov	WORD PTR [ecx+eax*2], dx
; Line 2536
	jmp	SHORT $LN5@ucstrTextE
$LN6@ucstrTextE:
; Line 2537
	cmp	DWORD PTR _strLength$[ebp], 0
	jl	SHORT $LN5@ucstrTextE
; Line 2540
	mov	eax, DWORD PTR _limit32$[ebp]
	sub	eax, DWORD PTR _start32$[ebp]
	mov	DWORD PTR _di$[ebp], eax
; Line 2541
	mov	eax, DWORD PTR _limit32$[ebp]
	mov	DWORD PTR _si$[ebp], eax
; Line 2542
	jmp	SHORT $LN8@ucstrTextE
$LN5@ucstrTextE:
; Line 2545
	mov	eax, DWORD PTR _di$[ebp]
	add	eax, 1
	mov	DWORD PTR _di$[ebp], eax
; Line 2546
	jmp	$LN9@ucstrTextE
$LN8@ucstrTextE:
; Line 2551
	cmp	DWORD PTR _si$[ebp], 0
	jle	SHORT $LN3@ucstrTextE
	mov	eax, DWORD PTR _si$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2-2]
	and	edx, -1024				; fffffc00H
	cmp	edx, 55296				; 0000d800H
	jne	SHORT $LN3@ucstrTextE
	mov	eax, DWORD PTR _si$[ebp]
	cmp	eax, DWORD PTR _strLength$[ebp]
	jl	SHORT $LN2@ucstrTextE
	cmp	DWORD PTR _strLength$[ebp], 0
	jge	SHORT $LN3@ucstrTextE
$LN2@ucstrTextE:
	mov	eax, DWORD PTR _si$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	and	edx, -1024				; fffffc00H
	cmp	edx, 56320				; 0000dc00H
	jne	SHORT $LN3@ucstrTextE
; Line 2553
	mov	eax, DWORD PTR _di$[ebp]
	cmp	eax, DWORD PTR _destCapacity$[ebp]
	jge	SHORT $LN3@ucstrTextE
; Line 2555
	mov	eax, DWORD PTR _di$[ebp]
	mov	ecx, DWORD PTR _dest$[ebp]
	mov	edx, DWORD PTR _si$[ebp]
	mov	esi, DWORD PTR _s$[ebp]
	mov	dx, WORD PTR [esi+edx*2]
	mov	WORD PTR [ecx+eax*2], dx
	mov	eax, DWORD PTR _di$[ebp]
	add	eax, 1
	mov	DWORD PTR _di$[ebp], eax
	mov	ecx, DWORD PTR _si$[ebp]
	add	ecx, 1
	mov	DWORD PTR _si$[ebp], ecx
$LN3@ucstrTextE:
; Line 2560
	mov	eax, DWORD PTR _start32$[ebp]
	add	eax, DWORD PTR _destCapacity$[ebp]
	push	eax
	mov	ecx, DWORD PTR _strLength$[ebp]
	push	ecx
	call	_uprv_min_56
	add	esp, 8
	mov	edx, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [edx+40], eax
; Line 2564
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _di$[ebp]
	push	ecx
	mov	edx, DWORD PTR _destCapacity$[ebp]
	push	edx
	mov	eax, DWORD PTR _dest$[ebp]
	push	eax
	call	_u_terminateUChars_56
	add	esp, 16					; 00000010H
; Line 2565
	mov	eax, DWORD PTR _di$[ebp]
$LN17@ucstrTextE:
; Line 2566
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 264				; 00000108H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ucstrTextExtract ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _utext_openUChars_56
_TEXT	SEGMENT
tv93 = -200						; size = 8
_ut$ = 8						; size = 4
_s$ = 12						; size = 4
_length$ = 16						; size = 8
_status$ = 24						; size = 4
_utext_openUChars_56 PROC				; COMDAT
; Line 2591
	push	ebp
	mov	ebp, esp
	sub	esp, 200				; 000000c8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-200]
	mov	ecx, 50					; 00000032H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2592
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN6@utext_open@5
; Line 2593
	xor	eax, eax
	jmp	$LN7@utext_open@5
$LN6@utext_open@5:
; Line 2595
	cmp	DWORD PTR _s$[ebp], 0
	jne	SHORT $LN5@utext_open@5
	mov	eax, DWORD PTR _length$[ebp]
	or	eax, DWORD PTR _length$[ebp+4]
	jne	SHORT $LN5@utext_open@5
; Line 2596
	mov	DWORD PTR _s$[ebp], OFFSET _gEmptyUString
$LN5@utext_open@5:
; Line 2598
	cmp	DWORD PTR _s$[ebp], 0
	je	SHORT $LN3@utext_open@5
	cmp	DWORD PTR _length$[ebp+4], -1
	jl	SHORT $LN3@utext_open@5
	jg	SHORT $LN11@utext_open@5
	cmp	DWORD PTR _length$[ebp], -1
	jb	SHORT $LN3@utext_open@5
$LN11@utext_open@5:
	cmp	DWORD PTR _length$[ebp+4], 0
	jl	SHORT $LN4@utext_open@5
	jg	SHORT $LN3@utext_open@5
	cmp	DWORD PTR _length$[ebp], 2147483647	; 7fffffffH
	jbe	SHORT $LN4@utext_open@5
$LN3@utext_open@5:
; Line 2599
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 1
; Line 2600
	xor	eax, eax
	jmp	$LN7@utext_open@5
$LN4@utext_open@5:
; Line 2602
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _ut$[ebp]
	push	ecx
	call	_utext_setup_56
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _ut$[ebp], eax
; Line 2603
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_SUCCESS@@YACW4UErrorCode@@@Z		; U_SUCCESS
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	$LN2@utext_open@5
; Line 2604
	mov	eax, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [eax+52], OFFSET _ucstrFuncs
; Line 2605
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+60], ecx
; Line 2606
	mov	eax, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [eax+8], 4
; Line 2607
	mov	eax, DWORD PTR _length$[ebp]
	and	eax, DWORD PTR _length$[ebp+4]
	cmp	eax, -1
	jne	SHORT $LN1@utext_open@5
; Line 2608
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	or	ecx, 2
	mov	edx, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [edx+8], ecx
$LN1@utext_open@5:
; Line 2610
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR _length$[ebp]
	mov	DWORD PTR [eax+80], ecx
	mov	edx, DWORD PTR _length$[ebp+4]
	mov	DWORD PTR [eax+84], edx
; Line 2611
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+48], ecx
; Line 2612
	mov	eax, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [eax+32], 0
	mov	DWORD PTR [eax+36], 0
; Line 2613
	cmp	DWORD PTR _length$[ebp+4], 0
	jl	SHORT $LN9@utext_open@5
	jg	SHORT $LN13@utext_open@5
	cmp	DWORD PTR _length$[ebp], 0
	jb	SHORT $LN9@utext_open@5
$LN13@utext_open@5:
	mov	eax, DWORD PTR _length$[ebp]
	mov	DWORD PTR tv93[ebp], eax
	mov	ecx, DWORD PTR _length$[ebp+4]
	mov	DWORD PTR tv93[ebp+4], ecx
	jmp	SHORT $LN10@utext_open@5
$LN9@utext_open@5:
	mov	DWORD PTR tv93[ebp], 0
	mov	DWORD PTR tv93[ebp+4], 0
$LN10@utext_open@5:
	mov	edx, DWORD PTR _ut$[ebp]
	mov	eax, DWORD PTR tv93[ebp]
	mov	DWORD PTR [edx+16], eax
	mov	ecx, DWORD PTR tv93[ebp+4]
	mov	DWORD PTR [edx+20], ecx
; Line 2614
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [edx+44], ecx
; Line 2615
	mov	eax, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [eax+40], 0
; Line 2616
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR _ut$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR [eax+28], edx
$LN2@utext_open@5:
; Line 2618
	mov	eax, DWORD PTR _ut$[ebp]
$LN7@utext_open@5:
; Line 2619
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 200				; 000000c8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_utext_openUChars_56 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _charIterTextClose
_TEXT	SEGMENT
tv75 = -232						; size = 4
$T45151 = -224						; size = 4
$T45152 = -212						; size = 4
_ci$ = -8						; size = 4
_ut$ = 8						; size = 4
_charIterTextClose PROC					; COMDAT
; Line 2641
	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2645
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	mov	DWORD PTR _ci$[ebp], ecx
; Line 2646
	mov	eax, DWORD PTR _ci$[ebp]
	mov	DWORD PTR $T45152[ebp], eax
	mov	ecx, DWORD PTR $T45152[ebp]
	mov	DWORD PTR $T45151[ebp], ecx
	cmp	DWORD PTR $T45151[ebp], 0
	je	SHORT $LN3@charIterTe
	mov	esi, esp
	push	1
	mov	edx, DWORD PTR $T45151[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR $T45151[ebp]
	mov	edx, DWORD PTR [eax]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv75[ebp], eax
	jmp	SHORT $LN4@charIterTe
$LN3@charIterTe:
	mov	DWORD PTR tv75[ebp], 0
$LN4@charIterTe:
; Line 2647
	mov	eax, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [eax+72], 0
; Line 2648
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_charIterTextClose ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _charIterTextLength
_TEXT	SEGMENT
_ut$ = 8						; size = 4
_charIterTextLength PROC				; COMDAT
; Line 2651
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2652
	mov	eax, DWORD PTR _ut$[ebp]
	mov	eax, DWORD PTR [eax+80]
	cdq
; Line 2653
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_charIterTextLength ENDP
_TEXT	ENDS
PUBLIC	??_C@_1FE@MMBHBCHK@?$AAu?$AAt?$AA?9?$AA?$DO?$AAc?$AAh?$AAu?$AAn?$AAk?$AAO?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?$DO?$AA?$DN?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAu?$AAt?$AA?9?$AA?$DO?$AAc?$AAh?$AAu?$AAn?$AAk?$AAO@ ; `string'
PUBLIC	?__LINE__Var@?1??charIterTextAccess@@9@4JA@8d672338 ; `charIterTextAccess'::`2'::__LINE__Var
;	COMDAT ??_C@_1FE@MMBHBCHK@?$AAu?$AAt?$AA?9?$AA?$DO?$AAc?$AAh?$AAu?$AAn?$AAk?$AAO?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?$DO?$AA?$DN?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAu?$AAt?$AA?9?$AA?$DO?$AAc?$AAh?$AAu?$AAn?$AAk?$AAO@
CONST	SEGMENT
??_C@_1FE@MMBHBCHK@?$AAu?$AAt?$AA?9?$AA?$DO?$AAc?$AAh?$AAu?$AAn?$AAk?$AAO?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?$DO?$AA?$DN?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAu?$AAt?$AA?9?$AA?$DO?$AAc?$AAh?$AAu?$AAn?$AAk?$AAO@ DB 'u'
	DB	00H, 't', 00H, '-', 00H, '>', 00H, 'c', 00H, 'h', 00H, 'u', 00H
	DB	'n', 00H, 'k', 00H, 'O', 00H, 'f', 00H, 'f', 00H, 's', 00H, 'e'
	DB	00H, 't', 00H, '>', 00H, '=', 00H, '0', 00H, ' ', 00H, '&', 00H
	DB	'&', 00H, ' ', 00H, 'u', 00H, 't', 00H, '-', 00H, '>', 00H, 'c'
	DB	00H, 'h', 00H, 'u', 00H, 'n', 00H, 'k', 00H, 'O', 00H, 'f', 00H
	DB	'f', 00H, 's', 00H, 'e', 00H, 't', 00H, '<', 00H, '=', 00H, '1'
	DB	00H, '6', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??charIterTextAccess@@9@4JA@8d672338
_DATA	SEGMENT
?__LINE__Var@?1??charIterTextAccess@@9@4JA@8d672338 DD 0a60H ; `charIterTextAccess'::`2'::__LINE__Var
; Function compile flags: /Odtp /RTCsu /ZI
_DATA	ENDS
;	COMDAT _charIterTextAccess
_TEXT	SEGMENT
tv295 = -288						; size = 4
tv248 = -288						; size = 8
tv231 = -288						; size = 4
tv211 = -288						; size = 4
tv325 = -284						; size = 4
tv292 = -284						; size = 8
tv228 = -284						; size = 8
tv208 = -284						; size = 8
tv324 = -280						; size = 4
tv247 = -280						; size = 4
tv195 = -280						; size = 4
_success$ = -77						; size = 1
_i$ = -68						; size = 4
_needChunkSetup$ = -53					; size = 1
_buf$ = -44						; size = 4
_neededIndex$ = -32					; size = 4
_clippedIndex$ = -20					; size = 4
_ci$ = -8						; size = 4
_ut$ = 8						; size = 4
_index$ = 12						; size = 8
_forward$ = 20						; size = 1
_charIterTextAccess PROC				; COMDAT
; Line 2656
	push	ebp
	mov	ebp, esp
	sub	esp, 288				; 00000120H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-288]
	mov	ecx, 72					; 00000048H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2657
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	mov	DWORD PTR _ci$[ebp], ecx
; Line 2659
	mov	eax, DWORD PTR _index$[ebp]
	mov	DWORD PTR _clippedIndex$[ebp], eax
; Line 2660
	cmp	DWORD PTR _clippedIndex$[ebp], 0
	jge	SHORT $LN19@charIterTe@2
; Line 2661
	mov	DWORD PTR _clippedIndex$[ebp], 0
	jmp	SHORT $LN18@charIterTe@2
$LN19@charIterTe@2:
; Line 2662
	mov	eax, DWORD PTR _clippedIndex$[ebp]
	cdq
	mov	ecx, DWORD PTR _ut$[ebp]
	mov	DWORD PTR tv208[ebp], eax
	mov	DWORD PTR tv208[ebp+4], edx
	mov	DWORD PTR tv211[ebp], ecx
	mov	edx, DWORD PTR tv211[ebp]
	mov	eax, DWORD PTR tv208[ebp+4]
	cmp	eax, DWORD PTR [edx+84]
	jl	SHORT $LN18@charIterTe@2
	jg	SHORT $LN26@charIterTe@2
	mov	ecx, DWORD PTR tv211[ebp]
	mov	edx, DWORD PTR tv208[ebp]
	cmp	edx, DWORD PTR [ecx+80]
	jb	SHORT $LN18@charIterTe@2
$LN26@charIterTe@2:
; Line 2663
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+80]
	mov	DWORD PTR _clippedIndex$[ebp], ecx
$LN18@charIterTe@2:
; Line 2665
	mov	eax, DWORD PTR _clippedIndex$[ebp]
	mov	DWORD PTR _neededIndex$[ebp], eax
; Line 2666
	movsx	eax, BYTE PTR _forward$[ebp]
	test	eax, eax
	jne	SHORT $LN16@charIterTe@2
	cmp	DWORD PTR _neededIndex$[ebp], 0
	jle	SHORT $LN16@charIterTe@2
; Line 2668
	mov	eax, DWORD PTR _neededIndex$[ebp]
	sub	eax, 1
	mov	DWORD PTR _neededIndex$[ebp], eax
	jmp	SHORT $LN15@charIterTe@2
$LN16@charIterTe@2:
; Line 2669
	movsx	eax, BYTE PTR _forward$[ebp]
	test	eax, eax
	je	SHORT $LN15@charIterTe@2
	mov	eax, DWORD PTR _neededIndex$[ebp]
	cdq
	mov	ecx, DWORD PTR _ut$[ebp]
	mov	DWORD PTR tv228[ebp], eax
	mov	DWORD PTR tv228[ebp+4], edx
	mov	DWORD PTR tv231[ebp], ecx
	mov	edx, DWORD PTR tv231[ebp]
	mov	eax, DWORD PTR tv228[ebp]
	cmp	eax, DWORD PTR [edx+80]
	jne	SHORT $LN15@charIterTe@2
	mov	ecx, DWORD PTR tv231[ebp]
	mov	edx, DWORD PTR tv228[ebp+4]
	cmp	edx, DWORD PTR [ecx+84]
	jne	SHORT $LN15@charIterTe@2
	cmp	DWORD PTR _neededIndex$[ebp], 0
	jle	SHORT $LN15@charIterTe@2
; Line 2671
	mov	eax, DWORD PTR _neededIndex$[ebp]
	sub	eax, 1
	mov	DWORD PTR _neededIndex$[ebp], eax
$LN15@charIterTe@2:
; Line 2675
	mov	eax, DWORD PTR _neededIndex$[ebp]
	and	eax, -2147483633			; 8000000fH
	jns	SHORT $LN29@charIterTe@2
	dec	eax
	or	eax, -16				; fffffff0H
	inc	eax
$LN29@charIterTe@2:
	mov	ecx, DWORD PTR _neededIndex$[ebp]
	sub	ecx, eax
	mov	DWORD PTR _neededIndex$[ebp], ecx
; Line 2677
	mov	DWORD PTR _buf$[ebp], 0
; Line 2678
	mov	BYTE PTR _needChunkSetup$[ebp], 1
; Line 2680
	mov	eax, DWORD PTR _neededIndex$[ebp]
	cdq
	mov	ecx, DWORD PTR _ut$[ebp]
	mov	DWORD PTR tv247[ebp], ecx
	mov	DWORD PTR tv248[ebp], eax
	mov	DWORD PTR tv248[ebp+4], edx
	mov	edx, DWORD PTR tv247[ebp]
	mov	eax, DWORD PTR [edx+32]
	cmp	eax, DWORD PTR tv248[ebp]
	jne	SHORT $LN13@charIterTe@2
	mov	ecx, DWORD PTR tv247[ebp]
	mov	edx, DWORD PTR [ecx+36]
	cmp	edx, DWORD PTR tv248[ebp+4]
	jne	SHORT $LN13@charIterTe@2
; Line 2682
	mov	BYTE PTR _needChunkSetup$[ebp], 0
	jmp	$LN12@charIterTe@2
$LN13@charIterTe@2:
; Line 2683
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	cmp	ecx, DWORD PTR _neededIndex$[ebp]
	jne	SHORT $LN11@charIterTe@2
; Line 2685
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	DWORD PTR _buf$[ebp], ecx
	jmp	$LN12@charIterTe@2
$LN11@charIterTe@2:
; Line 2686
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+92]
	cmp	ecx, DWORD PTR _neededIndex$[ebp]
	jne	SHORT $LN9@charIterTe@2
; Line 2688
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	mov	DWORD PTR _buf$[ebp], ecx
; Line 2689
	jmp	$LN12@charIterTe@2
$LN9@charIterTe@2:
; Line 2693
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	DWORD PTR _buf$[ebp], ecx
; Line 2694
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR _ut$[ebp]
	mov	edx, DWORD PTR [eax+64]
	cmp	edx, DWORD PTR [ecx+48]
	jne	SHORT $LN7@charIterTe@2
; Line 2695
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	mov	DWORD PTR _buf$[ebp], ecx
$LN7@charIterTe@2:
; Line 2697
	mov	esi, esp
	mov	eax, DWORD PTR _neededIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ci$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _ci$[ebp]
	mov	eax, DWORD PTR [edx+56]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2698
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN6@charIterTe@2
$LN5@charIterTe@2:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN6@charIterTe@2:
	cmp	DWORD PTR _i$[ebp], 16			; 00000010H
	jge	SHORT $LN12@charIterTe@2
; Line 2699
	mov	eax, DWORD PTR _ci$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR _ci$[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _buf$[ebp]
	mov	WORD PTR [edx+ecx*2], ax
; Line 2700
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, DWORD PTR _neededIndex$[ebp]
	cdq
	mov	ecx, DWORD PTR _ut$[ebp]
	mov	DWORD PTR tv292[ebp], eax
	mov	DWORD PTR tv292[ebp+4], edx
	mov	DWORD PTR tv295[ebp], ecx
	mov	edx, DWORD PTR tv295[ebp]
	mov	eax, DWORD PTR tv292[ebp+4]
	cmp	eax, DWORD PTR [edx+84]
	jl	SHORT $LN3@charIterTe@2
	jg	SHORT $LN27@charIterTe@2
	mov	ecx, DWORD PTR tv295[ebp]
	mov	edx, DWORD PTR tv292[ebp]
	cmp	edx, DWORD PTR [ecx+80]
	jbe	SHORT $LN3@charIterTe@2
$LN27@charIterTe@2:
; Line 2701
	jmp	SHORT $LN12@charIterTe@2
$LN3@charIterTe@2:
; Line 2703
	jmp	SHORT $LN5@charIterTe@2
$LN12@charIterTe@2:
; Line 2708
	movsx	eax, BYTE PTR _needChunkSetup$[ebp]
	test	eax, eax
	je	$LN2@charIterTe@2
; Line 2709
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR _buf$[ebp]
	mov	DWORD PTR [eax+48], ecx
; Line 2710
	mov	eax, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [eax+44], 16			; 00000010H
; Line 2711
	mov	eax, DWORD PTR _neededIndex$[ebp]
	cdq
	mov	ecx, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [ecx+32], eax
	mov	DWORD PTR [ecx+36], edx
; Line 2712
	mov	eax, DWORD PTR _neededIndex$[ebp]
	add	eax, 16					; 00000010H
	cdq
	mov	ecx, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [ecx+16], eax
	mov	DWORD PTR [ecx+20], edx
; Line 2713
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR _ut$[ebp]
	mov	DWORD PTR tv324[ebp], eax
	mov	DWORD PTR tv325[ebp], ecx
	mov	edx, DWORD PTR tv324[ebp]
	mov	eax, DWORD PTR tv325[ebp]
	mov	ecx, DWORD PTR [edx+20]
	cmp	ecx, DWORD PTR [eax+84]
	jl	SHORT $LN1@charIterTe@2
	jg	SHORT $LN28@charIterTe@2
	mov	edx, DWORD PTR tv324[ebp]
	mov	eax, DWORD PTR tv325[ebp]
	mov	ecx, DWORD PTR [edx+16]
	cmp	ecx, DWORD PTR [eax+80]
	jbe	SHORT $LN1@charIterTe@2
$LN28@charIterTe@2:
; Line 2714
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR _ut$[ebp]
	mov	edx, DWORD PTR [ecx+80]
	mov	DWORD PTR [eax+16], edx
	mov	ecx, DWORD PTR [ecx+84]
	mov	DWORD PTR [eax+20], ecx
; Line 2715
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _ut$[ebp]
	mov	eax, DWORD PTR [edx+32]
	sub	ecx, eax
	mov	edx, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [edx+44], ecx
$LN1@charIterTe@2:
; Line 2717
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR _ut$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR [eax+28], edx
; Line 2718
	mov	eax, DWORD PTR _ut$[ebp]
	cmp	DWORD PTR [eax+40], 0
	jl	SHORT $LN22@charIterTe@2
	mov	ecx, DWORD PTR _ut$[ebp]
	cmp	DWORD PTR [ecx+40], 16			; 00000010H
	jle	SHORT $LN2@charIterTe@2
$LN22@charIterTe@2:
	mov	edx, DWORD PTR ?__LINE__Var@?1??charIterTextAccess@@9@4JA@8d672338
	add	edx, 62					; 0000003eH
	mov	esi, esp
	push	edx
	push	OFFSET ??_C@_1FI@DOHBLNEC@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@
	push	OFFSET ??_C@_1FE@MMBHBCHK@?$AAu?$AAt?$AA?9?$AA?$DO?$AAc?$AAh?$AAu?$AAn?$AAk?$AAO?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?$DO?$AA?$DN?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAu?$AAt?$AA?9?$AA?$DO?$AAc?$AAh?$AAu?$AAn?$AAk?$AAO@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@charIterTe@2:
; Line 2720
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR _clippedIndex$[ebp]
	sub	edx, ecx
	mov	eax, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [eax+40], edx
; Line 2721
	movsx	eax, BYTE PTR _forward$[ebp]
	test	eax, eax
	je	SHORT $LN24@charIterTe@2
	mov	ecx, DWORD PTR _ut$[ebp]
	mov	edx, DWORD PTR _ut$[ebp]
	mov	eax, DWORD PTR [ecx+40]
	xor	ecx, ecx
	cmp	eax, DWORD PTR [edx+44]
	setl	cl
	mov	DWORD PTR tv195[ebp], ecx
	jmp	SHORT $LN25@charIterTe@2
$LN24@charIterTe@2:
	mov	edx, DWORD PTR _ut$[ebp]
	xor	eax, eax
	cmp	DWORD PTR [edx+40], 0
	setg	al
	mov	DWORD PTR tv195[ebp], eax
$LN25@charIterTe@2:
	mov	cl, BYTE PTR tv195[ebp]
	mov	BYTE PTR _success$[ebp], cl
; Line 2722
	mov	al, BYTE PTR _success$[ebp]
; Line 2723
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 288				; 00000120H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_charIterTextAccess ENDP
_TEXT	ENDS
PUBLIC	_utext_openCharacterIterator_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _charIterTextClone
_TEXT	SEGMENT
_ix$37667 = -24						; size = 8
_srcCI$37664 = -8					; size = 4
_dest$ = 8						; size = 4
_src$ = 12						; size = 4
_deep$ = 16						; size = 1
_status$ = 20						; size = 4
_charIterTextClone PROC					; COMDAT
; Line 2726
	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2727
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN4@charIterTe@3
; Line 2728
	xor	eax, eax
	jmp	$LN5@charIterTe@3
$LN4@charIterTe@3:
; Line 2731
	movsx	eax, BYTE PTR _deep$[ebp]
	test	eax, eax
	je	SHORT $LN3@charIterTe@3
; Line 2733
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 16			; 00000010H
; Line 2734
	xor	eax, eax
	jmp	$LN5@charIterTe@3
; Line 2735
	jmp	$LN2@charIterTe@3
$LN3@charIterTe@3:
; Line 2736
	mov	eax, DWORD PTR _src$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	mov	DWORD PTR _srcCI$37664[ebp], ecx
; Line 2737
	mov	eax, DWORD PTR _srcCI$37664[ebp]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR _srcCI$37664[ebp]
	mov	eax, DWORD PTR [edx+28]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _srcCI$37664[ebp], eax
; Line 2738
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _srcCI$37664[ebp]
	push	ecx
	mov	edx, DWORD PTR _dest$[ebp]
	push	edx
	call	_utext_openCharacterIterator_56
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _dest$[ebp], eax
; Line 2739
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN1@charIterTe@3
; Line 2740
	mov	eax, DWORD PTR _dest$[ebp]
	jmp	SHORT $LN5@charIterTe@3
$LN1@charIterTe@3:
; Line 2744
	mov	eax, DWORD PTR _src$[ebp]
	push	eax
	call	_utext_getNativeIndex_56
	add	esp, 4
	mov	DWORD PTR _ix$37667[ebp], eax
	mov	DWORD PTR _ix$37667[ebp+4], edx
; Line 2745
	mov	eax, DWORD PTR _ix$37667[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _ix$37667[ebp]
	push	ecx
	mov	edx, DWORD PTR _dest$[ebp]
	push	edx
	call	_utext_setNativeIndex_56
	add	esp, 12					; 0000000cH
; Line 2746
	mov	eax, DWORD PTR _dest$[ebp]
	mov	ecx, DWORD PTR _srcCI$37664[ebp]
	mov	DWORD PTR [eax+72], ecx
$LN2@charIterTe@3:
; Line 2748
	mov	eax, DWORD PTR _dest$[ebp]
$LN5@charIterTe@3:
; Line 2749
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_charIterTextClone ENDP
_TEXT	ENDS
PUBLIC	??_C@_1BI@DBALLOBD@?$AAd?$AAe?$AAs?$AAt?$AAi?$AA?$CL?$AAl?$AAe?$AAn?$AA?$DO?$AA0?$AA?$AA@ ; `string'
PUBLIC	?__LINE__Var@?1??charIterTextExtract@@9@4JA@8d672338 ; `charIterTextExtract'::`2'::__LINE__Var
;	COMDAT ??_C@_1BI@DBALLOBD@?$AAd?$AAe?$AAs?$AAt?$AAi?$AA?$CL?$AAl?$AAe?$AAn?$AA?$DO?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_1BI@DBALLOBD@?$AAd?$AAe?$AAs?$AAt?$AAi?$AA?$CL?$AAl?$AAe?$AAn?$AA?$DO?$AA0?$AA?$AA@ DB 'd'
	DB	00H, 'e', 00H, 's', 00H, 't', 00H, 'i', 00H, '+', 00H, 'l', 00H
	DB	'e', 00H, 'n', 00H, '>', 00H, '0', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??charIterTextExtract@@9@4JA@8d672338
_DATA	SEGMENT
?__LINE__Var@?1??charIterTextExtract@@9@4JA@8d672338 DD 0ac4H ; `charIterTextExtract'::`2'::__LINE__Var
; Function compile flags: /Odtp /RTCsu /ZI
_DATA	ENDS
;	COMDAT _charIterTextExtract
_TEXT	SEGMENT
_len$37694 = -104					; size = 4
_c$37693 = -92						; size = 4
_ci$ = -80						; size = 4
_copyLimit$ = -68					; size = 4
_srci$ = -56						; size = 4
_desti$ = -44						; size = 4
_limit32$ = -32						; size = 4
_start32$ = -20						; size = 4
_length$ = -8						; size = 4
_ut$ = 8						; size = 4
_start$ = 12						; size = 8
_limit$ = 20						; size = 8
_dest$ = 28						; size = 4
_destCapacity$ = 32					; size = 4
_status$ = 36						; size = 4
_charIterTextExtract PROC				; COMDAT
; Line 2756
	push	ebp
	mov	ebp, esp
	sub	esp, 300				; 0000012cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-300]
	mov	ecx, 75					; 0000004bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2757
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN10@charIterTe@4
; Line 2758
	xor	eax, eax
	jmp	$LN11@charIterTe@4
$LN10@charIterTe@4:
; Line 2760
	cmp	DWORD PTR _destCapacity$[ebp], 0
	jl	SHORT $LN8@charIterTe@4
	cmp	DWORD PTR _dest$[ebp], 0
	jne	SHORT $LN7@charIterTe@4
	cmp	DWORD PTR _destCapacity$[ebp], 0
	jg	SHORT $LN8@charIterTe@4
$LN7@charIterTe@4:
	mov	eax, DWORD PTR _start$[ebp+4]
	cmp	eax, DWORD PTR _limit$[ebp+4]
	jl	SHORT $LN9@charIterTe@4
	jg	SHORT $LN8@charIterTe@4
	mov	ecx, DWORD PTR _start$[ebp]
	cmp	ecx, DWORD PTR _limit$[ebp]
	jbe	SHORT $LN9@charIterTe@4
$LN8@charIterTe@4:
; Line 2761
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 1
; Line 2762
	xor	eax, eax
	jmp	$LN11@charIterTe@4
$LN9@charIterTe@4:
; Line 2764
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+80]
	mov	DWORD PTR _length$[ebp], ecx
; Line 2765
	mov	eax, DWORD PTR _length$[ebp]
	cdq
	push	edx
	push	eax
	lea	eax, DWORD PTR _start$[ebp]
	push	eax
	call	?pinIndex@@YAHAA_J_J@Z			; pinIndex
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _start32$[ebp], eax
; Line 2766
	mov	eax, DWORD PTR _length$[ebp]
	cdq
	push	edx
	push	eax
	lea	eax, DWORD PTR _limit$[ebp]
	push	eax
	call	?pinIndex@@YAHAA_J_J@Z			; pinIndex
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _limit32$[ebp], eax
; Line 2767
	mov	DWORD PTR _desti$[ebp], 0
; Line 2771
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	mov	DWORD PTR _ci$[ebp], ecx
; Line 2772
	mov	esi, esp
	mov	eax, DWORD PTR _start32$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ci$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _ci$[ebp]
	mov	eax, DWORD PTR [edx+60]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2773
	mov	ecx, DWORD PTR _ci$[ebp]
	call	?getIndex@CharacterIterator@icu_56@@QBEHXZ ; icu_56::CharacterIterator::getIndex
	mov	DWORD PTR _srci$[ebp], eax
; Line 2774
	mov	eax, DWORD PTR _srci$[ebp]
	mov	DWORD PTR _copyLimit$[ebp], eax
$LN6@charIterTe@4:
; Line 2775
	mov	eax, DWORD PTR _srci$[ebp]
	cmp	eax, DWORD PTR _limit32$[ebp]
	jge	$LN5@charIterTe@4
; Line 2776
	mov	eax, DWORD PTR _ci$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR _ci$[ebp]
	mov	eax, DWORD PTR [edx+20]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _c$37693[ebp], eax
; Line 2777
	mov	eax, 65535				; 0000ffffH
	cmp	eax, DWORD PTR _c$37693[ebp]
	sbb	ecx, ecx
	neg	ecx
	add	ecx, 1
	mov	DWORD PTR _len$37694[ebp], ecx
; Line 2778
	mov	eax, DWORD PTR _desti$[ebp]
	add	eax, DWORD PTR _len$37694[ebp]
	test	eax, eax
	jg	SHORT $LN13@charIterTe@4
	mov	ecx, DWORD PTR ?__LINE__Var@?1??charIterTextExtract@@9@4JA@8d672338
	add	ecx, 22					; 00000016H
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_1FI@DOHBLNEC@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@
	push	OFFSET ??_C@_1BI@DBALLOBD@?$AAd?$AAe?$AAs?$AAt?$AAi?$AA?$CL?$AAl?$AAe?$AAn?$AA?$DO?$AA0?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN13@charIterTe@4:
; Line 2779
	mov	eax, DWORD PTR _desti$[ebp]
	add	eax, DWORD PTR _len$37694[ebp]
	cmp	eax, DWORD PTR _destCapacity$[ebp]
	jg	SHORT $LN4@charIterTe@4
; Line 2780
	cmp	DWORD PTR _c$37693[ebp], 65535		; 0000ffffH
	ja	SHORT $LN3@charIterTe@4
	mov	eax, DWORD PTR _desti$[ebp]
	mov	ecx, DWORD PTR _dest$[ebp]
	mov	dx, WORD PTR _c$37693[ebp]
	mov	WORD PTR [ecx+eax*2], dx
	mov	eax, DWORD PTR _desti$[ebp]
	add	eax, 1
	mov	DWORD PTR _desti$[ebp], eax
	jmp	SHORT $LN2@charIterTe@4
$LN3@charIterTe@4:
	mov	eax, DWORD PTR _c$37693[ebp]
	sar	eax, 10					; 0000000aH
	add	eax, 55232				; 0000d7c0H
	mov	ecx, DWORD PTR _desti$[ebp]
	mov	edx, DWORD PTR _dest$[ebp]
	mov	WORD PTR [edx+ecx*2], ax
	mov	eax, DWORD PTR _desti$[ebp]
	add	eax, 1
	mov	DWORD PTR _desti$[ebp], eax
	mov	eax, DWORD PTR _c$37693[ebp]
	and	eax, 1023				; 000003ffH
	or	eax, 56320				; 0000dc00H
	mov	ecx, DWORD PTR _desti$[ebp]
	mov	edx, DWORD PTR _dest$[ebp]
	mov	WORD PTR [edx+ecx*2], ax
	mov	eax, DWORD PTR _desti$[ebp]
	add	eax, 1
	mov	DWORD PTR _desti$[ebp], eax
$LN2@charIterTe@4:
; Line 2781
	mov	eax, DWORD PTR _srci$[ebp]
	add	eax, DWORD PTR _len$37694[ebp]
	mov	DWORD PTR _copyLimit$[ebp], eax
; Line 2782
	jmp	SHORT $LN1@charIterTe@4
$LN4@charIterTe@4:
; Line 2783
	mov	eax, DWORD PTR _desti$[ebp]
	add	eax, DWORD PTR _len$37694[ebp]
	mov	DWORD PTR _desti$[ebp], eax
; Line 2784
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
$LN1@charIterTe@4:
; Line 2786
	mov	eax, DWORD PTR _srci$[ebp]
	add	eax, DWORD PTR _len$37694[ebp]
	mov	DWORD PTR _srci$[ebp], eax
; Line 2787
	jmp	$LN6@charIterTe@4
$LN5@charIterTe@4:
; Line 2789
	push	1
	mov	eax, DWORD PTR _copyLimit$[ebp]
	cdq
	push	edx
	push	eax
	mov	eax, DWORD PTR _ut$[ebp]
	push	eax
	call	_charIterTextAccess
	add	esp, 16					; 00000010H
; Line 2791
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _desti$[ebp]
	push	ecx
	mov	edx, DWORD PTR _destCapacity$[ebp]
	push	edx
	mov	eax, DWORD PTR _dest$[ebp]
	push	eax
	call	_u_terminateUChars_56
	add	esp, 16					; 00000010H
; Line 2792
	mov	eax, DWORD PTR _desti$[ebp]
$LN11@charIterTe@4:
; Line 2793
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 300				; 0000012cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_charIterTextExtract ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _utext_openCharacterIterator_56
_TEXT	SEGMENT
_extraSpace$ = -8					; size = 4
_ut$ = 8						; size = 4
_ci$ = 12						; size = 4
_status$ = 16						; size = 4
_utext_openCharacterIterator_56 PROC			; COMDAT
; Line 2816
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2817
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN3@utext_open@6
; Line 2818
	xor	eax, eax
	jmp	$LN4@utext_open@6
$LN3@utext_open@6:
; Line 2821
	mov	ecx, DWORD PTR _ci$[ebp]
	call	?startIndex@CharacterIterator@icu_56@@QBEHXZ ; icu_56::CharacterIterator::startIndex
	test	eax, eax
	jle	SHORT $LN2@utext_open@6
; Line 2823
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 16			; 00000010H
; Line 2824
	xor	eax, eax
	jmp	$LN4@utext_open@6
$LN2@utext_open@6:
; Line 2828
	mov	DWORD PTR _extraSpace$[ebp], 64		; 00000040H
; Line 2829
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _extraSpace$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ut$[ebp]
	push	edx
	call	_utext_setup_56
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _ut$[ebp], eax
; Line 2830
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_SUCCESS@@YACW4UErrorCode@@@Z		; U_SUCCESS
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	$LN1@utext_open@6
; Line 2831
	mov	eax, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [eax+52], OFFSET _charIterFuncs
; Line 2832
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR _ci$[ebp]
	mov	DWORD PTR [eax+60], ecx
; Line 2833
	mov	eax, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 2834
	mov	ecx, DWORD PTR _ci$[ebp]
	call	?endIndex@CharacterIterator@icu_56@@QBEHXZ ; icu_56::CharacterIterator::endIndex
	cdq
	mov	ecx, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [ecx+80], eax
	mov	DWORD PTR [ecx+84], edx
; Line 2835
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR _ut$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	DWORD PTR [eax+64], edx
; Line 2836
	mov	eax, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [eax+88], -1
; Line 2837
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	add	ecx, 32					; 00000020H
	mov	edx, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [edx+68], ecx
; Line 2838
	mov	eax, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [eax+92], -1
; Line 2846
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR _ut$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	mov	DWORD PTR [eax+48], edx
; Line 2847
	mov	eax, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [eax+32], -1
	mov	DWORD PTR [eax+36], -1
; Line 2848
	mov	eax, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [eax+40], 1
; Line 2849
	mov	eax, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [eax+16], 0
	mov	DWORD PTR [eax+20], 0
; Line 2850
	mov	eax, DWORD PTR _ut$[ebp]
	mov	DWORD PTR [eax+44], 0
; Line 2851
	mov	eax, DWORD PTR _ut$[ebp]
	mov	ecx, DWORD PTR _ut$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR [eax+28], edx
$LN1@utext_open@6:
; Line 2853
	mov	eax, DWORD PTR _ut$[ebp]
$LN4@utext_open@6:
; Line 2854
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_utext_openCharacterIterator_56 ENDP
_TEXT	ENDS
PUBLIC	?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::data, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
; Line 1500
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1501
	mov	ecx, DWORD PTR _this$[ebp]
	call	?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
; Line 1502
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::data
_TEXT	ENDS
PUBLIC	?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str, COMDAT
; _this$ = ecx
; Line 1495
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1496
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
; Line 1497
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx
; Line 1510
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1511
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+20]
; Line 1512
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT
tv82 = -208						; size = 4
_this$ = -8						; size = 4
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr, COMDAT
; _this$ = ecx
; Line 2008
	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 2010
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+24], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR tv82[ebp], edx
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	mov	DWORD PTR tv82[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv82[ebp]
; Line 2011
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
_TEXT	ENDS
END
