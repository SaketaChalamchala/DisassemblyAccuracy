; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\mozilla\intl\icu\source\common\ustring.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
_UNESCAPE_MAP DW 061H
	DW	07H
	DW	062H
	DW	08H
	DW	065H
	DW	01bH
	DW	066H
	DW	0cH
	DW	06eH
	DW	0aH
	DW	072H
	DW	0dH
	DW	074H
	DW	09H
	DW	076H
	DW	0bH
CONST	ENDS
PUBLIC	??2@YAPAXI@Z					; operator new
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File d:\mozilla\intl\icu\source\common\unicode\utypes.h
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT ??2@YAPAXI@Z
_TEXT	SEGMENT
_q$ = -8						; size = 4
___formal$ = 8						; size = 4
??2@YAPAXI@Z PROC					; operator new, COMDAT
; Line 411
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 412
	mov	DWORD PTR _q$[ebp], 0
; Line 413
	mov	eax, DWORD PTR _q$[ebp]
	mov	BYTE PTR [eax], 5
; Line 414
	mov	eax, DWORD PTR _q$[ebp]
; Line 415
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??2@YAPAXI@Z ENDP					; operator new
_TEXT	ENDS
PUBLIC	??3@YAXPAX@Z					; operator delete
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??3@YAXPAX@Z
_TEXT	SEGMENT
_q$ = -8						; size = 4
___formal$ = 8						; size = 4
??3@YAXPAX@Z PROC					; operator delete, COMDAT
; Line 439
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 440
	mov	DWORD PTR _q$[ebp], 0
; Line 441
	mov	eax, DWORD PTR _q$[ebp]
	mov	BYTE PTR [eax], 5
; Line 442
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??3@YAXPAX@Z ENDP					; operator delete
_TEXT	ENDS
PUBLIC	_u_memchr_56
PUBLIC	_u_strlen_56
PUBLIC	_u_strchr_56
PUBLIC	_u_strFindFirst_56
EXTRN	__RTC_CheckEsp:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _u_strFindFirst_56
_TEXT	SEGMENT
tv166 = -304						; size = 4
tv161 = -304						; size = 4
tv86 = -304						; size = 4
tv73 = -304						; size = 4
_preLimit$12131 = -104					; size = 4
_limit$12130 = -92					; size = 4
_cq$ = -80						; size = 2
_cs$ = -68						; size = 2
_c$ = -56						; size = 2
_subLimit$ = -44					; size = 4
_q$ = -32						; size = 4
_p$ = -20						; size = 4
_start$ = -8						; size = 4
_s$ = 8							; size = 4
_length$ = 12						; size = 4
_sub$ = 16						; size = 4
_subLength$ = 20					; size = 4
_u_strFindFirst_56 PROC					; COMDAT
; File d:\mozilla\intl\icu\source\common\ustring.cpp
; Line 54
	push	ebp
	mov	ebp, esp
	sub	esp, 304				; 00000130H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-304]
	mov	ecx, 76					; 0000004cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 58
	cmp	DWORD PTR _sub$[ebp], 0
	je	SHORT $LN41@u_strFindF
	cmp	DWORD PTR _subLength$[ebp], -1
	jge	SHORT $LN42@u_strFindF
$LN41@u_strFindF:
; Line 59
	mov	eax, DWORD PTR _s$[ebp]
	jmp	$LN43@u_strFindF
$LN42@u_strFindF:
; Line 61
	cmp	DWORD PTR _s$[ebp], 0
	je	SHORT $LN39@u_strFindF
	cmp	DWORD PTR _length$[ebp], -1
	jge	SHORT $LN40@u_strFindF
$LN39@u_strFindF:
; Line 62
	xor	eax, eax
	jmp	$LN43@u_strFindF
$LN40@u_strFindF:
; Line 65
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR _start$[ebp], eax
; Line 67
	cmp	DWORD PTR _length$[ebp], 0
	jge	$LN38@u_strFindF
	cmp	DWORD PTR _subLength$[ebp], 0
	jge	$LN38@u_strFindF
; Line 69
	mov	eax, DWORD PTR _sub$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR _cs$[ebp], cx
	movzx	edx, WORD PTR _cs$[ebp]
	mov	eax, DWORD PTR _sub$[ebp]
	add	eax, 2
	mov	DWORD PTR _sub$[ebp], eax
	test	edx, edx
	jne	SHORT $LN45@u_strFindF
	mov	DWORD PTR tv73[ebp], 1
	jmp	SHORT $LN46@u_strFindF
$LN45@u_strFindF:
	mov	DWORD PTR tv73[ebp], 0
$LN46@u_strFindF:
	cmp	DWORD PTR tv73[ebp], 0
	je	SHORT $LN37@u_strFindF
; Line 70
	mov	eax, DWORD PTR _s$[ebp]
	jmp	$LN43@u_strFindF
$LN37@u_strFindF:
; Line 72
	mov	eax, DWORD PTR _sub$[ebp]
	movzx	ecx, WORD PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN35@u_strFindF
	movzx	eax, WORD PTR _cs$[ebp]
	and	eax, -2048				; fffff800H
	cmp	eax, 55296				; 0000d800H
	je	SHORT $LN35@u_strFindF
; Line 74
	movzx	eax, WORD PTR _cs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	call	_u_strchr_56
	add	esp, 8
	jmp	$LN43@u_strFindF
$LN35@u_strFindF:
; Line 77
	mov	eax, DWORD PTR _s$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR _c$[ebp], cx
	movzx	edx, WORD PTR _c$[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	add	eax, 2
	mov	DWORD PTR _s$[ebp], eax
	test	edx, edx
	je	SHORT $LN47@u_strFindF
	mov	DWORD PTR tv86[ebp], 1
	jmp	SHORT $LN48@u_strFindF
$LN47@u_strFindF:
	mov	DWORD PTR tv86[ebp], 0
$LN48@u_strFindF:
	cmp	DWORD PTR tv86[ebp], 0
	je	$LN34@u_strFindF
; Line 78
	movzx	eax, WORD PTR _c$[ebp]
	movzx	ecx, WORD PTR _cs$[ebp]
	cmp	eax, ecx
	jne	$LN33@u_strFindF
; Line 80
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR _p$[ebp], eax
; Line 81
	mov	eax, DWORD PTR _sub$[ebp]
	mov	DWORD PTR _q$[ebp], eax
$LN32@u_strFindF:
; Line 83
	mov	eax, DWORD PTR _q$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR _cq$[ebp], cx
	movzx	edx, WORD PTR _cq$[ebp]
	test	edx, edx
	jne	SHORT $LN30@u_strFindF
; Line 84
	push	0
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	sub	ecx, 2
	push	ecx
	mov	edx, DWORD PTR _start$[ebp]
	push	edx
	call	?isMatchAtCPBoundary@@YACPB_W000@Z	; isMatchAtCPBoundary
	add	esp, 16					; 00000010H
	movsx	eax, al
	test	eax, eax
	je	SHORT $LN29@u_strFindF
; Line 85
	mov	eax, DWORD PTR _s$[ebp]
	sub	eax, 2
	jmp	$LN43@u_strFindF
; Line 86
	jmp	SHORT $LN30@u_strFindF
$LN29@u_strFindF:
; Line 87
	jmp	SHORT $LN33@u_strFindF
$LN30@u_strFindF:
; Line 90
	mov	eax, DWORD PTR _p$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR _c$[ebp], cx
	movzx	edx, WORD PTR _c$[ebp]
	test	edx, edx
	jne	SHORT $LN27@u_strFindF
; Line 91
	xor	eax, eax
	jmp	$LN43@u_strFindF
$LN27@u_strFindF:
; Line 93
	movzx	eax, WORD PTR _c$[ebp]
	movzx	ecx, WORD PTR _cq$[ebp]
	cmp	eax, ecx
	je	SHORT $LN26@u_strFindF
; Line 94
	jmp	SHORT $LN33@u_strFindF
$LN26@u_strFindF:
; Line 96
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 2
	mov	DWORD PTR _p$[ebp], eax
; Line 97
	mov	eax, DWORD PTR _q$[ebp]
	add	eax, 2
	mov	DWORD PTR _q$[ebp], eax
; Line 98
	jmp	SHORT $LN32@u_strFindF
$LN33@u_strFindF:
; Line 100
	jmp	$LN35@u_strFindF
$LN34@u_strFindF:
; Line 103
	xor	eax, eax
	jmp	$LN43@u_strFindF
$LN38@u_strFindF:
; Line 106
	cmp	DWORD PTR _subLength$[ebp], 0
	jge	SHORT $LN25@u_strFindF
; Line 107
	mov	eax, DWORD PTR _sub$[ebp]
	push	eax
	call	_u_strlen_56
	add	esp, 4
	mov	DWORD PTR _subLength$[ebp], eax
$LN25@u_strFindF:
; Line 109
	cmp	DWORD PTR _subLength$[ebp], 0
	jne	SHORT $LN24@u_strFindF
; Line 110
	mov	eax, DWORD PTR _s$[ebp]
	jmp	$LN43@u_strFindF
$LN24@u_strFindF:
; Line 114
	mov	eax, DWORD PTR _sub$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR _cs$[ebp], cx
	mov	edx, DWORD PTR _sub$[ebp]
	add	edx, 2
	mov	DWORD PTR _sub$[ebp], edx
; Line 115
	mov	eax, DWORD PTR _subLength$[ebp]
	sub	eax, 1
	mov	DWORD PTR _subLength$[ebp], eax
; Line 116
	mov	eax, DWORD PTR _subLength$[ebp]
	mov	ecx, DWORD PTR _sub$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR _subLimit$[ebp], edx
; Line 118
	cmp	DWORD PTR _subLength$[ebp], 0
	jne	SHORT $LN23@u_strFindF
	movzx	eax, WORD PTR _cs$[ebp]
	and	eax, -2048				; fffff800H
	cmp	eax, 55296				; 0000d800H
	je	SHORT $LN23@u_strFindF
; Line 120
	cmp	DWORD PTR _length$[ebp], 0
	jge	SHORT $LN49@u_strFindF
	movzx	eax, WORD PTR _cs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	call	_u_strchr_56
	add	esp, 8
	mov	DWORD PTR tv161[ebp], eax
	jmp	SHORT $LN50@u_strFindF
$LN49@u_strFindF:
	mov	edx, DWORD PTR _length$[ebp]
	push	edx
	movzx	eax, WORD PTR _cs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	call	_u_memchr_56
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv161[ebp], eax
$LN50@u_strFindF:
	mov	eax, DWORD PTR tv161[ebp]
	jmp	$LN43@u_strFindF
$LN23@u_strFindF:
; Line 123
	cmp	DWORD PTR _length$[ebp], 0
	jge	$LN22@u_strFindF
$LN21@u_strFindF:
; Line 125
	mov	eax, DWORD PTR _s$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR _c$[ebp], cx
	movzx	edx, WORD PTR _c$[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	add	eax, 2
	mov	DWORD PTR _s$[ebp], eax
	test	edx, edx
	je	SHORT $LN51@u_strFindF
	mov	DWORD PTR tv166[ebp], 1
	jmp	SHORT $LN52@u_strFindF
$LN51@u_strFindF:
	mov	DWORD PTR tv166[ebp], 0
$LN52@u_strFindF:
	cmp	DWORD PTR tv166[ebp], 0
	je	$LN20@u_strFindF
; Line 126
	movzx	eax, WORD PTR _c$[ebp]
	movzx	ecx, WORD PTR _cs$[ebp]
	cmp	eax, ecx
	jne	$LN19@u_strFindF
; Line 128
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR _p$[ebp], eax
; Line 129
	mov	eax, DWORD PTR _sub$[ebp]
	mov	DWORD PTR _q$[ebp], eax
$LN18@u_strFindF:
; Line 131
	mov	eax, DWORD PTR _q$[ebp]
	cmp	eax, DWORD PTR _subLimit$[ebp]
	jne	SHORT $LN16@u_strFindF
; Line 132
	push	0
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	sub	ecx, 2
	push	ecx
	mov	edx, DWORD PTR _start$[ebp]
	push	edx
	call	?isMatchAtCPBoundary@@YACPB_W000@Z	; isMatchAtCPBoundary
	add	esp, 16					; 00000010H
	movsx	eax, al
	test	eax, eax
	je	SHORT $LN15@u_strFindF
; Line 133
	mov	eax, DWORD PTR _s$[ebp]
	sub	eax, 2
	jmp	$LN43@u_strFindF
; Line 134
	jmp	SHORT $LN16@u_strFindF
$LN15@u_strFindF:
; Line 135
	jmp	SHORT $LN19@u_strFindF
$LN16@u_strFindF:
; Line 138
	mov	eax, DWORD PTR _p$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR _c$[ebp], cx
	movzx	edx, WORD PTR _c$[ebp]
	test	edx, edx
	jne	SHORT $LN13@u_strFindF
; Line 139
	xor	eax, eax
	jmp	$LN43@u_strFindF
$LN13@u_strFindF:
; Line 141
	movzx	eax, WORD PTR _c$[ebp]
	mov	ecx, DWORD PTR _q$[ebp]
	movzx	edx, WORD PTR [ecx]
	cmp	eax, edx
	je	SHORT $LN12@u_strFindF
; Line 142
	jmp	SHORT $LN19@u_strFindF
$LN12@u_strFindF:
; Line 144
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 2
	mov	DWORD PTR _p$[ebp], eax
; Line 145
	mov	eax, DWORD PTR _q$[ebp]
	add	eax, 2
	mov	DWORD PTR _q$[ebp], eax
; Line 146
	jmp	SHORT $LN18@u_strFindF
$LN19@u_strFindF:
; Line 148
	jmp	$LN21@u_strFindF
$LN20@u_strFindF:
; Line 149
	jmp	$LN11@u_strFindF
$LN22@u_strFindF:
; Line 153
	mov	eax, DWORD PTR _length$[ebp]
	cmp	eax, DWORD PTR _subLength$[ebp]
	jg	SHORT $LN10@u_strFindF
; Line 154
	xor	eax, eax
	jmp	$LN43@u_strFindF
$LN10@u_strFindF:
; Line 157
	mov	eax, DWORD PTR _length$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR _limit$12130[ebp], edx
; Line 160
	mov	eax, DWORD PTR _subLength$[ebp]
	shl	eax, 1
	mov	ecx, DWORD PTR _limit$12130[ebp]
	sub	ecx, eax
	mov	DWORD PTR _preLimit$12131[ebp], ecx
$LN9@u_strFindF:
; Line 162
	mov	eax, DWORD PTR _s$[ebp]
	cmp	eax, DWORD PTR _preLimit$12131[ebp]
	je	$LN11@u_strFindF
; Line 163
	mov	eax, DWORD PTR _s$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR _c$[ebp], cx
	mov	edx, DWORD PTR _s$[ebp]
	add	edx, 2
	mov	DWORD PTR _s$[ebp], edx
; Line 164
	movzx	eax, WORD PTR _c$[ebp]
	movzx	ecx, WORD PTR _cs$[ebp]
	cmp	eax, ecx
	jne	SHORT $LN7@u_strFindF
; Line 166
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR _p$[ebp], eax
; Line 167
	mov	eax, DWORD PTR _sub$[ebp]
	mov	DWORD PTR _q$[ebp], eax
$LN6@u_strFindF:
; Line 169
	mov	eax, DWORD PTR _q$[ebp]
	cmp	eax, DWORD PTR _subLimit$[ebp]
	jne	SHORT $LN4@u_strFindF
; Line 170
	mov	eax, DWORD PTR _limit$12130[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	sub	edx, 2
	push	edx
	mov	eax, DWORD PTR _start$[ebp]
	push	eax
	call	?isMatchAtCPBoundary@@YACPB_W000@Z	; isMatchAtCPBoundary
	add	esp, 16					; 00000010H
	movsx	ecx, al
	test	ecx, ecx
	je	SHORT $LN3@u_strFindF
; Line 171
	mov	eax, DWORD PTR _s$[ebp]
	sub	eax, 2
	jmp	SHORT $LN43@u_strFindF
; Line 172
	jmp	SHORT $LN4@u_strFindF
$LN3@u_strFindF:
; Line 173
	jmp	SHORT $LN7@u_strFindF
$LN4@u_strFindF:
; Line 176
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, WORD PTR [eax]
	mov	edx, DWORD PTR _q$[ebp]
	movzx	eax, WORD PTR [edx]
	cmp	ecx, eax
	je	SHORT $LN1@u_strFindF
; Line 177
	jmp	SHORT $LN7@u_strFindF
$LN1@u_strFindF:
; Line 179
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 2
	mov	DWORD PTR _p$[ebp], eax
; Line 180
	mov	eax, DWORD PTR _q$[ebp]
	add	eax, 2
	mov	DWORD PTR _q$[ebp], eax
; Line 181
	jmp	SHORT $LN6@u_strFindF
$LN7@u_strFindF:
; Line 183
	jmp	$LN9@u_strFindF
$LN11@u_strFindF:
; Line 187
	xor	eax, eax
$LN43@u_strFindF:
; Line 188
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 304				; 00000130H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_u_strFindFirst_56 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?isMatchAtCPBoundary@@YACPB_W000@Z
_TEXT	SEGMENT
_start$ = 8						; size = 4
_match$ = 12						; size = 4
_matchLimit$ = 16					; size = 4
_limit$ = 20						; size = 4
?isMatchAtCPBoundary@@YACPB_W000@Z PROC			; isMatchAtCPBoundary, COMDAT
; Line 40
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 41
	mov	eax, DWORD PTR _match$[ebp]
	movzx	ecx, WORD PTR [eax]
	and	ecx, -1024				; fffffc00H
	cmp	ecx, 56320				; 0000dc00H
	jne	SHORT $LN2@isMatchAtC
	mov	eax, DWORD PTR _start$[ebp]
	cmp	eax, DWORD PTR _match$[ebp]
	je	SHORT $LN2@isMatchAtC
	mov	eax, DWORD PTR _match$[ebp]
	movzx	ecx, WORD PTR [eax-2]
	and	ecx, -1024				; fffffc00H
	cmp	ecx, 55296				; 0000d800H
	jne	SHORT $LN2@isMatchAtC
; Line 43
	xor	al, al
	jmp	SHORT $LN3@isMatchAtC
$LN2@isMatchAtC:
; Line 45
	mov	eax, DWORD PTR _matchLimit$[ebp]
	movzx	ecx, WORD PTR [eax-2]
	and	ecx, -1024				; fffffc00H
	cmp	ecx, 55296				; 0000d800H
	jne	SHORT $LN1@isMatchAtC
	mov	eax, DWORD PTR _match$[ebp]
	cmp	eax, DWORD PTR _limit$[ebp]
	je	SHORT $LN1@isMatchAtC
	mov	eax, DWORD PTR _matchLimit$[ebp]
	movzx	ecx, WORD PTR [eax]
	and	ecx, -1024				; fffffc00H
	cmp	ecx, 56320				; 0000dc00H
	jne	SHORT $LN1@isMatchAtC
; Line 47
	xor	al, al
	jmp	SHORT $LN3@isMatchAtC
$LN1@isMatchAtC:
; Line 49
	mov	al, 1
$LN3@isMatchAtC:
; Line 50
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?isMatchAtCPBoundary@@YACPB_W000@Z ENDP			; isMatchAtCPBoundary
_TEXT	ENDS
PUBLIC	_u_strstr_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _u_strstr_56
_TEXT	SEGMENT
_s$ = 8							; size = 4
_substring$ = 12					; size = 4
_u_strstr_56 PROC					; COMDAT
; Line 191
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 192
	push	-1
	mov	eax, DWORD PTR _substring$[ebp]
	push	eax
	push	-1
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	call	_u_strFindFirst_56
	add	esp, 16					; 00000010H
; Line 193
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_u_strstr_56 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _u_strchr_56
_TEXT	SEGMENT
_cs$12155 = -8						; size = 2
_s$ = 8							; size = 4
_c$ = 12						; size = 2
_u_strchr_56 PROC					; COMDAT
; Line 196
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 197
	movzx	eax, WORD PTR _c$[ebp]
	and	eax, -2048				; fffff800H
	cmp	eax, 55296				; 0000d800H
	jne	SHORT $LN4@u_strchr_5
; Line 199
	push	1
	lea	eax, DWORD PTR _c$[ebp]
	push	eax
	push	-1
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	call	_u_strFindFirst_56
	add	esp, 16					; 00000010H
	jmp	SHORT $LN7@u_strchr_5
; Line 200
	jmp	SHORT $LN7@u_strchr_5
$LN4@u_strchr_5:
; Line 205
	mov	eax, DWORD PTR _s$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR _cs$12155[ebp], cx
	movzx	edx, WORD PTR _cs$12155[ebp]
	movzx	eax, WORD PTR _c$[ebp]
	cmp	edx, eax
	jne	SHORT $LN2@u_strchr_5
; Line 206
	mov	eax, DWORD PTR _s$[ebp]
	jmp	SHORT $LN7@u_strchr_5
$LN2@u_strchr_5:
; Line 208
	movzx	eax, WORD PTR _cs$12155[ebp]
	test	eax, eax
	jne	SHORT $LN1@u_strchr_5
; Line 209
	xor	eax, eax
	jmp	SHORT $LN7@u_strchr_5
$LN1@u_strchr_5:
; Line 211
	mov	eax, DWORD PTR _s$[ebp]
	add	eax, 2
	mov	DWORD PTR _s$[ebp], eax
; Line 212
	jmp	SHORT $LN4@u_strchr_5
$LN7@u_strchr_5:
; Line 214
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_u_strchr_56 ENDP
_TEXT	ENDS
PUBLIC	_u_strchr32_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _u_strchr32_56
_TEXT	SEGMENT
tv78 = -232						; size = 4
_trail$12175 = -32					; size = 2
_lead$12173 = -20					; size = 2
_cs$12172 = -8						; size = 2
_s$ = 8							; size = 4
_c$ = 12						; size = 4
_u_strchr32_56 PROC					; COMDAT
; Line 217
	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 218
	cmp	DWORD PTR _c$[ebp], 65535		; 0000ffffH
	ja	SHORT $LN7@u_strchr32
; Line 220
	movzx	eax, WORD PTR _c$[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	call	_u_strchr_56
	add	esp, 8
	jmp	$LN8@u_strchr32
	jmp	$LN8@u_strchr32
$LN7@u_strchr32:
; Line 221
	cmp	DWORD PTR _c$[ebp], 1114111		; 0010ffffH
	ja	$LN5@u_strchr32
; Line 223
	mov	eax, DWORD PTR _c$[ebp]
	sar	eax, 10					; 0000000aH
	add	eax, 55232				; 0000d7c0H
	mov	WORD PTR _lead$12173[ebp], ax
	mov	eax, DWORD PTR _c$[ebp]
	and	eax, 1023				; 000003ffH
	or	eax, 56320				; 0000dc00H
	mov	WORD PTR _trail$12175[ebp], ax
$LN4@u_strchr32:
; Line 225
	mov	eax, DWORD PTR _s$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR _cs$12172[ebp], cx
	movzx	edx, WORD PTR _cs$12172[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	add	eax, 2
	mov	DWORD PTR _s$[ebp], eax
	test	edx, edx
	je	SHORT $LN10@u_strchr32
	mov	DWORD PTR tv78[ebp], 1
	jmp	SHORT $LN11@u_strchr32
$LN10@u_strchr32:
	mov	DWORD PTR tv78[ebp], 0
$LN11@u_strchr32:
	cmp	DWORD PTR tv78[ebp], 0
	je	SHORT $LN3@u_strchr32
; Line 226
	movzx	eax, WORD PTR _cs$12172[ebp]
	movzx	ecx, WORD PTR _lead$12173[ebp]
	cmp	eax, ecx
	jne	SHORT $LN2@u_strchr32
	mov	eax, DWORD PTR _s$[ebp]
	movzx	ecx, WORD PTR [eax]
	movzx	edx, WORD PTR _trail$12175[ebp]
	cmp	ecx, edx
	jne	SHORT $LN2@u_strchr32
; Line 227
	mov	eax, DWORD PTR _s$[ebp]
	sub	eax, 2
	jmp	SHORT $LN8@u_strchr32
$LN2@u_strchr32:
; Line 229
	jmp	SHORT $LN4@u_strchr32
$LN3@u_strchr32:
; Line 230
	xor	eax, eax
	jmp	SHORT $LN8@u_strchr32
; Line 231
	jmp	SHORT $LN8@u_strchr32
$LN5@u_strchr32:
; Line 233
	xor	eax, eax
$LN8@u_strchr32:
; Line 235
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_u_strchr32_56 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _u_memchr_56
_TEXT	SEGMENT
_limit$12192 = -8					; size = 4
_s$ = 8							; size = 4
_c$ = 12						; size = 2
_count$ = 16						; size = 4
_u_memchr_56 PROC					; COMDAT
; Line 238
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 239
	cmp	DWORD PTR _count$[ebp], 0
	jg	SHORT $LN8@u_memchr_5
; Line 240
	xor	eax, eax
	jmp	SHORT $LN9@u_memchr_5
	jmp	SHORT $LN9@u_memchr_5
$LN8@u_memchr_5:
; Line 241
	movzx	eax, WORD PTR _c$[ebp]
	and	eax, -2048				; fffff800H
	cmp	eax, 55296				; 0000d800H
	jne	SHORT $LN6@u_memchr_5
; Line 243
	push	1
	lea	eax, DWORD PTR _c$[ebp]
	push	eax
	mov	ecx, DWORD PTR _count$[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	call	_u_strFindFirst_56
	add	esp, 16					; 00000010H
	jmp	SHORT $LN9@u_memchr_5
; Line 244
	jmp	SHORT $LN9@u_memchr_5
$LN6@u_memchr_5:
; Line 246
	mov	eax, DWORD PTR _count$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR _limit$12192[ebp], edx
$LN4@u_memchr_5:
; Line 248
	mov	eax, DWORD PTR _s$[ebp]
	movzx	ecx, WORD PTR [eax]
	movzx	edx, WORD PTR _c$[ebp]
	cmp	ecx, edx
	jne	SHORT $LN3@u_memchr_5
; Line 249
	mov	eax, DWORD PTR _s$[ebp]
	jmp	SHORT $LN9@u_memchr_5
$LN3@u_memchr_5:
; Line 251
	mov	eax, DWORD PTR _s$[ebp]
	add	eax, 2
	mov	DWORD PTR _s$[ebp], eax
	mov	ecx, DWORD PTR _s$[ebp]
	cmp	ecx, DWORD PTR _limit$12192[ebp]
	jne	SHORT $LN4@u_memchr_5
; Line 252
	xor	eax, eax
$LN9@u_memchr_5:
; Line 254
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_u_memchr_56 ENDP
_TEXT	ENDS
PUBLIC	_u_memchr32_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _u_memchr32_56
_TEXT	SEGMENT
_trail$12214 = -32					; size = 2
_lead$12212 = -20					; size = 2
_limit$12211 = -8					; size = 4
_s$ = 8							; size = 4
_c$ = 12						; size = 4
_count$ = 16						; size = 4
_u_memchr32_56 PROC					; COMDAT
; Line 257
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 258
	cmp	DWORD PTR _c$[ebp], 65535		; 0000ffffH
	ja	SHORT $LN10@u_memchr32
; Line 260
	mov	eax, DWORD PTR _count$[ebp]
	push	eax
	movzx	ecx, WORD PTR _c$[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	call	_u_memchr_56
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN11@u_memchr32
	jmp	SHORT $LN11@u_memchr32
$LN10@u_memchr32:
; Line 261
	cmp	DWORD PTR _count$[ebp], 2
	jge	SHORT $LN8@u_memchr32
; Line 263
	xor	eax, eax
	jmp	SHORT $LN11@u_memchr32
	jmp	SHORT $LN11@u_memchr32
$LN8@u_memchr32:
; Line 264
	cmp	DWORD PTR _c$[ebp], 1114111		; 0010ffffH
	ja	SHORT $LN6@u_memchr32
; Line 266
	mov	eax, DWORD PTR _count$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2-2]
	mov	DWORD PTR _limit$12211[ebp], edx
; Line 267
	mov	eax, DWORD PTR _c$[ebp]
	sar	eax, 10					; 0000000aH
	add	eax, 55232				; 0000d7c0H
	mov	WORD PTR _lead$12212[ebp], ax
	mov	eax, DWORD PTR _c$[ebp]
	and	eax, 1023				; 000003ffH
	or	eax, 56320				; 0000dc00H
	mov	WORD PTR _trail$12214[ebp], ax
$LN5@u_memchr32:
; Line 270
	mov	eax, DWORD PTR _s$[ebp]
	movzx	ecx, WORD PTR [eax]
	movzx	edx, WORD PTR _lead$12212[ebp]
	cmp	ecx, edx
	jne	SHORT $LN4@u_memchr32
	mov	eax, DWORD PTR _s$[ebp]
	movzx	ecx, WORD PTR [eax+2]
	movzx	edx, WORD PTR _trail$12214[ebp]
	cmp	ecx, edx
	jne	SHORT $LN4@u_memchr32
; Line 271
	mov	eax, DWORD PTR _s$[ebp]
	jmp	SHORT $LN11@u_memchr32
$LN4@u_memchr32:
; Line 273
	mov	eax, DWORD PTR _s$[ebp]
	add	eax, 2
	mov	DWORD PTR _s$[ebp], eax
	mov	ecx, DWORD PTR _s$[ebp]
	cmp	ecx, DWORD PTR _limit$12211[ebp]
	jne	SHORT $LN5@u_memchr32
; Line 274
	xor	eax, eax
	jmp	SHORT $LN11@u_memchr32
; Line 275
	jmp	SHORT $LN11@u_memchr32
$LN6@u_memchr32:
; Line 277
	xor	eax, eax
$LN11@u_memchr32:
; Line 279
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_u_memchr32_56 ENDP
_TEXT	ENDS
PUBLIC	_u_memrchr_56
PUBLIC	_u_strrchr_56
PUBLIC	_u_strFindLast_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _u_strFindLast_56
_TEXT	SEGMENT
tv88 = -280						; size = 4
_cs$ = -80						; size = 2
_c$ = -68						; size = 2
_subLimit$ = -56					; size = 4
_q$ = -44						; size = 4
_p$ = -32						; size = 4
_limit$ = -20						; size = 4
_start$ = -8						; size = 4
_s$ = 8							; size = 4
_length$ = 12						; size = 4
_sub$ = 16						; size = 4
_subLength$ = 20					; size = 4
_u_strFindLast_56 PROC					; COMDAT
; Line 285
	push	ebp
	mov	ebp, esp
	sub	esp, 280				; 00000118H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-280]
	mov	ecx, 70					; 00000046H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 289
	cmp	DWORD PTR _sub$[ebp], 0
	je	SHORT $LN17@u_strFindL
	cmp	DWORD PTR _subLength$[ebp], -1
	jge	SHORT $LN18@u_strFindL
$LN17@u_strFindL:
; Line 290
	mov	eax, DWORD PTR _s$[ebp]
	jmp	$LN19@u_strFindL
$LN18@u_strFindL:
; Line 292
	cmp	DWORD PTR _s$[ebp], 0
	je	SHORT $LN15@u_strFindL
	cmp	DWORD PTR _length$[ebp], -1
	jge	SHORT $LN16@u_strFindL
$LN15@u_strFindL:
; Line 293
	xor	eax, eax
	jmp	$LN19@u_strFindL
$LN16@u_strFindL:
; Line 306
	cmp	DWORD PTR _subLength$[ebp], 0
	jge	SHORT $LN14@u_strFindL
; Line 307
	mov	eax, DWORD PTR _sub$[ebp]
	push	eax
	call	_u_strlen_56
	add	esp, 4
	mov	DWORD PTR _subLength$[ebp], eax
$LN14@u_strFindL:
; Line 309
	cmp	DWORD PTR _subLength$[ebp], 0
	jne	SHORT $LN13@u_strFindL
; Line 310
	mov	eax, DWORD PTR _s$[ebp]
	jmp	$LN19@u_strFindL
$LN13@u_strFindL:
; Line 314
	mov	eax, DWORD PTR _subLength$[ebp]
	mov	ecx, DWORD PTR _sub$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR _subLimit$[ebp], edx
; Line 315
	mov	eax, DWORD PTR _subLimit$[ebp]
	sub	eax, 2
	mov	DWORD PTR _subLimit$[ebp], eax
	mov	ecx, DWORD PTR _subLimit$[ebp]
	mov	dx, WORD PTR [ecx]
	mov	WORD PTR _cs$[ebp], dx
; Line 316
	mov	eax, DWORD PTR _subLength$[ebp]
	sub	eax, 1
	mov	DWORD PTR _subLength$[ebp], eax
; Line 318
	jne	SHORT $LN12@u_strFindL
	movzx	eax, WORD PTR _cs$[ebp]
	and	eax, -2048				; fffff800H
	cmp	eax, 55296				; 0000d800H
	je	SHORT $LN12@u_strFindL
; Line 320
	cmp	DWORD PTR _length$[ebp], 0
	jge	SHORT $LN21@u_strFindL
	movzx	eax, WORD PTR _cs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	call	_u_strrchr_56
	add	esp, 8
	mov	DWORD PTR tv88[ebp], eax
	jmp	SHORT $LN22@u_strFindL
$LN21@u_strFindL:
	mov	edx, DWORD PTR _length$[ebp]
	push	edx
	movzx	eax, WORD PTR _cs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	call	_u_memrchr_56
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv88[ebp], eax
$LN22@u_strFindL:
	mov	eax, DWORD PTR tv88[ebp]
	jmp	$LN19@u_strFindL
$LN12@u_strFindL:
; Line 323
	cmp	DWORD PTR _length$[ebp], 0
	jge	SHORT $LN11@u_strFindL
; Line 324
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_u_strlen_56
	add	esp, 4
	mov	DWORD PTR _length$[ebp], eax
$LN11@u_strFindL:
; Line 328
	mov	eax, DWORD PTR _length$[ebp]
	cmp	eax, DWORD PTR _subLength$[ebp]
	jg	SHORT $LN10@u_strFindL
; Line 329
	xor	eax, eax
	jmp	$LN19@u_strFindL
$LN10@u_strFindL:
; Line 332
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR _start$[ebp], eax
; Line 333
	mov	eax, DWORD PTR _length$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR _limit$[ebp], edx
; Line 336
	mov	eax, DWORD PTR _subLength$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR _s$[ebp], edx
$LN9@u_strFindL:
; Line 338
	mov	eax, DWORD PTR _s$[ebp]
	cmp	eax, DWORD PTR _limit$[ebp]
	je	$LN8@u_strFindL
; Line 339
	mov	eax, DWORD PTR _limit$[ebp]
	sub	eax, 2
	mov	DWORD PTR _limit$[ebp], eax
	mov	ecx, DWORD PTR _limit$[ebp]
	mov	dx, WORD PTR [ecx]
	mov	WORD PTR _c$[ebp], dx
; Line 340
	movzx	eax, WORD PTR _c$[ebp]
	movzx	ecx, WORD PTR _cs$[ebp]
	cmp	eax, ecx
	jne	SHORT $LN7@u_strFindL
; Line 342
	mov	eax, DWORD PTR _limit$[ebp]
	mov	DWORD PTR _p$[ebp], eax
; Line 343
	mov	eax, DWORD PTR _subLimit$[ebp]
	mov	DWORD PTR _q$[ebp], eax
$LN6@u_strFindL:
; Line 345
	mov	eax, DWORD PTR _q$[ebp]
	cmp	eax, DWORD PTR _sub$[ebp]
	jne	SHORT $LN4@u_strFindL
; Line 346
	mov	eax, DWORD PTR _length$[ebp]
	mov	ecx, DWORD PTR _start$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	push	edx
	mov	eax, DWORD PTR _limit$[ebp]
	add	eax, 2
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	mov	edx, DWORD PTR _start$[ebp]
	push	edx
	call	?isMatchAtCPBoundary@@YACPB_W000@Z	; isMatchAtCPBoundary
	add	esp, 16					; 00000010H
	movsx	eax, al
	test	eax, eax
	je	SHORT $LN3@u_strFindL
; Line 347
	mov	eax, DWORD PTR _p$[ebp]
	jmp	SHORT $LN19@u_strFindL
; Line 348
	jmp	SHORT $LN4@u_strFindL
$LN3@u_strFindL:
; Line 349
	jmp	SHORT $LN7@u_strFindL
$LN4@u_strFindL:
; Line 352
	mov	eax, DWORD PTR _p$[ebp]
	sub	eax, 2
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, DWORD PTR _q$[ebp]
	sub	ecx, 2
	mov	DWORD PTR _q$[ebp], ecx
	mov	edx, DWORD PTR _q$[ebp]
	movzx	eax, WORD PTR [edx]
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, WORD PTR [ecx]
	cmp	edx, eax
	je	SHORT $LN1@u_strFindL
; Line 353
	jmp	SHORT $LN7@u_strFindL
$LN1@u_strFindL:
; Line 355
	jmp	SHORT $LN6@u_strFindL
$LN7@u_strFindL:
; Line 357
	jmp	$LN9@u_strFindL
$LN8@u_strFindL:
; Line 360
	xor	eax, eax
$LN19@u_strFindL:
; Line 361
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 280				; 00000118H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_u_strFindLast_56 ENDP
_TEXT	ENDS
PUBLIC	_u_strrstr_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _u_strrstr_56
_TEXT	SEGMENT
_s$ = 8							; size = 4
_substring$ = 12					; size = 4
_u_strrstr_56 PROC					; COMDAT
; Line 364
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 365
	push	-1
	mov	eax, DWORD PTR _substring$[ebp]
	push	eax
	push	-1
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	call	_u_strFindLast_56
	add	esp, 16					; 00000010H
; Line 366
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_u_strrstr_56 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _u_strrchr_56
_TEXT	SEGMENT
_cs$12269 = -20						; size = 2
_result$12268 = -8					; size = 4
_s$ = 8							; size = 4
_c$ = 12						; size = 2
_u_strrchr_56 PROC					; COMDAT
; Line 369
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 370
	movzx	eax, WORD PTR _c$[ebp]
	and	eax, -2048				; fffff800H
	cmp	eax, 55296				; 0000d800H
	jne	SHORT $LN6@u_strrchr_
; Line 372
	push	1
	lea	eax, DWORD PTR _c$[ebp]
	push	eax
	push	-1
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	call	_u_strFindLast_56
	add	esp, 16					; 00000010H
	jmp	SHORT $LN7@u_strrchr_
; Line 373
	jmp	SHORT $LN7@u_strrchr_
$LN6@u_strrchr_:
; Line 374
	mov	DWORD PTR _result$12268[ebp], 0
$LN4@u_strrchr_:
; Line 379
	mov	eax, DWORD PTR _s$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR _cs$12269[ebp], cx
	movzx	edx, WORD PTR _cs$12269[ebp]
	movzx	eax, WORD PTR _c$[ebp]
	cmp	edx, eax
	jne	SHORT $LN2@u_strrchr_
; Line 380
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR _result$12268[ebp], eax
$LN2@u_strrchr_:
; Line 382
	movzx	eax, WORD PTR _cs$12269[ebp]
	test	eax, eax
	jne	SHORT $LN1@u_strrchr_
; Line 383
	mov	eax, DWORD PTR _result$12268[ebp]
	jmp	SHORT $LN7@u_strrchr_
$LN1@u_strrchr_:
; Line 385
	mov	eax, DWORD PTR _s$[ebp]
	add	eax, 2
	mov	DWORD PTR _s$[ebp], eax
; Line 386
	jmp	SHORT $LN4@u_strrchr_
$LN7@u_strrchr_:
; Line 388
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_u_strrchr_56 ENDP
_TEXT	ENDS
PUBLIC	_u_strrchr32_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _u_strrchr32_56
_TEXT	SEGMENT
tv78 = -244						; size = 4
_trail$12290 = -44					; size = 2
_lead$12288 = -32					; size = 2
_cs$12287 = -20						; size = 2
_result$12286 = -8					; size = 4
_s$ = 8							; size = 4
_c$ = 12						; size = 4
_u_strrchr32_56 PROC					; COMDAT
; Line 391
	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 392
	cmp	DWORD PTR _c$[ebp], 65535		; 0000ffffH
	ja	SHORT $LN7@u_strrchr3
; Line 394
	movzx	eax, WORD PTR _c$[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	call	_u_strrchr_56
	add	esp, 8
	jmp	$LN8@u_strrchr3
	jmp	$LN8@u_strrchr3
$LN7@u_strrchr3:
; Line 395
	cmp	DWORD PTR _c$[ebp], 1114111		; 0010ffffH
	ja	$LN5@u_strrchr3
; Line 397
	mov	DWORD PTR _result$12286[ebp], 0
; Line 398
	mov	eax, DWORD PTR _c$[ebp]
	sar	eax, 10					; 0000000aH
	add	eax, 55232				; 0000d7c0H
	mov	WORD PTR _lead$12288[ebp], ax
	mov	eax, DWORD PTR _c$[ebp]
	and	eax, 1023				; 000003ffH
	or	eax, 56320				; 0000dc00H
	mov	WORD PTR _trail$12290[ebp], ax
$LN4@u_strrchr3:
; Line 400
	mov	eax, DWORD PTR _s$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR _cs$12287[ebp], cx
	movzx	edx, WORD PTR _cs$12287[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	add	eax, 2
	mov	DWORD PTR _s$[ebp], eax
	test	edx, edx
	je	SHORT $LN10@u_strrchr3
	mov	DWORD PTR tv78[ebp], 1
	jmp	SHORT $LN11@u_strrchr3
$LN10@u_strrchr3:
	mov	DWORD PTR tv78[ebp], 0
$LN11@u_strrchr3:
	cmp	DWORD PTR tv78[ebp], 0
	je	SHORT $LN3@u_strrchr3
; Line 401
	movzx	eax, WORD PTR _cs$12287[ebp]
	movzx	ecx, WORD PTR _lead$12288[ebp]
	cmp	eax, ecx
	jne	SHORT $LN2@u_strrchr3
	mov	eax, DWORD PTR _s$[ebp]
	movzx	ecx, WORD PTR [eax]
	movzx	edx, WORD PTR _trail$12290[ebp]
	cmp	ecx, edx
	jne	SHORT $LN2@u_strrchr3
; Line 402
	mov	eax, DWORD PTR _s$[ebp]
	sub	eax, 2
	mov	DWORD PTR _result$12286[ebp], eax
$LN2@u_strrchr3:
; Line 404
	jmp	SHORT $LN4@u_strrchr3
$LN3@u_strrchr3:
; Line 405
	mov	eax, DWORD PTR _result$12286[ebp]
	jmp	SHORT $LN8@u_strrchr3
; Line 406
	jmp	SHORT $LN8@u_strrchr3
$LN5@u_strrchr3:
; Line 408
	xor	eax, eax
$LN8@u_strrchr3:
; Line 410
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_u_strrchr32_56 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _u_memrchr_56
_TEXT	SEGMENT
_limit$12307 = -8					; size = 4
_s$ = 8							; size = 4
_c$ = 12						; size = 2
_count$ = 16						; size = 4
_u_memrchr_56 PROC					; COMDAT
; Line 413
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 414
	cmp	DWORD PTR _count$[ebp], 0
	jg	SHORT $LN8@u_memrchr_
; Line 415
	xor	eax, eax
	jmp	SHORT $LN9@u_memrchr_
	jmp	SHORT $LN9@u_memrchr_
$LN8@u_memrchr_:
; Line 416
	movzx	eax, WORD PTR _c$[ebp]
	and	eax, -2048				; fffff800H
	cmp	eax, 55296				; 0000d800H
	jne	SHORT $LN6@u_memrchr_
; Line 418
	push	1
	lea	eax, DWORD PTR _c$[ebp]
	push	eax
	mov	ecx, DWORD PTR _count$[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	call	_u_strFindLast_56
	add	esp, 16					; 00000010H
	jmp	SHORT $LN9@u_memrchr_
; Line 419
	jmp	SHORT $LN9@u_memrchr_
$LN6@u_memrchr_:
; Line 421
	mov	eax, DWORD PTR _count$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR _limit$12307[ebp], edx
$LN4@u_memrchr_:
; Line 423
	mov	eax, DWORD PTR _limit$12307[ebp]
	sub	eax, 2
	mov	DWORD PTR _limit$12307[ebp], eax
	mov	ecx, DWORD PTR _limit$12307[ebp]
	movzx	edx, WORD PTR [ecx]
	movzx	eax, WORD PTR _c$[ebp]
	cmp	edx, eax
	jne	SHORT $LN3@u_memrchr_
; Line 424
	mov	eax, DWORD PTR _limit$12307[ebp]
	jmp	SHORT $LN9@u_memrchr_
$LN3@u_memrchr_:
; Line 426
	mov	eax, DWORD PTR _s$[ebp]
	cmp	eax, DWORD PTR _limit$12307[ebp]
	jne	SHORT $LN4@u_memrchr_
; Line 427
	xor	eax, eax
$LN9@u_memrchr_:
; Line 429
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_u_memrchr_56 ENDP
_TEXT	ENDS
PUBLIC	_u_memrchr32_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _u_memrchr32_56
_TEXT	SEGMENT
_trail$12329 = -32					; size = 2
_lead$12327 = -20					; size = 2
_limit$12326 = -8					; size = 4
_s$ = 8							; size = 4
_c$ = 12						; size = 4
_count$ = 16						; size = 4
_u_memrchr32_56 PROC					; COMDAT
; Line 432
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 433
	cmp	DWORD PTR _c$[ebp], 65535		; 0000ffffH
	ja	SHORT $LN10@u_memrchr3
; Line 435
	mov	eax, DWORD PTR _count$[ebp]
	push	eax
	movzx	ecx, WORD PTR _c$[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	call	_u_memrchr_56
	add	esp, 12					; 0000000cH
	jmp	$LN11@u_memrchr3
	jmp	$LN11@u_memrchr3
$LN10@u_memrchr3:
; Line 436
	cmp	DWORD PTR _count$[ebp], 2
	jge	SHORT $LN8@u_memrchr3
; Line 438
	xor	eax, eax
	jmp	SHORT $LN11@u_memrchr3
	jmp	SHORT $LN11@u_memrchr3
$LN8@u_memrchr3:
; Line 439
	cmp	DWORD PTR _c$[ebp], 1114111		; 0010ffffH
	ja	SHORT $LN6@u_memrchr3
; Line 441
	mov	eax, DWORD PTR _count$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2-2]
	mov	DWORD PTR _limit$12326[ebp], edx
; Line 442
	mov	eax, DWORD PTR _c$[ebp]
	sar	eax, 10					; 0000000aH
	add	eax, 55232				; 0000d7c0H
	mov	WORD PTR _lead$12327[ebp], ax
	mov	eax, DWORD PTR _c$[ebp]
	and	eax, 1023				; 000003ffH
	or	eax, 56320				; 0000dc00H
	mov	WORD PTR _trail$12329[ebp], ax
$LN5@u_memrchr3:
; Line 445
	mov	eax, DWORD PTR _limit$12326[ebp]
	movzx	ecx, WORD PTR [eax]
	movzx	edx, WORD PTR _trail$12329[ebp]
	cmp	ecx, edx
	jne	SHORT $LN4@u_memrchr3
	mov	eax, DWORD PTR _limit$12326[ebp]
	movzx	ecx, WORD PTR [eax-2]
	movzx	edx, WORD PTR _lead$12327[ebp]
	cmp	ecx, edx
	jne	SHORT $LN4@u_memrchr3
; Line 446
	mov	eax, DWORD PTR _limit$12326[ebp]
	sub	eax, 2
	jmp	SHORT $LN11@u_memrchr3
$LN4@u_memrchr3:
; Line 448
	mov	eax, DWORD PTR _limit$12326[ebp]
	sub	eax, 2
	mov	DWORD PTR _limit$12326[ebp], eax
	mov	ecx, DWORD PTR _s$[ebp]
	cmp	ecx, DWORD PTR _limit$12326[ebp]
	jne	SHORT $LN5@u_memrchr3
; Line 449
	xor	eax, eax
	jmp	SHORT $LN11@u_memrchr3
; Line 450
	jmp	SHORT $LN11@u_memrchr3
$LN6@u_memrchr3:
; Line 452
	xor	eax, eax
$LN11@u_memrchr3:
; Line 454
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_u_memrchr32_56 ENDP
_TEXT	ENDS
PUBLIC	_u_strpbrk_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _u_strpbrk_56
_TEXT	SEGMENT
_idx$ = -8						; size = 4
_string$ = 8						; size = 4
_matchSet$ = 12						; size = 4
_u_strpbrk_56 PROC					; COMDAT
; Line 539
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 540
	push	1
	mov	eax, DWORD PTR _matchSet$[ebp]
	push	eax
	mov	ecx, DWORD PTR _string$[ebp]
	push	ecx
	call	?_matchFromSet@@YAHPB_W0C@Z		; _matchFromSet
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _idx$[ebp], eax
; Line 541
	cmp	DWORD PTR _idx$[ebp], 0
	jl	SHORT $LN2@u_strpbrk_
; Line 542
	mov	eax, DWORD PTR _idx$[ebp]
	mov	ecx, DWORD PTR _string$[ebp]
	lea	eax, DWORD PTR [ecx+eax*2]
	jmp	SHORT $LN3@u_strpbrk_
; Line 543
	jmp	SHORT $LN3@u_strpbrk_
$LN2@u_strpbrk_:
; Line 544
	xor	eax, eax
$LN3@u_strpbrk_:
; Line 546
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_u_strpbrk_56 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?_matchFromSet@@YAHPB_W0C@Z
_TEXT	SEGMENT
___c2$12393 = -116					; size = 2
___c2$12382 = -104					; size = 2
_c2$ = -92						; size = 2
_c$ = -80						; size = 2
_matchCh$ = -68						; size = 4
_stringCh$ = -56					; size = 4
_matchItr$ = -44					; size = 4
_strItr$ = -32						; size = 4
_matchBMPLen$ = -20					; size = 4
_matchLen$ = -8						; size = 4
_string$ = 8						; size = 4
_matchSet$ = 12						; size = 4
_polarity$ = 16						; size = 1
?_matchFromSet@@YAHPB_W0C@Z PROC			; _matchFromSet, COMDAT
; Line 465
	push	ebp
	mov	ebp, esp
	sub	esp, 312				; 00000138H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-312]
	mov	ecx, 78					; 0000004eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 471
	mov	DWORD PTR _matchBMPLen$[ebp], 0
$LN34@matchFromS:
; Line 472
	mov	eax, DWORD PTR _matchBMPLen$[ebp]
	mov	ecx, DWORD PTR _matchSet$[ebp]
	mov	dx, WORD PTR [ecx+eax*2]
	mov	WORD PTR _c$[ebp], dx
	movzx	eax, WORD PTR _c$[ebp]
	test	eax, eax
	je	SHORT $LN33@matchFromS
	movzx	eax, WORD PTR _c$[ebp]
	and	eax, -2048				; fffff800H
	cmp	eax, 55296				; 0000d800H
	je	SHORT $LN33@matchFromS
; Line 473
	mov	eax, DWORD PTR _matchBMPLen$[ebp]
	add	eax, 1
	mov	DWORD PTR _matchBMPLen$[ebp], eax
; Line 474
	jmp	SHORT $LN34@matchFromS
$LN33@matchFromS:
; Line 477
	mov	eax, DWORD PTR _matchBMPLen$[ebp]
	mov	DWORD PTR _matchLen$[ebp], eax
$LN32@matchFromS:
; Line 478
	mov	eax, DWORD PTR _matchLen$[ebp]
	mov	ecx, DWORD PTR _matchSet$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	test	edx, edx
	je	SHORT $LN31@matchFromS
; Line 479
	mov	eax, DWORD PTR _matchLen$[ebp]
	add	eax, 1
	mov	DWORD PTR _matchLen$[ebp], eax
; Line 480
	jmp	SHORT $LN32@matchFromS
$LN31@matchFromS:
; Line 482
	mov	DWORD PTR _strItr$[ebp], 0
$LN30@matchFromS:
	mov	eax, DWORD PTR _strItr$[ebp]
	mov	ecx, DWORD PTR _string$[ebp]
	mov	dx, WORD PTR [ecx+eax*2]
	mov	WORD PTR _c$[ebp], dx
	movzx	eax, WORD PTR _c$[ebp]
	test	eax, eax
	je	$LN29@matchFromS
; Line 483
	mov	eax, DWORD PTR _strItr$[ebp]
	add	eax, 1
	mov	DWORD PTR _strItr$[ebp], eax
; Line 484
	movzx	eax, WORD PTR _c$[ebp]
	and	eax, -2048				; fffff800H
	cmp	eax, 55296				; 0000d800H
	je	$LN28@matchFromS
; Line 485
	movsx	eax, BYTE PTR _polarity$[ebp]
	test	eax, eax
	je	SHORT $LN27@matchFromS
; Line 486
	mov	DWORD PTR _matchItr$[ebp], 0
	jmp	SHORT $LN26@matchFromS
$LN25@matchFromS:
	mov	eax, DWORD PTR _matchItr$[ebp]
	add	eax, 1
	mov	DWORD PTR _matchItr$[ebp], eax
$LN26@matchFromS:
	mov	eax, DWORD PTR _matchItr$[ebp]
	cmp	eax, DWORD PTR _matchLen$[ebp]
	jge	SHORT $LN24@matchFromS
; Line 487
	movzx	eax, WORD PTR _c$[ebp]
	mov	ecx, DWORD PTR _matchItr$[ebp]
	mov	edx, DWORD PTR _matchSet$[ebp]
	movzx	ecx, WORD PTR [edx+ecx*2]
	cmp	eax, ecx
	jne	SHORT $LN23@matchFromS
; Line 488
	mov	eax, DWORD PTR _strItr$[ebp]
	sub	eax, 1
	jmp	$LN35@matchFromS
$LN23@matchFromS:
; Line 490
	jmp	SHORT $LN25@matchFromS
$LN24@matchFromS:
	jmp	SHORT $LN22@matchFromS
$LN27@matchFromS:
; Line 492
	mov	DWORD PTR _matchItr$[ebp], 0
	jmp	SHORT $LN21@matchFromS
$LN20@matchFromS:
	mov	eax, DWORD PTR _matchItr$[ebp]
	add	eax, 1
	mov	DWORD PTR _matchItr$[ebp], eax
$LN21@matchFromS:
	mov	eax, DWORD PTR _matchItr$[ebp]
	cmp	eax, DWORD PTR _matchLen$[ebp]
	jge	SHORT $LN19@matchFromS
; Line 493
	movzx	eax, WORD PTR _c$[ebp]
	mov	ecx, DWORD PTR _matchItr$[ebp]
	mov	edx, DWORD PTR _matchSet$[ebp]
	movzx	ecx, WORD PTR [edx+ecx*2]
	cmp	eax, ecx
	jne	SHORT $LN18@matchFromS
; Line 494
	jmp	$endloop$12370
	jmp	$endloop$12370
$LN18@matchFromS:
; Line 496
	jmp	SHORT $LN20@matchFromS
$LN19@matchFromS:
; Line 497
	mov	eax, DWORD PTR _strItr$[ebp]
	sub	eax, 1
	jmp	$LN35@matchFromS
$LN22@matchFromS:
; Line 499
	jmp	$endloop$12370
$LN28@matchFromS:
; Line 504
	movzx	eax, WORD PTR _c$[ebp]
	and	eax, 1024				; 00000400H
	jne	SHORT $LN15@matchFromS
	mov	eax, DWORD PTR _strItr$[ebp]
	mov	ecx, DWORD PTR _string$[ebp]
	mov	dx, WORD PTR [ecx+eax*2]
	mov	WORD PTR _c2$[ebp], dx
	movzx	eax, WORD PTR _c2$[ebp]
	and	eax, -1024				; fffffc00H
	cmp	eax, 56320				; 0000dc00H
	jne	SHORT $LN15@matchFromS
; Line 505
	mov	eax, DWORD PTR _strItr$[ebp]
	add	eax, 1
	mov	DWORD PTR _strItr$[ebp], eax
; Line 506
	movzx	eax, WORD PTR _c$[ebp]
	shl	eax, 10					; 0000000aH
	movzx	ecx, WORD PTR _c2$[ebp]
	lea	edx, DWORD PTR [eax+ecx-56613888]
	mov	DWORD PTR _stringCh$[ebp], edx
; Line 507
	jmp	SHORT $LN14@matchFromS
$LN15@matchFromS:
; Line 508
	movzx	eax, WORD PTR _c$[ebp]
	mov	DWORD PTR _stringCh$[ebp], eax
$LN14@matchFromS:
; Line 511
	movsx	eax, BYTE PTR _polarity$[ebp]
	test	eax, eax
	je	$LN13@matchFromS
; Line 512
	mov	eax, DWORD PTR _matchBMPLen$[ebp]
	mov	DWORD PTR _matchItr$[ebp], eax
$LN12@matchFromS:
	mov	eax, DWORD PTR _matchItr$[ebp]
	cmp	eax, DWORD PTR _matchLen$[ebp]
	jge	$LN11@matchFromS
; Line 513
	mov	eax, DWORD PTR _matchItr$[ebp]
	mov	ecx, DWORD PTR _matchSet$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	mov	DWORD PTR _matchCh$[ebp], edx
	mov	eax, DWORD PTR _matchItr$[ebp]
	add	eax, 1
	mov	DWORD PTR _matchItr$[ebp], eax
	mov	eax, DWORD PTR _matchCh$[ebp]
	and	eax, -1024				; fffffc00H
	cmp	eax, 55296				; 0000d800H
	jne	SHORT $LN10@matchFromS
	mov	eax, DWORD PTR _matchItr$[ebp]
	cmp	eax, DWORD PTR _matchLen$[ebp]
	je	SHORT $LN10@matchFromS
	mov	eax, DWORD PTR _matchItr$[ebp]
	mov	ecx, DWORD PTR _matchSet$[ebp]
	mov	dx, WORD PTR [ecx+eax*2]
	mov	WORD PTR ___c2$12382[ebp], dx
	movzx	eax, WORD PTR ___c2$12382[ebp]
	and	eax, -1024				; fffffc00H
	cmp	eax, 56320				; 0000dc00H
	jne	SHORT $LN10@matchFromS
	mov	eax, DWORD PTR _matchItr$[ebp]
	add	eax, 1
	mov	DWORD PTR _matchItr$[ebp], eax
	mov	eax, DWORD PTR _matchCh$[ebp]
	shl	eax, 10					; 0000000aH
	movzx	ecx, WORD PTR ___c2$12382[ebp]
	lea	edx, DWORD PTR [eax+ecx-56613888]
	mov	DWORD PTR _matchCh$[ebp], edx
$LN10@matchFromS:
; Line 514
	mov	eax, DWORD PTR _stringCh$[ebp]
	cmp	eax, DWORD PTR _matchCh$[ebp]
	jne	SHORT $LN8@matchFromS
; Line 515
	mov	eax, 65535				; 0000ffffH
	cmp	eax, DWORD PTR _stringCh$[ebp]
	sbb	ecx, ecx
	neg	ecx
	add	ecx, 1
	mov	eax, DWORD PTR _strItr$[ebp]
	sub	eax, ecx
	jmp	$LN35@matchFromS
$LN8@matchFromS:
; Line 517
	jmp	$LN12@matchFromS
$LN11@matchFromS:
	jmp	$endloop$12370
$LN13@matchFromS:
; Line 519
	mov	eax, DWORD PTR _matchBMPLen$[ebp]
	mov	DWORD PTR _matchItr$[ebp], eax
$LN6@matchFromS:
	mov	eax, DWORD PTR _matchItr$[ebp]
	cmp	eax, DWORD PTR _matchLen$[ebp]
	jge	SHORT $LN5@matchFromS
; Line 520
	mov	eax, DWORD PTR _matchItr$[ebp]
	mov	ecx, DWORD PTR _matchSet$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	mov	DWORD PTR _matchCh$[ebp], edx
	mov	eax, DWORD PTR _matchItr$[ebp]
	add	eax, 1
	mov	DWORD PTR _matchItr$[ebp], eax
	mov	eax, DWORD PTR _matchCh$[ebp]
	and	eax, -1024				; fffffc00H
	cmp	eax, 55296				; 0000d800H
	jne	SHORT $LN4@matchFromS
	mov	eax, DWORD PTR _matchItr$[ebp]
	cmp	eax, DWORD PTR _matchLen$[ebp]
	je	SHORT $LN4@matchFromS
	mov	eax, DWORD PTR _matchItr$[ebp]
	mov	ecx, DWORD PTR _matchSet$[ebp]
	mov	dx, WORD PTR [ecx+eax*2]
	mov	WORD PTR ___c2$12393[ebp], dx
	movzx	eax, WORD PTR ___c2$12393[ebp]
	and	eax, -1024				; fffffc00H
	cmp	eax, 56320				; 0000dc00H
	jne	SHORT $LN4@matchFromS
	mov	eax, DWORD PTR _matchItr$[ebp]
	add	eax, 1
	mov	DWORD PTR _matchItr$[ebp], eax
	mov	eax, DWORD PTR _matchCh$[ebp]
	shl	eax, 10					; 0000000aH
	movzx	ecx, WORD PTR ___c2$12393[ebp]
	lea	edx, DWORD PTR [eax+ecx-56613888]
	mov	DWORD PTR _matchCh$[ebp], edx
$LN4@matchFromS:
; Line 521
	mov	eax, DWORD PTR _stringCh$[ebp]
	cmp	eax, DWORD PTR _matchCh$[ebp]
	jne	SHORT $LN2@matchFromS
; Line 522
	jmp	SHORT $endloop$12370
	jmp	SHORT $endloop$12370
$LN2@matchFromS:
; Line 524
	jmp	SHORT $LN6@matchFromS
$LN5@matchFromS:
; Line 525
	mov	eax, 65535				; 0000ffffH
	cmp	eax, DWORD PTR _stringCh$[ebp]
	sbb	ecx, ecx
	neg	ecx
	add	ecx, 1
	mov	eax, DWORD PTR _strItr$[ebp]
	sub	eax, ecx
	jmp	SHORT $LN35@matchFromS
$endloop$12370:
; Line 530
	jmp	$LN30@matchFromS
$LN29@matchFromS:
; Line 533
	mov	eax, DWORD PTR _strItr$[ebp]
	neg	eax
	sub	eax, 1
$LN35@matchFromS:
; Line 534
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?_matchFromSet@@YAHPB_W0C@Z ENDP			; _matchFromSet
_TEXT	ENDS
PUBLIC	_u_strcspn_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _u_strcspn_56
_TEXT	SEGMENT
_idx$ = -8						; size = 4
_string$ = 8						; size = 4
_matchSet$ = 12						; size = 4
_u_strcspn_56 PROC					; COMDAT
; Line 551
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 552
	push	1
	mov	eax, DWORD PTR _matchSet$[ebp]
	push	eax
	mov	ecx, DWORD PTR _string$[ebp]
	push	ecx
	call	?_matchFromSet@@YAHPB_W0C@Z		; _matchFromSet
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _idx$[ebp], eax
; Line 553
	cmp	DWORD PTR _idx$[ebp], 0
	jl	SHORT $LN2@u_strcspn_
; Line 554
	mov	eax, DWORD PTR _idx$[ebp]
	jmp	SHORT $LN3@u_strcspn_
; Line 555
	jmp	SHORT $LN3@u_strcspn_
$LN2@u_strcspn_:
; Line 556
	mov	eax, DWORD PTR _idx$[ebp]
	neg	eax
	sub	eax, 1
$LN3@u_strcspn_:
; Line 558
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_u_strcspn_56 ENDP
_TEXT	ENDS
PUBLIC	_u_strspn_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _u_strspn_56
_TEXT	SEGMENT
_idx$ = -8						; size = 4
_string$ = 8						; size = 4
_matchSet$ = 12						; size = 4
_u_strspn_56 PROC					; COMDAT
; Line 563
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 564
	push	0
	mov	eax, DWORD PTR _matchSet$[ebp]
	push	eax
	mov	ecx, DWORD PTR _string$[ebp]
	push	ecx
	call	?_matchFromSet@@YAHPB_W0C@Z		; _matchFromSet
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _idx$[ebp], eax
; Line 565
	cmp	DWORD PTR _idx$[ebp], 0
	jl	SHORT $LN2@u_strspn_5
; Line 566
	mov	eax, DWORD PTR _idx$[ebp]
	jmp	SHORT $LN3@u_strspn_5
; Line 567
	jmp	SHORT $LN3@u_strspn_5
$LN2@u_strspn_5:
; Line 568
	mov	eax, DWORD PTR _idx$[ebp]
	neg	eax
	sub	eax, 1
$LN3@u_strspn_5:
; Line 570
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_u_strspn_56 ENDP
_TEXT	ENDS
PUBLIC	_u_strtok_r_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _u_strtok_r_56
_TEXT	SEGMENT
_nonDelimIdx$ = -32					; size = 4
_nextToken$ = -20					; size = 4
_tokSource$ = -8					; size = 4
_src$ = 8						; size = 4
_delim$ = 12						; size = 4
_saveState$ = 16					; size = 4
_u_strtok_r_56 PROC					; COMDAT
; Line 578
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 584
	cmp	DWORD PTR _src$[ebp], 0
	je	SHORT $LN9@u_strtok_r
; Line 585
	mov	eax, DWORD PTR _src$[ebp]
	mov	DWORD PTR _tokSource$[ebp], eax
; Line 586
	mov	eax, DWORD PTR _saveState$[ebp]
	mov	ecx, DWORD PTR _src$[ebp]
	mov	DWORD PTR [eax], ecx
	jmp	SHORT $LN8@u_strtok_r
$LN9@u_strtok_r:
; Line 588
	mov	eax, DWORD PTR _saveState$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN7@u_strtok_r
; Line 589
	mov	eax, DWORD PTR _saveState$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _tokSource$[ebp], ecx
; Line 591
	jmp	SHORT $LN8@u_strtok_r
$LN7@u_strtok_r:
; Line 594
	xor	eax, eax
	jmp	$LN10@u_strtok_r
$LN8@u_strtok_r:
; Line 598
	mov	eax, DWORD PTR _delim$[ebp]
	push	eax
	mov	ecx, DWORD PTR _tokSource$[ebp]
	push	ecx
	call	_u_strspn_56
	add	esp, 8
	mov	DWORD PTR _nonDelimIdx$[ebp], eax
; Line 599
	mov	eax, DWORD PTR _nonDelimIdx$[ebp]
	mov	ecx, DWORD PTR _tokSource$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR _tokSource$[ebp], edx
; Line 601
	mov	eax, DWORD PTR _tokSource$[ebp]
	movzx	ecx, WORD PTR [eax]
	test	ecx, ecx
	je	SHORT $LN5@u_strtok_r
; Line 602
	mov	eax, DWORD PTR _delim$[ebp]
	push	eax
	mov	ecx, DWORD PTR _tokSource$[ebp]
	push	ecx
	call	_u_strpbrk_56
	add	esp, 8
	mov	DWORD PTR _nextToken$[ebp], eax
; Line 603
	cmp	DWORD PTR _nextToken$[ebp], 0
	je	SHORT $LN4@u_strtok_r
; Line 605
	xor	eax, eax
	mov	ecx, DWORD PTR _nextToken$[ebp]
	mov	WORD PTR [ecx], ax
	mov	edx, DWORD PTR _nextToken$[ebp]
	add	edx, 2
	mov	DWORD PTR _nextToken$[ebp], edx
; Line 606
	mov	eax, DWORD PTR _saveState$[ebp]
	mov	ecx, DWORD PTR _nextToken$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 607
	mov	eax, DWORD PTR _tokSource$[ebp]
	jmp	SHORT $LN10@u_strtok_r
	jmp	SHORT $LN3@u_strtok_r
$LN4@u_strtok_r:
; Line 609
	mov	eax, DWORD PTR _saveState$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN3@u_strtok_r
; Line 611
	mov	eax, DWORD PTR _saveState$[ebp]
	mov	DWORD PTR [eax], 0
; Line 612
	mov	eax, DWORD PTR _tokSource$[ebp]
	jmp	SHORT $LN10@u_strtok_r
$LN3@u_strtok_r:
; Line 615
	jmp	SHORT $LN1@u_strtok_r
$LN5@u_strtok_r:
; Line 617
	mov	eax, DWORD PTR _saveState$[ebp]
	mov	DWORD PTR [eax], 0
$LN1@u_strtok_r:
; Line 619
	xor	eax, eax
$LN10@u_strtok_r:
; Line 620
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_u_strtok_r_56 ENDP
_TEXT	ENDS
PUBLIC	_u_strcat_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _u_strcat_56
_TEXT	SEGMENT
tv71 = -208						; size = 4
_anchor$ = -8						; size = 4
_dst$ = 8						; size = 4
_src$ = 12						; size = 4
_u_strcat_56 PROC					; COMDAT
; Line 627
	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 628
	mov	eax, DWORD PTR _dst$[ebp]
	mov	DWORD PTR _anchor$[ebp], eax
$LN4@u_strcat_5:
; Line 630
	mov	eax, DWORD PTR _dst$[ebp]
	movzx	ecx, WORD PTR [eax]
	test	ecx, ecx
	je	SHORT $LN2@u_strcat_5
; Line 631
	mov	eax, DWORD PTR _dst$[ebp]
	add	eax, 2
	mov	DWORD PTR _dst$[ebp], eax
; Line 632
	jmp	SHORT $LN4@u_strcat_5
$LN2@u_strcat_5:
; Line 633
	mov	eax, DWORD PTR _dst$[ebp]
	mov	ecx, DWORD PTR _src$[ebp]
	mov	dx, WORD PTR [ecx]
	mov	WORD PTR [eax], dx
	mov	eax, DWORD PTR _dst$[ebp]
	movzx	ecx, WORD PTR [eax]
	mov	edx, DWORD PTR _dst$[ebp]
	add	edx, 2
	mov	DWORD PTR _dst$[ebp], edx
	mov	eax, DWORD PTR _src$[ebp]
	add	eax, 2
	mov	DWORD PTR _src$[ebp], eax
	test	ecx, ecx
	je	SHORT $LN7@u_strcat_5
	mov	DWORD PTR tv71[ebp], 1
	jmp	SHORT $LN8@u_strcat_5
$LN7@u_strcat_5:
	mov	DWORD PTR tv71[ebp], 0
$LN8@u_strcat_5:
	cmp	DWORD PTR tv71[ebp], 0
	je	SHORT $LN1@u_strcat_5
; Line 634
	jmp	SHORT $LN2@u_strcat_5
$LN1@u_strcat_5:
; Line 636
	mov	eax, DWORD PTR _anchor$[ebp]
; Line 637
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_u_strcat_56 ENDP
_TEXT	ENDS
PUBLIC	_u_strncat_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _u_strncat_56
_TEXT	SEGMENT
_anchor$12456 = -8					; size = 4
_dst$ = 8						; size = 4
_src$ = 12						; size = 4
_n$ = 16						; size = 4
_u_strncat_56 PROC					; COMDAT
; Line 643
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 644
	cmp	DWORD PTR _n$[ebp], 0
	jle	SHORT $LN7@u_strncat_
; Line 645
	mov	eax, DWORD PTR _dst$[ebp]
	mov	DWORD PTR _anchor$12456[ebp], eax
$LN6@u_strncat_:
; Line 647
	mov	eax, DWORD PTR _dst$[ebp]
	movzx	ecx, WORD PTR [eax]
	test	ecx, ecx
	je	SHORT $LN4@u_strncat_
; Line 648
	mov	eax, DWORD PTR _dst$[ebp]
	add	eax, 2
	mov	DWORD PTR _dst$[ebp], eax
; Line 649
	jmp	SHORT $LN6@u_strncat_
$LN4@u_strncat_:
; Line 650
	mov	eax, DWORD PTR _dst$[ebp]
	mov	ecx, DWORD PTR _src$[ebp]
	mov	dx, WORD PTR [ecx]
	mov	WORD PTR [eax], dx
	mov	eax, DWORD PTR _dst$[ebp]
	movzx	ecx, WORD PTR [eax]
	test	ecx, ecx
	je	SHORT $LN3@u_strncat_
; Line 651
	mov	eax, DWORD PTR _dst$[ebp]
	add	eax, 2
	mov	DWORD PTR _dst$[ebp], eax
; Line 652
	mov	eax, DWORD PTR _n$[ebp]
	sub	eax, 1
	mov	DWORD PTR _n$[ebp], eax
	jne	SHORT $LN2@u_strncat_
; Line 653
	xor	eax, eax
	mov	ecx, DWORD PTR _dst$[ebp]
	mov	WORD PTR [ecx], ax
; Line 654
	jmp	SHORT $LN3@u_strncat_
$LN2@u_strncat_:
; Line 656
	mov	eax, DWORD PTR _src$[ebp]
	add	eax, 2
	mov	DWORD PTR _src$[ebp], eax
; Line 657
	jmp	SHORT $LN4@u_strncat_
$LN3@u_strncat_:
; Line 659
	mov	eax, DWORD PTR _anchor$12456[ebp]
	jmp	SHORT $LN8@u_strncat_
; Line 660
	jmp	SHORT $LN8@u_strncat_
$LN7@u_strncat_:
; Line 661
	mov	eax, DWORD PTR _dst$[ebp]
$LN8@u_strncat_:
; Line 663
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_u_strncat_56 ENDP
_TEXT	ENDS
PUBLIC	_u_strcmp_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _u_strcmp_56
_TEXT	SEGMENT
_c2$ = -20						; size = 2
_c1$ = -8						; size = 2
_s1$ = 8						; size = 4
_s2$ = 12						; size = 4
_u_strcmp_56 PROC					; COMDAT
; Line 670
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
$LN4@u_strcmp_5:
; Line 674
	mov	eax, DWORD PTR _s1$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR _c1$[ebp], cx
	mov	edx, DWORD PTR _s1$[ebp]
	add	edx, 2
	mov	DWORD PTR _s1$[ebp], edx
; Line 675
	mov	eax, DWORD PTR _s2$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR _c2$[ebp], cx
	mov	edx, DWORD PTR _s2$[ebp]
	add	edx, 2
	mov	DWORD PTR _s2$[ebp], edx
; Line 676
	movzx	eax, WORD PTR _c1$[ebp]
	movzx	ecx, WORD PTR _c2$[ebp]
	cmp	eax, ecx
	jne	SHORT $LN1@u_strcmp_5
	movzx	eax, WORD PTR _c1$[ebp]
	test	eax, eax
	jne	SHORT $LN2@u_strcmp_5
$LN1@u_strcmp_5:
; Line 677
	jmp	SHORT $LN3@u_strcmp_5
$LN2@u_strcmp_5:
; Line 679
	jmp	SHORT $LN4@u_strcmp_5
$LN3@u_strcmp_5:
; Line 680
	movzx	eax, WORD PTR _c1$[ebp]
	movzx	ecx, WORD PTR _c2$[ebp]
	sub	eax, ecx
; Line 681
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_u_strcmp_56 ENDP
_TEXT	ENDS
PUBLIC	_uprv_strCompare_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _uprv_strCompare_56
_TEXT	SEGMENT
_lengthResult$12509 = -80				; size = 4
_c2$ = -68						; size = 2
_c1$ = -56						; size = 2
_limit2$ = -44						; size = 4
_limit1$ = -32						; size = 4
_start2$ = -20						; size = 4
_start1$ = -8						; size = 4
_s1$ = 8						; size = 4
_length1$ = 12						; size = 4
_s2$ = 16						; size = 4
_length2$ = 20						; size = 4
_strncmpStyle$ = 24					; size = 1
_codePointOrder$ = 28					; size = 1
_uprv_strCompare_56 PROC				; COMDAT
; Line 686
	push	ebp
	mov	ebp, esp
	sub	esp, 276				; 00000114H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-276]
	mov	ecx, 69					; 00000045H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 691
	mov	eax, DWORD PTR _s1$[ebp]
	mov	DWORD PTR _start1$[ebp], eax
; Line 692
	mov	eax, DWORD PTR _s2$[ebp]
	mov	DWORD PTR _start2$[ebp], eax
; Line 695
	cmp	DWORD PTR _length1$[ebp], 0
	jge	SHORT $LN35@uprv_strCo
	cmp	DWORD PTR _length2$[ebp], 0
	jge	SHORT $LN35@uprv_strCo
; Line 697
	mov	eax, DWORD PTR _s1$[ebp]
	cmp	eax, DWORD PTR _s2$[ebp]
	jne	SHORT $LN33@uprv_strCo
; Line 698
	xor	eax, eax
	jmp	$LN36@uprv_strCo
$LN33@uprv_strCo:
; Line 702
	mov	eax, DWORD PTR _s1$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR _c1$[ebp], cx
; Line 703
	mov	eax, DWORD PTR _s2$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR _c2$[ebp], cx
; Line 704
	movzx	eax, WORD PTR _c1$[ebp]
	movzx	ecx, WORD PTR _c2$[ebp]
	cmp	eax, ecx
	je	SHORT $LN31@uprv_strCo
; Line 705
	jmp	SHORT $LN32@uprv_strCo
$LN31@uprv_strCo:
; Line 707
	movzx	eax, WORD PTR _c1$[ebp]
	test	eax, eax
	jne	SHORT $LN30@uprv_strCo
; Line 708
	xor	eax, eax
	jmp	$LN36@uprv_strCo
$LN30@uprv_strCo:
; Line 710
	mov	eax, DWORD PTR _s1$[ebp]
	add	eax, 2
	mov	DWORD PTR _s1$[ebp], eax
; Line 711
	mov	eax, DWORD PTR _s2$[ebp]
	add	eax, 2
	mov	DWORD PTR _s2$[ebp], eax
; Line 712
	jmp	SHORT $LN33@uprv_strCo
$LN32@uprv_strCo:
; Line 715
	mov	DWORD PTR _limit2$[ebp], 0
	mov	eax, DWORD PTR _limit2$[ebp]
	mov	DWORD PTR _limit1$[ebp], eax
	jmp	$LN29@uprv_strCo
$LN35@uprv_strCo:
; Line 716
	movsx	eax, BYTE PTR _strncmpStyle$[ebp]
	test	eax, eax
	je	$LN28@uprv_strCo
; Line 718
	mov	eax, DWORD PTR _s1$[ebp]
	cmp	eax, DWORD PTR _s2$[ebp]
	jne	SHORT $LN27@uprv_strCo
; Line 719
	xor	eax, eax
	jmp	$LN36@uprv_strCo
$LN27@uprv_strCo:
; Line 722
	mov	eax, DWORD PTR _length1$[ebp]
	mov	ecx, DWORD PTR _start1$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR _limit1$[ebp], edx
$LN26@uprv_strCo:
; Line 726
	mov	eax, DWORD PTR _s1$[ebp]
	cmp	eax, DWORD PTR _limit1$[ebp]
	jne	SHORT $LN24@uprv_strCo
; Line 727
	xor	eax, eax
	jmp	$LN36@uprv_strCo
$LN24@uprv_strCo:
; Line 730
	mov	eax, DWORD PTR _s1$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR _c1$[ebp], cx
; Line 731
	mov	eax, DWORD PTR _s2$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR _c2$[ebp], cx
; Line 732
	movzx	eax, WORD PTR _c1$[ebp]
	movzx	ecx, WORD PTR _c2$[ebp]
	cmp	eax, ecx
	je	SHORT $LN23@uprv_strCo
; Line 733
	jmp	SHORT $LN25@uprv_strCo
$LN23@uprv_strCo:
; Line 735
	movzx	eax, WORD PTR _c1$[ebp]
	test	eax, eax
	jne	SHORT $LN22@uprv_strCo
; Line 736
	xor	eax, eax
	jmp	$LN36@uprv_strCo
$LN22@uprv_strCo:
; Line 738
	mov	eax, DWORD PTR _s1$[ebp]
	add	eax, 2
	mov	DWORD PTR _s1$[ebp], eax
; Line 739
	mov	eax, DWORD PTR _s2$[ebp]
	add	eax, 2
	mov	DWORD PTR _s2$[ebp], eax
; Line 740
	jmp	SHORT $LN26@uprv_strCo
$LN25@uprv_strCo:
; Line 743
	mov	eax, DWORD PTR _length1$[ebp]
	mov	ecx, DWORD PTR _start2$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR _limit2$[ebp], edx
	jmp	$LN29@uprv_strCo
$LN28@uprv_strCo:
; Line 748
	cmp	DWORD PTR _length1$[ebp], 0
	jge	SHORT $LN20@uprv_strCo
; Line 749
	mov	eax, DWORD PTR _s1$[ebp]
	push	eax
	call	_u_strlen_56
	add	esp, 4
	mov	DWORD PTR _length1$[ebp], eax
$LN20@uprv_strCo:
; Line 751
	cmp	DWORD PTR _length2$[ebp], 0
	jge	SHORT $LN19@uprv_strCo
; Line 752
	mov	eax, DWORD PTR _s2$[ebp]
	push	eax
	call	_u_strlen_56
	add	esp, 4
	mov	DWORD PTR _length2$[ebp], eax
$LN19@uprv_strCo:
; Line 756
	mov	eax, DWORD PTR _length1$[ebp]
	cmp	eax, DWORD PTR _length2$[ebp]
	jge	SHORT $LN18@uprv_strCo
; Line 757
	mov	DWORD PTR _lengthResult$12509[ebp], -1
; Line 758
	mov	eax, DWORD PTR _length1$[ebp]
	mov	ecx, DWORD PTR _start1$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR _limit1$[ebp], edx
	jmp	SHORT $LN17@uprv_strCo
$LN18@uprv_strCo:
; Line 759
	mov	eax, DWORD PTR _length1$[ebp]
	cmp	eax, DWORD PTR _length2$[ebp]
	jne	SHORT $LN16@uprv_strCo
; Line 760
	mov	DWORD PTR _lengthResult$12509[ebp], 0
; Line 761
	mov	eax, DWORD PTR _length1$[ebp]
	mov	ecx, DWORD PTR _start1$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR _limit1$[ebp], edx
; Line 762
	jmp	SHORT $LN17@uprv_strCo
$LN16@uprv_strCo:
; Line 763
	mov	DWORD PTR _lengthResult$12509[ebp], 1
; Line 764
	mov	eax, DWORD PTR _length2$[ebp]
	mov	ecx, DWORD PTR _start1$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR _limit1$[ebp], edx
$LN17@uprv_strCo:
; Line 767
	mov	eax, DWORD PTR _s1$[ebp]
	cmp	eax, DWORD PTR _s2$[ebp]
	jne	SHORT $LN13@uprv_strCo
; Line 768
	mov	eax, DWORD PTR _lengthResult$12509[ebp]
	jmp	$LN36@uprv_strCo
$LN13@uprv_strCo:
; Line 773
	mov	eax, DWORD PTR _s1$[ebp]
	cmp	eax, DWORD PTR _limit1$[ebp]
	jne	SHORT $LN11@uprv_strCo
; Line 774
	mov	eax, DWORD PTR _lengthResult$12509[ebp]
	jmp	$LN36@uprv_strCo
$LN11@uprv_strCo:
; Line 777
	mov	eax, DWORD PTR _s1$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR _c1$[ebp], cx
; Line 778
	mov	eax, DWORD PTR _s2$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR _c2$[ebp], cx
; Line 779
	movzx	eax, WORD PTR _c1$[ebp]
	movzx	ecx, WORD PTR _c2$[ebp]
	cmp	eax, ecx
	je	SHORT $LN10@uprv_strCo
; Line 780
	jmp	SHORT $LN12@uprv_strCo
$LN10@uprv_strCo:
; Line 782
	mov	eax, DWORD PTR _s1$[ebp]
	add	eax, 2
	mov	DWORD PTR _s1$[ebp], eax
; Line 783
	mov	eax, DWORD PTR _s2$[ebp]
	add	eax, 2
	mov	DWORD PTR _s2$[ebp], eax
; Line 784
	jmp	SHORT $LN13@uprv_strCo
$LN12@uprv_strCo:
; Line 787
	mov	eax, DWORD PTR _length1$[ebp]
	mov	ecx, DWORD PTR _start1$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR _limit1$[ebp], edx
; Line 788
	mov	eax, DWORD PTR _length2$[ebp]
	mov	ecx, DWORD PTR _start2$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR _limit2$[ebp], edx
$LN29@uprv_strCo:
; Line 792
	movzx	eax, WORD PTR _c1$[ebp]
	cmp	eax, 55296				; 0000d800H
	jl	$LN9@uprv_strCo
	movzx	eax, WORD PTR _c2$[ebp]
	cmp	eax, 55296				; 0000d800H
	jl	$LN9@uprv_strCo
	movsx	eax, BYTE PTR _codePointOrder$[ebp]
	test	eax, eax
	je	$LN9@uprv_strCo
; Line 797
	movzx	eax, WORD PTR _c1$[ebp]
	cmp	eax, 56319				; 0000dbffH
	jg	SHORT $LN6@uprv_strCo
	mov	eax, DWORD PTR _s1$[ebp]
	add	eax, 2
	cmp	eax, DWORD PTR _limit1$[ebp]
	je	SHORT $LN6@uprv_strCo
	mov	eax, DWORD PTR _s1$[ebp]
	movzx	ecx, WORD PTR [eax+2]
	and	ecx, -1024				; fffffc00H
	cmp	ecx, 56320				; 0000dc00H
	je	SHORT $LN7@uprv_strCo
$LN6@uprv_strCo:
	movzx	eax, WORD PTR _c1$[ebp]
	and	eax, -1024				; fffffc00H
	cmp	eax, 56320				; 0000dc00H
	jne	SHORT $LN8@uprv_strCo
	mov	eax, DWORD PTR _start1$[ebp]
	cmp	eax, DWORD PTR _s1$[ebp]
	je	SHORT $LN8@uprv_strCo
	mov	eax, DWORD PTR _s1$[ebp]
	movzx	ecx, WORD PTR [eax-2]
	and	ecx, -1024				; fffffc00H
	cmp	ecx, 55296				; 0000d800H
	jne	SHORT $LN8@uprv_strCo
$LN7@uprv_strCo:
; Line 799
	jmp	SHORT $LN5@uprv_strCo
$LN8@uprv_strCo:
; Line 801
	movzx	eax, WORD PTR _c1$[ebp]
	sub	eax, 10240				; 00002800H
	mov	WORD PTR _c1$[ebp], ax
$LN5@uprv_strCo:
; Line 807
	movzx	eax, WORD PTR _c2$[ebp]
	cmp	eax, 56319				; 0000dbffH
	jg	SHORT $LN2@uprv_strCo
	mov	eax, DWORD PTR _s2$[ebp]
	add	eax, 2
	cmp	eax, DWORD PTR _limit2$[ebp]
	je	SHORT $LN2@uprv_strCo
	mov	eax, DWORD PTR _s2$[ebp]
	movzx	ecx, WORD PTR [eax+2]
	and	ecx, -1024				; fffffc00H
	cmp	ecx, 56320				; 0000dc00H
	je	SHORT $LN3@uprv_strCo
$LN2@uprv_strCo:
	movzx	eax, WORD PTR _c2$[ebp]
	and	eax, -1024				; fffffc00H
	cmp	eax, 56320				; 0000dc00H
	jne	SHORT $LN4@uprv_strCo
	mov	eax, DWORD PTR _start2$[ebp]
	cmp	eax, DWORD PTR _s2$[ebp]
	je	SHORT $LN4@uprv_strCo
	mov	eax, DWORD PTR _s2$[ebp]
	movzx	ecx, WORD PTR [eax-2]
	and	ecx, -1024				; fffffc00H
	cmp	ecx, 55296				; 0000d800H
	jne	SHORT $LN4@uprv_strCo
$LN3@uprv_strCo:
; Line 809
	jmp	SHORT $LN9@uprv_strCo
$LN4@uprv_strCo:
; Line 811
	movzx	eax, WORD PTR _c2$[ebp]
	sub	eax, 10240				; 00002800H
	mov	WORD PTR _c2$[ebp], ax
$LN9@uprv_strCo:
; Line 816
	movzx	eax, WORD PTR _c1$[ebp]
	movzx	ecx, WORD PTR _c2$[ebp]
	sub	eax, ecx
$LN36@uprv_strCo:
; Line 817
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 276				; 00000114H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_uprv_strCompare_56 ENDP
_TEXT	ENDS
PUBLIC	_u_strCompareIter_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _u_strCompareIter_56
_TEXT	SEGMENT
_c2$ = -20						; size = 4
_c1$ = -8						; size = 4
_iter1$ = 8						; size = 4
_iter2$ = 12						; size = 4
_codePointOrder$ = 16					; size = 1
_u_strCompareIter_56 PROC				; COMDAT
; Line 826
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 830
	cmp	DWORD PTR _iter1$[ebp], 0
	je	SHORT $LN15@u_strCompa
	cmp	DWORD PTR _iter2$[ebp], 0
	jne	SHORT $LN16@u_strCompa
$LN15@u_strCompa:
; Line 831
	xor	eax, eax
	jmp	$LN17@u_strCompa
$LN16@u_strCompa:
; Line 833
	mov	eax, DWORD PTR _iter1$[ebp]
	cmp	eax, DWORD PTR _iter2$[ebp]
	jne	SHORT $LN14@u_strCompa
; Line 834
	xor	eax, eax
	jmp	$LN17@u_strCompa
$LN14@u_strCompa:
; Line 838
	mov	esi, esp
	push	0
	push	0
	mov	eax, DWORD PTR _iter1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _iter1$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 839
	mov	esi, esp
	push	0
	push	0
	mov	eax, DWORD PTR _iter2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _iter2$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN13@u_strCompa:
; Line 843
	mov	esi, esp
	mov	eax, DWORD PTR _iter1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _iter1$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _c1$[ebp], eax
; Line 844
	mov	esi, esp
	mov	eax, DWORD PTR _iter2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _iter2$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _c2$[ebp], eax
; Line 845
	mov	eax, DWORD PTR _c1$[ebp]
	cmp	eax, DWORD PTR _c2$[ebp]
	je	SHORT $LN11@u_strCompa
; Line 846
	jmp	SHORT $LN12@u_strCompa
$LN11@u_strCompa:
; Line 848
	cmp	DWORD PTR _c1$[ebp], -1
	jne	SHORT $LN10@u_strCompa
; Line 849
	xor	eax, eax
	jmp	$LN17@u_strCompa
$LN10@u_strCompa:
; Line 851
	jmp	SHORT $LN13@u_strCompa
$LN12@u_strCompa:
; Line 854
	cmp	DWORD PTR _c1$[ebp], 55296		; 0000d800H
	jl	$LN9@u_strCompa
	cmp	DWORD PTR _c2$[ebp], 55296		; 0000d800H
	jl	$LN9@u_strCompa
	movsx	eax, BYTE PTR _codePointOrder$[ebp]
	test	eax, eax
	je	$LN9@u_strCompa
; Line 859
	cmp	DWORD PTR _c1$[ebp], 56319		; 0000dbffH
	jg	SHORT $LN6@u_strCompa
	mov	esi, esp
	mov	eax, DWORD PTR _iter1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _iter1$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	and	eax, -1024				; fffffc00H
	cmp	eax, 56320				; 0000dc00H
	je	SHORT $LN7@u_strCompa
$LN6@u_strCompa:
	mov	eax, DWORD PTR _c1$[ebp]
	and	eax, -1024				; fffffc00H
	cmp	eax, 56320				; 0000dc00H
	jne	SHORT $LN8@u_strCompa
	mov	esi, esp
	mov	eax, DWORD PTR _iter1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _iter1$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	mov	eax, DWORD PTR _iter1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _iter1$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	and	eax, -1024				; fffffc00H
	cmp	eax, 55296				; 0000d800H
	jne	SHORT $LN8@u_strCompa
$LN7@u_strCompa:
; Line 861
	jmp	SHORT $LN5@u_strCompa
$LN8@u_strCompa:
; Line 863
	mov	eax, DWORD PTR _c1$[ebp]
	sub	eax, 10240				; 00002800H
	mov	DWORD PTR _c1$[ebp], eax
$LN5@u_strCompa:
; Line 869
	cmp	DWORD PTR _c2$[ebp], 56319		; 0000dbffH
	jg	SHORT $LN2@u_strCompa
	mov	esi, esp
	mov	eax, DWORD PTR _iter2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _iter2$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	and	eax, -1024				; fffffc00H
	cmp	eax, 56320				; 0000dc00H
	je	SHORT $LN3@u_strCompa
$LN2@u_strCompa:
	mov	eax, DWORD PTR _c2$[ebp]
	and	eax, -1024				; fffffc00H
	cmp	eax, 56320				; 0000dc00H
	jne	SHORT $LN4@u_strCompa
	mov	esi, esp
	mov	eax, DWORD PTR _iter2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _iter2$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	mov	eax, DWORD PTR _iter2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _iter2$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	and	eax, -1024				; fffffc00H
	cmp	eax, 55296				; 0000d800H
	jne	SHORT $LN4@u_strCompa
$LN3@u_strCompa:
; Line 871
	jmp	SHORT $LN9@u_strCompa
$LN4@u_strCompa:
; Line 873
	mov	eax, DWORD PTR _c2$[ebp]
	sub	eax, 10240				; 00002800H
	mov	DWORD PTR _c2$[ebp], eax
$LN9@u_strCompa:
; Line 878
	mov	eax, DWORD PTR _c1$[ebp]
	sub	eax, DWORD PTR _c2$[ebp]
$LN17@u_strCompa:
; Line 879
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_u_strCompareIter_56 ENDP
_TEXT	ENDS
PUBLIC	_u_strCompare_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _u_strCompare_56
_TEXT	SEGMENT
_s1$ = 8						; size = 4
_length1$ = 12						; size = 4
_s2$ = 16						; size = 4
_length2$ = 20						; size = 4
_codePointOrder$ = 24					; size = 1
_u_strCompare_56 PROC					; COMDAT
; Line 924
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 926
	cmp	DWORD PTR _s1$[ebp], 0
	je	SHORT $LN1@u_strCompa@2
	cmp	DWORD PTR _length1$[ebp], -1
	jl	SHORT $LN1@u_strCompa@2
	cmp	DWORD PTR _s2$[ebp], 0
	je	SHORT $LN1@u_strCompa@2
	cmp	DWORD PTR _length2$[ebp], -1
	jge	SHORT $LN2@u_strCompa@2
$LN1@u_strCompa@2:
; Line 927
	xor	eax, eax
	jmp	SHORT $LN3@u_strCompa@2
$LN2@u_strCompa@2:
; Line 929
	movzx	eax, BYTE PTR _codePointOrder$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _length2$[ebp]
	push	ecx
	mov	edx, DWORD PTR _s2$[ebp]
	push	edx
	mov	eax, DWORD PTR _length1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _s1$[ebp]
	push	ecx
	call	_uprv_strCompare_56
	add	esp, 24					; 00000018H
$LN3@u_strCompa@2:
; Line 930
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_u_strCompare_56 ENDP
_TEXT	ENDS
PUBLIC	_u_strcmpCodePointOrder_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _u_strcmpCodePointOrder_56
_TEXT	SEGMENT
_s1$ = 8						; size = 4
_s2$ = 12						; size = 4
_u_strcmpCodePointOrder_56 PROC				; COMDAT
; Line 934
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 935
	push	1
	push	0
	push	-1
	mov	eax, DWORD PTR _s2$[ebp]
	push	eax
	push	-1
	mov	ecx, DWORD PTR _s1$[ebp]
	push	ecx
	call	_uprv_strCompare_56
	add	esp, 24					; 00000018H
; Line 936
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_u_strcmpCodePointOrder_56 ENDP
_TEXT	ENDS
PUBLIC	_u_strncmp_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _u_strncmp_56
_TEXT	SEGMENT
_rc$12578 = -8						; size = 4
_s1$ = 8						; size = 4
_s2$ = 12						; size = 4
_n$ = 16						; size = 4
_u_strncmp_56 PROC					; COMDAT
; Line 942
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 943
	cmp	DWORD PTR _n$[ebp], 0
	jle	SHORT $LN6@u_strncmp_
$LN5@u_strncmp_:
; Line 946
	mov	eax, DWORD PTR _s1$[ebp]
	movzx	ecx, WORD PTR [eax]
	mov	edx, DWORD PTR _s2$[ebp]
	movzx	eax, WORD PTR [edx]
	sub	ecx, eax
	mov	DWORD PTR _rc$12578[ebp], ecx
; Line 947
	jne	SHORT $LN2@u_strncmp_
	mov	eax, DWORD PTR _s1$[ebp]
	movzx	ecx, WORD PTR [eax]
	test	ecx, ecx
	je	SHORT $LN2@u_strncmp_
	mov	eax, DWORD PTR _n$[ebp]
	sub	eax, 1
	mov	DWORD PTR _n$[ebp], eax
	jne	SHORT $LN3@u_strncmp_
$LN2@u_strncmp_:
; Line 948
	mov	eax, DWORD PTR _rc$12578[ebp]
	jmp	SHORT $LN7@u_strncmp_
$LN3@u_strncmp_:
; Line 950
	mov	eax, DWORD PTR _s1$[ebp]
	add	eax, 2
	mov	DWORD PTR _s1$[ebp], eax
; Line 951
	mov	eax, DWORD PTR _s2$[ebp]
	add	eax, 2
	mov	DWORD PTR _s2$[ebp], eax
; Line 952
	jmp	SHORT $LN5@u_strncmp_
	jmp	SHORT $LN7@u_strncmp_
$LN6@u_strncmp_:
; Line 954
	xor	eax, eax
$LN7@u_strncmp_:
; Line 956
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_u_strncmp_56 ENDP
_TEXT	ENDS
PUBLIC	_u_strncmpCodePointOrder_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _u_strncmpCodePointOrder_56
_TEXT	SEGMENT
_s1$ = 8						; size = 4
_s2$ = 12						; size = 4
_n$ = 16						; size = 4
_u_strncmpCodePointOrder_56 PROC			; COMDAT
; Line 959
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 960
	push	1
	push	1
	mov	eax, DWORD PTR _n$[ebp]
	push	eax
	mov	ecx, DWORD PTR _s2$[ebp]
	push	ecx
	mov	edx, DWORD PTR _n$[ebp]
	push	edx
	mov	eax, DWORD PTR _s1$[ebp]
	push	eax
	call	_uprv_strCompare_56
	add	esp, 24					; 00000018H
; Line 961
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_u_strncmpCodePointOrder_56 ENDP
_TEXT	ENDS
PUBLIC	_u_strcpy_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _u_strcpy_56
_TEXT	SEGMENT
tv68 = -208						; size = 4
_anchor$ = -8						; size = 4
_dst$ = 8						; size = 4
_src$ = 12						; size = 4
_u_strcpy_56 PROC					; COMDAT
; Line 966
	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 967
	mov	eax, DWORD PTR _dst$[ebp]
	mov	DWORD PTR _anchor$[ebp], eax
$LN2@u_strcpy_5:
; Line 969
	mov	eax, DWORD PTR _dst$[ebp]
	mov	ecx, DWORD PTR _src$[ebp]
	mov	dx, WORD PTR [ecx]
	mov	WORD PTR [eax], dx
	mov	eax, DWORD PTR _dst$[ebp]
	movzx	ecx, WORD PTR [eax]
	mov	edx, DWORD PTR _dst$[ebp]
	add	edx, 2
	mov	DWORD PTR _dst$[ebp], edx
	mov	eax, DWORD PTR _src$[ebp]
	add	eax, 2
	mov	DWORD PTR _src$[ebp], eax
	test	ecx, ecx
	je	SHORT $LN5@u_strcpy_5
	mov	DWORD PTR tv68[ebp], 1
	jmp	SHORT $LN6@u_strcpy_5
$LN5@u_strcpy_5:
	mov	DWORD PTR tv68[ebp], 0
$LN6@u_strcpy_5:
	cmp	DWORD PTR tv68[ebp], 0
	je	SHORT $LN1@u_strcpy_5
; Line 970
	jmp	SHORT $LN2@u_strcpy_5
$LN1@u_strcpy_5:
; Line 972
	mov	eax, DWORD PTR _anchor$[ebp]
; Line 973
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_u_strcpy_56 ENDP
_TEXT	ENDS
PUBLIC	_u_strncpy_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _u_strncpy_56
_TEXT	SEGMENT
tv69 = -208						; size = 4
_anchor$ = -8						; size = 4
_dst$ = 8						; size = 4
_src$ = 12						; size = 4
_n$ = 16						; size = 4
_u_strncpy_56 PROC					; COMDAT
; Line 979
	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 980
	mov	eax, DWORD PTR _dst$[ebp]
	mov	DWORD PTR _anchor$[ebp], eax
$LN2@u_strncpy_:
; Line 983
	cmp	DWORD PTR _n$[ebp], 0
	jle	SHORT $LN1@u_strncpy_
	mov	eax, DWORD PTR _dst$[ebp]
	mov	ecx, DWORD PTR _src$[ebp]
	mov	dx, WORD PTR [ecx]
	mov	WORD PTR [eax], dx
	mov	eax, DWORD PTR _dst$[ebp]
	movzx	ecx, WORD PTR [eax]
	mov	edx, DWORD PTR _dst$[ebp]
	add	edx, 2
	mov	DWORD PTR _dst$[ebp], edx
	mov	eax, DWORD PTR _src$[ebp]
	add	eax, 2
	mov	DWORD PTR _src$[ebp], eax
	test	ecx, ecx
	je	SHORT $LN5@u_strncpy_
	mov	DWORD PTR tv69[ebp], 1
	jmp	SHORT $LN6@u_strncpy_
$LN5@u_strncpy_:
	mov	DWORD PTR tv69[ebp], 0
$LN6@u_strncpy_:
	cmp	DWORD PTR tv69[ebp], 0
	je	SHORT $LN1@u_strncpy_
; Line 984
	mov	eax, DWORD PTR _n$[ebp]
	sub	eax, 1
	mov	DWORD PTR _n$[ebp], eax
; Line 985
	jmp	SHORT $LN2@u_strncpy_
$LN1@u_strncpy_:
; Line 987
	mov	eax, DWORD PTR _anchor$[ebp]
; Line 988
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_u_strncpy_56 ENDP
_TEXT	ENDS
EXTRN	__imp__wcslen:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _u_strlen_56
_TEXT	SEGMENT
_s$ = 8							; size = 4
_u_strlen_56 PROC					; COMDAT
; Line 992
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 994
	mov	esi, esp
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	DWORD PTR __imp__wcslen
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1002
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_u_strlen_56 ENDP
_TEXT	ENDS
PUBLIC	_u_countChar32_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _u_countChar32_56
_TEXT	SEGMENT
tv84 = -220						; size = 4
_c$12627 = -20						; size = 2
_count$ = -8						; size = 4
_s$ = 8							; size = 4
_length$ = 12						; size = 4
_u_countChar32_56 PROC					; COMDAT
; Line 1005
	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1008
	cmp	DWORD PTR _s$[ebp], 0
	je	SHORT $LN11@u_countCha
	cmp	DWORD PTR _length$[ebp], -1
	jge	SHORT $LN12@u_countCha
$LN11@u_countCha:
; Line 1009
	xor	eax, eax
	jmp	$LN13@u_countCha
$LN12@u_countCha:
; Line 1012
	mov	DWORD PTR _count$[ebp], 0
; Line 1013
	cmp	DWORD PTR _length$[ebp], 0
	jl	SHORT $LN4@u_countCha
$LN9@u_countCha:
; Line 1014
	cmp	DWORD PTR _length$[ebp], 0
	jle	SHORT $LN8@u_countCha
; Line 1015
	mov	eax, DWORD PTR _count$[ebp]
	add	eax, 1
	mov	DWORD PTR _count$[ebp], eax
; Line 1016
	mov	eax, DWORD PTR _s$[ebp]
	movzx	ecx, WORD PTR [eax]
	and	ecx, -1024				; fffffc00H
	cmp	ecx, 55296				; 0000d800H
	jne	SHORT $LN7@u_countCha
	cmp	DWORD PTR _length$[ebp], 2
	jl	SHORT $LN7@u_countCha
	mov	eax, DWORD PTR _s$[ebp]
	movzx	ecx, WORD PTR [eax+2]
	and	ecx, -1024				; fffffc00H
	cmp	ecx, 56320				; 0000dc00H
	jne	SHORT $LN7@u_countCha
; Line 1017
	mov	eax, DWORD PTR _s$[ebp]
	add	eax, 4
	mov	DWORD PTR _s$[ebp], eax
; Line 1018
	mov	eax, DWORD PTR _length$[ebp]
	sub	eax, 2
	mov	DWORD PTR _length$[ebp], eax
; Line 1019
	jmp	SHORT $LN6@u_countCha
$LN7@u_countCha:
; Line 1020
	mov	eax, DWORD PTR _s$[ebp]
	add	eax, 2
	mov	DWORD PTR _s$[ebp], eax
; Line 1021
	mov	eax, DWORD PTR _length$[ebp]
	sub	eax, 1
	mov	DWORD PTR _length$[ebp], eax
$LN6@u_countCha:
; Line 1023
	jmp	SHORT $LN9@u_countCha
$LN8@u_countCha:
; Line 1024
	jmp	SHORT $LN5@u_countCha
$LN4@u_countCha:
; Line 1028
	mov	eax, DWORD PTR _s$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR _c$12627[ebp], cx
	movzx	edx, WORD PTR _c$12627[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	add	eax, 2
	mov	DWORD PTR _s$[ebp], eax
	test	edx, edx
	jne	SHORT $LN15@u_countCha
	mov	DWORD PTR tv84[ebp], 1
	jmp	SHORT $LN16@u_countCha
$LN15@u_countCha:
	mov	DWORD PTR tv84[ebp], 0
$LN16@u_countCha:
	cmp	DWORD PTR tv84[ebp], 0
	je	SHORT $LN2@u_countCha
; Line 1029
	jmp	SHORT $LN5@u_countCha
$LN2@u_countCha:
; Line 1031
	mov	eax, DWORD PTR _count$[ebp]
	add	eax, 1
	mov	DWORD PTR _count$[ebp], eax
; Line 1037
	movzx	eax, WORD PTR _c$12627[ebp]
	and	eax, -1024				; fffffc00H
	cmp	eax, 55296				; 0000d800H
	jne	SHORT $LN1@u_countCha
	mov	eax, DWORD PTR _s$[ebp]
	movzx	ecx, WORD PTR [eax]
	and	ecx, -1024				; fffffc00H
	cmp	ecx, 56320				; 0000dc00H
	jne	SHORT $LN1@u_countCha
; Line 1038
	mov	eax, DWORD PTR _s$[ebp]
	add	eax, 2
	mov	DWORD PTR _s$[ebp], eax
$LN1@u_countCha:
; Line 1040
	jmp	SHORT $LN4@u_countCha
$LN5@u_countCha:
; Line 1042
	mov	eax, DWORD PTR _count$[ebp]
$LN13@u_countCha:
; Line 1043
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_u_countChar32_56 ENDP
_TEXT	ENDS
PUBLIC	_u_strHasMoreChar32Than_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _u_strHasMoreChar32Than_56
_TEXT	SEGMENT
tv95 = -232						; size = 4
tv71 = -232						; size = 4
_maxSupplementary$12651 = -32				; size = 4
_limit$12650 = -20					; size = 4
_c$12642 = -8						; size = 2
_s$ = 8							; size = 4
_length$ = 12						; size = 4
_number$ = 16						; size = 4
_u_strHasMoreChar32Than_56 PROC				; COMDAT
; Line 1046
	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1048
	cmp	DWORD PTR _number$[ebp], 0
	jge	SHORT $LN18@u_strHasMo
; Line 1049
	mov	al, 1
	jmp	$LN19@u_strHasMo
$LN18@u_strHasMo:
; Line 1051
	cmp	DWORD PTR _s$[ebp], 0
	je	SHORT $LN16@u_strHasMo
	cmp	DWORD PTR _length$[ebp], -1
	jge	SHORT $LN17@u_strHasMo
$LN16@u_strHasMo:
; Line 1052
	xor	al, al
	jmp	$LN19@u_strHasMo
$LN17@u_strHasMo:
; Line 1055
	cmp	DWORD PTR _length$[ebp], -1
	jne	$LN15@u_strHasMo
$LN14@u_strHasMo:
; Line 1061
	mov	eax, DWORD PTR _s$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR _c$12642[ebp], cx
	movzx	edx, WORD PTR _c$12642[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	add	eax, 2
	mov	DWORD PTR _s$[ebp], eax
	test	edx, edx
	jne	SHORT $LN21@u_strHasMo
	mov	DWORD PTR tv71[ebp], 1
	jmp	SHORT $LN22@u_strHasMo
$LN21@u_strHasMo:
	mov	DWORD PTR tv71[ebp], 0
$LN22@u_strHasMo:
	cmp	DWORD PTR tv71[ebp], 0
	je	SHORT $LN12@u_strHasMo
; Line 1062
	xor	al, al
	jmp	$LN19@u_strHasMo
$LN12@u_strHasMo:
; Line 1064
	cmp	DWORD PTR _number$[ebp], 0
	jne	SHORT $LN11@u_strHasMo
; Line 1065
	mov	al, 1
	jmp	$LN19@u_strHasMo
$LN11@u_strHasMo:
; Line 1067
	movzx	eax, WORD PTR _c$12642[ebp]
	and	eax, -1024				; fffffc00H
	cmp	eax, 55296				; 0000d800H
	jne	SHORT $LN10@u_strHasMo
	mov	eax, DWORD PTR _s$[ebp]
	movzx	ecx, WORD PTR [eax]
	and	ecx, -1024				; fffffc00H
	cmp	ecx, 56320				; 0000dc00H
	jne	SHORT $LN10@u_strHasMo
; Line 1068
	mov	eax, DWORD PTR _s$[ebp]
	add	eax, 2
	mov	DWORD PTR _s$[ebp], eax
$LN10@u_strHasMo:
; Line 1070
	mov	eax, DWORD PTR _number$[ebp]
	sub	eax, 1
	mov	DWORD PTR _number$[ebp], eax
; Line 1071
	jmp	$LN14@u_strHasMo
	jmp	$LN19@u_strHasMo
$LN15@u_strHasMo:
; Line 1078
	mov	eax, DWORD PTR _length$[ebp]
	add	eax, 1
	cdq
	sub	eax, edx
	sar	eax, 1
	cmp	eax, DWORD PTR _number$[ebp]
	jle	SHORT $LN8@u_strHasMo
; Line 1079
	mov	al, 1
	jmp	$LN19@u_strHasMo
$LN8@u_strHasMo:
; Line 1083
	mov	eax, DWORD PTR _length$[ebp]
	sub	eax, DWORD PTR _number$[ebp]
	mov	DWORD PTR _maxSupplementary$12651[ebp], eax
; Line 1084
	cmp	DWORD PTR _maxSupplementary$12651[ebp], 0
	jg	SHORT $LN7@u_strHasMo
; Line 1085
	xor	al, al
	jmp	$LN19@u_strHasMo
$LN7@u_strHasMo:
; Line 1093
	mov	eax, DWORD PTR _length$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR _limit$12650[ebp], edx
$LN6@u_strHasMo:
; Line 1095
	mov	eax, DWORD PTR _s$[ebp]
	cmp	eax, DWORD PTR _limit$12650[ebp]
	jne	SHORT $LN4@u_strHasMo
; Line 1096
	xor	al, al
	jmp	$LN19@u_strHasMo
$LN4@u_strHasMo:
; Line 1098
	cmp	DWORD PTR _number$[ebp], 0
	jne	SHORT $LN3@u_strHasMo
; Line 1099
	mov	al, 1
	jmp	$LN19@u_strHasMo
$LN3@u_strHasMo:
; Line 1101
	mov	eax, DWORD PTR _s$[ebp]
	movzx	ecx, WORD PTR [eax]
	and	ecx, -1024				; fffffc00H
	mov	edx, DWORD PTR _s$[ebp]
	add	edx, 2
	mov	DWORD PTR _s$[ebp], edx
	cmp	ecx, 55296				; 0000d800H
	jne	SHORT $LN23@u_strHasMo
	mov	DWORD PTR tv95[ebp], 1
	jmp	SHORT $LN24@u_strHasMo
$LN23@u_strHasMo:
	mov	DWORD PTR tv95[ebp], 0
$LN24@u_strHasMo:
	cmp	DWORD PTR tv95[ebp], 0
	je	SHORT $LN2@u_strHasMo
	mov	eax, DWORD PTR _s$[ebp]
	cmp	eax, DWORD PTR _limit$12650[ebp]
	je	SHORT $LN2@u_strHasMo
	mov	eax, DWORD PTR _s$[ebp]
	movzx	ecx, WORD PTR [eax]
	and	ecx, -1024				; fffffc00H
	cmp	ecx, 56320				; 0000dc00H
	jne	SHORT $LN2@u_strHasMo
; Line 1102
	mov	eax, DWORD PTR _s$[ebp]
	add	eax, 2
	mov	DWORD PTR _s$[ebp], eax
; Line 1103
	mov	eax, DWORD PTR _maxSupplementary$12651[ebp]
	sub	eax, 1
	mov	DWORD PTR _maxSupplementary$12651[ebp], eax
	cmp	DWORD PTR _maxSupplementary$12651[ebp], 0
	jg	SHORT $LN2@u_strHasMo
; Line 1105
	xor	al, al
	jmp	SHORT $LN19@u_strHasMo
$LN2@u_strHasMo:
; Line 1108
	mov	eax, DWORD PTR _number$[ebp]
	sub	eax, 1
	mov	DWORD PTR _number$[ebp], eax
; Line 1109
	jmp	$LN6@u_strHasMo
$LN19@u_strHasMo:
; Line 1111
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_u_strHasMoreChar32Than_56 ENDP
_TEXT	ENDS
PUBLIC	_u_memcpy_56
EXTRN	_memcpy:PROC
EXTRN	_uprv_checkValidMemory:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _u_memcpy_56
_TEXT	SEGMENT
_dest$ = 8						; size = 4
_src$ = 12						; size = 4
_count$ = 16						; size = 4
_u_memcpy_56 PROC					; COMDAT
; Line 1114
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1115
	cmp	DWORD PTR _count$[ebp], 0
	jle	SHORT $LN1@u_memcpy_5
; Line 1116
	push	1
	mov	eax, DWORD PTR _src$[ebp]
	push	eax
	call	_uprv_checkValidMemory
	add	esp, 8
	mov	ecx, DWORD PTR _count$[ebp]
	shl	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _src$[ebp]
	push	edx
	mov	eax, DWORD PTR _dest$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@u_memcpy_5:
; Line 1118
	mov	eax, DWORD PTR _dest$[ebp]
; Line 1119
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_u_memcpy_56 ENDP
_TEXT	ENDS
PUBLIC	_u_memmove_56
EXTRN	__imp__memmove:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _u_memmove_56
_TEXT	SEGMENT
_dest$ = 8						; size = 4
_src$ = 12						; size = 4
_count$ = 16						; size = 4
_u_memmove_56 PROC					; COMDAT
; Line 1122
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1123
	cmp	DWORD PTR _count$[ebp], 0
	jle	SHORT $LN1@u_memmove_
; Line 1124
	push	1
	mov	eax, DWORD PTR _src$[ebp]
	push	eax
	call	_uprv_checkValidMemory
	add	esp, 8
	mov	ecx, DWORD PTR _count$[ebp]
	shl	ecx, 1
	mov	esi, esp
	push	ecx
	mov	edx, DWORD PTR _src$[ebp]
	push	edx
	mov	eax, DWORD PTR _dest$[ebp]
	push	eax
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@u_memmove_:
; Line 1126
	mov	eax, DWORD PTR _dest$[ebp]
; Line 1127
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_u_memmove_56 ENDP
_TEXT	ENDS
PUBLIC	_u_memset_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _u_memset_56
_TEXT	SEGMENT
_limit$12680 = -20					; size = 4
_ptr$12679 = -8						; size = 4
_dest$ = 8						; size = 4
_c$ = 12						; size = 2
_count$ = 16						; size = 4
_u_memset_56 PROC					; COMDAT
; Line 1130
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1131
	cmp	DWORD PTR _count$[ebp], 0
	jle	SHORT $LN3@u_memset_5
; Line 1132
	mov	eax, DWORD PTR _dest$[ebp]
	mov	DWORD PTR _ptr$12679[ebp], eax
; Line 1133
	mov	eax, DWORD PTR _count$[ebp]
	mov	ecx, DWORD PTR _dest$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR _limit$12680[ebp], edx
$LN2@u_memset_5:
; Line 1135
	mov	eax, DWORD PTR _ptr$12679[ebp]
	cmp	eax, DWORD PTR _limit$12680[ebp]
	jae	SHORT $LN3@u_memset_5
; Line 1136
	mov	eax, DWORD PTR _ptr$12679[ebp]
	mov	cx, WORD PTR _c$[ebp]
	mov	WORD PTR [eax], cx
	mov	edx, DWORD PTR _ptr$12679[ebp]
	add	edx, 2
	mov	DWORD PTR _ptr$12679[ebp], edx
; Line 1137
	jmp	SHORT $LN2@u_memset_5
$LN3@u_memset_5:
; Line 1139
	mov	eax, DWORD PTR _dest$[ebp]
; Line 1140
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_u_memset_56 ENDP
_TEXT	ENDS
PUBLIC	_u_memcmp_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _u_memcmp_56
_TEXT	SEGMENT
_result$12691 = -20					; size = 4
_limit$12690 = -8					; size = 4
_buf1$ = 8						; size = 4
_buf2$ = 12						; size = 4
_count$ = 16						; size = 4
_u_memcmp_56 PROC					; COMDAT
; Line 1143
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1144
	cmp	DWORD PTR _count$[ebp], 0
	jle	SHORT $LN4@u_memcmp_5
; Line 1145
	mov	eax, DWORD PTR _count$[ebp]
	mov	ecx, DWORD PTR _buf1$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR _limit$12690[ebp], edx
$LN3@u_memcmp_5:
; Line 1148
	mov	eax, DWORD PTR _buf1$[ebp]
	cmp	eax, DWORD PTR _limit$12690[ebp]
	jae	SHORT $LN4@u_memcmp_5
; Line 1149
	mov	eax, DWORD PTR _buf1$[ebp]
	movzx	ecx, WORD PTR [eax]
	mov	edx, DWORD PTR _buf2$[ebp]
	movzx	eax, WORD PTR [edx]
	sub	ecx, eax
	mov	DWORD PTR _result$12691[ebp], ecx
; Line 1150
	je	SHORT $LN1@u_memcmp_5
; Line 1151
	mov	eax, DWORD PTR _result$12691[ebp]
	jmp	SHORT $LN5@u_memcmp_5
$LN1@u_memcmp_5:
; Line 1153
	mov	eax, DWORD PTR _buf1$[ebp]
	add	eax, 2
	mov	DWORD PTR _buf1$[ebp], eax
; Line 1154
	mov	eax, DWORD PTR _buf2$[ebp]
	add	eax, 2
	mov	DWORD PTR _buf2$[ebp], eax
; Line 1155
	jmp	SHORT $LN3@u_memcmp_5
$LN4@u_memcmp_5:
; Line 1157
	xor	eax, eax
$LN5@u_memcmp_5:
; Line 1158
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_u_memcmp_56 ENDP
_TEXT	ENDS
PUBLIC	_u_memcmpCodePointOrder_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _u_memcmpCodePointOrder_56
_TEXT	SEGMENT
_s1$ = 8						; size = 4
_s2$ = 12						; size = 4
_count$ = 16						; size = 4
_u_memcmpCodePointOrder_56 PROC				; COMDAT
; Line 1161
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1162
	push	1
	push	0
	mov	eax, DWORD PTR _count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _s2$[ebp]
	push	ecx
	mov	edx, DWORD PTR _count$[ebp]
	push	edx
	mov	eax, DWORD PTR _s1$[ebp]
	push	eax
	call	_uprv_strCompare_56
	add	esp, 24					; 00000018H
; Line 1163
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_u_memcmpCodePointOrder_56 ENDP
_TEXT	ENDS
PUBLIC	_u_unescapeAt_56
EXTRN	@_RTC_CheckStackVars@8:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _u_unescapeAt_56
_TEXT	SEGMENT
tv199 = -352						; size = 4
tv72 = -352						; size = 4
tv69 = -352						; size = 4
tv135 = -349						; size = 1
_c2$12788 = -152					; size = 2
_c2$12782 = -140					; size = 2
_ahead$12768 = -128					; size = 4
_braces$ = -113						; size = 1
_i$ = -104						; size = 4
_dig$ = -89						; size = 1
_bitsPerDigit$ = -77					; size = 1
_maxDig$ = -65						; size = 1
_minDig$ = -53						; size = 1
_n$ = -41						; size = 1
_result$ = -32						; size = 4
_c$ = -20						; size = 2
_start$ = -8						; size = 4
_charAt$ = 8						; size = 4
_offset$ = 12						; size = 4
_length$ = 16						; size = 4
_context$ = 20						; size = 4
_u_unescapeAt_56 PROC					; COMDAT
; Line 1213
	push	ebp
	mov	ebp, esp
	sub	esp, 352				; 00000160H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-352]
	mov	ecx, 88					; 00000058H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1215
	mov	eax, DWORD PTR _offset$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _start$[ebp], ecx
; Line 1217
	mov	DWORD PTR _result$[ebp], 0
; Line 1218
	mov	BYTE PTR _n$[ebp], 0
; Line 1219
	mov	BYTE PTR _minDig$[ebp], 0
; Line 1220
	mov	BYTE PTR _maxDig$[ebp], 0
; Line 1221
	mov	BYTE PTR _bitsPerDigit$[ebp], 4
; Line 1224
	mov	BYTE PTR _braces$[ebp], 0
; Line 1227
	mov	eax, DWORD PTR _offset$[ebp]
	cmp	DWORD PTR [eax], 0
	jl	SHORT $LN37@u_unescape
	mov	eax, DWORD PTR _offset$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR _length$[ebp]
	jl	SHORT $LN38@u_unescape
$LN37@u_unescape:
; Line 1228
	jmp	$err$12740
	jmp	$err$12740
$LN38@u_unescape:
; Line 1232
	mov	eax, DWORD PTR _offset$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv69[ebp], ecx
	mov	edx, DWORD PTR _offset$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 1
	mov	ecx, DWORD PTR _offset$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	esi, esp
	mov	edx, DWORD PTR _context$[ebp]
	push	edx
	mov	eax, DWORD PTR tv69[ebp]
	push	eax
	call	DWORD PTR _charAt$[ebp]
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	WORD PTR _c$[ebp], ax
; Line 1235
	movzx	eax, WORD PTR _c$[ebp]
	mov	DWORD PTR tv72[ebp], eax
	cmp	DWORD PTR tv72[ebp], 85			; 00000055H
	je	SHORT $LN32@u_unescape
	cmp	DWORD PTR tv72[ebp], 117		; 00000075H
	je	SHORT $LN33@u_unescape
	cmp	DWORD PTR tv72[ebp], 120		; 00000078H
	je	SHORT $LN31@u_unescape
	jmp	SHORT $LN28@u_unescape
$LN33@u_unescape:
; Line 1237
	mov	BYTE PTR _maxDig$[ebp], 4
	mov	al, BYTE PTR _maxDig$[ebp]
	mov	BYTE PTR _minDig$[ebp], al
; Line 1238
	jmp	$LN34@u_unescape
$LN32@u_unescape:
; Line 1240
	mov	BYTE PTR _maxDig$[ebp], 8
	mov	al, BYTE PTR _maxDig$[ebp]
	mov	BYTE PTR _minDig$[ebp], al
; Line 1241
	jmp	SHORT $LN34@u_unescape
$LN31@u_unescape:
; Line 1243
	mov	BYTE PTR _minDig$[ebp], 1
; Line 1244
	mov	eax, DWORD PTR _offset$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR _length$[ebp]
	jge	SHORT $LN30@u_unescape
	mov	esi, esp
	mov	eax, DWORD PTR _context$[ebp]
	push	eax
	mov	ecx, DWORD PTR _offset$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	DWORD PTR _charAt$[ebp]
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	movzx	eax, ax
	cmp	eax, 123				; 0000007bH
	jne	SHORT $LN30@u_unescape
; Line 1245
	mov	eax, DWORD PTR _offset$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _offset$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 1246
	mov	BYTE PTR _braces$[ebp], 1
; Line 1247
	mov	BYTE PTR _maxDig$[ebp], 8
; Line 1248
	jmp	SHORT $LN29@u_unescape
$LN30@u_unescape:
; Line 1249
	mov	BYTE PTR _maxDig$[ebp], 2
$LN29@u_unescape:
; Line 1251
	jmp	SHORT $LN34@u_unescape
$LN28@u_unescape:
; Line 1253
	movzx	eax, WORD PTR _c$[ebp]
	push	eax
	call	?_digit8@@YAC_W@Z			; _digit8
	add	esp, 4
	mov	BYTE PTR _dig$[ebp], al
; Line 1254
	movsx	eax, BYTE PTR _dig$[ebp]
	test	eax, eax
	jl	SHORT $LN34@u_unescape
; Line 1255
	mov	BYTE PTR _minDig$[ebp], 1
; Line 1256
	mov	BYTE PTR _maxDig$[ebp], 3
; Line 1257
	mov	BYTE PTR _n$[ebp], 1
; Line 1258
	mov	BYTE PTR _bitsPerDigit$[ebp], 3
; Line 1259
	movsx	eax, BYTE PTR _dig$[ebp]
	mov	DWORD PTR _result$[ebp], eax
$LN34@u_unescape:
; Line 1263
	movsx	eax, BYTE PTR _minDig$[ebp]
	test	eax, eax
	je	$LN26@u_unescape
$LN25@u_unescape:
; Line 1264
	mov	eax, DWORD PTR _offset$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR _length$[ebp]
	jge	$LN24@u_unescape
	movsx	eax, BYTE PTR _n$[ebp]
	movsx	ecx, BYTE PTR _maxDig$[ebp]
	cmp	eax, ecx
	jge	$LN24@u_unescape
; Line 1265
	mov	esi, esp
	mov	eax, DWORD PTR _context$[ebp]
	push	eax
	mov	ecx, DWORD PTR _offset$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	DWORD PTR _charAt$[ebp]
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	WORD PTR _c$[ebp], ax
; Line 1266
	movsx	eax, BYTE PTR _bitsPerDigit$[ebp]
	cmp	eax, 3
	jne	SHORT $LN41@u_unescape
	movzx	ecx, WORD PTR _c$[ebp]
	push	ecx
	call	?_digit8@@YAC_W@Z			; _digit8
	add	esp, 4
	mov	BYTE PTR tv135[ebp], al
	jmp	SHORT $LN42@u_unescape
$LN41@u_unescape:
	movzx	edx, WORD PTR _c$[ebp]
	push	edx
	call	?_digit16@@YAC_W@Z			; _digit16
	add	esp, 4
	mov	BYTE PTR tv135[ebp], al
$LN42@u_unescape:
	mov	al, BYTE PTR tv135[ebp]
	mov	BYTE PTR _dig$[ebp], al
; Line 1267
	movsx	eax, BYTE PTR _dig$[ebp]
	test	eax, eax
	jge	SHORT $LN23@u_unescape
; Line 1268
	jmp	SHORT $LN24@u_unescape
$LN23@u_unescape:
; Line 1270
	movsx	ecx, BYTE PTR _bitsPerDigit$[ebp]
	mov	eax, DWORD PTR _result$[ebp]
	shl	eax, cl
	movsx	ecx, BYTE PTR _dig$[ebp]
	or	eax, ecx
	mov	DWORD PTR _result$[ebp], eax
; Line 1271
	mov	eax, DWORD PTR _offset$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _offset$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 1272
	mov	al, BYTE PTR _n$[ebp]
	add	al, 1
	mov	BYTE PTR _n$[ebp], al
; Line 1273
	jmp	$LN25@u_unescape
$LN24@u_unescape:
; Line 1274
	movsx	eax, BYTE PTR _n$[ebp]
	movsx	ecx, BYTE PTR _minDig$[ebp]
	cmp	eax, ecx
	jge	SHORT $LN22@u_unescape
; Line 1275
	jmp	$err$12740
	jmp	$err$12740
$LN22@u_unescape:
; Line 1277
	movsx	eax, BYTE PTR _braces$[ebp]
	test	eax, eax
	je	SHORT $LN20@u_unescape
; Line 1278
	movzx	eax, WORD PTR _c$[ebp]
	cmp	eax, 125				; 0000007dH
	je	SHORT $LN19@u_unescape
; Line 1279
	jmp	$err$12740
	jmp	$err$12740
$LN19@u_unescape:
; Line 1281
	mov	eax, DWORD PTR _offset$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _offset$[ebp]
	mov	DWORD PTR [edx], ecx
$LN20@u_unescape:
; Line 1283
	cmp	DWORD PTR _result$[ebp], 0
	jl	SHORT $LN16@u_unescape
	cmp	DWORD PTR _result$[ebp], 1114112	; 00110000H
	jl	SHORT $LN17@u_unescape
$LN16@u_unescape:
; Line 1284
	jmp	$err$12740
	jmp	$err$12740
$LN17@u_unescape:
; Line 1290
	mov	eax, DWORD PTR _offset$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR _length$[ebp]
	jge	$LN14@u_unescape
	mov	eax, DWORD PTR _result$[ebp]
	and	eax, -1024				; fffffc00H
	cmp	eax, 55296				; 0000d800H
	jne	$LN14@u_unescape
; Line 1291
	mov	eax, DWORD PTR _offset$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	DWORD PTR _ahead$12768[ebp], ecx
; Line 1292
	mov	esi, esp
	mov	eax, DWORD PTR _context$[ebp]
	push	eax
	mov	ecx, DWORD PTR _offset$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	DWORD PTR _charAt$[ebp]
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	WORD PTR _c$[ebp], ax
; Line 1293
	movzx	eax, WORD PTR _c$[ebp]
	cmp	eax, 92					; 0000005cH
	jne	SHORT $LN13@u_unescape
	mov	eax, DWORD PTR _ahead$12768[ebp]
	cmp	eax, DWORD PTR _length$[ebp]
	jge	SHORT $LN13@u_unescape
; Line 1294
	mov	eax, DWORD PTR _context$[ebp]
	push	eax
	mov	ecx, DWORD PTR _length$[ebp]
	push	ecx
	lea	edx, DWORD PTR _ahead$12768[ebp]
	push	edx
	mov	eax, DWORD PTR _charAt$[ebp]
	push	eax
	call	_u_unescapeAt_56
	add	esp, 16					; 00000010H
	mov	WORD PTR _c$[ebp], ax
$LN13@u_unescape:
; Line 1296
	movzx	eax, WORD PTR _c$[ebp]
	and	eax, -1024				; fffffc00H
	cmp	eax, 56320				; 0000dc00H
	jne	SHORT $LN14@u_unescape
; Line 1297
	mov	eax, DWORD PTR _offset$[ebp]
	mov	ecx, DWORD PTR _ahead$12768[ebp]
	mov	DWORD PTR [eax], ecx
; Line 1298
	mov	eax, DWORD PTR _result$[ebp]
	shl	eax, 10					; 0000000aH
	movzx	ecx, WORD PTR _c$[ebp]
	lea	edx, DWORD PTR [eax+ecx-56613888]
	mov	DWORD PTR _result$[ebp], edx
$LN14@u_unescape:
; Line 1301
	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN39@u_unescape
$LN26@u_unescape:
; Line 1305
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN11@u_unescape
$LN10@u_unescape:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 2
	mov	DWORD PTR _i$[ebp], eax
$LN11@u_unescape:
	cmp	DWORD PTR _i$[ebp], 16			; 00000010H
	jge	SHORT $LN9@u_unescape
; Line 1306
	movzx	eax, WORD PTR _c$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	movzx	edx, WORD PTR _UNESCAPE_MAP[ecx*2]
	cmp	eax, edx
	jne	SHORT $LN8@u_unescape
; Line 1307
	mov	eax, DWORD PTR _i$[ebp]
	movzx	eax, WORD PTR _UNESCAPE_MAP[eax*2+2]
	jmp	$LN39@u_unescape
	jmp	SHORT $LN7@u_unescape
$LN8@u_unescape:
; Line 1308
	movzx	eax, WORD PTR _c$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	movzx	edx, WORD PTR _UNESCAPE_MAP[ecx*2]
	cmp	eax, edx
	jge	SHORT $LN7@u_unescape
; Line 1309
	jmp	SHORT $LN9@u_unescape
$LN7@u_unescape:
; Line 1311
	jmp	SHORT $LN10@u_unescape
$LN9@u_unescape:
; Line 1314
	movzx	eax, WORD PTR _c$[ebp]
	cmp	eax, 99					; 00000063H
	jne	$LN5@u_unescape
	mov	eax, DWORD PTR _offset$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR _length$[ebp]
	jge	$LN5@u_unescape
; Line 1315
	mov	eax, DWORD PTR _offset$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv199[ebp], ecx
	mov	edx, DWORD PTR _offset$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 1
	mov	ecx, DWORD PTR _offset$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	esi, esp
	mov	edx, DWORD PTR _context$[ebp]
	push	edx
	mov	eax, DWORD PTR tv199[ebp]
	push	eax
	call	DWORD PTR _charAt$[ebp]
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	WORD PTR _c$[ebp], ax
; Line 1316
	movzx	eax, WORD PTR _c$[ebp]
	and	eax, -1024				; fffffc00H
	cmp	eax, 55296				; 0000d800H
	jne	SHORT $LN4@u_unescape
	mov	eax, DWORD PTR _offset$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR _length$[ebp]
	jge	SHORT $LN4@u_unescape
; Line 1317
	mov	esi, esp
	mov	eax, DWORD PTR _context$[ebp]
	push	eax
	mov	ecx, DWORD PTR _offset$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	DWORD PTR _charAt$[ebp]
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	WORD PTR _c2$12782[ebp], ax
; Line 1318
	movzx	eax, WORD PTR _c2$12782[ebp]
	and	eax, -1024				; fffffc00H
	cmp	eax, 56320				; 0000dc00H
	jne	SHORT $LN4@u_unescape
; Line 1319
	mov	eax, DWORD PTR _offset$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _offset$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 1320
	movzx	eax, WORD PTR _c$[ebp]
	shl	eax, 10					; 0000000aH
	movzx	ecx, WORD PTR _c2$12782[ebp]
	lea	edx, DWORD PTR [eax+ecx-56613888]
	mov	WORD PTR _c$[ebp], dx
$LN4@u_unescape:
; Line 1323
	movzx	eax, WORD PTR _c$[ebp]
	and	eax, 31					; 0000001fH
	jmp	$LN39@u_unescape
$LN5@u_unescape:
; Line 1329
	movzx	eax, WORD PTR _c$[ebp]
	and	eax, -1024				; fffffc00H
	cmp	eax, 55296				; 0000d800H
	jne	SHORT $LN2@u_unescape
	mov	eax, DWORD PTR _offset$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR _length$[ebp]
	jge	SHORT $LN2@u_unescape
; Line 1330
	mov	esi, esp
	mov	eax, DWORD PTR _context$[ebp]
	push	eax
	mov	ecx, DWORD PTR _offset$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	DWORD PTR _charAt$[ebp]
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	WORD PTR _c2$12788[ebp], ax
; Line 1331
	movzx	eax, WORD PTR _c2$12788[ebp]
	and	eax, -1024				; fffffc00H
	cmp	eax, 56320				; 0000dc00H
	jne	SHORT $LN2@u_unescape
; Line 1332
	mov	eax, DWORD PTR _offset$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _offset$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 1333
	movzx	eax, WORD PTR _c$[ebp]
	shl	eax, 10					; 0000000aH
	movzx	ecx, WORD PTR _c2$12788[ebp]
	lea	eax, DWORD PTR [eax+ecx-56613888]
	jmp	SHORT $LN39@u_unescape
$LN2@u_unescape:
; Line 1336
	movzx	eax, WORD PTR _c$[ebp]
	jmp	SHORT $LN39@u_unescape
$err$12740:
; Line 1340
	mov	eax, DWORD PTR _offset$[ebp]
	mov	ecx, DWORD PTR _start$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 1341
	or	eax, -1
$LN39@u_unescape:
; Line 1342
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN45@u_unescape
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 352				; 00000160H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN45@u_unescape:
	DD	1
	DD	$LN44@u_unescape
$LN44@u_unescape:
	DD	-128					; ffffff80H
	DD	4
	DD	$LN43@u_unescape
$LN43@u_unescape:
	DB	97					; 00000061H
	DB	104					; 00000068H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	0
_u_unescapeAt_56 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?_digit8@@YAC_W@Z
_TEXT	SEGMENT
_c$ = 8							; size = 2
?_digit8@@YAC_W@Z PROC					; _digit8, COMDAT
; Line 1185
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1186
	movzx	eax, WORD PTR _c$[ebp]
	cmp	eax, 48					; 00000030H
	jl	SHORT $LN1@digit8
	movzx	eax, WORD PTR _c$[ebp]
	cmp	eax, 55					; 00000037H
	jg	SHORT $LN1@digit8
; Line 1187
	movzx	eax, WORD PTR _c$[ebp]
	sub	eax, 48					; 00000030H
	jmp	SHORT $LN2@digit8
$LN1@digit8:
; Line 1189
	or	al, -1
$LN2@digit8:
; Line 1190
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?_digit8@@YAC_W@Z ENDP					; _digit8
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?_digit16@@YAC_W@Z
_TEXT	SEGMENT
_c$ = 8							; size = 2
?_digit16@@YAC_W@Z PROC					; _digit16, COMDAT
; Line 1193
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1194
	movzx	eax, WORD PTR _c$[ebp]
	cmp	eax, 48					; 00000030H
	jl	SHORT $LN3@digit16
	movzx	eax, WORD PTR _c$[ebp]
	cmp	eax, 57					; 00000039H
	jg	SHORT $LN3@digit16
; Line 1195
	movzx	eax, WORD PTR _c$[ebp]
	sub	eax, 48					; 00000030H
	jmp	SHORT $LN4@digit16
$LN3@digit16:
; Line 1197
	movzx	eax, WORD PTR _c$[ebp]
	cmp	eax, 65					; 00000041H
	jl	SHORT $LN2@digit16
	movzx	eax, WORD PTR _c$[ebp]
	cmp	eax, 70					; 00000046H
	jg	SHORT $LN2@digit16
; Line 1198
	movzx	eax, WORD PTR _c$[ebp]
	sub	eax, 55					; 00000037H
	jmp	SHORT $LN4@digit16
$LN2@digit16:
; Line 1200
	movzx	eax, WORD PTR _c$[ebp]
	cmp	eax, 97					; 00000061H
	jl	SHORT $LN1@digit16
	movzx	eax, WORD PTR _c$[ebp]
	cmp	eax, 102				; 00000066H
	jg	SHORT $LN1@digit16
; Line 1201
	movzx	eax, WORD PTR _c$[ebp]
	sub	eax, 87					; 00000057H
	jmp	SHORT $LN4@digit16
$LN1@digit16:
; Line 1203
	or	al, -1
$LN4@digit16:
; Line 1204
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?_digit16@@YAC_W@Z ENDP					; _digit16
_TEXT	ENDS
PUBLIC	_u_unescape_56
EXTRN	_strlen:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _u_unescape_56
_TEXT	SEGMENT
_c32$12820 = -56					; size = 4
_lenParsed$12819 = -44					; size = 4
_c$ = -29						; size = 1
_i$ = -20						; size = 4
_segment$ = -8						; size = 4
_src$ = 8						; size = 4
_dest$ = 12						; size = 4
_destCapacity$ = 16					; size = 4
_u_unescape_56 PROC					; COMDAT
; Line 1368
	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1369
	mov	eax, DWORD PTR _src$[ebp]
	mov	DWORD PTR _segment$[ebp], eax
; Line 1370
	mov	DWORD PTR _i$[ebp], 0
$LN16@u_unescape@2:
; Line 1373
	mov	eax, DWORD PTR _src$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _c$[ebp], cl
	movsx	edx, BYTE PTR _c$[ebp]
	test	edx, edx
	je	$LN15@u_unescape@2
; Line 1377
	movsx	eax, BYTE PTR _c$[ebp]
	cmp	eax, 92					; 0000005cH
	jne	$LN14@u_unescape@2
; Line 1378
	mov	DWORD PTR _lenParsed$12819[ebp], 0
; Line 1380
	mov	eax, DWORD PTR _src$[ebp]
	cmp	eax, DWORD PTR _segment$[ebp]
	je	SHORT $LN13@u_unescape@2
; Line 1381
	cmp	DWORD PTR _dest$[ebp], 0
	je	SHORT $LN12@u_unescape@2
; Line 1383
	mov	eax, DWORD PTR _src$[ebp]
	sub	eax, DWORD PTR _segment$[ebp]
	push	eax
	mov	ecx, DWORD PTR _segment$[ebp]
	push	ecx
	mov	edx, DWORD PTR _destCapacity$[ebp]
	sub	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _dest$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	push	edx
	call	?_appendUChars@@YAXPA_WHPBDH@Z		; _appendUChars
	add	esp, 16					; 00000010H
$LN12@u_unescape@2:
; Line 1385
	mov	eax, DWORD PTR _src$[ebp]
	sub	eax, DWORD PTR _segment$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR _i$[ebp], eax
$LN13@u_unescape@2:
; Line 1387
	mov	eax, DWORD PTR _src$[ebp]
	add	eax, 1
	mov	DWORD PTR _src$[ebp], eax
; Line 1388
	mov	eax, DWORD PTR _src$[ebp]
	push	eax
	mov	ecx, DWORD PTR _src$[ebp]
	push	ecx
	call	_strlen
	add	esp, 4
	push	eax
	lea	edx, DWORD PTR _lenParsed$12819[ebp]
	push	edx
	push	OFFSET ?_charPtr_charAt@@YA_WHPAX@Z	; _charPtr_charAt
	call	_u_unescapeAt_56
	add	esp, 16					; 00000010H
	mov	DWORD PTR _c32$12820[ebp], eax
; Line 1389
	cmp	DWORD PTR _lenParsed$12819[ebp], 0
	jne	SHORT $LN11@u_unescape@2
; Line 1390
	jmp	$err$12829
	jmp	$err$12829
$LN11@u_unescape@2:
; Line 1392
	mov	eax, DWORD PTR _src$[ebp]
	add	eax, DWORD PTR _lenParsed$12819[ebp]
	mov	DWORD PTR _src$[ebp], eax
; Line 1393
	cmp	DWORD PTR _dest$[ebp], 0
	je	SHORT $LN9@u_unescape@2
	mov	eax, 65535				; 0000ffffH
	cmp	eax, DWORD PTR _c32$12820[ebp]
	sbb	ecx, ecx
	neg	ecx
	add	ecx, 1
	mov	edx, DWORD PTR _destCapacity$[ebp]
	sub	edx, DWORD PTR _i$[ebp]
	cmp	ecx, edx
	jg	SHORT $LN9@u_unescape@2
; Line 1394
	cmp	DWORD PTR _c32$12820[ebp], 65535	; 0000ffffH
	ja	SHORT $LN8@u_unescape@2
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _dest$[ebp]
	mov	dx, WORD PTR _c32$12820[ebp]
	mov	WORD PTR [ecx+eax*2], dx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN7@u_unescape@2
$LN8@u_unescape@2:
	mov	eax, DWORD PTR _c32$12820[ebp]
	sar	eax, 10					; 0000000aH
	add	eax, 55232				; 0000d7c0H
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _dest$[ebp]
	mov	WORD PTR [edx+ecx*2], ax
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	eax, DWORD PTR _c32$12820[ebp]
	and	eax, 1023				; 000003ffH
	or	eax, 56320				; 0000dc00H
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _dest$[ebp]
	mov	WORD PTR [edx+ecx*2], ax
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN7@u_unescape@2:
; Line 1395
	jmp	SHORT $LN6@u_unescape@2
$LN9@u_unescape@2:
; Line 1396
	mov	eax, 65535				; 0000ffffH
	cmp	eax, DWORD PTR _c32$12820[ebp]
	sbb	ecx, ecx
	neg	ecx
	add	ecx, 1
	add	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR _i$[ebp], ecx
$LN6@u_unescape@2:
; Line 1398
	mov	eax, DWORD PTR _src$[ebp]
	mov	DWORD PTR _segment$[ebp], eax
; Line 1399
	jmp	SHORT $LN5@u_unescape@2
$LN14@u_unescape@2:
; Line 1400
	mov	eax, DWORD PTR _src$[ebp]
	add	eax, 1
	mov	DWORD PTR _src$[ebp], eax
$LN5@u_unescape@2:
; Line 1402
	jmp	$LN16@u_unescape@2
$LN15@u_unescape@2:
; Line 1403
	mov	eax, DWORD PTR _src$[ebp]
	cmp	eax, DWORD PTR _segment$[ebp]
	je	SHORT $LN4@u_unescape@2
; Line 1404
	cmp	DWORD PTR _dest$[ebp], 0
	je	SHORT $LN3@u_unescape@2
; Line 1406
	mov	eax, DWORD PTR _src$[ebp]
	sub	eax, DWORD PTR _segment$[ebp]
	push	eax
	mov	ecx, DWORD PTR _segment$[ebp]
	push	ecx
	mov	edx, DWORD PTR _destCapacity$[ebp]
	sub	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _dest$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	push	edx
	call	?_appendUChars@@YAXPA_WHPBDH@Z		; _appendUChars
	add	esp, 16					; 00000010H
$LN3@u_unescape@2:
; Line 1408
	mov	eax, DWORD PTR _src$[ebp]
	sub	eax, DWORD PTR _segment$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR _i$[ebp], eax
$LN4@u_unescape@2:
; Line 1410
	cmp	DWORD PTR _dest$[ebp], 0
	je	SHORT $LN2@u_unescape@2
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _destCapacity$[ebp]
	jge	SHORT $LN2@u_unescape@2
; Line 1411
	xor	eax, eax
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _dest$[ebp]
	mov	WORD PTR [edx+ecx*2], ax
$LN2@u_unescape@2:
; Line 1413
	mov	eax, DWORD PTR _i$[ebp]
	jmp	SHORT $LN17@u_unescape@2
$err$12829:
; Line 1416
	cmp	DWORD PTR _dest$[ebp], 0
	je	SHORT $LN1@u_unescape@2
	cmp	DWORD PTR _destCapacity$[ebp], 0
	jle	SHORT $LN1@u_unescape@2
; Line 1417
	xor	eax, eax
	mov	ecx, DWORD PTR _dest$[ebp]
	mov	WORD PTR [ecx], ax
$LN1@u_unescape@2:
; Line 1419
	xor	eax, eax
$LN17@u_unescape@2:
; Line 1420
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN21@u_unescape@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN21@u_unescape@2:
	DD	1
	DD	$LN20@u_unescape@2
$LN20@u_unescape@2:
	DD	-44					; ffffffd4H
	DD	4
	DD	$LN19@u_unescape@2
$LN19@u_unescape@2:
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	80					; 00000050H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	0
_u_unescape_56 ENDP
_TEXT	ENDS
EXTRN	_u_charsToUChars_56:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?_charPtr_charAt@@YA_WHPAX@Z
_TEXT	SEGMENT
_c16$ = -8						; size = 2
_offset$ = 8						; size = 4
_context$ = 12						; size = 4
?_charPtr_charAt@@YA_WHPAX@Z PROC			; _charPtr_charAt, COMDAT
; Line 1346
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1350
	push	1
	lea	eax, DWORD PTR _c16$[ebp]
	push	eax
	mov	ecx, DWORD PTR _context$[ebp]
	add	ecx, DWORD PTR _offset$[ebp]
	push	ecx
	call	_u_charsToUChars_56
	add	esp, 12					; 0000000cH
; Line 1351
	mov	ax, WORD PTR _c16$[ebp]
; Line 1352
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@charPtr_ch
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN5@charPtr_ch:
	DD	1
	DD	$LN4@charPtr_ch
$LN4@charPtr_ch:
	DD	-8					; fffffff8H
	DD	2
	DD	$LN3@charPtr_ch
$LN3@charPtr_ch:
	DB	99					; 00000063H
	DB	49					; 00000031H
	DB	54					; 00000036H
	DB	0
?_charPtr_charAt@@YA_WHPAX@Z ENDP			; _charPtr_charAt
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?_appendUChars@@YAXPA_WHPBDH@Z
_TEXT	SEGMENT
_dest$ = 8						; size = 4
_destCapacity$ = 12					; size = 4
_src$ = 16						; size = 4
_srcLen$ = 20						; size = 4
?_appendUChars@@YAXPA_WHPBDH@Z PROC			; _appendUChars, COMDAT
; Line 1356
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1357
	cmp	DWORD PTR _destCapacity$[ebp], 0
	jge	SHORT $LN2@appendUCha
; Line 1358
	mov	DWORD PTR _destCapacity$[ebp], 0
$LN2@appendUCha:
; Line 1360
	mov	eax, DWORD PTR _srcLen$[ebp]
	cmp	eax, DWORD PTR _destCapacity$[ebp]
	jle	SHORT $LN1@appendUCha
; Line 1361
	mov	eax, DWORD PTR _destCapacity$[ebp]
	mov	DWORD PTR _srcLen$[ebp], eax
$LN1@appendUCha:
; Line 1363
	mov	eax, DWORD PTR _srcLen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dest$[ebp]
	push	ecx
	mov	edx, DWORD PTR _src$[ebp]
	push	edx
	call	_u_charsToUChars_56
	add	esp, 12					; 0000000cH
; Line 1364
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_appendUChars@@YAXPA_WHPBDH@Z ENDP			; _appendUChars
_TEXT	ENDS
PUBLIC	_u_terminateUChars_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _u_terminateUChars_56
_TEXT	SEGMENT
_dest$ = 8						; size = 4
_destCapacity$ = 12					; size = 4
_length$ = 16						; size = 4
_pErrorCode$ = 20					; size = 4
_u_terminateUChars_56 PROC				; COMDAT
; Line 1451
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1452
	cmp	DWORD PTR _pErrorCode$[ebp], 0
	je	SHORT $LN8@u_terminat
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_SUCCESS@@YACW4UErrorCode@@@Z		; U_SUCCESS
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN8@u_terminat
	cmp	DWORD PTR _length$[ebp], 0
	jge	SHORT $LN7@u_terminat
	jmp	SHORT $LN8@u_terminat
$LN7@u_terminat:
	mov	eax, DWORD PTR _length$[ebp]
	cmp	eax, DWORD PTR _destCapacity$[ebp]
	jge	SHORT $LN5@u_terminat
	xor	eax, eax
	mov	ecx, DWORD PTR _length$[ebp]
	mov	edx, DWORD PTR _dest$[ebp]
	mov	WORD PTR [edx+ecx*2], ax
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	cmp	DWORD PTR [eax], -124			; ffffff84H
	jne	SHORT $LN4@u_terminat
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 0
$LN4@u_terminat:
	jmp	SHORT $LN8@u_terminat
$LN5@u_terminat:
	mov	eax, DWORD PTR _length$[ebp]
	cmp	eax, DWORD PTR _destCapacity$[ebp]
	jne	SHORT $LN2@u_terminat
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], -124			; ffffff84H
	jmp	SHORT $LN8@u_terminat
$LN2@u_terminat:
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
$LN8@u_terminat:
; Line 1453
	mov	eax, DWORD PTR _length$[ebp]
; Line 1454
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_u_terminateUChars_56 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?U_SUCCESS@@YACW4UErrorCode@@@Z
_TEXT	SEGMENT
_code$ = 8						; size = 4
?U_SUCCESS@@YACW4UErrorCode@@@Z PROC			; U_SUCCESS, COMDAT
; File d:\mozilla\intl\icu\source\common\unicode\utypes.h
; Line 699
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	cmp	DWORD PTR _code$[ebp], 0
	setle	al
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?U_SUCCESS@@YACW4UErrorCode@@@Z ENDP			; U_SUCCESS
_TEXT	ENDS
PUBLIC	_u_terminateChars_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _u_terminateChars_56
_TEXT	SEGMENT
_dest$ = 8						; size = 4
_destCapacity$ = 12					; size = 4
_length$ = 16						; size = 4
_pErrorCode$ = 20					; size = 4
_u_terminateChars_56 PROC				; COMDAT
; File d:\mozilla\intl\icu\source\common\ustring.cpp
; Line 1457
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1458
	cmp	DWORD PTR _pErrorCode$[ebp], 0
	je	SHORT $LN8@u_terminat@2
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_SUCCESS@@YACW4UErrorCode@@@Z		; U_SUCCESS
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN8@u_terminat@2
	cmp	DWORD PTR _length$[ebp], 0
	jge	SHORT $LN7@u_terminat@2
	jmp	SHORT $LN8@u_terminat@2
$LN7@u_terminat@2:
	mov	eax, DWORD PTR _length$[ebp]
	cmp	eax, DWORD PTR _destCapacity$[ebp]
	jge	SHORT $LN5@u_terminat@2
	mov	eax, DWORD PTR _dest$[ebp]
	add	eax, DWORD PTR _length$[ebp]
	mov	BYTE PTR [eax], 0
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	cmp	DWORD PTR [eax], -124			; ffffff84H
	jne	SHORT $LN4@u_terminat@2
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 0
$LN4@u_terminat@2:
	jmp	SHORT $LN8@u_terminat@2
$LN5@u_terminat@2:
	mov	eax, DWORD PTR _length$[ebp]
	cmp	eax, DWORD PTR _destCapacity$[ebp]
	jne	SHORT $LN2@u_terminat@2
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], -124			; ffffff84H
	jmp	SHORT $LN8@u_terminat@2
$LN2@u_terminat@2:
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
$LN8@u_terminat@2:
; Line 1459
	mov	eax, DWORD PTR _length$[ebp]
; Line 1460
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_u_terminateChars_56 ENDP
_TEXT	ENDS
PUBLIC	_u_terminateUChar32s_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _u_terminateUChar32s_56
_TEXT	SEGMENT
_dest$ = 8						; size = 4
_destCapacity$ = 12					; size = 4
_length$ = 16						; size = 4
_pErrorCode$ = 20					; size = 4
_u_terminateUChar32s_56 PROC				; COMDAT
; Line 1463
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1464
	cmp	DWORD PTR _pErrorCode$[ebp], 0
	je	SHORT $LN8@u_terminat@3
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_SUCCESS@@YACW4UErrorCode@@@Z		; U_SUCCESS
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN8@u_terminat@3
	cmp	DWORD PTR _length$[ebp], 0
	jge	SHORT $LN7@u_terminat@3
	jmp	SHORT $LN8@u_terminat@3
$LN7@u_terminat@3:
	mov	eax, DWORD PTR _length$[ebp]
	cmp	eax, DWORD PTR _destCapacity$[ebp]
	jge	SHORT $LN5@u_terminat@3
	mov	eax, DWORD PTR _length$[ebp]
	mov	ecx, DWORD PTR _dest$[ebp]
	mov	DWORD PTR [ecx+eax*4], 0
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	cmp	DWORD PTR [eax], -124			; ffffff84H
	jne	SHORT $LN4@u_terminat@3
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 0
$LN4@u_terminat@3:
	jmp	SHORT $LN8@u_terminat@3
$LN5@u_terminat@3:
	mov	eax, DWORD PTR _length$[ebp]
	cmp	eax, DWORD PTR _destCapacity$[ebp]
	jne	SHORT $LN2@u_terminat@3
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], -124			; ffffff84H
	jmp	SHORT $LN8@u_terminat@3
$LN2@u_terminat@3:
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
$LN8@u_terminat@3:
; Line 1465
	mov	eax, DWORD PTR _length$[ebp]
; Line 1466
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_u_terminateUChar32s_56 ENDP
_TEXT	ENDS
PUBLIC	_u_terminateWChars_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _u_terminateWChars_56
_TEXT	SEGMENT
_dest$ = 8						; size = 4
_destCapacity$ = 12					; size = 4
_length$ = 16						; size = 4
_pErrorCode$ = 20					; size = 4
_u_terminateWChars_56 PROC				; COMDAT
; Line 1469
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1470
	cmp	DWORD PTR _pErrorCode$[ebp], 0
	je	SHORT $LN8@u_terminat@4
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_SUCCESS@@YACW4UErrorCode@@@Z		; U_SUCCESS
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN8@u_terminat@4
	cmp	DWORD PTR _length$[ebp], 0
	jge	SHORT $LN7@u_terminat@4
	jmp	SHORT $LN8@u_terminat@4
$LN7@u_terminat@4:
	mov	eax, DWORD PTR _length$[ebp]
	cmp	eax, DWORD PTR _destCapacity$[ebp]
	jge	SHORT $LN5@u_terminat@4
	xor	eax, eax
	mov	ecx, DWORD PTR _length$[ebp]
	mov	edx, DWORD PTR _dest$[ebp]
	mov	WORD PTR [edx+ecx*2], ax
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	cmp	DWORD PTR [eax], -124			; ffffff84H
	jne	SHORT $LN4@u_terminat@4
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 0
$LN4@u_terminat@4:
	jmp	SHORT $LN8@u_terminat@4
$LN5@u_terminat@4:
	mov	eax, DWORD PTR _length$[ebp]
	cmp	eax, DWORD PTR _destCapacity$[ebp]
	jne	SHORT $LN2@u_terminat@4
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], -124			; ffffff84H
	jmp	SHORT $LN8@u_terminat@4
$LN2@u_terminat@4:
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
$LN8@u_terminat@4:
; Line 1471
	mov	eax, DWORD PTR _length$[ebp]
; Line 1472
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_u_terminateWChars_56 ENDP
_TEXT	ENDS
PUBLIC	_ustr_hashUCharsN_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _ustr_hashUCharsN_56
_TEXT	SEGMENT
_limit$12917 = -56					; size = 4
_inc$12916 = -44					; size = 4
_len$12914 = -32					; size = 4
_p$ = -20						; size = 4
_hash$ = -8						; size = 4
_str$ = 8						; size = 4
_length$ = 12						; size = 4
_ustr_hashUCharsN_56 PROC				; COMDAT
; Line 1504
	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1505
	mov	DWORD PTR _hash$[ebp], 0
	mov	eax, DWORD PTR _str$[ebp]
	mov	DWORD PTR _p$[ebp], eax
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN3@ustr_hashU
	mov	eax, DWORD PTR _length$[ebp]
	mov	DWORD PTR _len$12914[ebp], eax
	mov	eax, DWORD PTR _len$12914[ebp]
	sub	eax, 32					; 00000020H
	cdq
	and	edx, 31					; 0000001fH
	add	eax, edx
	sar	eax, 5
	add	eax, 1
	mov	DWORD PTR _inc$12916[ebp], eax
	mov	eax, DWORD PTR _len$12914[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR _limit$12917[ebp], edx
$LN2@ustr_hashU:
	mov	eax, DWORD PTR _p$[ebp]
	cmp	eax, DWORD PTR _limit$12917[ebp]
	jae	SHORT $LN3@ustr_hashU
	mov	eax, DWORD PTR _hash$[ebp]
	imul	eax, 37					; 00000025H
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, WORD PTR [ecx]
	add	eax, edx
	mov	DWORD PTR _hash$[ebp], eax
	mov	eax, DWORD PTR _inc$12916[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR _p$[ebp], edx
	jmp	SHORT $LN2@ustr_hashU
$LN3@ustr_hashU:
	mov	eax, DWORD PTR _hash$[ebp]
; Line 1506
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_ustr_hashUCharsN_56 ENDP
_TEXT	ENDS
PUBLIC	_ustr_hashCharsN_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _ustr_hashCharsN_56
_TEXT	SEGMENT
_limit$12933 = -56					; size = 4
_inc$12932 = -44					; size = 4
_len$12930 = -32					; size = 4
_p$ = -20						; size = 4
_hash$ = -8						; size = 4
_str$ = 8						; size = 4
_length$ = 12						; size = 4
_ustr_hashCharsN_56 PROC				; COMDAT
; Line 1509
	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1510
	mov	DWORD PTR _hash$[ebp], 0
	mov	eax, DWORD PTR _str$[ebp]
	mov	DWORD PTR _p$[ebp], eax
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN3@ustr_hashC
	mov	eax, DWORD PTR _length$[ebp]
	mov	DWORD PTR _len$12930[ebp], eax
	mov	eax, DWORD PTR _len$12930[ebp]
	sub	eax, 32					; 00000020H
	cdq
	and	edx, 31					; 0000001fH
	add	eax, edx
	sar	eax, 5
	add	eax, 1
	mov	DWORD PTR _inc$12932[ebp], eax
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, DWORD PTR _len$12930[ebp]
	mov	DWORD PTR _limit$12933[ebp], eax
$LN2@ustr_hashC:
	mov	eax, DWORD PTR _p$[ebp]
	cmp	eax, DWORD PTR _limit$12933[ebp]
	jae	SHORT $LN3@ustr_hashC
	mov	eax, DWORD PTR _hash$[ebp]
	imul	eax, 37					; 00000025H
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx]
	add	eax, edx
	mov	DWORD PTR _hash$[ebp], eax
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, DWORD PTR _inc$12932[ebp]
	mov	DWORD PTR _p$[ebp], eax
	jmp	SHORT $LN2@ustr_hashC
$LN3@ustr_hashC:
	mov	eax, DWORD PTR _hash$[ebp]
; Line 1511
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_ustr_hashCharsN_56 ENDP
_TEXT	ENDS
PUBLIC	_ustr_hashICharsN_56
EXTRN	_uprv_asciitolower_56:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _ustr_hashICharsN_56
_TEXT	SEGMENT
_limit$12949 = -56					; size = 4
_inc$12948 = -44					; size = 4
_len$12946 = -32					; size = 4
_p$ = -20						; size = 4
_hash$ = -8						; size = 4
_str$ = 8						; size = 4
_length$ = 12						; size = 4
_ustr_hashICharsN_56 PROC				; COMDAT
; Line 1514
	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1515
	mov	DWORD PTR _hash$[ebp], 0
	mov	eax, DWORD PTR _str$[ebp]
	mov	DWORD PTR _p$[ebp], eax
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN3@ustr_hashI
	mov	eax, DWORD PTR _length$[ebp]
	mov	DWORD PTR _len$12946[ebp], eax
	mov	eax, DWORD PTR _len$12946[ebp]
	sub	eax, 32					; 00000020H
	cdq
	and	edx, 31					; 0000001fH
	add	eax, edx
	sar	eax, 5
	add	eax, 1
	mov	DWORD PTR _inc$12948[ebp], eax
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, DWORD PTR _len$12946[ebp]
	mov	DWORD PTR _limit$12949[ebp], eax
$LN2@ustr_hashI:
	mov	eax, DWORD PTR _p$[ebp]
	cmp	eax, DWORD PTR _limit$12949[ebp]
	jae	SHORT $LN3@ustr_hashI
	mov	esi, DWORD PTR _hash$[ebp]
	imul	esi, 37					; 00000025H
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax]
	push	ecx
	call	_uprv_asciitolower_56
	add	esp, 4
	movzx	edx, al
	add	esi, edx
	mov	DWORD PTR _hash$[ebp], esi
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, DWORD PTR _inc$12948[ebp]
	mov	DWORD PTR _p$[ebp], eax
	jmp	SHORT $LN2@ustr_hashI
$LN3@ustr_hashI:
	mov	eax, DWORD PTR _hash$[ebp]
; Line 1516
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ustr_hashICharsN_56 ENDP
_TEXT	ENDS
END
