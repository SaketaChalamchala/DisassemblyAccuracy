; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\mozilla\intl\icu\source\common\utrie.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	??2@YAPAXI@Z					; operator new
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File d:\mozilla\intl\icu\source\common\unicode\utypes.h
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT ??2@YAPAXI@Z
_TEXT	SEGMENT
_q$ = -8						; size = 4
___formal$ = 8						; size = 4
??2@YAPAXI@Z PROC					; operator new, COMDAT
; Line 411
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 412
	mov	DWORD PTR _q$[ebp], 0
; Line 413
	mov	eax, DWORD PTR _q$[ebp]
	mov	BYTE PTR [eax], 5
; Line 414
	mov	eax, DWORD PTR _q$[ebp]
; Line 415
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??2@YAPAXI@Z ENDP					; operator new
_TEXT	ENDS
PUBLIC	??3@YAXPAX@Z					; operator delete
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??3@YAXPAX@Z
_TEXT	SEGMENT
_q$ = -8						; size = 4
___formal$ = 8						; size = 4
??3@YAXPAX@Z PROC					; operator delete, COMDAT
; Line 439
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 440
	mov	DWORD PTR _q$[ebp], 0
; Line 441
	mov	eax, DWORD PTR _q$[ebp]
	mov	BYTE PTR [eax], 5
; Line 442
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??3@YAXPAX@Z ENDP					; operator delete
_TEXT	ENDS
PUBLIC	_utrie_open_56
EXTRN	_uprv_free_56:PROC
EXTRN	_memset:PROC
EXTRN	_uprv_malloc_56:PROC
EXTRN	__RTC_CheckEsp:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _utrie_open_56
_TEXT	SEGMENT
_j$ = -32						; size = 4
_i$ = -20						; size = 4
_trie$ = -8						; size = 4
_fillIn$ = 8						; size = 4
_aliasData$ = 12					; size = 4
_maxDataLength$ = 16					; size = 4
_initialValue$ = 20					; size = 4
_leadUnitValue$ = 24					; size = 4
_latin1Linear$ = 28					; size = 1
_utrie_open_56 PROC					; COMDAT
; File d:\mozilla\intl\icu\source\common\utrie.cpp
; Line 50
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 56
	cmp	DWORD PTR _maxDataLength$[ebp], 32	; 00000020H
	jl	SHORT $LN13@utrie_open
	movsx	eax, BYTE PTR _latin1Linear$[ebp]
	test	eax, eax
	je	SHORT $LN14@utrie_open
	cmp	DWORD PTR _maxDataLength$[ebp], 1024	; 00000400H
	jge	SHORT $LN14@utrie_open
$LN13@utrie_open:
; Line 57
	xor	eax, eax
	jmp	$LN15@utrie_open
$LN14@utrie_open:
; Line 60
	cmp	DWORD PTR _fillIn$[ebp], 0
	je	SHORT $LN12@utrie_open
; Line 61
	mov	eax, DWORD PTR _fillIn$[ebp]
	mov	DWORD PTR _trie$[ebp], eax
; Line 62
	jmp	SHORT $LN11@utrie_open
$LN12@utrie_open:
; Line 63
	push	278684					; 0004409cH
	call	_uprv_malloc_56
	add	esp, 4
	mov	DWORD PTR _trie$[ebp], eax
; Line 64
	cmp	DWORD PTR _trie$[ebp], 0
	jne	SHORT $LN11@utrie_open
; Line 65
	xor	eax, eax
	jmp	$LN15@utrie_open
$LN11@utrie_open:
; Line 68
	push	278684					; 0004409cH
	push	0
	mov	eax, DWORD PTR _trie$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
; Line 69
	cmp	DWORD PTR _fillIn$[ebp], 0
	sete	al
	mov	ecx, DWORD PTR _trie$[ebp]
	mov	BYTE PTR [ecx+139284], al
; Line 71
	cmp	DWORD PTR _aliasData$[ebp], 0
	je	SHORT $LN9@utrie_open
; Line 72
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR _aliasData$[ebp]
	mov	DWORD PTR [eax+139264], ecx
; Line 73
	mov	eax, DWORD PTR _trie$[ebp]
	mov	BYTE PTR [eax+139285], 0
; Line 74
	jmp	SHORT $LN8@utrie_open
$LN9@utrie_open:
; Line 75
	mov	eax, DWORD PTR _maxDataLength$[ebp]
	shl	eax, 2
	push	eax
	call	_uprv_malloc_56
	add	esp, 4
	mov	ecx, DWORD PTR _trie$[ebp]
	mov	DWORD PTR [ecx+139264], eax
; Line 76
	mov	eax, DWORD PTR _trie$[ebp]
	cmp	DWORD PTR [eax+139264], 0
	jne	SHORT $LN7@utrie_open
; Line 77
	mov	eax, DWORD PTR _trie$[ebp]
	push	eax
	call	_uprv_free_56
	add	esp, 4
; Line 78
	xor	eax, eax
	jmp	$LN15@utrie_open
$LN7@utrie_open:
; Line 80
	mov	eax, DWORD PTR _trie$[ebp]
	mov	BYTE PTR [eax+139285], 1
$LN8@utrie_open:
; Line 84
	mov	DWORD PTR _j$[ebp], 32			; 00000020H
; Line 86
	movsx	eax, BYTE PTR _latin1Linear$[ebp]
	test	eax, eax
	je	SHORT $LN6@utrie_open
; Line 91
	mov	DWORD PTR _i$[ebp], 0
$LN5@utrie_open:
; Line 94
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _trie$[ebp]
	mov	edx, DWORD PTR _j$[ebp]
	mov	DWORD PTR [ecx+eax*4], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
; Line 95
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 32					; 00000020H
	mov	DWORD PTR _j$[ebp], eax
; Line 96
	cmp	DWORD PTR _i$[ebp], 8
	jl	SHORT $LN5@utrie_open
$LN6@utrie_open:
; Line 100
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR _j$[ebp]
	mov	DWORD PTR [eax+139280], ecx
$LN2@utrie_open:
; Line 101
	cmp	DWORD PTR _j$[ebp], 0
	jle	SHORT $LN1@utrie_open
; Line 102
	mov	eax, DWORD PTR _j$[ebp]
	sub	eax, 1
	mov	DWORD PTR _j$[ebp], eax
	mov	ecx, DWORD PTR _trie$[ebp]
	mov	edx, DWORD PTR [ecx+139264]
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _initialValue$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
; Line 103
	jmp	SHORT $LN2@utrie_open
$LN1@utrie_open:
; Line 105
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR _leadUnitValue$[ebp]
	mov	DWORD PTR [eax+139268], ecx
; Line 106
	mov	eax, DWORD PTR _trie$[ebp]
	mov	DWORD PTR [eax+139272], 34816		; 00008800H
; Line 107
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR _maxDataLength$[ebp]
	mov	DWORD PTR [eax+139276], ecx
; Line 108
	mov	eax, DWORD PTR _trie$[ebp]
	mov	cl, BYTE PTR _latin1Linear$[ebp]
	mov	BYTE PTR [eax+139286], cl
; Line 109
	mov	eax, DWORD PTR _trie$[ebp]
	mov	BYTE PTR [eax+139287], 0
; Line 110
	mov	eax, DWORD PTR _trie$[ebp]
$LN15@utrie_open:
; Line 111
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_utrie_open_56 ENDP
_TEXT	ENDS
PUBLIC	_utrie_clone_56
EXTRN	_memcpy:PROC
EXTRN	_uprv_checkValidMemory:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _utrie_clone_56
_TEXT	SEGMENT
_isDataAllocated$ = -17					; size = 1
_trie$ = -8						; size = 4
_fillIn$ = 8						; size = 4
_other$ = 12						; size = 4
_aliasData$ = 16					; size = 4
_aliasDataCapacity$ = 20				; size = 4
_utrie_clone_56 PROC					; COMDAT
; Line 114
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 119
	cmp	DWORD PTR _other$[ebp], 0
	je	SHORT $LN6@utrie_clon
	mov	eax, DWORD PTR _other$[ebp]
	cmp	DWORD PTR [eax+139264], 0
	je	SHORT $LN6@utrie_clon
	mov	eax, DWORD PTR _other$[ebp]
	movsx	ecx, BYTE PTR [eax+139287]
	test	ecx, ecx
	je	SHORT $LN7@utrie_clon
$LN6@utrie_clon:
; Line 120
	xor	eax, eax
	jmp	$LN8@utrie_clon
$LN7@utrie_clon:
; Line 124
	cmp	DWORD PTR _aliasData$[ebp], 0
	je	SHORT $LN5@utrie_clon
	mov	eax, DWORD PTR _other$[ebp]
	mov	ecx, DWORD PTR _aliasDataCapacity$[ebp]
	cmp	ecx, DWORD PTR [eax+139276]
	jl	SHORT $LN5@utrie_clon
; Line 125
	mov	BYTE PTR _isDataAllocated$[ebp], 0
; Line 126
	jmp	SHORT $LN4@utrie_clon
$LN5@utrie_clon:
; Line 127
	mov	eax, DWORD PTR _other$[ebp]
	mov	ecx, DWORD PTR [eax+139276]
	mov	DWORD PTR _aliasDataCapacity$[ebp], ecx
; Line 128
	mov	eax, DWORD PTR _other$[ebp]
	mov	ecx, DWORD PTR [eax+139276]
	shl	ecx, 2
	push	ecx
	call	_uprv_malloc_56
	add	esp, 4
	mov	DWORD PTR _aliasData$[ebp], eax
; Line 129
	cmp	DWORD PTR _aliasData$[ebp], 0
	jne	SHORT $LN3@utrie_clon
; Line 130
	xor	eax, eax
	jmp	$LN8@utrie_clon
$LN3@utrie_clon:
; Line 132
	mov	BYTE PTR _isDataAllocated$[ebp], 1
$LN4@utrie_clon:
; Line 137
	mov	eax, DWORD PTR _other$[ebp]
	movzx	ecx, BYTE PTR [eax+139286]
	push	ecx
	mov	edx, DWORD PTR _other$[ebp]
	mov	eax, DWORD PTR [edx+139268]
	push	eax
	mov	ecx, DWORD PTR _other$[ebp]
	mov	edx, DWORD PTR [ecx+139264]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _aliasDataCapacity$[ebp]
	push	ecx
	mov	edx, DWORD PTR _aliasData$[ebp]
	push	edx
	mov	eax, DWORD PTR _fillIn$[ebp]
	push	eax
	call	_utrie_open_56
	add	esp, 24					; 00000018H
	mov	DWORD PTR _trie$[ebp], eax
; Line 138
	cmp	DWORD PTR _trie$[ebp], 0
	jne	SHORT $LN2@utrie_clon
; Line 139
	mov	eax, DWORD PTR _aliasData$[ebp]
	push	eax
	call	_uprv_free_56
	add	esp, 4
; Line 140
	jmp	SHORT $LN1@utrie_clon
$LN2@utrie_clon:
; Line 141
	push	1
	mov	eax, DWORD PTR _other$[ebp]
	push	eax
	call	_uprv_checkValidMemory
	add	esp, 8
	push	139264					; 00022000H
	mov	ecx, DWORD PTR _other$[ebp]
	push	ecx
	mov	edx, DWORD PTR _trie$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 142
	push	1
	mov	eax, DWORD PTR _other$[ebp]
	mov	ecx, DWORD PTR [eax+139264]
	push	ecx
	call	_uprv_checkValidMemory
	add	esp, 8
	mov	edx, DWORD PTR _other$[ebp]
	mov	eax, DWORD PTR [edx+139280]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR _other$[ebp]
	mov	edx, DWORD PTR [ecx+139264]
	push	edx
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR [eax+139264]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 143
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR _other$[ebp]
	mov	edx, DWORD PTR [ecx+139280]
	mov	DWORD PTR [eax+139280], edx
; Line 144
	mov	eax, DWORD PTR _trie$[ebp]
	mov	cl, BYTE PTR _isDataAllocated$[ebp]
	mov	BYTE PTR [eax+139285], cl
$LN1@utrie_clon:
; Line 147
	mov	eax, DWORD PTR _trie$[ebp]
$LN8@utrie_clon:
; Line 148
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_utrie_clone_56 ENDP
_TEXT	ENDS
PUBLIC	_utrie_close_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _utrie_close_56
_TEXT	SEGMENT
_trie$ = 8						; size = 4
_utrie_close_56 PROC					; COMDAT
; Line 151
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 152
	cmp	DWORD PTR _trie$[ebp], 0
	je	SHORT $LN4@utrie_clos
; Line 153
	mov	eax, DWORD PTR _trie$[ebp]
	movsx	ecx, BYTE PTR [eax+139285]
	test	ecx, ecx
	je	SHORT $LN2@utrie_clos
; Line 154
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR [eax+139264]
	push	ecx
	call	_uprv_free_56
	add	esp, 4
; Line 155
	mov	eax, DWORD PTR _trie$[ebp]
	mov	DWORD PTR [eax+139264], 0
$LN2@utrie_clos:
; Line 157
	mov	eax, DWORD PTR _trie$[ebp]
	movsx	ecx, BYTE PTR [eax+139284]
	test	ecx, ecx
	je	SHORT $LN4@utrie_clos
; Line 158
	mov	eax, DWORD PTR _trie$[ebp]
	push	eax
	call	_uprv_free_56
	add	esp, 4
$LN4@utrie_clos:
; Line 161
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_utrie_close_56 ENDP
_TEXT	ENDS
PUBLIC	_utrie_getData_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _utrie_getData_56
_TEXT	SEGMENT
_trie$ = 8						; size = 4
_pLength$ = 12						; size = 4
_utrie_getData_56 PROC					; COMDAT
; Line 164
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 165
	cmp	DWORD PTR _trie$[ebp], 0
	je	SHORT $LN1@utrie_getD
	cmp	DWORD PTR _pLength$[ebp], 0
	jne	SHORT $LN2@utrie_getD
$LN1@utrie_getD:
; Line 166
	xor	eax, eax
	jmp	SHORT $LN3@utrie_getD
$LN2@utrie_getD:
; Line 169
	mov	eax, DWORD PTR _pLength$[ebp]
	mov	ecx, DWORD PTR _trie$[ebp]
	mov	edx, DWORD PTR [ecx+139280]
	mov	DWORD PTR [eax], edx
; Line 170
	mov	eax, DWORD PTR _trie$[ebp]
	mov	eax, DWORD PTR [eax+139264]
$LN3@utrie_getD:
; Line 171
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_utrie_getData_56 ENDP
_TEXT	ENDS
PUBLIC	_utrie_set32_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _utrie_set32_56
_TEXT	SEGMENT
_block$ = -8						; size = 4
_trie$ = 8						; size = 4
_c$ = 12						; size = 4
_value$ = 16						; size = 4
_utrie_set32_56 PROC					; COMDAT
; Line 220
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 224
	cmp	DWORD PTR _trie$[ebp], 0
	je	SHORT $LN2@utrie_set3
	mov	eax, DWORD PTR _trie$[ebp]
	movsx	ecx, BYTE PTR [eax+139287]
	test	ecx, ecx
	jne	SHORT $LN2@utrie_set3
	cmp	DWORD PTR _c$[ebp], 1114111		; 0010ffffH
	jbe	SHORT $LN3@utrie_set3
$LN2@utrie_set3:
; Line 225
	xor	al, al
	jmp	SHORT $LN4@utrie_set3
$LN3@utrie_set3:
; Line 228
	mov	eax, DWORD PTR _c$[ebp]
	push	eax
	mov	ecx, DWORD PTR _trie$[ebp]
	push	ecx
	call	?utrie_getDataBlock@@YAHPAUUNewTrie@@H@Z ; utrie_getDataBlock
	add	esp, 8
	mov	DWORD PTR _block$[ebp], eax
; Line 229
	cmp	DWORD PTR _block$[ebp], 0
	jge	SHORT $LN1@utrie_set3
; Line 230
	xor	al, al
	jmp	SHORT $LN4@utrie_set3
$LN1@utrie_set3:
; Line 233
	mov	eax, DWORD PTR _c$[ebp]
	and	eax, 31					; 0000001fH
	add	eax, DWORD PTR _block$[ebp]
	mov	ecx, DWORD PTR _trie$[ebp]
	mov	edx, DWORD PTR [ecx+139264]
	mov	ecx, DWORD PTR _value$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
; Line 234
	mov	al, 1
$LN4@utrie_set3:
; Line 235
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_utrie_set32_56 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?utrie_getDataBlock@@YAHPAUUNewTrie@@H@Z
_TEXT	SEGMENT
_newBlock$ = -20					; size = 4
_indexValue$ = -8					; size = 4
_trie$ = 8						; size = 4
_c$ = 12						; size = 4
?utrie_getDataBlock@@YAHPAUUNewTrie@@H@Z PROC		; utrie_getDataBlock, COMDAT
; Line 194
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 197
	mov	eax, DWORD PTR _c$[ebp]
	sar	eax, 5
	mov	DWORD PTR _c$[ebp], eax
; Line 198
	mov	eax, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR _trie$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _indexValue$[ebp], edx
; Line 199
	cmp	DWORD PTR _indexValue$[ebp], 0
	jle	SHORT $LN2@utrie_getD@2
; Line 200
	mov	eax, DWORD PTR _indexValue$[ebp]
	jmp	SHORT $LN3@utrie_getD@2
$LN2@utrie_getD@2:
; Line 204
	mov	eax, DWORD PTR _trie$[ebp]
	push	eax
	call	?utrie_allocDataBlock@@YAHPAUUNewTrie@@@Z ; utrie_allocDataBlock
	add	esp, 4
	mov	DWORD PTR _newBlock$[ebp], eax
; Line 205
	cmp	DWORD PTR _newBlock$[ebp], 0
	jge	SHORT $LN1@utrie_getD@2
; Line 207
	or	eax, -1
	jmp	SHORT $LN3@utrie_getD@2
$LN1@utrie_getD@2:
; Line 209
	mov	eax, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR _trie$[ebp]
	mov	edx, DWORD PTR _newBlock$[ebp]
	mov	DWORD PTR [ecx+eax*4], edx
; Line 212
	push	1
	mov	eax, DWORD PTR _indexValue$[ebp]
	shl	eax, 2
	mov	ecx, DWORD PTR _trie$[ebp]
	mov	edx, DWORD PTR [ecx+139264]
	sub	edx, eax
	push	edx
	call	_uprv_checkValidMemory
	add	esp, 8
	push	128					; 00000080H
	mov	eax, DWORD PTR _indexValue$[ebp]
	shl	eax, 2
	mov	ecx, DWORD PTR _trie$[ebp]
	mov	edx, DWORD PTR [ecx+139264]
	sub	edx, eax
	push	edx
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR [eax+139264]
	mov	edx, DWORD PTR _newBlock$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 213
	mov	eax, DWORD PTR _newBlock$[ebp]
$LN3@utrie_getD@2:
; Line 214
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?utrie_getDataBlock@@YAHPAUUNewTrie@@H@Z ENDP		; utrie_getDataBlock
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?utrie_allocDataBlock@@YAHPAUUNewTrie@@@Z
_TEXT	SEGMENT
_newTop$ = -20						; size = 4
_newBlock$ = -8						; size = 4
_trie$ = 8						; size = 4
?utrie_allocDataBlock@@YAHPAUUNewTrie@@@Z PROC		; utrie_allocDataBlock, COMDAT
; Line 174
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 177
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR [eax+139280]
	mov	DWORD PTR _newBlock$[ebp], ecx
; Line 178
	mov	eax, DWORD PTR _newBlock$[ebp]
	add	eax, 32					; 00000020H
	mov	DWORD PTR _newTop$[ebp], eax
; Line 179
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR _newTop$[ebp]
	cmp	ecx, DWORD PTR [eax+139276]
	jle	SHORT $LN1@utrie_allo
; Line 181
	or	eax, -1
	jmp	SHORT $LN2@utrie_allo
$LN1@utrie_allo:
; Line 183
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR _newTop$[ebp]
	mov	DWORD PTR [eax+139280], ecx
; Line 184
	mov	eax, DWORD PTR _newBlock$[ebp]
$LN2@utrie_allo:
; Line 185
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?utrie_allocDataBlock@@YAHPAUUNewTrie@@@Z ENDP		; utrie_allocDataBlock
_TEXT	ENDS
PUBLIC	_utrie_get32_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _utrie_get32_56
_TEXT	SEGMENT
tv79 = -208						; size = 4
_block$ = -8						; size = 4
_trie$ = 8						; size = 4
_c$ = 12						; size = 4
_pInBlockZero$ = 16					; size = 4
_utrie_get32_56 PROC					; COMDAT
; Line 238
	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 242
	cmp	DWORD PTR _trie$[ebp], 0
	je	SHORT $LN3@utrie_get3
	mov	eax, DWORD PTR _trie$[ebp]
	movsx	ecx, BYTE PTR [eax+139287]
	test	ecx, ecx
	jne	SHORT $LN3@utrie_get3
	cmp	DWORD PTR _c$[ebp], 1114111		; 0010ffffH
	jbe	SHORT $LN4@utrie_get3
$LN3@utrie_get3:
; Line 243
	cmp	DWORD PTR _pInBlockZero$[ebp], 0
	je	SHORT $LN2@utrie_get3
; Line 244
	mov	eax, DWORD PTR _pInBlockZero$[ebp]
	mov	BYTE PTR [eax], 1
$LN2@utrie_get3:
; Line 246
	xor	eax, eax
	jmp	SHORT $LN5@utrie_get3
$LN4@utrie_get3:
; Line 249
	mov	eax, DWORD PTR _c$[ebp]
	sar	eax, 5
	mov	ecx, DWORD PTR _trie$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _block$[ebp], edx
; Line 250
	cmp	DWORD PTR _pInBlockZero$[ebp], 0
	je	SHORT $LN1@utrie_get3
; Line 251
	cmp	DWORD PTR _block$[ebp], 0
	sete	al
	mov	ecx, DWORD PTR _pInBlockZero$[ebp]
	mov	BYTE PTR [ecx], al
$LN1@utrie_get3:
; Line 254
	cmp	DWORD PTR _block$[ebp], 0
	jl	SHORT $LN7@utrie_get3
	mov	eax, DWORD PTR _block$[ebp]
	mov	DWORD PTR tv79[ebp], eax
	jmp	SHORT $LN8@utrie_get3
$LN7@utrie_get3:
	mov	ecx, DWORD PTR _block$[ebp]
	neg	ecx
	mov	DWORD PTR tv79[ebp], ecx
$LN8@utrie_get3:
	mov	edx, DWORD PTR _c$[ebp]
	and	edx, 31					; 0000001fH
	add	edx, DWORD PTR tv79[ebp]
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR [eax+139264]
	mov	eax, DWORD PTR [ecx+edx*4]
$LN5@utrie_get3:
; Line 255
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_utrie_get32_56 ENDP
_TEXT	ENDS
PUBLIC	_utrie_setRange32_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _utrie_setRange32_56
_TEXT	SEGMENT
_nextStart$7742 = -56					; size = 4
_repeatBlock$ = -44					; size = 4
_rest$ = -32						; size = 4
_block$ = -20						; size = 4
_initialValue$ = -8					; size = 4
_trie$ = 8						; size = 4
_start$ = 12						; size = 4
_limit$ = 16						; size = 4
_value$ = 20						; size = 4
_overwrite$ = 24					; size = 1
_utrie_setRange32_56 PROC				; COMDAT
; Line 282
	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 294
	cmp	DWORD PTR _trie$[ebp], 0
	je	SHORT $LN19@utrie_setR
	mov	eax, DWORD PTR _trie$[ebp]
	movsx	ecx, BYTE PTR [eax+139287]
	test	ecx, ecx
	jne	SHORT $LN19@utrie_setR
	cmp	DWORD PTR _start$[ebp], 1114111		; 0010ffffH
	ja	SHORT $LN19@utrie_setR
	cmp	DWORD PTR _limit$[ebp], 1114112		; 00110000H
	ja	SHORT $LN19@utrie_setR
	mov	eax, DWORD PTR _start$[ebp]
	cmp	eax, DWORD PTR _limit$[ebp]
	jle	SHORT $LN20@utrie_setR
$LN19@utrie_setR:
; Line 295
	xor	al, al
	jmp	$LN21@utrie_setR
$LN20@utrie_setR:
; Line 297
	mov	eax, DWORD PTR _start$[ebp]
	cmp	eax, DWORD PTR _limit$[ebp]
	jne	SHORT $LN18@utrie_setR
; Line 298
	mov	al, 1
	jmp	$LN21@utrie_setR
$LN18@utrie_setR:
; Line 301
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR [eax+139264]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _initialValue$[ebp], edx
; Line 302
	mov	eax, DWORD PTR _start$[ebp]
	and	eax, 31					; 0000001fH
	je	$LN17@utrie_setR
; Line 306
	mov	eax, DWORD PTR _start$[ebp]
	push	eax
	mov	ecx, DWORD PTR _trie$[ebp]
	push	ecx
	call	?utrie_getDataBlock@@YAHPAUUNewTrie@@H@Z ; utrie_getDataBlock
	add	esp, 8
	mov	DWORD PTR _block$[ebp], eax
; Line 307
	cmp	DWORD PTR _block$[ebp], 0
	jge	SHORT $LN16@utrie_setR
; Line 308
	xor	al, al
	jmp	$LN21@utrie_setR
$LN16@utrie_setR:
; Line 311
	mov	eax, DWORD PTR _start$[ebp]
	add	eax, 32					; 00000020H
	and	eax, -32				; ffffffe0H
	mov	DWORD PTR _nextStart$7742[ebp], eax
; Line 312
	mov	eax, DWORD PTR _nextStart$7742[ebp]
	cmp	eax, DWORD PTR _limit$[ebp]
	jg	SHORT $LN15@utrie_setR
; Line 314
	movzx	eax, BYTE PTR _overwrite$[ebp]
	push	eax
	mov	ecx, DWORD PTR _initialValue$[ebp]
	push	ecx
	mov	edx, DWORD PTR _value$[ebp]
	push	edx
	push	32					; 00000020H
	mov	eax, DWORD PTR _start$[ebp]
	and	eax, 31					; 0000001fH
	push	eax
	mov	ecx, DWORD PTR _trie$[ebp]
	mov	edx, DWORD PTR [ecx+139264]
	mov	eax, DWORD PTR _block$[ebp]
	lea	ecx, DWORD PTR [edx+eax*4]
	push	ecx
	call	?utrie_fillBlock@@YAXPAIHHIIC@Z		; utrie_fillBlock
	add	esp, 24					; 00000018H
; Line 315
	mov	eax, DWORD PTR _nextStart$7742[ebp]
	mov	DWORD PTR _start$[ebp], eax
; Line 316
	jmp	SHORT $LN17@utrie_setR
$LN15@utrie_setR:
; Line 318
	movzx	eax, BYTE PTR _overwrite$[ebp]
	push	eax
	mov	ecx, DWORD PTR _initialValue$[ebp]
	push	ecx
	mov	edx, DWORD PTR _value$[ebp]
	push	edx
	mov	eax, DWORD PTR _limit$[ebp]
	and	eax, 31					; 0000001fH
	push	eax
	mov	ecx, DWORD PTR _start$[ebp]
	and	ecx, 31					; 0000001fH
	push	ecx
	mov	edx, DWORD PTR _trie$[ebp]
	mov	eax, DWORD PTR [edx+139264]
	mov	ecx, DWORD PTR _block$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	push	edx
	call	?utrie_fillBlock@@YAXPAIHHIIC@Z		; utrie_fillBlock
	add	esp, 24					; 00000018H
; Line 319
	mov	al, 1
	jmp	$LN21@utrie_setR
$LN17@utrie_setR:
; Line 324
	mov	eax, DWORD PTR _limit$[ebp]
	and	eax, 31					; 0000001fH
	mov	DWORD PTR _rest$[ebp], eax
; Line 327
	mov	eax, DWORD PTR _limit$[ebp]
	and	eax, -32				; ffffffe0H
	mov	DWORD PTR _limit$[ebp], eax
; Line 330
	mov	eax, DWORD PTR _value$[ebp]
	cmp	eax, DWORD PTR _initialValue$[ebp]
	jne	SHORT $LN13@utrie_setR
; Line 331
	mov	DWORD PTR _repeatBlock$[ebp], 0
; Line 332
	jmp	SHORT $LN11@utrie_setR
$LN13@utrie_setR:
; Line 333
	mov	DWORD PTR _repeatBlock$[ebp], -1
$LN11@utrie_setR:
; Line 335
	mov	eax, DWORD PTR _start$[ebp]
	cmp	eax, DWORD PTR _limit$[ebp]
	jge	$LN10@utrie_setR
; Line 337
	mov	eax, DWORD PTR _start$[ebp]
	sar	eax, 5
	mov	ecx, DWORD PTR _trie$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _block$[ebp], edx
; Line 338
	cmp	DWORD PTR _block$[ebp], 0
	jle	SHORT $LN9@utrie_setR
; Line 340
	movzx	eax, BYTE PTR _overwrite$[ebp]
	push	eax
	mov	ecx, DWORD PTR _initialValue$[ebp]
	push	ecx
	mov	edx, DWORD PTR _value$[ebp]
	push	edx
	push	32					; 00000020H
	push	0
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR [eax+139264]
	mov	edx, DWORD PTR _block$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	push	eax
	call	?utrie_fillBlock@@YAXPAIHHIIC@Z		; utrie_fillBlock
	add	esp, 24					; 00000018H
	jmp	$LN8@utrie_setR
$LN9@utrie_setR:
; Line 341
	mov	eax, DWORD PTR _block$[ebp]
	neg	eax
	mov	ecx, DWORD PTR _trie$[ebp]
	mov	edx, DWORD PTR [ecx+139264]
	mov	eax, DWORD PTR [edx+eax*4]
	cmp	eax, DWORD PTR _value$[ebp]
	je	SHORT $LN8@utrie_setR
	cmp	DWORD PTR _block$[ebp], 0
	je	SHORT $LN6@utrie_setR
	movsx	eax, BYTE PTR _overwrite$[ebp]
	test	eax, eax
	je	SHORT $LN8@utrie_setR
$LN6@utrie_setR:
; Line 343
	cmp	DWORD PTR _repeatBlock$[ebp], 0
	jl	SHORT $LN5@utrie_setR
; Line 344
	mov	eax, DWORD PTR _repeatBlock$[ebp]
	neg	eax
	mov	ecx, DWORD PTR _start$[ebp]
	sar	ecx, 5
	mov	edx, DWORD PTR _trie$[ebp]
	mov	DWORD PTR [edx+ecx*4], eax
; Line 345
	jmp	SHORT $LN8@utrie_setR
$LN5@utrie_setR:
; Line 347
	mov	eax, DWORD PTR _start$[ebp]
	push	eax
	mov	ecx, DWORD PTR _trie$[ebp]
	push	ecx
	call	?utrie_getDataBlock@@YAHPAUUNewTrie@@H@Z ; utrie_getDataBlock
	add	esp, 8
	mov	DWORD PTR _repeatBlock$[ebp], eax
; Line 348
	cmp	DWORD PTR _repeatBlock$[ebp], 0
	jge	SHORT $LN3@utrie_setR
; Line 349
	xor	al, al
	jmp	$LN21@utrie_setR
$LN3@utrie_setR:
; Line 353
	mov	eax, DWORD PTR _repeatBlock$[ebp]
	neg	eax
	mov	ecx, DWORD PTR _start$[ebp]
	sar	ecx, 5
	mov	edx, DWORD PTR _trie$[ebp]
	mov	DWORD PTR [edx+ecx*4], eax
; Line 354
	push	1
	mov	eax, DWORD PTR _initialValue$[ebp]
	push	eax
	mov	ecx, DWORD PTR _value$[ebp]
	push	ecx
	push	32					; 00000020H
	push	0
	mov	edx, DWORD PTR _trie$[ebp]
	mov	eax, DWORD PTR [edx+139264]
	mov	ecx, DWORD PTR _repeatBlock$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	push	edx
	call	?utrie_fillBlock@@YAXPAIHHIIC@Z		; utrie_fillBlock
	add	esp, 24					; 00000018H
$LN8@utrie_setR:
; Line 358
	mov	eax, DWORD PTR _start$[ebp]
	add	eax, 32					; 00000020H
	mov	DWORD PTR _start$[ebp], eax
; Line 359
	jmp	$LN11@utrie_setR
$LN10@utrie_setR:
; Line 361
	cmp	DWORD PTR _rest$[ebp], 0
	jle	SHORT $LN2@utrie_setR
; Line 363
	mov	eax, DWORD PTR _start$[ebp]
	push	eax
	mov	ecx, DWORD PTR _trie$[ebp]
	push	ecx
	call	?utrie_getDataBlock@@YAHPAUUNewTrie@@H@Z ; utrie_getDataBlock
	add	esp, 8
	mov	DWORD PTR _block$[ebp], eax
; Line 364
	cmp	DWORD PTR _block$[ebp], 0
	jge	SHORT $LN1@utrie_setR
; Line 365
	xor	al, al
	jmp	SHORT $LN21@utrie_setR
$LN1@utrie_setR:
; Line 368
	movzx	eax, BYTE PTR _overwrite$[ebp]
	push	eax
	mov	ecx, DWORD PTR _initialValue$[ebp]
	push	ecx
	mov	edx, DWORD PTR _value$[ebp]
	push	edx
	mov	eax, DWORD PTR _rest$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _trie$[ebp]
	mov	edx, DWORD PTR [ecx+139264]
	mov	eax, DWORD PTR _block$[ebp]
	lea	ecx, DWORD PTR [edx+eax*4]
	push	ecx
	call	?utrie_fillBlock@@YAXPAIHHIIC@Z		; utrie_fillBlock
	add	esp, 24					; 00000018H
$LN2@utrie_setR:
; Line 371
	mov	al, 1
$LN21@utrie_setR:
; Line 372
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_utrie_setRange32_56 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?utrie_fillBlock@@YAXPAIHHIIC@Z
_TEXT	SEGMENT
_pLimit$ = -8						; size = 4
_block$ = 8						; size = 4
_start$ = 12						; size = 4
_limit$ = 16						; size = 4
_value$ = 20						; size = 4
_initialValue$ = 24					; size = 4
_overwrite$ = 28					; size = 1
?utrie_fillBlock@@YAXPAIHHIIC@Z PROC			; utrie_fillBlock, COMDAT
; Line 262
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 265
	mov	eax, DWORD PTR _limit$[ebp]
	mov	ecx, DWORD PTR _block$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _pLimit$[ebp], edx
; Line 266
	mov	eax, DWORD PTR _start$[ebp]
	mov	ecx, DWORD PTR _block$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _block$[ebp], edx
; Line 267
	movsx	eax, BYTE PTR _overwrite$[ebp]
	test	eax, eax
	je	SHORT $LN3@utrie_fill
$LN6@utrie_fill:
; Line 268
	mov	eax, DWORD PTR _block$[ebp]
	cmp	eax, DWORD PTR _pLimit$[ebp]
	jae	SHORT $LN5@utrie_fill
; Line 269
	mov	eax, DWORD PTR _block$[ebp]
	mov	ecx, DWORD PTR _value$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _block$[ebp]
	add	edx, 4
	mov	DWORD PTR _block$[ebp], edx
; Line 270
	jmp	SHORT $LN6@utrie_fill
$LN5@utrie_fill:
; Line 271
	jmp	SHORT $LN8@utrie_fill
$LN3@utrie_fill:
; Line 272
	mov	eax, DWORD PTR _block$[ebp]
	cmp	eax, DWORD PTR _pLimit$[ebp]
	jae	SHORT $LN8@utrie_fill
; Line 273
	mov	eax, DWORD PTR _block$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR _initialValue$[ebp]
	jne	SHORT $LN1@utrie_fill
; Line 274
	mov	eax, DWORD PTR _block$[ebp]
	mov	ecx, DWORD PTR _value$[ebp]
	mov	DWORD PTR [eax], ecx
$LN1@utrie_fill:
; Line 276
	mov	eax, DWORD PTR _block$[ebp]
	add	eax, 4
	mov	DWORD PTR _block$[ebp], eax
; Line 277
	jmp	SHORT $LN3@utrie_fill
$LN8@utrie_fill:
; Line 279
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?utrie_fillBlock@@YAXPAIHHIIC@Z ENDP			; utrie_fillBlock
_TEXT	ENDS
PUBLIC	_utrie_serialize_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _utrie_serialize_56
_TEXT	SEGMENT
tv129 = -268						; size = 4
_data$ = -68						; size = 4
_length$ = -56						; size = 4
_i$ = -44						; size = 4
_dest16$ = -32						; size = 4
_p$ = -20						; size = 4
_header$ = -8						; size = 4
_trie$ = 8						; size = 4
_dt$ = 12						; size = 4
_capacity$ = 16						; size = 4
_getFoldedValue$ = 20					; size = 4
_reduceTo16Bits$ = 24					; size = 1
_pErrorCode$ = 28					; size = 4
_utrie_serialize_56 PROC				; COMDAT
; Line 743
	push	ebp
	mov	ebp, esp
	sub	esp, 268				; 0000010cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-268]
	mov	ecx, 67					; 00000043H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 748
	mov	DWORD PTR _data$[ebp], 0
; Line 751
	cmp	DWORD PTR _pErrorCode$[ebp], 0
	je	SHORT $LN23@utrie_seri
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN24@utrie_seri
$LN23@utrie_seri:
; Line 752
	xor	eax, eax
	jmp	$LN25@utrie_seri
$LN24@utrie_seri:
; Line 755
	cmp	DWORD PTR _trie$[ebp], 0
	je	SHORT $LN21@utrie_seri
	cmp	DWORD PTR _capacity$[ebp], 0
	jl	SHORT $LN21@utrie_seri
	cmp	DWORD PTR _capacity$[ebp], 0
	jle	SHORT $LN22@utrie_seri
	cmp	DWORD PTR _dt$[ebp], 0
	jne	SHORT $LN22@utrie_seri
$LN21@utrie_seri:
; Line 756
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 1
; Line 757
	xor	eax, eax
	jmp	$LN25@utrie_seri
$LN22@utrie_seri:
; Line 759
	cmp	DWORD PTR _getFoldedValue$[ebp], 0
	jne	SHORT $LN20@utrie_seri
; Line 760
	mov	DWORD PTR _getFoldedValue$[ebp], OFFSET ?defaultGetFoldedValue@@YAIPAUUNewTrie@@HH@Z ; defaultGetFoldedValue
$LN20@utrie_seri:
; Line 763
	mov	eax, DWORD PTR _dt$[ebp]
	mov	DWORD PTR _data$[ebp], eax
; Line 765
	mov	eax, DWORD PTR _trie$[ebp]
	movsx	ecx, BYTE PTR [eax+139287]
	test	ecx, ecx
	jne	SHORT $LN19@utrie_seri
; Line 767
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _trie$[ebp]
	push	ecx
	call	?utrie_compact@@YAXPAUUNewTrie@@CPAW4UErrorCode@@@Z ; utrie_compact
	add	esp, 12					; 0000000cH
; Line 770
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _getFoldedValue$[ebp]
	push	ecx
	mov	edx, DWORD PTR _trie$[ebp]
	push	edx
	call	?utrie_fold@@YAXPAUUNewTrie@@P6AI0HH@ZPAW4UErrorCode@@@Z ; utrie_fold
	add	esp, 12					; 0000000cH
; Line 773
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _trie$[ebp]
	push	ecx
	call	?utrie_compact@@YAXPAUUNewTrie@@CPAW4UErrorCode@@@Z ; utrie_compact
	add	esp, 12					; 0000000cH
; Line 775
	mov	eax, DWORD PTR _trie$[ebp]
	mov	BYTE PTR [eax+139287], 1
; Line 776
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN19@utrie_seri
; Line 777
	xor	eax, eax
	jmp	$LN25@utrie_seri
$LN19@utrie_seri:
; Line 782
	movsx	eax, BYTE PTR _reduceTo16Bits$[ebp]
	test	eax, eax
	je	SHORT $LN27@utrie_seri
	mov	ecx, DWORD PTR _trie$[ebp]
	mov	edx, DWORD PTR [ecx+139280]
	mov	eax, DWORD PTR _trie$[ebp]
	add	edx, DWORD PTR [eax+139272]
	mov	DWORD PTR tv129[ebp], edx
	jmp	SHORT $LN28@utrie_seri
$LN27@utrie_seri:
	mov	ecx, DWORD PTR _trie$[ebp]
	mov	edx, DWORD PTR [ecx+139280]
	mov	DWORD PTR tv129[ebp], edx
$LN28@utrie_seri:
	cmp	DWORD PTR tv129[ebp], 262144		; 00040000H
	jl	SHORT $LN17@utrie_seri
; Line 783
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 8
$LN17@utrie_seri:
; Line 786
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR [eax+139272]
	lea	edx, DWORD PTR [ecx+ecx+16]
	mov	DWORD PTR _length$[ebp], edx
; Line 787
	movsx	eax, BYTE PTR _reduceTo16Bits$[ebp]
	test	eax, eax
	je	SHORT $LN16@utrie_seri
; Line 788
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR [eax+139280]
	mov	edx, DWORD PTR _length$[ebp]
	lea	eax, DWORD PTR [edx+ecx*2]
	mov	DWORD PTR _length$[ebp], eax
; Line 789
	jmp	SHORT $LN15@utrie_seri
$LN16@utrie_seri:
; Line 790
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR [eax+139280]
	mov	edx, DWORD PTR _length$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR _length$[ebp], eax
$LN15@utrie_seri:
; Line 793
	mov	eax, DWORD PTR _length$[ebp]
	cmp	eax, DWORD PTR _capacity$[ebp]
	jle	SHORT $LN14@utrie_seri
; Line 794
	mov	eax, DWORD PTR _length$[ebp]
	jmp	$LN25@utrie_seri
$LN14@utrie_seri:
; Line 803
	mov	eax, DWORD PTR _data$[ebp]
	mov	DWORD PTR _header$[ebp], eax
; Line 804
	mov	eax, DWORD PTR _data$[ebp]
	add	eax, 16					; 00000010H
	mov	DWORD PTR _data$[ebp], eax
; Line 806
	mov	eax, DWORD PTR _header$[ebp]
	mov	DWORD PTR [eax], 1416784229		; 54726965H
; Line 807
	mov	eax, DWORD PTR _header$[ebp]
	mov	DWORD PTR [eax+4], 37			; 00000025H
; Line 809
	movsx	eax, BYTE PTR _reduceTo16Bits$[ebp]
	test	eax, eax
	jne	SHORT $LN13@utrie_seri
; Line 810
	mov	eax, DWORD PTR _header$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	or	ecx, 256				; 00000100H
	mov	edx, DWORD PTR _header$[ebp]
	mov	DWORD PTR [edx+4], ecx
$LN13@utrie_seri:
; Line 812
	mov	eax, DWORD PTR _trie$[ebp]
	movsx	ecx, BYTE PTR [eax+139286]
	test	ecx, ecx
	je	SHORT $LN12@utrie_seri
; Line 813
	mov	eax, DWORD PTR _header$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	or	ecx, 512				; 00000200H
	mov	edx, DWORD PTR _header$[ebp]
	mov	DWORD PTR [edx+4], ecx
$LN12@utrie_seri:
; Line 816
	mov	eax, DWORD PTR _header$[ebp]
	mov	ecx, DWORD PTR _trie$[ebp]
	mov	edx, DWORD PTR [ecx+139272]
	mov	DWORD PTR [eax+8], edx
; Line 817
	mov	eax, DWORD PTR _header$[ebp]
	mov	ecx, DWORD PTR _trie$[ebp]
	mov	edx, DWORD PTR [ecx+139280]
	mov	DWORD PTR [eax+12], edx
; Line 820
	movsx	eax, BYTE PTR _reduceTo16Bits$[ebp]
	test	eax, eax
	je	$LN11@utrie_seri
; Line 822
	mov	eax, DWORD PTR _trie$[ebp]
	mov	DWORD PTR _p$[ebp], eax
; Line 823
	mov	eax, DWORD PTR _data$[ebp]
	mov	DWORD PTR _dest16$[ebp], eax
; Line 824
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR [eax+139272]
	mov	DWORD PTR _i$[ebp], ecx
	jmp	SHORT $LN10@utrie_seri
$LN9@utrie_seri:
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN10@utrie_seri:
	cmp	DWORD PTR _i$[ebp], 0
	jle	SHORT $LN8@utrie_seri
; Line 825
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _trie$[ebp]
	add	ecx, DWORD PTR [edx+139272]
	shr	ecx, 2
	mov	eax, DWORD PTR _dest16$[ebp]
	mov	WORD PTR [eax], cx
	mov	ecx, DWORD PTR _dest16$[ebp]
	add	ecx, 2
	mov	DWORD PTR _dest16$[ebp], ecx
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 4
	mov	DWORD PTR _p$[ebp], edx
; Line 826
	jmp	SHORT $LN9@utrie_seri
$LN8@utrie_seri:
; Line 829
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR [eax+139264]
	mov	DWORD PTR _p$[ebp], ecx
; Line 830
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR [eax+139280]
	mov	DWORD PTR _i$[ebp], ecx
	jmp	SHORT $LN7@utrie_seri
$LN6@utrie_seri:
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN7@utrie_seri:
	cmp	DWORD PTR _i$[ebp], 0
	jle	SHORT $LN5@utrie_seri
; Line 831
	mov	eax, DWORD PTR _dest16$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	dx, WORD PTR [ecx]
	mov	WORD PTR [eax], dx
	mov	eax, DWORD PTR _dest16$[ebp]
	add	eax, 2
	mov	DWORD PTR _dest16$[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 4
	mov	DWORD PTR _p$[ebp], ecx
; Line 832
	jmp	SHORT $LN6@utrie_seri
$LN5@utrie_seri:
	jmp	$LN4@utrie_seri
$LN11@utrie_seri:
; Line 835
	mov	eax, DWORD PTR _trie$[ebp]
	mov	DWORD PTR _p$[ebp], eax
; Line 836
	mov	eax, DWORD PTR _data$[ebp]
	mov	DWORD PTR _dest16$[ebp], eax
; Line 837
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR [eax+139272]
	mov	DWORD PTR _i$[ebp], ecx
	jmp	SHORT $LN3@utrie_seri
$LN2@utrie_seri:
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@utrie_seri:
	cmp	DWORD PTR _i$[ebp], 0
	jle	SHORT $LN1@utrie_seri
; Line 838
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	shr	ecx, 2
	mov	edx, DWORD PTR _dest16$[ebp]
	mov	WORD PTR [edx], cx
	mov	eax, DWORD PTR _dest16$[ebp]
	add	eax, 2
	mov	DWORD PTR _dest16$[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 4
	mov	DWORD PTR _p$[ebp], ecx
; Line 839
	jmp	SHORT $LN2@utrie_seri
$LN1@utrie_seri:
; Line 842
	push	1
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR [eax+139264]
	push	ecx
	call	_uprv_checkValidMemory
	add	esp, 8
	mov	edx, DWORD PTR _trie$[ebp]
	mov	eax, DWORD PTR [edx+139280]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR _trie$[ebp]
	mov	edx, DWORD PTR [ecx+139264]
	push	edx
	mov	eax, DWORD PTR _dest16$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN4@utrie_seri:
; Line 845
	mov	eax, DWORD PTR _length$[ebp]
$LN25@utrie_seri:
; Line 846
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 268				; 0000010cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_utrie_serialize_56 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?U_FAILURE@@YACW4UErrorCode@@@Z
_TEXT	SEGMENT
_code$ = 8						; size = 4
?U_FAILURE@@YACW4UErrorCode@@@Z PROC			; U_FAILURE, COMDAT
; File d:\mozilla\intl\icu\source\common\unicode\utypes.h
; Line 705
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	cmp	DWORD PTR _code$[ebp], 0
	setg	al
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?U_FAILURE@@YACW4UErrorCode@@@Z ENDP			; U_FAILURE
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	__imp__memmove:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?utrie_fold@@YAXPAUUNewTrie@@P6AI0HH@ZPAW4UErrorCode@@@Z
_TEXT	SEGMENT
_block$ = -196						; size = 4
_indexLength$ = -184					; size = 4
_c$ = -172						; size = 4
_value$ = -160						; size = 4
_idx$ = -148						; size = 4
_leadIndexes$ = -136					; size = 128
__$ArrayPad$ = -4					; size = 4
_trie$ = 8						; size = 4
_getFoldedValue$ = 12					; size = 4
_pErrorCode$ = 16					; size = 4
?utrie_fold@@YAXPAUUNewTrie@@P6AI0HH@ZPAW4UErrorCode@@@Z PROC ; utrie_fold, COMDAT
; File d:\mozilla\intl\icu\source\common\utrie.cpp
; Line 403
	push	ebp
	mov	ebp, esp
	sub	esp, 392				; 00000188H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-392]
	mov	ecx, 98					; 00000062H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 413
	mov	eax, DWORD PTR _trie$[ebp]
	mov	DWORD PTR _idx$[ebp], eax
; Line 416
	push	1
	mov	eax, DWORD PTR _idx$[ebp]
	add	eax, 6912				; 00001b00H
	push	eax
	call	_uprv_checkValidMemory
	add	esp, 8
	push	128					; 00000080H
	mov	ecx, DWORD PTR _idx$[ebp]
	add	ecx, 6912				; 00001b00H
	push	ecx
	lea	edx, DWORD PTR _leadIndexes$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 428
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR [eax+139264]
	mov	edx, DWORD PTR _trie$[ebp]
	mov	eax, DWORD PTR [edx+139268]
	cmp	eax, DWORD PTR [ecx]
	jne	SHORT $LN14@utrie_fold
; Line 429
	mov	DWORD PTR _block$[ebp], 0
; Line 430
	jmp	SHORT $LN13@utrie_fold
$LN14@utrie_fold:
; Line 432
	mov	eax, DWORD PTR _trie$[ebp]
	push	eax
	call	?utrie_allocDataBlock@@YAHPAUUNewTrie@@@Z ; utrie_allocDataBlock
	add	esp, 4
	mov	DWORD PTR _block$[ebp], eax
; Line 433
	cmp	DWORD PTR _block$[ebp], 0
	jge	SHORT $LN12@utrie_fold
; Line 435
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 7
; Line 436
	jmp	$LN15@utrie_fold
$LN12@utrie_fold:
; Line 438
	push	1
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR [eax+139264]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR [eax+139268]
	push	ecx
	push	32					; 00000020H
	push	0
	mov	edx, DWORD PTR _trie$[ebp]
	mov	eax, DWORD PTR [edx+139264]
	mov	ecx, DWORD PTR _block$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	push	edx
	call	?utrie_fillBlock@@YAXPAIHHIIC@Z		; utrie_fillBlock
	add	esp, 24					; 00000018H
; Line 439
	mov	eax, DWORD PTR _block$[ebp]
	neg	eax
	mov	DWORD PTR _block$[ebp], eax
$LN13@utrie_fold:
; Line 441
	mov	DWORD PTR _c$[ebp], 1728		; 000006c0H
	jmp	SHORT $LN11@utrie_fold
$LN10@utrie_fold:
	mov	eax, DWORD PTR _c$[ebp]
	add	eax, 1
	mov	DWORD PTR _c$[ebp], eax
$LN11@utrie_fold:
	cmp	DWORD PTR _c$[ebp], 1760		; 000006e0H
	jge	SHORT $LN9@utrie_fold
; Line 442
	mov	eax, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR _trie$[ebp]
	mov	edx, DWORD PTR _block$[ebp]
	mov	DWORD PTR [ecx+eax*4], edx
; Line 443
	jmp	SHORT $LN10@utrie_fold
$LN9@utrie_fold:
; Line 452
	mov	DWORD PTR _indexLength$[ebp], 2048	; 00000800H
; Line 455
	mov	DWORD PTR _c$[ebp], 65536		; 00010000H
$LN8@utrie_fold:
	cmp	DWORD PTR _c$[ebp], 1114112		; 00110000H
	jge	$LN7@utrie_fold
; Line 456
	mov	eax, DWORD PTR _c$[ebp]
	sar	eax, 5
	mov	ecx, DWORD PTR _idx$[ebp]
	cmp	DWORD PTR [ecx+eax*4], 0
	je	$LN6@utrie_fold
; Line 458
	mov	eax, DWORD PTR _c$[ebp]
	and	eax, -1024				; fffffc00H
	mov	DWORD PTR _c$[ebp], eax
; Line 466
	mov	eax, DWORD PTR _c$[ebp]
	sar	eax, 5
	push	eax
	mov	ecx, DWORD PTR _indexLength$[ebp]
	push	ecx
	mov	edx, DWORD PTR _idx$[ebp]
	push	edx
	call	?_findSameIndexBlock@@YAHPBHHH@Z	; _findSameIndexBlock
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _block$[ebp], eax
; Line 473
	mov	eax, DWORD PTR _block$[ebp]
	add	eax, 32					; 00000020H
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _c$[ebp]
	push	ecx
	mov	edx, DWORD PTR _trie$[ebp]
	push	edx
	call	DWORD PTR _getFoldedValue$[ebp]
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _value$[ebp], eax
; Line 474
	push	0
	mov	eax, DWORD PTR _c$[ebp]
	sar	eax, 10					; 0000000aH
	add	eax, 55232				; 0000d7c0H
	movzx	ecx, ax
	push	ecx
	mov	edx, DWORD PTR _trie$[ebp]
	push	edx
	call	_utrie_get32_56
	add	esp, 12					; 0000000cH
	cmp	DWORD PTR _value$[ebp], eax
	je	$LN5@utrie_fold
; Line 475
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _c$[ebp]
	sar	ecx, 10					; 0000000aH
	add	ecx, 55232				; 0000d7c0H
	movzx	edx, cx
	push	edx
	mov	eax, DWORD PTR _trie$[ebp]
	push	eax
	call	_utrie_set32_56
	add	esp, 12					; 0000000cH
	movsx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN4@utrie_fold
; Line 477
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 7
; Line 478
	jmp	$LN15@utrie_fold
$LN4@utrie_fold:
; Line 482
	mov	eax, DWORD PTR _block$[ebp]
	cmp	eax, DWORD PTR _indexLength$[ebp]
	jne	SHORT $LN5@utrie_fold
; Line 486
	push	1
	mov	eax, DWORD PTR _c$[ebp]
	sar	eax, 5
	mov	ecx, DWORD PTR _idx$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	push	edx
	call	_uprv_checkValidMemory
	add	esp, 8
	mov	esi, esp
	push	128					; 00000080H
	mov	eax, DWORD PTR _c$[ebp]
	sar	eax, 5
	mov	ecx, DWORD PTR _idx$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	push	edx
	mov	eax, DWORD PTR _indexLength$[ebp]
	mov	ecx, DWORD PTR _idx$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	push	edx
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 487
	mov	eax, DWORD PTR _indexLength$[ebp]
	add	eax, 32					; 00000020H
	mov	DWORD PTR _indexLength$[ebp], eax
$LN5@utrie_fold:
; Line 490
	mov	eax, DWORD PTR _c$[ebp]
	add	eax, 1024				; 00000400H
	mov	DWORD PTR _c$[ebp], eax
; Line 491
	jmp	SHORT $LN2@utrie_fold
$LN6@utrie_fold:
; Line 492
	mov	eax, DWORD PTR _c$[ebp]
	add	eax, 32					; 00000020H
	mov	DWORD PTR _c$[ebp], eax
$LN2@utrie_fold:
; Line 494
	jmp	$LN8@utrie_fold
$LN7@utrie_fold:
; Line 510
	cmp	DWORD PTR _indexLength$[ebp], 34816	; 00008800H
	jl	SHORT $LN1@utrie_fold
; Line 511
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 8
; Line 512
	jmp	$LN15@utrie_fold
$LN1@utrie_fold:
; Line 521
	push	1
	mov	eax, DWORD PTR _idx$[ebp]
	add	eax, 8192				; 00002000H
	push	eax
	call	_uprv_checkValidMemory
	add	esp, 8
	mov	ecx, DWORD PTR _indexLength$[ebp]
	lea	edx, DWORD PTR [ecx*4-8192]
	mov	esi, esp
	push	edx
	mov	eax, DWORD PTR _idx$[ebp]
	add	eax, 8192				; 00002000H
	push	eax
	mov	ecx, DWORD PTR _idx$[ebp]
	add	ecx, 8320				; 00002080H
	push	ecx
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 524
	push	1
	lea	eax, DWORD PTR _leadIndexes$[ebp]
	push	eax
	call	_uprv_checkValidMemory
	add	esp, 8
	push	128					; 00000080H
	lea	ecx, DWORD PTR _leadIndexes$[ebp]
	push	ecx
	mov	edx, DWORD PTR _idx$[ebp]
	add	edx, 8192				; 00002000H
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 525
	mov	eax, DWORD PTR _indexLength$[ebp]
	add	eax, 32					; 00000020H
	mov	DWORD PTR _indexLength$[ebp], eax
; Line 532
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR _indexLength$[ebp]
	mov	DWORD PTR [eax+139272], ecx
$LN15@utrie_fold:
; Line 533
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN19@utrie_fold
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 392				; 00000188H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN19@utrie_fold:
	DD	1
	DD	$LN18@utrie_fold
$LN18@utrie_fold:
	DD	-136					; ffffff78H
	DD	128					; 00000080H
	DD	$LN17@utrie_fold
$LN17@utrie_fold:
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
?utrie_fold@@YAXPAUUNewTrie@@P6AI0HH@ZPAW4UErrorCode@@@Z ENDP ; utrie_fold
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?_findSameIndexBlock@@YAHPBHHH@Z
_TEXT	SEGMENT
_i$ = -20						; size = 4
_block$ = -8						; size = 4
_idx$ = 8						; size = 4
_indexLength$ = 12					; size = 4
_otherBlock$ = 16					; size = 4
?_findSameIndexBlock@@YAHPBHHH@Z PROC			; _findSameIndexBlock, COMDAT
; Line 376
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 379
	mov	DWORD PTR _block$[ebp], 2048		; 00000800H
	jmp	SHORT $LN8@findSameIn
$LN7@findSameIn:
	mov	eax, DWORD PTR _block$[ebp]
	add	eax, 32					; 00000020H
	mov	DWORD PTR _block$[ebp], eax
$LN8@findSameIn:
	mov	eax, DWORD PTR _block$[ebp]
	cmp	eax, DWORD PTR _indexLength$[ebp]
	jge	SHORT $LN6@findSameIn
; Line 380
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN5@findSameIn
$LN4@findSameIn:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN5@findSameIn:
	cmp	DWORD PTR _i$[ebp], 32			; 00000020H
	jge	SHORT $LN3@findSameIn
; Line 381
	mov	eax, DWORD PTR _block$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _otherBlock$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _idx$[ebp]
	mov	esi, DWORD PTR _idx$[ebp]
	mov	eax, DWORD PTR [edx+eax*4]
	cmp	eax, DWORD PTR [esi+ecx*4]
	je	SHORT $LN2@findSameIn
; Line 382
	jmp	SHORT $LN3@findSameIn
$LN2@findSameIn:
; Line 384
	jmp	SHORT $LN4@findSameIn
$LN3@findSameIn:
; Line 385
	cmp	DWORD PTR _i$[ebp], 32			; 00000020H
	jne	SHORT $LN1@findSameIn
; Line 386
	mov	eax, DWORD PTR _block$[ebp]
	jmp	SHORT $LN9@findSameIn
$LN1@findSameIn:
; Line 388
	jmp	SHORT $LN7@findSameIn
$LN6@findSameIn:
; Line 389
	mov	eax, DWORD PTR _indexLength$[ebp]
$LN9@findSameIn:
; Line 390
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?_findSameIndexBlock@@YAHPBHHH@Z ENDP			; _findSameIndexBlock
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?utrie_compact@@YAXPAUUNewTrie@@CPAW4UErrorCode@@@Z
_TEXT	SEGMENT
tv204 = -244						; size = 4
_overlapStart$ = -44					; size = 4
_newStart$ = -32					; size = 4
_start$ = -20						; size = 4
_i$ = -8						; size = 4
_trie$ = 8						; size = 4
_overlap$ = 12						; size = 1
_pErrorCode$ = 16					; size = 4
?utrie_compact@@YAXPAUUNewTrie@@CPAW4UErrorCode@@@Z PROC ; utrie_compact, COMDAT
; Line 588
	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 591
	cmp	DWORD PTR _pErrorCode$[ebp], 0
	je	SHORT $LN27@utrie_comp
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN28@utrie_comp
$LN27@utrie_comp:
; Line 592
	jmp	$LN29@utrie_comp
$LN28@utrie_comp:
; Line 596
	cmp	DWORD PTR _trie$[ebp], 0
	jne	SHORT $LN26@utrie_comp
; Line 597
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 1
; Line 598
	jmp	$LN29@utrie_comp
$LN26@utrie_comp:
; Line 600
	mov	eax, DWORD PTR _trie$[ebp]
	movsx	ecx, BYTE PTR [eax+139287]
	test	ecx, ecx
	je	SHORT $LN25@utrie_comp
; Line 601
	jmp	$LN29@utrie_comp
$LN25@utrie_comp:
; Line 607
	mov	eax, DWORD PTR _trie$[ebp]
	push	eax
	call	?_findUnusedBlocks@@YAXPAUUNewTrie@@@Z	; _findUnusedBlocks
	add	esp, 4
; Line 610
	mov	eax, DWORD PTR _trie$[ebp]
	movsx	ecx, BYTE PTR [eax+139286]
	test	ecx, ecx
	je	SHORT $LN24@utrie_comp
	mov	eax, 1
	test	eax, eax
	je	SHORT $LN24@utrie_comp
; Line 611
	mov	DWORD PTR _overlapStart$[ebp], 288	; 00000120H
; Line 612
	jmp	SHORT $LN23@utrie_comp
$LN24@utrie_comp:
; Line 613
	mov	DWORD PTR _overlapStart$[ebp], 32	; 00000020H
$LN23@utrie_comp:
; Line 616
	mov	DWORD PTR _newStart$[ebp], 32		; 00000020H
; Line 617
	mov	eax, DWORD PTR _newStart$[ebp]
	mov	DWORD PTR _start$[ebp], eax
$LN22@utrie_comp:
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR _start$[ebp]
	cmp	ecx, DWORD PTR [eax+139280]
	jge	$LN21@utrie_comp
; Line 625
	mov	eax, DWORD PTR _start$[ebp]
	sar	eax, 5
	mov	ecx, DWORD PTR _trie$[ebp]
	cmp	DWORD PTR [ecx+eax*4+139288], 0
	jge	SHORT $LN20@utrie_comp
; Line 627
	mov	eax, DWORD PTR _start$[ebp]
	add	eax, 32					; 00000020H
	mov	DWORD PTR _start$[ebp], eax
; Line 630
	jmp	SHORT $LN22@utrie_comp
$LN20@utrie_comp:
; Line 638
	mov	eax, DWORD PTR _start$[ebp]
	cmp	eax, DWORD PTR _overlapStart$[ebp]
	jl	SHORT $LN19@utrie_comp
	movsx	eax, BYTE PTR _overlap$[ebp]
	neg	eax
	sbb	eax, eax
	and	eax, -28				; ffffffe4H
	add	eax, 32					; 00000020H
	push	eax
	mov	ecx, DWORD PTR _start$[ebp]
	push	ecx
	mov	edx, DWORD PTR _newStart$[ebp]
	push	edx
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR [eax+139264]
	push	ecx
	call	?_findSameDataBlock@@YAHPBIHHH@Z	; _findSameDataBlock
	add	esp, 16					; 00000010H
	mov	DWORD PTR _i$[ebp], eax
	cmp	DWORD PTR _i$[ebp], 0
	jl	SHORT $LN19@utrie_comp
; Line 640
	mov	eax, DWORD PTR _start$[ebp]
	sar	eax, 5
	mov	ecx, DWORD PTR _trie$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [ecx+eax*4+139288], edx
; Line 643
	mov	eax, DWORD PTR _start$[ebp]
	add	eax, 32					; 00000020H
	mov	DWORD PTR _start$[ebp], eax
; Line 646
	jmp	$LN22@utrie_comp
$LN19@utrie_comp:
; Line 650
	movsx	eax, BYTE PTR _overlap$[ebp]
	test	eax, eax
	je	SHORT $LN18@utrie_comp
	mov	eax, DWORD PTR _start$[ebp]
	cmp	eax, DWORD PTR _overlapStart$[ebp]
	jl	SHORT $LN18@utrie_comp
; Line 652
	mov	DWORD PTR _i$[ebp], 28			; 0000001cH
; Line 653
	jmp	SHORT $LN17@utrie_comp
$LN16@utrie_comp:
; Line 654
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 4
	mov	DWORD PTR _i$[ebp], eax
$LN17@utrie_comp:
	cmp	DWORD PTR _i$[ebp], 0
	jle	SHORT $LN15@utrie_comp
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _trie$[ebp]
	mov	edx, DWORD PTR [ecx+139264]
	mov	eax, DWORD PTR _start$[ebp]
	lea	ecx, DWORD PTR [edx+eax*4]
	push	ecx
	mov	edx, DWORD PTR _newStart$[ebp]
	sub	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR [eax+139264]
	lea	edx, DWORD PTR [ecx+edx*4]
	push	edx
	call	?equal_uint32@@YACPBI0H@Z		; equal_uint32
	add	esp, 12					; 0000000cH
	movsx	eax, al
	test	eax, eax
	jne	SHORT $LN15@utrie_comp
	jmp	SHORT $LN16@utrie_comp
$LN15@utrie_comp:
	jmp	SHORT $LN14@utrie_comp
$LN18@utrie_comp:
; Line 656
	mov	DWORD PTR _i$[ebp], 0
$LN14@utrie_comp:
; Line 659
	cmp	DWORD PTR _i$[ebp], 0
	jle	SHORT $LN13@utrie_comp
; Line 661
	mov	eax, DWORD PTR _newStart$[ebp]
	sub	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _start$[ebp]
	sar	ecx, 5
	mov	edx, DWORD PTR _trie$[ebp]
	mov	DWORD PTR [edx+ecx*4+139288], eax
; Line 664
	mov	eax, DWORD PTR _start$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR _start$[ebp], eax
; Line 665
	mov	eax, 32					; 00000020H
	sub	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN12@utrie_comp
$LN11@utrie_comp:
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN12@utrie_comp:
	cmp	DWORD PTR _i$[ebp], 0
	jle	SHORT $LN10@utrie_comp
; Line 666
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR [eax+139264]
	mov	edx, DWORD PTR _trie$[ebp]
	mov	eax, DWORD PTR [edx+139264]
	mov	edx, DWORD PTR _newStart$[ebp]
	mov	esi, DWORD PTR _start$[ebp]
	mov	ecx, DWORD PTR [ecx+esi*4]
	mov	DWORD PTR [eax+edx*4], ecx
	mov	edx, DWORD PTR _newStart$[ebp]
	add	edx, 1
	mov	DWORD PTR _newStart$[ebp], edx
	mov	eax, DWORD PTR _start$[ebp]
	add	eax, 1
	mov	DWORD PTR _start$[ebp], eax
; Line 667
	jmp	SHORT $LN11@utrie_comp
$LN10@utrie_comp:
	jmp	$LN9@utrie_comp
$LN13@utrie_comp:
; Line 668
	mov	eax, DWORD PTR _newStart$[ebp]
	cmp	eax, DWORD PTR _start$[ebp]
	jge	SHORT $LN8@utrie_comp
; Line 670
	mov	eax, DWORD PTR _start$[ebp]
	sar	eax, 5
	mov	ecx, DWORD PTR _trie$[ebp]
	mov	edx, DWORD PTR _newStart$[ebp]
	mov	DWORD PTR [ecx+eax*4+139288], edx
; Line 671
	mov	DWORD PTR _i$[ebp], 32			; 00000020H
	jmp	SHORT $LN7@utrie_comp
$LN6@utrie_comp:
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN7@utrie_comp:
	cmp	DWORD PTR _i$[ebp], 0
	jle	SHORT $LN5@utrie_comp
; Line 672
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR [eax+139264]
	mov	edx, DWORD PTR _trie$[ebp]
	mov	eax, DWORD PTR [edx+139264]
	mov	edx, DWORD PTR _newStart$[ebp]
	mov	esi, DWORD PTR _start$[ebp]
	mov	ecx, DWORD PTR [ecx+esi*4]
	mov	DWORD PTR [eax+edx*4], ecx
	mov	edx, DWORD PTR _newStart$[ebp]
	add	edx, 1
	mov	DWORD PTR _newStart$[ebp], edx
	mov	eax, DWORD PTR _start$[ebp]
	add	eax, 1
	mov	DWORD PTR _start$[ebp], eax
; Line 673
	jmp	SHORT $LN6@utrie_comp
$LN5@utrie_comp:
	jmp	SHORT $LN9@utrie_comp
$LN8@utrie_comp:
; Line 675
	mov	eax, DWORD PTR _start$[ebp]
	sar	eax, 5
	mov	ecx, DWORD PTR _trie$[ebp]
	mov	edx, DWORD PTR _start$[ebp]
	mov	DWORD PTR [ecx+eax*4+139288], edx
; Line 676
	mov	eax, DWORD PTR _newStart$[ebp]
	add	eax, 32					; 00000020H
	mov	DWORD PTR _newStart$[ebp], eax
; Line 677
	mov	eax, DWORD PTR _newStart$[ebp]
	mov	DWORD PTR _start$[ebp], eax
$LN9@utrie_comp:
; Line 679
	jmp	$LN22@utrie_comp
$LN21@utrie_comp:
; Line 682
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@utrie_comp
$LN2@utrie_comp:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@utrie_comp:
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR [eax+139272]
	jge	SHORT $LN1@utrie_comp
; Line 683
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _trie$[ebp]
	cmp	DWORD PTR [ecx+eax*4], 0
	jl	SHORT $LN31@utrie_comp
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR tv204[ebp], ecx
	jmp	SHORT $LN32@utrie_comp
$LN31@utrie_comp:
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	neg	ecx
	mov	DWORD PTR tv204[ebp], ecx
$LN32@utrie_comp:
	mov	edx, DWORD PTR tv204[ebp]
	sar	edx, 5
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _trie$[ebp]
	mov	esi, DWORD PTR _trie$[ebp]
	mov	edx, DWORD PTR [esi+edx*4+139288]
	mov	DWORD PTR [ecx+eax*4], edx
; Line 684
	jmp	SHORT $LN2@utrie_comp
$LN1@utrie_comp:
; Line 692
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR _newStart$[ebp]
	mov	DWORD PTR [eax+139280], ecx
$LN29@utrie_comp:
; Line 693
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?utrie_compact@@YAXPAUUNewTrie@@CPAW4UErrorCode@@@Z ENDP ; utrie_compact
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?equal_uint32@@YACPBI0H@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
_t$ = 12						; size = 4
_length$ = 16						; size = 4
?equal_uint32@@YACPBI0H@Z PROC				; equal_uint32, COMDAT
; Line 35
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
$LN2@equal_uint:
; Line 36
	cmp	DWORD PTR _length$[ebp], 0
	jle	SHORT $LN1@equal_uint
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _t$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN1@equal_uint
; Line 37
	mov	eax, DWORD PTR _s$[ebp]
	add	eax, 4
	mov	DWORD PTR _s$[ebp], eax
; Line 38
	mov	eax, DWORD PTR _t$[ebp]
	add	eax, 4
	mov	DWORD PTR _t$[ebp], eax
; Line 39
	mov	eax, DWORD PTR _length$[ebp]
	sub	eax, 1
	mov	DWORD PTR _length$[ebp], eax
; Line 40
	jmp	SHORT $LN2@equal_uint
$LN1@equal_uint:
; Line 41
	cmp	DWORD PTR _length$[ebp], 0
	sete	al
; Line 42
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?equal_uint32@@YACPBI0H@Z ENDP				; equal_uint32
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?_findUnusedBlocks@@YAXPAUUNewTrie@@@Z
_TEXT	SEGMENT
tv80 = -208						; size = 4
_i$ = -8						; size = 4
_trie$ = 8						; size = 4
?_findUnusedBlocks@@YAXPAUUNewTrie@@@Z PROC		; _findUnusedBlocks, COMDAT
; Line 544
	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 548
	push	139396					; 00022084H
	push	255					; 000000ffH
	mov	eax, DWORD PTR _trie$[ebp]
	add	eax, 139288				; 00022018H
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
; Line 551
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@findUnused
$LN2@findUnused:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@findUnused:
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR [eax+139272]
	jge	SHORT $LN1@findUnused
; Line 552
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _trie$[ebp]
	cmp	DWORD PTR [ecx+eax*4], 0
	jl	SHORT $LN6@findUnused
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR tv80[ebp], ecx
	jmp	SHORT $LN7@findUnused
$LN6@findUnused:
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	neg	ecx
	mov	DWORD PTR tv80[ebp], ecx
$LN7@findUnused:
	mov	edx, DWORD PTR tv80[ebp]
	sar	edx, 5
	mov	eax, DWORD PTR _trie$[ebp]
	mov	DWORD PTR [eax+edx*4+139288], 0
; Line 553
	jmp	SHORT $LN2@findUnused
$LN1@findUnused:
; Line 556
	mov	eax, DWORD PTR _trie$[ebp]
	mov	DWORD PTR [eax+139288], 0
; Line 557
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_findUnusedBlocks@@YAXPAUUNewTrie@@@Z ENDP		; _findUnusedBlocks
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?_findSameDataBlock@@YAHPBIHHH@Z
_TEXT	SEGMENT
_block$ = -8						; size = 4
_data$ = 8						; size = 4
_dataLength$ = 12					; size = 4
_otherBlock$ = 16					; size = 4
_step$ = 20						; size = 4
?_findSameDataBlock@@YAHPBIHHH@Z PROC			; _findSameDataBlock, COMDAT
; Line 561
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 565
	mov	eax, DWORD PTR _dataLength$[ebp]
	sub	eax, 32					; 00000020H
	mov	DWORD PTR _dataLength$[ebp], eax
; Line 567
	mov	DWORD PTR _block$[ebp], 0
	jmp	SHORT $LN4@findSameDa
$LN3@findSameDa:
	mov	eax, DWORD PTR _block$[ebp]
	add	eax, DWORD PTR _step$[ebp]
	mov	DWORD PTR _block$[ebp], eax
$LN4@findSameDa:
	mov	eax, DWORD PTR _block$[ebp]
	cmp	eax, DWORD PTR _dataLength$[ebp]
	jg	SHORT $LN2@findSameDa
; Line 568
	push	32					; 00000020H
	mov	eax, DWORD PTR _otherBlock$[ebp]
	mov	ecx, DWORD PTR _data$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	push	edx
	mov	eax, DWORD PTR _block$[ebp]
	mov	ecx, DWORD PTR _data$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	push	edx
	call	?equal_uint32@@YACPBI0H@Z		; equal_uint32
	add	esp, 12					; 0000000cH
	movsx	eax, al
	test	eax, eax
	je	SHORT $LN1@findSameDa
; Line 569
	mov	eax, DWORD PTR _block$[ebp]
	jmp	SHORT $LN5@findSameDa
$LN1@findSameDa:
; Line 571
	jmp	SHORT $LN3@findSameDa
$LN2@findSameDa:
; Line 572
	or	eax, -1
$LN5@findSameDa:
; Line 573
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_findSameDataBlock@@YAHPBIHHH@Z ENDP			; _findSameDataBlock
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?defaultGetFoldedValue@@YAIPAUUNewTrie@@HH@Z
_TEXT	SEGMENT
_inBlockZero$ = -41					; size = 1
_limit$ = -32						; size = 4
_initialValue$ = -20					; size = 4
_value$ = -8						; size = 4
_trie$ = 8						; size = 4
_start$ = 12						; size = 4
_offset$ = 16						; size = 4
?defaultGetFoldedValue@@YAIPAUUNewTrie@@HH@Z PROC	; defaultGetFoldedValue, COMDAT
; Line 719
	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 724
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR [eax+139264]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _initialValue$[ebp], edx
; Line 725
	mov	eax, DWORD PTR _start$[ebp]
	add	eax, 1024				; 00000400H
	mov	DWORD PTR _limit$[ebp], eax
$LN6@defaultGet:
; Line 726
	mov	eax, DWORD PTR _start$[ebp]
	cmp	eax, DWORD PTR _limit$[ebp]
	jge	SHORT $LN5@defaultGet
; Line 727
	lea	eax, DWORD PTR _inBlockZero$[ebp]
	push	eax
	mov	ecx, DWORD PTR _start$[ebp]
	push	ecx
	mov	edx, DWORD PTR _trie$[ebp]
	push	edx
	call	_utrie_get32_56
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _value$[ebp], eax
; Line 728
	movsx	eax, BYTE PTR _inBlockZero$[ebp]
	test	eax, eax
	je	SHORT $LN4@defaultGet
; Line 729
	mov	eax, DWORD PTR _start$[ebp]
	add	eax, 32					; 00000020H
	mov	DWORD PTR _start$[ebp], eax
	jmp	SHORT $LN3@defaultGet
$LN4@defaultGet:
; Line 730
	mov	eax, DWORD PTR _value$[ebp]
	cmp	eax, DWORD PTR _initialValue$[ebp]
	je	SHORT $LN2@defaultGet
; Line 731
	mov	eax, DWORD PTR _offset$[ebp]
	jmp	SHORT $LN7@defaultGet
; Line 732
	jmp	SHORT $LN3@defaultGet
$LN2@defaultGet:
; Line 733
	mov	eax, DWORD PTR _start$[ebp]
	add	eax, 1
	mov	DWORD PTR _start$[ebp], eax
$LN3@defaultGet:
; Line 735
	jmp	SHORT $LN6@defaultGet
$LN5@defaultGet:
; Line 736
	xor	eax, eax
$LN7@defaultGet:
; Line 737
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN11@defaultGet
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN11@defaultGet:
	DD	1
	DD	$LN10@defaultGet
$LN10@defaultGet:
	DD	-41					; ffffffd7H
	DD	1
	DD	$LN9@defaultGet
$LN9@defaultGet:
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	66					; 00000042H
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	90					; 0000005aH
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	0
?defaultGetFoldedValue@@YAIPAUUNewTrie@@HH@Z ENDP	; defaultGetFoldedValue
_TEXT	ENDS
PUBLIC	_utrie_defaultGetFoldingOffset_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _utrie_defaultGetFoldingOffset_56
_TEXT	SEGMENT
_data$ = 8						; size = 4
_utrie_defaultGetFoldingOffset_56 PROC			; COMDAT
; Line 850
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 851
	mov	eax, DWORD PTR _data$[ebp]
; Line 852
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_utrie_defaultGetFoldingOffset_56 ENDP
_TEXT	ENDS
PUBLIC	_utrie_unserialize_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _utrie_unserialize_56
_TEXT	SEGMENT
_options$ = -32						; size = 4
_p16$ = -20						; size = 4
_header$ = -8						; size = 4
_trie$ = 8						; size = 4
_data$ = 12						; size = 4
_length$ = 16						; size = 4
_pErrorCode$ = 20					; size = 4
_utrie_unserialize_56 PROC				; COMDAT
; Line 855
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 860
	cmp	DWORD PTR _pErrorCode$[ebp], 0
	je	SHORT $LN10@utrie_unse
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN11@utrie_unse
$LN10@utrie_unse:
; Line 861
	or	eax, -1
	jmp	$LN12@utrie_unse
$LN11@utrie_unse:
; Line 865
	cmp	DWORD PTR _length$[ebp], 16		; 00000010H
	jge	SHORT $LN9@utrie_unse
; Line 866
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 3
; Line 867
	or	eax, -1
	jmp	$LN12@utrie_unse
$LN9@utrie_unse:
; Line 871
	mov	eax, DWORD PTR _data$[ebp]
	mov	DWORD PTR _header$[ebp], eax
; Line 872
	mov	eax, DWORD PTR _header$[ebp]
	cmp	DWORD PTR [eax], 1416784229		; 54726965H
	je	SHORT $LN8@utrie_unse
; Line 873
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 3
; Line 874
	or	eax, -1
	jmp	$LN12@utrie_unse
$LN8@utrie_unse:
; Line 878
	mov	eax, DWORD PTR _header$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _options$[ebp], ecx
; Line 881
	mov	eax, DWORD PTR _options$[ebp]
	and	eax, 15					; 0000000fH
	cmp	eax, 5
	jne	SHORT $LN6@utrie_unse
	mov	eax, DWORD PTR _options$[ebp]
	shr	eax, 4
	and	eax, 15					; 0000000fH
	cmp	eax, 2
	je	SHORT $LN7@utrie_unse
$LN6@utrie_unse:
; Line 882
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 3
; Line 883
	or	eax, -1
	jmp	$LN12@utrie_unse
$LN7@utrie_unse:
; Line 885
	mov	eax, DWORD PTR _options$[ebp]
	and	eax, 512				; 00000200H
	setne	cl
	mov	edx, DWORD PTR _trie$[ebp]
	mov	BYTE PTR [edx+24], cl
; Line 888
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR _header$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+12], edx
; Line 889
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR _header$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+16], edx
; Line 891
	mov	eax, DWORD PTR _length$[ebp]
	sub	eax, 16					; 00000010H
	mov	DWORD PTR _length$[ebp], eax
; Line 894
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	shl	ecx, 1
	cmp	DWORD PTR _length$[ebp], ecx
	jge	SHORT $LN5@utrie_unse
; Line 895
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 3
; Line 896
	or	eax, -1
	jmp	$LN12@utrie_unse
$LN5@utrie_unse:
; Line 898
	mov	eax, DWORD PTR _header$[ebp]
	add	eax, 16					; 00000010H
	mov	DWORD PTR _p16$[ebp], eax
; Line 899
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR _p16$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 900
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _p16$[ebp]
	lea	eax, DWORD PTR [edx+ecx*2]
	mov	DWORD PTR _p16$[ebp], eax
; Line 901
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	shl	ecx, 1
	mov	edx, DWORD PTR _length$[ebp]
	sub	edx, ecx
	mov	DWORD PTR _length$[ebp], edx
; Line 904
	mov	eax, DWORD PTR _options$[ebp]
	and	eax, 256				; 00000100H
	je	SHORT $LN4@utrie_unse
; Line 905
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	shl	ecx, 2
	cmp	DWORD PTR _length$[ebp], ecx
	jge	SHORT $LN3@utrie_unse
; Line 906
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 3
; Line 907
	or	eax, -1
	jmp	$LN12@utrie_unse
$LN3@utrie_unse:
; Line 909
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR _p16$[ebp]
	mov	DWORD PTR [eax+4], ecx
; Line 910
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _trie$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx+20], eax
; Line 911
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _trie$[ebp]
	mov	eax, DWORD PTR [edx+16]
	shl	eax, 2
	lea	ecx, DWORD PTR [eax+ecx*2+16]
	mov	DWORD PTR _length$[ebp], ecx
; Line 912
	jmp	SHORT $LN2@utrie_unse
$LN4@utrie_unse:
; Line 913
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	shl	ecx, 1
	cmp	DWORD PTR _length$[ebp], ecx
	jge	SHORT $LN1@utrie_unse
; Line 914
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 3
; Line 915
	or	eax, -1
	jmp	SHORT $LN12@utrie_unse
$LN1@utrie_unse:
; Line 919
	mov	eax, DWORD PTR _trie$[ebp]
	mov	DWORD PTR [eax+4], 0
; Line 920
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _trie$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, WORD PTR [eax+ecx*2]
	mov	edx, DWORD PTR _trie$[ebp]
	mov	DWORD PTR [edx+20], ecx
; Line 921
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _trie$[ebp]
	mov	eax, DWORD PTR [edx+16]
	shl	eax, 1
	lea	ecx, DWORD PTR [eax+ecx*2+16]
	mov	DWORD PTR _length$[ebp], ecx
$LN2@utrie_unse:
; Line 924
	mov	eax, DWORD PTR _trie$[ebp]
	mov	DWORD PTR [eax+8], OFFSET _utrie_defaultGetFoldingOffset_56
; Line 926
	mov	eax, DWORD PTR _length$[ebp]
$LN12@utrie_unse:
; Line 927
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_utrie_unserialize_56 ENDP
_TEXT	ENDS
PUBLIC	_utrie_unserializeDummy_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _utrie_unserializeDummy_56
_TEXT	SEGMENT
_p32$8003 = -80						; size = 4
_block$ = -68						; size = 2
_limit$ = -56						; size = 4
_i$ = -44						; size = 4
_latin1Length$ = -32					; size = 4
_actualLength$ = -20					; size = 4
_p16$ = -8						; size = 4
_trie$ = 8						; size = 4
_data$ = 12						; size = 4
_length$ = 16						; size = 4
_initialValue$ = 20					; size = 4
_leadUnitValue$ = 24					; size = 4
_make16BitTrie$ = 28					; size = 1
_pErrorCode$ = 32					; size = 4
_utrie_unserializeDummy_56 PROC				; COMDAT
; Line 934
	push	ebp
	mov	ebp, esp
	sub	esp, 276				; 00000114H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-276]
	mov	ecx, 69					; 00000045H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 939
	cmp	DWORD PTR _pErrorCode$[ebp], 0
	je	SHORT $LN32@utrie_unse@2
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN33@utrie_unse@2
$LN32@utrie_unse@2:
; Line 940
	or	eax, -1
	jmp	$LN34@utrie_unse@2
$LN33@utrie_unse@2:
; Line 946
	mov	DWORD PTR _latin1Length$[ebp], 256	; 00000100H
; Line 948
	mov	eax, DWORD PTR _trie$[ebp]
	mov	DWORD PTR [eax+12], 2080		; 00000820H
; Line 949
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR _latin1Length$[ebp]
	mov	DWORD PTR [eax+16], ecx
; Line 950
	mov	eax, DWORD PTR _leadUnitValue$[ebp]
	cmp	eax, DWORD PTR _initialValue$[ebp]
	je	SHORT $LN31@utrie_unse@2
; Line 951
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	add	ecx, 32					; 00000020H
	mov	edx, DWORD PTR _trie$[ebp]
	mov	DWORD PTR [edx+16], ecx
$LN31@utrie_unse@2:
; Line 954
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	shl	ecx, 1
	mov	DWORD PTR _actualLength$[ebp], ecx
; Line 955
	movsx	eax, BYTE PTR _make16BitTrie$[ebp]
	test	eax, eax
	je	SHORT $LN30@utrie_unse@2
; Line 956
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _actualLength$[ebp]
	lea	eax, DWORD PTR [edx+ecx*2]
	mov	DWORD PTR _actualLength$[ebp], eax
; Line 957
	jmp	SHORT $LN29@utrie_unse@2
$LN30@utrie_unse@2:
; Line 958
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _actualLength$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR _actualLength$[ebp], eax
$LN29@utrie_unse@2:
; Line 962
	mov	eax, DWORD PTR _length$[ebp]
	cmp	eax, DWORD PTR _actualLength$[ebp]
	jge	SHORT $LN28@utrie_unse@2
; Line 963
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
; Line 964
	mov	eax, DWORD PTR _actualLength$[ebp]
	jmp	$LN34@utrie_unse@2
$LN28@utrie_unse@2:
; Line 967
	mov	eax, DWORD PTR _trie$[ebp]
	mov	BYTE PTR [eax+24], 1
; Line 968
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR _initialValue$[ebp]
	mov	DWORD PTR [eax+20], ecx
; Line 971
	mov	eax, DWORD PTR _data$[ebp]
	mov	DWORD PTR _p16$[ebp], eax
; Line 972
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR _p16$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 974
	movsx	eax, BYTE PTR _make16BitTrie$[ebp]
	test	eax, eax
	je	$LN27@utrie_unse@2
; Line 976
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	sar	ecx, 2
	mov	WORD PTR _block$[ebp], cx
; Line 977
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _limit$[ebp], ecx
; Line 978
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN26@utrie_unse@2
$LN25@utrie_unse@2:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN26@utrie_unse@2:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _limit$[ebp]
	jge	SHORT $LN24@utrie_unse@2
; Line 979
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _p16$[ebp]
	mov	dx, WORD PTR _block$[ebp]
	mov	WORD PTR [ecx+eax*2], dx
; Line 980
	jmp	SHORT $LN25@utrie_unse@2
$LN24@utrie_unse@2:
; Line 982
	mov	eax, DWORD PTR _leadUnitValue$[ebp]
	cmp	eax, DWORD PTR _initialValue$[ebp]
	je	SHORT $LN23@utrie_unse@2
; Line 984
	mov	eax, DWORD PTR _latin1Length$[ebp]
	sar	eax, 2
	movzx	ecx, ax
	movzx	edx, WORD PTR _block$[ebp]
	add	edx, ecx
	mov	WORD PTR _block$[ebp], dx
; Line 985
	mov	DWORD PTR _i$[ebp], 1728		; 000006c0H
; Line 986
	mov	DWORD PTR _limit$[ebp], 1760		; 000006e0H
	jmp	SHORT $LN22@utrie_unse@2
$LN21@utrie_unse@2:
; Line 987
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN22@utrie_unse@2:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _limit$[ebp]
	jge	SHORT $LN23@utrie_unse@2
; Line 988
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _p16$[ebp]
	mov	dx, WORD PTR _block$[ebp]
	mov	WORD PTR [ecx+eax*2], dx
; Line 989
	jmp	SHORT $LN21@utrie_unse@2
$LN23@utrie_unse@2:
; Line 992
	mov	eax, DWORD PTR _trie$[ebp]
	mov	DWORD PTR [eax+4], 0
; Line 995
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _p16$[ebp]
	lea	eax, DWORD PTR [edx+ecx*2]
	mov	DWORD PTR _p16$[ebp], eax
; Line 996
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN19@utrie_unse@2
$LN18@utrie_unse@2:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN19@utrie_unse@2:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _latin1Length$[ebp]
	jge	SHORT $LN17@utrie_unse@2
; Line 997
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _p16$[ebp]
	mov	dx, WORD PTR _initialValue$[ebp]
	mov	WORD PTR [ecx+eax*2], dx
; Line 998
	jmp	SHORT $LN18@utrie_unse@2
$LN17@utrie_unse@2:
; Line 1001
	mov	eax, DWORD PTR _leadUnitValue$[ebp]
	cmp	eax, DWORD PTR _initialValue$[ebp]
	je	SHORT $LN16@utrie_unse@2
; Line 1002
	mov	eax, DWORD PTR _latin1Length$[ebp]
	add	eax, 32					; 00000020H
	mov	DWORD PTR _limit$[ebp], eax
	jmp	SHORT $LN15@utrie_unse@2
$LN14@utrie_unse@2:
; Line 1003
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN15@utrie_unse@2:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _limit$[ebp]
	jge	SHORT $LN16@utrie_unse@2
; Line 1004
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _p16$[ebp]
	mov	dx, WORD PTR _leadUnitValue$[ebp]
	mov	WORD PTR [ecx+eax*2], dx
; Line 1005
	jmp	SHORT $LN14@utrie_unse@2
$LN16@utrie_unse@2:
; Line 1007
	jmp	$LN12@utrie_unse@2
$LN27@utrie_unse@2:
; Line 1011
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	shl	ecx, 1
	push	ecx
	push	0
	mov	edx, DWORD PTR _p16$[ebp]
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH
; Line 1013
	mov	eax, DWORD PTR _leadUnitValue$[ebp]
	cmp	eax, DWORD PTR _initialValue$[ebp]
	je	SHORT $LN11@utrie_unse@2
; Line 1015
	mov	eax, DWORD PTR _latin1Length$[ebp]
	sar	eax, 2
	mov	WORD PTR _block$[ebp], ax
; Line 1016
	mov	DWORD PTR _i$[ebp], 1728		; 000006c0H
; Line 1017
	mov	DWORD PTR _limit$[ebp], 1760		; 000006e0H
	jmp	SHORT $LN10@utrie_unse@2
$LN9@utrie_unse@2:
; Line 1018
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN10@utrie_unse@2:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _limit$[ebp]
	jge	SHORT $LN11@utrie_unse@2
; Line 1019
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _p16$[ebp]
	mov	dx, WORD PTR _block$[ebp]
	mov	WORD PTR [ecx+eax*2], dx
; Line 1020
	jmp	SHORT $LN9@utrie_unse@2
$LN11@utrie_unse@2:
; Line 1023
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _p16$[ebp]
	lea	eax, DWORD PTR [edx+ecx*2]
	mov	DWORD PTR _p32$8003[ebp], eax
	mov	ecx, DWORD PTR _trie$[ebp]
	mov	edx, DWORD PTR _p32$8003[ebp]
	mov	DWORD PTR [ecx+4], edx
; Line 1026
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN7@utrie_unse@2
$LN6@utrie_unse@2:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN7@utrie_unse@2:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _latin1Length$[ebp]
	jge	SHORT $LN5@utrie_unse@2
; Line 1027
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _p32$8003[ebp]
	mov	edx, DWORD PTR _initialValue$[ebp]
	mov	DWORD PTR [ecx+eax*4], edx
; Line 1028
	jmp	SHORT $LN6@utrie_unse@2
$LN5@utrie_unse@2:
; Line 1031
	mov	eax, DWORD PTR _leadUnitValue$[ebp]
	cmp	eax, DWORD PTR _initialValue$[ebp]
	je	SHORT $LN12@utrie_unse@2
; Line 1032
	mov	eax, DWORD PTR _latin1Length$[ebp]
	add	eax, 32					; 00000020H
	mov	DWORD PTR _limit$[ebp], eax
	jmp	SHORT $LN3@utrie_unse@2
$LN2@utrie_unse@2:
; Line 1033
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@utrie_unse@2:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _limit$[ebp]
	jge	SHORT $LN12@utrie_unse@2
; Line 1034
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _p32$8003[ebp]
	mov	edx, DWORD PTR _leadUnitValue$[ebp]
	mov	DWORD PTR [ecx+eax*4], edx
; Line 1035
	jmp	SHORT $LN2@utrie_unse@2
$LN12@utrie_unse@2:
; Line 1039
	mov	eax, DWORD PTR _trie$[ebp]
	mov	DWORD PTR [eax+8], OFFSET _utrie_defaultGetFoldingOffset_56
; Line 1041
	mov	eax, DWORD PTR _actualLength$[ebp]
$LN34@utrie_unse@2:
; Line 1042
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 276				; 00000114H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_utrie_unserializeDummy_56 ENDP
_TEXT	ENDS
PUBLIC	_utrie_enum_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _utrie_enum_56
_TEXT	SEGMENT
tv226 = -364						; size = 4
tv182 = -364						; size = 4
tv140 = -364						; size = 4
_offset$ = -164						; size = 4
_nullBlock$ = -152					; size = 4
_prevBlock$ = -140					; size = 4
_block$ = -128						; size = 4
_j$ = -116						; size = 4
_i$ = -104						; size = 4
_l$ = -92						; size = 4
_prev$ = -80						; size = 4
_c$ = -68						; size = 4
_initialValue$ = -56					; size = 4
_prevValue$ = -44					; size = 4
_value$ = -32						; size = 4
_idx$ = -20						; size = 4
_data32$ = -8						; size = 4
_trie$ = 8						; size = 4
_enumValue$ = 12					; size = 4
_enumRange$ = 16					; size = 4
_context$ = 20						; size = 4
_utrie_enum_56 PROC					; COMDAT
; Line 1058
	push	ebp
	mov	ebp, esp
	sub	esp, 364				; 0000016cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-364]
	mov	ecx, 91					; 0000005bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1067
	cmp	DWORD PTR _trie$[ebp], 0
	je	SHORT $LN52@utrie_enum
	mov	eax, DWORD PTR _trie$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN52@utrie_enum
	cmp	DWORD PTR _enumRange$[ebp], 0
	jne	SHORT $LN53@utrie_enum
$LN52@utrie_enum:
; Line 1068
	jmp	$LN54@utrie_enum
$LN53@utrie_enum:
; Line 1070
	cmp	DWORD PTR _enumValue$[ebp], 0
	jne	SHORT $LN51@utrie_enum
; Line 1071
	mov	DWORD PTR _enumValue$[ebp], OFFSET ?enumSameValue@@YAIPBXI@Z ; enumSameValue
$LN51@utrie_enum:
; Line 1074
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _idx$[ebp], ecx
; Line 1075
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _data32$[ebp], ecx
; Line 1078
	mov	esi, esp
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	mov	edx, DWORD PTR _context$[ebp]
	push	edx
	call	DWORD PTR _enumValue$[ebp]
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _initialValue$[ebp], eax
; Line 1080
	cmp	DWORD PTR _data32$[ebp], 0
	jne	SHORT $LN50@utrie_enum
; Line 1081
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _nullBlock$[ebp], ecx
; Line 1082
	jmp	SHORT $LN49@utrie_enum
$LN50@utrie_enum:
; Line 1083
	mov	DWORD PTR _nullBlock$[ebp], 0
$LN49@utrie_enum:
; Line 1087
	mov	eax, DWORD PTR _nullBlock$[ebp]
	mov	DWORD PTR _prevBlock$[ebp], eax
; Line 1088
	mov	DWORD PTR _prev$[ebp], 0
; Line 1089
	mov	eax, DWORD PTR _initialValue$[ebp]
	mov	DWORD PTR _prevValue$[ebp], eax
; Line 1092
	mov	DWORD PTR _i$[ebp], 0
	mov	DWORD PTR _c$[ebp], 0
	jmp	SHORT $LN48@utrie_enum
$LN47@utrie_enum:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN48@utrie_enum:
	cmp	DWORD PTR _c$[ebp], 65535		; 0000ffffH
	jg	$LN46@utrie_enum
; Line 1093
	cmp	DWORD PTR _c$[ebp], 55296		; 0000d800H
	jne	SHORT $LN45@utrie_enum
; Line 1095
	mov	DWORD PTR _i$[ebp], 2048		; 00000800H
	jmp	SHORT $LN44@utrie_enum
$LN45@utrie_enum:
; Line 1096
	cmp	DWORD PTR _c$[ebp], 56320		; 0000dc00H
	jne	SHORT $LN44@utrie_enum
; Line 1098
	mov	eax, DWORD PTR _c$[ebp]
	sar	eax, 5
	mov	DWORD PTR _i$[ebp], eax
$LN44@utrie_enum:
; Line 1101
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _idx$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	shl	edx, 2
	mov	DWORD PTR _block$[ebp], edx
; Line 1102
	mov	eax, DWORD PTR _block$[ebp]
	cmp	eax, DWORD PTR _prevBlock$[ebp]
	jne	SHORT $LN42@utrie_enum
; Line 1104
	mov	eax, DWORD PTR _c$[ebp]
	add	eax, 32					; 00000020H
	mov	DWORD PTR _c$[ebp], eax
	jmp	$LN41@utrie_enum
$LN42@utrie_enum:
; Line 1105
	mov	eax, DWORD PTR _block$[ebp]
	cmp	eax, DWORD PTR _nullBlock$[ebp]
	jne	SHORT $LN40@utrie_enum
; Line 1107
	mov	eax, DWORD PTR _prevValue$[ebp]
	cmp	eax, DWORD PTR _initialValue$[ebp]
	je	SHORT $LN39@utrie_enum
; Line 1108
	mov	eax, DWORD PTR _prev$[ebp]
	cmp	eax, DWORD PTR _c$[ebp]
	jge	SHORT $LN38@utrie_enum
; Line 1109
	mov	esi, esp
	mov	eax, DWORD PTR _prevValue$[ebp]
	push	eax
	mov	ecx, DWORD PTR _c$[ebp]
	push	ecx
	mov	edx, DWORD PTR _prev$[ebp]
	push	edx
	mov	eax, DWORD PTR _context$[ebp]
	push	eax
	call	DWORD PTR _enumRange$[ebp]
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	movsx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN38@utrie_enum
; Line 1110
	jmp	$LN54@utrie_enum
$LN38@utrie_enum:
; Line 1113
	mov	eax, DWORD PTR _nullBlock$[ebp]
	mov	DWORD PTR _prevBlock$[ebp], eax
; Line 1114
	mov	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR _prev$[ebp], eax
; Line 1115
	mov	eax, DWORD PTR _initialValue$[ebp]
	mov	DWORD PTR _prevValue$[ebp], eax
$LN39@utrie_enum:
; Line 1117
	mov	eax, DWORD PTR _c$[ebp]
	add	eax, 32					; 00000020H
	mov	DWORD PTR _c$[ebp], eax
; Line 1118
	jmp	$LN41@utrie_enum
$LN40@utrie_enum:
; Line 1119
	mov	eax, DWORD PTR _block$[ebp]
	mov	DWORD PTR _prevBlock$[ebp], eax
; Line 1120
	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN35@utrie_enum
$LN34@utrie_enum:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN35@utrie_enum:
	cmp	DWORD PTR _j$[ebp], 32			; 00000020H
	jge	$LN41@utrie_enum
; Line 1121
	cmp	DWORD PTR _data32$[ebp], 0
	je	SHORT $LN56@utrie_enum
	mov	eax, DWORD PTR _block$[ebp]
	add	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _data32$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR tv140[ebp], edx
	jmp	SHORT $LN57@utrie_enum
$LN56@utrie_enum:
	mov	eax, DWORD PTR _block$[ebp]
	add	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _idx$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	mov	DWORD PTR tv140[ebp], edx
$LN57@utrie_enum:
	mov	esi, esp
	mov	eax, DWORD PTR tv140[ebp]
	push	eax
	mov	ecx, DWORD PTR _context$[ebp]
	push	ecx
	call	DWORD PTR _enumValue$[ebp]
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _value$[ebp], eax
; Line 1122
	mov	eax, DWORD PTR _value$[ebp]
	cmp	eax, DWORD PTR _prevValue$[ebp]
	je	SHORT $LN32@utrie_enum
; Line 1123
	mov	eax, DWORD PTR _prev$[ebp]
	cmp	eax, DWORD PTR _c$[ebp]
	jge	SHORT $LN31@utrie_enum
; Line 1124
	mov	esi, esp
	mov	eax, DWORD PTR _prevValue$[ebp]
	push	eax
	mov	ecx, DWORD PTR _c$[ebp]
	push	ecx
	mov	edx, DWORD PTR _prev$[ebp]
	push	edx
	mov	eax, DWORD PTR _context$[ebp]
	push	eax
	call	DWORD PTR _enumRange$[ebp]
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	movsx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN31@utrie_enum
; Line 1125
	jmp	$LN54@utrie_enum
$LN31@utrie_enum:
; Line 1128
	cmp	DWORD PTR _j$[ebp], 0
	jle	SHORT $LN29@utrie_enum
; Line 1130
	mov	DWORD PTR _prevBlock$[ebp], -1
$LN29@utrie_enum:
; Line 1132
	mov	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR _prev$[ebp], eax
; Line 1133
	mov	eax, DWORD PTR _value$[ebp]
	mov	DWORD PTR _prevValue$[ebp], eax
$LN32@utrie_enum:
; Line 1135
	mov	eax, DWORD PTR _c$[ebp]
	add	eax, 1
	mov	DWORD PTR _c$[ebp], eax
; Line 1136
	jmp	$LN34@utrie_enum
$LN41@utrie_enum:
; Line 1138
	jmp	$LN47@utrie_enum
$LN46@utrie_enum:
; Line 1141
	mov	DWORD PTR _l$[ebp], 55296		; 0000d800H
$LN28@utrie_enum:
	cmp	DWORD PTR _l$[ebp], 56320		; 0000dc00H
	jge	$LN27@utrie_enum
; Line 1143
	mov	eax, DWORD PTR _l$[ebp]
	sar	eax, 5
	mov	ecx, DWORD PTR _idx$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	shl	edx, 2
	mov	DWORD PTR _offset$[ebp], edx
; Line 1144
	mov	eax, DWORD PTR _offset$[ebp]
	cmp	eax, DWORD PTR _nullBlock$[ebp]
	jne	SHORT $LN26@utrie_enum
; Line 1146
	mov	eax, DWORD PTR _prevValue$[ebp]
	cmp	eax, DWORD PTR _initialValue$[ebp]
	je	SHORT $LN25@utrie_enum
; Line 1147
	mov	eax, DWORD PTR _prev$[ebp]
	cmp	eax, DWORD PTR _c$[ebp]
	jge	SHORT $LN24@utrie_enum
; Line 1148
	mov	esi, esp
	mov	eax, DWORD PTR _prevValue$[ebp]
	push	eax
	mov	ecx, DWORD PTR _c$[ebp]
	push	ecx
	mov	edx, DWORD PTR _prev$[ebp]
	push	edx
	mov	eax, DWORD PTR _context$[ebp]
	push	eax
	call	DWORD PTR _enumRange$[ebp]
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	movsx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN24@utrie_enum
; Line 1149
	jmp	$LN54@utrie_enum
$LN24@utrie_enum:
; Line 1152
	mov	eax, DWORD PTR _nullBlock$[ebp]
	mov	DWORD PTR _prevBlock$[ebp], eax
; Line 1153
	mov	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR _prev$[ebp], eax
; Line 1154
	mov	eax, DWORD PTR _initialValue$[ebp]
	mov	DWORD PTR _prevValue$[ebp], eax
$LN25@utrie_enum:
; Line 1157
	mov	eax, DWORD PTR _l$[ebp]
	add	eax, 32					; 00000020H
	mov	DWORD PTR _l$[ebp], eax
; Line 1158
	mov	eax, DWORD PTR _c$[ebp]
	add	eax, 32768				; 00008000H
	mov	DWORD PTR _c$[ebp], eax
; Line 1159
	jmp	$LN28@utrie_enum
$LN26@utrie_enum:
; Line 1162
	cmp	DWORD PTR _data32$[ebp], 0
	je	SHORT $LN58@utrie_enum
	mov	eax, DWORD PTR _l$[ebp]
	and	eax, 31					; 0000001fH
	add	eax, DWORD PTR _offset$[ebp]
	mov	ecx, DWORD PTR _data32$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR tv182[ebp], edx
	jmp	SHORT $LN59@utrie_enum
$LN58@utrie_enum:
	mov	eax, DWORD PTR _l$[ebp]
	and	eax, 31					; 0000001fH
	add	eax, DWORD PTR _offset$[ebp]
	mov	ecx, DWORD PTR _idx$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	mov	DWORD PTR tv182[ebp], edx
$LN59@utrie_enum:
	mov	eax, DWORD PTR tv182[ebp]
	mov	DWORD PTR _value$[ebp], eax
; Line 1165
	mov	esi, esp
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _trie$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _offset$[ebp], eax
; Line 1166
	cmp	DWORD PTR _offset$[ebp], 0
	jg	SHORT $LN22@utrie_enum
; Line 1168
	mov	eax, DWORD PTR _prevValue$[ebp]
	cmp	eax, DWORD PTR _initialValue$[ebp]
	je	SHORT $LN21@utrie_enum
; Line 1169
	mov	eax, DWORD PTR _prev$[ebp]
	cmp	eax, DWORD PTR _c$[ebp]
	jge	SHORT $LN20@utrie_enum
; Line 1170
	mov	esi, esp
	mov	eax, DWORD PTR _prevValue$[ebp]
	push	eax
	mov	ecx, DWORD PTR _c$[ebp]
	push	ecx
	mov	edx, DWORD PTR _prev$[ebp]
	push	edx
	mov	eax, DWORD PTR _context$[ebp]
	push	eax
	call	DWORD PTR _enumRange$[ebp]
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	movsx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN20@utrie_enum
; Line 1171
	jmp	$LN54@utrie_enum
$LN20@utrie_enum:
; Line 1174
	mov	eax, DWORD PTR _nullBlock$[ebp]
	mov	DWORD PTR _prevBlock$[ebp], eax
; Line 1175
	mov	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR _prev$[ebp], eax
; Line 1176
	mov	eax, DWORD PTR _initialValue$[ebp]
	mov	DWORD PTR _prevValue$[ebp], eax
$LN21@utrie_enum:
; Line 1180
	mov	eax, DWORD PTR _c$[ebp]
	add	eax, 1024				; 00000400H
	mov	DWORD PTR _c$[ebp], eax
; Line 1181
	jmp	$LN18@utrie_enum
$LN22@utrie_enum:
; Line 1183
	mov	eax, DWORD PTR _offset$[ebp]
	mov	DWORD PTR _i$[ebp], eax
; Line 1184
	mov	eax, DWORD PTR _offset$[ebp]
	add	eax, 32					; 00000020H
	mov	DWORD PTR _offset$[ebp], eax
$LN17@utrie_enum:
; Line 1187
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _idx$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	shl	edx, 2
	mov	DWORD PTR _block$[ebp], edx
; Line 1188
	mov	eax, DWORD PTR _block$[ebp]
	cmp	eax, DWORD PTR _prevBlock$[ebp]
	jne	SHORT $LN14@utrie_enum
; Line 1190
	mov	eax, DWORD PTR _c$[ebp]
	add	eax, 32					; 00000020H
	mov	DWORD PTR _c$[ebp], eax
	jmp	$LN16@utrie_enum
$LN14@utrie_enum:
; Line 1191
	mov	eax, DWORD PTR _block$[ebp]
	cmp	eax, DWORD PTR _nullBlock$[ebp]
	jne	SHORT $LN12@utrie_enum
; Line 1193
	mov	eax, DWORD PTR _prevValue$[ebp]
	cmp	eax, DWORD PTR _initialValue$[ebp]
	je	SHORT $LN11@utrie_enum
; Line 1194
	mov	eax, DWORD PTR _prev$[ebp]
	cmp	eax, DWORD PTR _c$[ebp]
	jge	SHORT $LN10@utrie_enum
; Line 1195
	mov	esi, esp
	mov	eax, DWORD PTR _prevValue$[ebp]
	push	eax
	mov	ecx, DWORD PTR _c$[ebp]
	push	ecx
	mov	edx, DWORD PTR _prev$[ebp]
	push	edx
	mov	eax, DWORD PTR _context$[ebp]
	push	eax
	call	DWORD PTR _enumRange$[ebp]
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	movsx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN10@utrie_enum
; Line 1196
	jmp	$LN54@utrie_enum
$LN10@utrie_enum:
; Line 1199
	mov	eax, DWORD PTR _nullBlock$[ebp]
	mov	DWORD PTR _prevBlock$[ebp], eax
; Line 1200
	mov	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR _prev$[ebp], eax
; Line 1201
	mov	eax, DWORD PTR _initialValue$[ebp]
	mov	DWORD PTR _prevValue$[ebp], eax
$LN11@utrie_enum:
; Line 1203
	mov	eax, DWORD PTR _c$[ebp]
	add	eax, 32					; 00000020H
	mov	DWORD PTR _c$[ebp], eax
; Line 1204
	jmp	$LN16@utrie_enum
$LN12@utrie_enum:
; Line 1205
	mov	eax, DWORD PTR _block$[ebp]
	mov	DWORD PTR _prevBlock$[ebp], eax
; Line 1206
	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN7@utrie_enum
$LN6@utrie_enum:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN7@utrie_enum:
	cmp	DWORD PTR _j$[ebp], 32			; 00000020H
	jge	$LN16@utrie_enum
; Line 1207
	cmp	DWORD PTR _data32$[ebp], 0
	je	SHORT $LN60@utrie_enum
	mov	eax, DWORD PTR _block$[ebp]
	add	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _data32$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR tv226[ebp], edx
	jmp	SHORT $LN61@utrie_enum
$LN60@utrie_enum:
	mov	eax, DWORD PTR _block$[ebp]
	add	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _idx$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	mov	DWORD PTR tv226[ebp], edx
$LN61@utrie_enum:
	mov	esi, esp
	mov	eax, DWORD PTR tv226[ebp]
	push	eax
	mov	ecx, DWORD PTR _context$[ebp]
	push	ecx
	call	DWORD PTR _enumValue$[ebp]
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _value$[ebp], eax
; Line 1208
	mov	eax, DWORD PTR _value$[ebp]
	cmp	eax, DWORD PTR _prevValue$[ebp]
	je	SHORT $LN4@utrie_enum
; Line 1209
	mov	eax, DWORD PTR _prev$[ebp]
	cmp	eax, DWORD PTR _c$[ebp]
	jge	SHORT $LN3@utrie_enum
; Line 1210
	mov	esi, esp
	mov	eax, DWORD PTR _prevValue$[ebp]
	push	eax
	mov	ecx, DWORD PTR _c$[ebp]
	push	ecx
	mov	edx, DWORD PTR _prev$[ebp]
	push	edx
	mov	eax, DWORD PTR _context$[ebp]
	push	eax
	call	DWORD PTR _enumRange$[ebp]
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	movsx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN3@utrie_enum
; Line 1211
	jmp	SHORT $LN54@utrie_enum
$LN3@utrie_enum:
; Line 1214
	cmp	DWORD PTR _j$[ebp], 0
	jle	SHORT $LN1@utrie_enum
; Line 1216
	mov	DWORD PTR _prevBlock$[ebp], -1
$LN1@utrie_enum:
; Line 1218
	mov	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR _prev$[ebp], eax
; Line 1219
	mov	eax, DWORD PTR _value$[ebp]
	mov	DWORD PTR _prevValue$[ebp], eax
$LN4@utrie_enum:
; Line 1221
	mov	eax, DWORD PTR _c$[ebp]
	add	eax, 1
	mov	DWORD PTR _c$[ebp], eax
; Line 1222
	jmp	$LN6@utrie_enum
$LN16@utrie_enum:
; Line 1224
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _offset$[ebp]
	jl	$LN17@utrie_enum
$LN18@utrie_enum:
; Line 1227
	mov	eax, DWORD PTR _l$[ebp]
	add	eax, 1
	mov	DWORD PTR _l$[ebp], eax
; Line 1228
	jmp	$LN28@utrie_enum
$LN27@utrie_enum:
; Line 1231
	mov	esi, esp
	mov	eax, DWORD PTR _prevValue$[ebp]
	push	eax
	mov	ecx, DWORD PTR _c$[ebp]
	push	ecx
	mov	edx, DWORD PTR _prev$[ebp]
	push	edx
	mov	eax, DWORD PTR _context$[ebp]
	push	eax
	call	DWORD PTR _enumRange$[ebp]
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN54@utrie_enum:
; Line 1232
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 364				; 0000016cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_utrie_enum_56 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?enumSameValue@@YAIPBXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_value$ = 12						; size = 4
?enumSameValue@@YAIPBXI@Z PROC				; enumSameValue, COMDAT
; Line 1048
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1049
	mov	eax, DWORD PTR _value$[ebp]
; Line 1050
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?enumSameValue@@YAIPBXI@Z ENDP				; enumSameValue
_TEXT	ENDS
END
