; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\mozilla\intl\icu\source\common\uresdata.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
CONST	SEGMENT
_gEmpty16 DW	00H
	ORG $+2
_gEmpty32 DD	00H
	DD	00H
_gEmptyString DD 00H
	DW	00H
	DW	00H
_gPublicTypes DB 00H
	DB	01H
	DB	02H
	DB	03H
	DB	02H
	DB	02H
	DB	00H
	DB	07H
	DB	08H
	DB	08H
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0eH
	DB	0ffH
_gUnknownKey DD	FLAT:??_C@_00CNPNBAHC@?$AA@
_gCollationBinKey DW 025H
	DW	025H
	DW	043H
	DW	06fH
	DW	06cH
	DW	06cH
	DW	061H
	DW	074H
	DW	069H
	DW	06fH
	DW	06eH
	DW	042H
	DW	069H
	DW	06eH
	DW	00H
CONST	ENDS
PUBLIC	_res_read_56
EXTRN	_memset:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File d:\mozilla\intl\icu\source\common\uresdata.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT _res_read_56
_TEXT	SEGMENT
_formatVersion$ = -8					; size = 4
_pResData$ = 8						; size = 4
_pInfo$ = 12						; size = 4
_inBytes$ = 16						; size = 4
_length$ = 20						; size = 4
_errorCode$ = 24					; size = 4
_res_read_56 PROC					; COMDAT
; Line 240
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 243
	push	40					; 00000028H
	push	0
	mov	eax, DWORD PTR _pResData$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
; Line 244
	mov	eax, DWORD PTR _errorCode$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN2@res_read_5
; Line 245
	jmp	SHORT $LN3@res_read_5
$LN2@res_read_5:
; Line 247
	mov	eax, DWORD PTR _pInfo$[ebp]
	push	eax
	push	0
	push	0
	lea	ecx, DWORD PTR _formatVersion$[ebp]
	push	ecx
	call	_isAcceptable
	add	esp, 16					; 00000010H
	movsx	edx, al
	test	edx, edx
	jne	SHORT $LN1@res_read_5
; Line 248
	mov	eax, DWORD PTR _errorCode$[ebp]
	mov	DWORD PTR [eax], 3
; Line 249
	jmp	SHORT $LN3@res_read_5
$LN1@res_read_5:
; Line 251
	mov	eax, DWORD PTR _errorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _length$[ebp]
	push	ecx
	mov	edx, DWORD PTR _inBytes$[ebp]
	push	edx
	lea	eax, DWORD PTR _formatVersion$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pResData$[ebp]
	push	ecx
	call	_res_init
	add	esp, 20					; 00000014H
$LN3@res_read_5:
; Line 252
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@res_read_5
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN7@res_read_5:
	DD	1
	DD	$LN6@res_read_5
$LN6@res_read_5:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN5@res_read_5
$LN5@res_read_5:
	DB	102					; 00000066H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	86					; 00000056H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	0
_res_read_56 ENDP
_TEXT	ENDS
EXTRN	_memcpy:PROC
EXTRN	_uprv_checkValidMemory:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _isAcceptable
_TEXT	SEGMENT
tv138 = -193						; size = 1
_context$ = 8						; size = 4
_type$ = 12						; size = 4
_name$ = 16						; size = 4
_pInfo$ = 20						; size = 4
_isAcceptable PROC					; COMDAT
; Line 137
	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 138
	push	1
	mov	eax, DWORD PTR _pInfo$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	call	_uprv_checkValidMemory
	add	esp, 8
	push	4
	mov	ecx, DWORD PTR _pInfo$[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	mov	edx, DWORD PTR _context$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 148
	mov	eax, DWORD PTR _pInfo$[ebp]
	movzx	ecx, WORD PTR [eax]
	cmp	ecx, 20					; 00000014H
	jl	SHORT $LN4@isAcceptab
	mov	edx, DWORD PTR _pInfo$[ebp]
	movzx	eax, BYTE PTR [edx+4]
	test	eax, eax
	jne	SHORT $LN4@isAcceptab
	mov	ecx, DWORD PTR _pInfo$[ebp]
	movzx	edx, BYTE PTR [ecx+5]
	test	edx, edx
	jne	SHORT $LN4@isAcceptab
	mov	eax, DWORD PTR _pInfo$[ebp]
	movzx	ecx, BYTE PTR [eax+6]
	cmp	ecx, 2
	jne	SHORT $LN4@isAcceptab
	mov	edx, DWORD PTR _pInfo$[ebp]
	movzx	eax, BYTE PTR [edx+8]
	cmp	eax, 82					; 00000052H
	jne	SHORT $LN4@isAcceptab
	mov	ecx, DWORD PTR _pInfo$[ebp]
	movzx	edx, BYTE PTR [ecx+9]
	cmp	edx, 101				; 00000065H
	jne	SHORT $LN4@isAcceptab
	mov	eax, DWORD PTR _pInfo$[ebp]
	movzx	ecx, BYTE PTR [eax+10]
	cmp	ecx, 115				; 00000073H
	jne	SHORT $LN4@isAcceptab
	mov	edx, DWORD PTR _pInfo$[ebp]
	movzx	eax, BYTE PTR [edx+11]
	cmp	eax, 66					; 00000042H
	jne	SHORT $LN4@isAcceptab
	mov	ecx, DWORD PTR _pInfo$[ebp]
	movzx	edx, BYTE PTR [ecx+12]
	cmp	edx, 1
	jl	SHORT $LN4@isAcceptab
	mov	eax, DWORD PTR _pInfo$[ebp]
	movzx	ecx, BYTE PTR [eax+12]
	cmp	ecx, 3
	jg	SHORT $LN4@isAcceptab
	mov	BYTE PTR tv138[ebp], 1
	jmp	SHORT $LN5@isAcceptab
$LN4@isAcceptab:
	mov	BYTE PTR tv138[ebp], 0
$LN5@isAcceptab:
	mov	al, BYTE PTR tv138[ebp]
; Line 149
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_isAcceptable ENDP
_TEXT	ENDS
PUBLIC	_res_unload_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _res_init
_TEXT	SEGMENT
tv76 = -244						; size = 4
_att$9581 = -44						; size = 4
_indexLength$9572 = -32					; size = 4
_indexes$9571 = -20					; size = 4
_rootType$ = -8						; size = 4
_pResData$ = 8						; size = 4
_formatVersion$ = 12					; size = 4
_inBytes$ = 16						; size = 4
_length$ = 20						; size = 4
_errorCode$ = 24					; size = 4
_res_init PROC						; COMDAT
; Line 156
	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 160
	mov	eax, DWORD PTR _pResData$[ebp]
	mov	ecx, DWORD PTR _inBytes$[ebp]
	mov	DWORD PTR [eax+4], ecx
; Line 161
	mov	eax, DWORD PTR _pResData$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _pResData$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx+16], eax
; Line 162
	mov	eax, DWORD PTR _pResData$[ebp]
	mov	DWORD PTR [eax+8], OFFSET _gEmpty16
; Line 165
	cmp	DWORD PTR _length$[ebp], 0
	jl	SHORT $LN15@res_init
	mov	eax, DWORD PTR _formatVersion$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 1
	jne	SHORT $LN18@res_init
	mov	edx, DWORD PTR _formatVersion$[ebp]
	movzx	eax, BYTE PTR [edx+1]
	test	eax, eax
	jne	SHORT $LN18@res_init
	mov	DWORD PTR tv76[ebp], 1
	jmp	SHORT $LN19@res_init
$LN18@res_init:
	mov	DWORD PTR tv76[ebp], 6
$LN19@res_init:
	mov	eax, DWORD PTR _length$[ebp]
	cdq
	and	edx, 3
	add	eax, edx
	sar	eax, 2
	cmp	eax, DWORD PTR tv76[ebp]
	jge	SHORT $LN15@res_init
; Line 166
	mov	eax, DWORD PTR _errorCode$[ebp]
	mov	DWORD PTR [eax], 3
; Line 167
	mov	eax, DWORD PTR _pResData$[ebp]
	push	eax
	call	_res_unload_56
	add	esp, 4
; Line 168
	jmp	$LN16@res_init
$LN15@res_init:
; Line 172
	mov	eax, DWORD PTR _pResData$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	shr	ecx, 28					; 0000001cH
	mov	DWORD PTR _rootType$[ebp], ecx
; Line 173
	cmp	DWORD PTR _rootType$[ebp], 2
	je	SHORT $LN14@res_init
	cmp	DWORD PTR _rootType$[ebp], 5
	je	SHORT $LN14@res_init
	cmp	DWORD PTR _rootType$[ebp], 4
	je	SHORT $LN14@res_init
; Line 174
	mov	eax, DWORD PTR _errorCode$[ebp]
	mov	DWORD PTR [eax], 3
; Line 175
	mov	eax, DWORD PTR _pResData$[ebp]
	push	eax
	call	_res_unload_56
	add	esp, 4
; Line 176
	jmp	$LN16@res_init
$LN14@res_init:
; Line 179
	mov	eax, DWORD PTR _formatVersion$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 1
	jne	SHORT $LN13@res_init
	mov	eax, DWORD PTR _formatVersion$[ebp]
	movzx	ecx, BYTE PTR [eax+1]
	test	ecx, ecx
	jne	SHORT $LN13@res_init
; Line 180
	mov	eax, DWORD PTR _pResData$[ebp]
	mov	DWORD PTR [eax+20], 65536		; 00010000H
; Line 181
	jmp	$LN12@res_init
$LN13@res_init:
; Line 183
	mov	eax, DWORD PTR _pResData$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 4
	mov	DWORD PTR _indexes$9571[ebp], ecx
; Line 184
	mov	eax, DWORD PTR _indexes$9571[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, 255				; 000000ffH
	mov	DWORD PTR _indexLength$9572[ebp], ecx
; Line 185
	cmp	DWORD PTR _indexLength$9572[ebp], 4
	jg	SHORT $LN11@res_init
; Line 186
	mov	eax, DWORD PTR _errorCode$[ebp]
	mov	DWORD PTR [eax], 3
; Line 187
	mov	eax, DWORD PTR _pResData$[ebp]
	push	eax
	call	_res_unload_56
	add	esp, 4
; Line 188
	jmp	$LN16@res_init
$LN11@res_init:
; Line 193
	cmp	DWORD PTR _length$[ebp], 0
	jl	SHORT $LN10@res_init
	mov	eax, DWORD PTR _indexLength$9572[ebp]
	lea	ecx, DWORD PTR [eax*4+4]
	cmp	DWORD PTR _length$[ebp], ecx
	jl	SHORT $LN9@res_init
	mov	eax, DWORD PTR _indexes$9571[ebp]
	mov	ecx, DWORD PTR [eax+12]
	shl	ecx, 2
	cmp	DWORD PTR _length$[ebp], ecx
	jge	SHORT $LN10@res_init
$LN9@res_init:
; Line 194
	mov	eax, DWORD PTR _errorCode$[ebp]
	mov	DWORD PTR [eax], 3
; Line 195
	mov	eax, DWORD PTR _pResData$[ebp]
	push	eax
	call	_res_unload_56
	add	esp, 4
; Line 196
	jmp	$LN16@res_init
$LN10@res_init:
; Line 198
	mov	eax, DWORD PTR _indexLength$9572[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _indexes$9571[ebp]
	cmp	DWORD PTR [ecx+4], eax
	jle	SHORT $LN8@res_init
; Line 199
	mov	eax, DWORD PTR _indexes$9571[ebp]
	mov	ecx, DWORD PTR [eax+4]
	shl	ecx, 2
	mov	edx, DWORD PTR _pResData$[ebp]
	mov	DWORD PTR [edx+20], ecx
$LN8@res_init:
; Line 201
	mov	eax, DWORD PTR _formatVersion$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 3
	jl	SHORT $LN7@res_init
; Line 206
	mov	eax, DWORD PTR _indexes$9571[ebp]
	mov	ecx, DWORD PTR [eax]
	shr	ecx, 8
	mov	edx, DWORD PTR _pResData$[ebp]
	mov	DWORD PTR [edx+28], ecx
$LN7@res_init:
; Line 208
	cmp	DWORD PTR _indexLength$9572[ebp], 5
	jle	SHORT $LN6@res_init
; Line 209
	mov	eax, DWORD PTR _indexes$9571[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _att$9581[ebp], ecx
; Line 210
	mov	eax, DWORD PTR _att$9581[ebp]
	and	eax, 1
	mov	ecx, DWORD PTR _pResData$[ebp]
	mov	BYTE PTR [ecx+36], al
; Line 211
	mov	eax, DWORD PTR _att$9581[ebp]
	and	eax, 2
	setne	cl
	mov	edx, DWORD PTR _pResData$[ebp]
	mov	BYTE PTR [edx+37], cl
; Line 212
	mov	eax, DWORD PTR _att$9581[ebp]
	and	eax, 4
	setne	cl
	mov	edx, DWORD PTR _pResData$[ebp]
	mov	BYTE PTR [edx+38], cl
; Line 213
	mov	eax, DWORD PTR _att$9581[ebp]
	and	eax, 61440				; 0000f000H
	shl	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _pResData$[ebp]
	or	eax, DWORD PTR [ecx+28]
	mov	edx, DWORD PTR _pResData$[ebp]
	mov	DWORD PTR [edx+28], eax
; Line 214
	mov	eax, DWORD PTR _att$9581[ebp]
	shr	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _pResData$[ebp]
	mov	DWORD PTR [ecx+32], eax
$LN6@res_init:
; Line 216
	mov	eax, DWORD PTR _pResData$[ebp]
	movsx	ecx, BYTE PTR [eax+37]
	test	ecx, ecx
	jne	SHORT $LN4@res_init
	mov	eax, DWORD PTR _pResData$[ebp]
	movsx	ecx, BYTE PTR [eax+38]
	test	ecx, ecx
	je	SHORT $LN5@res_init
$LN4@res_init:
	cmp	DWORD PTR _indexLength$9572[ebp], 7
	jg	SHORT $LN5@res_init
; Line 217
	mov	eax, DWORD PTR _errorCode$[ebp]
	mov	DWORD PTR [eax], 3
; Line 218
	mov	eax, DWORD PTR _pResData$[ebp]
	push	eax
	call	_res_unload_56
	add	esp, 4
; Line 219
	jmp	SHORT $LN16@res_init
$LN5@res_init:
; Line 223
	cmp	DWORD PTR _indexLength$9572[ebp], 6
	jle	SHORT $LN12@res_init
	mov	eax, DWORD PTR _indexes$9571[ebp]
	mov	ecx, DWORD PTR _indexes$9571[ebp]
	mov	edx, DWORD PTR [eax+24]
	cmp	edx, DWORD PTR [ecx+4]
	jle	SHORT $LN12@res_init
; Line 224
	mov	eax, DWORD PTR _indexes$9571[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _pResData$[ebp]
	mov	eax, DWORD PTR [edx+4]
	lea	ecx, DWORD PTR [eax+ecx*4]
	mov	edx, DWORD PTR _pResData$[ebp]
	mov	DWORD PTR [edx+8], ecx
$LN12@res_init:
; Line 228
	mov	eax, DWORD PTR _formatVersion$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 1
	je	SHORT $LN1@res_init
	mov	eax, 1
	test	eax, eax
	je	SHORT $LN16@res_init
$LN1@res_init:
; Line 233
	mov	eax, DWORD PTR _pResData$[ebp]
	mov	BYTE PTR [eax+39], 1
$LN16@res_init:
; Line 235
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_res_init ENDP
_TEXT	ENDS
PUBLIC	??_C@_03FFIDGLAK@res?$AA@			; `string'
PUBLIC	_res_load_56
EXTRN	_udata_getMemory_56:PROC
EXTRN	_udata_openChoice_56:PROC
;	COMDAT ??_C@_03FFIDGLAK@res?$AA@
CONST	SEGMENT
??_C@_03FFIDGLAK@res?$AA@ DB 'res', 00H			; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT _res_load_56
_TEXT	SEGMENT
_formatVersion$ = -8					; size = 4
_pResData$ = 8						; size = 4
_path$ = 12						; size = 4
_name$ = 16						; size = 4
_errorCode$ = 20					; size = 4
_res_load_56 PROC					; COMDAT
; Line 256
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 259
	push	40					; 00000028H
	push	0
	mov	eax, DWORD PTR _pResData$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
; Line 262
	mov	eax, DWORD PTR _errorCode$[ebp]
	push	eax
	lea	ecx, DWORD PTR _formatVersion$[ebp]
	push	ecx
	push	OFFSET _isAcceptable
	mov	edx, DWORD PTR _name$[ebp]
	push	edx
	push	OFFSET ??_C@_03FFIDGLAK@res?$AA@
	mov	eax, DWORD PTR _path$[ebp]
	push	eax
	call	_udata_openChoice_56
	add	esp, 24					; 00000018H
	mov	ecx, DWORD PTR _pResData$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 263
	mov	eax, DWORD PTR _errorCode$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN1@res_load_5
; Line 264
	jmp	SHORT $LN2@res_load_5
$LN1@res_load_5:
; Line 268
	mov	eax, DWORD PTR _errorCode$[ebp]
	push	eax
	push	-1
	mov	ecx, DWORD PTR _pResData$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_udata_getMemory_56
	add	esp, 4
	push	eax
	lea	eax, DWORD PTR _formatVersion$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pResData$[ebp]
	push	ecx
	call	_res_init
	add	esp, 20					; 00000014H
$LN2@res_load_5:
; Line 269
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@res_load_5
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN6@res_load_5:
	DD	1
	DD	$LN5@res_load_5
$LN5@res_load_5:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN4@res_load_5
$LN4@res_load_5:
	DB	102					; 00000066H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	86					; 00000056H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	0
_res_load_56 ENDP
_TEXT	ENDS
EXTRN	_udata_close_56:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _res_unload_56
_TEXT	SEGMENT
_pResData$ = 8						; size = 4
_res_unload_56 PROC					; COMDAT
; Line 272
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 273
	mov	eax, DWORD PTR _pResData$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@res_unload
; Line 274
	mov	eax, DWORD PTR _pResData$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_udata_close_56
	add	esp, 4
; Line 275
	mov	eax, DWORD PTR _pResData$[ebp]
	mov	DWORD PTR [eax], 0
$LN2@res_unload:
; Line 277
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_res_unload_56 ENDP
_TEXT	ENDS
PUBLIC	_res_getPublicType_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _res_getPublicType_56
_TEXT	SEGMENT
_res$ = 8						; size = 4
_res_getPublicType_56 PROC				; COMDAT
; Line 302
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 303
	mov	eax, DWORD PTR _res$[ebp]
	shr	eax, 28					; 0000001cH
	movsx	eax, BYTE PTR _gPublicTypes[eax]
; Line 304
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_res_getPublicType_56 ENDP
_TEXT	ENDS
PUBLIC	_res_getString_56
EXTRN	_u_strlen_56:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _res_getString_56
_TEXT	SEGMENT
tv136 = -256						; size = 4
_p32$9661 = -56						; size = 4
_first$9647 = -44					; size = 4
_length$ = -32						; size = 4
_offset$ = -20						; size = 4
_p$ = -8						; size = 4
_pResData$ = 8						; size = 4
_res$ = 12						; size = 4
_pLength$ = 16						; size = 4
_res_getString_56 PROC					; COMDAT
; Line 307
	push	ebp
	mov	ebp, esp
	sub	esp, 256				; 00000100H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-256]
	mov	ecx, 64					; 00000040H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 309
	mov	eax, DWORD PTR _res$[ebp]
	and	eax, 268435455				; 0fffffffH
	mov	DWORD PTR _offset$[ebp], eax
; Line 311
	mov	eax, DWORD PTR _res$[ebp]
	shr	eax, 28					; 0000001cH
	cmp	eax, 6
	jne	$LN13@res_getStr
; Line 313
	mov	eax, DWORD PTR _pResData$[ebp]
	mov	ecx, DWORD PTR _offset$[ebp]
	cmp	ecx, DWORD PTR [eax+28]
	jae	SHORT $LN12@res_getStr
; Line 314
	mov	eax, DWORD PTR _pResData$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR _offset$[ebp]
	lea	eax, DWORD PTR [ecx+edx*2]
	mov	DWORD PTR _p$[ebp], eax
; Line 315
	jmp	SHORT $LN11@res_getStr
$LN12@res_getStr:
; Line 316
	mov	eax, DWORD PTR _pResData$[ebp]
	mov	ecx, DWORD PTR _offset$[ebp]
	sub	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _pResData$[ebp]
	mov	eax, DWORD PTR [edx+8]
	lea	ecx, DWORD PTR [eax+ecx*2]
	mov	DWORD PTR _p$[ebp], ecx
$LN11@res_getStr:
; Line 318
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, WORD PTR [eax]
	mov	DWORD PTR _first$9647[ebp], ecx
; Line 319
	mov	eax, DWORD PTR _first$9647[ebp]
	and	eax, -1024				; fffffc00H
	cmp	eax, 56320				; 0000dc00H
	je	SHORT $LN10@res_getStr
; Line 320
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_u_strlen_56
	add	esp, 4
	mov	DWORD PTR _length$[ebp], eax
	jmp	SHORT $LN9@res_getStr
$LN10@res_getStr:
; Line 321
	cmp	DWORD PTR _first$9647[ebp], 57327	; 0000dfefH
	jge	SHORT $LN8@res_getStr
; Line 322
	mov	eax, DWORD PTR _first$9647[ebp]
	and	eax, 1023				; 000003ffH
	mov	DWORD PTR _length$[ebp], eax
; Line 323
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 2
	mov	DWORD PTR _p$[ebp], eax
	jmp	SHORT $LN9@res_getStr
$LN8@res_getStr:
; Line 324
	cmp	DWORD PTR _first$9647[ebp], 57343	; 0000dfffH
	jge	SHORT $LN6@res_getStr
; Line 325
	mov	eax, DWORD PTR _first$9647[ebp]
	sub	eax, 57327				; 0000dfefH
	shl	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, WORD PTR [ecx+2]
	or	eax, edx
	mov	DWORD PTR _length$[ebp], eax
; Line 326
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 4
	mov	DWORD PTR _p$[ebp], eax
; Line 327
	jmp	SHORT $LN9@res_getStr
$LN6@res_getStr:
; Line 328
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, WORD PTR [eax+2]
	shl	ecx, 16					; 00000010H
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, WORD PTR [edx+4]
	or	ecx, eax
	mov	DWORD PTR _length$[ebp], ecx
; Line 329
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 6
	mov	DWORD PTR _p$[ebp], eax
$LN9@res_getStr:
; Line 330
	jmp	SHORT $LN4@res_getStr
$LN13@res_getStr:
; Line 331
	mov	eax, DWORD PTR _res$[ebp]
	cmp	eax, DWORD PTR _offset$[ebp]
	jne	SHORT $LN3@res_getStr
; Line 332
	cmp	DWORD PTR _res$[ebp], 0
	jne	SHORT $LN16@res_getStr
	mov	DWORD PTR tv136[ebp], OFFSET _gEmptyString
	jmp	SHORT $LN17@res_getStr
$LN16@res_getStr:
	mov	eax, DWORD PTR _pResData$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _res$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR tv136[ebp], eax
$LN17@res_getStr:
	mov	ecx, DWORD PTR tv136[ebp]
	mov	DWORD PTR _p32$9661[ebp], ecx
; Line 333
	mov	eax, DWORD PTR _p32$9661[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _length$[ebp], ecx
	mov	edx, DWORD PTR _p32$9661[ebp]
	add	edx, 4
	mov	DWORD PTR _p32$9661[ebp], edx
; Line 334
	mov	eax, DWORD PTR _p32$9661[ebp]
	mov	DWORD PTR _p$[ebp], eax
; Line 335
	jmp	SHORT $LN4@res_getStr
$LN3@res_getStr:
; Line 336
	mov	DWORD PTR _p$[ebp], 0
; Line 337
	mov	DWORD PTR _length$[ebp], 0
$LN4@res_getStr:
; Line 339
	cmp	DWORD PTR _pLength$[ebp], 0
	je	SHORT $LN1@res_getStr
; Line 340
	mov	eax, DWORD PTR _pLength$[ebp]
	mov	ecx, DWORD PTR _length$[ebp]
	mov	DWORD PTR [eax], ecx
$LN1@res_getStr:
; Line 342
	mov	eax, DWORD PTR _p$[ebp]
; Line 343
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 256				; 00000100H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_res_getString_56 ENDP
_TEXT	ENDS
PUBLIC	_res_getAlias_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _res_getAlias_56
_TEXT	SEGMENT
tv71 = -244						; size = 4
_p32$9678 = -44						; size = 4
_length$ = -32						; size = 4
_offset$ = -20						; size = 4
_p$ = -8						; size = 4
_pResData$ = 8						; size = 4
_res$ = 12						; size = 4
_pLength$ = 16						; size = 4
_res_getAlias_56 PROC					; COMDAT
; Line 346
	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 348
	mov	eax, DWORD PTR _res$[ebp]
	and	eax, 268435455				; 0fffffffH
	mov	DWORD PTR _offset$[ebp], eax
; Line 350
	mov	eax, DWORD PTR _res$[ebp]
	shr	eax, 28					; 0000001cH
	cmp	eax, 3
	jne	SHORT $LN3@res_getAli
; Line 351
	cmp	DWORD PTR _offset$[ebp], 0
	jne	SHORT $LN6@res_getAli
	mov	DWORD PTR tv71[ebp], OFFSET _gEmptyString
	jmp	SHORT $LN7@res_getAli
$LN6@res_getAli:
	mov	eax, DWORD PTR _pResData$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _offset$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR tv71[ebp], eax
$LN7@res_getAli:
	mov	ecx, DWORD PTR tv71[ebp]
	mov	DWORD PTR _p32$9678[ebp], ecx
; Line 352
	mov	eax, DWORD PTR _p32$9678[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _length$[ebp], ecx
	mov	edx, DWORD PTR _p32$9678[ebp]
	add	edx, 4
	mov	DWORD PTR _p32$9678[ebp], edx
; Line 353
	mov	eax, DWORD PTR _p32$9678[ebp]
	mov	DWORD PTR _p$[ebp], eax
; Line 354
	jmp	SHORT $LN2@res_getAli
$LN3@res_getAli:
; Line 355
	mov	DWORD PTR _p$[ebp], 0
; Line 356
	mov	DWORD PTR _length$[ebp], 0
$LN2@res_getAli:
; Line 358
	cmp	DWORD PTR _pLength$[ebp], 0
	je	SHORT $LN1@res_getAli
; Line 359
	mov	eax, DWORD PTR _pLength$[ebp]
	mov	ecx, DWORD PTR _length$[ebp]
	mov	DWORD PTR [eax], ecx
$LN1@res_getAli:
; Line 361
	mov	eax, DWORD PTR _p$[ebp]
; Line 362
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_res_getAlias_56 ENDP
_TEXT	ENDS
PUBLIC	_res_getBinary_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _res_getBinary_56
_TEXT	SEGMENT
tv71 = -244						; size = 4
_p32$9695 = -44						; size = 4
_length$ = -32						; size = 4
_offset$ = -20						; size = 4
_p$ = -8						; size = 4
_pResData$ = 8						; size = 4
_res$ = 12						; size = 4
_pLength$ = 16						; size = 4
_res_getBinary_56 PROC					; COMDAT
; Line 365
	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 367
	mov	eax, DWORD PTR _res$[ebp]
	and	eax, 268435455				; 0fffffffH
	mov	DWORD PTR _offset$[ebp], eax
; Line 369
	mov	eax, DWORD PTR _res$[ebp]
	shr	eax, 28					; 0000001cH
	cmp	eax, 1
	jne	SHORT $LN3@res_getBin
; Line 370
	cmp	DWORD PTR _offset$[ebp], 0
	jne	SHORT $LN6@res_getBin
	mov	DWORD PTR tv71[ebp], OFFSET _gEmpty32
	jmp	SHORT $LN7@res_getBin
$LN6@res_getBin:
	mov	eax, DWORD PTR _pResData$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _offset$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR tv71[ebp], eax
$LN7@res_getBin:
	mov	ecx, DWORD PTR tv71[ebp]
	mov	DWORD PTR _p32$9695[ebp], ecx
; Line 371
	mov	eax, DWORD PTR _p32$9695[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _length$[ebp], ecx
	mov	edx, DWORD PTR _p32$9695[ebp]
	add	edx, 4
	mov	DWORD PTR _p32$9695[ebp], edx
; Line 372
	mov	eax, DWORD PTR _p32$9695[ebp]
	mov	DWORD PTR _p$[ebp], eax
; Line 373
	jmp	SHORT $LN2@res_getBin
$LN3@res_getBin:
; Line 374
	mov	DWORD PTR _p$[ebp], 0
; Line 375
	mov	DWORD PTR _length$[ebp], 0
$LN2@res_getBin:
; Line 377
	cmp	DWORD PTR _pLength$[ebp], 0
	je	SHORT $LN1@res_getBin
; Line 378
	mov	eax, DWORD PTR _pLength$[ebp]
	mov	ecx, DWORD PTR _length$[ebp]
	mov	DWORD PTR [eax], ecx
$LN1@res_getBin:
; Line 380
	mov	eax, DWORD PTR _p$[ebp]
; Line 381
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_res_getBinary_56 ENDP
_TEXT	ENDS
PUBLIC	_res_getIntVector_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _res_getIntVector_56
_TEXT	SEGMENT
tv71 = -232						; size = 4
_length$ = -32						; size = 4
_offset$ = -20						; size = 4
_p$ = -8						; size = 4
_pResData$ = 8						; size = 4
_res$ = 12						; size = 4
_pLength$ = 16						; size = 4
_res_getIntVector_56 PROC				; COMDAT
; Line 385
	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 387
	mov	eax, DWORD PTR _res$[ebp]
	and	eax, 268435455				; 0fffffffH
	mov	DWORD PTR _offset$[ebp], eax
; Line 389
	mov	eax, DWORD PTR _res$[ebp]
	shr	eax, 28					; 0000001cH
	cmp	eax, 14					; 0000000eH
	jne	SHORT $LN3@res_getInt
; Line 390
	cmp	DWORD PTR _offset$[ebp], 0
	jne	SHORT $LN6@res_getInt
	mov	DWORD PTR tv71[ebp], OFFSET _gEmpty32
	jmp	SHORT $LN7@res_getInt
$LN6@res_getInt:
	mov	eax, DWORD PTR _pResData$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _offset$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR tv71[ebp], eax
$LN7@res_getInt:
	mov	ecx, DWORD PTR tv71[ebp]
	mov	DWORD PTR _p$[ebp], ecx
; Line 391
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _length$[ebp], ecx
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 4
	mov	DWORD PTR _p$[ebp], edx
; Line 392
	jmp	SHORT $LN2@res_getInt
$LN3@res_getInt:
; Line 393
	mov	DWORD PTR _p$[ebp], 0
; Line 394
	mov	DWORD PTR _length$[ebp], 0
$LN2@res_getInt:
; Line 396
	cmp	DWORD PTR _pLength$[ebp], 0
	je	SHORT $LN1@res_getInt
; Line 397
	mov	eax, DWORD PTR _pLength$[ebp]
	mov	ecx, DWORD PTR _length$[ebp]
	mov	DWORD PTR [eax], ecx
$LN1@res_getInt:
; Line 399
	mov	eax, DWORD PTR _p$[ebp]
; Line 400
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_res_getIntVector_56 ENDP
_TEXT	ENDS
PUBLIC	_res_countArrayItems_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _res_countArrayItems_56
_TEXT	SEGMENT
tv77 = -208						; size = 4
tv71 = -208						; size = 4
tv66 = -208						; size = 4
_offset$ = -8						; size = 4
_pResData$ = 8						; size = 4
_res$ = 12						; size = 4
_res_countArrayItems_56 PROC				; COMDAT
; Line 403
	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 404
	mov	eax, DWORD PTR _res$[ebp]
	and	eax, 268435455				; 0fffffffH
	mov	DWORD PTR _offset$[ebp], eax
; Line 405
	mov	eax, DWORD PTR _res$[ebp]
	shr	eax, 28					; 0000001cH
	mov	DWORD PTR tv66[ebp], eax
	cmp	DWORD PTR tv66[ebp], 14			; 0000000eH
	ja	$LN1@res_countA
	mov	ecx, DWORD PTR tv66[ebp]
	movzx	edx, BYTE PTR $LN14@res_countA[ecx]
	jmp	DWORD PTR $LN15@res_countA[edx*4]
$LN5@res_countA:
; Line 412
	mov	eax, 1
	jmp	SHORT $LN8@res_countA
$LN4@res_countA:
; Line 415
	cmp	DWORD PTR _offset$[ebp], 0
	jne	SHORT $LN10@res_countA
	mov	DWORD PTR tv71[ebp], 0
	jmp	SHORT $LN11@res_countA
$LN10@res_countA:
	mov	eax, DWORD PTR _pResData$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _offset$[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR tv71[ebp], eax
$LN11@res_countA:
	mov	eax, DWORD PTR tv71[ebp]
	jmp	SHORT $LN8@res_countA
$LN3@res_countA:
; Line 417
	cmp	DWORD PTR _offset$[ebp], 0
	jne	SHORT $LN12@res_countA
	mov	DWORD PTR tv77[ebp], 0
	jmp	SHORT $LN13@res_countA
$LN12@res_countA:
	mov	eax, DWORD PTR _pResData$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _offset$[ebp]
	movzx	eax, WORD PTR [ecx+edx*4]
	mov	DWORD PTR tv77[ebp], eax
$LN13@res_countA:
	mov	eax, DWORD PTR tv77[ebp]
	jmp	SHORT $LN8@res_countA
$LN2@res_countA:
; Line 420
	mov	eax, DWORD PTR _pResData$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _offset$[ebp]
	movzx	eax, WORD PTR [ecx+edx*2]
	jmp	SHORT $LN8@res_countA
$LN1@res_countA:
; Line 422
	xor	eax, eax
$LN8@res_countA:
; Line 424
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN15@res_countA:
	DD	$LN5@res_countA
	DD	$LN3@res_countA
	DD	$LN4@res_countA
	DD	$LN2@res_countA
	DD	$LN1@res_countA
$LN14@res_countA:
	DB	0
	DB	0
	DB	1
	DB	0
	DB	2
	DB	3
	DB	0
	DB	0
	DB	2
	DB	3
	DB	4
	DB	4
	DB	4
	DB	4
	DB	0
_res_countArrayItems_56 ENDP
_TEXT	ENDS
PUBLIC	_res_getTableItemByKey_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _res_getTableItemByKey_56
_TEXT	SEGMENT
tv68 = -280						; size = 4
_p$9777 = -80						; size = 4
_p$9773 = -68						; size = 4
_p32$9770 = -56						; size = 4
_p$9767 = -44						; size = 4
_idx$ = -32						; size = 4
_length$ = -20						; size = 4
_offset$ = -8						; size = 4
_pResData$ = 8						; size = 4
_table$ = 12						; size = 4
_indexR$ = 16						; size = 4
_key$ = 20						; size = 4
_res_getTableItemByKey_56 PROC				; COMDAT
; Line 440
	push	ebp
	mov	ebp, esp
	sub	esp, 280				; 00000118H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-280]
	mov	ecx, 70					; 00000046H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 441
	mov	eax, DWORD PTR _table$[ebp]
	and	eax, 268435455				; 0fffffffH
	mov	DWORD PTR _offset$[ebp], eax
; Line 444
	cmp	DWORD PTR _key$[ebp], 0
	je	SHORT $LN12@res_getTab
	mov	eax, DWORD PTR _key$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN13@res_getTab
$LN12@res_getTab:
; Line 445
	or	eax, -1
	jmp	$LN14@res_getTab
$LN13@res_getTab:
; Line 447
	mov	eax, DWORD PTR _table$[ebp]
	shr	eax, 28					; 0000001cH
	mov	DWORD PTR tv68[ebp], eax
	cmp	DWORD PTR tv68[ebp], 2
	je	SHORT $LN9@res_getTab
	cmp	DWORD PTR tv68[ebp], 4
	je	$LN4@res_getTab
	cmp	DWORD PTR tv68[ebp], 5
	je	$LN6@res_getTab
	jmp	$LN10@res_getTab
$LN9@res_getTab:
; Line 449
	cmp	DWORD PTR _offset$[ebp], 0
	je	SHORT $LN8@res_getTab
; Line 450
	mov	eax, DWORD PTR _pResData$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _offset$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR _p$9767[ebp], eax
; Line 451
	mov	eax, DWORD PTR _p$9767[ebp]
	movzx	ecx, WORD PTR [eax]
	mov	DWORD PTR _length$[ebp], ecx
	mov	edx, DWORD PTR _p$9767[ebp]
	add	edx, 2
	mov	DWORD PTR _p$9767[ebp], edx
; Line 452
	mov	eax, DWORD PTR _key$[ebp]
	push	eax
	mov	ecx, DWORD PTR _key$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _length$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$9767[ebp]
	push	ecx
	mov	edx, DWORD PTR _pResData$[ebp]
	push	edx
	call	__res_findTableItem
	add	esp, 20					; 00000014H
	mov	DWORD PTR _idx$[ebp], eax
	mov	eax, DWORD PTR _indexR$[ebp]
	mov	ecx, DWORD PTR _idx$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 453
	cmp	DWORD PTR _idx$[ebp], 0
	jl	SHORT $LN8@res_getTab
; Line 454
	mov	eax, DWORD PTR _length$[ebp]
	mov	ecx, DWORD PTR _p$9767[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	eax, DWORD PTR _length$[ebp]
	not	eax
	and	eax, 1
	lea	ecx, DWORD PTR [edx+eax*2]
	mov	DWORD PTR _p32$9770[ebp], ecx
; Line 455
	mov	eax, DWORD PTR _idx$[ebp]
	mov	ecx, DWORD PTR _p32$9770[ebp]
	mov	eax, DWORD PTR [ecx+eax*4]
	jmp	$LN14@res_getTab
$LN8@res_getTab:
; Line 458
	jmp	$LN10@res_getTab
$LN6@res_getTab:
; Line 461
	mov	eax, DWORD PTR _pResData$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _offset$[ebp]
	lea	eax, DWORD PTR [ecx+edx*2]
	mov	DWORD PTR _p$9773[ebp], eax
; Line 462
	mov	eax, DWORD PTR _p$9773[ebp]
	movzx	ecx, WORD PTR [eax]
	mov	DWORD PTR _length$[ebp], ecx
	mov	edx, DWORD PTR _p$9773[ebp]
	add	edx, 2
	mov	DWORD PTR _p$9773[ebp], edx
; Line 463
	mov	eax, DWORD PTR _key$[ebp]
	push	eax
	mov	ecx, DWORD PTR _key$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _length$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$9773[ebp]
	push	ecx
	mov	edx, DWORD PTR _pResData$[ebp]
	push	edx
	call	__res_findTableItem
	add	esp, 20					; 00000014H
	mov	DWORD PTR _idx$[ebp], eax
	mov	eax, DWORD PTR _indexR$[ebp]
	mov	ecx, DWORD PTR _idx$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 464
	cmp	DWORD PTR _idx$[ebp], 0
	jl	SHORT $LN5@res_getTab
; Line 465
	mov	eax, DWORD PTR _length$[ebp]
	add	eax, DWORD PTR _idx$[ebp]
	mov	ecx, DWORD PTR _p$9773[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	push	edx
	mov	eax, DWORD PTR _pResData$[ebp]
	push	eax
	call	_makeResourceFrom16
	add	esp, 8
	jmp	SHORT $LN14@res_getTab
$LN5@res_getTab:
; Line 467
	jmp	SHORT $LN10@res_getTab
$LN4@res_getTab:
; Line 470
	cmp	DWORD PTR _offset$[ebp], 0
	je	SHORT $LN10@res_getTab
; Line 471
	mov	eax, DWORD PTR _pResData$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _offset$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR _p$9777[ebp], eax
; Line 472
	mov	eax, DWORD PTR _p$9777[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _length$[ebp], ecx
	mov	edx, DWORD PTR _p$9777[ebp]
	add	edx, 4
	mov	DWORD PTR _p$9777[ebp], edx
; Line 473
	mov	eax, DWORD PTR _key$[ebp]
	push	eax
	mov	ecx, DWORD PTR _key$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _length$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$9777[ebp]
	push	ecx
	mov	edx, DWORD PTR _pResData$[ebp]
	push	edx
	call	__res_findTable32Item
	add	esp, 20					; 00000014H
	mov	DWORD PTR _idx$[ebp], eax
	mov	eax, DWORD PTR _indexR$[ebp]
	mov	ecx, DWORD PTR _idx$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 474
	cmp	DWORD PTR _idx$[ebp], 0
	jl	SHORT $LN10@res_getTab
; Line 475
	mov	eax, DWORD PTR _length$[ebp]
	add	eax, DWORD PTR _idx$[ebp]
	mov	ecx, DWORD PTR _p$9777[ebp]
	mov	eax, DWORD PTR [ecx+eax*4]
	jmp	SHORT $LN14@res_getTab
$LN10@res_getTab:
; Line 483
	or	eax, -1
$LN14@res_getTab:
; Line 484
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 280				; 00000118H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_res_getTableItemByKey_56 ENDP
_TEXT	ENDS
EXTRN	_strcmp:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __res_findTableItem
_TEXT	SEGMENT
tv84 = -256						; size = 4
_result$ = -56						; size = 4
_limit$ = -44						; size = 4
_start$ = -32						; size = 4
_mid$ = -20						; size = 4
_tableKey$ = -8						; size = 4
_pResData$ = 8						; size = 4
_keyOffsets$ = 12					; size = 4
_length$ = 16						; size = 4
_key$ = 20						; size = 4
_realKey$ = 24						; size = 4
__res_findTableItem PROC				; COMDAT
; Line 72
	push	ebp
	mov	ebp, esp
	sub	esp, 256				; 00000100H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-256]
	mov	ecx, 64					; 00000040H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 78
	mov	DWORD PTR _start$[ebp], 0
; Line 79
	mov	eax, DWORD PTR _length$[ebp]
	mov	DWORD PTR _limit$[ebp], eax
$LN8@res_findTa:
; Line 80
	mov	eax, DWORD PTR _start$[ebp]
	cmp	eax, DWORD PTR _limit$[ebp]
	jge	$LN7@res_findTa
; Line 81
	mov	eax, DWORD PTR _start$[ebp]
	add	eax, DWORD PTR _limit$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _mid$[ebp], eax
; Line 82
	mov	eax, DWORD PTR _mid$[ebp]
	mov	ecx, DWORD PTR _keyOffsets$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	mov	eax, DWORD PTR _pResData$[ebp]
	cmp	edx, DWORD PTR [eax+20]
	jge	SHORT $LN11@res_findTa
	mov	ecx, DWORD PTR _mid$[ebp]
	mov	edx, DWORD PTR _keyOffsets$[ebp]
	movzx	eax, WORD PTR [edx+ecx*2]
	mov	ecx, DWORD PTR _pResData$[ebp]
	add	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR tv84[ebp], eax
	jmp	SHORT $LN12@res_findTa
$LN11@res_findTa:
	mov	edx, DWORD PTR _mid$[ebp]
	mov	eax, DWORD PTR _keyOffsets$[ebp]
	movzx	ecx, WORD PTR [eax+edx*2]
	mov	edx, DWORD PTR _pResData$[ebp]
	mov	eax, DWORD PTR [edx+12]
	add	eax, ecx
	mov	ecx, DWORD PTR _pResData$[ebp]
	sub	eax, DWORD PTR [ecx+20]
	mov	DWORD PTR tv84[ebp], eax
$LN12@res_findTa:
	mov	edx, DWORD PTR tv84[ebp]
	mov	DWORD PTR _tableKey$[ebp], edx
; Line 83
	mov	eax, DWORD PTR _pResData$[ebp]
	movsx	ecx, BYTE PTR [eax+39]
	test	ecx, ecx
	je	SHORT $LN6@res_findTa
; Line 84
	mov	eax, DWORD PTR _tableKey$[ebp]
	push	eax
	mov	ecx, DWORD PTR _key$[ebp]
	push	ecx
	call	_strcmp
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
; Line 85
	jmp	SHORT $LN5@res_findTa
$LN6@res_findTa:
; Line 86
	mov	eax, DWORD PTR _tableKey$[ebp]
	push	eax
	mov	ecx, DWORD PTR _key$[ebp]
	push	ecx
	call	_strcmp
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
$LN5@res_findTa:
; Line 88
	cmp	DWORD PTR _result$[ebp], 0
	jge	SHORT $LN4@res_findTa
; Line 89
	mov	eax, DWORD PTR _mid$[ebp]
	mov	DWORD PTR _limit$[ebp], eax
	jmp	SHORT $LN3@res_findTa
$LN4@res_findTa:
; Line 90
	cmp	DWORD PTR _result$[ebp], 0
	jle	SHORT $LN2@res_findTa
; Line 91
	mov	eax, DWORD PTR _mid$[ebp]
	add	eax, 1
	mov	DWORD PTR _start$[ebp], eax
; Line 92
	jmp	SHORT $LN3@res_findTa
$LN2@res_findTa:
; Line 94
	mov	eax, DWORD PTR _realKey$[ebp]
	mov	ecx, DWORD PTR _tableKey$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 95
	mov	eax, DWORD PTR _mid$[ebp]
	jmp	SHORT $LN9@res_findTa
$LN3@res_findTa:
; Line 97
	jmp	$LN8@res_findTa
$LN7@res_findTa:
; Line 98
	or	eax, -1
$LN9@res_findTa:
; Line 99
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 256				; 00000100H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__res_findTableItem ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __res_findTable32Item
_TEXT	SEGMENT
tv79 = -256						; size = 4
_result$ = -56						; size = 4
_limit$ = -44						; size = 4
_start$ = -32						; size = 4
_mid$ = -20						; size = 4
_tableKey$ = -8						; size = 4
_pResData$ = 8						; size = 4
_keyOffsets$ = 12					; size = 4
_length$ = 16						; size = 4
_key$ = 20						; size = 4
_realKey$ = 24						; size = 4
__res_findTable32Item PROC				; COMDAT
; Line 103
	push	ebp
	mov	ebp, esp
	sub	esp, 256				; 00000100H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-256]
	mov	ecx, 64					; 00000040H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 109
	mov	DWORD PTR _start$[ebp], 0
; Line 110
	mov	eax, DWORD PTR _length$[ebp]
	mov	DWORD PTR _limit$[ebp], eax
$LN8@res_findTa@2:
; Line 111
	mov	eax, DWORD PTR _start$[ebp]
	cmp	eax, DWORD PTR _limit$[ebp]
	jge	$LN7@res_findTa@2
; Line 112
	mov	eax, DWORD PTR _start$[ebp]
	add	eax, DWORD PTR _limit$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _mid$[ebp], eax
; Line 113
	mov	eax, DWORD PTR _mid$[ebp]
	mov	ecx, DWORD PTR _keyOffsets$[ebp]
	cmp	DWORD PTR [ecx+eax*4], 0
	jl	SHORT $LN11@res_findTa@2
	mov	edx, DWORD PTR _pResData$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _mid$[ebp]
	mov	edx, DWORD PTR _keyOffsets$[ebp]
	add	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR tv79[ebp], eax
	jmp	SHORT $LN12@res_findTa@2
$LN11@res_findTa@2:
	mov	eax, DWORD PTR _mid$[ebp]
	mov	ecx, DWORD PTR _keyOffsets$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	and	edx, 2147483647				; 7fffffffH
	mov	eax, DWORD PTR _pResData$[ebp]
	add	edx, DWORD PTR [eax+12]
	mov	DWORD PTR tv79[ebp], edx
$LN12@res_findTa@2:
	mov	ecx, DWORD PTR tv79[ebp]
	mov	DWORD PTR _tableKey$[ebp], ecx
; Line 114
	mov	eax, DWORD PTR _pResData$[ebp]
	movsx	ecx, BYTE PTR [eax+39]
	test	ecx, ecx
	je	SHORT $LN6@res_findTa@2
; Line 115
	mov	eax, DWORD PTR _tableKey$[ebp]
	push	eax
	mov	ecx, DWORD PTR _key$[ebp]
	push	ecx
	call	_strcmp
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
; Line 116
	jmp	SHORT $LN5@res_findTa@2
$LN6@res_findTa@2:
; Line 117
	mov	eax, DWORD PTR _tableKey$[ebp]
	push	eax
	mov	ecx, DWORD PTR _key$[ebp]
	push	ecx
	call	_strcmp
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
$LN5@res_findTa@2:
; Line 119
	cmp	DWORD PTR _result$[ebp], 0
	jge	SHORT $LN4@res_findTa@2
; Line 120
	mov	eax, DWORD PTR _mid$[ebp]
	mov	DWORD PTR _limit$[ebp], eax
	jmp	SHORT $LN3@res_findTa@2
$LN4@res_findTa@2:
; Line 121
	cmp	DWORD PTR _result$[ebp], 0
	jle	SHORT $LN2@res_findTa@2
; Line 122
	mov	eax, DWORD PTR _mid$[ebp]
	add	eax, 1
	mov	DWORD PTR _start$[ebp], eax
; Line 123
	jmp	SHORT $LN3@res_findTa@2
$LN2@res_findTa@2:
; Line 125
	mov	eax, DWORD PTR _realKey$[ebp]
	mov	ecx, DWORD PTR _tableKey$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 126
	mov	eax, DWORD PTR _mid$[ebp]
	jmp	SHORT $LN9@res_findTa@2
$LN3@res_findTa@2:
; Line 128
	jmp	$LN8@res_findTa@2
$LN7@res_findTa@2:
; Line 129
	or	eax, -1
$LN9@res_findTa@2:
; Line 130
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 256				; 00000100H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__res_findTable32Item ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _makeResourceFrom16
_TEXT	SEGMENT
_pResData$ = 8						; size = 4
_res16$ = 12						; size = 4
_makeResourceFrom16 PROC				; COMDAT
; Line 427
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 428
	mov	eax, DWORD PTR _pResData$[ebp]
	mov	ecx, DWORD PTR _res16$[ebp]
	cmp	ecx, DWORD PTR [eax+32]
	jge	SHORT $LN2@makeResour
; Line 430
	jmp	SHORT $LN1@makeResour
$LN2@makeResour:
; Line 433
	mov	eax, DWORD PTR _pResData$[ebp]
	mov	ecx, DWORD PTR _res16$[ebp]
	sub	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR _pResData$[ebp]
	add	ecx, DWORD PTR [edx+28]
	mov	DWORD PTR _res16$[ebp], ecx
$LN1@makeResour:
; Line 435
	mov	eax, DWORD PTR _res16$[ebp]
	or	eax, 1610612736				; 60000000H
; Line 436
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_makeResourceFrom16 ENDP
_TEXT	ENDS
PUBLIC	??_C@_1BE@HLFFIPOE@?$AAi?$AAn?$AAd?$AAe?$AAx?$AAR?$AA?$DO?$AA?$DN?$AA0?$AA?$AA@ ; `string'
PUBLIC	??_C@_1FK@OHFGOEAM@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@ ; `string'
PUBLIC	?__LINE__Var@?1??res_getTableItemByIndex_56@@9@9 ; `res_getTableItemByIndex_56'::`2'::__LINE__Var
PUBLIC	_res_getTableItemByIndex_56
EXTRN	__imp___wassert:PROC
;	COMDAT ??_C@_1BE@HLFFIPOE@?$AAi?$AAn?$AAd?$AAe?$AAx?$AAR?$AA?$DO?$AA?$DN?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_1BE@HLFFIPOE@?$AAi?$AAn?$AAd?$AAe?$AAx?$AAR?$AA?$DO?$AA?$DN?$AA0?$AA?$AA@ DB 'i'
	DB	00H, 'n', 00H, 'd', 00H, 'e', 00H, 'x', 00H, 'R', 00H, '>', 00H
	DB	'=', 00H, '0', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1FK@OHFGOEAM@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@
CONST	SEGMENT
??_C@_1FK@OHFGOEAM@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@ DB 'd'
	DB	00H, ':', 00H, '\', 00H, 'm', 00H, 'o', 00H, 'z', 00H, 'i', 00H
	DB	'l', 00H, 'l', 00H, 'a', 00H, '\', 00H, 'i', 00H, 'n', 00H, 't'
	DB	00H, 'l', 00H, '\', 00H, 'i', 00H, 'c', 00H, 'u', 00H, '\', 00H
	DB	's', 00H, 'o', 00H, 'u', 00H, 'r', 00H, 'c', 00H, 'e', 00H, '\'
	DB	00H, 'c', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'o', 00H, 'n', 00H
	DB	'\', 00H, 'u', 00H, 'r', 00H, 'e', 00H, 's', 00H, 'd', 00H, 'a'
	DB	00H, 't', 00H, 'a', 00H, '.', 00H, 'c', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??res_getTableItemByIndex_56@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??res_getTableItemByIndex_56@@9@9 DD 01e8H ; `res_getTableItemByIndex_56'::`2'::__LINE__Var
; Function compile flags: /Odtp /RTCsu /ZI
_DATA	ENDS
;	COMDAT _res_getTableItemByIndex_56
_TEXT	SEGMENT
tv190 = -268						; size = 4
tv163 = -268						; size = 4
tv136 = -268						; size = 4
tv72 = -268						; size = 4
_p$9819 = -68						; size = 4
_p$9812 = -56						; size = 4
_p32$9806 = -44						; size = 4
_p$9803 = -32						; size = 4
_length$ = -20						; size = 4
_offset$ = -8						; size = 4
_pResData$ = 8						; size = 4
_table$ = 12						; size = 4
_indexR$ = 16						; size = 4
_key$ = 20						; size = 4
_res_getTableItemByIndex_56 PROC			; COMDAT
; Line 488
	push	ebp
	mov	ebp, esp
	sub	esp, 268				; 0000010cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-268]
	mov	ecx, 67					; 00000043H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 489
	mov	eax, DWORD PTR _table$[ebp]
	and	eax, 268435455				; 0fffffffH
	mov	DWORD PTR _offset$[ebp], eax
; Line 491
	cmp	DWORD PTR _indexR$[ebp], 0
	jge	SHORT $LN17@res_getTab@2
	mov	eax, DWORD PTR ?__LINE__Var@?1??res_getTableItemByIndex_56@@9@9
	add	eax, 3
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1FK@OHFGOEAM@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@
	push	OFFSET ??_C@_1BE@HLFFIPOE@?$AAi?$AAn?$AAd?$AAe?$AAx?$AAR?$AA?$DO?$AA?$DN?$AA0?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN17@res_getTab@2:
; Line 492
	mov	eax, DWORD PTR _table$[ebp]
	shr	eax, 28					; 0000001cH
	mov	DWORD PTR tv72[ebp], eax
	cmp	DWORD PTR tv72[ebp], 2
	je	SHORT $LN12@res_getTab@2
	cmp	DWORD PTR tv72[ebp], 4
	je	$LN5@res_getTab@2
	cmp	DWORD PTR tv72[ebp], 5
	je	$LN8@res_getTab@2
	jmp	$LN13@res_getTab@2
$LN12@res_getTab@2:
; Line 494
	cmp	DWORD PTR _offset$[ebp], 0
	je	$LN11@res_getTab@2
; Line 495
	mov	eax, DWORD PTR _pResData$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _offset$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR _p$9803[ebp], eax
; Line 496
	mov	eax, DWORD PTR _p$9803[ebp]
	movzx	ecx, WORD PTR [eax]
	mov	DWORD PTR _length$[ebp], ecx
	mov	edx, DWORD PTR _p$9803[ebp]
	add	edx, 2
	mov	DWORD PTR _p$9803[ebp], edx
; Line 497
	mov	eax, DWORD PTR _indexR$[ebp]
	cmp	eax, DWORD PTR _length$[ebp]
	jge	SHORT $LN11@res_getTab@2
; Line 498
	mov	eax, DWORD PTR _length$[ebp]
	mov	ecx, DWORD PTR _p$9803[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	eax, DWORD PTR _length$[ebp]
	not	eax
	and	eax, 1
	lea	ecx, DWORD PTR [edx+eax*2]
	mov	DWORD PTR _p32$9806[ebp], ecx
; Line 499
	cmp	DWORD PTR _key$[ebp], 0
	je	SHORT $LN9@res_getTab@2
; Line 500
	mov	eax, DWORD PTR _indexR$[ebp]
	mov	ecx, DWORD PTR _p$9803[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	mov	eax, DWORD PTR _pResData$[ebp]
	cmp	edx, DWORD PTR [eax+20]
	jge	SHORT $LN18@res_getTab@2
	mov	ecx, DWORD PTR _indexR$[ebp]
	mov	edx, DWORD PTR _p$9803[ebp]
	movzx	eax, WORD PTR [edx+ecx*2]
	mov	ecx, DWORD PTR _pResData$[ebp]
	add	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR tv136[ebp], eax
	jmp	SHORT $LN19@res_getTab@2
$LN18@res_getTab@2:
	mov	edx, DWORD PTR _indexR$[ebp]
	mov	eax, DWORD PTR _p$9803[ebp]
	movzx	ecx, WORD PTR [eax+edx*2]
	mov	edx, DWORD PTR _pResData$[ebp]
	mov	eax, DWORD PTR [edx+12]
	add	eax, ecx
	mov	ecx, DWORD PTR _pResData$[ebp]
	sub	eax, DWORD PTR [ecx+20]
	mov	DWORD PTR tv136[ebp], eax
$LN19@res_getTab@2:
	mov	edx, DWORD PTR _key$[ebp]
	mov	eax, DWORD PTR tv136[ebp]
	mov	DWORD PTR [edx], eax
$LN9@res_getTab@2:
; Line 502
	mov	eax, DWORD PTR _indexR$[ebp]
	mov	ecx, DWORD PTR _p32$9806[ebp]
	mov	eax, DWORD PTR [ecx+eax*4]
	jmp	$LN15@res_getTab@2
$LN11@res_getTab@2:
; Line 505
	jmp	$LN13@res_getTab@2
$LN8@res_getTab@2:
; Line 508
	mov	eax, DWORD PTR _pResData$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _offset$[ebp]
	lea	eax, DWORD PTR [ecx+edx*2]
	mov	DWORD PTR _p$9812[ebp], eax
; Line 509
	mov	eax, DWORD PTR _p$9812[ebp]
	movzx	ecx, WORD PTR [eax]
	mov	DWORD PTR _length$[ebp], ecx
	mov	edx, DWORD PTR _p$9812[ebp]
	add	edx, 2
	mov	DWORD PTR _p$9812[ebp], edx
; Line 510
	mov	eax, DWORD PTR _indexR$[ebp]
	cmp	eax, DWORD PTR _length$[ebp]
	jge	SHORT $LN7@res_getTab@2
; Line 511
	cmp	DWORD PTR _key$[ebp], 0
	je	SHORT $LN6@res_getTab@2
; Line 512
	mov	eax, DWORD PTR _indexR$[ebp]
	mov	ecx, DWORD PTR _p$9812[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	mov	eax, DWORD PTR _pResData$[ebp]
	cmp	edx, DWORD PTR [eax+20]
	jge	SHORT $LN20@res_getTab@2
	mov	ecx, DWORD PTR _indexR$[ebp]
	mov	edx, DWORD PTR _p$9812[ebp]
	movzx	eax, WORD PTR [edx+ecx*2]
	mov	ecx, DWORD PTR _pResData$[ebp]
	add	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR tv163[ebp], eax
	jmp	SHORT $LN21@res_getTab@2
$LN20@res_getTab@2:
	mov	edx, DWORD PTR _indexR$[ebp]
	mov	eax, DWORD PTR _p$9812[ebp]
	movzx	ecx, WORD PTR [eax+edx*2]
	mov	edx, DWORD PTR _pResData$[ebp]
	mov	eax, DWORD PTR [edx+12]
	add	eax, ecx
	mov	ecx, DWORD PTR _pResData$[ebp]
	sub	eax, DWORD PTR [ecx+20]
	mov	DWORD PTR tv163[ebp], eax
$LN21@res_getTab@2:
	mov	edx, DWORD PTR _key$[ebp]
	mov	eax, DWORD PTR tv163[ebp]
	mov	DWORD PTR [edx], eax
$LN6@res_getTab@2:
; Line 514
	mov	eax, DWORD PTR _length$[ebp]
	add	eax, DWORD PTR _indexR$[ebp]
	mov	ecx, DWORD PTR _p$9812[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	push	edx
	mov	eax, DWORD PTR _pResData$[ebp]
	push	eax
	call	_makeResourceFrom16
	add	esp, 8
	jmp	$LN15@res_getTab@2
$LN7@res_getTab@2:
; Line 516
	jmp	$LN13@res_getTab@2
$LN5@res_getTab@2:
; Line 519
	cmp	DWORD PTR _offset$[ebp], 0
	je	$LN13@res_getTab@2
; Line 520
	mov	eax, DWORD PTR _pResData$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _offset$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR _p$9819[ebp], eax
; Line 521
	mov	eax, DWORD PTR _p$9819[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _length$[ebp], ecx
	mov	edx, DWORD PTR _p$9819[ebp]
	add	edx, 4
	mov	DWORD PTR _p$9819[ebp], edx
; Line 522
	mov	eax, DWORD PTR _indexR$[ebp]
	cmp	eax, DWORD PTR _length$[ebp]
	jge	SHORT $LN13@res_getTab@2
; Line 523
	cmp	DWORD PTR _key$[ebp], 0
	je	SHORT $LN2@res_getTab@2
; Line 524
	mov	eax, DWORD PTR _indexR$[ebp]
	mov	ecx, DWORD PTR _p$9819[ebp]
	cmp	DWORD PTR [ecx+eax*4], 0
	jl	SHORT $LN22@res_getTab@2
	mov	edx, DWORD PTR _pResData$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _indexR$[ebp]
	mov	edx, DWORD PTR _p$9819[ebp]
	add	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR tv190[ebp], eax
	jmp	SHORT $LN23@res_getTab@2
$LN22@res_getTab@2:
	mov	eax, DWORD PTR _indexR$[ebp]
	mov	ecx, DWORD PTR _p$9819[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	and	edx, 2147483647				; 7fffffffH
	mov	eax, DWORD PTR _pResData$[ebp]
	add	edx, DWORD PTR [eax+12]
	mov	DWORD PTR tv190[ebp], edx
$LN23@res_getTab@2:
	mov	ecx, DWORD PTR _key$[ebp]
	mov	edx, DWORD PTR tv190[ebp]
	mov	DWORD PTR [ecx], edx
$LN2@res_getTab@2:
; Line 526
	mov	eax, DWORD PTR _length$[ebp]
	add	eax, DWORD PTR _indexR$[ebp]
	mov	ecx, DWORD PTR _p$9819[ebp]
	mov	eax, DWORD PTR [ecx+eax*4]
	jmp	SHORT $LN15@res_getTab@2
$LN13@res_getTab@2:
; Line 534
	or	eax, -1
$LN15@res_getTab@2:
; Line 535
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 268				; 0000010cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_res_getTableItemByIndex_56 ENDP
_TEXT	ENDS
PUBLIC	_res_getResource_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _res_getResource_56
_TEXT	SEGMENT
_idx$ = -20						; size = 4
_realKey$ = -8						; size = 4
_pResData$ = 8						; size = 4
_key$ = 12						; size = 4
_res_getResource_56 PROC				; COMDAT
; Line 538
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 539
	mov	eax, DWORD PTR _key$[ebp]
	mov	DWORD PTR _realKey$[ebp], eax
; Line 541
	lea	eax, DWORD PTR _realKey$[ebp]
	push	eax
	lea	ecx, DWORD PTR _idx$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pResData$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR _pResData$[ebp]
	push	ecx
	call	_res_getTableItemByKey_56
	add	esp, 16					; 00000010H
; Line 542
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@res_getRes
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN6@res_getRes:
	DD	2
	DD	$LN5@res_getRes
$LN5@res_getRes:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN3@res_getRes
	DD	-20					; ffffffecH
	DD	4
	DD	$LN4@res_getRes
$LN4@res_getRes:
	DB	105					; 00000069H
	DB	100					; 00000064H
	DB	120					; 00000078H
	DB	0
$LN3@res_getRes:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	75					; 0000004bH
	DB	101					; 00000065H
	DB	121					; 00000079H
	DB	0
_res_getResource_56 ENDP
_TEXT	ENDS
PUBLIC	?__LINE__Var@?1??res_getArrayItem_56@@9@9	; `res_getArrayItem_56'::`2'::__LINE__Var
PUBLIC	_res_getArrayItem_56
;	COMDAT ?__LINE__Var@?1??res_getArrayItem_56@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??res_getArrayItem_56@@9@9 DD 0221H	; `res_getArrayItem_56'::`2'::__LINE__Var
; Function compile flags: /Odtp /RTCsu /ZI
_DATA	ENDS
;	COMDAT _res_getArrayItem_56
_TEXT	SEGMENT
tv72 = -232						; size = 4
_p$9854 = -32						; size = 4
_p$9850 = -20						; size = 4
_offset$ = -8						; size = 4
_pResData$ = 8						; size = 4
_array$ = 12						; size = 4
_indexR$ = 16						; size = 4
_res_getArrayItem_56 PROC				; COMDAT
; Line 545
	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 546
	mov	eax, DWORD PTR _array$[ebp]
	and	eax, 268435455				; 0fffffffH
	mov	DWORD PTR _offset$[ebp], eax
; Line 547
	cmp	DWORD PTR _indexR$[ebp], 0
	jge	SHORT $LN11@res_getArr
	mov	eax, DWORD PTR ?__LINE__Var@?1??res_getArrayItem_56@@9@9
	add	eax, 2
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1FK@OHFGOEAM@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@
	push	OFFSET ??_C@_1BE@HLFFIPOE@?$AAi?$AAn?$AAd?$AAe?$AAx?$AAR?$AA?$DO?$AA?$DN?$AA0?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN11@res_getArr:
; Line 548
	mov	eax, DWORD PTR _array$[ebp]
	shr	eax, 28					; 0000001cH
	mov	DWORD PTR tv72[ebp], eax
	cmp	DWORD PTR tv72[ebp], 8
	je	SHORT $LN6@res_getArr
	cmp	DWORD PTR tv72[ebp], 9
	je	SHORT $LN3@res_getArr
	jmp	SHORT $LN7@res_getArr
$LN6@res_getArr:
; Line 550
	cmp	DWORD PTR _offset$[ebp], 0
	je	SHORT $LN5@res_getArr
; Line 551
	mov	eax, DWORD PTR _pResData$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _offset$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR _p$9850[ebp], eax
; Line 552
	mov	eax, DWORD PTR _p$9850[ebp]
	mov	ecx, DWORD PTR _indexR$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jge	SHORT $LN5@res_getArr
; Line 553
	mov	eax, DWORD PTR _indexR$[ebp]
	mov	ecx, DWORD PTR _p$9850[ebp]
	mov	eax, DWORD PTR [ecx+eax*4+4]
	jmp	SHORT $LN9@res_getArr
$LN5@res_getArr:
; Line 556
	jmp	SHORT $LN7@res_getArr
$LN3@res_getArr:
; Line 559
	mov	eax, DWORD PTR _pResData$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _offset$[ebp]
	lea	eax, DWORD PTR [ecx+edx*2]
	mov	DWORD PTR _p$9854[ebp], eax
; Line 560
	mov	eax, DWORD PTR _p$9854[ebp]
	movzx	ecx, WORD PTR [eax]
	cmp	DWORD PTR _indexR$[ebp], ecx
	jge	SHORT $LN7@res_getArr
; Line 561
	mov	eax, DWORD PTR _indexR$[ebp]
	mov	ecx, DWORD PTR _p$9854[ebp]
	movzx	edx, WORD PTR [ecx+eax*2+2]
	push	edx
	mov	eax, DWORD PTR _pResData$[ebp]
	push	eax
	call	_makeResourceFrom16
	add	esp, 8
	jmp	SHORT $LN9@res_getArr
$LN7@res_getArr:
; Line 568
	or	eax, -1
$LN9@res_getArr:
; Line 569
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_res_getArrayItem_56 ENDP
_TEXT	ENDS
PUBLIC	_res_findResource_56
EXTRN	__imp__strtol:PROC
EXTRN	__imp__strchr:PROC
EXTRN	_strlen:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _res_findResource_56
_TEXT	SEGMENT
_type$ = -80						; size = 4
_indexR$ = -68						; size = 4
_t2$ = -56						; size = 4
_t1$ = -44						; size = 4
_closeIndex$ = -32					; size = 4
_nextSepP$ = -20					; size = 4
_pathP$ = -8						; size = 4
_pResData$ = 8						; size = 4
_r$ = 12						; size = 4
_path$ = 16						; size = 4
_key$ = 20						; size = 4
_res_findResource_56 PROC				; COMDAT
; Line 572
	push	ebp
	mov	ebp, esp
	sub	esp, 276				; 00000114H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-276]
	mov	ecx, 69					; 00000045H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 578
	mov	eax, DWORD PTR _path$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pathP$[ebp], ecx
	mov	eax, DWORD PTR _path$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _nextSepP$[ebp], ecx
; Line 579
	mov	DWORD PTR _closeIndex$[ebp], 0
; Line 580
	mov	eax, DWORD PTR _r$[ebp]
	mov	DWORD PTR _t1$[ebp], eax
; Line 582
	mov	DWORD PTR _indexR$[ebp], 0
; Line 583
	mov	eax, DWORD PTR _t1$[ebp]
	shr	eax, 28					; 0000001cH
	mov	DWORD PTR _type$[ebp], eax
; Line 586
	mov	eax, DWORD PTR _pathP$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN18@res_findRe
; Line 587
	mov	eax, DWORD PTR _r$[ebp]
	jmp	$LN19@res_findRe
$LN18@res_findRe:
; Line 591
	cmp	DWORD PTR _type$[ebp], 2
	je	SHORT $LN16@res_findRe
	cmp	DWORD PTR _type$[ebp], 5
	je	SHORT $LN16@res_findRe
	cmp	DWORD PTR _type$[ebp], 4
	je	SHORT $LN16@res_findRe
	cmp	DWORD PTR _type$[ebp], 8
	je	SHORT $LN16@res_findRe
	cmp	DWORD PTR _type$[ebp], 9
	je	SHORT $LN16@res_findRe
; Line 592
	or	eax, -1
	jmp	$LN19@res_findRe
$LN16@res_findRe:
; Line 595
	cmp	DWORD PTR _nextSepP$[ebp], 0
	je	$LN15@res_findRe
	mov	eax, DWORD PTR _pathP$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	$LN15@res_findRe
	cmp	DWORD PTR _t1$[ebp], -1
	je	$LN15@res_findRe
	cmp	DWORD PTR _type$[ebp], 2
	je	SHORT $LN14@res_findRe
	cmp	DWORD PTR _type$[ebp], 5
	je	SHORT $LN14@res_findRe
	cmp	DWORD PTR _type$[ebp], 4
	je	SHORT $LN14@res_findRe
	cmp	DWORD PTR _type$[ebp], 8
	je	SHORT $LN14@res_findRe
	cmp	DWORD PTR _type$[ebp], 9
	jne	$LN15@res_findRe
$LN14@res_findRe:
; Line 599
	mov	esi, esp
	push	47					; 0000002fH
	mov	eax, DWORD PTR _pathP$[ebp]
	push	eax
	call	DWORD PTR __imp__strchr
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _nextSepP$[ebp], eax
; Line 603
	cmp	DWORD PTR _nextSepP$[ebp], 0
	je	SHORT $LN12@res_findRe
; Line 604
	mov	eax, DWORD PTR _nextSepP$[ebp]
	mov	BYTE PTR [eax], 0
; Line 605
	mov	eax, DWORD PTR _nextSepP$[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _path$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 606
	jmp	SHORT $LN11@res_findRe
$LN12@res_findRe:
; Line 607
	mov	esi, esp
	push	0
	mov	eax, DWORD PTR _pathP$[ebp]
	push	eax
	call	DWORD PTR __imp__strchr
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _path$[ebp]
	mov	DWORD PTR [ecx], eax
$LN11@res_findRe:
; Line 612
	cmp	DWORD PTR _type$[ebp], 2
	je	SHORT $LN9@res_findRe
	cmp	DWORD PTR _type$[ebp], 5
	je	SHORT $LN9@res_findRe
	cmp	DWORD PTR _type$[ebp], 4
	jne	SHORT $LN10@res_findRe
$LN9@res_findRe:
; Line 613
	mov	eax, DWORD PTR _key$[ebp]
	mov	ecx, DWORD PTR _pathP$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 614
	mov	eax, DWORD PTR _key$[ebp]
	push	eax
	lea	ecx, DWORD PTR _indexR$[ebp]
	push	ecx
	mov	edx, DWORD PTR _t1$[ebp]
	push	edx
	mov	eax, DWORD PTR _pResData$[ebp]
	push	eax
	call	_res_getTableItemByKey_56
	add	esp, 16					; 00000010H
	mov	DWORD PTR _t2$[ebp], eax
; Line 615
	cmp	DWORD PTR _t2$[ebp], -1
	jne	SHORT $LN8@res_findRe
; Line 617
	mov	esi, esp
	push	10					; 0000000aH
	lea	eax, DWORD PTR _closeIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pathP$[ebp]
	push	ecx
	call	DWORD PTR __imp__strtol
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _indexR$[ebp], eax
; Line 618
	mov	eax, DWORD PTR _closeIndex$[ebp]
	cmp	eax, DWORD PTR _pathP$[ebp]
	je	SHORT $LN8@res_findRe
; Line 620
	mov	eax, DWORD PTR _key$[ebp]
	push	eax
	mov	ecx, DWORD PTR _indexR$[ebp]
	push	ecx
	mov	edx, DWORD PTR _t1$[ebp]
	push	edx
	mov	eax, DWORD PTR _pResData$[ebp]
	push	eax
	call	_res_getTableItemByIndex_56
	add	esp, 16					; 00000010H
	mov	DWORD PTR _t2$[ebp], eax
$LN8@res_findRe:
; Line 622
	jmp	SHORT $LN6@res_findRe
$LN10@res_findRe:
; Line 623
	cmp	DWORD PTR _type$[ebp], 8
	je	SHORT $LN4@res_findRe
	cmp	DWORD PTR _type$[ebp], 9
	jne	SHORT $LN5@res_findRe
$LN4@res_findRe:
; Line 624
	mov	esi, esp
	push	10					; 0000000aH
	lea	eax, DWORD PTR _closeIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pathP$[ebp]
	push	ecx
	call	DWORD PTR __imp__strtol
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _indexR$[ebp], eax
; Line 625
	mov	eax, DWORD PTR _closeIndex$[ebp]
	cmp	eax, DWORD PTR _pathP$[ebp]
	je	SHORT $LN3@res_findRe
; Line 626
	mov	eax, DWORD PTR _indexR$[ebp]
	push	eax
	mov	ecx, DWORD PTR _t1$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pResData$[ebp]
	push	edx
	call	_res_getArrayItem_56
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _t2$[ebp], eax
; Line 627
	jmp	SHORT $LN2@res_findRe
$LN3@res_findRe:
; Line 628
	mov	DWORD PTR _t2$[ebp], -1
$LN2@res_findRe:
; Line 630
	mov	eax, DWORD PTR _key$[ebp]
	mov	DWORD PTR [eax], 0
; Line 631
	jmp	SHORT $LN6@res_findRe
$LN5@res_findRe:
; Line 632
	mov	DWORD PTR _t2$[ebp], -1
$LN6@res_findRe:
; Line 634
	mov	eax, DWORD PTR _t2$[ebp]
	mov	DWORD PTR _t1$[ebp], eax
; Line 635
	mov	eax, DWORD PTR _t1$[ebp]
	shr	eax, 28					; 0000001cH
	mov	DWORD PTR _type$[ebp], eax
; Line 637
	mov	eax, DWORD PTR _path$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pathP$[ebp], ecx
; Line 638
	jmp	$LN16@res_findRe
$LN15@res_findRe:
; Line 640
	mov	eax, DWORD PTR _t1$[ebp]
$LN19@res_findRe:
; Line 641
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN24@res_findRe
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 276				; 00000114H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN24@res_findRe:
	DD	2
	DD	$LN23@res_findRe
$LN23@res_findRe:
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN21@res_findRe
	DD	-68					; ffffffbcH
	DD	4
	DD	$LN22@res_findRe
$LN22@res_findRe:
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	82					; 00000052H
	DB	0
$LN21@res_findRe:
	DB	99					; 00000063H
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	0
_res_findResource_56 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CJ@NFBMAAND@ures_swapResource?$CIroot?5res?$DN?$CF08x?$CJ@ ; `string'
PUBLIC	??_C@_0EM@IJPGONAP@ures_swap?$CI?$CJ?3?5unable?5to?5allocate?5@ ; `string'
PUBLIC	??_C@_0DC@FKKCKLIN@ures_swap?$CI?$CJ?4swapArray16?$CI16?9bit?5u@ ; `string'
PUBLIC	??_C@_0DH@CFKJPKIA@ures_swap?$CI?$CJ?4udata_swapInvStringB@ ; `string'
PUBLIC	??_C@_0DP@KGOIBCBC@ures_swap?$CI?$CJ?3?5unable?5to?5allocate?5@ ; `string'
PUBLIC	??_C@_0DH@BMPCLKBG@ures_swap?$CI?$CJ?3?5resource?5top?5?$CFd?5exc@ ; `string'
PUBLIC	??_C@_0DJ@BDIDNCA@ures_swap?$CI?$CJ?3?5too?5few?5indexes?5for@ ; `string'
PUBLIC	??_C@_0EE@FPCJDGKP@ures_swap?$CI?$CJ?3?5too?5few?5bytes?5?$CI?$CFd?5a@ ; `string'
PUBLIC	??_C@_0GC@DCLIMPGO@ures_swap?$CI?$CJ?3?5data?5format?5?$CF02x?4?$CF0@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	_ures_swap_56
EXTRN	_uprv_free_56:PROC
EXTRN	_udata_swapInvStringBlock_56:PROC
EXTRN	_uprv_malloc_56:PROC
EXTRN	_udata_readInt32_56:PROC
EXTRN	_udata_printError_56:PROC
EXTRN	_udata_swapDataHeader_56:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
;	COMDAT ??_C@_0CJ@NFBMAAND@ures_swapResource?$CIroot?5res?$DN?$CF08x?$CJ@
CONST	SEGMENT
??_C@_0CJ@NFBMAAND@ures_swapResource?$CIroot?5res?$DN?$CF08x?$CJ@ DB 'ure'
	DB	's_swapResource(root res=%08x) failed', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EM@IJPGONAP@ures_swap?$CI?$CJ?3?5unable?5to?5allocate?5@
CONST	SEGMENT
??_C@_0EM@IJPGONAP@ures_swap?$CI?$CJ?3?5unable?5to?5allocate?5@ DB 'ures_'
	DB	'swap(): unable to allocate memory for sorting tables (max len'
	DB	'gth: %d)', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@FKKCKLIN@ures_swap?$CI?$CJ?4swapArray16?$CI16?9bit?5u@
CONST	SEGMENT
??_C@_0DC@FKKCKLIN@ures_swap?$CI?$CJ?4swapArray16?$CI16?9bit?5u@ DB 'ures'
	DB	'_swap().swapArray16(16-bit units[%d]) failed', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DH@CFKJPKIA@ures_swap?$CI?$CJ?4udata_swapInvStringB@
CONST	SEGMENT
??_C@_0DH@CFKJPKIA@ures_swap?$CI?$CJ?4udata_swapInvStringB@ DB 'ures_swap'
	DB	'().udata_swapInvStringBlock(keys[%d]) failed', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DP@KGOIBCBC@ures_swap?$CI?$CJ?3?5unable?5to?5allocate?5@
CONST	SEGMENT
??_C@_0DP@KGOIBCBC@ures_swap?$CI?$CJ?3?5unable?5to?5allocate?5@ DB 'ures_'
	DB	'swap(): unable to allocate memory for tracking resources', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0DH@BMPCLKBG@ures_swap?$CI?$CJ?3?5resource?5top?5?$CFd?5exc@
CONST	SEGMENT
??_C@_0DH@BMPCLKBG@ures_swap?$CI?$CJ?3?5resource?5top?5?$CFd?5exc@ DB 'ur'
	DB	'es_swap(): resource top %d exceeds bundle length %d', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@BDIDNCA@ures_swap?$CI?$CJ?3?5too?5few?5indexes?5for@
CONST	SEGMENT
??_C@_0DJ@BDIDNCA@ures_swap?$CI?$CJ?3?5too?5few?5indexes?5for@ DB 'ures_s'
	DB	'wap(): too few indexes for a 1.1+ resource bundle', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EE@FPCJDGKP@ures_swap?$CI?$CJ?3?5too?5few?5bytes?5?$CI?$CFd?5a@
CONST	SEGMENT
??_C@_0EE@FPCJDGKP@ures_swap?$CI?$CJ?3?5too?5few?5bytes?5?$CI?$CFd?5a@ DB 'u'
	DB	'res_swap(): too few bytes (%d after header) for a resource bu'
	DB	'ndle', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0GC@DCLIMPGO@ures_swap?$CI?$CJ?3?5data?5format?5?$CF02x?4?$CF0@
CONST	SEGMENT
??_C@_0GC@DCLIMPGO@ures_swap?$CI?$CJ?3?5data?5format?5?$CF02x?4?$CF0@ DB 'u'
	DB	'res_swap(): data format %02x.%02x.%02x.%02x (format version %'
	DB	'02x.%02x) is not a resource bundle', 0aH, 00H ; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT _ures_swap_56
_TEXT	SEGMENT
_resFlagsLength$10133 = -3424				; size = 4
_stackResFlags$10132 = -3412				; size = 800
_outBundle$10129 = -2604				; size = 4
_top$ = -2592						; size = 4
_resBottom$ = -2580					; size = 4
_keysTop$ = -2568					; size = 4
_keysBottom$ = -2556					; size = 4
_indexLength$ = -2544					; size = 4
_bundleLength$ = -2532					; size = 4
_inIndexes$ = -2520					; size = 4
_tempTable$ = -2508					; size = 24
_resort$ = -2476					; size = 800
_rows$ = -1668						; size = 1600
_maxTableLength$ = -60					; size = 4
_headerSize$ = -48					; size = 4
_rootRes$ = -36						; size = 4
_inBundle$ = -24					; size = 4
_pInfo$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_ds$ = 8						; size = 4
_inData$ = 12						; size = 4
_length$ = 16						; size = 4
_outData$ = 20						; size = 4
_pErrorCode$ = 24					; size = 4
_ures_swap_56 PROC					; COMDAT
; Line 990
	push	ebp
	mov	ebp, esp
	sub	esp, 3620				; 00000e24H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-3620]
	mov	ecx, 905				; 00000389H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 1006
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _outData$[ebp]
	push	ecx
	mov	edx, DWORD PTR _length$[ebp]
	push	edx
	mov	eax, DWORD PTR _inData$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ds$[ebp]
	push	ecx
	call	_udata_swapDataHeader_56
	add	esp, 20					; 00000014H
	mov	DWORD PTR _headerSize$[ebp], eax
; Line 1007
	cmp	DWORD PTR _pErrorCode$[ebp], 0
	je	SHORT $LN29@ures_swap_
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN30@ures_swap_
$LN29@ures_swap_:
; Line 1008
	xor	eax, eax
	jmp	$LN31@ures_swap_
$LN30@ures_swap_:
; Line 1012
	mov	eax, DWORD PTR _inData$[ebp]
	add	eax, 4
	mov	DWORD PTR _pInfo$[ebp], eax
; Line 1021
	mov	eax, DWORD PTR _pInfo$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	cmp	ecx, 82					; 00000052H
	jne	SHORT $LN27@ures_swap_
	mov	eax, DWORD PTR _pInfo$[ebp]
	movzx	ecx, BYTE PTR [eax+9]
	cmp	ecx, 101				; 00000065H
	jne	SHORT $LN27@ures_swap_
	mov	eax, DWORD PTR _pInfo$[ebp]
	movzx	ecx, BYTE PTR [eax+10]
	cmp	ecx, 115				; 00000073H
	jne	SHORT $LN27@ures_swap_
	mov	eax, DWORD PTR _pInfo$[ebp]
	movzx	ecx, BYTE PTR [eax+11]
	cmp	ecx, 66					; 00000042H
	jne	SHORT $LN27@ures_swap_
	mov	eax, DWORD PTR _pInfo$[ebp]
	movzx	ecx, BYTE PTR [eax+12]
	cmp	ecx, 1
	jne	SHORT $LN26@ures_swap_
	mov	eax, DWORD PTR _pInfo$[ebp]
	movzx	ecx, BYTE PTR [eax+13]
	cmp	ecx, 1
	jge	SHORT $LN28@ures_swap_
$LN26@ures_swap_:
	mov	eax, DWORD PTR _pInfo$[ebp]
	movzx	ecx, BYTE PTR [eax+12]
	cmp	ecx, 2
	je	SHORT $LN28@ures_swap_
	mov	eax, DWORD PTR _pInfo$[ebp]
	movzx	ecx, BYTE PTR [eax+12]
	cmp	ecx, 3
	je	SHORT $LN28@ures_swap_
$LN27@ures_swap_:
; Line 1025
	mov	eax, DWORD PTR _pInfo$[ebp]
	movzx	ecx, BYTE PTR [eax+13]
	push	ecx
	mov	edx, DWORD PTR _pInfo$[ebp]
	movzx	eax, BYTE PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _pInfo$[ebp]
	movzx	edx, BYTE PTR [ecx+11]
	push	edx
	mov	eax, DWORD PTR _pInfo$[ebp]
	movzx	ecx, BYTE PTR [eax+10]
	push	ecx
	mov	edx, DWORD PTR _pInfo$[ebp]
	movzx	eax, BYTE PTR [edx+9]
	push	eax
	mov	ecx, DWORD PTR _pInfo$[ebp]
	movzx	edx, BYTE PTR [ecx+8]
	push	edx
	push	OFFSET ??_C@_0GC@DCLIMPGO@ures_swap?$CI?$CJ?3?5data?5format?5?$CF02x?4?$CF0@
	mov	eax, DWORD PTR _ds$[ebp]
	push	eax
	call	_udata_printError_56
	add	esp, 32					; 00000020H
; Line 1026
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 16			; 00000010H
; Line 1027
	xor	eax, eax
	jmp	$LN31@ures_swap_
$LN28@ures_swap_:
; Line 1029
	mov	eax, DWORD PTR _pInfo$[ebp]
	mov	cl, BYTE PTR [eax+12]
	mov	BYTE PTR _tempTable$[ebp+20], cl
; Line 1032
	cmp	DWORD PTR _length$[ebp], 0
	jge	SHORT $LN25@ures_swap_
; Line 1033
	mov	DWORD PTR _bundleLength$[ebp], -1
; Line 1034
	jmp	SHORT $LN24@ures_swap_
$LN25@ures_swap_:
; Line 1035
	mov	eax, DWORD PTR _length$[ebp]
	sub	eax, DWORD PTR _headerSize$[ebp]
	cdq
	and	edx, 3
	add	eax, edx
	sar	eax, 2
	mov	DWORD PTR _bundleLength$[ebp], eax
; Line 1038
	cmp	DWORD PTR _bundleLength$[ebp], 6
	jge	SHORT $LN24@ures_swap_
; Line 1040
	mov	eax, DWORD PTR _length$[ebp]
	sub	eax, DWORD PTR _headerSize$[ebp]
	push	eax
	push	OFFSET ??_C@_0EE@FPCJDGKP@ures_swap?$CI?$CJ?3?5too?5few?5bytes?5?$CI?$CFd?5a@
	mov	ecx, DWORD PTR _ds$[ebp]
	push	ecx
	call	_udata_printError_56
	add	esp, 12					; 0000000cH
; Line 1041
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 8
; Line 1042
	xor	eax, eax
	jmp	$LN31@ures_swap_
$LN24@ures_swap_:
; Line 1046
	mov	eax, DWORD PTR _inData$[ebp]
	add	eax, DWORD PTR _headerSize$[ebp]
	mov	DWORD PTR _inBundle$[ebp], eax
; Line 1047
	mov	esi, esp
	mov	eax, DWORD PTR _inBundle$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _ds$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _rootRes$[ebp], eax
; Line 1050
	mov	eax, DWORD PTR _inBundle$[ebp]
	add	eax, 4
	mov	DWORD PTR _inIndexes$[ebp], eax
; Line 1052
	mov	eax, DWORD PTR _inIndexes$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _ds$[ebp]
	push	edx
	call	_udata_readInt32_56
	add	esp, 8
	and	eax, 255				; 000000ffH
	mov	DWORD PTR _indexLength$[ebp], eax
; Line 1053
	cmp	DWORD PTR _indexLength$[ebp], 4
	jg	SHORT $LN22@ures_swap_
; Line 1054
	push	OFFSET ??_C@_0DJ@BDIDNCA@ures_swap?$CI?$CJ?3?5too?5few?5indexes?5for@
	mov	eax, DWORD PTR _ds$[ebp]
	push	eax
	call	_udata_printError_56
	add	esp, 8
; Line 1055
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 8
; Line 1056
	xor	eax, eax
	jmp	$LN31@ures_swap_
$LN22@ures_swap_:
; Line 1058
	mov	eax, DWORD PTR _indexLength$[ebp]
	add	eax, 1
	mov	DWORD PTR _keysBottom$[ebp], eax
; Line 1059
	mov	eax, DWORD PTR _inIndexes$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _ds$[ebp]
	push	edx
	call	_udata_readInt32_56
	add	esp, 8
	mov	DWORD PTR _keysTop$[ebp], eax
; Line 1060
	cmp	DWORD PTR _indexLength$[ebp], 6
	jle	SHORT $LN21@ures_swap_
; Line 1061
	mov	eax, DWORD PTR _inIndexes$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	mov	edx, DWORD PTR _ds$[ebp]
	push	edx
	call	_udata_readInt32_56
	add	esp, 8
	mov	DWORD PTR _resBottom$[ebp], eax
; Line 1062
	jmp	SHORT $LN20@ures_swap_
$LN21@ures_swap_:
; Line 1063
	mov	eax, DWORD PTR _keysTop$[ebp]
	mov	DWORD PTR _resBottom$[ebp], eax
$LN20@ures_swap_:
; Line 1065
	mov	eax, DWORD PTR _inIndexes$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _ds$[ebp]
	push	edx
	call	_udata_readInt32_56
	add	esp, 8
	mov	DWORD PTR _top$[ebp], eax
; Line 1066
	mov	eax, DWORD PTR _inIndexes$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR _ds$[ebp]
	push	edx
	call	_udata_readInt32_56
	add	esp, 8
	mov	DWORD PTR _maxTableLength$[ebp], eax
; Line 1068
	cmp	DWORD PTR _bundleLength$[ebp], 0
	jl	SHORT $LN19@ures_swap_
	mov	eax, DWORD PTR _bundleLength$[ebp]
	cmp	eax, DWORD PTR _top$[ebp]
	jge	SHORT $LN19@ures_swap_
; Line 1070
	mov	eax, DWORD PTR _bundleLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _top$[ebp]
	push	ecx
	push	OFFSET ??_C@_0DH@BMPCLKBG@ures_swap?$CI?$CJ?3?5resource?5top?5?$CFd?5exc@
	mov	edx, DWORD PTR _ds$[ebp]
	push	edx
	call	_udata_printError_56
	add	esp, 16					; 00000010H
; Line 1071
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 8
; Line 1072
	xor	eax, eax
	jmp	$LN31@ures_swap_
$LN19@ures_swap_:
; Line 1074
	mov	eax, DWORD PTR _indexLength$[ebp]
	add	eax, 1
	cmp	DWORD PTR _keysTop$[ebp], eax
	jle	SHORT $LN18@ures_swap_
; Line 1075
	mov	eax, DWORD PTR _keysTop$[ebp]
	shl	eax, 2
	mov	DWORD PTR _tempTable$[ebp+16], eax
; Line 1076
	jmp	SHORT $LN17@ures_swap_
$LN18@ures_swap_:
; Line 1077
	mov	DWORD PTR _tempTable$[ebp+16], 0
$LN17@ures_swap_:
; Line 1080
	cmp	DWORD PTR _length$[ebp], 0
	jl	$LN16@ures_swap_
; Line 1081
	mov	eax, DWORD PTR _outData$[ebp]
	add	eax, DWORD PTR _headerSize$[ebp]
	mov	DWORD PTR _outBundle$10129[ebp], eax
; Line 1095
	mov	eax, DWORD PTR _length$[ebp]
	add	eax, 31					; 0000001fH
	sar	eax, 5
	mov	DWORD PTR _resFlagsLength$10133[ebp], eax
; Line 1096
	mov	eax, DWORD PTR _resFlagsLength$10133[ebp]
	add	eax, 3
	and	eax, -4					; fffffffcH
	mov	DWORD PTR _resFlagsLength$10133[ebp], eax
; Line 1097
	cmp	DWORD PTR _resFlagsLength$10133[ebp], 800 ; 00000320H
	ja	SHORT $LN15@ures_swap_
; Line 1098
	lea	eax, DWORD PTR _stackResFlags$10132[ebp]
	mov	DWORD PTR _tempTable$[ebp+12], eax
; Line 1099
	jmp	SHORT $LN14@ures_swap_
$LN15@ures_swap_:
; Line 1100
	mov	eax, DWORD PTR _resFlagsLength$10133[ebp]
	push	eax
	call	_uprv_malloc_56
	add	esp, 4
	mov	DWORD PTR _tempTable$[ebp+12], eax
; Line 1101
	cmp	DWORD PTR _tempTable$[ebp+12], 0
	jne	SHORT $LN14@ures_swap_
; Line 1102
	push	OFFSET ??_C@_0DP@KGOIBCBC@ures_swap?$CI?$CJ?3?5unable?5to?5allocate?5@
	mov	eax, DWORD PTR _ds$[ebp]
	push	eax
	call	_udata_printError_56
	add	esp, 8
; Line 1103
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 7
; Line 1104
	xor	eax, eax
	jmp	$LN31@ures_swap_
$LN14@ures_swap_:
; Line 1107
	mov	eax, DWORD PTR _resFlagsLength$10133[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _tempTable$[ebp+12]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH
; Line 1110
	mov	eax, DWORD PTR _inData$[ebp]
	cmp	eax, DWORD PTR _outData$[ebp]
	je	SHORT $LN12@ures_swap_
; Line 1111
	push	1
	mov	eax, DWORD PTR _inBundle$[ebp]
	push	eax
	call	_uprv_checkValidMemory
	add	esp, 8
	mov	ecx, DWORD PTR _top$[ebp]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR _inBundle$[ebp]
	push	edx
	mov	eax, DWORD PTR _outBundle$10129[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN12@ures_swap_:
; Line 1116
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _keysBottom$[ebp]
	mov	edx, DWORD PTR _outBundle$10129[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	push	eax
	mov	ecx, DWORD PTR _keysTop$[ebp]
	sub	ecx, DWORD PTR _keysBottom$[ebp]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR _keysBottom$[ebp]
	mov	eax, DWORD PTR _inBundle$[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	push	ecx
	mov	edx, DWORD PTR _ds$[ebp]
	push	edx
	call	_udata_swapInvStringBlock_56
	add	esp, 20					; 00000014H
; Line 1117
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN11@ures_swap_
; Line 1118
	mov	eax, DWORD PTR _keysTop$[ebp]
	sub	eax, DWORD PTR _keysBottom$[ebp]
	shl	eax, 2
	push	eax
	push	OFFSET ??_C@_0DH@CFKJPKIA@ures_swap?$CI?$CJ?4udata_swapInvStringB@
	mov	ecx, DWORD PTR _ds$[ebp]
	push	ecx
	call	_udata_printError_56
	add	esp, 12					; 0000000cH
; Line 1119
	xor	eax, eax
	jmp	$LN31@ures_swap_
$LN11@ures_swap_:
; Line 1123
	mov	eax, DWORD PTR _keysTop$[ebp]
	cmp	eax, DWORD PTR _resBottom$[ebp]
	jge	SHORT $LN10@ures_swap_
; Line 1124
	mov	esi, esp
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _keysTop$[ebp]
	mov	edx, DWORD PTR _outBundle$10129[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	push	eax
	mov	ecx, DWORD PTR _resBottom$[ebp]
	sub	ecx, DWORD PTR _keysTop$[ebp]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR _keysTop$[ebp]
	mov	eax, DWORD PTR _inBundle$[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	push	ecx
	mov	edx, DWORD PTR _ds$[ebp]
	push	edx
	mov	eax, DWORD PTR _ds$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	call	ecx
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1125
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN10@ures_swap_
; Line 1126
	mov	eax, DWORD PTR _resBottom$[ebp]
	sub	eax, DWORD PTR _keysTop$[ebp]
	shl	eax, 1
	push	eax
	push	OFFSET ??_C@_0DC@FKKCKLIN@ures_swap?$CI?$CJ?4swapArray16?$CI16?9bit?5u@
	mov	ecx, DWORD PTR _ds$[ebp]
	push	ecx
	call	_udata_printError_56
	add	esp, 12					; 0000000cH
; Line 1127
	xor	eax, eax
	jmp	$LN31@ures_swap_
$LN10@ures_swap_:
; Line 1132
	mov	eax, DWORD PTR _outBundle$10129[ebp]
	mov	DWORD PTR _tempTable$[ebp], eax
; Line 1133
	movzx	eax, BYTE PTR _tempTable$[ebp+20]
	cmp	eax, 1
	jg	SHORT $LN7@ures_swap_
	cmp	DWORD PTR _maxTableLength$[ebp], 200	; 000000c8H
	jg	SHORT $LN8@ures_swap_
$LN7@ures_swap_:
; Line 1134
	lea	eax, DWORD PTR _rows$[ebp]
	mov	DWORD PTR _tempTable$[ebp+4], eax
; Line 1135
	lea	eax, DWORD PTR _resort$[ebp]
	mov	DWORD PTR _tempTable$[ebp+8], eax
; Line 1136
	jmp	SHORT $LN6@ures_swap_
$LN8@ures_swap_:
; Line 1137
	mov	eax, DWORD PTR _maxTableLength$[ebp]
	shl	eax, 2
	mov	ecx, DWORD PTR _maxTableLength$[ebp]
	lea	edx, DWORD PTR [eax+ecx*8]
	push	edx
	call	_uprv_malloc_56
	add	esp, 4
	mov	DWORD PTR _tempTable$[ebp+4], eax
; Line 1138
	cmp	DWORD PTR _tempTable$[ebp+4], 0
	jne	SHORT $LN5@ures_swap_
; Line 1140
	mov	eax, DWORD PTR _maxTableLength$[ebp]
	push	eax
	push	OFFSET ??_C@_0EM@IJPGONAP@ures_swap?$CI?$CJ?3?5unable?5to?5allocate?5@
	mov	ecx, DWORD PTR _ds$[ebp]
	push	ecx
	call	_udata_printError_56
	add	esp, 12					; 0000000cH
; Line 1141
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 7
; Line 1142
	mov	eax, DWORD PTR _tempTable$[ebp+12]
	lea	ecx, DWORD PTR _stackResFlags$10132[ebp]
	cmp	eax, ecx
	je	SHORT $LN4@ures_swap_
; Line 1143
	mov	eax, DWORD PTR _tempTable$[ebp+12]
	push	eax
	call	_uprv_free_56
	add	esp, 4
$LN4@ures_swap_:
; Line 1145
	xor	eax, eax
	jmp	$LN31@ures_swap_
$LN5@ures_swap_:
; Line 1147
	mov	eax, DWORD PTR _maxTableLength$[ebp]
	mov	ecx, DWORD PTR _tempTable$[ebp+4]
	lea	edx, DWORD PTR [ecx+eax*8]
	mov	DWORD PTR _tempTable$[ebp+8], edx
$LN6@ures_swap_:
; Line 1151
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	lea	ecx, DWORD PTR _tempTable$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _rootRes$[ebp]
	push	edx
	mov	eax, DWORD PTR _outBundle$10129[ebp]
	push	eax
	mov	ecx, DWORD PTR _inBundle$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ds$[ebp]
	push	edx
	call	_ures_swapResource
	add	esp, 28					; 0000001cH
; Line 1152
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN3@ures_swap_
; Line 1154
	mov	eax, DWORD PTR _rootRes$[ebp]
	push	eax
	push	OFFSET ??_C@_0CJ@NFBMAAND@ures_swapResource?$CIroot?5res?$DN?$CF08x?$CJ@
	mov	ecx, DWORD PTR _ds$[ebp]
	push	ecx
	call	_udata_printError_56
	add	esp, 12					; 0000000cH
$LN3@ures_swap_:
; Line 1157
	mov	eax, DWORD PTR _tempTable$[ebp+4]
	lea	ecx, DWORD PTR _rows$[ebp]
	cmp	eax, ecx
	je	SHORT $LN2@ures_swap_
; Line 1158
	mov	eax, DWORD PTR _tempTable$[ebp+4]
	push	eax
	call	_uprv_free_56
	add	esp, 4
$LN2@ures_swap_:
; Line 1160
	mov	eax, DWORD PTR _tempTable$[ebp+12]
	lea	ecx, DWORD PTR _stackResFlags$10132[ebp]
	cmp	eax, ecx
	je	SHORT $LN1@ures_swap_
; Line 1161
	mov	eax, DWORD PTR _tempTable$[ebp+12]
	push	eax
	call	_uprv_free_56
	add	esp, 4
$LN1@ures_swap_:
; Line 1165
	mov	esi, esp
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _outBundle$10129[ebp]
	push	ecx
	mov	edx, DWORD PTR _keysBottom$[ebp]
	shl	edx, 2
	push	edx
	mov	eax, DWORD PTR _inBundle$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ds$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ds$[ebp]
	mov	eax, DWORD PTR [edx+28]
	call	eax
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN16@ures_swap_:
; Line 1168
	mov	eax, DWORD PTR _top$[ebp]
	mov	ecx, DWORD PTR _headerSize$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]
$LN31@ures_swap_:
; Line 1169
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN38@ures_swap_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 3620				; 00000e24H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN38@ures_swap_:
	DD	4
	DD	$LN37@ures_swap_
$LN37@ures_swap_:
	DD	-1668					; fffff97cH
	DD	1600					; 00000640H
	DD	$LN33@ures_swap_
	DD	-2476					; fffff654H
	DD	800					; 00000320H
	DD	$LN34@ures_swap_
	DD	-2508					; fffff634H
	DD	24					; 00000018H
	DD	$LN35@ures_swap_
	DD	-3412					; fffff2acH
	DD	800					; 00000320H
	DD	$LN36@ures_swap_
$LN36@ures_swap_:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	70					; 00000046H
	DB	108					; 0000006cH
	DB	97					; 00000061H
	DB	103					; 00000067H
	DB	115					; 00000073H
	DB	0
$LN35@ures_swap_:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	84					; 00000054H
	DB	97					; 00000061H
	DB	98					; 00000062H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	0
$LN34@ures_swap_:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	116					; 00000074H
	DB	0
$LN33@ures_swap_:
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	119					; 00000077H
	DB	115					; 00000073H
	DB	0
_ures_swap_56 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DM@JKJIHGDG@ures_swapResource?$CIarray?5res?$DN?$CF08x@ ; `string'
PUBLIC	??_C@_0ED@GKIPNJCO@ures_swapResource?$CItable?5res?$DN?$CF08x@ ; `string'
PUBLIC	??_C@_0DM@GDNJIOPO@ures_swapResource?$CItable?5res?$DN?$CF08x@ ; `string'
EXTRN	_uprv_sortArray_56:PROC
EXTRN	_ucol_swap_56:PROC
EXTRN	_ucol_looksLikeCollationBinary_56:PROC
;	COMDAT ??_C@_0DM@JKJIHGDG@ures_swapResource?$CIarray?5res?$DN?$CF08x@
CONST	SEGMENT
??_C@_0DM@JKJIHGDG@ures_swapResource?$CIarray?5res?$DN?$CF08x@ DB 'ures_s'
	DB	'wapResource(array res=%08x)[%d].recurse(%08x) failed', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0ED@GKIPNJCO@ures_swapResource?$CItable?5res?$DN?$CF08x@
CONST	SEGMENT
??_C@_0ED@GKIPNJCO@ures_swapResource?$CItable?5res?$DN?$CF08x@ DB 'ures_s'
	DB	'wapResource(table res=%08x).uprv_sortArray(%d items) failed', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0DM@GDNJIOPO@ures_swapResource?$CItable?5res?$DN?$CF08x@
CONST	SEGMENT
??_C@_0DM@GDNJIOPO@ures_swapResource?$CItable?5res?$DN?$CF08x@ DB 'ures_s'
	DB	'wapResource(table res=%08x)[%d].recurse(%08x) failed', 0aH, 00H ; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT _ures_swapResource
_TEXT	SEGMENT
tv419 = -428						; size = 4
tv212 = -428						; size = 4
tv195 = -428						; size = 4
tv415 = -424						; size = 4
tv208 = -424						; size = 4
tv191 = -424						; size = 4
tv172 = -424						; size = 4
tv95 = -424						; size = 4
tv65 = -424						; size = 4
_i$10067 = -224						; size = 4
_item$10066 = -212					; size = 4
_r$10057 = -200						; size = 4
_rKey32$10050 = -188					; size = 4
_rKey16$10041 = -176					; size = 4
_keyOffset$10017 = -164					; size = 4
_keyOffset$10013 = -152					; size = 4
_itemKey$10010 = -140					; size = 4
_oldIndex$9996 = -128					; size = 4
_i$9995 = -116						; size = 4
_item$9994 = -104					; size = 4
_qKey32$9993 = -92					; size = 4
_pKey32$9992 = -80					; size = 4
_qKey16$9991 = -68					; size = 4
_pKey16$9990 = -56					; size = 4
_count$ = -44						; size = 4
_offset$ = -32						; size = 4
_q$ = -20						; size = 4
_p$ = -8						; size = 4
_ds$ = 8						; size = 4
_inBundle$ = 12						; size = 4
_outBundle$ = 16					; size = 4
_res$ = 20						; size = 4
_key$ = 24						; size = 4
_pTempTable$ = 28					; size = 4
_pErrorCode$ = 32					; size = 4
_ures_swapResource PROC					; COMDAT
; Line 720
	push	ebp
	mov	ebp, esp
	sub	esp, 428				; 000001acH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-428]
	mov	ecx, 107				; 0000006bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 725
	mov	eax, DWORD PTR _res$[ebp]
	shr	eax, 28					; 0000001cH
	mov	DWORD PTR tv65[ebp], eax
	cmp	DWORD PTR tv65[ebp], 5
	jl	SHORT $LN63@ures_swapR
	cmp	DWORD PTR tv65[ebp], 7
	jle	SHORT $LN62@ures_swapR
	cmp	DWORD PTR tv65[ebp], 9
	je	SHORT $LN62@ures_swapR
	jmp	SHORT $LN63@ures_swapR
$LN62@ures_swapR:
; Line 731
	jmp	$LN65@ures_swapR
$LN63@ures_swapR:
; Line 737
	mov	eax, DWORD PTR _res$[ebp]
	and	eax, 268435455				; 0fffffffH
	mov	DWORD PTR _offset$[ebp], eax
; Line 738
	jne	SHORT $LN60@ures_swapR
; Line 740
	jmp	$LN65@ures_swapR
$LN60@ures_swapR:
; Line 742
	mov	eax, DWORD PTR _offset$[ebp]
	sar	eax, 5
	mov	ecx, DWORD PTR _pTempTable$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	ecx, DWORD PTR _offset$[ebp]
	and	ecx, 31					; 0000001fH
	mov	esi, 1
	shl	esi, cl
	and	esi, DWORD PTR [edx+eax*4]
	je	SHORT $LN59@ures_swapR
; Line 744
	jmp	$LN65@ures_swapR
; Line 745
	jmp	SHORT $LN58@ures_swapR
$LN59@ures_swapR:
; Line 747
	mov	eax, DWORD PTR _offset$[ebp]
	sar	eax, 5
	mov	ecx, DWORD PTR _pTempTable$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	ecx, DWORD PTR _offset$[ebp]
	and	ecx, 31					; 0000001fH
	mov	esi, 1
	shl	esi, cl
	or	esi, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR _offset$[ebp]
	sar	eax, 5
	mov	ecx, DWORD PTR _pTempTable$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+eax*4], esi
$LN58@ures_swapR:
; Line 750
	mov	eax, DWORD PTR _offset$[ebp]
	mov	ecx, DWORD PTR _inBundle$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _p$[ebp], edx
; Line 751
	mov	eax, DWORD PTR _offset$[ebp]
	mov	ecx, DWORD PTR _outBundle$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _q$[ebp], edx
; Line 753
	mov	eax, DWORD PTR _res$[ebp]
	shr	eax, 28					; 0000001cH
	mov	DWORD PTR tv95[ebp], eax
	cmp	DWORD PTR tv95[ebp], 14			; 0000000eH
	ja	$LN1@ures_swapR
	mov	ecx, DWORD PTR tv95[ebp]
	movzx	edx, BYTE PTR $LN69@ures_swapR[ecx]
	jmp	DWORD PTR $LN70@ures_swapR[edx*4]
$LN55@ures_swapR:
; Line 757
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _ds$[ebp]
	push	edx
	call	_udata_readInt32_56
	add	esp, 8
	mov	DWORD PTR _count$[ebp], eax
; Line 759
	mov	esi, esp
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _q$[ebp]
	push	ecx
	push	4
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	eax, DWORD PTR _ds$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ds$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	call	edx
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 761
	mov	esi, esp
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _q$[ebp]
	add	ecx, 4
	push	ecx
	mov	edx, DWORD PTR _count$[ebp]
	shl	edx, 1
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _ds$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ds$[ebp]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 762
	jmp	$LN65@ures_swapR
$LN54@ures_swapR:
; Line 764
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _ds$[ebp]
	push	edx
	call	_udata_readInt32_56
	add	esp, 8
	mov	DWORD PTR _count$[ebp], eax
; Line 766
	mov	esi, esp
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _q$[ebp]
	push	ecx
	push	4
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	eax, DWORD PTR _ds$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ds$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	call	edx
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 778
	cmp	DWORD PTR _key$[ebp], 0
	je	$LN53@ures_swapR
	mov	eax, DWORD PTR _key$[ebp]
	cmp	eax, DWORD PTR _gUnknownKey
	je	SHORT $LN67@ures_swapR
	mov	esi, esp
	push	14					; 0000000eH
	push	OFFSET _gCollationBinKey
	push	-1
	mov	ecx, DWORD PTR _key$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ds$[ebp]
	push	edx
	mov	eax, DWORD PTR _ds$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	call	ecx
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
	neg	eax
	sbb	eax, eax
	add	eax, 1
	mov	DWORD PTR tv172[ebp], eax
	jmp	SHORT $LN68@ures_swapR
$LN67@ures_swapR:
	mov	edx, DWORD PTR _count$[ebp]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _ds$[ebp]
	push	ecx
	call	_ucol_looksLikeCollationBinary_56
	add	esp, 12					; 0000000cH
	movsx	edx, al
	mov	DWORD PTR tv172[ebp], edx
$LN68@ures_swapR:
	cmp	DWORD PTR tv172[ebp], 0
	je	SHORT $LN53@ures_swapR
; Line 779
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _q$[ebp]
	add	ecx, 4
	push	ecx
	mov	edx, DWORD PTR _count$[ebp]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _ds$[ebp]
	push	ecx
	call	_ucol_swap_56
	add	esp, 20					; 00000014H
$LN53@ures_swapR:
; Line 782
	jmp	$LN65@ures_swapR
$LN52@ures_swapR:
; Line 795
	mov	eax, DWORD PTR _res$[ebp]
	shr	eax, 28					; 0000001cH
	cmp	eax, 2
	jne	$LN51@ures_swapR
; Line 797
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR _pKey16$9990[ebp], eax
; Line 798
	mov	eax, DWORD PTR _q$[ebp]
	mov	DWORD PTR _qKey16$9991[ebp], eax
; Line 799
	mov	esi, esp
	mov	eax, DWORD PTR _pKey16$9990[ebp]
	movzx	ecx, WORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _ds$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	movzx	ecx, ax
	mov	DWORD PTR _count$[ebp], ecx
; Line 801
	mov	DWORD PTR _qKey32$9993[ebp], 0
	mov	eax, DWORD PTR _qKey32$9993[ebp]
	mov	DWORD PTR _pKey32$9992[ebp], eax
; Line 804
	mov	eax, DWORD PTR _qKey16$9991[ebp]
	mov	DWORD PTR tv191[ebp], eax
	mov	ecx, DWORD PTR _qKey16$9991[ebp]
	add	ecx, 2
	mov	DWORD PTR _qKey16$9991[ebp], ecx
	mov	edx, DWORD PTR _pKey16$9990[ebp]
	mov	DWORD PTR tv195[ebp], edx
	mov	eax, DWORD PTR _pKey16$9990[ebp]
	add	eax, 2
	mov	DWORD PTR _pKey16$9990[ebp], eax
	mov	esi, esp
	mov	ecx, DWORD PTR _pErrorCode$[ebp]
	push	ecx
	mov	edx, DWORD PTR tv191[ebp]
	push	edx
	push	2
	mov	eax, DWORD PTR tv195[ebp]
	push	eax
	mov	ecx, DWORD PTR _ds$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ds$[ebp]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 806
	mov	eax, DWORD PTR _count$[ebp]
	add	eax, 2
	cdq
	sub	eax, edx
	sar	eax, 1
	add	eax, DWORD PTR _offset$[ebp]
	mov	DWORD PTR _offset$[ebp], eax
; Line 807
	jmp	$LN50@ures_swapR
$LN51@ures_swapR:
; Line 809
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR _pKey32$9992[ebp], eax
; Line 810
	mov	eax, DWORD PTR _q$[ebp]
	mov	DWORD PTR _qKey32$9993[ebp], eax
; Line 811
	mov	eax, DWORD PTR _pKey32$9992[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _ds$[ebp]
	push	edx
	call	_udata_readInt32_56
	add	esp, 8
	mov	DWORD PTR _count$[ebp], eax
; Line 813
	mov	DWORD PTR _qKey16$9991[ebp], 0
	mov	eax, DWORD PTR _qKey16$9991[ebp]
	mov	DWORD PTR _pKey16$9990[ebp], eax
; Line 816
	mov	eax, DWORD PTR _qKey32$9993[ebp]
	mov	DWORD PTR tv208[ebp], eax
	mov	ecx, DWORD PTR _qKey32$9993[ebp]
	add	ecx, 4
	mov	DWORD PTR _qKey32$9993[ebp], ecx
	mov	edx, DWORD PTR _pKey32$9992[ebp]
	mov	DWORD PTR tv212[ebp], edx
	mov	eax, DWORD PTR _pKey32$9992[ebp]
	add	eax, 4
	mov	DWORD PTR _pKey32$9992[ebp], eax
	mov	esi, esp
	mov	ecx, DWORD PTR _pErrorCode$[ebp]
	push	ecx
	mov	edx, DWORD PTR tv208[ebp]
	push	edx
	push	4
	mov	eax, DWORD PTR tv212[ebp]
	push	eax
	mov	ecx, DWORD PTR _ds$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ds$[ebp]
	mov	eax, DWORD PTR [edx+28]
	call	eax
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 818
	mov	eax, DWORD PTR _count$[ebp]
	mov	ecx, DWORD PTR _offset$[ebp]
	lea	edx, DWORD PTR [ecx+eax+1]
	mov	DWORD PTR _offset$[ebp], edx
$LN50@ures_swapR:
; Line 821
	cmp	DWORD PTR _count$[ebp], 0
	jne	SHORT $LN49@ures_swapR
; Line 822
	jmp	$LN65@ures_swapR
$LN49@ures_swapR:
; Line 825
	mov	eax, DWORD PTR _offset$[ebp]
	mov	ecx, DWORD PTR _inBundle$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _p$[ebp], edx
; Line 826
	mov	eax, DWORD PTR _offset$[ebp]
	mov	ecx, DWORD PTR _outBundle$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _q$[ebp], edx
; Line 829
	mov	DWORD PTR _i$9995[ebp], 0
	jmp	SHORT $LN48@ures_swapR
$LN47@ures_swapR:
	mov	eax, DWORD PTR _i$9995[ebp]
	add	eax, 1
	mov	DWORD PTR _i$9995[ebp], eax
$LN48@ures_swapR:
	mov	eax, DWORD PTR _i$9995[ebp]
	cmp	eax, DWORD PTR _count$[ebp]
	jge	$LN46@ures_swapR
; Line 830
	mov	eax, DWORD PTR _gUnknownKey
	mov	DWORD PTR _itemKey$10010[ebp], eax
; Line 831
	cmp	DWORD PTR _pKey16$9990[ebp], 0
	je	SHORT $LN45@ures_swapR
; Line 832
	mov	esi, esp
	mov	eax, DWORD PTR _i$9995[ebp]
	mov	ecx, DWORD PTR _pKey16$9990[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	push	edx
	mov	eax, DWORD PTR _ds$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	movzx	edx, ax
	mov	DWORD PTR _keyOffset$10013[ebp], edx
; Line 833
	mov	eax, DWORD PTR _pTempTable$[ebp]
	mov	ecx, DWORD PTR _keyOffset$10013[ebp]
	cmp	ecx, DWORD PTR [eax+16]
	jge	SHORT $LN44@ures_swapR
; Line 834
	mov	eax, DWORD PTR _outBundle$[ebp]
	add	eax, DWORD PTR _keyOffset$10013[ebp]
	mov	DWORD PTR _itemKey$10010[ebp], eax
$LN44@ures_swapR:
; Line 836
	jmp	SHORT $LN43@ures_swapR
$LN45@ures_swapR:
; Line 837
	mov	eax, DWORD PTR _i$9995[ebp]
	mov	ecx, DWORD PTR _pKey32$9992[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	push	edx
	mov	eax, DWORD PTR _ds$[ebp]
	push	eax
	call	_udata_readInt32_56
	add	esp, 8
	mov	DWORD PTR _keyOffset$10017[ebp], eax
; Line 838
	cmp	DWORD PTR _keyOffset$10017[ebp], 0
	jl	SHORT $LN43@ures_swapR
; Line 839
	mov	eax, DWORD PTR _outBundle$[ebp]
	add	eax, DWORD PTR _keyOffset$10017[ebp]
	mov	DWORD PTR _itemKey$10010[ebp], eax
$LN43@ures_swapR:
; Line 842
	mov	esi, esp
	mov	eax, DWORD PTR _i$9995[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	push	edx
	mov	eax, DWORD PTR _ds$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _item$9994[ebp], eax
; Line 843
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pTempTable$[ebp]
	push	ecx
	mov	edx, DWORD PTR _itemKey$10010[ebp]
	push	edx
	mov	eax, DWORD PTR _item$9994[ebp]
	push	eax
	mov	ecx, DWORD PTR _outBundle$[ebp]
	push	ecx
	mov	edx, DWORD PTR _inBundle$[ebp]
	push	edx
	mov	eax, DWORD PTR _ds$[ebp]
	push	eax
	call	_ures_swapResource
	add	esp, 28					; 0000001cH
; Line 844
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN41@ures_swapR
; Line 846
	mov	eax, DWORD PTR _item$9994[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$9995[ebp]
	push	ecx
	mov	edx, DWORD PTR _res$[ebp]
	push	edx
	push	OFFSET ??_C@_0DM@GDNJIOPO@ures_swapResource?$CItable?5res?$DN?$CF08x@
	mov	eax, DWORD PTR _ds$[ebp]
	push	eax
	call	_udata_printError_56
	add	esp, 20					; 00000014H
; Line 847
	jmp	$LN65@ures_swapR
$LN41@ures_swapR:
; Line 849
	jmp	$LN47@ures_swapR
$LN46@ures_swapR:
; Line 851
	mov	eax, DWORD PTR _pTempTable$[ebp]
	movzx	ecx, BYTE PTR [eax+20]
	cmp	ecx, 1
	jg	SHORT $LN39@ures_swapR
	mov	eax, DWORD PTR _ds$[ebp]
	movzx	ecx, BYTE PTR [eax+1]
	mov	edx, DWORD PTR _ds$[ebp]
	movzx	eax, BYTE PTR [edx+3]
	cmp	ecx, eax
	jne	$LN40@ures_swapR
$LN39@ures_swapR:
; Line 853
	cmp	DWORD PTR _pKey16$9990[ebp], 0
	je	SHORT $LN38@ures_swapR
; Line 854
	mov	esi, esp
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _qKey16$9991[ebp]
	push	ecx
	mov	edx, DWORD PTR _count$[ebp]
	shl	edx, 1
	push	edx
	mov	eax, DWORD PTR _pKey16$9990[ebp]
	push	eax
	mov	ecx, DWORD PTR _ds$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ds$[ebp]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 855
	mov	esi, esp
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _q$[ebp]
	push	ecx
	mov	edx, DWORD PTR _count$[ebp]
	shl	edx, 2
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ds$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ds$[ebp]
	mov	eax, DWORD PTR [edx+28]
	call	eax
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 856
	jmp	SHORT $LN37@ures_swapR
$LN38@ures_swapR:
; Line 858
	mov	esi, esp
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _qKey32$9993[ebp]
	push	ecx
	mov	edx, DWORD PTR _count$[ebp]
	shl	edx, 1
	shl	edx, 2
	push	edx
	mov	eax, DWORD PTR _pKey32$9992[ebp]
	push	eax
	mov	ecx, DWORD PTR _ds$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ds$[ebp]
	mov	eax, DWORD PTR [edx+28]
	call	eax
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN37@ures_swapR:
; Line 860
	jmp	$LN65@ures_swapR
$LN40@ures_swapR:
; Line 871
	cmp	DWORD PTR _pKey16$9990[ebp], 0
	je	SHORT $LN36@ures_swapR
; Line 872
	mov	DWORD PTR _i$9995[ebp], 0
	jmp	SHORT $LN35@ures_swapR
$LN34@ures_swapR:
	mov	eax, DWORD PTR _i$9995[ebp]
	add	eax, 1
	mov	DWORD PTR _i$9995[ebp], eax
$LN35@ures_swapR:
	mov	eax, DWORD PTR _i$9995[ebp]
	cmp	eax, DWORD PTR _count$[ebp]
	jge	SHORT $LN33@ures_swapR
; Line 873
	mov	esi, esp
	mov	eax, DWORD PTR _i$9995[ebp]
	mov	ecx, DWORD PTR _pKey16$9990[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	push	edx
	mov	eax, DWORD PTR _ds$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	edx, DWORD PTR _pTempTable$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	movzx	edx, ax
	mov	eax, DWORD PTR _i$9995[ebp]
	mov	DWORD PTR [ecx+eax*8], edx
; Line 874
	mov	eax, DWORD PTR _pTempTable$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _i$9995[ebp]
	mov	eax, DWORD PTR _i$9995[ebp]
	mov	DWORD PTR [ecx+edx*8+4], eax
; Line 875
	jmp	SHORT $LN34@ures_swapR
$LN33@ures_swapR:
; Line 876
	jmp	SHORT $LN32@ures_swapR
$LN36@ures_swapR:
; Line 877
	mov	DWORD PTR _i$9995[ebp], 0
	jmp	SHORT $LN31@ures_swapR
$LN30@ures_swapR:
	mov	eax, DWORD PTR _i$9995[ebp]
	add	eax, 1
	mov	DWORD PTR _i$9995[ebp], eax
$LN31@ures_swapR:
	mov	eax, DWORD PTR _i$9995[ebp]
	cmp	eax, DWORD PTR _count$[ebp]
	jge	SHORT $LN32@ures_swapR
; Line 878
	mov	eax, DWORD PTR _i$9995[ebp]
	mov	ecx, DWORD PTR _pKey32$9992[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	push	edx
	mov	eax, DWORD PTR _ds$[ebp]
	push	eax
	call	_udata_readInt32_56
	add	esp, 8
	mov	ecx, DWORD PTR _pTempTable$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _i$9995[ebp]
	mov	DWORD PTR [edx+ecx*8], eax
; Line 879
	mov	eax, DWORD PTR _pTempTable$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _i$9995[ebp]
	mov	eax, DWORD PTR _i$9995[ebp]
	mov	DWORD PTR [ecx+edx*8+4], eax
; Line 880
	jmp	SHORT $LN30@ures_swapR
$LN32@ures_swapR:
; Line 884
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _pTempTable$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	push	OFFSET _ures_compareRows
	push	8
	mov	eax, DWORD PTR _count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pTempTable$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	_uprv_sortArray_56
	add	esp, 28					; 0000001cH
; Line 885
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN28@ures_swapR
; Line 887
	mov	eax, DWORD PTR _count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _res$[ebp]
	push	ecx
	push	OFFSET ??_C@_0ED@GKIPNJCO@ures_swapResource?$CItable?5res?$DN?$CF08x@
	mov	edx, DWORD PTR _ds$[ebp]
	push	edx
	call	_udata_printError_56
	add	esp, 16					; 00000010H
; Line 888
	jmp	$LN65@ures_swapR
$LN28@ures_swapR:
; Line 899
	cmp	DWORD PTR _pKey16$9990[ebp], 0
	je	$LN27@ures_swapR
; Line 902
	mov	eax, DWORD PTR _pKey16$9990[ebp]
	cmp	eax, DWORD PTR _qKey16$9991[ebp]
	je	SHORT $LN26@ures_swapR
; Line 903
	mov	eax, DWORD PTR _qKey16$9991[ebp]
	mov	DWORD PTR _rKey16$10041[ebp], eax
; Line 904
	jmp	SHORT $LN25@ures_swapR
$LN26@ures_swapR:
; Line 905
	mov	eax, DWORD PTR _pTempTable$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _rKey16$10041[ebp], ecx
$LN25@ures_swapR:
; Line 907
	mov	DWORD PTR _i$9995[ebp], 0
	jmp	SHORT $LN24@ures_swapR
$LN23@ures_swapR:
	mov	eax, DWORD PTR _i$9995[ebp]
	add	eax, 1
	mov	DWORD PTR _i$9995[ebp], eax
$LN24@ures_swapR:
	mov	eax, DWORD PTR _i$9995[ebp]
	cmp	eax, DWORD PTR _count$[ebp]
	jge	SHORT $LN22@ures_swapR
; Line 908
	mov	eax, DWORD PTR _pTempTable$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _i$9995[ebp]
	mov	eax, DWORD PTR [ecx+edx*8+4]
	mov	DWORD PTR _oldIndex$9996[ebp], eax
; Line 909
	mov	esi, esp
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$9995[ebp]
	mov	edx, DWORD PTR _rKey16$10041[ebp]
	lea	eax, DWORD PTR [edx+ecx*2]
	push	eax
	push	2
	mov	ecx, DWORD PTR _oldIndex$9996[ebp]
	mov	edx, DWORD PTR _pKey16$9990[ebp]
	lea	eax, DWORD PTR [edx+ecx*2]
	push	eax
	mov	ecx, DWORD PTR _ds$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ds$[ebp]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 910
	jmp	SHORT $LN23@ures_swapR
$LN22@ures_swapR:
; Line 911
	mov	eax, DWORD PTR _qKey16$9991[ebp]
	cmp	eax, DWORD PTR _rKey16$10041[ebp]
	je	SHORT $LN21@ures_swapR
; Line 912
	push	1
	mov	eax, DWORD PTR _rKey16$10041[ebp]
	push	eax
	call	_uprv_checkValidMemory
	add	esp, 8
	mov	ecx, DWORD PTR _count$[ebp]
	shl	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _rKey16$10041[ebp]
	push	edx
	mov	eax, DWORD PTR _qKey16$9991[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN21@ures_swapR:
; Line 914
	jmp	$LN20@ures_swapR
$LN27@ures_swapR:
; Line 917
	mov	eax, DWORD PTR _pKey32$9992[ebp]
	cmp	eax, DWORD PTR _qKey32$9993[ebp]
	je	SHORT $LN19@ures_swapR
; Line 918
	mov	eax, DWORD PTR _qKey32$9993[ebp]
	mov	DWORD PTR _rKey32$10050[ebp], eax
; Line 919
	jmp	SHORT $LN18@ures_swapR
$LN19@ures_swapR:
; Line 920
	mov	eax, DWORD PTR _pTempTable$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _rKey32$10050[ebp], ecx
$LN18@ures_swapR:
; Line 922
	mov	DWORD PTR _i$9995[ebp], 0
	jmp	SHORT $LN17@ures_swapR
$LN16@ures_swapR:
	mov	eax, DWORD PTR _i$9995[ebp]
	add	eax, 1
	mov	DWORD PTR _i$9995[ebp], eax
$LN17@ures_swapR:
	mov	eax, DWORD PTR _i$9995[ebp]
	cmp	eax, DWORD PTR _count$[ebp]
	jge	SHORT $LN15@ures_swapR
; Line 923
	mov	eax, DWORD PTR _pTempTable$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _i$9995[ebp]
	mov	eax, DWORD PTR [ecx+edx*8+4]
	mov	DWORD PTR _oldIndex$9996[ebp], eax
; Line 924
	mov	esi, esp
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$9995[ebp]
	mov	edx, DWORD PTR _rKey32$10050[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	push	eax
	push	4
	mov	ecx, DWORD PTR _oldIndex$9996[ebp]
	mov	edx, DWORD PTR _pKey32$9992[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	push	eax
	mov	ecx, DWORD PTR _ds$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ds$[ebp]
	mov	eax, DWORD PTR [edx+28]
	call	eax
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 925
	jmp	SHORT $LN16@ures_swapR
$LN15@ures_swapR:
; Line 926
	mov	eax, DWORD PTR _qKey32$9993[ebp]
	cmp	eax, DWORD PTR _rKey32$10050[ebp]
	je	SHORT $LN20@ures_swapR
; Line 927
	push	1
	mov	eax, DWORD PTR _rKey32$10050[ebp]
	push	eax
	call	_uprv_checkValidMemory
	add	esp, 8
	mov	ecx, DWORD PTR _count$[ebp]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR _rKey32$10050[ebp]
	push	edx
	mov	eax, DWORD PTR _qKey32$9993[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN20@ures_swapR:
; Line 936
	mov	eax, DWORD PTR _p$[ebp]
	cmp	eax, DWORD PTR _q$[ebp]
	je	SHORT $LN13@ures_swapR
; Line 937
	mov	eax, DWORD PTR _q$[ebp]
	mov	DWORD PTR _r$10057[ebp], eax
; Line 938
	jmp	SHORT $LN12@ures_swapR
$LN13@ures_swapR:
; Line 939
	mov	eax, DWORD PTR _pTempTable$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _r$10057[ebp], ecx
$LN12@ures_swapR:
; Line 941
	mov	DWORD PTR _i$9995[ebp], 0
	jmp	SHORT $LN11@ures_swapR
$LN10@ures_swapR:
	mov	eax, DWORD PTR _i$9995[ebp]
	add	eax, 1
	mov	DWORD PTR _i$9995[ebp], eax
$LN11@ures_swapR:
	mov	eax, DWORD PTR _i$9995[ebp]
	cmp	eax, DWORD PTR _count$[ebp]
	jge	SHORT $LN9@ures_swapR
; Line 942
	mov	eax, DWORD PTR _pTempTable$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _i$9995[ebp]
	mov	eax, DWORD PTR [ecx+edx*8+4]
	mov	DWORD PTR _oldIndex$9996[ebp], eax
; Line 943
	mov	esi, esp
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$9995[ebp]
	mov	edx, DWORD PTR _r$10057[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	push	eax
	push	4
	mov	ecx, DWORD PTR _oldIndex$9996[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	push	eax
	mov	ecx, DWORD PTR _ds$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ds$[ebp]
	mov	eax, DWORD PTR [edx+28]
	call	eax
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 944
	jmp	SHORT $LN10@ures_swapR
$LN9@ures_swapR:
; Line 945
	mov	eax, DWORD PTR _q$[ebp]
	cmp	eax, DWORD PTR _r$10057[ebp]
	je	SHORT $LN8@ures_swapR
; Line 946
	push	1
	mov	eax, DWORD PTR _r$10057[ebp]
	push	eax
	call	_uprv_checkValidMemory
	add	esp, 8
	mov	ecx, DWORD PTR _count$[ebp]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR _r$10057[ebp]
	push	edx
	mov	eax, DWORD PTR _q$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN8@ures_swapR:
; Line 950
	jmp	$LN65@ures_swapR
$LN7@ures_swapR:
; Line 956
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _ds$[ebp]
	push	edx
	call	_udata_readInt32_56
	add	esp, 8
	mov	DWORD PTR _count$[ebp], eax
; Line 958
	mov	eax, DWORD PTR _q$[ebp]
	mov	DWORD PTR tv415[ebp], eax
	mov	ecx, DWORD PTR _q$[ebp]
	add	ecx, 4
	mov	DWORD PTR _q$[ebp], ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR tv419[ebp], edx
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 4
	mov	DWORD PTR _p$[ebp], eax
	mov	esi, esp
	mov	ecx, DWORD PTR _pErrorCode$[ebp]
	push	ecx
	mov	edx, DWORD PTR tv415[ebp]
	push	edx
	push	4
	mov	eax, DWORD PTR tv419[ebp]
	push	eax
	mov	ecx, DWORD PTR _ds$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ds$[ebp]
	mov	eax, DWORD PTR [edx+28]
	call	eax
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 961
	mov	DWORD PTR _i$10067[ebp], 0
	jmp	SHORT $LN6@ures_swapR
$LN5@ures_swapR:
	mov	eax, DWORD PTR _i$10067[ebp]
	add	eax, 1
	mov	DWORD PTR _i$10067[ebp], eax
$LN6@ures_swapR:
	mov	eax, DWORD PTR _i$10067[ebp]
	cmp	eax, DWORD PTR _count$[ebp]
	jge	$LN4@ures_swapR
; Line 962
	mov	esi, esp
	mov	eax, DWORD PTR _i$10067[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	push	edx
	mov	eax, DWORD PTR _ds$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _item$10066[ebp], eax
; Line 963
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pTempTable$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _item$10066[ebp]
	push	edx
	mov	eax, DWORD PTR _outBundle$[ebp]
	push	eax
	mov	ecx, DWORD PTR _inBundle$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ds$[ebp]
	push	edx
	call	_ures_swapResource
	add	esp, 28					; 0000001cH
; Line 964
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN3@ures_swapR
; Line 966
	mov	eax, DWORD PTR _item$10066[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$10067[ebp]
	push	ecx
	mov	edx, DWORD PTR _res$[ebp]
	push	edx
	push	OFFSET ??_C@_0DM@JKJIHGDG@ures_swapResource?$CIarray?5res?$DN?$CF08x@
	mov	eax, DWORD PTR _ds$[ebp]
	push	eax
	call	_udata_printError_56
	add	esp, 20					; 00000014H
; Line 967
	jmp	$LN65@ures_swapR
$LN3@ures_swapR:
; Line 969
	jmp	$LN5@ures_swapR
$LN4@ures_swapR:
; Line 972
	mov	esi, esp
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _q$[ebp]
	push	ecx
	mov	edx, DWORD PTR _count$[ebp]
	shl	edx, 2
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ds$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ds$[ebp]
	mov	eax, DWORD PTR [edx+28]
	call	eax
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 974
	jmp	SHORT $LN65@ures_swapR
$LN2@ures_swapR:
; Line 976
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _ds$[ebp]
	push	edx
	call	_udata_readInt32_56
	add	esp, 8
	mov	DWORD PTR _count$[ebp], eax
; Line 978
	mov	esi, esp
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _q$[ebp]
	push	ecx
	mov	edx, DWORD PTR _count$[ebp]
	lea	eax, DWORD PTR [edx*4+4]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ds$[ebp]
	push	edx
	mov	eax, DWORD PTR _ds$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	call	ecx
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 979
	jmp	SHORT $LN65@ures_swapR
$LN1@ures_swapR:
; Line 982
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 16			; 00000010H
$LN65@ures_swapR:
; Line 985
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 428				; 000001acH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN70@ures_swapR:
	DD	$LN55@ures_swapR
	DD	$LN54@ures_swapR
	DD	$LN52@ures_swapR
	DD	$LN7@ures_swapR
	DD	$LN2@ures_swapR
	DD	$LN1@ures_swapR
$LN69@ures_swapR:
	DB	0
	DB	1
	DB	2
	DB	0
	DB	2
	DB	5
	DB	5
	DB	5
	DB	3
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	4
_ures_swapResource ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _ures_compareRows
_TEXT	SEGMENT
_keyChars$ = -8						; size = 4
_context$ = 8						; size = 4
_left$ = 12						; size = 4
_right$ = 16						; size = 4
_ures_compareRows PROC					; COMDAT
; Line 681
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 682
	mov	eax, DWORD PTR _context$[ebp]
	mov	DWORD PTR _keyChars$[ebp], eax
; Line 684
	mov	eax, DWORD PTR _right$[ebp]
	mov	ecx, DWORD PTR _keyChars$[ebp]
	add	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _left$[ebp]
	mov	eax, DWORD PTR _keyChars$[ebp]
	add	eax, DWORD PTR [edx]
	push	eax
	call	_strcmp
	add	esp, 8
; Line 685
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ures_compareRows ENDP
_TEXT	ENDS
END
