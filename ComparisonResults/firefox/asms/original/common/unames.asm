; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\mozilla\intl\icu\source\common\unames.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	??_C@_0BA@KNCJAGIK@trail?5surrogate?$AA@	; `string'
PUBLIC	??_C@_0P@HBKEBMBE@lead?5surrogate?$AA@		; `string'
PUBLIC	??_C@_0N@EMFFCICK@noncharacter?$AA@		; `string'
PUBLIC	??_C@_0BC@DCMEFJCO@final?5punctuation?$AA@	; `string'
PUBLIC	??_C@_0BE@HMCKPKNP@initial?5punctuation?$AA@	; `string'
PUBLIC	??_C@_0N@IPFNIPKM@other?5symbol?$AA@		; `string'
PUBLIC	??_C@_0BA@FOBGLIJH@modifier?5symbol?$AA@	; `string'
PUBLIC	??_C@_0BA@EBKJOLCP@currency?5symbol?$AA@	; `string'
PUBLIC	??_C@_0M@MJABMLPL@math?5symbol?$AA@		; `string'
PUBLIC	??_C@_0BC@LLOMBOMH@other?5punctuation?$AA@	; `string'
PUBLIC	??_C@_0BG@OKAKBMAA@connector?5punctuation?$AA@	; `string'
PUBLIC	??_C@_0BA@HPIKIMCG@end?5punctuation?$AA@	; `string'
PUBLIC	??_C@_0BC@HDGMOOOI@start?5punctuation?$AA@	; `string'
PUBLIC	??_C@_0BB@BMJLHGOG@dash?5punctuation?$AA@	; `string'
PUBLIC	??_C@_09DEOFKBLN@surrogate?$AA@			; `string'
PUBLIC	??_C@_0BB@KHCDGPJE@private?5use?5area?$AA@	; `string'
PUBLIC	??_C@_06DLEPGFEF@format?$AA@			; `string'
PUBLIC	??_C@_07MMBOFDEG@control?$AA@			; `string'
PUBLIC	??_C@_0BE@IDKBLJ@paragraph?5separator?$AA@	; `string'
PUBLIC	??_C@_0P@BNGIFMHD@line?5separator?$AA@		; `string'
PUBLIC	??_C@_0BA@KFEMFLMJ@space?5separator?$AA@	; `string'
PUBLIC	??_C@_0N@CHEAAINA@other?5number?$AA@		; `string'
PUBLIC	??_C@_0O@MBBEBJLL@letter?5number?$AA@		; `string'
PUBLIC	??_C@_0BF@HIABEJMH@decimal?5digit?5number?$AA@	; `string'
PUBLIC	??_C@_0BH@NPKIMBLB@combining?5spacing?5mark?$AA@ ; `string'
PUBLIC	??_C@_0P@BBLIMJEG@enclosing?5mark?$AA@		; `string'
PUBLIC	??_C@_0BB@BGPFNGPP@non?5spacing?5mark?$AA@	; `string'
PUBLIC	??_C@_0N@KLILOGNC@other?5letter?$AA@		; `string'
PUBLIC	??_C@_0BA@HKMANBOJ@modifier?5letter?$AA@	; `string'
PUBLIC	??_C@_0BB@GPBNBIAE@titlecase?5letter?$AA@	; `string'
PUBLIC	??_C@_0BB@LLJCJCLI@lowercase?5letter?$AA@	; `string'
PUBLIC	??_C@_0BB@DOLJNJKG@uppercase?5letter?$AA@	; `string'
PUBLIC	??_C@_0L@PAPJJPNE@unassigned?$AA@		; `string'
_BSS	SEGMENT
_uCharNamesData DD 01H DUP (?)
_uCharNames DD	01H DUP (?)
_gCharNamesInitOnce DQ 01H DUP (?)
_gMaxNameLength DD 01H DUP (?)
_gNameSet DD	08H DUP (?)
_BSS	ENDS
;	COMDAT ??_C@_0BA@KNCJAGIK@trail?5surrogate?$AA@
CONST	SEGMENT
??_C@_0BA@KNCJAGIK@trail?5surrogate?$AA@ DB 'trail surrogate', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@HBKEBMBE@lead?5surrogate?$AA@
CONST	SEGMENT
??_C@_0P@HBKEBMBE@lead?5surrogate?$AA@ DB 'lead surrogate', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@EMFFCICK@noncharacter?$AA@
CONST	SEGMENT
??_C@_0N@EMFFCICK@noncharacter?$AA@ DB 'noncharacter', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@DCMEFJCO@final?5punctuation?$AA@
CONST	SEGMENT
??_C@_0BC@DCMEFJCO@final?5punctuation?$AA@ DB 'final punctuation', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@HMCKPKNP@initial?5punctuation?$AA@
CONST	SEGMENT
??_C@_0BE@HMCKPKNP@initial?5punctuation?$AA@ DB 'initial punctuation', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@IPFNIPKM@other?5symbol?$AA@
CONST	SEGMENT
??_C@_0N@IPFNIPKM@other?5symbol?$AA@ DB 'other symbol', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@FOBGLIJH@modifier?5symbol?$AA@
CONST	SEGMENT
??_C@_0BA@FOBGLIJH@modifier?5symbol?$AA@ DB 'modifier symbol', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@EBKJOLCP@currency?5symbol?$AA@
CONST	SEGMENT
??_C@_0BA@EBKJOLCP@currency?5symbol?$AA@ DB 'currency symbol', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@MJABMLPL@math?5symbol?$AA@
CONST	SEGMENT
??_C@_0M@MJABMLPL@math?5symbol?$AA@ DB 'math symbol', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@LLOMBOMH@other?5punctuation?$AA@
CONST	SEGMENT
??_C@_0BC@LLOMBOMH@other?5punctuation?$AA@ DB 'other punctuation', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@OKAKBMAA@connector?5punctuation?$AA@
CONST	SEGMENT
??_C@_0BG@OKAKBMAA@connector?5punctuation?$AA@ DB 'connector punctuation', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@HPIKIMCG@end?5punctuation?$AA@
CONST	SEGMENT
??_C@_0BA@HPIKIMCG@end?5punctuation?$AA@ DB 'end punctuation', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@HDGMOOOI@start?5punctuation?$AA@
CONST	SEGMENT
??_C@_0BC@HDGMOOOI@start?5punctuation?$AA@ DB 'start punctuation', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@BMJLHGOG@dash?5punctuation?$AA@
CONST	SEGMENT
??_C@_0BB@BMJLHGOG@dash?5punctuation?$AA@ DB 'dash punctuation', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09DEOFKBLN@surrogate?$AA@
CONST	SEGMENT
??_C@_09DEOFKBLN@surrogate?$AA@ DB 'surrogate', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@KHCDGPJE@private?5use?5area?$AA@
CONST	SEGMENT
??_C@_0BB@KHCDGPJE@private?5use?5area?$AA@ DB 'private use area', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06DLEPGFEF@format?$AA@
CONST	SEGMENT
??_C@_06DLEPGFEF@format?$AA@ DB 'format', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07MMBOFDEG@control?$AA@
CONST	SEGMENT
??_C@_07MMBOFDEG@control?$AA@ DB 'control', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@IDKBLJ@paragraph?5separator?$AA@
CONST	SEGMENT
??_C@_0BE@IDKBLJ@paragraph?5separator?$AA@ DB 'paragraph separator', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@BNGIFMHD@line?5separator?$AA@
CONST	SEGMENT
??_C@_0P@BNGIFMHD@line?5separator?$AA@ DB 'line separator', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@KFEMFLMJ@space?5separator?$AA@
CONST	SEGMENT
??_C@_0BA@KFEMFLMJ@space?5separator?$AA@ DB 'space separator', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@CHEAAINA@other?5number?$AA@
CONST	SEGMENT
??_C@_0N@CHEAAINA@other?5number?$AA@ DB 'other number', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@MBBEBJLL@letter?5number?$AA@
CONST	SEGMENT
??_C@_0O@MBBEBJLL@letter?5number?$AA@ DB 'letter number', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@HIABEJMH@decimal?5digit?5number?$AA@
CONST	SEGMENT
??_C@_0BF@HIABEJMH@decimal?5digit?5number?$AA@ DB 'decimal digit number', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@NPKIMBLB@combining?5spacing?5mark?$AA@
CONST	SEGMENT
??_C@_0BH@NPKIMBLB@combining?5spacing?5mark?$AA@ DB 'combining spacing ma'
	DB	'rk', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@BBLIMJEG@enclosing?5mark?$AA@
CONST	SEGMENT
??_C@_0P@BBLIMJEG@enclosing?5mark?$AA@ DB 'enclosing mark', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@BGPFNGPP@non?5spacing?5mark?$AA@
CONST	SEGMENT
??_C@_0BB@BGPFNGPP@non?5spacing?5mark?$AA@ DB 'non spacing mark', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@KLILOGNC@other?5letter?$AA@
CONST	SEGMENT
??_C@_0N@KLILOGNC@other?5letter?$AA@ DB 'other letter', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@HKMANBOJ@modifier?5letter?$AA@
CONST	SEGMENT
??_C@_0BA@HKMANBOJ@modifier?5letter?$AA@ DB 'modifier letter', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@GPBNBIAE@titlecase?5letter?$AA@
CONST	SEGMENT
??_C@_0BB@GPBNBIAE@titlecase?5letter?$AA@ DB 'titlecase letter', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@LLJCJCLI@lowercase?5letter?$AA@
CONST	SEGMENT
??_C@_0BB@LLJCJCLI@lowercase?5letter?$AA@ DB 'lowercase letter', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@DOLJNJKG@uppercase?5letter?$AA@
CONST	SEGMENT
??_C@_0BB@DOLJNJKG@uppercase?5letter?$AA@ DB 'uppercase letter', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@PAPJJPNE@unassigned?$AA@
CONST	SEGMENT
??_C@_0L@PAPJJPNE@unassigned?$AA@ DB 'unassigned', 00H	; `string'
CONST	ENDS
CONST	SEGMENT
_DATA_NAME DB	'unames', 00H
	ORG $+1
_DATA_TYPE DB	'icu', 00H
	ORG $+4
_charCatNames DD FLAT:??_C@_0L@PAPJJPNE@unassigned?$AA@
	DD	FLAT:??_C@_0BB@DOLJNJKG@uppercase?5letter?$AA@
	DD	FLAT:??_C@_0BB@LLJCJCLI@lowercase?5letter?$AA@
	DD	FLAT:??_C@_0BB@GPBNBIAE@titlecase?5letter?$AA@
	DD	FLAT:??_C@_0BA@HKMANBOJ@modifier?5letter?$AA@
	DD	FLAT:??_C@_0N@KLILOGNC@other?5letter?$AA@
	DD	FLAT:??_C@_0BB@BGPFNGPP@non?5spacing?5mark?$AA@
	DD	FLAT:??_C@_0P@BBLIMJEG@enclosing?5mark?$AA@
	DD	FLAT:??_C@_0BH@NPKIMBLB@combining?5spacing?5mark?$AA@
	DD	FLAT:??_C@_0BF@HIABEJMH@decimal?5digit?5number?$AA@
	DD	FLAT:??_C@_0O@MBBEBJLL@letter?5number?$AA@
	DD	FLAT:??_C@_0N@CHEAAINA@other?5number?$AA@
	DD	FLAT:??_C@_0BA@KFEMFLMJ@space?5separator?$AA@
	DD	FLAT:??_C@_0P@BNGIFMHD@line?5separator?$AA@
	DD	FLAT:??_C@_0BE@IDKBLJ@paragraph?5separator?$AA@
	DD	FLAT:??_C@_07MMBOFDEG@control?$AA@
	DD	FLAT:??_C@_06DLEPGFEF@format?$AA@
	DD	FLAT:??_C@_0BB@KHCDGPJE@private?5use?5area?$AA@
	DD	FLAT:??_C@_09DEOFKBLN@surrogate?$AA@
	DD	FLAT:??_C@_0BB@BMJLHGOG@dash?5punctuation?$AA@
	DD	FLAT:??_C@_0BC@HDGMOOOI@start?5punctuation?$AA@
	DD	FLAT:??_C@_0BA@HPIKIMCG@end?5punctuation?$AA@
	DD	FLAT:??_C@_0BG@OKAKBMAA@connector?5punctuation?$AA@
	DD	FLAT:??_C@_0BC@LLOMBOMH@other?5punctuation?$AA@
	DD	FLAT:??_C@_0M@MJABMLPL@math?5symbol?$AA@
	DD	FLAT:??_C@_0BA@EBKJOLCP@currency?5symbol?$AA@
	DD	FLAT:??_C@_0BA@FOBGLIJH@modifier?5symbol?$AA@
	DD	FLAT:??_C@_0N@IPFNIPKM@other?5symbol?$AA@
	DD	FLAT:??_C@_0BE@HMCKPKNP@initial?5punctuation?$AA@
	DD	FLAT:??_C@_0BC@DCMEFJCO@final?5punctuation?$AA@
	DD	FLAT:??_C@_0N@EMFFCICK@noncharacter?$AA@
	DD	FLAT:??_C@_0P@HBKEBMBE@lead?5surrogate?$AA@
	DD	FLAT:??_C@_0BA@KNCJAGIK@trail?5surrogate?$AA@
?extChars@?1??calcNameSetsLengths@icu_56@@YACPAW4UErrorCode@@@Z@4QBDB DB '0'
	DB	'123456789ABCDEF<>-', 00H			; `icu_56::calcNameSetsLengths'::`2'::extChars
CONST	ENDS
PUBLIC	??2@YAPAXI@Z					; operator new
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File d:\mozilla\intl\icu\source\common\unicode\utypes.h
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT ??2@YAPAXI@Z
_TEXT	SEGMENT
_q$ = -8						; size = 4
___formal$ = 8						; size = 4
??2@YAPAXI@Z PROC					; operator new, COMDAT
; Line 411
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 412
	mov	DWORD PTR _q$[ebp], 0
; Line 413
	mov	eax, DWORD PTR _q$[ebp]
	mov	BYTE PTR [eax], 5
; Line 414
	mov	eax, DWORD PTR _q$[ebp]
; Line 415
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??2@YAPAXI@Z ENDP					; operator new
_TEXT	ENDS
PUBLIC	??3@YAXPAX@Z					; operator delete
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??3@YAXPAX@Z
_TEXT	SEGMENT
_q$ = -8						; size = 4
___formal$ = 8						; size = 4
??3@YAXPAX@Z PROC					; operator delete, COMDAT
; Line 439
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 440
	mov	DWORD PTR _q$[ebp], 0
; Line 441
	mov	eax, DWORD PTR _q$[ebp]
	mov	BYTE PTR [eax], 5
; Line 442
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??3@YAXPAX@Z ENDP					; operator delete
_TEXT	ENDS
PUBLIC	_u_charName_56
EXTRN	_u_terminateChars_56:PROC
EXTRN	__RTC_CheckEsp:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _u_charName_56
_TEXT	SEGMENT
_length$ = -44						; size = 4
_i$ = -32						; size = 4
_p$ = -20						; size = 4
_algRange$ = -8						; size = 4
_code$ = 8						; size = 4
_nameChoice$ = 12					; size = 4
_buffer$ = 16						; size = 4
_bufferLength$ = 20					; size = 4
_pErrorCode$ = 24					; size = 4
_u_charName_56 PROC					; COMDAT
; File d:\mozilla\intl\icu\source\common\unames.cpp
; Line 1450
	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1457
	cmp	DWORD PTR _pErrorCode$[ebp], 0
	je	SHORT $LN13@u_charName
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN14@u_charName
$LN13@u_charName:
; Line 1458
	xor	eax, eax
	jmp	$LN15@u_charName
; Line 1459
	jmp	SHORT $LN12@u_charName
$LN14@u_charName:
; Line 1461
	cmp	DWORD PTR _nameChoice$[ebp], 4
	jge	SHORT $LN10@u_charName
	cmp	DWORD PTR _bufferLength$[ebp], 0
	jl	SHORT $LN10@u_charName
	cmp	DWORD PTR _bufferLength$[ebp], 0
	jle	SHORT $LN12@u_charName
	cmp	DWORD PTR _buffer$[ebp], 0
	jne	SHORT $LN12@u_charName
$LN10@u_charName:
; Line 1462
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 1
; Line 1463
	xor	eax, eax
	jmp	$LN15@u_charName
$LN12@u_charName:
; Line 1466
	cmp	DWORD PTR _code$[ebp], 1114111		; 0010ffffH
	ja	SHORT $LN8@u_charName
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	call	?isDataLoaded@icu_56@@YACPAW4UErrorCode@@@Z ; icu_56::isDataLoaded
	add	esp, 4
	movsx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN9@u_charName
$LN8@u_charName:
; Line 1467
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _bufferLength$[ebp]
	push	ecx
	mov	edx, DWORD PTR _buffer$[ebp]
	push	edx
	call	_u_terminateChars_56
	add	esp, 16					; 00000010H
	jmp	$LN15@u_charName
$LN9@u_charName:
; Line 1470
	mov	DWORD PTR _length$[ebp], 0
; Line 1473
	mov	eax, DWORD PTR _uCharNames
	mov	ecx, DWORD PTR _uCharNames
	add	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _p$[ebp], ecx
; Line 1474
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _i$[ebp], ecx
; Line 1475
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 4
	mov	DWORD PTR _algRange$[ebp], eax
$LN7@u_charName:
; Line 1476
	cmp	DWORD PTR _i$[ebp], 0
	jbe	SHORT $LN6@u_charName
; Line 1477
	mov	eax, DWORD PTR _algRange$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR _code$[ebp]
	ja	SHORT $LN5@u_charName
	mov	eax, DWORD PTR _algRange$[ebp]
	mov	ecx, DWORD PTR _code$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	ja	SHORT $LN5@u_charName
; Line 1478
	movzx	eax, WORD PTR _bufferLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _buffer$[ebp]
	push	ecx
	mov	edx, DWORD PTR _nameChoice$[ebp]
	push	edx
	mov	eax, DWORD PTR _code$[ebp]
	push	eax
	mov	ecx, DWORD PTR _algRange$[ebp]
	push	ecx
	call	?getAlgName@icu_56@@YAGPAUAlgorithmicRange@1@IW4UCharNameChoice@@PADG@Z ; icu_56::getAlgName
	add	esp, 20					; 00000014H
	movzx	edx, ax
	mov	DWORD PTR _length$[ebp], edx
; Line 1479
	jmp	SHORT $LN6@u_charName
$LN5@u_charName:
; Line 1481
	mov	eax, DWORD PTR _algRange$[ebp]
	movzx	ecx, WORD PTR [eax+10]
	add	ecx, DWORD PTR _algRange$[ebp]
	mov	DWORD PTR _algRange$[ebp], ecx
; Line 1482
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
; Line 1483
	jmp	SHORT $LN7@u_charName
$LN6@u_charName:
; Line 1485
	cmp	DWORD PTR _i$[ebp], 0
	jne	SHORT $LN4@u_charName
; Line 1486
	cmp	DWORD PTR _nameChoice$[ebp], 2
	jne	SHORT $LN3@u_charName
; Line 1487
	movzx	eax, WORD PTR _bufferLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _buffer$[ebp]
	push	ecx
	push	2
	mov	edx, DWORD PTR _code$[ebp]
	push	edx
	mov	eax, DWORD PTR _uCharNames
	push	eax
	call	?getName@icu_56@@YAGPAUUCharNames@1@IW4UCharNameChoice@@PADG@Z ; icu_56::getName
	add	esp, 20					; 00000014H
	movzx	ecx, ax
	mov	DWORD PTR _length$[ebp], ecx
; Line 1488
	cmp	DWORD PTR _length$[ebp], 0
	jne	SHORT $LN2@u_charName
; Line 1490
	movzx	eax, WORD PTR _bufferLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _buffer$[ebp]
	push	ecx
	mov	edx, DWORD PTR _code$[ebp]
	push	edx
	call	?getExtName@icu_56@@YAGIPADG@Z		; icu_56::getExtName
	add	esp, 12					; 0000000cH
	movzx	eax, ax
	mov	DWORD PTR _length$[ebp], eax
$LN2@u_charName:
; Line 1492
	jmp	SHORT $LN4@u_charName
$LN3@u_charName:
; Line 1494
	movzx	eax, WORD PTR _bufferLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _buffer$[ebp]
	push	ecx
	mov	edx, DWORD PTR _nameChoice$[ebp]
	push	edx
	mov	eax, DWORD PTR _code$[ebp]
	push	eax
	mov	ecx, DWORD PTR _uCharNames
	push	ecx
	call	?getName@icu_56@@YAGPAUUCharNames@1@IW4UCharNameChoice@@PADG@Z ; icu_56::getName
	add	esp, 20					; 00000014H
	movzx	edx, ax
	mov	DWORD PTR _length$[ebp], edx
$LN4@u_charName:
; Line 1498
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _length$[ebp]
	push	ecx
	mov	edx, DWORD PTR _bufferLength$[ebp]
	push	edx
	mov	eax, DWORD PTR _buffer$[ebp]
	push	eax
	call	_u_terminateChars_56
	add	esp, 16					; 00000010H
$LN15@u_charName:
; Line 1499
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_u_charName_56 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?U_FAILURE@@YACW4UErrorCode@@@Z
_TEXT	SEGMENT
_code$ = 8						; size = 4
?U_FAILURE@@YACW4UErrorCode@@@Z PROC			; U_FAILURE, COMDAT
; File d:\mozilla\intl\icu\source\common\unicode\utypes.h
; Line 705
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	cmp	DWORD PTR _code$[ebp], 0
	setg	al
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?U_FAILURE@@YACW4UErrorCode@@@Z ENDP			; U_FAILURE
_TEXT	ENDS
PUBLIC	?umtx_initOnce@icu_56@@YAXAAUUInitOnce@1@P6AXAAW4UErrorCode@@@Z1@Z ; icu_56::umtx_initOnce
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?isDataLoaded@icu_56@@YACPAW4UErrorCode@@@Z
_TEXT	SEGMENT
_pErrorCode$ = 8					; size = 4
?isDataLoaded@icu_56@@YACPAW4UErrorCode@@@Z PROC	; icu_56::isDataLoaded, COMDAT
; File d:\mozilla\intl\icu\source\common\unames.cpp
; Line 208
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 209
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	push	OFFSET ?loadCharNames@icu_56@@YAXAAW4UErrorCode@@@Z ; icu_56::loadCharNames
	push	OFFSET _gCharNamesInitOnce
	call	?umtx_initOnce@icu_56@@YAXAAUUInitOnce@1@P6AXAAW4UErrorCode@@@Z1@Z ; icu_56::umtx_initOnce
	add	esp, 12					; 0000000cH
; Line 210
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_SUCCESS@@YACW4UErrorCode@@@Z		; U_SUCCESS
	add	esp, 4
; Line 211
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?isDataLoaded@icu_56@@YACPAW4UErrorCode@@@Z ENDP	; icu_56::isDataLoaded
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?U_SUCCESS@@YACW4UErrorCode@@@Z
_TEXT	SEGMENT
_code$ = 8						; size = 4
?U_SUCCESS@@YACW4UErrorCode@@@Z PROC			; U_SUCCESS, COMDAT
; File d:\mozilla\intl\icu\source\common\unicode\utypes.h
; Line 699
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	cmp	DWORD PTR _code$[ebp], 0
	setle	al
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?U_SUCCESS@@YACW4UErrorCode@@@Z ENDP			; U_SUCCESS
_TEXT	ENDS
PUBLIC	?umtx_loadAcquire@icu_56@@YAHACJ@Z		; icu_56::umtx_loadAcquire
EXTRN	?umtx_initImplPostInit@icu_56@@YAXAAUUInitOnce@1@@Z:PROC ; icu_56::umtx_initImplPostInit
EXTRN	?umtx_initImplPreInit@icu_56@@YACAAUUInitOnce@1@@Z:PROC ; icu_56::umtx_initImplPreInit
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?umtx_initOnce@icu_56@@YAXAAUUInitOnce@1@P6AXAAW4UErrorCode@@@Z1@Z
_TEXT	SEGMENT
_uio$ = 8						; size = 4
_fp$ = 12						; size = 4
_errCode$ = 16						; size = 4
?umtx_initOnce@icu_56@@YAXAAUUInitOnce@1@P6AXAAW4UErrorCode@@@Z1@Z PROC ; icu_56::umtx_initOnce, COMDAT
; File d:\mozilla\intl\icu\source\common\umutex.h
; Line 257
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 258
	mov	eax, DWORD PTR _errCode$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN4@umtx_initO
; Line 259
	jmp	SHORT $LN5@umtx_initO
$LN4@umtx_initO:
; Line 261
	mov	eax, DWORD PTR _uio$[ebp]
	push	eax
	call	?umtx_loadAcquire@icu_56@@YAHACJ@Z	; icu_56::umtx_loadAcquire
	add	esp, 4
	cmp	eax, 2
	je	SHORT $LN3@umtx_initO
	mov	eax, DWORD PTR _uio$[ebp]
	push	eax
	call	?umtx_initImplPreInit@icu_56@@YACAAUUInitOnce@1@@Z ; icu_56::umtx_initImplPreInit
	add	esp, 4
	movsx	ecx, al
	test	ecx, ecx
	je	SHORT $LN3@umtx_initO
; Line 263
	mov	esi, esp
	mov	eax, DWORD PTR _errCode$[ebp]
	push	eax
	call	DWORD PTR _fp$[ebp]
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 264
	mov	eax, DWORD PTR _uio$[ebp]
	mov	ecx, DWORD PTR _errCode$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+4], edx
; Line 265
	mov	eax, DWORD PTR _uio$[ebp]
	push	eax
	call	?umtx_initImplPostInit@icu_56@@YAXAAUUInitOnce@1@@Z ; icu_56::umtx_initImplPostInit
	add	esp, 4
; Line 266
	jmp	SHORT $LN5@umtx_initO
$LN3@umtx_initO:
; Line 268
	mov	eax, DWORD PTR _uio$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN5@umtx_initO
; Line 269
	mov	eax, DWORD PTR _errCode$[ebp]
	mov	ecx, DWORD PTR _uio$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax], edx
$LN5@umtx_initO:
; Line 272
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?umtx_initOnce@icu_56@@YAXAAUUInitOnce@1@P6AXAAW4UErrorCode@@@Z1@Z ENDP ; icu_56::umtx_initOnce
_TEXT	ENDS
EXTRN	__imp__InterlockedCompareExchange@12:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?umtx_loadAcquire@icu_56@@YAHACJ@Z
_TEXT	SEGMENT
_var$ = 8						; size = 4
?umtx_loadAcquire@icu_56@@YAHACJ@Z PROC			; icu_56::umtx_loadAcquire, COMDAT
; Line 102
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 103
	mov	esi, esp
	push	0
	push	0
	mov	eax, DWORD PTR _var$[ebp]
	push	eax
	call	DWORD PTR __imp__InterlockedCompareExchange@12
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 104
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?umtx_loadAcquire@icu_56@@YAHACJ@Z ENDP			; icu_56::umtx_loadAcquire
_TEXT	ENDS
PUBLIC	??_C@_1CA@KPGJIAP@?$AAu?$AAC?$AAh?$AAa?$AAr?$AAN?$AAa?$AAm?$AAe?$AAs?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CI@DCKLDHII@?$AAu?$AAC?$AAh?$AAa?$AAr?$AAN?$AAa?$AAm?$AAe?$AAs?$AAD?$AAa?$AAt?$AAa?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@ ; `string'
PUBLIC	??_C@_1FK@PMLMHPOO@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@ ; `string'
PUBLIC	?__LINE__Var@?1??loadCharNames@icu_56@@YAXAAW4UErrorCode@@@Z@4JA@8fdf9c70 ; `icu_56::loadCharNames'::`2'::__LINE__Var
EXTRN	_ucln_common_registerCleanup_56:PROC
EXTRN	_udata_getMemory_56:PROC
EXTRN	_udata_openChoice_56:PROC
EXTRN	__imp___wassert:PROC
;	COMDAT ??_C@_1CA@KPGJIAP@?$AAu?$AAC?$AAh?$AAa?$AAr?$AAN?$AAa?$AAm?$AAe?$AAs?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@
; File d:\mozilla\intl\icu\source\common\unames.cpp
CONST	SEGMENT
??_C@_1CA@KPGJIAP@?$AAu?$AAC?$AAh?$AAa?$AAr?$AAN?$AAa?$AAm?$AAe?$AAs?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@ DB 'u'
	DB	00H, 'C', 00H, 'h', 00H, 'a', 00H, 'r', 00H, 'N', 00H, 'a', 00H
	DB	'm', 00H, 'e', 00H, 's', 00H, ' ', 00H, '=', 00H, '=', 00H, ' '
	DB	00H, '0', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1CI@DCKLDHII@?$AAu?$AAC?$AAh?$AAa?$AAr?$AAN?$AAa?$AAm?$AAe?$AAs?$AAD?$AAa?$AAt?$AAa?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_1CI@DCKLDHII@?$AAu?$AAC?$AAh?$AAa?$AAr?$AAN?$AAa?$AAm?$AAe?$AAs?$AAD?$AAa?$AAt?$AAa?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@ DB 'u'
	DB	00H, 'C', 00H, 'h', 00H, 'a', 00H, 'r', 00H, 'N', 00H, 'a', 00H
	DB	'm', 00H, 'e', 00H, 's', 00H, 'D', 00H, 'a', 00H, 't', 00H, 'a'
	DB	00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, '0', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1FK@PMLMHPOO@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@
CONST	SEGMENT
??_C@_1FK@PMLMHPOO@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@ DB 'd'
	DB	00H, ':', 00H, '\', 00H, 'm', 00H, 'o', 00H, 'z', 00H, 'i', 00H
	DB	'l', 00H, 'l', 00H, 'a', 00H, '\', 00H, 'i', 00H, 'n', 00H, 't'
	DB	00H, 'l', 00H, '\', 00H, 'i', 00H, 'c', 00H, 'u', 00H, '\', 00H
	DB	's', 00H, 'o', 00H, 'u', 00H, 'r', 00H, 'c', 00H, 'e', 00H, '\'
	DB	00H, 'c', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'o', 00H, 'n', 00H
	DB	'\', 00H, 'u', 00H, 'n', 00H, 'a', 00H, 'm', 00H, 'e', 00H, 's'
	DB	00H, '.', 00H, 'c', 00H, 'p', 00H, 'p', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??loadCharNames@icu_56@@YAXAAW4UErrorCode@@@Z@4JA@8fdf9c70
_DATA	SEGMENT
?__LINE__Var@?1??loadCharNames@icu_56@@YAXAAW4UErrorCode@@@Z@4JA@8fdf9c70 DD 0c1H ; `icu_56::loadCharNames'::`2'::__LINE__Var
; Function compile flags: /Odtp /RTCsu /ZI
_DATA	ENDS
;	COMDAT ?loadCharNames@icu_56@@YAXAAW4UErrorCode@@@Z
_TEXT	SEGMENT
_status$ = 8						; size = 4
?loadCharNames@icu_56@@YAXAAW4UErrorCode@@@Z PROC	; icu_56::loadCharNames, COMDAT
; Line 193
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 194
	cmp	DWORD PTR _uCharNamesData, 0
	je	SHORT $LN5@loadCharNa
	mov	eax, DWORD PTR ?__LINE__Var@?1??loadCharNames@icu_56@@YAXAAW4UErrorCode@@@Z@4JA@8fdf9c70
	add	eax, 1
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1FK@PMLMHPOO@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@
	push	OFFSET ??_C@_1CI@DCKLDHII@?$AAu?$AAC?$AAh?$AAa?$AAr?$AAN?$AAa?$AAm?$AAe?$AAs?$AAD?$AAa?$AAt?$AAa?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN5@loadCharNa:
; Line 195
	cmp	DWORD PTR _uCharNames, 0
	je	SHORT $LN6@loadCharNa
	mov	eax, DWORD PTR ?__LINE__Var@?1??loadCharNames@icu_56@@YAXAAW4UErrorCode@@@Z@4JA@8fdf9c70
	add	eax, 2
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1FK@PMLMHPOO@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@
	push	OFFSET ??_C@_1CA@KPGJIAP@?$AAu?$AAC?$AAh?$AAa?$AAr?$AAN?$AAa?$AAm?$AAe?$AAs?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN6@loadCharNa:
; Line 197
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	push	0
	push	OFFSET ?isAcceptable@icu_56@@YACPAXPBD1PBUUDataInfo@@@Z ; icu_56::isAcceptable
	push	OFFSET _DATA_NAME
	push	OFFSET _DATA_TYPE
	push	0
	call	_udata_openChoice_56
	add	esp, 24					; 00000018H
	mov	DWORD PTR _uCharNamesData, eax
; Line 198
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN2@loadCharNa
; Line 199
	mov	DWORD PTR _uCharNamesData, 0
; Line 200
	jmp	SHORT $LN1@loadCharNa
$LN2@loadCharNa:
; Line 201
	mov	eax, DWORD PTR _uCharNamesData
	push	eax
	call	_udata_getMemory_56
	add	esp, 4
	mov	DWORD PTR _uCharNames, eax
$LN1@loadCharNa:
; Line 203
	push	OFFSET ?unames_cleanup@icu_56@@YACXZ	; icu_56::unames_cleanup
	push	11					; 0000000bH
	call	_ucln_common_registerCleanup_56
	add	esp, 8
; Line 204
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?loadCharNames@icu_56@@YAXAAW4UErrorCode@@@Z ENDP	; icu_56::loadCharNames
_TEXT	ENDS
PUBLIC	?reset@UInitOnce@icu_56@@QAEXXZ			; icu_56::UInitOnce::reset
EXTRN	_udata_close_56:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?unames_cleanup@icu_56@@YACXZ
_TEXT	SEGMENT
?unames_cleanup@icu_56@@YACXZ PROC			; icu_56::unames_cleanup, COMDAT
; Line 164
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 165
	cmp	DWORD PTR _uCharNamesData, 0
	je	SHORT $LN2@unames_cle
; Line 166
	mov	eax, DWORD PTR _uCharNamesData
	push	eax
	call	_udata_close_56
	add	esp, 4
; Line 167
	mov	DWORD PTR _uCharNamesData, 0
$LN2@unames_cle:
; Line 169
	cmp	DWORD PTR _uCharNames, 0
	je	SHORT $LN1@unames_cle
; Line 170
	mov	DWORD PTR _uCharNames, 0
$LN1@unames_cle:
; Line 172
	mov	ecx, OFFSET _gCharNamesInitOnce
	call	?reset@UInitOnce@icu_56@@QAEXXZ		; icu_56::UInitOnce::reset
; Line 173
	mov	DWORD PTR _gMaxNameLength, 0
; Line 174
	mov	al, 1
; Line 175
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?unames_cleanup@icu_56@@YACXZ ENDP			; icu_56::unames_cleanup
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?reset@UInitOnce@icu_56@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?reset@UInitOnce@icu_56@@QAEXXZ PROC			; icu_56::UInitOnce::reset, COMDAT
; _this$ = ecx
; File d:\mozilla\intl\icu\source\common\umutex.h
; Line 220
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?reset@UInitOnce@icu_56@@QAEXXZ ENDP			; icu_56::UInitOnce::reset
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?isAcceptable@icu_56@@YACPAXPBD1PBUUDataInfo@@@Z
_TEXT	SEGMENT
tv92 = -193						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
_pInfo$ = 20						; size = 4
?isAcceptable@icu_56@@YACPAXPBD1PBUUDataInfo@@@Z PROC	; icu_56::isAcceptable, COMDAT
; File d:\mozilla\intl\icu\source\common\unames.cpp
; Line 180
	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 189
	mov	eax, DWORD PTR _pInfo$[ebp]
	movzx	ecx, WORD PTR [eax]
	cmp	ecx, 20					; 00000014H
	jl	SHORT $LN3@isAcceptab
	mov	edx, DWORD PTR _pInfo$[ebp]
	movzx	eax, BYTE PTR [edx+4]
	test	eax, eax
	jne	SHORT $LN3@isAcceptab
	mov	ecx, DWORD PTR _pInfo$[ebp]
	movzx	edx, BYTE PTR [ecx+5]
	test	edx, edx
	jne	SHORT $LN3@isAcceptab
	mov	eax, DWORD PTR _pInfo$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	cmp	ecx, 117				; 00000075H
	jne	SHORT $LN3@isAcceptab
	mov	edx, DWORD PTR _pInfo$[ebp]
	movzx	eax, BYTE PTR [edx+9]
	cmp	eax, 110				; 0000006eH
	jne	SHORT $LN3@isAcceptab
	mov	ecx, DWORD PTR _pInfo$[ebp]
	movzx	edx, BYTE PTR [ecx+10]
	cmp	edx, 97					; 00000061H
	jne	SHORT $LN3@isAcceptab
	mov	eax, DWORD PTR _pInfo$[ebp]
	movzx	ecx, BYTE PTR [eax+11]
	cmp	ecx, 109				; 0000006dH
	jne	SHORT $LN3@isAcceptab
	mov	edx, DWORD PTR _pInfo$[ebp]
	movzx	eax, BYTE PTR [edx+12]
	cmp	eax, 1
	jne	SHORT $LN3@isAcceptab
	mov	BYTE PTR tv92[ebp], 1
	jmp	SHORT $LN4@isAcceptab
$LN3@isAcceptab:
	mov	BYTE PTR tv92[ebp], 0
$LN4@isAcceptab:
	mov	al, BYTE PTR tv92[ebp]
; Line 190
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?isAcceptable@icu_56@@YACPAXPBD1PBUUDataInfo@@@Z ENDP	; icu_56::isAcceptable
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?getExtName@icu_56@@YAGIPADG@Z
_TEXT	SEGMENT
tv142 = -268						; size = 4
_v$44367 = -65						; size = 1
_i$ = -56						; size = 4
_ndigits$ = -44						; size = 4
_cp$ = -32						; size = 4
_length$ = -20						; size = 2
_catname$ = -8						; size = 4
_code$ = 8						; size = 4
_buffer$ = 12						; size = 4
_bufferLength$ = 16					; size = 2
?getExtName@icu_56@@YAGIPADG@Z PROC			; icu_56::getExtName, COMDAT
; Line 446
	push	ebp
	mov	ebp, esp
	sub	esp, 268				; 0000010cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-268]
	mov	ecx, 67					; 00000043H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 447
	mov	eax, DWORD PTR _code$[ebp]
	push	eax
	call	?getCharCatName@icu_56@@YAPBDH@Z	; icu_56::getCharCatName
	add	esp, 4
	mov	DWORD PTR _catname$[ebp], eax
; Line 448
	xor	eax, eax
	mov	WORD PTR _length$[ebp], ax
; Line 453
	movzx	eax, WORD PTR _bufferLength$[ebp]
	test	eax, eax
	jle	SHORT $LN14@getExtName
	mov	eax, DWORD PTR _buffer$[ebp]
	mov	BYTE PTR [eax], 60			; 0000003cH
	mov	ecx, DWORD PTR _buffer$[ebp]
	add	ecx, 1
	mov	DWORD PTR _buffer$[ebp], ecx
	mov	ax, WORD PTR _bufferLength$[ebp]
	sub	ax, 1
	mov	WORD PTR _bufferLength$[ebp], ax
$LN14@getExtName:
	mov	ax, WORD PTR _length$[ebp]
	add	ax, 1
	mov	WORD PTR _length$[ebp], ax
$LN13@getExtName:
; Line 454
	movzx	eax, WORD PTR _length$[ebp]
	mov	ecx, DWORD PTR _catname$[ebp]
	movsx	edx, BYTE PTR [ecx+eax-1]
	test	edx, edx
	je	SHORT $LN12@getExtName
; Line 455
	movzx	eax, WORD PTR _bufferLength$[ebp]
	test	eax, eax
	jle	SHORT $LN11@getExtName
	movzx	eax, WORD PTR _length$[ebp]
	mov	ecx, DWORD PTR _buffer$[ebp]
	mov	edx, DWORD PTR _catname$[ebp]
	mov	al, BYTE PTR [edx+eax-1]
	mov	BYTE PTR [ecx], al
	mov	ecx, DWORD PTR _buffer$[ebp]
	add	ecx, 1
	mov	DWORD PTR _buffer$[ebp], ecx
	mov	ax, WORD PTR _bufferLength$[ebp]
	sub	ax, 1
	mov	WORD PTR _bufferLength$[ebp], ax
$LN11@getExtName:
	mov	ax, WORD PTR _length$[ebp]
	add	ax, 1
	mov	WORD PTR _length$[ebp], ax
; Line 456
	jmp	SHORT $LN13@getExtName
$LN12@getExtName:
; Line 457
	movzx	eax, WORD PTR _bufferLength$[ebp]
	test	eax, eax
	jle	SHORT $LN10@getExtName
	mov	eax, DWORD PTR _buffer$[ebp]
	mov	BYTE PTR [eax], 45			; 0000002dH
	mov	ecx, DWORD PTR _buffer$[ebp]
	add	ecx, 1
	mov	DWORD PTR _buffer$[ebp], ecx
	mov	ax, WORD PTR _bufferLength$[ebp]
	sub	ax, 1
	mov	WORD PTR _bufferLength$[ebp], ax
$LN10@getExtName:
	mov	ax, WORD PTR _length$[ebp]
	add	ax, 1
	mov	WORD PTR _length$[ebp], ax
; Line 458
	mov	eax, DWORD PTR _code$[ebp]
	mov	DWORD PTR _cp$[ebp], eax
	mov	DWORD PTR _ndigits$[ebp], 0
	jmp	SHORT $LN9@getExtName
$LN8@getExtName:
	mov	eax, DWORD PTR _ndigits$[ebp]
	add	eax, 1
	mov	DWORD PTR _ndigits$[ebp], eax
	mov	ecx, DWORD PTR _cp$[ebp]
	sar	ecx, 4
	mov	DWORD PTR _cp$[ebp], ecx
$LN9@getExtName:
	cmp	DWORD PTR _cp$[ebp], 0
	je	SHORT $LN7@getExtName
; Line 459
	jmp	SHORT $LN8@getExtName
$LN7@getExtName:
; Line 460
	cmp	DWORD PTR _ndigits$[ebp], 4
	jge	SHORT $LN6@getExtName
; Line 461
	mov	DWORD PTR _ndigits$[ebp], 4
$LN6@getExtName:
; Line 462
	mov	eax, DWORD PTR _code$[ebp]
	mov	DWORD PTR _cp$[ebp], eax
	mov	ecx, DWORD PTR _ndigits$[ebp]
	mov	DWORD PTR _i$[ebp], ecx
	jmp	SHORT $LN5@getExtName
$LN4@getExtName:
	mov	eax, DWORD PTR _cp$[ebp]
	sar	eax, 4
	mov	DWORD PTR _cp$[ebp], eax
	mov	cx, WORD PTR _bufferLength$[ebp]
	sub	cx, 1
	mov	WORD PTR _bufferLength$[ebp], cx
$LN5@getExtName:
	cmp	DWORD PTR _cp$[ebp], 0
	jne	SHORT $LN2@getExtName
	cmp	DWORD PTR _i$[ebp], 0
	jle	SHORT $LN3@getExtName
$LN2@getExtName:
	movzx	eax, WORD PTR _bufferLength$[ebp]
	test	eax, eax
	je	SHORT $LN3@getExtName
; Line 463
	mov	eax, DWORD PTR _cp$[ebp]
	and	eax, 15					; 0000000fH
	mov	BYTE PTR _v$44367[ebp], al
; Line 464
	movzx	eax, BYTE PTR _v$44367[ebp]
	cmp	eax, 10					; 0000000aH
	jge	SHORT $LN17@getExtName
	movzx	ecx, BYTE PTR _v$44367[ebp]
	add	ecx, 48					; 00000030H
	mov	DWORD PTR tv142[ebp], ecx
	jmp	SHORT $LN18@getExtName
$LN17@getExtName:
	movzx	edx, BYTE PTR _v$44367[ebp]
	add	edx, 55					; 00000037H
	mov	DWORD PTR tv142[ebp], edx
$LN18@getExtName:
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _buffer$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	mov	dl, BYTE PTR tv142[ebp]
	mov	BYTE PTR [ecx], dl
; Line 465
	jmp	SHORT $LN4@getExtName
$LN3@getExtName:
; Line 466
	mov	eax, DWORD PTR _buffer$[ebp]
	add	eax, DWORD PTR _ndigits$[ebp]
	mov	DWORD PTR _buffer$[ebp], eax
; Line 467
	movzx	eax, WORD PTR _length$[ebp]
	add	eax, DWORD PTR _ndigits$[ebp]
	mov	WORD PTR _length$[ebp], ax
; Line 468
	movzx	eax, WORD PTR _bufferLength$[ebp]
	test	eax, eax
	jle	SHORT $LN1@getExtName
	mov	eax, DWORD PTR _buffer$[ebp]
	mov	BYTE PTR [eax], 62			; 0000003eH
	mov	ecx, DWORD PTR _buffer$[ebp]
	add	ecx, 1
	mov	DWORD PTR _buffer$[ebp], ecx
	mov	ax, WORD PTR _bufferLength$[ebp]
	sub	ax, 1
	mov	WORD PTR _bufferLength$[ebp], ax
$LN1@getExtName:
	mov	ax, WORD PTR _length$[ebp]
	add	ax, 1
	mov	WORD PTR _length$[ebp], ax
; Line 470
	mov	ax, WORD PTR _length$[ebp]
; Line 471
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 268				; 0000010cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?getExtName@icu_56@@YAGIPADG@Z ENDP			; icu_56::getExtName
_TEXT	ENDS
PUBLIC	??_C@_07CIFAGBMG@unknown?$AA@			; `string'
;	COMDAT ??_C@_07CIFAGBMG@unknown?$AA@
CONST	SEGMENT
??_C@_07CIFAGBMG@unknown?$AA@ DB 'unknown', 00H		; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?getCharCatName@icu_56@@YAPBDH@Z
_TEXT	SEGMENT
_cat$ = -5						; size = 1
_cp$ = 8						; size = 4
?getCharCatName@icu_56@@YAPBDH@Z PROC			; icu_56::getCharCatName, COMDAT
; Line 433
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 434
	mov	eax, DWORD PTR _cp$[ebp]
	push	eax
	call	?getCharCat@icu_56@@YAEH@Z		; icu_56::getCharCat
	add	esp, 4
	mov	BYTE PTR _cat$[ebp], al
; Line 439
	movzx	eax, BYTE PTR _cat$[ebp]
	cmp	eax, 33					; 00000021H
	jl	SHORT $LN2@getCharCat
; Line 440
	mov	eax, OFFSET ??_C@_07CIFAGBMG@unknown?$AA@
	jmp	SHORT $LN3@getCharCat
; Line 441
	jmp	SHORT $LN3@getCharCat
$LN2@getCharCat:
; Line 442
	movzx	eax, BYTE PTR _cat$[ebp]
	mov	eax, DWORD PTR _charCatNames[eax*4]
$LN3@getCharCat:
; Line 444
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?getCharCatName@icu_56@@YAPBDH@Z ENDP			; icu_56::getCharCatName
_TEXT	ENDS
EXTRN	_u_charType_56:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?getCharCat@icu_56@@YAEH@Z
_TEXT	SEGMENT
_cat$ = -5						; size = 1
_cp$ = 8						; size = 4
?getCharCat@icu_56@@YAEH@Z PROC				; icu_56::getCharCat, COMDAT
; Line 419
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 422
	cmp	DWORD PTR _cp$[ebp], 64976		; 0000fdd0H
	jl	SHORT $LN3@getCharCat@2
	cmp	DWORD PTR _cp$[ebp], 65007		; 0000fdefH
	jbe	SHORT $LN2@getCharCat@2
	mov	eax, DWORD PTR _cp$[ebp]
	and	eax, 65534				; 0000fffeH
	cmp	eax, 65534				; 0000fffeH
	jne	SHORT $LN3@getCharCat@2
$LN2@getCharCat@2:
	cmp	DWORD PTR _cp$[ebp], 1114111		; 0010ffffH
	ja	SHORT $LN3@getCharCat@2
; Line 423
	mov	al, 30					; 0000001eH
	jmp	SHORT $LN4@getCharCat@2
$LN3@getCharCat@2:
; Line 426
	mov	eax, DWORD PTR _cp$[ebp]
	push	eax
	call	_u_charType_56
	add	esp, 4
	mov	BYTE PTR _cat$[ebp], al
	movzx	ecx, BYTE PTR _cat$[ebp]
	cmp	ecx, 18					; 00000012H
	jne	SHORT $LN1@getCharCat@2
; Line 427
	mov	eax, DWORD PTR _cp$[ebp]
	and	eax, -1024				; fffffc00H
	xor	ecx, ecx
	cmp	eax, 55296				; 0000d800H
	setne	cl
	add	ecx, 31					; 0000001fH
	mov	BYTE PTR _cat$[ebp], cl
$LN1@getCharCat@2:
; Line 430
	mov	al, BYTE PTR _cat$[ebp]
$LN4@getCharCat@2:
; Line 431
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?getCharCat@icu_56@@YAEH@Z ENDP				; icu_56::getCharCat
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?getName@icu_56@@YAGPAUUCharNames@1@IW4UCharNameChoice@@PADG@Z
_TEXT	SEGMENT
_group$ = -8						; size = 4
_names$ = 8						; size = 4
_code$ = 12						; size = 4
_nameChoice$ = 16					; size = 4
_buffer$ = 20						; size = 4
_bufferLength$ = 24					; size = 2
?getName@icu_56@@YAGPAUUCharNames@1@IW4UCharNameChoice@@PADG@Z PROC ; icu_56::getName, COMDAT
; Line 577
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 578
	mov	eax, DWORD PTR _code$[ebp]
	push	eax
	mov	ecx, DWORD PTR _names$[ebp]
	push	ecx
	call	?getGroup@icu_56@@YAPBGPAUUCharNames@1@I@Z ; icu_56::getGroup
	add	esp, 8
	mov	DWORD PTR _group$[ebp], eax
; Line 579
	mov	eax, DWORD PTR _code$[ebp]
	shr	eax, 5
	movzx	ecx, ax
	mov	edx, DWORD PTR _group$[ebp]
	movzx	eax, WORD PTR [edx]
	cmp	ecx, eax
	jne	SHORT $LN3@getName
; Line 581
	movzx	eax, WORD PTR _bufferLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _buffer$[ebp]
	push	ecx
	mov	edx, DWORD PTR _nameChoice$[ebp]
	push	edx
	mov	eax, DWORD PTR _code$[ebp]
	and	eax, 31					; 0000001fH
	push	eax
	mov	ecx, DWORD PTR _group$[ebp]
	push	ecx
	mov	edx, DWORD PTR _names$[ebp]
	push	edx
	call	?expandGroupName@icu_56@@YAGPAUUCharNames@1@PBGGW4UCharNameChoice@@PADG@Z ; icu_56::expandGroupName
	add	esp, 24					; 00000018H
	jmp	SHORT $LN4@getName
; Line 582
	jmp	SHORT $LN4@getName
$LN3@getName:
; Line 585
	movzx	eax, WORD PTR _bufferLength$[ebp]
	test	eax, eax
	jle	SHORT $LN1@getName
; Line 586
	mov	eax, DWORD PTR _buffer$[ebp]
	mov	BYTE PTR [eax], 0
$LN1@getName:
; Line 588
	xor	eax, eax
$LN4@getName:
; Line 590
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?getName@icu_56@@YAGPAUUCharNames@1@IW4UCharNameChoice@@PADG@Z ENDP ; icu_56::getName
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?getGroup@icu_56@@YAPBGPAUUCharNames@1@I@Z
_TEXT	SEGMENT
_number$ = -56						; size = 2
_limit$ = -44						; size = 2
_start$ = -32						; size = 2
_groupMSB$ = -20					; size = 2
_groups$ = -8						; size = 4
_names$ = 8						; size = 4
_code$ = 12						; size = 4
?getGroup@icu_56@@YAPBGPAUUCharNames@1@I@Z PROC		; icu_56::getGroup, COMDAT
; Line 481
	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 482
	mov	eax, DWORD PTR _names$[ebp]
	mov	ecx, DWORD PTR _names$[ebp]
	add	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _groups$[ebp], ecx
; Line 483
	mov	eax, DWORD PTR _code$[ebp]
	shr	eax, 5
	mov	WORD PTR _groupMSB$[ebp], ax
; Line 484
	xor	eax, eax
	mov	WORD PTR _start$[ebp], ax
; Line 485
	mov	eax, DWORD PTR _groups$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR _limit$[ebp], cx
	mov	edx, DWORD PTR _groups$[ebp]
	add	edx, 2
	mov	DWORD PTR _groups$[ebp], edx
$LN4@getGroup:
; Line 489
	movzx	eax, WORD PTR _start$[ebp]
	movzx	ecx, WORD PTR _limit$[ebp]
	sub	ecx, 1
	cmp	eax, ecx
	jge	SHORT $LN3@getGroup
; Line 490
	movzx	eax, WORD PTR _start$[ebp]
	movzx	ecx, WORD PTR _limit$[ebp]
	add	eax, ecx
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	WORD PTR _number$[ebp], ax
; Line 491
	movzx	eax, WORD PTR _groupMSB$[ebp]
	movzx	ecx, WORD PTR _number$[ebp]
	imul	ecx, 3
	mov	edx, DWORD PTR _groups$[ebp]
	movzx	ecx, WORD PTR [edx+ecx*2]
	cmp	eax, ecx
	jge	SHORT $LN2@getGroup
; Line 492
	mov	ax, WORD PTR _number$[ebp]
	mov	WORD PTR _limit$[ebp], ax
; Line 493
	jmp	SHORT $LN1@getGroup
$LN2@getGroup:
; Line 494
	mov	ax, WORD PTR _number$[ebp]
	mov	WORD PTR _start$[ebp], ax
$LN1@getGroup:
; Line 496
	jmp	SHORT $LN4@getGroup
$LN3@getGroup:
; Line 499
	movzx	eax, WORD PTR _start$[ebp]
	imul	eax, 3
	mov	ecx, DWORD PTR _groups$[ebp]
	lea	eax, DWORD PTR [ecx+eax*2]
; Line 500
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?getGroup@icu_56@@YAPBGPAUUCharNames@1@I@Z ENDP		; icu_56::getGroup
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?expandGroupName@icu_56@@YAGPAUUCharNames@1@PBGGW4UCharNameChoice@@PADG@Z
_TEXT	SEGMENT
_s$ = -164						; size = 4
_lengths$ = -152					; size = 68
_offsets$ = -76						; size = 68
__$ArrayPad$ = -4					; size = 4
_names$ = 8						; size = 4
_group$ = 12						; size = 4
_lineNumber$ = 16					; size = 2
_nameChoice$ = 20					; size = 4
_buffer$ = 24						; size = 4
_bufferLength$ = 28					; size = 2
?expandGroupName@icu_56@@YAGPAUUCharNames@1@PBGGW4UCharNameChoice@@PADG@Z PROC ; icu_56::expandGroupName, COMDAT
; Line 567
	push	ebp
	mov	ebp, esp
	sub	esp, 360				; 00000168H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-360]
	mov	ecx, 90					; 0000005aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 569
	mov	eax, DWORD PTR _names$[ebp]
	mov	ecx, DWORD PTR _names$[ebp]
	add	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _group$[ebp]
	movzx	eax, WORD PTR [edx+2]
	shl	eax, 16					; 00000010H
	mov	edx, DWORD PTR _group$[ebp]
	movzx	edx, WORD PTR [edx+4]
	or	eax, edx
	add	ecx, eax
	mov	DWORD PTR _s$[ebp], ecx
; Line 570
	lea	eax, DWORD PTR _lengths$[ebp]
	push	eax
	lea	ecx, DWORD PTR _offsets$[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	call	?expandGroupLengths@icu_56@@YAPBEPBEQAG1@Z ; icu_56::expandGroupLengths
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _s$[ebp], eax
; Line 572
	movzx	eax, WORD PTR _bufferLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _buffer$[ebp]
	push	ecx
	mov	edx, DWORD PTR _nameChoice$[ebp]
	push	edx
	movzx	eax, WORD PTR _lineNumber$[ebp]
	movzx	ecx, WORD PTR _lengths$[ebp+eax*2]
	push	ecx
	movzx	edx, WORD PTR _lineNumber$[ebp]
	movzx	eax, WORD PTR _offsets$[ebp+edx*2]
	add	eax, DWORD PTR _s$[ebp]
	push	eax
	mov	ecx, DWORD PTR _names$[ebp]
	push	ecx
	call	?expandName@icu_56@@YAGPAUUCharNames@1@PBEGW4UCharNameChoice@@PADG@Z ; icu_56::expandName
	add	esp, 24					; 00000018H
; Line 573
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@expandGrou
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 360				; 00000168H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN6@expandGrou:
	DD	2
	DD	$LN5@expandGrou
$LN5@expandGrou:
	DD	-76					; ffffffb4H
	DD	68					; 00000044H
	DD	$LN3@expandGrou
	DD	-152					; ffffff68H
	DD	68					; 00000044H
	DD	$LN4@expandGrou
$LN4@expandGrou:
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	115					; 00000073H
	DB	0
$LN3@expandGrou:
	DB	111					; 0000006fH
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	115					; 00000073H
	DB	0
?expandGroupName@icu_56@@YAGPAUUCharNames@1@PBGGW4UCharNameChoice@@PADG@Z ENDP ; icu_56::expandGroupName
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?expandName@icu_56@@YAGPAUUCharNames@1@PBEGW4UCharNameChoice@@PADG@Z
_TEXT	SEGMENT
tv167 = -292						; size = 4
tv82 = -292						; size = 4
tv75 = -292						; size = 4
_tokenString$44259 = -92				; size = 4
_fieldIndex$44228 = -80					; size = 4
_c$ = -65						; size = 1
_tokenStrings$ = -56					; size = 4
_bufferPos$ = -44					; size = 2
_tokenCount$ = -32					; size = 2
_token$ = -20						; size = 2
_tokens$ = -8						; size = 4
_names$ = 8						; size = 4
_name$ = 12						; size = 4
_nameLength$ = 16					; size = 2
_nameChoice$ = 20					; size = 4
_buffer$ = 24						; size = 4
_bufferLength$ = 28					; size = 2
?expandName@icu_56@@YAGPAUUCharNames@1@PBEGW4UCharNameChoice@@PADG@Z PROC ; icu_56::expandName, COMDAT
; Line 238
	push	ebp
	mov	ebp, esp
	sub	esp, 292				; 00000124H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-292]
	mov	ecx, 73					; 00000049H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 239
	mov	eax, DWORD PTR _names$[ebp]
	add	eax, 16					; 00000010H
	mov	DWORD PTR _tokens$[ebp], eax
; Line 240
	mov	eax, DWORD PTR _tokens$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR _tokenCount$[ebp], cx
	mov	edx, DWORD PTR _tokens$[ebp]
	add	edx, 2
	mov	DWORD PTR _tokens$[ebp], edx
	xor	eax, eax
	mov	WORD PTR _bufferPos$[ebp], ax
; Line 241
	mov	eax, DWORD PTR _names$[ebp]
	mov	ecx, DWORD PTR _names$[ebp]
	add	ecx, DWORD PTR [eax]
	mov	DWORD PTR _tokenStrings$[ebp], ecx
; Line 244
	cmp	DWORD PTR _nameChoice$[ebp], 0
	je	$LN20@expandName
	cmp	DWORD PTR _nameChoice$[ebp], 2
	je	$LN20@expandName
; Line 249
	movzx	eax, WORD PTR _tokenCount$[ebp]
	cmp	eax, 59					; 0000003bH
	jle	SHORT $LN28@expandName
	mov	eax, DWORD PTR _tokens$[ebp]
	movzx	ecx, WORD PTR [eax+118]
	cmp	ecx, 65535				; 0000ffffH
	jne	$LN29@expandName
$LN28@expandName:
; Line 250
	cmp	DWORD PTR _nameChoice$[ebp], 4
	jne	SHORT $LN33@expandName
	mov	DWORD PTR tv75[ebp], 2
	jmp	SHORT $LN34@expandName
$LN33@expandName:
	mov	eax, DWORD PTR _nameChoice$[ebp]
	mov	DWORD PTR tv75[ebp], eax
$LN34@expandName:
	mov	ecx, DWORD PTR tv75[ebp]
	mov	DWORD PTR _fieldIndex$44228[ebp], ecx
$LN24@expandName:
; Line 252
	movzx	eax, WORD PTR _nameLength$[ebp]
	test	eax, eax
	jle	SHORT $LN26@expandName
; Line 253
	mov	ax, WORD PTR _nameLength$[ebp]
	sub	ax, 1
	mov	WORD PTR _nameLength$[ebp], ax
; Line 254
	mov	eax, DWORD PTR _name$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _name$[ebp]
	add	edx, 1
	mov	DWORD PTR _name$[ebp], edx
	cmp	ecx, 59					; 0000003bH
	jne	SHORT $LN35@expandName
	mov	DWORD PTR tv82[ebp], 1
	jmp	SHORT $LN36@expandName
$LN35@expandName:
	mov	DWORD PTR tv82[ebp], 0
$LN36@expandName:
	cmp	DWORD PTR tv82[ebp], 0
	je	SHORT $LN22@expandName
; Line 255
	jmp	SHORT $LN26@expandName
$LN22@expandName:
; Line 257
	jmp	SHORT $LN24@expandName
$LN26@expandName:
; Line 258
	mov	eax, DWORD PTR _fieldIndex$44228[ebp]
	sub	eax, 1
	mov	DWORD PTR _fieldIndex$44228[ebp], eax
	cmp	DWORD PTR _fieldIndex$44228[ebp], 0
	jg	SHORT $LN24@expandName
; Line 259
	jmp	SHORT $LN20@expandName
$LN29@expandName:
; Line 265
	xor	eax, eax
	mov	WORD PTR _nameLength$[ebp], ax
$LN20@expandName:
; Line 270
	movzx	eax, WORD PTR _nameLength$[ebp]
	test	eax, eax
	jle	$LN19@expandName
; Line 271
	mov	ax, WORD PTR _nameLength$[ebp]
	sub	ax, 1
	mov	WORD PTR _nameLength$[ebp], ax
; Line 272
	mov	eax, DWORD PTR _name$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _c$[ebp], cl
	mov	edx, DWORD PTR _name$[ebp]
	add	edx, 1
	mov	DWORD PTR _name$[ebp], edx
; Line 274
	movzx	eax, BYTE PTR _c$[ebp]
	movzx	ecx, WORD PTR _tokenCount$[ebp]
	cmp	eax, ecx
	jl	SHORT $LN18@expandName
; Line 275
	movzx	eax, BYTE PTR _c$[ebp]
	cmp	eax, 59					; 0000003bH
	je	SHORT $LN17@expandName
; Line 277
	movzx	eax, WORD PTR _bufferLength$[ebp]
	test	eax, eax
	jle	SHORT $LN16@expandName
	mov	eax, DWORD PTR _buffer$[ebp]
	mov	cl, BYTE PTR _c$[ebp]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _buffer$[ebp]
	add	edx, 1
	mov	DWORD PTR _buffer$[ebp], edx
	mov	ax, WORD PTR _bufferLength$[ebp]
	sub	ax, 1
	mov	WORD PTR _bufferLength$[ebp], ax
$LN16@expandName:
	mov	ax, WORD PTR _bufferPos$[ebp]
	add	ax, 1
	mov	WORD PTR _bufferPos$[ebp], ax
; Line 278
	jmp	SHORT $LN15@expandName
$LN17@expandName:
; Line 280
	jmp	$LN19@expandName
$LN15@expandName:
; Line 282
	jmp	$LN14@expandName
$LN18@expandName:
; Line 283
	movzx	eax, BYTE PTR _c$[ebp]
	mov	ecx, DWORD PTR _tokens$[ebp]
	mov	dx, WORD PTR [ecx+eax*2]
	mov	WORD PTR _token$[ebp], dx
; Line 284
	movzx	eax, WORD PTR _token$[ebp]
	cmp	eax, 65534				; 0000fffeH
	jne	SHORT $LN13@expandName
; Line 286
	movzx	eax, BYTE PTR _c$[ebp]
	shl	eax, 8
	mov	ecx, DWORD PTR _name$[ebp]
	movzx	edx, BYTE PTR [ecx]
	or	eax, edx
	mov	ecx, DWORD PTR _tokens$[ebp]
	mov	dx, WORD PTR [ecx+eax*2]
	mov	WORD PTR _token$[ebp], dx
	mov	eax, DWORD PTR _name$[ebp]
	add	eax, 1
	mov	DWORD PTR _name$[ebp], eax
; Line 287
	mov	ax, WORD PTR _nameLength$[ebp]
	sub	ax, 1
	mov	WORD PTR _nameLength$[ebp], ax
$LN13@expandName:
; Line 289
	movzx	eax, WORD PTR _token$[ebp]
	cmp	eax, 65535				; 0000ffffH
	jne	SHORT $LN12@expandName
; Line 290
	movzx	eax, BYTE PTR _c$[ebp]
	cmp	eax, 59					; 0000003bH
	je	SHORT $LN11@expandName
; Line 292
	movzx	eax, WORD PTR _bufferLength$[ebp]
	test	eax, eax
	jle	SHORT $LN10@expandName
	mov	eax, DWORD PTR _buffer$[ebp]
	mov	cl, BYTE PTR _c$[ebp]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _buffer$[ebp]
	add	edx, 1
	mov	DWORD PTR _buffer$[ebp], edx
	mov	ax, WORD PTR _bufferLength$[ebp]
	sub	ax, 1
	mov	WORD PTR _bufferLength$[ebp], ax
$LN10@expandName:
	mov	ax, WORD PTR _bufferPos$[ebp]
	add	ax, 1
	mov	WORD PTR _bufferPos$[ebp], ax
; Line 293
	jmp	SHORT $LN9@expandName
$LN11@expandName:
; Line 297
	movzx	eax, WORD PTR _bufferPos$[ebp]
	test	eax, eax
	jne	SHORT $LN8@expandName
	cmp	DWORD PTR _nameChoice$[ebp], 2
	jne	SHORT $LN8@expandName
; Line 298
	movzx	eax, WORD PTR _tokenCount$[ebp]
	cmp	eax, 59					; 0000003bH
	jle	SHORT $LN6@expandName
	mov	eax, DWORD PTR _tokens$[ebp]
	movzx	ecx, WORD PTR [eax+118]
	cmp	ecx, 65535				; 0000ffffH
	jne	SHORT $LN8@expandName
$LN6@expandName:
; Line 299
	jmp	$LN20@expandName
$LN8@expandName:
; Line 303
	jmp	SHORT $LN19@expandName
$LN9@expandName:
; Line 305
	jmp	SHORT $LN14@expandName
$LN12@expandName:
; Line 307
	movzx	eax, WORD PTR _token$[ebp]
	add	eax, DWORD PTR _tokenStrings$[ebp]
	mov	DWORD PTR _tokenString$44259[ebp], eax
$LN4@expandName:
; Line 308
	mov	eax, DWORD PTR _tokenString$44259[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _c$[ebp], cl
	movzx	edx, BYTE PTR _c$[ebp]
	mov	eax, DWORD PTR _tokenString$44259[ebp]
	add	eax, 1
	mov	DWORD PTR _tokenString$44259[ebp], eax
	test	edx, edx
	je	SHORT $LN37@expandName
	mov	DWORD PTR tv167[ebp], 1
	jmp	SHORT $LN38@expandName
$LN37@expandName:
	mov	DWORD PTR tv167[ebp], 0
$LN38@expandName:
	cmp	DWORD PTR tv167[ebp], 0
	je	SHORT $LN14@expandName
; Line 309
	movzx	eax, WORD PTR _bufferLength$[ebp]
	test	eax, eax
	jle	SHORT $LN2@expandName
	mov	eax, DWORD PTR _buffer$[ebp]
	mov	cl, BYTE PTR _c$[ebp]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _buffer$[ebp]
	add	edx, 1
	mov	DWORD PTR _buffer$[ebp], edx
	mov	ax, WORD PTR _bufferLength$[ebp]
	sub	ax, 1
	mov	WORD PTR _bufferLength$[ebp], ax
$LN2@expandName:
	mov	ax, WORD PTR _bufferPos$[ebp]
	add	ax, 1
	mov	WORD PTR _bufferPos$[ebp], ax
; Line 310
	jmp	SHORT $LN4@expandName
$LN14@expandName:
; Line 313
	jmp	$LN20@expandName
$LN19@expandName:
; Line 316
	movzx	eax, WORD PTR _bufferLength$[ebp]
	test	eax, eax
	jle	SHORT $LN1@expandName
; Line 317
	mov	eax, DWORD PTR _buffer$[ebp]
	mov	BYTE PTR [eax], 0
$LN1@expandName:
; Line 320
	mov	ax, WORD PTR _bufferPos$[ebp]
; Line 321
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?expandName@icu_56@@YAGPAUUCharNames@1@PBEGW4UCharNameChoice@@PADG@Z ENDP ; icu_56::expandName
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?expandGroupLengths@icu_56@@YAPBEPBEQAG1@Z
_TEXT	SEGMENT
_lengthByte$ = -41					; size = 1
_length$ = -32						; size = 2
_offset$ = -20						; size = 2
_i$ = -8						; size = 2
_s$ = 8							; size = 4
_offsets$ = 12						; size = 4
_lengths$ = 16						; size = 4
?expandGroupLengths@icu_56@@YAPBEPBEQAG1@Z PROC		; icu_56::expandGroupLengths, COMDAT
; Line 514
	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 516
	xor	eax, eax
	mov	WORD PTR _i$[ebp], ax
	xor	eax, eax
	mov	WORD PTR _offset$[ebp], ax
	xor	eax, eax
	mov	WORD PTR _length$[ebp], ax
$LN9@expandGrou@2:
; Line 520
	movzx	eax, WORD PTR _i$[ebp]
	cmp	eax, 32					; 00000020H
	jge	$LN8@expandGrou@2
; Line 521
	mov	eax, DWORD PTR _s$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _lengthByte$[ebp], cl
	mov	edx, DWORD PTR _s$[ebp]
	add	edx, 1
	mov	DWORD PTR _s$[ebp], edx
; Line 524
	movzx	eax, WORD PTR _length$[ebp]
	cmp	eax, 12					; 0000000cH
	jl	SHORT $LN7@expandGrou@2
; Line 526
	movzx	eax, WORD PTR _length$[ebp]
	and	eax, 3
	shl	eax, 4
	movzx	ecx, BYTE PTR _lengthByte$[ebp]
	sar	ecx, 4
	or	eax, ecx
	add	eax, 12					; 0000000cH
	mov	WORD PTR _length$[ebp], ax
; Line 527
	movzx	eax, BYTE PTR _lengthByte$[ebp]
	and	eax, 15					; 0000000fH
	mov	BYTE PTR _lengthByte$[ebp], al
	jmp	SHORT $LN6@expandGrou@2
$LN7@expandGrou@2:
; Line 528
	movzx	eax, BYTE PTR _lengthByte$[ebp]
	cmp	eax, 192				; 000000c0H
	jl	SHORT $LN5@expandGrou@2
; Line 530
	movzx	eax, BYTE PTR _lengthByte$[ebp]
	and	eax, 63					; 0000003fH
	add	eax, 12					; 0000000cH
	mov	WORD PTR _length$[ebp], ax
; Line 531
	jmp	SHORT $LN6@expandGrou@2
$LN5@expandGrou@2:
; Line 533
	movzx	eax, BYTE PTR _lengthByte$[ebp]
	sar	eax, 4
	mov	WORD PTR _length$[ebp], ax
; Line 534
	movzx	eax, BYTE PTR _lengthByte$[ebp]
	and	eax, 15					; 0000000fH
	mov	BYTE PTR _lengthByte$[ebp], al
$LN6@expandGrou@2:
; Line 537
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	cx, WORD PTR _offset$[ebp]
	mov	WORD PTR [eax], cx
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 2
	mov	DWORD PTR _offsets$[ebp], edx
; Line 538
	mov	eax, DWORD PTR _lengths$[ebp]
	mov	cx, WORD PTR _length$[ebp]
	mov	WORD PTR [eax], cx
	mov	edx, DWORD PTR _lengths$[ebp]
	add	edx, 2
	mov	DWORD PTR _lengths$[ebp], edx
; Line 540
	movzx	eax, WORD PTR _length$[ebp]
	movzx	ecx, WORD PTR _offset$[ebp]
	add	ecx, eax
	mov	WORD PTR _offset$[ebp], cx
; Line 541
	mov	ax, WORD PTR _i$[ebp]
	add	ax, 1
	mov	WORD PTR _i$[ebp], ax
; Line 544
	movzx	eax, BYTE PTR _lengthByte$[ebp]
	and	eax, 240				; 000000f0H
	jne	SHORT $LN3@expandGrou@2
; Line 546
	movzx	ax, BYTE PTR _lengthByte$[ebp]
	mov	WORD PTR _length$[ebp], ax
; Line 547
	movzx	eax, WORD PTR _length$[ebp]
	cmp	eax, 12					; 0000000cH
	jge	SHORT $LN2@expandGrou@2
; Line 549
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	cx, WORD PTR _offset$[ebp]
	mov	WORD PTR [eax], cx
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 2
	mov	DWORD PTR _offsets$[ebp], edx
; Line 550
	mov	eax, DWORD PTR _lengths$[ebp]
	mov	cx, WORD PTR _length$[ebp]
	mov	WORD PTR [eax], cx
	mov	edx, DWORD PTR _lengths$[ebp]
	add	edx, 2
	mov	DWORD PTR _lengths$[ebp], edx
; Line 552
	movzx	eax, WORD PTR _length$[ebp]
	movzx	ecx, WORD PTR _offset$[ebp]
	add	ecx, eax
	mov	WORD PTR _offset$[ebp], cx
; Line 553
	mov	ax, WORD PTR _i$[ebp]
	add	ax, 1
	mov	WORD PTR _i$[ebp], ax
$LN2@expandGrou@2:
; Line 555
	jmp	SHORT $LN1@expandGrou@2
$LN3@expandGrou@2:
; Line 556
	xor	eax, eax
	mov	WORD PTR _length$[ebp], ax
$LN1@expandGrou@2:
; Line 558
	jmp	$LN9@expandGrou@2
$LN8@expandGrou@2:
; Line 561
	mov	eax, DWORD PTR _s$[ebp]
; Line 562
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?expandGroupLengths@icu_56@@YAPBEPBEQAG1@Z ENDP		; icu_56::expandGroupLengths
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?getAlgName@icu_56@@YAGPAUAlgorithmicRange@1@IW4UCharNameChoice@@PADG@Z
_TEXT	SEGMENT
tv153 = -332						; size = 4
tv75 = -332						; size = 4
tv70 = -332						; size = 4
_c$44619 = -129						; size = 1
_s$44617 = -120						; size = 4
_count$44616 = -108					; size = 2
_factors$44614 = -96					; size = 4
_indexes$44613 = -84					; size = 16
_count$44599 = -60					; size = 2
_i$44598 = -48						; size = 2
_c$44597 = -33						; size = 1
_s$44595 = -24						; size = 4
_bufferPos$ = -12					; size = 2
__$ArrayPad$ = -4					; size = 4
_range$ = 8						; size = 4
_code$ = 12						; size = 4
_nameChoice$ = 16					; size = 4
_buffer$ = 20						; size = 4
_bufferLength$ = 24					; size = 2
?getAlgName@icu_56@@YAGPAUAlgorithmicRange@1@IW4UCharNameChoice@@PADG@Z PROC ; icu_56::getAlgName, COMDAT
; Line 851
	push	ebp
	mov	ebp, esp
	sub	esp, 332				; 0000014cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-332]
	mov	ecx, 83					; 00000053H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 852
	xor	eax, eax
	mov	WORD PTR _bufferPos$[ebp], ax
; Line 855
	cmp	DWORD PTR _nameChoice$[ebp], 0
	je	SHORT $LN20@getAlgName
	cmp	DWORD PTR _nameChoice$[ebp], 2
	je	SHORT $LN20@getAlgName
; Line 857
	movzx	eax, WORD PTR _bufferLength$[ebp]
	test	eax, eax
	jle	SHORT $LN19@getAlgName
; Line 858
	mov	eax, DWORD PTR _buffer$[ebp]
	mov	BYTE PTR [eax], 0
$LN19@getAlgName:
; Line 860
	xor	eax, eax
	jmp	$LN21@getAlgName
$LN20@getAlgName:
; Line 863
	mov	eax, DWORD PTR _range$[ebp]
	mov	cl, BYTE PTR [eax+8]
	mov	BYTE PTR tv70[ebp], cl
	cmp	BYTE PTR tv70[ebp], 0
	je	SHORT $LN16@getAlgName
	cmp	BYTE PTR tv70[ebp], 1
	je	$LN6@getAlgName
	jmp	$LN2@getAlgName
$LN16@getAlgName:
; Line 866
	mov	eax, DWORD PTR _range$[ebp]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR _s$44595[ebp], eax
$LN15@getAlgName:
; Line 872
	mov	eax, DWORD PTR _s$44595[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _c$44597[ebp], cl
	movsx	edx, BYTE PTR _c$44597[ebp]
	mov	eax, DWORD PTR _s$44595[ebp]
	add	eax, 1
	mov	DWORD PTR _s$44595[ebp], eax
	test	edx, edx
	je	SHORT $LN23@getAlgName
	mov	DWORD PTR tv75[ebp], 1
	jmp	SHORT $LN24@getAlgName
$LN23@getAlgName:
	mov	DWORD PTR tv75[ebp], 0
$LN24@getAlgName:
	cmp	DWORD PTR tv75[ebp], 0
	je	SHORT $LN14@getAlgName
; Line 873
	movzx	eax, WORD PTR _bufferLength$[ebp]
	test	eax, eax
	jle	SHORT $LN13@getAlgName
	mov	eax, DWORD PTR _buffer$[ebp]
	mov	cl, BYTE PTR _c$44597[ebp]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _buffer$[ebp]
	add	edx, 1
	mov	DWORD PTR _buffer$[ebp], edx
	mov	ax, WORD PTR _bufferLength$[ebp]
	sub	ax, 1
	mov	WORD PTR _bufferLength$[ebp], ax
$LN13@getAlgName:
	mov	ax, WORD PTR _bufferPos$[ebp]
	add	ax, 1
	mov	WORD PTR _bufferPos$[ebp], ax
; Line 874
	jmp	SHORT $LN15@getAlgName
$LN14@getAlgName:
; Line 877
	mov	eax, DWORD PTR _range$[ebp]
	movzx	cx, BYTE PTR [eax+9]
	mov	WORD PTR _count$44599[ebp], cx
; Line 880
	movzx	eax, WORD PTR _count$44599[ebp]
	movzx	ecx, WORD PTR _bufferLength$[ebp]
	cmp	eax, ecx
	jge	SHORT $LN12@getAlgName
; Line 881
	movzx	eax, WORD PTR _count$44599[ebp]
	mov	ecx, DWORD PTR _buffer$[ebp]
	mov	BYTE PTR [ecx+eax], 0
$LN12@getAlgName:
; Line 884
	mov	ax, WORD PTR _count$44599[ebp]
	mov	WORD PTR _i$44598[ebp], ax
$LN11@getAlgName:
	movzx	eax, WORD PTR _i$44598[ebp]
	test	eax, eax
	jle	SHORT $LN10@getAlgName
; Line 885
	mov	ax, WORD PTR _i$44598[ebp]
	sub	ax, 1
	mov	WORD PTR _i$44598[ebp], ax
	movzx	ecx, WORD PTR _i$44598[ebp]
	movzx	edx, WORD PTR _bufferLength$[ebp]
	cmp	ecx, edx
	jge	SHORT $LN9@getAlgName
; Line 886
	mov	eax, DWORD PTR _code$[ebp]
	and	eax, 15					; 0000000fH
	mov	BYTE PTR _c$44597[ebp], al
; Line 887
	movsx	eax, BYTE PTR _c$44597[ebp]
	cmp	eax, 10					; 0000000aH
	jge	SHORT $LN8@getAlgName
; Line 888
	movsx	eax, BYTE PTR _c$44597[ebp]
	add	eax, 48					; 00000030H
	mov	BYTE PTR _c$44597[ebp], al
; Line 889
	jmp	SHORT $LN7@getAlgName
$LN8@getAlgName:
; Line 890
	movsx	eax, BYTE PTR _c$44597[ebp]
	add	eax, 55					; 00000037H
	mov	BYTE PTR _c$44597[ebp], al
$LN7@getAlgName:
; Line 892
	movzx	eax, WORD PTR _i$44598[ebp]
	mov	ecx, DWORD PTR _buffer$[ebp]
	mov	dl, BYTE PTR _c$44597[ebp]
	mov	BYTE PTR [ecx+eax], dl
$LN9@getAlgName:
; Line 894
	mov	eax, DWORD PTR _code$[ebp]
	shr	eax, 4
	mov	DWORD PTR _code$[ebp], eax
; Line 895
	jmp	SHORT $LN11@getAlgName
$LN10@getAlgName:
; Line 897
	movzx	eax, WORD PTR _count$44599[ebp]
	movzx	ecx, WORD PTR _bufferPos$[ebp]
	add	ecx, eax
	mov	WORD PTR _bufferPos$[ebp], cx
; Line 898
	jmp	$LN17@getAlgName
$LN6@getAlgName:
; Line 903
	mov	eax, DWORD PTR _range$[ebp]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR _factors$44614[ebp], eax
; Line 904
	mov	eax, DWORD PTR _range$[ebp]
	movzx	cx, BYTE PTR [eax+9]
	mov	WORD PTR _count$44616[ebp], cx
; Line 905
	movzx	eax, WORD PTR _count$44616[ebp]
	mov	ecx, DWORD PTR _factors$44614[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR _s$44617[ebp], edx
$LN5@getAlgName:
; Line 909
	mov	eax, DWORD PTR _s$44617[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _c$44619[ebp], cl
	movsx	edx, BYTE PTR _c$44619[ebp]
	mov	eax, DWORD PTR _s$44617[ebp]
	add	eax, 1
	mov	DWORD PTR _s$44617[ebp], eax
	test	edx, edx
	je	SHORT $LN25@getAlgName
	mov	DWORD PTR tv153[ebp], 1
	jmp	SHORT $LN26@getAlgName
$LN25@getAlgName:
	mov	DWORD PTR tv153[ebp], 0
$LN26@getAlgName:
	cmp	DWORD PTR tv153[ebp], 0
	je	SHORT $LN4@getAlgName
; Line 910
	movzx	eax, WORD PTR _bufferLength$[ebp]
	test	eax, eax
	jle	SHORT $LN3@getAlgName
	mov	eax, DWORD PTR _buffer$[ebp]
	mov	cl, BYTE PTR _c$44619[ebp]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _buffer$[ebp]
	add	edx, 1
	mov	DWORD PTR _buffer$[ebp], edx
	mov	ax, WORD PTR _bufferLength$[ebp]
	sub	ax, 1
	mov	WORD PTR _bufferLength$[ebp], ax
$LN3@getAlgName:
	mov	ax, WORD PTR _bufferPos$[ebp]
	add	ax, 1
	mov	WORD PTR _bufferPos$[ebp], ax
; Line 911
	jmp	SHORT $LN5@getAlgName
$LN4@getAlgName:
; Line 914
	movzx	eax, WORD PTR _bufferLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _buffer$[ebp]
	push	ecx
	push	0
	push	0
	lea	edx, DWORD PTR _indexes$44613[ebp]
	push	edx
	mov	eax, DWORD PTR _range$[ebp]
	mov	ecx, DWORD PTR _code$[ebp]
	sub	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _s$44617[ebp]
	push	edx
	movzx	eax, WORD PTR _count$44616[ebp]
	push	eax
	mov	ecx, DWORD PTR _factors$44614[ebp]
	push	ecx
	call	?writeFactorSuffix@icu_56@@YAGPBGGPBDIQAGQAPBD3PADG@Z ; icu_56::writeFactorSuffix
	add	esp, 36					; 00000024H
	movzx	edx, ax
	movzx	eax, WORD PTR _bufferPos$[ebp]
	add	eax, edx
	mov	WORD PTR _bufferPos$[ebp], ax
; Line 915
	jmp	SHORT $LN17@getAlgName
$LN2@getAlgName:
; Line 920
	movzx	eax, WORD PTR _bufferLength$[ebp]
	test	eax, eax
	jle	SHORT $LN17@getAlgName
; Line 921
	mov	eax, DWORD PTR _buffer$[ebp]
	mov	BYTE PTR [eax], 0
$LN17@getAlgName:
; Line 926
	mov	ax, WORD PTR _bufferPos$[ebp]
$LN21@getAlgName:
; Line 927
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN29@getAlgName
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 332				; 0000014cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN29@getAlgName:
	DD	1
	DD	$LN28@getAlgName
$LN28@getAlgName:
	DD	-84					; ffffffacH
	DD	16					; 00000010H
	DD	$LN27@getAlgName
$LN27@getAlgName:
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
?getAlgName@icu_56@@YAGPAUAlgorithmicRange@1@IW4UCharNameChoice@@PADG@Z ENDP ; icu_56::getAlgName
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?writeFactorSuffix@icu_56@@YAGPBGGPBDIQAGQAPBD3PADG@Z
_TEXT	SEGMENT
tv155 = -244						; size = 4
tv129 = -244						; size = 4
tv89 = -244						; size = 4
_c$ = -41						; size = 1
_bufferPos$ = -32					; size = 2
_factor$ = -20						; size = 2
_i$ = -8						; size = 2
_factors$ = 8						; size = 4
_count$ = 12						; size = 2
_s$ = 16						; size = 4
_code$ = 20						; size = 4
_indexes$ = 24						; size = 4
_elementBases$ = 28					; size = 4
_elements$ = 32						; size = 4
_buffer$ = 36						; size = 4
_bufferLength$ = 40					; size = 2
?writeFactorSuffix@icu_56@@YAGPBGGPBDIQAGQAPBD3PADG@Z PROC ; icu_56::writeFactorSuffix, COMDAT
; Line 776
	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 777
	xor	eax, eax
	mov	WORD PTR _bufferPos$[ebp], ax
; Line 788
	mov	ax, WORD PTR _count$[ebp]
	sub	ax, 1
	mov	WORD PTR _count$[ebp], ax
; Line 789
	mov	ax, WORD PTR _count$[ebp]
	mov	WORD PTR _i$[ebp], ax
	jmp	SHORT $LN20@writeFacto
$LN19@writeFacto:
	mov	ax, WORD PTR _i$[ebp]
	sub	ax, 1
	mov	WORD PTR _i$[ebp], ax
$LN20@writeFacto:
	movzx	eax, WORD PTR _i$[ebp]
	test	eax, eax
	jle	SHORT $LN18@writeFacto
; Line 790
	movzx	eax, WORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _factors$[ebp]
	mov	dx, WORD PTR [ecx+eax*2]
	mov	WORD PTR _factor$[ebp], dx
; Line 791
	movzx	ecx, WORD PTR _factor$[ebp]
	mov	eax, DWORD PTR _code$[ebp]
	xor	edx, edx
	div	ecx
	movzx	eax, WORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _indexes$[ebp]
	mov	WORD PTR [ecx+eax*2], dx
; Line 792
	movzx	ecx, WORD PTR _factor$[ebp]
	mov	eax, DWORD PTR _code$[ebp]
	xor	edx, edx
	div	ecx
	mov	DWORD PTR _code$[ebp], eax
; Line 793
	jmp	SHORT $LN19@writeFacto
$LN18@writeFacto:
; Line 798
	mov	eax, DWORD PTR _indexes$[ebp]
	mov	cx, WORD PTR _code$[ebp]
	mov	WORD PTR [eax], cx
$LN17@writeFacto:
; Line 802
	cmp	DWORD PTR _elementBases$[ebp], 0
	je	SHORT $LN15@writeFacto
; Line 803
	mov	eax, DWORD PTR _elementBases$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _elementBases$[ebp]
	add	edx, 4
	mov	DWORD PTR _elementBases$[ebp], edx
$LN15@writeFacto:
; Line 807
	movzx	eax, WORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _indexes$[ebp]
	mov	dx, WORD PTR [ecx+eax*2]
	mov	WORD PTR _factor$[ebp], dx
$LN14@writeFacto:
; Line 808
	movzx	eax, WORD PTR _factor$[ebp]
	test	eax, eax
	jle	SHORT $LN13@writeFacto
$LN12@writeFacto:
; Line 809
	mov	eax, DWORD PTR _s$[ebp]
	movsx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _s$[ebp]
	add	edx, 1
	mov	DWORD PTR _s$[ebp], edx
	test	ecx, ecx
	je	SHORT $LN23@writeFacto
	mov	DWORD PTR tv89[ebp], 1
	jmp	SHORT $LN24@writeFacto
$LN23@writeFacto:
	mov	DWORD PTR tv89[ebp], 0
$LN24@writeFacto:
	cmp	DWORD PTR tv89[ebp], 0
	je	SHORT $LN11@writeFacto
	jmp	SHORT $LN12@writeFacto
$LN11@writeFacto:
; Line 810
	mov	ax, WORD PTR _factor$[ebp]
	sub	ax, 1
	mov	WORD PTR _factor$[ebp], ax
; Line 811
	jmp	SHORT $LN14@writeFacto
$LN13@writeFacto:
; Line 812
	cmp	DWORD PTR _elements$[ebp], 0
	je	SHORT $LN9@writeFacto
; Line 813
	mov	eax, DWORD PTR _elements$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _elements$[ebp]
	add	edx, 4
	mov	DWORD PTR _elements$[ebp], edx
$LN9@writeFacto:
; Line 817
	mov	eax, DWORD PTR _s$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _c$[ebp], cl
	movsx	edx, BYTE PTR _c$[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	add	eax, 1
	mov	DWORD PTR _s$[ebp], eax
	test	edx, edx
	je	SHORT $LN25@writeFacto
	mov	DWORD PTR tv129[ebp], 1
	jmp	SHORT $LN26@writeFacto
$LN25@writeFacto:
	mov	DWORD PTR tv129[ebp], 0
$LN26@writeFacto:
	cmp	DWORD PTR tv129[ebp], 0
	je	SHORT $LN8@writeFacto
; Line 818
	movzx	eax, WORD PTR _bufferLength$[ebp]
	test	eax, eax
	jle	SHORT $LN7@writeFacto
	mov	eax, DWORD PTR _buffer$[ebp]
	mov	cl, BYTE PTR _c$[ebp]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _buffer$[ebp]
	add	edx, 1
	mov	DWORD PTR _buffer$[ebp], edx
	mov	ax, WORD PTR _bufferLength$[ebp]
	sub	ax, 1
	mov	WORD PTR _bufferLength$[ebp], ax
$LN7@writeFacto:
	mov	ax, WORD PTR _bufferPos$[ebp]
	add	ax, 1
	mov	WORD PTR _bufferPos$[ebp], ax
; Line 819
	jmp	SHORT $LN9@writeFacto
$LN8@writeFacto:
; Line 822
	movzx	eax, WORD PTR _i$[ebp]
	movzx	ecx, WORD PTR _count$[ebp]
	cmp	eax, ecx
	jl	SHORT $LN6@writeFacto
; Line 823
	jmp	SHORT $LN16@writeFacto
$LN6@writeFacto:
; Line 827
	movzx	eax, WORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _factors$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	movzx	eax, WORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _indexes$[ebp]
	movzx	eax, WORD PTR [ecx+eax*2]
	sub	edx, eax
	sub	edx, 1
	mov	WORD PTR _factor$[ebp], dx
$LN5@writeFacto:
; Line 828
	movzx	eax, WORD PTR _factor$[ebp]
	test	eax, eax
	jle	SHORT $LN4@writeFacto
$LN3@writeFacto:
; Line 829
	mov	eax, DWORD PTR _s$[ebp]
	movsx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _s$[ebp]
	add	edx, 1
	mov	DWORD PTR _s$[ebp], edx
	test	ecx, ecx
	je	SHORT $LN27@writeFacto
	mov	DWORD PTR tv155[ebp], 1
	jmp	SHORT $LN28@writeFacto
$LN27@writeFacto:
	mov	DWORD PTR tv155[ebp], 0
$LN28@writeFacto:
	cmp	DWORD PTR tv155[ebp], 0
	je	SHORT $LN2@writeFacto
	jmp	SHORT $LN3@writeFacto
$LN2@writeFacto:
; Line 830
	mov	ax, WORD PTR _factor$[ebp]
	sub	ax, 1
	mov	WORD PTR _factor$[ebp], ax
; Line 831
	jmp	SHORT $LN5@writeFacto
$LN4@writeFacto:
; Line 833
	mov	ax, WORD PTR _i$[ebp]
	add	ax, 1
	mov	WORD PTR _i$[ebp], ax
; Line 834
	jmp	$LN17@writeFacto
$LN16@writeFacto:
; Line 837
	movzx	eax, WORD PTR _bufferLength$[ebp]
	test	eax, eax
	jle	SHORT $LN1@writeFacto
; Line 838
	mov	eax, DWORD PTR _buffer$[ebp]
	mov	BYTE PTR [eax], 0
$LN1@writeFacto:
; Line 841
	mov	ax, WORD PTR _bufferPos$[ebp]
; Line 842
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?writeFactorSuffix@icu_56@@YAGPBGGPBDIQAGQAPBD3PADG@Z ENDP ; icu_56::writeFactorSuffix
_TEXT	ENDS
PUBLIC	_u_getISOComment_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _u_getISOComment_56
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_dest$ = 12						; size = 4
_destCapacity$ = 16					; size = 4
_pErrorCode$ = 20					; size = 4
_u_getISOComment_56 PROC				; COMDAT
; Line 1504
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1506
	cmp	DWORD PTR _pErrorCode$[ebp], 0
	je	SHORT $LN4@u_getISOCo
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN5@u_getISOCo
$LN4@u_getISOCo:
; Line 1507
	xor	eax, eax
	jmp	SHORT $LN6@u_getISOCo
	jmp	SHORT $LN3@u_getISOCo
$LN5@u_getISOCo:
; Line 1508
	cmp	DWORD PTR _destCapacity$[ebp], 0
	jl	SHORT $LN1@u_getISOCo
	cmp	DWORD PTR _destCapacity$[ebp], 0
	jle	SHORT $LN3@u_getISOCo
	cmp	DWORD PTR _dest$[ebp], 0
	jne	SHORT $LN3@u_getISOCo
$LN1@u_getISOCo:
; Line 1509
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 1
; Line 1510
	xor	eax, eax
	jmp	SHORT $LN6@u_getISOCo
$LN3@u_getISOCo:
; Line 1513
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _destCapacity$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dest$[ebp]
	push	edx
	call	_u_terminateChars_56
	add	esp, 16					; 00000010H
$LN6@u_getISOCo:
; Line 1514
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_u_getISOComment_56 ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_u_charFromName_56
EXTRN	_strcmp:PROC
EXTRN	_uprv_asciitolower_56:PROC
EXTRN	_uprv_toupper_56:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _u_charFromName_56
_TEXT	SEGMENT
tv82 = -556						; size = 4
_cIdx$45025 = -356					; size = 4
_error$ = -344						; size = 4
_c0$ = -329						; size = 1
_cp$ = -320						; size = 4
_i$ = -308						; size = 4
_p$ = -296						; size = 4
_algRange$ = -284					; size = 4
_findName$ = -272					; size = 8
_lower$ = -256						; size = 120
_upper$ = -128						; size = 120
__$ArrayPad$ = -4					; size = 4
_nameChoice$ = 8					; size = 4
_name$ = 12						; size = 4
_pErrorCode$ = 16					; size = 4
_u_charFromName_56 PROC					; COMDAT
; Line 1519
	push	ebp
	mov	ebp, esp
	sub	esp, 556				; 0000022cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-556]
	mov	ecx, 139				; 0000008bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 1525
	mov	DWORD PTR _cp$[ebp], 0
; Line 1527
	mov	DWORD PTR _error$[ebp], 65535		; 0000ffffH
; Line 1529
	cmp	DWORD PTR _pErrorCode$[ebp], 0
	je	SHORT $LN32@u_charFrom
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN33@u_charFrom
$LN32@u_charFrom:
; Line 1530
	mov	eax, DWORD PTR _error$[ebp]
	jmp	$LN34@u_charFrom
$LN33@u_charFrom:
; Line 1533
	cmp	DWORD PTR _nameChoice$[ebp], 4
	jge	SHORT $LN30@u_charFrom
	cmp	DWORD PTR _name$[ebp], 0
	je	SHORT $LN30@u_charFrom
	mov	eax, DWORD PTR _name$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN31@u_charFrom
$LN30@u_charFrom:
; Line 1534
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 1
; Line 1535
	mov	eax, DWORD PTR _error$[ebp]
	jmp	$LN34@u_charFrom
$LN31@u_charFrom:
; Line 1538
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	call	?isDataLoaded@icu_56@@YACPAW4UErrorCode@@@Z ; icu_56::isDataLoaded
	add	esp, 4
	movsx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN29@u_charFrom
; Line 1539
	mov	eax, DWORD PTR _error$[ebp]
	jmp	$LN34@u_charFrom
$LN29@u_charFrom:
; Line 1543
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN28@u_charFrom
$LN27@u_charFrom:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN28@u_charFrom:
	cmp	DWORD PTR _i$[ebp], 120			; 00000078H
	jae	$LN26@u_charFrom
; Line 1544
	mov	eax, DWORD PTR _name$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _c0$[ebp], cl
	movsx	edx, BYTE PTR _c0$[ebp]
	mov	eax, DWORD PTR _name$[ebp]
	add	eax, 1
	mov	DWORD PTR _name$[ebp], eax
	test	edx, edx
	je	SHORT $LN36@u_charFrom
	mov	DWORD PTR tv82[ebp], 1
	jmp	SHORT $LN37@u_charFrom
$LN36@u_charFrom:
	mov	DWORD PTR tv82[ebp], 0
$LN37@u_charFrom:
	cmp	DWORD PTR tv82[ebp], 0
	je	SHORT $LN25@u_charFrom
; Line 1545
	movzx	eax, BYTE PTR _c0$[ebp]
	push	eax
	call	_uprv_toupper_56
	add	esp, 4
	mov	ecx, DWORD PTR _i$[ebp]
	mov	BYTE PTR _upper$[ebp+ecx], al
; Line 1546
	movzx	eax, BYTE PTR _c0$[ebp]
	push	eax
	call	_uprv_asciitolower_56
	add	esp, 4
	mov	ecx, DWORD PTR _i$[ebp]
	mov	BYTE PTR _lower$[ebp+ecx], al
; Line 1547
	jmp	SHORT $LN24@u_charFrom
$LN25@u_charFrom:
; Line 1548
	mov	eax, DWORD PTR _i$[ebp]
	mov	BYTE PTR _lower$[ebp+eax], 0
	mov	ecx, DWORD PTR _i$[ebp]
	mov	BYTE PTR _upper$[ebp+ecx], 0
; Line 1549
	jmp	SHORT $LN26@u_charFrom
$LN24@u_charFrom:
; Line 1551
	jmp	$LN27@u_charFrom
$LN26@u_charFrom:
; Line 1552
	cmp	DWORD PTR _i$[ebp], 120			; 00000078H
	jne	SHORT $LN23@u_charFrom
; Line 1554
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 12			; 0000000cH
; Line 1555
	mov	eax, DWORD PTR _error$[ebp]
	jmp	$LN34@u_charFrom
$LN23@u_charFrom:
; Line 1560
	movsx	eax, BYTE PTR _lower$[ebp]
	cmp	eax, 60					; 0000003cH
	jne	$LN22@u_charFrom
; Line 1561
	cmp	DWORD PTR _nameChoice$[ebp], 2
	jne	$LN21@u_charFrom
; Line 1563
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _i$[ebp]
	movsx	edx, BYTE PTR _lower$[ebp+ecx]
	cmp	edx, 62					; 0000003eH
	jne	$LN21@u_charFrom
	cmp	DWORD PTR _i$[ebp], 3
	jb	$LN21@u_charFrom
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _i$[ebp]
	movsx	edx, BYTE PTR _lower$[ebp+ecx]
	cmp	edx, 45					; 0000002dH
	je	$LN21@u_charFrom
$LN19@u_charFrom:
; Line 1564
	cmp	DWORD PTR _i$[ebp], 3
	jb	SHORT $LN18@u_charFrom
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _i$[ebp]
	movsx	edx, BYTE PTR _lower$[ebp+ecx]
	cmp	edx, 45					; 0000002dH
	je	SHORT $LN18@u_charFrom
	jmp	SHORT $LN19@u_charFrom
$LN18@u_charFrom:
; Line 1566
	cmp	DWORD PTR _i$[ebp], 2
	jb	$LN21@u_charFrom
	mov	eax, DWORD PTR _i$[ebp]
	movsx	ecx, BYTE PTR _lower$[ebp+eax]
	cmp	ecx, 45					; 0000002dH
	jne	$LN21@u_charFrom
; Line 1569
	mov	eax, DWORD PTR _i$[ebp]
	mov	BYTE PTR _lower$[ebp+eax], 0
; Line 1571
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN16@u_charFrom
$LN15@u_charFrom:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN16@u_charFrom:
	mov	eax, DWORD PTR _i$[ebp]
	movsx	ecx, BYTE PTR _lower$[ebp+eax]
	cmp	ecx, 62					; 0000003eH
	je	$LN14@u_charFrom
; Line 1572
	mov	eax, DWORD PTR _i$[ebp]
	movsx	ecx, BYTE PTR _lower$[ebp+eax]
	cmp	ecx, 48					; 00000030H
	jl	SHORT $LN13@u_charFrom
	mov	eax, DWORD PTR _i$[ebp]
	movsx	ecx, BYTE PTR _lower$[ebp+eax]
	cmp	ecx, 57					; 00000039H
	jg	SHORT $LN13@u_charFrom
; Line 1573
	mov	eax, DWORD PTR _cp$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _i$[ebp]
	movsx	edx, BYTE PTR _lower$[ebp+ecx]
	lea	eax, DWORD PTR [eax+edx-48]
	mov	DWORD PTR _cp$[ebp], eax
	jmp	SHORT $LN12@u_charFrom
$LN13@u_charFrom:
; Line 1574
	mov	eax, DWORD PTR _i$[ebp]
	movsx	ecx, BYTE PTR _lower$[ebp+eax]
	cmp	ecx, 97					; 00000061H
	jl	SHORT $LN11@u_charFrom
	mov	eax, DWORD PTR _i$[ebp]
	movsx	ecx, BYTE PTR _lower$[ebp+eax]
	cmp	ecx, 102				; 00000066H
	jg	SHORT $LN11@u_charFrom
; Line 1575
	mov	eax, DWORD PTR _cp$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _i$[ebp]
	movsx	edx, BYTE PTR _lower$[ebp+ecx]
	lea	eax, DWORD PTR [eax+edx-87]
	mov	DWORD PTR _cp$[ebp], eax
; Line 1576
	jmp	SHORT $LN12@u_charFrom
$LN11@u_charFrom:
; Line 1577
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 12			; 0000000cH
; Line 1578
	mov	eax, DWORD PTR _error$[ebp]
	jmp	$LN34@u_charFrom
$LN12@u_charFrom:
; Line 1580
	jmp	$LN15@u_charFrom
$LN14@u_charFrom:
; Line 1586
	mov	eax, DWORD PTR _i$[ebp]
	mov	BYTE PTR _lower$[ebp+eax], 0
	mov	DWORD PTR _cIdx$45025[ebp], 0
	jmp	SHORT $LN9@u_charFrom
$LN8@u_charFrom:
	mov	eax, DWORD PTR _cIdx$45025[ebp]
	add	eax, 1
	mov	DWORD PTR _cIdx$45025[ebp], eax
$LN9@u_charFrom:
	cmp	DWORD PTR _cIdx$45025[ebp], 33		; 00000021H
	jae	SHORT $LN21@u_charFrom
; Line 1588
	mov	eax, DWORD PTR _cIdx$45025[ebp]
	mov	ecx, DWORD PTR _charCatNames[eax*4]
	push	ecx
	lea	edx, DWORD PTR _lower$[ebp+1]
	push	edx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN6@u_charFrom
; Line 1589
	mov	eax, DWORD PTR _cp$[ebp]
	push	eax
	call	?getCharCat@icu_56@@YAEH@Z		; icu_56::getCharCat
	add	esp, 4
	movzx	ecx, al
	cmp	ecx, DWORD PTR _cIdx$45025[ebp]
	jne	SHORT $LN5@u_charFrom
; Line 1590
	mov	eax, DWORD PTR _cp$[ebp]
	jmp	$LN34@u_charFrom
$LN5@u_charFrom:
; Line 1592
	jmp	SHORT $LN21@u_charFrom
$LN6@u_charFrom:
; Line 1594
	jmp	SHORT $LN8@u_charFrom
$LN21@u_charFrom:
; Line 1599
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 12			; 0000000cH
; Line 1600
	mov	eax, DWORD PTR _error$[ebp]
	jmp	$LN34@u_charFrom
$LN22@u_charFrom:
; Line 1604
	mov	eax, DWORD PTR _uCharNames
	mov	ecx, DWORD PTR _uCharNames
	add	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _p$[ebp], ecx
; Line 1605
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _i$[ebp], ecx
; Line 1606
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 4
	mov	DWORD PTR _algRange$[ebp], eax
$LN4@u_charFrom:
; Line 1607
	cmp	DWORD PTR _i$[ebp], 0
	jbe	SHORT $LN3@u_charFrom
; Line 1608
	lea	eax, DWORD PTR _upper$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nameChoice$[ebp]
	push	ecx
	mov	edx, DWORD PTR _algRange$[ebp]
	push	edx
	call	?findAlgName@icu_56@@YAHPAUAlgorithmicRange@1@W4UCharNameChoice@@PBD@Z ; icu_56::findAlgName
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _cp$[ebp], eax
	cmp	DWORD PTR _cp$[ebp], 65535		; 0000ffffH
	je	SHORT $LN2@u_charFrom
; Line 1609
	mov	eax, DWORD PTR _cp$[ebp]
	jmp	SHORT $LN34@u_charFrom
$LN2@u_charFrom:
; Line 1611
	mov	eax, DWORD PTR _algRange$[ebp]
	movzx	ecx, WORD PTR [eax+10]
	add	ecx, DWORD PTR _algRange$[ebp]
	mov	DWORD PTR _algRange$[ebp], ecx
; Line 1612
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
; Line 1613
	jmp	SHORT $LN4@u_charFrom
$LN3@u_charFrom:
; Line 1616
	lea	eax, DWORD PTR _upper$[ebp]
	mov	DWORD PTR _findName$[ebp], eax
; Line 1617
	mov	eax, DWORD PTR _error$[ebp]
	mov	DWORD PTR _findName$[ebp+4], eax
; Line 1618
	mov	eax, DWORD PTR _nameChoice$[ebp]
	push	eax
	lea	ecx, DWORD PTR _findName$[ebp]
	push	ecx
	push	0
	push	1114112					; 00110000H
	push	0
	mov	edx, DWORD PTR _uCharNames
	push	edx
	call	?enumNames@icu_56@@YACPAUUCharNames@1@HHP6ACPAXHW4UCharNameChoice@@PBDH@Z12@Z ; icu_56::enumNames
	add	esp, 24					; 00000018H
; Line 1619
	mov	eax, DWORD PTR _findName$[ebp+4]
	cmp	eax, DWORD PTR _error$[ebp]
	jne	SHORT $LN1@u_charFrom
; Line 1620
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 12			; 0000000cH
$LN1@u_charFrom:
; Line 1622
	mov	eax, DWORD PTR _findName$[ebp+4]
$LN34@u_charFrom:
; Line 1623
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN42@u_charFrom
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 556				; 0000022cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN42@u_charFrom:
	DD	3
	DD	$LN41@u_charFrom
$LN41@u_charFrom:
	DD	-128					; ffffff80H
	DD	120					; 00000078H
	DD	$LN38@u_charFrom
	DD	-256					; ffffff00H
	DD	120					; 00000078H
	DD	$LN39@u_charFrom
	DD	-272					; fffffef0H
	DD	8
	DD	$LN40@u_charFrom
$LN40@u_charFrom:
	DB	102					; 00000066H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	78					; 0000004eH
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	0
$LN39@u_charFrom:
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	119					; 00000077H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
$LN38@u_charFrom:
	DB	117					; 00000075H
	DB	112					; 00000070H
	DB	112					; 00000070H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
_u_charFromName_56 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?enumNames@icu_56@@YACPAUUCharNames@1@HHP6ACPAXHW4UCharNameChoice@@PBDH@Z12@Z
_TEXT	SEGMENT
_next$44531 = -140					; size = 4
_end$44525 = -128					; size = 4
_nextGroup$44521 = -116					; size = 4
_end$44515 = -104					; size = 4
_nextGroup$44513 = -92					; size = 4
_groups$44504 = -80					; size = 4
_extLimit$44497 = -68					; size = 4
_groupLimit$ = -56					; size = 4
_group$ = -44						; size = 4
_groupCount$ = -32					; size = 2
_endGroupMSB$ = -20					; size = 2
_startGroupMSB$ = -8					; size = 2
_names$ = 8						; size = 4
_start$ = 12						; size = 4
_limit$ = 16						; size = 4
_fn$ = 20						; size = 4
_context$ = 24						; size = 4
_nameChoice$ = 28					; size = 4
?enumNames@icu_56@@YACPAUUCharNames@1@HHP6ACPAXHW4UCharNameChoice@@PBDH@Z12@Z PROC ; icu_56::enumNames, COMDAT
; Line 668
	push	ebp
	mov	ebp, esp
	sub	esp, 336				; 00000150H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-336]
	mov	ecx, 84					; 00000054H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 672
	mov	eax, DWORD PTR _start$[ebp]
	sar	eax, 5
	mov	WORD PTR _startGroupMSB$[ebp], ax
; Line 673
	mov	eax, DWORD PTR _limit$[ebp]
	sub	eax, 1
	sar	eax, 5
	mov	WORD PTR _endGroupMSB$[ebp], ax
; Line 676
	mov	eax, DWORD PTR _start$[ebp]
	push	eax
	mov	ecx, DWORD PTR _names$[ebp]
	push	ecx
	call	?getGroup@icu_56@@YAPBGPAUUCharNames@1@I@Z ; icu_56::getGroup
	add	esp, 8
	mov	DWORD PTR _group$[ebp], eax
; Line 678
	movzx	eax, WORD PTR _startGroupMSB$[ebp]
	mov	ecx, DWORD PTR _group$[ebp]
	movzx	edx, WORD PTR [ecx]
	cmp	eax, edx
	jge	SHORT $LN27@enumNames
	cmp	DWORD PTR _nameChoice$[ebp], 2
	jne	SHORT $LN27@enumNames
; Line 680
	mov	eax, DWORD PTR _group$[ebp]
	movzx	ecx, WORD PTR [eax]
	shl	ecx, 5
	mov	DWORD PTR _extLimit$44497[ebp], ecx
; Line 681
	mov	eax, DWORD PTR _extLimit$44497[ebp]
	cmp	eax, DWORD PTR _limit$[ebp]
	jle	SHORT $LN26@enumNames
; Line 682
	mov	eax, DWORD PTR _limit$[ebp]
	mov	DWORD PTR _extLimit$44497[ebp], eax
$LN26@enumNames:
; Line 684
	mov	eax, DWORD PTR _context$[ebp]
	push	eax
	mov	ecx, DWORD PTR _fn$[ebp]
	push	ecx
	mov	edx, DWORD PTR _extLimit$44497[ebp]
	sub	edx, 1
	push	edx
	mov	eax, DWORD PTR _start$[ebp]
	push	eax
	call	?enumExtNames@icu_56@@YACHHP6ACPAXHW4UCharNameChoice@@PBDH@Z0@Z ; icu_56::enumExtNames
	add	esp, 16					; 00000010H
	movsx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN25@enumNames
; Line 685
	xor	al, al
	jmp	$LN28@enumNames
$LN25@enumNames:
; Line 687
	mov	eax, DWORD PTR _extLimit$44497[ebp]
	mov	DWORD PTR _start$[ebp], eax
$LN27@enumNames:
; Line 690
	movzx	eax, WORD PTR _startGroupMSB$[ebp]
	movzx	ecx, WORD PTR _endGroupMSB$[ebp]
	cmp	eax, ecx
	jne	SHORT $LN24@enumNames
; Line 691
	movzx	eax, WORD PTR _startGroupMSB$[ebp]
	mov	ecx, DWORD PTR _group$[ebp]
	movzx	edx, WORD PTR [ecx]
	cmp	eax, edx
	jne	SHORT $LN23@enumNames
; Line 693
	mov	eax, DWORD PTR _nameChoice$[ebp]
	push	eax
	mov	ecx, DWORD PTR _context$[ebp]
	push	ecx
	mov	edx, DWORD PTR _fn$[ebp]
	push	edx
	mov	eax, DWORD PTR _limit$[ebp]
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _start$[ebp]
	push	ecx
	mov	edx, DWORD PTR _group$[ebp]
	push	edx
	mov	eax, DWORD PTR _names$[ebp]
	push	eax
	call	?enumGroupNames@icu_56@@YACPAUUCharNames@1@PBGHHP6ACPAXHW4UCharNameChoice@@PBDH@Z23@Z ; icu_56::enumGroupNames
	add	esp, 28					; 0000001cH
	jmp	$LN28@enumNames
$LN23@enumNames:
; Line 695
	jmp	$LN22@enumNames
$LN24@enumNames:
; Line 696
	mov	eax, DWORD PTR _names$[ebp]
	mov	ecx, DWORD PTR _names$[ebp]
	add	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _groups$44504[ebp], ecx
; Line 697
	mov	eax, DWORD PTR _groups$44504[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR _groupCount$[ebp], cx
	mov	edx, DWORD PTR _groups$44504[ebp]
	add	edx, 2
	mov	DWORD PTR _groups$44504[ebp], edx
; Line 698
	movzx	eax, WORD PTR _groupCount$[ebp]
	imul	eax, 3
	mov	ecx, DWORD PTR _groups$44504[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR _groupLimit$[ebp], edx
; Line 700
	movzx	eax, WORD PTR _startGroupMSB$[ebp]
	mov	ecx, DWORD PTR _group$[ebp]
	movzx	edx, WORD PTR [ecx]
	cmp	eax, edx
	jne	SHORT $LN21@enumNames
; Line 702
	mov	eax, DWORD PTR _start$[ebp]
	and	eax, 31					; 0000001fH
	je	SHORT $LN20@enumNames
; Line 705
	mov	eax, DWORD PTR _nameChoice$[ebp]
	push	eax
	mov	ecx, DWORD PTR _context$[ebp]
	push	ecx
	mov	edx, DWORD PTR _fn$[ebp]
	push	edx
	movzx	eax, WORD PTR _startGroupMSB$[ebp]
	shl	eax, 5
	add	eax, 31					; 0000001fH
	push	eax
	mov	ecx, DWORD PTR _start$[ebp]
	push	ecx
	mov	edx, DWORD PTR _group$[ebp]
	push	edx
	mov	eax, DWORD PTR _names$[ebp]
	push	eax
	call	?enumGroupNames@icu_56@@YACPAUUCharNames@1@PBGHHP6ACPAXHW4UCharNameChoice@@PBDH@Z23@Z ; icu_56::enumGroupNames
	add	esp, 28					; 0000001cH
	movsx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN19@enumNames
; Line 706
	xor	al, al
	jmp	$LN28@enumNames
$LN19@enumNames:
; Line 708
	mov	eax, DWORD PTR _group$[ebp]
	add	eax, 6
	mov	DWORD PTR _group$[ebp], eax
$LN20@enumNames:
; Line 709
	jmp	SHORT $LN13@enumNames
$LN21@enumNames:
; Line 710
	movzx	eax, WORD PTR _startGroupMSB$[ebp]
	mov	ecx, DWORD PTR _group$[ebp]
	movzx	edx, WORD PTR [ecx]
	cmp	eax, edx
	jle	SHORT $LN13@enumNames
; Line 712
	mov	eax, DWORD PTR _group$[ebp]
	add	eax, 6
	mov	DWORD PTR _nextGroup$44513[ebp], eax
; Line 713
	mov	eax, DWORD PTR _nextGroup$44513[ebp]
	cmp	eax, DWORD PTR _groupLimit$[ebp]
	jae	SHORT $LN16@enumNames
	mov	eax, DWORD PTR _nextGroup$44513[ebp]
	movzx	ecx, WORD PTR [eax]
	movzx	edx, WORD PTR _startGroupMSB$[ebp]
	cmp	ecx, edx
	jle	SHORT $LN16@enumNames
	cmp	DWORD PTR _nameChoice$[ebp], 2
	jne	SHORT $LN16@enumNames
; Line 714
	mov	eax, DWORD PTR _nextGroup$44513[ebp]
	movzx	ecx, WORD PTR [eax]
	shl	ecx, 5
	mov	DWORD PTR _end$44515[ebp], ecx
; Line 715
	mov	eax, DWORD PTR _end$44515[ebp]
	cmp	eax, DWORD PTR _limit$[ebp]
	jle	SHORT $LN15@enumNames
; Line 716
	mov	eax, DWORD PTR _limit$[ebp]
	mov	DWORD PTR _end$44515[ebp], eax
$LN15@enumNames:
; Line 718
	mov	eax, DWORD PTR _context$[ebp]
	push	eax
	mov	ecx, DWORD PTR _fn$[ebp]
	push	ecx
	mov	edx, DWORD PTR _end$44515[ebp]
	sub	edx, 1
	push	edx
	mov	eax, DWORD PTR _start$[ebp]
	push	eax
	call	?enumExtNames@icu_56@@YACHHP6ACPAXHW4UCharNameChoice@@PBDH@Z0@Z ; icu_56::enumExtNames
	add	esp, 16					; 00000010H
	movsx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN16@enumNames
; Line 719
	xor	al, al
	jmp	$LN28@enumNames
$LN16@enumNames:
; Line 722
	mov	eax, DWORD PTR _nextGroup$44513[ebp]
	mov	DWORD PTR _group$[ebp], eax
$LN13@enumNames:
; Line 726
	mov	eax, DWORD PTR _group$[ebp]
	cmp	eax, DWORD PTR _groupLimit$[ebp]
	jae	$LN12@enumNames
	mov	eax, DWORD PTR _group$[ebp]
	movzx	ecx, WORD PTR [eax]
	movzx	edx, WORD PTR _endGroupMSB$[ebp]
	cmp	ecx, edx
	jge	$LN12@enumNames
; Line 728
	mov	eax, DWORD PTR _group$[ebp]
	movzx	ecx, WORD PTR [eax]
	shl	ecx, 5
	mov	DWORD PTR _start$[ebp], ecx
; Line 729
	mov	eax, DWORD PTR _nameChoice$[ebp]
	push	eax
	mov	ecx, DWORD PTR _context$[ebp]
	push	ecx
	mov	edx, DWORD PTR _fn$[ebp]
	push	edx
	mov	eax, DWORD PTR _start$[ebp]
	add	eax, 31					; 0000001fH
	push	eax
	mov	ecx, DWORD PTR _start$[ebp]
	push	ecx
	mov	edx, DWORD PTR _group$[ebp]
	push	edx
	mov	eax, DWORD PTR _names$[ebp]
	push	eax
	call	?enumGroupNames@icu_56@@YACPAUUCharNames@1@PBGHHP6ACPAXHW4UCharNameChoice@@PBDH@Z23@Z ; icu_56::enumGroupNames
	add	esp, 28					; 0000001cH
	movsx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN11@enumNames
; Line 730
	xor	al, al
	jmp	$LN28@enumNames
$LN11@enumNames:
; Line 732
	mov	eax, DWORD PTR _group$[ebp]
	add	eax, 6
	mov	DWORD PTR _nextGroup$44521[ebp], eax
; Line 733
	mov	eax, DWORD PTR _nextGroup$44521[ebp]
	cmp	eax, DWORD PTR _groupLimit$[ebp]
	jae	SHORT $LN10@enumNames
	mov	eax, DWORD PTR _nextGroup$44521[ebp]
	movzx	ecx, WORD PTR [eax]
	mov	edx, DWORD PTR _group$[ebp]
	movzx	eax, WORD PTR [edx]
	add	eax, 1
	cmp	ecx, eax
	jle	SHORT $LN10@enumNames
	cmp	DWORD PTR _nameChoice$[ebp], 2
	jne	SHORT $LN10@enumNames
; Line 734
	mov	eax, DWORD PTR _nextGroup$44521[ebp]
	movzx	ecx, WORD PTR [eax]
	shl	ecx, 5
	mov	DWORD PTR _end$44525[ebp], ecx
; Line 735
	mov	eax, DWORD PTR _end$44525[ebp]
	cmp	eax, DWORD PTR _limit$[ebp]
	jle	SHORT $LN9@enumNames
; Line 736
	mov	eax, DWORD PTR _limit$[ebp]
	mov	DWORD PTR _end$44525[ebp], eax
$LN9@enumNames:
; Line 738
	mov	eax, DWORD PTR _context$[ebp]
	push	eax
	mov	ecx, DWORD PTR _fn$[ebp]
	push	ecx
	mov	edx, DWORD PTR _end$44525[ebp]
	sub	edx, 1
	push	edx
	mov	eax, DWORD PTR _group$[ebp]
	movzx	ecx, WORD PTR [eax]
	add	ecx, 1
	shl	ecx, 5
	push	ecx
	call	?enumExtNames@icu_56@@YACHHP6ACPAXHW4UCharNameChoice@@PBDH@Z0@Z ; icu_56::enumExtNames
	add	esp, 16					; 00000010H
	movsx	edx, al
	test	edx, edx
	jne	SHORT $LN10@enumNames
; Line 739
	xor	al, al
	jmp	$LN28@enumNames
$LN10@enumNames:
; Line 742
	mov	eax, DWORD PTR _nextGroup$44521[ebp]
	mov	DWORD PTR _group$[ebp], eax
; Line 743
	jmp	$LN13@enumNames
$LN12@enumNames:
; Line 746
	mov	eax, DWORD PTR _group$[ebp]
	cmp	eax, DWORD PTR _groupLimit$[ebp]
	jae	SHORT $LN7@enumNames
	mov	eax, DWORD PTR _group$[ebp]
	movzx	ecx, WORD PTR [eax]
	movzx	edx, WORD PTR _endGroupMSB$[ebp]
	cmp	ecx, edx
	jne	SHORT $LN7@enumNames
; Line 747
	mov	eax, DWORD PTR _nameChoice$[ebp]
	push	eax
	mov	ecx, DWORD PTR _context$[ebp]
	push	ecx
	mov	edx, DWORD PTR _fn$[ebp]
	push	edx
	mov	eax, DWORD PTR _limit$[ebp]
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _limit$[ebp]
	sub	ecx, 1
	and	ecx, -32				; ffffffe0H
	push	ecx
	mov	edx, DWORD PTR _group$[ebp]
	push	edx
	mov	eax, DWORD PTR _names$[ebp]
	push	eax
	call	?enumGroupNames@icu_56@@YACPAUUCharNames@1@PBGHHP6ACPAXHW4UCharNameChoice@@PBDH@Z23@Z ; icu_56::enumGroupNames
	add	esp, 28					; 0000001cH
	jmp	SHORT $LN28@enumNames
	jmp	SHORT $LN22@enumNames
$LN7@enumNames:
; Line 748
	cmp	DWORD PTR _nameChoice$[ebp], 2
	jne	SHORT $LN5@enumNames
	mov	eax, DWORD PTR _group$[ebp]
	cmp	eax, DWORD PTR _groupLimit$[ebp]
	jne	SHORT $LN5@enumNames
; Line 749
	mov	eax, DWORD PTR _group$[ebp]
	movzx	ecx, WORD PTR [eax-6]
	add	ecx, 1
	shl	ecx, 5
	mov	DWORD PTR _next$44531[ebp], ecx
; Line 750
	mov	eax, DWORD PTR _next$44531[ebp]
	cmp	eax, DWORD PTR _start$[ebp]
	jle	SHORT $LN4@enumNames
; Line 751
	mov	eax, DWORD PTR _next$44531[ebp]
	mov	DWORD PTR _start$[ebp], eax
$LN4@enumNames:
; Line 753
	jmp	SHORT $LN22@enumNames
$LN5@enumNames:
; Line 754
	mov	al, 1
	jmp	SHORT $LN28@enumNames
$LN22@enumNames:
; Line 760
	cmp	DWORD PTR _nameChoice$[ebp], 2
	jne	SHORT $LN2@enumNames
; Line 761
	cmp	DWORD PTR _limit$[ebp], 1114112		; 00110000H
	jle	SHORT $LN1@enumNames
; Line 762
	mov	DWORD PTR _limit$[ebp], 1114112		; 00110000H
$LN1@enumNames:
; Line 764
	mov	eax, DWORD PTR _context$[ebp]
	push	eax
	mov	ecx, DWORD PTR _fn$[ebp]
	push	ecx
	mov	edx, DWORD PTR _limit$[ebp]
	sub	edx, 1
	push	edx
	mov	eax, DWORD PTR _start$[ebp]
	push	eax
	call	?enumExtNames@icu_56@@YACHHP6ACPAXHW4UCharNameChoice@@PBDH@Z0@Z ; icu_56::enumExtNames
	add	esp, 16					; 00000010H
	jmp	SHORT $LN28@enumNames
$LN2@enumNames:
; Line 767
	mov	al, 1
$LN28@enumNames:
; Line 768
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 336				; 00000150H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?enumNames@icu_56@@YACPAUUCharNames@1@HHP6ACPAXHW4UCharNameChoice@@PBDH@Z12@Z ENDP ; icu_56::enumNames
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?enumGroupNames@icu_56@@YACPAUUCharNames@1@PBGHHP6ACPAXHW4UCharNameChoice@@PBDH@Z23@Z
_TEXT	SEGMENT
_otherName$44460 = -396					; size = 4
_length$44452 = -384					; size = 2
_buffer$44451 = -372					; size = 200
_s$ = -164						; size = 4
_lengths$ = -152					; size = 68
_offsets$ = -76						; size = 68
__$ArrayPad$ = -4					; size = 4
_names$ = 8						; size = 4
_group$ = 12						; size = 4
_start$ = 16						; size = 4
_end$ = 20						; size = 4
_fn$ = 24						; size = 4
_context$ = 28						; size = 4
_nameChoice$ = 32					; size = 4
?enumGroupNames@icu_56@@YACPAUUCharNames@1@PBGHHP6ACPAXHW4UCharNameChoice@@PBDH@Z23@Z PROC ; icu_56::enumGroupNames, COMDAT
; Line 600
	push	ebp
	mov	ebp, esp
	sub	esp, 592				; 00000250H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-592]
	mov	ecx, 148				; 00000094H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 602
	mov	eax, DWORD PTR _names$[ebp]
	mov	ecx, DWORD PTR _names$[ebp]
	add	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _group$[ebp]
	movzx	eax, WORD PTR [edx+2]
	shl	eax, 16					; 00000010H
	mov	edx, DWORD PTR _group$[ebp]
	movzx	edx, WORD PTR [edx+4]
	or	eax, edx
	add	ecx, eax
	mov	DWORD PTR _s$[ebp], ecx
; Line 604
	lea	eax, DWORD PTR _lengths$[ebp]
	push	eax
	lea	ecx, DWORD PTR _offsets$[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	call	?expandGroupLengths@icu_56@@YAPBEPBEQAG1@Z ; icu_56::expandGroupLengths
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _s$[ebp], eax
; Line 605
	cmp	DWORD PTR _fn$[ebp], 0
	je	$LN10@enumGroupN
$LN9@enumGroupN:
; Line 609
	mov	eax, DWORD PTR _start$[ebp]
	cmp	eax, DWORD PTR _end$[ebp]
	jg	$LN8@enumGroupN
; Line 610
	push	200					; 000000c8H
	lea	eax, DWORD PTR _buffer$44451[ebp]
	push	eax
	mov	ecx, DWORD PTR _nameChoice$[ebp]
	push	ecx
	mov	edx, DWORD PTR _start$[ebp]
	and	edx, 31					; 0000001fH
	movzx	eax, WORD PTR _lengths$[ebp+edx*2]
	push	eax
	mov	ecx, DWORD PTR _start$[ebp]
	and	ecx, 31					; 0000001fH
	movzx	edx, WORD PTR _offsets$[ebp+ecx*2]
	add	edx, DWORD PTR _s$[ebp]
	push	edx
	mov	eax, DWORD PTR _names$[ebp]
	push	eax
	call	?expandName@icu_56@@YAGPAUUCharNames@1@PBEGW4UCharNameChoice@@PADG@Z ; icu_56::expandName
	add	esp, 24					; 00000018H
	mov	WORD PTR _length$44452[ebp], ax
; Line 611
	movzx	eax, WORD PTR _length$44452[ebp]
	test	eax, eax
	jne	SHORT $LN7@enumGroupN
	cmp	DWORD PTR _nameChoice$[ebp], 2
	jne	SHORT $LN7@enumGroupN
; Line 612
	push	200					; 000000c8H
	lea	eax, DWORD PTR _buffer$44451[ebp]
	push	eax
	mov	ecx, DWORD PTR _start$[ebp]
	push	ecx
	call	?getExtName@icu_56@@YAGIPADG@Z		; icu_56::getExtName
	add	esp, 12					; 0000000cH
	mov	WORD PTR _length$44452[ebp], ax
	movzx	edx, WORD PTR _length$44452[ebp]
	mov	BYTE PTR _buffer$44451[ebp+edx], 0
$LN7@enumGroupN:
; Line 615
	movzx	eax, WORD PTR _length$44452[ebp]
	test	eax, eax
	jle	SHORT $LN6@enumGroupN
; Line 616
	movzx	eax, WORD PTR _length$44452[ebp]
	mov	esi, esp
	push	eax
	lea	ecx, DWORD PTR _buffer$44451[ebp]
	push	ecx
	mov	edx, DWORD PTR _nameChoice$[ebp]
	push	edx
	mov	eax, DWORD PTR _start$[ebp]
	push	eax
	mov	ecx, DWORD PTR _context$[ebp]
	push	ecx
	call	DWORD PTR _fn$[ebp]
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
	movsx	edx, al
	test	edx, edx
	jne	SHORT $LN6@enumGroupN
; Line 617
	xor	al, al
	jmp	SHORT $LN11@enumGroupN
$LN6@enumGroupN:
; Line 620
	mov	eax, DWORD PTR _start$[ebp]
	add	eax, 1
	mov	DWORD PTR _start$[ebp], eax
; Line 621
	jmp	$LN9@enumGroupN
$LN8@enumGroupN:
; Line 622
	jmp	SHORT $LN4@enumGroupN
$LN10@enumGroupN:
; Line 623
	mov	eax, DWORD PTR _context$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _otherName$44460[ebp], ecx
$LN3@enumGroupN:
; Line 624
	mov	eax, DWORD PTR _start$[ebp]
	cmp	eax, DWORD PTR _end$[ebp]
	jg	SHORT $LN4@enumGroupN
; Line 625
	mov	eax, DWORD PTR _otherName$44460[ebp]
	push	eax
	mov	ecx, DWORD PTR _nameChoice$[ebp]
	push	ecx
	mov	edx, DWORD PTR _start$[ebp]
	and	edx, 31					; 0000001fH
	movzx	eax, WORD PTR _lengths$[ebp+edx*2]
	push	eax
	mov	ecx, DWORD PTR _start$[ebp]
	and	ecx, 31					; 0000001fH
	movzx	edx, WORD PTR _offsets$[ebp+ecx*2]
	add	edx, DWORD PTR _s$[ebp]
	push	edx
	mov	eax, DWORD PTR _names$[ebp]
	push	eax
	call	?compareName@icu_56@@YACPAUUCharNames@1@PBEGW4UCharNameChoice@@PBD@Z ; icu_56::compareName
	add	esp, 20					; 00000014H
	movsx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@enumGroupN
; Line 626
	mov	eax, DWORD PTR _context$[ebp]
	mov	ecx, DWORD PTR _start$[ebp]
	mov	DWORD PTR [eax+4], ecx
; Line 627
	xor	al, al
	jmp	SHORT $LN11@enumGroupN
$LN1@enumGroupN:
; Line 629
	mov	eax, DWORD PTR _start$[ebp]
	add	eax, 1
	mov	DWORD PTR _start$[ebp], eax
; Line 630
	jmp	SHORT $LN3@enumGroupN
$LN4@enumGroupN:
; Line 632
	mov	al, 1
$LN11@enumGroupN:
; Line 633
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN17@enumGroupN
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 592				; 00000250H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN17@enumGroupN:
	DD	3
	DD	$LN16@enumGroupN
$LN16@enumGroupN:
	DD	-76					; ffffffb4H
	DD	68					; 00000044H
	DD	$LN13@enumGroupN
	DD	-152					; ffffff68H
	DD	68					; 00000044H
	DD	$LN14@enumGroupN
	DD	-372					; fffffe8cH
	DD	200					; 000000c8H
	DD	$LN15@enumGroupN
$LN15@enumGroupN:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
$LN14@enumGroupN:
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	115					; 00000073H
	DB	0
$LN13@enumGroupN:
	DB	111					; 0000006fH
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	115					; 00000073H
	DB	0
?enumGroupNames@icu_56@@YACPAUUCharNames@1@PBGHHP6ACPAXHW4UCharNameChoice@@PBDH@Z23@Z ENDP ; icu_56::enumGroupNames
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?compareName@icu_56@@YACPAUUCharNames@1@PBEGW4UCharNameChoice@@PBD@Z
_TEXT	SEGMENT
tv174 = -292						; size = 4
tv168 = -292						; size = 4
tv154 = -292						; size = 4
tv131 = -292						; size = 4
tv82 = -292						; size = 4
tv75 = -292						; size = 4
_tokenString$44319 = -92				; size = 4
_fieldIndex$44286 = -80					; size = 4
_origOtherName$ = -68					; size = 4
_c$ = -53						; size = 1
_tokenStrings$ = -44					; size = 4
_tokenCount$ = -32					; size = 2
_token$ = -20						; size = 2
_tokens$ = -8						; size = 4
_names$ = 8						; size = 4
_name$ = 12						; size = 4
_nameLength$ = 16					; size = 2
_nameChoice$ = 20					; size = 4
_otherName$ = 24					; size = 4
?compareName@icu_56@@YACPAUUCharNames@1@PBEGW4UCharNameChoice@@PBD@Z PROC ; icu_56::compareName, COMDAT
; Line 331
	push	ebp
	mov	ebp, esp
	sub	esp, 292				; 00000124H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-292]
	mov	ecx, 73					; 00000049H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 332
	mov	eax, DWORD PTR _names$[ebp]
	add	eax, 16					; 00000010H
	mov	DWORD PTR _tokens$[ebp], eax
; Line 333
	mov	eax, DWORD PTR _tokens$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR _tokenCount$[ebp], cx
	mov	edx, DWORD PTR _tokens$[ebp]
	add	edx, 2
	mov	DWORD PTR _tokens$[ebp], edx
; Line 334
	mov	eax, DWORD PTR _names$[ebp]
	mov	ecx, DWORD PTR _names$[ebp]
	add	ecx, DWORD PTR [eax]
	mov	DWORD PTR _tokenStrings$[ebp], ecx
; Line 336
	mov	eax, DWORD PTR _otherName$[ebp]
	mov	DWORD PTR _origOtherName$[ebp], eax
; Line 338
	cmp	DWORD PTR _nameChoice$[ebp], 0
	je	$LN19@compareNam
	cmp	DWORD PTR _nameChoice$[ebp], 2
	je	$LN19@compareNam
; Line 343
	movzx	eax, WORD PTR _tokenCount$[ebp]
	cmp	eax, 59					; 0000003bH
	jle	SHORT $LN27@compareNam
	mov	eax, DWORD PTR _tokens$[ebp]
	movzx	ecx, WORD PTR [eax+118]
	cmp	ecx, 65535				; 0000ffffH
	jne	$LN28@compareNam
$LN27@compareNam:
; Line 344
	cmp	DWORD PTR _nameChoice$[ebp], 4
	jne	SHORT $LN32@compareNam
	mov	DWORD PTR tv75[ebp], 2
	jmp	SHORT $LN33@compareNam
$LN32@compareNam:
	mov	eax, DWORD PTR _nameChoice$[ebp]
	mov	DWORD PTR tv75[ebp], eax
$LN33@compareNam:
	mov	ecx, DWORD PTR tv75[ebp]
	mov	DWORD PTR _fieldIndex$44286[ebp], ecx
$LN23@compareNam:
; Line 346
	movzx	eax, WORD PTR _nameLength$[ebp]
	test	eax, eax
	jle	SHORT $LN25@compareNam
; Line 347
	mov	ax, WORD PTR _nameLength$[ebp]
	sub	ax, 1
	mov	WORD PTR _nameLength$[ebp], ax
; Line 348
	mov	eax, DWORD PTR _name$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _name$[ebp]
	add	edx, 1
	mov	DWORD PTR _name$[ebp], edx
	cmp	ecx, 59					; 0000003bH
	jne	SHORT $LN34@compareNam
	mov	DWORD PTR tv82[ebp], 1
	jmp	SHORT $LN35@compareNam
$LN34@compareNam:
	mov	DWORD PTR tv82[ebp], 0
$LN35@compareNam:
	cmp	DWORD PTR tv82[ebp], 0
	je	SHORT $LN21@compareNam
; Line 349
	jmp	SHORT $LN25@compareNam
$LN21@compareNam:
; Line 351
	jmp	SHORT $LN23@compareNam
$LN25@compareNam:
; Line 352
	mov	eax, DWORD PTR _fieldIndex$44286[ebp]
	sub	eax, 1
	mov	DWORD PTR _fieldIndex$44286[ebp], eax
	cmp	DWORD PTR _fieldIndex$44286[ebp], 0
	jg	SHORT $LN23@compareNam
; Line 353
	jmp	SHORT $LN19@compareNam
$LN28@compareNam:
; Line 359
	xor	eax, eax
	mov	WORD PTR _nameLength$[ebp], ax
$LN19@compareNam:
; Line 364
	movzx	eax, WORD PTR _nameLength$[ebp]
	test	eax, eax
	jle	$LN18@compareNam
; Line 365
	mov	ax, WORD PTR _nameLength$[ebp]
	sub	ax, 1
	mov	WORD PTR _nameLength$[ebp], ax
; Line 366
	mov	eax, DWORD PTR _name$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _c$[ebp], cl
	mov	edx, DWORD PTR _name$[ebp]
	add	edx, 1
	mov	DWORD PTR _name$[ebp], edx
; Line 368
	movzx	eax, BYTE PTR _c$[ebp]
	movzx	ecx, WORD PTR _tokenCount$[ebp]
	cmp	eax, ecx
	jl	SHORT $LN17@compareNam
; Line 369
	movzx	eax, BYTE PTR _c$[ebp]
	cmp	eax, 59					; 0000003bH
	je	SHORT $LN16@compareNam
; Line 371
	mov	eax, DWORD PTR _otherName$[ebp]
	movsx	ecx, BYTE PTR [eax]
	movsx	edx, BYTE PTR _c$[ebp]
	mov	eax, DWORD PTR _otherName$[ebp]
	add	eax, 1
	mov	DWORD PTR _otherName$[ebp], eax
	cmp	edx, ecx
	je	SHORT $LN36@compareNam
	mov	DWORD PTR tv131[ebp], 1
	jmp	SHORT $LN37@compareNam
$LN36@compareNam:
	mov	DWORD PTR tv131[ebp], 0
$LN37@compareNam:
	cmp	DWORD PTR tv131[ebp], 0
	je	SHORT $LN15@compareNam
; Line 372
	xor	al, al
	jmp	$LN30@compareNam
$LN15@compareNam:
; Line 374
	jmp	SHORT $LN14@compareNam
$LN16@compareNam:
; Line 376
	jmp	$LN18@compareNam
$LN14@compareNam:
; Line 378
	jmp	$LN13@compareNam
$LN17@compareNam:
; Line 379
	movzx	eax, BYTE PTR _c$[ebp]
	mov	ecx, DWORD PTR _tokens$[ebp]
	mov	dx, WORD PTR [ecx+eax*2]
	mov	WORD PTR _token$[ebp], dx
; Line 380
	movzx	eax, WORD PTR _token$[ebp]
	cmp	eax, 65534				; 0000fffeH
	jne	SHORT $LN12@compareNam
; Line 382
	movzx	eax, BYTE PTR _c$[ebp]
	shl	eax, 8
	mov	ecx, DWORD PTR _name$[ebp]
	movzx	edx, BYTE PTR [ecx]
	or	eax, edx
	mov	ecx, DWORD PTR _tokens$[ebp]
	mov	dx, WORD PTR [ecx+eax*2]
	mov	WORD PTR _token$[ebp], dx
	mov	eax, DWORD PTR _name$[ebp]
	add	eax, 1
	mov	DWORD PTR _name$[ebp], eax
; Line 383
	mov	ax, WORD PTR _nameLength$[ebp]
	sub	ax, 1
	mov	WORD PTR _nameLength$[ebp], ax
$LN12@compareNam:
; Line 385
	movzx	eax, WORD PTR _token$[ebp]
	cmp	eax, 65535				; 0000ffffH
	jne	SHORT $LN11@compareNam
; Line 386
	movzx	eax, BYTE PTR _c$[ebp]
	cmp	eax, 59					; 0000003bH
	je	SHORT $LN10@compareNam
; Line 388
	mov	eax, DWORD PTR _otherName$[ebp]
	movsx	ecx, BYTE PTR [eax]
	movsx	edx, BYTE PTR _c$[ebp]
	mov	eax, DWORD PTR _otherName$[ebp]
	add	eax, 1
	mov	DWORD PTR _otherName$[ebp], eax
	cmp	edx, ecx
	je	SHORT $LN38@compareNam
	mov	DWORD PTR tv154[ebp], 1
	jmp	SHORT $LN39@compareNam
$LN38@compareNam:
	mov	DWORD PTR tv154[ebp], 0
$LN39@compareNam:
	cmp	DWORD PTR tv154[ebp], 0
	je	SHORT $LN9@compareNam
; Line 389
	xor	al, al
	jmp	$LN30@compareNam
$LN9@compareNam:
; Line 391
	jmp	SHORT $LN8@compareNam
$LN10@compareNam:
; Line 395
	mov	eax, DWORD PTR _otherName$[ebp]
	cmp	eax, DWORD PTR _origOtherName$[ebp]
	jne	SHORT $LN7@compareNam
	cmp	DWORD PTR _nameChoice$[ebp], 2
	jne	SHORT $LN7@compareNam
; Line 396
	movzx	eax, WORD PTR _tokenCount$[ebp]
	cmp	eax, 59					; 0000003bH
	jle	SHORT $LN5@compareNam
	mov	eax, DWORD PTR _tokens$[ebp]
	movzx	ecx, WORD PTR [eax+118]
	cmp	ecx, 65535				; 0000ffffH
	jne	SHORT $LN7@compareNam
$LN5@compareNam:
; Line 397
	jmp	$LN19@compareNam
$LN7@compareNam:
; Line 401
	jmp	$LN18@compareNam
$LN8@compareNam:
; Line 403
	jmp	SHORT $LN13@compareNam
$LN11@compareNam:
; Line 405
	movzx	eax, WORD PTR _token$[ebp]
	add	eax, DWORD PTR _tokenStrings$[ebp]
	mov	DWORD PTR _tokenString$44319[ebp], eax
$LN3@compareNam:
; Line 406
	mov	eax, DWORD PTR _tokenString$44319[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _c$[ebp], cl
	movzx	edx, BYTE PTR _c$[ebp]
	mov	eax, DWORD PTR _tokenString$44319[ebp]
	add	eax, 1
	mov	DWORD PTR _tokenString$44319[ebp], eax
	test	edx, edx
	je	SHORT $LN40@compareNam
	mov	DWORD PTR tv168[ebp], 1
	jmp	SHORT $LN41@compareNam
$LN40@compareNam:
	mov	DWORD PTR tv168[ebp], 0
$LN41@compareNam:
	cmp	DWORD PTR tv168[ebp], 0
	je	SHORT $LN13@compareNam
; Line 407
	mov	eax, DWORD PTR _otherName$[ebp]
	movsx	ecx, BYTE PTR [eax]
	movsx	edx, BYTE PTR _c$[ebp]
	mov	eax, DWORD PTR _otherName$[ebp]
	add	eax, 1
	mov	DWORD PTR _otherName$[ebp], eax
	cmp	edx, ecx
	je	SHORT $LN42@compareNam
	mov	DWORD PTR tv174[ebp], 1
	jmp	SHORT $LN43@compareNam
$LN42@compareNam:
	mov	DWORD PTR tv174[ebp], 0
$LN43@compareNam:
	cmp	DWORD PTR tv174[ebp], 0
	je	SHORT $LN1@compareNam
; Line 408
	xor	al, al
	jmp	SHORT $LN30@compareNam
$LN1@compareNam:
; Line 410
	jmp	SHORT $LN3@compareNam
$LN13@compareNam:
; Line 413
	jmp	$LN19@compareNam
$LN18@compareNam:
; Line 416
	mov	eax, DWORD PTR _otherName$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	sete	al
$LN30@compareNam:
; Line 417
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?compareName@icu_56@@YACPAUUCharNames@1@PBEGW4UCharNameChoice@@PBD@Z ENDP ; icu_56::compareName
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?enumExtNames@icu_56@@YACHHP6ACPAXHW4UCharNameChoice@@PBDH@Z0@Z
_TEXT	SEGMENT
_length$44475 = -220					; size = 2
_buffer$44474 = -208					; size = 200
__$ArrayPad$ = -4					; size = 4
_start$ = 8						; size = 4
_end$ = 12						; size = 4
_fn$ = 16						; size = 4
_context$ = 20						; size = 4
?enumExtNames@icu_56@@YACHHP6ACPAXHW4UCharNameChoice@@PBDH@Z0@Z PROC ; icu_56::enumExtNames, COMDAT
; Line 644
	push	ebp
	mov	ebp, esp
	sub	esp, 416				; 000001a0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-416]
	mov	ecx, 104				; 00000068H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 645
	cmp	DWORD PTR _fn$[ebp], 0
	je	SHORT $LN5@enumExtNam
$LN4@enumExtNam:
; Line 649
	mov	eax, DWORD PTR _start$[ebp]
	cmp	eax, DWORD PTR _end$[ebp]
	jg	SHORT $LN5@enumExtNam
; Line 650
	push	200					; 000000c8H
	lea	eax, DWORD PTR _buffer$44474[ebp]
	push	eax
	mov	ecx, DWORD PTR _start$[ebp]
	push	ecx
	call	?getExtName@icu_56@@YAGIPADG@Z		; icu_56::getExtName
	add	esp, 12					; 0000000cH
	mov	WORD PTR _length$44475[ebp], ax
	movzx	edx, WORD PTR _length$44475[ebp]
	mov	BYTE PTR _buffer$44474[ebp+edx], 0
; Line 652
	movzx	eax, WORD PTR _length$44475[ebp]
	test	eax, eax
	jle	SHORT $LN2@enumExtNam
; Line 653
	movzx	eax, WORD PTR _length$44475[ebp]
	mov	esi, esp
	push	eax
	lea	ecx, DWORD PTR _buffer$44474[ebp]
	push	ecx
	push	2
	mov	edx, DWORD PTR _start$[ebp]
	push	edx
	mov	eax, DWORD PTR _context$[ebp]
	push	eax
	call	DWORD PTR _fn$[ebp]
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
	movsx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN2@enumExtNam
; Line 654
	xor	al, al
	jmp	SHORT $LN6@enumExtNam
$LN2@enumExtNam:
; Line 657
	mov	eax, DWORD PTR _start$[ebp]
	add	eax, 1
	mov	DWORD PTR _start$[ebp], eax
; Line 658
	jmp	SHORT $LN4@enumExtNam
$LN5@enumExtNam:
; Line 661
	mov	al, 1
$LN6@enumExtNam:
; Line 662
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@enumExtNam
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 416				; 000001a0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN10@enumExtNam:
	DD	1
	DD	$LN9@enumExtNam
$LN9@enumExtNam:
	DD	-208					; ffffff30H
	DD	200					; 000000c8H
	DD	$LN8@enumExtNam
$LN8@enumExtNam:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
?enumExtNames@icu_56@@YACHHP6ACPAXHW4UCharNameChoice@@PBDH@Z0@Z ENDP ; icu_56::enumExtNames
_TEXT	ENDS
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	__$ArrayPad$
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?findAlgName@icu_56@@YAHPAUAlgorithmicRange@1@W4UCharNameChoice@@PBD@Z
_TEXT	SEGMENT
tv228 = -544						; size = 4
tv222 = -544						; size = 4
tv198 = -544						; size = 4
tv157 = -544						; size = 4
tv151 = -544						; size = 4
tv79 = -544						; size = 4
tv73 = -544						; size = 4
tv68 = -544						; size = 4
_c$44755 = -341						; size = 1
_idx$44754 = -332					; size = 2
_i$44753 = -320						; size = 2
_limit$44752 = -308					; size = 4
_start$44751 = -296					; size = 4
_t$44750 = -284						; size = 4
_s$44748 = -272						; size = 4
_count$44747 = -260					; size = 2
_factors$44745 = -248					; size = 4
_elements$44744 = -236					; size = 32
_elementBases$44743 = -196				; size = 32
_indexes$44742 = -156					; size = 16
_buffer$44741 = -132					; size = 64
_count$44724 = -60					; size = 2
_i$44723 = -48						; size = 2
_c$44722 = -33						; size = 1
_s$44720 = -24						; size = 4
_code$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_range$ = 8						; size = 4
_nameChoice$ = 12					; size = 4
_otherName$ = 16					; size = 4
?findAlgName@icu_56@@YAHPAUAlgorithmicRange@1@W4UCharNameChoice@@PBD@Z PROC ; icu_56::findAlgName, COMDAT
; Line 1076
	push	ebp
	mov	ebp, esp
	sub	esp, 544				; 00000220H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-544]
	mov	ecx, 136				; 00000088H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 1079
	cmp	DWORD PTR _nameChoice$[ebp], 0
	je	SHORT $LN36@findAlgNam
	cmp	DWORD PTR _nameChoice$[ebp], 2
	je	SHORT $LN36@findAlgNam
; Line 1080
	mov	eax, 65535				; 0000ffffH
	jmp	$LN37@findAlgNam
$LN36@findAlgNam:
; Line 1083
	mov	eax, DWORD PTR _range$[ebp]
	mov	cl, BYTE PTR [eax+8]
	mov	BYTE PTR tv68[ebp], cl
	cmp	BYTE PTR tv68[ebp], 0
	je	SHORT $LN33@findAlgNam
	cmp	BYTE PTR tv68[ebp], 1
	je	$LN21@findAlgNam
	jmp	$LN34@findAlgNam
$LN33@findAlgNam:
; Line 1086
	mov	eax, DWORD PTR _range$[ebp]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR _s$44720[ebp], eax
$LN32@findAlgNam:
; Line 1092
	mov	eax, DWORD PTR _s$44720[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _c$44722[ebp], cl
	movsx	edx, BYTE PTR _c$44722[ebp]
	mov	eax, DWORD PTR _s$44720[ebp]
	add	eax, 1
	mov	DWORD PTR _s$44720[ebp], eax
	test	edx, edx
	je	SHORT $LN39@findAlgNam
	mov	DWORD PTR tv73[ebp], 1
	jmp	SHORT $LN40@findAlgNam
$LN39@findAlgNam:
	mov	DWORD PTR tv73[ebp], 0
$LN40@findAlgNam:
	cmp	DWORD PTR tv73[ebp], 0
	je	SHORT $LN31@findAlgNam
; Line 1093
	mov	eax, DWORD PTR _otherName$[ebp]
	movsx	ecx, BYTE PTR [eax]
	movsx	edx, BYTE PTR _c$44722[ebp]
	mov	eax, DWORD PTR _otherName$[ebp]
	add	eax, 1
	mov	DWORD PTR _otherName$[ebp], eax
	cmp	edx, ecx
	je	SHORT $LN41@findAlgNam
	mov	DWORD PTR tv79[ebp], 1
	jmp	SHORT $LN42@findAlgNam
$LN41@findAlgNam:
	mov	DWORD PTR tv79[ebp], 0
$LN42@findAlgNam:
	cmp	DWORD PTR tv79[ebp], 0
	je	SHORT $LN30@findAlgNam
; Line 1094
	mov	eax, 65535				; 0000ffffH
	jmp	$LN37@findAlgNam
$LN30@findAlgNam:
; Line 1096
	jmp	SHORT $LN32@findAlgNam
$LN31@findAlgNam:
; Line 1099
	mov	eax, DWORD PTR _range$[ebp]
	movzx	cx, BYTE PTR [eax+9]
	mov	WORD PTR _count$44724[ebp], cx
; Line 1100
	mov	DWORD PTR _code$[ebp], 0
; Line 1101
	xor	eax, eax
	mov	WORD PTR _i$44723[ebp], ax
	jmp	SHORT $LN29@findAlgNam
$LN28@findAlgNam:
	mov	ax, WORD PTR _i$44723[ebp]
	add	ax, 1
	mov	WORD PTR _i$44723[ebp], ax
$LN29@findAlgNam:
	movzx	eax, WORD PTR _i$44723[ebp]
	movzx	ecx, WORD PTR _count$44724[ebp]
	cmp	eax, ecx
	jge	SHORT $LN27@findAlgNam
; Line 1102
	mov	eax, DWORD PTR _otherName$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _c$44722[ebp], cl
	mov	edx, DWORD PTR _otherName$[ebp]
	add	edx, 1
	mov	DWORD PTR _otherName$[ebp], edx
; Line 1103
	movsx	eax, BYTE PTR _c$44722[ebp]
	cmp	eax, 48					; 00000030H
	jl	SHORT $LN26@findAlgNam
	movsx	eax, BYTE PTR _c$44722[ebp]
	cmp	eax, 57					; 00000039H
	jg	SHORT $LN26@findAlgNam
; Line 1104
	mov	eax, DWORD PTR _code$[ebp]
	shl	eax, 4
	movsx	ecx, BYTE PTR _c$44722[ebp]
	sub	ecx, 48					; 00000030H
	or	eax, ecx
	mov	DWORD PTR _code$[ebp], eax
	jmp	SHORT $LN25@findAlgNam
$LN26@findAlgNam:
; Line 1105
	movsx	eax, BYTE PTR _c$44722[ebp]
	cmp	eax, 65					; 00000041H
	jl	SHORT $LN24@findAlgNam
	movsx	eax, BYTE PTR _c$44722[ebp]
	cmp	eax, 70					; 00000046H
	jg	SHORT $LN24@findAlgNam
; Line 1106
	mov	eax, DWORD PTR _code$[ebp]
	shl	eax, 4
	movsx	ecx, BYTE PTR _c$44722[ebp]
	sub	ecx, 55					; 00000037H
	or	eax, ecx
	mov	DWORD PTR _code$[ebp], eax
; Line 1107
	jmp	SHORT $LN25@findAlgNam
$LN24@findAlgNam:
; Line 1108
	mov	eax, 65535				; 0000ffffH
	jmp	$LN37@findAlgNam
$LN25@findAlgNam:
; Line 1110
	jmp	$LN28@findAlgNam
$LN27@findAlgNam:
; Line 1113
	mov	eax, DWORD PTR _otherName$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN22@findAlgNam
	mov	eax, DWORD PTR _range$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR _code$[ebp]
	ja	SHORT $LN22@findAlgNam
	mov	eax, DWORD PTR _range$[ebp]
	mov	ecx, DWORD PTR _code$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	ja	SHORT $LN22@findAlgNam
; Line 1114
	mov	eax, DWORD PTR _code$[ebp]
	jmp	$LN37@findAlgNam
$LN22@findAlgNam:
; Line 1116
	jmp	$LN34@findAlgNam
$LN21@findAlgNam:
; Line 1122
	mov	eax, DWORD PTR _range$[ebp]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR _factors$44745[ebp], eax
; Line 1123
	mov	eax, DWORD PTR _range$[ebp]
	movzx	cx, BYTE PTR [eax+9]
	mov	WORD PTR _count$44747[ebp], cx
; Line 1124
	movzx	eax, WORD PTR _count$44747[ebp]
	mov	ecx, DWORD PTR _factors$44745[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR _s$44748[ebp], edx
$LN20@findAlgNam:
; Line 1133
	mov	eax, DWORD PTR _s$44748[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _c$44755[ebp], cl
	movsx	edx, BYTE PTR _c$44755[ebp]
	mov	eax, DWORD PTR _s$44748[ebp]
	add	eax, 1
	mov	DWORD PTR _s$44748[ebp], eax
	test	edx, edx
	je	SHORT $LN43@findAlgNam
	mov	DWORD PTR tv151[ebp], 1
	jmp	SHORT $LN44@findAlgNam
$LN43@findAlgNam:
	mov	DWORD PTR tv151[ebp], 0
$LN44@findAlgNam:
	cmp	DWORD PTR tv151[ebp], 0
	je	SHORT $LN19@findAlgNam
; Line 1134
	mov	eax, DWORD PTR _otherName$[ebp]
	movsx	ecx, BYTE PTR [eax]
	movsx	edx, BYTE PTR _c$44755[ebp]
	mov	eax, DWORD PTR _otherName$[ebp]
	add	eax, 1
	mov	DWORD PTR _otherName$[ebp], eax
	cmp	edx, ecx
	je	SHORT $LN45@findAlgNam
	mov	DWORD PTR tv157[ebp], 1
	jmp	SHORT $LN46@findAlgNam
$LN45@findAlgNam:
	mov	DWORD PTR tv157[ebp], 0
$LN46@findAlgNam:
	cmp	DWORD PTR tv157[ebp], 0
	je	SHORT $LN18@findAlgNam
; Line 1135
	mov	eax, 65535				; 0000ffffH
	jmp	$LN37@findAlgNam
$LN18@findAlgNam:
; Line 1137
	jmp	$LN20@findAlgNam
$LN19@findAlgNam:
; Line 1139
	mov	eax, DWORD PTR _range$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _start$44751[ebp], ecx
; Line 1140
	mov	eax, DWORD PTR _range$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	DWORD PTR _limit$44752[ebp], ecx
; Line 1144
	push	64					; 00000040H
	lea	eax, DWORD PTR _buffer$44741[ebp]
	push	eax
	lea	ecx, DWORD PTR _elements$44744[ebp]
	push	ecx
	lea	edx, DWORD PTR _elementBases$44743[ebp]
	push	edx
	lea	eax, DWORD PTR _indexes$44742[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _s$44748[ebp]
	push	ecx
	movzx	edx, WORD PTR _count$44747[ebp]
	push	edx
	mov	eax, DWORD PTR _factors$44745[ebp]
	push	eax
	call	?writeFactorSuffix@icu_56@@YAGPBGGPBDIQAGQAPBD3PADG@Z ; icu_56::writeFactorSuffix
	add	esp, 36					; 00000024H
; Line 1147
	lea	eax, DWORD PTR _buffer$44741[ebp]
	push	eax
	mov	ecx, DWORD PTR _otherName$[ebp]
	push	ecx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN16@findAlgNam
; Line 1148
	mov	eax, DWORD PTR _start$44751[ebp]
	jmp	$LN37@findAlgNam
$LN16@findAlgNam:
; Line 1152
	mov	eax, DWORD PTR _start$44751[ebp]
	add	eax, 1
	mov	DWORD PTR _start$44751[ebp], eax
	mov	ecx, DWORD PTR _start$44751[ebp]
	cmp	ecx, DWORD PTR _limit$44752[ebp]
	jge	$LN34@findAlgNam
; Line 1154
	mov	ax, WORD PTR _count$44747[ebp]
	mov	WORD PTR _i$44753[ebp], ax
$LN14@findAlgNam:
; Line 1156
	mov	ax, WORD PTR _i$44753[ebp]
	sub	ax, 1
	mov	WORD PTR _i$44753[ebp], ax
	movzx	ecx, WORD PTR _i$44753[ebp]
	movzx	edx, WORD PTR _indexes$44742[ebp+ecx*2]
	add	edx, 1
	mov	WORD PTR _idx$44754[ebp], dx
; Line 1157
	movzx	eax, WORD PTR _idx$44754[ebp]
	movzx	ecx, WORD PTR _i$44753[ebp]
	mov	edx, DWORD PTR _factors$44745[ebp]
	movzx	ecx, WORD PTR [edx+ecx*2]
	cmp	eax, ecx
	jge	SHORT $LN12@findAlgNam
; Line 1159
	movzx	eax, WORD PTR _i$44753[ebp]
	mov	cx, WORD PTR _idx$44754[ebp]
	mov	WORD PTR _indexes$44742[ebp+eax*2], cx
; Line 1160
	movzx	eax, WORD PTR _i$44753[ebp]
	mov	ecx, DWORD PTR _elements$44744[ebp+eax*4]
	mov	DWORD PTR _s$44748[ebp], ecx
$LN11@findAlgNam:
; Line 1161
	mov	eax, DWORD PTR _s$44748[ebp]
	movsx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _s$44748[ebp]
	add	edx, 1
	mov	DWORD PTR _s$44748[ebp], edx
	test	ecx, ecx
	je	SHORT $LN47@findAlgNam
	mov	DWORD PTR tv198[ebp], 1
	jmp	SHORT $LN48@findAlgNam
$LN47@findAlgNam:
	mov	DWORD PTR tv198[ebp], 0
$LN48@findAlgNam:
	cmp	DWORD PTR tv198[ebp], 0
	je	SHORT $LN10@findAlgNam
	jmp	SHORT $LN11@findAlgNam
$LN10@findAlgNam:
; Line 1162
	movzx	eax, WORD PTR _i$44753[ebp]
	mov	ecx, DWORD PTR _s$44748[ebp]
	mov	DWORD PTR _elements$44744[ebp+eax*4], ecx
; Line 1163
	jmp	SHORT $LN13@findAlgNam
; Line 1164
	jmp	SHORT $LN9@findAlgNam
$LN12@findAlgNam:
; Line 1166
	movzx	eax, WORD PTR _i$44753[ebp]
	xor	ecx, ecx
	mov	WORD PTR _indexes$44742[ebp+eax*2], cx
; Line 1167
	movzx	eax, WORD PTR _i$44753[ebp]
	movzx	ecx, WORD PTR _i$44753[ebp]
	mov	edx, DWORD PTR _elementBases$44743[ebp+eax*4]
	mov	DWORD PTR _elements$44744[ebp+ecx*4], edx
$LN9@findAlgNam:
; Line 1169
	jmp	$LN14@findAlgNam
$LN13@findAlgNam:
; Line 1172
	mov	eax, DWORD PTR _otherName$[ebp]
	mov	DWORD PTR _t$44750[ebp], eax
; Line 1173
	xor	eax, eax
	mov	WORD PTR _i$44753[ebp], ax
	jmp	SHORT $LN8@findAlgNam
$LN7@findAlgNam:
	mov	ax, WORD PTR _i$44753[ebp]
	add	ax, 1
	mov	WORD PTR _i$44753[ebp], ax
$LN8@findAlgNam:
	movzx	eax, WORD PTR _i$44753[ebp]
	movzx	ecx, WORD PTR _count$44747[ebp]
	cmp	eax, ecx
	jge	$LN6@findAlgNam
; Line 1174
	movzx	eax, WORD PTR _i$44753[ebp]
	mov	ecx, DWORD PTR _elements$44744[ebp+eax*4]
	mov	DWORD PTR _s$44748[ebp], ecx
$LN5@findAlgNam:
; Line 1175
	mov	eax, DWORD PTR _s$44748[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _c$44755[ebp], cl
	movsx	edx, BYTE PTR _c$44755[ebp]
	mov	eax, DWORD PTR _s$44748[ebp]
	add	eax, 1
	mov	DWORD PTR _s$44748[ebp], eax
	test	edx, edx
	je	SHORT $LN49@findAlgNam
	mov	DWORD PTR tv222[ebp], 1
	jmp	SHORT $LN50@findAlgNam
$LN49@findAlgNam:
	mov	DWORD PTR tv222[ebp], 0
$LN50@findAlgNam:
	cmp	DWORD PTR tv222[ebp], 0
	je	SHORT $LN4@findAlgNam
; Line 1176
	mov	eax, DWORD PTR _t$44750[ebp]
	movsx	ecx, BYTE PTR [eax]
	movsx	edx, BYTE PTR _c$44755[ebp]
	mov	eax, DWORD PTR _t$44750[ebp]
	add	eax, 1
	mov	DWORD PTR _t$44750[ebp], eax
	cmp	edx, ecx
	je	SHORT $LN51@findAlgNam
	mov	DWORD PTR tv228[ebp], 1
	jmp	SHORT $LN52@findAlgNam
$LN51@findAlgNam:
	mov	DWORD PTR tv228[ebp], 0
$LN52@findAlgNam:
	cmp	DWORD PTR tv228[ebp], 0
	je	SHORT $LN3@findAlgNam
; Line 1177
	mov	DWORD PTR _s$44748[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
; Line 1178
	mov	eax, 99					; 00000063H
	mov	WORD PTR _i$44753[ebp], ax
$LN3@findAlgNam:
; Line 1180
	jmp	$LN5@findAlgNam
$LN4@findAlgNam:
; Line 1181
	jmp	$LN7@findAlgNam
$LN6@findAlgNam:
; Line 1182
	movzx	eax, WORD PTR _i$44753[ebp]
	cmp	eax, 99					; 00000063H
	jge	SHORT $LN2@findAlgNam
	mov	eax, DWORD PTR _t$44750[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN2@findAlgNam
; Line 1183
	mov	eax, DWORD PTR _start$44751[ebp]
	jmp	SHORT $LN37@findAlgNam
$LN2@findAlgNam:
; Line 1185
	jmp	$LN16@findAlgNam
$LN34@findAlgNam:
; Line 1193
	mov	eax, 65535				; 0000ffffH
$LN37@findAlgNam:
; Line 1194
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN58@findAlgNam
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 544				; 00000220H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN58@findAlgNam:
	DD	4
	DD	$LN57@findAlgNam
$LN57@findAlgNam:
	DD	-132					; ffffff7cH
	DD	64					; 00000040H
	DD	$LN53@findAlgNam
	DD	-156					; ffffff64H
	DD	16					; 00000010H
	DD	$LN54@findAlgNam
	DD	-196					; ffffff3cH
	DD	32					; 00000020H
	DD	$LN55@findAlgNam
	DD	-236					; ffffff14H
	DD	32					; 00000020H
	DD	$LN56@findAlgNam
$LN56@findAlgNam:
	DB	101					; 00000065H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	115					; 00000073H
	DB	0
$LN55@findAlgNam:
	DB	101					; 00000065H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	66					; 00000042H
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
$LN54@findAlgNam:
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
$LN53@findAlgNam:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
?findAlgName@icu_56@@YAHPAUAlgorithmicRange@1@W4UCharNameChoice@@PBD@Z ENDP ; icu_56::findAlgName
_TEXT	ENDS
PUBLIC	_u_enumCharNames_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _u_enumCharNames_56
_TEXT	SEGMENT
_i$ = -32						; size = 4
_p$ = -20						; size = 4
_algRange$ = -8						; size = 4
_start$ = 8						; size = 4
_limit$ = 12						; size = 4
_fn$ = 16						; size = 4
_context$ = 20						; size = 4
_nameChoice$ = 24					; size = 4
_pErrorCode$ = 28					; size = 4
_u_enumCharNames_56 PROC				; COMDAT
; Line 1630
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1635
	cmp	DWORD PTR _pErrorCode$[ebp], 0
	je	SHORT $LN14@u_enumChar
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN15@u_enumChar
$LN14@u_enumChar:
; Line 1636
	jmp	$LN16@u_enumChar
$LN15@u_enumChar:
; Line 1639
	cmp	DWORD PTR _nameChoice$[ebp], 4
	jge	SHORT $LN12@u_enumChar
	cmp	DWORD PTR _fn$[ebp], 0
	jne	SHORT $LN13@u_enumChar
$LN12@u_enumChar:
; Line 1640
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 1
; Line 1641
	jmp	$LN16@u_enumChar
$LN13@u_enumChar:
; Line 1644
	cmp	DWORD PTR _limit$[ebp], 1114112		; 00110000H
	jbe	SHORT $LN11@u_enumChar
; Line 1645
	mov	DWORD PTR _limit$[ebp], 1114112		; 00110000H
$LN11@u_enumChar:
; Line 1647
	mov	eax, DWORD PTR _start$[ebp]
	cmp	eax, DWORD PTR _limit$[ebp]
	jb	SHORT $LN10@u_enumChar
; Line 1648
	jmp	$LN16@u_enumChar
$LN10@u_enumChar:
; Line 1651
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	call	?isDataLoaded@icu_56@@YACPAW4UErrorCode@@@Z ; icu_56::isDataLoaded
	add	esp, 4
	movsx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN9@u_enumChar
; Line 1652
	jmp	$LN16@u_enumChar
$LN9@u_enumChar:
; Line 1657
	mov	eax, DWORD PTR _uCharNames
	mov	ecx, DWORD PTR _uCharNames
	add	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _p$[ebp], ecx
; Line 1658
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _i$[ebp], ecx
; Line 1659
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 4
	mov	DWORD PTR _algRange$[ebp], eax
$LN8@u_enumChar:
; Line 1660
	cmp	DWORD PTR _i$[ebp], 0
	jbe	$LN7@u_enumChar
; Line 1663
	mov	eax, DWORD PTR _algRange$[ebp]
	mov	ecx, DWORD PTR _start$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jae	SHORT $LN6@u_enumChar
; Line 1664
	mov	eax, DWORD PTR _algRange$[ebp]
	mov	ecx, DWORD PTR _limit$[ebp]
	cmp	ecx, DWORD PTR [eax]
	ja	SHORT $LN5@u_enumChar
; Line 1665
	mov	eax, DWORD PTR _nameChoice$[ebp]
	push	eax
	mov	ecx, DWORD PTR _context$[ebp]
	push	ecx
	mov	edx, DWORD PTR _fn$[ebp]
	push	edx
	mov	eax, DWORD PTR _limit$[ebp]
	push	eax
	mov	ecx, DWORD PTR _start$[ebp]
	push	ecx
	mov	edx, DWORD PTR _uCharNames
	push	edx
	call	?enumNames@icu_56@@YACPAUUCharNames@1@HHP6ACPAXHW4UCharNameChoice@@PBDH@Z12@Z ; icu_56::enumNames
	add	esp, 24					; 00000018H
; Line 1666
	jmp	$LN16@u_enumChar
$LN5@u_enumChar:
; Line 1668
	mov	eax, DWORD PTR _nameChoice$[ebp]
	push	eax
	mov	ecx, DWORD PTR _context$[ebp]
	push	ecx
	mov	edx, DWORD PTR _fn$[ebp]
	push	edx
	mov	eax, DWORD PTR _algRange$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _start$[ebp]
	push	edx
	mov	eax, DWORD PTR _uCharNames
	push	eax
	call	?enumNames@icu_56@@YACPAUUCharNames@1@HHP6ACPAXHW4UCharNameChoice@@PBDH@Z12@Z ; icu_56::enumNames
	add	esp, 24					; 00000018H
	movsx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN4@u_enumChar
; Line 1669
	jmp	$LN16@u_enumChar
$LN4@u_enumChar:
; Line 1671
	mov	eax, DWORD PTR _algRange$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _start$[ebp], ecx
$LN6@u_enumChar:
; Line 1675
	mov	eax, DWORD PTR _algRange$[ebp]
	mov	ecx, DWORD PTR _start$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	ja	SHORT $LN3@u_enumChar
; Line 1676
	mov	eax, DWORD PTR _algRange$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	cmp	DWORD PTR _limit$[ebp], ecx
	ja	SHORT $LN2@u_enumChar
; Line 1677
	mov	eax, DWORD PTR _nameChoice$[ebp]
	push	eax
	mov	ecx, DWORD PTR _context$[ebp]
	push	ecx
	mov	edx, DWORD PTR _fn$[ebp]
	push	edx
	mov	eax, DWORD PTR _limit$[ebp]
	push	eax
	mov	ecx, DWORD PTR _start$[ebp]
	push	ecx
	mov	edx, DWORD PTR _algRange$[ebp]
	push	edx
	call	?enumAlgNames@icu_56@@YACPAUAlgorithmicRange@1@HHP6ACPAXHW4UCharNameChoice@@PBDH@Z12@Z ; icu_56::enumAlgNames
	add	esp, 24					; 00000018H
; Line 1678
	jmp	SHORT $LN16@u_enumChar
$LN2@u_enumChar:
; Line 1680
	mov	eax, DWORD PTR _nameChoice$[ebp]
	push	eax
	mov	ecx, DWORD PTR _context$[ebp]
	push	ecx
	mov	edx, DWORD PTR _fn$[ebp]
	push	edx
	mov	eax, DWORD PTR _algRange$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _start$[ebp]
	push	edx
	mov	eax, DWORD PTR _algRange$[ebp]
	push	eax
	call	?enumAlgNames@icu_56@@YACPAUAlgorithmicRange@1@HHP6ACPAXHW4UCharNameChoice@@PBDH@Z12@Z ; icu_56::enumAlgNames
	add	esp, 24					; 00000018H
	movsx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN1@u_enumChar
; Line 1681
	jmp	SHORT $LN16@u_enumChar
$LN1@u_enumChar:
; Line 1683
	mov	eax, DWORD PTR _algRange$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	DWORD PTR _start$[ebp], ecx
$LN3@u_enumChar:
; Line 1686
	mov	eax, DWORD PTR _algRange$[ebp]
	movzx	ecx, WORD PTR [eax+10]
	add	ecx, DWORD PTR _algRange$[ebp]
	mov	DWORD PTR _algRange$[ebp], ecx
; Line 1687
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
; Line 1688
	jmp	$LN8@u_enumChar
$LN7@u_enumChar:
; Line 1690
	mov	eax, DWORD PTR _nameChoice$[ebp]
	push	eax
	mov	ecx, DWORD PTR _context$[ebp]
	push	ecx
	mov	edx, DWORD PTR _fn$[ebp]
	push	edx
	mov	eax, DWORD PTR _limit$[ebp]
	push	eax
	mov	ecx, DWORD PTR _start$[ebp]
	push	ecx
	mov	edx, DWORD PTR _uCharNames
	push	edx
	call	?enumNames@icu_56@@YACPAUUCharNames@1@HHP6ACPAXHW4UCharNameChoice@@PBDH@Z12@Z ; icu_56::enumNames
	add	esp, 24					; 00000018H
$LN16@u_enumChar:
; Line 1691
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_u_enumCharNames_56 ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?enumAlgNames@icu_56@@YACPAUAlgorithmicRange@1@HHP6ACPAXHW4UCharNameChoice@@PBDH@Z12@Z
_TEXT	SEGMENT
tv236 = -668						; size = 4
tv212 = -668						; size = 4
tv157 = -668						; size = 4
tv68 = -668						; size = 4
_c$44680 = -465						; size = 1
_idx$44679 = -456					; size = 2
_i$44678 = -444						; size = 2
_prefixLength$44677 = -432				; size = 2
_t$44676 = -420						; size = 4
_suffix$44675 = -408					; size = 4
_s$44673 = -396						; size = 4
_count$44672 = -384					; size = 2
_factors$44670 = -372					; size = 4
_elements$44669 = -360					; size = 32
_elementBases$44668 = -320				; size = 32
_indexes$44667 = -280					; size = 16
_c$44644 = -253						; size = 1
_end$44643 = -244					; size = 4
_s$44642 = -232						; size = 4
_length$ = -220						; size = 2
_buffer$ = -208						; size = 200
__$ArrayPad$ = -4					; size = 4
_range$ = 8						; size = 4
_start$ = 12						; size = 4
_limit$ = 16						; size = 4
_fn$ = 20						; size = 4
_context$ = 24						; size = 4
_nameChoice$ = 28					; size = 4
?enumAlgNames@icu_56@@YACPAUAlgorithmicRange@1@HHP6ACPAXHW4UCharNameChoice@@PBDH@Z12@Z PROC ; icu_56::enumAlgNames, COMDAT
; Line 937
	push	ebp
	mov	ebp, esp
	sub	esp, 668				; 0000029cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-668]
	mov	ecx, 167				; 000000a7H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 941
	cmp	DWORD PTR _nameChoice$[ebp], 0
	je	SHORT $LN39@enumAlgNam
	cmp	DWORD PTR _nameChoice$[ebp], 2
	je	SHORT $LN39@enumAlgNam
; Line 942
	mov	al, 1
	jmp	$LN40@enumAlgNam
$LN39@enumAlgNam:
; Line 945
	mov	eax, DWORD PTR _range$[ebp]
	mov	cl, BYTE PTR [eax+8]
	mov	BYTE PTR tv68[ebp], cl
	cmp	BYTE PTR tv68[ebp], 0
	je	SHORT $LN36@enumAlgNam
	cmp	BYTE PTR tv68[ebp], 1
	je	$LN19@enumAlgNam
	jmp	$LN37@enumAlgNam
$LN36@enumAlgNam:
; Line 951
	push	200					; 000000c8H
	lea	eax, DWORD PTR _buffer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nameChoice$[ebp]
	push	ecx
	mov	edx, DWORD PTR _start$[ebp]
	push	edx
	mov	eax, DWORD PTR _range$[ebp]
	push	eax
	call	?getAlgName@icu_56@@YAGPAUAlgorithmicRange@1@IW4UCharNameChoice@@PADG@Z ; icu_56::getAlgName
	add	esp, 20					; 00000014H
	mov	WORD PTR _length$[ebp], ax
; Line 952
	movzx	eax, WORD PTR _length$[ebp]
	test	eax, eax
	jg	SHORT $LN35@enumAlgNam
; Line 953
	mov	al, 1
	jmp	$LN40@enumAlgNam
$LN35@enumAlgNam:
; Line 957
	movzx	eax, WORD PTR _length$[ebp]
	mov	esi, esp
	push	eax
	lea	ecx, DWORD PTR _buffer$[ebp]
	push	ecx
	mov	edx, DWORD PTR _nameChoice$[ebp]
	push	edx
	mov	eax, DWORD PTR _start$[ebp]
	push	eax
	mov	ecx, DWORD PTR _context$[ebp]
	push	ecx
	call	DWORD PTR _fn$[ebp]
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
	movsx	edx, al
	test	edx, edx
	jne	SHORT $LN34@enumAlgNam
; Line 958
	xor	al, al
	jmp	$LN40@enumAlgNam
$LN34@enumAlgNam:
; Line 962
	lea	eax, DWORD PTR _buffer$[ebp]
	mov	DWORD PTR _end$44643[ebp], eax
$LN33@enumAlgNam:
; Line 963
	mov	eax, DWORD PTR _end$44643[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN31@enumAlgNam
; Line 964
	mov	eax, DWORD PTR _end$44643[ebp]
	add	eax, 1
	mov	DWORD PTR _end$44643[ebp], eax
; Line 965
	jmp	SHORT $LN33@enumAlgNam
$LN31@enumAlgNam:
; Line 968
	mov	eax, DWORD PTR _start$[ebp]
	add	eax, 1
	mov	DWORD PTR _start$[ebp], eax
	mov	ecx, DWORD PTR _start$[ebp]
	cmp	ecx, DWORD PTR _limit$[ebp]
	jge	$LN30@enumAlgNam
; Line 970
	mov	eax, DWORD PTR _end$44643[ebp]
	mov	DWORD PTR _s$44642[ebp], eax
$LN29@enumAlgNam:
; Line 972
	mov	eax, DWORD PTR _s$44642[ebp]
	sub	eax, 1
	mov	DWORD PTR _s$44642[ebp], eax
	mov	ecx, DWORD PTR _s$44642[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR _c$44644[ebp], dl
; Line 973
	movsx	eax, BYTE PTR _c$44644[ebp]
	cmp	eax, 48					; 00000030H
	jl	SHORT $LN25@enumAlgNam
	movsx	eax, BYTE PTR _c$44644[ebp]
	cmp	eax, 57					; 00000039H
	jl	SHORT $LN26@enumAlgNam
$LN25@enumAlgNam:
	movsx	eax, BYTE PTR _c$44644[ebp]
	cmp	eax, 65					; 00000041H
	jl	SHORT $LN27@enumAlgNam
	movsx	eax, BYTE PTR _c$44644[ebp]
	cmp	eax, 70					; 00000046H
	jge	SHORT $LN27@enumAlgNam
$LN26@enumAlgNam:
; Line 974
	movsx	eax, BYTE PTR _c$44644[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _s$44642[ebp]
	mov	BYTE PTR [ecx], al
; Line 975
	jmp	SHORT $LN28@enumAlgNam
	jmp	SHORT $LN24@enumAlgNam
$LN27@enumAlgNam:
; Line 976
	movsx	eax, BYTE PTR _c$44644[ebp]
	cmp	eax, 57					; 00000039H
	jne	SHORT $LN23@enumAlgNam
; Line 977
	mov	eax, DWORD PTR _s$44642[ebp]
	mov	BYTE PTR [eax], 65			; 00000041H
; Line 978
	jmp	SHORT $LN28@enumAlgNam
	jmp	SHORT $LN24@enumAlgNam
$LN23@enumAlgNam:
; Line 979
	movsx	eax, BYTE PTR _c$44644[ebp]
	cmp	eax, 70					; 00000046H
	jne	SHORT $LN24@enumAlgNam
; Line 980
	mov	eax, DWORD PTR _s$44642[ebp]
	mov	BYTE PTR [eax], 48			; 00000030H
$LN24@enumAlgNam:
; Line 982
	jmp	$LN29@enumAlgNam
$LN28@enumAlgNam:
; Line 984
	movzx	eax, WORD PTR _length$[ebp]
	mov	esi, esp
	push	eax
	lea	ecx, DWORD PTR _buffer$[ebp]
	push	ecx
	mov	edx, DWORD PTR _nameChoice$[ebp]
	push	edx
	mov	eax, DWORD PTR _start$[ebp]
	push	eax
	mov	ecx, DWORD PTR _context$[ebp]
	push	ecx
	call	DWORD PTR _fn$[ebp]
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
	movsx	edx, al
	test	edx, edx
	jne	SHORT $LN20@enumAlgNam
; Line 985
	xor	al, al
	jmp	$LN40@enumAlgNam
$LN20@enumAlgNam:
; Line 987
	jmp	$LN31@enumAlgNam
$LN30@enumAlgNam:
; Line 988
	jmp	$LN37@enumAlgNam
$LN19@enumAlgNam:
; Line 993
	mov	eax, DWORD PTR _range$[ebp]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR _factors$44670[ebp], eax
; Line 994
	mov	eax, DWORD PTR _range$[ebp]
	movzx	cx, BYTE PTR [eax+9]
	mov	WORD PTR _count$44672[ebp], cx
; Line 995
	movzx	eax, WORD PTR _count$44672[ebp]
	mov	ecx, DWORD PTR _factors$44670[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR _s$44673[ebp], edx
; Line 1004
	lea	eax, DWORD PTR _buffer$[ebp]
	mov	DWORD PTR _suffix$44675[ebp], eax
; Line 1005
	xor	eax, eax
	mov	WORD PTR _prefixLength$44677[ebp], ax
$LN18@enumAlgNam:
; Line 1006
	mov	eax, DWORD PTR _s$44673[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _c$44680[ebp], cl
	movsx	edx, BYTE PTR _c$44680[ebp]
	mov	eax, DWORD PTR _s$44673[ebp]
	add	eax, 1
	mov	DWORD PTR _s$44673[ebp], eax
	test	edx, edx
	je	SHORT $LN42@enumAlgNam
	mov	DWORD PTR tv157[ebp], 1
	jmp	SHORT $LN43@enumAlgNam
$LN42@enumAlgNam:
	mov	DWORD PTR tv157[ebp], 0
$LN43@enumAlgNam:
	cmp	DWORD PTR tv157[ebp], 0
	je	SHORT $LN17@enumAlgNam
; Line 1007
	mov	eax, DWORD PTR _suffix$44675[ebp]
	mov	cl, BYTE PTR _c$44680[ebp]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _suffix$44675[ebp]
	add	edx, 1
	mov	DWORD PTR _suffix$44675[ebp], edx
; Line 1008
	mov	ax, WORD PTR _prefixLength$44677[ebp]
	add	ax, 1
	mov	WORD PTR _prefixLength$44677[ebp], ax
; Line 1009
	jmp	SHORT $LN18@enumAlgNam
$LN17@enumAlgNam:
; Line 1015
	movzx	esi, WORD PTR _prefixLength$44677[ebp]
	movzx	eax, WORD PTR _prefixLength$44677[ebp]
	mov	ecx, 200				; 000000c8H
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR _suffix$44675[ebp]
	push	edx
	lea	eax, DWORD PTR _elements$44669[ebp]
	push	eax
	lea	ecx, DWORD PTR _elementBases$44668[ebp]
	push	ecx
	lea	edx, DWORD PTR _indexes$44667[ebp]
	push	edx
	mov	eax, DWORD PTR _range$[ebp]
	mov	ecx, DWORD PTR _start$[ebp]
	sub	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _s$44673[ebp]
	push	edx
	movzx	eax, WORD PTR _count$44672[ebp]
	push	eax
	mov	ecx, DWORD PTR _factors$44670[ebp]
	push	ecx
	call	?writeFactorSuffix@icu_56@@YAGPBGGPBDIQAGQAPBD3PADG@Z ; icu_56::writeFactorSuffix
	add	esp, 36					; 00000024H
	movzx	edx, ax
	add	esi, edx
	mov	WORD PTR _length$[ebp], si
; Line 1018
	movzx	eax, WORD PTR _length$[ebp]
	mov	esi, esp
	push	eax
	lea	ecx, DWORD PTR _buffer$[ebp]
	push	ecx
	mov	edx, DWORD PTR _nameChoice$[ebp]
	push	edx
	mov	eax, DWORD PTR _start$[ebp]
	push	eax
	mov	ecx, DWORD PTR _context$[ebp]
	push	ecx
	call	DWORD PTR _fn$[ebp]
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
	movsx	edx, al
	test	edx, edx
	jne	SHORT $LN15@enumAlgNam
; Line 1019
	xor	al, al
	jmp	$LN40@enumAlgNam
$LN15@enumAlgNam:
; Line 1023
	mov	eax, DWORD PTR _start$[ebp]
	add	eax, 1
	mov	DWORD PTR _start$[ebp], eax
	mov	ecx, DWORD PTR _start$[ebp]
	cmp	ecx, DWORD PTR _limit$[ebp]
	jge	$LN37@enumAlgNam
; Line 1025
	mov	ax, WORD PTR _count$44672[ebp]
	mov	WORD PTR _i$44678[ebp], ax
$LN13@enumAlgNam:
; Line 1027
	mov	ax, WORD PTR _i$44678[ebp]
	sub	ax, 1
	mov	WORD PTR _i$44678[ebp], ax
	movzx	ecx, WORD PTR _i$44678[ebp]
	movzx	edx, WORD PTR _indexes$44667[ebp+ecx*2]
	add	edx, 1
	mov	WORD PTR _idx$44679[ebp], dx
; Line 1028
	movzx	eax, WORD PTR _idx$44679[ebp]
	movzx	ecx, WORD PTR _i$44678[ebp]
	mov	edx, DWORD PTR _factors$44670[ebp]
	movzx	ecx, WORD PTR [edx+ecx*2]
	cmp	eax, ecx
	jge	SHORT $LN11@enumAlgNam
; Line 1030
	movzx	eax, WORD PTR _i$44678[ebp]
	mov	cx, WORD PTR _idx$44679[ebp]
	mov	WORD PTR _indexes$44667[ebp+eax*2], cx
; Line 1031
	movzx	eax, WORD PTR _i$44678[ebp]
	mov	ecx, DWORD PTR _elements$44669[ebp+eax*4]
	mov	DWORD PTR _s$44673[ebp], ecx
$LN10@enumAlgNam:
; Line 1032
	mov	eax, DWORD PTR _s$44673[ebp]
	movsx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _s$44673[ebp]
	add	edx, 1
	mov	DWORD PTR _s$44673[ebp], edx
	test	ecx, ecx
	je	SHORT $LN44@enumAlgNam
	mov	DWORD PTR tv212[ebp], 1
	jmp	SHORT $LN45@enumAlgNam
$LN44@enumAlgNam:
	mov	DWORD PTR tv212[ebp], 0
$LN45@enumAlgNam:
	cmp	DWORD PTR tv212[ebp], 0
	je	SHORT $LN9@enumAlgNam
; Line 1033
	jmp	SHORT $LN10@enumAlgNam
$LN9@enumAlgNam:
; Line 1034
	movzx	eax, WORD PTR _i$44678[ebp]
	mov	ecx, DWORD PTR _s$44673[ebp]
	mov	DWORD PTR _elements$44669[ebp+eax*4], ecx
; Line 1035
	jmp	SHORT $LN12@enumAlgNam
; Line 1036
	jmp	SHORT $LN8@enumAlgNam
$LN11@enumAlgNam:
; Line 1038
	movzx	eax, WORD PTR _i$44678[ebp]
	xor	ecx, ecx
	mov	WORD PTR _indexes$44667[ebp+eax*2], cx
; Line 1039
	movzx	eax, WORD PTR _i$44678[ebp]
	movzx	ecx, WORD PTR _i$44678[ebp]
	mov	edx, DWORD PTR _elementBases$44668[ebp+eax*4]
	mov	DWORD PTR _elements$44669[ebp+ecx*4], edx
$LN8@enumAlgNam:
; Line 1041
	jmp	$LN13@enumAlgNam
$LN12@enumAlgNam:
; Line 1044
	mov	eax, DWORD PTR _suffix$44675[ebp]
	mov	DWORD PTR _t$44676[ebp], eax
; Line 1045
	mov	ax, WORD PTR _prefixLength$44677[ebp]
	mov	WORD PTR _length$[ebp], ax
; Line 1046
	xor	eax, eax
	mov	WORD PTR _i$44678[ebp], ax
	jmp	SHORT $LN7@enumAlgNam
$LN6@enumAlgNam:
	mov	ax, WORD PTR _i$44678[ebp]
	add	ax, 1
	mov	WORD PTR _i$44678[ebp], ax
$LN7@enumAlgNam:
	movzx	eax, WORD PTR _i$44678[ebp]
	movzx	ecx, WORD PTR _count$44672[ebp]
	cmp	eax, ecx
	jge	$LN5@enumAlgNam
; Line 1047
	movzx	eax, WORD PTR _i$44678[ebp]
	mov	ecx, DWORD PTR _elements$44669[ebp+eax*4]
	mov	DWORD PTR _s$44673[ebp], ecx
$LN4@enumAlgNam:
; Line 1048
	mov	eax, DWORD PTR _s$44673[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _c$44680[ebp], cl
	movsx	edx, BYTE PTR _c$44680[ebp]
	mov	eax, DWORD PTR _s$44673[ebp]
	add	eax, 1
	mov	DWORD PTR _s$44673[ebp], eax
	test	edx, edx
	je	SHORT $LN46@enumAlgNam
	mov	DWORD PTR tv236[ebp], 1
	jmp	SHORT $LN47@enumAlgNam
$LN46@enumAlgNam:
	mov	DWORD PTR tv236[ebp], 0
$LN47@enumAlgNam:
	cmp	DWORD PTR tv236[ebp], 0
	je	SHORT $LN3@enumAlgNam
; Line 1049
	mov	eax, DWORD PTR _t$44676[ebp]
	mov	cl, BYTE PTR _c$44680[ebp]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _t$44676[ebp]
	add	edx, 1
	mov	DWORD PTR _t$44676[ebp], edx
; Line 1050
	mov	ax, WORD PTR _length$[ebp]
	add	ax, 1
	mov	WORD PTR _length$[ebp], ax
; Line 1051
	jmp	SHORT $LN4@enumAlgNam
$LN3@enumAlgNam:
; Line 1052
	jmp	$LN6@enumAlgNam
$LN5@enumAlgNam:
; Line 1054
	mov	eax, DWORD PTR _t$44676[ebp]
	mov	BYTE PTR [eax], 0
; Line 1056
	movzx	eax, WORD PTR _length$[ebp]
	mov	esi, esp
	push	eax
	lea	ecx, DWORD PTR _buffer$[ebp]
	push	ecx
	mov	edx, DWORD PTR _nameChoice$[ebp]
	push	edx
	mov	eax, DWORD PTR _start$[ebp]
	push	eax
	mov	ecx, DWORD PTR _context$[ebp]
	push	ecx
	call	DWORD PTR _fn$[ebp]
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
	movsx	edx, al
	test	edx, edx
	jne	SHORT $LN2@enumAlgNam
; Line 1057
	xor	al, al
	jmp	SHORT $LN40@enumAlgNam
$LN2@enumAlgNam:
; Line 1059
	jmp	$LN15@enumAlgNam
$LN37@enumAlgNam:
; Line 1067
	mov	al, 1
$LN40@enumAlgNam:
; Line 1068
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN53@enumAlgNam
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 668				; 0000029cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN53@enumAlgNam:
	DD	4
	DD	$LN52@enumAlgNam
$LN52@enumAlgNam:
	DD	-208					; ffffff30H
	DD	200					; 000000c8H
	DD	$LN48@enumAlgNam
	DD	-280					; fffffee8H
	DD	16					; 00000010H
	DD	$LN49@enumAlgNam
	DD	-320					; fffffec0H
	DD	32					; 00000020H
	DD	$LN50@enumAlgNam
	DD	-360					; fffffe98H
	DD	32					; 00000020H
	DD	$LN51@enumAlgNam
$LN51@enumAlgNam:
	DB	101					; 00000065H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	115					; 00000073H
	DB	0
$LN50@enumAlgNam:
	DB	101					; 00000065H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	66					; 00000042H
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
$LN49@enumAlgNam:
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
$LN48@enumAlgNam:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
?enumAlgNames@icu_56@@YACPAUAlgorithmicRange@1@HHP6ACPAXHW4UCharNameChoice@@PBDH@Z12@Z ENDP ; icu_56::enumAlgNames
_TEXT	ENDS
PUBLIC	_uprv_getMaxCharNameLength_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _uprv_getMaxCharNameLength_56
_TEXT	SEGMENT
_errorCode$ = -8					; size = 4
_uprv_getMaxCharNameLength_56 PROC			; COMDAT
; Line 1694
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1695
	mov	DWORD PTR _errorCode$[ebp], 0
; Line 1696
	lea	eax, DWORD PTR _errorCode$[ebp]
	push	eax
	call	?calcNameSetsLengths@icu_56@@YACPAW4UErrorCode@@@Z ; icu_56::calcNameSetsLengths
	add	esp, 4
	movsx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@uprv_getMa
; Line 1697
	mov	eax, DWORD PTR _gMaxNameLength
	jmp	SHORT $LN3@uprv_getMa
; Line 1698
	jmp	SHORT $LN3@uprv_getMa
$LN2@uprv_getMa:
; Line 1699
	xor	eax, eax
$LN3@uprv_getMa:
; Line 1701
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@uprv_getMa
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN7@uprv_getMa:
	DD	1
	DD	$LN6@uprv_getMa
$LN6@uprv_getMa:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN5@uprv_getMa
$LN5@uprv_getMa:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	67					; 00000043H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
_uprv_getMaxCharNameLength_56 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?calcNameSetsLengths@icu_56@@YACPAW4UErrorCode@@@Z
_TEXT	SEGMENT
_maxNameLength$ = -20					; size = 4
_i$ = -8						; size = 4
_pErrorCode$ = 8					; size = 4
?calcNameSetsLengths@icu_56@@YACPAW4UErrorCode@@@Z PROC	; icu_56::calcNameSetsLengths, COMDAT
; Line 1412
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1416
	cmp	DWORD PTR _gMaxNameLength, 0
	je	SHORT $LN5@calcNameSe
; Line 1417
	mov	al, 1
	jmp	$LN6@calcNameSe
$LN5@calcNameSe:
; Line 1420
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	call	?isDataLoaded@icu_56@@YACPAW4UErrorCode@@@Z ; icu_56::isDataLoaded
	add	esp, 4
	movsx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN4@calcNameSe
; Line 1421
	xor	al, al
	jmp	$LN6@calcNameSe
$LN4@calcNameSe:
; Line 1425
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@calcNameSe
$LN2@calcNameSe:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@calcNameSe:
	cmp	DWORD PTR _i$[ebp], 19			; 00000013H
	jge	SHORT $LN1@calcNameSe
; Line 1426
	mov	eax, DWORD PTR _i$[ebp]
	movzx	edx, BYTE PTR ?extChars@?1??calcNameSetsLengths@icu_56@@YACPAW4UErrorCode@@@Z@4QBDB[eax]
	sar	edx, 5
	mov	eax, DWORD PTR _i$[ebp]
	movzx	ecx, BYTE PTR ?extChars@?1??calcNameSetsLengths@icu_56@@YACPAW4UErrorCode@@@Z@4QBDB[eax]
	and	ecx, 31					; 0000001fH
	mov	eax, 1
	shl	eax, cl
	or	eax, DWORD PTR _gNameSet[edx*4]
	mov	ecx, DWORD PTR _i$[ebp]
	movzx	edx, BYTE PTR ?extChars@?1??calcNameSetsLengths@icu_56@@YACPAW4UErrorCode@@@Z@4QBDB[ecx]
	sar	edx, 5
	mov	DWORD PTR _gNameSet[edx*4], eax
; Line 1427
	jmp	SHORT $LN2@calcNameSe
$LN1@calcNameSe:
; Line 1430
	push	0
	call	?calcAlgNameSetsLengths@icu_56@@YAHH@Z	; icu_56::calcAlgNameSetsLengths
	add	esp, 4
	mov	DWORD PTR _maxNameLength$[ebp], eax
; Line 1433
	mov	eax, DWORD PTR _maxNameLength$[ebp]
	push	eax
	call	?calcExtNameSetsLengths@icu_56@@YAHH@Z	; icu_56::calcExtNameSetsLengths
	add	esp, 4
	mov	DWORD PTR _maxNameLength$[ebp], eax
; Line 1436
	mov	eax, DWORD PTR _maxNameLength$[ebp]
	push	eax
	call	?calcGroupNameSetsLengths@icu_56@@YAXH@Z ; icu_56::calcGroupNameSetsLengths
	add	esp, 4
; Line 1438
	mov	al, 1
$LN6@calcNameSe:
; Line 1439
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?calcNameSetsLengths@icu_56@@YACPAW4UErrorCode@@@Z ENDP	; icu_56::calcNameSetsLengths
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?calcAlgNameSetsLengths@icu_56@@YAHH@Z
_TEXT	SEGMENT
tv70 = -328						; size = 4
_maxFactorLength$44828 = -128				; size = 4
_factorLength$44827 = -116				; size = 4
_factor$44826 = -104					; size = 4
_count$44825 = -92					; size = 4
_i$44824 = -80						; size = 4
_s$44823 = -68						; size = 4
_factors$44821 = -56					; size = 4
_length$ = -44						; size = 4
_rangeCount$ = -32					; size = 4
_p$ = -20						; size = 4
_range$ = -8						; size = 4
_maxNameLength$ = 8					; size = 4
?calcAlgNameSetsLengths@icu_56@@YAHH@Z PROC		; icu_56::calcAlgNameSetsLengths, COMDAT
; Line 1214
	push	ebp
	mov	ebp, esp
	sub	esp, 328				; 00000148H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-328]
	mov	ecx, 82					; 00000052H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1221
	mov	eax, DWORD PTR _uCharNames
	mov	ecx, DWORD PTR _uCharNames
	add	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _p$[ebp], ecx
; Line 1222
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _rangeCount$[ebp], ecx
; Line 1223
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 4
	mov	DWORD PTR _range$[ebp], eax
$LN16@calcAlgNam:
; Line 1224
	cmp	DWORD PTR _rangeCount$[ebp], 0
	jbe	$LN15@calcAlgNam
; Line 1225
	mov	eax, DWORD PTR _range$[ebp]
	mov	cl, BYTE PTR [eax+8]
	mov	BYTE PTR tv70[ebp], cl
	cmp	BYTE PTR tv70[ebp], 0
	je	SHORT $LN12@calcAlgNam
	cmp	BYTE PTR tv70[ebp], 1
	je	SHORT $LN10@calcAlgNam
	jmp	$LN13@calcAlgNam
$LN12@calcAlgNam:
; Line 1229
	mov	eax, DWORD PTR _range$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	push	OFFSET _gNameSet
	call	?calcStringSetLength@icu_56@@YAHQAIPBD@Z ; icu_56::calcStringSetLength
	add	esp, 8
	mov	ecx, DWORD PTR _range$[ebp]
	movzx	edx, BYTE PTR [ecx+9]
	add	eax, edx
	mov	DWORD PTR _length$[ebp], eax
; Line 1230
	mov	eax, DWORD PTR _length$[ebp]
	cmp	eax, DWORD PTR _maxNameLength$[ebp]
	jle	SHORT $LN11@calcAlgNam
; Line 1231
	mov	eax, DWORD PTR _length$[ebp]
	mov	DWORD PTR _maxNameLength$[ebp], eax
$LN11@calcAlgNam:
; Line 1233
	jmp	$LN13@calcAlgNam
$LN10@calcAlgNam:
; Line 1236
	mov	eax, DWORD PTR _range$[ebp]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR _factors$44821[ebp], eax
; Line 1238
	mov	eax, DWORD PTR _range$[ebp]
	movzx	ecx, BYTE PTR [eax+9]
	mov	DWORD PTR _count$44825[ebp], ecx
; Line 1241
	mov	eax, DWORD PTR _count$44825[ebp]
	mov	ecx, DWORD PTR _factors$44821[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR _s$44823[ebp], edx
; Line 1242
	mov	eax, DWORD PTR _s$44823[ebp]
	push	eax
	push	OFFSET _gNameSet
	call	?calcStringSetLength@icu_56@@YAHQAIPBD@Z ; icu_56::calcStringSetLength
	add	esp, 8
	mov	DWORD PTR _length$[ebp], eax
; Line 1243
	mov	eax, DWORD PTR _length$[ebp]
	mov	ecx, DWORD PTR _s$44823[ebp]
	lea	edx, DWORD PTR [ecx+eax+1]
	mov	DWORD PTR _s$44823[ebp], edx
; Line 1246
	mov	DWORD PTR _i$44824[ebp], 0
	jmp	SHORT $LN9@calcAlgNam
$LN8@calcAlgNam:
	mov	eax, DWORD PTR _i$44824[ebp]
	add	eax, 1
	mov	DWORD PTR _i$44824[ebp], eax
$LN9@calcAlgNam:
	mov	eax, DWORD PTR _i$44824[ebp]
	cmp	eax, DWORD PTR _count$44825[ebp]
	jge	SHORT $LN7@calcAlgNam
; Line 1247
	mov	DWORD PTR _maxFactorLength$44828[ebp], 0
; Line 1248
	mov	eax, DWORD PTR _i$44824[ebp]
	mov	ecx, DWORD PTR _factors$44821[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	mov	DWORD PTR _factor$44826[ebp], edx
	jmp	SHORT $LN6@calcAlgNam
$LN5@calcAlgNam:
	mov	eax, DWORD PTR _factor$44826[ebp]
	sub	eax, 1
	mov	DWORD PTR _factor$44826[ebp], eax
$LN6@calcAlgNam:
	cmp	DWORD PTR _factor$44826[ebp], 0
	jle	SHORT $LN4@calcAlgNam
; Line 1249
	mov	eax, DWORD PTR _s$44823[ebp]
	push	eax
	push	OFFSET _gNameSet
	call	?calcStringSetLength@icu_56@@YAHQAIPBD@Z ; icu_56::calcStringSetLength
	add	esp, 8
	mov	DWORD PTR _factorLength$44827[ebp], eax
; Line 1250
	mov	eax, DWORD PTR _factorLength$44827[ebp]
	mov	ecx, DWORD PTR _s$44823[ebp]
	lea	edx, DWORD PTR [ecx+eax+1]
	mov	DWORD PTR _s$44823[ebp], edx
; Line 1251
	mov	eax, DWORD PTR _factorLength$44827[ebp]
	cmp	eax, DWORD PTR _maxFactorLength$44828[ebp]
	jle	SHORT $LN3@calcAlgNam
; Line 1252
	mov	eax, DWORD PTR _factorLength$44827[ebp]
	mov	DWORD PTR _maxFactorLength$44828[ebp], eax
$LN3@calcAlgNam:
; Line 1254
	jmp	SHORT $LN5@calcAlgNam
$LN4@calcAlgNam:
; Line 1255
	mov	eax, DWORD PTR _length$[ebp]
	add	eax, DWORD PTR _maxFactorLength$44828[ebp]
	mov	DWORD PTR _length$[ebp], eax
; Line 1256
	jmp	SHORT $LN8@calcAlgNam
$LN7@calcAlgNam:
; Line 1258
	mov	eax, DWORD PTR _length$[ebp]
	cmp	eax, DWORD PTR _maxNameLength$[ebp]
	jle	SHORT $LN13@calcAlgNam
; Line 1259
	mov	eax, DWORD PTR _length$[ebp]
	mov	DWORD PTR _maxNameLength$[ebp], eax
$LN13@calcAlgNam:
; Line 1268
	mov	eax, DWORD PTR _range$[ebp]
	movzx	ecx, WORD PTR [eax+10]
	add	ecx, DWORD PTR _range$[ebp]
	mov	DWORD PTR _range$[ebp], ecx
; Line 1269
	mov	eax, DWORD PTR _rangeCount$[ebp]
	sub	eax, 1
	mov	DWORD PTR _rangeCount$[ebp], eax
; Line 1270
	jmp	$LN16@calcAlgNam
$LN15@calcAlgNam:
; Line 1271
	mov	eax, DWORD PTR _maxNameLength$[ebp]
; Line 1272
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 328				; 00000148H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?calcAlgNameSetsLengths@icu_56@@YAHH@Z ENDP		; icu_56::calcAlgNameSetsLengths
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?calcStringSetLength@icu_56@@YAHQAIPBD@Z
_TEXT	SEGMENT
tv67 = -220						; size = 4
_c$ = -17						; size = 1
_length$ = -8						; size = 4
_set$ = 8						; size = 4
_s$ = 12						; size = 4
?calcStringSetLength@icu_56@@YAHQAIPBD@Z PROC		; icu_56::calcStringSetLength, COMDAT
; Line 1202
	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1203
	mov	DWORD PTR _length$[ebp], 0
$LN2@calcString:
; Line 1206
	mov	eax, DWORD PTR _s$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _c$[ebp], cl
	movsx	edx, BYTE PTR _c$[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	add	eax, 1
	mov	DWORD PTR _s$[ebp], eax
	test	edx, edx
	je	SHORT $LN5@calcString
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN6@calcString
$LN5@calcString:
	mov	DWORD PTR tv67[ebp], 0
$LN6@calcString:
	cmp	DWORD PTR tv67[ebp], 0
	je	SHORT $LN1@calcString
; Line 1207
	movzx	eax, BYTE PTR _c$[ebp]
	sar	eax, 5
	movzx	ecx, BYTE PTR _c$[ebp]
	and	ecx, 31					; 0000001fH
	mov	edx, 1
	shl	edx, cl
	mov	ecx, DWORD PTR _set$[ebp]
	or	edx, DWORD PTR [ecx+eax*4]
	movzx	eax, BYTE PTR _c$[ebp]
	sar	eax, 5
	mov	ecx, DWORD PTR _set$[ebp]
	mov	DWORD PTR [ecx+eax*4], edx
; Line 1208
	mov	eax, DWORD PTR _length$[ebp]
	add	eax, 1
	mov	DWORD PTR _length$[ebp], eax
; Line 1209
	jmp	SHORT $LN2@calcString
$LN1@calcString:
; Line 1210
	mov	eax, DWORD PTR _length$[ebp]
; Line 1211
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?calcStringSetLength@icu_56@@YAHQAIPBD@Z ENDP		; icu_56::calcStringSetLength
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?calcExtNameSetsLengths@icu_56@@YAHH@Z
_TEXT	SEGMENT
_length$ = -20						; size = 4
_i$ = -8						; size = 4
_maxNameLength$ = 8					; size = 4
?calcExtNameSetsLengths@icu_56@@YAHH@Z PROC		; icu_56::calcExtNameSetsLengths, COMDAT
; Line 1275
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1278
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@calcExtNam
$LN3@calcExtNam:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@calcExtNam:
	cmp	DWORD PTR _i$[ebp], 33			; 00000021H
	jge	SHORT $LN2@calcExtNam
; Line 1286
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _charCatNames[eax*4]
	push	ecx
	push	OFFSET _gNameSet
	call	?calcStringSetLength@icu_56@@YAHQAIPBD@Z ; icu_56::calcStringSetLength
	add	esp, 8
	add	eax, 9
	mov	DWORD PTR _length$[ebp], eax
; Line 1287
	mov	eax, DWORD PTR _length$[ebp]
	cmp	eax, DWORD PTR _maxNameLength$[ebp]
	jle	SHORT $LN1@calcExtNam
; Line 1288
	mov	eax, DWORD PTR _length$[ebp]
	mov	DWORD PTR _maxNameLength$[ebp], eax
$LN1@calcExtNam:
; Line 1290
	jmp	SHORT $LN3@calcExtNam
$LN2@calcExtNam:
; Line 1291
	mov	eax, DWORD PTR _maxNameLength$[ebp]
; Line 1292
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?calcExtNameSetsLengths@icu_56@@YAHH@Z ENDP		; icu_56::calcExtNameSetsLengths
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_uprv_free_56:PROC
EXTRN	_memset:PROC
EXTRN	_uprv_malloc_56:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?calcGroupNameSetsLengths@icu_56@@YAXH@Z
_TEXT	SEGMENT
_length$ = -284						; size = 4
_lineNumber$ = -272					; size = 4
_groupCount$ = -260					; size = 4
_lineLimit$ = -248					; size = 4
_line$ = -236						; size = 4
_s$ = -224						; size = 4
_group$ = -212						; size = 4
_tokenLengths$ = -200					; size = 4
_tokenStrings$ = -188					; size = 4
_tokenCount$ = -176					; size = 2
_tokens$ = -164						; size = 4
_lengths$ = -152					; size = 68
_offsets$ = -76						; size = 68
__$ArrayPad$ = -4					; size = 4
_maxNameLength$ = 8					; size = 4
?calcGroupNameSetsLengths@icu_56@@YAXH@Z PROC		; icu_56::calcGroupNameSetsLengths, COMDAT
; Line 1340
	push	ebp
	mov	ebp, esp
	sub	esp, 480				; 000001e0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-480]
	mov	ecx, 120				; 00000078H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 1343
	mov	eax, DWORD PTR _uCharNames
	add	eax, 16					; 00000010H
	mov	DWORD PTR _tokens$[ebp], eax
; Line 1344
	mov	eax, DWORD PTR _tokens$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR _tokenCount$[ebp], cx
	mov	edx, DWORD PTR _tokens$[ebp]
	add	edx, 2
	mov	DWORD PTR _tokens$[ebp], edx
; Line 1345
	mov	eax, DWORD PTR _uCharNames
	mov	ecx, DWORD PTR _uCharNames
	add	ecx, DWORD PTR [eax]
	mov	DWORD PTR _tokenStrings$[ebp], ecx
; Line 1354
	movzx	eax, WORD PTR _tokenCount$[ebp]
	push	eax
	call	_uprv_malloc_56
	add	esp, 4
	mov	DWORD PTR _tokenLengths$[ebp], eax
; Line 1355
	cmp	DWORD PTR _tokenLengths$[ebp], 0
	je	SHORT $LN12@calcGroupN
; Line 1356
	movzx	eax, WORD PTR _tokenCount$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _tokenLengths$[ebp]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH
$LN12@calcGroupN:
; Line 1359
	mov	eax, DWORD PTR _uCharNames
	mov	ecx, DWORD PTR _uCharNames
	add	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _group$[ebp], ecx
; Line 1360
	mov	eax, DWORD PTR _group$[ebp]
	movzx	ecx, WORD PTR [eax]
	mov	DWORD PTR _groupCount$[ebp], ecx
	mov	edx, DWORD PTR _group$[ebp]
	add	edx, 2
	mov	DWORD PTR _group$[ebp], edx
$LN11@calcGroupN:
; Line 1363
	cmp	DWORD PTR _groupCount$[ebp], 0
	jle	$LN10@calcGroupN
; Line 1364
	mov	eax, DWORD PTR _uCharNames
	mov	ecx, DWORD PTR _uCharNames
	add	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _group$[ebp]
	movzx	eax, WORD PTR [edx+2]
	shl	eax, 16					; 00000010H
	mov	edx, DWORD PTR _group$[ebp]
	movzx	edx, WORD PTR [edx+4]
	or	eax, edx
	add	ecx, eax
	mov	DWORD PTR _s$[ebp], ecx
; Line 1365
	lea	eax, DWORD PTR _lengths$[ebp]
	push	eax
	lea	ecx, DWORD PTR _offsets$[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	call	?expandGroupLengths@icu_56@@YAPBEPBEQAG1@Z ; icu_56::expandGroupLengths
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _s$[ebp], eax
; Line 1368
	mov	DWORD PTR _lineNumber$[ebp], 0
	jmp	SHORT $LN9@calcGroupN
$LN8@calcGroupN:
	mov	eax, DWORD PTR _lineNumber$[ebp]
	add	eax, 1
	mov	DWORD PTR _lineNumber$[ebp], eax
$LN9@calcGroupN:
	cmp	DWORD PTR _lineNumber$[ebp], 32		; 00000020H
	jge	$LN7@calcGroupN
; Line 1369
	mov	eax, DWORD PTR _lineNumber$[ebp]
	movzx	ecx, WORD PTR _offsets$[ebp+eax*2]
	add	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR _line$[ebp], ecx
; Line 1370
	mov	eax, DWORD PTR _lineNumber$[ebp]
	movzx	ecx, WORD PTR _lengths$[ebp+eax*2]
	mov	DWORD PTR _length$[ebp], ecx
; Line 1371
	cmp	DWORD PTR _length$[ebp], 0
	jne	SHORT $LN6@calcGroupN
; Line 1372
	jmp	SHORT $LN8@calcGroupN
$LN6@calcGroupN:
; Line 1375
	mov	eax, DWORD PTR _line$[ebp]
	add	eax, DWORD PTR _length$[ebp]
	mov	DWORD PTR _lineLimit$[ebp], eax
; Line 1378
	mov	eax, DWORD PTR _lineLimit$[ebp]
	push	eax
	lea	ecx, DWORD PTR _line$[ebp]
	push	ecx
	push	OFFSET _gNameSet
	mov	edx, DWORD PTR _tokenLengths$[ebp]
	push	edx
	mov	eax, DWORD PTR _tokenStrings$[ebp]
	push	eax
	movzx	ecx, WORD PTR _tokenCount$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tokens$[ebp]
	push	edx
	call	?calcNameSetLength@icu_56@@YAHPBGGPBEPACQAIPAPBE1@Z ; icu_56::calcNameSetLength
	add	esp, 28					; 0000001cH
	mov	DWORD PTR _length$[ebp], eax
; Line 1379
	mov	eax, DWORD PTR _length$[ebp]
	cmp	eax, DWORD PTR _maxNameLength$[ebp]
	jle	SHORT $LN5@calcGroupN
; Line 1380
	mov	eax, DWORD PTR _length$[ebp]
	mov	DWORD PTR _maxNameLength$[ebp], eax
$LN5@calcGroupN:
; Line 1382
	mov	eax, DWORD PTR _line$[ebp]
	cmp	eax, DWORD PTR _lineLimit$[ebp]
	jne	SHORT $LN4@calcGroupN
; Line 1383
	jmp	$LN8@calcGroupN
$LN4@calcGroupN:
; Line 1387
	mov	eax, DWORD PTR _lineLimit$[ebp]
	push	eax
	lea	ecx, DWORD PTR _line$[ebp]
	push	ecx
	push	OFFSET _gNameSet
	mov	edx, DWORD PTR _tokenLengths$[ebp]
	push	edx
	mov	eax, DWORD PTR _tokenStrings$[ebp]
	push	eax
	movzx	ecx, WORD PTR _tokenCount$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tokens$[ebp]
	push	edx
	call	?calcNameSetLength@icu_56@@YAHPBGGPBEPACQAIPAPBE1@Z ; icu_56::calcNameSetLength
	add	esp, 28					; 0000001cH
	mov	DWORD PTR _length$[ebp], eax
; Line 1388
	mov	eax, DWORD PTR _length$[ebp]
	cmp	eax, DWORD PTR _maxNameLength$[ebp]
	jle	SHORT $LN3@calcGroupN
; Line 1389
	mov	eax, DWORD PTR _length$[ebp]
	mov	DWORD PTR _maxNameLength$[ebp], eax
$LN3@calcGroupN:
; Line 1391
	mov	eax, DWORD PTR _line$[ebp]
	cmp	eax, DWORD PTR _lineLimit$[ebp]
	jne	SHORT $LN2@calcGroupN
; Line 1392
	jmp	$LN8@calcGroupN
$LN2@calcGroupN:
; Line 1397
	jmp	$LN8@calcGroupN
$LN7@calcGroupN:
; Line 1399
	mov	eax, DWORD PTR _group$[ebp]
	add	eax, 6
	mov	DWORD PTR _group$[ebp], eax
; Line 1400
	mov	eax, DWORD PTR _groupCount$[ebp]
	sub	eax, 1
	mov	DWORD PTR _groupCount$[ebp], eax
; Line 1401
	jmp	$LN11@calcGroupN
$LN10@calcGroupN:
; Line 1403
	cmp	DWORD PTR _tokenLengths$[ebp], 0
	je	SHORT $LN1@calcGroupN
; Line 1404
	mov	eax, DWORD PTR _tokenLengths$[ebp]
	push	eax
	call	_uprv_free_56
	add	esp, 4
$LN1@calcGroupN:
; Line 1408
	mov	eax, DWORD PTR _maxNameLength$[ebp]
	mov	DWORD PTR _gMaxNameLength, eax
; Line 1409
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN19@calcGroupN
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 480				; 000001e0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN19@calcGroupN:
	DD	3
	DD	$LN18@calcGroupN
$LN18@calcGroupN:
	DD	-76					; ffffffb4H
	DD	68					; 00000044H
	DD	$LN15@calcGroupN
	DD	-152					; ffffff68H
	DD	68					; 00000044H
	DD	$LN16@calcGroupN
	DD	-236					; ffffff14H
	DD	4
	DD	$LN17@calcGroupN
$LN17@calcGroupN:
	DB	108					; 0000006cH
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	101					; 00000065H
	DB	0
$LN16@calcGroupN:
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	115					; 00000073H
	DB	0
$LN15@calcGroupN:
	DB	111					; 0000006fH
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	115					; 00000073H
	DB	0
?calcGroupNameSetsLengths@icu_56@@YAXH@Z ENDP		; icu_56::calcGroupNameSetsLengths
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?calcNameSetLength@icu_56@@YAHPBGGPBEPACQAIPAPBE1@Z
_TEXT	SEGMENT
tv69 = -256						; size = 4
_token$ = -56						; size = 2
_c$ = -44						; size = 2
_tokenLength$ = -32					; size = 4
_length$ = -20						; size = 4
_line$ = -8						; size = 4
_tokens$ = 8						; size = 4
_tokenCount$ = 12					; size = 2
_tokenStrings$ = 16					; size = 4
_tokenLengths$ = 20					; size = 4
_set$ = 24						; size = 4
_pLine$ = 28						; size = 4
_lineLimit$ = 32					; size = 4
?calcNameSetLength@icu_56@@YAHPBGGPBEPACQAIPAPBE1@Z PROC ; icu_56::calcNameSetLength, COMDAT
; Line 1297
	push	ebp
	mov	ebp, esp
	sub	esp, 256				; 00000100H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-256]
	mov	ecx, 64					; 00000040H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1298
	mov	eax, DWORD PTR _pLine$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _line$[ebp], ecx
; Line 1299
	mov	DWORD PTR _length$[ebp], 0
$LN10@calcNameSe@2:
; Line 1302
	mov	eax, DWORD PTR _line$[ebp]
	cmp	eax, DWORD PTR _lineLimit$[ebp]
	je	$LN9@calcNameSe@2
	mov	eax, DWORD PTR _line$[ebp]
	movzx	cx, BYTE PTR [eax]
	mov	WORD PTR _c$[ebp], cx
	movzx	edx, WORD PTR _c$[ebp]
	mov	eax, DWORD PTR _line$[ebp]
	add	eax, 1
	mov	DWORD PTR _line$[ebp], eax
	cmp	edx, 59					; 0000003bH
	je	SHORT $LN13@calcNameSe@2
	mov	DWORD PTR tv69[ebp], 1
	jmp	SHORT $LN14@calcNameSe@2
$LN13@calcNameSe@2:
	mov	DWORD PTR tv69[ebp], 0
$LN14@calcNameSe@2:
	cmp	DWORD PTR tv69[ebp], 0
	je	$LN9@calcNameSe@2
; Line 1303
	movzx	eax, WORD PTR _c$[ebp]
	movzx	ecx, WORD PTR _tokenCount$[ebp]
	cmp	eax, ecx
	jl	SHORT $LN8@calcNameSe@2
; Line 1305
	movzx	eax, BYTE PTR _c$[ebp]
	sar	eax, 5
	movzx	ecx, BYTE PTR _c$[ebp]
	and	ecx, 31					; 0000001fH
	mov	edx, 1
	shl	edx, cl
	mov	ecx, DWORD PTR _set$[ebp]
	or	edx, DWORD PTR [ecx+eax*4]
	movzx	eax, BYTE PTR _c$[ebp]
	sar	eax, 5
	mov	ecx, DWORD PTR _set$[ebp]
	mov	DWORD PTR [ecx+eax*4], edx
; Line 1306
	mov	eax, DWORD PTR _length$[ebp]
	add	eax, 1
	mov	DWORD PTR _length$[ebp], eax
; Line 1307
	jmp	$LN7@calcNameSe@2
$LN8@calcNameSe@2:
; Line 1308
	movzx	eax, WORD PTR _c$[ebp]
	mov	ecx, DWORD PTR _tokens$[ebp]
	mov	dx, WORD PTR [ecx+eax*2]
	mov	WORD PTR _token$[ebp], dx
; Line 1309
	movzx	eax, WORD PTR _token$[ebp]
	cmp	eax, 65534				; 0000fffeH
	jne	SHORT $LN6@calcNameSe@2
; Line 1311
	movzx	eax, WORD PTR _c$[ebp]
	shl	eax, 8
	mov	ecx, DWORD PTR _line$[ebp]
	movzx	edx, BYTE PTR [ecx]
	or	eax, edx
	mov	WORD PTR _c$[ebp], ax
	mov	eax, DWORD PTR _line$[ebp]
	add	eax, 1
	mov	DWORD PTR _line$[ebp], eax
; Line 1312
	movzx	eax, WORD PTR _c$[ebp]
	mov	ecx, DWORD PTR _tokens$[ebp]
	mov	dx, WORD PTR [ecx+eax*2]
	mov	WORD PTR _token$[ebp], dx
$LN6@calcNameSe@2:
; Line 1314
	movzx	eax, WORD PTR _token$[ebp]
	cmp	eax, 65535				; 0000ffffH
	jne	SHORT $LN5@calcNameSe@2
; Line 1316
	movzx	eax, BYTE PTR _c$[ebp]
	sar	eax, 5
	movzx	ecx, BYTE PTR _c$[ebp]
	and	ecx, 31					; 0000001fH
	mov	edx, 1
	shl	edx, cl
	mov	ecx, DWORD PTR _set$[ebp]
	or	edx, DWORD PTR [ecx+eax*4]
	movzx	eax, BYTE PTR _c$[ebp]
	sar	eax, 5
	mov	ecx, DWORD PTR _set$[ebp]
	mov	DWORD PTR [ecx+eax*4], edx
; Line 1317
	mov	eax, DWORD PTR _length$[ebp]
	add	eax, 1
	mov	DWORD PTR _length$[ebp], eax
; Line 1318
	jmp	SHORT $LN7@calcNameSe@2
$LN5@calcNameSe@2:
; Line 1320
	cmp	DWORD PTR _tokenLengths$[ebp], 0
	je	SHORT $LN3@calcNameSe@2
; Line 1322
	movzx	eax, WORD PTR _c$[ebp]
	mov	ecx, DWORD PTR _tokenLengths$[ebp]
	movsx	edx, BYTE PTR [ecx+eax]
	mov	DWORD PTR _tokenLength$[ebp], edx
; Line 1323
	cmp	DWORD PTR _tokenLength$[ebp], 0
	jne	SHORT $LN2@calcNameSe@2
; Line 1324
	movzx	eax, WORD PTR _token$[ebp]
	add	eax, DWORD PTR _tokenStrings$[ebp]
	push	eax
	mov	ecx, DWORD PTR _set$[ebp]
	push	ecx
	call	?calcStringSetLength@icu_56@@YAHQAIPBD@Z ; icu_56::calcStringSetLength
	add	esp, 8
	mov	DWORD PTR _tokenLength$[ebp], eax
; Line 1325
	movzx	eax, WORD PTR _c$[ebp]
	mov	ecx, DWORD PTR _tokenLengths$[ebp]
	mov	dl, BYTE PTR _tokenLength$[ebp]
	mov	BYTE PTR [ecx+eax], dl
$LN2@calcNameSe@2:
; Line 1327
	jmp	SHORT $LN1@calcNameSe@2
$LN3@calcNameSe@2:
; Line 1328
	movzx	eax, WORD PTR _token$[ebp]
	add	eax, DWORD PTR _tokenStrings$[ebp]
	push	eax
	mov	ecx, DWORD PTR _set$[ebp]
	push	ecx
	call	?calcStringSetLength@icu_56@@YAHQAIPBD@Z ; icu_56::calcStringSetLength
	add	esp, 8
	mov	DWORD PTR _tokenLength$[ebp], eax
$LN1@calcNameSe@2:
; Line 1330
	mov	eax, DWORD PTR _length$[ebp]
	add	eax, DWORD PTR _tokenLength$[ebp]
	mov	DWORD PTR _length$[ebp], eax
$LN7@calcNameSe@2:
; Line 1333
	jmp	$LN10@calcNameSe@2
$LN9@calcNameSe@2:
; Line 1335
	mov	eax, DWORD PTR _pLine$[ebp]
	mov	ecx, DWORD PTR _line$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 1336
	mov	eax, DWORD PTR _length$[ebp]
; Line 1337
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 256				; 00000100H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?calcNameSetLength@icu_56@@YAHPBGGPBEPACQAIPAPBE1@Z ENDP ; icu_56::calcNameSetLength
_TEXT	ENDS
PUBLIC	_uprv_getCharNameCharacters_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _uprv_getCharNameCharacters_56
_TEXT	SEGMENT
_sa$ = 8						; size = 4
_uprv_getCharNameCharacters_56 PROC			; COMDAT
; Line 1746
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1747
	mov	eax, DWORD PTR _sa$[ebp]
	push	eax
	push	OFFSET _gNameSet
	call	?charSetToUSet@@YAXQAIPBUUSetAdder@@@Z	; charSetToUSet
	add	esp, 8
; Line 1748
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_uprv_getCharNameCharacters_56 ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_u_charsToUChars_56:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?charSetToUSet@@YAXQAIPBUUSetAdder@@@Z
_TEXT	SEGMENT
_errorCode$ = -820					; size = 4
_length$ = -808						; size = 4
_i$ = -796						; size = 4
_cs$ = -784						; size = 256
_us$ = -520						; size = 512
__$ArrayPad$ = -4					; size = 4
_cset$ = 8						; size = 4
_sa$ = 12						; size = 4
?charSetToUSet@@YAXQAIPBUUSetAdder@@@Z PROC		; charSetToUSet, COMDAT
; Line 1709
	push	ebp
	mov	ebp, esp
	sub	esp, 1016				; 000003f8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-1016]
	mov	ecx, 254				; 000000feH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 1716
	mov	DWORD PTR _errorCode$[ebp], 0
; Line 1718
	lea	eax, DWORD PTR _errorCode$[ebp]
	push	eax
	call	?calcNameSetsLengths@icu_56@@YACPAW4UErrorCode@@@Z ; icu_56::calcNameSetsLengths
	add	esp, 4
	movsx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN10@charSetToU
; Line 1719
	jmp	$LN11@charSetToU
$LN10@charSetToU:
; Line 1723
	mov	DWORD PTR _length$[ebp], 0
; Line 1724
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN9@charSetToU
$LN8@charSetToU:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN9@charSetToU:
	cmp	DWORD PTR _i$[ebp], 256			; 00000100H
	jge	SHORT $LN7@charSetToU
; Line 1725
	movzx	eax, BYTE PTR _i$[ebp]
	sar	eax, 5
	movzx	ecx, BYTE PTR _i$[ebp]
	and	ecx, 31					; 0000001fH
	mov	edx, 1
	shl	edx, cl
	mov	ecx, DWORD PTR _cset$[ebp]
	and	edx, DWORD PTR [ecx+eax*4]
	je	SHORT $LN6@charSetToU
; Line 1726
	mov	eax, DWORD PTR _length$[ebp]
	mov	cl, BYTE PTR _i$[ebp]
	mov	BYTE PTR _cs$[ebp+eax], cl
	mov	edx, DWORD PTR _length$[ebp]
	add	edx, 1
	mov	DWORD PTR _length$[ebp], edx
$LN6@charSetToU:
; Line 1728
	jmp	SHORT $LN8@charSetToU
$LN7@charSetToU:
; Line 1731
	mov	eax, DWORD PTR _length$[ebp]
	push	eax
	lea	ecx, DWORD PTR _us$[ebp]
	push	ecx
	lea	edx, DWORD PTR _cs$[ebp]
	push	edx
	call	_u_charsToUChars_56
	add	esp, 12					; 0000000cH
; Line 1734
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN5@charSetToU
$LN4@charSetToU:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN5@charSetToU:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _length$[ebp]
	jge	SHORT $LN11@charSetToU
; Line 1735
	mov	eax, DWORD PTR _i$[ebp]
	movzx	ecx, WORD PTR _us$[ebp+eax*2]
	test	ecx, ecx
	jne	SHORT $LN1@charSetToU
	mov	eax, DWORD PTR _i$[ebp]
	movsx	ecx, BYTE PTR _cs$[ebp+eax]
	test	ecx, ecx
	jne	SHORT $LN2@charSetToU
$LN1@charSetToU:
; Line 1736
	mov	eax, DWORD PTR _i$[ebp]
	movzx	ecx, WORD PTR _us$[ebp+eax*2]
	mov	esi, esp
	push	ecx
	mov	edx, DWORD PTR _sa$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _sa$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@charSetToU:
; Line 1738
	jmp	SHORT $LN4@charSetToU
$LN11@charSetToU:
; Line 1739
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN17@charSetToU
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 1016				; 000003f8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN17@charSetToU:
	DD	3
	DD	$LN16@charSetToU
$LN16@charSetToU:
	DD	-520					; fffffdf8H
	DD	512					; 00000200H
	DD	$LN13@charSetToU
	DD	-784					; fffffcf0H
	DD	256					; 00000100H
	DD	$LN14@charSetToU
	DD	-820					; fffffcccH
	DD	4
	DD	$LN15@charSetToU
$LN15@charSetToU:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	67					; 00000043H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
$LN14@charSetToU:
	DB	99					; 00000063H
	DB	115					; 00000073H
	DB	0
$LN13@charSetToU:
	DB	117					; 00000075H
	DB	115					; 00000073H
	DB	0
?charSetToUSet@@YAXQAIPBUUSetAdder@@@Z ENDP		; charSetToUSet
_TEXT	ENDS
PUBLIC	??_C@_0DM@PCGHHPJO@uchar_swapNames?$CI?$CJ?3?5unknown?5type?5@ ; `string'
PUBLIC	??_C@_0DP@IDMBALCM@uchar_swapNames?$CIprefix?5string?5of@ ; `string'
PUBLIC	??_C@_0FI@CFKKDCBF@uchar_swapNames?$CI?$CJ?3?5too?5few?5bytes@ ; `string'
PUBLIC	??_C@_0CH@NFCKKPEM@uchar_swapNames?$CItoken?5strings?$CJ?5f@ ; `string'
PUBLIC	??_C@_0CN@LEJEMODI@out?5of?5memory?5swapping?5?$CFu?5unames@ ; `string'
PUBLIC	??_C@_0ED@JIFGADLB@uchar_swapNames?$CI?$CJ?3?5too?5few?5bytes@ ; `string'
PUBLIC	??_C@_0GK@HIJOEGLO@uchar_swapNames?$CI?$CJ?3?5data?5format?5?$CF@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	_uchar_swapNames_56
EXTRN	_strlen:PROC
EXTRN	_udata_swapInvStringBlock_56:PROC
EXTRN	_udata_readInt16_56:PROC
EXTRN	_memcpy:PROC
EXTRN	_uprv_checkValidMemory:PROC
EXTRN	_udata_printError_56:PROC
EXTRN	_udata_swapDataHeader_56:PROC
;	COMDAT ??_C@_0DM@PCGHHPJO@uchar_swapNames?$CI?$CJ?3?5unknown?5type?5@
CONST	SEGMENT
??_C@_0DM@PCGHHPJO@uchar_swapNames?$CI?$CJ?3?5unknown?5type?5@ DB 'uchar_'
	DB	'swapNames(): unknown type %u of algorithmic range %u', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DP@IDMBALCM@uchar_swapNames?$CIprefix?5string?5of@
CONST	SEGMENT
??_C@_0DP@IDMBALCM@uchar_swapNames?$CIprefix?5string?5of@ DB 'uchar_swapN'
	DB	'ames(prefix string of algorithmic range %u) failed', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0FI@CFKKDCBF@uchar_swapNames?$CI?$CJ?3?5too?5few?5bytes@
CONST	SEGMENT
??_C@_0FI@CFKKDCBF@uchar_swapNames?$CI?$CJ?3?5too?5few?5bytes@ DB 'uchar_'
	DB	'swapNames(): too few bytes (%d after header) for unames.icu a'
	DB	'lgorithmic range %u', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@NFCKKPEM@uchar_swapNames?$CItoken?5strings?$CJ?5f@
CONST	SEGMENT
??_C@_0CH@NFCKKPEM@uchar_swapNames?$CItoken?5strings?$CJ?5f@ DB 'uchar_sw'
	DB	'apNames(token strings) failed', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@LEJEMODI@out?5of?5memory?5swapping?5?$CFu?5unames@
CONST	SEGMENT
??_C@_0CN@LEJEMODI@out?5of?5memory?5swapping?5?$CFu?5unames@ DB 'out of m'
	DB	'emory swapping %u unames.icu tokens', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0ED@JIFGADLB@uchar_swapNames?$CI?$CJ?3?5too?5few?5bytes@
CONST	SEGMENT
??_C@_0ED@JIFGADLB@uchar_swapNames?$CI?$CJ?3?5too?5few?5bytes@ DB 'uchar_'
	DB	'swapNames(): too few bytes (%d after header) for unames.icu', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0GK@HIJOEGLO@uchar_swapNames?$CI?$CJ?3?5data?5format?5?$CF@
CONST	SEGMENT
??_C@_0GK@HIJOEGLO@uchar_swapNames?$CI?$CJ?3?5data?5format?5?$CF@ DB 'uch'
	DB	'ar_swapNames(): data format %02x.%02x.%02x.%02x (format versi'
	DB	'on %02x) is not recognized as unames.icu', 0aH, 00H ; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT _uchar_swapNames_56
_TEXT	SEGMENT
tv452 = -2188						; size = 4
tv245 = -2188						; size = 4
_factorsCount$45275 = -1988				; size = 4
_c$45246 = -1973					; size = 1
_outStrings$45245 = -1964				; size = 4
_nextInStrings$45244 = -1952				; size = 4
_inStrings$45243 = -1940				; size = 4
_lengths$45242 = -1928					; size = 66
_offsets$45241 = -1852					; size = 66
_trailMap$45209 = -1776					; size = 256
_map$45208 = -1512					; size = 256
_tokenCount$45207 = -1248				; size = 2
_tokens$45206 = -1236					; size = 1024
_temp$45205 = -204					; size = 4
_q$45204 = -192						; size = 4
_p$45203 = -180						; size = 4
_outRange$ = -168					; size = 4
_inRange$ = -156					; size = 4
_stringsCount$ = -144					; size = 4
_count$ = -132						; size = 4
_i$ = -120						; size = 4
_offset$ = -108						; size = 4
_algNamesOffset$ = -96					; size = 4
_groupStringOffset$ = -84				; size = 4
_groupsOffset$ = -72					; size = 4
_tokenStringOffset$ = -60				; size = 4
_outBytes$ = -48					; size = 4
_inBytes$ = -36						; size = 4
_headerSize$ = -24					; size = 4
_pInfo$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_ds$ = 8						; size = 4
_inData$ = 12						; size = 4
_length$ = 16						; size = 4
_outData$ = 20						; size = 4
_pErrorCode$ = 24					; size = 4
_uchar_swapNames_56 PROC				; COMDAT
; Line 1829
	push	ebp
	mov	ebp, esp
	sub	esp, 2188				; 0000088cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-2188]
	mov	ecx, 547				; 00000223H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 1843
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _outData$[ebp]
	push	ecx
	mov	edx, DWORD PTR _length$[ebp]
	push	edx
	mov	eax, DWORD PTR _inData$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ds$[ebp]
	push	ecx
	call	_udata_swapDataHeader_56
	add	esp, 20					; 00000014H
	mov	DWORD PTR _headerSize$[ebp], eax
; Line 1844
	cmp	DWORD PTR _pErrorCode$[ebp], 0
	je	SHORT $LN49@uchar_swap
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN50@uchar_swap
$LN49@uchar_swap:
; Line 1845
	xor	eax, eax
	jmp	$LN51@uchar_swap
$LN50@uchar_swap:
; Line 1849
	mov	eax, DWORD PTR _inData$[ebp]
	add	eax, 4
	mov	DWORD PTR _pInfo$[ebp], eax
; Line 1856
	mov	eax, DWORD PTR _pInfo$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	cmp	ecx, 117				; 00000075H
	jne	SHORT $LN47@uchar_swap
	mov	eax, DWORD PTR _pInfo$[ebp]
	movzx	ecx, BYTE PTR [eax+9]
	cmp	ecx, 110				; 0000006eH
	jne	SHORT $LN47@uchar_swap
	mov	eax, DWORD PTR _pInfo$[ebp]
	movzx	ecx, BYTE PTR [eax+10]
	cmp	ecx, 97					; 00000061H
	jne	SHORT $LN47@uchar_swap
	mov	eax, DWORD PTR _pInfo$[ebp]
	movzx	ecx, BYTE PTR [eax+11]
	cmp	ecx, 109				; 0000006dH
	jne	SHORT $LN47@uchar_swap
	mov	eax, DWORD PTR _pInfo$[ebp]
	movzx	ecx, BYTE PTR [eax+12]
	cmp	ecx, 1
	je	SHORT $LN48@uchar_swap
$LN47@uchar_swap:
; Line 1860
	mov	eax, DWORD PTR _pInfo$[ebp]
	movzx	ecx, BYTE PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _pInfo$[ebp]
	movzx	eax, BYTE PTR [edx+11]
	push	eax
	mov	ecx, DWORD PTR _pInfo$[ebp]
	movzx	edx, BYTE PTR [ecx+10]
	push	edx
	mov	eax, DWORD PTR _pInfo$[ebp]
	movzx	ecx, BYTE PTR [eax+9]
	push	ecx
	mov	edx, DWORD PTR _pInfo$[ebp]
	movzx	eax, BYTE PTR [edx+8]
	push	eax
	push	OFFSET ??_C@_0GK@HIJOEGLO@uchar_swapNames?$CI?$CJ?3?5data?5format?5?$CF@
	mov	ecx, DWORD PTR _ds$[ebp]
	push	ecx
	call	_udata_printError_56
	add	esp, 28					; 0000001cH
; Line 1861
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 16			; 00000010H
; Line 1862
	xor	eax, eax
	jmp	$LN51@uchar_swap
$LN48@uchar_swap:
; Line 1865
	mov	eax, DWORD PTR _inData$[ebp]
	add	eax, DWORD PTR _headerSize$[ebp]
	mov	DWORD PTR _inBytes$[ebp], eax
; Line 1866
	mov	eax, DWORD PTR _outData$[ebp]
	add	eax, DWORD PTR _headerSize$[ebp]
	mov	DWORD PTR _outBytes$[ebp], eax
; Line 1867
	cmp	DWORD PTR _length$[ebp], 0
	jge	SHORT $LN46@uchar_swap
; Line 1868
	mov	esi, esp
	mov	eax, DWORD PTR _inBytes$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _ds$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _algNamesOffset$[ebp], eax
; Line 1869
	jmp	SHORT $LN45@uchar_swap
$LN46@uchar_swap:
; Line 1870
	mov	eax, DWORD PTR _length$[ebp]
	sub	eax, DWORD PTR _headerSize$[ebp]
	mov	DWORD PTR _length$[ebp], eax
; Line 1873
	cmp	DWORD PTR _length$[ebp], 20		; 00000014H
	jl	SHORT $LN43@uchar_swap
	mov	esi, esp
	mov	eax, DWORD PTR _inBytes$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _ds$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _algNamesOffset$[ebp], eax
	mov	ecx, DWORD PTR _length$[ebp]
	cmp	ecx, DWORD PTR _algNamesOffset$[ebp]
	jae	SHORT $LN45@uchar_swap
$LN43@uchar_swap:
; Line 1875
	mov	eax, DWORD PTR _length$[ebp]
	push	eax
	push	OFFSET ??_C@_0ED@JIFGADLB@uchar_swapNames?$CI?$CJ?3?5too?5few?5bytes@
	mov	ecx, DWORD PTR _ds$[ebp]
	push	ecx
	call	_udata_printError_56
	add	esp, 12					; 0000000cH
; Line 1876
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 8
; Line 1877
	xor	eax, eax
	jmp	$LN51@uchar_swap
$LN45@uchar_swap:
; Line 1881
	cmp	DWORD PTR _length$[ebp], 0
	jge	$LN42@uchar_swap
; Line 1883
	mov	eax, DWORD PTR _algNamesOffset$[ebp]
	mov	DWORD PTR _offset$[ebp], eax
; Line 1884
	mov	eax, DWORD PTR _inBytes$[ebp]
	add	eax, DWORD PTR _offset$[ebp]
	mov	esi, esp
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _ds$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _count$[ebp], eax
; Line 1885
	mov	eax, DWORD PTR _offset$[ebp]
	add	eax, 4
	mov	DWORD PTR _offset$[ebp], eax
; Line 1887
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN41@uchar_swap
$LN40@uchar_swap:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN41@uchar_swap:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _count$[ebp]
	jae	SHORT $LN39@uchar_swap
; Line 1888
	mov	eax, DWORD PTR _inBytes$[ebp]
	add	eax, DWORD PTR _offset$[ebp]
	mov	DWORD PTR _inRange$[ebp], eax
; Line 1889
	mov	esi, esp
	mov	eax, DWORD PTR _inRange$[ebp]
	movzx	ecx, WORD PTR [eax+10]
	push	ecx
	mov	edx, DWORD PTR _ds$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	movzx	ecx, ax
	add	ecx, DWORD PTR _offset$[ebp]
	mov	DWORD PTR _offset$[ebp], ecx
; Line 1890
	jmp	SHORT $LN40@uchar_swap
$LN39@uchar_swap:
	jmp	$LN38@uchar_swap
$LN42@uchar_swap:
; Line 1902
	mov	eax, DWORD PTR _inBytes$[ebp]
	cmp	eax, DWORD PTR _outBytes$[ebp]
	je	SHORT $LN37@uchar_swap
; Line 1903
	push	1
	mov	eax, DWORD PTR _inBytes$[ebp]
	push	eax
	call	_uprv_checkValidMemory
	add	esp, 8
	mov	ecx, DWORD PTR _length$[ebp]
	push	ecx
	mov	edx, DWORD PTR _inBytes$[ebp]
	push	edx
	mov	eax, DWORD PTR _outBytes$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN37@uchar_swap:
; Line 1907
	mov	esi, esp
	mov	eax, DWORD PTR _inBytes$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _ds$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _tokenStringOffset$[ebp], eax
; Line 1908
	mov	esi, esp
	mov	eax, DWORD PTR _inBytes$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _ds$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _groupsOffset$[ebp], eax
; Line 1909
	mov	esi, esp
	mov	eax, DWORD PTR _inBytes$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _ds$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _groupStringOffset$[ebp], eax
; Line 1910
	mov	esi, esp
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _outBytes$[ebp]
	push	ecx
	push	16					; 00000010H
	mov	edx, DWORD PTR _inBytes$[ebp]
	push	edx
	mov	eax, DWORD PTR _ds$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ds$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	call	edx
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1916
	mov	eax, DWORD PTR _inBytes$[ebp]
	add	eax, 16					; 00000010H
	mov	DWORD PTR _p$45203[ebp], eax
; Line 1917
	mov	eax, DWORD PTR _outBytes$[ebp]
	add	eax, 16					; 00000010H
	mov	DWORD PTR _q$45204[ebp], eax
; Line 1920
	mov	esi, esp
	mov	eax, DWORD PTR _p$45203[ebp]
	movzx	ecx, WORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _ds$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	WORD PTR _tokenCount$45207[ebp], ax
; Line 1921
	mov	esi, esp
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _q$45204[ebp]
	push	ecx
	push	2
	mov	edx, DWORD PTR _p$45203[ebp]
	push	edx
	mov	eax, DWORD PTR _ds$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ds$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	call	edx
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1922
	mov	eax, DWORD PTR _p$45203[ebp]
	add	eax, 2
	mov	DWORD PTR _p$45203[ebp], eax
; Line 1923
	mov	eax, DWORD PTR _q$45204[ebp]
	add	eax, 2
	mov	DWORD PTR _q$45204[ebp], eax
; Line 1926
	movzx	eax, WORD PTR _tokenCount$45207[ebp]
	cmp	eax, 512				; 00000200H
	jg	SHORT $LN36@uchar_swap
; Line 1927
	movzx	eax, WORD PTR _tokenCount$45207[ebp]
	mov	DWORD PTR _count$[ebp], eax
; Line 1928
	jmp	SHORT $LN35@uchar_swap
$LN36@uchar_swap:
; Line 1929
	mov	DWORD PTR _count$[ebp], 512		; 00000200H
$LN35@uchar_swap:
; Line 1931
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN34@uchar_swap
$LN33@uchar_swap:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN34@uchar_swap:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _count$[ebp]
	jae	SHORT $LN32@uchar_swap
; Line 1932
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _p$45203[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	push	edx
	mov	eax, DWORD PTR _ds$[ebp]
	push	eax
	call	_udata_readInt16_56
	add	esp, 8
	mov	ecx, DWORD PTR _i$[ebp]
	mov	WORD PTR _tokens$45206[ebp+ecx*2], ax
; Line 1933
	jmp	SHORT $LN33@uchar_swap
$LN32@uchar_swap:
; Line 1934
	jmp	SHORT $LN31@uchar_swap
$LN30@uchar_swap:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN31@uchar_swap:
	cmp	DWORD PTR _i$[ebp], 512			; 00000200H
	jae	SHORT $LN29@uchar_swap
; Line 1935
	xor	eax, eax
	mov	ecx, DWORD PTR _i$[ebp]
	mov	WORD PTR _tokens$45206[ebp+ecx*2], ax
; Line 1936
	jmp	SHORT $LN30@uchar_swap
$LN29@uchar_swap:
; Line 1937
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	lea	ecx, DWORD PTR _map$45208[ebp]
	push	ecx
	movzx	edx, WORD PTR _tokenCount$45207[ebp]
	push	edx
	lea	eax, DWORD PTR _tokens$45206[ebp]
	push	eax
	mov	ecx, DWORD PTR _ds$[ebp]
	push	ecx
	call	?makeTokenMap@@YAXPBUUDataSwapper@@QAFGQAEPAW4UErrorCode@@@Z ; makeTokenMap
	add	esp, 20					; 00000014H
; Line 1938
	movzx	eax, WORD PTR _tokenCount$45207[ebp]
	cmp	eax, 256				; 00000100H
	jle	SHORT $LN53@uchar_swap
	movzx	ecx, WORD PTR _tokenCount$45207[ebp]
	sub	ecx, 256				; 00000100H
	mov	DWORD PTR tv245[ebp], ecx
	jmp	SHORT $LN54@uchar_swap
$LN53@uchar_swap:
	mov	DWORD PTR tv245[ebp], 0
$LN54@uchar_swap:
	mov	edx, DWORD PTR _pErrorCode$[ebp]
	push	edx
	lea	eax, DWORD PTR _trailMap$45209[ebp]
	push	eax
	movzx	ecx, WORD PTR tv245[ebp]
	push	ecx
	lea	edx, DWORD PTR _tokens$45206[ebp+512]
	push	edx
	mov	eax, DWORD PTR _ds$[ebp]
	push	eax
	call	?makeTokenMap@@YAXPBUUDataSwapper@@QAFGQAEPAW4UErrorCode@@@Z ; makeTokenMap
	add	esp, 20					; 00000014H
; Line 1939
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN28@uchar_swap
; Line 1940
	xor	eax, eax
	jmp	$LN51@uchar_swap
$LN28@uchar_swap:
; Line 1947
	movzx	eax, WORD PTR _tokenCount$45207[ebp]
	shl	eax, 1
	push	eax
	call	_uprv_malloc_56
	add	esp, 4
	mov	DWORD PTR _temp$45205[ebp], eax
; Line 1948
	cmp	DWORD PTR _temp$45205[ebp], 0
	jne	SHORT $LN27@uchar_swap
; Line 1950
	movzx	eax, WORD PTR _tokenCount$45207[ebp]
	push	eax
	push	OFFSET ??_C@_0CN@LEJEMODI@out?5of?5memory?5swapping?5?$CFu?5unames@
	mov	ecx, DWORD PTR _ds$[ebp]
	push	ecx
	call	_udata_printError_56
	add	esp, 12					; 0000000cH
; Line 1951
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 7
; Line 1952
	xor	eax, eax
	jmp	$LN51@uchar_swap
$LN27@uchar_swap:
; Line 1956
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN26@uchar_swap
$LN25@uchar_swap:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN26@uchar_swap:
	movzx	eax, WORD PTR _tokenCount$45207[ebp]
	cmp	DWORD PTR _i$[ebp], eax
	jae	SHORT $LN24@uchar_swap
	cmp	DWORD PTR _i$[ebp], 256			; 00000100H
	jae	SHORT $LN24@uchar_swap
; Line 1957
	mov	esi, esp
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	movzx	edx, BYTE PTR _map$45208[ebp+ecx]
	mov	eax, DWORD PTR _temp$45205[ebp]
	lea	ecx, DWORD PTR [eax+edx*2]
	push	ecx
	push	2
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _p$45203[ebp]
	lea	ecx, DWORD PTR [eax+edx*2]
	push	ecx
	mov	edx, DWORD PTR _ds$[ebp]
	push	edx
	mov	eax, DWORD PTR _ds$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	call	ecx
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1958
	jmp	SHORT $LN25@uchar_swap
$LN24@uchar_swap:
; Line 1961
	jmp	SHORT $LN23@uchar_swap
$LN22@uchar_swap:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN23@uchar_swap:
	movzx	eax, WORD PTR _tokenCount$45207[ebp]
	cmp	DWORD PTR _i$[ebp], eax
	jae	SHORT $LN21@uchar_swap
; Line 1962
	mov	esi, esp
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	and	ecx, -256				; ffffff00H
	mov	edx, DWORD PTR _temp$45205[ebp]
	lea	eax, DWORD PTR [edx+ecx*2]
	mov	ecx, DWORD PTR _i$[ebp]
	and	ecx, 255				; 000000ffH
	movzx	edx, BYTE PTR _trailMap$45209[ebp+ecx]
	lea	eax, DWORD PTR [eax+edx*2]
	push	eax
	push	2
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _p$45203[ebp]
	lea	eax, DWORD PTR [edx+ecx*2]
	push	eax
	mov	ecx, DWORD PTR _ds$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ds$[ebp]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1963
	jmp	SHORT $LN22@uchar_swap
$LN21@uchar_swap:
; Line 1966
	push	1
	mov	eax, DWORD PTR _temp$45205[ebp]
	push	eax
	call	_uprv_checkValidMemory
	add	esp, 8
	movzx	ecx, WORD PTR _tokenCount$45207[ebp]
	shl	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _temp$45205[ebp]
	push	edx
	mov	eax, DWORD PTR _q$45204[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 1967
	mov	eax, DWORD PTR _temp$45205[ebp]
	push	eax
	call	_uprv_free_56
	add	esp, 4
; Line 1974
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _outBytes$[ebp]
	add	ecx, DWORD PTR _tokenStringOffset$[ebp]
	push	ecx
	mov	edx, DWORD PTR _groupsOffset$[ebp]
	sub	edx, DWORD PTR _tokenStringOffset$[ebp]
	push	edx
	mov	eax, DWORD PTR _inBytes$[ebp]
	add	eax, DWORD PTR _tokenStringOffset$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ds$[ebp]
	push	ecx
	call	_udata_swapInvStringBlock_56
	add	esp, 20					; 00000014H
; Line 1975
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN20@uchar_swap
; Line 1976
	push	OFFSET ??_C@_0CH@NFCKKPEM@uchar_swapNames?$CItoken?5strings?$CJ?5f@
	mov	eax, DWORD PTR _ds$[ebp]
	push	eax
	call	_udata_printError_56
	add	esp, 8
; Line 1977
	xor	eax, eax
	jmp	$LN51@uchar_swap
$LN20@uchar_swap:
; Line 1981
	mov	eax, DWORD PTR _inBytes$[ebp]
	add	eax, DWORD PTR _groupsOffset$[ebp]
	mov	esi, esp
	movzx	ecx, WORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _ds$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	movzx	ecx, ax
	mov	DWORD PTR _count$[ebp], ecx
; Line 1983
	mov	esi, esp
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _outBytes$[ebp]
	add	ecx, DWORD PTR _groupsOffset$[ebp]
	push	ecx
	mov	edx, DWORD PTR _count$[ebp]
	imul	edx, 3
	lea	eax, DWORD PTR [edx+edx+2]
	push	eax
	mov	ecx, DWORD PTR _inBytes$[ebp]
	add	ecx, DWORD PTR _groupsOffset$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ds$[ebp]
	push	edx
	mov	eax, DWORD PTR _ds$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	call	ecx
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1989
	mov	eax, DWORD PTR _ds$[ebp]
	movzx	ecx, BYTE PTR [eax+1]
	mov	edx, DWORD PTR _ds$[ebp]
	movzx	eax, BYTE PTR [edx+3]
	cmp	ecx, eax
	je	$LN19@uchar_swap
; Line 1997
	mov	eax, DWORD PTR _inBytes$[ebp]
	add	eax, DWORD PTR _groupStringOffset$[ebp]
	mov	DWORD PTR _inStrings$45243[ebp], eax
; Line 1998
	mov	eax, DWORD PTR _outBytes$[ebp]
	add	eax, DWORD PTR _groupStringOffset$[ebp]
	mov	DWORD PTR _outStrings$45245[ebp], eax
; Line 2000
	mov	eax, DWORD PTR _algNamesOffset$[ebp]
	sub	eax, DWORD PTR _groupStringOffset$[ebp]
	mov	DWORD PTR _stringsCount$[ebp], eax
$LN18@uchar_swap:
; Line 2003
	cmp	DWORD PTR _stringsCount$[ebp], 32	; 00000020H
	jbe	$LN19@uchar_swap
; Line 2004
	lea	eax, DWORD PTR _lengths$45242[ebp]
	push	eax
	lea	ecx, DWORD PTR _offsets$45241[ebp]
	push	ecx
	mov	edx, DWORD PTR _inStrings$45243[ebp]
	push	edx
	call	?expandGroupLengths@icu_56@@YAPBEPBEQAG1@Z ; icu_56::expandGroupLengths
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _nextInStrings$45244[ebp], eax
; Line 2007
	mov	eax, DWORD PTR _nextInStrings$45244[ebp]
	sub	eax, DWORD PTR _inStrings$45243[ebp]
	mov	ecx, DWORD PTR _stringsCount$[ebp]
	sub	ecx, eax
	mov	DWORD PTR _stringsCount$[ebp], ecx
; Line 2008
	mov	eax, DWORD PTR _nextInStrings$45244[ebp]
	sub	eax, DWORD PTR _inStrings$45243[ebp]
	add	eax, DWORD PTR _outStrings$45245[ebp]
	mov	DWORD PTR _outStrings$45245[ebp], eax
; Line 2009
	mov	eax, DWORD PTR _nextInStrings$45244[ebp]
	mov	DWORD PTR _inStrings$45243[ebp], eax
; Line 2011
	movzx	eax, WORD PTR _offsets$45241[ebp+62]
	movzx	ecx, WORD PTR _lengths$45242[ebp+62]
	add	eax, ecx
	mov	DWORD PTR _count$[ebp], eax
; Line 2012
	mov	eax, DWORD PTR _stringsCount$[ebp]
	sub	eax, DWORD PTR _count$[ebp]
	mov	DWORD PTR _stringsCount$[ebp], eax
$LN16@uchar_swap:
; Line 2015
	cmp	DWORD PTR _count$[ebp], 0
	jbe	$LN15@uchar_swap
; Line 2016
	mov	eax, DWORD PTR _inStrings$45243[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _c$45246[ebp], cl
	mov	edx, DWORD PTR _inStrings$45243[ebp]
	add	edx, 1
	mov	DWORD PTR _inStrings$45243[ebp], edx
; Line 2017
	movzx	eax, BYTE PTR _c$45246[ebp]
	mov	ecx, DWORD PTR _outStrings$45245[ebp]
	mov	dl, BYTE PTR _map$45208[ebp+eax]
	mov	BYTE PTR [ecx], dl
	mov	eax, DWORD PTR _outStrings$45245[ebp]
	add	eax, 1
	mov	DWORD PTR _outStrings$45245[ebp], eax
; Line 2018
	movzx	eax, BYTE PTR _c$45246[ebp]
	movsx	ecx, WORD PTR _tokens$45206[ebp+eax*2]
	cmp	ecx, -2					; fffffffeH
	je	SHORT $LN14@uchar_swap
; Line 2019
	mov	eax, DWORD PTR _count$[ebp]
	sub	eax, 1
	mov	DWORD PTR _count$[ebp], eax
; Line 2020
	jmp	SHORT $LN13@uchar_swap
$LN14@uchar_swap:
; Line 2022
	mov	eax, DWORD PTR _inStrings$45243[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _outStrings$45245[ebp]
	mov	al, BYTE PTR _trailMap$45209[ebp+ecx]
	mov	BYTE PTR [edx], al
	mov	ecx, DWORD PTR _outStrings$45245[ebp]
	add	ecx, 1
	mov	DWORD PTR _outStrings$45245[ebp], ecx
	mov	edx, DWORD PTR _inStrings$45243[ebp]
	add	edx, 1
	mov	DWORD PTR _inStrings$45243[ebp], edx
; Line 2023
	mov	eax, DWORD PTR _count$[ebp]
	sub	eax, 2
	mov	DWORD PTR _count$[ebp], eax
$LN13@uchar_swap:
; Line 2025
	jmp	$LN16@uchar_swap
$LN15@uchar_swap:
; Line 2026
	jmp	$LN18@uchar_swap
$LN19@uchar_swap:
; Line 2030
	mov	eax, DWORD PTR _algNamesOffset$[ebp]
	mov	DWORD PTR _offset$[ebp], eax
; Line 2031
	mov	eax, DWORD PTR _inBytes$[ebp]
	add	eax, DWORD PTR _offset$[ebp]
	mov	esi, esp
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _ds$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _count$[ebp], eax
; Line 2032
	mov	esi, esp
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _outBytes$[ebp]
	add	ecx, DWORD PTR _offset$[ebp]
	push	ecx
	push	4
	mov	edx, DWORD PTR _inBytes$[ebp]
	add	edx, DWORD PTR _offset$[ebp]
	push	edx
	mov	eax, DWORD PTR _ds$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ds$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	call	edx
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2033
	mov	eax, DWORD PTR _offset$[ebp]
	add	eax, 4
	mov	DWORD PTR _offset$[ebp], eax
; Line 2035
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN12@uchar_swap
$LN11@uchar_swap:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN12@uchar_swap:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _count$[ebp]
	jae	$LN38@uchar_swap
; Line 2036
	mov	eax, DWORD PTR _offset$[ebp]
	cmp	eax, DWORD PTR _length$[ebp]
	jbe	SHORT $LN9@uchar_swap
; Line 2038
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _length$[ebp]
	push	ecx
	push	OFFSET ??_C@_0FI@CFKKDCBF@uchar_swapNames?$CI?$CJ?3?5too?5few?5bytes@
	mov	edx, DWORD PTR _ds$[ebp]
	push	edx
	call	_udata_printError_56
	add	esp, 16					; 00000010H
; Line 2039
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 8
; Line 2040
	xor	eax, eax
	jmp	$LN51@uchar_swap
$LN9@uchar_swap:
; Line 2043
	mov	eax, DWORD PTR _inBytes$[ebp]
	add	eax, DWORD PTR _offset$[ebp]
	mov	DWORD PTR _inRange$[ebp], eax
; Line 2044
	mov	eax, DWORD PTR _outBytes$[ebp]
	add	eax, DWORD PTR _offset$[ebp]
	mov	DWORD PTR _outRange$[ebp], eax
; Line 2045
	mov	esi, esp
	mov	eax, DWORD PTR _inRange$[ebp]
	movzx	ecx, WORD PTR [eax+10]
	push	ecx
	mov	edx, DWORD PTR _ds$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	movzx	ecx, ax
	add	ecx, DWORD PTR _offset$[ebp]
	mov	DWORD PTR _offset$[ebp], ecx
; Line 2047
	mov	esi, esp
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _outRange$[ebp]
	push	ecx
	push	8
	mov	edx, DWORD PTR _inRange$[ebp]
	push	edx
	mov	eax, DWORD PTR _ds$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ds$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	call	edx
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2048
	mov	esi, esp
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _outRange$[ebp]
	add	ecx, 10					; 0000000aH
	push	ecx
	push	2
	mov	edx, DWORD PTR _inRange$[ebp]
	add	edx, 10					; 0000000aH
	push	edx
	mov	eax, DWORD PTR _ds$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ds$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	call	edx
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2049
	mov	eax, DWORD PTR _inRange$[ebp]
	mov	cl, BYTE PTR [eax+8]
	mov	BYTE PTR tv452[ebp], cl
	cmp	BYTE PTR tv452[ebp], 0
	je	SHORT $LN6@uchar_swap
	cmp	BYTE PTR tv452[ebp], 1
	je	SHORT $LN4@uchar_swap
	jmp	$LN1@uchar_swap
$LN6@uchar_swap:
; Line 2053
	mov	esi, esp
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _outRange$[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	mov	edx, DWORD PTR _inRange$[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	call	_strlen
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR _inRange$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _ds$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ds$[ebp]
	mov	eax, DWORD PTR [edx+36]
	call	eax
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2054
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN5@uchar_swap
; Line 2056
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	push	OFFSET ??_C@_0DP@IDMBALCM@uchar_swapNames?$CIprefix?5string?5of@
	mov	ecx, DWORD PTR _ds$[ebp]
	push	ecx
	call	_udata_printError_56
	add	esp, 12					; 0000000cH
; Line 2057
	xor	eax, eax
	jmp	$LN51@uchar_swap
$LN5@uchar_swap:
; Line 2059
	jmp	$LN7@uchar_swap
$LN4@uchar_swap:
; Line 2065
	mov	eax, DWORD PTR _inRange$[ebp]
	movzx	ecx, BYTE PTR [eax+9]
	mov	DWORD PTR _factorsCount$45275[ebp], ecx
; Line 2066
	mov	eax, DWORD PTR _inRange$[ebp]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR _p$45203[ebp], eax
; Line 2067
	mov	eax, DWORD PTR _outRange$[ebp]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR _q$45204[ebp], eax
; Line 2068
	mov	esi, esp
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _q$45204[ebp]
	push	ecx
	mov	edx, DWORD PTR _factorsCount$45275[ebp]
	shl	edx, 1
	push	edx
	mov	eax, DWORD PTR _p$45203[ebp]
	push	eax
	mov	ecx, DWORD PTR _ds$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ds$[ebp]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2071
	mov	eax, DWORD PTR _factorsCount$45275[ebp]
	mov	ecx, DWORD PTR _p$45203[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR _p$45203[ebp], edx
; Line 2072
	mov	eax, DWORD PTR _factorsCount$45275[ebp]
	mov	ecx, DWORD PTR _q$45204[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR _q$45204[ebp], edx
; Line 2073
	mov	eax, DWORD PTR _inBytes$[ebp]
	add	eax, DWORD PTR _offset$[ebp]
	sub	eax, DWORD PTR _p$45203[ebp]
	mov	DWORD PTR _stringsCount$[ebp], eax
$LN3@uchar_swap:
; Line 2074
	cmp	DWORD PTR _stringsCount$[ebp], 0
	jbe	SHORT $LN2@uchar_swap
	mov	eax, DWORD PTR _p$45203[ebp]
	add	eax, DWORD PTR _stringsCount$[ebp]
	movzx	ecx, BYTE PTR [eax-1]
	test	ecx, ecx
	je	SHORT $LN2@uchar_swap
; Line 2075
	mov	eax, DWORD PTR _stringsCount$[ebp]
	sub	eax, 1
	mov	DWORD PTR _stringsCount$[ebp], eax
; Line 2076
	jmp	SHORT $LN3@uchar_swap
$LN2@uchar_swap:
; Line 2077
	mov	esi, esp
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _q$45204[ebp]
	push	ecx
	mov	edx, DWORD PTR _stringsCount$[ebp]
	push	edx
	mov	eax, DWORD PTR _p$45203[ebp]
	push	eax
	mov	ecx, DWORD PTR _ds$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ds$[ebp]
	mov	eax, DWORD PTR [edx+36]
	call	eax
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2079
	jmp	SHORT $LN7@uchar_swap
$LN1@uchar_swap:
; Line 2082
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _inRange$[ebp]
	movzx	edx, BYTE PTR [ecx+8]
	push	edx
	push	OFFSET ??_C@_0DM@PCGHHPJO@uchar_swapNames?$CI?$CJ?3?5unknown?5type?5@
	mov	eax, DWORD PTR _ds$[ebp]
	push	eax
	call	_udata_printError_56
	add	esp, 16					; 00000010H
; Line 2083
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 16			; 00000010H
; Line 2084
	xor	eax, eax
	jmp	SHORT $LN51@uchar_swap
$LN7@uchar_swap:
; Line 2086
	jmp	$LN11@uchar_swap
$LN38@uchar_swap:
; Line 2089
	mov	eax, DWORD PTR _headerSize$[ebp]
	add	eax, DWORD PTR _offset$[ebp]
$LN51@uchar_swap:
; Line 2090
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN61@uchar_swap
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 2188				; 0000088cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN61@uchar_swap:
	DD	5
	DD	$LN60@uchar_swap
$LN60@uchar_swap:
	DD	-1236					; fffffb2cH
	DD	1024					; 00000400H
	DD	$LN55@uchar_swap
	DD	-1512					; fffffa18H
	DD	256					; 00000100H
	DD	$LN56@uchar_swap
	DD	-1776					; fffff910H
	DD	256					; 00000100H
	DD	$LN57@uchar_swap
	DD	-1852					; fffff8c4H
	DD	66					; 00000042H
	DD	$LN58@uchar_swap
	DD	-1928					; fffff878H
	DD	66					; 00000042H
	DD	$LN59@uchar_swap
$LN59@uchar_swap:
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	115					; 00000073H
	DB	0
$LN58@uchar_swap:
	DB	111					; 0000006fH
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	115					; 00000073H
	DB	0
$LN57@uchar_swap:
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	105					; 00000069H
	DB	108					; 0000006cH
	DB	77					; 0000004dH
	DB	97					; 00000061H
	DB	112					; 00000070H
	DB	0
$LN56@uchar_swap:
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	112					; 00000070H
	DB	0
$LN55@uchar_swap:
	DB	116					; 00000074H
	DB	111					; 0000006fH
	DB	107					; 0000006bH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	115					; 00000073H
	DB	0
_uchar_swapNames_56 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0FF@OBBGNFNI@unames?1makeTokenMap?$CI?$CJ?5finds?5vari@ ; `string'
PUBLIC	__$ArrayPad$
;	COMDAT ??_C@_0FF@OBBGNFNI@unames?1makeTokenMap?$CI?$CJ?5finds?5vari@
CONST	SEGMENT
??_C@_0FF@OBBGNFNI@unames?1makeTokenMap?$CI?$CJ?5finds?5vari@ DB 'unames/'
	DB	'makeTokenMap() finds variant character 0x%02x used (input cha'
	DB	'rset family %d)', 0aH, 00H			; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?makeTokenMap@@YAXPBUUDataSwapper@@QAFGQAEPAW4UErrorCode@@@Z
_TEXT	SEGMENT
_c2$ = -309						; size = 1
_c1$ = -297						; size = 1
_j$ = -288						; size = 2
_i$ = -276						; size = 2
_usedOutChar$ = -264					; size = 256
__$ArrayPad$ = -4					; size = 4
_ds$ = 8						; size = 4
_tokens$ = 12						; size = 4
_tokenCount$ = 16					; size = 2
_map$ = 20						; size = 4
_pErrorCode$ = 24					; size = 4
?makeTokenMap@@YAXPBUUDataSwapper@@QAFGQAEPAW4UErrorCode@@@Z PROC ; makeTokenMap, COMDAT
; Line 1767
	push	ebp
	mov	ebp, esp
	sub	esp, 508				; 000001fcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-508]
	mov	ecx, 127				; 0000007fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 1772
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN18@makeTokenM
; Line 1773
	jmp	$LN19@makeTokenM
$LN18@makeTokenM:
; Line 1776
	mov	eax, DWORD PTR _ds$[ebp]
	movzx	ecx, BYTE PTR [eax+1]
	mov	edx, DWORD PTR _ds$[ebp]
	movzx	eax, BYTE PTR [edx+3]
	cmp	ecx, eax
	jne	SHORT $LN17@makeTokenM
; Line 1778
	xor	eax, eax
	mov	WORD PTR _i$[ebp], ax
	jmp	SHORT $LN16@makeTokenM
$LN15@makeTokenM:
	mov	ax, WORD PTR _i$[ebp]
	add	ax, 1
	mov	WORD PTR _i$[ebp], ax
$LN16@makeTokenM:
	movzx	eax, WORD PTR _i$[ebp]
	cmp	eax, 256				; 00000100H
	jge	SHORT $LN14@makeTokenM
; Line 1779
	movzx	eax, WORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _map$[ebp]
	mov	dl, BYTE PTR _i$[ebp]
	mov	BYTE PTR [ecx+eax], dl
; Line 1780
	jmp	SHORT $LN15@makeTokenM
$LN14@makeTokenM:
	jmp	$LN19@makeTokenM
$LN17@makeTokenM:
; Line 1782
	push	256					; 00000100H
	push	0
	mov	eax, DWORD PTR _map$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
; Line 1783
	push	256					; 00000100H
	push	0
	lea	eax, DWORD PTR _usedOutChar$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
; Line 1785
	movzx	eax, WORD PTR _tokenCount$[ebp]
	cmp	eax, 256				; 00000100H
	jle	SHORT $LN12@makeTokenM
; Line 1786
	mov	eax, 256				; 00000100H
	mov	WORD PTR _tokenCount$[ebp], ax
$LN12@makeTokenM:
; Line 1790
	mov	eax, 1
	mov	WORD PTR _i$[ebp], ax
	jmp	SHORT $LN11@makeTokenM
$LN10@makeTokenM:
	mov	ax, WORD PTR _i$[ebp]
	add	ax, 1
	mov	WORD PTR _i$[ebp], ax
$LN11@makeTokenM:
	movzx	eax, WORD PTR _i$[ebp]
	movzx	ecx, WORD PTR _tokenCount$[ebp]
	cmp	eax, ecx
	jge	$LN9@makeTokenM
; Line 1791
	movzx	eax, WORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _tokens$[ebp]
	movsx	edx, WORD PTR [ecx+eax*2]
	cmp	edx, -1
	jne	$LN8@makeTokenM
; Line 1793
	mov	al, BYTE PTR _i$[ebp]
	mov	BYTE PTR _c1$[ebp], al
; Line 1794
	mov	esi, esp
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	lea	ecx, DWORD PTR _c2$[ebp]
	push	ecx
	push	1
	lea	edx, DWORD PTR _c1$[ebp]
	push	edx
	mov	eax, DWORD PTR _ds$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ds$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	call	edx
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1795
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN7@makeTokenM
; Line 1797
	mov	eax, DWORD PTR _ds$[ebp]
	movzx	ecx, BYTE PTR [eax+1]
	push	ecx
	movzx	edx, WORD PTR _i$[ebp]
	push	edx
	push	OFFSET ??_C@_0FF@OBBGNFNI@unames?1makeTokenMap?$CI?$CJ?5finds?5vari@
	mov	eax, DWORD PTR _ds$[ebp]
	push	eax
	call	_udata_printError_56
	add	esp, 16					; 00000010H
; Line 1798
	jmp	$LN19@makeTokenM
$LN7@makeTokenM:
; Line 1802
	movzx	eax, BYTE PTR _c1$[ebp]
	mov	ecx, DWORD PTR _map$[ebp]
	mov	dl, BYTE PTR _c2$[ebp]
	mov	BYTE PTR [ecx+eax], dl
; Line 1803
	movzx	eax, BYTE PTR _c2$[ebp]
	mov	BYTE PTR _usedOutChar$[ebp+eax], 1
$LN8@makeTokenM:
; Line 1805
	jmp	$LN10@makeTokenM
$LN9@makeTokenM:
; Line 1808
	mov	eax, 1
	mov	WORD PTR _j$[ebp], ax
	mov	cx, WORD PTR _j$[ebp]
	mov	WORD PTR _i$[ebp], cx
	jmp	SHORT $LN6@makeTokenM
$LN5@makeTokenM:
	mov	ax, WORD PTR _i$[ebp]
	add	ax, 1
	mov	WORD PTR _i$[ebp], ax
$LN6@makeTokenM:
	movzx	eax, WORD PTR _i$[ebp]
	movzx	ecx, WORD PTR _tokenCount$[ebp]
	cmp	eax, ecx
	jge	SHORT $LN19@makeTokenM
; Line 1810
	movzx	eax, WORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _map$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	test	edx, edx
	jne	SHORT $LN3@makeTokenM
$LN2@makeTokenM:
; Line 1812
	movzx	eax, WORD PTR _j$[ebp]
	movsx	ecx, BYTE PTR _usedOutChar$[ebp+eax]
	test	ecx, ecx
	je	SHORT $LN1@makeTokenM
; Line 1813
	mov	ax, WORD PTR _j$[ebp]
	add	ax, 1
	mov	WORD PTR _j$[ebp], ax
; Line 1814
	jmp	SHORT $LN2@makeTokenM
$LN1@makeTokenM:
; Line 1815
	movzx	eax, WORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _map$[ebp]
	mov	dl, BYTE PTR _j$[ebp]
	mov	BYTE PTR [ecx+eax], dl
	mov	ax, WORD PTR _j$[ebp]
	add	ax, 1
	mov	WORD PTR _j$[ebp], ax
$LN3@makeTokenM:
; Line 1817
	jmp	$LN5@makeTokenM
$LN19@makeTokenM:
; Line 1824
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN25@makeTokenM
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 508				; 000001fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN25@makeTokenM:
	DD	3
	DD	$LN24@makeTokenM
$LN24@makeTokenM:
	DD	-264					; fffffef8H
	DD	256					; 00000100H
	DD	$LN21@makeTokenM
	DD	-297					; fffffed7H
	DD	1
	DD	$LN22@makeTokenM
	DD	-309					; fffffecbH
	DD	1
	DD	$LN23@makeTokenM
$LN23@makeTokenM:
	DB	99					; 00000063H
	DB	50					; 00000032H
	DB	0
$LN22@makeTokenM:
	DB	99					; 00000063H
	DB	49					; 00000031H
	DB	0
$LN21@makeTokenM:
	DB	117					; 00000075H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	79					; 0000004fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	67					; 00000043H
	DB	104					; 00000068H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	0
?makeTokenMap@@YAXPBUUDataSwapper@@QAFGQAEPAW4UErrorCode@@@Z ENDP ; makeTokenMap
_TEXT	ENDS
END
