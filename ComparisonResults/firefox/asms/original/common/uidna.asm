; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\mozilla\intl\icu\source\common\uidna.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
_ACE_PREFIX DW	078H
	DW	06eH
	DW	02dH
	DW	02dH
CONST	ENDS
PUBLIC	??2@YAPAXI@Z					; operator new
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File d:\mozilla\intl\icu\source\common\unicode\utypes.h
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT ??2@YAPAXI@Z
_TEXT	SEGMENT
_q$ = -8						; size = 4
___formal$ = 8						; size = 4
??2@YAPAXI@Z PROC					; operator new, COMDAT
; Line 411
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 412
	mov	DWORD PTR _q$[ebp], 0
; Line 413
	mov	eax, DWORD PTR _q$[ebp]
	mov	BYTE PTR [eax], 5
; Line 414
	mov	eax, DWORD PTR _q$[ebp]
; Line 415
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??2@YAPAXI@Z ENDP					; operator new
_TEXT	ENDS
PUBLIC	??3@YAXPAX@Z					; operator delete
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??3@YAXPAX@Z
_TEXT	SEGMENT
_q$ = -8						; size = 4
___formal$ = 8						; size = 4
??3@YAXPAX@Z PROC					; operator delete, COMDAT
; Line 439
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 440
	mov	DWORD PTR _q$[ebp], 0
; Line 441
	mov	eax, DWORD PTR _q$[ebp]
	mov	BYTE PTR [eax], 5
; Line 442
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??3@YAXPAX@Z ENDP					; operator delete
_TEXT	ENDS
PUBLIC	_uidna_toASCII_56
EXTRN	_usprep_close_56:PROC
EXTRN	_usprep_openByType_56:PROC
EXTRN	__RTC_CheckEsp:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _uidna_toASCII_56
_TEXT	SEGMENT
_retLen$ = -20						; size = 4
_nameprep$ = -8						; size = 4
_src$ = 8						; size = 4
_srcLength$ = 12					; size = 4
_dest$ = 16						; size = 4
_destCapacity$ = 20					; size = 4
_options$ = 24						; size = 4
_parseError$ = 28					; size = 4
_status$ = 32						; size = 4
_uidna_toASCII_56 PROC					; COMDAT
; File d:\mozilla\intl\icu\source\common\uidna.cpp
; Line 614
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 616
	cmp	DWORD PTR _status$[ebp], 0
	je	SHORT $LN4@uidna_toAS
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN5@uidna_toAS
$LN4@uidna_toAS:
; Line 617
	xor	eax, eax
	jmp	$LN6@uidna_toAS
$LN5@uidna_toAS:
; Line 619
	cmp	DWORD PTR _src$[ebp], 0
	je	SHORT $LN2@uidna_toAS
	cmp	DWORD PTR _srcLength$[ebp], -1
	jl	SHORT $LN2@uidna_toAS
	cmp	DWORD PTR _destCapacity$[ebp], 0
	jl	SHORT $LN2@uidna_toAS
	cmp	DWORD PTR _dest$[ebp], 0
	jne	SHORT $LN3@uidna_toAS
	cmp	DWORD PTR _destCapacity$[ebp], 0
	jle	SHORT $LN3@uidna_toAS
$LN2@uidna_toAS:
; Line 620
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 1
; Line 621
	xor	eax, eax
	jmp	SHORT $LN6@uidna_toAS
$LN3@uidna_toAS:
; Line 624
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	push	0
	call	_usprep_openByType_56
	add	esp, 8
	mov	DWORD PTR _nameprep$[ebp], eax
; Line 626
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN1@uidna_toAS
; Line 627
	or	eax, -1
	jmp	SHORT $LN6@uidna_toAS
$LN1@uidna_toAS:
; Line 630
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _parseError$[ebp]
	push	ecx
	mov	edx, DWORD PTR _nameprep$[ebp]
	push	edx
	mov	eax, DWORD PTR _options$[ebp]
	push	eax
	mov	ecx, DWORD PTR _destCapacity$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dest$[ebp]
	push	edx
	mov	eax, DWORD PTR _srcLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _src$[ebp]
	push	ecx
	call	?_internal_toASCII@@YAHPB_WHPA_WHHPAUUStringPrepProfile@@PAUUParseError@@PAW4UErrorCode@@@Z ; _internal_toASCII
	add	esp, 32					; 00000020H
	mov	DWORD PTR _retLen$[ebp], eax
; Line 633
	mov	eax, DWORD PTR _nameprep$[ebp]
	push	eax
	call	_usprep_close_56
	add	esp, 4
; Line 635
	mov	eax, DWORD PTR _retLen$[ebp]
$LN6@uidna_toAS:
; Line 636
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_uidna_toASCII_56 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?U_FAILURE@@YACW4UErrorCode@@@Z
_TEXT	SEGMENT
_code$ = 8						; size = 4
?U_FAILURE@@YACW4UErrorCode@@@Z PROC			; U_FAILURE, COMDAT
; File d:\mozilla\intl\icu\source\common\unicode\utypes.h
; Line 705
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	cmp	DWORD PTR _code$[ebp], 0
	setg	al
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?U_FAILURE@@YACW4UErrorCode@@@Z ENDP			; U_FAILURE
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_u_terminateUChars_56:PROC
EXTRN	_memcpy:PROC
EXTRN	_u_strToPunycode_56:PROC
EXTRN	__imp__memmove:PROC
EXTRN	_uprv_checkValidMemory:PROC
EXTRN	_uprv_syntaxError_56:PROC
EXTRN	_uprv_free_56:PROC
EXTRN	_usprep_prepare_56:PROC
EXTRN	_uprv_malloc_56:PROC
EXTRN	_u_strlen_56:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?_internal_toASCII@@YAHPB_WHPA_WHHPAUUStringPrepProfile@@PAUUParseError@@PAW4UErrorCode@@@Z
_TEXT	SEGMENT
tv192 = -784						; size = 4
_failPos$ = -584					; size = 4
_useSTD3ASCIIRules$ = -569				; size = 1
_j$ = -560						; size = 4
_srcIsLDH$ = -545					; size = 1
_srcIsASCII$ = -533					; size = 1
_caseFlags$ = -524					; size = 4
_namePrepOptions$ = -512				; size = 4
_reqLength$ = -500					; size = 4
_b2Capacity$ = -488					; size = 4
_b1Capacity$ = -476					; size = 4
_b2Len$ = -464						; size = 4
_b1Len$ = -452						; size = 4
_b2$ = -440						; size = 4
_b1$ = -428						; size = 4
_b2Stack$ = -416					; size = 200
_b1Stack$ = -208					; size = 200
__$ArrayPad$ = -4					; size = 4
_src$ = 8						; size = 4
_srcLength$ = 12					; size = 4
_dest$ = 16						; size = 4
_destCapacity$ = 20					; size = 4
_options$ = 24						; size = 4
_nameprep$ = 28						; size = 4
_parseError$ = 32					; size = 4
_status$ = 36						; size = 4
?_internal_toASCII@@YAHPB_WHPA_WHHPAUUStringPrepProfile@@PAUUParseError@@PAW4UErrorCode@@@Z PROC ; _internal_toASCII, COMDAT
; File d:\mozilla\intl\icu\source\common\uidna.cpp
; Line 200
	push	ebp
	mov	ebp, esp
	sub	esp, 784				; 00000310H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-784]
	mov	ecx, 196				; 000000c4H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 205
	lea	eax, DWORD PTR _b1Stack$[ebp]
	mov	DWORD PTR _b1$[ebp], eax
	lea	eax, DWORD PTR _b2Stack$[ebp]
	mov	DWORD PTR _b2$[ebp], eax
; Line 206
	mov	DWORD PTR _b1Len$[ebp], 0
; Line 207
	mov	DWORD PTR _b1Capacity$[ebp], 100	; 00000064H
; Line 208
	mov	DWORD PTR _b2Capacity$[ebp], 100	; 00000064H
; Line 209
	mov	DWORD PTR _reqLength$[ebp], 0
; Line 211
	mov	eax, DWORD PTR _options$[ebp]
	and	eax, 1
	neg	eax
	sbb	eax, eax
	neg	eax
	mov	DWORD PTR _namePrepOptions$[ebp], eax
; Line 212
	mov	DWORD PTR _caseFlags$[ebp], 0
; Line 215
	mov	BYTE PTR _srcIsASCII$[ebp], 1
; Line 217
	mov	BYTE PTR _srcIsLDH$[ebp], 1
; Line 219
	mov	DWORD PTR _j$[ebp], 0
; Line 222
	mov	eax, DWORD PTR _options$[ebp]
	and	eax, 2
	setne	cl
	mov	BYTE PTR _useSTD3ASCIIRules$[ebp], cl
; Line 224
	mov	DWORD PTR _failPos$[ebp], -1
; Line 226
	cmp	DWORD PTR _srcLength$[ebp], -1
	jne	SHORT $LN49@internal_t
; Line 227
	mov	eax, DWORD PTR _src$[ebp]
	push	eax
	call	_u_strlen_56
	add	esp, 4
	mov	DWORD PTR _srcLength$[ebp], eax
$LN49@internal_t:
; Line 230
	mov	eax, DWORD PTR _srcLength$[ebp]
	cmp	eax, DWORD PTR _b1Capacity$[ebp]
	jle	SHORT $LN48@internal_t
; Line 231
	mov	eax, DWORD PTR _srcLength$[ebp]
	shl	eax, 1
	push	eax
	call	_uprv_malloc_56
	add	esp, 4
	mov	DWORD PTR _b1$[ebp], eax
; Line 232
	cmp	DWORD PTR _b1$[ebp], 0
	jne	SHORT $LN47@internal_t
; Line 233
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 7
; Line 234
	jmp	$CLEANUP$10532
	jmp	$CLEANUP$10532
$LN47@internal_t:
; Line 236
	mov	eax, DWORD PTR _srcLength$[ebp]
	mov	DWORD PTR _b1Capacity$[ebp], eax
$LN48@internal_t:
; Line 240
	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN45@internal_t
$LN44@internal_t:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN45@internal_t:
	mov	eax, DWORD PTR _j$[ebp]
	cmp	eax, DWORD PTR _srcLength$[ebp]
	jge	SHORT $LN43@internal_t
; Line 241
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _src$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	cmp	edx, 127				; 0000007fH
	jle	SHORT $LN42@internal_t
; Line 242
	mov	BYTE PTR _srcIsASCII$[ebp], 0
$LN42@internal_t:
; Line 244
	mov	eax, DWORD PTR _b1Len$[ebp]
	mov	ecx, DWORD PTR _b1$[ebp]
	mov	edx, DWORD PTR _j$[ebp]
	mov	esi, DWORD PTR _src$[ebp]
	mov	dx, WORD PTR [esi+edx*2]
	mov	WORD PTR [ecx+eax*2], dx
	mov	eax, DWORD PTR _b1Len$[ebp]
	add	eax, 1
	mov	DWORD PTR _b1Len$[ebp], eax
; Line 245
	jmp	SHORT $LN44@internal_t
$LN43@internal_t:
; Line 248
	movsx	eax, BYTE PTR _srcIsASCII$[ebp]
	test	eax, eax
	jne	$LN41@internal_t
; Line 251
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _parseError$[ebp]
	push	ecx
	mov	edx, DWORD PTR _namePrepOptions$[ebp]
	push	edx
	mov	eax, DWORD PTR _b1Capacity$[ebp]
	push	eax
	mov	ecx, DWORD PTR _b1$[ebp]
	push	ecx
	mov	edx, DWORD PTR _srcLength$[ebp]
	push	edx
	mov	eax, DWORD PTR _src$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nameprep$[ebp]
	push	ecx
	call	_usprep_prepare_56
	add	esp, 32					; 00000020H
	mov	DWORD PTR _b1Len$[ebp], eax
; Line 253
	mov	eax, DWORD PTR _status$[ebp]
	cmp	DWORD PTR [eax], 15			; 0000000fH
	jne	$LN41@internal_t
; Line 256
	mov	eax, DWORD PTR _b1$[ebp]
	lea	ecx, DWORD PTR _b1Stack$[ebp]
	cmp	eax, ecx
	je	SHORT $LN39@internal_t
; Line 257
	mov	eax, DWORD PTR _b1$[ebp]
	push	eax
	call	_uprv_free_56
	add	esp, 4
$LN39@internal_t:
; Line 259
	mov	eax, DWORD PTR _b1Len$[ebp]
	shl	eax, 1
	push	eax
	call	_uprv_malloc_56
	add	esp, 4
	mov	DWORD PTR _b1$[ebp], eax
; Line 260
	cmp	DWORD PTR _b1$[ebp], 0
	jne	SHORT $LN38@internal_t
; Line 261
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 7
; Line 262
	jmp	$CLEANUP$10532
	jmp	$CLEANUP$10532
$LN38@internal_t:
; Line 265
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 0
; Line 267
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _parseError$[ebp]
	push	ecx
	mov	edx, DWORD PTR _namePrepOptions$[ebp]
	push	edx
	mov	eax, DWORD PTR _b1Len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _b1$[ebp]
	push	ecx
	mov	edx, DWORD PTR _srcLength$[ebp]
	push	edx
	mov	eax, DWORD PTR _src$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nameprep$[ebp]
	push	ecx
	call	_usprep_prepare_56
	add	esp, 32					; 00000020H
	mov	DWORD PTR _b1Len$[ebp], eax
$LN41@internal_t:
; Line 271
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN36@internal_t
; Line 272
	jmp	$CLEANUP$10532
	jmp	$CLEANUP$10532
$LN36@internal_t:
; Line 274
	cmp	DWORD PTR _b1Len$[ebp], 0
	jne	SHORT $LN34@internal_t
; Line 275
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 66567			; 00010407H
; Line 276
	jmp	$CLEANUP$10532
	jmp	$CLEANUP$10532
$LN34@internal_t:
; Line 280
	mov	BYTE PTR _srcIsASCII$[ebp], 1
; Line 281
	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN32@internal_t
$LN31@internal_t:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN32@internal_t:
	mov	eax, DWORD PTR _j$[ebp]
	cmp	eax, DWORD PTR _b1Len$[ebp]
	jge	SHORT $LN30@internal_t
; Line 283
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _b1$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	cmp	edx, 127				; 0000007fH
	jle	SHORT $LN29@internal_t
; Line 284
	mov	BYTE PTR _srcIsASCII$[ebp], 0
	jmp	SHORT $LN28@internal_t
$LN29@internal_t:
; Line 285
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _b1$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	push	edx
	call	?isLDHChar@@YAC_W@Z			; isLDHChar
	add	esp, 4
	movsx	eax, al
	test	eax, eax
	jne	SHORT $LN28@internal_t
; Line 286
	mov	BYTE PTR _srcIsLDH$[ebp], 0
; Line 287
	mov	eax, DWORD PTR _j$[ebp]
	mov	DWORD PTR _failPos$[ebp], eax
$LN28@internal_t:
; Line 289
	jmp	SHORT $LN31@internal_t
$LN30@internal_t:
; Line 290
	movsx	eax, BYTE PTR _useSTD3ASCIIRules$[ebp]
	cmp	eax, 1
	jne	$LN26@internal_t
; Line 298
	movsx	eax, BYTE PTR _srcIsLDH$[ebp]
	test	eax, eax
	je	SHORT $LN24@internal_t
	mov	eax, DWORD PTR _b1$[ebp]
	movzx	ecx, WORD PTR [eax]
	cmp	ecx, 45					; 0000002dH
	je	SHORT $LN24@internal_t
	mov	eax, DWORD PTR _b1Len$[ebp]
	mov	ecx, DWORD PTR _b1$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2-2]
	cmp	edx, 45					; 0000002dH
	jne	$LN26@internal_t
$LN24@internal_t:
; Line 299
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 66563			; 00010403H
; Line 302
	movsx	eax, BYTE PTR _srcIsLDH$[ebp]
	test	eax, eax
	jne	SHORT $LN23@internal_t
; Line 304
	mov	eax, DWORD PTR _parseError$[ebp]
	push	eax
	mov	ecx, DWORD PTR _b1Len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _failPos$[ebp]
	push	edx
	mov	eax, DWORD PTR _b1$[ebp]
	push	eax
	call	_uprv_syntaxError_56
	add	esp, 16					; 00000010H
	jmp	SHORT $LN22@internal_t
$LN23@internal_t:
; Line 305
	mov	eax, DWORD PTR _b1$[ebp]
	movzx	ecx, WORD PTR [eax]
	cmp	ecx, 45					; 0000002dH
	jne	SHORT $LN21@internal_t
; Line 307
	mov	eax, DWORD PTR _parseError$[ebp]
	push	eax
	mov	ecx, DWORD PTR _b1Len$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _b1$[ebp]
	push	edx
	call	_uprv_syntaxError_56
	add	esp, 16					; 00000010H
; Line 308
	jmp	SHORT $LN22@internal_t
$LN21@internal_t:
; Line 310
	cmp	DWORD PTR _b1Len$[ebp], 0
	jle	SHORT $LN52@internal_t
	mov	eax, DWORD PTR _b1Len$[ebp]
	sub	eax, 1
	mov	DWORD PTR tv192[ebp], eax
	jmp	SHORT $LN53@internal_t
$LN52@internal_t:
	mov	ecx, DWORD PTR _b1Len$[ebp]
	mov	DWORD PTR tv192[ebp], ecx
$LN53@internal_t:
	mov	edx, DWORD PTR _parseError$[ebp]
	push	edx
	mov	eax, DWORD PTR _b1Len$[ebp]
	push	eax
	mov	ecx, DWORD PTR tv192[ebp]
	push	ecx
	mov	edx, DWORD PTR _b1$[ebp]
	push	edx
	call	_uprv_syntaxError_56
	add	esp, 16					; 00000010H
$LN22@internal_t:
; Line 313
	jmp	$CLEANUP$10532
	jmp	$CLEANUP$10532
$LN26@internal_t:
; Line 317
	movsx	eax, BYTE PTR _srcIsASCII$[ebp]
	test	eax, eax
	je	SHORT $LN18@internal_t
; Line 318
	mov	eax, DWORD PTR _b1Len$[ebp]
	cmp	eax, DWORD PTR _destCapacity$[ebp]
	jg	SHORT $LN17@internal_t
; Line 319
	push	1
	mov	eax, DWORD PTR _b1$[ebp]
	push	eax
	call	_uprv_checkValidMemory
	add	esp, 8
	mov	ecx, DWORD PTR _b1Len$[ebp]
	shl	ecx, 1
	mov	esi, esp
	push	ecx
	mov	edx, DWORD PTR _b1$[ebp]
	push	edx
	mov	eax, DWORD PTR _dest$[ebp]
	push	eax
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 320
	mov	eax, DWORD PTR _b1Len$[ebp]
	mov	DWORD PTR _reqLength$[ebp], eax
; Line 321
	jmp	SHORT $LN16@internal_t
$LN17@internal_t:
; Line 322
	mov	eax, DWORD PTR _b1Len$[ebp]
	mov	DWORD PTR _reqLength$[ebp], eax
; Line 323
	jmp	$CLEANUP$10532
	jmp	$CLEANUP$10532
$LN16@internal_t:
; Line 325
	jmp	$LN14@internal_t
$LN18@internal_t:
; Line 327
	mov	eax, DWORD PTR _b1Len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _b1$[ebp]
	push	ecx
	call	?startsWithPrefix@@YACPB_WH@Z		; startsWithPrefix
	add	esp, 8
	movsx	edx, al
	test	edx, edx
	jne	$LN13@internal_t
; Line 336
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _caseFlags$[ebp]
	push	ecx
	mov	edx, DWORD PTR _b2Capacity$[ebp]
	push	edx
	mov	eax, DWORD PTR _b2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _b1Len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _b1$[ebp]
	push	edx
	call	_u_strToPunycode_56
	add	esp, 24					; 00000018H
	mov	DWORD PTR _b2Len$[ebp], eax
; Line 338
	mov	eax, DWORD PTR _status$[ebp]
	cmp	DWORD PTR [eax], 15			; 0000000fH
	jne	SHORT $LN12@internal_t
; Line 341
	mov	eax, DWORD PTR _b2Len$[ebp]
	shl	eax, 1
	push	eax
	call	_uprv_malloc_56
	add	esp, 4
	mov	DWORD PTR _b2$[ebp], eax
; Line 342
	cmp	DWORD PTR _b2$[ebp], 0
	jne	SHORT $LN11@internal_t
; Line 343
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 7
; Line 344
	jmp	$CLEANUP$10532
	jmp	$CLEANUP$10532
$LN11@internal_t:
; Line 347
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 0
; Line 349
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _caseFlags$[ebp]
	push	ecx
	mov	edx, DWORD PTR _b2Len$[ebp]
	push	edx
	mov	eax, DWORD PTR _b2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _b1Len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _b1$[ebp]
	push	edx
	call	_u_strToPunycode_56
	add	esp, 24					; 00000018H
	mov	DWORD PTR _b2Len$[ebp], eax
$LN12@internal_t:
; Line 352
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN9@internal_t
; Line 353
	jmp	$CLEANUP$10532
	jmp	$CLEANUP$10532
$LN9@internal_t:
; Line 358
	mov	eax, DWORD PTR _b2Len$[ebp]
	add	eax, 4
	mov	DWORD PTR _reqLength$[ebp], eax
; Line 360
	mov	eax, DWORD PTR _reqLength$[ebp]
	cmp	eax, DWORD PTR _destCapacity$[ebp]
	jle	SHORT $LN7@internal_t
; Line 361
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
; Line 362
	jmp	$CLEANUP$10532
	jmp	$CLEANUP$10532
$LN7@internal_t:
; Line 365
	push	1
	push	OFFSET _ACE_PREFIX
	call	_uprv_checkValidMemory
	add	esp, 8
	push	8
	push	OFFSET _ACE_PREFIX
	mov	eax, DWORD PTR _dest$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 367
	push	1
	mov	eax, DWORD PTR _b2$[ebp]
	push	eax
	call	_uprv_checkValidMemory
	add	esp, 8
	mov	ecx, DWORD PTR _b2Len$[ebp]
	shl	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _b2$[ebp]
	push	edx
	mov	eax, DWORD PTR _dest$[ebp]
	add	eax, 8
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 369
	jmp	SHORT $LN14@internal_t
$LN13@internal_t:
; Line 370
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 66564			; 00010404H
; Line 372
	mov	eax, DWORD PTR _parseError$[ebp]
	push	eax
	mov	ecx, DWORD PTR _b1Len$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _b1$[ebp]
	push	edx
	call	_uprv_syntaxError_56
	add	esp, 16					; 00000010H
; Line 373
	jmp	SHORT $CLEANUP$10532
	jmp	SHORT $CLEANUP$10532
$LN14@internal_t:
; Line 377
	cmp	DWORD PTR _reqLength$[ebp], 63		; 0000003fH
	jle	SHORT $CLEANUP$10532
; Line 378
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 66566			; 00010406H
$CLEANUP$10532:
; Line 382
	mov	eax, DWORD PTR _b1$[ebp]
	lea	ecx, DWORD PTR _b1Stack$[ebp]
	cmp	eax, ecx
	je	SHORT $LN2@internal_t
; Line 383
	mov	eax, DWORD PTR _b1$[ebp]
	push	eax
	call	_uprv_free_56
	add	esp, 4
$LN2@internal_t:
; Line 385
	mov	eax, DWORD PTR _b2$[ebp]
	lea	ecx, DWORD PTR _b2Stack$[ebp]
	cmp	eax, ecx
	je	SHORT $LN1@internal_t
; Line 386
	mov	eax, DWORD PTR _b2$[ebp]
	push	eax
	call	_uprv_free_56
	add	esp, 4
$LN1@internal_t:
; Line 388
	mov	eax, DWORD PTR _caseFlags$[ebp]
	push	eax
	call	_uprv_free_56
	add	esp, 4
; Line 390
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _reqLength$[ebp]
	push	ecx
	mov	edx, DWORD PTR _destCapacity$[ebp]
	push	edx
	mov	eax, DWORD PTR _dest$[ebp]
	push	eax
	call	_u_terminateUChars_56
	add	esp, 16					; 00000010H
; Line 391
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN57@internal_t
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 784				; 00000310H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN57@internal_t:
	DD	2
	DD	$LN56@internal_t
$LN56@internal_t:
	DD	-208					; ffffff30H
	DD	200					; 000000c8H
	DD	$LN54@internal_t
	DD	-416					; fffffe60H
	DD	200					; 000000c8H
	DD	$LN55@internal_t
$LN55@internal_t:
	DB	98					; 00000062H
	DB	50					; 00000032H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
$LN54@internal_t:
	DB	98					; 00000062H
	DB	49					; 00000031H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
?_internal_toASCII@@YAHPB_WHPA_WHHPAUUStringPrepProfile@@PAUUParseError@@PAW4UErrorCode@@@Z ENDP ; _internal_toASCII
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?startsWithPrefix@@YACPB_WH@Z
_TEXT	SEGMENT
_i$10436 = -17						; size = 1
_startsWithPrefix$ = -5					; size = 1
_src$ = 8						; size = 4
_srcLength$ = 12					; size = 4
?startsWithPrefix@@YACPB_WH@Z PROC			; startsWithPrefix, COMDAT
; Line 57
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 58
	mov	BYTE PTR _startsWithPrefix$[ebp], 1
; Line 60
	cmp	DWORD PTR _srcLength$[ebp], 4
	jge	SHORT $LN5@startsWith
; Line 61
	xor	al, al
	jmp	SHORT $LN6@startsWith
$LN5@startsWith:
; Line 64
	mov	BYTE PTR _i$10436[ebp], 0
	jmp	SHORT $LN4@startsWith
$LN3@startsWith:
	mov	al, BYTE PTR _i$10436[ebp]
	add	al, 1
	mov	BYTE PTR _i$10436[ebp], al
$LN4@startsWith:
	movsx	eax, BYTE PTR _i$10436[ebp]
	cmp	eax, 4
	jge	SHORT $LN2@startsWith
; Line 65
	movsx	eax, BYTE PTR _i$10436[ebp]
	mov	ecx, DWORD PTR _src$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	push	edx
	call	?toASCIILower@@YA_W_W@Z			; toASCIILower
	add	esp, 4
	movzx	eax, ax
	movsx	ecx, BYTE PTR _i$10436[ebp]
	movzx	edx, WORD PTR _ACE_PREFIX[ecx*2]
	cmp	eax, edx
	je	SHORT $LN1@startsWith
; Line 66
	mov	BYTE PTR _startsWithPrefix$[ebp], 0
$LN1@startsWith:
; Line 68
	jmp	SHORT $LN3@startsWith
$LN2@startsWith:
; Line 69
	mov	al, BYTE PTR _startsWithPrefix$[ebp]
$LN6@startsWith:
; Line 70
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?startsWithPrefix@@YACPB_WH@Z ENDP			; startsWithPrefix
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?toASCIILower@@YA_W_W@Z
_TEXT	SEGMENT
_ch$ = 8						; size = 2
?toASCIILower@@YA_W_W@Z PROC				; toASCIILower, COMDAT
; Line 49
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 50
	movzx	eax, WORD PTR _ch$[ebp]
	cmp	eax, 65					; 00000041H
	jl	SHORT $LN1@toASCIILow
	movzx	eax, WORD PTR _ch$[ebp]
	cmp	eax, 90					; 0000005aH
	jg	SHORT $LN1@toASCIILow
; Line 51
	movzx	eax, WORD PTR _ch$[ebp]
	add	eax, 32					; 00000020H
	jmp	SHORT $LN2@toASCIILow
$LN1@toASCIILow:
; Line 53
	mov	ax, WORD PTR _ch$[ebp]
$LN2@toASCIILow:
; Line 54
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?toASCIILower@@YA_W_W@Z ENDP				; toASCIILower
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?isLDHChar@@YAC_W@Z
_TEXT	SEGMENT
_ch$ = 8						; size = 2
?isLDHChar@@YAC_W@Z PROC				; isLDHChar, COMDAT
; Line 177
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 179
	movzx	eax, WORD PTR _ch$[ebp]
	cmp	eax, 122				; 0000007aH
	jle	SHORT $LN5@isLDHChar
; Line 180
	xor	al, al
	jmp	SHORT $LN6@isLDHChar
$LN5@isLDHChar:
; Line 187
	movzx	eax, WORD PTR _ch$[ebp]
	cmp	eax, 45					; 0000002dH
	je	SHORT $LN3@isLDHChar
	movzx	eax, WORD PTR _ch$[ebp]
	cmp	eax, 48					; 00000030H
	jl	SHORT $LN2@isLDHChar
	movzx	eax, WORD PTR _ch$[ebp]
	cmp	eax, 57					; 00000039H
	jle	SHORT $LN3@isLDHChar
$LN2@isLDHChar:
	movzx	eax, WORD PTR _ch$[ebp]
	cmp	eax, 65					; 00000041H
	jl	SHORT $LN1@isLDHChar
	movzx	eax, WORD PTR _ch$[ebp]
	cmp	eax, 90					; 0000005aH
	jle	SHORT $LN3@isLDHChar
$LN1@isLDHChar:
	movzx	eax, WORD PTR _ch$[ebp]
	cmp	eax, 97					; 00000061H
	jl	SHORT $LN4@isLDHChar
	movzx	eax, WORD PTR _ch$[ebp]
	cmp	eax, 122				; 0000007aH
	jg	SHORT $LN4@isLDHChar
$LN3@isLDHChar:
; Line 188
	mov	al, 1
	jmp	SHORT $LN6@isLDHChar
$LN4@isLDHChar:
; Line 190
	xor	al, al
$LN6@isLDHChar:
; Line 191
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?isLDHChar@@YAC_W@Z ENDP				; isLDHChar
_TEXT	ENDS
PUBLIC	_uidna_toUnicode_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _uidna_toUnicode_56
_TEXT	SEGMENT
_retLen$ = -20						; size = 4
_nameprep$ = -8						; size = 4
_src$ = 8						; size = 4
_srcLength$ = 12					; size = 4
_dest$ = 16						; size = 4
_destCapacity$ = 20					; size = 4
_options$ = 24						; size = 4
_parseError$ = 28					; size = 4
_status$ = 32						; size = 4
_uidna_toUnicode_56 PROC				; COMDAT
; Line 643
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 645
	cmp	DWORD PTR _status$[ebp], 0
	je	SHORT $LN4@uidna_toUn
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN5@uidna_toUn
$LN4@uidna_toUn:
; Line 646
	xor	eax, eax
	jmp	$LN6@uidna_toUn
$LN5@uidna_toUn:
; Line 648
	cmp	DWORD PTR _src$[ebp], 0
	je	SHORT $LN2@uidna_toUn
	cmp	DWORD PTR _srcLength$[ebp], -1
	jl	SHORT $LN2@uidna_toUn
	cmp	DWORD PTR _destCapacity$[ebp], 0
	jl	SHORT $LN2@uidna_toUn
	cmp	DWORD PTR _dest$[ebp], 0
	jne	SHORT $LN3@uidna_toUn
	cmp	DWORD PTR _destCapacity$[ebp], 0
	jle	SHORT $LN3@uidna_toUn
$LN2@uidna_toUn:
; Line 649
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 1
; Line 650
	xor	eax, eax
	jmp	SHORT $LN6@uidna_toUn
$LN3@uidna_toUn:
; Line 653
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	push	0
	call	_usprep_openByType_56
	add	esp, 8
	mov	DWORD PTR _nameprep$[ebp], eax
; Line 655
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN1@uidna_toUn
; Line 656
	or	eax, -1
	jmp	SHORT $LN6@uidna_toUn
$LN1@uidna_toUn:
; Line 659
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _parseError$[ebp]
	push	ecx
	mov	edx, DWORD PTR _nameprep$[ebp]
	push	edx
	mov	eax, DWORD PTR _options$[ebp]
	push	eax
	mov	ecx, DWORD PTR _destCapacity$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dest$[ebp]
	push	edx
	mov	eax, DWORD PTR _srcLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _src$[ebp]
	push	ecx
	call	?_internal_toUnicode@@YAHPB_WHPA_WHHPAUUStringPrepProfile@@PAUUParseError@@PAW4UErrorCode@@@Z ; _internal_toUnicode
	add	esp, 32					; 00000020H
	mov	DWORD PTR _retLen$[ebp], eax
; Line 661
	mov	eax, DWORD PTR _nameprep$[ebp]
	push	eax
	call	_usprep_close_56
	add	esp, 4
; Line 663
	mov	eax, DWORD PTR _retLen$[ebp]
$LN6@uidna_toUn:
; Line 664
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_uidna_toUnicode_56 ENDP
_TEXT	ENDS
PUBLIC	??_C@_1BO@FPACHIGK@?$AAs?$AAr?$AAc?$AAL?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?$AA@ ; `string'
PUBLIC	??_C@_1FI@EHNKFCBG@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@ ; `string'
PUBLIC	?__LINE__Var@?1??_internal_toUnicode@@YAHPB_WHPA_WHHPAUUStringPrepProfile@@PAUUParseError@@PAW4UErrorCode@@@Z@4JA@b121f502 ; `_internal_toUnicode'::`2'::__LINE__Var
PUBLIC	__$ArrayPad$
EXTRN	__imp___wassert:PROC
EXTRN	_u_strFromPunycode_56:PROC
;	COMDAT ??_C@_1BO@FPACHIGK@?$AAs?$AAr?$AAc?$AAL?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_1BO@FPACHIGK@?$AAs?$AAr?$AAc?$AAL?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?$AA@ DB 's'
	DB	00H, 'r', 00H, 'c', 00H, 'L', 00H, 'e', 00H, 'n', 00H, 'g', 00H
	DB	't', 00H, 'h', 00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, '0'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1FI@EHNKFCBG@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@
CONST	SEGMENT
??_C@_1FI@EHNKFCBG@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@ DB 'd'
	DB	00H, ':', 00H, '\', 00H, 'm', 00H, 'o', 00H, 'z', 00H, 'i', 00H
	DB	'l', 00H, 'l', 00H, 'a', 00H, '\', 00H, 'i', 00H, 'n', 00H, 't'
	DB	00H, 'l', 00H, '\', 00H, 'i', 00H, 'c', 00H, 'u', 00H, '\', 00H
	DB	's', 00H, 'o', 00H, 'u', 00H, 'r', 00H, 'c', 00H, 'e', 00H, '\'
	DB	00H, 'c', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'o', 00H, 'n', 00H
	DB	'\', 00H, 'u', 00H, 'i', 00H, 'd', 00H, 'n', 00H, 'a', 00H, '.'
	DB	00H, 'c', 00H, 'p', 00H, 'p', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??_internal_toUnicode@@YAHPB_WHPA_WHHPAUUStringPrepProfile@@PAUUParseError@@PAW4UErrorCode@@@Z@4JA@b121f502
_DATA	SEGMENT
?__LINE__Var@?1??_internal_toUnicode@@YAHPB_WHPA_WHHPAUUStringPrepProfile@@PAUUParseError@@PAW4UErrorCode@@@Z@4JA@b121f502 DD 0190H ; `_internal_toUnicode'::`2'::__LINE__Var
; Function compile flags: /Odtp /RTCsu /ZI
_DATA	ENDS
;	COMDAT ?_internal_toUnicode@@YAHPB_WHPA_WHHPAUUStringPrepProfile@@PAUUParseError@@PAW4UErrorCode@@@Z
_TEXT	SEGMENT
_j$10616 = -816						; size = 4
_srcIsASCII$ = -801					; size = 1
_caseFlags$ = -792					; size = 4
_reqLength$ = -780					; size = 4
_b3Capacity$ = -768					; size = 4
_b2Capacity$ = -756					; size = 4
_b1Capacity$ = -744					; size = 4
_b3Len$ = -732						; size = 4
_b1PrimeLen$ = -720					; size = 4
_b2Len$ = -708						; size = 4
_b1Len$ = -696						; size = 4
_b3$ = -684						; size = 4
_b1Prime$ = -672					; size = 4
_b2$ = -660						; size = 4
_b1$ = -648						; size = 4
_b3Stack$ = -636					; size = 200
_b2Stack$ = -428					; size = 200
_b1Stack$ = -220					; size = 200
_namePrepOptions$ = -12					; size = 4
__$ArrayPad$ = -4					; size = 4
_src$ = 8						; size = 4
_srcLength$ = 12					; size = 4
_dest$ = 16						; size = 4
_destCapacity$ = 20					; size = 4
_options$ = 24						; size = 4
_nameprep$ = 28						; size = 4
_parseError$ = 32					; size = 4
_status$ = 36						; size = 4
?_internal_toUnicode@@YAHPB_WHPA_WHHPAUUStringPrepProfile@@PAUUParseError@@PAW4UErrorCode@@@Z PROC ; _internal_toUnicode, COMDAT
; Line 400
	push	ebp
	mov	ebp, esp
	sub	esp, 1012				; 000003f4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-1012]
	mov	ecx, 253				; 000000fdH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 404
	mov	eax, DWORD PTR _options$[ebp]
	and	eax, 1
	neg	eax
	sbb	eax, eax
	neg	eax
	mov	DWORD PTR _namePrepOptions$[ebp], eax
; Line 410
	lea	eax, DWORD PTR _b1Stack$[ebp]
	mov	DWORD PTR _b1$[ebp], eax
	lea	eax, DWORD PTR _b2Stack$[ebp]
	mov	DWORD PTR _b2$[ebp], eax
	mov	DWORD PTR _b1Prime$[ebp], 0
	lea	eax, DWORD PTR _b3Stack$[ebp]
	mov	DWORD PTR _b3$[ebp], eax
; Line 411
	mov	DWORD PTR _b1Len$[ebp], 0
; Line 412
	mov	DWORD PTR _b1Capacity$[ebp], 100	; 00000064H
; Line 413
	mov	DWORD PTR _b2Capacity$[ebp], 100	; 00000064H
; Line 414
	mov	DWORD PTR _b3Capacity$[ebp], 100	; 00000064H
; Line 415
	mov	DWORD PTR _reqLength$[ebp], 0
; Line 417
	mov	DWORD PTR _caseFlags$[ebp], 0
; Line 419
	mov	BYTE PTR _srcIsASCII$[ebp], 1
; Line 424
	cmp	DWORD PTR _srcLength$[ebp], -1
	jne	SHORT $LN36@internal_t@2
; Line 425
	mov	DWORD PTR _srcLength$[ebp], 0
$LN35@internal_t@2:
; Line 426
	mov	eax, DWORD PTR _srcLength$[ebp]
	mov	ecx, DWORD PTR _src$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	test	edx, edx
	je	SHORT $LN34@internal_t@2
; Line 427
	mov	eax, DWORD PTR _srcLength$[ebp]
	mov	ecx, DWORD PTR _src$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	cmp	edx, 127				; 0000007fH
	jle	SHORT $LN33@internal_t@2
; Line 428
	mov	BYTE PTR _srcIsASCII$[ebp], 0
$LN33@internal_t@2:
; Line 436
	mov	eax, DWORD PTR _srcLength$[ebp]
	add	eax, 1
	mov	DWORD PTR _srcLength$[ebp], eax
; Line 437
	jmp	SHORT $LN35@internal_t@2
$LN34@internal_t@2:
	jmp	SHORT $LN32@internal_t@2
$LN36@internal_t@2:
; Line 438
	cmp	DWORD PTR _srcLength$[ebp], 0
	jle	SHORT $LN31@internal_t@2
; Line 439
	mov	DWORD PTR _j$10616[ebp], 0
	jmp	SHORT $LN30@internal_t@2
$LN29@internal_t@2:
	mov	eax, DWORD PTR _j$10616[ebp]
	add	eax, 1
	mov	DWORD PTR _j$10616[ebp], eax
$LN30@internal_t@2:
	mov	eax, DWORD PTR _j$10616[ebp]
	cmp	eax, DWORD PTR _srcLength$[ebp]
	jge	SHORT $LN28@internal_t@2
; Line 440
	mov	eax, DWORD PTR _j$10616[ebp]
	mov	ecx, DWORD PTR _src$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	cmp	edx, 127				; 0000007fH
	jle	SHORT $LN27@internal_t@2
; Line 441
	mov	BYTE PTR _srcIsASCII$[ebp], 0
$LN27@internal_t@2:
; Line 449
	jmp	SHORT $LN29@internal_t@2
$LN28@internal_t@2:
	jmp	SHORT $LN32@internal_t@2
$LN31@internal_t@2:
; Line 451
	xor	eax, eax
	jmp	$LN37@internal_t@2
$LN32@internal_t@2:
; Line 454
	movsx	eax, BYTE PTR _srcIsASCII$[ebp]
	test	eax, eax
	jne	$LN25@internal_t@2
; Line 456
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _parseError$[ebp]
	push	ecx
	mov	edx, DWORD PTR _namePrepOptions$[ebp]
	push	edx
	mov	eax, DWORD PTR _b1Capacity$[ebp]
	push	eax
	mov	ecx, DWORD PTR _b1$[ebp]
	push	ecx
	mov	edx, DWORD PTR _srcLength$[ebp]
	push	edx
	mov	eax, DWORD PTR _src$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nameprep$[ebp]
	push	ecx
	call	_usprep_prepare_56
	add	esp, 32					; 00000020H
	mov	DWORD PTR _b1Len$[ebp], eax
; Line 457
	mov	eax, DWORD PTR _status$[ebp]
	cmp	DWORD PTR [eax], 15			; 0000000fH
	jne	SHORT $LN24@internal_t@2
; Line 460
	mov	eax, DWORD PTR _b1Len$[ebp]
	shl	eax, 1
	push	eax
	call	_uprv_malloc_56
	add	esp, 4
	mov	DWORD PTR _b1$[ebp], eax
; Line 461
	cmp	DWORD PTR _b1$[ebp], 0
	jne	SHORT $LN23@internal_t@2
; Line 462
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 7
; Line 463
	jmp	$CLEANUP$10626
	jmp	$CLEANUP$10626
$LN23@internal_t@2:
; Line 466
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 0
; Line 468
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _parseError$[ebp]
	push	ecx
	mov	edx, DWORD PTR _namePrepOptions$[ebp]
	push	edx
	mov	eax, DWORD PTR _b1Len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _b1$[ebp]
	push	ecx
	mov	edx, DWORD PTR _srcLength$[ebp]
	push	edx
	mov	eax, DWORD PTR _src$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nameprep$[ebp]
	push	ecx
	call	_usprep_prepare_56
	add	esp, 32					; 00000020H
	mov	DWORD PTR _b1Len$[ebp], eax
$LN24@internal_t@2:
; Line 471
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN21@internal_t@2
; Line 472
	jmp	$CLEANUP$10626
	jmp	$CLEANUP$10626
$LN21@internal_t@2:
; Line 474
	jmp	SHORT $LN19@internal_t@2
$LN25@internal_t@2:
; Line 477
	mov	eax, DWORD PTR _src$[ebp]
	mov	DWORD PTR _b1$[ebp], eax
; Line 478
	mov	eax, DWORD PTR _srcLength$[ebp]
	mov	DWORD PTR _b1Len$[ebp], eax
$LN19@internal_t@2:
; Line 488
	mov	eax, DWORD PTR _b1Len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _b1$[ebp]
	push	ecx
	call	?startsWithPrefix@@YACPB_WH@Z		; startsWithPrefix
	add	esp, 8
	movsx	edx, al
	test	edx, edx
	je	$LN18@internal_t@2
; Line 491
	mov	eax, DWORD PTR _b1$[ebp]
	add	eax, 8
	mov	DWORD PTR _b1Prime$[ebp], eax
; Line 492
	mov	eax, DWORD PTR _b1Len$[ebp]
	sub	eax, 4
	mov	DWORD PTR _b1PrimeLen$[ebp], eax
; Line 495
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _caseFlags$[ebp]
	push	ecx
	mov	edx, DWORD PTR _b2Capacity$[ebp]
	push	edx
	mov	eax, DWORD PTR _b2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _b1PrimeLen$[ebp]
	push	ecx
	mov	edx, DWORD PTR _b1Prime$[ebp]
	push	edx
	call	_u_strFromPunycode_56
	add	esp, 24					; 00000018H
	mov	DWORD PTR _b2Len$[ebp], eax
; Line 497
	mov	eax, DWORD PTR _status$[ebp]
	cmp	DWORD PTR [eax], 15			; 0000000fH
	jne	SHORT $LN17@internal_t@2
; Line 500
	mov	eax, DWORD PTR _b2Len$[ebp]
	shl	eax, 1
	push	eax
	call	_uprv_malloc_56
	add	esp, 4
	mov	DWORD PTR _b2$[ebp], eax
; Line 501
	cmp	DWORD PTR _b2$[ebp], 0
	jne	SHORT $LN16@internal_t@2
; Line 502
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 7
; Line 503
	jmp	$CLEANUP$10626
	jmp	$CLEANUP$10626
$LN16@internal_t@2:
; Line 506
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 0
; Line 508
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _caseFlags$[ebp]
	push	ecx
	mov	edx, DWORD PTR _b2Len$[ebp]
	push	edx
	mov	eax, DWORD PTR _b2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _b1PrimeLen$[ebp]
	push	ecx
	mov	edx, DWORD PTR _b1Prime$[ebp]
	push	edx
	call	_u_strFromPunycode_56
	add	esp, 24					; 00000018H
	mov	DWORD PTR _b2Len$[ebp], eax
$LN17@internal_t@2:
; Line 513
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _parseError$[ebp]
	push	ecx
	mov	edx, DWORD PTR _options$[ebp]
	push	edx
	mov	eax, DWORD PTR _b3Capacity$[ebp]
	push	eax
	mov	ecx, DWORD PTR _b3$[ebp]
	push	ecx
	mov	edx, DWORD PTR _b2Len$[ebp]
	push	edx
	mov	eax, DWORD PTR _b2$[ebp]
	push	eax
	call	_uidna_toASCII_56
	add	esp, 28					; 0000001cH
	mov	DWORD PTR _b3Len$[ebp], eax
; Line 515
	mov	eax, DWORD PTR _status$[ebp]
	cmp	DWORD PTR [eax], 15			; 0000000fH
	jne	SHORT $LN14@internal_t@2
; Line 518
	mov	eax, DWORD PTR _b3Len$[ebp]
	shl	eax, 1
	push	eax
	call	_uprv_malloc_56
	add	esp, 4
	mov	DWORD PTR _b3$[ebp], eax
; Line 519
	cmp	DWORD PTR _b3$[ebp], 0
	jne	SHORT $LN13@internal_t@2
; Line 520
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 7
; Line 521
	jmp	$CLEANUP$10626
	jmp	$CLEANUP$10626
$LN13@internal_t@2:
; Line 524
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 0
; Line 526
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _parseError$[ebp]
	push	ecx
	mov	edx, DWORD PTR _options$[ebp]
	push	edx
	mov	eax, DWORD PTR _b3Len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _b3$[ebp]
	push	ecx
	mov	edx, DWORD PTR _b2Len$[ebp]
	push	edx
	mov	eax, DWORD PTR _b2$[ebp]
	push	eax
	call	_uidna_toASCII_56
	add	esp, 28					; 0000001cH
	mov	DWORD PTR _b3Len$[ebp], eax
$LN14@internal_t@2:
; Line 530
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN11@internal_t@2
; Line 531
	jmp	$CLEANUP$10626
	jmp	$CLEANUP$10626
$LN11@internal_t@2:
; Line 535
	mov	eax, DWORD PTR _b3Len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _b3$[ebp]
	push	ecx
	mov	edx, DWORD PTR _b1Len$[ebp]
	push	edx
	mov	eax, DWORD PTR _b1$[ebp]
	push	eax
	call	?compareCaseInsensitiveASCII@@YAHPB_WH0H@Z ; compareCaseInsensitiveASCII
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN9@internal_t@2
; Line 537
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 66565			; 00010405H
; Line 538
	jmp	$CLEANUP$10626
	jmp	$CLEANUP$10626
$LN9@internal_t@2:
; Line 542
	mov	eax, DWORD PTR _b2Len$[ebp]
	mov	DWORD PTR _reqLength$[ebp], eax
; Line 543
	mov	eax, DWORD PTR _b2Len$[ebp]
	cmp	eax, DWORD PTR _destCapacity$[ebp]
	jg	SHORT $LN7@internal_t@2
; Line 544
	push	1
	mov	eax, DWORD PTR _b2$[ebp]
	push	eax
	call	_uprv_checkValidMemory
	add	esp, 8
	mov	ecx, DWORD PTR _b2Len$[ebp]
	shl	ecx, 1
	mov	esi, esp
	push	ecx
	mov	edx, DWORD PTR _b2$[ebp]
	push	edx
	mov	eax, DWORD PTR _dest$[ebp]
	push	eax
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN7@internal_t@2:
; Line 547
	jmp	SHORT $CLEANUP$10626
$LN18@internal_t@2:
; Line 572
	mov	eax, DWORD PTR _srcLength$[ebp]
	cmp	eax, DWORD PTR _destCapacity$[ebp]
	jg	SHORT $LN5@internal_t@2
; Line 573
	push	1
	mov	eax, DWORD PTR _src$[ebp]
	push	eax
	call	_uprv_checkValidMemory
	add	esp, 8
	mov	ecx, DWORD PTR _srcLength$[ebp]
	shl	ecx, 1
	mov	esi, esp
	push	ecx
	mov	edx, DWORD PTR _src$[ebp]
	push	edx
	mov	eax, DWORD PTR _dest$[ebp]
	push	eax
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN5@internal_t@2:
; Line 575
	mov	eax, DWORD PTR _srcLength$[ebp]
	mov	DWORD PTR _reqLength$[ebp], eax
$CLEANUP$10626:
; Line 581
	mov	eax, DWORD PTR _b1$[ebp]
	lea	ecx, DWORD PTR _b1Stack$[ebp]
	cmp	eax, ecx
	je	SHORT $LN4@internal_t@2
	mov	eax, DWORD PTR _b1$[ebp]
	cmp	eax, DWORD PTR _src$[ebp]
	je	SHORT $LN4@internal_t@2
; Line 582
	mov	eax, DWORD PTR _b1$[ebp]
	push	eax
	call	_uprv_free_56
	add	esp, 4
$LN4@internal_t@2:
; Line 584
	mov	eax, DWORD PTR _b2$[ebp]
	lea	ecx, DWORD PTR _b2Stack$[ebp]
	cmp	eax, ecx
	je	SHORT $LN3@internal_t@2
; Line 585
	mov	eax, DWORD PTR _b2$[ebp]
	push	eax
	call	_uprv_free_56
	add	esp, 4
$LN3@internal_t@2:
; Line 587
	mov	eax, DWORD PTR _caseFlags$[ebp]
	push	eax
	call	_uprv_free_56
	add	esp, 4
; Line 595
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN2@internal_t@2
; Line 597
	cmp	DWORD PTR _dest$[ebp], 0
	je	SHORT $LN1@internal_t@2
	mov	eax, DWORD PTR _srcLength$[ebp]
	cmp	eax, DWORD PTR _destCapacity$[ebp]
	jg	SHORT $LN1@internal_t@2
; Line 599
	cmp	DWORD PTR _srcLength$[ebp], 0
	jge	SHORT $LN39@internal_t@2
	mov	eax, DWORD PTR ?__LINE__Var@?1??_internal_toUnicode@@YAHPB_WHPA_WHHPAUUStringPrepProfile@@PAUUParseError@@PAW4UErrorCode@@@Z@4JA@b121f502
	add	eax, 199				; 000000c7H
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1FI@EHNKFCBG@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@
	push	OFFSET ??_C@_1BO@FPACHIGK@?$AAs?$AAr?$AAc?$AAL?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN39@internal_t@2:
; Line 600
	push	1
	mov	eax, DWORD PTR _src$[ebp]
	push	eax
	call	_uprv_checkValidMemory
	add	esp, 8
	mov	ecx, DWORD PTR _srcLength$[ebp]
	shl	ecx, 1
	mov	esi, esp
	push	ecx
	mov	edx, DWORD PTR _src$[ebp]
	push	edx
	mov	eax, DWORD PTR _dest$[ebp]
	push	eax
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@internal_t@2:
; Line 602
	mov	eax, DWORD PTR _srcLength$[ebp]
	mov	DWORD PTR _reqLength$[ebp], eax
; Line 603
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 0
$LN2@internal_t@2:
; Line 606
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _reqLength$[ebp]
	push	ecx
	mov	edx, DWORD PTR _destCapacity$[ebp]
	push	edx
	mov	eax, DWORD PTR _dest$[ebp]
	push	eax
	call	_u_terminateUChars_56
	add	esp, 16					; 00000010H
$LN37@internal_t@2:
; Line 607
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN44@internal_t@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 1012				; 000003f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN44@internal_t@2:
	DD	3
	DD	$LN43@internal_t@2
$LN43@internal_t@2:
	DD	-220					; ffffff24H
	DD	200					; 000000c8H
	DD	$LN40@internal_t@2
	DD	-428					; fffffe54H
	DD	200					; 000000c8H
	DD	$LN41@internal_t@2
	DD	-636					; fffffd84H
	DD	200					; 000000c8H
	DD	$LN42@internal_t@2
$LN42@internal_t@2:
	DB	98					; 00000062H
	DB	51					; 00000033H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
$LN41@internal_t@2:
	DB	98					; 00000062H
	DB	50					; 00000032H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
$LN40@internal_t@2:
	DB	98					; 00000062H
	DB	49					; 00000031H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
?_internal_toUnicode@@YAHPB_WHPA_WHHPAUUStringPrepProfile@@PAUUParseError@@PAW4UErrorCode@@@Z ENDP ; _internal_toUnicode
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?compareCaseInsensitiveASCII@@YAHPB_WH0H@Z
_TEXT	SEGMENT
_i$10456 = -68						; size = 4
_rc$ = -56						; size = 4
_c2$ = -44						; size = 2
_c1$ = -32						; size = 2
_lengthResult$ = -20					; size = 4
_minLength$ = -8					; size = 4
_s1$ = 8						; size = 4
_s1Len$ = 12						; size = 4
_s2$ = 16						; size = 4
_s2Len$ = 20						; size = 4
?compareCaseInsensitiveASCII@@YAHPB_WH0H@Z PROC		; compareCaseInsensitiveASCII, COMDAT
; Line 75
	push	ebp
	mov	ebp, esp
	sub	esp, 264				; 00000108H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-264]
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 81
	mov	eax, DWORD PTR _s1Len$[ebp]
	cmp	eax, DWORD PTR _s2Len$[ebp]
	je	SHORT $LN10@compareCas
; Line 82
	mov	eax, DWORD PTR _s1Len$[ebp]
	cmp	eax, DWORD PTR _s2Len$[ebp]
	jge	SHORT $LN9@compareCas
; Line 83
	mov	eax, DWORD PTR _s1Len$[ebp]
	mov	DWORD PTR _minLength$[ebp], eax
; Line 84
	mov	DWORD PTR _lengthResult$[ebp], -1
; Line 85
	jmp	SHORT $LN8@compareCas
$LN9@compareCas:
; Line 86
	mov	eax, DWORD PTR _s2Len$[ebp]
	mov	DWORD PTR _minLength$[ebp], eax
; Line 87
	mov	DWORD PTR _lengthResult$[ebp], 1
$LN8@compareCas:
; Line 89
	jmp	SHORT $LN7@compareCas
$LN10@compareCas:
; Line 91
	mov	eax, DWORD PTR _s1Len$[ebp]
	mov	DWORD PTR _minLength$[ebp], eax
; Line 92
	mov	DWORD PTR _lengthResult$[ebp], 0
$LN7@compareCas:
; Line 98
	mov	DWORD PTR _i$10456[ebp], 0
	jmp	SHORT $LN6@compareCas
$LN5@compareCas:
	mov	eax, DWORD PTR _i$10456[ebp]
	add	eax, 1
	mov	DWORD PTR _i$10456[ebp], eax
$LN6@compareCas:
; Line 101
	mov	eax, DWORD PTR _i$10456[ebp]
	cmp	eax, DWORD PTR _minLength$[ebp]
	jne	SHORT $LN3@compareCas
; Line 102
	mov	eax, DWORD PTR _lengthResult$[ebp]
	jmp	SHORT $LN11@compareCas
$LN3@compareCas:
; Line 105
	mov	eax, DWORD PTR _i$10456[ebp]
	mov	ecx, DWORD PTR _s1$[ebp]
	mov	dx, WORD PTR [ecx+eax*2]
	mov	WORD PTR _c1$[ebp], dx
; Line 106
	mov	eax, DWORD PTR _i$10456[ebp]
	mov	ecx, DWORD PTR _s2$[ebp]
	mov	dx, WORD PTR [ecx+eax*2]
	mov	WORD PTR _c2$[ebp], dx
; Line 109
	movzx	eax, WORD PTR _c1$[ebp]
	movzx	ecx, WORD PTR _c2$[ebp]
	cmp	eax, ecx
	je	SHORT $LN2@compareCas
; Line 110
	movzx	eax, WORD PTR _c1$[ebp]
	push	eax
	call	?toASCIILower@@YA_W_W@Z			; toASCIILower
	add	esp, 4
	movzx	esi, ax
	movzx	ecx, WORD PTR _c2$[ebp]
	push	ecx
	call	?toASCIILower@@YA_W_W@Z			; toASCIILower
	add	esp, 4
	movzx	edx, ax
	sub	esi, edx
	mov	DWORD PTR _rc$[ebp], esi
; Line 111
	je	SHORT $LN2@compareCas
; Line 112
	mov	eax, DWORD PTR _rc$[ebp]
	mov	DWORD PTR _lengthResult$[ebp], eax
; Line 113
	jmp	SHORT $LN4@compareCas
$LN2@compareCas:
; Line 116
	jmp	SHORT $LN5@compareCas
$LN4@compareCas:
; Line 117
	mov	eax, DWORD PTR _lengthResult$[ebp]
$LN11@compareCas:
; Line 118
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 264				; 00000108H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?compareCaseInsensitiveASCII@@YAHPB_WH0H@Z ENDP		; compareCaseInsensitiveASCII
_TEXT	ENDS
PUBLIC	_uidna_IDNToASCII_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _uidna_IDNToASCII_56
_TEXT	SEGMENT
_done$ = -113						; size = 1
_labelReqLength$ = -104					; size = 4
_labelLen$ = -92					; size = 4
_remainingDestCapacity$ = -80				; size = 4
_remainingLen$ = -68					; size = 4
_currentDest$ = -56					; size = 4
_labelStart$ = -44					; size = 4
_delimiter$ = -32					; size = 4
_nameprep$ = -20					; size = 4
_reqLength$ = -8					; size = 4
_src$ = 8						; size = 4
_srcLength$ = 12					; size = 4
_dest$ = 16						; size = 4
_destCapacity$ = 20					; size = 4
_options$ = 24						; size = 4
_parseError$ = 28					; size = 4
_status$ = 32						; size = 4
_uidna_IDNToASCII_56 PROC				; COMDAT
; Line 672
	push	ebp
	mov	ebp, esp
	sub	esp, 312				; 00000138H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-312]
	mov	ecx, 78					; 0000004eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 674
	cmp	DWORD PTR _status$[ebp], 0
	je	SHORT $LN16@uidna_IDNT
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN17@uidna_IDNT
$LN16@uidna_IDNT:
; Line 675
	xor	eax, eax
	jmp	$LN18@uidna_IDNT
$LN17@uidna_IDNT:
; Line 677
	cmp	DWORD PTR _src$[ebp], 0
	je	SHORT $LN14@uidna_IDNT
	cmp	DWORD PTR _srcLength$[ebp], -1
	jl	SHORT $LN14@uidna_IDNT
	cmp	DWORD PTR _destCapacity$[ebp], 0
	jl	SHORT $LN14@uidna_IDNT
	cmp	DWORD PTR _dest$[ebp], 0
	jne	SHORT $LN15@uidna_IDNT
	cmp	DWORD PTR _destCapacity$[ebp], 0
	jle	SHORT $LN15@uidna_IDNT
$LN14@uidna_IDNT:
; Line 678
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 1
; Line 679
	xor	eax, eax
	jmp	$LN18@uidna_IDNT
$LN15@uidna_IDNT:
; Line 682
	mov	DWORD PTR _reqLength$[ebp], 0
; Line 684
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	push	0
	call	_usprep_openByType_56
	add	esp, 8
	mov	DWORD PTR _nameprep$[ebp], eax
; Line 686
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN13@uidna_IDNT
; Line 687
	xor	eax, eax
	jmp	$LN18@uidna_IDNT
$LN13@uidna_IDNT:
; Line 691
	mov	eax, DWORD PTR _src$[ebp]
	mov	DWORD PTR _delimiter$[ebp], eax
; Line 692
	mov	eax, DWORD PTR _src$[ebp]
	mov	DWORD PTR _labelStart$[ebp], eax
; Line 693
	mov	eax, DWORD PTR _dest$[ebp]
	mov	DWORD PTR _currentDest$[ebp], eax
; Line 694
	mov	eax, DWORD PTR _srcLength$[ebp]
	mov	DWORD PTR _remainingLen$[ebp], eax
; Line 695
	mov	eax, DWORD PTR _destCapacity$[ebp]
	mov	DWORD PTR _remainingDestCapacity$[ebp], eax
; Line 696
	mov	DWORD PTR _labelLen$[ebp], 0
	mov	DWORD PTR _labelReqLength$[ebp], 0
; Line 697
	mov	BYTE PTR _done$[ebp], 0
$LN12@uidna_IDNT:
; Line 702
	lea	eax, DWORD PTR _done$[ebp]
	push	eax
	lea	ecx, DWORD PTR _delimiter$[ebp]
	push	ecx
	mov	edx, DWORD PTR _remainingLen$[ebp]
	push	edx
	mov	eax, DWORD PTR _labelStart$[ebp]
	push	eax
	call	?getNextSeparator@@YAHPA_WHPAPA_WPAC@Z	; getNextSeparator
	add	esp, 16					; 00000010H
	mov	DWORD PTR _labelLen$[ebp], eax
; Line 703
	mov	DWORD PTR _labelReqLength$[ebp], 0
; Line 704
	cmp	DWORD PTR _labelLen$[ebp], 0
	jne	SHORT $LN9@uidna_IDNT
	movsx	eax, BYTE PTR _done$[ebp]
	test	eax, eax
	jne	SHORT $LN10@uidna_IDNT
$LN9@uidna_IDNT:
; Line 709
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _parseError$[ebp]
	push	ecx
	mov	edx, DWORD PTR _nameprep$[ebp]
	push	edx
	mov	eax, DWORD PTR _options$[ebp]
	push	eax
	mov	ecx, DWORD PTR _remainingDestCapacity$[ebp]
	push	ecx
	mov	edx, DWORD PTR _currentDest$[ebp]
	push	edx
	mov	eax, DWORD PTR _labelLen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _labelStart$[ebp]
	push	ecx
	call	?_internal_toASCII@@YAHPB_WHPA_WHHPAUUStringPrepProfile@@PAUUParseError@@PAW4UErrorCode@@@Z ; _internal_toASCII
	add	esp, 32					; 00000020H
	mov	DWORD PTR _labelReqLength$[ebp], eax
; Line 711
	mov	eax, DWORD PTR _status$[ebp]
	cmp	DWORD PTR [eax], 15			; 0000000fH
	jne	SHORT $LN10@uidna_IDNT
; Line 713
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 0
; Line 714
	mov	DWORD PTR _remainingDestCapacity$[ebp], 0
$LN10@uidna_IDNT:
; Line 719
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN7@uidna_IDNT
; Line 720
	jmp	$LN11@uidna_IDNT
$LN7@uidna_IDNT:
; Line 723
	mov	eax, DWORD PTR _reqLength$[ebp]
	add	eax, DWORD PTR _labelReqLength$[ebp]
	mov	DWORD PTR _reqLength$[ebp], eax
; Line 725
	mov	eax, DWORD PTR _labelReqLength$[ebp]
	cmp	eax, DWORD PTR _remainingDestCapacity$[ebp]
	jge	SHORT $LN6@uidna_IDNT
; Line 726
	mov	eax, DWORD PTR _labelReqLength$[ebp]
	mov	ecx, DWORD PTR _currentDest$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR _currentDest$[ebp], edx
; Line 727
	mov	eax, DWORD PTR _remainingDestCapacity$[ebp]
	sub	eax, DWORD PTR _labelReqLength$[ebp]
	mov	DWORD PTR _remainingDestCapacity$[ebp], eax
; Line 728
	jmp	SHORT $LN5@uidna_IDNT
$LN6@uidna_IDNT:
; Line 730
	mov	DWORD PTR _remainingDestCapacity$[ebp], 0
$LN5@uidna_IDNT:
; Line 733
	movsx	eax, BYTE PTR _done$[ebp]
	cmp	eax, 1
	jne	SHORT $LN4@uidna_IDNT
; Line 734
	jmp	SHORT $LN11@uidna_IDNT
$LN4@uidna_IDNT:
; Line 738
	cmp	DWORD PTR _remainingDestCapacity$[ebp], 0
	jle	SHORT $LN3@uidna_IDNT
; Line 739
	mov	eax, 46					; 0000002eH
	mov	ecx, DWORD PTR _currentDest$[ebp]
	mov	WORD PTR [ecx], ax
	mov	edx, DWORD PTR _currentDest$[ebp]
	add	edx, 2
	mov	DWORD PTR _currentDest$[ebp], edx
; Line 740
	mov	eax, DWORD PTR _remainingDestCapacity$[ebp]
	sub	eax, 1
	mov	DWORD PTR _remainingDestCapacity$[ebp], eax
$LN3@uidna_IDNT:
; Line 742
	mov	eax, DWORD PTR _reqLength$[ebp]
	add	eax, 1
	mov	DWORD PTR _reqLength$[ebp], eax
; Line 744
	mov	eax, DWORD PTR _delimiter$[ebp]
	mov	DWORD PTR _labelStart$[ebp], eax
; Line 745
	cmp	DWORD PTR _remainingLen$[ebp], 0
	jle	SHORT $LN2@uidna_IDNT
; Line 746
	mov	eax, DWORD PTR _delimiter$[ebp]
	sub	eax, DWORD PTR _src$[ebp]
	sar	eax, 1
	mov	ecx, DWORD PTR _srcLength$[ebp]
	sub	ecx, eax
	mov	DWORD PTR _remainingLen$[ebp], ecx
$LN2@uidna_IDNT:
; Line 749
	jmp	$LN12@uidna_IDNT
$LN11@uidna_IDNT:
; Line 751
	cmp	DWORD PTR _reqLength$[ebp], 255		; 000000ffH
	jle	SHORT $LN1@uidna_IDNT
; Line 752
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 66568			; 00010408H
$LN1@uidna_IDNT:
; Line 755
	mov	eax, DWORD PTR _nameprep$[ebp]
	push	eax
	call	_usprep_close_56
	add	esp, 4
; Line 757
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _reqLength$[ebp]
	push	ecx
	mov	edx, DWORD PTR _destCapacity$[ebp]
	push	edx
	mov	eax, DWORD PTR _dest$[ebp]
	push	eax
	call	_u_terminateUChars_56
	add	esp, 16					; 00000010H
$LN18@uidna_IDNT:
; Line 758
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN23@uidna_IDNT
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 312				; 00000138H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN23@uidna_IDNT:
	DD	2
	DD	$LN22@uidna_IDNT
$LN22@uidna_IDNT:
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN20@uidna_IDNT
	DD	-113					; ffffff8fH
	DD	1
	DD	$LN21@uidna_IDNT
$LN21@uidna_IDNT:
	DB	100					; 00000064H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	101					; 00000065H
	DB	0
$LN20@uidna_IDNT:
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	108					; 0000006cH
	DB	105					; 00000069H
	DB	109					; 0000006dH
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
_uidna_IDNToASCII_56 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?getNextSeparator@@YAHPA_WHPAPA_WPAC@Z
_TEXT	SEGMENT
_i$10488 = -20						; size = 4
_i$10481 = -8						; size = 4
_src$ = 8						; size = 4
_srcLength$ = 12					; size = 4
_limit$ = 16						; size = 4
_done$ = 20						; size = 4
?getNextSeparator@@YAHPA_WHPAPA_WPAC@Z PROC		; getNextSeparator, COMDAT
; Line 146
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 147
	cmp	DWORD PTR _srcLength$[ebp], -1
	jne	SHORT $LN11@getNextSep
; Line 149
	mov	DWORD PTR _i$10481[ebp], 0
	jmp	SHORT $LN10@getNextSep
$LN9@getNextSep:
	mov	eax, DWORD PTR _i$10481[ebp]
	add	eax, 1
	mov	DWORD PTR _i$10481[ebp], eax
$LN10@getNextSep:
; Line 150
	mov	eax, DWORD PTR _i$10481[ebp]
	mov	ecx, DWORD PTR _src$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	test	edx, edx
	jne	SHORT $LN7@getNextSep
; Line 151
	mov	eax, DWORD PTR _i$10481[ebp]
	mov	ecx, DWORD PTR _src$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	eax, DWORD PTR _limit$[ebp]
	mov	DWORD PTR [eax], edx
; Line 152
	mov	eax, DWORD PTR _done$[ebp]
	mov	BYTE PTR [eax], 1
; Line 153
	mov	eax, DWORD PTR _i$10481[ebp]
	jmp	$LN12@getNextSep
$LN7@getNextSep:
; Line 155
	mov	eax, DWORD PTR _i$10481[ebp]
	mov	ecx, DWORD PTR _src$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	push	edx
	call	?isLabelSeparator@@YAC_W@Z		; isLabelSeparator
	add	esp, 4
	movsx	eax, al
	test	eax, eax
	je	SHORT $LN6@getNextSep
; Line 156
	mov	eax, DWORD PTR _i$10481[ebp]
	mov	ecx, DWORD PTR _src$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2+2]
	mov	eax, DWORD PTR _limit$[ebp]
	mov	DWORD PTR [eax], edx
; Line 157
	mov	eax, DWORD PTR _i$10481[ebp]
	jmp	SHORT $LN12@getNextSep
$LN6@getNextSep:
; Line 160
	jmp	SHORT $LN9@getNextSep
	jmp	SHORT $LN12@getNextSep
$LN11@getNextSep:
; Line 163
	mov	DWORD PTR _i$10488[ebp], 0
	jmp	SHORT $LN4@getNextSep
$LN3@getNextSep:
	mov	eax, DWORD PTR _i$10488[ebp]
	add	eax, 1
	mov	DWORD PTR _i$10488[ebp], eax
$LN4@getNextSep:
	mov	eax, DWORD PTR _i$10488[ebp]
	cmp	eax, DWORD PTR _srcLength$[ebp]
	jge	SHORT $LN2@getNextSep
; Line 164
	mov	eax, DWORD PTR _i$10488[ebp]
	mov	ecx, DWORD PTR _src$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	push	edx
	call	?isLabelSeparator@@YAC_W@Z		; isLabelSeparator
	add	esp, 4
	movsx	eax, al
	test	eax, eax
	je	SHORT $LN1@getNextSep
; Line 165
	mov	eax, DWORD PTR _i$10488[ebp]
	mov	ecx, DWORD PTR _src$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2+2]
	mov	eax, DWORD PTR _limit$[ebp]
	mov	DWORD PTR [eax], edx
; Line 166
	mov	eax, DWORD PTR _i$10488[ebp]
	jmp	SHORT $LN12@getNextSep
$LN1@getNextSep:
; Line 168
	jmp	SHORT $LN3@getNextSep
$LN2@getNextSep:
; Line 171
	mov	eax, DWORD PTR _srcLength$[ebp]
	mov	ecx, DWORD PTR _src$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	eax, DWORD PTR _limit$[ebp]
	mov	DWORD PTR [eax], edx
; Line 172
	mov	eax, DWORD PTR _done$[ebp]
	mov	BYTE PTR [eax], 1
; Line 174
	mov	eax, DWORD PTR _i$10488[ebp]
$LN12@getNextSep:
; Line 176
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?getNextSeparator@@YAHPA_WHPAPA_WPAC@Z ENDP		; getNextSeparator
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?isLabelSeparator@@YAC_W@Z
_TEXT	SEGMENT
tv65 = -196						; size = 4
_ch$ = 8						; size = 2
?isLabelSeparator@@YAC_W@Z PROC				; isLabelSeparator, COMDAT
; Line 129
	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 130
	movzx	eax, WORD PTR _ch$[ebp]
	mov	DWORD PTR tv65[ebp], eax
	cmp	DWORD PTR tv65[ebp], 65294		; 0000ff0eH
	jg	SHORT $LN7@isLabelSep
	cmp	DWORD PTR tv65[ebp], 65294		; 0000ff0eH
	je	SHORT $LN2@isLabelSep
	cmp	DWORD PTR tv65[ebp], 46			; 0000002eH
	je	SHORT $LN2@isLabelSep
	cmp	DWORD PTR tv65[ebp], 12290		; 00003002H
	je	SHORT $LN2@isLabelSep
	jmp	SHORT $LN1@isLabelSep
$LN7@isLabelSep:
	cmp	DWORD PTR tv65[ebp], 65377		; 0000ff61H
	je	SHORT $LN2@isLabelSep
	jmp	SHORT $LN1@isLabelSep
$LN2@isLabelSep:
; Line 135
	mov	al, 1
	jmp	SHORT $LN5@isLabelSep
$LN1@isLabelSep:
; Line 137
	xor	al, al
$LN5@isLabelSep:
; Line 139
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?isLabelSeparator@@YAC_W@Z ENDP				; isLabelSeparator
_TEXT	ENDS
PUBLIC	_uidna_IDNToUnicode_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _uidna_IDNToUnicode_56
_TEXT	SEGMENT
_done$ = -113						; size = 1
_labelReqLength$ = -104					; size = 4
_labelLen$ = -92					; size = 4
_remainingDestCapacity$ = -80				; size = 4
_remainingLen$ = -68					; size = 4
_currentDest$ = -56					; size = 4
_labelStart$ = -44					; size = 4
_delimiter$ = -32					; size = 4
_nameprep$ = -20					; size = 4
_reqLength$ = -8					; size = 4
_src$ = 8						; size = 4
_srcLength$ = 12					; size = 4
_dest$ = 16						; size = 4
_destCapacity$ = 20					; size = 4
_options$ = 24						; size = 4
_parseError$ = 28					; size = 4
_status$ = 32						; size = 4
_uidna_IDNToUnicode_56 PROC				; COMDAT
; Line 765
	push	ebp
	mov	ebp, esp
	sub	esp, 312				; 00000138H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-312]
	mov	ecx, 78					; 0000004eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 767
	cmp	DWORD PTR _status$[ebp], 0
	je	SHORT $LN14@uidna_IDNT@2
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN15@uidna_IDNT@2
$LN14@uidna_IDNT@2:
; Line 768
	xor	eax, eax
	jmp	$LN16@uidna_IDNT@2
$LN15@uidna_IDNT@2:
; Line 770
	cmp	DWORD PTR _src$[ebp], 0
	je	SHORT $LN12@uidna_IDNT@2
	cmp	DWORD PTR _srcLength$[ebp], -1
	jl	SHORT $LN12@uidna_IDNT@2
	cmp	DWORD PTR _destCapacity$[ebp], 0
	jl	SHORT $LN12@uidna_IDNT@2
	cmp	DWORD PTR _dest$[ebp], 0
	jne	SHORT $LN13@uidna_IDNT@2
	cmp	DWORD PTR _destCapacity$[ebp], 0
	jle	SHORT $LN13@uidna_IDNT@2
$LN12@uidna_IDNT@2:
; Line 771
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 1
; Line 772
	xor	eax, eax
	jmp	$LN16@uidna_IDNT@2
$LN13@uidna_IDNT@2:
; Line 775
	mov	DWORD PTR _reqLength$[ebp], 0
; Line 777
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	push	0
	call	_usprep_openByType_56
	add	esp, 8
	mov	DWORD PTR _nameprep$[ebp], eax
; Line 779
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN11@uidna_IDNT@2
; Line 780
	xor	eax, eax
	jmp	$LN16@uidna_IDNT@2
$LN11@uidna_IDNT@2:
; Line 784
	mov	eax, DWORD PTR _src$[ebp]
	mov	DWORD PTR _delimiter$[ebp], eax
; Line 785
	mov	eax, DWORD PTR _src$[ebp]
	mov	DWORD PTR _labelStart$[ebp], eax
; Line 786
	mov	eax, DWORD PTR _dest$[ebp]
	mov	DWORD PTR _currentDest$[ebp], eax
; Line 787
	mov	eax, DWORD PTR _srcLength$[ebp]
	mov	DWORD PTR _remainingLen$[ebp], eax
; Line 788
	mov	eax, DWORD PTR _destCapacity$[ebp]
	mov	DWORD PTR _remainingDestCapacity$[ebp], eax
; Line 789
	mov	DWORD PTR _labelLen$[ebp], 0
	mov	DWORD PTR _labelReqLength$[ebp], 0
; Line 790
	mov	BYTE PTR _done$[ebp], 0
$LN10@uidna_IDNT@2:
; Line 794
	lea	eax, DWORD PTR _done$[ebp]
	push	eax
	lea	ecx, DWORD PTR _delimiter$[ebp]
	push	ecx
	mov	edx, DWORD PTR _remainingLen$[ebp]
	push	edx
	mov	eax, DWORD PTR _labelStart$[ebp]
	push	eax
	call	?getNextSeparator@@YAHPA_WHPAPA_WPAC@Z	; getNextSeparator
	add	esp, 16					; 00000010H
	mov	DWORD PTR _labelLen$[ebp], eax
; Line 810
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _parseError$[ebp]
	push	ecx
	mov	edx, DWORD PTR _nameprep$[ebp]
	push	edx
	mov	eax, DWORD PTR _options$[ebp]
	push	eax
	mov	ecx, DWORD PTR _remainingDestCapacity$[ebp]
	push	ecx
	mov	edx, DWORD PTR _currentDest$[ebp]
	push	edx
	mov	eax, DWORD PTR _labelLen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _labelStart$[ebp]
	push	ecx
	call	?_internal_toUnicode@@YAHPB_WHPA_WHHPAUUStringPrepProfile@@PAUUParseError@@PAW4UErrorCode@@@Z ; _internal_toUnicode
	add	esp, 32					; 00000020H
	mov	DWORD PTR _labelReqLength$[ebp], eax
; Line 812
	mov	eax, DWORD PTR _status$[ebp]
	cmp	DWORD PTR [eax], 15			; 0000000fH
	jne	SHORT $LN8@uidna_IDNT@2
; Line 813
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 0
; Line 814
	mov	DWORD PTR _remainingDestCapacity$[ebp], 0
$LN8@uidna_IDNT@2:
; Line 817
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN7@uidna_IDNT@2
; Line 818
	jmp	$LN9@uidna_IDNT@2
$LN7@uidna_IDNT@2:
; Line 821
	mov	eax, DWORD PTR _reqLength$[ebp]
	add	eax, DWORD PTR _labelReqLength$[ebp]
	mov	DWORD PTR _reqLength$[ebp], eax
; Line 823
	mov	eax, DWORD PTR _labelReqLength$[ebp]
	cmp	eax, DWORD PTR _remainingDestCapacity$[ebp]
	jge	SHORT $LN6@uidna_IDNT@2
; Line 824
	mov	eax, DWORD PTR _labelReqLength$[ebp]
	mov	ecx, DWORD PTR _currentDest$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR _currentDest$[ebp], edx
; Line 825
	mov	eax, DWORD PTR _remainingDestCapacity$[ebp]
	sub	eax, DWORD PTR _labelReqLength$[ebp]
	mov	DWORD PTR _remainingDestCapacity$[ebp], eax
; Line 826
	jmp	SHORT $LN5@uidna_IDNT@2
$LN6@uidna_IDNT@2:
; Line 828
	mov	DWORD PTR _remainingDestCapacity$[ebp], 0
$LN5@uidna_IDNT@2:
; Line 831
	movsx	eax, BYTE PTR _done$[ebp]
	cmp	eax, 1
	jne	SHORT $LN4@uidna_IDNT@2
; Line 832
	jmp	SHORT $LN9@uidna_IDNT@2
$LN4@uidna_IDNT@2:
; Line 837
	cmp	DWORD PTR _remainingDestCapacity$[ebp], 0
	jle	SHORT $LN3@uidna_IDNT@2
; Line 838
	mov	eax, DWORD PTR _currentDest$[ebp]
	mov	ecx, DWORD PTR _labelLen$[ebp]
	mov	edx, DWORD PTR _labelStart$[ebp]
	mov	cx, WORD PTR [edx+ecx*2]
	mov	WORD PTR [eax], cx
	mov	edx, DWORD PTR _currentDest$[ebp]
	add	edx, 2
	mov	DWORD PTR _currentDest$[ebp], edx
; Line 839
	mov	eax, DWORD PTR _remainingDestCapacity$[ebp]
	sub	eax, 1
	mov	DWORD PTR _remainingDestCapacity$[ebp], eax
$LN3@uidna_IDNT@2:
; Line 841
	mov	eax, DWORD PTR _reqLength$[ebp]
	add	eax, 1
	mov	DWORD PTR _reqLength$[ebp], eax
; Line 843
	mov	eax, DWORD PTR _delimiter$[ebp]
	mov	DWORD PTR _labelStart$[ebp], eax
; Line 844
	cmp	DWORD PTR _remainingLen$[ebp], 0
	jle	SHORT $LN2@uidna_IDNT@2
; Line 845
	mov	eax, DWORD PTR _delimiter$[ebp]
	sub	eax, DWORD PTR _src$[ebp]
	sar	eax, 1
	mov	ecx, DWORD PTR _srcLength$[ebp]
	sub	ecx, eax
	mov	DWORD PTR _remainingLen$[ebp], ecx
$LN2@uidna_IDNT@2:
; Line 848
	jmp	$LN10@uidna_IDNT@2
$LN9@uidna_IDNT@2:
; Line 850
	cmp	DWORD PTR _reqLength$[ebp], 255		; 000000ffH
	jle	SHORT $LN1@uidna_IDNT@2
; Line 851
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 66568			; 00010408H
$LN1@uidna_IDNT@2:
; Line 854
	mov	eax, DWORD PTR _nameprep$[ebp]
	push	eax
	call	_usprep_close_56
	add	esp, 4
; Line 856
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _reqLength$[ebp]
	push	ecx
	mov	edx, DWORD PTR _destCapacity$[ebp]
	push	edx
	mov	eax, DWORD PTR _dest$[ebp]
	push	eax
	call	_u_terminateUChars_56
	add	esp, 16					; 00000010H
$LN16@uidna_IDNT@2:
; Line 857
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN21@uidna_IDNT@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 312				; 00000138H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN21@uidna_IDNT@2:
	DD	2
	DD	$LN20@uidna_IDNT@2
$LN20@uidna_IDNT@2:
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN18@uidna_IDNT@2
	DD	-113					; ffffff8fH
	DD	1
	DD	$LN19@uidna_IDNT@2
$LN19@uidna_IDNT@2:
	DB	100					; 00000064H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	101					; 00000065H
	DB	0
$LN18@uidna_IDNT@2:
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	108					; 0000006cH
	DB	105					; 00000069H
	DB	109					; 0000006dH
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
_uidna_IDNToUnicode_56 ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_uidna_compare_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _uidna_compare_56
_TEXT	SEGMENT
_parseError$ = -1204					; size = 72
_result$ = -1124					; size = 4
_b2Capacity$ = -1112					; size = 4
_b1Capacity$ = -1100					; size = 4
_b2Len$ = -1088						; size = 4
_b1Len$ = -1076						; size = 4
_b2$ = -1064						; size = 4
_b1$ = -1052						; size = 4
_b2Stack$ = -1040					; size = 512
_b1Stack$ = -520					; size = 512
__$ArrayPad$ = -4					; size = 4
_s1$ = 8						; size = 4
_length1$ = 12						; size = 4
_s2$ = 16						; size = 4
_length2$ = 20						; size = 4
_options$ = 24						; size = 4
_status$ = 28						; size = 4
_uidna_compare_56 PROC					; COMDAT
; Line 863
	push	ebp
	mov	ebp, esp
	sub	esp, 1400				; 00000578H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-1400]
	mov	ecx, 350				; 0000015eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 865
	cmp	DWORD PTR _status$[ebp], 0
	je	SHORT $LN9@uidna_comp
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN10@uidna_comp
$LN9@uidna_comp:
; Line 866
	or	eax, -1
	jmp	$LN11@uidna_comp
$LN10@uidna_comp:
; Line 870
	lea	eax, DWORD PTR _b1Stack$[ebp]
	mov	DWORD PTR _b1$[ebp], eax
	lea	eax, DWORD PTR _b2Stack$[ebp]
	mov	DWORD PTR _b2$[ebp], eax
; Line 871
	mov	DWORD PTR _b1Capacity$[ebp], 256	; 00000100H
	mov	DWORD PTR _b2Capacity$[ebp], 256	; 00000100H
; Line 872
	mov	DWORD PTR _result$[ebp], -1
; Line 876
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	lea	ecx, DWORD PTR _parseError$[ebp]
	push	ecx
	mov	edx, DWORD PTR _options$[ebp]
	push	edx
	mov	eax, DWORD PTR _b1Capacity$[ebp]
	push	eax
	mov	ecx, DWORD PTR _b1$[ebp]
	push	ecx
	mov	edx, DWORD PTR _length1$[ebp]
	push	edx
	mov	eax, DWORD PTR _s1$[ebp]
	push	eax
	call	_uidna_IDNToASCII_56
	add	esp, 28					; 0000001cH
	mov	DWORD PTR _b1Len$[ebp], eax
; Line 877
	mov	eax, DWORD PTR _status$[ebp]
	cmp	DWORD PTR [eax], 15			; 0000000fH
	jne	SHORT $LN8@uidna_comp
; Line 879
	mov	eax, DWORD PTR _b1Len$[ebp]
	shl	eax, 1
	push	eax
	call	_uprv_malloc_56
	add	esp, 4
	mov	DWORD PTR _b1$[ebp], eax
; Line 880
	cmp	DWORD PTR _b1$[ebp], 0
	jne	SHORT $LN7@uidna_comp
; Line 881
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 7
; Line 882
	jmp	$CLEANUP$10791
	jmp	$CLEANUP$10791
$LN7@uidna_comp:
; Line 885
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 0
; Line 887
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	lea	ecx, DWORD PTR _parseError$[ebp]
	push	ecx
	mov	edx, DWORD PTR _options$[ebp]
	push	edx
	mov	eax, DWORD PTR _b1Len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _b1$[ebp]
	push	ecx
	mov	edx, DWORD PTR _length1$[ebp]
	push	edx
	mov	eax, DWORD PTR _s1$[ebp]
	push	eax
	call	_uidna_IDNToASCII_56
	add	esp, 28					; 0000001cH
	mov	DWORD PTR _b1Len$[ebp], eax
$LN8@uidna_comp:
; Line 891
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	lea	ecx, DWORD PTR _parseError$[ebp]
	push	ecx
	mov	edx, DWORD PTR _options$[ebp]
	push	edx
	mov	eax, DWORD PTR _b2Capacity$[ebp]
	push	eax
	mov	ecx, DWORD PTR _b2$[ebp]
	push	ecx
	mov	edx, DWORD PTR _length2$[ebp]
	push	edx
	mov	eax, DWORD PTR _s2$[ebp]
	push	eax
	call	_uidna_IDNToASCII_56
	add	esp, 28					; 0000001cH
	mov	DWORD PTR _b2Len$[ebp], eax
; Line 892
	mov	eax, DWORD PTR _status$[ebp]
	cmp	DWORD PTR [eax], 15			; 0000000fH
	jne	SHORT $LN5@uidna_comp
; Line 894
	mov	eax, DWORD PTR _b2Len$[ebp]
	shl	eax, 1
	push	eax
	call	_uprv_malloc_56
	add	esp, 4
	mov	DWORD PTR _b2$[ebp], eax
; Line 895
	cmp	DWORD PTR _b2$[ebp], 0
	jne	SHORT $LN4@uidna_comp
; Line 896
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 7
; Line 897
	jmp	SHORT $CLEANUP$10791
	jmp	SHORT $CLEANUP$10791
$LN4@uidna_comp:
; Line 900
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 0
; Line 902
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	lea	ecx, DWORD PTR _parseError$[ebp]
	push	ecx
	mov	edx, DWORD PTR _options$[ebp]
	push	edx
	mov	eax, DWORD PTR _b2Len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _b2$[ebp]
	push	ecx
	mov	edx, DWORD PTR _length2$[ebp]
	push	edx
	mov	eax, DWORD PTR _s2$[ebp]
	push	eax
	call	_uidna_IDNToASCII_56
	add	esp, 28					; 0000001cH
	mov	DWORD PTR _b2Len$[ebp], eax
$LN5@uidna_comp:
; Line 906
	mov	eax, DWORD PTR _b2Len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _b2$[ebp]
	push	ecx
	mov	edx, DWORD PTR _b1Len$[ebp]
	push	edx
	mov	eax, DWORD PTR _b1$[ebp]
	push	eax
	call	?compareCaseInsensitiveASCII@@YAHPB_WH0H@Z ; compareCaseInsensitiveASCII
	add	esp, 16					; 00000010H
	mov	DWORD PTR _result$[ebp], eax
$CLEANUP$10791:
; Line 909
	mov	eax, DWORD PTR _b1$[ebp]
	lea	ecx, DWORD PTR _b1Stack$[ebp]
	cmp	eax, ecx
	je	SHORT $LN2@uidna_comp
; Line 910
	mov	eax, DWORD PTR _b1$[ebp]
	push	eax
	call	_uprv_free_56
	add	esp, 4
$LN2@uidna_comp:
; Line 913
	mov	eax, DWORD PTR _b2$[ebp]
	lea	ecx, DWORD PTR _b2Stack$[ebp]
	cmp	eax, ecx
	je	SHORT $LN1@uidna_comp
; Line 914
	mov	eax, DWORD PTR _b2$[ebp]
	push	eax
	call	_uprv_free_56
	add	esp, 4
$LN1@uidna_comp:
; Line 917
	mov	eax, DWORD PTR _result$[ebp]
$LN11@uidna_comp:
; Line 918
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN17@uidna_comp
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 1400				; 00000578H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN17@uidna_comp:
	DD	3
	DD	$LN16@uidna_comp
$LN16@uidna_comp:
	DD	-520					; fffffdf8H
	DD	512					; 00000200H
	DD	$LN13@uidna_comp
	DD	-1040					; fffffbf0H
	DD	512					; 00000200H
	DD	$LN14@uidna_comp
	DD	-1204					; fffffb4cH
	DD	72					; 00000048H
	DD	$LN15@uidna_comp
$LN15@uidna_comp:
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	69					; 00000045H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
$LN14@uidna_comp:
	DB	98					; 00000062H
	DB	50					; 00000032H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
$LN13@uidna_comp:
	DB	98					; 00000062H
	DB	49					; 00000031H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_uidna_compare_56 ENDP
_TEXT	ENDS
END
