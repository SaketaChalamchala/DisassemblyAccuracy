; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\mozilla\intl\icu\source\common\ucnv_u16.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	__UTF16BEData_56
PUBLIC	__UTF16LEData_56
PUBLIC	__UTF16Data_56
EXTRN	_ucnv_getNonSurrogateUnicodeSet_56:PROC
CONST	SEGMENT
?bom@?3??_UTF16BEFromUnicodeWithOffsets@@9@9 DB 0feH	; `_UTF16BEFromUnicodeWithOffsets'::`4'::bom
	DB	0ffH
	ORG $+6
__UTF16BEImpl DD 05H
	DD	00H
	DD	00H
	DD	FLAT:__UTF16BEOpen
	DD	00H
	DD	FLAT:__UTF16BEReset
	DD	FLAT:__UTF16BEToUnicodeWithOffsets
	DD	FLAT:__UTF16BEToUnicodeWithOffsets
	DD	FLAT:__UTF16BEFromUnicodeWithOffsets
	DD	FLAT:__UTF16BEFromUnicodeWithOffsets
	DD	FLAT:__UTF16BEGetNextUChar
	DD	00H
	DD	FLAT:__UTF16BEGetName
	DD	00H
	DD	00H
	DD	FLAT:_ucnv_getNonSurrogateUnicodeSet_56
	ORG $+8
__UTF16BEStaticData DD 064H
	DB	'UTF-16BE', 00H
	ORG $+51
	DD	04b0H
	DB	00H
	DB	05H
	DB	02H
	DB	02H
	DB	0ffH
	DB	0fdH
	DB	00H
	DB	00H
	DB	02H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
?bom@?3??_UTF16LEFromUnicodeWithOffsets@@9@9 DB 0ffH	; `_UTF16LEFromUnicodeWithOffsets'::`4'::bom
	DB	0feH
	ORG $+2
__UTF16BEData_56 DD 0e4H
	DD	0ffffffffH
	DD	00H
	DD	FLAT:__UTF16BEStaticData
	DB	00H
	DB	00H
	ORG $+2
	DD	FLAT:__UTF16BEImpl
	DD	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+1
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	ORG $+126
	DD	00H
	DD	00H
	DD	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+1
	DW	00H
	ORG $+2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	ORG $+4
__UTF16LEImpl DD 06H
	DD	00H
	DD	00H
	DD	FLAT:__UTF16LEOpen
	DD	00H
	DD	FLAT:__UTF16LEReset
	DD	FLAT:__UTF16LEToUnicodeWithOffsets
	DD	FLAT:__UTF16LEToUnicodeWithOffsets
	DD	FLAT:__UTF16LEFromUnicodeWithOffsets
	DD	FLAT:__UTF16LEFromUnicodeWithOffsets
	DD	FLAT:__UTF16LEGetNextUChar
	DD	00H
	DD	FLAT:__UTF16LEGetName
	DD	00H
	DD	00H
	DD	FLAT:_ucnv_getNonSurrogateUnicodeSet_56
	ORG $+8
__UTF16LEStaticData DD 064H
	DB	'UTF-16LE', 00H
	ORG $+51
	DD	04b2H
	DB	00H
	DB	06H
	DB	02H
	DB	02H
	DB	0fdH
	DB	0ffH
	DB	00H
	DB	00H
	DB	02H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+4
__UTF16LEData_56 DD 0e4H
	DD	0ffffffffH
	DD	00H
	DD	FLAT:__UTF16LEStaticData
	DB	00H
	DB	00H
	ORG $+2
	DD	FLAT:__UTF16LEImpl
	DD	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+1
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	ORG $+126
	DD	00H
	DD	00H
	DD	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+1
	DW	00H
	ORG $+2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	ORG $+4
__UTF16Impl DD	01dH
	DD	00H
	DD	00H
	DD	FLAT:__UTF16Open
	DD	00H
	DD	FLAT:__UTF16Reset
	DD	FLAT:__UTF16ToUnicodeWithOffsets
	DD	FLAT:__UTF16ToUnicodeWithOffsets
	DD	FLAT:__UTF16LEFromUnicodeWithOffsets
	DD	FLAT:__UTF16LEFromUnicodeWithOffsets
	DD	FLAT:__UTF16GetNextUChar
	DD	00H
	DD	FLAT:__UTF16GetName
	DD	00H
	DD	00H
	DD	FLAT:_ucnv_getNonSurrogateUnicodeSet_56
	ORG $+8
__UTF16StaticData DD 064H
	DB	'UTF-16', 00H
	ORG $+53
	DD	04b4H
	DB	00H
	DB	01dH
	DB	02H
	DB	02H
	DB	0fdH
	DB	0ffH
	DB	00H
	DB	00H
	DB	02H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+4
__UTF16Data_56 DD 0e4H
	DD	0ffffffffH
	DD	00H
	DD	FLAT:__UTF16StaticData
	DB	00H
	DB	00H
	ORG $+2
	DD	FLAT:__UTF16Impl
	DD	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+1
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	ORG $+126
	DD	00H
	DD	00H
	DD	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+1
	DW	00H
	ORG $+2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	ORG $+4
__UTF16v2Impl DD 01dH
	DD	00H
	DD	00H
	DD	FLAT:__UTF16Open
	DD	00H
	DD	FLAT:__UTF16Reset
	DD	FLAT:__UTF16ToUnicodeWithOffsets
	DD	FLAT:__UTF16ToUnicodeWithOffsets
	DD	FLAT:__UTF16BEFromUnicodeWithOffsets
	DD	FLAT:__UTF16BEFromUnicodeWithOffsets
	DD	FLAT:__UTF16GetNextUChar
	DD	00H
	DD	FLAT:__UTF16GetName
	DD	00H
	DD	00H
	DD	FLAT:_ucnv_getNonSurrogateUnicodeSet_56
	ORG $+8
__UTF16v2StaticData DD 064H
	DB	'UTF-16,version=2', 00H
	ORG $+43
	DD	04b4H
	DB	00H
	DB	01dH
	DB	02H
	DB	02H
	DB	0ffH
	DB	0fdH
	DB	00H
	DB	00H
	DB	02H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+4
__UTF16v2Data DD 0e4H
	DD	0ffffffffH
	DD	00H
	DD	FLAT:__UTF16v2StaticData
	DB	00H
	DB	00H
	ORG $+2
	DD	FLAT:__UTF16v2Impl
	DD	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+1
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	ORG $+126
	DD	00H
	DD	00H
	DD	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+1
	DW	00H
	ORG $+2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
CONST	ENDS
EXTRN	_ucnv_fromUWriteBytes_56:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File d:\mozilla\intl\icu\source\common\ucnv_u16.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT __UTF16BEFromUnicodeWithOffsets
_TEXT	SEGMENT
tv233 = -328						; size = 4
_count$8576 = -128					; size = 4
_overflow$ = -116					; size = 4
_trail$ = -104						; size = 2
_c$ = -92						; size = 2
_sourceIndex$ = -80					; size = 4
_length$ = -68						; size = 4
_targetCapacity$ = -56					; size = 4
_offsets$ = -44						; size = 4
_target$ = -32						; size = 4
_source$ = -20						; size = 4
_cnv$ = -8						; size = 4
_pArgs$ = 8						; size = 4
_pErrorCode$ = 12					; size = 4
__UTF16BEFromUnicodeWithOffsets PROC			; COMDAT
; Line 49
	push	ebp
	mov	ebp, esp
	sub	esp, 328				; 00000148H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-328]
	mov	ecx, 82					; 00000052H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 59
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _source$[ebp], ecx
; Line 60
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	sub	ecx, DWORD PTR _source$[ebp]
	sar	ecx, 1
	mov	DWORD PTR _length$[ebp], ecx
; Line 61
	jne	SHORT $LN36@UTF16BEFro
; Line 63
	jmp	$LN37@UTF16BEFro
$LN36@UTF16BEFro:
; Line 66
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _cnv$[ebp], ecx
; Line 69
	mov	eax, DWORD PTR _cnv$[ebp]
	cmp	DWORD PTR [eax+52], 1
	jne	SHORT $LN35@UTF16BEFro
; Line 75
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	push	-1
	mov	ecx, DWORD PTR _pArgs$[ebp]
	add	ecx, 24					; 00000018H
	push	ecx
	mov	edx, DWORD PTR _pArgs$[ebp]
	mov	eax, DWORD PTR [edx+20]
	push	eax
	mov	ecx, DWORD PTR _pArgs$[ebp]
	add	ecx, 16					; 00000010H
	push	ecx
	push	2
	push	OFFSET ?bom@?3??_UTF16BEFromUnicodeWithOffsets@@9@9
	mov	edx, DWORD PTR _cnv$[ebp]
	push	edx
	call	_ucnv_fromUWriteBytes_56
	add	esp, 32					; 00000020H
; Line 76
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	DWORD PTR [eax+52], 0
$LN35@UTF16BEFro:
; Line 79
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _target$[ebp], ecx
; Line 80
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR _target$[ebp]
	cmp	ecx, DWORD PTR [eax+20]
	jb	SHORT $LN34@UTF16BEFro
; Line 81
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
; Line 82
	jmp	$LN37@UTF16BEFro
$LN34@UTF16BEFro:
; Line 85
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	sub	ecx, DWORD PTR _target$[ebp]
	mov	DWORD PTR _targetCapacity$[ebp], ecx
; Line 86
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR _offsets$[ebp], ecx
; Line 87
	mov	DWORD PTR _sourceIndex$[ebp], 0
; Line 91
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	cx, WORD PTR [eax+56]
	mov	WORD PTR _c$[ebp], cx
	movzx	edx, WORD PTR _c$[ebp]
	test	edx, edx
	je	$LN33@UTF16BEFro
	mov	eax, DWORD PTR _source$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR _trail$[ebp], cx
	movzx	edx, WORD PTR _trail$[ebp]
	and	edx, -1024				; fffffc00H
	cmp	edx, 56320				; 0000dc00H
	jne	$LN33@UTF16BEFro
	cmp	DWORD PTR _targetCapacity$[ebp], 4
	jb	$LN33@UTF16BEFro
; Line 93
	mov	eax, DWORD PTR _source$[ebp]
	add	eax, 2
	mov	DWORD PTR _source$[ebp], eax
; Line 94
	mov	eax, DWORD PTR _length$[ebp]
	sub	eax, 1
	mov	DWORD PTR _length$[ebp], eax
; Line 95
	movzx	eax, WORD PTR _c$[ebp]
	sar	eax, 8
	mov	ecx, DWORD PTR _target$[ebp]
	mov	BYTE PTR [ecx], al
; Line 96
	mov	eax, DWORD PTR _target$[ebp]
	mov	cl, BYTE PTR _c$[ebp]
	mov	BYTE PTR [eax+1], cl
; Line 97
	movzx	eax, WORD PTR _trail$[ebp]
	sar	eax, 8
	mov	ecx, DWORD PTR _target$[ebp]
	mov	BYTE PTR [ecx+2], al
; Line 98
	mov	eax, DWORD PTR _target$[ebp]
	mov	cl, BYTE PTR _trail$[ebp]
	mov	BYTE PTR [eax+3], cl
; Line 99
	mov	eax, DWORD PTR _target$[ebp]
	add	eax, 4
	mov	DWORD PTR _target$[ebp], eax
; Line 100
	mov	eax, DWORD PTR _targetCapacity$[ebp]
	sub	eax, 4
	mov	DWORD PTR _targetCapacity$[ebp], eax
; Line 101
	cmp	DWORD PTR _offsets$[ebp], 0
	je	SHORT $LN32@UTF16BEFro
; Line 102
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	DWORD PTR [eax], -1
	mov	ecx, DWORD PTR _offsets$[ebp]
	add	ecx, 4
	mov	DWORD PTR _offsets$[ebp], ecx
; Line 103
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	DWORD PTR [eax], -1
	mov	ecx, DWORD PTR _offsets$[ebp]
	add	ecx, 4
	mov	DWORD PTR _offsets$[ebp], ecx
; Line 104
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	DWORD PTR [eax], -1
	mov	ecx, DWORD PTR _offsets$[ebp]
	add	ecx, 4
	mov	DWORD PTR _offsets$[ebp], ecx
; Line 105
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	DWORD PTR [eax], -1
	mov	ecx, DWORD PTR _offsets$[ebp]
	add	ecx, 4
	mov	DWORD PTR _offsets$[ebp], ecx
$LN32@UTF16BEFro:
; Line 107
	mov	DWORD PTR _sourceIndex$[ebp], 1
; Line 108
	xor	eax, eax
	mov	WORD PTR _c$[ebp], ax
	movzx	ecx, WORD PTR _c$[ebp]
	mov	edx, DWORD PTR _cnv$[ebp]
	mov	DWORD PTR [edx+56], ecx
$LN33@UTF16BEFro:
; Line 111
	movzx	eax, WORD PTR _c$[ebp]
	test	eax, eax
	jne	$LN31@UTF16BEFro
; Line 113
	mov	eax, DWORD PTR _length$[ebp]
	shl	eax, 1
	mov	DWORD PTR _count$8576[ebp], eax
; Line 114
	mov	eax, DWORD PTR _count$8576[ebp]
	cmp	eax, DWORD PTR _targetCapacity$[ebp]
	jbe	SHORT $LN30@UTF16BEFro
; Line 115
	mov	eax, DWORD PTR _targetCapacity$[ebp]
	and	eax, -2					; fffffffeH
	mov	DWORD PTR _count$8576[ebp], eax
$LN30@UTF16BEFro:
; Line 118
	mov	eax, DWORD PTR _targetCapacity$[ebp]
	sub	eax, DWORD PTR _count$8576[ebp]
	mov	DWORD PTR _targetCapacity$[ebp], eax
; Line 119
	mov	eax, DWORD PTR _count$8576[ebp]
	shr	eax, 1
	mov	DWORD PTR _count$8576[ebp], eax
; Line 120
	mov	eax, DWORD PTR _length$[ebp]
	sub	eax, DWORD PTR _count$8576[ebp]
	mov	DWORD PTR _length$[ebp], eax
; Line 122
	cmp	DWORD PTR _offsets$[ebp], 0
	jne	$LN21@UTF16BEFro
$LN28@UTF16BEFro:
; Line 123
	cmp	DWORD PTR _count$8576[ebp], 0
	jbe	$LN27@UTF16BEFro
; Line 124
	mov	eax, DWORD PTR _source$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR _c$[ebp], cx
	mov	edx, DWORD PTR _source$[ebp]
	add	edx, 2
	mov	DWORD PTR _source$[ebp], edx
; Line 125
	movzx	eax, WORD PTR _c$[ebp]
	and	eax, -2048				; fffff800H
	cmp	eax, 55296				; 0000d800H
	je	SHORT $LN26@UTF16BEFro
; Line 126
	movzx	eax, WORD PTR _c$[ebp]
	sar	eax, 8
	mov	ecx, DWORD PTR _target$[ebp]
	mov	BYTE PTR [ecx], al
; Line 127
	mov	eax, DWORD PTR _target$[ebp]
	mov	cl, BYTE PTR _c$[ebp]
	mov	BYTE PTR [eax+1], cl
; Line 128
	mov	eax, DWORD PTR _target$[ebp]
	add	eax, 2
	mov	DWORD PTR _target$[ebp], eax
	jmp	SHORT $LN25@UTF16BEFro
$LN26@UTF16BEFro:
; Line 129
	movzx	eax, WORD PTR _c$[ebp]
	and	eax, 1024				; 00000400H
	jne	SHORT $LN24@UTF16BEFro
	cmp	DWORD PTR _count$8576[ebp], 2
	jb	SHORT $LN24@UTF16BEFro
	mov	eax, DWORD PTR _source$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR _trail$[ebp], cx
	movzx	edx, WORD PTR _trail$[ebp]
	and	edx, -1024				; fffffc00H
	cmp	edx, 56320				; 0000dc00H
	jne	SHORT $LN24@UTF16BEFro
; Line 130
	mov	eax, DWORD PTR _source$[ebp]
	add	eax, 2
	mov	DWORD PTR _source$[ebp], eax
; Line 131
	mov	eax, DWORD PTR _count$8576[ebp]
	sub	eax, 1
	mov	DWORD PTR _count$8576[ebp], eax
; Line 132
	movzx	eax, WORD PTR _c$[ebp]
	sar	eax, 8
	mov	ecx, DWORD PTR _target$[ebp]
	mov	BYTE PTR [ecx], al
; Line 133
	mov	eax, DWORD PTR _target$[ebp]
	mov	cl, BYTE PTR _c$[ebp]
	mov	BYTE PTR [eax+1], cl
; Line 134
	movzx	eax, WORD PTR _trail$[ebp]
	sar	eax, 8
	mov	ecx, DWORD PTR _target$[ebp]
	mov	BYTE PTR [ecx+2], al
; Line 135
	mov	eax, DWORD PTR _target$[ebp]
	mov	cl, BYTE PTR _trail$[ebp]
	mov	BYTE PTR [eax+3], cl
; Line 136
	mov	eax, DWORD PTR _target$[ebp]
	add	eax, 4
	mov	DWORD PTR _target$[ebp], eax
; Line 137
	jmp	SHORT $LN25@UTF16BEFro
$LN24@UTF16BEFro:
; Line 138
	jmp	SHORT $LN27@UTF16BEFro
$LN25@UTF16BEFro:
; Line 140
	mov	eax, DWORD PTR _count$8576[ebp]
	sub	eax, 1
	mov	DWORD PTR _count$8576[ebp], eax
; Line 141
	jmp	$LN28@UTF16BEFro
$LN27@UTF16BEFro:
; Line 142
	jmp	$LN22@UTF16BEFro
$LN21@UTF16BEFro:
; Line 143
	cmp	DWORD PTR _count$8576[ebp], 0
	jbe	$LN22@UTF16BEFro
; Line 144
	mov	eax, DWORD PTR _source$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR _c$[ebp], cx
	mov	edx, DWORD PTR _source$[ebp]
	add	edx, 2
	mov	DWORD PTR _source$[ebp], edx
; Line 145
	movzx	eax, WORD PTR _c$[ebp]
	and	eax, -2048				; fffff800H
	cmp	eax, 55296				; 0000d800H
	je	SHORT $LN19@UTF16BEFro
; Line 146
	movzx	eax, WORD PTR _c$[ebp]
	sar	eax, 8
	mov	ecx, DWORD PTR _target$[ebp]
	mov	BYTE PTR [ecx], al
; Line 147
	mov	eax, DWORD PTR _target$[ebp]
	mov	cl, BYTE PTR _c$[ebp]
	mov	BYTE PTR [eax+1], cl
; Line 148
	mov	eax, DWORD PTR _target$[ebp]
	add	eax, 2
	mov	DWORD PTR _target$[ebp], eax
; Line 149
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _sourceIndex$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
; Line 150
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _sourceIndex$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
	mov	eax, DWORD PTR _sourceIndex$[ebp]
	add	eax, 1
	mov	DWORD PTR _sourceIndex$[ebp], eax
	jmp	$LN18@UTF16BEFro
$LN19@UTF16BEFro:
; Line 151
	movzx	eax, WORD PTR _c$[ebp]
	and	eax, 1024				; 00000400H
	jne	$LN17@UTF16BEFro
	cmp	DWORD PTR _count$8576[ebp], 2
	jb	$LN17@UTF16BEFro
	mov	eax, DWORD PTR _source$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR _trail$[ebp], cx
	movzx	edx, WORD PTR _trail$[ebp]
	and	edx, -1024				; fffffc00H
	cmp	edx, 56320				; 0000dc00H
	jne	$LN17@UTF16BEFro
; Line 152
	mov	eax, DWORD PTR _source$[ebp]
	add	eax, 2
	mov	DWORD PTR _source$[ebp], eax
; Line 153
	mov	eax, DWORD PTR _count$8576[ebp]
	sub	eax, 1
	mov	DWORD PTR _count$8576[ebp], eax
; Line 154
	movzx	eax, WORD PTR _c$[ebp]
	sar	eax, 8
	mov	ecx, DWORD PTR _target$[ebp]
	mov	BYTE PTR [ecx], al
; Line 155
	mov	eax, DWORD PTR _target$[ebp]
	mov	cl, BYTE PTR _c$[ebp]
	mov	BYTE PTR [eax+1], cl
; Line 156
	movzx	eax, WORD PTR _trail$[ebp]
	sar	eax, 8
	mov	ecx, DWORD PTR _target$[ebp]
	mov	BYTE PTR [ecx+2], al
; Line 157
	mov	eax, DWORD PTR _target$[ebp]
	mov	cl, BYTE PTR _trail$[ebp]
	mov	BYTE PTR [eax+3], cl
; Line 158
	mov	eax, DWORD PTR _target$[ebp]
	add	eax, 4
	mov	DWORD PTR _target$[ebp], eax
; Line 159
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _sourceIndex$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
; Line 160
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _sourceIndex$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
; Line 161
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _sourceIndex$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
; Line 162
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _sourceIndex$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
; Line 163
	mov	eax, DWORD PTR _sourceIndex$[ebp]
	add	eax, 2
	mov	DWORD PTR _sourceIndex$[ebp], eax
; Line 164
	jmp	SHORT $LN18@UTF16BEFro
$LN17@UTF16BEFro:
; Line 165
	jmp	SHORT $LN22@UTF16BEFro
$LN18@UTF16BEFro:
; Line 167
	mov	eax, DWORD PTR _count$8576[ebp]
	sub	eax, 1
	mov	DWORD PTR _count$8576[ebp], eax
; Line 168
	jmp	$LN21@UTF16BEFro
$LN22@UTF16BEFro:
; Line 171
	cmp	DWORD PTR _count$8576[ebp], 0
	jne	SHORT $LN15@UTF16BEFro
; Line 173
	cmp	DWORD PTR _length$[ebp], 0
	jbe	SHORT $LN14@UTF16BEFro
	cmp	DWORD PTR _targetCapacity$[ebp], 0
	jbe	SHORT $LN14@UTF16BEFro
; Line 180
	mov	eax, DWORD PTR _source$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR _c$[ebp], cx
	movzx	edx, WORD PTR _c$[ebp]
	and	edx, -2048				; fffff800H
	mov	eax, DWORD PTR _source$[ebp]
	add	eax, 2
	mov	DWORD PTR _source$[ebp], eax
	cmp	edx, 55296				; 0000d800H
	jne	SHORT $LN39@UTF16BEFro
	mov	DWORD PTR tv233[ebp], 1
	jmp	SHORT $LN40@UTF16BEFro
$LN39@UTF16BEFro:
	mov	DWORD PTR tv233[ebp], 0
$LN40@UTF16BEFro:
	cmp	DWORD PTR tv233[ebp], 0
	jne	SHORT $LN13@UTF16BEFro
; Line 181
	movzx	eax, WORD PTR _c$[ebp]
	sar	eax, 8
	mov	BYTE PTR _overflow$[ebp], al
; Line 182
	mov	al, BYTE PTR _c$[ebp]
	mov	BYTE PTR _overflow$[ebp+1], al
; Line 183
	mov	DWORD PTR _length$[ebp], 2
; Line 184
	xor	eax, eax
	mov	WORD PTR _c$[ebp], ax
$LN13@UTF16BEFro:
; Line 187
	jmp	SHORT $LN12@UTF16BEFro
$LN14@UTF16BEFro:
; Line 188
	mov	DWORD PTR _length$[ebp], 0
; Line 189
	xor	eax, eax
	mov	WORD PTR _c$[ebp], ax
$LN12@UTF16BEFro:
; Line 191
	jmp	SHORT $LN11@UTF16BEFro
$LN15@UTF16BEFro:
; Line 193
	mov	eax, DWORD PTR _count$8576[ebp]
	mov	ecx, DWORD PTR _targetCapacity$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR _targetCapacity$[ebp], edx
$LN11@UTF16BEFro:
; Line 195
	jmp	SHORT $LN10@UTF16BEFro
$LN31@UTF16BEFro:
; Line 196
	mov	DWORD PTR _length$[ebp], 0
$LN10@UTF16BEFro:
; Line 199
	movzx	eax, WORD PTR _c$[ebp]
	test	eax, eax
	je	$LN9@UTF16BEFro
; Line 205
	mov	DWORD PTR _length$[ebp], 0
; Line 206
	movzx	eax, WORD PTR _c$[ebp]
	and	eax, 1024				; 00000400H
	jne	SHORT $LN8@UTF16BEFro
; Line 207
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR _source$[ebp]
	cmp	ecx, DWORD PTR [eax+12]
	jae	SHORT $LN4@UTF16BEFro
; Line 208
	mov	eax, DWORD PTR _source$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR _trail$[ebp], cx
	movzx	edx, WORD PTR _trail$[ebp]
	and	edx, -1024				; fffffc00H
	cmp	edx, 56320				; 0000dc00H
	jne	SHORT $LN6@UTF16BEFro
; Line 210
	mov	eax, DWORD PTR _source$[ebp]
	add	eax, 2
	mov	DWORD PTR _source$[ebp], eax
; Line 211
	movzx	eax, WORD PTR _c$[ebp]
	sar	eax, 8
	mov	BYTE PTR _overflow$[ebp], al
; Line 212
	mov	al, BYTE PTR _c$[ebp]
	mov	BYTE PTR _overflow$[ebp+1], al
; Line 213
	movzx	eax, WORD PTR _trail$[ebp]
	sar	eax, 8
	mov	BYTE PTR _overflow$[ebp+2], al
; Line 214
	mov	al, BYTE PTR _trail$[ebp]
	mov	BYTE PTR _overflow$[ebp+3], al
; Line 215
	mov	DWORD PTR _length$[ebp], 4
; Line 216
	xor	eax, eax
	mov	WORD PTR _c$[ebp], ax
; Line 217
	jmp	SHORT $LN4@UTF16BEFro
$LN6@UTF16BEFro:
; Line 219
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 12			; 0000000cH
$LN4@UTF16BEFro:
; Line 224
	jmp	SHORT $LN3@UTF16BEFro
$LN8@UTF16BEFro:
; Line 226
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 12			; 0000000cH
$LN3@UTF16BEFro:
; Line 228
	movzx	eax, WORD PTR _c$[ebp]
	mov	ecx, DWORD PTR _cnv$[ebp]
	mov	DWORD PTR [ecx+56], eax
$LN9@UTF16BEFro:
; Line 231
	cmp	DWORD PTR _length$[ebp], 0
	jbe	SHORT $LN2@UTF16BEFro
; Line 237
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sourceIndex$[ebp]
	push	ecx
	lea	edx, DWORD PTR _offsets$[ebp]
	push	edx
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	lea	edx, DWORD PTR _target$[ebp]
	push	edx
	mov	eax, DWORD PTR _length$[ebp]
	push	eax
	lea	ecx, DWORD PTR _overflow$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cnv$[ebp]
	push	edx
	call	_ucnv_fromUWriteBytes_56
	add	esp, 32					; 00000020H
; Line 238
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	sub	ecx, DWORD PTR _target$[ebp]
	mov	DWORD PTR _targetCapacity$[ebp], ecx
$LN2@UTF16BEFro:
; Line 241
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	cmp	DWORD PTR [eax], 0
	jg	SHORT $LN1@UTF16BEFro
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR _source$[ebp]
	cmp	ecx, DWORD PTR [eax+12]
	jae	SHORT $LN1@UTF16BEFro
	cmp	DWORD PTR _targetCapacity$[ebp], 0
	jne	SHORT $LN1@UTF16BEFro
; Line 242
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
$LN1@UTF16BEFro:
; Line 246
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR _source$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 247
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR _target$[ebp]
	mov	DWORD PTR [eax+16], ecx
; Line 248
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR _offsets$[ebp]
	mov	DWORD PTR [eax+24], ecx
$LN37@UTF16BEFro:
; Line 249
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN45@UTF16BEFro
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 328				; 00000148H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN45@UTF16BEFro:
	DD	3
	DD	$LN44@UTF16BEFro
$LN44@UTF16BEFro:
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN41@UTF16BEFro
	DD	-44					; ffffffd4H
	DD	4
	DD	$LN42@UTF16BEFro
	DD	-116					; ffffff8cH
	DD	4
	DD	$LN43@UTF16BEFro
$LN43@UTF16BEFro:
	DB	111					; 0000006fH
	DB	118					; 00000076H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	102					; 00000066H
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	119					; 00000077H
	DB	0
$LN42@UTF16BEFro:
	DB	111					; 0000006fH
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	115					; 00000073H
	DB	0
$LN41@UTF16BEFro:
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	103					; 00000067H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	0
__UTF16BEFromUnicodeWithOffsets ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __UTF16BEToUnicodeWithOffsets
_TEXT	SEGMENT
_p$8658 = -128						; size = 4
_trail$ = -116						; size = 2
_c$ = -104						; size = 2
_sourceIndex$ = -92					; size = 4
_count$ = -80						; size = 4
_length$ = -68						; size = 4
_targetCapacity$ = -56					; size = 4
_offsets$ = -44						; size = 4
_target$ = -32						; size = 4
_source$ = -20						; size = 4
_cnv$ = -8						; size = 4
_pArgs$ = 8						; size = 4
_pErrorCode$ = 12					; size = 4
__UTF16BEToUnicodeWithOffsets PROC			; COMDAT
; Line 253
	push	ebp
	mov	ebp, esp
	sub	esp, 324				; 00000144H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-324]
	mov	ecx, 81					; 00000051H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 262
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cmp	DWORD PTR [ecx+48], 8
	jge	SHORT $LN55@UTF16BEToU
; Line 263
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pArgs$[ebp]
	push	ecx
	call	__UTF16ToUnicodeWithOffsets
	add	esp, 8
; Line 264
	jmp	$LN56@UTF16BEToU
$LN55@UTF16BEToU:
; Line 267
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _cnv$[ebp], ecx
; Line 268
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _source$[ebp], ecx
; Line 269
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	sub	ecx, DWORD PTR _source$[ebp]
	mov	DWORD PTR _length$[ebp], ecx
; Line 270
	jne	SHORT $LN54@UTF16BEToU
	mov	eax, DWORD PTR _cnv$[ebp]
	cmp	DWORD PTR [eax+44], 0
	jne	SHORT $LN54@UTF16BEToU
; Line 272
	jmp	$LN56@UTF16BEToU
$LN54@UTF16BEToU:
; Line 275
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _target$[ebp], ecx
; Line 276
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR _target$[ebp]
	cmp	ecx, DWORD PTR [eax+20]
	jb	SHORT $LN53@UTF16BEToU
; Line 277
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
; Line 278
	jmp	$LN56@UTF16BEToU
$LN53@UTF16BEToU:
; Line 281
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	sub	ecx, DWORD PTR _target$[ebp]
	sar	ecx, 1
	mov	DWORD PTR _targetCapacity$[ebp], ecx
; Line 282
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR _offsets$[ebp], ecx
; Line 283
	mov	DWORD PTR _sourceIndex$[ebp], 0
; Line 284
	xor	eax, eax
	mov	WORD PTR _c$[ebp], ax
; Line 287
	mov	eax, DWORD PTR _cnv$[ebp]
	cmp	DWORD PTR [eax+44], 0
	je	SHORT $LN52@UTF16BEToU
; Line 294
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	ecx, DWORD PTR _cnv$[ebp]
	mov	dl, BYTE PTR [ecx+44]
	mov	BYTE PTR [eax+37], dl
; Line 295
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	BYTE PTR [eax+36], 1
; Line 296
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	DWORD PTR [eax+44], 0
$LN52@UTF16BEToU:
; Line 298
	mov	eax, DWORD PTR _cnv$[ebp]
	movsx	ecx, BYTE PTR [eax+36]
	mov	DWORD PTR _count$[ebp], ecx
	cmp	DWORD PTR _count$[ebp], 0
	je	$LN51@UTF16BEToU
; Line 299
	mov	eax, DWORD PTR _cnv$[ebp]
	add	eax, 37					; 00000025H
	mov	DWORD PTR _p$8658[ebp], eax
$LN50@UTF16BEToU:
; Line 301
	mov	eax, DWORD PTR _p$8658[ebp]
	add	eax, DWORD PTR _count$[ebp]
	mov	ecx, DWORD PTR _source$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl
	mov	eax, DWORD PTR _count$[ebp]
	add	eax, 1
	mov	DWORD PTR _count$[ebp], eax
	mov	ecx, DWORD PTR _source$[ebp]
	add	ecx, 1
	mov	DWORD PTR _source$[ebp], ecx
; Line 302
	mov	eax, DWORD PTR _sourceIndex$[ebp]
	add	eax, 1
	mov	DWORD PTR _sourceIndex$[ebp], eax
; Line 303
	mov	eax, DWORD PTR _length$[ebp]
	sub	eax, 1
	mov	DWORD PTR _length$[ebp], eax
; Line 304
	cmp	DWORD PTR _count$[ebp], 2
	jne	$LN47@UTF16BEToU
; Line 305
	mov	eax, DWORD PTR _p$8658[ebp]
	movzx	ecx, BYTE PTR [eax]
	shl	ecx, 8
	mov	edx, DWORD PTR _p$8658[ebp]
	movzx	eax, BYTE PTR [edx+1]
	or	ecx, eax
	mov	WORD PTR _c$[ebp], cx
; Line 306
	movzx	eax, WORD PTR _c$[ebp]
	and	eax, -2048				; fffff800H
	cmp	eax, 55296				; 0000d800H
	je	SHORT $LN46@UTF16BEToU
; Line 308
	mov	eax, DWORD PTR _target$[ebp]
	mov	cx, WORD PTR _c$[ebp]
	mov	WORD PTR [eax], cx
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 2
	mov	DWORD PTR _target$[ebp], edx
; Line 309
	cmp	DWORD PTR _offsets$[ebp], 0
	je	SHORT $LN45@UTF16BEToU
; Line 310
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	DWORD PTR [eax], -1
	mov	ecx, DWORD PTR _offsets$[ebp]
	add	ecx, 4
	mov	DWORD PTR _offsets$[ebp], ecx
$LN45@UTF16BEToU:
; Line 312
	mov	eax, DWORD PTR _targetCapacity$[ebp]
	sub	eax, 1
	mov	DWORD PTR _targetCapacity$[ebp], eax
; Line 313
	mov	DWORD PTR _count$[ebp], 0
; Line 314
	xor	eax, eax
	mov	WORD PTR _c$[ebp], ax
; Line 315
	jmp	$LN48@UTF16BEToU
	jmp	SHORT $LN44@UTF16BEToU
$LN46@UTF16BEToU:
; Line 316
	movzx	eax, WORD PTR _c$[ebp]
	and	eax, 1024				; 00000400H
	jne	SHORT $LN43@UTF16BEToU
; Line 318
	xor	eax, eax
	mov	WORD PTR _c$[ebp], ax
; Line 319
	jmp	SHORT $LN44@UTF16BEToU
$LN43@UTF16BEToU:
; Line 321
	jmp	$LN48@UTF16BEToU
$LN44@UTF16BEToU:
; Line 322
	jmp	$LN49@UTF16BEToU
$LN47@UTF16BEToU:
; Line 323
	cmp	DWORD PTR _count$[ebp], 4
	jne	$LN49@UTF16BEToU
; Line 324
	mov	eax, DWORD PTR _p$8658[ebp]
	movzx	ecx, BYTE PTR [eax]
	shl	ecx, 8
	mov	edx, DWORD PTR _p$8658[ebp]
	movzx	eax, BYTE PTR [edx+1]
	or	ecx, eax
	mov	WORD PTR _c$[ebp], cx
; Line 325
	mov	eax, DWORD PTR _p$8658[ebp]
	movzx	ecx, BYTE PTR [eax+2]
	shl	ecx, 8
	mov	edx, DWORD PTR _p$8658[ebp]
	movzx	eax, BYTE PTR [edx+3]
	or	ecx, eax
	mov	WORD PTR _trail$[ebp], cx
; Line 326
	movzx	eax, WORD PTR _trail$[ebp]
	and	eax, -1024				; fffffc00H
	cmp	eax, 56320				; 0000dc00H
	jne	$LN39@UTF16BEToU
; Line 328
	mov	eax, DWORD PTR _target$[ebp]
	mov	cx, WORD PTR _c$[ebp]
	mov	WORD PTR [eax], cx
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 2
	mov	DWORD PTR _target$[ebp], edx
; Line 329
	cmp	DWORD PTR _targetCapacity$[ebp], 2
	jb	SHORT $LN38@UTF16BEToU
; Line 330
	mov	eax, DWORD PTR _target$[ebp]
	mov	cx, WORD PTR _trail$[ebp]
	mov	WORD PTR [eax], cx
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 2
	mov	DWORD PTR _target$[ebp], edx
; Line 331
	cmp	DWORD PTR _offsets$[ebp], 0
	je	SHORT $LN37@UTF16BEToU
; Line 332
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	DWORD PTR [eax], -1
	mov	ecx, DWORD PTR _offsets$[ebp]
	add	ecx, 4
	mov	DWORD PTR _offsets$[ebp], ecx
; Line 333
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	DWORD PTR [eax], -1
	mov	ecx, DWORD PTR _offsets$[ebp]
	add	ecx, 4
	mov	DWORD PTR _offsets$[ebp], ecx
$LN37@UTF16BEToU:
; Line 335
	mov	eax, DWORD PTR _targetCapacity$[ebp]
	sub	eax, 2
	mov	DWORD PTR _targetCapacity$[ebp], eax
; Line 336
	jmp	SHORT $LN36@UTF16BEToU
$LN38@UTF16BEToU:
; Line 337
	mov	DWORD PTR _targetCapacity$[ebp], 0
; Line 338
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	cx, WORD PTR _trail$[ebp]
	mov	WORD PTR [eax+116], cx
; Line 339
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	BYTE PTR [eax+65], 1
; Line 340
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
$LN36@UTF16BEToU:
; Line 342
	mov	DWORD PTR _count$[ebp], 0
; Line 343
	xor	eax, eax
	mov	WORD PTR _c$[ebp], ax
; Line 344
	jmp	SHORT $LN48@UTF16BEToU
; Line 345
	jmp	SHORT $LN49@UTF16BEToU
$LN39@UTF16BEToU:
; Line 347
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 12			; 0000000cH
; Line 350
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	sub	ecx, DWORD PTR _source$[ebp]
	cmp	ecx, 2
	jl	SHORT $LN34@UTF16BEToU
; Line 351
	mov	eax, DWORD PTR _source$[ebp]
	sub	eax, 2
	mov	DWORD PTR _source$[ebp], eax
; Line 352
	jmp	SHORT $LN33@UTF16BEToU
$LN34@UTF16BEToU:
; Line 358
	mov	eax, DWORD PTR _p$8658[ebp]
	movzx	ecx, BYTE PTR [eax+2]
	or	ecx, 256				; 00000100H
	mov	edx, DWORD PTR _cnv$[ebp]
	mov	DWORD PTR [edx+44], ecx
; Line 359
	mov	eax, DWORD PTR _source$[ebp]
	sub	eax, 1
	mov	DWORD PTR _source$[ebp], eax
$LN33@UTF16BEToU:
; Line 361
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	BYTE PTR [eax+36], 2
; Line 364
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR _source$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 365
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR _target$[ebp]
	mov	DWORD PTR [eax+16], ecx
; Line 366
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR _offsets$[ebp]
	mov	DWORD PTR [eax+24], ecx
; Line 367
	jmp	$LN56@UTF16BEToU
$LN49@UTF16BEToU:
; Line 370
	cmp	DWORD PTR _length$[ebp], 0
	ja	$LN50@UTF16BEToU
$LN48@UTF16BEToU:
; Line 371
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	cl, BYTE PTR _count$[ebp]
	mov	BYTE PTR [eax+36], cl
$LN51@UTF16BEToU:
; Line 375
	mov	eax, DWORD PTR _targetCapacity$[ebp]
	shl	eax, 1
	mov	DWORD PTR _count$[ebp], eax
; Line 376
	mov	eax, DWORD PTR _count$[ebp]
	cmp	eax, DWORD PTR _length$[ebp]
	jbe	SHORT $LN32@UTF16BEToU
; Line 377
	mov	eax, DWORD PTR _length$[ebp]
	and	eax, -2					; fffffffeH
	mov	DWORD PTR _count$[ebp], eax
$LN32@UTF16BEToU:
; Line 379
	movzx	eax, WORD PTR _c$[ebp]
	test	eax, eax
	jne	$LN31@UTF16BEToU
	cmp	DWORD PTR _count$[ebp], 0
	jbe	$LN31@UTF16BEToU
; Line 380
	mov	eax, DWORD PTR _length$[ebp]
	sub	eax, DWORD PTR _count$[ebp]
	mov	DWORD PTR _length$[ebp], eax
; Line 381
	mov	eax, DWORD PTR _count$[ebp]
	shr	eax, 1
	mov	DWORD PTR _count$[ebp], eax
; Line 382
	mov	eax, DWORD PTR _targetCapacity$[ebp]
	sub	eax, DWORD PTR _count$[ebp]
	mov	DWORD PTR _targetCapacity$[ebp], eax
; Line 383
	cmp	DWORD PTR _offsets$[ebp], 0
	jne	$LN21@UTF16BEToU
$LN29@UTF16BEToU:
; Line 385
	mov	eax, DWORD PTR _source$[ebp]
	movzx	ecx, BYTE PTR [eax]
	shl	ecx, 8
	mov	edx, DWORD PTR _source$[ebp]
	movzx	eax, BYTE PTR [edx+1]
	or	ecx, eax
	mov	WORD PTR _c$[ebp], cx
; Line 386
	mov	eax, DWORD PTR _source$[ebp]
	add	eax, 2
	mov	DWORD PTR _source$[ebp], eax
; Line 387
	movzx	eax, WORD PTR _c$[ebp]
	and	eax, -2048				; fffff800H
	cmp	eax, 55296				; 0000d800H
	je	SHORT $LN26@UTF16BEToU
; Line 388
	mov	eax, DWORD PTR _target$[ebp]
	mov	cx, WORD PTR _c$[ebp]
	mov	WORD PTR [eax], cx
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 2
	mov	DWORD PTR _target$[ebp], edx
; Line 389
	jmp	SHORT $LN28@UTF16BEToU
$LN26@UTF16BEToU:
; Line 391
	movzx	eax, WORD PTR _c$[ebp]
	and	eax, 1024				; 00000400H
	jne	SHORT $LN24@UTF16BEToU
	cmp	DWORD PTR _count$[ebp], 2
	jb	SHORT $LN24@UTF16BEToU
	mov	eax, DWORD PTR _source$[ebp]
	movzx	ecx, BYTE PTR [eax]
	shl	ecx, 8
	mov	edx, DWORD PTR _source$[ebp]
	movzx	eax, BYTE PTR [edx+1]
	or	ecx, eax
	mov	WORD PTR _trail$[ebp], cx
	movzx	ecx, WORD PTR _trail$[ebp]
	and	ecx, -1024				; fffffc00H
	cmp	ecx, 56320				; 0000dc00H
	jne	SHORT $LN24@UTF16BEToU
; Line 392
	mov	eax, DWORD PTR _source$[ebp]
	add	eax, 2
	mov	DWORD PTR _source$[ebp], eax
; Line 393
	mov	eax, DWORD PTR _count$[ebp]
	sub	eax, 1
	mov	DWORD PTR _count$[ebp], eax
; Line 394
	mov	eax, DWORD PTR _target$[ebp]
	mov	cx, WORD PTR _c$[ebp]
	mov	WORD PTR [eax], cx
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 2
	mov	DWORD PTR _target$[ebp], edx
; Line 395
	mov	eax, DWORD PTR _target$[ebp]
	mov	cx, WORD PTR _trail$[ebp]
	mov	WORD PTR [eax], cx
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 2
	mov	DWORD PTR _target$[ebp], edx
; Line 396
	jmp	SHORT $LN28@UTF16BEToU
$LN24@UTF16BEToU:
; Line 397
	jmp	SHORT $LN27@UTF16BEToU
$LN28@UTF16BEToU:
; Line 399
	mov	eax, DWORD PTR _count$[ebp]
	sub	eax, 1
	mov	DWORD PTR _count$[ebp], eax
	jne	$LN29@UTF16BEToU
$LN27@UTF16BEToU:
; Line 400
	jmp	$LN22@UTF16BEToU
$LN21@UTF16BEToU:
; Line 402
	mov	eax, DWORD PTR _source$[ebp]
	movzx	ecx, BYTE PTR [eax]
	shl	ecx, 8
	mov	edx, DWORD PTR _source$[ebp]
	movzx	eax, BYTE PTR [edx+1]
	or	ecx, eax
	mov	WORD PTR _c$[ebp], cx
; Line 403
	mov	eax, DWORD PTR _source$[ebp]
	add	eax, 2
	mov	DWORD PTR _source$[ebp], eax
; Line 404
	movzx	eax, WORD PTR _c$[ebp]
	and	eax, -2048				; fffff800H
	cmp	eax, 55296				; 0000d800H
	je	SHORT $LN18@UTF16BEToU
; Line 405
	mov	eax, DWORD PTR _target$[ebp]
	mov	cx, WORD PTR _c$[ebp]
	mov	WORD PTR [eax], cx
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 2
	mov	DWORD PTR _target$[ebp], edx
; Line 406
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _sourceIndex$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
; Line 407
	mov	eax, DWORD PTR _sourceIndex$[ebp]
	add	eax, 2
	mov	DWORD PTR _sourceIndex$[ebp], eax
; Line 408
	jmp	$LN20@UTF16BEToU
$LN18@UTF16BEToU:
; Line 410
	movzx	eax, WORD PTR _c$[ebp]
	and	eax, 1024				; 00000400H
	jne	$LN16@UTF16BEToU
	cmp	DWORD PTR _count$[ebp], 2
	jb	$LN16@UTF16BEToU
	mov	eax, DWORD PTR _source$[ebp]
	movzx	ecx, BYTE PTR [eax]
	shl	ecx, 8
	mov	edx, DWORD PTR _source$[ebp]
	movzx	eax, BYTE PTR [edx+1]
	or	ecx, eax
	mov	WORD PTR _trail$[ebp], cx
	movzx	ecx, WORD PTR _trail$[ebp]
	and	ecx, -1024				; fffffc00H
	cmp	ecx, 56320				; 0000dc00H
	jne	SHORT $LN16@UTF16BEToU
; Line 411
	mov	eax, DWORD PTR _source$[ebp]
	add	eax, 2
	mov	DWORD PTR _source$[ebp], eax
; Line 412
	mov	eax, DWORD PTR _count$[ebp]
	sub	eax, 1
	mov	DWORD PTR _count$[ebp], eax
; Line 413
	mov	eax, DWORD PTR _target$[ebp]
	mov	cx, WORD PTR _c$[ebp]
	mov	WORD PTR [eax], cx
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 2
	mov	DWORD PTR _target$[ebp], edx
; Line 414
	mov	eax, DWORD PTR _target$[ebp]
	mov	cx, WORD PTR _trail$[ebp]
	mov	WORD PTR [eax], cx
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 2
	mov	DWORD PTR _target$[ebp], edx
; Line 415
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _sourceIndex$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
; Line 416
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _sourceIndex$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
; Line 417
	mov	eax, DWORD PTR _sourceIndex$[ebp]
	add	eax, 4
	mov	DWORD PTR _sourceIndex$[ebp], eax
; Line 418
	jmp	SHORT $LN20@UTF16BEToU
$LN16@UTF16BEToU:
; Line 419
	jmp	SHORT $LN22@UTF16BEToU
$LN20@UTF16BEToU:
; Line 421
	mov	eax, DWORD PTR _count$[ebp]
	sub	eax, 1
	mov	DWORD PTR _count$[ebp], eax
	jne	$LN21@UTF16BEToU
$LN22@UTF16BEToU:
; Line 424
	cmp	DWORD PTR _count$[ebp], 0
	jne	SHORT $LN14@UTF16BEToU
; Line 426
	xor	eax, eax
	mov	WORD PTR _c$[ebp], ax
; Line 427
	jmp	SHORT $LN31@UTF16BEToU
$LN14@UTF16BEToU:
; Line 429
	mov	eax, DWORD PTR _count$[ebp]
	mov	ecx, DWORD PTR _length$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2-2]
	mov	DWORD PTR _length$[ebp], edx
; Line 430
	mov	eax, DWORD PTR _targetCapacity$[ebp]
	add	eax, DWORD PTR _count$[ebp]
	mov	DWORD PTR _targetCapacity$[ebp], eax
$LN31@UTF16BEToU:
; Line 434
	movzx	eax, WORD PTR _c$[ebp]
	test	eax, eax
	je	$LN12@UTF16BEToU
; Line 440
	movzx	eax, WORD PTR _c$[ebp]
	sar	eax, 8
	mov	ecx, DWORD PTR _cnv$[ebp]
	mov	BYTE PTR [ecx+37], al
; Line 441
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	cl, BYTE PTR _c$[ebp]
	mov	BYTE PTR [eax+38], cl
; Line 442
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	BYTE PTR [eax+36], 2
; Line 444
	movzx	eax, WORD PTR _c$[ebp]
	and	eax, 1024				; 00000400H
	jne	$LN11@UTF16BEToU
; Line 445
	cmp	DWORD PTR _length$[ebp], 2
	jb	$LN6@UTF16BEToU
; Line 446
	mov	eax, DWORD PTR _source$[ebp]
	movzx	ecx, BYTE PTR [eax]
	shl	ecx, 8
	mov	edx, DWORD PTR _source$[ebp]
	movzx	eax, BYTE PTR [edx+1]
	or	ecx, eax
	mov	WORD PTR _trail$[ebp], cx
	movzx	ecx, WORD PTR _trail$[ebp]
	and	ecx, -1024				; fffffc00H
	cmp	ecx, 56320				; 0000dc00H
	jne	SHORT $LN9@UTF16BEToU
; Line 448
	mov	eax, DWORD PTR _source$[ebp]
	add	eax, 2
	mov	DWORD PTR _source$[ebp], eax
; Line 449
	mov	eax, DWORD PTR _length$[ebp]
	sub	eax, 2
	mov	DWORD PTR _length$[ebp], eax
; Line 450
	mov	eax, DWORD PTR _target$[ebp]
	mov	cx, WORD PTR _c$[ebp]
	mov	WORD PTR [eax], cx
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 2
	mov	DWORD PTR _target$[ebp], edx
; Line 451
	cmp	DWORD PTR _offsets$[ebp], 0
	je	SHORT $LN8@UTF16BEToU
; Line 452
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _sourceIndex$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
$LN8@UTF16BEToU:
; Line 454
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	cx, WORD PTR _trail$[ebp]
	mov	WORD PTR [eax+116], cx
; Line 455
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	BYTE PTR [eax+65], 1
; Line 456
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	BYTE PTR [eax+36], 0
; Line 457
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
; Line 458
	jmp	SHORT $LN6@UTF16BEToU
$LN9@UTF16BEToU:
; Line 460
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 12			; 0000000cH
$LN6@UTF16BEToU:
; Line 465
	jmp	SHORT $LN12@UTF16BEToU
$LN11@UTF16BEToU:
; Line 467
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 12			; 0000000cH
$LN12@UTF16BEToU:
; Line 471
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	cmp	DWORD PTR [eax], 0
	jg	SHORT $LN4@UTF16BEToU
; Line 473
	cmp	DWORD PTR _length$[ebp], 0
	jbe	SHORT $LN4@UTF16BEToU
; Line 474
	cmp	DWORD PTR _targetCapacity$[ebp], 0
	jne	SHORT $LN2@UTF16BEToU
; Line 475
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
; Line 476
	jmp	SHORT $LN4@UTF16BEToU
$LN2@UTF16BEToU:
; Line 478
	mov	eax, DWORD PTR _cnv$[ebp]
	movsx	ecx, BYTE PTR [eax+36]
	mov	edx, DWORD PTR _cnv$[ebp]
	mov	eax, DWORD PTR _source$[ebp]
	mov	al, BYTE PTR [eax]
	mov	BYTE PTR [edx+ecx+37], al
	mov	ecx, DWORD PTR _cnv$[ebp]
	mov	dl, BYTE PTR [ecx+36]
	add	dl, 1
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	BYTE PTR [eax+36], dl
	mov	ecx, DWORD PTR _source$[ebp]
	add	ecx, 1
	mov	DWORD PTR _source$[ebp], ecx
$LN4@UTF16BEToU:
; Line 484
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR _source$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 485
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR _target$[ebp]
	mov	DWORD PTR [eax+16], ecx
; Line 486
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR _offsets$[ebp]
	mov	DWORD PTR [eax+24], ecx
$LN56@UTF16BEToU:
; Line 487
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 324				; 00000144H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__UTF16BEToUnicodeWithOffsets ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __UTF16BEGetNextUChar
_TEXT	SEGMENT
_bytes$8760 = -68					; size = 4
_bytes$8753 = -56					; size = 4
_trail$8746 = -44					; size = 2
_c$ = -32						; size = 4
_sourceLimit$ = -20					; size = 4
_s$ = -8						; size = 4
_pArgs$ = 8						; size = 4
_err$ = 12						; size = 4
__UTF16BEGetNextUChar PROC				; COMDAT
; Line 490
	push	ebp
	mov	ebp, esp
	sub	esp, 264				; 00000108H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-264]
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 494
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cmp	DWORD PTR [ecx+48], 8
	jge	SHORT $LN14@UTF16BEGet
; Line 495
	mov	eax, -9					; fffffff7H
	jmp	$LN15@UTF16BEGet
$LN14@UTF16BEGet:
; Line 498
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _s$[ebp], ecx
; Line 499
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _sourceLimit$[ebp], ecx
; Line 501
	mov	eax, DWORD PTR _s$[ebp]
	cmp	eax, DWORD PTR _sourceLimit$[ebp]
	jb	SHORT $LN13@UTF16BEGet
; Line 503
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 8
; Line 504
	mov	eax, 65535				; 0000ffffH
	jmp	$LN15@UTF16BEGet
$LN13@UTF16BEGet:
; Line 507
	mov	eax, DWORD PTR _s$[ebp]
	add	eax, 2
	cmp	eax, DWORD PTR _sourceLimit$[ebp]
	jbe	SHORT $LN12@UTF16BEGet
; Line 509
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _s$[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR [ecx+37], al
	mov	ecx, DWORD PTR _s$[ebp]
	add	ecx, 1
	mov	DWORD PTR _s$[ebp], ecx
; Line 510
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx+36], 1
; Line 511
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 512
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 11			; 0000000bH
; Line 513
	mov	eax, 65535				; 0000ffffH
	jmp	$LN15@UTF16BEGet
$LN12@UTF16BEGet:
; Line 517
	mov	eax, DWORD PTR _s$[ebp]
	movzx	ecx, BYTE PTR [eax]
	shl	ecx, 8
	mov	edx, DWORD PTR _s$[ebp]
	movzx	eax, BYTE PTR [edx+1]
	or	ecx, eax
	mov	DWORD PTR _c$[ebp], ecx
; Line 518
	mov	eax, DWORD PTR _s$[ebp]
	add	eax, 2
	mov	DWORD PTR _s$[ebp], eax
; Line 521
	mov	eax, DWORD PTR _c$[ebp]
	and	eax, -2048				; fffff800H
	cmp	eax, 55296				; 0000d800H
	jne	$LN11@UTF16BEGet
; Line 522
	mov	eax, DWORD PTR _c$[ebp]
	and	eax, 1024				; 00000400H
	jne	$LN10@UTF16BEGet
; Line 523
	mov	eax, DWORD PTR _s$[ebp]
	add	eax, 2
	cmp	eax, DWORD PTR _sourceLimit$[ebp]
	ja	SHORT $LN9@UTF16BEGet
; Line 527
	mov	eax, DWORD PTR _s$[ebp]
	movzx	ecx, BYTE PTR [eax]
	shl	ecx, 8
	mov	edx, DWORD PTR _s$[ebp]
	movzx	eax, BYTE PTR [edx+1]
	or	ecx, eax
	mov	WORD PTR _trail$8746[ebp], cx
; Line 528
	movzx	eax, WORD PTR _trail$8746[ebp]
	and	eax, -1024				; fffffc00H
	cmp	eax, 56320				; 0000dc00H
	jne	SHORT $LN8@UTF16BEGet
; Line 529
	mov	eax, DWORD PTR _c$[ebp]
	shl	eax, 10					; 0000000aH
	movzx	ecx, WORD PTR _trail$8746[ebp]
	lea	edx, DWORD PTR [eax+ecx-56613888]
	mov	DWORD PTR _c$[ebp], edx
; Line 530
	mov	eax, DWORD PTR _s$[ebp]
	add	eax, 2
	mov	DWORD PTR _s$[ebp], eax
; Line 531
	jmp	SHORT $LN7@UTF16BEGet
$LN8@UTF16BEGet:
; Line 533
	mov	DWORD PTR _c$[ebp], -2			; fffffffeH
$LN7@UTF16BEGet:
; Line 535
	jmp	SHORT $LN6@UTF16BEGet
$LN9@UTF16BEGet:
; Line 537
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 37					; 00000025H
	mov	DWORD PTR _bytes$8753[ebp], ecx
; Line 538
	mov	eax, DWORD PTR _s$[ebp]
	sub	eax, 2
	mov	DWORD PTR _s$[ebp], eax
; Line 539
	mov	eax, DWORD PTR _sourceLimit$[ebp]
	sub	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _pArgs$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx+36], al
$LN5@UTF16BEGet:
; Line 541
	mov	eax, DWORD PTR _bytes$8753[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl
	mov	eax, DWORD PTR _bytes$8753[ebp]
	add	eax, 1
	mov	DWORD PTR _bytes$8753[ebp], eax
	mov	ecx, DWORD PTR _s$[ebp]
	add	ecx, 1
	mov	DWORD PTR _s$[ebp], ecx
; Line 542
	mov	eax, DWORD PTR _s$[ebp]
	cmp	eax, DWORD PTR _sourceLimit$[ebp]
	jb	SHORT $LN5@UTF16BEGet
; Line 544
	mov	DWORD PTR _c$[ebp], 65535		; 0000ffffH
; Line 545
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 11			; 0000000bH
$LN6@UTF16BEGet:
; Line 547
	jmp	SHORT $LN2@UTF16BEGet
$LN10@UTF16BEGet:
; Line 549
	mov	DWORD PTR _c$[ebp], -2			; fffffffeH
$LN2@UTF16BEGet:
; Line 552
	cmp	DWORD PTR _c$[ebp], 0
	jge	SHORT $LN11@UTF16BEGet
; Line 554
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 37					; 00000025H
	mov	DWORD PTR _bytes$8760[ebp], ecx
; Line 555
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx+36], 2
; Line 556
	mov	eax, DWORD PTR _bytes$8760[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	dl, BYTE PTR [ecx-2]
	mov	BYTE PTR [eax], dl
; Line 557
	mov	eax, DWORD PTR _bytes$8760[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	dl, BYTE PTR [ecx-1]
	mov	BYTE PTR [eax+1], dl
; Line 559
	mov	DWORD PTR _c$[ebp], 65535		; 0000ffffH
; Line 560
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 12			; 0000000cH
$LN11@UTF16BEGet:
; Line 564
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 565
	mov	eax, DWORD PTR _c$[ebp]
$LN15@UTF16BEGet:
; Line 566
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
__UTF16BEGetNextUChar ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __UTF16BEReset
_TEXT	SEGMENT
_cnv$ = 8						; size = 4
_choice$ = 12						; size = 4
__UTF16BEReset PROC					; COMDAT
; Line 569
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 570
	cmp	DWORD PTR _choice$[ebp], 1
	jg	SHORT $LN4@UTF16BERes
; Line 572
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	and	ecx, 15					; 0000000fH
	jne	SHORT $LN3@UTF16BERes
; Line 573
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	DWORD PTR [eax+48], 8
; Line 574
	jmp	SHORT $LN4@UTF16BERes
$LN3@UTF16BERes:
; Line 575
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	DWORD PTR [eax+48], 0
$LN4@UTF16BERes:
; Line 578
	cmp	DWORD PTR _choice$[ebp], 1
	je	SHORT $LN5@UTF16BERes
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	and	ecx, 15					; 0000000fH
	cmp	ecx, 1
	jne	SHORT $LN5@UTF16BERes
; Line 580
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	DWORD PTR [eax+52], 1
$LN5@UTF16BERes:
; Line 582
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
__UTF16BEReset ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __UTF16BEOpen
_TEXT	SEGMENT
_cnv$ = 8						; size = 4
_pArgs$ = 12						; size = 4
_pErrorCode$ = 16					; size = 4
__UTF16BEOpen PROC					; COMDAT
; Line 587
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 588
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	and	ecx, 15					; 0000000fH
	cmp	ecx, 1
	ja	SHORT $LN2@UTF16BEOpe
; Line 589
	push	0
	mov	eax, DWORD PTR _cnv$[ebp]
	push	eax
	call	__UTF16BEReset
	add	esp, 8
; Line 590
	jmp	SHORT $LN3@UTF16BEOpe
$LN2@UTF16BEOpe:
; Line 591
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 1
$LN3@UTF16BEOpe:
; Line 593
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__UTF16BEOpen ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BD@DKLBNCKF@UTF?916BE?0version?$DN1?$AA@	; `string'
PUBLIC	??_C@_08NLKHJAFK@UTF?916BE?$AA@			; `string'
;	COMDAT ??_C@_0BD@DKLBNCKF@UTF?916BE?0version?$DN1?$AA@
CONST	SEGMENT
??_C@_0BD@DKLBNCKF@UTF?916BE?0version?$DN1?$AA@ DB 'UTF-16BE,version=1', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08NLKHJAFK@UTF?916BE?$AA@
CONST	SEGMENT
??_C@_08NLKHJAFK@UTF?916BE?$AA@ DB 'UTF-16BE', 00H	; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT __UTF16BEGetName
_TEXT	SEGMENT
_cnv$ = 8						; size = 4
__UTF16BEGetName PROC					; COMDAT
; Line 596
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 597
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	and	ecx, 15					; 0000000fH
	jne	SHORT $LN2@UTF16BEGet@2
; Line 598
	mov	eax, OFFSET ??_C@_08NLKHJAFK@UTF?916BE?$AA@
	jmp	SHORT $LN3@UTF16BEGet@2
; Line 599
	jmp	SHORT $LN3@UTF16BEGet@2
$LN2@UTF16BEGet@2:
; Line 600
	mov	eax, OFFSET ??_C@_0BD@DKLBNCKF@UTF?916BE?0version?$DN1?$AA@
$LN3@UTF16BEGet@2:
; Line 602
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
__UTF16BEGetName ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __UTF16LEFromUnicodeWithOffsets
_TEXT	SEGMENT
tv234 = -328						; size = 4
_count$8848 = -128					; size = 4
_overflow$ = -116					; size = 4
_trail$ = -104						; size = 2
_c$ = -92						; size = 2
_sourceIndex$ = -80					; size = 4
_length$ = -68						; size = 4
_targetCapacity$ = -56					; size = 4
_offsets$ = -44						; size = 4
_target$ = -32						; size = 4
_source$ = -20						; size = 4
_cnv$ = -8						; size = 4
_pArgs$ = 8						; size = 4
_pErrorCode$ = 12					; size = 4
__UTF16LEFromUnicodeWithOffsets PROC			; COMDAT
; Line 645
	push	ebp
	mov	ebp, esp
	sub	esp, 328				; 00000148H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-328]
	mov	ecx, 82					; 00000052H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 655
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _source$[ebp], ecx
; Line 656
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	sub	ecx, DWORD PTR _source$[ebp]
	sar	ecx, 1
	mov	DWORD PTR _length$[ebp], ecx
; Line 657
	jne	SHORT $LN36@UTF16LEFro
; Line 659
	jmp	$LN37@UTF16LEFro
$LN36@UTF16LEFro:
; Line 662
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _cnv$[ebp], ecx
; Line 665
	mov	eax, DWORD PTR _cnv$[ebp]
	cmp	DWORD PTR [eax+52], 1
	jne	SHORT $LN35@UTF16LEFro
; Line 671
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	push	-1
	mov	ecx, DWORD PTR _pArgs$[ebp]
	add	ecx, 24					; 00000018H
	push	ecx
	mov	edx, DWORD PTR _pArgs$[ebp]
	mov	eax, DWORD PTR [edx+20]
	push	eax
	mov	ecx, DWORD PTR _pArgs$[ebp]
	add	ecx, 16					; 00000010H
	push	ecx
	push	2
	push	OFFSET ?bom@?3??_UTF16LEFromUnicodeWithOffsets@@9@9
	mov	edx, DWORD PTR _cnv$[ebp]
	push	edx
	call	_ucnv_fromUWriteBytes_56
	add	esp, 32					; 00000020H
; Line 672
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	DWORD PTR [eax+52], 0
$LN35@UTF16LEFro:
; Line 675
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _target$[ebp], ecx
; Line 676
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR _target$[ebp]
	cmp	ecx, DWORD PTR [eax+20]
	jb	SHORT $LN34@UTF16LEFro
; Line 677
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
; Line 678
	jmp	$LN37@UTF16LEFro
$LN34@UTF16LEFro:
; Line 681
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR _pArgs$[ebp]
	mov	edx, DWORD PTR [eax+20]
	sub	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _targetCapacity$[ebp], edx
; Line 682
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR _offsets$[ebp], ecx
; Line 683
	mov	DWORD PTR _sourceIndex$[ebp], 0
; Line 687
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	cx, WORD PTR [eax+56]
	mov	WORD PTR _c$[ebp], cx
	movzx	edx, WORD PTR _c$[ebp]
	test	edx, edx
	je	$LN33@UTF16LEFro
	mov	eax, DWORD PTR _source$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR _trail$[ebp], cx
	movzx	edx, WORD PTR _trail$[ebp]
	and	edx, -1024				; fffffc00H
	cmp	edx, 56320				; 0000dc00H
	jne	$LN33@UTF16LEFro
	cmp	DWORD PTR _targetCapacity$[ebp], 4
	jb	$LN33@UTF16LEFro
; Line 689
	mov	eax, DWORD PTR _source$[ebp]
	add	eax, 2
	mov	DWORD PTR _source$[ebp], eax
; Line 690
	mov	eax, DWORD PTR _length$[ebp]
	sub	eax, 1
	mov	DWORD PTR _length$[ebp], eax
; Line 691
	mov	eax, DWORD PTR _target$[ebp]
	mov	cl, BYTE PTR _c$[ebp]
	mov	BYTE PTR [eax], cl
; Line 692
	movzx	eax, WORD PTR _c$[ebp]
	sar	eax, 8
	mov	ecx, DWORD PTR _target$[ebp]
	mov	BYTE PTR [ecx+1], al
; Line 693
	mov	eax, DWORD PTR _target$[ebp]
	mov	cl, BYTE PTR _trail$[ebp]
	mov	BYTE PTR [eax+2], cl
; Line 694
	movzx	eax, WORD PTR _trail$[ebp]
	sar	eax, 8
	mov	ecx, DWORD PTR _target$[ebp]
	mov	BYTE PTR [ecx+3], al
; Line 695
	mov	eax, DWORD PTR _target$[ebp]
	add	eax, 4
	mov	DWORD PTR _target$[ebp], eax
; Line 696
	mov	eax, DWORD PTR _targetCapacity$[ebp]
	sub	eax, 4
	mov	DWORD PTR _targetCapacity$[ebp], eax
; Line 697
	cmp	DWORD PTR _offsets$[ebp], 0
	je	SHORT $LN32@UTF16LEFro
; Line 698
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	DWORD PTR [eax], -1
	mov	ecx, DWORD PTR _offsets$[ebp]
	add	ecx, 4
	mov	DWORD PTR _offsets$[ebp], ecx
; Line 699
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	DWORD PTR [eax], -1
	mov	ecx, DWORD PTR _offsets$[ebp]
	add	ecx, 4
	mov	DWORD PTR _offsets$[ebp], ecx
; Line 700
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	DWORD PTR [eax], -1
	mov	ecx, DWORD PTR _offsets$[ebp]
	add	ecx, 4
	mov	DWORD PTR _offsets$[ebp], ecx
; Line 701
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	DWORD PTR [eax], -1
	mov	ecx, DWORD PTR _offsets$[ebp]
	add	ecx, 4
	mov	DWORD PTR _offsets$[ebp], ecx
$LN32@UTF16LEFro:
; Line 703
	mov	DWORD PTR _sourceIndex$[ebp], 1
; Line 704
	xor	eax, eax
	mov	WORD PTR _c$[ebp], ax
	movzx	ecx, WORD PTR _c$[ebp]
	mov	edx, DWORD PTR _cnv$[ebp]
	mov	DWORD PTR [edx+56], ecx
$LN33@UTF16LEFro:
; Line 707
	movzx	eax, WORD PTR _c$[ebp]
	test	eax, eax
	jne	$LN31@UTF16LEFro
; Line 709
	mov	eax, DWORD PTR _length$[ebp]
	shl	eax, 1
	mov	DWORD PTR _count$8848[ebp], eax
; Line 710
	mov	eax, DWORD PTR _count$8848[ebp]
	cmp	eax, DWORD PTR _targetCapacity$[ebp]
	jbe	SHORT $LN30@UTF16LEFro
; Line 711
	mov	eax, DWORD PTR _targetCapacity$[ebp]
	and	eax, -2					; fffffffeH
	mov	DWORD PTR _count$8848[ebp], eax
$LN30@UTF16LEFro:
; Line 714
	mov	eax, DWORD PTR _targetCapacity$[ebp]
	sub	eax, DWORD PTR _count$8848[ebp]
	mov	DWORD PTR _targetCapacity$[ebp], eax
; Line 715
	mov	eax, DWORD PTR _count$8848[ebp]
	shr	eax, 1
	mov	DWORD PTR _count$8848[ebp], eax
; Line 716
	mov	eax, DWORD PTR _length$[ebp]
	sub	eax, DWORD PTR _count$8848[ebp]
	mov	DWORD PTR _length$[ebp], eax
; Line 718
	cmp	DWORD PTR _offsets$[ebp], 0
	jne	$LN21@UTF16LEFro
$LN28@UTF16LEFro:
; Line 719
	cmp	DWORD PTR _count$8848[ebp], 0
	jbe	$LN27@UTF16LEFro
; Line 720
	mov	eax, DWORD PTR _source$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR _c$[ebp], cx
	mov	edx, DWORD PTR _source$[ebp]
	add	edx, 2
	mov	DWORD PTR _source$[ebp], edx
; Line 721
	movzx	eax, WORD PTR _c$[ebp]
	and	eax, -2048				; fffff800H
	cmp	eax, 55296				; 0000d800H
	je	SHORT $LN26@UTF16LEFro
; Line 722
	mov	eax, DWORD PTR _target$[ebp]
	mov	cl, BYTE PTR _c$[ebp]
	mov	BYTE PTR [eax], cl
; Line 723
	movzx	eax, WORD PTR _c$[ebp]
	sar	eax, 8
	mov	ecx, DWORD PTR _target$[ebp]
	mov	BYTE PTR [ecx+1], al
; Line 724
	mov	eax, DWORD PTR _target$[ebp]
	add	eax, 2
	mov	DWORD PTR _target$[ebp], eax
	jmp	SHORT $LN25@UTF16LEFro
$LN26@UTF16LEFro:
; Line 725
	movzx	eax, WORD PTR _c$[ebp]
	and	eax, 1024				; 00000400H
	jne	SHORT $LN24@UTF16LEFro
	cmp	DWORD PTR _count$8848[ebp], 2
	jb	SHORT $LN24@UTF16LEFro
	mov	eax, DWORD PTR _source$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR _trail$[ebp], cx
	movzx	edx, WORD PTR _trail$[ebp]
	and	edx, -1024				; fffffc00H
	cmp	edx, 56320				; 0000dc00H
	jne	SHORT $LN24@UTF16LEFro
; Line 726
	mov	eax, DWORD PTR _source$[ebp]
	add	eax, 2
	mov	DWORD PTR _source$[ebp], eax
; Line 727
	mov	eax, DWORD PTR _count$8848[ebp]
	sub	eax, 1
	mov	DWORD PTR _count$8848[ebp], eax
; Line 728
	mov	eax, DWORD PTR _target$[ebp]
	mov	cl, BYTE PTR _c$[ebp]
	mov	BYTE PTR [eax], cl
; Line 729
	movzx	eax, WORD PTR _c$[ebp]
	sar	eax, 8
	mov	ecx, DWORD PTR _target$[ebp]
	mov	BYTE PTR [ecx+1], al
; Line 730
	mov	eax, DWORD PTR _target$[ebp]
	mov	cl, BYTE PTR _trail$[ebp]
	mov	BYTE PTR [eax+2], cl
; Line 731
	movzx	eax, WORD PTR _trail$[ebp]
	sar	eax, 8
	mov	ecx, DWORD PTR _target$[ebp]
	mov	BYTE PTR [ecx+3], al
; Line 732
	mov	eax, DWORD PTR _target$[ebp]
	add	eax, 4
	mov	DWORD PTR _target$[ebp], eax
; Line 733
	jmp	SHORT $LN25@UTF16LEFro
$LN24@UTF16LEFro:
; Line 734
	jmp	SHORT $LN27@UTF16LEFro
$LN25@UTF16LEFro:
; Line 736
	mov	eax, DWORD PTR _count$8848[ebp]
	sub	eax, 1
	mov	DWORD PTR _count$8848[ebp], eax
; Line 737
	jmp	$LN28@UTF16LEFro
$LN27@UTF16LEFro:
; Line 738
	jmp	$LN22@UTF16LEFro
$LN21@UTF16LEFro:
; Line 739
	cmp	DWORD PTR _count$8848[ebp], 0
	jbe	$LN22@UTF16LEFro
; Line 740
	mov	eax, DWORD PTR _source$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR _c$[ebp], cx
	mov	edx, DWORD PTR _source$[ebp]
	add	edx, 2
	mov	DWORD PTR _source$[ebp], edx
; Line 741
	movzx	eax, WORD PTR _c$[ebp]
	and	eax, -2048				; fffff800H
	cmp	eax, 55296				; 0000d800H
	je	SHORT $LN19@UTF16LEFro
; Line 742
	mov	eax, DWORD PTR _target$[ebp]
	mov	cl, BYTE PTR _c$[ebp]
	mov	BYTE PTR [eax], cl
; Line 743
	movzx	eax, WORD PTR _c$[ebp]
	sar	eax, 8
	mov	ecx, DWORD PTR _target$[ebp]
	mov	BYTE PTR [ecx+1], al
; Line 744
	mov	eax, DWORD PTR _target$[ebp]
	add	eax, 2
	mov	DWORD PTR _target$[ebp], eax
; Line 745
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _sourceIndex$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
; Line 746
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _sourceIndex$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
	mov	eax, DWORD PTR _sourceIndex$[ebp]
	add	eax, 1
	mov	DWORD PTR _sourceIndex$[ebp], eax
	jmp	$LN18@UTF16LEFro
$LN19@UTF16LEFro:
; Line 747
	movzx	eax, WORD PTR _c$[ebp]
	and	eax, 1024				; 00000400H
	jne	$LN17@UTF16LEFro
	cmp	DWORD PTR _count$8848[ebp], 2
	jb	$LN17@UTF16LEFro
	mov	eax, DWORD PTR _source$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR _trail$[ebp], cx
	movzx	edx, WORD PTR _trail$[ebp]
	and	edx, -1024				; fffffc00H
	cmp	edx, 56320				; 0000dc00H
	jne	$LN17@UTF16LEFro
; Line 748
	mov	eax, DWORD PTR _source$[ebp]
	add	eax, 2
	mov	DWORD PTR _source$[ebp], eax
; Line 749
	mov	eax, DWORD PTR _count$8848[ebp]
	sub	eax, 1
	mov	DWORD PTR _count$8848[ebp], eax
; Line 750
	mov	eax, DWORD PTR _target$[ebp]
	mov	cl, BYTE PTR _c$[ebp]
	mov	BYTE PTR [eax], cl
; Line 751
	movzx	eax, WORD PTR _c$[ebp]
	sar	eax, 8
	mov	ecx, DWORD PTR _target$[ebp]
	mov	BYTE PTR [ecx+1], al
; Line 752
	mov	eax, DWORD PTR _target$[ebp]
	mov	cl, BYTE PTR _trail$[ebp]
	mov	BYTE PTR [eax+2], cl
; Line 753
	movzx	eax, WORD PTR _trail$[ebp]
	sar	eax, 8
	mov	ecx, DWORD PTR _target$[ebp]
	mov	BYTE PTR [ecx+3], al
; Line 754
	mov	eax, DWORD PTR _target$[ebp]
	add	eax, 4
	mov	DWORD PTR _target$[ebp], eax
; Line 755
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _sourceIndex$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
; Line 756
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _sourceIndex$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
; Line 757
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _sourceIndex$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
; Line 758
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _sourceIndex$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
; Line 759
	mov	eax, DWORD PTR _sourceIndex$[ebp]
	add	eax, 2
	mov	DWORD PTR _sourceIndex$[ebp], eax
; Line 760
	jmp	SHORT $LN18@UTF16LEFro
$LN17@UTF16LEFro:
; Line 761
	jmp	SHORT $LN22@UTF16LEFro
$LN18@UTF16LEFro:
; Line 763
	mov	eax, DWORD PTR _count$8848[ebp]
	sub	eax, 1
	mov	DWORD PTR _count$8848[ebp], eax
; Line 764
	jmp	$LN21@UTF16LEFro
$LN22@UTF16LEFro:
; Line 767
	cmp	DWORD PTR _count$8848[ebp], 0
	jne	SHORT $LN15@UTF16LEFro
; Line 769
	cmp	DWORD PTR _length$[ebp], 0
	jbe	SHORT $LN14@UTF16LEFro
	cmp	DWORD PTR _targetCapacity$[ebp], 0
	jbe	SHORT $LN14@UTF16LEFro
; Line 776
	mov	eax, DWORD PTR _source$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR _c$[ebp], cx
	movzx	edx, WORD PTR _c$[ebp]
	and	edx, -2048				; fffff800H
	mov	eax, DWORD PTR _source$[ebp]
	add	eax, 2
	mov	DWORD PTR _source$[ebp], eax
	cmp	edx, 55296				; 0000d800H
	jne	SHORT $LN39@UTF16LEFro
	mov	DWORD PTR tv234[ebp], 1
	jmp	SHORT $LN40@UTF16LEFro
$LN39@UTF16LEFro:
	mov	DWORD PTR tv234[ebp], 0
$LN40@UTF16LEFro:
	cmp	DWORD PTR tv234[ebp], 0
	jne	SHORT $LN13@UTF16LEFro
; Line 777
	mov	al, BYTE PTR _c$[ebp]
	mov	BYTE PTR _overflow$[ebp], al
; Line 778
	movzx	eax, WORD PTR _c$[ebp]
	sar	eax, 8
	mov	BYTE PTR _overflow$[ebp+1], al
; Line 779
	mov	DWORD PTR _length$[ebp], 2
; Line 780
	xor	eax, eax
	mov	WORD PTR _c$[ebp], ax
$LN13@UTF16LEFro:
; Line 783
	jmp	SHORT $LN12@UTF16LEFro
$LN14@UTF16LEFro:
; Line 784
	mov	DWORD PTR _length$[ebp], 0
; Line 785
	xor	eax, eax
	mov	WORD PTR _c$[ebp], ax
$LN12@UTF16LEFro:
; Line 787
	jmp	SHORT $LN11@UTF16LEFro
$LN15@UTF16LEFro:
; Line 789
	mov	eax, DWORD PTR _count$8848[ebp]
	mov	ecx, DWORD PTR _targetCapacity$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR _targetCapacity$[ebp], edx
$LN11@UTF16LEFro:
; Line 791
	jmp	SHORT $LN10@UTF16LEFro
$LN31@UTF16LEFro:
; Line 792
	mov	DWORD PTR _length$[ebp], 0
$LN10@UTF16LEFro:
; Line 795
	movzx	eax, WORD PTR _c$[ebp]
	test	eax, eax
	je	$LN9@UTF16LEFro
; Line 801
	mov	DWORD PTR _length$[ebp], 0
; Line 802
	movzx	eax, WORD PTR _c$[ebp]
	and	eax, 1024				; 00000400H
	jne	SHORT $LN8@UTF16LEFro
; Line 803
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR _source$[ebp]
	cmp	ecx, DWORD PTR [eax+12]
	jae	SHORT $LN4@UTF16LEFro
; Line 804
	mov	eax, DWORD PTR _source$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR _trail$[ebp], cx
	movzx	edx, WORD PTR _trail$[ebp]
	and	edx, -1024				; fffffc00H
	cmp	edx, 56320				; 0000dc00H
	jne	SHORT $LN6@UTF16LEFro
; Line 806
	mov	eax, DWORD PTR _source$[ebp]
	add	eax, 2
	mov	DWORD PTR _source$[ebp], eax
; Line 807
	mov	al, BYTE PTR _c$[ebp]
	mov	BYTE PTR _overflow$[ebp], al
; Line 808
	movzx	eax, WORD PTR _c$[ebp]
	sar	eax, 8
	mov	BYTE PTR _overflow$[ebp+1], al
; Line 809
	mov	al, BYTE PTR _trail$[ebp]
	mov	BYTE PTR _overflow$[ebp+2], al
; Line 810
	movzx	eax, WORD PTR _trail$[ebp]
	sar	eax, 8
	mov	BYTE PTR _overflow$[ebp+3], al
; Line 811
	mov	DWORD PTR _length$[ebp], 4
; Line 812
	xor	eax, eax
	mov	WORD PTR _c$[ebp], ax
; Line 813
	jmp	SHORT $LN4@UTF16LEFro
$LN6@UTF16LEFro:
; Line 815
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 12			; 0000000cH
$LN4@UTF16LEFro:
; Line 820
	jmp	SHORT $LN3@UTF16LEFro
$LN8@UTF16LEFro:
; Line 822
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 12			; 0000000cH
$LN3@UTF16LEFro:
; Line 824
	movzx	eax, WORD PTR _c$[ebp]
	mov	ecx, DWORD PTR _cnv$[ebp]
	mov	DWORD PTR [ecx+56], eax
$LN9@UTF16LEFro:
; Line 827
	cmp	DWORD PTR _length$[ebp], 0
	jbe	SHORT $LN2@UTF16LEFro
; Line 833
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sourceIndex$[ebp]
	push	ecx
	lea	edx, DWORD PTR _offsets$[ebp]
	push	edx
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	lea	edx, DWORD PTR _target$[ebp]
	push	edx
	mov	eax, DWORD PTR _length$[ebp]
	push	eax
	lea	ecx, DWORD PTR _overflow$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cnv$[ebp]
	push	edx
	call	_ucnv_fromUWriteBytes_56
	add	esp, 32					; 00000020H
; Line 834
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	sub	ecx, DWORD PTR _target$[ebp]
	mov	DWORD PTR _targetCapacity$[ebp], ecx
$LN2@UTF16LEFro:
; Line 837
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	cmp	DWORD PTR [eax], 0
	jg	SHORT $LN1@UTF16LEFro
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR _source$[ebp]
	cmp	ecx, DWORD PTR [eax+12]
	jae	SHORT $LN1@UTF16LEFro
	cmp	DWORD PTR _targetCapacity$[ebp], 0
	jne	SHORT $LN1@UTF16LEFro
; Line 838
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
$LN1@UTF16LEFro:
; Line 842
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR _source$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 843
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR _target$[ebp]
	mov	DWORD PTR [eax+16], ecx
; Line 844
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR _offsets$[ebp]
	mov	DWORD PTR [eax+24], ecx
$LN37@UTF16LEFro:
; Line 845
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN45@UTF16LEFro
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 328				; 00000148H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN45@UTF16LEFro:
	DD	3
	DD	$LN44@UTF16LEFro
$LN44@UTF16LEFro:
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN41@UTF16LEFro
	DD	-44					; ffffffd4H
	DD	4
	DD	$LN42@UTF16LEFro
	DD	-116					; ffffff8cH
	DD	4
	DD	$LN43@UTF16LEFro
$LN43@UTF16LEFro:
	DB	111					; 0000006fH
	DB	118					; 00000076H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	102					; 00000066H
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	119					; 00000077H
	DB	0
$LN42@UTF16LEFro:
	DB	111					; 0000006fH
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	115					; 00000073H
	DB	0
$LN41@UTF16LEFro:
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	103					; 00000067H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	0
__UTF16LEFromUnicodeWithOffsets ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __UTF16LEToUnicodeWithOffsets
_TEXT	SEGMENT
_p$8928 = -128						; size = 4
_trail$ = -116						; size = 2
_c$ = -104						; size = 2
_sourceIndex$ = -92					; size = 4
_count$ = -80						; size = 4
_length$ = -68						; size = 4
_targetCapacity$ = -56					; size = 4
_offsets$ = -44						; size = 4
_target$ = -32						; size = 4
_source$ = -20						; size = 4
_cnv$ = -8						; size = 4
_pArgs$ = 8						; size = 4
_pErrorCode$ = 12					; size = 4
__UTF16LEToUnicodeWithOffsets PROC			; COMDAT
; Line 849
	push	ebp
	mov	ebp, esp
	sub	esp, 324				; 00000144H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-324]
	mov	ecx, 81					; 00000051H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 858
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cmp	DWORD PTR [ecx+48], 8
	jge	SHORT $LN55@UTF16LEToU
; Line 859
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pArgs$[ebp]
	push	ecx
	call	__UTF16ToUnicodeWithOffsets
	add	esp, 8
; Line 860
	jmp	$LN56@UTF16LEToU
$LN55@UTF16LEToU:
; Line 863
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _cnv$[ebp], ecx
; Line 864
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _source$[ebp], ecx
; Line 865
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	sub	ecx, DWORD PTR _source$[ebp]
	mov	DWORD PTR _length$[ebp], ecx
; Line 866
	jne	SHORT $LN54@UTF16LEToU
	mov	eax, DWORD PTR _cnv$[ebp]
	cmp	DWORD PTR [eax+44], 0
	jne	SHORT $LN54@UTF16LEToU
; Line 868
	jmp	$LN56@UTF16LEToU
$LN54@UTF16LEToU:
; Line 871
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _target$[ebp], ecx
; Line 872
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR _target$[ebp]
	cmp	ecx, DWORD PTR [eax+20]
	jb	SHORT $LN53@UTF16LEToU
; Line 873
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
; Line 874
	jmp	$LN56@UTF16LEToU
$LN53@UTF16LEToU:
; Line 877
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR _pArgs$[ebp]
	mov	edx, DWORD PTR [eax+20]
	sub	edx, DWORD PTR [ecx+16]
	sar	edx, 1
	mov	DWORD PTR _targetCapacity$[ebp], edx
; Line 878
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR _offsets$[ebp], ecx
; Line 879
	mov	DWORD PTR _sourceIndex$[ebp], 0
; Line 880
	xor	eax, eax
	mov	WORD PTR _c$[ebp], ax
; Line 883
	mov	eax, DWORD PTR _cnv$[ebp]
	cmp	DWORD PTR [eax+44], 0
	je	SHORT $LN52@UTF16LEToU
; Line 890
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	ecx, DWORD PTR _cnv$[ebp]
	mov	dl, BYTE PTR [ecx+44]
	mov	BYTE PTR [eax+37], dl
; Line 891
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	BYTE PTR [eax+36], 1
; Line 892
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	DWORD PTR [eax+44], 0
$LN52@UTF16LEToU:
; Line 894
	mov	eax, DWORD PTR _cnv$[ebp]
	movsx	ecx, BYTE PTR [eax+36]
	mov	DWORD PTR _count$[ebp], ecx
	cmp	DWORD PTR _count$[ebp], 0
	je	$LN51@UTF16LEToU
; Line 895
	mov	eax, DWORD PTR _cnv$[ebp]
	add	eax, 37					; 00000025H
	mov	DWORD PTR _p$8928[ebp], eax
$LN50@UTF16LEToU:
; Line 897
	mov	eax, DWORD PTR _p$8928[ebp]
	add	eax, DWORD PTR _count$[ebp]
	mov	ecx, DWORD PTR _source$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl
	mov	eax, DWORD PTR _count$[ebp]
	add	eax, 1
	mov	DWORD PTR _count$[ebp], eax
	mov	ecx, DWORD PTR _source$[ebp]
	add	ecx, 1
	mov	DWORD PTR _source$[ebp], ecx
; Line 898
	mov	eax, DWORD PTR _sourceIndex$[ebp]
	add	eax, 1
	mov	DWORD PTR _sourceIndex$[ebp], eax
; Line 899
	mov	eax, DWORD PTR _length$[ebp]
	sub	eax, 1
	mov	DWORD PTR _length$[ebp], eax
; Line 900
	cmp	DWORD PTR _count$[ebp], 2
	jne	$LN47@UTF16LEToU
; Line 901
	mov	eax, DWORD PTR _p$8928[ebp]
	movzx	ecx, BYTE PTR [eax+1]
	shl	ecx, 8
	mov	edx, DWORD PTR _p$8928[ebp]
	movzx	eax, BYTE PTR [edx]
	or	ecx, eax
	mov	WORD PTR _c$[ebp], cx
; Line 902
	movzx	eax, WORD PTR _c$[ebp]
	and	eax, -2048				; fffff800H
	cmp	eax, 55296				; 0000d800H
	je	SHORT $LN46@UTF16LEToU
; Line 904
	mov	eax, DWORD PTR _target$[ebp]
	mov	cx, WORD PTR _c$[ebp]
	mov	WORD PTR [eax], cx
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 2
	mov	DWORD PTR _target$[ebp], edx
; Line 905
	cmp	DWORD PTR _offsets$[ebp], 0
	je	SHORT $LN45@UTF16LEToU
; Line 906
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	DWORD PTR [eax], -1
	mov	ecx, DWORD PTR _offsets$[ebp]
	add	ecx, 4
	mov	DWORD PTR _offsets$[ebp], ecx
$LN45@UTF16LEToU:
; Line 908
	mov	eax, DWORD PTR _targetCapacity$[ebp]
	sub	eax, 1
	mov	DWORD PTR _targetCapacity$[ebp], eax
; Line 909
	mov	DWORD PTR _count$[ebp], 0
; Line 910
	xor	eax, eax
	mov	WORD PTR _c$[ebp], ax
; Line 911
	jmp	$LN48@UTF16LEToU
	jmp	SHORT $LN44@UTF16LEToU
$LN46@UTF16LEToU:
; Line 912
	movzx	eax, WORD PTR _c$[ebp]
	and	eax, 1024				; 00000400H
	jne	SHORT $LN43@UTF16LEToU
; Line 914
	xor	eax, eax
	mov	WORD PTR _c$[ebp], ax
; Line 915
	jmp	SHORT $LN44@UTF16LEToU
$LN43@UTF16LEToU:
; Line 917
	jmp	$LN48@UTF16LEToU
$LN44@UTF16LEToU:
; Line 918
	jmp	$LN49@UTF16LEToU
$LN47@UTF16LEToU:
; Line 919
	cmp	DWORD PTR _count$[ebp], 4
	jne	$LN49@UTF16LEToU
; Line 920
	mov	eax, DWORD PTR _p$8928[ebp]
	movzx	ecx, BYTE PTR [eax+1]
	shl	ecx, 8
	mov	edx, DWORD PTR _p$8928[ebp]
	movzx	eax, BYTE PTR [edx]
	or	ecx, eax
	mov	WORD PTR _c$[ebp], cx
; Line 921
	mov	eax, DWORD PTR _p$8928[ebp]
	movzx	ecx, BYTE PTR [eax+3]
	shl	ecx, 8
	mov	edx, DWORD PTR _p$8928[ebp]
	movzx	eax, BYTE PTR [edx+2]
	or	ecx, eax
	mov	WORD PTR _trail$[ebp], cx
; Line 922
	movzx	eax, WORD PTR _trail$[ebp]
	and	eax, -1024				; fffffc00H
	cmp	eax, 56320				; 0000dc00H
	jne	$LN39@UTF16LEToU
; Line 924
	mov	eax, DWORD PTR _target$[ebp]
	mov	cx, WORD PTR _c$[ebp]
	mov	WORD PTR [eax], cx
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 2
	mov	DWORD PTR _target$[ebp], edx
; Line 925
	cmp	DWORD PTR _targetCapacity$[ebp], 2
	jb	SHORT $LN38@UTF16LEToU
; Line 926
	mov	eax, DWORD PTR _target$[ebp]
	mov	cx, WORD PTR _trail$[ebp]
	mov	WORD PTR [eax], cx
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 2
	mov	DWORD PTR _target$[ebp], edx
; Line 927
	cmp	DWORD PTR _offsets$[ebp], 0
	je	SHORT $LN37@UTF16LEToU
; Line 928
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	DWORD PTR [eax], -1
	mov	ecx, DWORD PTR _offsets$[ebp]
	add	ecx, 4
	mov	DWORD PTR _offsets$[ebp], ecx
; Line 929
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	DWORD PTR [eax], -1
	mov	ecx, DWORD PTR _offsets$[ebp]
	add	ecx, 4
	mov	DWORD PTR _offsets$[ebp], ecx
$LN37@UTF16LEToU:
; Line 931
	mov	eax, DWORD PTR _targetCapacity$[ebp]
	sub	eax, 2
	mov	DWORD PTR _targetCapacity$[ebp], eax
; Line 932
	jmp	SHORT $LN36@UTF16LEToU
$LN38@UTF16LEToU:
; Line 933
	mov	DWORD PTR _targetCapacity$[ebp], 0
; Line 934
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	cx, WORD PTR _trail$[ebp]
	mov	WORD PTR [eax+116], cx
; Line 935
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	BYTE PTR [eax+65], 1
; Line 936
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
$LN36@UTF16LEToU:
; Line 938
	mov	DWORD PTR _count$[ebp], 0
; Line 939
	xor	eax, eax
	mov	WORD PTR _c$[ebp], ax
; Line 940
	jmp	SHORT $LN48@UTF16LEToU
; Line 941
	jmp	SHORT $LN49@UTF16LEToU
$LN39@UTF16LEToU:
; Line 943
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 12			; 0000000cH
; Line 946
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	sub	ecx, DWORD PTR _source$[ebp]
	cmp	ecx, 2
	jl	SHORT $LN34@UTF16LEToU
; Line 947
	mov	eax, DWORD PTR _source$[ebp]
	sub	eax, 2
	mov	DWORD PTR _source$[ebp], eax
; Line 948
	jmp	SHORT $LN33@UTF16LEToU
$LN34@UTF16LEToU:
; Line 954
	mov	eax, DWORD PTR _p$8928[ebp]
	movzx	ecx, BYTE PTR [eax+2]
	or	ecx, 256				; 00000100H
	mov	edx, DWORD PTR _cnv$[ebp]
	mov	DWORD PTR [edx+44], ecx
; Line 955
	mov	eax, DWORD PTR _source$[ebp]
	sub	eax, 1
	mov	DWORD PTR _source$[ebp], eax
$LN33@UTF16LEToU:
; Line 957
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	BYTE PTR [eax+36], 2
; Line 960
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR _source$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 961
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR _target$[ebp]
	mov	DWORD PTR [eax+16], ecx
; Line 962
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR _offsets$[ebp]
	mov	DWORD PTR [eax+24], ecx
; Line 963
	jmp	$LN56@UTF16LEToU
$LN49@UTF16LEToU:
; Line 966
	cmp	DWORD PTR _length$[ebp], 0
	ja	$LN50@UTF16LEToU
$LN48@UTF16LEToU:
; Line 967
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	cl, BYTE PTR _count$[ebp]
	mov	BYTE PTR [eax+36], cl
$LN51@UTF16LEToU:
; Line 971
	mov	eax, DWORD PTR _targetCapacity$[ebp]
	shl	eax, 1
	mov	DWORD PTR _count$[ebp], eax
; Line 972
	mov	eax, DWORD PTR _count$[ebp]
	cmp	eax, DWORD PTR _length$[ebp]
	jbe	SHORT $LN32@UTF16LEToU
; Line 973
	mov	eax, DWORD PTR _length$[ebp]
	and	eax, -2					; fffffffeH
	mov	DWORD PTR _count$[ebp], eax
$LN32@UTF16LEToU:
; Line 975
	movzx	eax, WORD PTR _c$[ebp]
	test	eax, eax
	jne	$LN31@UTF16LEToU
	cmp	DWORD PTR _count$[ebp], 0
	jbe	$LN31@UTF16LEToU
; Line 976
	mov	eax, DWORD PTR _length$[ebp]
	sub	eax, DWORD PTR _count$[ebp]
	mov	DWORD PTR _length$[ebp], eax
; Line 977
	mov	eax, DWORD PTR _count$[ebp]
	shr	eax, 1
	mov	DWORD PTR _count$[ebp], eax
; Line 978
	mov	eax, DWORD PTR _targetCapacity$[ebp]
	sub	eax, DWORD PTR _count$[ebp]
	mov	DWORD PTR _targetCapacity$[ebp], eax
; Line 979
	cmp	DWORD PTR _offsets$[ebp], 0
	jne	$LN21@UTF16LEToU
$LN29@UTF16LEToU:
; Line 981
	mov	eax, DWORD PTR _source$[ebp]
	movzx	ecx, BYTE PTR [eax+1]
	shl	ecx, 8
	mov	edx, DWORD PTR _source$[ebp]
	movzx	eax, BYTE PTR [edx]
	or	ecx, eax
	mov	WORD PTR _c$[ebp], cx
; Line 982
	mov	eax, DWORD PTR _source$[ebp]
	add	eax, 2
	mov	DWORD PTR _source$[ebp], eax
; Line 983
	movzx	eax, WORD PTR _c$[ebp]
	and	eax, -2048				; fffff800H
	cmp	eax, 55296				; 0000d800H
	je	SHORT $LN26@UTF16LEToU
; Line 984
	mov	eax, DWORD PTR _target$[ebp]
	mov	cx, WORD PTR _c$[ebp]
	mov	WORD PTR [eax], cx
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 2
	mov	DWORD PTR _target$[ebp], edx
; Line 985
	jmp	SHORT $LN28@UTF16LEToU
$LN26@UTF16LEToU:
; Line 987
	movzx	eax, WORD PTR _c$[ebp]
	and	eax, 1024				; 00000400H
	jne	SHORT $LN24@UTF16LEToU
	cmp	DWORD PTR _count$[ebp], 2
	jb	SHORT $LN24@UTF16LEToU
	mov	eax, DWORD PTR _source$[ebp]
	movzx	ecx, BYTE PTR [eax+1]
	shl	ecx, 8
	mov	edx, DWORD PTR _source$[ebp]
	movzx	eax, BYTE PTR [edx]
	or	ecx, eax
	mov	WORD PTR _trail$[ebp], cx
	movzx	ecx, WORD PTR _trail$[ebp]
	and	ecx, -1024				; fffffc00H
	cmp	ecx, 56320				; 0000dc00H
	jne	SHORT $LN24@UTF16LEToU
; Line 988
	mov	eax, DWORD PTR _source$[ebp]
	add	eax, 2
	mov	DWORD PTR _source$[ebp], eax
; Line 989
	mov	eax, DWORD PTR _count$[ebp]
	sub	eax, 1
	mov	DWORD PTR _count$[ebp], eax
; Line 990
	mov	eax, DWORD PTR _target$[ebp]
	mov	cx, WORD PTR _c$[ebp]
	mov	WORD PTR [eax], cx
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 2
	mov	DWORD PTR _target$[ebp], edx
; Line 991
	mov	eax, DWORD PTR _target$[ebp]
	mov	cx, WORD PTR _trail$[ebp]
	mov	WORD PTR [eax], cx
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 2
	mov	DWORD PTR _target$[ebp], edx
; Line 992
	jmp	SHORT $LN28@UTF16LEToU
$LN24@UTF16LEToU:
; Line 993
	jmp	SHORT $LN27@UTF16LEToU
$LN28@UTF16LEToU:
; Line 995
	mov	eax, DWORD PTR _count$[ebp]
	sub	eax, 1
	mov	DWORD PTR _count$[ebp], eax
	jne	$LN29@UTF16LEToU
$LN27@UTF16LEToU:
; Line 996
	jmp	$LN22@UTF16LEToU
$LN21@UTF16LEToU:
; Line 998
	mov	eax, DWORD PTR _source$[ebp]
	movzx	ecx, BYTE PTR [eax+1]
	shl	ecx, 8
	mov	edx, DWORD PTR _source$[ebp]
	movzx	eax, BYTE PTR [edx]
	or	ecx, eax
	mov	WORD PTR _c$[ebp], cx
; Line 999
	mov	eax, DWORD PTR _source$[ebp]
	add	eax, 2
	mov	DWORD PTR _source$[ebp], eax
; Line 1000
	movzx	eax, WORD PTR _c$[ebp]
	and	eax, -2048				; fffff800H
	cmp	eax, 55296				; 0000d800H
	je	SHORT $LN18@UTF16LEToU
; Line 1001
	mov	eax, DWORD PTR _target$[ebp]
	mov	cx, WORD PTR _c$[ebp]
	mov	WORD PTR [eax], cx
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 2
	mov	DWORD PTR _target$[ebp], edx
; Line 1002
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _sourceIndex$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
; Line 1003
	mov	eax, DWORD PTR _sourceIndex$[ebp]
	add	eax, 2
	mov	DWORD PTR _sourceIndex$[ebp], eax
; Line 1004
	jmp	$LN20@UTF16LEToU
$LN18@UTF16LEToU:
; Line 1006
	movzx	eax, WORD PTR _c$[ebp]
	and	eax, 1024				; 00000400H
	jne	$LN16@UTF16LEToU
	cmp	DWORD PTR _count$[ebp], 2
	jb	$LN16@UTF16LEToU
	mov	eax, DWORD PTR _source$[ebp]
	movzx	ecx, BYTE PTR [eax+1]
	shl	ecx, 8
	mov	edx, DWORD PTR _source$[ebp]
	movzx	eax, BYTE PTR [edx]
	or	ecx, eax
	mov	WORD PTR _trail$[ebp], cx
	movzx	ecx, WORD PTR _trail$[ebp]
	and	ecx, -1024				; fffffc00H
	cmp	ecx, 56320				; 0000dc00H
	jne	SHORT $LN16@UTF16LEToU
; Line 1007
	mov	eax, DWORD PTR _source$[ebp]
	add	eax, 2
	mov	DWORD PTR _source$[ebp], eax
; Line 1008
	mov	eax, DWORD PTR _count$[ebp]
	sub	eax, 1
	mov	DWORD PTR _count$[ebp], eax
; Line 1009
	mov	eax, DWORD PTR _target$[ebp]
	mov	cx, WORD PTR _c$[ebp]
	mov	WORD PTR [eax], cx
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 2
	mov	DWORD PTR _target$[ebp], edx
; Line 1010
	mov	eax, DWORD PTR _target$[ebp]
	mov	cx, WORD PTR _trail$[ebp]
	mov	WORD PTR [eax], cx
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 2
	mov	DWORD PTR _target$[ebp], edx
; Line 1011
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _sourceIndex$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
; Line 1012
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _sourceIndex$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
; Line 1013
	mov	eax, DWORD PTR _sourceIndex$[ebp]
	add	eax, 4
	mov	DWORD PTR _sourceIndex$[ebp], eax
; Line 1014
	jmp	SHORT $LN20@UTF16LEToU
$LN16@UTF16LEToU:
; Line 1015
	jmp	SHORT $LN22@UTF16LEToU
$LN20@UTF16LEToU:
; Line 1017
	mov	eax, DWORD PTR _count$[ebp]
	sub	eax, 1
	mov	DWORD PTR _count$[ebp], eax
	jne	$LN21@UTF16LEToU
$LN22@UTF16LEToU:
; Line 1020
	cmp	DWORD PTR _count$[ebp], 0
	jne	SHORT $LN14@UTF16LEToU
; Line 1022
	xor	eax, eax
	mov	WORD PTR _c$[ebp], ax
; Line 1023
	jmp	SHORT $LN31@UTF16LEToU
$LN14@UTF16LEToU:
; Line 1025
	mov	eax, DWORD PTR _count$[ebp]
	mov	ecx, DWORD PTR _length$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2-2]
	mov	DWORD PTR _length$[ebp], edx
; Line 1026
	mov	eax, DWORD PTR _targetCapacity$[ebp]
	add	eax, DWORD PTR _count$[ebp]
	mov	DWORD PTR _targetCapacity$[ebp], eax
$LN31@UTF16LEToU:
; Line 1030
	movzx	eax, WORD PTR _c$[ebp]
	test	eax, eax
	je	$LN12@UTF16LEToU
; Line 1036
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	cl, BYTE PTR _c$[ebp]
	mov	BYTE PTR [eax+37], cl
; Line 1037
	movzx	eax, WORD PTR _c$[ebp]
	sar	eax, 8
	mov	ecx, DWORD PTR _cnv$[ebp]
	mov	BYTE PTR [ecx+38], al
; Line 1038
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	BYTE PTR [eax+36], 2
; Line 1040
	movzx	eax, WORD PTR _c$[ebp]
	and	eax, 1024				; 00000400H
	jne	$LN11@UTF16LEToU
; Line 1041
	cmp	DWORD PTR _length$[ebp], 2
	jb	$LN6@UTF16LEToU
; Line 1042
	mov	eax, DWORD PTR _source$[ebp]
	movzx	ecx, BYTE PTR [eax+1]
	shl	ecx, 8
	mov	edx, DWORD PTR _source$[ebp]
	movzx	eax, BYTE PTR [edx]
	or	ecx, eax
	mov	WORD PTR _trail$[ebp], cx
	movzx	ecx, WORD PTR _trail$[ebp]
	and	ecx, -1024				; fffffc00H
	cmp	ecx, 56320				; 0000dc00H
	jne	SHORT $LN9@UTF16LEToU
; Line 1044
	mov	eax, DWORD PTR _source$[ebp]
	add	eax, 2
	mov	DWORD PTR _source$[ebp], eax
; Line 1045
	mov	eax, DWORD PTR _length$[ebp]
	sub	eax, 2
	mov	DWORD PTR _length$[ebp], eax
; Line 1046
	mov	eax, DWORD PTR _target$[ebp]
	mov	cx, WORD PTR _c$[ebp]
	mov	WORD PTR [eax], cx
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 2
	mov	DWORD PTR _target$[ebp], edx
; Line 1047
	cmp	DWORD PTR _offsets$[ebp], 0
	je	SHORT $LN8@UTF16LEToU
; Line 1048
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _sourceIndex$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
$LN8@UTF16LEToU:
; Line 1050
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	cx, WORD PTR _trail$[ebp]
	mov	WORD PTR [eax+116], cx
; Line 1051
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	BYTE PTR [eax+65], 1
; Line 1052
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	BYTE PTR [eax+36], 0
; Line 1053
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
; Line 1054
	jmp	SHORT $LN6@UTF16LEToU
$LN9@UTF16LEToU:
; Line 1056
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 12			; 0000000cH
$LN6@UTF16LEToU:
; Line 1061
	jmp	SHORT $LN12@UTF16LEToU
$LN11@UTF16LEToU:
; Line 1063
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 12			; 0000000cH
$LN12@UTF16LEToU:
; Line 1067
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	cmp	DWORD PTR [eax], 0
	jg	SHORT $LN4@UTF16LEToU
; Line 1069
	cmp	DWORD PTR _length$[ebp], 0
	jbe	SHORT $LN4@UTF16LEToU
; Line 1070
	cmp	DWORD PTR _targetCapacity$[ebp], 0
	jne	SHORT $LN2@UTF16LEToU
; Line 1071
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
; Line 1072
	jmp	SHORT $LN4@UTF16LEToU
$LN2@UTF16LEToU:
; Line 1074
	mov	eax, DWORD PTR _cnv$[ebp]
	movsx	ecx, BYTE PTR [eax+36]
	mov	edx, DWORD PTR _cnv$[ebp]
	mov	eax, DWORD PTR _source$[ebp]
	mov	al, BYTE PTR [eax]
	mov	BYTE PTR [edx+ecx+37], al
	mov	ecx, DWORD PTR _cnv$[ebp]
	mov	dl, BYTE PTR [ecx+36]
	add	dl, 1
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	BYTE PTR [eax+36], dl
	mov	ecx, DWORD PTR _source$[ebp]
	add	ecx, 1
	mov	DWORD PTR _source$[ebp], ecx
$LN4@UTF16LEToU:
; Line 1080
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR _source$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 1081
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR _target$[ebp]
	mov	DWORD PTR [eax+16], ecx
; Line 1082
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR _offsets$[ebp]
	mov	DWORD PTR [eax+24], ecx
$LN56@UTF16LEToU:
; Line 1083
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 324				; 00000144H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__UTF16LEToUnicodeWithOffsets ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __UTF16LEGetNextUChar
_TEXT	SEGMENT
_bytes$9030 = -68					; size = 4
_bytes$9023 = -56					; size = 4
_trail$9016 = -44					; size = 2
_c$ = -32						; size = 4
_sourceLimit$ = -20					; size = 4
_s$ = -8						; size = 4
_pArgs$ = 8						; size = 4
_err$ = 12						; size = 4
__UTF16LEGetNextUChar PROC				; COMDAT
; Line 1086
	push	ebp
	mov	ebp, esp
	sub	esp, 264				; 00000108H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-264]
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1090
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cmp	DWORD PTR [ecx+48], 8
	jge	SHORT $LN14@UTF16LEGet
; Line 1091
	mov	eax, -9					; fffffff7H
	jmp	$LN15@UTF16LEGet
$LN14@UTF16LEGet:
; Line 1094
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _s$[ebp], ecx
; Line 1095
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _sourceLimit$[ebp], ecx
; Line 1097
	mov	eax, DWORD PTR _s$[ebp]
	cmp	eax, DWORD PTR _sourceLimit$[ebp]
	jb	SHORT $LN13@UTF16LEGet
; Line 1099
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 8
; Line 1100
	mov	eax, 65535				; 0000ffffH
	jmp	$LN15@UTF16LEGet
$LN13@UTF16LEGet:
; Line 1103
	mov	eax, DWORD PTR _s$[ebp]
	add	eax, 2
	cmp	eax, DWORD PTR _sourceLimit$[ebp]
	jbe	SHORT $LN12@UTF16LEGet
; Line 1105
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _s$[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR [ecx+37], al
	mov	ecx, DWORD PTR _s$[ebp]
	add	ecx, 1
	mov	DWORD PTR _s$[ebp], ecx
; Line 1106
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx+36], 1
; Line 1107
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 1108
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 11			; 0000000bH
; Line 1109
	mov	eax, 65535				; 0000ffffH
	jmp	$LN15@UTF16LEGet
$LN12@UTF16LEGet:
; Line 1113
	mov	eax, DWORD PTR _s$[ebp]
	movzx	ecx, BYTE PTR [eax+1]
	shl	ecx, 8
	mov	edx, DWORD PTR _s$[ebp]
	movzx	eax, BYTE PTR [edx]
	or	ecx, eax
	mov	DWORD PTR _c$[ebp], ecx
; Line 1114
	mov	eax, DWORD PTR _s$[ebp]
	add	eax, 2
	mov	DWORD PTR _s$[ebp], eax
; Line 1117
	mov	eax, DWORD PTR _c$[ebp]
	and	eax, -2048				; fffff800H
	cmp	eax, 55296				; 0000d800H
	jne	$LN11@UTF16LEGet
; Line 1118
	mov	eax, DWORD PTR _c$[ebp]
	and	eax, 1024				; 00000400H
	jne	$LN10@UTF16LEGet
; Line 1119
	mov	eax, DWORD PTR _s$[ebp]
	add	eax, 2
	cmp	eax, DWORD PTR _sourceLimit$[ebp]
	ja	SHORT $LN9@UTF16LEGet
; Line 1123
	mov	eax, DWORD PTR _s$[ebp]
	movzx	ecx, BYTE PTR [eax+1]
	shl	ecx, 8
	mov	edx, DWORD PTR _s$[ebp]
	movzx	eax, BYTE PTR [edx]
	or	ecx, eax
	mov	WORD PTR _trail$9016[ebp], cx
; Line 1124
	movzx	eax, WORD PTR _trail$9016[ebp]
	and	eax, -1024				; fffffc00H
	cmp	eax, 56320				; 0000dc00H
	jne	SHORT $LN8@UTF16LEGet
; Line 1125
	mov	eax, DWORD PTR _c$[ebp]
	shl	eax, 10					; 0000000aH
	movzx	ecx, WORD PTR _trail$9016[ebp]
	lea	edx, DWORD PTR [eax+ecx-56613888]
	mov	DWORD PTR _c$[ebp], edx
; Line 1126
	mov	eax, DWORD PTR _s$[ebp]
	add	eax, 2
	mov	DWORD PTR _s$[ebp], eax
; Line 1127
	jmp	SHORT $LN7@UTF16LEGet
$LN8@UTF16LEGet:
; Line 1129
	mov	DWORD PTR _c$[ebp], -2			; fffffffeH
$LN7@UTF16LEGet:
; Line 1131
	jmp	SHORT $LN6@UTF16LEGet
$LN9@UTF16LEGet:
; Line 1133
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 37					; 00000025H
	mov	DWORD PTR _bytes$9023[ebp], ecx
; Line 1134
	mov	eax, DWORD PTR _s$[ebp]
	sub	eax, 2
	mov	DWORD PTR _s$[ebp], eax
; Line 1135
	mov	eax, DWORD PTR _sourceLimit$[ebp]
	sub	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _pArgs$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx+36], al
$LN5@UTF16LEGet:
; Line 1137
	mov	eax, DWORD PTR _bytes$9023[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl
	mov	eax, DWORD PTR _bytes$9023[ebp]
	add	eax, 1
	mov	DWORD PTR _bytes$9023[ebp], eax
	mov	ecx, DWORD PTR _s$[ebp]
	add	ecx, 1
	mov	DWORD PTR _s$[ebp], ecx
; Line 1138
	mov	eax, DWORD PTR _s$[ebp]
	cmp	eax, DWORD PTR _sourceLimit$[ebp]
	jb	SHORT $LN5@UTF16LEGet
; Line 1140
	mov	DWORD PTR _c$[ebp], 65535		; 0000ffffH
; Line 1141
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 11			; 0000000bH
$LN6@UTF16LEGet:
; Line 1143
	jmp	SHORT $LN2@UTF16LEGet
$LN10@UTF16LEGet:
; Line 1145
	mov	DWORD PTR _c$[ebp], -2			; fffffffeH
$LN2@UTF16LEGet:
; Line 1148
	cmp	DWORD PTR _c$[ebp], 0
	jge	SHORT $LN11@UTF16LEGet
; Line 1150
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 37					; 00000025H
	mov	DWORD PTR _bytes$9030[ebp], ecx
; Line 1151
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx+36], 2
; Line 1152
	mov	eax, DWORD PTR _bytes$9030[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	dl, BYTE PTR [ecx-2]
	mov	BYTE PTR [eax], dl
; Line 1153
	mov	eax, DWORD PTR _bytes$9030[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	dl, BYTE PTR [ecx-1]
	mov	BYTE PTR [eax+1], dl
; Line 1155
	mov	DWORD PTR _c$[ebp], 65535		; 0000ffffH
; Line 1156
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 12			; 0000000cH
$LN11@UTF16LEGet:
; Line 1160
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 1161
	mov	eax, DWORD PTR _c$[ebp]
$LN15@UTF16LEGet:
; Line 1162
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
__UTF16LEGetNextUChar ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __UTF16LEReset
_TEXT	SEGMENT
_cnv$ = 8						; size = 4
_choice$ = 12						; size = 4
__UTF16LEReset PROC					; COMDAT
; Line 1165
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1166
	cmp	DWORD PTR _choice$[ebp], 1
	jg	SHORT $LN4@UTF16LERes
; Line 1168
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	and	ecx, 15					; 0000000fH
	jne	SHORT $LN3@UTF16LERes
; Line 1169
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	DWORD PTR [eax+48], 8
; Line 1170
	jmp	SHORT $LN4@UTF16LERes
$LN3@UTF16LERes:
; Line 1171
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	DWORD PTR [eax+48], 0
$LN4@UTF16LERes:
; Line 1174
	cmp	DWORD PTR _choice$[ebp], 1
	je	SHORT $LN5@UTF16LERes
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	and	ecx, 15					; 0000000fH
	cmp	ecx, 1
	jne	SHORT $LN5@UTF16LERes
; Line 1176
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	DWORD PTR [eax+52], 1
$LN5@UTF16LERes:
; Line 1178
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
__UTF16LEReset ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __UTF16LEOpen
_TEXT	SEGMENT
_cnv$ = 8						; size = 4
_pArgs$ = 12						; size = 4
_pErrorCode$ = 16					; size = 4
__UTF16LEOpen PROC					; COMDAT
; Line 1183
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1184
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	and	ecx, 15					; 0000000fH
	cmp	ecx, 1
	ja	SHORT $LN2@UTF16LEOpe
; Line 1185
	push	0
	mov	eax, DWORD PTR _cnv$[ebp]
	push	eax
	call	__UTF16LEReset
	add	esp, 8
; Line 1186
	jmp	SHORT $LN3@UTF16LEOpe
$LN2@UTF16LEOpe:
; Line 1187
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 1
$LN3@UTF16LEOpe:
; Line 1189
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__UTF16LEOpen ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BD@MAFHNOBF@UTF?916LE?0version?$DN1?$AA@	; `string'
PUBLIC	??_C@_08NBDJLNFA@UTF?916LE?$AA@			; `string'
;	COMDAT ??_C@_0BD@MAFHNOBF@UTF?916LE?0version?$DN1?$AA@
CONST	SEGMENT
??_C@_0BD@MAFHNOBF@UTF?916LE?0version?$DN1?$AA@ DB 'UTF-16LE,version=1', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08NBDJLNFA@UTF?916LE?$AA@
CONST	SEGMENT
??_C@_08NBDJLNFA@UTF?916LE?$AA@ DB 'UTF-16LE', 00H	; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT __UTF16LEGetName
_TEXT	SEGMENT
_cnv$ = 8						; size = 4
__UTF16LEGetName PROC					; COMDAT
; Line 1192
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1193
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	and	ecx, 15					; 0000000fH
	jne	SHORT $LN2@UTF16LEGet@2
; Line 1194
	mov	eax, OFFSET ??_C@_08NBDJLNFA@UTF?916LE?$AA@
	jmp	SHORT $LN3@UTF16LEGet@2
; Line 1195
	jmp	SHORT $LN3@UTF16LEGet@2
$LN2@UTF16LEGet@2:
; Line 1196
	mov	eax, OFFSET ??_C@_0BD@MAFHNOBF@UTF?916LE?0version?$DN1?$AA@
$LN3@UTF16LEGet@2:
; Line 1198
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
__UTF16LEGetName ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __UTF16Reset
_TEXT	SEGMENT
_cnv$ = 8						; size = 4
_choice$ = 12						; size = 4
__UTF16Reset PROC					; COMDAT
; Line 1265
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1266
	cmp	DWORD PTR _choice$[ebp], 1
	jg	SHORT $LN2@UTF16Reset
; Line 1268
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	DWORD PTR [eax+48], 0
$LN2@UTF16Reset:
; Line 1270
	cmp	DWORD PTR _choice$[ebp], 1
	je	SHORT $LN3@UTF16Reset
; Line 1272
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	DWORD PTR [eax+52], 1
$LN3@UTF16Reset:
; Line 1274
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
__UTF16Reset ENDP
_TEXT	ENDS
EXTRN	_memcpy:PROC
EXTRN	_uprv_checkValidMemory:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __UTF16Open
_TEXT	SEGMENT
_cnv$ = 8						; size = 4
_pArgs$ = 12						; size = 4
_pErrorCode$ = 16					; size = 4
__UTF16Open PROC					; COMDAT
; Line 1281
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1282
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	and	ecx, 15					; 0000000fH
	cmp	ecx, 2
	ja	SHORT $LN3@UTF16Open
; Line 1283
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	and	ecx, 15					; 0000000fH
	cmp	ecx, 2
	jne	SHORT $LN2@UTF16Open
	mov	eax, DWORD PTR _pArgs$[ebp]
	movsx	ecx, BYTE PTR [eax+8]
	test	ecx, ecx
	jne	SHORT $LN2@UTF16Open
; Line 1290
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	DWORD PTR [eax+24], OFFSET __UTF16v2Data
; Line 1291
	push	1
	mov	eax, DWORD PTR __UTF16v2Data+12
	add	eax, 72					; 00000048H
	push	eax
	call	_uprv_checkValidMemory
	add	esp, 8
	push	4
	mov	ecx, DWORD PTR __UTF16v2Data+12
	add	ecx, 72					; 00000048H
	push	ecx
	mov	edx, DWORD PTR _cnv$[ebp]
	mov	eax, DWORD PTR [edx+20]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN2@UTF16Open:
; Line 1293
	push	0
	mov	eax, DWORD PTR _cnv$[ebp]
	push	eax
	call	__UTF16Reset
	add	esp, 8
; Line 1294
	jmp	SHORT $LN4@UTF16Open
$LN3@UTF16Open:
; Line 1295
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 1
$LN4@UTF16Open:
; Line 1297
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__UTF16Open ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BB@FLNGPGBF@UTF?916?0version?$DN2?$AA@	; `string'
PUBLIC	??_C@_0BB@HAPLKFNG@UTF?916?0version?$DN1?$AA@	; `string'
PUBLIC	??_C@_06KNDPGIKI@UTF?916?$AA@			; `string'
;	COMDAT ??_C@_0BB@FLNGPGBF@UTF?916?0version?$DN2?$AA@
CONST	SEGMENT
??_C@_0BB@FLNGPGBF@UTF?916?0version?$DN2?$AA@ DB 'UTF-16,version=2', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@HAPLKFNG@UTF?916?0version?$DN1?$AA@
CONST	SEGMENT
??_C@_0BB@HAPLKFNG@UTF?916?0version?$DN1?$AA@ DB 'UTF-16,version=1', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06KNDPGIKI@UTF?916?$AA@
CONST	SEGMENT
??_C@_06KNDPGIKI@UTF?916?$AA@ DB 'UTF-16', 00H		; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT __UTF16GetName
_TEXT	SEGMENT
_cnv$ = 8						; size = 4
__UTF16GetName PROC					; COMDAT
; Line 1300
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1301
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	and	ecx, 15					; 0000000fH
	jne	SHORT $LN4@UTF16GetNa
; Line 1302
	mov	eax, OFFSET ??_C@_06KNDPGIKI@UTF?916?$AA@
	jmp	SHORT $LN5@UTF16GetNa
	jmp	SHORT $LN5@UTF16GetNa
$LN4@UTF16GetNa:
; Line 1303
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	and	ecx, 15					; 0000000fH
	cmp	ecx, 1
	jne	SHORT $LN2@UTF16GetNa
; Line 1304
	mov	eax, OFFSET ??_C@_0BB@HAPLKFNG@UTF?916?0version?$DN1?$AA@
	jmp	SHORT $LN5@UTF16GetNa
; Line 1305
	jmp	SHORT $LN5@UTF16GetNa
$LN2@UTF16GetNa:
; Line 1306
	mov	eax, OFFSET ??_C@_0BB@FLNGPGBF@UTF?916?0version?$DN2?$AA@
$LN5@UTF16GetNa:
; Line 1308
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
__UTF16GetName ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __UTF16ToUnicodeWithOffsets
_TEXT	SEGMENT
tv171 = -292						; size = 4
tv71 = -292						; size = 4
_offsetsLimit$9164 = -92				; size = 4
_b$ = -77						; size = 1
_offsetDelta$ = -68					; size = 4
_state$ = -56						; size = 4
_offsets$ = -44						; size = 4
_sourceLimit$ = -32					; size = 4
_source$ = -20						; size = 4
_cnv$ = -8						; size = 4
_pArgs$ = 8						; size = 4
_pErrorCode$ = 12					; size = 4
__UTF16ToUnicodeWithOffsets PROC			; COMDAT
; Line 1318
	push	ebp
	mov	ebp, esp
	sub	esp, 292				; 00000124H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-292]
	mov	ecx, 73					; 00000049H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1319
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _cnv$[ebp], ecx
; Line 1320
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _source$[ebp], ecx
; Line 1321
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _sourceLimit$[ebp], ecx
; Line 1322
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR _offsets$[ebp], ecx
; Line 1327
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	DWORD PTR _state$[ebp], ecx
; Line 1334
	mov	DWORD PTR _offsetDelta$[ebp], 0
$LN36@UTF16ToUni:
; Line 1336
	mov	eax, DWORD PTR _source$[ebp]
	cmp	eax, DWORD PTR _sourceLimit$[ebp]
	jae	$LN35@UTF16ToUni
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	cmp	DWORD PTR [eax], 0
	jg	$LN35@UTF16ToUni
; Line 1337
	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR tv71[ebp], eax
	cmp	DWORD PTR tv71[ebp], 9
	ja	$LN33@UTF16ToUni
	mov	ecx, DWORD PTR tv71[ebp]
	movzx	edx, BYTE PTR $LN40@UTF16ToUni[ecx]
	jmp	DWORD PTR $LN41@UTF16ToUni[edx*4]
$LN32@UTF16ToUni:
; Line 1339
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	ecx, DWORD PTR _source$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax+37], dl
	mov	eax, DWORD PTR _source$[ebp]
	add	eax, 1
	mov	DWORD PTR _source$[ebp], eax
; Line 1340
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	BYTE PTR [eax+36], 1
; Line 1341
	mov	DWORD PTR _state$[ebp], 1
; Line 1342
	jmp	$LN33@UTF16ToUni
$LN31@UTF16ToUni:
; Line 1350
	mov	eax, DWORD PTR _source$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _b$[ebp], cl
; Line 1351
	mov	eax, DWORD PTR _cnv$[ebp]
	movzx	ecx, BYTE PTR [eax+37]
	cmp	ecx, 254				; 000000feH
	jne	SHORT $LN30@UTF16ToUni
	movzx	eax, BYTE PTR _b$[ebp]
	cmp	eax, 255				; 000000ffH
	jne	SHORT $LN30@UTF16ToUni
; Line 1352
	mov	eax, DWORD PTR _cnv$[ebp]
	cmp	DWORD PTR [eax+24], OFFSET __UTF16LEData_56
	jne	SHORT $LN29@UTF16ToUni
; Line 1353
	mov	DWORD PTR _state$[ebp], 7
; Line 1354
	jmp	SHORT $LN28@UTF16ToUni
$LN29@UTF16ToUni:
; Line 1355
	mov	DWORD PTR _state$[ebp], 8
$LN28@UTF16ToUni:
; Line 1356
	jmp	SHORT $LN27@UTF16ToUni
$LN30@UTF16ToUni:
; Line 1357
	mov	eax, DWORD PTR _cnv$[ebp]
	movzx	ecx, BYTE PTR [eax+37]
	cmp	ecx, 255				; 000000ffH
	jne	SHORT $LN26@UTF16ToUni
	movzx	eax, BYTE PTR _b$[ebp]
	cmp	eax, 254				; 000000feH
	jne	SHORT $LN26@UTF16ToUni
; Line 1358
	mov	eax, DWORD PTR _cnv$[ebp]
	cmp	DWORD PTR [eax+24], OFFSET __UTF16BEData_56
	jne	SHORT $LN25@UTF16ToUni
; Line 1359
	mov	DWORD PTR _state$[ebp], 6
; Line 1360
	jmp	SHORT $LN24@UTF16ToUni
$LN25@UTF16ToUni:
; Line 1361
	mov	DWORD PTR _state$[ebp], 9
$LN24@UTF16ToUni:
; Line 1362
	jmp	SHORT $LN27@UTF16ToUni
$LN26@UTF16ToUni:
; Line 1363
	mov	eax, DWORD PTR _cnv$[ebp]
	cmp	DWORD PTR [eax+24], OFFSET __UTF16Data_56
	je	SHORT $LN21@UTF16ToUni
	mov	eax, DWORD PTR _cnv$[ebp]
	cmp	DWORD PTR [eax+24], OFFSET __UTF16v2Data
	jne	SHORT $LN27@UTF16ToUni
$LN21@UTF16ToUni:
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	and	ecx, 15					; 0000000fH
	cmp	ecx, 1
	jne	SHORT $LN27@UTF16ToUni
; Line 1364
	mov	DWORD PTR _state$[ebp], 6
$LN27@UTF16ToUni:
; Line 1366
	cmp	DWORD PTR _state$[ebp], 8
	jl	SHORT $LN20@UTF16ToUni
; Line 1368
	mov	eax, DWORD PTR _source$[ebp]
	add	eax, 1
	mov	DWORD PTR _source$[ebp], eax
; Line 1369
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	BYTE PTR [eax+36], 0
; Line 1370
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR _source$[ebp]
	sub	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _offsetDelta$[ebp], ecx
	jmp	SHORT $LN19@UTF16ToUni
$LN20@UTF16ToUni:
; Line 1371
	cmp	DWORD PTR _state$[ebp], 6
	jge	SHORT $LN18@UTF16ToUni
; Line 1373
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR _source$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	je	SHORT $LN17@UTF16ToUni
; Line 1375
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _source$[ebp], ecx
; Line 1376
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	BYTE PTR [eax+36], 0
$LN17@UTF16ToUni:
; Line 1378
	mov	eax, DWORD PTR _cnv$[ebp]
	cmp	DWORD PTR [eax+24], OFFSET __UTF16LEData_56
	jne	SHORT $LN16@UTF16ToUni
; Line 1380
	mov	DWORD PTR _state$[ebp], 9
; Line 1381
	jmp	SHORT $LN15@UTF16ToUni
$LN16@UTF16ToUni:
; Line 1383
	mov	DWORD PTR _state$[ebp], 8
$LN15@UTF16ToUni:
; Line 1385
	jmp	SHORT $LN19@UTF16ToUni
$LN18@UTF16ToUni:
; Line 1393
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	cl, BYTE PTR _b$[ebp]
	mov	BYTE PTR [eax+38], cl
; Line 1394
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	BYTE PTR [eax+36], 2
; Line 1395
	mov	eax, DWORD PTR _source$[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _pArgs$[ebp]
	mov	DWORD PTR [ecx+8], eax
; Line 1402
	mov	eax, DWORD PTR _state$[ebp]
	add	eax, 2
	mov	ecx, DWORD PTR _cnv$[ebp]
	mov	DWORD PTR [ecx+48], eax
; Line 1403
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 18			; 00000012H
; Line 1404
	jmp	$LN37@UTF16ToUni
$LN19@UTF16ToUni:
; Line 1407
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+48], ecx
; Line 1408
	jmp	$LN36@UTF16ToUni
$LN13@UTF16ToUni:
; Line 1411
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR _source$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 1412
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pArgs$[ebp]
	push	ecx
	call	__UTF16BEToUnicodeWithOffsets
	add	esp, 8
; Line 1413
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _source$[ebp], ecx
; Line 1414
	jmp	SHORT $LN33@UTF16ToUni
$LN12@UTF16ToUni:
; Line 1417
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR _source$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 1418
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pArgs$[ebp]
	push	ecx
	call	__UTF16LEToUnicodeWithOffsets
	add	esp, 8
; Line 1419
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _source$[ebp], ecx
$LN33@UTF16ToUni:
; Line 1424
	jmp	$LN36@UTF16ToUni
$LN35@UTF16ToUni:
; Line 1427
	cmp	DWORD PTR _offsets$[ebp], 0
	je	SHORT $LN10@UTF16ToUni
	cmp	DWORD PTR _offsetDelta$[ebp], 0
	je	SHORT $LN10@UTF16ToUni
; Line 1428
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR _offsetsLimit$9164[ebp], ecx
$LN9@UTF16ToUni:
; Line 1429
	mov	eax, DWORD PTR _offsets$[ebp]
	cmp	eax, DWORD PTR _offsetsLimit$9164[ebp]
	jae	SHORT $LN10@UTF16ToUni
; Line 1430
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, DWORD PTR _offsetDelta$[ebp]
	mov	edx, DWORD PTR _offsets$[ebp]
	mov	DWORD PTR [edx], ecx
	mov	eax, DWORD PTR _offsets$[ebp]
	add	eax, 4
	mov	DWORD PTR _offsets$[ebp], eax
; Line 1431
	jmp	SHORT $LN9@UTF16ToUni
$LN10@UTF16ToUni:
; Line 1434
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR _source$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 1436
	mov	eax, DWORD PTR _source$[ebp]
	cmp	eax, DWORD PTR _sourceLimit$[ebp]
	jne	SHORT $LN7@UTF16ToUni
	mov	eax, DWORD PTR _pArgs$[ebp]
	movsx	ecx, BYTE PTR [eax+2]
	test	ecx, ecx
	je	SHORT $LN7@UTF16ToUni
; Line 1438
	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR tv171[ebp], eax
	cmp	DWORD PTR tv171[ebp], 8
	je	SHORT $LN3@UTF16ToUni
	cmp	DWORD PTR tv171[ebp], 9
	je	SHORT $LN2@UTF16ToUni
	jmp	SHORT $LN7@UTF16ToUni
; Line 1440
	jmp	SHORT $LN7@UTF16ToUni
$LN3@UTF16ToUni:
; Line 1442
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pArgs$[ebp]
	push	ecx
	call	__UTF16BEToUnicodeWithOffsets
	add	esp, 8
; Line 1443
	jmp	SHORT $LN7@UTF16ToUni
$LN2@UTF16ToUni:
; Line 1445
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pArgs$[ebp]
	push	ecx
	call	__UTF16LEToUnicodeWithOffsets
	add	esp, 8
$LN7@UTF16ToUni:
; Line 1453
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+48], ecx
$LN37@UTF16ToUni:
; Line 1454
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 292				; 00000124H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN41@UTF16ToUni:
	DD	$LN32@UTF16ToUni
	DD	$LN31@UTF16ToUni
	DD	$LN13@UTF16ToUni
	DD	$LN12@UTF16ToUni
	DD	$LN33@UTF16ToUni
$LN40@UTF16ToUni:
	DB	0
	DB	1
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	2
	DB	3
__UTF16ToUnicodeWithOffsets ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __UTF16GetNextUChar
_TEXT	SEGMENT
tv66 = -196						; size = 4
_pArgs$ = 8						; size = 4
_pErrorCode$ = 12					; size = 4
__UTF16GetNextUChar PROC				; COMDAT
; Line 1458
	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1459
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+48]
	mov	DWORD PTR tv66[ebp], edx
	cmp	DWORD PTR tv66[ebp], 8
	je	SHORT $LN3@UTF16GetNe
	cmp	DWORD PTR tv66[ebp], 9
	je	SHORT $LN2@UTF16GetNe
	jmp	SHORT $LN1@UTF16GetNe
$LN3@UTF16GetNe:
; Line 1461
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pArgs$[ebp]
	push	ecx
	call	__UTF16BEGetNextUChar
	add	esp, 8
	jmp	SHORT $LN6@UTF16GetNe
$LN2@UTF16GetNe:
; Line 1463
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pArgs$[ebp]
	push	ecx
	call	__UTF16LEGetNextUChar
	add	esp, 8
	jmp	SHORT $LN6@UTF16GetNe
$LN1@UTF16GetNe:
; Line 1465
	mov	eax, -9					; fffffff7H
$LN6@UTF16GetNe:
; Line 1467
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__UTF16GetNextUChar ENDP
_TEXT	ENDS
END
