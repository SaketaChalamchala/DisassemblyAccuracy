; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\mozilla\intl\icu\source\common\uenum.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
_PAD	DD	08H
CONST	ENDS
PUBLIC	_uenum_close_56
EXTRN	_uprv_free_56:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File d:\mozilla\intl\icu\source\common\uenum.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT _uenum_close_56
_TEXT	SEGMENT
_en$ = 8						; size = 4
_uenum_close_56 PROC					; COMDAT
; Line 58
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 59
	cmp	DWORD PTR _en$[ebp], 0
	je	SHORT $LN5@uenum_clos
; Line 60
	mov	eax, DWORD PTR _en$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN3@uenum_clos
; Line 61
	mov	eax, DWORD PTR _en$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@uenum_clos
; Line 62
	mov	eax, DWORD PTR _en$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_uprv_free_56
	add	esp, 4
$LN2@uenum_clos:
; Line 64
	mov	esi, esp
	mov	eax, DWORD PTR _en$[ebp]
	push	eax
	mov	ecx, DWORD PTR _en$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 65
	jmp	SHORT $LN5@uenum_clos
$LN3@uenum_clos:
; Line 66
	mov	eax, DWORD PTR _en$[ebp]
	push	eax
	call	_uprv_free_56
	add	esp, 4
$LN5@uenum_clos:
; Line 69
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_uenum_close_56 ENDP
_TEXT	ENDS
PUBLIC	_uenum_count_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _uenum_count_56
_TEXT	SEGMENT
_en$ = 8						; size = 4
_status$ = 12						; size = 4
_uenum_count_56 PROC					; COMDAT
; Line 73
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 74
	cmp	DWORD PTR _en$[ebp], 0
	je	SHORT $LN3@uenum_coun
	mov	eax, DWORD PTR _status$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN4@uenum_coun
$LN3@uenum_coun:
; Line 75
	or	eax, -1
	jmp	SHORT $LN5@uenum_coun
$LN4@uenum_coun:
; Line 77
	mov	eax, DWORD PTR _en$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN2@uenum_coun
; Line 78
	mov	esi, esp
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _en$[ebp]
	push	ecx
	mov	edx, DWORD PTR _en$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	SHORT $LN5@uenum_coun
; Line 79
	jmp	SHORT $LN5@uenum_coun
$LN2@uenum_coun:
; Line 80
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 16			; 00000010H
; Line 81
	or	eax, -1
$LN5@uenum_coun:
; Line 83
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_uenum_count_56 ENDP
_TEXT	ENDS
PUBLIC	_uenum_unextDefault_56
EXTRN	_u_charsToUChars_56:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _uenum_unextDefault_56
_TEXT	SEGMENT
_cstr$5651 = -32					; size = 4
_len$ = -20						; size = 4
_ustr$ = -8						; size = 4
_en$ = 8						; size = 4
_resultLength$ = 12					; size = 4
_status$ = 16						; size = 4
_uenum_unextDefault_56 PROC				; COMDAT
; Line 90
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 91
	mov	DWORD PTR _ustr$[ebp], 0
; Line 92
	mov	DWORD PTR _len$[ebp], 0
; Line 93
	mov	eax, DWORD PTR _en$[ebp]
	cmp	DWORD PTR [eax+20], 0
	je	SHORT $LN6@uenum_unex
; Line 94
	mov	esi, esp
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	lea	ecx, DWORD PTR _len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _en$[ebp]
	push	edx
	mov	eax, DWORD PTR _en$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	call	ecx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _cstr$5651[ebp], eax
; Line 95
	cmp	DWORD PTR _cstr$5651[ebp], 0
	je	SHORT $LN5@uenum_unex
; Line 96
	mov	eax, DWORD PTR _len$[ebp]
	lea	ecx, DWORD PTR [eax+eax+2]
	push	ecx
	mov	edx, DWORD PTR _en$[ebp]
	push	edx
	call	__getBuffer
	add	esp, 8
	mov	DWORD PTR _ustr$[ebp], eax
; Line 97
	cmp	DWORD PTR _ustr$[ebp], 0
	jne	SHORT $LN4@uenum_unex
; Line 98
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 7
; Line 99
	jmp	SHORT $LN5@uenum_unex
$LN4@uenum_unex:
; Line 100
	mov	eax, DWORD PTR _len$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _ustr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cstr$5651[ebp]
	push	edx
	call	_u_charsToUChars_56
	add	esp, 12					; 0000000cH
$LN5@uenum_unex:
; Line 103
	jmp	SHORT $LN2@uenum_unex
$LN6@uenum_unex:
; Line 104
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 16			; 00000010H
$LN2@uenum_unex:
; Line 106
	cmp	DWORD PTR _resultLength$[ebp], 0
	je	SHORT $LN1@uenum_unex
; Line 107
	mov	eax, DWORD PTR _resultLength$[ebp]
	mov	ecx, DWORD PTR _len$[ebp]
	mov	DWORD PTR [eax], ecx
$LN1@uenum_unex:
; Line 109
	mov	eax, DWORD PTR _ustr$[ebp]
; Line 110
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN11@uenum_unex
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN11@uenum_unex:
	DD	1
	DD	$LN10@uenum_unex
$LN10@uenum_unex:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN9@uenum_unex
$LN9@uenum_unex:
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	0
_uenum_unextDefault_56 ENDP
_TEXT	ENDS
EXTRN	_uprv_malloc_56:PROC
EXTRN	_uprv_realloc_56:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __getBuffer
_TEXT	SEGMENT
_en$ = 8						; size = 4
_capacity$ = 12						; size = 4
__getBuffer PROC					; COMDAT
; Line 32
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 34
	mov	eax, DWORD PTR _en$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN5@getBuffer
; Line 35
	mov	eax, DWORD PTR _en$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	cmp	edx, DWORD PTR _capacity$[ebp]
	jge	SHORT $LN4@getBuffer
; Line 36
	mov	eax, DWORD PTR _capacity$[ebp]
	add	eax, DWORD PTR _PAD
	mov	DWORD PTR _capacity$[ebp], eax
; Line 38
	mov	eax, DWORD PTR _capacity$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _en$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_uprv_realloc_56
	add	esp, 8
	mov	ecx, DWORD PTR _en$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 39
	mov	eax, DWORD PTR _en$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN3@getBuffer
; Line 40
	xor	eax, eax
	jmp	SHORT $LN6@getBuffer
$LN3@getBuffer:
; Line 42
	mov	eax, DWORD PTR _en$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _capacity$[ebp]
	mov	DWORD PTR [ecx], edx
$LN4@getBuffer:
; Line 44
	jmp	SHORT $LN2@getBuffer
$LN5@getBuffer:
; Line 45
	mov	eax, DWORD PTR _capacity$[ebp]
	add	eax, DWORD PTR _PAD
	mov	DWORD PTR _capacity$[ebp], eax
; Line 46
	mov	eax, DWORD PTR _capacity$[ebp]
	add	eax, 4
	push	eax
	call	_uprv_malloc_56
	add	esp, 4
	mov	ecx, DWORD PTR _en$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 47
	mov	eax, DWORD PTR _en$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN1@getBuffer
; Line 48
	xor	eax, eax
	jmp	SHORT $LN6@getBuffer
$LN1@getBuffer:
; Line 50
	mov	eax, DWORD PTR _en$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _capacity$[ebp]
	mov	DWORD PTR [ecx], edx
$LN2@getBuffer:
; Line 53
	mov	eax, DWORD PTR _en$[ebp]
	mov	eax, DWORD PTR [eax]
	add	eax, 4
$LN6@getBuffer:
; Line 54
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__getBuffer ENDP
_TEXT	ENDS
PUBLIC	_uenum_nextDefault_56
EXTRN	_u_UCharsToChars_56:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _uenum_nextDefault_56
_TEXT	SEGMENT
_tempUCharVal$5671 = -20				; size = 4
_tempCharVal$5670 = -8					; size = 4
_en$ = 8						; size = 4
_resultLength$ = 12					; size = 4
_status$ = 16						; size = 4
_uenum_nextDefault_56 PROC				; COMDAT
; Line 117
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 118
	mov	eax, DWORD PTR _en$[ebp]
	cmp	DWORD PTR [eax+16], 0
	je	SHORT $LN4@uenum_next
; Line 120
	mov	esi, esp
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _resultLength$[ebp]
	push	ecx
	mov	edx, DWORD PTR _en$[ebp]
	push	edx
	mov	eax, DWORD PTR _en$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	call	ecx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _tempUCharVal$5671[ebp], eax
; Line 121
	cmp	DWORD PTR _tempUCharVal$5671[ebp], 0
	jne	SHORT $LN3@uenum_next
; Line 122
	xor	eax, eax
	jmp	SHORT $LN5@uenum_next
$LN3@uenum_next:
; Line 125
	mov	eax, DWORD PTR _resultLength$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _en$[ebp]
	push	edx
	call	__getBuffer
	add	esp, 8
	mov	DWORD PTR _tempCharVal$5670[ebp], eax
; Line 126
	cmp	DWORD PTR _tempCharVal$5670[ebp], 0
	jne	SHORT $LN2@uenum_next
; Line 127
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 7
; Line 128
	xor	eax, eax
	jmp	SHORT $LN5@uenum_next
$LN2@uenum_next:
; Line 130
	mov	eax, DWORD PTR _resultLength$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _tempCharVal$5670[ebp]
	push	edx
	mov	eax, DWORD PTR _tempUCharVal$5671[ebp]
	push	eax
	call	_u_UCharsToChars_56
	add	esp, 12					; 0000000cH
; Line 131
	mov	eax, DWORD PTR _tempCharVal$5670[ebp]
	jmp	SHORT $LN5@uenum_next
; Line 132
	jmp	SHORT $LN5@uenum_next
$LN4@uenum_next:
; Line 133
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 16			; 00000010H
; Line 134
	xor	eax, eax
$LN5@uenum_next:
; Line 136
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_uenum_nextDefault_56 ENDP
_TEXT	ENDS
PUBLIC	_uenum_unext_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _uenum_unext_56
_TEXT	SEGMENT
_en$ = 8						; size = 4
_resultLength$ = 12					; size = 4
_status$ = 16						; size = 4
_uenum_unext_56 PROC					; COMDAT
; Line 142
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 143
	cmp	DWORD PTR _en$[ebp], 0
	je	SHORT $LN3@uenum_unex@2
	mov	eax, DWORD PTR _status$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN4@uenum_unex@2
$LN3@uenum_unex@2:
; Line 144
	xor	eax, eax
	jmp	SHORT $LN5@uenum_unex@2
$LN4@uenum_unex@2:
; Line 146
	mov	eax, DWORD PTR _en$[ebp]
	cmp	DWORD PTR [eax+16], 0
	je	SHORT $LN2@uenum_unex@2
; Line 147
	mov	esi, esp
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _resultLength$[ebp]
	push	ecx
	mov	edx, DWORD PTR _en$[ebp]
	push	edx
	mov	eax, DWORD PTR _en$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	call	ecx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	SHORT $LN5@uenum_unex@2
; Line 148
	jmp	SHORT $LN5@uenum_unex@2
$LN2@uenum_unex@2:
; Line 149
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 16			; 00000010H
; Line 150
	xor	eax, eax
$LN5@uenum_unex@2:
; Line 152
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_uenum_unext_56 ENDP
_TEXT	ENDS
PUBLIC	_uenum_next_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _uenum_next_56
_TEXT	SEGMENT
_dummyLength$5710 = -8					; size = 4
_en$ = 8						; size = 4
_resultLength$ = 12					; size = 4
_status$ = 16						; size = 4
_uenum_next_56 PROC					; COMDAT
; Line 158
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 159
	cmp	DWORD PTR _en$[ebp], 0
	je	SHORT $LN5@uenum_next@2
	mov	eax, DWORD PTR _status$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN6@uenum_next@2
$LN5@uenum_next@2:
; Line 160
	xor	eax, eax
	jmp	SHORT $LN7@uenum_next@2
$LN6@uenum_next@2:
; Line 162
	mov	eax, DWORD PTR _en$[ebp]
	cmp	DWORD PTR [eax+20], 0
	je	SHORT $LN4@uenum_next@2
; Line 163
	cmp	DWORD PTR _resultLength$[ebp], 0
	je	SHORT $LN3@uenum_next@2
; Line 164
	mov	esi, esp
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _resultLength$[ebp]
	push	ecx
	mov	edx, DWORD PTR _en$[ebp]
	push	edx
	mov	eax, DWORD PTR _en$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	call	ecx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	SHORT $LN7@uenum_next@2
; Line 166
	jmp	SHORT $LN2@uenum_next@2
$LN3@uenum_next@2:
; Line 167
	mov	DWORD PTR _dummyLength$5710[ebp], 0
; Line 168
	mov	esi, esp
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	lea	ecx, DWORD PTR _dummyLength$5710[ebp]
	push	ecx
	mov	edx, DWORD PTR _en$[ebp]
	push	edx
	mov	eax, DWORD PTR _en$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	call	ecx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	SHORT $LN7@uenum_next@2
$LN2@uenum_next@2:
; Line 170
	jmp	SHORT $LN7@uenum_next@2
$LN4@uenum_next@2:
; Line 171
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 16			; 00000010H
; Line 172
	xor	eax, eax
$LN7@uenum_next@2:
; Line 174
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN11@uenum_next@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN11@uenum_next@2:
	DD	1
	DD	$LN10@uenum_next@2
$LN10@uenum_next@2:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN9@uenum_next@2
$LN9@uenum_next@2:
	DB	100					; 00000064H
	DB	117					; 00000075H
	DB	109					; 0000006dH
	DB	109					; 0000006dH
	DB	121					; 00000079H
	DB	76					; 0000004cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	0
_uenum_next_56 ENDP
_TEXT	ENDS
PUBLIC	_uenum_reset_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _uenum_reset_56
_TEXT	SEGMENT
_en$ = 8						; size = 4
_status$ = 12						; size = 4
_uenum_reset_56 PROC					; COMDAT
; Line 178
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 179
	cmp	DWORD PTR _en$[ebp], 0
	je	SHORT $LN3@uenum_rese
	mov	eax, DWORD PTR _status$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN4@uenum_rese
$LN3@uenum_rese:
; Line 180
	jmp	SHORT $LN5@uenum_rese
$LN4@uenum_rese:
; Line 182
	mov	eax, DWORD PTR _en$[ebp]
	cmp	DWORD PTR [eax+24], 0
	je	SHORT $LN2@uenum_rese
; Line 183
	mov	esi, esp
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _en$[ebp]
	push	ecx
	mov	edx, DWORD PTR _en$[ebp]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 184
	jmp	SHORT $LN5@uenum_rese
$LN2@uenum_rese:
; Line 185
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 16			; 00000010H
$LN5@uenum_rese:
; Line 187
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_uenum_reset_56 ENDP
_TEXT	ENDS
END
