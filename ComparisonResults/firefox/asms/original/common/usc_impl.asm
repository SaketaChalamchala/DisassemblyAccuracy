; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\mozilla\intl\icu\source\common\usc_impl.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
_pairedChars DD	028H
	DD	029H
	DD	03cH
	DD	03eH
	DD	05bH
	DD	05dH
	DD	07bH
	DD	07dH
	DD	0abH
	DD	0bbH
	DD	02018H
	DD	02019H
	DD	0201cH
	DD	0201dH
	DD	02039H
	DD	0203aH
	DD	03008H
	DD	03009H
	DD	0300aH
	DD	0300bH
	DD	0300cH
	DD	0300dH
	DD	0300eH
	DD	0300fH
	DD	03010H
	DD	03011H
	DD	03014H
	DD	03015H
	DD	03016H
	DD	03017H
	DD	03018H
	DD	03019H
	DD	0301aH
	DD	0301bH
CONST	ENDS
PUBLIC	_uscript_setRunText_56
PUBLIC	_uscript_openRun_56
EXTRN	_uprv_free_56:PROC
EXTRN	_uprv_malloc_56:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File d:\mozilla\intl\icu\source\common\usc_impl.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT _uscript_openRun_56
_TEXT	SEGMENT
_result$ = -8						; size = 4
_src$ = 8						; size = 4
_length$ = 12						; size = 4
_pErrorCode$ = 16					; size = 4
_uscript_openRun_56 PROC				; COMDAT
; Line 193
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 194
	mov	DWORD PTR _result$[ebp], 0
; Line 196
	cmp	DWORD PTR _pErrorCode$[ebp], 0
	je	SHORT $LN3@uscript_op
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN4@uscript_op
$LN3@uscript_op:
; Line 197
	xor	eax, eax
	jmp	SHORT $LN5@uscript_op
$LN4@uscript_op:
; Line 200
	push	288					; 00000120H
	call	_uprv_malloc_56
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
; Line 202
	cmp	DWORD PTR _result$[ebp], 0
	jne	SHORT $LN2@uscript_op
; Line 203
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 7
; Line 204
	xor	eax, eax
	jmp	SHORT $LN5@uscript_op
$LN2@uscript_op:
; Line 207
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _length$[ebp]
	push	ecx
	mov	edx, DWORD PTR _src$[ebp]
	push	edx
	mov	eax, DWORD PTR _result$[ebp]
	push	eax
	call	_uscript_setRunText_56
	add	esp, 16					; 00000010H
; Line 210
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN1@uscript_op
; Line 211
	mov	eax, DWORD PTR _result$[ebp]
	push	eax
	call	_uprv_free_56
	add	esp, 4
; Line 212
	mov	DWORD PTR _result$[ebp], 0
$LN1@uscript_op:
; Line 215
	mov	eax, DWORD PTR _result$[ebp]
$LN5@uscript_op:
; Line 216
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_uscript_openRun_56 ENDP
_TEXT	ENDS
PUBLIC	_uscript_closeRun_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _uscript_closeRun_56
_TEXT	SEGMENT
_scriptRun$ = 8						; size = 4
_uscript_closeRun_56 PROC				; COMDAT
; Line 220
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 221
	cmp	DWORD PTR _scriptRun$[ebp], 0
	je	SHORT $LN2@uscript_cl
; Line 222
	mov	eax, DWORD PTR _scriptRun$[ebp]
	push	eax
	call	_uprv_free_56
	add	esp, 4
$LN2@uscript_cl:
; Line 224
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_uscript_closeRun_56 ENDP
_TEXT	ENDS
PUBLIC	_uscript_resetRun_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _uscript_resetRun_56
_TEXT	SEGMENT
_scriptRun$ = 8						; size = 4
_uscript_resetRun_56 PROC				; COMDAT
; Line 228
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 229
	cmp	DWORD PTR _scriptRun$[ebp], 0
	je	SHORT $LN2@uscript_re
; Line 230
	mov	eax, DWORD PTR _scriptRun$[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 231
	mov	eax, DWORD PTR _scriptRun$[ebp]
	mov	DWORD PTR [eax+12], 0
; Line 232
	mov	eax, DWORD PTR _scriptRun$[ebp]
	mov	DWORD PTR [eax+16], -1
; Line 233
	mov	eax, DWORD PTR _scriptRun$[ebp]
	mov	DWORD PTR [eax+276], -1
; Line 234
	mov	eax, DWORD PTR _scriptRun$[ebp]
	mov	DWORD PTR [eax+280], 0
; Line 235
	mov	eax, DWORD PTR _scriptRun$[ebp]
	mov	DWORD PTR [eax+284], 0
$LN2@uscript_re:
; Line 237
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_uscript_resetRun_56 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _uscript_setRunText_56
_TEXT	SEGMENT
_scriptRun$ = 8						; size = 4
_src$ = 12						; size = 4
_length$ = 16						; size = 4
_pErrorCode$ = 20					; size = 4
_uscript_setRunText_56 PROC				; COMDAT
; Line 241
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 242
	cmp	DWORD PTR _pErrorCode$[ebp], 0
	je	SHORT $LN3@uscript_se
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN4@uscript_se
$LN3@uscript_se:
; Line 243
	jmp	SHORT $LN5@uscript_se
$LN4@uscript_se:
; Line 246
	cmp	DWORD PTR _scriptRun$[ebp], 0
	je	SHORT $LN1@uscript_se
	cmp	DWORD PTR _length$[ebp], 0
	jl	SHORT $LN1@uscript_se
	xor	eax, eax
	cmp	DWORD PTR _src$[ebp], 0
	sete	al
	xor	ecx, ecx
	cmp	DWORD PTR _length$[ebp], 0
	sete	cl
	cmp	eax, ecx
	je	SHORT $LN2@uscript_se
$LN1@uscript_se:
; Line 247
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 1
; Line 248
	jmp	SHORT $LN5@uscript_se
$LN2@uscript_se:
; Line 251
	mov	eax, DWORD PTR _scriptRun$[ebp]
	mov	ecx, DWORD PTR _src$[ebp]
	mov	DWORD PTR [eax+4], ecx
; Line 252
	mov	eax, DWORD PTR _scriptRun$[ebp]
	mov	ecx, DWORD PTR _length$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 254
	mov	eax, DWORD PTR _scriptRun$[ebp]
	push	eax
	call	_uscript_resetRun_56
	add	esp, 4
$LN5@uscript_se:
; Line 255
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_uscript_setRunText_56 ENDP
_TEXT	ENDS
PUBLIC	_uscript_nextRun_56
EXTRN	_uscript_getScript_56:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _uscript_nextRun_56
_TEXT	SEGMENT
_pi$5895 = -80						; size = 4
_low$5890 = -68						; size = 2
_pairIndex$5888 = -56					; size = 4
_sc$5887 = -44						; size = 4
_ch$5886 = -32						; size = 4
_high$5885 = -20					; size = 2
_error$ = -8						; size = 4
_scriptRun$ = 8						; size = 4
_pRunStart$ = 12					; size = 4
_pRunLimit$ = 16					; size = 4
_pRunScript$ = 20					; size = 4
_uscript_nextRun_56 PROC				; COMDAT
; Line 259
	push	ebp
	mov	ebp, esp
	sub	esp, 276				; 00000114H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-276]
	mov	ecx, 69					; 00000045H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 260
	mov	DWORD PTR _error$[ebp], 0
; Line 263
	cmp	DWORD PTR _scriptRun$[ebp], 0
	je	SHORT $LN20@uscript_ne
	mov	eax, DWORD PTR _scriptRun$[ebp]
	mov	ecx, DWORD PTR _scriptRun$[ebp]
	mov	edx, DWORD PTR [eax+12]
	cmp	edx, DWORD PTR [ecx]
	jl	SHORT $LN21@uscript_ne
$LN20@uscript_ne:
; Line 264
	xor	al, al
	jmp	$LN22@uscript_ne
$LN21@uscript_ne:
; Line 267
	mov	eax, DWORD PTR _scriptRun$[ebp]
	mov	DWORD PTR [eax+284], 0
; Line 268
	mov	eax, DWORD PTR _scriptRun$[ebp]
	mov	DWORD PTR [eax+16], 0
; Line 270
	mov	eax, DWORD PTR _scriptRun$[ebp]
	mov	ecx, DWORD PTR _scriptRun$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+8], edx
	jmp	SHORT $LN19@uscript_ne
$LN18@uscript_ne:
	mov	eax, DWORD PTR _scriptRun$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	add	ecx, 1
	mov	edx, DWORD PTR _scriptRun$[ebp]
	mov	DWORD PTR [edx+12], ecx
$LN19@uscript_ne:
	mov	eax, DWORD PTR _scriptRun$[ebp]
	mov	ecx, DWORD PTR _scriptRun$[ebp]
	mov	edx, DWORD PTR [eax+12]
	cmp	edx, DWORD PTR [ecx]
	jge	$LN17@uscript_ne
; Line 271
	mov	eax, DWORD PTR _scriptRun$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _scriptRun$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	cx, WORD PTR [eax+ecx*2]
	mov	WORD PTR _high$5885[ebp], cx
; Line 272
	movzx	eax, WORD PTR _high$5885[ebp]
	mov	DWORD PTR _ch$5886[ebp], eax
; Line 280
	movzx	eax, WORD PTR _high$5885[ebp]
	cmp	eax, 55296				; 0000d800H
	jl	SHORT $LN16@uscript_ne
	movzx	eax, WORD PTR _high$5885[ebp]
	cmp	eax, 56319				; 0000dbffH
	jg	SHORT $LN16@uscript_ne
	mov	eax, DWORD PTR _scriptRun$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 1
	mov	edx, DWORD PTR _scriptRun$[ebp]
	cmp	DWORD PTR [edx+12], ecx
	jge	SHORT $LN16@uscript_ne
; Line 281
	mov	eax, DWORD PTR _scriptRun$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _scriptRun$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	cx, WORD PTR [eax+ecx*2+2]
	mov	WORD PTR _low$5890[ebp], cx
; Line 287
	movzx	eax, WORD PTR _low$5890[ebp]
	cmp	eax, 56320				; 0000dc00H
	jl	SHORT $LN16@uscript_ne
	movzx	eax, WORD PTR _low$5890[ebp]
	cmp	eax, 57343				; 0000dfffH
	jg	SHORT $LN16@uscript_ne
; Line 288
	movzx	eax, WORD PTR _high$5885[ebp]
	sub	eax, 55296				; 0000d800H
	shl	eax, 10					; 0000000aH
	movzx	ecx, WORD PTR _low$5890[ebp]
	lea	edx, DWORD PTR [eax+ecx+9216]
	mov	DWORD PTR _ch$5886[ebp], edx
; Line 289
	mov	eax, DWORD PTR _scriptRun$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	add	ecx, 1
	mov	edx, DWORD PTR _scriptRun$[ebp]
	mov	DWORD PTR [edx+12], ecx
$LN16@uscript_ne:
; Line 293
	lea	eax, DWORD PTR _error$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ch$5886[ebp]
	push	ecx
	call	_uscript_getScript_56
	add	esp, 8
	mov	DWORD PTR _sc$5887[ebp], eax
; Line 294
	mov	eax, DWORD PTR _ch$5886[ebp]
	push	eax
	call	_getPairIndex
	add	esp, 4
	mov	DWORD PTR _pairIndex$5888[ebp], eax
; Line 304
	cmp	DWORD PTR _pairIndex$5888[ebp], 0
	jl	SHORT $LN14@uscript_ne
; Line 305
	mov	eax, DWORD PTR _pairIndex$5888[ebp]
	and	eax, 1
	jne	SHORT $LN13@uscript_ne
; Line 306
	mov	eax, DWORD PTR _scriptRun$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR _pairIndex$5888[ebp]
	push	edx
	mov	eax, DWORD PTR _scriptRun$[ebp]
	push	eax
	call	_push
	add	esp, 12					; 0000000cH
; Line 307
	jmp	SHORT $LN14@uscript_ne
$LN13@uscript_ne:
; Line 308
	mov	eax, DWORD PTR _pairIndex$5888[ebp]
	and	eax, -2					; fffffffeH
	mov	DWORD PTR _pi$5895[ebp], eax
$LN11@uscript_ne:
; Line 310
	mov	eax, DWORD PTR _scriptRun$[ebp]
	cmp	DWORD PTR [eax+280], 0
	jle	SHORT $LN10@uscript_ne
	mov	eax, DWORD PTR _scriptRun$[ebp]
	mov	ecx, DWORD PTR [eax+276]
	mov	edx, DWORD PTR _scriptRun$[ebp]
	mov	eax, DWORD PTR [edx+ecx*8+20]
	cmp	eax, DWORD PTR _pi$5895[ebp]
	je	SHORT $LN10@uscript_ne
; Line 311
	mov	eax, DWORD PTR _scriptRun$[ebp]
	push	eax
	call	_pop
	add	esp, 4
; Line 312
	jmp	SHORT $LN11@uscript_ne
$LN10@uscript_ne:
; Line 314
	mov	eax, DWORD PTR _scriptRun$[ebp]
	cmp	DWORD PTR [eax+280], 0
	jle	SHORT $LN14@uscript_ne
; Line 315
	mov	eax, DWORD PTR _scriptRun$[ebp]
	mov	ecx, DWORD PTR [eax+276]
	mov	edx, DWORD PTR _scriptRun$[ebp]
	mov	eax, DWORD PTR [edx+ecx*8+24]
	mov	DWORD PTR _sc$5887[ebp], eax
$LN14@uscript_ne:
; Line 320
	mov	eax, DWORD PTR _sc$5887[ebp]
	push	eax
	mov	ecx, DWORD PTR _scriptRun$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	call	_sameScript
	add	esp, 8
	movsx	eax, al
	test	eax, eax
	je	SHORT $LN8@uscript_ne
; Line 321
	mov	eax, DWORD PTR _scriptRun$[ebp]
	cmp	DWORD PTR [eax+16], 1
	jg	SHORT $LN7@uscript_ne
	cmp	DWORD PTR _sc$5887[ebp], 1
	jle	SHORT $LN7@uscript_ne
; Line 322
	mov	eax, DWORD PTR _scriptRun$[ebp]
	mov	ecx, DWORD PTR _sc$5887[ebp]
	mov	DWORD PTR [eax+16], ecx
; Line 324
	mov	eax, DWORD PTR _scriptRun$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR _scriptRun$[ebp]
	push	edx
	call	_fixup
	add	esp, 8
$LN7@uscript_ne:
; Line 331
	cmp	DWORD PTR _pairIndex$5888[ebp], 0
	jl	SHORT $LN6@uscript_ne
	mov	eax, DWORD PTR _pairIndex$5888[ebp]
	and	eax, 1
	je	SHORT $LN6@uscript_ne
; Line 332
	mov	eax, DWORD PTR _scriptRun$[ebp]
	push	eax
	call	_pop
	add	esp, 4
$LN6@uscript_ne:
; Line 334
	jmp	SHORT $LN5@uscript_ne
$LN8@uscript_ne:
; Line 339
	cmp	DWORD PTR _ch$5886[ebp], 65536		; 00010000H
	jl	SHORT $LN4@uscript_ne
; Line 340
	mov	eax, DWORD PTR _scriptRun$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	sub	ecx, 1
	mov	edx, DWORD PTR _scriptRun$[ebp]
	mov	DWORD PTR [edx+12], ecx
$LN4@uscript_ne:
; Line 343
	jmp	SHORT $LN17@uscript_ne
$LN5@uscript_ne:
; Line 345
	jmp	$LN18@uscript_ne
$LN17@uscript_ne:
; Line 348
	cmp	DWORD PTR _pRunStart$[ebp], 0
	je	SHORT $LN3@uscript_ne
; Line 349
	mov	eax, DWORD PTR _pRunStart$[ebp]
	mov	ecx, DWORD PTR _scriptRun$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax], edx
$LN3@uscript_ne:
; Line 352
	cmp	DWORD PTR _pRunLimit$[ebp], 0
	je	SHORT $LN2@uscript_ne
; Line 353
	mov	eax, DWORD PTR _pRunLimit$[ebp]
	mov	ecx, DWORD PTR _scriptRun$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax], edx
$LN2@uscript_ne:
; Line 356
	cmp	DWORD PTR _pRunScript$[ebp], 0
	je	SHORT $LN1@uscript_ne
; Line 357
	mov	eax, DWORD PTR _pRunScript$[ebp]
	mov	ecx, DWORD PTR _scriptRun$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax], edx
$LN1@uscript_ne:
; Line 360
	mov	al, 1
$LN22@uscript_ne:
; Line 361
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN26@uscript_ne
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 276				; 00000114H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN26@uscript_ne:
	DD	1
	DD	$LN25@uscript_ne
$LN25@uscript_ne:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN24@uscript_ne
$LN24@uscript_ne:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_uscript_nextRun_56 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _push
_TEXT	SEGMENT
tv75 = -196						; size = 4
tv69 = -196						; size = 4
_scriptRun$ = 8						; size = 4
_pairIndex$ = 12					; size = 4
_scriptCode$ = 16					; size = 4
_push	PROC						; COMDAT
; Line 79
	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 80
	mov	eax, DWORD PTR _scriptRun$[ebp]
	cmp	DWORD PTR [eax+280], 32			; 00000020H
	jge	SHORT $LN3@push
	mov	ecx, DWORD PTR _scriptRun$[ebp]
	mov	edx, DWORD PTR [ecx+280]
	add	edx, 1
	mov	DWORD PTR tv69[ebp], edx
	jmp	SHORT $LN4@push
$LN3@push:
	mov	DWORD PTR tv69[ebp], 32			; 00000020H
$LN4@push:
	mov	eax, DWORD PTR _scriptRun$[ebp]
	mov	ecx, DWORD PTR tv69[ebp]
	mov	DWORD PTR [eax+280], ecx
; Line 81
	mov	eax, DWORD PTR _scriptRun$[ebp]
	cmp	DWORD PTR [eax+284], 32			; 00000020H
	jge	SHORT $LN5@push
	mov	ecx, DWORD PTR _scriptRun$[ebp]
	mov	edx, DWORD PTR [ecx+284]
	add	edx, 1
	mov	DWORD PTR tv75[ebp], edx
	jmp	SHORT $LN6@push
$LN5@push:
	mov	DWORD PTR tv75[ebp], 32			; 00000020H
$LN6@push:
	mov	eax, DWORD PTR _scriptRun$[ebp]
	mov	ecx, DWORD PTR tv75[ebp]
	mov	DWORD PTR [eax+284], ecx
; Line 83
	mov	eax, DWORD PTR _scriptRun$[ebp]
	mov	ecx, DWORD PTR [eax+276]
	add	ecx, 1
	and	ecx, -2147483617			; 8000001fH
	jns	SHORT $LN7@push
	dec	ecx
	or	ecx, -32				; ffffffe0H
	inc	ecx
$LN7@push:
	mov	edx, DWORD PTR _scriptRun$[ebp]
	mov	DWORD PTR [edx+276], ecx
; Line 84
	mov	eax, DWORD PTR _scriptRun$[ebp]
	mov	ecx, DWORD PTR [eax+276]
	mov	edx, DWORD PTR _scriptRun$[ebp]
	mov	eax, DWORD PTR _pairIndex$[ebp]
	mov	DWORD PTR [edx+ecx*8+20], eax
; Line 85
	mov	eax, DWORD PTR _scriptRun$[ebp]
	mov	ecx, DWORD PTR [eax+276]
	mov	edx, DWORD PTR _scriptRun$[ebp]
	mov	eax, DWORD PTR _scriptCode$[ebp]
	mov	DWORD PTR [edx+ecx*8+24], eax
; Line 86
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_push	ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _pop
_TEXT	SEGMENT
_scriptRun$ = 8						; size = 4
_pop	PROC						; COMDAT
; Line 89
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 90
	mov	eax, DWORD PTR _scriptRun$[ebp]
	cmp	DWORD PTR [eax+280], 0
	jg	SHORT $LN3@pop
; Line 91
	jmp	SHORT $LN4@pop
$LN3@pop:
; Line 94
	mov	eax, DWORD PTR _scriptRun$[ebp]
	cmp	DWORD PTR [eax+284], 0
	jle	SHORT $LN2@pop
; Line 95
	mov	eax, DWORD PTR _scriptRun$[ebp]
	mov	ecx, DWORD PTR [eax+284]
	sub	ecx, 1
	mov	edx, DWORD PTR _scriptRun$[ebp]
	mov	DWORD PTR [edx+284], ecx
$LN2@pop:
; Line 98
	mov	eax, DWORD PTR _scriptRun$[ebp]
	mov	ecx, DWORD PTR [eax+280]
	sub	ecx, 1
	mov	edx, DWORD PTR _scriptRun$[ebp]
	mov	DWORD PTR [edx+280], ecx
; Line 99
	mov	eax, DWORD PTR _scriptRun$[ebp]
	mov	ecx, DWORD PTR [eax+276]
	add	ecx, 31					; 0000001fH
	and	ecx, -2147483617			; 8000001fH
	jns	SHORT $LN6@pop
	dec	ecx
	or	ecx, -32				; ffffffe0H
	inc	ecx
$LN6@pop:
	mov	edx, DWORD PTR _scriptRun$[ebp]
	mov	DWORD PTR [edx+276], ecx
; Line 104
	mov	eax, DWORD PTR _scriptRun$[ebp]
	cmp	DWORD PTR [eax+280], 0
	jg	SHORT $LN4@pop
; Line 105
	mov	eax, DWORD PTR _scriptRun$[ebp]
	mov	DWORD PTR [eax+276], -1
$LN4@pop:
; Line 107
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_pop	ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _fixup
_TEXT	SEGMENT
tv74 = -208						; size = 4
_fixupSP$ = -8						; size = 4
_scriptRun$ = 8						; size = 4
_scriptCode$ = 12					; size = 4
_fixup	PROC						; COMDAT
; Line 110
	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 111
	mov	eax, DWORD PTR _scriptRun$[ebp]
	mov	ecx, DWORD PTR [eax+276]
	add	ecx, 32					; 00000020H
	mov	edx, DWORD PTR _scriptRun$[ebp]
	sub	ecx, DWORD PTR [edx+284]
	and	ecx, -2147483617			; 8000001fH
	jns	SHORT $LN7@fixup
	dec	ecx
	or	ecx, -32				; ffffffe0H
	inc	ecx
$LN7@fixup:
	mov	DWORD PTR _fixupSP$[ebp], ecx
$LN2@fixup:
; Line 113
	mov	eax, DWORD PTR _scriptRun$[ebp]
	mov	ecx, DWORD PTR [eax+284]
	mov	edx, DWORD PTR _scriptRun$[ebp]
	mov	eax, DWORD PTR [edx+284]
	sub	eax, 1
	mov	edx, DWORD PTR _scriptRun$[ebp]
	mov	DWORD PTR [edx+284], eax
	test	ecx, ecx
	jle	SHORT $LN5@fixup
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN6@fixup
$LN5@fixup:
	mov	DWORD PTR tv74[ebp], 0
$LN6@fixup:
	cmp	DWORD PTR tv74[ebp], 0
	je	SHORT $LN3@fixup
; Line 114
	mov	eax, DWORD PTR _fixupSP$[ebp]
	add	eax, 1
	and	eax, -2147483617			; 8000001fH
	jns	SHORT $LN8@fixup
	dec	eax
	or	eax, -32				; ffffffe0H
	inc	eax
$LN8@fixup:
	mov	DWORD PTR _fixupSP$[ebp], eax
; Line 115
	mov	eax, DWORD PTR _fixupSP$[ebp]
	mov	ecx, DWORD PTR _scriptRun$[ebp]
	mov	edx, DWORD PTR _scriptCode$[ebp]
	mov	DWORD PTR [ecx+eax*8+24], edx
; Line 116
	jmp	SHORT $LN2@fixup
$LN3@fixup:
; Line 117
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_fixup	ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _getPairIndex
_TEXT	SEGMENT
_pairIndex$ = -56					; size = 4
_probe$ = -44						; size = 4
_pairedCharExtra$ = -32					; size = 4
_pairedCharPower$ = -20					; size = 4
_pairedCharCount$ = -8					; size = 4
_ch$ = 8						; size = 4
_getPairIndex PROC					; COMDAT
; Line 158
	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 159
	mov	DWORD PTR _pairedCharCount$[ebp], 34	; 00000022H
; Line 160
	mov	eax, DWORD PTR _pairedCharCount$[ebp]
	push	eax
	call	_highBit
	add	esp, 4
	movsx	ecx, al
	mov	edx, 1
	shl	edx, cl
	mov	DWORD PTR _pairedCharPower$[ebp], edx
; Line 161
	mov	eax, DWORD PTR _pairedCharCount$[ebp]
	sub	eax, DWORD PTR _pairedCharPower$[ebp]
	mov	DWORD PTR _pairedCharExtra$[ebp], eax
; Line 163
	mov	eax, DWORD PTR _pairedCharPower$[ebp]
	mov	DWORD PTR _probe$[ebp], eax
; Line 164
	mov	DWORD PTR _pairIndex$[ebp], 0
; Line 166
	mov	eax, DWORD PTR _pairedCharExtra$[ebp]
	mov	ecx, DWORD PTR _ch$[ebp]
	cmp	ecx, DWORD PTR _pairedChars[eax*4]
	jl	SHORT $LN4@getPairInd
; Line 167
	mov	eax, DWORD PTR _pairedCharExtra$[ebp]
	mov	DWORD PTR _pairIndex$[ebp], eax
$LN4@getPairInd:
; Line 170
	cmp	DWORD PTR _probe$[ebp], 1
	jle	SHORT $LN3@getPairInd
; Line 171
	mov	eax, DWORD PTR _probe$[ebp]
	sar	eax, 1
	mov	DWORD PTR _probe$[ebp], eax
; Line 173
	mov	eax, DWORD PTR _pairIndex$[ebp]
	add	eax, DWORD PTR _probe$[ebp]
	mov	ecx, DWORD PTR _ch$[ebp]
	cmp	ecx, DWORD PTR _pairedChars[eax*4]
	jl	SHORT $LN2@getPairInd
; Line 174
	mov	eax, DWORD PTR _pairIndex$[ebp]
	add	eax, DWORD PTR _probe$[ebp]
	mov	DWORD PTR _pairIndex$[ebp], eax
$LN2@getPairInd:
; Line 176
	jmp	SHORT $LN4@getPairInd
$LN3@getPairInd:
; Line 178
	mov	eax, DWORD PTR _pairIndex$[ebp]
	mov	ecx, DWORD PTR _pairedChars[eax*4]
	cmp	ecx, DWORD PTR _ch$[ebp]
	je	SHORT $LN1@getPairInd
; Line 179
	mov	DWORD PTR _pairIndex$[ebp], -1
$LN1@getPairInd:
; Line 182
	mov	eax, DWORD PTR _pairIndex$[ebp]
; Line 183
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_getPairIndex ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _highBit
_TEXT	SEGMENT
_bit$ = -5						; size = 1
_value$ = 8						; size = 4
_highBit PROC						; COMDAT
; Line 121
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 122
	mov	BYTE PTR _bit$[ebp], 0
; Line 124
	cmp	DWORD PTR _value$[ebp], 0
	jg	SHORT $LN6@highBit
; Line 125
	mov	al, -32					; ffffffe0H
	jmp	SHORT $LN7@highBit
$LN6@highBit:
; Line 128
	cmp	DWORD PTR _value$[ebp], 65536		; 00010000H
	jl	SHORT $LN5@highBit
; Line 129
	mov	eax, DWORD PTR _value$[ebp]
	sar	eax, 16					; 00000010H
	mov	DWORD PTR _value$[ebp], eax
; Line 130
	movsx	eax, BYTE PTR _bit$[ebp]
	add	eax, 16					; 00000010H
	mov	BYTE PTR _bit$[ebp], al
$LN5@highBit:
; Line 133
	cmp	DWORD PTR _value$[ebp], 256		; 00000100H
	jl	SHORT $LN4@highBit
; Line 134
	mov	eax, DWORD PTR _value$[ebp]
	sar	eax, 8
	mov	DWORD PTR _value$[ebp], eax
; Line 135
	movsx	eax, BYTE PTR _bit$[ebp]
	add	eax, 8
	mov	BYTE PTR _bit$[ebp], al
$LN4@highBit:
; Line 138
	cmp	DWORD PTR _value$[ebp], 16		; 00000010H
	jl	SHORT $LN3@highBit
; Line 139
	mov	eax, DWORD PTR _value$[ebp]
	sar	eax, 4
	mov	DWORD PTR _value$[ebp], eax
; Line 140
	movsx	eax, BYTE PTR _bit$[ebp]
	add	eax, 4
	mov	BYTE PTR _bit$[ebp], al
$LN3@highBit:
; Line 143
	cmp	DWORD PTR _value$[ebp], 4
	jl	SHORT $LN2@highBit
; Line 144
	mov	eax, DWORD PTR _value$[ebp]
	sar	eax, 2
	mov	DWORD PTR _value$[ebp], eax
; Line 145
	movsx	eax, BYTE PTR _bit$[ebp]
	add	eax, 2
	mov	BYTE PTR _bit$[ebp], al
$LN2@highBit:
; Line 148
	cmp	DWORD PTR _value$[ebp], 2
	jl	SHORT $LN1@highBit
; Line 150
	movsx	eax, BYTE PTR _bit$[ebp]
	add	eax, 1
	mov	BYTE PTR _bit$[ebp], al
$LN1@highBit:
; Line 153
	mov	al, BYTE PTR _bit$[ebp]
$LN7@highBit:
; Line 154
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_highBit ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _sameScript
_TEXT	SEGMENT
tv67 = -196						; size = 4
_scriptOne$ = 8						; size = 4
_scriptTwo$ = 12					; size = 4
_sameScript PROC					; COMDAT
; Line 187
	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 188
	cmp	DWORD PTR _scriptOne$[ebp], 1
	jle	SHORT $LN3@sameScript
	cmp	DWORD PTR _scriptTwo$[ebp], 1
	jle	SHORT $LN3@sameScript
	mov	eax, DWORD PTR _scriptOne$[ebp]
	cmp	eax, DWORD PTR _scriptTwo$[ebp]
	je	SHORT $LN3@sameScript
	mov	DWORD PTR tv67[ebp], 0
	jmp	SHORT $LN4@sameScript
$LN3@sameScript:
	mov	DWORD PTR tv67[ebp], 1
$LN4@sameScript:
	mov	al, BYTE PTR tv67[ebp]
; Line 189
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_sameScript ENDP
_TEXT	ENDS
END
