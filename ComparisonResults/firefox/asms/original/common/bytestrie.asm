; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\mozilla\intl\icu\source\common\bytestrie.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?value@?$integral_constant@_N$0A@@tr1@std@@2_NB	; std::tr1::integral_constant<bool,0>::value
PUBLIC	?value@?$integral_constant@_N$00@tr1@std@@2_NB	; std::tr1::integral_constant<bool,1>::value
PUBLIC	?value@?$integral_constant@I$0A@@tr1@std@@2IB	; std::tr1::integral_constant<unsigned int,0>::value
PUBLIC	?_Rank@?$_Arithmetic_traits@_N@std@@2HB		; std::_Arithmetic_traits<bool>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@D@std@@2HB		; std::_Arithmetic_traits<char>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@C@std@@2HB		; std::_Arithmetic_traits<signed char>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@E@std@@2HB		; std::_Arithmetic_traits<unsigned char>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@F@std@@2HB		; std::_Arithmetic_traits<short>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@G@std@@2HB		; std::_Arithmetic_traits<unsigned short>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@H@std@@2HB		; std::_Arithmetic_traits<int>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@I@std@@2HB		; std::_Arithmetic_traits<unsigned int>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@J@std@@2HB		; std::_Arithmetic_traits<long>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@K@std@@2HB		; std::_Arithmetic_traits<unsigned long>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@_J@std@@2HB		; std::_Arithmetic_traits<__int64>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@_K@std@@2HB		; std::_Arithmetic_traits<unsigned __int64>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@M@std@@2HB		; std::_Arithmetic_traits<float>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@N@std@@2HB		; std::_Arithmetic_traits<double>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@O@std@@2HB		; std::_Arithmetic_traits<long double>::_Rank
PUBLIC	?collate@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::collate
PUBLIC	?ctype@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::ctype
PUBLIC	?monetary@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::monetary
PUBLIC	?numeric@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::numeric
PUBLIC	?time@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::time
PUBLIC	?messages@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::messages
PUBLIC	?all@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::all
PUBLIC	?none@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::none
PUBLIC	?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::skipws
PUBLIC	?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::unitbuf
PUBLIC	?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::uppercase
PUBLIC	?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showbase
PUBLIC	?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpoint
PUBLIC	?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpos
PUBLIC	?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::left
PUBLIC	?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::right
PUBLIC	?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::internal
PUBLIC	?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::dec
PUBLIC	?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::oct
PUBLIC	?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::hex
PUBLIC	?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::scientific
PUBLIC	?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::fixed
PUBLIC	?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::hexfloat
PUBLIC	?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::boolalpha
PUBLIC	?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::_Stdio
PUBLIC	?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::adjustfield
PUBLIC	?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::basefield
PUBLIC	?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::floatfield
PUBLIC	?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::goodbit
PUBLIC	?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::eofbit
PUBLIC	?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::failbit
PUBLIC	?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::badbit
PUBLIC	?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::_Hardfail
PUBLIC	?in@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::in
PUBLIC	?out@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::out
PUBLIC	?ate@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::ate
PUBLIC	?app@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::app
PUBLIC	?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::trunc
PUBLIC	?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Nocreate
PUBLIC	?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Noreplace
PUBLIC	?binary@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::binary
PUBLIC	?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::beg
PUBLIC	?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::cur
PUBLIC	?end@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::end
PUBLIC	?kMaxBranchLinearSubNodeLength@BytesTrie@icu_56@@0HB ; icu_56::BytesTrie::kMaxBranchLinearSubNodeLength
PUBLIC	?kMinLinearMatch@BytesTrie@icu_56@@0HB		; icu_56::BytesTrie::kMinLinearMatch
PUBLIC	?kMaxLinearMatchLength@BytesTrie@icu_56@@0HB	; icu_56::BytesTrie::kMaxLinearMatchLength
PUBLIC	?kMinValueLead@BytesTrie@icu_56@@0HB		; icu_56::BytesTrie::kMinValueLead
PUBLIC	?kValueIsFinal@BytesTrie@icu_56@@0HB		; icu_56::BytesTrie::kValueIsFinal
PUBLIC	?kMinOneByteValueLead@BytesTrie@icu_56@@0HB	; icu_56::BytesTrie::kMinOneByteValueLead
PUBLIC	?kMaxOneByteValue@BytesTrie@icu_56@@0HB		; icu_56::BytesTrie::kMaxOneByteValue
PUBLIC	?kMinTwoByteValueLead@BytesTrie@icu_56@@0HB	; icu_56::BytesTrie::kMinTwoByteValueLead
PUBLIC	?kMaxTwoByteValue@BytesTrie@icu_56@@0HB		; icu_56::BytesTrie::kMaxTwoByteValue
PUBLIC	?kMinThreeByteValueLead@BytesTrie@icu_56@@0HB	; icu_56::BytesTrie::kMinThreeByteValueLead
PUBLIC	?kFourByteValueLead@BytesTrie@icu_56@@0HB	; icu_56::BytesTrie::kFourByteValueLead
PUBLIC	?kMaxThreeByteValue@BytesTrie@icu_56@@0HB	; icu_56::BytesTrie::kMaxThreeByteValue
PUBLIC	?kFiveByteValueLead@BytesTrie@icu_56@@0HB	; icu_56::BytesTrie::kFiveByteValueLead
PUBLIC	?kMaxOneByteDelta@BytesTrie@icu_56@@0HB		; icu_56::BytesTrie::kMaxOneByteDelta
PUBLIC	?kMinTwoByteDeltaLead@BytesTrie@icu_56@@0HB	; icu_56::BytesTrie::kMinTwoByteDeltaLead
PUBLIC	?kMinThreeByteDeltaLead@BytesTrie@icu_56@@0HB	; icu_56::BytesTrie::kMinThreeByteDeltaLead
PUBLIC	?kFourByteDeltaLead@BytesTrie@icu_56@@0HB	; icu_56::BytesTrie::kFourByteDeltaLead
PUBLIC	?kFiveByteDeltaLead@BytesTrie@icu_56@@0HB	; icu_56::BytesTrie::kFiveByteDeltaLead
PUBLIC	?kMaxTwoByteDelta@BytesTrie@icu_56@@0HB		; icu_56::BytesTrie::kMaxTwoByteDelta
PUBLIC	?kMaxThreeByteDelta@BytesTrie@icu_56@@0HB	; icu_56::BytesTrie::kMaxThreeByteDelta
;	COMDAT ?kMaxThreeByteDelta@BytesTrie@icu_56@@0HB
CONST	SEGMENT
?kMaxThreeByteDelta@BytesTrie@icu_56@@0HB DD 0dffffH	; icu_56::BytesTrie::kMaxThreeByteDelta
CONST	ENDS
;	COMDAT ?kMaxTwoByteDelta@BytesTrie@icu_56@@0HB
CONST	SEGMENT
?kMaxTwoByteDelta@BytesTrie@icu_56@@0HB DD 02fffH	; icu_56::BytesTrie::kMaxTwoByteDelta
CONST	ENDS
;	COMDAT ?kFiveByteDeltaLead@BytesTrie@icu_56@@0HB
CONST	SEGMENT
?kFiveByteDeltaLead@BytesTrie@icu_56@@0HB DD 0ffH	; icu_56::BytesTrie::kFiveByteDeltaLead
CONST	ENDS
;	COMDAT ?kFourByteDeltaLead@BytesTrie@icu_56@@0HB
CONST	SEGMENT
?kFourByteDeltaLead@BytesTrie@icu_56@@0HB DD 0feH	; icu_56::BytesTrie::kFourByteDeltaLead
CONST	ENDS
;	COMDAT ?kMinThreeByteDeltaLead@BytesTrie@icu_56@@0HB
CONST	SEGMENT
?kMinThreeByteDeltaLead@BytesTrie@icu_56@@0HB DD 0f0H	; icu_56::BytesTrie::kMinThreeByteDeltaLead
CONST	ENDS
;	COMDAT ?kMinTwoByteDeltaLead@BytesTrie@icu_56@@0HB
CONST	SEGMENT
?kMinTwoByteDeltaLead@BytesTrie@icu_56@@0HB DD 0c0H	; icu_56::BytesTrie::kMinTwoByteDeltaLead
CONST	ENDS
;	COMDAT ?kMaxOneByteDelta@BytesTrie@icu_56@@0HB
CONST	SEGMENT
?kMaxOneByteDelta@BytesTrie@icu_56@@0HB DD 0bfH		; icu_56::BytesTrie::kMaxOneByteDelta
CONST	ENDS
;	COMDAT ?kFiveByteValueLead@BytesTrie@icu_56@@0HB
CONST	SEGMENT
?kFiveByteValueLead@BytesTrie@icu_56@@0HB DD 07fH	; icu_56::BytesTrie::kFiveByteValueLead
CONST	ENDS
;	COMDAT ?kMaxThreeByteValue@BytesTrie@icu_56@@0HB
CONST	SEGMENT
?kMaxThreeByteValue@BytesTrie@icu_56@@0HB DD 011ffffH	; icu_56::BytesTrie::kMaxThreeByteValue
CONST	ENDS
;	COMDAT ?kFourByteValueLead@BytesTrie@icu_56@@0HB
CONST	SEGMENT
?kFourByteValueLead@BytesTrie@icu_56@@0HB DD 07eH	; icu_56::BytesTrie::kFourByteValueLead
CONST	ENDS
;	COMDAT ?kMinThreeByteValueLead@BytesTrie@icu_56@@0HB
CONST	SEGMENT
?kMinThreeByteValueLead@BytesTrie@icu_56@@0HB DD 06cH	; icu_56::BytesTrie::kMinThreeByteValueLead
CONST	ENDS
;	COMDAT ?kMaxTwoByteValue@BytesTrie@icu_56@@0HB
CONST	SEGMENT
?kMaxTwoByteValue@BytesTrie@icu_56@@0HB DD 01affH	; icu_56::BytesTrie::kMaxTwoByteValue
CONST	ENDS
;	COMDAT ?kMinTwoByteValueLead@BytesTrie@icu_56@@0HB
CONST	SEGMENT
?kMinTwoByteValueLead@BytesTrie@icu_56@@0HB DD 051H	; icu_56::BytesTrie::kMinTwoByteValueLead
CONST	ENDS
;	COMDAT ?kMaxOneByteValue@BytesTrie@icu_56@@0HB
CONST	SEGMENT
?kMaxOneByteValue@BytesTrie@icu_56@@0HB DD 040H		; icu_56::BytesTrie::kMaxOneByteValue
CONST	ENDS
;	COMDAT ?kMinOneByteValueLead@BytesTrie@icu_56@@0HB
CONST	SEGMENT
?kMinOneByteValueLead@BytesTrie@icu_56@@0HB DD 010H	; icu_56::BytesTrie::kMinOneByteValueLead
CONST	ENDS
;	COMDAT ?kValueIsFinal@BytesTrie@icu_56@@0HB
CONST	SEGMENT
?kValueIsFinal@BytesTrie@icu_56@@0HB DD 01H		; icu_56::BytesTrie::kValueIsFinal
CONST	ENDS
;	COMDAT ?kMinValueLead@BytesTrie@icu_56@@0HB
CONST	SEGMENT
?kMinValueLead@BytesTrie@icu_56@@0HB DD 020H		; icu_56::BytesTrie::kMinValueLead
CONST	ENDS
;	COMDAT ?kMaxLinearMatchLength@BytesTrie@icu_56@@0HB
CONST	SEGMENT
?kMaxLinearMatchLength@BytesTrie@icu_56@@0HB DD 010H	; icu_56::BytesTrie::kMaxLinearMatchLength
CONST	ENDS
;	COMDAT ?kMinLinearMatch@BytesTrie@icu_56@@0HB
CONST	SEGMENT
?kMinLinearMatch@BytesTrie@icu_56@@0HB DD 010H		; icu_56::BytesTrie::kMinLinearMatch
CONST	ENDS
;	COMDAT ?kMaxBranchLinearSubNodeLength@BytesTrie@icu_56@@0HB
CONST	SEGMENT
?kMaxBranchLinearSubNodeLength@BytesTrie@icu_56@@0HB DD 05H ; icu_56::BytesTrie::kMaxBranchLinearSubNodeLength
CONST	ENDS
;	COMDAT ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 02H		; std::_Iosb<int>::end
CONST	ENDS
;	COMDAT ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 01H		; std::_Iosb<int>::cur
CONST	ENDS
;	COMDAT ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 00H		; std::_Iosb<int>::beg
CONST	ENDS
;	COMDAT ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B DD 020H	; std::_Iosb<int>::binary
CONST	ENDS
;	COMDAT ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B DD 080H	; std::_Iosb<int>::_Noreplace
CONST	ENDS
;	COMDAT ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 040H	; std::_Iosb<int>::_Nocreate
CONST	ENDS
;	COMDAT ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B DD 010H		; std::_Iosb<int>::trunc
CONST	ENDS
;	COMDAT ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?app@?$_Iosb@H@std@@2W4_Openmode@12@B DD 08H		; std::_Iosb<int>::app
CONST	ENDS
;	COMDAT ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 04H		; std::_Iosb<int>::ate
CONST	ENDS
;	COMDAT ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?out@?$_Iosb@H@std@@2W4_Openmode@12@B DD 02H		; std::_Iosb<int>::out
CONST	ENDS
;	COMDAT ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?in@?$_Iosb@H@std@@2W4_Openmode@12@B DD 01H		; std::_Iosb<int>::in
CONST	ENDS
;	COMDAT ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B DD 010H	; std::_Iosb<int>::_Hardfail
CONST	ENDS
;	COMDAT ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 04H		; std::_Iosb<int>::badbit
CONST	ENDS
;	COMDAT ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 02H		; std::_Iosb<int>::failbit
CONST	ENDS
;	COMDAT ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 01H		; std::_Iosb<int>::eofbit
CONST	ENDS
;	COMDAT ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 00H		; std::_Iosb<int>::goodbit
CONST	ENDS
;	COMDAT ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::floatfield
CONST	ENDS
;	COMDAT ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0e00H	; std::_Iosb<int>::basefield
CONST	ENDS
;	COMDAT ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01c0H	; std::_Iosb<int>::adjustfield
CONST	ENDS
;	COMDAT ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08000H	; std::_Iosb<int>::_Stdio
CONST	ENDS
;	COMDAT ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04000H	; std::_Iosb<int>::boolalpha
CONST	ENDS
;	COMDAT ?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::hexfloat
CONST	ENDS
;	COMDAT ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02000H	; std::_Iosb<int>::fixed
CONST	ENDS
;	COMDAT ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01000H	; std::_Iosb<int>::scientific
CONST	ENDS
;	COMDAT ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0800H		; std::_Iosb<int>::hex
CONST	ENDS
;	COMDAT ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0400H		; std::_Iosb<int>::oct
CONST	ENDS
;	COMDAT ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0200H		; std::_Iosb<int>::dec
CONST	ENDS
;	COMDAT ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0100H	; std::_Iosb<int>::internal
CONST	ENDS
;	COMDAT ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 080H		; std::_Iosb<int>::right
CONST	ENDS
;	COMDAT ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 040H		; std::_Iosb<int>::left
CONST	ENDS
;	COMDAT ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 020H	; std::_Iosb<int>::showpos
CONST	ENDS
;	COMDAT ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 010H	; std::_Iosb<int>::showpoint
CONST	ENDS
;	COMDAT ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08H	; std::_Iosb<int>::showbase
CONST	ENDS
;	COMDAT ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04H	; std::_Iosb<int>::uppercase
CONST	ENDS
;	COMDAT ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02H	; std::_Iosb<int>::unitbuf
CONST	ENDS
;	COMDAT ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01H		; std::_Iosb<int>::skipws
CONST	ENDS
;	COMDAT ?none@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?none@?$_Locbase@H@std@@2HB DD 00H			; std::_Locbase<int>::none
CONST	ENDS
;	COMDAT ?all@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?all@?$_Locbase@H@std@@2HB DD 03fH			; std::_Locbase<int>::all
CONST	ENDS
;	COMDAT ?messages@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?messages@?$_Locbase@H@std@@2HB DD 020H			; std::_Locbase<int>::messages
CONST	ENDS
;	COMDAT ?time@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?time@?$_Locbase@H@std@@2HB DD 010H			; std::_Locbase<int>::time
CONST	ENDS
;	COMDAT ?numeric@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?numeric@?$_Locbase@H@std@@2HB DD 08H			; std::_Locbase<int>::numeric
CONST	ENDS
;	COMDAT ?monetary@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?monetary@?$_Locbase@H@std@@2HB DD 04H			; std::_Locbase<int>::monetary
CONST	ENDS
;	COMDAT ?ctype@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?ctype@?$_Locbase@H@std@@2HB DD 02H			; std::_Locbase<int>::ctype
CONST	ENDS
;	COMDAT ?collate@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?collate@?$_Locbase@H@std@@2HB DD 01H			; std::_Locbase<int>::collate
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@O@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@O@std@@2HB DD 09H		; std::_Arithmetic_traits<long double>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@N@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@N@std@@2HB DD 08H		; std::_Arithmetic_traits<double>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@M@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@M@std@@2HB DD 07H		; std::_Arithmetic_traits<float>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@_K@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@_K@std@@2HB DD 06H		; std::_Arithmetic_traits<unsigned __int64>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@_J@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@_J@std@@2HB DD 06H		; std::_Arithmetic_traits<__int64>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@K@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@K@std@@2HB DD 05H		; std::_Arithmetic_traits<unsigned long>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@J@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@J@std@@2HB DD 05H		; std::_Arithmetic_traits<long>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@I@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@I@std@@2HB DD 04H		; std::_Arithmetic_traits<unsigned int>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@H@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@H@std@@2HB DD 04H		; std::_Arithmetic_traits<int>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@G@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@G@std@@2HB DD 03H		; std::_Arithmetic_traits<unsigned short>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@F@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@F@std@@2HB DD 03H		; std::_Arithmetic_traits<short>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@E@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@E@std@@2HB DD 02H		; std::_Arithmetic_traits<unsigned char>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@C@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@C@std@@2HB DD 02H		; std::_Arithmetic_traits<signed char>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@D@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@D@std@@2HB DD 02H		; std::_Arithmetic_traits<char>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@_N@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@_N@std@@2HB DD 01H		; std::_Arithmetic_traits<bool>::_Rank
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@tr1@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@tr1@std@@2IB DD 00H	; std::tr1::integral_constant<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@tr1@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@tr1@std@@2_NB DB 01H	; std::tr1::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@tr1@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@tr1@std@@2_NB DB 00H	; std::tr1::integral_constant<bool,0>::value
CONST	ENDS
PUBLIC	??2@YAPAXI@Z					; operator new
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File d:\mozilla\intl\icu\source\common\unicode\utypes.h
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT ??2@YAPAXI@Z
_TEXT	SEGMENT
_q$ = -8						; size = 4
___formal$ = 8						; size = 4
??2@YAPAXI@Z PROC					; operator new, COMDAT
; Line 411
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 412
	mov	DWORD PTR _q$[ebp], 0
; Line 413
	mov	eax, DWORD PTR _q$[ebp]
	mov	BYTE PTR [eax], 5
; Line 414
	mov	eax, DWORD PTR _q$[ebp]
; Line 415
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??2@YAPAXI@Z ENDP					; operator new
_TEXT	ENDS
PUBLIC	??3@YAXPAX@Z					; operator delete
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??3@YAXPAX@Z
_TEXT	SEGMENT
_q$ = -8						; size = 4
___formal$ = 8						; size = 4
??3@YAXPAX@Z PROC					; operator delete, COMDAT
; Line 439
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 440
	mov	DWORD PTR _q$[ebp], 0
; Line 441
	mov	eax, DWORD PTR _q$[ebp]
	mov	BYTE PTR [eax], 5
; Line 442
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??3@YAXPAX@Z ENDP					; operator delete
_TEXT	ENDS
PUBLIC	??2UMemory@icu_56@@SAPAXIPAX@Z			; icu_56::UMemory::operator new
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??2UMemory@icu_56@@SAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_ptr$ = 12						; size = 4
??2UMemory@icu_56@@SAPAXIPAX@Z PROC			; icu_56::UMemory::operator new, COMDAT
; File d:\mozilla\intl\icu\source\common\unicode\uobject.h
; Line 161
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR _ptr$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??2UMemory@icu_56@@SAPAXIPAX@Z ENDP			; icu_56::UMemory::operator new
_TEXT	ENDS
PUBLIC	??3UMemory@icu_56@@SAXPAX0@Z			; icu_56::UMemory::operator delete
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??3UMemory@icu_56@@SAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3UMemory@icu_56@@SAXPAX0@Z PROC			; icu_56::UMemory::operator delete, COMDAT
; Line 168
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??3UMemory@icu_56@@SAXPAX0@Z ENDP			; icu_56::UMemory::operator delete
_TEXT	ENDS
PUBLIC	??4UMemory@icu_56@@QAEAAV01@ABV01@@Z		; icu_56::UMemory::operator=
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??4UMemory@icu_56@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___that$ = 8						; size = 4
??4UMemory@icu_56@@QAEAAV01@ABV01@@Z PROC		; icu_56::UMemory::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4UMemory@icu_56@@QAEAAV01@ABV01@@Z ENDP		; icu_56::UMemory::operator=
_TEXT	ENDS
PUBLIC	??_7UObject@icu_56@@6B@				; icu_56::UObject::`vftable'
PUBLIC	??0UObject@icu_56@@QAE@XZ			; icu_56::UObject::UObject
PUBLIC	??_R4UObject@icu_56@@6B@			; icu_56::UObject::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVUObject@icu_56@@@8			; icu_56::UObject `RTTI Type Descriptor'
PUBLIC	??_R3UObject@icu_56@@8				; icu_56::UObject::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2UObject@icu_56@@8				; icu_56::UObject::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@UObject@icu_56@@8			; icu_56::UObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R13?0A@EA@UMemory@icu_56@@8			; icu_56::UMemory::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	??_R0?AVUMemory@icu_56@@@8			; icu_56::UMemory `RTTI Type Descriptor'
PUBLIC	??_R3UMemory@icu_56@@8				; icu_56::UMemory::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2UMemory@icu_56@@8				; icu_56::UMemory::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@UMemory@icu_56@@8			; icu_56::UMemory::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_EUObject@icu_56@@UAEPAXI@Z			; icu_56::UObject::`vector deleting destructor'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?getDynamicClassID@UObject@icu_56@@UBEPAXXZ:PROC ; icu_56::UObject::getDynamicClassID
;	COMDAT ??_R1A@?0A@EA@UMemory@icu_56@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@UMemory@icu_56@@8 DD FLAT:??_R0?AVUMemory@icu_56@@@8 ; icu_56::UMemory::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3UMemory@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_R2UMemory@icu_56@@8
rdata$r	SEGMENT
??_R2UMemory@icu_56@@8 DD FLAT:??_R1A@?0A@EA@UMemory@icu_56@@8 ; icu_56::UMemory::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3UMemory@icu_56@@8
rdata$r	SEGMENT
??_R3UMemory@icu_56@@8 DD 00H				; icu_56::UMemory::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2UMemory@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVUMemory@icu_56@@@8
_DATA	SEGMENT
??_R0?AVUMemory@icu_56@@@8 DD FLAT:??_7type_info@@6B@	; icu_56::UMemory `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVUMemory@icu_56@@', 00H
_DATA	ENDS
;	COMDAT ??_R13?0A@EA@UMemory@icu_56@@8
rdata$r	SEGMENT
??_R13?0A@EA@UMemory@icu_56@@8 DD FLAT:??_R0?AVUMemory@icu_56@@@8 ; icu_56::UMemory::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	00H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3UMemory@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@UObject@icu_56@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@UObject@icu_56@@8 DD FLAT:??_R0?AVUObject@icu_56@@@8 ; icu_56::UObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3UObject@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_R2UObject@icu_56@@8
rdata$r	SEGMENT
??_R2UObject@icu_56@@8 DD FLAT:??_R1A@?0A@EA@UObject@icu_56@@8 ; icu_56::UObject::`RTTI Base Class Array'
	DD	FLAT:??_R13?0A@EA@UMemory@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_R3UObject@icu_56@@8
rdata$r	SEGMENT
??_R3UObject@icu_56@@8 DD 00H				; icu_56::UObject::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2UObject@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVUObject@icu_56@@@8
_DATA	SEGMENT
??_R0?AVUObject@icu_56@@@8 DD FLAT:??_7type_info@@6B@	; icu_56::UObject `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVUObject@icu_56@@', 00H
_DATA	ENDS
;	COMDAT ??_R4UObject@icu_56@@6B@
rdata$r	SEGMENT
??_R4UObject@icu_56@@6B@ DD 00H				; icu_56::UObject::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVUObject@icu_56@@@8
	DD	FLAT:??_R3UObject@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_7UObject@icu_56@@6B@
CONST	SEGMENT
??_7UObject@icu_56@@6B@ DD FLAT:??_R4UObject@icu_56@@6B@ ; icu_56::UObject::`vftable'
	DD	FLAT:??_EUObject@icu_56@@UAEPAXI@Z
	DD	FLAT:?getDynamicClassID@UObject@icu_56@@UBEPAXXZ
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ??0UObject@icu_56@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0UObject@icu_56@@QAE@XZ PROC				; icu_56::UObject::UObject, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7UObject@icu_56@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0UObject@icu_56@@QAE@XZ ENDP				; icu_56::UObject::UObject
_TEXT	ENDS
PUBLIC	??0UObject@icu_56@@QAE@ABV01@@Z			; icu_56::UObject::UObject
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0UObject@icu_56@@QAE@ABV01@@Z
_TEXT	SEGMENT
tv68 = -208						; size = 4
_this$ = -8						; size = 4
___that$ = 8						; size = 4
??0UObject@icu_56@@QAE@ABV01@@Z PROC			; icu_56::UObject::UObject, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	cmp	DWORD PTR ___that$[ebp], 0
	je	SHORT $LN3@UObject
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 4
	mov	DWORD PTR tv68[ebp], eax
	jmp	SHORT $LN4@UObject
$LN3@UObject:
	mov	DWORD PTR tv68[ebp], 0
$LN4@UObject:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7UObject@icu_56@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0UObject@icu_56@@QAE@ABV01@@Z ENDP			; icu_56::UObject::UObject
_TEXT	ENDS
PUBLIC	??4UObject@icu_56@@QAEAAV01@ABV01@@Z		; icu_56::UObject::operator=
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??4UObject@icu_56@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___that$ = 8						; size = 4
??4UObject@icu_56@@QAEAAV01@ABV01@@Z PROC		; icu_56::UObject::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4UObject@icu_56@@QAEAAV01@ABV01@@Z ENDP		; icu_56::UObject::operator=
_TEXT	ENDS
PUBLIC	??_GUObject@icu_56@@UAEPAXI@Z			; icu_56::UObject::`scalar deleting destructor'
EXTRN	??3UMemory@icu_56@@SAXPAX@Z:PROC		; icu_56::UMemory::operator delete
EXTRN	??1UObject@icu_56@@UAE@XZ:PROC			; icu_56::UObject::~UObject
EXTRN	__RTC_CheckEsp:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GUObject@icu_56@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_GUObject@icu_56@@UAEPAXI@Z PROC			; icu_56::UObject::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1UObject@icu_56@@UAE@XZ		; icu_56::UObject::~UObject
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3UMemory@icu_56@@SAXPAX@Z		; icu_56::UMemory::operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GUObject@icu_56@@UAEPAXI@Z ENDP			; icu_56::UObject::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	??_VUMemory@icu_56@@SAXPAX@Z:PROC		; icu_56::UMemory::operator delete[]
EXTRN	??_M@YGXPAXIHP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_EUObject@icu_56@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_EUObject@icu_56@@UAEPAXI@Z PROC			; icu_56::UObject::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector
	push	OFFSET ??1UObject@icu_56@@UAE@XZ	; icu_56::UObject::~UObject
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	push	ecx
	push	4
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@vector
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	push	eax
	call	??_VUMemory@icu_56@@SAXPAX@Z		; icu_56::UMemory::operator delete[]
	add	esp, 4
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN3@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1UObject@icu_56@@UAE@XZ		; icu_56::UObject::~UObject
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3UMemory@icu_56@@SAXPAX@Z		; icu_56::UMemory::operator delete
	add	esp, 4
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_EUObject@icu_56@@UAEPAXI@Z ENDP			; icu_56::UObject::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	??_7ByteSink@icu_56@@6B@			; icu_56::ByteSink::`vftable'
PUBLIC	??0ByteSink@icu_56@@QAE@XZ			; icu_56::ByteSink::ByteSink
PUBLIC	??_R4ByteSink@icu_56@@6B@			; icu_56::ByteSink::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVByteSink@icu_56@@@8			; icu_56::ByteSink `RTTI Type Descriptor'
PUBLIC	??_R3ByteSink@icu_56@@8				; icu_56::ByteSink::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ByteSink@icu_56@@8				; icu_56::ByteSink::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ByteSink@icu_56@@8		; icu_56::ByteSink::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_EByteSink@icu_56@@UAEPAXI@Z			; icu_56::ByteSink::`vector deleting destructor'
EXTRN	__purecall:PROC
EXTRN	?GetAppendBuffer@ByteSink@icu_56@@UAEPADHHPADHPAH@Z:PROC ; icu_56::ByteSink::GetAppendBuffer
EXTRN	?Flush@ByteSink@icu_56@@UAEXXZ:PROC		; icu_56::ByteSink::Flush
;	COMDAT ??_R1A@?0A@EA@ByteSink@icu_56@@8
; File d:\mozilla\intl\icu\source\common\unicode\bytestream.h
rdata$r	SEGMENT
??_R1A@?0A@EA@ByteSink@icu_56@@8 DD FLAT:??_R0?AVByteSink@icu_56@@@8 ; icu_56::ByteSink::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ByteSink@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_R2ByteSink@icu_56@@8
rdata$r	SEGMENT
??_R2ByteSink@icu_56@@8 DD FLAT:??_R1A@?0A@EA@ByteSink@icu_56@@8 ; icu_56::ByteSink::`RTTI Base Class Array'
	DD	FLAT:??_R13?0A@EA@UMemory@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_R3ByteSink@icu_56@@8
rdata$r	SEGMENT
??_R3ByteSink@icu_56@@8 DD 00H				; icu_56::ByteSink::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ByteSink@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVByteSink@icu_56@@@8
_DATA	SEGMENT
??_R0?AVByteSink@icu_56@@@8 DD FLAT:??_7type_info@@6B@	; icu_56::ByteSink `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVByteSink@icu_56@@', 00H
_DATA	ENDS
;	COMDAT ??_R4ByteSink@icu_56@@6B@
rdata$r	SEGMENT
??_R4ByteSink@icu_56@@6B@ DD 00H			; icu_56::ByteSink::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVByteSink@icu_56@@@8
	DD	FLAT:??_R3ByteSink@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_7ByteSink@icu_56@@6B@
CONST	SEGMENT
??_7ByteSink@icu_56@@6B@ DD FLAT:??_R4ByteSink@icu_56@@6B@ ; icu_56::ByteSink::`vftable'
	DD	FLAT:??_EByteSink@icu_56@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:?GetAppendBuffer@ByteSink@icu_56@@UAEPADHHPADHPAH@Z
	DD	FLAT:?Flush@ByteSink@icu_56@@UAEXXZ
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ??0ByteSink@icu_56@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0ByteSink@icu_56@@QAE@XZ PROC				; icu_56::ByteSink::ByteSink, COMDAT
; _this$ = ecx
; Line 54
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7ByteSink@icu_56@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0ByteSink@icu_56@@QAE@XZ ENDP				; icu_56::ByteSink::ByteSink
_TEXT	ENDS
PUBLIC	??_GByteSink@icu_56@@UAEPAXI@Z			; icu_56::ByteSink::`scalar deleting destructor'
EXTRN	??1ByteSink@icu_56@@UAE@XZ:PROC			; icu_56::ByteSink::~ByteSink
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GByteSink@icu_56@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_GByteSink@icu_56@@UAEPAXI@Z PROC			; icu_56::ByteSink::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ByteSink@icu_56@@UAE@XZ		; icu_56::ByteSink::~ByteSink
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@2
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3UMemory@icu_56@@SAXPAX@Z		; icu_56::UMemory::operator delete
	add	esp, 4
$LN1@scalar@2:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GByteSink@icu_56@@UAEPAXI@Z ENDP			; icu_56::ByteSink::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??_EByteSink@icu_56@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_EByteSink@icu_56@@UAEPAXI@Z PROC			; icu_56::ByteSink::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector@2
	push	OFFSET ??1ByteSink@icu_56@@UAE@XZ	; icu_56::ByteSink::~ByteSink
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	push	ecx
	push	4
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@vector@2
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	push	eax
	call	??_VUMemory@icu_56@@SAXPAX@Z		; icu_56::UMemory::operator delete[]
	add	esp, 4
$LN2@vector@2:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector@2
$LN3@vector@2:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ByteSink@icu_56@@UAE@XZ		; icu_56::ByteSink::~ByteSink
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector@2
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3UMemory@icu_56@@SAXPAX@Z		; icu_56::UMemory::operator delete
	add	esp, 4
$LN1@vector@2:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@2:
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_EByteSink@icu_56@@UAEPAXI@Z ENDP			; icu_56::ByteSink::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	?NumberOfBytesWritten@CheckedArrayByteSink@icu_56@@QBEHXZ ; icu_56::CheckedArrayByteSink::NumberOfBytesWritten
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?NumberOfBytesWritten@CheckedArrayByteSink@icu_56@@QBEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?NumberOfBytesWritten@CheckedArrayByteSink@icu_56@@QBEHXZ PROC ; icu_56::CheckedArrayByteSink::NumberOfBytesWritten, COMDAT
; _this$ = ecx
; Line 196
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+12]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?NumberOfBytesWritten@CheckedArrayByteSink@icu_56@@QBEHXZ ENDP ; icu_56::CheckedArrayByteSink::NumberOfBytesWritten
_TEXT	ENDS
PUBLIC	?Overflowed@CheckedArrayByteSink@icu_56@@QBECXZ	; icu_56::CheckedArrayByteSink::Overflowed
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?Overflowed@CheckedArrayByteSink@icu_56@@QBECXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?Overflowed@CheckedArrayByteSink@icu_56@@QBECXZ PROC	; icu_56::CheckedArrayByteSink::Overflowed, COMDAT
; _this$ = ecx
; Line 203
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+20]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Overflowed@CheckedArrayByteSink@icu_56@@QBECXZ ENDP	; icu_56::CheckedArrayByteSink::Overflowed
_TEXT	ENDS
PUBLIC	?NumberOfBytesAppended@CheckedArrayByteSink@icu_56@@QBEHXZ ; icu_56::CheckedArrayByteSink::NumberOfBytesAppended
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?NumberOfBytesAppended@CheckedArrayByteSink@icu_56@@QBEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?NumberOfBytesAppended@CheckedArrayByteSink@icu_56@@QBEHXZ PROC ; icu_56::CheckedArrayByteSink::NumberOfBytesAppended, COMDAT
; _this$ = ecx
; Line 211
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?NumberOfBytesAppended@CheckedArrayByteSink@icu_56@@QBEHXZ ENDP ; icu_56::CheckedArrayByteSink::NumberOfBytesAppended
_TEXT	ENDS
PUBLIC	??0StringPiece@icu_56@@QAE@XZ			; icu_56::StringPiece::StringPiece
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0StringPiece@icu_56@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0StringPiece@icu_56@@QAE@XZ PROC			; icu_56::StringPiece::StringPiece, COMDAT
; _this$ = ecx
; File d:\mozilla\intl\icu\source\common\unicode\stringpiece.h
; Line 62
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0StringPiece@icu_56@@QAE@XZ ENDP			; icu_56::StringPiece::StringPiece
_TEXT	ENDS
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
PUBLIC	?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::data
PUBLIC	??0StringPiece@icu_56@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; icu_56::StringPiece::StringPiece
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0StringPiece@icu_56@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_str$ = 8						; size = 4
??0StringPiece@icu_56@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; icu_56::StringPiece::StringPiece, COMDAT
; _this$ = ecx
; Line 74
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _str$[ebp]
	call	?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::data
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	ecx, DWORD PTR _str$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0StringPiece@icu_56@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; icu_56::StringPiece::StringPiece
_TEXT	ENDS
PUBLIC	??0StringPiece@icu_56@@QAE@PBDH@Z		; icu_56::StringPiece::StringPiece
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0StringPiece@icu_56@@QAE@PBDH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_offset$ = 8						; size = 4
_len$ = 12						; size = 4
??0StringPiece@icu_56@@QAE@PBDH@Z PROC			; icu_56::StringPiece::StringPiece, COMDAT
; _this$ = ecx
; Line 83
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _offset$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _len$[ebp]
	mov	DWORD PTR [eax+4], ecx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0StringPiece@icu_56@@QAE@PBDH@Z ENDP			; icu_56::StringPiece::StringPiece
_TEXT	ENDS
PUBLIC	?data@StringPiece@icu_56@@QBEPBDXZ		; icu_56::StringPiece::data
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?data@StringPiece@icu_56@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?data@StringPiece@icu_56@@QBEPBDXZ PROC			; icu_56::StringPiece::data, COMDAT
; _this$ = ecx
; Line 111
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?data@StringPiece@icu_56@@QBEPBDXZ ENDP			; icu_56::StringPiece::data
_TEXT	ENDS
PUBLIC	?size@StringPiece@icu_56@@QBEHXZ		; icu_56::StringPiece::size
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?size@StringPiece@icu_56@@QBEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?size@StringPiece@icu_56@@QBEHXZ PROC			; icu_56::StringPiece::size, COMDAT
; _this$ = ecx
; Line 117
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?size@StringPiece@icu_56@@QBEHXZ ENDP			; icu_56::StringPiece::size
_TEXT	ENDS
PUBLIC	?length@StringPiece@icu_56@@QBEHXZ		; icu_56::StringPiece::length
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?length@StringPiece@icu_56@@QBEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?length@StringPiece@icu_56@@QBEHXZ PROC			; icu_56::StringPiece::length, COMDAT
; _this$ = ecx
; Line 123
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?length@StringPiece@icu_56@@QBEHXZ ENDP			; icu_56::StringPiece::length
_TEXT	ENDS
PUBLIC	?empty@StringPiece@icu_56@@QBECXZ		; icu_56::StringPiece::empty
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?empty@StringPiece@icu_56@@QBECXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?empty@StringPiece@icu_56@@QBECXZ PROC			; icu_56::StringPiece::empty, COMDAT
; _this$ = ecx
; Line 129
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	sete	al
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?empty@StringPiece@icu_56@@QBECXZ ENDP			; icu_56::StringPiece::empty
_TEXT	ENDS
PUBLIC	?clear@StringPiece@icu_56@@QAEXXZ		; icu_56::StringPiece::clear
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?clear@StringPiece@icu_56@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?clear@StringPiece@icu_56@@QAEXXZ PROC			; icu_56::StringPiece::clear, COMDAT
; _this$ = ecx
; Line 135
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?clear@StringPiece@icu_56@@QAEXXZ ENDP			; icu_56::StringPiece::clear
_TEXT	ENDS
PUBLIC	?set@StringPiece@icu_56@@QAEXPBDH@Z		; icu_56::StringPiece::set
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?set@StringPiece@icu_56@@QAEXPBDH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_xdata$ = 8						; size = 4
_len$ = 12						; size = 4
?set@StringPiece@icu_56@@QAEXPBDH@Z PROC		; icu_56::StringPiece::set, COMDAT
; _this$ = ecx
; Line 143
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _xdata$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _len$[ebp]
	mov	DWORD PTR [eax+4], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?set@StringPiece@icu_56@@QAEXPBDH@Z ENDP		; icu_56::StringPiece::set
_TEXT	ENDS
PUBLIC	?remove_prefix@StringPiece@icu_56@@QAEXH@Z	; icu_56::StringPiece::remove_prefix
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?remove_prefix@StringPiece@icu_56@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_n$ = 8							; size = 4
?remove_prefix@StringPiece@icu_56@@QAEXH@Z PROC		; icu_56::StringPiece::remove_prefix, COMDAT
; _this$ = ecx
; Line 157
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 158
	cmp	DWORD PTR _n$[ebp], 0
	jl	SHORT $LN3@remove_pre
; Line 159
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _n$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jle	SHORT $LN1@remove_pre
; Line 160
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _n$[ebp], ecx
$LN1@remove_pre:
; Line 162
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 163
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx
$LN3@remove_pre:
; Line 165
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?remove_prefix@StringPiece@icu_56@@QAEXH@Z ENDP		; icu_56::StringPiece::remove_prefix
_TEXT	ENDS
PUBLIC	?remove_suffix@StringPiece@icu_56@@QAEXH@Z	; icu_56::StringPiece::remove_suffix
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?remove_suffix@StringPiece@icu_56@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_n$ = 8							; size = 4
?remove_suffix@StringPiece@icu_56@@QAEXH@Z PROC		; icu_56::StringPiece::remove_suffix, COMDAT
; _this$ = ecx
; Line 172
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 173
	cmp	DWORD PTR _n$[ebp], 0
	jl	SHORT $LN4@remove_suf
; Line 174
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _n$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jg	SHORT $LN2@remove_suf
; Line 175
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx
; Line 176
	jmp	SHORT $LN4@remove_suf
$LN2@remove_suf:
; Line 177
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
$LN4@remove_suf:
; Line 180
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?remove_suffix@StringPiece@icu_56@@QAEXH@Z ENDP		; icu_56::StringPiece::remove_suffix
_TEXT	ENDS
PUBLIC	?substr@StringPiece@icu_56@@QBE?AV12@HH@Z	; icu_56::StringPiece::substr
EXTRN	??0StringPiece@icu_56@@QAE@ABV01@HH@Z:PROC	; icu_56::StringPiece::StringPiece
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?substr@StringPiece@icu_56@@QBE?AV12@HH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
_pos$ = 12						; size = 4
_len$ = 16						; size = 4
?substr@StringPiece@icu_56@@QBE?AV12@HH@Z PROC		; icu_56::StringPiece::substr, COMDAT
; _this$ = ecx
; Line 196
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 197
	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pos$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0StringPiece@icu_56@@QAE@ABV01@HH@Z	; icu_56::StringPiece::StringPiece
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 198
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?substr@StringPiece@icu_56@@QBE?AV12@HH@Z ENDP		; icu_56::StringPiece::substr
_TEXT	ENDS
PUBLIC	??4StringPiece@icu_56@@QAEAAV01@ABV01@@Z	; icu_56::StringPiece::operator=
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??4StringPiece@icu_56@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___that$ = 8						; size = 4
??4StringPiece@icu_56@@QAEAAV01@ABV01@@Z PROC		; icu_56::StringPiece::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4StringPiece@icu_56@@QAEAAV01@ABV01@@Z ENDP		; icu_56::StringPiece::operator=
_TEXT	ENDS
PUBLIC	??0BytesTrie@icu_56@@QAE@PBX@Z			; icu_56::BytesTrie::BytesTrie
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0BytesTrie@icu_56@@QAE@PBX@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_trieBytes$ = 8						; size = 4
??0BytesTrie@icu_56@@QAE@PBX@Z PROC			; icu_56::BytesTrie::BytesTrie, COMDAT
; _this$ = ecx
; File d:\mozilla\intl\icu\source\common\unicode\bytestrie.h
; Line 66
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _trieBytes$[ebp]
	mov	DWORD PTR [eax+4], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+8], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], -1
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0BytesTrie@icu_56@@QAE@PBX@Z ENDP			; icu_56::BytesTrie::BytesTrie
_TEXT	ENDS
PUBLIC	??0BytesTrie@icu_56@@QAE@ABV01@@Z		; icu_56::BytesTrie::BytesTrie
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0BytesTrie@icu_56@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_other$ = 8						; size = 4
??0BytesTrie@icu_56@@QAE@ABV01@@Z PROC			; icu_56::BytesTrie::BytesTrie, COMDAT
; _this$ = ecx
; Line 82
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _other$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _other$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _other$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0BytesTrie@icu_56@@QAE@ABV01@@Z ENDP			; icu_56::BytesTrie::BytesTrie
_TEXT	ENDS
PUBLIC	?reset@BytesTrie@icu_56@@QAEAAV12@XZ		; icu_56::BytesTrie::reset
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?reset@BytesTrie@icu_56@@QAEAAV12@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?reset@BytesTrie@icu_56@@QAEAAV12@XZ PROC		; icu_56::BytesTrie::reset, COMDAT
; _this$ = ecx
; Line 89
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 90
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+8], edx
; Line 91
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], -1
; Line 92
	mov	eax, DWORD PTR _this$[ebp]
; Line 93
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?reset@BytesTrie@icu_56@@QAEAAV12@XZ ENDP		; icu_56::BytesTrie::reset
_TEXT	ENDS
PUBLIC	?saveState@BytesTrie@icu_56@@QBEABV12@AAVState@12@@Z ; icu_56::BytesTrie::saveState
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?saveState@BytesTrie@icu_56@@QBEABV12@AAVState@12@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_state$ = 8						; size = 4
?saveState@BytesTrie@icu_56@@QBEABV12@AAVState@12@@Z PROC ; icu_56::BytesTrie::saveState, COMDAT
; _this$ = ecx
; Line 122
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 123
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax], edx
; Line 124
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+4], edx
; Line 125
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+8], edx
; Line 126
	mov	eax, DWORD PTR _this$[ebp]
; Line 127
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?saveState@BytesTrie@icu_56@@QBEABV12@AAVState@12@@Z ENDP ; icu_56::BytesTrie::saveState
_TEXT	ENDS
PUBLIC	?resetToState@BytesTrie@icu_56@@QAEAAV12@ABVState@12@@Z ; icu_56::BytesTrie::resetToState
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?resetToState@BytesTrie@icu_56@@QAEAAV12@ABVState@12@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_state$ = 8						; size = 4
?resetToState@BytesTrie@icu_56@@QAEAAV12@ABVState@12@@Z PROC ; icu_56::BytesTrie::resetToState, COMDAT
; _this$ = ecx
; Line 139
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 140
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN1@resetToSta
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN1@resetToSta
; Line 141
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+8], edx
; Line 142
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+12], edx
$LN1@resetToSta:
; Line 144
	mov	eax, DWORD PTR _this$[ebp]
; Line 145
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?resetToState@BytesTrie@icu_56@@QAEAAV12@ABVState@12@@Z ENDP ; icu_56::BytesTrie::resetToState
_TEXT	ENDS
PUBLIC	?nextImpl@BytesTrie@icu_56@@AAE?AW4UStringTrieResult@@PBEH@Z ; icu_56::BytesTrie::nextImpl
PUBLIC	?first@BytesTrie@icu_56@@QAE?AW4UStringTrieResult@@H@Z ; icu_56::BytesTrie::first
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?first@BytesTrie@icu_56@@QAE?AW4UStringTrieResult@@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_inByte$ = 8						; size = 4
?first@BytesTrie@icu_56@@QAE?AW4UStringTrieResult@@H@Z PROC ; icu_56::BytesTrie::first, COMDAT
; _this$ = ecx
; Line 163
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 164
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], -1
; Line 165
	cmp	DWORD PTR _inByte$[ebp], 0
	jge	SHORT $LN1@first
; Line 166
	mov	eax, DWORD PTR _inByte$[ebp]
	add	eax, 256				; 00000100H
	mov	DWORD PTR _inByte$[ebp], eax
$LN1@first:
; Line 168
	mov	eax, DWORD PTR _inByte$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?nextImpl@BytesTrie@icu_56@@AAE?AW4UStringTrieResult@@PBEH@Z ; icu_56::BytesTrie::nextImpl
; Line 169
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?first@BytesTrie@icu_56@@QAE?AW4UStringTrieResult@@H@Z ENDP ; icu_56::BytesTrie::first
_TEXT	ENDS
PUBLIC	?readValue@BytesTrie@icu_56@@CAHPBEH@Z		; icu_56::BytesTrie::readValue
PUBLIC	?getValue@BytesTrie@icu_56@@QBEHXZ		; icu_56::BytesTrie::getValue
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?getValue@BytesTrie@icu_56@@QBEHXZ
_TEXT	SEGMENT
_leadByte$ = -32					; size = 4
_pos$ = -20						; size = 4
_this$ = -8						; size = 4
?getValue@BytesTrie@icu_56@@QBEHXZ PROC			; icu_56::BytesTrie::getValue, COMDAT
; _this$ = ecx
; Line 206
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 207
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _pos$[ebp], ecx
; Line 208
	mov	eax, DWORD PTR _pos$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _leadByte$[ebp], ecx
	mov	edx, DWORD PTR _pos$[ebp]
	add	edx, 1
	mov	DWORD PTR _pos$[ebp], edx
; Line 210
	mov	eax, DWORD PTR _leadByte$[ebp]
	sar	eax, 1
	push	eax
	mov	ecx, DWORD PTR _pos$[ebp]
	push	ecx
	call	?readValue@BytesTrie@icu_56@@CAHPBEH@Z	; icu_56::BytesTrie::readValue
	add	esp, 8
; Line 211
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?getValue@BytesTrie@icu_56@@QBEHXZ ENDP			; icu_56::BytesTrie::getValue
_TEXT	ENDS
PUBLIC	?findUniqueValue@BytesTrie@icu_56@@CACPBECAAH@Z	; icu_56::BytesTrie::findUniqueValue
PUBLIC	?hasUniqueValue@BytesTrie@icu_56@@QBECAAH@Z	; icu_56::BytesTrie::hasUniqueValue
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?hasUniqueValue@BytesTrie@icu_56@@QBECAAH@Z
_TEXT	SEGMENT
tv75 = -217						; size = 1
_pos$ = -20						; size = 4
_this$ = -8						; size = 4
_uniqueValue$ = 8					; size = 4
?hasUniqueValue@BytesTrie@icu_56@@QBECAAH@Z PROC	; icu_56::BytesTrie::hasUniqueValue, COMDAT
; _this$ = ecx
; Line 222
	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 223
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _pos$[ebp], ecx
; Line 225
	cmp	DWORD PTR _pos$[ebp], 0
	je	SHORT $LN3@hasUniqueV
	mov	eax, DWORD PTR _uniqueValue$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR _pos$[ebp]
	lea	ecx, DWORD PTR [eax+edx+1]
	push	ecx
	call	?findUniqueValue@BytesTrie@icu_56@@CACPBECAAH@Z ; icu_56::BytesTrie::findUniqueValue
	add	esp, 12					; 0000000cH
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN3@hasUniqueV
	mov	BYTE PTR tv75[ebp], 1
	jmp	SHORT $LN4@hasUniqueV
$LN3@hasUniqueV:
	mov	BYTE PTR tv75[ebp], 0
$LN4@hasUniqueV:
	mov	al, BYTE PTR tv75[ebp]
; Line 226
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?hasUniqueValue@BytesTrie@icu_56@@QBECAAH@Z ENDP	; icu_56::BytesTrie::hasUniqueValue
_TEXT	ENDS
PUBLIC	?getString@Iterator@BytesTrie@icu_56@@QBEABVStringPiece@3@XZ ; icu_56::BytesTrie::Iterator::getString
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?getString@Iterator@BytesTrie@icu_56@@QBEABVStringPiece@3@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?getString@Iterator@BytesTrie@icu_56@@QBEABVStringPiece@3@XZ PROC ; icu_56::BytesTrie::Iterator::getString, COMDAT
; _this$ = ecx
; Line 309
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 24					; 00000018H
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?getString@Iterator@BytesTrie@icu_56@@QBEABVStringPiece@3@XZ ENDP ; icu_56::BytesTrie::Iterator::getString
_TEXT	ENDS
PUBLIC	?getValue@Iterator@BytesTrie@icu_56@@QBEHXZ	; icu_56::BytesTrie::Iterator::getValue
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?getValue@Iterator@BytesTrie@icu_56@@QBEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?getValue@Iterator@BytesTrie@icu_56@@QBEHXZ PROC	; icu_56::BytesTrie::Iterator::getValue, COMDAT
; _this$ = ecx
; Line 314
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+36]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?getValue@Iterator@BytesTrie@icu_56@@QBEHXZ ENDP	; icu_56::BytesTrie::Iterator::getValue
_TEXT	ENDS
PUBLIC	??0BytesTrie@icu_56@@AAE@PAXPBX@Z		; icu_56::BytesTrie::BytesTrie
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0BytesTrie@icu_56@@AAE@PAXPBX@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_adoptBytes$ = 8					; size = 4
_trieBytes$ = 12					; size = 4
??0BytesTrie@icu_56@@AAE@PAXPBX@Z PROC			; icu_56::BytesTrie::BytesTrie, COMDAT
; _this$ = ecx
; Line 354
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _adoptBytes$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _trieBytes$[ebp]
	mov	DWORD PTR [eax+4], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+8], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], -1
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0BytesTrie@icu_56@@AAE@PAXPBX@Z ENDP			; icu_56::BytesTrie::BytesTrie
_TEXT	ENDS
PUBLIC	?stop@BytesTrie@icu_56@@AAEXXZ			; icu_56::BytesTrie::stop
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?stop@BytesTrie@icu_56@@AAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?stop@BytesTrie@icu_56@@AAEXXZ PROC			; icu_56::BytesTrie::stop, COMDAT
; _this$ = ecx
; Line 359
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 360
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 361
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?stop@BytesTrie@icu_56@@AAEXXZ ENDP			; icu_56::BytesTrie::stop
_TEXT	ENDS
PUBLIC	?skipValue@BytesTrie@icu_56@@CAPBEPBEH@Z	; icu_56::BytesTrie::skipValue
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?skipValue@BytesTrie@icu_56@@CAPBEPBEH@Z
_TEXT	SEGMENT
_pos$ = 8						; size = 4
_leadByte$ = 12						; size = 4
?skipValue@BytesTrie@icu_56@@CAPBEPBEH@Z PROC		; icu_56::BytesTrie::skipValue, COMDAT
; Line 366
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 368
	cmp	DWORD PTR _leadByte$[ebp], 162		; 000000a2H
	jl	SHORT $LN5@skipValue
; Line 369
	cmp	DWORD PTR _leadByte$[ebp], 216		; 000000d8H
	jge	SHORT $LN4@skipValue
; Line 370
	mov	eax, DWORD PTR _pos$[ebp]
	add	eax, 1
	mov	DWORD PTR _pos$[ebp], eax
	jmp	SHORT $LN5@skipValue
$LN4@skipValue:
; Line 371
	cmp	DWORD PTR _leadByte$[ebp], 252		; 000000fcH
	jge	SHORT $LN2@skipValue
; Line 372
	mov	eax, DWORD PTR _pos$[ebp]
	add	eax, 2
	mov	DWORD PTR _pos$[ebp], eax
; Line 373
	jmp	SHORT $LN5@skipValue
$LN2@skipValue:
; Line 374
	mov	eax, DWORD PTR _leadByte$[ebp]
	sar	eax, 1
	and	eax, 1
	mov	ecx, DWORD PTR _pos$[ebp]
	lea	edx, DWORD PTR [ecx+eax+3]
	mov	DWORD PTR _pos$[ebp], edx
$LN5@skipValue:
; Line 377
	mov	eax, DWORD PTR _pos$[ebp]
; Line 378
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?skipValue@BytesTrie@icu_56@@CAPBEPBEH@Z ENDP		; icu_56::BytesTrie::skipValue
_TEXT	ENDS
PUBLIC	?skipValue@BytesTrie@icu_56@@CAPBEPBE@Z		; icu_56::BytesTrie::skipValue
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?skipValue@BytesTrie@icu_56@@CAPBEPBE@Z
_TEXT	SEGMENT
_leadByte$ = -8						; size = 4
_pos$ = 8						; size = 4
?skipValue@BytesTrie@icu_56@@CAPBEPBE@Z PROC		; icu_56::BytesTrie::skipValue, COMDAT
; Line 379
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 380
	mov	eax, DWORD PTR _pos$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _leadByte$[ebp], ecx
	mov	edx, DWORD PTR _pos$[ebp]
	add	edx, 1
	mov	DWORD PTR _pos$[ebp], edx
; Line 381
	mov	eax, DWORD PTR _leadByte$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pos$[ebp]
	push	ecx
	call	?skipValue@BytesTrie@icu_56@@CAPBEPBEH@Z ; icu_56::BytesTrie::skipValue
	add	esp, 8
; Line 382
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?skipValue@BytesTrie@icu_56@@CAPBEPBE@Z ENDP		; icu_56::BytesTrie::skipValue
_TEXT	ENDS
PUBLIC	?skipDelta@BytesTrie@icu_56@@CAPBEPBE@Z		; icu_56::BytesTrie::skipDelta
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?skipDelta@BytesTrie@icu_56@@CAPBEPBE@Z
_TEXT	SEGMENT
_delta$ = -8						; size = 4
_pos$ = 8						; size = 4
?skipDelta@BytesTrie@icu_56@@CAPBEPBE@Z PROC		; icu_56::BytesTrie::skipDelta, COMDAT
; Line 387
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 388
	mov	eax, DWORD PTR _pos$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _delta$[ebp], ecx
	mov	edx, DWORD PTR _pos$[ebp]
	add	edx, 1
	mov	DWORD PTR _pos$[ebp], edx
; Line 389
	cmp	DWORD PTR _delta$[ebp], 192		; 000000c0H
	jl	SHORT $LN5@skipDelta
; Line 390
	cmp	DWORD PTR _delta$[ebp], 240		; 000000f0H
	jge	SHORT $LN4@skipDelta
; Line 391
	mov	eax, DWORD PTR _pos$[ebp]
	add	eax, 1
	mov	DWORD PTR _pos$[ebp], eax
	jmp	SHORT $LN5@skipDelta
$LN4@skipDelta:
; Line 392
	cmp	DWORD PTR _delta$[ebp], 254		; 000000feH
	jge	SHORT $LN2@skipDelta
; Line 393
	mov	eax, DWORD PTR _pos$[ebp]
	add	eax, 2
	mov	DWORD PTR _pos$[ebp], eax
; Line 394
	jmp	SHORT $LN5@skipDelta
$LN2@skipDelta:
; Line 395
	mov	eax, DWORD PTR _delta$[ebp]
	and	eax, 1
	mov	ecx, DWORD PTR _pos$[ebp]
	lea	edx, DWORD PTR [ecx+eax+3]
	mov	DWORD PTR _pos$[ebp], edx
$LN5@skipDelta:
; Line 398
	mov	eax, DWORD PTR _pos$[ebp]
; Line 399
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?skipDelta@BytesTrie@icu_56@@CAPBEPBE@Z ENDP		; icu_56::BytesTrie::skipDelta
_TEXT	ENDS
PUBLIC	?valueResult@BytesTrie@icu_56@@CA?AW4UStringTrieResult@@H@Z ; icu_56::BytesTrie::valueResult
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?valueResult@BytesTrie@icu_56@@CA?AW4UStringTrieResult@@H@Z
_TEXT	SEGMENT
_node$ = 8						; size = 4
?valueResult@BytesTrie@icu_56@@CA?AW4UStringTrieResult@@H@Z PROC ; icu_56::BytesTrie::valueResult, COMDAT
; Line 401
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 402
	mov	eax, DWORD PTR _node$[ebp]
	and	eax, 1
	mov	ecx, 3
	sub	ecx, eax
	mov	eax, ecx
; Line 403
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?valueResult@BytesTrie@icu_56@@CA?AW4UStringTrieResult@@H@Z ENDP ; icu_56::BytesTrie::valueResult
_TEXT	ENDS
PUBLIC	??4Iterator@BytesTrie@icu_56@@QAEAAV012@ABV012@@Z ; icu_56::BytesTrie::Iterator::operator=
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??4Iterator@BytesTrie@icu_56@@QAEAAV012@ABV012@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___that$ = 8						; size = 4
??4Iterator@BytesTrie@icu_56@@QAEAAV012@ABV012@@Z PROC	; icu_56::BytesTrie::Iterator::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esi, DWORD PTR ___that$[ebp]
	mov	ecx, 11					; 0000000bH
	mov	edi, DWORD PTR _this$[ebp]
	rep movsd
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4Iterator@BytesTrie@icu_56@@QAEAAV012@ABV012@@Z ENDP	; icu_56::BytesTrie::Iterator::operator=
_TEXT	ENDS
PUBLIC	??1BytesTrie@icu_56@@QAE@XZ			; icu_56::BytesTrie::~BytesTrie
EXTRN	_uprv_free_56:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1BytesTrie@icu_56@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1BytesTrie@icu_56@@QAE@XZ PROC			; icu_56::BytesTrie::~BytesTrie, COMDAT
; _this$ = ecx
; File d:\mozilla\intl\icu\source\common\bytestrie.cpp
; Line 24
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 25
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_uprv_free_56
	add	esp, 4
; Line 26
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1BytesTrie@icu_56@@QAE@XZ ENDP			; icu_56::BytesTrie::~BytesTrie
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?readValue@BytesTrie@icu_56@@CAHPBEH@Z
_TEXT	SEGMENT
_value$ = -8						; size = 4
_pos$ = 8						; size = 4
_leadByte$ = 12						; size = 4
?readValue@BytesTrie@icu_56@@CAHPBEH@Z PROC		; icu_56::BytesTrie::readValue, COMDAT
; Line 30
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 32
	cmp	DWORD PTR _leadByte$[ebp], 81		; 00000051H
	jge	SHORT $LN8@readValue
; Line 33
	mov	eax, DWORD PTR _leadByte$[ebp]
	sub	eax, 16					; 00000010H
	mov	DWORD PTR _value$[ebp], eax
	jmp	$LN7@readValue
$LN8@readValue:
; Line 34
	cmp	DWORD PTR _leadByte$[ebp], 108		; 0000006cH
	jge	SHORT $LN6@readValue
; Line 35
	mov	eax, DWORD PTR _leadByte$[ebp]
	sub	eax, 81					; 00000051H
	shl	eax, 8
	mov	ecx, DWORD PTR _pos$[ebp]
	movzx	edx, BYTE PTR [ecx]
	or	eax, edx
	mov	DWORD PTR _value$[ebp], eax
	jmp	SHORT $LN7@readValue
$LN6@readValue:
; Line 36
	cmp	DWORD PTR _leadByte$[ebp], 126		; 0000007eH
	jge	SHORT $LN4@readValue
; Line 37
	mov	eax, DWORD PTR _leadByte$[ebp]
	sub	eax, 108				; 0000006cH
	shl	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _pos$[ebp]
	movzx	edx, BYTE PTR [ecx]
	shl	edx, 8
	or	eax, edx
	mov	ecx, DWORD PTR _pos$[ebp]
	movzx	edx, BYTE PTR [ecx+1]
	or	eax, edx
	mov	DWORD PTR _value$[ebp], eax
	jmp	SHORT $LN7@readValue
$LN4@readValue:
; Line 38
	cmp	DWORD PTR _leadByte$[ebp], 126		; 0000007eH
	jne	SHORT $LN2@readValue
; Line 39
	mov	eax, DWORD PTR _pos$[ebp]
	movzx	ecx, BYTE PTR [eax]
	shl	ecx, 16					; 00000010H
	mov	edx, DWORD PTR _pos$[ebp]
	movzx	eax, BYTE PTR [edx+1]
	shl	eax, 8
	or	ecx, eax
	mov	edx, DWORD PTR _pos$[ebp]
	movzx	eax, BYTE PTR [edx+2]
	or	ecx, eax
	mov	DWORD PTR _value$[ebp], ecx
; Line 40
	jmp	SHORT $LN7@readValue
$LN2@readValue:
; Line 41
	mov	eax, DWORD PTR _pos$[ebp]
	movzx	ecx, BYTE PTR [eax]
	shl	ecx, 24					; 00000018H
	mov	edx, DWORD PTR _pos$[ebp]
	movzx	eax, BYTE PTR [edx+1]
	shl	eax, 16					; 00000010H
	or	ecx, eax
	mov	edx, DWORD PTR _pos$[ebp]
	movzx	eax, BYTE PTR [edx+2]
	shl	eax, 8
	or	ecx, eax
	mov	edx, DWORD PTR _pos$[ebp]
	movzx	eax, BYTE PTR [edx+3]
	or	ecx, eax
	mov	DWORD PTR _value$[ebp], ecx
$LN7@readValue:
; Line 43
	mov	eax, DWORD PTR _value$[ebp]
; Line 44
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?readValue@BytesTrie@icu_56@@CAHPBEH@Z ENDP		; icu_56::BytesTrie::readValue
_TEXT	ENDS
PUBLIC	?jumpByDelta@BytesTrie@icu_56@@CAPBEPBE@Z	; icu_56::BytesTrie::jumpByDelta
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?jumpByDelta@BytesTrie@icu_56@@CAPBEPBE@Z
_TEXT	SEGMENT
_delta$ = -8						; size = 4
_pos$ = 8						; size = 4
?jumpByDelta@BytesTrie@icu_56@@CAPBEPBE@Z PROC		; icu_56::BytesTrie::jumpByDelta, COMDAT
; Line 47
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 48
	mov	eax, DWORD PTR _pos$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _delta$[ebp], ecx
	mov	edx, DWORD PTR _pos$[ebp]
	add	edx, 1
	mov	DWORD PTR _pos$[ebp], edx
; Line 49
	cmp	DWORD PTR _delta$[ebp], 192		; 000000c0H
	jge	SHORT $LN8@jumpByDelt
	jmp	$LN7@jumpByDelt
$LN8@jumpByDelt:
; Line 51
	cmp	DWORD PTR _delta$[ebp], 240		; 000000f0H
	jge	SHORT $LN6@jumpByDelt
; Line 52
	mov	eax, DWORD PTR _delta$[ebp]
	sub	eax, 192				; 000000c0H
	shl	eax, 8
	mov	ecx, DWORD PTR _pos$[ebp]
	movzx	edx, BYTE PTR [ecx]
	or	eax, edx
	mov	DWORD PTR _delta$[ebp], eax
	mov	eax, DWORD PTR _pos$[ebp]
	add	eax, 1
	mov	DWORD PTR _pos$[ebp], eax
	jmp	$LN7@jumpByDelt
$LN6@jumpByDelt:
; Line 53
	cmp	DWORD PTR _delta$[ebp], 254		; 000000feH
	jge	SHORT $LN4@jumpByDelt
; Line 54
	mov	eax, DWORD PTR _delta$[ebp]
	sub	eax, 240				; 000000f0H
	shl	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _pos$[ebp]
	movzx	edx, BYTE PTR [ecx]
	shl	edx, 8
	or	eax, edx
	mov	ecx, DWORD PTR _pos$[ebp]
	movzx	edx, BYTE PTR [ecx+1]
	or	eax, edx
	mov	DWORD PTR _delta$[ebp], eax
; Line 55
	mov	eax, DWORD PTR _pos$[ebp]
	add	eax, 2
	mov	DWORD PTR _pos$[ebp], eax
	jmp	SHORT $LN7@jumpByDelt
$LN4@jumpByDelt:
; Line 56
	cmp	DWORD PTR _delta$[ebp], 254		; 000000feH
	jne	SHORT $LN2@jumpByDelt
; Line 57
	mov	eax, DWORD PTR _pos$[ebp]
	movzx	ecx, BYTE PTR [eax]
	shl	ecx, 16					; 00000010H
	mov	edx, DWORD PTR _pos$[ebp]
	movzx	eax, BYTE PTR [edx+1]
	shl	eax, 8
	or	ecx, eax
	mov	edx, DWORD PTR _pos$[ebp]
	movzx	eax, BYTE PTR [edx+2]
	or	ecx, eax
	mov	DWORD PTR _delta$[ebp], ecx
; Line 58
	mov	eax, DWORD PTR _pos$[ebp]
	add	eax, 3
	mov	DWORD PTR _pos$[ebp], eax
; Line 59
	jmp	SHORT $LN7@jumpByDelt
$LN2@jumpByDelt:
; Line 60
	mov	eax, DWORD PTR _pos$[ebp]
	movzx	ecx, BYTE PTR [eax]
	shl	ecx, 24					; 00000018H
	mov	edx, DWORD PTR _pos$[ebp]
	movzx	eax, BYTE PTR [edx+1]
	shl	eax, 16					; 00000010H
	or	ecx, eax
	mov	edx, DWORD PTR _pos$[ebp]
	movzx	eax, BYTE PTR [edx+2]
	shl	eax, 8
	or	ecx, eax
	mov	edx, DWORD PTR _pos$[ebp]
	movzx	eax, BYTE PTR [edx+3]
	or	ecx, eax
	mov	DWORD PTR _delta$[ebp], ecx
; Line 61
	mov	eax, DWORD PTR _pos$[ebp]
	add	eax, 4
	mov	DWORD PTR _pos$[ebp], eax
$LN7@jumpByDelt:
; Line 63
	mov	eax, DWORD PTR _pos$[ebp]
	add	eax, DWORD PTR _delta$[ebp]
; Line 64
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?jumpByDelta@BytesTrie@icu_56@@CAPBEPBE@Z ENDP		; icu_56::BytesTrie::jumpByDelta
_TEXT	ENDS
PUBLIC	?current@BytesTrie@icu_56@@QBE?AW4UStringTrieResult@@XZ ; icu_56::BytesTrie::current
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?current@BytesTrie@icu_56@@QBE?AW4UStringTrieResult@@XZ
_TEXT	SEGMENT
tv72 = -232						; size = 4
_node$32102 = -32					; size = 4
_pos$ = -20						; size = 4
_this$ = -8						; size = 4
?current@BytesTrie@icu_56@@QBE?AW4UStringTrieResult@@XZ PROC ; icu_56::BytesTrie::current, COMDAT
; _this$ = ecx
; Line 67
	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 68
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _pos$[ebp], ecx
; Line 69
	cmp	DWORD PTR _pos$[ebp], 0
	jne	SHORT $LN2@current
; Line 70
	xor	eax, eax
	jmp	SHORT $LN3@current
; Line 71
	jmp	SHORT $LN3@current
$LN2@current:
; Line 74
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jge	SHORT $LN5@current
	mov	ecx, DWORD PTR _pos$[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	DWORD PTR _node$32102[ebp], edx
	cmp	DWORD PTR _node$32102[ebp], 32		; 00000020H
	jl	SHORT $LN5@current
	mov	eax, DWORD PTR _node$32102[ebp]
	push	eax
	call	?valueResult@BytesTrie@icu_56@@CA?AW4UStringTrieResult@@H@Z ; icu_56::BytesTrie::valueResult
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN6@current
$LN5@current:
	mov	DWORD PTR tv72[ebp], 1
$LN6@current:
	mov	eax, DWORD PTR tv72[ebp]
$LN3@current:
; Line 76
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?current@BytesTrie@icu_56@@QBE?AW4UStringTrieResult@@XZ ENDP ; icu_56::BytesTrie::current
_TEXT	ENDS
PUBLIC	??_C@_1CI@CMPGJOKO@?$AAn?$AAo?$AAd?$AAe?$AA?$DO?$AA?$DN?$AAk?$AAM?$AAi?$AAn?$AAV?$AAa?$AAl?$AAu?$AAe?$AAL?$AAe?$AAa?$AAd?$AA?$AA@ ; `string'
PUBLIC	??_C@_1GA@MKOCANFD@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@ ; `string'
PUBLIC	?__LINE__Var@?1??branchNext@BytesTrie@icu_56@@AAE?AW4UStringTrieResult@@PBEHH@Z@4JA ; `icu_56::BytesTrie::branchNext'::`2'::__LINE__Var
PUBLIC	?branchNext@BytesTrie@icu_56@@AAE?AW4UStringTrieResult@@PBEHH@Z ; icu_56::BytesTrie::branchNext
EXTRN	__imp___wassert:PROC
;	COMDAT ??_C@_1CI@CMPGJOKO@?$AAn?$AAo?$AAd?$AAe?$AA?$DO?$AA?$DN?$AAk?$AAM?$AAi?$AAn?$AAV?$AAa?$AAl?$AAu?$AAe?$AAL?$AAe?$AAa?$AAd?$AA?$AA@
CONST	SEGMENT
??_C@_1CI@CMPGJOKO@?$AAn?$AAo?$AAd?$AAe?$AA?$DO?$AA?$DN?$AAk?$AAM?$AAi?$AAn?$AAV?$AAa?$AAl?$AAu?$AAe?$AAL?$AAe?$AAa?$AAd?$AA?$AA@ DB 'n'
	DB	00H, 'o', 00H, 'd', 00H, 'e', 00H, '>', 00H, '=', 00H, 'k', 00H
	DB	'M', 00H, 'i', 00H, 'n', 00H, 'V', 00H, 'a', 00H, 'l', 00H, 'u'
	DB	00H, 'e', 00H, 'L', 00H, 'e', 00H, 'a', 00H, 'd', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1GA@MKOCANFD@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@
CONST	SEGMENT
??_C@_1GA@MKOCANFD@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@ DB 'd'
	DB	00H, ':', 00H, '\', 00H, 'm', 00H, 'o', 00H, 'z', 00H, 'i', 00H
	DB	'l', 00H, 'l', 00H, 'a', 00H, '\', 00H, 'i', 00H, 'n', 00H, 't'
	DB	00H, 'l', 00H, '\', 00H, 'i', 00H, 'c', 00H, 'u', 00H, '\', 00H
	DB	's', 00H, 'o', 00H, 'u', 00H, 'r', 00H, 'c', 00H, 'e', 00H, '\'
	DB	00H, 'c', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'o', 00H, 'n', 00H
	DB	'\', 00H, 'b', 00H, 'y', 00H, 't', 00H, 'e', 00H, 's', 00H, 't'
	DB	00H, 'r', 00H, 'i', 00H, 'e', 00H, '.', 00H, 'c', 00H, 'p', 00H
	DB	'p', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??branchNext@BytesTrie@icu_56@@AAE?AW4UStringTrieResult@@PBEHH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??branchNext@BytesTrie@icu_56@@AAE?AW4UStringTrieResult@@PBEHH@Z@4JA DD 04fH ; `icu_56::BytesTrie::branchNext'::`2'::__LINE__Var
; Function compile flags: /Odtp /RTCsu /ZI
_DATA	ENDS
;	COMDAT ?branchNext@BytesTrie@icu_56@@AAE?AW4UStringTrieResult@@PBEHH@Z
_TEXT	SEGMENT
tv193 = -256						; size = 4
tv186 = -256						; size = 4
tv177 = -256						; size = 4
tv84 = -256						; size = 4
tv72 = -256						; size = 4
_node$32137 = -56					; size = 4
_delta$32127 = -44					; size = 4
_node$32120 = -32					; size = 4
_result$32119 = -20					; size = 4
_this$ = -8						; size = 4
_pos$ = 8						; size = 4
_length$ = 12						; size = 4
_inByte$ = 16						; size = 4
?branchNext@BytesTrie@icu_56@@AAE?AW4UStringTrieResult@@PBEHH@Z PROC ; icu_56::BytesTrie::branchNext, COMDAT
; _this$ = ecx
; Line 79
	push	ebp
	mov	ebp, esp
	sub	esp, 256				; 00000100H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-256]
	mov	ecx, 64					; 00000040H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 81
	cmp	DWORD PTR _length$[ebp], 0
	jne	SHORT $LN21@branchNext
; Line 82
	mov	eax, DWORD PTR _pos$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _length$[ebp], ecx
	mov	edx, DWORD PTR _pos$[ebp]
	add	edx, 1
	mov	DWORD PTR _pos$[ebp], edx
$LN21@branchNext:
; Line 84
	mov	eax, DWORD PTR _length$[ebp]
	add	eax, 1
	mov	DWORD PTR _length$[ebp], eax
$LN20@branchNext:
; Line 87
	cmp	DWORD PTR _length$[ebp], 5
	jle	SHORT $LN16@branchNext
; Line 88
	mov	eax, DWORD PTR _pos$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _inByte$[ebp]
	mov	eax, DWORD PTR _pos$[ebp]
	add	eax, 1
	mov	DWORD PTR _pos$[ebp], eax
	cmp	edx, ecx
	jge	SHORT $LN24@branchNext
	mov	DWORD PTR tv72[ebp], 1
	jmp	SHORT $LN25@branchNext
$LN24@branchNext:
	mov	DWORD PTR tv72[ebp], 0
$LN25@branchNext:
	cmp	DWORD PTR tv72[ebp], 0
	je	SHORT $LN18@branchNext
; Line 89
	mov	eax, DWORD PTR _length$[ebp]
	sar	eax, 1
	mov	DWORD PTR _length$[ebp], eax
; Line 90
	mov	eax, DWORD PTR _pos$[ebp]
	push	eax
	call	?jumpByDelta@BytesTrie@icu_56@@CAPBEPBE@Z ; icu_56::BytesTrie::jumpByDelta
	add	esp, 4
	mov	DWORD PTR _pos$[ebp], eax
; Line 91
	jmp	SHORT $LN17@branchNext
$LN18@branchNext:
; Line 92
	mov	eax, DWORD PTR _length$[ebp]
	sar	eax, 1
	mov	ecx, DWORD PTR _length$[ebp]
	sub	ecx, eax
	mov	DWORD PTR _length$[ebp], ecx
; Line 93
	mov	eax, DWORD PTR _pos$[ebp]
	push	eax
	call	?skipDelta@BytesTrie@icu_56@@CAPBEPBE@Z	; icu_56::BytesTrie::skipDelta
	add	esp, 4
	mov	DWORD PTR _pos$[ebp], eax
$LN17@branchNext:
; Line 95
	jmp	SHORT $LN20@branchNext
$LN16@branchNext:
; Line 100
	mov	eax, DWORD PTR _pos$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _inByte$[ebp]
	mov	eax, DWORD PTR _pos$[ebp]
	add	eax, 1
	mov	DWORD PTR _pos$[ebp], eax
	cmp	edx, ecx
	jne	SHORT $LN26@branchNext
	mov	DWORD PTR tv84[ebp], 1
	jmp	SHORT $LN27@branchNext
$LN26@branchNext:
	mov	DWORD PTR tv84[ebp], 0
$LN27@branchNext:
	cmp	DWORD PTR tv84[ebp], 0
	je	$LN13@branchNext
; Line 102
	mov	eax, DWORD PTR _pos$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _node$32120[ebp], ecx
; Line 103
	cmp	DWORD PTR _node$32120[ebp], 32		; 00000020H
	jge	SHORT $LN28@branchNext
	mov	eax, DWORD PTR ?__LINE__Var@?1??branchNext@BytesTrie@icu_56@@AAE?AW4UStringTrieResult@@PBEHH@Z@4JA
	add	eax, 24					; 00000018H
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1GA@MKOCANFD@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@
	push	OFFSET ??_C@_1CI@CMPGJOKO@?$AAn?$AAo?$AAd?$AAe?$AA?$DO?$AA?$DN?$AAk?$AAM?$AAi?$AAn?$AAV?$AAa?$AAl?$AAu?$AAe?$AAL?$AAe?$AAa?$AAd?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN28@branchNext:
; Line 104
	mov	eax, DWORD PTR _node$32120[ebp]
	and	eax, 1
	je	SHORT $LN12@branchNext
; Line 106
	mov	DWORD PTR _result$32119[ebp], 2
; Line 107
	jmp	$LN11@branchNext
$LN12@branchNext:
; Line 109
	mov	eax, DWORD PTR _pos$[ebp]
	add	eax, 1
	mov	DWORD PTR _pos$[ebp], eax
; Line 111
	mov	eax, DWORD PTR _node$32120[ebp]
	sar	eax, 1
	mov	DWORD PTR _node$32120[ebp], eax
; Line 113
	cmp	DWORD PTR _node$32120[ebp], 81		; 00000051H
	jge	SHORT $LN10@branchNext
; Line 114
	mov	eax, DWORD PTR _node$32120[ebp]
	sub	eax, 16					; 00000010H
	mov	DWORD PTR _delta$32127[ebp], eax
	jmp	$LN9@branchNext
$LN10@branchNext:
; Line 115
	cmp	DWORD PTR _node$32120[ebp], 108		; 0000006cH
	jge	SHORT $LN8@branchNext
; Line 116
	mov	eax, DWORD PTR _node$32120[ebp]
	sub	eax, 81					; 00000051H
	shl	eax, 8
	mov	ecx, DWORD PTR _pos$[ebp]
	movzx	edx, BYTE PTR [ecx]
	or	eax, edx
	mov	DWORD PTR _delta$32127[ebp], eax
	mov	eax, DWORD PTR _pos$[ebp]
	add	eax, 1
	mov	DWORD PTR _pos$[ebp], eax
	jmp	$LN9@branchNext
$LN8@branchNext:
; Line 117
	cmp	DWORD PTR _node$32120[ebp], 126		; 0000007eH
	jge	SHORT $LN6@branchNext
; Line 118
	mov	eax, DWORD PTR _node$32120[ebp]
	sub	eax, 108				; 0000006cH
	shl	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _pos$[ebp]
	movzx	edx, BYTE PTR [ecx]
	shl	edx, 8
	or	eax, edx
	mov	ecx, DWORD PTR _pos$[ebp]
	movzx	edx, BYTE PTR [ecx+1]
	or	eax, edx
	mov	DWORD PTR _delta$32127[ebp], eax
; Line 119
	mov	eax, DWORD PTR _pos$[ebp]
	add	eax, 2
	mov	DWORD PTR _pos$[ebp], eax
	jmp	SHORT $LN9@branchNext
$LN6@branchNext:
; Line 120
	cmp	DWORD PTR _node$32120[ebp], 126		; 0000007eH
	jne	SHORT $LN4@branchNext
; Line 121
	mov	eax, DWORD PTR _pos$[ebp]
	movzx	ecx, BYTE PTR [eax]
	shl	ecx, 16					; 00000010H
	mov	edx, DWORD PTR _pos$[ebp]
	movzx	eax, BYTE PTR [edx+1]
	shl	eax, 8
	or	ecx, eax
	mov	edx, DWORD PTR _pos$[ebp]
	movzx	eax, BYTE PTR [edx+2]
	or	ecx, eax
	mov	DWORD PTR _delta$32127[ebp], ecx
; Line 122
	mov	eax, DWORD PTR _pos$[ebp]
	add	eax, 3
	mov	DWORD PTR _pos$[ebp], eax
; Line 123
	jmp	SHORT $LN9@branchNext
$LN4@branchNext:
; Line 124
	mov	eax, DWORD PTR _pos$[ebp]
	movzx	ecx, BYTE PTR [eax]
	shl	ecx, 24					; 00000018H
	mov	edx, DWORD PTR _pos$[ebp]
	movzx	eax, BYTE PTR [edx+1]
	shl	eax, 16					; 00000010H
	or	ecx, eax
	mov	edx, DWORD PTR _pos$[ebp]
	movzx	eax, BYTE PTR [edx+2]
	shl	eax, 8
	or	ecx, eax
	mov	edx, DWORD PTR _pos$[ebp]
	movzx	eax, BYTE PTR [edx+3]
	or	ecx, eax
	mov	DWORD PTR _delta$32127[ebp], ecx
; Line 125
	mov	eax, DWORD PTR _pos$[ebp]
	add	eax, 4
	mov	DWORD PTR _pos$[ebp], eax
$LN9@branchNext:
; Line 128
	mov	eax, DWORD PTR _pos$[ebp]
	add	eax, DWORD PTR _delta$32127[ebp]
	mov	DWORD PTR _pos$[ebp], eax
; Line 129
	mov	eax, DWORD PTR _pos$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _node$32120[ebp], ecx
; Line 130
	cmp	DWORD PTR _node$32120[ebp], 32		; 00000020H
	jl	SHORT $LN29@branchNext
	mov	eax, DWORD PTR _node$32120[ebp]
	push	eax
	call	?valueResult@BytesTrie@icu_56@@CA?AW4UStringTrieResult@@H@Z ; icu_56::BytesTrie::valueResult
	add	esp, 4
	mov	DWORD PTR tv177[ebp], eax
	jmp	SHORT $LN30@branchNext
$LN29@branchNext:
	mov	DWORD PTR tv177[ebp], 1
$LN30@branchNext:
	mov	ecx, DWORD PTR tv177[ebp]
	mov	DWORD PTR _result$32119[ebp], ecx
$LN11@branchNext:
; Line 132
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pos$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 133
	mov	eax, DWORD PTR _result$32119[ebp]
	jmp	$LN22@branchNext
$LN13@branchNext:
; Line 135
	mov	eax, DWORD PTR _length$[ebp]
	sub	eax, 1
	mov	DWORD PTR _length$[ebp], eax
; Line 136
	mov	eax, DWORD PTR _pos$[ebp]
	push	eax
	call	?skipValue@BytesTrie@icu_56@@CAPBEPBE@Z	; icu_56::BytesTrie::skipValue
	add	esp, 4
	mov	DWORD PTR _pos$[ebp], eax
; Line 137
	cmp	DWORD PTR _length$[ebp], 1
	jg	$LN16@branchNext
; Line 138
	mov	eax, DWORD PTR _pos$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _inByte$[ebp]
	mov	eax, DWORD PTR _pos$[ebp]
	add	eax, 1
	mov	DWORD PTR _pos$[ebp], eax
	cmp	edx, ecx
	jne	SHORT $LN31@branchNext
	mov	DWORD PTR tv186[ebp], 1
	jmp	SHORT $LN32@branchNext
$LN31@branchNext:
	mov	DWORD PTR tv186[ebp], 0
$LN32@branchNext:
	cmp	DWORD PTR tv186[ebp], 0
	je	SHORT $LN2@branchNext
; Line 139
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pos$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 140
	mov	eax, DWORD PTR _pos$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _node$32137[ebp], ecx
; Line 141
	cmp	DWORD PTR _node$32137[ebp], 32		; 00000020H
	jl	SHORT $LN33@branchNext
	mov	eax, DWORD PTR _node$32137[ebp]
	push	eax
	call	?valueResult@BytesTrie@icu_56@@CA?AW4UStringTrieResult@@H@Z ; icu_56::BytesTrie::valueResult
	add	esp, 4
	mov	DWORD PTR tv193[ebp], eax
	jmp	SHORT $LN34@branchNext
$LN33@branchNext:
	mov	DWORD PTR tv193[ebp], 1
$LN34@branchNext:
	mov	eax, DWORD PTR tv193[ebp]
	jmp	SHORT $LN22@branchNext
; Line 142
	jmp	SHORT $LN22@branchNext
$LN2@branchNext:
; Line 143
	mov	ecx, DWORD PTR _this$[ebp]
	call	?stop@BytesTrie@icu_56@@AAEXXZ		; icu_56::BytesTrie::stop
; Line 144
	xor	eax, eax
$LN22@branchNext:
; Line 146
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 256				; 00000100H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?branchNext@BytesTrie@icu_56@@AAE?AW4UStringTrieResult@@PBEHH@Z ENDP ; icu_56::BytesTrie::branchNext
_TEXT	ENDS
PUBLIC	??_C@_1CG@NHPHJHE@?$AA?$CK?$AAp?$AAo?$AAs?$AA?$DM?$AAk?$AAM?$AAi?$AAn?$AAV?$AAa?$AAl?$AAu?$AAe?$AAL?$AAe?$AAa?$AAd?$AA?$AA@ ; `string'
PUBLIC	?__LINE__Var@?1??nextImpl@BytesTrie@icu_56@@AAE?AW4UStringTrieResult@@PBEH@Z@4JA ; `icu_56::BytesTrie::nextImpl'::`2'::__LINE__Var
;	COMDAT ??_C@_1CG@NHPHJHE@?$AA?$CK?$AAp?$AAo?$AAs?$AA?$DM?$AAk?$AAM?$AAi?$AAn?$AAV?$AAa?$AAl?$AAu?$AAe?$AAL?$AAe?$AAa?$AAd?$AA?$AA@
CONST	SEGMENT
??_C@_1CG@NHPHJHE@?$AA?$CK?$AAp?$AAo?$AAs?$AA?$DM?$AAk?$AAM?$AAi?$AAn?$AAV?$AAa?$AAl?$AAu?$AAe?$AAL?$AAe?$AAa?$AAd?$AA?$AA@ DB '*'
	DB	00H, 'p', 00H, 'o', 00H, 's', 00H, '<', 00H, 'k', 00H, 'M', 00H
	DB	'i', 00H, 'n', 00H, 'V', 00H, 'a', 00H, 'l', 00H, 'u', 00H, 'e'
	DB	00H, 'L', 00H, 'e', 00H, 'a', 00H, 'd', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??nextImpl@BytesTrie@icu_56@@AAE?AW4UStringTrieResult@@PBEH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??nextImpl@BytesTrie@icu_56@@AAE?AW4UStringTrieResult@@PBEH@Z@4JA DD 095H ; `icu_56::BytesTrie::nextImpl'::`2'::__LINE__Var
; Function compile flags: /Odtp /RTCsu /ZI
_DATA	ENDS
;	COMDAT ?nextImpl@BytesTrie@icu_56@@AAE?AW4UStringTrieResult@@PBEH@Z
_TEXT	SEGMENT
tv87 = -232						; size = 4
tv77 = -232						; size = 4
_length$32151 = -32					; size = 4
_node$32147 = -20					; size = 4
_this$ = -8						; size = 4
_pos$ = 8						; size = 4
_inByte$ = 12						; size = 4
?nextImpl@BytesTrie@icu_56@@AAE?AW4UStringTrieResult@@PBEH@Z PROC ; icu_56::BytesTrie::nextImpl, COMDAT
; _this$ = ecx
; Line 149
	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
$LN10@nextImpl:
; Line 151
	mov	eax, DWORD PTR _pos$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _node$32147[ebp], ecx
	mov	edx, DWORD PTR _pos$[ebp]
	add	edx, 1
	mov	DWORD PTR _pos$[ebp], edx
; Line 152
	cmp	DWORD PTR _node$32147[ebp], 16		; 00000010H
	jge	SHORT $LN8@nextImpl
; Line 153
	mov	eax, DWORD PTR _inByte$[ebp]
	push	eax
	mov	ecx, DWORD PTR _node$32147[ebp]
	push	ecx
	mov	edx, DWORD PTR _pos$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?branchNext@BytesTrie@icu_56@@AAE?AW4UStringTrieResult@@PBEHH@Z ; icu_56::BytesTrie::branchNext
	jmp	$LN11@nextImpl
	jmp	$LN7@nextImpl
$LN8@nextImpl:
; Line 154
	cmp	DWORD PTR _node$32147[ebp], 32		; 00000020H
	jge	$LN6@nextImpl
; Line 156
	mov	eax, DWORD PTR _node$32147[ebp]
	sub	eax, 16					; 00000010H
	mov	DWORD PTR _length$32151[ebp], eax
; Line 157
	mov	eax, DWORD PTR _pos$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _inByte$[ebp]
	mov	eax, DWORD PTR _pos$[ebp]
	add	eax, 1
	mov	DWORD PTR _pos$[ebp], eax
	cmp	edx, ecx
	jne	SHORT $LN13@nextImpl
	mov	DWORD PTR tv77[ebp], 1
	jmp	SHORT $LN14@nextImpl
$LN13@nextImpl:
	mov	DWORD PTR tv77[ebp], 0
$LN14@nextImpl:
	cmp	DWORD PTR tv77[ebp], 0
	je	SHORT $LN5@nextImpl
; Line 158
	mov	eax, DWORD PTR _length$32151[ebp]
	sub	eax, 1
	mov	DWORD PTR _length$32151[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _length$32151[ebp]
	mov	DWORD PTR [ecx+12], edx
; Line 159
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pos$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 161
	cmp	DWORD PTR _length$32151[ebp], 0
	jge	SHORT $LN15@nextImpl
	mov	eax, DWORD PTR _pos$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _node$32147[ebp], ecx
	cmp	DWORD PTR _node$32147[ebp], 32		; 00000020H
	jl	SHORT $LN15@nextImpl
	mov	edx, DWORD PTR _node$32147[ebp]
	push	edx
	call	?valueResult@BytesTrie@icu_56@@CA?AW4UStringTrieResult@@H@Z ; icu_56::BytesTrie::valueResult
	add	esp, 4
	mov	DWORD PTR tv87[ebp], eax
	jmp	SHORT $LN16@nextImpl
$LN15@nextImpl:
	mov	DWORD PTR tv87[ebp], 1
$LN16@nextImpl:
	mov	eax, DWORD PTR tv87[ebp]
	jmp	SHORT $LN11@nextImpl
; Line 162
	jmp	SHORT $LN4@nextImpl
$LN5@nextImpl:
; Line 164
	jmp	SHORT $LN9@nextImpl
$LN4@nextImpl:
; Line 165
	jmp	SHORT $LN7@nextImpl
$LN6@nextImpl:
; Line 166
	mov	eax, DWORD PTR _node$32147[ebp]
	and	eax, 1
	je	SHORT $LN2@nextImpl
; Line 168
	jmp	SHORT $LN9@nextImpl
; Line 169
	jmp	SHORT $LN7@nextImpl
$LN2@nextImpl:
; Line 171
	mov	eax, DWORD PTR _node$32147[ebp]
	push	eax
	mov	ecx, DWORD PTR _pos$[ebp]
	push	ecx
	call	?skipValue@BytesTrie@icu_56@@CAPBEPBEH@Z ; icu_56::BytesTrie::skipValue
	add	esp, 8
	mov	DWORD PTR _pos$[ebp], eax
; Line 173
	mov	eax, DWORD PTR _pos$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 32					; 00000020H
	jl	SHORT $LN7@nextImpl
	mov	edx, DWORD PTR ?__LINE__Var@?1??nextImpl@BytesTrie@icu_56@@AAE?AW4UStringTrieResult@@PBEH@Z@4JA
	add	edx, 24					; 00000018H
	mov	esi, esp
	push	edx
	push	OFFSET ??_C@_1GA@MKOCANFD@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@
	push	OFFSET ??_C@_1CG@NHPHJHE@?$AA?$CK?$AAp?$AAo?$AAs?$AA?$DM?$AAk?$AAM?$AAi?$AAn?$AAV?$AAa?$AAl?$AAu?$AAe?$AAL?$AAe?$AAa?$AAd?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN7@nextImpl:
; Line 175
	jmp	$LN10@nextImpl
$LN9@nextImpl:
; Line 176
	mov	ecx, DWORD PTR _this$[ebp]
	call	?stop@BytesTrie@icu_56@@AAEXXZ		; icu_56::BytesTrie::stop
; Line 177
	xor	eax, eax
$LN11@nextImpl:
; Line 178
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?nextImpl@BytesTrie@icu_56@@AAE?AW4UStringTrieResult@@PBEH@Z ENDP ; icu_56::BytesTrie::nextImpl
_TEXT	ENDS
PUBLIC	?next@BytesTrie@icu_56@@QAE?AW4UStringTrieResult@@H@Z ; icu_56::BytesTrie::next
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?next@BytesTrie@icu_56@@QAE?AW4UStringTrieResult@@H@Z
_TEXT	SEGMENT
tv83 = -244						; size = 4
tv73 = -244						; size = 4
_node$32170 = -44					; size = 4
_length$ = -32						; size = 4
_pos$ = -20						; size = 4
_this$ = -8						; size = 4
_inByte$ = 8						; size = 4
?next@BytesTrie@icu_56@@QAE?AW4UStringTrieResult@@H@Z PROC ; icu_56::BytesTrie::next, COMDAT
; _this$ = ecx
; Line 181
	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 182
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _pos$[ebp], ecx
; Line 183
	cmp	DWORD PTR _pos$[ebp], 0
	jne	SHORT $LN5@next
; Line 184
	xor	eax, eax
	jmp	$LN6@next
$LN5@next:
; Line 186
	cmp	DWORD PTR _inByte$[ebp], 0
	jge	SHORT $LN4@next
; Line 187
	mov	eax, DWORD PTR _inByte$[ebp]
	add	eax, 256				; 00000100H
	mov	DWORD PTR _inByte$[ebp], eax
$LN4@next:
; Line 189
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _length$[ebp], ecx
; Line 190
	cmp	DWORD PTR _length$[ebp], 0
	jl	$LN3@next
; Line 192
	mov	eax, DWORD PTR _pos$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _inByte$[ebp]
	mov	eax, DWORD PTR _pos$[ebp]
	add	eax, 1
	mov	DWORD PTR _pos$[ebp], eax
	cmp	edx, ecx
	jne	SHORT $LN8@next
	mov	DWORD PTR tv73[ebp], 1
	jmp	SHORT $LN9@next
$LN8@next:
	mov	DWORD PTR tv73[ebp], 0
$LN9@next:
	cmp	DWORD PTR tv73[ebp], 0
	je	SHORT $LN2@next
; Line 193
	mov	eax, DWORD PTR _length$[ebp]
	sub	eax, 1
	mov	DWORD PTR _length$[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _length$[ebp]
	mov	DWORD PTR [ecx+12], edx
; Line 194
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pos$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 197
	cmp	DWORD PTR _length$[ebp], 0
	jge	SHORT $LN10@next
	mov	eax, DWORD PTR _pos$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _node$32170[ebp], ecx
	cmp	DWORD PTR _node$32170[ebp], 32		; 00000020H
	jl	SHORT $LN10@next
	mov	edx, DWORD PTR _node$32170[ebp]
	push	edx
	call	?valueResult@BytesTrie@icu_56@@CA?AW4UStringTrieResult@@H@Z ; icu_56::BytesTrie::valueResult
	add	esp, 4
	mov	DWORD PTR tv83[ebp], eax
	jmp	SHORT $LN11@next
$LN10@next:
	mov	DWORD PTR tv83[ebp], 1
$LN11@next:
	mov	eax, DWORD PTR tv83[ebp]
	jmp	SHORT $LN6@next
; Line 198
	jmp	SHORT $LN3@next
$LN2@next:
; Line 199
	mov	ecx, DWORD PTR _this$[ebp]
	call	?stop@BytesTrie@icu_56@@AAEXXZ		; icu_56::BytesTrie::stop
; Line 200
	xor	eax, eax
	jmp	SHORT $LN6@next
$LN3@next:
; Line 203
	mov	eax, DWORD PTR _inByte$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pos$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?nextImpl@BytesTrie@icu_56@@AAE?AW4UStringTrieResult@@PBEH@Z ; icu_56::BytesTrie::nextImpl
$LN6@next:
; Line 204
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?next@BytesTrie@icu_56@@QAE?AW4UStringTrieResult@@H@Z ENDP ; icu_56::BytesTrie::next
_TEXT	ENDS
PUBLIC	?__LINE__Var@?1??next@BytesTrie@icu_56@@QAE?AW4UStringTrieResult@@PBDH@Z@4JA ; `icu_56::BytesTrie::next'::`2'::__LINE__Var
PUBLIC	?next@BytesTrie@icu_56@@QAE?AW4UStringTrieResult@@PBDH@Z ; icu_56::BytesTrie::next
;	COMDAT ?__LINE__Var@?1??next@BytesTrie@icu_56@@QAE?AW4UStringTrieResult@@PBDH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??next@BytesTrie@icu_56@@QAE?AW4UStringTrieResult@@PBDH@Z@4JA DD 0cfH ; `icu_56::BytesTrie::next'::`2'::__LINE__Var
; Function compile flags: /Odtp /RTCsu /ZI
_DATA	ENDS
;	COMDAT ?next@BytesTrie@icu_56@@QAE?AW4UStringTrieResult@@PBDH@Z
_TEXT	SEGMENT
tv162 = -292						; size = 4
tv138 = -292						; size = 4
tv90 = -292						; size = 4
tv81 = -292						; size = 4
tv70 = -292						; size = 4
_result$32206 = -92					; size = 4
_node$32204 = -80					; size = 4
_node$32198 = -68					; size = 4
_node$32190 = -56					; size = 4
_inByte$32184 = -44					; size = 4
_length$ = -32						; size = 4
_pos$ = -20						; size = 4
_this$ = -8						; size = 4
_s$ = 8							; size = 4
_sLength$ = 12						; size = 4
?next@BytesTrie@icu_56@@QAE?AW4UStringTrieResult@@PBDH@Z PROC ; icu_56::BytesTrie::next, COMDAT
; _this$ = ecx
; Line 207
	push	ebp
	mov	ebp, esp
	sub	esp, 292				; 00000124H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-292]
	mov	ecx, 73					; 00000049H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 208
	cmp	DWORD PTR _sLength$[ebp], 0
	jge	SHORT $LN34@next@2
	mov	eax, DWORD PTR _s$[ebp]
	movsx	ecx, BYTE PTR [eax]
	neg	ecx
	sbb	ecx, ecx
	add	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	jmp	SHORT $LN35@next@2
$LN34@next@2:
	xor	edx, edx
	cmp	DWORD PTR _sLength$[ebp], 0
	sete	dl
	mov	DWORD PTR tv70[ebp], edx
$LN35@next@2:
	cmp	DWORD PTR tv70[ebp], 0
	je	SHORT $LN31@next@2
; Line 210
	mov	ecx, DWORD PTR _this$[ebp]
	call	?current@BytesTrie@icu_56@@QBE?AW4UStringTrieResult@@XZ ; icu_56::BytesTrie::current
	jmp	$LN32@next@2
$LN31@next@2:
; Line 212
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _pos$[ebp], ecx
; Line 213
	cmp	DWORD PTR _pos$[ebp], 0
	jne	SHORT $LN30@next@2
; Line 214
	xor	eax, eax
	jmp	$LN32@next@2
$LN30@next@2:
; Line 216
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _length$[ebp], ecx
$LN29@next@2:
; Line 221
	cmp	DWORD PTR _sLength$[ebp], 0
	jge	$LN20@next@2
$LN26@next@2:
; Line 223
	mov	eax, DWORD PTR _s$[ebp]
	movsx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _inByte$32184[ebp], ecx
	mov	edx, DWORD PTR _inByte$32184[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	add	eax, 1
	mov	DWORD PTR _s$[ebp], eax
	test	edx, edx
	jne	SHORT $LN36@next@2
	mov	DWORD PTR tv81[ebp], 1
	jmp	SHORT $LN37@next@2
$LN36@next@2:
	mov	DWORD PTR tv81[ebp], 0
$LN37@next@2:
	cmp	DWORD PTR tv81[ebp], 0
	je	SHORT $LN24@next@2
; Line 224
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _length$[ebp]
	mov	DWORD PTR [eax+12], ecx
; Line 225
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pos$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 228
	cmp	DWORD PTR _length$[ebp], 0
	jge	SHORT $LN38@next@2
	mov	eax, DWORD PTR _pos$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _node$32190[ebp], ecx
	cmp	DWORD PTR _node$32190[ebp], 32		; 00000020H
	jl	SHORT $LN38@next@2
	mov	edx, DWORD PTR _node$32190[ebp]
	push	edx
	call	?valueResult@BytesTrie@icu_56@@CA?AW4UStringTrieResult@@H@Z ; icu_56::BytesTrie::valueResult
	add	esp, 4
	mov	DWORD PTR tv90[ebp], eax
	jmp	SHORT $LN39@next@2
$LN38@next@2:
	mov	DWORD PTR tv90[ebp], 1
$LN39@next@2:
	mov	eax, DWORD PTR tv90[ebp]
	jmp	$LN32@next@2
$LN24@next@2:
; Line 230
	cmp	DWORD PTR _length$[ebp], 0
	jge	SHORT $LN23@next@2
; Line 231
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _length$[ebp]
	mov	DWORD PTR [eax+12], ecx
; Line 232
	jmp	SHORT $LN25@next@2
$LN23@next@2:
; Line 234
	mov	eax, DWORD PTR _pos$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	DWORD PTR _inByte$32184[ebp], ecx
	je	SHORT $LN22@next@2
; Line 235
	mov	ecx, DWORD PTR _this$[ebp]
	call	?stop@BytesTrie@icu_56@@AAEXXZ		; icu_56::BytesTrie::stop
; Line 236
	xor	eax, eax
	jmp	$LN32@next@2
$LN22@next@2:
; Line 238
	mov	eax, DWORD PTR _pos$[ebp]
	add	eax, 1
	mov	DWORD PTR _pos$[ebp], eax
; Line 239
	mov	eax, DWORD PTR _length$[ebp]
	sub	eax, 1
	mov	DWORD PTR _length$[ebp], eax
; Line 240
	jmp	$LN26@next@2
$LN25@next@2:
	jmp	$LN15@next@2
$LN20@next@2:
; Line 243
	cmp	DWORD PTR _sLength$[ebp], 0
	jne	SHORT $LN18@next@2
; Line 244
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _length$[ebp]
	mov	DWORD PTR [eax+12], ecx
; Line 245
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pos$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 248
	cmp	DWORD PTR _length$[ebp], 0
	jge	SHORT $LN40@next@2
	mov	eax, DWORD PTR _pos$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _node$32198[ebp], ecx
	cmp	DWORD PTR _node$32198[ebp], 32		; 00000020H
	jl	SHORT $LN40@next@2
	mov	edx, DWORD PTR _node$32198[ebp]
	push	edx
	call	?valueResult@BytesTrie@icu_56@@CA?AW4UStringTrieResult@@H@Z ; icu_56::BytesTrie::valueResult
	add	esp, 4
	mov	DWORD PTR tv138[ebp], eax
	jmp	SHORT $LN41@next@2
$LN40@next@2:
	mov	DWORD PTR tv138[ebp], 1
$LN41@next@2:
	mov	eax, DWORD PTR tv138[ebp]
	jmp	$LN32@next@2
$LN18@next@2:
; Line 250
	mov	eax, DWORD PTR _s$[ebp]
	movsx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _inByte$32184[ebp], ecx
	mov	edx, DWORD PTR _s$[ebp]
	add	edx, 1
	mov	DWORD PTR _s$[ebp], edx
; Line 251
	mov	eax, DWORD PTR _sLength$[ebp]
	sub	eax, 1
	mov	DWORD PTR _sLength$[ebp], eax
; Line 252
	cmp	DWORD PTR _length$[ebp], 0
	jge	SHORT $LN17@next@2
; Line 253
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _length$[ebp]
	mov	DWORD PTR [eax+12], ecx
; Line 254
	jmp	SHORT $LN15@next@2
$LN17@next@2:
; Line 256
	mov	eax, DWORD PTR _pos$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	DWORD PTR _inByte$32184[ebp], ecx
	je	SHORT $LN16@next@2
; Line 257
	mov	ecx, DWORD PTR _this$[ebp]
	call	?stop@BytesTrie@icu_56@@AAEXXZ		; icu_56::BytesTrie::stop
; Line 258
	xor	eax, eax
	jmp	$LN32@next@2
$LN16@next@2:
; Line 260
	mov	eax, DWORD PTR _pos$[ebp]
	add	eax, 1
	mov	DWORD PTR _pos$[ebp], eax
; Line 261
	mov	eax, DWORD PTR _length$[ebp]
	sub	eax, 1
	mov	DWORD PTR _length$[ebp], eax
; Line 262
	jmp	$LN20@next@2
$LN15@next@2:
; Line 265
	mov	eax, DWORD PTR _pos$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _node$32204[ebp], ecx
	mov	edx, DWORD PTR _pos$[ebp]
	add	edx, 1
	mov	DWORD PTR _pos$[ebp], edx
; Line 266
	cmp	DWORD PTR _node$32204[ebp], 16		; 00000010H
	jge	$LN13@next@2
; Line 267
	mov	eax, DWORD PTR _inByte$32184[ebp]
	push	eax
	mov	ecx, DWORD PTR _node$32204[ebp]
	push	ecx
	mov	edx, DWORD PTR _pos$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?branchNext@BytesTrie@icu_56@@AAE?AW4UStringTrieResult@@PBEHH@Z ; icu_56::BytesTrie::branchNext
	mov	DWORD PTR _result$32206[ebp], eax
; Line 268
	cmp	DWORD PTR _result$32206[ebp], 0
	jne	SHORT $LN12@next@2
; Line 269
	xor	eax, eax
	jmp	$LN32@next@2
$LN12@next@2:
; Line 272
	cmp	DWORD PTR _sLength$[ebp], 0
	jge	SHORT $LN11@next@2
; Line 273
	mov	eax, DWORD PTR _s$[ebp]
	movsx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _inByte$32184[ebp], ecx
	mov	edx, DWORD PTR _inByte$32184[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	add	eax, 1
	mov	DWORD PTR _s$[ebp], eax
	test	edx, edx
	jne	SHORT $LN42@next@2
	mov	DWORD PTR tv162[ebp], 1
	jmp	SHORT $LN43@next@2
$LN42@next@2:
	mov	DWORD PTR tv162[ebp], 0
$LN43@next@2:
	cmp	DWORD PTR tv162[ebp], 0
	je	SHORT $LN10@next@2
; Line 274
	mov	eax, DWORD PTR _result$32206[ebp]
	jmp	$LN32@next@2
$LN10@next@2:
; Line 276
	jmp	SHORT $LN9@next@2
$LN11@next@2:
; Line 277
	cmp	DWORD PTR _sLength$[ebp], 0
	jne	SHORT $LN8@next@2
; Line 278
	mov	eax, DWORD PTR _result$32206[ebp]
	jmp	$LN32@next@2
$LN8@next@2:
; Line 280
	mov	eax, DWORD PTR _s$[ebp]
	movsx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _inByte$32184[ebp], ecx
	mov	edx, DWORD PTR _s$[ebp]
	add	edx, 1
	mov	DWORD PTR _s$[ebp], edx
; Line 281
	mov	eax, DWORD PTR _sLength$[ebp]
	sub	eax, 1
	mov	DWORD PTR _sLength$[ebp], eax
$LN9@next@2:
; Line 283
	cmp	DWORD PTR _result$32206[ebp], 2
	jne	SHORT $LN7@next@2
; Line 285
	mov	ecx, DWORD PTR _this$[ebp]
	call	?stop@BytesTrie@icu_56@@AAEXXZ		; icu_56::BytesTrie::stop
; Line 286
	xor	eax, eax
	jmp	$LN32@next@2
$LN7@next@2:
; Line 288
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _pos$[ebp], ecx
	jmp	$LN6@next@2
$LN13@next@2:
; Line 289
	cmp	DWORD PTR _node$32204[ebp], 32		; 00000020H
	jge	SHORT $LN5@next@2
; Line 291
	mov	eax, DWORD PTR _node$32204[ebp]
	sub	eax, 16					; 00000010H
	mov	DWORD PTR _length$[ebp], eax
; Line 292
	mov	eax, DWORD PTR _pos$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	DWORD PTR _inByte$32184[ebp], ecx
	je	SHORT $LN4@next@2
; Line 293
	mov	ecx, DWORD PTR _this$[ebp]
	call	?stop@BytesTrie@icu_56@@AAEXXZ		; icu_56::BytesTrie::stop
; Line 294
	xor	eax, eax
	jmp	SHORT $LN32@next@2
$LN4@next@2:
; Line 296
	mov	eax, DWORD PTR _pos$[ebp]
	add	eax, 1
	mov	DWORD PTR _pos$[ebp], eax
; Line 297
	mov	eax, DWORD PTR _length$[ebp]
	sub	eax, 1
	mov	DWORD PTR _length$[ebp], eax
; Line 298
	jmp	SHORT $LN14@next@2
	jmp	SHORT $LN6@next@2
$LN5@next@2:
; Line 299
	mov	eax, DWORD PTR _node$32204[ebp]
	and	eax, 1
	je	SHORT $LN2@next@2
; Line 301
	mov	ecx, DWORD PTR _this$[ebp]
	call	?stop@BytesTrie@icu_56@@AAEXXZ		; icu_56::BytesTrie::stop
; Line 302
	xor	eax, eax
	jmp	SHORT $LN32@next@2
; Line 303
	jmp	SHORT $LN6@next@2
$LN2@next@2:
; Line 305
	mov	eax, DWORD PTR _node$32204[ebp]
	push	eax
	mov	ecx, DWORD PTR _pos$[ebp]
	push	ecx
	call	?skipValue@BytesTrie@icu_56@@CAPBEPBEH@Z ; icu_56::BytesTrie::skipValue
	add	esp, 8
	mov	DWORD PTR _pos$[ebp], eax
; Line 307
	mov	eax, DWORD PTR _pos$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 32					; 00000020H
	jl	SHORT $LN6@next@2
	mov	edx, DWORD PTR ?__LINE__Var@?1??next@BytesTrie@icu_56@@QAE?AW4UStringTrieResult@@PBDH@Z@4JA
	add	edx, 100				; 00000064H
	mov	esi, esp
	push	edx
	push	OFFSET ??_C@_1GA@MKOCANFD@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@
	push	OFFSET ??_C@_1CG@NHPHJHE@?$AA?$CK?$AAp?$AAo?$AAs?$AA?$DM?$AAk?$AAM?$AAi?$AAn?$AAV?$AAa?$AAl?$AAu?$AAe?$AAL?$AAe?$AAa?$AAd?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN6@next@2:
; Line 309
	jmp	$LN15@next@2
$LN14@next@2:
; Line 310
	jmp	$LN29@next@2
$LN32@next@2:
; Line 311
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 292				; 00000124H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?next@BytesTrie@icu_56@@QAE?AW4UStringTrieResult@@PBDH@Z ENDP ; icu_56::BytesTrie::next
_TEXT	ENDS
PUBLIC	?findUniqueValueFromBranch@BytesTrie@icu_56@@CAPBEPBEHCAAH@Z ; icu_56::BytesTrie::findUniqueValueFromBranch
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?findUniqueValueFromBranch@BytesTrie@icu_56@@CAPBEPBEHCAAH@Z
_TEXT	SEGMENT
_value$32237 = -32					; size = 4
_isFinal$32235 = -17					; size = 1
_node$32234 = -8					; size = 4
_pos$ = 8						; size = 4
_length$ = 12						; size = 4
_haveUniqueValue$ = 16					; size = 1
_uniqueValue$ = 20					; size = 4
?findUniqueValueFromBranch@BytesTrie@icu_56@@CAPBEPBEHCAAH@Z PROC ; icu_56::BytesTrie::findUniqueValueFromBranch, COMDAT
; Line 315
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
$LN12@findUnique:
; Line 316
	cmp	DWORD PTR _length$[ebp], 5
	jle	SHORT $LN9@findUnique
; Line 317
	mov	eax, DWORD PTR _pos$[ebp]
	add	eax, 1
	mov	DWORD PTR _pos$[ebp], eax
; Line 318
	mov	eax, DWORD PTR _uniqueValue$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _haveUniqueValue$[ebp]
	push	ecx
	mov	edx, DWORD PTR _length$[ebp]
	sar	edx, 1
	push	edx
	mov	eax, DWORD PTR _pos$[ebp]
	push	eax
	call	?jumpByDelta@BytesTrie@icu_56@@CAPBEPBE@Z ; icu_56::BytesTrie::jumpByDelta
	add	esp, 4
	push	eax
	call	?findUniqueValueFromBranch@BytesTrie@icu_56@@CAPBEPBEHCAAH@Z ; icu_56::BytesTrie::findUniqueValueFromBranch
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	SHORT $LN10@findUnique
; Line 319
	xor	eax, eax
	jmp	$LN13@findUnique
$LN10@findUnique:
; Line 321
	mov	eax, DWORD PTR _length$[ebp]
	sar	eax, 1
	mov	ecx, DWORD PTR _length$[ebp]
	sub	ecx, eax
	mov	DWORD PTR _length$[ebp], ecx
; Line 322
	mov	eax, DWORD PTR _pos$[ebp]
	push	eax
	call	?skipDelta@BytesTrie@icu_56@@CAPBEPBE@Z	; icu_56::BytesTrie::skipDelta
	add	esp, 4
	mov	DWORD PTR _pos$[ebp], eax
; Line 323
	jmp	SHORT $LN12@findUnique
$LN9@findUnique:
; Line 325
	mov	eax, DWORD PTR _pos$[ebp]
	add	eax, 1
	mov	DWORD PTR _pos$[ebp], eax
; Line 327
	mov	eax, DWORD PTR _pos$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _node$32234[ebp], ecx
	mov	edx, DWORD PTR _pos$[ebp]
	add	edx, 1
	mov	DWORD PTR _pos$[ebp], edx
; Line 328
	mov	eax, DWORD PTR _node$32234[ebp]
	and	eax, 1
	mov	BYTE PTR _isFinal$32235[ebp], al
; Line 329
	mov	eax, DWORD PTR _node$32234[ebp]
	sar	eax, 1
	push	eax
	mov	ecx, DWORD PTR _pos$[ebp]
	push	ecx
	call	?readValue@BytesTrie@icu_56@@CAHPBEH@Z	; icu_56::BytesTrie::readValue
	add	esp, 8
	mov	DWORD PTR _value$32237[ebp], eax
; Line 330
	mov	eax, DWORD PTR _node$32234[ebp]
	push	eax
	mov	ecx, DWORD PTR _pos$[ebp]
	push	ecx
	call	?skipValue@BytesTrie@icu_56@@CAPBEPBEH@Z ; icu_56::BytesTrie::skipValue
	add	esp, 8
	mov	DWORD PTR _pos$[ebp], eax
; Line 331
	movsx	eax, BYTE PTR _isFinal$32235[ebp]
	test	eax, eax
	je	SHORT $LN6@findUnique
; Line 332
	movsx	eax, BYTE PTR _haveUniqueValue$[ebp]
	test	eax, eax
	je	SHORT $LN5@findUnique
; Line 333
	mov	eax, DWORD PTR _uniqueValue$[ebp]
	mov	ecx, DWORD PTR _value$32237[ebp]
	cmp	ecx, DWORD PTR [eax]
	je	SHORT $LN4@findUnique
; Line 334
	xor	eax, eax
	jmp	SHORT $LN13@findUnique
$LN4@findUnique:
; Line 336
	jmp	SHORT $LN3@findUnique
$LN5@findUnique:
; Line 337
	mov	eax, DWORD PTR _uniqueValue$[ebp]
	mov	ecx, DWORD PTR _value$32237[ebp]
	mov	DWORD PTR [eax], ecx
; Line 338
	mov	BYTE PTR _haveUniqueValue$[ebp], 1
$LN3@findUnique:
; Line 340
	jmp	SHORT $LN8@findUnique
$LN6@findUnique:
; Line 341
	mov	eax, DWORD PTR _uniqueValue$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _haveUniqueValue$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pos$[ebp]
	add	edx, DWORD PTR _value$32237[ebp]
	push	edx
	call	?findUniqueValue@BytesTrie@icu_56@@CACPBECAAH@Z ; icu_56::BytesTrie::findUniqueValue
	add	esp, 12					; 0000000cH
	movsx	eax, al
	test	eax, eax
	jne	SHORT $LN1@findUnique
; Line 342
	xor	eax, eax
	jmp	SHORT $LN13@findUnique
$LN1@findUnique:
; Line 344
	mov	BYTE PTR _haveUniqueValue$[ebp], 1
$LN8@findUnique:
; Line 346
	mov	eax, DWORD PTR _length$[ebp]
	sub	eax, 1
	mov	DWORD PTR _length$[ebp], eax
	cmp	DWORD PTR _length$[ebp], 1
	jg	$LN9@findUnique
; Line 347
	mov	eax, DWORD PTR _pos$[ebp]
	add	eax, 1
$LN13@findUnique:
; Line 348
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?findUniqueValueFromBranch@BytesTrie@icu_56@@CAPBEPBEHCAAH@Z ENDP ; icu_56::BytesTrie::findUniqueValueFromBranch
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?findUniqueValue@BytesTrie@icu_56@@CACPBECAAH@Z
_TEXT	SEGMENT
_value$32261 = -32					; size = 4
_isFinal$32259 = -17					; size = 1
_node$32252 = -8					; size = 4
_pos$ = 8						; size = 4
_haveUniqueValue$ = 12					; size = 1
_uniqueValue$ = 16					; size = 4
?findUniqueValue@BytesTrie@icu_56@@CACPBECAAH@Z PROC	; icu_56::BytesTrie::findUniqueValue, COMDAT
; Line 351
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
$LN12@findUnique@2:
; Line 353
	mov	eax, DWORD PTR _pos$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _node$32252[ebp], ecx
	mov	edx, DWORD PTR _pos$[ebp]
	add	edx, 1
	mov	DWORD PTR _pos$[ebp], edx
; Line 354
	cmp	DWORD PTR _node$32252[ebp], 16		; 00000010H
	jge	SHORT $LN10@findUnique@2
; Line 355
	cmp	DWORD PTR _node$32252[ebp], 0
	jne	SHORT $LN9@findUnique@2
; Line 356
	mov	eax, DWORD PTR _pos$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _node$32252[ebp], ecx
	mov	edx, DWORD PTR _pos$[ebp]
	add	edx, 1
	mov	DWORD PTR _pos$[ebp], edx
$LN9@findUnique@2:
; Line 358
	mov	eax, DWORD PTR _uniqueValue$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _haveUniqueValue$[ebp]
	push	ecx
	mov	edx, DWORD PTR _node$32252[ebp]
	add	edx, 1
	push	edx
	mov	eax, DWORD PTR _pos$[ebp]
	push	eax
	call	?findUniqueValueFromBranch@BytesTrie@icu_56@@CAPBEPBEHCAAH@Z ; icu_56::BytesTrie::findUniqueValueFromBranch
	add	esp, 16					; 00000010H
	mov	DWORD PTR _pos$[ebp], eax
; Line 359
	cmp	DWORD PTR _pos$[ebp], 0
	jne	SHORT $LN8@findUnique@2
; Line 360
	xor	al, al
	jmp	$LN13@findUnique@2
$LN8@findUnique@2:
; Line 362
	mov	BYTE PTR _haveUniqueValue$[ebp], 1
	jmp	SHORT $LN7@findUnique@2
$LN10@findUnique@2:
; Line 363
	cmp	DWORD PTR _node$32252[ebp], 32		; 00000020H
	jge	SHORT $LN6@findUnique@2
; Line 365
	mov	eax, DWORD PTR _node$32252[ebp]
	mov	ecx, DWORD PTR _pos$[ebp]
	lea	edx, DWORD PTR [ecx+eax-15]
	mov	DWORD PTR _pos$[ebp], edx
; Line 366
	jmp	SHORT $LN7@findUnique@2
$LN6@findUnique@2:
; Line 367
	mov	eax, DWORD PTR _node$32252[ebp]
	and	eax, 1
	mov	BYTE PTR _isFinal$32259[ebp], al
; Line 368
	mov	eax, DWORD PTR _node$32252[ebp]
	sar	eax, 1
	push	eax
	mov	ecx, DWORD PTR _pos$[ebp]
	push	ecx
	call	?readValue@BytesTrie@icu_56@@CAHPBEH@Z	; icu_56::BytesTrie::readValue
	add	esp, 8
	mov	DWORD PTR _value$32261[ebp], eax
; Line 369
	movsx	eax, BYTE PTR _haveUniqueValue$[ebp]
	test	eax, eax
	je	SHORT $LN4@findUnique@2
; Line 370
	mov	eax, DWORD PTR _uniqueValue$[ebp]
	mov	ecx, DWORD PTR _value$32261[ebp]
	cmp	ecx, DWORD PTR [eax]
	je	SHORT $LN3@findUnique@2
; Line 371
	xor	al, al
	jmp	SHORT $LN13@findUnique@2
$LN3@findUnique@2:
; Line 373
	jmp	SHORT $LN2@findUnique@2
$LN4@findUnique@2:
; Line 374
	mov	eax, DWORD PTR _uniqueValue$[ebp]
	mov	ecx, DWORD PTR _value$32261[ebp]
	mov	DWORD PTR [eax], ecx
; Line 375
	mov	BYTE PTR _haveUniqueValue$[ebp], 1
$LN2@findUnique@2:
; Line 377
	movsx	eax, BYTE PTR _isFinal$32259[ebp]
	test	eax, eax
	je	SHORT $LN1@findUnique@2
; Line 378
	mov	al, 1
	jmp	SHORT $LN13@findUnique@2
$LN1@findUnique@2:
; Line 380
	mov	eax, DWORD PTR _node$32252[ebp]
	push	eax
	mov	ecx, DWORD PTR _pos$[ebp]
	push	ecx
	call	?skipValue@BytesTrie@icu_56@@CAPBEPBEH@Z ; icu_56::BytesTrie::skipValue
	add	esp, 8
	mov	DWORD PTR _pos$[ebp], eax
$LN7@findUnique@2:
; Line 382
	jmp	$LN12@findUnique@2
$LN13@findUnique@2:
; Line 383
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?findUniqueValue@BytesTrie@icu_56@@CACPBECAAH@Z ENDP	; icu_56::BytesTrie::findUniqueValue
_TEXT	ENDS
PUBLIC	?getNextBranchBytes@BytesTrie@icu_56@@CAXPBEHAAVByteSink@2@@Z ; icu_56::BytesTrie::getNextBranchBytes
PUBLIC	??_C@_1CG@OGDFLGCO@?$AAn?$AAo?$AAd?$AAe?$AA?$DM?$AAk?$AAM?$AAi?$AAn?$AAV?$AAa?$AAl?$AAu?$AAe?$AAL?$AAe?$AAa?$AAd?$AA?$AA@ ; `string'
PUBLIC	?__LINE__Var@?1??getNextBytes@BytesTrie@icu_56@@QBEHAAVByteSink@3@@Z@4JA ; `icu_56::BytesTrie::getNextBytes'::`2'::__LINE__Var
PUBLIC	?append@BytesTrie@icu_56@@CAXAAVByteSink@2@H@Z	; icu_56::BytesTrie::append
PUBLIC	?getNextBytes@BytesTrie@icu_56@@QBEHAAVByteSink@2@@Z ; icu_56::BytesTrie::getNextBytes
;	COMDAT ??_C@_1CG@OGDFLGCO@?$AAn?$AAo?$AAd?$AAe?$AA?$DM?$AAk?$AAM?$AAi?$AAn?$AAV?$AAa?$AAl?$AAu?$AAe?$AAL?$AAe?$AAa?$AAd?$AA?$AA@
CONST	SEGMENT
??_C@_1CG@OGDFLGCO@?$AAn?$AAo?$AAd?$AAe?$AA?$DM?$AAk?$AAM?$AAi?$AAn?$AAV?$AAa?$AAl?$AAu?$AAe?$AAL?$AAe?$AAa?$AAd?$AA?$AA@ DB 'n'
	DB	00H, 'o', 00H, 'd', 00H, 'e', 00H, '<', 00H, 'k', 00H, 'M', 00H
	DB	'i', 00H, 'n', 00H, 'V', 00H, 'a', 00H, 'l', 00H, 'u', 00H, 'e'
	DB	00H, 'L', 00H, 'e', 00H, 'a', 00H, 'd', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??getNextBytes@BytesTrie@icu_56@@QBEHAAVByteSink@3@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??getNextBytes@BytesTrie@icu_56@@QBEHAAVByteSink@3@@Z@4JA DD 0182H ; `icu_56::BytesTrie::getNextBytes'::`2'::__LINE__Var
; Function compile flags: /Odtp /RTCsu /ZI
_DATA	ENDS
;	COMDAT ?getNextBytes@BytesTrie@icu_56@@QBEHAAVByteSink@2@@Z
_TEXT	SEGMENT
_node$ = -32						; size = 4
_pos$ = -20						; size = 4
_this$ = -8						; size = 4
_out$ = 8						; size = 4
?getNextBytes@BytesTrie@icu_56@@QBEHAAVByteSink@2@@Z PROC ; icu_56::BytesTrie::getNextBytes, COMDAT
; _this$ = ecx
; Line 386
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 387
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _pos$[ebp], ecx
; Line 388
	cmp	DWORD PTR _pos$[ebp], 0
	jne	SHORT $LN8@getNextByt
; Line 389
	xor	eax, eax
	jmp	$LN9@getNextByt
$LN8@getNextByt:
; Line 391
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jl	SHORT $LN7@getNextByt
; Line 392
	mov	eax, DWORD PTR _pos$[ebp]
	movzx	ecx, BYTE PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _out$[ebp]
	push	edx
	call	?append@BytesTrie@icu_56@@CAXAAVByteSink@2@H@Z ; icu_56::BytesTrie::append
	add	esp, 8
; Line 393
	mov	eax, 1
	jmp	$LN9@getNextByt
$LN7@getNextByt:
; Line 395
	mov	eax, DWORD PTR _pos$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _node$[ebp], ecx
	mov	edx, DWORD PTR _pos$[ebp]
	add	edx, 1
	mov	DWORD PTR _pos$[ebp], edx
; Line 396
	cmp	DWORD PTR _node$[ebp], 32		; 00000020H
	jl	SHORT $LN6@getNextByt
; Line 397
	mov	eax, DWORD PTR _node$[ebp]
	and	eax, 1
	je	SHORT $LN5@getNextByt
; Line 398
	xor	eax, eax
	jmp	$LN9@getNextByt
; Line 399
	jmp	SHORT $LN6@getNextByt
$LN5@getNextByt:
; Line 400
	mov	eax, DWORD PTR _node$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pos$[ebp]
	push	ecx
	call	?skipValue@BytesTrie@icu_56@@CAPBEPBEH@Z ; icu_56::BytesTrie::skipValue
	add	esp, 8
	mov	DWORD PTR _pos$[ebp], eax
; Line 401
	mov	eax, DWORD PTR _pos$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _node$[ebp], ecx
	mov	edx, DWORD PTR _pos$[ebp]
	add	edx, 1
	mov	DWORD PTR _pos$[ebp], edx
; Line 402
	cmp	DWORD PTR _node$[ebp], 32		; 00000020H
	jl	SHORT $LN6@getNextByt
	mov	eax, DWORD PTR ?__LINE__Var@?1??getNextBytes@BytesTrie@icu_56@@QBEHAAVByteSink@3@@Z@4JA
	add	eax, 16					; 00000010H
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1GA@MKOCANFD@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@
	push	OFFSET ??_C@_1CG@OGDFLGCO@?$AAn?$AAo?$AAd?$AAe?$AA?$DM?$AAk?$AAM?$AAi?$AAn?$AAV?$AAa?$AAl?$AAu?$AAe?$AAL?$AAe?$AAa?$AAd?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN6@getNextByt:
; Line 405
	cmp	DWORD PTR _node$[ebp], 16		; 00000010H
	jge	SHORT $LN3@getNextByt
; Line 406
	cmp	DWORD PTR _node$[ebp], 0
	jne	SHORT $LN2@getNextByt
; Line 407
	mov	eax, DWORD PTR _pos$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _node$[ebp], ecx
	mov	edx, DWORD PTR _pos$[ebp]
	add	edx, 1
	mov	DWORD PTR _pos$[ebp], edx
$LN2@getNextByt:
; Line 409
	mov	eax, DWORD PTR _node$[ebp]
	add	eax, 1
	mov	DWORD PTR _node$[ebp], eax
	mov	ecx, DWORD PTR _out$[ebp]
	push	ecx
	mov	edx, DWORD PTR _node$[ebp]
	push	edx
	mov	eax, DWORD PTR _pos$[ebp]
	push	eax
	call	?getNextBranchBytes@BytesTrie@icu_56@@CAXPBEHAAVByteSink@2@@Z ; icu_56::BytesTrie::getNextBranchBytes
	add	esp, 12					; 0000000cH
; Line 410
	mov	eax, DWORD PTR _node$[ebp]
	jmp	SHORT $LN9@getNextByt
; Line 411
	jmp	SHORT $LN9@getNextByt
$LN3@getNextByt:
; Line 413
	mov	eax, DWORD PTR _pos$[ebp]
	movzx	ecx, BYTE PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _out$[ebp]
	push	edx
	call	?append@BytesTrie@icu_56@@CAXAAVByteSink@2@H@Z ; icu_56::BytesTrie::append
	add	esp, 8
; Line 414
	mov	eax, 1
$LN9@getNextByt:
; Line 416
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?getNextBytes@BytesTrie@icu_56@@QBEHAAVByteSink@2@@Z ENDP ; icu_56::BytesTrie::getNextBytes
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?getNextBranchBytes@BytesTrie@icu_56@@CAXPBEHAAVByteSink@2@@Z
_TEXT	SEGMENT
tv78 = -196						; size = 4
_pos$ = 8						; size = 4
_length$ = 12						; size = 4
_out$ = 16						; size = 4
?getNextBranchBytes@BytesTrie@icu_56@@CAXPBEHAAVByteSink@2@@Z PROC ; icu_56::BytesTrie::getNextBranchBytes, COMDAT
; Line 419
	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
$LN5@getNextBra:
; Line 420
	cmp	DWORD PTR _length$[ebp], 5
	jle	SHORT $LN3@getNextBra
; Line 421
	mov	eax, DWORD PTR _pos$[ebp]
	add	eax, 1
	mov	DWORD PTR _pos$[ebp], eax
; Line 422
	mov	eax, DWORD PTR _out$[ebp]
	push	eax
	mov	ecx, DWORD PTR _length$[ebp]
	sar	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _pos$[ebp]
	push	edx
	call	?jumpByDelta@BytesTrie@icu_56@@CAPBEPBE@Z ; icu_56::BytesTrie::jumpByDelta
	add	esp, 4
	push	eax
	call	?getNextBranchBytes@BytesTrie@icu_56@@CAXPBEHAAVByteSink@2@@Z ; icu_56::BytesTrie::getNextBranchBytes
	add	esp, 12					; 0000000cH
; Line 423
	mov	eax, DWORD PTR _length$[ebp]
	sar	eax, 1
	mov	ecx, DWORD PTR _length$[ebp]
	sub	ecx, eax
	mov	DWORD PTR _length$[ebp], ecx
; Line 424
	mov	eax, DWORD PTR _pos$[ebp]
	push	eax
	call	?skipDelta@BytesTrie@icu_56@@CAPBEPBE@Z	; icu_56::BytesTrie::skipDelta
	add	esp, 4
	mov	DWORD PTR _pos$[ebp], eax
; Line 425
	jmp	SHORT $LN5@getNextBra
$LN3@getNextBra:
; Line 427
	mov	eax, DWORD PTR _pos$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR tv78[ebp], ecx
	mov	edx, DWORD PTR _pos$[ebp]
	add	edx, 1
	mov	DWORD PTR _pos$[ebp], edx
	mov	eax, DWORD PTR tv78[ebp]
	push	eax
	mov	ecx, DWORD PTR _out$[ebp]
	push	ecx
	call	?append@BytesTrie@icu_56@@CAXAAVByteSink@2@H@Z ; icu_56::BytesTrie::append
	add	esp, 8
; Line 428
	mov	eax, DWORD PTR _pos$[ebp]
	push	eax
	call	?skipValue@BytesTrie@icu_56@@CAPBEPBE@Z	; icu_56::BytesTrie::skipValue
	add	esp, 4
	mov	DWORD PTR _pos$[ebp], eax
; Line 429
	mov	eax, DWORD PTR _length$[ebp]
	sub	eax, 1
	mov	DWORD PTR _length$[ebp], eax
	cmp	DWORD PTR _length$[ebp], 1
	jg	SHORT $LN3@getNextBra
; Line 430
	mov	eax, DWORD PTR _pos$[ebp]
	movzx	ecx, BYTE PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _out$[ebp]
	push	edx
	call	?append@BytesTrie@icu_56@@CAXAAVByteSink@2@H@Z ; icu_56::BytesTrie::append
	add	esp, 8
; Line 431
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?getNextBranchBytes@BytesTrie@icu_56@@CAXPBEHAAVByteSink@2@@Z ENDP ; icu_56::BytesTrie::getNextBranchBytes
_TEXT	ENDS
EXTRN	@_RTC_CheckStackVars@8:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?append@BytesTrie@icu_56@@CAXAAVByteSink@2@H@Z
_TEXT	SEGMENT
_ch$ = -5						; size = 1
_out$ = 8						; size = 4
_c$ = 12						; size = 4
?append@BytesTrie@icu_56@@CAXAAVByteSink@2@H@Z PROC	; icu_56::BytesTrie::append, COMDAT
; Line 434
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 435
	mov	al, BYTE PTR _c$[ebp]
	mov	BYTE PTR _ch$[ebp], al
; Line 436
	mov	esi, esp
	push	1
	lea	eax, DWORD PTR _ch$[ebp]
	push	eax
	mov	ecx, DWORD PTR _out$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _out$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 437
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@append
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN5@append:
	DD	1
	DD	$LN4@append
$LN4@append:
	DD	-5					; fffffffbH
	DD	1
	DD	$LN3@append
$LN3@append:
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	0
?append@BytesTrie@icu_56@@CAXAAVByteSink@2@H@Z ENDP	; icu_56::BytesTrie::append
_TEXT	ENDS
PUBLIC	?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::data, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
; Line 1500
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1501
	mov	ecx, DWORD PTR _this$[ebp]
	call	?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
; Line 1502
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::data
_TEXT	ENDS
PUBLIC	?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str, COMDAT
; _this$ = ecx
; Line 1495
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1496
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
; Line 1497
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx
; Line 1510
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1511
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+20]
; Line 1512
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT
tv82 = -208						; size = 4
_this$ = -8						; size = 4
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr, COMDAT
; _this$ = ecx
; Line 2008
	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 2010
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+24], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR tv82[ebp], edx
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	mov	DWORD PTR tv82[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv82[ebp]
; Line 2011
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
_TEXT	ENDS
END
