; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\mozilla\intl\icu\source\common\uloc_tag.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	??_C@_03INOAGPCP@hsn?$AA@			; `string'
PUBLIC	??_C@_08EJCDFAPE@zh?9xiang?$AA@			; `string'
PUBLIC	??_C@_03LHCJEHON@nan?$AA@			; `string'
PUBLIC	??_C@_0L@OIGDLNJ@zh?9min?9nan?$AA@		; `string'
PUBLIC	??_C@_0N@MGLKBMFP@nan?9x?9zh?9min?$AA@		; `string'
PUBLIC	??_C@_06ICEJFADO@zh?9min?$AA@			; `string'
PUBLIC	??_C@_08EFKJJMKH@zh?9hakka?$AA@			; `string'
PUBLIC	??_C@_03EMFJGGFE@cmn?$AA@			; `string'
PUBLIC	??_C@_08JPPBCICM@zh?9guoyu?$AA@			; `string'
PUBLIC	??_C@_03MABFAPFE@sgg?$AA@			; `string'
PUBLIC	??_C@_09HACMGFCP@sgn?9ch?9de?$AA@		; `string'
PUBLIC	??_C@_03JGCELOPE@vgt?$AA@			; `string'
PUBLIC	??_C@_09JPLFEMKE@sgn?9be?9nl?$AA@		; `string'
PUBLIC	??_C@_03LMKAJBCG@sfb?$AA@			; `string'
PUBLIC	??_C@_09EFOHCCMD@sgn?9be?9fr?$AA@		; `string'
PUBLIC	??_C@_02LJIJIGOO@nn?$AA@			; `string'
PUBLIC	??_C@_06CEONEMF@no?9nyn?$AA@			; `string'
PUBLIC	??_C@_02BFDMMJOC@nb?$AA@			; `string'
PUBLIC	??_C@_06CNEEEAPK@no?9bok?$AA@			; `string'
PUBLIC	??_C@_03DOBJEMJC@tsu?$AA@			; `string'
PUBLIC	??_C@_05LIDFIHAK@i?9tsu?$AA@			; `string'
PUBLIC	??_C@_03INAOHEIA@tay?$AA@			; `string'
PUBLIC	??_C@_05LCCLPBI@i?9tay?$AA@			; `string'
PUBLIC	??_C@_03JBJGMBFH@tao?$AA@			; `string'
PUBLIC	??_C@_05BHLKAKMP@i?9tao?$AA@			; `string'
PUBLIC	??_C@_03BPEELIID@pwn?$AA@			; `string'
PUBLIC	??_C@_05JJGIHDBL@i?9pwn?$AA@			; `string'
PUBLIC	??_C@_02DLJCBOLH@nv?$AA@			; `string'
PUBLIC	??_C@_08MBEJPMPJ@i?9navajo?$AA@			; `string'
PUBLIC	??_C@_0O@PFMNMADC@see?9x?9i?9mingo?$AA@		; `string'
PUBLIC	??_C@_07KPFPOABP@i?9mingo?$AA@			; `string'
PUBLIC	??_C@_02BGLIBNIM@lb?$AA@			; `string'
PUBLIC	??_C@_05JMLLPKIF@i?9lux?$AA@			; `string'
PUBLIC	??_C@_03NGAPMEMD@tlh?$AA@			; `string'
PUBLIC	??_C@_09JEFDNFIL@i?9klingon?$AA@		; `string'
PUBLIC	??_C@_03OPDFOMHE@hak?$AA@			; `string'
PUBLIC	??_C@_05GJBJCHOM@i?9hak?$AA@			; `string'
PUBLIC	??_C@_0BB@IHEKHOBB@und?9x?9i?9enochian?$AA@	; `string'
PUBLIC	??_C@_0L@HIEODKGP@i?9enochian?$AA@		; `string'
PUBLIC	??_C@_0P@HKCMCIGH@en?9x?9i?9default?$AA@	; `string'
PUBLIC	??_C@_09ODJGHMGG@i?9default?$AA@		; `string'
PUBLIC	??_C@_03PGKDLPGI@bnn?$AA@			; `string'
PUBLIC	??_C@_05HAIPHEPA@i?9bnn?$AA@			; `string'
PUBLIC	??_C@_03KJBBDIBI@ami?$AA@			; `string'
PUBLIC	??_C@_05CPDNPDIA@i?9ami?$AA@			; `string'
PUBLIC	??_C@_0M@BBDMAPA@en?9GB?9x?9oed?$AA@		; `string'
PUBLIC	??_C@_09LMMDOBE@en?9GB?9oed?$AA@		; `string'
PUBLIC	??_C@_0BC@EHCDDOLI@xtg?9x?9cel?9gaulish?$AA@	; `string'
PUBLIC	??_C@_0M@PHPFLPK@cel?9gaulish?$AA@		; `string'
PUBLIC	??_C@_03CDBGFPKC@jbo?$AA@			; `string'
PUBLIC	??_C@_0L@HNNAJLFE@art?9lojban?$AA@		; `string'
;	COMDAT ??_C@_03INOAGPCP@hsn?$AA@
CONST	SEGMENT
??_C@_03INOAGPCP@hsn?$AA@ DB 'hsn', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08EJCDFAPE@zh?9xiang?$AA@
CONST	SEGMENT
??_C@_08EJCDFAPE@zh?9xiang?$AA@ DB 'zh-xiang', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03LHCJEHON@nan?$AA@
CONST	SEGMENT
??_C@_03LHCJEHON@nan?$AA@ DB 'nan', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@OIGDLNJ@zh?9min?9nan?$AA@
CONST	SEGMENT
??_C@_0L@OIGDLNJ@zh?9min?9nan?$AA@ DB 'zh-min-nan', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@MGLKBMFP@nan?9x?9zh?9min?$AA@
CONST	SEGMENT
??_C@_0N@MGLKBMFP@nan?9x?9zh?9min?$AA@ DB 'nan-x-zh-min', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06ICEJFADO@zh?9min?$AA@
CONST	SEGMENT
??_C@_06ICEJFADO@zh?9min?$AA@ DB 'zh-min', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08EFKJJMKH@zh?9hakka?$AA@
CONST	SEGMENT
??_C@_08EFKJJMKH@zh?9hakka?$AA@ DB 'zh-hakka', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03EMFJGGFE@cmn?$AA@
CONST	SEGMENT
??_C@_03EMFJGGFE@cmn?$AA@ DB 'cmn', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08JPPBCICM@zh?9guoyu?$AA@
CONST	SEGMENT
??_C@_08JPPBCICM@zh?9guoyu?$AA@ DB 'zh-guoyu', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03MABFAPFE@sgg?$AA@
CONST	SEGMENT
??_C@_03MABFAPFE@sgg?$AA@ DB 'sgg', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_09HACMGFCP@sgn?9ch?9de?$AA@
CONST	SEGMENT
??_C@_09HACMGFCP@sgn?9ch?9de?$AA@ DB 'sgn-ch-de', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03JGCELOPE@vgt?$AA@
CONST	SEGMENT
??_C@_03JGCELOPE@vgt?$AA@ DB 'vgt', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_09JPLFEMKE@sgn?9be?9nl?$AA@
CONST	SEGMENT
??_C@_09JPLFEMKE@sgn?9be?9nl?$AA@ DB 'sgn-be-nl', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03LMKAJBCG@sfb?$AA@
CONST	SEGMENT
??_C@_03LMKAJBCG@sfb?$AA@ DB 'sfb', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_09EFOHCCMD@sgn?9be?9fr?$AA@
CONST	SEGMENT
??_C@_09EFOHCCMD@sgn?9be?9fr?$AA@ DB 'sgn-be-fr', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02LJIJIGOO@nn?$AA@
CONST	SEGMENT
??_C@_02LJIJIGOO@nn?$AA@ DB 'nn', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06CEONEMF@no?9nyn?$AA@
CONST	SEGMENT
??_C@_06CEONEMF@no?9nyn?$AA@ DB 'no-nyn', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02BFDMMJOC@nb?$AA@
CONST	SEGMENT
??_C@_02BFDMMJOC@nb?$AA@ DB 'nb', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06CNEEEAPK@no?9bok?$AA@
CONST	SEGMENT
??_C@_06CNEEEAPK@no?9bok?$AA@ DB 'no-bok', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03DOBJEMJC@tsu?$AA@
CONST	SEGMENT
??_C@_03DOBJEMJC@tsu?$AA@ DB 'tsu', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05LIDFIHAK@i?9tsu?$AA@
CONST	SEGMENT
??_C@_05LIDFIHAK@i?9tsu?$AA@ DB 'i-tsu', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03INAOHEIA@tay?$AA@
CONST	SEGMENT
??_C@_03INAOHEIA@tay?$AA@ DB 'tay', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05LCCLPBI@i?9tay?$AA@
CONST	SEGMENT
??_C@_05LCCLPBI@i?9tay?$AA@ DB 'i-tay', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03JBJGMBFH@tao?$AA@
CONST	SEGMENT
??_C@_03JBJGMBFH@tao?$AA@ DB 'tao', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05BHLKAKMP@i?9tao?$AA@
CONST	SEGMENT
??_C@_05BHLKAKMP@i?9tao?$AA@ DB 'i-tao', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03BPEELIID@pwn?$AA@
CONST	SEGMENT
??_C@_03BPEELIID@pwn?$AA@ DB 'pwn', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05JJGIHDBL@i?9pwn?$AA@
CONST	SEGMENT
??_C@_05JJGIHDBL@i?9pwn?$AA@ DB 'i-pwn', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02DLJCBOLH@nv?$AA@
CONST	SEGMENT
??_C@_02DLJCBOLH@nv?$AA@ DB 'nv', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08MBEJPMPJ@i?9navajo?$AA@
CONST	SEGMENT
??_C@_08MBEJPMPJ@i?9navajo?$AA@ DB 'i-navajo', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@PFMNMADC@see?9x?9i?9mingo?$AA@
CONST	SEGMENT
??_C@_0O@PFMNMADC@see?9x?9i?9mingo?$AA@ DB 'see-x-i-mingo', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07KPFPOABP@i?9mingo?$AA@
CONST	SEGMENT
??_C@_07KPFPOABP@i?9mingo?$AA@ DB 'i-mingo', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02BGLIBNIM@lb?$AA@
CONST	SEGMENT
??_C@_02BGLIBNIM@lb?$AA@ DB 'lb', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05JMLLPKIF@i?9lux?$AA@
CONST	SEGMENT
??_C@_05JMLLPKIF@i?9lux?$AA@ DB 'i-lux', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03NGAPMEMD@tlh?$AA@
CONST	SEGMENT
??_C@_03NGAPMEMD@tlh?$AA@ DB 'tlh', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_09JEFDNFIL@i?9klingon?$AA@
CONST	SEGMENT
??_C@_09JEFDNFIL@i?9klingon?$AA@ DB 'i-klingon', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03OPDFOMHE@hak?$AA@
CONST	SEGMENT
??_C@_03OPDFOMHE@hak?$AA@ DB 'hak', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05GJBJCHOM@i?9hak?$AA@
CONST	SEGMENT
??_C@_05GJBJCHOM@i?9hak?$AA@ DB 'i-hak', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@IHEKHOBB@und?9x?9i?9enochian?$AA@
CONST	SEGMENT
??_C@_0BB@IHEKHOBB@und?9x?9i?9enochian?$AA@ DB 'und-x-i-enochian', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@HIEODKGP@i?9enochian?$AA@
CONST	SEGMENT
??_C@_0L@HIEODKGP@i?9enochian?$AA@ DB 'i-enochian', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@HKCMCIGH@en?9x?9i?9default?$AA@
CONST	SEGMENT
??_C@_0P@HKCMCIGH@en?9x?9i?9default?$AA@ DB 'en-x-i-default', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09ODJGHMGG@i?9default?$AA@
CONST	SEGMENT
??_C@_09ODJGHMGG@i?9default?$AA@ DB 'i-default', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03PGKDLPGI@bnn?$AA@
CONST	SEGMENT
??_C@_03PGKDLPGI@bnn?$AA@ DB 'bnn', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05HAIPHEPA@i?9bnn?$AA@
CONST	SEGMENT
??_C@_05HAIPHEPA@i?9bnn?$AA@ DB 'i-bnn', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03KJBBDIBI@ami?$AA@
CONST	SEGMENT
??_C@_03KJBBDIBI@ami?$AA@ DB 'ami', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05CPDNPDIA@i?9ami?$AA@
CONST	SEGMENT
??_C@_05CPDNPDIA@i?9ami?$AA@ DB 'i-ami', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@BBDMAPA@en?9GB?9x?9oed?$AA@
CONST	SEGMENT
??_C@_0M@BBDMAPA@en?9GB?9x?9oed?$AA@ DB 'en-GB-x-oed', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09LMMDOBE@en?9GB?9oed?$AA@
CONST	SEGMENT
??_C@_09LMMDOBE@en?9GB?9oed?$AA@ DB 'en-GB-oed', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@EHCDDOLI@xtg?9x?9cel?9gaulish?$AA@
CONST	SEGMENT
??_C@_0BC@EHCDDOLI@xtg?9x?9cel?9gaulish?$AA@ DB 'xtg-x-cel-gaulish', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@PHPFLPK@cel?9gaulish?$AA@
CONST	SEGMENT
??_C@_0M@PHPFLPK@cel?9gaulish?$AA@ DB 'cel-gaulish', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03CDBGFPKC@jbo?$AA@
CONST	SEGMENT
??_C@_03CDBGFPKC@jbo?$AA@ DB 'jbo', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@HNNAJLFE@art?9lojban?$AA@
CONST	SEGMENT
??_C@_0L@HNNAJLFE@art?9lojban?$AA@ DB 'art-lojban', 00H	; `string'
CONST	ENDS
CONST	SEGMENT
_EMPTY	DB	00H
	ORG $+3
_LANG_UND DB	'und', 00H
_PRIVATEUSE_KEY DB 'x', 00H
	ORG $+2
__POSIX	DB	'_POSIX', 00H
	ORG $+1
_POSIX_KEY DB	'va', 00H
	ORG $+1
_POSIX_VALUE DB	'posix', 00H
	ORG $+2
_LOCALE_ATTRIBUTE_KEY DB 'attribute', 00H
	ORG $+2
_PRIVUSE_VARIANT_PREFIX DB 'lvariant', 00H
	ORG $+3
_LOCALE_TYPE_YES DB 'yes', 00H
	ORG $+4
_GRANDFATHERED DD FLAT:??_C@_0L@HNNAJLFE@art?9lojban?$AA@
	DD	FLAT:??_C@_03CDBGFPKC@jbo?$AA@
	DD	FLAT:??_C@_0M@PHPFLPK@cel?9gaulish?$AA@
	DD	FLAT:??_C@_0BC@EHCDDOLI@xtg?9x?9cel?9gaulish?$AA@
	DD	FLAT:??_C@_09LMMDOBE@en?9GB?9oed?$AA@
	DD	FLAT:??_C@_0M@BBDMAPA@en?9GB?9x?9oed?$AA@
	DD	FLAT:??_C@_05CPDNPDIA@i?9ami?$AA@
	DD	FLAT:??_C@_03KJBBDIBI@ami?$AA@
	DD	FLAT:??_C@_05HAIPHEPA@i?9bnn?$AA@
	DD	FLAT:??_C@_03PGKDLPGI@bnn?$AA@
	DD	FLAT:??_C@_09ODJGHMGG@i?9default?$AA@
	DD	FLAT:??_C@_0P@HKCMCIGH@en?9x?9i?9default?$AA@
	DD	FLAT:??_C@_0L@HIEODKGP@i?9enochian?$AA@
	DD	FLAT:??_C@_0BB@IHEKHOBB@und?9x?9i?9enochian?$AA@
	DD	FLAT:??_C@_05GJBJCHOM@i?9hak?$AA@
	DD	FLAT:??_C@_03OPDFOMHE@hak?$AA@
	DD	FLAT:??_C@_09JEFDNFIL@i?9klingon?$AA@
	DD	FLAT:??_C@_03NGAPMEMD@tlh?$AA@
	DD	FLAT:??_C@_05JMLLPKIF@i?9lux?$AA@
	DD	FLAT:??_C@_02BGLIBNIM@lb?$AA@
	DD	FLAT:??_C@_07KPFPOABP@i?9mingo?$AA@
	DD	FLAT:??_C@_0O@PFMNMADC@see?9x?9i?9mingo?$AA@
	DD	FLAT:??_C@_08MBEJPMPJ@i?9navajo?$AA@
	DD	FLAT:??_C@_02DLJCBOLH@nv?$AA@
	DD	FLAT:??_C@_05JJGIHDBL@i?9pwn?$AA@
	DD	FLAT:??_C@_03BPEELIID@pwn?$AA@
	DD	FLAT:??_C@_05BHLKAKMP@i?9tao?$AA@
	DD	FLAT:??_C@_03JBJGMBFH@tao?$AA@
	DD	FLAT:??_C@_05LCCLPBI@i?9tay?$AA@
	DD	FLAT:??_C@_03INAOHEIA@tay?$AA@
	DD	FLAT:??_C@_05LIDFIHAK@i?9tsu?$AA@
	DD	FLAT:??_C@_03DOBJEMJC@tsu?$AA@
	DD	FLAT:??_C@_06CNEEEAPK@no?9bok?$AA@
	DD	FLAT:??_C@_02BFDMMJOC@nb?$AA@
	DD	FLAT:??_C@_06CEONEMF@no?9nyn?$AA@
	DD	FLAT:??_C@_02LJIJIGOO@nn?$AA@
	DD	FLAT:??_C@_09EFOHCCMD@sgn?9be?9fr?$AA@
	DD	FLAT:??_C@_03LMKAJBCG@sfb?$AA@
	DD	FLAT:??_C@_09JPLFEMKE@sgn?9be?9nl?$AA@
	DD	FLAT:??_C@_03JGCELOPE@vgt?$AA@
	DD	FLAT:??_C@_09HACMGFCP@sgn?9ch?9de?$AA@
	DD	FLAT:??_C@_03MABFAPFE@sgg?$AA@
	DD	FLAT:??_C@_08JPPBCICM@zh?9guoyu?$AA@
	DD	FLAT:??_C@_03EMFJGGFE@cmn?$AA@
	DD	FLAT:??_C@_08EFKJJMKH@zh?9hakka?$AA@
	DD	FLAT:??_C@_03OPDFOMHE@hak?$AA@
	DD	FLAT:??_C@_06ICEJFADO@zh?9min?$AA@
	DD	FLAT:??_C@_0N@MGLKBMFP@nan?9x?9zh?9min?$AA@
	DD	FLAT:??_C@_0L@OIGDLNJ@zh?9min?9nan?$AA@
	DD	FLAT:??_C@_03LHCJEHON@nan?$AA@
	DD	FLAT:??_C@_08EJCDFAPE@zh?9xiang?$AA@
	DD	FLAT:??_C@_03INOAGPCP@hsn?$AA@
	DD	00H
	DD	00H
_DEPRECATEDLANGS DB 'iw', 00H
	ORG $+1
	DB	'he', 00H
	ORG $+1
	DB	'ji', 00H
	ORG $+1
	DB	'yi', 00H
	ORG $+1
	DB	'in', 00H
	ORG $+1
	DB	'id', 00H
	ORG $+1
CONST	ENDS
PUBLIC	_ultag_isUnicodeLocaleKey_56
EXTRN	_strlen:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File d:\mozilla\intl\icu\source\common\uloc_tag.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT _ultag_isUnicodeLocaleKey_56
_TEXT	SEGMENT
_s$ = 8							; size = 4
_len$ = 12						; size = 4
_ultag_isUnicodeLocaleKey_56 PROC			; COMDAT
; Line 412
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 413
	cmp	DWORD PTR _len$[ebp], 0
	jge	SHORT $LN2@ultag_isUn
; Line 414
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	mov	DWORD PTR _len$[ebp], eax
$LN2@ultag_isUn:
; Line 416
	cmp	DWORD PTR _len$[ebp], 2
	jne	SHORT $LN1@ultag_isUn
	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	call	__isAlphaNumericString
	add	esp, 8
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN1@ultag_isUn
; Line 417
	mov	al, 1
	jmp	SHORT $LN3@ultag_isUn
$LN1@ultag_isUn:
; Line 419
	xor	al, al
$LN3@ultag_isUn:
; Line 420
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ultag_isUnicodeLocaleKey_56 ENDP
_TEXT	ENDS
EXTRN	_uprv_isASCIILetter_56:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __isAlphaNumericString
_TEXT	SEGMENT
_i$ = -8						; size = 4
_s$ = 8							; size = 4
_len$ = 12						; size = 4
__isAlphaNumericString PROC				; COMDAT
; Line 203
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 205
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN5@isAlphaNum
$LN4@isAlphaNum:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN5@isAlphaNum:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _len$[ebp]
	jge	SHORT $LN3@isAlphaNum
; Line 206
	mov	eax, DWORD PTR _s$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	movzx	ecx, BYTE PTR [eax]
	push	ecx
	call	_uprv_isASCIILetter_56
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	jne	SHORT $LN2@isAlphaNum
	mov	eax, DWORD PTR _s$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 48					; 00000030H
	jl	SHORT $LN1@isAlphaNum
	mov	eax, DWORD PTR _s$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 57					; 00000039H
	jle	SHORT $LN2@isAlphaNum
$LN1@isAlphaNum:
; Line 207
	xor	al, al
	jmp	SHORT $LN6@isAlphaNum
$LN2@isAlphaNum:
; Line 209
	jmp	SHORT $LN4@isAlphaNum
$LN3@isAlphaNum:
; Line 210
	mov	al, 1
$LN6@isAlphaNum:
; Line 211
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__isAlphaNumericString ENDP
_TEXT	ENDS
PUBLIC	_ultag_isUnicodeLocaleType_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _ultag_isUnicodeLocaleType_56
_TEXT	SEGMENT
_subtagLen$ = -20					; size = 4
_p$ = -8						; size = 4
_s$ = 8							; size = 4
_len$ = 12						; size = 4
_ultag_isUnicodeLocaleType_56 PROC			; COMDAT
; Line 423
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 425
	mov	DWORD PTR _subtagLen$[ebp], 0
; Line 427
	cmp	DWORD PTR _len$[ebp], 0
	jge	SHORT $LN11@ultag_isUn@2
; Line 428
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	mov	DWORD PTR _len$[ebp], eax
$LN11@ultag_isUn@2:
; Line 431
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR _p$[ebp], eax
	jmp	SHORT $LN10@ultag_isUn@2
$LN9@ultag_isUn@2:
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
	mov	ecx, DWORD PTR _len$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _len$[ebp], ecx
$LN10@ultag_isUn@2:
	cmp	DWORD PTR _len$[ebp], 0
	jle	SHORT $LN8@ultag_isUn@2
; Line 432
	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 45					; 0000002dH
	jne	SHORT $LN7@ultag_isUn@2
; Line 433
	cmp	DWORD PTR _subtagLen$[ebp], 3
	jge	SHORT $LN6@ultag_isUn@2
; Line 434
	xor	al, al
	jmp	SHORT $LN12@ultag_isUn@2
$LN6@ultag_isUn@2:
; Line 436
	mov	DWORD PTR _subtagLen$[ebp], 0
	jmp	SHORT $LN5@ultag_isUn@2
$LN7@ultag_isUn@2:
; Line 437
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax]
	push	ecx
	call	_uprv_isASCIILetter_56
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	jne	SHORT $LN3@ultag_isUn@2
	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 48					; 00000030H
	jl	SHORT $LN4@ultag_isUn@2
	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 57					; 00000039H
	jg	SHORT $LN4@ultag_isUn@2
$LN3@ultag_isUn@2:
; Line 438
	mov	eax, DWORD PTR _subtagLen$[ebp]
	add	eax, 1
	mov	DWORD PTR _subtagLen$[ebp], eax
; Line 439
	cmp	DWORD PTR _subtagLen$[ebp], 8
	jle	SHORT $LN2@ultag_isUn@2
; Line 440
	xor	al, al
	jmp	SHORT $LN12@ultag_isUn@2
$LN2@ultag_isUn@2:
; Line 442
	jmp	SHORT $LN5@ultag_isUn@2
$LN4@ultag_isUn@2:
; Line 443
	xor	al, al
	jmp	SHORT $LN12@ultag_isUn@2
$LN5@ultag_isUn@2:
; Line 445
	jmp	SHORT $LN9@ultag_isUn@2
$LN8@ultag_isUn@2:
; Line 447
	xor	eax, eax
	cmp	DWORD PTR _subtagLen$[ebp], 3
	setge	al
$LN12@ultag_isUn@2:
; Line 448
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ultag_isUnicodeLocaleType_56 ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_uloc_toLanguageTag_56
EXTRN	_uenum_close_56:PROC
EXTRN	_u_terminateChars_56:PROC
EXTRN	_memcpy:PROC
EXTRN	_uprv_min_56:PROC
EXTRN	_uprv_checkValidMemory:PROC
EXTRN	_uloc_getKeywordValue_56:PROC
EXTRN	_uenum_next_56:PROC
EXTRN	_uenum_count_56:PROC
EXTRN	_uloc_openKeywords_56:PROC
EXTRN	_locale_getKeywordsStart_56:PROC
EXTRN	_uloc_canonicalize_56:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _uloc_toLanguageTag_56
_TEXT	SEGMENT
_buf$11739 = -480					; size = 100
_len$11737 = -372					; size = 4
_key$11736 = -360					; size = 4
_done$11731 = -345					; size = 1
_kwdCnt$11730 = -336					; size = 4
_kwdEnum$11729 = -324					; size = 4
_pKeywordStart$ = -312					; size = 4
_hadPosix$ = -297					; size = 1
_tmpStatus$ = -288					; size = 4
_reslen$ = -276						; size = 4
_canonical$ = -264					; size = 256
__$ArrayPad$ = -4					; size = 4
_localeID$ = 8						; size = 4
_langtag$ = 12						; size = 4
_langtagCapacity$ = 16					; size = 4
_strict$ = 20						; size = 1
_status$ = 24						; size = 4
_uloc_toLanguageTag_56 PROC				; COMDAT
; Line 2316
	push	ebp
	mov	ebp, esp
	sub	esp, 676				; 000002a4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-676]
	mov	ecx, 169				; 000000a9H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 2319
	mov	DWORD PTR _reslen$[ebp], 0
; Line 2320
	mov	DWORD PTR _tmpStatus$[ebp], 0
; Line 2321
	mov	BYTE PTR _hadPosix$[ebp], 0
; Line 2325
	mov	BYTE PTR _canonical$[ebp], 0
; Line 2326
	mov	eax, DWORD PTR _localeID$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	test	eax, eax
	jbe	SHORT $LN12@uloc_toLan
; Line 2327
	lea	eax, DWORD PTR _tmpStatus$[ebp]
	push	eax
	push	256					; 00000100H
	lea	ecx, DWORD PTR _canonical$[ebp]
	push	ecx
	mov	edx, DWORD PTR _localeID$[ebp]
	push	edx
	call	_uloc_canonicalize_56
	add	esp, 16					; 00000010H
; Line 2328
	cmp	DWORD PTR _tmpStatus$[ebp], 0
	je	SHORT $LN12@uloc_toLan
; Line 2329
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 1
; Line 2330
	xor	eax, eax
	jmp	$LN13@uloc_toLan
$LN12@uloc_toLan:
; Line 2335
	lea	eax, DWORD PTR _canonical$[ebp]
	push	eax
	call	_locale_getKeywordsStart_56
	add	esp, 4
	mov	DWORD PTR _pKeywordStart$[ebp], eax
; Line 2336
	mov	eax, DWORD PTR _pKeywordStart$[ebp]
	lea	ecx, DWORD PTR _canonical$[ebp]
	cmp	eax, ecx
	jne	$LN10@uloc_toLan
; Line 2338
	mov	DWORD PTR _kwdCnt$11730[ebp], 0
; Line 2339
	mov	BYTE PTR _done$11731[ebp], 0
; Line 2341
	lea	eax, DWORD PTR _tmpStatus$[ebp]
	push	eax
	lea	ecx, DWORD PTR _canonical$[ebp]
	push	ecx
	call	_uloc_openKeywords_56
	add	esp, 8
	mov	DWORD PTR _kwdEnum$11729[ebp], eax
; Line 2342
	cmp	DWORD PTR _kwdEnum$11729[ebp], 0
	je	$LN10@uloc_toLan
; Line 2343
	lea	eax, DWORD PTR _tmpStatus$[ebp]
	push	eax
	mov	ecx, DWORD PTR _kwdEnum$11729[ebp]
	push	ecx
	call	_uenum_count_56
	add	esp, 8
	mov	DWORD PTR _kwdCnt$11730[ebp], eax
; Line 2344
	cmp	DWORD PTR _kwdCnt$11730[ebp], 1
	jne	$LN8@uloc_toLan
; Line 2346
	mov	DWORD PTR _len$11737[ebp], 0
; Line 2348
	lea	eax, DWORD PTR _tmpStatus$[ebp]
	push	eax
	lea	ecx, DWORD PTR _len$11737[ebp]
	push	ecx
	mov	edx, DWORD PTR _kwdEnum$11729[ebp]
	push	edx
	call	_uenum_next_56
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _key$11736[ebp], eax
; Line 2349
	cmp	DWORD PTR _len$11737[ebp], 1
	jne	$LN8@uloc_toLan
	mov	eax, DWORD PTR _key$11736[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 120				; 00000078H
	jne	$LN8@uloc_toLan
; Line 2351
	mov	BYTE PTR _buf$11739[ebp], 120		; 00000078H
; Line 2352
	mov	BYTE PTR _buf$11739[ebp+1], 45		; 0000002dH
; Line 2353
	lea	eax, DWORD PTR _tmpStatus$[ebp]
	push	eax
	push	98					; 00000062H
	lea	ecx, DWORD PTR _buf$11739[ebp+2]
	push	ecx
	mov	edx, DWORD PTR _key$11736[ebp]
	push	edx
	mov	eax, DWORD PTR _localeID$[ebp]
	push	eax
	call	_uloc_getKeywordValue_56
	add	esp, 20					; 00000014H
	mov	DWORD PTR _len$11737[ebp], eax
; Line 2354
	cmp	DWORD PTR _tmpStatus$[ebp], 0
	jg	$LN6@uloc_toLan
; Line 2355
	mov	eax, DWORD PTR _len$11737[ebp]
	push	eax
	lea	ecx, DWORD PTR _buf$11739[ebp+2]
	push	ecx
	call	__isPrivateuseValueSubtags
	add	esp, 8
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN5@uloc_toLan
; Line 2357
	mov	eax, DWORD PTR _len$11737[ebp]
	add	eax, 2
	mov	DWORD PTR _reslen$[ebp], eax
; Line 2358
	push	1
	lea	eax, DWORD PTR _buf$11739[ebp]
	push	eax
	call	_uprv_checkValidMemory
	add	esp, 8
	mov	ecx, DWORD PTR _langtagCapacity$[ebp]
	push	ecx
	mov	edx, DWORD PTR _reslen$[ebp]
	push	edx
	call	_uprv_min_56
	add	esp, 8
	push	eax
	lea	eax, DWORD PTR _buf$11739[ebp]
	push	eax
	mov	ecx, DWORD PTR _langtag$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 2359
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _reslen$[ebp]
	push	ecx
	mov	edx, DWORD PTR _langtagCapacity$[ebp]
	push	edx
	mov	eax, DWORD PTR _langtag$[ebp]
	push	eax
	call	_u_terminateChars_56
	add	esp, 16					; 00000010H
; Line 2360
	mov	BYTE PTR _done$11731[ebp], 1
	jmp	SHORT $LN4@uloc_toLan
$LN5@uloc_toLan:
; Line 2361
	movsx	eax, BYTE PTR _strict$[ebp]
	test	eax, eax
	je	SHORT $LN4@uloc_toLan
; Line 2362
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 1
; Line 2363
	mov	BYTE PTR _done$11731[ebp], 1
$LN4@uloc_toLan:
; Line 2366
	jmp	SHORT $LN8@uloc_toLan
$LN6@uloc_toLan:
; Line 2367
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 1
; Line 2368
	mov	BYTE PTR _done$11731[ebp], 1
$LN8@uloc_toLan:
; Line 2372
	mov	eax, DWORD PTR _kwdEnum$11729[ebp]
	push	eax
	call	_uenum_close_56
	add	esp, 4
; Line 2373
	movsx	eax, BYTE PTR _done$11731[ebp]
	test	eax, eax
	je	SHORT $LN10@uloc_toLan
; Line 2374
	mov	eax, DWORD PTR _reslen$[ebp]
	jmp	$LN13@uloc_toLan
$LN10@uloc_toLan:
; Line 2379
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _strict$[ebp]
	push	ecx
	mov	edx, DWORD PTR _langtagCapacity$[ebp]
	push	edx
	mov	eax, DWORD PTR _langtag$[ebp]
	push	eax
	lea	ecx, DWORD PTR _canonical$[ebp]
	push	ecx
	call	__appendLanguageToLanguageTag
	add	esp, 20					; 00000014H
	add	eax, DWORD PTR _reslen$[ebp]
	mov	DWORD PTR _reslen$[ebp], eax
; Line 2380
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _strict$[ebp]
	push	ecx
	mov	edx, DWORD PTR _langtagCapacity$[ebp]
	sub	edx, DWORD PTR _reslen$[ebp]
	push	edx
	mov	eax, DWORD PTR _langtag$[ebp]
	add	eax, DWORD PTR _reslen$[ebp]
	push	eax
	lea	ecx, DWORD PTR _canonical$[ebp]
	push	ecx
	call	__appendScriptToLanguageTag
	add	esp, 20					; 00000014H
	add	eax, DWORD PTR _reslen$[ebp]
	mov	DWORD PTR _reslen$[ebp], eax
; Line 2381
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _strict$[ebp]
	push	ecx
	mov	edx, DWORD PTR _langtagCapacity$[ebp]
	sub	edx, DWORD PTR _reslen$[ebp]
	push	edx
	mov	eax, DWORD PTR _langtag$[ebp]
	add	eax, DWORD PTR _reslen$[ebp]
	push	eax
	lea	ecx, DWORD PTR _canonical$[ebp]
	push	ecx
	call	__appendRegionToLanguageTag
	add	esp, 20					; 00000014H
	add	eax, DWORD PTR _reslen$[ebp]
	mov	DWORD PTR _reslen$[ebp], eax
; Line 2382
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	lea	ecx, DWORD PTR _hadPosix$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _strict$[ebp]
	push	edx
	mov	eax, DWORD PTR _langtagCapacity$[ebp]
	sub	eax, DWORD PTR _reslen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _langtag$[ebp]
	add	ecx, DWORD PTR _reslen$[ebp]
	push	ecx
	lea	edx, DWORD PTR _canonical$[ebp]
	push	edx
	call	__appendVariantsToLanguageTag
	add	esp, 24					; 00000018H
	add	eax, DWORD PTR _reslen$[ebp]
	mov	DWORD PTR _reslen$[ebp], eax
; Line 2383
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _hadPosix$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _strict$[ebp]
	push	edx
	mov	eax, DWORD PTR _langtagCapacity$[ebp]
	sub	eax, DWORD PTR _reslen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _langtag$[ebp]
	add	ecx, DWORD PTR _reslen$[ebp]
	push	ecx
	lea	edx, DWORD PTR _canonical$[ebp]
	push	edx
	call	__appendKeywordsToLanguageTag
	add	esp, 24					; 00000018H
	add	eax, DWORD PTR _reslen$[ebp]
	mov	DWORD PTR _reslen$[ebp], eax
; Line 2384
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _hadPosix$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _strict$[ebp]
	push	edx
	mov	eax, DWORD PTR _langtagCapacity$[ebp]
	sub	eax, DWORD PTR _reslen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _langtag$[ebp]
	add	ecx, DWORD PTR _reslen$[ebp]
	push	ecx
	lea	edx, DWORD PTR _canonical$[ebp]
	push	edx
	call	__appendPrivateuseToLanguageTag
	add	esp, 24					; 00000018H
	add	eax, DWORD PTR _reslen$[ebp]
	mov	DWORD PTR _reslen$[ebp], eax
; Line 2386
	mov	eax, DWORD PTR _reslen$[ebp]
$LN13@uloc_toLan:
; Line 2387
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN21@uloc_toLan
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 676				; 000002a4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN21@uloc_toLan:
	DD	5
	DD	$LN20@uloc_toLan
$LN20@uloc_toLan:
	DD	-264					; fffffef8H
	DD	256					; 00000100H
	DD	$LN15@uloc_toLan
	DD	-288					; fffffee0H
	DD	4
	DD	$LN16@uloc_toLan
	DD	-297					; fffffed7H
	DD	1
	DD	$LN17@uloc_toLan
	DD	-372					; fffffe8cH
	DD	4
	DD	$LN18@uloc_toLan
	DD	-480					; fffffe20H
	DD	100					; 00000064H
	DD	$LN19@uloc_toLan
$LN19@uloc_toLan:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
$LN18@uloc_toLan:
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	0
$LN17@uloc_toLan:
	DB	104					; 00000068H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	80					; 00000050H
	DB	111					; 0000006fH
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	120					; 00000078H
	DB	0
$LN16@uloc_toLan:
	DB	116					; 00000074H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	115					; 00000073H
	DB	0
$LN15@uloc_toLan:
	DB	99					; 00000063H
	DB	97					; 00000061H
	DB	110					; 0000006eH
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	105					; 00000069H
	DB	99					; 00000063H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	0
_uloc_toLanguageTag_56 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __isPrivateuseValueSubtags
_TEXT	SEGMENT
_pSubtag$ = -20						; size = 4
_p$ = -8						; size = 4
_s$ = 8							; size = 4
_len$ = 12						; size = 4
__isPrivateuseValueSubtags PROC				; COMDAT
; Line 383
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 384
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR _p$[ebp], eax
; Line 385
	mov	DWORD PTR _pSubtag$[ebp], 0
; Line 387
	cmp	DWORD PTR _len$[ebp], 0
	jge	SHORT $LN8@isPrivateu
; Line 388
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	mov	DWORD PTR _len$[ebp], eax
$LN8@isPrivateu:
; Line 391
	mov	eax, DWORD PTR _p$[ebp]
	sub	eax, DWORD PTR _s$[ebp]
	cmp	eax, DWORD PTR _len$[ebp]
	jge	SHORT $LN7@isPrivateu
; Line 392
	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 45					; 0000002dH
	jne	SHORT $LN6@isPrivateu
; Line 393
	cmp	DWORD PTR _pSubtag$[ebp], 0
	jne	SHORT $LN5@isPrivateu
; Line 394
	xor	al, al
	jmp	SHORT $LN10@isPrivateu
$LN5@isPrivateu:
; Line 396
	mov	eax, DWORD PTR _p$[ebp]
	sub	eax, DWORD PTR _pSubtag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pSubtag$[ebp]
	push	ecx
	call	__isPrivateuseValueSubtag
	add	esp, 8
	movsx	edx, al
	test	edx, edx
	jne	SHORT $LN4@isPrivateu
; Line 397
	xor	al, al
	jmp	SHORT $LN10@isPrivateu
$LN4@isPrivateu:
; Line 399
	mov	DWORD PTR _pSubtag$[ebp], 0
	jmp	SHORT $LN3@isPrivateu
$LN6@isPrivateu:
; Line 400
	cmp	DWORD PTR _pSubtag$[ebp], 0
	jne	SHORT $LN3@isPrivateu
; Line 401
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR _pSubtag$[ebp], eax
$LN3@isPrivateu:
; Line 403
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
; Line 404
	jmp	SHORT $LN8@isPrivateu
$LN7@isPrivateu:
; Line 405
	cmp	DWORD PTR _pSubtag$[ebp], 0
	jne	SHORT $LN1@isPrivateu
; Line 406
	xor	al, al
	jmp	SHORT $LN10@isPrivateu
$LN1@isPrivateu:
; Line 408
	mov	eax, DWORD PTR _p$[ebp]
	sub	eax, DWORD PTR _pSubtag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pSubtag$[ebp]
	push	ecx
	call	__isPrivateuseValueSubtag
	add	esp, 8
$LN10@isPrivateu:
; Line 409
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__isPrivateuseValueSubtags ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __isPrivateuseValueSubtag
_TEXT	SEGMENT
_s$ = 8							; size = 4
_len$ = 12						; size = 4
__isPrivateuseValueSubtag PROC				; COMDAT
; Line 369
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 373
	cmp	DWORD PTR _len$[ebp], 0
	jge	SHORT $LN2@isPrivateu@2
; Line 374
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	mov	DWORD PTR _len$[ebp], eax
$LN2@isPrivateu@2:
; Line 376
	cmp	DWORD PTR _len$[ebp], 1
	jl	SHORT $LN1@isPrivateu@2
	cmp	DWORD PTR _len$[ebp], 8
	jg	SHORT $LN1@isPrivateu@2
	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	call	__isAlphaNumericString
	add	esp, 8
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN1@isPrivateu@2
; Line 377
	mov	al, 1
	jmp	SHORT $LN3@isPrivateu@2
$LN1@isPrivateu@2:
; Line 379
	xor	al, al
$LN3@isPrivateu@2:
; Line 380
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__isPrivateuseValueSubtag ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_strcpy:PROC
EXTRN	_strcmp:PROC
EXTRN	_uloc_getLanguage_56:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __appendLanguageToLanguageTag
_TEXT	SEGMENT
_reslen$ = -68						; size = 4
_i$ = -56						; size = 4
_len$ = -44						; size = 4
_tmpStatus$ = -32					; size = 4
_buf$ = -20						; size = 12
__$ArrayPad$ = -4					; size = 4
_localeID$ = 8						; size = 4
_appendAt$ = 12						; size = 4
_capacity$ = 16						; size = 4
_strict$ = 20						; size = 1
_status$ = 24						; size = 4
__appendLanguageToLanguageTag PROC			; COMDAT
; Line 628
	push	ebp
	mov	ebp, esp
	sub	esp, 264				; 00000108H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-264]
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 630
	mov	DWORD PTR _tmpStatus$[ebp], 0
; Line 632
	mov	DWORD PTR _reslen$[ebp], 0
; Line 634
	mov	eax, DWORD PTR _status$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN16@appendLang
; Line 635
	xor	eax, eax
	jmp	$LN17@appendLang
$LN16@appendLang:
; Line 638
	lea	eax, DWORD PTR _tmpStatus$[ebp]
	push	eax
	push	12					; 0000000cH
	lea	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _localeID$[ebp]
	push	edx
	call	_uloc_getLanguage_56
	add	esp, 16					; 00000010H
	mov	DWORD PTR _len$[ebp], eax
; Line 639
	cmp	DWORD PTR _tmpStatus$[ebp], 0
	jg	SHORT $LN14@appendLang
	cmp	DWORD PTR _tmpStatus$[ebp], -124	; ffffff84H
	jne	SHORT $LN15@appendLang
$LN14@appendLang:
; Line 640
	movsx	eax, BYTE PTR _strict$[ebp]
	test	eax, eax
	je	SHORT $LN13@appendLang
; Line 641
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 1
; Line 642
	xor	eax, eax
	jmp	$LN17@appendLang
$LN13@appendLang:
; Line 644
	mov	DWORD PTR _len$[ebp], 0
$LN15@appendLang:
; Line 649
	cmp	DWORD PTR _len$[ebp], 0
	jne	SHORT $LN12@appendLang
; Line 650
	mov	eax, DWORD PTR _reslen$[ebp]
	cmp	eax, DWORD PTR _capacity$[ebp]
	jge	SHORT $LN11@appendLang
; Line 651
	push	1
	push	OFFSET _LANG_UND
	call	_uprv_checkValidMemory
	add	esp, 8
	mov	eax, DWORD PTR _capacity$[ebp]
	sub	eax, DWORD PTR _reslen$[ebp]
	push	eax
	push	3
	call	_uprv_min_56
	add	esp, 8
	push	eax
	push	OFFSET _LANG_UND
	mov	ecx, DWORD PTR _appendAt$[ebp]
	add	ecx, DWORD PTR _reslen$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN11@appendLang:
; Line 653
	mov	eax, DWORD PTR _reslen$[ebp]
	add	eax, 3
	mov	DWORD PTR _reslen$[ebp], eax
	jmp	$LN10@appendLang
$LN12@appendLang:
; Line 654
	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	lea	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	call	__isLanguageSubtag
	add	esp, 8
	movsx	edx, al
	test	edx, edx
	jne	SHORT $LN9@appendLang
; Line 656
	movsx	eax, BYTE PTR _strict$[ebp]
	test	eax, eax
	je	SHORT $LN8@appendLang
; Line 657
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 1
; Line 658
	xor	eax, eax
	jmp	$LN17@appendLang
$LN8@appendLang:
; Line 660
	mov	eax, DWORD PTR _reslen$[ebp]
	cmp	eax, DWORD PTR _capacity$[ebp]
	jge	SHORT $LN7@appendLang
; Line 661
	push	1
	push	OFFSET _LANG_UND
	call	_uprv_checkValidMemory
	add	esp, 8
	mov	eax, DWORD PTR _capacity$[ebp]
	sub	eax, DWORD PTR _reslen$[ebp]
	push	eax
	push	3
	call	_uprv_min_56
	add	esp, 8
	push	eax
	push	OFFSET _LANG_UND
	mov	ecx, DWORD PTR _appendAt$[ebp]
	add	ecx, DWORD PTR _reslen$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN7@appendLang:
; Line 663
	mov	eax, DWORD PTR _reslen$[ebp]
	add	eax, 3
	mov	DWORD PTR _reslen$[ebp], eax
; Line 664
	jmp	$LN10@appendLang
$LN9@appendLang:
; Line 666
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN5@appendLang
$LN4@appendLang:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 2
	mov	DWORD PTR _i$[ebp], eax
$LN5@appendLang:
	cmp	DWORD PTR _i$[ebp], 6
	jge	SHORT $LN3@appendLang
; Line 667
	mov	eax, DWORD PTR _i$[ebp]
	lea	ecx, DWORD PTR _DEPRECATEDLANGS[eax*4]
	push	ecx
	lea	edx, DWORD PTR _buf$[ebp]
	push	edx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN2@appendLang
; Line 668
	mov	eax, DWORD PTR _i$[ebp]
	lea	ecx, DWORD PTR _DEPRECATEDLANGS[eax*4+4]
	push	ecx
	lea	edx, DWORD PTR _buf$[ebp]
	push	edx
	call	_strcpy
	add	esp, 8
; Line 669
	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	mov	DWORD PTR _len$[ebp], eax
; Line 670
	jmp	SHORT $LN3@appendLang
$LN2@appendLang:
; Line 672
	jmp	SHORT $LN4@appendLang
$LN3@appendLang:
; Line 673
	mov	eax, DWORD PTR _reslen$[ebp]
	cmp	eax, DWORD PTR _capacity$[ebp]
	jge	SHORT $LN1@appendLang
; Line 674
	push	1
	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	call	_uprv_checkValidMemory
	add	esp, 8
	mov	ecx, DWORD PTR _capacity$[ebp]
	sub	ecx, DWORD PTR _reslen$[ebp]
	push	ecx
	mov	edx, DWORD PTR _len$[ebp]
	push	edx
	call	_uprv_min_56
	add	esp, 8
	push	eax
	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _appendAt$[ebp]
	add	ecx, DWORD PTR _reslen$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@appendLang:
; Line 676
	mov	eax, DWORD PTR _reslen$[ebp]
	add	eax, DWORD PTR _len$[ebp]
	mov	DWORD PTR _reslen$[ebp], eax
$LN10@appendLang:
; Line 678
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _reslen$[ebp]
	push	ecx
	mov	edx, DWORD PTR _capacity$[ebp]
	push	edx
	mov	eax, DWORD PTR _appendAt$[ebp]
	push	eax
	call	_u_terminateChars_56
	add	esp, 16					; 00000010H
; Line 679
	mov	eax, DWORD PTR _reslen$[ebp]
$LN17@appendLang:
; Line 680
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN22@appendLang
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 264				; 00000108H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN22@appendLang:
	DD	2
	DD	$LN21@appendLang
$LN21@appendLang:
	DD	-20					; ffffffecH
	DD	12					; 0000000cH
	DD	$LN19@appendLang
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN20@appendLang
$LN20@appendLang:
	DB	116					; 00000074H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	115					; 00000073H
	DB	0
$LN19@appendLang:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
__appendLanguageToLanguageTag ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __isLanguageSubtag
_TEXT	SEGMENT
_s$ = 8							; size = 4
_len$ = 12						; size = 4
__isLanguageSubtag PROC					; COMDAT
; Line 214
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 222
	cmp	DWORD PTR _len$[ebp], 0
	jge	SHORT $LN2@isLanguage
; Line 223
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	mov	DWORD PTR _len$[ebp], eax
$LN2@isLanguage:
; Line 225
	cmp	DWORD PTR _len$[ebp], 2
	jl	SHORT $LN1@isLanguage
	cmp	DWORD PTR _len$[ebp], 8
	jg	SHORT $LN1@isLanguage
	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	call	__isAlphaString
	add	esp, 8
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN1@isLanguage
; Line 226
	mov	al, 1
	jmp	SHORT $LN3@isLanguage
$LN1@isLanguage:
; Line 228
	xor	al, al
$LN3@isLanguage:
; Line 229
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__isLanguageSubtag ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __isAlphaString
_TEXT	SEGMENT
_i$ = -8						; size = 4
_s$ = 8							; size = 4
_len$ = 12						; size = 4
__isAlphaString PROC					; COMDAT
; Line 181
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 183
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@isAlphaStr
$LN3@isAlphaStr:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@isAlphaStr:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _len$[ebp]
	jge	SHORT $LN2@isAlphaStr
; Line 184
	mov	eax, DWORD PTR _s$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	movzx	ecx, BYTE PTR [eax]
	push	ecx
	call	_uprv_isASCIILetter_56
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	jne	SHORT $LN1@isAlphaStr
; Line 185
	xor	al, al
	jmp	SHORT $LN5@isAlphaStr
$LN1@isAlphaStr:
; Line 187
	jmp	SHORT $LN3@isAlphaStr
$LN2@isAlphaStr:
; Line 188
	mov	al, 1
$LN5@isAlphaStr:
; Line 189
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__isAlphaString ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_uloc_getScript_56:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __appendScriptToLanguageTag
_TEXT	SEGMENT
_reslen$ = -52						; size = 4
_len$ = -40						; size = 4
_tmpStatus$ = -28					; size = 4
_buf$ = -16						; size = 6
__$ArrayPad$ = -4					; size = 4
_localeID$ = 8						; size = 4
_appendAt$ = 12						; size = 4
_capacity$ = 16						; size = 4
_strict$ = 20						; size = 1
_status$ = 24						; size = 4
__appendScriptToLanguageTag PROC			; COMDAT
; Line 683
	push	ebp
	mov	ebp, esp
	sub	esp, 248				; 000000f8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-248]
	mov	ecx, 62					; 0000003eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 685
	mov	DWORD PTR _tmpStatus$[ebp], 0
; Line 687
	mov	DWORD PTR _reslen$[ebp], 0
; Line 689
	mov	eax, DWORD PTR _status$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN10@appendScri
; Line 690
	xor	eax, eax
	jmp	$LN11@appendScri
$LN10@appendScri:
; Line 693
	lea	eax, DWORD PTR _tmpStatus$[ebp]
	push	eax
	push	6
	lea	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _localeID$[ebp]
	push	edx
	call	_uloc_getScript_56
	add	esp, 16					; 00000010H
	mov	DWORD PTR _len$[ebp], eax
; Line 694
	cmp	DWORD PTR _tmpStatus$[ebp], 0
	jg	SHORT $LN8@appendScri
	cmp	DWORD PTR _tmpStatus$[ebp], -124	; ffffff84H
	jne	SHORT $LN9@appendScri
$LN8@appendScri:
; Line 695
	movsx	eax, BYTE PTR _strict$[ebp]
	test	eax, eax
	je	SHORT $LN7@appendScri
; Line 696
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 1
$LN7@appendScri:
; Line 698
	xor	eax, eax
	jmp	$LN11@appendScri
$LN9@appendScri:
; Line 701
	cmp	DWORD PTR _len$[ebp], 0
	jle	$LN6@appendScri
; Line 702
	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	lea	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	call	__isScriptSubtag
	add	esp, 8
	movsx	edx, al
	test	edx, edx
	jne	SHORT $LN5@appendScri
; Line 704
	movsx	eax, BYTE PTR _strict$[ebp]
	test	eax, eax
	je	SHORT $LN4@appendScri
; Line 705
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 1
$LN4@appendScri:
; Line 707
	xor	eax, eax
	jmp	SHORT $LN11@appendScri
; Line 708
	jmp	SHORT $LN6@appendScri
$LN5@appendScri:
; Line 709
	mov	eax, DWORD PTR _reslen$[ebp]
	cmp	eax, DWORD PTR _capacity$[ebp]
	jge	SHORT $LN2@appendScri
; Line 710
	mov	eax, DWORD PTR _appendAt$[ebp]
	add	eax, DWORD PTR _reslen$[ebp]
	mov	BYTE PTR [eax], 45			; 0000002dH
$LN2@appendScri:
; Line 712
	mov	eax, DWORD PTR _reslen$[ebp]
	add	eax, 1
	mov	DWORD PTR _reslen$[ebp], eax
; Line 714
	mov	eax, DWORD PTR _reslen$[ebp]
	cmp	eax, DWORD PTR _capacity$[ebp]
	jge	SHORT $LN1@appendScri
; Line 715
	push	1
	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	call	_uprv_checkValidMemory
	add	esp, 8
	mov	ecx, DWORD PTR _capacity$[ebp]
	sub	ecx, DWORD PTR _reslen$[ebp]
	push	ecx
	mov	edx, DWORD PTR _len$[ebp]
	push	edx
	call	_uprv_min_56
	add	esp, 8
	push	eax
	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _appendAt$[ebp]
	add	ecx, DWORD PTR _reslen$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@appendScri:
; Line 717
	mov	eax, DWORD PTR _reslen$[ebp]
	add	eax, DWORD PTR _len$[ebp]
	mov	DWORD PTR _reslen$[ebp], eax
$LN6@appendScri:
; Line 720
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _reslen$[ebp]
	push	ecx
	mov	edx, DWORD PTR _capacity$[ebp]
	push	edx
	mov	eax, DWORD PTR _appendAt$[ebp]
	push	eax
	call	_u_terminateChars_56
	add	esp, 16					; 00000010H
; Line 721
	mov	eax, DWORD PTR _reslen$[ebp]
$LN11@appendScri:
; Line 722
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN16@appendScri
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 248				; 000000f8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN16@appendScri:
	DD	2
	DD	$LN15@appendScri
$LN15@appendScri:
	DD	-16					; fffffff0H
	DD	6
	DD	$LN13@appendScri
	DD	-28					; ffffffe4H
	DD	4
	DD	$LN14@appendScri
$LN14@appendScri:
	DB	116					; 00000074H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	115					; 00000073H
	DB	0
$LN13@appendScri:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
__appendScriptToLanguageTag ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __isScriptSubtag
_TEXT	SEGMENT
_s$ = 8							; size = 4
_len$ = 12						; size = 4
__isScriptSubtag PROC					; COMDAT
; Line 247
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 251
	cmp	DWORD PTR _len$[ebp], 0
	jge	SHORT $LN2@isScriptSu
; Line 252
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	mov	DWORD PTR _len$[ebp], eax
$LN2@isScriptSu:
; Line 254
	cmp	DWORD PTR _len$[ebp], 4
	jne	SHORT $LN1@isScriptSu
	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	call	__isAlphaString
	add	esp, 8
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN1@isScriptSu
; Line 255
	mov	al, 1
	jmp	SHORT $LN3@isScriptSu
$LN1@isScriptSu:
; Line 257
	xor	al, al
$LN3@isScriptSu:
; Line 258
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__isScriptSubtag ENDP
_TEXT	ENDS
EXTRN	_uloc_getCountry_56:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __appendRegionToLanguageTag
_TEXT	SEGMENT
_reslen$ = -44						; size = 4
_len$ = -32						; size = 4
_tmpStatus$ = -20					; size = 4
_buf$ = -8						; size = 4
_localeID$ = 8						; size = 4
_appendAt$ = 12						; size = 4
_capacity$ = 16						; size = 4
_strict$ = 20						; size = 1
_status$ = 24						; size = 4
__appendRegionToLanguageTag PROC			; COMDAT
; Line 725
	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 727
	mov	DWORD PTR _tmpStatus$[ebp], 0
; Line 729
	mov	DWORD PTR _reslen$[ebp], 0
; Line 731
	mov	eax, DWORD PTR _status$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN10@appendRegi
; Line 732
	xor	eax, eax
	jmp	$LN11@appendRegi
$LN10@appendRegi:
; Line 735
	lea	eax, DWORD PTR _tmpStatus$[ebp]
	push	eax
	push	4
	lea	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _localeID$[ebp]
	push	edx
	call	_uloc_getCountry_56
	add	esp, 16					; 00000010H
	mov	DWORD PTR _len$[ebp], eax
; Line 736
	cmp	DWORD PTR _tmpStatus$[ebp], 0
	jg	SHORT $LN8@appendRegi
	cmp	DWORD PTR _tmpStatus$[ebp], -124	; ffffff84H
	jne	SHORT $LN9@appendRegi
$LN8@appendRegi:
; Line 737
	movsx	eax, BYTE PTR _strict$[ebp]
	test	eax, eax
	je	SHORT $LN7@appendRegi
; Line 738
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 1
$LN7@appendRegi:
; Line 740
	xor	eax, eax
	jmp	$LN11@appendRegi
$LN9@appendRegi:
; Line 743
	cmp	DWORD PTR _len$[ebp], 0
	jle	$LN6@appendRegi
; Line 744
	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	lea	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	call	__isRegionSubtag
	add	esp, 8
	movsx	edx, al
	test	edx, edx
	jne	SHORT $LN5@appendRegi
; Line 746
	movsx	eax, BYTE PTR _strict$[ebp]
	test	eax, eax
	je	SHORT $LN4@appendRegi
; Line 747
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 1
$LN4@appendRegi:
; Line 749
	xor	eax, eax
	jmp	SHORT $LN11@appendRegi
; Line 750
	jmp	SHORT $LN6@appendRegi
$LN5@appendRegi:
; Line 751
	mov	eax, DWORD PTR _reslen$[ebp]
	cmp	eax, DWORD PTR _capacity$[ebp]
	jge	SHORT $LN2@appendRegi
; Line 752
	mov	eax, DWORD PTR _appendAt$[ebp]
	add	eax, DWORD PTR _reslen$[ebp]
	mov	BYTE PTR [eax], 45			; 0000002dH
$LN2@appendRegi:
; Line 754
	mov	eax, DWORD PTR _reslen$[ebp]
	add	eax, 1
	mov	DWORD PTR _reslen$[ebp], eax
; Line 756
	mov	eax, DWORD PTR _reslen$[ebp]
	cmp	eax, DWORD PTR _capacity$[ebp]
	jge	SHORT $LN1@appendRegi
; Line 757
	push	1
	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	call	_uprv_checkValidMemory
	add	esp, 8
	mov	ecx, DWORD PTR _capacity$[ebp]
	sub	ecx, DWORD PTR _reslen$[ebp]
	push	ecx
	mov	edx, DWORD PTR _len$[ebp]
	push	edx
	call	_uprv_min_56
	add	esp, 8
	push	eax
	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _appendAt$[ebp]
	add	ecx, DWORD PTR _reslen$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@appendRegi:
; Line 759
	mov	eax, DWORD PTR _reslen$[ebp]
	add	eax, DWORD PTR _len$[ebp]
	mov	DWORD PTR _reslen$[ebp], eax
$LN6@appendRegi:
; Line 762
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _reslen$[ebp]
	push	ecx
	mov	edx, DWORD PTR _capacity$[ebp]
	push	edx
	mov	eax, DWORD PTR _appendAt$[ebp]
	push	eax
	call	_u_terminateChars_56
	add	esp, 16					; 00000010H
; Line 763
	mov	eax, DWORD PTR _reslen$[ebp]
$LN11@appendRegi:
; Line 764
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN16@appendRegi
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN16@appendRegi:
	DD	2
	DD	$LN15@appendRegi
$LN15@appendRegi:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN13@appendRegi
	DD	-20					; ffffffecH
	DD	4
	DD	$LN14@appendRegi
$LN14@appendRegi:
	DB	116					; 00000074H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	115					; 00000073H
	DB	0
$LN13@appendRegi:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
__appendRegionToLanguageTag ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __isRegionSubtag
_TEXT	SEGMENT
_s$ = 8							; size = 4
_len$ = 12						; size = 4
__isRegionSubtag PROC					; COMDAT
; Line 261
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 266
	cmp	DWORD PTR _len$[ebp], 0
	jge	SHORT $LN3@isRegionSu
; Line 267
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	mov	DWORD PTR _len$[ebp], eax
$LN3@isRegionSu:
; Line 269
	cmp	DWORD PTR _len$[ebp], 2
	jne	SHORT $LN2@isRegionSu
	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	call	__isAlphaString
	add	esp, 8
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN2@isRegionSu
; Line 270
	mov	al, 1
	jmp	SHORT $LN4@isRegionSu
$LN2@isRegionSu:
; Line 272
	cmp	DWORD PTR _len$[ebp], 3
	jne	SHORT $LN1@isRegionSu
	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	call	__isNumericString
	add	esp, 8
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN1@isRegionSu
; Line 273
	mov	al, 1
	jmp	SHORT $LN4@isRegionSu
$LN1@isRegionSu:
; Line 275
	xor	al, al
$LN4@isRegionSu:
; Line 276
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__isRegionSubtag ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __isNumericString
_TEXT	SEGMENT
_i$ = -8						; size = 4
_s$ = 8							; size = 4
_len$ = 12						; size = 4
__isNumericString PROC					; COMDAT
; Line 192
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 194
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN5@isNumericS
$LN4@isNumericS:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN5@isNumericS:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _len$[ebp]
	jge	SHORT $LN3@isNumericS
; Line 195
	mov	eax, DWORD PTR _s$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 48					; 00000030H
	jl	SHORT $LN1@isNumericS
	mov	eax, DWORD PTR _s$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 57					; 00000039H
	jle	SHORT $LN2@isNumericS
$LN1@isNumericS:
; Line 196
	xor	al, al
	jmp	SHORT $LN6@isNumericS
$LN2@isNumericS:
; Line 198
	jmp	SHORT $LN4@isNumericS
$LN3@isNumericS:
; Line 199
	mov	al, 1
$LN6@isNumericS:
; Line 200
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
__isNumericString ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_uprv_free_56:PROC
EXTRN	_uprv_malloc_56:PROC
EXTRN	_uprv_asciitolower_56:PROC
EXTRN	_uloc_getVariant_56:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __appendVariantsToLanguageTag
_TEXT	SEGMENT
_tmpVar$11006 = -300					; size = 4
_varLen$10994 = -288					; size = 4
_varFirst$10956 = -276					; size = 4
_var$10955 = -264					; size = 4
_bNext$10954 = -249					; size = 1
_pVar$10953 = -240					; size = 4
_p$10952 = -228						; size = 4
_reslen$ = -216						; size = 4
_i$ = -204						; size = 4
_len$ = -192						; size = 4
_tmpStatus$ = -180					; size = 4
_buf$ = -168						; size = 157
__$ArrayPad$ = -4					; size = 4
_localeID$ = 8						; size = 4
_appendAt$ = 12						; size = 4
_capacity$ = 16						; size = 4
_strict$ = 20						; size = 1
_hadPosix$ = 24						; size = 4
_status$ = 28						; size = 4
__appendVariantsToLanguageTag PROC			; COMDAT
; Line 767
	push	ebp
	mov	ebp, esp
	sub	esp, 496				; 000001f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-496]
	mov	ecx, 124				; 0000007cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 769
	mov	DWORD PTR _tmpStatus$[ebp], 0
; Line 771
	mov	DWORD PTR _reslen$[ebp], 0
; Line 773
	mov	eax, DWORD PTR _status$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN39@appendVari
; Line 774
	xor	eax, eax
	jmp	$LN40@appendVari
$LN39@appendVari:
; Line 777
	lea	eax, DWORD PTR _tmpStatus$[ebp]
	push	eax
	push	157					; 0000009dH
	lea	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _localeID$[ebp]
	push	edx
	call	_uloc_getVariant_56
	add	esp, 16					; 00000010H
	mov	DWORD PTR _len$[ebp], eax
; Line 778
	cmp	DWORD PTR _tmpStatus$[ebp], 0
	jg	SHORT $LN37@appendVari
	cmp	DWORD PTR _tmpStatus$[ebp], -124	; ffffff84H
	jne	SHORT $LN38@appendVari
$LN37@appendVari:
; Line 779
	movsx	eax, BYTE PTR _strict$[ebp]
	test	eax, eax
	je	SHORT $LN36@appendVari
; Line 780
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 1
$LN36@appendVari:
; Line 782
	xor	eax, eax
	jmp	$LN40@appendVari
$LN38@appendVari:
; Line 785
	cmp	DWORD PTR _len$[ebp], 0
	jle	$LN35@appendVari
; Line 787
	mov	BYTE PTR _bNext$10954[ebp], 1
; Line 789
	mov	DWORD PTR _varFirst$10956[ebp], 0
; Line 791
	mov	DWORD PTR _pVar$10953[ebp], 0
; Line 792
	lea	eax, DWORD PTR _buf$[ebp]
	mov	DWORD PTR _p$10952[ebp], eax
$LN34@appendVari:
; Line 793
	movsx	eax, BYTE PTR _bNext$10954[ebp]
	test	eax, eax
	je	$LN33@appendVari
; Line 794
	mov	eax, DWORD PTR _p$10952[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 45					; 0000002dH
	je	SHORT $LN31@appendVari
	mov	eax, DWORD PTR _p$10952[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 95					; 0000005fH
	je	SHORT $LN31@appendVari
	mov	eax, DWORD PTR _p$10952[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	$LN32@appendVari
$LN31@appendVari:
; Line 795
	mov	eax, DWORD PTR _p$10952[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN30@appendVari
; Line 796
	mov	BYTE PTR _bNext$10954[ebp], 0
; Line 797
	jmp	SHORT $LN29@appendVari
$LN30@appendVari:
; Line 798
	mov	eax, DWORD PTR _p$10952[ebp]
	mov	BYTE PTR [eax], 0
$LN29@appendVari:
; Line 800
	cmp	DWORD PTR _pVar$10953[ebp], 0
	jne	SHORT $LN28@appendVari
; Line 801
	movsx	eax, BYTE PTR _strict$[ebp]
	test	eax, eax
	je	SHORT $LN27@appendVari
; Line 802
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 1
; Line 803
	jmp	$LN33@appendVari
$LN27@appendVari:
; Line 806
	jmp	$LN26@appendVari
$LN28@appendVari:
; Line 809
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN25@appendVari
$LN24@appendVari:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN25@appendVari:
	mov	eax, DWORD PTR _pVar$10953[ebp]
	add	eax, DWORD PTR _i$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN23@appendVari
; Line 810
	mov	eax, DWORD PTR _pVar$10953[ebp]
	add	eax, DWORD PTR _i$[ebp]
	movzx	ecx, BYTE PTR [eax]
	push	ecx
	call	_uprv_asciitolower_56
	add	esp, 4
	mov	edx, DWORD PTR _pVar$10953[ebp]
	add	edx, DWORD PTR _i$[ebp]
	mov	BYTE PTR [edx], al
; Line 811
	jmp	SHORT $LN24@appendVari
$LN23@appendVari:
; Line 814
	push	-1
	mov	eax, DWORD PTR _pVar$10953[ebp]
	push	eax
	call	__isVariantSubtag
	add	esp, 8
	movsx	ecx, al
	test	ecx, ecx
	je	$LN22@appendVari
; Line 815
	push	OFFSET _POSIX_VALUE
	mov	eax, DWORD PTR _pVar$10953[ebp]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN20@appendVari
	push	OFFSET _POSIX_VALUE
	call	_strlen
	add	esp, 4
	cmp	DWORD PTR _len$[ebp], eax
	je	SHORT $LN21@appendVari
$LN20@appendVari:
; Line 817
	push	8
	call	_uprv_malloc_56
	add	esp, 4
	mov	DWORD PTR _var$10955[ebp], eax
; Line 818
	cmp	DWORD PTR _var$10955[ebp], 0
	jne	SHORT $LN19@appendVari
; Line 819
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 7
; Line 820
	jmp	$LN33@appendVari
$LN19@appendVari:
; Line 822
	mov	eax, DWORD PTR _var$10955[ebp]
	mov	ecx, DWORD PTR _pVar$10953[ebp]
	mov	DWORD PTR [eax], ecx
; Line 823
	mov	eax, DWORD PTR _var$10955[ebp]
	push	eax
	lea	ecx, DWORD PTR _varFirst$10956[ebp]
	push	ecx
	call	__addVariantToList
	add	esp, 8
	movsx	edx, al
	test	edx, edx
	jne	SHORT $LN18@appendVari
; Line 825
	mov	eax, DWORD PTR _var$10955[ebp]
	push	eax
	call	_uprv_free_56
	add	esp, 4
; Line 826
	movsx	eax, BYTE PTR _strict$[ebp]
	test	eax, eax
	je	SHORT $LN18@appendVari
; Line 827
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 1
; Line 828
	jmp	SHORT $LN33@appendVari
$LN18@appendVari:
; Line 831
	jmp	SHORT $LN16@appendVari
$LN21@appendVari:
; Line 834
	mov	eax, DWORD PTR _hadPosix$[ebp]
	mov	BYTE PTR [eax], 1
$LN16@appendVari:
; Line 835
	jmp	SHORT $LN26@appendVari
$LN22@appendVari:
; Line 836
	movsx	eax, BYTE PTR _strict$[ebp]
	test	eax, eax
	je	SHORT $LN14@appendVari
; Line 837
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 1
; Line 838
	jmp	SHORT $LN33@appendVari
	jmp	SHORT $LN26@appendVari
$LN14@appendVari:
; Line 839
	push	-1
	mov	eax, DWORD PTR _pVar$10953[ebp]
	push	eax
	call	__isPrivateuseValueSubtag
	add	esp, 8
	movsx	ecx, al
	test	ecx, ecx
	je	SHORT $LN26@appendVari
; Line 841
	jmp	SHORT $LN33@appendVari
$LN26@appendVari:
; Line 845
	mov	DWORD PTR _pVar$10953[ebp], 0
	jmp	SHORT $LN11@appendVari
$LN32@appendVari:
; Line 846
	cmp	DWORD PTR _pVar$10953[ebp], 0
	jne	SHORT $LN11@appendVari
; Line 847
	mov	eax, DWORD PTR _p$10952[ebp]
	mov	DWORD PTR _pVar$10953[ebp], eax
$LN11@appendVari:
; Line 849
	mov	eax, DWORD PTR _p$10952[ebp]
	add	eax, 1
	mov	DWORD PTR _p$10952[ebp], eax
; Line 850
	jmp	$LN34@appendVari
$LN33@appendVari:
; Line 852
	mov	eax, DWORD PTR _status$[ebp]
	cmp	DWORD PTR [eax], 0
	jg	$LN9@appendVari
; Line 853
	cmp	DWORD PTR _varFirst$10956[ebp], 0
	je	$LN9@appendVari
; Line 857
	mov	eax, DWORD PTR _varFirst$10956[ebp]
	mov	DWORD PTR _var$10955[ebp], eax
$LN7@appendVari:
; Line 858
	cmp	DWORD PTR _var$10955[ebp], 0
	je	$LN9@appendVari
; Line 859
	mov	eax, DWORD PTR _reslen$[ebp]
	cmp	eax, DWORD PTR _capacity$[ebp]
	jge	SHORT $LN5@appendVari
; Line 860
	mov	eax, DWORD PTR _appendAt$[ebp]
	add	eax, DWORD PTR _reslen$[ebp]
	mov	BYTE PTR [eax], 45			; 0000002dH
$LN5@appendVari:
; Line 862
	mov	eax, DWORD PTR _reslen$[ebp]
	add	eax, 1
	mov	DWORD PTR _reslen$[ebp], eax
; Line 863
	mov	eax, DWORD PTR _var$10955[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_strlen
	add	esp, 4
	mov	DWORD PTR _varLen$10994[ebp], eax
; Line 864
	mov	eax, DWORD PTR _reslen$[ebp]
	cmp	eax, DWORD PTR _capacity$[ebp]
	jge	SHORT $LN4@appendVari
; Line 865
	push	1
	mov	eax, DWORD PTR _var$10955[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_uprv_checkValidMemory
	add	esp, 8
	mov	edx, DWORD PTR _capacity$[ebp]
	sub	edx, DWORD PTR _reslen$[ebp]
	push	edx
	mov	eax, DWORD PTR _varLen$10994[ebp]
	push	eax
	call	_uprv_min_56
	add	esp, 8
	push	eax
	mov	ecx, DWORD PTR _var$10955[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _appendAt$[ebp]
	add	eax, DWORD PTR _reslen$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN4@appendVari:
; Line 867
	mov	eax, DWORD PTR _reslen$[ebp]
	add	eax, DWORD PTR _varLen$10994[ebp]
	mov	DWORD PTR _reslen$[ebp], eax
; Line 868
	mov	eax, DWORD PTR _var$10955[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _var$10955[ebp], ecx
; Line 869
	jmp	$LN7@appendVari
$LN9@appendVari:
; Line 874
	mov	eax, DWORD PTR _varFirst$10956[ebp]
	mov	DWORD PTR _var$10955[ebp], eax
$LN3@appendVari:
; Line 875
	cmp	DWORD PTR _var$10955[ebp], 0
	je	SHORT $LN2@appendVari
; Line 876
	mov	eax, DWORD PTR _var$10955[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _tmpVar$11006[ebp], ecx
; Line 877
	mov	eax, DWORD PTR _var$10955[ebp]
	push	eax
	call	_uprv_free_56
	add	esp, 4
; Line 878
	mov	eax, DWORD PTR _tmpVar$11006[ebp]
	mov	DWORD PTR _var$10955[ebp], eax
; Line 879
	jmp	SHORT $LN3@appendVari
$LN2@appendVari:
; Line 881
	mov	eax, DWORD PTR _status$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN35@appendVari
; Line 882
	xor	eax, eax
	jmp	SHORT $LN40@appendVari
$LN35@appendVari:
; Line 886
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _reslen$[ebp]
	push	ecx
	mov	edx, DWORD PTR _capacity$[ebp]
	push	edx
	mov	eax, DWORD PTR _appendAt$[ebp]
	push	eax
	call	_u_terminateChars_56
	add	esp, 16					; 00000010H
; Line 887
	mov	eax, DWORD PTR _reslen$[ebp]
$LN40@appendVari:
; Line 888
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN46@appendVari
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 496				; 000001f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN46@appendVari:
	DD	3
	DD	$LN45@appendVari
$LN45@appendVari:
	DD	-168					; ffffff58H
	DD	157					; 0000009dH
	DD	$LN42@appendVari
	DD	-180					; ffffff4cH
	DD	4
	DD	$LN43@appendVari
	DD	-276					; fffffeecH
	DD	4
	DD	$LN44@appendVari
$LN44@appendVari:
	DB	118					; 00000076H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	70					; 00000046H
	DB	105					; 00000069H
	DB	114					; 00000072H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	0
$LN43@appendVari:
	DB	116					; 00000074H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	115					; 00000073H
	DB	0
$LN42@appendVari:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
__appendVariantsToLanguageTag ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __isVariantSubtag
_TEXT	SEGMENT
_s$ = 8							; size = 4
_len$ = 12						; size = 4
__isVariantSubtag PROC					; COMDAT
; Line 279
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 284
	cmp	DWORD PTR _len$[ebp], 0
	jge	SHORT $LN3@isVariantS
; Line 285
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	mov	DWORD PTR _len$[ebp], eax
$LN3@isVariantS:
; Line 287
	cmp	DWORD PTR _len$[ebp], 5
	jl	SHORT $LN2@isVariantS
	cmp	DWORD PTR _len$[ebp], 8
	jg	SHORT $LN2@isVariantS
	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	call	__isAlphaNumericString
	add	esp, 8
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN2@isVariantS
; Line 288
	mov	al, 1
	jmp	SHORT $LN4@isVariantS
$LN2@isVariantS:
; Line 290
	cmp	DWORD PTR _len$[ebp], 4
	jne	SHORT $LN1@isVariantS
	mov	eax, DWORD PTR _s$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 48					; 00000030H
	jl	SHORT $LN1@isVariantS
	mov	eax, DWORD PTR _s$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 57					; 00000039H
	jg	SHORT $LN1@isVariantS
	push	3
	mov	eax, DWORD PTR _s$[ebp]
	add	eax, 1
	push	eax
	call	__isAlphaNumericString
	add	esp, 8
	movsx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@isVariantS
; Line 291
	mov	al, 1
	jmp	SHORT $LN4@isVariantS
$LN1@isVariantS:
; Line 293
	xor	al, al
$LN4@isVariantS:
; Line 294
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__isVariantSubtag ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __addVariantToList
_TEXT	SEGMENT
_cmp$10748 = -44					; size = 4
_cur$10747 = -32					; size = 4
_prev$10746 = -20					; size = 4
_bAdded$ = -5						; size = 1
_first$ = 8						; size = 4
_var$ = 12						; size = 4
__addVariantToList PROC					; COMDAT
; Line 458
	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 459
	mov	BYTE PTR _bAdded$[ebp], 1
; Line 461
	mov	eax, DWORD PTR _first$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN6@addVariant
; Line 462
	mov	eax, DWORD PTR _var$[ebp]
	mov	DWORD PTR [eax+4], 0
; Line 463
	mov	eax, DWORD PTR _first$[ebp]
	mov	ecx, DWORD PTR _var$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 464
	jmp	SHORT $LN5@addVariant
$LN6@addVariant:
; Line 469
	mov	DWORD PTR _prev$10746[ebp], 0
; Line 470
	mov	eax, DWORD PTR _first$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _cur$10747[ebp], ecx
$LN4@addVariant:
; Line 471
	mov	eax, 1
	test	eax, eax
	je	SHORT $LN5@addVariant
; Line 472
	cmp	DWORD PTR _cur$10747[ebp], 0
	jne	SHORT $LN2@addVariant
; Line 473
	mov	eax, DWORD PTR _prev$10746[ebp]
	mov	ecx, DWORD PTR _var$[ebp]
	mov	DWORD PTR [eax+4], ecx
; Line 474
	mov	eax, DWORD PTR _var$[ebp]
	mov	DWORD PTR [eax+4], 0
; Line 475
	jmp	SHORT $LN5@addVariant
$LN2@addVariant:
; Line 479
	mov	eax, DWORD PTR _cur$10747[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _var$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_strcmp
	add	esp, 8
	mov	DWORD PTR _cmp$10748[ebp], eax
; Line 480
	cmp	DWORD PTR _cmp$10748[ebp], 0
	jne	SHORT $LN1@addVariant
; Line 482
	mov	BYTE PTR _bAdded$[ebp], 0
; Line 483
	jmp	SHORT $LN5@addVariant
$LN1@addVariant:
; Line 485
	mov	eax, DWORD PTR _cur$10747[ebp]
	mov	DWORD PTR _prev$10746[ebp], eax
; Line 486
	mov	eax, DWORD PTR _cur$10747[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _cur$10747[ebp], ecx
; Line 487
	jmp	SHORT $LN4@addVariant
$LN5@addVariant:
; Line 490
	mov	al, BYTE PTR _bAdded$[ebp]
; Line 491
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__addVariantToList ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_T_CString_toLowerCase_56:PROC
EXTRN	_uloc_toUnicodeLocaleType_56:PROC
EXTRN	_uloc_toUnicodeLocaleKey_56:PROC
EXTRN	_memset:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __appendKeywordsToLanguageTag
_TEXT	SEGMENT
_pValue$11157 = -612					; size = 4
_tmpAttr$11156 = -600					; size = 4
_tmpExt$11151 = -588					; size = 4
_startLDMLExtension$11124 = -573			; size = 1
_bcpValueLen$11092 = -564				; size = 4
_i$11062 = -552						; size = 4
_isBcpUExt$11049 = -537					; size = 1
_keylen$11048 = -528					; size = 4
_tmpStatus$11047 = -516					; size = 4
_bcpValue$11046 = -504					; size = 4
_bcpKey$11045 = -492					; size = 4
_extBufCapacity$11044 = -480				; size = 4
_pExtBuf$11043 = -468					; size = 4
_extBuf$11042 = -456					; size = 100
_attrValue$11041 = -348					; size = 4
_attr$11040 = -336					; size = 4
_firstAttr$11038 = -324					; size = 4
_ext$11037 = -312					; size = 4
_firstExt$11035 = -300					; size = 4
_key$11034 = -288					; size = 4
_len$11033 = -276					; size = 4
_reslen$ = -264						; size = 4
_keywordEnum$ = -252					; size = 4
_isAttribute$ = -237					; size = 1
_attrBufLength$ = -228					; size = 4
_attrBuf$ = -216					; size = 100
_buf$ = -108						; size = 100
__$ArrayPad$ = -4					; size = 4
_localeID$ = 8						; size = 4
_appendAt$ = 12						; size = 4
_capacity$ = 16						; size = 4
_strict$ = 20						; size = 1
_hadPosix$ = 24						; size = 1
_status$ = 28						; size = 4
__appendKeywordsToLanguageTag PROC			; COMDAT
; Line 891
	push	ebp
	mov	ebp, esp
	sub	esp, 808				; 00000328H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-808]
	mov	ecx, 202				; 000000caH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 893
	mov	BYTE PTR _attrBuf$[ebp], 0
	push	99					; 00000063H
	push	0
	lea	eax, DWORD PTR _attrBuf$[ebp+1]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
; Line 894
	mov	DWORD PTR _attrBufLength$[ebp], 0
; Line 895
	mov	BYTE PTR _isAttribute$[ebp], 0
; Line 896
	mov	DWORD PTR _keywordEnum$[ebp], 0
; Line 897
	mov	DWORD PTR _reslen$[ebp], 0
; Line 899
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _localeID$[ebp]
	push	ecx
	call	_uloc_openKeywords_56
	add	esp, 8
	mov	DWORD PTR _keywordEnum$[ebp], eax
; Line 900
	mov	eax, DWORD PTR _status$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN75@appendKeyw
	movsx	eax, BYTE PTR _hadPosix$[ebp]
	test	eax, eax
	jne	SHORT $LN75@appendKeyw
; Line 901
	mov	eax, DWORD PTR _keywordEnum$[ebp]
	push	eax
	call	_uenum_close_56
	add	esp, 4
; Line 902
	xor	eax, eax
	jmp	$LN76@appendKeyw
$LN75@appendKeyw:
; Line 904
	cmp	DWORD PTR _keywordEnum$[ebp], 0
	jne	SHORT $LN73@appendKeyw
	movsx	eax, BYTE PTR _hadPosix$[ebp]
	test	eax, eax
	je	$LN74@appendKeyw
$LN73@appendKeyw:
; Line 908
	mov	DWORD PTR _firstExt$11035[ebp], 0
; Line 910
	mov	DWORD PTR _firstAttr$11038[ebp], 0
; Line 914
	lea	eax, DWORD PTR _extBuf$11042[ebp]
	mov	DWORD PTR _pExtBuf$11043[ebp], eax
; Line 915
	mov	DWORD PTR _extBufCapacity$11044[ebp], 100 ; 00000064H
; Line 917
	mov	DWORD PTR _tmpStatus$11047[ebp], 0
$LN72@appendKeyw:
; Line 921
	mov	eax, 1
	test	eax, eax
	je	$LN71@appendKeyw
; Line 922
	mov	BYTE PTR _isAttribute$[ebp], 0
; Line 923
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _keywordEnum$[ebp]
	push	ecx
	call	_uenum_next_56
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _key$11034[ebp], eax
; Line 924
	cmp	DWORD PTR _key$11034[ebp], 0
	jne	SHORT $LN70@appendKeyw
; Line 925
	jmp	$LN71@appendKeyw
$LN70@appendKeyw:
; Line 927
	lea	eax, DWORD PTR _tmpStatus$11047[ebp]
	push	eax
	push	100					; 00000064H
	lea	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _key$11034[ebp]
	push	edx
	mov	eax, DWORD PTR _localeID$[ebp]
	push	eax
	call	_uloc_getKeywordValue_56
	add	esp, 20					; 00000014H
	mov	DWORD PTR _len$11033[ebp], eax
; Line 929
	cmp	DWORD PTR _tmpStatus$11047[ebp], 0
	jg	SHORT $LN68@appendKeyw
	cmp	DWORD PTR _tmpStatus$11047[ebp], -124	; ffffff84H
	jne	SHORT $LN69@appendKeyw
$LN68@appendKeyw:
; Line 930
	movsx	eax, BYTE PTR _strict$[ebp]
	test	eax, eax
	je	SHORT $LN67@appendKeyw
; Line 931
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 1
; Line 932
	jmp	$LN71@appendKeyw
$LN67@appendKeyw:
; Line 935
	mov	DWORD PTR _tmpStatus$11047[ebp], 0
; Line 936
	jmp	$LN72@appendKeyw
$LN69@appendKeyw:
; Line 939
	mov	eax, DWORD PTR _key$11034[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	mov	DWORD PTR _keylen$11048[ebp], eax
; Line 940
	xor	eax, eax
	cmp	DWORD PTR _keylen$11048[ebp], 1
	setg	al
	mov	BYTE PTR _isBcpUExt$11049[ebp], al
; Line 943
	push	OFFSET _LOCALE_ATTRIBUTE_KEY
	mov	eax, DWORD PTR _key$11034[ebp]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	$LN66@appendKeyw
; Line 944
	mov	BYTE PTR _isAttribute$[ebp], 1
; Line 945
	cmp	DWORD PTR _len$11033[ebp], 0
	jle	$LN65@appendKeyw
; Line 946
	mov	DWORD PTR _i$11062[ebp], 0
$LN64@appendKeyw:
; Line 947
	mov	eax, 1
	test	eax, eax
	je	$LN65@appendKeyw
; Line 948
	mov	DWORD PTR _attrBufLength$[ebp], 0
	jmp	SHORT $LN62@appendKeyw
$LN61@appendKeyw:
; Line 949
	mov	eax, DWORD PTR _i$11062[ebp]
	add	eax, 1
	mov	DWORD PTR _i$11062[ebp], eax
$LN62@appendKeyw:
	mov	eax, DWORD PTR _i$11062[ebp]
	cmp	eax, DWORD PTR _len$11033[ebp]
	jge	SHORT $LN60@appendKeyw
; Line 950
	mov	eax, DWORD PTR _i$11062[ebp]
	movsx	ecx, BYTE PTR _buf$[ebp+eax]
	cmp	ecx, 45					; 0000002dH
	je	SHORT $LN59@appendKeyw
; Line 951
	mov	eax, DWORD PTR _attrBufLength$[ebp]
	mov	ecx, DWORD PTR _i$11062[ebp]
	mov	dl, BYTE PTR _buf$[ebp+ecx]
	mov	BYTE PTR _attrBuf$[ebp+eax], dl
	mov	eax, DWORD PTR _attrBufLength$[ebp]
	add	eax, 1
	mov	DWORD PTR _attrBufLength$[ebp], eax
; Line 952
	jmp	SHORT $LN58@appendKeyw
$LN59@appendKeyw:
; Line 953
	mov	eax, DWORD PTR _i$11062[ebp]
	add	eax, 1
	mov	DWORD PTR _i$11062[ebp], eax
; Line 954
	jmp	SHORT $LN60@appendKeyw
$LN58@appendKeyw:
; Line 956
	jmp	SHORT $LN61@appendKeyw
$LN60@appendKeyw:
; Line 957
	cmp	DWORD PTR _attrBufLength$[ebp], 0
	jle	SHORT $LN57@appendKeyw
; Line 958
	mov	eax, DWORD PTR _attrBufLength$[ebp]
	mov	BYTE PTR _attrBuf$[ebp+eax], 0
	jmp	SHORT $LN56@appendKeyw
$LN57@appendKeyw:
; Line 960
	mov	eax, DWORD PTR _i$11062[ebp]
	cmp	eax, DWORD PTR _len$11033[ebp]
	jl	SHORT $LN56@appendKeyw
; Line 961
	jmp	$LN65@appendKeyw
$LN56@appendKeyw:
; Line 965
	push	8
	call	_uprv_malloc_56
	add	esp, 4
	mov	DWORD PTR _attr$11040[ebp], eax
; Line 966
	cmp	DWORD PTR _attr$11040[ebp], 0
	jne	SHORT $LN54@appendKeyw
; Line 967
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 7
; Line 968
	jmp	$LN65@appendKeyw
$LN54@appendKeyw:
; Line 970
	mov	eax, DWORD PTR _attrBufLength$[ebp]
	add	eax, 1
	push	eax
	call	_uprv_malloc_56
	add	esp, 4
	mov	DWORD PTR _attrValue$11041[ebp], eax
; Line 971
	cmp	DWORD PTR _attrValue$11041[ebp], 0
	jne	SHORT $LN53@appendKeyw
; Line 972
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 7
; Line 973
	jmp	SHORT $LN65@appendKeyw
$LN53@appendKeyw:
; Line 975
	lea	eax, DWORD PTR _attrBuf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _attrValue$11041[ebp]
	push	ecx
	call	_strcpy
	add	esp, 8
; Line 976
	mov	eax, DWORD PTR _attr$11040[ebp]
	mov	ecx, DWORD PTR _attrValue$11041[ebp]
	mov	DWORD PTR [eax], ecx
; Line 978
	mov	eax, DWORD PTR _attr$11040[ebp]
	push	eax
	lea	ecx, DWORD PTR _firstAttr$11038[ebp]
	push	ecx
	call	__addAttributeToList
	add	esp, 8
	movsx	edx, al
	test	edx, edx
	jne	SHORT $LN52@appendKeyw
; Line 979
	mov	eax, DWORD PTR _attr$11040[ebp]
	push	eax
	call	_uprv_free_56
	add	esp, 4
; Line 980
	mov	eax, DWORD PTR _attrValue$11041[ebp]
	push	eax
	call	_uprv_free_56
	add	esp, 4
; Line 981
	movsx	eax, BYTE PTR _strict$[ebp]
	test	eax, eax
	je	SHORT $LN52@appendKeyw
; Line 982
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 1
; Line 983
	jmp	SHORT $LN65@appendKeyw
$LN52@appendKeyw:
; Line 986
	jmp	$LN64@appendKeyw
$LN65@appendKeyw:
; Line 987
	jmp	$LN50@appendKeyw
$LN66@appendKeyw:
; Line 988
	movsx	eax, BYTE PTR _isBcpUExt$11049[ebp]
	test	eax, eax
	je	$LN49@appendKeyw
; Line 989
	mov	eax, DWORD PTR _key$11034[ebp]
	push	eax
	call	_uloc_toUnicodeLocaleKey_56
	add	esp, 4
	mov	DWORD PTR _bcpKey$11045[ebp], eax
; Line 990
	cmp	DWORD PTR _bcpKey$11045[ebp], 0
	jne	SHORT $LN48@appendKeyw
; Line 991
	movsx	eax, BYTE PTR _strict$[ebp]
	test	eax, eax
	je	SHORT $LN47@appendKeyw
; Line 992
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 1
; Line 993
	jmp	$LN71@appendKeyw
$LN47@appendKeyw:
; Line 995
	jmp	$LN72@appendKeyw
$LN48@appendKeyw:
; Line 999
	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _key$11034[ebp]
	push	ecx
	call	_uloc_toUnicodeLocaleType_56
	add	esp, 8
	mov	DWORD PTR _bcpValue$11046[ebp], eax
; Line 1000
	cmp	DWORD PTR _bcpValue$11046[ebp], 0
	jne	SHORT $LN46@appendKeyw
; Line 1001
	movsx	eax, BYTE PTR _strict$[ebp]
	test	eax, eax
	je	SHORT $LN45@appendKeyw
; Line 1002
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 1
; Line 1003
	jmp	$LN71@appendKeyw
$LN45@appendKeyw:
; Line 1005
	jmp	$LN72@appendKeyw
$LN46@appendKeyw:
; Line 1007
	mov	eax, DWORD PTR _bcpValue$11046[ebp]
	lea	ecx, DWORD PTR _buf$[ebp]
	cmp	eax, ecx
	jne	$LN44@appendKeyw
; Line 1014
	mov	eax, DWORD PTR _bcpValue$11046[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	mov	DWORD PTR _bcpValueLen$11092[ebp], eax
; Line 1015
	mov	eax, DWORD PTR _bcpValueLen$11092[ebp]
	cmp	eax, DWORD PTR _extBufCapacity$11044[ebp]
	jge	SHORT $LN43@appendKeyw
; Line 1016
	mov	eax, DWORD PTR _bcpValue$11046[ebp]
	push	eax
	mov	ecx, DWORD PTR _pExtBuf$11043[ebp]
	push	ecx
	call	_strcpy
	add	esp, 8
; Line 1017
	mov	eax, DWORD PTR _pExtBuf$11043[ebp]
	push	eax
	call	_T_CString_toLowerCase_56
	add	esp, 4
; Line 1019
	mov	eax, DWORD PTR _pExtBuf$11043[ebp]
	mov	DWORD PTR _bcpValue$11046[ebp], eax
; Line 1021
	mov	eax, DWORD PTR _bcpValueLen$11092[ebp]
	mov	ecx, DWORD PTR _pExtBuf$11043[ebp]
	lea	edx, DWORD PTR [ecx+eax+1]
	mov	DWORD PTR _pExtBuf$11043[ebp], edx
; Line 1022
	mov	eax, DWORD PTR _bcpValueLen$11092[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _extBufCapacity$11044[ebp]
	sub	ecx, eax
	mov	DWORD PTR _extBufCapacity$11044[ebp], ecx
; Line 1023
	jmp	SHORT $LN44@appendKeyw
$LN43@appendKeyw:
; Line 1024
	movsx	eax, BYTE PTR _strict$[ebp]
	test	eax, eax
	je	SHORT $LN41@appendKeyw
; Line 1025
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 1
; Line 1026
	jmp	$LN71@appendKeyw
$LN41@appendKeyw:
; Line 1028
	jmp	$LN72@appendKeyw
$LN44@appendKeyw:
; Line 1031
	jmp	$LN50@appendKeyw
$LN49@appendKeyw:
; Line 1032
	mov	eax, DWORD PTR _key$11034[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 120				; 00000078H
	jne	SHORT $LN39@appendKeyw
; Line 1033
	mov	eax, DWORD PTR _len$11033[ebp]
	push	eax
	lea	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	call	__isPrivateuseValueSubtags
	add	esp, 8
	movsx	edx, al
	test	edx, edx
	jne	SHORT $LN38@appendKeyw
; Line 1034
	movsx	eax, BYTE PTR _strict$[ebp]
	test	eax, eax
	je	SHORT $LN37@appendKeyw
; Line 1035
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 1
; Line 1036
	jmp	$LN71@appendKeyw
$LN37@appendKeyw:
; Line 1038
	jmp	$LN72@appendKeyw
$LN38@appendKeyw:
; Line 1040
	jmp	SHORT $LN36@appendKeyw
$LN39@appendKeyw:
; Line 1041
	mov	eax, DWORD PTR _keylen$11048[ebp]
	push	eax
	mov	ecx, DWORD PTR _key$11034[ebp]
	push	ecx
	call	__isExtensionSingleton
	add	esp, 8
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN34@appendKeyw
	mov	eax, DWORD PTR _len$11033[ebp]
	push	eax
	lea	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	call	__isExtensionSubtags
	add	esp, 8
	movsx	edx, al
	test	edx, edx
	jne	SHORT $LN36@appendKeyw
$LN34@appendKeyw:
; Line 1042
	movsx	eax, BYTE PTR _strict$[ebp]
	test	eax, eax
	je	SHORT $LN33@appendKeyw
; Line 1043
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 1
; Line 1044
	jmp	$LN71@appendKeyw
$LN33@appendKeyw:
; Line 1046
	jmp	$LN72@appendKeyw
$LN36@appendKeyw:
; Line 1049
	mov	eax, DWORD PTR _key$11034[ebp]
	mov	DWORD PTR _bcpKey$11045[ebp], eax
; Line 1050
	mov	eax, DWORD PTR _len$11033[ebp]
	add	eax, 1
	cmp	eax, DWORD PTR _extBufCapacity$11044[ebp]
	jge	SHORT $LN32@appendKeyw
; Line 1051
	push	1
	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	call	_uprv_checkValidMemory
	add	esp, 8
	mov	ecx, DWORD PTR _len$11033[ebp]
	push	ecx
	lea	edx, DWORD PTR _buf$[ebp]
	push	edx
	mov	eax, DWORD PTR _pExtBuf$11043[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 1052
	mov	eax, DWORD PTR _pExtBuf$11043[ebp]
	mov	DWORD PTR _bcpValue$11046[ebp], eax
; Line 1054
	mov	eax, DWORD PTR _pExtBuf$11043[ebp]
	add	eax, DWORD PTR _len$11033[ebp]
	mov	DWORD PTR _pExtBuf$11043[ebp], eax
; Line 1056
	mov	eax, DWORD PTR _pExtBuf$11043[ebp]
	mov	BYTE PTR [eax], 0
; Line 1057
	mov	eax, DWORD PTR _pExtBuf$11043[ebp]
	add	eax, 1
	mov	DWORD PTR _pExtBuf$11043[ebp], eax
; Line 1059
	mov	eax, DWORD PTR _len$11033[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _extBufCapacity$11044[ebp]
	sub	ecx, eax
	mov	DWORD PTR _extBufCapacity$11044[ebp], ecx
; Line 1060
	jmp	SHORT $LN50@appendKeyw
$LN32@appendKeyw:
; Line 1061
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 1
; Line 1062
	jmp	$LN71@appendKeyw
$LN50@appendKeyw:
; Line 1066
	movsx	eax, BYTE PTR _isAttribute$[ebp]
	test	eax, eax
	jne	$LN30@appendKeyw
; Line 1068
	push	12					; 0000000cH
	call	_uprv_malloc_56
	add	esp, 4
	mov	DWORD PTR _ext$11037[ebp], eax
; Line 1069
	cmp	DWORD PTR _ext$11037[ebp], 0
	jne	SHORT $LN29@appendKeyw
; Line 1070
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 7
; Line 1071
	jmp	SHORT $LN71@appendKeyw
$LN29@appendKeyw:
; Line 1073
	mov	eax, DWORD PTR _ext$11037[ebp]
	mov	ecx, DWORD PTR _bcpKey$11045[ebp]
	mov	DWORD PTR [eax], ecx
; Line 1074
	mov	eax, DWORD PTR _ext$11037[ebp]
	mov	ecx, DWORD PTR _bcpValue$11046[ebp]
	mov	DWORD PTR [eax+4], ecx
; Line 1076
	push	1
	mov	eax, DWORD PTR _ext$11037[ebp]
	push	eax
	lea	ecx, DWORD PTR _firstExt$11035[ebp]
	push	ecx
	call	__addExtensionToList
	add	esp, 12					; 0000000cH
	movsx	edx, al
	test	edx, edx
	jne	SHORT $LN30@appendKeyw
; Line 1077
	mov	eax, DWORD PTR _ext$11037[ebp]
	push	eax
	call	_uprv_free_56
	add	esp, 4
; Line 1078
	movsx	eax, BYTE PTR _strict$[ebp]
	test	eax, eax
	je	SHORT $LN30@appendKeyw
; Line 1079
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 1
; Line 1080
	jmp	SHORT $LN71@appendKeyw
$LN30@appendKeyw:
; Line 1084
	jmp	$LN72@appendKeyw
$LN71@appendKeyw:
; Line 1087
	movsx	eax, BYTE PTR _hadPosix$[ebp]
	test	eax, eax
	je	SHORT $LN26@appendKeyw
; Line 1089
	push	12					; 0000000cH
	call	_uprv_malloc_56
	add	esp, 4
	mov	DWORD PTR _ext$11037[ebp], eax
; Line 1090
	cmp	DWORD PTR _ext$11037[ebp], 0
	jne	SHORT $LN25@appendKeyw
; Line 1091
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 7
; Line 1092
	jmp	$cleanup$11118
$LN25@appendKeyw:
; Line 1094
	mov	eax, DWORD PTR _ext$11037[ebp]
	mov	DWORD PTR [eax], OFFSET _POSIX_KEY
; Line 1095
	mov	eax, DWORD PTR _ext$11037[ebp]
	mov	DWORD PTR [eax+4], OFFSET _POSIX_VALUE
; Line 1097
	push	1
	mov	eax, DWORD PTR _ext$11037[ebp]
	push	eax
	lea	ecx, DWORD PTR _firstExt$11035[ebp]
	push	ecx
	call	__addExtensionToList
	add	esp, 12					; 0000000cH
	movsx	edx, al
	test	edx, edx
	jne	SHORT $LN26@appendKeyw
; Line 1098
	mov	eax, DWORD PTR _ext$11037[ebp]
	push	eax
	call	_uprv_free_56
	add	esp, 4
$LN26@appendKeyw:
; Line 1102
	mov	eax, DWORD PTR _status$[ebp]
	cmp	DWORD PTR [eax], 0
	jg	$cleanup$11118
	cmp	DWORD PTR _firstExt$11035[ebp], 0
	jne	SHORT $LN22@appendKeyw
	cmp	DWORD PTR _firstAttr$11038[ebp], 0
	je	$cleanup$11118
$LN22@appendKeyw:
; Line 1103
	mov	BYTE PTR _startLDMLExtension$11124[ebp], 0
; Line 1105
	mov	eax, DWORD PTR _firstAttr$11038[ebp]
	mov	DWORD PTR _attr$11040[ebp], eax
; Line 1106
	mov	eax, DWORD PTR _firstExt$11035[ebp]
	mov	DWORD PTR _ext$11037[ebp], eax
$LN21@appendKeyw:
; Line 1108
	movsx	eax, BYTE PTR _startLDMLExtension$11124[ebp]
	test	eax, eax
	jne	SHORT $LN18@appendKeyw
	cmp	DWORD PTR _ext$11037[ebp], 0
	je	SHORT $LN18@appendKeyw
	mov	eax, DWORD PTR _ext$11037[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_strlen
	add	esp, 4
	cmp	eax, 1
	jbe	SHORT $LN18@appendKeyw
; Line 1110
	mov	eax, DWORD PTR _reslen$[ebp]
	cmp	eax, DWORD PTR _capacity$[ebp]
	jge	SHORT $LN17@appendKeyw
; Line 1111
	mov	eax, DWORD PTR _appendAt$[ebp]
	add	eax, DWORD PTR _reslen$[ebp]
	mov	BYTE PTR [eax], 45			; 0000002dH
$LN17@appendKeyw:
; Line 1113
	mov	eax, DWORD PTR _reslen$[ebp]
	add	eax, 1
	mov	DWORD PTR _reslen$[ebp], eax
; Line 1114
	mov	eax, DWORD PTR _reslen$[ebp]
	cmp	eax, DWORD PTR _capacity$[ebp]
	jge	SHORT $LN16@appendKeyw
; Line 1115
	mov	eax, DWORD PTR _appendAt$[ebp]
	add	eax, DWORD PTR _reslen$[ebp]
	mov	BYTE PTR [eax], 117			; 00000075H
$LN16@appendKeyw:
; Line 1117
	mov	eax, DWORD PTR _reslen$[ebp]
	add	eax, 1
	mov	DWORD PTR _reslen$[ebp], eax
; Line 1119
	mov	BYTE PTR _startLDMLExtension$11124[ebp], 1
$LN18@appendKeyw:
; Line 1123
	cmp	DWORD PTR _ext$11037[ebp], 0
	je	$LN15@appendKeyw
	mov	eax, DWORD PTR _ext$11037[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_strlen
	add	esp, 4
	cmp	eax, 1
	je	SHORT $LN14@appendKeyw
	cmp	DWORD PTR _attr$11040[ebp], 0
	jne	$LN15@appendKeyw
$LN14@appendKeyw:
; Line 1124
	mov	eax, DWORD PTR _reslen$[ebp]
	cmp	eax, DWORD PTR _capacity$[ebp]
	jge	SHORT $LN13@appendKeyw
; Line 1125
	mov	eax, DWORD PTR _appendAt$[ebp]
	add	eax, DWORD PTR _reslen$[ebp]
	mov	BYTE PTR [eax], 45			; 0000002dH
$LN13@appendKeyw:
; Line 1127
	mov	eax, DWORD PTR _reslen$[ebp]
	add	eax, 1
	mov	DWORD PTR _reslen$[ebp], eax
; Line 1128
	mov	eax, DWORD PTR _ext$11037[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_strlen
	add	esp, 4
	mov	DWORD PTR _len$11033[ebp], eax
; Line 1129
	mov	eax, DWORD PTR _reslen$[ebp]
	cmp	eax, DWORD PTR _capacity$[ebp]
	jge	SHORT $LN12@appendKeyw
; Line 1130
	push	1
	mov	eax, DWORD PTR _ext$11037[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_uprv_checkValidMemory
	add	esp, 8
	mov	edx, DWORD PTR _capacity$[ebp]
	sub	edx, DWORD PTR _reslen$[ebp]
	push	edx
	mov	eax, DWORD PTR _len$11033[ebp]
	push	eax
	call	_uprv_min_56
	add	esp, 8
	push	eax
	mov	ecx, DWORD PTR _ext$11037[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _appendAt$[ebp]
	add	eax, DWORD PTR _reslen$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN12@appendKeyw:
; Line 1132
	mov	eax, DWORD PTR _reslen$[ebp]
	add	eax, DWORD PTR _len$11033[ebp]
	mov	DWORD PTR _reslen$[ebp], eax
; Line 1133
	mov	eax, DWORD PTR _reslen$[ebp]
	cmp	eax, DWORD PTR _capacity$[ebp]
	jge	SHORT $LN11@appendKeyw
; Line 1134
	mov	eax, DWORD PTR _appendAt$[ebp]
	add	eax, DWORD PTR _reslen$[ebp]
	mov	BYTE PTR [eax], 45			; 0000002dH
$LN11@appendKeyw:
; Line 1136
	mov	eax, DWORD PTR _reslen$[ebp]
	add	eax, 1
	mov	DWORD PTR _reslen$[ebp], eax
; Line 1137
	mov	eax, DWORD PTR _ext$11037[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	_strlen
	add	esp, 4
	mov	DWORD PTR _len$11033[ebp], eax
; Line 1138
	mov	eax, DWORD PTR _reslen$[ebp]
	cmp	eax, DWORD PTR _capacity$[ebp]
	jge	SHORT $LN10@appendKeyw
; Line 1139
	push	1
	mov	eax, DWORD PTR _ext$11037[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	_uprv_checkValidMemory
	add	esp, 8
	mov	edx, DWORD PTR _capacity$[ebp]
	sub	edx, DWORD PTR _reslen$[ebp]
	push	edx
	mov	eax, DWORD PTR _len$11033[ebp]
	push	eax
	call	_uprv_min_56
	add	esp, 8
	push	eax
	mov	ecx, DWORD PTR _ext$11037[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _appendAt$[ebp]
	add	eax, DWORD PTR _reslen$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN10@appendKeyw:
; Line 1141
	mov	eax, DWORD PTR _reslen$[ebp]
	add	eax, DWORD PTR _len$11033[ebp]
	mov	DWORD PTR _reslen$[ebp], eax
; Line 1143
	mov	eax, DWORD PTR _ext$11037[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _ext$11037[ebp], ecx
	jmp	$LN20@appendKeyw
$LN15@appendKeyw:
; Line 1144
	cmp	DWORD PTR _attr$11040[ebp], 0
	je	$LN20@appendKeyw
; Line 1146
	mov	eax, DWORD PTR _reslen$[ebp]
	cmp	eax, DWORD PTR _capacity$[ebp]
	jge	SHORT $LN7@appendKeyw
; Line 1147
	mov	eax, DWORD PTR _appendAt$[ebp]
	add	eax, DWORD PTR _reslen$[ebp]
	mov	BYTE PTR [eax], 45			; 0000002dH
$LN7@appendKeyw:
; Line 1149
	mov	eax, DWORD PTR _reslen$[ebp]
	add	eax, 1
	mov	DWORD PTR _reslen$[ebp], eax
; Line 1150
	mov	eax, DWORD PTR _attr$11040[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_strlen
	add	esp, 4
	mov	DWORD PTR _len$11033[ebp], eax
; Line 1151
	mov	eax, DWORD PTR _reslen$[ebp]
	cmp	eax, DWORD PTR _capacity$[ebp]
	jge	SHORT $LN6@appendKeyw
; Line 1152
	push	1
	mov	eax, DWORD PTR _attr$11040[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_uprv_checkValidMemory
	add	esp, 8
	mov	edx, DWORD PTR _capacity$[ebp]
	sub	edx, DWORD PTR _reslen$[ebp]
	push	edx
	mov	eax, DWORD PTR _len$11033[ebp]
	push	eax
	call	_uprv_min_56
	add	esp, 8
	push	eax
	mov	ecx, DWORD PTR _attr$11040[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _appendAt$[ebp]
	add	eax, DWORD PTR _reslen$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN6@appendKeyw:
; Line 1154
	mov	eax, DWORD PTR _reslen$[ebp]
	add	eax, DWORD PTR _len$11033[ebp]
	mov	DWORD PTR _reslen$[ebp], eax
; Line 1156
	mov	eax, DWORD PTR _attr$11040[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _attr$11040[ebp], ecx
$LN20@appendKeyw:
; Line 1158
	cmp	DWORD PTR _attr$11040[ebp], 0
	jne	$LN21@appendKeyw
	cmp	DWORD PTR _ext$11037[ebp], 0
	jne	$LN21@appendKeyw
$cleanup$11118:
; Line 1162
	mov	eax, DWORD PTR _firstExt$11035[ebp]
	mov	DWORD PTR _ext$11037[ebp], eax
$LN5@appendKeyw:
; Line 1163
	cmp	DWORD PTR _ext$11037[ebp], 0
	je	SHORT $LN4@appendKeyw
; Line 1164
	mov	eax, DWORD PTR _ext$11037[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _tmpExt$11151[ebp], ecx
; Line 1165
	mov	eax, DWORD PTR _ext$11037[ebp]
	push	eax
	call	_uprv_free_56
	add	esp, 4
; Line 1166
	mov	eax, DWORD PTR _tmpExt$11151[ebp]
	mov	DWORD PTR _ext$11037[ebp], eax
; Line 1167
	jmp	SHORT $LN5@appendKeyw
$LN4@appendKeyw:
; Line 1169
	mov	eax, DWORD PTR _firstAttr$11038[ebp]
	mov	DWORD PTR _attr$11040[ebp], eax
$LN3@appendKeyw:
; Line 1170
	cmp	DWORD PTR _attr$11040[ebp], 0
	je	SHORT $LN2@appendKeyw
; Line 1171
	mov	eax, DWORD PTR _attr$11040[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _tmpAttr$11156[ebp], ecx
; Line 1172
	mov	eax, DWORD PTR _attr$11040[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pValue$11157[ebp], ecx
; Line 1173
	mov	eax, DWORD PTR _pValue$11157[ebp]
	push	eax
	call	_uprv_free_56
	add	esp, 4
; Line 1174
	mov	eax, DWORD PTR _attr$11040[ebp]
	push	eax
	call	_uprv_free_56
	add	esp, 4
; Line 1175
	mov	eax, DWORD PTR _tmpAttr$11156[ebp]
	mov	DWORD PTR _attr$11040[ebp], eax
; Line 1176
	jmp	SHORT $LN3@appendKeyw
$LN2@appendKeyw:
; Line 1178
	mov	eax, DWORD PTR _keywordEnum$[ebp]
	push	eax
	call	_uenum_close_56
	add	esp, 4
; Line 1180
	mov	eax, DWORD PTR _status$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN74@appendKeyw
; Line 1181
	xor	eax, eax
	jmp	SHORT $LN76@appendKeyw
$LN74@appendKeyw:
; Line 1185
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _reslen$[ebp]
	push	ecx
	mov	edx, DWORD PTR _capacity$[ebp]
	push	edx
	mov	eax, DWORD PTR _appendAt$[ebp]
	push	eax
	call	_u_terminateChars_56
	add	esp, 16					; 00000010H
$LN76@appendKeyw:
; Line 1186
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN92@appendKeyw
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 808				; 00000328H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN92@appendKeyw:
	DD	6
	DD	$LN91@appendKeyw
$LN91@appendKeyw:
	DD	-108					; ffffff94H
	DD	100					; 00000064H
	DD	$LN85@appendKeyw
	DD	-216					; ffffff28H
	DD	100					; 00000064H
	DD	$LN86@appendKeyw
	DD	-300					; fffffed4H
	DD	4
	DD	$LN87@appendKeyw
	DD	-324					; fffffebcH
	DD	4
	DD	$LN88@appendKeyw
	DD	-456					; fffffe38H
	DD	100					; 00000064H
	DD	$LN89@appendKeyw
	DD	-516					; fffffdfcH
	DD	4
	DD	$LN90@appendKeyw
$LN90@appendKeyw:
	DB	116					; 00000074H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	115					; 00000073H
	DB	0
$LN89@appendKeyw:
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	116					; 00000074H
	DB	66					; 00000042H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
$LN88@appendKeyw:
	DB	102					; 00000066H
	DB	105					; 00000069H
	DB	114					; 00000072H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	65					; 00000041H
	DB	116					; 00000074H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	0
$LN87@appendKeyw:
	DB	102					; 00000066H
	DB	105					; 00000069H
	DB	114					; 00000072H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	69					; 00000045H
	DB	120					; 00000078H
	DB	116					; 00000074H
	DB	0
$LN86@appendKeyw:
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	66					; 00000042H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
$LN85@appendKeyw:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
__appendKeywordsToLanguageTag ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __isExtensionSingleton
_TEXT	SEGMENT
_s$ = 8							; size = 4
_len$ = 12						; size = 4
__isExtensionSingleton PROC				; COMDAT
; Line 312
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 316
	cmp	DWORD PTR _len$[ebp], 0
	jge	SHORT $LN2@isExtensio
; Line 317
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	mov	DWORD PTR _len$[ebp], eax
$LN2@isExtensio:
; Line 319
	cmp	DWORD PTR _len$[ebp], 1
	jne	SHORT $LN1@isExtensio
	mov	eax, DWORD PTR _s$[ebp]
	movzx	ecx, BYTE PTR [eax]
	push	ecx
	call	_uprv_isASCIILetter_56
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN1@isExtensio
	mov	eax, DWORD PTR _s$[ebp]
	movzx	ecx, BYTE PTR [eax]
	push	ecx
	call	_uprv_asciitolower_56
	add	esp, 4
	movsx	edx, al
	cmp	edx, 120				; 00000078H
	je	SHORT $LN1@isExtensio
; Line 320
	mov	al, 1
	jmp	SHORT $LN3@isExtensio
$LN1@isExtensio:
; Line 322
	xor	al, al
$LN3@isExtensio:
; Line 323
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__isExtensionSingleton ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __isExtensionSubtags
_TEXT	SEGMENT
_pSubtag$ = -20						; size = 4
_p$ = -8						; size = 4
_s$ = 8							; size = 4
_len$ = 12						; size = 4
__isExtensionSubtags PROC				; COMDAT
; Line 340
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 341
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR _p$[ebp], eax
; Line 342
	mov	DWORD PTR _pSubtag$[ebp], 0
; Line 344
	cmp	DWORD PTR _len$[ebp], 0
	jge	SHORT $LN8@isExtensio@2
; Line 345
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	mov	DWORD PTR _len$[ebp], eax
$LN8@isExtensio@2:
; Line 348
	mov	eax, DWORD PTR _p$[ebp]
	sub	eax, DWORD PTR _s$[ebp]
	cmp	eax, DWORD PTR _len$[ebp]
	jge	SHORT $LN7@isExtensio@2
; Line 349
	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 45					; 0000002dH
	jne	SHORT $LN6@isExtensio@2
; Line 350
	cmp	DWORD PTR _pSubtag$[ebp], 0
	jne	SHORT $LN5@isExtensio@2
; Line 351
	xor	al, al
	jmp	SHORT $LN10@isExtensio@2
$LN5@isExtensio@2:
; Line 353
	mov	eax, DWORD PTR _p$[ebp]
	sub	eax, DWORD PTR _pSubtag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pSubtag$[ebp]
	push	ecx
	call	__isExtensionSubtag
	add	esp, 8
	movsx	edx, al
	test	edx, edx
	jne	SHORT $LN4@isExtensio@2
; Line 354
	xor	al, al
	jmp	SHORT $LN10@isExtensio@2
$LN4@isExtensio@2:
; Line 356
	mov	DWORD PTR _pSubtag$[ebp], 0
	jmp	SHORT $LN3@isExtensio@2
$LN6@isExtensio@2:
; Line 357
	cmp	DWORD PTR _pSubtag$[ebp], 0
	jne	SHORT $LN3@isExtensio@2
; Line 358
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR _pSubtag$[ebp], eax
$LN3@isExtensio@2:
; Line 360
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
; Line 361
	jmp	SHORT $LN8@isExtensio@2
$LN7@isExtensio@2:
; Line 362
	cmp	DWORD PTR _pSubtag$[ebp], 0
	jne	SHORT $LN1@isExtensio@2
; Line 363
	xor	al, al
	jmp	SHORT $LN10@isExtensio@2
$LN1@isExtensio@2:
; Line 365
	mov	eax, DWORD PTR _p$[ebp]
	sub	eax, DWORD PTR _pSubtag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pSubtag$[ebp]
	push	ecx
	call	__isExtensionSubtag
	add	esp, 8
$LN10@isExtensio@2:
; Line 366
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__isExtensionSubtags ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __isExtensionSubtag
_TEXT	SEGMENT
_s$ = 8							; size = 4
_len$ = 12						; size = 4
__isExtensionSubtag PROC				; COMDAT
; Line 326
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 330
	cmp	DWORD PTR _len$[ebp], 0
	jge	SHORT $LN2@isExtensio@3
; Line 331
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	mov	DWORD PTR _len$[ebp], eax
$LN2@isExtensio@3:
; Line 333
	cmp	DWORD PTR _len$[ebp], 2
	jl	SHORT $LN1@isExtensio@3
	cmp	DWORD PTR _len$[ebp], 8
	jg	SHORT $LN1@isExtensio@3
	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	call	__isAlphaNumericString
	add	esp, 8
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN1@isExtensio@3
; Line 334
	mov	al, 1
	jmp	SHORT $LN3@isExtensio@3
$LN1@isExtensio@3:
; Line 336
	xor	al, al
$LN3@isExtensio@3:
; Line 337
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__isExtensionSubtag ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __addAttributeToList
_TEXT	SEGMENT
_cmp$10770 = -44					; size = 4
_cur$10769 = -32					; size = 4
_prev$10768 = -20					; size = 4
_bAdded$ = -5						; size = 1
_first$ = 8						; size = 4
_attr$ = 12						; size = 4
__addAttributeToList PROC				; COMDAT
; Line 494
	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 495
	mov	BYTE PTR _bAdded$[ebp], 1
; Line 497
	mov	eax, DWORD PTR _first$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN9@addAttribu
; Line 498
	mov	eax, DWORD PTR _attr$[ebp]
	mov	DWORD PTR [eax+4], 0
; Line 499
	mov	eax, DWORD PTR _first$[ebp]
	mov	ecx, DWORD PTR _attr$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 500
	jmp	$LN8@addAttribu
$LN9@addAttribu:
; Line 505
	mov	DWORD PTR _prev$10768[ebp], 0
; Line 506
	mov	eax, DWORD PTR _first$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _cur$10769[ebp], ecx
$LN7@addAttribu:
; Line 507
	mov	eax, 1
	test	eax, eax
	je	SHORT $LN8@addAttribu
; Line 508
	cmp	DWORD PTR _cur$10769[ebp], 0
	jne	SHORT $LN5@addAttribu
; Line 509
	mov	eax, DWORD PTR _prev$10768[ebp]
	mov	ecx, DWORD PTR _attr$[ebp]
	mov	DWORD PTR [eax+4], ecx
; Line 510
	mov	eax, DWORD PTR _attr$[ebp]
	mov	DWORD PTR [eax+4], 0
; Line 511
	jmp	SHORT $LN8@addAttribu
$LN5@addAttribu:
; Line 513
	mov	eax, DWORD PTR _cur$10769[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _attr$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_strcmp
	add	esp, 8
	mov	DWORD PTR _cmp$10770[ebp], eax
; Line 514
	cmp	DWORD PTR _cmp$10770[ebp], 0
	jge	SHORT $LN4@addAttribu
; Line 515
	cmp	DWORD PTR _prev$10768[ebp], 0
	jne	SHORT $LN3@addAttribu
; Line 516
	mov	eax, DWORD PTR _first$[ebp]
	mov	ecx, DWORD PTR _attr$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 517
	jmp	SHORT $LN2@addAttribu
$LN3@addAttribu:
; Line 518
	mov	eax, DWORD PTR _prev$10768[ebp]
	mov	ecx, DWORD PTR _attr$[ebp]
	mov	DWORD PTR [eax+4], ecx
$LN2@addAttribu:
; Line 520
	mov	eax, DWORD PTR _attr$[ebp]
	mov	ecx, DWORD PTR _cur$10769[ebp]
	mov	DWORD PTR [eax+4], ecx
; Line 521
	jmp	SHORT $LN8@addAttribu
$LN4@addAttribu:
; Line 523
	cmp	DWORD PTR _cmp$10770[ebp], 0
	jne	SHORT $LN1@addAttribu
; Line 525
	mov	BYTE PTR _bAdded$[ebp], 0
; Line 526
	jmp	SHORT $LN8@addAttribu
$LN1@addAttribu:
; Line 528
	mov	eax, DWORD PTR _cur$10769[ebp]
	mov	DWORD PTR _prev$10768[ebp], eax
; Line 529
	mov	eax, DWORD PTR _cur$10769[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _cur$10769[ebp], ecx
; Line 530
	jmp	$LN7@addAttribu
$LN8@addAttribu:
; Line 533
	mov	al, BYTE PTR _bAdded$[ebp]
; Line 534
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__addAttributeToList ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __addExtensionToList
_TEXT	SEGMENT
_curlen$10808 = -68					; size = 4
_len$10807 = -56					; size = 4
_cmp$10798 = -44					; size = 4
_cur$10797 = -32					; size = 4
_prev$10796 = -20					; size = 4
_bAdded$ = -5						; size = 1
_first$ = 8						; size = 4
_ext$ = 12						; size = 4
_localeToBCP$ = 16					; size = 1
__addExtensionToList PROC				; COMDAT
; Line 538
	push	ebp
	mov	ebp, esp
	sub	esp, 264				; 00000108H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-264]
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 539
	mov	BYTE PTR _bAdded$[ebp], 1
; Line 541
	mov	eax, DWORD PTR _first$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN23@addExtensi
; Line 542
	mov	eax, DWORD PTR _ext$[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 543
	mov	eax, DWORD PTR _first$[ebp]
	mov	ecx, DWORD PTR _ext$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 544
	jmp	$LN22@addExtensi
$LN23@addExtensi:
; Line 549
	mov	DWORD PTR _prev$10796[ebp], 0
; Line 550
	mov	eax, DWORD PTR _first$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _cur$10797[ebp], ecx
$LN21@addExtensi:
; Line 551
	mov	eax, 1
	test	eax, eax
	je	$LN22@addExtensi
; Line 552
	cmp	DWORD PTR _cur$10797[ebp], 0
	jne	SHORT $LN19@addExtensi
; Line 553
	mov	eax, DWORD PTR _prev$10796[ebp]
	mov	ecx, DWORD PTR _ext$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 554
	mov	eax, DWORD PTR _ext$[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 555
	jmp	$LN22@addExtensi
$LN19@addExtensi:
; Line 557
	movsx	eax, BYTE PTR _localeToBCP$[ebp]
	test	eax, eax
	je	$LN18@addExtensi
; Line 561
	mov	eax, DWORD PTR _ext$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_strlen
	add	esp, 4
	mov	DWORD PTR _len$10807[ebp], eax
; Line 562
	mov	eax, DWORD PTR _cur$10797[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_strlen
	add	esp, 4
	mov	DWORD PTR _curlen$10808[ebp], eax
; Line 564
	cmp	DWORD PTR _len$10807[ebp], 1
	jne	SHORT $LN17@addExtensi
	cmp	DWORD PTR _curlen$10808[ebp], 1
	jne	SHORT $LN17@addExtensi
; Line 565
	mov	eax, DWORD PTR _ext$[ebp]
	mov	ecx, DWORD PTR [eax]
	movsx	edx, BYTE PTR [ecx]
	mov	eax, DWORD PTR _cur$10797[ebp]
	mov	ecx, DWORD PTR [eax]
	movsx	eax, BYTE PTR [ecx]
	cmp	edx, eax
	jne	SHORT $LN16@addExtensi
; Line 566
	mov	DWORD PTR _cmp$10798[ebp], 0
	jmp	SHORT $LN15@addExtensi
$LN16@addExtensi:
; Line 567
	mov	eax, DWORD PTR _ext$[ebp]
	mov	ecx, DWORD PTR [eax]
	movsx	edx, BYTE PTR [ecx]
	cmp	edx, 120				; 00000078H
	jne	SHORT $LN14@addExtensi
; Line 568
	mov	DWORD PTR _cmp$10798[ebp], 1
	jmp	SHORT $LN15@addExtensi
$LN14@addExtensi:
; Line 569
	mov	eax, DWORD PTR _cur$10797[ebp]
	mov	ecx, DWORD PTR [eax]
	movsx	edx, BYTE PTR [ecx]
	cmp	edx, 120				; 00000078H
	jne	SHORT $LN12@addExtensi
; Line 570
	mov	DWORD PTR _cmp$10798[ebp], -1
; Line 571
	jmp	SHORT $LN15@addExtensi
$LN12@addExtensi:
; Line 572
	mov	eax, DWORD PTR _ext$[ebp]
	mov	ecx, DWORD PTR [eax]
	movsx	edx, BYTE PTR [ecx]
	mov	eax, DWORD PTR _cur$10797[ebp]
	mov	ecx, DWORD PTR [eax]
	movsx	eax, BYTE PTR [ecx]
	sub	edx, eax
	mov	DWORD PTR _cmp$10798[ebp], edx
$LN15@addExtensi:
; Line 573
	jmp	SHORT $LN10@addExtensi
$LN17@addExtensi:
; Line 574
	cmp	DWORD PTR _len$10807[ebp], 1
	jne	SHORT $LN9@addExtensi
; Line 575
	mov	eax, DWORD PTR _ext$[ebp]
	mov	ecx, DWORD PTR [eax]
	movsx	edx, BYTE PTR [ecx]
	sub	edx, 117				; 00000075H
	mov	DWORD PTR _cmp$10798[ebp], edx
	jmp	SHORT $LN10@addExtensi
$LN9@addExtensi:
; Line 576
	cmp	DWORD PTR _curlen$10808[ebp], 1
	jne	SHORT $LN7@addExtensi
; Line 577
	mov	eax, DWORD PTR _cur$10797[ebp]
	mov	ecx, DWORD PTR [eax]
	movsx	edx, BYTE PTR [ecx]
	mov	eax, 117				; 00000075H
	sub	eax, edx
	mov	DWORD PTR _cmp$10798[ebp], eax
; Line 578
	jmp	SHORT $LN10@addExtensi
$LN7@addExtensi:
; Line 579
	mov	eax, DWORD PTR _cur$10797[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _ext$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_strcmp
	add	esp, 8
	mov	DWORD PTR _cmp$10798[ebp], eax
$LN10@addExtensi:
; Line 581
	jmp	SHORT $LN5@addExtensi
$LN18@addExtensi:
; Line 582
	mov	eax, DWORD PTR _cur$10797[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _ext$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_strcmp
	add	esp, 8
	mov	DWORD PTR _cmp$10798[ebp], eax
$LN5@addExtensi:
; Line 584
	cmp	DWORD PTR _cmp$10798[ebp], 0
	jge	SHORT $LN4@addExtensi
; Line 585
	cmp	DWORD PTR _prev$10796[ebp], 0
	jne	SHORT $LN3@addExtensi
; Line 586
	mov	eax, DWORD PTR _first$[ebp]
	mov	ecx, DWORD PTR _ext$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 587
	jmp	SHORT $LN2@addExtensi
$LN3@addExtensi:
; Line 588
	mov	eax, DWORD PTR _prev$10796[ebp]
	mov	ecx, DWORD PTR _ext$[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN2@addExtensi:
; Line 590
	mov	eax, DWORD PTR _ext$[ebp]
	mov	ecx, DWORD PTR _cur$10797[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 591
	jmp	SHORT $LN22@addExtensi
$LN4@addExtensi:
; Line 593
	cmp	DWORD PTR _cmp$10798[ebp], 0
	jne	SHORT $LN1@addExtensi
; Line 595
	mov	BYTE PTR _bAdded$[ebp], 0
; Line 596
	jmp	SHORT $LN22@addExtensi
$LN1@addExtensi:
; Line 598
	mov	eax, DWORD PTR _cur$10797[ebp]
	mov	DWORD PTR _prev$10796[ebp], eax
; Line 599
	mov	eax, DWORD PTR _cur$10797[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _cur$10797[ebp], ecx
; Line 600
	jmp	$LN21@addExtensi
$LN22@addExtensi:
; Line 603
	mov	al, BYTE PTR _bAdded$[ebp]
; Line 604
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 264				; 00000108H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__addExtensionToList ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __appendPrivateuseToLanguageTag
_TEXT	SEGMENT
_writeValue$11400 = -441				; size = 1
_firstValue$11399 = -429				; size = 1
_bNext$11398 = -417					; size = 1
_pPriv$11397 = -408					; size = 4
_p$11396 = -396						; size = 4
_reslen$ = -384						; size = 4
_i$ = -372						; size = 4
_len$ = -360						; size = 4
_tmpStatus$ = -348					; size = 4
_tmpAppend$ = -336					; size = 157
_buf$ = -168						; size = 157
__$ArrayPad$ = -4					; size = 4
_localeID$ = 8						; size = 4
_appendAt$ = 12						; size = 4
_capacity$ = 16						; size = 4
_strict$ = 20						; size = 1
_hadPosix$ = 24						; size = 1
_status$ = 28						; size = 4
__appendPrivateuseToLanguageTag PROC			; COMDAT
; Line 1640
	push	ebp
	mov	ebp, esp
	sub	esp, 640				; 00000280H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-640]
	mov	ecx, 160				; 000000a0H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 1643
	mov	DWORD PTR _tmpStatus$[ebp], 0
; Line 1645
	mov	DWORD PTR _reslen$[ebp], 0
; Line 1647
	mov	eax, DWORD PTR _status$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN35@appendPriv
; Line 1648
	xor	eax, eax
	jmp	$LN36@appendPriv
$LN35@appendPriv:
; Line 1651
	lea	eax, DWORD PTR _tmpStatus$[ebp]
	push	eax
	push	157					; 0000009dH
	lea	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _localeID$[ebp]
	push	edx
	call	_uloc_getVariant_56
	add	esp, 16					; 00000010H
	mov	DWORD PTR _len$[ebp], eax
; Line 1652
	cmp	DWORD PTR _tmpStatus$[ebp], 0
	jg	SHORT $LN33@appendPriv
	cmp	DWORD PTR _tmpStatus$[ebp], -124	; ffffff84H
	jne	SHORT $LN34@appendPriv
$LN33@appendPriv:
; Line 1653
	movsx	eax, BYTE PTR _strict$[ebp]
	test	eax, eax
	je	SHORT $LN32@appendPriv
; Line 1654
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 1
$LN32@appendPriv:
; Line 1656
	xor	eax, eax
	jmp	$LN36@appendPriv
$LN34@appendPriv:
; Line 1659
	cmp	DWORD PTR _len$[ebp], 0
	jle	$LN31@appendPriv
; Line 1661
	mov	BYTE PTR _bNext$11398[ebp], 1
; Line 1662
	mov	BYTE PTR _firstValue$11399[ebp], 1
; Line 1665
	mov	DWORD PTR _pPriv$11397[ebp], 0
; Line 1666
	lea	eax, DWORD PTR _buf$[ebp]
	mov	DWORD PTR _p$11396[ebp], eax
$LN30@appendPriv:
; Line 1667
	movsx	eax, BYTE PTR _bNext$11398[ebp]
	test	eax, eax
	je	$LN29@appendPriv
; Line 1668
	mov	BYTE PTR _writeValue$11400[ebp], 0
; Line 1669
	mov	eax, DWORD PTR _p$11396[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 45					; 0000002dH
	je	SHORT $LN27@appendPriv
	mov	eax, DWORD PTR _p$11396[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 95					; 0000005fH
	je	SHORT $LN27@appendPriv
	mov	eax, DWORD PTR _p$11396[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	$LN28@appendPriv
$LN27@appendPriv:
; Line 1670
	mov	eax, DWORD PTR _p$11396[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN26@appendPriv
; Line 1671
	mov	BYTE PTR _bNext$11398[ebp], 0
; Line 1672
	jmp	SHORT $LN25@appendPriv
$LN26@appendPriv:
; Line 1673
	mov	eax, DWORD PTR _p$11396[ebp]
	mov	BYTE PTR [eax], 0
$LN25@appendPriv:
; Line 1675
	cmp	DWORD PTR _pPriv$11397[ebp], 0
	je	$LN24@appendPriv
; Line 1677
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN23@appendPriv
$LN22@appendPriv:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN23@appendPriv:
	mov	eax, DWORD PTR _pPriv$11397[ebp]
	add	eax, DWORD PTR _i$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN21@appendPriv
; Line 1678
	mov	eax, DWORD PTR _pPriv$11397[ebp]
	add	eax, DWORD PTR _i$[ebp]
	movzx	ecx, BYTE PTR [eax]
	push	ecx
	call	_uprv_asciitolower_56
	add	esp, 4
	mov	edx, DWORD PTR _pPriv$11397[ebp]
	add	edx, DWORD PTR _i$[ebp]
	mov	BYTE PTR [edx], al
; Line 1679
	jmp	SHORT $LN22@appendPriv
$LN21@appendPriv:
; Line 1682
	push	-1
	mov	eax, DWORD PTR _pPriv$11397[ebp]
	push	eax
	call	__isPrivateuseValueSubtag
	add	esp, 8
	movsx	ecx, al
	test	ecx, ecx
	je	SHORT $LN20@appendPriv
; Line 1683
	movsx	eax, BYTE PTR _firstValue$11399[ebp]
	test	eax, eax
	je	SHORT $LN19@appendPriv
; Line 1684
	push	-1
	mov	eax, DWORD PTR _pPriv$11397[ebp]
	push	eax
	call	__isVariantSubtag
	add	esp, 8
	movsx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN18@appendPriv
; Line 1685
	mov	BYTE PTR _writeValue$11400[ebp], 1
$LN18@appendPriv:
; Line 1687
	jmp	SHORT $LN17@appendPriv
$LN19@appendPriv:
; Line 1688
	mov	BYTE PTR _writeValue$11400[ebp], 1
$LN17@appendPriv:
; Line 1689
	jmp	SHORT $LN16@appendPriv
$LN20@appendPriv:
; Line 1690
	movsx	eax, BYTE PTR _strict$[ebp]
	test	eax, eax
	je	SHORT $LN15@appendPriv
; Line 1691
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 1
; Line 1692
	jmp	$LN29@appendPriv
; Line 1693
	jmp	SHORT $LN16@appendPriv
$LN15@appendPriv:
; Line 1694
	jmp	$LN29@appendPriv
$LN16@appendPriv:
; Line 1697
	movsx	eax, BYTE PTR _writeValue$11400[ebp]
	test	eax, eax
	je	$LN24@appendPriv
; Line 1698
	mov	eax, DWORD PTR _reslen$[ebp]
	cmp	eax, DWORD PTR _capacity$[ebp]
	jge	SHORT $LN12@appendPriv
; Line 1699
	mov	eax, DWORD PTR _reslen$[ebp]
	mov	BYTE PTR _tmpAppend$[ebp+eax], 45	; 0000002dH
	mov	ecx, DWORD PTR _reslen$[ebp]
	add	ecx, 1
	mov	DWORD PTR _reslen$[ebp], ecx
$LN12@appendPriv:
; Line 1702
	movsx	eax, BYTE PTR _firstValue$11399[ebp]
	test	eax, eax
	je	$LN11@appendPriv
; Line 1703
	mov	eax, DWORD PTR _reslen$[ebp]
	cmp	eax, DWORD PTR _capacity$[ebp]
	jge	SHORT $LN10@appendPriv
; Line 1704
	mov	eax, DWORD PTR _reslen$[ebp]
	mov	cl, BYTE PTR _PRIVATEUSE_KEY
	mov	BYTE PTR _tmpAppend$[ebp+eax], cl
	mov	edx, DWORD PTR _reslen$[ebp]
	add	edx, 1
	mov	DWORD PTR _reslen$[ebp], edx
$LN10@appendPriv:
; Line 1707
	mov	eax, DWORD PTR _reslen$[ebp]
	cmp	eax, DWORD PTR _capacity$[ebp]
	jge	SHORT $LN9@appendPriv
; Line 1708
	mov	eax, DWORD PTR _reslen$[ebp]
	mov	BYTE PTR _tmpAppend$[ebp+eax], 45	; 0000002dH
	mov	ecx, DWORD PTR _reslen$[ebp]
	add	ecx, 1
	mov	DWORD PTR _reslen$[ebp], ecx
$LN9@appendPriv:
; Line 1711
	push	OFFSET _PRIVUSE_VARIANT_PREFIX
	call	_strlen
	add	esp, 4
	mov	DWORD PTR _len$[ebp], eax
; Line 1712
	mov	eax, DWORD PTR _reslen$[ebp]
	cmp	eax, DWORD PTR _capacity$[ebp]
	jge	SHORT $LN8@appendPriv
; Line 1713
	push	1
	push	OFFSET _PRIVUSE_VARIANT_PREFIX
	call	_uprv_checkValidMemory
	add	esp, 8
	mov	eax, DWORD PTR _capacity$[ebp]
	sub	eax, DWORD PTR _reslen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _len$[ebp]
	push	ecx
	call	_uprv_min_56
	add	esp, 8
	push	eax
	push	OFFSET _PRIVUSE_VARIANT_PREFIX
	mov	edx, DWORD PTR _reslen$[ebp]
	lea	eax, DWORD PTR _tmpAppend$[ebp+edx]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN8@appendPriv:
; Line 1715
	mov	eax, DWORD PTR _reslen$[ebp]
	add	eax, DWORD PTR _len$[ebp]
	mov	DWORD PTR _reslen$[ebp], eax
; Line 1717
	mov	eax, DWORD PTR _reslen$[ebp]
	cmp	eax, DWORD PTR _capacity$[ebp]
	jge	SHORT $LN7@appendPriv
; Line 1718
	mov	eax, DWORD PTR _reslen$[ebp]
	mov	BYTE PTR _tmpAppend$[ebp+eax], 45	; 0000002dH
	mov	ecx, DWORD PTR _reslen$[ebp]
	add	ecx, 1
	mov	DWORD PTR _reslen$[ebp], ecx
$LN7@appendPriv:
; Line 1721
	mov	BYTE PTR _firstValue$11399[ebp], 0
$LN11@appendPriv:
; Line 1724
	mov	eax, DWORD PTR _pPriv$11397[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	mov	DWORD PTR _len$[ebp], eax
; Line 1725
	mov	eax, DWORD PTR _reslen$[ebp]
	cmp	eax, DWORD PTR _capacity$[ebp]
	jge	SHORT $LN6@appendPriv
; Line 1726
	push	1
	mov	eax, DWORD PTR _pPriv$11397[ebp]
	push	eax
	call	_uprv_checkValidMemory
	add	esp, 8
	mov	ecx, DWORD PTR _capacity$[ebp]
	sub	ecx, DWORD PTR _reslen$[ebp]
	push	ecx
	mov	edx, DWORD PTR _len$[ebp]
	push	edx
	call	_uprv_min_56
	add	esp, 8
	push	eax
	mov	eax, DWORD PTR _pPriv$11397[ebp]
	push	eax
	mov	ecx, DWORD PTR _reslen$[ebp]
	lea	edx, DWORD PTR _tmpAppend$[ebp+ecx]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN6@appendPriv:
; Line 1728
	mov	eax, DWORD PTR _reslen$[ebp]
	add	eax, DWORD PTR _len$[ebp]
	mov	DWORD PTR _reslen$[ebp], eax
$LN24@appendPriv:
; Line 1732
	mov	DWORD PTR _pPriv$11397[ebp], 0
	jmp	SHORT $LN5@appendPriv
$LN28@appendPriv:
; Line 1733
	cmp	DWORD PTR _pPriv$11397[ebp], 0
	jne	SHORT $LN5@appendPriv
; Line 1734
	mov	eax, DWORD PTR _p$11396[ebp]
	mov	DWORD PTR _pPriv$11397[ebp], eax
$LN5@appendPriv:
; Line 1736
	mov	eax, DWORD PTR _p$11396[ebp]
	add	eax, 1
	mov	DWORD PTR _p$11396[ebp], eax
; Line 1737
	jmp	$LN30@appendPriv
$LN29@appendPriv:
; Line 1739
	mov	eax, DWORD PTR _status$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN31@appendPriv
; Line 1740
	xor	eax, eax
	jmp	SHORT $LN36@appendPriv
$LN31@appendPriv:
; Line 1744
	mov	eax, DWORD PTR _status$[ebp]
	cmp	DWORD PTR [eax], 0
	jg	SHORT $LN2@appendPriv
; Line 1745
	mov	eax, DWORD PTR _reslen$[ebp]
	mov	DWORD PTR _len$[ebp], eax
; Line 1746
	mov	eax, DWORD PTR _reslen$[ebp]
	cmp	eax, DWORD PTR _capacity$[ebp]
	jge	SHORT $LN2@appendPriv
; Line 1747
	push	1
	lea	eax, DWORD PTR _tmpAppend$[ebp]
	push	eax
	call	_uprv_checkValidMemory
	add	esp, 8
	mov	ecx, DWORD PTR _capacity$[ebp]
	sub	ecx, DWORD PTR _reslen$[ebp]
	push	ecx
	mov	edx, DWORD PTR _len$[ebp]
	push	edx
	call	_uprv_min_56
	add	esp, 8
	push	eax
	lea	eax, DWORD PTR _tmpAppend$[ebp]
	push	eax
	mov	ecx, DWORD PTR _appendAt$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN2@appendPriv:
; Line 1751
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _reslen$[ebp]
	push	ecx
	mov	edx, DWORD PTR _capacity$[ebp]
	push	edx
	mov	eax, DWORD PTR _appendAt$[ebp]
	push	eax
	call	_u_terminateChars_56
	add	esp, 16					; 00000010H
; Line 1753
	mov	eax, DWORD PTR _reslen$[ebp]
$LN36@appendPriv:
; Line 1754
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN42@appendPriv
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 640				; 00000280H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN42@appendPriv:
	DD	3
	DD	$LN41@appendPriv
$LN41@appendPriv:
	DD	-168					; ffffff58H
	DD	157					; 0000009dH
	DD	$LN38@appendPriv
	DD	-336					; fffffeb0H
	DD	157					; 0000009dH
	DD	$LN39@appendPriv
	DD	-348					; fffffea4H
	DD	4
	DD	$LN40@appendPriv
$LN40@appendPriv:
	DB	116					; 00000074H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	115					; 00000073H
	DB	0
$LN39@appendPriv:
	DB	116					; 00000074H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	65					; 00000041H
	DB	112					; 00000070H
	DB	112					; 00000070H
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	0
$LN38@appendPriv:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
__appendPrivateuseToLanguageTag ENDP
_TEXT	ENDS
PUBLIC	_uloc_forLanguageTag_56
EXTRN	_uprv_toupper_56:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _uloc_forLanguageTag_56
_TEXT	SEGMENT
tv78 = -292						; size = 4
_noRegion$ = -89					; size = 1
_n$ = -80						; size = 4
_i$ = -68						; size = 4
_len$ = -56						; size = 4
_p$ = -44						; size = 4
_subtag$ = -32						; size = 4
_reslen$ = -20						; size = 4
_lt$ = -8						; size = 4
_langtag$ = 8						; size = 4
_localeID$ = 12						; size = 4
_localeIDCapacity$ = 16					; size = 4
_parsedLength$ = 20					; size = 4
_status$ = 24						; size = 4
_uloc_forLanguageTag_56 PROC				; COMDAT
; Line 2395
	push	ebp
	mov	ebp, esp
	sub	esp, 292				; 00000124H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-292]
	mov	ecx, 73					; 00000049H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2397
	mov	DWORD PTR _reslen$[ebp], 0
; Line 2401
	mov	BYTE PTR _noRegion$[ebp], 1
; Line 2403
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _parsedLength$[ebp]
	push	ecx
	push	-1
	mov	edx, DWORD PTR _langtag$[ebp]
	push	edx
	call	_ultag_parse
	add	esp, 16					; 00000010H
	mov	DWORD PTR _lt$[ebp], eax
; Line 2404
	mov	eax, DWORD PTR _status$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN30@uloc_forLa
; Line 2405
	xor	eax, eax
	jmp	$LN31@uloc_forLa
$LN30@uloc_forLa:
; Line 2409
	mov	eax, DWORD PTR _lt$[ebp]
	push	eax
	call	_ultag_getExtlangSize
	add	esp, 4
	test	eax, eax
	jle	SHORT $LN33@uloc_forLa
	push	0
	mov	ecx, DWORD PTR _lt$[ebp]
	push	ecx
	call	_ultag_getExtlang
	add	esp, 8
	mov	DWORD PTR tv78[ebp], eax
	jmp	SHORT $LN34@uloc_forLa
$LN33@uloc_forLa:
	mov	edx, DWORD PTR _lt$[ebp]
	push	edx
	call	_ultag_getLanguage
	add	esp, 4
	mov	DWORD PTR tv78[ebp], eax
$LN34@uloc_forLa:
	mov	eax, DWORD PTR tv78[ebp]
	mov	DWORD PTR _subtag$[ebp], eax
; Line 2410
	push	OFFSET _LANG_UND
	mov	eax, DWORD PTR _subtag$[ebp]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	je	SHORT $LN29@uloc_forLa
; Line 2411
	mov	eax, DWORD PTR _subtag$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	mov	DWORD PTR _len$[ebp], eax
; Line 2412
	cmp	DWORD PTR _len$[ebp], 0
	jle	SHORT $LN29@uloc_forLa
; Line 2413
	mov	eax, DWORD PTR _reslen$[ebp]
	cmp	eax, DWORD PTR _localeIDCapacity$[ebp]
	jge	SHORT $LN27@uloc_forLa
; Line 2414
	push	1
	mov	eax, DWORD PTR _subtag$[ebp]
	push	eax
	call	_uprv_checkValidMemory
	add	esp, 8
	mov	ecx, DWORD PTR _localeIDCapacity$[ebp]
	sub	ecx, DWORD PTR _reslen$[ebp]
	push	ecx
	mov	edx, DWORD PTR _len$[ebp]
	push	edx
	call	_uprv_min_56
	add	esp, 8
	push	eax
	mov	eax, DWORD PTR _subtag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _localeID$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN27@uloc_forLa:
; Line 2416
	mov	eax, DWORD PTR _reslen$[ebp]
	add	eax, DWORD PTR _len$[ebp]
	mov	DWORD PTR _reslen$[ebp], eax
$LN29@uloc_forLa:
; Line 2421
	mov	eax, DWORD PTR _lt$[ebp]
	push	eax
	call	_ultag_getScript
	add	esp, 4
	mov	DWORD PTR _subtag$[ebp], eax
; Line 2422
	mov	eax, DWORD PTR _subtag$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	mov	DWORD PTR _len$[ebp], eax
; Line 2423
	cmp	DWORD PTR _len$[ebp], 0
	jle	SHORT $LN26@uloc_forLa
; Line 2424
	mov	eax, DWORD PTR _reslen$[ebp]
	cmp	eax, DWORD PTR _localeIDCapacity$[ebp]
	jge	SHORT $LN25@uloc_forLa
; Line 2425
	mov	eax, DWORD PTR _localeID$[ebp]
	add	eax, DWORD PTR _reslen$[ebp]
	mov	BYTE PTR [eax], 95			; 0000005fH
$LN25@uloc_forLa:
; Line 2427
	mov	eax, DWORD PTR _reslen$[ebp]
	add	eax, 1
	mov	DWORD PTR _reslen$[ebp], eax
; Line 2430
	mov	eax, DWORD PTR _subtag$[ebp]
	mov	DWORD PTR _p$[ebp], eax
$LN24@uloc_forLa:
; Line 2431
	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN26@uloc_forLa
; Line 2432
	mov	eax, DWORD PTR _reslen$[ebp]
	cmp	eax, DWORD PTR _localeIDCapacity$[ebp]
	jge	SHORT $LN22@uloc_forLa
; Line 2433
	mov	eax, DWORD PTR _p$[ebp]
	cmp	eax, DWORD PTR _subtag$[ebp]
	jne	SHORT $LN21@uloc_forLa
; Line 2434
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax]
	push	ecx
	call	_uprv_toupper_56
	add	esp, 4
	mov	edx, DWORD PTR _localeID$[ebp]
	add	edx, DWORD PTR _reslen$[ebp]
	mov	BYTE PTR [edx], al
; Line 2435
	jmp	SHORT $LN22@uloc_forLa
$LN21@uloc_forLa:
; Line 2436
	mov	eax, DWORD PTR _localeID$[ebp]
	add	eax, DWORD PTR _reslen$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl
$LN22@uloc_forLa:
; Line 2439
	mov	eax, DWORD PTR _reslen$[ebp]
	add	eax, 1
	mov	DWORD PTR _reslen$[ebp], eax
; Line 2440
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
; Line 2441
	jmp	SHORT $LN24@uloc_forLa
$LN26@uloc_forLa:
; Line 2445
	mov	eax, DWORD PTR _lt$[ebp]
	push	eax
	call	_ultag_getRegion
	add	esp, 4
	mov	DWORD PTR _subtag$[ebp], eax
; Line 2446
	mov	eax, DWORD PTR _subtag$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	mov	DWORD PTR _len$[ebp], eax
; Line 2447
	cmp	DWORD PTR _len$[ebp], 0
	jle	SHORT $LN19@uloc_forLa
; Line 2448
	mov	eax, DWORD PTR _reslen$[ebp]
	cmp	eax, DWORD PTR _localeIDCapacity$[ebp]
	jge	SHORT $LN18@uloc_forLa
; Line 2449
	mov	eax, DWORD PTR _localeID$[ebp]
	add	eax, DWORD PTR _reslen$[ebp]
	mov	BYTE PTR [eax], 95			; 0000005fH
$LN18@uloc_forLa:
; Line 2451
	mov	eax, DWORD PTR _reslen$[ebp]
	add	eax, 1
	mov	DWORD PTR _reslen$[ebp], eax
; Line 2453
	mov	eax, DWORD PTR _subtag$[ebp]
	mov	DWORD PTR _p$[ebp], eax
$LN17@uloc_forLa:
; Line 2454
	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN16@uloc_forLa
; Line 2455
	mov	eax, DWORD PTR _reslen$[ebp]
	cmp	eax, DWORD PTR _localeIDCapacity$[ebp]
	jge	SHORT $LN15@uloc_forLa
; Line 2456
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax]
	push	ecx
	call	_uprv_toupper_56
	add	esp, 4
	mov	edx, DWORD PTR _localeID$[ebp]
	add	edx, DWORD PTR _reslen$[ebp]
	mov	BYTE PTR [edx], al
$LN15@uloc_forLa:
; Line 2458
	mov	eax, DWORD PTR _reslen$[ebp]
	add	eax, 1
	mov	DWORD PTR _reslen$[ebp], eax
; Line 2459
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
; Line 2460
	jmp	SHORT $LN17@uloc_forLa
$LN16@uloc_forLa:
; Line 2461
	mov	BYTE PTR _noRegion$[ebp], 0
$LN19@uloc_forLa:
; Line 2465
	mov	eax, DWORD PTR _lt$[ebp]
	push	eax
	call	_ultag_getVariantsSize
	add	esp, 4
	mov	DWORD PTR _n$[ebp], eax
; Line 2466
	cmp	DWORD PTR _n$[ebp], 0
	jle	$LN14@uloc_forLa
; Line 2467
	movsx	eax, BYTE PTR _noRegion$[ebp]
	test	eax, eax
	je	SHORT $LN13@uloc_forLa
; Line 2468
	mov	eax, DWORD PTR _reslen$[ebp]
	cmp	eax, DWORD PTR _localeIDCapacity$[ebp]
	jge	SHORT $LN12@uloc_forLa
; Line 2469
	mov	eax, DWORD PTR _localeID$[ebp]
	add	eax, DWORD PTR _reslen$[ebp]
	mov	BYTE PTR [eax], 95			; 0000005fH
$LN12@uloc_forLa:
; Line 2471
	mov	eax, DWORD PTR _reslen$[ebp]
	add	eax, 1
	mov	DWORD PTR _reslen$[ebp], eax
$LN13@uloc_forLa:
; Line 2474
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN11@uloc_forLa
$LN10@uloc_forLa:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN11@uloc_forLa:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _n$[ebp]
	jge	SHORT $LN14@uloc_forLa
; Line 2475
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _lt$[ebp]
	push	ecx
	call	_ultag_getVariant
	add	esp, 8
	mov	DWORD PTR _subtag$[ebp], eax
; Line 2476
	mov	eax, DWORD PTR _reslen$[ebp]
	cmp	eax, DWORD PTR _localeIDCapacity$[ebp]
	jge	SHORT $LN8@uloc_forLa
; Line 2477
	mov	eax, DWORD PTR _localeID$[ebp]
	add	eax, DWORD PTR _reslen$[ebp]
	mov	BYTE PTR [eax], 95			; 0000005fH
$LN8@uloc_forLa:
; Line 2479
	mov	eax, DWORD PTR _reslen$[ebp]
	add	eax, 1
	mov	DWORD PTR _reslen$[ebp], eax
; Line 2481
	mov	eax, DWORD PTR _subtag$[ebp]
	mov	DWORD PTR _p$[ebp], eax
$LN7@uloc_forLa:
; Line 2482
	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN6@uloc_forLa
; Line 2483
	mov	eax, DWORD PTR _reslen$[ebp]
	cmp	eax, DWORD PTR _localeIDCapacity$[ebp]
	jge	SHORT $LN5@uloc_forLa
; Line 2484
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax]
	push	ecx
	call	_uprv_toupper_56
	add	esp, 4
	mov	edx, DWORD PTR _localeID$[ebp]
	add	edx, DWORD PTR _reslen$[ebp]
	mov	BYTE PTR [edx], al
$LN5@uloc_forLa:
; Line 2486
	mov	eax, DWORD PTR _reslen$[ebp]
	add	eax, 1
	mov	DWORD PTR _reslen$[ebp], eax
; Line 2487
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
; Line 2488
	jmp	SHORT $LN7@uloc_forLa
$LN6@uloc_forLa:
; Line 2489
	jmp	$LN10@uloc_forLa
$LN14@uloc_forLa:
; Line 2493
	mov	eax, DWORD PTR _lt$[ebp]
	push	eax
	call	_ultag_getExtensionsSize
	add	esp, 4
	mov	DWORD PTR _n$[ebp], eax
; Line 2494
	mov	eax, DWORD PTR _lt$[ebp]
	push	eax
	call	_ultag_getPrivateUse
	add	esp, 4
	mov	DWORD PTR _subtag$[ebp], eax
; Line 2495
	cmp	DWORD PTR _n$[ebp], 0
	jg	SHORT $LN3@uloc_forLa
	mov	eax, DWORD PTR _subtag$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	test	eax, eax
	jbe	SHORT $LN4@uloc_forLa
$LN3@uloc_forLa:
; Line 2496
	cmp	DWORD PTR _reslen$[ebp], 0
	jne	SHORT $LN2@uloc_forLa
	cmp	DWORD PTR _n$[ebp], 0
	jle	SHORT $LN2@uloc_forLa
; Line 2498
	mov	eax, DWORD PTR _reslen$[ebp]
	cmp	eax, DWORD PTR _localeIDCapacity$[ebp]
	jge	SHORT $LN1@uloc_forLa
; Line 2499
	push	1
	push	OFFSET _LANG_UND
	call	_uprv_checkValidMemory
	add	esp, 8
	mov	eax, DWORD PTR _localeIDCapacity$[ebp]
	sub	eax, DWORD PTR _reslen$[ebp]
	push	eax
	push	3
	call	_uprv_min_56
	add	esp, 8
	push	eax
	push	OFFSET _LANG_UND
	mov	ecx, DWORD PTR _localeID$[ebp]
	add	ecx, DWORD PTR _reslen$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@uloc_forLa:
; Line 2501
	mov	eax, DWORD PTR _reslen$[ebp]
	add	eax, 3
	mov	DWORD PTR _reslen$[ebp], eax
$LN2@uloc_forLa:
; Line 2503
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _localeIDCapacity$[ebp]
	sub	ecx, DWORD PTR _reslen$[ebp]
	push	ecx
	mov	edx, DWORD PTR _localeID$[ebp]
	add	edx, DWORD PTR _reslen$[ebp]
	push	edx
	mov	eax, DWORD PTR _lt$[ebp]
	push	eax
	call	__appendKeywords
	add	esp, 16					; 00000010H
	mov	DWORD PTR _len$[ebp], eax
; Line 2504
	mov	eax, DWORD PTR _reslen$[ebp]
	add	eax, DWORD PTR _len$[ebp]
	mov	DWORD PTR _reslen$[ebp], eax
$LN4@uloc_forLa:
; Line 2507
	mov	eax, DWORD PTR _lt$[ebp]
	push	eax
	call	_ultag_close
	add	esp, 4
; Line 2508
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _reslen$[ebp]
	push	ecx
	mov	edx, DWORD PTR _localeIDCapacity$[ebp]
	push	edx
	mov	eax, DWORD PTR _localeID$[ebp]
	push	eax
	call	_u_terminateChars_56
	add	esp, 16					; 00000010H
$LN31@uloc_forLa:
; Line 2509
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 292				; 00000124H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_uloc_forLanguageTag_56 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __appendKeywords
_TEXT	SEGMENT
_tmpKwd$11369 = -152					; size = 4
_firstValue$11353 = -137				; size = 1
_posixVariant$ = -125					; size = 1
_kwdBufLength$ = -116					; size = 4
_kwdBuf$ = -104						; size = 4
_type$ = -92						; size = 4
_key$ = -80						; size = 4
_kwd$ = -68						; size = 4
_kwdFirst$ = -56					; size = 4
_len$ = -44						; size = 4
_n$ = -32						; size = 4
_i$ = -20						; size = 4
_reslen$ = -8						; size = 4
_langtag$ = 8						; size = 4
_appendAt$ = 12						; size = 4
_capacity$ = 16						; size = 4
_status$ = 20						; size = 4
__appendKeywords PROC					; COMDAT
; Line 1500
	push	ebp
	mov	ebp, esp
	sub	esp, 348				; 0000015cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-348]
	mov	ecx, 87					; 00000057H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1501
	mov	DWORD PTR _reslen$[ebp], 0
; Line 1504
	mov	DWORD PTR _kwdFirst$[ebp], 0
; Line 1507
	mov	DWORD PTR _kwdBuf$[ebp], 0
; Line 1508
	mov	eax, DWORD PTR _capacity$[ebp]
	mov	DWORD PTR _kwdBufLength$[ebp], eax
; Line 1509
	mov	BYTE PTR _posixVariant$[ebp], 0
; Line 1511
	mov	eax, DWORD PTR _status$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN31@appendKeyw@2
; Line 1512
	xor	eax, eax
	jmp	$LN32@appendKeyw@2
$LN31@appendKeyw@2:
; Line 1515
	mov	eax, DWORD PTR _kwdBufLength$[ebp]
	push	eax
	call	_uprv_malloc_56
	add	esp, 4
	mov	DWORD PTR _kwdBuf$[ebp], eax
; Line 1516
	cmp	DWORD PTR _kwdBuf$[ebp], 0
	jne	SHORT $LN30@appendKeyw@2
; Line 1517
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 7
; Line 1518
	xor	eax, eax
	jmp	$LN32@appendKeyw@2
$LN30@appendKeyw@2:
; Line 1522
	mov	eax, DWORD PTR _langtag$[ebp]
	push	eax
	call	_ultag_getVariantsSize
	add	esp, 4
	test	eax, eax
	je	SHORT $LN29@appendKeyw@2
; Line 1523
	mov	BYTE PTR _posixVariant$[ebp], 1
$LN29@appendKeyw@2:
; Line 1526
	mov	eax, DWORD PTR _langtag$[ebp]
	push	eax
	call	_ultag_getExtensionsSize
	add	esp, 4
	mov	DWORD PTR _n$[ebp], eax
; Line 1529
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN28@appendKeyw@2
$LN27@appendKeyw@2:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN28@appendKeyw@2:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _n$[ebp]
	jge	$LN26@appendKeyw@2
; Line 1530
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _langtag$[ebp]
	push	ecx
	call	_ultag_getExtensionKey
	add	esp, 8
	mov	DWORD PTR _key$[ebp], eax
; Line 1531
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _langtag$[ebp]
	push	ecx
	call	_ultag_getExtensionValue
	add	esp, 8
	mov	DWORD PTR _type$[ebp], eax
; Line 1532
	mov	eax, DWORD PTR _key$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 117				; 00000075H
	jne	SHORT $LN25@appendKeyw@2
; Line 1533
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	lea	ecx, DWORD PTR _posixVariant$[ebp]
	push	ecx
	mov	edx, DWORD PTR _kwdBufLength$[ebp]
	push	edx
	mov	eax, DWORD PTR _kwdBuf$[ebp]
	push	eax
	lea	ecx, DWORD PTR _kwdFirst$[ebp]
	push	ecx
	mov	edx, DWORD PTR _type$[ebp]
	push	edx
	call	__appendLDMLExtensionAsKeywords
	add	esp, 24					; 00000018H
; Line 1534
	mov	eax, DWORD PTR _status$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN24@appendKeyw@2
; Line 1535
	jmp	SHORT $LN26@appendKeyw@2
$LN24@appendKeyw@2:
; Line 1537
	jmp	SHORT $LN23@appendKeyw@2
$LN25@appendKeyw@2:
; Line 1538
	push	12					; 0000000cH
	call	_uprv_malloc_56
	add	esp, 4
	mov	DWORD PTR _kwd$[ebp], eax
; Line 1539
	cmp	DWORD PTR _kwd$[ebp], 0
	jne	SHORT $LN22@appendKeyw@2
; Line 1540
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 7
; Line 1541
	jmp	SHORT $LN26@appendKeyw@2
$LN22@appendKeyw@2:
; Line 1543
	mov	eax, DWORD PTR _kwd$[ebp]
	mov	ecx, DWORD PTR _key$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 1544
	mov	eax, DWORD PTR _kwd$[ebp]
	mov	ecx, DWORD PTR _type$[ebp]
	mov	DWORD PTR [eax+4], ecx
; Line 1545
	push	0
	mov	eax, DWORD PTR _kwd$[ebp]
	push	eax
	lea	ecx, DWORD PTR _kwdFirst$[ebp]
	push	ecx
	call	__addExtensionToList
	add	esp, 12					; 0000000cH
	movsx	edx, al
	test	edx, edx
	jne	SHORT $LN23@appendKeyw@2
; Line 1546
	mov	eax, DWORD PTR _kwd$[ebp]
	push	eax
	call	_uprv_free_56
	add	esp, 4
; Line 1547
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 1
; Line 1548
	jmp	SHORT $LN26@appendKeyw@2
$LN23@appendKeyw@2:
; Line 1551
	jmp	$LN27@appendKeyw@2
$LN26@appendKeyw@2:
; Line 1553
	mov	eax, DWORD PTR _status$[ebp]
	cmp	DWORD PTR [eax], 0
	jg	SHORT $LN20@appendKeyw@2
; Line 1554
	mov	eax, DWORD PTR _langtag$[ebp]
	push	eax
	call	_ultag_getPrivateUse
	add	esp, 4
	mov	DWORD PTR _type$[ebp], eax
; Line 1555
	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	test	eax, eax
	jle	SHORT $LN20@appendKeyw@2
; Line 1557
	push	12					; 0000000cH
	call	_uprv_malloc_56
	add	esp, 4
	mov	DWORD PTR _kwd$[ebp], eax
; Line 1558
	cmp	DWORD PTR _kwd$[ebp], 0
	jne	SHORT $LN18@appendKeyw@2
; Line 1559
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 7
; Line 1560
	jmp	SHORT $LN20@appendKeyw@2
$LN18@appendKeyw@2:
; Line 1561
	mov	eax, DWORD PTR _kwd$[ebp]
	mov	DWORD PTR [eax], OFFSET _PRIVATEUSE_KEY
; Line 1562
	mov	eax, DWORD PTR _kwd$[ebp]
	mov	ecx, DWORD PTR _type$[ebp]
	mov	DWORD PTR [eax+4], ecx
; Line 1563
	push	0
	mov	eax, DWORD PTR _kwd$[ebp]
	push	eax
	lea	ecx, DWORD PTR _kwdFirst$[ebp]
	push	ecx
	call	__addExtensionToList
	add	esp, 12					; 0000000cH
	movsx	edx, al
	test	edx, edx
	jne	SHORT $LN20@appendKeyw@2
; Line 1564
	mov	eax, DWORD PTR _kwd$[ebp]
	push	eax
	call	_uprv_free_56
	add	esp, 4
; Line 1565
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 1
$LN20@appendKeyw@2:
; Line 1573
	mov	eax, DWORD PTR _status$[ebp]
	cmp	DWORD PTR [eax], 0
	jg	SHORT $LN15@appendKeyw@2
	movsx	eax, BYTE PTR _posixVariant$[ebp]
	test	eax, eax
	je	SHORT $LN15@appendKeyw@2
; Line 1574
	push	OFFSET __POSIX
	call	_strlen
	add	esp, 4
	mov	DWORD PTR _len$[ebp], eax
; Line 1575
	mov	eax, DWORD PTR _reslen$[ebp]
	cmp	eax, DWORD PTR _capacity$[ebp]
	jge	SHORT $LN14@appendKeyw@2
; Line 1576
	push	1
	push	OFFSET __POSIX
	call	_uprv_checkValidMemory
	add	esp, 8
	mov	eax, DWORD PTR _capacity$[ebp]
	sub	eax, DWORD PTR _reslen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _len$[ebp]
	push	ecx
	call	_uprv_min_56
	add	esp, 8
	push	eax
	push	OFFSET __POSIX
	mov	edx, DWORD PTR _appendAt$[ebp]
	add	edx, DWORD PTR _reslen$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN14@appendKeyw@2:
; Line 1578
	mov	eax, DWORD PTR _reslen$[ebp]
	add	eax, DWORD PTR _len$[ebp]
	mov	DWORD PTR _reslen$[ebp], eax
$LN15@appendKeyw@2:
; Line 1581
	mov	eax, DWORD PTR _status$[ebp]
	cmp	DWORD PTR [eax], 0
	jg	$LN13@appendKeyw@2
	cmp	DWORD PTR _kwdFirst$[ebp], 0
	je	$LN13@appendKeyw@2
; Line 1583
	mov	BYTE PTR _firstValue$11353[ebp], 1
; Line 1584
	mov	eax, DWORD PTR _kwdFirst$[ebp]
	mov	DWORD PTR _kwd$[ebp], eax
$LN12@appendKeyw@2:
; Line 1586
	mov	eax, DWORD PTR _reslen$[ebp]
	cmp	eax, DWORD PTR _capacity$[ebp]
	jge	SHORT $LN9@appendKeyw@2
; Line 1587
	movsx	eax, BYTE PTR _firstValue$11353[ebp]
	test	eax, eax
	je	SHORT $LN8@appendKeyw@2
; Line 1589
	mov	eax, DWORD PTR _appendAt$[ebp]
	add	eax, DWORD PTR _reslen$[ebp]
	mov	BYTE PTR [eax], 64			; 00000040H
; Line 1590
	mov	BYTE PTR _firstValue$11353[ebp], 0
; Line 1591
	jmp	SHORT $LN9@appendKeyw@2
$LN8@appendKeyw@2:
; Line 1593
	mov	eax, DWORD PTR _appendAt$[ebp]
	add	eax, DWORD PTR _reslen$[ebp]
	mov	BYTE PTR [eax], 59			; 0000003bH
$LN9@appendKeyw@2:
; Line 1596
	mov	eax, DWORD PTR _reslen$[ebp]
	add	eax, 1
	mov	DWORD PTR _reslen$[ebp], eax
; Line 1599
	mov	eax, DWORD PTR _kwd$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_strlen
	add	esp, 4
	mov	DWORD PTR _len$[ebp], eax
; Line 1600
	mov	eax, DWORD PTR _reslen$[ebp]
	cmp	eax, DWORD PTR _capacity$[ebp]
	jge	SHORT $LN6@appendKeyw@2
; Line 1601
	push	1
	mov	eax, DWORD PTR _kwd$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_uprv_checkValidMemory
	add	esp, 8
	mov	edx, DWORD PTR _capacity$[ebp]
	sub	edx, DWORD PTR _reslen$[ebp]
	push	edx
	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	call	_uprv_min_56
	add	esp, 8
	push	eax
	mov	ecx, DWORD PTR _kwd$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _appendAt$[ebp]
	add	eax, DWORD PTR _reslen$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN6@appendKeyw@2:
; Line 1603
	mov	eax, DWORD PTR _reslen$[ebp]
	add	eax, DWORD PTR _len$[ebp]
	mov	DWORD PTR _reslen$[ebp], eax
; Line 1606
	mov	eax, DWORD PTR _reslen$[ebp]
	cmp	eax, DWORD PTR _capacity$[ebp]
	jge	SHORT $LN5@appendKeyw@2
; Line 1607
	mov	eax, DWORD PTR _appendAt$[ebp]
	add	eax, DWORD PTR _reslen$[ebp]
	mov	BYTE PTR [eax], 61			; 0000003dH
$LN5@appendKeyw@2:
; Line 1609
	mov	eax, DWORD PTR _reslen$[ebp]
	add	eax, 1
	mov	DWORD PTR _reslen$[ebp], eax
; Line 1612
	mov	eax, DWORD PTR _kwd$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	_strlen
	add	esp, 4
	mov	DWORD PTR _len$[ebp], eax
; Line 1613
	mov	eax, DWORD PTR _reslen$[ebp]
	cmp	eax, DWORD PTR _capacity$[ebp]
	jge	SHORT $LN4@appendKeyw@2
; Line 1614
	push	1
	mov	eax, DWORD PTR _kwd$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	_uprv_checkValidMemory
	add	esp, 8
	mov	edx, DWORD PTR _capacity$[ebp]
	sub	edx, DWORD PTR _reslen$[ebp]
	push	edx
	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	call	_uprv_min_56
	add	esp, 8
	push	eax
	mov	ecx, DWORD PTR _kwd$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _appendAt$[ebp]
	add	eax, DWORD PTR _reslen$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN4@appendKeyw@2:
; Line 1616
	mov	eax, DWORD PTR _reslen$[ebp]
	add	eax, DWORD PTR _len$[ebp]
	mov	DWORD PTR _reslen$[ebp], eax
; Line 1618
	mov	eax, DWORD PTR _kwd$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _kwd$[ebp], ecx
; Line 1619
	cmp	DWORD PTR _kwd$[ebp], 0
	jne	$LN12@appendKeyw@2
$LN13@appendKeyw@2:
; Line 1623
	mov	eax, DWORD PTR _kwdFirst$[ebp]
	mov	DWORD PTR _kwd$[ebp], eax
$LN3@appendKeyw@2:
; Line 1624
	cmp	DWORD PTR _kwd$[ebp], 0
	je	SHORT $LN2@appendKeyw@2
; Line 1625
	mov	eax, DWORD PTR _kwd$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _tmpKwd$11369[ebp], ecx
; Line 1626
	mov	eax, DWORD PTR _kwd$[ebp]
	push	eax
	call	_uprv_free_56
	add	esp, 4
; Line 1627
	mov	eax, DWORD PTR _tmpKwd$11369[ebp]
	mov	DWORD PTR _kwd$[ebp], eax
; Line 1628
	jmp	SHORT $LN3@appendKeyw@2
$LN2@appendKeyw@2:
; Line 1630
	mov	eax, DWORD PTR _kwdBuf$[ebp]
	push	eax
	call	_uprv_free_56
	add	esp, 4
; Line 1632
	mov	eax, DWORD PTR _status$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN1@appendKeyw@2
; Line 1633
	xor	eax, eax
	jmp	SHORT $LN32@appendKeyw@2
$LN1@appendKeyw@2:
; Line 1636
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _reslen$[ebp]
	push	ecx
	mov	edx, DWORD PTR _capacity$[ebp]
	push	edx
	mov	eax, DWORD PTR _appendAt$[ebp]
	push	eax
	call	_u_terminateChars_56
	add	esp, 16					; 00000010H
$LN32@appendKeyw@2:
; Line 1637
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN37@appendKeyw@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 348				; 0000015cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN37@appendKeyw@2:
	DD	2
	DD	$LN36@appendKeyw@2
$LN36@appendKeyw@2:
	DD	-56					; ffffffc8H
	DD	4
	DD	$LN34@appendKeyw@2
	DD	-125					; ffffff83H
	DD	1
	DD	$LN35@appendKeyw@2
$LN35@appendKeyw@2:
	DB	112					; 00000070H
	DB	111					; 0000006fH
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	120					; 00000078H
	DB	86					; 00000056H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	105					; 00000069H
	DB	97					; 00000061H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	0
$LN34@appendKeyw@2:
	DB	107					; 0000006bH
	DB	119					; 00000077H
	DB	100					; 00000064H
	DB	70					; 00000046H
	DB	105					; 00000069H
	DB	114					; 00000072H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	0
__appendKeywords ENDP
_TEXT	ENDS
PUBLIC	??_C@_1CO@HAHAKBHN@?$AAp?$AAB?$AAc?$AAp?$AAK?$AAe?$AAy?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA?$CI?$AA?$CI?$AAv?$AAo?$AAi?$AAd?$AA?5?$AA?$CK?$AA?$CJ?$AA0?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1FK@JNHHFJMB@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@ ; `string'
PUBLIC	?__LINE__Var@?1??_appendLDMLExtensionAsKeywords@@9@9@97a5f4f1 ; `_appendLDMLExtensionAsKeywords'::`2'::__LINE__Var
PUBLIC	__$ArrayPad$
EXTRN	_uloc_toLegacyType_56:PROC
EXTRN	_uloc_toLegacyKey_56:PROC
EXTRN	__imp__strncpy:PROC
EXTRN	__imp___wassert:PROC
;	COMDAT ??_C@_1CO@HAHAKBHN@?$AAp?$AAB?$AAc?$AAp?$AAK?$AAe?$AAy?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA?$CI?$AA?$CI?$AAv?$AAo?$AAi?$AAd?$AA?5?$AA?$CK?$AA?$CJ?$AA0?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1CO@HAHAKBHN@?$AAp?$AAB?$AAc?$AAp?$AAK?$AAe?$AAy?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA?$CI?$AA?$CI?$AAv?$AAo?$AAi?$AAd?$AA?5?$AA?$CK?$AA?$CJ?$AA0?$AA?$CJ?$AA?$AA@ DB 'p'
	DB	00H, 'B', 00H, 'c', 00H, 'p', 00H, 'K', 00H, 'e', 00H, 'y', 00H
	DB	' ', 00H, '!', 00H, '=', 00H, ' ', 00H, '(', 00H, '(', 00H, 'v'
	DB	00H, 'o', 00H, 'i', 00H, 'd', 00H, ' ', 00H, '*', 00H, ')', 00H
	DB	'0', 00H, ')', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1FK@JNHHFJMB@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@
CONST	SEGMENT
??_C@_1FK@JNHHFJMB@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@ DB 'd'
	DB	00H, ':', 00H, '\', 00H, 'm', 00H, 'o', 00H, 'z', 00H, 'i', 00H
	DB	'l', 00H, 'l', 00H, 'a', 00H, '\', 00H, 'i', 00H, 'n', 00H, 't'
	DB	00H, 'l', 00H, '\', 00H, 'i', 00H, 'c', 00H, 'u', 00H, '\', 00H
	DB	's', 00H, 'o', 00H, 'u', 00H, 'r', 00H, 'c', 00H, 'e', 00H, '\'
	DB	00H, 'c', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'o', 00H, 'n', 00H
	DB	'\', 00H, 'u', 00H, 'l', 00H, 'o', 00H, 'c', 00H, '_', 00H, 't'
	DB	00H, 'a', 00H, 'g', 00H, '.', 00H, 'c', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??_appendLDMLExtensionAsKeywords@@9@9@97a5f4f1
_DATA	SEGMENT
?__LINE__Var@?1??_appendLDMLExtensionAsKeywords@@9@9@97a5f4f1 DD 04aaH ; `_appendLDMLExtensionAsKeywords'::`2'::__LINE__Var
; Function compile flags: /Odtp /RTCsu /ZI
_DATA	ENDS
;	COMDAT __appendLDMLExtensionAsKeywords
_TEXT	SEGMENT
tv281 = -728						; size = 4
_bcpTypeBuf$11271 = -528				; size = 128
_bcpKeyBuf$11261 = -392					; size = 9
_pType$11259 = -372					; size = 4
_pKey$11257 = -360					; size = 4
_emitKeyword$11238 = -345				; size = 1
_nextBcpKeyLen$11237 = -336				; size = 4
_pNextBcpKey$11235 = -324				; size = 4
_isDone$11231 = -309					; size = 1
_bcpTypeLen$11230 = -300				; size = 4
_bcpKeyLen$11229 = -288					; size = 4
_pBcpType$11227 = -276					; size = 4
_pBcpKey$11225 = -264					; size = 4
_attrBufIdx$ = -252					; size = 4
_attrBuf$ = -240					; size = 100
_bufIdx$ = -132						; size = 4
_len$ = -120						; size = 4
_nextAttr$ = -108					; size = 4
_attr$ = -96						; size = 4
_attrFirst$ = -84					; size = 4
_nextKwd$ = -72						; size = 4
_kwd$ = -60						; size = 4
_kwdFirst$ = -48					; size = 4
_variantExists$ = -33					; size = 1
_pKwds$ = -24						; size = 4
_pTag$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_ldmlext$ = 8						; size = 4
_appendTo$ = 12						; size = 4
_buf$ = 16						; size = 4
_bufSize$ = 20						; size = 4
_posixVariant$ = 24					; size = 4
_status$ = 28						; size = 4
__appendLDMLExtensionAsKeywords PROC			; COMDAT
; Line 1194
	push	ebp
	mov	ebp, esp
	sub	esp, 728				; 000002d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-728]
	mov	ecx, 182				; 000000b6H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 1197
	mov	eax, DWORD PTR _posixVariant$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _variantExists$[ebp], cl
; Line 1199
	mov	DWORD PTR _kwdFirst$[ebp], 0
; Line 1202
	mov	DWORD PTR _attrFirst$[ebp], 0
; Line 1206
	mov	DWORD PTR _bufIdx$[ebp], 0
; Line 1209
	mov	DWORD PTR _attrBufIdx$[ebp], 0
; Line 1212
	mov	eax, DWORD PTR _posixVariant$[ebp]
	mov	BYTE PTR [eax], 0
; Line 1214
	mov	eax, DWORD PTR _ldmlext$[ebp]
	mov	DWORD PTR _pTag$[ebp], eax
; Line 1215
	mov	DWORD PTR _pKwds$[ebp], 0
$LN58@appendLDML:
; Line 1218
	mov	eax, DWORD PTR _pTag$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	$LN57@appendLDML
; Line 1220
	mov	DWORD PTR _len$[ebp], 0
	jmp	SHORT $LN56@appendLDML
$LN55@appendLDML:
	mov	eax, DWORD PTR _len$[ebp]
	add	eax, 1
	mov	DWORD PTR _len$[ebp], eax
$LN56@appendLDML:
	mov	eax, DWORD PTR _pTag$[ebp]
	add	eax, DWORD PTR _len$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN54@appendLDML
	mov	eax, DWORD PTR _pTag$[ebp]
	add	eax, DWORD PTR _len$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 45					; 0000002dH
	je	SHORT $LN54@appendLDML
	jmp	SHORT $LN55@appendLDML
$LN54@appendLDML:
; Line 1222
	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pTag$[ebp]
	push	ecx
	call	_ultag_isUnicodeLocaleKey_56
	add	esp, 8
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN53@appendLDML
; Line 1223
	mov	eax, DWORD PTR _pTag$[ebp]
	mov	DWORD PTR _pKwds$[ebp], eax
; Line 1224
	jmp	$LN57@appendLDML
$LN53@appendLDML:
; Line 1228
	push	8
	call	_uprv_malloc_56
	add	esp, 4
	mov	DWORD PTR _attr$[ebp], eax
; Line 1229
	cmp	DWORD PTR _attr$[ebp], 0
	jne	SHORT $LN52@appendLDML
; Line 1230
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 7
; Line 1231
	jmp	$cleanup$11201
$LN52@appendLDML:
; Line 1234
	mov	eax, 100				; 00000064H
	sub	eax, DWORD PTR _attrBufIdx$[ebp]
	cmp	DWORD PTR _len$[ebp], eax
	jge	SHORT $LN51@appendLDML
; Line 1235
	push	1
	mov	eax, DWORD PTR _pTag$[ebp]
	push	eax
	call	_uprv_checkValidMemory
	add	esp, 8
	mov	ecx, DWORD PTR _len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pTag$[ebp]
	push	edx
	mov	eax, DWORD PTR _attrBufIdx$[ebp]
	lea	ecx, DWORD PTR _attrBuf$[ebp+eax]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 1236
	mov	eax, DWORD PTR _attrBufIdx$[ebp]
	add	eax, DWORD PTR _len$[ebp]
	mov	BYTE PTR _attrBuf$[ebp+eax], 0
; Line 1237
	mov	eax, DWORD PTR _attrBufIdx$[ebp]
	lea	ecx, DWORD PTR _attrBuf$[ebp+eax]
	mov	edx, DWORD PTR _attr$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 1238
	mov	eax, DWORD PTR _len$[ebp]
	mov	ecx, DWORD PTR _attrBufIdx$[ebp]
	lea	edx, DWORD PTR [ecx+eax+1]
	mov	DWORD PTR _attrBufIdx$[ebp], edx
; Line 1239
	jmp	SHORT $LN50@appendLDML
$LN51@appendLDML:
; Line 1240
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 1
; Line 1241
	jmp	$cleanup$11201
$LN50@appendLDML:
; Line 1244
	mov	eax, DWORD PTR _attr$[ebp]
	push	eax
	lea	ecx, DWORD PTR _attrFirst$[ebp]
	push	ecx
	call	__addAttributeToList
	add	esp, 8
	movsx	edx, al
	test	edx, edx
	jne	SHORT $LN49@appendLDML
; Line 1245
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 1
; Line 1246
	mov	eax, DWORD PTR _attr$[ebp]
	push	eax
	call	_uprv_free_56
	add	esp, 4
; Line 1247
	jmp	$cleanup$11201
$LN49@appendLDML:
; Line 1251
	mov	eax, DWORD PTR _pTag$[ebp]
	add	eax, DWORD PTR _len$[ebp]
	mov	DWORD PTR _pTag$[ebp], eax
; Line 1252
	mov	eax, DWORD PTR _pTag$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN48@appendLDML
; Line 1254
	mov	eax, DWORD PTR _pTag$[ebp]
	add	eax, 1
	mov	DWORD PTR _pTag$[ebp], eax
$LN48@appendLDML:
; Line 1256
	jmp	$LN58@appendLDML
$LN57@appendLDML:
; Line 1258
	cmp	DWORD PTR _attrFirst$[ebp], 0
	je	$LN47@appendLDML
; Line 1261
	mov	eax, DWORD PTR _attrBufIdx$[ebp]
	cmp	eax, DWORD PTR _bufSize$[ebp]
	jle	SHORT $LN46@appendLDML
; Line 1263
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 1
; Line 1264
	jmp	$cleanup$11201
$LN46@appendLDML:
; Line 1267
	push	12					; 0000000cH
	call	_uprv_malloc_56
	add	esp, 4
	mov	DWORD PTR _kwd$[ebp], eax
; Line 1268
	cmp	DWORD PTR _kwd$[ebp], 0
	jne	SHORT $LN45@appendLDML
; Line 1269
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 7
; Line 1270
	jmp	$cleanup$11201
$LN45@appendLDML:
; Line 1273
	mov	eax, DWORD PTR _kwd$[ebp]
	mov	DWORD PTR [eax], OFFSET _LOCALE_ATTRIBUTE_KEY
; Line 1274
	mov	eax, DWORD PTR _kwd$[ebp]
	mov	ecx, DWORD PTR _buf$[ebp]
	mov	DWORD PTR [eax+4], ecx
; Line 1277
	mov	eax, DWORD PTR _attrFirst$[ebp]
	mov	DWORD PTR _attr$[ebp], eax
$LN44@appendLDML:
; Line 1278
	cmp	DWORD PTR _attr$[ebp], 0
	je	$LN43@appendLDML
; Line 1279
	mov	eax, DWORD PTR _attr$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _nextAttr$[ebp], ecx
; Line 1282
	mov	eax, DWORD PTR _attr$[ebp]
	cmp	eax, DWORD PTR _attrFirst$[ebp]
	je	SHORT $LN42@appendLDML
; Line 1283
	mov	eax, DWORD PTR _buf$[ebp]
	add	eax, DWORD PTR _bufIdx$[ebp]
	mov	BYTE PTR [eax], 45			; 0000002dH
; Line 1284
	mov	eax, DWORD PTR _bufIdx$[ebp]
	add	eax, 1
	mov	DWORD PTR _bufIdx$[ebp], eax
$LN42@appendLDML:
; Line 1287
	mov	eax, DWORD PTR _attr$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_strlen
	add	esp, 4
	mov	DWORD PTR _len$[ebp], eax
; Line 1288
	push	1
	mov	eax, DWORD PTR _attr$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_uprv_checkValidMemory
	add	esp, 8
	mov	edx, DWORD PTR _len$[ebp]
	push	edx
	mov	eax, DWORD PTR _attr$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _buf$[ebp]
	add	edx, DWORD PTR _bufIdx$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 1289
	mov	eax, DWORD PTR _bufIdx$[ebp]
	add	eax, DWORD PTR _len$[ebp]
	mov	DWORD PTR _bufIdx$[ebp], eax
; Line 1291
	mov	eax, DWORD PTR _nextAttr$[ebp]
	mov	DWORD PTR _attr$[ebp], eax
; Line 1292
	jmp	$LN44@appendLDML
$LN43@appendLDML:
; Line 1293
	mov	eax, DWORD PTR _buf$[ebp]
	add	eax, DWORD PTR _bufIdx$[ebp]
	mov	BYTE PTR [eax], 0
; Line 1294
	mov	eax, DWORD PTR _bufIdx$[ebp]
	add	eax, 1
	mov	DWORD PTR _bufIdx$[ebp], eax
; Line 1296
	push	0
	mov	eax, DWORD PTR _kwd$[ebp]
	push	eax
	lea	ecx, DWORD PTR _kwdFirst$[ebp]
	push	ecx
	call	__addExtensionToList
	add	esp, 12					; 0000000cH
	movsx	edx, al
	test	edx, edx
	jne	SHORT $LN41@appendLDML
; Line 1297
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 1
; Line 1298
	mov	eax, DWORD PTR _kwd$[ebp]
	push	eax
	call	_uprv_free_56
	add	esp, 4
; Line 1299
	jmp	$cleanup$11201
$LN41@appendLDML:
; Line 1303
	mov	eax, DWORD PTR _attrFirst$[ebp]
	mov	DWORD PTR _attr$[ebp], eax
$LN40@appendLDML:
; Line 1304
	cmp	DWORD PTR _attr$[ebp], 0
	je	SHORT $LN39@appendLDML
; Line 1305
	mov	eax, DWORD PTR _attr$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _nextAttr$[ebp], ecx
; Line 1306
	mov	eax, DWORD PTR _attr$[ebp]
	push	eax
	call	_uprv_free_56
	add	esp, 4
; Line 1307
	mov	eax, DWORD PTR _nextAttr$[ebp]
	mov	DWORD PTR _attr$[ebp], eax
; Line 1308
	jmp	SHORT $LN40@appendLDML
$LN39@appendLDML:
; Line 1309
	mov	DWORD PTR _attrFirst$[ebp], 0
$LN47@appendLDML:
; Line 1312
	cmp	DWORD PTR _pKwds$[ebp], 0
	je	$LN38@appendLDML
; Line 1313
	mov	DWORD PTR _pBcpKey$11225[ebp], 0
; Line 1314
	mov	DWORD PTR _pBcpType$11227[ebp], 0
; Line 1315
	mov	DWORD PTR _bcpKeyLen$11229[ebp], 0
; Line 1316
	mov	DWORD PTR _bcpTypeLen$11230[ebp], 0
; Line 1317
	mov	BYTE PTR _isDone$11231[ebp], 0
; Line 1319
	mov	eax, DWORD PTR _pKwds$[ebp]
	mov	DWORD PTR _pTag$[ebp], eax
$LN37@appendLDML:
; Line 1321
	movsx	eax, BYTE PTR _isDone$11231[ebp]
	test	eax, eax
	jne	$LN38@appendLDML
; Line 1322
	mov	DWORD PTR _pNextBcpKey$11235[ebp], 0
; Line 1323
	mov	DWORD PTR _nextBcpKeyLen$11237[ebp], 0
; Line 1324
	mov	BYTE PTR _emitKeyword$11238[ebp], 0
; Line 1326
	mov	eax, DWORD PTR _pTag$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	$LN35@appendLDML
; Line 1328
	mov	DWORD PTR _len$[ebp], 0
	jmp	SHORT $LN34@appendLDML
$LN33@appendLDML:
	mov	eax, DWORD PTR _len$[ebp]
	add	eax, 1
	mov	DWORD PTR _len$[ebp], eax
$LN34@appendLDML:
	mov	eax, DWORD PTR _pTag$[ebp]
	add	eax, DWORD PTR _len$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN32@appendLDML
	mov	eax, DWORD PTR _pTag$[ebp]
	add	eax, DWORD PTR _len$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 45					; 0000002dH
	je	SHORT $LN32@appendLDML
	jmp	SHORT $LN33@appendLDML
$LN32@appendLDML:
; Line 1330
	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pTag$[ebp]
	push	ecx
	call	_ultag_isUnicodeLocaleKey_56
	add	esp, 8
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN31@appendLDML
; Line 1331
	cmp	DWORD PTR _pBcpKey$11225[ebp], 0
	je	SHORT $LN30@appendLDML
; Line 1332
	mov	BYTE PTR _emitKeyword$11238[ebp], 1
; Line 1333
	mov	eax, DWORD PTR _pTag$[ebp]
	mov	DWORD PTR _pNextBcpKey$11235[ebp], eax
; Line 1334
	mov	eax, DWORD PTR _len$[ebp]
	mov	DWORD PTR _nextBcpKeyLen$11237[ebp], eax
; Line 1335
	jmp	SHORT $LN29@appendLDML
$LN30@appendLDML:
; Line 1336
	mov	eax, DWORD PTR _pTag$[ebp]
	mov	DWORD PTR _pBcpKey$11225[ebp], eax
; Line 1337
	mov	eax, DWORD PTR _len$[ebp]
	mov	DWORD PTR _bcpKeyLen$11229[ebp], eax
$LN29@appendLDML:
; Line 1339
	jmp	SHORT $LN28@appendLDML
$LN31@appendLDML:
; Line 1340
	cmp	DWORD PTR _pBcpKey$11225[ebp], 0
	jne	SHORT $LN61@appendLDML
	mov	eax, DWORD PTR ?__LINE__Var@?1??_appendLDMLExtensionAsKeywords@@9@9@97a5f4f1
	add	eax, 146				; 00000092H
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1FK@JNHHFJMB@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@
	push	OFFSET ??_C@_1CO@HAHAKBHN@?$AAp?$AAB?$AAc?$AAp?$AAK?$AAe?$AAy?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA?$CI?$AA?$CI?$AAv?$AAo?$AAi?$AAd?$AA?5?$AA?$CK?$AA?$CJ?$AA0?$AA?$CJ?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN61@appendLDML:
; Line 1342
	cmp	DWORD PTR _pBcpType$11227[ebp], 0
	je	SHORT $LN27@appendLDML
; Line 1343
	mov	eax, DWORD PTR _len$[ebp]
	mov	ecx, DWORD PTR _bcpTypeLen$11230[ebp]
	lea	edx, DWORD PTR [ecx+eax+1]
	mov	DWORD PTR _bcpTypeLen$11230[ebp], edx
; Line 1344
	jmp	SHORT $LN28@appendLDML
$LN27@appendLDML:
; Line 1345
	mov	eax, DWORD PTR _pTag$[ebp]
	mov	DWORD PTR _pBcpType$11227[ebp], eax
; Line 1346
	mov	eax, DWORD PTR _len$[ebp]
	mov	DWORD PTR _bcpTypeLen$11230[ebp], eax
$LN28@appendLDML:
; Line 1351
	mov	eax, DWORD PTR _pTag$[ebp]
	add	eax, DWORD PTR _len$[ebp]
	mov	DWORD PTR _pTag$[ebp], eax
; Line 1352
	mov	eax, DWORD PTR _pTag$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN25@appendLDML
; Line 1354
	mov	eax, DWORD PTR _pTag$[ebp]
	add	eax, 1
	mov	DWORD PTR _pTag$[ebp], eax
$LN25@appendLDML:
; Line 1356
	jmp	SHORT $LN24@appendLDML
$LN35@appendLDML:
; Line 1358
	mov	BYTE PTR _emitKeyword$11238[ebp], 1
; Line 1359
	mov	BYTE PTR _isDone$11231[ebp], 1
$LN24@appendLDML:
; Line 1362
	movsx	eax, BYTE PTR _emitKeyword$11238[ebp]
	test	eax, eax
	je	$LN23@appendLDML
; Line 1363
	mov	DWORD PTR _pKey$11257[ebp], 0
; Line 1364
	mov	DWORD PTR _pType$11259[ebp], 0
; Line 1368
	cmp	DWORD PTR _pBcpKey$11225[ebp], 0
	jne	SHORT $LN62@appendLDML
	mov	eax, DWORD PTR ?__LINE__Var@?1??_appendLDMLExtensionAsKeywords@@9@9@97a5f4f1
	add	eax, 174				; 000000aeH
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1FK@JNHHFJMB@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@
	push	OFFSET ??_C@_1CO@HAHAKBHN@?$AAp?$AAB?$AAc?$AAp?$AAK?$AAe?$AAy?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA?$CI?$AA?$CI?$AAv?$AAo?$AAi?$AAd?$AA?5?$AA?$CK?$AA?$CJ?$AA0?$AA?$CJ?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN62@appendLDML:
; Line 1370
	cmp	DWORD PTR _bcpKeyLen$11229[ebp], 9
	jb	SHORT $LN22@appendLDML
; Line 1372
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 1
; Line 1373
	jmp	$cleanup$11201
$LN22@appendLDML:
; Line 1376
	push	1
	mov	eax, DWORD PTR _pBcpKey$11225[ebp]
	push	eax
	call	_uprv_checkValidMemory
	add	esp, 8
	mov	esi, esp
	mov	ecx, DWORD PTR _bcpKeyLen$11229[ebp]
	push	ecx
	mov	edx, DWORD PTR _pBcpKey$11225[ebp]
	push	edx
	lea	eax, DWORD PTR _bcpKeyBuf$11261[ebp]
	push	eax
	call	DWORD PTR __imp__strncpy
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1377
	mov	eax, DWORD PTR _bcpKeyLen$11229[ebp]
	mov	BYTE PTR _bcpKeyBuf$11261[ebp+eax], 0
; Line 1380
	lea	eax, DWORD PTR _bcpKeyBuf$11261[ebp]
	push	eax
	call	_uloc_toLegacyKey_56
	add	esp, 4
	mov	DWORD PTR _pKey$11257[ebp], eax
; Line 1381
	cmp	DWORD PTR _pKey$11257[ebp], 0
	jne	SHORT $LN21@appendLDML
; Line 1382
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 1
; Line 1383
	jmp	$cleanup$11201
$LN21@appendLDML:
; Line 1385
	mov	eax, DWORD PTR _pKey$11257[ebp]
	lea	ecx, DWORD PTR _bcpKeyBuf$11261[ebp]
	cmp	eax, ecx
	jne	$LN20@appendLDML
; Line 1390
	lea	eax, DWORD PTR _bcpKeyBuf$11261[ebp]
	push	eax
	call	_T_CString_toLowerCase_56
	add	esp, 4
; Line 1391
	mov	eax, DWORD PTR _bufSize$[ebp]
	sub	eax, DWORD PTR _bufIdx$[ebp]
	sub	eax, 1
	cmp	eax, DWORD PTR _bcpKeyLen$11229[ebp]
	jl	SHORT $LN19@appendLDML
; Line 1392
	push	1
	lea	eax, DWORD PTR _bcpKeyBuf$11261[ebp]
	push	eax
	call	_uprv_checkValidMemory
	add	esp, 8
	mov	ecx, DWORD PTR _bcpKeyLen$11229[ebp]
	push	ecx
	lea	edx, DWORD PTR _bcpKeyBuf$11261[ebp]
	push	edx
	mov	eax, DWORD PTR _buf$[ebp]
	add	eax, DWORD PTR _bufIdx$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 1393
	mov	eax, DWORD PTR _buf$[ebp]
	add	eax, DWORD PTR _bufIdx$[ebp]
	mov	DWORD PTR _pKey$11257[ebp], eax
; Line 1394
	mov	eax, DWORD PTR _bufIdx$[ebp]
	add	eax, DWORD PTR _bcpKeyLen$11229[ebp]
	mov	DWORD PTR _bufIdx$[ebp], eax
; Line 1395
	mov	eax, DWORD PTR _buf$[ebp]
	add	eax, DWORD PTR _bufIdx$[ebp]
	mov	BYTE PTR [eax], 0
; Line 1396
	mov	eax, DWORD PTR _bufIdx$[ebp]
	add	eax, 1
	mov	DWORD PTR _bufIdx$[ebp], eax
; Line 1397
	jmp	SHORT $LN20@appendLDML
$LN19@appendLDML:
; Line 1398
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
; Line 1399
	jmp	$cleanup$11201
$LN20@appendLDML:
; Line 1403
	cmp	DWORD PTR _pBcpType$11227[ebp], 0
	je	$LN17@appendLDML
; Line 1405
	cmp	DWORD PTR _bcpTypeLen$11230[ebp], 128	; 00000080H
	jb	SHORT $LN16@appendLDML
; Line 1407
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 1
; Line 1408
	jmp	$cleanup$11201
$LN16@appendLDML:
; Line 1411
	push	1
	mov	eax, DWORD PTR _pBcpType$11227[ebp]
	push	eax
	call	_uprv_checkValidMemory
	add	esp, 8
	mov	esi, esp
	mov	ecx, DWORD PTR _bcpTypeLen$11230[ebp]
	push	ecx
	mov	edx, DWORD PTR _pBcpType$11227[ebp]
	push	edx
	lea	eax, DWORD PTR _bcpTypeBuf$11271[ebp]
	push	eax
	call	DWORD PTR __imp__strncpy
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1412
	mov	eax, DWORD PTR _bcpTypeLen$11230[ebp]
	mov	BYTE PTR _bcpTypeBuf$11271[ebp+eax], 0
; Line 1415
	lea	eax, DWORD PTR _bcpTypeBuf$11271[ebp]
	push	eax
	mov	ecx, DWORD PTR _pKey$11257[ebp]
	push	ecx
	call	_uloc_toLegacyType_56
	add	esp, 8
	mov	DWORD PTR _pType$11259[ebp], eax
; Line 1416
	cmp	DWORD PTR _pType$11259[ebp], 0
	jne	SHORT $LN15@appendLDML
; Line 1417
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 1
; Line 1418
	jmp	$cleanup$11201
$LN15@appendLDML:
; Line 1420
	mov	eax, DWORD PTR _pType$11259[ebp]
	lea	ecx, DWORD PTR _bcpTypeBuf$11271[ebp]
	cmp	eax, ecx
	jne	$LN14@appendLDML
; Line 1426
	lea	eax, DWORD PTR _bcpTypeBuf$11271[ebp]
	push	eax
	call	_T_CString_toLowerCase_56
	add	esp, 4
; Line 1427
	mov	eax, DWORD PTR _bufSize$[ebp]
	sub	eax, DWORD PTR _bufIdx$[ebp]
	sub	eax, 1
	cmp	eax, DWORD PTR _bcpTypeLen$11230[ebp]
	jl	SHORT $LN13@appendLDML
; Line 1428
	push	1
	lea	eax, DWORD PTR _bcpTypeBuf$11271[ebp]
	push	eax
	call	_uprv_checkValidMemory
	add	esp, 8
	mov	ecx, DWORD PTR _bcpTypeLen$11230[ebp]
	push	ecx
	lea	edx, DWORD PTR _bcpTypeBuf$11271[ebp]
	push	edx
	mov	eax, DWORD PTR _buf$[ebp]
	add	eax, DWORD PTR _bufIdx$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 1429
	mov	eax, DWORD PTR _buf$[ebp]
	add	eax, DWORD PTR _bufIdx$[ebp]
	mov	DWORD PTR _pType$11259[ebp], eax
; Line 1430
	mov	eax, DWORD PTR _bufIdx$[ebp]
	add	eax, DWORD PTR _bcpTypeLen$11230[ebp]
	mov	DWORD PTR _bufIdx$[ebp], eax
; Line 1431
	mov	eax, DWORD PTR _buf$[ebp]
	add	eax, DWORD PTR _bufIdx$[ebp]
	mov	BYTE PTR [eax], 0
; Line 1432
	mov	eax, DWORD PTR _bufIdx$[ebp]
	add	eax, 1
	mov	DWORD PTR _bufIdx$[ebp], eax
; Line 1433
	jmp	SHORT $LN14@appendLDML
$LN13@appendLDML:
; Line 1434
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
; Line 1435
	jmp	$cleanup$11201
$LN14@appendLDML:
; Line 1438
	jmp	SHORT $LN11@appendLDML
$LN17@appendLDML:
; Line 1440
	mov	DWORD PTR _pType$11259[ebp], OFFSET _LOCALE_TYPE_YES
$LN11@appendLDML:
; Line 1445
	movsx	eax, BYTE PTR _variantExists$[ebp]
	test	eax, eax
	jne	SHORT $LN10@appendLDML
	push	OFFSET _POSIX_KEY
	mov	eax, DWORD PTR _pKey$11257[ebp]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN10@appendLDML
	push	OFFSET _POSIX_VALUE
	mov	eax, DWORD PTR _pType$11259[ebp]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN10@appendLDML
; Line 1446
	mov	eax, DWORD PTR _posixVariant$[ebp]
	mov	BYTE PTR [eax], 1
; Line 1447
	jmp	SHORT $LN9@appendLDML
$LN10@appendLDML:
; Line 1449
	push	12					; 0000000cH
	call	_uprv_malloc_56
	add	esp, 4
	mov	DWORD PTR _kwd$[ebp], eax
; Line 1450
	cmp	DWORD PTR _kwd$[ebp], 0
	jne	SHORT $LN8@appendLDML
; Line 1451
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 7
; Line 1452
	jmp	$cleanup$11201
$LN8@appendLDML:
; Line 1455
	mov	eax, DWORD PTR _kwd$[ebp]
	mov	ecx, DWORD PTR _pKey$11257[ebp]
	mov	DWORD PTR [eax], ecx
; Line 1456
	mov	eax, DWORD PTR _kwd$[ebp]
	mov	ecx, DWORD PTR _pType$11259[ebp]
	mov	DWORD PTR [eax+4], ecx
; Line 1458
	push	0
	mov	eax, DWORD PTR _kwd$[ebp]
	push	eax
	lea	ecx, DWORD PTR _kwdFirst$[ebp]
	push	ecx
	call	__addExtensionToList
	add	esp, 12					; 0000000cH
	movsx	edx, al
	test	edx, edx
	jne	SHORT $LN9@appendLDML
; Line 1459
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 1
; Line 1460
	mov	eax, DWORD PTR _kwd$[ebp]
	push	eax
	call	_uprv_free_56
	add	esp, 4
; Line 1461
	jmp	$cleanup$11201
$LN9@appendLDML:
; Line 1465
	mov	eax, DWORD PTR _pNextBcpKey$11235[ebp]
	mov	DWORD PTR _pBcpKey$11225[ebp], eax
; Line 1466
	cmp	DWORD PTR _pNextBcpKey$11235[ebp], 0
	je	SHORT $LN63@appendLDML
	mov	eax, DWORD PTR _nextBcpKeyLen$11237[ebp]
	mov	DWORD PTR tv281[ebp], eax
	jmp	SHORT $LN64@appendLDML
$LN63@appendLDML:
	mov	DWORD PTR tv281[ebp], 0
$LN64@appendLDML:
	mov	ecx, DWORD PTR tv281[ebp]
	mov	DWORD PTR _bcpKeyLen$11229[ebp], ecx
; Line 1467
	mov	DWORD PTR _pBcpType$11227[ebp], 0
; Line 1468
	mov	DWORD PTR _bcpTypeLen$11230[ebp], 0
$LN23@appendLDML:
; Line 1470
	jmp	$LN37@appendLDML
$LN38@appendLDML:
; Line 1473
	mov	eax, DWORD PTR _kwdFirst$[ebp]
	mov	DWORD PTR _kwd$[ebp], eax
$LN6@appendLDML:
; Line 1474
	cmp	DWORD PTR _kwd$[ebp], 0
	je	SHORT $LN5@appendLDML
; Line 1475
	mov	eax, DWORD PTR _kwd$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _nextKwd$[ebp], ecx
; Line 1476
	push	0
	mov	eax, DWORD PTR _kwd$[ebp]
	push	eax
	mov	ecx, DWORD PTR _appendTo$[ebp]
	push	ecx
	call	__addExtensionToList
	add	esp, 12					; 0000000cH
; Line 1477
	mov	eax, DWORD PTR _nextKwd$[ebp]
	mov	DWORD PTR _kwd$[ebp], eax
; Line 1478
	jmp	SHORT $LN6@appendLDML
$LN5@appendLDML:
; Line 1480
	jmp	SHORT $LN59@appendLDML
$cleanup$11201:
; Line 1483
	mov	eax, DWORD PTR _attrFirst$[ebp]
	mov	DWORD PTR _attr$[ebp], eax
$LN4@appendLDML:
; Line 1484
	cmp	DWORD PTR _attr$[ebp], 0
	je	SHORT $LN3@appendLDML
; Line 1485
	mov	eax, DWORD PTR _attr$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _nextAttr$[ebp], ecx
; Line 1486
	mov	eax, DWORD PTR _attr$[ebp]
	push	eax
	call	_uprv_free_56
	add	esp, 4
; Line 1487
	mov	eax, DWORD PTR _nextAttr$[ebp]
	mov	DWORD PTR _attr$[ebp], eax
; Line 1488
	jmp	SHORT $LN4@appendLDML
$LN3@appendLDML:
; Line 1490
	mov	eax, DWORD PTR _kwdFirst$[ebp]
	mov	DWORD PTR _kwd$[ebp], eax
$LN2@appendLDML:
; Line 1491
	cmp	DWORD PTR _kwd$[ebp], 0
	je	SHORT $LN59@appendLDML
; Line 1492
	mov	eax, DWORD PTR _kwd$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _nextKwd$[ebp], ecx
; Line 1493
	mov	eax, DWORD PTR _kwd$[ebp]
	push	eax
	call	_uprv_free_56
	add	esp, 4
; Line 1494
	mov	eax, DWORD PTR _nextKwd$[ebp]
	mov	DWORD PTR _kwd$[ebp], eax
; Line 1495
	jmp	SHORT $LN2@appendLDML
$LN59@appendLDML:
; Line 1496
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN71@appendLDML
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 728				; 000002d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN71@appendLDML:
	DD	5
	DD	$LN70@appendLDML
$LN70@appendLDML:
	DD	-48					; ffffffd0H
	DD	4
	DD	$LN65@appendLDML
	DD	-84					; ffffffacH
	DD	4
	DD	$LN66@appendLDML
	DD	-240					; ffffff10H
	DD	100					; 00000064H
	DD	$LN67@appendLDML
	DD	-392					; fffffe78H
	DD	9
	DD	$LN68@appendLDML
	DD	-528					; fffffdf0H
	DD	128					; 00000080H
	DD	$LN69@appendLDML
$LN69@appendLDML:
	DB	98					; 00000062H
	DB	99					; 00000063H
	DB	112					; 00000070H
	DB	84					; 00000054H
	DB	121					; 00000079H
	DB	112					; 00000070H
	DB	101					; 00000065H
	DB	66					; 00000042H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
$LN68@appendLDML:
	DB	98					; 00000062H
	DB	99					; 00000063H
	DB	112					; 00000070H
	DB	75					; 0000004bH
	DB	101					; 00000065H
	DB	121					; 00000079H
	DB	66					; 00000042H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
$LN67@appendLDML:
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	66					; 00000042H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
$LN66@appendLDML:
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	70					; 00000046H
	DB	105					; 00000069H
	DB	114					; 00000072H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	0
$LN65@appendLDML:
	DB	107					; 0000006bH
	DB	119					; 00000077H
	DB	100					; 00000064H
	DB	70					; 00000046H
	DB	105					; 00000069H
	DB	114					; 00000072H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	0
__appendLDMLExtensionAsKeywords ENDP
_TEXT	ENDS
EXTRN	__imp__strncmp:PROC
EXTRN	_T_CString_toUpperCase_56:PROC
EXTRN	_uprv_stricmp_56:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _ultag_parse
_TEXT	SEGMENT
tv347 = -436						; size = 4
_pPrivuseVal$11561 = -236				; size = 4
_isAdded$11529 = -221					; size = 1
_var$11528 = -212					; size = 4
_p$11519 = -200						; size = 4
_pSep$11502 = -188					; size = 4
_newTagLength$11490 = -176				; size = 4
_grandfatheredLen$ = -164				; size = 4
_privateuseVar$ = -149					; size = 1
_i$ = -140						; size = 4
_pExtValueSubtagEnd$ = -128				; size = 4
_pExtValueSubtag$ = -116				; size = 4
_pExtension$ = -104					; size = 4
_extlangIdx$ = -92					; size = 4
_subtagLen$ = -80					; size = 4
_pLastGoodPosition$ = -68				; size = 4
_pNext$ = -56						; size = 4
_pSubtag$ = -44						; size = 4
_next$ = -32						; size = 2
_tagBuf$ = -20						; size = 4
_t$ = -8						; size = 4
_tag$ = 8						; size = 4
_tagLen$ = 12						; size = 4
_parsedLen$ = 16					; size = 4
_status$ = 20						; size = 4
_ultag_parse PROC					; COMDAT
; Line 1775
	push	ebp
	mov	ebp, esp
	sub	esp, 436				; 000001b4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-436]
	mov	ecx, 109				; 0000006dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1785
	mov	BYTE PTR _privateuseVar$[ebp], 0
; Line 1786
	mov	DWORD PTR _grandfatheredLen$[ebp], 0
; Line 1788
	cmp	DWORD PTR _parsedLen$[ebp], 0
	je	SHORT $LN77@ultag_pars
; Line 1789
	mov	eax, DWORD PTR _parsedLen$[ebp]
	mov	DWORD PTR [eax], 0
$LN77@ultag_pars:
; Line 1792
	mov	eax, DWORD PTR _status$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN76@ultag_pars
; Line 1793
	xor	eax, eax
	jmp	$LN78@ultag_pars
$LN76@ultag_pars:
; Line 1796
	cmp	DWORD PTR _tagLen$[ebp], 0
	jge	SHORT $LN75@ultag_pars
; Line 1797
	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	mov	DWORD PTR _tagLen$[ebp], eax
$LN75@ultag_pars:
; Line 1801
	mov	eax, DWORD PTR _tagLen$[ebp]
	add	eax, 1
	push	eax
	call	_uprv_malloc_56
	add	esp, 4
	mov	DWORD PTR _tagBuf$[ebp], eax
; Line 1802
	cmp	DWORD PTR _tagBuf$[ebp], 0
	jne	SHORT $LN74@ultag_pars
; Line 1803
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 7
; Line 1804
	xor	eax, eax
	jmp	$LN78@ultag_pars
$LN74@ultag_pars:
; Line 1806
	push	1
	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	call	_uprv_checkValidMemory
	add	esp, 8
	mov	ecx, DWORD PTR _tagLen$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tag$[ebp]
	push	edx
	mov	eax, DWORD PTR _tagBuf$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 1807
	mov	eax, DWORD PTR _tagBuf$[ebp]
	add	eax, DWORD PTR _tagLen$[ebp]
	mov	BYTE PTR [eax], 0
; Line 1810
	push	44					; 0000002cH
	call	_uprv_malloc_56
	add	esp, 4
	mov	DWORD PTR _t$[ebp], eax
; Line 1811
	cmp	DWORD PTR _t$[ebp], 0
	jne	SHORT $LN73@ultag_pars
; Line 1812
	mov	eax, DWORD PTR _tagBuf$[ebp]
	push	eax
	call	_uprv_free_56
	add	esp, 4
; Line 1813
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 7
; Line 1814
	xor	eax, eax
	jmp	$LN78@ultag_pars
$LN73@ultag_pars:
; Line 1816
	mov	eax, DWORD PTR _t$[ebp]
	push	eax
	call	__initializeULanguageTag
	add	esp, 4
; Line 1817
	mov	eax, DWORD PTR _t$[ebp]
	mov	ecx, DWORD PTR _tagBuf$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 1819
	cmp	DWORD PTR _tagLen$[ebp], 2
	jge	SHORT $LN72@ultag_pars
; Line 1821
	mov	eax, DWORD PTR _t$[ebp]
	jmp	$LN78@ultag_pars
$LN72@ultag_pars:
; Line 1825
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN71@ultag_pars
$LN70@ultag_pars:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 2
	mov	DWORD PTR _i$[ebp], eax
$LN71@ultag_pars:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	DWORD PTR _GRANDFATHERED[eax*4], 0
	je	$LN69@ultag_pars
; Line 1826
	mov	eax, DWORD PTR _tagBuf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _GRANDFATHERED[ecx*4]
	push	edx
	call	_uprv_stricmp_56
	add	esp, 8
	test	eax, eax
	jne	$LN68@ultag_pars
; Line 1829
	mov	eax, DWORD PTR _tagLen$[ebp]
	mov	DWORD PTR _grandfatheredLen$[ebp], eax
; Line 1830
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _GRANDFATHERED[eax*4+4]
	push	ecx
	call	_strlen
	add	esp, 4
	mov	DWORD PTR _newTagLength$11490[ebp], eax
; Line 1831
	mov	eax, DWORD PTR _tagLen$[ebp]
	cmp	eax, DWORD PTR _newTagLength$11490[ebp]
	jge	SHORT $LN67@ultag_pars
; Line 1832
	mov	eax, DWORD PTR _tagBuf$[ebp]
	push	eax
	call	_uprv_free_56
	add	esp, 4
; Line 1833
	mov	eax, DWORD PTR _newTagLength$11490[ebp]
	add	eax, 1
	push	eax
	call	_uprv_malloc_56
	add	esp, 4
	mov	DWORD PTR _tagBuf$[ebp], eax
; Line 1834
	cmp	DWORD PTR _tagBuf$[ebp], 0
	jne	SHORT $LN66@ultag_pars
; Line 1835
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 7
; Line 1836
	mov	eax, DWORD PTR _t$[ebp]
	push	eax
	call	_ultag_close
	add	esp, 4
; Line 1837
	xor	eax, eax
	jmp	$LN78@ultag_pars
$LN66@ultag_pars:
; Line 1839
	mov	eax, DWORD PTR _t$[ebp]
	mov	ecx, DWORD PTR _tagBuf$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 1840
	mov	eax, DWORD PTR _newTagLength$11490[ebp]
	mov	DWORD PTR _tagLen$[ebp], eax
$LN67@ultag_pars:
; Line 1842
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _GRANDFATHERED[eax*4+4]
	push	ecx
	mov	edx, DWORD PTR _t$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_strcpy
	add	esp, 8
; Line 1843
	jmp	SHORT $LN69@ultag_pars
$LN68@ultag_pars:
; Line 1845
	jmp	$LN70@ultag_pars
$LN69@ultag_pars:
; Line 1856
	mov	eax, 129				; 00000081H
	mov	WORD PTR _next$[ebp], ax
; Line 1857
	mov	eax, DWORD PTR _tagBuf$[ebp]
	mov	DWORD PTR _pLastGoodPosition$[ebp], eax
	mov	ecx, DWORD PTR _pLastGoodPosition$[ebp]
	mov	DWORD PTR _pNext$[ebp], ecx
; Line 1858
	mov	DWORD PTR _extlangIdx$[ebp], 0
; Line 1859
	mov	DWORD PTR _pExtension$[ebp], 0
; Line 1860
	mov	DWORD PTR _pExtValueSubtag$[ebp], 0
; Line 1861
	mov	DWORD PTR _pExtValueSubtagEnd$[ebp], 0
$LN65@ultag_pars:
; Line 1863
	cmp	DWORD PTR _pNext$[ebp], 0
	je	$LN64@ultag_pars
; Line 1866
	mov	eax, DWORD PTR _pNext$[ebp]
	mov	DWORD PTR _pSubtag$[ebp], eax
; Line 1869
	mov	eax, DWORD PTR _pSubtag$[ebp]
	mov	DWORD PTR _pSep$11502[ebp], eax
$LN63@ultag_pars:
; Line 1870
	mov	eax, DWORD PTR _pSep$11502[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN62@ultag_pars
; Line 1871
	mov	eax, DWORD PTR _pSep$11502[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 45					; 0000002dH
	jne	SHORT $LN61@ultag_pars
; Line 1872
	jmp	SHORT $LN62@ultag_pars
$LN61@ultag_pars:
; Line 1874
	mov	eax, DWORD PTR _pSep$11502[ebp]
	add	eax, 1
	mov	DWORD PTR _pSep$11502[ebp], eax
; Line 1875
	jmp	SHORT $LN63@ultag_pars
$LN62@ultag_pars:
; Line 1876
	mov	eax, DWORD PTR _pSep$11502[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN60@ultag_pars
; Line 1878
	mov	DWORD PTR _pNext$[ebp], 0
; Line 1879
	jmp	SHORT $LN59@ultag_pars
$LN60@ultag_pars:
; Line 1880
	mov	eax, DWORD PTR _pSep$11502[ebp]
	add	eax, 1
	mov	DWORD PTR _pNext$[ebp], eax
$LN59@ultag_pars:
; Line 1882
	mov	eax, DWORD PTR _pSep$11502[ebp]
	sub	eax, DWORD PTR _pSubtag$[ebp]
	mov	DWORD PTR _subtagLen$[ebp], eax
; Line 1884
	movsx	eax, WORD PTR _next$[ebp]
	and	eax, 1
	je	SHORT $LN58@ultag_pars
; Line 1885
	mov	eax, DWORD PTR _subtagLen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pSubtag$[ebp]
	push	ecx
	call	__isLanguageSubtag
	add	esp, 8
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN58@ultag_pars
; Line 1886
	mov	eax, DWORD PTR _pSep$11502[ebp]
	mov	BYTE PTR [eax], 0
; Line 1887
	mov	eax, DWORD PTR _pSubtag$[ebp]
	push	eax
	call	_T_CString_toLowerCase_56
	add	esp, 4
	mov	ecx, DWORD PTR _t$[ebp]
	mov	DWORD PTR [ecx+4], eax
; Line 1889
	mov	eax, DWORD PTR _pSep$11502[ebp]
	mov	DWORD PTR _pLastGoodPosition$[ebp], eax
; Line 1890
	mov	eax, 190				; 000000beH
	mov	WORD PTR _next$[ebp], ax
; Line 1891
	jmp	$LN65@ultag_pars
$LN58@ultag_pars:
; Line 1894
	movsx	eax, WORD PTR _next$[ebp]
	and	eax, 2
	je	SHORT $LN56@ultag_pars
; Line 1895
	mov	eax, DWORD PTR _subtagLen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pSubtag$[ebp]
	push	ecx
	call	__isExtlangSubtag
	add	esp, 8
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN56@ultag_pars
; Line 1896
	mov	eax, DWORD PTR _pSep$11502[ebp]
	mov	BYTE PTR [eax], 0
; Line 1897
	mov	eax, DWORD PTR _pSubtag$[ebp]
	push	eax
	call	_T_CString_toLowerCase_56
	add	esp, 4
	mov	ecx, DWORD PTR _extlangIdx$[ebp]
	mov	edx, DWORD PTR _t$[ebp]
	mov	DWORD PTR [edx+ecx*4+8], eax
	mov	eax, DWORD PTR _extlangIdx$[ebp]
	add	eax, 1
	mov	DWORD PTR _extlangIdx$[ebp], eax
; Line 1899
	mov	eax, DWORD PTR _pSep$11502[ebp]
	mov	DWORD PTR _pLastGoodPosition$[ebp], eax
; Line 1900
	cmp	DWORD PTR _extlangIdx$[ebp], 3
	jge	SHORT $LN54@ultag_pars
; Line 1901
	mov	eax, 190				; 000000beH
	mov	WORD PTR _next$[ebp], ax
; Line 1902
	jmp	SHORT $LN53@ultag_pars
$LN54@ultag_pars:
; Line 1903
	mov	eax, 188				; 000000bcH
	mov	WORD PTR _next$[ebp], ax
$LN53@ultag_pars:
; Line 1905
	jmp	$LN65@ultag_pars
$LN56@ultag_pars:
; Line 1908
	movsx	eax, WORD PTR _next$[ebp]
	and	eax, 4
	je	$LN52@ultag_pars
; Line 1909
	mov	eax, DWORD PTR _subtagLen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pSubtag$[ebp]
	push	ecx
	call	__isScriptSubtag
	add	esp, 8
	movsx	edx, al
	test	edx, edx
	je	$LN52@ultag_pars
; Line 1910
	mov	eax, DWORD PTR _pSubtag$[ebp]
	mov	DWORD PTR _p$11519[ebp], eax
; Line 1912
	mov	eax, DWORD PTR _pSep$11502[ebp]
	mov	BYTE PTR [eax], 0
; Line 1915
	mov	eax, DWORD PTR _p$11519[ebp]
	movzx	ecx, BYTE PTR [eax]
	push	ecx
	call	_uprv_toupper_56
	add	esp, 4
	mov	edx, DWORD PTR _p$11519[ebp]
	mov	BYTE PTR [edx], al
; Line 1916
	mov	eax, DWORD PTR _p$11519[ebp]
	add	eax, 1
	mov	DWORD PTR _p$11519[ebp], eax
	jmp	SHORT $LN50@ultag_pars
$LN49@ultag_pars:
; Line 1917
	mov	eax, DWORD PTR _p$11519[ebp]
	add	eax, 1
	mov	DWORD PTR _p$11519[ebp], eax
$LN50@ultag_pars:
	mov	eax, DWORD PTR _p$11519[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN48@ultag_pars
; Line 1918
	mov	eax, DWORD PTR _p$11519[ebp]
	movzx	ecx, BYTE PTR [eax]
	push	ecx
	call	_uprv_asciitolower_56
	add	esp, 4
	mov	edx, DWORD PTR _p$11519[ebp]
	mov	BYTE PTR [edx], al
; Line 1919
	jmp	SHORT $LN49@ultag_pars
$LN48@ultag_pars:
; Line 1921
	mov	eax, DWORD PTR _t$[ebp]
	mov	ecx, DWORD PTR _pSubtag$[ebp]
	mov	DWORD PTR [eax+20], ecx
; Line 1923
	mov	eax, DWORD PTR _pSep$11502[ebp]
	mov	DWORD PTR _pLastGoodPosition$[ebp], eax
; Line 1924
	mov	eax, 184				; 000000b8H
	mov	WORD PTR _next$[ebp], ax
; Line 1925
	jmp	$LN65@ultag_pars
$LN52@ultag_pars:
; Line 1928
	movsx	eax, WORD PTR _next$[ebp]
	and	eax, 8
	je	SHORT $LN47@ultag_pars
; Line 1929
	mov	eax, DWORD PTR _subtagLen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pSubtag$[ebp]
	push	ecx
	call	__isRegionSubtag
	add	esp, 8
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN47@ultag_pars
; Line 1930
	mov	eax, DWORD PTR _pSep$11502[ebp]
	mov	BYTE PTR [eax], 0
; Line 1931
	mov	eax, DWORD PTR _pSubtag$[ebp]
	push	eax
	call	_T_CString_toUpperCase_56
	add	esp, 4
	mov	ecx, DWORD PTR _t$[ebp]
	mov	DWORD PTR [ecx+24], eax
; Line 1933
	mov	eax, DWORD PTR _pSep$11502[ebp]
	mov	DWORD PTR _pLastGoodPosition$[ebp], eax
; Line 1934
	mov	eax, 176				; 000000b0H
	mov	WORD PTR _next$[ebp], ax
; Line 1935
	jmp	$LN65@ultag_pars
$LN47@ultag_pars:
; Line 1938
	movsx	eax, WORD PTR _next$[ebp]
	and	eax, 16					; 00000010H
	je	$LN45@ultag_pars
; Line 1940
	mov	eax, DWORD PTR _subtagLen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pSubtag$[ebp]
	push	ecx
	call	__isVariantSubtag
	add	esp, 8
	movsx	edx, al
	test	edx, edx
	jne	SHORT $LN43@ultag_pars
	movsx	eax, BYTE PTR _privateuseVar$[ebp]
	test	eax, eax
	je	$LN45@ultag_pars
	mov	eax, DWORD PTR _subtagLen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pSubtag$[ebp]
	push	ecx
	call	__isPrivateuseVariantSubtag
	add	esp, 8
	movsx	edx, al
	test	edx, edx
	je	$LN45@ultag_pars
$LN43@ultag_pars:
; Line 1944
	push	8
	call	_uprv_malloc_56
	add	esp, 4
	mov	DWORD PTR _var$11528[ebp], eax
; Line 1945
	cmp	DWORD PTR _var$11528[ebp], 0
	jne	SHORT $LN42@ultag_pars
; Line 1946
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 7
; Line 1947
	jmp	$error$11534
$LN42@ultag_pars:
; Line 1949
	mov	eax, DWORD PTR _pSep$11502[ebp]
	mov	BYTE PTR [eax], 0
; Line 1950
	mov	eax, DWORD PTR _pSubtag$[ebp]
	push	eax
	call	_T_CString_toUpperCase_56
	add	esp, 4
	mov	ecx, DWORD PTR _var$11528[ebp]
	mov	DWORD PTR [ecx], eax
; Line 1951
	mov	eax, DWORD PTR _var$11528[ebp]
	push	eax
	mov	ecx, DWORD PTR _t$[ebp]
	add	ecx, 28					; 0000001cH
	push	ecx
	call	__addVariantToList
	add	esp, 8
	mov	BYTE PTR _isAdded$11529[ebp], al
; Line 1952
	movsx	eax, BYTE PTR _isAdded$11529[ebp]
	test	eax, eax
	jne	SHORT $LN41@ultag_pars
; Line 1954
	mov	eax, DWORD PTR _var$11528[ebp]
	push	eax
	call	_uprv_free_56
	add	esp, 4
; Line 1955
	jmp	$LN64@ultag_pars
$LN41@ultag_pars:
; Line 1957
	mov	eax, DWORD PTR _pSep$11502[ebp]
	mov	DWORD PTR _pLastGoodPosition$[ebp], eax
; Line 1958
	mov	eax, 176				; 000000b0H
	mov	WORD PTR _next$[ebp], ax
; Line 1959
	jmp	$LN65@ultag_pars
$LN45@ultag_pars:
; Line 1962
	movsx	eax, WORD PTR _next$[ebp]
	and	eax, 32					; 00000020H
	je	$LN40@ultag_pars
; Line 1963
	mov	eax, DWORD PTR _subtagLen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pSubtag$[ebp]
	push	ecx
	call	__isExtensionSingleton
	add	esp, 8
	movsx	edx, al
	test	edx, edx
	je	$LN40@ultag_pars
; Line 1964
	cmp	DWORD PTR _pExtension$[ebp], 0
	je	SHORT $LN38@ultag_pars
; Line 1965
	cmp	DWORD PTR _pExtValueSubtag$[ebp], 0
	je	SHORT $LN36@ultag_pars
	cmp	DWORD PTR _pExtValueSubtagEnd$[ebp], 0
	jne	SHORT $LN37@ultag_pars
$LN36@ultag_pars:
; Line 1967
	mov	eax, DWORD PTR _pExtension$[ebp]
	push	eax
	call	_uprv_free_56
	add	esp, 4
; Line 1968
	mov	DWORD PTR _pExtension$[ebp], 0
; Line 1969
	jmp	$LN64@ultag_pars
$LN37@ultag_pars:
; Line 1973
	mov	eax, DWORD PTR _pExtValueSubtagEnd$[ebp]
	mov	BYTE PTR [eax], 0
; Line 1974
	mov	eax, DWORD PTR _pExtValueSubtag$[ebp]
	push	eax
	call	_T_CString_toLowerCase_56
	add	esp, 4
	mov	ecx, DWORD PTR _pExtension$[ebp]
	mov	DWORD PTR [ecx+4], eax
; Line 1977
	push	0
	mov	eax, DWORD PTR _pExtension$[ebp]
	push	eax
	mov	ecx, DWORD PTR _t$[ebp]
	add	ecx, 32					; 00000020H
	push	ecx
	call	__addExtensionToList
	add	esp, 12					; 0000000cH
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN35@ultag_pars
; Line 1978
	mov	eax, DWORD PTR _pExtValueSubtagEnd$[ebp]
	mov	DWORD PTR _pLastGoodPosition$[ebp], eax
; Line 1979
	jmp	SHORT $LN38@ultag_pars
$LN35@ultag_pars:
; Line 1981
	mov	eax, DWORD PTR _pExtension$[ebp]
	push	eax
	call	_uprv_free_56
	add	esp, 4
; Line 1982
	mov	DWORD PTR _pExtension$[ebp], 0
; Line 1983
	jmp	$LN64@ultag_pars
$LN38@ultag_pars:
; Line 1988
	push	12					; 0000000cH
	call	_uprv_malloc_56
	add	esp, 4
	mov	DWORD PTR _pExtension$[ebp], eax
; Line 1989
	cmp	DWORD PTR _pExtension$[ebp], 0
	jne	SHORT $LN33@ultag_pars
; Line 1990
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 7
; Line 1991
	jmp	$error$11534
$LN33@ultag_pars:
; Line 1993
	mov	eax, DWORD PTR _pSep$11502[ebp]
	mov	BYTE PTR [eax], 0
; Line 1994
	mov	eax, DWORD PTR _pSubtag$[ebp]
	push	eax
	call	_T_CString_toLowerCase_56
	add	esp, 4
	mov	ecx, DWORD PTR _pExtension$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 1995
	mov	eax, DWORD PTR _pExtension$[ebp]
	mov	DWORD PTR [eax+4], 0
; Line 2001
	mov	DWORD PTR _pExtValueSubtag$[ebp], 0
; Line 2002
	mov	DWORD PTR _pExtValueSubtagEnd$[ebp], 0
; Line 2004
	mov	eax, 64					; 00000040H
	mov	WORD PTR _next$[ebp], ax
; Line 2005
	jmp	$LN65@ultag_pars
$LN40@ultag_pars:
; Line 2008
	movsx	eax, WORD PTR _next$[ebp]
	and	eax, 64					; 00000040H
	je	SHORT $LN32@ultag_pars
; Line 2009
	mov	eax, DWORD PTR _subtagLen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pSubtag$[ebp]
	push	ecx
	call	__isExtensionSubtag
	add	esp, 8
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN32@ultag_pars
; Line 2010
	cmp	DWORD PTR _pExtValueSubtag$[ebp], 0
	jne	SHORT $LN30@ultag_pars
; Line 2013
	mov	eax, DWORD PTR _pSubtag$[ebp]
	mov	DWORD PTR _pExtValueSubtag$[ebp], eax
$LN30@ultag_pars:
; Line 2017
	mov	eax, DWORD PTR _pSep$11502[ebp]
	mov	DWORD PTR _pExtValueSubtagEnd$[ebp], eax
; Line 2018
	mov	eax, 224				; 000000e0H
	mov	WORD PTR _next$[ebp], ax
; Line 2020
	jmp	$LN65@ultag_pars
$LN32@ultag_pars:
; Line 2023
	movsx	eax, WORD PTR _next$[ebp]
	and	eax, 128				; 00000080H
	je	$LN29@ultag_pars
; Line 2024
	mov	eax, DWORD PTR _pSubtag$[ebp]
	movzx	ecx, BYTE PTR [eax]
	push	ecx
	call	_uprv_asciitolower_56
	add	esp, 4
	movsx	edx, al
	cmp	edx, 120				; 00000078H
	jne	$LN28@ultag_pars
; Line 2027
	cmp	DWORD PTR _pExtension$[ebp], 0
	je	$LN27@ultag_pars
; Line 2029
	cmp	DWORD PTR _pExtValueSubtag$[ebp], 0
	je	SHORT $LN25@ultag_pars
	cmp	DWORD PTR _pExtValueSubtagEnd$[ebp], 0
	jne	SHORT $LN26@ultag_pars
$LN25@ultag_pars:
; Line 2031
	mov	eax, DWORD PTR _pExtension$[ebp]
	push	eax
	call	_uprv_free_56
	add	esp, 4
; Line 2032
	mov	DWORD PTR _pExtension$[ebp], 0
; Line 2033
	jmp	$LN64@ultag_pars
; Line 2034
	jmp	SHORT $LN27@ultag_pars
$LN26@ultag_pars:
; Line 2036
	mov	eax, DWORD PTR _pExtValueSubtagEnd$[ebp]
	mov	BYTE PTR [eax], 0
; Line 2037
	mov	eax, DWORD PTR _pExtValueSubtag$[ebp]
	push	eax
	call	_T_CString_toLowerCase_56
	add	esp, 4
	mov	ecx, DWORD PTR _pExtension$[ebp]
	mov	DWORD PTR [ecx+4], eax
; Line 2040
	push	0
	mov	eax, DWORD PTR _pExtension$[ebp]
	push	eax
	mov	ecx, DWORD PTR _t$[ebp]
	add	ecx, 32					; 00000020H
	push	ecx
	call	__addExtensionToList
	add	esp, 12					; 0000000cH
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN23@ultag_pars
; Line 2041
	mov	eax, DWORD PTR _pExtValueSubtagEnd$[ebp]
	mov	DWORD PTR _pLastGoodPosition$[ebp], eax
; Line 2042
	mov	DWORD PTR _pExtension$[ebp], 0
; Line 2043
	jmp	SHORT $LN27@ultag_pars
$LN23@ultag_pars:
; Line 2045
	mov	eax, DWORD PTR _pExtension$[ebp]
	push	eax
	call	_uprv_free_56
	add	esp, 4
; Line 2046
	mov	DWORD PTR _pExtension$[ebp], 0
; Line 2047
	jmp	$LN64@ultag_pars
$LN27@ultag_pars:
; Line 2053
	cmp	DWORD PTR _pNext$[ebp], 0
	jne	SHORT $LN21@ultag_pars
; Line 2055
	jmp	$LN64@ultag_pars
$LN21@ultag_pars:
; Line 2058
	mov	eax, DWORD PTR _pNext$[ebp]
	mov	DWORD PTR _pPrivuseVal$11561[ebp], eax
$LN20@ultag_pars:
; Line 2061
	cmp	DWORD PTR _pNext$[ebp], 0
	je	$LN19@ultag_pars
; Line 2062
	mov	eax, DWORD PTR _pNext$[ebp]
	mov	DWORD PTR _pSubtag$[ebp], eax
; Line 2063
	mov	eax, DWORD PTR _pSubtag$[ebp]
	mov	DWORD PTR _pSep$11502[ebp], eax
$LN18@ultag_pars:
; Line 2064
	mov	eax, DWORD PTR _pSep$11502[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN17@ultag_pars
; Line 2065
	mov	eax, DWORD PTR _pSep$11502[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 45					; 0000002dH
	jne	SHORT $LN16@ultag_pars
; Line 2066
	jmp	SHORT $LN17@ultag_pars
$LN16@ultag_pars:
; Line 2068
	mov	eax, DWORD PTR _pSep$11502[ebp]
	add	eax, 1
	mov	DWORD PTR _pSep$11502[ebp], eax
; Line 2069
	jmp	SHORT $LN18@ultag_pars
$LN17@ultag_pars:
; Line 2070
	mov	eax, DWORD PTR _pSep$11502[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN15@ultag_pars
; Line 2072
	mov	DWORD PTR _pNext$[ebp], 0
; Line 2073
	jmp	SHORT $LN14@ultag_pars
$LN15@ultag_pars:
; Line 2074
	mov	eax, DWORD PTR _pSep$11502[ebp]
	add	eax, 1
	mov	DWORD PTR _pNext$[ebp], eax
$LN14@ultag_pars:
; Line 2076
	mov	eax, DWORD PTR _pSep$11502[ebp]
	sub	eax, DWORD PTR _pSubtag$[ebp]
	mov	DWORD PTR _subtagLen$[ebp], eax
; Line 2078
	push	1
	mov	eax, DWORD PTR _pSubtag$[ebp]
	push	eax
	call	_uprv_checkValidMemory
	add	esp, 8
	push	1
	push	OFFSET _PRIVUSE_VARIANT_PREFIX
	call	_uprv_checkValidMemory
	add	esp, 8
	push	OFFSET _PRIVUSE_VARIANT_PREFIX
	call	_strlen
	add	esp, 4
	mov	esi, esp
	push	eax
	push	OFFSET _PRIVUSE_VARIANT_PREFIX
	mov	ecx, DWORD PTR _pSubtag$[ebp]
	push	ecx
	call	DWORD PTR __imp__strncmp
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN13@ultag_pars
; Line 2079
	mov	eax, DWORD PTR _pSep$11502[ebp]
	mov	BYTE PTR [eax], 0
; Line 2080
	mov	eax, 16					; 00000010H
	mov	WORD PTR _next$[ebp], ax
; Line 2081
	mov	BYTE PTR _privateuseVar$[ebp], 1
; Line 2082
	jmp	SHORT $LN19@ultag_pars
	jmp	SHORT $LN12@ultag_pars
$LN13@ultag_pars:
; Line 2083
	mov	eax, DWORD PTR _subtagLen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pSubtag$[ebp]
	push	ecx
	call	__isPrivateuseValueSubtag
	add	esp, 8
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN11@ultag_pars
; Line 2084
	mov	eax, DWORD PTR _pSep$11502[ebp]
	mov	DWORD PTR _pLastGoodPosition$[ebp], eax
; Line 2085
	jmp	SHORT $LN12@ultag_pars
$LN11@ultag_pars:
; Line 2086
	jmp	SHORT $LN19@ultag_pars
$LN12@ultag_pars:
; Line 2088
	jmp	$LN20@ultag_pars
$LN19@ultag_pars:
; Line 2090
	movsx	eax, WORD PTR _next$[ebp]
	cmp	eax, 16					; 00000010H
	jne	SHORT $LN9@ultag_pars
; Line 2091
	jmp	$LN65@ultag_pars
$LN9@ultag_pars:
; Line 2094
	mov	eax, DWORD PTR _pLastGoodPosition$[ebp]
	sub	eax, DWORD PTR _pPrivuseVal$11561[ebp]
	test	eax, eax
	jle	SHORT $LN8@ultag_pars
; Line 2095
	mov	eax, DWORD PTR _pLastGoodPosition$[ebp]
	mov	BYTE PTR [eax], 0
; Line 2096
	mov	eax, DWORD PTR _pPrivuseVal$11561[ebp]
	push	eax
	call	_T_CString_toLowerCase_56
	add	esp, 4
	mov	ecx, DWORD PTR _t$[ebp]
	mov	DWORD PTR [ecx+36], eax
$LN8@ultag_pars:
; Line 2099
	jmp	SHORT $LN64@ultag_pars
$LN28@ultag_pars:
; Line 2101
	jmp	SHORT $LN64@ultag_pars
$LN29@ultag_pars:
; Line 2105
	jmp	SHORT $LN64@ultag_pars
; Line 2106
	jmp	$LN65@ultag_pars
$LN64@ultag_pars:
; Line 2108
	cmp	DWORD PTR _pExtension$[ebp], 0
	je	SHORT $LN7@ultag_pars
; Line 2110
	cmp	DWORD PTR _pExtValueSubtag$[ebp], 0
	je	SHORT $LN5@ultag_pars
	cmp	DWORD PTR _pExtValueSubtagEnd$[ebp], 0
	jne	SHORT $LN6@ultag_pars
$LN5@ultag_pars:
; Line 2112
	mov	eax, DWORD PTR _pExtension$[ebp]
	push	eax
	call	_uprv_free_56
	add	esp, 4
; Line 2113
	jmp	SHORT $LN7@ultag_pars
$LN6@ultag_pars:
; Line 2115
	mov	eax, DWORD PTR _pExtValueSubtagEnd$[ebp]
	mov	BYTE PTR [eax], 0
; Line 2116
	mov	eax, DWORD PTR _pExtValueSubtag$[ebp]
	push	eax
	call	_T_CString_toLowerCase_56
	add	esp, 4
	mov	ecx, DWORD PTR _pExtension$[ebp]
	mov	DWORD PTR [ecx+4], eax
; Line 2118
	push	0
	mov	eax, DWORD PTR _pExtension$[ebp]
	push	eax
	mov	ecx, DWORD PTR _t$[ebp]
	add	ecx, 32					; 00000020H
	push	ecx
	call	__addExtensionToList
	add	esp, 12					; 0000000cH
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN3@ultag_pars
; Line 2119
	mov	eax, DWORD PTR _pExtValueSubtagEnd$[ebp]
	mov	DWORD PTR _pLastGoodPosition$[ebp], eax
; Line 2120
	jmp	SHORT $LN7@ultag_pars
$LN3@ultag_pars:
; Line 2121
	mov	eax, DWORD PTR _pExtension$[ebp]
	push	eax
	call	_uprv_free_56
	add	esp, 4
$LN7@ultag_pars:
; Line 2126
	cmp	DWORD PTR _parsedLen$[ebp], 0
	je	SHORT $LN1@ultag_pars
; Line 2127
	cmp	DWORD PTR _grandfatheredLen$[ebp], 0
	jle	SHORT $LN80@ultag_pars
	mov	eax, DWORD PTR _grandfatheredLen$[ebp]
	mov	DWORD PTR tv347[ebp], eax
	jmp	SHORT $LN81@ultag_pars
$LN80@ultag_pars:
	mov	ecx, DWORD PTR _t$[ebp]
	mov	edx, DWORD PTR _pLastGoodPosition$[ebp]
	sub	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv347[ebp], edx
$LN81@ultag_pars:
	mov	eax, DWORD PTR _parsedLen$[ebp]
	mov	ecx, DWORD PTR tv347[ebp]
	mov	DWORD PTR [eax], ecx
$LN1@ultag_pars:
; Line 2130
	mov	eax, DWORD PTR _t$[ebp]
	jmp	SHORT $LN78@ultag_pars
$error$11534:
; Line 2133
	mov	eax, DWORD PTR _t$[ebp]
	push	eax
	call	_ultag_close
	add	esp, 4
; Line 2134
	xor	eax, eax
$LN78@ultag_pars:
; Line 2135
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 436				; 000001b4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ultag_parse ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __isExtlangSubtag
_TEXT	SEGMENT
_s$ = 8							; size = 4
_len$ = 12						; size = 4
__isExtlangSubtag PROC					; COMDAT
; Line 232
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 237
	cmp	DWORD PTR _len$[ebp], 0
	jge	SHORT $LN2@isExtlangS
; Line 238
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	mov	DWORD PTR _len$[ebp], eax
$LN2@isExtlangS:
; Line 240
	cmp	DWORD PTR _len$[ebp], 3
	jne	SHORT $LN1@isExtlangS
	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	call	__isAlphaString
	add	esp, 8
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN1@isExtlangS
; Line 241
	mov	al, 1
	jmp	SHORT $LN3@isExtlangS
$LN1@isExtlangS:
; Line 243
	xor	al, al
$LN3@isExtlangS:
; Line 244
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__isExtlangSubtag ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __isPrivateuseVariantSubtag
_TEXT	SEGMENT
_s$ = 8							; size = 4
_len$ = 12						; size = 4
__isPrivateuseVariantSubtag PROC			; COMDAT
; Line 297
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 302
	cmp	DWORD PTR _len$[ebp], 0
	jge	SHORT $LN2@isPrivateu@3
; Line 303
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	mov	DWORD PTR _len$[ebp], eax
$LN2@isPrivateu@3:
; Line 305
	cmp	DWORD PTR _len$[ebp], 1
	jl	SHORT $LN1@isPrivateu@3
	cmp	DWORD PTR _len$[ebp], 8
	jg	SHORT $LN1@isPrivateu@3
	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	call	__isAlphaNumericString
	add	esp, 8
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN1@isPrivateu@3
; Line 306
	mov	al, 1
	jmp	SHORT $LN3@isPrivateu@3
$LN1@isPrivateu@3:
; Line 308
	xor	al, al
$LN3@isPrivateu@3:
; Line 309
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__isPrivateuseVariantSubtag ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __initializeULanguageTag
_TEXT	SEGMENT
_i$ = -8						; size = 4
_langtag$ = 8						; size = 4
__initializeULanguageTag PROC				; COMDAT
; Line 607
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 610
	mov	eax, DWORD PTR _langtag$[ebp]
	mov	DWORD PTR [eax], 0
; Line 612
	mov	eax, DWORD PTR _langtag$[ebp]
	mov	DWORD PTR [eax+4], OFFSET _EMPTY
; Line 613
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@initialize
$LN2@initialize:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@initialize:
	cmp	DWORD PTR _i$[ebp], 3
	jge	SHORT $LN1@initialize
; Line 614
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _langtag$[ebp]
	mov	DWORD PTR [ecx+eax*4+8], 0
; Line 615
	jmp	SHORT $LN2@initialize
$LN1@initialize:
; Line 617
	mov	eax, DWORD PTR _langtag$[ebp]
	mov	DWORD PTR [eax+20], OFFSET _EMPTY
; Line 618
	mov	eax, DWORD PTR _langtag$[ebp]
	mov	DWORD PTR [eax+24], OFFSET _EMPTY
; Line 620
	mov	eax, DWORD PTR _langtag$[ebp]
	mov	DWORD PTR [eax+28], 0
; Line 621
	mov	eax, DWORD PTR _langtag$[ebp]
	mov	DWORD PTR [eax+32], 0
; Line 623
	mov	eax, DWORD PTR _langtag$[ebp]
	mov	DWORD PTR [eax+40], OFFSET _EMPTY
; Line 624
	mov	eax, DWORD PTR _langtag$[ebp]
	mov	DWORD PTR [eax+36], OFFSET _EMPTY
; Line 625
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
__initializeULanguageTag ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _ultag_close
_TEXT	SEGMENT
_nextExt$11622 = -44					; size = 4
_curExt$11618 = -32					; size = 4
_nextVar$11616 = -20					; size = 4
_curVar$11612 = -8					; size = 4
_langtag$ = 8						; size = 4
_ultag_close PROC					; COMDAT
; Line 2138
	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2140
	cmp	DWORD PTR _langtag$[ebp], 0
	jne	SHORT $LN7@ultag_clos
; Line 2141
	jmp	$LN8@ultag_clos
$LN7@ultag_clos:
; Line 2144
	mov	eax, DWORD PTR _langtag$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_uprv_free_56
	add	esp, 4
; Line 2146
	mov	eax, DWORD PTR _langtag$[ebp]
	cmp	DWORD PTR [eax+28], 0
	je	SHORT $LN6@ultag_clos
; Line 2147
	mov	eax, DWORD PTR _langtag$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _curVar$11612[ebp], ecx
$LN5@ultag_clos:
; Line 2148
	cmp	DWORD PTR _curVar$11612[ebp], 0
	je	SHORT $LN6@ultag_clos
; Line 2149
	mov	eax, DWORD PTR _curVar$11612[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _nextVar$11616[ebp], ecx
; Line 2150
	mov	eax, DWORD PTR _curVar$11612[ebp]
	push	eax
	call	_uprv_free_56
	add	esp, 4
; Line 2151
	mov	eax, DWORD PTR _nextVar$11616[ebp]
	mov	DWORD PTR _curVar$11612[ebp], eax
; Line 2152
	jmp	SHORT $LN5@ultag_clos
$LN6@ultag_clos:
; Line 2155
	mov	eax, DWORD PTR _langtag$[ebp]
	cmp	DWORD PTR [eax+32], 0
	je	SHORT $LN3@ultag_clos
; Line 2156
	mov	eax, DWORD PTR _langtag$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	DWORD PTR _curExt$11618[ebp], ecx
$LN2@ultag_clos:
; Line 2157
	cmp	DWORD PTR _curExt$11618[ebp], 0
	je	SHORT $LN3@ultag_clos
; Line 2158
	mov	eax, DWORD PTR _curExt$11618[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _nextExt$11622[ebp], ecx
; Line 2159
	mov	eax, DWORD PTR _curExt$11618[ebp]
	push	eax
	call	_uprv_free_56
	add	esp, 4
; Line 2160
	mov	eax, DWORD PTR _nextExt$11622[ebp]
	mov	DWORD PTR _curExt$11618[ebp], eax
; Line 2161
	jmp	SHORT $LN2@ultag_clos
$LN3@ultag_clos:
; Line 2164
	mov	eax, DWORD PTR _langtag$[ebp]
	push	eax
	call	_uprv_free_56
	add	esp, 4
$LN8@ultag_clos:
; Line 2165
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ultag_close ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _ultag_getLanguage
_TEXT	SEGMENT
_langtag$ = 8						; size = 4
_ultag_getLanguage PROC					; COMDAT
; Line 2168
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2169
	mov	eax, DWORD PTR _langtag$[ebp]
	mov	eax, DWORD PTR [eax+4]
; Line 2170
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_ultag_getLanguage ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _ultag_getExtlang
_TEXT	SEGMENT
_langtag$ = 8						; size = 4
_idx$ = 12						; size = 4
_ultag_getExtlang PROC					; COMDAT
; Line 2186
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2187
	cmp	DWORD PTR _idx$[ebp], 0
	jl	SHORT $LN1@ultag_getE
	cmp	DWORD PTR _idx$[ebp], 3
	jge	SHORT $LN1@ultag_getE
; Line 2188
	mov	eax, DWORD PTR _idx$[ebp]
	mov	ecx, DWORD PTR _langtag$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4+8]
	jmp	SHORT $LN2@ultag_getE
$LN1@ultag_getE:
; Line 2190
	xor	eax, eax
$LN2@ultag_getE:
; Line 2191
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_ultag_getExtlang ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _ultag_getExtlangSize
_TEXT	SEGMENT
_i$ = -20						; size = 4
_size$ = -8						; size = 4
_langtag$ = 8						; size = 4
_ultag_getExtlangSize PROC				; COMDAT
; Line 2194
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2195
	mov	DWORD PTR _size$[ebp], 0
; Line 2197
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@ultag_getE@2
$LN3@ultag_getE@2:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@ultag_getE@2:
	cmp	DWORD PTR _i$[ebp], 3
	jge	SHORT $LN2@ultag_getE@2
; Line 2198
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _langtag$[ebp]
	cmp	DWORD PTR [ecx+eax*4+8], 0
	je	SHORT $LN1@ultag_getE@2
; Line 2199
	mov	eax, DWORD PTR _size$[ebp]
	add	eax, 1
	mov	DWORD PTR _size$[ebp], eax
$LN1@ultag_getE@2:
; Line 2201
	jmp	SHORT $LN3@ultag_getE@2
$LN2@ultag_getE@2:
; Line 2202
	mov	eax, DWORD PTR _size$[ebp]
; Line 2203
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_ultag_getExtlangSize ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _ultag_getScript
_TEXT	SEGMENT
_langtag$ = 8						; size = 4
_ultag_getScript PROC					; COMDAT
; Line 2206
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2207
	mov	eax, DWORD PTR _langtag$[ebp]
	mov	eax, DWORD PTR [eax+20]
; Line 2208
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_ultag_getScript ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _ultag_getRegion
_TEXT	SEGMENT
_langtag$ = 8						; size = 4
_ultag_getRegion PROC					; COMDAT
; Line 2211
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2212
	mov	eax, DWORD PTR _langtag$[ebp]
	mov	eax, DWORD PTR [eax+24]
; Line 2213
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_ultag_getRegion ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _ultag_getVariant
_TEXT	SEGMENT
_i$ = -32						; size = 4
_cur$ = -20						; size = 4
_var$ = -8						; size = 4
_langtag$ = 8						; size = 4
_idx$ = 12						; size = 4
_ultag_getVariant PROC					; COMDAT
; Line 2216
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2217
	mov	DWORD PTR _var$[ebp], 0
; Line 2218
	mov	eax, DWORD PTR _langtag$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _cur$[ebp], ecx
; Line 2219
	mov	DWORD PTR _i$[ebp], 0
$LN3@ultag_getV:
; Line 2220
	cmp	DWORD PTR _cur$[ebp], 0
	je	SHORT $LN2@ultag_getV
; Line 2221
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _idx$[ebp]
	jne	SHORT $LN1@ultag_getV
; Line 2222
	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _var$[ebp], ecx
; Line 2223
	jmp	SHORT $LN2@ultag_getV
$LN1@ultag_getV:
; Line 2225
	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _cur$[ebp], ecx
; Line 2226
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
; Line 2227
	jmp	SHORT $LN3@ultag_getV
$LN2@ultag_getV:
; Line 2228
	mov	eax, DWORD PTR _var$[ebp]
; Line 2229
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_ultag_getVariant ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _ultag_getVariantsSize
_TEXT	SEGMENT
_cur$ = -20						; size = 4
_size$ = -8						; size = 4
_langtag$ = 8						; size = 4
_ultag_getVariantsSize PROC				; COMDAT
; Line 2232
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2233
	mov	DWORD PTR _size$[ebp], 0
; Line 2234
	mov	eax, DWORD PTR _langtag$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _cur$[ebp], ecx
$LN3@ultag_getV@2:
; Line 2235
	mov	eax, 1
	test	eax, eax
	je	SHORT $LN2@ultag_getV@2
; Line 2236
	cmp	DWORD PTR _cur$[ebp], 0
	jne	SHORT $LN1@ultag_getV@2
; Line 2237
	jmp	SHORT $LN2@ultag_getV@2
$LN1@ultag_getV@2:
; Line 2239
	mov	eax, DWORD PTR _size$[ebp]
	add	eax, 1
	mov	DWORD PTR _size$[ebp], eax
; Line 2240
	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _cur$[ebp], ecx
; Line 2241
	jmp	SHORT $LN3@ultag_getV@2
$LN2@ultag_getV@2:
; Line 2242
	mov	eax, DWORD PTR _size$[ebp]
; Line 2243
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_ultag_getVariantsSize ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _ultag_getExtensionKey
_TEXT	SEGMENT
_i$ = -32						; size = 4
_cur$ = -20						; size = 4
_key$ = -8						; size = 4
_langtag$ = 8						; size = 4
_idx$ = 12						; size = 4
_ultag_getExtensionKey PROC				; COMDAT
; Line 2246
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2247
	mov	DWORD PTR _key$[ebp], 0
; Line 2248
	mov	eax, DWORD PTR _langtag$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	DWORD PTR _cur$[ebp], ecx
; Line 2249
	mov	DWORD PTR _i$[ebp], 0
$LN3@ultag_getE@3:
; Line 2250
	cmp	DWORD PTR _cur$[ebp], 0
	je	SHORT $LN2@ultag_getE@3
; Line 2251
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _idx$[ebp]
	jne	SHORT $LN1@ultag_getE@3
; Line 2252
	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _key$[ebp], ecx
; Line 2253
	jmp	SHORT $LN2@ultag_getE@3
$LN1@ultag_getE@3:
; Line 2255
	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _cur$[ebp], ecx
; Line 2256
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
; Line 2257
	jmp	SHORT $LN3@ultag_getE@3
$LN2@ultag_getE@3:
; Line 2258
	mov	eax, DWORD PTR _key$[ebp]
; Line 2259
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_ultag_getExtensionKey ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _ultag_getExtensionValue
_TEXT	SEGMENT
_i$ = -32						; size = 4
_cur$ = -20						; size = 4
_val$ = -8						; size = 4
_langtag$ = 8						; size = 4
_idx$ = 12						; size = 4
_ultag_getExtensionValue PROC				; COMDAT
; Line 2262
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2263
	mov	DWORD PTR _val$[ebp], 0
; Line 2264
	mov	eax, DWORD PTR _langtag$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	DWORD PTR _cur$[ebp], ecx
; Line 2265
	mov	DWORD PTR _i$[ebp], 0
$LN3@ultag_getE@4:
; Line 2266
	cmp	DWORD PTR _cur$[ebp], 0
	je	SHORT $LN2@ultag_getE@4
; Line 2267
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _idx$[ebp]
	jne	SHORT $LN1@ultag_getE@4
; Line 2268
	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _val$[ebp], ecx
; Line 2269
	jmp	SHORT $LN2@ultag_getE@4
$LN1@ultag_getE@4:
; Line 2271
	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _cur$[ebp], ecx
; Line 2272
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
; Line 2273
	jmp	SHORT $LN3@ultag_getE@4
$LN2@ultag_getE@4:
; Line 2274
	mov	eax, DWORD PTR _val$[ebp]
; Line 2275
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_ultag_getExtensionValue ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _ultag_getExtensionsSize
_TEXT	SEGMENT
_cur$ = -20						; size = 4
_size$ = -8						; size = 4
_langtag$ = 8						; size = 4
_ultag_getExtensionsSize PROC				; COMDAT
; Line 2278
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2279
	mov	DWORD PTR _size$[ebp], 0
; Line 2280
	mov	eax, DWORD PTR _langtag$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	DWORD PTR _cur$[ebp], ecx
$LN3@ultag_getE@5:
; Line 2281
	mov	eax, 1
	test	eax, eax
	je	SHORT $LN2@ultag_getE@5
; Line 2282
	cmp	DWORD PTR _cur$[ebp], 0
	jne	SHORT $LN1@ultag_getE@5
; Line 2283
	jmp	SHORT $LN2@ultag_getE@5
$LN1@ultag_getE@5:
; Line 2285
	mov	eax, DWORD PTR _size$[ebp]
	add	eax, 1
	mov	DWORD PTR _size$[ebp], eax
; Line 2286
	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _cur$[ebp], ecx
; Line 2287
	jmp	SHORT $LN3@ultag_getE@5
$LN2@ultag_getE@5:
; Line 2288
	mov	eax, DWORD PTR _size$[ebp]
; Line 2289
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_ultag_getExtensionsSize ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _ultag_getPrivateUse
_TEXT	SEGMENT
_langtag$ = 8						; size = 4
_ultag_getPrivateUse PROC				; COMDAT
; Line 2292
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2293
	mov	eax, DWORD PTR _langtag$[ebp]
	mov	eax, DWORD PTR [eax+36]
; Line 2294
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_ultag_getPrivateUse ENDP
_TEXT	ENDS
END
