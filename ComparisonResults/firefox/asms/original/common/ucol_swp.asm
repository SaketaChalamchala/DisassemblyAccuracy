; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\mozilla\intl\icu\source\common\ucol_swp.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	??2@YAPAXI@Z					; operator new
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File d:\mozilla\intl\icu\source\common\unicode\utypes.h
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT ??2@YAPAXI@Z
_TEXT	SEGMENT
_q$ = -8						; size = 4
___formal$ = 8						; size = 4
??2@YAPAXI@Z PROC					; operator new, COMDAT
; Line 411
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 412
	mov	DWORD PTR _q$[ebp], 0
; Line 413
	mov	eax, DWORD PTR _q$[ebp]
	mov	BYTE PTR [eax], 5
; Line 414
	mov	eax, DWORD PTR _q$[ebp]
; Line 415
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??2@YAPAXI@Z ENDP					; operator new
_TEXT	ENDS
PUBLIC	??3@YAXPAX@Z					; operator delete
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??3@YAXPAX@Z
_TEXT	SEGMENT
_q$ = -8						; size = 4
___formal$ = 8						; size = 4
??3@YAXPAX@Z PROC					; operator delete, COMDAT
; Line 439
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 440
	mov	DWORD PTR _q$[ebp], 0
; Line 441
	mov	eax, DWORD PTR _q$[ebp]
	mov	BYTE PTR [eax], 5
; Line 442
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??3@YAXPAX@Z ENDP					; operator delete
_TEXT	ENDS
PUBLIC	??2UMemory@icu_56@@SAPAXIPAX@Z			; icu_56::UMemory::operator new
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??2UMemory@icu_56@@SAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_ptr$ = 12						; size = 4
??2UMemory@icu_56@@SAPAXIPAX@Z PROC			; icu_56::UMemory::operator new, COMDAT
; File d:\mozilla\intl\icu\source\common\unicode\uobject.h
; Line 161
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR _ptr$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??2UMemory@icu_56@@SAPAXIPAX@Z ENDP			; icu_56::UMemory::operator new
_TEXT	ENDS
PUBLIC	??3UMemory@icu_56@@SAXPAX0@Z			; icu_56::UMemory::operator delete
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??3UMemory@icu_56@@SAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3UMemory@icu_56@@SAXPAX0@Z PROC			; icu_56::UMemory::operator delete, COMDAT
; Line 168
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??3UMemory@icu_56@@SAXPAX0@Z ENDP			; icu_56::UMemory::operator delete
_TEXT	ENDS
PUBLIC	??4UMemory@icu_56@@QAEAAV01@ABV01@@Z		; icu_56::UMemory::operator=
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??4UMemory@icu_56@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___that$ = 8						; size = 4
??4UMemory@icu_56@@QAEAAV01@ABV01@@Z PROC		; icu_56::UMemory::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4UMemory@icu_56@@QAEAAV01@ABV01@@Z ENDP		; icu_56::UMemory::operator=
_TEXT	ENDS
PUBLIC	??_7UObject@icu_56@@6B@				; icu_56::UObject::`vftable'
PUBLIC	??0UObject@icu_56@@QAE@XZ			; icu_56::UObject::UObject
PUBLIC	??_R4UObject@icu_56@@6B@			; icu_56::UObject::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVUObject@icu_56@@@8			; icu_56::UObject `RTTI Type Descriptor'
PUBLIC	??_R3UObject@icu_56@@8				; icu_56::UObject::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2UObject@icu_56@@8				; icu_56::UObject::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@UObject@icu_56@@8			; icu_56::UObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R13?0A@EA@UMemory@icu_56@@8			; icu_56::UMemory::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	??_R0?AVUMemory@icu_56@@@8			; icu_56::UMemory `RTTI Type Descriptor'
PUBLIC	??_R3UMemory@icu_56@@8				; icu_56::UMemory::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2UMemory@icu_56@@8				; icu_56::UMemory::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@UMemory@icu_56@@8			; icu_56::UMemory::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_EUObject@icu_56@@UAEPAXI@Z			; icu_56::UObject::`vector deleting destructor'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?getDynamicClassID@UObject@icu_56@@UBEPAXXZ:PROC ; icu_56::UObject::getDynamicClassID
;	COMDAT ??_R1A@?0A@EA@UMemory@icu_56@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@UMemory@icu_56@@8 DD FLAT:??_R0?AVUMemory@icu_56@@@8 ; icu_56::UMemory::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3UMemory@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_R2UMemory@icu_56@@8
rdata$r	SEGMENT
??_R2UMemory@icu_56@@8 DD FLAT:??_R1A@?0A@EA@UMemory@icu_56@@8 ; icu_56::UMemory::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3UMemory@icu_56@@8
rdata$r	SEGMENT
??_R3UMemory@icu_56@@8 DD 00H				; icu_56::UMemory::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2UMemory@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVUMemory@icu_56@@@8
_DATA	SEGMENT
??_R0?AVUMemory@icu_56@@@8 DD FLAT:??_7type_info@@6B@	; icu_56::UMemory `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVUMemory@icu_56@@', 00H
_DATA	ENDS
;	COMDAT ??_R13?0A@EA@UMemory@icu_56@@8
rdata$r	SEGMENT
??_R13?0A@EA@UMemory@icu_56@@8 DD FLAT:??_R0?AVUMemory@icu_56@@@8 ; icu_56::UMemory::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	00H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3UMemory@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@UObject@icu_56@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@UObject@icu_56@@8 DD FLAT:??_R0?AVUObject@icu_56@@@8 ; icu_56::UObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3UObject@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_R2UObject@icu_56@@8
rdata$r	SEGMENT
??_R2UObject@icu_56@@8 DD FLAT:??_R1A@?0A@EA@UObject@icu_56@@8 ; icu_56::UObject::`RTTI Base Class Array'
	DD	FLAT:??_R13?0A@EA@UMemory@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_R3UObject@icu_56@@8
rdata$r	SEGMENT
??_R3UObject@icu_56@@8 DD 00H				; icu_56::UObject::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2UObject@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVUObject@icu_56@@@8
_DATA	SEGMENT
??_R0?AVUObject@icu_56@@@8 DD FLAT:??_7type_info@@6B@	; icu_56::UObject `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVUObject@icu_56@@', 00H
_DATA	ENDS
;	COMDAT ??_R4UObject@icu_56@@6B@
rdata$r	SEGMENT
??_R4UObject@icu_56@@6B@ DD 00H				; icu_56::UObject::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVUObject@icu_56@@@8
	DD	FLAT:??_R3UObject@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_7UObject@icu_56@@6B@
CONST	SEGMENT
??_7UObject@icu_56@@6B@ DD FLAT:??_R4UObject@icu_56@@6B@ ; icu_56::UObject::`vftable'
	DD	FLAT:??_EUObject@icu_56@@UAEPAXI@Z
	DD	FLAT:?getDynamicClassID@UObject@icu_56@@UBEPAXXZ
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ??0UObject@icu_56@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0UObject@icu_56@@QAE@XZ PROC				; icu_56::UObject::UObject, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7UObject@icu_56@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0UObject@icu_56@@QAE@XZ ENDP				; icu_56::UObject::UObject
_TEXT	ENDS
PUBLIC	??0UObject@icu_56@@QAE@ABV01@@Z			; icu_56::UObject::UObject
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0UObject@icu_56@@QAE@ABV01@@Z
_TEXT	SEGMENT
tv68 = -208						; size = 4
_this$ = -8						; size = 4
___that$ = 8						; size = 4
??0UObject@icu_56@@QAE@ABV01@@Z PROC			; icu_56::UObject::UObject, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	cmp	DWORD PTR ___that$[ebp], 0
	je	SHORT $LN3@UObject
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 4
	mov	DWORD PTR tv68[ebp], eax
	jmp	SHORT $LN4@UObject
$LN3@UObject:
	mov	DWORD PTR tv68[ebp], 0
$LN4@UObject:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7UObject@icu_56@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0UObject@icu_56@@QAE@ABV01@@Z ENDP			; icu_56::UObject::UObject
_TEXT	ENDS
PUBLIC	??4UObject@icu_56@@QAEAAV01@ABV01@@Z		; icu_56::UObject::operator=
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??4UObject@icu_56@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___that$ = 8						; size = 4
??4UObject@icu_56@@QAEAAV01@ABV01@@Z PROC		; icu_56::UObject::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4UObject@icu_56@@QAEAAV01@ABV01@@Z ENDP		; icu_56::UObject::operator=
_TEXT	ENDS
PUBLIC	??_GUObject@icu_56@@UAEPAXI@Z			; icu_56::UObject::`scalar deleting destructor'
EXTRN	??3UMemory@icu_56@@SAXPAX@Z:PROC		; icu_56::UMemory::operator delete
EXTRN	??1UObject@icu_56@@UAE@XZ:PROC			; icu_56::UObject::~UObject
EXTRN	__RTC_CheckEsp:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GUObject@icu_56@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_GUObject@icu_56@@UAEPAXI@Z PROC			; icu_56::UObject::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1UObject@icu_56@@UAE@XZ		; icu_56::UObject::~UObject
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3UMemory@icu_56@@SAXPAX@Z		; icu_56::UMemory::operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GUObject@icu_56@@UAEPAXI@Z ENDP			; icu_56::UObject::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	??_VUMemory@icu_56@@SAXPAX@Z:PROC		; icu_56::UMemory::operator delete[]
EXTRN	??_M@YGXPAXIHP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_EUObject@icu_56@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_EUObject@icu_56@@UAEPAXI@Z PROC			; icu_56::UObject::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector
	push	OFFSET ??1UObject@icu_56@@UAE@XZ	; icu_56::UObject::~UObject
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	push	ecx
	push	4
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@vector
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	push	eax
	call	??_VUMemory@icu_56@@SAXPAX@Z		; icu_56::UMemory::operator delete[]
	add	esp, 4
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN3@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1UObject@icu_56@@UAE@XZ		; icu_56::UObject::~UObject
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3UMemory@icu_56@@SAXPAX@Z		; icu_56::UMemory::operator delete
	add	esp, 4
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_EUObject@icu_56@@UAEPAXI@Z ENDP			; icu_56::UObject::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	??0Mutex@icu_56@@QAE@PAUUMutex@@@Z		; icu_56::Mutex::Mutex
PUBLIC	??_FMutex@icu_56@@QAEXXZ			; icu_56::Mutex::`default constructor closure'
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_FMutex@icu_56@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??_FMutex@icu_56@@QAEXXZ PROC				; icu_56::Mutex::`default constructor closure', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Mutex@icu_56@@QAE@PAUUMutex@@@Z	; icu_56::Mutex::Mutex
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??_FMutex@icu_56@@QAEXXZ ENDP				; icu_56::Mutex::`default constructor closure'
_TEXT	ENDS
EXTRN	_umtx_lock_56:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0Mutex@icu_56@@QAE@PAUUMutex@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_mutex$ = 8						; size = 4
??0Mutex@icu_56@@QAE@PAUUMutex@@@Z PROC			; icu_56::Mutex::Mutex, COMDAT
; _this$ = ecx
; File d:\mozilla\intl\icu\source\common\mutex.h
; Line 65
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _mutex$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 66
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_umtx_lock_56
	add	esp, 4
; Line 67
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0Mutex@icu_56@@QAE@PAUUMutex@@@Z ENDP			; icu_56::Mutex::Mutex
_TEXT	ENDS
PUBLIC	??1Mutex@icu_56@@QAE@XZ				; icu_56::Mutex::~Mutex
EXTRN	_umtx_unlock_56:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1Mutex@icu_56@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1Mutex@icu_56@@QAE@XZ PROC				; icu_56::Mutex::~Mutex, COMDAT
; _this$ = ecx
; Line 70
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 71
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_umtx_unlock_56
	add	esp, 4
; Line 72
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1Mutex@icu_56@@QAE@XZ ENDP				; icu_56::Mutex::~Mutex
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_utrie_swap_56
EXTRN	_udata_readInt32_56:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _utrie_swap_56
_TEXT	SEGMENT
_outTrie$41634 = -72					; size = 4
_dataIs32$ = -57					; size = 1
_size$ = -48						; size = 4
_trie$ = -36						; size = 16
_inTrie$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_ds$ = 8						; size = 4
_inData$ = 12						; size = 4
_length$ = 16						; size = 4
_outData$ = 20						; size = 4
_pErrorCode$ = 24					; size = 4
_utrie_swap_56 PROC					; COMDAT
; File d:\mozilla\intl\icu\source\common\ucol_swp.cpp
; Line 36
	push	ebp
	mov	ebp, esp
	sub	esp, 268				; 0000010cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-268]
	mov	ecx, 67					; 00000043H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 42
	cmp	DWORD PTR _pErrorCode$[ebp], 0
	je	SHORT $LN10@utrie_swap
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN11@utrie_swap
$LN10@utrie_swap:
; Line 43
	xor	eax, eax
	jmp	$LN12@utrie_swap
$LN11@utrie_swap:
; Line 45
	cmp	DWORD PTR _ds$[ebp], 0
	je	SHORT $LN8@utrie_swap
	cmp	DWORD PTR _inData$[ebp], 0
	je	SHORT $LN8@utrie_swap
	cmp	DWORD PTR _length$[ebp], 0
	jl	SHORT $LN9@utrie_swap
	cmp	DWORD PTR _outData$[ebp], 0
	jne	SHORT $LN9@utrie_swap
$LN8@utrie_swap:
; Line 46
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 1
; Line 47
	xor	eax, eax
	jmp	$LN12@utrie_swap
$LN9@utrie_swap:
; Line 51
	cmp	DWORD PTR _length$[ebp], 0
	jl	SHORT $LN7@utrie_swap
	cmp	DWORD PTR _length$[ebp], 16		; 00000010H
	jae	SHORT $LN7@utrie_swap
; Line 52
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 8
; Line 53
	xor	eax, eax
	jmp	$LN12@utrie_swap
$LN7@utrie_swap:
; Line 56
	mov	eax, DWORD PTR _inData$[ebp]
	mov	DWORD PTR _inTrie$[ebp], eax
; Line 57
	mov	esi, esp
	mov	eax, DWORD PTR _inTrie$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _ds$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _trie$[ebp], eax
; Line 58
	mov	esi, esp
	mov	eax, DWORD PTR _inTrie$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _ds$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _trie$[ebp+4], eax
; Line 59
	mov	eax, DWORD PTR _inTrie$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _ds$[ebp]
	push	edx
	call	_udata_readInt32_56
	add	esp, 8
	mov	DWORD PTR _trie$[ebp+8], eax
; Line 60
	mov	eax, DWORD PTR _inTrie$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _ds$[ebp]
	push	edx
	call	_udata_readInt32_56
	add	esp, 8
	mov	DWORD PTR _trie$[ebp+12], eax
; Line 70
	cmp	DWORD PTR _trie$[ebp], 1416784229	; 54726965H
	jne	SHORT $LN5@utrie_swap
	mov	eax, DWORD PTR _trie$[ebp+4]
	and	eax, 15					; 0000000fH
	cmp	eax, 5
	jne	SHORT $LN5@utrie_swap
	mov	eax, DWORD PTR _trie$[ebp+4]
	shr	eax, 4
	and	eax, 15					; 0000000fH
	cmp	eax, 2
	jne	SHORT $LN5@utrie_swap
	cmp	DWORD PTR _trie$[ebp+8], 2048		; 00000800H
	jl	SHORT $LN5@utrie_swap
	mov	eax, DWORD PTR _trie$[ebp+8]
	and	eax, 31					; 0000001fH
	jne	SHORT $LN5@utrie_swap
	cmp	DWORD PTR _trie$[ebp+12], 32		; 00000020H
	jl	SHORT $LN5@utrie_swap
	mov	eax, DWORD PTR _trie$[ebp+12]
	and	eax, 3
	jne	SHORT $LN5@utrie_swap
	mov	eax, DWORD PTR _trie$[ebp+4]
	and	eax, 512				; 00000200H
	je	SHORT $LN6@utrie_swap
	cmp	DWORD PTR _trie$[ebp+12], 288		; 00000120H
	jge	SHORT $LN6@utrie_swap
$LN5@utrie_swap:
; Line 71
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 3
; Line 72
	xor	eax, eax
	jmp	$LN12@utrie_swap
$LN6@utrie_swap:
; Line 75
	mov	eax, DWORD PTR _trie$[ebp+4]
	and	eax, 256				; 00000100H
	setne	cl
	mov	BYTE PTR _dataIs32$[ebp], cl
; Line 76
	movsx	eax, BYTE PTR _dataIs32$[ebp]
	neg	eax
	sbb	eax, eax
	and	eax, 2
	add	eax, 2
	imul	eax, DWORD PTR _trie$[ebp+12]
	mov	ecx, DWORD PTR _trie$[ebp+8]
	lea	edx, DWORD PTR [eax+ecx*2+16]
	mov	DWORD PTR _size$[ebp], edx
; Line 78
	cmp	DWORD PTR _length$[ebp], 0
	jl	$LN4@utrie_swap
; Line 81
	mov	eax, DWORD PTR _length$[ebp]
	cmp	eax, DWORD PTR _size$[ebp]
	jge	SHORT $LN3@utrie_swap
; Line 82
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 8
; Line 83
	xor	eax, eax
	jmp	$LN12@utrie_swap
$LN3@utrie_swap:
; Line 86
	mov	eax, DWORD PTR _outData$[ebp]
	mov	DWORD PTR _outTrie$41634[ebp], eax
; Line 89
	mov	esi, esp
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _outTrie$41634[ebp]
	push	ecx
	push	16					; 00000010H
	mov	edx, DWORD PTR _inTrie$[ebp]
	push	edx
	mov	eax, DWORD PTR _ds$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ds$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	call	edx
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 92
	movsx	eax, BYTE PTR _dataIs32$[ebp]
	test	eax, eax
	je	SHORT $LN2@utrie_swap
; Line 93
	mov	esi, esp
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _outTrie$41634[ebp]
	add	ecx, 16					; 00000010H
	push	ecx
	mov	edx, DWORD PTR _trie$[ebp+8]
	shl	edx, 1
	push	edx
	mov	eax, DWORD PTR _inTrie$[ebp]
	add	eax, 16					; 00000010H
	push	eax
	mov	ecx, DWORD PTR _ds$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ds$[ebp]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 95
	mov	esi, esp
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _trie$[ebp+8]
	mov	edx, DWORD PTR _outTrie$41634[ebp]
	lea	eax, DWORD PTR [edx+ecx*2+16]
	push	eax
	mov	ecx, DWORD PTR _trie$[ebp+12]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR _trie$[ebp+8]
	mov	eax, DWORD PTR _inTrie$[ebp]
	lea	ecx, DWORD PTR [eax+edx*2+16]
	push	ecx
	mov	edx, DWORD PTR _ds$[ebp]
	push	edx
	mov	eax, DWORD PTR _ds$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	call	ecx
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 96
	jmp	SHORT $LN4@utrie_swap
$LN2@utrie_swap:
; Line 97
	mov	esi, esp
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _outTrie$41634[ebp]
	add	ecx, 16					; 00000010H
	push	ecx
	mov	edx, DWORD PTR _trie$[ebp+8]
	add	edx, DWORD PTR _trie$[ebp+12]
	shl	edx, 1
	push	edx
	mov	eax, DWORD PTR _inTrie$[ebp]
	add	eax, 16					; 00000010H
	push	eax
	mov	ecx, DWORD PTR _ds$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ds$[ebp]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN4@utrie_swap:
; Line 101
	mov	eax, DWORD PTR _size$[ebp]
$LN12@utrie_swap:
; Line 102
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN16@utrie_swap
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 268				; 0000010cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN16@utrie_swap:
	DD	1
	DD	$LN15@utrie_swap
$LN15@utrie_swap:
	DD	-36					; ffffffdcH
	DD	16					; 00000010H
	DD	$LN14@utrie_swap
$LN14@utrie_swap:
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	105					; 00000069H
	DB	101					; 00000065H
	DB	0
_utrie_swap_56 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?U_FAILURE@@YACW4UErrorCode@@@Z
_TEXT	SEGMENT
_code$ = 8						; size = 4
?U_FAILURE@@YACW4UErrorCode@@@Z PROC			; U_FAILURE, COMDAT
; File d:\mozilla\intl\icu\source\common\unicode\utypes.h
; Line 705
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	cmp	DWORD PTR _code$[ebp], 0
	setg	al
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?U_FAILURE@@YACW4UErrorCode@@@Z ENDP			; U_FAILURE
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_ucol_looksLikeCollationBinary_56
EXTRN	_memset:PROC
EXTRN	_udata_swapDataHeader_56:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _ucol_looksLikeCollationBinary_56
_TEXT	SEGMENT
_header$ = -212						; size = 168
_inHeader$ = -36					; size = 4
_info$41652 = -24					; size = 4
_errorCode$ = -12					; size = 4
__$ArrayPad$ = -4					; size = 4
_ds$ = 8						; size = 4
_inData$ = 12						; size = 4
_length$ = 16						; size = 4
_ucol_looksLikeCollationBinary_56 PROC			; COMDAT
; File d:\mozilla\intl\icu\source\common\ucol_swp.cpp
; Line 108
	push	ebp
	mov	ebp, esp
	sub	esp, 408				; 00000198H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-408]
	mov	ecx, 102				; 00000066H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 109
	cmp	DWORD PTR _ds$[ebp], 0
	je	SHORT $LN11@ucol_looks
	cmp	DWORD PTR _inData$[ebp], 0
	je	SHORT $LN11@ucol_looks
	cmp	DWORD PTR _length$[ebp], -1
	jge	SHORT $LN12@ucol_looks
$LN11@ucol_looks:
; Line 110
	xor	al, al
	jmp	$LN13@ucol_looks
$LN12@ucol_looks:
; Line 114
	mov	DWORD PTR _errorCode$[ebp], 0
; Line 115
	lea	eax, DWORD PTR _errorCode$[ebp]
	push	eax
	push	0
	push	-1
	mov	ecx, DWORD PTR _inData$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ds$[ebp]
	push	edx
	call	_udata_swapDataHeader_56
	add	esp, 20					; 00000014H
; Line 116
	mov	eax, DWORD PTR _errorCode$[ebp]
	push	eax
	call	?U_SUCCESS@@YACW4UErrorCode@@@Z		; U_SUCCESS
	add	esp, 4
	movsx	ecx, al
	test	ecx, ecx
	je	SHORT $LN10@ucol_looks
; Line 117
	mov	eax, DWORD PTR _inData$[ebp]
	add	eax, 4
	mov	DWORD PTR _info$41652[ebp], eax
; Line 121
	mov	eax, DWORD PTR _info$41652[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	cmp	ecx, 85					; 00000055H
	jne	SHORT $LN10@ucol_looks
	mov	eax, DWORD PTR _info$41652[ebp]
	movzx	ecx, BYTE PTR [eax+9]
	cmp	ecx, 67					; 00000043H
	jne	SHORT $LN10@ucol_looks
	mov	eax, DWORD PTR _info$41652[ebp]
	movzx	ecx, BYTE PTR [eax+10]
	cmp	ecx, 111				; 0000006fH
	jne	SHORT $LN10@ucol_looks
	mov	eax, DWORD PTR _info$41652[ebp]
	movzx	ecx, BYTE PTR [eax+11]
	cmp	ecx, 108				; 0000006cH
	jne	SHORT $LN10@ucol_looks
; Line 122
	mov	al, 1
	jmp	$LN13@ucol_looks
$LN10@ucol_looks:
; Line 127
	mov	eax, DWORD PTR _inData$[ebp]
	mov	DWORD PTR _inHeader$[ebp], eax
; Line 136
	push	168					; 000000a8H
	push	0
	lea	eax, DWORD PTR _header$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
; Line 137
	cmp	DWORD PTR _length$[ebp], 0
	jge	SHORT $LN8@ucol_looks
; Line 138
	mov	eax, DWORD PTR _inHeader$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _ds$[ebp]
	push	edx
	call	_udata_readInt32_56
	add	esp, 8
	mov	DWORD PTR _header$[ebp], eax
	jmp	SHORT $LN7@ucol_looks
$LN8@ucol_looks:
; Line 139
	cmp	DWORD PTR _length$[ebp], 168		; 000000a8H
	jl	SHORT $LN5@ucol_looks
	mov	eax, DWORD PTR _inHeader$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _ds$[ebp]
	push	edx
	call	_udata_readInt32_56
	add	esp, 8
	mov	DWORD PTR _header$[ebp], eax
	mov	eax, DWORD PTR _length$[ebp]
	cmp	eax, DWORD PTR _header$[ebp]
	jge	SHORT $LN7@ucol_looks
$LN5@ucol_looks:
; Line 140
	xor	al, al
	jmp	SHORT $LN13@ucol_looks
$LN7@ucol_looks:
; Line 143
	mov	esi, esp
	mov	eax, DWORD PTR _inHeader$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR _ds$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _header$[ebp+16], eax
; Line 148
	cmp	DWORD PTR _header$[ebp+16], 537069080	; 20030618H
	jne	SHORT $LN3@ucol_looks
	mov	eax, DWORD PTR _inHeader$[ebp]
	movzx	ecx, BYTE PTR [eax+80]
	cmp	ecx, 3
	je	SHORT $LN4@ucol_looks
$LN3@ucol_looks:
; Line 149
	xor	al, al
	jmp	SHORT $LN13@ucol_looks
$LN4@ucol_looks:
; Line 152
	mov	eax, DWORD PTR _inHeader$[ebp]
	movsx	ecx, BYTE PTR [eax+65]
	mov	edx, DWORD PTR _ds$[ebp]
	movsx	eax, BYTE PTR [edx]
	cmp	ecx, eax
	jne	SHORT $LN1@ucol_looks
	mov	eax, DWORD PTR _inHeader$[ebp]
	movzx	ecx, BYTE PTR [eax+66]
	mov	edx, DWORD PTR _ds$[ebp]
	movzx	eax, BYTE PTR [edx+1]
	cmp	ecx, eax
	je	SHORT $LN2@ucol_looks
$LN1@ucol_looks:
; Line 153
	xor	al, al
	jmp	SHORT $LN13@ucol_looks
$LN2@ucol_looks:
; Line 156
	mov	al, 1
$LN13@ucol_looks:
; Line 157
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN18@ucol_looks
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 408				; 00000198H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN18@ucol_looks:
	DD	2
	DD	$LN17@ucol_looks
$LN17@ucol_looks:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN15@ucol_looks
	DD	-212					; ffffff2cH
	DD	168					; 000000a8H
	DD	$LN16@ucol_looks
$LN16@ucol_looks:
	DB	104					; 00000068H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
$LN15@ucol_looks:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	67					; 00000043H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
_ucol_looksLikeCollationBinary_56 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?U_SUCCESS@@YACW4UErrorCode@@@Z
_TEXT	SEGMENT
_code$ = 8						; size = 4
?U_SUCCESS@@YACW4UErrorCode@@@Z PROC			; U_SUCCESS, COMDAT
; File d:\mozilla\intl\icu\source\common\unicode\utypes.h
; Line 699
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	cmp	DWORD PTR _code$[ebp], 0
	setle	al
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?U_SUCCESS@@YACW4UErrorCode@@@Z ENDP			; U_SUCCESS
_TEXT	ENDS
PUBLIC	??_C@_0FE@PMMIBHKJ@ucol_swap?$CIformatVersion?$DN3?$CJ?3?5endi@ ; `string'
PUBLIC	??_C@_0GA@EDGMMAGA@ucol_swap?$CIformatVersion?$DN3?$CJ?3?5magi@ ; `string'
PUBLIC	??_C@_0FA@GHOCPEDB@ucol_swap?$CIformatVersion?$DN3?$CJ?3?5too?5@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?swapFormatVersion3@?A0xf15769f3@@YAHPBUUDataSwapper@@PBXHPAXPAW4UErrorCode@@@Z ; `anonymous namespace'::swapFormatVersion3
EXTRN	_memcpy:PROC
EXTRN	_uprv_checkValidMemory:PROC
EXTRN	_udata_printError_56:PROC
;	COMDAT ??_C@_0FE@PMMIBHKJ@ucol_swap?$CIformatVersion?$DN3?$CJ?3?5endi@
; File d:\mozilla\intl\icu\source\common\ucol_swp.cpp
CONST	SEGMENT
??_C@_0FE@PMMIBHKJ@ucol_swap?$CIformatVersion?$DN3?$CJ?3?5endi@ DB 'ucol_'
	DB	'swap(formatVersion=3): endianness %d or charset %d does not m'
	DB	'atch the swapper', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0GA@EDGMMAGA@ucol_swap?$CIformatVersion?$DN3?$CJ?3?5magi@
CONST	SEGMENT
??_C@_0GA@EDGMMAGA@ucol_swap?$CIformatVersion?$DN3?$CJ?3?5magi@ DB 'ucol_'
	DB	'swap(formatVersion=3): magic 0x%08x or format version %02x.%0'
	DB	'2x is not a collation binary', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0FA@GHOCPEDB@ucol_swap?$CIformatVersion?$DN3?$CJ?3?5too?5@
CONST	SEGMENT
??_C@_0FA@GHOCPEDB@ucol_swap?$CIformatVersion?$DN3?$CJ?3?5too?5@ DB 'ucol'
	DB	'_swap(formatVersion=3): too few bytes (%d after header) for c'
	DB	'ollation data', 0aH, 00H			; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?swapFormatVersion3@?A0xf15769f3@@YAHPBUUDataSwapper@@PBXHPAXPAW4UErrorCode@@@Z
_TEXT	SEGMENT
_dataCount$41724 = -284					; size = 4
_indexCount$41722 = -272				; size = 4
_dataCount$41719 = -260					; size = 4
_indexCount$41717 = -248				; size = 4
_count$ = -236						; size = 4
_header$ = -224						; size = 168
_outHeader$ = -48					; size = 4
_inHeader$ = -36					; size = 4
_outBytes$ = -24					; size = 4
_inBytes$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_ds$ = 8						; size = 4
_inData$ = 12						; size = 4
_length$ = 16						; size = 4
_outData$ = 20						; size = 4
_pErrorCode$ = 24					; size = 4
?swapFormatVersion3@?A0xf15769f3@@YAHPBUUDataSwapper@@PBXHPAXPAW4UErrorCode@@@Z PROC ; `anonymous namespace'::swapFormatVersion3, COMDAT
; Line 165
	push	ebp
	mov	ebp, esp
	sub	esp, 480				; 000001e0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-480]
	mov	ecx, 120				; 00000078H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 176
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN24@swapFormat
; Line 177
	xor	eax, eax
	jmp	$LN25@swapFormat
$LN24@swapFormat:
; Line 179
	cmp	DWORD PTR _ds$[ebp], 0
	je	SHORT $LN22@swapFormat
	cmp	DWORD PTR _inData$[ebp], 0
	je	SHORT $LN22@swapFormat
	cmp	DWORD PTR _length$[ebp], -1
	jl	SHORT $LN22@swapFormat
	cmp	DWORD PTR _length$[ebp], 0
	jle	SHORT $LN23@swapFormat
	cmp	DWORD PTR _outData$[ebp], 0
	jne	SHORT $LN23@swapFormat
$LN22@swapFormat:
; Line 180
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 1
; Line 181
	xor	eax, eax
	jmp	$LN25@swapFormat
$LN23@swapFormat:
; Line 184
	mov	eax, DWORD PTR _inData$[ebp]
	mov	DWORD PTR _inBytes$[ebp], eax
; Line 185
	mov	eax, DWORD PTR _outData$[ebp]
	mov	DWORD PTR _outBytes$[ebp], eax
; Line 187
	mov	eax, DWORD PTR _inData$[ebp]
	mov	DWORD PTR _inHeader$[ebp], eax
; Line 188
	mov	eax, DWORD PTR _outData$[ebp]
	mov	DWORD PTR _outHeader$[ebp], eax
; Line 196
	push	168					; 000000a8H
	push	0
	lea	eax, DWORD PTR _header$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
; Line 197
	cmp	DWORD PTR _length$[ebp], 0
	jge	SHORT $LN21@swapFormat
; Line 198
	mov	eax, DWORD PTR _inHeader$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _ds$[ebp]
	push	edx
	call	_udata_readInt32_56
	add	esp, 8
	mov	DWORD PTR _header$[ebp], eax
	jmp	SHORT $LN20@swapFormat
$LN21@swapFormat:
; Line 199
	cmp	DWORD PTR _length$[ebp], 168		; 000000a8H
	jl	SHORT $LN18@swapFormat
	mov	eax, DWORD PTR _inHeader$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _ds$[ebp]
	push	edx
	call	_udata_readInt32_56
	add	esp, 8
	mov	DWORD PTR _header$[ebp], eax
	mov	eax, DWORD PTR _length$[ebp]
	cmp	eax, DWORD PTR _header$[ebp]
	jge	SHORT $LN20@swapFormat
$LN18@swapFormat:
; Line 201
	mov	eax, DWORD PTR _length$[ebp]
	push	eax
	push	OFFSET ??_C@_0FA@GHOCPEDB@ucol_swap?$CIformatVersion?$DN3?$CJ?3?5too?5@
	mov	ecx, DWORD PTR _ds$[ebp]
	push	ecx
	call	_udata_printError_56
	add	esp, 12					; 0000000cH
; Line 202
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 8
; Line 203
	xor	eax, eax
	jmp	$LN25@swapFormat
$LN20@swapFormat:
; Line 206
	mov	esi, esp
	mov	eax, DWORD PTR _inHeader$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR _ds$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _header$[ebp+16], eax
; Line 211
	cmp	DWORD PTR _header$[ebp+16], 537069080	; 20030618H
	jne	SHORT $LN16@swapFormat
	mov	eax, DWORD PTR _inHeader$[ebp]
	movzx	ecx, BYTE PTR [eax+80]
	cmp	ecx, 3
	je	SHORT $LN17@swapFormat
$LN16@swapFormat:
; Line 214
	mov	eax, DWORD PTR _inHeader$[ebp]
	movzx	ecx, BYTE PTR [eax+81]
	push	ecx
	mov	edx, DWORD PTR _inHeader$[ebp]
	movzx	eax, BYTE PTR [edx+80]
	push	eax
	mov	ecx, DWORD PTR _header$[ebp+16]
	push	ecx
	push	OFFSET ??_C@_0GA@EDGMMAGA@ucol_swap?$CIformatVersion?$DN3?$CJ?3?5magi@
	mov	edx, DWORD PTR _ds$[ebp]
	push	edx
	call	_udata_printError_56
	add	esp, 20					; 00000014H
; Line 215
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 16			; 00000010H
; Line 216
	xor	eax, eax
	jmp	$LN25@swapFormat
$LN17@swapFormat:
; Line 219
	mov	eax, DWORD PTR _inHeader$[ebp]
	movsx	ecx, BYTE PTR [eax+65]
	mov	edx, DWORD PTR _ds$[ebp]
	movsx	eax, BYTE PTR [edx]
	cmp	ecx, eax
	jne	SHORT $LN14@swapFormat
	mov	eax, DWORD PTR _inHeader$[ebp]
	movzx	ecx, BYTE PTR [eax+66]
	mov	edx, DWORD PTR _ds$[ebp]
	movzx	eax, BYTE PTR [edx+1]
	cmp	ecx, eax
	je	SHORT $LN15@swapFormat
$LN14@swapFormat:
; Line 221
	mov	eax, DWORD PTR _inHeader$[ebp]
	movzx	ecx, BYTE PTR [eax+66]
	push	ecx
	mov	edx, DWORD PTR _inHeader$[ebp]
	movsx	eax, BYTE PTR [edx+65]
	push	eax
	push	OFFSET ??_C@_0FE@PMMIBHKJ@ucol_swap?$CIformatVersion?$DN3?$CJ?3?5endi@
	mov	ecx, DWORD PTR _ds$[ebp]
	push	ecx
	call	_udata_printError_56
	add	esp, 16					; 00000010H
; Line 222
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 3
; Line 223
	xor	eax, eax
	jmp	$LN25@swapFormat
$LN15@swapFormat:
; Line 226
	cmp	DWORD PTR _length$[ebp], 0
	jl	$LN13@swapFormat
; Line 228
	mov	eax, DWORD PTR _inBytes$[ebp]
	cmp	eax, DWORD PTR _outBytes$[ebp]
	je	SHORT $LN12@swapFormat
; Line 229
	push	1
	mov	eax, DWORD PTR _inBytes$[ebp]
	push	eax
	call	_uprv_checkValidMemory
	add	esp, 8
	mov	ecx, DWORD PTR _header$[ebp]
	push	ecx
	mov	edx, DWORD PTR _inBytes$[ebp]
	push	edx
	mov	eax, DWORD PTR _outBytes$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN12@swapFormat:
; Line 235
	mov	esi, esp
	mov	eax, DWORD PTR _inHeader$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _ds$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _header$[ebp+4], eax
; Line 236
	mov	esi, esp
	mov	eax, DWORD PTR _inHeader$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _ds$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _header$[ebp+8], eax
; Line 237
	mov	esi, esp
	mov	eax, DWORD PTR _inHeader$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _ds$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _header$[ebp+12], eax
; Line 238
	mov	esi, esp
	mov	eax, DWORD PTR _inHeader$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	mov	edx, DWORD PTR _ds$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _header$[ebp+20], eax
; Line 239
	mov	esi, esp
	mov	eax, DWORD PTR _inHeader$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	mov	edx, DWORD PTR _ds$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _header$[ebp+24], eax
; Line 240
	mov	esi, esp
	mov	eax, DWORD PTR _inHeader$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	mov	edx, DWORD PTR _ds$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _header$[ebp+28], eax
; Line 241
	mov	esi, esp
	mov	eax, DWORD PTR _inHeader$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR _ds$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _header$[ebp+32], eax
; Line 242
	mov	esi, esp
	mov	eax, DWORD PTR _inHeader$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	push	ecx
	mov	edx, DWORD PTR _ds$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _header$[ebp+36], eax
; Line 243
	mov	esi, esp
	mov	eax, DWORD PTR _inHeader$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	mov	edx, DWORD PTR _ds$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _header$[ebp+40], eax
; Line 244
	mov	esi, esp
	mov	eax, DWORD PTR _inHeader$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	push	ecx
	mov	edx, DWORD PTR _ds$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _header$[ebp+44], eax
; Line 245
	mov	eax, DWORD PTR _inHeader$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	push	ecx
	mov	edx, DWORD PTR _ds$[ebp]
	push	edx
	call	_udata_readInt32_56
	add	esp, 8
	mov	DWORD PTR _header$[ebp+48], eax
; Line 246
	mov	eax, DWORD PTR _inHeader$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	push	ecx
	mov	edx, DWORD PTR _ds$[ebp]
	push	edx
	call	_udata_readInt32_56
	add	esp, 8
	mov	DWORD PTR _header$[ebp+60], eax
; Line 247
	mov	esi, esp
	mov	eax, DWORD PTR _inHeader$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	push	ecx
	mov	edx, DWORD PTR _ds$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _header$[ebp+84], eax
; Line 248
	mov	esi, esp
	mov	eax, DWORD PTR _inHeader$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	push	ecx
	mov	edx, DWORD PTR _ds$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _header$[ebp+88], eax
; Line 252
	mov	esi, esp
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _outHeader$[ebp]
	push	ecx
	mov	edx, DWORD PTR _inHeader$[ebp]
	add	edx, 64					; 00000040H
	sub	edx, DWORD PTR _inHeader$[ebp]
	push	edx
	mov	eax, DWORD PTR _inHeader$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ds$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ds$[ebp]
	mov	eax, DWORD PTR [edx+28]
	call	eax
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 254
	mov	esi, esp
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _outHeader$[ebp]
	add	ecx, 84					; 00000054H
	push	ecx
	push	8
	mov	edx, DWORD PTR _inHeader$[ebp]
	add	edx, 84					; 00000054H
	push	edx
	mov	eax, DWORD PTR _ds$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ds$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	call	edx
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 256
	mov	eax, DWORD PTR _outHeader$[ebp]
	mov	ecx, DWORD PTR _ds$[ebp]
	mov	dl, BYTE PTR [ecx+2]
	mov	BYTE PTR [eax+65], dl
; Line 257
	mov	eax, DWORD PTR _outHeader$[ebp]
	mov	ecx, DWORD PTR _ds$[ebp]
	mov	dl, BYTE PTR [ecx+3]
	mov	BYTE PTR [eax+66], dl
; Line 260
	cmp	DWORD PTR _header$[ebp+4], 0
	je	SHORT $LN11@swapFormat
; Line 262
	mov	esi, esp
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _outBytes$[ebp]
	add	ecx, DWORD PTR _header$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _header$[ebp+24]
	sub	edx, DWORD PTR _header$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _inBytes$[ebp]
	add	eax, DWORD PTR _header$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _ds$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ds$[ebp]
	mov	eax, DWORD PTR [edx+28]
	call	eax
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN11@swapFormat:
; Line 266
	cmp	DWORD PTR _header$[ebp+20], 0
	je	SHORT $LN10@swapFormat
	cmp	DWORD PTR _header$[ebp+24], 0
	je	SHORT $LN10@swapFormat
; Line 267
	cmp	DWORD PTR _header$[ebp+28], 0
	je	SHORT $LN9@swapFormat
; Line 269
	mov	eax, DWORD PTR _header$[ebp+28]
	sub	eax, DWORD PTR _header$[ebp+24]
	mov	DWORD PTR _count$[ebp], eax
; Line 270
	jmp	SHORT $LN8@swapFormat
$LN9@swapFormat:
; Line 272
	mov	eax, DWORD PTR _header$[ebp+20]
	sub	eax, DWORD PTR _header$[ebp+24]
	mov	DWORD PTR _count$[ebp], eax
$LN8@swapFormat:
; Line 275
	mov	esi, esp
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _outBytes$[ebp]
	add	ecx, DWORD PTR _header$[ebp+24]
	push	ecx
	mov	edx, DWORD PTR _count$[ebp]
	push	edx
	mov	eax, DWORD PTR _inBytes$[ebp]
	add	eax, DWORD PTR _header$[ebp+24]
	push	eax
	mov	ecx, DWORD PTR _ds$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ds$[ebp]
	mov	eax, DWORD PTR [edx+28]
	call	eax
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN10@swapFormat:
; Line 279
	cmp	DWORD PTR _header$[ebp+36], 0
	je	SHORT $LN7@swapFormat
; Line 282
	mov	esi, esp
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _outBytes$[ebp]
	add	ecx, DWORD PTR _header$[ebp+28]
	push	ecx
	mov	edx, DWORD PTR _header$[ebp+36]
	shl	edx, 1
	push	edx
	mov	eax, DWORD PTR _inBytes$[ebp]
	add	eax, DWORD PTR _header$[ebp+28]
	push	eax
	mov	ecx, DWORD PTR _ds$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ds$[ebp]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 286
	mov	esi, esp
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _outBytes$[ebp]
	add	ecx, DWORD PTR _header$[ebp+32]
	push	ecx
	mov	edx, DWORD PTR _header$[ebp+36]
	shl	edx, 2
	push	edx
	mov	eax, DWORD PTR _inBytes$[ebp]
	add	eax, DWORD PTR _header$[ebp+32]
	push	eax
	mov	ecx, DWORD PTR _ds$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ds$[ebp]
	mov	eax, DWORD PTR [edx+28]
	call	eax
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN7@swapFormat:
; Line 290
	cmp	DWORD PTR _header$[ebp+20], 0
	je	SHORT $LN6@swapFormat
; Line 291
	mov	eax, DWORD PTR _header$[ebp+40]
	sub	eax, DWORD PTR _header$[ebp+20]
	mov	DWORD PTR _count$[ebp], eax
; Line 293
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _outBytes$[ebp]
	add	ecx, DWORD PTR _header$[ebp+20]
	push	ecx
	mov	edx, DWORD PTR _count$[ebp]
	push	edx
	mov	eax, DWORD PTR _inBytes$[ebp]
	add	eax, DWORD PTR _header$[ebp+20]
	push	eax
	mov	ecx, DWORD PTR _ds$[ebp]
	push	ecx
	call	_utrie_swap_56
	add	esp, 20					; 00000014H
$LN6@swapFormat:
; Line 297
	cmp	DWORD PTR _header$[ebp+48], 0
	je	SHORT $LN5@swapFormat
; Line 299
	mov	esi, esp
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _outBytes$[ebp]
	add	ecx, DWORD PTR _header$[ebp+40]
	push	ecx
	mov	edx, DWORD PTR _header$[ebp+48]
	shl	edx, 2
	push	edx
	mov	eax, DWORD PTR _inBytes$[ebp]
	add	eax, DWORD PTR _header$[ebp+40]
	push	eax
	mov	ecx, DWORD PTR _ds$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ds$[ebp]
	mov	eax, DWORD PTR [edx+28]
	call	eax
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN5@swapFormat:
; Line 305
	cmp	DWORD PTR _header$[ebp+8], 0
	je	SHORT $LN4@swapFormat
; Line 311
	mov	esi, esp
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _outBytes$[ebp]
	add	ecx, DWORD PTR _header$[ebp+8]
	push	ecx
	mov	edx, DWORD PTR _header$[ebp+12]
	sub	edx, DWORD PTR _header$[ebp+8]
	push	edx
	mov	eax, DWORD PTR _inBytes$[ebp]
	add	eax, DWORD PTR _header$[ebp+8]
	push	eax
	mov	ecx, DWORD PTR _ds$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ds$[ebp]
	mov	eax, DWORD PTR [edx+28]
	call	eax
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN4@swapFormat:
; Line 315
	cmp	DWORD PTR _header$[ebp+60], 0
	je	SHORT $LN3@swapFormat
; Line 316
	mov	eax, DWORD PTR _inHeader$[ebp]
	movzx	ecx, BYTE PTR [eax+67]
	imul	ecx, DWORD PTR _header$[ebp+60]
	shl	ecx, 1
	mov	DWORD PTR _count$[ebp], ecx
; Line 318
	mov	esi, esp
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _outBytes$[ebp]
	add	ecx, DWORD PTR _header$[ebp+12]
	push	ecx
	mov	edx, DWORD PTR _count$[ebp]
	push	edx
	mov	eax, DWORD PTR _inBytes$[ebp]
	add	eax, DWORD PTR _header$[ebp+12]
	push	eax
	mov	ecx, DWORD PTR _ds$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ds$[ebp]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@swapFormat:
; Line 322
	cmp	DWORD PTR _header$[ebp+84], 0
	je	$LN2@swapFormat
; Line 323
	mov	eax, DWORD PTR _inBytes$[ebp]
	add	eax, DWORD PTR _header$[ebp+84]
	mov	esi, esp
	movzx	ecx, WORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _ds$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	movzx	ecx, ax
	mov	DWORD PTR _indexCount$41717[ebp], ecx
; Line 324
	mov	eax, DWORD PTR _inBytes$[ebp]
	add	eax, DWORD PTR _header$[ebp+84]
	mov	esi, esp
	movzx	ecx, WORD PTR [eax+2]
	push	ecx
	mov	edx, DWORD PTR _ds$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	movzx	ecx, ax
	mov	DWORD PTR _dataCount$41719[ebp], ecx
; Line 327
	mov	esi, esp
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _outBytes$[ebp]
	add	ecx, DWORD PTR _header$[ebp+84]
	push	ecx
	mov	edx, DWORD PTR _dataCount$41719[ebp]
	shl	edx, 1
	mov	eax, DWORD PTR _indexCount$41717[ebp]
	lea	ecx, DWORD PTR [edx+eax*4+4]
	push	ecx
	mov	edx, DWORD PTR _inBytes$[ebp]
	add	edx, DWORD PTR _header$[ebp+84]
	push	edx
	mov	eax, DWORD PTR _ds$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ds$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	call	edx
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@swapFormat:
; Line 331
	cmp	DWORD PTR _header$[ebp+88], 0
	je	$LN13@swapFormat
; Line 332
	mov	eax, DWORD PTR _inBytes$[ebp]
	add	eax, DWORD PTR _header$[ebp+88]
	mov	esi, esp
	movzx	ecx, WORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _ds$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	movzx	ecx, ax
	mov	DWORD PTR _indexCount$41722[ebp], ecx
; Line 333
	mov	eax, DWORD PTR _inBytes$[ebp]
	add	eax, DWORD PTR _header$[ebp+88]
	mov	esi, esp
	movzx	ecx, WORD PTR [eax+2]
	push	ecx
	mov	edx, DWORD PTR _ds$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	movzx	ecx, ax
	mov	DWORD PTR _dataCount$41724[ebp], ecx
; Line 336
	mov	esi, esp
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _outBytes$[ebp]
	add	ecx, DWORD PTR _header$[ebp+88]
	push	ecx
	mov	edx, DWORD PTR _dataCount$41724[ebp]
	shl	edx, 1
	mov	eax, DWORD PTR _indexCount$41722[ebp]
	lea	ecx, DWORD PTR [edx+eax*2+4]
	push	ecx
	mov	edx, DWORD PTR _inBytes$[ebp]
	add	edx, DWORD PTR _header$[ebp+88]
	push	edx
	mov	eax, DWORD PTR _ds$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ds$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	call	edx
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN13@swapFormat:
; Line 340
	mov	eax, DWORD PTR _header$[ebp]
$LN25@swapFormat:
; Line 341
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN29@swapFormat
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 480				; 000001e0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN29@swapFormat:
	DD	1
	DD	$LN28@swapFormat
$LN28@swapFormat:
	DD	-224					; ffffff20H
	DD	168					; 000000a8H
	DD	$LN27@swapFormat
$LN27@swapFormat:
	DB	104					; 00000068H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
?swapFormatVersion3@?A0xf15769f3@@YAHPBUUDataSwapper@@PBXHPAXPAW4UErrorCode@@@Z ENDP ; `anonymous namespace'::swapFormatVersion3
_TEXT	ENDS
PUBLIC	??_C@_0EC@IDFLCEAI@ucol_swap?$CIformatVersion?$DN4?$CJ?3?5unkn@ ; `string'
PUBLIC	??_C@_0EC@JAIMGEPM@ucol_swap?$CIformatVersion?$DN4?$CJ?3?5unkn@ ; `string'
PUBLIC	??_C@_0EB@KBOODMHK@ucol_swap?$CIformatVersion?$DN4?$CJ?3?5unkn@ ; `string'
PUBLIC	??_C@_0FA@DHAJIPBE@ucol_swap?$CIformatVersion?$DN4?$CJ?3?5too?5@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?swapFormatVersion4@?A0xf15769f3@@YAHPBUUDataSwapper@@PBXHPAXAAW4UErrorCode@@@Z ; `anonymous namespace'::swapFormatVersion4
EXTRN	_utrie2_swap_56:PROC
;	COMDAT ??_C@_0EC@IDFLCEAI@ucol_swap?$CIformatVersion?$DN4?$CJ?3?5unkn@
CONST	SEGMENT
??_C@_0EC@IDFLCEAI@ucol_swap?$CIformatVersion?$DN4?$CJ?3?5unkn@ DB 'ucol_'
	DB	'swap(formatVersion=4): unknown data at IX_RESERVED18_OFFSET', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0EC@JAIMGEPM@ucol_swap?$CIformatVersion?$DN4?$CJ?3?5unkn@
CONST	SEGMENT
??_C@_0EC@JAIMGEPM@ucol_swap?$CIformatVersion?$DN4?$CJ?3?5unkn@ DB 'ucol_'
	DB	'swap(formatVersion=4): unknown data at IX_RESERVED10_OFFSET', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0EB@KBOODMHK@ucol_swap?$CIformatVersion?$DN4?$CJ?3?5unkn@
CONST	SEGMENT
??_C@_0EB@KBOODMHK@ucol_swap?$CIformatVersion?$DN4?$CJ?3?5unkn@ DB 'ucol_'
	DB	'swap(formatVersion=4): unknown data at IX_RESERVED8_OFFSET', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0FA@DHAJIPBE@ucol_swap?$CIformatVersion?$DN4?$CJ?3?5too?5@
CONST	SEGMENT
??_C@_0FA@DHAJIPBE@ucol_swap?$CIformatVersion?$DN4?$CJ?3?5too?5@ DB 'ucol'
	DB	'_swap(formatVersion=4): too few bytes (%d after header) for c'
	DB	'ollation data', 0aH, 00H			; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?swapFormatVersion4@?A0xf15769f3@@YAHPBUUDataSwapper@@PBXHPAXAAW4UErrorCode@@@Z
_TEXT	SEGMENT
_offset$ = -196						; size = 4
_index$ = -184						; size = 4
_size$ = -172						; size = 4
_i$41770 = -160						; size = 4
_i$41766 = -148						; size = 4
_indexesLength$ = -136					; size = 4
_indexes$ = -124					; size = 80
_inIndexes$ = -36					; size = 4
_outBytes$ = -24					; size = 4
_inBytes$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_ds$ = 8						; size = 4
_inData$ = 12						; size = 4
_length$ = 16						; size = 4
_outData$ = 20						; size = 4
_errorCode$ = 24					; size = 4
?swapFormatVersion4@?A0xf15769f3@@YAHPBUUDataSwapper@@PBXHPAXAAW4UErrorCode@@@Z PROC ; `anonymous namespace'::swapFormatVersion4, COMDAT
; Line 379
	push	ebp
	mov	ebp, esp
	sub	esp, 392				; 00000188H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-392]
	mov	ecx, 98					; 00000062H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 380
	mov	eax, DWORD PTR _errorCode$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN28@swapFormat@2
	xor	eax, eax
	jmp	$LN29@swapFormat@2
$LN28@swapFormat@2:
; Line 382
	mov	eax, DWORD PTR _inData$[ebp]
	mov	DWORD PTR _inBytes$[ebp], eax
; Line 383
	mov	eax, DWORD PTR _outData$[ebp]
	mov	DWORD PTR _outBytes$[ebp], eax
; Line 385
	mov	eax, DWORD PTR _inBytes$[ebp]
	mov	DWORD PTR _inIndexes$[ebp], eax
; Line 389
	cmp	DWORD PTR _length$[ebp], 0
	jl	SHORT $LN27@swapFormat@2
	cmp	DWORD PTR _length$[ebp], 8
	jge	SHORT $LN27@swapFormat@2
; Line 392
	mov	eax, DWORD PTR _length$[ebp]
	push	eax
	push	OFFSET ??_C@_0FA@DHAJIPBE@ucol_swap?$CIformatVersion?$DN4?$CJ?3?5too?5@
	mov	ecx, DWORD PTR _ds$[ebp]
	push	ecx
	call	_udata_printError_56
	add	esp, 12					; 0000000cH
; Line 393
	mov	eax, DWORD PTR _errorCode$[ebp]
	mov	DWORD PTR [eax], 8
; Line 394
	xor	eax, eax
	jmp	$LN29@swapFormat@2
$LN27@swapFormat@2:
; Line 397
	mov	eax, DWORD PTR _inIndexes$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _ds$[ebp]
	push	edx
	call	_udata_readInt32_56
	add	esp, 8
	mov	DWORD PTR _indexes$[ebp], eax
	mov	eax, DWORD PTR _indexes$[ebp]
	mov	DWORD PTR _indexesLength$[ebp], eax
; Line 398
	cmp	DWORD PTR _length$[ebp], 0
	jl	SHORT $LN26@swapFormat@2
	mov	eax, DWORD PTR _indexesLength$[ebp]
	shl	eax, 2
	cmp	DWORD PTR _length$[ebp], eax
	jge	SHORT $LN26@swapFormat@2
; Line 401
	mov	eax, DWORD PTR _length$[ebp]
	push	eax
	push	OFFSET ??_C@_0FA@DHAJIPBE@ucol_swap?$CIformatVersion?$DN4?$CJ?3?5too?5@
	mov	ecx, DWORD PTR _ds$[ebp]
	push	ecx
	call	_udata_printError_56
	add	esp, 12					; 0000000cH
; Line 402
	mov	eax, DWORD PTR _errorCode$[ebp]
	mov	DWORD PTR [eax], 8
; Line 403
	xor	eax, eax
	jmp	$LN29@swapFormat@2
$LN26@swapFormat@2:
; Line 406
	mov	DWORD PTR _i$41766[ebp], 1
	jmp	SHORT $LN25@swapFormat@2
$LN24@swapFormat@2:
	mov	eax, DWORD PTR _i$41766[ebp]
	add	eax, 1
	mov	DWORD PTR _i$41766[ebp], eax
$LN25@swapFormat@2:
	cmp	DWORD PTR _i$41766[ebp], 19		; 00000013H
	jg	SHORT $LN23@swapFormat@2
	mov	eax, DWORD PTR _i$41766[ebp]
	cmp	eax, DWORD PTR _indexesLength$[ebp]
	jge	SHORT $LN23@swapFormat@2
; Line 407
	mov	eax, DWORD PTR _i$41766[ebp]
	mov	ecx, DWORD PTR _inIndexes$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	push	edx
	mov	eax, DWORD PTR _ds$[ebp]
	push	eax
	call	_udata_readInt32_56
	add	esp, 8
	mov	ecx, DWORD PTR _i$41766[ebp]
	mov	DWORD PTR _indexes$[ebp+ecx*4], eax
; Line 408
	jmp	SHORT $LN24@swapFormat@2
$LN23@swapFormat@2:
; Line 409
	mov	eax, DWORD PTR _indexesLength$[ebp]
	mov	DWORD PTR _i$41770[ebp], eax
	jmp	SHORT $LN22@swapFormat@2
$LN21@swapFormat@2:
	mov	eax, DWORD PTR _i$41770[ebp]
	add	eax, 1
	mov	DWORD PTR _i$41770[ebp], eax
$LN22@swapFormat@2:
	cmp	DWORD PTR _i$41770[ebp], 19		; 00000013H
	jg	SHORT $LN20@swapFormat@2
; Line 410
	mov	eax, DWORD PTR _i$41770[ebp]
	mov	DWORD PTR _indexes$[ebp+eax*4], -1
; Line 411
	jmp	SHORT $LN21@swapFormat@2
$LN20@swapFormat@2:
; Line 412
	mov	DWORD PTR _inIndexes$[ebp], 0
; Line 416
	cmp	DWORD PTR _indexesLength$[ebp], 19	; 00000013H
	jle	SHORT $LN19@swapFormat@2
; Line 417
	mov	eax, DWORD PTR _indexes$[ebp+76]
	mov	DWORD PTR _size$[ebp], eax
	jmp	SHORT $LN18@swapFormat@2
$LN19@swapFormat@2:
; Line 418
	cmp	DWORD PTR _indexesLength$[ebp], 5
	jle	SHORT $LN17@swapFormat@2
; Line 419
	mov	eax, DWORD PTR _indexesLength$[ebp]
	mov	ecx, DWORD PTR _indexes$[ebp+eax*4-4]
	mov	DWORD PTR _size$[ebp], ecx
; Line 420
	jmp	SHORT $LN18@swapFormat@2
$LN17@swapFormat@2:
; Line 421
	mov	eax, DWORD PTR _indexesLength$[ebp]
	shl	eax, 2
	mov	DWORD PTR _size$[ebp], eax
$LN18@swapFormat@2:
; Line 423
	cmp	DWORD PTR _length$[ebp], 0
	jge	SHORT $LN15@swapFormat@2
	mov	eax, DWORD PTR _size$[ebp]
	jmp	$LN29@swapFormat@2
$LN15@swapFormat@2:
; Line 425
	mov	eax, DWORD PTR _length$[ebp]
	cmp	eax, DWORD PTR _size$[ebp]
	jge	SHORT $LN14@swapFormat@2
; Line 428
	mov	eax, DWORD PTR _length$[ebp]
	push	eax
	push	OFFSET ??_C@_0FA@DHAJIPBE@ucol_swap?$CIformatVersion?$DN4?$CJ?3?5too?5@
	mov	ecx, DWORD PTR _ds$[ebp]
	push	ecx
	call	_udata_printError_56
	add	esp, 12					; 0000000cH
; Line 429
	mov	eax, DWORD PTR _errorCode$[ebp]
	mov	DWORD PTR [eax], 8
; Line 430
	xor	eax, eax
	jmp	$LN29@swapFormat@2
$LN14@swapFormat@2:
; Line 434
	mov	eax, DWORD PTR _inBytes$[ebp]
	cmp	eax, DWORD PTR _outBytes$[ebp]
	je	SHORT $LN13@swapFormat@2
; Line 435
	push	1
	mov	eax, DWORD PTR _inBytes$[ebp]
	push	eax
	call	_uprv_checkValidMemory
	add	esp, 8
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _inBytes$[ebp]
	push	edx
	mov	eax, DWORD PTR _outBytes$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN13@swapFormat@2:
; Line 439
	mov	esi, esp
	mov	eax, DWORD PTR _errorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _outBytes$[ebp]
	push	ecx
	mov	edx, DWORD PTR _indexesLength$[ebp]
	shl	edx, 2
	push	edx
	mov	eax, DWORD PTR _inBytes$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ds$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ds$[ebp]
	mov	eax, DWORD PTR [edx+28]
	call	eax
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 448
	mov	DWORD PTR _index$[ebp], 5
; Line 449
	mov	eax, DWORD PTR _index$[ebp]
	mov	ecx, DWORD PTR _indexes$[ebp+eax*4]
	mov	DWORD PTR _offset$[ebp], ecx
; Line 450
	mov	eax, DWORD PTR _index$[ebp]
	mov	ecx, DWORD PTR _indexes$[ebp+eax*4+4]
	sub	ecx, DWORD PTR _offset$[ebp]
	mov	DWORD PTR _length$[ebp], ecx
; Line 451
	cmp	DWORD PTR _length$[ebp], 0
	jle	SHORT $LN12@swapFormat@2
; Line 452
	mov	esi, esp
	mov	eax, DWORD PTR _errorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _outBytes$[ebp]
	add	ecx, DWORD PTR _offset$[ebp]
	push	ecx
	mov	edx, DWORD PTR _length$[ebp]
	push	edx
	mov	eax, DWORD PTR _inBytes$[ebp]
	add	eax, DWORD PTR _offset$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ds$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ds$[ebp]
	mov	eax, DWORD PTR [edx+28]
	call	eax
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN12@swapFormat@2:
; Line 457
	mov	DWORD PTR _index$[ebp], 7
; Line 458
	mov	eax, DWORD PTR _index$[ebp]
	mov	ecx, DWORD PTR _indexes$[ebp+eax*4]
	mov	DWORD PTR _offset$[ebp], ecx
; Line 459
	mov	eax, DWORD PTR _index$[ebp]
	mov	ecx, DWORD PTR _indexes$[ebp+eax*4+4]
	sub	ecx, DWORD PTR _offset$[ebp]
	mov	DWORD PTR _length$[ebp], ecx
; Line 460
	cmp	DWORD PTR _length$[ebp], 0
	jle	SHORT $LN11@swapFormat@2
; Line 461
	mov	eax, DWORD PTR _errorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _outBytes$[ebp]
	add	ecx, DWORD PTR _offset$[ebp]
	push	ecx
	mov	edx, DWORD PTR _length$[ebp]
	push	edx
	mov	eax, DWORD PTR _inBytes$[ebp]
	add	eax, DWORD PTR _offset$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ds$[ebp]
	push	ecx
	call	_utrie2_swap_56
	add	esp, 20					; 00000014H
$LN11@swapFormat@2:
; Line 464
	mov	DWORD PTR _index$[ebp], 8
; Line 465
	mov	eax, DWORD PTR _index$[ebp]
	mov	ecx, DWORD PTR _indexes$[ebp+eax*4]
	mov	DWORD PTR _offset$[ebp], ecx
; Line 466
	mov	eax, DWORD PTR _index$[ebp]
	mov	ecx, DWORD PTR _indexes$[ebp+eax*4+4]
	sub	ecx, DWORD PTR _offset$[ebp]
	mov	DWORD PTR _length$[ebp], ecx
; Line 467
	cmp	DWORD PTR _length$[ebp], 0
	jle	SHORT $LN10@swapFormat@2
; Line 468
	mov	eax, DWORD PTR _length$[ebp]
	push	eax
	push	OFFSET ??_C@_0EB@KBOODMHK@ucol_swap?$CIformatVersion?$DN4?$CJ?3?5unkn@
	mov	ecx, DWORD PTR _ds$[ebp]
	push	ecx
	call	_udata_printError_56
	add	esp, 12					; 0000000cH
; Line 469
	mov	eax, DWORD PTR _errorCode$[ebp]
	mov	DWORD PTR [eax], 16			; 00000010H
; Line 470
	xor	eax, eax
	jmp	$LN29@swapFormat@2
$LN10@swapFormat@2:
; Line 473
	mov	DWORD PTR _index$[ebp], 9
; Line 474
	mov	eax, DWORD PTR _index$[ebp]
	mov	ecx, DWORD PTR _indexes$[ebp+eax*4]
	mov	DWORD PTR _offset$[ebp], ecx
; Line 475
	mov	eax, DWORD PTR _index$[ebp]
	mov	ecx, DWORD PTR _indexes$[ebp+eax*4+4]
	sub	ecx, DWORD PTR _offset$[ebp]
	mov	DWORD PTR _length$[ebp], ecx
; Line 476
	cmp	DWORD PTR _length$[ebp], 0
	jle	SHORT $LN9@swapFormat@2
; Line 477
	mov	esi, esp
	mov	eax, DWORD PTR _errorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _outBytes$[ebp]
	add	ecx, DWORD PTR _offset$[ebp]
	push	ecx
	mov	edx, DWORD PTR _length$[ebp]
	push	edx
	mov	eax, DWORD PTR _inBytes$[ebp]
	add	eax, DWORD PTR _offset$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ds$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ds$[ebp]
	mov	eax, DWORD PTR [edx+32]
	call	eax
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN9@swapFormat@2:
; Line 480
	mov	DWORD PTR _index$[ebp], 10		; 0000000aH
; Line 481
	mov	eax, DWORD PTR _index$[ebp]
	mov	ecx, DWORD PTR _indexes$[ebp+eax*4]
	mov	DWORD PTR _offset$[ebp], ecx
; Line 482
	mov	eax, DWORD PTR _index$[ebp]
	mov	ecx, DWORD PTR _indexes$[ebp+eax*4+4]
	sub	ecx, DWORD PTR _offset$[ebp]
	mov	DWORD PTR _length$[ebp], ecx
; Line 483
	cmp	DWORD PTR _length$[ebp], 0
	jle	SHORT $LN8@swapFormat@2
; Line 484
	mov	eax, DWORD PTR _length$[ebp]
	push	eax
	push	OFFSET ??_C@_0EC@JAIMGEPM@ucol_swap?$CIformatVersion?$DN4?$CJ?3?5unkn@
	mov	ecx, DWORD PTR _ds$[ebp]
	push	ecx
	call	_udata_printError_56
	add	esp, 12					; 0000000cH
; Line 485
	mov	eax, DWORD PTR _errorCode$[ebp]
	mov	DWORD PTR [eax], 16			; 00000010H
; Line 486
	xor	eax, eax
	jmp	$LN29@swapFormat@2
$LN8@swapFormat@2:
; Line 489
	mov	DWORD PTR _index$[ebp], 11		; 0000000bH
; Line 490
	mov	eax, DWORD PTR _index$[ebp]
	mov	ecx, DWORD PTR _indexes$[ebp+eax*4]
	mov	DWORD PTR _offset$[ebp], ecx
; Line 491
	mov	eax, DWORD PTR _index$[ebp]
	mov	ecx, DWORD PTR _indexes$[ebp+eax*4+4]
	sub	ecx, DWORD PTR _offset$[ebp]
	mov	DWORD PTR _length$[ebp], ecx
; Line 492
	cmp	DWORD PTR _length$[ebp], 0
	jle	SHORT $LN7@swapFormat@2
; Line 493
	mov	esi, esp
	mov	eax, DWORD PTR _errorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _outBytes$[ebp]
	add	ecx, DWORD PTR _offset$[ebp]
	push	ecx
	mov	edx, DWORD PTR _length$[ebp]
	push	edx
	mov	eax, DWORD PTR _inBytes$[ebp]
	add	eax, DWORD PTR _offset$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ds$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ds$[ebp]
	mov	eax, DWORD PTR [edx+28]
	call	eax
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN7@swapFormat@2:
; Line 496
	mov	DWORD PTR _index$[ebp], 12		; 0000000cH
; Line 497
	mov	eax, DWORD PTR _index$[ebp]
	mov	ecx, DWORD PTR _indexes$[ebp+eax*4]
	mov	DWORD PTR _offset$[ebp], ecx
; Line 498
	mov	eax, DWORD PTR _index$[ebp]
	mov	ecx, DWORD PTR _indexes$[ebp+eax*4+4]
	sub	ecx, DWORD PTR _offset$[ebp]
	mov	DWORD PTR _length$[ebp], ecx
; Line 499
	cmp	DWORD PTR _length$[ebp], 0
	jle	SHORT $LN6@swapFormat@2
; Line 500
	mov	esi, esp
	mov	eax, DWORD PTR _errorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _outBytes$[ebp]
	add	ecx, DWORD PTR _offset$[ebp]
	push	ecx
	mov	edx, DWORD PTR _length$[ebp]
	push	edx
	mov	eax, DWORD PTR _inBytes$[ebp]
	add	eax, DWORD PTR _offset$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ds$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ds$[ebp]
	mov	eax, DWORD PTR [edx+28]
	call	eax
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN6@swapFormat@2:
; Line 503
	mov	DWORD PTR _index$[ebp], 13		; 0000000dH
; Line 504
	mov	eax, DWORD PTR _index$[ebp]
	mov	ecx, DWORD PTR _indexes$[ebp+eax*4]
	mov	DWORD PTR _offset$[ebp], ecx
; Line 505
	mov	eax, DWORD PTR _index$[ebp]
	mov	ecx, DWORD PTR _indexes$[ebp+eax*4+4]
	sub	ecx, DWORD PTR _offset$[ebp]
	mov	DWORD PTR _length$[ebp], ecx
; Line 506
	cmp	DWORD PTR _length$[ebp], 0
	jle	SHORT $LN5@swapFormat@2
; Line 507
	mov	esi, esp
	mov	eax, DWORD PTR _errorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _outBytes$[ebp]
	add	ecx, DWORD PTR _offset$[ebp]
	push	ecx
	mov	edx, DWORD PTR _length$[ebp]
	push	edx
	mov	eax, DWORD PTR _inBytes$[ebp]
	add	eax, DWORD PTR _offset$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ds$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ds$[ebp]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN5@swapFormat@2:
; Line 510
	mov	DWORD PTR _index$[ebp], 14		; 0000000eH
; Line 511
	mov	eax, DWORD PTR _index$[ebp]
	mov	ecx, DWORD PTR _indexes$[ebp+eax*4]
	mov	DWORD PTR _offset$[ebp], ecx
; Line 512
	mov	eax, DWORD PTR _index$[ebp]
	mov	ecx, DWORD PTR _indexes$[ebp+eax*4+4]
	sub	ecx, DWORD PTR _offset$[ebp]
	mov	DWORD PTR _length$[ebp], ecx
; Line 513
	cmp	DWORD PTR _length$[ebp], 0
	jle	SHORT $LN4@swapFormat@2
; Line 514
	mov	esi, esp
	mov	eax, DWORD PTR _errorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _outBytes$[ebp]
	add	ecx, DWORD PTR _offset$[ebp]
	push	ecx
	mov	edx, DWORD PTR _length$[ebp]
	push	edx
	mov	eax, DWORD PTR _inBytes$[ebp]
	add	eax, DWORD PTR _offset$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ds$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ds$[ebp]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN4@swapFormat@2:
; Line 517
	mov	DWORD PTR _index$[ebp], 15		; 0000000fH
; Line 518
	mov	eax, DWORD PTR _index$[ebp]
	mov	ecx, DWORD PTR _indexes$[ebp+eax*4]
	mov	DWORD PTR _offset$[ebp], ecx
; Line 519
	mov	eax, DWORD PTR _index$[ebp]
	mov	ecx, DWORD PTR _indexes$[ebp+eax*4+4]
	sub	ecx, DWORD PTR _offset$[ebp]
	mov	DWORD PTR _length$[ebp], ecx
; Line 520
	cmp	DWORD PTR _length$[ebp], 0
	jle	SHORT $LN3@swapFormat@2
; Line 521
	mov	esi, esp
	mov	eax, DWORD PTR _errorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _outBytes$[ebp]
	add	ecx, DWORD PTR _offset$[ebp]
	push	ecx
	mov	edx, DWORD PTR _length$[ebp]
	push	edx
	mov	eax, DWORD PTR _inBytes$[ebp]
	add	eax, DWORD PTR _offset$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ds$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ds$[ebp]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@swapFormat@2:
; Line 524
	mov	DWORD PTR _index$[ebp], 16		; 00000010H
; Line 525
	mov	eax, DWORD PTR _index$[ebp]
	mov	ecx, DWORD PTR _indexes$[ebp+eax*4]
	mov	DWORD PTR _offset$[ebp], ecx
; Line 526
	mov	eax, DWORD PTR _index$[ebp]
	mov	ecx, DWORD PTR _indexes$[ebp+eax*4+4]
	sub	ecx, DWORD PTR _offset$[ebp]
	mov	DWORD PTR _length$[ebp], ecx
; Line 527
	cmp	DWORD PTR _length$[ebp], 0
	jle	SHORT $LN2@swapFormat@2
; Line 528
	mov	esi, esp
	mov	eax, DWORD PTR _errorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _outBytes$[ebp]
	add	ecx, DWORD PTR _offset$[ebp]
	push	ecx
	mov	edx, DWORD PTR _length$[ebp]
	push	edx
	mov	eax, DWORD PTR _inBytes$[ebp]
	add	eax, DWORD PTR _offset$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ds$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ds$[ebp]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@swapFormat@2:
; Line 533
	mov	DWORD PTR _index$[ebp], 18		; 00000012H
; Line 534
	mov	eax, DWORD PTR _index$[ebp]
	mov	ecx, DWORD PTR _indexes$[ebp+eax*4]
	mov	DWORD PTR _offset$[ebp], ecx
; Line 535
	mov	eax, DWORD PTR _index$[ebp]
	mov	ecx, DWORD PTR _indexes$[ebp+eax*4+4]
	sub	ecx, DWORD PTR _offset$[ebp]
	mov	DWORD PTR _length$[ebp], ecx
; Line 536
	cmp	DWORD PTR _length$[ebp], 0
	jle	SHORT $LN1@swapFormat@2
; Line 537
	mov	eax, DWORD PTR _length$[ebp]
	push	eax
	push	OFFSET ??_C@_0EC@IDFLCEAI@ucol_swap?$CIformatVersion?$DN4?$CJ?3?5unkn@
	mov	ecx, DWORD PTR _ds$[ebp]
	push	ecx
	call	_udata_printError_56
	add	esp, 12					; 0000000cH
; Line 538
	mov	eax, DWORD PTR _errorCode$[ebp]
	mov	DWORD PTR [eax], 16			; 00000010H
; Line 539
	xor	eax, eax
	jmp	SHORT $LN29@swapFormat@2
$LN1@swapFormat@2:
; Line 542
	mov	eax, DWORD PTR _size$[ebp]
$LN29@swapFormat@2:
; Line 543
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN33@swapFormat@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 392				; 00000188H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN33@swapFormat@2:
	DD	1
	DD	$LN32@swapFormat@2
$LN32@swapFormat@2:
	DD	-124					; ffffff84H
	DD	80					; 00000050H
	DD	$LN31@swapFormat@2
$LN31@swapFormat@2:
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
?swapFormatVersion4@?A0xf15769f3@@YAHPBUUDataSwapper@@PBXHPAXAAW4UErrorCode@@@Z ENDP ; `anonymous namespace'::swapFormatVersion4
_TEXT	ENDS
PUBLIC	??_C@_0GN@LMNEJPBK@ucol_swap?$CI?$CJ?3?5data?5format?5?$CF02x?4?$CF0@ ; `string'
PUBLIC	_ucol_swap_56
;	COMDAT ??_C@_0GN@LMNEJPBK@ucol_swap?$CI?$CJ?3?5data?5format?5?$CF02x?4?$CF0@
CONST	SEGMENT
??_C@_0GN@LMNEJPBK@ucol_swap?$CI?$CJ?3?5data?5format?5?$CF02x?4?$CF0@ DB 'u'
	DB	'col_swap(): data format %02x.%02x.%02x.%02x (format version %'
	DB	'02x.%02x) is not recognized as collation data', 0aH, 00H ; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT _ucol_swap_56
_TEXT	SEGMENT
_collationSize$ = -32					; size = 4
_info$ = -20						; size = 4
_headerSize$ = -8					; size = 4
_ds$ = 8						; size = 4
_inData$ = 12						; size = 4
_length$ = 16						; size = 4
_outData$ = 20						; size = 4
_pErrorCode$ = 24					; size = 4
_ucol_swap_56 PROC					; COMDAT
; Line 551
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 552
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN10@ucol_swap_
	xor	eax, eax
	jmp	$LN11@ucol_swap_
$LN10@ucol_swap_:
; Line 555
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _outData$[ebp]
	push	ecx
	mov	edx, DWORD PTR _length$[ebp]
	push	edx
	mov	eax, DWORD PTR _inData$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ds$[ebp]
	push	ecx
	call	_udata_swapDataHeader_56
	add	esp, 20					; 00000014H
	mov	DWORD PTR _headerSize$[ebp], eax
; Line 556
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN9@ucol_swap_
; Line 558
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 0
; Line 559
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _outData$[ebp]
	push	ecx
	mov	edx, DWORD PTR _length$[ebp]
	push	edx
	mov	eax, DWORD PTR _inData$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ds$[ebp]
	push	ecx
	call	?swapFormatVersion3@?A0xf15769f3@@YAHPBUUDataSwapper@@PBXHPAXPAW4UErrorCode@@@Z ; `anonymous namespace'::swapFormatVersion3
	add	esp, 20					; 00000014H
	jmp	$LN11@ucol_swap_
$LN9@ucol_swap_:
; Line 563
	mov	eax, DWORD PTR _inData$[ebp]
	add	eax, 4
	mov	DWORD PTR _info$[ebp], eax
; Line 570
	mov	eax, DWORD PTR _info$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	cmp	ecx, 85					; 00000055H
	jne	SHORT $LN7@ucol_swap_
	mov	eax, DWORD PTR _info$[ebp]
	movzx	ecx, BYTE PTR [eax+9]
	cmp	ecx, 67					; 00000043H
	jne	SHORT $LN7@ucol_swap_
	mov	eax, DWORD PTR _info$[ebp]
	movzx	ecx, BYTE PTR [eax+10]
	cmp	ecx, 111				; 0000006fH
	jne	SHORT $LN7@ucol_swap_
	mov	eax, DWORD PTR _info$[ebp]
	movzx	ecx, BYTE PTR [eax+11]
	cmp	ecx, 108				; 0000006cH
	jne	SHORT $LN7@ucol_swap_
	mov	eax, DWORD PTR _info$[ebp]
	movzx	ecx, BYTE PTR [eax+12]
	cmp	ecx, 3
	jl	SHORT $LN7@ucol_swap_
	mov	eax, DWORD PTR _info$[ebp]
	movzx	ecx, BYTE PTR [eax+12]
	cmp	ecx, 5
	jle	SHORT $LN8@ucol_swap_
$LN7@ucol_swap_:
; Line 575
	mov	eax, DWORD PTR _info$[ebp]
	movzx	ecx, BYTE PTR [eax+13]
	push	ecx
	mov	edx, DWORD PTR _info$[ebp]
	movzx	eax, BYTE PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _info$[ebp]
	movzx	edx, BYTE PTR [ecx+11]
	push	edx
	mov	eax, DWORD PTR _info$[ebp]
	movzx	ecx, BYTE PTR [eax+10]
	push	ecx
	mov	edx, DWORD PTR _info$[ebp]
	movzx	eax, BYTE PTR [edx+9]
	push	eax
	mov	ecx, DWORD PTR _info$[ebp]
	movzx	edx, BYTE PTR [ecx+8]
	push	edx
	push	OFFSET ??_C@_0GN@LMNEJPBK@ucol_swap?$CI?$CJ?3?5data?5format?5?$CF02x?4?$CF0@
	mov	eax, DWORD PTR _ds$[ebp]
	push	eax
	call	_udata_printError_56
	add	esp, 32					; 00000020H
; Line 576
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 16			; 00000010H
; Line 577
	xor	eax, eax
	jmp	$LN11@ucol_swap_
$LN8@ucol_swap_:
; Line 580
	mov	eax, DWORD PTR _inData$[ebp]
	add	eax, DWORD PTR _headerSize$[ebp]
	mov	DWORD PTR _inData$[ebp], eax
; Line 581
	cmp	DWORD PTR _length$[ebp], 0
	jl	SHORT $LN5@ucol_swap_
	mov	eax, DWORD PTR _length$[ebp]
	sub	eax, DWORD PTR _headerSize$[ebp]
	mov	DWORD PTR _length$[ebp], eax
$LN5@ucol_swap_:
; Line 582
	mov	eax, DWORD PTR _outData$[ebp]
	add	eax, DWORD PTR _headerSize$[ebp]
	mov	DWORD PTR _outData$[ebp], eax
; Line 584
	mov	eax, DWORD PTR _info$[ebp]
	movzx	ecx, BYTE PTR [eax+12]
	cmp	ecx, 4
	jl	SHORT $LN4@ucol_swap_
; Line 585
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _outData$[ebp]
	push	ecx
	mov	edx, DWORD PTR _length$[ebp]
	push	edx
	mov	eax, DWORD PTR _inData$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ds$[ebp]
	push	ecx
	call	?swapFormatVersion4@?A0xf15769f3@@YAHPBUUDataSwapper@@PBXHPAXAAW4UErrorCode@@@Z ; `anonymous namespace'::swapFormatVersion4
	add	esp, 20					; 00000014H
	mov	DWORD PTR _collationSize$[ebp], eax
; Line 586
	jmp	SHORT $LN3@ucol_swap_
$LN4@ucol_swap_:
; Line 587
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _outData$[ebp]
	push	ecx
	mov	edx, DWORD PTR _length$[ebp]
	push	edx
	mov	eax, DWORD PTR _inData$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ds$[ebp]
	push	ecx
	call	?swapFormatVersion3@?A0xf15769f3@@YAHPBUUDataSwapper@@PBXHPAXPAW4UErrorCode@@@Z ; `anonymous namespace'::swapFormatVersion3
	add	esp, 20					; 00000014H
	mov	DWORD PTR _collationSize$[ebp], eax
$LN3@ucol_swap_:
; Line 589
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_SUCCESS@@YACW4UErrorCode@@@Z		; U_SUCCESS
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN2@ucol_swap_
; Line 590
	mov	eax, DWORD PTR _headerSize$[ebp]
	add	eax, DWORD PTR _collationSize$[ebp]
	jmp	SHORT $LN11@ucol_swap_
; Line 591
	jmp	SHORT $LN11@ucol_swap_
$LN2@ucol_swap_:
; Line 592
	xor	eax, eax
$LN11@ucol_swap_:
; Line 594
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ucol_swap_56 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0FH@MFHCONKO@ucol_swapInverseUCA?$CI?$CJ?3?5too?5few?5b@ ; `string'
PUBLIC	??_C@_0HI@MDHGHJMJ@ucol_swapInverseUCA?$CI?$CJ?3?5data?5form@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	_ucol_swapInverseUCA_56
;	COMDAT ??_C@_0FH@MFHCONKO@ucol_swapInverseUCA?$CI?$CJ?3?5too?5few?5b@
CONST	SEGMENT
??_C@_0FH@MFHCONKO@ucol_swapInverseUCA?$CI?$CJ?3?5too?5few?5b@ DB 'ucol_s'
	DB	'wapInverseUCA(): too few bytes (%d after header) for inverse '
	DB	'UCA collation data', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0HI@MDHGHJMJ@ucol_swapInverseUCA?$CI?$CJ?3?5data?5form@
CONST	SEGMENT
??_C@_0HI@MDHGHJMJ@ucol_swapInverseUCA?$CI?$CJ?3?5data?5form@ DB 'ucol_sw'
	DB	'apInverseUCA(): data format %02x.%02x.%02x.%02x (format versi'
	DB	'on %02x.%02x) is not an inverse UCA collation file', 0aH, 00H ; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT _ucol_swapInverseUCA_56
_TEXT	SEGMENT
_header$ = -112						; size = 32
_outHeader$ = -72					; size = 4
_inHeader$ = -60					; size = 4
_outBytes$ = -48					; size = 4
_inBytes$ = -36						; size = 4
_headerSize$ = -24					; size = 4
_pInfo$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_ds$ = 8						; size = 4
_inData$ = 12						; size = 4
_length$ = 16						; size = 4
_outData$ = 20						; size = 4
_pErrorCode$ = 24					; size = 4
_ucol_swapInverseUCA_56 PROC				; COMDAT
; Line 600
	push	ebp
	mov	ebp, esp
	sub	esp, 308				; 00000134H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-308]
	mov	ecx, 77					; 0000004dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 609
	mov	DWORD PTR _header$[ebp], 0
	mov	DWORD PTR _header$[ebp+4], 0
	mov	DWORD PTR _header$[ebp+8], 0
	mov	DWORD PTR _header$[ebp+12], 0
	mov	DWORD PTR _header$[ebp+16], 0
	mov	BYTE PTR _header$[ebp+20], 0
	mov	BYTE PTR _header$[ebp+21], 0
	mov	BYTE PTR _header$[ebp+22], 0
	mov	BYTE PTR _header$[ebp+23], 0
	mov	BYTE PTR _header$[ebp+24], 0
	mov	BYTE PTR _header$[ebp+25], 0
	mov	BYTE PTR _header$[ebp+26], 0
	mov	BYTE PTR _header$[ebp+27], 0
	mov	BYTE PTR _header$[ebp+28], 0
	mov	BYTE PTR _header$[ebp+29], 0
	mov	BYTE PTR _header$[ebp+30], 0
	mov	BYTE PTR _header$[ebp+31], 0
; Line 612
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _outData$[ebp]
	push	ecx
	mov	edx, DWORD PTR _length$[ebp]
	push	edx
	mov	eax, DWORD PTR _inData$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ds$[ebp]
	push	ecx
	call	_udata_swapDataHeader_56
	add	esp, 20					; 00000014H
	mov	DWORD PTR _headerSize$[ebp], eax
; Line 613
	cmp	DWORD PTR _pErrorCode$[ebp], 0
	je	SHORT $LN9@ucol_swapI
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN10@ucol_swapI
$LN9@ucol_swapI:
; Line 614
	xor	eax, eax
	jmp	$LN11@ucol_swapI
$LN10@ucol_swapI:
; Line 618
	mov	eax, DWORD PTR _inData$[ebp]
	add	eax, 4
	mov	DWORD PTR _pInfo$[ebp], eax
; Line 626
	mov	eax, DWORD PTR _pInfo$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	cmp	ecx, 73					; 00000049H
	jne	SHORT $LN7@ucol_swapI
	mov	eax, DWORD PTR _pInfo$[ebp]
	movzx	ecx, BYTE PTR [eax+9]
	cmp	ecx, 110				; 0000006eH
	jne	SHORT $LN7@ucol_swapI
	mov	eax, DWORD PTR _pInfo$[ebp]
	movzx	ecx, BYTE PTR [eax+10]
	cmp	ecx, 118				; 00000076H
	jne	SHORT $LN7@ucol_swapI
	mov	eax, DWORD PTR _pInfo$[ebp]
	movzx	ecx, BYTE PTR [eax+11]
	cmp	ecx, 67					; 00000043H
	jne	SHORT $LN7@ucol_swapI
	mov	eax, DWORD PTR _pInfo$[ebp]
	movzx	ecx, BYTE PTR [eax+12]
	cmp	ecx, 2
	jne	SHORT $LN7@ucol_swapI
	mov	eax, DWORD PTR _pInfo$[ebp]
	movzx	ecx, BYTE PTR [eax+13]
	cmp	ecx, 1
	jge	SHORT $LN8@ucol_swapI
$LN7@ucol_swapI:
; Line 630
	mov	eax, DWORD PTR _pInfo$[ebp]
	movzx	ecx, BYTE PTR [eax+13]
	push	ecx
	mov	edx, DWORD PTR _pInfo$[ebp]
	movzx	eax, BYTE PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _pInfo$[ebp]
	movzx	edx, BYTE PTR [ecx+11]
	push	edx
	mov	eax, DWORD PTR _pInfo$[ebp]
	movzx	ecx, BYTE PTR [eax+10]
	push	ecx
	mov	edx, DWORD PTR _pInfo$[ebp]
	movzx	eax, BYTE PTR [edx+9]
	push	eax
	mov	ecx, DWORD PTR _pInfo$[ebp]
	movzx	edx, BYTE PTR [ecx+8]
	push	edx
	push	OFFSET ??_C@_0HI@MDHGHJMJ@ucol_swapInverseUCA?$CI?$CJ?3?5data?5form@
	mov	eax, DWORD PTR _ds$[ebp]
	push	eax
	call	_udata_printError_56
	add	esp, 32					; 00000020H
; Line 631
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 16			; 00000010H
; Line 632
	xor	eax, eax
	jmp	$LN11@ucol_swapI
$LN8@ucol_swapI:
; Line 635
	mov	eax, DWORD PTR _inData$[ebp]
	add	eax, DWORD PTR _headerSize$[ebp]
	mov	DWORD PTR _inBytes$[ebp], eax
; Line 636
	mov	eax, DWORD PTR _outData$[ebp]
	add	eax, DWORD PTR _headerSize$[ebp]
	mov	DWORD PTR _outBytes$[ebp], eax
; Line 638
	mov	eax, DWORD PTR _inBytes$[ebp]
	mov	DWORD PTR _inHeader$[ebp], eax
; Line 639
	mov	eax, DWORD PTR _outBytes$[ebp]
	mov	DWORD PTR _outHeader$[ebp], eax
; Line 647
	cmp	DWORD PTR _length$[ebp], 0
	jge	SHORT $LN6@ucol_swapI
; Line 648
	mov	eax, DWORD PTR _inHeader$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _ds$[ebp]
	push	edx
	call	_udata_readInt32_56
	add	esp, 8
	mov	DWORD PTR _header$[ebp], eax
; Line 649
	jmp	SHORT $LN5@ucol_swapI
$LN6@ucol_swapI:
; Line 652
	mov	eax, DWORD PTR _length$[ebp]
	sub	eax, DWORD PTR _headerSize$[ebp]
	cmp	eax, 32					; 00000020H
	jl	SHORT $LN3@ucol_swapI
	mov	eax, DWORD PTR _inHeader$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _ds$[ebp]
	push	edx
	call	_udata_readInt32_56
	add	esp, 8
	mov	DWORD PTR _header$[ebp], eax
	mov	eax, DWORD PTR _length$[ebp]
	sub	eax, DWORD PTR _headerSize$[ebp]
	cmp	eax, DWORD PTR _header$[ebp]
	jae	SHORT $LN5@ucol_swapI
$LN3@ucol_swapI:
; Line 654
	mov	eax, DWORD PTR _length$[ebp]
	push	eax
	push	OFFSET ??_C@_0FH@MFHCONKO@ucol_swapInverseUCA?$CI?$CJ?3?5too?5few?5b@
	mov	ecx, DWORD PTR _ds$[ebp]
	push	ecx
	call	_udata_printError_56
	add	esp, 12					; 0000000cH
; Line 655
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 8
; Line 656
	xor	eax, eax
	jmp	$LN11@ucol_swapI
$LN5@ucol_swapI:
; Line 659
	cmp	DWORD PTR _length$[ebp], 0
	jl	$LN2@ucol_swapI
; Line 661
	mov	eax, DWORD PTR _inBytes$[ebp]
	cmp	eax, DWORD PTR _outBytes$[ebp]
	je	SHORT $LN1@ucol_swapI
; Line 662
	push	1
	mov	eax, DWORD PTR _inBytes$[ebp]
	push	eax
	call	_uprv_checkValidMemory
	add	esp, 8
	mov	ecx, DWORD PTR _header$[ebp]
	push	ecx
	mov	edx, DWORD PTR _inBytes$[ebp]
	push	edx
	mov	eax, DWORD PTR _outBytes$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@ucol_swapI:
; Line 668
	mov	esi, esp
	mov	eax, DWORD PTR _inHeader$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _ds$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _header$[ebp+4], eax
; Line 669
	mov	esi, esp
	mov	eax, DWORD PTR _inHeader$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _ds$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _header$[ebp+8], eax
; Line 670
	mov	esi, esp
	mov	eax, DWORD PTR _inHeader$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _ds$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _header$[ebp+12], eax
; Line 671
	mov	esi, esp
	mov	eax, DWORD PTR _inHeader$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR _ds$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _header$[ebp+16], eax
; Line 674
	mov	esi, esp
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _outHeader$[ebp]
	push	ecx
	push	20					; 00000014H
	mov	edx, DWORD PTR _inHeader$[ebp]
	push	edx
	mov	eax, DWORD PTR _ds$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ds$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	call	edx
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 678
	mov	esi, esp
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _outBytes$[ebp]
	add	ecx, DWORD PTR _header$[ebp+12]
	push	ecx
	mov	edx, DWORD PTR _header$[ebp+4]
	imul	edx, 3
	shl	edx, 2
	push	edx
	mov	eax, DWORD PTR _inBytes$[ebp]
	add	eax, DWORD PTR _header$[ebp+12]
	push	eax
	mov	ecx, DWORD PTR _ds$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ds$[ebp]
	mov	eax, DWORD PTR [edx+28]
	call	eax
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 682
	mov	esi, esp
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _outBytes$[ebp]
	add	ecx, DWORD PTR _header$[ebp+16]
	push	ecx
	mov	edx, DWORD PTR _header$[ebp+8]
	shl	edx, 1
	push	edx
	mov	eax, DWORD PTR _inBytes$[ebp]
	add	eax, DWORD PTR _header$[ebp+16]
	push	eax
	mov	ecx, DWORD PTR _ds$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ds$[ebp]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@ucol_swapI:
; Line 685
	mov	eax, DWORD PTR _headerSize$[ebp]
	add	eax, DWORD PTR _header$[ebp]
$LN11@ucol_swapI:
; Line 686
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN15@ucol_swapI
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 308				; 00000134H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN15@ucol_swapI:
	DD	1
	DD	$LN14@ucol_swapI
$LN14@ucol_swapI:
	DD	-112					; ffffff90H
	DD	32					; 00000020H
	DD	$LN13@ucol_swapI
$LN13@ucol_swapI:
	DB	104					; 00000068H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
_ucol_swapInverseUCA_56 ENDP
_TEXT	ENDS
END
