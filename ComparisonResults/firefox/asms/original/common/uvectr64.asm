; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\mozilla\intl\icu\source\common\uvectr64.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

_BSS	SEGMENT
?classID@?1??getStaticClassID@UVector64@icu_56@@SAPAXXZ@4DA DB 01H DUP (?) ; `icu_56::UVector64::getStaticClassID'::`2'::classID
_BSS	ENDS
PUBLIC	??2@YAPAXI@Z					; operator new
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File d:\mozilla\intl\icu\source\common\unicode\utypes.h
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT ??2@YAPAXI@Z
_TEXT	SEGMENT
_q$ = -8						; size = 4
___formal$ = 8						; size = 4
??2@YAPAXI@Z PROC					; operator new, COMDAT
; Line 411
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 412
	mov	DWORD PTR _q$[ebp], 0
; Line 413
	mov	eax, DWORD PTR _q$[ebp]
	mov	BYTE PTR [eax], 5
; Line 414
	mov	eax, DWORD PTR _q$[ebp]
; Line 415
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??2@YAPAXI@Z ENDP					; operator new
_TEXT	ENDS
PUBLIC	??3@YAXPAX@Z					; operator delete
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??3@YAXPAX@Z
_TEXT	SEGMENT
_q$ = -8						; size = 4
___formal$ = 8						; size = 4
??3@YAXPAX@Z PROC					; operator delete, COMDAT
; Line 439
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 440
	mov	DWORD PTR _q$[ebp], 0
; Line 441
	mov	eax, DWORD PTR _q$[ebp]
	mov	BYTE PTR [eax], 5
; Line 442
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??3@YAXPAX@Z ENDP					; operator delete
_TEXT	ENDS
PUBLIC	??2UMemory@icu_56@@SAPAXIPAX@Z			; icu_56::UMemory::operator new
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??2UMemory@icu_56@@SAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_ptr$ = 12						; size = 4
??2UMemory@icu_56@@SAPAXIPAX@Z PROC			; icu_56::UMemory::operator new, COMDAT
; File d:\mozilla\intl\icu\source\common\unicode\uobject.h
; Line 161
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR _ptr$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??2UMemory@icu_56@@SAPAXIPAX@Z ENDP			; icu_56::UMemory::operator new
_TEXT	ENDS
PUBLIC	??3UMemory@icu_56@@SAXPAX0@Z			; icu_56::UMemory::operator delete
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??3UMemory@icu_56@@SAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3UMemory@icu_56@@SAXPAX0@Z PROC			; icu_56::UMemory::operator delete, COMDAT
; Line 168
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??3UMemory@icu_56@@SAXPAX0@Z ENDP			; icu_56::UMemory::operator delete
_TEXT	ENDS
PUBLIC	??4UMemory@icu_56@@QAEAAV01@ABV01@@Z		; icu_56::UMemory::operator=
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??4UMemory@icu_56@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___that$ = 8						; size = 4
??4UMemory@icu_56@@QAEAAV01@ABV01@@Z PROC		; icu_56::UMemory::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4UMemory@icu_56@@QAEAAV01@ABV01@@Z ENDP		; icu_56::UMemory::operator=
_TEXT	ENDS
PUBLIC	??_7UObject@icu_56@@6B@				; icu_56::UObject::`vftable'
PUBLIC	??0UObject@icu_56@@QAE@XZ			; icu_56::UObject::UObject
PUBLIC	??_R4UObject@icu_56@@6B@			; icu_56::UObject::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVUObject@icu_56@@@8			; icu_56::UObject `RTTI Type Descriptor'
PUBLIC	??_R3UObject@icu_56@@8				; icu_56::UObject::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2UObject@icu_56@@8				; icu_56::UObject::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@UObject@icu_56@@8			; icu_56::UObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R13?0A@EA@UMemory@icu_56@@8			; icu_56::UMemory::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	??_R0?AVUMemory@icu_56@@@8			; icu_56::UMemory `RTTI Type Descriptor'
PUBLIC	??_R3UMemory@icu_56@@8				; icu_56::UMemory::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2UMemory@icu_56@@8				; icu_56::UMemory::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@UMemory@icu_56@@8			; icu_56::UMemory::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_EUObject@icu_56@@UAEPAXI@Z			; icu_56::UObject::`vector deleting destructor'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?getDynamicClassID@UObject@icu_56@@UBEPAXXZ:PROC ; icu_56::UObject::getDynamicClassID
;	COMDAT ??_R1A@?0A@EA@UMemory@icu_56@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@UMemory@icu_56@@8 DD FLAT:??_R0?AVUMemory@icu_56@@@8 ; icu_56::UMemory::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3UMemory@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_R2UMemory@icu_56@@8
rdata$r	SEGMENT
??_R2UMemory@icu_56@@8 DD FLAT:??_R1A@?0A@EA@UMemory@icu_56@@8 ; icu_56::UMemory::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3UMemory@icu_56@@8
rdata$r	SEGMENT
??_R3UMemory@icu_56@@8 DD 00H				; icu_56::UMemory::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2UMemory@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVUMemory@icu_56@@@8
_DATA	SEGMENT
??_R0?AVUMemory@icu_56@@@8 DD FLAT:??_7type_info@@6B@	; icu_56::UMemory `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVUMemory@icu_56@@', 00H
_DATA	ENDS
;	COMDAT ??_R13?0A@EA@UMemory@icu_56@@8
rdata$r	SEGMENT
??_R13?0A@EA@UMemory@icu_56@@8 DD FLAT:??_R0?AVUMemory@icu_56@@@8 ; icu_56::UMemory::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	00H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3UMemory@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@UObject@icu_56@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@UObject@icu_56@@8 DD FLAT:??_R0?AVUObject@icu_56@@@8 ; icu_56::UObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3UObject@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_R2UObject@icu_56@@8
rdata$r	SEGMENT
??_R2UObject@icu_56@@8 DD FLAT:??_R1A@?0A@EA@UObject@icu_56@@8 ; icu_56::UObject::`RTTI Base Class Array'
	DD	FLAT:??_R13?0A@EA@UMemory@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_R3UObject@icu_56@@8
rdata$r	SEGMENT
??_R3UObject@icu_56@@8 DD 00H				; icu_56::UObject::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2UObject@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVUObject@icu_56@@@8
_DATA	SEGMENT
??_R0?AVUObject@icu_56@@@8 DD FLAT:??_7type_info@@6B@	; icu_56::UObject `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVUObject@icu_56@@', 00H
_DATA	ENDS
;	COMDAT ??_R4UObject@icu_56@@6B@
rdata$r	SEGMENT
??_R4UObject@icu_56@@6B@ DD 00H				; icu_56::UObject::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVUObject@icu_56@@@8
	DD	FLAT:??_R3UObject@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_7UObject@icu_56@@6B@
CONST	SEGMENT
??_7UObject@icu_56@@6B@ DD FLAT:??_R4UObject@icu_56@@6B@ ; icu_56::UObject::`vftable'
	DD	FLAT:??_EUObject@icu_56@@UAEPAXI@Z
	DD	FLAT:?getDynamicClassID@UObject@icu_56@@UBEPAXXZ
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ??0UObject@icu_56@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0UObject@icu_56@@QAE@XZ PROC				; icu_56::UObject::UObject, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7UObject@icu_56@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0UObject@icu_56@@QAE@XZ ENDP				; icu_56::UObject::UObject
_TEXT	ENDS
PUBLIC	??0UObject@icu_56@@QAE@ABV01@@Z			; icu_56::UObject::UObject
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0UObject@icu_56@@QAE@ABV01@@Z
_TEXT	SEGMENT
tv68 = -208						; size = 4
_this$ = -8						; size = 4
___that$ = 8						; size = 4
??0UObject@icu_56@@QAE@ABV01@@Z PROC			; icu_56::UObject::UObject, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	cmp	DWORD PTR ___that$[ebp], 0
	je	SHORT $LN3@UObject
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 4
	mov	DWORD PTR tv68[ebp], eax
	jmp	SHORT $LN4@UObject
$LN3@UObject:
	mov	DWORD PTR tv68[ebp], 0
$LN4@UObject:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7UObject@icu_56@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0UObject@icu_56@@QAE@ABV01@@Z ENDP			; icu_56::UObject::UObject
_TEXT	ENDS
PUBLIC	??4UObject@icu_56@@QAEAAV01@ABV01@@Z		; icu_56::UObject::operator=
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??4UObject@icu_56@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___that$ = 8						; size = 4
??4UObject@icu_56@@QAEAAV01@ABV01@@Z PROC		; icu_56::UObject::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4UObject@icu_56@@QAEAAV01@ABV01@@Z ENDP		; icu_56::UObject::operator=
_TEXT	ENDS
PUBLIC	??_GUObject@icu_56@@UAEPAXI@Z			; icu_56::UObject::`scalar deleting destructor'
EXTRN	??3UMemory@icu_56@@SAXPAX@Z:PROC		; icu_56::UMemory::operator delete
EXTRN	??1UObject@icu_56@@UAE@XZ:PROC			; icu_56::UObject::~UObject
EXTRN	__RTC_CheckEsp:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GUObject@icu_56@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_GUObject@icu_56@@UAEPAXI@Z PROC			; icu_56::UObject::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1UObject@icu_56@@UAE@XZ		; icu_56::UObject::~UObject
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3UMemory@icu_56@@SAXPAX@Z		; icu_56::UMemory::operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GUObject@icu_56@@UAEPAXI@Z ENDP			; icu_56::UObject::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	??_VUMemory@icu_56@@SAXPAX@Z:PROC		; icu_56::UMemory::operator delete[]
EXTRN	??_M@YGXPAXIHP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_EUObject@icu_56@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_EUObject@icu_56@@UAEPAXI@Z PROC			; icu_56::UObject::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector
	push	OFFSET ??1UObject@icu_56@@UAE@XZ	; icu_56::UObject::~UObject
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	push	ecx
	push	4
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@vector
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	push	eax
	call	??_VUMemory@icu_56@@SAXPAX@Z		; icu_56::UMemory::operator delete[]
	add	esp, 4
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN3@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1UObject@icu_56@@UAE@XZ		; icu_56::UObject::~UObject
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3UMemory@icu_56@@SAXPAX@Z		; icu_56::UMemory::operator delete
	add	esp, 4
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_EUObject@icu_56@@UAEPAXI@Z ENDP			; icu_56::UObject::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	?isEmpty@UVector64@icu_56@@QBECXZ		; icu_56::UVector64::isEmpty
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?isEmpty@UVector64@icu_56@@QBECXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?isEmpty@UVector64@icu_56@@QBECXZ PROC			; icu_56::UVector64::isEmpty, COMDAT
; _this$ = ecx
; File d:\mozilla\intl\icu\source\common\uvectr64.h
; Line 125
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	sete	al
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?isEmpty@UVector64@icu_56@@QBECXZ ENDP			; icu_56::UVector64::isEmpty
_TEXT	ENDS
PUBLIC	??1UVector64@icu_56@@UAE@XZ			; icu_56::UVector64::~UVector64
PUBLIC	??_GUVector64@icu_56@@UAEPAXI@Z			; icu_56::UVector64::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GUVector64@icu_56@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_GUVector64@icu_56@@UAEPAXI@Z PROC			; icu_56::UVector64::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1UVector64@icu_56@@UAE@XZ		; icu_56::UVector64::~UVector64
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@2
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3UMemory@icu_56@@SAXPAX@Z		; icu_56::UMemory::operator delete
	add	esp, 4
$LN1@scalar@2:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GUVector64@icu_56@@UAEPAXI@Z ENDP			; icu_56::UVector64::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_EUVector64@icu_56@@UAEPAXI@Z			; icu_56::UVector64::`vector deleting destructor'
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_EUVector64@icu_56@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_EUVector64@icu_56@@UAEPAXI@Z PROC			; icu_56::UVector64::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector@2
	push	OFFSET ??1UVector64@icu_56@@UAE@XZ	; icu_56::UVector64::~UVector64
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	push	ecx
	push	20					; 00000014H
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@vector@2
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	push	eax
	call	??_VUMemory@icu_56@@SAXPAX@Z		; icu_56::UMemory::operator delete[]
	add	esp, 4
$LN2@vector@2:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector@2
$LN3@vector@2:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1UVector64@icu_56@@UAE@XZ		; icu_56::UVector64::~UVector64
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector@2
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3UMemory@icu_56@@SAXPAX@Z		; icu_56::UMemory::operator delete
	add	esp, 4
$LN1@vector@2:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@2:
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_EUVector64@icu_56@@UAEPAXI@Z ENDP			; icu_56::UVector64::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	?expandCapacity@UVector64@icu_56@@QAECHAAW4UErrorCode@@@Z ; icu_56::UVector64::expandCapacity
PUBLIC	?ensureCapacity@UVector64@icu_56@@QAECHAAW4UErrorCode@@@Z ; icu_56::UVector64::ensureCapacity
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?ensureCapacity@UVector64@icu_56@@QAECHAAW4UErrorCode@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_minimumCapacity$ = 8					; size = 4
_status$ = 12						; size = 4
?ensureCapacity@UVector64@icu_56@@QAECHAAW4UErrorCode@@@Z PROC ; icu_56::UVector64::ensureCapacity, COMDAT
; _this$ = ecx
; Line 202
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 203
	cmp	DWORD PTR _minimumCapacity$[ebp], 0
	jl	SHORT $LN2@ensureCapa
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	cmp	ecx, DWORD PTR _minimumCapacity$[ebp]
	jl	SHORT $LN2@ensureCapa
; Line 204
	mov	al, 1
	jmp	SHORT $LN3@ensureCapa
; Line 205
	jmp	SHORT $LN3@ensureCapa
$LN2@ensureCapa:
; Line 206
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _minimumCapacity$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?expandCapacity@UVector64@icu_56@@QAECHAAW4UErrorCode@@@Z ; icu_56::UVector64::expandCapacity
$LN3@ensureCapa:
; Line 208
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?ensureCapacity@UVector64@icu_56@@QAECHAAW4UErrorCode@@@Z ENDP ; icu_56::UVector64::ensureCapacity
_TEXT	ENDS
PUBLIC	?elementAti@UVector64@icu_56@@QBE_JH@Z		; icu_56::UVector64::elementAti
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?elementAti@UVector64@icu_56@@QBE_JH@Z
_TEXT	SEGMENT
tv70 = -212						; size = 8
_this$ = -8						; size = 4
_index$ = 8						; size = 4
?elementAti@UVector64@icu_56@@QBE_JH@Z PROC		; icu_56::UVector64::elementAti, COMDAT
; _this$ = ecx
; Line 210
	push	ebp
	mov	ebp, esp
	sub	esp, 212				; 000000d4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-212]
	mov	ecx, 53					; 00000035H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 211
	cmp	DWORD PTR _index$[ebp], 0
	jl	SHORT $LN3@elementAti
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _index$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jge	SHORT $LN3@elementAti
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR _index$[ebp]
	mov	edx, DWORD PTR [eax+ecx*8]
	mov	DWORD PTR tv70[ebp], edx
	mov	eax, DWORD PTR [eax+ecx*8+4]
	mov	DWORD PTR tv70[ebp+4], eax
	jmp	SHORT $LN4@elementAti
$LN3@elementAti:
	mov	DWORD PTR tv70[ebp], 0
	mov	DWORD PTR tv70[ebp+4], 0
$LN4@elementAti:
	mov	eax, DWORD PTR tv70[ebp]
	mov	edx, DWORD PTR tv70[ebp+4]
; Line 212
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?elementAti@UVector64@icu_56@@QBE_JH@Z ENDP		; icu_56::UVector64::elementAti
_TEXT	ENDS
PUBLIC	?addElement@UVector64@icu_56@@QAEX_JAAW4UErrorCode@@@Z ; icu_56::UVector64::addElement
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?addElement@UVector64@icu_56@@QAEX_JAAW4UErrorCode@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_elem$ = 8						; size = 8
_status$ = 16						; size = 4
?addElement@UVector64@icu_56@@QAEX_JAAW4UErrorCode@@@Z PROC ; icu_56::UVector64::addElement, COMDAT
; _this$ = ecx
; Line 215
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 216
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ensureCapacity@UVector64@icu_56@@QAECHAAW4UErrorCode@@@Z ; icu_56::UVector64::ensureCapacity
	movsx	eax, al
	test	eax, eax
	je	SHORT $LN2@addElement
; Line 217
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	edx, DWORD PTR _elem$[ebp]
	mov	DWORD PTR [eax+ecx*8], edx
	mov	edx, DWORD PTR _elem$[ebp+4]
	mov	DWORD PTR [eax+ecx*8+4], edx
; Line 218
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx
$LN2@addElement:
; Line 220
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?addElement@UVector64@icu_56@@QAEX_JAAW4UErrorCode@@@Z ENDP ; icu_56::UVector64::addElement
_TEXT	ENDS
PUBLIC	?reserveBlock@UVector64@icu_56@@QAEPA_JHAAW4UErrorCode@@@Z ; icu_56::UVector64::reserveBlock
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?reserveBlock@UVector64@icu_56@@QAEPA_JHAAW4UErrorCode@@@Z
_TEXT	SEGMENT
_rp$ = -20						; size = 4
_this$ = -8						; size = 4
_size$ = 8						; size = 4
_status$ = 12						; size = 4
?reserveBlock@UVector64@icu_56@@QAEPA_JHAAW4UErrorCode@@@Z PROC ; icu_56::UVector64::reserveBlock, COMDAT
; _this$ = ecx
; Line 222
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 223
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, DWORD PTR _size$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ensureCapacity@UVector64@icu_56@@QAECHAAW4UErrorCode@@@Z ; icu_56::UVector64::ensureCapacity
	movsx	eax, al
	test	eax, eax
	jne	SHORT $LN1@reserveBlo
; Line 224
	xor	eax, eax
	jmp	SHORT $LN2@reserveBlo
$LN1@reserveBlo:
; Line 226
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	lea	ecx, DWORD PTR [eax+ecx*8]
	mov	DWORD PTR _rp$[ebp], ecx
; Line 227
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, DWORD PTR _size$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx
; Line 228
	mov	eax, DWORD PTR _rp$[ebp]
$LN2@reserveBlo:
; Line 229
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?reserveBlock@UVector64@icu_56@@QAEPA_JHAAW4UErrorCode@@@Z ENDP ; icu_56::UVector64::reserveBlock
_TEXT	ENDS
PUBLIC	??_C@_1BM@FLCAFPEE@?$AAc?$AAo?$AAu?$AAn?$AAt?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAs?$AAi?$AAz?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_C@_1FK@CCAJPJF@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@ ; `string'
PUBLIC	?__LINE__Var@?1??popFrame@UVector64@icu_56@@QAEPA_JH@Z@4JA ; `icu_56::UVector64::popFrame'::`2'::__LINE__Var
PUBLIC	?popFrame@UVector64@icu_56@@QAEPA_JH@Z		; icu_56::UVector64::popFrame
EXTRN	__imp___wassert:PROC
;	COMDAT ??_C@_1BM@FLCAFPEE@?$AAc?$AAo?$AAu?$AAn?$AAt?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAs?$AAi?$AAz?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1BM@FLCAFPEE@?$AAc?$AAo?$AAu?$AAn?$AAt?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAs?$AAi?$AAz?$AAe?$AA?$AA@ DB 'c'
	DB	00H, 'o', 00H, 'u', 00H, 'n', 00H, 't', 00H, ' ', 00H, '>', 00H
	DB	'=', 00H, ' ', 00H, 's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1FK@CCAJPJF@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@
CONST	SEGMENT
??_C@_1FK@CCAJPJF@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@ DB 'd'
	DB	00H, ':', 00H, '\', 00H, 'm', 00H, 'o', 00H, 'z', 00H, 'i', 00H
	DB	'l', 00H, 'l', 00H, 'a', 00H, '\', 00H, 'i', 00H, 'n', 00H, 't'
	DB	00H, 'l', 00H, '\', 00H, 'i', 00H, 'c', 00H, 'u', 00H, '\', 00H
	DB	's', 00H, 'o', 00H, 'u', 00H, 'r', 00H, 'c', 00H, 'e', 00H, '\'
	DB	00H, 'c', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'o', 00H, 'n', 00H
	DB	'\', 00H, 'u', 00H, 'v', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'r'
	DB	00H, '6', 00H, '4', 00H, '.', 00H, 'h', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??popFrame@UVector64@icu_56@@QAEPA_JH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??popFrame@UVector64@icu_56@@QAEPA_JH@Z@4JA DD 0e7H ; `icu_56::UVector64::popFrame'::`2'::__LINE__Var
; Function compile flags: /Odtp /RTCsu /ZI
_DATA	ENDS
;	COMDAT ?popFrame@UVector64@icu_56@@QAEPA_JH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_size$ = 8						; size = 4
?popFrame@UVector64@icu_56@@QAEPA_JH@Z PROC		; icu_56::UVector64::popFrame, COMDAT
; _this$ = ecx
; Line 231
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 232
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cmp	ecx, DWORD PTR _size$[ebp]
	jge	SHORT $LN4@popFrame
	mov	edx, DWORD PTR ?__LINE__Var@?1??popFrame@UVector64@icu_56@@QAEPA_JH@Z@4JA
	add	edx, 1
	mov	esi, esp
	push	edx
	push	OFFSET ??_C@_1FK@CCAJPJF@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@
	push	OFFSET ??_C@_1BM@FLCAFPEE@?$AAc?$AAo?$AAu?$AAn?$AAt?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAs?$AAi?$AAz?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN4@popFrame:
; Line 233
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, DWORD PTR _size$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx
; Line 234
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jge	SHORT $LN1@popFrame
; Line 235
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
$LN1@popFrame:
; Line 237
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	lea	eax, DWORD PTR [eax+ecx*8]
	mov	ecx, DWORD PTR _size$[ebp]
	shl	ecx, 3
	sub	eax, ecx
; Line 238
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?popFrame@UVector64@icu_56@@QAEPA_JH@Z ENDP		; icu_56::UVector64::popFrame
_TEXT	ENDS
PUBLIC	?size@UVector64@icu_56@@QBEHXZ			; icu_56::UVector64::size
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?size@UVector64@icu_56@@QBEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?size@UVector64@icu_56@@QBEHXZ PROC			; icu_56::UVector64::size, COMDAT
; _this$ = ecx
; Line 242
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 243
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
; Line 244
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?size@UVector64@icu_56@@QBEHXZ ENDP			; icu_56::UVector64::size
_TEXT	ENDS
PUBLIC	?lastElementi@UVector64@icu_56@@QBE_JXZ		; icu_56::UVector64::lastElementi
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?lastElementi@UVector64@icu_56@@QBE_JXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?lastElementi@UVector64@icu_56@@QBE_JXZ PROC		; icu_56::UVector64::lastElementi, COMDAT
; _this$ = ecx
; Line 246
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 247
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?elementAti@UVector64@icu_56@@QBE_JH@Z	; icu_56::UVector64::elementAti
; Line 248
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?lastElementi@UVector64@icu_56@@QBE_JXZ ENDP		; icu_56::UVector64::lastElementi
_TEXT	ENDS
PUBLIC	??8UVector64@icu_56@@QAECABV01@@Z		; icu_56::UVector64::operator==
PUBLIC	??9UVector64@icu_56@@QAECABV01@@Z		; icu_56::UVector64::operator!=
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??9UVector64@icu_56@@QAECABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_other$ = 8						; size = 4
??9UVector64@icu_56@@QAECABV01@@Z PROC			; icu_56::UVector64::operator!=, COMDAT
; _this$ = ecx
; Line 250
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 251
	mov	eax, DWORD PTR _other$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8UVector64@icu_56@@QAECABV01@@Z	; icu_56::UVector64::operator==
	movsx	ecx, al
	test	ecx, ecx
	sete	al
; Line 252
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??9UVector64@icu_56@@QAECABV01@@Z ENDP			; icu_56::UVector64::operator!=
_TEXT	ENDS
PUBLIC	?getBuffer@UVector64@icu_56@@QBEPA_JXZ		; icu_56::UVector64::getBuffer
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?getBuffer@UVector64@icu_56@@QBEPA_JXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?getBuffer@UVector64@icu_56@@QBEPA_JXZ PROC		; icu_56::UVector64::getBuffer, COMDAT
; _this$ = ecx
; Line 254
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 255
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]
; Line 256
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?getBuffer@UVector64@icu_56@@QBEPA_JXZ ENDP		; icu_56::UVector64::getBuffer
_TEXT	ENDS
PUBLIC	?push@UVector64@icu_56@@QAE_J_JAAW4UErrorCode@@@Z ; icu_56::UVector64::push
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?push@UVector64@icu_56@@QAE_J_JAAW4UErrorCode@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_i$ = 8							; size = 8
_status$ = 16						; size = 4
?push@UVector64@icu_56@@QAE_J_JAAW4UErrorCode@@@Z PROC	; icu_56::UVector64::push, COMDAT
; _this$ = ecx
; Line 261
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 262
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?addElement@UVector64@icu_56@@QAEX_JAAW4UErrorCode@@@Z ; icu_56::UVector64::addElement
; Line 263
	mov	eax, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _i$[ebp+4]
; Line 264
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?push@UVector64@icu_56@@QAE_J_JAAW4UErrorCode@@@Z ENDP	; icu_56::UVector64::push
_TEXT	ENDS
PUBLIC	?popi@UVector64@icu_56@@QAE_JXZ			; icu_56::UVector64::popi
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?popi@UVector64@icu_56@@QAE_JXZ
_TEXT	SEGMENT
_result$ = -24						; size = 8
_this$ = -8						; size = 4
?popi@UVector64@icu_56@@QAE_JXZ PROC			; icu_56::UVector64::popi, COMDAT
; _this$ = ecx
; Line 266
	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 267
	mov	DWORD PTR _result$[ebp], 0
	mov	DWORD PTR _result$[ebp+4], 0
; Line 268
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jle	SHORT $LN1@popi
; Line 269
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx
; Line 270
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	edx, DWORD PTR [eax+ecx*8]
	mov	DWORD PTR _result$[ebp], edx
	mov	eax, DWORD PTR [eax+ecx*8+4]
	mov	DWORD PTR _result$[ebp+4], eax
$LN1@popi:
; Line 272
	mov	eax, DWORD PTR _result$[ebp]
	mov	edx, DWORD PTR _result$[ebp+4]
; Line 273
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?popi@UVector64@icu_56@@QAE_JXZ ENDP			; icu_56::UVector64::popi
_TEXT	ENDS
PUBLIC	?getStaticClassID@UVector64@icu_56@@SAPAXXZ	; icu_56::UVector64::getStaticClassID
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?getStaticClassID@UVector64@icu_56@@SAPAXXZ
_TEXT	SEGMENT
?getStaticClassID@UVector64@icu_56@@SAPAXXZ PROC	; icu_56::UVector64::getStaticClassID, COMDAT
; File d:\mozilla\intl\icu\source\common\uvectr64.cpp
; Line 22
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, OFFSET ?classID@?1??getStaticClassID@UVector64@icu_56@@SAPAXXZ@4DA
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?getStaticClassID@UVector64@icu_56@@SAPAXXZ ENDP	; icu_56::UVector64::getStaticClassID
_TEXT	ENDS
PUBLIC	?getDynamicClassID@UVector64@icu_56@@UBEPAXXZ	; icu_56::UVector64::getDynamicClassID
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?getDynamicClassID@UVector64@icu_56@@UBEPAXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?getDynamicClassID@UVector64@icu_56@@UBEPAXXZ PROC	; icu_56::UVector64::getDynamicClassID, COMDAT
; _this$ = ecx
; Line 22
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	call	?getStaticClassID@UVector64@icu_56@@SAPAXXZ ; icu_56::UVector64::getStaticClassID
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?getDynamicClassID@UVector64@icu_56@@UBEPAXXZ ENDP	; icu_56::UVector64::getDynamicClassID
_TEXT	ENDS
PUBLIC	?_init@UVector64@icu_56@@AAEXHAAW4UErrorCode@@@Z ; icu_56::UVector64::_init
PUBLIC	??_7UVector64@icu_56@@6B@			; icu_56::UVector64::`vftable'
PUBLIC	??0UVector64@icu_56@@QAE@AAW4UErrorCode@@@Z	; icu_56::UVector64::UVector64
PUBLIC	??_R4UVector64@icu_56@@6B@			; icu_56::UVector64::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVUVector64@icu_56@@@8			; icu_56::UVector64 `RTTI Type Descriptor'
PUBLIC	??_R3UVector64@icu_56@@8			; icu_56::UVector64::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2UVector64@icu_56@@8			; icu_56::UVector64::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@UVector64@icu_56@@8		; icu_56::UVector64::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
;	COMDAT ??_R1A@?0A@EA@UVector64@icu_56@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@UVector64@icu_56@@8 DD FLAT:??_R0?AVUVector64@icu_56@@@8 ; icu_56::UVector64::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3UVector64@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_R2UVector64@icu_56@@8
rdata$r	SEGMENT
??_R2UVector64@icu_56@@8 DD FLAT:??_R1A@?0A@EA@UVector64@icu_56@@8 ; icu_56::UVector64::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@UObject@icu_56@@8
	DD	FLAT:??_R13?0A@EA@UMemory@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_R3UVector64@icu_56@@8
rdata$r	SEGMENT
??_R3UVector64@icu_56@@8 DD 00H				; icu_56::UVector64::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2UVector64@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVUVector64@icu_56@@@8
_DATA	SEGMENT
??_R0?AVUVector64@icu_56@@@8 DD FLAT:??_7type_info@@6B@	; icu_56::UVector64 `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVUVector64@icu_56@@', 00H
_DATA	ENDS
;	COMDAT ??_R4UVector64@icu_56@@6B@
rdata$r	SEGMENT
??_R4UVector64@icu_56@@6B@ DD 00H			; icu_56::UVector64::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVUVector64@icu_56@@@8
	DD	FLAT:??_R3UVector64@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_7UVector64@icu_56@@6B@
CONST	SEGMENT
??_7UVector64@icu_56@@6B@ DD FLAT:??_R4UVector64@icu_56@@6B@ ; icu_56::UVector64::`vftable'
	DD	FLAT:??_EUVector64@icu_56@@UAEPAXI@Z
	DD	FLAT:?getDynamicClassID@UVector64@icu_56@@UBEPAXXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0UVector64@icu_56@@QAE@AAW4UErrorCode@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0UVector64@icu_56@@QAE@AAW4UErrorCode@@@Z$0
__ehfuncinfo$??0UVector64@icu_56@@QAE@AAW4UErrorCode@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0UVector64@icu_56@@QAE@AAW4UErrorCode@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??0UVector64@icu_56@@QAE@AAW4UErrorCode@@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_status$ = 8						; size = 4
??0UVector64@icu_56@@QAE@AAW4UErrorCode@@@Z PROC	; icu_56::UVector64::UVector64, COMDAT
; _this$ = ecx
; Line 29
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0UVector64@icu_56@@QAE@AAW4UErrorCode@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0UObject@icu_56@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7UVector64@icu_56@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0
; Line 30
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_init@UVector64@icu_56@@AAEXHAAW4UErrorCode@@@Z ; icu_56::UVector64::_init
; Line 31
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0UVector64@icu_56@@QAE@AAW4UErrorCode@@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1UObject@icu_56@@UAE@XZ		; icu_56::UObject::~UObject
__ehhandler$??0UVector64@icu_56@@QAE@AAW4UErrorCode@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0UVector64@icu_56@@QAE@AAW4UErrorCode@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0UVector64@icu_56@@QAE@AAW4UErrorCode@@@Z ENDP	; icu_56::UVector64::UVector64
PUBLIC	??0UVector64@icu_56@@QAE@HAAW4UErrorCode@@@Z	; icu_56::UVector64::UVector64
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0UVector64@icu_56@@QAE@HAAW4UErrorCode@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0UVector64@icu_56@@QAE@HAAW4UErrorCode@@@Z$0
__ehfuncinfo$??0UVector64@icu_56@@QAE@HAAW4UErrorCode@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0UVector64@icu_56@@QAE@HAAW4UErrorCode@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??0UVector64@icu_56@@QAE@HAAW4UErrorCode@@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_initialCapacity$ = 8					; size = 4
_status$ = 12						; size = 4
??0UVector64@icu_56@@QAE@HAAW4UErrorCode@@@Z PROC	; icu_56::UVector64::UVector64, COMDAT
; _this$ = ecx
; Line 38
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0UVector64@icu_56@@QAE@HAAW4UErrorCode@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0UObject@icu_56@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7UVector64@icu_56@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0
; Line 39
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _initialCapacity$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_init@UVector64@icu_56@@AAEXHAAW4UErrorCode@@@Z ; icu_56::UVector64::_init
; Line 40
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0UVector64@icu_56@@QAE@HAAW4UErrorCode@@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1UObject@icu_56@@UAE@XZ		; icu_56::UObject::~UObject
__ehhandler$??0UVector64@icu_56@@QAE@HAAW4UErrorCode@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0UVector64@icu_56@@QAE@HAAW4UErrorCode@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0UVector64@icu_56@@QAE@HAAW4UErrorCode@@@Z ENDP	; icu_56::UVector64::UVector64
EXTRN	_uprv_malloc_56:PROC
EXTRN	_uprv_min_56:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?_init@UVector64@icu_56@@AAEXHAAW4UErrorCode@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_initialCapacity$ = 8					; size = 4
_status$ = 12						; size = 4
?_init@UVector64@icu_56@@AAEXHAAW4UErrorCode@@@Z PROC	; icu_56::UVector64::_init, COMDAT
; _this$ = ecx
; Line 44
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 46
	cmp	DWORD PTR _initialCapacity$[ebp], 1
	jge	SHORT $LN5@init
; Line 47
	mov	DWORD PTR _initialCapacity$[ebp], 8
$LN5@init:
; Line 49
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jle	SHORT $LN4@init
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	cmp	ecx, DWORD PTR _initialCapacity$[ebp]
	jge	SHORT $LN4@init
; Line 50
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _initialCapacity$[ebp], ecx
$LN4@init:
; Line 52
	cmp	DWORD PTR _initialCapacity$[ebp], 268435455 ; 0fffffffH
	jle	SHORT $LN3@init
; Line 53
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	push	8
	call	_uprv_min_56
	add	esp, 8
	mov	DWORD PTR _initialCapacity$[ebp], eax
$LN3@init:
; Line 55
	mov	eax, DWORD PTR _initialCapacity$[ebp]
	shl	eax, 3
	push	eax
	call	_uprv_malloc_56
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax
; Line 56
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+16], 0
	jne	SHORT $LN2@init
; Line 57
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 7
; Line 58
	jmp	SHORT $LN6@init
$LN2@init:
; Line 59
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _initialCapacity$[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN6@init:
; Line 61
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?_init@UVector64@icu_56@@AAEXHAAW4UErrorCode@@@Z ENDP	; icu_56::UVector64::_init
_TEXT	ENDS
EXTRN	_uprv_free_56:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1UVector64@icu_56@@UAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1UVector64@icu_56@@UAE@XZ PROC			; icu_56::UVector64::~UVector64, COMDAT
; _this$ = ecx
; Line 63
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7UVector64@icu_56@@6B@
; Line 64
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	call	_uprv_free_56
	add	esp, 4
; Line 65
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0
; Line 66
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1UObject@icu_56@@UAE@XZ		; icu_56::UObject::~UObject
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1UVector64@icu_56@@UAE@XZ ENDP			; icu_56::UVector64::~UVector64
_TEXT	ENDS
PUBLIC	?setSize@UVector64@icu_56@@QAEXH@Z		; icu_56::UVector64::setSize
PUBLIC	?assign@UVector64@icu_56@@QAEXABV12@AAW4UErrorCode@@@Z ; icu_56::UVector64::assign
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?assign@UVector64@icu_56@@QAEXABV12@AAW4UErrorCode@@@Z
_TEXT	SEGMENT
_i$7948 = -20						; size = 4
_this$ = -8						; size = 4
_other$ = 8						; size = 4
_ec$ = 12						; size = 4
?assign@UVector64@icu_56@@QAEXABV12@AAW4UErrorCode@@@Z PROC ; icu_56::UVector64::assign, COMDAT
; _this$ = ecx
; Line 71
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 72
	mov	eax, DWORD PTR _ec$[ebp]
	push	eax
	mov	ecx, DWORD PTR _other$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ensureCapacity@UVector64@icu_56@@QAECHAAW4UErrorCode@@@Z ; icu_56::UVector64::ensureCapacity
	movsx	eax, al
	test	eax, eax
	je	SHORT $LN5@assign
; Line 73
	mov	eax, DWORD PTR _other$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?setSize@UVector64@icu_56@@QAEXH@Z	; icu_56::UVector64::setSize
; Line 74
	mov	DWORD PTR _i$7948[ebp], 0
	jmp	SHORT $LN3@assign
$LN2@assign:
	mov	eax, DWORD PTR _i$7948[ebp]
	add	eax, 1
	mov	DWORD PTR _i$7948[ebp], eax
$LN3@assign:
	mov	eax, DWORD PTR _other$[ebp]
	mov	ecx, DWORD PTR _i$7948[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jge	SHORT $LN5@assign
; Line 75
	mov	eax, DWORD PTR _other$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	edx, DWORD PTR _i$7948[ebp]
	mov	esi, DWORD PTR _i$7948[ebp]
	mov	edi, DWORD PTR [ecx+esi*8]
	mov	DWORD PTR [eax+edx*8], edi
	mov	ecx, DWORD PTR [ecx+esi*8+4]
	mov	DWORD PTR [eax+edx*8+4], ecx
; Line 76
	jmp	SHORT $LN2@assign
$LN5@assign:
; Line 78
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?assign@UVector64@icu_56@@QAEXABV12@AAW4UErrorCode@@@Z ENDP ; icu_56::UVector64::assign
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??8UVector64@icu_56@@QAECABV01@@Z
_TEXT	SEGMENT
tv93 = -232						; size = 4
tv92 = -228						; size = 4
tv91 = -224						; size = 4
tv90 = -220						; size = 4
_i$ = -20						; size = 4
_this$ = -8						; size = 4
_other$ = 8						; size = 4
??8UVector64@icu_56@@QAECABV01@@Z PROC			; icu_56::UVector64::operator==, COMDAT
; _this$ = ecx
; Line 81
	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 83
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _other$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+4]
	je	SHORT $LN5@operator
	xor	al, al
	jmp	$LN6@operator
$LN5@operator:
; Line 84
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@operator:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jge	SHORT $LN2@operator
; Line 85
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _other$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	edx, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _i$[ebp]
	mov	DWORD PTR tv90[ebp], ecx
	mov	DWORD PTR tv91[ebp], edx
	mov	DWORD PTR tv92[ebp], eax
	mov	DWORD PTR tv93[ebp], esi
	mov	eax, DWORD PTR tv91[ebp]
	mov	ecx, DWORD PTR tv90[ebp]
	mov	edx, DWORD PTR tv93[ebp]
	mov	esi, DWORD PTR tv92[ebp]
	mov	eax, DWORD PTR [ecx+eax*8]
	cmp	eax, DWORD PTR [esi+edx*8]
	jne	SHORT $LN8@operator
	mov	ecx, DWORD PTR tv91[ebp]
	mov	edx, DWORD PTR tv90[ebp]
	mov	eax, DWORD PTR tv93[ebp]
	mov	esi, DWORD PTR tv92[ebp]
	mov	ecx, DWORD PTR [edx+ecx*8+4]
	cmp	ecx, DWORD PTR [esi+eax*8+4]
	je	SHORT $LN1@operator
$LN8@operator:
; Line 86
	xor	al, al
	jmp	SHORT $LN6@operator
$LN1@operator:
; Line 88
	jmp	$LN3@operator
$LN2@operator:
; Line 89
	mov	al, 1
$LN6@operator:
; Line 90
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??8UVector64@icu_56@@QAECABV01@@Z ENDP			; icu_56::UVector64::operator==
_TEXT	ENDS
PUBLIC	?setElementAt@UVector64@icu_56@@QAEX_JH@Z	; icu_56::UVector64::setElementAt
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?setElementAt@UVector64@icu_56@@QAEX_JH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_elem$ = 8						; size = 8
_index$ = 16						; size = 4
?setElementAt@UVector64@icu_56@@QAEX_JH@Z PROC		; icu_56::UVector64::setElementAt, COMDAT
; _this$ = ecx
; Line 93
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 94
	cmp	DWORD PTR _index$[ebp], 0
	jl	SHORT $LN2@setElement
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _index$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jge	SHORT $LN2@setElement
; Line 95
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _index$[ebp]
	mov	eax, DWORD PTR _elem$[ebp]
	mov	DWORD PTR [ecx+edx*8], eax
	mov	eax, DWORD PTR _elem$[ebp+4]
	mov	DWORD PTR [ecx+edx*8+4], eax
$LN2@setElement:
; Line 98
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?setElementAt@UVector64@icu_56@@QAEX_JH@Z ENDP		; icu_56::UVector64::setElementAt
_TEXT	ENDS
PUBLIC	?insertElementAt@UVector64@icu_56@@QAEX_JHAAW4UErrorCode@@@Z ; icu_56::UVector64::insertElementAt
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?insertElementAt@UVector64@icu_56@@QAEX_JHAAW4UErrorCode@@@Z
_TEXT	SEGMENT
_i$7975 = -20						; size = 4
_this$ = -8						; size = 4
_elem$ = 8						; size = 8
_index$ = 16						; size = 4
_status$ = 20						; size = 4
?insertElementAt@UVector64@icu_56@@QAEX_JHAAW4UErrorCode@@@Z PROC ; icu_56::UVector64::insertElementAt, COMDAT
; _this$ = ecx
; Line 100
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 102
	cmp	DWORD PTR _index$[ebp], 0
	jl	$LN5@insertElem
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _index$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jg	$LN5@insertElem
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ensureCapacity@UVector64@icu_56@@QAECHAAW4UErrorCode@@@Z ; icu_56::UVector64::ensureCapacity
	movsx	eax, al
	test	eax, eax
	je	SHORT $LN5@insertElem
; Line 103
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _i$7975[ebp], ecx
	jmp	SHORT $LN3@insertElem
$LN2@insertElem:
	mov	eax, DWORD PTR _i$7975[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$7975[ebp], eax
$LN3@insertElem:
	mov	eax, DWORD PTR _i$7975[ebp]
	cmp	eax, DWORD PTR _index$[ebp]
	jle	SHORT $LN1@insertElem
; Line 104
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	edx, DWORD PTR _i$7975[ebp]
	mov	esi, DWORD PTR _i$7975[ebp]
	mov	edi, DWORD PTR [ecx+esi*8-8]
	mov	DWORD PTR [eax+edx*8], edi
	mov	ecx, DWORD PTR [ecx+esi*8-4]
	mov	DWORD PTR [eax+edx*8+4], ecx
; Line 105
	jmp	SHORT $LN2@insertElem
$LN1@insertElem:
; Line 106
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _index$[ebp]
	mov	eax, DWORD PTR _elem$[ebp]
	mov	DWORD PTR [ecx+edx*8], eax
	mov	eax, DWORD PTR _elem$[ebp+4]
	mov	DWORD PTR [ecx+edx*8+4], eax
; Line 107
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx
$LN5@insertElem:
; Line 110
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?insertElementAt@UVector64@icu_56@@QAEX_JHAAW4UErrorCode@@@Z ENDP ; icu_56::UVector64::insertElementAt
_TEXT	ENDS
PUBLIC	?removeAllElements@UVector64@icu_56@@QAEXXZ	; icu_56::UVector64::removeAllElements
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?removeAllElements@UVector64@icu_56@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?removeAllElements@UVector64@icu_56@@QAEXXZ PROC	; icu_56::UVector64::removeAllElements, COMDAT
; _this$ = ecx
; Line 112
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 113
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
; Line 114
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?removeAllElements@UVector64@icu_56@@QAEXXZ ENDP	; icu_56::UVector64::removeAllElements
_TEXT	ENDS
EXTRN	_uprv_realloc_56:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?expandCapacity@UVector64@icu_56@@QAECHAAW4UErrorCode@@@Z
_TEXT	SEGMENT
_newElems$ = -32					; size = 4
_newCap$ = -20						; size = 4
_this$ = -8						; size = 4
_minimumCapacity$ = 8					; size = 4
_status$ = 12						; size = 4
?expandCapacity@UVector64@icu_56@@QAECHAAW4UErrorCode@@@Z PROC ; icu_56::UVector64::expandCapacity, COMDAT
; _this$ = ecx
; Line 116
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 117
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN9@expandCapa
; Line 118
	xor	al, al
	jmp	$LN10@expandCapa
$LN9@expandCapa:
; Line 120
	cmp	DWORD PTR _minimumCapacity$[ebp], 0
	jge	SHORT $LN8@expandCapa
; Line 121
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 1
; Line 122
	xor	al, al
	jmp	$LN10@expandCapa
$LN8@expandCapa:
; Line 124
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	cmp	ecx, DWORD PTR _minimumCapacity$[ebp]
	jl	SHORT $LN7@expandCapa
; Line 125
	mov	al, 1
	jmp	$LN10@expandCapa
$LN7@expandCapa:
; Line 127
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jle	SHORT $LN6@expandCapa
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _minimumCapacity$[ebp]
	cmp	ecx, DWORD PTR [eax+12]
	jle	SHORT $LN6@expandCapa
; Line 128
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
; Line 129
	xor	al, al
	jmp	$LN10@expandCapa
$LN6@expandCapa:
; Line 131
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 1073741823		; 3fffffffH
	jle	SHORT $LN5@expandCapa
; Line 132
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 1
; Line 133
	xor	al, al
	jmp	$LN10@expandCapa
$LN5@expandCapa:
; Line 135
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	shl	ecx, 1
	mov	DWORD PTR _newCap$[ebp], ecx
; Line 136
	mov	eax, DWORD PTR _newCap$[ebp]
	cmp	eax, DWORD PTR _minimumCapacity$[ebp]
	jge	SHORT $LN4@expandCapa
; Line 137
	mov	eax, DWORD PTR _minimumCapacity$[ebp]
	mov	DWORD PTR _newCap$[ebp], eax
$LN4@expandCapa:
; Line 139
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jle	SHORT $LN3@expandCapa
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newCap$[ebp]
	cmp	ecx, DWORD PTR [eax+12]
	jle	SHORT $LN3@expandCapa
; Line 140
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _newCap$[ebp], ecx
$LN3@expandCapa:
; Line 142
	cmp	DWORD PTR _newCap$[ebp], 268435455	; 0fffffffH
	jle	SHORT $LN2@expandCapa
; Line 144
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 1
; Line 145
	xor	al, al
	jmp	SHORT $LN10@expandCapa
$LN2@expandCapa:
; Line 147
	mov	eax, DWORD PTR _newCap$[ebp]
	shl	eax, 3
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	call	_uprv_realloc_56
	add	esp, 8
	mov	DWORD PTR _newElems$[ebp], eax
; Line 148
	cmp	DWORD PTR _newElems$[ebp], 0
	jne	SHORT $LN1@expandCapa
; Line 150
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax], 7
; Line 151
	xor	al, al
	jmp	SHORT $LN10@expandCapa
$LN1@expandCapa:
; Line 153
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newElems$[ebp]
	mov	DWORD PTR [eax+16], ecx
; Line 154
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newCap$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 155
	mov	al, 1
$LN10@expandCapa:
; Line 156
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?expandCapacity@UVector64@icu_56@@QAECHAAW4UErrorCode@@@Z ENDP ; icu_56::UVector64::expandCapacity
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?U_FAILURE@@YACW4UErrorCode@@@Z
_TEXT	SEGMENT
_code$ = 8						; size = 4
?U_FAILURE@@YACW4UErrorCode@@@Z PROC			; U_FAILURE, COMDAT
; File d:\mozilla\intl\icu\source\common\unicode\utypes.h
; Line 705
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	cmp	DWORD PTR _code$[ebp], 0
	setg	al
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?U_FAILURE@@YACW4UErrorCode@@@Z ENDP			; U_FAILURE
_TEXT	ENDS
PUBLIC	??_C@_1BG@KDIADNAG@?$AAl?$AAi?$AAm?$AAi?$AAt?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?$AA@ ; `string'
PUBLIC	??_C@_1FO@DKCMBKNO@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@ ; `string'
PUBLIC	?__LINE__Var@?1??setMaxCapacity@UVector64@icu_56@@QAEXH@Z@4JA ; `icu_56::UVector64::setMaxCapacity'::`2'::__LINE__Var
PUBLIC	?setMaxCapacity@UVector64@icu_56@@QAEXH@Z	; icu_56::UVector64::setMaxCapacity
;	COMDAT ??_C@_1BG@KDIADNAG@?$AAl?$AAi?$AAm?$AAi?$AAt?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?$AA@
; File d:\mozilla\intl\icu\source\common\uvectr64.cpp
CONST	SEGMENT
??_C@_1BG@KDIADNAG@?$AAl?$AAi?$AAm?$AAi?$AAt?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?$AA@ DB 'l'
	DB	00H, 'i', 00H, 'm', 00H, 'i', 00H, 't', 00H, ' ', 00H, '>', 00H
	DB	'=', 00H, ' ', 00H, '0', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1FO@DKCMBKNO@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@
CONST	SEGMENT
??_C@_1FO@DKCMBKNO@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@ DB 'd'
	DB	00H, ':', 00H, '\', 00H, 'm', 00H, 'o', 00H, 'z', 00H, 'i', 00H
	DB	'l', 00H, 'l', 00H, 'a', 00H, '\', 00H, 'i', 00H, 'n', 00H, 't'
	DB	00H, 'l', 00H, '\', 00H, 'i', 00H, 'c', 00H, 'u', 00H, '\', 00H
	DB	's', 00H, 'o', 00H, 'u', 00H, 'r', 00H, 'c', 00H, 'e', 00H, '\'
	DB	00H, 'c', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'o', 00H, 'n', 00H
	DB	'\', 00H, 'u', 00H, 'v', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'r'
	DB	00H, '6', 00H, '4', 00H, '.', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??setMaxCapacity@UVector64@icu_56@@QAEXH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??setMaxCapacity@UVector64@icu_56@@QAEXH@Z@4JA DD 09eH ; `icu_56::UVector64::setMaxCapacity'::`2'::__LINE__Var
; Function compile flags: /Odtp /RTCsu /ZI
_DATA	ENDS
;	COMDAT ?setMaxCapacity@UVector64@icu_56@@QAEXH@Z
_TEXT	SEGMENT
_newElems$ = -20					; size = 4
_this$ = -8						; size = 4
_limit$ = 8						; size = 4
?setMaxCapacity@UVector64@icu_56@@QAEXH@Z PROC		; icu_56::UVector64::setMaxCapacity, COMDAT
; _this$ = ecx
; Line 158
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 159
	cmp	DWORD PTR _limit$[ebp], 0
	jge	SHORT $LN9@setMaxCapa
	mov	eax, DWORD PTR ?__LINE__Var@?1??setMaxCapacity@UVector64@icu_56@@QAEXH@Z@4JA
	add	eax, 1
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1FO@DKCMBKNO@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@
	push	OFFSET ??_C@_1BG@KDIADNAG@?$AAl?$AAi?$AAm?$AAi?$AAt?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN9@setMaxCapa:
; Line 160
	cmp	DWORD PTR _limit$[ebp], 0
	jge	SHORT $LN6@setMaxCapa
; Line 161
	mov	DWORD PTR _limit$[ebp], 0
$LN6@setMaxCapa:
; Line 163
	cmp	DWORD PTR _limit$[ebp], 268435455	; 0fffffffH
	jle	SHORT $LN5@setMaxCapa
; Line 165
	jmp	SHORT $LN7@setMaxCapa
$LN5@setMaxCapa:
; Line 167
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _limit$[ebp]
	mov	DWORD PTR [eax+12], ecx
; Line 168
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	cmp	edx, DWORD PTR [ecx+12]
	jle	SHORT $LN3@setMaxCapa
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jne	SHORT $LN4@setMaxCapa
$LN3@setMaxCapa:
; Line 170
	jmp	SHORT $LN7@setMaxCapa
$LN4@setMaxCapa:
; Line 175
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	shl	ecx, 3
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	call	_uprv_realloc_56
	add	esp, 8
	mov	DWORD PTR _newElems$[ebp], eax
; Line 176
	cmp	DWORD PTR _newElems$[ebp], 0
	jne	SHORT $LN2@setMaxCapa
; Line 179
	jmp	SHORT $LN7@setMaxCapa
$LN2@setMaxCapa:
; Line 181
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newElems$[ebp]
	mov	DWORD PTR [eax+16], ecx
; Line 182
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+8], edx
; Line 183
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+8]
	jle	SHORT $LN7@setMaxCapa
; Line 184
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+4], edx
$LN7@setMaxCapa:
; Line 186
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?setMaxCapacity@UVector64@icu_56@@QAEXH@Z ENDP		; icu_56::UVector64::setMaxCapacity
_TEXT	ENDS
EXTRN	@_RTC_CheckStackVars@8:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?setSize@UVector64@icu_56@@QAEXH@Z
_TEXT	SEGMENT
_ec$8029 = -32						; size = 4
_i$ = -20						; size = 4
_this$ = -8						; size = 4
_newSize$ = 8						; size = 4
?setSize@UVector64@icu_56@@QAEXH@Z PROC			; icu_56::UVector64::setSize, COMDAT
; _this$ = ecx
; Line 194
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 196
	cmp	DWORD PTR _newSize$[ebp], 0
	jge	SHORT $LN6@setSize
; Line 197
	jmp	SHORT $LN7@setSize
$LN6@setSize:
; Line 199
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newSize$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jle	SHORT $LN5@setSize
; Line 200
	mov	DWORD PTR _ec$8029[ebp], 0
; Line 201
	lea	eax, DWORD PTR _ec$8029[ebp]
	push	eax
	mov	ecx, DWORD PTR _newSize$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ensureCapacity@UVector64@icu_56@@QAECHAAW4UErrorCode@@@Z ; icu_56::UVector64::ensureCapacity
	movsx	edx, al
	test	edx, edx
	jne	SHORT $LN4@setSize
; Line 202
	jmp	SHORT $LN7@setSize
$LN4@setSize:
; Line 204
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _i$[ebp], ecx
	jmp	SHORT $LN3@setSize
$LN2@setSize:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@setSize:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _newSize$[ebp]
	jge	SHORT $LN5@setSize
; Line 205
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [ecx+edx*8], 0
	mov	DWORD PTR [ecx+edx*8+4], 0
; Line 206
	jmp	SHORT $LN2@setSize
$LN5@setSize:
; Line 208
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newSize$[ebp]
	mov	DWORD PTR [eax+4], ecx
$LN7@setSize:
; Line 209
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN11@setSize
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
$LN11@setSize:
	DD	1
	DD	$LN10@setSize
$LN10@setSize:
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN9@setSize
$LN9@setSize:
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	0
?setSize@UVector64@icu_56@@QAEXH@Z ENDP			; icu_56::UVector64::setSize
_TEXT	ENDS
END
