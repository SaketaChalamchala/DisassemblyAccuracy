; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\mozilla\intl\icu\source\common\utf_impl.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_utf8_countTrailBytes_56
CONST	SEGMENT
_utf8_countTrailBytes_56 DB 00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	05H
	DB	05H
	DB	00H
	DB	00H
_utf8_minLegal DD 00H
	DD	080H
	DD	0800H
	DD	010000H
_utf8_errorValue DD 015H
	DD	09fH
	DD	0ffffH
	DD	010ffffH
	DD	03ffffffH
	DD	07fffffffH
CONST	ENDS
PUBLIC	??_C@_1BG@MBJJCPN@?$AAc?$AAo?$AAu?$AAn?$AAt?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA5?$AA?$AA@ ; `string'
PUBLIC	??_C@_1FK@BJPAIEHP@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@ ; `string'
PUBLIC	?__LINE__Var@?1??utf8_nextCharSafeBody_56@@9@9	; `utf8_nextCharSafeBody_56'::`2'::__LINE__Var
PUBLIC	_utf8_nextCharSafeBody_56
EXTRN	__imp___wassert:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT ??_C@_1BG@MBJJCPN@?$AAc?$AAo?$AAu?$AAn?$AAt?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA5?$AA?$AA@
; File d:\mozilla\intl\icu\source\common\utf_impl.c
CONST	SEGMENT
??_C@_1BG@MBJJCPN@?$AAc?$AAo?$AAu?$AAn?$AAt?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA5?$AA?$AA@ DB 'c'
	DB	00H, 'o', 00H, 'u', 00H, 'n', 00H, 't', 00H, ' ', 00H, '<', 00H
	DB	'=', 00H, ' ', 00H, '5', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1FK@BJPAIEHP@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@
CONST	SEGMENT
??_C@_1FK@BJPAIEHP@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@ DB 'd'
	DB	00H, ':', 00H, '\', 00H, 'm', 00H, 'o', 00H, 'z', 00H, 'i', 00H
	DB	'l', 00H, 'l', 00H, 'a', 00H, '\', 00H, 'i', 00H, 'n', 00H, 't'
	DB	00H, 'l', 00H, '\', 00H, 'i', 00H, 'c', 00H, 'u', 00H, '\', 00H
	DB	's', 00H, 'o', 00H, 'u', 00H, 'r', 00H, 'c', 00H, 'e', 00H, '\'
	DB	00H, 'c', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'o', 00H, 'n', 00H
	DB	'\', 00H, 'u', 00H, 't', 00H, 'f', 00H, '_', 00H, 'i', 00H, 'm'
	DB	00H, 'p', 00H, 'l', 00H, '.', 00H, 'c', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??utf8_nextCharSafeBody_56@@9@9
_DATA	SEGMENT
?__LINE__Var@?1??utf8_nextCharSafeBody_56@@9@9 DD 07dH	; `utf8_nextCharSafeBody_56'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT _utf8_nextCharSafeBody_56
_TEXT	SEGMENT
tv83 = -236						; size = 4
tv135 = -232						; size = 4
tv84 = -232						; size = 4
_trail$4903 = -29					; size = 1
_count$ = -17						; size = 1
_i$ = -8						; size = 4
_s$ = 8							; size = 4
_pi$ = 12						; size = 4
_length$ = 16						; size = 4
_c$ = 20						; size = 4
_strict$ = 24						; size = 1
_utf8_nextCharSafeBody_56 PROC				; COMDAT
; Line 125
	push	ebp
	mov	ebp, esp
	sub	esp, 236				; 000000ecH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-236]
	mov	ecx, 59					; 0000003bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 126
	mov	eax, DWORD PTR _pi$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _i$[ebp], ecx
; Line 127
	movzx	eax, BYTE PTR _c$[ebp]
	cmp	eax, 240				; 000000f0H
	jge	SHORT $LN26@utf8_nextC
	movzx	ecx, BYTE PTR _c$[ebp]
	xor	edx, edx
	cmp	ecx, 192				; 000000c0H
	setge	dl
	movzx	eax, BYTE PTR _c$[ebp]
	xor	ecx, ecx
	cmp	eax, 224				; 000000e0H
	setge	cl
	add	edx, ecx
	mov	DWORD PTR tv84[ebp], edx
	jmp	SHORT $LN27@utf8_nextC
$LN26@utf8_nextC:
	movzx	edx, BYTE PTR _c$[ebp]
	cmp	edx, 254				; 000000feH
	jge	SHORT $LN24@utf8_nextC
	movzx	eax, BYTE PTR _c$[ebp]
	xor	ecx, ecx
	cmp	eax, 248				; 000000f8H
	setge	cl
	movzx	edx, BYTE PTR _c$[ebp]
	xor	eax, eax
	cmp	edx, 252				; 000000fcH
	setge	al
	lea	ecx, DWORD PTR [ecx+eax+3]
	mov	DWORD PTR tv83[ebp], ecx
	jmp	SHORT $LN25@utf8_nextC
$LN24@utf8_nextC:
	mov	DWORD PTR tv83[ebp], 0
$LN25@utf8_nextC:
	mov	edx, DWORD PTR tv83[ebp]
	mov	DWORD PTR tv84[ebp], edx
$LN27@utf8_nextC:
	mov	al, BYTE PTR tv84[ebp]
	mov	BYTE PTR _count$[ebp], al
; Line 128
	movzx	eax, BYTE PTR _count$[ebp]
	cmp	eax, 5
	jle	SHORT $LN28@utf8_nextC
	mov	ecx, DWORD PTR ?__LINE__Var@?1??utf8_nextCharSafeBody_56@@9@9
	add	ecx, 3
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_1FK@BJPAIEHP@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@
	push	OFFSET ??_C@_1BG@MBJJCPN@?$AAc?$AAo?$AAu?$AAn?$AAt?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA5?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN28@utf8_nextC:
; Line 129
	movzx	eax, BYTE PTR _count$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _length$[ebp]
	jle	SHORT $LN20@utf8_nextC
	cmp	DWORD PTR _length$[ebp], 0
	jge	$LN21@utf8_nextC
$LN20@utf8_nextC:
; Line 132
	movzx	eax, BYTE PTR _count$[ebp]
	mov	ecx, 6
	sub	ecx, eax
	mov	edx, 1
	shl	edx, cl
	sub	edx, 1
	and	edx, DWORD PTR _c$[ebp]
	mov	DWORD PTR _c$[ebp], edx
; Line 134
	mov	al, BYTE PTR _count$[ebp]
	mov	BYTE PTR tv135[ebp], al
	cmp	BYTE PTR tv135[ebp], 1
	je	$LN9@utf8_nextC
	cmp	BYTE PTR tv135[ebp], 2
	je	SHORT $LN13@utf8_nextC
	cmp	BYTE PTR tv135[ebp], 3
	je	SHORT $LN16@utf8_nextC
	jmp	$LN18@utf8_nextC
; Line 141
	jmp	$LN18@utf8_nextC
$LN16@utf8_nextC:
; Line 143
	mov	eax, DWORD PTR _s$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	movzx	ecx, BYTE PTR [eax]
	sub	ecx, 128				; 00000080H
	mov	BYTE PTR _trail$4903[ebp], cl
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
; Line 144
	mov	eax, DWORD PTR _c$[ebp]
	shl	eax, 6
	movzx	ecx, BYTE PTR _trail$4903[ebp]
	or	eax, ecx
	mov	DWORD PTR _c$[ebp], eax
; Line 146
	cmp	DWORD PTR _c$[ebp], 272			; 00000110H
	jge	SHORT $LN14@utf8_nextC
	movzx	eax, BYTE PTR _trail$4903[ebp]
	cmp	eax, 63					; 0000003fH
	jle	SHORT $LN13@utf8_nextC
$LN14@utf8_nextC:
	jmp	$LN18@utf8_nextC
$LN13@utf8_nextC:
; Line 148
	mov	eax, DWORD PTR _s$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	movzx	ecx, BYTE PTR [eax]
	sub	ecx, 128				; 00000080H
	mov	BYTE PTR _trail$4903[ebp], cl
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
; Line 149
	mov	eax, DWORD PTR _c$[ebp]
	shl	eax, 6
	movzx	ecx, BYTE PTR _trail$4903[ebp]
	or	eax, ecx
	mov	DWORD PTR _c$[ebp], eax
; Line 154
	mov	eax, DWORD PTR _c$[ebp]
	and	eax, 65504				; 0000ffe0H
	cmp	eax, 864				; 00000360H
	jne	SHORT $LN10@utf8_nextC
	movsx	eax, BYTE PTR _strict$[ebp]
	cmp	eax, -2					; fffffffeH
	jne	SHORT $LN11@utf8_nextC
$LN10@utf8_nextC:
	movzx	eax, BYTE PTR _trail$4903[ebp]
	cmp	eax, 63					; 0000003fH
	jle	SHORT $LN9@utf8_nextC
$LN11@utf8_nextC:
	jmp	$LN18@utf8_nextC
$LN9@utf8_nextC:
; Line 156
	mov	eax, DWORD PTR _s$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	movzx	ecx, BYTE PTR [eax]
	sub	ecx, 128				; 00000080H
	mov	BYTE PTR _trail$4903[ebp], cl
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
; Line 157
	mov	eax, DWORD PTR _c$[ebp]
	shl	eax, 6
	movzx	ecx, BYTE PTR _trail$4903[ebp]
	or	eax, ecx
	mov	DWORD PTR _c$[ebp], eax
; Line 158
	movzx	eax, BYTE PTR _trail$4903[ebp]
	cmp	eax, 63					; 0000003fH
	jle	SHORT $LN8@utf8_nextC
	jmp	SHORT $LN18@utf8_nextC
$LN8@utf8_nextC:
; Line 162
	movzx	eax, BYTE PTR _count$[ebp]
	mov	ecx, DWORD PTR _c$[ebp]
	cmp	ecx, DWORD PTR _utf8_minLegal[eax*4]
	jl	SHORT $LN18@utf8_nextC
	movsx	eax, BYTE PTR _strict$[ebp]
	test	eax, eax
	jle	SHORT $LN6@utf8_nextC
	cmp	DWORD PTR _c$[ebp], 64976		; 0000fdd0H
	jl	SHORT $LN6@utf8_nextC
	cmp	DWORD PTR _c$[ebp], 65007		; 0000fdefH
	jbe	SHORT $LN4@utf8_nextC
	mov	eax, DWORD PTR _c$[ebp]
	and	eax, 65534				; 0000fffeH
	cmp	eax, 65534				; 0000fffeH
	jne	SHORT $LN6@utf8_nextC
$LN4@utf8_nextC:
	cmp	DWORD PTR _c$[ebp], 1114111		; 0010ffffH
	jbe	SHORT $LN18@utf8_nextC
$LN6@utf8_nextC:
; Line 163
	mov	eax, DWORD PTR _pi$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 164
	mov	eax, DWORD PTR _c$[ebp]
	jmp	SHORT $LN22@utf8_nextC
$LN18@utf8_nextC:
; Line 168
	jmp	SHORT $LN3@utf8_nextC
$LN21@utf8_nextC:
; Line 170
	mov	eax, DWORD PTR _length$[ebp]
	sub	eax, DWORD PTR _i$[ebp]
	mov	BYTE PTR _count$[ebp], al
$LN3@utf8_nextC:
; Line 174
	mov	eax, DWORD PTR _pi$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _i$[ebp], ecx
$LN2@utf8_nextC:
; Line 175
	movzx	eax, BYTE PTR _count$[ebp]
	test	eax, eax
	jle	SHORT $LN1@utf8_nextC
	mov	eax, DWORD PTR _s$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	movzx	ecx, BYTE PTR [eax]
	and	ecx, 192				; 000000c0H
	cmp	ecx, 128				; 00000080H
	jne	SHORT $LN1@utf8_nextC
; Line 176
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
; Line 177
	mov	al, BYTE PTR _count$[ebp]
	sub	al, 1
	mov	BYTE PTR _count$[ebp], al
; Line 178
	jmp	SHORT $LN2@utf8_nextC
$LN1@utf8_nextC:
; Line 179
	movzx	eax, BYTE PTR _strict$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pi$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	sub	edx, DWORD PTR [ecx]
	push	edx
	call	_errorValue
	add	esp, 8
	mov	DWORD PTR _c$[ebp], eax
; Line 180
	mov	eax, DWORD PTR _pi$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 181
	mov	eax, DWORD PTR _c$[ebp]
$LN22@utf8_nextC:
; Line 182
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 236				; 000000ecH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_utf8_nextCharSafeBody_56 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _errorValue
_TEXT	SEGMENT
_count$ = 8						; size = 4
_strict$ = 12						; size = 1
_errorValue PROC					; COMDAT
; Line 90
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 91
	movsx	eax, BYTE PTR _strict$[ebp]
	test	eax, eax
	jl	SHORT $LN4@errorValue
; Line 92
	mov	eax, DWORD PTR _count$[ebp]
	mov	eax, DWORD PTR _utf8_errorValue[eax*4]
	jmp	SHORT $LN5@errorValue
	jmp	SHORT $LN5@errorValue
$LN4@errorValue:
; Line 93
	movsx	eax, BYTE PTR _strict$[ebp]
	cmp	eax, -3					; fffffffdH
	jne	SHORT $LN2@errorValue
; Line 94
	mov	eax, 65533				; 0000fffdH
	jmp	SHORT $LN5@errorValue
; Line 95
	jmp	SHORT $LN5@errorValue
$LN2@errorValue:
; Line 96
	or	eax, -1
$LN5@errorValue:
; Line 98
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_errorValue ENDP
_TEXT	ENDS
PUBLIC	_utf8_appendCharSafeBody_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _utf8_appendCharSafeBody_56
_TEXT	SEGMENT
_offset$4963 = -8					; size = 4
_s$ = 8							; size = 4
_i$ = 12						; size = 4
_length$ = 16						; size = 4
_c$ = 20						; size = 4
_pIsError$ = 24						; size = 4
_utf8_appendCharSafeBody_56 PROC			; COMDAT
; Line 185
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 186
	cmp	DWORD PTR _c$[ebp], 2047		; 000007ffH
	ja	SHORT $LN18@utf8_appen
; Line 187
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	cmp	eax, DWORD PTR _length$[ebp]
	jge	SHORT $LN17@utf8_appen
; Line 188
	mov	eax, DWORD PTR _c$[ebp]
	sar	eax, 6
	or	eax, 192				; 000000c0H
	mov	ecx, DWORD PTR _s$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
; Line 189
	mov	eax, DWORD PTR _c$[ebp]
	and	eax, 63					; 0000003fH
	or	eax, 128				; 00000080H
	mov	ecx, DWORD PTR _s$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
; Line 190
	mov	eax, DWORD PTR _i$[ebp]
	jmp	$LN19@utf8_appen
$LN17@utf8_appen:
; Line 191
	jmp	$LN16@utf8_appen
$LN18@utf8_appen:
; Line 192
	cmp	DWORD PTR _c$[ebp], 65535		; 0000ffffH
	ja	SHORT $LN15@utf8_appen
; Line 194
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 2
	cmp	eax, DWORD PTR _length$[ebp]
	jge	SHORT $LN14@utf8_appen
	mov	eax, DWORD PTR _c$[ebp]
	and	eax, -2048				; fffff800H
	cmp	eax, 55296				; 0000d800H
	je	SHORT $LN14@utf8_appen
; Line 195
	mov	eax, DWORD PTR _c$[ebp]
	sar	eax, 12					; 0000000cH
	or	eax, 224				; 000000e0H
	mov	ecx, DWORD PTR _s$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
; Line 196
	mov	eax, DWORD PTR _c$[ebp]
	sar	eax, 6
	and	eax, 63					; 0000003fH
	or	eax, 128				; 00000080H
	mov	ecx, DWORD PTR _s$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
; Line 197
	mov	eax, DWORD PTR _c$[ebp]
	and	eax, 63					; 0000003fH
	or	eax, 128				; 00000080H
	mov	ecx, DWORD PTR _s$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
; Line 198
	mov	eax, DWORD PTR _i$[ebp]
	jmp	$LN19@utf8_appen
$LN14@utf8_appen:
; Line 199
	jmp	$LN16@utf8_appen
$LN15@utf8_appen:
; Line 200
	cmp	DWORD PTR _c$[ebp], 1114111		; 0010ffffH
	ja	$LN16@utf8_appen
; Line 201
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 3
	cmp	eax, DWORD PTR _length$[ebp]
	jge	SHORT $LN16@utf8_appen
; Line 202
	mov	eax, DWORD PTR _c$[ebp]
	sar	eax, 18					; 00000012H
	or	eax, 240				; 000000f0H
	mov	ecx, DWORD PTR _s$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
; Line 203
	mov	eax, DWORD PTR _c$[ebp]
	sar	eax, 12					; 0000000cH
	and	eax, 63					; 0000003fH
	or	eax, 128				; 00000080H
	mov	ecx, DWORD PTR _s$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
; Line 204
	mov	eax, DWORD PTR _c$[ebp]
	sar	eax, 6
	and	eax, 63					; 0000003fH
	or	eax, 128				; 00000080H
	mov	ecx, DWORD PTR _s$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
; Line 205
	mov	eax, DWORD PTR _c$[ebp]
	and	eax, 63					; 0000003fH
	or	eax, 128				; 00000080H
	mov	ecx, DWORD PTR _s$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
; Line 206
	mov	eax, DWORD PTR _i$[ebp]
	jmp	$LN19@utf8_appen
$LN16@utf8_appen:
; Line 210
	cmp	DWORD PTR _pIsError$[ebp], 0
	je	SHORT $LN10@utf8_appen
; Line 211
	mov	eax, DWORD PTR _pIsError$[ebp]
	mov	BYTE PTR [eax], 1
; Line 212
	jmp	$LN9@utf8_appen
$LN10@utf8_appen:
; Line 213
	mov	eax, DWORD PTR _length$[ebp]
	sub	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR _length$[ebp], eax
; Line 214
	cmp	DWORD PTR _length$[ebp], 0
	jle	$LN9@utf8_appen
; Line 216
	cmp	DWORD PTR _length$[ebp], 3
	jle	SHORT $LN7@utf8_appen
; Line 217
	mov	DWORD PTR _length$[ebp], 3
$LN7@utf8_appen:
; Line 219
	mov	eax, DWORD PTR _s$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR _s$[ebp], eax
; Line 220
	mov	DWORD PTR _offset$4963[ebp], 0
; Line 221
	mov	eax, DWORD PTR _length$[ebp]
	mov	ecx, DWORD PTR _utf8_errorValue[eax*4-4]
	mov	DWORD PTR _c$[ebp], ecx
; Line 222
	cmp	DWORD PTR _c$[ebp], 127			; 0000007fH
	ja	SHORT $LN6@utf8_appen
	mov	eax, DWORD PTR _s$[ebp]
	add	eax, DWORD PTR _offset$4963[ebp]
	mov	cl, BYTE PTR _c$[ebp]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _offset$4963[ebp]
	add	edx, 1
	mov	DWORD PTR _offset$4963[ebp], edx
	jmp	$LN5@utf8_appen
$LN6@utf8_appen:
	cmp	DWORD PTR _c$[ebp], 2047		; 000007ffH
	ja	SHORT $LN4@utf8_appen
	mov	eax, DWORD PTR _c$[ebp]
	sar	eax, 6
	or	eax, 192				; 000000c0H
	mov	ecx, DWORD PTR _s$[ebp]
	add	ecx, DWORD PTR _offset$4963[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _offset$4963[ebp]
	add	edx, 1
	mov	DWORD PTR _offset$4963[ebp], edx
	jmp	$LN3@utf8_appen
$LN4@utf8_appen:
	cmp	DWORD PTR _c$[ebp], 65535		; 0000ffffH
	ja	SHORT $LN2@utf8_appen
	mov	eax, DWORD PTR _c$[ebp]
	sar	eax, 12					; 0000000cH
	or	eax, 224				; 000000e0H
	mov	ecx, DWORD PTR _s$[ebp]
	add	ecx, DWORD PTR _offset$4963[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _offset$4963[ebp]
	add	edx, 1
	mov	DWORD PTR _offset$4963[ebp], edx
	jmp	SHORT $LN1@utf8_appen
$LN2@utf8_appen:
	mov	eax, DWORD PTR _c$[ebp]
	sar	eax, 18					; 00000012H
	or	eax, 240				; 000000f0H
	mov	ecx, DWORD PTR _s$[ebp]
	add	ecx, DWORD PTR _offset$4963[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _offset$4963[ebp]
	add	edx, 1
	mov	DWORD PTR _offset$4963[ebp], edx
	mov	eax, DWORD PTR _c$[ebp]
	sar	eax, 12					; 0000000cH
	and	eax, 63					; 0000003fH
	or	eax, 128				; 00000080H
	mov	ecx, DWORD PTR _s$[ebp]
	add	ecx, DWORD PTR _offset$4963[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _offset$4963[ebp]
	add	edx, 1
	mov	DWORD PTR _offset$4963[ebp], edx
$LN1@utf8_appen:
	mov	eax, DWORD PTR _c$[ebp]
	sar	eax, 6
	and	eax, 63					; 0000003fH
	or	eax, 128				; 00000080H
	mov	ecx, DWORD PTR _s$[ebp]
	add	ecx, DWORD PTR _offset$4963[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _offset$4963[ebp]
	add	edx, 1
	mov	DWORD PTR _offset$4963[ebp], edx
$LN3@utf8_appen:
	mov	eax, DWORD PTR _c$[ebp]
	and	eax, 63					; 0000003fH
	or	eax, 128				; 00000080H
	mov	ecx, DWORD PTR _s$[ebp]
	add	ecx, DWORD PTR _offset$4963[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _offset$4963[ebp]
	add	edx, 1
	mov	DWORD PTR _offset$4963[ebp], edx
$LN5@utf8_appen:
; Line 223
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, DWORD PTR _offset$4963[ebp]
	mov	DWORD PTR _i$[ebp], eax
$LN9@utf8_appen:
; Line 226
	mov	eax, DWORD PTR _i$[ebp]
$LN19@utf8_appen:
; Line 227
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_utf8_appendCharSafeBody_56 ENDP
_TEXT	ENDS
PUBLIC	_utf8_prevCharSafeBody_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _utf8_prevCharSafeBody_56
_TEXT	SEGMENT
tv135 = -260						; size = 4
tv136 = -256						; size = 4
_shouldCount$5004 = -53					; size = 1
_shift$ = -41						; size = 1
_count$ = -29						; size = 1
_b$ = -17						; size = 1
_i$ = -8						; size = 4
_s$ = 8							; size = 4
_start$ = 12						; size = 4
_pi$ = 16						; size = 4
_c$ = 20						; size = 4
_strict$ = 24						; size = 1
_utf8_prevCharSafeBody_56 PROC				; COMDAT
; Line 230
	push	ebp
	mov	ebp, esp
	sub	esp, 260				; 00000104H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-260]
	mov	ecx, 65					; 00000041H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 231
	mov	eax, DWORD PTR _pi$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _i$[ebp], ecx
; Line 232
	mov	BYTE PTR _count$[ebp], 1
	mov	BYTE PTR _shift$[ebp], 6
; Line 234
	mov	eax, DWORD PTR _c$[ebp]
	and	eax, 192				; 000000c0H
	cmp	eax, 128				; 00000080H
	je	SHORT $LN20@utf8_prevC
	movzx	eax, BYTE PTR _strict$[ebp]
	push	eax
	push	0
	call	_errorValue
	add	esp, 8
	jmp	$LN21@utf8_prevC
$LN20@utf8_prevC:
; Line 237
	mov	eax, DWORD PTR _c$[ebp]
	and	eax, 63					; 0000003fH
	mov	DWORD PTR _c$[ebp], eax
$LN19@utf8_prevC:
; Line 240
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _start$[ebp]
	jg	SHORT $LN17@utf8_prevC
; Line 242
	movzx	eax, BYTE PTR _strict$[ebp]
	push	eax
	push	0
	call	_errorValue
	add	esp, 8
	jmp	$LN21@utf8_prevC
$LN17@utf8_prevC:
; Line 246
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _s$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR _b$[ebp], dl
; Line 247
	movzx	eax, BYTE PTR _b$[ebp]
	sub	eax, 128				; 00000080H
	movzx	ecx, al
	cmp	ecx, 126				; 0000007eH
	jge	$LN16@utf8_prevC
; Line 248
	movzx	eax, BYTE PTR _b$[ebp]
	and	eax, 64					; 00000040H
	je	$LN15@utf8_prevC
; Line 250
	movzx	eax, BYTE PTR _b$[ebp]
	cmp	eax, 240				; 000000f0H
	jge	SHORT $LN25@utf8_prevC
	movzx	ecx, BYTE PTR _b$[ebp]
	xor	edx, edx
	cmp	ecx, 192				; 000000c0H
	setge	dl
	movzx	eax, BYTE PTR _b$[ebp]
	xor	ecx, ecx
	cmp	eax, 224				; 000000e0H
	setge	cl
	add	edx, ecx
	mov	DWORD PTR tv136[ebp], edx
	jmp	SHORT $LN26@utf8_prevC
$LN25@utf8_prevC:
	movzx	edx, BYTE PTR _b$[ebp]
	cmp	edx, 254				; 000000feH
	jge	SHORT $LN23@utf8_prevC
	movzx	eax, BYTE PTR _b$[ebp]
	xor	ecx, ecx
	cmp	eax, 248				; 000000f8H
	setge	cl
	movzx	edx, BYTE PTR _b$[ebp]
	xor	eax, eax
	cmp	edx, 252				; 000000fcH
	setge	al
	lea	ecx, DWORD PTR [ecx+eax+3]
	mov	DWORD PTR tv135[ebp], ecx
	jmp	SHORT $LN24@utf8_prevC
$LN23@utf8_prevC:
	mov	DWORD PTR tv135[ebp], 0
$LN24@utf8_prevC:
	mov	edx, DWORD PTR tv135[ebp]
	mov	DWORD PTR tv136[ebp], edx
$LN26@utf8_prevC:
	mov	al, BYTE PTR tv136[ebp]
	mov	BYTE PTR _shouldCount$5004[ebp], al
; Line 252
	movzx	eax, BYTE PTR _count$[ebp]
	movzx	ecx, BYTE PTR _shouldCount$5004[ebp]
	cmp	eax, ecx
	jne	$LN14@utf8_prevC
; Line 254
	mov	eax, DWORD PTR _pi$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 255
	movzx	eax, BYTE PTR _count$[ebp]
	mov	ecx, 6
	sub	ecx, eax
	mov	edx, 1
	shl	edx, cl
	sub	edx, 1
	movzx	eax, BYTE PTR _b$[ebp]
	and	eax, edx
	mov	BYTE PTR _b$[ebp], al
; Line 256
	movzx	eax, BYTE PTR _b$[ebp]
	movzx	ecx, BYTE PTR _shift$[ebp]
	shl	eax, cl
	or	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR _c$[ebp], eax
; Line 257
	movzx	eax, BYTE PTR _count$[ebp]
	cmp	eax, 4
	jge	SHORT $LN12@utf8_prevC
	cmp	DWORD PTR _c$[ebp], 1114111		; 0010ffffH
	jg	SHORT $LN12@utf8_prevC
	movzx	eax, BYTE PTR _count$[ebp]
	mov	ecx, DWORD PTR _c$[ebp]
	cmp	ecx, DWORD PTR _utf8_minLegal[eax*4]
	jl	SHORT $LN12@utf8_prevC
	mov	eax, DWORD PTR _c$[ebp]
	and	eax, -2048				; fffff800H
	cmp	eax, 55296				; 0000d800H
	jne	SHORT $LN11@utf8_prevC
	movsx	eax, BYTE PTR _strict$[ebp]
	cmp	eax, -2					; fffffffeH
	jne	SHORT $LN12@utf8_prevC
$LN11@utf8_prevC:
	movsx	eax, BYTE PTR _strict$[ebp]
	test	eax, eax
	jle	SHORT $LN8@utf8_prevC
	cmp	DWORD PTR _c$[ebp], 64976		; 0000fdd0H
	jl	SHORT $LN8@utf8_prevC
	cmp	DWORD PTR _c$[ebp], 65007		; 0000fdefH
	jbe	SHORT $LN10@utf8_prevC
	mov	eax, DWORD PTR _c$[ebp]
	and	eax, 65534				; 0000fffeH
	cmp	eax, 65534				; 0000fffeH
	jne	SHORT $LN8@utf8_prevC
$LN10@utf8_prevC:
	cmp	DWORD PTR _c$[ebp], 1114111		; 0010ffffH
	ja	SHORT $LN8@utf8_prevC
$LN12@utf8_prevC:
; Line 259
	movzx	eax, BYTE PTR _count$[ebp]
	cmp	eax, 4
	jl	SHORT $LN9@utf8_prevC
; Line 260
	mov	BYTE PTR _count$[ebp], 3
$LN9@utf8_prevC:
; Line 262
	movzx	eax, BYTE PTR _strict$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _count$[ebp]
	push	ecx
	call	_errorValue
	add	esp, 8
	mov	DWORD PTR _c$[ebp], eax
$LN8@utf8_prevC:
; Line 266
	jmp	SHORT $LN7@utf8_prevC
$LN14@utf8_prevC:
; Line 270
	movzx	eax, BYTE PTR _count$[ebp]
	movzx	ecx, BYTE PTR _shouldCount$5004[ebp]
	cmp	eax, ecx
	jge	SHORT $LN6@utf8_prevC
; Line 271
	mov	eax, DWORD PTR _pi$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 272
	movzx	eax, BYTE PTR _strict$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _count$[ebp]
	push	ecx
	call	_errorValue
	add	esp, 8
	mov	DWORD PTR _c$[ebp], eax
; Line 273
	jmp	SHORT $LN7@utf8_prevC
$LN6@utf8_prevC:
; Line 274
	movzx	eax, BYTE PTR _strict$[ebp]
	push	eax
	push	0
	call	_errorValue
	add	esp, 8
	mov	DWORD PTR _c$[ebp], eax
$LN7@utf8_prevC:
; Line 277
	jmp	SHORT $LN18@utf8_prevC
	jmp	SHORT $LN4@utf8_prevC
$LN15@utf8_prevC:
; Line 278
	movzx	eax, BYTE PTR _count$[ebp]
	cmp	eax, 5
	jge	SHORT $LN3@utf8_prevC
; Line 280
	movzx	eax, BYTE PTR _b$[ebp]
	and	eax, 63					; 0000003fH
	movzx	ecx, BYTE PTR _shift$[ebp]
	shl	eax, cl
	or	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR _c$[ebp], eax
; Line 281
	mov	al, BYTE PTR _count$[ebp]
	add	al, 1
	mov	BYTE PTR _count$[ebp], al
; Line 282
	movzx	eax, BYTE PTR _shift$[ebp]
	add	eax, 6
	mov	BYTE PTR _shift$[ebp], al
; Line 283
	jmp	SHORT $LN4@utf8_prevC
$LN3@utf8_prevC:
; Line 285
	movzx	eax, BYTE PTR _strict$[ebp]
	push	eax
	push	0
	call	_errorValue
	add	esp, 8
	mov	DWORD PTR _c$[ebp], eax
; Line 286
	jmp	SHORT $LN18@utf8_prevC
$LN4@utf8_prevC:
; Line 288
	jmp	SHORT $LN1@utf8_prevC
$LN16@utf8_prevC:
; Line 290
	movzx	eax, BYTE PTR _strict$[ebp]
	push	eax
	push	0
	call	_errorValue
	add	esp, 8
	mov	DWORD PTR _c$[ebp], eax
; Line 291
	jmp	SHORT $LN18@utf8_prevC
$LN1@utf8_prevC:
; Line 293
	jmp	$LN19@utf8_prevC
$LN18@utf8_prevC:
; Line 294
	mov	eax, DWORD PTR _c$[ebp]
$LN21@utf8_prevC:
; Line 295
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 260				; 00000104H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_utf8_prevCharSafeBody_56 ENDP
_TEXT	ENDS
PUBLIC	_utf8_back1SafeBody_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _utf8_back1SafeBody_56
_TEXT	SEGMENT
tv94 = -236						; size = 4
tv95 = -232						; size = 4
_b$ = -29						; size = 1
_Z$ = -20						; size = 4
_I$ = -8						; size = 4
_s$ = 8							; size = 4
_start$ = 12						; size = 4
_i$ = 16						; size = 4
_utf8_back1SafeBody_56 PROC				; COMDAT
; Line 298
	push	ebp
	mov	ebp, esp
	sub	esp, 236				; 000000ecH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-236]
	mov	ecx, 59					; 0000003bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 300
	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR _I$[ebp], eax
; Line 304
	mov	eax, DWORD PTR _I$[ebp]
	sub	eax, 5
	cmp	eax, DWORD PTR _start$[ebp]
	jle	SHORT $LN10@utf8_back1
; Line 305
	mov	eax, DWORD PTR _I$[ebp]
	sub	eax, 5
	mov	DWORD PTR _Z$[ebp], eax
; Line 306
	jmp	SHORT $LN8@utf8_back1
$LN10@utf8_back1:
; Line 307
	mov	eax, DWORD PTR _start$[ebp]
	mov	DWORD PTR _Z$[ebp], eax
$LN8@utf8_back1:
; Line 312
	mov	eax, DWORD PTR _s$[ebp]
	add	eax, DWORD PTR _I$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _b$[ebp], cl
; Line 313
	movzx	eax, BYTE PTR _b$[ebp]
	sub	eax, 128				; 00000080H
	movzx	ecx, al
	cmp	ecx, 126				; 0000007eH
	jl	SHORT $LN5@utf8_back1
; Line 314
	jmp	$LN6@utf8_back1
	jmp	$LN7@utf8_back1
$LN5@utf8_back1:
; Line 315
	movzx	eax, BYTE PTR _b$[ebp]
	cmp	eax, 192				; 000000c0H
	jl	$LN7@utf8_back1
; Line 316
	movzx	eax, BYTE PTR _b$[ebp]
	cmp	eax, 240				; 000000f0H
	jge	SHORT $LN15@utf8_back1
	movzx	ecx, BYTE PTR _b$[ebp]
	xor	edx, edx
	cmp	ecx, 192				; 000000c0H
	setge	dl
	movzx	eax, BYTE PTR _b$[ebp]
	xor	ecx, ecx
	cmp	eax, 224				; 000000e0H
	setge	cl
	add	edx, ecx
	mov	DWORD PTR tv95[ebp], edx
	jmp	SHORT $LN16@utf8_back1
$LN15@utf8_back1:
	movzx	edx, BYTE PTR _b$[ebp]
	cmp	edx, 254				; 000000feH
	jge	SHORT $LN13@utf8_back1
	movzx	eax, BYTE PTR _b$[ebp]
	xor	ecx, ecx
	cmp	eax, 248				; 000000f8H
	setge	cl
	movzx	edx, BYTE PTR _b$[ebp]
	xor	eax, eax
	cmp	edx, 252				; 000000fcH
	setge	al
	lea	ecx, DWORD PTR [ecx+eax+3]
	mov	DWORD PTR tv94[ebp], ecx
	jmp	SHORT $LN14@utf8_back1
$LN13@utf8_back1:
	mov	DWORD PTR tv94[ebp], 0
$LN14@utf8_back1:
	mov	edx, DWORD PTR tv94[ebp]
	mov	DWORD PTR tv95[ebp], edx
$LN16@utf8_back1:
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, DWORD PTR _I$[ebp]
	cmp	DWORD PTR tv95[ebp], eax
	jl	SHORT $LN2@utf8_back1
; Line 317
	mov	eax, DWORD PTR _I$[ebp]
	jmp	SHORT $LN11@utf8_back1
; Line 318
	jmp	SHORT $LN7@utf8_back1
$LN2@utf8_back1:
; Line 319
	jmp	SHORT $LN6@utf8_back1
$LN7@utf8_back1:
; Line 322
	mov	eax, DWORD PTR _I$[ebp]
	sub	eax, 1
	mov	DWORD PTR _I$[ebp], eax
	mov	ecx, DWORD PTR _Z$[ebp]
	cmp	ecx, DWORD PTR _I$[ebp]
	jle	$LN8@utf8_back1
$LN6@utf8_back1:
; Line 325
	mov	eax, DWORD PTR _i$[ebp]
$LN11@utf8_back1:
; Line 326
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_utf8_back1SafeBody_56 ENDP
_TEXT	ENDS
END
