; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\mozilla\intl\icu\source\common\ucnv_ct.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	__CompoundTextData_56
CONST	SEGMENT
_escSeqCompoundText DB 01bH
	DB	02dH
	DB	041H
	DB	00H
	DB	00H
	DB	01bH
	DB	02dH
	DB	04dH
	DB	00H
	DB	00H
	DB	01bH
	DB	02dH
	DB	046H
	DB	00H
	DB	00H
	DB	01bH
	DB	02dH
	DB	047H
	DB	00H
	DB	00H
	DB	01bH
	DB	024H
	DB	029H
	DB	041H
	DB	00H
	DB	01bH
	DB	024H
	DB	029H
	DB	042H
	DB	00H
	DB	01bH
	DB	024H
	DB	029H
	DB	043H
	DB	00H
	DB	01bH
	DB	024H
	DB	029H
	DB	044H
	DB	00H
	DB	01bH
	DB	024H
	DB	029H
	DB	047H
	DB	00H
	DB	01bH
	DB	024H
	DB	029H
	DB	048H
	DB	00H
	DB	01bH
	DB	024H
	DB	029H
	DB	049H
	DB	00H
	DB	01bH
	DB	025H
	DB	047H
	DB	00H
	DB	00H
	DB	01bH
	DB	02dH
	DB	04cH
	DB	00H
	DB	00H
	DB	01bH
	DB	02dH
	DB	048H
	DB	00H
	DB	00H
	DB	01bH
	DB	02dH
	DB	044H
	DB	00H
	DB	00H
	DB	01bH
	DB	02dH
	DB	054H
	DB	00H
	DB	00H
	DB	01bH
	DB	02dH
	DB	042H
	DB	00H
	DB	00H
	DB	01bH
	DB	02dH
	DB	043H
	DB	00H
	DB	00H
	DB	01bH
	DB	02dH
	DB	05fH
	DB	00H
	DB	00H
	DB	01bH
	DB	02dH
	DB	062H
	DB	00H
	DB	00H
	ORG $+4
__CompoundTextImpl DD 021H
	DD	00H
	DD	00H
	DD	FLAT:__CompoundTextOpen
	DD	FLAT:__CompoundTextClose
	DD	FLAT:__CompoundTextReset
	DD	FLAT:_UConverter_toUnicode_CompoundText_OFFSETS
	DD	FLAT:_UConverter_toUnicode_CompoundText_OFFSETS
	DD	FLAT:_UConverter_fromUnicode_CompoundText_OFFSETS
	DD	FLAT:_UConverter_fromUnicode_CompoundText_OFFSETS
	DD	00H
	DD	00H
	DD	FLAT:__CompoundTextgetName
	DD	00H
	DD	00H
	DD	FLAT:__CompoundText_GetUnicodeSet
	ORG $+8
__CompoundTextStaticData DD 064H
	DB	'COMPOUND_TEXT', 00H
	ORG $+46
	DD	00H
	DB	00H
	DB	021H
	DB	01H
	DB	06H
	DB	0efH
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+4
__CompoundTextData_56 DD 0e4H
	DD	0ffffffffH
	DD	00H
	DD	FLAT:__CompoundTextStaticData
	DB	00H
	DB	00H
	ORG $+2
	DD	FLAT:__CompoundTextImpl
	DD	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+1
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	ORG $+126
	DD	00H
	DD	00H
	DD	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+1
	DW	00H
	ORG $+2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
CONST	ENDS
PUBLIC	??_C@_0BC@LFOEHMOL@ibm?9923_P100?91998?$AA@	; `string'
PUBLIC	??_C@_0BB@BCJEGKIH@iso?98859_14?91998?$AA@	; `string'
PUBLIC	??_C@_0BC@PFIOJEPI@ibm?9913_P100?92000?$AA@	; `string'
PUBLIC	??_C@_0BC@CGCFCCAH@ibm?9912_P100?91995?$AA@	; `string'
PUBLIC	??_C@_0BC@PEPCLJEM@ibm?9874_P100?91995?$AA@	; `string'
PUBLIC	??_C@_0BC@MJBIIHOH@ibm?9914_P100?91995?$AA@	; `string'
PUBLIC	??_C@_0BC@CFCDBJHI@ibm?9916_P100?91995?$AA@	; `string'
PUBLIC	??_C@_0BC@FCLNMLII@ibm?9915_P100?91995?$AA@	; `string'
PUBLIC	??_C@_0BI@IHBLKOHN@icu?9internal?9compound?9t?$AA@ ; `string'
PUBLIC	??_C@_0BJ@KCBCBFGL@icu?9internal?9compound?9d7?$AA@ ; `string'
PUBLIC	??_C@_0BJ@LLAJCECK@icu?9internal?9compound?9d6?$AA@ ; `string'
PUBLIC	??_C@_0BJ@JACEHHOJ@icu?9internal?9compound?9d5?$AA@ ; `string'
PUBLIC	??_C@_0BJ@IJDPEGKI@icu?9internal?9compound?9d4?$AA@ ; `string'
PUBLIC	??_C@_0BJ@MGHONAGP@icu?9internal?9compound?9d3?$AA@ ; `string'
PUBLIC	??_C@_0BJ@NPGFOBCO@icu?9internal?9compound?9d2?$AA@ ; `string'
PUBLIC	??_C@_0BJ@PEEILCON@icu?9internal?9compound?9d1?$AA@ ; `string'
PUBLIC	??_C@_0BJ@NPBHGFJK@icu?9internal?9compound?9s3?$AA@ ; `string'
PUBLIC	??_C@_0BJ@MGAMFENL@icu?9internal?9compound?9s2?$AA@ ; `string'
PUBLIC	??_C@_0BJ@ONCBAHBI@icu?9internal?9compound?9s1?$AA@ ; `string'
PUBLIC	__$ArrayPad$
EXTRN	_ucnv_loadSharedData_56:PROC
EXTRN	_uprv_malloc_56:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__RTC_CheckEsp:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT ??_C@_0BC@LFOEHMOL@ibm?9923_P100?91998?$AA@
; File d:\mozilla\intl\icu\source\common\ucnv_ct.c
CONST	SEGMENT
??_C@_0BC@LFOEHMOL@ibm?9923_P100?91998?$AA@ DB 'ibm-923_P100-1998', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@BCJEGKIH@iso?98859_14?91998?$AA@
CONST	SEGMENT
??_C@_0BB@BCJEGKIH@iso?98859_14?91998?$AA@ DB 'iso-8859_14-1998', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@PFIOJEPI@ibm?9913_P100?92000?$AA@
CONST	SEGMENT
??_C@_0BC@PFIOJEPI@ibm?9913_P100?92000?$AA@ DB 'ibm-913_P100-2000', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@CGCFCCAH@ibm?9912_P100?91995?$AA@
CONST	SEGMENT
??_C@_0BC@CGCFCCAH@ibm?9912_P100?91995?$AA@ DB 'ibm-912_P100-1995', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@PEPCLJEM@ibm?9874_P100?91995?$AA@
CONST	SEGMENT
??_C@_0BC@PEPCLJEM@ibm?9874_P100?91995?$AA@ DB 'ibm-874_P100-1995', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@MJBIIHOH@ibm?9914_P100?91995?$AA@
CONST	SEGMENT
??_C@_0BC@MJBIIHOH@ibm?9914_P100?91995?$AA@ DB 'ibm-914_P100-1995', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@CFCDBJHI@ibm?9916_P100?91995?$AA@
CONST	SEGMENT
??_C@_0BC@CFCDBJHI@ibm?9916_P100?91995?$AA@ DB 'ibm-916_P100-1995', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@FCLNMLII@ibm?9915_P100?91995?$AA@
CONST	SEGMENT
??_C@_0BC@FCLNMLII@ibm?9915_P100?91995?$AA@ DB 'ibm-915_P100-1995', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@IHBLKOHN@icu?9internal?9compound?9t?$AA@
CONST	SEGMENT
??_C@_0BI@IHBLKOHN@icu?9internal?9compound?9t?$AA@ DB 'icu-internal-compo'
	DB	'und-t', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@KCBCBFGL@icu?9internal?9compound?9d7?$AA@
CONST	SEGMENT
??_C@_0BJ@KCBCBFGL@icu?9internal?9compound?9d7?$AA@ DB 'icu-internal-comp'
	DB	'ound-d7', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@LLAJCECK@icu?9internal?9compound?9d6?$AA@
CONST	SEGMENT
??_C@_0BJ@LLAJCECK@icu?9internal?9compound?9d6?$AA@ DB 'icu-internal-comp'
	DB	'ound-d6', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@JACEHHOJ@icu?9internal?9compound?9d5?$AA@
CONST	SEGMENT
??_C@_0BJ@JACEHHOJ@icu?9internal?9compound?9d5?$AA@ DB 'icu-internal-comp'
	DB	'ound-d5', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@IJDPEGKI@icu?9internal?9compound?9d4?$AA@
CONST	SEGMENT
??_C@_0BJ@IJDPEGKI@icu?9internal?9compound?9d4?$AA@ DB 'icu-internal-comp'
	DB	'ound-d4', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@MGHONAGP@icu?9internal?9compound?9d3?$AA@
CONST	SEGMENT
??_C@_0BJ@MGHONAGP@icu?9internal?9compound?9d3?$AA@ DB 'icu-internal-comp'
	DB	'ound-d3', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@NPGFOBCO@icu?9internal?9compound?9d2?$AA@
CONST	SEGMENT
??_C@_0BJ@NPGFOBCO@icu?9internal?9compound?9d2?$AA@ DB 'icu-internal-comp'
	DB	'ound-d2', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@PEEILCON@icu?9internal?9compound?9d1?$AA@
CONST	SEGMENT
??_C@_0BJ@PEEILCON@icu?9internal?9compound?9d1?$AA@ DB 'icu-internal-comp'
	DB	'ound-d1', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@NPBHGFJK@icu?9internal?9compound?9s3?$AA@
CONST	SEGMENT
??_C@_0BJ@NPBHGFJK@icu?9internal?9compound?9s3?$AA@ DB 'icu-internal-comp'
	DB	'ound-s3', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@MGAMFENL@icu?9internal?9compound?9s2?$AA@
CONST	SEGMENT
??_C@_0BJ@MGAMFENL@icu?9internal?9compound?9s2?$AA@ DB 'icu-internal-comp'
	DB	'ound-s2', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@ONCBAHBI@icu?9internal?9compound?9s1?$AA@
CONST	SEGMENT
??_C@_0BJ@ONCBAHBI@icu?9internal?9compound?9s1?$AA@ DB 'icu-internal-comp'
	DB	'ound-s1', 00H				; `string'
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT __CompoundTextOpen
_TEXT	SEGMENT
_stackArgs$10971 = -280					; size = 28
_stackPieces$10970 = -244				; size = 224
_myConverterData$10968 = -12				; size = 4
__$ArrayPad$ = -4					; size = 4
_cnv$ = 8						; size = 4
_pArgs$ = 12						; size = 4
_errorCode$ = 16					; size = 4
__CompoundTextOpen PROC					; COMDAT
; Line 259
	push	ebp
	mov	ebp, esp
	sub	esp, 476				; 000001dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-476]
	mov	ecx, 119				; 00000077H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 260
	push	84					; 00000054H
	call	_uprv_malloc_56
	add	esp, 4
	mov	ecx, DWORD PTR _cnv$[ebp]
	mov	DWORD PTR [ecx+8], eax
; Line 261
	mov	eax, DWORD PTR _cnv$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	$LN4@CompoundTe
; Line 262
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _myConverterData$10968[ebp], ecx
; Line 265
	mov	DWORD PTR _stackArgs$10971[ebp], 28	; 0000001cH
	xor	eax, eax
	mov	DWORD PTR _stackArgs$10971[ebp+4], eax
	mov	DWORD PTR _stackArgs$10971[ebp+8], eax
	mov	DWORD PTR _stackArgs$10971[ebp+12], eax
	mov	DWORD PTR _stackArgs$10971[ebp+16], eax
	mov	DWORD PTR _stackArgs$10971[ebp+20], eax
	mov	DWORD PTR _stackArgs$10971[ebp+24], eax
; Line 267
	mov	eax, DWORD PTR _myConverterData$10968[ebp]
	mov	DWORD PTR [eax], 0
; Line 268
	mov	eax, DWORD PTR _errorCode$[ebp]
	push	eax
	lea	ecx, DWORD PTR _stackArgs$10971[ebp]
	push	ecx
	lea	edx, DWORD PTR _stackPieces$10970[ebp]
	push	edx
	push	OFFSET ??_C@_0BJ@ONCBAHBI@icu?9internal?9compound?9s1?$AA@
	call	_ucnv_loadSharedData_56
	add	esp, 16					; 00000010H
	mov	ecx, DWORD PTR _myConverterData$10968[ebp]
	mov	DWORD PTR [ecx+4], eax
; Line 269
	mov	eax, DWORD PTR _errorCode$[ebp]
	push	eax
	lea	ecx, DWORD PTR _stackArgs$10971[ebp]
	push	ecx
	lea	edx, DWORD PTR _stackPieces$10970[ebp]
	push	edx
	push	OFFSET ??_C@_0BJ@MGAMFENL@icu?9internal?9compound?9s2?$AA@
	call	_ucnv_loadSharedData_56
	add	esp, 16					; 00000010H
	mov	ecx, DWORD PTR _myConverterData$10968[ebp]
	mov	DWORD PTR [ecx+8], eax
; Line 270
	mov	eax, DWORD PTR _errorCode$[ebp]
	push	eax
	lea	ecx, DWORD PTR _stackArgs$10971[ebp]
	push	ecx
	lea	edx, DWORD PTR _stackPieces$10970[ebp]
	push	edx
	push	OFFSET ??_C@_0BJ@NPBHGFJK@icu?9internal?9compound?9s3?$AA@
	call	_ucnv_loadSharedData_56
	add	esp, 16					; 00000010H
	mov	ecx, DWORD PTR _myConverterData$10968[ebp]
	mov	DWORD PTR [ecx+12], eax
; Line 271
	mov	eax, DWORD PTR _errorCode$[ebp]
	push	eax
	lea	ecx, DWORD PTR _stackArgs$10971[ebp]
	push	ecx
	lea	edx, DWORD PTR _stackPieces$10970[ebp]
	push	edx
	push	OFFSET ??_C@_0BJ@PEEILCON@icu?9internal?9compound?9d1?$AA@
	call	_ucnv_loadSharedData_56
	add	esp, 16					; 00000010H
	mov	ecx, DWORD PTR _myConverterData$10968[ebp]
	mov	DWORD PTR [ecx+16], eax
; Line 272
	mov	eax, DWORD PTR _errorCode$[ebp]
	push	eax
	lea	ecx, DWORD PTR _stackArgs$10971[ebp]
	push	ecx
	lea	edx, DWORD PTR _stackPieces$10970[ebp]
	push	edx
	push	OFFSET ??_C@_0BJ@NPGFOBCO@icu?9internal?9compound?9d2?$AA@
	call	_ucnv_loadSharedData_56
	add	esp, 16					; 00000010H
	mov	ecx, DWORD PTR _myConverterData$10968[ebp]
	mov	DWORD PTR [ecx+20], eax
; Line 273
	mov	eax, DWORD PTR _errorCode$[ebp]
	push	eax
	lea	ecx, DWORD PTR _stackArgs$10971[ebp]
	push	ecx
	lea	edx, DWORD PTR _stackPieces$10970[ebp]
	push	edx
	push	OFFSET ??_C@_0BJ@MGHONAGP@icu?9internal?9compound?9d3?$AA@
	call	_ucnv_loadSharedData_56
	add	esp, 16					; 00000010H
	mov	ecx, DWORD PTR _myConverterData$10968[ebp]
	mov	DWORD PTR [ecx+24], eax
; Line 274
	mov	eax, DWORD PTR _errorCode$[ebp]
	push	eax
	lea	ecx, DWORD PTR _stackArgs$10971[ebp]
	push	ecx
	lea	edx, DWORD PTR _stackPieces$10970[ebp]
	push	edx
	push	OFFSET ??_C@_0BJ@IJDPEGKI@icu?9internal?9compound?9d4?$AA@
	call	_ucnv_loadSharedData_56
	add	esp, 16					; 00000010H
	mov	ecx, DWORD PTR _myConverterData$10968[ebp]
	mov	DWORD PTR [ecx+28], eax
; Line 275
	mov	eax, DWORD PTR _errorCode$[ebp]
	push	eax
	lea	ecx, DWORD PTR _stackArgs$10971[ebp]
	push	ecx
	lea	edx, DWORD PTR _stackPieces$10970[ebp]
	push	edx
	push	OFFSET ??_C@_0BJ@JACEHHOJ@icu?9internal?9compound?9d5?$AA@
	call	_ucnv_loadSharedData_56
	add	esp, 16					; 00000010H
	mov	ecx, DWORD PTR _myConverterData$10968[ebp]
	mov	DWORD PTR [ecx+32], eax
; Line 276
	mov	eax, DWORD PTR _errorCode$[ebp]
	push	eax
	lea	ecx, DWORD PTR _stackArgs$10971[ebp]
	push	ecx
	lea	edx, DWORD PTR _stackPieces$10970[ebp]
	push	edx
	push	OFFSET ??_C@_0BJ@LLAJCECK@icu?9internal?9compound?9d6?$AA@
	call	_ucnv_loadSharedData_56
	add	esp, 16					; 00000010H
	mov	ecx, DWORD PTR _myConverterData$10968[ebp]
	mov	DWORD PTR [ecx+36], eax
; Line 277
	mov	eax, DWORD PTR _errorCode$[ebp]
	push	eax
	lea	ecx, DWORD PTR _stackArgs$10971[ebp]
	push	ecx
	lea	edx, DWORD PTR _stackPieces$10970[ebp]
	push	edx
	push	OFFSET ??_C@_0BJ@KCBCBFGL@icu?9internal?9compound?9d7?$AA@
	call	_ucnv_loadSharedData_56
	add	esp, 16					; 00000010H
	mov	ecx, DWORD PTR _myConverterData$10968[ebp]
	mov	DWORD PTR [ecx+40], eax
; Line 278
	mov	eax, DWORD PTR _errorCode$[ebp]
	push	eax
	lea	ecx, DWORD PTR _stackArgs$10971[ebp]
	push	ecx
	lea	edx, DWORD PTR _stackPieces$10970[ebp]
	push	edx
	push	OFFSET ??_C@_0BI@IHBLKOHN@icu?9internal?9compound?9t?$AA@
	call	_ucnv_loadSharedData_56
	add	esp, 16					; 00000010H
	mov	ecx, DWORD PTR _myConverterData$10968[ebp]
	mov	DWORD PTR [ecx+44], eax
; Line 280
	mov	eax, DWORD PTR _errorCode$[ebp]
	push	eax
	lea	ecx, DWORD PTR _stackArgs$10971[ebp]
	push	ecx
	lea	edx, DWORD PTR _stackPieces$10970[ebp]
	push	edx
	push	OFFSET ??_C@_0BC@FCLNMLII@ibm?9915_P100?91995?$AA@
	call	_ucnv_loadSharedData_56
	add	esp, 16					; 00000010H
	mov	ecx, DWORD PTR _myConverterData$10968[ebp]
	mov	DWORD PTR [ecx+48], eax
; Line 281
	mov	eax, DWORD PTR _errorCode$[ebp]
	push	eax
	lea	ecx, DWORD PTR _stackArgs$10971[ebp]
	push	ecx
	lea	edx, DWORD PTR _stackPieces$10970[ebp]
	push	edx
	push	OFFSET ??_C@_0BC@CFCDBJHI@ibm?9916_P100?91995?$AA@
	call	_ucnv_loadSharedData_56
	add	esp, 16					; 00000010H
	mov	ecx, DWORD PTR _myConverterData$10968[ebp]
	mov	DWORD PTR [ecx+52], eax
; Line 282
	mov	eax, DWORD PTR _errorCode$[ebp]
	push	eax
	lea	ecx, DWORD PTR _stackArgs$10971[ebp]
	push	ecx
	lea	edx, DWORD PTR _stackPieces$10970[ebp]
	push	edx
	push	OFFSET ??_C@_0BC@MJBIIHOH@ibm?9914_P100?91995?$AA@
	call	_ucnv_loadSharedData_56
	add	esp, 16					; 00000010H
	mov	ecx, DWORD PTR _myConverterData$10968[ebp]
	mov	DWORD PTR [ecx+56], eax
; Line 283
	mov	eax, DWORD PTR _errorCode$[ebp]
	push	eax
	lea	ecx, DWORD PTR _stackArgs$10971[ebp]
	push	ecx
	lea	edx, DWORD PTR _stackPieces$10970[ebp]
	push	edx
	push	OFFSET ??_C@_0BC@PEPCLJEM@ibm?9874_P100?91995?$AA@
	call	_ucnv_loadSharedData_56
	add	esp, 16					; 00000010H
	mov	ecx, DWORD PTR _myConverterData$10968[ebp]
	mov	DWORD PTR [ecx+60], eax
; Line 284
	mov	eax, DWORD PTR _errorCode$[ebp]
	push	eax
	lea	ecx, DWORD PTR _stackArgs$10971[ebp]
	push	ecx
	lea	edx, DWORD PTR _stackPieces$10970[ebp]
	push	edx
	push	OFFSET ??_C@_0BC@CGCFCCAH@ibm?9912_P100?91995?$AA@
	call	_ucnv_loadSharedData_56
	add	esp, 16					; 00000010H
	mov	ecx, DWORD PTR _myConverterData$10968[ebp]
	mov	DWORD PTR [ecx+64], eax
; Line 285
	mov	eax, DWORD PTR _errorCode$[ebp]
	push	eax
	lea	ecx, DWORD PTR _stackArgs$10971[ebp]
	push	ecx
	lea	edx, DWORD PTR _stackPieces$10970[ebp]
	push	edx
	push	OFFSET ??_C@_0BC@PFIOJEPI@ibm?9913_P100?92000?$AA@
	call	_ucnv_loadSharedData_56
	add	esp, 16					; 00000010H
	mov	ecx, DWORD PTR _myConverterData$10968[ebp]
	mov	DWORD PTR [ecx+68], eax
; Line 286
	mov	eax, DWORD PTR _errorCode$[ebp]
	push	eax
	lea	ecx, DWORD PTR _stackArgs$10971[ebp]
	push	ecx
	lea	edx, DWORD PTR _stackPieces$10970[ebp]
	push	edx
	push	OFFSET ??_C@_0BB@BCJEGKIH@iso?98859_14?91998?$AA@
	call	_ucnv_loadSharedData_56
	add	esp, 16					; 00000010H
	mov	ecx, DWORD PTR _myConverterData$10968[ebp]
	mov	DWORD PTR [ecx+72], eax
; Line 287
	mov	eax, DWORD PTR _errorCode$[ebp]
	push	eax
	lea	ecx, DWORD PTR _stackArgs$10971[ebp]
	push	ecx
	lea	edx, DWORD PTR _stackPieces$10970[ebp]
	push	edx
	push	OFFSET ??_C@_0BC@LFOEHMOL@ibm?9923_P100?91998?$AA@
	call	_ucnv_loadSharedData_56
	add	esp, 16					; 00000010H
	mov	ecx, DWORD PTR _myConverterData$10968[ebp]
	mov	DWORD PTR [ecx+76], eax
; Line 289
	mov	eax, DWORD PTR _errorCode$[ebp]
	cmp	DWORD PTR [eax], 0
	jg	SHORT $LN2@CompoundTe
	mov	eax, DWORD PTR _pArgs$[ebp]
	movsx	ecx, BYTE PTR [eax+8]
	test	ecx, ecx
	je	SHORT $LN3@CompoundTe
$LN2@CompoundTe:
; Line 290
	mov	eax, DWORD PTR _cnv$[ebp]
	push	eax
	call	__CompoundTextClose
	add	esp, 4
; Line 291
	jmp	SHORT $LN5@CompoundTe
$LN3@CompoundTe:
; Line 294
	mov	eax, DWORD PTR _myConverterData$10968[ebp]
	mov	DWORD PTR [eax+80], 0
; Line 295
	jmp	SHORT $LN5@CompoundTe
$LN4@CompoundTe:
; Line 296
	mov	eax, DWORD PTR _errorCode$[ebp]
	mov	DWORD PTR [eax], 7
$LN5@CompoundTe:
; Line 298
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@CompoundTe
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 476				; 000001dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN10@CompoundTe:
	DD	2
	DD	$LN9@CompoundTe
$LN9@CompoundTe:
	DD	-244					; ffffff0cH
	DD	224					; 000000e0H
	DD	$LN7@CompoundTe
	DD	-280					; fffffee8H
	DD	28					; 0000001cH
	DD	$LN8@CompoundTe
$LN8@CompoundTe:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	65					; 00000041H
	DB	114					; 00000072H
	DB	103					; 00000067H
	DB	115					; 00000073H
	DB	0
$LN7@CompoundTe:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	80					; 00000050H
	DB	105					; 00000069H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
__CompoundTextOpen ENDP
_TEXT	ENDS
EXTRN	_uprv_free_56:PROC
EXTRN	_ucnv_unloadSharedDataIfReady_56:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __CompoundTextClose
_TEXT	SEGMENT
_i$ = -20						; size = 4
_myConverterData$ = -8					; size = 4
_converter$ = 8						; size = 4
__CompoundTextClose PROC				; COMDAT
; Line 302
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 303
	mov	eax, DWORD PTR _converter$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _myConverterData$[ebp], ecx
; Line 306
	mov	eax, DWORD PTR _converter$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN6@CompoundTe@2
; Line 308
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@CompoundTe@2
$LN3@CompoundTe@2:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@CompoundTe@2:
	cmp	DWORD PTR _i$[ebp], 20			; 00000014H
	jge	SHORT $LN2@CompoundTe@2
; Line 309
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _myConverterData$[ebp]
	cmp	DWORD PTR [ecx+eax*4], 0
	je	SHORT $LN1@CompoundTe@2
; Line 310
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _myConverterData$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	push	edx
	call	_ucnv_unloadSharedDataIfReady_56
	add	esp, 4
$LN1@CompoundTe@2:
; Line 312
	jmp	SHORT $LN3@CompoundTe@2
$LN2@CompoundTe@2:
; Line 314
	mov	eax, DWORD PTR _converter$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_uprv_free_56
	add	esp, 4
$LN6@CompoundTe@2:
; Line 316
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__CompoundTextClose ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __CompoundTextReset
_TEXT	SEGMENT
_converter$ = 8						; size = 4
_choice$ = 12						; size = 4
__CompoundTextReset PROC				; COMDAT
; Line 319
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 320
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
__CompoundTextReset ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BC@MILLLJIK@x11?9compound?9text?$AA@	; `string'
;	COMDAT ??_C@_0BC@MILLLJIK@x11?9compound?9text?$AA@
CONST	SEGMENT
??_C@_0BC@MILLLJIK@x11?9compound?9text?$AA@ DB 'x11-compound-text', 00H ; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT __CompoundTextgetName
_TEXT	SEGMENT
_cnv$ = 8						; size = 4
__CompoundTextgetName PROC				; COMDAT
; Line 323
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 324
	mov	eax, OFFSET ??_C@_0BC@MILLLJIK@x11?9compound?9text?$AA@
; Line 325
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
__CompoundTextgetName ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_ucnv_MBCSFromUChar32_56:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _UConverter_fromUnicode_CompoundText_OFFSETS
_TEXT	SEGMENT
_trail$11055 = -220					; size = 2
_myConverterData$ = -208				; size = 4
_j$ = -196						; size = 4
_n$ = -184						; size = 4
_i$ = -172						; size = 4
_pValueLength$ = -160					; size = 4
_pValue$ = -148						; size = 4
_tmpState$ = -136					; size = 4
_currentState$ = -124					; size = 4
_tmpTargetBufferLength$ = -112				; size = 4
_tmpTargetBuffer$ = -100				; size = 7
_useFallback$ = -81					; size = 1
_sourceChar$ = -72					; size = 4
_sourceLimit$ = -60					; size = 4
_source$ = -48						; size = 4
_targetLimit$ = -36					; size = 4
_target$ = -24						; size = 4
_cnv$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_args$ = 8						; size = 4
_err$ = 12						; size = 4
_UConverter_fromUnicode_CompoundText_OFFSETS PROC	; COMDAT
; Line 328
	push	ebp
	mov	ebp, esp
	sub	esp, 416				; 000001a0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-416]
	mov	ecx, 104				; 00000068H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 329
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _cnv$[ebp], ecx
; Line 330
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _target$[ebp], ecx
; Line 331
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _targetLimit$[ebp], ecx
; Line 332
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _source$[ebp], ecx
; Line 333
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _sourceLimit$[ebp], ecx
; Line 336
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	cl, BYTE PTR [eax+35]
	mov	BYTE PTR _useFallback$[ebp], cl
; Line 338
	mov	DWORD PTR _tmpTargetBufferLength$[ebp], 0
; Line 341
	mov	DWORD PTR _pValueLength$[ebp], 0
; Line 344
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _myConverterData$[ebp], ecx
; Line 346
	mov	eax, DWORD PTR _myConverterData$[ebp]
	mov	ecx, DWORD PTR [eax+80]
	mov	DWORD PTR _currentState$[ebp], ecx
; Line 349
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	DWORD PTR _sourceChar$[ebp], ecx
	cmp	DWORD PTR _sourceChar$[ebp], 0
	je	SHORT $LN43@UConverter
	mov	eax, DWORD PTR _target$[ebp]
	cmp	eax, DWORD PTR _targetLimit$[ebp]
	jae	SHORT $LN43@UConverter
; Line 350
	jmp	SHORT $getTrail$11047
$LN43@UConverter:
; Line 353
	mov	eax, DWORD PTR _source$[ebp]
	cmp	eax, DWORD PTR _sourceLimit$[ebp]
	jae	$LN42@UConverter
; Line 354
	mov	eax, DWORD PTR _target$[ebp]
	cmp	eax, DWORD PTR _targetLimit$[ebp]
	jae	$LN41@UConverter
; Line 356
	mov	eax, DWORD PTR _source$[ebp]
	movzx	ecx, WORD PTR [eax]
	mov	DWORD PTR _sourceChar$[ebp], ecx
	mov	edx, DWORD PTR _source$[ebp]
	add	edx, 2
	mov	DWORD PTR _source$[ebp], edx
; Line 358
	mov	eax, DWORD PTR _sourceChar$[ebp]
	and	eax, -2048				; fffff800H
	cmp	eax, 55296				; 0000d800H
	jne	$LN40@UConverter
; Line 359
	mov	eax, DWORD PTR _sourceChar$[ebp]
	and	eax, 1024				; 00000400H
	jne	SHORT $LN39@UConverter
$getTrail$11047:
; Line 362
	mov	eax, DWORD PTR _source$[ebp]
	cmp	eax, DWORD PTR _sourceLimit$[ebp]
	jae	SHORT $LN38@UConverter
; Line 364
	mov	eax, DWORD PTR _source$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR _trail$11055[ebp], cx
; Line 365
	movzx	eax, WORD PTR _trail$11055[ebp]
	and	eax, -1024				; fffffc00H
	cmp	eax, 56320				; 0000dc00H
	jne	SHORT $LN37@UConverter
; Line 366
	mov	eax, DWORD PTR _source$[ebp]
	add	eax, 2
	mov	DWORD PTR _source$[ebp], eax
; Line 367
	mov	eax, DWORD PTR _sourceChar$[ebp]
	shl	eax, 10					; 0000000aH
	movzx	ecx, WORD PTR _trail$11055[ebp]
	lea	edx, DWORD PTR [eax+ecx-56613888]
	mov	DWORD PTR _sourceChar$[ebp], edx
; Line 368
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	DWORD PTR [eax+56], 0
; Line 371
	jmp	SHORT $LN36@UConverter
$LN37@UConverter:
; Line 374
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 12			; 0000000cH
; Line 375
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	ecx, DWORD PTR _sourceChar$[ebp]
	mov	DWORD PTR [eax+56], ecx
; Line 376
	jmp	$LN42@UConverter
$LN36@UConverter:
; Line 378
	jmp	SHORT $LN35@UConverter
$LN38@UConverter:
; Line 380
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	ecx, DWORD PTR _sourceChar$[ebp]
	mov	DWORD PTR [eax+56], ecx
; Line 381
	jmp	$LN42@UConverter
$LN35@UConverter:
; Line 383
	jmp	SHORT $LN40@UConverter
$LN39@UConverter:
; Line 386
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 12			; 0000000cH
; Line 387
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	ecx, DWORD PTR _sourceChar$[ebp]
	mov	DWORD PTR [eax+56], ecx
; Line 388
	jmp	$LN42@UConverter
$LN40@UConverter:
; Line 392
	mov	DWORD PTR _tmpTargetBufferLength$[ebp], 0
; Line 393
	mov	eax, DWORD PTR _sourceChar$[ebp]
	push	eax
	call	_getState
	add	esp, 4
	mov	DWORD PTR _tmpState$[ebp], eax
; Line 395
	cmp	DWORD PTR _tmpState$[ebp], -1
	je	SHORT $LN33@UConverter
	mov	eax, DWORD PTR _currentState$[ebp]
	cmp	eax, DWORD PTR _tmpState$[ebp]
	je	SHORT $LN33@UConverter
; Line 397
	mov	eax, DWORD PTR _tmpState$[ebp]
	mov	DWORD PTR _currentState$[ebp], eax
; Line 398
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN32@UConverter
$LN31@UConverter:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN32@UConverter:
	mov	eax, DWORD PTR _currentState$[ebp]
	imul	eax, 5
	mov	ecx, DWORD PTR _i$[ebp]
	movzx	edx, BYTE PTR _escSeqCompoundText[eax+ecx]
	test	edx, edx
	je	SHORT $LN33@UConverter
; Line 399
	mov	eax, DWORD PTR _currentState$[ebp]
	imul	eax, 5
	mov	ecx, DWORD PTR _tmpTargetBufferLength$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	mov	al, BYTE PTR _escSeqCompoundText[eax+edx]
	mov	BYTE PTR _tmpTargetBuffer$[ebp+ecx], al
	mov	ecx, DWORD PTR _tmpTargetBufferLength$[ebp]
	add	ecx, 1
	mov	DWORD PTR _tmpTargetBufferLength$[ebp], ecx
; Line 400
	jmp	SHORT $LN31@UConverter
$LN33@UConverter:
; Line 403
	cmp	DWORD PTR _tmpState$[ebp], -1
	jne	$LN29@UConverter
; Line 405
	mov	DWORD PTR _i$[ebp], 1
	jmp	SHORT $LN28@UConverter
$LN27@UConverter:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN28@UConverter:
	cmp	DWORD PTR _i$[ebp], 12			; 0000000cH
	jge	$LN26@UConverter
; Line 406
	movzx	eax, BYTE PTR _useFallback$[ebp]
	push	eax
	lea	ecx, DWORD PTR _pValue$[ebp]
	push	ecx
	mov	edx, DWORD PTR _sourceChar$[ebp]
	push	edx
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _myConverterData$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	push	edx
	call	_ucnv_MBCSFromUChar32_56
	add	esp, 16					; 00000010H
	mov	DWORD PTR _pValueLength$[ebp], eax
; Line 407
	cmp	DWORD PTR _pValueLength$[ebp], 0
	jle	$LN25@UConverter
; Line 408
	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR _tmpState$[ebp], eax
; Line 409
	mov	eax, DWORD PTR _currentState$[ebp]
	cmp	eax, DWORD PTR _tmpState$[ebp]
	je	SHORT $LN24@UConverter
; Line 410
	mov	eax, DWORD PTR _tmpState$[ebp]
	mov	DWORD PTR _currentState$[ebp], eax
; Line 411
	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN23@UConverter
$LN22@UConverter:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN23@UConverter:
	mov	eax, DWORD PTR _currentState$[ebp]
	imul	eax, 5
	mov	ecx, DWORD PTR _j$[ebp]
	movzx	edx, BYTE PTR _escSeqCompoundText[eax+ecx]
	test	edx, edx
	je	SHORT $LN24@UConverter
; Line 412
	mov	eax, DWORD PTR _currentState$[ebp]
	imul	eax, 5
	mov	ecx, DWORD PTR _tmpTargetBufferLength$[ebp]
	mov	edx, DWORD PTR _j$[ebp]
	mov	al, BYTE PTR _escSeqCompoundText[eax+edx]
	mov	BYTE PTR _tmpTargetBuffer$[ebp+ecx], al
	mov	ecx, DWORD PTR _tmpTargetBufferLength$[ebp]
	add	ecx, 1
	mov	DWORD PTR _tmpTargetBufferLength$[ebp], ecx
; Line 413
	jmp	SHORT $LN22@UConverter
$LN24@UConverter:
; Line 415
	mov	eax, DWORD PTR _pValueLength$[ebp]
	sub	eax, 1
	mov	DWORD PTR _n$[ebp], eax
	jmp	SHORT $LN20@UConverter
$LN19@UConverter:
	mov	eax, DWORD PTR _n$[ebp]
	sub	eax, 1
	mov	DWORD PTR _n$[ebp], eax
$LN20@UConverter:
	cmp	DWORD PTR _n$[ebp], 0
	jl	SHORT $LN18@UConverter
; Line 416
	mov	ecx, DWORD PTR _n$[ebp]
	shl	ecx, 3
	mov	eax, DWORD PTR _pValue$[ebp]
	shr	eax, cl
	mov	ecx, DWORD PTR _tmpTargetBufferLength$[ebp]
	mov	BYTE PTR _tmpTargetBuffer$[ebp+ecx], al
	mov	edx, DWORD PTR _tmpTargetBufferLength$[ebp]
	add	edx, 1
	mov	DWORD PTR _tmpTargetBufferLength$[ebp], edx
; Line 417
	jmp	SHORT $LN19@UConverter
$LN18@UConverter:
; Line 418
	jmp	SHORT $LN26@UConverter
$LN25@UConverter:
; Line 420
	jmp	$LN27@UConverter
$LN26@UConverter:
; Line 421
	jmp	$LN17@UConverter
$LN29@UConverter:
	cmp	DWORD PTR _tmpState$[ebp], 0
	jne	SHORT $LN16@UConverter
; Line 422
	mov	eax, DWORD PTR _tmpTargetBufferLength$[ebp]
	mov	cl, BYTE PTR _sourceChar$[ebp]
	mov	BYTE PTR _tmpTargetBuffer$[ebp+eax], cl
	mov	edx, DWORD PTR _tmpTargetBufferLength$[ebp]
	add	edx, 1
	mov	DWORD PTR _tmpTargetBufferLength$[ebp], edx
; Line 423
	jmp	$LN17@UConverter
$LN16@UConverter:
; Line 424
	movzx	eax, BYTE PTR _useFallback$[ebp]
	push	eax
	lea	ecx, DWORD PTR _pValue$[ebp]
	push	ecx
	mov	edx, DWORD PTR _sourceChar$[ebp]
	push	edx
	mov	eax, DWORD PTR _currentState$[ebp]
	mov	ecx, DWORD PTR _myConverterData$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	push	edx
	call	_ucnv_MBCSFromUChar32_56
	add	esp, 16					; 00000010H
	mov	DWORD PTR _pValueLength$[ebp], eax
; Line 425
	cmp	DWORD PTR _pValueLength$[ebp], 0
	jle	SHORT $LN17@UConverter
; Line 426
	mov	eax, DWORD PTR _pValueLength$[ebp]
	sub	eax, 1
	mov	DWORD PTR _n$[ebp], eax
	jmp	SHORT $LN13@UConverter
$LN12@UConverter:
	mov	eax, DWORD PTR _n$[ebp]
	sub	eax, 1
	mov	DWORD PTR _n$[ebp], eax
$LN13@UConverter:
	cmp	DWORD PTR _n$[ebp], 0
	jl	SHORT $LN17@UConverter
; Line 427
	mov	ecx, DWORD PTR _n$[ebp]
	shl	ecx, 3
	mov	eax, DWORD PTR _pValue$[ebp]
	shr	eax, cl
	mov	ecx, DWORD PTR _tmpTargetBufferLength$[ebp]
	mov	BYTE PTR _tmpTargetBuffer$[ebp+ecx], al
	mov	edx, DWORD PTR _tmpTargetBufferLength$[ebp]
	add	edx, 1
	mov	DWORD PTR _tmpTargetBufferLength$[ebp], edx
; Line 428
	jmp	SHORT $LN12@UConverter
$LN17@UConverter:
; Line 432
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN10@UConverter
$LN9@UConverter:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN10@UConverter:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _tmpTargetBufferLength$[ebp]
	jge	SHORT $LN8@UConverter
; Line 433
	mov	eax, DWORD PTR _target$[ebp]
	cmp	eax, DWORD PTR _targetLimit$[ebp]
	jae	SHORT $LN7@UConverter
; Line 434
	mov	eax, DWORD PTR _target$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	dl, BYTE PTR _tmpTargetBuffer$[ebp+ecx]
	mov	BYTE PTR [eax], dl
	mov	eax, DWORD PTR _target$[ebp]
	add	eax, 1
	mov	DWORD PTR _target$[ebp], eax
; Line 435
	jmp	SHORT $LN6@UConverter
$LN7@UConverter:
; Line 436
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
; Line 437
	jmp	SHORT $LN8@UConverter
$LN6@UConverter:
; Line 439
	jmp	SHORT $LN9@UConverter
$LN8@UConverter:
; Line 441
	mov	eax, DWORD PTR _err$[ebp]
	cmp	DWORD PTR [eax], 15			; 0000000fH
	jne	SHORT $LN5@UConverter
	jmp	SHORT $LN4@UConverter
$LN3@UConverter:
; Line 442
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@UConverter:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _tmpTargetBufferLength$[ebp]
	jge	SHORT $LN5@UConverter
; Line 443
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+4]
	movsx	edx, BYTE PTR [eax+63]
	mov	eax, DWORD PTR _i$[ebp]
	mov	al, BYTE PTR _tmpTargetBuffer$[ebp+eax]
	mov	BYTE PTR [ecx+edx+76], al
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	al, BYTE PTR [edx+63]
	add	al, 1
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx+63], al
; Line 444
	jmp	SHORT $LN3@UConverter
$LN5@UConverter:
; Line 446
	jmp	SHORT $LN1@UConverter
$LN41@UConverter:
; Line 447
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
; Line 448
	jmp	SHORT $LN42@UConverter
$LN1@UConverter:
; Line 450
	jmp	$LN43@UConverter
$LN42@UConverter:
; Line 453
	mov	eax, DWORD PTR _myConverterData$[ebp]
	mov	ecx, DWORD PTR _currentState$[ebp]
	mov	DWORD PTR [eax+80], ecx
; Line 454
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _source$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 455
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _target$[ebp]
	mov	DWORD PTR [eax+16], ecx
; Line 456
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN50@UConverter
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 416				; 000001a0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN50@UConverter:
	DD	2
	DD	$LN49@UConverter
$LN49@UConverter:
	DD	-100					; ffffff9cH
	DD	7
	DD	$LN47@UConverter
	DD	-148					; ffffff6cH
	DD	4
	DD	$LN48@UConverter
$LN48@UConverter:
	DB	112					; 00000070H
	DB	86					; 00000056H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	117					; 00000075H
	DB	101					; 00000065H
	DB	0
$LN47@UConverter:
	DB	116					; 00000074H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	84					; 00000054H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	103					; 00000067H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	66					; 00000042H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
_UConverter_fromUnicode_CompoundText_OFFSETS ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _getState
_TEXT	SEGMENT
_state$ = -8						; size = 4
_codepoint$ = 8						; size = 4
_getState PROC						; COMDAT
; Line 191
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 192
	mov	DWORD PTR _state$[ebp], -1
; Line 194
	cmp	DWORD PTR _codepoint$[ebp], 0
	je	SHORT $LN57@getState
	cmp	DWORD PTR _codepoint$[ebp], 9
	je	SHORT $LN57@getState
	cmp	DWORD PTR _codepoint$[ebp], 10		; 0000000aH
	je	SHORT $LN57@getState
	cmp	DWORD PTR _codepoint$[ebp], 32		; 00000020H
	jl	SHORT $LN56@getState
	cmp	DWORD PTR _codepoint$[ebp], 127		; 0000007fH
	jle	SHORT $LN57@getState
$LN56@getState:
	cmp	DWORD PTR _codepoint$[ebp], 160		; 000000a0H
	jl	SHORT $LN58@getState
	cmp	DWORD PTR _codepoint$[ebp], 255		; 000000ffH
	jg	SHORT $LN58@getState
$LN57@getState:
; Line 195
	mov	DWORD PTR _state$[ebp], 0
	jmp	$LN55@getState
$LN58@getState:
; Line 196
	cmp	DWORD PTR _codepoint$[ebp], 258		; 00000102H
	jl	SHORT $LN52@getState
	cmp	DWORD PTR _codepoint$[ebp], 263		; 00000107H
	jle	$LN53@getState
$LN52@getState:
	cmp	DWORD PTR _codepoint$[ebp], 268		; 0000010cH
	jl	SHORT $LN51@getState
	cmp	DWORD PTR _codepoint$[ebp], 273		; 00000111H
	jle	$LN53@getState
$LN51@getState:
	cmp	DWORD PTR _codepoint$[ebp], 280		; 00000118H
	jl	SHORT $LN50@getState
	cmp	DWORD PTR _codepoint$[ebp], 283		; 0000011bH
	jle	$LN53@getState
$LN50@getState:
	cmp	DWORD PTR _codepoint$[ebp], 313		; 00000139H
	je	$LN53@getState
	cmp	DWORD PTR _codepoint$[ebp], 314		; 0000013aH
	je	$LN53@getState
	cmp	DWORD PTR _codepoint$[ebp], 317		; 0000013dH
	je	$LN53@getState
	cmp	DWORD PTR _codepoint$[ebp], 318		; 0000013eH
	je	$LN53@getState
	cmp	DWORD PTR _codepoint$[ebp], 321		; 00000141H
	jl	SHORT $LN49@getState
	cmp	DWORD PTR _codepoint$[ebp], 324		; 00000144H
	jle	$LN53@getState
$LN49@getState:
	cmp	DWORD PTR _codepoint$[ebp], 327		; 00000147H
	je	$LN53@getState
	cmp	DWORD PTR _codepoint$[ebp], 327		; 00000147H
	je	$LN53@getState
	cmp	DWORD PTR _codepoint$[ebp], 336		; 00000150H
	je	$LN53@getState
	cmp	DWORD PTR _codepoint$[ebp], 337		; 00000151H
	je	$LN53@getState
	cmp	DWORD PTR _codepoint$[ebp], 340		; 00000154H
	je	$LN53@getState
	cmp	DWORD PTR _codepoint$[ebp], 341		; 00000155H
	je	$LN53@getState
	cmp	DWORD PTR _codepoint$[ebp], 344		; 00000158H
	jl	SHORT $LN48@getState
	cmp	DWORD PTR _codepoint$[ebp], 347		; 0000015bH
	jle	$LN53@getState
$LN48@getState:
	cmp	DWORD PTR _codepoint$[ebp], 350		; 0000015eH
	je	SHORT $LN53@getState
	cmp	DWORD PTR _codepoint$[ebp], 351		; 0000015fH
	je	SHORT $LN53@getState
	cmp	DWORD PTR _codepoint$[ebp], 352		; 00000160H
	jl	SHORT $LN47@getState
	cmp	DWORD PTR _codepoint$[ebp], 357		; 00000165H
	jle	SHORT $LN53@getState
$LN47@getState:
	cmp	DWORD PTR _codepoint$[ebp], 366		; 0000016eH
	je	SHORT $LN53@getState
	cmp	DWORD PTR _codepoint$[ebp], 367		; 0000016fH
	je	SHORT $LN53@getState
	cmp	DWORD PTR _codepoint$[ebp], 368		; 00000170H
	je	SHORT $LN53@getState
	cmp	DWORD PTR _codepoint$[ebp], 369		; 00000171H
	je	SHORT $LN53@getState
	cmp	DWORD PTR _codepoint$[ebp], 377		; 00000179H
	jl	SHORT $LN46@getState
	cmp	DWORD PTR _codepoint$[ebp], 382		; 0000017eH
	jle	SHORT $LN53@getState
$LN46@getState:
	cmp	DWORD PTR _codepoint$[ebp], 711		; 000002c7H
	je	SHORT $LN53@getState
	cmp	DWORD PTR _codepoint$[ebp], 728		; 000002d8H
	je	SHORT $LN53@getState
	cmp	DWORD PTR _codepoint$[ebp], 729		; 000002d9H
	je	SHORT $LN53@getState
	cmp	DWORD PTR _codepoint$[ebp], 731		; 000002dbH
	je	SHORT $LN53@getState
	cmp	DWORD PTR _codepoint$[ebp], 733		; 000002ddH
	jne	SHORT $LN54@getState
$LN53@getState:
; Line 197
	mov	DWORD PTR _state$[ebp], 16		; 00000010H
	jmp	$LN55@getState
$LN54@getState:
; Line 198
	cmp	DWORD PTR _codepoint$[ebp], 264		; 00000108H
	jl	SHORT $LN42@getState
	cmp	DWORD PTR _codepoint$[ebp], 267		; 0000010bH
	jle	SHORT $LN43@getState
$LN42@getState:
	cmp	DWORD PTR _codepoint$[ebp], 284		; 0000011cH
	je	SHORT $LN43@getState
	cmp	DWORD PTR _codepoint$[ebp], 285		; 0000011dH
	je	SHORT $LN43@getState
	cmp	DWORD PTR _codepoint$[ebp], 288		; 00000120H
	je	SHORT $LN43@getState
	cmp	DWORD PTR _codepoint$[ebp], 289		; 00000121H
	je	SHORT $LN43@getState
	cmp	DWORD PTR _codepoint$[ebp], 292		; 00000124H
	jl	SHORT $LN41@getState
	cmp	DWORD PTR _codepoint$[ebp], 295		; 00000127H
	jle	SHORT $LN43@getState
$LN41@getState:
	cmp	DWORD PTR _codepoint$[ebp], 308		; 00000134H
	je	SHORT $LN43@getState
	cmp	DWORD PTR _codepoint$[ebp], 309		; 00000135H
	je	SHORT $LN43@getState
	cmp	DWORD PTR _codepoint$[ebp], 348		; 0000015cH
	je	SHORT $LN43@getState
	cmp	DWORD PTR _codepoint$[ebp], 349		; 0000015dH
	je	SHORT $LN43@getState
	cmp	DWORD PTR _codepoint$[ebp], 364		; 0000016cH
	je	SHORT $LN43@getState
	cmp	DWORD PTR _codepoint$[ebp], 365		; 0000016dH
	jne	SHORT $LN44@getState
$LN43@getState:
; Line 199
	mov	DWORD PTR _state$[ebp], 17		; 00000011H
	jmp	$LN55@getState
$LN44@getState:
; Line 200
	cmp	DWORD PTR _codepoint$[ebp], 372		; 00000174H
	jl	SHORT $LN37@getState
	cmp	DWORD PTR _codepoint$[ebp], 375		; 00000177H
	jle	$LN38@getState
$LN37@getState:
	cmp	DWORD PTR _codepoint$[ebp], 7690	; 00001e0aH
	je	$LN38@getState
	cmp	DWORD PTR _codepoint$[ebp], 7691	; 00001e0bH
	je	SHORT $LN38@getState
	cmp	DWORD PTR _codepoint$[ebp], 7710	; 00001e1eH
	je	SHORT $LN38@getState
	cmp	DWORD PTR _codepoint$[ebp], 7711	; 00001e1fH
	je	SHORT $LN38@getState
	cmp	DWORD PTR _codepoint$[ebp], 7744	; 00001e40H
	je	SHORT $LN38@getState
	cmp	DWORD PTR _codepoint$[ebp], 7745	; 00001e41H
	je	SHORT $LN38@getState
	cmp	DWORD PTR _codepoint$[ebp], 7766	; 00001e56H
	je	SHORT $LN38@getState
	cmp	DWORD PTR _codepoint$[ebp], 7767	; 00001e57H
	je	SHORT $LN38@getState
	cmp	DWORD PTR _codepoint$[ebp], 7776	; 00001e60H
	je	SHORT $LN38@getState
	cmp	DWORD PTR _codepoint$[ebp], 7777	; 00001e61H
	je	SHORT $LN38@getState
	cmp	DWORD PTR _codepoint$[ebp], 7786	; 00001e6aH
	je	SHORT $LN38@getState
	cmp	DWORD PTR _codepoint$[ebp], 7787	; 00001e6bH
	je	SHORT $LN38@getState
	cmp	DWORD PTR _codepoint$[ebp], 7922	; 00001ef2H
	je	SHORT $LN38@getState
	cmp	DWORD PTR _codepoint$[ebp], 7923	; 00001ef3H
	je	SHORT $LN38@getState
	cmp	DWORD PTR _codepoint$[ebp], 7808	; 00001e80H
	jl	SHORT $LN39@getState
	cmp	DWORD PTR _codepoint$[ebp], 7813	; 00001e85H
	jg	SHORT $LN39@getState
$LN38@getState:
; Line 201
	mov	DWORD PTR _state$[ebp], 18		; 00000012H
	jmp	$LN55@getState
$LN39@getState:
; Line 202
	cmp	DWORD PTR _codepoint$[ebp], 338		; 00000152H
	je	SHORT $LN34@getState
	cmp	DWORD PTR _codepoint$[ebp], 339		; 00000153H
	je	SHORT $LN34@getState
	cmp	DWORD PTR _codepoint$[ebp], 376		; 00000178H
	je	SHORT $LN34@getState
	cmp	DWORD PTR _codepoint$[ebp], 8364	; 000020acH
	jne	SHORT $LN35@getState
$LN34@getState:
; Line 203
	mov	DWORD PTR _state$[ebp], 19		; 00000013H
	jmp	$LN55@getState
$LN35@getState:
; Line 204
	cmp	DWORD PTR _codepoint$[ebp], 3585	; 00000e01H
	jl	SHORT $LN30@getState
	cmp	DWORD PTR _codepoint$[ebp], 3642	; 00000e3aH
	jle	SHORT $LN31@getState
$LN30@getState:
	cmp	DWORD PTR _codepoint$[ebp], 3647	; 00000e3fH
	jl	SHORT $LN32@getState
	cmp	DWORD PTR _codepoint$[ebp], 3675	; 00000e5bH
	jg	SHORT $LN32@getState
$LN31@getState:
; Line 205
	mov	DWORD PTR _state$[ebp], 15		; 0000000fH
	jmp	$LN55@getState
$LN32@getState:
; Line 206
	cmp	DWORD PTR _codepoint$[ebp], 256		; 00000100H
	je	$LN27@getState
	cmp	DWORD PTR _codepoint$[ebp], 257		; 00000101H
	je	$LN27@getState
	cmp	DWORD PTR _codepoint$[ebp], 274		; 00000112H
	je	$LN27@getState
	cmp	DWORD PTR _codepoint$[ebp], 275		; 00000113H
	je	$LN27@getState
	cmp	DWORD PTR _codepoint$[ebp], 278		; 00000116H
	je	$LN27@getState
	cmp	DWORD PTR _codepoint$[ebp], 279		; 00000117H
	je	$LN27@getState
	cmp	DWORD PTR _codepoint$[ebp], 290		; 00000122H
	je	$LN27@getState
	cmp	DWORD PTR _codepoint$[ebp], 291		; 00000123H
	je	$LN27@getState
	cmp	DWORD PTR _codepoint$[ebp], 296		; 00000128H
	jl	SHORT $LN26@getState
	cmp	DWORD PTR _codepoint$[ebp], 299		; 0000012bH
	jle	$LN27@getState
$LN26@getState:
	cmp	DWORD PTR _codepoint$[ebp], 302		; 0000012eH
	je	$LN27@getState
	cmp	DWORD PTR _codepoint$[ebp], 303		; 0000012fH
	je	SHORT $LN27@getState
	cmp	DWORD PTR _codepoint$[ebp], 310		; 00000136H
	jl	SHORT $LN25@getState
	cmp	DWORD PTR _codepoint$[ebp], 312		; 00000138H
	jle	SHORT $LN27@getState
$LN25@getState:
	cmp	DWORD PTR _codepoint$[ebp], 315		; 0000013bH
	je	SHORT $LN27@getState
	cmp	DWORD PTR _codepoint$[ebp], 316		; 0000013cH
	je	SHORT $LN27@getState
	cmp	DWORD PTR _codepoint$[ebp], 325		; 00000145H
	je	SHORT $LN27@getState
	cmp	DWORD PTR _codepoint$[ebp], 326		; 00000146H
	je	SHORT $LN27@getState
	cmp	DWORD PTR _codepoint$[ebp], 330		; 0000014aH
	jl	SHORT $LN24@getState
	cmp	DWORD PTR _codepoint$[ebp], 333		; 0000014dH
	jle	SHORT $LN27@getState
$LN24@getState:
	cmp	DWORD PTR _codepoint$[ebp], 342		; 00000156H
	je	SHORT $LN27@getState
	cmp	DWORD PTR _codepoint$[ebp], 343		; 00000157H
	je	SHORT $LN27@getState
	cmp	DWORD PTR _codepoint$[ebp], 358		; 00000166H
	jl	SHORT $LN23@getState
	cmp	DWORD PTR _codepoint$[ebp], 363		; 0000016bH
	jle	SHORT $LN27@getState
$LN23@getState:
	cmp	DWORD PTR _codepoint$[ebp], 370		; 00000172H
	je	SHORT $LN27@getState
	cmp	DWORD PTR _codepoint$[ebp], 371		; 00000173H
	jne	SHORT $LN28@getState
$LN27@getState:
; Line 207
	mov	DWORD PTR _state$[ebp], 14		; 0000000eH
	jmp	$LN55@getState
$LN28@getState:
; Line 208
	cmp	DWORD PTR _codepoint$[ebp], 700		; 000002bcH
	je	SHORT $LN20@getState
	cmp	DWORD PTR _codepoint$[ebp], 701		; 000002bdH
	je	SHORT $LN20@getState
	cmp	DWORD PTR _codepoint$[ebp], 900		; 00000384H
	jl	SHORT $LN19@getState
	cmp	DWORD PTR _codepoint$[ebp], 974		; 000003ceH
	jle	SHORT $LN20@getState
$LN19@getState:
	cmp	DWORD PTR _codepoint$[ebp], 8213	; 00002015H
	jne	SHORT $LN21@getState
$LN20@getState:
; Line 209
	mov	DWORD PTR _state$[ebp], 2
	jmp	$LN55@getState
$LN21@getState:
; Line 210
	cmp	DWORD PTR _codepoint$[ebp], 1548	; 0000060cH
	je	SHORT $LN16@getState
	cmp	DWORD PTR _codepoint$[ebp], 1563	; 0000061bH
	je	SHORT $LN16@getState
	cmp	DWORD PTR _codepoint$[ebp], 1567	; 0000061fH
	je	SHORT $LN16@getState
	cmp	DWORD PTR _codepoint$[ebp], 1569	; 00000621H
	jl	SHORT $LN15@getState
	cmp	DWORD PTR _codepoint$[ebp], 1594	; 0000063aH
	jle	SHORT $LN16@getState
$LN15@getState:
	cmp	DWORD PTR _codepoint$[ebp], 1600	; 00000640H
	jl	SHORT $LN14@getState
	cmp	DWORD PTR _codepoint$[ebp], 1618	; 00000652H
	jle	SHORT $LN16@getState
$LN14@getState:
	cmp	DWORD PTR _codepoint$[ebp], 1632	; 00000660H
	jl	SHORT $LN13@getState
	cmp	DWORD PTR _codepoint$[ebp], 1645	; 0000066dH
	jle	SHORT $LN16@getState
$LN13@getState:
	cmp	DWORD PTR _codepoint$[ebp], 8203	; 0000200bH
	je	SHORT $LN16@getState
	cmp	DWORD PTR _codepoint$[ebp], 65136	; 0000fe70H
	jl	SHORT $LN12@getState
	cmp	DWORD PTR _codepoint$[ebp], 65138	; 0000fe72H
	jle	SHORT $LN16@getState
$LN12@getState:
	cmp	DWORD PTR _codepoint$[ebp], 65140	; 0000fe74H
	je	SHORT $LN16@getState
	cmp	DWORD PTR _codepoint$[ebp], 65142	; 0000fe76H
	jl	SHORT $LN17@getState
	cmp	DWORD PTR _codepoint$[ebp], 65214	; 0000febeH
	jg	SHORT $LN17@getState
$LN16@getState:
; Line 211
	mov	DWORD PTR _state$[ebp], 3
	jmp	$LN55@getState
$LN17@getState:
; Line 212
	cmp	DWORD PTR _codepoint$[ebp], 1488	; 000005d0H
	jl	SHORT $LN8@getState
	cmp	DWORD PTR _codepoint$[ebp], 1514	; 000005eaH
	jle	SHORT $LN9@getState
$LN8@getState:
	cmp	DWORD PTR _codepoint$[ebp], 8215	; 00002017H
	je	SHORT $LN9@getState
	cmp	DWORD PTR _codepoint$[ebp], 8254	; 0000203eH
	jne	SHORT $LN10@getState
$LN9@getState:
; Line 213
	mov	DWORD PTR _state$[ebp], 13		; 0000000dH
	jmp	SHORT $LN55@getState
$LN10@getState:
; Line 214
	cmp	DWORD PTR _codepoint$[ebp], 1025	; 00000401H
	jl	SHORT $LN4@getState
	cmp	DWORD PTR _codepoint$[ebp], 1119	; 0000045fH
	jle	SHORT $LN5@getState
$LN4@getState:
	cmp	DWORD PTR _codepoint$[ebp], 8470	; 00002116H
	jne	SHORT $LN6@getState
$LN5@getState:
; Line 215
	mov	DWORD PTR _state$[ebp], 12		; 0000000cH
	jmp	SHORT $LN55@getState
$LN6@getState:
; Line 216
	cmp	DWORD PTR _codepoint$[ebp], 286		; 0000011eH
	je	SHORT $LN1@getState
	cmp	DWORD PTR _codepoint$[ebp], 287		; 0000011fH
	je	SHORT $LN1@getState
	cmp	DWORD PTR _codepoint$[ebp], 304		; 00000130H
	je	SHORT $LN1@getState
	cmp	DWORD PTR _codepoint$[ebp], 305		; 00000131H
	je	SHORT $LN1@getState
	cmp	DWORD PTR _codepoint$[ebp], 536		; 00000218H
	jl	SHORT $LN55@getState
	cmp	DWORD PTR _codepoint$[ebp], 539		; 0000021bH
	jg	SHORT $LN55@getState
$LN1@getState:
; Line 217
	mov	DWORD PTR _state$[ebp], 1
$LN55@getState:
; Line 220
	mov	eax, DWORD PTR _state$[ebp]
; Line 221
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_getState ENDP
_TEXT	ENDS
EXTRN	_ucnv_MBCSToUnicodeWithOffsets_56:PROC
EXTRN	_strlen:PROC
EXTRN	_memcpy:PROC
EXTRN	_uprv_checkValidMemory:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _UConverter_toUnicode_CompoundText_OFFSETS
_TEXT	SEGMENT
_minArgsSize$ = -164					; size = 4
_subArgs$ = -152					; size = 28
_savedSharedData$ = -116				; size = 4
_myConverterData$ = -104				; size = 4
_sourceOffset$ = -92					; size = 4
_tmpState$ = -80					; size = 4
_currentState$ = -68					; size = 4
_mySourceChar$ = -56					; size = 4
_tmpSourceLimit$ = -44					; size = 4
_mySourceLimit$ = -32					; size = 4
_myTarget$ = -20					; size = 4
_mySource$ = -8						; size = 4
_args$ = 8						; size = 4
_err$ = 12						; size = 4
_UConverter_toUnicode_CompoundText_OFFSETS PROC		; COMDAT
; Line 461
	push	ebp
	mov	ebp, esp
	sub	esp, 360				; 00000168H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-360]
	mov	ecx, 90					; 0000005aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 462
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _mySource$[ebp], ecx
; Line 463
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _myTarget$[ebp], ecx
; Line 464
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _mySourceLimit$[ebp], ecx
; Line 465
	mov	eax, DWORD PTR _mySourceLimit$[ebp]
	mov	DWORD PTR _tmpSourceLimit$[ebp], eax
; Line 466
	mov	DWORD PTR _mySourceChar$[ebp], 0
; Line 468
	mov	DWORD PTR _sourceOffset$[ebp], 0
; Line 469
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _myConverterData$[ebp], edx
; Line 470
	mov	DWORD PTR _savedSharedData$[ebp], 0
; Line 476
	mov	eax, DWORD PTR _args$[ebp]
	movzx	ecx, WORD PTR [eax]
	cmp	ecx, 28					; 0000001cH
	jae	SHORT $LN27@UConverter@2
; Line 477
	mov	eax, DWORD PTR _args$[ebp]
	movzx	ecx, WORD PTR [eax]
	mov	DWORD PTR _minArgsSize$[ebp], ecx
; Line 478
	jmp	SHORT $LN26@UConverter@2
$LN27@UConverter@2:
; Line 479
	mov	DWORD PTR _minArgsSize$[ebp], 28	; 0000001cH
$LN26@UConverter@2:
; Line 482
	push	1
	mov	eax, DWORD PTR _args$[ebp]
	push	eax
	call	_uprv_checkValidMemory
	add	esp, 8
	mov	ecx, DWORD PTR _minArgsSize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _args$[ebp]
	push	edx
	lea	eax, DWORD PTR _subArgs$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 483
	mov	ax, WORD PTR _minArgsSize$[ebp]
	mov	WORD PTR _subArgs$[ebp], ax
; Line 485
	mov	eax, DWORD PTR _myConverterData$[ebp]
	mov	ecx, DWORD PTR [eax+80]
	mov	DWORD PTR _tmpState$[ebp], ecx
	mov	edx, DWORD PTR _tmpState$[ebp]
	mov	DWORD PTR _currentState$[ebp], edx
$LN25@UConverter@2:
; Line 487
	mov	eax, DWORD PTR _mySource$[ebp]
	cmp	eax, DWORD PTR _mySourceLimit$[ebp]
	jae	$LN24@UConverter@2
; Line 488
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _myTarget$[ebp]
	cmp	ecx, DWORD PTR [eax+20]
	jae	$LN23@UConverter@2
; Line 489
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	movsx	edx, BYTE PTR [ecx+36]
	test	edx, edx
	jle	SHORT $LN22@UConverter@2
; Line 490
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	movzx	edx, BYTE PTR [ecx+37]
	mov	DWORD PTR _mySourceChar$[ebp], edx
; Line 491
	jmp	SHORT $LN21@UConverter@2
$LN22@UConverter@2:
; Line 492
	mov	eax, DWORD PTR _mySource$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _mySourceChar$[ebp], ecx
$LN21@UConverter@2:
; Line 495
	cmp	DWORD PTR _mySourceChar$[ebp], 27	; 0000001bH
	jne	$LN20@UConverter@2
; Line 496
	mov	eax, DWORD PTR _err$[ebp]
	push	eax
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	movsx	eax, BYTE PTR [edx+36]
	push	eax
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 37					; 00000025H
	push	edx
	mov	eax, DWORD PTR _mySourceLimit$[ebp]
	push	eax
	mov	ecx, DWORD PTR _mySource$[ebp]
	push	ecx
	call	_findStateFromEscSeq
	add	esp, 20					; 00000014H
	mov	DWORD PTR _tmpState$[ebp], eax
; Line 498
	mov	eax, DWORD PTR _err$[ebp]
	cmp	DWORD PTR [eax], 11			; 0000000bH
	jne	SHORT $LN19@UConverter@2
$LN18@UConverter@2:
; Line 499
	mov	eax, DWORD PTR _mySource$[ebp]
	cmp	eax, DWORD PTR _mySourceLimit$[ebp]
	jae	SHORT $LN17@UConverter@2
; Line 500
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+4]
	movsx	edx, BYTE PTR [eax+36]
	mov	eax, DWORD PTR _mySource$[ebp]
	mov	al, BYTE PTR [eax]
	mov	BYTE PTR [ecx+edx+37], al
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	al, BYTE PTR [edx+36]
	add	al, 1
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx+36], al
	mov	eax, DWORD PTR _mySource$[ebp]
	add	eax, 1
	mov	DWORD PTR _mySource$[ebp], eax
; Line 501
	jmp	SHORT $LN18@UConverter@2
$LN17@UConverter@2:
; Line 502
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 0
; Line 503
	jmp	$LN24@UConverter@2
	jmp	SHORT $LN16@UConverter@2
$LN19@UConverter@2:
; Line 504
	cmp	DWORD PTR _tmpState$[ebp], -2		; fffffffeH
	jne	SHORT $LN16@UConverter@2
; Line 505
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	movsx	edx, BYTE PTR [ecx+36]
	test	edx, edx
	jne	SHORT $LN14@UConverter@2
; Line 506
	mov	eax, DWORD PTR _mySource$[ebp]
	add	eax, 1
	mov	DWORD PTR _mySource$[ebp], eax
$LN14@UConverter@2:
; Line 508
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 12			; 0000000cH
; Line 509
	jmp	$LN24@UConverter@2
$LN16@UConverter@2:
; Line 512
	mov	eax, DWORD PTR _tmpState$[ebp]
	cmp	eax, DWORD PTR _currentState$[ebp]
	je	SHORT $LN13@UConverter@2
; Line 513
	mov	eax, DWORD PTR _tmpState$[ebp]
	mov	DWORD PTR _currentState$[ebp], eax
$LN13@UConverter@2:
; Line 516
	mov	eax, DWORD PTR _currentState$[ebp]
	imul	eax, 5
	add	eax, OFFSET _escSeqCompoundText
	push	eax
	call	_strlen
	add	esp, 4
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	movsx	ecx, BYTE PTR [edx+36]
	sub	eax, ecx
	mov	DWORD PTR _sourceOffset$[ebp], eax
; Line 518
	mov	eax, DWORD PTR _mySource$[ebp]
	add	eax, DWORD PTR _sourceOffset$[ebp]
	mov	DWORD PTR _mySource$[ebp], eax
; Line 520
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx+36], 0
$LN20@UConverter@2:
; Line 523
	cmp	DWORD PTR _currentState$[ebp], 0
	jne	SHORT $LN12@UConverter@2
$LN11@UConverter@2:
; Line 524
	mov	eax, DWORD PTR _mySource$[ebp]
	cmp	eax, DWORD PTR _mySourceLimit$[ebp]
	jae	SHORT $LN10@UConverter@2
; Line 525
	mov	eax, DWORD PTR _mySource$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 27					; 0000001bH
	jne	SHORT $LN9@UConverter@2
; Line 526
	jmp	SHORT $LN10@UConverter@2
$LN9@UConverter@2:
; Line 528
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _myTarget$[ebp]
	cmp	ecx, DWORD PTR [eax+20]
	jae	SHORT $LN8@UConverter@2
; Line 529
	mov	eax, DWORD PTR _mySource$[ebp]
	movsx	ecx, BYTE PTR [eax]
	and	ecx, 255				; 000000ffH
	mov	edx, DWORD PTR _myTarget$[ebp]
	mov	WORD PTR [edx], cx
	mov	eax, DWORD PTR _myTarget$[ebp]
	add	eax, 2
	mov	DWORD PTR _myTarget$[ebp], eax
	mov	ecx, DWORD PTR _mySource$[ebp]
	add	ecx, 1
	mov	DWORD PTR _mySource$[ebp], ecx
; Line 530
	jmp	SHORT $LN7@UConverter@2
$LN8@UConverter@2:
; Line 531
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
; Line 532
	jmp	SHORT $LN10@UConverter@2
$LN7@UConverter@2:
; Line 534
	jmp	SHORT $LN11@UConverter@2
$LN10@UConverter@2:
; Line 535
	jmp	$LN6@UConverter@2
$LN12@UConverter@2:
	mov	eax, DWORD PTR _mySource$[ebp]
	cmp	eax, DWORD PTR _mySourceLimit$[ebp]
	jae	$LN6@UConverter@2
; Line 536
	mov	eax, DWORD PTR _mySourceLimit$[ebp]
	push	eax
	mov	ecx, DWORD PTR _mySource$[ebp]
	push	ecx
	call	_findNextEsc
	add	esp, 8
	mov	DWORD PTR _sourceOffset$[ebp], eax
; Line 538
	mov	eax, DWORD PTR _mySource$[ebp]
	add	eax, DWORD PTR _sourceOffset$[ebp]
	mov	DWORD PTR _tmpSourceLimit$[ebp], eax
; Line 540
	mov	eax, DWORD PTR _mySource$[ebp]
	mov	DWORD PTR _subArgs$[ebp+8], eax
; Line 541
	mov	eax, DWORD PTR _tmpSourceLimit$[ebp]
	mov	DWORD PTR _subArgs$[ebp+12], eax
; Line 542
	mov	eax, DWORD PTR _myTarget$[ebp]
	mov	DWORD PTR _subArgs$[ebp+16], eax
; Line 543
	mov	eax, DWORD PTR _subArgs$[ebp+4]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR _savedSharedData$[ebp], ecx
; Line 544
	mov	eax, DWORD PTR _subArgs$[ebp+4]
	mov	ecx, DWORD PTR _currentState$[ebp]
	mov	edx, DWORD PTR _myConverterData$[ebp]
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR [eax+24], ecx
; Line 546
	mov	eax, DWORD PTR _err$[ebp]
	push	eax
	lea	ecx, DWORD PTR _subArgs$[ebp]
	push	ecx
	call	_ucnv_MBCSToUnicodeWithOffsets_56
	add	esp, 8
; Line 548
	mov	eax, DWORD PTR _subArgs$[ebp+4]
	mov	ecx, DWORD PTR _savedSharedData$[ebp]
	mov	DWORD PTR [eax+24], ecx
; Line 550
	mov	eax, DWORD PTR _subArgs$[ebp+8]
	mov	DWORD PTR _mySource$[ebp], eax
; Line 551
	mov	eax, DWORD PTR _subArgs$[ebp+16]
	mov	DWORD PTR _myTarget$[ebp], eax
; Line 553
	mov	eax, DWORD PTR _err$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN6@UConverter@2
; Line 554
	mov	eax, DWORD PTR _err$[ebp]
	cmp	DWORD PTR [eax], 15			; 0000000fH
	jne	SHORT $LN3@UConverter@2
; Line 555
	mov	eax, DWORD PTR _subArgs$[ebp+4]
	movsx	ecx, BYTE PTR [eax+65]
	test	ecx, ecx
	jle	SHORT $LN2@UConverter@2
; Line 557
	push	1
	mov	eax, DWORD PTR _subArgs$[ebp+4]
	add	eax, 116				; 00000074H
	push	eax
	call	_uprv_checkValidMemory
	add	esp, 8
	mov	ecx, DWORD PTR _subArgs$[ebp+4]
	movsx	edx, BYTE PTR [ecx+65]
	push	edx
	mov	eax, DWORD PTR _subArgs$[ebp+4]
	add	eax, 116				; 00000074H
	push	eax
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 116				; 00000074H
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN2@UConverter@2:
; Line 559
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _subArgs$[ebp+4]
	mov	al, BYTE PTR [edx+65]
	mov	BYTE PTR [ecx+65], al
; Line 560
	mov	eax, DWORD PTR _subArgs$[ebp+4]
	mov	BYTE PTR [eax+65], 0
$LN3@UConverter@2:
; Line 562
	jmp	SHORT $LN24@UConverter@2
$LN6@UConverter@2:
; Line 565
	jmp	SHORT $LN1@UConverter@2
$LN23@UConverter@2:
; Line 566
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
; Line 567
	jmp	SHORT $LN24@UConverter@2
$LN1@UConverter@2:
; Line 569
	jmp	$LN25@UConverter@2
$LN24@UConverter@2:
; Line 570
	mov	eax, DWORD PTR _myConverterData$[ebp]
	mov	ecx, DWORD PTR _currentState$[ebp]
	mov	DWORD PTR [eax+80], ecx
; Line 571
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _myTarget$[ebp]
	mov	DWORD PTR [eax+16], ecx
; Line 572
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _mySource$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 573
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN32@UConverter@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 360				; 00000168H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN32@UConverter@2:
	DD	1
	DD	$LN31@UConverter@2
$LN31@UConverter@2:
	DD	-152					; ffffff68H
	DD	28					; 0000001cH
	DD	$LN30@UConverter@2
$LN30@UConverter@2:
	DB	115					; 00000073H
	DB	117					; 00000075H
	DB	98					; 00000062H
	DB	65					; 00000041H
	DB	114					; 00000072H
	DB	103					; 00000067H
	DB	115					; 00000073H
	DB	0
_UConverter_toUnicode_CompoundText_OFFSETS ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _findNextEsc
_TEXT	SEGMENT
_i$ = -20						; size = 4
_length$ = -8						; size = 4
_source$ = 8						; size = 4
_sourceLimit$ = 12					; size = 4
_findNextEsc PROC					; COMDAT
; Line 179
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 180
	mov	eax, DWORD PTR _sourceLimit$[ebp]
	sub	eax, DWORD PTR _source$[ebp]
	mov	DWORD PTR _length$[ebp], eax
; Line 182
	mov	DWORD PTR _i$[ebp], 1
	jmp	SHORT $LN4@findNextEs
$LN3@findNextEs:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@findNextEs:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _length$[ebp]
	jge	SHORT $LN2@findNextEs
; Line 183
	mov	eax, DWORD PTR _source$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 27					; 0000001bH
	jne	SHORT $LN1@findNextEs
; Line 184
	mov	eax, DWORD PTR _i$[ebp]
	jmp	SHORT $LN5@findNextEs
$LN1@findNextEs:
; Line 186
	jmp	SHORT $LN3@findNextEs
$LN2@findNextEs:
; Line 188
	mov	eax, DWORD PTR _length$[ebp]
$LN5@findNextEs:
; Line 189
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_findNextEsc ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _findStateFromEscSeq
_TEXT	SEGMENT
_offset$ = -56						; size = 4
_n$ = -44						; size = 4
_i$ = -32						; size = 4
_matchFound$ = -17					; size = 1
_state$ = -8						; size = 4
_source$ = 8						; size = 4
_sourceLimit$ = 12					; size = 4
_toUBytesBuffer$ = 16					; size = 4
_toUBytesBufferLength$ = 20				; size = 4
_err$ = 24						; size = 4
_findStateFromEscSeq PROC				; COMDAT
; Line 223
	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 224
	mov	DWORD PTR _state$[ebp], -2		; fffffffeH
; Line 225
	mov	BYTE PTR _matchFound$[ebp], 0
; Line 226
	mov	eax, DWORD PTR _toUBytesBufferLength$[ebp]
	mov	DWORD PTR _offset$[ebp], eax
; Line 228
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN14@findStateF
$LN13@findStateF:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN14@findStateF:
	cmp	DWORD PTR _i$[ebp], 20			; 00000014H
	jge	$LN12@findStateF
; Line 229
	mov	BYTE PTR _matchFound$[ebp], 1
; Line 230
	mov	DWORD PTR _n$[ebp], 0
	jmp	SHORT $LN11@findStateF
$LN10@findStateF:
	mov	eax, DWORD PTR _n$[ebp]
	add	eax, 1
	mov	DWORD PTR _n$[ebp], eax
$LN11@findStateF:
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 5
	mov	ecx, DWORD PTR _n$[ebp]
	movzx	edx, BYTE PTR _escSeqCompoundText[eax+ecx]
	test	edx, edx
	je	SHORT $LN9@findStateF
; Line 231
	mov	eax, DWORD PTR _n$[ebp]
	cmp	eax, DWORD PTR _toUBytesBufferLength$[ebp]
	jge	SHORT $LN8@findStateF
; Line 232
	mov	eax, DWORD PTR _toUBytesBuffer$[ebp]
	add	eax, DWORD PTR _n$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 5
	mov	eax, DWORD PTR _n$[ebp]
	movzx	edx, BYTE PTR _escSeqCompoundText[edx+eax]
	cmp	ecx, edx
	je	SHORT $LN7@findStateF
; Line 233
	mov	BYTE PTR _matchFound$[ebp], 0
; Line 234
	jmp	SHORT $LN9@findStateF
$LN7@findStateF:
; Line 235
	jmp	SHORT $LN6@findStateF
$LN8@findStateF:
; Line 236
	mov	eax, DWORD PTR _n$[ebp]
	sub	eax, DWORD PTR _offset$[ebp]
	add	eax, DWORD PTR _source$[ebp]
	cmp	eax, DWORD PTR _sourceLimit$[ebp]
	jb	SHORT $LN5@findStateF
; Line 237
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 11			; 0000000bH
; Line 238
	mov	BYTE PTR _matchFound$[ebp], 0
; Line 239
	jmp	SHORT $LN9@findStateF
	jmp	SHORT $LN6@findStateF
$LN5@findStateF:
; Line 240
	mov	eax, DWORD PTR _n$[ebp]
	sub	eax, DWORD PTR _offset$[ebp]
	mov	ecx, DWORD PTR _source$[ebp]
	movsx	edx, BYTE PTR [ecx+eax]
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 5
	mov	ecx, DWORD PTR _n$[ebp]
	movzx	eax, BYTE PTR _escSeqCompoundText[eax+ecx]
	cmp	edx, eax
	je	SHORT $LN6@findStateF
; Line 241
	mov	BYTE PTR _matchFound$[ebp], 0
; Line 242
	jmp	SHORT $LN9@findStateF
$LN6@findStateF:
; Line 244
	jmp	$LN10@findStateF
$LN9@findStateF:
; Line 246
	movsx	eax, BYTE PTR _matchFound$[ebp]
	test	eax, eax
	je	SHORT $LN2@findStateF
; Line 247
	jmp	SHORT $LN12@findStateF
$LN2@findStateF:
; Line 249
	jmp	$LN13@findStateF
$LN12@findStateF:
; Line 251
	movsx	eax, BYTE PTR _matchFound$[ebp]
	test	eax, eax
	je	SHORT $LN1@findStateF
; Line 252
	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR _state$[ebp], eax
$LN1@findStateF:
; Line 255
	mov	eax, DWORD PTR _state$[ebp]
; Line 256
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_findStateFromEscSeq ENDP
_TEXT	ENDS
EXTRN	_ucnv_MBCSGetUnicodeSetForUnicode_56:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __CompoundText_GetUnicodeSet
_TEXT	SEGMENT
_i$ = -20						; size = 4
_myConverterData$ = -8					; size = 4
_cnv$ = 8						; size = 4
_sa$ = 12						; size = 4
_which$ = 16						; size = 4
_pErrorCode$ = 20					; size = 4
__CompoundText_GetUnicodeSet PROC			; COMDAT
; Line 579
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 580
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _myConverterData$[ebp], ecx
; Line 583
	mov	DWORD PTR _i$[ebp], 1
	jmp	SHORT $LN3@CompoundTe@3
$LN2@CompoundTe@3:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@CompoundTe@3:
	cmp	DWORD PTR _i$[ebp], 20			; 00000014H
	jge	SHORT $LN1@CompoundTe@3
; Line 584
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _which$[ebp]
	push	ecx
	mov	edx, DWORD PTR _sa$[ebp]
	push	edx
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _myConverterData$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	push	edx
	call	_ucnv_MBCSGetUnicodeSetForUnicode_56
	add	esp, 16					; 00000010H
; Line 585
	jmp	SHORT $LN2@CompoundTe@3
$LN1@CompoundTe@3:
; Line 586
	mov	esi, esp
	push	0
	mov	eax, DWORD PTR _sa$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _sa$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 587
	mov	esi, esp
	push	9
	mov	eax, DWORD PTR _sa$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _sa$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 588
	mov	esi, esp
	push	10					; 0000000aH
	mov	eax, DWORD PTR _sa$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _sa$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 589
	mov	esi, esp
	push	127					; 0000007fH
	push	32					; 00000020H
	mov	eax, DWORD PTR _sa$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _sa$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 590
	mov	esi, esp
	push	255					; 000000ffH
	push	160					; 000000a0H
	mov	eax, DWORD PTR _sa$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _sa$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 591
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__CompoundText_GetUnicodeSet ENDP
_TEXT	ENDS
END
