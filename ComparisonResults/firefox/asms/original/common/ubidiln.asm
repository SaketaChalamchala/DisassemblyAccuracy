; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\mozilla\intl\icu\source\common\ubidiln.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_ubidi_setLine_56
EXTRN	_ubidi_getParaLevelAtIndex_56:PROC
EXTRN	_ubidi_getParagraph_56:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File d:\mozilla\intl\icu\source\common\ubidiln.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT _ubidi_setLine_56
_TEXT	SEGMENT
tv234 = -268						; size = 4
tv144 = -268						; size = 4
tv128 = -268						; size = 4
_level$8617 = -65					; size = 1
_trailingWSStart$8616 = -56				; size = 4
_i$8615 = -44						; size = 4
_levels$8614 = -32					; size = 4
_j$8599 = -20						; size = 4
_length$ = -8						; size = 4
_pParaBiDi$ = 8						; size = 4
_start$ = 12						; size = 4
_limit$ = 16						; size = 4
_pLineBiDi$ = 20					; size = 4
_pErrorCode$ = 24					; size = 4
_ubidi_setLine_56 PROC					; COMDAT
; Line 127
	push	ebp
	mov	ebp, esp
	sub	esp, 268				; 0000010cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-268]
	mov	ecx, 67					; 00000043H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 131
	cmp	DWORD PTR _pErrorCode$[ebp], 0
	je	SHORT $LN35@ubidi_setL
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN36@ubidi_setL
$LN35@ubidi_setL:
	jmp	$LN37@ubidi_setL
$LN36@ubidi_setL:
; Line 132
	cmp	DWORD PTR _pParaBiDi$[ebp], 0
	je	SHORT $LN33@ubidi_setL
	mov	eax, DWORD PTR _pParaBiDi$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR _pParaBiDi$[ebp]
	je	SHORT $LN34@ubidi_setL
$LN33@ubidi_setL:
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 27			; 0000001bH
	jmp	$LN37@ubidi_setL
$LN34@ubidi_setL:
; Line 133
	cmp	DWORD PTR _start$[ebp], 0
	jl	SHORT $LN31@ubidi_setL
	mov	eax, DWORD PTR _start$[ebp]
	cmp	eax, DWORD PTR _limit$[ebp]
	jl	SHORT $LN32@ubidi_setL
$LN31@ubidi_setL:
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 1
	jmp	$LN37@ubidi_setL
$LN32@ubidi_setL:
; Line 134
	cmp	DWORD PTR _limit$[ebp], 0
	jl	SHORT $LN29@ubidi_setL
	mov	eax, DWORD PTR _pParaBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	add	ecx, 1
	cmp	DWORD PTR _limit$[ebp], ecx
	jl	SHORT $LN30@ubidi_setL
$LN29@ubidi_setL:
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 1
	jmp	$LN37@ubidi_setL
$LN30@ubidi_setL:
; Line 135
	cmp	DWORD PTR _pLineBiDi$[ebp], 0
	jne	SHORT $LN28@ubidi_setL
; Line 136
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 1
; Line 137
	jmp	$LN37@ubidi_setL
$LN28@ubidi_setL:
; Line 140
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	push	0
	push	0
	push	0
	mov	ecx, DWORD PTR _start$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pParaBiDi$[ebp]
	push	edx
	call	_ubidi_getParagraph_56
	add	esp, 24					; 00000018H
	mov	esi, eax
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	push	0
	push	0
	push	0
	mov	ecx, DWORD PTR _limit$[ebp]
	sub	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _pParaBiDi$[ebp]
	push	edx
	call	_ubidi_getParagraph_56
	add	esp, 24					; 00000018H
	cmp	esi, eax
	je	SHORT $LN27@ubidi_setL
; Line 142
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 1
; Line 143
	jmp	$LN37@ubidi_setL
$LN27@ubidi_setL:
; Line 147
	mov	eax, DWORD PTR _pLineBiDi$[ebp]
	mov	DWORD PTR [eax], 0
; Line 148
	mov	eax, DWORD PTR _pParaBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _start$[ebp]
	lea	eax, DWORD PTR [ecx+edx*2]
	mov	ecx, DWORD PTR _pLineBiDi$[ebp]
	mov	DWORD PTR [ecx+8], eax
; Line 149
	mov	eax, DWORD PTR _limit$[ebp]
	sub	eax, DWORD PTR _start$[ebp]
	mov	DWORD PTR tv128[ebp], eax
	mov	ecx, DWORD PTR _pLineBiDi$[ebp]
	mov	edx, DWORD PTR tv128[ebp]
	mov	DWORD PTR [ecx+16], edx
	mov	eax, DWORD PTR tv128[ebp]
	mov	DWORD PTR _length$[ebp], eax
; Line 150
	mov	eax, DWORD PTR _pLineBiDi$[ebp]
	mov	ecx, DWORD PTR _length$[ebp]
	mov	DWORD PTR [eax+12], ecx
	mov	edx, DWORD PTR _pLineBiDi$[ebp]
	mov	eax, DWORD PTR _length$[ebp]
	mov	DWORD PTR [edx+20], eax
; Line 151
	mov	eax, DWORD PTR _pParaBiDi$[ebp]
	movzx	ecx, BYTE PTR [eax+98]
	test	ecx, ecx
	je	SHORT $LN39@ubidi_setL
	mov	edx, DWORD PTR _pParaBiDi$[ebp]
	mov	eax, DWORD PTR [edx+140]
	mov	ecx, DWORD PTR _start$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jl	SHORT $LN39@ubidi_setL
	mov	edx, DWORD PTR _start$[ebp]
	push	edx
	mov	eax, DWORD PTR _pParaBiDi$[ebp]
	push	eax
	call	_ubidi_getParaLevelAtIndex_56
	add	esp, 8
	movzx	ecx, al
	mov	DWORD PTR tv144[ebp], ecx
	jmp	SHORT $LN40@ubidi_setL
$LN39@ubidi_setL:
	mov	edx, DWORD PTR _pParaBiDi$[ebp]
	movzx	eax, BYTE PTR [edx+97]
	mov	DWORD PTR tv144[ebp], eax
$LN40@ubidi_setL:
	mov	ecx, DWORD PTR _pLineBiDi$[ebp]
	mov	dl, BYTE PTR tv144[ebp]
	mov	BYTE PTR [ecx+97], dl
; Line 152
	mov	eax, DWORD PTR _pLineBiDi$[ebp]
	mov	ecx, DWORD PTR _pParaBiDi$[ebp]
	mov	edx, DWORD PTR [ecx+136]
	mov	DWORD PTR [eax+136], edx
; Line 153
	mov	eax, DWORD PTR _pLineBiDi$[ebp]
	mov	DWORD PTR [eax+228], 0
; Line 154
	mov	eax, DWORD PTR _pLineBiDi$[ebp]
	mov	DWORD PTR [eax+124], 0
; Line 155
	mov	eax, DWORD PTR _pLineBiDi$[ebp]
	mov	ecx, DWORD PTR _pParaBiDi$[ebp]
	mov	edx, DWORD PTR [ecx+88]
	mov	DWORD PTR [eax+88], edx
; Line 156
	mov	eax, DWORD PTR _pLineBiDi$[ebp]
	mov	ecx, DWORD PTR _pParaBiDi$[ebp]
	mov	edx, DWORD PTR [ecx+92]
	mov	DWORD PTR [eax+92], edx
; Line 157
	mov	eax, DWORD PTR _pLineBiDi$[ebp]
	mov	DWORD PTR [eax+352], 0
; Line 158
	mov	eax, DWORD PTR _pParaBiDi$[ebp]
	cmp	DWORD PTR [eax+352], 0
	jle	$LN26@ubidi_setL
; Line 160
	mov	eax, DWORD PTR _start$[ebp]
	mov	DWORD PTR _j$8599[ebp], eax
	jmp	SHORT $LN25@ubidi_setL
$LN24@ubidi_setL:
	mov	eax, DWORD PTR _j$8599[ebp]
	add	eax, 1
	mov	DWORD PTR _j$8599[ebp], eax
$LN25@ubidi_setL:
	mov	eax, DWORD PTR _j$8599[ebp]
	cmp	eax, DWORD PTR _limit$[ebp]
	jge	SHORT $LN23@ubidi_setL
; Line 161
	mov	eax, DWORD PTR _pParaBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _j$8599[ebp]
	movzx	eax, WORD PTR [ecx+edx*2]
	and	eax, -4					; fffffffcH
	cmp	eax, 8204				; 0000200cH
	je	SHORT $LN21@ubidi_setL
	mov	eax, DWORD PTR _pParaBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _j$8599[ebp]
	movzx	eax, WORD PTR [ecx+edx*2]
	sub	eax, 8234				; 0000202aH
	cmp	eax, 5
	jb	SHORT $LN21@ubidi_setL
	mov	eax, DWORD PTR _pParaBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _j$8599[ebp]
	movzx	eax, WORD PTR [ecx+edx*2]
	sub	eax, 8294				; 00002066H
	cmp	eax, 4
	jae	SHORT $LN22@ubidi_setL
$LN21@ubidi_setL:
; Line 162
	mov	eax, DWORD PTR _pLineBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+352]
	add	ecx, 1
	mov	edx, DWORD PTR _pLineBiDi$[ebp]
	mov	DWORD PTR [edx+352], ecx
$LN22@ubidi_setL:
; Line 164
	jmp	SHORT $LN24@ubidi_setL
$LN23@ubidi_setL:
; Line 165
	mov	eax, DWORD PTR _pLineBiDi$[ebp]
	mov	ecx, DWORD PTR _pLineBiDi$[ebp]
	mov	edx, DWORD PTR [eax+20]
	sub	edx, DWORD PTR [ecx+352]
	mov	eax, DWORD PTR _pLineBiDi$[ebp]
	mov	DWORD PTR [eax+20], edx
$LN26@ubidi_setL:
; Line 168
	mov	eax, DWORD PTR _pParaBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	add	ecx, DWORD PTR _start$[ebp]
	mov	edx, DWORD PTR _pLineBiDi$[ebp]
	mov	DWORD PTR [edx+76], ecx
; Line 169
	mov	eax, DWORD PTR _pParaBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+80]
	add	ecx, DWORD PTR _start$[ebp]
	mov	edx, DWORD PTR _pLineBiDi$[ebp]
	mov	DWORD PTR [edx+80], ecx
; Line 170
	mov	eax, DWORD PTR _pLineBiDi$[ebp]
	mov	DWORD PTR [eax+224], -1
; Line 172
	mov	eax, DWORD PTR _pParaBiDi$[ebp]
	cmp	DWORD PTR [eax+120], 2
	je	SHORT $LN20@ubidi_setL
; Line 174
	mov	eax, DWORD PTR _pLineBiDi$[ebp]
	mov	ecx, DWORD PTR _pParaBiDi$[ebp]
	mov	edx, DWORD PTR [ecx+120]
	mov	DWORD PTR [eax+120], edx
; Line 181
	mov	eax, DWORD PTR _pParaBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+132]
	cmp	ecx, DWORD PTR _start$[ebp]
	jg	SHORT $LN19@ubidi_setL
; Line 182
	mov	eax, DWORD PTR _pLineBiDi$[ebp]
	mov	DWORD PTR [eax+132], 0
	jmp	SHORT $LN18@ubidi_setL
$LN19@ubidi_setL:
; Line 183
	mov	eax, DWORD PTR _pParaBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+132]
	cmp	ecx, DWORD PTR _limit$[ebp]
	jge	SHORT $LN17@ubidi_setL
; Line 184
	mov	eax, DWORD PTR _pParaBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+132]
	sub	ecx, DWORD PTR _start$[ebp]
	mov	edx, DWORD PTR _pLineBiDi$[ebp]
	mov	DWORD PTR [edx+132], ecx
; Line 185
	jmp	SHORT $LN18@ubidi_setL
$LN17@ubidi_setL:
; Line 186
	mov	eax, DWORD PTR _pLineBiDi$[ebp]
	mov	ecx, DWORD PTR _length$[ebp]
	mov	DWORD PTR [eax+132], ecx
$LN18@ubidi_setL:
; Line 188
	jmp	$LN15@ubidi_setL
$LN20@ubidi_setL:
; Line 189
	mov	eax, DWORD PTR _pLineBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+80]
	mov	DWORD PTR _levels$8614[ebp], ecx
; Line 193
	mov	eax, DWORD PTR _pLineBiDi$[ebp]
	push	eax
	call	_setTrailingWSStart
	add	esp, 4
; Line 194
	mov	eax, DWORD PTR _pLineBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+132]
	mov	DWORD PTR _trailingWSStart$8616[ebp], ecx
; Line 197
	cmp	DWORD PTR _trailingWSStart$8616[ebp], 0
	jne	SHORT $LN14@ubidi_setL
; Line 199
	mov	eax, DWORD PTR _pLineBiDi$[ebp]
	movzx	ecx, BYTE PTR [eax+97]
	and	ecx, 1
	mov	edx, DWORD PTR _pLineBiDi$[ebp]
	mov	DWORD PTR [edx+120], ecx
; Line 200
	jmp	SHORT $LN13@ubidi_setL
$LN14@ubidi_setL:
; Line 202
	mov	eax, DWORD PTR _levels$8614[ebp]
	movzx	ecx, BYTE PTR [eax]
	and	ecx, 1
	mov	BYTE PTR _level$8617[ebp], cl
; Line 205
	mov	eax, DWORD PTR _trailingWSStart$8616[ebp]
	cmp	eax, DWORD PTR _length$[ebp]
	jge	SHORT $LN12@ubidi_setL
	mov	eax, DWORD PTR _pLineBiDi$[ebp]
	movzx	ecx, BYTE PTR [eax+97]
	and	ecx, 1
	movzx	edx, BYTE PTR _level$8617[ebp]
	cmp	ecx, edx
	je	SHORT $LN12@ubidi_setL
; Line 207
	mov	eax, DWORD PTR _pLineBiDi$[ebp]
	mov	DWORD PTR [eax+120], 2
; Line 208
	jmp	SHORT $LN13@ubidi_setL
$LN12@ubidi_setL:
; Line 210
	mov	DWORD PTR _i$8615[ebp], 1
$LN10@ubidi_setL:
; Line 212
	mov	eax, DWORD PTR _i$8615[ebp]
	cmp	eax, DWORD PTR _trailingWSStart$8616[ebp]
	jne	SHORT $LN8@ubidi_setL
; Line 214
	movzx	eax, BYTE PTR _level$8617[ebp]
	mov	ecx, DWORD PTR _pLineBiDi$[ebp]
	mov	DWORD PTR [ecx+120], eax
; Line 215
	jmp	SHORT $LN13@ubidi_setL
	jmp	SHORT $LN7@ubidi_setL
$LN8@ubidi_setL:
; Line 216
	mov	eax, DWORD PTR _levels$8614[ebp]
	add	eax, DWORD PTR _i$8615[ebp]
	movzx	ecx, BYTE PTR [eax]
	and	ecx, 1
	movzx	edx, BYTE PTR _level$8617[ebp]
	cmp	ecx, edx
	je	SHORT $LN7@ubidi_setL
; Line 217
	mov	eax, DWORD PTR _pLineBiDi$[ebp]
	mov	DWORD PTR [eax+120], 2
; Line 218
	jmp	SHORT $LN13@ubidi_setL
$LN7@ubidi_setL:
; Line 220
	mov	eax, DWORD PTR _i$8615[ebp]
	add	eax, 1
	mov	DWORD PTR _i$8615[ebp], eax
; Line 221
	jmp	SHORT $LN10@ubidi_setL
$LN13@ubidi_setL:
; Line 225
	mov	eax, DWORD PTR _pLineBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+120]
	mov	DWORD PTR tv234[ebp], ecx
	cmp	DWORD PTR tv234[ebp], 0
	je	SHORT $LN3@ubidi_setL
	cmp	DWORD PTR tv234[ebp], 1
	je	SHORT $LN2@ubidi_setL
	jmp	SHORT $LN15@ubidi_setL
$LN3@ubidi_setL:
; Line 228
	mov	eax, DWORD PTR _pLineBiDi$[ebp]
	movzx	ecx, BYTE PTR [eax+97]
	add	ecx, 1
	and	ecx, -2					; fffffffeH
	mov	edx, DWORD PTR _pLineBiDi$[ebp]
	mov	BYTE PTR [edx+97], cl
; Line 231
	mov	eax, DWORD PTR _pLineBiDi$[ebp]
	mov	DWORD PTR [eax+132], 0
; Line 232
	jmp	SHORT $LN15@ubidi_setL
$LN2@ubidi_setL:
; Line 235
	mov	eax, DWORD PTR _pLineBiDi$[ebp]
	movzx	ecx, BYTE PTR [eax+97]
	or	ecx, 1
	mov	edx, DWORD PTR _pLineBiDi$[ebp]
	mov	BYTE PTR [edx+97], cl
; Line 238
	mov	eax, DWORD PTR _pLineBiDi$[ebp]
	mov	DWORD PTR [eax+132], 0
$LN15@ubidi_setL:
; Line 244
	mov	eax, DWORD PTR _pLineBiDi$[ebp]
	mov	ecx, DWORD PTR _pParaBiDi$[ebp]
	mov	DWORD PTR [eax], ecx
$LN37@ubidi_setL:
; Line 246
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 268				; 0000010cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ubidi_setLine_56 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _setTrailingWSStart
_TEXT	SEGMENT
_paraLevel$ = -41					; size = 1
_start$ = -32						; size = 4
_levels$ = -20						; size = 4
_dirProps$ = -8						; size = 4
_pBiDi$ = 8						; size = 4
_setTrailingWSStart PROC				; COMDAT
; Line 90
	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 93
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	mov	DWORD PTR _dirProps$[ebp], ecx
; Line 94
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+80]
	mov	DWORD PTR _levels$[ebp], ecx
; Line 95
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _start$[ebp], ecx
; Line 96
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	cl, BYTE PTR [eax+97]
	mov	BYTE PTR _paraLevel$[ebp], cl
; Line 104
	mov	eax, DWORD PTR _dirProps$[ebp]
	add	eax, DWORD PTR _start$[ebp]
	movzx	ecx, BYTE PTR [eax-1]
	cmp	ecx, 7
	jne	SHORT $LN4@setTrailin
; Line 105
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR _start$[ebp]
	mov	DWORD PTR [eax+132], ecx
; Line 106
	jmp	SHORT $LN6@setTrailin
$LN4@setTrailin:
; Line 109
	cmp	DWORD PTR _start$[ebp], 0
	jle	SHORT $LN2@setTrailin
	mov	eax, DWORD PTR _dirProps$[ebp]
	add	eax, DWORD PTR _start$[ebp]
	movzx	ecx, BYTE PTR [eax-1]
	mov	edx, 1
	shl	edx, cl
	and	edx, 8248192				; 007ddb80H
	je	SHORT $LN2@setTrailin
; Line 110
	mov	eax, DWORD PTR _start$[ebp]
	sub	eax, 1
	mov	DWORD PTR _start$[ebp], eax
; Line 111
	jmp	SHORT $LN4@setTrailin
$LN2@setTrailin:
; Line 114
	cmp	DWORD PTR _start$[ebp], 0
	jle	SHORT $LN1@setTrailin
	mov	eax, DWORD PTR _levels$[ebp]
	add	eax, DWORD PTR _start$[ebp]
	movzx	ecx, BYTE PTR [eax-1]
	movzx	edx, BYTE PTR _paraLevel$[ebp]
	cmp	ecx, edx
	jne	SHORT $LN1@setTrailin
; Line 115
	mov	eax, DWORD PTR _start$[ebp]
	sub	eax, 1
	mov	DWORD PTR _start$[ebp], eax
; Line 116
	jmp	SHORT $LN2@setTrailin
$LN1@setTrailin:
; Line 118
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR _start$[ebp]
	mov	DWORD PTR [eax+132], ecx
$LN6@setTrailin:
; Line 119
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_setTrailingWSStart ENDP
_TEXT	ENDS
PUBLIC	_ubidi_getLevelAt_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _ubidi_getLevelAt_56
_TEXT	SEGMENT
tv88 = -196						; size = 4
_pBiDi$ = 8						; size = 4
_charIndex$ = 12					; size = 4
_ubidi_getLevelAt_56 PROC				; COMDAT
; Line 249
	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 251
	cmp	DWORD PTR _pBiDi$[ebp], 0
	je	SHORT $LN6@ubidi_getL
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR _pBiDi$[ebp]
	je	SHORT $LN5@ubidi_getL
	mov	eax, DWORD PTR _pBiDi$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN6@ubidi_getL
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _pBiDi$[ebp]
	mov	eax, DWORD PTR [ecx]
	cmp	eax, DWORD PTR [edx]
	jne	SHORT $LN6@ubidi_getL
$LN5@ubidi_getL:
	cmp	DWORD PTR _charIndex$[ebp], 0
	jl	SHORT $LN6@ubidi_getL
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR _charIndex$[ebp]
	jg	SHORT $LN7@ubidi_getL
$LN6@ubidi_getL:
; Line 252
	xor	al, al
	jmp	SHORT $LN8@ubidi_getL
	jmp	SHORT $LN8@ubidi_getL
$LN7@ubidi_getL:
; Line 253
	mov	eax, DWORD PTR _pBiDi$[ebp]
	cmp	DWORD PTR [eax+120], 2
	jne	SHORT $LN2@ubidi_getL
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR _charIndex$[ebp]
	cmp	ecx, DWORD PTR [eax+132]
	jl	SHORT $LN3@ubidi_getL
$LN2@ubidi_getL:
; Line 254
	mov	eax, DWORD PTR _pBiDi$[ebp]
	movzx	ecx, BYTE PTR [eax+98]
	test	ecx, ecx
	je	SHORT $LN10@ubidi_getL
	mov	edx, DWORD PTR _pBiDi$[ebp]
	mov	eax, DWORD PTR [edx+140]
	mov	ecx, DWORD PTR _charIndex$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jl	SHORT $LN10@ubidi_getL
	mov	edx, DWORD PTR _charIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _pBiDi$[ebp]
	push	eax
	call	_ubidi_getParaLevelAtIndex_56
	add	esp, 8
	movzx	ecx, al
	mov	DWORD PTR tv88[ebp], ecx
	jmp	SHORT $LN11@ubidi_getL
$LN10@ubidi_getL:
	mov	edx, DWORD PTR _pBiDi$[ebp]
	movzx	eax, BYTE PTR [edx+97]
	mov	DWORD PTR tv88[ebp], eax
$LN11@ubidi_getL:
	mov	al, BYTE PTR tv88[ebp]
	jmp	SHORT $LN8@ubidi_getL
; Line 255
	jmp	SHORT $LN8@ubidi_getL
$LN3@ubidi_getL:
; Line 256
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+80]
	mov	edx, DWORD PTR _charIndex$[ebp]
	mov	al, BYTE PTR [ecx+edx]
$LN8@ubidi_getL:
; Line 258
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ubidi_getLevelAt_56 ENDP
_TEXT	ENDS
PUBLIC	_ubidi_getLevels_56
EXTRN	_memset:PROC
EXTRN	_memcpy:PROC
EXTRN	_uprv_checkValidMemory:PROC
EXTRN	_ubidi_getMemory_56:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _ubidi_getLevels_56
_TEXT	SEGMENT
_levels$8672 = -32					; size = 4
_length$ = -20						; size = 4
_start$ = -8						; size = 4
_pBiDi$ = 8						; size = 4
_pErrorCode$ = 12					; size = 4
_ubidi_getLevels_56 PROC				; COMDAT
; Line 261
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 264
	cmp	DWORD PTR _pErrorCode$[ebp], 0
	je	SHORT $LN9@ubidi_getL@2
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN10@ubidi_getL@2
$LN9@ubidi_getL@2:
	xor	eax, eax
	jmp	$LN11@ubidi_getL@2
$LN10@ubidi_getL@2:
; Line 265
	cmp	DWORD PTR _pBiDi$[ebp], 0
	je	SHORT $LN7@ubidi_getL@2
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR _pBiDi$[ebp]
	je	SHORT $LN8@ubidi_getL@2
	mov	eax, DWORD PTR _pBiDi$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN7@ubidi_getL@2
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _pBiDi$[ebp]
	mov	eax, DWORD PTR [ecx]
	cmp	eax, DWORD PTR [edx]
	je	SHORT $LN8@ubidi_getL@2
$LN7@ubidi_getL@2:
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 27			; 0000001bH
	xor	eax, eax
	jmp	$LN11@ubidi_getL@2
$LN8@ubidi_getL@2:
; Line 266
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _length$[ebp], ecx
	cmp	DWORD PTR _length$[ebp], 0
	jg	SHORT $LN5@ubidi_getL@2
; Line 267
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 1
; Line 268
	xor	eax, eax
	jmp	$LN11@ubidi_getL@2
$LN5@ubidi_getL@2:
; Line 270
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+132]
	mov	DWORD PTR _start$[ebp], ecx
	mov	edx, DWORD PTR _start$[ebp]
	cmp	edx, DWORD PTR _length$[ebp]
	jne	SHORT $LN4@ubidi_getL@2
; Line 272
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	eax, DWORD PTR [eax+80]
	jmp	$LN11@ubidi_getL@2
$LN4@ubidi_getL@2:
; Line 282
	mov	eax, DWORD PTR _length$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pBiDi$[ebp]
	movzx	edx, BYTE PTR [ecx+72]
	push	edx
	mov	eax, DWORD PTR _pBiDi$[ebp]
	add	eax, 28					; 0000001cH
	push	eax
	mov	ecx, DWORD PTR _pBiDi$[ebp]
	add	ecx, 52					; 00000034H
	push	ecx
	call	_ubidi_getMemory_56
	add	esp, 16					; 00000010H
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN3@ubidi_getL@2
; Line 283
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	mov	DWORD PTR _levels$8672[ebp], ecx
; Line 285
	cmp	DWORD PTR _start$[ebp], 0
	jle	SHORT $LN2@ubidi_getL@2
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR _levels$8672[ebp]
	cmp	ecx, DWORD PTR [eax+80]
	je	SHORT $LN2@ubidi_getL@2
; Line 286
	push	1
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+80]
	push	ecx
	call	_uprv_checkValidMemory
	add	esp, 8
	mov	edx, DWORD PTR _start$[ebp]
	push	edx
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+80]
	push	ecx
	mov	edx, DWORD PTR _levels$8672[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN2@ubidi_getL@2:
; Line 290
	mov	eax, DWORD PTR _length$[ebp]
	sub	eax, DWORD PTR _start$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pBiDi$[ebp]
	movzx	edx, BYTE PTR [ecx+97]
	push	edx
	mov	eax, DWORD PTR _levels$8672[ebp]
	add	eax, DWORD PTR _start$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
; Line 293
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR _length$[ebp]
	mov	DWORD PTR [eax+132], ecx
; Line 294
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR _levels$8672[ebp]
	mov	DWORD PTR [eax+80], ecx
	mov	eax, DWORD PTR _levels$8672[ebp]
	jmp	SHORT $LN11@ubidi_getL@2
; Line 295
	jmp	SHORT $LN11@ubidi_getL@2
$LN3@ubidi_getL@2:
; Line 297
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 7
; Line 298
	xor	eax, eax
$LN11@ubidi_getL@2:
; Line 300
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ubidi_getLevels_56 ENDP
_TEXT	ENDS
PUBLIC	_ubidi_countRuns_56
PUBLIC	__$ArrayPad$
PUBLIC	_ubidi_getLogicalRun_56
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _ubidi_getLogicalRun_56
_TEXT	SEGMENT
tv139 = -292						; size = 4
_iRun$ = -92						; size = 12
_i$ = -72						; size = 4
_logicalFirst$ = -60					; size = 4
_logicalLimit$ = -48					; size = 4
_visualStart$ = -36					; size = 4
_runCount$ = -24					; size = 4
_errorCode$ = -12					; size = 4
__$ArrayPad$ = -4					; size = 4
_pBiDi$ = 8						; size = 4
_logicalPosition$ = 12					; size = 4
_pLogicalLimit$ = 16					; size = 4
_pLevel$ = 20						; size = 4
_ubidi_getLogicalRun_56 PROC				; COMDAT
; Line 304
	push	ebp
	mov	ebp, esp
	sub	esp, 292				; 00000124H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-292]
	mov	ecx, 73					; 00000049H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 309
	mov	DWORD PTR _errorCode$[ebp], 0
; Line 310
	cmp	DWORD PTR _logicalPosition$[ebp], 0
	jl	SHORT $LN13@ubidi_getL@3
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR _logicalPosition$[ebp]
	cmp	ecx, DWORD PTR [eax+16]
	jl	SHORT $LN14@ubidi_getL@3
$LN13@ubidi_getL@3:
	mov	DWORD PTR _errorCode$[ebp], 1
	jmp	$LN15@ubidi_getL@3
$LN14@ubidi_getL@3:
; Line 312
	lea	eax, DWORD PTR _errorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pBiDi$[ebp]
	push	ecx
	call	_ubidi_countRuns_56
	add	esp, 8
	mov	DWORD PTR _runCount$[ebp], eax
; Line 313
	cmp	DWORD PTR _errorCode$[ebp], 0
	jle	SHORT $LN12@ubidi_getL@3
; Line 314
	jmp	$LN15@ubidi_getL@3
$LN12@ubidi_getL@3:
; Line 319
	mov	DWORD PTR _logicalLimit$[ebp], 0
	mov	eax, DWORD PTR _logicalLimit$[ebp]
	mov	DWORD PTR _visualStart$[ebp], eax
; Line 320
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+228]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _iRun$[ebp], edx
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR _iRun$[ebp+4], eax
	mov	ecx, DWORD PTR [ecx+8]
	mov	DWORD PTR _iRun$[ebp+8], ecx
; Line 322
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN11@ubidi_getL@3
$LN10@ubidi_getL@3:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN11@ubidi_getL@3:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _runCount$[ebp]
	jge	SHORT $LN9@ubidi_getL@3
; Line 323
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _pBiDi$[ebp]
	mov	edx, DWORD PTR [ecx+228]
	add	edx, eax
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _iRun$[ebp], eax
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR _iRun$[ebp+4], ecx
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR _iRun$[ebp+8], edx
; Line 324
	mov	eax, DWORD PTR _iRun$[ebp]
	and	eax, 2147483647				; 7fffffffH
	mov	DWORD PTR _logicalFirst$[ebp], eax
; Line 325
	mov	eax, DWORD PTR _logicalFirst$[ebp]
	add	eax, DWORD PTR _iRun$[ebp+4]
	sub	eax, DWORD PTR _visualStart$[ebp]
	mov	DWORD PTR _logicalLimit$[ebp], eax
; Line 327
	mov	eax, DWORD PTR _logicalPosition$[ebp]
	cmp	eax, DWORD PTR _logicalFirst$[ebp]
	jl	SHORT $LN8@ubidi_getL@3
	mov	eax, DWORD PTR _logicalPosition$[ebp]
	cmp	eax, DWORD PTR _logicalLimit$[ebp]
	jge	SHORT $LN8@ubidi_getL@3
; Line 328
	jmp	SHORT $LN9@ubidi_getL@3
$LN8@ubidi_getL@3:
; Line 330
	mov	eax, DWORD PTR _iRun$[ebp+4]
	mov	DWORD PTR _visualStart$[ebp], eax
; Line 331
	jmp	SHORT $LN10@ubidi_getL@3
$LN9@ubidi_getL@3:
; Line 332
	cmp	DWORD PTR _pLogicalLimit$[ebp], 0
	je	SHORT $LN7@ubidi_getL@3
; Line 333
	mov	eax, DWORD PTR _pLogicalLimit$[ebp]
	mov	ecx, DWORD PTR _logicalLimit$[ebp]
	mov	DWORD PTR [eax], ecx
$LN7@ubidi_getL@3:
; Line 335
	cmp	DWORD PTR _pLevel$[ebp], 0
	je	$LN15@ubidi_getL@3
; Line 336
	mov	eax, DWORD PTR _pBiDi$[ebp]
	cmp	DWORD PTR [eax+88], 3
	jne	SHORT $LN5@ubidi_getL@3
; Line 337
	mov	eax, DWORD PTR _iRun$[ebp]
	shr	eax, 31					; 0000001fH
	mov	ecx, DWORD PTR _pLevel$[ebp]
	mov	BYTE PTR [ecx], al
	jmp	SHORT $LN15@ubidi_getL@3
$LN5@ubidi_getL@3:
; Line 339
	mov	eax, DWORD PTR _pBiDi$[ebp]
	cmp	DWORD PTR [eax+120], 2
	jne	SHORT $LN2@ubidi_getL@3
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR _logicalPosition$[ebp]
	cmp	ecx, DWORD PTR [eax+132]
	jl	SHORT $LN3@ubidi_getL@3
$LN2@ubidi_getL@3:
; Line 340
	mov	eax, DWORD PTR _pBiDi$[ebp]
	movzx	ecx, BYTE PTR [eax+98]
	test	ecx, ecx
	je	SHORT $LN17@ubidi_getL@3
	mov	edx, DWORD PTR _pBiDi$[ebp]
	mov	eax, DWORD PTR [edx+140]
	mov	ecx, DWORD PTR _logicalPosition$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jl	SHORT $LN17@ubidi_getL@3
	mov	edx, DWORD PTR _logicalPosition$[ebp]
	push	edx
	mov	eax, DWORD PTR _pBiDi$[ebp]
	push	eax
	call	_ubidi_getParaLevelAtIndex_56
	add	esp, 8
	movzx	ecx, al
	mov	DWORD PTR tv139[ebp], ecx
	jmp	SHORT $LN18@ubidi_getL@3
$LN17@ubidi_getL@3:
	mov	edx, DWORD PTR _pBiDi$[ebp]
	movzx	eax, BYTE PTR [edx+97]
	mov	DWORD PTR tv139[ebp], eax
$LN18@ubidi_getL@3:
	mov	ecx, DWORD PTR _pLevel$[ebp]
	mov	dl, BYTE PTR tv139[ebp]
	mov	BYTE PTR [ecx], dl
; Line 341
	jmp	SHORT $LN15@ubidi_getL@3
$LN3@ubidi_getL@3:
; Line 342
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+80]
	mov	edx, DWORD PTR _pLevel$[ebp]
	mov	eax, DWORD PTR _logicalPosition$[ebp]
	mov	cl, BYTE PTR [ecx+eax]
	mov	BYTE PTR [edx], cl
$LN15@ubidi_getL@3:
; Line 345
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN22@ubidi_getL@3
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 292				; 00000124H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN22@ubidi_getL@3:
	DD	2
	DD	$LN21@ubidi_getL@3
$LN21@ubidi_getL@3:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN19@ubidi_getL@3
	DD	-92					; ffffffa4H
	DD	12					; 0000000cH
	DD	$LN20@ubidi_getL@3
$LN20@ubidi_getL@3:
	DB	105					; 00000069H
	DB	82					; 00000052H
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	0
$LN19@ubidi_getL@3:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	67					; 00000043H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
_ubidi_getLogicalRun_56 ENDP
_TEXT	ENDS
PUBLIC	_ubidi_getRuns_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _ubidi_countRuns_56
_TEXT	SEGMENT
_pBiDi$ = 8						; size = 4
_pErrorCode$ = 12					; size = 4
_ubidi_countRuns_56 PROC				; COMDAT
; Line 350
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 351
	cmp	DWORD PTR _pErrorCode$[ebp], 0
	je	SHORT $LN5@ubidi_coun
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN6@ubidi_coun
$LN5@ubidi_coun:
	or	eax, -1
	jmp	SHORT $LN7@ubidi_coun
$LN6@ubidi_coun:
; Line 352
	cmp	DWORD PTR _pBiDi$[ebp], 0
	je	SHORT $LN3@ubidi_coun
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR _pBiDi$[ebp]
	je	SHORT $LN4@ubidi_coun
	mov	eax, DWORD PTR _pBiDi$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN3@ubidi_coun
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _pBiDi$[ebp]
	mov	eax, DWORD PTR [ecx]
	cmp	eax, DWORD PTR [edx]
	je	SHORT $LN4@ubidi_coun
$LN3@ubidi_coun:
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 27			; 0000001bH
	or	eax, -1
	jmp	SHORT $LN7@ubidi_coun
$LN4@ubidi_coun:
; Line 353
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pBiDi$[ebp]
	push	ecx
	call	_ubidi_getRuns_56
	add	esp, 8
; Line 354
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN1@ubidi_coun
; Line 355
	or	eax, -1
	jmp	SHORT $LN7@ubidi_coun
$LN1@ubidi_coun:
; Line 357
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	eax, DWORD PTR [eax+224]
$LN7@ubidi_coun:
; Line 358
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ubidi_countRuns_56 ENDP
_TEXT	ENDS
PUBLIC	_ubidi_getVisualRun_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _ubidi_getVisualRun_56
_TEXT	SEGMENT
_errorCode$ = -20					; size = 4
_start$ = -8						; size = 4
_pBiDi$ = 8						; size = 4
_runIndex$ = 12						; size = 4
_pLogicalStart$ = 16					; size = 4
_pLength$ = 20						; size = 4
_ubidi_getVisualRun_56 PROC				; COMDAT
; Line 363
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 365
	mov	DWORD PTR _errorCode$[ebp], 0
; Line 366
	cmp	DWORD PTR _pBiDi$[ebp], 0
	je	SHORT $LN9@ubidi_getV
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR _pBiDi$[ebp]
	je	SHORT $LN10@ubidi_getV
	mov	eax, DWORD PTR _pBiDi$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN9@ubidi_getV
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _pBiDi$[ebp]
	mov	eax, DWORD PTR [ecx]
	cmp	eax, DWORD PTR [edx]
	je	SHORT $LN10@ubidi_getV
$LN9@ubidi_getV:
	mov	DWORD PTR _errorCode$[ebp], 27		; 0000001bH
	xor	eax, eax
	jmp	$LN11@ubidi_getV
$LN10@ubidi_getV:
; Line 367
	lea	eax, DWORD PTR _errorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pBiDi$[ebp]
	push	ecx
	call	_ubidi_getRuns_56
	add	esp, 8
; Line 368
	cmp	DWORD PTR _errorCode$[ebp], 0
	jle	SHORT $LN7@ubidi_getV
; Line 369
	xor	eax, eax
	jmp	$LN11@ubidi_getV
$LN7@ubidi_getV:
; Line 371
	cmp	DWORD PTR _runIndex$[ebp], 0
	jl	SHORT $LN5@ubidi_getV
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR _runIndex$[ebp]
	cmp	ecx, DWORD PTR [eax+224]
	jl	SHORT $LN6@ubidi_getV
$LN5@ubidi_getV:
	mov	DWORD PTR _errorCode$[ebp], 1
	xor	eax, eax
	jmp	SHORT $LN11@ubidi_getV
$LN6@ubidi_getV:
; Line 373
	mov	eax, DWORD PTR _runIndex$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _pBiDi$[ebp]
	mov	edx, DWORD PTR [ecx+228]
	mov	eax, DWORD PTR [eax+edx]
	mov	DWORD PTR _start$[ebp], eax
; Line 374
	cmp	DWORD PTR _pLogicalStart$[ebp], 0
	je	SHORT $LN4@ubidi_getV
; Line 375
	mov	eax, DWORD PTR _start$[ebp]
	and	eax, 2147483647				; 7fffffffH
	mov	ecx, DWORD PTR _pLogicalStart$[ebp]
	mov	DWORD PTR [ecx], eax
$LN4@ubidi_getV:
; Line 377
	cmp	DWORD PTR _pLength$[ebp], 0
	je	SHORT $LN3@ubidi_getV
; Line 378
	cmp	DWORD PTR _runIndex$[ebp], 0
	jle	SHORT $LN2@ubidi_getV
; Line 380
	mov	eax, DWORD PTR _runIndex$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _pBiDi$[ebp]
	mov	edx, DWORD PTR [ecx+228]
	mov	ecx, DWORD PTR _runIndex$[ebp]
	sub	ecx, 1
	imul	ecx, 12					; 0000000cH
	mov	esi, DWORD PTR _pBiDi$[ebp]
	mov	esi, DWORD PTR [esi+228]
	mov	edx, DWORD PTR [edx+eax+4]
	sub	edx, DWORD PTR [esi+ecx+4]
	mov	eax, DWORD PTR _pLength$[ebp]
	mov	DWORD PTR [eax], edx
; Line 381
	jmp	SHORT $LN3@ubidi_getV
$LN2@ubidi_getV:
; Line 382
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+228]
	mov	edx, DWORD PTR _pLength$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx], eax
$LN3@ubidi_getV:
; Line 385
	mov	eax, DWORD PTR _start$[ebp]
	shr	eax, 31					; 0000001fH
$LN11@ubidi_getV:
; Line 386
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN15@ubidi_getV
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN15@ubidi_getV:
	DD	1
	DD	$LN14@ubidi_getV
$LN14@ubidi_getV:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN13@ubidi_getV
$LN13@ubidi_getV:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	67					; 00000043H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
_ubidi_getVisualRun_56 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _ubidi_getRuns_56
_TEXT	SEGMENT
tv197 = -436						; size = 4
_pu$8875 = -236						; size = 4
_limit$8874 = -224					; size = 4
_start$8873 = -212					; size = 4
_runIndex$8872 = -200					; size = 4
_runIndex$8867 = -188					; size = 4
_limit$8866 = -176					; size = 4
_start$8865 = -164					; size = 4
_point$8864 = -152					; size = 4
_trailingRun$8861 = -140				; size = 4
_maxLevel$8840 = -125					; size = 1
_minLevel$8839 = -113					; size = 1
_start$8838 = -104					; size = 4
_runIndex$8837 = -92					; size = 4
_runs$8836 = -80					; size = 4
_level$8829 = -65					; size = 1
_runCount$8828 = -56					; size = 4
_i$8827 = -44						; size = 4
_levels$8826 = -32					; size = 4
_limit$8825 = -20					; size = 4
_length$8824 = -8					; size = 4
_pBiDi$ = 8						; size = 4
_pErrorCode$ = 12					; size = 4
_ubidi_getRuns_56 PROC					; COMDAT
; Line 548
	push	ebp
	mov	ebp, esp
	sub	esp, 436				; 000001b4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-436]
	mov	ecx, 109				; 0000006dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 553
	mov	eax, DWORD PTR _pBiDi$[ebp]
	cmp	DWORD PTR [eax+224], 0
	jl	SHORT $LN35@ubidi_getR
; Line 554
	mov	al, 1
	jmp	$LN36@ubidi_getR
$LN35@ubidi_getR:
; Line 557
	mov	eax, DWORD PTR _pBiDi$[ebp]
	cmp	DWORD PTR [eax+120], 2
	je	SHORT $LN34@ubidi_getR
; Line 560
	mov	eax, DWORD PTR _pBiDi$[ebp]
	movzx	ecx, BYTE PTR [eax+97]
	push	ecx
	mov	edx, DWORD PTR _pBiDi$[ebp]
	push	edx
	call	_getSingleRun
	add	esp, 8
; Line 561
	jmp	$LN33@ubidi_getR
$LN34@ubidi_getR:
; Line 563
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _length$8824[ebp], ecx
; Line 564
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+80]
	mov	DWORD PTR _levels$8826[ebp], ecx
; Line 566
	mov	BYTE PTR _level$8829[ebp], 254		; 000000feH
; Line 578
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+132]
	mov	DWORD PTR _limit$8825[ebp], ecx
; Line 580
	mov	DWORD PTR _runCount$8828[ebp], 0
; Line 581
	mov	DWORD PTR _i$8827[ebp], 0
	jmp	SHORT $LN32@ubidi_getR
$LN31@ubidi_getR:
	mov	eax, DWORD PTR _i$8827[ebp]
	add	eax, 1
	mov	DWORD PTR _i$8827[ebp], eax
$LN32@ubidi_getR:
	mov	eax, DWORD PTR _i$8827[ebp]
	cmp	eax, DWORD PTR _limit$8825[ebp]
	jge	SHORT $LN30@ubidi_getR
; Line 583
	mov	eax, DWORD PTR _levels$8826[ebp]
	add	eax, DWORD PTR _i$8827[ebp]
	movzx	ecx, BYTE PTR [eax]
	movzx	edx, BYTE PTR _level$8829[ebp]
	cmp	ecx, edx
	je	SHORT $LN29@ubidi_getR
; Line 584
	mov	eax, DWORD PTR _runCount$8828[ebp]
	add	eax, 1
	mov	DWORD PTR _runCount$8828[ebp], eax
; Line 585
	mov	eax, DWORD PTR _levels$8826[ebp]
	add	eax, DWORD PTR _i$8827[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _level$8829[ebp], cl
$LN29@ubidi_getR:
; Line 587
	jmp	SHORT $LN31@ubidi_getR
$LN30@ubidi_getR:
; Line 593
	cmp	DWORD PTR _runCount$8828[ebp], 1
	jne	SHORT $LN28@ubidi_getR
	mov	eax, DWORD PTR _limit$8825[ebp]
	cmp	eax, DWORD PTR _length$8824[ebp]
	jne	SHORT $LN28@ubidi_getR
; Line 595
	mov	eax, DWORD PTR _levels$8826[ebp]
	movzx	ecx, BYTE PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _pBiDi$[ebp]
	push	edx
	call	_getSingleRun
	add	esp, 8
; Line 596
	jmp	$LN33@ubidi_getR
$LN28@ubidi_getR:
; Line 600
	mov	BYTE PTR _minLevel$8839[ebp], 126	; 0000007eH
	mov	BYTE PTR _maxLevel$8840[ebp], 0
; Line 603
	mov	eax, DWORD PTR _limit$8825[ebp]
	cmp	eax, DWORD PTR _length$8824[ebp]
	jge	SHORT $LN26@ubidi_getR
; Line 604
	mov	eax, DWORD PTR _runCount$8828[ebp]
	add	eax, 1
	mov	DWORD PTR _runCount$8828[ebp], eax
$LN26@ubidi_getR:
; Line 608
	mov	eax, DWORD PTR _runCount$8828[ebp]
	imul	eax, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _pBiDi$[ebp]
	movzx	edx, BYTE PTR [ecx+73]
	push	edx
	mov	eax, DWORD PTR _pBiDi$[ebp]
	add	eax, 40					; 00000028H
	push	eax
	mov	ecx, DWORD PTR _pBiDi$[ebp]
	add	ecx, 64					; 00000040H
	push	ecx
	call	_ubidi_getMemory_56
	add	esp, 16					; 00000010H
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN25@ubidi_getR
; Line 609
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	DWORD PTR _runs$8836[ebp], ecx
; Line 610
	jmp	SHORT $LN24@ubidi_getR
$LN25@ubidi_getR:
; Line 611
	xor	al, al
	jmp	$LN36@ubidi_getR
$LN24@ubidi_getR:
; Line 620
	mov	DWORD PTR _runIndex$8837[ebp], 0
; Line 623
	mov	DWORD PTR _i$8827[ebp], 0
$LN23@ubidi_getR:
; Line 626
	mov	eax, DWORD PTR _i$8827[ebp]
	mov	DWORD PTR _start$8838[ebp], eax
; Line 627
	mov	eax, DWORD PTR _levels$8826[ebp]
	add	eax, DWORD PTR _i$8827[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _level$8829[ebp], cl
; Line 628
	movzx	eax, BYTE PTR _level$8829[ebp]
	movzx	ecx, BYTE PTR _minLevel$8839[ebp]
	cmp	eax, ecx
	jge	SHORT $LN20@ubidi_getR
; Line 629
	mov	al, BYTE PTR _level$8829[ebp]
	mov	BYTE PTR _minLevel$8839[ebp], al
$LN20@ubidi_getR:
; Line 631
	movzx	eax, BYTE PTR _level$8829[ebp]
	movzx	ecx, BYTE PTR _maxLevel$8840[ebp]
	cmp	eax, ecx
	jle	SHORT $LN18@ubidi_getR
; Line 632
	mov	al, BYTE PTR _level$8829[ebp]
	mov	BYTE PTR _maxLevel$8840[ebp], al
$LN18@ubidi_getR:
; Line 636
	mov	eax, DWORD PTR _i$8827[ebp]
	add	eax, 1
	mov	DWORD PTR _i$8827[ebp], eax
	mov	ecx, DWORD PTR _i$8827[ebp]
	cmp	ecx, DWORD PTR _limit$8825[ebp]
	jge	SHORT $LN17@ubidi_getR
	mov	eax, DWORD PTR _levels$8826[ebp]
	add	eax, DWORD PTR _i$8827[ebp]
	movzx	ecx, BYTE PTR [eax]
	movzx	edx, BYTE PTR _level$8829[ebp]
	cmp	ecx, edx
	jne	SHORT $LN17@ubidi_getR
	jmp	SHORT $LN18@ubidi_getR
$LN17@ubidi_getR:
; Line 639
	mov	eax, DWORD PTR _runIndex$8837[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _runs$8836[ebp]
	mov	edx, DWORD PTR _start$8838[ebp]
	mov	DWORD PTR [ecx+eax], edx
; Line 640
	mov	eax, DWORD PTR _i$8827[ebp]
	sub	eax, DWORD PTR _start$8838[ebp]
	mov	ecx, DWORD PTR _runIndex$8837[ebp]
	imul	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _runs$8836[ebp]
	mov	DWORD PTR [edx+ecx+4], eax
; Line 641
	mov	eax, DWORD PTR _runIndex$8837[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _runs$8836[ebp]
	mov	DWORD PTR [ecx+eax+8], 0
; Line 642
	mov	eax, DWORD PTR _runIndex$8837[ebp]
	add	eax, 1
	mov	DWORD PTR _runIndex$8837[ebp], eax
; Line 643
	mov	eax, DWORD PTR _i$8827[ebp]
	cmp	eax, DWORD PTR _limit$8825[ebp]
	jl	$LN23@ubidi_getR
; Line 645
	mov	eax, DWORD PTR _limit$8825[ebp]
	cmp	eax, DWORD PTR _length$8824[ebp]
	jge	SHORT $LN16@ubidi_getR
; Line 647
	mov	eax, DWORD PTR _runIndex$8837[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _runs$8836[ebp]
	mov	edx, DWORD PTR _limit$8825[ebp]
	mov	DWORD PTR [ecx+eax], edx
; Line 648
	mov	eax, DWORD PTR _length$8824[ebp]
	sub	eax, DWORD PTR _limit$8825[ebp]
	mov	ecx, DWORD PTR _runIndex$8837[ebp]
	imul	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _runs$8836[ebp]
	mov	DWORD PTR [edx+ecx+4], eax
; Line 651
	mov	eax, DWORD PTR _pBiDi$[ebp]
	movzx	ecx, BYTE PTR [eax+97]
	movzx	edx, BYTE PTR _minLevel$8839[ebp]
	cmp	ecx, edx
	jge	SHORT $LN16@ubidi_getR
; Line 652
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	cl, BYTE PTR [eax+97]
	mov	BYTE PTR _minLevel$8839[ebp], cl
$LN16@ubidi_getR:
; Line 657
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR _runs$8836[ebp]
	mov	DWORD PTR [eax+228], ecx
; Line 658
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR _runCount$8828[ebp]
	mov	DWORD PTR [eax+224], ecx
; Line 660
	movzx	eax, BYTE PTR _maxLevel$8840[ebp]
	push	eax
	movzx	ecx, BYTE PTR _minLevel$8839[ebp]
	push	ecx
	mov	edx, DWORD PTR _pBiDi$[ebp]
	push	edx
	call	_reorderLine
	add	esp, 12					; 0000000cH
; Line 664
	mov	DWORD PTR _limit$8825[ebp], 0
; Line 665
	mov	DWORD PTR _i$8827[ebp], 0
	jmp	SHORT $LN14@ubidi_getR
$LN13@ubidi_getR:
	mov	eax, DWORD PTR _i$8827[ebp]
	add	eax, 1
	mov	DWORD PTR _i$8827[ebp], eax
$LN14@ubidi_getR:
	mov	eax, DWORD PTR _i$8827[ebp]
	cmp	eax, DWORD PTR _runCount$8828[ebp]
	jge	SHORT $LN12@ubidi_getR
; Line 666
	mov	eax, DWORD PTR _i$8827[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _i$8827[ebp]
	imul	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _runs$8836[ebp]
	mov	ecx, DWORD PTR [edx+ecx]
	mov	edx, DWORD PTR _levels$8826[ebp]
	movzx	ecx, BYTE PTR [edx+ecx]
	shl	ecx, 31					; 0000001fH
	mov	edx, DWORD PTR _runs$8836[ebp]
	or	ecx, DWORD PTR [edx+eax]
	mov	eax, DWORD PTR _i$8827[ebp]
	imul	eax, 12					; 0000000cH
	mov	edx, DWORD PTR _runs$8836[ebp]
	mov	DWORD PTR [edx+eax], ecx
; Line 667
	mov	eax, DWORD PTR _i$8827[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _runs$8836[ebp]
	mov	edx, DWORD PTR _limit$8825[ebp]
	add	edx, DWORD PTR [ecx+eax+4]
	mov	DWORD PTR _limit$8825[ebp], edx
; Line 668
	mov	eax, DWORD PTR _i$8827[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _runs$8836[ebp]
	mov	edx, DWORD PTR _limit$8825[ebp]
	mov	DWORD PTR [ecx+eax+4], edx
; Line 669
	jmp	SHORT $LN13@ubidi_getR
$LN12@ubidi_getR:
; Line 675
	mov	eax, DWORD PTR _runIndex$8837[ebp]
	cmp	eax, DWORD PTR _runCount$8828[ebp]
	jge	SHORT $LN33@ubidi_getR
; Line 676
	mov	eax, DWORD PTR _pBiDi$[ebp]
	movzx	ecx, BYTE PTR [eax+97]
	and	ecx, 1
	je	SHORT $LN38@ubidi_getR
	mov	DWORD PTR tv197[ebp], 0
	jmp	SHORT $LN39@ubidi_getR
$LN38@ubidi_getR:
	mov	edx, DWORD PTR _runIndex$8837[ebp]
	mov	DWORD PTR tv197[ebp], edx
$LN39@ubidi_getR:
	mov	eax, DWORD PTR tv197[ebp]
	mov	DWORD PTR _trailingRun$8861[ebp], eax
; Line 678
	mov	eax, DWORD PTR _trailingRun$8861[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _pBiDi$[ebp]
	movzx	edx, BYTE PTR [ecx+97]
	shl	edx, 31					; 0000001fH
	mov	ecx, DWORD PTR _runs$8836[ebp]
	or	edx, DWORD PTR [ecx+eax]
	mov	eax, DWORD PTR _trailingRun$8861[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _runs$8836[ebp]
	mov	DWORD PTR [ecx+eax], edx
$LN33@ubidi_getR:
; Line 684
	mov	eax, DWORD PTR _pBiDi$[ebp]
	cmp	DWORD PTR [eax+336], 0
	jle	$LN10@ubidi_getR
; Line 685
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+348]
	mov	DWORD PTR _start$8865[ebp], ecx
; Line 686
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+336]
	mov	edx, DWORD PTR _start$8865[ebp]
	lea	eax, DWORD PTR [edx+ecx*8]
	mov	DWORD PTR _limit$8866[ebp], eax
; Line 688
	mov	eax, DWORD PTR _start$8865[ebp]
	mov	DWORD PTR _point$8864[ebp], eax
	jmp	SHORT $LN9@ubidi_getR
$LN8@ubidi_getR:
	mov	eax, DWORD PTR _point$8864[ebp]
	add	eax, 8
	mov	DWORD PTR _point$8864[ebp], eax
$LN9@ubidi_getR:
	mov	eax, DWORD PTR _point$8864[ebp]
	cmp	eax, DWORD PTR _limit$8866[ebp]
	jae	SHORT $LN10@ubidi_getR
; Line 689
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _point$8864[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _pBiDi$[ebp]
	push	eax
	call	_getRunFromLogicalIndex
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _runIndex$8867[ebp], eax
; Line 690
	mov	eax, DWORD PTR _runIndex$8867[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _pBiDi$[ebp]
	mov	edx, DWORD PTR [ecx+228]
	mov	ecx, DWORD PTR _point$8864[ebp]
	mov	edx, DWORD PTR [edx+eax+8]
	or	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _runIndex$8867[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [ecx+228]
	mov	DWORD PTR [ecx+eax+8], edx
; Line 691
	jmp	SHORT $LN8@ubidi_getR
$LN10@ubidi_getR:
; Line 695
	mov	eax, DWORD PTR _pBiDi$[ebp]
	cmp	DWORD PTR [eax+352], 0
	jle	$LN6@ubidi_getR
; Line 697
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _start$8873[ebp], ecx
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _start$8873[ebp]
	lea	eax, DWORD PTR [edx+ecx*2]
	mov	DWORD PTR _limit$8874[ebp], eax
; Line 698
	mov	eax, DWORD PTR _start$8873[ebp]
	mov	DWORD PTR _pu$8875[ebp], eax
	jmp	SHORT $LN5@ubidi_getR
$LN4@ubidi_getR:
	mov	eax, DWORD PTR _pu$8875[ebp]
	add	eax, 2
	mov	DWORD PTR _pu$8875[ebp], eax
$LN5@ubidi_getR:
	mov	eax, DWORD PTR _pu$8875[ebp]
	cmp	eax, DWORD PTR _limit$8874[ebp]
	jae	$LN6@ubidi_getR
; Line 699
	mov	eax, DWORD PTR _pu$8875[ebp]
	movzx	ecx, WORD PTR [eax]
	and	ecx, -4					; fffffffcH
	cmp	ecx, 8204				; 0000200cH
	je	SHORT $LN1@ubidi_getR
	mov	eax, DWORD PTR _pu$8875[ebp]
	movzx	ecx, WORD PTR [eax]
	sub	ecx, 8234				; 0000202aH
	cmp	ecx, 5
	jb	SHORT $LN1@ubidi_getR
	mov	eax, DWORD PTR _pu$8875[ebp]
	movzx	ecx, WORD PTR [eax]
	sub	ecx, 8294				; 00002066H
	cmp	ecx, 4
	jae	SHORT $LN2@ubidi_getR
$LN1@ubidi_getR:
; Line 700
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pu$8875[ebp]
	sub	ecx, DWORD PTR _start$8873[ebp]
	sar	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _pBiDi$[ebp]
	push	edx
	call	_getRunFromLogicalIndex
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _runIndex$8872[ebp], eax
; Line 701
	mov	eax, DWORD PTR _runIndex$8872[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _pBiDi$[ebp]
	mov	edx, DWORD PTR [ecx+228]
	mov	eax, DWORD PTR [edx+eax+8]
	sub	eax, 1
	mov	ecx, DWORD PTR _runIndex$8872[ebp]
	imul	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _pBiDi$[ebp]
	mov	edx, DWORD PTR [edx+228]
	mov	DWORD PTR [edx+ecx+8], eax
$LN2@ubidi_getR:
; Line 703
	jmp	$LN4@ubidi_getR
$LN6@ubidi_getR:
; Line 706
	mov	al, 1
$LN36@ubidi_getR:
; Line 707
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 436				; 000001b4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ubidi_getRuns_56 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _getSingleRun
_TEXT	SEGMENT
_pBiDi$ = 8						; size = 4
_level$ = 12						; size = 1
_getSingleRun PROC					; COMDAT
; Line 390
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 392
	mov	eax, DWORD PTR _pBiDi$[ebp]
	add	eax, 232				; 000000e8H
	mov	ecx, DWORD PTR _pBiDi$[ebp]
	mov	DWORD PTR [ecx+228], eax
; Line 393
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	DWORD PTR [eax+224], 1
; Line 396
	movzx	eax, BYTE PTR _level$[ebp]
	shl	eax, 31					; 0000001fH
	mov	ecx, DWORD PTR _pBiDi$[ebp]
	mov	edx, DWORD PTR [ecx+228]
	mov	DWORD PTR [edx], eax
; Line 397
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+228]
	mov	edx, DWORD PTR _pBiDi$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR [ecx+4], eax
; Line 398
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+228]
	mov	DWORD PTR [ecx+8], 0
; Line 399
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_getSingleRun ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _reorderLine
_TEXT	SEGMENT
_runCount$ = -92					; size = 4
_limitRun$ = -80					; size = 4
_endRun$ = -68						; size = 4
_firstRun$ = -56					; size = 4
_levels$ = -44						; size = 4
_tempRun$ = -32						; size = 12
_runs$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_pBiDi$ = 8						; size = 4
_minLevel$ = 12						; size = 1
_maxLevel$ = 16						; size = 1
_reorderLine PROC					; COMDAT
; Line 435
	push	ebp
	mov	ebp, esp
	sub	esp, 288				; 00000120H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-288]
	mov	ecx, 72					; 00000048H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 441
	movzx	eax, BYTE PTR _maxLevel$[ebp]
	movzx	ecx, BYTE PTR _minLevel$[ebp]
	or	ecx, 1
	cmp	eax, ecx
	jg	SHORT $LN19@reorderLin
; Line 442
	jmp	$LN20@reorderLin
$LN19@reorderLin:
; Line 450
	mov	al, BYTE PTR _minLevel$[ebp]
	add	al, 1
	mov	BYTE PTR _minLevel$[ebp], al
; Line 452
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+228]
	mov	DWORD PTR _runs$[ebp], ecx
; Line 453
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+80]
	mov	DWORD PTR _levels$[ebp], ecx
; Line 454
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+224]
	mov	DWORD PTR _runCount$[ebp], ecx
; Line 457
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR _pBiDi$[ebp]
	mov	edx, DWORD PTR [eax+132]
	cmp	edx, DWORD PTR [ecx+16]
	jge	SHORT $LN17@reorderLin
; Line 458
	mov	eax, DWORD PTR _runCount$[ebp]
	sub	eax, 1
	mov	DWORD PTR _runCount$[ebp], eax
$LN17@reorderLin:
; Line 461
	mov	al, BYTE PTR _maxLevel$[ebp]
	sub	al, 1
	mov	BYTE PTR _maxLevel$[ebp], al
	movzx	ecx, BYTE PTR _maxLevel$[ebp]
	movzx	edx, BYTE PTR _minLevel$[ebp]
	cmp	ecx, edx
	jl	$LN16@reorderLin
; Line 462
	mov	DWORD PTR _firstRun$[ebp], 0
$LN13@reorderLin:
; Line 468
	mov	eax, DWORD PTR _firstRun$[ebp]
	cmp	eax, DWORD PTR _runCount$[ebp]
	jge	SHORT $LN12@reorderLin
	mov	eax, DWORD PTR _firstRun$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _runs$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	mov	eax, DWORD PTR _levels$[ebp]
	movzx	ecx, BYTE PTR [eax+edx]
	movzx	edx, BYTE PTR _maxLevel$[ebp]
	cmp	ecx, edx
	jge	SHORT $LN12@reorderLin
; Line 469
	mov	eax, DWORD PTR _firstRun$[ebp]
	add	eax, 1
	mov	DWORD PTR _firstRun$[ebp], eax
; Line 470
	jmp	SHORT $LN13@reorderLin
$LN12@reorderLin:
; Line 471
	mov	eax, DWORD PTR _firstRun$[ebp]
	cmp	eax, DWORD PTR _runCount$[ebp]
	jl	SHORT $LN11@reorderLin
; Line 472
	jmp	$LN14@reorderLin
$LN11@reorderLin:
; Line 476
	mov	eax, DWORD PTR _firstRun$[ebp]
	mov	DWORD PTR _limitRun$[ebp], eax
$LN10@reorderLin:
	mov	eax, DWORD PTR _limitRun$[ebp]
	add	eax, 1
	mov	DWORD PTR _limitRun$[ebp], eax
	mov	ecx, DWORD PTR _limitRun$[ebp]
	cmp	ecx, DWORD PTR _runCount$[ebp]
	jge	SHORT $LN9@reorderLin
	mov	eax, DWORD PTR _limitRun$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _runs$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	mov	eax, DWORD PTR _levels$[ebp]
	movzx	ecx, BYTE PTR [eax+edx]
	movzx	edx, BYTE PTR _maxLevel$[ebp]
	cmp	ecx, edx
	jl	SHORT $LN9@reorderLin
	jmp	SHORT $LN10@reorderLin
$LN9@reorderLin:
; Line 479
	mov	eax, DWORD PTR _limitRun$[ebp]
	sub	eax, 1
	mov	DWORD PTR _endRun$[ebp], eax
$LN8@reorderLin:
; Line 480
	mov	eax, DWORD PTR _firstRun$[ebp]
	cmp	eax, DWORD PTR _endRun$[ebp]
	jge	SHORT $LN7@reorderLin
; Line 481
	mov	eax, DWORD PTR _firstRun$[ebp]
	imul	eax, 12					; 0000000cH
	add	eax, DWORD PTR _runs$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _tempRun$[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _tempRun$[ebp+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR _tempRun$[ebp+8], eax
; Line 482
	mov	eax, DWORD PTR _endRun$[ebp]
	imul	eax, 12					; 0000000cH
	add	eax, DWORD PTR _runs$[ebp]
	mov	ecx, DWORD PTR _firstRun$[ebp]
	imul	ecx, 12					; 0000000cH
	add	ecx, DWORD PTR _runs$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax
; Line 483
	mov	eax, DWORD PTR _endRun$[ebp]
	imul	eax, 12					; 0000000cH
	add	eax, DWORD PTR _runs$[ebp]
	mov	ecx, DWORD PTR _tempRun$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _tempRun$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _tempRun$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
; Line 484
	mov	eax, DWORD PTR _firstRun$[ebp]
	add	eax, 1
	mov	DWORD PTR _firstRun$[ebp], eax
; Line 485
	mov	eax, DWORD PTR _endRun$[ebp]
	sub	eax, 1
	mov	DWORD PTR _endRun$[ebp], eax
; Line 486
	jmp	SHORT $LN8@reorderLin
$LN7@reorderLin:
; Line 488
	mov	eax, DWORD PTR _limitRun$[ebp]
	cmp	eax, DWORD PTR _runCount$[ebp]
	jne	SHORT $LN6@reorderLin
; Line 489
	jmp	SHORT $LN14@reorderLin
; Line 490
	jmp	SHORT $LN5@reorderLin
$LN6@reorderLin:
; Line 491
	mov	eax, DWORD PTR _limitRun$[ebp]
	add	eax, 1
	mov	DWORD PTR _firstRun$[ebp], eax
$LN5@reorderLin:
; Line 493
	jmp	$LN13@reorderLin
$LN14@reorderLin:
; Line 494
	jmp	$LN17@reorderLin
$LN16@reorderLin:
; Line 497
	movzx	eax, BYTE PTR _minLevel$[ebp]
	and	eax, 1
	jne	$LN20@reorderLin
; Line 498
	mov	DWORD PTR _firstRun$[ebp], 0
; Line 501
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR _pBiDi$[ebp]
	mov	edx, DWORD PTR [eax+132]
	cmp	edx, DWORD PTR [ecx+16]
	jne	SHORT $LN2@reorderLin
; Line 502
	mov	eax, DWORD PTR _runCount$[ebp]
	sub	eax, 1
	mov	DWORD PTR _runCount$[ebp], eax
$LN2@reorderLin:
; Line 506
	mov	eax, DWORD PTR _firstRun$[ebp]
	cmp	eax, DWORD PTR _runCount$[ebp]
	jge	SHORT $LN20@reorderLin
; Line 507
	mov	eax, DWORD PTR _firstRun$[ebp]
	imul	eax, 12					; 0000000cH
	add	eax, DWORD PTR _runs$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _tempRun$[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _tempRun$[ebp+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR _tempRun$[ebp+8], eax
; Line 508
	mov	eax, DWORD PTR _runCount$[ebp]
	imul	eax, 12					; 0000000cH
	add	eax, DWORD PTR _runs$[ebp]
	mov	ecx, DWORD PTR _firstRun$[ebp]
	imul	ecx, 12					; 0000000cH
	add	ecx, DWORD PTR _runs$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax
; Line 509
	mov	eax, DWORD PTR _runCount$[ebp]
	imul	eax, 12					; 0000000cH
	add	eax, DWORD PTR _runs$[ebp]
	mov	ecx, DWORD PTR _tempRun$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _tempRun$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _tempRun$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
; Line 510
	mov	eax, DWORD PTR _firstRun$[ebp]
	add	eax, 1
	mov	DWORD PTR _firstRun$[ebp], eax
; Line 511
	mov	eax, DWORD PTR _runCount$[ebp]
	sub	eax, 1
	mov	DWORD PTR _runCount$[ebp], eax
; Line 512
	jmp	SHORT $LN2@reorderLin
$LN20@reorderLin:
; Line 514
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN24@reorderLin
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN24@reorderLin:
	DD	1
	DD	$LN23@reorderLin
$LN23@reorderLin:
	DD	-32					; ffffffe0H
	DD	12					; 0000000cH
	DD	$LN22@reorderLin
$LN22@reorderLin:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	82					; 00000052H
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	0
_reorderLine ENDP
_TEXT	ENDS
PUBLIC	??_C@_13COJANIEC@?$AA0?$AA?$AA@			; `string'
PUBLIC	??_C@_1FI@BCBOJMPO@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@ ; `string'
PUBLIC	?__LINE__Var@?1??getRunFromLogicalIndex@@9@9@8534d2d2 ; `getRunFromLogicalIndex'::`2'::__LINE__Var
EXTRN	__imp___wassert:PROC
;	COMDAT ??_C@_13COJANIEC@?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_13COJANIEC@?$AA0?$AA?$AA@ DB '0', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1FI@BCBOJMPO@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@
CONST	SEGMENT
??_C@_1FI@BCBOJMPO@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@ DB 'd'
	DB	00H, ':', 00H, '\', 00H, 'm', 00H, 'o', 00H, 'z', 00H, 'i', 00H
	DB	'l', 00H, 'l', 00H, 'a', 00H, '\', 00H, 'i', 00H, 'n', 00H, 't'
	DB	00H, 'l', 00H, '\', 00H, 'i', 00H, 'c', 00H, 'u', 00H, '\', 00H
	DB	's', 00H, 'o', 00H, 'u', 00H, 'r', 00H, 'c', 00H, 'e', 00H, '\'
	DB	00H, 'c', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'o', 00H, 'n', 00H
	DB	'\', 00H, 'u', 00H, 'b', 00H, 'i', 00H, 'd', 00H, 'i', 00H, 'l'
	DB	00H, 'n', 00H, '.', 00H, 'c', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??getRunFromLogicalIndex@@9@9@8534d2d2
_DATA	SEGMENT
?__LINE__Var@?1??getRunFromLogicalIndex@@9@9@8534d2d2 DD 0206H ; `getRunFromLogicalIndex'::`2'::__LINE__Var
; Function compile flags: /Odtp /RTCsu /ZI
_DATA	ENDS
;	COMDAT _getRunFromLogicalIndex
_TEXT	SEGMENT
_logicalStart$ = -68					; size = 4
_length$ = -56						; size = 4
_i$ = -44						; size = 4
_visualStart$ = -32					; size = 4
_runCount$ = -20					; size = 4
_runs$ = -8						; size = 4
_pBiDi$ = 8						; size = 4
_logicalIndex$ = 12					; size = 4
_pErrorCode$ = 16					; size = 4
_getRunFromLogicalIndex PROC				; COMDAT
; Line 518
	push	ebp
	mov	ebp, esp
	sub	esp, 264				; 00000108H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-264]
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 519
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+228]
	mov	DWORD PTR _runs$[ebp], ecx
; Line 520
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+224]
	mov	DWORD PTR _runCount$[ebp], ecx
	mov	DWORD PTR _visualStart$[ebp], 0
; Line 522
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@getRunFrom
$LN3@getRunFrom:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@getRunFrom:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _runCount$[ebp]
	jge	SHORT $LN2@getRunFrom
; Line 523
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _runs$[ebp]
	mov	edx, DWORD PTR [ecx+eax+4]
	sub	edx, DWORD PTR _visualStart$[ebp]
	mov	DWORD PTR _length$[ebp], edx
; Line 524
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _runs$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	and	edx, 2147483647				; 7fffffffH
	mov	DWORD PTR _logicalStart$[ebp], edx
; Line 525
	mov	eax, DWORD PTR _logicalIndex$[ebp]
	cmp	eax, DWORD PTR _logicalStart$[ebp]
	jl	SHORT $LN1@getRunFrom
	mov	eax, DWORD PTR _logicalStart$[ebp]
	add	eax, DWORD PTR _length$[ebp]
	cmp	DWORD PTR _logicalIndex$[ebp], eax
	jge	SHORT $LN1@getRunFrom
; Line 526
	mov	eax, DWORD PTR _i$[ebp]
	jmp	SHORT $LN5@getRunFrom
$LN1@getRunFrom:
; Line 528
	mov	eax, DWORD PTR _visualStart$[ebp]
	add	eax, DWORD PTR _length$[ebp]
	mov	DWORD PTR _visualStart$[ebp], eax
; Line 529
	jmp	SHORT $LN3@getRunFrom
$LN2@getRunFrom:
; Line 531
	xor	eax, eax
	jne	SHORT $LN7@getRunFrom
	mov	ecx, DWORD PTR ?__LINE__Var@?1??getRunFromLogicalIndex@@9@9@8534d2d2
	add	ecx, 13					; 0000000dH
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_1FI@BCBOJMPO@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@
	push	OFFSET ??_C@_13COJANIEC@?$AA0?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN7@getRunFrom:
; Line 532
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 27			; 0000001bH
; Line 533
	xor	eax, eax
$LN5@getRunFrom:
; Line 534
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 264				; 00000108H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_getRunFromLogicalIndex ENDP
_TEXT	ENDS
PUBLIC	_ubidi_reorderLogical_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _ubidi_reorderLogical_56
_TEXT	SEGMENT
_maxLevel$ = -53					; size = 1
_minLevel$ = -41					; size = 1
_sumOfSosEos$ = -32					; size = 4
_limit$ = -20						; size = 4
_start$ = -8						; size = 4
_levels$ = 8						; size = 4
_length$ = 12						; size = 4
_indexMap$ = 16						; size = 4
_ubidi_reorderLogical_56 PROC				; COMDAT
; Line 750
	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 752
	mov	BYTE PTR _minLevel$[ebp], 0
	mov	BYTE PTR _maxLevel$[ebp], 0
; Line 754
	cmp	DWORD PTR _indexMap$[ebp], 0
	je	SHORT $LN17@ubidi_reor
	lea	eax, DWORD PTR _maxLevel$[ebp]
	push	eax
	lea	ecx, DWORD PTR _minLevel$[ebp]
	push	ecx
	mov	edx, DWORD PTR _indexMap$[ebp]
	push	edx
	mov	eax, DWORD PTR _length$[ebp]
	push	eax
	mov	ecx, DWORD PTR _levels$[ebp]
	push	ecx
	call	_prepareReorder
	add	esp, 20					; 00000014H
	movsx	edx, al
	test	edx, edx
	jne	SHORT $LN18@ubidi_reor
$LN17@ubidi_reor:
; Line 755
	jmp	$LN19@ubidi_reor
$LN18@ubidi_reor:
; Line 759
	movzx	eax, BYTE PTR _minLevel$[ebp]
	movzx	ecx, BYTE PTR _maxLevel$[ebp]
	cmp	eax, ecx
	jne	SHORT $LN16@ubidi_reor
	movzx	eax, BYTE PTR _minLevel$[ebp]
	and	eax, 1
	jne	SHORT $LN16@ubidi_reor
; Line 760
	jmp	$LN19@ubidi_reor
$LN16@ubidi_reor:
; Line 764
	movzx	eax, BYTE PTR _minLevel$[ebp]
	or	eax, 1
	mov	BYTE PTR _minLevel$[ebp], al
$LN15@ubidi_reor:
; Line 768
	mov	DWORD PTR _start$[ebp], 0
$LN10@ubidi_reor:
; Line 774
	mov	eax, DWORD PTR _start$[ebp]
	cmp	eax, DWORD PTR _length$[ebp]
	jge	SHORT $LN9@ubidi_reor
	mov	eax, DWORD PTR _levels$[ebp]
	add	eax, DWORD PTR _start$[ebp]
	movzx	ecx, BYTE PTR [eax]
	movzx	edx, BYTE PTR _maxLevel$[ebp]
	cmp	ecx, edx
	jge	SHORT $LN9@ubidi_reor
; Line 775
	mov	eax, DWORD PTR _start$[ebp]
	add	eax, 1
	mov	DWORD PTR _start$[ebp], eax
; Line 776
	jmp	SHORT $LN10@ubidi_reor
$LN9@ubidi_reor:
; Line 777
	mov	eax, DWORD PTR _start$[ebp]
	cmp	eax, DWORD PTR _length$[ebp]
	jl	SHORT $LN8@ubidi_reor
; Line 778
	jmp	SHORT $LN14@ubidi_reor
$LN8@ubidi_reor:
; Line 782
	mov	eax, DWORD PTR _start$[ebp]
	mov	DWORD PTR _limit$[ebp], eax
$LN7@ubidi_reor:
	mov	eax, DWORD PTR _limit$[ebp]
	add	eax, 1
	mov	DWORD PTR _limit$[ebp], eax
	mov	ecx, DWORD PTR _limit$[ebp]
	cmp	ecx, DWORD PTR _length$[ebp]
	jge	SHORT $LN6@ubidi_reor
	mov	eax, DWORD PTR _levels$[ebp]
	add	eax, DWORD PTR _limit$[ebp]
	movzx	ecx, BYTE PTR [eax]
	movzx	edx, BYTE PTR _maxLevel$[ebp]
	cmp	ecx, edx
	jl	SHORT $LN6@ubidi_reor
	jmp	SHORT $LN7@ubidi_reor
$LN6@ubidi_reor:
; Line 795
	mov	eax, DWORD PTR _limit$[ebp]
	mov	ecx, DWORD PTR _start$[ebp]
	lea	edx, DWORD PTR [ecx+eax-1]
	mov	DWORD PTR _sumOfSosEos$[ebp], edx
$LN5@ubidi_reor:
; Line 799
	mov	eax, DWORD PTR _start$[ebp]
	mov	ecx, DWORD PTR _indexMap$[ebp]
	mov	edx, DWORD PTR _sumOfSosEos$[ebp]
	sub	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _start$[ebp]
	mov	ecx, DWORD PTR _indexMap$[ebp]
	mov	DWORD PTR [ecx+eax*4], edx
; Line 800
	mov	eax, DWORD PTR _start$[ebp]
	add	eax, 1
	mov	DWORD PTR _start$[ebp], eax
	mov	ecx, DWORD PTR _start$[ebp]
	cmp	ecx, DWORD PTR _limit$[ebp]
	jl	SHORT $LN5@ubidi_reor
; Line 803
	mov	eax, DWORD PTR _limit$[ebp]
	cmp	eax, DWORD PTR _length$[ebp]
	jne	SHORT $LN2@ubidi_reor
; Line 804
	jmp	SHORT $LN14@ubidi_reor
; Line 805
	jmp	SHORT $LN1@ubidi_reor
$LN2@ubidi_reor:
; Line 806
	mov	eax, DWORD PTR _limit$[ebp]
	add	eax, 1
	mov	DWORD PTR _start$[ebp], eax
$LN1@ubidi_reor:
; Line 808
	jmp	$LN10@ubidi_reor
$LN14@ubidi_reor:
; Line 809
	mov	al, BYTE PTR _maxLevel$[ebp]
	sub	al, 1
	mov	BYTE PTR _maxLevel$[ebp], al
	movzx	ecx, BYTE PTR _maxLevel$[ebp]
	movzx	edx, BYTE PTR _minLevel$[ebp]
	cmp	ecx, edx
	jge	$LN15@ubidi_reor
$LN19@ubidi_reor:
; Line 810
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN24@ubidi_reor
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN24@ubidi_reor:
	DD	2
	DD	$LN23@ubidi_reor
$LN23@ubidi_reor:
	DD	-41					; ffffffd7H
	DD	1
	DD	$LN21@ubidi_reor
	DD	-53					; ffffffcbH
	DD	1
	DD	$LN22@ubidi_reor
$LN22@ubidi_reor:
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	120					; 00000078H
	DB	76					; 0000004cH
	DB	101					; 00000065H
	DB	118					; 00000076H
	DB	101					; 00000065H
	DB	108					; 0000006cH
	DB	0
$LN21@ubidi_reor:
	DB	109					; 0000006dH
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	76					; 0000004cH
	DB	101					; 00000065H
	DB	118					; 00000076H
	DB	101					; 00000065H
	DB	108					; 0000006cH
	DB	0
_ubidi_reorderLogical_56 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _prepareReorder
_TEXT	SEGMENT
_maxLevel$ = -41					; size = 1
_minLevel$ = -29					; size = 1
_level$ = -17						; size = 1
_start$ = -8						; size = 4
_levels$ = 8						; size = 4
_length$ = 12						; size = 4
_indexMap$ = 16						; size = 4
_pMinLevel$ = 20					; size = 4
_pMaxLevel$ = 24					; size = 4
_prepareReorder PROC					; COMDAT
; Line 712
	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 716
	cmp	DWORD PTR _levels$[ebp], 0
	je	SHORT $LN8@prepareReo
	cmp	DWORD PTR _length$[ebp], 0
	jg	SHORT $LN9@prepareReo
$LN8@prepareReo:
; Line 717
	xor	al, al
	jmp	$LN10@prepareReo
$LN9@prepareReo:
; Line 721
	mov	BYTE PTR _minLevel$[ebp], 126		; 0000007eH
; Line 722
	mov	BYTE PTR _maxLevel$[ebp], 0
; Line 723
	mov	eax, DWORD PTR _length$[ebp]
	mov	DWORD PTR _start$[ebp], eax
$LN7@prepareReo:
	cmp	DWORD PTR _start$[ebp], 0
	jle	SHORT $LN6@prepareReo
; Line 724
	mov	eax, DWORD PTR _start$[ebp]
	sub	eax, 1
	mov	DWORD PTR _start$[ebp], eax
	mov	ecx, DWORD PTR _levels$[ebp]
	add	ecx, DWORD PTR _start$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR _level$[ebp], dl
; Line 725
	movzx	eax, BYTE PTR _level$[ebp]
	cmp	eax, 126				; 0000007eH
	jle	SHORT $LN5@prepareReo
; Line 726
	xor	al, al
	jmp	SHORT $LN10@prepareReo
$LN5@prepareReo:
; Line 728
	movzx	eax, BYTE PTR _level$[ebp]
	movzx	ecx, BYTE PTR _minLevel$[ebp]
	cmp	eax, ecx
	jge	SHORT $LN4@prepareReo
; Line 729
	mov	al, BYTE PTR _level$[ebp]
	mov	BYTE PTR _minLevel$[ebp], al
$LN4@prepareReo:
; Line 731
	movzx	eax, BYTE PTR _level$[ebp]
	movzx	ecx, BYTE PTR _maxLevel$[ebp]
	cmp	eax, ecx
	jle	SHORT $LN3@prepareReo
; Line 732
	mov	al, BYTE PTR _level$[ebp]
	mov	BYTE PTR _maxLevel$[ebp], al
$LN3@prepareReo:
; Line 734
	jmp	SHORT $LN7@prepareReo
$LN6@prepareReo:
; Line 735
	mov	eax, DWORD PTR _pMinLevel$[ebp]
	mov	cl, BYTE PTR _minLevel$[ebp]
	mov	BYTE PTR [eax], cl
; Line 736
	mov	eax, DWORD PTR _pMaxLevel$[ebp]
	mov	cl, BYTE PTR _maxLevel$[ebp]
	mov	BYTE PTR [eax], cl
; Line 739
	mov	eax, DWORD PTR _length$[ebp]
	mov	DWORD PTR _start$[ebp], eax
$LN2@prepareReo:
	cmp	DWORD PTR _start$[ebp], 0
	jle	SHORT $LN1@prepareReo
; Line 740
	mov	eax, DWORD PTR _start$[ebp]
	sub	eax, 1
	mov	DWORD PTR _start$[ebp], eax
; Line 741
	mov	eax, DWORD PTR _start$[ebp]
	mov	ecx, DWORD PTR _indexMap$[ebp]
	mov	edx, DWORD PTR _start$[ebp]
	mov	DWORD PTR [ecx+eax*4], edx
; Line 742
	jmp	SHORT $LN2@prepareReo
$LN1@prepareReo:
; Line 744
	mov	al, 1
$LN10@prepareReo:
; Line 745
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_prepareReorder ENDP
_TEXT	ENDS
PUBLIC	_ubidi_reorderVisual_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _ubidi_reorderVisual_56
_TEXT	SEGMENT
_maxLevel$ = -65					; size = 1
_minLevel$ = -53					; size = 1
_temp$ = -44						; size = 4
_limit$ = -32						; size = 4
_end$ = -20						; size = 4
_start$ = -8						; size = 4
_levels$ = 8						; size = 4
_length$ = 12						; size = 4
_indexMap$ = 16						; size = 4
_ubidi_reorderVisual_56 PROC				; COMDAT
; Line 813
	push	ebp
	mov	ebp, esp
	sub	esp, 264				; 00000108H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-264]
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 815
	mov	BYTE PTR _minLevel$[ebp], 0
	mov	BYTE PTR _maxLevel$[ebp], 0
; Line 817
	cmp	DWORD PTR _indexMap$[ebp], 0
	je	SHORT $LN16@ubidi_reor@2
	lea	eax, DWORD PTR _maxLevel$[ebp]
	push	eax
	lea	ecx, DWORD PTR _minLevel$[ebp]
	push	ecx
	mov	edx, DWORD PTR _indexMap$[ebp]
	push	edx
	mov	eax, DWORD PTR _length$[ebp]
	push	eax
	mov	ecx, DWORD PTR _levels$[ebp]
	push	ecx
	call	_prepareReorder
	add	esp, 20					; 00000014H
	movsx	edx, al
	test	edx, edx
	jne	SHORT $LN17@ubidi_reor@2
$LN16@ubidi_reor@2:
; Line 818
	jmp	$LN18@ubidi_reor@2
$LN17@ubidi_reor@2:
; Line 822
	movzx	eax, BYTE PTR _minLevel$[ebp]
	movzx	ecx, BYTE PTR _maxLevel$[ebp]
	cmp	eax, ecx
	jne	SHORT $LN15@ubidi_reor@2
	movzx	eax, BYTE PTR _minLevel$[ebp]
	and	eax, 1
	jne	SHORT $LN15@ubidi_reor@2
; Line 823
	jmp	$LN18@ubidi_reor@2
$LN15@ubidi_reor@2:
; Line 827
	movzx	eax, BYTE PTR _minLevel$[ebp]
	or	eax, 1
	mov	BYTE PTR _minLevel$[ebp], al
$LN14@ubidi_reor@2:
; Line 831
	mov	DWORD PTR _start$[ebp], 0
$LN9@ubidi_reor@2:
; Line 837
	mov	eax, DWORD PTR _start$[ebp]
	cmp	eax, DWORD PTR _length$[ebp]
	jge	SHORT $LN8@ubidi_reor@2
	mov	eax, DWORD PTR _levels$[ebp]
	add	eax, DWORD PTR _start$[ebp]
	movzx	ecx, BYTE PTR [eax]
	movzx	edx, BYTE PTR _maxLevel$[ebp]
	cmp	ecx, edx
	jge	SHORT $LN8@ubidi_reor@2
; Line 838
	mov	eax, DWORD PTR _start$[ebp]
	add	eax, 1
	mov	DWORD PTR _start$[ebp], eax
; Line 839
	jmp	SHORT $LN9@ubidi_reor@2
$LN8@ubidi_reor@2:
; Line 840
	mov	eax, DWORD PTR _start$[ebp]
	cmp	eax, DWORD PTR _length$[ebp]
	jl	SHORT $LN7@ubidi_reor@2
; Line 841
	jmp	$LN13@ubidi_reor@2
$LN7@ubidi_reor@2:
; Line 845
	mov	eax, DWORD PTR _start$[ebp]
	mov	DWORD PTR _limit$[ebp], eax
$LN6@ubidi_reor@2:
	mov	eax, DWORD PTR _limit$[ebp]
	add	eax, 1
	mov	DWORD PTR _limit$[ebp], eax
	mov	ecx, DWORD PTR _limit$[ebp]
	cmp	ecx, DWORD PTR _length$[ebp]
	jge	SHORT $LN5@ubidi_reor@2
	mov	eax, DWORD PTR _levels$[ebp]
	add	eax, DWORD PTR _limit$[ebp]
	movzx	ecx, BYTE PTR [eax]
	movzx	edx, BYTE PTR _maxLevel$[ebp]
	cmp	ecx, edx
	jl	SHORT $LN5@ubidi_reor@2
	jmp	SHORT $LN6@ubidi_reor@2
$LN5@ubidi_reor@2:
; Line 853
	mov	eax, DWORD PTR _limit$[ebp]
	sub	eax, 1
	mov	DWORD PTR _end$[ebp], eax
$LN4@ubidi_reor@2:
; Line 854
	mov	eax, DWORD PTR _start$[ebp]
	cmp	eax, DWORD PTR _end$[ebp]
	jge	SHORT $LN3@ubidi_reor@2
; Line 855
	mov	eax, DWORD PTR _start$[ebp]
	mov	ecx, DWORD PTR _indexMap$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _temp$[ebp], edx
; Line 856
	mov	eax, DWORD PTR _start$[ebp]
	mov	ecx, DWORD PTR _indexMap$[ebp]
	mov	edx, DWORD PTR _end$[ebp]
	mov	esi, DWORD PTR _indexMap$[ebp]
	mov	edx, DWORD PTR [esi+edx*4]
	mov	DWORD PTR [ecx+eax*4], edx
; Line 857
	mov	eax, DWORD PTR _end$[ebp]
	mov	ecx, DWORD PTR _indexMap$[ebp]
	mov	edx, DWORD PTR _temp$[ebp]
	mov	DWORD PTR [ecx+eax*4], edx
; Line 859
	mov	eax, DWORD PTR _start$[ebp]
	add	eax, 1
	mov	DWORD PTR _start$[ebp], eax
; Line 860
	mov	eax, DWORD PTR _end$[ebp]
	sub	eax, 1
	mov	DWORD PTR _end$[ebp], eax
; Line 861
	jmp	SHORT $LN4@ubidi_reor@2
$LN3@ubidi_reor@2:
; Line 863
	mov	eax, DWORD PTR _limit$[ebp]
	cmp	eax, DWORD PTR _length$[ebp]
	jne	SHORT $LN2@ubidi_reor@2
; Line 864
	jmp	SHORT $LN13@ubidi_reor@2
; Line 865
	jmp	SHORT $LN1@ubidi_reor@2
$LN2@ubidi_reor@2:
; Line 866
	mov	eax, DWORD PTR _limit$[ebp]
	add	eax, 1
	mov	DWORD PTR _start$[ebp], eax
$LN1@ubidi_reor@2:
; Line 868
	jmp	$LN9@ubidi_reor@2
$LN13@ubidi_reor@2:
; Line 869
	mov	al, BYTE PTR _maxLevel$[ebp]
	sub	al, 1
	mov	BYTE PTR _maxLevel$[ebp], al
	movzx	ecx, BYTE PTR _maxLevel$[ebp]
	movzx	edx, BYTE PTR _minLevel$[ebp]
	cmp	ecx, edx
	jge	$LN14@ubidi_reor@2
$LN18@ubidi_reor@2:
; Line 870
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN23@ubidi_reor@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 264				; 00000108H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN23@ubidi_reor@2:
	DD	2
	DD	$LN22@ubidi_reor@2
$LN22@ubidi_reor@2:
	DD	-53					; ffffffcbH
	DD	1
	DD	$LN20@ubidi_reor@2
	DD	-65					; ffffffbfH
	DD	1
	DD	$LN21@ubidi_reor@2
$LN21@ubidi_reor@2:
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	120					; 00000078H
	DB	76					; 0000004cH
	DB	101					; 00000065H
	DB	118					; 00000076H
	DB	101					; 00000065H
	DB	108					; 0000006cH
	DB	0
$LN20@ubidi_reor@2:
	DB	109					; 0000006dH
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	76					; 0000004cH
	DB	101					; 00000065H
	DB	118					; 00000076H
	DB	101					; 00000065H
	DB	108					; 0000006cH
	DB	0
_ubidi_reorderVisual_56 ENDP
_TEXT	ENDS
PUBLIC	_ubidi_getVisualIndex_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _ubidi_getVisualIndex_56
_TEXT	SEGMENT
tv75 = -460						; size = 4
_uchar$9044 = -260					; size = 2
_controlFound$9043 = -248				; size = 4
_visualStart$9042 = -236				; size = 4
_insertRemove$9041 = -224				; size = 4
_length$9040 = -212					; size = 4
_limit$9039 = -200					; size = 4
_start$9038 = -188					; size = 4
_j$9037 = -176						; size = 4
_i$9036 = -164						; size = 4
_runs$9035 = -152					; size = 4
_markFound$9026 = -140					; size = 4
_visualStart$9025 = -128				; size = 4
_insertRemove$9024 = -116				; size = 4
_length$9023 = -104					; size = 4
_i$9022 = -92						; size = 4
_runs$9021 = -80					; size = 4
_length$9011 = -68					; size = 4
_offset$9010 = -56					; size = 4
_visualStart$9009 = -44					; size = 4
_i$9008 = -32						; size = 4
_runs$9007 = -20					; size = 4
_visualIndex$ = -8					; size = 4
_pBiDi$ = 8						; size = 4
_logicalIndex$ = 12					; size = 4
_pErrorCode$ = 16					; size = 4
_ubidi_getVisualIndex_56 PROC				; COMDAT
; Line 875
	push	ebp
	mov	ebp, esp
	sub	esp, 460				; 000001ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-460]
	mov	ecx, 115				; 00000073H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 876
	mov	DWORD PTR _visualIndex$[ebp], -1
; Line 877
	cmp	DWORD PTR _pErrorCode$[ebp], 0
	je	SHORT $LN43@ubidi_getV@2
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN44@ubidi_getV@2
$LN43@ubidi_getV@2:
	or	eax, -1
	jmp	$LN45@ubidi_getV@2
$LN44@ubidi_getV@2:
; Line 878
	cmp	DWORD PTR _pBiDi$[ebp], 0
	je	SHORT $LN41@ubidi_getV@2
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR _pBiDi$[ebp]
	je	SHORT $LN42@ubidi_getV@2
	mov	eax, DWORD PTR _pBiDi$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN41@ubidi_getV@2
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _pBiDi$[ebp]
	mov	eax, DWORD PTR [ecx]
	cmp	eax, DWORD PTR [edx]
	je	SHORT $LN42@ubidi_getV@2
$LN41@ubidi_getV@2:
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 27			; 0000001bH
	or	eax, -1
	jmp	$LN45@ubidi_getV@2
$LN42@ubidi_getV@2:
; Line 879
	cmp	DWORD PTR _logicalIndex$[ebp], 0
	jl	SHORT $LN38@ubidi_getV@2
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR _logicalIndex$[ebp]
	cmp	ecx, DWORD PTR [eax+16]
	jl	SHORT $LN39@ubidi_getV@2
$LN38@ubidi_getV@2:
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 1
	or	eax, -1
	jmp	$LN45@ubidi_getV@2
$LN39@ubidi_getV@2:
; Line 882
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+120]
	mov	DWORD PTR tv75[ebp], ecx
	cmp	DWORD PTR tv75[ebp], 0
	je	SHORT $LN35@ubidi_getV@2
	cmp	DWORD PTR tv75[ebp], 1
	je	SHORT $LN34@ubidi_getV@2
	jmp	SHORT $LN33@ubidi_getV@2
$LN35@ubidi_getV@2:
; Line 884
	mov	eax, DWORD PTR _logicalIndex$[ebp]
	mov	DWORD PTR _visualIndex$[ebp], eax
; Line 885
	jmp	$LN36@ubidi_getV@2
$LN34@ubidi_getV@2:
; Line 887
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	sub	ecx, DWORD PTR _logicalIndex$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _visualIndex$[ebp], ecx
; Line 888
	jmp	$LN36@ubidi_getV@2
$LN33@ubidi_getV@2:
; Line 890
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pBiDi$[ebp]
	push	ecx
	call	_ubidi_getRuns_56
	add	esp, 8
	movsx	edx, al
	test	edx, edx
	jne	SHORT $LN32@ubidi_getV@2
; Line 891
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 7
; Line 892
	or	eax, -1
	jmp	$LN45@ubidi_getV@2
; Line 893
	jmp	$LN36@ubidi_getV@2
$LN32@ubidi_getV@2:
; Line 894
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+228]
	mov	DWORD PTR _runs$9007[ebp], ecx
; Line 895
	mov	DWORD PTR _visualStart$9009[ebp], 0
; Line 898
	mov	DWORD PTR _i$9008[ebp], 0
	jmp	SHORT $LN30@ubidi_getV@2
$LN29@ubidi_getV@2:
	mov	eax, DWORD PTR _i$9008[ebp]
	add	eax, 1
	mov	DWORD PTR _i$9008[ebp], eax
$LN30@ubidi_getV@2:
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR _i$9008[ebp]
	cmp	ecx, DWORD PTR [eax+224]
	jge	SHORT $LN28@ubidi_getV@2
; Line 899
	mov	eax, DWORD PTR _i$9008[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _runs$9007[ebp]
	mov	edx, DWORD PTR [ecx+eax+4]
	sub	edx, DWORD PTR _visualStart$9009[ebp]
	mov	DWORD PTR _length$9011[ebp], edx
; Line 900
	mov	eax, DWORD PTR _i$9008[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _runs$9007[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	and	edx, 2147483647				; 7fffffffH
	mov	eax, DWORD PTR _logicalIndex$[ebp]
	sub	eax, edx
	mov	DWORD PTR _offset$9010[ebp], eax
; Line 901
	js	SHORT $LN27@ubidi_getV@2
	mov	eax, DWORD PTR _offset$9010[ebp]
	cmp	eax, DWORD PTR _length$9011[ebp]
	jge	SHORT $LN27@ubidi_getV@2
; Line 902
	mov	eax, DWORD PTR _i$9008[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _runs$9007[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	and	edx, -2147483648			; 80000000H
	sete	al
	movsx	ecx, al
	test	ecx, ecx
	je	SHORT $LN26@ubidi_getV@2
; Line 904
	mov	eax, DWORD PTR _visualStart$9009[ebp]
	add	eax, DWORD PTR _offset$9010[ebp]
	mov	DWORD PTR _visualIndex$[ebp], eax
; Line 905
	jmp	SHORT $LN25@ubidi_getV@2
$LN26@ubidi_getV@2:
; Line 907
	mov	eax, DWORD PTR _visualStart$9009[ebp]
	add	eax, DWORD PTR _length$9011[ebp]
	sub	eax, DWORD PTR _offset$9010[ebp]
	sub	eax, 1
	mov	DWORD PTR _visualIndex$[ebp], eax
$LN25@ubidi_getV@2:
; Line 909
	jmp	SHORT $LN28@ubidi_getV@2
$LN27@ubidi_getV@2:
; Line 911
	mov	eax, DWORD PTR _visualStart$9009[ebp]
	add	eax, DWORD PTR _length$9011[ebp]
	mov	DWORD PTR _visualStart$9009[ebp], eax
; Line 912
	jmp	$LN29@ubidi_getV@2
$LN28@ubidi_getV@2:
; Line 913
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR _i$9008[ebp]
	cmp	ecx, DWORD PTR [eax+224]
	jl	SHORT $LN36@ubidi_getV@2
; Line 914
	or	eax, -1
	jmp	$LN45@ubidi_getV@2
$LN36@ubidi_getV@2:
; Line 919
	mov	eax, DWORD PTR _pBiDi$[ebp]
	cmp	DWORD PTR [eax+336], 0
	jle	$LN23@ubidi_getV@2
; Line 921
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+228]
	mov	DWORD PTR _runs$9021[ebp], ecx
; Line 923
	mov	DWORD PTR _visualStart$9025[ebp], 0
	mov	DWORD PTR _markFound$9026[ebp], 0
; Line 924
	mov	DWORD PTR _i$9022[ebp], 0
	jmp	SHORT $LN22@ubidi_getV@2
$LN21@ubidi_getV@2:
	mov	eax, DWORD PTR _i$9022[ebp]
	add	eax, 1
	mov	DWORD PTR _i$9022[ebp], eax
	mov	ecx, DWORD PTR _visualStart$9025[ebp]
	add	ecx, DWORD PTR _length$9023[ebp]
	mov	DWORD PTR _visualStart$9025[ebp], ecx
$LN22@ubidi_getV@2:
; Line 925
	mov	eax, DWORD PTR _i$9022[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _runs$9021[ebp]
	mov	edx, DWORD PTR [ecx+eax+4]
	sub	edx, DWORD PTR _visualStart$9025[ebp]
	mov	DWORD PTR _length$9023[ebp], edx
; Line 926
	mov	eax, DWORD PTR _i$9022[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _runs$9021[ebp]
	mov	edx, DWORD PTR [ecx+eax+8]
	mov	DWORD PTR _insertRemove$9024[ebp], edx
; Line 927
	mov	eax, DWORD PTR _insertRemove$9024[ebp]
	and	eax, 5
	je	SHORT $LN19@ubidi_getV@2
; Line 928
	mov	eax, DWORD PTR _markFound$9026[ebp]
	add	eax, 1
	mov	DWORD PTR _markFound$9026[ebp], eax
$LN19@ubidi_getV@2:
; Line 931
	mov	eax, DWORD PTR _i$9022[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _runs$9021[ebp]
	mov	edx, DWORD PTR _visualIndex$[ebp]
	cmp	edx, DWORD PTR [ecx+eax+4]
	jge	SHORT $LN18@ubidi_getV@2
; Line 932
	mov	eax, DWORD PTR _visualIndex$[ebp]
	add	eax, DWORD PTR _markFound$9026[ebp]
	jmp	$LN45@ubidi_getV@2
$LN18@ubidi_getV@2:
; Line 934
	mov	eax, DWORD PTR _insertRemove$9024[ebp]
	and	eax, 10					; 0000000aH
	je	SHORT $LN17@ubidi_getV@2
; Line 935
	mov	eax, DWORD PTR _markFound$9026[ebp]
	add	eax, 1
	mov	DWORD PTR _markFound$9026[ebp], eax
$LN17@ubidi_getV@2:
; Line 937
	jmp	$LN21@ubidi_getV@2
; Line 939
	jmp	$LN16@ubidi_getV@2
$LN23@ubidi_getV@2:
	mov	eax, DWORD PTR _pBiDi$[ebp]
	cmp	DWORD PTR [eax+352], 0
	jle	$LN16@ubidi_getV@2
; Line 941
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+228]
	mov	DWORD PTR _runs$9035[ebp], ecx
; Line 943
	mov	DWORD PTR _visualStart$9042[ebp], 0
	mov	DWORD PTR _controlFound$9043[ebp], 0
; Line 944
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _logicalIndex$[ebp]
	mov	ax, WORD PTR [ecx+edx*2]
	mov	WORD PTR _uchar$9044[ebp], ax
; Line 946
	movzx	eax, WORD PTR _uchar$9044[ebp]
	and	eax, -4					; fffffffcH
	cmp	eax, 8204				; 0000200cH
	je	SHORT $LN13@ubidi_getV@2
	movzx	eax, WORD PTR _uchar$9044[ebp]
	sub	eax, 8234				; 0000202aH
	cmp	eax, 5
	jb	SHORT $LN13@ubidi_getV@2
	movzx	eax, WORD PTR _uchar$9044[ebp]
	sub	eax, 8294				; 00002066H
	cmp	eax, 4
	jae	SHORT $LN14@ubidi_getV@2
$LN13@ubidi_getV@2:
; Line 947
	or	eax, -1
	jmp	$LN45@ubidi_getV@2
$LN14@ubidi_getV@2:
; Line 950
	mov	DWORD PTR _i$9036[ebp], 0
	jmp	SHORT $LN12@ubidi_getV@2
$LN11@ubidi_getV@2:
	mov	eax, DWORD PTR _i$9036[ebp]
	add	eax, 1
	mov	DWORD PTR _i$9036[ebp], eax
	mov	ecx, DWORD PTR _visualStart$9042[ebp]
	add	ecx, DWORD PTR _length$9040[ebp]
	mov	DWORD PTR _visualStart$9042[ebp], ecx
$LN12@ubidi_getV@2:
; Line 951
	mov	eax, DWORD PTR _i$9036[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _runs$9035[ebp]
	mov	edx, DWORD PTR [ecx+eax+4]
	sub	edx, DWORD PTR _visualStart$9042[ebp]
	mov	DWORD PTR _length$9040[ebp], edx
; Line 952
	mov	eax, DWORD PTR _i$9036[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _runs$9035[ebp]
	mov	edx, DWORD PTR [ecx+eax+8]
	mov	DWORD PTR _insertRemove$9041[ebp], edx
; Line 954
	mov	eax, DWORD PTR _i$9036[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _runs$9035[ebp]
	mov	edx, DWORD PTR _visualIndex$[ebp]
	cmp	edx, DWORD PTR [ecx+eax+4]
	jl	SHORT $LN9@ubidi_getV@2
; Line 955
	mov	eax, DWORD PTR _controlFound$9043[ebp]
	sub	eax, DWORD PTR _insertRemove$9041[ebp]
	mov	DWORD PTR _controlFound$9043[ebp], eax
; Line 956
	jmp	$LN11@ubidi_getV@2
$LN9@ubidi_getV@2:
; Line 959
	cmp	DWORD PTR _insertRemove$9041[ebp], 0
	jne	SHORT $LN8@ubidi_getV@2
; Line 960
	mov	eax, DWORD PTR _visualIndex$[ebp]
	sub	eax, DWORD PTR _controlFound$9043[ebp]
	jmp	$LN45@ubidi_getV@2
$LN8@ubidi_getV@2:
; Line 962
	mov	eax, DWORD PTR _i$9036[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _runs$9035[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	and	edx, -2147483648			; 80000000H
	sete	al
	movsx	ecx, al
	test	ecx, ecx
	je	SHORT $LN7@ubidi_getV@2
; Line 964
	mov	eax, DWORD PTR _i$9036[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _runs$9035[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	mov	DWORD PTR _start$9038[ebp], edx
; Line 965
	mov	eax, DWORD PTR _logicalIndex$[ebp]
	mov	DWORD PTR _limit$9039[ebp], eax
; Line 966
	jmp	SHORT $LN6@ubidi_getV@2
$LN7@ubidi_getV@2:
; Line 968
	mov	eax, DWORD PTR _logicalIndex$[ebp]
	add	eax, 1
	mov	DWORD PTR _start$9038[ebp], eax
; Line 969
	mov	eax, DWORD PTR _i$9036[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _runs$9035[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	and	edx, 2147483647				; 7fffffffH
	add	edx, DWORD PTR _length$9040[ebp]
	mov	DWORD PTR _limit$9039[ebp], edx
$LN6@ubidi_getV@2:
; Line 971
	mov	eax, DWORD PTR _start$9038[ebp]
	mov	DWORD PTR _j$9037[ebp], eax
	jmp	SHORT $LN5@ubidi_getV@2
$LN4@ubidi_getV@2:
	mov	eax, DWORD PTR _j$9037[ebp]
	add	eax, 1
	mov	DWORD PTR _j$9037[ebp], eax
$LN5@ubidi_getV@2:
	mov	eax, DWORD PTR _j$9037[ebp]
	cmp	eax, DWORD PTR _limit$9039[ebp]
	jge	SHORT $LN3@ubidi_getV@2
; Line 972
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _j$9037[ebp]
	mov	ax, WORD PTR [ecx+edx*2]
	mov	WORD PTR _uchar$9044[ebp], ax
; Line 973
	movzx	eax, WORD PTR _uchar$9044[ebp]
	and	eax, -4					; fffffffcH
	cmp	eax, 8204				; 0000200cH
	je	SHORT $LN1@ubidi_getV@2
	movzx	eax, WORD PTR _uchar$9044[ebp]
	sub	eax, 8234				; 0000202aH
	cmp	eax, 5
	jb	SHORT $LN1@ubidi_getV@2
	movzx	eax, WORD PTR _uchar$9044[ebp]
	sub	eax, 8294				; 00002066H
	cmp	eax, 4
	jae	SHORT $LN2@ubidi_getV@2
$LN1@ubidi_getV@2:
; Line 974
	mov	eax, DWORD PTR _controlFound$9043[ebp]
	add	eax, 1
	mov	DWORD PTR _controlFound$9043[ebp], eax
$LN2@ubidi_getV@2:
; Line 976
	jmp	SHORT $LN4@ubidi_getV@2
$LN3@ubidi_getV@2:
; Line 977
	mov	eax, DWORD PTR _visualIndex$[ebp]
	sub	eax, DWORD PTR _controlFound$9043[ebp]
	jmp	SHORT $LN45@ubidi_getV@2
; Line 978
	jmp	$LN11@ubidi_getV@2
$LN16@ubidi_getV@2:
; Line 981
	mov	eax, DWORD PTR _visualIndex$[ebp]
$LN45@ubidi_getV@2:
; Line 982
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 460				; 000001ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ubidi_getVisualIndex_56 ENDP
_TEXT	ENDS
PUBLIC	_ubidi_getLogicalIndex_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _ubidi_getLogicalIndex_56
_TEXT	SEGMENT
tv187 = -436						; size = 4
_limit$9136 = -236					; size = 4
_begin$9135 = -224					; size = 4
_evenRun$9114 = -209					; size = 1
_uchar$9113 = -200					; size = 2
_k$9112 = -188						; size = 4
_j$9111 = -176						; size = 4
_visualStart$9110 = -164				; size = 4
_logicalEnd$9109 = -152					; size = 4
_logicalStart$9108 = -140				; size = 4
_length$9107 = -128					; size = 4
_insertRemove$9106 = -116				; size = 4
_controlFound$9105 = -104				; size = 4
_length$9094 = -92					; size = 4
_visualStart$9093 = -80					; size = 4
_insertRemove$9092 = -68				; size = 4
_markFound$9091 = -56					; size = 4
_start$ = -44						; size = 4
_runCount$ = -32					; size = 4
_i$ = -20						; size = 4
_runs$ = -8						; size = 4
_pBiDi$ = 8						; size = 4
_visualIndex$ = 12					; size = 4
_pErrorCode$ = 16					; size = 4
_ubidi_getLogicalIndex_56 PROC				; COMDAT
; Line 985
	push	ebp
	mov	ebp, esp
	sub	esp, 436				; 000001b4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-436]
	mov	ecx, 109				; 0000006dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 988
	cmp	DWORD PTR _pErrorCode$[ebp], 0
	je	SHORT $LN48@ubidi_getL@4
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN49@ubidi_getL@4
$LN48@ubidi_getL@4:
	or	eax, -1
	jmp	$LN50@ubidi_getL@4
$LN49@ubidi_getL@4:
; Line 989
	cmp	DWORD PTR _pBiDi$[ebp], 0
	je	SHORT $LN46@ubidi_getL@4
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR _pBiDi$[ebp]
	je	SHORT $LN47@ubidi_getL@4
	mov	eax, DWORD PTR _pBiDi$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN46@ubidi_getL@4
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _pBiDi$[ebp]
	mov	eax, DWORD PTR [ecx]
	cmp	eax, DWORD PTR [edx]
	je	SHORT $LN47@ubidi_getL@4
$LN46@ubidi_getL@4:
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 27			; 0000001bH
	or	eax, -1
	jmp	$LN50@ubidi_getL@4
$LN47@ubidi_getL@4:
; Line 990
	cmp	DWORD PTR _visualIndex$[ebp], 0
	jl	SHORT $LN43@ubidi_getL@4
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR _visualIndex$[ebp]
	cmp	ecx, DWORD PTR [eax+20]
	jl	SHORT $LN44@ubidi_getL@4
$LN43@ubidi_getL@4:
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 1
	or	eax, -1
	jmp	$LN50@ubidi_getL@4
$LN44@ubidi_getL@4:
; Line 992
	mov	eax, DWORD PTR _pBiDi$[ebp]
	cmp	DWORD PTR [eax+336], 0
	jne	SHORT $LN42@ubidi_getL@4
	mov	eax, DWORD PTR _pBiDi$[ebp]
	cmp	DWORD PTR [eax+352], 0
	jne	SHORT $LN42@ubidi_getL@4
; Line 993
	mov	eax, DWORD PTR _pBiDi$[ebp]
	cmp	DWORD PTR [eax+120], 0
	jne	SHORT $LN41@ubidi_getL@4
; Line 994
	mov	eax, DWORD PTR _visualIndex$[ebp]
	jmp	$LN50@ubidi_getL@4
	jmp	SHORT $LN42@ubidi_getL@4
$LN41@ubidi_getL@4:
; Line 996
	mov	eax, DWORD PTR _pBiDi$[ebp]
	cmp	DWORD PTR [eax+120], 1
	jne	SHORT $LN42@ubidi_getL@4
; Line 997
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	eax, DWORD PTR [eax+16]
	sub	eax, DWORD PTR _visualIndex$[ebp]
	sub	eax, 1
	jmp	$LN50@ubidi_getL@4
$LN42@ubidi_getL@4:
; Line 1000
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pBiDi$[ebp]
	push	ecx
	call	_ubidi_getRuns_56
	add	esp, 8
	movsx	edx, al
	test	edx, edx
	jne	SHORT $LN38@ubidi_getL@4
; Line 1001
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 7
; Line 1002
	or	eax, -1
	jmp	$LN50@ubidi_getL@4
$LN38@ubidi_getL@4:
; Line 1005
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+228]
	mov	DWORD PTR _runs$[ebp], ecx
; Line 1006
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+224]
	mov	DWORD PTR _runCount$[ebp], ecx
; Line 1007
	mov	eax, DWORD PTR _pBiDi$[ebp]
	cmp	DWORD PTR [eax+336], 0
	jle	$LN37@ubidi_getL@4
; Line 1009
	mov	DWORD PTR _markFound$9091[ebp], 0
; Line 1010
	mov	DWORD PTR _visualStart$9093[ebp], 0
; Line 1011
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+228]
	mov	DWORD PTR _runs$[ebp], ecx
; Line 1013
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN36@ubidi_getL@4
$LN35@ubidi_getL@4:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _visualStart$9093[ebp]
	add	ecx, DWORD PTR _length$9094[ebp]
	mov	DWORD PTR _visualStart$9093[ebp], ecx
$LN36@ubidi_getL@4:
; Line 1014
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _runs$[ebp]
	mov	edx, DWORD PTR [ecx+eax+4]
	sub	edx, DWORD PTR _visualStart$9093[ebp]
	mov	DWORD PTR _length$9094[ebp], edx
; Line 1015
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _runs$[ebp]
	mov	edx, DWORD PTR [ecx+eax+8]
	mov	DWORD PTR _insertRemove$9092[ebp], edx
; Line 1016
	mov	eax, DWORD PTR _insertRemove$9092[ebp]
	and	eax, 5
	je	SHORT $LN33@ubidi_getL@4
; Line 1017
	mov	eax, DWORD PTR _visualStart$9093[ebp]
	add	eax, DWORD PTR _markFound$9091[ebp]
	cmp	DWORD PTR _visualIndex$[ebp], eax
	jg	SHORT $LN32@ubidi_getL@4
; Line 1018
	or	eax, -1
	jmp	$LN50@ubidi_getL@4
$LN32@ubidi_getL@4:
; Line 1020
	mov	eax, DWORD PTR _markFound$9091[ebp]
	add	eax, 1
	mov	DWORD PTR _markFound$9091[ebp], eax
$LN33@ubidi_getL@4:
; Line 1023
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _runs$[ebp]
	mov	edx, DWORD PTR [ecx+eax+4]
	add	edx, DWORD PTR _markFound$9091[ebp]
	cmp	DWORD PTR _visualIndex$[ebp], edx
	jge	SHORT $LN31@ubidi_getL@4
; Line 1024
	mov	eax, DWORD PTR _visualIndex$[ebp]
	sub	eax, DWORD PTR _markFound$9091[ebp]
	mov	DWORD PTR _visualIndex$[ebp], eax
; Line 1025
	jmp	SHORT $LN34@ubidi_getL@4
$LN31@ubidi_getL@4:
; Line 1027
	mov	eax, DWORD PTR _insertRemove$9092[ebp]
	and	eax, 10					; 0000000aH
	je	SHORT $LN30@ubidi_getL@4
; Line 1028
	mov	eax, DWORD PTR _visualStart$9093[ebp]
	add	eax, DWORD PTR _length$9094[ebp]
	add	eax, DWORD PTR _markFound$9091[ebp]
	cmp	DWORD PTR _visualIndex$[ebp], eax
	jne	SHORT $LN29@ubidi_getL@4
; Line 1029
	or	eax, -1
	jmp	$LN50@ubidi_getL@4
$LN29@ubidi_getL@4:
; Line 1031
	mov	eax, DWORD PTR _markFound$9091[ebp]
	add	eax, 1
	mov	DWORD PTR _markFound$9091[ebp], eax
$LN30@ubidi_getL@4:
; Line 1033
	jmp	$LN35@ubidi_getL@4
$LN34@ubidi_getL@4:
; Line 1035
	jmp	$LN28@ubidi_getL@4
$LN37@ubidi_getL@4:
	mov	eax, DWORD PTR _pBiDi$[ebp]
	cmp	DWORD PTR [eax+352], 0
	jle	$LN28@ubidi_getL@4
; Line 1037
	mov	DWORD PTR _controlFound$9105[ebp], 0
; Line 1038
	mov	DWORD PTR _visualStart$9110[ebp], 0
; Line 1042
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN26@ubidi_getL@4
$LN25@ubidi_getL@4:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _visualStart$9110[ebp]
	add	ecx, DWORD PTR _length$9107[ebp]
	mov	DWORD PTR _visualStart$9110[ebp], ecx
$LN26@ubidi_getL@4:
; Line 1043
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _runs$[ebp]
	mov	edx, DWORD PTR [ecx+eax+4]
	sub	edx, DWORD PTR _visualStart$9110[ebp]
	mov	DWORD PTR _length$9107[ebp], edx
; Line 1044
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _runs$[ebp]
	mov	edx, DWORD PTR [ecx+eax+8]
	mov	DWORD PTR _insertRemove$9106[ebp], edx
; Line 1046
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _runs$[ebp]
	mov	edx, DWORD PTR [ecx+eax+4]
	sub	edx, DWORD PTR _controlFound$9105[ebp]
	add	edx, DWORD PTR _insertRemove$9106[ebp]
	cmp	DWORD PTR _visualIndex$[ebp], edx
	jl	SHORT $LN23@ubidi_getL@4
; Line 1047
	mov	eax, DWORD PTR _controlFound$9105[ebp]
	sub	eax, DWORD PTR _insertRemove$9106[ebp]
	mov	DWORD PTR _controlFound$9105[ebp], eax
; Line 1048
	jmp	SHORT $LN25@ubidi_getL@4
$LN23@ubidi_getL@4:
; Line 1051
	cmp	DWORD PTR _insertRemove$9106[ebp], 0
	jne	SHORT $LN22@ubidi_getL@4
; Line 1052
	mov	eax, DWORD PTR _visualIndex$[ebp]
	add	eax, DWORD PTR _controlFound$9105[ebp]
	mov	DWORD PTR _visualIndex$[ebp], eax
; Line 1053
	jmp	$LN28@ubidi_getL@4
$LN22@ubidi_getL@4:
; Line 1056
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _runs$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	mov	DWORD PTR _logicalStart$9108[ebp], edx
; Line 1057
	mov	eax, DWORD PTR _logicalStart$9108[ebp]
	and	eax, -2147483648			; 80000000H
	sete	cl
	mov	BYTE PTR _evenRun$9114[ebp], cl
; Line 1058
	mov	eax, DWORD PTR _logicalStart$9108[ebp]
	and	eax, 2147483647				; 7fffffffH
	mov	DWORD PTR _logicalStart$9108[ebp], eax
; Line 1059
	mov	eax, DWORD PTR _length$9107[ebp]
	mov	ecx, DWORD PTR _logicalStart$9108[ebp]
	lea	edx, DWORD PTR [ecx+eax-1]
	mov	DWORD PTR _logicalEnd$9109[ebp], edx
; Line 1060
	mov	DWORD PTR _j$9111[ebp], 0
	jmp	SHORT $LN21@ubidi_getL@4
$LN20@ubidi_getL@4:
	mov	eax, DWORD PTR _j$9111[ebp]
	add	eax, 1
	mov	DWORD PTR _j$9111[ebp], eax
$LN21@ubidi_getL@4:
	mov	eax, DWORD PTR _j$9111[ebp]
	cmp	eax, DWORD PTR _length$9107[ebp]
	jge	$LN19@ubidi_getL@4
; Line 1061
	movsx	eax, BYTE PTR _evenRun$9114[ebp]
	test	eax, eax
	je	SHORT $LN52@ubidi_getL@4
	mov	ecx, DWORD PTR _logicalStart$9108[ebp]
	add	ecx, DWORD PTR _j$9111[ebp]
	mov	DWORD PTR tv187[ebp], ecx
	jmp	SHORT $LN53@ubidi_getL@4
$LN52@ubidi_getL@4:
	mov	edx, DWORD PTR _logicalEnd$9109[ebp]
	sub	edx, DWORD PTR _j$9111[ebp]
	mov	DWORD PTR tv187[ebp], edx
$LN53@ubidi_getL@4:
	mov	eax, DWORD PTR tv187[ebp]
	mov	DWORD PTR _k$9112[ebp], eax
; Line 1062
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _k$9112[ebp]
	mov	ax, WORD PTR [ecx+edx*2]
	mov	WORD PTR _uchar$9113[ebp], ax
; Line 1063
	movzx	eax, WORD PTR _uchar$9113[ebp]
	and	eax, -4					; fffffffcH
	cmp	eax, 8204				; 0000200cH
	je	SHORT $LN17@ubidi_getL@4
	movzx	eax, WORD PTR _uchar$9113[ebp]
	sub	eax, 8234				; 0000202aH
	cmp	eax, 5
	jb	SHORT $LN17@ubidi_getL@4
	movzx	eax, WORD PTR _uchar$9113[ebp]
	sub	eax, 8294				; 00002066H
	cmp	eax, 4
	jae	SHORT $LN18@ubidi_getL@4
$LN17@ubidi_getL@4:
; Line 1064
	mov	eax, DWORD PTR _controlFound$9105[ebp]
	add	eax, 1
	mov	DWORD PTR _controlFound$9105[ebp], eax
$LN18@ubidi_getL@4:
; Line 1066
	mov	eax, DWORD PTR _visualIndex$[ebp]
	add	eax, DWORD PTR _controlFound$9105[ebp]
	mov	ecx, DWORD PTR _visualStart$9110[ebp]
	add	ecx, DWORD PTR _j$9111[ebp]
	cmp	eax, ecx
	jne	SHORT $LN16@ubidi_getL@4
; Line 1067
	jmp	SHORT $LN19@ubidi_getL@4
$LN16@ubidi_getL@4:
; Line 1069
	jmp	$LN20@ubidi_getL@4
$LN19@ubidi_getL@4:
; Line 1070
	mov	eax, DWORD PTR _visualIndex$[ebp]
	add	eax, DWORD PTR _controlFound$9105[ebp]
	mov	DWORD PTR _visualIndex$[ebp], eax
; Line 1071
	jmp	SHORT $LN28@ubidi_getL@4
; Line 1072
	jmp	$LN25@ubidi_getL@4
$LN28@ubidi_getL@4:
; Line 1075
	cmp	DWORD PTR _runCount$[ebp], 10		; 0000000aH
	jg	SHORT $LN15@ubidi_getL@4
; Line 1077
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN14@ubidi_getL@4
$LN13@ubidi_getL@4:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN14@ubidi_getL@4:
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _runs$[ebp]
	mov	edx, DWORD PTR _visualIndex$[ebp]
	cmp	edx, DWORD PTR [ecx+eax+4]
	jl	SHORT $LN12@ubidi_getL@4
	jmp	SHORT $LN13@ubidi_getL@4
$LN12@ubidi_getL@4:
; Line 1078
	jmp	SHORT $LN11@ubidi_getL@4
$LN15@ubidi_getL@4:
; Line 1080
	mov	DWORD PTR _begin$9135[ebp], 0
	mov	eax, DWORD PTR _runCount$[ebp]
	mov	DWORD PTR _limit$9136[ebp], eax
$LN10@ubidi_getL@4:
; Line 1084
	mov	eax, DWORD PTR _begin$9135[ebp]
	add	eax, DWORD PTR _limit$9136[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _i$[ebp], eax
; Line 1085
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _runs$[ebp]
	mov	edx, DWORD PTR _visualIndex$[ebp]
	cmp	edx, DWORD PTR [ecx+eax+4]
	jl	SHORT $LN8@ubidi_getL@4
; Line 1086
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _begin$9135[ebp], eax
	jmp	SHORT $LN7@ubidi_getL@4
$LN8@ubidi_getL@4:
; Line 1087
	cmp	DWORD PTR _i$[ebp], 0
	je	SHORT $LN5@ubidi_getL@4
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _runs$[ebp]
	mov	edx, DWORD PTR _visualIndex$[ebp]
	cmp	edx, DWORD PTR [ecx+eax+4]
	jl	SHORT $LN6@ubidi_getL@4
$LN5@ubidi_getL@4:
; Line 1088
	jmp	SHORT $LN11@ubidi_getL@4
; Line 1089
	jmp	SHORT $LN7@ubidi_getL@4
$LN6@ubidi_getL@4:
; Line 1090
	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR _limit$9136[ebp], eax
$LN7@ubidi_getL@4:
; Line 1092
	jmp	SHORT $LN10@ubidi_getL@4
$LN11@ubidi_getL@4:
; Line 1095
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _runs$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	mov	DWORD PTR _start$[ebp], edx
; Line 1096
	mov	eax, DWORD PTR _start$[ebp]
	and	eax, -2147483648			; 80000000H
	sete	cl
	movsx	edx, cl
	test	edx, edx
	je	SHORT $LN3@ubidi_getL@4
; Line 1099
	cmp	DWORD PTR _i$[ebp], 0
	jle	SHORT $LN2@ubidi_getL@4
; Line 1100
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _runs$[ebp]
	mov	edx, DWORD PTR _visualIndex$[ebp]
	sub	edx, DWORD PTR [ecx+eax+4]
	mov	DWORD PTR _visualIndex$[ebp], edx
$LN2@ubidi_getL@4:
; Line 1102
	mov	eax, DWORD PTR _start$[ebp]
	add	eax, DWORD PTR _visualIndex$[ebp]
	jmp	SHORT $LN50@ubidi_getL@4
; Line 1103
	jmp	SHORT $LN50@ubidi_getL@4
$LN3@ubidi_getL@4:
; Line 1105
	mov	eax, DWORD PTR _start$[ebp]
	and	eax, 2147483647				; 7fffffffH
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _runs$[ebp]
	add	eax, DWORD PTR [edx+ecx+4]
	sub	eax, DWORD PTR _visualIndex$[ebp]
	sub	eax, 1
$LN50@ubidi_getL@4:
; Line 1107
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 436				; 000001b4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ubidi_getLogicalIndex_56 ENDP
_TEXT	ENDS
PUBLIC	_ubidi_getLogicalMap_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _ubidi_getLogicalMap_56
_TEXT	SEGMENT
tv209 = -412						; size = 4
_uchar$9208 = -212					; size = 2
_evenRun$9207 = -197					; size = 1
_insertRemove$9206 = -188				; size = 4
_length$9205 = -176					; size = 4
_runCount$9204 = -164					; size = 4
_controlFound$9203 = -152				; size = 4
_insertRemove$9191 = -140				; size = 4
_length$9190 = -128					; size = 4
_runCount$9189 = -116					; size = 4
_markFound$9188 = -104					; size = 4
_runs$9171 = -92					; size = 4
_logicalLimit$9170 = -80				; size = 4
_logicalStart$9169 = -68				; size = 4
_k$9168 = -56						; size = 4
_j$9167 = -44						; size = 4
_i$9166 = -32						; size = 4
_visualLimit$9165 = -20					; size = 4
_visualStart$9164 = -8					; size = 4
_pBiDi$ = 8						; size = 4
_indexMap$ = 12						; size = 4
_pErrorCode$ = 16					; size = 4
_ubidi_getLogicalMap_56 PROC				; COMDAT
; Line 1110
	push	ebp
	mov	ebp, esp
	sub	esp, 412				; 0000019cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-412]
	mov	ecx, 103				; 00000067H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1111
	cmp	DWORD PTR _pErrorCode$[ebp], 0
	je	SHORT $LN43@ubidi_getL@5
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN44@ubidi_getL@5
$LN43@ubidi_getL@5:
	jmp	$LN45@ubidi_getL@5
$LN44@ubidi_getL@5:
; Line 1113
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pBiDi$[ebp]
	push	ecx
	call	_ubidi_countRuns_56
	add	esp, 8
; Line 1114
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN42@ubidi_getL@5
	jmp	$LN45@ubidi_getL@5
$LN42@ubidi_getL@5:
; Line 1116
	cmp	DWORD PTR _indexMap$[ebp], 0
	jne	SHORT $LN40@ubidi_getL@5
; Line 1117
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 1
; Line 1118
	jmp	$LN45@ubidi_getL@5
$LN40@ubidi_getL@5:
; Line 1122
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+228]
	mov	DWORD PTR _runs$9171[ebp], ecx
; Line 1123
	mov	eax, DWORD PTR _pBiDi$[ebp]
	cmp	DWORD PTR [eax+16], 0
	jg	SHORT $LN38@ubidi_getL@5
; Line 1124
	jmp	$LN45@ubidi_getL@5
$LN38@ubidi_getL@5:
; Line 1126
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR _pBiDi$[ebp]
	mov	edx, DWORD PTR [eax+16]
	cmp	edx, DWORD PTR [ecx+20]
	jle	SHORT $LN37@ubidi_getL@5
; Line 1127
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	shl	ecx, 2
	push	ecx
	push	255					; 000000ffH
	mov	edx, DWORD PTR _indexMap$[ebp]
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH
$LN37@ubidi_getL@5:
; Line 1130
	mov	DWORD PTR _visualStart$9164[ebp], 0
; Line 1131
	mov	DWORD PTR _j$9167[ebp], 0
	jmp	SHORT $LN36@ubidi_getL@5
$LN35@ubidi_getL@5:
	mov	eax, DWORD PTR _j$9167[ebp]
	add	eax, 1
	mov	DWORD PTR _j$9167[ebp], eax
$LN36@ubidi_getL@5:
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR _j$9167[ebp]
	cmp	ecx, DWORD PTR [eax+224]
	jge	$LN34@ubidi_getL@5
; Line 1132
	mov	eax, DWORD PTR _j$9167[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _runs$9171[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	and	edx, 2147483647				; 7fffffffH
	mov	DWORD PTR _logicalStart$9169[ebp], edx
; Line 1133
	mov	eax, DWORD PTR _j$9167[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _runs$9171[ebp]
	mov	edx, DWORD PTR [ecx+eax+4]
	mov	DWORD PTR _visualLimit$9165[ebp], edx
; Line 1134
	mov	eax, DWORD PTR _j$9167[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _runs$9171[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	and	edx, -2147483648			; 80000000H
	sete	al
	movsx	ecx, al
	test	ecx, ecx
	je	SHORT $LN33@ubidi_getL@5
$LN32@ubidi_getL@5:
; Line 1136
	mov	eax, DWORD PTR _logicalStart$9169[ebp]
	mov	ecx, DWORD PTR _indexMap$[ebp]
	mov	edx, DWORD PTR _visualStart$9164[ebp]
	mov	DWORD PTR [ecx+eax*4], edx
	mov	eax, DWORD PTR _logicalStart$9169[ebp]
	add	eax, 1
	mov	DWORD PTR _logicalStart$9169[ebp], eax
	mov	ecx, DWORD PTR _visualStart$9164[ebp]
	add	ecx, 1
	mov	DWORD PTR _visualStart$9164[ebp], ecx
; Line 1137
	mov	eax, DWORD PTR _visualStart$9164[ebp]
	cmp	eax, DWORD PTR _visualLimit$9165[ebp]
	jl	SHORT $LN32@ubidi_getL@5
; Line 1138
	jmp	SHORT $LN29@ubidi_getL@5
$LN33@ubidi_getL@5:
; Line 1139
	mov	eax, DWORD PTR _visualLimit$9165[ebp]
	sub	eax, DWORD PTR _visualStart$9164[ebp]
	add	eax, DWORD PTR _logicalStart$9169[ebp]
	mov	DWORD PTR _logicalStart$9169[ebp], eax
$LN28@ubidi_getL@5:
; Line 1141
	mov	eax, DWORD PTR _logicalStart$9169[ebp]
	sub	eax, 1
	mov	DWORD PTR _logicalStart$9169[ebp], eax
	mov	ecx, DWORD PTR _logicalStart$9169[ebp]
	mov	edx, DWORD PTR _indexMap$[ebp]
	mov	eax, DWORD PTR _visualStart$9164[ebp]
	mov	DWORD PTR [edx+ecx*4], eax
	mov	ecx, DWORD PTR _visualStart$9164[ebp]
	add	ecx, 1
	mov	DWORD PTR _visualStart$9164[ebp], ecx
; Line 1142
	mov	eax, DWORD PTR _visualStart$9164[ebp]
	cmp	eax, DWORD PTR _visualLimit$9165[ebp]
	jl	SHORT $LN28@ubidi_getL@5
$LN29@ubidi_getL@5:
; Line 1145
	jmp	$LN35@ubidi_getL@5
$LN34@ubidi_getL@5:
; Line 1147
	mov	eax, DWORD PTR _pBiDi$[ebp]
	cmp	DWORD PTR [eax+336], 0
	jle	$LN25@ubidi_getL@5
; Line 1148
	mov	DWORD PTR _markFound$9188[ebp], 0
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+224]
	mov	DWORD PTR _runCount$9189[ebp], ecx
; Line 1150
	mov	DWORD PTR _visualStart$9164[ebp], 0
; Line 1152
	mov	DWORD PTR _i$9166[ebp], 0
	jmp	SHORT $LN24@ubidi_getL@5
$LN23@ubidi_getL@5:
	mov	eax, DWORD PTR _i$9166[ebp]
	add	eax, 1
	mov	DWORD PTR _i$9166[ebp], eax
	mov	ecx, DWORD PTR _visualStart$9164[ebp]
	add	ecx, DWORD PTR _length$9190[ebp]
	mov	DWORD PTR _visualStart$9164[ebp], ecx
$LN24@ubidi_getL@5:
	mov	eax, DWORD PTR _i$9166[ebp]
	cmp	eax, DWORD PTR _runCount$9189[ebp]
	jge	$LN22@ubidi_getL@5
; Line 1153
	mov	eax, DWORD PTR _i$9166[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _runs$9171[ebp]
	mov	edx, DWORD PTR [ecx+eax+4]
	sub	edx, DWORD PTR _visualStart$9164[ebp]
	mov	DWORD PTR _length$9190[ebp], edx
; Line 1154
	mov	eax, DWORD PTR _i$9166[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _runs$9171[ebp]
	mov	edx, DWORD PTR [ecx+eax+8]
	mov	DWORD PTR _insertRemove$9191[ebp], edx
; Line 1155
	mov	eax, DWORD PTR _insertRemove$9191[ebp]
	and	eax, 5
	je	SHORT $LN21@ubidi_getL@5
; Line 1156
	mov	eax, DWORD PTR _markFound$9188[ebp]
	add	eax, 1
	mov	DWORD PTR _markFound$9188[ebp], eax
$LN21@ubidi_getL@5:
; Line 1158
	cmp	DWORD PTR _markFound$9188[ebp], 0
	jle	SHORT $LN20@ubidi_getL@5
; Line 1159
	mov	eax, DWORD PTR _i$9166[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _runs$9171[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	and	edx, 2147483647				; 7fffffffH
	mov	DWORD PTR _logicalStart$9169[ebp], edx
; Line 1160
	mov	eax, DWORD PTR _logicalStart$9169[ebp]
	add	eax, DWORD PTR _length$9190[ebp]
	mov	DWORD PTR _logicalLimit$9170[ebp], eax
; Line 1161
	mov	eax, DWORD PTR _logicalStart$9169[ebp]
	mov	DWORD PTR _j$9167[ebp], eax
	jmp	SHORT $LN19@ubidi_getL@5
$LN18@ubidi_getL@5:
	mov	eax, DWORD PTR _j$9167[ebp]
	add	eax, 1
	mov	DWORD PTR _j$9167[ebp], eax
$LN19@ubidi_getL@5:
	mov	eax, DWORD PTR _j$9167[ebp]
	cmp	eax, DWORD PTR _logicalLimit$9170[ebp]
	jge	SHORT $LN20@ubidi_getL@5
; Line 1162
	mov	eax, DWORD PTR _j$9167[ebp]
	mov	ecx, DWORD PTR _indexMap$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	add	edx, DWORD PTR _markFound$9188[ebp]
	mov	eax, DWORD PTR _j$9167[ebp]
	mov	ecx, DWORD PTR _indexMap$[ebp]
	mov	DWORD PTR [ecx+eax*4], edx
; Line 1163
	jmp	SHORT $LN18@ubidi_getL@5
$LN20@ubidi_getL@5:
; Line 1165
	mov	eax, DWORD PTR _insertRemove$9191[ebp]
	and	eax, 10					; 0000000aH
	je	SHORT $LN16@ubidi_getL@5
; Line 1166
	mov	eax, DWORD PTR _markFound$9188[ebp]
	add	eax, 1
	mov	DWORD PTR _markFound$9188[ebp], eax
$LN16@ubidi_getL@5:
; Line 1168
	jmp	$LN23@ubidi_getL@5
$LN22@ubidi_getL@5:
; Line 1170
	jmp	$LN45@ubidi_getL@5
$LN25@ubidi_getL@5:
	mov	eax, DWORD PTR _pBiDi$[ebp]
	cmp	DWORD PTR [eax+352], 0
	jle	$LN45@ubidi_getL@5
; Line 1171
	mov	DWORD PTR _controlFound$9203[ebp], 0
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+224]
	mov	DWORD PTR _runCount$9204[ebp], ecx
; Line 1175
	mov	DWORD PTR _visualStart$9164[ebp], 0
; Line 1177
	mov	DWORD PTR _i$9166[ebp], 0
	jmp	SHORT $LN13@ubidi_getL@5
$LN12@ubidi_getL@5:
	mov	eax, DWORD PTR _i$9166[ebp]
	add	eax, 1
	mov	DWORD PTR _i$9166[ebp], eax
	mov	ecx, DWORD PTR _visualStart$9164[ebp]
	add	ecx, DWORD PTR _length$9205[ebp]
	mov	DWORD PTR _visualStart$9164[ebp], ecx
$LN13@ubidi_getL@5:
	mov	eax, DWORD PTR _i$9166[ebp]
	cmp	eax, DWORD PTR _runCount$9204[ebp]
	jge	$LN45@ubidi_getL@5
; Line 1178
	mov	eax, DWORD PTR _i$9166[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _runs$9171[ebp]
	mov	edx, DWORD PTR [ecx+eax+4]
	sub	edx, DWORD PTR _visualStart$9164[ebp]
	mov	DWORD PTR _length$9205[ebp], edx
; Line 1179
	mov	eax, DWORD PTR _i$9166[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _runs$9171[ebp]
	mov	edx, DWORD PTR [ecx+eax+8]
	mov	DWORD PTR _insertRemove$9206[ebp], edx
; Line 1181
	mov	eax, DWORD PTR _controlFound$9203[ebp]
	sub	eax, DWORD PTR _insertRemove$9206[ebp]
	jne	SHORT $LN10@ubidi_getL@5
; Line 1182
	jmp	SHORT $LN12@ubidi_getL@5
$LN10@ubidi_getL@5:
; Line 1184
	mov	eax, DWORD PTR _i$9166[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _runs$9171[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	mov	DWORD PTR _logicalStart$9169[ebp], edx
; Line 1185
	mov	eax, DWORD PTR _logicalStart$9169[ebp]
	and	eax, -2147483648			; 80000000H
	sete	cl
	mov	BYTE PTR _evenRun$9207[ebp], cl
; Line 1186
	mov	eax, DWORD PTR _logicalStart$9169[ebp]
	and	eax, 2147483647				; 7fffffffH
	mov	DWORD PTR _logicalStart$9169[ebp], eax
; Line 1187
	mov	eax, DWORD PTR _logicalStart$9169[ebp]
	add	eax, DWORD PTR _length$9205[ebp]
	mov	DWORD PTR _logicalLimit$9170[ebp], eax
; Line 1189
	cmp	DWORD PTR _insertRemove$9206[ebp], 0
	jne	SHORT $LN9@ubidi_getL@5
; Line 1190
	mov	eax, DWORD PTR _logicalStart$9169[ebp]
	mov	DWORD PTR _j$9167[ebp], eax
	jmp	SHORT $LN8@ubidi_getL@5
$LN7@ubidi_getL@5:
	mov	eax, DWORD PTR _j$9167[ebp]
	add	eax, 1
	mov	DWORD PTR _j$9167[ebp], eax
$LN8@ubidi_getL@5:
	mov	eax, DWORD PTR _j$9167[ebp]
	cmp	eax, DWORD PTR _logicalLimit$9170[ebp]
	jge	SHORT $LN6@ubidi_getL@5
; Line 1191
	mov	eax, DWORD PTR _j$9167[ebp]
	mov	ecx, DWORD PTR _indexMap$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	sub	edx, DWORD PTR _controlFound$9203[ebp]
	mov	eax, DWORD PTR _j$9167[ebp]
	mov	ecx, DWORD PTR _indexMap$[ebp]
	mov	DWORD PTR [ecx+eax*4], edx
; Line 1192
	jmp	SHORT $LN7@ubidi_getL@5
$LN6@ubidi_getL@5:
; Line 1193
	jmp	$LN12@ubidi_getL@5
$LN9@ubidi_getL@5:
; Line 1195
	mov	DWORD PTR _j$9167[ebp], 0
	jmp	SHORT $LN5@ubidi_getL@5
$LN4@ubidi_getL@5:
	mov	eax, DWORD PTR _j$9167[ebp]
	add	eax, 1
	mov	DWORD PTR _j$9167[ebp], eax
$LN5@ubidi_getL@5:
	mov	eax, DWORD PTR _j$9167[ebp]
	cmp	eax, DWORD PTR _length$9205[ebp]
	jge	$LN3@ubidi_getL@5
; Line 1196
	movsx	eax, BYTE PTR _evenRun$9207[ebp]
	test	eax, eax
	je	SHORT $LN47@ubidi_getL@5
	mov	ecx, DWORD PTR _logicalStart$9169[ebp]
	add	ecx, DWORD PTR _j$9167[ebp]
	mov	DWORD PTR tv209[ebp], ecx
	jmp	SHORT $LN48@ubidi_getL@5
$LN47@ubidi_getL@5:
	mov	edx, DWORD PTR _logicalLimit$9170[ebp]
	sub	edx, DWORD PTR _j$9167[ebp]
	sub	edx, 1
	mov	DWORD PTR tv209[ebp], edx
$LN48@ubidi_getL@5:
	mov	eax, DWORD PTR tv209[ebp]
	mov	DWORD PTR _k$9168[ebp], eax
; Line 1197
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _k$9168[ebp]
	mov	ax, WORD PTR [ecx+edx*2]
	mov	WORD PTR _uchar$9208[ebp], ax
; Line 1198
	movzx	eax, WORD PTR _uchar$9208[ebp]
	and	eax, -4					; fffffffcH
	cmp	eax, 8204				; 0000200cH
	je	SHORT $LN1@ubidi_getL@5
	movzx	eax, WORD PTR _uchar$9208[ebp]
	sub	eax, 8234				; 0000202aH
	cmp	eax, 5
	jb	SHORT $LN1@ubidi_getL@5
	movzx	eax, WORD PTR _uchar$9208[ebp]
	sub	eax, 8294				; 00002066H
	cmp	eax, 4
	jae	SHORT $LN2@ubidi_getL@5
$LN1@ubidi_getL@5:
; Line 1199
	mov	eax, DWORD PTR _controlFound$9203[ebp]
	add	eax, 1
	mov	DWORD PTR _controlFound$9203[ebp], eax
; Line 1200
	mov	eax, DWORD PTR _k$9168[ebp]
	mov	ecx, DWORD PTR _indexMap$[ebp]
	mov	DWORD PTR [ecx+eax*4], -1
; Line 1201
	jmp	$LN4@ubidi_getL@5
$LN2@ubidi_getL@5:
; Line 1203
	mov	eax, DWORD PTR _k$9168[ebp]
	mov	ecx, DWORD PTR _indexMap$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	sub	edx, DWORD PTR _controlFound$9203[ebp]
	mov	eax, DWORD PTR _k$9168[ebp]
	mov	ecx, DWORD PTR _indexMap$[ebp]
	mov	DWORD PTR [ecx+eax*4], edx
; Line 1204
	jmp	$LN4@ubidi_getL@5
$LN3@ubidi_getL@5:
; Line 1205
	jmp	$LN12@ubidi_getL@5
$LN45@ubidi_getL@5:
; Line 1208
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 412				; 0000019cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ubidi_getLogicalMap_56 ENDP
_TEXT	ENDS
PUBLIC	_ubidi_getVisualMap_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _ubidi_getVisualMap_56
_TEXT	SEGMENT
tv222 = -460						; size = 4
tv161 = -460						; size = 4
_evenRun$9289 = -257					; size = 1
_uchar$9288 = -248					; size = 2
_m$9287 = -236						; size = 4
_k$9286 = -224						; size = 4
_j$9285 = -212						; size = 4
_i$9284 = -200						; size = 4
_length$9283 = -188					; size = 4
_insertRemove$9282 = -176				; size = 4
_logicalEnd$9281 = -164					; size = 4
_runCount$9280 = -152					; size = 4
_k$9264 = -140						; size = 4
_j$9263 = -128						; size = 4
_i$9262 = -116						; size = 4
_insertRemove$9261 = -104				; size = 4
_runCount$9260 = -92					; size = 4
_markFound$9259 = -80					; size = 4
_pi$9244 = -68						; size = 4
_visualLimit$9243 = -56					; size = 4
_visualStart$9242 = -44					; size = 4
_logicalStart$9241 = -32				; size = 4
_runsLimit$9240 = -20					; size = 4
_runs$9239 = -8						; size = 4
_pBiDi$ = 8						; size = 4
_indexMap$ = 12						; size = 4
_pErrorCode$ = 16					; size = 4
_ubidi_getVisualMap_56 PROC				; COMDAT
; Line 1211
	push	ebp
	mov	ebp, esp
	sub	esp, 460				; 000001ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-460]
	mov	ecx, 115				; 00000073H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1212
	cmp	DWORD PTR _pErrorCode$[ebp], 0
	je	SHORT $LN43@ubidi_getV@3
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN44@ubidi_getV@3
$LN43@ubidi_getV@3:
	jmp	$LN45@ubidi_getV@3
$LN44@ubidi_getV@3:
; Line 1213
	cmp	DWORD PTR _indexMap$[ebp], 0
	jne	SHORT $LN42@ubidi_getV@3
; Line 1214
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 1
; Line 1215
	jmp	$LN45@ubidi_getV@3
$LN42@ubidi_getV@3:
; Line 1218
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pBiDi$[ebp]
	push	ecx
	call	_ubidi_countRuns_56
	add	esp, 8
; Line 1219
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	cmp	DWORD PTR [eax], 0
	jg	$LN45@ubidi_getV@3
; Line 1221
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+228]
	mov	DWORD PTR _runs$9239[ebp], ecx
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+224]
	imul	ecx, 12					; 0000000cH
	add	ecx, DWORD PTR _runs$9239[ebp]
	mov	DWORD PTR _runsLimit$9240[ebp], ecx
; Line 1222
	mov	eax, DWORD PTR _indexMap$[ebp]
	mov	DWORD PTR _pi$9244[ebp], eax
; Line 1224
	mov	eax, DWORD PTR _pBiDi$[ebp]
	cmp	DWORD PTR [eax+20], 0
	jg	SHORT $LN40@ubidi_getV@3
; Line 1225
	jmp	$LN45@ubidi_getV@3
$LN40@ubidi_getV@3:
; Line 1227
	mov	DWORD PTR _visualStart$9242[ebp], 0
	jmp	SHORT $LN39@ubidi_getV@3
$LN38@ubidi_getV@3:
; Line 1228
	mov	eax, DWORD PTR _runs$9239[ebp]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR _runs$9239[ebp], eax
$LN39@ubidi_getV@3:
	mov	eax, DWORD PTR _runs$9239[ebp]
	cmp	eax, DWORD PTR _runsLimit$9240[ebp]
	jae	$LN37@ubidi_getV@3
; Line 1229
	mov	eax, DWORD PTR _runs$9239[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _logicalStart$9241[ebp], ecx
; Line 1230
	mov	eax, DWORD PTR _runs$9239[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _visualLimit$9243[ebp], ecx
; Line 1231
	mov	eax, DWORD PTR _logicalStart$9241[ebp]
	and	eax, -2147483648			; 80000000H
	sete	cl
	movsx	edx, cl
	test	edx, edx
	je	SHORT $LN36@ubidi_getV@3
$LN35@ubidi_getV@3:
; Line 1233
	mov	eax, DWORD PTR _pi$9244[ebp]
	mov	ecx, DWORD PTR _logicalStart$9241[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _pi$9244[ebp]
	add	edx, 4
	mov	DWORD PTR _pi$9244[ebp], edx
	mov	eax, DWORD PTR _logicalStart$9241[ebp]
	add	eax, 1
	mov	DWORD PTR _logicalStart$9241[ebp], eax
; Line 1234
	mov	eax, DWORD PTR _visualStart$9242[ebp]
	add	eax, 1
	mov	DWORD PTR _visualStart$9242[ebp], eax
	mov	ecx, DWORD PTR _visualStart$9242[ebp]
	cmp	ecx, DWORD PTR _visualLimit$9243[ebp]
	jl	SHORT $LN35@ubidi_getV@3
; Line 1235
	jmp	SHORT $LN32@ubidi_getV@3
$LN36@ubidi_getV@3:
; Line 1236
	mov	eax, DWORD PTR _logicalStart$9241[ebp]
	and	eax, 2147483647				; 7fffffffH
	mov	DWORD PTR _logicalStart$9241[ebp], eax
; Line 1237
	mov	eax, DWORD PTR _visualLimit$9243[ebp]
	sub	eax, DWORD PTR _visualStart$9242[ebp]
	add	eax, DWORD PTR _logicalStart$9241[ebp]
	mov	DWORD PTR _logicalStart$9241[ebp], eax
$LN31@ubidi_getV@3:
; Line 1239
	mov	eax, DWORD PTR _logicalStart$9241[ebp]
	sub	eax, 1
	mov	DWORD PTR _logicalStart$9241[ebp], eax
	mov	ecx, DWORD PTR _pi$9244[ebp]
	mov	edx, DWORD PTR _logicalStart$9241[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _pi$9244[ebp]
	add	eax, 4
	mov	DWORD PTR _pi$9244[ebp], eax
; Line 1240
	mov	eax, DWORD PTR _visualStart$9242[ebp]
	add	eax, 1
	mov	DWORD PTR _visualStart$9242[ebp], eax
	mov	ecx, DWORD PTR _visualStart$9242[ebp]
	cmp	ecx, DWORD PTR _visualLimit$9243[ebp]
	jl	SHORT $LN31@ubidi_getV@3
$LN32@ubidi_getV@3:
; Line 1243
	jmp	$LN38@ubidi_getV@3
$LN37@ubidi_getV@3:
; Line 1245
	mov	eax, DWORD PTR _pBiDi$[ebp]
	cmp	DWORD PTR [eax+336], 0
	jle	$LN28@ubidi_getV@3
; Line 1246
	mov	DWORD PTR _markFound$9259[ebp], 0
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+224]
	mov	DWORD PTR _runCount$9260[ebp], ecx
; Line 1248
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+228]
	mov	DWORD PTR _runs$9239[ebp], ecx
; Line 1250
	mov	DWORD PTR _i$9262[ebp], 0
	jmp	SHORT $LN27@ubidi_getV@3
$LN26@ubidi_getV@3:
	mov	eax, DWORD PTR _i$9262[ebp]
	add	eax, 1
	mov	DWORD PTR _i$9262[ebp], eax
$LN27@ubidi_getV@3:
	mov	eax, DWORD PTR _i$9262[ebp]
	cmp	eax, DWORD PTR _runCount$9260[ebp]
	jge	SHORT $LN25@ubidi_getV@3
; Line 1251
	mov	eax, DWORD PTR _i$9262[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _runs$9239[ebp]
	mov	edx, DWORD PTR [ecx+eax+8]
	mov	DWORD PTR _insertRemove$9261[ebp], edx
; Line 1252
	mov	eax, DWORD PTR _insertRemove$9261[ebp]
	and	eax, 5
	je	SHORT $LN24@ubidi_getV@3
; Line 1253
	mov	eax, DWORD PTR _markFound$9259[ebp]
	add	eax, 1
	mov	DWORD PTR _markFound$9259[ebp], eax
$LN24@ubidi_getV@3:
; Line 1255
	mov	eax, DWORD PTR _insertRemove$9261[ebp]
	and	eax, 10					; 0000000aH
	je	SHORT $LN23@ubidi_getV@3
; Line 1256
	mov	eax, DWORD PTR _markFound$9259[ebp]
	add	eax, 1
	mov	DWORD PTR _markFound$9259[ebp], eax
$LN23@ubidi_getV@3:
; Line 1258
	jmp	SHORT $LN26@ubidi_getV@3
$LN25@ubidi_getV@3:
; Line 1260
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _k$9264[ebp], ecx
; Line 1261
	mov	eax, DWORD PTR _runCount$9260[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$9262[ebp], eax
	jmp	SHORT $LN22@ubidi_getV@3
$LN21@ubidi_getV@3:
	mov	eax, DWORD PTR _i$9262[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$9262[ebp], eax
$LN22@ubidi_getV@3:
	cmp	DWORD PTR _i$9262[ebp], 0
	jl	$LN20@ubidi_getV@3
	cmp	DWORD PTR _markFound$9259[ebp], 0
	jle	$LN20@ubidi_getV@3
; Line 1262
	mov	eax, DWORD PTR _i$9262[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _runs$9239[ebp]
	mov	edx, DWORD PTR [ecx+eax+8]
	mov	DWORD PTR _insertRemove$9261[ebp], edx
; Line 1263
	mov	eax, DWORD PTR _insertRemove$9261[ebp]
	and	eax, 10					; 0000000aH
	je	SHORT $LN19@ubidi_getV@3
; Line 1264
	mov	eax, DWORD PTR _k$9264[ebp]
	sub	eax, 1
	mov	DWORD PTR _k$9264[ebp], eax
	mov	ecx, DWORD PTR _k$9264[ebp]
	mov	edx, DWORD PTR _indexMap$[ebp]
	mov	DWORD PTR [edx+ecx*4], -1
; Line 1265
	mov	eax, DWORD PTR _markFound$9259[ebp]
	sub	eax, 1
	mov	DWORD PTR _markFound$9259[ebp], eax
$LN19@ubidi_getV@3:
; Line 1267
	cmp	DWORD PTR _i$9262[ebp], 0
	jle	SHORT $LN47@ubidi_getV@3
	mov	eax, DWORD PTR _i$9262[ebp]
	sub	eax, 1
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _runs$9239[ebp]
	mov	edx, DWORD PTR [ecx+eax+4]
	mov	DWORD PTR tv161[ebp], edx
	jmp	SHORT $LN48@ubidi_getV@3
$LN47@ubidi_getV@3:
	mov	DWORD PTR tv161[ebp], 0
$LN48@ubidi_getV@3:
	mov	eax, DWORD PTR tv161[ebp]
	mov	DWORD PTR _visualStart$9242[ebp], eax
; Line 1268
	mov	eax, DWORD PTR _i$9262[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _runs$9239[ebp]
	mov	edx, DWORD PTR [ecx+eax+4]
	sub	edx, 1
	mov	DWORD PTR _j$9263[ebp], edx
	jmp	SHORT $LN18@ubidi_getV@3
$LN17@ubidi_getV@3:
	mov	eax, DWORD PTR _j$9263[ebp]
	sub	eax, 1
	mov	DWORD PTR _j$9263[ebp], eax
$LN18@ubidi_getV@3:
	mov	eax, DWORD PTR _j$9263[ebp]
	cmp	eax, DWORD PTR _visualStart$9242[ebp]
	jl	SHORT $LN16@ubidi_getV@3
	cmp	DWORD PTR _markFound$9259[ebp], 0
	jle	SHORT $LN16@ubidi_getV@3
; Line 1269
	mov	eax, DWORD PTR _k$9264[ebp]
	sub	eax, 1
	mov	DWORD PTR _k$9264[ebp], eax
	mov	ecx, DWORD PTR _k$9264[ebp]
	mov	edx, DWORD PTR _indexMap$[ebp]
	mov	eax, DWORD PTR _j$9263[ebp]
	mov	esi, DWORD PTR _indexMap$[ebp]
	mov	eax, DWORD PTR [esi+eax*4]
	mov	DWORD PTR [edx+ecx*4], eax
; Line 1270
	jmp	SHORT $LN17@ubidi_getV@3
$LN16@ubidi_getV@3:
; Line 1271
	mov	eax, DWORD PTR _insertRemove$9261[ebp]
	and	eax, 5
	je	SHORT $LN15@ubidi_getV@3
; Line 1272
	mov	eax, DWORD PTR _k$9264[ebp]
	sub	eax, 1
	mov	DWORD PTR _k$9264[ebp], eax
	mov	ecx, DWORD PTR _k$9264[ebp]
	mov	edx, DWORD PTR _indexMap$[ebp]
	mov	DWORD PTR [edx+ecx*4], -1
; Line 1273
	mov	eax, DWORD PTR _markFound$9259[ebp]
	sub	eax, 1
	mov	DWORD PTR _markFound$9259[ebp], eax
$LN15@ubidi_getV@3:
; Line 1275
	jmp	$LN21@ubidi_getV@3
$LN20@ubidi_getV@3:
; Line 1277
	jmp	$LN45@ubidi_getV@3
$LN28@ubidi_getV@3:
	mov	eax, DWORD PTR _pBiDi$[ebp]
	cmp	DWORD PTR [eax+352], 0
	jle	$LN45@ubidi_getV@3
; Line 1278
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+224]
	mov	DWORD PTR _runCount$9280[ebp], ecx
; Line 1282
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+228]
	mov	DWORD PTR _runs$9239[ebp], ecx
; Line 1283
	mov	DWORD PTR _visualStart$9242[ebp], 0
; Line 1285
	mov	DWORD PTR _k$9286[ebp], 0
; Line 1286
	mov	DWORD PTR _i$9284[ebp], 0
	jmp	SHORT $LN12@ubidi_getV@3
$LN11@ubidi_getV@3:
	mov	eax, DWORD PTR _i$9284[ebp]
	add	eax, 1
	mov	DWORD PTR _i$9284[ebp], eax
	mov	ecx, DWORD PTR _visualStart$9242[ebp]
	add	ecx, DWORD PTR _length$9283[ebp]
	mov	DWORD PTR _visualStart$9242[ebp], ecx
$LN12@ubidi_getV@3:
	mov	eax, DWORD PTR _i$9284[ebp]
	cmp	eax, DWORD PTR _runCount$9280[ebp]
	jge	$LN45@ubidi_getV@3
; Line 1287
	mov	eax, DWORD PTR _i$9284[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _runs$9239[ebp]
	mov	edx, DWORD PTR [ecx+eax+4]
	sub	edx, DWORD PTR _visualStart$9242[ebp]
	mov	DWORD PTR _length$9283[ebp], edx
; Line 1288
	mov	eax, DWORD PTR _i$9284[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _runs$9239[ebp]
	mov	edx, DWORD PTR [ecx+eax+8]
	mov	DWORD PTR _insertRemove$9282[ebp], edx
; Line 1290
	cmp	DWORD PTR _insertRemove$9282[ebp], 0
	jne	SHORT $LN9@ubidi_getV@3
	mov	eax, DWORD PTR _k$9286[ebp]
	cmp	eax, DWORD PTR _visualStart$9242[ebp]
	jne	SHORT $LN9@ubidi_getV@3
; Line 1291
	mov	eax, DWORD PTR _k$9286[ebp]
	add	eax, DWORD PTR _length$9283[ebp]
	mov	DWORD PTR _k$9286[ebp], eax
; Line 1292
	jmp	$LN11@ubidi_getV@3
$LN9@ubidi_getV@3:
; Line 1295
	cmp	DWORD PTR _insertRemove$9282[ebp], 0
	jne	SHORT $LN8@ubidi_getV@3
; Line 1296
	mov	eax, DWORD PTR _i$9284[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _runs$9239[ebp]
	mov	edx, DWORD PTR [ecx+eax+4]
	mov	DWORD PTR _visualLimit$9243[ebp], edx
; Line 1297
	mov	eax, DWORD PTR _visualStart$9242[ebp]
	mov	DWORD PTR _j$9285[ebp], eax
	jmp	SHORT $LN7@ubidi_getV@3
$LN6@ubidi_getV@3:
	mov	eax, DWORD PTR _j$9285[ebp]
	add	eax, 1
	mov	DWORD PTR _j$9285[ebp], eax
$LN7@ubidi_getV@3:
	mov	eax, DWORD PTR _j$9285[ebp]
	cmp	eax, DWORD PTR _visualLimit$9243[ebp]
	jge	SHORT $LN5@ubidi_getV@3
; Line 1298
	mov	eax, DWORD PTR _k$9286[ebp]
	mov	ecx, DWORD PTR _indexMap$[ebp]
	mov	edx, DWORD PTR _j$9285[ebp]
	mov	esi, DWORD PTR _indexMap$[ebp]
	mov	edx, DWORD PTR [esi+edx*4]
	mov	DWORD PTR [ecx+eax*4], edx
	mov	eax, DWORD PTR _k$9286[ebp]
	add	eax, 1
	mov	DWORD PTR _k$9286[ebp], eax
; Line 1299
	jmp	SHORT $LN6@ubidi_getV@3
$LN5@ubidi_getV@3:
; Line 1300
	jmp	$LN11@ubidi_getV@3
$LN8@ubidi_getV@3:
; Line 1302
	mov	eax, DWORD PTR _i$9284[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _runs$9239[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	mov	DWORD PTR _logicalStart$9241[ebp], edx
; Line 1303
	mov	eax, DWORD PTR _logicalStart$9241[ebp]
	and	eax, -2147483648			; 80000000H
	sete	cl
	mov	BYTE PTR _evenRun$9289[ebp], cl
; Line 1304
	mov	eax, DWORD PTR _logicalStart$9241[ebp]
	and	eax, 2147483647				; 7fffffffH
	mov	DWORD PTR _logicalStart$9241[ebp], eax
; Line 1305
	mov	eax, DWORD PTR _length$9283[ebp]
	mov	ecx, DWORD PTR _logicalStart$9241[ebp]
	lea	edx, DWORD PTR [ecx+eax-1]
	mov	DWORD PTR _logicalEnd$9281[ebp], edx
; Line 1306
	mov	DWORD PTR _j$9285[ebp], 0
	jmp	SHORT $LN4@ubidi_getV@3
$LN3@ubidi_getV@3:
	mov	eax, DWORD PTR _j$9285[ebp]
	add	eax, 1
	mov	DWORD PTR _j$9285[ebp], eax
$LN4@ubidi_getV@3:
	mov	eax, DWORD PTR _j$9285[ebp]
	cmp	eax, DWORD PTR _length$9283[ebp]
	jge	$LN2@ubidi_getV@3
; Line 1307
	movsx	eax, BYTE PTR _evenRun$9289[ebp]
	test	eax, eax
	je	SHORT $LN49@ubidi_getV@3
	mov	ecx, DWORD PTR _logicalStart$9241[ebp]
	add	ecx, DWORD PTR _j$9285[ebp]
	mov	DWORD PTR tv222[ebp], ecx
	jmp	SHORT $LN50@ubidi_getV@3
$LN49@ubidi_getV@3:
	mov	edx, DWORD PTR _logicalEnd$9281[ebp]
	sub	edx, DWORD PTR _j$9285[ebp]
	mov	DWORD PTR tv222[ebp], edx
$LN50@ubidi_getV@3:
	mov	eax, DWORD PTR tv222[ebp]
	mov	DWORD PTR _m$9287[ebp], eax
; Line 1308
	mov	eax, DWORD PTR _pBiDi$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _m$9287[ebp]
	mov	ax, WORD PTR [ecx+edx*2]
	mov	WORD PTR _uchar$9288[ebp], ax
; Line 1309
	movzx	eax, WORD PTR _uchar$9288[ebp]
	and	eax, -4					; fffffffcH
	cmp	eax, 8204				; 0000200cH
	je	SHORT $LN1@ubidi_getV@3
	movzx	eax, WORD PTR _uchar$9288[ebp]
	sub	eax, 8234				; 0000202aH
	cmp	eax, 5
	jb	SHORT $LN1@ubidi_getV@3
	movzx	eax, WORD PTR _uchar$9288[ebp]
	sub	eax, 8294				; 00002066H
	cmp	eax, 4
	jb	SHORT $LN1@ubidi_getV@3
; Line 1310
	mov	eax, DWORD PTR _k$9286[ebp]
	mov	ecx, DWORD PTR _indexMap$[ebp]
	mov	edx, DWORD PTR _m$9287[ebp]
	mov	DWORD PTR [ecx+eax*4], edx
	mov	eax, DWORD PTR _k$9286[ebp]
	add	eax, 1
	mov	DWORD PTR _k$9286[ebp], eax
$LN1@ubidi_getV@3:
; Line 1312
	jmp	$LN3@ubidi_getV@3
$LN2@ubidi_getV@3:
; Line 1313
	jmp	$LN11@ubidi_getV@3
$LN45@ubidi_getV@3:
; Line 1316
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 460				; 000001ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ubidi_getVisualMap_56 ENDP
_TEXT	ENDS
PUBLIC	_ubidi_invertMap_56
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _ubidi_invertMap_56
_TEXT	SEGMENT
_count$9318 = -32					; size = 4
_destLength$9317 = -20					; size = 4
_pi$9316 = -8						; size = 4
_srcMap$ = 8						; size = 4
_destMap$ = 12						; size = 4
_length$ = 16						; size = 4
_ubidi_invertMap_56 PROC				; COMDAT
; Line 1319
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1320
	cmp	DWORD PTR _srcMap$[ebp], 0
	je	$LN11@ubidi_inve
	cmp	DWORD PTR _destMap$[ebp], 0
	je	$LN11@ubidi_inve
	cmp	DWORD PTR _length$[ebp], 0
	jle	$LN11@ubidi_inve
; Line 1322
	mov	DWORD PTR _destLength$9317[ebp], -1
	mov	DWORD PTR _count$9318[ebp], 0
; Line 1324
	mov	eax, DWORD PTR _length$[ebp]
	mov	ecx, DWORD PTR _srcMap$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _pi$9316[ebp], edx
$LN9@ubidi_inve:
; Line 1325
	mov	eax, DWORD PTR _pi$9316[ebp]
	cmp	eax, DWORD PTR _srcMap$[ebp]
	jbe	SHORT $LN8@ubidi_inve
; Line 1326
	mov	eax, DWORD PTR _pi$9316[ebp]
	sub	eax, 4
	mov	DWORD PTR _pi$9316[ebp], eax
	mov	ecx, DWORD PTR _pi$9316[ebp]
	mov	edx, DWORD PTR [ecx]
	cmp	edx, DWORD PTR _destLength$9317[ebp]
	jle	SHORT $LN7@ubidi_inve
; Line 1327
	mov	eax, DWORD PTR _pi$9316[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _destLength$9317[ebp], ecx
$LN7@ubidi_inve:
; Line 1329
	mov	eax, DWORD PTR _pi$9316[ebp]
	cmp	DWORD PTR [eax], 0
	jl	SHORT $LN6@ubidi_inve
; Line 1330
	mov	eax, DWORD PTR _count$9318[ebp]
	add	eax, 1
	mov	DWORD PTR _count$9318[ebp], eax
$LN6@ubidi_inve:
; Line 1332
	jmp	SHORT $LN9@ubidi_inve
$LN8@ubidi_inve:
; Line 1333
	mov	eax, DWORD PTR _destLength$9317[ebp]
	add	eax, 1
	mov	DWORD PTR _destLength$9317[ebp], eax
; Line 1334
	mov	eax, DWORD PTR _count$9318[ebp]
	cmp	eax, DWORD PTR _destLength$9317[ebp]
	jge	SHORT $LN5@ubidi_inve
; Line 1336
	mov	eax, DWORD PTR _destLength$9317[ebp]
	shl	eax, 2
	push	eax
	push	255					; 000000ffH
	mov	ecx, DWORD PTR _destMap$[ebp]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH
$LN5@ubidi_inve:
; Line 1338
	mov	eax, DWORD PTR _length$[ebp]
	mov	ecx, DWORD PTR _srcMap$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _pi$9316[ebp], edx
$LN4@ubidi_inve:
; Line 1339
	cmp	DWORD PTR _length$[ebp], 0
	jle	SHORT $LN11@ubidi_inve
; Line 1340
	mov	eax, DWORD PTR _pi$9316[ebp]
	sub	eax, 4
	mov	DWORD PTR _pi$9316[ebp], eax
	mov	ecx, DWORD PTR _pi$9316[ebp]
	cmp	DWORD PTR [ecx], 0
	jl	SHORT $LN2@ubidi_inve
; Line 1341
	mov	eax, DWORD PTR _length$[ebp]
	sub	eax, 1
	mov	DWORD PTR _length$[ebp], eax
	mov	ecx, DWORD PTR _pi$9316[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _destMap$[ebp]
	mov	ecx, DWORD PTR _length$[ebp]
	mov	DWORD PTR [eax+edx*4], ecx
; Line 1342
	jmp	SHORT $LN1@ubidi_inve
$LN2@ubidi_inve:
; Line 1343
	mov	eax, DWORD PTR _length$[ebp]
	sub	eax, 1
	mov	DWORD PTR _length$[ebp], eax
$LN1@ubidi_inve:
; Line 1345
	jmp	SHORT $LN4@ubidi_inve
$LN11@ubidi_inve:
; Line 1347
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ubidi_invertMap_56 ENDP
_TEXT	ENDS
END
