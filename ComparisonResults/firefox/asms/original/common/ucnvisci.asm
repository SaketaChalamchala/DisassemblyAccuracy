; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\mozilla\intl\icu\source\common\ucnvisci.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	__ISCIIData_56
CONST	SEGMENT
_lookupInitialData DD 00H
	DD	080H
	DD	042H
	DD	01H
	DD	08H
	DD	043H
	DD	02H
	DD	040H
	DD	04bH
	DD	03H
	DD	020H
	DD	04aH
	DD	04H
	DD	010H
	DD	047H
	DD	05H
	DD	01H
	DD	044H
	DD	06H
	DD	04H
	DD	045H
	DD	07H
	DD	04H
	DD	048H
	DD	08H
	DD	02H
	DD	049H
	ORG $+4
_pnjMap	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	02H
	DB	00H
	DB	02H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	00H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	03H
	DB	03H
	DB	00H
	DB	03H
	DB	03H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	02H
	DB	00H
	DB	02H
	DB	02H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
_validityTable DB 00H
	DB	0f8H
	DB	0ffH
	DB	0ffH
	DB	080H
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0beH
	DB	09eH
	DB	0a0H
	DB	087H
	DB	0ffH
	DB	0ffH
	DB	0a0H
	DB	087H
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0feH
	DB	0feH
	DB	0feH
	DB	0ffH
	DB	0ffH
	DB	0feH
	DB	0ffH
	DB	0feH
	DB	0ffH
	DB	0ffH
	DB	0feH
	DB	0feH
	DB	0feH
	DB	0ffH
	DB	0ffH
	DB	0feH
	DB	0feH
	DB	0feH
	DB	0ffH
	DB	081H
	DB	0ffH
	DB	0feH
	DB	0feH
	DB	0feH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	083H
	DB	0ffH
	DB	0f7H
	DB	083H
	DB	0f7H
	DB	0feH
	DB	0bfH
	DB	0ffH
	DB	0ffH
	DB	00H
	DB	00H
	DB	0d8H
	DB	080H
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0beH
	DB	0acH
	DB	0a0H
	DB	087H
	DB	0ffH
	DB	0ffH
	DB	0a0H
	DB	087H
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	00H
	DB	00H
	DB	0a0H
	DB	080H
	DB	080H
	DB	080H
	DB	080H
	DB	04H
	DB	014H
	DB	01aH
	DB	080H
	DB	0c0H
	DB	0c0H
	DB	0c0H
	DB	0c8H
	DB	098H
	DB	0c0H
	DB	098H
	DB	0beH
	DB	09eH
	DB	088H
	DB	088H
	DB	080H
	DB	080H
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0c0H
	DB	00H
	ORG $+14
_fromUnicodeTable DW 0a0H
	DW	0a1H
	DW	0a2H
	DW	0a3H
	DW	0a4e0H
	DW	0a4H
	DW	0a5H
	DW	0a6H
	DW	0a7H
	DW	0a8H
	DW	0a9H
	DW	0aaH
	DW	0a6e9H
	DW	0aeH
	DW	0abH
	DW	0acH
	DW	0adH
	DW	0b2H
	DW	0afH
	DW	0b0H
	DW	0b1H
	DW	0b3H
	DW	0b4H
	DW	0b5H
	DW	0b6H
	DW	0b7H
	DW	0b8H
	DW	0b9H
	DW	0baH
	DW	0bbH
	DW	0bcH
	DW	0bdH
	DW	0beH
	DW	0bfH
	DW	0c0H
	DW	0c1H
	DW	0c2H
	DW	0c3H
	DW	0c4H
	DW	0c5H
	DW	0c6H
	DW	0c7H
	DW	0c8H
	DW	0c9H
	DW	0caH
	DW	0cbH
	DW	0ccH
	DW	0cdH
	DW	0cfH
	DW	0d0H
	DW	0d1H
	DW	0d2H
	DW	0d3H
	DW	0d4H
	DW	0d5H
	DW	0d6H
	DW	0d7H
	DW	0d8H
	DW	0ffffH
	DW	0ffffH
	DW	0e9H
	DW	0eae9H
	DW	0daH
	DW	0dbH
	DW	0dcH
	DW	0ddH
	DW	0deH
	DW	0dfH
	DW	0dfe9H
	DW	0e3H
	DW	0e0H
	DW	0e1H
	DW	0e2H
	DW	0e7H
	DW	0e4H
	DW	0e5H
	DW	0e6H
	DW	0e8H
	DW	0ecH
	DW	0edH
	DW	0a1e9H
	DW	0ffffH
	DW	0f0b8H
	DW	0ffffH
	DW	0ffffH
	DW	0ffffH
	DW	0ffffH
	DW	0ffffH
	DW	0b3e9H
	DW	0b4e9H
	DW	0b5e9H
	DW	0bae9H
	DW	0bfe9H
	DW	0c0e9H
	DW	0c9e9H
	DW	0ceH
	DW	0aae9H
	DW	0a7e9H
	DW	0dbe9H
	DW	0dce9H
	DW	0eaH
	DW	0eaeaH
	DW	0f1H
	DW	0f2H
	DW	0f3H
	DW	0f4H
	DW	0f5H
	DW	0f6H
	DW	0f7H
	DW	0f8H
	DW	0f9H
	DW	0faH
	DW	0f0bfH
	DW	0ffffH
	DW	0ffffH
	DW	0ffffH
	DW	0ffffH
	DW	0ffffH
	DW	0ffffH
	DW	0ffffH
	DW	0ffffH
	DW	0ffffH
	DW	0ffffH
	DW	0ffffH
	DW	0ffffH
	DW	0ffffH
	DW	0ffffH
	DW	0ffffH
_toUnicodeTable DW 00H
	DW	01H
	DW	02H
	DW	03H
	DW	04H
	DW	05H
	DW	06H
	DW	07H
	DW	08H
	DW	09H
	DW	0aH
	DW	0bH
	DW	0cH
	DW	0dH
	DW	0eH
	DW	0fH
	DW	010H
	DW	011H
	DW	012H
	DW	013H
	DW	014H
	DW	015H
	DW	016H
	DW	017H
	DW	018H
	DW	019H
	DW	01aH
	DW	01bH
	DW	01cH
	DW	01dH
	DW	01eH
	DW	01fH
	DW	020H
	DW	021H
	DW	022H
	DW	023H
	DW	024H
	DW	025H
	DW	026H
	DW	027H
	DW	028H
	DW	029H
	DW	02aH
	DW	02bH
	DW	02cH
	DW	02dH
	DW	02eH
	DW	02fH
	DW	030H
	DW	031H
	DW	032H
	DW	033H
	DW	034H
	DW	035H
	DW	036H
	DW	037H
	DW	038H
	DW	039H
	DW	03aH
	DW	03bH
	DW	03cH
	DW	03dH
	DW	03eH
	DW	03fH
	DW	040H
	DW	041H
	DW	042H
	DW	043H
	DW	044H
	DW	045H
	DW	046H
	DW	047H
	DW	048H
	DW	049H
	DW	04aH
	DW	04bH
	DW	04cH
	DW	04dH
	DW	04eH
	DW	04fH
	DW	050H
	DW	051H
	DW	052H
	DW	053H
	DW	054H
	DW	055H
	DW	056H
	DW	057H
	DW	058H
	DW	059H
	DW	05aH
	DW	05bH
	DW	05cH
	DW	05dH
	DW	05eH
	DW	05fH
	DW	060H
	DW	061H
	DW	062H
	DW	063H
	DW	064H
	DW	065H
	DW	066H
	DW	067H
	DW	068H
	DW	069H
	DW	06aH
	DW	06bH
	DW	06cH
	DW	06dH
	DW	06eH
	DW	06fH
	DW	070H
	DW	071H
	DW	072H
	DW	073H
	DW	074H
	DW	075H
	DW	076H
	DW	077H
	DW	078H
	DW	079H
	DW	07aH
	DW	07bH
	DW	07cH
	DW	07dH
	DW	07eH
	DW	07fH
	DW	080H
	DW	081H
	DW	082H
	DW	083H
	DW	084H
	DW	085H
	DW	086H
	DW	087H
	DW	088H
	DW	089H
	DW	08aH
	DW	08bH
	DW	08cH
	DW	08dH
	DW	08eH
	DW	08fH
	DW	090H
	DW	091H
	DW	092H
	DW	093H
	DW	094H
	DW	095H
	DW	096H
	DW	097H
	DW	098H
	DW	099H
	DW	09aH
	DW	09bH
	DW	09cH
	DW	09dH
	DW	09eH
	DW	09fH
	DW	0a0H
	DW	0901H
	DW	0902H
	DW	0903H
	DW	0905H
	DW	0906H
	DW	0907H
	DW	0908H
	DW	0909H
	DW	090aH
	DW	090bH
	DW	090eH
	DW	090fH
	DW	0910H
	DW	090dH
	DW	0912H
	DW	0913H
	DW	0914H
	DW	0911H
	DW	0915H
	DW	0916H
	DW	0917H
	DW	0918H
	DW	0919H
	DW	091aH
	DW	091bH
	DW	091cH
	DW	091dH
	DW	091eH
	DW	091fH
	DW	0920H
	DW	0921H
	DW	0922H
	DW	0923H
	DW	0924H
	DW	0925H
	DW	0926H
	DW	0927H
	DW	0928H
	DW	0929H
	DW	092aH
	DW	092bH
	DW	092cH
	DW	092dH
	DW	092eH
	DW	092fH
	DW	095fH
	DW	0930H
	DW	0931H
	DW	0932H
	DW	0933H
	DW	0934H
	DW	0935H
	DW	0936H
	DW	0937H
	DW	0938H
	DW	0939H
	DW	0200dH
	DW	093eH
	DW	093fH
	DW	0940H
	DW	0941H
	DW	0942H
	DW	0943H
	DW	0946H
	DW	0947H
	DW	0948H
	DW	0945H
	DW	094aH
	DW	094bH
	DW	094cH
	DW	0949H
	DW	094dH
	DW	093cH
	DW	0964H
	DW	0ffffH
	DW	0ffffH
	DW	0ffffH
	DW	0ffffH
	DW	0ffffH
	DW	0ffffH
	DW	0966H
	DW	0967H
	DW	0968H
	DW	0969H
	DW	096aH
	DW	096bH
	DW	096cH
	DW	096dH
	DW	096eH
	DW	096fH
	DW	0ffffH
	DW	0ffffH
	DW	0ffffH
	DW	0ffffH
	DW	0ffffH
_vowelSignESpecialCases DW 02H
	DW	00H
	DW	0a4H
	DW	0904H
_nuktaSpecialCases DW 010H
	DW	00H
	DW	0a6H
	DW	090cH
	DW	0eaH
	DW	093dH
	DW	0dfH
	DW	0944H
	DW	0a1H
	DW	0950H
	DW	0b3H
	DW	0958H
	DW	0b4H
	DW	0959H
	DW	0b5H
	DW	095aH
	DW	0baH
	DW	095bH
	DW	0bfH
	DW	095cH
	DW	0c0H
	DW	095dH
	DW	0c9H
	DW	095eH
	DW	0aaH
	DW	0960H
	DW	0a7H
	DW	0961H
	DW	0dbH
	DW	0962H
	DW	0dcH
	DW	0963H
_lookupTable DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	080H
	DW	01H
	DW	08H
	DW	05H
	DW	01H
	DW	06H
	DW	04H
	DW	01H
	DW	08H
	DW	04H
	DW	010H
	DW	07H
	DW	04H
	DW	08H
	DW	02H
	DW	03H
	DW	020H
	DW	02H
	DW	040H
__ISCIIImpl DD	019H
	DD	00H
	DD	00H
	DD	FLAT:__ISCIIOpen
	DD	FLAT:__ISCIIClose
	DD	FLAT:__ISCIIReset
	DD	FLAT:_UConverter_toUnicode_ISCII_OFFSETS_LOGIC
	DD	FLAT:_UConverter_toUnicode_ISCII_OFFSETS_LOGIC
	DD	FLAT:_UConverter_fromUnicode_ISCII_OFFSETS_LOGIC
	DD	FLAT:_UConverter_fromUnicode_ISCII_OFFSETS_LOGIC
	DD	00H
	DD	00H
	DD	FLAT:__ISCIIgetName
	DD	00H
	DD	FLAT:__ISCII_SafeClone
	DD	FLAT:__ISCIIGetUnicodeSet
	ORG $+8
__ISCIIStaticData DD 064H
	DB	'ISCII', 00H
	ORG $+54
	DD	00H
	DB	00H
	DB	019H
	DB	01H
	DB	04H
	DB	01aH
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+4
__ISCIIData_56 DD 0e4H
	DD	0ffffffffH
	DD	00H
	DD	FLAT:__ISCIIStaticData
	DB	00H
	DB	00H
	ORG $+2
	DD	FLAT:__ISCIIImpl
	DD	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+1
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	ORG $+126
	DD	00H
	DD	00H
	DD	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+1
	DW	00H
	ORG $+2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
CONST	ENDS
PUBLIC	??_C@_0P@KIBDDMGM@ISCII?0version?$DN?$AA@	; `string'
EXTRN	_uprv_free_56:PROC
EXTRN	_strlen:PROC
EXTRN	_strcpy:PROC
EXTRN	_uprv_malloc_56:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT ??_C@_0P@KIBDDMGM@ISCII?0version?$DN?$AA@
; File d:\mozilla\intl\icu\source\common\ucnvisci.c
CONST	SEGMENT
??_C@_0P@KIBDDMGM@ISCII?0version?$DN?$AA@ DB 'ISCII,version=', 00H ; `string'
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT __ISCIIOpen
_TEXT	SEGMENT
tv86 = -220						; size = 4
_converterData$10503 = -20				; size = 4
_len$10502 = -8						; size = 4
_cnv$ = 8						; size = 4
_pArgs$ = 12						; size = 4
_errorCode$ = 16					; size = 4
__ISCIIOpen PROC					; COMDAT
; Line 188
	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 189
	mov	eax, DWORD PTR _pArgs$[ebp]
	movsx	ecx, BYTE PTR [eax+8]
	test	ecx, ecx
	je	SHORT $LN5@ISCIIOpen
; Line 190
	jmp	$LN6@ISCIIOpen
$LN5@ISCIIOpen:
; Line 193
	push	48					; 00000030H
	call	_uprv_malloc_56
	add	esp, 4
	mov	ecx, DWORD PTR _cnv$[ebp]
	mov	DWORD PTR [ecx+8], eax
; Line 195
	mov	eax, DWORD PTR _cnv$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	$LN4@ISCIIOpen
; Line 196
	mov	DWORD PTR _len$10502[ebp], 0
; Line 198
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _converterData$10503[ebp], ecx
; Line 199
	mov	eax, 65534				; 0000fffeH
	mov	ecx, DWORD PTR _converterData$10503[ebp]
	mov	WORD PTR [ecx], ax
; Line 200
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	DWORD PTR [eax+44], 65535		; 0000ffffH
; Line 201
	xor	eax, eax
	mov	ecx, DWORD PTR _converterData$10503[ebp]
	mov	WORD PTR [ecx+2], ax
; Line 202
	mov	eax, DWORD PTR _converterData$10503[ebp]
	mov	BYTE PTR [eax+25], 0
; Line 204
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	and	ecx, 15					; 0000000fH
	cmp	ecx, 9
	jae	$LN3@ISCIIOpen
; Line 208
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	and	ecx, 15					; 0000000fH
	imul	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _lookupInitialData[ecx]
	shl	edx, 7
	mov	DWORD PTR tv86[ebp], edx
	mov	eax, DWORD PTR _converterData$10503[ebp]
	mov	cx, WORD PTR tv86[ebp]
	mov	WORD PTR [eax+4], cx
	mov	edx, DWORD PTR _converterData$10503[ebp]
	mov	ax, WORD PTR tv86[ebp]
	mov	WORD PTR [edx+8], ax
	mov	ecx, DWORD PTR _converterData$10503[ebp]
	mov	dx, WORD PTR tv86[ebp]
	mov	WORD PTR [ecx+6], dx
; Line 212
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	and	ecx, 15					; 0000000fH
	imul	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _converterData$10503[ebp]
	mov	eax, DWORD PTR _lookupInitialData[ecx+4]
	mov	DWORD PTR [edx+20], eax
	mov	ecx, DWORD PTR _converterData$10503[ebp]
	mov	edx, DWORD PTR _converterData$10503[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR [ecx+16], eax
	mov	ecx, DWORD PTR _converterData$10503[ebp]
	mov	edx, DWORD PTR _converterData$10503[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR [ecx+12], eax
; Line 214
	mov	eax, DWORD PTR _converterData$10503[ebp]
	mov	BYTE PTR [eax+24], 1
; Line 215
	push	OFFSET ??_C@_0P@KIBDDMGM@ISCII?0version?$DN?$AA@
	mov	eax, DWORD PTR _converterData$10503[ebp]
	add	eax, 26					; 0000001aH
	push	eax
	call	_strcpy
	add	esp, 8
; Line 216
	mov	eax, DWORD PTR _converterData$10503[ebp]
	add	eax, 26					; 0000001aH
	push	eax
	call	_strlen
	add	esp, 4
	mov	DWORD PTR _len$10502[ebp], eax
; Line 217
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	and	ecx, 15					; 0000000fH
	add	ecx, 48					; 00000030H
	mov	edx, DWORD PTR _converterData$10503[ebp]
	add	edx, DWORD PTR _len$10502[ebp]
	mov	BYTE PTR [edx+26], cl
; Line 218
	mov	eax, DWORD PTR _converterData$10503[ebp]
	add	eax, DWORD PTR _len$10502[ebp]
	mov	BYTE PTR [eax+27], 0
; Line 220
	mov	eax, DWORD PTR _converterData$10503[ebp]
	mov	DWORD PTR [eax+44], 0
; Line 221
	jmp	SHORT $LN2@ISCIIOpen
$LN3@ISCIIOpen:
; Line 222
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_uprv_free_56
	add	esp, 4
; Line 223
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 224
	mov	eax, DWORD PTR _errorCode$[ebp]
	mov	DWORD PTR [eax], 1
$LN2@ISCIIOpen:
; Line 227
	jmp	SHORT $LN6@ISCIIOpen
$LN4@ISCIIOpen:
; Line 228
	mov	eax, DWORD PTR _errorCode$[ebp]
	mov	DWORD PTR [eax], 7
$LN6@ISCIIOpen:
; Line 230
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__ISCIIOpen ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __ISCIIClose
_TEXT	SEGMENT
_cnv$ = 8						; size = 4
__ISCIIClose PROC					; COMDAT
; Line 232
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 233
	mov	eax, DWORD PTR _cnv$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN3@ISCIIClose
; Line 234
	mov	eax, DWORD PTR _cnv$[ebp]
	movsx	ecx, BYTE PTR [eax+34]
	test	ecx, ecx
	jne	SHORT $LN1@ISCIIClose
; Line 235
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_uprv_free_56
	add	esp, 4
$LN1@ISCIIClose:
; Line 237
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	DWORD PTR [eax+8], 0
$LN3@ISCIIClose:
; Line 239
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__ISCIIClose ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __ISCIIgetName
_TEXT	SEGMENT
_myData$10527 = -8					; size = 4
_cnv$ = 8						; size = 4
__ISCIIgetName PROC					; COMDAT
; Line 241
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 242
	mov	eax, DWORD PTR _cnv$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN1@ISCIIgetNa
; Line 243
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _myData$10527[ebp], ecx
; Line 244
	mov	eax, DWORD PTR _myData$10527[ebp]
	add	eax, 26					; 0000001aH
	jmp	SHORT $LN2@ISCIIgetNa
$LN1@ISCIIgetNa:
; Line 246
	xor	eax, eax
$LN2@ISCIIgetNa:
; Line 247
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
__ISCIIgetName ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __ISCIIReset
_TEXT	SEGMENT
_data$ = -8						; size = 4
_cnv$ = 8						; size = 4
_choice$ = 12						; size = 4
__ISCIIReset PROC					; COMDAT
; Line 249
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 250
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _data$[ebp], ecx
; Line 251
	cmp	DWORD PTR _choice$[ebp], 1
	jg	SHORT $LN2@ISCIIReset
; Line 252
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	DWORD PTR [eax+44], 65535		; 0000ffffH
; Line 253
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	DWORD PTR [eax+48], 0
; Line 254
	mov	eax, DWORD PTR _data$[ebp]
	mov	ecx, DWORD PTR _data$[ebp]
	mov	dx, WORD PTR [ecx+4]
	mov	WORD PTR [eax+8], dx
; Line 255
	mov	eax, DWORD PTR _data$[ebp]
	mov	ecx, DWORD PTR _data$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+16], edx
; Line 256
	mov	eax, 65534				; 0000fffeH
	mov	ecx, DWORD PTR _data$[ebp]
	mov	WORD PTR [ecx], ax
; Line 257
	mov	eax, DWORD PTR _data$[ebp]
	mov	DWORD PTR [eax+44], 0
$LN2@ISCIIReset:
; Line 259
	cmp	DWORD PTR _choice$[ebp], 1
	je	SHORT $LN3@ISCIIReset
; Line 260
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	DWORD PTR [eax+56], 0
; Line 261
	xor	eax, eax
	mov	ecx, DWORD PTR _data$[ebp]
	mov	WORD PTR [ecx+2], ax
; Line 262
	mov	eax, DWORD PTR _data$[ebp]
	mov	ecx, DWORD PTR _data$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+12], edx
; Line 263
	mov	eax, DWORD PTR _data$[ebp]
	mov	ecx, DWORD PTR _data$[ebp]
	mov	dx, WORD PTR [ecx+4]
	mov	WORD PTR [eax+6], dx
; Line 264
	mov	eax, DWORD PTR _data$[ebp]
	mov	BYTE PTR [eax+24], 1
; Line 265
	mov	eax, DWORD PTR _data$[ebp]
	mov	BYTE PTR [eax+25], 0
$LN3@ISCIIReset:
; Line 267
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
__ISCIIReset ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _UConverter_fromUnicode_ISCII_OFFSETS_LOGIC
_TEXT	SEGMENT
tv343 = -424						; size = 4
_trail$10761 = -224					; size = 2
_offset$10729 = -212					; size = 4
_offset$10697 = -200					; size = 4
_offset$10667 = -188					; size = 4
_temp$10663 = -176					; size = 4
_offset$10607 = -164					; size = 4
_offset$10578 = -152					; size = 4
_deltaChanged$ = -137					; size = 1
_range$ = -128						; size = 2
_newDelta$ = -116					; size = 2
_converterData$ = -104					; size = 4
_tempContextFromUnicode$ = -92				; size = 4
_sourceChar$ = -80					; size = 4
_targetByteUnit$ = -68					; size = 4
_offsets$ = -56						; size = 4
_targetLimit$ = -44					; size = 4
_target$ = -32						; size = 4
_sourceLimit$ = -20					; size = 4
_source$ = -8						; size = 4
_args$ = 8						; size = 4
_err$ = 12						; size = 4
_UConverter_fromUnicode_ISCII_OFFSETS_LOGIC PROC	; COMDAT
; Line 891
	push	ebp
	mov	ebp, esp
	sub	esp, 424				; 000001a8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-424]
	mov	ecx, 106				; 0000006aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 892
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _source$[ebp], ecx
; Line 893
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _sourceLimit$[ebp], ecx
; Line 894
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _target$[ebp], ecx
; Line 895
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _targetLimit$[ebp], ecx
; Line 896
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR _offsets$[ebp], ecx
; Line 897
	mov	DWORD PTR _targetByteUnit$[ebp], 0
; Line 898
	mov	DWORD PTR _sourceChar$[ebp], 0
; Line 899
	mov	DWORD PTR _tempContextFromUnicode$[ebp], 0
; Line 901
	xor	eax, eax
	mov	WORD PTR _newDelta$[ebp], ax
; Line 902
	xor	eax, eax
	mov	WORD PTR _range$[ebp], ax
; Line 903
	mov	BYTE PTR _deltaChanged$[ebp], 0
; Line 905
	mov	eax, DWORD PTR _args$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN121@UConverter
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [eax+20]
	cmp	edx, DWORD PTR [ecx+16]
	jb	SHORT $LN121@UConverter
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [eax+12]
	cmp	edx, DWORD PTR [ecx+8]
	jae	SHORT $LN122@UConverter
$LN121@UConverter:
; Line 906
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 1
; Line 907
	jmp	$LN123@UConverter
$LN122@UConverter:
; Line 910
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _converterData$[ebp], edx
; Line 911
	mov	eax, DWORD PTR _converterData$[ebp]
	mov	cx, WORD PTR [eax+6]
	mov	WORD PTR _newDelta$[ebp], cx
; Line 912
	movzx	eax, WORD PTR _newDelta$[ebp]
	cdq
	and	edx, 127				; 0000007fH
	add	eax, edx
	sar	eax, 7
	mov	WORD PTR _range$[ebp], ax
; Line 914
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+56]
	mov	DWORD PTR _sourceChar$[ebp], edx
	cmp	DWORD PTR _sourceChar$[ebp], 0
	je	SHORT $LN119@UConverter
; Line 915
	jmp	$getTrail$10572
$LN119@UConverter:
; Line 919
	mov	eax, DWORD PTR _source$[ebp]
	cmp	eax, DWORD PTR _sourceLimit$[ebp]
	jae	$LN118@UConverter
; Line 921
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cmp	DWORD PTR [ecx+52], 10			; 0000000aH
	jne	$LN117@UConverter
; Line 922
	mov	DWORD PTR _targetByteUnit$[ebp], 61184	; 0000ef00H
; Line 923
	movzx	eax, WORD PTR _range$[ebp]
	imul	eax, 12					; 0000000cH
	movzx	ecx, BYTE PTR _lookupInitialData[eax+8]
	add	ecx, DWORD PTR _targetByteUnit$[ebp]
	mov	DWORD PTR _targetByteUnit$[ebp], ecx
; Line 924
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+52], 0
; Line 926
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _source$[ebp]
	sub	ecx, DWORD PTR [eax+8]
	sar	ecx, 1
	sub	ecx, 1
	mov	DWORD PTR _offset$10578[ebp], ecx
	mov	eax, DWORD PTR _target$[ebp]
	cmp	eax, DWORD PTR _targetLimit$[ebp]
	jae	$LN116@UConverter
	cmp	DWORD PTR _targetByteUnit$[ebp], 255	; 000000ffH
	ja	SHORT $LN115@UConverter
	mov	eax, DWORD PTR _target$[ebp]
	mov	cl, BYTE PTR _targetByteUnit$[ebp]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 1
	mov	DWORD PTR _target$[ebp], edx
	cmp	DWORD PTR _offsets$[ebp], 0
	je	SHORT $LN114@UConverter
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _offset$10578[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
$LN114@UConverter:
	jmp	$LN113@UConverter
$LN115@UConverter:
	cmp	DWORD PTR _targetByteUnit$[ebp], 65535	; 0000ffffH
	jbe	SHORT $LN112@UConverter
	mov	eax, DWORD PTR _targetByteUnit$[ebp]
	shr	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _target$[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 1
	mov	DWORD PTR _target$[ebp], edx
	cmp	DWORD PTR _offsets$[ebp], 0
	je	SHORT $LN112@UConverter
	mov	eax, DWORD PTR _offset$10578[ebp]
	sub	eax, 1
	mov	DWORD PTR _offset$10578[ebp], eax
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _offset$10578[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
$LN112@UConverter:
	mov	eax, DWORD PTR _target$[ebp]
	cmp	eax, DWORD PTR _targetLimit$[ebp]
	jb	SHORT $LN110@UConverter
	mov	eax, DWORD PTR _targetByteUnit$[ebp]
	shr	eax, 8
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	movsx	ecx, BYTE PTR [ecx+63]
	mov	BYTE PTR [edx+ecx+76], al
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	cl, BYTE PTR [eax+63]
	add	cl, 1
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax+63], cl
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+4]
	movsx	edx, BYTE PTR [eax+63]
	mov	al, BYTE PTR _targetByteUnit$[ebp]
	mov	BYTE PTR [ecx+edx+76], al
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	al, BYTE PTR [edx+63]
	add	al, 1
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx+63], al
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
	jmp	$LN113@UConverter
$LN110@UConverter:
	mov	eax, DWORD PTR _targetByteUnit$[ebp]
	shr	eax, 8
	mov	ecx, DWORD PTR _target$[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 1
	mov	DWORD PTR _target$[ebp], edx
	cmp	DWORD PTR _offsets$[ebp], 0
	je	SHORT $LN108@UConverter
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _offset$10578[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
$LN108@UConverter:
	mov	eax, DWORD PTR _target$[ebp]
	cmp	eax, DWORD PTR _targetLimit$[ebp]
	jae	SHORT $LN107@UConverter
	mov	eax, DWORD PTR _target$[ebp]
	mov	cl, BYTE PTR _targetByteUnit$[ebp]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 1
	mov	DWORD PTR _target$[ebp], edx
	cmp	DWORD PTR _offsets$[ebp], 0
	je	SHORT $LN106@UConverter
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _offset$10578[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
$LN106@UConverter:
	jmp	SHORT $LN113@UConverter
$LN107@UConverter:
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+4]
	movsx	edx, BYTE PTR [eax+63]
	mov	al, BYTE PTR _targetByteUnit$[ebp]
	mov	BYTE PTR [ecx+edx+76], al
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	al, BYTE PTR [edx+63]
	add	al, 1
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx+63], al
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
$LN113@UConverter:
	jmp	$LN104@UConverter
$LN116@UConverter:
	mov	eax, DWORD PTR _targetByteUnit$[ebp]
	and	eax, 16711680				; 00ff0000H
	je	SHORT $LN103@UConverter
	mov	eax, DWORD PTR _targetByteUnit$[ebp]
	shr	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	movsx	ecx, BYTE PTR [ecx+63]
	mov	BYTE PTR [edx+ecx+76], al
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	cl, BYTE PTR [eax+63]
	add	cl, 1
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax+63], cl
$LN103@UConverter:
	mov	eax, DWORD PTR _targetByteUnit$[ebp]
	and	eax, 65280				; 0000ff00H
	je	SHORT $LN102@UConverter
	mov	eax, DWORD PTR _targetByteUnit$[ebp]
	shr	eax, 8
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	movsx	ecx, BYTE PTR [ecx+63]
	mov	BYTE PTR [edx+ecx+76], al
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	cl, BYTE PTR [eax+63]
	add	cl, 1
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax+63], cl
$LN102@UConverter:
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+4]
	movsx	edx, BYTE PTR [eax+63]
	mov	al, BYTE PTR _targetByteUnit$[ebp]
	mov	BYTE PTR [ecx+edx+76], al
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	al, BYTE PTR [edx+63]
	add	al, 1
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx+63], al
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
$LN104@UConverter:
; Line 927
	mov	eax, DWORD PTR _err$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN117@UConverter
; Line 928
	jmp	$LN118@UConverter
$LN117@UConverter:
; Line 932
	mov	eax, DWORD PTR _source$[ebp]
	movzx	ecx, WORD PTR [eax]
	mov	DWORD PTR _sourceChar$[ebp], ecx
	mov	edx, DWORD PTR _source$[ebp]
	add	edx, 2
	mov	DWORD PTR _source$[ebp], edx
; Line 933
	mov	eax, DWORD PTR _converterData$[ebp]
	movzx	ecx, WORD PTR [eax+2]
	mov	DWORD PTR _tempContextFromUnicode$[ebp], ecx
; Line 935
	mov	DWORD PTR _targetByteUnit$[ebp], 65535	; 0000ffffH
; Line 938
	cmp	DWORD PTR _sourceChar$[ebp], 160	; 000000a0H
	jg	$LN100@UConverter
; Line 939
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _sourceChar$[ebp]
	mov	DWORD PTR [ecx+52], edx
; Line 940
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _source$[ebp]
	sub	ecx, DWORD PTR [eax+8]
	sar	ecx, 1
	sub	ecx, 1
	mov	DWORD PTR _offset$10607[ebp], ecx
	mov	eax, DWORD PTR _target$[ebp]
	cmp	eax, DWORD PTR _targetLimit$[ebp]
	jae	$LN99@UConverter
	cmp	DWORD PTR _sourceChar$[ebp], 255	; 000000ffH
	jg	SHORT $LN98@UConverter
	mov	eax, DWORD PTR _target$[ebp]
	mov	cl, BYTE PTR _sourceChar$[ebp]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 1
	mov	DWORD PTR _target$[ebp], edx
	cmp	DWORD PTR _offsets$[ebp], 0
	je	SHORT $LN97@UConverter
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _offset$10607[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
$LN97@UConverter:
	jmp	$LN96@UConverter
$LN98@UConverter:
	cmp	DWORD PTR _sourceChar$[ebp], 65535	; 0000ffffH
	jle	SHORT $LN95@UConverter
	mov	eax, DWORD PTR _sourceChar$[ebp]
	sar	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _target$[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 1
	mov	DWORD PTR _target$[ebp], edx
	cmp	DWORD PTR _offsets$[ebp], 0
	je	SHORT $LN95@UConverter
	mov	eax, DWORD PTR _offset$10607[ebp]
	sub	eax, 1
	mov	DWORD PTR _offset$10607[ebp], eax
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _offset$10607[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
$LN95@UConverter:
	mov	eax, DWORD PTR _target$[ebp]
	cmp	eax, DWORD PTR _targetLimit$[ebp]
	jb	SHORT $LN93@UConverter
	mov	eax, DWORD PTR _sourceChar$[ebp]
	sar	eax, 8
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	movsx	ecx, BYTE PTR [ecx+63]
	mov	BYTE PTR [edx+ecx+76], al
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	cl, BYTE PTR [eax+63]
	add	cl, 1
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax+63], cl
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+4]
	movsx	edx, BYTE PTR [eax+63]
	mov	al, BYTE PTR _sourceChar$[ebp]
	mov	BYTE PTR [ecx+edx+76], al
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	al, BYTE PTR [edx+63]
	add	al, 1
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx+63], al
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
	jmp	$LN96@UConverter
$LN93@UConverter:
	mov	eax, DWORD PTR _sourceChar$[ebp]
	sar	eax, 8
	mov	ecx, DWORD PTR _target$[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 1
	mov	DWORD PTR _target$[ebp], edx
	cmp	DWORD PTR _offsets$[ebp], 0
	je	SHORT $LN91@UConverter
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _offset$10607[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
$LN91@UConverter:
	mov	eax, DWORD PTR _target$[ebp]
	cmp	eax, DWORD PTR _targetLimit$[ebp]
	jae	SHORT $LN90@UConverter
	mov	eax, DWORD PTR _target$[ebp]
	mov	cl, BYTE PTR _sourceChar$[ebp]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 1
	mov	DWORD PTR _target$[ebp], edx
	cmp	DWORD PTR _offsets$[ebp], 0
	je	SHORT $LN89@UConverter
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _offset$10607[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
$LN89@UConverter:
	jmp	SHORT $LN96@UConverter
$LN90@UConverter:
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+4]
	movsx	edx, BYTE PTR [eax+63]
	mov	al, BYTE PTR _sourceChar$[ebp]
	mov	BYTE PTR [ecx+edx+76], al
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	al, BYTE PTR [edx+63]
	add	al, 1
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx+63], al
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
$LN96@UConverter:
	jmp	$LN87@UConverter
$LN99@UConverter:
	mov	eax, DWORD PTR _sourceChar$[ebp]
	and	eax, 16711680				; 00ff0000H
	je	SHORT $LN86@UConverter
	mov	eax, DWORD PTR _sourceChar$[ebp]
	sar	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	movsx	ecx, BYTE PTR [ecx+63]
	mov	BYTE PTR [edx+ecx+76], al
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	cl, BYTE PTR [eax+63]
	add	cl, 1
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax+63], cl
$LN86@UConverter:
	mov	eax, DWORD PTR _sourceChar$[ebp]
	and	eax, 65280				; 0000ff00H
	je	SHORT $LN85@UConverter
	mov	eax, DWORD PTR _sourceChar$[ebp]
	sar	eax, 8
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	movsx	ecx, BYTE PTR [ecx+63]
	mov	BYTE PTR [edx+ecx+76], al
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	cl, BYTE PTR [eax+63]
	add	cl, 1
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax+63], cl
$LN85@UConverter:
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+4]
	movsx	edx, BYTE PTR [eax+63]
	mov	al, BYTE PTR _sourceChar$[ebp]
	mov	BYTE PTR [ecx+edx+76], al
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	al, BYTE PTR [edx+63]
	add	al, 1
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx+63], al
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
$LN87@UConverter:
; Line 941
	mov	eax, DWORD PTR _err$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN84@UConverter
; Line 942
	jmp	$LN118@UConverter
$LN84@UConverter:
; Line 944
	jmp	$LN119@UConverter
$LN100@UConverter:
; Line 946
	mov	eax, DWORD PTR _sourceChar$[ebp]
	mov	DWORD PTR tv343[ebp], eax
	cmp	DWORD PTR tv343[ebp], 8204		; 0000200cH
	je	SHORT $LN81@UConverter
	cmp	DWORD PTR tv343[ebp], 8205		; 0000200dH
	je	SHORT $LN78@UConverter
	jmp	SHORT $LN75@UConverter
$LN81@UConverter:
; Line 949
	mov	eax, DWORD PTR _converterData$[ebp]
	movzx	ecx, WORD PTR [eax+2]
	test	ecx, ecx
	je	SHORT $LN80@UConverter
; Line 950
	xor	eax, eax
	mov	ecx, DWORD PTR _converterData$[ebp]
	mov	WORD PTR [ecx+2], ax
; Line 951
	mov	DWORD PTR _targetByteUnit$[ebp], 232	; 000000e8H
; Line 952
	jmp	SHORT $LN79@UConverter
$LN80@UConverter:
; Line 954
	xor	eax, eax
	mov	ecx, DWORD PTR _converterData$[ebp]
	mov	WORD PTR [ecx+2], ax
; Line 955
	jmp	$LN119@UConverter
$LN79@UConverter:
; Line 957
	jmp	$LN82@UConverter
$LN78@UConverter:
; Line 960
	mov	eax, DWORD PTR _converterData$[ebp]
	movzx	ecx, WORD PTR [eax+2]
	test	ecx, ecx
	je	SHORT $LN77@UConverter
; Line 961
	mov	DWORD PTR _targetByteUnit$[ebp], 233	; 000000e9H
; Line 962
	jmp	SHORT $LN76@UConverter
$LN77@UConverter:
; Line 963
	mov	DWORD PTR _targetByteUnit$[ebp], 217	; 000000d9H
$LN76@UConverter:
; Line 965
	xor	eax, eax
	mov	ecx, DWORD PTR _converterData$[ebp]
	mov	WORD PTR [ecx+2], ax
; Line 966
	jmp	$LN82@UConverter
$LN75@UConverter:
; Line 969
	mov	eax, 3455				; 00000d7fH
	sub	eax, DWORD PTR _sourceChar$[ebp]
	movzx	ecx, ax
	cmp	ecx, 1151				; 0000047fH
	jg	$LN74@UConverter
; Line 974
	cmp	DWORD PTR _sourceChar$[ebp], 2404	; 00000964H
	je	$LN73@UConverter
	cmp	DWORD PTR _sourceChar$[ebp], 2405	; 00000965H
	je	$LN73@UConverter
; Line 976
	mov	eax, DWORD PTR _sourceChar$[ebp]
	sub	eax, 2304				; 00000900H
	cdq
	and	edx, 127				; 0000007fH
	add	eax, edx
	sar	eax, 7
	mov	WORD PTR _range$[ebp], ax
; Line 977
	movzx	eax, WORD PTR _range$[ebp]
	shl	eax, 7
	mov	WORD PTR _newDelta$[ebp], ax
; Line 980
	movzx	eax, WORD PTR _newDelta$[ebp]
	mov	ecx, DWORD PTR _converterData$[ebp]
	movzx	edx, WORD PTR [ecx+6]
	cmp	eax, edx
	jne	SHORT $LN71@UConverter
	mov	eax, DWORD PTR _converterData$[ebp]
	movsx	ecx, BYTE PTR [eax+24]
	test	ecx, ecx
	je	SHORT $LN72@UConverter
$LN71@UConverter:
; Line 981
	mov	eax, DWORD PTR _converterData$[ebp]
	mov	cx, WORD PTR _newDelta$[ebp]
	mov	WORD PTR [eax+6], cx
; Line 982
	movzx	eax, WORD PTR _range$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _converterData$[ebp]
	mov	edx, DWORD PTR _lookupInitialData[eax+4]
	mov	DWORD PTR [ecx+12], edx
; Line 983
	mov	BYTE PTR _deltaChanged$[ebp], 1
; Line 984
	mov	eax, DWORD PTR _converterData$[ebp]
	mov	BYTE PTR [eax+24], 0
$LN72@UConverter:
; Line 987
	mov	eax, DWORD PTR _converterData$[ebp]
	movzx	ecx, WORD PTR [eax+6]
	cmp	ecx, 256				; 00000100H
	jne	SHORT $LN70@UConverter
; Line 988
	cmp	DWORD PTR _sourceChar$[ebp], 2672	; 00000a70H
	jne	SHORT $LN69@UConverter
; Line 990
	mov	DWORD PTR _sourceChar$[ebp], 2562	; 00000a02H
	jmp	SHORT $LN70@UConverter
$LN69@UConverter:
; Line 991
	cmp	DWORD PTR _sourceChar$[ebp], 2673	; 00000a71H
	jne	SHORT $LN70@UConverter
; Line 993
	mov	eax, 2673				; 00000a71H
	mov	ecx, DWORD PTR _converterData$[ebp]
	mov	WORD PTR [ecx+2], ax
$LN70@UConverter:
; Line 999
	mov	eax, DWORD PTR _converterData$[ebp]
	movzx	ecx, WORD PTR [eax+6]
	mov	edx, DWORD PTR _sourceChar$[ebp]
	sub	edx, ecx
	mov	DWORD PTR _sourceChar$[ebp], edx
$LN73@UConverter:
; Line 1003
	movzx	eax, BYTE PTR _sourceChar$[ebp]
	movzx	ecx, WORD PTR _fromUnicodeTable[eax*2]
	mov	DWORD PTR _targetByteUnit$[ebp], ecx
; Line 1006
	movzx	eax, BYTE PTR _sourceChar$[ebp]
	movzx	ecx, BYTE PTR _validityTable[eax]
	mov	edx, DWORD PTR _converterData$[ebp]
	and	ecx, DWORD PTR [edx+12]
	jne	SHORT $LN66@UConverter
; Line 1008
	mov	eax, DWORD PTR _converterData$[ebp]
	movzx	ecx, WORD PTR [eax+6]
	cmp	ecx, 768				; 00000300H
	jne	SHORT $LN64@UConverter
	cmp	DWORD PTR _sourceChar$[ebp], 2353	; 00000931H
	je	SHORT $LN66@UConverter
$LN64@UConverter:
; Line 1009
	mov	DWORD PTR _targetByteUnit$[ebp], 65535	; 0000ffffH
$LN66@UConverter:
; Line 1013
	movsx	eax, BYTE PTR _deltaChanged$[ebp]
	test	eax, eax
	je	$LN63@UConverter
; Line 1017
	mov	DWORD PTR _temp$10663[ebp], 0
; Line 1018
	mov	DWORD PTR _temp$10663[ebp], 61184	; 0000ef00H
; Line 1019
	movzx	eax, WORD PTR _range$[ebp]
	imul	eax, 12					; 0000000cH
	movzx	ecx, BYTE PTR _lookupInitialData[eax+8]
	add	ecx, DWORD PTR _temp$10663[ebp]
	mov	DWORD PTR _temp$10663[ebp], ecx
; Line 1021
	mov	BYTE PTR _deltaChanged$[ebp], 0
; Line 1023
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _source$[ebp]
	sub	ecx, DWORD PTR [eax+8]
	sar	ecx, 1
	sub	ecx, 1
	mov	DWORD PTR _offset$10667[ebp], ecx
	mov	eax, DWORD PTR _target$[ebp]
	cmp	eax, DWORD PTR _targetLimit$[ebp]
	jae	$LN62@UConverter
	cmp	DWORD PTR _temp$10663[ebp], 255		; 000000ffH
	ja	SHORT $LN61@UConverter
	mov	eax, DWORD PTR _target$[ebp]
	mov	cl, BYTE PTR _temp$10663[ebp]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 1
	mov	DWORD PTR _target$[ebp], edx
	cmp	DWORD PTR _offsets$[ebp], 0
	je	SHORT $LN60@UConverter
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _offset$10667[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
$LN60@UConverter:
	jmp	$LN59@UConverter
$LN61@UConverter:
	cmp	DWORD PTR _temp$10663[ebp], 65535	; 0000ffffH
	jbe	SHORT $LN58@UConverter
	mov	eax, DWORD PTR _temp$10663[ebp]
	shr	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _target$[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 1
	mov	DWORD PTR _target$[ebp], edx
	cmp	DWORD PTR _offsets$[ebp], 0
	je	SHORT $LN58@UConverter
	mov	eax, DWORD PTR _offset$10667[ebp]
	sub	eax, 1
	mov	DWORD PTR _offset$10667[ebp], eax
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _offset$10667[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
$LN58@UConverter:
	mov	eax, DWORD PTR _target$[ebp]
	cmp	eax, DWORD PTR _targetLimit$[ebp]
	jb	SHORT $LN56@UConverter
	mov	eax, DWORD PTR _temp$10663[ebp]
	shr	eax, 8
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	movsx	ecx, BYTE PTR [ecx+63]
	mov	BYTE PTR [edx+ecx+76], al
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	cl, BYTE PTR [eax+63]
	add	cl, 1
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax+63], cl
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+4]
	movsx	edx, BYTE PTR [eax+63]
	mov	al, BYTE PTR _temp$10663[ebp]
	mov	BYTE PTR [ecx+edx+76], al
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	al, BYTE PTR [edx+63]
	add	al, 1
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx+63], al
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
	jmp	$LN59@UConverter
$LN56@UConverter:
	mov	eax, DWORD PTR _temp$10663[ebp]
	shr	eax, 8
	mov	ecx, DWORD PTR _target$[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 1
	mov	DWORD PTR _target$[ebp], edx
	cmp	DWORD PTR _offsets$[ebp], 0
	je	SHORT $LN54@UConverter
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _offset$10667[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
$LN54@UConverter:
	mov	eax, DWORD PTR _target$[ebp]
	cmp	eax, DWORD PTR _targetLimit$[ebp]
	jae	SHORT $LN53@UConverter
	mov	eax, DWORD PTR _target$[ebp]
	mov	cl, BYTE PTR _temp$10663[ebp]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 1
	mov	DWORD PTR _target$[ebp], edx
	cmp	DWORD PTR _offsets$[ebp], 0
	je	SHORT $LN52@UConverter
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _offset$10667[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
$LN52@UConverter:
	jmp	SHORT $LN59@UConverter
$LN53@UConverter:
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+4]
	movsx	edx, BYTE PTR [eax+63]
	mov	al, BYTE PTR _temp$10663[ebp]
	mov	BYTE PTR [ecx+edx+76], al
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	al, BYTE PTR [edx+63]
	add	al, 1
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx+63], al
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
$LN59@UConverter:
	jmp	$LN50@UConverter
$LN62@UConverter:
	mov	eax, DWORD PTR _temp$10663[ebp]
	and	eax, 16711680				; 00ff0000H
	je	SHORT $LN49@UConverter
	mov	eax, DWORD PTR _temp$10663[ebp]
	shr	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	movsx	ecx, BYTE PTR [ecx+63]
	mov	BYTE PTR [edx+ecx+76], al
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	cl, BYTE PTR [eax+63]
	add	cl, 1
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax+63], cl
$LN49@UConverter:
	mov	eax, DWORD PTR _temp$10663[ebp]
	and	eax, 65280				; 0000ff00H
	je	SHORT $LN48@UConverter
	mov	eax, DWORD PTR _temp$10663[ebp]
	shr	eax, 8
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	movsx	ecx, BYTE PTR [ecx+63]
	mov	BYTE PTR [edx+ecx+76], al
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	cl, BYTE PTR [eax+63]
	add	cl, 1
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax+63], cl
$LN48@UConverter:
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+4]
	movsx	edx, BYTE PTR [eax+63]
	mov	al, BYTE PTR _temp$10663[ebp]
	mov	BYTE PTR [ecx+edx+76], al
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	al, BYTE PTR [edx+63]
	add	al, 1
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx+63], al
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
$LN50@UConverter:
; Line 1024
	mov	eax, DWORD PTR _err$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN63@UConverter
; Line 1025
	jmp	SHORT $LN82@UConverter
$LN63@UConverter:
; Line 1029
	mov	eax, DWORD PTR _converterData$[ebp]
	movzx	ecx, WORD PTR [eax+6]
	cmp	ecx, 256				; 00000100H
	jne	SHORT $LN74@UConverter
	mov	eax, DWORD PTR _sourceChar$[ebp]
	add	eax, 256				; 00000100H
	cmp	eax, 2673				; 00000a71H
	jne	SHORT $LN74@UConverter
; Line 1030
	jmp	$LN119@UConverter
$LN74@UConverter:
; Line 1034
	xor	eax, eax
	mov	ecx, DWORD PTR _converterData$[ebp]
	mov	WORD PTR [ecx+2], ax
$LN82@UConverter:
; Line 1037
	mov	eax, DWORD PTR _converterData$[ebp]
	movzx	ecx, WORD PTR [eax+6]
	cmp	ecx, 256				; 00000100H
	jne	$LN45@UConverter
	cmp	DWORD PTR _tempContextFromUnicode$[ebp], 2673 ; 00000a71H
	jne	$LN45@UConverter
	mov	eax, DWORD PTR _sourceChar$[ebp]
	add	eax, 256				; 00000100H
	push	eax
	call	_isPNJConsonant
	add	esp, 4
	movsx	ecx, al
	test	ecx, ecx
	je	$LN45@UConverter
; Line 1040
	xor	eax, eax
	mov	ecx, DWORD PTR _converterData$[ebp]
	mov	WORD PTR [ecx+2], ax
; Line 1041
	mov	eax, DWORD PTR _targetByteUnit$[ebp]
	shl	eax, 16					; 00000010H
	or	eax, 59392				; 0000e800H
	or	eax, DWORD PTR _targetByteUnit$[ebp]
	mov	DWORD PTR _targetByteUnit$[ebp], eax
; Line 1043
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _source$[ebp]
	sub	ecx, DWORD PTR [eax+8]
	sar	ecx, 1
	sub	ecx, 1
	mov	DWORD PTR _offset$10697[ebp], ecx
	mov	eax, DWORD PTR _target$[ebp]
	cmp	eax, DWORD PTR _targetLimit$[ebp]
	jae	$LN44@UConverter
	cmp	DWORD PTR _targetByteUnit$[ebp], 255	; 000000ffH
	ja	SHORT $LN43@UConverter
	mov	eax, DWORD PTR _target$[ebp]
	mov	cl, BYTE PTR _targetByteUnit$[ebp]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 1
	mov	DWORD PTR _target$[ebp], edx
	cmp	DWORD PTR _offsets$[ebp], 0
	je	SHORT $LN42@UConverter
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _offset$10697[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
$LN42@UConverter:
	jmp	$LN41@UConverter
$LN43@UConverter:
	cmp	DWORD PTR _targetByteUnit$[ebp], 65535	; 0000ffffH
	jbe	SHORT $LN40@UConverter
	mov	eax, DWORD PTR _targetByteUnit$[ebp]
	shr	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _target$[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 1
	mov	DWORD PTR _target$[ebp], edx
	cmp	DWORD PTR _offsets$[ebp], 0
	je	SHORT $LN40@UConverter
	mov	eax, DWORD PTR _offset$10697[ebp]
	sub	eax, 1
	mov	DWORD PTR _offset$10697[ebp], eax
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _offset$10697[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
$LN40@UConverter:
	mov	eax, DWORD PTR _target$[ebp]
	cmp	eax, DWORD PTR _targetLimit$[ebp]
	jb	SHORT $LN38@UConverter
	mov	eax, DWORD PTR _targetByteUnit$[ebp]
	shr	eax, 8
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	movsx	ecx, BYTE PTR [ecx+63]
	mov	BYTE PTR [edx+ecx+76], al
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	cl, BYTE PTR [eax+63]
	add	cl, 1
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax+63], cl
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+4]
	movsx	edx, BYTE PTR [eax+63]
	mov	al, BYTE PTR _targetByteUnit$[ebp]
	mov	BYTE PTR [ecx+edx+76], al
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	al, BYTE PTR [edx+63]
	add	al, 1
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx+63], al
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
	jmp	$LN41@UConverter
$LN38@UConverter:
	mov	eax, DWORD PTR _targetByteUnit$[ebp]
	shr	eax, 8
	mov	ecx, DWORD PTR _target$[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 1
	mov	DWORD PTR _target$[ebp], edx
	cmp	DWORD PTR _offsets$[ebp], 0
	je	SHORT $LN36@UConverter
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _offset$10697[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
$LN36@UConverter:
	mov	eax, DWORD PTR _target$[ebp]
	cmp	eax, DWORD PTR _targetLimit$[ebp]
	jae	SHORT $LN35@UConverter
	mov	eax, DWORD PTR _target$[ebp]
	mov	cl, BYTE PTR _targetByteUnit$[ebp]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 1
	mov	DWORD PTR _target$[ebp], edx
	cmp	DWORD PTR _offsets$[ebp], 0
	je	SHORT $LN34@UConverter
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _offset$10697[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
$LN34@UConverter:
	jmp	SHORT $LN41@UConverter
$LN35@UConverter:
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+4]
	movsx	edx, BYTE PTR [eax+63]
	mov	al, BYTE PTR _targetByteUnit$[ebp]
	mov	BYTE PTR [ecx+edx+76], al
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	al, BYTE PTR [edx+63]
	add	al, 1
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx+63], al
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
$LN41@UConverter:
	jmp	$LN32@UConverter
$LN44@UConverter:
	mov	eax, DWORD PTR _targetByteUnit$[ebp]
	and	eax, 16711680				; 00ff0000H
	je	SHORT $LN31@UConverter
	mov	eax, DWORD PTR _targetByteUnit$[ebp]
	shr	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	movsx	ecx, BYTE PTR [ecx+63]
	mov	BYTE PTR [edx+ecx+76], al
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	cl, BYTE PTR [eax+63]
	add	cl, 1
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax+63], cl
$LN31@UConverter:
	mov	eax, DWORD PTR _targetByteUnit$[ebp]
	and	eax, 65280				; 0000ff00H
	je	SHORT $LN30@UConverter
	mov	eax, DWORD PTR _targetByteUnit$[ebp]
	shr	eax, 8
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	movsx	ecx, BYTE PTR [ecx+63]
	mov	BYTE PTR [edx+ecx+76], al
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	cl, BYTE PTR [eax+63]
	add	cl, 1
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax+63], cl
$LN30@UConverter:
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+4]
	movsx	edx, BYTE PTR [eax+63]
	mov	al, BYTE PTR _targetByteUnit$[ebp]
	mov	BYTE PTR [ecx+edx+76], al
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	al, BYTE PTR [edx+63]
	add	al, 1
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx+63], al
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
$LN32@UConverter:
; Line 1044
	mov	eax, DWORD PTR _err$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN29@UConverter
; Line 1045
	jmp	$LN118@UConverter
$LN29@UConverter:
; Line 1046
	jmp	$LN28@UConverter
$LN45@UConverter:
; Line 1047
	cmp	DWORD PTR _targetByteUnit$[ebp], 65535	; 0000ffffH
	je	$LN27@UConverter
; Line 1048
	cmp	DWORD PTR _targetByteUnit$[ebp], 232	; 000000e8H
	jne	SHORT $LN26@UConverter
; Line 1049
	mov	eax, DWORD PTR _converterData$[ebp]
	mov	cx, WORD PTR _targetByteUnit$[ebp]
	mov	WORD PTR [eax+2], cx
$LN26@UConverter:
; Line 1052
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _source$[ebp]
	sub	ecx, DWORD PTR [eax+8]
	sar	ecx, 1
	sub	ecx, 1
	mov	DWORD PTR _offset$10729[ebp], ecx
	mov	eax, DWORD PTR _target$[ebp]
	cmp	eax, DWORD PTR _targetLimit$[ebp]
	jae	$LN25@UConverter
	cmp	DWORD PTR _targetByteUnit$[ebp], 255	; 000000ffH
	ja	SHORT $LN24@UConverter
	mov	eax, DWORD PTR _target$[ebp]
	mov	cl, BYTE PTR _targetByteUnit$[ebp]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 1
	mov	DWORD PTR _target$[ebp], edx
	cmp	DWORD PTR _offsets$[ebp], 0
	je	SHORT $LN23@UConverter
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _offset$10729[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
$LN23@UConverter:
	jmp	$LN22@UConverter
$LN24@UConverter:
	cmp	DWORD PTR _targetByteUnit$[ebp], 65535	; 0000ffffH
	jbe	SHORT $LN21@UConverter
	mov	eax, DWORD PTR _targetByteUnit$[ebp]
	shr	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _target$[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 1
	mov	DWORD PTR _target$[ebp], edx
	cmp	DWORD PTR _offsets$[ebp], 0
	je	SHORT $LN21@UConverter
	mov	eax, DWORD PTR _offset$10729[ebp]
	sub	eax, 1
	mov	DWORD PTR _offset$10729[ebp], eax
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _offset$10729[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
$LN21@UConverter:
	mov	eax, DWORD PTR _target$[ebp]
	cmp	eax, DWORD PTR _targetLimit$[ebp]
	jb	SHORT $LN19@UConverter
	mov	eax, DWORD PTR _targetByteUnit$[ebp]
	shr	eax, 8
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	movsx	ecx, BYTE PTR [ecx+63]
	mov	BYTE PTR [edx+ecx+76], al
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	cl, BYTE PTR [eax+63]
	add	cl, 1
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax+63], cl
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+4]
	movsx	edx, BYTE PTR [eax+63]
	mov	al, BYTE PTR _targetByteUnit$[ebp]
	mov	BYTE PTR [ecx+edx+76], al
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	al, BYTE PTR [edx+63]
	add	al, 1
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx+63], al
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
	jmp	$LN22@UConverter
$LN19@UConverter:
	mov	eax, DWORD PTR _targetByteUnit$[ebp]
	shr	eax, 8
	mov	ecx, DWORD PTR _target$[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 1
	mov	DWORD PTR _target$[ebp], edx
	cmp	DWORD PTR _offsets$[ebp], 0
	je	SHORT $LN17@UConverter
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _offset$10729[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
$LN17@UConverter:
	mov	eax, DWORD PTR _target$[ebp]
	cmp	eax, DWORD PTR _targetLimit$[ebp]
	jae	SHORT $LN16@UConverter
	mov	eax, DWORD PTR _target$[ebp]
	mov	cl, BYTE PTR _targetByteUnit$[ebp]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 1
	mov	DWORD PTR _target$[ebp], edx
	cmp	DWORD PTR _offsets$[ebp], 0
	je	SHORT $LN15@UConverter
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _offset$10729[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
$LN15@UConverter:
	jmp	SHORT $LN22@UConverter
$LN16@UConverter:
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+4]
	movsx	edx, BYTE PTR [eax+63]
	mov	al, BYTE PTR _targetByteUnit$[ebp]
	mov	BYTE PTR [ecx+edx+76], al
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	al, BYTE PTR [edx+63]
	add	al, 1
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx+63], al
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
$LN22@UConverter:
	jmp	$LN13@UConverter
$LN25@UConverter:
	mov	eax, DWORD PTR _targetByteUnit$[ebp]
	and	eax, 16711680				; 00ff0000H
	je	SHORT $LN12@UConverter
	mov	eax, DWORD PTR _targetByteUnit$[ebp]
	shr	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	movsx	ecx, BYTE PTR [ecx+63]
	mov	BYTE PTR [edx+ecx+76], al
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	cl, BYTE PTR [eax+63]
	add	cl, 1
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax+63], cl
$LN12@UConverter:
	mov	eax, DWORD PTR _targetByteUnit$[ebp]
	and	eax, 65280				; 0000ff00H
	je	SHORT $LN11@UConverter
	mov	eax, DWORD PTR _targetByteUnit$[ebp]
	shr	eax, 8
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	movsx	ecx, BYTE PTR [ecx+63]
	mov	BYTE PTR [edx+ecx+76], al
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	cl, BYTE PTR [eax+63]
	add	cl, 1
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax+63], cl
$LN11@UConverter:
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+4]
	movsx	edx, BYTE PTR [eax+63]
	mov	al, BYTE PTR _targetByteUnit$[ebp]
	mov	BYTE PTR [ecx+edx+76], al
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	al, BYTE PTR [edx+63]
	add	al, 1
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx+63], al
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
$LN13@UConverter:
; Line 1053
	mov	eax, DWORD PTR _err$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN10@UConverter
; Line 1054
	jmp	$LN118@UConverter
$LN10@UConverter:
; Line 1056
	jmp	$LN28@UConverter
$LN27@UConverter:
; Line 1059
	mov	eax, DWORD PTR _sourceChar$[ebp]
	and	eax, -2048				; fffff800H
	cmp	eax, 55296				; 0000d800H
	jne	SHORT $LN8@UConverter
; Line 1060
	mov	eax, DWORD PTR _sourceChar$[ebp]
	and	eax, 1024				; 00000400H
	jne	SHORT $LN7@UConverter
$getTrail$10572:
; Line 1063
	mov	eax, DWORD PTR _source$[ebp]
	cmp	eax, DWORD PTR _sourceLimit$[ebp]
	jae	SHORT $LN6@UConverter
; Line 1065
	mov	eax, DWORD PTR _source$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR _trail$10761[ebp], cx
; Line 1066
	movzx	eax, WORD PTR _trail$10761[ebp]
	and	eax, -1024				; fffffc00H
	cmp	eax, 56320				; 0000dc00H
	jne	SHORT $LN5@UConverter
; Line 1067
	mov	eax, DWORD PTR _source$[ebp]
	add	eax, 2
	mov	DWORD PTR _source$[ebp], eax
; Line 1068
	mov	eax, DWORD PTR _sourceChar$[ebp]
	shl	eax, 10					; 0000000aH
	movzx	ecx, WORD PTR _trail$10761[ebp]
	lea	edx, DWORD PTR [eax+ecx-56613888]
	mov	DWORD PTR _sourceChar$[ebp], edx
; Line 1069
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 10			; 0000000aH
; Line 1072
	jmp	SHORT $LN4@UConverter
$LN5@UConverter:
; Line 1075
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 12			; 0000000cH
$LN4@UConverter:
; Line 1077
	jmp	SHORT $LN3@UConverter
$LN6@UConverter:
; Line 1079
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 0
$LN3@UConverter:
; Line 1081
	jmp	SHORT $LN2@UConverter
$LN7@UConverter:
; Line 1084
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 12			; 0000000cH
$LN2@UConverter:
; Line 1086
	jmp	SHORT $LN1@UConverter
$LN8@UConverter:
; Line 1088
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 10			; 0000000aH
$LN1@UConverter:
; Line 1091
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _sourceChar$[ebp]
	mov	DWORD PTR [ecx+56], edx
; Line 1092
	jmp	SHORT $LN118@UConverter
$LN28@UConverter:
; Line 1094
	jmp	$LN119@UConverter
$LN118@UConverter:
; Line 1097
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _source$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 1098
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _target$[ebp]
	mov	DWORD PTR [eax+16], ecx
$LN123@UConverter:
; Line 1099
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 424				; 000001a8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_UConverter_fromUnicode_ISCII_OFFSETS_LOGIC ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _isPNJConsonant
_TEXT	SEGMENT
_c$ = 8							; size = 4
_isPNJConsonant PROC					; COMDAT
; Line 171
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 172
	cmp	DWORD PTR _c$[ebp], 2560		; 00000a00H
	jl	SHORT $LN2@isPNJConso
	cmp	DWORD PTR _c$[ebp], 2640		; 00000a50H
	jl	SHORT $LN3@isPNJConso
$LN2@isPNJConso:
; Line 173
	xor	al, al
	jmp	SHORT $LN4@isPNJConso
; Line 174
	jmp	SHORT $LN4@isPNJConso
$LN3@isPNJConso:
; Line 175
	mov	eax, DWORD PTR _c$[ebp]
	movzx	eax, BYTE PTR _pnjMap[eax-2560]
	and	eax, 1
$LN4@isPNJConso:
; Line 177
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_isPNJConsonant ENDP
_TEXT	ENDS
PUBLIC	??_C@_1IG@NPLMGFDC@?$AAi?$AA?$DM?$AAs?$AAi?$AAz?$AAe?$AAo?$AAf?$AA?$CI?$AAv?$AAo?$AAw?$AAe?$AAl?$AAS?$AAi?$AAg?$AAn?$AAE?$AAS?$AAp?$AAe?$AAc?$AAi?$AAa?$AAl?$AAC?$AAa?$AAs?$AAe?$AAs?$AA?$CJ@ ; `string'
PUBLIC	??_C@_1FK@KEDHFIAL@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@ ; `string'
PUBLIC	?__LINE__Var@?1??UConverter_toUnicode_ISCII_OFFSETS_LOGIC@@9@9@71c455f6 ; `UConverter_toUnicode_ISCII_OFFSETS_LOGIC'::`2'::__LINE__Var
EXTRN	__imp___wassert:PROC
;	COMDAT ??_C@_1IG@NPLMGFDC@?$AAi?$AA?$DM?$AAs?$AAi?$AAz?$AAe?$AAo?$AAf?$AA?$CI?$AAv?$AAo?$AAw?$AAe?$AAl?$AAS?$AAi?$AAg?$AAn?$AAE?$AAS?$AAp?$AAe?$AAc?$AAi?$AAa?$AAl?$AAC?$AAa?$AAs?$AAe?$AAs?$AA?$CJ@
CONST	SEGMENT
??_C@_1IG@NPLMGFDC@?$AAi?$AA?$DM?$AAs?$AAi?$AAz?$AAe?$AAo?$AAf?$AA?$CI?$AAv?$AAo?$AAw?$AAe?$AAl?$AAS?$AAi?$AAg?$AAn?$AAE?$AAS?$AAp?$AAe?$AAc?$AAi?$AAa?$AAl?$AAC?$AAa?$AAs?$AAe?$AAs?$AA?$CJ@ DB 'i'
	DB	00H, '<', 00H, 's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, 'o', 00H
	DB	'f', 00H, '(', 00H, 'v', 00H, 'o', 00H, 'w', 00H, 'e', 00H, 'l'
	DB	00H, 'S', 00H, 'i', 00H, 'g', 00H, 'n', 00H, 'E', 00H, 'S', 00H
	DB	'p', 00H, 'e', 00H, 'c', 00H, 'i', 00H, 'a', 00H, 'l', 00H, 'C'
	DB	00H, 'a', 00H, 's', 00H, 'e', 00H, 's', 00H, ')', 00H, '/', 00H
	DB	's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, 'o', 00H, 'f', 00H, '('
	DB	00H, 'v', 00H, 'o', 00H, 'w', 00H, 'e', 00H, 'l', 00H, 'S', 00H
	DB	'i', 00H, 'g', 00H, 'n', 00H, 'E', 00H, 'S', 00H, 'p', 00H, 'e'
	DB	00H, 'c', 00H, 'i', 00H, 'a', 00H, 'l', 00H, 'C', 00H, 'a', 00H
	DB	's', 00H, 'e', 00H, 's', 00H, '[', 00H, '0', 00H, ']', 00H, ')'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1FK@KEDHFIAL@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@
CONST	SEGMENT
??_C@_1FK@KEDHFIAL@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@ DB 'd'
	DB	00H, ':', 00H, '\', 00H, 'm', 00H, 'o', 00H, 'z', 00H, 'i', 00H
	DB	'l', 00H, 'l', 00H, 'a', 00H, '\', 00H, 'i', 00H, 'n', 00H, 't'
	DB	00H, 'l', 00H, '\', 00H, 'i', 00H, 'c', 00H, 'u', 00H, '\', 00H
	DB	's', 00H, 'o', 00H, 'u', 00H, 'r', 00H, 'c', 00H, 'e', 00H, '\'
	DB	00H, 'c', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'o', 00H, 'n', 00H
	DB	'\', 00H, 'u', 00H, 'c', 00H, 'n', 00H, 'v', 00H, 'i', 00H, 's'
	DB	00H, 'c', 00H, 'i', 00H, '.', 00H, 'c', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??UConverter_toUnicode_ISCII_OFFSETS_LOGIC@@9@9@71c455f6
_DATA	SEGMENT
?__LINE__Var@?1??UConverter_toUnicode_ISCII_OFFSETS_LOGIC@@9@9@71c455f6 DD 0495H ; `UConverter_toUnicode_ISCII_OFFSETS_LOGIC'::`2'::__LINE__Var
; Function compile flags: /Odtp /RTCsu /ZI
_DATA	ENDS
;	COMDAT _UConverter_toUnicode_ISCII_OFFSETS_LOGIC
_TEXT	SEGMENT
tv321 = -364						; size = 4
_cnv$11047 = -164					; size = 4
_offset$ = -152						; size = 4
_i$ = -140						; size = 4
_found$ = -125						; size = 1
_contextCharToUnicode$ = -116				; size = 4
_tempTargetUniChar$ = -104				; size = 4
_toUnicodeStatus$ = -92					; size = 4
_data$ = -80						; size = 4
_sourceChar$ = -65					; size = 1
_targetUniChar$ = -56					; size = 4
_targetLimit$ = -44					; size = 4
_sourceLimit$ = -32					; size = 4
_target$ = -20						; size = 4
_source$ = -8						; size = 4
_args$ = 8						; size = 4
_err$ = 12						; size = 4
_UConverter_toUnicode_ISCII_OFFSETS_LOGIC PROC		; COMDAT
; Line 1173
	push	ebp
	mov	ebp, esp
	sub	esp, 364				; 0000016cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-364]
	mov	ecx, 91					; 0000005bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1174
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _source$[ebp], ecx
; Line 1175
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _target$[ebp], ecx
; Line 1176
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _sourceLimit$[ebp], ecx
; Line 1177
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _targetLimit$[ebp], ecx
; Line 1178
	mov	DWORD PTR _targetUniChar$[ebp], 0
; Line 1179
	mov	BYTE PTR _sourceChar$[ebp], 0
; Line 1181
	mov	DWORD PTR _toUnicodeStatus$[ebp], 0
; Line 1182
	mov	DWORD PTR _tempTargetUniChar$[ebp], 0
; Line 1183
	mov	DWORD PTR _contextCharToUnicode$[ebp], 0
; Line 1186
	mov	DWORD PTR _offset$[ebp], 0
; Line 1188
	mov	eax, DWORD PTR _args$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN166@UConverter@2
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _target$[ebp]
	cmp	ecx, DWORD PTR [eax+16]
	jb	SHORT $LN166@UConverter@2
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _source$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jae	SHORT $LN167@UConverter@2
$LN166@UConverter@2:
; Line 1189
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 1
; Line 1190
	jmp	$LN168@UConverter@2
$LN167@UConverter@2:
; Line 1193
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _data$[ebp], edx
; Line 1194
	mov	eax, DWORD PTR _data$[ebp]
	mov	DWORD PTR _contextCharToUnicode$[ebp], eax
; Line 1195
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 44					; 0000002cH
	mov	DWORD PTR _toUnicodeStatus$[ebp], ecx
$LN165@UConverter@2:
; Line 1197
	mov	eax, DWORD PTR _err$[ebp]
	cmp	DWORD PTR [eax], 0
	jg	$LN164@UConverter@2
	mov	eax, DWORD PTR _source$[ebp]
	cmp	eax, DWORD PTR _sourceLimit$[ebp]
	jae	$LN164@UConverter@2
; Line 1199
	mov	DWORD PTR _targetUniChar$[ebp], 65535	; 0000ffffH
; Line 1201
	mov	eax, DWORD PTR _target$[ebp]
	cmp	eax, DWORD PTR _targetLimit$[ebp]
	jae	$LN163@UConverter@2
; Line 1202
	mov	eax, DWORD PTR _source$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _sourceChar$[ebp], cl
	mov	edx, DWORD PTR _source$[ebp]
	add	edx, 1
	mov	DWORD PTR _source$[ebp], edx
; Line 1205
	mov	eax, DWORD PTR _contextCharToUnicode$[ebp]
	movzx	ecx, WORD PTR [eax]
	cmp	ecx, 239				; 000000efH
	jne	$LN162@UConverter@2
; Line 1212
	movzx	eax, BYTE PTR _sourceChar$[ebp]
	mov	ecx, 75					; 0000004bH
	sub	ecx, eax
	movzx	edx, cl
	cmp	edx, 9
	jg	SHORT $LN161@UConverter@2
; Line 1213
	movzx	eax, BYTE PTR _sourceChar$[ebp]
	and	eax, 15					; 0000000fH
	movzx	ecx, WORD PTR _lookupTable[eax*4]
	shl	ecx, 7
	mov	edx, DWORD PTR _data$[ebp]
	mov	WORD PTR [edx+8], cx
; Line 1214
	movzx	eax, BYTE PTR _sourceChar$[ebp]
	and	eax, 15					; 0000000fH
	movzx	ecx, WORD PTR _lookupTable[eax*4+2]
	mov	edx, DWORD PTR _data$[ebp]
	mov	DWORD PTR [edx+16], ecx
	jmp	SHORT $LN160@UConverter@2
$LN161@UConverter@2:
; Line 1215
	movzx	eax, BYTE PTR _sourceChar$[ebp]
	cmp	eax, 64					; 00000040H
	jne	SHORT $LN159@UConverter@2
; Line 1217
	mov	eax, DWORD PTR _data$[ebp]
	mov	ecx, DWORD PTR _data$[ebp]
	mov	dx, WORD PTR [ecx+4]
	mov	WORD PTR [eax+8], dx
; Line 1218
	mov	eax, DWORD PTR _data$[ebp]
	mov	ecx, DWORD PTR _data$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+16], edx
; Line 1219
	jmp	SHORT $LN160@UConverter@2
$LN159@UConverter@2:
; Line 1220
	movzx	eax, BYTE PTR _sourceChar$[ebp]
	cmp	eax, 33					; 00000021H
	jl	SHORT $LN157@UConverter@2
	movzx	eax, BYTE PTR _sourceChar$[ebp]
	cmp	eax, 63					; 0000003fH
	jg	SHORT $LN157@UConverter@2
; Line 1222
	jmp	SHORT $LN160@UConverter@2
$LN157@UConverter@2:
; Line 1223
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 12			; 0000000cH
; Line 1225
	mov	eax, 65534				; 0000fffeH
	mov	ecx, DWORD PTR _contextCharToUnicode$[ebp]
	mov	WORD PTR [ecx], ax
; Line 1226
	jmp	$CALLBACK$10815
$LN160@UConverter@2:
; Line 1231
	mov	eax, 65534				; 0000fffeH
	mov	ecx, DWORD PTR _contextCharToUnicode$[ebp]
	mov	WORD PTR [ecx], ax
; Line 1233
	jmp	$LN165@UConverter@2
	jmp	$LN155@UConverter@2
$LN162@UConverter@2:
; Line 1235
	mov	eax, DWORD PTR _contextCharToUnicode$[ebp]
	movzx	ecx, WORD PTR [eax]
	cmp	ecx, 240				; 000000f0H
	jne	$LN154@UConverter@2
; Line 1237
	movzx	eax, BYTE PTR _sourceChar$[ebp]
	mov	ecx, 238				; 000000eeH
	sub	ecx, eax
	movzx	edx, cl
	cmp	edx, 77					; 0000004dH
	jg	$LN153@UConverter@2
; Line 1239
	movzx	eax, BYTE PTR _sourceChar$[ebp]
	cmp	eax, 191				; 000000bfH
	je	SHORT $LN151@UConverter@2
	movzx	eax, BYTE PTR _sourceChar$[ebp]
	cmp	eax, 184				; 000000b8H
	jne	$LN152@UConverter@2
$LN151@UConverter@2:
; Line 1240
	movzx	eax, BYTE PTR _sourceChar$[ebp]
	sub	eax, 191				; 000000bfH
	neg	eax
	sbb	eax, eax
	and	eax, -30				; ffffffe2H
	add	eax, 2416				; 00000970H
	mov	DWORD PTR _targetUniChar$[ebp], eax
; Line 1243
	movzx	eax, BYTE PTR _targetUniChar$[ebp]
	movzx	ecx, BYTE PTR _validityTable[eax]
	mov	edx, DWORD PTR _data$[ebp]
	and	ecx, DWORD PTR [edx+16]
	je	$LN152@UConverter@2
; Line 1244
	mov	eax, 65534				; 0000fffeH
	mov	ecx, DWORD PTR _contextCharToUnicode$[ebp]
	mov	WORD PTR [ecx], ax
; Line 1247
	mov	eax, DWORD PTR _data$[ebp]
	cmp	DWORD PTR [eax+44], 0
	je	$LN149@UConverter@2
; Line 1248
	mov	eax, DWORD PTR _data$[ebp]
	cmp	DWORD PTR [eax+44], 160			; 000000a0H
	jle	SHORT $LN148@UConverter@2
	mov	eax, DWORD PTR _data$[ebp]
	cmp	DWORD PTR [eax+44], 8205		; 0000200dH
	je	SHORT $LN148@UConverter@2
	mov	eax, DWORD PTR _data$[ebp]
	cmp	DWORD PTR [eax+44], 8204		; 0000200cH
	je	SHORT $LN148@UConverter@2
	mov	eax, DWORD PTR _data$[ebp]
	cmp	DWORD PTR [eax+44], 2404		; 00000964H
	je	SHORT $LN148@UConverter@2
	mov	eax, DWORD PTR _data$[ebp]
	cmp	DWORD PTR [eax+44], 2405		; 00000965H
	je	SHORT $LN148@UConverter@2
	mov	eax, DWORD PTR _data$[ebp]
	mov	ecx, DWORD PTR _data$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR [eax+44], edx
$LN148@UConverter@2:
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _target$[ebp]
	cmp	ecx, DWORD PTR [eax+20]
	jae	SHORT $LN147@UConverter@2
	mov	eax, DWORD PTR _target$[ebp]
	mov	ecx, DWORD PTR _data$[ebp]
	mov	dx, WORD PTR [ecx+44]
	mov	WORD PTR [eax], dx
	mov	eax, DWORD PTR _target$[ebp]
	add	eax, 2
	mov	DWORD PTR _target$[ebp], eax
	mov	eax, DWORD PTR _args$[ebp]
	cmp	DWORD PTR [eax+24], 0
	je	SHORT $LN146@UConverter@2
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _source$[ebp]
	sub	ecx, DWORD PTR [eax+8]
	sub	ecx, 1
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	add	edx, 4
	mov	eax, DWORD PTR _args$[ebp]
	mov	DWORD PTR [eax+24], edx
$LN146@UConverter@2:
	jmp	SHORT $LN145@UConverter@2
$LN147@UConverter@2:
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+4]
	movsx	edx, BYTE PTR [eax+65]
	mov	eax, DWORD PTR _data$[ebp]
	mov	ax, WORD PTR [eax+44]
	mov	WORD PTR [ecx+edx*2+116], ax
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	al, BYTE PTR [edx+65]
	add	al, 1
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx+65], al
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
$LN145@UConverter@2:
; Line 1249
	mov	eax, DWORD PTR _data$[ebp]
	mov	DWORD PTR [eax+44], 0
$LN149@UConverter@2:
; Line 1252
	cmp	DWORD PTR _targetUniChar$[ebp], 160	; 000000a0H
	jbe	SHORT $LN144@UConverter@2
	cmp	DWORD PTR _targetUniChar$[ebp], 8205	; 0000200dH
	je	SHORT $LN144@UConverter@2
	cmp	DWORD PTR _targetUniChar$[ebp], 8204	; 0000200cH
	je	SHORT $LN144@UConverter@2
	cmp	DWORD PTR _targetUniChar$[ebp], 2404	; 00000964H
	je	SHORT $LN144@UConverter@2
	cmp	DWORD PTR _targetUniChar$[ebp], 2405	; 00000965H
	je	SHORT $LN144@UConverter@2
	mov	eax, DWORD PTR _data$[ebp]
	movzx	ecx, WORD PTR [eax+8]
	add	ecx, DWORD PTR _targetUniChar$[ebp]
	mov	DWORD PTR _targetUniChar$[ebp], ecx
$LN144@UConverter@2:
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _target$[ebp]
	cmp	ecx, DWORD PTR [eax+20]
	jae	SHORT $LN143@UConverter@2
	mov	eax, DWORD PTR _target$[ebp]
	mov	cx, WORD PTR _targetUniChar$[ebp]
	mov	WORD PTR [eax], cx
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 2
	mov	DWORD PTR _target$[ebp], edx
	mov	eax, DWORD PTR _args$[ebp]
	cmp	DWORD PTR [eax+24], 0
	je	SHORT $LN142@UConverter@2
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _source$[ebp]
	sub	ecx, DWORD PTR [eax+8]
	sub	ecx, 2
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	add	edx, 4
	mov	eax, DWORD PTR _args$[ebp]
	mov	DWORD PTR [eax+24], edx
$LN142@UConverter@2:
	jmp	SHORT $LN141@UConverter@2
$LN143@UConverter@2:
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+4]
	movsx	edx, BYTE PTR [eax+65]
	mov	ax, WORD PTR _targetUniChar$[ebp]
	mov	WORD PTR [ecx+edx*2+116], ax
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	al, BYTE PTR [edx+65]
	add	al, 1
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx+65], al
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
$LN141@UConverter@2:
; Line 1254
	jmp	$LN165@UConverter@2
$LN152@UConverter@2:
; Line 1258
	mov	DWORD PTR _targetUniChar$[ebp], 65535	; 0000ffffH
; Line 1259
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 10			; 0000000aH
; Line 1260
	jmp	SHORT $LN140@UConverter@2
$LN153@UConverter@2:
; Line 1262
	mov	eax, 65534				; 0000fffeH
	mov	ecx, DWORD PTR _contextCharToUnicode$[ebp]
	mov	WORD PTR [ecx], ax
; Line 1263
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 12			; 0000000cH
$LN140@UConverter@2:
; Line 1265
	jmp	$CALLBACK$10815
	jmp	$LN155@UConverter@2
$LN154@UConverter@2:
; Line 1266
	mov	eax, DWORD PTR _contextCharToUnicode$[ebp]
	movzx	ecx, WORD PTR [eax]
	cmp	ecx, 217				; 000000d9H
	jne	$LN155@UConverter@2
; Line 1267
	movzx	eax, BYTE PTR _sourceChar$[ebp]
	cmp	eax, 232				; 000000e8H
	jne	SHORT $LN137@UConverter@2
; Line 1268
	mov	DWORD PTR _targetUniChar$[ebp], 32	; 00000020H
; Line 1269
	jmp	SHORT $LN136@UConverter@2
$LN137@UConverter@2:
; Line 1270
	mov	DWORD PTR _targetUniChar$[ebp], 8205	; 0000200dH
$LN136@UConverter@2:
; Line 1274
	mov	eax, DWORD PTR _data$[ebp]
	cmp	DWORD PTR [eax+44], 0
	je	$LN135@UConverter@2
; Line 1275
	mov	eax, DWORD PTR _data$[ebp]
	cmp	DWORD PTR [eax+44], 160			; 000000a0H
	jle	SHORT $LN134@UConverter@2
	mov	eax, DWORD PTR _data$[ebp]
	cmp	DWORD PTR [eax+44], 8205		; 0000200dH
	je	SHORT $LN134@UConverter@2
	mov	eax, DWORD PTR _data$[ebp]
	cmp	DWORD PTR [eax+44], 8204		; 0000200cH
	je	SHORT $LN134@UConverter@2
	mov	eax, DWORD PTR _data$[ebp]
	cmp	DWORD PTR [eax+44], 2404		; 00000964H
	je	SHORT $LN134@UConverter@2
	mov	eax, DWORD PTR _data$[ebp]
	cmp	DWORD PTR [eax+44], 2405		; 00000965H
	je	SHORT $LN134@UConverter@2
	mov	eax, DWORD PTR _data$[ebp]
	mov	ecx, DWORD PTR _data$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR [eax+44], edx
$LN134@UConverter@2:
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _target$[ebp]
	cmp	ecx, DWORD PTR [eax+20]
	jae	SHORT $LN133@UConverter@2
	mov	eax, DWORD PTR _target$[ebp]
	mov	ecx, DWORD PTR _data$[ebp]
	mov	dx, WORD PTR [ecx+44]
	mov	WORD PTR [eax], dx
	mov	eax, DWORD PTR _target$[ebp]
	add	eax, 2
	mov	DWORD PTR _target$[ebp], eax
	mov	eax, DWORD PTR _args$[ebp]
	cmp	DWORD PTR [eax+24], 0
	je	SHORT $LN132@UConverter@2
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _source$[ebp]
	sub	ecx, DWORD PTR [eax+8]
	sub	ecx, 1
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	add	edx, 4
	mov	eax, DWORD PTR _args$[ebp]
	mov	DWORD PTR [eax+24], edx
$LN132@UConverter@2:
	jmp	SHORT $LN131@UConverter@2
$LN133@UConverter@2:
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+4]
	movsx	edx, BYTE PTR [eax+65]
	mov	eax, DWORD PTR _data$[ebp]
	mov	ax, WORD PTR [eax+44]
	mov	WORD PTR [ecx+edx*2+116], ax
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	al, BYTE PTR [edx+65]
	add	al, 1
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx+65], al
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
$LN131@UConverter@2:
; Line 1276
	mov	eax, DWORD PTR _data$[ebp]
	mov	DWORD PTR [eax+44], 0
$LN135@UConverter@2:
; Line 1279
	cmp	DWORD PTR _targetUniChar$[ebp], 160	; 000000a0H
	jbe	SHORT $LN130@UConverter@2
	cmp	DWORD PTR _targetUniChar$[ebp], 8205	; 0000200dH
	je	SHORT $LN130@UConverter@2
	cmp	DWORD PTR _targetUniChar$[ebp], 8204	; 0000200cH
	je	SHORT $LN130@UConverter@2
	cmp	DWORD PTR _targetUniChar$[ebp], 2404	; 00000964H
	je	SHORT $LN130@UConverter@2
	cmp	DWORD PTR _targetUniChar$[ebp], 2405	; 00000965H
	je	SHORT $LN130@UConverter@2
	mov	eax, DWORD PTR _data$[ebp]
	movzx	ecx, WORD PTR [eax+8]
	add	ecx, DWORD PTR _targetUniChar$[ebp]
	mov	DWORD PTR _targetUniChar$[ebp], ecx
$LN130@UConverter@2:
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _target$[ebp]
	cmp	ecx, DWORD PTR [eax+20]
	jae	SHORT $LN129@UConverter@2
	mov	eax, DWORD PTR _target$[ebp]
	mov	cx, WORD PTR _targetUniChar$[ebp]
	mov	WORD PTR [eax], cx
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 2
	mov	DWORD PTR _target$[ebp], edx
	mov	eax, DWORD PTR _args$[ebp]
	cmp	DWORD PTR [eax+24], 0
	je	SHORT $LN128@UConverter@2
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _source$[ebp]
	sub	ecx, DWORD PTR [eax+8]
	sub	ecx, 2
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	add	edx, 4
	mov	eax, DWORD PTR _args$[ebp]
	mov	DWORD PTR [eax+24], edx
$LN128@UConverter@2:
	jmp	SHORT $LN127@UConverter@2
$LN129@UConverter@2:
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+4]
	movsx	edx, BYTE PTR [eax+65]
	mov	ax, WORD PTR _targetUniChar$[ebp]
	mov	WORD PTR [ecx+edx*2+116], ax
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	al, BYTE PTR [edx+65]
	add	al, 1
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx+65], al
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
$LN127@UConverter@2:
; Line 1281
	mov	eax, 65534				; 0000fffeH
	mov	ecx, DWORD PTR _contextCharToUnicode$[ebp]
	mov	WORD PTR [ecx], ax
$LN155@UConverter@2:
; Line 1285
	movzx	eax, BYTE PTR _sourceChar$[ebp]
	mov	DWORD PTR tv321[ebp], eax
	mov	ecx, DWORD PTR tv321[ebp]
	sub	ecx, 10					; 0000000aH
	mov	DWORD PTR tv321[ebp], ecx
	cmp	DWORD PTR tv321[ebp], 230		; 000000e6H
	ja	$LN45@UConverter@2
	mov	edx, DWORD PTR tv321[ebp]
	movzx	eax, BYTE PTR $LN177@UConverter@2[edx]
	jmp	DWORD PTR $LN178@UConverter@2[eax*4]
$LN124@UConverter@2:
; Line 1289
	movzx	ax, BYTE PTR _sourceChar$[ebp]
	mov	ecx, DWORD PTR _contextCharToUnicode$[ebp]
	mov	WORD PTR [ecx], ax
; Line 1291
	mov	eax, DWORD PTR _toUnicodeStatus$[ebp]
	cmp	DWORD PTR [eax], 65535			; 0000ffffH
	je	$LN123@UConverter@2
; Line 1293
	mov	eax, DWORD PTR _data$[ebp]
	cmp	DWORD PTR [eax+44], 0
	je	$LN122@UConverter@2
; Line 1294
	mov	eax, DWORD PTR _data$[ebp]
	cmp	DWORD PTR [eax+44], 160			; 000000a0H
	jle	SHORT $LN121@UConverter@2
	mov	eax, DWORD PTR _data$[ebp]
	cmp	DWORD PTR [eax+44], 8205		; 0000200dH
	je	SHORT $LN121@UConverter@2
	mov	eax, DWORD PTR _data$[ebp]
	cmp	DWORD PTR [eax+44], 8204		; 0000200cH
	je	SHORT $LN121@UConverter@2
	mov	eax, DWORD PTR _data$[ebp]
	cmp	DWORD PTR [eax+44], 2404		; 00000964H
	je	SHORT $LN121@UConverter@2
	mov	eax, DWORD PTR _data$[ebp]
	cmp	DWORD PTR [eax+44], 2405		; 00000965H
	je	SHORT $LN121@UConverter@2
	mov	eax, DWORD PTR _data$[ebp]
	mov	ecx, DWORD PTR _data$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR [eax+44], edx
$LN121@UConverter@2:
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _target$[ebp]
	cmp	ecx, DWORD PTR [eax+20]
	jae	SHORT $LN120@UConverter@2
	mov	eax, DWORD PTR _target$[ebp]
	mov	ecx, DWORD PTR _data$[ebp]
	mov	dx, WORD PTR [ecx+44]
	mov	WORD PTR [eax], dx
	mov	eax, DWORD PTR _target$[ebp]
	add	eax, 2
	mov	DWORD PTR _target$[ebp], eax
	mov	eax, DWORD PTR _args$[ebp]
	cmp	DWORD PTR [eax+24], 0
	je	SHORT $LN119@UConverter@2
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _source$[ebp]
	sub	ecx, DWORD PTR [eax+8]
	sub	ecx, 1
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	add	edx, 4
	mov	eax, DWORD PTR _args$[ebp]
	mov	DWORD PTR [eax+24], edx
$LN119@UConverter@2:
	jmp	SHORT $LN118@UConverter@2
$LN120@UConverter@2:
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+4]
	movsx	edx, BYTE PTR [eax+65]
	mov	eax, DWORD PTR _data$[ebp]
	mov	ax, WORD PTR [eax+44]
	mov	WORD PTR [ecx+edx*2+116], ax
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	al, BYTE PTR [edx+65]
	add	al, 1
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx+65], al
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
$LN118@UConverter@2:
; Line 1295
	mov	eax, DWORD PTR _data$[ebp]
	mov	DWORD PTR [eax+44], 0
$LN122@UConverter@2:
; Line 1297
	mov	eax, DWORD PTR _toUnicodeStatus$[ebp]
	cmp	DWORD PTR [eax], 160			; 000000a0H
	jle	SHORT $LN117@UConverter@2
	mov	eax, DWORD PTR _toUnicodeStatus$[ebp]
	cmp	DWORD PTR [eax], 8205			; 0000200dH
	je	SHORT $LN117@UConverter@2
	mov	eax, DWORD PTR _toUnicodeStatus$[ebp]
	cmp	DWORD PTR [eax], 8204			; 0000200cH
	je	SHORT $LN117@UConverter@2
	mov	eax, DWORD PTR _toUnicodeStatus$[ebp]
	cmp	DWORD PTR [eax], 2404			; 00000964H
	je	SHORT $LN117@UConverter@2
	mov	eax, DWORD PTR _toUnicodeStatus$[ebp]
	cmp	DWORD PTR [eax], 2405			; 00000965H
	je	SHORT $LN117@UConverter@2
	mov	eax, DWORD PTR _data$[ebp]
	movzx	ecx, WORD PTR [eax+8]
	mov	edx, DWORD PTR _toUnicodeStatus$[ebp]
	add	ecx, DWORD PTR [edx]
	mov	eax, DWORD PTR _toUnicodeStatus$[ebp]
	mov	DWORD PTR [eax], ecx
$LN117@UConverter@2:
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _target$[ebp]
	cmp	ecx, DWORD PTR [eax+20]
	jae	SHORT $LN116@UConverter@2
	mov	eax, DWORD PTR _target$[ebp]
	mov	ecx, DWORD PTR _toUnicodeStatus$[ebp]
	mov	dx, WORD PTR [ecx]
	mov	WORD PTR [eax], dx
	mov	eax, DWORD PTR _target$[ebp]
	add	eax, 2
	mov	DWORD PTR _target$[ebp], eax
	mov	eax, DWORD PTR _args$[ebp]
	cmp	DWORD PTR [eax+24], 0
	je	SHORT $LN115@UConverter@2
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _source$[ebp]
	sub	ecx, DWORD PTR [eax+8]
	sub	ecx, 2
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	add	edx, 4
	mov	eax, DWORD PTR _args$[ebp]
	mov	DWORD PTR [eax+24], edx
$LN115@UConverter@2:
	jmp	SHORT $LN114@UConverter@2
$LN116@UConverter@2:
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+4]
	movsx	edx, BYTE PTR [eax+65]
	mov	eax, DWORD PTR _toUnicodeStatus$[ebp]
	mov	ax, WORD PTR [eax]
	mov	WORD PTR [ecx+edx*2+116], ax
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	al, BYTE PTR [edx+65]
	add	al, 1
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx+65], al
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
$LN114@UConverter@2:
; Line 1298
	mov	eax, DWORD PTR _toUnicodeStatus$[ebp]
	mov	DWORD PTR [eax], 65535			; 0000ffffH
$LN123@UConverter@2:
; Line 1300
	jmp	$LN165@UConverter@2
$LN113@UConverter@2:
; Line 1303
	mov	eax, DWORD PTR _contextCharToUnicode$[ebp]
	movzx	ecx, WORD PTR [eax]
	cmp	ecx, 234				; 000000eaH
	jne	SHORT $LN112@UConverter@2
; Line 1304
	mov	DWORD PTR _targetUniChar$[ebp], 2405	; 00000965H
; Line 1306
	mov	eax, 65534				; 0000fffeH
	mov	ecx, DWORD PTR _contextCharToUnicode$[ebp]
	mov	WORD PTR [ecx], ax
; Line 1307
	mov	eax, DWORD PTR _toUnicodeStatus$[ebp]
	mov	DWORD PTR [eax], 65535			; 0000ffffH
; Line 1308
	jmp	SHORT $LN111@UConverter@2
$LN112@UConverter@2:
; Line 1309
	movzx	eax, BYTE PTR _sourceChar$[ebp]
	movzx	ecx, WORD PTR _toUnicodeTable[eax*2]
	mov	DWORD PTR _targetUniChar$[ebp], ecx
	movzx	eax, BYTE PTR _sourceChar$[ebp]
	cmp	eax, 160				; 000000a0H
	jle	SHORT $LN110@UConverter@2
	mov	eax, DWORD PTR _targetUniChar$[ebp]
	and	eax, 127				; 0000007fH
	movzx	ecx, BYTE PTR _validityTable[eax]
	mov	edx, DWORD PTR _data$[ebp]
	and	ecx, DWORD PTR [edx+16]
	jne	SHORT $LN110@UConverter@2
	mov	eax, DWORD PTR _data$[ebp]
	movzx	ecx, WORD PTR [eax+8]
	cmp	ecx, 768				; 00000300H
	jne	SHORT $LN108@UConverter@2
	cmp	DWORD PTR _targetUniChar$[ebp], 2353	; 00000931H
	je	SHORT $LN110@UConverter@2
$LN108@UConverter@2:
	mov	DWORD PTR _targetUniChar$[ebp], 65535	; 0000ffffH
$LN110@UConverter@2:
; Line 1310
	movzx	ax, BYTE PTR _sourceChar$[ebp]
	mov	ecx, DWORD PTR _contextCharToUnicode$[ebp]
	mov	WORD PTR [ecx], ax
$LN111@UConverter@2:
; Line 1312
	jmp	$LN125@UConverter@2
$LN107@UConverter@2:
; Line 1315
	mov	eax, DWORD PTR _contextCharToUnicode$[ebp]
	movzx	ecx, WORD PTR [eax]
	cmp	ecx, 232				; 000000e8H
	jne	SHORT $LN106@UConverter@2
; Line 1316
	mov	DWORD PTR _targetUniChar$[ebp], 8204	; 0000200cH
; Line 1318
	mov	eax, 65534				; 0000fffeH
	mov	ecx, DWORD PTR _contextCharToUnicode$[ebp]
	mov	WORD PTR [ecx], ax
; Line 1319
	jmp	SHORT $LN105@UConverter@2
$LN106@UConverter@2:
; Line 1320
	movzx	eax, BYTE PTR _sourceChar$[ebp]
	movzx	ecx, WORD PTR _toUnicodeTable[eax*2]
	mov	DWORD PTR _targetUniChar$[ebp], ecx
	movzx	eax, BYTE PTR _sourceChar$[ebp]
	cmp	eax, 160				; 000000a0H
	jle	SHORT $LN104@UConverter@2
	mov	eax, DWORD PTR _targetUniChar$[ebp]
	and	eax, 127				; 0000007fH
	movzx	ecx, BYTE PTR _validityTable[eax]
	mov	edx, DWORD PTR _data$[ebp]
	and	ecx, DWORD PTR [edx+16]
	jne	SHORT $LN104@UConverter@2
	mov	eax, DWORD PTR _data$[ebp]
	movzx	ecx, WORD PTR [eax+8]
	cmp	ecx, 768				; 00000300H
	jne	SHORT $LN102@UConverter@2
	cmp	DWORD PTR _targetUniChar$[ebp], 2353	; 00000931H
	je	SHORT $LN104@UConverter@2
$LN102@UConverter@2:
	mov	DWORD PTR _targetUniChar$[ebp], 65535	; 0000ffffH
$LN104@UConverter@2:
; Line 1321
	movzx	ax, BYTE PTR _sourceChar$[ebp]
	mov	ecx, DWORD PTR _contextCharToUnicode$[ebp]
	mov	WORD PTR [ecx], ax
$LN105@UConverter@2:
; Line 1323
	jmp	$LN125@UConverter@2
$LN101@UConverter@2:
; Line 1327
	mov	eax, DWORD PTR _data$[ebp]
	mov	BYTE PTR [eax+25], 1
; Line 1328
	movzx	eax, BYTE PTR _sourceChar$[ebp]
	movzx	ecx, WORD PTR _toUnicodeTable[eax*2]
	mov	DWORD PTR _targetUniChar$[ebp], ecx
	movzx	eax, BYTE PTR _sourceChar$[ebp]
	cmp	eax, 160				; 000000a0H
	jle	SHORT $LN100@UConverter@2
	mov	eax, DWORD PTR _targetUniChar$[ebp]
	and	eax, 127				; 0000007fH
	movzx	ecx, BYTE PTR _validityTable[eax]
	mov	edx, DWORD PTR _data$[ebp]
	and	ecx, DWORD PTR [edx+16]
	jne	SHORT $LN100@UConverter@2
	mov	eax, DWORD PTR _data$[ebp]
	movzx	ecx, WORD PTR [eax+8]
	cmp	ecx, 768				; 00000300H
	jne	SHORT $LN98@UConverter@2
	cmp	DWORD PTR _targetUniChar$[ebp], 2353	; 00000931H
	je	SHORT $LN100@UConverter@2
$LN98@UConverter@2:
	mov	DWORD PTR _targetUniChar$[ebp], 65535	; 0000ffffH
$LN100@UConverter@2:
; Line 1330
	movzx	ax, BYTE PTR _sourceChar$[ebp]
	mov	ecx, DWORD PTR _contextCharToUnicode$[ebp]
	mov	WORD PTR [ecx], ax
; Line 1331
	jmp	$LN125@UConverter@2
$LN97@UConverter@2:
; Line 1334
	mov	DWORD PTR _i$[ebp], 1
; Line 1335
	mov	BYTE PTR _found$[ebp], 0
	jmp	SHORT $LN96@UConverter@2
$LN95@UConverter@2:
; Line 1336
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN96@UConverter@2:
	movzx	eax, WORD PTR _vowelSignESpecialCases
	cmp	DWORD PTR _i$[ebp], eax
	jge	SHORT $LN94@UConverter@2
; Line 1337
	cmp	DWORD PTR _i$[ebp], 2
	jb	SHORT $LN170@UConverter@2
	mov	eax, DWORD PTR ?__LINE__Var@?1??UConverter_toUnicode_ISCII_OFFSETS_LOGIC@@9@9@71c455f6
	add	eax, 164				; 000000a4H
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1FK@KEDHFIAL@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@
	push	OFFSET ??_C@_1IG@NPLMGFDC@?$AAi?$AA?$DM?$AAs?$AAi?$AAz?$AAe?$AAo?$AAf?$AA?$CI?$AAv?$AAo?$AAw?$AAe?$AAl?$AAS?$AAi?$AAg?$AAn?$AAE?$AAS?$AAp?$AAe?$AAc?$AAi?$AAa?$AAl?$AAC?$AAa?$AAs?$AAe?$AAs?$AA?$CJ@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN170@UConverter@2:
; Line 1338
	mov	eax, DWORD PTR _i$[ebp]
	movzx	ecx, WORD PTR _vowelSignESpecialCases[eax*4]
	mov	edx, DWORD PTR _contextCharToUnicode$[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	ecx, eax
	jne	SHORT $LN93@UConverter@2
; Line 1339
	mov	eax, DWORD PTR _i$[ebp]
	movzx	ecx, WORD PTR _vowelSignESpecialCases[eax*4+2]
	mov	DWORD PTR _targetUniChar$[ebp], ecx
; Line 1340
	mov	BYTE PTR _found$[ebp], 1
; Line 1341
	jmp	SHORT $LN94@UConverter@2
$LN93@UConverter@2:
; Line 1343
	jmp	SHORT $LN95@UConverter@2
$LN94@UConverter@2:
; Line 1344
	movsx	eax, BYTE PTR _found$[ebp]
	test	eax, eax
	je	SHORT $LN92@UConverter@2
; Line 1346
	movzx	eax, BYTE PTR _targetUniChar$[ebp]
	movzx	ecx, BYTE PTR _validityTable[eax]
	mov	edx, DWORD PTR _data$[ebp]
	and	ecx, DWORD PTR [edx+16]
	je	SHORT $LN92@UConverter@2
; Line 1348
	mov	eax, 65534				; 0000fffeH
	mov	ecx, DWORD PTR _contextCharToUnicode$[ebp]
	mov	WORD PTR [ecx], ax
; Line 1349
	mov	eax, DWORD PTR _toUnicodeStatus$[ebp]
	mov	DWORD PTR [eax], 65535			; 0000ffffH
; Line 1350
	jmp	$LN125@UConverter@2
$LN92@UConverter@2:
; Line 1353
	movzx	eax, BYTE PTR _sourceChar$[ebp]
	movzx	ecx, WORD PTR _toUnicodeTable[eax*2]
	mov	DWORD PTR _targetUniChar$[ebp], ecx
	movzx	eax, BYTE PTR _sourceChar$[ebp]
	cmp	eax, 160				; 000000a0H
	jle	SHORT $LN90@UConverter@2
	mov	eax, DWORD PTR _targetUniChar$[ebp]
	and	eax, 127				; 0000007fH
	movzx	ecx, BYTE PTR _validityTable[eax]
	mov	edx, DWORD PTR _data$[ebp]
	and	ecx, DWORD PTR [edx+16]
	jne	SHORT $LN90@UConverter@2
	mov	eax, DWORD PTR _data$[ebp]
	movzx	ecx, WORD PTR [eax+8]
	cmp	ecx, 768				; 00000300H
	jne	SHORT $LN88@UConverter@2
	cmp	DWORD PTR _targetUniChar$[ebp], 2353	; 00000931H
	je	SHORT $LN90@UConverter@2
$LN88@UConverter@2:
	mov	DWORD PTR _targetUniChar$[ebp], 65535	; 0000ffffH
$LN90@UConverter@2:
; Line 1354
	movzx	ax, BYTE PTR _sourceChar$[ebp]
	mov	ecx, DWORD PTR _contextCharToUnicode$[ebp]
	mov	WORD PTR [ecx], ax
; Line 1355
	jmp	$LN125@UConverter@2
$LN87@UConverter@2:
; Line 1359
	mov	eax, DWORD PTR _contextCharToUnicode$[ebp]
	movzx	ecx, WORD PTR [eax]
	cmp	ecx, 232				; 000000e8H
	jne	SHORT $LN86@UConverter@2
; Line 1360
	mov	DWORD PTR _targetUniChar$[ebp], 8205	; 0000200dH
; Line 1362
	mov	eax, 65534				; 0000fffeH
	mov	ecx, DWORD PTR _contextCharToUnicode$[ebp]
	mov	WORD PTR [ecx], ax
; Line 1363
	jmp	$LN125@UConverter@2
	jmp	$LN45@UConverter@2
$LN86@UConverter@2:
; Line 1364
	mov	eax, DWORD PTR _data$[ebp]
	movzx	ecx, WORD PTR [eax+8]
	cmp	ecx, 256				; 00000100H
	jne	$LN84@UConverter@2
	mov	eax, DWORD PTR _data$[ebp]
	movzx	ecx, WORD PTR [eax]
	cmp	ecx, 192				; 000000c0H
	jne	$LN84@UConverter@2
; Line 1366
	mov	eax, DWORD PTR _data$[ebp]
	cmp	DWORD PTR [eax+44], 0
	je	$LN83@UConverter@2
; Line 1367
	mov	eax, DWORD PTR _data$[ebp]
	cmp	DWORD PTR [eax+44], 160			; 000000a0H
	jle	SHORT $LN82@UConverter@2
	mov	eax, DWORD PTR _data$[ebp]
	cmp	DWORD PTR [eax+44], 8205		; 0000200dH
	je	SHORT $LN82@UConverter@2
	mov	eax, DWORD PTR _data$[ebp]
	cmp	DWORD PTR [eax+44], 8204		; 0000200cH
	je	SHORT $LN82@UConverter@2
	mov	eax, DWORD PTR _data$[ebp]
	cmp	DWORD PTR [eax+44], 2404		; 00000964H
	je	SHORT $LN82@UConverter@2
	mov	eax, DWORD PTR _data$[ebp]
	cmp	DWORD PTR [eax+44], 2405		; 00000965H
	je	SHORT $LN82@UConverter@2
	mov	eax, DWORD PTR _data$[ebp]
	mov	ecx, DWORD PTR _data$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR [eax+44], edx
$LN82@UConverter@2:
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _target$[ebp]
	cmp	ecx, DWORD PTR [eax+20]
	jae	SHORT $LN81@UConverter@2
	mov	eax, DWORD PTR _target$[ebp]
	mov	ecx, DWORD PTR _data$[ebp]
	mov	dx, WORD PTR [ecx+44]
	mov	WORD PTR [eax], dx
	mov	eax, DWORD PTR _target$[ebp]
	add	eax, 2
	mov	DWORD PTR _target$[ebp], eax
	mov	eax, DWORD PTR _args$[ebp]
	cmp	DWORD PTR [eax+24], 0
	je	SHORT $LN80@UConverter@2
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _source$[ebp]
	sub	ecx, DWORD PTR [eax+8]
	sub	ecx, 1
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	add	edx, 4
	mov	eax, DWORD PTR _args$[ebp]
	mov	DWORD PTR [eax+24], edx
$LN80@UConverter@2:
	jmp	SHORT $LN79@UConverter@2
$LN81@UConverter@2:
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+4]
	movsx	edx, BYTE PTR [eax+65]
	mov	eax, DWORD PTR _data$[ebp]
	mov	ax, WORD PTR [eax+44]
	mov	WORD PTR [ecx+edx*2+116], ax
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	al, BYTE PTR [edx+65]
	add	al, 1
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx+65], al
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
$LN79@UConverter@2:
; Line 1368
	mov	eax, DWORD PTR _data$[ebp]
	mov	DWORD PTR [eax+44], 0
$LN83@UConverter@2:
; Line 1373
	mov	DWORD PTR _targetUniChar$[ebp], 2652	; 00000a5cH
; Line 1374
	cmp	DWORD PTR _targetUniChar$[ebp], 160	; 000000a0H
	jbe	SHORT $LN78@UConverter@2
	cmp	DWORD PTR _targetUniChar$[ebp], 8205	; 0000200dH
	je	SHORT $LN78@UConverter@2
	cmp	DWORD PTR _targetUniChar$[ebp], 8204	; 0000200cH
	je	SHORT $LN78@UConverter@2
	cmp	DWORD PTR _targetUniChar$[ebp], 2404	; 00000964H
	je	SHORT $LN78@UConverter@2
	cmp	DWORD PTR _targetUniChar$[ebp], 2405	; 00000965H
	je	SHORT $LN78@UConverter@2
	mov	eax, DWORD PTR _targetUniChar$[ebp]
	mov	DWORD PTR _targetUniChar$[ebp], eax
$LN78@UConverter@2:
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _target$[ebp]
	cmp	ecx, DWORD PTR [eax+20]
	jae	SHORT $LN77@UConverter@2
	mov	eax, DWORD PTR _target$[ebp]
	mov	cx, WORD PTR _targetUniChar$[ebp]
	mov	WORD PTR [eax], cx
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 2
	mov	DWORD PTR _target$[ebp], edx
	mov	eax, DWORD PTR _args$[ebp]
	cmp	DWORD PTR [eax+24], 0
	je	SHORT $LN76@UConverter@2
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _source$[ebp]
	sub	ecx, DWORD PTR [eax+8]
	sub	ecx, 2
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	add	edx, 4
	mov	eax, DWORD PTR _args$[ebp]
	mov	DWORD PTR [eax+24], edx
$LN76@UConverter@2:
	jmp	SHORT $LN75@UConverter@2
$LN77@UConverter@2:
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+4]
	movsx	edx, BYTE PTR [eax+65]
	mov	ax, WORD PTR _targetUniChar$[ebp]
	mov	WORD PTR [ecx+edx*2+116], ax
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	al, BYTE PTR [edx+65]
	add	al, 1
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx+65], al
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
$LN75@UConverter@2:
; Line 1375
	mov	eax, DWORD PTR _err$[ebp]
	cmp	DWORD PTR [eax], 0
	jg	$LN74@UConverter@2
; Line 1376
	mov	DWORD PTR _targetUniChar$[ebp], 2637	; 00000a4dH
; Line 1377
	cmp	DWORD PTR _targetUniChar$[ebp], 160	; 000000a0H
	jbe	SHORT $LN73@UConverter@2
	cmp	DWORD PTR _targetUniChar$[ebp], 8205	; 0000200dH
	je	SHORT $LN73@UConverter@2
	cmp	DWORD PTR _targetUniChar$[ebp], 8204	; 0000200cH
	je	SHORT $LN73@UConverter@2
	cmp	DWORD PTR _targetUniChar$[ebp], 2404	; 00000964H
	je	SHORT $LN73@UConverter@2
	cmp	DWORD PTR _targetUniChar$[ebp], 2405	; 00000965H
	je	SHORT $LN73@UConverter@2
	mov	eax, DWORD PTR _targetUniChar$[ebp]
	mov	DWORD PTR _targetUniChar$[ebp], eax
$LN73@UConverter@2:
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _target$[ebp]
	cmp	ecx, DWORD PTR [eax+20]
	jae	SHORT $LN72@UConverter@2
	mov	eax, DWORD PTR _target$[ebp]
	mov	cx, WORD PTR _targetUniChar$[ebp]
	mov	WORD PTR [eax], cx
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 2
	mov	DWORD PTR _target$[ebp], edx
	mov	eax, DWORD PTR _args$[ebp]
	cmp	DWORD PTR [eax+24], 0
	je	SHORT $LN71@UConverter@2
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _source$[ebp]
	sub	ecx, DWORD PTR [eax+8]
	sub	ecx, 2
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	add	edx, 4
	mov	eax, DWORD PTR _args$[ebp]
	mov	DWORD PTR [eax+24], edx
$LN71@UConverter@2:
	jmp	SHORT $LN70@UConverter@2
$LN72@UConverter@2:
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+4]
	movsx	edx, BYTE PTR [eax+65]
	mov	ax, WORD PTR _targetUniChar$[ebp]
	mov	WORD PTR [ecx+edx*2+116], ax
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	al, BYTE PTR [edx+65]
	add	al, 1
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx+65], al
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
$LN70@UConverter@2:
; Line 1378
	mov	eax, DWORD PTR _err$[ebp]
	cmp	DWORD PTR [eax], 0
	jg	$LN69@UConverter@2
; Line 1379
	mov	DWORD PTR _targetUniChar$[ebp], 2617	; 00000a39H
; Line 1380
	cmp	DWORD PTR _targetUniChar$[ebp], 160	; 000000a0H
	jbe	SHORT $LN68@UConverter@2
	cmp	DWORD PTR _targetUniChar$[ebp], 8205	; 0000200dH
	je	SHORT $LN68@UConverter@2
	cmp	DWORD PTR _targetUniChar$[ebp], 8204	; 0000200cH
	je	SHORT $LN68@UConverter@2
	cmp	DWORD PTR _targetUniChar$[ebp], 2404	; 00000964H
	je	SHORT $LN68@UConverter@2
	cmp	DWORD PTR _targetUniChar$[ebp], 2405	; 00000965H
	je	SHORT $LN68@UConverter@2
	mov	eax, DWORD PTR _targetUniChar$[ebp]
	mov	DWORD PTR _targetUniChar$[ebp], eax
$LN68@UConverter@2:
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _target$[ebp]
	cmp	ecx, DWORD PTR [eax+20]
	jae	SHORT $LN67@UConverter@2
	mov	eax, DWORD PTR _target$[ebp]
	mov	cx, WORD PTR _targetUniChar$[ebp]
	mov	WORD PTR [eax], cx
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 2
	mov	DWORD PTR _target$[ebp], edx
	mov	eax, DWORD PTR _args$[ebp]
	cmp	DWORD PTR [eax+24], 0
	je	SHORT $LN66@UConverter@2
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _source$[ebp]
	sub	ecx, DWORD PTR [eax+8]
	sub	ecx, 2
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	add	edx, 4
	mov	eax, DWORD PTR _args$[ebp]
	mov	DWORD PTR [eax+24], edx
$LN66@UConverter@2:
	jmp	SHORT $LN65@UConverter@2
$LN67@UConverter@2:
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+4]
	movsx	edx, BYTE PTR [eax+65]
	mov	ax, WORD PTR _targetUniChar$[ebp]
	mov	WORD PTR [ecx+edx*2+116], ax
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	al, BYTE PTR [edx+65]
	add	al, 1
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx+65], al
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
$LN65@UConverter@2:
; Line 1381
	jmp	SHORT $LN64@UConverter@2
$LN69@UConverter@2:
; Line 1382
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+4]
	movsx	edx, BYTE PTR [eax+65]
	mov	eax, 2617				; 00000a39H
	mov	WORD PTR [ecx+edx*2+116], ax
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	al, BYTE PTR [edx+65]
	add	al, 1
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx+65], al
$LN64@UConverter@2:
; Line 1384
	jmp	SHORT $LN63@UConverter@2
$LN74@UConverter@2:
; Line 1385
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+4]
	movsx	edx, BYTE PTR [eax+65]
	mov	eax, 2637				; 00000a4dH
	mov	WORD PTR [ecx+edx*2+116], ax
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	al, BYTE PTR [edx+65]
	add	al, 1
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx+65], al
; Line 1386
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+4]
	movsx	edx, BYTE PTR [eax+65]
	mov	eax, 2617				; 00000a39H
	mov	WORD PTR [ecx+edx*2+116], ax
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	al, BYTE PTR [edx+65]
	add	al, 1
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx+65], al
$LN63@UConverter@2:
; Line 1388
	mov	eax, DWORD PTR _toUnicodeStatus$[ebp]
	mov	DWORD PTR [eax], 65535			; 0000ffffH
; Line 1389
	mov	eax, 65534				; 0000fffeH
	mov	ecx, DWORD PTR _data$[ebp]
	mov	WORD PTR [ecx], ax
; Line 1390
	jmp	$LN165@UConverter@2
; Line 1391
	jmp	$LN45@UConverter@2
$LN84@UConverter@2:
; Line 1393
	mov	DWORD PTR _i$[ebp], 1
; Line 1394
	mov	BYTE PTR _found$[ebp], 0
	jmp	SHORT $LN61@UConverter@2
$LN60@UConverter@2:
; Line 1395
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN61@UConverter@2:
	movzx	eax, WORD PTR _nuktaSpecialCases
	cmp	DWORD PTR _i$[ebp], eax
	jge	SHORT $LN59@UConverter@2
; Line 1397
	mov	eax, DWORD PTR _i$[ebp]
	movzx	ecx, WORD PTR _nuktaSpecialCases[eax*4]
	mov	edx, DWORD PTR _contextCharToUnicode$[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	ecx, eax
	jne	SHORT $LN58@UConverter@2
; Line 1398
	mov	eax, DWORD PTR _i$[ebp]
	movzx	ecx, WORD PTR _nuktaSpecialCases[eax*4+2]
	mov	DWORD PTR _targetUniChar$[ebp], ecx
; Line 1399
	mov	BYTE PTR _found$[ebp], 1
; Line 1400
	jmp	SHORT $LN59@UConverter@2
$LN58@UConverter@2:
; Line 1402
	jmp	SHORT $LN60@UConverter@2
$LN59@UConverter@2:
; Line 1403
	movsx	eax, BYTE PTR _found$[ebp]
	test	eax, eax
	je	$LN45@UConverter@2
; Line 1405
	movzx	eax, BYTE PTR _targetUniChar$[ebp]
	movzx	ecx, BYTE PTR _validityTable[eax]
	mov	edx, DWORD PTR _data$[ebp]
	and	ecx, DWORD PTR [edx+16]
	je	$LN45@UConverter@2
; Line 1407
	mov	eax, 65534				; 0000fffeH
	mov	ecx, DWORD PTR _contextCharToUnicode$[ebp]
	mov	WORD PTR [ecx], ax
; Line 1408
	mov	eax, DWORD PTR _toUnicodeStatus$[ebp]
	mov	DWORD PTR [eax], 65535			; 0000ffffH
; Line 1409
	mov	eax, DWORD PTR _data$[ebp]
	movzx	ecx, WORD PTR [eax+8]
	cmp	ecx, 256				; 00000100H
	jne	$LN55@UConverter@2
; Line 1411
	mov	eax, DWORD PTR _data$[ebp]
	cmp	DWORD PTR [eax+44], 0
	je	$LN54@UConverter@2
; Line 1412
	mov	eax, DWORD PTR _data$[ebp]
	cmp	DWORD PTR [eax+44], 160			; 000000a0H
	jle	SHORT $LN53@UConverter@2
	mov	eax, DWORD PTR _data$[ebp]
	cmp	DWORD PTR [eax+44], 8205		; 0000200dH
	je	SHORT $LN53@UConverter@2
	mov	eax, DWORD PTR _data$[ebp]
	cmp	DWORD PTR [eax+44], 8204		; 0000200cH
	je	SHORT $LN53@UConverter@2
	mov	eax, DWORD PTR _data$[ebp]
	cmp	DWORD PTR [eax+44], 2404		; 00000964H
	je	SHORT $LN53@UConverter@2
	mov	eax, DWORD PTR _data$[ebp]
	cmp	DWORD PTR [eax+44], 2405		; 00000965H
	je	SHORT $LN53@UConverter@2
	mov	eax, DWORD PTR _data$[ebp]
	mov	ecx, DWORD PTR _data$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR [eax+44], edx
$LN53@UConverter@2:
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _target$[ebp]
	cmp	ecx, DWORD PTR [eax+20]
	jae	SHORT $LN52@UConverter@2
	mov	eax, DWORD PTR _target$[ebp]
	mov	ecx, DWORD PTR _data$[ebp]
	mov	dx, WORD PTR [ecx+44]
	mov	WORD PTR [eax], dx
	mov	eax, DWORD PTR _target$[ebp]
	add	eax, 2
	mov	DWORD PTR _target$[ebp], eax
	mov	eax, DWORD PTR _args$[ebp]
	cmp	DWORD PTR [eax+24], 0
	je	SHORT $LN51@UConverter@2
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _source$[ebp]
	sub	ecx, DWORD PTR [eax+8]
	sub	ecx, 1
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	add	edx, 4
	mov	eax, DWORD PTR _args$[ebp]
	mov	DWORD PTR [eax+24], edx
$LN51@UConverter@2:
	jmp	SHORT $LN50@UConverter@2
$LN52@UConverter@2:
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+4]
	movsx	edx, BYTE PTR [eax+65]
	mov	eax, DWORD PTR _data$[ebp]
	mov	ax, WORD PTR [eax+44]
	mov	WORD PTR [ecx+edx*2+116], ax
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	al, BYTE PTR [edx+65]
	add	al, 1
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx+65], al
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
$LN50@UConverter@2:
; Line 1413
	mov	eax, DWORD PTR _data$[ebp]
	mov	DWORD PTR [eax+44], 0
$LN54@UConverter@2:
; Line 1415
	cmp	DWORD PTR _targetUniChar$[ebp], 160	; 000000a0H
	jbe	SHORT $LN49@UConverter@2
	cmp	DWORD PTR _targetUniChar$[ebp], 8205	; 0000200dH
	je	SHORT $LN49@UConverter@2
	cmp	DWORD PTR _targetUniChar$[ebp], 8204	; 0000200cH
	je	SHORT $LN49@UConverter@2
	cmp	DWORD PTR _targetUniChar$[ebp], 2404	; 00000964H
	je	SHORT $LN49@UConverter@2
	cmp	DWORD PTR _targetUniChar$[ebp], 2405	; 00000965H
	je	SHORT $LN49@UConverter@2
	mov	eax, DWORD PTR _data$[ebp]
	movzx	ecx, WORD PTR [eax+8]
	add	ecx, DWORD PTR _targetUniChar$[ebp]
	mov	DWORD PTR _targetUniChar$[ebp], ecx
$LN49@UConverter@2:
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _target$[ebp]
	cmp	ecx, DWORD PTR [eax+20]
	jae	SHORT $LN48@UConverter@2
	mov	eax, DWORD PTR _target$[ebp]
	mov	cx, WORD PTR _targetUniChar$[ebp]
	mov	WORD PTR [eax], cx
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 2
	mov	DWORD PTR _target$[ebp], edx
	mov	eax, DWORD PTR _args$[ebp]
	cmp	DWORD PTR [eax+24], 0
	je	SHORT $LN47@UConverter@2
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _source$[ebp]
	sub	ecx, DWORD PTR [eax+8]
	sub	ecx, 2
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	add	edx, 4
	mov	eax, DWORD PTR _args$[ebp]
	mov	DWORD PTR [eax+24], edx
$LN47@UConverter@2:
	jmp	SHORT $LN46@UConverter@2
$LN48@UConverter@2:
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+4]
	movsx	edx, BYTE PTR [eax+65]
	mov	ax, WORD PTR _targetUniChar$[ebp]
	mov	WORD PTR [ecx+edx*2+116], ax
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	al, BYTE PTR [edx+65]
	add	al, 1
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx+65], al
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
$LN46@UConverter@2:
; Line 1416
	jmp	$LN165@UConverter@2
$LN55@UConverter@2:
; Line 1418
	jmp	SHORT $LN125@UConverter@2
$LN45@UConverter@2:
; Line 1424
	movzx	eax, BYTE PTR _sourceChar$[ebp]
	movzx	ecx, WORD PTR _toUnicodeTable[eax*2]
	mov	DWORD PTR _targetUniChar$[ebp], ecx
	movzx	eax, BYTE PTR _sourceChar$[ebp]
	cmp	eax, 160				; 000000a0H
	jle	SHORT $LN44@UConverter@2
	mov	eax, DWORD PTR _targetUniChar$[ebp]
	and	eax, 127				; 0000007fH
	movzx	ecx, BYTE PTR _validityTable[eax]
	mov	edx, DWORD PTR _data$[ebp]
	and	ecx, DWORD PTR [edx+16]
	jne	SHORT $LN44@UConverter@2
	mov	eax, DWORD PTR _data$[ebp]
	movzx	ecx, WORD PTR [eax+8]
	cmp	ecx, 768				; 00000300H
	jne	SHORT $LN42@UConverter@2
	cmp	DWORD PTR _targetUniChar$[ebp], 2353	; 00000931H
	je	SHORT $LN44@UConverter@2
$LN42@UConverter@2:
	mov	DWORD PTR _targetUniChar$[ebp], 65535	; 0000ffffH
$LN44@UConverter@2:
; Line 1426
	movzx	ax, BYTE PTR _sourceChar$[ebp]
	mov	ecx, DWORD PTR _contextCharToUnicode$[ebp]
	mov	WORD PTR [ecx], ax
$LN125@UConverter@2:
; Line 1430
	mov	eax, DWORD PTR _toUnicodeStatus$[ebp]
	cmp	DWORD PTR [eax], 65535			; 0000ffffH
	je	$LN41@UConverter@2
; Line 1433
	mov	eax, DWORD PTR _data$[ebp]
	movzx	ecx, WORD PTR [eax+8]
	cmp	ecx, 256				; 00000100H
	jne	$LN40@UConverter@2
	mov	eax, DWORD PTR _data$[ebp]
	cmp	DWORD PTR [eax+44], 0
	je	$LN40@UConverter@2
	mov	eax, DWORD PTR _data$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	push	ecx
	call	_isPNJConsonant
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	$LN40@UConverter@2
	mov	eax, DWORD PTR _toUnicodeStatus$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 256				; 00000100H
	cmp	ecx, 2637				; 00000a4dH
	jne	$LN40@UConverter@2
	mov	eax, DWORD PTR _targetUniChar$[ebp]
	add	eax, 256				; 00000100H
	mov	ecx, DWORD PTR _data$[ebp]
	cmp	eax, DWORD PTR [ecx+44]
	jne	$LN40@UConverter@2
; Line 1435
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _source$[ebp]
	sub	ecx, DWORD PTR [eax+8]
	sub	ecx, 3
	mov	DWORD PTR _offset$[ebp], ecx
; Line 1436
	mov	DWORD PTR _tempTargetUniChar$[ebp], 2673 ; 00000a71H
; Line 1437
	cmp	DWORD PTR _tempTargetUniChar$[ebp], 160	; 000000a0H
	jle	SHORT $LN39@UConverter@2
	cmp	DWORD PTR _tempTargetUniChar$[ebp], 8205 ; 0000200dH
	je	SHORT $LN39@UConverter@2
	cmp	DWORD PTR _tempTargetUniChar$[ebp], 8204 ; 0000200cH
	je	SHORT $LN39@UConverter@2
	cmp	DWORD PTR _tempTargetUniChar$[ebp], 2404 ; 00000964H
	je	SHORT $LN39@UConverter@2
	cmp	DWORD PTR _tempTargetUniChar$[ebp], 2405 ; 00000965H
	je	SHORT $LN39@UConverter@2
	mov	eax, DWORD PTR _tempTargetUniChar$[ebp]
	mov	DWORD PTR _tempTargetUniChar$[ebp], eax
$LN39@UConverter@2:
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _target$[ebp]
	cmp	ecx, DWORD PTR [eax+20]
	jae	SHORT $LN38@UConverter@2
	mov	eax, DWORD PTR _target$[ebp]
	mov	cx, WORD PTR _tempTargetUniChar$[ebp]
	mov	WORD PTR [eax], cx
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 2
	mov	DWORD PTR _target$[ebp], edx
	mov	eax, DWORD PTR _args$[ebp]
	cmp	DWORD PTR [eax+24], 0
	je	SHORT $LN37@UConverter@2
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR _offset$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	add	ecx, 4
	mov	edx, DWORD PTR _args$[ebp]
	mov	DWORD PTR [edx+24], ecx
$LN37@UConverter@2:
	jmp	SHORT $LN36@UConverter@2
$LN38@UConverter@2:
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+4]
	movsx	edx, BYTE PTR [eax+65]
	mov	ax, WORD PTR _tempTargetUniChar$[ebp]
	mov	WORD PTR [ecx+edx*2+116], ax
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	al, BYTE PTR [edx+65]
	add	al, 1
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx+65], al
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
$LN36@UConverter@2:
; Line 1438
	mov	eax, DWORD PTR _data$[ebp]
	cmp	DWORD PTR [eax+44], 160			; 000000a0H
	jle	SHORT $LN35@UConverter@2
	mov	eax, DWORD PTR _data$[ebp]
	cmp	DWORD PTR [eax+44], 8205		; 0000200dH
	je	SHORT $LN35@UConverter@2
	mov	eax, DWORD PTR _data$[ebp]
	cmp	DWORD PTR [eax+44], 8204		; 0000200cH
	je	SHORT $LN35@UConverter@2
	mov	eax, DWORD PTR _data$[ebp]
	cmp	DWORD PTR [eax+44], 2404		; 00000964H
	je	SHORT $LN35@UConverter@2
	mov	eax, DWORD PTR _data$[ebp]
	cmp	DWORD PTR [eax+44], 2405		; 00000965H
	je	SHORT $LN35@UConverter@2
	mov	eax, DWORD PTR _data$[ebp]
	mov	ecx, DWORD PTR _data$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR [eax+44], edx
$LN35@UConverter@2:
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _target$[ebp]
	cmp	ecx, DWORD PTR [eax+20]
	jae	SHORT $LN34@UConverter@2
	mov	eax, DWORD PTR _target$[ebp]
	mov	ecx, DWORD PTR _data$[ebp]
	mov	dx, WORD PTR [ecx+44]
	mov	WORD PTR [eax], dx
	mov	eax, DWORD PTR _target$[ebp]
	add	eax, 2
	mov	DWORD PTR _target$[ebp], eax
	mov	eax, DWORD PTR _args$[ebp]
	cmp	DWORD PTR [eax+24], 0
	je	SHORT $LN33@UConverter@2
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR _offset$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	add	ecx, 4
	mov	edx, DWORD PTR _args$[ebp]
	mov	DWORD PTR [edx+24], ecx
$LN33@UConverter@2:
	jmp	SHORT $LN32@UConverter@2
$LN34@UConverter@2:
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+4]
	movsx	edx, BYTE PTR [eax+65]
	mov	eax, DWORD PTR _data$[ebp]
	mov	ax, WORD PTR [eax+44]
	mov	WORD PTR [ecx+edx*2+116], ax
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	al, BYTE PTR [edx+65]
	add	al, 1
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx+65], al
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
$LN32@UConverter@2:
; Line 1439
	mov	eax, DWORD PTR _data$[ebp]
	mov	DWORD PTR [eax+44], 0
; Line 1440
	mov	eax, DWORD PTR _toUnicodeStatus$[ebp]
	mov	DWORD PTR [eax], 65535			; 0000ffffH
; Line 1441
	jmp	$LN165@UConverter@2
; Line 1442
	jmp	$LN31@UConverter@2
$LN40@UConverter@2:
; Line 1444
	mov	eax, DWORD PTR _data$[ebp]
	cmp	DWORD PTR [eax+44], 0
	je	$LN30@UConverter@2
; Line 1445
	mov	eax, DWORD PTR _data$[ebp]
	cmp	DWORD PTR [eax+44], 160			; 000000a0H
	jle	SHORT $LN29@UConverter@2
	mov	eax, DWORD PTR _data$[ebp]
	cmp	DWORD PTR [eax+44], 8205		; 0000200dH
	je	SHORT $LN29@UConverter@2
	mov	eax, DWORD PTR _data$[ebp]
	cmp	DWORD PTR [eax+44], 8204		; 0000200cH
	je	SHORT $LN29@UConverter@2
	mov	eax, DWORD PTR _data$[ebp]
	cmp	DWORD PTR [eax+44], 2404		; 00000964H
	je	SHORT $LN29@UConverter@2
	mov	eax, DWORD PTR _data$[ebp]
	cmp	DWORD PTR [eax+44], 2405		; 00000965H
	je	SHORT $LN29@UConverter@2
	mov	eax, DWORD PTR _data$[ebp]
	mov	ecx, DWORD PTR _data$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR [eax+44], edx
$LN29@UConverter@2:
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _target$[ebp]
	cmp	ecx, DWORD PTR [eax+20]
	jae	SHORT $LN28@UConverter@2
	mov	eax, DWORD PTR _target$[ebp]
	mov	ecx, DWORD PTR _data$[ebp]
	mov	dx, WORD PTR [ecx+44]
	mov	WORD PTR [eax], dx
	mov	eax, DWORD PTR _target$[ebp]
	add	eax, 2
	mov	DWORD PTR _target$[ebp], eax
	mov	eax, DWORD PTR _args$[ebp]
	cmp	DWORD PTR [eax+24], 0
	je	SHORT $LN27@UConverter@2
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _source$[ebp]
	sub	ecx, DWORD PTR [eax+8]
	sub	ecx, 1
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	add	edx, 4
	mov	eax, DWORD PTR _args$[ebp]
	mov	DWORD PTR [eax+24], edx
$LN27@UConverter@2:
	jmp	SHORT $LN26@UConverter@2
$LN28@UConverter@2:
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+4]
	movsx	edx, BYTE PTR [eax+65]
	mov	eax, DWORD PTR _data$[ebp]
	mov	ax, WORD PTR [eax+44]
	mov	WORD PTR [ecx+edx*2+116], ax
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	al, BYTE PTR [edx+65]
	add	al, 1
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx+65], al
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
$LN26@UConverter@2:
; Line 1446
	mov	eax, DWORD PTR _data$[ebp]
	mov	DWORD PTR [eax+44], 0
$LN30@UConverter@2:
; Line 1451
	mov	eax, DWORD PTR _data$[ebp]
	movzx	ecx, WORD PTR [eax+8]
	cmp	ecx, 256				; 00000100H
	jne	$LN25@UConverter@2
	mov	eax, DWORD PTR _targetUniChar$[ebp]
	add	eax, 256				; 00000100H
	cmp	eax, 2562				; 00000a02H
	jne	$LN25@UConverter@2
	mov	eax, DWORD PTR _toUnicodeStatus$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 256				; 00000100H
	push	ecx
	call	_isPNJBindiTippi
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	$LN25@UConverter@2
; Line 1452
	mov	DWORD PTR _targetUniChar$[ebp], 2416	; 00000970H
; Line 1453
	mov	eax, DWORD PTR _toUnicodeStatus$[ebp]
	cmp	DWORD PTR [eax], 160			; 000000a0H
	jle	SHORT $LN24@UConverter@2
	mov	eax, DWORD PTR _toUnicodeStatus$[ebp]
	cmp	DWORD PTR [eax], 8205			; 0000200dH
	je	SHORT $LN24@UConverter@2
	mov	eax, DWORD PTR _toUnicodeStatus$[ebp]
	cmp	DWORD PTR [eax], 8204			; 0000200cH
	je	SHORT $LN24@UConverter@2
	mov	eax, DWORD PTR _toUnicodeStatus$[ebp]
	cmp	DWORD PTR [eax], 2404			; 00000964H
	je	SHORT $LN24@UConverter@2
	mov	eax, DWORD PTR _toUnicodeStatus$[ebp]
	cmp	DWORD PTR [eax], 2405			; 00000965H
	je	SHORT $LN24@UConverter@2
	mov	eax, DWORD PTR _toUnicodeStatus$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 256				; 00000100H
	mov	edx, DWORD PTR _toUnicodeStatus$[ebp]
	mov	DWORD PTR [edx], ecx
$LN24@UConverter@2:
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _target$[ebp]
	cmp	ecx, DWORD PTR [eax+20]
	jae	SHORT $LN23@UConverter@2
	mov	eax, DWORD PTR _target$[ebp]
	mov	ecx, DWORD PTR _toUnicodeStatus$[ebp]
	mov	dx, WORD PTR [ecx]
	mov	WORD PTR [eax], dx
	mov	eax, DWORD PTR _target$[ebp]
	add	eax, 2
	mov	DWORD PTR _target$[ebp], eax
	mov	eax, DWORD PTR _args$[ebp]
	cmp	DWORD PTR [eax+24], 0
	je	SHORT $LN22@UConverter@2
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _source$[ebp]
	sub	ecx, DWORD PTR [eax+8]
	sub	ecx, 2
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	add	edx, 4
	mov	eax, DWORD PTR _args$[ebp]
	mov	DWORD PTR [eax+24], edx
$LN22@UConverter@2:
	jmp	SHORT $LN21@UConverter@2
$LN23@UConverter@2:
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+4]
	movsx	edx, BYTE PTR [eax+65]
	mov	eax, DWORD PTR _toUnicodeStatus$[ebp]
	mov	ax, WORD PTR [eax]
	mov	WORD PTR [ecx+edx*2+116], ax
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	al, BYTE PTR [edx+65]
	add	al, 1
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx+65], al
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
$LN21@UConverter@2:
	jmp	$LN31@UConverter@2
$LN25@UConverter@2:
; Line 1454
	mov	eax, DWORD PTR _data$[ebp]
	movzx	ecx, WORD PTR [eax+8]
	cmp	ecx, 256				; 00000100H
	jne	SHORT $LN19@UConverter@2
	mov	eax, DWORD PTR _targetUniChar$[ebp]
	add	eax, 256				; 00000100H
	cmp	eax, 2637				; 00000a4dH
	jne	SHORT $LN19@UConverter@2
	mov	eax, DWORD PTR _toUnicodeStatus$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 256				; 00000100H
	push	ecx
	call	_isPNJConsonant
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN19@UConverter@2
; Line 1456
	mov	eax, DWORD PTR _toUnicodeStatus$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 256				; 00000100H
	mov	edx, DWORD PTR _data$[ebp]
	mov	DWORD PTR [edx+44], ecx
; Line 1457
	jmp	$LN31@UConverter@2
$LN19@UConverter@2:
; Line 1459
	mov	eax, DWORD PTR _toUnicodeStatus$[ebp]
	cmp	DWORD PTR [eax], 160			; 000000a0H
	jle	SHORT $LN17@UConverter@2
	mov	eax, DWORD PTR _toUnicodeStatus$[ebp]
	cmp	DWORD PTR [eax], 8205			; 0000200dH
	je	SHORT $LN17@UConverter@2
	mov	eax, DWORD PTR _toUnicodeStatus$[ebp]
	cmp	DWORD PTR [eax], 8204			; 0000200cH
	je	SHORT $LN17@UConverter@2
	mov	eax, DWORD PTR _toUnicodeStatus$[ebp]
	cmp	DWORD PTR [eax], 2404			; 00000964H
	je	SHORT $LN17@UConverter@2
	mov	eax, DWORD PTR _toUnicodeStatus$[ebp]
	cmp	DWORD PTR [eax], 2405			; 00000965H
	je	SHORT $LN17@UConverter@2
	mov	eax, DWORD PTR _data$[ebp]
	movzx	ecx, WORD PTR [eax+8]
	mov	edx, DWORD PTR _toUnicodeStatus$[ebp]
	add	ecx, DWORD PTR [edx]
	mov	eax, DWORD PTR _toUnicodeStatus$[ebp]
	mov	DWORD PTR [eax], ecx
$LN17@UConverter@2:
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _target$[ebp]
	cmp	ecx, DWORD PTR [eax+20]
	jae	SHORT $LN16@UConverter@2
	mov	eax, DWORD PTR _target$[ebp]
	mov	ecx, DWORD PTR _toUnicodeStatus$[ebp]
	mov	dx, WORD PTR [ecx]
	mov	WORD PTR [eax], dx
	mov	eax, DWORD PTR _target$[ebp]
	add	eax, 2
	mov	DWORD PTR _target$[ebp], eax
	mov	eax, DWORD PTR _args$[ebp]
	cmp	DWORD PTR [eax+24], 0
	je	SHORT $LN15@UConverter@2
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _source$[ebp]
	sub	ecx, DWORD PTR [eax+8]
	sub	ecx, 2
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	add	edx, 4
	mov	eax, DWORD PTR _args$[ebp]
	mov	DWORD PTR [eax+24], edx
$LN15@UConverter@2:
	jmp	SHORT $LN31@UConverter@2
$LN16@UConverter@2:
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+4]
	movsx	edx, BYTE PTR [eax+65]
	mov	eax, DWORD PTR _toUnicodeStatus$[ebp]
	mov	ax, WORD PTR [eax]
	mov	WORD PTR [ecx+edx*2+116], ax
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	al, BYTE PTR [edx+65]
	add	al, 1
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx+65], al
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
$LN31@UConverter@2:
; Line 1462
	mov	eax, DWORD PTR _toUnicodeStatus$[ebp]
	mov	DWORD PTR [eax], 65535			; 0000ffffH
$LN41@UConverter@2:
; Line 1465
	cmp	DWORD PTR _targetUniChar$[ebp], 65535	; 0000ffffH
	je	SHORT $LN13@UConverter@2
; Line 1467
	movzx	eax, WORD PTR _targetUniChar$[ebp]
	mov	ecx, DWORD PTR _toUnicodeStatus$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 1468
	mov	eax, DWORD PTR _data$[ebp]
	movsx	ecx, BYTE PTR [eax+25]
	cmp	ecx, 1
	jne	SHORT $LN12@UConverter@2
; Line 1469
	mov	eax, DWORD PTR _data$[ebp]
	mov	ecx, DWORD PTR _data$[ebp]
	mov	dx, WORD PTR [ecx+4]
	mov	WORD PTR [eax+8], dx
; Line 1470
	mov	eax, DWORD PTR _data$[ebp]
	mov	ecx, DWORD PTR _data$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+16], edx
; Line 1471
	mov	eax, DWORD PTR _data$[ebp]
	mov	BYTE PTR [eax+25], 0
$LN12@UConverter@2:
; Line 1473
	jmp	SHORT $LN11@UConverter@2
$LN13@UConverter@2:
; Line 1478
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 10			; 0000000aH
$CALLBACK$10815:
; Line 1480
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	dl, BYTE PTR _sourceChar$[ebp]
	mov	BYTE PTR [ecx+37], dl
; Line 1481
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx+36], 1
; Line 1482
	jmp	SHORT $LN164@UConverter@2
$LN11@UConverter@2:
; Line 1485
	jmp	SHORT $LN10@UConverter@2
$LN163@UConverter@2:
; Line 1486
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
; Line 1487
	jmp	SHORT $LN164@UConverter@2
$LN10@UConverter@2:
; Line 1489
	jmp	$LN165@UConverter@2
$LN164@UConverter@2:
; Line 1491
	mov	eax, DWORD PTR _err$[ebp]
	cmp	DWORD PTR [eax], 0
	jg	$LN9@UConverter@2
	mov	eax, DWORD PTR _args$[ebp]
	movsx	ecx, BYTE PTR [eax+2]
	test	ecx, ecx
	je	$LN9@UConverter@2
	mov	eax, DWORD PTR _source$[ebp]
	cmp	eax, DWORD PTR _sourceLimit$[ebp]
	jne	$LN9@UConverter@2
; Line 1493
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _cnv$11047[ebp], ecx
; Line 1495
	mov	eax, DWORD PTR _contextCharToUnicode$[ebp]
	movzx	ecx, WORD PTR [eax]
	cmp	ecx, 239				; 000000efH
	je	SHORT $LN7@UConverter@2
	mov	eax, DWORD PTR _contextCharToUnicode$[ebp]
	movzx	ecx, WORD PTR [eax]
	cmp	ecx, 240				; 000000f0H
	je	SHORT $LN7@UConverter@2
	mov	eax, DWORD PTR _contextCharToUnicode$[ebp]
	movzx	ecx, WORD PTR [eax]
	cmp	ecx, 217				; 000000d9H
	jne	SHORT $LN8@UConverter@2
$LN7@UConverter@2:
; Line 1497
	mov	eax, DWORD PTR _cnv$11047[ebp]
	mov	ecx, DWORD PTR _contextCharToUnicode$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax+37], dl
; Line 1498
	mov	eax, DWORD PTR _cnv$11047[ebp]
	mov	BYTE PTR [eax+36], 1
; Line 1501
	mov	eax, 65534				; 0000fffeH
	mov	ecx, DWORD PTR _contextCharToUnicode$[ebp]
	mov	WORD PTR [ecx], ax
; Line 1502
	jmp	SHORT $LN6@UConverter@2
$LN8@UConverter@2:
; Line 1503
	mov	eax, DWORD PTR _cnv$11047[ebp]
	mov	BYTE PTR [eax+36], 0
$LN6@UConverter@2:
; Line 1506
	mov	eax, DWORD PTR _toUnicodeStatus$[ebp]
	cmp	DWORD PTR [eax], 65535			; 0000ffffH
	je	$LN9@UConverter@2
; Line 1508
	mov	eax, DWORD PTR _toUnicodeStatus$[ebp]
	cmp	DWORD PTR [eax], 160			; 000000a0H
	jle	SHORT $LN4@UConverter@2
	mov	eax, DWORD PTR _toUnicodeStatus$[ebp]
	cmp	DWORD PTR [eax], 8205			; 0000200dH
	je	SHORT $LN4@UConverter@2
	mov	eax, DWORD PTR _toUnicodeStatus$[ebp]
	cmp	DWORD PTR [eax], 8204			; 0000200cH
	je	SHORT $LN4@UConverter@2
	mov	eax, DWORD PTR _toUnicodeStatus$[ebp]
	cmp	DWORD PTR [eax], 2404			; 00000964H
	je	SHORT $LN4@UConverter@2
	mov	eax, DWORD PTR _toUnicodeStatus$[ebp]
	cmp	DWORD PTR [eax], 2405			; 00000965H
	je	SHORT $LN4@UConverter@2
	mov	eax, DWORD PTR _data$[ebp]
	movzx	ecx, WORD PTR [eax+8]
	mov	edx, DWORD PTR _toUnicodeStatus$[ebp]
	add	ecx, DWORD PTR [edx]
	mov	eax, DWORD PTR _toUnicodeStatus$[ebp]
	mov	DWORD PTR [eax], ecx
$LN4@UConverter@2:
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _target$[ebp]
	cmp	ecx, DWORD PTR [eax+20]
	jae	SHORT $LN3@UConverter@2
	mov	eax, DWORD PTR _target$[ebp]
	mov	ecx, DWORD PTR _toUnicodeStatus$[ebp]
	mov	dx, WORD PTR [ecx]
	mov	WORD PTR [eax], dx
	mov	eax, DWORD PTR _target$[ebp]
	add	eax, 2
	mov	DWORD PTR _target$[ebp], eax
	mov	eax, DWORD PTR _args$[ebp]
	cmp	DWORD PTR [eax+24], 0
	je	SHORT $LN2@UConverter@2
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _source$[ebp]
	sub	ecx, DWORD PTR [eax+8]
	sub	ecx, 1
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	add	edx, 4
	mov	eax, DWORD PTR _args$[ebp]
	mov	DWORD PTR [eax+24], edx
$LN2@UConverter@2:
	jmp	SHORT $LN1@UConverter@2
$LN3@UConverter@2:
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+4]
	movsx	edx, BYTE PTR [eax+65]
	mov	eax, DWORD PTR _toUnicodeStatus$[ebp]
	mov	ax, WORD PTR [eax]
	mov	WORD PTR [ecx+edx*2+116], ax
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	al, BYTE PTR [edx+65]
	add	al, 1
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx+65], al
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
$LN1@UConverter@2:
; Line 1509
	mov	eax, DWORD PTR _toUnicodeStatus$[ebp]
	mov	DWORD PTR [eax], 65535			; 0000ffffH
$LN9@UConverter@2:
; Line 1513
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _target$[ebp]
	mov	DWORD PTR [eax+16], ecx
; Line 1514
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _source$[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN168@UConverter@2:
; Line 1515
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 364				; 0000016cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN178@UConverter@2:
	DD	$LN101@UConverter@2
	DD	$LN124@UConverter@2
	DD	$LN97@UConverter@2
	DD	$LN107@UConverter@2
	DD	$LN87@UConverter@2
	DD	$LN113@UConverter@2
	DD	$LN45@UConverter@2
$LN177@UConverter@2:
	DB	0
	DB	6
	DB	6
	DB	0
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	1
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	2
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	3
	DB	4
	DB	5
	DB	6
	DB	6
	DB	6
	DB	6
	DB	1
	DB	1
_UConverter_toUnicode_ISCII_OFFSETS_LOGIC ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _isPNJBindiTippi
_TEXT	SEGMENT
_c$ = 8							; size = 4
_isPNJBindiTippi PROC					; COMDAT
; Line 180
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 181
	cmp	DWORD PTR _c$[ebp], 2560		; 00000a00H
	jl	SHORT $LN2@isPNJBindi
	cmp	DWORD PTR _c$[ebp], 2640		; 00000a50H
	jl	SHORT $LN3@isPNJBindi
$LN2@isPNJBindi:
; Line 182
	xor	al, al
	jmp	SHORT $LN4@isPNJBindi
; Line 183
	jmp	SHORT $LN4@isPNJBindi
$LN3@isPNJBindi:
; Line 184
	mov	eax, DWORD PTR _c$[ebp]
	movzx	eax, BYTE PTR _pnjMap[eax-2560]
	sar	eax, 1
$LN4@isPNJBindi:
; Line 186
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_isPNJBindiTippi ENDP
_TEXT	ENDS
EXTRN	_memcpy:PROC
EXTRN	_uprv_checkValidMemory:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __ISCII_SafeClone
_TEXT	SEGMENT
_bufferSizeNeeded$ = -20				; size = 4
_localClone$ = -8					; size = 4
_cnv$ = 8						; size = 4
_stackBuffer$ = 12					; size = 4
_pBufferSize$ = 16					; size = 4
_status$ = 20						; size = 4
__ISCII_SafeClone PROC					; COMDAT
; Line 1528
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1530
	mov	DWORD PTR _bufferSizeNeeded$[ebp], 308	; 00000134H
; Line 1532
	mov	eax, DWORD PTR _status$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN2@ISCII_Safe
; Line 1533
	xor	eax, eax
	jmp	SHORT $LN3@ISCII_Safe
$LN2@ISCII_Safe:
; Line 1536
	mov	eax, DWORD PTR _pBufferSize$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN1@ISCII_Safe
; Line 1537
	mov	eax, DWORD PTR _pBufferSize$[ebp]
	mov	ecx, DWORD PTR _bufferSizeNeeded$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 1538
	xor	eax, eax
	jmp	SHORT $LN3@ISCII_Safe
$LN1@ISCII_Safe:
; Line 1541
	mov	eax, DWORD PTR _stackBuffer$[ebp]
	mov	DWORD PTR _localClone$[ebp], eax
; Line 1544
	push	1
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_uprv_checkValidMemory
	add	esp, 8
	push	48					; 00000030H
	mov	edx, DWORD PTR _cnv$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _localClone$[ebp]
	add	ecx, 260				; 00000104H
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 1545
	mov	eax, DWORD PTR _localClone$[ebp]
	add	eax, 260				; 00000104H
	mov	ecx, DWORD PTR _localClone$[ebp]
	mov	DWORD PTR [ecx+8], eax
; Line 1546
	mov	eax, DWORD PTR _localClone$[ebp]
	mov	BYTE PTR [eax+34], 1
; Line 1548
	mov	eax, DWORD PTR _localClone$[ebp]
$LN3@ISCII_Safe:
; Line 1549
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__ISCII_SafeClone ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __ISCIIGetUnicodeSet
_TEXT	SEGMENT
_mask$ = -29						; size = 1
_script$ = -20						; size = 4
_idx$ = -8						; size = 4
_cnv$ = 8						; size = 4
_sa$ = 12						; size = 4
_which$ = 16						; size = 4
_pErrorCode$ = 20					; size = 4
__ISCIIGetUnicodeSet PROC				; COMDAT
; Line 1556
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1562
	mov	esi, esp
	push	160					; 000000a0H
	push	0
	mov	eax, DWORD PTR _sa$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _sa$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1563
	mov	DWORD PTR _script$[ebp], 0
	jmp	SHORT $LN8@ISCIIGetUn
$LN7@ISCIIGetUn:
	mov	eax, DWORD PTR _script$[ebp]
	add	eax, 1
	mov	DWORD PTR _script$[ebp], eax
$LN8@ISCIIGetUn:
	cmp	DWORD PTR _script$[ebp], 8
	jg	SHORT $LN6@ISCIIGetUn
; Line 1564
	mov	eax, DWORD PTR _script$[ebp]
	imul	eax, 12					; 0000000cH
	mov	cl, BYTE PTR _lookupInitialData[eax+4]
	mov	BYTE PTR _mask$[ebp], cl
; Line 1565
	mov	DWORD PTR _idx$[ebp], 0
	jmp	SHORT $LN5@ISCIIGetUn
$LN4@ISCIIGetUn:
	mov	eax, DWORD PTR _idx$[ebp]
	add	eax, 1
	mov	DWORD PTR _idx$[ebp], eax
$LN5@ISCIIGetUn:
	cmp	DWORD PTR _idx$[ebp], 128		; 00000080H
	jge	SHORT $LN3@ISCIIGetUn
; Line 1567
	mov	eax, DWORD PTR _idx$[ebp]
	movzx	ecx, BYTE PTR _validityTable[eax]
	movzx	edx, BYTE PTR _mask$[ebp]
	and	ecx, edx
	jne	SHORT $LN1@ISCIIGetUn
	cmp	DWORD PTR _script$[ebp], 6
	jne	SHORT $LN2@ISCIIGetUn
	cmp	DWORD PTR _idx$[ebp], 49		; 00000031H
	jne	SHORT $LN2@ISCIIGetUn
$LN1@ISCIIGetUn:
; Line 1568
	mov	eax, DWORD PTR _script$[ebp]
	shl	eax, 7
	mov	ecx, DWORD PTR _idx$[ebp]
	lea	edx, DWORD PTR [ecx+eax+2304]
	mov	esi, esp
	push	edx
	mov	eax, DWORD PTR _sa$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _sa$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@ISCIIGetUn:
; Line 1570
	jmp	SHORT $LN4@ISCIIGetUn
$LN3@ISCIIGetUn:
; Line 1571
	jmp	$LN7@ISCIIGetUn
$LN6@ISCIIGetUn:
; Line 1572
	mov	esi, esp
	push	2404					; 00000964H
	mov	eax, DWORD PTR _sa$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _sa$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1573
	mov	esi, esp
	push	2405					; 00000965H
	mov	eax, DWORD PTR _sa$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _sa$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1574
	mov	esi, esp
	push	8204					; 0000200cH
	mov	eax, DWORD PTR _sa$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _sa$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1575
	mov	esi, esp
	push	8205					; 0000200dH
	mov	eax, DWORD PTR _sa$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _sa$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1576
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__ISCIIGetUnicodeSet ENDP
_TEXT	ENDS
END
