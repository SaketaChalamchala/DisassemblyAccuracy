; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\mozilla\intl\icu\source\common\ucnvscsu.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	__SCSUData_56
EXTRN	_ucnv_getCompleteUnicodeSet_56:PROC
CONST	SEGMENT
_staticOffsets DD 00H
	DD	080H
	DD	0100H
	DD	0300H
	DD	02000H
	DD	02080H
	DD	02100H
	DD	03000H
_initialDynamicOffsets DD 080H
	DD	0c0H
	DD	0400H
	DD	0600H
	DD	0900H
	DD	03040H
	DD	030a0H
	DD	0ff00H
_fixedOffsets DD 0c0H
	DD	0250H
	DD	0370H
	DD	0530H
	DD	03040H
	DD	030a0H
	DD	0ff60H
_initialWindowUse DB 07H
	DB	00H
	DB	03H
	DB	02H
	DB	04H
	DB	05H
	DB	06H
	DB	01H
_initialWindowUse_ja DB 03H
	DB	02H
	DB	04H
	DB	01H
	DB	00H
	DB	07H
	DB	05H
	DB	06H
	ORG $+4
__SCSUImpl DD	018H
	DD	00H
	DD	00H
	DD	FLAT:__SCSUOpen
	DD	FLAT:__SCSUClose
	DD	FLAT:__SCSUReset
	DD	FLAT:__SCSUToUnicode
	DD	FLAT:__SCSUToUnicodeWithOffsets
	DD	FLAT:__SCSUFromUnicode
	DD	FLAT:__SCSUFromUnicodeWithOffsets
	DD	00H
	DD	00H
	DD	FLAT:__SCSUGetName
	DD	00H
	DD	FLAT:__SCSUSafeClone
	DD	FLAT:_ucnv_getCompleteUnicodeSet_56
	ORG $+8
__SCSUStaticData DD 064H
	DB	'SCSU', 00H
	ORG $+55
	DD	04bcH
	DB	00H
	DB	018H
	DB	01H
	DB	03H
	DB	0eH
	DB	0ffH
	DB	0fdH
	DB	00H
	DB	03H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+4
__SCSUData_56 DD 0e4H
	DD	0ffffffffH
	DD	00H
	DD	FLAT:__SCSUStaticData
	DB	00H
	DB	00H
	ORG $+2
	DD	FLAT:__SCSUImpl
	DD	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+1
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	ORG $+126
	DD	00H
	DD	00H
	DD	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+1
	DW	00H
	ORG $+2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
CONST	ENDS
EXTRN	_memcpy:PROC
EXTRN	_uprv_checkValidMemory:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File d:\mozilla\intl\icu\source\common\ucnvscsu.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT __SCSUReset
_TEXT	SEGMENT
tv89 = -208						; size = 4
_scsu$ = -8						; size = 4
_cnv$ = 8						; size = 4
_choice$ = 12						; size = 4
__SCSUReset PROC					; COMDAT
; Line 157
	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 158
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _scsu$[ebp], ecx
; Line 160
	cmp	DWORD PTR _choice$[ebp], 1
	jg	SHORT $LN6@SCSUReset
; Line 162
	push	1
	push	OFFSET _initialDynamicOffsets
	call	_uprv_checkValidMemory
	add	esp, 8
	push	32					; 00000020H
	push	OFFSET _initialDynamicOffsets
	mov	eax, DWORD PTR _scsu$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 164
	mov	eax, DWORD PTR _scsu$[ebp]
	mov	BYTE PTR [eax+64], 1
; Line 165
	mov	eax, DWORD PTR _scsu$[ebp]
	mov	BYTE PTR [eax+65], 0
; Line 166
	mov	eax, DWORD PTR _scsu$[ebp]
	mov	BYTE PTR [eax+67], 0
	mov	ecx, DWORD PTR _scsu$[ebp]
	mov	BYTE PTR [ecx+66], 0
; Line 167
	mov	eax, DWORD PTR _scsu$[ebp]
	mov	BYTE PTR [eax+68], 0
; Line 169
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	BYTE PTR [eax+36], 0
$LN6@SCSUReset:
; Line 171
	cmp	DWORD PTR _choice$[ebp], 1
	je	$LN7@SCSUReset
; Line 173
	push	1
	push	OFFSET _initialDynamicOffsets
	call	_uprv_checkValidMemory
	add	esp, 8
	push	32					; 00000020H
	push	OFFSET _initialDynamicOffsets
	mov	eax, DWORD PTR _scsu$[ebp]
	add	eax, 32					; 00000020H
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 175
	mov	eax, DWORD PTR _scsu$[ebp]
	mov	BYTE PTR [eax+72], 1
; Line 176
	mov	eax, DWORD PTR _scsu$[ebp]
	mov	BYTE PTR [eax+73], 0
; Line 178
	mov	eax, DWORD PTR _scsu$[ebp]
	mov	BYTE PTR [eax+75], 0
; Line 179
	mov	eax, DWORD PTR _scsu$[ebp]
	mov	cl, BYTE PTR [eax+74]
	mov	BYTE PTR tv89[ebp], cl
	cmp	BYTE PTR tv89[ebp], 1
	je	SHORT $LN2@SCSUReset
	jmp	SHORT $LN1@SCSUReset
$LN2@SCSUReset:
; Line 181
	push	1
	push	OFFSET _initialWindowUse_ja
	call	_uprv_checkValidMemory
	add	esp, 8
	push	8
	push	OFFSET _initialWindowUse_ja
	mov	eax, DWORD PTR _scsu$[ebp]
	add	eax, 76					; 0000004cH
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 182
	jmp	SHORT $LN3@SCSUReset
$LN1@SCSUReset:
; Line 184
	push	1
	push	OFFSET _initialWindowUse
	call	_uprv_checkValidMemory
	add	esp, 8
	push	8
	push	OFFSET _initialWindowUse
	mov	eax, DWORD PTR _scsu$[ebp]
	add	eax, 76					; 0000004cH
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN3@SCSUReset:
; Line 188
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	DWORD PTR [eax+56], 0
$LN7@SCSUReset:
; Line 190
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__SCSUReset ENDP
_TEXT	ENDS
EXTRN	_uprv_malloc_56:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __SCSUOpen
_TEXT	SEGMENT
_locale$ = -8						; size = 4
_cnv$ = 8						; size = 4
_pArgs$ = 12						; size = 4
_pErrorCode$ = 16					; size = 4
__SCSUOpen PROC						; COMDAT
; Line 195
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 196
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR _locale$[ebp], ecx
; Line 197
	mov	eax, DWORD PTR _pArgs$[ebp]
	movsx	ecx, BYTE PTR [eax+8]
	test	ecx, ecx
	je	SHORT $LN6@SCSUOpen
; Line 198
	jmp	$LN7@SCSUOpen
$LN6@SCSUOpen:
; Line 200
	push	84					; 00000054H
	call	_uprv_malloc_56
	add	esp, 4
	mov	ecx, DWORD PTR _cnv$[ebp]
	mov	DWORD PTR [ecx+8], eax
; Line 201
	mov	eax, DWORD PTR _cnv$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN5@SCSUOpen
; Line 202
	cmp	DWORD PTR _locale$[ebp], 0
	je	SHORT $LN4@SCSUOpen
	mov	eax, DWORD PTR _locale$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 106				; 0000006aH
	jne	SHORT $LN4@SCSUOpen
	mov	eax, DWORD PTR _locale$[ebp]
	movsx	ecx, BYTE PTR [eax+1]
	cmp	ecx, 97					; 00000061H
	jne	SHORT $LN4@SCSUOpen
	mov	eax, DWORD PTR _locale$[ebp]
	movsx	ecx, BYTE PTR [eax+2]
	test	ecx, ecx
	je	SHORT $LN3@SCSUOpen
	mov	eax, DWORD PTR _locale$[ebp]
	movsx	ecx, BYTE PTR [eax+2]
	cmp	ecx, 95					; 0000005fH
	jne	SHORT $LN4@SCSUOpen
$LN3@SCSUOpen:
; Line 203
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	BYTE PTR [ecx+74], 1
; Line 204
	jmp	SHORT $LN2@SCSUOpen
$LN4@SCSUOpen:
; Line 205
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	BYTE PTR [ecx+74], 0
$LN2@SCSUOpen:
; Line 207
	push	0
	mov	eax, DWORD PTR _cnv$[ebp]
	push	eax
	call	__SCSUReset
	add	esp, 8
; Line 208
	jmp	SHORT $LN1@SCSUOpen
$LN5@SCSUOpen:
; Line 209
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 7
$LN1@SCSUOpen:
; Line 213
	mov	eax, 65533				; 0000fffdH
	mov	ecx, DWORD PTR _cnv$[ebp]
	mov	WORD PTR [ecx+108], ax
; Line 214
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	BYTE PTR [eax+61], -1
$LN7@SCSUOpen:
; Line 215
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__SCSUOpen ENDP
_TEXT	ENDS
EXTRN	_uprv_free_56:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __SCSUClose
_TEXT	SEGMENT
_cnv$ = 8						; size = 4
__SCSUClose PROC					; COMDAT
; Line 218
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 219
	mov	eax, DWORD PTR _cnv$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN3@SCSUClose
; Line 220
	mov	eax, DWORD PTR _cnv$[ebp]
	movsx	ecx, BYTE PTR [eax+34]
	test	ecx, ecx
	jne	SHORT $LN1@SCSUClose
; Line 221
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_uprv_free_56
	add	esp, 4
$LN1@SCSUClose:
; Line 223
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	DWORD PTR [eax+8], 0
$LN3@SCSUClose:
; Line 225
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__SCSUClose ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __SCSUToUnicodeWithOffsets
_TEXT	SEGMENT
tv331 = -400						; size = 4
tv162 = -400						; size = 4
_c$8774 = -200						; size = 4
_c$8716 = -188						; size = 4
_b$ = -173						; size = 1
_nextSourceIndex$ = -164				; size = 4
_sourceIndex$ = -152					; size = 4
_dynamicWindow$ = -137					; size = 1
_quoteWindow$ = -125					; size = 1
_byteOne$ = -113					; size = 1
_state$ = -101						; size = 1
_isSingleByteMode$ = -89				; size = 1
_offsets$ = -80						; size = 4
_targetLimit$ = -68					; size = 4
_target$ = -56						; size = 4
_sourceLimit$ = -44					; size = 4
_source$ = -32						; size = 4
_scsu$ = -20						; size = 4
_cnv$ = -8						; size = 4
_pArgs$ = 8						; size = 4
_pErrorCode$ = 12					; size = 4
__SCSUToUnicodeWithOffsets PROC				; COMDAT
; Line 231
	push	ebp
	mov	ebp, esp
	sub	esp, 400				; 00000190H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-400]
	mov	ecx, 100				; 00000064H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 247
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _cnv$[ebp], ecx
; Line 248
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _scsu$[ebp], ecx
; Line 250
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _source$[ebp], ecx
; Line 251
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _sourceLimit$[ebp], ecx
; Line 252
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _target$[ebp], ecx
; Line 253
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _targetLimit$[ebp], ecx
; Line 254
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR _offsets$[ebp], ecx
; Line 257
	mov	eax, DWORD PTR _scsu$[ebp]
	mov	cl, BYTE PTR [eax+64]
	mov	BYTE PTR _isSingleByteMode$[ebp], cl
; Line 258
	mov	eax, DWORD PTR _scsu$[ebp]
	mov	cl, BYTE PTR [eax+65]
	mov	BYTE PTR _state$[ebp], cl
; Line 259
	mov	eax, DWORD PTR _scsu$[ebp]
	mov	cl, BYTE PTR [eax+66]
	mov	BYTE PTR _quoteWindow$[ebp], cl
; Line 260
	mov	eax, DWORD PTR _scsu$[ebp]
	mov	cl, BYTE PTR [eax+67]
	mov	BYTE PTR _dynamicWindow$[ebp], cl
; Line 261
	mov	eax, DWORD PTR _scsu$[ebp]
	mov	cl, BYTE PTR [eax+68]
	mov	BYTE PTR _byteOne$[ebp], cl
; Line 264
	movzx	eax, BYTE PTR _state$[ebp]
	neg	eax
	sbb	eax, eax
	mov	DWORD PTR _sourceIndex$[ebp], eax
; Line 265
	mov	DWORD PTR _nextSourceIndex$[ebp], 0
; Line 286
	movsx	eax, BYTE PTR _isSingleByteMode$[ebp]
	test	eax, eax
	je	$LN87@SCSUToUnic
; Line 288
	movzx	eax, BYTE PTR _state$[ebp]
	test	eax, eax
	jne	$singleByteMode$8732
$fastSingle$8707:
; Line 290
	mov	eax, DWORD PTR _source$[ebp]
	cmp	eax, DWORD PTR _sourceLimit$[ebp]
	jae	$singleByteMode$8732
	mov	eax, DWORD PTR _target$[ebp]
	cmp	eax, DWORD PTR _targetLimit$[ebp]
	jae	$singleByteMode$8732
	mov	eax, DWORD PTR _source$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _b$[ebp], cl
	movzx	edx, BYTE PTR _b$[ebp]
	cmp	edx, 32					; 00000020H
	jl	$singleByteMode$8732
; Line 291
	mov	eax, DWORD PTR _source$[ebp]
	add	eax, 1
	mov	DWORD PTR _source$[ebp], eax
; Line 292
	mov	eax, DWORD PTR _nextSourceIndex$[ebp]
	add	eax, 1
	mov	DWORD PTR _nextSourceIndex$[ebp], eax
; Line 293
	movzx	eax, BYTE PTR _b$[ebp]
	cmp	eax, 127				; 0000007fH
	jg	SHORT $LN83@SCSUToUnic
; Line 295
	movzx	ax, BYTE PTR _b$[ebp]
	mov	ecx, DWORD PTR _target$[ebp]
	mov	WORD PTR [ecx], ax
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 2
	mov	DWORD PTR _target$[ebp], edx
; Line 296
	cmp	DWORD PTR _offsets$[ebp], 0
	je	SHORT $LN82@SCSUToUnic
; Line 297
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _sourceIndex$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
$LN82@SCSUToUnic:
; Line 299
	jmp	$LN81@SCSUToUnic
$LN83@SCSUToUnic:
; Line 301
	movsx	eax, BYTE PTR _dynamicWindow$[ebp]
	movzx	ecx, BYTE PTR _b$[ebp]
	and	ecx, 127				; 0000007fH
	mov	edx, DWORD PTR _scsu$[ebp]
	add	ecx, DWORD PTR [edx+eax*4]
	mov	DWORD PTR _c$8716[ebp], ecx
; Line 302
	cmp	DWORD PTR _c$8716[ebp], 65535		; 0000ffffH
	ja	SHORT $LN80@SCSUToUnic
; Line 303
	mov	eax, DWORD PTR _target$[ebp]
	mov	cx, WORD PTR _c$8716[ebp]
	mov	WORD PTR [eax], cx
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 2
	mov	DWORD PTR _target$[ebp], edx
; Line 304
	cmp	DWORD PTR _offsets$[ebp], 0
	je	SHORT $LN79@SCSUToUnic
; Line 305
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _sourceIndex$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
$LN79@SCSUToUnic:
; Line 307
	jmp	$LN81@SCSUToUnic
$LN80@SCSUToUnic:
; Line 309
	mov	eax, DWORD PTR _c$8716[ebp]
	shr	eax, 10					; 0000000aH
	add	eax, 55232				; 0000d7c0H
	mov	ecx, DWORD PTR _target$[ebp]
	mov	WORD PTR [ecx], ax
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 2
	mov	DWORD PTR _target$[ebp], edx
; Line 310
	mov	eax, DWORD PTR _target$[ebp]
	cmp	eax, DWORD PTR _targetLimit$[ebp]
	jae	SHORT $LN77@SCSUToUnic
; Line 311
	mov	eax, DWORD PTR _c$8716[ebp]
	and	eax, 1023				; 000003ffH
	or	eax, 56320				; 0000dc00H
	mov	ecx, DWORD PTR _target$[ebp]
	mov	WORD PTR [ecx], ax
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 2
	mov	DWORD PTR _target$[ebp], edx
; Line 312
	cmp	DWORD PTR _offsets$[ebp], 0
	je	SHORT $LN76@SCSUToUnic
; Line 313
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _sourceIndex$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
; Line 314
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _sourceIndex$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
$LN76@SCSUToUnic:
; Line 316
	jmp	SHORT $LN81@SCSUToUnic
$LN77@SCSUToUnic:
; Line 318
	cmp	DWORD PTR _offsets$[ebp], 0
	je	SHORT $LN74@SCSUToUnic
; Line 319
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _sourceIndex$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
$LN74@SCSUToUnic:
; Line 321
	mov	eax, DWORD PTR _c$8716[ebp]
	and	eax, 1023				; 000003ffH
	or	eax, 56320				; 0000dc00H
	mov	ecx, DWORD PTR _cnv$[ebp]
	mov	WORD PTR [ecx+116], ax
; Line 322
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	BYTE PTR [eax+65], 1
; Line 323
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
; Line 324
	jmp	$endloop$8731
$LN81@SCSUToUnic:
; Line 328
	mov	eax, DWORD PTR _nextSourceIndex$[ebp]
	mov	DWORD PTR _sourceIndex$[ebp], eax
; Line 329
	jmp	$fastSingle$8707
$singleByteMode$8732:
; Line 334
	mov	eax, DWORD PTR _source$[ebp]
	cmp	eax, DWORD PTR _sourceLimit$[ebp]
	jae	$LN72@SCSUToUnic
; Line 335
	mov	eax, DWORD PTR _target$[ebp]
	cmp	eax, DWORD PTR _targetLimit$[ebp]
	jb	SHORT $LN71@SCSUToUnic
; Line 337
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
; Line 338
	jmp	$LN72@SCSUToUnic
$LN71@SCSUToUnic:
; Line 340
	mov	eax, DWORD PTR _source$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _b$[ebp], cl
	mov	edx, DWORD PTR _source$[ebp]
	add	edx, 1
	mov	DWORD PTR _source$[ebp], edx
; Line 341
	mov	eax, DWORD PTR _nextSourceIndex$[ebp]
	add	eax, 1
	mov	DWORD PTR _nextSourceIndex$[ebp], eax
; Line 342
	movzx	eax, BYTE PTR _state$[ebp]
	mov	DWORD PTR tv162[ebp], eax
	cmp	DWORD PTR tv162[ebp], 6
	ja	$LN69@SCSUToUnic
	mov	ecx, DWORD PTR tv162[ebp]
	jmp	DWORD PTR $LN90@SCSUToUnic[ecx*4]
$LN68@SCSUToUnic:
; Line 346
	movzx	ecx, BYTE PTR _b$[ebp]
	mov	eax, 1
	shl	eax, cl
	and	eax, 9729				; 00002601H
	je	SHORT $LN67@SCSUToUnic
; Line 348
	movzx	ax, BYTE PTR _b$[ebp]
	mov	ecx, DWORD PTR _target$[ebp]
	mov	WORD PTR [ecx], ax
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 2
	mov	DWORD PTR _target$[ebp], edx
; Line 349
	cmp	DWORD PTR _offsets$[ebp], 0
	je	SHORT $LN66@SCSUToUnic
; Line 350
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _sourceIndex$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
$LN66@SCSUToUnic:
; Line 352
	mov	eax, DWORD PTR _nextSourceIndex$[ebp]
	mov	DWORD PTR _sourceIndex$[ebp], eax
; Line 353
	jmp	$fastSingle$8707
	jmp	$LN65@SCSUToUnic
$LN67@SCSUToUnic:
; Line 354
	movzx	eax, BYTE PTR _b$[ebp]
	cmp	eax, 16					; 00000010H
	jl	SHORT $LN64@SCSUToUnic
; Line 355
	movzx	eax, BYTE PTR _b$[ebp]
	cmp	eax, 23					; 00000017H
	jg	SHORT $LN63@SCSUToUnic
; Line 356
	movzx	eax, BYTE PTR _b$[ebp]
	sub	eax, 16					; 00000010H
	mov	BYTE PTR _dynamicWindow$[ebp], al
; Line 357
	mov	eax, DWORD PTR _nextSourceIndex$[ebp]
	mov	DWORD PTR _sourceIndex$[ebp], eax
; Line 358
	jmp	$fastSingle$8707
; Line 359
	jmp	SHORT $LN62@SCSUToUnic
$LN63@SCSUToUnic:
; Line 360
	movzx	eax, BYTE PTR _b$[ebp]
	sub	eax, 24					; 00000018H
	mov	BYTE PTR _dynamicWindow$[ebp], al
; Line 361
	mov	BYTE PTR _state$[ebp], 6
$LN62@SCSUToUnic:
; Line 362
	jmp	$LN65@SCSUToUnic
$LN64@SCSUToUnic:
; Line 363
	movzx	eax, BYTE PTR _b$[ebp]
	cmp	eax, 8
	jg	SHORT $LN60@SCSUToUnic
; Line 364
	movzx	eax, BYTE PTR _b$[ebp]
	sub	eax, 1
	mov	BYTE PTR _quoteWindow$[ebp], al
; Line 365
	mov	BYTE PTR _state$[ebp], 3
	jmp	SHORT $LN65@SCSUToUnic
$LN60@SCSUToUnic:
; Line 366
	movzx	eax, BYTE PTR _b$[ebp]
	cmp	eax, 11					; 0000000bH
	jne	SHORT $LN58@SCSUToUnic
; Line 367
	mov	BYTE PTR _state$[ebp], 4
	jmp	SHORT $LN65@SCSUToUnic
$LN58@SCSUToUnic:
; Line 368
	movzx	eax, BYTE PTR _b$[ebp]
	cmp	eax, 14					; 0000000eH
	jne	SHORT $LN56@SCSUToUnic
; Line 369
	mov	BYTE PTR _state$[ebp], 1
	jmp	SHORT $LN65@SCSUToUnic
$LN56@SCSUToUnic:
; Line 370
	movzx	eax, BYTE PTR _b$[ebp]
	cmp	eax, 15					; 0000000fH
	jne	SHORT $LN54@SCSUToUnic
; Line 371
	mov	eax, DWORD PTR _nextSourceIndex$[ebp]
	mov	DWORD PTR _sourceIndex$[ebp], eax
; Line 372
	mov	BYTE PTR _isSingleByteMode$[ebp], 0
; Line 373
	jmp	$fastUnicode$8761
; Line 374
	jmp	SHORT $LN65@SCSUToUnic
$LN54@SCSUToUnic:
; Line 376
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 12			; 0000000cH
; Line 377
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	cl, BYTE PTR _b$[ebp]
	mov	BYTE PTR [eax+37], cl
; Line 378
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	BYTE PTR [eax+36], 1
; Line 379
	jmp	$endloop$8731
$LN65@SCSUToUnic:
; Line 383
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	cl, BYTE PTR _b$[ebp]
	mov	BYTE PTR [eax+37], cl
; Line 384
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	BYTE PTR [eax+36], 1
; Line 385
	jmp	$LN69@SCSUToUnic
$LN52@SCSUToUnic:
; Line 387
	mov	al, BYTE PTR _b$[ebp]
	mov	BYTE PTR _byteOne$[ebp], al
; Line 388
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	cl, BYTE PTR _b$[ebp]
	mov	BYTE PTR [eax+38], cl
; Line 389
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	BYTE PTR [eax+36], 2
; Line 390
	mov	BYTE PTR _state$[ebp], 2
; Line 391
	jmp	$LN69@SCSUToUnic
$LN51@SCSUToUnic:
; Line 393
	movzx	eax, BYTE PTR _byteOne$[ebp]
	shl	eax, 8
	movzx	ecx, BYTE PTR _b$[ebp]
	or	eax, ecx
	mov	edx, DWORD PTR _target$[ebp]
	mov	WORD PTR [edx], ax
	mov	eax, DWORD PTR _target$[ebp]
	add	eax, 2
	mov	DWORD PTR _target$[ebp], eax
; Line 394
	cmp	DWORD PTR _offsets$[ebp], 0
	je	SHORT $LN50@SCSUToUnic
; Line 395
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _sourceIndex$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
$LN50@SCSUToUnic:
; Line 397
	mov	eax, DWORD PTR _nextSourceIndex$[ebp]
	mov	DWORD PTR _sourceIndex$[ebp], eax
; Line 398
	mov	BYTE PTR _state$[ebp], 0
; Line 399
	jmp	$fastSingle$8707
$LN49@SCSUToUnic:
; Line 401
	movzx	eax, BYTE PTR _b$[ebp]
	cmp	eax, 128				; 00000080H
	jge	SHORT $LN48@SCSUToUnic
; Line 403
	movsx	eax, BYTE PTR _quoteWindow$[ebp]
	movzx	ecx, BYTE PTR _b$[ebp]
	add	ecx, DWORD PTR _staticOffsets[eax*4]
	mov	edx, DWORD PTR _target$[ebp]
	mov	WORD PTR [edx], cx
	mov	eax, DWORD PTR _target$[ebp]
	add	eax, 2
	mov	DWORD PTR _target$[ebp], eax
; Line 404
	cmp	DWORD PTR _offsets$[ebp], 0
	je	SHORT $LN47@SCSUToUnic
; Line 405
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _sourceIndex$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
$LN47@SCSUToUnic:
; Line 407
	jmp	$LN46@SCSUToUnic
$LN48@SCSUToUnic:
; Line 409
	movsx	eax, BYTE PTR _quoteWindow$[ebp]
	movzx	ecx, BYTE PTR _b$[ebp]
	and	ecx, 127				; 0000007fH
	mov	edx, DWORD PTR _scsu$[ebp]
	add	ecx, DWORD PTR [edx+eax*4]
	mov	DWORD PTR _c$8774[ebp], ecx
; Line 410
	cmp	DWORD PTR _c$8774[ebp], 65535		; 0000ffffH
	ja	SHORT $LN45@SCSUToUnic
; Line 411
	mov	eax, DWORD PTR _target$[ebp]
	mov	cx, WORD PTR _c$8774[ebp]
	mov	WORD PTR [eax], cx
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 2
	mov	DWORD PTR _target$[ebp], edx
; Line 412
	cmp	DWORD PTR _offsets$[ebp], 0
	je	SHORT $LN44@SCSUToUnic
; Line 413
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _sourceIndex$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
$LN44@SCSUToUnic:
; Line 415
	jmp	$LN46@SCSUToUnic
$LN45@SCSUToUnic:
; Line 417
	mov	eax, DWORD PTR _c$8774[ebp]
	shr	eax, 10					; 0000000aH
	add	eax, 55232				; 0000d7c0H
	mov	ecx, DWORD PTR _target$[ebp]
	mov	WORD PTR [ecx], ax
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 2
	mov	DWORD PTR _target$[ebp], edx
; Line 418
	mov	eax, DWORD PTR _target$[ebp]
	cmp	eax, DWORD PTR _targetLimit$[ebp]
	jae	SHORT $LN42@SCSUToUnic
; Line 419
	mov	eax, DWORD PTR _c$8774[ebp]
	and	eax, 1023				; 000003ffH
	or	eax, 56320				; 0000dc00H
	mov	ecx, DWORD PTR _target$[ebp]
	mov	WORD PTR [ecx], ax
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 2
	mov	DWORD PTR _target$[ebp], edx
; Line 420
	cmp	DWORD PTR _offsets$[ebp], 0
	je	SHORT $LN41@SCSUToUnic
; Line 421
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _sourceIndex$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
; Line 422
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _sourceIndex$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
$LN41@SCSUToUnic:
; Line 424
	jmp	SHORT $LN46@SCSUToUnic
$LN42@SCSUToUnic:
; Line 426
	cmp	DWORD PTR _offsets$[ebp], 0
	je	SHORT $LN39@SCSUToUnic
; Line 427
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _sourceIndex$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
$LN39@SCSUToUnic:
; Line 429
	mov	eax, DWORD PTR _c$8774[ebp]
	and	eax, 1023				; 000003ffH
	or	eax, 56320				; 0000dc00H
	mov	ecx, DWORD PTR _cnv$[ebp]
	mov	WORD PTR [ecx+116], ax
; Line 430
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	BYTE PTR [eax+65], 1
; Line 431
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
; Line 432
	jmp	$endloop$8731
$LN46@SCSUToUnic:
; Line 436
	mov	eax, DWORD PTR _nextSourceIndex$[ebp]
	mov	DWORD PTR _sourceIndex$[ebp], eax
; Line 437
	mov	BYTE PTR _state$[ebp], 0
; Line 438
	jmp	$fastSingle$8707
$LN38@SCSUToUnic:
; Line 440
	movzx	eax, BYTE PTR _b$[ebp]
	sar	eax, 5
	and	eax, 7
	mov	BYTE PTR _dynamicWindow$[ebp], al
; Line 441
	movzx	eax, BYTE PTR _b$[ebp]
	and	eax, 31					; 0000001fH
	mov	BYTE PTR _byteOne$[ebp], al
; Line 442
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	cl, BYTE PTR _b$[ebp]
	mov	BYTE PTR [eax+38], cl
; Line 443
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	BYTE PTR [eax+36], 2
; Line 444
	mov	BYTE PTR _state$[ebp], 5
; Line 445
	jmp	$LN69@SCSUToUnic
$LN37@SCSUToUnic:
; Line 447
	movzx	eax, BYTE PTR _byteOne$[ebp]
	shl	eax, 15					; 0000000fH
	movzx	ecx, BYTE PTR _b$[ebp]
	shl	ecx, 7
	or	eax, ecx
	add	eax, 65536				; 00010000H
	movsx	edx, BYTE PTR _dynamicWindow$[ebp]
	mov	ecx, DWORD PTR _scsu$[ebp]
	mov	DWORD PTR [ecx+edx*4], eax
; Line 448
	mov	eax, DWORD PTR _nextSourceIndex$[ebp]
	mov	DWORD PTR _sourceIndex$[ebp], eax
; Line 449
	mov	BYTE PTR _state$[ebp], 0
; Line 450
	jmp	$fastSingle$8707
$LN36@SCSUToUnic:
; Line 452
	movzx	eax, BYTE PTR _b$[ebp]
	test	eax, eax
	jne	SHORT $LN35@SCSUToUnic
; Line 454
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	cl, BYTE PTR _b$[ebp]
	mov	BYTE PTR [eax+38], cl
; Line 455
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	BYTE PTR [eax+36], 2
; Line 456
	jmp	$endloop$8731
	jmp	$LN34@SCSUToUnic
$LN35@SCSUToUnic:
; Line 457
	movzx	eax, BYTE PTR _b$[ebp]
	cmp	eax, 104				; 00000068H
	jge	SHORT $LN33@SCSUToUnic
; Line 458
	movzx	eax, BYTE PTR _b$[ebp]
	shl	eax, 7
	movsx	ecx, BYTE PTR _dynamicWindow$[ebp]
	mov	edx, DWORD PTR _scsu$[ebp]
	mov	DWORD PTR [edx+ecx*4], eax
	jmp	SHORT $LN34@SCSUToUnic
$LN33@SCSUToUnic:
; Line 459
	movzx	eax, BYTE PTR _b$[ebp]
	sub	eax, 104				; 00000068H
	movzx	ecx, al
	cmp	ecx, 64					; 00000040H
	jge	SHORT $LN31@SCSUToUnic
; Line 460
	movzx	eax, BYTE PTR _b$[ebp]
	shl	eax, 7
	add	eax, 44032				; 0000ac00H
	movsx	ecx, BYTE PTR _dynamicWindow$[ebp]
	mov	edx, DWORD PTR _scsu$[ebp]
	mov	DWORD PTR [edx+ecx*4], eax
	jmp	SHORT $LN34@SCSUToUnic
$LN31@SCSUToUnic:
; Line 461
	movzx	eax, BYTE PTR _b$[ebp]
	cmp	eax, 249				; 000000f9H
	jl	SHORT $LN29@SCSUToUnic
; Line 462
	movzx	eax, BYTE PTR _b$[ebp]
	movsx	ecx, BYTE PTR _dynamicWindow$[ebp]
	mov	edx, DWORD PTR _scsu$[ebp]
	mov	eax, DWORD PTR _fixedOffsets[eax*4-996]
	mov	DWORD PTR [edx+ecx*4], eax
; Line 463
	jmp	SHORT $LN34@SCSUToUnic
$LN29@SCSUToUnic:
; Line 465
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	cl, BYTE PTR _b$[ebp]
	mov	BYTE PTR [eax+38], cl
; Line 466
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	BYTE PTR [eax+36], 2
; Line 467
	jmp	$endloop$8731
$LN34@SCSUToUnic:
; Line 469
	mov	eax, DWORD PTR _nextSourceIndex$[ebp]
	mov	DWORD PTR _sourceIndex$[ebp], eax
; Line 470
	mov	BYTE PTR _state$[ebp], 0
; Line 471
	jmp	$fastSingle$8707
$LN69@SCSUToUnic:
; Line 473
	jmp	$singleByteMode$8732
$LN72@SCSUToUnic:
; Line 474
	jmp	$endloop$8731
$LN87@SCSUToUnic:
; Line 476
	movzx	eax, BYTE PTR _state$[ebp]
	test	eax, eax
	jne	$LN22@SCSUToUnic
$fastUnicode$8761:
; Line 478
	mov	eax, DWORD PTR _source$[ebp]
	add	eax, 1
	cmp	eax, DWORD PTR _sourceLimit$[ebp]
	jae	$LN22@SCSUToUnic
	mov	eax, DWORD PTR _target$[ebp]
	cmp	eax, DWORD PTR _targetLimit$[ebp]
	jae	$LN22@SCSUToUnic
	mov	eax, DWORD PTR _source$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _b$[ebp], cl
	movzx	edx, BYTE PTR _b$[ebp]
	sub	edx, 224				; 000000e0H
	movzx	eax, dl
	cmp	eax, 18					; 00000012H
	jle	SHORT $LN22@SCSUToUnic
; Line 479
	movzx	eax, BYTE PTR _b$[ebp]
	shl	eax, 8
	mov	ecx, DWORD PTR _source$[ebp]
	movzx	edx, BYTE PTR [ecx+1]
	or	eax, edx
	mov	ecx, DWORD PTR _target$[ebp]
	mov	WORD PTR [ecx], ax
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 2
	mov	DWORD PTR _target$[ebp], edx
; Line 480
	cmp	DWORD PTR _offsets$[ebp], 0
	je	SHORT $LN23@SCSUToUnic
; Line 481
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _sourceIndex$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
$LN23@SCSUToUnic:
; Line 483
	mov	eax, DWORD PTR _nextSourceIndex$[ebp]
	mov	DWORD PTR _sourceIndex$[ebp], eax
; Line 484
	mov	eax, DWORD PTR _nextSourceIndex$[ebp]
	add	eax, 2
	mov	DWORD PTR _nextSourceIndex$[ebp], eax
; Line 485
	mov	eax, DWORD PTR _source$[ebp]
	add	eax, 2
	mov	DWORD PTR _source$[ebp], eax
; Line 486
	jmp	$fastUnicode$8761
$LN22@SCSUToUnic:
; Line 491
	mov	eax, DWORD PTR _source$[ebp]
	cmp	eax, DWORD PTR _sourceLimit$[ebp]
	jae	$endloop$8731
; Line 492
	mov	eax, DWORD PTR _target$[ebp]
	cmp	eax, DWORD PTR _targetLimit$[ebp]
	jb	SHORT $LN20@SCSUToUnic
; Line 494
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
; Line 495
	jmp	$endloop$8731
$LN20@SCSUToUnic:
; Line 497
	mov	eax, DWORD PTR _source$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _b$[ebp], cl
	mov	edx, DWORD PTR _source$[ebp]
	add	edx, 1
	mov	DWORD PTR _source$[ebp], edx
; Line 498
	mov	eax, DWORD PTR _nextSourceIndex$[ebp]
	add	eax, 1
	mov	DWORD PTR _nextSourceIndex$[ebp], eax
; Line 499
	mov	al, BYTE PTR _state$[ebp]
	mov	BYTE PTR tv331[ebp], al
	cmp	BYTE PTR tv331[ebp], 0
	je	SHORT $LN17@SCSUToUnic
	cmp	BYTE PTR tv331[ebp], 1
	je	$LN6@SCSUToUnic
	cmp	BYTE PTR tv331[ebp], 2
	je	$LN5@SCSUToUnic
	jmp	$LN18@SCSUToUnic
$LN17@SCSUToUnic:
; Line 501
	movzx	eax, BYTE PTR _b$[ebp]
	sub	eax, 224				; 000000e0H
	movzx	ecx, al
	cmp	ecx, 18					; 00000012H
	jle	SHORT $LN16@SCSUToUnic
; Line 502
	mov	al, BYTE PTR _b$[ebp]
	mov	BYTE PTR _byteOne$[ebp], al
; Line 503
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	cl, BYTE PTR _b$[ebp]
	mov	BYTE PTR [eax+37], cl
; Line 504
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	BYTE PTR [eax+36], 1
; Line 505
	mov	BYTE PTR _state$[ebp], 2
	jmp	$LN15@SCSUToUnic
$LN16@SCSUToUnic:
; Line 506
	movzx	eax, BYTE PTR _b$[ebp]
	cmp	eax, 231				; 000000e7H
	jg	SHORT $LN14@SCSUToUnic
; Line 507
	movzx	eax, BYTE PTR _b$[ebp]
	sub	eax, 224				; 000000e0H
	mov	BYTE PTR _dynamicWindow$[ebp], al
; Line 508
	mov	eax, DWORD PTR _nextSourceIndex$[ebp]
	mov	DWORD PTR _sourceIndex$[ebp], eax
; Line 509
	mov	BYTE PTR _isSingleByteMode$[ebp], 1
; Line 510
	jmp	$fastSingle$8707
	jmp	$LN15@SCSUToUnic
$LN14@SCSUToUnic:
; Line 511
	movzx	eax, BYTE PTR _b$[ebp]
	cmp	eax, 239				; 000000efH
	jg	SHORT $LN12@SCSUToUnic
; Line 512
	movzx	eax, BYTE PTR _b$[ebp]
	sub	eax, 232				; 000000e8H
	mov	BYTE PTR _dynamicWindow$[ebp], al
; Line 513
	mov	BYTE PTR _isSingleByteMode$[ebp], 1
; Line 514
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	cl, BYTE PTR _b$[ebp]
	mov	BYTE PTR [eax+37], cl
; Line 515
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	BYTE PTR [eax+36], 1
; Line 516
	mov	BYTE PTR _state$[ebp], 6
; Line 517
	jmp	$singleByteMode$8732
	jmp	SHORT $LN15@SCSUToUnic
$LN12@SCSUToUnic:
; Line 518
	movzx	eax, BYTE PTR _b$[ebp]
	cmp	eax, 241				; 000000f1H
	jne	SHORT $LN10@SCSUToUnic
; Line 519
	mov	BYTE PTR _isSingleByteMode$[ebp], 1
; Line 520
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	cl, BYTE PTR _b$[ebp]
	mov	BYTE PTR [eax+37], cl
; Line 521
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	BYTE PTR [eax+36], 1
; Line 522
	mov	BYTE PTR _state$[ebp], 4
; Line 523
	jmp	$singleByteMode$8732
	jmp	SHORT $LN15@SCSUToUnic
$LN10@SCSUToUnic:
; Line 524
	movzx	eax, BYTE PTR _b$[ebp]
	cmp	eax, 240				; 000000f0H
	jne	SHORT $LN8@SCSUToUnic
; Line 525
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	cl, BYTE PTR _b$[ebp]
	mov	BYTE PTR [eax+37], cl
; Line 526
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	BYTE PTR [eax+36], 1
; Line 527
	mov	BYTE PTR _state$[ebp], 1
; Line 528
	jmp	SHORT $LN15@SCSUToUnic
$LN8@SCSUToUnic:
; Line 530
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 12			; 0000000cH
; Line 531
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	cl, BYTE PTR _b$[ebp]
	mov	BYTE PTR [eax+37], cl
; Line 532
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	BYTE PTR [eax+36], 1
; Line 533
	jmp	SHORT $endloop$8731
$LN15@SCSUToUnic:
; Line 535
	jmp	SHORT $LN18@SCSUToUnic
$LN6@SCSUToUnic:
; Line 537
	mov	al, BYTE PTR _b$[ebp]
	mov	BYTE PTR _byteOne$[ebp], al
; Line 538
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	cl, BYTE PTR _b$[ebp]
	mov	BYTE PTR [eax+38], cl
; Line 539
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	BYTE PTR [eax+36], 2
; Line 540
	mov	BYTE PTR _state$[ebp], 2
; Line 541
	jmp	SHORT $LN18@SCSUToUnic
$LN5@SCSUToUnic:
; Line 543
	movzx	eax, BYTE PTR _byteOne$[ebp]
	shl	eax, 8
	movzx	ecx, BYTE PTR _b$[ebp]
	or	eax, ecx
	mov	edx, DWORD PTR _target$[ebp]
	mov	WORD PTR [edx], ax
	mov	eax, DWORD PTR _target$[ebp]
	add	eax, 2
	mov	DWORD PTR _target$[ebp], eax
; Line 544
	cmp	DWORD PTR _offsets$[ebp], 0
	je	SHORT $LN4@SCSUToUnic
; Line 545
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _sourceIndex$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
$LN4@SCSUToUnic:
; Line 547
	mov	eax, DWORD PTR _nextSourceIndex$[ebp]
	mov	DWORD PTR _sourceIndex$[ebp], eax
; Line 548
	mov	BYTE PTR _state$[ebp], 0
; Line 549
	jmp	$fastUnicode$8761
$LN18@SCSUToUnic:
; Line 551
	jmp	$LN22@SCSUToUnic
$endloop$8731:
; Line 556
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN3@SCSUToUnic
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	cmp	DWORD PTR [eax], 15			; 0000000fH
	je	SHORT $LN3@SCSUToUnic
; Line 558
	mov	BYTE PTR _state$[ebp], 0
	jmp	SHORT $LN2@SCSUToUnic
$LN3@SCSUToUnic:
; Line 559
	movzx	eax, BYTE PTR _state$[ebp]
	test	eax, eax
	jne	SHORT $LN2@SCSUToUnic
; Line 561
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	BYTE PTR [eax+36], 0
$LN2@SCSUToUnic:
; Line 563
	mov	eax, DWORD PTR _scsu$[ebp]
	mov	cl, BYTE PTR _isSingleByteMode$[ebp]
	mov	BYTE PTR [eax+64], cl
; Line 564
	mov	eax, DWORD PTR _scsu$[ebp]
	mov	cl, BYTE PTR _state$[ebp]
	mov	BYTE PTR [eax+65], cl
; Line 565
	mov	eax, DWORD PTR _scsu$[ebp]
	mov	cl, BYTE PTR _quoteWindow$[ebp]
	mov	BYTE PTR [eax+66], cl
; Line 566
	mov	eax, DWORD PTR _scsu$[ebp]
	mov	cl, BYTE PTR _dynamicWindow$[ebp]
	mov	BYTE PTR [eax+67], cl
; Line 567
	mov	eax, DWORD PTR _scsu$[ebp]
	mov	cl, BYTE PTR _byteOne$[ebp]
	mov	BYTE PTR [eax+68], cl
; Line 570
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR _source$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 571
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR _target$[ebp]
	mov	DWORD PTR [eax+16], ecx
; Line 572
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR _offsets$[ebp]
	mov	DWORD PTR [eax+24], ecx
; Line 574
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN90@SCSUToUnic:
	DD	$LN68@SCSUToUnic
	DD	$LN52@SCSUToUnic
	DD	$LN51@SCSUToUnic
	DD	$LN49@SCSUToUnic
	DD	$LN38@SCSUToUnic
	DD	$LN37@SCSUToUnic
	DD	$LN36@SCSUToUnic
__SCSUToUnicodeWithOffsets ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __SCSUToUnicode
_TEXT	SEGMENT
tv299 = -364						; size = 4
tv147 = -364						; size = 4
_c$8919 = -164						; size = 4
_c$8873 = -152						; size = 4
_b$ = -137						; size = 1
_dynamicWindow$ = -125					; size = 1
_quoteWindow$ = -113					; size = 1
_byteOne$ = -101					; size = 1
_state$ = -89						; size = 1
_isSingleByteMode$ = -77				; size = 1
_targetLimit$ = -68					; size = 4
_target$ = -56						; size = 4
_sourceLimit$ = -44					; size = 4
_source$ = -32						; size = 4
_scsu$ = -20						; size = 4
_cnv$ = -8						; size = 4
_pArgs$ = 8						; size = 4
_pErrorCode$ = 12					; size = 4
__SCSUToUnicode PROC					; COMDAT
; Line 585
	push	ebp
	mov	ebp, esp
	sub	esp, 364				; 0000016cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-364]
	mov	ecx, 91					; 0000005bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 598
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _cnv$[ebp], ecx
; Line 599
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _scsu$[ebp], ecx
; Line 601
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _source$[ebp], ecx
; Line 602
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _sourceLimit$[ebp], ecx
; Line 603
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _target$[ebp], ecx
; Line 604
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _targetLimit$[ebp], ecx
; Line 607
	mov	eax, DWORD PTR _scsu$[ebp]
	mov	cl, BYTE PTR [eax+64]
	mov	BYTE PTR _isSingleByteMode$[ebp], cl
; Line 608
	mov	eax, DWORD PTR _scsu$[ebp]
	mov	cl, BYTE PTR [eax+65]
	mov	BYTE PTR _state$[ebp], cl
; Line 609
	mov	eax, DWORD PTR _scsu$[ebp]
	mov	cl, BYTE PTR [eax+66]
	mov	BYTE PTR _quoteWindow$[ebp], cl
; Line 610
	mov	eax, DWORD PTR _scsu$[ebp]
	mov	cl, BYTE PTR [eax+67]
	mov	BYTE PTR _dynamicWindow$[ebp], cl
; Line 611
	mov	eax, DWORD PTR _scsu$[ebp]
	mov	cl, BYTE PTR [eax+68]
	mov	BYTE PTR _byteOne$[ebp], cl
; Line 632
	movsx	eax, BYTE PTR _isSingleByteMode$[ebp]
	test	eax, eax
	je	$LN75@SCSUToUnic@2
; Line 634
	movzx	eax, BYTE PTR _state$[ebp]
	test	eax, eax
	jne	$singleByteMode$8883
$fastSingle$8866:
; Line 636
	mov	eax, DWORD PTR _source$[ebp]
	cmp	eax, DWORD PTR _sourceLimit$[ebp]
	jae	$singleByteMode$8883
	mov	eax, DWORD PTR _target$[ebp]
	cmp	eax, DWORD PTR _targetLimit$[ebp]
	jae	$singleByteMode$8883
	mov	eax, DWORD PTR _source$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _b$[ebp], cl
	movzx	edx, BYTE PTR _b$[ebp]
	cmp	edx, 32					; 00000020H
	jl	$singleByteMode$8883
; Line 637
	mov	eax, DWORD PTR _source$[ebp]
	add	eax, 1
	mov	DWORD PTR _source$[ebp], eax
; Line 638
	movzx	eax, BYTE PTR _b$[ebp]
	cmp	eax, 127				; 0000007fH
	jg	SHORT $LN71@SCSUToUnic@2
; Line 640
	movzx	ax, BYTE PTR _b$[ebp]
	mov	ecx, DWORD PTR _target$[ebp]
	mov	WORD PTR [ecx], ax
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 2
	mov	DWORD PTR _target$[ebp], edx
; Line 641
	jmp	$LN70@SCSUToUnic@2
$LN71@SCSUToUnic@2:
; Line 643
	movsx	eax, BYTE PTR _dynamicWindow$[ebp]
	movzx	ecx, BYTE PTR _b$[ebp]
	and	ecx, 127				; 0000007fH
	mov	edx, DWORD PTR _scsu$[ebp]
	add	ecx, DWORD PTR [edx+eax*4]
	mov	DWORD PTR _c$8873[ebp], ecx
; Line 644
	cmp	DWORD PTR _c$8873[ebp], 65535		; 0000ffffH
	ja	SHORT $LN69@SCSUToUnic@2
; Line 645
	mov	eax, DWORD PTR _target$[ebp]
	mov	cx, WORD PTR _c$8873[ebp]
	mov	WORD PTR [eax], cx
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 2
	mov	DWORD PTR _target$[ebp], edx
; Line 646
	jmp	SHORT $LN70@SCSUToUnic@2
$LN69@SCSUToUnic@2:
; Line 648
	mov	eax, DWORD PTR _c$8873[ebp]
	shr	eax, 10					; 0000000aH
	add	eax, 55232				; 0000d7c0H
	mov	ecx, DWORD PTR _target$[ebp]
	mov	WORD PTR [ecx], ax
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 2
	mov	DWORD PTR _target$[ebp], edx
; Line 649
	mov	eax, DWORD PTR _target$[ebp]
	cmp	eax, DWORD PTR _targetLimit$[ebp]
	jae	SHORT $LN67@SCSUToUnic@2
; Line 650
	mov	eax, DWORD PTR _c$8873[ebp]
	and	eax, 1023				; 000003ffH
	or	eax, 56320				; 0000dc00H
	mov	ecx, DWORD PTR _target$[ebp]
	mov	WORD PTR [ecx], ax
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 2
	mov	DWORD PTR _target$[ebp], edx
; Line 651
	jmp	SHORT $LN70@SCSUToUnic@2
$LN67@SCSUToUnic@2:
; Line 653
	mov	eax, DWORD PTR _c$8873[ebp]
	and	eax, 1023				; 000003ffH
	or	eax, 56320				; 0000dc00H
	mov	ecx, DWORD PTR _cnv$[ebp]
	mov	WORD PTR [ecx+116], ax
; Line 654
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	BYTE PTR [eax+65], 1
; Line 655
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
; Line 656
	jmp	$endloop$8882
$LN70@SCSUToUnic@2:
; Line 660
	jmp	$fastSingle$8866
$singleByteMode$8883:
; Line 665
	mov	eax, DWORD PTR _source$[ebp]
	cmp	eax, DWORD PTR _sourceLimit$[ebp]
	jae	$LN64@SCSUToUnic@2
; Line 666
	mov	eax, DWORD PTR _target$[ebp]
	cmp	eax, DWORD PTR _targetLimit$[ebp]
	jb	SHORT $LN63@SCSUToUnic@2
; Line 668
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
; Line 669
	jmp	$LN64@SCSUToUnic@2
$LN63@SCSUToUnic@2:
; Line 671
	mov	eax, DWORD PTR _source$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _b$[ebp], cl
	mov	edx, DWORD PTR _source$[ebp]
	add	edx, 1
	mov	DWORD PTR _source$[ebp], edx
; Line 672
	movzx	eax, BYTE PTR _state$[ebp]
	mov	DWORD PTR tv147[ebp], eax
	cmp	DWORD PTR tv147[ebp], 6
	ja	$LN61@SCSUToUnic@2
	mov	ecx, DWORD PTR tv147[ebp]
	jmp	DWORD PTR $LN78@SCSUToUnic@2[ecx*4]
$LN60@SCSUToUnic@2:
; Line 676
	movzx	ecx, BYTE PTR _b$[ebp]
	mov	eax, 1
	shl	eax, cl
	and	eax, 9729				; 00002601H
	je	SHORT $LN59@SCSUToUnic@2
; Line 678
	movzx	ax, BYTE PTR _b$[ebp]
	mov	ecx, DWORD PTR _target$[ebp]
	mov	WORD PTR [ecx], ax
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 2
	mov	DWORD PTR _target$[ebp], edx
; Line 679
	jmp	$fastSingle$8866
	jmp	$LN58@SCSUToUnic@2
$LN59@SCSUToUnic@2:
; Line 680
	movzx	eax, BYTE PTR _b$[ebp]
	cmp	eax, 16					; 00000010H
	jl	SHORT $LN57@SCSUToUnic@2
; Line 681
	movzx	eax, BYTE PTR _b$[ebp]
	cmp	eax, 23					; 00000017H
	jg	SHORT $LN56@SCSUToUnic@2
; Line 682
	movzx	eax, BYTE PTR _b$[ebp]
	sub	eax, 16					; 00000010H
	mov	BYTE PTR _dynamicWindow$[ebp], al
; Line 683
	jmp	$fastSingle$8866
; Line 684
	jmp	SHORT $LN55@SCSUToUnic@2
$LN56@SCSUToUnic@2:
; Line 685
	movzx	eax, BYTE PTR _b$[ebp]
	sub	eax, 24					; 00000018H
	mov	BYTE PTR _dynamicWindow$[ebp], al
; Line 686
	mov	BYTE PTR _state$[ebp], 6
$LN55@SCSUToUnic@2:
; Line 687
	jmp	SHORT $LN58@SCSUToUnic@2
$LN57@SCSUToUnic@2:
; Line 688
	movzx	eax, BYTE PTR _b$[ebp]
	cmp	eax, 8
	jg	SHORT $LN53@SCSUToUnic@2
; Line 689
	movzx	eax, BYTE PTR _b$[ebp]
	sub	eax, 1
	mov	BYTE PTR _quoteWindow$[ebp], al
; Line 690
	mov	BYTE PTR _state$[ebp], 3
	jmp	SHORT $LN58@SCSUToUnic@2
$LN53@SCSUToUnic@2:
; Line 691
	movzx	eax, BYTE PTR _b$[ebp]
	cmp	eax, 11					; 0000000bH
	jne	SHORT $LN51@SCSUToUnic@2
; Line 692
	mov	BYTE PTR _state$[ebp], 4
	jmp	SHORT $LN58@SCSUToUnic@2
$LN51@SCSUToUnic@2:
; Line 693
	movzx	eax, BYTE PTR _b$[ebp]
	cmp	eax, 14					; 0000000eH
	jne	SHORT $LN49@SCSUToUnic@2
; Line 694
	mov	BYTE PTR _state$[ebp], 1
	jmp	SHORT $LN58@SCSUToUnic@2
$LN49@SCSUToUnic@2:
; Line 695
	movzx	eax, BYTE PTR _b$[ebp]
	cmp	eax, 15					; 0000000fH
	jne	SHORT $LN47@SCSUToUnic@2
; Line 696
	mov	BYTE PTR _isSingleByteMode$[ebp], 0
; Line 697
	jmp	$fastUnicode$8910
; Line 698
	jmp	SHORT $LN58@SCSUToUnic@2
$LN47@SCSUToUnic@2:
; Line 700
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 12			; 0000000cH
; Line 701
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	cl, BYTE PTR _b$[ebp]
	mov	BYTE PTR [eax+37], cl
; Line 702
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	BYTE PTR [eax+36], 1
; Line 703
	jmp	$endloop$8882
$LN58@SCSUToUnic@2:
; Line 707
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	cl, BYTE PTR _b$[ebp]
	mov	BYTE PTR [eax+37], cl
; Line 708
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	BYTE PTR [eax+36], 1
; Line 709
	jmp	$LN61@SCSUToUnic@2
$LN45@SCSUToUnic@2:
; Line 711
	mov	al, BYTE PTR _b$[ebp]
	mov	BYTE PTR _byteOne$[ebp], al
; Line 712
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	cl, BYTE PTR _b$[ebp]
	mov	BYTE PTR [eax+38], cl
; Line 713
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	BYTE PTR [eax+36], 2
; Line 714
	mov	BYTE PTR _state$[ebp], 2
; Line 715
	jmp	$LN61@SCSUToUnic@2
$LN44@SCSUToUnic@2:
; Line 717
	movzx	eax, BYTE PTR _byteOne$[ebp]
	shl	eax, 8
	movzx	ecx, BYTE PTR _b$[ebp]
	or	eax, ecx
	mov	edx, DWORD PTR _target$[ebp]
	mov	WORD PTR [edx], ax
	mov	eax, DWORD PTR _target$[ebp]
	add	eax, 2
	mov	DWORD PTR _target$[ebp], eax
; Line 718
	mov	BYTE PTR _state$[ebp], 0
; Line 719
	jmp	$fastSingle$8866
$LN43@SCSUToUnic@2:
; Line 721
	movzx	eax, BYTE PTR _b$[ebp]
	cmp	eax, 128				; 00000080H
	jge	SHORT $LN42@SCSUToUnic@2
; Line 723
	movsx	eax, BYTE PTR _quoteWindow$[ebp]
	movzx	ecx, BYTE PTR _b$[ebp]
	add	ecx, DWORD PTR _staticOffsets[eax*4]
	mov	edx, DWORD PTR _target$[ebp]
	mov	WORD PTR [edx], cx
	mov	eax, DWORD PTR _target$[ebp]
	add	eax, 2
	mov	DWORD PTR _target$[ebp], eax
; Line 724
	jmp	$LN41@SCSUToUnic@2
$LN42@SCSUToUnic@2:
; Line 726
	movsx	eax, BYTE PTR _quoteWindow$[ebp]
	movzx	ecx, BYTE PTR _b$[ebp]
	and	ecx, 127				; 0000007fH
	mov	edx, DWORD PTR _scsu$[ebp]
	add	ecx, DWORD PTR [edx+eax*4]
	mov	DWORD PTR _c$8919[ebp], ecx
; Line 727
	cmp	DWORD PTR _c$8919[ebp], 65535		; 0000ffffH
	ja	SHORT $LN40@SCSUToUnic@2
; Line 728
	mov	eax, DWORD PTR _target$[ebp]
	mov	cx, WORD PTR _c$8919[ebp]
	mov	WORD PTR [eax], cx
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 2
	mov	DWORD PTR _target$[ebp], edx
; Line 729
	jmp	SHORT $LN41@SCSUToUnic@2
$LN40@SCSUToUnic@2:
; Line 731
	mov	eax, DWORD PTR _c$8919[ebp]
	shr	eax, 10					; 0000000aH
	add	eax, 55232				; 0000d7c0H
	mov	ecx, DWORD PTR _target$[ebp]
	mov	WORD PTR [ecx], ax
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 2
	mov	DWORD PTR _target$[ebp], edx
; Line 732
	mov	eax, DWORD PTR _target$[ebp]
	cmp	eax, DWORD PTR _targetLimit$[ebp]
	jae	SHORT $LN38@SCSUToUnic@2
; Line 733
	mov	eax, DWORD PTR _c$8919[ebp]
	and	eax, 1023				; 000003ffH
	or	eax, 56320				; 0000dc00H
	mov	ecx, DWORD PTR _target$[ebp]
	mov	WORD PTR [ecx], ax
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 2
	mov	DWORD PTR _target$[ebp], edx
; Line 734
	jmp	SHORT $LN41@SCSUToUnic@2
$LN38@SCSUToUnic@2:
; Line 736
	mov	eax, DWORD PTR _c$8919[ebp]
	and	eax, 1023				; 000003ffH
	or	eax, 56320				; 0000dc00H
	mov	ecx, DWORD PTR _cnv$[ebp]
	mov	WORD PTR [ecx+116], ax
; Line 737
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	BYTE PTR [eax+65], 1
; Line 738
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
; Line 739
	jmp	$endloop$8882
$LN41@SCSUToUnic@2:
; Line 743
	mov	BYTE PTR _state$[ebp], 0
; Line 744
	jmp	$fastSingle$8866
$LN36@SCSUToUnic@2:
; Line 746
	movzx	eax, BYTE PTR _b$[ebp]
	sar	eax, 5
	and	eax, 7
	mov	BYTE PTR _dynamicWindow$[ebp], al
; Line 747
	movzx	eax, BYTE PTR _b$[ebp]
	and	eax, 31					; 0000001fH
	mov	BYTE PTR _byteOne$[ebp], al
; Line 748
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	cl, BYTE PTR _b$[ebp]
	mov	BYTE PTR [eax+38], cl
; Line 749
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	BYTE PTR [eax+36], 2
; Line 750
	mov	BYTE PTR _state$[ebp], 5
; Line 751
	jmp	$LN61@SCSUToUnic@2
$LN35@SCSUToUnic@2:
; Line 753
	movzx	eax, BYTE PTR _byteOne$[ebp]
	shl	eax, 15					; 0000000fH
	movzx	ecx, BYTE PTR _b$[ebp]
	shl	ecx, 7
	or	eax, ecx
	add	eax, 65536				; 00010000H
	movsx	edx, BYTE PTR _dynamicWindow$[ebp]
	mov	ecx, DWORD PTR _scsu$[ebp]
	mov	DWORD PTR [ecx+edx*4], eax
; Line 754
	mov	BYTE PTR _state$[ebp], 0
; Line 755
	jmp	$fastSingle$8866
$LN34@SCSUToUnic@2:
; Line 757
	movzx	eax, BYTE PTR _b$[ebp]
	test	eax, eax
	jne	SHORT $LN33@SCSUToUnic@2
; Line 759
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	cl, BYTE PTR _b$[ebp]
	mov	BYTE PTR [eax+38], cl
; Line 760
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	BYTE PTR [eax+36], 2
; Line 761
	jmp	$endloop$8882
	jmp	$LN32@SCSUToUnic@2
$LN33@SCSUToUnic@2:
; Line 762
	movzx	eax, BYTE PTR _b$[ebp]
	cmp	eax, 104				; 00000068H
	jge	SHORT $LN31@SCSUToUnic@2
; Line 763
	movzx	eax, BYTE PTR _b$[ebp]
	shl	eax, 7
	movsx	ecx, BYTE PTR _dynamicWindow$[ebp]
	mov	edx, DWORD PTR _scsu$[ebp]
	mov	DWORD PTR [edx+ecx*4], eax
	jmp	SHORT $LN32@SCSUToUnic@2
$LN31@SCSUToUnic@2:
; Line 764
	movzx	eax, BYTE PTR _b$[ebp]
	sub	eax, 104				; 00000068H
	movzx	ecx, al
	cmp	ecx, 64					; 00000040H
	jge	SHORT $LN29@SCSUToUnic@2
; Line 765
	movzx	eax, BYTE PTR _b$[ebp]
	shl	eax, 7
	add	eax, 44032				; 0000ac00H
	movsx	ecx, BYTE PTR _dynamicWindow$[ebp]
	mov	edx, DWORD PTR _scsu$[ebp]
	mov	DWORD PTR [edx+ecx*4], eax
	jmp	SHORT $LN32@SCSUToUnic@2
$LN29@SCSUToUnic@2:
; Line 766
	movzx	eax, BYTE PTR _b$[ebp]
	cmp	eax, 249				; 000000f9H
	jl	SHORT $LN27@SCSUToUnic@2
; Line 767
	movzx	eax, BYTE PTR _b$[ebp]
	movsx	ecx, BYTE PTR _dynamicWindow$[ebp]
	mov	edx, DWORD PTR _scsu$[ebp]
	mov	eax, DWORD PTR _fixedOffsets[eax*4-996]
	mov	DWORD PTR [edx+ecx*4], eax
; Line 768
	jmp	SHORT $LN32@SCSUToUnic@2
$LN27@SCSUToUnic@2:
; Line 770
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	cl, BYTE PTR _b$[ebp]
	mov	BYTE PTR [eax+38], cl
; Line 771
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	BYTE PTR [eax+36], 2
; Line 772
	jmp	$endloop$8882
$LN32@SCSUToUnic@2:
; Line 774
	mov	BYTE PTR _state$[ebp], 0
; Line 775
	jmp	$fastSingle$8866
$LN61@SCSUToUnic@2:
; Line 777
	jmp	$singleByteMode$8883
$LN64@SCSUToUnic@2:
; Line 778
	jmp	$endloop$8882
$LN75@SCSUToUnic@2:
; Line 780
	movzx	eax, BYTE PTR _state$[ebp]
	test	eax, eax
	jne	SHORT $LN21@SCSUToUnic@2
$fastUnicode$8910:
; Line 782
	mov	eax, DWORD PTR _source$[ebp]
	add	eax, 1
	cmp	eax, DWORD PTR _sourceLimit$[ebp]
	jae	SHORT $LN21@SCSUToUnic@2
	mov	eax, DWORD PTR _target$[ebp]
	cmp	eax, DWORD PTR _targetLimit$[ebp]
	jae	SHORT $LN21@SCSUToUnic@2
	mov	eax, DWORD PTR _source$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _b$[ebp], cl
	movzx	edx, BYTE PTR _b$[ebp]
	sub	edx, 224				; 000000e0H
	movzx	eax, dl
	cmp	eax, 18					; 00000012H
	jle	SHORT $LN21@SCSUToUnic@2
; Line 783
	movzx	eax, BYTE PTR _b$[ebp]
	shl	eax, 8
	mov	ecx, DWORD PTR _source$[ebp]
	movzx	edx, BYTE PTR [ecx+1]
	or	eax, edx
	mov	ecx, DWORD PTR _target$[ebp]
	mov	WORD PTR [ecx], ax
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 2
	mov	DWORD PTR _target$[ebp], edx
; Line 784
	mov	eax, DWORD PTR _source$[ebp]
	add	eax, 2
	mov	DWORD PTR _source$[ebp], eax
; Line 785
	jmp	SHORT $fastUnicode$8910
$LN21@SCSUToUnic@2:
; Line 790
	mov	eax, DWORD PTR _source$[ebp]
	cmp	eax, DWORD PTR _sourceLimit$[ebp]
	jae	$endloop$8882
; Line 791
	mov	eax, DWORD PTR _target$[ebp]
	cmp	eax, DWORD PTR _targetLimit$[ebp]
	jb	SHORT $LN19@SCSUToUnic@2
; Line 793
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
; Line 794
	jmp	$endloop$8882
$LN19@SCSUToUnic@2:
; Line 796
	mov	eax, DWORD PTR _source$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _b$[ebp], cl
	mov	edx, DWORD PTR _source$[ebp]
	add	edx, 1
	mov	DWORD PTR _source$[ebp], edx
; Line 797
	mov	al, BYTE PTR _state$[ebp]
	mov	BYTE PTR tv299[ebp], al
	cmp	BYTE PTR tv299[ebp], 0
	je	SHORT $LN16@SCSUToUnic@2
	cmp	BYTE PTR tv299[ebp], 1
	je	$LN5@SCSUToUnic@2
	cmp	BYTE PTR tv299[ebp], 2
	je	$LN4@SCSUToUnic@2
	jmp	$LN17@SCSUToUnic@2
$LN16@SCSUToUnic@2:
; Line 799
	movzx	eax, BYTE PTR _b$[ebp]
	sub	eax, 224				; 000000e0H
	movzx	ecx, al
	cmp	ecx, 18					; 00000012H
	jle	SHORT $LN15@SCSUToUnic@2
; Line 800
	mov	al, BYTE PTR _b$[ebp]
	mov	BYTE PTR _byteOne$[ebp], al
; Line 801
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	cl, BYTE PTR _b$[ebp]
	mov	BYTE PTR [eax+37], cl
; Line 802
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	BYTE PTR [eax+36], 1
; Line 803
	mov	BYTE PTR _state$[ebp], 2
	jmp	$LN14@SCSUToUnic@2
$LN15@SCSUToUnic@2:
; Line 804
	movzx	eax, BYTE PTR _b$[ebp]
	cmp	eax, 231				; 000000e7H
	jg	SHORT $LN13@SCSUToUnic@2
; Line 805
	movzx	eax, BYTE PTR _b$[ebp]
	sub	eax, 224				; 000000e0H
	mov	BYTE PTR _dynamicWindow$[ebp], al
; Line 806
	mov	BYTE PTR _isSingleByteMode$[ebp], 1
; Line 807
	jmp	$fastSingle$8866
	jmp	$LN14@SCSUToUnic@2
$LN13@SCSUToUnic@2:
; Line 808
	movzx	eax, BYTE PTR _b$[ebp]
	cmp	eax, 239				; 000000efH
	jg	SHORT $LN11@SCSUToUnic@2
; Line 809
	movzx	eax, BYTE PTR _b$[ebp]
	sub	eax, 232				; 000000e8H
	mov	BYTE PTR _dynamicWindow$[ebp], al
; Line 810
	mov	BYTE PTR _isSingleByteMode$[ebp], 1
; Line 811
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	cl, BYTE PTR _b$[ebp]
	mov	BYTE PTR [eax+37], cl
; Line 812
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	BYTE PTR [eax+36], 1
; Line 813
	mov	BYTE PTR _state$[ebp], 6
; Line 814
	jmp	$singleByteMode$8883
	jmp	SHORT $LN14@SCSUToUnic@2
$LN11@SCSUToUnic@2:
; Line 815
	movzx	eax, BYTE PTR _b$[ebp]
	cmp	eax, 241				; 000000f1H
	jne	SHORT $LN9@SCSUToUnic@2
; Line 816
	mov	BYTE PTR _isSingleByteMode$[ebp], 1
; Line 817
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	cl, BYTE PTR _b$[ebp]
	mov	BYTE PTR [eax+37], cl
; Line 818
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	BYTE PTR [eax+36], 1
; Line 819
	mov	BYTE PTR _state$[ebp], 4
; Line 820
	jmp	$singleByteMode$8883
	jmp	SHORT $LN14@SCSUToUnic@2
$LN9@SCSUToUnic@2:
; Line 821
	movzx	eax, BYTE PTR _b$[ebp]
	cmp	eax, 240				; 000000f0H
	jne	SHORT $LN7@SCSUToUnic@2
; Line 822
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	cl, BYTE PTR _b$[ebp]
	mov	BYTE PTR [eax+37], cl
; Line 823
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	BYTE PTR [eax+36], 1
; Line 824
	mov	BYTE PTR _state$[ebp], 1
; Line 825
	jmp	SHORT $LN14@SCSUToUnic@2
$LN7@SCSUToUnic@2:
; Line 827
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 12			; 0000000cH
; Line 828
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	cl, BYTE PTR _b$[ebp]
	mov	BYTE PTR [eax+37], cl
; Line 829
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	BYTE PTR [eax+36], 1
; Line 830
	jmp	SHORT $endloop$8882
$LN14@SCSUToUnic@2:
; Line 832
	jmp	SHORT $LN17@SCSUToUnic@2
$LN5@SCSUToUnic@2:
; Line 834
	mov	al, BYTE PTR _b$[ebp]
	mov	BYTE PTR _byteOne$[ebp], al
; Line 835
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	cl, BYTE PTR _b$[ebp]
	mov	BYTE PTR [eax+38], cl
; Line 836
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	BYTE PTR [eax+36], 2
; Line 837
	mov	BYTE PTR _state$[ebp], 2
; Line 838
	jmp	SHORT $LN17@SCSUToUnic@2
$LN4@SCSUToUnic@2:
; Line 840
	movzx	eax, BYTE PTR _byteOne$[ebp]
	shl	eax, 8
	movzx	ecx, BYTE PTR _b$[ebp]
	or	eax, ecx
	mov	edx, DWORD PTR _target$[ebp]
	mov	WORD PTR [edx], ax
	mov	eax, DWORD PTR _target$[ebp]
	add	eax, 2
	mov	DWORD PTR _target$[ebp], eax
; Line 841
	mov	BYTE PTR _state$[ebp], 0
; Line 842
	jmp	$fastUnicode$8910
$LN17@SCSUToUnic@2:
; Line 844
	jmp	$LN21@SCSUToUnic@2
$endloop$8882:
; Line 849
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN3@SCSUToUnic@2
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	cmp	DWORD PTR [eax], 15			; 0000000fH
	je	SHORT $LN3@SCSUToUnic@2
; Line 851
	mov	BYTE PTR _state$[ebp], 0
	jmp	SHORT $LN2@SCSUToUnic@2
$LN3@SCSUToUnic@2:
; Line 852
	movzx	eax, BYTE PTR _state$[ebp]
	test	eax, eax
	jne	SHORT $LN2@SCSUToUnic@2
; Line 854
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	BYTE PTR [eax+36], 0
$LN2@SCSUToUnic@2:
; Line 856
	mov	eax, DWORD PTR _scsu$[ebp]
	mov	cl, BYTE PTR _isSingleByteMode$[ebp]
	mov	BYTE PTR [eax+64], cl
; Line 857
	mov	eax, DWORD PTR _scsu$[ebp]
	mov	cl, BYTE PTR _state$[ebp]
	mov	BYTE PTR [eax+65], cl
; Line 858
	mov	eax, DWORD PTR _scsu$[ebp]
	mov	cl, BYTE PTR _quoteWindow$[ebp]
	mov	BYTE PTR [eax+66], cl
; Line 859
	mov	eax, DWORD PTR _scsu$[ebp]
	mov	cl, BYTE PTR _dynamicWindow$[ebp]
	mov	BYTE PTR [eax+67], cl
; Line 860
	mov	eax, DWORD PTR _scsu$[ebp]
	mov	cl, BYTE PTR _byteOne$[ebp]
	mov	BYTE PTR [eax+68], cl
; Line 863
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR _source$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 864
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR _target$[ebp]
	mov	DWORD PTR [eax+16], ecx
; Line 866
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN78@SCSUToUnic@2:
	DD	$LN60@SCSUToUnic@2
	DD	$LN45@SCSUToUnic@2
	DD	$LN44@SCSUToUnic@2
	DD	$LN43@SCSUToUnic@2
	DD	$LN36@SCSUToUnic@2
	DD	$LN35@SCSUToUnic@2
	DD	$LN34@SCSUToUnic@2
__SCSUToUnicode ENDP
_TEXT	ENDS
EXTRN	@_RTC_CheckStackVars@8:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __SCSUFromUnicodeWithOffsets
_TEXT	SEGMENT
tv495 = -448						; size = 4
tv480 = -448						; size = 4
tv460 = -448						; size = 4
tv447 = -448						; size = 4
_p$9241 = -248						; size = 4
_window$ = -233						; size = 1
_code$ = -224						; size = 4
_trail$ = -212						; size = 2
_lead$ = -200						; size = 2
_offset$ = -188						; size = 4
_length$ = -176						; size = 4
_nextSourceIndex$ = -164				; size = 4
_sourceIndex$ = -152					; size = 4
_delta$ = -140						; size = 4
_c$ = -128						; size = 4
_currentOffset$ = -116					; size = 4
_dynamicWindow$ = -101					; size = 1
_isSingleByteMode$ = -89				; size = 1
_offsets$ = -80						; size = 4
_targetCapacity$ = -68					; size = 4
_target$ = -56						; size = 4
_sourceLimit$ = -44					; size = 4
_source$ = -32						; size = 4
_scsu$ = -20						; size = 4
_cnv$ = -8						; size = 4
_pArgs$ = 8						; size = 4
_pErrorCode$ = 12					; size = 4
__SCSUFromUnicodeWithOffsets PROC			; COMDAT
; Line 1010
	push	ebp
	mov	ebp, esp
	sub	esp, 448				; 000001c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-448]
	mov	ecx, 112				; 00000070H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1035
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _cnv$[ebp], ecx
; Line 1036
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _scsu$[ebp], ecx
; Line 1039
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _source$[ebp], ecx
; Line 1040
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _sourceLimit$[ebp], ecx
; Line 1041
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _target$[ebp], ecx
; Line 1042
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR _pArgs$[ebp]
	mov	edx, DWORD PTR [eax+20]
	sub	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _targetCapacity$[ebp], edx
; Line 1043
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR _offsets$[ebp], ecx
; Line 1046
	mov	eax, DWORD PTR _scsu$[ebp]
	mov	cl, BYTE PTR [eax+72]
	mov	BYTE PTR _isSingleByteMode$[ebp], cl
; Line 1047
	mov	eax, DWORD PTR _scsu$[ebp]
	mov	cl, BYTE PTR [eax+73]
	mov	BYTE PTR _dynamicWindow$[ebp], cl
; Line 1048
	movzx	eax, BYTE PTR _dynamicWindow$[ebp]
	mov	ecx, DWORD PTR _scsu$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+32]
	mov	DWORD PTR _currentOffset$[ebp], edx
; Line 1050
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	DWORD PTR _c$[ebp], ecx
; Line 1053
	mov	eax, DWORD PTR _c$[ebp]
	neg	eax
	sbb	eax, eax
	mov	DWORD PTR _sourceIndex$[ebp], eax
; Line 1054
	mov	DWORD PTR _nextSourceIndex$[ebp], 0
$loop$9073:
; Line 1058
	movsx	eax, BYTE PTR _isSingleByteMode$[ebp]
	test	eax, eax
	je	$LN116@SCSUFromUn
; Line 1059
	cmp	DWORD PTR _c$[ebp], 0
	je	SHORT $LN114@SCSUFromUn
	cmp	DWORD PTR _targetCapacity$[ebp], 0
	jle	SHORT $LN114@SCSUFromUn
; Line 1060
	jmp	$getTrailSingle$9076
$LN114@SCSUFromUn:
; Line 1065
	mov	eax, DWORD PTR _source$[ebp]
	cmp	eax, DWORD PTR _sourceLimit$[ebp]
	jae	$LN113@SCSUFromUn
; Line 1066
	cmp	DWORD PTR _targetCapacity$[ebp], 0
	jg	SHORT $LN112@SCSUFromUn
; Line 1068
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
; Line 1069
	jmp	$LN113@SCSUFromUn
$LN112@SCSUFromUn:
; Line 1071
	mov	eax, DWORD PTR _source$[ebp]
	movzx	ecx, WORD PTR [eax]
	mov	DWORD PTR _c$[ebp], ecx
	mov	edx, DWORD PTR _source$[ebp]
	add	edx, 2
	mov	DWORD PTR _source$[ebp], edx
; Line 1072
	mov	eax, DWORD PTR _nextSourceIndex$[ebp]
	add	eax, 1
	mov	DWORD PTR _nextSourceIndex$[ebp], eax
; Line 1074
	mov	eax, DWORD PTR _c$[ebp]
	sub	eax, 32					; 00000020H
	cmp	eax, 95					; 0000005fH
	ja	SHORT $LN111@SCSUFromUn
; Line 1076
	mov	eax, DWORD PTR _target$[ebp]
	mov	cl, BYTE PTR _c$[ebp]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 1
	mov	DWORD PTR _target$[ebp], edx
; Line 1077
	cmp	DWORD PTR _offsets$[ebp], 0
	je	SHORT $LN110@SCSUFromUn
; Line 1078
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _sourceIndex$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
$LN110@SCSUFromUn:
; Line 1080
	mov	eax, DWORD PTR _targetCapacity$[ebp]
	sub	eax, 1
	mov	DWORD PTR _targetCapacity$[ebp], eax
	jmp	$LN109@SCSUFromUn
$LN111@SCSUFromUn:
; Line 1081
	cmp	DWORD PTR _c$[ebp], 32			; 00000020H
	jae	SHORT $LN108@SCSUFromUn
; Line 1082
	mov	eax, 1
	mov	ecx, DWORD PTR _c$[ebp]
	shl	eax, cl
	and	eax, 9729				; 00002601H
	je	SHORT $LN107@SCSUFromUn
; Line 1084
	mov	eax, DWORD PTR _target$[ebp]
	mov	cl, BYTE PTR _c$[ebp]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 1
	mov	DWORD PTR _target$[ebp], edx
; Line 1085
	cmp	DWORD PTR _offsets$[ebp], 0
	je	SHORT $LN106@SCSUFromUn
; Line 1086
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _sourceIndex$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
$LN106@SCSUFromUn:
; Line 1088
	mov	eax, DWORD PTR _targetCapacity$[ebp]
	sub	eax, 1
	mov	DWORD PTR _targetCapacity$[ebp], eax
; Line 1089
	jmp	SHORT $LN105@SCSUFromUn
$LN107@SCSUFromUn:
; Line 1091
	mov	eax, DWORD PTR _c$[ebp]
	or	eax, 256				; 00000100H
	mov	DWORD PTR _c$[ebp], eax
; Line 1092
	mov	DWORD PTR _length$[ebp], 2
; Line 1093
	jmp	$outputBytes$9092
$LN105@SCSUFromUn:
; Line 1094
	jmp	$LN109@SCSUFromUn
$LN108@SCSUFromUn:
; Line 1095
	mov	eax, DWORD PTR _c$[ebp]
	sub	eax, DWORD PTR _currentOffset$[ebp]
	mov	DWORD PTR _delta$[ebp], eax
	cmp	DWORD PTR _delta$[ebp], 127		; 0000007fH
	ja	SHORT $LN103@SCSUFromUn
; Line 1097
	mov	eax, DWORD PTR _delta$[ebp]
	or	eax, 128				; 00000080H
	mov	ecx, DWORD PTR _target$[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 1
	mov	DWORD PTR _target$[ebp], edx
; Line 1098
	cmp	DWORD PTR _offsets$[ebp], 0
	je	SHORT $LN102@SCSUFromUn
; Line 1099
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _sourceIndex$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
$LN102@SCSUFromUn:
; Line 1101
	mov	eax, DWORD PTR _targetCapacity$[ebp]
	sub	eax, 1
	mov	DWORD PTR _targetCapacity$[ebp], eax
	jmp	$LN109@SCSUFromUn
$LN103@SCSUFromUn:
; Line 1102
	mov	eax, DWORD PTR _c$[ebp]
	and	eax, -2048				; fffff800H
	cmp	eax, 55296				; 0000d800H
	jne	$LN100@SCSUFromUn
; Line 1103
	mov	eax, DWORD PTR _c$[ebp]
	and	eax, 1024				; 00000400H
	jne	SHORT $LN99@SCSUFromUn
$getTrailSingle$9076:
; Line 1105
	mov	ax, WORD PTR _c$[ebp]
	mov	WORD PTR _lead$[ebp], ax
; Line 1106
	mov	eax, DWORD PTR _source$[ebp]
	cmp	eax, DWORD PTR _sourceLimit$[ebp]
	jae	SHORT $LN98@SCSUFromUn
; Line 1108
	mov	eax, DWORD PTR _source$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR _trail$[ebp], cx
; Line 1109
	movzx	eax, WORD PTR _trail$[ebp]
	and	eax, -1024				; fffffc00H
	cmp	eax, 56320				; 0000dc00H
	jne	SHORT $LN97@SCSUFromUn
; Line 1110
	mov	eax, DWORD PTR _source$[ebp]
	add	eax, 2
	mov	DWORD PTR _source$[ebp], eax
; Line 1111
	mov	eax, DWORD PTR _nextSourceIndex$[ebp]
	add	eax, 1
	mov	DWORD PTR _nextSourceIndex$[ebp], eax
; Line 1112
	mov	eax, DWORD PTR _c$[ebp]
	shl	eax, 10					; 0000000aH
	movzx	ecx, WORD PTR _trail$[ebp]
	lea	edx, DWORD PTR [eax+ecx-56613888]
	mov	DWORD PTR _c$[ebp], edx
; Line 1115
	jmp	SHORT $LN96@SCSUFromUn
$LN97@SCSUFromUn:
; Line 1118
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 12			; 0000000cH
; Line 1119
	jmp	$endloop$9107
$LN96@SCSUFromUn:
; Line 1121
	jmp	SHORT $LN95@SCSUFromUn
$LN98@SCSUFromUn:
; Line 1123
	jmp	$LN113@SCSUFromUn
$LN95@SCSUFromUn:
; Line 1125
	jmp	SHORT $LN94@SCSUFromUn
$LN99@SCSUFromUn:
; Line 1128
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 12			; 0000000cH
; Line 1129
	jmp	$endloop$9107
$LN94@SCSUFromUn:
; Line 1133
	mov	eax, DWORD PTR _c$[ebp]
	sub	eax, DWORD PTR _currentOffset$[ebp]
	mov	DWORD PTR _delta$[ebp], eax
	cmp	DWORD PTR _delta$[ebp], 127		; 0000007fH
	ja	SHORT $LN93@SCSUFromUn
; Line 1135
	mov	eax, DWORD PTR _delta$[ebp]
	or	eax, 128				; 00000080H
	mov	ecx, DWORD PTR _target$[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 1
	mov	DWORD PTR _target$[ebp], edx
; Line 1136
	cmp	DWORD PTR _offsets$[ebp], 0
	je	SHORT $LN92@SCSUFromUn
; Line 1137
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _sourceIndex$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
$LN92@SCSUFromUn:
; Line 1139
	mov	eax, DWORD PTR _targetCapacity$[ebp]
	sub	eax, 1
	mov	DWORD PTR _targetCapacity$[ebp], eax
	jmp	$LN91@SCSUFromUn
$LN93@SCSUFromUn:
; Line 1140
	mov	eax, DWORD PTR _c$[ebp]
	push	eax
	mov	ecx, DWORD PTR _scsu$[ebp]
	add	ecx, 32					; 00000020H
	push	ecx
	call	_getWindow
	add	esp, 8
	mov	BYTE PTR _window$[ebp], al
	movsx	edx, BYTE PTR _window$[ebp]
	test	edx, edx
	jl	SHORT $LN90@SCSUFromUn
; Line 1142
	mov	al, BYTE PTR _window$[ebp]
	mov	BYTE PTR _dynamicWindow$[ebp], al
; Line 1143
	movzx	eax, BYTE PTR _dynamicWindow$[ebp]
	mov	ecx, DWORD PTR _scsu$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+32]
	mov	DWORD PTR _currentOffset$[ebp], edx
; Line 1144
	movzx	eax, BYTE PTR _dynamicWindow$[ebp]
	push	eax
	mov	ecx, DWORD PTR _scsu$[ebp]
	push	ecx
	call	_useDynamicWindow
	add	esp, 8
; Line 1145
	movzx	eax, BYTE PTR _dynamicWindow$[ebp]
	add	eax, 16					; 00000010H
	shl	eax, 8
	mov	ecx, DWORD PTR _c$[ebp]
	sub	ecx, DWORD PTR _currentOffset$[ebp]
	or	eax, ecx
	or	eax, 128				; 00000080H
	mov	DWORD PTR _c$[ebp], eax
; Line 1146
	mov	DWORD PTR _length$[ebp], 2
; Line 1147
	jmp	$outputBytes$9092
	jmp	$LN91@SCSUFromUn
$LN90@SCSUFromUn:
; Line 1148
	lea	eax, DWORD PTR _offset$[ebp]
	push	eax
	mov	ecx, DWORD PTR _c$[ebp]
	push	ecx
	call	_getDynamicOffset
	add	esp, 8
	mov	DWORD PTR _code$[ebp], eax
	cmp	DWORD PTR _code$[ebp], 0
	jl	$LN88@SCSUFromUn
; Line 1151
	mov	eax, DWORD PTR _code$[ebp]
	sub	eax, 512				; 00000200H
	mov	DWORD PTR _code$[ebp], eax
; Line 1152
	mov	eax, DWORD PTR _scsu$[ebp]
	push	eax
	call	_getNextDynamicWindow
	add	esp, 4
	mov	BYTE PTR _dynamicWindow$[ebp], al
; Line 1153
	movzx	eax, BYTE PTR _dynamicWindow$[ebp]
	mov	ecx, DWORD PTR _scsu$[ebp]
	mov	edx, DWORD PTR _offset$[ebp]
	mov	DWORD PTR [ecx+eax*4+32], edx
	mov	eax, DWORD PTR _offset$[ebp]
	mov	DWORD PTR _currentOffset$[ebp], eax
; Line 1154
	movzx	eax, BYTE PTR _dynamicWindow$[ebp]
	push	eax
	mov	ecx, DWORD PTR _scsu$[ebp]
	push	ecx
	call	_useDynamicWindow
	add	esp, 8
; Line 1155
	movzx	eax, BYTE PTR _dynamicWindow$[ebp]
	shl	eax, 21					; 00000015H
	or	eax, 184549376				; 0b000000H
	mov	ecx, DWORD PTR _code$[ebp]
	shl	ecx, 8
	or	eax, ecx
	mov	edx, DWORD PTR _c$[ebp]
	sub	edx, DWORD PTR _currentOffset$[ebp]
	or	eax, edx
	or	eax, 128				; 00000080H
	mov	DWORD PTR _c$[ebp], eax
; Line 1156
	mov	DWORD PTR _length$[ebp], 4
; Line 1157
	jmp	$outputBytes$9092
; Line 1158
	jmp	SHORT $LN91@SCSUFromUn
$LN88@SCSUFromUn:
; Line 1160
	mov	BYTE PTR _isSingleByteMode$[ebp], 0
; Line 1161
	mov	eax, DWORD PTR _target$[ebp]
	mov	BYTE PTR [eax], 15			; 0000000fH
	mov	ecx, DWORD PTR _target$[ebp]
	add	ecx, 1
	mov	DWORD PTR _target$[ebp], ecx
; Line 1162
	cmp	DWORD PTR _offsets$[ebp], 0
	je	SHORT $LN86@SCSUFromUn
; Line 1163
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _sourceIndex$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
$LN86@SCSUFromUn:
; Line 1165
	mov	eax, DWORD PTR _targetCapacity$[ebp]
	sub	eax, 1
	mov	DWORD PTR _targetCapacity$[ebp], eax
; Line 1166
	movzx	eax, WORD PTR _lead$[ebp]
	shl	eax, 16					; 00000010H
	movzx	ecx, WORD PTR _trail$[ebp]
	or	eax, ecx
	mov	DWORD PTR _c$[ebp], eax
; Line 1167
	mov	DWORD PTR _length$[ebp], 4
; Line 1168
	jmp	$outputBytes$9092
$LN91@SCSUFromUn:
; Line 1169
	jmp	$LN109@SCSUFromUn
$LN100@SCSUFromUn:
; Line 1170
	cmp	DWORD PTR _c$[ebp], 160			; 000000a0H
	jae	SHORT $LN84@SCSUFromUn
; Line 1172
	mov	eax, DWORD PTR _c$[ebp]
	and	eax, 127				; 0000007fH
	or	eax, 512				; 00000200H
	mov	DWORD PTR _c$[ebp], eax
; Line 1173
	mov	DWORD PTR _length$[ebp], 2
; Line 1174
	jmp	$outputBytes$9092
	jmp	$LN109@SCSUFromUn
$LN84@SCSUFromUn:
; Line 1175
	cmp	DWORD PTR _c$[ebp], 65279		; 0000feffH
	je	SHORT $LN81@SCSUFromUn
	cmp	DWORD PTR _c$[ebp], 65520		; 0000fff0H
	jb	SHORT $LN82@SCSUFromUn
$LN81@SCSUFromUn:
; Line 1177
	mov	eax, DWORD PTR _c$[ebp]
	or	eax, 917504				; 000e0000H
	mov	DWORD PTR _c$[ebp], eax
; Line 1178
	mov	DWORD PTR _length$[ebp], 3
; Line 1179
	jmp	$outputBytes$9092
; Line 1180
	jmp	$LN109@SCSUFromUn
$LN82@SCSUFromUn:
; Line 1182
	mov	eax, DWORD PTR _c$[ebp]
	push	eax
	mov	ecx, DWORD PTR _scsu$[ebp]
	add	ecx, 32					; 00000020H
	push	ecx
	call	_getWindow
	add	esp, 8
	mov	BYTE PTR _window$[ebp], al
	movsx	edx, BYTE PTR _window$[ebp]
	test	edx, edx
	jl	$LN79@SCSUFromUn
; Line 1184
	mov	eax, DWORD PTR _source$[ebp]
	cmp	eax, DWORD PTR _sourceLimit$[ebp]
	jae	SHORT $LN77@SCSUFromUn
	mov	eax, DWORD PTR _source$[ebp]
	movzx	ecx, WORD PTR [eax]
	push	ecx
	movsx	edx, BYTE PTR _window$[ebp]
	mov	eax, DWORD PTR _scsu$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4+32]
	push	ecx
	call	_isInOffsetWindowOrDirect
	add	esp, 8
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN78@SCSUFromUn
$LN77@SCSUFromUn:
; Line 1186
	mov	al, BYTE PTR _window$[ebp]
	mov	BYTE PTR _dynamicWindow$[ebp], al
; Line 1187
	movzx	eax, BYTE PTR _dynamicWindow$[ebp]
	mov	ecx, DWORD PTR _scsu$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+32]
	mov	DWORD PTR _currentOffset$[ebp], edx
; Line 1188
	movzx	eax, BYTE PTR _dynamicWindow$[ebp]
	push	eax
	mov	ecx, DWORD PTR _scsu$[ebp]
	push	ecx
	call	_useDynamicWindow
	add	esp, 8
; Line 1189
	movzx	eax, BYTE PTR _dynamicWindow$[ebp]
	add	eax, 16					; 00000010H
	shl	eax, 8
	mov	ecx, DWORD PTR _c$[ebp]
	sub	ecx, DWORD PTR _currentOffset$[ebp]
	or	eax, ecx
	or	eax, 128				; 00000080H
	mov	DWORD PTR _c$[ebp], eax
; Line 1190
	mov	DWORD PTR _length$[ebp], 2
; Line 1191
	jmp	$outputBytes$9092
; Line 1192
	jmp	SHORT $LN76@SCSUFromUn
$LN78@SCSUFromUn:
; Line 1194
	movsx	eax, BYTE PTR _window$[ebp]
	add	eax, 1
	shl	eax, 8
	movsx	ecx, BYTE PTR _window$[ebp]
	mov	edx, DWORD PTR _scsu$[ebp]
	mov	esi, DWORD PTR _c$[ebp]
	sub	esi, DWORD PTR [edx+ecx*4+32]
	or	eax, esi
	or	eax, 128				; 00000080H
	mov	DWORD PTR _c$[ebp], eax
; Line 1195
	mov	DWORD PTR _length$[ebp], 2
; Line 1196
	jmp	$outputBytes$9092
$LN76@SCSUFromUn:
; Line 1197
	jmp	$LN109@SCSUFromUn
$LN79@SCSUFromUn:
; Line 1198
	mov	eax, DWORD PTR _c$[ebp]
	push	eax
	push	OFFSET _staticOffsets
	call	_getWindow
	add	esp, 8
	mov	BYTE PTR _window$[ebp], al
	movsx	ecx, BYTE PTR _window$[ebp]
	test	ecx, ecx
	jl	SHORT $LN74@SCSUFromUn
; Line 1200
	movsx	eax, BYTE PTR _window$[ebp]
	add	eax, 1
	shl	eax, 8
	movsx	ecx, BYTE PTR _window$[ebp]
	mov	edx, DWORD PTR _c$[ebp]
	sub	edx, DWORD PTR _staticOffsets[ecx*4]
	or	eax, edx
	mov	DWORD PTR _c$[ebp], eax
; Line 1201
	mov	DWORD PTR _length$[ebp], 2
; Line 1202
	jmp	$outputBytes$9092
	jmp	$LN109@SCSUFromUn
$LN74@SCSUFromUn:
; Line 1203
	lea	eax, DWORD PTR _offset$[ebp]
	push	eax
	mov	ecx, DWORD PTR _c$[ebp]
	push	ecx
	call	_getDynamicOffset
	add	esp, 8
	mov	DWORD PTR _code$[ebp], eax
	cmp	DWORD PTR _code$[ebp], 0
	jl	SHORT $LN72@SCSUFromUn
; Line 1205
	mov	eax, DWORD PTR _scsu$[ebp]
	push	eax
	call	_getNextDynamicWindow
	add	esp, 4
	mov	BYTE PTR _dynamicWindow$[ebp], al
; Line 1206
	movzx	eax, BYTE PTR _dynamicWindow$[ebp]
	mov	ecx, DWORD PTR _scsu$[ebp]
	mov	edx, DWORD PTR _offset$[ebp]
	mov	DWORD PTR [ecx+eax*4+32], edx
	mov	eax, DWORD PTR _offset$[ebp]
	mov	DWORD PTR _currentOffset$[ebp], eax
; Line 1207
	movzx	eax, BYTE PTR _dynamicWindow$[ebp]
	push	eax
	mov	ecx, DWORD PTR _scsu$[ebp]
	push	ecx
	call	_useDynamicWindow
	add	esp, 8
; Line 1208
	movzx	eax, BYTE PTR _dynamicWindow$[ebp]
	add	eax, 24					; 00000018H
	shl	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _code$[ebp]
	shl	ecx, 8
	or	eax, ecx
	mov	edx, DWORD PTR _c$[ebp]
	sub	edx, DWORD PTR _currentOffset$[ebp]
	or	eax, edx
	or	eax, 128				; 00000080H
	mov	DWORD PTR _c$[ebp], eax
; Line 1209
	mov	DWORD PTR _length$[ebp], 3
; Line 1210
	jmp	$outputBytes$9092
; Line 1211
	jmp	SHORT $LN109@SCSUFromUn
$LN72@SCSUFromUn:
; Line 1213
	mov	eax, DWORD PTR _c$[ebp]
	sub	eax, 13312				; 00003400H
	cmp	eax, 41984				; 0000a400H
	jae	SHORT $LN70@SCSUFromUn
	mov	eax, DWORD PTR _source$[ebp]
	cmp	eax, DWORD PTR _sourceLimit$[ebp]
	jae	SHORT $LN69@SCSUFromUn
	mov	eax, DWORD PTR _source$[ebp]
	movzx	ecx, WORD PTR [eax]
	sub	ecx, 13312				; 00003400H
	cmp	ecx, 41984				; 0000a400H
	jae	SHORT $LN70@SCSUFromUn
$LN69@SCSUFromUn:
; Line 1219
	mov	BYTE PTR _isSingleByteMode$[ebp], 0
; Line 1220
	mov	eax, DWORD PTR _c$[ebp]
	or	eax, 983040				; 000f0000H
	mov	DWORD PTR _c$[ebp], eax
; Line 1221
	mov	DWORD PTR _length$[ebp], 3
; Line 1222
	jmp	$outputBytes$9092
; Line 1223
	jmp	SHORT $LN109@SCSUFromUn
$LN70@SCSUFromUn:
; Line 1225
	mov	eax, DWORD PTR _c$[ebp]
	or	eax, 917504				; 000e0000H
	mov	DWORD PTR _c$[ebp], eax
; Line 1226
	mov	DWORD PTR _length$[ebp], 3
; Line 1227
	jmp	$outputBytes$9092
$LN109@SCSUFromUn:
; Line 1232
	mov	DWORD PTR _c$[ebp], 0
; Line 1233
	mov	eax, DWORD PTR _nextSourceIndex$[ebp]
	mov	DWORD PTR _sourceIndex$[ebp], eax
; Line 1234
	jmp	$LN114@SCSUFromUn
$LN113@SCSUFromUn:
; Line 1235
	jmp	$endloop$9107
$LN116@SCSUFromUn:
; Line 1236
	cmp	DWORD PTR _c$[ebp], 0
	je	SHORT $LN65@SCSUFromUn
	cmp	DWORD PTR _targetCapacity$[ebp], 0
	jle	SHORT $LN65@SCSUFromUn
; Line 1237
	jmp	$getTrailUnicode$9154
$LN65@SCSUFromUn:
; Line 1242
	mov	eax, DWORD PTR _source$[ebp]
	cmp	eax, DWORD PTR _sourceLimit$[ebp]
	jae	$endloop$9107
; Line 1243
	cmp	DWORD PTR _targetCapacity$[ebp], 0
	jg	SHORT $LN63@SCSUFromUn
; Line 1245
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
; Line 1246
	jmp	$endloop$9107
$LN63@SCSUFromUn:
; Line 1248
	mov	eax, DWORD PTR _source$[ebp]
	movzx	ecx, WORD PTR [eax]
	mov	DWORD PTR _c$[ebp], ecx
	mov	edx, DWORD PTR _source$[ebp]
	add	edx, 2
	mov	DWORD PTR _source$[ebp], edx
; Line 1249
	mov	eax, DWORD PTR _nextSourceIndex$[ebp]
	add	eax, 1
	mov	DWORD PTR _nextSourceIndex$[ebp], eax
; Line 1251
	mov	eax, DWORD PTR _c$[ebp]
	sub	eax, 13312				; 00003400H
	cmp	eax, 41984				; 0000a400H
	jae	SHORT $LN62@SCSUFromUn
; Line 1253
	cmp	DWORD PTR _targetCapacity$[ebp], 2
	jl	SHORT $LN61@SCSUFromUn
; Line 1254
	mov	eax, DWORD PTR _c$[ebp]
	shr	eax, 8
	mov	ecx, DWORD PTR _target$[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 1
	mov	DWORD PTR _target$[ebp], edx
; Line 1255
	mov	eax, DWORD PTR _target$[ebp]
	mov	cl, BYTE PTR _c$[ebp]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 1
	mov	DWORD PTR _target$[ebp], edx
; Line 1256
	cmp	DWORD PTR _offsets$[ebp], 0
	je	SHORT $LN60@SCSUFromUn
; Line 1257
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _sourceIndex$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
; Line 1258
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _sourceIndex$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
$LN60@SCSUFromUn:
; Line 1260
	mov	eax, DWORD PTR _targetCapacity$[ebp]
	sub	eax, 2
	mov	DWORD PTR _targetCapacity$[ebp], eax
; Line 1261
	jmp	SHORT $LN59@SCSUFromUn
$LN61@SCSUFromUn:
; Line 1262
	mov	DWORD PTR _length$[ebp], 2
; Line 1263
	jmp	$outputBytes$9092
$LN59@SCSUFromUn:
; Line 1264
	jmp	$LN58@SCSUFromUn
$LN62@SCSUFromUn:
; Line 1265
	mov	eax, DWORD PTR _c$[ebp]
	sub	eax, 13312				; 00003400H
	cmp	eax, 48896				; 0000bf00H
	jb	$LN57@SCSUFromUn
; Line 1267
	mov	eax, DWORD PTR _source$[ebp]
	cmp	eax, DWORD PTR _sourceLimit$[ebp]
	jae	SHORT $LN55@SCSUFromUn
	mov	eax, DWORD PTR _source$[ebp]
	movzx	ecx, WORD PTR [eax]
	sub	ecx, 13312				; 00003400H
	cmp	ecx, 41984				; 0000a400H
	jb	$LN56@SCSUFromUn
$LN55@SCSUFromUn:
; Line 1268
	mov	eax, DWORD PTR _c$[ebp]
	sub	eax, 48					; 00000030H
	cmp	eax, 10					; 0000000aH
	jb	SHORT $LN53@SCSUFromUn
	mov	eax, DWORD PTR _c$[ebp]
	sub	eax, 97					; 00000061H
	cmp	eax, 26					; 0000001aH
	jb	SHORT $LN53@SCSUFromUn
	mov	eax, DWORD PTR _c$[ebp]
	sub	eax, 65					; 00000041H
	cmp	eax, 26					; 0000001aH
	jae	SHORT $LN54@SCSUFromUn
$LN53@SCSUFromUn:
; Line 1270
	mov	BYTE PTR _isSingleByteMode$[ebp], 1
; Line 1271
	movzx	eax, BYTE PTR _dynamicWindow$[ebp]
	add	eax, 224				; 000000e0H
	shl	eax, 8
	or	eax, DWORD PTR _c$[ebp]
	or	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR _c$[ebp], eax
; Line 1272
	mov	DWORD PTR _length$[ebp], 2
; Line 1273
	jmp	$outputBytes$9092
	jmp	$LN56@SCSUFromUn
$LN54@SCSUFromUn:
; Line 1274
	mov	eax, DWORD PTR _c$[ebp]
	push	eax
	mov	ecx, DWORD PTR _scsu$[ebp]
	add	ecx, 32					; 00000020H
	push	ecx
	call	_getWindow
	add	esp, 8
	mov	BYTE PTR _window$[ebp], al
	movsx	edx, BYTE PTR _window$[ebp]
	test	edx, edx
	jl	SHORT $LN51@SCSUFromUn
; Line 1276
	mov	BYTE PTR _isSingleByteMode$[ebp], 1
; Line 1277
	mov	al, BYTE PTR _window$[ebp]
	mov	BYTE PTR _dynamicWindow$[ebp], al
; Line 1278
	movzx	eax, BYTE PTR _dynamicWindow$[ebp]
	mov	ecx, DWORD PTR _scsu$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+32]
	mov	DWORD PTR _currentOffset$[ebp], edx
; Line 1279
	movzx	eax, BYTE PTR _dynamicWindow$[ebp]
	push	eax
	mov	ecx, DWORD PTR _scsu$[ebp]
	push	ecx
	call	_useDynamicWindow
	add	esp, 8
; Line 1280
	movzx	eax, BYTE PTR _dynamicWindow$[ebp]
	add	eax, 224				; 000000e0H
	shl	eax, 8
	mov	ecx, DWORD PTR _c$[ebp]
	sub	ecx, DWORD PTR _currentOffset$[ebp]
	or	eax, ecx
	or	eax, 128				; 00000080H
	mov	DWORD PTR _c$[ebp], eax
; Line 1281
	mov	DWORD PTR _length$[ebp], 2
; Line 1282
	jmp	$outputBytes$9092
	jmp	$LN56@SCSUFromUn
$LN51@SCSUFromUn:
; Line 1283
	lea	eax, DWORD PTR _offset$[ebp]
	push	eax
	mov	ecx, DWORD PTR _c$[ebp]
	push	ecx
	call	_getDynamicOffset
	add	esp, 8
	mov	DWORD PTR _code$[ebp], eax
	cmp	DWORD PTR _code$[ebp], 0
	jl	SHORT $LN56@SCSUFromUn
; Line 1285
	mov	BYTE PTR _isSingleByteMode$[ebp], 1
; Line 1286
	mov	eax, DWORD PTR _scsu$[ebp]
	push	eax
	call	_getNextDynamicWindow
	add	esp, 4
	mov	BYTE PTR _dynamicWindow$[ebp], al
; Line 1287
	movzx	eax, BYTE PTR _dynamicWindow$[ebp]
	mov	ecx, DWORD PTR _scsu$[ebp]
	mov	edx, DWORD PTR _offset$[ebp]
	mov	DWORD PTR [ecx+eax*4+32], edx
	mov	eax, DWORD PTR _offset$[ebp]
	mov	DWORD PTR _currentOffset$[ebp], eax
; Line 1288
	movzx	eax, BYTE PTR _dynamicWindow$[ebp]
	push	eax
	mov	ecx, DWORD PTR _scsu$[ebp]
	push	ecx
	call	_useDynamicWindow
	add	esp, 8
; Line 1289
	movzx	eax, BYTE PTR _dynamicWindow$[ebp]
	add	eax, 232				; 000000e8H
	shl	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _code$[ebp]
	shl	ecx, 8
	or	eax, ecx
	mov	edx, DWORD PTR _c$[ebp]
	sub	edx, DWORD PTR _currentOffset$[ebp]
	or	eax, edx
	or	eax, 128				; 00000080H
	mov	DWORD PTR _c$[ebp], eax
; Line 1290
	mov	DWORD PTR _length$[ebp], 3
; Line 1291
	jmp	$outputBytes$9092
$LN56@SCSUFromUn:
; Line 1296
	mov	DWORD PTR _length$[ebp], 2
; Line 1297
	jmp	$outputBytes$9092
	jmp	$LN58@SCSUFromUn
$LN57@SCSUFromUn:
; Line 1298
	cmp	DWORD PTR _c$[ebp], 57344		; 0000e000H
	jae	$LN47@SCSUFromUn
; Line 1300
	mov	eax, DWORD PTR _c$[ebp]
	and	eax, 1024				; 00000400H
	jne	SHORT $LN46@SCSUFromUn
$getTrailUnicode$9154:
; Line 1302
	mov	ax, WORD PTR _c$[ebp]
	mov	WORD PTR _lead$[ebp], ax
; Line 1303
	mov	eax, DWORD PTR _source$[ebp]
	cmp	eax, DWORD PTR _sourceLimit$[ebp]
	jae	SHORT $LN45@SCSUFromUn
; Line 1305
	mov	eax, DWORD PTR _source$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR _trail$[ebp], cx
; Line 1306
	movzx	eax, WORD PTR _trail$[ebp]
	and	eax, -1024				; fffffc00H
	cmp	eax, 56320				; 0000dc00H
	jne	SHORT $LN44@SCSUFromUn
; Line 1307
	mov	eax, DWORD PTR _source$[ebp]
	add	eax, 2
	mov	DWORD PTR _source$[ebp], eax
; Line 1308
	mov	eax, DWORD PTR _nextSourceIndex$[ebp]
	add	eax, 1
	mov	DWORD PTR _nextSourceIndex$[ebp], eax
; Line 1309
	mov	eax, DWORD PTR _c$[ebp]
	shl	eax, 10					; 0000000aH
	movzx	ecx, WORD PTR _trail$[ebp]
	lea	edx, DWORD PTR [eax+ecx-56613888]
	mov	DWORD PTR _c$[ebp], edx
; Line 1312
	jmp	SHORT $LN43@SCSUFromUn
$LN44@SCSUFromUn:
; Line 1315
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 12			; 0000000cH
; Line 1316
	jmp	$endloop$9107
$LN43@SCSUFromUn:
; Line 1318
	jmp	SHORT $LN42@SCSUFromUn
$LN45@SCSUFromUn:
; Line 1320
	jmp	$endloop$9107
$LN42@SCSUFromUn:
; Line 1322
	jmp	SHORT $LN41@SCSUFromUn
$LN46@SCSUFromUn:
; Line 1325
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 12			; 0000000cH
; Line 1326
	jmp	$endloop$9107
$LN41@SCSUFromUn:
; Line 1332
	mov	eax, DWORD PTR _c$[ebp]
	push	eax
	mov	ecx, DWORD PTR _scsu$[ebp]
	add	ecx, 32					; 00000020H
	push	ecx
	call	_getWindow
	add	esp, 8
	mov	BYTE PTR _window$[ebp], al
	movsx	edx, BYTE PTR _window$[ebp]
	test	edx, edx
	jl	SHORT $LN40@SCSUFromUn
	mov	eax, DWORD PTR _source$[ebp]
	cmp	eax, DWORD PTR _sourceLimit$[ebp]
	jae	SHORT $LN39@SCSUFromUn
	mov	eax, DWORD PTR _source$[ebp]
	movzx	ecx, WORD PTR [eax]
	sub	ecx, 13312				; 00003400H
	cmp	ecx, 41984				; 0000a400H
	jb	SHORT $LN40@SCSUFromUn
$LN39@SCSUFromUn:
; Line 1338
	mov	BYTE PTR _isSingleByteMode$[ebp], 1
; Line 1339
	mov	al, BYTE PTR _window$[ebp]
	mov	BYTE PTR _dynamicWindow$[ebp], al
; Line 1340
	movzx	eax, BYTE PTR _dynamicWindow$[ebp]
	mov	ecx, DWORD PTR _scsu$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+32]
	mov	DWORD PTR _currentOffset$[ebp], edx
; Line 1341
	movzx	eax, BYTE PTR _dynamicWindow$[ebp]
	push	eax
	mov	ecx, DWORD PTR _scsu$[ebp]
	push	ecx
	call	_useDynamicWindow
	add	esp, 8
; Line 1342
	movzx	eax, BYTE PTR _dynamicWindow$[ebp]
	add	eax, 224				; 000000e0H
	shl	eax, 8
	mov	ecx, DWORD PTR _c$[ebp]
	sub	ecx, DWORD PTR _currentOffset$[ebp]
	or	eax, ecx
	or	eax, 128				; 00000080H
	mov	DWORD PTR _c$[ebp], eax
; Line 1343
	mov	DWORD PTR _length$[ebp], 2
; Line 1344
	jmp	$outputBytes$9092
; Line 1345
	jmp	$LN38@SCSUFromUn
$LN40@SCSUFromUn:
; Line 1347
	mov	eax, DWORD PTR _source$[ebp]
	cmp	eax, DWORD PTR _sourceLimit$[ebp]
	jae	$LN37@SCSUFromUn
	movzx	eax, WORD PTR _lead$[ebp]
	mov	ecx, DWORD PTR _source$[ebp]
	movzx	edx, WORD PTR [ecx]
	cmp	eax, edx
	jne	$LN37@SCSUFromUn
	lea	eax, DWORD PTR _offset$[ebp]
	push	eax
	mov	ecx, DWORD PTR _c$[ebp]
	push	ecx
	call	_getDynamicOffset
	add	esp, 8
	mov	DWORD PTR _code$[ebp], eax
	cmp	DWORD PTR _code$[ebp], 0
	jl	$LN37@SCSUFromUn
; Line 1349
	mov	BYTE PTR _isSingleByteMode$[ebp], 1
; Line 1350
	mov	eax, DWORD PTR _code$[ebp]
	sub	eax, 512				; 00000200H
	mov	DWORD PTR _code$[ebp], eax
; Line 1351
	mov	eax, DWORD PTR _scsu$[ebp]
	push	eax
	call	_getNextDynamicWindow
	add	esp, 4
	mov	BYTE PTR _dynamicWindow$[ebp], al
; Line 1352
	movzx	eax, BYTE PTR _dynamicWindow$[ebp]
	mov	ecx, DWORD PTR _scsu$[ebp]
	mov	edx, DWORD PTR _offset$[ebp]
	mov	DWORD PTR [ecx+eax*4+32], edx
	mov	eax, DWORD PTR _offset$[ebp]
	mov	DWORD PTR _currentOffset$[ebp], eax
; Line 1353
	movzx	eax, BYTE PTR _dynamicWindow$[ebp]
	push	eax
	mov	ecx, DWORD PTR _scsu$[ebp]
	push	ecx
	call	_useDynamicWindow
	add	esp, 8
; Line 1354
	movzx	eax, BYTE PTR _dynamicWindow$[ebp]
	shl	eax, 21					; 00000015H
	or	eax, -251658240				; f1000000H
	mov	ecx, DWORD PTR _code$[ebp]
	shl	ecx, 8
	or	eax, ecx
	mov	edx, DWORD PTR _c$[ebp]
	sub	edx, DWORD PTR _currentOffset$[ebp]
	or	eax, edx
	or	eax, 128				; 00000080H
	mov	DWORD PTR _c$[ebp], eax
; Line 1355
	mov	DWORD PTR _length$[ebp], 4
; Line 1356
	jmp	$outputBytes$9092
; Line 1357
	jmp	SHORT $LN38@SCSUFromUn
$LN37@SCSUFromUn:
; Line 1359
	movzx	eax, WORD PTR _lead$[ebp]
	shl	eax, 16					; 00000010H
	movzx	ecx, WORD PTR _trail$[ebp]
	or	eax, ecx
	mov	DWORD PTR _c$[ebp], eax
; Line 1360
	mov	DWORD PTR _length$[ebp], 4
; Line 1361
	jmp	SHORT $outputBytes$9092
$LN38@SCSUFromUn:
; Line 1363
	jmp	SHORT $LN58@SCSUFromUn
$LN47@SCSUFromUn:
; Line 1365
	mov	eax, DWORD PTR _c$[ebp]
	or	eax, 15728640				; 00f00000H
	mov	DWORD PTR _c$[ebp], eax
; Line 1366
	mov	DWORD PTR _length$[ebp], 3
; Line 1367
	jmp	SHORT $outputBytes$9092
$LN58@SCSUFromUn:
; Line 1371
	mov	DWORD PTR _c$[ebp], 0
; Line 1372
	mov	eax, DWORD PTR _nextSourceIndex$[ebp]
	mov	DWORD PTR _sourceIndex$[ebp], eax
; Line 1373
	jmp	$LN65@SCSUFromUn
$endloop$9107:
; Line 1378
	mov	eax, DWORD PTR _scsu$[ebp]
	mov	cl, BYTE PTR _isSingleByteMode$[ebp]
	mov	BYTE PTR [eax+72], cl
; Line 1379
	mov	eax, DWORD PTR _scsu$[ebp]
	mov	cl, BYTE PTR _dynamicWindow$[ebp]
	mov	BYTE PTR [eax+73], cl
; Line 1381
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	ecx, DWORD PTR _c$[ebp]
	mov	DWORD PTR [eax+56], ecx
; Line 1384
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR _source$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 1385
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR _target$[ebp]
	mov	DWORD PTR [eax+16], ecx
; Line 1386
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR _offsets$[ebp]
	mov	DWORD PTR [eax+24], ecx
; Line 1387
	jmp	$LN117@SCSUFromUn
$outputBytes$9092:
; Line 1392
	mov	eax, DWORD PTR _length$[ebp]
	cmp	eax, DWORD PTR _targetCapacity$[ebp]
	jg	$LN34@SCSUFromUn
; Line 1393
	cmp	DWORD PTR _offsets$[ebp], 0
	jne	$LN33@SCSUFromUn
; Line 1394
	mov	eax, DWORD PTR _length$[ebp]
	mov	DWORD PTR tv447[ebp], eax
	mov	ecx, DWORD PTR tv447[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv447[ebp], ecx
	cmp	DWORD PTR tv447[ebp], 3
	ja	SHORT $LN31@SCSUFromUn
	mov	edx, DWORD PTR tv447[ebp]
	jmp	DWORD PTR $LN122@SCSUFromUn[edx*4]
$LN30@SCSUFromUn:
; Line 1397
	mov	eax, DWORD PTR _c$[ebp]
	shr	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _target$[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 1
	mov	DWORD PTR _target$[ebp], edx
$LN29@SCSUFromUn:
; Line 1399
	mov	eax, DWORD PTR _c$[ebp]
	shr	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _target$[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 1
	mov	DWORD PTR _target$[ebp], edx
$LN28@SCSUFromUn:
; Line 1401
	mov	eax, DWORD PTR _c$[ebp]
	shr	eax, 8
	mov	ecx, DWORD PTR _target$[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 1
	mov	DWORD PTR _target$[ebp], edx
$LN27@SCSUFromUn:
; Line 1403
	mov	eax, DWORD PTR _target$[ebp]
	mov	cl, BYTE PTR _c$[ebp]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 1
	mov	DWORD PTR _target$[ebp], edx
$LN31@SCSUFromUn:
; Line 1408
	jmp	$LN25@SCSUFromUn
$LN33@SCSUFromUn:
; Line 1409
	mov	eax, DWORD PTR _length$[ebp]
	mov	DWORD PTR tv460[ebp], eax
	mov	ecx, DWORD PTR tv460[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv460[ebp], ecx
	cmp	DWORD PTR tv460[ebp], 3
	ja	$LN25@SCSUFromUn
	mov	edx, DWORD PTR tv460[ebp]
	jmp	DWORD PTR $LN123@SCSUFromUn[edx*4]
$LN22@SCSUFromUn:
; Line 1412
	mov	eax, DWORD PTR _c$[ebp]
	shr	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _target$[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 1
	mov	DWORD PTR _target$[ebp], edx
; Line 1413
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _sourceIndex$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
$LN21@SCSUFromUn:
; Line 1415
	mov	eax, DWORD PTR _c$[ebp]
	shr	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _target$[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 1
	mov	DWORD PTR _target$[ebp], edx
; Line 1416
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _sourceIndex$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
$LN20@SCSUFromUn:
; Line 1418
	mov	eax, DWORD PTR _c$[ebp]
	shr	eax, 8
	mov	ecx, DWORD PTR _target$[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 1
	mov	DWORD PTR _target$[ebp], edx
; Line 1419
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _sourceIndex$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
$LN19@SCSUFromUn:
; Line 1421
	mov	eax, DWORD PTR _target$[ebp]
	mov	cl, BYTE PTR _c$[ebp]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 1
	mov	DWORD PTR _target$[ebp], edx
; Line 1422
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _sourceIndex$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
$LN25@SCSUFromUn:
; Line 1428
	mov	eax, DWORD PTR _targetCapacity$[ebp]
	sub	eax, DWORD PTR _length$[ebp]
	mov	DWORD PTR _targetCapacity$[ebp], eax
; Line 1431
	mov	DWORD PTR _c$[ebp], 0
; Line 1432
	mov	eax, DWORD PTR _nextSourceIndex$[ebp]
	mov	DWORD PTR _sourceIndex$[ebp], eax
; Line 1433
	jmp	$loop$9073
; Line 1434
	jmp	$LN117@SCSUFromUn
$LN34@SCSUFromUn:
; Line 1445
	mov	eax, DWORD PTR _length$[ebp]
	sub	eax, DWORD PTR _targetCapacity$[ebp]
	mov	DWORD PTR _length$[ebp], eax
; Line 1446
	mov	eax, DWORD PTR _cnv$[ebp]
	add	eax, 76					; 0000004cH
	mov	DWORD PTR _p$9241[ebp], eax
; Line 1447
	mov	eax, DWORD PTR _length$[ebp]
	mov	DWORD PTR tv480[ebp], eax
	mov	ecx, DWORD PTR tv480[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv480[ebp], ecx
	cmp	DWORD PTR tv480[ebp], 3
	ja	SHORT $LN15@SCSUFromUn
	mov	edx, DWORD PTR tv480[ebp]
	jmp	DWORD PTR $LN124@SCSUFromUn[edx*4]
$LN14@SCSUFromUn:
; Line 1450
	mov	eax, DWORD PTR _c$[ebp]
	shr	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _p$9241[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _p$9241[ebp]
	add	edx, 1
	mov	DWORD PTR _p$9241[ebp], edx
$LN13@SCSUFromUn:
; Line 1452
	mov	eax, DWORD PTR _c$[ebp]
	shr	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _p$9241[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _p$9241[ebp]
	add	edx, 1
	mov	DWORD PTR _p$9241[ebp], edx
$LN12@SCSUFromUn:
; Line 1454
	mov	eax, DWORD PTR _c$[ebp]
	shr	eax, 8
	mov	ecx, DWORD PTR _p$9241[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _p$9241[ebp]
	add	edx, 1
	mov	DWORD PTR _p$9241[ebp], edx
$LN11@SCSUFromUn:
; Line 1456
	mov	eax, DWORD PTR _p$9241[ebp]
	mov	cl, BYTE PTR _c$[ebp]
	mov	BYTE PTR [eax], cl
$LN15@SCSUFromUn:
; Line 1461
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	cl, BYTE PTR _length$[ebp]
	mov	BYTE PTR [eax+63], cl
; Line 1464
	mov	ecx, DWORD PTR _length$[ebp]
	shl	ecx, 3
	mov	eax, DWORD PTR _c$[ebp]
	shr	eax, cl
	mov	DWORD PTR _c$[ebp], eax
; Line 1465
	mov	eax, DWORD PTR _targetCapacity$[ebp]
	mov	DWORD PTR tv495[ebp], eax
	cmp	DWORD PTR tv495[ebp], 1
	je	SHORT $LN3@SCSUFromUn
	cmp	DWORD PTR tv495[ebp], 2
	je	SHORT $LN5@SCSUFromUn
	cmp	DWORD PTR tv495[ebp], 3
	je	SHORT $LN7@SCSUFromUn
	jmp	$LN8@SCSUFromUn
$LN7@SCSUFromUn:
; Line 1468
	mov	eax, DWORD PTR _c$[ebp]
	shr	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _target$[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 1
	mov	DWORD PTR _target$[ebp], edx
; Line 1469
	cmp	DWORD PTR _offsets$[ebp], 0
	je	SHORT $LN5@SCSUFromUn
; Line 1470
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _sourceIndex$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
$LN5@SCSUFromUn:
; Line 1473
	mov	eax, DWORD PTR _c$[ebp]
	shr	eax, 8
	mov	ecx, DWORD PTR _target$[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 1
	mov	DWORD PTR _target$[ebp], edx
; Line 1474
	cmp	DWORD PTR _offsets$[ebp], 0
	je	SHORT $LN3@SCSUFromUn
; Line 1475
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _sourceIndex$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
$LN3@SCSUFromUn:
; Line 1478
	mov	eax, DWORD PTR _target$[ebp]
	mov	cl, BYTE PTR _c$[ebp]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 1
	mov	DWORD PTR _target$[ebp], edx
; Line 1479
	cmp	DWORD PTR _offsets$[ebp], 0
	je	SHORT $LN8@SCSUFromUn
; Line 1480
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _sourceIndex$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
$LN8@SCSUFromUn:
; Line 1487
	mov	DWORD PTR _targetCapacity$[ebp], 0
; Line 1488
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
; Line 1489
	mov	DWORD PTR _c$[ebp], 0
; Line 1490
	jmp	$endloop$9107
$LN117@SCSUFromUn:
; Line 1492
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN121@SCSUFromUn
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 448				; 000001c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN121@SCSUFromUn:
	DD	1
	DD	$LN120@SCSUFromUn
$LN120@SCSUFromUn:
	DD	-188					; ffffff44H
	DD	4
	DD	$LN119@SCSUFromUn
$LN119@SCSUFromUn:
	DB	111					; 0000006fH
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	0
	npad	1
$LN122@SCSUFromUn:
	DD	$LN27@SCSUFromUn
	DD	$LN28@SCSUFromUn
	DD	$LN29@SCSUFromUn
	DD	$LN30@SCSUFromUn
$LN123@SCSUFromUn:
	DD	$LN19@SCSUFromUn
	DD	$LN20@SCSUFromUn
	DD	$LN21@SCSUFromUn
	DD	$LN22@SCSUFromUn
$LN124@SCSUFromUn:
	DD	$LN11@SCSUFromUn
	DD	$LN12@SCSUFromUn
	DD	$LN13@SCSUFromUn
	DD	$LN14@SCSUFromUn
__SCSUFromUnicodeWithOffsets ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _getWindow
_TEXT	SEGMENT
_i$ = -8						; size = 4
_offsets$ = 8						; size = 4
_c$ = 12						; size = 4
_getWindow PROC						; COMDAT
; Line 883
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 885
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@getWindow
$LN3@getWindow:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@getWindow:
	cmp	DWORD PTR _i$[ebp], 8
	jge	SHORT $LN2@getWindow
; Line 886
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _offsets$[ebp]
	mov	edx, DWORD PTR _c$[ebp]
	sub	edx, DWORD PTR [ecx+eax*4]
	cmp	edx, 127				; 0000007fH
	ja	SHORT $LN1@getWindow
; Line 887
	mov	al, BYTE PTR _i$[ebp]
	jmp	SHORT $LN5@getWindow
$LN1@getWindow:
; Line 889
	jmp	SHORT $LN3@getWindow
$LN2@getWindow:
; Line 890
	or	al, -1
$LN5@getWindow:
; Line 891
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_getWindow ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _isInOffsetWindowOrDirect
_TEXT	SEGMENT
tv72 = -193						; size = 1
_offset$ = 8						; size = 4
_c$ = 12						; size = 4
_isInOffsetWindowOrDirect PROC				; COMDAT
; Line 895
	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 898
	mov	eax, DWORD PTR _offset$[ebp]
	add	eax, 127				; 0000007fH
	cmp	DWORD PTR _c$[ebp], eax
	ja	SHORT $LN4@isInOffset
	mov	ecx, DWORD PTR _c$[ebp]
	cmp	ecx, DWORD PTR _offset$[ebp]
	jae	SHORT $LN3@isInOffset
	cmp	DWORD PTR _c$[ebp], 127			; 0000007fH
	ja	SHORT $LN4@isInOffset
	cmp	DWORD PTR _c$[ebp], 32			; 00000020H
	jae	SHORT $LN3@isInOffset
	mov	edx, 1
	mov	ecx, DWORD PTR _c$[ebp]
	shl	edx, cl
	and	edx, 9729				; 00002601H
	je	SHORT $LN4@isInOffset
$LN3@isInOffset:
	mov	BYTE PTR tv72[ebp], 1
	jmp	SHORT $LN7@isInOffset
$LN4@isInOffset:
	mov	BYTE PTR tv72[ebp], 0
$LN7@isInOffset:
	mov	al, BYTE PTR tv72[ebp]
; Line 901
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_isInOffsetWindowOrDirect ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _getNextDynamicWindow
_TEXT	SEGMENT
tv70 = -205						; size = 1
_window$ = -5						; size = 1
_scsu$ = 8						; size = 4
_getNextDynamicWindow PROC				; COMDAT
; Line 907
	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 908
	mov	eax, DWORD PTR _scsu$[ebp]
	movsx	ecx, BYTE PTR [eax+75]
	mov	edx, DWORD PTR _scsu$[ebp]
	mov	al, BYTE PTR [edx+ecx+76]
	mov	BYTE PTR _window$[ebp], al
; Line 909
	mov	eax, DWORD PTR _scsu$[ebp]
	mov	cl, BYTE PTR [eax+75]
	add	cl, 1
	mov	BYTE PTR tv70[ebp], cl
	mov	edx, DWORD PTR _scsu$[ebp]
	mov	al, BYTE PTR tv70[ebp]
	mov	BYTE PTR [edx+75], al
	movsx	ecx, BYTE PTR tv70[ebp]
	cmp	ecx, 8
	jne	SHORT $LN1@getNextDyn
; Line 910
	mov	eax, DWORD PTR _scsu$[ebp]
	mov	BYTE PTR [eax+75], 0
$LN1@getNextDyn:
; Line 912
	mov	al, BYTE PTR _window$[ebp]
; Line 913
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_getNextDynamicWindow ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _useDynamicWindow
_TEXT	SEGMENT
_j$ = -20						; size = 4
_i$ = -8						; size = 4
_scsu$ = 8						; size = 4
_window$ = 12						; size = 1
_useDynamicWindow PROC					; COMDAT
; Line 922
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 931
	mov	eax, DWORD PTR _scsu$[ebp]
	movsx	ecx, BYTE PTR [eax+75]
	mov	DWORD PTR _i$[ebp], ecx
$LN8@useDynamic:
; Line 933
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	jns	SHORT $LN7@useDynamic
; Line 934
	mov	DWORD PTR _i$[ebp], 7
$LN7@useDynamic:
; Line 936
	mov	eax, DWORD PTR _scsu$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	movsx	ecx, BYTE PTR [eax+76]
	movsx	edx, BYTE PTR _window$[ebp]
	cmp	ecx, edx
	jne	SHORT $LN8@useDynamic
; Line 939
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
; Line 940
	cmp	DWORD PTR _j$[ebp], 8
	jne	SHORT $LN3@useDynamic
; Line 941
	mov	DWORD PTR _j$[ebp], 0
$LN3@useDynamic:
; Line 943
	mov	eax, DWORD PTR _scsu$[ebp]
	movsx	ecx, BYTE PTR [eax+75]
	cmp	DWORD PTR _j$[ebp], ecx
	je	SHORT $LN2@useDynamic
; Line 944
	mov	eax, DWORD PTR _scsu$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _scsu$[ebp]
	add	ecx, DWORD PTR _j$[ebp]
	mov	dl, BYTE PTR [ecx+76]
	mov	BYTE PTR [eax+76], dl
; Line 945
	mov	eax, DWORD PTR _j$[ebp]
	mov	DWORD PTR _i$[ebp], eax
; Line 946
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
	cmp	DWORD PTR _j$[ebp], 8
	jne	SHORT $LN1@useDynamic
	mov	DWORD PTR _j$[ebp], 0
$LN1@useDynamic:
; Line 947
	jmp	SHORT $LN3@useDynamic
$LN2@useDynamic:
; Line 950
	mov	eax, DWORD PTR _scsu$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	mov	cl, BYTE PTR _window$[ebp]
	mov	BYTE PTR [eax+76], cl
; Line 951
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_useDynamicWindow ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _getDynamicOffset
_TEXT	SEGMENT
_i$ = -8						; size = 4
_c$ = 8							; size = 4
_pOffset$ = 12						; size = 4
_getDynamicOffset PROC					; COMDAT
; Line 962
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 965
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN11@getDynamic
$LN10@getDynamic:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN11@getDynamic:
	cmp	DWORD PTR _i$[ebp], 7
	jge	SHORT $LN9@getDynamic
; Line 966
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _c$[ebp]
	sub	ecx, DWORD PTR _fixedOffsets[eax*4]
	cmp	ecx, 127				; 0000007fH
	ja	SHORT $LN8@getDynamic
; Line 967
	mov	eax, DWORD PTR _pOffset$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _fixedOffsets[ecx*4]
	mov	DWORD PTR [eax], edx
; Line 968
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 249				; 000000f9H
	jmp	$LN12@getDynamic
$LN8@getDynamic:
; Line 970
	jmp	SHORT $LN10@getDynamic
$LN9@getDynamic:
; Line 972
	cmp	DWORD PTR _c$[ebp], 128			; 00000080H
	jae	SHORT $LN7@getDynamic
; Line 974
	or	eax, -1
	jmp	SHORT $LN12@getDynamic
; Line 975
	jmp	SHORT $LN12@getDynamic
$LN7@getDynamic:
; Line 978
	cmp	DWORD PTR _c$[ebp], 13312		; 00003400H
	jb	SHORT $LN4@getDynamic
	mov	eax, DWORD PTR _c$[ebp]
	sub	eax, 65536				; 00010000H
	cmp	eax, 16384				; 00004000H
	jb	SHORT $LN4@getDynamic
	mov	eax, DWORD PTR _c$[ebp]
	sub	eax, 118784				; 0001d000H
	cmp	eax, 12287				; 00002fffH
	ja	SHORT $LN5@getDynamic
$LN4@getDynamic:
; Line 980
	mov	eax, DWORD PTR _c$[ebp]
	and	eax, 2147483520				; 7fffff80H
	mov	ecx, DWORD PTR _pOffset$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 981
	mov	eax, DWORD PTR _c$[ebp]
	shr	eax, 7
	jmp	SHORT $LN12@getDynamic
	jmp	SHORT $LN12@getDynamic
$LN5@getDynamic:
; Line 982
	cmp	DWORD PTR _c$[ebp], 57344		; 0000e000H
	jb	SHORT $LN2@getDynamic
	cmp	DWORD PTR _c$[ebp], 65279		; 0000feffH
	je	SHORT $LN2@getDynamic
	cmp	DWORD PTR _c$[ebp], 65520		; 0000fff0H
	jae	SHORT $LN2@getDynamic
; Line 984
	mov	eax, DWORD PTR _c$[ebp]
	and	eax, 2147483520				; 7fffff80H
	mov	ecx, DWORD PTR _pOffset$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 985
	mov	eax, DWORD PTR _c$[ebp]
	sub	eax, 44032				; 0000ac00H
	shr	eax, 7
	jmp	SHORT $LN12@getDynamic
; Line 986
	jmp	SHORT $LN12@getDynamic
$LN2@getDynamic:
; Line 987
	or	eax, -1
$LN12@getDynamic:
; Line 989
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_getDynamicOffset ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __SCSUFromUnicode
_TEXT	SEGMENT
tv456 = -412						; size = 4
tv441 = -412						; size = 4
tv425 = -412						; size = 4
_p$9440 = -212						; size = 4
_window$ = -197						; size = 1
_code$ = -188						; size = 4
_trail$ = -176						; size = 2
_lead$ = -164						; size = 2
_offset$ = -152						; size = 4
_length$ = -140						; size = 4
_delta$ = -128						; size = 4
_c$ = -116						; size = 4
_currentOffset$ = -104					; size = 4
_dynamicWindow$ = -89					; size = 1
_isSingleByteMode$ = -77				; size = 1
_targetCapacity$ = -68					; size = 4
_target$ = -56						; size = 4
_sourceLimit$ = -44					; size = 4
_source$ = -32						; size = 4
_scsu$ = -20						; size = 4
_cnv$ = -8						; size = 4
_pArgs$ = 8						; size = 4
_pErrorCode$ = 12					; size = 4
__SCSUFromUnicode PROC					; COMDAT
; Line 1503
	push	ebp
	mov	ebp, esp
	sub	esp, 412				; 0000019cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-412]
	mov	ecx, 103				; 00000067H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1525
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _cnv$[ebp], ecx
; Line 1526
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _scsu$[ebp], ecx
; Line 1529
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _source$[ebp], ecx
; Line 1530
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _sourceLimit$[ebp], ecx
; Line 1531
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _target$[ebp], ecx
; Line 1532
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR _pArgs$[ebp]
	mov	edx, DWORD PTR [eax+20]
	sub	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _targetCapacity$[ebp], edx
; Line 1535
	mov	eax, DWORD PTR _scsu$[ebp]
	mov	cl, BYTE PTR [eax+72]
	mov	BYTE PTR _isSingleByteMode$[ebp], cl
; Line 1536
	mov	eax, DWORD PTR _scsu$[ebp]
	mov	cl, BYTE PTR [eax+73]
	mov	BYTE PTR _dynamicWindow$[ebp], cl
; Line 1537
	movzx	eax, BYTE PTR _dynamicWindow$[ebp]
	mov	ecx, DWORD PTR _scsu$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+32]
	mov	DWORD PTR _currentOffset$[ebp], edx
; Line 1539
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	DWORD PTR _c$[ebp], ecx
$loop$9300:
; Line 1543
	movsx	eax, BYTE PTR _isSingleByteMode$[ebp]
	test	eax, eax
	je	$LN98@SCSUFromUn@2
; Line 1544
	cmp	DWORD PTR _c$[ebp], 0
	je	SHORT $LN96@SCSUFromUn@2
	cmp	DWORD PTR _targetCapacity$[ebp], 0
	jle	SHORT $LN96@SCSUFromUn@2
; Line 1545
	jmp	$getTrailSingle$9303
$LN96@SCSUFromUn@2:
; Line 1550
	mov	eax, DWORD PTR _source$[ebp]
	cmp	eax, DWORD PTR _sourceLimit$[ebp]
	jae	$LN95@SCSUFromUn@2
; Line 1551
	cmp	DWORD PTR _targetCapacity$[ebp], 0
	jg	SHORT $LN94@SCSUFromUn@2
; Line 1553
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
; Line 1554
	jmp	$LN95@SCSUFromUn@2
$LN94@SCSUFromUn@2:
; Line 1556
	mov	eax, DWORD PTR _source$[ebp]
	movzx	ecx, WORD PTR [eax]
	mov	DWORD PTR _c$[ebp], ecx
	mov	edx, DWORD PTR _source$[ebp]
	add	edx, 2
	mov	DWORD PTR _source$[ebp], edx
; Line 1558
	mov	eax, DWORD PTR _c$[ebp]
	sub	eax, 32					; 00000020H
	cmp	eax, 95					; 0000005fH
	ja	SHORT $LN93@SCSUFromUn@2
; Line 1560
	mov	eax, DWORD PTR _target$[ebp]
	mov	cl, BYTE PTR _c$[ebp]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 1
	mov	DWORD PTR _target$[ebp], edx
; Line 1561
	mov	eax, DWORD PTR _targetCapacity$[ebp]
	sub	eax, 1
	mov	DWORD PTR _targetCapacity$[ebp], eax
	jmp	$LN92@SCSUFromUn@2
$LN93@SCSUFromUn@2:
; Line 1562
	cmp	DWORD PTR _c$[ebp], 32			; 00000020H
	jae	SHORT $LN91@SCSUFromUn@2
; Line 1563
	mov	eax, 1
	mov	ecx, DWORD PTR _c$[ebp]
	shl	eax, cl
	and	eax, 9729				; 00002601H
	je	SHORT $LN90@SCSUFromUn@2
; Line 1565
	mov	eax, DWORD PTR _target$[ebp]
	mov	cl, BYTE PTR _c$[ebp]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 1
	mov	DWORD PTR _target$[ebp], edx
; Line 1566
	mov	eax, DWORD PTR _targetCapacity$[ebp]
	sub	eax, 1
	mov	DWORD PTR _targetCapacity$[ebp], eax
; Line 1567
	jmp	SHORT $LN89@SCSUFromUn@2
$LN90@SCSUFromUn@2:
; Line 1569
	mov	eax, DWORD PTR _c$[ebp]
	or	eax, 256				; 00000100H
	mov	DWORD PTR _c$[ebp], eax
; Line 1570
	mov	DWORD PTR _length$[ebp], 2
; Line 1571
	jmp	$outputBytes$9315
$LN89@SCSUFromUn@2:
; Line 1572
	jmp	$LN92@SCSUFromUn@2
$LN91@SCSUFromUn@2:
; Line 1573
	mov	eax, DWORD PTR _c$[ebp]
	sub	eax, DWORD PTR _currentOffset$[ebp]
	mov	DWORD PTR _delta$[ebp], eax
	cmp	DWORD PTR _delta$[ebp], 127		; 0000007fH
	ja	SHORT $LN87@SCSUFromUn@2
; Line 1575
	mov	eax, DWORD PTR _delta$[ebp]
	or	eax, 128				; 00000080H
	mov	ecx, DWORD PTR _target$[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 1
	mov	DWORD PTR _target$[ebp], edx
; Line 1576
	mov	eax, DWORD PTR _targetCapacity$[ebp]
	sub	eax, 1
	mov	DWORD PTR _targetCapacity$[ebp], eax
	jmp	$LN92@SCSUFromUn@2
$LN87@SCSUFromUn@2:
; Line 1577
	mov	eax, DWORD PTR _c$[ebp]
	and	eax, -2048				; fffff800H
	cmp	eax, 55296				; 0000d800H
	jne	$LN85@SCSUFromUn@2
; Line 1578
	mov	eax, DWORD PTR _c$[ebp]
	and	eax, 1024				; 00000400H
	jne	SHORT $LN84@SCSUFromUn@2
$getTrailSingle$9303:
; Line 1580
	mov	ax, WORD PTR _c$[ebp]
	mov	WORD PTR _lead$[ebp], ax
; Line 1581
	mov	eax, DWORD PTR _source$[ebp]
	cmp	eax, DWORD PTR _sourceLimit$[ebp]
	jae	SHORT $LN83@SCSUFromUn@2
; Line 1583
	mov	eax, DWORD PTR _source$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR _trail$[ebp], cx
; Line 1584
	movzx	eax, WORD PTR _trail$[ebp]
	and	eax, -1024				; fffffc00H
	cmp	eax, 56320				; 0000dc00H
	jne	SHORT $LN82@SCSUFromUn@2
; Line 1585
	mov	eax, DWORD PTR _source$[ebp]
	add	eax, 2
	mov	DWORD PTR _source$[ebp], eax
; Line 1586
	mov	eax, DWORD PTR _c$[ebp]
	shl	eax, 10					; 0000000aH
	movzx	ecx, WORD PTR _trail$[ebp]
	lea	edx, DWORD PTR [eax+ecx-56613888]
	mov	DWORD PTR _c$[ebp], edx
; Line 1589
	jmp	SHORT $LN81@SCSUFromUn@2
$LN82@SCSUFromUn@2:
; Line 1592
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 12			; 0000000cH
; Line 1593
	jmp	$endloop$9328
$LN81@SCSUFromUn@2:
; Line 1595
	jmp	SHORT $LN80@SCSUFromUn@2
$LN83@SCSUFromUn@2:
; Line 1597
	jmp	$LN95@SCSUFromUn@2
$LN80@SCSUFromUn@2:
; Line 1599
	jmp	SHORT $LN79@SCSUFromUn@2
$LN84@SCSUFromUn@2:
; Line 1602
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 12			; 0000000cH
; Line 1603
	jmp	$endloop$9328
$LN79@SCSUFromUn@2:
; Line 1607
	mov	eax, DWORD PTR _c$[ebp]
	sub	eax, DWORD PTR _currentOffset$[ebp]
	mov	DWORD PTR _delta$[ebp], eax
	cmp	DWORD PTR _delta$[ebp], 127		; 0000007fH
	ja	SHORT $LN78@SCSUFromUn@2
; Line 1609
	mov	eax, DWORD PTR _delta$[ebp]
	or	eax, 128				; 00000080H
	mov	ecx, DWORD PTR _target$[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 1
	mov	DWORD PTR _target$[ebp], edx
; Line 1610
	mov	eax, DWORD PTR _targetCapacity$[ebp]
	sub	eax, 1
	mov	DWORD PTR _targetCapacity$[ebp], eax
	jmp	$LN77@SCSUFromUn@2
$LN78@SCSUFromUn@2:
; Line 1611
	mov	eax, DWORD PTR _c$[ebp]
	push	eax
	mov	ecx, DWORD PTR _scsu$[ebp]
	add	ecx, 32					; 00000020H
	push	ecx
	call	_getWindow
	add	esp, 8
	mov	BYTE PTR _window$[ebp], al
	movsx	edx, BYTE PTR _window$[ebp]
	test	edx, edx
	jl	SHORT $LN76@SCSUFromUn@2
; Line 1613
	mov	al, BYTE PTR _window$[ebp]
	mov	BYTE PTR _dynamicWindow$[ebp], al
; Line 1614
	movzx	eax, BYTE PTR _dynamicWindow$[ebp]
	mov	ecx, DWORD PTR _scsu$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+32]
	mov	DWORD PTR _currentOffset$[ebp], edx
; Line 1615
	movzx	eax, BYTE PTR _dynamicWindow$[ebp]
	push	eax
	mov	ecx, DWORD PTR _scsu$[ebp]
	push	ecx
	call	_useDynamicWindow
	add	esp, 8
; Line 1616
	movzx	eax, BYTE PTR _dynamicWindow$[ebp]
	add	eax, 16					; 00000010H
	shl	eax, 8
	mov	ecx, DWORD PTR _c$[ebp]
	sub	ecx, DWORD PTR _currentOffset$[ebp]
	or	eax, ecx
	or	eax, 128				; 00000080H
	mov	DWORD PTR _c$[ebp], eax
; Line 1617
	mov	DWORD PTR _length$[ebp], 2
; Line 1618
	jmp	$outputBytes$9315
	jmp	$LN77@SCSUFromUn@2
$LN76@SCSUFromUn@2:
; Line 1619
	lea	eax, DWORD PTR _offset$[ebp]
	push	eax
	mov	ecx, DWORD PTR _c$[ebp]
	push	ecx
	call	_getDynamicOffset
	add	esp, 8
	mov	DWORD PTR _code$[ebp], eax
	cmp	DWORD PTR _code$[ebp], 0
	jl	$LN74@SCSUFromUn@2
; Line 1622
	mov	eax, DWORD PTR _code$[ebp]
	sub	eax, 512				; 00000200H
	mov	DWORD PTR _code$[ebp], eax
; Line 1623
	mov	eax, DWORD PTR _scsu$[ebp]
	push	eax
	call	_getNextDynamicWindow
	add	esp, 4
	mov	BYTE PTR _dynamicWindow$[ebp], al
; Line 1624
	movzx	eax, BYTE PTR _dynamicWindow$[ebp]
	mov	ecx, DWORD PTR _scsu$[ebp]
	mov	edx, DWORD PTR _offset$[ebp]
	mov	DWORD PTR [ecx+eax*4+32], edx
	mov	eax, DWORD PTR _offset$[ebp]
	mov	DWORD PTR _currentOffset$[ebp], eax
; Line 1625
	movzx	eax, BYTE PTR _dynamicWindow$[ebp]
	push	eax
	mov	ecx, DWORD PTR _scsu$[ebp]
	push	ecx
	call	_useDynamicWindow
	add	esp, 8
; Line 1626
	movzx	eax, BYTE PTR _dynamicWindow$[ebp]
	shl	eax, 21					; 00000015H
	or	eax, 184549376				; 0b000000H
	mov	ecx, DWORD PTR _code$[ebp]
	shl	ecx, 8
	or	eax, ecx
	mov	edx, DWORD PTR _c$[ebp]
	sub	edx, DWORD PTR _currentOffset$[ebp]
	or	eax, edx
	or	eax, 128				; 00000080H
	mov	DWORD PTR _c$[ebp], eax
; Line 1627
	mov	DWORD PTR _length$[ebp], 4
; Line 1628
	jmp	$outputBytes$9315
; Line 1629
	jmp	SHORT $LN77@SCSUFromUn@2
$LN74@SCSUFromUn@2:
; Line 1631
	mov	BYTE PTR _isSingleByteMode$[ebp], 0
; Line 1632
	mov	eax, DWORD PTR _target$[ebp]
	mov	BYTE PTR [eax], 15			; 0000000fH
	mov	ecx, DWORD PTR _target$[ebp]
	add	ecx, 1
	mov	DWORD PTR _target$[ebp], ecx
; Line 1633
	mov	eax, DWORD PTR _targetCapacity$[ebp]
	sub	eax, 1
	mov	DWORD PTR _targetCapacity$[ebp], eax
; Line 1634
	movzx	eax, WORD PTR _lead$[ebp]
	shl	eax, 16					; 00000010H
	movzx	ecx, WORD PTR _trail$[ebp]
	or	eax, ecx
	mov	DWORD PTR _c$[ebp], eax
; Line 1635
	mov	DWORD PTR _length$[ebp], 4
; Line 1636
	jmp	$outputBytes$9315
$LN77@SCSUFromUn@2:
; Line 1637
	jmp	$LN92@SCSUFromUn@2
$LN85@SCSUFromUn@2:
; Line 1638
	cmp	DWORD PTR _c$[ebp], 160			; 000000a0H
	jae	SHORT $LN71@SCSUFromUn@2
; Line 1640
	mov	eax, DWORD PTR _c$[ebp]
	and	eax, 127				; 0000007fH
	or	eax, 512				; 00000200H
	mov	DWORD PTR _c$[ebp], eax
; Line 1641
	mov	DWORD PTR _length$[ebp], 2
; Line 1642
	jmp	$outputBytes$9315
	jmp	$LN92@SCSUFromUn@2
$LN71@SCSUFromUn@2:
; Line 1643
	cmp	DWORD PTR _c$[ebp], 65279		; 0000feffH
	je	SHORT $LN68@SCSUFromUn@2
	cmp	DWORD PTR _c$[ebp], 65520		; 0000fff0H
	jb	SHORT $LN69@SCSUFromUn@2
$LN68@SCSUFromUn@2:
; Line 1645
	mov	eax, DWORD PTR _c$[ebp]
	or	eax, 917504				; 000e0000H
	mov	DWORD PTR _c$[ebp], eax
; Line 1646
	mov	DWORD PTR _length$[ebp], 3
; Line 1647
	jmp	$outputBytes$9315
; Line 1648
	jmp	$LN92@SCSUFromUn@2
$LN69@SCSUFromUn@2:
; Line 1650
	mov	eax, DWORD PTR _c$[ebp]
	push	eax
	mov	ecx, DWORD PTR _scsu$[ebp]
	add	ecx, 32					; 00000020H
	push	ecx
	call	_getWindow
	add	esp, 8
	mov	BYTE PTR _window$[ebp], al
	movsx	edx, BYTE PTR _window$[ebp]
	test	edx, edx
	jl	$LN66@SCSUFromUn@2
; Line 1652
	mov	eax, DWORD PTR _source$[ebp]
	cmp	eax, DWORD PTR _sourceLimit$[ebp]
	jae	SHORT $LN64@SCSUFromUn@2
	mov	eax, DWORD PTR _source$[ebp]
	movzx	ecx, WORD PTR [eax]
	push	ecx
	movsx	edx, BYTE PTR _window$[ebp]
	mov	eax, DWORD PTR _scsu$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4+32]
	push	ecx
	call	_isInOffsetWindowOrDirect
	add	esp, 8
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN65@SCSUFromUn@2
$LN64@SCSUFromUn@2:
; Line 1654
	mov	al, BYTE PTR _window$[ebp]
	mov	BYTE PTR _dynamicWindow$[ebp], al
; Line 1655
	movzx	eax, BYTE PTR _dynamicWindow$[ebp]
	mov	ecx, DWORD PTR _scsu$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+32]
	mov	DWORD PTR _currentOffset$[ebp], edx
; Line 1656
	movzx	eax, BYTE PTR _dynamicWindow$[ebp]
	push	eax
	mov	ecx, DWORD PTR _scsu$[ebp]
	push	ecx
	call	_useDynamicWindow
	add	esp, 8
; Line 1657
	movzx	eax, BYTE PTR _dynamicWindow$[ebp]
	add	eax, 16					; 00000010H
	shl	eax, 8
	mov	ecx, DWORD PTR _c$[ebp]
	sub	ecx, DWORD PTR _currentOffset$[ebp]
	or	eax, ecx
	or	eax, 128				; 00000080H
	mov	DWORD PTR _c$[ebp], eax
; Line 1658
	mov	DWORD PTR _length$[ebp], 2
; Line 1659
	jmp	$outputBytes$9315
; Line 1660
	jmp	SHORT $LN63@SCSUFromUn@2
$LN65@SCSUFromUn@2:
; Line 1662
	movsx	eax, BYTE PTR _window$[ebp]
	add	eax, 1
	shl	eax, 8
	movsx	ecx, BYTE PTR _window$[ebp]
	mov	edx, DWORD PTR _scsu$[ebp]
	mov	esi, DWORD PTR _c$[ebp]
	sub	esi, DWORD PTR [edx+ecx*4+32]
	or	eax, esi
	or	eax, 128				; 00000080H
	mov	DWORD PTR _c$[ebp], eax
; Line 1663
	mov	DWORD PTR _length$[ebp], 2
; Line 1664
	jmp	$outputBytes$9315
$LN63@SCSUFromUn@2:
; Line 1665
	jmp	$LN92@SCSUFromUn@2
$LN66@SCSUFromUn@2:
; Line 1666
	mov	eax, DWORD PTR _c$[ebp]
	push	eax
	push	OFFSET _staticOffsets
	call	_getWindow
	add	esp, 8
	mov	BYTE PTR _window$[ebp], al
	movsx	ecx, BYTE PTR _window$[ebp]
	test	ecx, ecx
	jl	SHORT $LN61@SCSUFromUn@2
; Line 1668
	movsx	eax, BYTE PTR _window$[ebp]
	add	eax, 1
	shl	eax, 8
	movsx	ecx, BYTE PTR _window$[ebp]
	mov	edx, DWORD PTR _c$[ebp]
	sub	edx, DWORD PTR _staticOffsets[ecx*4]
	or	eax, edx
	mov	DWORD PTR _c$[ebp], eax
; Line 1669
	mov	DWORD PTR _length$[ebp], 2
; Line 1670
	jmp	$outputBytes$9315
	jmp	$LN92@SCSUFromUn@2
$LN61@SCSUFromUn@2:
; Line 1671
	lea	eax, DWORD PTR _offset$[ebp]
	push	eax
	mov	ecx, DWORD PTR _c$[ebp]
	push	ecx
	call	_getDynamicOffset
	add	esp, 8
	mov	DWORD PTR _code$[ebp], eax
	cmp	DWORD PTR _code$[ebp], 0
	jl	SHORT $LN59@SCSUFromUn@2
; Line 1673
	mov	eax, DWORD PTR _scsu$[ebp]
	push	eax
	call	_getNextDynamicWindow
	add	esp, 4
	mov	BYTE PTR _dynamicWindow$[ebp], al
; Line 1674
	movzx	eax, BYTE PTR _dynamicWindow$[ebp]
	mov	ecx, DWORD PTR _scsu$[ebp]
	mov	edx, DWORD PTR _offset$[ebp]
	mov	DWORD PTR [ecx+eax*4+32], edx
	mov	eax, DWORD PTR _offset$[ebp]
	mov	DWORD PTR _currentOffset$[ebp], eax
; Line 1675
	movzx	eax, BYTE PTR _dynamicWindow$[ebp]
	push	eax
	mov	ecx, DWORD PTR _scsu$[ebp]
	push	ecx
	call	_useDynamicWindow
	add	esp, 8
; Line 1676
	movzx	eax, BYTE PTR _dynamicWindow$[ebp]
	add	eax, 24					; 00000018H
	shl	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _code$[ebp]
	shl	ecx, 8
	or	eax, ecx
	mov	edx, DWORD PTR _c$[ebp]
	sub	edx, DWORD PTR _currentOffset$[ebp]
	or	eax, edx
	or	eax, 128				; 00000080H
	mov	DWORD PTR _c$[ebp], eax
; Line 1677
	mov	DWORD PTR _length$[ebp], 3
; Line 1678
	jmp	$outputBytes$9315
; Line 1679
	jmp	SHORT $LN92@SCSUFromUn@2
$LN59@SCSUFromUn@2:
; Line 1681
	mov	eax, DWORD PTR _c$[ebp]
	sub	eax, 13312				; 00003400H
	cmp	eax, 41984				; 0000a400H
	jae	SHORT $LN57@SCSUFromUn@2
	mov	eax, DWORD PTR _source$[ebp]
	cmp	eax, DWORD PTR _sourceLimit$[ebp]
	jae	SHORT $LN56@SCSUFromUn@2
	mov	eax, DWORD PTR _source$[ebp]
	movzx	ecx, WORD PTR [eax]
	sub	ecx, 13312				; 00003400H
	cmp	ecx, 41984				; 0000a400H
	jae	SHORT $LN57@SCSUFromUn@2
$LN56@SCSUFromUn@2:
; Line 1687
	mov	BYTE PTR _isSingleByteMode$[ebp], 0
; Line 1688
	mov	eax, DWORD PTR _c$[ebp]
	or	eax, 983040				; 000f0000H
	mov	DWORD PTR _c$[ebp], eax
; Line 1689
	mov	DWORD PTR _length$[ebp], 3
; Line 1690
	jmp	$outputBytes$9315
; Line 1691
	jmp	SHORT $LN92@SCSUFromUn@2
$LN57@SCSUFromUn@2:
; Line 1693
	mov	eax, DWORD PTR _c$[ebp]
	or	eax, 917504				; 000e0000H
	mov	DWORD PTR _c$[ebp], eax
; Line 1694
	mov	DWORD PTR _length$[ebp], 3
; Line 1695
	jmp	$outputBytes$9315
$LN92@SCSUFromUn@2:
; Line 1700
	mov	DWORD PTR _c$[ebp], 0
; Line 1701
	jmp	$LN96@SCSUFromUn@2
$LN95@SCSUFromUn@2:
; Line 1702
	jmp	$endloop$9328
$LN98@SCSUFromUn@2:
; Line 1703
	cmp	DWORD PTR _c$[ebp], 0
	je	SHORT $LN52@SCSUFromUn@2
	cmp	DWORD PTR _targetCapacity$[ebp], 0
	jle	SHORT $LN52@SCSUFromUn@2
; Line 1704
	jmp	$getTrailUnicode$9371
$LN52@SCSUFromUn@2:
; Line 1709
	mov	eax, DWORD PTR _source$[ebp]
	cmp	eax, DWORD PTR _sourceLimit$[ebp]
	jae	$endloop$9328
; Line 1710
	cmp	DWORD PTR _targetCapacity$[ebp], 0
	jg	SHORT $LN50@SCSUFromUn@2
; Line 1712
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
; Line 1713
	jmp	$endloop$9328
$LN50@SCSUFromUn@2:
; Line 1715
	mov	eax, DWORD PTR _source$[ebp]
	movzx	ecx, WORD PTR [eax]
	mov	DWORD PTR _c$[ebp], ecx
	mov	edx, DWORD PTR _source$[ebp]
	add	edx, 2
	mov	DWORD PTR _source$[ebp], edx
; Line 1717
	mov	eax, DWORD PTR _c$[ebp]
	sub	eax, 13312				; 00003400H
	cmp	eax, 41984				; 0000a400H
	jae	SHORT $LN49@SCSUFromUn@2
; Line 1719
	cmp	DWORD PTR _targetCapacity$[ebp], 2
	jl	SHORT $LN48@SCSUFromUn@2
; Line 1720
	mov	eax, DWORD PTR _c$[ebp]
	shr	eax, 8
	mov	ecx, DWORD PTR _target$[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 1
	mov	DWORD PTR _target$[ebp], edx
; Line 1721
	mov	eax, DWORD PTR _target$[ebp]
	mov	cl, BYTE PTR _c$[ebp]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 1
	mov	DWORD PTR _target$[ebp], edx
; Line 1722
	mov	eax, DWORD PTR _targetCapacity$[ebp]
	sub	eax, 2
	mov	DWORD PTR _targetCapacity$[ebp], eax
; Line 1723
	jmp	SHORT $LN47@SCSUFromUn@2
$LN48@SCSUFromUn@2:
; Line 1724
	mov	DWORD PTR _length$[ebp], 2
; Line 1725
	jmp	$outputBytes$9315
$LN47@SCSUFromUn@2:
; Line 1726
	jmp	$LN46@SCSUFromUn@2
$LN49@SCSUFromUn@2:
; Line 1727
	mov	eax, DWORD PTR _c$[ebp]
	sub	eax, 13312				; 00003400H
	cmp	eax, 48896				; 0000bf00H
	jb	$LN45@SCSUFromUn@2
; Line 1729
	mov	eax, DWORD PTR _source$[ebp]
	cmp	eax, DWORD PTR _sourceLimit$[ebp]
	jae	SHORT $LN43@SCSUFromUn@2
	mov	eax, DWORD PTR _source$[ebp]
	movzx	ecx, WORD PTR [eax]
	sub	ecx, 13312				; 00003400H
	cmp	ecx, 41984				; 0000a400H
	jb	$LN44@SCSUFromUn@2
$LN43@SCSUFromUn@2:
; Line 1730
	mov	eax, DWORD PTR _c$[ebp]
	sub	eax, 48					; 00000030H
	cmp	eax, 10					; 0000000aH
	jb	SHORT $LN41@SCSUFromUn@2
	mov	eax, DWORD PTR _c$[ebp]
	sub	eax, 97					; 00000061H
	cmp	eax, 26					; 0000001aH
	jb	SHORT $LN41@SCSUFromUn@2
	mov	eax, DWORD PTR _c$[ebp]
	sub	eax, 65					; 00000041H
	cmp	eax, 26					; 0000001aH
	jae	SHORT $LN42@SCSUFromUn@2
$LN41@SCSUFromUn@2:
; Line 1732
	mov	BYTE PTR _isSingleByteMode$[ebp], 1
; Line 1733
	movzx	eax, BYTE PTR _dynamicWindow$[ebp]
	add	eax, 224				; 000000e0H
	shl	eax, 8
	or	eax, DWORD PTR _c$[ebp]
	or	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR _c$[ebp], eax
; Line 1734
	mov	DWORD PTR _length$[ebp], 2
; Line 1735
	jmp	$outputBytes$9315
	jmp	$LN44@SCSUFromUn@2
$LN42@SCSUFromUn@2:
; Line 1736
	mov	eax, DWORD PTR _c$[ebp]
	push	eax
	mov	ecx, DWORD PTR _scsu$[ebp]
	add	ecx, 32					; 00000020H
	push	ecx
	call	_getWindow
	add	esp, 8
	mov	BYTE PTR _window$[ebp], al
	movsx	edx, BYTE PTR _window$[ebp]
	test	edx, edx
	jl	SHORT $LN39@SCSUFromUn@2
; Line 1738
	mov	BYTE PTR _isSingleByteMode$[ebp], 1
; Line 1739
	mov	al, BYTE PTR _window$[ebp]
	mov	BYTE PTR _dynamicWindow$[ebp], al
; Line 1740
	movzx	eax, BYTE PTR _dynamicWindow$[ebp]
	mov	ecx, DWORD PTR _scsu$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+32]
	mov	DWORD PTR _currentOffset$[ebp], edx
; Line 1741
	movzx	eax, BYTE PTR _dynamicWindow$[ebp]
	push	eax
	mov	ecx, DWORD PTR _scsu$[ebp]
	push	ecx
	call	_useDynamicWindow
	add	esp, 8
; Line 1742
	movzx	eax, BYTE PTR _dynamicWindow$[ebp]
	add	eax, 224				; 000000e0H
	shl	eax, 8
	mov	ecx, DWORD PTR _c$[ebp]
	sub	ecx, DWORD PTR _currentOffset$[ebp]
	or	eax, ecx
	or	eax, 128				; 00000080H
	mov	DWORD PTR _c$[ebp], eax
; Line 1743
	mov	DWORD PTR _length$[ebp], 2
; Line 1744
	jmp	$outputBytes$9315
	jmp	$LN44@SCSUFromUn@2
$LN39@SCSUFromUn@2:
; Line 1745
	lea	eax, DWORD PTR _offset$[ebp]
	push	eax
	mov	ecx, DWORD PTR _c$[ebp]
	push	ecx
	call	_getDynamicOffset
	add	esp, 8
	mov	DWORD PTR _code$[ebp], eax
	cmp	DWORD PTR _code$[ebp], 0
	jl	SHORT $LN44@SCSUFromUn@2
; Line 1747
	mov	BYTE PTR _isSingleByteMode$[ebp], 1
; Line 1748
	mov	eax, DWORD PTR _scsu$[ebp]
	push	eax
	call	_getNextDynamicWindow
	add	esp, 4
	mov	BYTE PTR _dynamicWindow$[ebp], al
; Line 1749
	movzx	eax, BYTE PTR _dynamicWindow$[ebp]
	mov	ecx, DWORD PTR _scsu$[ebp]
	mov	edx, DWORD PTR _offset$[ebp]
	mov	DWORD PTR [ecx+eax*4+32], edx
	mov	eax, DWORD PTR _offset$[ebp]
	mov	DWORD PTR _currentOffset$[ebp], eax
; Line 1750
	movzx	eax, BYTE PTR _dynamicWindow$[ebp]
	push	eax
	mov	ecx, DWORD PTR _scsu$[ebp]
	push	ecx
	call	_useDynamicWindow
	add	esp, 8
; Line 1751
	movzx	eax, BYTE PTR _dynamicWindow$[ebp]
	add	eax, 232				; 000000e8H
	shl	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _code$[ebp]
	shl	ecx, 8
	or	eax, ecx
	mov	edx, DWORD PTR _c$[ebp]
	sub	edx, DWORD PTR _currentOffset$[ebp]
	or	eax, edx
	or	eax, 128				; 00000080H
	mov	DWORD PTR _c$[ebp], eax
; Line 1752
	mov	DWORD PTR _length$[ebp], 3
; Line 1753
	jmp	$outputBytes$9315
$LN44@SCSUFromUn@2:
; Line 1758
	mov	DWORD PTR _length$[ebp], 2
; Line 1759
	jmp	$outputBytes$9315
	jmp	$LN46@SCSUFromUn@2
$LN45@SCSUFromUn@2:
; Line 1760
	cmp	DWORD PTR _c$[ebp], 57344		; 0000e000H
	jae	$LN35@SCSUFromUn@2
; Line 1762
	mov	eax, DWORD PTR _c$[ebp]
	and	eax, 1024				; 00000400H
	jne	SHORT $LN34@SCSUFromUn@2
$getTrailUnicode$9371:
; Line 1764
	mov	ax, WORD PTR _c$[ebp]
	mov	WORD PTR _lead$[ebp], ax
; Line 1765
	mov	eax, DWORD PTR _source$[ebp]
	cmp	eax, DWORD PTR _sourceLimit$[ebp]
	jae	SHORT $LN33@SCSUFromUn@2
; Line 1767
	mov	eax, DWORD PTR _source$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR _trail$[ebp], cx
; Line 1768
	movzx	eax, WORD PTR _trail$[ebp]
	and	eax, -1024				; fffffc00H
	cmp	eax, 56320				; 0000dc00H
	jne	SHORT $LN32@SCSUFromUn@2
; Line 1769
	mov	eax, DWORD PTR _source$[ebp]
	add	eax, 2
	mov	DWORD PTR _source$[ebp], eax
; Line 1770
	mov	eax, DWORD PTR _c$[ebp]
	shl	eax, 10					; 0000000aH
	movzx	ecx, WORD PTR _trail$[ebp]
	lea	edx, DWORD PTR [eax+ecx-56613888]
	mov	DWORD PTR _c$[ebp], edx
; Line 1773
	jmp	SHORT $LN31@SCSUFromUn@2
$LN32@SCSUFromUn@2:
; Line 1776
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 12			; 0000000cH
; Line 1777
	jmp	$endloop$9328
$LN31@SCSUFromUn@2:
; Line 1779
	jmp	SHORT $LN30@SCSUFromUn@2
$LN33@SCSUFromUn@2:
; Line 1781
	jmp	$endloop$9328
$LN30@SCSUFromUn@2:
; Line 1783
	jmp	SHORT $LN29@SCSUFromUn@2
$LN34@SCSUFromUn@2:
; Line 1786
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 12			; 0000000cH
; Line 1787
	jmp	$endloop$9328
$LN29@SCSUFromUn@2:
; Line 1793
	mov	eax, DWORD PTR _c$[ebp]
	push	eax
	mov	ecx, DWORD PTR _scsu$[ebp]
	add	ecx, 32					; 00000020H
	push	ecx
	call	_getWindow
	add	esp, 8
	mov	BYTE PTR _window$[ebp], al
	movsx	edx, BYTE PTR _window$[ebp]
	test	edx, edx
	jl	SHORT $LN28@SCSUFromUn@2
	mov	eax, DWORD PTR _source$[ebp]
	cmp	eax, DWORD PTR _sourceLimit$[ebp]
	jae	SHORT $LN27@SCSUFromUn@2
	mov	eax, DWORD PTR _source$[ebp]
	movzx	ecx, WORD PTR [eax]
	sub	ecx, 13312				; 00003400H
	cmp	ecx, 41984				; 0000a400H
	jb	SHORT $LN28@SCSUFromUn@2
$LN27@SCSUFromUn@2:
; Line 1799
	mov	BYTE PTR _isSingleByteMode$[ebp], 1
; Line 1800
	mov	al, BYTE PTR _window$[ebp]
	mov	BYTE PTR _dynamicWindow$[ebp], al
; Line 1801
	movzx	eax, BYTE PTR _dynamicWindow$[ebp]
	mov	ecx, DWORD PTR _scsu$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+32]
	mov	DWORD PTR _currentOffset$[ebp], edx
; Line 1802
	movzx	eax, BYTE PTR _dynamicWindow$[ebp]
	push	eax
	mov	ecx, DWORD PTR _scsu$[ebp]
	push	ecx
	call	_useDynamicWindow
	add	esp, 8
; Line 1803
	movzx	eax, BYTE PTR _dynamicWindow$[ebp]
	add	eax, 224				; 000000e0H
	shl	eax, 8
	mov	ecx, DWORD PTR _c$[ebp]
	sub	ecx, DWORD PTR _currentOffset$[ebp]
	or	eax, ecx
	or	eax, 128				; 00000080H
	mov	DWORD PTR _c$[ebp], eax
; Line 1804
	mov	DWORD PTR _length$[ebp], 2
; Line 1805
	jmp	$outputBytes$9315
; Line 1806
	jmp	$LN26@SCSUFromUn@2
$LN28@SCSUFromUn@2:
; Line 1808
	mov	eax, DWORD PTR _source$[ebp]
	cmp	eax, DWORD PTR _sourceLimit$[ebp]
	jae	$LN25@SCSUFromUn@2
	movzx	eax, WORD PTR _lead$[ebp]
	mov	ecx, DWORD PTR _source$[ebp]
	movzx	edx, WORD PTR [ecx]
	cmp	eax, edx
	jne	$LN25@SCSUFromUn@2
	lea	eax, DWORD PTR _offset$[ebp]
	push	eax
	mov	ecx, DWORD PTR _c$[ebp]
	push	ecx
	call	_getDynamicOffset
	add	esp, 8
	mov	DWORD PTR _code$[ebp], eax
	cmp	DWORD PTR _code$[ebp], 0
	jl	$LN25@SCSUFromUn@2
; Line 1810
	mov	BYTE PTR _isSingleByteMode$[ebp], 1
; Line 1811
	mov	eax, DWORD PTR _code$[ebp]
	sub	eax, 512				; 00000200H
	mov	DWORD PTR _code$[ebp], eax
; Line 1812
	mov	eax, DWORD PTR _scsu$[ebp]
	push	eax
	call	_getNextDynamicWindow
	add	esp, 4
	mov	BYTE PTR _dynamicWindow$[ebp], al
; Line 1813
	movzx	eax, BYTE PTR _dynamicWindow$[ebp]
	mov	ecx, DWORD PTR _scsu$[ebp]
	mov	edx, DWORD PTR _offset$[ebp]
	mov	DWORD PTR [ecx+eax*4+32], edx
	mov	eax, DWORD PTR _offset$[ebp]
	mov	DWORD PTR _currentOffset$[ebp], eax
; Line 1814
	movzx	eax, BYTE PTR _dynamicWindow$[ebp]
	push	eax
	mov	ecx, DWORD PTR _scsu$[ebp]
	push	ecx
	call	_useDynamicWindow
	add	esp, 8
; Line 1815
	movzx	eax, BYTE PTR _dynamicWindow$[ebp]
	shl	eax, 21					; 00000015H
	or	eax, -251658240				; f1000000H
	mov	ecx, DWORD PTR _code$[ebp]
	shl	ecx, 8
	or	eax, ecx
	mov	edx, DWORD PTR _c$[ebp]
	sub	edx, DWORD PTR _currentOffset$[ebp]
	or	eax, edx
	or	eax, 128				; 00000080H
	mov	DWORD PTR _c$[ebp], eax
; Line 1816
	mov	DWORD PTR _length$[ebp], 4
; Line 1817
	jmp	SHORT $outputBytes$9315
; Line 1818
	jmp	SHORT $LN26@SCSUFromUn@2
$LN25@SCSUFromUn@2:
; Line 1820
	movzx	eax, WORD PTR _lead$[ebp]
	shl	eax, 16					; 00000010H
	movzx	ecx, WORD PTR _trail$[ebp]
	or	eax, ecx
	mov	DWORD PTR _c$[ebp], eax
; Line 1821
	mov	DWORD PTR _length$[ebp], 4
; Line 1822
	jmp	SHORT $outputBytes$9315
$LN26@SCSUFromUn@2:
; Line 1824
	jmp	SHORT $LN46@SCSUFromUn@2
$LN35@SCSUFromUn@2:
; Line 1826
	mov	eax, DWORD PTR _c$[ebp]
	or	eax, 15728640				; 00f00000H
	mov	DWORD PTR _c$[ebp], eax
; Line 1827
	mov	DWORD PTR _length$[ebp], 3
; Line 1828
	jmp	SHORT $outputBytes$9315
$LN46@SCSUFromUn@2:
; Line 1832
	mov	DWORD PTR _c$[ebp], 0
; Line 1833
	jmp	$LN52@SCSUFromUn@2
$endloop$9328:
; Line 1838
	mov	eax, DWORD PTR _scsu$[ebp]
	mov	cl, BYTE PTR _isSingleByteMode$[ebp]
	mov	BYTE PTR [eax+72], cl
; Line 1839
	mov	eax, DWORD PTR _scsu$[ebp]
	mov	cl, BYTE PTR _dynamicWindow$[ebp]
	mov	BYTE PTR [eax+73], cl
; Line 1841
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	ecx, DWORD PTR _c$[ebp]
	mov	DWORD PTR [eax+56], ecx
; Line 1844
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR _source$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 1845
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR _target$[ebp]
	mov	DWORD PTR [eax+16], ecx
; Line 1846
	jmp	$LN99@SCSUFromUn@2
$outputBytes$9315:
; Line 1851
	mov	eax, DWORD PTR _length$[ebp]
	cmp	eax, DWORD PTR _targetCapacity$[ebp]
	jg	$LN22@SCSUFromUn@2
; Line 1852
	mov	eax, DWORD PTR _length$[ebp]
	mov	DWORD PTR tv425[ebp], eax
	mov	ecx, DWORD PTR tv425[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv425[ebp], ecx
	cmp	DWORD PTR tv425[ebp], 3
	ja	SHORT $LN20@SCSUFromUn@2
	mov	edx, DWORD PTR tv425[ebp]
	jmp	DWORD PTR $LN104@SCSUFromUn@2[edx*4]
$LN19@SCSUFromUn@2:
; Line 1855
	mov	eax, DWORD PTR _c$[ebp]
	shr	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _target$[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 1
	mov	DWORD PTR _target$[ebp], edx
$LN18@SCSUFromUn@2:
; Line 1857
	mov	eax, DWORD PTR _c$[ebp]
	shr	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _target$[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 1
	mov	DWORD PTR _target$[ebp], edx
$LN17@SCSUFromUn@2:
; Line 1859
	mov	eax, DWORD PTR _c$[ebp]
	shr	eax, 8
	mov	ecx, DWORD PTR _target$[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 1
	mov	DWORD PTR _target$[ebp], edx
$LN16@SCSUFromUn@2:
; Line 1861
	mov	eax, DWORD PTR _target$[ebp]
	mov	cl, BYTE PTR _c$[ebp]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 1
	mov	DWORD PTR _target$[ebp], edx
$LN20@SCSUFromUn@2:
; Line 1866
	mov	eax, DWORD PTR _targetCapacity$[ebp]
	sub	eax, DWORD PTR _length$[ebp]
	mov	DWORD PTR _targetCapacity$[ebp], eax
; Line 1869
	mov	DWORD PTR _c$[ebp], 0
; Line 1870
	jmp	$loop$9300
; Line 1871
	jmp	$LN99@SCSUFromUn@2
$LN22@SCSUFromUn@2:
; Line 1882
	mov	eax, DWORD PTR _length$[ebp]
	sub	eax, DWORD PTR _targetCapacity$[ebp]
	mov	DWORD PTR _length$[ebp], eax
; Line 1883
	mov	eax, DWORD PTR _cnv$[ebp]
	add	eax, 76					; 0000004cH
	mov	DWORD PTR _p$9440[ebp], eax
; Line 1884
	mov	eax, DWORD PTR _length$[ebp]
	mov	DWORD PTR tv441[ebp], eax
	mov	ecx, DWORD PTR tv441[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv441[ebp], ecx
	cmp	DWORD PTR tv441[ebp], 3
	ja	SHORT $LN12@SCSUFromUn@2
	mov	edx, DWORD PTR tv441[ebp]
	jmp	DWORD PTR $LN105@SCSUFromUn@2[edx*4]
$LN11@SCSUFromUn@2:
; Line 1887
	mov	eax, DWORD PTR _c$[ebp]
	shr	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _p$9440[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _p$9440[ebp]
	add	edx, 1
	mov	DWORD PTR _p$9440[ebp], edx
$LN10@SCSUFromUn@2:
; Line 1889
	mov	eax, DWORD PTR _c$[ebp]
	shr	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _p$9440[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _p$9440[ebp]
	add	edx, 1
	mov	DWORD PTR _p$9440[ebp], edx
$LN9@SCSUFromUn@2:
; Line 1891
	mov	eax, DWORD PTR _c$[ebp]
	shr	eax, 8
	mov	ecx, DWORD PTR _p$9440[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _p$9440[ebp]
	add	edx, 1
	mov	DWORD PTR _p$9440[ebp], edx
$LN8@SCSUFromUn@2:
; Line 1893
	mov	eax, DWORD PTR _p$9440[ebp]
	mov	cl, BYTE PTR _c$[ebp]
	mov	BYTE PTR [eax], cl
$LN12@SCSUFromUn@2:
; Line 1898
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	cl, BYTE PTR _length$[ebp]
	mov	BYTE PTR [eax+63], cl
; Line 1901
	mov	ecx, DWORD PTR _length$[ebp]
	shl	ecx, 3
	mov	eax, DWORD PTR _c$[ebp]
	shr	eax, cl
	mov	DWORD PTR _c$[ebp], eax
; Line 1902
	mov	eax, DWORD PTR _targetCapacity$[ebp]
	mov	DWORD PTR tv456[ebp], eax
	cmp	DWORD PTR tv456[ebp], 1
	je	SHORT $LN2@SCSUFromUn@2
	cmp	DWORD PTR tv456[ebp], 2
	je	SHORT $LN3@SCSUFromUn@2
	cmp	DWORD PTR tv456[ebp], 3
	je	SHORT $LN4@SCSUFromUn@2
	jmp	SHORT $LN5@SCSUFromUn@2
$LN4@SCSUFromUn@2:
; Line 1905
	mov	eax, DWORD PTR _c$[ebp]
	shr	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _target$[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 1
	mov	DWORD PTR _target$[ebp], edx
$LN3@SCSUFromUn@2:
; Line 1907
	mov	eax, DWORD PTR _c$[ebp]
	shr	eax, 8
	mov	ecx, DWORD PTR _target$[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 1
	mov	DWORD PTR _target$[ebp], edx
$LN2@SCSUFromUn@2:
; Line 1909
	mov	eax, DWORD PTR _target$[ebp]
	mov	cl, BYTE PTR _c$[ebp]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 1
	mov	DWORD PTR _target$[ebp], edx
$LN5@SCSUFromUn@2:
; Line 1915
	mov	DWORD PTR _targetCapacity$[ebp], 0
; Line 1916
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
; Line 1917
	mov	DWORD PTR _c$[ebp], 0
; Line 1918
	jmp	$endloop$9328
$LN99@SCSUFromUn@2:
; Line 1920
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN103@SCSUFromUn@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 412				; 0000019cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN103@SCSUFromUn@2:
	DD	1
	DD	$LN102@SCSUFromUn@2
$LN102@SCSUFromUn@2:
	DD	-152					; ffffff68H
	DD	4
	DD	$LN101@SCSUFromUn@2
$LN101@SCSUFromUn@2:
	DB	111					; 0000006fH
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	0
	npad	1
$LN104@SCSUFromUn@2:
	DD	$LN16@SCSUFromUn@2
	DD	$LN17@SCSUFromUn@2
	DD	$LN18@SCSUFromUn@2
	DD	$LN19@SCSUFromUn@2
$LN105@SCSUFromUn@2:
	DD	$LN8@SCSUFromUn@2
	DD	$LN9@SCSUFromUn@2
	DD	$LN10@SCSUFromUn@2
	DD	$LN11@SCSUFromUn@2
__SCSUFromUnicode ENDP
_TEXT	ENDS
PUBLIC	??_C@_04GGPJHDNC@SCSU?$AA@			; `string'
PUBLIC	??_C@_0P@DIKJICDI@SCSU?0locale?$DNja?$AA@	; `string'
;	COMDAT ??_C@_04GGPJHDNC@SCSU?$AA@
CONST	SEGMENT
??_C@_04GGPJHDNC@SCSU?$AA@ DB 'SCSU', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@DIKJICDI@SCSU?0locale?$DNja?$AA@
CONST	SEGMENT
??_C@_0P@DIKJICDI@SCSU?0locale?$DNja?$AA@ DB 'SCSU,locale=ja', 00H ; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT __SCSUGetName
_TEXT	SEGMENT
tv67 = -208						; size = 4
_scsu$ = -8						; size = 4
_cnv$ = 8						; size = 4
__SCSUGetName PROC					; COMDAT
; Line 1925
	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1926
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _scsu$[ebp], ecx
; Line 1928
	mov	eax, DWORD PTR _scsu$[ebp]
	mov	cl, BYTE PTR [eax+74]
	mov	BYTE PTR tv67[ebp], cl
	cmp	BYTE PTR tv67[ebp], 1
	je	SHORT $LN2@SCSUGetNam
	jmp	SHORT $LN1@SCSUGetNam
$LN2@SCSUGetNam:
; Line 1930
	mov	eax, OFFSET ??_C@_0P@DIKJICDI@SCSU?0locale?$DNja?$AA@
	jmp	SHORT $LN5@SCSUGetNam
$LN1@SCSUGetNam:
; Line 1932
	mov	eax, OFFSET ??_C@_04GGPJHDNC@SCSU?$AA@
$LN5@SCSUGetNam:
; Line 1934
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
__SCSUGetName ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __SCSUSafeClone
_TEXT	SEGMENT
_bufferSizeNeeded$ = -20				; size = 4
_localClone$ = -8					; size = 4
_cnv$ = 8						; size = 4
_stackBuffer$ = 12					; size = 4
_pBufferSize$ = 16					; size = 4
_status$ = 20						; size = 4
__SCSUSafeClone PROC					; COMDAT
; Line 1948
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1950
	mov	DWORD PTR _bufferSizeNeeded$[ebp], 344	; 00000158H
; Line 1952
	mov	eax, DWORD PTR _status$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN2@SCSUSafeCl
; Line 1953
	xor	eax, eax
	jmp	SHORT $LN3@SCSUSafeCl
$LN2@SCSUSafeCl:
; Line 1956
	mov	eax, DWORD PTR _pBufferSize$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN1@SCSUSafeCl
; Line 1957
	mov	eax, DWORD PTR _pBufferSize$[ebp]
	mov	ecx, DWORD PTR _bufferSizeNeeded$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 1958
	xor	eax, eax
	jmp	SHORT $LN3@SCSUSafeCl
$LN1@SCSUSafeCl:
; Line 1961
	mov	eax, DWORD PTR _stackBuffer$[ebp]
	mov	DWORD PTR _localClone$[ebp], eax
; Line 1964
	push	1
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_uprv_checkValidMemory
	add	esp, 8
	push	84					; 00000054H
	mov	edx, DWORD PTR _cnv$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _localClone$[ebp]
	add	ecx, 260				; 00000104H
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 1965
	mov	eax, DWORD PTR _localClone$[ebp]
	add	eax, 260				; 00000104H
	mov	ecx, DWORD PTR _localClone$[ebp]
	mov	DWORD PTR [ecx+8], eax
; Line 1966
	mov	eax, DWORD PTR _localClone$[ebp]
	mov	BYTE PTR [eax+34], 1
; Line 1968
	mov	eax, DWORD PTR _localClone$[ebp]
$LN3@SCSUSafeCl:
; Line 1969
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__SCSUSafeClone ENDP
_TEXT	ENDS
END
