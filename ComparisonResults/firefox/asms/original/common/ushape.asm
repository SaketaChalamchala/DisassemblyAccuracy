; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\mozilla\intl\icu\source\common\ushape.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
_tailFamilyIsolatedFinal DB 01H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	ORG $+2
_tashkeelMedial DB 00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
_yehHamzaToYeh DW 0feefH
	DW	0fef0H
_IrrelevantPos DB 00H
	DB	02H
	DB	04H
	DB	06H
	DB	08H
	DB	0aH
	DB	0cH
	DB	0eH
_convertLamAlef DW 0622H
	DW	0622H
	DW	0623H
	DW	0623H
	DW	0625H
	DW	0625H
	DW	0627H
	DW	0627H
	ORG $+4
_araLink DW	01121H
	DW	01321H
	DW	01501H
	DW	01721H
	DW	01903H
	DW	01d21H
	DW	01f03H
	DW	02301H
	DW	02503H
	DW	02903H
	DW	02d03H
	DW	03103H
	DW	03503H
	DW	03901H
	DW	03b01H
	DW	03d01H
	DW	03f01H
	DW	04103H
	DW	04503H
	DW	04903H
	DW	04d03H
	DW	05103H
	DW	05503H
	DW	05903H
	DW	05d03H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	03H
	DW	06103H
	DW	06503H
	DW	06903H
	DW	06d13H
	DW	07103H
	DW	07503H
	DW	07903H
	DW	07d01H
	DW	07f01H
	DW	08103H
	DW	0104H
	DW	0184H
	DW	0184H
	DW	0184H
	DW	0184H
	DW	0184H
	DW	0344H
	DW	0104H
	DW	0704H
	DW	0804H
	DW	0804H
	DW	0104H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	08501H
	DW	08701H
	DW	08901H
	DW	08b01H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	0604H
	DW	09H
	DW	021H
	DW	021H
	DW	00H
	DW	021H
	DW	01H
	DW	01H
	DW	03H
	DW	0160bH
	DW	0e0bH
	DW	020bH
	DW	03H
	DW	03H
	DW	060bH
	DW	03H
	DW	03H
	DW	03H
	DW	03H
	DW	03H
	DW	03H
	DW	03H
	DW	02a0bH
	DW	03H
	DW	03809H
	DW	01H
	DW	01H
	DW	01H
	DW	03409H
	DW	03209H
	DW	03609H
	DW	01H
	DW	01H
	DW	03c09H
	DW	01H
	DW	01H
	DW	01H
	DW	01H
	DW	01H
	DW	01H
	DW	03a09H
	DW	01H
	DW	03H
	DW	03H
	DW	03H
	DW	03H
	DW	03H
	DW	03H
	DW	03H
	DW	03H
	DW	03H
	DW	03H
	DW	03H
	DW	03H
	DW	03H
	DW	03H
	DW	03H
	DW	03e0bH
	DW	03H
	DW	03H
	DW	03H
	DW	03H
	DW	03H
	DW	0420bH
	DW	03H
	DW	03H
	DW	03H
	DW	03H
	DW	03H
	DW	03H
	DW	03H
	DW	03H
	DW	03H
	DW	03H
	DW	04e09H
	DW	0500bH
	DW	03H
	DW	03H
	DW	05a0bH
	DW	03H
	DW	05409H
	DW	0560bH
	DW	01H
	DW	01H
	DW	01H
	DW	09009H
	DW	08909H
	DW	08709H
	DW	08b09H
	DW	09209H
	DW	01H
	DW	08e09H
	DW	0ac0bH
	DW	01H
	DW	03H
	DW	03H
	DW	0940bH
	DW	03H
	DW	05e09H
	DW	06009H
	ORG $+4
_presALink DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	ORG $+5
_presBLink DB	03H
	DB	03H
	DB	03H
	DB	00H
	DB	03H
	DB	00H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
_convertFBto06 DW 0671H
	DW	0671H
	DW	067bH
	DW	067bH
	DW	067bH
	DW	067bH
	DW	067eH
	DW	067eH
	DW	067eH
	DW	067eH
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	067aH
	DW	067aH
	DW	067aH
	DW	067aH
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	0679H
	DW	0679H
	DW	0679H
	DW	0679H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	0686H
	DW	0686H
	DW	0686H
	DW	0686H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	068dH
	DW	068dH
	DW	068cH
	DW	068cH
	DW	068eH
	DW	068eH
	DW	0688H
	DW	0688H
	DW	0698H
	DW	0698H
	DW	0691H
	DW	0691H
	DW	06a9H
	DW	06a9H
	DW	06a9H
	DW	06a9H
	DW	06afH
	DW	06afH
	DW	06afH
	DW	06afH
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	06baH
	DW	06baH
	DW	06bbH
	DW	06bbH
	DW	06bbH
	DW	06bbH
	DW	06c0H
	DW	06c0H
	DW	06c1H
	DW	06c1H
	DW	06c1H
	DW	06c1H
	DW	06beH
	DW	06beH
	DW	06beH
	DW	06beH
	DW	06d2H
	DW	06d2H
	DW	06d3H
	DW	06d3H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	06c7H
	DW	06c7H
	DW	06c6H
	DW	06c6H
	DW	06c8H
	DW	06c8H
	DW	00H
	DW	06cbH
	DW	06cbH
	DW	06c5H
	DW	06c5H
	DW	06c9H
	DW	06c9H
	DW	06d0H
	DW	06d0H
	DW	06d0H
	DW	06d0H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	06ccH
	DW	06ccH
	DW	06ccH
	DW	06ccH
_convertFEto06 DW 064bH
	DW	064bH
	DW	064cH
	DW	064cH
	DW	064dH
	DW	064dH
	DW	064eH
	DW	064eH
	DW	064fH
	DW	064fH
	DW	0650H
	DW	0650H
	DW	0651H
	DW	0651H
	DW	0652H
	DW	0652H
	DW	0621H
	DW	0622H
	DW	0622H
	DW	0623H
	DW	0623H
	DW	0624H
	DW	0624H
	DW	0625H
	DW	0625H
	DW	0626H
	DW	0626H
	DW	0626H
	DW	0626H
	DW	0627H
	DW	0627H
	DW	0628H
	DW	0628H
	DW	0628H
	DW	0628H
	DW	0629H
	DW	0629H
	DW	062aH
	DW	062aH
	DW	062aH
	DW	062aH
	DW	062bH
	DW	062bH
	DW	062bH
	DW	062bH
	DW	062cH
	DW	062cH
	DW	062cH
	DW	062cH
	DW	062dH
	DW	062dH
	DW	062dH
	DW	062dH
	DW	062eH
	DW	062eH
	DW	062eH
	DW	062eH
	DW	062fH
	DW	062fH
	DW	0630H
	DW	0630H
	DW	0631H
	DW	0631H
	DW	0632H
	DW	0632H
	DW	0633H
	DW	0633H
	DW	0633H
	DW	0633H
	DW	0634H
	DW	0634H
	DW	0634H
	DW	0634H
	DW	0635H
	DW	0635H
	DW	0635H
	DW	0635H
	DW	0636H
	DW	0636H
	DW	0636H
	DW	0636H
	DW	0637H
	DW	0637H
	DW	0637H
	DW	0637H
	DW	0638H
	DW	0638H
	DW	0638H
	DW	0638H
	DW	0639H
	DW	0639H
	DW	0639H
	DW	0639H
	DW	063aH
	DW	063aH
	DW	063aH
	DW	063aH
	DW	0641H
	DW	0641H
	DW	0641H
	DW	0641H
	DW	0642H
	DW	0642H
	DW	0642H
	DW	0642H
	DW	0643H
	DW	0643H
	DW	0643H
	DW	0643H
	DW	0644H
	DW	0644H
	DW	0644H
	DW	0644H
	DW	0645H
	DW	0645H
	DW	0645H
	DW	0645H
	DW	0646H
	DW	0646H
	DW	0646H
	DW	0646H
	DW	0647H
	DW	0647H
	DW	0647H
	DW	0647H
	DW	0648H
	DW	0648H
	DW	0649H
	DW	0649H
	DW	064aH
	DW	064aH
	DW	064aH
	DW	064aH
	DW	065cH
	DW	065cH
	DW	065dH
	DW	065dH
	DW	065eH
	DW	065eH
	DW	065fH
	DW	065fH
	ORG $+6
_shapeTable DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	03H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	02H
	DB	02H
	DB	00H
	DB	00H
	DB	01H
	DB	02H
	DB	00H
	DB	01H
	DB	01H
	DB	02H
	DB	00H
	DB	01H
	DB	01H
	DB	03H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	03H
	DB	00H
	DB	01H
	DB	00H
	DB	03H
	DB	00H
	DB	00H
	DB	01H
	DB	02H
	DB	00H
	DB	00H
	DB	01H
	DB	02H
	DB	00H
	DB	01H
	DB	01H
	DB	02H
	DB	00H
	DB	01H
	DB	01H
	DB	03H
CONST	ENDS
PUBLIC	??2@YAPAXI@Z					; operator new
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File d:\mozilla\intl\icu\source\common\unicode\utypes.h
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT ??2@YAPAXI@Z
_TEXT	SEGMENT
_q$ = -8						; size = 4
___formal$ = 8						; size = 4
??2@YAPAXI@Z PROC					; operator new, COMDAT
; Line 411
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 412
	mov	DWORD PTR _q$[ebp], 0
; Line 413
	mov	eax, DWORD PTR _q$[ebp]
	mov	BYTE PTR [eax], 5
; Line 414
	mov	eax, DWORD PTR _q$[ebp]
; Line 415
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??2@YAPAXI@Z ENDP					; operator new
_TEXT	ENDS
PUBLIC	??3@YAXPAX@Z					; operator delete
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??3@YAXPAX@Z
_TEXT	SEGMENT
_q$ = -8						; size = 4
___formal$ = 8						; size = 4
??3@YAXPAX@Z PROC					; operator delete, COMDAT
; Line 439
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 440
	mov	DWORD PTR _q$[ebp], 0
; Line 441
	mov	eax, DWORD PTR _q$[ebp]
	mov	BYTE PTR [eax], 5
; Line 442
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??3@YAXPAX@Z ENDP					; operator delete
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_u_shapeArabic_56
EXTRN	_uprv_min_56:PROC
EXTRN	_memset:PROC
EXTRN	_memcpy:PROC
EXTRN	_uprv_checkValidMemory:PROC
EXTRN	_uprv_free_56:PROC
EXTRN	_uprv_malloc_56:PROC
EXTRN	_u_terminateUChars_56:PROC
EXTRN	_u_strlen_56:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__RTC_CheckEsp:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _u_shapeArabic_56
_TEXT	SEGMENT
tv405 = -1068						; size = 4
tv401 = -1068						; size = 4
tv320 = -1068						; size = 4
tv264 = -1068						; size = 4
tv186 = -1068						; size = 4
tv184 = -1068						; size = 4
tv182 = -1068						; size = 4
tv246 = -1066						; size = 2
_i$10295 = -868						; size = 4
_digitBase$10294 = -856					; size = 2
_newSourceLength$10251 = -844				; size = 4
_currLink$10250 = -832					; size = 2
_prevLink$10249 = -820					; size = 2
_prev$10248 = -808					; size = 2
_aggregation_possible$10247 = -796			; size = 4
_end$10246 = -784					; size = 4
_i$10245 = -772						; size = 4
_j$10244 = -760						; size = 4
_step$10243 = -748					; size = 4
_aggregate_tashkeel$10242 = -736			; size = 4
_logical_order$10241 = -724				; size = 4
_spacesCountr$10239 = -712				; size = 4
_spacesCountl$10238 = -700				; size = 4
_outputSize$10237 = -688				; size = 4
_tempsource$10236 = -676				; size = 4
_tempbuffer$10235 = -664				; size = 4
_buffer$10234 = -652					; size = 600
_shapeVars$ = -44					; size = 24
_destLength$ = -12					; size = 4
__$ArrayPad$ = -4					; size = 4
_source$ = 8						; size = 4
_sourceLength$ = 12					; size = 4
_dest$ = 16						; size = 4
_destCapacity$ = 20					; size = 4
_options$ = 24						; size = 4
_pErrorCode$ = 28					; size = 4
_u_shapeArabic_56 PROC					; COMDAT
; File d:\mozilla\intl\icu\source\common\ushape.cpp
; Line 1424
	push	ebp
	mov	ebp, esp
	sub	esp, 1068				; 0000042cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-1068]
	mov	ecx, 267				; 0000010bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 1427
	mov	eax, 8203				; 0000200bH
	mov	WORD PTR _shapeVars$[ebp], ax
	mov	DWORD PTR _shapeVars$[ebp+4], 3
	mov	DWORD PTR _shapeVars$[ebp+8], 2
	mov	DWORD PTR _shapeVars$[ebp+12], 262144	; 00040000H
	mov	DWORD PTR _shapeVars$[ebp+16], 393216	; 00060000H
	mov	DWORD PTR _shapeVars$[ebp+20], 0
; Line 1430
	cmp	DWORD PTR _pErrorCode$[ebp], 0
	je	SHORT $LN73@u_shapeAra
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN74@u_shapeAra
$LN73@u_shapeAra:
; Line 1431
	xor	eax, eax
	jmp	$LN75@u_shapeAra
$LN74@u_shapeAra:
; Line 1446
	cmp	DWORD PTR _source$[ebp], 0
	je	$LN71@u_shapeAra
	cmp	DWORD PTR _sourceLength$[ebp], -1
	jl	SHORT $LN71@u_shapeAra
	cmp	DWORD PTR _dest$[ebp], 0
	jne	SHORT $LN70@u_shapeAra
	cmp	DWORD PTR _destCapacity$[ebp], 0
	jne	SHORT $LN71@u_shapeAra
$LN70@u_shapeAra:
	cmp	DWORD PTR _destCapacity$[ebp], 0
	jl	SHORT $LN71@u_shapeAra
	mov	eax, DWORD PTR _options$[ebp]
	and	eax, 917504				; 000e0000H
	jbe	SHORT $LN69@u_shapeAra
	mov	eax, DWORD PTR _options$[ebp]
	and	eax, 24					; 00000018H
	cmp	eax, 24					; 00000018H
	je	SHORT $LN71@u_shapeAra
$LN69@u_shapeAra:
	mov	eax, DWORD PTR _options$[ebp]
	and	eax, 917504				; 000e0000H
	jbe	SHORT $LN68@u_shapeAra
	mov	eax, DWORD PTR _options$[ebp]
	and	eax, 24					; 00000018H
	cmp	eax, 16					; 00000010H
	je	SHORT $LN71@u_shapeAra
$LN68@u_shapeAra:
	mov	eax, DWORD PTR _options$[ebp]
	and	eax, 512				; 00000200H
	jne	SHORT $LN71@u_shapeAra
	mov	eax, DWORD PTR _options$[ebp]
	and	eax, 224				; 000000e0H
	cmp	eax, 160				; 000000a0H
	je	SHORT $LN71@u_shapeAra
	mov	eax, DWORD PTR _options$[ebp]
	and	eax, 65539				; 00010003H
	je	SHORT $LN67@u_shapeAra
	mov	eax, DWORD PTR _options$[ebp]
	and	eax, 16384				; 00004000H
	jne	SHORT $LN71@u_shapeAra
$LN67@u_shapeAra:
	mov	eax, DWORD PTR _options$[ebp]
	and	eax, 16384				; 00004000H
	je	SHORT $LN72@u_shapeAra
	mov	eax, DWORD PTR _options$[ebp]
	and	eax, 24					; 00000018H
	cmp	eax, 24					; 00000018H
	je	SHORT $LN72@u_shapeAra
$LN71@u_shapeAra:
; Line 1448
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 1
; Line 1449
	xor	eax, eax
	jmp	$LN75@u_shapeAra
$LN72@u_shapeAra:
; Line 1457
	mov	eax, DWORD PTR _options$[ebp]
	and	eax, 65539				; 00010003H
	jbe	SHORT $LN66@u_shapeAra
	mov	eax, DWORD PTR _options$[ebp]
	and	eax, 65539				; 00010003H
	cmp	eax, 3
	je	SHORT $LN66@u_shapeAra
	mov	eax, DWORD PTR _options$[ebp]
	and	eax, 65539				; 00010003H
	cmp	eax, 2
	je	SHORT $LN66@u_shapeAra
	mov	eax, DWORD PTR _options$[ebp]
	and	eax, 65539				; 00010003H
	je	SHORT $LN66@u_shapeAra
	mov	eax, DWORD PTR _options$[ebp]
	and	eax, 65539				; 00010003H
	cmp	eax, 65536				; 00010000H
	je	SHORT $LN66@u_shapeAra
	mov	eax, DWORD PTR _options$[ebp]
	and	eax, 65539				; 00010003H
	cmp	eax, 1
	je	SHORT $LN66@u_shapeAra
; Line 1459
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 1
; Line 1460
	xor	eax, eax
	jmp	$LN75@u_shapeAra
$LN66@u_shapeAra:
; Line 1467
	mov	eax, DWORD PTR _options$[ebp]
	and	eax, 917504				; 000e0000H
	jbe	SHORT $LN65@u_shapeAra
	mov	eax, DWORD PTR _options$[ebp]
	and	eax, 917504				; 000e0000H
	cmp	eax, 262144				; 00040000H
	je	SHORT $LN65@u_shapeAra
	mov	eax, DWORD PTR _options$[ebp]
	and	eax, 917504				; 000e0000H
	cmp	eax, 393216				; 00060000H
	je	SHORT $LN65@u_shapeAra
	mov	eax, DWORD PTR _options$[ebp]
	and	eax, 917504				; 000e0000H
	cmp	eax, 524288				; 00080000H
	je	SHORT $LN65@u_shapeAra
	mov	eax, DWORD PTR _options$[ebp]
	and	eax, 917504				; 000e0000H
	cmp	eax, 786432				; 000c0000H
	je	SHORT $LN65@u_shapeAra
; Line 1469
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 1
; Line 1470
	xor	eax, eax
	jmp	$LN75@u_shapeAra
$LN65@u_shapeAra:
; Line 1473
	cmp	DWORD PTR _sourceLength$[ebp], -1
	jne	SHORT $LN64@u_shapeAra
; Line 1474
	mov	eax, DWORD PTR _source$[ebp]
	push	eax
	call	_u_strlen_56
	add	esp, 4
	mov	DWORD PTR _sourceLength$[ebp], eax
$LN64@u_shapeAra:
; Line 1476
	cmp	DWORD PTR _sourceLength$[ebp], 0
	jg	SHORT $LN63@u_shapeAra
; Line 1477
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _destCapacity$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dest$[ebp]
	push	edx
	call	_u_terminateUChars_56
	add	esp, 16					; 00000010H
	jmp	$LN75@u_shapeAra
$LN63@u_shapeAra:
; Line 1483
	cmp	DWORD PTR _dest$[ebp], 0
	je	SHORT $LN62@u_shapeAra
	mov	eax, DWORD PTR _source$[ebp]
	cmp	eax, DWORD PTR _dest$[ebp]
	ja	SHORT $LN60@u_shapeAra
	mov	eax, DWORD PTR _sourceLength$[ebp]
	mov	ecx, DWORD PTR _source$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	cmp	DWORD PTR _dest$[ebp], edx
	jb	SHORT $LN61@u_shapeAra
$LN60@u_shapeAra:
	mov	eax, DWORD PTR _dest$[ebp]
	cmp	eax, DWORD PTR _source$[ebp]
	ja	SHORT $LN62@u_shapeAra
	mov	eax, DWORD PTR _destCapacity$[ebp]
	mov	ecx, DWORD PTR _dest$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	cmp	DWORD PTR _source$[ebp], edx
	jae	SHORT $LN62@u_shapeAra
$LN61@u_shapeAra:
; Line 1484
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 1
; Line 1485
	xor	eax, eax
	jmp	$LN75@u_shapeAra
$LN62@u_shapeAra:
; Line 1489
	mov	eax, DWORD PTR _options$[ebp]
	and	eax, 134217728				; 08000000H
	je	SHORT $LN59@u_shapeAra
; Line 1490
	mov	eax, 65139				; 0000fe73H
	mov	WORD PTR _shapeVars$[ebp], ax
; Line 1491
	jmp	SHORT $LN58@u_shapeAra
$LN59@u_shapeAra:
; Line 1492
	mov	eax, 8203				; 0000200bH
	mov	WORD PTR _shapeVars$[ebp], ax
$LN58@u_shapeAra:
; Line 1495
	mov	eax, DWORD PTR _options$[ebp]
	and	eax, 24					; 00000018H
	je	$LN57@u_shapeAra
; Line 1497
	mov	DWORD PTR _tempsource$10236[ebp], 0
; Line 1498
	mov	DWORD PTR _spacesCountl$10238[ebp], 0
	mov	DWORD PTR _spacesCountr$10239[ebp], 0
; Line 1500
	mov	eax, DWORD PTR _options$[ebp]
	and	eax, 16384				; 00004000H
	jbe	$LN56@u_shapeAra
; Line 1501
	mov	eax, DWORD PTR _options$[ebp]
	and	eax, 4
	neg	eax
	sbb	eax, eax
	add	eax, 1
	mov	DWORD PTR _logical_order$10241[ebp], eax
; Line 1504
	mov	eax, DWORD PTR _options$[ebp]
	and	eax, 16408				; 00004018H
	xor	ecx, ecx
	cmp	eax, 16408				; 00004018H
	sete	cl
	mov	DWORD PTR _aggregate_tashkeel$10242[ebp], ecx
; Line 1505
	xor	eax, eax
	cmp	DWORD PTR _logical_order$10241[ebp], 0
	setne	al
	lea	eax, DWORD PTR [eax+eax-1]
	mov	DWORD PTR _step$10243[ebp], eax
; Line 1506
	cmp	DWORD PTR _logical_order$10241[ebp], 0
	je	SHORT $LN77@u_shapeAra
	mov	DWORD PTR tv182[ebp], -1
	jmp	SHORT $LN78@u_shapeAra
$LN77@u_shapeAra:
	mov	eax, DWORD PTR _sourceLength$[ebp]
	shl	eax, 1
	mov	DWORD PTR tv182[ebp], eax
$LN78@u_shapeAra:
	mov	ecx, DWORD PTR tv182[ebp]
	mov	DWORD PTR _j$10244[ebp], ecx
; Line 1507
	cmp	DWORD PTR _logical_order$10241[ebp], 0
	je	SHORT $LN79@u_shapeAra
	mov	DWORD PTR tv184[ebp], -1
	jmp	SHORT $LN80@u_shapeAra
$LN79@u_shapeAra:
	mov	eax, DWORD PTR _sourceLength$[ebp]
	mov	DWORD PTR tv184[ebp], eax
$LN80@u_shapeAra:
	mov	ecx, DWORD PTR tv184[ebp]
	mov	DWORD PTR _i$10245[ebp], ecx
; Line 1508
	cmp	DWORD PTR _logical_order$10241[ebp], 0
	je	SHORT $LN81@u_shapeAra
	mov	eax, DWORD PTR _sourceLength$[ebp]
	mov	DWORD PTR tv186[ebp], eax
	jmp	SHORT $LN82@u_shapeAra
$LN81@u_shapeAra:
	mov	DWORD PTR tv186[ebp], -1
$LN82@u_shapeAra:
	mov	ecx, DWORD PTR tv186[ebp]
	mov	DWORD PTR _end$10246[ebp], ecx
; Line 1509
	mov	DWORD PTR _aggregation_possible$10247[ebp], 1
; Line 1510
	xor	eax, eax
	mov	WORD PTR _prev$10248[ebp], ax
; Line 1511
	xor	eax, eax
	mov	WORD PTR _currLink$10250[ebp], ax
; Line 1512
	mov	DWORD PTR _newSourceLength$10251[ebp], 0
; Line 1513
	mov	eax, DWORD PTR _sourceLength$[ebp]
	shl	eax, 1
	shl	eax, 1
	push	eax
	call	_uprv_malloc_56
	add	esp, 4
	mov	DWORD PTR _tempsource$10236[ebp], eax
; Line 1514
	cmp	DWORD PTR _tempsource$10236[ebp], 0
	jne	SHORT $LN54@u_shapeAra
; Line 1515
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 7
; Line 1516
	xor	eax, eax
	jmp	$LN75@u_shapeAra
$LN54@u_shapeAra:
; Line 1519
	mov	eax, DWORD PTR _i$10245[ebp]
	add	eax, DWORD PTR _step$10243[ebp]
	mov	DWORD PTR _i$10245[ebp], eax
	mov	ecx, DWORD PTR _i$10245[ebp]
	cmp	ecx, DWORD PTR _end$10246[ebp]
	je	$LN53@u_shapeAra
; Line 1520
	mov	ax, WORD PTR _currLink$10250[ebp]
	mov	WORD PTR _prevLink$10249[ebp], ax
; Line 1521
	mov	eax, DWORD PTR _i$10245[ebp]
	mov	ecx, DWORD PTR _source$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	push	edx
	call	?getLink@@YA_W_W@Z			; getLink
	add	esp, 4
	mov	WORD PTR _currLink$10250[ebp], ax
; Line 1522
	cmp	DWORD PTR _aggregate_tashkeel$10242[ebp], 0
	je	$LN52@u_shapeAra
	movzx	eax, WORD PTR _prevLink$10249[ebp]
	movzx	ecx, WORD PTR _currLink$10250[ebp]
	or	eax, ecx
	and	eax, 192				; 000000c0H
	cmp	eax, 192				; 000000c0H
	jne	$LN52@u_shapeAra
	cmp	DWORD PTR _aggregation_possible$10247[ebp], 0
	je	$LN52@u_shapeAra
; Line 1523
	mov	DWORD PTR _aggregation_possible$10247[ebp], 0
; Line 1524
	movzx	eax, WORD PTR _prev$10248[ebp]
	mov	ecx, DWORD PTR _i$10245[ebp]
	mov	edx, DWORD PTR _source$[ebp]
	movzx	ecx, WORD PTR [edx+ecx*2]
	cmp	eax, ecx
	jge	SHORT $LN83@u_shapeAra
	mov	dx, WORD PTR _prev$10248[ebp]
	mov	WORD PTR tv246[ebp], dx
	jmp	SHORT $LN84@u_shapeAra
$LN83@u_shapeAra:
	mov	eax, DWORD PTR _i$10245[ebp]
	mov	ecx, DWORD PTR _source$[ebp]
	mov	dx, WORD PTR [ecx+eax*2]
	mov	WORD PTR tv246[ebp], dx
$LN84@u_shapeAra:
	movzx	eax, WORD PTR tv246[ebp]
	add	eax, 62994				; 0000f612H
	mov	ecx, DWORD PTR _j$10244[ebp]
	mov	edx, DWORD PTR _tempsource$10236[ebp]
	mov	WORD PTR [edx+ecx*2], ax
; Line 1525
	mov	eax, DWORD PTR _j$10244[ebp]
	mov	ecx, DWORD PTR _tempsource$10236[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	push	edx
	call	?getLink@@YA_W_W@Z			; getLink
	add	esp, 4
	mov	WORD PTR _currLink$10250[ebp], ax
; Line 1526
	jmp	SHORT $LN51@u_shapeAra
$LN52@u_shapeAra:
; Line 1527
	mov	DWORD PTR _aggregation_possible$10247[ebp], 1
; Line 1528
	mov	eax, DWORD PTR _j$10244[ebp]
	add	eax, DWORD PTR _step$10243[ebp]
	mov	DWORD PTR _j$10244[ebp], eax
	mov	ecx, DWORD PTR _j$10244[ebp]
	mov	edx, DWORD PTR _tempsource$10236[ebp]
	mov	eax, DWORD PTR _i$10245[ebp]
	mov	esi, DWORD PTR _source$[ebp]
	mov	ax, WORD PTR [esi+eax*2]
	mov	WORD PTR [edx+ecx*2], ax
; Line 1529
	mov	eax, DWORD PTR _i$10245[ebp]
	mov	ecx, DWORD PTR _source$[ebp]
	mov	dx, WORD PTR [ecx+eax*2]
	mov	WORD PTR _prev$10248[ebp], dx
; Line 1530
	mov	eax, DWORD PTR _newSourceLength$10251[ebp]
	add	eax, 1
	mov	DWORD PTR _newSourceLength$10251[ebp], eax
$LN51@u_shapeAra:
; Line 1532
	jmp	$LN54@u_shapeAra
$LN53@u_shapeAra:
; Line 1533
	cmp	DWORD PTR _logical_order$10241[ebp], 0
	je	SHORT $LN85@u_shapeAra
	mov	DWORD PTR tv264[ebp], 0
	jmp	SHORT $LN86@u_shapeAra
$LN85@u_shapeAra:
	mov	eax, DWORD PTR _j$10244[ebp]
	mov	DWORD PTR tv264[ebp], eax
$LN86@u_shapeAra:
	mov	ecx, DWORD PTR tv264[ebp]
	mov	edx, DWORD PTR _tempsource$10236[ebp]
	lea	eax, DWORD PTR [edx+ecx*2]
	mov	DWORD PTR _source$[ebp], eax
; Line 1534
	mov	eax, DWORD PTR _newSourceLength$10251[ebp]
	mov	DWORD PTR _sourceLength$[ebp], eax
$LN56@u_shapeAra:
; Line 1540
	mov	eax, DWORD PTR _options$[ebp]
	and	eax, 65539				; 00010003H
	je	SHORT $LN49@u_shapeAra
	mov	eax, DWORD PTR _options$[ebp]
	and	eax, 917504				; 000e0000H
	cmp	eax, 524288				; 00080000H
	jne	SHORT $LN50@u_shapeAra
$LN49@u_shapeAra:
; Line 1541
	mov	eax, DWORD PTR _options$[ebp]
	push	eax
	mov	ecx, DWORD PTR _destCapacity$[ebp]
	push	ecx
	mov	edx, DWORD PTR _sourceLength$[ebp]
	push	edx
	mov	eax, DWORD PTR _source$[ebp]
	push	eax
	call	?calculateSize@@YAHPB_WHHI@Z		; calculateSize
	add	esp, 16					; 00000010H
	mov	DWORD PTR _outputSize$10237[ebp], eax
; Line 1542
	jmp	SHORT $LN48@u_shapeAra
$LN50@u_shapeAra:
; Line 1543
	mov	eax, DWORD PTR _sourceLength$[ebp]
	mov	DWORD PTR _outputSize$10237[ebp], eax
$LN48@u_shapeAra:
; Line 1546
	mov	eax, DWORD PTR _outputSize$10237[ebp]
	cmp	eax, DWORD PTR _destCapacity$[ebp]
	jle	SHORT $LN47@u_shapeAra
; Line 1547
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
; Line 1548
	cmp	DWORD PTR _tempsource$10236[ebp], 0
	je	SHORT $LN46@u_shapeAra
	mov	eax, DWORD PTR _tempsource$10236[ebp]
	push	eax
	call	_uprv_free_56
	add	esp, 4
$LN46@u_shapeAra:
; Line 1549
	mov	eax, DWORD PTR _outputSize$10237[ebp]
	jmp	$LN75@u_shapeAra
$LN47@u_shapeAra:
; Line 1556
	mov	eax, DWORD PTR _sourceLength$[ebp]
	cmp	eax, DWORD PTR _outputSize$10237[ebp]
	jle	SHORT $LN45@u_shapeAra
; Line 1557
	mov	eax, DWORD PTR _sourceLength$[ebp]
	mov	DWORD PTR _outputSize$10237[ebp], eax
$LN45@u_shapeAra:
; Line 1561
	cmp	DWORD PTR _outputSize$10237[ebp], 300	; 0000012cH
	jg	SHORT $LN44@u_shapeAra
; Line 1562
	mov	DWORD PTR _outputSize$10237[ebp], 300	; 0000012cH
; Line 1563
	lea	eax, DWORD PTR _buffer$10234[ebp]
	mov	DWORD PTR _tempbuffer$10235[ebp], eax
; Line 1564
	jmp	SHORT $LN43@u_shapeAra
$LN44@u_shapeAra:
; Line 1565
	mov	eax, DWORD PTR _outputSize$10237[ebp]
	shl	eax, 1
	push	eax
	call	_uprv_malloc_56
	add	esp, 4
	mov	DWORD PTR _tempbuffer$10235[ebp], eax
; Line 1568
	cmp	DWORD PTR _tempbuffer$10235[ebp], 0
	jne	SHORT $LN43@u_shapeAra
; Line 1569
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 7
; Line 1570
	cmp	DWORD PTR _tempsource$10236[ebp], 0
	je	SHORT $LN41@u_shapeAra
	mov	eax, DWORD PTR _tempsource$10236[ebp]
	push	eax
	call	_uprv_free_56
	add	esp, 4
$LN41@u_shapeAra:
; Line 1571
	xor	eax, eax
	jmp	$LN75@u_shapeAra
$LN43@u_shapeAra:
; Line 1574
	push	1
	mov	eax, DWORD PTR _source$[ebp]
	push	eax
	call	_uprv_checkValidMemory
	add	esp, 8
	mov	ecx, DWORD PTR _sourceLength$[ebp]
	shl	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _source$[ebp]
	push	edx
	mov	eax, DWORD PTR _tempbuffer$10235[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 1575
	cmp	DWORD PTR _tempsource$10236[ebp], 0
	je	SHORT $LN40@u_shapeAra
; Line 1576
	mov	eax, DWORD PTR _tempsource$10236[ebp]
	push	eax
	call	_uprv_free_56
	add	esp, 4
$LN40@u_shapeAra:
; Line 1579
	mov	eax, DWORD PTR _sourceLength$[ebp]
	cmp	eax, DWORD PTR _outputSize$10237[ebp]
	jge	SHORT $LN39@u_shapeAra
; Line 1580
	mov	eax, DWORD PTR _outputSize$10237[ebp]
	sub	eax, DWORD PTR _sourceLength$[ebp]
	shl	eax, 1
	push	eax
	push	0
	mov	ecx, DWORD PTR _sourceLength$[ebp]
	mov	edx, DWORD PTR _tempbuffer$10235[ebp]
	lea	eax, DWORD PTR [edx+ecx*2]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
$LN39@u_shapeAra:
; Line 1583
	mov	eax, DWORD PTR _options$[ebp]
	and	eax, 4
	jne	SHORT $LN38@u_shapeAra
; Line 1584
	lea	eax, DWORD PTR _spacesCountr$10239[ebp]
	push	eax
	lea	ecx, DWORD PTR _spacesCountl$10238[ebp]
	push	ecx
	mov	edx, DWORD PTR _options$[ebp]
	push	edx
	mov	eax, DWORD PTR _sourceLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _tempbuffer$10235[ebp]
	push	ecx
	call	?countSpaces@@YAXPA_WHIPAH1@Z		; countSpaces
	add	esp, 20					; 00000014H
; Line 1585
	mov	eax, DWORD PTR _spacesCountr$10239[ebp]
	push	eax
	mov	ecx, DWORD PTR _spacesCountl$10238[ebp]
	push	ecx
	mov	edx, DWORD PTR _options$[ebp]
	push	edx
	mov	eax, DWORD PTR _sourceLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _tempbuffer$10235[ebp]
	push	ecx
	call	?invertBuffer@@YAXPA_WHIHH@Z		; invertBuffer
	add	esp, 20					; 00000014H
$LN38@u_shapeAra:
; Line 1588
	mov	eax, DWORD PTR _options$[ebp]
	and	eax, 4
	je	SHORT $LN37@u_shapeAra
; Line 1589
	mov	eax, DWORD PTR _options$[ebp]
	and	eax, 67108864				; 04000000H
	je	SHORT $LN37@u_shapeAra
; Line 1590
	mov	DWORD PTR _shapeVars$[ebp+20], 1
; Line 1591
	mov	DWORD PTR _shapeVars$[ebp+4], 2
; Line 1592
	mov	DWORD PTR _shapeVars$[ebp+8], 3
; Line 1593
	mov	DWORD PTR _shapeVars$[ebp+12], 393216	; 00060000H
; Line 1594
	mov	DWORD PTR _shapeVars$[ebp+16], 262144	; 00040000H
$LN37@u_shapeAra:
; Line 1598
	mov	eax, DWORD PTR _options$[ebp]
	and	eax, 24					; 00000018H
	mov	DWORD PTR tv320[ebp], eax
	cmp	DWORD PTR tv320[ebp], 8
	je	SHORT $LN33@u_shapeAra
	cmp	DWORD PTR tv320[ebp], 16		; 00000010H
	je	$LN28@u_shapeAra
	cmp	DWORD PTR tv320[ebp], 24		; 00000018H
	je	$LN29@u_shapeAra
	jmp	$LN27@u_shapeAra
$LN33@u_shapeAra:
; Line 1601
	mov	eax, DWORD PTR _options$[ebp]
	and	eax, 917504				; 000e0000H
	jbe	SHORT $LN32@u_shapeAra
	mov	eax, DWORD PTR _options$[ebp]
	and	eax, 917504				; 000e0000H
	cmp	eax, 786432				; 000c0000H
	je	SHORT $LN32@u_shapeAra
; Line 1603
	sub	esp, 24					; 00000018H
	mov	eax, esp
	mov	ecx, DWORD PTR _shapeVars$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _shapeVars$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _shapeVars$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _shapeVars$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	ecx, DWORD PTR _shapeVars$[ebp+16]
	mov	DWORD PTR [eax+16], ecx
	mov	edx, DWORD PTR _shapeVars$[ebp+20]
	mov	DWORD PTR [eax+20], edx
	push	2
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _options$[ebp]
	push	ecx
	mov	edx, DWORD PTR _destCapacity$[ebp]
	push	edx
	mov	eax, DWORD PTR _sourceLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _tempbuffer$10235[ebp]
	push	ecx
	call	?shapeUnicode@@YAHPA_WHHIPAW4UErrorCode@@HUuShapeVariables@@@Z ; shapeUnicode
	add	esp, 48					; 00000030H
	mov	DWORD PTR _destLength$[ebp], eax
; Line 1604
	jmp	SHORT $LN31@u_shapeAra
$LN32@u_shapeAra:
; Line 1606
	sub	esp, 24					; 00000018H
	mov	eax, esp
	mov	ecx, DWORD PTR _shapeVars$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _shapeVars$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _shapeVars$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _shapeVars$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	ecx, DWORD PTR _shapeVars$[ebp+16]
	mov	DWORD PTR [eax+16], ecx
	mov	edx, DWORD PTR _shapeVars$[ebp+20]
	mov	DWORD PTR [eax+20], edx
	push	1
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _options$[ebp]
	push	ecx
	mov	edx, DWORD PTR _destCapacity$[ebp]
	push	edx
	mov	eax, DWORD PTR _sourceLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _tempbuffer$10235[ebp]
	push	ecx
	call	?shapeUnicode@@YAHPA_WHHIPAW4UErrorCode@@HUuShapeVariables@@@Z ; shapeUnicode
	add	esp, 48					; 00000030H
	mov	DWORD PTR _destLength$[ebp], eax
; Line 1609
	mov	eax, DWORD PTR _options$[ebp]
	and	eax, 917504				; 000e0000H
	cmp	eax, 786432				; 000c0000H
	jne	SHORT $LN31@u_shapeAra
; Line 1610
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _options$[ebp]
	push	ecx
	mov	edx, DWORD PTR _destCapacity$[ebp]
	push	edx
	mov	eax, DWORD PTR _destLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _tempbuffer$10235[ebp]
	push	ecx
	call	?handleTashkeelWithTatweel@@YAHPA_WHHIPAW4UErrorCode@@@Z ; handleTashkeelWithTatweel
	add	esp, 20					; 00000014H
	mov	DWORD PTR _destLength$[ebp], eax
$LN31@u_shapeAra:
; Line 1613
	jmp	$LN34@u_shapeAra
$LN29@u_shapeAra:
; Line 1616
	sub	esp, 24					; 00000018H
	mov	eax, esp
	mov	ecx, DWORD PTR _shapeVars$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _shapeVars$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _shapeVars$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _shapeVars$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	ecx, DWORD PTR _shapeVars$[ebp+16]
	mov	DWORD PTR [eax+16], ecx
	mov	edx, DWORD PTR _shapeVars$[ebp+20]
	mov	DWORD PTR [eax+20], edx
	push	0
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _options$[ebp]
	push	ecx
	mov	edx, DWORD PTR _destCapacity$[ebp]
	push	edx
	mov	eax, DWORD PTR _sourceLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _tempbuffer$10235[ebp]
	push	ecx
	call	?shapeUnicode@@YAHPA_WHHIPAW4UErrorCode@@HUuShapeVariables@@@Z ; shapeUnicode
	add	esp, 48					; 00000030H
	mov	DWORD PTR _destLength$[ebp], eax
; Line 1617
	jmp	SHORT $LN34@u_shapeAra
$LN28@u_shapeAra:
; Line 1621
	sub	esp, 24					; 00000018H
	mov	eax, esp
	mov	ecx, DWORD PTR _shapeVars$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _shapeVars$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _shapeVars$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _shapeVars$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	ecx, DWORD PTR _shapeVars$[ebp+16]
	mov	DWORD PTR [eax+16], ecx
	mov	edx, DWORD PTR _shapeVars$[ebp+20]
	mov	DWORD PTR [eax+20], edx
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _options$[ebp]
	push	ecx
	mov	edx, DWORD PTR _destCapacity$[ebp]
	push	edx
	mov	eax, DWORD PTR _sourceLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _tempbuffer$10235[ebp]
	push	ecx
	call	?deShapeUnicode@@YAHPA_WHHIPAW4UErrorCode@@UuShapeVariables@@@Z ; deShapeUnicode
	add	esp, 44					; 0000002cH
	mov	DWORD PTR _destLength$[ebp], eax
; Line 1622
	jmp	SHORT $LN34@u_shapeAra
$LN27@u_shapeAra:
; Line 1625
	mov	DWORD PTR _destLength$[ebp], 0
$LN34@u_shapeAra:
; Line 1636
	mov	eax, DWORD PTR _options$[ebp]
	and	eax, 4
	jne	SHORT $LN26@u_shapeAra
; Line 1637
	lea	eax, DWORD PTR _spacesCountr$10239[ebp]
	push	eax
	lea	ecx, DWORD PTR _spacesCountl$10238[ebp]
	push	ecx
	mov	edx, DWORD PTR _options$[ebp]
	push	edx
	mov	eax, DWORD PTR _destLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _tempbuffer$10235[ebp]
	push	ecx
	call	?countSpaces@@YAXPA_WHIPAH1@Z		; countSpaces
	add	esp, 20					; 00000014H
; Line 1638
	mov	eax, DWORD PTR _spacesCountr$10239[ebp]
	push	eax
	mov	ecx, DWORD PTR _spacesCountl$10238[ebp]
	push	ecx
	mov	edx, DWORD PTR _options$[ebp]
	push	edx
	mov	eax, DWORD PTR _destLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _tempbuffer$10235[ebp]
	push	ecx
	call	?invertBuffer@@YAXPA_WHIHH@Z		; invertBuffer
	add	esp, 20					; 00000014H
$LN26@u_shapeAra:
; Line 1640
	push	1
	mov	eax, DWORD PTR _tempbuffer$10235[ebp]
	push	eax
	call	_uprv_checkValidMemory
	add	esp, 8
	mov	ecx, DWORD PTR _destCapacity$[ebp]
	push	ecx
	mov	edx, DWORD PTR _destLength$[ebp]
	push	edx
	call	_uprv_min_56
	add	esp, 8
	shl	eax, 1
	push	eax
	mov	eax, DWORD PTR _tempbuffer$10235[ebp]
	push	eax
	mov	ecx, DWORD PTR _dest$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 1642
	mov	eax, DWORD PTR _tempbuffer$10235[ebp]
	lea	ecx, DWORD PTR _buffer$10234[ebp]
	cmp	eax, ecx
	je	SHORT $LN25@u_shapeAra
; Line 1643
	mov	eax, DWORD PTR _tempbuffer$10235[ebp]
	push	eax
	call	_uprv_free_56
	add	esp, 4
$LN25@u_shapeAra:
; Line 1646
	mov	eax, DWORD PTR _destLength$[ebp]
	cmp	eax, DWORD PTR _destCapacity$[ebp]
	jle	SHORT $LN24@u_shapeAra
; Line 1647
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
; Line 1648
	mov	eax, DWORD PTR _destLength$[ebp]
	jmp	$LN75@u_shapeAra
$LN24@u_shapeAra:
; Line 1652
	jmp	SHORT $LN23@u_shapeAra
$LN57@u_shapeAra:
; Line 1657
	mov	eax, DWORD PTR _destCapacity$[ebp]
	cmp	eax, DWORD PTR _sourceLength$[ebp]
	jge	SHORT $LN22@u_shapeAra
; Line 1659
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
; Line 1660
	mov	eax, DWORD PTR _sourceLength$[ebp]
	jmp	$LN75@u_shapeAra
$LN22@u_shapeAra:
; Line 1662
	push	1
	mov	eax, DWORD PTR _source$[ebp]
	push	eax
	call	_uprv_checkValidMemory
	add	esp, 8
	mov	ecx, DWORD PTR _sourceLength$[ebp]
	shl	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _source$[ebp]
	push	edx
	mov	eax, DWORD PTR _dest$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 1663
	mov	eax, DWORD PTR _sourceLength$[ebp]
	mov	DWORD PTR _destLength$[ebp], eax
$LN23@u_shapeAra:
; Line 1672
	mov	eax, DWORD PTR _options$[ebp]
	and	eax, 224				; 000000e0H
	je	$LN21@u_shapeAra
; Line 1677
	mov	eax, DWORD PTR _options$[ebp]
	and	eax, 768				; 00000300H
	mov	DWORD PTR tv401[ebp], eax
	je	SHORT $LN18@u_shapeAra
	cmp	DWORD PTR tv401[ebp], 256		; 00000100H
	je	SHORT $LN17@u_shapeAra
	jmp	SHORT $LN16@u_shapeAra
$LN18@u_shapeAra:
; Line 1679
	mov	eax, 1632				; 00000660H
	mov	WORD PTR _digitBase$10294[ebp], ax
; Line 1680
	jmp	SHORT $LN19@u_shapeAra
$LN17@u_shapeAra:
; Line 1682
	mov	eax, 1776				; 000006f0H
	mov	WORD PTR _digitBase$10294[ebp], ax
; Line 1683
	jmp	SHORT $LN19@u_shapeAra
$LN16@u_shapeAra:
; Line 1686
	xor	eax, eax
	mov	WORD PTR _digitBase$10294[ebp], ax
$LN19@u_shapeAra:
; Line 1691
	mov	eax, DWORD PTR _options$[ebp]
	and	eax, 224				; 000000e0H
	mov	DWORD PTR tv405[ebp], eax
	mov	ecx, DWORD PTR tv405[ebp]
	sub	ecx, 32					; 00000020H
	mov	DWORD PTR tv405[ebp], ecx
	cmp	DWORD PTR tv405[ebp], 96		; 00000060H
	ja	$LN21@u_shapeAra
	mov	edx, DWORD PTR tv405[ebp]
	movzx	eax, BYTE PTR $LN87@u_shapeAra[edx]
	jmp	DWORD PTR $LN94@u_shapeAra[eax*4]
$LN13@u_shapeAra:
; Line 1694
	movzx	eax, WORD PTR _digitBase$10294[ebp]
	sub	eax, 48					; 00000030H
	mov	WORD PTR _digitBase$10294[ebp], ax
; Line 1695
	mov	DWORD PTR _i$10295[ebp], 0
	jmp	SHORT $LN12@u_shapeAra
$LN11@u_shapeAra:
	mov	eax, DWORD PTR _i$10295[ebp]
	add	eax, 1
	mov	DWORD PTR _i$10295[ebp], eax
$LN12@u_shapeAra:
	mov	eax, DWORD PTR _i$10295[ebp]
	cmp	eax, DWORD PTR _destLength$[ebp]
	jge	SHORT $LN10@u_shapeAra
; Line 1696
	mov	eax, DWORD PTR _i$10295[ebp]
	mov	ecx, DWORD PTR _dest$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	sub	edx, 48					; 00000030H
	cmp	edx, 10					; 0000000aH
	jae	SHORT $LN9@u_shapeAra
; Line 1697
	movzx	eax, WORD PTR _digitBase$10294[ebp]
	mov	ecx, DWORD PTR _i$10295[ebp]
	mov	edx, DWORD PTR _dest$[ebp]
	movzx	ecx, WORD PTR [edx+ecx*2]
	add	ecx, eax
	mov	edx, DWORD PTR _i$10295[ebp]
	mov	eax, DWORD PTR _dest$[ebp]
	mov	WORD PTR [eax+edx*2], cx
$LN9@u_shapeAra:
; Line 1699
	jmp	SHORT $LN11@u_shapeAra
$LN10@u_shapeAra:
; Line 1700
	jmp	$LN21@u_shapeAra
$LN8@u_shapeAra:
; Line 1703
	mov	DWORD PTR _i$10295[ebp], 0
	jmp	SHORT $LN7@u_shapeAra
$LN6@u_shapeAra:
	mov	eax, DWORD PTR _i$10295[ebp]
	add	eax, 1
	mov	DWORD PTR _i$10295[ebp], eax
$LN7@u_shapeAra:
	mov	eax, DWORD PTR _i$10295[ebp]
	cmp	eax, DWORD PTR _destLength$[ebp]
	jge	SHORT $LN5@u_shapeAra
; Line 1704
	mov	eax, DWORD PTR _i$10295[ebp]
	mov	ecx, DWORD PTR _dest$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	movzx	eax, WORD PTR _digitBase$10294[ebp]
	sub	edx, eax
	cmp	edx, 10					; 0000000aH
	jae	SHORT $LN4@u_shapeAra
; Line 1705
	movzx	eax, WORD PTR _digitBase$10294[ebp]
	sub	eax, 48					; 00000030H
	mov	ecx, DWORD PTR _i$10295[ebp]
	mov	edx, DWORD PTR _dest$[ebp]
	movzx	ecx, WORD PTR [edx+ecx*2]
	sub	ecx, eax
	mov	edx, DWORD PTR _i$10295[ebp]
	mov	eax, DWORD PTR _dest$[ebp]
	mov	WORD PTR [eax+edx*2], cx
$LN4@u_shapeAra:
; Line 1707
	jmp	SHORT $LN6@u_shapeAra
$LN5@u_shapeAra:
; Line 1708
	jmp	SHORT $LN21@u_shapeAra
$LN3@u_shapeAra:
; Line 1713
	push	0
	mov	eax, DWORD PTR _options$[ebp]
	and	eax, 4
	sete	cl
	movzx	edx, cl
	push	edx
	movzx	eax, WORD PTR _digitBase$10294[ebp]
	push	eax
	mov	ecx, DWORD PTR _destLength$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dest$[ebp]
	push	edx
	call	?_shapeToArabicDigitsWithContext@@YAXPA_WH_WCC@Z ; _shapeToArabicDigitsWithContext
	add	esp, 20					; 00000014H
; Line 1714
	jmp	SHORT $LN21@u_shapeAra
$LN2@u_shapeAra:
; Line 1719
	push	1
	mov	eax, DWORD PTR _options$[ebp]
	and	eax, 4
	sete	cl
	movzx	edx, cl
	push	edx
	movzx	eax, WORD PTR _digitBase$10294[ebp]
	push	eax
	mov	ecx, DWORD PTR _destLength$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dest$[ebp]
	push	edx
	call	?_shapeToArabicDigitsWithContext@@YAXPA_WH_WCC@Z ; _shapeToArabicDigitsWithContext
	add	esp, 20					; 00000014H
$LN21@u_shapeAra:
; Line 1727
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _destLength$[ebp]
	push	ecx
	mov	edx, DWORD PTR _destCapacity$[ebp]
	push	edx
	mov	eax, DWORD PTR _dest$[ebp]
	push	eax
	call	_u_terminateUChars_56
	add	esp, 16					; 00000010H
$LN75@u_shapeAra:
; Line 1728
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN93@u_shapeAra
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 1068				; 0000042cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN93@u_shapeAra:
	DD	4
	DD	$LN92@u_shapeAra
$LN92@u_shapeAra:
	DD	-44					; ffffffd4H
	DD	24					; 00000018H
	DD	$LN88@u_shapeAra
	DD	-652					; fffffd74H
	DD	600					; 00000258H
	DD	$LN89@u_shapeAra
	DD	-700					; fffffd44H
	DD	4
	DD	$LN90@u_shapeAra
	DD	-712					; fffffd38H
	DD	4
	DD	$LN91@u_shapeAra
$LN91@u_shapeAra:
	DB	115					; 00000073H
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	67					; 00000043H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	0
$LN90@u_shapeAra:
	DB	115					; 00000073H
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	67					; 00000043H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	108					; 0000006cH
	DB	0
$LN89@u_shapeAra:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
$LN88@u_shapeAra:
	DB	115					; 00000073H
	DB	104					; 00000068H
	DB	97					; 00000061H
	DB	112					; 00000070H
	DB	101					; 00000065H
	DB	86					; 00000056H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	115					; 00000073H
	DB	0
	npad	1
$LN94@u_shapeAra:
	DD	$LN13@u_shapeAra
	DD	$LN8@u_shapeAra
	DD	$LN3@u_shapeAra
	DD	$LN2@u_shapeAra
	DD	$LN21@u_shapeAra
$LN87@u_shapeAra:
	DB	0
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	1
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	2
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	3
_u_shapeArabic_56 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?U_FAILURE@@YACW4UErrorCode@@@Z
_TEXT	SEGMENT
_code$ = 8						; size = 4
?U_FAILURE@@YACW4UErrorCode@@@Z PROC			; U_FAILURE, COMDAT
; File d:\mozilla\intl\icu\source\common\unicode\utypes.h
; Line 705
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	cmp	DWORD PTR _code$[ebp], 0
	setg	al
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?U_FAILURE@@YACW4UErrorCode@@@Z ENDP			; U_FAILURE
_TEXT	ENDS
EXTRN	_ubidi_getClass_56:PROC
EXTRN	_ubidi_getSingleton_56:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?_shapeToArabicDigitsWithContext@@YAXPA_WH_WCC@Z
_TEXT	SEGMENT
tv131 = -232						; size = 4
tv78 = -232						; size = 4
_c$ = -32						; size = 2
_i$ = -20						; size = 4
_bdp$ = -8						; size = 4
_s$ = 8							; size = 4
_length$ = 12						; size = 4
_digitBase$ = 16					; size = 2
_isLogical$ = 20					; size = 1
_lastStrongWasAL$ = 24					; size = 1
?_shapeToArabicDigitsWithContext@@YAXPA_WH_WCC@Z PROC	; _shapeToArabicDigitsWithContext, COMDAT
; File d:\mozilla\intl\icu\source\common\ushape.cpp
; Line 342
	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 347
	call	_ubidi_getSingleton_56
	mov	DWORD PTR _bdp$[ebp], eax
; Line 348
	movzx	eax, WORD PTR _digitBase$[ebp]
	sub	eax, 48					; 00000030H
	mov	WORD PTR _digitBase$[ebp], ax
; Line 351
	movsx	eax, BYTE PTR _isLogical$[ebp]
	test	eax, eax
	je	$LN21@shapeToAra
; Line 352
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN20@shapeToAra
$LN19@shapeToAra:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN20@shapeToAra:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _length$[ebp]
	jge	SHORT $LN18@shapeToAra
; Line 353
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	dx, WORD PTR [ecx+eax*2]
	mov	WORD PTR _c$[ebp], dx
; Line 354
	movzx	eax, WORD PTR _c$[ebp]
	push	eax
	mov	ecx, DWORD PTR _bdp$[ebp]
	push	ecx
	call	_ubidi_getClass_56
	add	esp, 8
	mov	DWORD PTR tv78[ebp], eax
	cmp	DWORD PTR tv78[ebp], 13			; 0000000dH
	ja	SHORT $LN16@shapeToAra
	mov	edx, DWORD PTR tv78[ebp]
	movzx	eax, BYTE PTR $LN24@shapeToAra[edx]
	jmp	DWORD PTR $LN26@shapeToAra[eax*4]
$LN15@shapeToAra:
; Line 357
	mov	BYTE PTR _lastStrongWasAL$[ebp], 0
; Line 358
	jmp	SHORT $LN16@shapeToAra
$LN14@shapeToAra:
; Line 360
	mov	BYTE PTR _lastStrongWasAL$[ebp], 1
; Line 361
	jmp	SHORT $LN16@shapeToAra
$LN13@shapeToAra:
; Line 363
	movsx	eax, BYTE PTR _lastStrongWasAL$[ebp]
	test	eax, eax
	je	SHORT $LN16@shapeToAra
	movzx	eax, WORD PTR _c$[ebp]
	sub	eax, 48					; 00000030H
	cmp	eax, 10					; 0000000aH
	jae	SHORT $LN16@shapeToAra
; Line 364
	movzx	eax, WORD PTR _digitBase$[ebp]
	movzx	ecx, WORD PTR _c$[ebp]
	add	eax, ecx
	mov	edx, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	WORD PTR [ecx+edx*2], ax
$LN16@shapeToAra:
; Line 370
	jmp	$LN19@shapeToAra
$LN18@shapeToAra:
	jmp	$LN22@shapeToAra
$LN21@shapeToAra:
; Line 372
	mov	eax, DWORD PTR _length$[ebp]
	mov	DWORD PTR _i$[ebp], eax
$LN9@shapeToAra:
	cmp	DWORD PTR _i$[ebp], 0
	jle	$LN22@shapeToAra
; Line 373
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	ax, WORD PTR [edx+ecx*2]
	mov	WORD PTR _c$[ebp], ax
; Line 374
	movzx	eax, WORD PTR _c$[ebp]
	push	eax
	mov	ecx, DWORD PTR _bdp$[ebp]
	push	ecx
	call	_ubidi_getClass_56
	add	esp, 8
	mov	DWORD PTR tv131[ebp], eax
	cmp	DWORD PTR tv131[ebp], 13		; 0000000dH
	ja	SHORT $LN6@shapeToAra
	mov	edx, DWORD PTR tv131[ebp]
	movzx	eax, BYTE PTR $LN25@shapeToAra[edx]
	jmp	DWORD PTR $LN27@shapeToAra[eax*4]
$LN5@shapeToAra:
; Line 377
	mov	BYTE PTR _lastStrongWasAL$[ebp], 0
; Line 378
	jmp	SHORT $LN6@shapeToAra
$LN4@shapeToAra:
; Line 380
	mov	BYTE PTR _lastStrongWasAL$[ebp], 1
; Line 381
	jmp	SHORT $LN6@shapeToAra
$LN3@shapeToAra:
; Line 383
	movsx	eax, BYTE PTR _lastStrongWasAL$[ebp]
	test	eax, eax
	je	SHORT $LN6@shapeToAra
	movzx	eax, WORD PTR _c$[ebp]
	sub	eax, 48					; 00000030H
	cmp	eax, 10					; 0000000aH
	jae	SHORT $LN6@shapeToAra
; Line 384
	movzx	eax, WORD PTR _digitBase$[ebp]
	movzx	ecx, WORD PTR _c$[ebp]
	add	eax, ecx
	mov	edx, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	WORD PTR [ecx+edx*2], ax
$LN6@shapeToAra:
; Line 390
	jmp	$LN9@shapeToAra
$LN22@shapeToAra:
; Line 392
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN26@shapeToAra:
	DD	$LN15@shapeToAra
	DD	$LN13@shapeToAra
	DD	$LN14@shapeToAra
	DD	$LN16@shapeToAra
$LN24@shapeToAra:
	DB	0
	DB	0
	DB	1
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	2
	npad	2
$LN27@shapeToAra:
	DD	$LN5@shapeToAra
	DD	$LN3@shapeToAra
	DD	$LN4@shapeToAra
	DD	$LN6@shapeToAra
$LN25@shapeToAra:
	DB	0
	DB	0
	DB	1
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	2
?_shapeToArabicDigitsWithContext@@YAXPA_WH_WCC@Z ENDP	; _shapeToArabicDigitsWithContext
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?invertBuffer@@YAXPA_WHIHH@Z
_TEXT	SEGMENT
_j$ = -32						; size = 4
_i$ = -20						; size = 4
_temp$ = -8						; size = 2
_buffer$ = 8						; size = 4
_size$ = 12						; size = 4
___formal$ = 16						; size = 4
_lowlimit$ = 20						; size = 4
_highlimit$ = 24					; size = 4
?invertBuffer@@YAXPA_WHIHH@Z PROC			; invertBuffer, COMDAT
; Line 401
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 403
	mov	DWORD PTR _i$[ebp], 0
	mov	DWORD PTR _j$[ebp], 0
; Line 404
	mov	eax, DWORD PTR _lowlimit$[ebp]
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _size$[ebp]
	sub	ecx, DWORD PTR _highlimit$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx
	jmp	SHORT $LN3@invertBuff
$LN2@invertBuff:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _j$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx
$LN3@invertBuff:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _j$[ebp]
	jge	SHORT $LN4@invertBuff
; Line 405
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _buffer$[ebp]
	mov	dx, WORD PTR [ecx+eax*2]
	mov	WORD PTR _temp$[ebp], dx
; Line 406
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _buffer$[ebp]
	mov	edx, DWORD PTR _j$[ebp]
	mov	esi, DWORD PTR _buffer$[ebp]
	mov	dx, WORD PTR [esi+edx*2]
	mov	WORD PTR [ecx+eax*2], dx
; Line 407
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _buffer$[ebp]
	mov	dx, WORD PTR _temp$[ebp]
	mov	WORD PTR [ecx+eax*2], dx
; Line 408
	jmp	SHORT $LN2@invertBuff
$LN4@invertBuff:
; Line 409
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?invertBuffer@@YAXPA_WHIHH@Z ENDP			; invertBuffer
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?getLink@@YA_W_W@Z
_TEXT	SEGMENT
_ch$ = 8						; size = 2
?getLink@@YA_W_W@Z PROC					; getLink, COMDAT
; Line 441
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 442
	movzx	eax, WORD PTR _ch$[ebp]
	cmp	eax, 1570				; 00000622H
	jl	SHORT $LN10@getLink
	movzx	eax, WORD PTR _ch$[ebp]
	cmp	eax, 1747				; 000006d3H
	jg	SHORT $LN10@getLink
; Line 443
	movzx	eax, WORD PTR _ch$[ebp]
	mov	ax, WORD PTR _araLink[eax*2-3140]
	jmp	$LN11@getLink
	jmp	$LN11@getLink
$LN10@getLink:
; Line 444
	movzx	eax, WORD PTR _ch$[ebp]
	cmp	eax, 8205				; 0000200dH
	jne	SHORT $LN8@getLink
; Line 445
	mov	eax, 3
	jmp	SHORT $LN11@getLink
	jmp	SHORT $LN11@getLink
$LN8@getLink:
; Line 446
	movzx	eax, WORD PTR _ch$[ebp]
	cmp	eax, 8301				; 0000206dH
	jl	SHORT $LN6@getLink
	movzx	eax, WORD PTR _ch$[ebp]
	cmp	eax, 8303				; 0000206fH
	jg	SHORT $LN6@getLink
; Line 447
	mov	eax, 4
	jmp	SHORT $LN11@getLink
	jmp	SHORT $LN11@getLink
$LN6@getLink:
; Line 448
	movzx	eax, WORD PTR _ch$[ebp]
	cmp	eax, 64336				; 0000fb50H
	jl	SHORT $LN4@getLink
	movzx	eax, WORD PTR _ch$[ebp]
	cmp	eax, 64610				; 0000fc62H
	jg	SHORT $LN4@getLink
; Line 449
	movzx	eax, WORD PTR _ch$[ebp]
	movzx	ax, BYTE PTR _presALink[eax-64336]
	jmp	SHORT $LN11@getLink
	jmp	SHORT $LN11@getLink
$LN4@getLink:
; Line 450
	movzx	eax, WORD PTR _ch$[ebp]
	cmp	eax, 65136				; 0000fe70H
	jl	SHORT $LN2@getLink
	movzx	eax, WORD PTR _ch$[ebp]
	cmp	eax, 65276				; 0000fefcH
	jg	SHORT $LN2@getLink
; Line 451
	movzx	eax, WORD PTR _ch$[ebp]
	movzx	ax, BYTE PTR _presBLink[eax-65136]
	jmp	SHORT $LN11@getLink
; Line 452
	jmp	SHORT $LN11@getLink
$LN2@getLink:
; Line 453
	xor	eax, eax
$LN11@getLink:
; Line 455
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?getLink@@YA_W_W@Z ENDP					; getLink
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?countSpaces@@YAXPA_WHIPAH1@Z
_TEXT	SEGMENT
_countr$ = -32						; size = 4
_countl$ = -20						; size = 4
_i$ = -8						; size = 4
_dest$ = 8						; size = 4
_size$ = 12						; size = 4
___formal$ = 16						; size = 4
_spacesCountl$ = 20					; size = 4
_spacesCountr$ = 24					; size = 4
?countSpaces@@YAXPA_WHIPAH1@Z PROC			; countSpaces, COMDAT
; Line 463
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 464
	mov	DWORD PTR _i$[ebp], 0
; Line 465
	mov	DWORD PTR _countl$[ebp], 0
	mov	DWORD PTR _countr$[ebp], 0
$LN5@countSpace:
; Line 466
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _dest$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	cmp	edx, 32					; 00000020H
	jne	SHORT $LN4@countSpace
	mov	eax, DWORD PTR _countl$[ebp]
	cmp	eax, DWORD PTR _size$[ebp]
	jge	SHORT $LN4@countSpace
; Line 467
	mov	eax, DWORD PTR _countl$[ebp]
	add	eax, 1
	mov	DWORD PTR _countl$[ebp], eax
; Line 468
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
; Line 469
	jmp	SHORT $LN5@countSpace
$LN4@countSpace:
; Line 470
	mov	eax, DWORD PTR _countl$[ebp]
	cmp	eax, DWORD PTR _size$[ebp]
	jge	SHORT $LN3@countSpace
$LN2@countSpace:
; Line 471
	mov	eax, DWORD PTR _size$[ebp]
	mov	ecx, DWORD PTR _dest$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2-2]
	cmp	edx, 32					; 00000020H
	jne	SHORT $LN3@countSpace
; Line 472
	mov	eax, DWORD PTR _countr$[ebp]
	add	eax, 1
	mov	DWORD PTR _countr$[ebp], eax
; Line 473
	mov	eax, DWORD PTR _size$[ebp]
	sub	eax, 1
	mov	DWORD PTR _size$[ebp], eax
; Line 474
	jmp	SHORT $LN2@countSpace
$LN3@countSpace:
; Line 476
	mov	eax, DWORD PTR _spacesCountl$[ebp]
	mov	ecx, DWORD PTR _countl$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 477
	mov	eax, DWORD PTR _spacesCountr$[ebp]
	mov	ecx, DWORD PTR _countr$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 478
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?countSpaces@@YAXPA_WHIPAH1@Z ENDP			; countSpaces
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?calculateSize@@YAHPB_WHHI@Z
_TEXT	SEGMENT
_tashkeelOption$ = -32					; size = 4
_lamAlefOption$ = -20					; size = 4
_i$ = -8						; size = 4
_source$ = 8						; size = 4
_sourceLength$ = 12					; size = 4
_destSize$ = 16						; size = 4
_options$ = 20						; size = 4
?calculateSize@@YAHPB_WHHI@Z PROC			; calculateSize, COMDAT
; Line 634
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 635
	mov	DWORD PTR _i$[ebp], 0
; Line 637
	mov	DWORD PTR _lamAlefOption$[ebp], 0
; Line 638
	mov	DWORD PTR _tashkeelOption$[ebp], 0
; Line 640
	mov	eax, DWORD PTR _sourceLength$[ebp]
	mov	DWORD PTR _destSize$[ebp], eax
; Line 644
	mov	eax, DWORD PTR _options$[ebp]
	and	eax, 24					; 00000018H
	cmp	eax, 8
	je	SHORT $LN25@calculateS
	mov	eax, DWORD PTR _options$[ebp]
	and	eax, 24					; 00000018H
	cmp	eax, 24					; 00000018H
	jne	SHORT $LN26@calculateS
$LN25@calculateS:
	mov	eax, DWORD PTR _options$[ebp]
	and	eax, 65539				; 00010003H
	jne	SHORT $LN26@calculateS
; Line 645
	mov	DWORD PTR _lamAlefOption$[ebp], 1
$LN26@calculateS:
; Line 648
	mov	eax, DWORD PTR _options$[ebp]
	and	eax, 24					; 00000018H
	cmp	eax, 8
	jne	SHORT $LN24@calculateS
	mov	eax, DWORD PTR _options$[ebp]
	and	eax, 917504				; 000e0000H
	cmp	eax, 524288				; 00080000H
	jne	SHORT $LN24@calculateS
; Line 649
	mov	DWORD PTR _tashkeelOption$[ebp], 1
$LN24@calculateS:
; Line 652
	cmp	DWORD PTR _lamAlefOption$[ebp], 0
	jne	SHORT $LN22@calculateS
	cmp	DWORD PTR _tashkeelOption$[ebp], 0
	je	$LN23@calculateS
$LN22@calculateS:
; Line 653
	mov	eax, DWORD PTR _options$[ebp]
	and	eax, 4
	je	SHORT $LN21@calculateS
; Line 654
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN20@calculateS
$LN19@calculateS:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN20@calculateS:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _sourceLength$[ebp]
	jge	SHORT $LN18@calculateS
; Line 655
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _source$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	push	edx
	call	?isAlefChar@@YAH_W@Z			; isAlefChar
	add	esp, 4
	test	eax, eax
	je	SHORT $LN15@calculateS
	mov	eax, DWORD PTR _sourceLength$[ebp]
	sub	eax, 1
	cmp	DWORD PTR _i$[ebp], eax
	jge	SHORT $LN15@calculateS
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _source$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2+2]
	cmp	edx, 1604				; 00000644H
	je	SHORT $LN16@calculateS
$LN15@calculateS:
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _source$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	push	edx
	call	?isTashkeelCharFE@@YAH_W@Z		; isTashkeelCharFE
	add	esp, 4
	test	eax, eax
	je	SHORT $LN17@calculateS
$LN16@calculateS:
; Line 656
	mov	eax, DWORD PTR _destSize$[ebp]
	sub	eax, 1
	mov	DWORD PTR _destSize$[ebp], eax
$LN17@calculateS:
; Line 658
	jmp	SHORT $LN19@calculateS
$LN18@calculateS:
	jmp	SHORT $LN23@calculateS
$LN21@calculateS:
; Line 659
	mov	eax, DWORD PTR _options$[ebp]
	and	eax, 4
	jne	SHORT $LN23@calculateS
; Line 660
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN12@calculateS
$LN11@calculateS:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN12@calculateS:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _sourceLength$[ebp]
	jge	SHORT $LN23@calculateS
; Line 661
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _source$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	cmp	edx, 1604				; 00000644H
	jne	SHORT $LN7@calculateS
	mov	eax, DWORD PTR _sourceLength$[ebp]
	sub	eax, 1
	cmp	DWORD PTR _i$[ebp], eax
	jge	SHORT $LN7@calculateS
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _source$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2+2]
	push	edx
	call	?isAlefChar@@YAH_W@Z			; isAlefChar
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN8@calculateS
$LN7@calculateS:
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _source$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	push	edx
	call	?isTashkeelCharFE@@YAH_W@Z		; isTashkeelCharFE
	add	esp, 4
	test	eax, eax
	je	SHORT $LN9@calculateS
$LN8@calculateS:
; Line 662
	mov	eax, DWORD PTR _destSize$[ebp]
	sub	eax, 1
	mov	DWORD PTR _destSize$[ebp], eax
$LN9@calculateS:
; Line 664
	jmp	SHORT $LN11@calculateS
$LN23@calculateS:
; Line 668
	mov	eax, DWORD PTR _options$[ebp]
	and	eax, 24					; 00000018H
	cmp	eax, 16					; 00000010H
	jne	SHORT $LN6@calculateS
; Line 669
	mov	eax, DWORD PTR _options$[ebp]
	and	eax, 65539				; 00010003H
	jne	SHORT $LN6@calculateS
; Line 670
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@calculateS
$LN3@calculateS:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@calculateS:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _sourceLength$[ebp]
	jge	SHORT $LN6@calculateS
; Line 671
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _source$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	push	edx
	call	?isLamAlefChar@@YAH_W@Z			; isLamAlefChar
	add	esp, 4
	test	eax, eax
	je	SHORT $LN1@calculateS
; Line 672
	mov	eax, DWORD PTR _destSize$[ebp]
	add	eax, 1
	mov	DWORD PTR _destSize$[ebp], eax
$LN1@calculateS:
; Line 673
	jmp	SHORT $LN3@calculateS
$LN6@calculateS:
; Line 677
	mov	eax, DWORD PTR _destSize$[ebp]
; Line 678
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?calculateSize@@YAHPB_WHHI@Z ENDP			; calculateSize
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?isTashkeelCharFE@@YAH_W@Z
_TEXT	SEGMENT
tv68 = -196						; size = 4
_ch$ = 8						; size = 2
?isTashkeelCharFE@@YAH_W@Z PROC				; isTashkeelCharFE, COMDAT
; Line 494
	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 495
	movzx	eax, WORD PTR _ch$[ebp]
	cmp	eax, 65136				; 0000fe70H
	jl	SHORT $LN3@isTashkeel
	movzx	ecx, WORD PTR _ch$[ebp]
	cmp	ecx, 65151				; 0000fe7fH
	jg	SHORT $LN3@isTashkeel
	mov	DWORD PTR tv68[ebp], 1
	jmp	SHORT $LN4@isTashkeel
$LN3@isTashkeel:
	mov	DWORD PTR tv68[ebp], 0
$LN4@isTashkeel:
	mov	eax, DWORD PTR tv68[ebp]
; Line 496
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?isTashkeelCharFE@@YAH_W@Z ENDP				; isTashkeelCharFE
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?isAlefChar@@YAH_W@Z
_TEXT	SEGMENT
tv72 = -196						; size = 4
_ch$ = 8						; size = 2
?isAlefChar@@YAH_W@Z PROC				; isAlefChar, COMDAT
; Line 503
	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 504
	movzx	eax, WORD PTR _ch$[ebp]
	cmp	eax, 1570				; 00000622H
	je	SHORT $LN3@isAlefChar
	movzx	ecx, WORD PTR _ch$[ebp]
	cmp	ecx, 1571				; 00000623H
	je	SHORT $LN3@isAlefChar
	movzx	edx, WORD PTR _ch$[ebp]
	cmp	edx, 1573				; 00000625H
	je	SHORT $LN3@isAlefChar
	movzx	eax, WORD PTR _ch$[ebp]
	cmp	eax, 1575				; 00000627H
	je	SHORT $LN3@isAlefChar
	mov	DWORD PTR tv72[ebp], 0
	jmp	SHORT $LN4@isAlefChar
$LN3@isAlefChar:
	mov	DWORD PTR tv72[ebp], 1
$LN4@isAlefChar:
	mov	eax, DWORD PTR tv72[ebp]
; Line 505
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?isAlefChar@@YAH_W@Z ENDP				; isAlefChar
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?isLamAlefChar@@YAH_W@Z
_TEXT	SEGMENT
tv68 = -196						; size = 4
_ch$ = 8						; size = 2
?isLamAlefChar@@YAH_W@Z PROC				; isLamAlefChar, COMDAT
; Line 512
	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 513
	movzx	eax, WORD PTR _ch$[ebp]
	cmp	eax, 65269				; 0000fef5H
	jl	SHORT $LN3@isLamAlefC
	movzx	ecx, WORD PTR _ch$[ebp]
	cmp	ecx, 65276				; 0000fefcH
	jg	SHORT $LN3@isLamAlefC
	mov	DWORD PTR tv68[ebp], 1
	jmp	SHORT $LN4@isLamAlefC
$LN3@isLamAlefC:
	mov	DWORD PTR tv68[ebp], 0
$LN4@isLamAlefC:
	mov	eax, DWORD PTR tv68[ebp]
; Line 514
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?isLamAlefChar@@YAH_W@Z ENDP				; isLamAlefChar
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?handleTashkeelWithTatweel@@YAHPA_WHHIPAW4UErrorCode@@@Z
_TEXT	SEGMENT
_i$ = -8						; size = 4
_dest$ = 8						; size = 4
_sourceLength$ = 12					; size = 4
___formal$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 4
?handleTashkeelWithTatweel@@YAHPA_WHHIPAW4UErrorCode@@@Z PROC ; handleTashkeelWithTatweel, COMDAT
; Line 692
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 694
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN8@handleTash
$LN7@handleTash:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN8@handleTash:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _sourceLength$[ebp]
	jge	$LN6@handleTash
; Line 695
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _dest$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	push	edx
	call	?isTashkeelOnTatweelChar@@YAH_W@Z	; isTashkeelOnTatweelChar
	add	esp, 4
	cmp	eax, 1
	jne	SHORT $LN5@handleTash
; Line 696
	mov	eax, 1600				; 00000640H
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _dest$[ebp]
	mov	WORD PTR [edx+ecx*2], ax
	jmp	SHORT $LN4@handleTash
$LN5@handleTash:
; Line 697
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _dest$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	push	edx
	call	?isTashkeelOnTatweelChar@@YAH_W@Z	; isTashkeelOnTatweelChar
	add	esp, 4
	cmp	eax, 2
	jne	SHORT $LN3@handleTash
; Line 698
	mov	eax, 65149				; 0000fe7dH
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _dest$[ebp]
	mov	WORD PTR [edx+ecx*2], ax
	jmp	SHORT $LN4@handleTash
$LN3@handleTash:
; Line 699
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _dest$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	push	edx
	call	?isIsolatedTashkeelChar@@YAH_W@Z	; isIsolatedTashkeelChar
	add	esp, 4
	test	eax, eax
	je	SHORT $LN4@handleTash
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _dest$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	cmp	edx, 65148				; 0000fe7cH
	je	SHORT $LN4@handleTash
; Line 700
	mov	eax, 32					; 00000020H
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _dest$[ebp]
	mov	WORD PTR [edx+ecx*2], ax
$LN4@handleTash:
; Line 702
	jmp	$LN7@handleTash
$LN6@handleTash:
; Line 703
	mov	eax, DWORD PTR _sourceLength$[ebp]
; Line 704
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?handleTashkeelWithTatweel@@YAHPA_WHHIPAW4UErrorCode@@@Z ENDP ; handleTashkeelWithTatweel
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?isTashkeelOnTatweelChar@@YAH_W@Z
_TEXT	SEGMENT
_ch$ = 8						; size = 2
?isTashkeelOnTatweelChar@@YAH_W@Z PROC			; isTashkeelOnTatweelChar, COMDAT
; Line 592
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 593
	movzx	eax, WORD PTR _ch$[ebp]
	cmp	eax, 65136				; 0000fe70H
	jl	SHORT $LN6@isTashkeel@2
	movzx	eax, WORD PTR _ch$[ebp]
	cmp	eax, 65151				; 0000fe7fH
	jg	SHORT $LN6@isTashkeel@2
	movzx	eax, WORD PTR _ch$[ebp]
	cmp	eax, 65139				; 0000fe73H
	je	SHORT $LN6@isTashkeel@2
	movzx	eax, WORD PTR _ch$[ebp]
	cmp	eax, 65141				; 0000fe75H
	je	SHORT $LN6@isTashkeel@2
	movzx	eax, WORD PTR _ch$[ebp]
	cmp	eax, 65149				; 0000fe7dH
	je	SHORT $LN6@isTashkeel@2
; Line 595
	movzx	eax, WORD PTR _ch$[ebp]
	movzx	eax, BYTE PTR _tashkeelMedial[eax-65136]
	jmp	SHORT $LN7@isTashkeel@2
	jmp	SHORT $LN7@isTashkeel@2
$LN6@isTashkeel@2:
; Line 596
	movzx	eax, WORD PTR _ch$[ebp]
	cmp	eax, 64754				; 0000fcf2H
	jl	SHORT $LN2@isTashkeel@2
	movzx	eax, WORD PTR _ch$[ebp]
	cmp	eax, 64756				; 0000fcf4H
	jle	SHORT $LN3@isTashkeel@2
$LN2@isTashkeel@2:
	movzx	eax, WORD PTR _ch$[ebp]
	cmp	eax, 65149				; 0000fe7dH
	jne	SHORT $LN4@isTashkeel@2
$LN3@isTashkeel@2:
; Line 597
	mov	eax, 2
	jmp	SHORT $LN7@isTashkeel@2
; Line 598
	jmp	SHORT $LN7@isTashkeel@2
$LN4@isTashkeel@2:
; Line 599
	xor	eax, eax
$LN7@isTashkeel@2:
; Line 601
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?isTashkeelOnTatweelChar@@YAH_W@Z ENDP			; isTashkeelOnTatweelChar
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?isIsolatedTashkeelChar@@YAH_W@Z
_TEXT	SEGMENT
_ch$ = 8						; size = 2
?isIsolatedTashkeelChar@@YAH_W@Z PROC			; isIsolatedTashkeelChar, COMDAT
; Line 611
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 612
	movzx	eax, WORD PTR _ch$[ebp]
	cmp	eax, 65136				; 0000fe70H
	jl	SHORT $LN4@isIsolated
	movzx	eax, WORD PTR _ch$[ebp]
	cmp	eax, 65151				; 0000fe7fH
	jg	SHORT $LN4@isIsolated
	movzx	eax, WORD PTR _ch$[ebp]
	cmp	eax, 65139				; 0000fe73H
	je	SHORT $LN4@isIsolated
	movzx	eax, WORD PTR _ch$[ebp]
	cmp	eax, 65141				; 0000fe75H
	je	SHORT $LN4@isIsolated
; Line 613
	movzx	eax, WORD PTR _ch$[ebp]
	movzx	ecx, BYTE PTR _tashkeelMedial[eax-65136]
	mov	eax, 1
	sub	eax, ecx
	jmp	SHORT $LN5@isIsolated
	jmp	SHORT $LN5@isIsolated
$LN4@isIsolated:
; Line 614
	movzx	eax, WORD PTR _ch$[ebp]
	cmp	eax, 64606				; 0000fc5eH
	jl	SHORT $LN2@isIsolated
	movzx	eax, WORD PTR _ch$[ebp]
	cmp	eax, 64611				; 0000fc63H
	jg	SHORT $LN2@isIsolated
; Line 615
	mov	eax, 1
	jmp	SHORT $LN5@isIsolated
; Line 616
	jmp	SHORT $LN5@isIsolated
$LN2@isIsolated:
; Line 617
	xor	eax, eax
$LN5@isIsolated:
; Line 619
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?isIsolatedTashkeelChar@@YAH_W@Z ENDP			; isIsolatedTashkeelChar
_TEXT	ENDS
PUBLIC	??_C@_1KO@NAEFDFNP@?$AAd?$AAe?$AAs?$AAt?$AA?$FL?$AAi?$AA?$FN?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AAx?$AA0?$AA6?$AA4?$AAB?$AAu?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAd?$AAe?$AAs?$AAt?$AA?$FL?$AAi?$AA?$FN?$AA?9?$AA0?$AAx@ ; `string'
PUBLIC	??_C@_1FK@PEDOADFO@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@ ; `string'
PUBLIC	?__LINE__Var@?1??shapeUnicode@@YAHPA_WHHIPAW4UErrorCode@@HUuShapeVariables@@@Z@4JA@b604b903 ; `shapeUnicode'::`2'::__LINE__Var
EXTRN	__imp___wassert:PROC
;	COMDAT ??_C@_1KO@NAEFDFNP@?$AAd?$AAe?$AAs?$AAt?$AA?$FL?$AAi?$AA?$FN?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AAx?$AA0?$AA6?$AA4?$AAB?$AAu?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAd?$AAe?$AAs?$AAt?$AA?$FL?$AAi?$AA?$FN?$AA?9?$AA0?$AAx@
CONST	SEGMENT
??_C@_1KO@NAEFDFNP@?$AAd?$AAe?$AAs?$AAt?$AA?$FL?$AAi?$AA?$FN?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AAx?$AA0?$AA6?$AA4?$AAB?$AAu?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAd?$AAe?$AAs?$AAt?$AA?$FL?$AAi?$AA?$FN?$AA?9?$AA0?$AAx@ DB 'd'
	DB	00H, 'e', 00H, 's', 00H, 't', 00H, '[', 00H, 'i', 00H, ']', 00H
	DB	' ', 00H, '>', 00H, '=', 00H, ' ', 00H, '0', 00H, 'x', 00H, '0'
	DB	00H, '6', 00H, '4', 00H, 'B', 00H, 'u', 00H, ' ', 00H, '&', 00H
	DB	'&', 00H, ' ', 00H, 'd', 00H, 'e', 00H, 's', 00H, 't', 00H, '['
	DB	00H, 'i', 00H, ']', 00H, '-', 00H, '0', 00H, 'x', 00H, '0', 00H
	DB	'6', 00H, '4', 00H, 'B', 00H, 'u', 00H, ' ', 00H, '<', 00H, ' '
	DB	00H, 's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, 'o', 00H, 'f', 00H
	DB	'(', 00H, 'I', 00H, 'r', 00H, 'r', 00H, 'e', 00H, 'l', 00H, 'e'
	DB	00H, 'v', 00H, 'a', 00H, 'n', 00H, 't', 00H, 'P', 00H, 'o', 00H
	DB	's', 00H, ')', 00H, '/', 00H, 's', 00H, 'i', 00H, 'z', 00H, 'e'
	DB	00H, 'o', 00H, 'f', 00H, '(', 00H, 'I', 00H, 'r', 00H, 'r', 00H
	DB	'e', 00H, 'l', 00H, 'e', 00H, 'v', 00H, 'a', 00H, 'n', 00H, 't'
	DB	00H, 'P', 00H, 'o', 00H, 's', 00H, '[', 00H, '0', 00H, ']', 00H
	DB	')', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1FK@PEDOADFO@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@
CONST	SEGMENT
??_C@_1FK@PEDOADFO@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@ DB 'd'
	DB	00H, ':', 00H, '\', 00H, 'm', 00H, 'o', 00H, 'z', 00H, 'i', 00H
	DB	'l', 00H, 'l', 00H, 'a', 00H, '\', 00H, 'i', 00H, 'n', 00H, 't'
	DB	00H, 'l', 00H, '\', 00H, 'i', 00H, 'c', 00H, 'u', 00H, '\', 00H
	DB	's', 00H, 'o', 00H, 'u', 00H, 'r', 00H, 'c', 00H, 'e', 00H, '\'
	DB	00H, 'c', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'o', 00H, 'n', 00H
	DB	'\', 00H, 'u', 00H, 's', 00H, 'h', 00H, 'a', 00H, 'p', 00H, 'e'
	DB	00H, '.', 00H, 'c', 00H, 'p', 00H, 'p', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??shapeUnicode@@YAHPA_WHHIPAW4UErrorCode@@HUuShapeVariables@@@Z@4JA@b604b903
_DATA	SEGMENT
?__LINE__Var@?1??shapeUnicode@@YAHPA_WHHIPAW4UErrorCode@@HUuShapeVariables@@@Z@4JA@b604b903 DD 04afH ; `shapeUnicode'::`2'::__LINE__Var
; Function compile flags: /Odtp /RTCsu /ZI
_DATA	ENDS
;	COMDAT ?shapeUnicode@@YAHPA_WHHIPAW4UErrorCode@@HUuShapeVariables@@@Z
_TEXT	SEGMENT
_c$10120 = -212						; size = 2
_inputChar$10118 = -200					; size = 2
_wLamalef$ = -188					; size = 2
_nextLink$ = -176					; size = 2
_currLink$ = -164					; size = 2
_lastLink$ = -152					; size = 2
_prevLink$ = -140					; size = 2
_tashkeelFound$ = -128					; size = 4
_yehhamzaFound$ = -116					; size = 4
_seenfamFound$ = -104					; size = 4
_lamalef_found$ = -92					; size = 4
_Shape$ = -80						; size = 4
_Nw$ = -68						; size = 4
_Nx$ = -56						; size = 4
_lastPos$ = -44						; size = 4
_step$ = -32						; size = 4
_iend$ = -20						; size = 4
_i$ = -8						; size = 4
_dest$ = 8						; size = 4
_sourceLength$ = 12					; size = 4
_destSize$ = 16						; size = 4
_options$ = 20						; size = 4
_pErrorCode$ = 24					; size = 4
_tashkeelFlag$ = 28					; size = 4
_shapeVars$ = 32					; size = 24
?shapeUnicode@@YAHPA_WHHIPAW4UErrorCode@@HUuShapeVariables@@@Z PROC ; shapeUnicode, COMDAT
; Line 1199
	push	ebp
	mov	ebp, esp
	sub	esp, 420				; 000001a4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-420]
	mov	ecx, 105				; 00000069H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1205
	mov	DWORD PTR _lamalef_found$[ebp], 0
; Line 1206
	mov	DWORD PTR _seenfamFound$[ebp], 0
	mov	DWORD PTR _yehhamzaFound$[ebp], 0
	mov	DWORD PTR _tashkeelFound$[ebp], 0
; Line 1207
	xor	eax, eax
	mov	WORD PTR _prevLink$[ebp], ax
	xor	eax, eax
	mov	WORD PTR _lastLink$[ebp], ax
	xor	eax, eax
	mov	WORD PTR _nextLink$[ebp], ax
; Line 1216
	mov	eax, DWORD PTR _options$[ebp]
	and	eax, 32768				; 00008000H
	jne	$LN54@shapeUnico
; Line 1217
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN53@shapeUnico
$LN52@shapeUnico:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN53@shapeUnico:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _sourceLength$[ebp]
	jge	$LN54@shapeUnico
; Line 1218
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _dest$[ebp]
	mov	dx, WORD PTR [ecx+eax*2]
	mov	WORD PTR _inputChar$10118[ebp], dx
; Line 1219
	movzx	eax, WORD PTR _inputChar$10118[ebp]
	cmp	eax, 64336				; 0000fb50H
	jl	SHORT $LN50@shapeUnico
	movzx	eax, WORD PTR _inputChar$10118[ebp]
	cmp	eax, 64511				; 0000fbffH
	jg	SHORT $LN50@shapeUnico
; Line 1220
	movzx	eax, WORD PTR _inputChar$10118[ebp]
	mov	cx, WORD PTR _convertFBto06[eax*2-128672]
	mov	WORD PTR _c$10120[ebp], cx
; Line 1221
	movzx	eax, WORD PTR _c$10120[ebp]
	test	eax, eax
	je	SHORT $LN49@shapeUnico
; Line 1222
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _dest$[ebp]
	mov	dx, WORD PTR _c$10120[ebp]
	mov	WORD PTR [ecx+eax*2], dx
$LN49@shapeUnico:
; Line 1223
	jmp	SHORT $LN48@shapeUnico
$LN50@shapeUnico:
	movzx	eax, WORD PTR _inputChar$10118[ebp]
	cmp	eax, 65136				; 0000fe70H
	jl	SHORT $LN47@shapeUnico
	movzx	eax, WORD PTR _inputChar$10118[ebp]
	cmp	eax, 65276				; 0000fefcH
	jg	SHORT $LN47@shapeUnico
; Line 1224
	movzx	eax, WORD PTR _inputChar$10118[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _dest$[ebp]
	mov	ax, WORD PTR _convertFEto06[eax*2-130272]
	mov	WORD PTR [edx+ecx*2], ax
; Line 1225
	jmp	SHORT $LN48@shapeUnico
$LN47@shapeUnico:
; Line 1226
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _dest$[ebp]
	mov	dx, WORD PTR _inputChar$10118[ebp]
	mov	WORD PTR [ecx+eax*2], dx
$LN48@shapeUnico:
; Line 1228
	jmp	$LN52@shapeUnico
$LN54@shapeUnico:
; Line 1233
	mov	eax, DWORD PTR _sourceLength$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
; Line 1234
	mov	DWORD PTR _iend$[ebp], -1
; Line 1235
	mov	DWORD PTR _step$[ebp], -1
; Line 1242
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _dest$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	push	edx
	call	?getLink@@YA_W_W@Z			; getLink
	add	esp, 4
	mov	WORD PTR _currLink$[ebp], ax
; Line 1244
	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR _lastPos$[ebp], eax
; Line 1245
	mov	DWORD PTR _Nx$[ebp], -2			; fffffffeH
	mov	DWORD PTR _Nw$[ebp], 0
$LN45@shapeUnico:
; Line 1247
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _iend$[ebp]
	je	$LN44@shapeUnico
; Line 1249
	movzx	eax, WORD PTR _currLink$[ebp]
	and	eax, 65280				; 0000ff00H
	jg	SHORT $LN42@shapeUnico
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _dest$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	push	edx
	call	?getLink@@YA_W_W@Z			; getLink
	add	esp, 4
	movzx	eax, ax
	and	eax, 4
	je	$LN43@shapeUnico
$LN42@shapeUnico:
; Line 1250
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, DWORD PTR _step$[ebp]
	mov	DWORD PTR _Nw$[ebp], eax
$LN41@shapeUnico:
; Line 1251
	cmp	DWORD PTR _Nx$[ebp], 0
	jge	SHORT $LN40@shapeUnico
; Line 1252
	mov	eax, DWORD PTR _Nw$[ebp]
	cmp	eax, DWORD PTR _iend$[ebp]
	jne	SHORT $LN39@shapeUnico
; Line 1253
	xor	eax, eax
	mov	WORD PTR _nextLink$[ebp], ax
; Line 1254
	mov	DWORD PTR _Nx$[ebp], 3000		; 00000bb8H
; Line 1255
	jmp	SHORT $LN38@shapeUnico
$LN39@shapeUnico:
; Line 1256
	mov	eax, DWORD PTR _Nw$[ebp]
	mov	ecx, DWORD PTR _dest$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	push	edx
	call	?getLink@@YA_W_W@Z			; getLink
	add	esp, 4
	mov	WORD PTR _nextLink$[ebp], ax
; Line 1257
	movzx	eax, WORD PTR _nextLink$[ebp]
	and	eax, 4
	jne	SHORT $LN37@shapeUnico
; Line 1258
	mov	eax, DWORD PTR _Nw$[ebp]
	mov	DWORD PTR _Nx$[ebp], eax
; Line 1259
	jmp	SHORT $LN38@shapeUnico
$LN37@shapeUnico:
; Line 1260
	mov	eax, DWORD PTR _Nw$[ebp]
	add	eax, DWORD PTR _step$[ebp]
	mov	DWORD PTR _Nw$[ebp], eax
$LN38@shapeUnico:
; Line 1263
	jmp	SHORT $LN41@shapeUnico
$LN40@shapeUnico:
; Line 1265
	movzx	eax, WORD PTR _currLink$[ebp]
	and	eax, 32					; 00000020H
	jle	$LN35@shapeUnico
	movzx	eax, WORD PTR _lastLink$[ebp]
	and	eax, 16					; 00000010H
	jle	SHORT $LN35@shapeUnico
; Line 1266
	mov	DWORD PTR _lamalef_found$[ebp], 1
; Line 1267
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _dest$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	push	edx
	call	?changeLamAlef@@YA_W_W@Z		; changeLamAlef
	add	esp, 4
	mov	WORD PTR _wLamalef$[ebp], ax
; Line 1268
	movzx	eax, WORD PTR _wLamalef$[ebp]
	test	eax, eax
	je	SHORT $LN34@shapeUnico
; Line 1269
	mov	eax, 65535				; 0000ffffH
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _dest$[ebp]
	mov	WORD PTR [edx+ecx*2], ax
; Line 1270
	mov	eax, DWORD PTR _lastPos$[ebp]
	mov	ecx, DWORD PTR _dest$[ebp]
	mov	dx, WORD PTR _wLamalef$[ebp]
	mov	WORD PTR [ecx+eax*2], dx
; Line 1271
	mov	eax, DWORD PTR _lastPos$[ebp]
	mov	DWORD PTR _i$[ebp], eax
$LN34@shapeUnico:
; Line 1273
	mov	ax, WORD PTR _prevLink$[ebp]
	mov	WORD PTR _lastLink$[ebp], ax
; Line 1274
	movzx	eax, WORD PTR _wLamalef$[ebp]
	push	eax
	call	?getLink@@YA_W_W@Z			; getLink
	add	esp, 4
	mov	WORD PTR _currLink$[ebp], ax
$LN35@shapeUnico:
; Line 1277
	cmp	DWORD PTR _i$[ebp], 0
	jle	SHORT $LN33@shapeUnico
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _dest$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2-2]
	cmp	edx, 32					; 00000020H
	jne	SHORT $LN33@shapeUnico
; Line 1278
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _dest$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	push	edx
	call	?isSeenFamilyChar@@YAH_W@Z		; isSeenFamilyChar
	add	esp, 4
	test	eax, eax
	je	SHORT $LN32@shapeUnico
; Line 1279
	mov	DWORD PTR _seenfamFound$[ebp], 1
	jmp	SHORT $LN31@shapeUnico
$LN32@shapeUnico:
; Line 1280
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _dest$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	cmp	edx, 1574				; 00000626H
	jne	SHORT $LN31@shapeUnico
; Line 1281
	mov	DWORD PTR _yehhamzaFound$[ebp], 1
$LN31@shapeUnico:
; Line 1283
	jmp	SHORT $LN29@shapeUnico
$LN33@shapeUnico:
; Line 1284
	cmp	DWORD PTR _i$[ebp], 0
	jne	SHORT $LN29@shapeUnico
; Line 1285
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _dest$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	push	edx
	call	?isSeenFamilyChar@@YAH_W@Z		; isSeenFamilyChar
	add	esp, 4
	test	eax, eax
	je	SHORT $LN27@shapeUnico
; Line 1286
	mov	DWORD PTR _seenfamFound$[ebp], 1
	jmp	SHORT $LN29@shapeUnico
$LN27@shapeUnico:
; Line 1287
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _dest$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	cmp	edx, 1574				; 00000626H
	jne	SHORT $LN29@shapeUnico
; Line 1288
	mov	DWORD PTR _yehhamzaFound$[ebp], 1
$LN29@shapeUnico:
; Line 1299
	movzx	eax, WORD PTR _nextLink$[ebp]
	and	eax, 3
	shl	eax, 4
	movzx	ecx, WORD PTR _lastLink$[ebp]
	and	ecx, 3
	lea	edx, DWORD PTR _shapeTable[eax+ecx*4]
	movzx	eax, WORD PTR _currLink$[ebp]
	and	eax, 3
	movzx	ecx, BYTE PTR [edx+eax]
	mov	DWORD PTR _Shape$[ebp], ecx
; Line 1301
	movzx	eax, WORD PTR _currLink$[ebp]
	and	eax, 3
	cmp	eax, 1
	jne	SHORT $LN24@shapeUnico
; Line 1302
	mov	eax, DWORD PTR _Shape$[ebp]
	and	eax, 1
	mov	DWORD PTR _Shape$[ebp], eax
	jmp	$LN23@shapeUnico
$LN24@shapeUnico:
; Line 1303
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _dest$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	push	edx
	call	?isTashkeelChar@@YAH_W@Z		; isTashkeelChar
	add	esp, 4
	test	eax, eax
	je	$LN23@shapeUnico
; Line 1305
	movzx	eax, WORD PTR _lastLink$[ebp]
	and	eax, 2
	je	SHORT $LN21@shapeUnico
	movzx	eax, WORD PTR _nextLink$[ebp]
	and	eax, 1
	je	SHORT $LN21@shapeUnico
	cmp	DWORD PTR _tashkeelFlag$[ebp], 1
	jne	SHORT $LN21@shapeUnico
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _dest$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	cmp	edx, 1612				; 0000064cH
	je	SHORT $LN21@shapeUnico
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _dest$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	cmp	edx, 1613				; 0000064dH
	je	SHORT $LN21@shapeUnico
; Line 1307
	mov	DWORD PTR _Shape$[ebp], 1
; Line 1308
	movzx	eax, WORD PTR _nextLink$[ebp]
	and	eax, 32					; 00000020H
	je	SHORT $LN20@shapeUnico
	movzx	eax, WORD PTR _lastLink$[ebp]
	and	eax, 16					; 00000010H
	je	SHORT $LN20@shapeUnico
; Line 1309
	mov	DWORD PTR _Shape$[ebp], 0
$LN20@shapeUnico:
; Line 1310
	jmp	SHORT $LN23@shapeUnico
$LN21@shapeUnico:
; Line 1311
	cmp	DWORD PTR _tashkeelFlag$[ebp], 2
	jne	SHORT $LN18@shapeUnico
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _dest$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	cmp	edx, 1617				; 00000651H
	jne	SHORT $LN18@shapeUnico
; Line 1312
	mov	DWORD PTR _Shape$[ebp], 1
; Line 1313
	jmp	SHORT $LN23@shapeUnico
$LN18@shapeUnico:
; Line 1314
	mov	DWORD PTR _Shape$[ebp], 0
$LN23@shapeUnico:
; Line 1317
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _dest$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	xor	edx, 1536				; 00000600H
	cmp	edx, 256				; 00000100H
	jge	$LN43@shapeUnico
; Line 1318
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _dest$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	push	edx
	call	?isTashkeelChar@@YAH_W@Z		; isTashkeelChar
	add	esp, 4
	test	eax, eax
	je	$LN15@shapeUnico
; Line 1319
	cmp	DWORD PTR _tashkeelFlag$[ebp], 2
	jne	SHORT $LN14@shapeUnico
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _dest$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	cmp	edx, 1617				; 00000651H
	je	SHORT $LN14@shapeUnico
; Line 1320
	mov	eax, 65534				; 0000fffeH
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _dest$[ebp]
	mov	WORD PTR [edx+ecx*2], ax
; Line 1321
	mov	DWORD PTR _tashkeelFound$[ebp], 1
; Line 1322
	jmp	SHORT $LN13@shapeUnico
$LN14@shapeUnico:
; Line 1325
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _dest$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	cmp	edx, 1611				; 0000064bH
	jb	SHORT $LN57@shapeUnico
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _dest$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	sub	edx, 1611				; 0000064bH
	cmp	edx, 8
	jb	SHORT $LN58@shapeUnico
$LN57@shapeUnico:
	mov	eax, DWORD PTR ?__LINE__Var@?1??shapeUnicode@@YAHPA_WHHIPAW4UErrorCode@@HUuShapeVariables@@@Z@4JA@b604b903
	add	eax, 126				; 0000007eH
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1FK@PEDOADFO@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@
	push	OFFSET ??_C@_1KO@NAEFDFNP@?$AAd?$AAe?$AAs?$AAt?$AA?$FL?$AAi?$AA?$FN?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AAx?$AA0?$AA6?$AA4?$AAB?$AAu?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAd?$AAe?$AAs?$AAt?$AA?$FL?$AAi?$AA?$FN?$AA?9?$AA0?$AAx@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN58@shapeUnico:
; Line 1326
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _dest$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	movzx	eax, BYTE PTR _IrrelevantPos[edx-1611]
	mov	ecx, DWORD PTR _Shape$[ebp]
	lea	edx, DWORD PTR [eax+ecx+65136]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _dest$[ebp]
	mov	WORD PTR [ecx+eax*2], dx
$LN13@shapeUnico:
; Line 1327
	jmp	SHORT $LN43@shapeUnico
$LN15@shapeUnico:
; Line 1328
	movzx	eax, WORD PTR _currLink$[ebp]
	and	eax, 8
	jle	SHORT $LN11@shapeUnico
; Line 1329
	movzx	eax, WORD PTR _currLink$[ebp]
	sar	eax, 8
	mov	ecx, DWORD PTR _Shape$[ebp]
	lea	edx, DWORD PTR [eax+ecx+64336]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _dest$[ebp]
	mov	WORD PTR [ecx+eax*2], dx
	jmp	SHORT $LN43@shapeUnico
$LN11@shapeUnico:
; Line 1330
	movzx	eax, WORD PTR _currLink$[ebp]
	sar	eax, 8
	test	eax, eax
	jle	SHORT $LN43@shapeUnico
	movzx	eax, WORD PTR _currLink$[ebp]
	and	eax, 4
	jne	SHORT $LN43@shapeUnico
; Line 1331
	movzx	eax, WORD PTR _currLink$[ebp]
	sar	eax, 8
	mov	ecx, DWORD PTR _Shape$[ebp]
	lea	edx, DWORD PTR [eax+ecx+65136]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _dest$[ebp]
	mov	WORD PTR [ecx+eax*2], dx
$LN43@shapeUnico:
; Line 1337
	movzx	eax, WORD PTR _currLink$[ebp]
	and	eax, 4
	jne	SHORT $LN8@shapeUnico
; Line 1338
	mov	ax, WORD PTR _lastLink$[ebp]
	mov	WORD PTR _prevLink$[ebp], ax
; Line 1339
	mov	ax, WORD PTR _currLink$[ebp]
	mov	WORD PTR _lastLink$[ebp], ax
; Line 1340
	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR _lastPos$[ebp], eax
$LN8@shapeUnico:
; Line 1343
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, DWORD PTR _step$[ebp]
	mov	DWORD PTR _i$[ebp], eax
; Line 1344
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _Nx$[ebp]
	jne	SHORT $LN7@shapeUnico
; Line 1345
	mov	ax, WORD PTR _nextLink$[ebp]
	mov	WORD PTR _currLink$[ebp], ax
; Line 1346
	mov	DWORD PTR _Nx$[ebp], -2			; fffffffeH
	jmp	SHORT $LN6@shapeUnico
$LN7@shapeUnico:
; Line 1347
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _iend$[ebp]
	je	SHORT $LN6@shapeUnico
; Line 1348
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _dest$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	push	edx
	call	?getLink@@YA_W_W@Z			; getLink
	add	esp, 4
	mov	WORD PTR _currLink$[ebp], ax
$LN6@shapeUnico:
; Line 1350
	jmp	$LN45@shapeUnico
$LN44@shapeUnico:
; Line 1351
	mov	eax, DWORD PTR _sourceLength$[ebp]
	mov	DWORD PTR _destSize$[ebp], eax
; Line 1352
	cmp	DWORD PTR _lamalef_found$[ebp], 0
	jne	SHORT $LN3@shapeUnico
	cmp	DWORD PTR _tashkeelFound$[ebp], 0
	je	SHORT $LN4@shapeUnico
$LN3@shapeUnico:
; Line 1353
	sub	esp, 24					; 00000018H
	mov	eax, esp
	mov	ecx, DWORD PTR _shapeVars$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _shapeVars$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _shapeVars$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _shapeVars$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	ecx, DWORD PTR _shapeVars$[ebp+16]
	mov	DWORD PTR [eax+16], ecx
	mov	edx, DWORD PTR _shapeVars$[ebp+20]
	mov	DWORD PTR [eax+20], edx
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _options$[ebp]
	push	ecx
	mov	edx, DWORD PTR _destSize$[ebp]
	push	edx
	mov	eax, DWORD PTR _sourceLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dest$[ebp]
	push	ecx
	call	?handleGeneratedSpaces@@YAHPA_WHHIPAW4UErrorCode@@UuShapeVariables@@@Z ; handleGeneratedSpaces
	add	esp, 44					; 0000002cH
	mov	DWORD PTR _destSize$[ebp], eax
$LN4@shapeUnico:
; Line 1356
	cmp	DWORD PTR _seenfamFound$[ebp], 0
	jne	SHORT $LN1@shapeUnico
	cmp	DWORD PTR _yehhamzaFound$[ebp], 0
	je	SHORT $LN2@shapeUnico
$LN1@shapeUnico:
; Line 1357
	sub	esp, 24					; 00000018H
	mov	eax, esp
	mov	ecx, DWORD PTR _shapeVars$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _shapeVars$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _shapeVars$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _shapeVars$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	ecx, DWORD PTR _shapeVars$[ebp+16]
	mov	DWORD PTR [eax+16], ecx
	mov	edx, DWORD PTR _shapeVars$[ebp+20]
	mov	DWORD PTR [eax+20], edx
	push	0
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _options$[ebp]
	push	ecx
	mov	edx, DWORD PTR _destSize$[ebp]
	push	edx
	mov	eax, DWORD PTR _sourceLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dest$[ebp]
	push	ecx
	call	?expandCompositChar@@YAHPA_WHHIPAW4UErrorCode@@HUuShapeVariables@@@Z ; expandCompositChar
	add	esp, 48					; 00000030H
	mov	DWORD PTR _destSize$[ebp], eax
$LN2@shapeUnico:
; Line 1359
	mov	eax, DWORD PTR _destSize$[ebp]
; Line 1360
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN61@shapeUnico
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 420				; 000001a4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN61@shapeUnico:
	DD	1
	DD	$LN60@shapeUnico
$LN60@shapeUnico:
	DD	-224					; ffffff20H
	DD	4
	DD	$LN59@shapeUnico
$LN59@shapeUnico:
	DB	95					; 0000005fH
	DB	36					; 00000024H
	DB	65					; 00000041H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	121					; 00000079H
	DB	80					; 00000050H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	0
?shapeUnicode@@YAHPA_WHHIPAW4UErrorCode@@HUuShapeVariables@@@Z ENDP ; shapeUnicode
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?changeLamAlef@@YA_W_W@Z
_TEXT	SEGMENT
tv65 = -196						; size = 4
_ch$ = 8						; size = 2
?changeLamAlef@@YA_W_W@Z PROC				; changeLamAlef, COMDAT
; Line 420
	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 421
	movzx	eax, WORD PTR _ch$[ebp]
	mov	DWORD PTR tv65[ebp], eax
	mov	ecx, DWORD PTR tv65[ebp]
	sub	ecx, 1570				; 00000622H
	mov	DWORD PTR tv65[ebp], ecx
	cmp	DWORD PTR tv65[ebp], 5
	ja	SHORT $LN5@changeLamA
	mov	edx, DWORD PTR tv65[ebp]
	jmp	DWORD PTR $LN9@changeLamA[edx*4]
$LN4@changeLamA:
; Line 423
	mov	eax, 1628				; 0000065cH
	jmp	SHORT $LN7@changeLamA
$LN3@changeLamA:
; Line 425
	mov	eax, 1629				; 0000065dH
	jmp	SHORT $LN7@changeLamA
$LN2@changeLamA:
; Line 427
	mov	eax, 1630				; 0000065eH
	jmp	SHORT $LN7@changeLamA
$LN1@changeLamA:
; Line 429
	mov	eax, 1631				; 0000065fH
	jmp	SHORT $LN7@changeLamA
$LN5@changeLamA:
; Line 431
	xor	eax, eax
$LN7@changeLamA:
; Line 432
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN9@changeLamA:
	DD	$LN4@changeLamA
	DD	$LN3@changeLamA
	DD	$LN5@changeLamA
	DD	$LN2@changeLamA
	DD	$LN5@changeLamA
	DD	$LN1@changeLamA
?changeLamAlef@@YA_W_W@Z ENDP				; changeLamAlef
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?isTashkeelChar@@YAH_W@Z
_TEXT	SEGMENT
tv68 = -196						; size = 4
_ch$ = 8						; size = 2
?isTashkeelChar@@YAH_W@Z PROC				; isTashkeelChar, COMDAT
; Line 485
	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 486
	movzx	eax, WORD PTR _ch$[ebp]
	cmp	eax, 1611				; 0000064bH
	jl	SHORT $LN3@isTashkeel@3
	movzx	ecx, WORD PTR _ch$[ebp]
	cmp	ecx, 1618				; 00000652H
	jg	SHORT $LN3@isTashkeel@3
	mov	DWORD PTR tv68[ebp], 1
	jmp	SHORT $LN4@isTashkeel@3
$LN3@isTashkeel@3:
	mov	DWORD PTR tv68[ebp], 0
$LN4@isTashkeel@3:
	mov	eax, DWORD PTR tv68[ebp]
; Line 487
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?isTashkeelChar@@YAH_W@Z ENDP				; isTashkeelChar
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?isSeenFamilyChar@@YAH_W@Z
_TEXT	SEGMENT
_ch$ = 8						; size = 2
?isSeenFamilyChar@@YAH_W@Z PROC				; isSeenFamilyChar, COMDAT
; Line 551
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 552
	movzx	eax, WORD PTR _ch$[ebp]
	cmp	eax, 1587				; 00000633H
	jl	SHORT $LN2@isSeenFami
	movzx	eax, WORD PTR _ch$[ebp]
	cmp	eax, 1590				; 00000636H
	jg	SHORT $LN2@isSeenFami
; Line 553
	mov	eax, 1
	jmp	SHORT $LN3@isSeenFami
; Line 554
	jmp	SHORT $LN3@isSeenFami
$LN2@isSeenFami:
; Line 555
	xor	eax, eax
$LN3@isSeenFami:
; Line 557
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?isSeenFamilyChar@@YAH_W@Z ENDP				; isSeenFamilyChar
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?handleGeneratedSpaces@@YAHPA_WHHIPAW4UErrorCode@@UuShapeVariables@@@Z
_TEXT	SEGMENT
_shapingMode$ = -80					; size = 4
_tashkeelOption$ = -68					; size = 4
_lamAlefOption$ = -56					; size = 4
_tempbuffer$ = -44					; size = 4
_count$ = -32						; size = 4
_j$ = -20						; size = 4
_i$ = -8						; size = 4
_dest$ = 8						; size = 4
_sourceLength$ = 12					; size = 4
_destSize$ = 16						; size = 4
_options$ = 20						; size = 4
_pErrorCode$ = 24					; size = 4
_shapeVars$ = 28					; size = 24
?handleGeneratedSpaces@@YAHPA_WHHIPAW4UErrorCode@@UuShapeVariables@@@Z PROC ; handleGeneratedSpaces, COMDAT
; Line 731
	push	ebp
	mov	ebp, esp
	sub	esp, 288				; 00000120H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-288]
	mov	ecx, 72					; 00000048H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 733
	mov	DWORD PTR _i$[ebp], 0
	mov	DWORD PTR _j$[ebp], 0
; Line 734
	mov	DWORD PTR _count$[ebp], 0
; Line 735
	mov	DWORD PTR _tempbuffer$[ebp], 0
; Line 737
	mov	DWORD PTR _lamAlefOption$[ebp], 0
; Line 738
	mov	DWORD PTR _tashkeelOption$[ebp], 0
; Line 739
	mov	DWORD PTR _shapingMode$[ebp], 0
; Line 741
	cmp	DWORD PTR _shapingMode$[ebp], 0
	jne	SHORT $LN50@handleGene
; Line 742
	mov	eax, DWORD PTR _options$[ebp]
	and	eax, 65539				; 00010003H
	jne	SHORT $LN49@handleGene
; Line 743
	mov	DWORD PTR _lamAlefOption$[ebp], 1
$LN49@handleGene:
; Line 745
	mov	eax, DWORD PTR _options$[ebp]
	and	eax, 917504				; 000e0000H
	cmp	eax, 524288				; 00080000H
	jne	SHORT $LN50@handleGene
; Line 746
	mov	DWORD PTR _tashkeelOption$[ebp], 1
$LN50@handleGene:
; Line 750
	mov	eax, DWORD PTR _sourceLength$[ebp]
	lea	ecx, DWORD PTR [eax+eax+2]
	push	ecx
	call	_uprv_malloc_56
	add	esp, 4
	mov	DWORD PTR _tempbuffer$[ebp], eax
; Line 752
	cmp	DWORD PTR _tempbuffer$[ebp], 0
	jne	SHORT $LN47@handleGene
; Line 753
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 7
; Line 754
	xor	eax, eax
	jmp	$LN51@handleGene
$LN47@handleGene:
; Line 758
	cmp	DWORD PTR _lamAlefOption$[ebp], 0
	jne	SHORT $LN45@handleGene
	cmp	DWORD PTR _tashkeelOption$[ebp], 0
	je	$LN46@handleGene
$LN45@handleGene:
; Line 759
	mov	eax, DWORD PTR _sourceLength$[ebp]
	lea	ecx, DWORD PTR [eax+eax+2]
	push	ecx
	push	0
	mov	edx, DWORD PTR _tempbuffer$[ebp]
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH
; Line 761
	mov	DWORD PTR _j$[ebp], 0
	mov	eax, DWORD PTR _j$[ebp]
	mov	DWORD PTR _i$[ebp], eax
	mov	DWORD PTR _count$[ebp], 0
$LN44@handleGene:
; Line 762
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _sourceLength$[ebp]
	jge	SHORT $LN38@handleGene
; Line 764
	cmp	DWORD PTR _lamAlefOption$[ebp], 0
	je	SHORT $LN40@handleGene
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _dest$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	cmp	edx, 65535				; 0000ffffH
	je	SHORT $LN41@handleGene
$LN40@handleGene:
	cmp	DWORD PTR _tashkeelOption$[ebp], 0
	je	SHORT $LN42@handleGene
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _dest$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	cmp	edx, 65534				; 0000fffeH
	jne	SHORT $LN42@handleGene
$LN41@handleGene:
; Line 765
	mov	eax, DWORD PTR _j$[ebp]
	sub	eax, 1
	mov	DWORD PTR _j$[ebp], eax
; Line 766
	mov	eax, DWORD PTR _count$[ebp]
	add	eax, 1
	mov	DWORD PTR _count$[ebp], eax
; Line 767
	jmp	SHORT $LN39@handleGene
$LN42@handleGene:
; Line 768
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _tempbuffer$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _dest$[ebp]
	mov	dx, WORD PTR [esi+edx*2]
	mov	WORD PTR [ecx+eax*2], dx
$LN39@handleGene:
; Line 770
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
; Line 771
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
; Line 772
	jmp	SHORT $LN44@handleGene
$LN38@handleGene:
; Line 774
	cmp	DWORD PTR _count$[ebp], 0
	jl	SHORT $LN37@handleGene
; Line 775
	xor	eax, eax
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _tempbuffer$[ebp]
	mov	WORD PTR [edx+ecx*2], ax
; Line 776
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
; Line 777
	mov	eax, DWORD PTR _count$[ebp]
	sub	eax, 1
	mov	DWORD PTR _count$[ebp], eax
; Line 778
	jmp	SHORT $LN38@handleGene
$LN37@handleGene:
; Line 780
	push	1
	mov	eax, DWORD PTR _tempbuffer$[ebp]
	push	eax
	call	_uprv_checkValidMemory
	add	esp, 8
	mov	ecx, DWORD PTR _sourceLength$[ebp]
	shl	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _tempbuffer$[ebp]
	push	edx
	mov	eax, DWORD PTR _dest$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 781
	mov	eax, DWORD PTR _dest$[ebp]
	push	eax
	call	_u_strlen_56
	add	esp, 4
	mov	DWORD PTR _destSize$[ebp], eax
$LN46@handleGene:
; Line 784
	mov	DWORD PTR _lamAlefOption$[ebp], 0
; Line 786
	cmp	DWORD PTR _shapingMode$[ebp], 0
	jne	SHORT $LN36@handleGene
; Line 787
	mov	eax, DWORD PTR _options$[ebp]
	and	eax, 65539				; 00010003H
	cmp	eax, 1
	jne	SHORT $LN36@handleGene
; Line 788
	mov	DWORD PTR _lamAlefOption$[ebp], 1
$LN36@handleGene:
; Line 792
	cmp	DWORD PTR _lamAlefOption$[ebp], 0
	je	SHORT $LN34@handleGene
; Line 794
	mov	DWORD PTR _i$[ebp], 0
$LN33@handleGene:
; Line 795
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _sourceLength$[ebp]
	jge	SHORT $LN32@handleGene
; Line 796
	cmp	DWORD PTR _lamAlefOption$[ebp], 0
	je	SHORT $LN31@handleGene
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _dest$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	cmp	edx, 65535				; 0000ffffH
	jne	SHORT $LN31@handleGene
; Line 797
	mov	eax, 32					; 00000020H
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _dest$[ebp]
	mov	WORD PTR [edx+ecx*2], ax
$LN31@handleGene:
; Line 799
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
; Line 800
	jmp	SHORT $LN33@handleGene
$LN32@handleGene:
; Line 801
	mov	eax, DWORD PTR _sourceLength$[ebp]
	mov	DWORD PTR _destSize$[ebp], eax
$LN34@handleGene:
; Line 803
	mov	DWORD PTR _lamAlefOption$[ebp], 0
; Line 804
	mov	DWORD PTR _tashkeelOption$[ebp], 0
; Line 806
	cmp	DWORD PTR _shapingMode$[ebp], 0
	jne	SHORT $LN30@handleGene
; Line 809
	mov	eax, DWORD PTR _options$[ebp]
	and	eax, 65539				; 00010003H
	cmp	eax, DWORD PTR _shapeVars$[ebp+4]
	je	SHORT $LN28@handleGene
	mov	eax, DWORD PTR _options$[ebp]
	and	eax, 65539				; 00010003H
	cmp	eax, 65536				; 00010000H
	jne	SHORT $LN29@handleGene
	cmp	DWORD PTR _shapeVars$[ebp+20], 1
	jne	SHORT $LN29@handleGene
$LN28@handleGene:
; Line 810
	mov	DWORD PTR _lamAlefOption$[ebp], 1
$LN29@handleGene:
; Line 812
	mov	eax, DWORD PTR _options$[ebp]
	and	eax, 917504				; 000e0000H
	cmp	eax, DWORD PTR _shapeVars$[ebp+12]
	jne	SHORT $LN30@handleGene
; Line 813
	mov	DWORD PTR _tashkeelOption$[ebp], 1
$LN30@handleGene:
; Line 817
	cmp	DWORD PTR _lamAlefOption$[ebp], 0
	jne	SHORT $LN25@handleGene
	cmp	DWORD PTR _tashkeelOption$[ebp], 0
	je	$LN26@handleGene
$LN25@handleGene:
; Line 818
	mov	eax, DWORD PTR _sourceLength$[ebp]
	lea	ecx, DWORD PTR [eax+eax+2]
	push	ecx
	push	0
	mov	edx, DWORD PTR _tempbuffer$[ebp]
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH
; Line 820
	mov	eax, DWORD PTR _sourceLength$[ebp]
	mov	DWORD PTR _j$[ebp], eax
	mov	ecx, DWORD PTR _j$[ebp]
	mov	DWORD PTR _i$[ebp], ecx
	mov	DWORD PTR _count$[ebp], 0
$LN24@handleGene:
; Line 822
	cmp	DWORD PTR _i$[ebp], 0
	jl	SHORT $LN23@handleGene
; Line 824
	cmp	DWORD PTR _lamAlefOption$[ebp], 0
	je	SHORT $LN20@handleGene
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _dest$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	cmp	edx, 65535				; 0000ffffH
	je	SHORT $LN21@handleGene
$LN20@handleGene:
	cmp	DWORD PTR _tashkeelOption$[ebp], 0
	je	SHORT $LN22@handleGene
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _dest$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	cmp	edx, 65534				; 0000fffeH
	jne	SHORT $LN22@handleGene
$LN21@handleGene:
; Line 825
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
; Line 826
	mov	eax, DWORD PTR _count$[ebp]
	add	eax, 1
	mov	DWORD PTR _count$[ebp], eax
; Line 827
	jmp	SHORT $LN19@handleGene
$LN22@handleGene:
; Line 828
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _tempbuffer$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _dest$[ebp]
	mov	dx, WORD PTR [esi+edx*2]
	mov	WORD PTR [ecx+eax*2], dx
$LN19@handleGene:
; Line 830
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
; Line 831
	mov	eax, DWORD PTR _j$[ebp]
	sub	eax, 1
	mov	DWORD PTR _j$[ebp], eax
; Line 832
	jmp	SHORT $LN24@handleGene
$LN23@handleGene:
; Line 834
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN18@handleGene
$LN17@handleGene:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN18@handleGene:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _count$[ebp]
	jge	SHORT $LN16@handleGene
; Line 835
	mov	eax, 32					; 00000020H
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _tempbuffer$[ebp]
	mov	WORD PTR [edx+ecx*2], ax
; Line 836
	jmp	SHORT $LN17@handleGene
$LN16@handleGene:
; Line 838
	push	1
	mov	eax, DWORD PTR _tempbuffer$[ebp]
	push	eax
	call	_uprv_checkValidMemory
	add	esp, 8
	mov	ecx, DWORD PTR _sourceLength$[ebp]
	shl	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _tempbuffer$[ebp]
	push	edx
	mov	eax, DWORD PTR _dest$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 839
	mov	eax, DWORD PTR _sourceLength$[ebp]
	mov	DWORD PTR _destSize$[ebp], eax
$LN26@handleGene:
; Line 844
	mov	DWORD PTR _lamAlefOption$[ebp], 0
; Line 845
	mov	DWORD PTR _tashkeelOption$[ebp], 0
; Line 847
	cmp	DWORD PTR _shapingMode$[ebp], 0
	jne	SHORT $LN15@handleGene
; Line 850
	mov	eax, DWORD PTR _options$[ebp]
	and	eax, 65539				; 00010003H
	cmp	eax, DWORD PTR _shapeVars$[ebp+8]
	je	SHORT $LN13@handleGene
	mov	eax, DWORD PTR _options$[ebp]
	and	eax, 65539				; 00010003H
	cmp	eax, 65536				; 00010000H
	jne	SHORT $LN14@handleGene
	cmp	DWORD PTR _shapeVars$[ebp+20], 0
	jne	SHORT $LN14@handleGene
$LN13@handleGene:
; Line 851
	mov	DWORD PTR _lamAlefOption$[ebp], 1
$LN14@handleGene:
; Line 853
	mov	eax, DWORD PTR _options$[ebp]
	and	eax, 917504				; 000e0000H
	cmp	eax, DWORD PTR _shapeVars$[ebp+16]
	jne	SHORT $LN15@handleGene
; Line 854
	mov	DWORD PTR _tashkeelOption$[ebp], 1
$LN15@handleGene:
; Line 858
	cmp	DWORD PTR _lamAlefOption$[ebp], 0
	jne	SHORT $LN10@handleGene
	cmp	DWORD PTR _tashkeelOption$[ebp], 0
	je	$LN11@handleGene
$LN10@handleGene:
; Line 859
	mov	eax, DWORD PTR _sourceLength$[ebp]
	lea	ecx, DWORD PTR [eax+eax+2]
	push	ecx
	push	0
	mov	edx, DWORD PTR _tempbuffer$[ebp]
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH
; Line 861
	mov	DWORD PTR _j$[ebp], 0
	mov	eax, DWORD PTR _j$[ebp]
	mov	DWORD PTR _i$[ebp], eax
	mov	DWORD PTR _count$[ebp], 0
$LN9@handleGene:
; Line 862
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _sourceLength$[ebp]
	jge	SHORT $LN3@handleGene
; Line 864
	cmp	DWORD PTR _lamAlefOption$[ebp], 0
	je	SHORT $LN5@handleGene
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _dest$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	cmp	edx, 65535				; 0000ffffH
	je	SHORT $LN6@handleGene
$LN5@handleGene:
	cmp	DWORD PTR _tashkeelOption$[ebp], 0
	je	SHORT $LN7@handleGene
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _dest$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	cmp	edx, 65534				; 0000fffeH
	jne	SHORT $LN7@handleGene
$LN6@handleGene:
; Line 865
	mov	eax, DWORD PTR _j$[ebp]
	sub	eax, 1
	mov	DWORD PTR _j$[ebp], eax
; Line 866
	mov	eax, DWORD PTR _count$[ebp]
	add	eax, 1
	mov	DWORD PTR _count$[ebp], eax
; Line 867
	jmp	SHORT $LN4@handleGene
$LN7@handleGene:
; Line 868
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _tempbuffer$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _dest$[ebp]
	mov	dx, WORD PTR [esi+edx*2]
	mov	WORD PTR [ecx+eax*2], dx
$LN4@handleGene:
; Line 870
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
; Line 871
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
; Line 872
	jmp	SHORT $LN9@handleGene
$LN3@handleGene:
; Line 874
	cmp	DWORD PTR _count$[ebp], 0
	jl	SHORT $LN2@handleGene
; Line 875
	mov	eax, 32					; 00000020H
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _tempbuffer$[ebp]
	mov	WORD PTR [edx+ecx*2], ax
; Line 876
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
; Line 877
	mov	eax, DWORD PTR _count$[ebp]
	sub	eax, 1
	mov	DWORD PTR _count$[ebp], eax
; Line 878
	jmp	SHORT $LN3@handleGene
$LN2@handleGene:
; Line 880
	push	1
	mov	eax, DWORD PTR _tempbuffer$[ebp]
	push	eax
	call	_uprv_checkValidMemory
	add	esp, 8
	mov	ecx, DWORD PTR _sourceLength$[ebp]
	shl	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _tempbuffer$[ebp]
	push	edx
	mov	eax, DWORD PTR _dest$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 881
	mov	eax, DWORD PTR _sourceLength$[ebp]
	mov	DWORD PTR _destSize$[ebp], eax
$LN11@handleGene:
; Line 885
	cmp	DWORD PTR _tempbuffer$[ebp], 0
	je	SHORT $LN1@handleGene
; Line 886
	mov	eax, DWORD PTR _tempbuffer$[ebp]
	push	eax
	call	_uprv_free_56
	add	esp, 4
$LN1@handleGene:
; Line 889
	mov	eax, DWORD PTR _destSize$[ebp]
$LN51@handleGene:
; Line 890
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN55@handleGene
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 288				; 00000120H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN55@handleGene:
	DD	1
	DD	$LN54@handleGene
$LN54@handleGene:
	DD	-92					; ffffffa4H
	DD	4
	DD	$LN53@handleGene
$LN53@handleGene:
	DB	95					; 0000005fH
	DB	36					; 00000024H
	DB	65					; 00000041H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	121					; 00000079H
	DB	80					; 00000050H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	0
?handleGeneratedSpaces@@YAHPA_WHHIPAW4UErrorCode@@UuShapeVariables@@@Z ENDP ; handleGeneratedSpaces
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?expandCompositChar@@YAHPA_WHHIPAW4UErrorCode@@HUuShapeVariables@@@Z
_TEXT	SEGMENT
_lamAlefOption$ = -68					; size = 4
_seenTailOption$ = -56					; size = 4
_yehHamzaOption$ = -44					; size = 4
_tempbuffer$ = -32					; size = 4
_j$ = -20						; size = 4
_i$ = -8						; size = 4
_dest$ = 8						; size = 4
_sourceLength$ = 12					; size = 4
_destSize$ = 16						; size = 4
_options$ = 20						; size = 4
_pErrorCode$ = 24					; size = 4
_shapingMode$ = 28					; size = 4
_shapeVars$ = 32					; size = 24
?expandCompositChar@@YAHPA_WHHIPAW4UErrorCode@@HUuShapeVariables@@@Z PROC ; expandCompositChar, COMDAT
; Line 1085
	push	ebp
	mov	ebp, esp
	sub	esp, 276				; 00000114H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-276]
	mov	ecx, 69					; 00000045H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1087
	mov	DWORD PTR _i$[ebp], 0
	mov	DWORD PTR _j$[ebp], 0
; Line 1089
	mov	DWORD PTR _tempbuffer$[ebp], 0
; Line 1090
	mov	DWORD PTR _yehHamzaOption$[ebp], 0
; Line 1091
	mov	DWORD PTR _seenTailOption$[ebp], 0
; Line 1092
	mov	DWORD PTR _lamAlefOption$[ebp], 0
; Line 1094
	cmp	DWORD PTR _shapingMode$[ebp], 1
	jne	$LN26@expandComp
; Line 1095
	mov	eax, DWORD PTR _options$[ebp]
	and	eax, 65539				; 00010003H
	cmp	eax, 65536				; 00010000H
	jne	$LN26@expandComp
; Line 1097
	cmp	DWORD PTR _shapeVars$[ebp+20], 0
	jne	SHORT $LN24@expandComp
; Line 1098
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _destSize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _sourceLength$[ebp]
	push	edx
	mov	eax, DWORD PTR _dest$[ebp]
	push	eax
	call	?expandCompositCharAtEnd@@YAHPA_WHHPAW4UErrorCode@@@Z ; expandCompositCharAtEnd
	add	esp, 16					; 00000010H
	mov	DWORD PTR _destSize$[ebp], eax
; Line 1100
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	cmp	DWORD PTR [eax], 20			; 00000014H
	jne	SHORT $LN23@expandComp
; Line 1101
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 0
; Line 1102
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _destSize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _sourceLength$[ebp]
	push	edx
	mov	eax, DWORD PTR _dest$[ebp]
	push	eax
	call	?expandCompositCharAtBegin@@YAHPA_WHHPAW4UErrorCode@@@Z ; expandCompositCharAtBegin
	add	esp, 16					; 00000010H
	mov	DWORD PTR _destSize$[ebp], eax
$LN23@expandComp:
; Line 1104
	jmp	SHORT $LN22@expandComp
$LN24@expandComp:
; Line 1105
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _destSize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _sourceLength$[ebp]
	push	edx
	mov	eax, DWORD PTR _dest$[ebp]
	push	eax
	call	?expandCompositCharAtBegin@@YAHPA_WHHPAW4UErrorCode@@@Z ; expandCompositCharAtBegin
	add	esp, 16					; 00000010H
	mov	DWORD PTR _destSize$[ebp], eax
; Line 1107
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	cmp	DWORD PTR [eax], 20			; 00000014H
	jne	SHORT $LN22@expandComp
; Line 1108
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 0
; Line 1109
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _destSize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _sourceLength$[ebp]
	push	edx
	mov	eax, DWORD PTR _dest$[ebp]
	push	eax
	call	?expandCompositCharAtEnd@@YAHPA_WHHPAW4UErrorCode@@@Z ; expandCompositCharAtEnd
	add	esp, 16					; 00000010H
	mov	DWORD PTR _destSize$[ebp], eax
$LN22@expandComp:
; Line 1113
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	cmp	DWORD PTR [eax], 20			; 00000014H
	jne	SHORT $LN26@expandComp
; Line 1114
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 0
; Line 1116
	sub	esp, 24					; 00000018H
	mov	eax, esp
	mov	ecx, DWORD PTR _shapeVars$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _shapeVars$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _shapeVars$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _shapeVars$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	ecx, DWORD PTR _shapeVars$[ebp+16]
	mov	DWORD PTR [eax+16], ecx
	mov	edx, DWORD PTR _shapeVars$[ebp+20]
	mov	DWORD PTR [eax+20], edx
	push	1
	mov	eax, DWORD PTR _seenTailOption$[ebp]
	push	eax
	mov	ecx, DWORD PTR _yehHamzaOption$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pErrorCode$[ebp]
	push	edx
	mov	eax, DWORD PTR _destSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sourceLength$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dest$[ebp]
	push	edx
	call	?expandCompositCharAtNear@@YAHPA_WHHPAW4UErrorCode@@HHHUuShapeVariables@@@Z ; expandCompositCharAtNear
	add	esp, 52					; 00000034H
	mov	DWORD PTR _destSize$[ebp], eax
$LN26@expandComp:
; Line 1121
	cmp	DWORD PTR _shapingMode$[ebp], 1
	jne	SHORT $LN19@expandComp
; Line 1122
	mov	eax, DWORD PTR _options$[ebp]
	and	eax, 65539				; 00010003H
	cmp	eax, DWORD PTR _shapeVars$[ebp+8]
	jne	SHORT $LN19@expandComp
; Line 1123
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _destSize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _sourceLength$[ebp]
	push	edx
	mov	eax, DWORD PTR _dest$[ebp]
	push	eax
	call	?expandCompositCharAtEnd@@YAHPA_WHHPAW4UErrorCode@@@Z ; expandCompositCharAtEnd
	add	esp, 16					; 00000010H
	mov	DWORD PTR _destSize$[ebp], eax
$LN19@expandComp:
; Line 1127
	cmp	DWORD PTR _shapingMode$[ebp], 1
	jne	SHORT $LN17@expandComp
; Line 1128
	mov	eax, DWORD PTR _options$[ebp]
	and	eax, 65539				; 00010003H
	cmp	eax, DWORD PTR _shapeVars$[ebp+4]
	jne	SHORT $LN17@expandComp
; Line 1129
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _destSize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _sourceLength$[ebp]
	push	edx
	mov	eax, DWORD PTR _dest$[ebp]
	push	eax
	call	?expandCompositCharAtBegin@@YAHPA_WHHPAW4UErrorCode@@@Z ; expandCompositCharAtBegin
	add	esp, 16					; 00000010H
	mov	DWORD PTR _destSize$[ebp], eax
$LN17@expandComp:
; Line 1133
	cmp	DWORD PTR _shapingMode$[ebp], 0
	jne	SHORT $LN15@expandComp
; Line 1134
	mov	eax, DWORD PTR _options$[ebp]
	and	eax, 58720256				; 03800000H
	cmp	eax, 16777216				; 01000000H
	jne	SHORT $LN14@expandComp
; Line 1135
	mov	DWORD PTR _yehHamzaOption$[ebp], 1
$LN14@expandComp:
; Line 1137
	mov	eax, DWORD PTR _options$[ebp]
	and	eax, 7340032				; 00700000H
	cmp	eax, 2097152				; 00200000H
	jne	SHORT $LN15@expandComp
; Line 1138
	mov	DWORD PTR _seenTailOption$[ebp], 1
$LN15@expandComp:
; Line 1141
	cmp	DWORD PTR _shapingMode$[ebp], 1
	jne	SHORT $LN12@expandComp
; Line 1142
	mov	eax, DWORD PTR _options$[ebp]
	and	eax, 65539				; 00010003H
	cmp	eax, 1
	jne	SHORT $LN12@expandComp
; Line 1143
	mov	DWORD PTR _lamAlefOption$[ebp], 1
$LN12@expandComp:
; Line 1148
	cmp	DWORD PTR _yehHamzaOption$[ebp], 0
	jne	SHORT $LN9@expandComp
	cmp	DWORD PTR _seenTailOption$[ebp], 0
	jne	SHORT $LN9@expandComp
	cmp	DWORD PTR _lamAlefOption$[ebp], 0
	je	SHORT $LN10@expandComp
$LN9@expandComp:
; Line 1150
	sub	esp, 24					; 00000018H
	mov	eax, esp
	mov	ecx, DWORD PTR _shapeVars$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _shapeVars$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _shapeVars$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _shapeVars$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	ecx, DWORD PTR _shapeVars$[ebp+16]
	mov	DWORD PTR [eax+16], ecx
	mov	edx, DWORD PTR _shapeVars$[ebp+20]
	mov	DWORD PTR [eax+20], edx
	mov	eax, DWORD PTR _lamAlefOption$[ebp]
	push	eax
	mov	ecx, DWORD PTR _seenTailOption$[ebp]
	push	ecx
	mov	edx, DWORD PTR _yehHamzaOption$[ebp]
	push	edx
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _destSize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _sourceLength$[ebp]
	push	edx
	mov	eax, DWORD PTR _dest$[ebp]
	push	eax
	call	?expandCompositCharAtNear@@YAHPA_WHHPAW4UErrorCode@@HHHUuShapeVariables@@@Z ; expandCompositCharAtNear
	add	esp, 52					; 00000034H
	mov	DWORD PTR _destSize$[ebp], eax
$LN10@expandComp:
; Line 1154
	cmp	DWORD PTR _shapingMode$[ebp], 1
	jne	$LN8@expandComp
; Line 1155
	mov	eax, DWORD PTR _options$[ebp]
	and	eax, 65539				; 00010003H
	jne	$LN8@expandComp
; Line 1156
	mov	eax, DWORD PTR _options$[ebp]
	push	eax
	mov	ecx, DWORD PTR _destSize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _sourceLength$[ebp]
	push	edx
	mov	eax, DWORD PTR _dest$[ebp]
	push	eax
	call	?calculateSize@@YAHPB_WHHI@Z		; calculateSize
	add	esp, 16					; 00000010H
	mov	DWORD PTR _destSize$[ebp], eax
; Line 1157
	mov	eax, DWORD PTR _destSize$[ebp]
	lea	ecx, DWORD PTR [eax+eax+2]
	push	ecx
	call	_uprv_malloc_56
	add	esp, 4
	mov	DWORD PTR _tempbuffer$[ebp], eax
; Line 1160
	cmp	DWORD PTR _tempbuffer$[ebp], 0
	jne	SHORT $LN6@expandComp
; Line 1161
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 7
; Line 1162
	xor	eax, eax
	jmp	$LN27@expandComp
$LN6@expandComp:
; Line 1165
	mov	eax, DWORD PTR _destSize$[ebp]
	lea	ecx, DWORD PTR [eax+eax+2]
	push	ecx
	push	0
	mov	edx, DWORD PTR _tempbuffer$[ebp]
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH
; Line 1167
	mov	DWORD PTR _j$[ebp], 0
	mov	eax, DWORD PTR _j$[ebp]
	mov	DWORD PTR _i$[ebp], eax
$LN5@expandComp:
; Line 1168
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _destSize$[ebp]
	jge	$LN4@expandComp
	mov	eax, DWORD PTR _j$[ebp]
	cmp	eax, DWORD PTR _destSize$[ebp]
	jge	SHORT $LN4@expandComp
; Line 1169
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _dest$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	push	edx
	call	?isLamAlefChar@@YAH_W@Z			; isLamAlefChar
	add	esp, 4
	test	eax, eax
	je	SHORT $LN3@expandComp
; Line 1170
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _dest$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _tempbuffer$[ebp]
	mov	dx, WORD PTR _convertLamAlef[edx*2-130538]
	mov	WORD PTR [ecx+eax*2], dx
; Line 1171
	mov	eax, 1604				; 00000644H
	mov	ecx, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR _tempbuffer$[ebp]
	mov	WORD PTR [edx+ecx*2+2], ax
; Line 1172
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
; Line 1173
	jmp	SHORT $LN2@expandComp
$LN3@expandComp:
; Line 1174
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _tempbuffer$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _dest$[ebp]
	mov	dx, WORD PTR [esi+edx*2]
	mov	WORD PTR [ecx+eax*2], dx
$LN2@expandComp:
; Line 1176
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
; Line 1177
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
; Line 1178
	jmp	$LN5@expandComp
$LN4@expandComp:
; Line 1180
	push	1
	mov	eax, DWORD PTR _tempbuffer$[ebp]
	push	eax
	call	_uprv_checkValidMemory
	add	esp, 8
	mov	ecx, DWORD PTR _destSize$[ebp]
	shl	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _tempbuffer$[ebp]
	push	edx
	mov	eax, DWORD PTR _dest$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN8@expandComp:
; Line 1184
	cmp	DWORD PTR _tempbuffer$[ebp], 0
	je	SHORT $LN1@expandComp
; Line 1185
	mov	eax, DWORD PTR _tempbuffer$[ebp]
	push	eax
	call	_uprv_free_56
	add	esp, 4
$LN1@expandComp:
; Line 1187
	mov	eax, DWORD PTR _destSize$[ebp]
$LN27@expandComp:
; Line 1188
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN31@expandComp
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 276				; 00000114H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN31@expandComp:
	DD	1
	DD	$LN30@expandComp
$LN30@expandComp:
	DD	-80					; ffffffb0H
	DD	4
	DD	$LN29@expandComp
$LN29@expandComp:
	DB	95					; 0000005fH
	DB	36					; 00000024H
	DB	65					; 00000041H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	121					; 00000079H
	DB	80					; 00000050H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	0
?expandCompositChar@@YAHPA_WHHIPAW4UErrorCode@@HUuShapeVariables@@@Z ENDP ; expandCompositChar
_TEXT	ENDS
PUBLIC	??_C@_1LC@CBAJJOIB@?$AAd?$AAe?$AAs?$AAt?$AA?$FL?$AAi?$AA?$FN?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AAx?$AAF?$AAE?$AAF?$AA5?$AAu?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAd?$AAe?$AAs?$AAt?$AA?$FL?$AAi?$AA?$FN?$AA?9?$AA0?$AAx@ ; `string'
PUBLIC	?__LINE__Var@?1??expandCompositCharAtBegin@@YAHPA_WHHPAW4UErrorCode@@@Z@4JA@b604b903 ; `expandCompositCharAtBegin'::`2'::__LINE__Var
;	COMDAT ??_C@_1LC@CBAJJOIB@?$AAd?$AAe?$AAs?$AAt?$AA?$FL?$AAi?$AA?$FN?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AAx?$AAF?$AAE?$AAF?$AA5?$AAu?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAd?$AAe?$AAs?$AAt?$AA?$FL?$AAi?$AA?$FN?$AA?9?$AA0?$AAx@
CONST	SEGMENT
??_C@_1LC@CBAJJOIB@?$AAd?$AAe?$AAs?$AAt?$AA?$FL?$AAi?$AA?$FN?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AAx?$AAF?$AAE?$AAF?$AA5?$AAu?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAd?$AAe?$AAs?$AAt?$AA?$FL?$AAi?$AA?$FN?$AA?9?$AA0?$AAx@ DB 'd'
	DB	00H, 'e', 00H, 's', 00H, 't', 00H, '[', 00H, 'i', 00H, ']', 00H
	DB	' ', 00H, '>', 00H, '=', 00H, ' ', 00H, '0', 00H, 'x', 00H, 'F'
	DB	00H, 'E', 00H, 'F', 00H, '5', 00H, 'u', 00H, ' ', 00H, '&', 00H
	DB	'&', 00H, ' ', 00H, 'd', 00H, 'e', 00H, 's', 00H, 't', 00H, '['
	DB	00H, 'i', 00H, ']', 00H, '-', 00H, '0', 00H, 'x', 00H, 'F', 00H
	DB	'E', 00H, 'F', 00H, '5', 00H, 'u', 00H, ' ', 00H, '<', 00H, ' '
	DB	00H, 's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, 'o', 00H, 'f', 00H
	DB	'(', 00H, 'c', 00H, 'o', 00H, 'n', 00H, 'v', 00H, 'e', 00H, 'r'
	DB	00H, 't', 00H, 'L', 00H, 'a', 00H, 'm', 00H, 'A', 00H, 'l', 00H
	DB	'e', 00H, 'f', 00H, ')', 00H, '/', 00H, 's', 00H, 'i', 00H, 'z'
	DB	00H, 'e', 00H, 'o', 00H, 'f', 00H, '(', 00H, 'c', 00H, 'o', 00H
	DB	'n', 00H, 'v', 00H, 'e', 00H, 'r', 00H, 't', 00H, 'L', 00H, 'a'
	DB	00H, 'm', 00H, 'A', 00H, 'l', 00H, 'e', 00H, 'f', 00H, '[', 00H
	DB	'0', 00H, ']', 00H, ')', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??expandCompositCharAtBegin@@YAHPA_WHHPAW4UErrorCode@@@Z@4JA@b604b903
_DATA	SEGMENT
?__LINE__Var@?1??expandCompositCharAtBegin@@YAHPA_WHHPAW4UErrorCode@@@Z@4JA@b604b903 DD 0387H ; `expandCompositCharAtBegin'::`2'::__LINE__Var
; Function compile flags: /Odtp /RTCsu /ZI
_DATA	ENDS
;	COMDAT ?expandCompositCharAtBegin@@YAHPA_WHHPAW4UErrorCode@@@Z
_TEXT	SEGMENT
_tempbuffer$ = -44					; size = 4
_countl$ = -32						; size = 4
_j$ = -20						; size = 4
_i$ = -8						; size = 4
_dest$ = 8						; size = 4
_sourceLength$ = 12					; size = 4
_destSize$ = 16						; size = 4
_pErrorCode$ = 20					; size = 4
?expandCompositCharAtBegin@@YAHPA_WHHPAW4UErrorCode@@@Z PROC ; expandCompositCharAtBegin, COMDAT
; Line 903
	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 904
	mov	DWORD PTR _i$[ebp], 0
	mov	DWORD PTR _j$[ebp], 0
; Line 905
	mov	DWORD PTR _countl$[ebp], 0
; Line 906
	mov	DWORD PTR _tempbuffer$[ebp], 0
; Line 908
	mov	eax, DWORD PTR _sourceLength$[ebp]
	lea	ecx, DWORD PTR [eax+eax+2]
	push	ecx
	call	_uprv_malloc_56
	add	esp, 4
	mov	DWORD PTR _tempbuffer$[ebp], eax
; Line 911
	cmp	DWORD PTR _tempbuffer$[ebp], 0
	jne	SHORT $LN8@expandComp@2
; Line 912
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 7
; Line 913
	xor	eax, eax
	jmp	$LN9@expandComp@2
$LN8@expandComp@2:
; Line 916
	mov	eax, DWORD PTR _sourceLength$[ebp]
	lea	ecx, DWORD PTR [eax+eax+2]
	push	ecx
	push	0
	mov	edx, DWORD PTR _tempbuffer$[ebp]
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH
; Line 918
	mov	DWORD PTR _i$[ebp], 0
$LN7@expandComp@2:
; Line 919
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _dest$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	cmp	edx, 32					; 00000020H
	jne	SHORT $LN6@expandComp@2
; Line 920
	mov	eax, DWORD PTR _countl$[ebp]
	add	eax, 1
	mov	DWORD PTR _countl$[ebp], eax
; Line 921
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
; Line 922
	jmp	SHORT $LN7@expandComp@2
$LN6@expandComp@2:
; Line 924
	mov	eax, DWORD PTR _sourceLength$[ebp]
	sub	eax, 1
	mov	DWORD PTR _j$[ebp], eax
	mov	ecx, DWORD PTR _j$[ebp]
	mov	DWORD PTR _i$[ebp], ecx
$LN5@expandComp@2:
; Line 926
	cmp	DWORD PTR _i$[ebp], 0
	jl	$LN4@expandComp@2
	cmp	DWORD PTR _j$[ebp], 0
	jl	$LN4@expandComp@2
; Line 927
	cmp	DWORD PTR _countl$[ebp], 0
	jle	$LN3@expandComp@2
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _dest$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	push	edx
	call	?isLamAlefChar@@YAH_W@Z			; isLamAlefChar
	add	esp, 4
	test	eax, eax
	je	$LN3@expandComp@2
; Line 928
	mov	eax, 1604				; 00000644H
	mov	ecx, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR _tempbuffer$[ebp]
	mov	WORD PTR [edx+ecx*2], ax
; Line 931
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _dest$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	cmp	edx, 65269				; 0000fef5H
	jb	SHORT $LN11@expandComp@2
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _dest$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	sub	edx, 65269				; 0000fef5H
	cmp	edx, 8
	jb	SHORT $LN12@expandComp@2
$LN11@expandComp@2:
	mov	eax, DWORD PTR ?__LINE__Var@?1??expandCompositCharAtBegin@@YAHPA_WHHPAW4UErrorCode@@@Z@4JA@b604b903
	add	eax, 28					; 0000001cH
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1FK@PEDOADFO@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@
	push	OFFSET ??_C@_1LC@CBAJJOIB@?$AAd?$AAe?$AAs?$AAt?$AA?$FL?$AAi?$AA?$FN?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AAx?$AAF?$AAE?$AAF?$AA5?$AAu?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAd?$AAe?$AAs?$AAt?$AA?$FL?$AAi?$AA?$FN?$AA?9?$AA0?$AAx@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN12@expandComp@2:
; Line 932
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _dest$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _tempbuffer$[ebp]
	mov	dx, WORD PTR _convertLamAlef[edx*2-130538]
	mov	WORD PTR [ecx+eax*2-2], dx
; Line 933
	mov	eax, DWORD PTR _j$[ebp]
	sub	eax, 1
	mov	DWORD PTR _j$[ebp], eax
; Line 934
	mov	eax, DWORD PTR _countl$[ebp]
	sub	eax, 1
	mov	DWORD PTR _countl$[ebp], eax
; Line 935
	jmp	SHORT $LN2@expandComp@2
$LN3@expandComp@2:
; Line 936
	cmp	DWORD PTR _countl$[ebp], 0
	jne	SHORT $LN1@expandComp@2
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _dest$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	push	edx
	call	?isLamAlefChar@@YAH_W@Z			; isLamAlefChar
	add	esp, 4
	test	eax, eax
	je	SHORT $LN1@expandComp@2
; Line 937
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 20			; 00000014H
$LN1@expandComp@2:
; Line 939
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _tempbuffer$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _dest$[ebp]
	mov	dx, WORD PTR [esi+edx*2]
	mov	WORD PTR [ecx+eax*2], dx
$LN2@expandComp@2:
; Line 941
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
; Line 942
	mov	eax, DWORD PTR _j$[ebp]
	sub	eax, 1
	mov	DWORD PTR _j$[ebp], eax
; Line 943
	jmp	$LN5@expandComp@2
$LN4@expandComp@2:
; Line 944
	push	1
	mov	eax, DWORD PTR _tempbuffer$[ebp]
	push	eax
	call	_uprv_checkValidMemory
	add	esp, 8
	mov	ecx, DWORD PTR _sourceLength$[ebp]
	shl	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _tempbuffer$[ebp]
	push	edx
	mov	eax, DWORD PTR _dest$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 946
	mov	eax, DWORD PTR _tempbuffer$[ebp]
	push	eax
	call	_uprv_free_56
	add	esp, 4
; Line 948
	mov	eax, DWORD PTR _sourceLength$[ebp]
	mov	DWORD PTR _destSize$[ebp], eax
; Line 949
	mov	eax, DWORD PTR _destSize$[ebp]
$LN9@expandComp@2:
; Line 950
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?expandCompositCharAtBegin@@YAHPA_WHHPAW4UErrorCode@@@Z ENDP ; expandCompositCharAtBegin
_TEXT	ENDS
EXTRN	__imp__memmove:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?expandCompositCharAtEnd@@YAHPA_WHHPAW4UErrorCode@@@Z
_TEXT	SEGMENT
_tempbuffer$ = -56					; size = 4
_inpsize$ = -44						; size = 4
_countr$ = -32						; size = 4
_j$ = -20						; size = 4
_i$ = -8						; size = 4
_dest$ = 8						; size = 4
_sourceLength$ = 12					; size = 4
_destSize$ = 16						; size = 4
_pErrorCode$ = 20					; size = 4
?expandCompositCharAtEnd@@YAHPA_WHHPAW4UErrorCode@@@Z PROC ; expandCompositCharAtEnd, COMDAT
; Line 963
	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 964
	mov	DWORD PTR _i$[ebp], 0
	mov	DWORD PTR _j$[ebp], 0
; Line 966
	mov	DWORD PTR _countr$[ebp], 0
; Line 967
	mov	eax, DWORD PTR _sourceLength$[ebp]
	mov	DWORD PTR _inpsize$[ebp], eax
; Line 969
	mov	DWORD PTR _tempbuffer$[ebp], 0
; Line 970
	mov	eax, DWORD PTR _sourceLength$[ebp]
	lea	ecx, DWORD PTR [eax+eax+2]
	push	ecx
	call	_uprv_malloc_56
	add	esp, 4
	mov	DWORD PTR _tempbuffer$[ebp], eax
; Line 973
	cmp	DWORD PTR _tempbuffer$[ebp], 0
	jne	SHORT $LN13@expandComp@3
; Line 974
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 7
; Line 975
	xor	eax, eax
	jmp	$LN14@expandComp@3
$LN13@expandComp@3:
; Line 978
	mov	eax, DWORD PTR _sourceLength$[ebp]
	lea	ecx, DWORD PTR [eax+eax+2]
	push	ecx
	push	0
	mov	edx, DWORD PTR _tempbuffer$[ebp]
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH
$LN12@expandComp@3:
; Line 980
	mov	eax, DWORD PTR _inpsize$[ebp]
	mov	ecx, DWORD PTR _dest$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2-2]
	cmp	edx, 32					; 00000020H
	jne	SHORT $LN11@expandComp@3
; Line 981
	mov	eax, DWORD PTR _countr$[ebp]
	add	eax, 1
	mov	DWORD PTR _countr$[ebp], eax
; Line 982
	mov	eax, DWORD PTR _inpsize$[ebp]
	sub	eax, 1
	mov	DWORD PTR _inpsize$[ebp], eax
; Line 983
	jmp	SHORT $LN12@expandComp@3
$LN11@expandComp@3:
; Line 985
	mov	eax, DWORD PTR _sourceLength$[ebp]
	sub	eax, DWORD PTR _countr$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
; Line 986
	mov	eax, DWORD PTR _sourceLength$[ebp]
	sub	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN10@expandComp@3:
; Line 988
	cmp	DWORD PTR _i$[ebp], 0
	jl	$LN9@expandComp@3
	cmp	DWORD PTR _j$[ebp], 0
	jl	$LN9@expandComp@3
; Line 989
	cmp	DWORD PTR _countr$[ebp], 0
	jle	SHORT $LN8@expandComp@3
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _dest$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	push	edx
	call	?isLamAlefChar@@YAH_W@Z			; isLamAlefChar
	add	esp, 4
	test	eax, eax
	je	SHORT $LN8@expandComp@3
; Line 990
	mov	eax, 1604				; 00000644H
	mov	ecx, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR _tempbuffer$[ebp]
	mov	WORD PTR [edx+ecx*2], ax
; Line 991
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _dest$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _tempbuffer$[ebp]
	mov	dx, WORD PTR _convertLamAlef[edx*2-130538]
	mov	WORD PTR [ecx+eax*2-2], dx
; Line 992
	mov	eax, DWORD PTR _j$[ebp]
	sub	eax, 1
	mov	DWORD PTR _j$[ebp], eax
; Line 993
	mov	eax, DWORD PTR _countr$[ebp]
	sub	eax, 1
	mov	DWORD PTR _countr$[ebp], eax
; Line 994
	jmp	SHORT $LN7@expandComp@3
$LN8@expandComp@3:
; Line 995
	cmp	DWORD PTR _countr$[ebp], 0
	jne	SHORT $LN6@expandComp@3
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _dest$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	push	edx
	call	?isLamAlefChar@@YAH_W@Z			; isLamAlefChar
	add	esp, 4
	test	eax, eax
	je	SHORT $LN6@expandComp@3
; Line 996
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 20			; 00000014H
$LN6@expandComp@3:
; Line 998
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _tempbuffer$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _dest$[ebp]
	mov	dx, WORD PTR [esi+edx*2]
	mov	WORD PTR [ecx+eax*2], dx
$LN7@expandComp@3:
; Line 1000
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
; Line 1001
	mov	eax, DWORD PTR _j$[ebp]
	sub	eax, 1
	mov	DWORD PTR _j$[ebp], eax
; Line 1002
	jmp	$LN10@expandComp@3
$LN9@expandComp@3:
; Line 1004
	cmp	DWORD PTR _countr$[ebp], 0
	jle	SHORT $LN5@expandComp@3
; Line 1005
	push	1
	mov	eax, DWORD PTR _countr$[ebp]
	mov	ecx, DWORD PTR _tempbuffer$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	push	edx
	call	_uprv_checkValidMemory
	add	esp, 8
	mov	eax, DWORD PTR _sourceLength$[ebp]
	shl	eax, 1
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _countr$[ebp]
	mov	edx, DWORD PTR _tempbuffer$[ebp]
	lea	eax, DWORD PTR [edx+ecx*2]
	push	eax
	mov	ecx, DWORD PTR _tempbuffer$[ebp]
	push	ecx
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1006
	mov	eax, DWORD PTR _tempbuffer$[ebp]
	push	eax
	call	_u_strlen_56
	add	esp, 4
	cmp	eax, DWORD PTR _sourceLength$[ebp]
	jge	SHORT $LN5@expandComp@3
; Line 1007
	mov	eax, DWORD PTR _sourceLength$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN3@expandComp@3
$LN2@expandComp@3:
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@expandComp@3:
	mov	eax, DWORD PTR _sourceLength$[ebp]
	sub	eax, DWORD PTR _countr$[ebp]
	cmp	DWORD PTR _i$[ebp], eax
	jl	SHORT $LN5@expandComp@3
; Line 1008
	mov	eax, 32					; 00000020H
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _tempbuffer$[ebp]
	mov	WORD PTR [edx+ecx*2], ax
; Line 1009
	jmp	SHORT $LN2@expandComp@3
$LN5@expandComp@3:
; Line 1012
	push	1
	mov	eax, DWORD PTR _tempbuffer$[ebp]
	push	eax
	call	_uprv_checkValidMemory
	add	esp, 8
	mov	ecx, DWORD PTR _sourceLength$[ebp]
	shl	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _tempbuffer$[ebp]
	push	edx
	mov	eax, DWORD PTR _dest$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 1014
	mov	eax, DWORD PTR _tempbuffer$[ebp]
	push	eax
	call	_uprv_free_56
	add	esp, 4
; Line 1016
	mov	eax, DWORD PTR _sourceLength$[ebp]
	mov	DWORD PTR _destSize$[ebp], eax
; Line 1017
	mov	eax, DWORD PTR _destSize$[ebp]
$LN14@expandComp@3:
; Line 1018
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?expandCompositCharAtEnd@@YAHPA_WHHPAW4UErrorCode@@@Z ENDP ; expandCompositCharAtEnd
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?expandCompositCharAtNear@@YAHPA_WHHPAW4UErrorCode@@HHHUuShapeVariables@@@Z
_TEXT	SEGMENT
_yehhamzaChar$ = -32					; size = 2
_lamalefChar$ = -20					; size = 2
_i$ = -8						; size = 4
_dest$ = 8						; size = 4
_sourceLength$ = 12					; size = 4
_destSize$ = 16						; size = 4
_pErrorCode$ = 20					; size = 4
_yehHamzaOption$ = 24					; size = 4
_seenTailOption$ = 28					; size = 4
_lamAlefOption$ = 32					; size = 4
_shapeVars$ = 36					; size = 24
?expandCompositCharAtNear@@YAHPA_WHHPAW4UErrorCode@@HHHUuShapeVariables@@@Z PROC ; expandCompositCharAtNear, COMDAT
; Line 1031
	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1032
	mov	DWORD PTR _i$[ebp], 0
; Line 1037
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN14@expandComp@4
$LN13@expandComp@4:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN14@expandComp@4:
	mov	eax, DWORD PTR _sourceLength$[ebp]
	sub	eax, 1
	cmp	DWORD PTR _i$[ebp], eax
	jg	$LN12@expandComp@4
; Line 1038
	cmp	DWORD PTR _seenTailOption$[ebp], 0
	je	SHORT $LN11@expandComp@4
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _dest$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	push	edx
	call	?isSeenTailFamilyChar@@YAH_W@Z		; isSeenTailFamilyChar
	add	esp, 4
	test	eax, eax
	je	SHORT $LN11@expandComp@4
; Line 1039
	cmp	DWORD PTR _i$[ebp], 0
	jle	SHORT $LN10@expandComp@4
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _dest$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2-2]
	cmp	edx, 32					; 00000020H
	jne	SHORT $LN10@expandComp@4
; Line 1040
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _dest$[ebp]
	mov	dx, WORD PTR _shapeVars$[ebp]
	mov	WORD PTR [ecx+eax*2-2], dx
; Line 1041
	jmp	SHORT $LN9@expandComp@4
$LN10@expandComp@4:
; Line 1042
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 20			; 00000014H
$LN9@expandComp@4:
; Line 1043
	jmp	$LN8@expandComp@4
$LN11@expandComp@4:
; Line 1044
	cmp	DWORD PTR _yehHamzaOption$[ebp], 0
	je	SHORT $LN7@expandComp@4
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _dest$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	push	edx
	call	?isYehHamzaChar@@YAH_W@Z		; isYehHamzaChar
	add	esp, 4
	test	eax, eax
	je	SHORT $LN7@expandComp@4
; Line 1045
	cmp	DWORD PTR _i$[ebp], 0
	jle	SHORT $LN6@expandComp@4
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _dest$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2-2]
	cmp	edx, 32					; 00000020H
	jne	SHORT $LN6@expandComp@4
; Line 1046
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _dest$[ebp]
	mov	dx, WORD PTR [ecx+eax*2]
	mov	WORD PTR _yehhamzaChar$[ebp], dx
; Line 1047
	movzx	eax, WORD PTR _yehhamzaChar$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _dest$[ebp]
	mov	ax, WORD PTR _yehHamzaToYeh[eax*2-130322]
	mov	WORD PTR [edx+ecx*2], ax
; Line 1048
	mov	eax, 65152				; 0000fe80H
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _dest$[ebp]
	mov	WORD PTR [edx+ecx*2-2], ax
; Line 1049
	jmp	SHORT $LN5@expandComp@4
$LN6@expandComp@4:
; Line 1051
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 20			; 00000014H
$LN5@expandComp@4:
; Line 1052
	jmp	SHORT $LN8@expandComp@4
$LN7@expandComp@4:
; Line 1053
	cmp	DWORD PTR _lamAlefOption$[ebp], 0
	je	SHORT $LN8@expandComp@4
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _dest$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2+2]
	push	edx
	call	?isLamAlefChar@@YAH_W@Z			; isLamAlefChar
	add	esp, 4
	test	eax, eax
	je	SHORT $LN8@expandComp@4
; Line 1054
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _dest$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	cmp	edx, 32					; 00000020H
	jne	SHORT $LN2@expandComp@4
; Line 1055
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _dest$[ebp]
	mov	dx, WORD PTR [ecx+eax*2+2]
	mov	WORD PTR _lamalefChar$[ebp], dx
; Line 1056
	mov	eax, 1604				; 00000644H
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _dest$[ebp]
	mov	WORD PTR [edx+ecx*2+2], ax
; Line 1057
	movzx	eax, WORD PTR _lamalefChar$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _dest$[ebp]
	mov	ax, WORD PTR _convertLamAlef[eax*2-130538]
	mov	WORD PTR [edx+ecx*2], ax
; Line 1058
	jmp	SHORT $LN8@expandComp@4
$LN2@expandComp@4:
; Line 1059
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	DWORD PTR [eax], 20			; 00000014H
$LN8@expandComp@4:
; Line 1062
	jmp	$LN13@expandComp@4
$LN12@expandComp@4:
; Line 1063
	mov	eax, DWORD PTR _sourceLength$[ebp]
	mov	DWORD PTR _destSize$[ebp], eax
; Line 1064
	mov	eax, DWORD PTR _destSize$[ebp]
; Line 1065
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN19@expandComp@4
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN19@expandComp@4:
	DD	1
	DD	$LN18@expandComp@4
$LN18@expandComp@4:
	DD	-44					; ffffffd4H
	DD	4
	DD	$LN17@expandComp@4
$LN17@expandComp@4:
	DB	95					; 0000005fH
	DB	36					; 00000024H
	DB	65					; 00000041H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	121					; 00000079H
	DB	80					; 00000050H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	0
?expandCompositCharAtNear@@YAHPA_WHHPAW4UErrorCode@@HHHUuShapeVariables@@@Z ENDP ; expandCompositCharAtNear
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?isSeenTailFamilyChar@@YAH_W@Z
_TEXT	SEGMENT
_ch$ = 8						; size = 2
?isSeenTailFamilyChar@@YAH_W@Z PROC			; isSeenTailFamilyChar, COMDAT
; Line 537
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 538
	movzx	eax, WORD PTR _ch$[ebp]
	cmp	eax, 65201				; 0000feb1H
	jl	SHORT $LN2@isSeenTail
	movzx	eax, WORD PTR _ch$[ebp]
	cmp	eax, 65215				; 0000febfH
	jge	SHORT $LN2@isSeenTail
; Line 539
	movzx	eax, WORD PTR _ch$[ebp]
	movzx	eax, BYTE PTR _tailFamilyIsolatedFinal[eax-65201]
	jmp	SHORT $LN3@isSeenTail
; Line 540
	jmp	SHORT $LN3@isSeenTail
$LN2@isSeenTail:
; Line 541
	xor	eax, eax
$LN3@isSeenTail:
; Line 543
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?isSeenTailFamilyChar@@YAH_W@Z ENDP			; isSeenTailFamilyChar
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?isYehHamzaChar@@YAH_W@Z
_TEXT	SEGMENT
_ch$ = 8						; size = 2
?isYehHamzaChar@@YAH_W@Z PROC				; isYehHamzaChar, COMDAT
; Line 576
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 577
	movzx	eax, WORD PTR _ch$[ebp]
	cmp	eax, 65161				; 0000fe89H
	je	SHORT $LN2@isYehHamza
	movzx	eax, WORD PTR _ch$[ebp]
	cmp	eax, 65162				; 0000fe8aH
	jne	SHORT $LN3@isYehHamza
$LN2@isYehHamza:
; Line 578
	mov	eax, 1
	jmp	SHORT $LN4@isYehHamza
; Line 579
	jmp	SHORT $LN4@isYehHamza
$LN3@isYehHamza:
; Line 580
	xor	eax, eax
$LN4@isYehHamza:
; Line 582
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?isYehHamzaChar@@YAH_W@Z ENDP				; isYehHamzaChar
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?deShapeUnicode@@YAHPA_WHHIPAW4UErrorCode@@UuShapeVariables@@@Z
_TEXT	SEGMENT
_c$10194 = -68						; size = 2
_inputChar$10192 = -56					; size = 2
_seenComposeEnabled$ = -44				; size = 4
_yehHamzaComposeEnabled$ = -32				; size = 4
_lamalef_found$ = -20					; size = 4
_i$ = -8						; size = 4
_dest$ = 8						; size = 4
_sourceLength$ = 12					; size = 4
_destSize$ = 16						; size = 4
_options$ = 20						; size = 4
_pErrorCode$ = 24					; size = 4
_shapeVars$ = 28					; size = 24
?deShapeUnicode@@YAHPA_WHHIPAW4UErrorCode@@UuShapeVariables@@@Z PROC ; deShapeUnicode, COMDAT
; Line 1370
	push	ebp
	mov	ebp, esp
	sub	esp, 276				; 00000114H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-276]
	mov	ecx, 69					; 00000045H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1371
	mov	DWORD PTR _i$[ebp], 0
; Line 1372
	mov	DWORD PTR _lamalef_found$[ebp], 0
; Line 1373
	mov	DWORD PTR _yehHamzaComposeEnabled$[ebp], 0
; Line 1374
	mov	DWORD PTR _seenComposeEnabled$[ebp], 0
; Line 1376
	mov	eax, DWORD PTR _options$[ebp]
	and	eax, 58720256				; 03800000H
	xor	ecx, ecx
	cmp	eax, 16777216				; 01000000H
	sete	cl
	mov	DWORD PTR _yehHamzaComposeEnabled$[ebp], ecx
; Line 1377
	mov	eax, DWORD PTR _options$[ebp]
	and	eax, 7340032				; 00700000H
	xor	ecx, ecx
	cmp	eax, 2097152				; 00200000H
	sete	cl
	mov	DWORD PTR _seenComposeEnabled$[ebp], ecx
; Line 1384
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN15@deShapeUni
$LN14@deShapeUni:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN15@deShapeUni:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _sourceLength$[ebp]
	jge	$LN13@deShapeUni
; Line 1385
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _dest$[ebp]
	mov	dx, WORD PTR [ecx+eax*2]
	mov	WORD PTR _inputChar$10192[ebp], dx
; Line 1386
	movzx	eax, WORD PTR _inputChar$10192[ebp]
	cmp	eax, 64336				; 0000fb50H
	jl	SHORT $LN12@deShapeUni
	movzx	eax, WORD PTR _inputChar$10192[ebp]
	cmp	eax, 64511				; 0000fbffH
	jg	SHORT $LN12@deShapeUni
; Line 1387
	movzx	eax, WORD PTR _inputChar$10192[ebp]
	mov	cx, WORD PTR _convertFBto06[eax*2-128672]
	mov	WORD PTR _c$10194[ebp], cx
; Line 1388
	movzx	eax, WORD PTR _c$10194[ebp]
	test	eax, eax
	je	SHORT $LN11@deShapeUni
; Line 1389
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _dest$[ebp]
	mov	dx, WORD PTR _c$10194[ebp]
	mov	WORD PTR [ecx+eax*2], dx
$LN11@deShapeUni:
; Line 1390
	jmp	$LN10@deShapeUni
$LN12@deShapeUni:
; Line 1391
	cmp	DWORD PTR _yehHamzaComposeEnabled$[ebp], 1
	jne	SHORT $LN9@deShapeUni
	movzx	eax, WORD PTR _inputChar$10192[ebp]
	cmp	eax, 1569				; 00000621H
	je	SHORT $LN8@deShapeUni
	movzx	eax, WORD PTR _inputChar$10192[ebp]
	cmp	eax, 65152				; 0000fe80H
	jne	SHORT $LN9@deShapeUni
$LN8@deShapeUni:
	mov	eax, DWORD PTR _sourceLength$[ebp]
	sub	eax, 1
	cmp	DWORD PTR _i$[ebp], eax
	jge	SHORT $LN9@deShapeUni
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _dest$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2+2]
	push	edx
	call	?isAlefMaksouraChar@@YAH_W@Z		; isAlefMaksouraChar
	add	esp, 4
	test	eax, eax
	je	SHORT $LN9@deShapeUni
; Line 1392
	mov	eax, 32					; 00000020H
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _dest$[ebp]
	mov	WORD PTR [edx+ecx*2], ax
; Line 1393
	mov	eax, 1574				; 00000626H
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _dest$[ebp]
	mov	WORD PTR [edx+ecx*2+2], ax
; Line 1394
	jmp	$LN10@deShapeUni
$LN9@deShapeUni:
; Line 1395
	cmp	DWORD PTR _seenComposeEnabled$[ebp], 1
	jne	SHORT $LN6@deShapeUni
	movzx	eax, WORD PTR _inputChar$10192[ebp]
	push	eax
	call	?isTailChar@@YAH_W@Z			; isTailChar
	add	esp, 4
	test	eax, eax
	je	SHORT $LN6@deShapeUni
	mov	eax, DWORD PTR _sourceLength$[ebp]
	sub	eax, 1
	cmp	DWORD PTR _i$[ebp], eax
	jge	SHORT $LN6@deShapeUni
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _dest$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2+2]
	push	edx
	call	?isSeenTailFamilyChar@@YAH_W@Z		; isSeenTailFamilyChar
	add	esp, 4
	test	eax, eax
	je	SHORT $LN6@deShapeUni
; Line 1396
	mov	eax, 32					; 00000020H
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _dest$[ebp]
	mov	WORD PTR [edx+ecx*2], ax
	jmp	SHORT $LN10@deShapeUni
$LN6@deShapeUni:
; Line 1397
	movzx	eax, WORD PTR _inputChar$10192[ebp]
	cmp	eax, 65136				; 0000fe70H
	jl	SHORT $LN4@deShapeUni
	movzx	eax, WORD PTR _inputChar$10192[ebp]
	cmp	eax, 65268				; 0000fef4H
	jg	SHORT $LN4@deShapeUni
; Line 1398
	movzx	eax, WORD PTR _inputChar$10192[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _dest$[ebp]
	mov	ax, WORD PTR _convertFEto06[eax*2-130272]
	mov	WORD PTR [edx+ecx*2], ax
; Line 1399
	jmp	SHORT $LN10@deShapeUni
$LN4@deShapeUni:
; Line 1400
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _dest$[ebp]
	mov	dx, WORD PTR _inputChar$10192[ebp]
	mov	WORD PTR [ecx+eax*2], dx
$LN10@deShapeUni:
; Line 1403
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _dest$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	push	edx
	call	?isLamAlefChar@@YAH_W@Z			; isLamAlefChar
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@deShapeUni
; Line 1404
	mov	DWORD PTR _lamalef_found$[ebp], 1
$LN2@deShapeUni:
; Line 1405
	jmp	$LN14@deShapeUni
$LN13@deShapeUni:
; Line 1407
	mov	eax, DWORD PTR _sourceLength$[ebp]
	mov	DWORD PTR _destSize$[ebp], eax
; Line 1408
	cmp	DWORD PTR _lamalef_found$[ebp], 0
	je	SHORT $LN1@deShapeUni
; Line 1409
	sub	esp, 24					; 00000018H
	mov	eax, esp
	mov	ecx, DWORD PTR _shapeVars$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _shapeVars$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _shapeVars$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _shapeVars$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	ecx, DWORD PTR _shapeVars$[ebp+16]
	mov	DWORD PTR [eax+16], ecx
	mov	edx, DWORD PTR _shapeVars$[ebp+20]
	mov	DWORD PTR [eax+20], edx
	push	1
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _options$[ebp]
	push	ecx
	mov	edx, DWORD PTR _destSize$[ebp]
	push	edx
	mov	eax, DWORD PTR _sourceLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dest$[ebp]
	push	ecx
	call	?expandCompositChar@@YAHPA_WHHIPAW4UErrorCode@@HUuShapeVariables@@@Z ; expandCompositChar
	add	esp, 48					; 00000030H
	mov	DWORD PTR _destSize$[ebp], eax
$LN1@deShapeUni:
; Line 1411
	mov	eax, DWORD PTR _destSize$[ebp]
; Line 1412
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN20@deShapeUni
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 276				; 00000114H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN20@deShapeUni:
	DD	1
	DD	$LN19@deShapeUni
$LN19@deShapeUni:
	DD	-80					; ffffffb0H
	DD	4
	DD	$LN18@deShapeUni
$LN18@deShapeUni:
	DB	95					; 0000005fH
	DB	36					; 00000024H
	DB	65					; 00000041H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	121					; 00000079H
	DB	80					; 00000050H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	0
?deShapeUnicode@@YAHPA_WHHIPAW4UErrorCode@@UuShapeVariables@@@Z ENDP ; deShapeUnicode
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?isTailChar@@YAH_W@Z
_TEXT	SEGMENT
_ch$ = 8						; size = 2
?isTailChar@@YAH_W@Z PROC				; isTailChar, COMDAT
; Line 522
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 523
	movzx	eax, WORD PTR _ch$[ebp]
	cmp	eax, 8203				; 0000200bH
	je	SHORT $LN2@isTailChar
	movzx	eax, WORD PTR _ch$[ebp]
	cmp	eax, 65139				; 0000fe73H
	jne	SHORT $LN3@isTailChar
$LN2@isTailChar:
; Line 524
	mov	eax, 1
	jmp	SHORT $LN4@isTailChar
; Line 525
	jmp	SHORT $LN4@isTailChar
$LN3@isTailChar:
; Line 526
	xor	eax, eax
$LN4@isTailChar:
; Line 528
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?isTailChar@@YAH_W@Z ENDP				; isTailChar
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?isAlefMaksouraChar@@YAH_W@Z
_TEXT	SEGMENT
tv70 = -196						; size = 4
_ch$ = 8						; size = 2
?isAlefMaksouraChar@@YAH_W@Z PROC			; isAlefMaksouraChar, COMDAT
; Line 566
	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 567
	movzx	eax, WORD PTR _ch$[ebp]
	cmp	eax, 65263				; 0000feefH
	je	SHORT $LN3@isAlefMaks
	movzx	ecx, WORD PTR _ch$[ebp]
	cmp	ecx, 65264				; 0000fef0H
	je	SHORT $LN3@isAlefMaks
	movzx	edx, WORD PTR _ch$[ebp]
	cmp	edx, 1609				; 00000649H
	je	SHORT $LN3@isAlefMaks
	mov	DWORD PTR tv70[ebp], 0
	jmp	SHORT $LN4@isAlefMaks
$LN3@isAlefMaks:
	mov	DWORD PTR tv70[ebp], 1
$LN4@isAlefMaks:
	mov	eax, DWORD PTR tv70[ebp]
; Line 568
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?isAlefMaksouraChar@@YAH_W@Z ENDP			; isAlefMaksouraChar
_TEXT	ENDS
END
