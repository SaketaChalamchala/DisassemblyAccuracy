; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\mozilla\intl\icu\source\common\ucnv2022.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?value@?$integral_constant@_N$0A@@tr1@std@@2_NB	; std::tr1::integral_constant<bool,0>::value
PUBLIC	?value@?$integral_constant@_N$00@tr1@std@@2_NB	; std::tr1::integral_constant<bool,1>::value
PUBLIC	?value@?$integral_constant@I$0A@@tr1@std@@2IB	; std::tr1::integral_constant<unsigned int,0>::value
PUBLIC	?_Rank@?$_Arithmetic_traits@_N@std@@2HB		; std::_Arithmetic_traits<bool>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@D@std@@2HB		; std::_Arithmetic_traits<char>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@C@std@@2HB		; std::_Arithmetic_traits<signed char>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@E@std@@2HB		; std::_Arithmetic_traits<unsigned char>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@F@std@@2HB		; std::_Arithmetic_traits<short>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@G@std@@2HB		; std::_Arithmetic_traits<unsigned short>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@H@std@@2HB		; std::_Arithmetic_traits<int>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@I@std@@2HB		; std::_Arithmetic_traits<unsigned int>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@J@std@@2HB		; std::_Arithmetic_traits<long>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@K@std@@2HB		; std::_Arithmetic_traits<unsigned long>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@_J@std@@2HB		; std::_Arithmetic_traits<__int64>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@_K@std@@2HB		; std::_Arithmetic_traits<unsigned __int64>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@M@std@@2HB		; std::_Arithmetic_traits<float>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@N@std@@2HB		; std::_Arithmetic_traits<double>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@O@std@@2HB		; std::_Arithmetic_traits<long double>::_Rank
PUBLIC	?collate@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::collate
PUBLIC	?ctype@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::ctype
PUBLIC	?monetary@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::monetary
PUBLIC	?numeric@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::numeric
PUBLIC	?time@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::time
PUBLIC	?messages@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::messages
PUBLIC	?all@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::all
PUBLIC	?none@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::none
PUBLIC	?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::skipws
PUBLIC	?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::unitbuf
PUBLIC	?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::uppercase
PUBLIC	?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showbase
PUBLIC	?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpoint
PUBLIC	?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpos
PUBLIC	?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::left
PUBLIC	?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::right
PUBLIC	?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::internal
PUBLIC	?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::dec
PUBLIC	?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::oct
PUBLIC	?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::hex
PUBLIC	?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::scientific
PUBLIC	?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::fixed
PUBLIC	?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::hexfloat
PUBLIC	?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::boolalpha
PUBLIC	?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::_Stdio
PUBLIC	?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::adjustfield
PUBLIC	?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::basefield
PUBLIC	?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::floatfield
PUBLIC	?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::goodbit
PUBLIC	?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::eofbit
PUBLIC	?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::failbit
PUBLIC	?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::badbit
PUBLIC	?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::_Hardfail
PUBLIC	?in@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::in
PUBLIC	?out@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::out
PUBLIC	?ate@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::ate
PUBLIC	?app@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::app
PUBLIC	?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::trunc
PUBLIC	?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Nocreate
PUBLIC	?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Noreplace
PUBLIC	?binary@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::binary
PUBLIC	?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::beg
PUBLIC	?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::cur
PUBLIC	?end@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::end
PUBLIC	__ISO2022Data_56
PUBLIC	?_ISO2022JPData@?A0x5ec8f556@@3UUConverterSharedData@@B ; `anonymous namespace'::_ISO2022JPData
PUBLIC	?_ISO2022KRData@?A0x5ec8f556@@3UUConverterSharedData@@B ; `anonymous namespace'::_ISO2022KRData
PUBLIC	?_ISO2022CNData@?A0x5ec8f556@@3UUConverterSharedData@@B ; `anonymous namespace'::_ISO2022CNData
CONST	SEGMENT
_SHIFT_IN_STR DB 0fH, 00H
	ORG $+2
_jpCharsetMasks DW 0119H
	DW	0139H
	DW	01ffH
	DW	01ffH
	DW	01ffH
	ORG $+2
_normalize_esq_chars_2022 DB 00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	04H
	DB	07H
	DB	01dH
	DB	00H
	DB	02H
	DB	018H
	DB	01aH
	DB	01bH
	DB	00H
	DB	03H
	DB	017H
	DB	06H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	05H
	DB	08H
	DB	09H
	DB	0aH
	DB	0bH
	DB	0cH
	DB	0dH
	DB	0eH
	DB	0fH
	DB	010H
	DB	011H
	DB	012H
	DB	013H
	DB	014H
	DB	019H
	DB	01cH
	DB	00H
	DB	00H
	DB	015H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	016H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
_escSeqStateTable_Key_2022 DD 01H
	DD	022H
	DD	024H
	DD	027H
	DD	037H
	DD	039H
	DD	03cH
	DD	03dH
	DD	0445H
	DD	0448H
	DD	0449H
	DD	044aH
	DD	044bH
	DD	044cH
	DD	044dH
	DD	044eH
	DD	044fH
	DD	0450H
	DD	0451H
	DD	0452H
	DD	0455H
	DD	0482H
	DD	0485H
	DD	0488H
	DD	0489H
	DD	0498H
	DD	049aH
	DD	049bH
	DD	04e6H
	DD	04e9H
	DD	06e8H
	DD	06edH
	DD	07a5H
	DD	08921H
	DD	09045H
	DD	09048H
	DD	09049H
	DD	0904aH
	DD	0904bH
	DD	0904cH
	DD	0904eH
	DD	0904fH
	DD	09050H
	DD	09051H
	DD	09052H
	DD	09053H
	DD	09054H
	DD	09308H
	DD	0930aH
	DD	0930cH
	DD	0930eH
	DD	0934fH
	DD	09370H
	DD	09371H
	DD	09372H
	DD	09373H
	DD	09374H
	DD	09cc5H
	DD	09cc8H
	DD	09ccaH
	DD	09ccbH
	DD	09cccH
	DD	09ccdH
	DD	0112423H
	DD	02248468H
	DD	02248469H
	DD	0224846aH
	DD	0224846bH
	DD	0224846dH
	DD	0224846eH
	DD	0224846fH
	DD	02248473H
	DD	02248474H
	DD	02248476H
_escSeqStateTable_Value_2022 DB 00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	02H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	ORG $+6
_nextStateToUnicodeJP DB 0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	010H
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	00H
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	03H
	DB	08H
	DB	03H
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	04H
	DB	06H
	DB	04H
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	01H
	DB	02H
	DB	04H
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	07H
	DB	05H
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	ORG $+6
_nextStateToUnicodeCN DB 0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	010H
	DB	011H
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	01H
	DB	0ffH
	DB	02H
	DB	021H
	DB	022H
	DB	023H
	DB	024H
	DB	025H
	DB	026H
	DB	027H
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	ORG $+2
_jpCharsetPref DD 00H
	DD	03H
	DD	01H
	DD	04H
	DD	02H
	DD	05H
	DD	06H
	DD	07H
	DD	08H
_escSeqChars DB	01bH, '(B', 00H
	ORG $+2
	DB	01bH, '.A', 00H
	ORG $+2
	DB	01bH, '.F', 00H
	ORG $+2
	DB	01bH, '(J', 00H
	ORG $+2
	DB	01bH, '$B', 00H
	ORG $+2
	DB	01bH, '$(D', 00H
	ORG $+1
	DB	01bH, '$A', 00H
	ORG $+2
	DB	01bH, '$(C', 00H
	ORG $+1
	DB	01bH, '(I', 00H
	ORG $+2
	ORG $+2
_escSeqCharsLen DB 03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	04H
	DB	03H
	DB	04H
	DB	03H
	ORG $+7
_hwkana_fb DW	02123H
	DW	02156H
	DW	02157H
	DW	02122H
	DW	02126H
	DW	02572H
	DW	02521H
	DW	02523H
	DW	02525H
	DW	02527H
	DW	02529H
	DW	02563H
	DW	02565H
	DW	02567H
	DW	02543H
	DW	0213cH
	DW	02522H
	DW	02524H
	DW	02526H
	DW	02528H
	DW	0252aH
	DW	0252bH
	DW	0252dH
	DW	0252fH
	DW	02531H
	DW	02533H
	DW	02535H
	DW	02537H
	DW	02539H
	DW	0253bH
	DW	0253dH
	DW	0253fH
	DW	02541H
	DW	02544H
	DW	02546H
	DW	02548H
	DW	0254aH
	DW	0254bH
	DW	0254cH
	DW	0254dH
	DW	0254eH
	DW	0254fH
	DW	02552H
	DW	02555H
	DW	02558H
	DW	0255bH
	DW	0255eH
	DW	0255fH
	DW	02560H
	DW	02561H
	DW	02562H
	DW	02564H
	DW	02566H
	DW	02568H
	DW	02569H
	DW	0256aH
	DW	0256bH
	DW	0256cH
	DW	0256dH
	DW	0256fH
	DW	02573H
	DW	0212bH
	DW	0212cH
	ORG $+2
_GB_2312_80_STR DB 01bH, '$)A', 00H
	ORG $+3
_ISO_IR_165_STR DB 01bH, '$)E', 00H
	ORG $+3
_CNS_11643_1992_Plane_1_STR DB 01bH, '$)G', 00H
	ORG $+3
_CNS_11643_1992_Plane_2_STR DB 01bH, '$*H', 00H
	ORG $+3
_CNS_11643_1992_Plane_3_STR DB 01bH, '$+I', 00H
	ORG $+3
_CNS_11643_1992_Plane_4_STR DB 01bH, '$+J', 00H
	ORG $+3
_CNS_11643_1992_Plane_5_STR DB 01bH, '$+K', 00H
	ORG $+3
_CNS_11643_1992_Plane_6_STR DB 01bH, '$+L', 00H
	ORG $+3
_CNS_11643_1992_Plane_7_STR DB 01bH, '$+M', 00H
	ORG $+3
_escSeqCharsCN DD FLAT:_SHIFT_IN_STR
	DD	FLAT:_GB_2312_80_STR
	DD	FLAT:_ISO_IR_165_STR
	DD	FLAT:_CNS_11643_1992_Plane_1_STR
	DD	FLAT:_CNS_11643_1992_Plane_2_STR
	DD	FLAT:_CNS_11643_1992_Plane_3_STR
	DD	FLAT:_CNS_11643_1992_Plane_4_STR
	DD	FLAT:_CNS_11643_1992_Plane_5_STR
	DD	FLAT:_CNS_11643_1992_Plane_6_STR
	DD	FLAT:_CNS_11643_1992_Plane_7_STR
__ISO2022Impl DD 0aH
	DD	00H
	DD	00H
	DD	FLAT:?_ISO2022Open@@YAXPAUUConverter@@PAUUConverterLoadArgs@@PAW4UErrorCode@@@Z
	DD	FLAT:?_ISO2022Close@@YAXPAUUConverter@@@Z
	DD	FLAT:?_ISO2022Reset@@YAXPAUUConverter@@W4UConverterResetChoice@@@Z
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:?_ISO2022getName@@YAPBDPBUUConverter@@@Z
	DD	FLAT:?_ISO_2022_WriteSub@@YAXPAUUConverterFromUnicodeArgs@@HPAW4UErrorCode@@@Z
	DD	FLAT:?_ISO_2022_SafeClone@@YAPAUUConverter@@PBU1@PAXPAHPAW4UErrorCode@@@Z
	DD	FLAT:?_ISO_2022_GetUnicodeSet@@YAXPBUUConverter@@PBUUSetAdder@@W4UConverterUnicodeSet@@PAW4UErrorCode@@@Z
	DD	00H
	DD	00H
__ISO2022StaticData DD 064H
	DB	'ISO_2022', 00H
	ORG $+51
	DD	07e6H
	DB	00H
	DB	0aH
	DB	01H
	DB	03H
	DB	01aH
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+4
__ISO2022Data_56 DD 0e4H
	DD	0ffffffffH
	DD	00H
	DD	FLAT:__ISO2022StaticData
	DB	00H
	DB	00H
	ORG $+2
	DD	FLAT:__ISO2022Impl
	DD	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+1
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	ORG $+126
	DD	00H
	DD	00H
	DD	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+1
	DW	00H
	ORG $+2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	ORG $+4
__ISO2022JPImpl DD 0aH
	DD	00H
	DD	00H
	DD	FLAT:?_ISO2022Open@@YAXPAUUConverter@@PAUUConverterLoadArgs@@PAW4UErrorCode@@@Z
	DD	FLAT:?_ISO2022Close@@YAXPAUUConverter@@@Z
	DD	FLAT:?_ISO2022Reset@@YAXPAUUConverter@@W4UConverterResetChoice@@@Z
	DD	FLAT:?UConverter_toUnicode_ISO_2022_JP_OFFSETS_LOGIC@@YAXPAUUConverterToUnicodeArgs@@PAW4UErrorCode@@@Z
	DD	FLAT:?UConverter_toUnicode_ISO_2022_JP_OFFSETS_LOGIC@@YAXPAUUConverterToUnicodeArgs@@PAW4UErrorCode@@@Z
	DD	FLAT:?UConverter_fromUnicode_ISO_2022_JP_OFFSETS_LOGIC@@YAXPAUUConverterFromUnicodeArgs@@PAW4UErrorCode@@@Z
	DD	FLAT:?UConverter_fromUnicode_ISO_2022_JP_OFFSETS_LOGIC@@YAXPAUUConverterFromUnicodeArgs@@PAW4UErrorCode@@@Z
	DD	00H
	DD	00H
	DD	FLAT:?_ISO2022getName@@YAPBDPBUUConverter@@@Z
	DD	FLAT:?_ISO_2022_WriteSub@@YAXPAUUConverterFromUnicodeArgs@@HPAW4UErrorCode@@@Z
	DD	FLAT:?_ISO_2022_SafeClone@@YAPAUUConverter@@PBU1@PAXPAHPAW4UErrorCode@@@Z
	DD	FLAT:?_ISO_2022_GetUnicodeSet@@YAXPBUUConverter@@PBUUSetAdder@@W4UConverterUnicodeSet@@PAW4UErrorCode@@@Z
	DD	00H
	DD	00H
__ISO2022JPStaticData DD 064H
	DB	'ISO_2022_JP', 00H
	ORG $+48
	DD	00H
	DB	00H
	DB	0aH
	DB	01H
	DB	06H
	DB	01aH
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+4
?_ISO2022JPData@?A0x5ec8f556@@3UUConverterSharedData@@B DD 0e4H ; `anonymous namespace'::_ISO2022JPData
	DD	0ffffffffH
	DD	00H
	DD	FLAT:__ISO2022JPStaticData
	DB	00H
	DB	00H
	ORG $+2
	DD	FLAT:__ISO2022JPImpl
	DD	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+1
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	ORG $+126
	DD	00H
	DD	00H
	DD	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+1
	DW	00H
	ORG $+2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	ORG $+4
__ISO2022KRImpl DD 0aH
	DD	00H
	DD	00H
	DD	FLAT:?_ISO2022Open@@YAXPAUUConverter@@PAUUConverterLoadArgs@@PAW4UErrorCode@@@Z
	DD	FLAT:?_ISO2022Close@@YAXPAUUConverter@@@Z
	DD	FLAT:?_ISO2022Reset@@YAXPAUUConverter@@W4UConverterResetChoice@@@Z
	DD	FLAT:?UConverter_toUnicode_ISO_2022_KR_OFFSETS_LOGIC@@YAXPAUUConverterToUnicodeArgs@@PAW4UErrorCode@@@Z
	DD	FLAT:?UConverter_toUnicode_ISO_2022_KR_OFFSETS_LOGIC@@YAXPAUUConverterToUnicodeArgs@@PAW4UErrorCode@@@Z
	DD	FLAT:?UConverter_fromUnicode_ISO_2022_KR_OFFSETS_LOGIC@@YAXPAUUConverterFromUnicodeArgs@@PAW4UErrorCode@@@Z
	DD	FLAT:?UConverter_fromUnicode_ISO_2022_KR_OFFSETS_LOGIC@@YAXPAUUConverterFromUnicodeArgs@@PAW4UErrorCode@@@Z
	DD	00H
	DD	00H
	DD	FLAT:?_ISO2022getName@@YAPBDPBUUConverter@@@Z
	DD	FLAT:?_ISO_2022_WriteSub@@YAXPAUUConverterFromUnicodeArgs@@HPAW4UErrorCode@@@Z
	DD	FLAT:?_ISO_2022_SafeClone@@YAPAUUConverter@@PBU1@PAXPAHPAW4UErrorCode@@@Z
	DD	FLAT:?_ISO_2022_GetUnicodeSet@@YAXPBUUConverter@@PBUUSetAdder@@W4UConverterUnicodeSet@@PAW4UErrorCode@@@Z
	DD	00H
	DD	00H
__ISO2022KRStaticData DD 064H
	DB	'ISO_2022_KR', 00H
	ORG $+48
	DD	00H
	DB	00H
	DB	0aH
	DB	01H
	DB	03H
	DB	01aH
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+4
?_ISO2022KRData@?A0x5ec8f556@@3UUConverterSharedData@@B DD 0e4H ; `anonymous namespace'::_ISO2022KRData
	DD	0ffffffffH
	DD	00H
	DD	FLAT:__ISO2022KRStaticData
	DB	00H
	DB	00H
	ORG $+2
	DD	FLAT:__ISO2022KRImpl
	DD	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+1
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	ORG $+126
	DD	00H
	DD	00H
	DD	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+1
	DW	00H
	ORG $+2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	ORG $+4
__ISO2022CNImpl DD 0aH
	DD	00H
	DD	00H
	DD	FLAT:?_ISO2022Open@@YAXPAUUConverter@@PAUUConverterLoadArgs@@PAW4UErrorCode@@@Z
	DD	FLAT:?_ISO2022Close@@YAXPAUUConverter@@@Z
	DD	FLAT:?_ISO2022Reset@@YAXPAUUConverter@@W4UConverterResetChoice@@@Z
	DD	FLAT:?UConverter_toUnicode_ISO_2022_CN_OFFSETS_LOGIC@@YAXPAUUConverterToUnicodeArgs@@PAW4UErrorCode@@@Z
	DD	FLAT:?UConverter_toUnicode_ISO_2022_CN_OFFSETS_LOGIC@@YAXPAUUConverterToUnicodeArgs@@PAW4UErrorCode@@@Z
	DD	FLAT:?UConverter_fromUnicode_ISO_2022_CN_OFFSETS_LOGIC@@YAXPAUUConverterFromUnicodeArgs@@PAW4UErrorCode@@@Z
	DD	FLAT:?UConverter_fromUnicode_ISO_2022_CN_OFFSETS_LOGIC@@YAXPAUUConverterFromUnicodeArgs@@PAW4UErrorCode@@@Z
	DD	00H
	DD	00H
	DD	FLAT:?_ISO2022getName@@YAPBDPBUUConverter@@@Z
	DD	FLAT:?_ISO_2022_WriteSub@@YAXPAUUConverterFromUnicodeArgs@@HPAW4UErrorCode@@@Z
	DD	FLAT:?_ISO_2022_SafeClone@@YAPAUUConverter@@PBU1@PAXPAHPAW4UErrorCode@@@Z
	DD	FLAT:?_ISO_2022_GetUnicodeSet@@YAXPBUUConverter@@PBUUSetAdder@@W4UConverterUnicodeSet@@PAW4UErrorCode@@@Z
	DD	00H
	DD	00H
__ISO2022CNStaticData DD 064H
	DB	'ISO_2022_CN', 00H
	ORG $+48
	DD	00H
	DB	00H
	DB	0aH
	DB	01H
	DB	08H
	DB	01aH
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+4
?_ISO2022CNData@?A0x5ec8f556@@3UUConverterSharedData@@B DD 0e4H ; `anonymous namespace'::_ISO2022CNData
	DD	0ffffffffH
	DD	00H
	DD	FLAT:__ISO2022CNStaticData
	DB	00H
	DB	00H
	ORG $+2
	DD	FLAT:__ISO2022CNImpl
	DD	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+1
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	ORG $+126
	DD	00H
	DD	00H
	DD	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+1
	DW	00H
	ORG $+2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
CONST	ENDS
;	COMDAT ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 02H		; std::_Iosb<int>::end
CONST	ENDS
;	COMDAT ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 01H		; std::_Iosb<int>::cur
CONST	ENDS
;	COMDAT ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 00H		; std::_Iosb<int>::beg
CONST	ENDS
;	COMDAT ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B DD 020H	; std::_Iosb<int>::binary
CONST	ENDS
;	COMDAT ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B DD 080H	; std::_Iosb<int>::_Noreplace
CONST	ENDS
;	COMDAT ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 040H	; std::_Iosb<int>::_Nocreate
CONST	ENDS
;	COMDAT ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B DD 010H		; std::_Iosb<int>::trunc
CONST	ENDS
;	COMDAT ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?app@?$_Iosb@H@std@@2W4_Openmode@12@B DD 08H		; std::_Iosb<int>::app
CONST	ENDS
;	COMDAT ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 04H		; std::_Iosb<int>::ate
CONST	ENDS
;	COMDAT ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?out@?$_Iosb@H@std@@2W4_Openmode@12@B DD 02H		; std::_Iosb<int>::out
CONST	ENDS
;	COMDAT ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?in@?$_Iosb@H@std@@2W4_Openmode@12@B DD 01H		; std::_Iosb<int>::in
CONST	ENDS
;	COMDAT ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B DD 010H	; std::_Iosb<int>::_Hardfail
CONST	ENDS
;	COMDAT ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 04H		; std::_Iosb<int>::badbit
CONST	ENDS
;	COMDAT ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 02H		; std::_Iosb<int>::failbit
CONST	ENDS
;	COMDAT ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 01H		; std::_Iosb<int>::eofbit
CONST	ENDS
;	COMDAT ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 00H		; std::_Iosb<int>::goodbit
CONST	ENDS
;	COMDAT ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::floatfield
CONST	ENDS
;	COMDAT ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0e00H	; std::_Iosb<int>::basefield
CONST	ENDS
;	COMDAT ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01c0H	; std::_Iosb<int>::adjustfield
CONST	ENDS
;	COMDAT ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08000H	; std::_Iosb<int>::_Stdio
CONST	ENDS
;	COMDAT ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04000H	; std::_Iosb<int>::boolalpha
CONST	ENDS
;	COMDAT ?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::hexfloat
CONST	ENDS
;	COMDAT ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02000H	; std::_Iosb<int>::fixed
CONST	ENDS
;	COMDAT ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01000H	; std::_Iosb<int>::scientific
CONST	ENDS
;	COMDAT ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0800H		; std::_Iosb<int>::hex
CONST	ENDS
;	COMDAT ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0400H		; std::_Iosb<int>::oct
CONST	ENDS
;	COMDAT ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0200H		; std::_Iosb<int>::dec
CONST	ENDS
;	COMDAT ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0100H	; std::_Iosb<int>::internal
CONST	ENDS
;	COMDAT ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 080H		; std::_Iosb<int>::right
CONST	ENDS
;	COMDAT ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 040H		; std::_Iosb<int>::left
CONST	ENDS
;	COMDAT ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 020H	; std::_Iosb<int>::showpos
CONST	ENDS
;	COMDAT ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 010H	; std::_Iosb<int>::showpoint
CONST	ENDS
;	COMDAT ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08H	; std::_Iosb<int>::showbase
CONST	ENDS
;	COMDAT ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04H	; std::_Iosb<int>::uppercase
CONST	ENDS
;	COMDAT ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02H	; std::_Iosb<int>::unitbuf
CONST	ENDS
;	COMDAT ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01H		; std::_Iosb<int>::skipws
CONST	ENDS
;	COMDAT ?none@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?none@?$_Locbase@H@std@@2HB DD 00H			; std::_Locbase<int>::none
CONST	ENDS
;	COMDAT ?all@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?all@?$_Locbase@H@std@@2HB DD 03fH			; std::_Locbase<int>::all
CONST	ENDS
;	COMDAT ?messages@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?messages@?$_Locbase@H@std@@2HB DD 020H			; std::_Locbase<int>::messages
CONST	ENDS
;	COMDAT ?time@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?time@?$_Locbase@H@std@@2HB DD 010H			; std::_Locbase<int>::time
CONST	ENDS
;	COMDAT ?numeric@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?numeric@?$_Locbase@H@std@@2HB DD 08H			; std::_Locbase<int>::numeric
CONST	ENDS
;	COMDAT ?monetary@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?monetary@?$_Locbase@H@std@@2HB DD 04H			; std::_Locbase<int>::monetary
CONST	ENDS
;	COMDAT ?ctype@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?ctype@?$_Locbase@H@std@@2HB DD 02H			; std::_Locbase<int>::ctype
CONST	ENDS
;	COMDAT ?collate@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?collate@?$_Locbase@H@std@@2HB DD 01H			; std::_Locbase<int>::collate
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@O@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@O@std@@2HB DD 09H		; std::_Arithmetic_traits<long double>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@N@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@N@std@@2HB DD 08H		; std::_Arithmetic_traits<double>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@M@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@M@std@@2HB DD 07H		; std::_Arithmetic_traits<float>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@_K@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@_K@std@@2HB DD 06H		; std::_Arithmetic_traits<unsigned __int64>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@_J@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@_J@std@@2HB DD 06H		; std::_Arithmetic_traits<__int64>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@K@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@K@std@@2HB DD 05H		; std::_Arithmetic_traits<unsigned long>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@J@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@J@std@@2HB DD 05H		; std::_Arithmetic_traits<long>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@I@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@I@std@@2HB DD 04H		; std::_Arithmetic_traits<unsigned int>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@H@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@H@std@@2HB DD 04H		; std::_Arithmetic_traits<int>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@G@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@G@std@@2HB DD 03H		; std::_Arithmetic_traits<unsigned short>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@F@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@F@std@@2HB DD 03H		; std::_Arithmetic_traits<short>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@E@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@E@std@@2HB DD 02H		; std::_Arithmetic_traits<unsigned char>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@C@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@C@std@@2HB DD 02H		; std::_Arithmetic_traits<signed char>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@D@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@D@std@@2HB DD 02H		; std::_Arithmetic_traits<char>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@_N@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@_N@std@@2HB DD 01H		; std::_Arithmetic_traits<bool>::_Rank
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@tr1@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@tr1@std@@2IB DD 00H	; std::tr1::integral_constant<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@tr1@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@tr1@std@@2_NB DB 01H	; std::tr1::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@tr1@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@tr1@std@@2_NB DB 00H	; std::tr1::integral_constant<bool,0>::value
CONST	ENDS
PUBLIC	??2@YAPAXI@Z					; operator new
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File d:\mozilla\intl\icu\source\common\unicode\utypes.h
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT ??2@YAPAXI@Z
_TEXT	SEGMENT
_q$ = -8						; size = 4
___formal$ = 8						; size = 4
??2@YAPAXI@Z PROC					; operator new, COMDAT
; Line 411
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 412
	mov	DWORD PTR _q$[ebp], 0
; Line 413
	mov	eax, DWORD PTR _q$[ebp]
	mov	BYTE PTR [eax], 5
; Line 414
	mov	eax, DWORD PTR _q$[ebp]
; Line 415
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??2@YAPAXI@Z ENDP					; operator new
_TEXT	ENDS
PUBLIC	??3@YAXPAX@Z					; operator delete
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??3@YAXPAX@Z
_TEXT	SEGMENT
_q$ = -8						; size = 4
___formal$ = 8						; size = 4
??3@YAXPAX@Z PROC					; operator delete, COMDAT
; Line 439
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 440
	mov	DWORD PTR _q$[ebp], 0
; Line 441
	mov	eax, DWORD PTR _q$[ebp]
	mov	BYTE PTR [eax], 5
; Line 442
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??3@YAXPAX@Z ENDP					; operator delete
_TEXT	ENDS
PUBLIC	??2UMemory@icu_56@@SAPAXIPAX@Z			; icu_56::UMemory::operator new
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??2UMemory@icu_56@@SAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_ptr$ = 12						; size = 4
??2UMemory@icu_56@@SAPAXIPAX@Z PROC			; icu_56::UMemory::operator new, COMDAT
; File d:\mozilla\intl\icu\source\common\unicode\uobject.h
; Line 161
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR _ptr$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??2UMemory@icu_56@@SAPAXIPAX@Z ENDP			; icu_56::UMemory::operator new
_TEXT	ENDS
PUBLIC	??3UMemory@icu_56@@SAXPAX0@Z			; icu_56::UMemory::operator delete
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??3UMemory@icu_56@@SAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3UMemory@icu_56@@SAXPAX0@Z PROC			; icu_56::UMemory::operator delete, COMDAT
; Line 168
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??3UMemory@icu_56@@SAXPAX0@Z ENDP			; icu_56::UMemory::operator delete
_TEXT	ENDS
PUBLIC	??4UMemory@icu_56@@QAEAAV01@ABV01@@Z		; icu_56::UMemory::operator=
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??4UMemory@icu_56@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___that$ = 8						; size = 4
??4UMemory@icu_56@@QAEAAV01@ABV01@@Z PROC		; icu_56::UMemory::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4UMemory@icu_56@@QAEAAV01@ABV01@@Z ENDP		; icu_56::UMemory::operator=
_TEXT	ENDS
PUBLIC	??_7UObject@icu_56@@6B@				; icu_56::UObject::`vftable'
PUBLIC	??0UObject@icu_56@@QAE@XZ			; icu_56::UObject::UObject
PUBLIC	??_R4UObject@icu_56@@6B@			; icu_56::UObject::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVUObject@icu_56@@@8			; icu_56::UObject `RTTI Type Descriptor'
PUBLIC	??_R3UObject@icu_56@@8				; icu_56::UObject::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2UObject@icu_56@@8				; icu_56::UObject::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@UObject@icu_56@@8			; icu_56::UObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R13?0A@EA@UMemory@icu_56@@8			; icu_56::UMemory::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	??_R0?AVUMemory@icu_56@@@8			; icu_56::UMemory `RTTI Type Descriptor'
PUBLIC	??_R3UMemory@icu_56@@8				; icu_56::UMemory::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2UMemory@icu_56@@8				; icu_56::UMemory::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@UMemory@icu_56@@8			; icu_56::UMemory::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_EUObject@icu_56@@UAEPAXI@Z			; icu_56::UObject::`vector deleting destructor'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?getDynamicClassID@UObject@icu_56@@UBEPAXXZ:PROC ; icu_56::UObject::getDynamicClassID
;	COMDAT ??_R1A@?0A@EA@UMemory@icu_56@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@UMemory@icu_56@@8 DD FLAT:??_R0?AVUMemory@icu_56@@@8 ; icu_56::UMemory::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3UMemory@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_R2UMemory@icu_56@@8
rdata$r	SEGMENT
??_R2UMemory@icu_56@@8 DD FLAT:??_R1A@?0A@EA@UMemory@icu_56@@8 ; icu_56::UMemory::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3UMemory@icu_56@@8
rdata$r	SEGMENT
??_R3UMemory@icu_56@@8 DD 00H				; icu_56::UMemory::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2UMemory@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVUMemory@icu_56@@@8
_DATA	SEGMENT
??_R0?AVUMemory@icu_56@@@8 DD FLAT:??_7type_info@@6B@	; icu_56::UMemory `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVUMemory@icu_56@@', 00H
_DATA	ENDS
;	COMDAT ??_R13?0A@EA@UMemory@icu_56@@8
rdata$r	SEGMENT
??_R13?0A@EA@UMemory@icu_56@@8 DD FLAT:??_R0?AVUMemory@icu_56@@@8 ; icu_56::UMemory::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	00H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3UMemory@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@UObject@icu_56@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@UObject@icu_56@@8 DD FLAT:??_R0?AVUObject@icu_56@@@8 ; icu_56::UObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3UObject@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_R2UObject@icu_56@@8
rdata$r	SEGMENT
??_R2UObject@icu_56@@8 DD FLAT:??_R1A@?0A@EA@UObject@icu_56@@8 ; icu_56::UObject::`RTTI Base Class Array'
	DD	FLAT:??_R13?0A@EA@UMemory@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_R3UObject@icu_56@@8
rdata$r	SEGMENT
??_R3UObject@icu_56@@8 DD 00H				; icu_56::UObject::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2UObject@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVUObject@icu_56@@@8
_DATA	SEGMENT
??_R0?AVUObject@icu_56@@@8 DD FLAT:??_7type_info@@6B@	; icu_56::UObject `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVUObject@icu_56@@', 00H
_DATA	ENDS
;	COMDAT ??_R4UObject@icu_56@@6B@
rdata$r	SEGMENT
??_R4UObject@icu_56@@6B@ DD 00H				; icu_56::UObject::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVUObject@icu_56@@@8
	DD	FLAT:??_R3UObject@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_7UObject@icu_56@@6B@
CONST	SEGMENT
??_7UObject@icu_56@@6B@ DD FLAT:??_R4UObject@icu_56@@6B@ ; icu_56::UObject::`vftable'
	DD	FLAT:??_EUObject@icu_56@@UAEPAXI@Z
	DD	FLAT:?getDynamicClassID@UObject@icu_56@@UBEPAXXZ
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ??0UObject@icu_56@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0UObject@icu_56@@QAE@XZ PROC				; icu_56::UObject::UObject, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7UObject@icu_56@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0UObject@icu_56@@QAE@XZ ENDP				; icu_56::UObject::UObject
_TEXT	ENDS
PUBLIC	??0UObject@icu_56@@QAE@ABV01@@Z			; icu_56::UObject::UObject
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0UObject@icu_56@@QAE@ABV01@@Z
_TEXT	SEGMENT
tv68 = -208						; size = 4
_this$ = -8						; size = 4
___that$ = 8						; size = 4
??0UObject@icu_56@@QAE@ABV01@@Z PROC			; icu_56::UObject::UObject, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	cmp	DWORD PTR ___that$[ebp], 0
	je	SHORT $LN3@UObject
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 4
	mov	DWORD PTR tv68[ebp], eax
	jmp	SHORT $LN4@UObject
$LN3@UObject:
	mov	DWORD PTR tv68[ebp], 0
$LN4@UObject:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7UObject@icu_56@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0UObject@icu_56@@QAE@ABV01@@Z ENDP			; icu_56::UObject::UObject
_TEXT	ENDS
PUBLIC	??4UObject@icu_56@@QAEAAV01@ABV01@@Z		; icu_56::UObject::operator=
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??4UObject@icu_56@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___that$ = 8						; size = 4
??4UObject@icu_56@@QAEAAV01@ABV01@@Z PROC		; icu_56::UObject::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4UObject@icu_56@@QAEAAV01@ABV01@@Z ENDP		; icu_56::UObject::operator=
_TEXT	ENDS
PUBLIC	??_GUObject@icu_56@@UAEPAXI@Z			; icu_56::UObject::`scalar deleting destructor'
EXTRN	??3UMemory@icu_56@@SAXPAX@Z:PROC		; icu_56::UMemory::operator delete
EXTRN	??1UObject@icu_56@@UAE@XZ:PROC			; icu_56::UObject::~UObject
EXTRN	__RTC_CheckEsp:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GUObject@icu_56@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_GUObject@icu_56@@UAEPAXI@Z PROC			; icu_56::UObject::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1UObject@icu_56@@UAE@XZ		; icu_56::UObject::~UObject
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3UMemory@icu_56@@SAXPAX@Z		; icu_56::UMemory::operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GUObject@icu_56@@UAEPAXI@Z ENDP			; icu_56::UObject::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	??_VUMemory@icu_56@@SAXPAX@Z:PROC		; icu_56::UMemory::operator delete[]
EXTRN	??_M@YGXPAXIHP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_EUObject@icu_56@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_EUObject@icu_56@@UAEPAXI@Z PROC			; icu_56::UObject::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector
	push	OFFSET ??1UObject@icu_56@@UAE@XZ	; icu_56::UObject::~UObject
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	push	ecx
	push	4
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@vector
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	push	eax
	call	??_VUMemory@icu_56@@SAXPAX@Z		; icu_56::UMemory::operator delete[]
	add	esp, 4
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN3@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1UObject@icu_56@@UAE@XZ		; icu_56::UObject::~UObject
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3UMemory@icu_56@@SAXPAX@Z		; icu_56::UMemory::operator delete
	add	esp, 4
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_EUObject@icu_56@@UAEPAXI@Z ENDP			; icu_56::UObject::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	??_7Replaceable@icu_56@@6B@			; icu_56::Replaceable::`vftable'
PUBLIC	??0Replaceable@icu_56@@QAE@ABV01@@Z		; icu_56::Replaceable::Replaceable
PUBLIC	??_R4Replaceable@icu_56@@6B@			; icu_56::Replaceable::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVReplaceable@icu_56@@@8			; icu_56::Replaceable `RTTI Type Descriptor'
PUBLIC	??_R3Replaceable@icu_56@@8			; icu_56::Replaceable::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Replaceable@icu_56@@8			; icu_56::Replaceable::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@Replaceable@icu_56@@8		; icu_56::Replaceable::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_EReplaceable@icu_56@@UAEPAXI@Z		; icu_56::Replaceable::`vector deleting destructor'
EXTRN	__purecall:PROC
EXTRN	?hasMetaData@Replaceable@icu_56@@UBECXZ:PROC	; icu_56::Replaceable::hasMetaData
EXTRN	?clone@Replaceable@icu_56@@UBEPAV12@XZ:PROC	; icu_56::Replaceable::clone
;	COMDAT ??_R1A@?0A@EA@Replaceable@icu_56@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Replaceable@icu_56@@8 DD FLAT:??_R0?AVReplaceable@icu_56@@@8 ; icu_56::Replaceable::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Replaceable@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_R2Replaceable@icu_56@@8
rdata$r	SEGMENT
??_R2Replaceable@icu_56@@8 DD FLAT:??_R1A@?0A@EA@Replaceable@icu_56@@8 ; icu_56::Replaceable::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@UObject@icu_56@@8
	DD	FLAT:??_R13?0A@EA@UMemory@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_R3Replaceable@icu_56@@8
rdata$r	SEGMENT
??_R3Replaceable@icu_56@@8 DD 00H			; icu_56::Replaceable::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2Replaceable@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVReplaceable@icu_56@@@8
_DATA	SEGMENT
??_R0?AVReplaceable@icu_56@@@8 DD FLAT:??_7type_info@@6B@ ; icu_56::Replaceable `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVReplaceable@icu_56@@', 00H
_DATA	ENDS
;	COMDAT ??_R4Replaceable@icu_56@@6B@
rdata$r	SEGMENT
??_R4Replaceable@icu_56@@6B@ DD 00H			; icu_56::Replaceable::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVReplaceable@icu_56@@@8
	DD	FLAT:??_R3Replaceable@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_7Replaceable@icu_56@@6B@
CONST	SEGMENT
??_7Replaceable@icu_56@@6B@ DD FLAT:??_R4Replaceable@icu_56@@6B@ ; icu_56::Replaceable::`vftable'
	DD	FLAT:??_EReplaceable@icu_56@@UAEPAXI@Z
	DD	FLAT:?getDynamicClassID@UObject@icu_56@@UBEPAXXZ
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?hasMetaData@Replaceable@icu_56@@UBECXZ
	DD	FLAT:?clone@Replaceable@icu_56@@UBEPAV12@XZ
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ??0Replaceable@icu_56@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___that$ = 8						; size = 4
??0Replaceable@icu_56@@QAE@ABV01@@Z PROC		; icu_56::Replaceable::Replaceable, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0UObject@icu_56@@QAE@ABV01@@Z
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7Replaceable@icu_56@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0Replaceable@icu_56@@QAE@ABV01@@Z ENDP		; icu_56::Replaceable::Replaceable
_TEXT	ENDS
PUBLIC	??4Replaceable@icu_56@@QAEAAV01@ABV01@@Z	; icu_56::Replaceable::operator=
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??4Replaceable@icu_56@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___that$ = 8						; size = 4
??4Replaceable@icu_56@@QAEAAV01@ABV01@@Z PROC		; icu_56::Replaceable::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4UObject@icu_56@@QAEAAV01@ABV01@@Z
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4Replaceable@icu_56@@QAEAAV01@ABV01@@Z ENDP		; icu_56::Replaceable::operator=
_TEXT	ENDS
PUBLIC	??_GReplaceable@icu_56@@UAEPAXI@Z		; icu_56::Replaceable::`scalar deleting destructor'
EXTRN	??1Replaceable@icu_56@@UAE@XZ:PROC		; icu_56::Replaceable::~Replaceable
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GReplaceable@icu_56@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_GReplaceable@icu_56@@UAEPAXI@Z PROC			; icu_56::Replaceable::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1Replaceable@icu_56@@UAE@XZ		; icu_56::Replaceable::~Replaceable
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@2
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3UMemory@icu_56@@SAXPAX@Z		; icu_56::UMemory::operator delete
	add	esp, 4
$LN1@scalar@2:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GReplaceable@icu_56@@UAEPAXI@Z ENDP			; icu_56::Replaceable::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??_EReplaceable@icu_56@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_EReplaceable@icu_56@@UAEPAXI@Z PROC			; icu_56::Replaceable::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector@2
	push	OFFSET ??1Replaceable@icu_56@@UAE@XZ	; icu_56::Replaceable::~Replaceable
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	push	ecx
	push	4
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@vector@2
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	push	eax
	call	??_VUMemory@icu_56@@SAXPAX@Z		; icu_56::UMemory::operator delete[]
	add	esp, 4
$LN2@vector@2:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector@2
$LN3@vector@2:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1Replaceable@icu_56@@UAE@XZ		; icu_56::Replaceable::~Replaceable
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector@2
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3UMemory@icu_56@@SAXPAX@Z		; icu_56::UMemory::operator delete
	add	esp, 4
$LN1@vector@2:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@2:
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_EReplaceable@icu_56@@UAEPAXI@Z ENDP			; icu_56::Replaceable::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	??0Replaceable@icu_56@@IAE@XZ			; icu_56::Replaceable::Replaceable
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0Replaceable@icu_56@@IAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0Replaceable@icu_56@@IAE@XZ PROC			; icu_56::Replaceable::Replaceable, COMDAT
; _this$ = ecx
; File d:\mozilla\intl\icu\source\common\unicode\rep.h
; Line 240
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0UObject@icu_56@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7Replaceable@icu_56@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0Replaceable@icu_56@@IAE@XZ ENDP			; icu_56::Replaceable::Replaceable
_TEXT	ENDS
PUBLIC	?length@Replaceable@icu_56@@QBEHXZ		; icu_56::Replaceable::length
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?length@Replaceable@icu_56@@QBEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?length@Replaceable@icu_56@@QBEHXZ PROC			; icu_56::Replaceable::length, COMDAT
; _this$ = ecx
; Line 243
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 244
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 245
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?length@Replaceable@icu_56@@QBEHXZ ENDP			; icu_56::Replaceable::length
_TEXT	ENDS
PUBLIC	?charAt@Replaceable@icu_56@@QBE_WH@Z		; icu_56::Replaceable::charAt
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?charAt@Replaceable@icu_56@@QBE_WH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_offset$ = 8						; size = 4
?charAt@Replaceable@icu_56@@QBE_WH@Z PROC		; icu_56::Replaceable::charAt, COMDAT
; _this$ = ecx
; Line 248
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 249
	mov	esi, esp
	mov	eax, DWORD PTR _offset$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+32]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 250
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?charAt@Replaceable@icu_56@@QBE_WH@Z ENDP		; icu_56::Replaceable::charAt
_TEXT	ENDS
PUBLIC	?char32At@Replaceable@icu_56@@QBEHH@Z		; icu_56::Replaceable::char32At
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?char32At@Replaceable@icu_56@@QBEHH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_offset$ = 8						; size = 4
?char32At@Replaceable@icu_56@@QBEHH@Z PROC		; icu_56::Replaceable::char32At, COMDAT
; _this$ = ecx
; Line 253
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 254
	mov	esi, esp
	mov	eax, DWORD PTR _offset$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+36]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 255
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?char32At@Replaceable@icu_56@@QBEHH@Z ENDP		; icu_56::Replaceable::char32At
_TEXT	ENDS
PUBLIC	??0StringPiece@icu_56@@QAE@XZ			; icu_56::StringPiece::StringPiece
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0StringPiece@icu_56@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0StringPiece@icu_56@@QAE@XZ PROC			; icu_56::StringPiece::StringPiece, COMDAT
; _this$ = ecx
; File d:\mozilla\intl\icu\source\common\unicode\stringpiece.h
; Line 62
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0StringPiece@icu_56@@QAE@XZ ENDP			; icu_56::StringPiece::StringPiece
_TEXT	ENDS
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
PUBLIC	?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::data
PUBLIC	??0StringPiece@icu_56@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; icu_56::StringPiece::StringPiece
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0StringPiece@icu_56@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_str$ = 8						; size = 4
??0StringPiece@icu_56@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; icu_56::StringPiece::StringPiece, COMDAT
; _this$ = ecx
; Line 74
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _str$[ebp]
	call	?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::data
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	ecx, DWORD PTR _str$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0StringPiece@icu_56@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; icu_56::StringPiece::StringPiece
_TEXT	ENDS
PUBLIC	??0StringPiece@icu_56@@QAE@PBDH@Z		; icu_56::StringPiece::StringPiece
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0StringPiece@icu_56@@QAE@PBDH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_offset$ = 8						; size = 4
_len$ = 12						; size = 4
??0StringPiece@icu_56@@QAE@PBDH@Z PROC			; icu_56::StringPiece::StringPiece, COMDAT
; _this$ = ecx
; Line 83
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _offset$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _len$[ebp]
	mov	DWORD PTR [eax+4], ecx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0StringPiece@icu_56@@QAE@PBDH@Z ENDP			; icu_56::StringPiece::StringPiece
_TEXT	ENDS
PUBLIC	?data@StringPiece@icu_56@@QBEPBDXZ		; icu_56::StringPiece::data
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?data@StringPiece@icu_56@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?data@StringPiece@icu_56@@QBEPBDXZ PROC			; icu_56::StringPiece::data, COMDAT
; _this$ = ecx
; Line 111
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?data@StringPiece@icu_56@@QBEPBDXZ ENDP			; icu_56::StringPiece::data
_TEXT	ENDS
PUBLIC	?size@StringPiece@icu_56@@QBEHXZ		; icu_56::StringPiece::size
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?size@StringPiece@icu_56@@QBEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?size@StringPiece@icu_56@@QBEHXZ PROC			; icu_56::StringPiece::size, COMDAT
; _this$ = ecx
; Line 117
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?size@StringPiece@icu_56@@QBEHXZ ENDP			; icu_56::StringPiece::size
_TEXT	ENDS
PUBLIC	?length@StringPiece@icu_56@@QBEHXZ		; icu_56::StringPiece::length
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?length@StringPiece@icu_56@@QBEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?length@StringPiece@icu_56@@QBEHXZ PROC			; icu_56::StringPiece::length, COMDAT
; _this$ = ecx
; Line 123
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?length@StringPiece@icu_56@@QBEHXZ ENDP			; icu_56::StringPiece::length
_TEXT	ENDS
PUBLIC	?empty@StringPiece@icu_56@@QBECXZ		; icu_56::StringPiece::empty
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?empty@StringPiece@icu_56@@QBECXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?empty@StringPiece@icu_56@@QBECXZ PROC			; icu_56::StringPiece::empty, COMDAT
; _this$ = ecx
; Line 129
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	sete	al
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?empty@StringPiece@icu_56@@QBECXZ ENDP			; icu_56::StringPiece::empty
_TEXT	ENDS
PUBLIC	?clear@StringPiece@icu_56@@QAEXXZ		; icu_56::StringPiece::clear
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?clear@StringPiece@icu_56@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?clear@StringPiece@icu_56@@QAEXXZ PROC			; icu_56::StringPiece::clear, COMDAT
; _this$ = ecx
; Line 135
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?clear@StringPiece@icu_56@@QAEXXZ ENDP			; icu_56::StringPiece::clear
_TEXT	ENDS
PUBLIC	?set@StringPiece@icu_56@@QAEXPBDH@Z		; icu_56::StringPiece::set
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?set@StringPiece@icu_56@@QAEXPBDH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_xdata$ = 8						; size = 4
_len$ = 12						; size = 4
?set@StringPiece@icu_56@@QAEXPBDH@Z PROC		; icu_56::StringPiece::set, COMDAT
; _this$ = ecx
; Line 143
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _xdata$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _len$[ebp]
	mov	DWORD PTR [eax+4], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?set@StringPiece@icu_56@@QAEXPBDH@Z ENDP		; icu_56::StringPiece::set
_TEXT	ENDS
PUBLIC	?remove_prefix@StringPiece@icu_56@@QAEXH@Z	; icu_56::StringPiece::remove_prefix
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?remove_prefix@StringPiece@icu_56@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_n$ = 8							; size = 4
?remove_prefix@StringPiece@icu_56@@QAEXH@Z PROC		; icu_56::StringPiece::remove_prefix, COMDAT
; _this$ = ecx
; Line 157
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 158
	cmp	DWORD PTR _n$[ebp], 0
	jl	SHORT $LN3@remove_pre
; Line 159
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _n$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jle	SHORT $LN1@remove_pre
; Line 160
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _n$[ebp], ecx
$LN1@remove_pre:
; Line 162
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 163
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx
$LN3@remove_pre:
; Line 165
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?remove_prefix@StringPiece@icu_56@@QAEXH@Z ENDP		; icu_56::StringPiece::remove_prefix
_TEXT	ENDS
PUBLIC	?remove_suffix@StringPiece@icu_56@@QAEXH@Z	; icu_56::StringPiece::remove_suffix
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?remove_suffix@StringPiece@icu_56@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_n$ = 8							; size = 4
?remove_suffix@StringPiece@icu_56@@QAEXH@Z PROC		; icu_56::StringPiece::remove_suffix, COMDAT
; _this$ = ecx
; Line 172
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 173
	cmp	DWORD PTR _n$[ebp], 0
	jl	SHORT $LN4@remove_suf
; Line 174
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _n$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jg	SHORT $LN2@remove_suf
; Line 175
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx
; Line 176
	jmp	SHORT $LN4@remove_suf
$LN2@remove_suf:
; Line 177
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
$LN4@remove_suf:
; Line 180
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?remove_suffix@StringPiece@icu_56@@QAEXH@Z ENDP		; icu_56::StringPiece::remove_suffix
_TEXT	ENDS
PUBLIC	?substr@StringPiece@icu_56@@QBE?AV12@HH@Z	; icu_56::StringPiece::substr
EXTRN	??0StringPiece@icu_56@@QAE@ABV01@HH@Z:PROC	; icu_56::StringPiece::StringPiece
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?substr@StringPiece@icu_56@@QBE?AV12@HH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
_pos$ = 12						; size = 4
_len$ = 16						; size = 4
?substr@StringPiece@icu_56@@QBE?AV12@HH@Z PROC		; icu_56::StringPiece::substr, COMDAT
; _this$ = ecx
; Line 196
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 197
	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pos$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0StringPiece@icu_56@@QAE@ABV01@HH@Z	; icu_56::StringPiece::StringPiece
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 198
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?substr@StringPiece@icu_56@@QBE?AV12@HH@Z ENDP		; icu_56::StringPiece::substr
_TEXT	ENDS
PUBLIC	??4StringPiece@icu_56@@QAEAAV01@ABV01@@Z	; icu_56::StringPiece::operator=
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??4StringPiece@icu_56@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___that$ = 8						; size = 4
??4StringPiece@icu_56@@QAEAAV01@ABV01@@Z PROC		; icu_56::StringPiece::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4StringPiece@icu_56@@QAEAAV01@ABV01@@Z ENDP		; icu_56::StringPiece::operator=
_TEXT	ENDS
PUBLIC	??_7ByteSink@icu_56@@6B@			; icu_56::ByteSink::`vftable'
PUBLIC	??0ByteSink@icu_56@@QAE@XZ			; icu_56::ByteSink::ByteSink
PUBLIC	??_R4ByteSink@icu_56@@6B@			; icu_56::ByteSink::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVByteSink@icu_56@@@8			; icu_56::ByteSink `RTTI Type Descriptor'
PUBLIC	??_R3ByteSink@icu_56@@8				; icu_56::ByteSink::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ByteSink@icu_56@@8				; icu_56::ByteSink::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ByteSink@icu_56@@8		; icu_56::ByteSink::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_EByteSink@icu_56@@UAEPAXI@Z			; icu_56::ByteSink::`vector deleting destructor'
EXTRN	?GetAppendBuffer@ByteSink@icu_56@@UAEPADHHPADHPAH@Z:PROC ; icu_56::ByteSink::GetAppendBuffer
EXTRN	?Flush@ByteSink@icu_56@@UAEXXZ:PROC		; icu_56::ByteSink::Flush
;	COMDAT ??_R1A@?0A@EA@ByteSink@icu_56@@8
; File d:\mozilla\intl\icu\source\common\unicode\bytestream.h
rdata$r	SEGMENT
??_R1A@?0A@EA@ByteSink@icu_56@@8 DD FLAT:??_R0?AVByteSink@icu_56@@@8 ; icu_56::ByteSink::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ByteSink@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_R2ByteSink@icu_56@@8
rdata$r	SEGMENT
??_R2ByteSink@icu_56@@8 DD FLAT:??_R1A@?0A@EA@ByteSink@icu_56@@8 ; icu_56::ByteSink::`RTTI Base Class Array'
	DD	FLAT:??_R13?0A@EA@UMemory@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_R3ByteSink@icu_56@@8
rdata$r	SEGMENT
??_R3ByteSink@icu_56@@8 DD 00H				; icu_56::ByteSink::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ByteSink@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVByteSink@icu_56@@@8
_DATA	SEGMENT
??_R0?AVByteSink@icu_56@@@8 DD FLAT:??_7type_info@@6B@	; icu_56::ByteSink `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVByteSink@icu_56@@', 00H
_DATA	ENDS
;	COMDAT ??_R4ByteSink@icu_56@@6B@
rdata$r	SEGMENT
??_R4ByteSink@icu_56@@6B@ DD 00H			; icu_56::ByteSink::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVByteSink@icu_56@@@8
	DD	FLAT:??_R3ByteSink@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_7ByteSink@icu_56@@6B@
CONST	SEGMENT
??_7ByteSink@icu_56@@6B@ DD FLAT:??_R4ByteSink@icu_56@@6B@ ; icu_56::ByteSink::`vftable'
	DD	FLAT:??_EByteSink@icu_56@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:?GetAppendBuffer@ByteSink@icu_56@@UAEPADHHPADHPAH@Z
	DD	FLAT:?Flush@ByteSink@icu_56@@UAEXXZ
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ??0ByteSink@icu_56@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0ByteSink@icu_56@@QAE@XZ PROC				; icu_56::ByteSink::ByteSink, COMDAT
; _this$ = ecx
; Line 54
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7ByteSink@icu_56@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0ByteSink@icu_56@@QAE@XZ ENDP				; icu_56::ByteSink::ByteSink
_TEXT	ENDS
PUBLIC	??_GByteSink@icu_56@@UAEPAXI@Z			; icu_56::ByteSink::`scalar deleting destructor'
EXTRN	??1ByteSink@icu_56@@UAE@XZ:PROC			; icu_56::ByteSink::~ByteSink
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GByteSink@icu_56@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_GByteSink@icu_56@@UAEPAXI@Z PROC			; icu_56::ByteSink::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ByteSink@icu_56@@UAE@XZ		; icu_56::ByteSink::~ByteSink
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@3
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3UMemory@icu_56@@SAXPAX@Z		; icu_56::UMemory::operator delete
	add	esp, 4
$LN1@scalar@3:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GByteSink@icu_56@@UAEPAXI@Z ENDP			; icu_56::ByteSink::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??_EByteSink@icu_56@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_EByteSink@icu_56@@UAEPAXI@Z PROC			; icu_56::ByteSink::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector@3
	push	OFFSET ??1ByteSink@icu_56@@UAE@XZ	; icu_56::ByteSink::~ByteSink
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	push	ecx
	push	4
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@vector@3
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	push	eax
	call	??_VUMemory@icu_56@@SAXPAX@Z		; icu_56::UMemory::operator delete[]
	add	esp, 4
$LN2@vector@3:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector@3
$LN3@vector@3:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ByteSink@icu_56@@UAE@XZ		; icu_56::ByteSink::~ByteSink
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector@3
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3UMemory@icu_56@@SAXPAX@Z		; icu_56::UMemory::operator delete
	add	esp, 4
$LN1@vector@3:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@3:
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_EByteSink@icu_56@@UAEPAXI@Z ENDP			; icu_56::ByteSink::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	?NumberOfBytesWritten@CheckedArrayByteSink@icu_56@@QBEHXZ ; icu_56::CheckedArrayByteSink::NumberOfBytesWritten
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?NumberOfBytesWritten@CheckedArrayByteSink@icu_56@@QBEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?NumberOfBytesWritten@CheckedArrayByteSink@icu_56@@QBEHXZ PROC ; icu_56::CheckedArrayByteSink::NumberOfBytesWritten, COMDAT
; _this$ = ecx
; Line 196
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+12]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?NumberOfBytesWritten@CheckedArrayByteSink@icu_56@@QBEHXZ ENDP ; icu_56::CheckedArrayByteSink::NumberOfBytesWritten
_TEXT	ENDS
PUBLIC	?Overflowed@CheckedArrayByteSink@icu_56@@QBECXZ	; icu_56::CheckedArrayByteSink::Overflowed
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?Overflowed@CheckedArrayByteSink@icu_56@@QBECXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?Overflowed@CheckedArrayByteSink@icu_56@@QBECXZ PROC	; icu_56::CheckedArrayByteSink::Overflowed, COMDAT
; _this$ = ecx
; Line 203
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+20]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Overflowed@CheckedArrayByteSink@icu_56@@QBECXZ ENDP	; icu_56::CheckedArrayByteSink::Overflowed
_TEXT	ENDS
PUBLIC	?NumberOfBytesAppended@CheckedArrayByteSink@icu_56@@QBEHXZ ; icu_56::CheckedArrayByteSink::NumberOfBytesAppended
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?NumberOfBytesAppended@CheckedArrayByteSink@icu_56@@QBEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?NumberOfBytesAppended@CheckedArrayByteSink@icu_56@@QBEHXZ PROC ; icu_56::CheckedArrayByteSink::NumberOfBytesAppended, COMDAT
; _this$ = ecx
; Line 211
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?NumberOfBytesAppended@CheckedArrayByteSink@icu_56@@QBEHXZ ENDP ; icu_56::CheckedArrayByteSink::NumberOfBytesAppended
_TEXT	ENDS
PUBLIC	??4UnicodeString@icu_56@@QAEAAV01@$$QAV01@@Z	; icu_56::UnicodeString::operator=
EXTRN	?moveFrom@UnicodeString@icu_56@@QAEAAV12@AAV12@@Z:PROC ; icu_56::UnicodeString::moveFrom
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??4UnicodeString@icu_56@@QAEAAV01@$$QAV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_src$ = 8						; size = 4
??4UnicodeString@icu_56@@QAEAAV01@$$QAV01@@Z PROC	; icu_56::UnicodeString::operator=, COMDAT
; _this$ = ecx
; File d:\mozilla\intl\icu\source\common\unicode\unistr.h
; Line 1915
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1916
	mov	eax, DWORD PTR _src$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?moveFrom@UnicodeString@icu_56@@QAEAAV12@AAV12@@Z ; icu_56::UnicodeString::moveFrom
; Line 1917
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4UnicodeString@icu_56@@QAEAAV01@$$QAV01@@Z ENDP	; icu_56::UnicodeString::operator=
_TEXT	ENDS
PUBLIC	?swap@icu_56@@YAXAAVUnicodeString@1@0@Z		; icu_56::swap
EXTRN	?swap@UnicodeString@icu_56@@QAEXAAV12@@Z:PROC	; icu_56::UnicodeString::swap
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?swap@icu_56@@YAXAAVUnicodeString@1@0@Z
_TEXT	SEGMENT
_s1$ = 8						; size = 4
_s2$ = 12						; size = 4
?swap@icu_56@@YAXAAVUnicodeString@1@0@Z PROC		; icu_56::swap, COMDAT
; Line 1945
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1946
	mov	eax, DWORD PTR _s2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _s1$[ebp]
	call	?swap@UnicodeString@icu_56@@QAEXAAV12@@Z ; icu_56::UnicodeString::swap
; Line 1947
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?swap@icu_56@@YAXAAVUnicodeString@1@0@Z ENDP		; icu_56::swap
_TEXT	ENDS
PUBLIC	??_GUnicodeString@icu_56@@UAEPAXI@Z		; icu_56::UnicodeString::`scalar deleting destructor'
EXTRN	??1UnicodeString@icu_56@@UAE@XZ:PROC		; icu_56::UnicodeString::~UnicodeString
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GUnicodeString@icu_56@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_GUnicodeString@icu_56@@UAEPAXI@Z PROC		; icu_56::UnicodeString::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1UnicodeString@icu_56@@UAE@XZ		; icu_56::UnicodeString::~UnicodeString
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@4
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3UMemory@icu_56@@SAXPAX@Z		; icu_56::UMemory::operator delete
	add	esp, 4
$LN1@scalar@4:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GUnicodeString@icu_56@@UAEPAXI@Z ENDP		; icu_56::UnicodeString::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_EUnicodeString@icu_56@@UAEPAXI@Z		; icu_56::UnicodeString::`vector deleting destructor'
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_EUnicodeString@icu_56@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_EUnicodeString@icu_56@@UAEPAXI@Z PROC		; icu_56::UnicodeString::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector@4
	push	OFFSET ??1UnicodeString@icu_56@@UAE@XZ	; icu_56::UnicodeString::~UnicodeString
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	push	ecx
	push	64					; 00000040H
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@vector@4
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	push	eax
	call	??_VUMemory@icu_56@@SAXPAX@Z		; icu_56::UMemory::operator delete[]
	add	esp, 4
$LN2@vector@4:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector@4
$LN3@vector@4:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1UnicodeString@icu_56@@UAE@XZ		; icu_56::UnicodeString::~UnicodeString
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector@4
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3UMemory@icu_56@@SAXPAX@Z		; icu_56::UMemory::operator delete
	add	esp, 4
$LN1@vector@4:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@4:
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_EUnicodeString@icu_56@@UAEPAXI@Z ENDP		; icu_56::UnicodeString::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	?length@UnicodeString@icu_56@@QBEHXZ		; icu_56::UnicodeString::length
PUBLIC	?pinIndex@UnicodeString@icu_56@@ABEXAAH@Z	; icu_56::UnicodeString::pinIndex
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?pinIndex@UnicodeString@icu_56@@ABEXAAH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_start$ = 8						; size = 4
?pinIndex@UnicodeString@icu_56@@ABEXAAH@Z PROC		; icu_56::UnicodeString::pinIndex, COMDAT
; _this$ = ecx
; Line 3730
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 3732
	mov	eax, DWORD PTR _start$[ebp]
	cmp	DWORD PTR [eax], 0
	jge	SHORT $LN3@pinIndex
; Line 3733
	mov	eax, DWORD PTR _start$[ebp]
	mov	DWORD PTR [eax], 0
	jmp	SHORT $LN4@pinIndex
$LN3@pinIndex:
; Line 3734
	mov	ecx, DWORD PTR _this$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	mov	ecx, DWORD PTR _start$[ebp]
	cmp	DWORD PTR [ecx], eax
	jle	SHORT $LN4@pinIndex
; Line 3735
	mov	ecx, DWORD PTR _this$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	mov	ecx, DWORD PTR _start$[ebp]
	mov	DWORD PTR [ecx], eax
$LN4@pinIndex:
; Line 3737
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?pinIndex@UnicodeString@icu_56@@ABEXAAH@Z ENDP		; icu_56::UnicodeString::pinIndex
_TEXT	ENDS
PUBLIC	?pinIndices@UnicodeString@icu_56@@ABEXAAH0@Z	; icu_56::UnicodeString::pinIndices
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?pinIndices@UnicodeString@icu_56@@ABEXAAH0@Z
_TEXT	SEGMENT
_len$ = -20						; size = 4
_this$ = -8						; size = 4
_start$ = 8						; size = 4
__length$ = 12						; size = 4
?pinIndices@UnicodeString@icu_56@@ABEXAAH0@Z PROC	; icu_56::UnicodeString::pinIndices, COMDAT
; _this$ = ecx
; Line 3742
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 3744
	mov	ecx, DWORD PTR _this$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	mov	DWORD PTR _len$[ebp], eax
; Line 3745
	mov	eax, DWORD PTR _start$[ebp]
	cmp	DWORD PTR [eax], 0
	jge	SHORT $LN6@pinIndices
; Line 3746
	mov	eax, DWORD PTR _start$[ebp]
	mov	DWORD PTR [eax], 0
	jmp	SHORT $LN5@pinIndices
$LN6@pinIndices:
; Line 3747
	mov	eax, DWORD PTR _start$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR _len$[ebp]
	jle	SHORT $LN5@pinIndices
; Line 3748
	mov	eax, DWORD PTR _start$[ebp]
	mov	ecx, DWORD PTR _len$[ebp]
	mov	DWORD PTR [eax], ecx
$LN5@pinIndices:
; Line 3750
	mov	eax, DWORD PTR __length$[ebp]
	cmp	DWORD PTR [eax], 0
	jge	SHORT $LN3@pinIndices
; Line 3751
	mov	eax, DWORD PTR __length$[ebp]
	mov	DWORD PTR [eax], 0
	jmp	SHORT $LN7@pinIndices
$LN3@pinIndices:
; Line 3752
	mov	eax, DWORD PTR _start$[ebp]
	mov	ecx, DWORD PTR _len$[ebp]
	sub	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __length$[ebp]
	cmp	DWORD PTR [edx], ecx
	jle	SHORT $LN7@pinIndices
; Line 3753
	mov	eax, DWORD PTR _start$[ebp]
	mov	ecx, DWORD PTR _len$[ebp]
	sub	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __length$[ebp]
	mov	DWORD PTR [edx], ecx
$LN7@pinIndices:
; Line 3755
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?pinIndices@UnicodeString@icu_56@@ABEXAAH0@Z ENDP	; icu_56::UnicodeString::pinIndices
_TEXT	ENDS
PUBLIC	?getArrayStart@UnicodeString@icu_56@@AAEPA_WXZ	; icu_56::UnicodeString::getArrayStart
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?getArrayStart@UnicodeString@icu_56@@AAEPA_WXZ
_TEXT	SEGMENT
tv76 = -208						; size = 4
_this$ = -8						; size = 4
?getArrayStart@UnicodeString@icu_56@@AAEPA_WXZ PROC	; icu_56::UnicodeString::getArrayStart, COMDAT
; _this$ = ecx
; Line 3758
	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 3760
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+4]
	and	ecx, 2
	je	SHORT $LN3@getArraySt
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 6
	mov	DWORD PTR tv76[ebp], edx
	jmp	SHORT $LN4@getArraySt
$LN3@getArraySt:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR tv76[ebp], ecx
$LN4@getArraySt:
	mov	eax, DWORD PTR tv76[ebp]
; Line 3761
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?getArrayStart@UnicodeString@icu_56@@AAEPA_WXZ ENDP	; icu_56::UnicodeString::getArrayStart
_TEXT	ENDS
PUBLIC	?getArrayStart@UnicodeString@icu_56@@ABEPB_WXZ	; icu_56::UnicodeString::getArrayStart
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?getArrayStart@UnicodeString@icu_56@@ABEPB_WXZ
_TEXT	SEGMENT
tv76 = -208						; size = 4
_this$ = -8						; size = 4
?getArrayStart@UnicodeString@icu_56@@ABEPB_WXZ PROC	; icu_56::UnicodeString::getArrayStart, COMDAT
; _this$ = ecx
; Line 3764
	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 3766
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+4]
	and	ecx, 2
	je	SHORT $LN3@getArraySt@2
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 6
	mov	DWORD PTR tv76[ebp], edx
	jmp	SHORT $LN4@getArraySt@2
$LN3@getArraySt@2:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR tv76[ebp], ecx
$LN4@getArraySt@2:
	mov	eax, DWORD PTR tv76[ebp]
; Line 3767
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?getArrayStart@UnicodeString@icu_56@@ABEPB_WXZ ENDP	; icu_56::UnicodeString::getArrayStart
_TEXT	ENDS
PUBLIC	??_7UnicodeString@icu_56@@6B@			; icu_56::UnicodeString::`vftable'
PUBLIC	??0UnicodeString@icu_56@@QAE@XZ			; icu_56::UnicodeString::UnicodeString
PUBLIC	??_R4UnicodeString@icu_56@@6B@			; icu_56::UnicodeString::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVUnicodeString@icu_56@@@8		; icu_56::UnicodeString `RTTI Type Descriptor'
PUBLIC	??_R3UnicodeString@icu_56@@8			; icu_56::UnicodeString::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2UnicodeString@icu_56@@8			; icu_56::UnicodeString::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@UnicodeString@icu_56@@8		; icu_56::UnicodeString::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	?getDynamicClassID@UnicodeString@icu_56@@UBEPAXXZ:PROC ; icu_56::UnicodeString::getDynamicClassID
EXTRN	?extractBetween@UnicodeString@icu_56@@UBEXHHAAV12@@Z:PROC ; icu_56::UnicodeString::extractBetween
EXTRN	?handleReplaceBetween@UnicodeString@icu_56@@UAEXHHABV12@@Z:PROC ; icu_56::UnicodeString::handleReplaceBetween
EXTRN	?copy@UnicodeString@icu_56@@UAEXHHH@Z:PROC	; icu_56::UnicodeString::copy
EXTRN	?hasMetaData@UnicodeString@icu_56@@UBECXZ:PROC	; icu_56::UnicodeString::hasMetaData
EXTRN	?clone@UnicodeString@icu_56@@UBEPAVReplaceable@2@XZ:PROC ; icu_56::UnicodeString::clone
EXTRN	?getLength@UnicodeString@icu_56@@MBEHXZ:PROC	; icu_56::UnicodeString::getLength
EXTRN	?getCharAt@UnicodeString@icu_56@@MBE_WH@Z:PROC	; icu_56::UnicodeString::getCharAt
EXTRN	?getChar32At@UnicodeString@icu_56@@MBEHH@Z:PROC	; icu_56::UnicodeString::getChar32At
;	COMDAT ??_R1A@?0A@EA@UnicodeString@icu_56@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@UnicodeString@icu_56@@8 DD FLAT:??_R0?AVUnicodeString@icu_56@@@8 ; icu_56::UnicodeString::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3UnicodeString@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_R2UnicodeString@icu_56@@8
rdata$r	SEGMENT
??_R2UnicodeString@icu_56@@8 DD FLAT:??_R1A@?0A@EA@UnicodeString@icu_56@@8 ; icu_56::UnicodeString::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Replaceable@icu_56@@8
	DD	FLAT:??_R1A@?0A@EA@UObject@icu_56@@8
	DD	FLAT:??_R13?0A@EA@UMemory@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_R3UnicodeString@icu_56@@8
rdata$r	SEGMENT
??_R3UnicodeString@icu_56@@8 DD 00H			; icu_56::UnicodeString::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2UnicodeString@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVUnicodeString@icu_56@@@8
_DATA	SEGMENT
??_R0?AVUnicodeString@icu_56@@@8 DD FLAT:??_7type_info@@6B@ ; icu_56::UnicodeString `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVUnicodeString@icu_56@@', 00H
_DATA	ENDS
;	COMDAT ??_R4UnicodeString@icu_56@@6B@
rdata$r	SEGMENT
??_R4UnicodeString@icu_56@@6B@ DD 00H			; icu_56::UnicodeString::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVUnicodeString@icu_56@@@8
	DD	FLAT:??_R3UnicodeString@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_7UnicodeString@icu_56@@6B@
CONST	SEGMENT
??_7UnicodeString@icu_56@@6B@ DD FLAT:??_R4UnicodeString@icu_56@@6B@ ; icu_56::UnicodeString::`vftable'
	DD	FLAT:??_EUnicodeString@icu_56@@UAEPAXI@Z
	DD	FLAT:?getDynamicClassID@UnicodeString@icu_56@@UBEPAXXZ
	DD	FLAT:?extractBetween@UnicodeString@icu_56@@UBEXHHAAV12@@Z
	DD	FLAT:?handleReplaceBetween@UnicodeString@icu_56@@UAEXHHABV12@@Z
	DD	FLAT:?copy@UnicodeString@icu_56@@UAEXHHH@Z
	DD	FLAT:?hasMetaData@UnicodeString@icu_56@@UBECXZ
	DD	FLAT:?clone@UnicodeString@icu_56@@UBEPAVReplaceable@2@XZ
	DD	FLAT:?getLength@UnicodeString@icu_56@@MBEHXZ
	DD	FLAT:?getCharAt@UnicodeString@icu_56@@MBE_WH@Z
	DD	FLAT:?getChar32At@UnicodeString@icu_56@@MBEHH@Z
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ??0UnicodeString@icu_56@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0UnicodeString@icu_56@@QAE@XZ PROC			; icu_56::UnicodeString::UnicodeString, COMDAT
; _this$ = ecx
; Line 3774
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Replaceable@icu_56@@IAE@XZ		; icu_56::Replaceable::Replaceable
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7UnicodeString@icu_56@@6B@
; Line 3775
	mov	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+4], ax
; Line 3776
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0UnicodeString@icu_56@@QAE@XZ ENDP			; icu_56::UnicodeString::UnicodeString
_TEXT	ENDS
PUBLIC	?hasShortLength@UnicodeString@icu_56@@ABECXZ	; icu_56::UnicodeString::hasShortLength
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?hasShortLength@UnicodeString@icu_56@@ABECXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?hasShortLength@UnicodeString@icu_56@@ABECXZ PROC	; icu_56::UnicodeString::hasShortLength, COMDAT
; _this$ = ecx
; Line 3782
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 3783
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+4]
	test	ecx, ecx
	setge	al
; Line 3784
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?hasShortLength@UnicodeString@icu_56@@ABECXZ ENDP	; icu_56::UnicodeString::hasShortLength
_TEXT	ENDS
PUBLIC	?getShortLength@UnicodeString@icu_56@@ABEHXZ	; icu_56::UnicodeString::getShortLength
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?getShortLength@UnicodeString@icu_56@@ABEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?getShortLength@UnicodeString@icu_56@@ABEHXZ PROC	; icu_56::UnicodeString::getShortLength, COMDAT
; _this$ = ecx
; Line 3787
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 3790
	mov	eax, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [eax+4]
	sar	eax, 5
; Line 3791
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?getShortLength@UnicodeString@icu_56@@ABEHXZ ENDP	; icu_56::UnicodeString::getShortLength
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?length@UnicodeString@icu_56@@QBEHXZ
_TEXT	SEGMENT
tv73 = -208						; size = 4
_this$ = -8						; size = 4
?length@UnicodeString@icu_56@@QBEHXZ PROC		; icu_56::UnicodeString::length, COMDAT
; _this$ = ecx
; Line 3794
	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 3795
	mov	ecx, DWORD PTR _this$[ebp]
	call	?hasShortLength@UnicodeString@icu_56@@ABECXZ ; icu_56::UnicodeString::hasShortLength
	movsx	eax, al
	test	eax, eax
	je	SHORT $LN3@length
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getShortLength@UnicodeString@icu_56@@ABEHXZ ; icu_56::UnicodeString::getShortLength
	mov	DWORD PTR tv73[ebp], eax
	jmp	SHORT $LN4@length
$LN3@length:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR tv73[ebp], edx
$LN4@length:
	mov	eax, DWORD PTR tv73[ebp]
; Line 3796
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?length@UnicodeString@icu_56@@QBEHXZ ENDP		; icu_56::UnicodeString::length
_TEXT	ENDS
PUBLIC	?getCapacity@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::getCapacity
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?getCapacity@UnicodeString@icu_56@@QBEHXZ
_TEXT	SEGMENT
tv73 = -208						; size = 4
_this$ = -8						; size = 4
?getCapacity@UnicodeString@icu_56@@QBEHXZ PROC		; icu_56::UnicodeString::getCapacity, COMDAT
; _this$ = ecx
; Line 3799
	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 3801
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+4]
	and	ecx, 2
	je	SHORT $LN3@getCapacit
	mov	DWORD PTR tv73[ebp], 29			; 0000001dH
	jmp	SHORT $LN4@getCapacit
$LN3@getCapacit:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR tv73[ebp], eax
$LN4@getCapacit:
	mov	eax, DWORD PTR tv73[ebp]
; Line 3802
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?getCapacity@UnicodeString@icu_56@@QBEHXZ ENDP		; icu_56::UnicodeString::getCapacity
_TEXT	ENDS
PUBLIC	?hashCode@UnicodeString@icu_56@@QBEHXZ		; icu_56::UnicodeString::hashCode
EXTRN	?doHashCode@UnicodeString@icu_56@@ABEHXZ:PROC	; icu_56::UnicodeString::doHashCode
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?hashCode@UnicodeString@icu_56@@QBEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?hashCode@UnicodeString@icu_56@@QBEHXZ PROC		; icu_56::UnicodeString::hashCode, COMDAT
; _this$ = ecx
; Line 3806
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doHashCode@UnicodeString@icu_56@@ABEHXZ ; icu_56::UnicodeString::doHashCode
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?hashCode@UnicodeString@icu_56@@QBEHXZ ENDP		; icu_56::UnicodeString::hashCode
_TEXT	ENDS
PUBLIC	?isBogus@UnicodeString@icu_56@@QBECXZ		; icu_56::UnicodeString::isBogus
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?isBogus@UnicodeString@icu_56@@QBECXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?isBogus@UnicodeString@icu_56@@QBECXZ PROC		; icu_56::UnicodeString::isBogus, COMDAT
; _this$ = ecx
; Line 3810
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [eax+4]
	and	eax, 1
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?isBogus@UnicodeString@icu_56@@QBECXZ ENDP		; icu_56::UnicodeString::isBogus
_TEXT	ENDS
PUBLIC	?isWritable@UnicodeString@icu_56@@ABECXZ	; icu_56::UnicodeString::isWritable
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?isWritable@UnicodeString@icu_56@@ABECXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?isWritable@UnicodeString@icu_56@@ABECXZ PROC		; icu_56::UnicodeString::isWritable, COMDAT
; _this$ = ecx
; Line 3814
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+4]
	and	ecx, 17					; 00000011H
	sete	al
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?isWritable@UnicodeString@icu_56@@ABECXZ ENDP		; icu_56::UnicodeString::isWritable
_TEXT	ENDS
PUBLIC	?isBufferWritable@UnicodeString@icu_56@@ABECXZ	; icu_56::UnicodeString::isBufferWritable
EXTRN	?refCount@UnicodeString@icu_56@@ABEHXZ:PROC	; icu_56::UnicodeString::refCount
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?isBufferWritable@UnicodeString@icu_56@@ABECXZ
_TEXT	SEGMENT
tv79 = -205						; size = 1
_this$ = -8						; size = 4
?isBufferWritable@UnicodeString@icu_56@@ABECXZ PROC	; icu_56::UnicodeString::isBufferWritable, COMDAT
; _this$ = ecx
; Line 3818
	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 3821
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+4]
	and	ecx, 25					; 00000019H
	jne	SHORT $LN4@isBufferWr
	mov	edx, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [edx+4]
	and	eax, 4
	je	SHORT $LN3@isBufferWr
	mov	ecx, DWORD PTR _this$[ebp]
	call	?refCount@UnicodeString@icu_56@@ABEHXZ	; icu_56::UnicodeString::refCount
	cmp	eax, 1
	jne	SHORT $LN4@isBufferWr
$LN3@isBufferWr:
	mov	BYTE PTR tv79[ebp], 1
	jmp	SHORT $LN5@isBufferWr
$LN4@isBufferWr:
	mov	BYTE PTR tv79[ebp], 0
$LN5@isBufferWr:
	mov	al, BYTE PTR tv79[ebp]
; Line 3822
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?isBufferWritable@UnicodeString@icu_56@@ABECXZ ENDP	; icu_56::UnicodeString::isBufferWritable
_TEXT	ENDS
PUBLIC	?getBuffer@UnicodeString@icu_56@@QBEPB_WXZ	; icu_56::UnicodeString::getBuffer
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?getBuffer@UnicodeString@icu_56@@QBEPB_WXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?getBuffer@UnicodeString@icu_56@@QBEPB_WXZ PROC		; icu_56::UnicodeString::getBuffer, COMDAT
; _this$ = ecx
; Line 3825
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 3826
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+4]
	and	ecx, 17					; 00000011H
	je	SHORT $LN4@getBuffer
; Line 3827
	xor	eax, eax
	jmp	SHORT $LN5@getBuffer
	jmp	SHORT $LN5@getBuffer
$LN4@getBuffer:
; Line 3828
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+4]
	and	ecx, 2
	je	SHORT $LN2@getBuffer
; Line 3829
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 6
	jmp	SHORT $LN5@getBuffer
; Line 3830
	jmp	SHORT $LN5@getBuffer
$LN2@getBuffer:
; Line 3831
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]
$LN5@getBuffer:
; Line 3833
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?getBuffer@UnicodeString@icu_56@@QBEPB_WXZ ENDP		; icu_56::UnicodeString::getBuffer
_TEXT	ENDS
PUBLIC	?doCompare@UnicodeString@icu_56@@ABECHHABV12@HH@Z ; icu_56::UnicodeString::doCompare
EXTRN	?doCompare@UnicodeString@icu_56@@ABECHHPB_WHH@Z:PROC ; icu_56::UnicodeString::doCompare
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?doCompare@UnicodeString@icu_56@@ABECHHABV12@HH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_start$ = 8						; size = 4
_thisLength$ = 12					; size = 4
_srcText$ = 16						; size = 4
_srcStart$ = 20						; size = 4
_srcLength$ = 24					; size = 4
?doCompare@UnicodeString@icu_56@@ABECHHABV12@HH@Z PROC	; icu_56::UnicodeString::doCompare, COMDAT
; _this$ = ecx
; Line 3844
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 3845
	mov	ecx, DWORD PTR _srcText$[ebp]
	call	?isBogus@UnicodeString@icu_56@@QBECXZ	; icu_56::UnicodeString::isBogus
	movsx	eax, al
	test	eax, eax
	je	SHORT $LN2@doCompare
; Line 3846
	mov	ecx, DWORD PTR _this$[ebp]
	call	?isBogus@UnicodeString@icu_56@@QBECXZ	; icu_56::UnicodeString::isBogus
	movsx	eax, al
	test	eax, eax
	sete	al
	jmp	SHORT $LN3@doCompare
; Line 3847
	jmp	SHORT $LN3@doCompare
$LN2@doCompare:
; Line 3848
	lea	eax, DWORD PTR _srcLength$[ebp]
	push	eax
	lea	ecx, DWORD PTR _srcStart$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _srcText$[ebp]
	call	?pinIndices@UnicodeString@icu_56@@ABEXAAH0@Z ; icu_56::UnicodeString::pinIndices
; Line 3849
	mov	eax, DWORD PTR _srcLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _srcStart$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _srcText$[ebp]
	call	?getArrayStart@UnicodeString@icu_56@@ABEPB_WXZ ; icu_56::UnicodeString::getArrayStart
	push	eax
	mov	edx, DWORD PTR _thisLength$[ebp]
	push	edx
	mov	eax, DWORD PTR _start$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doCompare@UnicodeString@icu_56@@ABECHHPB_WHH@Z ; icu_56::UnicodeString::doCompare
$LN3@doCompare:
; Line 3851
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?doCompare@UnicodeString@icu_56@@ABECHHABV12@HH@Z ENDP	; icu_56::UnicodeString::doCompare
_TEXT	ENDS
PUBLIC	??8UnicodeString@icu_56@@QBECABV01@@Z		; icu_56::UnicodeString::operator==
EXTRN	?doEquals@UnicodeString@icu_56@@ABECABV12@H@Z:PROC ; icu_56::UnicodeString::doEquals
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??8UnicodeString@icu_56@@QBECABV01@@Z
_TEXT	SEGMENT
tv85 = -229						; size = 1
_textLength$33362 = -32					; size = 4
_len$33361 = -20					; size = 4
_this$ = -8						; size = 4
_text$ = 8						; size = 4
??8UnicodeString@icu_56@@QBECABV01@@Z PROC		; icu_56::UnicodeString::operator==, COMDAT
; _this$ = ecx
; Line 3855
	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 3856
	mov	ecx, DWORD PTR _this$[ebp]
	call	?isBogus@UnicodeString@icu_56@@QBECXZ	; icu_56::UnicodeString::isBogus
	movsx	eax, al
	test	eax, eax
	je	SHORT $LN2@operator
; Line 3857
	mov	ecx, DWORD PTR _text$[ebp]
	call	?isBogus@UnicodeString@icu_56@@QBECXZ	; icu_56::UnicodeString::isBogus
	jmp	SHORT $LN3@operator
; Line 3858
	jmp	SHORT $LN3@operator
$LN2@operator:
; Line 3859
	mov	ecx, DWORD PTR _this$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	mov	DWORD PTR _len$33361[ebp], eax
	mov	ecx, DWORD PTR _text$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	mov	DWORD PTR _textLength$33362[ebp], eax
; Line 3860
	mov	ecx, DWORD PTR _text$[ebp]
	call	?isBogus@UnicodeString@icu_56@@QBECXZ	; icu_56::UnicodeString::isBogus
	movsx	eax, al
	test	eax, eax
	jne	SHORT $LN5@operator
	mov	ecx, DWORD PTR _len$33361[ebp]
	cmp	ecx, DWORD PTR _textLength$33362[ebp]
	jne	SHORT $LN5@operator
	mov	edx, DWORD PTR _len$33361[ebp]
	push	edx
	mov	eax, DWORD PTR _text$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doEquals@UnicodeString@icu_56@@ABECABV12@H@Z ; icu_56::UnicodeString::doEquals
	movsx	ecx, al
	test	ecx, ecx
	je	SHORT $LN5@operator
	mov	BYTE PTR tv85[ebp], 1
	jmp	SHORT $LN6@operator
$LN5@operator:
	mov	BYTE PTR tv85[ebp], 0
$LN6@operator:
	mov	al, BYTE PTR tv85[ebp]
$LN3@operator:
; Line 3862
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??8UnicodeString@icu_56@@QBECABV01@@Z ENDP		; icu_56::UnicodeString::operator==
_TEXT	ENDS
PUBLIC	??9UnicodeString@icu_56@@QBECABV01@@Z		; icu_56::UnicodeString::operator!=
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??9UnicodeString@icu_56@@QBECABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_text$ = 8						; size = 4
??9UnicodeString@icu_56@@QBECABV01@@Z PROC		; icu_56::UnicodeString::operator!=, COMDAT
; _this$ = ecx
; Line 3866
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _text$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8UnicodeString@icu_56@@QBECABV01@@Z	; icu_56::UnicodeString::operator==
	movsx	ecx, al
	test	ecx, ecx
	sete	al
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??9UnicodeString@icu_56@@QBECABV01@@Z ENDP		; icu_56::UnicodeString::operator!=
_TEXT	ENDS
PUBLIC	??OUnicodeString@icu_56@@QBECABV01@@Z		; icu_56::UnicodeString::operator>
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??OUnicodeString@icu_56@@QBECABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_text$ = 8						; size = 4
??OUnicodeString@icu_56@@QBECABV01@@Z PROC		; icu_56::UnicodeString::operator>, COMDAT
; _this$ = ecx
; Line 3870
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _text$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	push	eax
	push	0
	mov	eax, DWORD PTR _text$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doCompare@UnicodeString@icu_56@@ABECHHABV12@HH@Z ; icu_56::UnicodeString::doCompare
	movsx	ecx, al
	cmp	ecx, 1
	sete	al
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??OUnicodeString@icu_56@@QBECABV01@@Z ENDP		; icu_56::UnicodeString::operator>
_TEXT	ENDS
PUBLIC	??MUnicodeString@icu_56@@QBECABV01@@Z		; icu_56::UnicodeString::operator<
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??MUnicodeString@icu_56@@QBECABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_text$ = 8						; size = 4
??MUnicodeString@icu_56@@QBECABV01@@Z PROC		; icu_56::UnicodeString::operator<, COMDAT
; _this$ = ecx
; Line 3874
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _text$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	push	eax
	push	0
	mov	eax, DWORD PTR _text$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doCompare@UnicodeString@icu_56@@ABECHHABV12@HH@Z ; icu_56::UnicodeString::doCompare
	movsx	ecx, al
	cmp	ecx, -1
	sete	al
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??MUnicodeString@icu_56@@QBECABV01@@Z ENDP		; icu_56::UnicodeString::operator<
_TEXT	ENDS
PUBLIC	??PUnicodeString@icu_56@@QBECABV01@@Z		; icu_56::UnicodeString::operator>=
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??PUnicodeString@icu_56@@QBECABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_text$ = 8						; size = 4
??PUnicodeString@icu_56@@QBECABV01@@Z PROC		; icu_56::UnicodeString::operator>=, COMDAT
; _this$ = ecx
; Line 3878
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _text$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	push	eax
	push	0
	mov	eax, DWORD PTR _text$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doCompare@UnicodeString@icu_56@@ABECHHABV12@HH@Z ; icu_56::UnicodeString::doCompare
	movsx	ecx, al
	cmp	ecx, -1
	setne	al
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??PUnicodeString@icu_56@@QBECABV01@@Z ENDP		; icu_56::UnicodeString::operator>=
_TEXT	ENDS
PUBLIC	??NUnicodeString@icu_56@@QBECABV01@@Z		; icu_56::UnicodeString::operator<=
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??NUnicodeString@icu_56@@QBECABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_text$ = 8						; size = 4
??NUnicodeString@icu_56@@QBECABV01@@Z PROC		; icu_56::UnicodeString::operator<=, COMDAT
; _this$ = ecx
; Line 3882
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _text$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	push	eax
	push	0
	mov	eax, DWORD PTR _text$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doCompare@UnicodeString@icu_56@@ABECHHABV12@HH@Z ; icu_56::UnicodeString::doCompare
	movsx	ecx, al
	cmp	ecx, 1
	setne	al
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??NUnicodeString@icu_56@@QBECABV01@@Z ENDP		; icu_56::UnicodeString::operator<=
_TEXT	ENDS
PUBLIC	?compare@UnicodeString@icu_56@@QBECABV12@@Z	; icu_56::UnicodeString::compare
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?compare@UnicodeString@icu_56@@QBECABV12@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_text$ = 8						; size = 4
?compare@UnicodeString@icu_56@@QBECABV12@@Z PROC	; icu_56::UnicodeString::compare, COMDAT
; _this$ = ecx
; Line 3886
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _text$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	push	eax
	push	0
	mov	eax, DWORD PTR _text$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doCompare@UnicodeString@icu_56@@ABECHHABV12@HH@Z ; icu_56::UnicodeString::doCompare
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?compare@UnicodeString@icu_56@@QBECABV12@@Z ENDP	; icu_56::UnicodeString::compare
_TEXT	ENDS
PUBLIC	?compare@UnicodeString@icu_56@@QBECHHABV12@@Z	; icu_56::UnicodeString::compare
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?compare@UnicodeString@icu_56@@QBECHHABV12@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_start$ = 8						; size = 4
__length$ = 12						; size = 4
_srcText$ = 16						; size = 4
?compare@UnicodeString@icu_56@@QBECHHABV12@@Z PROC	; icu_56::UnicodeString::compare, COMDAT
; _this$ = ecx
; Line 3892
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _srcText$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	push	eax
	push	0
	mov	eax, DWORD PTR _srcText$[ebp]
	push	eax
	mov	ecx, DWORD PTR __length$[ebp]
	push	ecx
	mov	edx, DWORD PTR _start$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doCompare@UnicodeString@icu_56@@ABECHHABV12@HH@Z ; icu_56::UnicodeString::doCompare
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?compare@UnicodeString@icu_56@@QBECHHABV12@@Z ENDP	; icu_56::UnicodeString::compare
_TEXT	ENDS
PUBLIC	?compare@UnicodeString@icu_56@@QBECPB_WH@Z	; icu_56::UnicodeString::compare
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?compare@UnicodeString@icu_56@@QBECPB_WH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_srcChars$ = 8						; size = 4
_srcLength$ = 12					; size = 4
?compare@UnicodeString@icu_56@@QBECPB_WH@Z PROC		; icu_56::UnicodeString::compare, COMDAT
; _this$ = ecx
; Line 3897
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _srcLength$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _srcChars$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doCompare@UnicodeString@icu_56@@ABECHHPB_WHH@Z ; icu_56::UnicodeString::doCompare
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?compare@UnicodeString@icu_56@@QBECPB_WH@Z ENDP		; icu_56::UnicodeString::compare
_TEXT	ENDS
PUBLIC	?compare@UnicodeString@icu_56@@QBECHHABV12@HH@Z	; icu_56::UnicodeString::compare
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?compare@UnicodeString@icu_56@@QBECHHABV12@HH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_start$ = 8						; size = 4
__length$ = 12						; size = 4
_srcText$ = 16						; size = 4
_srcStart$ = 20						; size = 4
_srcLength$ = 24					; size = 4
?compare@UnicodeString@icu_56@@QBECHHABV12@HH@Z PROC	; icu_56::UnicodeString::compare, COMDAT
; _this$ = ecx
; Line 3905
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _srcLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _srcStart$[ebp]
	push	ecx
	mov	edx, DWORD PTR _srcText$[ebp]
	push	edx
	mov	eax, DWORD PTR __length$[ebp]
	push	eax
	mov	ecx, DWORD PTR _start$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doCompare@UnicodeString@icu_56@@ABECHHABV12@HH@Z ; icu_56::UnicodeString::doCompare
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?compare@UnicodeString@icu_56@@QBECHHABV12@HH@Z ENDP	; icu_56::UnicodeString::compare
_TEXT	ENDS
PUBLIC	?compare@UnicodeString@icu_56@@QBECHHPB_W@Z	; icu_56::UnicodeString::compare
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?compare@UnicodeString@icu_56@@QBECHHPB_W@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_start$ = 8						; size = 4
__length$ = 12						; size = 4
_srcChars$ = 16						; size = 4
?compare@UnicodeString@icu_56@@QBECHHPB_W@Z PROC	; icu_56::UnicodeString::compare, COMDAT
; _this$ = ecx
; Line 3911
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __length$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _srcChars$[ebp]
	push	ecx
	mov	edx, DWORD PTR __length$[ebp]
	push	edx
	mov	eax, DWORD PTR _start$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doCompare@UnicodeString@icu_56@@ABECHHPB_WHH@Z ; icu_56::UnicodeString::doCompare
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?compare@UnicodeString@icu_56@@QBECHHPB_W@Z ENDP	; icu_56::UnicodeString::compare
_TEXT	ENDS
PUBLIC	?compare@UnicodeString@icu_56@@QBECHHPB_WHH@Z	; icu_56::UnicodeString::compare
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?compare@UnicodeString@icu_56@@QBECHHPB_WHH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_start$ = 8						; size = 4
__length$ = 12						; size = 4
_srcChars$ = 16						; size = 4
_srcStart$ = 20						; size = 4
_srcLength$ = 24					; size = 4
?compare@UnicodeString@icu_56@@QBECHHPB_WHH@Z PROC	; icu_56::UnicodeString::compare, COMDAT
; _this$ = ecx
; Line 3919
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _srcLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _srcStart$[ebp]
	push	ecx
	mov	edx, DWORD PTR _srcChars$[ebp]
	push	edx
	mov	eax, DWORD PTR __length$[ebp]
	push	eax
	mov	ecx, DWORD PTR _start$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doCompare@UnicodeString@icu_56@@ABECHHPB_WHH@Z ; icu_56::UnicodeString::doCompare
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?compare@UnicodeString@icu_56@@QBECHHPB_WHH@Z ENDP	; icu_56::UnicodeString::compare
_TEXT	ENDS
PUBLIC	?compareBetween@UnicodeString@icu_56@@QBECHHABV12@HH@Z ; icu_56::UnicodeString::compareBetween
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?compareBetween@UnicodeString@icu_56@@QBECHHABV12@HH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_start$ = 8						; size = 4
_limit$ = 12						; size = 4
_srcText$ = 16						; size = 4
_srcStart$ = 20						; size = 4
_srcLimit$ = 24						; size = 4
?compareBetween@UnicodeString@icu_56@@QBECHHABV12@HH@Z PROC ; icu_56::UnicodeString::compareBetween, COMDAT
; _this$ = ecx
; Line 3927
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 3928
	mov	eax, DWORD PTR _srcLimit$[ebp]
	sub	eax, DWORD PTR _srcStart$[ebp]
	push	eax
	mov	ecx, DWORD PTR _srcStart$[ebp]
	push	ecx
	mov	edx, DWORD PTR _srcText$[ebp]
	push	edx
	mov	eax, DWORD PTR _limit$[ebp]
	sub	eax, DWORD PTR _start$[ebp]
	push	eax
	mov	ecx, DWORD PTR _start$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doCompare@UnicodeString@icu_56@@ABECHHABV12@HH@Z ; icu_56::UnicodeString::doCompare
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?compareBetween@UnicodeString@icu_56@@QBECHHABV12@HH@Z ENDP ; icu_56::UnicodeString::compareBetween
_TEXT	ENDS
PUBLIC	?doCompareCodePointOrder@UnicodeString@icu_56@@ABECHHABV12@HH@Z ; icu_56::UnicodeString::doCompareCodePointOrder
EXTRN	?doCompareCodePointOrder@UnicodeString@icu_56@@ABECHHPB_WHH@Z:PROC ; icu_56::UnicodeString::doCompareCodePointOrder
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?doCompareCodePointOrder@UnicodeString@icu_56@@ABECHHABV12@HH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_start$ = 8						; size = 4
_thisLength$ = 12					; size = 4
_srcText$ = 16						; size = 4
_srcStart$ = 20						; size = 4
_srcLength$ = 24					; size = 4
?doCompareCodePointOrder@UnicodeString@icu_56@@ABECHHABV12@HH@Z PROC ; icu_56::UnicodeString::doCompareCodePointOrder, COMDAT
; _this$ = ecx
; Line 3936
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 3937
	mov	ecx, DWORD PTR _srcText$[ebp]
	call	?isBogus@UnicodeString@icu_56@@QBECXZ	; icu_56::UnicodeString::isBogus
	movsx	eax, al
	test	eax, eax
	je	SHORT $LN2@doCompareC
; Line 3938
	mov	ecx, DWORD PTR _this$[ebp]
	call	?isBogus@UnicodeString@icu_56@@QBECXZ	; icu_56::UnicodeString::isBogus
	movsx	eax, al
	test	eax, eax
	sete	al
	jmp	SHORT $LN3@doCompareC
; Line 3939
	jmp	SHORT $LN3@doCompareC
$LN2@doCompareC:
; Line 3940
	lea	eax, DWORD PTR _srcLength$[ebp]
	push	eax
	lea	ecx, DWORD PTR _srcStart$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _srcText$[ebp]
	call	?pinIndices@UnicodeString@icu_56@@ABEXAAH0@Z ; icu_56::UnicodeString::pinIndices
; Line 3941
	mov	eax, DWORD PTR _srcLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _srcStart$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _srcText$[ebp]
	call	?getArrayStart@UnicodeString@icu_56@@ABEPB_WXZ ; icu_56::UnicodeString::getArrayStart
	push	eax
	mov	edx, DWORD PTR _thisLength$[ebp]
	push	edx
	mov	eax, DWORD PTR _start$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doCompareCodePointOrder@UnicodeString@icu_56@@ABECHHPB_WHH@Z ; icu_56::UnicodeString::doCompareCodePointOrder
$LN3@doCompareC:
; Line 3943
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?doCompareCodePointOrder@UnicodeString@icu_56@@ABECHHABV12@HH@Z ENDP ; icu_56::UnicodeString::doCompareCodePointOrder
_TEXT	ENDS
PUBLIC	?compareCodePointOrder@UnicodeString@icu_56@@QBECABV12@@Z ; icu_56::UnicodeString::compareCodePointOrder
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?compareCodePointOrder@UnicodeString@icu_56@@QBECABV12@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_text$ = 8						; size = 4
?compareCodePointOrder@UnicodeString@icu_56@@QBECABV12@@Z PROC ; icu_56::UnicodeString::compareCodePointOrder, COMDAT
; _this$ = ecx
; Line 3947
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _text$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	push	eax
	push	0
	mov	eax, DWORD PTR _text$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doCompareCodePointOrder@UnicodeString@icu_56@@ABECHHABV12@HH@Z ; icu_56::UnicodeString::doCompareCodePointOrder
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?compareCodePointOrder@UnicodeString@icu_56@@QBECABV12@@Z ENDP ; icu_56::UnicodeString::compareCodePointOrder
_TEXT	ENDS
PUBLIC	?compareCodePointOrder@UnicodeString@icu_56@@QBECHHABV12@@Z ; icu_56::UnicodeString::compareCodePointOrder
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?compareCodePointOrder@UnicodeString@icu_56@@QBECHHABV12@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_start$ = 8						; size = 4
__length$ = 12						; size = 4
_srcText$ = 16						; size = 4
?compareCodePointOrder@UnicodeString@icu_56@@QBECHHABV12@@Z PROC ; icu_56::UnicodeString::compareCodePointOrder, COMDAT
; _this$ = ecx
; Line 3953
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _srcText$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	push	eax
	push	0
	mov	eax, DWORD PTR _srcText$[ebp]
	push	eax
	mov	ecx, DWORD PTR __length$[ebp]
	push	ecx
	mov	edx, DWORD PTR _start$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doCompareCodePointOrder@UnicodeString@icu_56@@ABECHHABV12@HH@Z ; icu_56::UnicodeString::doCompareCodePointOrder
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?compareCodePointOrder@UnicodeString@icu_56@@QBECHHABV12@@Z ENDP ; icu_56::UnicodeString::compareCodePointOrder
_TEXT	ENDS
PUBLIC	?compareCodePointOrder@UnicodeString@icu_56@@QBECPB_WH@Z ; icu_56::UnicodeString::compareCodePointOrder
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?compareCodePointOrder@UnicodeString@icu_56@@QBECPB_WH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_srcChars$ = 8						; size = 4
_srcLength$ = 12					; size = 4
?compareCodePointOrder@UnicodeString@icu_56@@QBECPB_WH@Z PROC ; icu_56::UnicodeString::compareCodePointOrder, COMDAT
; _this$ = ecx
; Line 3958
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _srcLength$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _srcChars$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doCompareCodePointOrder@UnicodeString@icu_56@@ABECHHPB_WHH@Z ; icu_56::UnicodeString::doCompareCodePointOrder
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?compareCodePointOrder@UnicodeString@icu_56@@QBECPB_WH@Z ENDP ; icu_56::UnicodeString::compareCodePointOrder
_TEXT	ENDS
PUBLIC	?compareCodePointOrder@UnicodeString@icu_56@@QBECHHABV12@HH@Z ; icu_56::UnicodeString::compareCodePointOrder
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?compareCodePointOrder@UnicodeString@icu_56@@QBECHHABV12@HH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_start$ = 8						; size = 4
__length$ = 12						; size = 4
_srcText$ = 16						; size = 4
_srcStart$ = 20						; size = 4
_srcLength$ = 24					; size = 4
?compareCodePointOrder@UnicodeString@icu_56@@QBECHHABV12@HH@Z PROC ; icu_56::UnicodeString::compareCodePointOrder, COMDAT
; _this$ = ecx
; Line 3966
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _srcLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _srcStart$[ebp]
	push	ecx
	mov	edx, DWORD PTR _srcText$[ebp]
	push	edx
	mov	eax, DWORD PTR __length$[ebp]
	push	eax
	mov	ecx, DWORD PTR _start$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doCompareCodePointOrder@UnicodeString@icu_56@@ABECHHABV12@HH@Z ; icu_56::UnicodeString::doCompareCodePointOrder
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?compareCodePointOrder@UnicodeString@icu_56@@QBECHHABV12@HH@Z ENDP ; icu_56::UnicodeString::compareCodePointOrder
_TEXT	ENDS
PUBLIC	?compareCodePointOrder@UnicodeString@icu_56@@QBECHHPB_W@Z ; icu_56::UnicodeString::compareCodePointOrder
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?compareCodePointOrder@UnicodeString@icu_56@@QBECHHPB_W@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_start$ = 8						; size = 4
__length$ = 12						; size = 4
_srcChars$ = 16						; size = 4
?compareCodePointOrder@UnicodeString@icu_56@@QBECHHPB_W@Z PROC ; icu_56::UnicodeString::compareCodePointOrder, COMDAT
; _this$ = ecx
; Line 3972
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __length$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _srcChars$[ebp]
	push	ecx
	mov	edx, DWORD PTR __length$[ebp]
	push	edx
	mov	eax, DWORD PTR _start$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doCompareCodePointOrder@UnicodeString@icu_56@@ABECHHPB_WHH@Z ; icu_56::UnicodeString::doCompareCodePointOrder
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?compareCodePointOrder@UnicodeString@icu_56@@QBECHHPB_W@Z ENDP ; icu_56::UnicodeString::compareCodePointOrder
_TEXT	ENDS
PUBLIC	?compareCodePointOrder@UnicodeString@icu_56@@QBECHHPB_WHH@Z ; icu_56::UnicodeString::compareCodePointOrder
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?compareCodePointOrder@UnicodeString@icu_56@@QBECHHPB_WHH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_start$ = 8						; size = 4
__length$ = 12						; size = 4
_srcChars$ = 16						; size = 4
_srcStart$ = 20						; size = 4
_srcLength$ = 24					; size = 4
?compareCodePointOrder@UnicodeString@icu_56@@QBECHHPB_WHH@Z PROC ; icu_56::UnicodeString::compareCodePointOrder, COMDAT
; _this$ = ecx
; Line 3980
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _srcLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _srcStart$[ebp]
	push	ecx
	mov	edx, DWORD PTR _srcChars$[ebp]
	push	edx
	mov	eax, DWORD PTR __length$[ebp]
	push	eax
	mov	ecx, DWORD PTR _start$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doCompareCodePointOrder@UnicodeString@icu_56@@ABECHHPB_WHH@Z ; icu_56::UnicodeString::doCompareCodePointOrder
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?compareCodePointOrder@UnicodeString@icu_56@@QBECHHPB_WHH@Z ENDP ; icu_56::UnicodeString::compareCodePointOrder
_TEXT	ENDS
PUBLIC	?compareCodePointOrderBetween@UnicodeString@icu_56@@QBECHHABV12@HH@Z ; icu_56::UnicodeString::compareCodePointOrderBetween
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?compareCodePointOrderBetween@UnicodeString@icu_56@@QBECHHABV12@HH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_start$ = 8						; size = 4
_limit$ = 12						; size = 4
_srcText$ = 16						; size = 4
_srcStart$ = 20						; size = 4
_srcLimit$ = 24						; size = 4
?compareCodePointOrderBetween@UnicodeString@icu_56@@QBECHHABV12@HH@Z PROC ; icu_56::UnicodeString::compareCodePointOrderBetween, COMDAT
; _this$ = ecx
; Line 3988
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 3989
	mov	eax, DWORD PTR _srcLimit$[ebp]
	sub	eax, DWORD PTR _srcStart$[ebp]
	push	eax
	mov	ecx, DWORD PTR _srcStart$[ebp]
	push	ecx
	mov	edx, DWORD PTR _srcText$[ebp]
	push	edx
	mov	eax, DWORD PTR _limit$[ebp]
	sub	eax, DWORD PTR _start$[ebp]
	push	eax
	mov	ecx, DWORD PTR _start$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doCompareCodePointOrder@UnicodeString@icu_56@@ABECHHABV12@HH@Z ; icu_56::UnicodeString::doCompareCodePointOrder
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?compareCodePointOrderBetween@UnicodeString@icu_56@@QBECHHABV12@HH@Z ENDP ; icu_56::UnicodeString::compareCodePointOrderBetween
_TEXT	ENDS
PUBLIC	?doCaseCompare@UnicodeString@icu_56@@ABECHHABV12@HHI@Z ; icu_56::UnicodeString::doCaseCompare
EXTRN	?doCaseCompare@UnicodeString@icu_56@@ABECHHPB_WHHI@Z:PROC ; icu_56::UnicodeString::doCaseCompare
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?doCaseCompare@UnicodeString@icu_56@@ABECHHABV12@HHI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_start$ = 8						; size = 4
_thisLength$ = 12					; size = 4
_srcText$ = 16						; size = 4
_srcStart$ = 20						; size = 4
_srcLength$ = 24					; size = 4
_options$ = 28						; size = 4
?doCaseCompare@UnicodeString@icu_56@@ABECHHABV12@HHI@Z PROC ; icu_56::UnicodeString::doCaseCompare, COMDAT
; _this$ = ecx
; Line 3998
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 3999
	mov	ecx, DWORD PTR _srcText$[ebp]
	call	?isBogus@UnicodeString@icu_56@@QBECXZ	; icu_56::UnicodeString::isBogus
	movsx	eax, al
	test	eax, eax
	je	SHORT $LN2@doCaseComp
; Line 4000
	mov	ecx, DWORD PTR _this$[ebp]
	call	?isBogus@UnicodeString@icu_56@@QBECXZ	; icu_56::UnicodeString::isBogus
	movsx	eax, al
	test	eax, eax
	sete	al
	jmp	SHORT $LN3@doCaseComp
; Line 4001
	jmp	SHORT $LN3@doCaseComp
$LN2@doCaseComp:
; Line 4002
	lea	eax, DWORD PTR _srcLength$[ebp]
	push	eax
	lea	ecx, DWORD PTR _srcStart$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _srcText$[ebp]
	call	?pinIndices@UnicodeString@icu_56@@ABEXAAH0@Z ; icu_56::UnicodeString::pinIndices
; Line 4003
	mov	eax, DWORD PTR _options$[ebp]
	push	eax
	mov	ecx, DWORD PTR _srcLength$[ebp]
	push	ecx
	mov	edx, DWORD PTR _srcStart$[ebp]
	push	edx
	mov	ecx, DWORD PTR _srcText$[ebp]
	call	?getArrayStart@UnicodeString@icu_56@@ABEPB_WXZ ; icu_56::UnicodeString::getArrayStart
	push	eax
	mov	eax, DWORD PTR _thisLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _start$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doCaseCompare@UnicodeString@icu_56@@ABECHHPB_WHHI@Z ; icu_56::UnicodeString::doCaseCompare
$LN3@doCaseComp:
; Line 4005
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
?doCaseCompare@UnicodeString@icu_56@@ABECHHABV12@HHI@Z ENDP ; icu_56::UnicodeString::doCaseCompare
_TEXT	ENDS
PUBLIC	?caseCompare@UnicodeString@icu_56@@QBECABV12@I@Z ; icu_56::UnicodeString::caseCompare
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?caseCompare@UnicodeString@icu_56@@QBECABV12@I@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_text$ = 8						; size = 4
_options$ = 12						; size = 4
?caseCompare@UnicodeString@icu_56@@QBECABV12@I@Z PROC	; icu_56::UnicodeString::caseCompare, COMDAT
; _this$ = ecx
; Line 4008
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 4009
	mov	eax, DWORD PTR _options$[ebp]
	push	eax
	mov	ecx, DWORD PTR _text$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	push	eax
	push	0
	mov	ecx, DWORD PTR _text$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doCaseCompare@UnicodeString@icu_56@@ABECHHABV12@HHI@Z ; icu_56::UnicodeString::doCaseCompare
; Line 4010
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?caseCompare@UnicodeString@icu_56@@QBECABV12@I@Z ENDP	; icu_56::UnicodeString::caseCompare
_TEXT	ENDS
PUBLIC	?caseCompare@UnicodeString@icu_56@@QBECHHABV12@I@Z ; icu_56::UnicodeString::caseCompare
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?caseCompare@UnicodeString@icu_56@@QBECHHABV12@I@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_start$ = 8						; size = 4
__length$ = 12						; size = 4
_srcText$ = 16						; size = 4
_options$ = 20						; size = 4
?caseCompare@UnicodeString@icu_56@@QBECHHABV12@I@Z PROC	; icu_56::UnicodeString::caseCompare, COMDAT
; _this$ = ecx
; Line 4016
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 4017
	mov	eax, DWORD PTR _options$[ebp]
	push	eax
	mov	ecx, DWORD PTR _srcText$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	push	eax
	push	0
	mov	ecx, DWORD PTR _srcText$[ebp]
	push	ecx
	mov	edx, DWORD PTR __length$[ebp]
	push	edx
	mov	eax, DWORD PTR _start$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doCaseCompare@UnicodeString@icu_56@@ABECHHABV12@HHI@Z ; icu_56::UnicodeString::doCaseCompare
; Line 4018
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?caseCompare@UnicodeString@icu_56@@QBECHHABV12@I@Z ENDP	; icu_56::UnicodeString::caseCompare
_TEXT	ENDS
PUBLIC	?caseCompare@UnicodeString@icu_56@@QBECPB_WHI@Z	; icu_56::UnicodeString::caseCompare
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?caseCompare@UnicodeString@icu_56@@QBECPB_WHI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_srcChars$ = 8						; size = 4
_srcLength$ = 12					; size = 4
_options$ = 16						; size = 4
?caseCompare@UnicodeString@icu_56@@QBECPB_WHI@Z PROC	; icu_56::UnicodeString::caseCompare, COMDAT
; _this$ = ecx
; Line 4023
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 4024
	mov	eax, DWORD PTR _options$[ebp]
	push	eax
	mov	ecx, DWORD PTR _srcLength$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _srcChars$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doCaseCompare@UnicodeString@icu_56@@ABECHHPB_WHHI@Z ; icu_56::UnicodeString::doCaseCompare
; Line 4025
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?caseCompare@UnicodeString@icu_56@@QBECPB_WHI@Z ENDP	; icu_56::UnicodeString::caseCompare
_TEXT	ENDS
PUBLIC	?caseCompare@UnicodeString@icu_56@@QBECHHABV12@HHI@Z ; icu_56::UnicodeString::caseCompare
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?caseCompare@UnicodeString@icu_56@@QBECHHABV12@HHI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_start$ = 8						; size = 4
__length$ = 12						; size = 4
_srcText$ = 16						; size = 4
_srcStart$ = 20						; size = 4
_srcLength$ = 24					; size = 4
_options$ = 28						; size = 4
?caseCompare@UnicodeString@icu_56@@QBECHHABV12@HHI@Z PROC ; icu_56::UnicodeString::caseCompare, COMDAT
; _this$ = ecx
; Line 4033
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 4034
	mov	eax, DWORD PTR _options$[ebp]
	push	eax
	mov	ecx, DWORD PTR _srcLength$[ebp]
	push	ecx
	mov	edx, DWORD PTR _srcStart$[ebp]
	push	edx
	mov	eax, DWORD PTR _srcText$[ebp]
	push	eax
	mov	ecx, DWORD PTR __length$[ebp]
	push	ecx
	mov	edx, DWORD PTR _start$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doCaseCompare@UnicodeString@icu_56@@ABECHHABV12@HHI@Z ; icu_56::UnicodeString::doCaseCompare
; Line 4035
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
?caseCompare@UnicodeString@icu_56@@QBECHHABV12@HHI@Z ENDP ; icu_56::UnicodeString::caseCompare
_TEXT	ENDS
PUBLIC	?caseCompare@UnicodeString@icu_56@@QBECHHPB_WI@Z ; icu_56::UnicodeString::caseCompare
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?caseCompare@UnicodeString@icu_56@@QBECHHPB_WI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_start$ = 8						; size = 4
__length$ = 12						; size = 4
_srcChars$ = 16						; size = 4
_options$ = 20						; size = 4
?caseCompare@UnicodeString@icu_56@@QBECHHPB_WI@Z PROC	; icu_56::UnicodeString::caseCompare, COMDAT
; _this$ = ecx
; Line 4041
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 4042
	mov	eax, DWORD PTR _options$[ebp]
	push	eax
	mov	ecx, DWORD PTR __length$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _srcChars$[ebp]
	push	edx
	mov	eax, DWORD PTR __length$[ebp]
	push	eax
	mov	ecx, DWORD PTR _start$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doCaseCompare@UnicodeString@icu_56@@ABECHHPB_WHHI@Z ; icu_56::UnicodeString::doCaseCompare
; Line 4043
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?caseCompare@UnicodeString@icu_56@@QBECHHPB_WI@Z ENDP	; icu_56::UnicodeString::caseCompare
_TEXT	ENDS
PUBLIC	?caseCompare@UnicodeString@icu_56@@QBECHHPB_WHHI@Z ; icu_56::UnicodeString::caseCompare
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?caseCompare@UnicodeString@icu_56@@QBECHHPB_WHHI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_start$ = 8						; size = 4
__length$ = 12						; size = 4
_srcChars$ = 16						; size = 4
_srcStart$ = 20						; size = 4
_srcLength$ = 24					; size = 4
_options$ = 28						; size = 4
?caseCompare@UnicodeString@icu_56@@QBECHHPB_WHHI@Z PROC	; icu_56::UnicodeString::caseCompare, COMDAT
; _this$ = ecx
; Line 4051
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 4052
	mov	eax, DWORD PTR _options$[ebp]
	push	eax
	mov	ecx, DWORD PTR _srcLength$[ebp]
	push	ecx
	mov	edx, DWORD PTR _srcStart$[ebp]
	push	edx
	mov	eax, DWORD PTR _srcChars$[ebp]
	push	eax
	mov	ecx, DWORD PTR __length$[ebp]
	push	ecx
	mov	edx, DWORD PTR _start$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doCaseCompare@UnicodeString@icu_56@@ABECHHPB_WHHI@Z ; icu_56::UnicodeString::doCaseCompare
; Line 4053
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
?caseCompare@UnicodeString@icu_56@@QBECHHPB_WHHI@Z ENDP	; icu_56::UnicodeString::caseCompare
_TEXT	ENDS
PUBLIC	?caseCompareBetween@UnicodeString@icu_56@@QBECHHABV12@HHI@Z ; icu_56::UnicodeString::caseCompareBetween
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?caseCompareBetween@UnicodeString@icu_56@@QBECHHABV12@HHI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_start$ = 8						; size = 4
_limit$ = 12						; size = 4
_srcText$ = 16						; size = 4
_srcStart$ = 20						; size = 4
_srcLimit$ = 24						; size = 4
_options$ = 28						; size = 4
?caseCompareBetween@UnicodeString@icu_56@@QBECHHABV12@HHI@Z PROC ; icu_56::UnicodeString::caseCompareBetween, COMDAT
; _this$ = ecx
; Line 4061
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 4062
	mov	eax, DWORD PTR _options$[ebp]
	push	eax
	mov	ecx, DWORD PTR _srcLimit$[ebp]
	sub	ecx, DWORD PTR _srcStart$[ebp]
	push	ecx
	mov	edx, DWORD PTR _srcStart$[ebp]
	push	edx
	mov	eax, DWORD PTR _srcText$[ebp]
	push	eax
	mov	ecx, DWORD PTR _limit$[ebp]
	sub	ecx, DWORD PTR _start$[ebp]
	push	ecx
	mov	edx, DWORD PTR _start$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doCaseCompare@UnicodeString@icu_56@@ABECHHABV12@HHI@Z ; icu_56::UnicodeString::doCaseCompare
; Line 4063
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
?caseCompareBetween@UnicodeString@icu_56@@QBECHHABV12@HHI@Z ENDP ; icu_56::UnicodeString::caseCompareBetween
_TEXT	ENDS
PUBLIC	?indexOf@UnicodeString@icu_56@@QBEHABV12@HHHH@Z	; icu_56::UnicodeString::indexOf
EXTRN	?indexOf@UnicodeString@icu_56@@QBEHPB_WHHHH@Z:PROC ; icu_56::UnicodeString::indexOf
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?indexOf@UnicodeString@icu_56@@QBEHABV12@HHHH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_srcText$ = 8						; size = 4
_srcStart$ = 12						; size = 4
_srcLength$ = 16					; size = 4
_start$ = 20						; size = 4
__length$ = 24						; size = 4
?indexOf@UnicodeString@icu_56@@QBEHABV12@HHHH@Z PROC	; icu_56::UnicodeString::indexOf, COMDAT
; _this$ = ecx
; Line 4071
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 4072
	mov	ecx, DWORD PTR _srcText$[ebp]
	call	?isBogus@UnicodeString@icu_56@@QBECXZ	; icu_56::UnicodeString::isBogus
	movsx	eax, al
	test	eax, eax
	jne	SHORT $LN2@indexOf
; Line 4073
	lea	eax, DWORD PTR _srcLength$[ebp]
	push	eax
	lea	ecx, DWORD PTR _srcStart$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _srcText$[ebp]
	call	?pinIndices@UnicodeString@icu_56@@ABEXAAH0@Z ; icu_56::UnicodeString::pinIndices
; Line 4074
	cmp	DWORD PTR _srcLength$[ebp], 0
	jle	SHORT $LN2@indexOf
; Line 4075
	mov	eax, DWORD PTR __length$[ebp]
	push	eax
	mov	ecx, DWORD PTR _start$[ebp]
	push	ecx
	mov	edx, DWORD PTR _srcLength$[ebp]
	push	edx
	mov	eax, DWORD PTR _srcStart$[ebp]
	push	eax
	mov	ecx, DWORD PTR _srcText$[ebp]
	call	?getArrayStart@UnicodeString@icu_56@@ABEPB_WXZ ; icu_56::UnicodeString::getArrayStart
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?indexOf@UnicodeString@icu_56@@QBEHPB_WHHHH@Z ; icu_56::UnicodeString::indexOf
	jmp	SHORT $LN3@indexOf
$LN2@indexOf:
; Line 4078
	or	eax, -1
$LN3@indexOf:
; Line 4079
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?indexOf@UnicodeString@icu_56@@QBEHABV12@HHHH@Z ENDP	; icu_56::UnicodeString::indexOf
_TEXT	ENDS
PUBLIC	?indexOf@UnicodeString@icu_56@@QBEHABV12@@Z	; icu_56::UnicodeString::indexOf
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?indexOf@UnicodeString@icu_56@@QBEHABV12@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_text$ = 8						; size = 4
?indexOf@UnicodeString@icu_56@@QBEHABV12@@Z PROC	; icu_56::UnicodeString::indexOf, COMDAT
; _this$ = ecx
; Line 4083
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	push	eax
	push	0
	mov	ecx, DWORD PTR _text$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	push	eax
	push	0
	mov	eax, DWORD PTR _text$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?indexOf@UnicodeString@icu_56@@QBEHABV12@HHHH@Z ; icu_56::UnicodeString::indexOf
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?indexOf@UnicodeString@icu_56@@QBEHABV12@@Z ENDP	; icu_56::UnicodeString::indexOf
_TEXT	ENDS
PUBLIC	?indexOf@UnicodeString@icu_56@@QBEHABV12@H@Z	; icu_56::UnicodeString::indexOf
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?indexOf@UnicodeString@icu_56@@QBEHABV12@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_text$ = 8						; size = 4
_start$ = 12						; size = 4
?indexOf@UnicodeString@icu_56@@QBEHABV12@H@Z PROC	; icu_56::UnicodeString::indexOf, COMDAT
; _this$ = ecx
; Line 4087
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 4088
	lea	eax, DWORD PTR _start$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?pinIndex@UnicodeString@icu_56@@ABEXAAH@Z ; icu_56::UnicodeString::pinIndex
; Line 4089
	mov	ecx, DWORD PTR _this$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	sub	eax, DWORD PTR _start$[ebp]
	push	eax
	mov	eax, DWORD PTR _start$[ebp]
	push	eax
	mov	ecx, DWORD PTR _text$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	push	eax
	push	0
	mov	ecx, DWORD PTR _text$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?indexOf@UnicodeString@icu_56@@QBEHABV12@HHHH@Z ; icu_56::UnicodeString::indexOf
; Line 4090
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?indexOf@UnicodeString@icu_56@@QBEHABV12@H@Z ENDP	; icu_56::UnicodeString::indexOf
_TEXT	ENDS
PUBLIC	?indexOf@UnicodeString@icu_56@@QBEHABV12@HH@Z	; icu_56::UnicodeString::indexOf
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?indexOf@UnicodeString@icu_56@@QBEHABV12@HH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_text$ = 8						; size = 4
_start$ = 12						; size = 4
__length$ = 16						; size = 4
?indexOf@UnicodeString@icu_56@@QBEHABV12@HH@Z PROC	; icu_56::UnicodeString::indexOf, COMDAT
; _this$ = ecx
; Line 4096
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __length$[ebp]
	push	eax
	mov	ecx, DWORD PTR _start$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _text$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	push	eax
	push	0
	mov	edx, DWORD PTR _text$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?indexOf@UnicodeString@icu_56@@QBEHABV12@HHHH@Z ; icu_56::UnicodeString::indexOf
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?indexOf@UnicodeString@icu_56@@QBEHABV12@HH@Z ENDP	; icu_56::UnicodeString::indexOf
_TEXT	ENDS
PUBLIC	?indexOf@UnicodeString@icu_56@@QBEHPB_WHH@Z	; icu_56::UnicodeString::indexOf
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?indexOf@UnicodeString@icu_56@@QBEHPB_WHH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_srcChars$ = 8						; size = 4
_srcLength$ = 12					; size = 4
_start$ = 16						; size = 4
?indexOf@UnicodeString@icu_56@@QBEHPB_WHH@Z PROC	; icu_56::UnicodeString::indexOf, COMDAT
; _this$ = ecx
; Line 4101
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 4102
	lea	eax, DWORD PTR _start$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?pinIndex@UnicodeString@icu_56@@ABEXAAH@Z ; icu_56::UnicodeString::pinIndex
; Line 4103
	mov	ecx, DWORD PTR _this$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	sub	eax, DWORD PTR _start$[ebp]
	push	eax
	mov	eax, DWORD PTR _start$[ebp]
	push	eax
	mov	ecx, DWORD PTR _srcLength$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _srcChars$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?indexOf@UnicodeString@icu_56@@QBEHPB_WHHHH@Z ; icu_56::UnicodeString::indexOf
; Line 4104
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?indexOf@UnicodeString@icu_56@@QBEHPB_WHH@Z ENDP	; icu_56::UnicodeString::indexOf
_TEXT	ENDS
PUBLIC	?indexOf@UnicodeString@icu_56@@QBEHPB_WHHH@Z	; icu_56::UnicodeString::indexOf
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?indexOf@UnicodeString@icu_56@@QBEHPB_WHHH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_srcChars$ = 8						; size = 4
_srcLength$ = 12					; size = 4
_start$ = 16						; size = 4
__length$ = 20						; size = 4
?indexOf@UnicodeString@icu_56@@QBEHPB_WHHH@Z PROC	; icu_56::UnicodeString::indexOf, COMDAT
; _this$ = ecx
; Line 4111
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __length$[ebp]
	push	eax
	mov	ecx, DWORD PTR _start$[ebp]
	push	ecx
	mov	edx, DWORD PTR _srcLength$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _srcChars$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?indexOf@UnicodeString@icu_56@@QBEHPB_WHHHH@Z ; icu_56::UnicodeString::indexOf
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?indexOf@UnicodeString@icu_56@@QBEHPB_WHHH@Z ENDP	; icu_56::UnicodeString::indexOf
_TEXT	ENDS
PUBLIC	?indexOf@UnicodeString@icu_56@@QBEH_WHH@Z	; icu_56::UnicodeString::indexOf
EXTRN	?doIndexOf@UnicodeString@icu_56@@ABEH_WHH@Z:PROC ; icu_56::UnicodeString::doIndexOf
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?indexOf@UnicodeString@icu_56@@QBEH_WHH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_c$ = 8							; size = 2
_start$ = 12						; size = 4
__length$ = 16						; size = 4
?indexOf@UnicodeString@icu_56@@QBEH_WHH@Z PROC		; icu_56::UnicodeString::indexOf, COMDAT
; _this$ = ecx
; Line 4117
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __length$[ebp]
	push	eax
	mov	ecx, DWORD PTR _start$[ebp]
	push	ecx
	movzx	edx, WORD PTR _c$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doIndexOf@UnicodeString@icu_56@@ABEH_WHH@Z ; icu_56::UnicodeString::doIndexOf
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?indexOf@UnicodeString@icu_56@@QBEH_WHH@Z ENDP		; icu_56::UnicodeString::indexOf
_TEXT	ENDS
PUBLIC	?indexOf@UnicodeString@icu_56@@QBEHHHH@Z	; icu_56::UnicodeString::indexOf
EXTRN	?doIndexOf@UnicodeString@icu_56@@ABEHHHH@Z:PROC	; icu_56::UnicodeString::doIndexOf
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?indexOf@UnicodeString@icu_56@@QBEHHHH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_c$ = 8							; size = 4
_start$ = 12						; size = 4
__length$ = 16						; size = 4
?indexOf@UnicodeString@icu_56@@QBEHHHH@Z PROC		; icu_56::UnicodeString::indexOf, COMDAT
; _this$ = ecx
; Line 4123
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __length$[ebp]
	push	eax
	mov	ecx, DWORD PTR _start$[ebp]
	push	ecx
	mov	edx, DWORD PTR _c$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doIndexOf@UnicodeString@icu_56@@ABEHHHH@Z ; icu_56::UnicodeString::doIndexOf
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?indexOf@UnicodeString@icu_56@@QBEHHHH@Z ENDP		; icu_56::UnicodeString::indexOf
_TEXT	ENDS
PUBLIC	?indexOf@UnicodeString@icu_56@@QBEH_W@Z		; icu_56::UnicodeString::indexOf
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?indexOf@UnicodeString@icu_56@@QBEH_W@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_c$ = 8							; size = 2
?indexOf@UnicodeString@icu_56@@QBEH_W@Z PROC		; icu_56::UnicodeString::indexOf, COMDAT
; _this$ = ecx
; Line 4127
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	push	eax
	push	0
	movzx	eax, WORD PTR _c$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doIndexOf@UnicodeString@icu_56@@ABEH_WHH@Z ; icu_56::UnicodeString::doIndexOf
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?indexOf@UnicodeString@icu_56@@QBEH_W@Z ENDP		; icu_56::UnicodeString::indexOf
_TEXT	ENDS
PUBLIC	?indexOf@UnicodeString@icu_56@@QBEHH@Z		; icu_56::UnicodeString::indexOf
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?indexOf@UnicodeString@icu_56@@QBEHH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_c$ = 8							; size = 4
?indexOf@UnicodeString@icu_56@@QBEHH@Z PROC		; icu_56::UnicodeString::indexOf, COMDAT
; _this$ = ecx
; Line 4131
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	push	eax
	push	0
	mov	eax, DWORD PTR _c$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?indexOf@UnicodeString@icu_56@@QBEHHHH@Z ; icu_56::UnicodeString::indexOf
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?indexOf@UnicodeString@icu_56@@QBEHH@Z ENDP		; icu_56::UnicodeString::indexOf
_TEXT	ENDS
PUBLIC	?indexOf@UnicodeString@icu_56@@QBEH_WH@Z	; icu_56::UnicodeString::indexOf
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?indexOf@UnicodeString@icu_56@@QBEH_WH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_c$ = 8							; size = 2
_start$ = 12						; size = 4
?indexOf@UnicodeString@icu_56@@QBEH_WH@Z PROC		; icu_56::UnicodeString::indexOf, COMDAT
; _this$ = ecx
; Line 4135
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 4136
	lea	eax, DWORD PTR _start$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?pinIndex@UnicodeString@icu_56@@ABEXAAH@Z ; icu_56::UnicodeString::pinIndex
; Line 4137
	mov	ecx, DWORD PTR _this$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	sub	eax, DWORD PTR _start$[ebp]
	push	eax
	mov	eax, DWORD PTR _start$[ebp]
	push	eax
	movzx	ecx, WORD PTR _c$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doIndexOf@UnicodeString@icu_56@@ABEH_WHH@Z ; icu_56::UnicodeString::doIndexOf
; Line 4138
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?indexOf@UnicodeString@icu_56@@QBEH_WH@Z ENDP		; icu_56::UnicodeString::indexOf
_TEXT	ENDS
PUBLIC	?indexOf@UnicodeString@icu_56@@QBEHHH@Z		; icu_56::UnicodeString::indexOf
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?indexOf@UnicodeString@icu_56@@QBEHHH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_c$ = 8							; size = 4
_start$ = 12						; size = 4
?indexOf@UnicodeString@icu_56@@QBEHHH@Z PROC		; icu_56::UnicodeString::indexOf, COMDAT
; _this$ = ecx
; Line 4142
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 4143
	lea	eax, DWORD PTR _start$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?pinIndex@UnicodeString@icu_56@@ABEXAAH@Z ; icu_56::UnicodeString::pinIndex
; Line 4144
	mov	ecx, DWORD PTR _this$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	sub	eax, DWORD PTR _start$[ebp]
	push	eax
	mov	eax, DWORD PTR _start$[ebp]
	push	eax
	mov	ecx, DWORD PTR _c$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?indexOf@UnicodeString@icu_56@@QBEHHHH@Z ; icu_56::UnicodeString::indexOf
; Line 4145
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?indexOf@UnicodeString@icu_56@@QBEHHH@Z ENDP		; icu_56::UnicodeString::indexOf
_TEXT	ENDS
PUBLIC	?lastIndexOf@UnicodeString@icu_56@@QBEHPB_WHHH@Z ; icu_56::UnicodeString::lastIndexOf
EXTRN	?lastIndexOf@UnicodeString@icu_56@@QBEHPB_WHHHH@Z:PROC ; icu_56::UnicodeString::lastIndexOf
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?lastIndexOf@UnicodeString@icu_56@@QBEHPB_WHHH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_srcChars$ = 8						; size = 4
_srcLength$ = 12					; size = 4
_start$ = 16						; size = 4
__length$ = 20						; size = 4
?lastIndexOf@UnicodeString@icu_56@@QBEHPB_WHHH@Z PROC	; icu_56::UnicodeString::lastIndexOf, COMDAT
; _this$ = ecx
; Line 4152
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __length$[ebp]
	push	eax
	mov	ecx, DWORD PTR _start$[ebp]
	push	ecx
	mov	edx, DWORD PTR _srcLength$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _srcChars$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?lastIndexOf@UnicodeString@icu_56@@QBEHPB_WHHHH@Z ; icu_56::UnicodeString::lastIndexOf
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?lastIndexOf@UnicodeString@icu_56@@QBEHPB_WHHH@Z ENDP	; icu_56::UnicodeString::lastIndexOf
_TEXT	ENDS
PUBLIC	?lastIndexOf@UnicodeString@icu_56@@QBEHPB_WHH@Z	; icu_56::UnicodeString::lastIndexOf
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?lastIndexOf@UnicodeString@icu_56@@QBEHPB_WHH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_srcChars$ = 8						; size = 4
_srcLength$ = 12					; size = 4
_start$ = 16						; size = 4
?lastIndexOf@UnicodeString@icu_56@@QBEHPB_WHH@Z PROC	; icu_56::UnicodeString::lastIndexOf, COMDAT
; _this$ = ecx
; Line 4157
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 4158
	lea	eax, DWORD PTR _start$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?pinIndex@UnicodeString@icu_56@@ABEXAAH@Z ; icu_56::UnicodeString::pinIndex
; Line 4159
	mov	ecx, DWORD PTR _this$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	sub	eax, DWORD PTR _start$[ebp]
	push	eax
	mov	eax, DWORD PTR _start$[ebp]
	push	eax
	mov	ecx, DWORD PTR _srcLength$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _srcChars$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?lastIndexOf@UnicodeString@icu_56@@QBEHPB_WHHHH@Z ; icu_56::UnicodeString::lastIndexOf
; Line 4160
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?lastIndexOf@UnicodeString@icu_56@@QBEHPB_WHH@Z ENDP	; icu_56::UnicodeString::lastIndexOf
_TEXT	ENDS
PUBLIC	?lastIndexOf@UnicodeString@icu_56@@QBEHABV12@HHHH@Z ; icu_56::UnicodeString::lastIndexOf
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?lastIndexOf@UnicodeString@icu_56@@QBEHABV12@HHHH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_srcText$ = 8						; size = 4
_srcStart$ = 12						; size = 4
_srcLength$ = 16					; size = 4
_start$ = 20						; size = 4
__length$ = 24						; size = 4
?lastIndexOf@UnicodeString@icu_56@@QBEHABV12@HHHH@Z PROC ; icu_56::UnicodeString::lastIndexOf, COMDAT
; _this$ = ecx
; Line 4168
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 4169
	mov	ecx, DWORD PTR _srcText$[ebp]
	call	?isBogus@UnicodeString@icu_56@@QBECXZ	; icu_56::UnicodeString::isBogus
	movsx	eax, al
	test	eax, eax
	jne	SHORT $LN2@lastIndexO
; Line 4170
	lea	eax, DWORD PTR _srcLength$[ebp]
	push	eax
	lea	ecx, DWORD PTR _srcStart$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _srcText$[ebp]
	call	?pinIndices@UnicodeString@icu_56@@ABEXAAH0@Z ; icu_56::UnicodeString::pinIndices
; Line 4171
	cmp	DWORD PTR _srcLength$[ebp], 0
	jle	SHORT $LN2@lastIndexO
; Line 4172
	mov	eax, DWORD PTR __length$[ebp]
	push	eax
	mov	ecx, DWORD PTR _start$[ebp]
	push	ecx
	mov	edx, DWORD PTR _srcLength$[ebp]
	push	edx
	mov	eax, DWORD PTR _srcStart$[ebp]
	push	eax
	mov	ecx, DWORD PTR _srcText$[ebp]
	call	?getArrayStart@UnicodeString@icu_56@@ABEPB_WXZ ; icu_56::UnicodeString::getArrayStart
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?lastIndexOf@UnicodeString@icu_56@@QBEHPB_WHHHH@Z ; icu_56::UnicodeString::lastIndexOf
	jmp	SHORT $LN3@lastIndexO
$LN2@lastIndexO:
; Line 4175
	or	eax, -1
$LN3@lastIndexO:
; Line 4176
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?lastIndexOf@UnicodeString@icu_56@@QBEHABV12@HHHH@Z ENDP ; icu_56::UnicodeString::lastIndexOf
_TEXT	ENDS
PUBLIC	?lastIndexOf@UnicodeString@icu_56@@QBEHABV12@HH@Z ; icu_56::UnicodeString::lastIndexOf
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?lastIndexOf@UnicodeString@icu_56@@QBEHABV12@HH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_text$ = 8						; size = 4
_start$ = 12						; size = 4
__length$ = 16						; size = 4
?lastIndexOf@UnicodeString@icu_56@@QBEHABV12@HH@Z PROC	; icu_56::UnicodeString::lastIndexOf, COMDAT
; _this$ = ecx
; Line 4182
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __length$[ebp]
	push	eax
	mov	ecx, DWORD PTR _start$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _text$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	push	eax
	push	0
	mov	edx, DWORD PTR _text$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?lastIndexOf@UnicodeString@icu_56@@QBEHABV12@HHHH@Z ; icu_56::UnicodeString::lastIndexOf
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?lastIndexOf@UnicodeString@icu_56@@QBEHABV12@HH@Z ENDP	; icu_56::UnicodeString::lastIndexOf
_TEXT	ENDS
PUBLIC	?lastIndexOf@UnicodeString@icu_56@@QBEHABV12@H@Z ; icu_56::UnicodeString::lastIndexOf
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?lastIndexOf@UnicodeString@icu_56@@QBEHABV12@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_text$ = 8						; size = 4
_start$ = 12						; size = 4
?lastIndexOf@UnicodeString@icu_56@@QBEHABV12@H@Z PROC	; icu_56::UnicodeString::lastIndexOf, COMDAT
; _this$ = ecx
; Line 4186
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 4187
	lea	eax, DWORD PTR _start$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?pinIndex@UnicodeString@icu_56@@ABEXAAH@Z ; icu_56::UnicodeString::pinIndex
; Line 4188
	mov	ecx, DWORD PTR _this$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	sub	eax, DWORD PTR _start$[ebp]
	push	eax
	mov	eax, DWORD PTR _start$[ebp]
	push	eax
	mov	ecx, DWORD PTR _text$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	push	eax
	push	0
	mov	ecx, DWORD PTR _text$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?lastIndexOf@UnicodeString@icu_56@@QBEHABV12@HHHH@Z ; icu_56::UnicodeString::lastIndexOf
; Line 4189
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?lastIndexOf@UnicodeString@icu_56@@QBEHABV12@H@Z ENDP	; icu_56::UnicodeString::lastIndexOf
_TEXT	ENDS
PUBLIC	?lastIndexOf@UnicodeString@icu_56@@QBEHABV12@@Z	; icu_56::UnicodeString::lastIndexOf
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?lastIndexOf@UnicodeString@icu_56@@QBEHABV12@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_text$ = 8						; size = 4
?lastIndexOf@UnicodeString@icu_56@@QBEHABV12@@Z PROC	; icu_56::UnicodeString::lastIndexOf, COMDAT
; _this$ = ecx
; Line 4193
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	push	eax
	push	0
	mov	ecx, DWORD PTR _text$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	push	eax
	push	0
	mov	eax, DWORD PTR _text$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?lastIndexOf@UnicodeString@icu_56@@QBEHABV12@HHHH@Z ; icu_56::UnicodeString::lastIndexOf
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?lastIndexOf@UnicodeString@icu_56@@QBEHABV12@@Z ENDP	; icu_56::UnicodeString::lastIndexOf
_TEXT	ENDS
PUBLIC	?lastIndexOf@UnicodeString@icu_56@@QBEH_WHH@Z	; icu_56::UnicodeString::lastIndexOf
EXTRN	?doLastIndexOf@UnicodeString@icu_56@@ABEH_WHH@Z:PROC ; icu_56::UnicodeString::doLastIndexOf
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?lastIndexOf@UnicodeString@icu_56@@QBEH_WHH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_c$ = 8							; size = 2
_start$ = 12						; size = 4
__length$ = 16						; size = 4
?lastIndexOf@UnicodeString@icu_56@@QBEH_WHH@Z PROC	; icu_56::UnicodeString::lastIndexOf, COMDAT
; _this$ = ecx
; Line 4199
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __length$[ebp]
	push	eax
	mov	ecx, DWORD PTR _start$[ebp]
	push	ecx
	movzx	edx, WORD PTR _c$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doLastIndexOf@UnicodeString@icu_56@@ABEH_WHH@Z ; icu_56::UnicodeString::doLastIndexOf
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?lastIndexOf@UnicodeString@icu_56@@QBEH_WHH@Z ENDP	; icu_56::UnicodeString::lastIndexOf
_TEXT	ENDS
PUBLIC	?lastIndexOf@UnicodeString@icu_56@@QBEHHHH@Z	; icu_56::UnicodeString::lastIndexOf
EXTRN	?doLastIndexOf@UnicodeString@icu_56@@ABEHHHH@Z:PROC ; icu_56::UnicodeString::doLastIndexOf
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?lastIndexOf@UnicodeString@icu_56@@QBEHHHH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_c$ = 8							; size = 4
_start$ = 12						; size = 4
__length$ = 16						; size = 4
?lastIndexOf@UnicodeString@icu_56@@QBEHHHH@Z PROC	; icu_56::UnicodeString::lastIndexOf, COMDAT
; _this$ = ecx
; Line 4204
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 4205
	mov	eax, DWORD PTR __length$[ebp]
	push	eax
	mov	ecx, DWORD PTR _start$[ebp]
	push	ecx
	mov	edx, DWORD PTR _c$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doLastIndexOf@UnicodeString@icu_56@@ABEHHHH@Z ; icu_56::UnicodeString::doLastIndexOf
; Line 4206
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?lastIndexOf@UnicodeString@icu_56@@QBEHHHH@Z ENDP	; icu_56::UnicodeString::lastIndexOf
_TEXT	ENDS
PUBLIC	?lastIndexOf@UnicodeString@icu_56@@QBEH_W@Z	; icu_56::UnicodeString::lastIndexOf
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?lastIndexOf@UnicodeString@icu_56@@QBEH_W@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_c$ = 8							; size = 2
?lastIndexOf@UnicodeString@icu_56@@QBEH_W@Z PROC	; icu_56::UnicodeString::lastIndexOf, COMDAT
; _this$ = ecx
; Line 4210
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	push	eax
	push	0
	movzx	eax, WORD PTR _c$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doLastIndexOf@UnicodeString@icu_56@@ABEH_WHH@Z ; icu_56::UnicodeString::doLastIndexOf
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?lastIndexOf@UnicodeString@icu_56@@QBEH_W@Z ENDP	; icu_56::UnicodeString::lastIndexOf
_TEXT	ENDS
PUBLIC	?lastIndexOf@UnicodeString@icu_56@@QBEHH@Z	; icu_56::UnicodeString::lastIndexOf
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?lastIndexOf@UnicodeString@icu_56@@QBEHH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_c$ = 8							; size = 4
?lastIndexOf@UnicodeString@icu_56@@QBEHH@Z PROC		; icu_56::UnicodeString::lastIndexOf, COMDAT
; _this$ = ecx
; Line 4213
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 4214
	mov	ecx, DWORD PTR _this$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	push	eax
	push	0
	mov	eax, DWORD PTR _c$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?lastIndexOf@UnicodeString@icu_56@@QBEHHHH@Z ; icu_56::UnicodeString::lastIndexOf
; Line 4215
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?lastIndexOf@UnicodeString@icu_56@@QBEHH@Z ENDP		; icu_56::UnicodeString::lastIndexOf
_TEXT	ENDS
PUBLIC	?lastIndexOf@UnicodeString@icu_56@@QBEH_WH@Z	; icu_56::UnicodeString::lastIndexOf
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?lastIndexOf@UnicodeString@icu_56@@QBEH_WH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_c$ = 8							; size = 2
_start$ = 12						; size = 4
?lastIndexOf@UnicodeString@icu_56@@QBEH_WH@Z PROC	; icu_56::UnicodeString::lastIndexOf, COMDAT
; _this$ = ecx
; Line 4219
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 4220
	lea	eax, DWORD PTR _start$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?pinIndex@UnicodeString@icu_56@@ABEXAAH@Z ; icu_56::UnicodeString::pinIndex
; Line 4221
	mov	ecx, DWORD PTR _this$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	sub	eax, DWORD PTR _start$[ebp]
	push	eax
	mov	eax, DWORD PTR _start$[ebp]
	push	eax
	movzx	ecx, WORD PTR _c$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doLastIndexOf@UnicodeString@icu_56@@ABEH_WHH@Z ; icu_56::UnicodeString::doLastIndexOf
; Line 4222
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?lastIndexOf@UnicodeString@icu_56@@QBEH_WH@Z ENDP	; icu_56::UnicodeString::lastIndexOf
_TEXT	ENDS
PUBLIC	?lastIndexOf@UnicodeString@icu_56@@QBEHHH@Z	; icu_56::UnicodeString::lastIndexOf
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?lastIndexOf@UnicodeString@icu_56@@QBEHHH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_c$ = 8							; size = 4
_start$ = 12						; size = 4
?lastIndexOf@UnicodeString@icu_56@@QBEHHH@Z PROC	; icu_56::UnicodeString::lastIndexOf, COMDAT
; _this$ = ecx
; Line 4226
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 4227
	lea	eax, DWORD PTR _start$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?pinIndex@UnicodeString@icu_56@@ABEXAAH@Z ; icu_56::UnicodeString::pinIndex
; Line 4228
	mov	ecx, DWORD PTR _this$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	sub	eax, DWORD PTR _start$[ebp]
	push	eax
	mov	eax, DWORD PTR _start$[ebp]
	push	eax
	mov	ecx, DWORD PTR _c$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?lastIndexOf@UnicodeString@icu_56@@QBEHHHH@Z ; icu_56::UnicodeString::lastIndexOf
; Line 4229
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?lastIndexOf@UnicodeString@icu_56@@QBEHHH@Z ENDP	; icu_56::UnicodeString::lastIndexOf
_TEXT	ENDS
PUBLIC	?startsWith@UnicodeString@icu_56@@QBECABV12@@Z	; icu_56::UnicodeString::startsWith
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?startsWith@UnicodeString@icu_56@@QBECABV12@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_text$ = 8						; size = 4
?startsWith@UnicodeString@icu_56@@QBECABV12@@Z PROC	; icu_56::UnicodeString::startsWith, COMDAT
; _this$ = ecx
; Line 4233
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _text$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	push	eax
	push	0
	mov	eax, DWORD PTR _text$[ebp]
	push	eax
	mov	ecx, DWORD PTR _text$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?compare@UnicodeString@icu_56@@QBECHHABV12@HH@Z ; icu_56::UnicodeString::compare
	movsx	ecx, al
	test	ecx, ecx
	sete	al
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?startsWith@UnicodeString@icu_56@@QBECABV12@@Z ENDP	; icu_56::UnicodeString::startsWith
_TEXT	ENDS
PUBLIC	?startsWith@UnicodeString@icu_56@@QBECABV12@HH@Z ; icu_56::UnicodeString::startsWith
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?startsWith@UnicodeString@icu_56@@QBECABV12@HH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_srcText$ = 8						; size = 4
_srcStart$ = 12						; size = 4
_srcLength$ = 16					; size = 4
?startsWith@UnicodeString@icu_56@@QBECABV12@HH@Z PROC	; icu_56::UnicodeString::startsWith, COMDAT
; _this$ = ecx
; Line 4239
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _srcLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _srcStart$[ebp]
	push	ecx
	mov	edx, DWORD PTR _srcText$[ebp]
	push	edx
	mov	eax, DWORD PTR _srcLength$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doCompare@UnicodeString@icu_56@@ABECHHABV12@HH@Z ; icu_56::UnicodeString::doCompare
	movsx	ecx, al
	test	ecx, ecx
	sete	al
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?startsWith@UnicodeString@icu_56@@QBECABV12@HH@Z ENDP	; icu_56::UnicodeString::startsWith
_TEXT	ENDS
PUBLIC	?startsWith@UnicodeString@icu_56@@QBECPB_WH@Z	; icu_56::UnicodeString::startsWith
EXTRN	_u_strlen_56:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?startsWith@UnicodeString@icu_56@@QBECPB_WH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_srcChars$ = 8						; size = 4
_srcLength$ = 12					; size = 4
?startsWith@UnicodeString@icu_56@@QBECPB_WH@Z PROC	; icu_56::UnicodeString::startsWith, COMDAT
; _this$ = ecx
; Line 4242
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 4243
	cmp	DWORD PTR _srcLength$[ebp], 0
	jge	SHORT $LN1@startsWith
; Line 4244
	mov	eax, DWORD PTR _srcChars$[ebp]
	push	eax
	call	_u_strlen_56
	add	esp, 4
	mov	DWORD PTR _srcLength$[ebp], eax
$LN1@startsWith:
; Line 4246
	mov	eax, DWORD PTR _srcLength$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _srcChars$[ebp]
	push	ecx
	mov	edx, DWORD PTR _srcLength$[ebp]
	push	edx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doCompare@UnicodeString@icu_56@@ABECHHPB_WHH@Z ; icu_56::UnicodeString::doCompare
	movsx	eax, al
	test	eax, eax
	sete	al
; Line 4247
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?startsWith@UnicodeString@icu_56@@QBECPB_WH@Z ENDP	; icu_56::UnicodeString::startsWith
_TEXT	ENDS
PUBLIC	?startsWith@UnicodeString@icu_56@@QBECPB_WHH@Z	; icu_56::UnicodeString::startsWith
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?startsWith@UnicodeString@icu_56@@QBECPB_WHH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_srcChars$ = 8						; size = 4
_srcStart$ = 12						; size = 4
_srcLength$ = 16					; size = 4
?startsWith@UnicodeString@icu_56@@QBECPB_WHH@Z PROC	; icu_56::UnicodeString::startsWith, COMDAT
; _this$ = ecx
; Line 4250
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 4251
	cmp	DWORD PTR _srcLength$[ebp], 0
	jge	SHORT $LN1@startsWith@2
; Line 4252
	mov	eax, DWORD PTR _srcChars$[ebp]
	push	eax
	call	_u_strlen_56
	add	esp, 4
	mov	DWORD PTR _srcLength$[ebp], eax
$LN1@startsWith@2:
; Line 4254
	mov	eax, DWORD PTR _srcLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _srcStart$[ebp]
	push	ecx
	mov	edx, DWORD PTR _srcChars$[ebp]
	push	edx
	mov	eax, DWORD PTR _srcLength$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doCompare@UnicodeString@icu_56@@ABECHHPB_WHH@Z ; icu_56::UnicodeString::doCompare
	movsx	ecx, al
	test	ecx, ecx
	sete	al
; Line 4255
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?startsWith@UnicodeString@icu_56@@QBECPB_WHH@Z ENDP	; icu_56::UnicodeString::startsWith
_TEXT	ENDS
PUBLIC	?endsWith@UnicodeString@icu_56@@QBECABV12@@Z	; icu_56::UnicodeString::endsWith
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?endsWith@UnicodeString@icu_56@@QBECABV12@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_text$ = 8						; size = 4
?endsWith@UnicodeString@icu_56@@QBECABV12@@Z PROC	; icu_56::UnicodeString::endsWith, COMDAT
; _this$ = ecx
; Line 4259
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 4260
	mov	ecx, DWORD PTR _text$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	push	eax
	push	0
	mov	eax, DWORD PTR _text$[ebp]
	push	eax
	mov	ecx, DWORD PTR _text$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	mov	esi, eax
	mov	ecx, DWORD PTR _text$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	sub	esi, eax
	push	esi
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doCompare@UnicodeString@icu_56@@ABECHHABV12@HH@Z ; icu_56::UnicodeString::doCompare
	movsx	ecx, al
	test	ecx, ecx
	sete	al
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?endsWith@UnicodeString@icu_56@@QBECABV12@@Z ENDP	; icu_56::UnicodeString::endsWith
_TEXT	ENDS
PUBLIC	?endsWith@UnicodeString@icu_56@@QBECABV12@HH@Z	; icu_56::UnicodeString::endsWith
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?endsWith@UnicodeString@icu_56@@QBECABV12@HH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_srcText$ = 8						; size = 4
_srcStart$ = 12						; size = 4
_srcLength$ = 16					; size = 4
?endsWith@UnicodeString@icu_56@@QBECABV12@HH@Z PROC	; icu_56::UnicodeString::endsWith, COMDAT
; _this$ = ecx
; Line 4265
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 4266
	lea	eax, DWORD PTR _srcLength$[ebp]
	push	eax
	lea	ecx, DWORD PTR _srcStart$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _srcText$[ebp]
	call	?pinIndices@UnicodeString@icu_56@@ABEXAAH0@Z ; icu_56::UnicodeString::pinIndices
; Line 4268
	mov	eax, DWORD PTR _srcLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _srcStart$[ebp]
	push	ecx
	mov	edx, DWORD PTR _srcText$[ebp]
	push	edx
	mov	eax, DWORD PTR _srcLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	sub	eax, DWORD PTR _srcLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doCompare@UnicodeString@icu_56@@ABECHHABV12@HH@Z ; icu_56::UnicodeString::doCompare
	movsx	ecx, al
	test	ecx, ecx
	sete	al
; Line 4269
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?endsWith@UnicodeString@icu_56@@QBECABV12@HH@Z ENDP	; icu_56::UnicodeString::endsWith
_TEXT	ENDS
PUBLIC	?endsWith@UnicodeString@icu_56@@QBECPB_WH@Z	; icu_56::UnicodeString::endsWith
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?endsWith@UnicodeString@icu_56@@QBECPB_WH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_srcChars$ = 8						; size = 4
_srcLength$ = 12					; size = 4
?endsWith@UnicodeString@icu_56@@QBECPB_WH@Z PROC	; icu_56::UnicodeString::endsWith, COMDAT
; _this$ = ecx
; Line 4273
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 4274
	cmp	DWORD PTR _srcLength$[ebp], 0
	jge	SHORT $LN1@endsWith
; Line 4275
	mov	eax, DWORD PTR _srcChars$[ebp]
	push	eax
	call	_u_strlen_56
	add	esp, 4
	mov	DWORD PTR _srcLength$[ebp], eax
$LN1@endsWith:
; Line 4278
	mov	eax, DWORD PTR _srcLength$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _srcChars$[ebp]
	push	ecx
	mov	edx, DWORD PTR _srcLength$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	sub	eax, DWORD PTR _srcLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doCompare@UnicodeString@icu_56@@ABECHHPB_WHH@Z ; icu_56::UnicodeString::doCompare
	movsx	eax, al
	test	eax, eax
	sete	al
; Line 4279
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?endsWith@UnicodeString@icu_56@@QBECPB_WH@Z ENDP	; icu_56::UnicodeString::endsWith
_TEXT	ENDS
PUBLIC	?endsWith@UnicodeString@icu_56@@QBECPB_WHH@Z	; icu_56::UnicodeString::endsWith
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?endsWith@UnicodeString@icu_56@@QBECPB_WHH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_srcChars$ = 8						; size = 4
_srcStart$ = 12						; size = 4
_srcLength$ = 16					; size = 4
?endsWith@UnicodeString@icu_56@@QBECPB_WHH@Z PROC	; icu_56::UnicodeString::endsWith, COMDAT
; _this$ = ecx
; Line 4284
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 4285
	cmp	DWORD PTR _srcLength$[ebp], 0
	jge	SHORT $LN1@endsWith@2
; Line 4286
	mov	eax, DWORD PTR _srcStart$[ebp]
	mov	ecx, DWORD PTR _srcChars$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	push	edx
	call	_u_strlen_56
	add	esp, 4
	mov	DWORD PTR _srcLength$[ebp], eax
$LN1@endsWith@2:
; Line 4289
	mov	eax, DWORD PTR _srcLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _srcStart$[ebp]
	push	ecx
	mov	edx, DWORD PTR _srcChars$[ebp]
	push	edx
	mov	eax, DWORD PTR _srcLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	sub	eax, DWORD PTR _srcLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doCompare@UnicodeString@icu_56@@ABECHHPB_WHH@Z ; icu_56::UnicodeString::doCompare
	movsx	ecx, al
	test	ecx, ecx
	sete	al
; Line 4290
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?endsWith@UnicodeString@icu_56@@QBECPB_WHH@Z ENDP	; icu_56::UnicodeString::endsWith
_TEXT	ENDS
PUBLIC	?replace@UnicodeString@icu_56@@QAEAAV12@HHABV12@@Z ; icu_56::UnicodeString::replace
EXTRN	?doReplace@UnicodeString@icu_56@@AAEAAV12@HHABV12@HH@Z:PROC ; icu_56::UnicodeString::doReplace
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?replace@UnicodeString@icu_56@@QAEAAV12@HHABV12@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_start$ = 8						; size = 4
__length$ = 12						; size = 4
_srcText$ = 16						; size = 4
?replace@UnicodeString@icu_56@@QAEAAV12@HHABV12@@Z PROC	; icu_56::UnicodeString::replace, COMDAT
; _this$ = ecx
; Line 4299
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _srcText$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	push	eax
	push	0
	mov	eax, DWORD PTR _srcText$[ebp]
	push	eax
	mov	ecx, DWORD PTR __length$[ebp]
	push	ecx
	mov	edx, DWORD PTR _start$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doReplace@UnicodeString@icu_56@@AAEAAV12@HHABV12@HH@Z ; icu_56::UnicodeString::doReplace
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?replace@UnicodeString@icu_56@@QAEAAV12@HHABV12@@Z ENDP	; icu_56::UnicodeString::replace
_TEXT	ENDS
PUBLIC	?replace@UnicodeString@icu_56@@QAEAAV12@HHABV12@HH@Z ; icu_56::UnicodeString::replace
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?replace@UnicodeString@icu_56@@QAEAAV12@HHABV12@HH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_start$ = 8						; size = 4
__length$ = 12						; size = 4
_srcText$ = 16						; size = 4
_srcStart$ = 20						; size = 4
_srcLength$ = 24					; size = 4
?replace@UnicodeString@icu_56@@QAEAAV12@HHABV12@HH@Z PROC ; icu_56::UnicodeString::replace, COMDAT
; _this$ = ecx
; Line 4307
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _srcLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _srcStart$[ebp]
	push	ecx
	mov	edx, DWORD PTR _srcText$[ebp]
	push	edx
	mov	eax, DWORD PTR __length$[ebp]
	push	eax
	mov	ecx, DWORD PTR _start$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doReplace@UnicodeString@icu_56@@AAEAAV12@HHABV12@HH@Z ; icu_56::UnicodeString::doReplace
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?replace@UnicodeString@icu_56@@QAEAAV12@HHABV12@HH@Z ENDP ; icu_56::UnicodeString::replace
_TEXT	ENDS
PUBLIC	?replace@UnicodeString@icu_56@@QAEAAV12@HHPB_WH@Z ; icu_56::UnicodeString::replace
EXTRN	?doReplace@UnicodeString@icu_56@@AAEAAV12@HHPB_WHH@Z:PROC ; icu_56::UnicodeString::doReplace
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?replace@UnicodeString@icu_56@@QAEAAV12@HHPB_WH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_start$ = 8						; size = 4
__length$ = 12						; size = 4
_srcChars$ = 16						; size = 4
_srcLength$ = 20					; size = 4
?replace@UnicodeString@icu_56@@QAEAAV12@HHPB_WH@Z PROC	; icu_56::UnicodeString::replace, COMDAT
; _this$ = ecx
; Line 4314
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _srcLength$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _srcChars$[ebp]
	push	ecx
	mov	edx, DWORD PTR __length$[ebp]
	push	edx
	mov	eax, DWORD PTR _start$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doReplace@UnicodeString@icu_56@@AAEAAV12@HHPB_WHH@Z ; icu_56::UnicodeString::doReplace
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?replace@UnicodeString@icu_56@@QAEAAV12@HHPB_WH@Z ENDP	; icu_56::UnicodeString::replace
_TEXT	ENDS
PUBLIC	?replace@UnicodeString@icu_56@@QAEAAV12@HHPB_WHH@Z ; icu_56::UnicodeString::replace
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?replace@UnicodeString@icu_56@@QAEAAV12@HHPB_WHH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_start$ = 8						; size = 4
__length$ = 12						; size = 4
_srcChars$ = 16						; size = 4
_srcStart$ = 20						; size = 4
_srcLength$ = 24					; size = 4
?replace@UnicodeString@icu_56@@QAEAAV12@HHPB_WHH@Z PROC	; icu_56::UnicodeString::replace, COMDAT
; _this$ = ecx
; Line 4322
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _srcLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _srcStart$[ebp]
	push	ecx
	mov	edx, DWORD PTR _srcChars$[ebp]
	push	edx
	mov	eax, DWORD PTR __length$[ebp]
	push	eax
	mov	ecx, DWORD PTR _start$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doReplace@UnicodeString@icu_56@@AAEAAV12@HHPB_WHH@Z ; icu_56::UnicodeString::doReplace
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?replace@UnicodeString@icu_56@@QAEAAV12@HHPB_WHH@Z ENDP	; icu_56::UnicodeString::replace
_TEXT	ENDS
PUBLIC	?replace@UnicodeString@icu_56@@QAEAAV12@HH_W@Z	; icu_56::UnicodeString::replace
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?replace@UnicodeString@icu_56@@QAEAAV12@HH_W@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_start$ = 8						; size = 4
__length$ = 12						; size = 4
_srcChar$ = 16						; size = 2
?replace@UnicodeString@icu_56@@QAEAAV12@HH_W@Z PROC	; icu_56::UnicodeString::replace, COMDAT
; _this$ = ecx
; Line 4328
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	1
	push	0
	lea	eax, DWORD PTR _srcChar$[ebp]
	push	eax
	mov	ecx, DWORD PTR __length$[ebp]
	push	ecx
	mov	edx, DWORD PTR _start$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doReplace@UnicodeString@icu_56@@AAEAAV12@HHPB_WHH@Z ; icu_56::UnicodeString::doReplace
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?replace@UnicodeString@icu_56@@QAEAAV12@HH_W@Z ENDP	; icu_56::UnicodeString::replace
_TEXT	ENDS
PUBLIC	?replaceBetween@UnicodeString@icu_56@@QAEAAV12@HHABV12@@Z ; icu_56::UnicodeString::replaceBetween
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?replaceBetween@UnicodeString@icu_56@@QAEAAV12@HHABV12@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_start$ = 8						; size = 4
_limit$ = 12						; size = 4
_srcText$ = 16						; size = 4
?replaceBetween@UnicodeString@icu_56@@QAEAAV12@HHABV12@@Z PROC ; icu_56::UnicodeString::replaceBetween, COMDAT
; _this$ = ecx
; Line 4334
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _srcText$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	push	eax
	push	0
	mov	eax, DWORD PTR _srcText$[ebp]
	push	eax
	mov	ecx, DWORD PTR _limit$[ebp]
	sub	ecx, DWORD PTR _start$[ebp]
	push	ecx
	mov	edx, DWORD PTR _start$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doReplace@UnicodeString@icu_56@@AAEAAV12@HHABV12@HH@Z ; icu_56::UnicodeString::doReplace
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?replaceBetween@UnicodeString@icu_56@@QAEAAV12@HHABV12@@Z ENDP ; icu_56::UnicodeString::replaceBetween
_TEXT	ENDS
PUBLIC	?replaceBetween@UnicodeString@icu_56@@QAEAAV12@HHABV12@HH@Z ; icu_56::UnicodeString::replaceBetween
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?replaceBetween@UnicodeString@icu_56@@QAEAAV12@HHABV12@HH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_start$ = 8						; size = 4
_limit$ = 12						; size = 4
_srcText$ = 16						; size = 4
_srcStart$ = 20						; size = 4
_srcLimit$ = 24						; size = 4
?replaceBetween@UnicodeString@icu_56@@QAEAAV12@HHABV12@HH@Z PROC ; icu_56::UnicodeString::replaceBetween, COMDAT
; _this$ = ecx
; Line 4342
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _srcLimit$[ebp]
	sub	eax, DWORD PTR _srcStart$[ebp]
	push	eax
	mov	ecx, DWORD PTR _srcStart$[ebp]
	push	ecx
	mov	edx, DWORD PTR _srcText$[ebp]
	push	edx
	mov	eax, DWORD PTR _limit$[ebp]
	sub	eax, DWORD PTR _start$[ebp]
	push	eax
	mov	ecx, DWORD PTR _start$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doReplace@UnicodeString@icu_56@@AAEAAV12@HHABV12@HH@Z ; icu_56::UnicodeString::doReplace
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?replaceBetween@UnicodeString@icu_56@@QAEAAV12@HHABV12@HH@Z ENDP ; icu_56::UnicodeString::replaceBetween
_TEXT	ENDS
PUBLIC	?findAndReplace@UnicodeString@icu_56@@QAEAAV12@ABV12@0@Z ; icu_56::UnicodeString::findAndReplace
EXTRN	?findAndReplace@UnicodeString@icu_56@@QAEAAV12@HHABV12@HH0HH@Z:PROC ; icu_56::UnicodeString::findAndReplace
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?findAndReplace@UnicodeString@icu_56@@QAEAAV12@ABV12@0@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_oldText$ = 8						; size = 4
_newText$ = 12						; size = 4
?findAndReplace@UnicodeString@icu_56@@QAEAAV12@ABV12@0@Z PROC ; icu_56::UnicodeString::findAndReplace, COMDAT
; _this$ = ecx
; Line 4347
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 4348
	mov	ecx, DWORD PTR _newText$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	push	eax
	push	0
	mov	eax, DWORD PTR _newText$[ebp]
	push	eax
	mov	ecx, DWORD PTR _oldText$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	push	eax
	push	0
	mov	ecx, DWORD PTR _oldText$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?findAndReplace@UnicodeString@icu_56@@QAEAAV12@HHABV12@HH0HH@Z ; icu_56::UnicodeString::findAndReplace
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?findAndReplace@UnicodeString@icu_56@@QAEAAV12@ABV12@0@Z ENDP ; icu_56::UnicodeString::findAndReplace
_TEXT	ENDS
PUBLIC	?findAndReplace@UnicodeString@icu_56@@QAEAAV12@HHABV12@0@Z ; icu_56::UnicodeString::findAndReplace
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?findAndReplace@UnicodeString@icu_56@@QAEAAV12@HHABV12@0@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_start$ = 8						; size = 4
__length$ = 12						; size = 4
_oldText$ = 16						; size = 4
_newText$ = 20						; size = 4
?findAndReplace@UnicodeString@icu_56@@QAEAAV12@HHABV12@0@Z PROC ; icu_56::UnicodeString::findAndReplace, COMDAT
; _this$ = ecx
; Line 4355
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 4356
	mov	ecx, DWORD PTR _newText$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	push	eax
	push	0
	mov	eax, DWORD PTR _newText$[ebp]
	push	eax
	mov	ecx, DWORD PTR _oldText$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	push	eax
	push	0
	mov	ecx, DWORD PTR _oldText$[ebp]
	push	ecx
	mov	edx, DWORD PTR __length$[ebp]
	push	edx
	mov	eax, DWORD PTR _start$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?findAndReplace@UnicodeString@icu_56@@QAEAAV12@HHABV12@HH0HH@Z ; icu_56::UnicodeString::findAndReplace
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?findAndReplace@UnicodeString@icu_56@@QAEAAV12@HHABV12@0@Z ENDP ; icu_56::UnicodeString::findAndReplace
_TEXT	ENDS
PUBLIC	?doExtract@UnicodeString@icu_56@@ABEXHHAAV12@@Z	; icu_56::UnicodeString::doExtract
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?doExtract@UnicodeString@icu_56@@ABEXHHAAV12@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_start$ = 8						; size = 4
__length$ = 12						; size = 4
_target$ = 16						; size = 4
?doExtract@UnicodeString@icu_56@@ABEXHHAAV12@@Z PROC	; icu_56::UnicodeString::doExtract, COMDAT
; _this$ = ecx
; Line 4365
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __length$[ebp]
	push	eax
	mov	ecx, DWORD PTR _start$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR _target$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	push	eax
	push	0
	mov	ecx, DWORD PTR _target$[ebp]
	call	?replace@UnicodeString@icu_56@@QAEAAV12@HHABV12@HH@Z ; icu_56::UnicodeString::replace
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?doExtract@UnicodeString@icu_56@@ABEXHHAAV12@@Z ENDP	; icu_56::UnicodeString::doExtract
_TEXT	ENDS
PUBLIC	?extract@UnicodeString@icu_56@@QBEXHHPA_WH@Z	; icu_56::UnicodeString::extract
EXTRN	?doExtract@UnicodeString@icu_56@@ABEXHHPA_WH@Z:PROC ; icu_56::UnicodeString::doExtract
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?extract@UnicodeString@icu_56@@QBEXHHPA_WH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_start$ = 8						; size = 4
__length$ = 12						; size = 4
_target$ = 16						; size = 4
_targetStart$ = 20					; size = 4
?extract@UnicodeString@icu_56@@QBEXHHPA_WH@Z PROC	; icu_56::UnicodeString::extract, COMDAT
; _this$ = ecx
; Line 4372
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _targetStart$[ebp]
	push	eax
	mov	ecx, DWORD PTR _target$[ebp]
	push	ecx
	mov	edx, DWORD PTR __length$[ebp]
	push	edx
	mov	eax, DWORD PTR _start$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doExtract@UnicodeString@icu_56@@ABEXHHPA_WH@Z ; icu_56::UnicodeString::doExtract
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?extract@UnicodeString@icu_56@@QBEXHHPA_WH@Z ENDP	; icu_56::UnicodeString::extract
_TEXT	ENDS
PUBLIC	?extract@UnicodeString@icu_56@@QBEXHHAAV12@@Z	; icu_56::UnicodeString::extract
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?extract@UnicodeString@icu_56@@QBEXHHAAV12@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_start$ = 8						; size = 4
__length$ = 12						; size = 4
_target$ = 16						; size = 4
?extract@UnicodeString@icu_56@@QBEXHHAAV12@@Z PROC	; icu_56::UnicodeString::extract, COMDAT
; _this$ = ecx
; Line 4378
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _target$[ebp]
	push	eax
	mov	ecx, DWORD PTR __length$[ebp]
	push	ecx
	mov	edx, DWORD PTR _start$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doExtract@UnicodeString@icu_56@@ABEXHHAAV12@@Z ; icu_56::UnicodeString::doExtract
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?extract@UnicodeString@icu_56@@QBEXHHAAV12@@Z ENDP	; icu_56::UnicodeString::extract
_TEXT	ENDS
PUBLIC	?extract@UnicodeString@icu_56@@QBEHHHPADPBD@Z	; icu_56::UnicodeString::extract
EXTRN	?extract@UnicodeString@icu_56@@QBEHHHPADIPBD@Z:PROC ; icu_56::UnicodeString::extract
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?extract@UnicodeString@icu_56@@QBEHHHPADPBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_start$ = 8						; size = 4
__length$ = 12						; size = 4
_dst$ = 16						; size = 4
_codepage$ = 20						; size = 4
?extract@UnicodeString@icu_56@@QBEHHHPADPBD@Z PROC	; icu_56::UnicodeString::extract, COMDAT
; _this$ = ecx
; Line 4388
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 4390
	mov	eax, DWORD PTR _codepage$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dst$[ebp]
	neg	ecx
	sbb	ecx, ecx
	push	ecx
	mov	edx, DWORD PTR _dst$[ebp]
	push	edx
	mov	eax, DWORD PTR __length$[ebp]
	push	eax
	mov	ecx, DWORD PTR _start$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?extract@UnicodeString@icu_56@@QBEHHHPADIPBD@Z ; icu_56::UnicodeString::extract
; Line 4391
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?extract@UnicodeString@icu_56@@QBEHHHPADPBD@Z ENDP	; icu_56::UnicodeString::extract
_TEXT	ENDS
PUBLIC	?extractBetween@UnicodeString@icu_56@@QBEXHHPA_WH@Z ; icu_56::UnicodeString::extractBetween
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?extractBetween@UnicodeString@icu_56@@QBEXHHPA_WH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_start$ = 8						; size = 4
_limit$ = 12						; size = 4
_dst$ = 16						; size = 4
_dstStart$ = 20						; size = 4
?extractBetween@UnicodeString@icu_56@@QBEXHHPA_WH@Z PROC ; icu_56::UnicodeString::extractBetween, COMDAT
; _this$ = ecx
; Line 4399
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 4400
	lea	eax, DWORD PTR _start$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?pinIndex@UnicodeString@icu_56@@ABEXAAH@Z ; icu_56::UnicodeString::pinIndex
; Line 4401
	lea	eax, DWORD PTR _limit$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?pinIndex@UnicodeString@icu_56@@ABEXAAH@Z ; icu_56::UnicodeString::pinIndex
; Line 4402
	mov	eax, DWORD PTR _dstStart$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dst$[ebp]
	push	ecx
	mov	edx, DWORD PTR _limit$[ebp]
	sub	edx, DWORD PTR _start$[ebp]
	push	edx
	mov	eax, DWORD PTR _start$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doExtract@UnicodeString@icu_56@@ABEXHHPA_WH@Z ; icu_56::UnicodeString::doExtract
; Line 4403
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?extractBetween@UnicodeString@icu_56@@QBEXHHPA_WH@Z ENDP ; icu_56::UnicodeString::extractBetween
_TEXT	ENDS
PUBLIC	?tempSubStringBetween@UnicodeString@icu_56@@QBE?AV12@HH@Z ; icu_56::UnicodeString::tempSubStringBetween
EXTRN	?tempSubString@UnicodeString@icu_56@@QBE?AV12@HH@Z:PROC ; icu_56::UnicodeString::tempSubString
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?tempSubStringBetween@UnicodeString@icu_56@@QBE?AV12@HH@Z
_TEXT	SEGMENT
$T45642 = -212						; size = 4
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
_start$ = 12						; size = 4
_limit$ = 16						; size = 4
?tempSubStringBetween@UnicodeString@icu_56@@QBE?AV12@HH@Z PROC ; icu_56::UnicodeString::tempSubStringBetween, COMDAT
; _this$ = ecx
; Line 4406
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T45642[ebp], 0
; Line 4407
	mov	eax, DWORD PTR _limit$[ebp]
	sub	eax, DWORD PTR _start$[ebp]
	push	eax
	mov	ecx, DWORD PTR _start$[ebp]
	push	ecx
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?tempSubString@UnicodeString@icu_56@@QBE?AV12@HH@Z ; icu_56::UnicodeString::tempSubString
	mov	eax, DWORD PTR $T45642[ebp]
	or	eax, 1
	mov	DWORD PTR $T45642[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 4408
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?tempSubStringBetween@UnicodeString@icu_56@@QBE?AV12@HH@Z ENDP ; icu_56::UnicodeString::tempSubStringBetween
_TEXT	ENDS
PUBLIC	?doCharAt@UnicodeString@icu_56@@ABE_WH@Z	; icu_56::UnicodeString::doCharAt
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?doCharAt@UnicodeString@icu_56@@ABE_WH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_offset$ = 8						; size = 4
?doCharAt@UnicodeString@icu_56@@ABE_WH@Z PROC		; icu_56::UnicodeString::doCharAt, COMDAT
; _this$ = ecx
; Line 4412
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 4413
	mov	ecx, DWORD PTR _this$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	cmp	DWORD PTR _offset$[ebp], eax
	jae	SHORT $LN2@doCharAt
; Line 4414
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getArrayStart@UnicodeString@icu_56@@ABEPB_WXZ ; icu_56::UnicodeString::getArrayStart
	mov	ecx, DWORD PTR _offset$[ebp]
	mov	ax, WORD PTR [eax+ecx*2]
	jmp	SHORT $LN3@doCharAt
; Line 4415
	jmp	SHORT $LN3@doCharAt
$LN2@doCharAt:
; Line 4416
	mov	eax, 65535				; 0000ffffH
$LN3@doCharAt:
; Line 4418
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?doCharAt@UnicodeString@icu_56@@ABE_WH@Z ENDP		; icu_56::UnicodeString::doCharAt
_TEXT	ENDS
PUBLIC	?charAt@UnicodeString@icu_56@@QBE_WH@Z		; icu_56::UnicodeString::charAt
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?charAt@UnicodeString@icu_56@@QBE_WH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_offset$ = 8						; size = 4
?charAt@UnicodeString@icu_56@@QBE_WH@Z PROC		; icu_56::UnicodeString::charAt, COMDAT
; _this$ = ecx
; Line 4422
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _offset$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doCharAt@UnicodeString@icu_56@@ABE_WH@Z ; icu_56::UnicodeString::doCharAt
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?charAt@UnicodeString@icu_56@@QBE_WH@Z ENDP		; icu_56::UnicodeString::charAt
_TEXT	ENDS
PUBLIC	??AUnicodeString@icu_56@@QBE_WH@Z		; icu_56::UnicodeString::operator[]
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??AUnicodeString@icu_56@@QBE_WH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_offset$ = 8						; size = 4
??AUnicodeString@icu_56@@QBE_WH@Z PROC			; icu_56::UnicodeString::operator[], COMDAT
; _this$ = ecx
; Line 4426
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _offset$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doCharAt@UnicodeString@icu_56@@ABE_WH@Z ; icu_56::UnicodeString::doCharAt
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??AUnicodeString@icu_56@@QBE_WH@Z ENDP			; icu_56::UnicodeString::operator[]
_TEXT	ENDS
PUBLIC	?isEmpty@UnicodeString@icu_56@@QBECXZ		; icu_56::UnicodeString::isEmpty
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?isEmpty@UnicodeString@icu_56@@QBECXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?isEmpty@UnicodeString@icu_56@@QBECXZ PROC		; icu_56::UnicodeString::isEmpty, COMDAT
; _this$ = ecx
; Line 4429
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 4431
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+4]
	sar	ecx, 5
	test	ecx, ecx
	sete	al
; Line 4432
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?isEmpty@UnicodeString@icu_56@@QBECXZ ENDP		; icu_56::UnicodeString::isEmpty
_TEXT	ENDS
PUBLIC	?setZeroLength@UnicodeString@icu_56@@AAEXXZ	; icu_56::UnicodeString::setZeroLength
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?setZeroLength@UnicodeString@icu_56@@AAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?setZeroLength@UnicodeString@icu_56@@AAEXXZ PROC	; icu_56::UnicodeString::setZeroLength, COMDAT
; _this$ = ecx
; Line 4438
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 4439
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+4]
	and	ecx, 31					; 0000001fH
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+4], cx
; Line 4440
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?setZeroLength@UnicodeString@icu_56@@AAEXXZ ENDP	; icu_56::UnicodeString::setZeroLength
_TEXT	ENDS
PUBLIC	?setShortLength@UnicodeString@icu_56@@AAEXH@Z	; icu_56::UnicodeString::setShortLength
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?setShortLength@UnicodeString@icu_56@@AAEXH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_len$ = 8						; size = 4
?setShortLength@UnicodeString@icu_56@@AAEXH@Z PROC	; icu_56::UnicodeString::setShortLength, COMDAT
; _this$ = ecx
; Line 4443
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 4446
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+4]
	and	ecx, 31					; 0000001fH
	mov	edx, DWORD PTR _len$[ebp]
	shl	edx, 5
	or	ecx, edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+4], cx
; Line 4447
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?setShortLength@UnicodeString@icu_56@@AAEXH@Z ENDP	; icu_56::UnicodeString::setShortLength
_TEXT	ENDS
PUBLIC	?setLength@UnicodeString@icu_56@@AAEXH@Z	; icu_56::UnicodeString::setLength
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?setLength@UnicodeString@icu_56@@AAEXH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_len$ = 8						; size = 4
?setLength@UnicodeString@icu_56@@AAEXH@Z PROC		; icu_56::UnicodeString::setLength, COMDAT
; _this$ = ecx
; Line 4450
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 4451
	cmp	DWORD PTR _len$[ebp], 1023		; 000003ffH
	jg	SHORT $LN2@setLength
; Line 4452
	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?setShortLength@UnicodeString@icu_56@@AAEXH@Z ; icu_56::UnicodeString::setShortLength
; Line 4453
	jmp	SHORT $LN3@setLength
$LN2@setLength:
; Line 4454
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+4]
	or	ecx, 65504				; 0000ffe0H
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+4], cx
; Line 4455
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _len$[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN3@setLength:
; Line 4457
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?setLength@UnicodeString@icu_56@@AAEXH@Z ENDP		; icu_56::UnicodeString::setLength
_TEXT	ENDS
PUBLIC	?setToEmpty@UnicodeString@icu_56@@AAEXXZ	; icu_56::UnicodeString::setToEmpty
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?setToEmpty@UnicodeString@icu_56@@AAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?setToEmpty@UnicodeString@icu_56@@AAEXXZ PROC		; icu_56::UnicodeString::setToEmpty, COMDAT
; _this$ = ecx
; Line 4460
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 4461
	mov	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+4], ax
; Line 4462
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?setToEmpty@UnicodeString@icu_56@@AAEXXZ ENDP		; icu_56::UnicodeString::setToEmpty
_TEXT	ENDS
PUBLIC	?setArray@UnicodeString@icu_56@@AAEXPA_WHH@Z	; icu_56::UnicodeString::setArray
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?setArray@UnicodeString@icu_56@@AAEXPA_WHH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_array$ = 8						; size = 4
_len$ = 12						; size = 4
_capacity$ = 16						; size = 4
?setArray@UnicodeString@icu_56@@AAEXPA_WHH@Z PROC	; icu_56::UnicodeString::setArray, COMDAT
; _this$ = ecx
; Line 4465
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 4466
	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?setLength@UnicodeString@icu_56@@AAEXH@Z ; icu_56::UnicodeString::setLength
; Line 4467
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _array$[ebp]
	mov	DWORD PTR [eax+16], ecx
; Line 4468
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _capacity$[ebp]
	mov	DWORD PTR [eax+12], ecx
; Line 4469
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?setArray@UnicodeString@icu_56@@AAEXPA_WHH@Z ENDP	; icu_56::UnicodeString::setArray
_TEXT	ENDS
PUBLIC	??4UnicodeString@icu_56@@QAEAAV01@_W@Z		; icu_56::UnicodeString::operator=
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??4UnicodeString@icu_56@@QAEAAV01@_W@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_ch$ = 8						; size = 2
??4UnicodeString@icu_56@@QAEAAV01@_W@Z PROC		; icu_56::UnicodeString::operator=, COMDAT
; _this$ = ecx
; Line 4473
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	1
	push	0
	lea	eax, DWORD PTR _ch$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doReplace@UnicodeString@icu_56@@AAEAAV12@HHPB_WHH@Z ; icu_56::UnicodeString::doReplace
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4UnicodeString@icu_56@@QAEAAV01@_W@Z ENDP		; icu_56::UnicodeString::operator=
_TEXT	ENDS
PUBLIC	??4UnicodeString@icu_56@@QAEAAV01@H@Z		; icu_56::UnicodeString::operator=
EXTRN	?replace@UnicodeString@icu_56@@QAEAAV12@HHH@Z:PROC ; icu_56::UnicodeString::replace
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??4UnicodeString@icu_56@@QAEAAV01@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_ch$ = 8						; size = 4
??4UnicodeString@icu_56@@QAEAAV01@H@Z PROC		; icu_56::UnicodeString::operator=, COMDAT
; _this$ = ecx
; Line 4477
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _ch$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?replace@UnicodeString@icu_56@@QAEAAV12@HHH@Z ; icu_56::UnicodeString::replace
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4UnicodeString@icu_56@@QAEAAV01@H@Z ENDP		; icu_56::UnicodeString::operator=
_TEXT	ENDS
PUBLIC	?setTo@UnicodeString@icu_56@@QAEAAV12@ABV12@HH@Z ; icu_56::UnicodeString::setTo
EXTRN	?unBogus@UnicodeString@icu_56@@AAEXXZ:PROC	; icu_56::UnicodeString::unBogus
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?setTo@UnicodeString@icu_56@@QAEAAV12@ABV12@HH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_srcText$ = 8						; size = 4
_srcStart$ = 12						; size = 4
_srcLength$ = 16					; size = 4
?setTo@UnicodeString@icu_56@@QAEAAV12@ABV12@HH@Z PROC	; icu_56::UnicodeString::setTo, COMDAT
; _this$ = ecx
; Line 4483
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 4484
	mov	ecx, DWORD PTR _this$[ebp]
	call	?unBogus@UnicodeString@icu_56@@AAEXXZ	; icu_56::UnicodeString::unBogus
; Line 4485
	mov	eax, DWORD PTR _srcLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _srcStart$[ebp]
	push	ecx
	mov	edx, DWORD PTR _srcText$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doReplace@UnicodeString@icu_56@@AAEAAV12@HHABV12@HH@Z ; icu_56::UnicodeString::doReplace
; Line 4486
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?setTo@UnicodeString@icu_56@@QAEAAV12@ABV12@HH@Z ENDP	; icu_56::UnicodeString::setTo
_TEXT	ENDS
PUBLIC	?setTo@UnicodeString@icu_56@@QAEAAV12@ABV12@H@Z	; icu_56::UnicodeString::setTo
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?setTo@UnicodeString@icu_56@@QAEAAV12@ABV12@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_srcText$ = 8						; size = 4
_srcStart$ = 12						; size = 4
?setTo@UnicodeString@icu_56@@QAEAAV12@ABV12@H@Z PROC	; icu_56::UnicodeString::setTo, COMDAT
; _this$ = ecx
; Line 4491
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 4492
	mov	ecx, DWORD PTR _this$[ebp]
	call	?unBogus@UnicodeString@icu_56@@AAEXXZ	; icu_56::UnicodeString::unBogus
; Line 4493
	lea	eax, DWORD PTR _srcStart$[ebp]
	push	eax
	mov	ecx, DWORD PTR _srcText$[ebp]
	call	?pinIndex@UnicodeString@icu_56@@ABEXAAH@Z ; icu_56::UnicodeString::pinIndex
; Line 4494
	mov	ecx, DWORD PTR _srcText$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	sub	eax, DWORD PTR _srcStart$[ebp]
	push	eax
	mov	eax, DWORD PTR _srcStart$[ebp]
	push	eax
	mov	ecx, DWORD PTR _srcText$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doReplace@UnicodeString@icu_56@@AAEAAV12@HHABV12@HH@Z ; icu_56::UnicodeString::doReplace
; Line 4495
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?setTo@UnicodeString@icu_56@@QAEAAV12@ABV12@H@Z ENDP	; icu_56::UnicodeString::setTo
_TEXT	ENDS
PUBLIC	?setTo@UnicodeString@icu_56@@QAEAAV12@ABV12@@Z	; icu_56::UnicodeString::setTo
EXTRN	?copyFrom@UnicodeString@icu_56@@AAEAAV12@ABV12@C@Z:PROC ; icu_56::UnicodeString::copyFrom
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?setTo@UnicodeString@icu_56@@QAEAAV12@ABV12@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_srcText$ = 8						; size = 4
?setTo@UnicodeString@icu_56@@QAEAAV12@ABV12@@Z PROC	; icu_56::UnicodeString::setTo, COMDAT
; _this$ = ecx
; Line 4499
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 4500
	push	0
	mov	eax, DWORD PTR _srcText$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?copyFrom@UnicodeString@icu_56@@AAEAAV12@ABV12@C@Z ; icu_56::UnicodeString::copyFrom
; Line 4501
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?setTo@UnicodeString@icu_56@@QAEAAV12@ABV12@@Z ENDP	; icu_56::UnicodeString::setTo
_TEXT	ENDS
PUBLIC	?setTo@UnicodeString@icu_56@@QAEAAV12@PB_WH@Z	; icu_56::UnicodeString::setTo
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?setTo@UnicodeString@icu_56@@QAEAAV12@PB_WH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_srcChars$ = 8						; size = 4
_srcLength$ = 12					; size = 4
?setTo@UnicodeString@icu_56@@QAEAAV12@PB_WH@Z PROC	; icu_56::UnicodeString::setTo, COMDAT
; _this$ = ecx
; Line 4506
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 4507
	mov	ecx, DWORD PTR _this$[ebp]
	call	?unBogus@UnicodeString@icu_56@@AAEXXZ	; icu_56::UnicodeString::unBogus
; Line 4508
	mov	eax, DWORD PTR _srcLength$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _srcChars$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doReplace@UnicodeString@icu_56@@AAEAAV12@HHPB_WHH@Z ; icu_56::UnicodeString::doReplace
; Line 4509
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?setTo@UnicodeString@icu_56@@QAEAAV12@PB_WH@Z ENDP	; icu_56::UnicodeString::setTo
_TEXT	ENDS
PUBLIC	?setTo@UnicodeString@icu_56@@QAEAAV12@_W@Z	; icu_56::UnicodeString::setTo
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?setTo@UnicodeString@icu_56@@QAEAAV12@_W@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_srcChar$ = 8						; size = 2
?setTo@UnicodeString@icu_56@@QAEAAV12@_W@Z PROC		; icu_56::UnicodeString::setTo, COMDAT
; _this$ = ecx
; Line 4513
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 4514
	mov	ecx, DWORD PTR _this$[ebp]
	call	?unBogus@UnicodeString@icu_56@@AAEXXZ	; icu_56::UnicodeString::unBogus
; Line 4515
	push	1
	push	0
	lea	eax, DWORD PTR _srcChar$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doReplace@UnicodeString@icu_56@@AAEAAV12@HHPB_WHH@Z ; icu_56::UnicodeString::doReplace
; Line 4516
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?setTo@UnicodeString@icu_56@@QAEAAV12@_W@Z ENDP		; icu_56::UnicodeString::setTo
_TEXT	ENDS
PUBLIC	?setTo@UnicodeString@icu_56@@QAEAAV12@H@Z	; icu_56::UnicodeString::setTo
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?setTo@UnicodeString@icu_56@@QAEAAV12@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_srcChar$ = 8						; size = 4
?setTo@UnicodeString@icu_56@@QAEAAV12@H@Z PROC		; icu_56::UnicodeString::setTo, COMDAT
; _this$ = ecx
; Line 4520
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 4521
	mov	ecx, DWORD PTR _this$[ebp]
	call	?unBogus@UnicodeString@icu_56@@AAEXXZ	; icu_56::UnicodeString::unBogus
; Line 4522
	mov	eax, DWORD PTR _srcChar$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?replace@UnicodeString@icu_56@@QAEAAV12@HHH@Z ; icu_56::UnicodeString::replace
; Line 4523
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?setTo@UnicodeString@icu_56@@QAEAAV12@H@Z ENDP		; icu_56::UnicodeString::setTo
_TEXT	ENDS
PUBLIC	?append@UnicodeString@icu_56@@QAEAAV12@ABV12@HH@Z ; icu_56::UnicodeString::append
EXTRN	?doAppend@UnicodeString@icu_56@@AAEAAV12@ABV12@HH@Z:PROC ; icu_56::UnicodeString::doAppend
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?append@UnicodeString@icu_56@@QAEAAV12@ABV12@HH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_srcText$ = 8						; size = 4
_srcStart$ = 12						; size = 4
_srcLength$ = 16					; size = 4
?append@UnicodeString@icu_56@@QAEAAV12@ABV12@HH@Z PROC	; icu_56::UnicodeString::append, COMDAT
; _this$ = ecx
; Line 4529
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _srcLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _srcStart$[ebp]
	push	ecx
	mov	edx, DWORD PTR _srcText$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doAppend@UnicodeString@icu_56@@AAEAAV12@ABV12@HH@Z ; icu_56::UnicodeString::doAppend
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?append@UnicodeString@icu_56@@QAEAAV12@ABV12@HH@Z ENDP	; icu_56::UnicodeString::append
_TEXT	ENDS
PUBLIC	?append@UnicodeString@icu_56@@QAEAAV12@ABV12@@Z	; icu_56::UnicodeString::append
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?append@UnicodeString@icu_56@@QAEAAV12@ABV12@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_srcText$ = 8						; size = 4
?append@UnicodeString@icu_56@@QAEAAV12@ABV12@@Z PROC	; icu_56::UnicodeString::append, COMDAT
; _this$ = ecx
; Line 4533
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _srcText$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	push	eax
	push	0
	mov	eax, DWORD PTR _srcText$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doAppend@UnicodeString@icu_56@@AAEAAV12@ABV12@HH@Z ; icu_56::UnicodeString::doAppend
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?append@UnicodeString@icu_56@@QAEAAV12@ABV12@@Z ENDP	; icu_56::UnicodeString::append
_TEXT	ENDS
PUBLIC	?append@UnicodeString@icu_56@@QAEAAV12@PB_WHH@Z	; icu_56::UnicodeString::append
EXTRN	?doAppend@UnicodeString@icu_56@@AAEAAV12@PB_WHH@Z:PROC ; icu_56::UnicodeString::doAppend
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?append@UnicodeString@icu_56@@QAEAAV12@PB_WHH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_srcChars$ = 8						; size = 4
_srcStart$ = 12						; size = 4
_srcLength$ = 16					; size = 4
?append@UnicodeString@icu_56@@QAEAAV12@PB_WHH@Z PROC	; icu_56::UnicodeString::append, COMDAT
; _this$ = ecx
; Line 4539
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _srcLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _srcStart$[ebp]
	push	ecx
	mov	edx, DWORD PTR _srcChars$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doAppend@UnicodeString@icu_56@@AAEAAV12@PB_WHH@Z ; icu_56::UnicodeString::doAppend
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?append@UnicodeString@icu_56@@QAEAAV12@PB_WHH@Z ENDP	; icu_56::UnicodeString::append
_TEXT	ENDS
PUBLIC	?append@UnicodeString@icu_56@@QAEAAV12@PB_WH@Z	; icu_56::UnicodeString::append
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?append@UnicodeString@icu_56@@QAEAAV12@PB_WH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_srcChars$ = 8						; size = 4
_srcLength$ = 12					; size = 4
?append@UnicodeString@icu_56@@QAEAAV12@PB_WH@Z PROC	; icu_56::UnicodeString::append, COMDAT
; _this$ = ecx
; Line 4544
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _srcLength$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _srcChars$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doAppend@UnicodeString@icu_56@@AAEAAV12@PB_WHH@Z ; icu_56::UnicodeString::doAppend
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?append@UnicodeString@icu_56@@QAEAAV12@PB_WH@Z ENDP	; icu_56::UnicodeString::append
_TEXT	ENDS
PUBLIC	?append@UnicodeString@icu_56@@QAEAAV12@_W@Z	; icu_56::UnicodeString::append
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?append@UnicodeString@icu_56@@QAEAAV12@_W@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_srcChar$ = 8						; size = 2
?append@UnicodeString@icu_56@@QAEAAV12@_W@Z PROC	; icu_56::UnicodeString::append, COMDAT
; _this$ = ecx
; Line 4548
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	1
	push	0
	lea	eax, DWORD PTR _srcChar$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doAppend@UnicodeString@icu_56@@AAEAAV12@PB_WHH@Z ; icu_56::UnicodeString::doAppend
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?append@UnicodeString@icu_56@@QAEAAV12@_W@Z ENDP	; icu_56::UnicodeString::append
_TEXT	ENDS
PUBLIC	??YUnicodeString@icu_56@@QAEAAV01@_W@Z		; icu_56::UnicodeString::operator+=
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??YUnicodeString@icu_56@@QAEAAV01@_W@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_ch$ = 8						; size = 2
??YUnicodeString@icu_56@@QAEAAV01@_W@Z PROC		; icu_56::UnicodeString::operator+=, COMDAT
; _this$ = ecx
; Line 4552
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	1
	push	0
	lea	eax, DWORD PTR _ch$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doAppend@UnicodeString@icu_56@@AAEAAV12@PB_WHH@Z ; icu_56::UnicodeString::doAppend
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??YUnicodeString@icu_56@@QAEAAV01@_W@Z ENDP		; icu_56::UnicodeString::operator+=
_TEXT	ENDS
PUBLIC	??YUnicodeString@icu_56@@QAEAAV01@H@Z		; icu_56::UnicodeString::operator+=
EXTRN	?append@UnicodeString@icu_56@@QAEAAV12@H@Z:PROC	; icu_56::UnicodeString::append
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??YUnicodeString@icu_56@@QAEAAV01@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_ch$ = 8						; size = 4
??YUnicodeString@icu_56@@QAEAAV01@H@Z PROC		; icu_56::UnicodeString::operator+=, COMDAT
; _this$ = ecx
; Line 4555
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 4556
	mov	eax, DWORD PTR _ch$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?append@UnicodeString@icu_56@@QAEAAV12@H@Z ; icu_56::UnicodeString::append
; Line 4557
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??YUnicodeString@icu_56@@QAEAAV01@H@Z ENDP		; icu_56::UnicodeString::operator+=
_TEXT	ENDS
PUBLIC	??YUnicodeString@icu_56@@QAEAAV01@ABV01@@Z	; icu_56::UnicodeString::operator+=
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??YUnicodeString@icu_56@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_srcText$ = 8						; size = 4
??YUnicodeString@icu_56@@QAEAAV01@ABV01@@Z PROC		; icu_56::UnicodeString::operator+=, COMDAT
; _this$ = ecx
; Line 4561
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _srcText$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	push	eax
	push	0
	mov	eax, DWORD PTR _srcText$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doAppend@UnicodeString@icu_56@@AAEAAV12@ABV12@HH@Z ; icu_56::UnicodeString::doAppend
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??YUnicodeString@icu_56@@QAEAAV01@ABV01@@Z ENDP		; icu_56::UnicodeString::operator+=
_TEXT	ENDS
PUBLIC	?insert@UnicodeString@icu_56@@QAEAAV12@HABV12@HH@Z ; icu_56::UnicodeString::insert
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?insert@UnicodeString@icu_56@@QAEAAV12@HABV12@HH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_start$ = 8						; size = 4
_srcText$ = 12						; size = 4
_srcStart$ = 16						; size = 4
_srcLength$ = 20					; size = 4
?insert@UnicodeString@icu_56@@QAEAAV12@HABV12@HH@Z PROC	; icu_56::UnicodeString::insert, COMDAT
; _this$ = ecx
; Line 4568
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _srcLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _srcStart$[ebp]
	push	ecx
	mov	edx, DWORD PTR _srcText$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _start$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doReplace@UnicodeString@icu_56@@AAEAAV12@HHABV12@HH@Z ; icu_56::UnicodeString::doReplace
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?insert@UnicodeString@icu_56@@QAEAAV12@HABV12@HH@Z ENDP	; icu_56::UnicodeString::insert
_TEXT	ENDS
PUBLIC	?insert@UnicodeString@icu_56@@QAEAAV12@HABV12@@Z ; icu_56::UnicodeString::insert
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?insert@UnicodeString@icu_56@@QAEAAV12@HABV12@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_start$ = 8						; size = 4
_srcText$ = 12						; size = 4
?insert@UnicodeString@icu_56@@QAEAAV12@HABV12@@Z PROC	; icu_56::UnicodeString::insert, COMDAT
; _this$ = ecx
; Line 4573
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _srcText$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	push	eax
	push	0
	mov	eax, DWORD PTR _srcText$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _start$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doReplace@UnicodeString@icu_56@@AAEAAV12@HHABV12@HH@Z ; icu_56::UnicodeString::doReplace
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?insert@UnicodeString@icu_56@@QAEAAV12@HABV12@@Z ENDP	; icu_56::UnicodeString::insert
_TEXT	ENDS
PUBLIC	?insert@UnicodeString@icu_56@@QAEAAV12@HPB_WHH@Z ; icu_56::UnicodeString::insert
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?insert@UnicodeString@icu_56@@QAEAAV12@HPB_WHH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_start$ = 8						; size = 4
_srcChars$ = 12						; size = 4
_srcStart$ = 16						; size = 4
_srcLength$ = 20					; size = 4
?insert@UnicodeString@icu_56@@QAEAAV12@HPB_WHH@Z PROC	; icu_56::UnicodeString::insert, COMDAT
; _this$ = ecx
; Line 4580
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _srcLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _srcStart$[ebp]
	push	ecx
	mov	edx, DWORD PTR _srcChars$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _start$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doReplace@UnicodeString@icu_56@@AAEAAV12@HHPB_WHH@Z ; icu_56::UnicodeString::doReplace
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?insert@UnicodeString@icu_56@@QAEAAV12@HPB_WHH@Z ENDP	; icu_56::UnicodeString::insert
_TEXT	ENDS
PUBLIC	?insert@UnicodeString@icu_56@@QAEAAV12@HPB_WH@Z	; icu_56::UnicodeString::insert
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?insert@UnicodeString@icu_56@@QAEAAV12@HPB_WH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_start$ = 8						; size = 4
_srcChars$ = 12						; size = 4
_srcLength$ = 16					; size = 4
?insert@UnicodeString@icu_56@@QAEAAV12@HPB_WH@Z PROC	; icu_56::UnicodeString::insert, COMDAT
; _this$ = ecx
; Line 4586
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _srcLength$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _srcChars$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _start$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doReplace@UnicodeString@icu_56@@AAEAAV12@HHPB_WHH@Z ; icu_56::UnicodeString::doReplace
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?insert@UnicodeString@icu_56@@QAEAAV12@HPB_WH@Z ENDP	; icu_56::UnicodeString::insert
_TEXT	ENDS
PUBLIC	?insert@UnicodeString@icu_56@@QAEAAV12@H_W@Z	; icu_56::UnicodeString::insert
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?insert@UnicodeString@icu_56@@QAEAAV12@H_W@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_start$ = 8						; size = 4
_srcChar$ = 12						; size = 2
?insert@UnicodeString@icu_56@@QAEAAV12@H_W@Z PROC	; icu_56::UnicodeString::insert, COMDAT
; _this$ = ecx
; Line 4591
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	1
	push	0
	lea	eax, DWORD PTR _srcChar$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _start$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doReplace@UnicodeString@icu_56@@AAEAAV12@HHPB_WHH@Z ; icu_56::UnicodeString::doReplace
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?insert@UnicodeString@icu_56@@QAEAAV12@H_W@Z ENDP	; icu_56::UnicodeString::insert
_TEXT	ENDS
PUBLIC	?insert@UnicodeString@icu_56@@QAEAAV12@HH@Z	; icu_56::UnicodeString::insert
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?insert@UnicodeString@icu_56@@QAEAAV12@HH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_start$ = 8						; size = 4
_srcChar$ = 12						; size = 4
?insert@UnicodeString@icu_56@@QAEAAV12@HH@Z PROC	; icu_56::UnicodeString::insert, COMDAT
; _this$ = ecx
; Line 4596
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _srcChar$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _start$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?replace@UnicodeString@icu_56@@QAEAAV12@HHH@Z ; icu_56::UnicodeString::replace
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?insert@UnicodeString@icu_56@@QAEAAV12@HH@Z ENDP	; icu_56::UnicodeString::insert
_TEXT	ENDS
PUBLIC	?remove@UnicodeString@icu_56@@QAEAAV12@XZ	; icu_56::UnicodeString::remove
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?remove@UnicodeString@icu_56@@QAEAAV12@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?remove@UnicodeString@icu_56@@QAEAAV12@XZ PROC		; icu_56::UnicodeString::remove, COMDAT
; _this$ = ecx
; Line 4601
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 4603
	mov	ecx, DWORD PTR _this$[ebp]
	call	?isBogus@UnicodeString@icu_56@@QBECXZ	; icu_56::UnicodeString::isBogus
	movsx	eax, al
	test	eax, eax
	je	SHORT $LN2@remove
; Line 4604
	mov	ecx, DWORD PTR _this$[ebp]
	call	?setToEmpty@UnicodeString@icu_56@@AAEXXZ ; icu_56::UnicodeString::setToEmpty
; Line 4605
	jmp	SHORT $LN1@remove
$LN2@remove:
; Line 4606
	mov	ecx, DWORD PTR _this$[ebp]
	call	?setZeroLength@UnicodeString@icu_56@@AAEXXZ ; icu_56::UnicodeString::setZeroLength
$LN1@remove:
; Line 4608
	mov	eax, DWORD PTR _this$[ebp]
; Line 4609
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?remove@UnicodeString@icu_56@@QAEAAV12@XZ ENDP		; icu_56::UnicodeString::remove
_TEXT	ENDS
PUBLIC	?remove@UnicodeString@icu_56@@QAEAAV12@HH@Z	; icu_56::UnicodeString::remove
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?remove@UnicodeString@icu_56@@QAEAAV12@HH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_start$ = 8						; size = 4
__length$ = 12						; size = 4
?remove@UnicodeString@icu_56@@QAEAAV12@HH@Z PROC	; icu_56::UnicodeString::remove, COMDAT
; _this$ = ecx
; Line 4614
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 4615
	cmp	DWORD PTR _start$[ebp], 0
	jg	SHORT $LN1@remove@2
	cmp	DWORD PTR __length$[ebp], 2147483647	; 7fffffffH
	jne	SHORT $LN1@remove@2
; Line 4617
	mov	ecx, DWORD PTR _this$[ebp]
	call	?remove@UnicodeString@icu_56@@QAEAAV12@XZ ; icu_56::UnicodeString::remove
	jmp	SHORT $LN2@remove@2
$LN1@remove@2:
; Line 4619
	push	0
	push	0
	push	0
	mov	eax, DWORD PTR __length$[ebp]
	push	eax
	mov	ecx, DWORD PTR _start$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doReplace@UnicodeString@icu_56@@AAEAAV12@HHPB_WHH@Z ; icu_56::UnicodeString::doReplace
$LN2@remove@2:
; Line 4620
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?remove@UnicodeString@icu_56@@QAEAAV12@HH@Z ENDP	; icu_56::UnicodeString::remove
_TEXT	ENDS
PUBLIC	?removeBetween@UnicodeString@icu_56@@QAEAAV12@HH@Z ; icu_56::UnicodeString::removeBetween
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?removeBetween@UnicodeString@icu_56@@QAEAAV12@HH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_start$ = 8						; size = 4
_limit$ = 12						; size = 4
?removeBetween@UnicodeString@icu_56@@QAEAAV12@HH@Z PROC	; icu_56::UnicodeString::removeBetween, COMDAT
; _this$ = ecx
; Line 4625
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	0
	push	0
	push	0
	mov	eax, DWORD PTR _limit$[ebp]
	sub	eax, DWORD PTR _start$[ebp]
	push	eax
	mov	ecx, DWORD PTR _start$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doReplace@UnicodeString@icu_56@@AAEAAV12@HHPB_WHH@Z ; icu_56::UnicodeString::doReplace
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?removeBetween@UnicodeString@icu_56@@QAEAAV12@HH@Z ENDP	; icu_56::UnicodeString::removeBetween
_TEXT	ENDS
PUBLIC	?truncate@UnicodeString@icu_56@@QAECH@Z		; icu_56::UnicodeString::truncate
PUBLIC	?retainBetween@UnicodeString@icu_56@@QAEAAV12@HH@Z ; icu_56::UnicodeString::retainBetween
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?retainBetween@UnicodeString@icu_56@@QAEAAV12@HH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_start$ = 8						; size = 4
_limit$ = 12						; size = 4
?retainBetween@UnicodeString@icu_56@@QAEAAV12@HH@Z PROC	; icu_56::UnicodeString::retainBetween, COMDAT
; _this$ = ecx
; Line 4628
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 4629
	mov	eax, DWORD PTR _limit$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?truncate@UnicodeString@icu_56@@QAECH@Z	; icu_56::UnicodeString::truncate
; Line 4630
	push	0
	push	0
	push	0
	mov	eax, DWORD PTR _start$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doReplace@UnicodeString@icu_56@@AAEAAV12@HHPB_WHH@Z ; icu_56::UnicodeString::doReplace
; Line 4631
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?retainBetween@UnicodeString@icu_56@@QAEAAV12@HH@Z ENDP	; icu_56::UnicodeString::retainBetween
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?truncate@UnicodeString@icu_56@@QAECH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_targetLength$ = 8					; size = 4
?truncate@UnicodeString@icu_56@@QAECH@Z PROC		; icu_56::UnicodeString::truncate, COMDAT
; _this$ = ecx
; Line 4635
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 4636
	mov	ecx, DWORD PTR _this$[ebp]
	call	?isBogus@UnicodeString@icu_56@@QBECXZ	; icu_56::UnicodeString::isBogus
	movsx	eax, al
	test	eax, eax
	je	SHORT $LN4@truncate
	cmp	DWORD PTR _targetLength$[ebp], 0
	jne	SHORT $LN4@truncate
; Line 4638
	mov	ecx, DWORD PTR _this$[ebp]
	call	?unBogus@UnicodeString@icu_56@@AAEXXZ	; icu_56::UnicodeString::unBogus
; Line 4639
	xor	al, al
	jmp	SHORT $LN5@truncate
	jmp	SHORT $LN5@truncate
$LN4@truncate:
; Line 4640
	mov	ecx, DWORD PTR _this$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	cmp	DWORD PTR _targetLength$[ebp], eax
	jae	SHORT $LN2@truncate
; Line 4641
	mov	eax, DWORD PTR _targetLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?setLength@UnicodeString@icu_56@@AAEXH@Z ; icu_56::UnicodeString::setLength
; Line 4642
	mov	al, 1
	jmp	SHORT $LN5@truncate
; Line 4643
	jmp	SHORT $LN5@truncate
$LN2@truncate:
; Line 4644
	xor	al, al
$LN5@truncate:
; Line 4646
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?truncate@UnicodeString@icu_56@@QAECH@Z ENDP		; icu_56::UnicodeString::truncate
_TEXT	ENDS
PUBLIC	?reverse@UnicodeString@icu_56@@QAEAAV12@XZ	; icu_56::UnicodeString::reverse
EXTRN	?doReverse@UnicodeString@icu_56@@AAEAAV12@HH@Z:PROC ; icu_56::UnicodeString::doReverse
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?reverse@UnicodeString@icu_56@@QAEAAV12@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?reverse@UnicodeString@icu_56@@QAEAAV12@XZ PROC		; icu_56::UnicodeString::reverse, COMDAT
; _this$ = ecx
; Line 4650
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doReverse@UnicodeString@icu_56@@AAEAAV12@HH@Z ; icu_56::UnicodeString::doReverse
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?reverse@UnicodeString@icu_56@@QAEAAV12@XZ ENDP		; icu_56::UnicodeString::reverse
_TEXT	ENDS
PUBLIC	?reverse@UnicodeString@icu_56@@QAEAAV12@HH@Z	; icu_56::UnicodeString::reverse
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?reverse@UnicodeString@icu_56@@QAEAAV12@HH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_start$ = 8						; size = 4
__length$ = 12						; size = 4
?reverse@UnicodeString@icu_56@@QAEAAV12@HH@Z PROC	; icu_56::UnicodeString::reverse, COMDAT
; _this$ = ecx
; Line 4655
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __length$[ebp]
	push	eax
	mov	ecx, DWORD PTR _start$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?doReverse@UnicodeString@icu_56@@AAEAAV12@HH@Z ; icu_56::UnicodeString::doReverse
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?reverse@UnicodeString@icu_56@@QAEAAV12@HH@Z ENDP	; icu_56::UnicodeString::reverse
_TEXT	ENDS
PUBLIC	??_7StringEnumeration@icu_56@@6B@		; icu_56::StringEnumeration::`vftable'
PUBLIC	??0StringEnumeration@icu_56@@QAE@ABV01@@Z	; icu_56::StringEnumeration::StringEnumeration
PUBLIC	??_R4StringEnumeration@icu_56@@6B@		; icu_56::StringEnumeration::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVStringEnumeration@icu_56@@@8		; icu_56::StringEnumeration `RTTI Type Descriptor'
PUBLIC	??_R3StringEnumeration@icu_56@@8		; icu_56::StringEnumeration::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2StringEnumeration@icu_56@@8		; icu_56::StringEnumeration::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@StringEnumeration@icu_56@@8	; icu_56::StringEnumeration::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_EStringEnumeration@icu_56@@UAEPAXI@Z		; icu_56::StringEnumeration::`vector deleting destructor'
EXTRN	??0UnicodeString@icu_56@@QAE@ABV01@@Z:PROC	; icu_56::UnicodeString::UnicodeString
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	?clone@StringEnumeration@icu_56@@UBEPAV12@XZ:PROC ; icu_56::StringEnumeration::clone
EXTRN	?next@StringEnumeration@icu_56@@UAEPBDPAHAAW4UErrorCode@@@Z:PROC ; icu_56::StringEnumeration::next
EXTRN	?unext@StringEnumeration@icu_56@@UAEPB_WPAHAAW4UErrorCode@@@Z:PROC ; icu_56::StringEnumeration::unext
EXTRN	?snext@StringEnumeration@icu_56@@UAEPBVUnicodeString@2@AAW4UErrorCode@@@Z:PROC ; icu_56::StringEnumeration::snext
EXTRN	??8StringEnumeration@icu_56@@UBECABV01@@Z:PROC	; icu_56::StringEnumeration::operator==
EXTRN	??9StringEnumeration@icu_56@@UBECABV01@@Z:PROC	; icu_56::StringEnumeration::operator!=
;	COMDAT ??_R1A@?0A@EA@StringEnumeration@icu_56@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@StringEnumeration@icu_56@@8 DD FLAT:??_R0?AVStringEnumeration@icu_56@@@8 ; icu_56::StringEnumeration::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3StringEnumeration@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_R2StringEnumeration@icu_56@@8
rdata$r	SEGMENT
??_R2StringEnumeration@icu_56@@8 DD FLAT:??_R1A@?0A@EA@StringEnumeration@icu_56@@8 ; icu_56::StringEnumeration::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@UObject@icu_56@@8
	DD	FLAT:??_R13?0A@EA@UMemory@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_R3StringEnumeration@icu_56@@8
rdata$r	SEGMENT
??_R3StringEnumeration@icu_56@@8 DD 00H			; icu_56::StringEnumeration::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2StringEnumeration@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVStringEnumeration@icu_56@@@8
_DATA	SEGMENT
??_R0?AVStringEnumeration@icu_56@@@8 DD FLAT:??_7type_info@@6B@ ; icu_56::StringEnumeration `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVStringEnumeration@icu_56@@', 00H
_DATA	ENDS
;	COMDAT ??_R4StringEnumeration@icu_56@@6B@
rdata$r	SEGMENT
??_R4StringEnumeration@icu_56@@6B@ DD 00H		; icu_56::StringEnumeration::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVStringEnumeration@icu_56@@@8
	DD	FLAT:??_R3StringEnumeration@icu_56@@8
rdata$r	ENDS
;	COMDAT ??_7StringEnumeration@icu_56@@6B@
CONST	SEGMENT
??_7StringEnumeration@icu_56@@6B@ DD FLAT:??_R4StringEnumeration@icu_56@@6B@ ; icu_56::StringEnumeration::`vftable'
	DD	FLAT:??_EStringEnumeration@icu_56@@UAEPAXI@Z
	DD	FLAT:?getDynamicClassID@UObject@icu_56@@UBEPAXXZ
	DD	FLAT:?clone@StringEnumeration@icu_56@@UBEPAV12@XZ
	DD	FLAT:__purecall
	DD	FLAT:?next@StringEnumeration@icu_56@@UAEPBDPAHAAW4UErrorCode@@@Z
	DD	FLAT:?unext@StringEnumeration@icu_56@@UAEPB_WPAHAAW4UErrorCode@@@Z
	DD	FLAT:?snext@StringEnumeration@icu_56@@UAEPBVUnicodeString@2@AAW4UErrorCode@@@Z
	DD	FLAT:__purecall
	DD	FLAT:??8StringEnumeration@icu_56@@UBECABV01@@Z
	DD	FLAT:??9StringEnumeration@icu_56@@UBECABV01@@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0StringEnumeration@icu_56@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0StringEnumeration@icu_56@@QAE@ABV01@@Z$0
__ehfuncinfo$??0StringEnumeration@icu_56@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0StringEnumeration@icu_56@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??0StringEnumeration@icu_56@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0StringEnumeration@icu_56@@QAE@ABV01@@Z PROC		; icu_56::StringEnumeration::StringEnumeration, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0StringEnumeration@icu_56@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0UObject@icu_56@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7StringEnumeration@icu_56@@6B@
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0UnicodeString@icu_56@@QAE@ABV01@@Z	; icu_56::UnicodeString::UnicodeString
	mov	esi, DWORD PTR ___that$[ebp]
	add	esi, 68					; 00000044H
	mov	edi, DWORD PTR _this$[ebp]
	add	edi, 68					; 00000044H
	mov	ecx, 8
	rep movsd
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+100]
	mov	DWORD PTR [eax+100], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+104]
	mov	DWORD PTR [eax+104], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0StringEnumeration@icu_56@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1UObject@icu_56@@UAE@XZ		; icu_56::UObject::~UObject
__ehhandler$??0StringEnumeration@icu_56@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0StringEnumeration@icu_56@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0StringEnumeration@icu_56@@QAE@ABV01@@Z ENDP		; icu_56::StringEnumeration::StringEnumeration
PUBLIC	??4StringEnumeration@icu_56@@QAEAAV01@ABV01@@Z	; icu_56::StringEnumeration::operator=
EXTRN	??4UnicodeString@icu_56@@QAEAAV01@ABV01@@Z:PROC	; icu_56::UnicodeString::operator=
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??4StringEnumeration@icu_56@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_$S1$34070 = -20					; size = 4
_this$ = -8						; size = 4
___that$ = 8						; size = 4
??4StringEnumeration@icu_56@@QAEAAV01@ABV01@@Z PROC	; icu_56::StringEnumeration::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4UObject@icu_56@@QAEAAV01@ABV01@@Z
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??4UnicodeString@icu_56@@QAEAAV01@ABV01@@Z ; icu_56::UnicodeString::operator=
	mov	DWORD PTR _$S1$34070[ebp], 0
	jmp	SHORT $LN3@operator@2
$LN2@operator@2:
	mov	eax, DWORD PTR _$S1$34070[ebp]
	add	eax, 1
	mov	DWORD PTR _$S1$34070[ebp], eax
$LN3@operator@2:
	cmp	DWORD PTR _$S1$34070[ebp], 32		; 00000020H
	jae	SHORT $LN1@operator@2
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR _$S1$34070[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, DWORD PTR _$S1$34070[ebp]
	mov	dl, BYTE PTR [ecx+68]
	mov	BYTE PTR [eax+68], dl
	jmp	SHORT $LN2@operator@2
$LN1@operator@2:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+100]
	mov	DWORD PTR [eax+100], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+104]
	mov	DWORD PTR [eax+104], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4StringEnumeration@icu_56@@QAEAAV01@ABV01@@Z ENDP	; icu_56::StringEnumeration::operator=
_TEXT	ENDS
PUBLIC	??_GStringEnumeration@icu_56@@UAEPAXI@Z		; icu_56::StringEnumeration::`scalar deleting destructor'
EXTRN	??1StringEnumeration@icu_56@@UAE@XZ:PROC	; icu_56::StringEnumeration::~StringEnumeration
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GStringEnumeration@icu_56@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_GStringEnumeration@icu_56@@UAEPAXI@Z PROC		; icu_56::StringEnumeration::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1StringEnumeration@icu_56@@UAE@XZ	; icu_56::StringEnumeration::~StringEnumeration
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@5
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3UMemory@icu_56@@SAXPAX@Z		; icu_56::UMemory::operator delete
	add	esp, 4
$LN1@scalar@5:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GStringEnumeration@icu_56@@UAEPAXI@Z ENDP		; icu_56::StringEnumeration::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??_EStringEnumeration@icu_56@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_EStringEnumeration@icu_56@@UAEPAXI@Z PROC		; icu_56::StringEnumeration::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector@5
	push	OFFSET ??1StringEnumeration@icu_56@@UAE@XZ ; icu_56::StringEnumeration::~StringEnumeration
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	push	ecx
	push	108					; 0000006cH
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@vector@5
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	push	eax
	call	??_VUMemory@icu_56@@SAXPAX@Z		; icu_56::UMemory::operator delete[]
	add	esp, 4
$LN2@vector@5:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector@5
$LN3@vector@5:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1StringEnumeration@icu_56@@UAE@XZ	; icu_56::StringEnumeration::~StringEnumeration
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector@5
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3UMemory@icu_56@@SAXPAX@Z		; icu_56::UMemory::operator delete
	add	esp, 4
$LN1@vector@5:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@5:
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_EStringEnumeration@icu_56@@UAEPAXI@Z ENDP		; icu_56::StringEnumeration::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	??_C@_0BN@NOOOMDHB@ISO_2022?0locale?$DNzh?0version?$DN2?$AA@ ; `string'
PUBLIC	??_C@_0BN@PFMDJALC@ISO_2022?0locale?$DNzh?0version?$DN1?$AA@ ; `string'
PUBLIC	??_C@_0BN@OMNIKBPD@ISO_2022?0locale?$DNzh?0version?$DN0?$AA@ ; `string'
PUBLIC	??_C@_02LBFBBFLN@cn?$AA@			; `string'
PUBLIC	??_C@_0P@HKOBFPCG@cns?911643?91992?$AA@		; `string'
PUBLIC	??_C@_0L@OIODGLNO@iso?9ir?9165?$AA@		; `string'
PUBLIC	??_C@_02KGFJHFEE@ko?$AA@			; `string'
PUBLIC	??_C@_0BN@PBNBDHCD@ISO_2022?0locale?$DNko?0version?$DN0?$AA@ ; `string'
PUBLIC	??_C@_0BN@OIMKAGGC@ISO_2022?0locale?$DNko?0version?$DN1?$AA@ ; `string'
PUBLIC	??_C@_07GEKOEGCG@ibm?9949?$AA@			; `string'
PUBLIC	??_C@_0BD@OMACFIPD@icu?9internal?925546?$AA@	; `string'
PUBLIC	??_C@_0BM@OKNPDGBE@ISO_2022?0locale?$DNja?0version?$DN?$AA@ ; `string'
PUBLIC	??_C@_02DJBIDCPN@ja?$AA@			; `string'
PUBLIC	??_C@_08PMCOPMKI@ksc_5601?$AA@			; `string'
PUBLIC	??_C@_08KJIFHEL@ibm?95478?$AA@			; `string'
PUBLIC	??_C@_08IOEEBOKI@jisx?9212?$AA@			; `string'
PUBLIC	??_C@_09DNLJOPNC@Shift?9JIS?$AA@		; `string'
PUBLIC	??_C@_09KFBIDBIA@ISO8859_7?$AA@			; `string'
PUBLIC	__$ArrayPad$
EXTRN	_memcpy:PROC
EXTRN	_ucnv_open_56:PROC
EXTRN	_uprv_free_56:PROC
EXTRN	_ucnv_canCreateConverter_56:PROC
EXTRN	_strlen:PROC
EXTRN	_strcpy:PROC
EXTRN	_ucnv_loadSharedData_56:PROC
EXTRN	__imp__strncpy:PROC
EXTRN	_uprv_checkValidMemory:PROC
EXTRN	_memset:PROC
EXTRN	_uprv_malloc_56:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
;	COMDAT ??_C@_0BN@NOOOMDHB@ISO_2022?0locale?$DNzh?0version?$DN2?$AA@
; File d:\mozilla\intl\icu\source\common\ucnv2022.cpp
CONST	SEGMENT
??_C@_0BN@NOOOMDHB@ISO_2022?0locale?$DNzh?0version?$DN2?$AA@ DB 'ISO_2022'
	DB	',locale=zh,version=2', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@PFMDJALC@ISO_2022?0locale?$DNzh?0version?$DN1?$AA@
CONST	SEGMENT
??_C@_0BN@PFMDJALC@ISO_2022?0locale?$DNzh?0version?$DN1?$AA@ DB 'ISO_2022'
	DB	',locale=zh,version=1', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@OMNIKBPD@ISO_2022?0locale?$DNzh?0version?$DN0?$AA@
CONST	SEGMENT
??_C@_0BN@OMNIKBPD@ISO_2022?0locale?$DNzh?0version?$DN0?$AA@ DB 'ISO_2022'
	DB	',locale=zh,version=0', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02LBFBBFLN@cn?$AA@
CONST	SEGMENT
??_C@_02LBFBBFLN@cn?$AA@ DB 'cn', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@HKOBFPCG@cns?911643?91992?$AA@
CONST	SEGMENT
??_C@_0P@HKOBFPCG@cns?911643?91992?$AA@ DB 'cns-11643-1992', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@OIODGLNO@iso?9ir?9165?$AA@
CONST	SEGMENT
??_C@_0L@OIODGLNO@iso?9ir?9165?$AA@ DB 'iso-ir-165', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02KGFJHFEE@ko?$AA@
CONST	SEGMENT
??_C@_02KGFJHFEE@ko?$AA@ DB 'ko', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@PBNBDHCD@ISO_2022?0locale?$DNko?0version?$DN0?$AA@
CONST	SEGMENT
??_C@_0BN@PBNBDHCD@ISO_2022?0locale?$DNko?0version?$DN0?$AA@ DB 'ISO_2022'
	DB	',locale=ko,version=0', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@OIMKAGGC@ISO_2022?0locale?$DNko?0version?$DN1?$AA@
CONST	SEGMENT
??_C@_0BN@OIMKAGGC@ISO_2022?0locale?$DNko?0version?$DN1?$AA@ DB 'ISO_2022'
	DB	',locale=ko,version=1', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07GEKOEGCG@ibm?9949?$AA@
CONST	SEGMENT
??_C@_07GEKOEGCG@ibm?9949?$AA@ DB 'ibm-949', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@OMACFIPD@icu?9internal?925546?$AA@
CONST	SEGMENT
??_C@_0BD@OMACFIPD@icu?9internal?925546?$AA@ DB 'icu-internal-25546', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@OKNPDGBE@ISO_2022?0locale?$DNja?0version?$DN?$AA@
CONST	SEGMENT
??_C@_0BM@OKNPDGBE@ISO_2022?0locale?$DNja?0version?$DN?$AA@ DB 'ISO_2022,'
	DB	'locale=ja,version=', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02DJBIDCPN@ja?$AA@
CONST	SEGMENT
??_C@_02DJBIDCPN@ja?$AA@ DB 'ja', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08PMCOPMKI@ksc_5601?$AA@
CONST	SEGMENT
??_C@_08PMCOPMKI@ksc_5601?$AA@ DB 'ksc_5601', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08KJIFHEL@ibm?95478?$AA@
CONST	SEGMENT
??_C@_08KJIFHEL@ibm?95478?$AA@ DB 'ibm-5478', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08IOEEBOKI@jisx?9212?$AA@
CONST	SEGMENT
??_C@_08IOEEBOKI@jisx?9212?$AA@ DB 'jisx-212', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09DNLJOPNC@Shift?9JIS?$AA@
CONST	SEGMENT
??_C@_09DNLJOPNC@Shift?9JIS?$AA@ DB 'Shift-JIS', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09KFBIDBIA@ISO8859_7?$AA@
CONST	SEGMENT
??_C@_09KFBIDBIA@ISO8859_7?$AA@ DB 'ISO8859_7', 00H	; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?_ISO2022Open@@YAXPAUUConverter@@PAUUConverterLoadArgs@@PAW4UErrorCode@@@Z
_TEXT	SEGMENT
_cnvName$37410 = -332					; size = 4
_len$37402 = -320					; size = 4
_version$37378 = -308					; size = 4
_myConverterData$37376 = -296				; size = 4
_stackArgs$37373 = -284					; size = 28
_stackPieces$37372 = -248				; size = 224
_myLocale$ = -16					; size = 6
__$ArrayPad$ = -4					; size = 4
_cnv$ = 8						; size = 4
_pArgs$ = 12						; size = 4
_errorCode$ = 16					; size = 4
?_ISO2022Open@@YAXPAUUConverter@@PAUUConverterLoadArgs@@PAW4UErrorCode@@@Z PROC ; _ISO2022Open, COMDAT
; Line 472
	push	ebp
	mov	ebp, esp
	sub	esp, 528				; 00000210H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-528]
	mov	ecx, 132				; 00000084H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 474
	mov	BYTE PTR _myLocale$[ebp], 32		; 00000020H
	mov	BYTE PTR _myLocale$[ebp+1], 32		; 00000020H
	mov	BYTE PTR _myLocale$[ebp+2], 32		; 00000020H
	mov	BYTE PTR _myLocale$[ebp+3], 32		; 00000020H
	mov	BYTE PTR _myLocale$[ebp+4], 32		; 00000020H
	mov	BYTE PTR _myLocale$[ebp+5], 32		; 00000020H
; Line 476
	push	104					; 00000068H
	call	_uprv_malloc_56
	add	esp, 4
	mov	ecx, DWORD PTR _cnv$[ebp]
	mov	DWORD PTR [ecx+8], eax
; Line 477
	mov	eax, DWORD PTR _cnv$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	$LN37@ISO2022Ope
; Line 479
	mov	DWORD PTR _stackArgs$37373[ebp], 28	; 0000001cH
	mov	DWORD PTR _stackArgs$37373[ebp+4], 0
	mov	BYTE PTR _stackArgs$37373[ebp+8], 0
	mov	BYTE PTR _stackArgs$37373[ebp+9], 0
	xor	eax, eax
	mov	WORD PTR _stackArgs$37373[ebp+10], ax
	mov	DWORD PTR _stackArgs$37373[ebp+12], 0
	mov	DWORD PTR _stackArgs$37373[ebp+16], 0
	mov	DWORD PTR _stackArgs$37373[ebp+20], 0
	mov	DWORD PTR _stackArgs$37373[ebp+24], 0
; Line 480
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _myConverterData$37376[ebp], ecx
; Line 483
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	cl, BYTE PTR [eax+8]
	mov	BYTE PTR _stackArgs$37373[ebp+8], cl
; Line 485
	push	104					; 00000068H
	push	0
	mov	eax, DWORD PTR _myConverterData$37376[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
; Line 486
	mov	eax, DWORD PTR _myConverterData$37376[ebp]
	mov	DWORD PTR [eax+44], 0
; Line 487
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	DWORD PTR [eax+52], 0
; Line 488
	mov	eax, DWORD PTR _pArgs$[ebp]
	cmp	DWORD PTR [eax+24], 0
	je	SHORT $LN36@ISO2022Ope
; Line 489
	push	1
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	call	_uprv_checkValidMemory
	add	esp, 8
	mov	esi, esp
	push	6
	mov	edx, DWORD PTR _pArgs$[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	lea	ecx, DWORD PTR _myLocale$[ebp]
	push	ecx
	call	DWORD PTR __imp__strncpy
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN36@ISO2022Ope:
; Line 491
	mov	eax, DWORD PTR _pArgs$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	and	ecx, 15					; 0000000fH
	mov	DWORD PTR _version$37378[ebp], ecx
; Line 492
	mov	eax, DWORD PTR _myConverterData$37376[ebp]
	mov	ecx, DWORD PTR _version$37378[ebp]
	mov	DWORD PTR [eax+64], ecx
; Line 494
	movsx	eax, BYTE PTR _myLocale$[ebp]
	cmp	eax, 106				; 0000006aH
	jne	$LN35@ISO2022Ope
	movsx	eax, BYTE PTR _myLocale$[ebp+1]
	cmp	eax, 97					; 00000061H
	je	SHORT $LN34@ISO2022Ope
	movsx	eax, BYTE PTR _myLocale$[ebp+1]
	cmp	eax, 112				; 00000070H
	jne	$LN35@ISO2022Ope
$LN34@ISO2022Ope:
	movsx	eax, BYTE PTR _myLocale$[ebp+2]
	cmp	eax, 95					; 0000005fH
	je	SHORT $LN33@ISO2022Ope
	movsx	eax, BYTE PTR _myLocale$[ebp+2]
	test	eax, eax
	jne	$LN35@ISO2022Ope
$LN33@ISO2022Ope:
; Line 497
	cmp	DWORD PTR _version$37378[ebp], 4
	jbe	SHORT $LN32@ISO2022Ope
; Line 501
	mov	eax, DWORD PTR _errorCode$[ebp]
	mov	DWORD PTR [eax], 2
; Line 502
	jmp	$LN38@ISO2022Ope
$LN32@ISO2022Ope:
; Line 504
	mov	eax, DWORD PTR _version$37378[ebp]
	movzx	ecx, WORD PTR _jpCharsetMasks[eax*2]
	and	ecx, 4
	je	SHORT $LN31@ISO2022Ope
; Line 506
	mov	eax, DWORD PTR _errorCode$[ebp]
	push	eax
	lea	ecx, DWORD PTR _stackArgs$37373[ebp]
	push	ecx
	lea	edx, DWORD PTR _stackPieces$37372[ebp]
	push	edx
	push	OFFSET ??_C@_09KFBIDBIA@ISO8859_7?$AA@
	call	_ucnv_loadSharedData_56
	add	esp, 16					; 00000010H
	mov	ecx, DWORD PTR _myConverterData$37376[ebp]
	mov	DWORD PTR [ecx+8], eax
$LN31@ISO2022Ope:
; Line 509
	mov	eax, DWORD PTR _errorCode$[ebp]
	push	eax
	lea	ecx, DWORD PTR _stackArgs$37373[ebp]
	push	ecx
	lea	edx, DWORD PTR _stackPieces$37372[ebp]
	push	edx
	push	OFFSET ??_C@_09DNLJOPNC@Shift?9JIS?$AA@
	call	_ucnv_loadSharedData_56
	add	esp, 16					; 00000010H
	mov	ecx, DWORD PTR _myConverterData$37376[ebp]
	mov	DWORD PTR [ecx+16], eax
; Line 510
	mov	eax, DWORD PTR _version$37378[ebp]
	movzx	ecx, WORD PTR _jpCharsetMasks[eax*2]
	and	ecx, 32					; 00000020H
	je	SHORT $LN30@ISO2022Ope
; Line 512
	mov	eax, DWORD PTR _errorCode$[ebp]
	push	eax
	lea	ecx, DWORD PTR _stackArgs$37373[ebp]
	push	ecx
	lea	edx, DWORD PTR _stackPieces$37372[ebp]
	push	edx
	push	OFFSET ??_C@_08IOEEBOKI@jisx?9212?$AA@
	call	_ucnv_loadSharedData_56
	add	esp, 16					; 00000010H
	mov	ecx, DWORD PTR _myConverterData$37376[ebp]
	mov	DWORD PTR [ecx+20], eax
$LN30@ISO2022Ope:
; Line 514
	mov	eax, DWORD PTR _version$37378[ebp]
	movzx	ecx, WORD PTR _jpCharsetMasks[eax*2]
	and	ecx, 64					; 00000040H
	je	SHORT $LN29@ISO2022Ope
; Line 516
	mov	eax, DWORD PTR _errorCode$[ebp]
	push	eax
	lea	ecx, DWORD PTR _stackArgs$37373[ebp]
	push	ecx
	lea	edx, DWORD PTR _stackPieces$37372[ebp]
	push	edx
	push	OFFSET ??_C@_08KJIFHEL@ibm?95478?$AA@
	call	_ucnv_loadSharedData_56
	add	esp, 16					; 00000010H
	mov	ecx, DWORD PTR _myConverterData$37376[ebp]
	mov	DWORD PTR [ecx+24], eax
$LN29@ISO2022Ope:
; Line 518
	mov	eax, DWORD PTR _version$37378[ebp]
	movzx	ecx, WORD PTR _jpCharsetMasks[eax*2]
	and	ecx, 128				; 00000080H
	je	SHORT $LN28@ISO2022Ope
; Line 520
	mov	eax, DWORD PTR _errorCode$[ebp]
	push	eax
	lea	ecx, DWORD PTR _stackArgs$37373[ebp]
	push	ecx
	lea	edx, DWORD PTR _stackPieces$37372[ebp]
	push	edx
	push	OFFSET ??_C@_08PMCOPMKI@ksc_5601?$AA@
	call	_ucnv_loadSharedData_56
	add	esp, 16					; 00000010H
	mov	ecx, DWORD PTR _myConverterData$37376[ebp]
	mov	DWORD PTR [ecx+28], eax
$LN28@ISO2022Ope:
; Line 524
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	DWORD PTR [eax+24], OFFSET ?_ISO2022JPData@?A0x5ec8f556@@3UUConverterSharedData@@B ; `anonymous namespace'::_ISO2022JPData
; Line 525
	push	OFFSET ??_C@_02DJBIDCPN@ja?$AA@
	mov	eax, DWORD PTR _myConverterData$37376[ebp]
	add	eax, 99					; 00000063H
	push	eax
	call	_strcpy
	add	esp, 8
; Line 527
	push	OFFSET ??_C@_0BM@OKNPDGBE@ISO_2022?0locale?$DNja?0version?$DN?$AA@
	mov	eax, DWORD PTR _myConverterData$37376[ebp]
	add	eax, 69					; 00000045H
	push	eax
	call	_strcpy
	add	esp, 8
; Line 528
	mov	eax, DWORD PTR _myConverterData$37376[ebp]
	add	eax, 69					; 00000045H
	push	eax
	call	_strlen
	add	esp, 4
	mov	DWORD PTR _len$37402[ebp], eax
; Line 529
	mov	eax, DWORD PTR _myConverterData$37376[ebp]
	mov	ecx, DWORD PTR [eax+64]
	add	ecx, 48					; 00000030H
	mov	edx, DWORD PTR _myConverterData$37376[ebp]
	add	edx, DWORD PTR _len$37402[ebp]
	mov	BYTE PTR [edx+69], cl
; Line 530
	mov	eax, DWORD PTR _myConverterData$37376[ebp]
	add	eax, DWORD PTR _len$37402[ebp]
	mov	BYTE PTR [eax+70], 0
; Line 533
	jmp	$LN27@ISO2022Ope
$LN35@ISO2022Ope:
; Line 534
	movsx	eax, BYTE PTR _myLocale$[ebp]
	cmp	eax, 107				; 0000006bH
	jne	$LN26@ISO2022Ope
	movsx	eax, BYTE PTR _myLocale$[ebp+1]
	cmp	eax, 111				; 0000006fH
	je	SHORT $LN25@ISO2022Ope
	movsx	eax, BYTE PTR _myLocale$[ebp+1]
	cmp	eax, 114				; 00000072H
	jne	$LN26@ISO2022Ope
$LN25@ISO2022Ope:
	movsx	eax, BYTE PTR _myLocale$[ebp+2]
	cmp	eax, 95					; 0000005fH
	je	SHORT $LN24@ISO2022Ope
	movsx	eax, BYTE PTR _myLocale$[ebp+2]
	test	eax, eax
	jne	$LN26@ISO2022Ope
$LN24@ISO2022Ope:
; Line 536
	cmp	DWORD PTR _version$37378[ebp], 1
	jbe	SHORT $LN23@ISO2022Ope
; Line 540
	mov	eax, DWORD PTR _errorCode$[ebp]
	mov	DWORD PTR [eax], 2
; Line 541
	jmp	$LN38@ISO2022Ope
$LN23@ISO2022Ope:
; Line 544
	cmp	DWORD PTR _version$37378[ebp], 1
	jne	SHORT $LN22@ISO2022Ope
; Line 545
	mov	DWORD PTR _cnvName$37410[ebp], OFFSET ??_C@_0BD@OMACFIPD@icu?9internal?925546?$AA@
; Line 546
	jmp	SHORT $LN21@ISO2022Ope
$LN22@ISO2022Ope:
; Line 547
	mov	DWORD PTR _cnvName$37410[ebp], OFFSET ??_C@_07GEKOEGCG@ibm?9949?$AA@
; Line 548
	mov	DWORD PTR _version$37378[ebp], 0
	mov	eax, DWORD PTR _myConverterData$37376[ebp]
	mov	ecx, DWORD PTR _version$37378[ebp]
	mov	DWORD PTR [eax+64], ecx
$LN21@ISO2022Ope:
; Line 550
	mov	eax, DWORD PTR _pArgs$[ebp]
	movsx	ecx, BYTE PTR [eax+8]
	test	ecx, ecx
	je	SHORT $LN20@ISO2022Ope
; Line 551
	mov	eax, DWORD PTR _errorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cnvName$37410[ebp]
	push	ecx
	call	_ucnv_canCreateConverter_56
	add	esp, 8
; Line 552
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_uprv_free_56
	add	esp, 4
; Line 553
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 554
	jmp	$LN38@ISO2022Ope
; Line 555
	jmp	$LN19@ISO2022Ope
$LN20@ISO2022Ope:
; Line 556
	mov	eax, DWORD PTR _errorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cnvName$37410[ebp]
	push	ecx
	call	_ucnv_open_56
	add	esp, 8
	mov	edx, DWORD PTR _myConverterData$37376[ebp]
	mov	DWORD PTR [edx+40], eax
; Line 557
	mov	eax, DWORD PTR _errorCode$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN18@ISO2022Ope
; Line 558
	mov	eax, DWORD PTR _cnv$[ebp]
	push	eax
	call	?_ISO2022Close@@YAXPAUUConverter@@@Z	; _ISO2022Close
	add	esp, 4
; Line 559
	jmp	$LN38@ISO2022Ope
$LN18@ISO2022Ope:
; Line 562
	cmp	DWORD PTR _version$37378[ebp], 1
	jne	SHORT $LN17@ISO2022Ope
; Line 563
	push	OFFSET ??_C@_0BN@OIMKAGGC@ISO_2022?0locale?$DNko?0version?$DN1?$AA@
	mov	eax, DWORD PTR _myConverterData$37376[ebp]
	add	eax, 69					; 00000045H
	push	eax
	call	_strcpy
	add	esp, 8
; Line 564
	push	1
	mov	eax, DWORD PTR _myConverterData$37376[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	call	_uprv_checkValidMemory
	add	esp, 8
	push	4
	mov	eax, DWORD PTR _myConverterData$37376[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 565
	mov	eax, DWORD PTR _myConverterData$37376[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR _cnv$[ebp]
	mov	al, BYTE PTR [ecx+61]
	mov	BYTE PTR [edx+61], al
; Line 566
	jmp	SHORT $LN16@ISO2022Ope
$LN17@ISO2022Ope:
; Line 567
	push	OFFSET ??_C@_0BN@PBNBDHCD@ISO_2022?0locale?$DNko?0version?$DN0?$AA@
	mov	eax, DWORD PTR _myConverterData$37376[ebp]
	add	eax, 69					; 00000045H
	push	eax
	call	_strcpy
	add	esp, 8
$LN16@ISO2022Ope:
; Line 571
	mov	eax, DWORD PTR _myConverterData$37376[ebp]
	push	eax
	mov	ecx, DWORD PTR _cnv$[ebp]
	push	ecx
	call	?setInitialStateToUnicodeKR@@YAXPAUUConverter@@PAUUConverterDataISO2022@@@Z ; setInitialStateToUnicodeKR
	add	esp, 8
; Line 572
	mov	eax, DWORD PTR _myConverterData$37376[ebp]
	push	eax
	mov	ecx, DWORD PTR _cnv$[ebp]
	push	ecx
	call	?setInitialStateFromUnicodeKR@@YAXPAUUConverter@@PAUUConverterDataISO2022@@@Z ; setInitialStateFromUnicodeKR
	add	esp, 8
; Line 575
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	DWORD PTR [eax+24], OFFSET ?_ISO2022KRData@?A0x5ec8f556@@3UUConverterSharedData@@B ; `anonymous namespace'::_ISO2022KRData
; Line 576
	push	OFFSET ??_C@_02KGFJHFEE@ko?$AA@
	mov	eax, DWORD PTR _myConverterData$37376[ebp]
	add	eax, 99					; 00000063H
	push	eax
	call	_strcpy
	add	esp, 8
$LN19@ISO2022Ope:
; Line 579
	jmp	$LN27@ISO2022Ope
$LN26@ISO2022Ope:
; Line 580
	movsx	eax, BYTE PTR _myLocale$[ebp]
	cmp	eax, 122				; 0000007aH
	jne	SHORT $LN12@ISO2022Ope
	movsx	eax, BYTE PTR _myLocale$[ebp+1]
	cmp	eax, 104				; 00000068H
	je	SHORT $LN13@ISO2022Ope
$LN12@ISO2022Ope:
	movsx	eax, BYTE PTR _myLocale$[ebp]
	cmp	eax, 99					; 00000063H
	jne	$LN14@ISO2022Ope
	movsx	eax, BYTE PTR _myLocale$[ebp+1]
	cmp	eax, 110				; 0000006eH
	jne	$LN14@ISO2022Ope
$LN13@ISO2022Ope:
	movsx	eax, BYTE PTR _myLocale$[ebp+2]
	cmp	eax, 95					; 0000005fH
	je	SHORT $LN11@ISO2022Ope
	movsx	eax, BYTE PTR _myLocale$[ebp+2]
	test	eax, eax
	jne	$LN14@ISO2022Ope
$LN11@ISO2022Ope:
; Line 582
	cmp	DWORD PTR _version$37378[ebp], 2
	jbe	SHORT $LN10@ISO2022Ope
; Line 586
	mov	eax, DWORD PTR _errorCode$[ebp]
	mov	DWORD PTR [eax], 2
; Line 587
	jmp	$LN38@ISO2022Ope
$LN10@ISO2022Ope:
; Line 592
	mov	eax, DWORD PTR _errorCode$[ebp]
	push	eax
	lea	ecx, DWORD PTR _stackArgs$37373[ebp]
	push	ecx
	lea	edx, DWORD PTR _stackPieces$37372[ebp]
	push	edx
	push	OFFSET ??_C@_08KJIFHEL@ibm?95478?$AA@
	call	_ucnv_loadSharedData_56
	add	esp, 16					; 00000010H
	mov	ecx, DWORD PTR _myConverterData$37376[ebp]
	mov	DWORD PTR [ecx+4], eax
; Line 593
	cmp	DWORD PTR _version$37378[ebp], 1
	jne	SHORT $LN9@ISO2022Ope
; Line 595
	mov	eax, DWORD PTR _errorCode$[ebp]
	push	eax
	lea	ecx, DWORD PTR _stackArgs$37373[ebp]
	push	ecx
	lea	edx, DWORD PTR _stackPieces$37372[ebp]
	push	edx
	push	OFFSET ??_C@_0L@OIODGLNO@iso?9ir?9165?$AA@
	call	_ucnv_loadSharedData_56
	add	esp, 16					; 00000010H
	mov	ecx, DWORD PTR _myConverterData$37376[ebp]
	mov	DWORD PTR [ecx+8], eax
$LN9@ISO2022Ope:
; Line 598
	mov	eax, DWORD PTR _errorCode$[ebp]
	push	eax
	lea	ecx, DWORD PTR _stackArgs$37373[ebp]
	push	ecx
	lea	edx, DWORD PTR _stackPieces$37372[ebp]
	push	edx
	push	OFFSET ??_C@_0P@HKOBFPCG@cns?911643?91992?$AA@
	call	_ucnv_loadSharedData_56
	add	esp, 16					; 00000010H
	mov	ecx, DWORD PTR _myConverterData$37376[ebp]
	mov	DWORD PTR [ecx+12], eax
; Line 602
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	DWORD PTR [eax+24], OFFSET ?_ISO2022CNData@?A0x5ec8f556@@3UUConverterSharedData@@B ; `anonymous namespace'::_ISO2022CNData
; Line 603
	push	OFFSET ??_C@_02LBFBBFLN@cn?$AA@
	mov	eax, DWORD PTR _myConverterData$37376[ebp]
	add	eax, 99					; 00000063H
	push	eax
	call	_strcpy
	add	esp, 8
; Line 605
	cmp	DWORD PTR _version$37378[ebp], 0
	jne	SHORT $LN8@ISO2022Ope
; Line 606
	mov	eax, DWORD PTR _myConverterData$37376[ebp]
	mov	DWORD PTR [eax+64], 0
; Line 607
	push	OFFSET ??_C@_0BN@OMNIKBPD@ISO_2022?0locale?$DNzh?0version?$DN0?$AA@
	mov	eax, DWORD PTR _myConverterData$37376[ebp]
	add	eax, 69					; 00000045H
	push	eax
	call	_strcpy
	add	esp, 8
	jmp	SHORT $LN7@ISO2022Ope
$LN8@ISO2022Ope:
; Line 608
	cmp	DWORD PTR _version$37378[ebp], 1
	jne	SHORT $LN6@ISO2022Ope
; Line 609
	mov	eax, DWORD PTR _myConverterData$37376[ebp]
	mov	DWORD PTR [eax+64], 1
; Line 610
	push	OFFSET ??_C@_0BN@PFMDJALC@ISO_2022?0locale?$DNzh?0version?$DN1?$AA@
	mov	eax, DWORD PTR _myConverterData$37376[ebp]
	add	eax, 69					; 00000045H
	push	eax
	call	_strcpy
	add	esp, 8
; Line 611
	jmp	SHORT $LN7@ISO2022Ope
$LN6@ISO2022Ope:
; Line 612
	mov	eax, DWORD PTR _myConverterData$37376[ebp]
	mov	DWORD PTR [eax+64], 2
; Line 613
	push	OFFSET ??_C@_0BN@NOOOMDHB@ISO_2022?0locale?$DNzh?0version?$DN2?$AA@
	mov	eax, DWORD PTR _myConverterData$37376[ebp]
	add	eax, 69					; 00000045H
	push	eax
	call	_strcpy
	add	esp, 8
$LN7@ISO2022Ope:
; Line 617
	jmp	SHORT $LN27@ISO2022Ope
$LN14@ISO2022Ope:
; Line 631
	mov	eax, DWORD PTR _errorCode$[ebp]
	mov	DWORD PTR [eax], 2
; Line 634
	jmp	SHORT $LN38@ISO2022Ope
$LN27@ISO2022Ope:
; Line 638
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	cl, BYTE PTR [edx+71]
	mov	BYTE PTR [eax+60], cl
; Line 640
	mov	eax, DWORD PTR _errorCode$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	jne	SHORT $LN2@ISO2022Ope
	mov	eax, DWORD PTR _pArgs$[ebp]
	movsx	ecx, BYTE PTR [eax+8]
	test	ecx, ecx
	je	SHORT $LN3@ISO2022Ope
$LN2@ISO2022Ope:
; Line 641
	mov	eax, DWORD PTR _cnv$[ebp]
	push	eax
	call	?_ISO2022Close@@YAXPAUUConverter@@@Z	; _ISO2022Close
	add	esp, 4
$LN3@ISO2022Ope:
; Line 643
	jmp	SHORT $LN38@ISO2022Ope
$LN37@ISO2022Ope:
; Line 644
	mov	eax, DWORD PTR _errorCode$[ebp]
	mov	DWORD PTR [eax], 7
$LN38@ISO2022Ope:
; Line 646
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN44@ISO2022Ope
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 528				; 00000210H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN44@ISO2022Ope:
	DD	3
	DD	$LN43@ISO2022Ope
$LN43@ISO2022Ope:
	DD	-16					; fffffff0H
	DD	6
	DD	$LN40@ISO2022Ope
	DD	-248					; ffffff08H
	DD	224					; 000000e0H
	DD	$LN41@ISO2022Ope
	DD	-284					; fffffee4H
	DD	28					; 0000001cH
	DD	$LN42@ISO2022Ope
$LN42@ISO2022Ope:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	65					; 00000041H
	DB	114					; 00000072H
	DB	103					; 00000067H
	DB	115					; 00000073H
	DB	0
$LN41@ISO2022Ope:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	80					; 00000050H
	DB	105					; 00000069H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
$LN40@ISO2022Ope:
	DB	109					; 0000006dH
	DB	121					; 00000079H
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	0
?_ISO2022Open@@YAXPAUUConverter@@PAUUConverterLoadArgs@@PAW4UErrorCode@@@Z ENDP ; _ISO2022Open
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?U_FAILURE@@YACW4UErrorCode@@@Z
_TEXT	SEGMENT
_code$ = 8						; size = 4
?U_FAILURE@@YACW4UErrorCode@@@Z PROC			; U_FAILURE, COMDAT
; File d:\mozilla\intl\icu\source\common\unicode\utypes.h
; Line 705
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	cmp	DWORD PTR _code$[ebp], 0
	setg	al
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?U_FAILURE@@YACW4UErrorCode@@@Z ENDP			; U_FAILURE
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?setInitialStateToUnicodeKR@@YAXPAUUConverter@@PAUUConverterDataISO2022@@@Z
_TEXT	SEGMENT
_cnv$37356 = -8						; size = 4
___formal$ = 8						; size = 4
_myConverterData$ = 12					; size = 4
?setInitialStateToUnicodeKR@@YAXPAUUConverter@@PAUUConverterDataISO2022@@@Z PROC ; setInitialStateToUnicodeKR, COMDAT
; File d:\mozilla\intl\icu\source\common\ucnv2022.cpp
; Line 440
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 441
	mov	eax, DWORD PTR _myConverterData$[ebp]
	cmp	DWORD PTR [eax+64], 1
	jne	SHORT $LN2@setInitial
; Line 442
	mov	eax, DWORD PTR _myConverterData$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR _cnv$37356[ebp], ecx
; Line 444
	mov	eax, DWORD PTR _cnv$37356[ebp]
	mov	DWORD PTR [eax+44], 0
; Line 445
	mov	eax, DWORD PTR _cnv$37356[ebp]
	mov	DWORD PTR [eax+48], 0
; Line 446
	mov	eax, DWORD PTR _cnv$37356[ebp]
	mov	BYTE PTR [eax+36], 0
$LN2@setInitial:
; Line 448
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?setInitialStateToUnicodeKR@@YAXPAUUConverter@@PAUUConverterDataISO2022@@@Z ENDP ; setInitialStateToUnicodeKR
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?setInitialStateFromUnicodeKR@@YAXPAUUConverter@@PAUUConverterDataISO2022@@@Z
_TEXT	SEGMENT
_cnv$37363 = -8						; size = 4
_converter$ = 8						; size = 4
_myConverterData$ = 12					; size = 4
?setInitialStateFromUnicodeKR@@YAXPAUUConverter@@PAUUConverterDataISO2022@@@Z PROC ; setInitialStateFromUnicodeKR, COMDAT
; Line 451
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 455
	mov	eax, DWORD PTR _converter$[ebp]
	movsx	ecx, BYTE PTR [eax+63]
	test	ecx, ecx
	jne	SHORT $LN2@setInitial@2
; Line 457
	mov	eax, DWORD PTR _converter$[ebp]
	mov	BYTE PTR [eax+63], 4
; Line 458
	mov	eax, DWORD PTR _converter$[ebp]
	mov	BYTE PTR [eax+76], 27			; 0000001bH
; Line 459
	mov	eax, DWORD PTR _converter$[ebp]
	mov	BYTE PTR [eax+77], 36			; 00000024H
; Line 460
	mov	eax, DWORD PTR _converter$[ebp]
	mov	BYTE PTR [eax+78], 41			; 00000029H
; Line 461
	mov	eax, DWORD PTR _converter$[ebp]
	mov	BYTE PTR [eax+79], 67			; 00000043H
$LN2@setInitial@2:
; Line 463
	mov	eax, DWORD PTR _myConverterData$[ebp]
	cmp	DWORD PTR [eax+64], 1
	jne	SHORT $LN3@setInitial@2
; Line 464
	mov	eax, DWORD PTR _myConverterData$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR _cnv$37363[ebp], ecx
; Line 466
	mov	eax, DWORD PTR _cnv$37363[ebp]
	mov	DWORD PTR [eax+56], 0
; Line 467
	mov	eax, DWORD PTR _cnv$37363[ebp]
	mov	DWORD PTR [eax+52], 1
$LN3@setInitial@2:
; Line 469
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?setInitialStateFromUnicodeKR@@YAXPAUUConverter@@PAUUConverterDataISO2022@@@Z ENDP ; setInitialStateFromUnicodeKR
_TEXT	ENDS
EXTRN	_ucnv_close_56:PROC
EXTRN	_ucnv_unloadSharedDataIfReady_56:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?_ISO2022Close@@YAXPAUUConverter@@@Z
_TEXT	SEGMENT
_i$ = -32						; size = 4
_array$ = -20						; size = 4
_myData$ = -8						; size = 4
_converter$ = 8						; size = 4
?_ISO2022Close@@YAXPAUUConverter@@@Z PROC		; _ISO2022Close, COMDAT
; Line 650
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 651
	mov	eax, DWORD PTR _converter$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _myData$[ebp], ecx
; Line 652
	mov	eax, DWORD PTR _myData$[ebp]
	mov	DWORD PTR _array$[ebp], eax
; Line 655
	mov	eax, DWORD PTR _converter$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN7@ISO2022Clo
; Line 657
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN5@ISO2022Clo
$LN4@ISO2022Clo:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN5@ISO2022Clo:
	cmp	DWORD PTR _i$[ebp], 10			; 0000000aH
	jge	SHORT $LN3@ISO2022Clo
; Line 658
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _array$[ebp]
	cmp	DWORD PTR [ecx+eax*4], 0
	je	SHORT $LN2@ISO2022Clo
; Line 659
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _array$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	push	edx
	call	_ucnv_unloadSharedDataIfReady_56
	add	esp, 4
$LN2@ISO2022Clo:
; Line 661
	jmp	SHORT $LN4@ISO2022Clo
$LN3@ISO2022Clo:
; Line 663
	mov	eax, DWORD PTR _myData$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	call	_ucnv_close_56
	add	esp, 4
; Line 665
	mov	eax, DWORD PTR _converter$[ebp]
	movsx	ecx, BYTE PTR [eax+34]
	test	ecx, ecx
	jne	SHORT $LN7@ISO2022Clo
; Line 666
	mov	eax, DWORD PTR _converter$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_uprv_free_56
	add	esp, 4
; Line 667
	mov	eax, DWORD PTR _converter$[ebp]
	mov	DWORD PTR [eax+8], 0
$LN7@ISO2022Clo:
; Line 670
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_ISO2022Close@@YAXPAUUConverter@@@Z ENDP		; _ISO2022Close
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?_ISO2022Reset@@YAXPAUUConverter@@W4UConverterResetChoice@@@Z
_TEXT	SEGMENT
_myConverterData$ = -8					; size = 4
_converter$ = 8						; size = 4
_choice$ = 12						; size = 4
?_ISO2022Reset@@YAXPAUUConverter@@W4UConverterResetChoice@@@Z PROC ; _ISO2022Reset, COMDAT
; Line 673
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 674
	mov	eax, DWORD PTR _converter$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _myConverterData$[ebp], ecx
; Line 675
	cmp	DWORD PTR _choice$[ebp], 1
	jg	SHORT $LN5@ISO2022Res
; Line 676
	push	6
	push	0
	mov	eax, DWORD PTR _myConverterData$[ebp]
	add	eax, 48					; 00000030H
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
; Line 677
	mov	eax, DWORD PTR _myConverterData$[ebp]
	mov	DWORD PTR [eax+60], 0
; Line 678
	mov	eax, DWORD PTR _myConverterData$[ebp]
	mov	BYTE PTR [eax+68], 0
$LN5@ISO2022Res:
; Line 680
	cmp	DWORD PTR _choice$[ebp], 1
	je	SHORT $LN4@ISO2022Res
; Line 681
	push	6
	push	0
	mov	eax, DWORD PTR _myConverterData$[ebp]
	add	eax, 54					; 00000036H
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
$LN4@ISO2022Res:
; Line 706
	mov	eax, DWORD PTR _myConverterData$[ebp]
	movsx	ecx, BYTE PTR [eax+99]
	cmp	ecx, 107				; 0000006bH
	jne	SHORT $LN6@ISO2022Res
; Line 707
	cmp	DWORD PTR _choice$[ebp], 1
	jg	SHORT $LN2@ISO2022Res
; Line 708
	mov	eax, DWORD PTR _myConverterData$[ebp]
	push	eax
	mov	ecx, DWORD PTR _converter$[ebp]
	push	ecx
	call	?setInitialStateToUnicodeKR@@YAXPAUUConverter@@PAUUConverterDataISO2022@@@Z ; setInitialStateToUnicodeKR
	add	esp, 8
$LN2@ISO2022Res:
; Line 710
	cmp	DWORD PTR _choice$[ebp], 1
	je	SHORT $LN6@ISO2022Res
; Line 711
	mov	eax, DWORD PTR _myConverterData$[ebp]
	push	eax
	mov	ecx, DWORD PTR _converter$[ebp]
	push	ecx
	call	?setInitialStateFromUnicodeKR@@YAXPAUUConverter@@PAUUConverterDataISO2022@@@Z ; setInitialStateFromUnicodeKR
	add	esp, 8
$LN6@ISO2022Res:
; Line 715
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_ISO2022Reset@@YAXPAUUConverter@@W4UConverterResetChoice@@@Z ENDP ; _ISO2022Reset
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?_ISO2022getName@@YAPBDPBUUConverter@@@Z
_TEXT	SEGMENT
_myData$37481 = -8					; size = 4
_cnv$ = 8						; size = 4
?_ISO2022getName@@YAPBDPBUUConverter@@@Z PROC		; _ISO2022getName, COMDAT
; Line 718
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 719
	mov	eax, DWORD PTR _cnv$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN1@ISO2022get
; Line 720
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _myData$37481[ebp], ecx
; Line 721
	mov	eax, DWORD PTR _myData$37481[ebp]
	add	eax, 69					; 00000045H
	jmp	SHORT $LN2@ISO2022get
$LN1@ISO2022get:
; Line 723
	xor	eax, eax
$LN2@ISO2022get:
; Line 724
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?_ISO2022getName@@YAPBDPBUUConverter@@@Z ENDP		; _ISO2022getName
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?UConverter_fromUnicode_ISO_2022_JP_OFFSETS_LOGIC@@YAXPAUUConverterFromUnicodeArgs@@PAW4UErrorCode@@@Z
_TEXT	SEGMENT
tv304 = -548						; size = 4
tv188 = -548						; size = 4
_escLen$37891 = -348					; size = 4
_sourceIndex$37888 = -336				; size = 4
_sourceIndex$37877 = -324				; size = 4
_escLen$37855 = -312					; size = 4
_cs0$37813 = -297					; size = 1
_len2$37812 = -288					; size = 4
_value$37811 = -276					; size = 4
_csm$37792 = -264					; size = 2
_trail$37781 = -252					; size = 2
_g$ = -237						; size = 1
_cs$ = -225						; size = 1
_i$ = -216						; size = 4
_useFallback$ = -201					; size = 1
_targetValue$ = -192					; size = 4
_choiceCount$ = -180					; size = 4
_choices$ = -168					; size = 10
_outLen$ = -148						; size = 4
_len$ = -136						; size = 4
_buffer$ = -124						; size = 8
_sourceChar$ = -108					; size = 4
_offsets$ = -96						; size = 4
_sourceLimit$ = -84					; size = 4
_source$ = -72						; size = 4
_targetLimit$ = -60					; size = 4
_target$ = -48						; size = 4
_pFromU2022State$ = -36					; size = 4
_converterData$ = -24					; size = 4
_cnv$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_args$ = 8						; size = 4
_err$ = 12						; size = 4
?UConverter_fromUnicode_ISO_2022_JP_OFFSETS_LOGIC@@YAXPAUUConverterFromUnicodeArgs@@PAW4UErrorCode@@@Z PROC ; UConverter_fromUnicode_ISO_2022_JP_OFFSETS_LOGIC, COMDAT
; Line 1653
	push	ebp
	mov	ebp, esp
	sub	esp, 548				; 00000224H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-548]
	mov	ecx, 137				; 00000089H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 1654
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _cnv$[ebp], ecx
; Line 1657
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _target$[ebp], ecx
; Line 1658
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _targetLimit$[ebp], ecx
; Line 1659
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _source$[ebp], ecx
; Line 1660
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _sourceLimit$[ebp], ecx
; Line 1661
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR _offsets$[ebp], ecx
; Line 1667
	mov	DWORD PTR _targetValue$[ebp], 0
; Line 1674
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _converterData$[ebp], ecx
; Line 1675
	mov	eax, DWORD PTR _converterData$[ebp]
	add	eax, 54					; 00000036H
	mov	DWORD PTR _pFromU2022State$[ebp], eax
; Line 1677
	mov	DWORD PTR _choiceCount$[ebp], 0
; Line 1680
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	DWORD PTR _sourceChar$[ebp], ecx
	cmp	DWORD PTR _sourceChar$[ebp], 0
	je	SHORT $LN80@UConverter
	mov	eax, DWORD PTR _target$[ebp]
	cmp	eax, DWORD PTR _targetLimit$[ebp]
	jae	SHORT $LN80@UConverter
; Line 1681
	jmp	SHORT $getTrail$37772
	jmp	SHORT $getTrail$37772
$LN80@UConverter:
; Line 1684
	mov	eax, DWORD PTR _source$[ebp]
	cmp	eax, DWORD PTR _sourceLimit$[ebp]
	jae	$LN79@UConverter
; Line 1685
	mov	eax, DWORD PTR _target$[ebp]
	cmp	eax, DWORD PTR _targetLimit$[ebp]
	jae	$LN78@UConverter
; Line 1687
	mov	eax, DWORD PTR _source$[ebp]
	movzx	ecx, WORD PTR [eax]
	mov	DWORD PTR _sourceChar$[ebp], ecx
	mov	edx, DWORD PTR _source$[ebp]
	add	edx, 2
	mov	DWORD PTR _source$[ebp], edx
; Line 1689
	mov	eax, DWORD PTR _sourceChar$[ebp]
	and	eax, -2048				; fffff800H
	cmp	eax, 55296				; 0000d800H
	jne	$LN77@UConverter
; Line 1690
	mov	eax, DWORD PTR _sourceChar$[ebp]
	and	eax, 1024				; 00000400H
	jne	SHORT $LN76@UConverter
$getTrail$37772:
; Line 1693
	mov	eax, DWORD PTR _source$[ebp]
	cmp	eax, DWORD PTR _sourceLimit$[ebp]
	jae	SHORT $LN75@UConverter
; Line 1695
	mov	eax, DWORD PTR _source$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR _trail$37781[ebp], cx
; Line 1696
	movzx	eax, WORD PTR _trail$37781[ebp]
	and	eax, -1024				; fffffc00H
	cmp	eax, 56320				; 0000dc00H
	jne	SHORT $LN74@UConverter
; Line 1697
	mov	eax, DWORD PTR _source$[ebp]
	add	eax, 2
	mov	DWORD PTR _source$[ebp], eax
; Line 1698
	mov	eax, DWORD PTR _sourceChar$[ebp]
	shl	eax, 10					; 0000000aH
	movzx	ecx, WORD PTR _trail$37781[ebp]
	lea	edx, DWORD PTR [eax+ecx-56613888]
	mov	DWORD PTR _sourceChar$[ebp], edx
; Line 1699
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	DWORD PTR [eax+56], 0
; Line 1702
	jmp	SHORT $LN73@UConverter
$LN74@UConverter:
; Line 1705
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 12			; 0000000cH
; Line 1706
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	ecx, DWORD PTR _sourceChar$[ebp]
	mov	DWORD PTR [eax+56], ecx
; Line 1707
	jmp	$LN79@UConverter
$LN73@UConverter:
; Line 1709
	jmp	SHORT $LN72@UConverter
$LN75@UConverter:
; Line 1711
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	ecx, DWORD PTR _sourceChar$[ebp]
	mov	DWORD PTR [eax+56], ecx
; Line 1712
	jmp	$LN79@UConverter
$LN72@UConverter:
; Line 1714
	jmp	SHORT $LN77@UConverter
$LN76@UConverter:
; Line 1717
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 12			; 0000000cH
; Line 1718
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	ecx, DWORD PTR _sourceChar$[ebp]
	mov	DWORD PTR [eax+56], ecx
; Line 1719
	jmp	$LN79@UConverter
$LN77@UConverter:
; Line 1724
	cmp	DWORD PTR _sourceChar$[ebp], 32		; 00000020H
	jge	SHORT $LN70@UConverter
	mov	eax, 1
	mov	ecx, DWORD PTR _sourceChar$[ebp]
	shl	eax, cl
	and	eax, 134266880				; 0800c000H
	je	SHORT $LN70@UConverter
; Line 1726
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 12			; 0000000cH
; Line 1727
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	ecx, DWORD PTR _sourceChar$[ebp]
	mov	DWORD PTR [eax+56], ecx
; Line 1728
	jmp	$LN79@UConverter
$LN70@UConverter:
; Line 1733
	cmp	DWORD PTR _choiceCount$[ebp], 0
	jne	$LN69@UConverter
; Line 1740
	mov	eax, DWORD PTR _converterData$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	dx, WORD PTR _jpCharsetMasks[ecx*2]
	mov	WORD PTR _csm$37792[ebp], dx
; Line 1741
	mov	DWORD PTR _choiceCount$[ebp], 0
; Line 1744
	mov	eax, DWORD PTR _converterData$[ebp]
	cmp	DWORD PTR [eax+64], 3
	je	SHORT $LN67@UConverter
	mov	eax, DWORD PTR _converterData$[ebp]
	cmp	DWORD PTR [eax+64], 4
	jne	SHORT $LN68@UConverter
$LN67@UConverter:
; Line 1745
	mov	eax, DWORD PTR _choiceCount$[ebp]
	mov	BYTE PTR _choices$[ebp+eax], 8
	mov	ecx, DWORD PTR _choiceCount$[ebp]
	add	ecx, 1
	mov	DWORD PTR _choiceCount$[ebp], ecx
$LN68@UConverter:
; Line 1748
	movzx	eax, WORD PTR _csm$37792[ebp]
	and	eax, -257				; fffffeffH
	mov	WORD PTR _csm$37792[ebp], ax
; Line 1751
	mov	eax, DWORD PTR _pFromU2022State$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _cs$[ebp], cl
	mov	edx, DWORD PTR _choiceCount$[ebp]
	mov	al, BYTE PTR _cs$[ebp]
	mov	BYTE PTR _choices$[ebp+edx], al
	mov	ecx, DWORD PTR _choiceCount$[ebp]
	add	ecx, 1
	mov	DWORD PTR _choiceCount$[ebp], ecx
; Line 1752
	movsx	ecx, BYTE PTR _cs$[ebp]
	mov	eax, 1
	shl	eax, cl
	not	eax
	movzx	ecx, WORD PTR _csm$37792[ebp]
	and	ecx, eax
	mov	WORD PTR _csm$37792[ebp], cx
; Line 1755
	mov	eax, DWORD PTR _pFromU2022State$[ebp]
	mov	cl, BYTE PTR [eax+2]
	mov	BYTE PTR _cs$[ebp], cl
	movsx	edx, BYTE PTR _cs$[ebp]
	test	edx, edx
	je	SHORT $LN66@UConverter
; Line 1756
	mov	eax, DWORD PTR _choiceCount$[ebp]
	mov	cl, BYTE PTR _cs$[ebp]
	mov	BYTE PTR _choices$[ebp+eax], cl
	mov	edx, DWORD PTR _choiceCount$[ebp]
	add	edx, 1
	mov	DWORD PTR _choiceCount$[ebp], edx
; Line 1757
	movsx	ecx, BYTE PTR _cs$[ebp]
	mov	eax, 1
	shl	eax, cl
	not	eax
	movzx	ecx, WORD PTR _csm$37792[ebp]
	and	ecx, eax
	mov	WORD PTR _csm$37792[ebp], cx
$LN66@UConverter:
; Line 1761
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN65@UConverter
$LN64@UConverter:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN65@UConverter:
	cmp	DWORD PTR _i$[ebp], 9
	jge	SHORT $LN69@UConverter
; Line 1762
	mov	eax, DWORD PTR _i$[ebp]
	mov	cl, BYTE PTR _jpCharsetPref[eax*4]
	mov	BYTE PTR _cs$[ebp], cl
; Line 1763
	movsx	ecx, BYTE PTR _cs$[ebp]
	mov	eax, 1
	shl	eax, cl
	movzx	ecx, WORD PTR _csm$37792[ebp]
	and	eax, ecx
	je	SHORT $LN62@UConverter
; Line 1764
	mov	eax, DWORD PTR _choiceCount$[ebp]
	mov	cl, BYTE PTR _cs$[ebp]
	mov	BYTE PTR _choices$[ebp+eax], cl
	mov	edx, DWORD PTR _choiceCount$[ebp]
	add	edx, 1
	mov	DWORD PTR _choiceCount$[ebp], edx
; Line 1765
	movsx	ecx, BYTE PTR _cs$[ebp]
	mov	eax, 1
	shl	eax, cl
	not	eax
	movzx	ecx, WORD PTR _csm$37792[ebp]
	and	ecx, eax
	mov	WORD PTR _csm$37792[ebp], cx
$LN62@UConverter:
; Line 1767
	jmp	$LN64@UConverter
$LN69@UConverter:
; Line 1770
	mov	BYTE PTR _g$[ebp], 0
	mov	al, BYTE PTR _g$[ebp]
	mov	BYTE PTR _cs$[ebp], al
; Line 1776
	mov	DWORD PTR _len$[ebp], 0
; Line 1783
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	cl, BYTE PTR [eax+35]
	mov	BYTE PTR _useFallback$[ebp], cl
; Line 1785
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN61@UConverter
$LN60@UConverter:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN61@UConverter:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _choiceCount$[ebp]
	jge	$LN59@UConverter
	cmp	DWORD PTR _len$[ebp], 0
	jg	$LN59@UConverter
; Line 1788
	mov	eax, DWORD PTR _i$[ebp]
	mov	cl, BYTE PTR _choices$[ebp+eax]
	mov	BYTE PTR _cs0$37813[ebp], cl
; Line 1789
	movsx	eax, BYTE PTR _cs0$37813[ebp]
	mov	DWORD PTR tv188[ebp], eax
	cmp	DWORD PTR tv188[ebp], 8
	ja	$LN35@UConverter
	mov	ecx, DWORD PTR tv188[ebp]
	jmp	DWORD PTR $LN92@UConverter[ecx*4]
$LN56@UConverter:
; Line 1791
	cmp	DWORD PTR _sourceChar$[ebp], 127	; 0000007fH
	jg	SHORT $LN55@UConverter
; Line 1792
	mov	eax, DWORD PTR _sourceChar$[ebp]
	mov	DWORD PTR _targetValue$[ebp], eax
; Line 1793
	mov	DWORD PTR _len$[ebp], 1
; Line 1794
	mov	al, BYTE PTR _cs0$37813[ebp]
	mov	BYTE PTR _cs$[ebp], al
; Line 1795
	mov	BYTE PTR _g$[ebp], 0
$LN55@UConverter:
; Line 1797
	jmp	$LN57@UConverter
$LN54@UConverter:
; Line 1799
	cmp	DWORD PTR _sourceChar$[ebp], 160	; 000000a0H
	jl	SHORT $LN53@UConverter
	cmp	DWORD PTR _sourceChar$[ebp], 255	; 000000ffH
	jg	SHORT $LN53@UConverter
; Line 1800
	mov	eax, DWORD PTR _sourceChar$[ebp]
	sub	eax, 128				; 00000080H
	mov	DWORD PTR _targetValue$[ebp], eax
; Line 1801
	mov	DWORD PTR _len$[ebp], 1
; Line 1802
	mov	al, BYTE PTR _cs0$37813[ebp]
	mov	BYTE PTR _cs$[ebp], al
; Line 1803
	mov	BYTE PTR _g$[ebp], 2
$LN53@UConverter:
; Line 1805
	jmp	$LN57@UConverter
$LN52@UConverter:
; Line 1807
	mov	eax, DWORD PTR _sourceChar$[ebp]
	sub	eax, 65377				; 0000ff61H
	cmp	eax, 62					; 0000003eH
	ja	$LN51@UConverter
; Line 1808
	mov	eax, DWORD PTR _converterData$[ebp]
	cmp	DWORD PTR [eax+64], 3
	jne	SHORT $LN50@UConverter
; Line 1811
	mov	eax, DWORD PTR _sourceChar$[ebp]
	sub	eax, 65344				; 0000ff40H
	mov	DWORD PTR _targetValue$[ebp], eax
; Line 1812
	mov	DWORD PTR _len$[ebp], 1
; Line 1813
	mov	al, BYTE PTR _cs0$37813[ebp]
	mov	BYTE PTR _cs$[ebp], al
	mov	ecx, DWORD PTR _pFromU2022State$[ebp]
	mov	dl, BYTE PTR _cs$[ebp]
	mov	BYTE PTR [ecx+1], dl
; Line 1814
	mov	BYTE PTR _g$[ebp], 1
	jmp	SHORT $LN51@UConverter
$LN50@UConverter:
; Line 1815
	mov	eax, DWORD PTR _converterData$[ebp]
	cmp	DWORD PTR [eax+64], 4
	jne	SHORT $LN51@UConverter
; Line 1818
	mov	eax, DWORD PTR _sourceChar$[ebp]
	sub	eax, 65216				; 0000fec0H
	mov	DWORD PTR _targetValue$[ebp], eax
; Line 1819
	mov	DWORD PTR _len$[ebp], 1
; Line 1821
	mov	eax, DWORD PTR _pFromU2022State$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _cs$[ebp], cl
; Line 1822
	movsx	eax, BYTE PTR _cs$[ebp]
	cmp	eax, 4
	jl	SHORT $LN47@UConverter
	movsx	eax, BYTE PTR _cs$[ebp]
	cmp	eax, 7
	jg	SHORT $LN47@UConverter
; Line 1824
	mov	BYTE PTR _cs$[ebp], 3
$LN47@UConverter:
; Line 1827
	mov	BYTE PTR _g$[ebp], 0
$LN51@UConverter:
; Line 1831
	jmp	$LN57@UConverter
$LN46@UConverter:
; Line 1834
	mov	eax, DWORD PTR _sourceChar$[ebp]
	push	eax
	call	?jisx201FromU@@YAII@Z			; jisx201FromU
	add	esp, 4
	mov	DWORD PTR _value$37811[ebp], eax
; Line 1835
	cmp	DWORD PTR _value$37811[ebp], 127	; 0000007fH
	ja	SHORT $LN45@UConverter
; Line 1836
	mov	eax, DWORD PTR _value$37811[ebp]
	mov	DWORD PTR _targetValue$[ebp], eax
; Line 1837
	mov	DWORD PTR _len$[ebp], 1
; Line 1838
	mov	al, BYTE PTR _cs0$37813[ebp]
	mov	BYTE PTR _cs$[ebp], al
; Line 1839
	mov	BYTE PTR _g$[ebp], 0
; Line 1840
	mov	BYTE PTR _useFallback$[ebp], 0
$LN45@UConverter:
; Line 1842
	jmp	$LN57@UConverter
$LN44@UConverter:
; Line 1848
	push	1
	movzx	eax, BYTE PTR _useFallback$[ebp]
	push	eax
	lea	ecx, DWORD PTR _value$37811[ebp]
	push	ecx
	mov	edx, DWORD PTR _sourceChar$[ebp]
	push	edx
	movsx	eax, BYTE PTR _cs0$37813[ebp]
	mov	ecx, DWORD PTR _converterData$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	push	edx
	call	?MBCS_FROM_UCHAR32_ISO2022@@YAHPAUUConverterSharedData@@HPAICH@Z ; MBCS_FROM_UCHAR32_ISO2022
	add	esp, 20					; 00000014H
	mov	DWORD PTR _len2$37812[ebp], eax
; Line 1849
	cmp	DWORD PTR _len2$37812[ebp], 2
	je	SHORT $LN42@UConverter
	cmp	DWORD PTR _len2$37812[ebp], -2		; fffffffeH
	jne	SHORT $LN43@UConverter
	cmp	DWORD PTR _len$[ebp], 0
	jne	SHORT $LN43@UConverter
$LN42@UConverter:
; Line 1850
	mov	eax, DWORD PTR _value$37811[ebp]
	push	eax
	call	?_2022FromSJIS@@YAII@Z			; _2022FromSJIS
	add	esp, 4
	mov	DWORD PTR _value$37811[ebp], eax
; Line 1851
	cmp	DWORD PTR _value$37811[ebp], 0
	je	SHORT $LN41@UConverter
; Line 1852
	mov	eax, DWORD PTR _value$37811[ebp]
	mov	DWORD PTR _targetValue$[ebp], eax
; Line 1853
	mov	eax, DWORD PTR _len2$37812[ebp]
	mov	DWORD PTR _len$[ebp], eax
; Line 1854
	mov	al, BYTE PTR _cs0$37813[ebp]
	mov	BYTE PTR _cs$[ebp], al
; Line 1855
	mov	BYTE PTR _g$[ebp], 0
; Line 1856
	mov	BYTE PTR _useFallback$[ebp], 0
$LN41@UConverter:
; Line 1858
	jmp	SHORT $LN40@UConverter
$LN43@UConverter:
; Line 1859
	cmp	DWORD PTR _len$[ebp], 0
	jne	SHORT $LN40@UConverter
	movsx	eax, BYTE PTR _useFallback$[ebp]
	test	eax, eax
	je	SHORT $LN40@UConverter
	mov	eax, DWORD PTR _sourceChar$[ebp]
	sub	eax, 65377				; 0000ff61H
	cmp	eax, 62					; 0000003eH
	ja	SHORT $LN40@UConverter
; Line 1860
	mov	eax, DWORD PTR _sourceChar$[ebp]
	movzx	ecx, WORD PTR _hwkana_fb[eax*2-130754]
	mov	DWORD PTR _targetValue$[ebp], ecx
; Line 1861
	mov	DWORD PTR _len$[ebp], -2		; fffffffeH
; Line 1862
	mov	al, BYTE PTR _cs0$37813[ebp]
	mov	BYTE PTR _cs$[ebp], al
; Line 1863
	mov	BYTE PTR _g$[ebp], 0
; Line 1864
	mov	BYTE PTR _useFallback$[ebp], 0
$LN40@UConverter:
; Line 1866
	jmp	$LN57@UConverter
$LN38@UConverter:
; Line 1872
	movzx	eax, BYTE PTR _useFallback$[ebp]
	push	eax
	lea	ecx, DWORD PTR _value$37811[ebp]
	push	ecx
	mov	edx, DWORD PTR _sourceChar$[ebp]
	push	edx
	movsx	eax, BYTE PTR _cs0$37813[ebp]
	mov	ecx, DWORD PTR _converterData$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	push	edx
	call	?MBCS_SINGLE_FROM_UCHAR32@@YAHPAUUConverterSharedData@@HPAIC@Z ; MBCS_SINGLE_FROM_UCHAR32
	add	esp, 16					; 00000010H
	mov	DWORD PTR _len2$37812[ebp], eax
; Line 1873
	cmp	DWORD PTR _len2$37812[ebp], 0
	je	SHORT $LN37@UConverter
	cmp	DWORD PTR _len2$37812[ebp], 0
	jge	SHORT $LN36@UConverter
	cmp	DWORD PTR _len$[ebp], 0
	jne	SHORT $LN37@UConverter
$LN36@UConverter:
	cmp	DWORD PTR _value$37811[ebp], 160	; 000000a0H
	jb	SHORT $LN37@UConverter
	cmp	DWORD PTR _value$37811[ebp], 255	; 000000ffH
	ja	SHORT $LN37@UConverter
; Line 1874
	mov	eax, DWORD PTR _value$37811[ebp]
	sub	eax, 128				; 00000080H
	mov	DWORD PTR _targetValue$[ebp], eax
; Line 1875
	mov	eax, DWORD PTR _len2$37812[ebp]
	mov	DWORD PTR _len$[ebp], eax
; Line 1876
	mov	al, BYTE PTR _cs0$37813[ebp]
	mov	BYTE PTR _cs$[ebp], al
; Line 1877
	mov	BYTE PTR _g$[ebp], 2
; Line 1878
	mov	BYTE PTR _useFallback$[ebp], 0
$LN37@UConverter:
; Line 1880
	jmp	$LN57@UConverter
$LN35@UConverter:
; Line 1886
	push	1
	movzx	eax, BYTE PTR _useFallback$[ebp]
	push	eax
	lea	ecx, DWORD PTR _value$37811[ebp]
	push	ecx
	mov	edx, DWORD PTR _sourceChar$[ebp]
	push	edx
	movsx	eax, BYTE PTR _cs0$37813[ebp]
	mov	ecx, DWORD PTR _converterData$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	push	edx
	call	?MBCS_FROM_UCHAR32_ISO2022@@YAHPAUUConverterSharedData@@HPAICH@Z ; MBCS_FROM_UCHAR32_ISO2022
	add	esp, 20					; 00000014H
	mov	DWORD PTR _len2$37812[ebp], eax
; Line 1887
	cmp	DWORD PTR _len2$37812[ebp], 2
	je	SHORT $LN33@UConverter
	cmp	DWORD PTR _len2$37812[ebp], -2		; fffffffeH
	jne	SHORT $LN57@UConverter
	cmp	DWORD PTR _len$[ebp], 0
	jne	SHORT $LN57@UConverter
$LN33@UConverter:
; Line 1888
	movsx	eax, BYTE PTR _cs0$37813[ebp]
	cmp	eax, 7
	jne	SHORT $LN32@UConverter
; Line 1894
	mov	eax, DWORD PTR _value$37811[ebp]
	push	eax
	call	?_2022FromGR94DBCS@@YAII@Z		; _2022FromGR94DBCS
	add	esp, 4
	mov	DWORD PTR _value$37811[ebp], eax
; Line 1895
	cmp	DWORD PTR _value$37811[ebp], 0
	jne	SHORT $LN32@UConverter
; Line 1896
	jmp	SHORT $LN57@UConverter
$LN32@UConverter:
; Line 1899
	mov	eax, DWORD PTR _value$37811[ebp]
	mov	DWORD PTR _targetValue$[ebp], eax
; Line 1900
	mov	eax, DWORD PTR _len2$37812[ebp]
	mov	DWORD PTR _len$[ebp], eax
; Line 1901
	mov	al, BYTE PTR _cs0$37813[ebp]
	mov	BYTE PTR _cs$[ebp], al
; Line 1902
	mov	BYTE PTR _g$[ebp], 0
; Line 1903
	mov	BYTE PTR _useFallback$[ebp], 0
$LN57@UConverter:
; Line 1907
	jmp	$LN60@UConverter
$LN59@UConverter:
; Line 1909
	cmp	DWORD PTR _len$[ebp], 0
	je	$LN30@UConverter
; Line 1910
	cmp	DWORD PTR _len$[ebp], 0
	jge	SHORT $LN29@UConverter
; Line 1911
	mov	eax, DWORD PTR _len$[ebp]
	neg	eax
	mov	DWORD PTR _len$[ebp], eax
$LN29@UConverter:
; Line 1913
	mov	DWORD PTR _outLen$[ebp], 0
; Line 1916
	mov	eax, DWORD PTR _pFromU2022State$[ebp]
	movsx	ecx, BYTE PTR [eax+4]
	cmp	ecx, 1
	jne	SHORT $LN28@UConverter
	movsx	eax, BYTE PTR _g$[ebp]
	test	eax, eax
	jne	SHORT $LN28@UConverter
; Line 1917
	mov	eax, DWORD PTR _outLen$[ebp]
	mov	BYTE PTR _buffer$[ebp+eax], 15		; 0000000fH
	mov	ecx, DWORD PTR _outLen$[ebp]
	add	ecx, 1
	mov	DWORD PTR _outLen$[ebp], ecx
; Line 1918
	mov	eax, DWORD PTR _pFromU2022State$[ebp]
	mov	BYTE PTR [eax+4], 0
$LN28@UConverter:
; Line 1922
	movsx	eax, BYTE PTR _cs$[ebp]
	movsx	ecx, BYTE PTR _g$[ebp]
	mov	edx, DWORD PTR _pFromU2022State$[ebp]
	movsx	ecx, BYTE PTR [edx+ecx]
	cmp	eax, ecx
	je	$LN27@UConverter
; Line 1923
	movsx	eax, BYTE PTR _cs$[ebp]
	movsx	ecx, BYTE PTR _escSeqCharsLen[eax]
	mov	DWORD PTR _escLen$37855[ebp], ecx
; Line 1924
	push	1
	movsx	eax, BYTE PTR _cs$[ebp]
	imul	eax, 6
	add	eax, OFFSET _escSeqChars
	push	eax
	call	_uprv_checkValidMemory
	add	esp, 8
	mov	ecx, DWORD PTR _escLen$37855[ebp]
	push	ecx
	movsx	edx, BYTE PTR _cs$[ebp]
	imul	edx, 6
	add	edx, OFFSET _escSeqChars
	push	edx
	mov	eax, DWORD PTR _outLen$[ebp]
	lea	ecx, DWORD PTR _buffer$[ebp+eax]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 1925
	mov	eax, DWORD PTR _outLen$[ebp]
	add	eax, DWORD PTR _escLen$37855[ebp]
	mov	DWORD PTR _outLen$[ebp], eax
; Line 1926
	movsx	eax, BYTE PTR _g$[ebp]
	mov	ecx, DWORD PTR _pFromU2022State$[ebp]
	mov	dl, BYTE PTR _cs$[ebp]
	mov	BYTE PTR [ecx+eax], dl
; Line 1929
	mov	DWORD PTR _choiceCount$[ebp], 0
$LN27@UConverter:
; Line 1933
	movsx	eax, BYTE PTR _g$[ebp]
	mov	ecx, DWORD PTR _pFromU2022State$[ebp]
	movsx	edx, BYTE PTR [ecx+4]
	cmp	eax, edx
	je	SHORT $LN26@UConverter
; Line 1934
	mov	al, BYTE PTR _g$[ebp]
	mov	BYTE PTR tv304[ebp], al
	cmp	BYTE PTR tv304[ebp], 1
	je	SHORT $LN23@UConverter
	jmp	SHORT $LN22@UConverter
$LN23@UConverter:
; Line 1937
	mov	eax, DWORD PTR _outLen$[ebp]
	mov	BYTE PTR _buffer$[ebp+eax], 14		; 0000000eH
	mov	ecx, DWORD PTR _outLen$[ebp]
	add	ecx, 1
	mov	DWORD PTR _outLen$[ebp], ecx
; Line 1938
	mov	eax, DWORD PTR _pFromU2022State$[ebp]
	mov	BYTE PTR [eax+4], 1
; Line 1939
	jmp	SHORT $LN26@UConverter
$LN22@UConverter:
; Line 1941
	mov	eax, DWORD PTR _outLen$[ebp]
	mov	BYTE PTR _buffer$[ebp+eax], 27		; 0000001bH
	mov	ecx, DWORD PTR _outLen$[ebp]
	add	ecx, 1
	mov	DWORD PTR _outLen$[ebp], ecx
; Line 1942
	mov	eax, DWORD PTR _outLen$[ebp]
	mov	BYTE PTR _buffer$[ebp+eax], 78		; 0000004eH
	mov	ecx, DWORD PTR _outLen$[ebp]
	add	ecx, 1
	mov	DWORD PTR _outLen$[ebp], ecx
$LN26@UConverter:
; Line 1949
	cmp	DWORD PTR _len$[ebp], 1
	jne	SHORT $LN21@UConverter
; Line 1950
	mov	eax, DWORD PTR _outLen$[ebp]
	mov	cl, BYTE PTR _targetValue$[ebp]
	mov	BYTE PTR _buffer$[ebp+eax], cl
	mov	edx, DWORD PTR _outLen$[ebp]
	add	edx, 1
	mov	DWORD PTR _outLen$[ebp], edx
; Line 1951
	jmp	SHORT $LN20@UConverter
$LN21@UConverter:
; Line 1952
	mov	eax, DWORD PTR _targetValue$[ebp]
	shr	eax, 8
	mov	ecx, DWORD PTR _outLen$[ebp]
	mov	BYTE PTR _buffer$[ebp+ecx], al
	mov	edx, DWORD PTR _outLen$[ebp]
	add	edx, 1
	mov	DWORD PTR _outLen$[ebp], edx
; Line 1953
	mov	eax, DWORD PTR _outLen$[ebp]
	mov	cl, BYTE PTR _targetValue$[ebp]
	mov	BYTE PTR _buffer$[ebp+eax], cl
	mov	edx, DWORD PTR _outLen$[ebp]
	add	edx, 1
	mov	DWORD PTR _outLen$[ebp], edx
$LN20@UConverter:
; Line 1955
	jmp	SHORT $LN19@UConverter
$LN30@UConverter:
; Line 1960
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 10			; 0000000aH
; Line 1961
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	ecx, DWORD PTR _sourceChar$[ebp]
	mov	DWORD PTR [eax+56], ecx
; Line 1962
	jmp	$LN79@UConverter
$LN19@UConverter:
; Line 1965
	cmp	DWORD PTR _sourceChar$[ebp], 13		; 0000000dH
	je	SHORT $LN17@UConverter
	cmp	DWORD PTR _sourceChar$[ebp], 10		; 0000000aH
	jne	SHORT $LN18@UConverter
$LN17@UConverter:
; Line 1967
	mov	eax, DWORD PTR _pFromU2022State$[ebp]
	mov	BYTE PTR [eax+2], 0
; Line 1968
	mov	DWORD PTR _choiceCount$[ebp], 0
$LN18@UConverter:
; Line 1972
	cmp	DWORD PTR _outLen$[ebp], 1
	jne	SHORT $LN16@UConverter
; Line 1973
	mov	eax, DWORD PTR _target$[ebp]
	mov	cl, BYTE PTR _buffer$[ebp]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 1
	mov	DWORD PTR _target$[ebp], edx
; Line 1974
	cmp	DWORD PTR _offsets$[ebp], 0
	je	SHORT $LN15@UConverter
; Line 1975
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _source$[ebp]
	sub	ecx, DWORD PTR [eax+8]
	sar	ecx, 1
	sub	ecx, 1
	mov	edx, DWORD PTR _offsets$[ebp]
	mov	DWORD PTR [edx], ecx
	mov	eax, DWORD PTR _offsets$[ebp]
	add	eax, 4
	mov	DWORD PTR _offsets$[ebp], eax
$LN15@UConverter:
; Line 1976
	jmp	$LN14@UConverter
$LN16@UConverter:
; Line 1977
	cmp	DWORD PTR _outLen$[ebp], 2
	jne	SHORT $LN13@UConverter
	mov	eax, DWORD PTR _target$[ebp]
	add	eax, 2
	cmp	eax, DWORD PTR _targetLimit$[ebp]
	ja	SHORT $LN13@UConverter
; Line 1978
	mov	eax, DWORD PTR _target$[ebp]
	mov	cl, BYTE PTR _buffer$[ebp]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 1
	mov	DWORD PTR _target$[ebp], edx
; Line 1979
	mov	eax, DWORD PTR _target$[ebp]
	mov	cl, BYTE PTR _buffer$[ebp+1]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 1
	mov	DWORD PTR _target$[ebp], edx
; Line 1980
	cmp	DWORD PTR _offsets$[ebp], 0
	je	SHORT $LN12@UConverter
; Line 1981
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _source$[ebp]
	sub	ecx, DWORD PTR [eax+8]
	sar	ecx, 1
	mov	edx, 65535				; 0000ffffH
	cmp	edx, DWORD PTR _sourceChar$[ebp]
	sbb	eax, eax
	neg	eax
	add	eax, 1
	sub	ecx, eax
	mov	DWORD PTR _sourceIndex$37877[ebp], ecx
; Line 1982
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _sourceIndex$37877[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
; Line 1983
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _sourceIndex$37877[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
$LN12@UConverter:
; Line 1985
	jmp	SHORT $LN14@UConverter
$LN13@UConverter:
; Line 1991
	mov	eax, DWORD PTR _err$[ebp]
	push	eax
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR _source$[ebp]
	sub	edx, DWORD PTR [ecx+8]
	sar	edx, 1
	mov	eax, 65535				; 0000ffffH
	cmp	eax, DWORD PTR _sourceChar$[ebp]
	sbb	ecx, ecx
	neg	ecx
	add	ecx, 1
	sub	edx, ecx
	push	edx
	lea	edx, DWORD PTR _offsets$[ebp]
	push	edx
	mov	eax, DWORD PTR _targetLimit$[ebp]
	push	eax
	lea	ecx, DWORD PTR _target$[ebp]
	push	ecx
	mov	edx, DWORD PTR _outLen$[ebp]
	push	edx
	lea	eax, DWORD PTR _buffer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cnv$[ebp]
	push	ecx
	call	?fromUWriteUInt8@@YAXPAUUConverter@@PBDHPAPAE1PAPAHHPAW4UErrorCode@@@Z ; fromUWriteUInt8
	add	esp, 32					; 00000020H
; Line 1992
	mov	eax, DWORD PTR _err$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN14@UConverter
; Line 1993
	jmp	SHORT $LN79@UConverter
$LN14@UConverter:
; Line 1997
	jmp	SHORT $LN9@UConverter
$LN78@UConverter:
; Line 1998
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
; Line 1999
	jmp	SHORT $LN79@UConverter
$LN9@UConverter:
; Line 2002
	jmp	$LN80@UConverter
$LN79@UConverter:
; Line 2017
	mov	eax, DWORD PTR _err$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_SUCCESS@@YACW4UErrorCode@@@Z		; U_SUCCESS
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	$LN8@UConverter
	mov	eax, DWORD PTR _pFromU2022State$[ebp]
	movsx	ecx, BYTE PTR [eax+4]
	test	ecx, ecx
	jne	SHORT $LN7@UConverter
	mov	eax, DWORD PTR _pFromU2022State$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	$LN8@UConverter
$LN7@UConverter:
	mov	eax, DWORD PTR _args$[ebp]
	movsx	ecx, BYTE PTR [eax+2]
	test	ecx, ecx
	je	$LN8@UConverter
	mov	eax, DWORD PTR _source$[ebp]
	cmp	eax, DWORD PTR _sourceLimit$[ebp]
	jb	$LN8@UConverter
	mov	eax, DWORD PTR _cnv$[ebp]
	cmp	DWORD PTR [eax+56], 0
	jne	$LN8@UConverter
; Line 2020
	mov	DWORD PTR _outLen$[ebp], 0
; Line 2022
	mov	eax, DWORD PTR _pFromU2022State$[ebp]
	movsx	ecx, BYTE PTR [eax+4]
	test	ecx, ecx
	je	SHORT $LN6@UConverter
; Line 2023
	mov	eax, DWORD PTR _outLen$[ebp]
	mov	BYTE PTR _buffer$[ebp+eax], 15		; 0000000fH
	mov	ecx, DWORD PTR _outLen$[ebp]
	add	ecx, 1
	mov	DWORD PTR _outLen$[ebp], ecx
; Line 2024
	mov	eax, DWORD PTR _pFromU2022State$[ebp]
	mov	BYTE PTR [eax+4], 0
$LN6@UConverter:
; Line 2027
	mov	eax, DWORD PTR _pFromU2022State$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN5@UConverter
; Line 2028
	movsx	eax, BYTE PTR _escSeqCharsLen
	mov	DWORD PTR _escLen$37891[ebp], eax
; Line 2029
	push	1
	push	OFFSET _escSeqChars
	call	_uprv_checkValidMemory
	add	esp, 8
	mov	eax, DWORD PTR _escLen$37891[ebp]
	push	eax
	push	OFFSET _escSeqChars
	mov	ecx, DWORD PTR _outLen$[ebp]
	lea	edx, DWORD PTR _buffer$[ebp+ecx]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 2030
	mov	eax, DWORD PTR _outLen$[ebp]
	add	eax, DWORD PTR _escLen$37891[ebp]
	mov	DWORD PTR _outLen$[ebp], eax
; Line 2031
	mov	eax, DWORD PTR _pFromU2022State$[ebp]
	mov	BYTE PTR [eax], 0
$LN5@UConverter:
; Line 2042
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _source$[ebp]
	sub	ecx, DWORD PTR [eax+8]
	sar	ecx, 1
	mov	DWORD PTR _sourceIndex$37888[ebp], ecx
; Line 2043
	cmp	DWORD PTR _sourceIndex$37888[ebp], 0
	jle	SHORT $LN4@UConverter
; Line 2044
	mov	eax, DWORD PTR _sourceIndex$37888[ebp]
	sub	eax, 1
	mov	DWORD PTR _sourceIndex$37888[ebp], eax
; Line 2047
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _sourceIndex$37888[ebp]
	movzx	eax, WORD PTR [ecx+edx*2]
	and	eax, -1024				; fffffc00H
	cmp	eax, 56320				; 0000dc00H
	jne	SHORT $LN3@UConverter
	cmp	DWORD PTR _sourceIndex$37888[ebp], 0
	je	SHORT $LN2@UConverter
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _sourceIndex$37888[ebp]
	movzx	eax, WORD PTR [ecx+edx*2-2]
	and	eax, -1024				; fffffc00H
	cmp	eax, 55296				; 0000d800H
	jne	SHORT $LN3@UConverter
$LN2@UConverter:
; Line 2048
	mov	eax, DWORD PTR _sourceIndex$37888[ebp]
	sub	eax, 1
	mov	DWORD PTR _sourceIndex$37888[ebp], eax
$LN3@UConverter:
; Line 2050
	jmp	SHORT $LN1@UConverter
$LN4@UConverter:
; Line 2051
	mov	DWORD PTR _sourceIndex$37888[ebp], -1
$LN1@UConverter:
; Line 2059
	mov	eax, DWORD PTR _err$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sourceIndex$37888[ebp]
	push	ecx
	lea	edx, DWORD PTR _offsets$[ebp]
	push	edx
	mov	eax, DWORD PTR _targetLimit$[ebp]
	push	eax
	lea	ecx, DWORD PTR _target$[ebp]
	push	ecx
	mov	edx, DWORD PTR _outLen$[ebp]
	push	edx
	lea	eax, DWORD PTR _buffer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cnv$[ebp]
	push	ecx
	call	?fromUWriteUInt8@@YAXPAUUConverter@@PBDHPAPAE1PAPAHHPAW4UErrorCode@@@Z ; fromUWriteUInt8
	add	esp, 32					; 00000020H
$LN8@UConverter:
; Line 2063
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _source$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 2064
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _target$[ebp]
	mov	DWORD PTR [eax+16], ecx
; Line 2065
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN91@UConverter
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 548				; 00000224H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN91@UConverter:
	DD	5
	DD	$LN90@UConverter
$LN90@UConverter:
	DD	-48					; ffffffd0H
	DD	4
	DD	$LN85@UConverter
	DD	-96					; ffffffa0H
	DD	4
	DD	$LN86@UConverter
	DD	-124					; ffffff84H
	DD	8
	DD	$LN87@UConverter
	DD	-168					; ffffff58H
	DD	10					; 0000000aH
	DD	$LN88@UConverter
	DD	-276					; fffffeecH
	DD	4
	DD	$LN89@UConverter
$LN89@UConverter:
	DB	118					; 00000076H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	117					; 00000075H
	DB	101					; 00000065H
	DB	0
$LN88@UConverter:
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	111					; 0000006fH
	DB	105					; 00000069H
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
$LN87@UConverter:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
$LN86@UConverter:
	DB	111					; 0000006fH
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	115					; 00000073H
	DB	0
$LN85@UConverter:
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	103					; 00000067H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	0
$LN92@UConverter:
	DD	$LN56@UConverter
	DD	$LN54@UConverter
	DD	$LN38@UConverter
	DD	$LN46@UConverter
	DD	$LN44@UConverter
	DD	$LN35@UConverter
	DD	$LN35@UConverter
	DD	$LN35@UConverter
	DD	$LN52@UConverter
?UConverter_fromUnicode_ISO_2022_JP_OFFSETS_LOGIC@@YAXPAUUConverterFromUnicodeArgs@@PAW4UErrorCode@@@Z ENDP ; UConverter_fromUnicode_ISO_2022_JP_OFFSETS_LOGIC
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?U_SUCCESS@@YACW4UErrorCode@@@Z
_TEXT	SEGMENT
_code$ = 8						; size = 4
?U_SUCCESS@@YACW4UErrorCode@@@Z PROC			; U_SUCCESS, COMDAT
; File d:\mozilla\intl\icu\source\common\unicode\utypes.h
; Line 699
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	cmp	DWORD PTR _code$[ebp], 0
	setle	al
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?U_SUCCESS@@YACW4UErrorCode@@@Z ENDP			; U_SUCCESS
_TEXT	ENDS
EXTRN	_ucnv_fromUWriteBytes_56:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?fromUWriteUInt8@@YAXPAUUConverter@@PBDHPAPAE1PAPAHHPAW4UErrorCode@@@Z
_TEXT	SEGMENT
_targetChars$ = -8					; size = 4
_cnv$ = 8						; size = 4
_bytes$ = 12						; size = 4
_length$ = 16						; size = 4
_target$ = 20						; size = 4
_targetLimit$ = 24					; size = 4
_offsets$ = 28						; size = 4
_sourceIndex$ = 32					; size = 4
_pErrorCode$ = 36					; size = 4
?fromUWriteUInt8@@YAXPAUUConverter@@PBDHPAPAE1PAPAHHPAW4UErrorCode@@@Z PROC ; fromUWriteUInt8, COMDAT
; File d:\mozilla\intl\icu\source\common\ucnv2022.cpp
; Line 431
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 432
	mov	eax, DWORD PTR _target$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _targetChars$[ebp], ecx
; Line 434
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sourceIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _offsets$[ebp]
	push	edx
	mov	eax, DWORD PTR _targetLimit$[ebp]
	push	eax
	lea	ecx, DWORD PTR _targetChars$[ebp]
	push	ecx
	mov	edx, DWORD PTR _length$[ebp]
	push	edx
	mov	eax, DWORD PTR _bytes$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cnv$[ebp]
	push	ecx
	call	_ucnv_fromUWriteBytes_56
	add	esp, 32					; 00000020H
; Line 435
	mov	eax, DWORD PTR _target$[ebp]
	mov	ecx, DWORD PTR _targetChars$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 437
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@fromUWrite
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN5@fromUWrite:
	DD	1
	DD	$LN4@fromUWrite
$LN4@fromUWrite:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN3@fromUWrite
$LN3@fromUWrite:
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	103					; 00000067H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	67					; 00000043H
	DB	104					; 00000068H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	115					; 00000073H
	DB	0
?fromUWriteUInt8@@YAXPAUUConverter@@PBDHPAPAE1PAPAHHPAW4UErrorCode@@@Z ENDP ; fromUWriteUInt8
_TEXT	ENDS
EXTRN	_ucnv_extSimpleMatchFromU_56:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?MBCS_FROM_UCHAR32_ISO2022@@YAHPAUUConverterSharedData@@HPAICH@Z
_TEXT	SEGMENT
_p$ = -68						; size = 4
_length$ = -56						; size = 4
_myValue$ = -44						; size = 4
_stage2Entry$ = -32					; size = 4
_table$ = -20						; size = 4
_cx$ = -8						; size = 4
_sharedData$ = 8					; size = 4
_c$ = 12						; size = 4
_value$ = 16						; size = 4
_useFallback$ = 20					; size = 1
_outputType$ = 24					; size = 4
?MBCS_FROM_UCHAR32_ISO2022@@YAHPAUUConverterSharedData@@HPAICH@Z PROC ; MBCS_FROM_UCHAR32_ISO2022, COMDAT
; Line 1111
	push	ebp
	mov	ebp, esp
	sub	esp, 264				; 00000108H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-264]
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1124
	cmp	DWORD PTR _c$[ebp], 65536		; 00010000H
	jl	SHORT $LN15@MBCS_FROM_
	mov	eax, DWORD PTR _sharedData$[ebp]
	movzx	ecx, BYTE PTR [eax+201]
	and	ecx, 1
	je	$LN16@MBCS_FROM_
$LN15@MBCS_FROM_:
; Line 1125
	mov	eax, DWORD PTR _sharedData$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	mov	DWORD PTR _table$[ebp], ecx
; Line 1126
	mov	eax, DWORD PTR _c$[ebp]
	sar	eax, 10					; 0000000aH
	mov	ecx, DWORD PTR _table$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	mov	eax, DWORD PTR _c$[ebp]
	sar	eax, 4
	and	eax, 63					; 0000003fH
	add	edx, eax
	mov	ecx, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR _stage2Entry$[ebp], edx
; Line 1128
	cmp	DWORD PTR _outputType$[ebp], 1
	jne	SHORT $LN14@MBCS_FROM_
; Line 1129
	movzx	eax, WORD PTR _stage2Entry$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _c$[ebp]
	and	ecx, 15					; 0000000fH
	add	eax, ecx
	mov	edx, DWORD PTR _sharedData$[ebp]
	mov	ecx, DWORD PTR [edx+188]
	movzx	edx, WORD PTR [ecx+eax*2]
	mov	DWORD PTR _myValue$[ebp], edx
; Line 1130
	cmp	DWORD PTR _myValue$[ebp], 255		; 000000ffH
	ja	SHORT $LN13@MBCS_FROM_
; Line 1131
	mov	DWORD PTR _length$[ebp], 1
; Line 1132
	jmp	SHORT $LN12@MBCS_FROM_
$LN13@MBCS_FROM_:
; Line 1133
	mov	DWORD PTR _length$[ebp], 2
$LN12@MBCS_FROM_:
; Line 1135
	jmp	SHORT $LN11@MBCS_FROM_
$LN14@MBCS_FROM_:
; Line 1136
	movzx	eax, WORD PTR _stage2Entry$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _c$[ebp]
	and	ecx, 15					; 0000000fH
	add	eax, ecx
	imul	eax, 3
	mov	edx, DWORD PTR _sharedData$[ebp]
	add	eax, DWORD PTR [edx+188]
	mov	DWORD PTR _p$[ebp], eax
; Line 1137
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax]
	shl	ecx, 16					; 00000010H
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+1]
	shl	eax, 8
	or	ecx, eax
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+2]
	or	ecx, eax
	mov	DWORD PTR _myValue$[ebp], ecx
; Line 1138
	cmp	DWORD PTR _myValue$[ebp], 255		; 000000ffH
	ja	SHORT $LN10@MBCS_FROM_
; Line 1139
	mov	DWORD PTR _length$[ebp], 1
	jmp	SHORT $LN11@MBCS_FROM_
$LN10@MBCS_FROM_:
; Line 1140
	cmp	DWORD PTR _myValue$[ebp], 65535		; 0000ffffH
	ja	SHORT $LN8@MBCS_FROM_
; Line 1141
	mov	DWORD PTR _length$[ebp], 2
; Line 1142
	jmp	SHORT $LN11@MBCS_FROM_
$LN8@MBCS_FROM_:
; Line 1143
	mov	DWORD PTR _length$[ebp], 3
$LN11@MBCS_FROM_:
; Line 1147
	mov	ecx, DWORD PTR _c$[ebp]
	and	ecx, 15					; 0000000fH
	add	ecx, 16					; 00000010H
	mov	eax, 1
	shl	eax, cl
	and	eax, DWORD PTR _stage2Entry$[ebp]
	je	SHORT $LN6@MBCS_FROM_
; Line 1149
	mov	eax, DWORD PTR _value$[ebp]
	mov	ecx, DWORD PTR _myValue$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 1150
	mov	eax, DWORD PTR _length$[ebp]
	jmp	SHORT $LN17@MBCS_FROM_
	jmp	SHORT $LN16@MBCS_FROM_
$LN6@MBCS_FROM_:
; Line 1151
	movsx	eax, BYTE PTR _useFallback$[ebp]
	test	eax, eax
	jne	SHORT $LN3@MBCS_FROM_
	mov	eax, DWORD PTR _c$[ebp]
	sub	eax, 57344				; 0000e000H
	cmp	eax, 6400				; 00001900H
	jb	SHORT $LN3@MBCS_FROM_
	mov	eax, DWORD PTR _c$[ebp]
	sub	eax, 983040				; 000f0000H
	cmp	eax, 131072				; 00020000H
	jae	SHORT $LN16@MBCS_FROM_
$LN3@MBCS_FROM_:
	cmp	DWORD PTR _myValue$[ebp], 0
	je	SHORT $LN16@MBCS_FROM_
; Line 1157
	mov	eax, DWORD PTR _value$[ebp]
	mov	ecx, DWORD PTR _myValue$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 1158
	mov	eax, DWORD PTR _length$[ebp]
	neg	eax
	jmp	SHORT $LN17@MBCS_FROM_
$LN16@MBCS_FROM_:
; Line 1162
	mov	eax, DWORD PTR _sharedData$[ebp]
	mov	ecx, DWORD PTR [eax+224]
	mov	DWORD PTR _cx$[ebp], ecx
; Line 1163
	cmp	DWORD PTR _cx$[ebp], 0
	je	SHORT $LN1@MBCS_FROM_
; Line 1164
	movzx	eax, BYTE PTR _useFallback$[ebp]
	push	eax
	mov	ecx, DWORD PTR _value$[ebp]
	push	ecx
	mov	edx, DWORD PTR _c$[ebp]
	push	edx
	mov	eax, DWORD PTR _cx$[ebp]
	push	eax
	call	_ucnv_extSimpleMatchFromU_56
	add	esp, 16					; 00000010H
	jmp	SHORT $LN17@MBCS_FROM_
$LN1@MBCS_FROM_:
; Line 1168
	xor	eax, eax
$LN17@MBCS_FROM_:
; Line 1169
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 264				; 00000108H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?MBCS_FROM_UCHAR32_ISO2022@@YAHPAUUConverterSharedData@@HPAICH@Z ENDP ; MBCS_FROM_UCHAR32_ISO2022
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?MBCS_SINGLE_FROM_UCHAR32@@YAHPAUUConverterSharedData@@HPAIC@Z
_TEXT	SEGMENT
tv129 = -220						; size = 4
_value$ = -20						; size = 4
_table$ = -8						; size = 4
_sharedData$ = 8					; size = 4
_c$ = 12						; size = 4
_retval$ = 16						; size = 4
_useFallback$ = 20					; size = 1
?MBCS_SINGLE_FROM_UCHAR32@@YAHPAUUConverterSharedData@@HPAIC@Z PROC ; MBCS_SINGLE_FROM_UCHAR32, COMDAT
; Line 1181
	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1185
	cmp	DWORD PTR _c$[ebp], 65536		; 00010000H
	jl	SHORT $LN5@MBCS_SINGL
	mov	eax, DWORD PTR _sharedData$[ebp]
	movzx	ecx, BYTE PTR [eax+201]
	and	ecx, 1
	jne	SHORT $LN5@MBCS_SINGL
; Line 1186
	xor	eax, eax
	jmp	$LN6@MBCS_SINGL
$LN5@MBCS_SINGL:
; Line 1189
	mov	eax, DWORD PTR _sharedData$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	mov	DWORD PTR _table$[ebp], ecx
; Line 1191
	mov	eax, DWORD PTR _c$[ebp]
	sar	eax, 10					; 0000000aH
	mov	ecx, DWORD PTR _table$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	mov	eax, DWORD PTR _c$[ebp]
	sar	eax, 4
	and	eax, 63					; 0000003fH
	add	edx, eax
	mov	ecx, DWORD PTR _table$[ebp]
	movzx	edx, WORD PTR [ecx+edx*2]
	mov	eax, DWORD PTR _c$[ebp]
	and	eax, 15					; 0000000fH
	add	edx, eax
	mov	ecx, DWORD PTR _sharedData$[ebp]
	mov	eax, DWORD PTR [ecx+188]
	movzx	ecx, WORD PTR [eax+edx*2]
	mov	DWORD PTR _value$[ebp], ecx
; Line 1193
	mov	eax, DWORD PTR _value$[ebp]
	and	eax, 255				; 000000ffH
	mov	ecx, DWORD PTR _retval$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 1194
	cmp	DWORD PTR _value$[ebp], 3840		; 00000f00H
	jl	SHORT $LN4@MBCS_SINGL
; Line 1195
	mov	eax, 1
	jmp	SHORT $LN6@MBCS_SINGL
	jmp	SHORT $LN6@MBCS_SINGL
$LN4@MBCS_SINGL:
; Line 1196
	movsx	eax, BYTE PTR _useFallback$[ebp]
	test	eax, eax
	je	SHORT $LN8@MBCS_SINGL
	xor	ecx, ecx
	cmp	DWORD PTR _value$[ebp], 2048		; 00000800H
	setge	cl
	mov	DWORD PTR tv129[ebp], ecx
	jmp	SHORT $LN9@MBCS_SINGL
$LN8@MBCS_SINGL:
	xor	edx, edx
	cmp	DWORD PTR _value$[ebp], 3072		; 00000c00H
	setge	dl
	mov	DWORD PTR tv129[ebp], edx
$LN9@MBCS_SINGL:
	cmp	DWORD PTR tv129[ebp], 0
	je	SHORT $LN2@MBCS_SINGL
; Line 1197
	or	eax, -1
	jmp	SHORT $LN6@MBCS_SINGL
; Line 1198
	jmp	SHORT $LN6@MBCS_SINGL
$LN2@MBCS_SINGL:
; Line 1199
	xor	eax, eax
$LN6@MBCS_SINGL:
; Line 1201
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?MBCS_SINGLE_FROM_UCHAR32@@YAHPAUUConverterSharedData@@HPAIC@Z ENDP ; MBCS_SINGLE_FROM_UCHAR32
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?_2022FromGR94DBCS@@YAII@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
?_2022FromGR94DBCS@@YAII@Z PROC				; _2022FromGR94DBCS, COMDAT
; Line 1210
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1213
	mov	eax, DWORD PTR _value$[ebp]
	sub	eax, 41377				; 0000a1a1H
	movzx	ecx, ax
	cmp	ecx, 23901				; 00005d5dH
	jg	SHORT $LN2@2022FromGR
	mov	eax, DWORD PTR _value$[ebp]
	sub	eax, 161				; 000000a1H
	movzx	ecx, al
	cmp	ecx, 93					; 0000005dH
	jg	SHORT $LN2@2022FromGR
; Line 1214
	mov	eax, DWORD PTR _value$[ebp]
	sub	eax, 32896				; 00008080H
	jmp	SHORT $LN3@2022FromGR
; Line 1215
	jmp	SHORT $LN3@2022FromGR
$LN2@2022FromGR:
; Line 1216
	xor	eax, eax
$LN3@2022FromGR:
; Line 1218
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?_2022FromGR94DBCS@@YAII@Z ENDP				; _2022FromGR94DBCS
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?jisx201FromU@@YAII@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
?jisx201FromU@@YAII@Z PROC				; jisx201FromU, COMDAT
; Line 1493
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1494
	cmp	DWORD PTR _value$[ebp], 127		; 0000007fH
	ja	SHORT $LN6@jisx201Fro
; Line 1495
	cmp	DWORD PTR _value$[ebp], 92		; 0000005cH
	je	SHORT $LN5@jisx201Fro
	cmp	DWORD PTR _value$[ebp], 126		; 0000007eH
	je	SHORT $LN5@jisx201Fro
; Line 1496
	mov	eax, DWORD PTR _value$[ebp]
	jmp	SHORT $LN7@jisx201Fro
$LN5@jisx201Fro:
; Line 1497
	jmp	SHORT $LN4@jisx201Fro
$LN6@jisx201Fro:
; Line 1498
	cmp	DWORD PTR _value$[ebp], 165		; 000000a5H
	jne	SHORT $LN3@jisx201Fro
; Line 1499
	mov	eax, 92					; 0000005cH
	jmp	SHORT $LN7@jisx201Fro
	jmp	SHORT $LN4@jisx201Fro
$LN3@jisx201Fro:
; Line 1500
	cmp	DWORD PTR _value$[ebp], 8254		; 0000203eH
	jne	SHORT $LN4@jisx201Fro
; Line 1501
	mov	eax, 126				; 0000007eH
	jmp	SHORT $LN7@jisx201Fro
$LN4@jisx201Fro:
; Line 1503
	mov	eax, 65534				; 0000fffeH
$LN7@jisx201Fro:
; Line 1504
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?jisx201FromU@@YAII@Z ENDP				; jisx201FromU
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?_2022FromSJIS@@YAII@Z
_TEXT	SEGMENT
_trail$ = -5						; size = 1
_value$ = 8						; size = 4
?_2022FromSJIS@@YAII@Z PROC				; _2022FromSJIS, COMDAT
; Line 1512
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1515
	cmp	DWORD PTR _value$[ebp], 61436		; 0000effcH
	jbe	SHORT $LN7@2022FromSJ
; Line 1516
	xor	eax, eax
	jmp	$LN8@2022FromSJ
$LN7@2022FromSJ:
; Line 1519
	mov	al, BYTE PTR _value$[ebp]
	mov	BYTE PTR _trail$[ebp], al
; Line 1521
	mov	eax, DWORD PTR _value$[ebp]
	and	eax, 65280				; 0000ff00H
	mov	DWORD PTR _value$[ebp], eax
; Line 1522
	cmp	DWORD PTR _value$[ebp], 40704		; 00009f00H
	ja	SHORT $LN6@2022FromSJ
; Line 1523
	mov	eax, DWORD PTR _value$[ebp]
	sub	eax, 28672				; 00007000H
	mov	DWORD PTR _value$[ebp], eax
; Line 1524
	jmp	SHORT $LN5@2022FromSJ
$LN6@2022FromSJ:
; Line 1525
	mov	eax, DWORD PTR _value$[ebp]
	sub	eax, 45056				; 0000b000H
	mov	DWORD PTR _value$[ebp], eax
$LN5@2022FromSJ:
; Line 1527
	mov	eax, DWORD PTR _value$[ebp]
	shl	eax, 1
	mov	DWORD PTR _value$[ebp], eax
; Line 1529
	movzx	eax, BYTE PTR _trail$[ebp]
	cmp	eax, 158				; 0000009eH
	jg	SHORT $LN4@2022FromSJ
; Line 1530
	mov	eax, DWORD PTR _value$[ebp]
	sub	eax, 256				; 00000100H
	mov	DWORD PTR _value$[ebp], eax
; Line 1531
	movzx	eax, BYTE PTR _trail$[ebp]
	cmp	eax, 126				; 0000007eH
	jg	SHORT $LN3@2022FromSJ
; Line 1532
	movzx	eax, BYTE PTR _trail$[ebp]
	sub	eax, 31					; 0000001fH
	or	eax, DWORD PTR _value$[ebp]
	mov	DWORD PTR _value$[ebp], eax
; Line 1533
	jmp	SHORT $LN2@2022FromSJ
$LN3@2022FromSJ:
; Line 1534
	movzx	eax, BYTE PTR _trail$[ebp]
	sub	eax, 32					; 00000020H
	or	eax, DWORD PTR _value$[ebp]
	mov	DWORD PTR _value$[ebp], eax
$LN2@2022FromSJ:
; Line 1536
	jmp	SHORT $LN1@2022FromSJ
$LN4@2022FromSJ:
; Line 1537
	movzx	eax, BYTE PTR _trail$[ebp]
	sub	eax, 126				; 0000007eH
	or	eax, DWORD PTR _value$[ebp]
	mov	DWORD PTR _value$[ebp], eax
$LN1@2022FromSJ:
; Line 1539
	mov	eax, DWORD PTR _value$[ebp]
$LN8@2022FromSJ:
; Line 1540
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?_2022FromSJIS@@YAII@Z ENDP				; _2022FromSJIS
_TEXT	ENDS
EXTRN	_ucnv_MBCSSimpleGetNextUChar_56:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?UConverter_toUnicode_ISO_2022_JP_OFFSETS_LOGIC@@YAXPAUUConverterToUnicodeArgs@@PAW4UErrorCode@@@Z
_TEXT	SEGMENT
tv199 = -376						; size = 4
tv94 = -376						; size = 4
_trailByte$37981 = -173					; size = 1
_trailIsOk$37980 = -164					; size = 4
_leadIsOk$37979 = -152					; size = 4
_toULengthBefore$37942 = -137				; size = 1
_mySourceBefore$37941 = -128				; size = 4
_cs$ = -116						; size = 4
_pToU2022State$ = -104					; size = 4
_myData$ = -92						; size = 4
_tmpSourceChar$ = -80					; size = 4
_mySourceChar$ = -68					; size = 4
_targetUniChar$ = -56					; size = 4
_mySourceLimit$ = -44					; size = 4
_myTarget$ = -32					; size = 4
_mySource$ = -20					; size = 4
_tempBuf$ = -8						; size = 2
_args$ = 8						; size = 4
_err$ = 12						; size = 4
?UConverter_toUnicode_ISO_2022_JP_OFFSETS_LOGIC@@YAXPAUUConverterToUnicodeArgs@@PAW4UErrorCode@@@Z PROC ; UConverter_toUnicode_ISO_2022_JP_OFFSETS_LOGIC, COMDAT
; Line 2071
	push	ebp
	mov	ebp, esp
	sub	esp, 376				; 00000178H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-376]
	mov	ecx, 94					; 0000005eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2073
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _mySource$[ebp], ecx
; Line 2074
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _myTarget$[ebp], ecx
; Line 2075
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _mySourceLimit$[ebp], ecx
; Line 2076
	mov	DWORD PTR _targetUniChar$[ebp], 0
; Line 2077
	mov	DWORD PTR _mySourceChar$[ebp], 0
; Line 2078
	mov	DWORD PTR _tmpSourceChar$[ebp], 0
; Line 2083
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _myData$[ebp], edx
; Line 2084
	mov	eax, DWORD PTR _myData$[ebp]
	add	eax, 48					; 00000030H
	mov	DWORD PTR _pToU2022State$[ebp], eax
; Line 2086
	mov	eax, DWORD PTR _myData$[ebp]
	cmp	DWORD PTR [eax+60], 0
	je	SHORT $LN60@UConverter@2
; Line 2088
	jmp	$escape$37917
	jmp	$escape$37917
	jmp	SHORT $LN55@UConverter@2
$LN60@UConverter@2:
; Line 2089
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	movsx	edx, BYTE PTR [ecx+36]
	cmp	edx, 1
	jne	SHORT $LN55@UConverter@2
	mov	eax, DWORD PTR _mySource$[ebp]
	cmp	eax, DWORD PTR _mySourceLimit$[ebp]
	jae	SHORT $LN55@UConverter@2
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _myTarget$[ebp]
	cmp	ecx, DWORD PTR [eax+20]
	jae	SHORT $LN55@UConverter@2
; Line 2091
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	movzx	edx, BYTE PTR [ecx+37]
	mov	DWORD PTR _mySourceChar$[ebp], edx
; Line 2092
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx+36], 0
; Line 2093
	mov	eax, DWORD PTR _pToU2022State$[ebp]
	movsx	ecx, BYTE PTR [eax+4]
	mov	edx, DWORD PTR _pToU2022State$[ebp]
	movsx	eax, BYTE PTR [edx+ecx]
	mov	DWORD PTR _cs$[ebp], eax
; Line 2094
	mov	DWORD PTR _targetUniChar$[ebp], 65535	; 0000ffffH
; Line 2095
	jmp	$getTrailByte$37922
	jmp	$getTrailByte$37922
$LN55@UConverter@2:
; Line 2098
	mov	eax, DWORD PTR _mySource$[ebp]
	cmp	eax, DWORD PTR _mySourceLimit$[ebp]
	jae	$endloop$37998
; Line 2100
	mov	DWORD PTR _targetUniChar$[ebp], 65535	; 0000ffffH
; Line 2102
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _myTarget$[ebp]
	cmp	ecx, DWORD PTR [eax+20]
	jae	$LN53@UConverter@2
; Line 2104
	mov	eax, DWORD PTR _mySource$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _mySourceChar$[ebp], ecx
	mov	edx, DWORD PTR _mySource$[ebp]
	add	edx, 1
	mov	DWORD PTR _mySource$[ebp], edx
; Line 2106
	mov	eax, DWORD PTR _mySourceChar$[ebp]
	mov	DWORD PTR tv94[ebp], eax
	mov	ecx, DWORD PTR tv94[ebp]
	sub	ecx, 10					; 0000000aH
	mov	DWORD PTR tv94[ebp], ecx
	cmp	DWORD PTR tv94[ebp], 17			; 00000011H
	ja	$LN38@UConverter@2
	mov	edx, DWORD PTR tv94[ebp]
	movzx	eax, BYTE PTR $LN64@UConverter@2[edx]
	jmp	DWORD PTR $LN69@UConverter@2[eax*4]
$LN50@UConverter@2:
; Line 2108
	mov	eax, DWORD PTR _myData$[ebp]
	cmp	DWORD PTR [eax+64], 3
	jne	SHORT $LN49@UConverter@2
; Line 2109
	mov	eax, DWORD PTR _pToU2022State$[ebp]
	mov	BYTE PTR [eax+4], 0
; Line 2110
	jmp	SHORT $LN55@UConverter@2
; Line 2111
	jmp	SHORT $LN47@UConverter@2
$LN49@UConverter@2:
; Line 2113
	mov	eax, DWORD PTR _myData$[ebp]
	mov	BYTE PTR [eax+68], 0
; Line 2114
	jmp	$LN51@UConverter@2
$LN47@UConverter@2:
; Line 2118
	mov	eax, DWORD PTR _myData$[ebp]
	cmp	DWORD PTR [eax+64], 3
	jne	SHORT $LN46@UConverter@2
; Line 2120
	mov	eax, DWORD PTR _pToU2022State$[ebp]
	mov	BYTE PTR [eax+1], 8
; Line 2121
	mov	eax, DWORD PTR _pToU2022State$[ebp]
	mov	BYTE PTR [eax+4], 1
; Line 2122
	jmp	$LN55@UConverter@2
; Line 2123
	jmp	SHORT $LN44@UConverter@2
$LN46@UConverter@2:
; Line 2125
	mov	eax, DWORD PTR _myData$[ebp]
	mov	BYTE PTR [eax+68], 0
; Line 2126
	jmp	$LN51@UConverter@2
$LN44@UConverter@2:
; Line 2130
	mov	eax, DWORD PTR _mySource$[ebp]
	sub	eax, 1
	mov	DWORD PTR _mySource$[ebp], eax
$escape$37917:
; Line 2133
	mov	eax, DWORD PTR _mySource$[ebp]
	mov	DWORD PTR _mySourceBefore$37941[ebp], eax
; Line 2134
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	dl, BYTE PTR [ecx+36]
	mov	BYTE PTR _toULengthBefore$37942[ebp], dl
; Line 2137
	mov	eax, DWORD PTR _err$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _mySourceLimit$[ebp]
	push	ecx
	lea	edx, DWORD PTR _mySource$[ebp]
	push	edx
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	?changeState_2022@@YAXPAUUConverter@@PAPBDPBDW4Variant2022@@PAW4UErrorCode@@@Z ; changeState_2022
	add	esp, 20					; 00000014H
; Line 2140
	mov	eax, DWORD PTR _myData$[ebp]
	cmp	DWORD PTR [eax+64], 0
	jne	SHORT $LN43@UConverter@2
	mov	eax, DWORD PTR _myData$[ebp]
	cmp	DWORD PTR [eax+60], 0
	jne	SHORT $LN43@UConverter@2
	mov	eax, DWORD PTR _err$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_SUCCESS@@YACW4UErrorCode@@@Z		; U_SUCCESS
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN43@UConverter@2
	mov	eax, DWORD PTR _myData$[ebp]
	movsx	ecx, BYTE PTR [eax+68]
	test	ecx, ecx
	je	SHORT $LN43@UConverter@2
; Line 2141
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 18			; 00000012H
; Line 2142
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+256], 2
; Line 2143
	movsx	eax, BYTE PTR _toULengthBefore$37942[ebp]
	mov	ecx, DWORD PTR _mySource$[ebp]
	sub	ecx, DWORD PTR _mySourceBefore$37941[ebp]
	add	eax, ecx
	mov	edx, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	mov	BYTE PTR [ecx+36], al
$LN43@UConverter@2:
; Line 2148
	mov	eax, DWORD PTR _err$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN42@UConverter@2
; Line 2149
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _myTarget$[ebp]
	mov	DWORD PTR [eax+16], ecx
; Line 2150
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _mySource$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 2151
	mov	eax, DWORD PTR _myData$[ebp]
	mov	BYTE PTR [eax+68], 0
; Line 2152
	jmp	$LN61@UConverter@2
$LN42@UConverter@2:
; Line 2155
	mov	eax, DWORD PTR _myData$[ebp]
	cmp	DWORD PTR [eax+60], 0
	jne	SHORT $LN41@UConverter@2
; Line 2156
	mov	eax, DWORD PTR _myData$[ebp]
	mov	BYTE PTR [eax+68], 1
$LN41@UConverter@2:
; Line 2158
	jmp	$LN55@UConverter@2
$LN40@UConverter@2:
; Line 2166
	mov	eax, DWORD PTR _pToU2022State$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN39@UConverter@2
	mov	eax, DWORD PTR _pToU2022State$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 3
	je	SHORT $LN39@UConverter@2
; Line 2167
	mov	eax, DWORD PTR _pToU2022State$[ebp]
	mov	BYTE PTR [eax], 0
$LN39@UConverter@2:
; Line 2169
	mov	eax, DWORD PTR _pToU2022State$[ebp]
	mov	BYTE PTR [eax+2], 0
; Line 2170
	mov	eax, DWORD PTR _pToU2022State$[ebp]
	mov	BYTE PTR [eax+4], 0
$LN38@UConverter@2:
; Line 2174
	mov	eax, DWORD PTR _myData$[ebp]
	mov	BYTE PTR [eax+68], 0
; Line 2175
	mov	eax, DWORD PTR _pToU2022State$[ebp]
	movsx	ecx, BYTE PTR [eax+4]
	mov	edx, DWORD PTR _pToU2022State$[ebp]
	movsx	eax, BYTE PTR [edx+ecx]
	mov	DWORD PTR _cs$[ebp], eax
; Line 2178
	mov	eax, DWORD PTR _mySourceChar$[ebp]
	sub	eax, 161				; 000000a1H
	movzx	ecx, al
	cmp	ecx, 62					; 0000003eH
	jg	SHORT $LN37@UConverter@2
	mov	eax, DWORD PTR _myData$[ebp]
	cmp	DWORD PTR [eax+64], 4
	jne	SHORT $LN37@UConverter@2
	cmp	DWORD PTR _cs$[ebp], 4
	jl	SHORT $LN36@UConverter@2
	cmp	DWORD PTR _cs$[ebp], 7
	jle	SHORT $LN37@UConverter@2
$LN36@UConverter@2:
; Line 2180
	mov	eax, DWORD PTR _mySourceChar$[ebp]
	add	eax, 65216				; 0000fec0H
	mov	DWORD PTR _targetUniChar$[ebp], eax
; Line 2183
	mov	eax, DWORD PTR _pToU2022State$[ebp]
	movsx	ecx, BYTE PTR [eax+4]
	cmp	ecx, 2
	jl	SHORT $LN35@UConverter@2
; Line 2184
	mov	eax, DWORD PTR _pToU2022State$[ebp]
	mov	ecx, DWORD PTR _pToU2022State$[ebp]
	mov	dl, BYTE PTR [ecx+5]
	mov	BYTE PTR [eax+4], dl
$LN35@UConverter@2:
; Line 2185
	jmp	$LN51@UConverter@2
$LN37@UConverter@2:
; Line 2186
	mov	eax, DWORD PTR _cs$[ebp]
	mov	DWORD PTR tv199[ebp], eax
	cmp	DWORD PTR tv199[ebp], 8
	ja	$LN21@UConverter@2
	mov	ecx, DWORD PTR tv199[ebp]
	jmp	DWORD PTR $LN70@UConverter@2[ecx*4]
$LN31@UConverter@2:
; Line 2188
	cmp	DWORD PTR _mySourceChar$[ebp], 127	; 0000007fH
	ja	SHORT $LN30@UConverter@2
; Line 2189
	mov	eax, DWORD PTR _mySourceChar$[ebp]
	mov	DWORD PTR _targetUniChar$[ebp], eax
$LN30@UConverter@2:
; Line 2191
	jmp	$LN51@UConverter@2
$LN29@UConverter@2:
; Line 2193
	cmp	DWORD PTR _mySourceChar$[ebp], 127	; 0000007fH
	ja	SHORT $LN28@UConverter@2
; Line 2194
	mov	eax, DWORD PTR _mySourceChar$[ebp]
	add	eax, 128				; 00000080H
	mov	DWORD PTR _targetUniChar$[ebp], eax
$LN28@UConverter@2:
; Line 2197
	mov	eax, DWORD PTR _pToU2022State$[ebp]
	mov	ecx, DWORD PTR _pToU2022State$[ebp]
	mov	dl, BYTE PTR [ecx+5]
	mov	BYTE PTR [eax+4], dl
; Line 2198
	jmp	$LN51@UConverter@2
$LN27@UConverter@2:
; Line 2200
	cmp	DWORD PTR _mySourceChar$[ebp], 127	; 0000007fH
	ja	SHORT $LN26@UConverter@2
; Line 2205
	mov	eax, DWORD PTR _cs$[ebp]
	mov	ecx, DWORD PTR _myData$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _mySourceChar$[ebp]
	add	eax, 128				; 00000080H
	movzx	ecx, al
	mov	edx, DWORD PTR [edx+36]
	movzx	eax, WORD PTR [edx+ecx*4]
	mov	DWORD PTR _targetUniChar$[ebp], eax
$LN26@UConverter@2:
; Line 2208
	mov	eax, DWORD PTR _pToU2022State$[ebp]
	mov	ecx, DWORD PTR _pToU2022State$[ebp]
	mov	dl, BYTE PTR [ecx+5]
	mov	BYTE PTR [eax+4], dl
; Line 2209
	jmp	$LN51@UConverter@2
$LN25@UConverter@2:
; Line 2211
	cmp	DWORD PTR _mySourceChar$[ebp], 127	; 0000007fH
	ja	SHORT $LN24@UConverter@2
; Line 2212
	mov	eax, DWORD PTR _mySourceChar$[ebp]
	push	eax
	call	?jisx201ToU@@YAII@Z			; jisx201ToU
	add	esp, 4
	mov	DWORD PTR _targetUniChar$[ebp], eax
$LN24@UConverter@2:
; Line 2214
	jmp	$LN51@UConverter@2
$LN23@UConverter@2:
; Line 2216
	mov	eax, DWORD PTR _mySourceChar$[ebp]
	sub	eax, 33					; 00000021H
	movzx	ecx, al
	cmp	ecx, 62					; 0000003eH
	jg	SHORT $LN22@UConverter@2
; Line 2218
	mov	eax, DWORD PTR _mySourceChar$[ebp]
	add	eax, 65344				; 0000ff40H
	mov	DWORD PTR _targetUniChar$[ebp], eax
$LN22@UConverter@2:
; Line 2220
	jmp	$LN51@UConverter@2
$LN21@UConverter@2:
; Line 2223
	mov	eax, DWORD PTR _mySource$[ebp]
	cmp	eax, DWORD PTR _mySourceLimit$[ebp]
	jae	$LN20@UConverter@2
$getTrailByte$37922:
; Line 2227
	mov	eax, DWORD PTR _mySource$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _trailByte$37981[ebp], cl
; Line 2238
	mov	eax, DWORD PTR _mySourceChar$[ebp]
	sub	eax, 33					; 00000021H
	movzx	ecx, al
	xor	edx, edx
	cmp	ecx, 93					; 0000005dH
	setle	dl
	mov	DWORD PTR _leadIsOk$37979[ebp], edx
; Line 2239
	movzx	eax, BYTE PTR _trailByte$37981[ebp]
	sub	eax, 33					; 00000021H
	movzx	ecx, al
	xor	edx, edx
	cmp	ecx, 93					; 0000005dH
	setle	dl
	mov	DWORD PTR _trailIsOk$37980[ebp], edx
; Line 2240
	cmp	DWORD PTR _leadIsOk$37979[ebp], 0
	je	$LN19@UConverter@2
	cmp	DWORD PTR _trailIsOk$37980[ebp], 0
	je	$LN19@UConverter@2
; Line 2241
	mov	eax, DWORD PTR _mySource$[ebp]
	add	eax, 1
	mov	DWORD PTR _mySource$[ebp], eax
; Line 2242
	mov	eax, DWORD PTR _mySourceChar$[ebp]
	shl	eax, 8
	movzx	ecx, BYTE PTR _trailByte$37981[ebp]
	or	eax, ecx
	mov	DWORD PTR _tmpSourceChar$[ebp], eax
; Line 2243
	cmp	DWORD PTR _cs$[ebp], 4
	jne	SHORT $LN18@UConverter@2
; Line 2244
	lea	eax, DWORD PTR _tempBuf$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _trailByte$37981[ebp]
	push	ecx
	movzx	edx, BYTE PTR _mySourceChar$[ebp]
	push	edx
	call	?_2022ToSJIS@@YAXEEQAD@Z		; _2022ToSJIS
	add	esp, 12					; 0000000cH
; Line 2245
	mov	eax, DWORD PTR _tmpSourceChar$[ebp]
	mov	DWORD PTR _mySourceChar$[ebp], eax
; Line 2246
	jmp	SHORT $LN17@UConverter@2
$LN18@UConverter@2:
; Line 2248
	mov	eax, DWORD PTR _tmpSourceChar$[ebp]
	mov	DWORD PTR _mySourceChar$[ebp], eax
; Line 2249
	cmp	DWORD PTR _cs$[ebp], 7
	jne	SHORT $LN16@UConverter@2
; Line 2250
	mov	eax, DWORD PTR _tmpSourceChar$[ebp]
	add	eax, 32896				; 00008080H
	mov	DWORD PTR _tmpSourceChar$[ebp], eax
$LN16@UConverter@2:
; Line 2252
	mov	eax, DWORD PTR _tmpSourceChar$[ebp]
	shr	eax, 8
	mov	BYTE PTR _tempBuf$[ebp], al
; Line 2253
	mov	al, BYTE PTR _tmpSourceChar$[ebp]
	mov	BYTE PTR _tempBuf$[ebp+1], al
$LN17@UConverter@2:
; Line 2255
	push	0
	push	2
	lea	eax, DWORD PTR _tempBuf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cs$[ebp]
	mov	edx, DWORD PTR _myData$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	push	eax
	call	_ucnv_MBCSSimpleGetNextUChar_56
	add	esp, 16					; 00000010H
	mov	DWORD PTR _targetUniChar$[ebp], eax
	jmp	SHORT $LN15@UConverter@2
$LN19@UConverter@2:
; Line 2256
	cmp	DWORD PTR _trailIsOk$37980[ebp], 0
	jne	SHORT $LN15@UConverter@2
	movzx	eax, BYTE PTR _trailByte$37981[ebp]
	cmp	eax, 32					; 00000020H
	jge	SHORT $LN13@UConverter@2
	movzx	ecx, BYTE PTR _trailByte$37981[ebp]
	mov	eax, 1
	shl	eax, cl
	and	eax, 134266880				; 0800c000H
	jne	SHORT $LN15@UConverter@2
$LN13@UConverter@2:
; Line 2258
	mov	eax, DWORD PTR _mySource$[ebp]
	add	eax, 1
	mov	DWORD PTR _mySource$[ebp], eax
; Line 2260
	mov	eax, DWORD PTR _mySourceChar$[ebp]
	shl	eax, 8
	or	eax, 65536				; 00010000H
	movzx	ecx, BYTE PTR _trailByte$37981[ebp]
	or	eax, ecx
	mov	DWORD PTR _mySourceChar$[ebp], eax
$LN15@UConverter@2:
; Line 2262
	jmp	SHORT $LN51@UConverter@2
$LN20@UConverter@2:
; Line 2263
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	dl, BYTE PTR _mySourceChar$[ebp]
	mov	BYTE PTR [ecx+37], dl
; Line 2264
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx+36], 1
; Line 2265
	jmp	$endloop$37998
	jmp	$endloop$37998
$LN51@UConverter@2:
; Line 2270
	cmp	DWORD PTR _targetUniChar$[ebp], 65534	; 0000fffeH
	jae	SHORT $LN10@UConverter@2
; Line 2271
	mov	eax, DWORD PTR _args$[ebp]
	cmp	DWORD PTR [eax+24], 0
	je	SHORT $LN9@UConverter@2
; Line 2272
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _mySource$[ebp]
	sub	ecx, DWORD PTR [eax+8]
	mov	edx, 255				; 000000ffH
	cmp	edx, DWORD PTR _mySourceChar$[ebp]
	sbb	eax, eax
	neg	eax
	add	eax, 1
	sub	ecx, eax
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR _myTarget$[ebp]
	sub	eax, DWORD PTR [edx+16]
	sar	eax, 1
	mov	edx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [edx+24]
	mov	DWORD PTR [edx+eax*4], ecx
$LN9@UConverter@2:
; Line 2274
	mov	eax, DWORD PTR _myTarget$[ebp]
	mov	cx, WORD PTR _targetUniChar$[ebp]
	mov	WORD PTR [eax], cx
	mov	edx, DWORD PTR _myTarget$[ebp]
	add	edx, 2
	mov	DWORD PTR _myTarget$[ebp], edx
	jmp	$LN8@UConverter@2
$LN10@UConverter@2:
; Line 2276
	cmp	DWORD PTR _targetUniChar$[ebp], 65535	; 0000ffffH
	jbe	$LN7@UConverter@2
; Line 2278
	mov	eax, DWORD PTR _targetUniChar$[ebp]
	sub	eax, 65536				; 00010000H
	mov	DWORD PTR _targetUniChar$[ebp], eax
; Line 2279
	mov	eax, DWORD PTR _targetUniChar$[ebp]
	shr	eax, 10					; 0000000aH
	movzx	ecx, ax
	add	ecx, 55296				; 0000d800H
	mov	edx, DWORD PTR _myTarget$[ebp]
	mov	WORD PTR [edx], cx
; Line 2280
	mov	eax, DWORD PTR _args$[ebp]
	cmp	DWORD PTR [eax+24], 0
	je	SHORT $LN6@UConverter@2
; Line 2281
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _mySource$[ebp]
	sub	ecx, DWORD PTR [eax+8]
	mov	edx, 255				; 000000ffH
	cmp	edx, DWORD PTR _mySourceChar$[ebp]
	sbb	eax, eax
	neg	eax
	add	eax, 1
	sub	ecx, eax
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR _myTarget$[ebp]
	sub	eax, DWORD PTR [edx+16]
	sar	eax, 1
	mov	edx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [edx+24]
	mov	DWORD PTR [edx+eax*4], ecx
$LN6@UConverter@2:
; Line 2283
	mov	eax, DWORD PTR _myTarget$[ebp]
	add	eax, 2
	mov	DWORD PTR _myTarget$[ebp], eax
; Line 2284
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _myTarget$[ebp]
	cmp	ecx, DWORD PTR [eax+20]
	jae	SHORT $LN5@UConverter@2
; Line 2285
	mov	eax, DWORD PTR _targetUniChar$[ebp]
	and	eax, 1023				; 000003ffH
	movzx	ecx, ax
	add	ecx, 56320				; 0000dc00H
	mov	edx, DWORD PTR _myTarget$[ebp]
	mov	WORD PTR [edx], cx
; Line 2286
	mov	eax, DWORD PTR _args$[ebp]
	cmp	DWORD PTR [eax+24], 0
	je	SHORT $LN4@UConverter@2
; Line 2287
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _mySource$[ebp]
	sub	ecx, DWORD PTR [eax+8]
	mov	edx, 255				; 000000ffH
	cmp	edx, DWORD PTR _mySourceChar$[ebp]
	sbb	eax, eax
	neg	eax
	add	eax, 1
	sub	ecx, eax
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR _myTarget$[ebp]
	sub	eax, DWORD PTR [edx+16]
	sar	eax, 1
	mov	edx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [edx+24]
	mov	DWORD PTR [edx+eax*4], ecx
$LN4@UConverter@2:
; Line 2289
	mov	eax, DWORD PTR _myTarget$[ebp]
	add	eax, 2
	mov	DWORD PTR _myTarget$[ebp], eax
; Line 2290
	jmp	SHORT $LN3@UConverter@2
$LN5@UConverter@2:
; Line 2292
	mov	eax, DWORD PTR _targetUniChar$[ebp]
	and	eax, 1023				; 000003ffH
	movzx	ecx, ax
	add	ecx, 56320				; 0000dc00H
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	edx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [edx+4]
	movsx	edx, BYTE PTR [edx+65]
	mov	WORD PTR [eax+edx*2+116], cx
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	dl, BYTE PTR [ecx+65]
	add	dl, 1
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx+65], dl
$LN3@UConverter@2:
; Line 2296
	jmp	SHORT $LN8@UConverter@2
$LN7@UConverter@2:
; Line 2298
	mov	eax, DWORD PTR _err$[ebp]
	push	eax
	mov	ecx, DWORD PTR _targetUniChar$[ebp]
	push	ecx
	mov	edx, DWORD PTR _mySourceChar$[ebp]
	push	edx
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	?toUnicodeCallback@@YAXPAUUConverter@@IIPAW4UErrorCode@@@Z ; toUnicodeCallback
	add	esp, 16					; 00000010H
; Line 2299
	jmp	SHORT $endloop$37998
$LN8@UConverter@2:
; Line 2302
	jmp	SHORT $LN1@UConverter@2
$LN53@UConverter@2:
; Line 2303
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
; Line 2304
	jmp	SHORT $endloop$37998
$LN1@UConverter@2:
; Line 2306
	jmp	$LN55@UConverter@2
$endloop$37998:
; Line 2308
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _myTarget$[ebp]
	mov	DWORD PTR [eax+16], ecx
; Line 2309
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _mySource$[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN61@UConverter@2:
; Line 2310
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN68@UConverter@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 376				; 00000178H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN68@UConverter@2:
	DD	2
	DD	$LN67@UConverter@2
$LN67@UConverter@2:
	DD	-8					; fffffff8H
	DD	2
	DD	$LN65@UConverter@2
	DD	-20					; ffffffecH
	DD	4
	DD	$LN66@UConverter@2
$LN66@UConverter@2:
	DB	109					; 0000006dH
	DB	121					; 00000079H
	DB	83					; 00000053H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	0
$LN65@UConverter@2:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	66					; 00000042H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
	npad	3
$LN69@UConverter@2:
	DD	$LN40@UConverter@2
	DD	$LN47@UConverter@2
	DD	$LN50@UConverter@2
	DD	$LN44@UConverter@2
	DD	$LN38@UConverter@2
$LN64@UConverter@2:
	DB	0
	DB	4
	DB	4
	DB	0
	DB	1
	DB	2
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	3
	npad	2
$LN70@UConverter@2:
	DD	$LN31@UConverter@2
	DD	$LN29@UConverter@2
	DD	$LN27@UConverter@2
	DD	$LN25@UConverter@2
	DD	$LN21@UConverter@2
	DD	$LN21@UConverter@2
	DD	$LN21@UConverter@2
	DD	$LN21@UConverter@2
	DD	$LN23@UConverter@2
?UConverter_toUnicode_ISO_2022_JP_OFFSETS_LOGIC@@YAXPAUUConverterToUnicodeArgs@@PAW4UErrorCode@@@Z ENDP ; UConverter_toUnicode_ISO_2022_JP_OFFSETS_LOGIC
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?changeState_2022@@YAXPAUUConverter@@PAPBDPBDW4Variant2022@@PAW4UErrorCode@@@Z
_TEXT	SEGMENT
tv163 = -316						; size = 4
tv91 = -316						; size = 4
tv88 = -316						; size = 4
tv81 = -316						; size = 4
_bytesFromThisBuffer$37602 = -113			; size = 1
_backOutDistance$37601 = -101				; size = 1
_tempState$37568 = -92					; size = 4
_tempState$37546 = -80					; size = 4
_c$ = -65						; size = 1
_initialToULength$ = -53				; size = 1
_offset$ = -44						; size = 4
_key$ = -32						; size = 4
_myData2022$ = -20					; size = 4
_value$ = -8						; size = 4
__this$ = 8						; size = 4
_source$ = 12						; size = 4
_sourceLimit$ = 16					; size = 4
_var$ = 20						; size = 4
_err$ = 24						; size = 4
?changeState_2022@@YAXPAUUConverter@@PAPBDPBDW4Variant2022@@PAW4UErrorCode@@@Z PROC ; changeState_2022, COMDAT
; Line 819
	push	ebp
	mov	ebp, esp
	sub	esp, 316				; 0000013cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-316]
	mov	ecx, 79					; 0000004fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 821
	mov	eax, DWORD PTR __this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _myData2022$[ebp], ecx
; Line 822
	mov	eax, DWORD PTR _myData2022$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	mov	DWORD PTR _key$[ebp], ecx
; Line 823
	mov	DWORD PTR _offset$[ebp], 0
; Line 824
	mov	eax, DWORD PTR __this$[ebp]
	mov	cl, BYTE PTR [eax+36]
	mov	BYTE PTR _initialToULength$[ebp], cl
; Line 827
	mov	DWORD PTR _value$[ebp], 0
$LN62@changeStat:
; Line 828
	mov	eax, DWORD PTR _source$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR _sourceLimit$[ebp]
	jae	$DONE$37531
; Line 829
	mov	eax, DWORD PTR _source$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR _c$[ebp], dl
	mov	eax, DWORD PTR _source$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _source$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 830
	mov	eax, DWORD PTR __this$[ebp]
	movsx	ecx, BYTE PTR [eax+36]
	mov	edx, DWORD PTR __this$[ebp]
	mov	al, BYTE PTR _c$[ebp]
	mov	BYTE PTR [edx+ecx+37], al
	mov	ecx, DWORD PTR __this$[ebp]
	mov	dl, BYTE PTR [ecx+36]
	add	dl, 1
	mov	eax, DWORD PTR __this$[ebp]
	mov	BYTE PTR [eax+36], dl
; Line 831
	lea	eax, DWORD PTR _offset$[ebp]
	push	eax
	lea	ecx, DWORD PTR _key$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	?getKey_2022@@YA?AW4UCNV_TableStates_2022@@DPAH0@Z ; getKey_2022
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _value$[ebp], eax
; Line 833
	mov	eax, DWORD PTR _value$[ebp]
	mov	DWORD PTR tv81[ebp], eax
	cmp	DWORD PTR tv81[ebp], -1
	je	SHORT $LN55@changeStat
	cmp	DWORD PTR tv81[ebp], 1
	je	SHORT $LN57@changeStat
	cmp	DWORD PTR tv81[ebp], 2
	je	SHORT $LN53@changeStat
	jmp	SHORT $LN59@changeStat
; Line 837
	jmp	SHORT $LN59@changeStat
$LN57@changeStat:
; Line 840
	mov	DWORD PTR _key$[ebp], 0
; Line 841
	jmp	SHORT $DONE$37531
	jmp	SHORT $DONE$37531
$LN55@changeStat:
; Line 844
	jmp	SHORT $DONE$37531
	jmp	SHORT $DONE$37531
$LN53@changeStat:
; Line 862
	mov	DWORD PTR _value$[ebp], 1
; Line 863
	mov	DWORD PTR _key$[ebp], 0
; Line 864
	jmp	SHORT $DONE$37531
	jmp	SHORT $DONE$37531
$LN59@changeStat:
; Line 867
	jmp	$LN62@changeStat
$DONE$37531:
; Line 870
	mov	eax, DWORD PTR _myData2022$[ebp]
	mov	ecx, DWORD PTR _key$[ebp]
	mov	DWORD PTR [eax+60], ecx
; Line 872
	cmp	DWORD PTR _value$[ebp], 0
	jne	SHORT $LN51@changeStat
; Line 874
	jmp	$LN63@changeStat
	jmp	$LN50@changeStat
$LN51@changeStat:
; Line 875
	cmp	DWORD PTR _value$[ebp], -1
	jne	SHORT $LN49@changeStat
; Line 876
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 18			; 00000012H
; Line 877
	jmp	$LN50@changeStat
$LN49@changeStat:
; Line 878
	mov	eax, DWORD PTR _var$[ebp]
	mov	DWORD PTR tv88[ebp], eax
	cmp	DWORD PTR tv88[ebp], 1
	je	SHORT $LN45@changeStat
	cmp	DWORD PTR tv88[ebp], 2
	je	$LN12@changeStat
	cmp	DWORD PTR tv88[ebp], 3
	je	$LN31@changeStat
	jmp	$LN9@changeStat
$LN45@changeStat:
; Line 902
	mov	eax, DWORD PTR _offset$[ebp]
	movsx	ecx, BYTE PTR _nextStateToUnicodeJP[eax]
	mov	DWORD PTR _tempState$37546[ebp], ecx
; Line 903
	mov	eax, DWORD PTR _tempState$37546[ebp]
	mov	DWORD PTR tv91[ebp], eax
	mov	ecx, DWORD PTR tv91[ebp]
	add	ecx, 1
	mov	DWORD PTR tv91[ebp], ecx
	cmp	DWORD PTR tv91[ebp], 17			; 00000011H
	ja	$LN34@changeStat
	mov	edx, DWORD PTR tv91[ebp]
	movzx	eax, BYTE PTR $LN65@changeStat[edx]
	jmp	DWORD PTR $LN71@changeStat[eax*4]
$LN42@changeStat:
; Line 905
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 19			; 00000013H
; Line 906
	jmp	$LN43@changeStat
$LN41@changeStat:
; Line 908
	mov	eax, DWORD PTR _myData2022$[ebp]
	movsx	ecx, BYTE PTR [eax+50]
	test	ecx, ecx
	je	SHORT $LN40@changeStat
; Line 909
	mov	eax, DWORD PTR _myData2022$[ebp]
	movsx	ecx, BYTE PTR [eax+52]
	cmp	ecx, 2
	jge	SHORT $LN39@changeStat
; Line 910
	mov	eax, DWORD PTR _myData2022$[ebp]
	mov	ecx, DWORD PTR _myData2022$[ebp]
	mov	dl, BYTE PTR [ecx+52]
	mov	BYTE PTR [eax+53], dl
$LN39@changeStat:
; Line 912
	mov	eax, DWORD PTR _myData2022$[ebp]
	mov	BYTE PTR [eax+52], 2
; Line 913
	jmp	SHORT $LN38@changeStat
$LN40@changeStat:
; Line 915
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 18			; 00000012H
$LN38@changeStat:
; Line 917
	jmp	SHORT $LN43@changeStat
$LN37@changeStat:
; Line 921
	mov	eax, DWORD PTR _myData2022$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	movzx	edx, WORD PTR _jpCharsetMasks[ecx*2]
	mov	eax, 1
	mov	ecx, DWORD PTR _tempState$37546[ebp]
	shl	eax, cl
	and	edx, eax
	jne	SHORT $LN36@changeStat
; Line 922
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 19			; 00000013H
; Line 923
	jmp	SHORT $LN35@changeStat
$LN36@changeStat:
; Line 925
	mov	eax, DWORD PTR _myData2022$[ebp]
	mov	cl, BYTE PTR _tempState$37546[ebp]
	mov	BYTE PTR [eax+50], cl
$LN35@changeStat:
; Line 927
	jmp	SHORT $LN43@changeStat
$LN34@changeStat:
; Line 929
	mov	eax, DWORD PTR _myData2022$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	movzx	edx, WORD PTR _jpCharsetMasks[ecx*2]
	mov	eax, 1
	mov	ecx, DWORD PTR _tempState$37546[ebp]
	shl	eax, cl
	and	edx, eax
	jne	SHORT $LN33@changeStat
; Line 930
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 19			; 00000013H
; Line 931
	jmp	SHORT $LN43@changeStat
$LN33@changeStat:
; Line 933
	mov	eax, DWORD PTR _myData2022$[ebp]
	mov	cl, BYTE PTR _tempState$37546[ebp]
	mov	BYTE PTR [eax+48], cl
$LN43@changeStat:
; Line 938
	jmp	$LN50@changeStat
$LN31@changeStat:
; Line 942
	mov	eax, DWORD PTR _offset$[ebp]
	movsx	ecx, BYTE PTR _nextStateToUnicodeCN[eax]
	mov	DWORD PTR _tempState$37568[ebp], ecx
; Line 943
	mov	eax, DWORD PTR _tempState$37568[ebp]
	mov	DWORD PTR tv163[ebp], eax
	mov	ecx, DWORD PTR tv163[ebp]
	add	ecx, 1
	mov	DWORD PTR tv163[ebp], ecx
	cmp	DWORD PTR tv163[ebp], 35		; 00000023H
	ja	$LN15@changeStat
	mov	edx, DWORD PTR tv163[ebp]
	movzx	eax, BYTE PTR $LN66@changeStat[edx]
	jmp	DWORD PTR $LN72@changeStat[eax*4]
$LN28@changeStat:
; Line 945
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 19			; 00000013H
; Line 946
	jmp	$LN29@changeStat
$LN27@changeStat:
; Line 948
	mov	eax, DWORD PTR _myData2022$[ebp]
	movsx	ecx, BYTE PTR [eax+50]
	test	ecx, ecx
	je	SHORT $LN26@changeStat
; Line 949
	mov	eax, DWORD PTR _myData2022$[ebp]
	movsx	ecx, BYTE PTR [eax+52]
	cmp	ecx, 2
	jge	SHORT $LN25@changeStat
; Line 950
	mov	eax, DWORD PTR _myData2022$[ebp]
	mov	ecx, DWORD PTR _myData2022$[ebp]
	mov	dl, BYTE PTR [ecx+52]
	mov	BYTE PTR [eax+53], dl
$LN25@changeStat:
; Line 952
	mov	eax, DWORD PTR _myData2022$[ebp]
	mov	BYTE PTR [eax+52], 2
; Line 953
	jmp	SHORT $LN24@changeStat
$LN26@changeStat:
; Line 955
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 18			; 00000012H
$LN24@changeStat:
; Line 957
	jmp	SHORT $LN29@changeStat
$LN23@changeStat:
; Line 959
	mov	eax, DWORD PTR _myData2022$[ebp]
	movsx	ecx, BYTE PTR [eax+51]
	test	ecx, ecx
	je	SHORT $LN22@changeStat
; Line 960
	mov	eax, DWORD PTR _myData2022$[ebp]
	movsx	ecx, BYTE PTR [eax+52]
	cmp	ecx, 2
	jge	SHORT $LN21@changeStat
; Line 961
	mov	eax, DWORD PTR _myData2022$[ebp]
	mov	ecx, DWORD PTR _myData2022$[ebp]
	mov	dl, BYTE PTR [ecx+52]
	mov	BYTE PTR [eax+53], dl
$LN21@changeStat:
; Line 963
	mov	eax, DWORD PTR _myData2022$[ebp]
	mov	BYTE PTR [eax+52], 3
; Line 964
	jmp	SHORT $LN20@changeStat
$LN22@changeStat:
; Line 966
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 18			; 00000012H
$LN20@changeStat:
; Line 968
	jmp	SHORT $LN29@changeStat
$LN19@changeStat:
; Line 970
	mov	eax, DWORD PTR _myData2022$[ebp]
	cmp	DWORD PTR [eax+64], 0
	jne	SHORT $LN17@changeStat
; Line 971
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 19			; 00000013H
; Line 972
	jmp	SHORT $LN29@changeStat
$LN17@changeStat:
; Line 978
	mov	eax, DWORD PTR _myData2022$[ebp]
	mov	cl, BYTE PTR _tempState$37568[ebp]
	mov	BYTE PTR [eax+49], cl
; Line 979
	jmp	SHORT $LN29@changeStat
$LN16@changeStat:
; Line 981
	mov	eax, DWORD PTR _myData2022$[ebp]
	mov	cl, BYTE PTR _tempState$37568[ebp]
	mov	BYTE PTR [eax+50], cl
; Line 982
	jmp	SHORT $LN29@changeStat
$LN15@changeStat:
; Line 985
	mov	eax, DWORD PTR _myData2022$[ebp]
	cmp	DWORD PTR [eax+64], 0
	jne	SHORT $LN14@changeStat
; Line 986
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 19			; 00000013H
; Line 987
	jmp	SHORT $LN29@changeStat
$LN14@changeStat:
; Line 988
	mov	eax, DWORD PTR _myData2022$[ebp]
	mov	cl, BYTE PTR _tempState$37568[ebp]
	mov	BYTE PTR [eax+51], cl
$LN29@changeStat:
; Line 993
	jmp	SHORT $LN50@changeStat
$LN12@changeStat:
; Line 995
	cmp	DWORD PTR _offset$[ebp], 48		; 00000030H
	jne	SHORT $LN11@changeStat
; Line 997
	jmp	SHORT $LN10@changeStat
$LN11@changeStat:
; Line 998
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 19			; 00000013H
$LN10@changeStat:
; Line 1000
	jmp	SHORT $LN50@changeStat
$LN9@changeStat:
; Line 1004
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 18			; 00000012H
$LN50@changeStat:
; Line 1008
	mov	eax, DWORD PTR _err$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_SUCCESS@@YACW4UErrorCode@@@Z		; U_SUCCESS
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN8@changeStat
; Line 1009
	mov	eax, DWORD PTR __this$[ebp]
	mov	BYTE PTR [eax+36], 0
	jmp	$LN63@changeStat
$LN8@changeStat:
; Line 1010
	mov	eax, DWORD PTR _err$[ebp]
	cmp	DWORD PTR [eax], 18			; 00000012H
	jne	$LN6@changeStat
; Line 1011
	mov	eax, DWORD PTR __this$[ebp]
	movsx	ecx, BYTE PTR [eax+36]
	cmp	ecx, 1
	jle	$LN5@changeStat
; Line 1024
	mov	eax, DWORD PTR __this$[ebp]
	movsx	ecx, BYTE PTR [eax+36]
	sub	ecx, 1
	mov	BYTE PTR _backOutDistance$37601[ebp], cl
; Line 1025
	mov	eax, DWORD PTR __this$[ebp]
	movsx	ecx, BYTE PTR [eax+36]
	movsx	edx, BYTE PTR _initialToULength$[ebp]
	sub	ecx, edx
	mov	BYTE PTR _bytesFromThisBuffer$37602[ebp], cl
; Line 1026
	movsx	eax, BYTE PTR _backOutDistance$37601[ebp]
	movsx	ecx, BYTE PTR _bytesFromThisBuffer$37602[ebp]
	cmp	eax, ecx
	jg	SHORT $LN4@changeStat
; Line 1028
	movsx	eax, BYTE PTR _backOutDistance$37601[ebp]
	mov	ecx, DWORD PTR _source$[ebp]
	mov	edx, DWORD PTR [ecx]
	sub	edx, eax
	mov	eax, DWORD PTR _source$[ebp]
	mov	DWORD PTR [eax], edx
; Line 1029
	jmp	SHORT $LN3@changeStat
$LN4@changeStat:
; Line 1031
	movsx	eax, BYTE PTR _bytesFromThisBuffer$37602[ebp]
	movsx	ecx, BYTE PTR _backOutDistance$37601[ebp]
	sub	eax, ecx
	mov	edx, DWORD PTR __this$[ebp]
	mov	BYTE PTR [edx+254], al
; Line 1034
	push	1
	mov	eax, DWORD PTR __this$[ebp]
	add	eax, 38					; 00000026H
	push	eax
	call	_uprv_checkValidMemory
	add	esp, 8
	mov	ecx, DWORD PTR __this$[ebp]
	movsx	edx, BYTE PTR [ecx+254]
	neg	edx
	push	edx
	mov	eax, DWORD PTR __this$[ebp]
	add	eax, 38					; 00000026H
	push	eax
	mov	ecx, DWORD PTR __this$[ebp]
	add	ecx, 222				; 000000deH
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 1035
	movsx	eax, BYTE PTR _bytesFromThisBuffer$37602[ebp]
	mov	ecx, DWORD PTR _source$[ebp]
	mov	edx, DWORD PTR [ecx]
	sub	edx, eax
	mov	eax, DWORD PTR _source$[ebp]
	mov	DWORD PTR [eax], edx
$LN3@changeStat:
; Line 1037
	mov	eax, DWORD PTR __this$[ebp]
	mov	BYTE PTR [eax+36], 1
$LN5@changeStat:
; Line 1038
	jmp	SHORT $LN63@changeStat
$LN6@changeStat:
; Line 1039
	mov	eax, DWORD PTR _err$[ebp]
	cmp	DWORD PTR [eax], 19			; 00000013H
	jne	SHORT $LN63@changeStat
; Line 1040
	mov	eax, DWORD PTR __this$[ebp]
	mov	DWORD PTR [eax+256], 0
$LN63@changeStat:
; Line 1042
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN70@changeStat
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 316				; 0000013cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN70@changeStat:
	DD	2
	DD	$LN69@changeStat
$LN69@changeStat:
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN67@changeStat
	DD	-44					; ffffffd4H
	DD	4
	DD	$LN68@changeStat
$LN68@changeStat:
	DB	111					; 0000006fH
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	0
$LN67@changeStat:
	DB	107					; 0000006bH
	DB	101					; 00000065H
	DB	121					; 00000079H
	DB	0
	npad	1
$LN71@changeStat:
	DD	$LN42@changeStat
	DD	$LN37@changeStat
	DD	$LN41@changeStat
	DD	$LN34@changeStat
$LN65@changeStat:
	DB	0
	DB	3
	DB	1
	DB	1
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	2
	npad	2
$LN72@changeStat:
	DD	$LN28@changeStat
	DD	$LN17@changeStat
	DD	$LN19@changeStat
	DD	$LN27@changeStat
	DD	$LN23@changeStat
	DD	$LN16@changeStat
	DD	$LN15@changeStat
$LN66@changeStat:
	DB	0
	DB	6
	DB	1
	DB	2
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	3
	DB	4
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	1
	DB	5
?changeState_2022@@YAXPAUUConverter@@PAPBDPBDW4Variant2022@@PAW4UErrorCode@@@Z ENDP ; changeState_2022
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?getKey_2022@@YA?AW4UCNV_TableStates_2022@@DPAH0@Z
_TEXT	SEGMENT
_mid$37499 = -56					; size = 4
_oldmid$ = -44						; size = 4
_hi$ = -32						; size = 4
_low$ = -20						; size = 4
_togo$ = -8						; size = 4
_c$ = 8							; size = 1
_key$ = 12						; size = 4
_offset$ = 16						; size = 4
?getKey_2022@@YA?AW4UCNV_TableStates_2022@@DPAH0@Z PROC	; getKey_2022, COMDAT
; Line 770
	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 772
	mov	DWORD PTR _low$[ebp], 0
; Line 773
	mov	DWORD PTR _hi$[ebp], 74			; 0000004aH
; Line 774
	mov	DWORD PTR _oldmid$[ebp], 0
; Line 776
	movzx	eax, BYTE PTR _c$[ebp]
	movsx	ecx, BYTE PTR _normalize_esq_chars_2022[eax]
	mov	DWORD PTR _togo$[ebp], ecx
; Line 777
	cmp	DWORD PTR _togo$[ebp], 0
	jne	SHORT $LN8@getKey_202
; Line 779
	mov	eax, DWORD PTR _key$[ebp]
	mov	DWORD PTR [eax], 0
; Line 780
	mov	eax, DWORD PTR _offset$[ebp]
	mov	DWORD PTR [eax], 0
; Line 781
	or	eax, -1
	jmp	$LN9@getKey_202
$LN8@getKey_202:
; Line 783
	mov	eax, DWORD PTR _key$[ebp]
	mov	ecx, DWORD PTR [eax]
	shl	ecx, 5
	add	ecx, DWORD PTR _togo$[ebp]
	mov	DWORD PTR _togo$[ebp], ecx
$LN7@getKey_202:
; Line 785
	mov	eax, DWORD PTR _hi$[ebp]
	cmp	eax, DWORD PTR _low$[ebp]
	je	SHORT $LN6@getKey_202
; Line 787
	mov	eax, DWORD PTR _hi$[ebp]
	add	eax, DWORD PTR _low$[ebp]
	sar	eax, 1
	mov	DWORD PTR _mid$37499[ebp], eax
; Line 789
	mov	eax, DWORD PTR _mid$37499[ebp]
	cmp	eax, DWORD PTR _oldmid$[ebp]
	jne	SHORT $LN5@getKey_202
; Line 790
	jmp	SHORT $LN6@getKey_202
$LN5@getKey_202:
; Line 792
	mov	eax, DWORD PTR _mid$37499[ebp]
	mov	ecx, DWORD PTR _escSeqStateTable_Key_2022[eax*4]
	cmp	ecx, DWORD PTR _togo$[ebp]
	jle	SHORT $LN4@getKey_202
; Line 793
	mov	eax, DWORD PTR _mid$37499[ebp]
	mov	DWORD PTR _hi$[ebp], eax
	jmp	SHORT $LN3@getKey_202
$LN4@getKey_202:
; Line 795
	mov	eax, DWORD PTR _mid$37499[ebp]
	mov	ecx, DWORD PTR _escSeqStateTable_Key_2022[eax*4]
	cmp	ecx, DWORD PTR _togo$[ebp]
	jge	SHORT $LN2@getKey_202
; Line 796
	mov	eax, DWORD PTR _mid$37499[ebp]
	mov	DWORD PTR _low$[ebp], eax
; Line 798
	jmp	SHORT $LN3@getKey_202
$LN2@getKey_202:
; Line 799
	mov	eax, DWORD PTR _key$[ebp]
	mov	ecx, DWORD PTR _togo$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 800
	mov	eax, DWORD PTR _offset$[ebp]
	mov	ecx, DWORD PTR _mid$37499[ebp]
	mov	DWORD PTR [eax], ecx
; Line 801
	mov	eax, DWORD PTR _mid$37499[ebp]
	movsx	eax, BYTE PTR _escSeqStateTable_Value_2022[eax]
	jmp	SHORT $LN9@getKey_202
$LN3@getKey_202:
; Line 803
	mov	eax, DWORD PTR _mid$37499[ebp]
	mov	DWORD PTR _oldmid$[ebp], eax
; Line 805
	jmp	SHORT $LN7@getKey_202
$LN6@getKey_202:
; Line 807
	mov	eax, DWORD PTR _key$[ebp]
	mov	DWORD PTR [eax], 0
; Line 808
	mov	eax, DWORD PTR _offset$[ebp]
	mov	DWORD PTR [eax], 0
; Line 809
	or	eax, -1
$LN9@getKey_202:
; Line 810
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?getKey_2022@@YA?AW4UCNV_TableStates_2022@@DPAH0@Z ENDP	; getKey_2022
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?toUnicodeCallback@@YAXPAUUConverter@@IIPAW4UErrorCode@@@Z
_TEXT	SEGMENT
_cnv$ = 8						; size = 4
_sourceChar$ = 12					; size = 4
_targetUniChar$ = 16					; size = 4
_err$ = 20						; size = 4
?toUnicodeCallback@@YAXPAUUConverter@@IIPAW4UErrorCode@@@Z PROC ; toUnicodeCallback, COMDAT
; Line 1358
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1359
	cmp	DWORD PTR _sourceChar$[ebp], 255	; 000000ffH
	jbe	SHORT $LN4@toUnicodeC
; Line 1360
	mov	eax, DWORD PTR _sourceChar$[ebp]
	shr	eax, 8
	mov	ecx, DWORD PTR _cnv$[ebp]
	mov	BYTE PTR [ecx+37], al
; Line 1361
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	cl, BYTE PTR _sourceChar$[ebp]
	mov	BYTE PTR [eax+38], cl
; Line 1362
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	BYTE PTR [eax+36], 2
; Line 1364
	jmp	SHORT $LN3@toUnicodeC
$LN4@toUnicodeC:
; Line 1365
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	cl, BYTE PTR _sourceChar$[ebp]
	mov	BYTE PTR [eax+37], cl
; Line 1366
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	BYTE PTR [eax+36], 1
$LN3@toUnicodeC:
; Line 1369
	cmp	DWORD PTR _targetUniChar$[ebp], 65534	; 0000fffeH
	jne	SHORT $LN2@toUnicodeC
; Line 1370
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 10			; 0000000aH
; Line 1372
	jmp	SHORT $LN5@toUnicodeC
$LN2@toUnicodeC:
; Line 1373
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 12			; 0000000cH
$LN5@toUnicodeC:
; Line 1375
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?toUnicodeCallback@@YAXPAUUConverter@@IIPAW4UErrorCode@@@Z ENDP ; toUnicodeCallback
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?jisx201ToU@@YAII@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
?jisx201ToU@@YAII@Z PROC				; jisx201ToU, COMDAT
; Line 1479
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1480
	cmp	DWORD PTR _value$[ebp], 92		; 0000005cH
	jae	SHORT $LN6@jisx201ToU
; Line 1481
	mov	eax, DWORD PTR _value$[ebp]
	jmp	SHORT $LN7@jisx201ToU
	jmp	SHORT $LN7@jisx201ToU
$LN6@jisx201ToU:
; Line 1482
	cmp	DWORD PTR _value$[ebp], 92		; 0000005cH
	jne	SHORT $LN4@jisx201ToU
; Line 1483
	mov	eax, 165				; 000000a5H
	jmp	SHORT $LN7@jisx201ToU
	jmp	SHORT $LN7@jisx201ToU
$LN4@jisx201ToU:
; Line 1484
	cmp	DWORD PTR _value$[ebp], 126		; 0000007eH
	jne	SHORT $LN2@jisx201ToU
; Line 1485
	mov	eax, 8254				; 0000203eH
	jmp	SHORT $LN7@jisx201ToU
; Line 1486
	jmp	SHORT $LN7@jisx201ToU
$LN2@jisx201ToU:
; Line 1487
	mov	eax, DWORD PTR _value$[ebp]
$LN7@jisx201ToU:
; Line 1489
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?jisx201ToU@@YAII@Z ENDP				; jisx201ToU
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?_2022ToSJIS@@YAXEEQAD@Z
_TEXT	SEGMENT
_c1$ = 8						; size = 1
_c2$ = 12						; size = 1
_bytes$ = 16						; size = 4
?_2022ToSJIS@@YAXEEQAD@Z PROC				; _2022ToSJIS, COMDAT
; Line 1550
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1551
	movzx	eax, BYTE PTR _c1$[ebp]
	and	eax, 1
	je	SHORT $LN12@2022ToSJIS
; Line 1552
	mov	al, BYTE PTR _c1$[ebp]
	add	al, 1
	mov	BYTE PTR _c1$[ebp], al
; Line 1553
	movzx	eax, BYTE PTR _c2$[ebp]
	cmp	eax, 95					; 0000005fH
	jg	SHORT $LN11@2022ToSJIS
; Line 1554
	movzx	eax, BYTE PTR _c2$[ebp]
	add	eax, 31					; 0000001fH
	mov	BYTE PTR _c2$[ebp], al
	jmp	SHORT $LN10@2022ToSJIS
$LN11@2022ToSJIS:
; Line 1555
	movzx	eax, BYTE PTR _c2$[ebp]
	cmp	eax, 126				; 0000007eH
	jg	SHORT $LN9@2022ToSJIS
; Line 1556
	movzx	eax, BYTE PTR _c2$[ebp]
	add	eax, 32					; 00000020H
	mov	BYTE PTR _c2$[ebp], al
; Line 1557
	jmp	SHORT $LN10@2022ToSJIS
$LN9@2022ToSJIS:
; Line 1558
	mov	BYTE PTR _c2$[ebp], 0
$LN10@2022ToSJIS:
; Line 1560
	jmp	SHORT $LN7@2022ToSJIS
$LN12@2022ToSJIS:
; Line 1561
	movzx	eax, BYTE PTR _c2$[ebp]
	sub	eax, 33					; 00000021H
	movzx	ecx, al
	cmp	ecx, 93					; 0000005dH
	jg	SHORT $LN6@2022ToSJIS
; Line 1562
	movzx	eax, BYTE PTR _c2$[ebp]
	add	eax, 126				; 0000007eH
	mov	BYTE PTR _c2$[ebp], al
; Line 1563
	jmp	SHORT $LN7@2022ToSJIS
$LN6@2022ToSJIS:
; Line 1564
	mov	BYTE PTR _c2$[ebp], 0
$LN7@2022ToSJIS:
; Line 1567
	mov	al, BYTE PTR _c1$[ebp]
	shr	al, 1
	mov	BYTE PTR _c1$[ebp], al
; Line 1568
	movzx	eax, BYTE PTR _c1$[ebp]
	cmp	eax, 47					; 0000002fH
	jg	SHORT $LN4@2022ToSJIS
; Line 1569
	movzx	eax, BYTE PTR _c1$[ebp]
	add	eax, 112				; 00000070H
	mov	BYTE PTR _c1$[ebp], al
	jmp	SHORT $LN3@2022ToSJIS
$LN4@2022ToSJIS:
; Line 1570
	movzx	eax, BYTE PTR _c1$[ebp]
	cmp	eax, 63					; 0000003fH
	jg	SHORT $LN2@2022ToSJIS
; Line 1571
	movzx	eax, BYTE PTR _c1$[ebp]
	add	eax, 176				; 000000b0H
	mov	BYTE PTR _c1$[ebp], al
; Line 1572
	jmp	SHORT $LN3@2022ToSJIS
$LN2@2022ToSJIS:
; Line 1573
	mov	BYTE PTR _c1$[ebp], 0
$LN3@2022ToSJIS:
; Line 1575
	mov	eax, DWORD PTR _bytes$[ebp]
	mov	cl, BYTE PTR _c1$[ebp]
	mov	BYTE PTR [eax], cl
; Line 1576
	mov	eax, DWORD PTR _bytes$[ebp]
	mov	cl, BYTE PTR _c2$[ebp]
	mov	BYTE PTR [eax+1], cl
; Line 1577
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?_2022ToSJIS@@YAXEEQAD@Z ENDP				; _2022ToSJIS
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?UConverter_fromUnicode_ISO_2022_KR_OFFSETS_LOGIC@@YAXPAUUConverterFromUnicodeArgs@@PAW4UErrorCode@@@Z
_TEXT	SEGMENT
_sourceIndex$38112 = -176				; size = 4
_trail$38101 = -164					; size = 2
_length$ = -152						; size = 4
_useFallback$ = -137					; size = 1
_sharedData$ = -128					; size = 4
_converterData$ = -116					; size = 4
_oldIsTargetByteDBCS$ = -101				; size = 1
_isTargetByteDBCS$ = -89				; size = 1
_sourceChar$ = -80					; size = 4
_targetByteUnit$ = -68					; size = 4
_offsets$ = -56						; size = 4
_targetLimit$ = -44					; size = 4
_target$ = -32						; size = 4
_sourceLimit$ = -20					; size = 4
_source$ = -8						; size = 4
_args$ = 8						; size = 4
_err$ = 12						; size = 4
?UConverter_fromUnicode_ISO_2022_KR_OFFSETS_LOGIC@@YAXPAUUConverterFromUnicodeArgs@@PAW4UErrorCode@@@Z PROC ; UConverter_fromUnicode_ISO_2022_KR_OFFSETS_LOGIC, COMDAT
; Line 2347
	push	ebp
	mov	ebp, esp
	sub	esp, 372				; 00000174H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-372]
	mov	ecx, 93					; 0000005dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2349
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _source$[ebp], ecx
; Line 2350
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _sourceLimit$[ebp], ecx
; Line 2351
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _target$[ebp], ecx
; Line 2352
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _targetLimit$[ebp], ecx
; Line 2353
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR _offsets$[ebp], ecx
; Line 2354
	mov	DWORD PTR _targetByteUnit$[ebp], 0
; Line 2355
	mov	DWORD PTR _sourceChar$[ebp], 0
; Line 2361
	mov	DWORD PTR _length$[ebp], 0
; Line 2363
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _converterData$[ebp], edx
; Line 2368
	mov	eax, DWORD PTR _converterData$[ebp]
	cmp	DWORD PTR [eax+64], 1
	jne	SHORT $LN43@UConverter@3
; Line 2369
	mov	eax, DWORD PTR _err$[ebp]
	push	eax
	mov	ecx, DWORD PTR _args$[ebp]
	push	ecx
	call	?UConverter_fromUnicode_ISO_2022_KR_OFFSETS_LOGIC_IBM@@YAXPAUUConverterFromUnicodeArgs@@PAW4UErrorCode@@@Z ; UConverter_fromUnicode_ISO_2022_KR_OFFSETS_LOGIC_IBM
	add	esp, 8
; Line 2370
	jmp	$LN44@UConverter@3
$LN43@UConverter@3:
; Line 2374
	mov	eax, DWORD PTR _converterData$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR _sharedData$[ebp], edx
; Line 2375
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	dl, BYTE PTR [ecx+35]
	mov	BYTE PTR _useFallback$[ebp], dl
; Line 2376
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	dl, BYTE PTR [ecx+52]
	mov	BYTE PTR _isTargetByteDBCS$[ebp], dl
; Line 2377
	mov	al, BYTE PTR _isTargetByteDBCS$[ebp]
	mov	BYTE PTR _oldIsTargetByteDBCS$[ebp], al
; Line 2379
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	dl, BYTE PTR [ecx+52]
	mov	BYTE PTR _isTargetByteDBCS$[ebp], dl
; Line 2380
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+56]
	mov	DWORD PTR _sourceChar$[ebp], edx
	cmp	DWORD PTR _sourceChar$[ebp], 0
	je	SHORT $LN40@UConverter@3
	mov	eax, DWORD PTR _target$[ebp]
	cmp	eax, DWORD PTR _targetLimit$[ebp]
	jae	SHORT $LN40@UConverter@3
; Line 2381
	jmp	$getTrail$38053
	jmp	$getTrail$38053
$LN40@UConverter@3:
; Line 2383
	mov	eax, DWORD PTR _source$[ebp]
	cmp	eax, DWORD PTR _sourceLimit$[ebp]
	jae	$LN39@UConverter@3
; Line 2385
	mov	DWORD PTR _targetByteUnit$[ebp], 65535	; 0000ffffH
; Line 2387
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _target$[ebp]
	cmp	ecx, DWORD PTR [eax+20]
	jae	$LN38@UConverter@3
; Line 2388
	mov	eax, DWORD PTR _source$[ebp]
	movzx	ecx, WORD PTR [eax]
	mov	DWORD PTR _sourceChar$[ebp], ecx
	mov	edx, DWORD PTR _source$[ebp]
	add	edx, 2
	mov	DWORD PTR _source$[ebp], edx
; Line 2391
	cmp	DWORD PTR _sourceChar$[ebp], 32		; 00000020H
	jge	SHORT $LN37@UConverter@3
	mov	eax, 1
	mov	ecx, DWORD PTR _sourceChar$[ebp]
	shl	eax, cl
	and	eax, 134266880				; 0800c000H
	je	SHORT $LN37@UConverter@3
; Line 2393
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 12			; 0000000cH
; Line 2394
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _sourceChar$[ebp]
	mov	DWORD PTR [ecx+56], edx
; Line 2395
	jmp	$LN39@UConverter@3
$LN37@UConverter@3:
; Line 2398
	push	1
	movzx	eax, BYTE PTR _useFallback$[ebp]
	push	eax
	lea	ecx, DWORD PTR _targetByteUnit$[ebp]
	push	ecx
	mov	edx, DWORD PTR _sourceChar$[ebp]
	push	edx
	mov	eax, DWORD PTR _sharedData$[ebp]
	push	eax
	call	?MBCS_FROM_UCHAR32_ISO2022@@YAHPAUUConverterSharedData@@HPAICH@Z ; MBCS_FROM_UCHAR32_ISO2022
	add	esp, 20					; 00000014H
	mov	DWORD PTR _length$[ebp], eax
; Line 2399
	cmp	DWORD PTR _length$[ebp], 0
	jge	SHORT $LN36@UConverter@3
; Line 2400
	mov	eax, DWORD PTR _length$[ebp]
	neg	eax
	mov	DWORD PTR _length$[ebp], eax
$LN36@UConverter@3:
; Line 2409
	cmp	DWORD PTR _length$[ebp], 2
	jg	SHORT $LN34@UConverter@3
	cmp	DWORD PTR _length$[ebp], 0
	je	SHORT $LN34@UConverter@3
	cmp	DWORD PTR _length$[ebp], 1
	jne	SHORT $LN33@UConverter@3
	cmp	DWORD PTR _targetByteUnit$[ebp], 127	; 0000007fH
	ja	SHORT $LN34@UConverter@3
$LN33@UConverter@3:
	cmp	DWORD PTR _length$[ebp], 2
	jne	SHORT $LN35@UConverter@3
	mov	eax, DWORD PTR _targetByteUnit$[ebp]
	sub	eax, 41377				; 0000a1a1H
	movzx	ecx, ax
	cmp	ecx, 23901				; 00005d5dH
	jg	SHORT $LN34@UConverter@3
	mov	eax, DWORD PTR _targetByteUnit$[ebp]
	sub	eax, 161				; 000000a1H
	movzx	ecx, al
	cmp	ecx, 93					; 0000005dH
	jle	SHORT $LN35@UConverter@3
$LN34@UConverter@3:
; Line 2410
	mov	DWORD PTR _targetByteUnit$[ebp], 65535	; 0000ffffH
$LN35@UConverter@3:
; Line 2412
	cmp	DWORD PTR _targetByteUnit$[ebp], 65535	; 0000ffffH
	je	$LN31@UConverter@3
; Line 2414
	mov	al, BYTE PTR _isTargetByteDBCS$[ebp]
	mov	BYTE PTR _oldIsTargetByteDBCS$[ebp], al
; Line 2415
	cmp	DWORD PTR _targetByteUnit$[ebp], 255	; 000000ffH
	seta	al
	mov	BYTE PTR _isTargetByteDBCS$[ebp], al
; Line 2417
	movsx	eax, BYTE PTR _oldIsTargetByteDBCS$[ebp]
	movsx	ecx, BYTE PTR _isTargetByteDBCS$[ebp]
	cmp	eax, ecx
	je	SHORT $LN30@UConverter@3
; Line 2419
	movsx	eax, BYTE PTR _isTargetByteDBCS$[ebp]
	test	eax, eax
	je	SHORT $LN29@UConverter@3
; Line 2420
	mov	eax, DWORD PTR _target$[ebp]
	mov	BYTE PTR [eax], 14			; 0000000eH
	mov	ecx, DWORD PTR _target$[ebp]
	add	ecx, 1
	mov	DWORD PTR _target$[ebp], ecx
; Line 2421
	jmp	SHORT $LN28@UConverter@3
$LN29@UConverter@3:
; Line 2422
	mov	eax, DWORD PTR _target$[ebp]
	mov	BYTE PTR [eax], 15			; 0000000fH
	mov	ecx, DWORD PTR _target$[ebp]
	add	ecx, 1
	mov	DWORD PTR _target$[ebp], ecx
$LN28@UConverter@3:
; Line 2423
	cmp	DWORD PTR _offsets$[ebp], 0
	je	SHORT $LN30@UConverter@3
; Line 2424
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _source$[ebp]
	sub	ecx, DWORD PTR [eax+8]
	sar	ecx, 1
	sub	ecx, 1
	mov	edx, DWORD PTR _offsets$[ebp]
	mov	DWORD PTR [edx], ecx
	mov	eax, DWORD PTR _offsets$[ebp]
	add	eax, 4
	mov	DWORD PTR _offsets$[ebp], eax
$LN30@UConverter@3:
; Line 2427
	cmp	DWORD PTR _targetByteUnit$[ebp], 255	; 000000ffH
	ja	SHORT $LN26@UConverter@3
; Line 2428
	mov	eax, DWORD PTR _target$[ebp]
	cmp	eax, DWORD PTR _targetLimit$[ebp]
	jae	SHORT $LN25@UConverter@3
; Line 2429
	mov	eax, DWORD PTR _target$[ebp]
	mov	cl, BYTE PTR _targetByteUnit$[ebp]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 1
	mov	DWORD PTR _target$[ebp], edx
; Line 2430
	cmp	DWORD PTR _offsets$[ebp], 0
	je	SHORT $LN24@UConverter@3
; Line 2431
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _source$[ebp]
	sub	ecx, DWORD PTR [eax+8]
	sar	ecx, 1
	sub	ecx, 1
	mov	edx, DWORD PTR _offsets$[ebp]
	mov	DWORD PTR [edx], ecx
	mov	eax, DWORD PTR _offsets$[ebp]
	add	eax, 4
	mov	DWORD PTR _offsets$[ebp], eax
$LN24@UConverter@3:
; Line 2434
	jmp	SHORT $LN23@UConverter@3
$LN25@UConverter@3:
; Line 2435
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+4]
	movsx	edx, BYTE PTR [eax+63]
	mov	al, BYTE PTR _targetByteUnit$[ebp]
	mov	BYTE PTR [ecx+edx+76], al
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	al, BYTE PTR [edx+63]
	add	al, 1
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx+63], al
; Line 2436
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
$LN23@UConverter@3:
; Line 2438
	jmp	$LN22@UConverter@3
$LN26@UConverter@3:
; Line 2439
	mov	eax, DWORD PTR _target$[ebp]
	cmp	eax, DWORD PTR _targetLimit$[ebp]
	jae	$LN21@UConverter@3
; Line 2440
	mov	eax, DWORD PTR _targetByteUnit$[ebp]
	shr	eax, 8
	sub	eax, 128				; 00000080H
	mov	ecx, DWORD PTR _target$[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 1
	mov	DWORD PTR _target$[ebp], edx
; Line 2441
	cmp	DWORD PTR _offsets$[ebp], 0
	je	SHORT $LN20@UConverter@3
; Line 2442
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _source$[ebp]
	sub	ecx, DWORD PTR [eax+8]
	sar	ecx, 1
	sub	ecx, 1
	mov	edx, DWORD PTR _offsets$[ebp]
	mov	DWORD PTR [edx], ecx
	mov	eax, DWORD PTR _offsets$[ebp]
	add	eax, 4
	mov	DWORD PTR _offsets$[ebp], eax
$LN20@UConverter@3:
; Line 2444
	mov	eax, DWORD PTR _target$[ebp]
	cmp	eax, DWORD PTR _targetLimit$[ebp]
	jae	SHORT $LN19@UConverter@3
; Line 2445
	mov	eax, DWORD PTR _targetByteUnit$[ebp]
	sub	eax, 128				; 00000080H
	mov	ecx, DWORD PTR _target$[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 1
	mov	DWORD PTR _target$[ebp], edx
; Line 2446
	cmp	DWORD PTR _offsets$[ebp], 0
	je	SHORT $LN18@UConverter@3
; Line 2447
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _source$[ebp]
	sub	ecx, DWORD PTR [eax+8]
	sar	ecx, 1
	sub	ecx, 1
	mov	edx, DWORD PTR _offsets$[ebp]
	mov	DWORD PTR [edx], ecx
	mov	eax, DWORD PTR _offsets$[ebp]
	add	eax, 4
	mov	DWORD PTR _offsets$[ebp], eax
$LN18@UConverter@3:
; Line 2449
	jmp	SHORT $LN17@UConverter@3
$LN19@UConverter@3:
; Line 2450
	mov	eax, DWORD PTR _targetByteUnit$[ebp]
	sub	eax, 128				; 00000080H
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	movsx	ecx, BYTE PTR [ecx+63]
	mov	BYTE PTR [edx+ecx+76], al
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	cl, BYTE PTR [eax+63]
	add	cl, 1
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax+63], cl
; Line 2451
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
$LN17@UConverter@3:
; Line 2453
	jmp	SHORT $LN22@UConverter@3
$LN21@UConverter@3:
; Line 2454
	mov	eax, DWORD PTR _targetByteUnit$[ebp]
	shr	eax, 8
	sub	eax, 128				; 00000080H
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	movsx	ecx, BYTE PTR [ecx+63]
	mov	BYTE PTR [edx+ecx+76], al
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	cl, BYTE PTR [eax+63]
	add	cl, 1
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax+63], cl
; Line 2455
	mov	eax, DWORD PTR _targetByteUnit$[ebp]
	sub	eax, 128				; 00000080H
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	movsx	ecx, BYTE PTR [ecx+63]
	mov	BYTE PTR [edx+ecx+76], al
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	cl, BYTE PTR [eax+63]
	add	cl, 1
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax+63], cl
; Line 2456
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
$LN22@UConverter@3:
; Line 2461
	jmp	$LN15@UConverter@3
$LN31@UConverter@3:
; Line 2467
	mov	eax, DWORD PTR _sourceChar$[ebp]
	and	eax, -2048				; fffff800H
	cmp	eax, 55296				; 0000d800H
	jne	SHORT $LN14@UConverter@3
; Line 2468
	mov	eax, DWORD PTR _sourceChar$[ebp]
	and	eax, 1024				; 00000400H
	jne	SHORT $LN13@UConverter@3
$getTrail$38053:
; Line 2471
	mov	eax, DWORD PTR _source$[ebp]
	cmp	eax, DWORD PTR _sourceLimit$[ebp]
	jae	SHORT $LN12@UConverter@3
; Line 2473
	mov	eax, DWORD PTR _source$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR _trail$38101[ebp], cx
; Line 2474
	movzx	eax, WORD PTR _trail$38101[ebp]
	and	eax, -1024				; fffffc00H
	cmp	eax, 56320				; 0000dc00H
	jne	SHORT $LN11@UConverter@3
; Line 2475
	mov	eax, DWORD PTR _source$[ebp]
	add	eax, 2
	mov	DWORD PTR _source$[ebp], eax
; Line 2476
	mov	eax, DWORD PTR _sourceChar$[ebp]
	shl	eax, 10					; 0000000aH
	movzx	ecx, WORD PTR _trail$38101[ebp]
	lea	edx, DWORD PTR [eax+ecx-56613888]
	mov	DWORD PTR _sourceChar$[ebp], edx
; Line 2477
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 10			; 0000000aH
; Line 2480
	jmp	SHORT $LN10@UConverter@3
$LN11@UConverter@3:
; Line 2483
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 12			; 0000000cH
$LN10@UConverter@3:
; Line 2485
	jmp	SHORT $LN9@UConverter@3
$LN12@UConverter@3:
; Line 2487
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 0
$LN9@UConverter@3:
; Line 2489
	jmp	SHORT $LN8@UConverter@3
$LN13@UConverter@3:
; Line 2492
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 12			; 0000000cH
$LN8@UConverter@3:
; Line 2494
	jmp	SHORT $LN7@UConverter@3
$LN14@UConverter@3:
; Line 2496
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 10			; 0000000aH
$LN7@UConverter@3:
; Line 2499
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _sourceChar$[ebp]
	mov	DWORD PTR [ecx+56], edx
; Line 2500
	jmp	SHORT $LN39@UConverter@3
$LN15@UConverter@3:
; Line 2503
	jmp	SHORT $LN6@UConverter@3
$LN38@UConverter@3:
; Line 2504
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
; Line 2505
	jmp	SHORT $LN39@UConverter@3
$LN6@UConverter@3:
; Line 2508
	jmp	$LN40@UConverter@3
$LN39@UConverter@3:
; Line 2523
	mov	eax, DWORD PTR _err$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_SUCCESS@@YACW4UErrorCode@@@Z		; U_SUCCESS
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	$LN5@UConverter@3
	movsx	eax, BYTE PTR _isTargetByteDBCS$[ebp]
	test	eax, eax
	je	$LN5@UConverter@3
	mov	eax, DWORD PTR _args$[ebp]
	movsx	ecx, BYTE PTR [eax+2]
	test	ecx, ecx
	je	$LN5@UConverter@3
	mov	eax, DWORD PTR _source$[ebp]
	cmp	eax, DWORD PTR _sourceLimit$[ebp]
	jb	$LN5@UConverter@3
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cmp	DWORD PTR [ecx+56], 0
	jne	$LN5@UConverter@3
; Line 2527
	mov	BYTE PTR _isTargetByteDBCS$[ebp], 0
; Line 2537
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _source$[ebp]
	sub	ecx, DWORD PTR [eax+8]
	sar	ecx, 1
	mov	DWORD PTR _sourceIndex$38112[ebp], ecx
; Line 2538
	cmp	DWORD PTR _sourceIndex$38112[ebp], 0
	jle	SHORT $LN4@UConverter@3
; Line 2539
	mov	eax, DWORD PTR _sourceIndex$38112[ebp]
	sub	eax, 1
	mov	DWORD PTR _sourceIndex$38112[ebp], eax
; Line 2542
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _sourceIndex$38112[ebp]
	movzx	eax, WORD PTR [ecx+edx*2]
	and	eax, -1024				; fffffc00H
	cmp	eax, 56320				; 0000dc00H
	jne	SHORT $LN3@UConverter@3
	cmp	DWORD PTR _sourceIndex$38112[ebp], 0
	je	SHORT $LN2@UConverter@3
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _sourceIndex$38112[ebp]
	movzx	eax, WORD PTR [ecx+edx*2-2]
	and	eax, -1024				; fffffc00H
	cmp	eax, 55296				; 0000d800H
	jne	SHORT $LN3@UConverter@3
$LN2@UConverter@3:
; Line 2543
	mov	eax, DWORD PTR _sourceIndex$38112[ebp]
	sub	eax, 1
	mov	DWORD PTR _sourceIndex$38112[ebp], eax
$LN3@UConverter@3:
; Line 2545
	jmp	SHORT $LN1@UConverter@3
$LN4@UConverter@3:
; Line 2546
	mov	DWORD PTR _sourceIndex$38112[ebp], -1
$LN1@UConverter@3:
; Line 2554
	mov	eax, DWORD PTR _err$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sourceIndex$38112[ebp]
	push	ecx
	lea	edx, DWORD PTR _offsets$[ebp]
	push	edx
	mov	eax, DWORD PTR _targetLimit$[ebp]
	push	eax
	lea	ecx, DWORD PTR _target$[ebp]
	push	ecx
	push	1
	push	OFFSET _SHIFT_IN_STR
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	?fromUWriteUInt8@@YAXPAUUConverter@@PBDHPAPAE1PAPAHHPAW4UErrorCode@@@Z ; fromUWriteUInt8
	add	esp, 32					; 00000020H
$LN5@UConverter@3:
; Line 2558
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _source$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 2559
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _target$[ebp]
	mov	DWORD PTR [eax+16], ecx
; Line 2560
	movsx	eax, BYTE PTR _isTargetByteDBCS$[ebp]
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+52], eax
$LN44@UConverter@3:
; Line 2561
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN50@UConverter@3
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 372				; 00000174H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN50@UConverter@3:
	DD	3
	DD	$LN49@UConverter@3
$LN49@UConverter@3:
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN46@UConverter@3
	DD	-56					; ffffffc8H
	DD	4
	DD	$LN47@UConverter@3
	DD	-68					; ffffffbcH
	DD	4
	DD	$LN48@UConverter@3
$LN48@UConverter@3:
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	103					; 00000067H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	66					; 00000042H
	DB	121					; 00000079H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	85					; 00000055H
	DB	110					; 0000006eH
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	0
$LN47@UConverter@3:
	DB	111					; 0000006fH
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	115					; 00000073H
	DB	0
$LN46@UConverter@3:
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	103					; 00000067H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	0
?UConverter_fromUnicode_ISO_2022_KR_OFFSETS_LOGIC@@YAXPAUUConverterFromUnicodeArgs@@PAW4UErrorCode@@@Z ENDP ; UConverter_fromUnicode_ISO_2022_KR_OFFSETS_LOGIC
_TEXT	ENDS
EXTRN	_ucnv_MBCSFromUnicodeWithOffsets_56:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?UConverter_fromUnicode_ISO_2022_KR_OFFSETS_LOGIC_IBM@@YAXPAUUConverterFromUnicodeArgs@@PAW4UErrorCode@@@Z
_TEXT	SEGMENT
_myConverterData$ = -20					; size = 4
_saveConv$ = -8						; size = 4
_args$ = 8						; size = 4
_err$ = 12						; size = 4
?UConverter_fromUnicode_ISO_2022_KR_OFFSETS_LOGIC_IBM@@YAXPAUUConverterFromUnicodeArgs@@PAW4UErrorCode@@@Z PROC ; UConverter_fromUnicode_ISO_2022_KR_OFFSETS_LOGIC_IBM, COMDAT
; Line 2323
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2325
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _saveConv$[ebp], ecx
; Line 2326
	mov	eax, DWORD PTR _saveConv$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _myConverterData$[ebp], ecx
; Line 2327
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _myConverterData$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR [eax+4], edx
; Line 2329
	mov	eax, DWORD PTR _myConverterData$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR _saveConv$[ebp]
	mov	eax, DWORD PTR [edx+56]
	mov	DWORD PTR [ecx+56], eax
; Line 2330
	mov	eax, DWORD PTR _err$[ebp]
	push	eax
	mov	ecx, DWORD PTR _args$[ebp]
	push	ecx
	call	_ucnv_MBCSFromUnicodeWithOffsets_56
	add	esp, 8
; Line 2331
	mov	eax, DWORD PTR _myConverterData$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR _saveConv$[ebp]
	mov	eax, DWORD PTR [ecx+56]
	mov	DWORD PTR [edx+56], eax
; Line 2333
	mov	eax, DWORD PTR _err$[ebp]
	cmp	DWORD PTR [eax], 15			; 0000000fH
	jne	SHORT $LN2@UConverter@4
; Line 2334
	mov	eax, DWORD PTR _myConverterData$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	movsx	edx, BYTE PTR [ecx+63]
	test	edx, edx
	jle	SHORT $LN1@UConverter@4
; Line 2338
	push	1
	mov	eax, DWORD PTR _myConverterData$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	add	ecx, 76					; 0000004cH
	push	ecx
	call	_uprv_checkValidMemory
	add	esp, 8
	mov	edx, DWORD PTR _myConverterData$[ebp]
	mov	eax, DWORD PTR [edx+40]
	movsx	ecx, BYTE PTR [eax+63]
	push	ecx
	mov	edx, DWORD PTR _myConverterData$[ebp]
	mov	eax, DWORD PTR [edx+40]
	add	eax, 76					; 0000004cH
	push	eax
	mov	ecx, DWORD PTR _saveConv$[ebp]
	add	ecx, 76					; 0000004cH
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@UConverter@4:
; Line 2340
	mov	eax, DWORD PTR _myConverterData$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR _saveConv$[ebp]
	mov	al, BYTE PTR [ecx+63]
	mov	BYTE PTR [edx+63], al
; Line 2341
	mov	eax, DWORD PTR _myConverterData$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	BYTE PTR [ecx+63], 0
$LN2@UConverter@4:
; Line 2343
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _saveConv$[ebp]
	mov	DWORD PTR [eax+4], ecx
; Line 2344
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?UConverter_fromUnicode_ISO_2022_KR_OFFSETS_LOGIC_IBM@@YAXPAUUConverterFromUnicodeArgs@@PAW4UErrorCode@@@Z ENDP ; UConverter_fromUnicode_ISO_2022_KR_OFFSETS_LOGIC_IBM
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?UConverter_toUnicode_ISO_2022_KR_OFFSETS_LOGIC@@YAXPAUUConverterToUnicodeArgs@@PAW4UErrorCode@@@Z
_TEXT	SEGMENT
_trailByte$38198 = -137					; size = 1
_trailIsOk$38197 = -128					; size = 4
_leadIsOk$38196 = -116					; size = 4
_useFallback$ = -101					; size = 1
_sharedData$ = -92					; size = 4
_myData$ = -80						; size = 4
_mySourceChar$ = -68					; size = 2
_targetUniChar$ = -56					; size = 4
_mySourceLimit$ = -44					; size = 4
_myTarget$ = -32					; size = 4
_mySource$ = -20					; size = 4
_tempBuf$ = -8						; size = 2
_args$ = 8						; size = 4
_err$ = 12						; size = 4
?UConverter_toUnicode_ISO_2022_KR_OFFSETS_LOGIC@@YAXPAUUConverterToUnicodeArgs@@PAW4UErrorCode@@@Z PROC ; UConverter_toUnicode_ISO_2022_KR_OFFSETS_LOGIC, COMDAT
; Line 2665
	push	ebp
	mov	ebp, esp
	sub	esp, 336				; 00000150H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-336]
	mov	ecx, 84					; 00000054H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2667
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _mySource$[ebp], ecx
; Line 2668
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _myTarget$[ebp], ecx
; Line 2669
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _mySourceLimit$[ebp], ecx
; Line 2670
	mov	DWORD PTR _targetUniChar$[ebp], 0
; Line 2671
	xor	eax, eax
	mov	WORD PTR _mySourceChar$[ebp], ax
; Line 2676
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _myData$[ebp], edx
; Line 2677
	mov	eax, DWORD PTR _myData$[ebp]
	cmp	DWORD PTR [eax+64], 1
	jne	SHORT $LN30@UConverter@5
; Line 2678
	mov	eax, DWORD PTR _err$[ebp]
	push	eax
	mov	ecx, DWORD PTR _args$[ebp]
	push	ecx
	call	?UConverter_toUnicode_ISO_2022_KR_OFFSETS_LOGIC_IBM@@YAXPAUUConverterToUnicodeArgs@@PAW4UErrorCode@@@Z ; UConverter_toUnicode_ISO_2022_KR_OFFSETS_LOGIC_IBM
	add	esp, 8
; Line 2679
	jmp	$LN31@UConverter@5
$LN30@UConverter@5:
; Line 2683
	mov	eax, DWORD PTR _myData$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR _sharedData$[ebp], edx
; Line 2684
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	dl, BYTE PTR [ecx+35]
	mov	BYTE PTR _useFallback$[ebp], dl
; Line 2686
	mov	eax, DWORD PTR _myData$[ebp]
	cmp	DWORD PTR [eax+60], 0
	je	SHORT $LN29@UConverter@5
; Line 2688
	jmp	$escape$38175
	jmp	$escape$38175
	jmp	SHORT $LN24@UConverter@5
$LN29@UConverter@5:
; Line 2689
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	movsx	edx, BYTE PTR [ecx+36]
	cmp	edx, 1
	jne	SHORT $LN24@UConverter@5
	mov	eax, DWORD PTR _mySource$[ebp]
	cmp	eax, DWORD PTR _mySourceLimit$[ebp]
	jae	SHORT $LN24@UConverter@5
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _myTarget$[ebp]
	cmp	ecx, DWORD PTR [eax+20]
	jae	SHORT $LN24@UConverter@5
; Line 2691
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	movzx	dx, BYTE PTR [ecx+37]
	mov	WORD PTR _mySourceChar$[ebp], dx
; Line 2692
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx+36], 0
; Line 2693
	jmp	$getTrailByte$38179
	jmp	$getTrailByte$38179
$LN24@UConverter@5:
; Line 2696
	mov	eax, DWORD PTR _mySource$[ebp]
	cmp	eax, DWORD PTR _mySourceLimit$[ebp]
	jae	$LN23@UConverter@5
; Line 2698
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _myTarget$[ebp]
	cmp	ecx, DWORD PTR [eax+20]
	jae	$LN22@UConverter@5
; Line 2700
	mov	eax, DWORD PTR _mySource$[ebp]
	movzx	cx, BYTE PTR [eax]
	mov	WORD PTR _mySourceChar$[ebp], cx
	mov	edx, DWORD PTR _mySource$[ebp]
	add	edx, 1
	mov	DWORD PTR _mySource$[ebp], edx
; Line 2702
	movzx	eax, WORD PTR _mySourceChar$[ebp]
	cmp	eax, 15					; 0000000fH
	jne	SHORT $LN21@UConverter@5
; Line 2703
	mov	eax, DWORD PTR _myData$[ebp]
	mov	BYTE PTR [eax+52], 0
; Line 2704
	mov	eax, DWORD PTR _myData$[ebp]
	movsx	ecx, BYTE PTR [eax+68]
	test	ecx, ecx
	je	SHORT $LN20@UConverter@5
; Line 2705
	mov	eax, DWORD PTR _myData$[ebp]
	mov	BYTE PTR [eax+68], 0
; Line 2706
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 18			; 00000012H
; Line 2707
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+256], 2
; Line 2708
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	dl, BYTE PTR _mySourceChar$[ebp]
	mov	BYTE PTR [ecx+37], dl
; Line 2709
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx+36], 1
; Line 2710
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _myTarget$[ebp]
	mov	DWORD PTR [eax+16], ecx
; Line 2711
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _mySource$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 2712
	jmp	$LN31@UConverter@5
$LN20@UConverter@5:
; Line 2715
	jmp	$LN24@UConverter@5
	jmp	$LN19@UConverter@5
$LN21@UConverter@5:
; Line 2716
	movzx	eax, WORD PTR _mySourceChar$[ebp]
	cmp	eax, 14					; 0000000eH
	jne	SHORT $LN18@UConverter@5
; Line 2717
	mov	eax, DWORD PTR _myData$[ebp]
	mov	BYTE PTR [eax+52], 1
; Line 2718
	mov	eax, DWORD PTR _myData$[ebp]
	mov	BYTE PTR [eax+68], 1
; Line 2720
	jmp	$LN24@UConverter@5
	jmp	SHORT $LN19@UConverter@5
$LN18@UConverter@5:
; Line 2721
	movzx	eax, WORD PTR _mySourceChar$[ebp]
	cmp	eax, 27					; 0000001bH
	jne	SHORT $LN19@UConverter@5
; Line 2722
	mov	eax, DWORD PTR _mySource$[ebp]
	sub	eax, 1
	mov	DWORD PTR _mySource$[ebp], eax
$escape$38175:
; Line 2724
	mov	eax, DWORD PTR _myData$[ebp]
	mov	BYTE PTR [eax+68], 0
; Line 2726
	mov	eax, DWORD PTR _err$[ebp]
	push	eax
	push	2
	mov	ecx, DWORD PTR _mySourceLimit$[ebp]
	push	ecx
	lea	edx, DWORD PTR _mySource$[ebp]
	push	edx
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	?changeState_2022@@YAXPAUUConverter@@PAPBDPBDW4Variant2022@@PAW4UErrorCode@@@Z ; changeState_2022
	add	esp, 20					; 00000014H
; Line 2727
	mov	eax, DWORD PTR _err$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN15@UConverter@5
; Line 2728
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _myTarget$[ebp]
	mov	DWORD PTR [eax+16], ecx
; Line 2729
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _mySource$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 2730
	jmp	$LN31@UConverter@5
$LN15@UConverter@5:
; Line 2732
	jmp	$LN24@UConverter@5
$LN19@UConverter@5:
; Line 2735
	mov	eax, DWORD PTR _myData$[ebp]
	mov	BYTE PTR [eax+68], 0
; Line 2736
	mov	eax, DWORD PTR _myData$[ebp]
	movsx	ecx, BYTE PTR [eax+52]
	cmp	ecx, 1
	jne	$LN14@UConverter@5
; Line 2737
	mov	eax, DWORD PTR _mySource$[ebp]
	cmp	eax, DWORD PTR _mySourceLimit$[ebp]
	jae	$LN13@UConverter@5
$getTrailByte$38179:
; Line 2741
	mov	DWORD PTR _targetUniChar$[ebp], 65535	; 0000ffffH
; Line 2742
	mov	eax, DWORD PTR _mySource$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _trailByte$38198[ebp], cl
; Line 2753
	movzx	eax, WORD PTR _mySourceChar$[ebp]
	sub	eax, 33					; 00000021H
	movzx	ecx, al
	xor	edx, edx
	cmp	ecx, 93					; 0000005dH
	setle	dl
	mov	DWORD PTR _leadIsOk$38196[ebp], edx
; Line 2754
	movzx	eax, BYTE PTR _trailByte$38198[ebp]
	sub	eax, 33					; 00000021H
	movzx	ecx, al
	xor	edx, edx
	cmp	ecx, 93					; 0000005dH
	setle	dl
	mov	DWORD PTR _trailIsOk$38197[ebp], edx
; Line 2755
	cmp	DWORD PTR _leadIsOk$38196[ebp], 0
	je	SHORT $LN12@UConverter@5
	cmp	DWORD PTR _trailIsOk$38197[ebp], 0
	je	SHORT $LN12@UConverter@5
; Line 2756
	mov	eax, DWORD PTR _mySource$[ebp]
	add	eax, 1
	mov	DWORD PTR _mySource$[ebp], eax
; Line 2757
	movzx	eax, WORD PTR _mySourceChar$[ebp]
	add	eax, 128				; 00000080H
	mov	BYTE PTR _tempBuf$[ebp], al
; Line 2758
	movzx	eax, BYTE PTR _trailByte$38198[ebp]
	add	eax, 128				; 00000080H
	mov	BYTE PTR _tempBuf$[ebp+1], al
; Line 2759
	movzx	eax, BYTE PTR _useFallback$[ebp]
	push	eax
	push	2
	lea	ecx, DWORD PTR _tempBuf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _sharedData$[ebp]
	push	edx
	call	_ucnv_MBCSSimpleGetNextUChar_56
	add	esp, 16					; 00000010H
	mov	DWORD PTR _targetUniChar$[ebp], eax
; Line 2760
	movzx	eax, WORD PTR _mySourceChar$[ebp]
	shl	eax, 8
	movzx	ecx, BYTE PTR _trailByte$38198[ebp]
	or	eax, ecx
	mov	WORD PTR _mySourceChar$[ebp], ax
	jmp	SHORT $LN11@UConverter@5
$LN12@UConverter@5:
; Line 2761
	cmp	DWORD PTR _trailIsOk$38197[ebp], 0
	jne	SHORT $LN11@UConverter@5
	movzx	eax, BYTE PTR _trailByte$38198[ebp]
	cmp	eax, 32					; 00000020H
	jge	SHORT $LN9@UConverter@5
	movzx	ecx, BYTE PTR _trailByte$38198[ebp]
	mov	eax, 1
	shl	eax, cl
	and	eax, 134266880				; 0800c000H
	jne	SHORT $LN11@UConverter@5
$LN9@UConverter@5:
; Line 2763
	mov	eax, DWORD PTR _mySource$[ebp]
	add	eax, 1
	mov	DWORD PTR _mySource$[ebp], eax
; Line 2765
	movzx	eax, WORD PTR _mySourceChar$[ebp]
	shl	eax, 8
	or	eax, 65536				; 00010000H
	movzx	ecx, BYTE PTR _trailByte$38198[ebp]
	or	eax, ecx
	mov	WORD PTR _mySourceChar$[ebp], ax
$LN11@UConverter@5:
; Line 2767
	jmp	SHORT $LN8@UConverter@5
$LN13@UConverter@5:
; Line 2768
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	dl, BYTE PTR _mySourceChar$[ebp]
	mov	BYTE PTR [ecx+37], dl
; Line 2769
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx+36], 1
; Line 2770
	jmp	$LN23@UConverter@5
$LN8@UConverter@5:
; Line 2771
	jmp	SHORT $LN7@UConverter@5
$LN14@UConverter@5:
; Line 2773
	movzx	eax, WORD PTR _mySourceChar$[ebp]
	cmp	eax, 127				; 0000007fH
	jg	SHORT $LN6@UConverter@5
; Line 2774
	movzx	eax, BYTE PTR _useFallback$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _mySource$[ebp]
	sub	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _sharedData$[ebp]
	push	edx
	call	_ucnv_MBCSSimpleGetNextUChar_56
	add	esp, 16					; 00000010H
	mov	DWORD PTR _targetUniChar$[ebp], eax
; Line 2775
	jmp	SHORT $LN7@UConverter@5
$LN6@UConverter@5:
; Line 2776
	mov	DWORD PTR _targetUniChar$[ebp], 65535	; 0000ffffH
$LN7@UConverter@5:
; Line 2778
	cmp	DWORD PTR _targetUniChar$[ebp], 65534	; 0000fffeH
	jge	SHORT $LN4@UConverter@5
; Line 2779
	mov	eax, DWORD PTR _args$[ebp]
	cmp	DWORD PTR [eax+24], 0
	je	SHORT $LN3@UConverter@5
; Line 2780
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _mySource$[ebp]
	sub	ecx, DWORD PTR [eax+8]
	movzx	edx, WORD PTR _mySourceChar$[ebp]
	xor	eax, eax
	cmp	edx, 255				; 000000ffH
	setg	al
	add	eax, 1
	sub	ecx, eax
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR _myTarget$[ebp]
	sub	eax, DWORD PTR [edx+16]
	sar	eax, 1
	mov	edx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [edx+24]
	mov	DWORD PTR [edx+eax*4], ecx
$LN3@UConverter@5:
; Line 2782
	mov	eax, DWORD PTR _myTarget$[ebp]
	mov	cx, WORD PTR _targetUniChar$[ebp]
	mov	WORD PTR [eax], cx
	mov	edx, DWORD PTR _myTarget$[ebp]
	add	edx, 2
	mov	DWORD PTR _myTarget$[ebp], edx
; Line 2784
	jmp	SHORT $LN2@UConverter@5
$LN4@UConverter@5:
; Line 2786
	mov	eax, DWORD PTR _err$[ebp]
	push	eax
	mov	ecx, DWORD PTR _targetUniChar$[ebp]
	push	ecx
	movzx	edx, WORD PTR _mySourceChar$[ebp]
	push	edx
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	?toUnicodeCallback@@YAXPAUUConverter@@IIPAW4UErrorCode@@@Z ; toUnicodeCallback
	add	esp, 16					; 00000010H
; Line 2787
	jmp	SHORT $LN23@UConverter@5
$LN2@UConverter@5:
; Line 2790
	jmp	SHORT $LN1@UConverter@5
$LN22@UConverter@5:
; Line 2791
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
; Line 2792
	jmp	SHORT $LN23@UConverter@5
$LN1@UConverter@5:
; Line 2794
	jmp	$LN24@UConverter@5
$LN23@UConverter@5:
; Line 2795
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _myTarget$[ebp]
	mov	DWORD PTR [eax+16], ecx
; Line 2796
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _mySource$[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN31@UConverter@5:
; Line 2797
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN37@UConverter@5
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 336				; 00000150H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN37@UConverter@5:
	DD	2
	DD	$LN36@UConverter@5
$LN36@UConverter@5:
	DD	-8					; fffffff8H
	DD	2
	DD	$LN34@UConverter@5
	DD	-20					; ffffffecH
	DD	4
	DD	$LN35@UConverter@5
$LN35@UConverter@5:
	DB	109					; 0000006dH
	DB	121					; 00000079H
	DB	83					; 00000053H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	0
$LN34@UConverter@5:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	66					; 00000042H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
?UConverter_toUnicode_ISO_2022_KR_OFFSETS_LOGIC@@YAXPAUUConverterToUnicodeArgs@@PAW4UErrorCode@@@Z ENDP ; UConverter_toUnicode_ISO_2022_KR_OFFSETS_LOGIC
_TEXT	ENDS
EXTRN	_ucnv_MBCSToUnicodeWithOffsets_56:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?UConverter_toUnicode_ISO_2022_KR_OFFSETS_LOGIC_IBM@@YAXPAUUConverterToUnicodeArgs@@PAW4UErrorCode@@@Z
_TEXT	SEGMENT
_delta$38147 = -104					; size = 4
_target$38146 = -92					; size = 4
_offsets$38145 = -80					; size = 4
_minArgsSize$ = -68					; size = 4
_subArgs$ = -56						; size = 28
_myData$ = -20						; size = 4
_sourceStart$ = -8					; size = 4
_args$ = 8						; size = 4
_err$ = 12						; size = 4
?UConverter_toUnicode_ISO_2022_KR_OFFSETS_LOGIC_IBM@@YAXPAUUConverterToUnicodeArgs@@PAW4UErrorCode@@@Z PROC ; UConverter_toUnicode_ISO_2022_KR_OFFSETS_LOGIC_IBM, COMDAT
; Line 2567
	push	ebp
	mov	ebp, esp
	sub	esp, 300				; 0000012cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-300]
	mov	ecx, 75					; 0000004bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2569
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _myData$[ebp], edx
; Line 2575
	mov	eax, DWORD PTR _args$[ebp]
	movzx	ecx, WORD PTR [eax]
	cmp	ecx, 28					; 0000001cH
	jae	SHORT $LN17@UConverter@6
; Line 2576
	mov	eax, DWORD PTR _args$[ebp]
	movzx	ecx, WORD PTR [eax]
	mov	DWORD PTR _minArgsSize$[ebp], ecx
; Line 2577
	jmp	SHORT $LN16@UConverter@6
$LN17@UConverter@6:
; Line 2578
	mov	DWORD PTR _minArgsSize$[ebp], 28	; 0000001cH
$LN16@UConverter@6:
; Line 2581
	push	1
	mov	eax, DWORD PTR _args$[ebp]
	push	eax
	call	_uprv_checkValidMemory
	add	esp, 8
	mov	ecx, DWORD PTR _minArgsSize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _args$[ebp]
	push	edx
	lea	eax, DWORD PTR _subArgs$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 2582
	mov	ax, WORD PTR _minArgsSize$[ebp]
	mov	WORD PTR _subArgs$[ebp], ax
; Line 2583
	mov	eax, DWORD PTR _myData$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR _subArgs$[ebp+4], ecx
; Line 2586
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _sourceStart$[ebp], ecx
; Line 2588
	mov	eax, DWORD PTR _myData$[ebp]
	cmp	DWORD PTR [eax+60], 0
	je	SHORT $LN13@UConverter@6
; Line 2590
	jmp	$escape$38137
	jmp	$escape$38137
$LN13@UConverter@6:
; Line 2593
	mov	eax, DWORD PTR _err$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_SUCCESS@@YACW4UErrorCode@@@Z		; U_SUCCESS
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	$LN18@UConverter@6
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [eax+8]
	cmp	edx, DWORD PTR [ecx+12]
	jae	$LN18@UConverter@6
; Line 2595
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _subArgs$[ebp+8], ecx
; Line 2596
	mov	eax, DWORD PTR _args$[ebp]
	movzx	ecx, BYTE PTR [eax+2]
	push	ecx
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _args$[ebp]
	add	ecx, 8
	push	ecx
	call	?getEndOfBuffer_2022@@YAPBDPAPBDPBDC@Z	; getEndOfBuffer_2022
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _subArgs$[ebp+12], eax
; Line 2597
	mov	eax, DWORD PTR _subArgs$[ebp+8]
	cmp	eax, DWORD PTR _subArgs$[ebp+12]
	je	$LN11@UConverter@6
; Line 2605
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	movsx	edx, BYTE PTR [ecx+36]
	test	edx, edx
	jle	SHORT $LN10@UConverter@6
; Line 2606
	push	1
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 37					; 00000025H
	push	ecx
	call	_uprv_checkValidMemory
	add	esp, 8
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+4]
	movsx	ecx, BYTE PTR [eax+36]
	push	ecx
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 37					; 00000025H
	push	eax
	mov	ecx, DWORD PTR _subArgs$[ebp+4]
	add	ecx, 37					; 00000025H
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN10@UConverter@6:
; Line 2608
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _subArgs$[ebp+4]
	mov	al, BYTE PTR [ecx+36]
	mov	BYTE PTR [edx+36], al
; Line 2615
	mov	eax, DWORD PTR _err$[ebp]
	push	eax
	lea	ecx, DWORD PTR _subArgs$[ebp]
	push	ecx
	call	_ucnv_MBCSToUnicodeWithOffsets_56
	add	esp, 8
; Line 2617
	mov	eax, DWORD PTR _args$[ebp]
	cmp	DWORD PTR [eax+24], 0
	je	SHORT $LN9@UConverter@6
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _sourceStart$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	je	SHORT $LN9@UConverter@6
; Line 2619
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR _offsets$38145[ebp], ecx
; Line 2620
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _target$38146[ebp], ecx
; Line 2621
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	sub	ecx, DWORD PTR _sourceStart$[ebp]
	mov	DWORD PTR _delta$38147[ebp], ecx
$LN8@UConverter@6:
; Line 2622
	mov	eax, DWORD PTR _target$38146[ebp]
	cmp	eax, DWORD PTR _subArgs$[ebp+16]
	jae	SHORT $LN9@UConverter@6
; Line 2623
	mov	eax, DWORD PTR _offsets$38145[ebp]
	cmp	DWORD PTR [eax], 0
	jl	SHORT $LN6@UConverter@6
; Line 2624
	mov	eax, DWORD PTR _offsets$38145[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, DWORD PTR _delta$38147[ebp]
	mov	edx, DWORD PTR _offsets$38145[ebp]
	mov	DWORD PTR [edx], ecx
$LN6@UConverter@6:
; Line 2626
	mov	eax, DWORD PTR _offsets$38145[ebp]
	add	eax, 4
	mov	DWORD PTR _offsets$38145[ebp], eax
; Line 2627
	mov	eax, DWORD PTR _target$38146[ebp]
	add	eax, 2
	mov	DWORD PTR _target$38146[ebp], eax
; Line 2628
	jmp	SHORT $LN8@UConverter@6
$LN9@UConverter@6:
; Line 2630
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _subArgs$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
; Line 2631
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _subArgs$[ebp+16]
	mov	DWORD PTR [eax+16], ecx
; Line 2632
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _subArgs$[ebp+24]
	mov	DWORD PTR [eax+24], ecx
; Line 2635
	mov	eax, DWORD PTR _subArgs$[ebp+4]
	movsx	ecx, BYTE PTR [eax+36]
	test	ecx, ecx
	jle	SHORT $LN5@UConverter@6
; Line 2636
	push	1
	mov	eax, DWORD PTR _subArgs$[ebp+4]
	add	eax, 37					; 00000025H
	push	eax
	call	_uprv_checkValidMemory
	add	esp, 8
	mov	ecx, DWORD PTR _subArgs$[ebp+4]
	movsx	edx, BYTE PTR [ecx+36]
	push	edx
	mov	eax, DWORD PTR _subArgs$[ebp+4]
	add	eax, 37					; 00000025H
	push	eax
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 37					; 00000025H
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN5@UConverter@6:
; Line 2638
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _subArgs$[ebp+4]
	mov	al, BYTE PTR [edx+36]
	mov	BYTE PTR [ecx+36], al
; Line 2640
	mov	eax, DWORD PTR _err$[ebp]
	cmp	DWORD PTR [eax], 15			; 0000000fH
	jne	SHORT $LN11@UConverter@6
; Line 2641
	mov	eax, DWORD PTR _subArgs$[ebp+4]
	movsx	ecx, BYTE PTR [eax+65]
	test	ecx, ecx
	jle	SHORT $LN3@UConverter@6
; Line 2643
	push	1
	mov	eax, DWORD PTR _subArgs$[ebp+4]
	add	eax, 116				; 00000074H
	push	eax
	call	_uprv_checkValidMemory
	add	esp, 8
	mov	ecx, DWORD PTR _subArgs$[ebp+4]
	movsx	edx, BYTE PTR [ecx+65]
	push	edx
	mov	eax, DWORD PTR _subArgs$[ebp+4]
	add	eax, 116				; 00000074H
	push	eax
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 116				; 00000074H
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN3@UConverter@6:
; Line 2645
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _subArgs$[ebp+4]
	mov	al, BYTE PTR [edx+65]
	mov	BYTE PTR [ecx+65], al
; Line 2646
	mov	eax, DWORD PTR _subArgs$[ebp+4]
	mov	BYTE PTR [eax+65], 0
$LN11@UConverter@6:
; Line 2650
	mov	eax, DWORD PTR _err$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	jne	SHORT $LN1@UConverter@6
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [eax+8]
	cmp	edx, DWORD PTR [ecx+12]
	jne	SHORT $escape$38137
$LN1@UConverter@6:
; Line 2651
	jmp	SHORT $LN18@UConverter@6
$escape$38137:
; Line 2659
	mov	eax, DWORD PTR _err$[ebp]
	push	eax
	push	2
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _args$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	?changeState_2022@@YAXPAUUConverter@@PAPBDPBDW4Variant2022@@PAW4UErrorCode@@@Z ; changeState_2022
	add	esp, 20					; 00000014H
; Line 2660
	jmp	$LN13@UConverter@6
$LN18@UConverter@6:
; Line 2661
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN22@UConverter@6
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 300				; 0000012cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN22@UConverter@6:
	DD	1
	DD	$LN21@UConverter@6
$LN21@UConverter@6:
	DD	-56					; ffffffc8H
	DD	28					; 0000001cH
	DD	$LN20@UConverter@6
$LN20@UConverter@6:
	DB	115					; 00000073H
	DB	117					; 00000075H
	DB	98					; 00000062H
	DB	65					; 00000041H
	DB	114					; 00000072H
	DB	103					; 00000067H
	DB	115					; 00000073H
	DB	0
?UConverter_toUnicode_ISO_2022_KR_OFFSETS_LOGIC_IBM@@YAXPAUUConverterToUnicodeArgs@@PAW4UErrorCode@@@Z ENDP ; UConverter_toUnicode_ISO_2022_KR_OFFSETS_LOGIC_IBM
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?getEndOfBuffer_2022@@YAPBDPAPBDPBDC@Z
_TEXT	SEGMENT
_mySource$ = -8						; size = 4
_source$ = 8						; size = 4
_sourceLimit$ = 12					; size = 4
___formal$ = 16						; size = 1
?getEndOfBuffer_2022@@YAPBDPAPBDPBDC@Z PROC		; getEndOfBuffer_2022, COMDAT
; Line 1056
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1058
	mov	eax, DWORD PTR _source$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _mySource$[ebp], ecx
$LN2@getEndOfBu:
; Line 1093
	mov	eax, DWORD PTR _mySource$[ebp]
	cmp	eax, DWORD PTR _sourceLimit$[ebp]
	jae	SHORT $LN1@getEndOfBu
	mov	eax, DWORD PTR _mySource$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 27					; 0000001bH
	je	SHORT $LN1@getEndOfBu
; Line 1094
	mov	eax, DWORD PTR _mySource$[ebp]
	add	eax, 1
	mov	DWORD PTR _mySource$[ebp], eax
; Line 1095
	jmp	SHORT $LN2@getEndOfBu
$LN1@getEndOfBu:
; Line 1096
	mov	eax, DWORD PTR _mySource$[ebp]
; Line 1098
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?getEndOfBuffer_2022@@YAPBDPAPBDPBDC@Z ENDP		; getEndOfBuffer_2022
_TEXT	ENDS
PUBLIC	??_C@_1CE@NGCDFDBE@?$AAc?$AAs?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAC?$AAN?$AAS?$AA_?$AA1?$AA1?$AA6?$AA4?$AA3?$AA_?$AA1?$AA?$AA@ ; `string'
PUBLIC	??_C@_1O@ILAJHGN@?$AAc?$AAs?$AA0?$AA?$DM?$AA1?$AA0?$AA?$AA@ ; `string'
PUBLIC	??_C@_1FO@NKNFLGG@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@ ; `string'
PUBLIC	?__LINE__Var@?1??UConverter_fromUnicode_ISO_2022_CN_OFFSETS_LOGIC@@YAXPAUUConverterFromUnicodeArgs@@PAW4UErrorCode@@@Z@4JA@d3633fb2 ; `UConverter_fromUnicode_ISO_2022_CN_OFFSETS_LOGIC'::`2'::__LINE__Var
PUBLIC	__$ArrayPad$
EXTRN	__imp___wassert:PROC
EXTRN	__RTC_UninitUse:PROC
;	COMDAT ??_C@_1CE@NGCDFDBE@?$AAc?$AAs?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAC?$AAN?$AAS?$AA_?$AA1?$AA1?$AA6?$AA4?$AA3?$AA_?$AA1?$AA?$AA@
CONST	SEGMENT
??_C@_1CE@NGCDFDBE@?$AAc?$AAs?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAC?$AAN?$AAS?$AA_?$AA1?$AA1?$AA6?$AA4?$AA3?$AA_?$AA1?$AA?$AA@ DB 'c'
	DB	00H, 's', 00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, 'C', 00H
	DB	'N', 00H, 'S', 00H, '_', 00H, '1', 00H, '1', 00H, '6', 00H, '4'
	DB	00H, '3', 00H, '_', 00H, '1', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1O@ILAJHGN@?$AAc?$AAs?$AA0?$AA?$DM?$AA1?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_1O@ILAJHGN@?$AAc?$AAs?$AA0?$AA?$DM?$AA1?$AA0?$AA?$AA@ DB 'c', 00H, 's'
	DB	00H, '0', 00H, '<', 00H, '1', 00H, '0', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1FO@NKNFLGG@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@
CONST	SEGMENT
??_C@_1FO@NKNFLGG@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@ DB 'd'
	DB	00H, ':', 00H, '\', 00H, 'm', 00H, 'o', 00H, 'z', 00H, 'i', 00H
	DB	'l', 00H, 'l', 00H, 'a', 00H, '\', 00H, 'i', 00H, 'n', 00H, 't'
	DB	00H, 'l', 00H, '\', 00H, 'i', 00H, 'c', 00H, 'u', 00H, '\', 00H
	DB	's', 00H, 'o', 00H, 'u', 00H, 'r', 00H, 'c', 00H, 'e', 00H, '\'
	DB	00H, 'c', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'o', 00H, 'n', 00H
	DB	'\', 00H, 'u', 00H, 'c', 00H, 'n', 00H, 'v', 00H, '2', 00H, '0'
	DB	00H, '2', 00H, '2', 00H, '.', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??UConverter_fromUnicode_ISO_2022_CN_OFFSETS_LOGIC@@YAXPAUUConverterFromUnicodeArgs@@PAW4UErrorCode@@@Z@4JA@d3633fb2
_DATA	SEGMENT
?__LINE__Var@?1??UConverter_fromUnicode_ISO_2022_CN_OFFSETS_LOGIC@@YAXPAUUConverterFromUnicodeArgs@@PAW4UErrorCode@@@Z@4JA@d3633fb2 DD 0b5aH ; `UConverter_fromUnicode_ISO_2022_CN_OFFSETS_LOGIC'::`2'::__LINE__Var
; Function compile flags: /Odtp /RTCsu /ZI
_DATA	ENDS
;	COMDAT ?UConverter_fromUnicode_ISO_2022_CN_OFFSETS_LOGIC@@YAXPAUUConverterFromUnicodeArgs@@PAW4UErrorCode@@@Z
_TEXT	SEGMENT
tv268 = -504						; size = 4
tv157 = -504						; size = 4
$T45848 = -493						; size = 1
_sourceIndex$38369 = -292				; size = 4
_sourceIndex$38359 = -280				; size = 4
_len2$38315 = -268					; size = 4
_value$38314 = -256					; size = 4
_cs0$38312 = -241					; size = 1
_g$38283 = -229						; size = 1
_cs$38282 = -217					; size = 1
_i$38281 = -208						; size = 4
_trail$38262 = -196					; size = 2
_useFallback$ = -181					; size = 1
_targetValue$ = -172					; size = 4
_choiceCount$ = -160					; size = 4
_choices$ = -148					; size = 3
_len$ = -136						; size = 4
_buffer$ = -124						; size = 8
_sourceChar$ = -108					; size = 4
_offsets$ = -96						; size = 4
_sourceLimit$ = -84					; size = 4
_source$ = -72						; size = 4
_targetLimit$ = -60					; size = 4
_target$ = -48						; size = 4
_pFromU2022State$ = -36					; size = 4
_converterData$ = -24					; size = 4
_cnv$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_args$ = 8						; size = 4
_err$ = 12						; size = 4
?UConverter_fromUnicode_ISO_2022_CN_OFFSETS_LOGIC@@YAXPAUUConverterFromUnicodeArgs@@PAW4UErrorCode@@@Z PROC ; UConverter_fromUnicode_ISO_2022_CN_OFFSETS_LOGIC, COMDAT
; Line 2906
	push	ebp
	mov	ebp, esp
	sub	esp, 504				; 000001f8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-504]
	mov	ecx, 126				; 0000007eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	BYTE PTR $T45848[ebp], 0
; Line 2907
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _cnv$[ebp], ecx
; Line 2910
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _target$[ebp], ecx
; Line 2911
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _targetLimit$[ebp], ecx
; Line 2912
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _source$[ebp], ecx
; Line 2913
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _sourceLimit$[ebp], ecx
; Line 2914
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR _offsets$[ebp], ecx
; Line 2920
	mov	DWORD PTR _targetValue$[ebp], 0
; Line 2924
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _converterData$[ebp], ecx
; Line 2925
	mov	eax, DWORD PTR _converterData$[ebp]
	add	eax, 54					; 00000036H
	mov	DWORD PTR _pFromU2022State$[ebp], eax
; Line 2927
	mov	DWORD PTR _choiceCount$[ebp], 0
; Line 2930
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	DWORD PTR _sourceChar$[ebp], ecx
	cmp	DWORD PTR _sourceChar$[ebp], 0
	je	SHORT $LN73@UConverter@7
	mov	eax, DWORD PTR _target$[ebp]
	cmp	eax, DWORD PTR _targetLimit$[ebp]
	jae	SHORT $LN73@UConverter@7
; Line 2931
	jmp	SHORT $getTrail$38253
	jmp	SHORT $getTrail$38253
$LN73@UConverter@7:
; Line 2934
	mov	eax, DWORD PTR _source$[ebp]
	cmp	eax, DWORD PTR _sourceLimit$[ebp]
	jae	$LN72@UConverter@7
; Line 2935
	mov	eax, DWORD PTR _target$[ebp]
	cmp	eax, DWORD PTR _targetLimit$[ebp]
	jae	$LN71@UConverter@7
; Line 2937
	mov	eax, DWORD PTR _source$[ebp]
	movzx	ecx, WORD PTR [eax]
	mov	DWORD PTR _sourceChar$[ebp], ecx
	mov	edx, DWORD PTR _source$[ebp]
	add	edx, 2
	mov	DWORD PTR _source$[ebp], edx
; Line 2939
	mov	eax, DWORD PTR _sourceChar$[ebp]
	and	eax, -2048				; fffff800H
	cmp	eax, 55296				; 0000d800H
	jne	$LN70@UConverter@7
; Line 2940
	mov	eax, DWORD PTR _sourceChar$[ebp]
	and	eax, 1024				; 00000400H
	jne	SHORT $LN69@UConverter@7
$getTrail$38253:
; Line 2943
	mov	eax, DWORD PTR _source$[ebp]
	cmp	eax, DWORD PTR _sourceLimit$[ebp]
	jae	SHORT $LN68@UConverter@7
; Line 2945
	mov	eax, DWORD PTR _source$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR _trail$38262[ebp], cx
; Line 2946
	movzx	eax, WORD PTR _trail$38262[ebp]
	and	eax, -1024				; fffffc00H
	cmp	eax, 56320				; 0000dc00H
	jne	SHORT $LN67@UConverter@7
; Line 2947
	mov	eax, DWORD PTR _source$[ebp]
	add	eax, 2
	mov	DWORD PTR _source$[ebp], eax
; Line 2948
	mov	eax, DWORD PTR _sourceChar$[ebp]
	shl	eax, 10					; 0000000aH
	movzx	ecx, WORD PTR _trail$38262[ebp]
	lea	edx, DWORD PTR [eax+ecx-56613888]
	mov	DWORD PTR _sourceChar$[ebp], edx
; Line 2949
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	DWORD PTR [eax+56], 0
; Line 2952
	jmp	SHORT $LN66@UConverter@7
$LN67@UConverter@7:
; Line 2955
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 12			; 0000000cH
; Line 2956
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	ecx, DWORD PTR _sourceChar$[ebp]
	mov	DWORD PTR [eax+56], ecx
; Line 2957
	jmp	$LN72@UConverter@7
$LN66@UConverter@7:
; Line 2959
	jmp	SHORT $LN65@UConverter@7
$LN68@UConverter@7:
; Line 2961
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	ecx, DWORD PTR _sourceChar$[ebp]
	mov	DWORD PTR [eax+56], ecx
; Line 2962
	jmp	$LN72@UConverter@7
$LN65@UConverter@7:
; Line 2964
	jmp	SHORT $LN70@UConverter@7
$LN69@UConverter@7:
; Line 2967
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 12			; 0000000cH
; Line 2968
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	ecx, DWORD PTR _sourceChar$[ebp]
	mov	DWORD PTR [eax+56], ecx
; Line 2969
	jmp	$LN72@UConverter@7
$LN70@UConverter@7:
; Line 2974
	cmp	DWORD PTR _sourceChar$[ebp], 127	; 0000007fH
	jg	$LN63@UConverter@7
; Line 2976
	cmp	DWORD PTR _sourceChar$[ebp], 32		; 00000020H
	jge	SHORT $LN62@UConverter@7
	mov	eax, 1
	mov	ecx, DWORD PTR _sourceChar$[ebp]
	shl	eax, cl
	and	eax, 134266880				; 0800c000H
	je	SHORT $LN62@UConverter@7
; Line 2978
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 12			; 0000000cH
; Line 2979
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	ecx, DWORD PTR _sourceChar$[ebp]
	mov	DWORD PTR [eax+56], ecx
; Line 2980
	jmp	$LN72@UConverter@7
$LN62@UConverter@7:
; Line 2984
	mov	eax, DWORD PTR _pFromU2022State$[ebp]
	movsx	ecx, BYTE PTR [eax+4]
	test	ecx, ecx
	jne	SHORT $LN61@UConverter@7
; Line 2985
	mov	al, BYTE PTR _sourceChar$[ebp]
	mov	BYTE PTR _buffer$[ebp], al
; Line 2986
	mov	DWORD PTR _len$[ebp], 1
; Line 2987
	jmp	SHORT $LN60@UConverter@7
$LN61@UConverter@7:
; Line 2988
	mov	BYTE PTR _buffer$[ebp], 15		; 0000000fH
; Line 2989
	mov	BYTE PTR $T45848[ebp], 1
	mov	al, BYTE PTR _sourceChar$[ebp]
	mov	BYTE PTR _buffer$[ebp+1], al
; Line 2990
	mov	DWORD PTR _len$[ebp], 2
; Line 2991
	mov	eax, DWORD PTR _pFromU2022State$[ebp]
	mov	BYTE PTR [eax+4], 0
; Line 2992
	mov	DWORD PTR _choiceCount$[ebp], 0
$LN60@UConverter@7:
; Line 2994
	cmp	DWORD PTR _sourceChar$[ebp], 13		; 0000000dH
	je	SHORT $LN58@UConverter@7
	cmp	DWORD PTR _sourceChar$[ebp], 10		; 0000000aH
	jne	SHORT $LN59@UConverter@7
$LN58@UConverter@7:
; Line 2996
	push	6
	push	0
	mov	eax, DWORD PTR _pFromU2022State$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
; Line 2997
	mov	DWORD PTR _choiceCount$[ebp], 0
$LN59@UConverter@7:
; Line 3000
	jmp	$LN57@UConverter@7
$LN63@UConverter@7:
; Line 3005
	cmp	DWORD PTR _choiceCount$[ebp], 0
	jne	$LN56@UConverter@7
; Line 3007
	mov	eax, DWORD PTR _pFromU2022State$[ebp]
	mov	cl, BYTE PTR [eax+1]
	mov	BYTE PTR _choices$[ebp], cl
; Line 3010
	movsx	eax, BYTE PTR _choices$[ebp]
	test	eax, eax
	jne	SHORT $LN55@UConverter@7
; Line 3011
	mov	BYTE PTR _choices$[ebp], 1
$LN55@UConverter@7:
; Line 3014
	mov	eax, DWORD PTR _converterData$[ebp]
	cmp	DWORD PTR [eax+64], 0
	jne	SHORT $LN54@UConverter@7
; Line 3018
	movsx	eax, BYTE PTR _choices$[ebp]
	cmp	eax, 1
	jne	SHORT $LN53@UConverter@7
; Line 3019
	mov	BYTE PTR _choices$[ebp+1], 33		; 00000021H
; Line 3020
	jmp	SHORT $LN52@UConverter@7
$LN53@UConverter@7:
; Line 3021
	mov	BYTE PTR _choices$[ebp+1], 1
$LN52@UConverter@7:
; Line 3024
	mov	DWORD PTR _choiceCount$[ebp], 2
	jmp	SHORT $LN56@UConverter@7
$LN54@UConverter@7:
; Line 3025
	mov	eax, DWORD PTR _converterData$[ebp]
	cmp	DWORD PTR [eax+64], 1
	jne	SHORT $LN50@UConverter@7
; Line 3029
	mov	al, BYTE PTR _choices$[ebp]
	mov	BYTE PTR tv157[ebp], al
	cmp	BYTE PTR tv157[ebp], 1
	je	SHORT $LN47@UConverter@7
	cmp	BYTE PTR tv157[ebp], 2
	je	SHORT $LN46@UConverter@7
	jmp	SHORT $LN45@UConverter@7
$LN47@UConverter@7:
; Line 3031
	mov	BYTE PTR _choices$[ebp+1], 33		; 00000021H
; Line 3032
	mov	BYTE PTR _choices$[ebp+2], 2
; Line 3033
	jmp	SHORT $LN48@UConverter@7
$LN46@UConverter@7:
; Line 3035
	mov	BYTE PTR _choices$[ebp+1], 1
; Line 3036
	mov	BYTE PTR _choices$[ebp+2], 33		; 00000021H
; Line 3037
	jmp	SHORT $LN48@UConverter@7
$LN45@UConverter@7:
; Line 3039
	mov	BYTE PTR _choices$[ebp+1], 1
; Line 3040
	mov	BYTE PTR _choices$[ebp+2], 2
$LN48@UConverter@7:
; Line 3044
	mov	DWORD PTR _choiceCount$[ebp], 3
; Line 3045
	jmp	SHORT $LN56@UConverter@7
$LN50@UConverter@7:
; Line 3046
	mov	BYTE PTR _choices$[ebp], 33		; 00000021H
; Line 3047
	mov	BYTE PTR _choices$[ebp+1], 1
$LN56@UConverter@7:
; Line 3051
	mov	BYTE PTR _g$38283[ebp], 0
	mov	al, BYTE PTR _g$38283[ebp]
	mov	BYTE PTR _cs$38282[ebp], al
; Line 3057
	mov	DWORD PTR _len$[ebp], 0
; Line 3064
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	cl, BYTE PTR [eax+35]
	mov	BYTE PTR _useFallback$[ebp], cl
; Line 3066
	mov	DWORD PTR _i$38281[ebp], 0
	jmp	SHORT $LN43@UConverter@7
$LN42@UConverter@7:
	mov	eax, DWORD PTR _i$38281[ebp]
	add	eax, 1
	mov	DWORD PTR _i$38281[ebp], eax
$LN43@UConverter@7:
	mov	eax, DWORD PTR _i$38281[ebp]
	cmp	eax, DWORD PTR _choiceCount$[ebp]
	jge	$LN41@UConverter@7
	cmp	DWORD PTR _len$[ebp], 0
	jg	$LN41@UConverter@7
; Line 3067
	mov	eax, DWORD PTR _i$38281[ebp]
	mov	cl, BYTE PTR _choices$[ebp+eax]
	mov	BYTE PTR _cs0$38312[ebp], cl
; Line 3068
	movsx	eax, BYTE PTR _cs0$38312[ebp]
	test	eax, eax
	jle	$LN40@UConverter@7
; Line 3071
	movsx	eax, BYTE PTR _cs0$38312[ebp]
	cmp	eax, 32					; 00000020H
	jl	$LN39@UConverter@7
; Line 3077
	push	2
	movzx	eax, BYTE PTR _useFallback$[ebp]
	push	eax
	lea	ecx, DWORD PTR _value$38314[ebp]
	push	ecx
	mov	edx, DWORD PTR _sourceChar$[ebp]
	push	edx
	mov	eax, DWORD PTR _converterData$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	?MBCS_FROM_UCHAR32_ISO2022@@YAHPAUUConverterSharedData@@HPAICH@Z ; MBCS_FROM_UCHAR32_ISO2022
	add	esp, 20					; 00000014H
	mov	DWORD PTR _len2$38315[ebp], eax
; Line 3078
	cmp	DWORD PTR _len2$38315[ebp], 3
	je	SHORT $LN37@UConverter@7
	cmp	DWORD PTR _len2$38315[ebp], -3		; fffffffdH
	jne	$LN38@UConverter@7
	cmp	DWORD PTR _len$[ebp], 0
	jne	$LN38@UConverter@7
$LN37@UConverter@7:
; Line 3079
	mov	eax, DWORD PTR _value$38314[ebp]
	mov	DWORD PTR _targetValue$[ebp], eax
; Line 3080
	mov	eax, DWORD PTR _value$38314[ebp]
	shr	eax, 16					; 00000010H
	sub	eax, 96					; 00000060H
	mov	BYTE PTR _cs$38282[ebp], al
; Line 3081
	cmp	DWORD PTR _len2$38315[ebp], 0
	jl	SHORT $LN36@UConverter@7
; Line 3082
	mov	DWORD PTR _len$[ebp], 2
; Line 3083
	jmp	SHORT $LN35@UConverter@7
$LN36@UConverter@7:
; Line 3084
	mov	DWORD PTR _len$[ebp], -2		; fffffffeH
; Line 3085
	mov	BYTE PTR _useFallback$[ebp], 0
$LN35@UConverter@7:
; Line 3087
	movsx	eax, BYTE PTR _cs$38282[ebp]
	cmp	eax, 33					; 00000021H
	jne	SHORT $LN34@UConverter@7
; Line 3088
	mov	BYTE PTR _g$38283[ebp], 1
	jmp	SHORT $LN38@UConverter@7
$LN34@UConverter@7:
; Line 3089
	movsx	eax, BYTE PTR _cs$38282[ebp]
	cmp	eax, 34					; 00000022H
	jne	SHORT $LN32@UConverter@7
; Line 3090
	mov	BYTE PTR _g$38283[ebp], 2
	jmp	SHORT $LN38@UConverter@7
$LN32@UConverter@7:
; Line 3091
	mov	eax, DWORD PTR _converterData$[ebp]
	cmp	DWORD PTR [eax+64], 1
	jne	SHORT $LN30@UConverter@7
; Line 3092
	mov	BYTE PTR _g$38283[ebp], 3
; Line 3093
	jmp	SHORT $LN38@UConverter@7
$LN30@UConverter@7:
; Line 3095
	mov	DWORD PTR _len$[ebp], 0
$LN38@UConverter@7:
; Line 3098
	jmp	$LN40@UConverter@7
$LN39@UConverter@7:
; Line 3100
	movsx	eax, BYTE PTR _cs0$38312[ebp]
	cmp	eax, 10					; 0000000aH
	jl	SHORT $LN78@UConverter@7
	mov	ecx, DWORD PTR ?__LINE__Var@?1??UConverter_fromUnicode_ISO_2022_CN_OFFSETS_LOGIC@@YAXPAUUConverterFromUnicodeArgs@@PAW4UErrorCode@@@Z@4JA@d3633fb2
	add	ecx, 194				; 000000c2H
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_1FO@NKNFLGG@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@
	push	OFFSET ??_C@_1O@ILAJHGN@?$AAc?$AAs?$AA0?$AA?$DM?$AA1?$AA0?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN78@UConverter@7:
; Line 3106
	push	1
	movzx	eax, BYTE PTR _useFallback$[ebp]
	push	eax
	lea	ecx, DWORD PTR _value$38314[ebp]
	push	ecx
	mov	edx, DWORD PTR _sourceChar$[ebp]
	push	edx
	movsx	eax, BYTE PTR _cs0$38312[ebp]
	mov	ecx, DWORD PTR _converterData$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	push	edx
	call	?MBCS_FROM_UCHAR32_ISO2022@@YAHPAUUConverterSharedData@@HPAICH@Z ; MBCS_FROM_UCHAR32_ISO2022
	add	esp, 20					; 00000014H
	mov	DWORD PTR _len2$38315[ebp], eax
; Line 3107
	cmp	DWORD PTR _len2$38315[ebp], 2
	je	SHORT $LN26@UConverter@7
	cmp	DWORD PTR _len2$38315[ebp], -2		; fffffffeH
	jne	SHORT $LN40@UConverter@7
	cmp	DWORD PTR _len$[ebp], 0
	jne	SHORT $LN40@UConverter@7
$LN26@UConverter@7:
; Line 3108
	mov	eax, DWORD PTR _value$38314[ebp]
	mov	DWORD PTR _targetValue$[ebp], eax
; Line 3109
	mov	eax, DWORD PTR _len2$38315[ebp]
	mov	DWORD PTR _len$[ebp], eax
; Line 3110
	mov	al, BYTE PTR _cs0$38312[ebp]
	mov	BYTE PTR _cs$38282[ebp], al
; Line 3111
	mov	BYTE PTR _g$38283[ebp], 1
; Line 3112
	mov	BYTE PTR _useFallback$[ebp], 0
$LN40@UConverter@7:
; Line 3116
	jmp	$LN42@UConverter@7
$LN41@UConverter@7:
; Line 3118
	cmp	DWORD PTR _len$[ebp], 0
	je	$LN25@UConverter@7
; Line 3119
	mov	DWORD PTR _len$[ebp], 0
; Line 3122
	movsx	eax, BYTE PTR _cs$38282[ebp]
	movsx	ecx, BYTE PTR _g$38283[ebp]
	mov	edx, DWORD PTR _pFromU2022State$[ebp]
	movsx	ecx, BYTE PTR [edx+ecx]
	cmp	eax, ecx
	je	$LN24@UConverter@7
; Line 3123
	movsx	eax, BYTE PTR _cs$38282[ebp]
	cmp	eax, 3
	jge	SHORT $LN23@UConverter@7
; Line 3124
	push	1
	movsx	eax, BYTE PTR _cs$38282[ebp]
	mov	ecx, DWORD PTR _escSeqCharsCN[eax*4]
	push	ecx
	call	_uprv_checkValidMemory
	add	esp, 8
	push	4
	movsx	edx, BYTE PTR _cs$38282[ebp]
	mov	eax, DWORD PTR _escSeqCharsCN[edx*4]
	push	eax
	mov	BYTE PTR $T45848[ebp], 1
	lea	ecx, DWORD PTR _buffer$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 3125
	jmp	SHORT $LN22@UConverter@7
$LN23@UConverter@7:
; Line 3126
	movsx	eax, BYTE PTR _cs$38282[ebp]
	cmp	eax, 33					; 00000021H
	jge	SHORT $LN79@UConverter@7
	mov	ecx, DWORD PTR ?__LINE__Var@?1??UConverter_fromUnicode_ISO_2022_CN_OFFSETS_LOGIC@@YAXPAUUConverterFromUnicodeArgs@@PAW4UErrorCode@@@Z@4JA@d3633fb2
	add	ecx, 220				; 000000dcH
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_1FO@NKNFLGG@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@
	push	OFFSET ??_C@_1CE@NGCDFDBE@?$AAc?$AAs?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAC?$AAN?$AAS?$AA_?$AA1?$AA1?$AA6?$AA4?$AA3?$AA_?$AA1?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN79@UConverter@7:
; Line 3127
	push	1
	movsx	eax, BYTE PTR _cs$38282[ebp]
	mov	ecx, DWORD PTR _escSeqCharsCN[eax*4-120]
	push	ecx
	call	_uprv_checkValidMemory
	add	esp, 8
	push	4
	movsx	edx, BYTE PTR _cs$38282[ebp]
	mov	eax, DWORD PTR _escSeqCharsCN[edx*4-120]
	push	eax
	mov	BYTE PTR $T45848[ebp], 1
	lea	ecx, DWORD PTR _buffer$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN22@UConverter@7:
; Line 3129
	mov	DWORD PTR _len$[ebp], 4
; Line 3130
	movsx	eax, BYTE PTR _g$38283[ebp]
	mov	ecx, DWORD PTR _pFromU2022State$[ebp]
	mov	dl, BYTE PTR _cs$38282[ebp]
	mov	BYTE PTR [ecx+eax], dl
; Line 3131
	movsx	eax, BYTE PTR _g$38283[ebp]
	cmp	eax, 1
	jne	SHORT $LN24@UConverter@7
; Line 3133
	mov	DWORD PTR _choiceCount$[ebp], 0
$LN24@UConverter@7:
; Line 3138
	movsx	eax, BYTE PTR _g$38283[ebp]
	mov	ecx, DWORD PTR _pFromU2022State$[ebp]
	movsx	edx, BYTE PTR [ecx+4]
	cmp	eax, edx
	je	$LN20@UConverter@7
; Line 3139
	mov	al, BYTE PTR _g$38283[ebp]
	mov	BYTE PTR tv268[ebp], al
	cmp	BYTE PTR tv268[ebp], 1
	je	SHORT $LN17@UConverter@7
	cmp	BYTE PTR tv268[ebp], 2
	je	SHORT $LN16@UConverter@7
	jmp	SHORT $LN15@UConverter@7
$LN17@UConverter@7:
; Line 3141
	mov	BYTE PTR $T45848[ebp], 1
	mov	eax, DWORD PTR _len$[ebp]
	mov	BYTE PTR _buffer$[ebp+eax], 14		; 0000000eH
	mov	ecx, DWORD PTR _len$[ebp]
	add	ecx, 1
	mov	DWORD PTR _len$[ebp], ecx
; Line 3144
	mov	eax, DWORD PTR _pFromU2022State$[ebp]
	mov	BYTE PTR [eax+4], 1
; Line 3145
	jmp	$LN20@UConverter@7
$LN16@UConverter@7:
; Line 3147
	mov	BYTE PTR $T45848[ebp], 1
	mov	eax, DWORD PTR _len$[ebp]
	mov	BYTE PTR _buffer$[ebp+eax], 27		; 0000001bH
	mov	ecx, DWORD PTR _len$[ebp]
	add	ecx, 1
	mov	DWORD PTR _len$[ebp], ecx
; Line 3148
	mov	BYTE PTR $T45848[ebp], 1
	mov	eax, DWORD PTR _len$[ebp]
	mov	BYTE PTR _buffer$[ebp+eax], 78		; 0000004eH
	mov	ecx, DWORD PTR _len$[ebp]
	add	ecx, 1
	mov	DWORD PTR _len$[ebp], ecx
; Line 3149
	jmp	SHORT $LN20@UConverter@7
$LN15@UConverter@7:
; Line 3151
	mov	BYTE PTR $T45848[ebp], 1
	mov	eax, DWORD PTR _len$[ebp]
	mov	BYTE PTR _buffer$[ebp+eax], 27		; 0000001bH
	mov	ecx, DWORD PTR _len$[ebp]
	add	ecx, 1
	mov	DWORD PTR _len$[ebp], ecx
; Line 3152
	mov	BYTE PTR $T45848[ebp], 1
	mov	eax, DWORD PTR _len$[ebp]
	mov	BYTE PTR _buffer$[ebp+eax], 79		; 0000004fH
	mov	ecx, DWORD PTR _len$[ebp]
	add	ecx, 1
	mov	DWORD PTR _len$[ebp], ecx
$LN20@UConverter@7:
; Line 3158
	mov	eax, DWORD PTR _targetValue$[ebp]
	shr	eax, 8
	mov	BYTE PTR $T45848[ebp], 1
	mov	ecx, DWORD PTR _len$[ebp]
	mov	BYTE PTR _buffer$[ebp+ecx], al
	mov	edx, DWORD PTR _len$[ebp]
	add	edx, 1
	mov	DWORD PTR _len$[ebp], edx
; Line 3159
	mov	BYTE PTR $T45848[ebp], 1
	mov	eax, DWORD PTR _len$[ebp]
	mov	cl, BYTE PTR _targetValue$[ebp]
	mov	BYTE PTR _buffer$[ebp+eax], cl
	mov	edx, DWORD PTR _len$[ebp]
	add	edx, 1
	mov	DWORD PTR _len$[ebp], edx
; Line 3160
	jmp	SHORT $LN57@UConverter@7
$LN25@UConverter@7:
; Line 3164
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 10			; 0000000aH
; Line 3165
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	ecx, DWORD PTR _sourceChar$[ebp]
	mov	DWORD PTR [eax+56], ecx
; Line 3166
	jmp	$LN72@UConverter@7
$LN57@UConverter@7:
; Line 3171
	cmp	DWORD PTR _len$[ebp], 1
	jne	SHORT $LN13@UConverter@7
; Line 3172
	mov	eax, DWORD PTR _target$[ebp]
	mov	cl, BYTE PTR _buffer$[ebp]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 1
	mov	DWORD PTR _target$[ebp], edx
; Line 3173
	cmp	DWORD PTR _offsets$[ebp], 0
	je	SHORT $LN12@UConverter@7
; Line 3174
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _source$[ebp]
	sub	ecx, DWORD PTR [eax+8]
	sar	ecx, 1
	sub	ecx, 1
	mov	edx, DWORD PTR _offsets$[ebp]
	mov	DWORD PTR [edx], ecx
	mov	eax, DWORD PTR _offsets$[ebp]
	add	eax, 4
	mov	DWORD PTR _offsets$[ebp], eax
$LN12@UConverter@7:
; Line 3175
	jmp	$LN11@UConverter@7
$LN13@UConverter@7:
; Line 3176
	cmp	DWORD PTR _len$[ebp], 2
	jne	$LN10@UConverter@7
	mov	eax, DWORD PTR _target$[ebp]
	add	eax, 2
	cmp	eax, DWORD PTR _targetLimit$[ebp]
	ja	$LN10@UConverter@7
; Line 3177
	mov	eax, DWORD PTR _target$[ebp]
	mov	cl, BYTE PTR _buffer$[ebp]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 1
	mov	DWORD PTR _target$[ebp], edx
; Line 3178
	cmp	BYTE PTR $T45848[ebp], 0
	jne	SHORT $LN80@UConverter@7
	push	OFFSET $LN81@UConverter@7
	call	__RTC_UninitUse
	add	esp, 4
$LN80@UConverter@7:
	mov	eax, DWORD PTR _target$[ebp]
	mov	cl, BYTE PTR _buffer$[ebp+1]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 1
	mov	DWORD PTR _target$[ebp], edx
; Line 3179
	cmp	DWORD PTR _offsets$[ebp], 0
	je	SHORT $LN9@UConverter@7
; Line 3180
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _source$[ebp]
	sub	ecx, DWORD PTR [eax+8]
	sar	ecx, 1
	mov	edx, 65535				; 0000ffffH
	cmp	edx, DWORD PTR _sourceChar$[ebp]
	sbb	eax, eax
	neg	eax
	add	eax, 1
	sub	ecx, eax
	mov	DWORD PTR _sourceIndex$38359[ebp], ecx
; Line 3181
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _sourceIndex$38359[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
; Line 3182
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _sourceIndex$38359[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _offsets$[ebp]
	add	edx, 4
	mov	DWORD PTR _offsets$[ebp], edx
$LN9@UConverter@7:
; Line 3184
	jmp	SHORT $LN11@UConverter@7
$LN10@UConverter@7:
; Line 3190
	mov	eax, DWORD PTR _err$[ebp]
	push	eax
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR _source$[ebp]
	sub	edx, DWORD PTR [ecx+8]
	sar	edx, 1
	mov	eax, 65535				; 0000ffffH
	cmp	eax, DWORD PTR _sourceChar$[ebp]
	sbb	ecx, ecx
	neg	ecx
	add	ecx, 1
	sub	edx, ecx
	push	edx
	lea	edx, DWORD PTR _offsets$[ebp]
	push	edx
	mov	eax, DWORD PTR _targetLimit$[ebp]
	push	eax
	lea	ecx, DWORD PTR _target$[ebp]
	push	ecx
	mov	edx, DWORD PTR _len$[ebp]
	push	edx
	mov	BYTE PTR $T45848[ebp], 1
	lea	eax, DWORD PTR _buffer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cnv$[ebp]
	push	ecx
	call	?fromUWriteUInt8@@YAXPAUUConverter@@PBDHPAPAE1PAPAHHPAW4UErrorCode@@@Z ; fromUWriteUInt8
	add	esp, 32					; 00000020H
; Line 3191
	mov	eax, DWORD PTR _err$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN11@UConverter@7
; Line 3192
	jmp	SHORT $LN72@UConverter@7
$LN11@UConverter@7:
; Line 3196
	jmp	SHORT $LN6@UConverter@7
$LN71@UConverter@7:
; Line 3197
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
; Line 3198
	jmp	SHORT $LN72@UConverter@7
$LN6@UConverter@7:
; Line 3201
	jmp	$LN73@UConverter@7
$LN72@UConverter@7:
; Line 3216
	mov	eax, DWORD PTR _err$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_SUCCESS@@YACW4UErrorCode@@@Z		; U_SUCCESS
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	$LN5@UConverter@7
	mov	eax, DWORD PTR _pFromU2022State$[ebp]
	movsx	ecx, BYTE PTR [eax+4]
	test	ecx, ecx
	je	$LN5@UConverter@7
	mov	eax, DWORD PTR _args$[ebp]
	movsx	ecx, BYTE PTR [eax+2]
	test	ecx, ecx
	je	$LN5@UConverter@7
	mov	eax, DWORD PTR _source$[ebp]
	cmp	eax, DWORD PTR _sourceLimit$[ebp]
	jb	$LN5@UConverter@7
	mov	eax, DWORD PTR _cnv$[ebp]
	cmp	DWORD PTR [eax+56], 0
	jne	$LN5@UConverter@7
; Line 3220
	mov	eax, DWORD PTR _pFromU2022State$[ebp]
	mov	BYTE PTR [eax+4], 0
; Line 3230
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _source$[ebp]
	sub	ecx, DWORD PTR [eax+8]
	sar	ecx, 1
	mov	DWORD PTR _sourceIndex$38369[ebp], ecx
; Line 3231
	cmp	DWORD PTR _sourceIndex$38369[ebp], 0
	jle	SHORT $LN4@UConverter@7
; Line 3232
	mov	eax, DWORD PTR _sourceIndex$38369[ebp]
	sub	eax, 1
	mov	DWORD PTR _sourceIndex$38369[ebp], eax
; Line 3235
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _sourceIndex$38369[ebp]
	movzx	eax, WORD PTR [ecx+edx*2]
	and	eax, -1024				; fffffc00H
	cmp	eax, 56320				; 0000dc00H
	jne	SHORT $LN3@UConverter@7
	cmp	DWORD PTR _sourceIndex$38369[ebp], 0
	je	SHORT $LN2@UConverter@7
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _sourceIndex$38369[ebp]
	movzx	eax, WORD PTR [ecx+edx*2-2]
	and	eax, -1024				; fffffc00H
	cmp	eax, 55296				; 0000d800H
	jne	SHORT $LN3@UConverter@7
$LN2@UConverter@7:
; Line 3236
	mov	eax, DWORD PTR _sourceIndex$38369[ebp]
	sub	eax, 1
	mov	DWORD PTR _sourceIndex$38369[ebp], eax
$LN3@UConverter@7:
; Line 3238
	jmp	SHORT $LN1@UConverter@7
$LN4@UConverter@7:
; Line 3239
	mov	DWORD PTR _sourceIndex$38369[ebp], -1
$LN1@UConverter@7:
; Line 3247
	mov	eax, DWORD PTR _err$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sourceIndex$38369[ebp]
	push	ecx
	lea	edx, DWORD PTR _offsets$[ebp]
	push	edx
	mov	eax, DWORD PTR _targetLimit$[ebp]
	push	eax
	lea	ecx, DWORD PTR _target$[ebp]
	push	ecx
	push	1
	push	OFFSET _SHIFT_IN_STR
	mov	edx, DWORD PTR _cnv$[ebp]
	push	edx
	call	?fromUWriteUInt8@@YAXPAUUConverter@@PBDHPAPAE1PAPAHHPAW4UErrorCode@@@Z ; fromUWriteUInt8
	add	esp, 32					; 00000020H
$LN5@UConverter@7:
; Line 3251
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _source$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 3252
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _target$[ebp]
	mov	DWORD PTR [eax+16], ecx
; Line 3253
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN87@UConverter@7
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 504				; 000001f8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN87@UConverter@7:
	DD	5
	DD	$LN86@UConverter@7
$LN86@UConverter@7:
	DD	-124					; ffffff84H
	DD	8
	DD	$LN81@UConverter@7
	DD	-48					; ffffffd0H
	DD	4
	DD	$LN82@UConverter@7
	DD	-96					; ffffffa0H
	DD	4
	DD	$LN83@UConverter@7
	DD	-148					; ffffff6cH
	DD	3
	DD	$LN84@UConverter@7
	DD	-256					; ffffff00H
	DD	4
	DD	$LN85@UConverter@7
$LN85@UConverter@7:
	DB	118					; 00000076H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	117					; 00000075H
	DB	101					; 00000065H
	DB	0
$LN84@UConverter@7:
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	111					; 0000006fH
	DB	105					; 00000069H
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
$LN83@UConverter@7:
	DB	111					; 0000006fH
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	115					; 00000073H
	DB	0
$LN82@UConverter@7:
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	103					; 00000067H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	0
$LN81@UConverter@7:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
?UConverter_fromUnicode_ISO_2022_CN_OFFSETS_LOGIC@@YAXPAUUConverterFromUnicodeArgs@@PAW4UErrorCode@@@Z ENDP ; UConverter_fromUnicode_ISO_2022_CN_OFFSETS_LOGIC
_TEXT	ENDS
PUBLIC	??_C@_1BK@ENOKOAEN@?$AAt?$AAe?$AAm?$AAp?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?$DM?$AA1?$AA0?$AA?$AA@ ; `string'
PUBLIC	?__LINE__Var@?1??UConverter_toUnicode_ISO_2022_CN_OFFSETS_LOGIC@@YAXPAUUConverterToUnicodeArgs@@PAW4UErrorCode@@@Z@4JA@d3633fb2 ; `UConverter_toUnicode_ISO_2022_CN_OFFSETS_LOGIC'::`2'::__LINE__Var
;	COMDAT ??_C@_1BK@ENOKOAEN@?$AAt?$AAe?$AAm?$AAp?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?$DM?$AA1?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_1BK@ENOKOAEN@?$AAt?$AAe?$AAm?$AAp?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?$DM?$AA1?$AA0?$AA?$AA@ DB 't'
	DB	00H, 'e', 00H, 'm', 00H, 'p', 00H, 'S', 00H, 't', 00H, 'a', 00H
	DB	't', 00H, 'e', 00H, '<', 00H, '1', 00H, '0', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??UConverter_toUnicode_ISO_2022_CN_OFFSETS_LOGIC@@YAXPAUUConverterToUnicodeArgs@@PAW4UErrorCode@@@Z@4JA@d3633fb2
_DATA	SEGMENT
?__LINE__Var@?1??UConverter_toUnicode_ISO_2022_CN_OFFSETS_LOGIC@@YAXPAUUConverterToUnicodeArgs@@PAW4UErrorCode@@@Z@4JA@d3633fb2 DD 0cbaH ; `UConverter_toUnicode_ISO_2022_CN_OFFSETS_LOGIC'::`2'::__LINE__Var
; Function compile flags: /Odtp /RTCsu /ZI
_DATA	ENDS
;	COMDAT ?UConverter_toUnicode_ISO_2022_CN_OFFSETS_LOGIC@@YAXPAUUConverterToUnicodeArgs@@PAW4UErrorCode@@@Z
_TEXT	SEGMENT
tv90 = -388						; size = 4
_trailByte$38428 = -185					; size = 1
_trailIsOk$38427 = -176					; size = 4
_leadIsOk$38426 = -164					; size = 4
_tempBufLen$38425 = -152				; size = 4
_tempState$38424 = -140					; size = 4
_cnv$38423 = -128					; size = 4
_toULengthBefore$38414 = -113				; size = 1
_mySourceBefore$38413 = -104				; size = 4
_pToU2022State$ = -92					; size = 4
_myData$ = -80						; size = 4
_mySourceChar$ = -68					; size = 4
_targetUniChar$ = -56					; size = 4
_mySourceLimit$ = -44					; size = 4
_myTarget$ = -32					; size = 4
_mySource$ = -20					; size = 4
_tempBuf$ = -8						; size = 3
_args$ = 8						; size = 4
_err$ = 12						; size = 4
?UConverter_toUnicode_ISO_2022_CN_OFFSETS_LOGIC@@YAXPAUUConverterToUnicodeArgs@@PAW4UErrorCode@@@Z PROC ; UConverter_toUnicode_ISO_2022_CN_OFFSETS_LOGIC, COMDAT
; Line 3258
	push	ebp
	mov	ebp, esp
	sub	esp, 388				; 00000184H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-388]
	mov	ecx, 97					; 00000061H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 3260
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _mySource$[ebp], ecx
; Line 3261
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _myTarget$[ebp], ecx
; Line 3262
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _mySourceLimit$[ebp], ecx
; Line 3263
	mov	DWORD PTR _targetUniChar$[ebp], 0
; Line 3264
	mov	DWORD PTR _mySourceChar$[ebp], 0
; Line 3268
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _myData$[ebp], edx
; Line 3269
	mov	eax, DWORD PTR _myData$[ebp]
	add	eax, 48					; 00000030H
	mov	DWORD PTR _pToU2022State$[ebp], eax
; Line 3271
	mov	eax, DWORD PTR _myData$[ebp]
	cmp	DWORD PTR [eax+60], 0
	je	SHORT $LN43@UConverter@8
; Line 3273
	jmp	$escape$38392
	jmp	$escape$38392
	jmp	SHORT $LN38@UConverter@8
$LN43@UConverter@8:
; Line 3274
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	movsx	edx, BYTE PTR [ecx+36]
	cmp	edx, 1
	jne	SHORT $LN38@UConverter@8
	mov	eax, DWORD PTR _mySource$[ebp]
	cmp	eax, DWORD PTR _mySourceLimit$[ebp]
	jae	SHORT $LN38@UConverter@8
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _myTarget$[ebp]
	cmp	ecx, DWORD PTR [eax+20]
	jae	SHORT $LN38@UConverter@8
; Line 3276
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	movzx	edx, BYTE PTR [ecx+37]
	mov	DWORD PTR _mySourceChar$[ebp], edx
; Line 3277
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx+36], 0
; Line 3278
	mov	DWORD PTR _targetUniChar$[ebp], 65535	; 0000ffffH
; Line 3279
	jmp	$getTrailByte$38396
	jmp	$getTrailByte$38396
$LN38@UConverter@8:
; Line 3282
	mov	eax, DWORD PTR _mySource$[ebp]
	cmp	eax, DWORD PTR _mySourceLimit$[ebp]
	jae	$endloop$38451
; Line 3284
	mov	DWORD PTR _targetUniChar$[ebp], 65535	; 0000ffffH
; Line 3286
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _myTarget$[ebp]
	cmp	ecx, DWORD PTR [eax+20]
	jae	$LN36@UConverter@8
; Line 3288
	mov	eax, DWORD PTR _mySource$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _mySourceChar$[ebp], ecx
	mov	edx, DWORD PTR _mySource$[ebp]
	add	edx, 1
	mov	DWORD PTR _mySource$[ebp], edx
; Line 3290
	mov	eax, DWORD PTR _mySourceChar$[ebp]
	mov	DWORD PTR tv90[ebp], eax
	mov	ecx, DWORD PTR tv90[ebp]
	sub	ecx, 10					; 0000000aH
	mov	DWORD PTR tv90[ebp], ecx
	cmp	DWORD PTR tv90[ebp], 17			; 00000011H
	ja	$LN24@UConverter@8
	mov	edx, DWORD PTR tv90[ebp]
	movzx	eax, BYTE PTR $LN48@UConverter@8[edx]
	jmp	DWORD PTR $LN53@UConverter@8[eax*4]
$LN33@UConverter@8:
; Line 3292
	mov	eax, DWORD PTR _pToU2022State$[ebp]
	mov	BYTE PTR [eax+4], 0
; Line 3293
	mov	eax, DWORD PTR _myData$[ebp]
	movsx	ecx, BYTE PTR [eax+68]
	test	ecx, ecx
	je	SHORT $LN32@UConverter@8
; Line 3294
	mov	eax, DWORD PTR _myData$[ebp]
	mov	BYTE PTR [eax+68], 0
; Line 3295
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 18			; 00000012H
; Line 3296
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+256], 2
; Line 3297
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	dl, BYTE PTR _mySourceChar$[ebp]
	mov	BYTE PTR [ecx+37], dl
; Line 3298
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx+36], 1
; Line 3299
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _myTarget$[ebp]
	mov	DWORD PTR [eax+16], ecx
; Line 3300
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _mySource$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 3301
	jmp	$LN44@UConverter@8
$LN32@UConverter@8:
; Line 3303
	jmp	$LN38@UConverter@8
$LN31@UConverter@8:
; Line 3306
	mov	eax, DWORD PTR _pToU2022State$[ebp]
	movsx	ecx, BYTE PTR [eax+1]
	test	ecx, ecx
	je	SHORT $LN30@UConverter@8
; Line 3307
	mov	eax, DWORD PTR _pToU2022State$[ebp]
	mov	BYTE PTR [eax+4], 1
; Line 3308
	mov	eax, DWORD PTR _myData$[ebp]
	mov	BYTE PTR [eax+68], 1
; Line 3309
	jmp	$LN38@UConverter@8
; Line 3310
	jmp	SHORT $LN28@UConverter@8
$LN30@UConverter@8:
; Line 3312
	mov	eax, DWORD PTR _myData$[ebp]
	mov	BYTE PTR [eax+68], 0
; Line 3313
	jmp	$LN34@UConverter@8
$LN28@UConverter@8:
; Line 3317
	mov	eax, DWORD PTR _mySource$[ebp]
	sub	eax, 1
	mov	DWORD PTR _mySource$[ebp], eax
$escape$38392:
; Line 3320
	mov	eax, DWORD PTR _mySource$[ebp]
	mov	DWORD PTR _mySourceBefore$38413[ebp], eax
; Line 3321
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	dl, BYTE PTR [ecx+36]
	mov	BYTE PTR _toULengthBefore$38414[ebp], dl
; Line 3324
	mov	eax, DWORD PTR _err$[ebp]
	push	eax
	push	3
	mov	ecx, DWORD PTR _mySourceLimit$[ebp]
	push	ecx
	lea	edx, DWORD PTR _mySource$[ebp]
	push	edx
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	?changeState_2022@@YAXPAUUConverter@@PAPBDPBDW4Variant2022@@PAW4UErrorCode@@@Z ; changeState_2022
	add	esp, 20					; 00000014H
; Line 3327
	mov	eax, DWORD PTR _myData$[ebp]
	cmp	DWORD PTR [eax+60], 0
	jne	SHORT $LN27@UConverter@8
	mov	eax, DWORD PTR _err$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_SUCCESS@@YACW4UErrorCode@@@Z		; U_SUCCESS
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN27@UConverter@8
	mov	eax, DWORD PTR _myData$[ebp]
	movsx	ecx, BYTE PTR [eax+68]
	test	ecx, ecx
	je	SHORT $LN27@UConverter@8
; Line 3328
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 18			; 00000012H
; Line 3329
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+256], 2
; Line 3330
	movsx	eax, BYTE PTR _toULengthBefore$38414[ebp]
	mov	ecx, DWORD PTR _mySource$[ebp]
	sub	ecx, DWORD PTR _mySourceBefore$38413[ebp]
	add	eax, ecx
	mov	edx, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	mov	BYTE PTR [ecx+36], al
$LN27@UConverter@8:
; Line 3335
	mov	eax, DWORD PTR _err$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN26@UConverter@8
; Line 3336
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _myTarget$[ebp]
	mov	DWORD PTR [eax+16], ecx
; Line 3337
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _mySource$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 3338
	mov	eax, DWORD PTR _myData$[ebp]
	mov	BYTE PTR [eax+68], 0
; Line 3339
	jmp	$LN44@UConverter@8
$LN26@UConverter@8:
; Line 3341
	jmp	$LN38@UConverter@8
$LN25@UConverter@8:
; Line 3348
	push	6
	push	0
	mov	eax, DWORD PTR _pToU2022State$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
$LN24@UConverter@8:
; Line 3352
	mov	eax, DWORD PTR _myData$[ebp]
	mov	BYTE PTR [eax+68], 0
; Line 3353
	mov	eax, DWORD PTR _pToU2022State$[ebp]
	movsx	ecx, BYTE PTR [eax+4]
	test	ecx, ecx
	je	$LN23@UConverter@8
; Line 3354
	mov	eax, DWORD PTR _mySource$[ebp]
	cmp	eax, DWORD PTR _mySourceLimit$[ebp]
	jae	$LN22@UConverter@8
$getTrailByte$38396:
; Line 3361
	mov	eax, DWORD PTR _mySource$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _trailByte$38428[ebp], cl
; Line 3372
	mov	eax, DWORD PTR _mySourceChar$[ebp]
	sub	eax, 33					; 00000021H
	movzx	ecx, al
	xor	edx, edx
	cmp	ecx, 93					; 0000005dH
	setle	dl
	mov	DWORD PTR _leadIsOk$38426[ebp], edx
; Line 3373
	movzx	eax, BYTE PTR _trailByte$38428[ebp]
	sub	eax, 33					; 00000021H
	movzx	ecx, al
	xor	edx, edx
	cmp	ecx, 93					; 0000005dH
	setle	dl
	mov	DWORD PTR _trailIsOk$38427[ebp], edx
; Line 3374
	cmp	DWORD PTR _leadIsOk$38426[ebp], 0
	je	$LN21@UConverter@8
	cmp	DWORD PTR _trailIsOk$38427[ebp], 0
	je	$LN21@UConverter@8
; Line 3375
	mov	eax, DWORD PTR _mySource$[ebp]
	add	eax, 1
	mov	DWORD PTR _mySource$[ebp], eax
; Line 3376
	mov	eax, DWORD PTR _pToU2022State$[ebp]
	movsx	ecx, BYTE PTR [eax+4]
	mov	edx, DWORD PTR _pToU2022State$[ebp]
	movsx	eax, BYTE PTR [edx+ecx]
	mov	DWORD PTR _tempState$38424[ebp], eax
; Line 3377
	cmp	DWORD PTR _tempState$38424[ebp], 32	; 00000020H
	jl	SHORT $LN20@UConverter@8
; Line 3378
	mov	eax, DWORD PTR _myData$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _cnv$38423[ebp], ecx
; Line 3379
	mov	eax, DWORD PTR _tempState$38424[ebp]
	add	eax, 96					; 00000060H
	mov	BYTE PTR _tempBuf$[ebp], al
; Line 3380
	mov	al, BYTE PTR _mySourceChar$[ebp]
	mov	BYTE PTR _tempBuf$[ebp+1], al
; Line 3381
	mov	al, BYTE PTR _trailByte$38428[ebp]
	mov	BYTE PTR _tempBuf$[ebp+2], al
; Line 3382
	mov	DWORD PTR _tempBufLen$38425[ebp], 3
; Line 3384
	jmp	SHORT $LN19@UConverter@8
$LN20@UConverter@8:
; Line 3385
	cmp	DWORD PTR _tempState$38424[ebp], 10	; 0000000aH
	jl	SHORT $LN46@UConverter@8
	mov	eax, DWORD PTR ?__LINE__Var@?1??UConverter_toUnicode_ISO_2022_CN_OFFSETS_LOGIC@@YAXPAUUConverterToUnicodeArgs@@PAW4UErrorCode@@@Z@4JA@d3633fb2
	add	eax, 127				; 0000007fH
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1FO@NKNFLGG@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@
	push	OFFSET ??_C@_1BK@ENOKOAEN@?$AAt?$AAe?$AAm?$AAp?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?$DM?$AA1?$AA0?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN46@UConverter@8:
; Line 3386
	mov	eax, DWORD PTR _tempState$38424[ebp]
	mov	ecx, DWORD PTR _myData$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _cnv$38423[ebp], edx
; Line 3387
	mov	al, BYTE PTR _mySourceChar$[ebp]
	mov	BYTE PTR _tempBuf$[ebp], al
; Line 3388
	mov	al, BYTE PTR _trailByte$38428[ebp]
	mov	BYTE PTR _tempBuf$[ebp+1], al
; Line 3389
	mov	DWORD PTR _tempBufLen$38425[ebp], 2
$LN19@UConverter@8:
; Line 3391
	push	0
	mov	eax, DWORD PTR _tempBufLen$38425[ebp]
	push	eax
	lea	ecx, DWORD PTR _tempBuf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cnv$38423[ebp]
	push	edx
	call	_ucnv_MBCSSimpleGetNextUChar_56
	add	esp, 16					; 00000010H
	mov	DWORD PTR _targetUniChar$[ebp], eax
; Line 3392
	mov	eax, DWORD PTR _mySourceChar$[ebp]
	shl	eax, 8
	movzx	ecx, BYTE PTR _trailByte$38428[ebp]
	or	eax, ecx
	mov	DWORD PTR _mySourceChar$[ebp], eax
	jmp	SHORT $LN18@UConverter@8
$LN21@UConverter@8:
; Line 3393
	cmp	DWORD PTR _trailIsOk$38427[ebp], 0
	jne	SHORT $LN18@UConverter@8
	movzx	eax, BYTE PTR _trailByte$38428[ebp]
	cmp	eax, 32					; 00000020H
	jge	SHORT $LN16@UConverter@8
	movzx	ecx, BYTE PTR _trailByte$38428[ebp]
	mov	eax, 1
	shl	eax, cl
	and	eax, 134266880				; 0800c000H
	jne	SHORT $LN18@UConverter@8
$LN16@UConverter@8:
; Line 3395
	mov	eax, DWORD PTR _mySource$[ebp]
	add	eax, 1
	mov	DWORD PTR _mySource$[ebp], eax
; Line 3397
	mov	eax, DWORD PTR _mySourceChar$[ebp]
	shl	eax, 8
	or	eax, 65536				; 00010000H
	movzx	ecx, BYTE PTR _trailByte$38428[ebp]
	or	eax, ecx
	mov	DWORD PTR _mySourceChar$[ebp], eax
$LN18@UConverter@8:
; Line 3399
	mov	eax, DWORD PTR _pToU2022State$[ebp]
	movsx	ecx, BYTE PTR [eax+4]
	cmp	ecx, 2
	jl	SHORT $LN15@UConverter@8
; Line 3401
	mov	eax, DWORD PTR _pToU2022State$[ebp]
	mov	ecx, DWORD PTR _pToU2022State$[ebp]
	mov	dl, BYTE PTR [ecx+5]
	mov	BYTE PTR [eax+4], dl
$LN15@UConverter@8:
; Line 3403
	jmp	SHORT $LN14@UConverter@8
$LN22@UConverter@8:
; Line 3404
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	dl, BYTE PTR _mySourceChar$[ebp]
	mov	BYTE PTR [ecx+37], dl
; Line 3405
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx+36], 1
; Line 3406
	jmp	$endloop$38451
	jmp	$endloop$38451
$LN14@UConverter@8:
; Line 3409
	jmp	SHORT $LN34@UConverter@8
$LN23@UConverter@8:
; Line 3410
	cmp	DWORD PTR _mySourceChar$[ebp], 127	; 0000007fH
	ja	SHORT $LN34@UConverter@8
; Line 3411
	movzx	eax, WORD PTR _mySourceChar$[ebp]
	mov	DWORD PTR _targetUniChar$[ebp], eax
$LN34@UConverter@8:
; Line 3416
	cmp	DWORD PTR _targetUniChar$[ebp], 65534	; 0000fffeH
	jae	SHORT $LN10@UConverter@8
; Line 3417
	mov	eax, DWORD PTR _args$[ebp]
	cmp	DWORD PTR [eax+24], 0
	je	SHORT $LN9@UConverter@8
; Line 3418
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _mySource$[ebp]
	sub	ecx, DWORD PTR [eax+8]
	mov	edx, 255				; 000000ffH
	cmp	edx, DWORD PTR _mySourceChar$[ebp]
	sbb	eax, eax
	neg	eax
	add	eax, 1
	sub	ecx, eax
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR _myTarget$[ebp]
	sub	eax, DWORD PTR [edx+16]
	sar	eax, 1
	mov	edx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [edx+24]
	mov	DWORD PTR [edx+eax*4], ecx
$LN9@UConverter@8:
; Line 3420
	mov	eax, DWORD PTR _myTarget$[ebp]
	mov	cx, WORD PTR _targetUniChar$[ebp]
	mov	WORD PTR [eax], cx
	mov	edx, DWORD PTR _myTarget$[ebp]
	add	edx, 2
	mov	DWORD PTR _myTarget$[ebp], edx
	jmp	$LN8@UConverter@8
$LN10@UConverter@8:
; Line 3422
	cmp	DWORD PTR _targetUniChar$[ebp], 65535	; 0000ffffH
	jbe	$LN7@UConverter@8
; Line 3424
	mov	eax, DWORD PTR _targetUniChar$[ebp]
	sub	eax, 65536				; 00010000H
	mov	DWORD PTR _targetUniChar$[ebp], eax
; Line 3425
	mov	eax, DWORD PTR _targetUniChar$[ebp]
	shr	eax, 10					; 0000000aH
	movzx	ecx, ax
	add	ecx, 55296				; 0000d800H
	mov	edx, DWORD PTR _myTarget$[ebp]
	mov	WORD PTR [edx], cx
; Line 3426
	mov	eax, DWORD PTR _args$[ebp]
	cmp	DWORD PTR [eax+24], 0
	je	SHORT $LN6@UConverter@8
; Line 3427
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _mySource$[ebp]
	sub	ecx, DWORD PTR [eax+8]
	mov	edx, 255				; 000000ffH
	cmp	edx, DWORD PTR _mySourceChar$[ebp]
	sbb	eax, eax
	neg	eax
	add	eax, 1
	sub	ecx, eax
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR _myTarget$[ebp]
	sub	eax, DWORD PTR [edx+16]
	sar	eax, 1
	mov	edx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [edx+24]
	mov	DWORD PTR [edx+eax*4], ecx
$LN6@UConverter@8:
; Line 3429
	mov	eax, DWORD PTR _myTarget$[ebp]
	add	eax, 2
	mov	DWORD PTR _myTarget$[ebp], eax
; Line 3430
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _myTarget$[ebp]
	cmp	ecx, DWORD PTR [eax+20]
	jae	SHORT $LN5@UConverter@8
; Line 3431
	mov	eax, DWORD PTR _targetUniChar$[ebp]
	and	eax, 1023				; 000003ffH
	movzx	ecx, ax
	add	ecx, 56320				; 0000dc00H
	mov	edx, DWORD PTR _myTarget$[ebp]
	mov	WORD PTR [edx], cx
; Line 3432
	mov	eax, DWORD PTR _args$[ebp]
	cmp	DWORD PTR [eax+24], 0
	je	SHORT $LN4@UConverter@8
; Line 3433
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _mySource$[ebp]
	sub	ecx, DWORD PTR [eax+8]
	mov	edx, 255				; 000000ffH
	cmp	edx, DWORD PTR _mySourceChar$[ebp]
	sbb	eax, eax
	neg	eax
	add	eax, 1
	sub	ecx, eax
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR _myTarget$[ebp]
	sub	eax, DWORD PTR [edx+16]
	sar	eax, 1
	mov	edx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [edx+24]
	mov	DWORD PTR [edx+eax*4], ecx
$LN4@UConverter@8:
; Line 3435
	mov	eax, DWORD PTR _myTarget$[ebp]
	add	eax, 2
	mov	DWORD PTR _myTarget$[ebp], eax
; Line 3436
	jmp	SHORT $LN3@UConverter@8
$LN5@UConverter@8:
; Line 3438
	mov	eax, DWORD PTR _targetUniChar$[ebp]
	and	eax, 1023				; 000003ffH
	movzx	ecx, ax
	add	ecx, 56320				; 0000dc00H
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	edx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [edx+4]
	movsx	edx, BYTE PTR [edx+65]
	mov	WORD PTR [eax+edx*2+116], cx
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	dl, BYTE PTR [ecx+65]
	add	dl, 1
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx+65], dl
$LN3@UConverter@8:
; Line 3442
	jmp	SHORT $LN8@UConverter@8
$LN7@UConverter@8:
; Line 3444
	mov	eax, DWORD PTR _err$[ebp]
	push	eax
	mov	ecx, DWORD PTR _targetUniChar$[ebp]
	push	ecx
	mov	edx, DWORD PTR _mySourceChar$[ebp]
	push	edx
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	?toUnicodeCallback@@YAXPAUUConverter@@IIPAW4UErrorCode@@@Z ; toUnicodeCallback
	add	esp, 16					; 00000010H
; Line 3445
	jmp	SHORT $endloop$38451
$LN8@UConverter@8:
; Line 3448
	jmp	SHORT $LN1@UConverter@8
$LN36@UConverter@8:
; Line 3449
	mov	eax, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH
; Line 3450
	jmp	SHORT $endloop$38451
$LN1@UConverter@8:
; Line 3452
	jmp	$LN38@UConverter@8
$endloop$38451:
; Line 3454
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _myTarget$[ebp]
	mov	DWORD PTR [eax+16], ecx
; Line 3455
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _mySource$[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN44@UConverter@8:
; Line 3456
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN52@UConverter@8
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 388				; 00000184H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN52@UConverter@8:
	DD	2
	DD	$LN51@UConverter@8
$LN51@UConverter@8:
	DD	-8					; fffffff8H
	DD	3
	DD	$LN49@UConverter@8
	DD	-20					; ffffffecH
	DD	4
	DD	$LN50@UConverter@8
$LN50@UConverter@8:
	DB	109					; 0000006dH
	DB	121					; 00000079H
	DB	83					; 00000053H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	0
$LN49@UConverter@8:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	66					; 00000042H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
	npad	3
$LN53@UConverter@8:
	DD	$LN25@UConverter@8
	DD	$LN31@UConverter@8
	DD	$LN33@UConverter@8
	DD	$LN28@UConverter@8
	DD	$LN24@UConverter@8
$LN48@UConverter@8:
	DB	0
	DB	4
	DB	4
	DB	0
	DB	1
	DB	2
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	3
?UConverter_toUnicode_ISO_2022_CN_OFFSETS_LOGIC@@YAXPAUUConverterToUnicodeArgs@@PAW4UErrorCode@@@Z ENDP ; UConverter_toUnicode_ISO_2022_CN_OFFSETS_LOGIC
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_ucnv_cbFromUWriteBytes_56:PROC
EXTRN	_ucnv_cbFromUWriteSub_56:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?_ISO_2022_WriteSub@@YAXPAUUConverterFromUnicodeArgs@@HPAW4UErrorCode@@@Z
_TEXT	SEGMENT
tv73 = -324						; size = 4
_currentSubCharLen$38511 = -121				; size = 1
_currentSubChars$38510 = -112				; size = 4
_cs$38495 = -97						; size = 1
_length$ = -88						; size = 4
_buffer$ = -76						; size = 8
_subchar$ = -60						; size = 4
_p$ = -48						; size = 4
_pFromU2022State$ = -36					; size = 4
_myConverterData$ = -24					; size = 4
_cnv$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_args$ = 8						; size = 4
_offsetIndex$ = 12					; size = 4
_err$ = 16						; size = 4
?_ISO_2022_WriteSub@@YAXPAUUConverterFromUnicodeArgs@@HPAW4UErrorCode@@@Z PROC ; _ISO_2022_WriteSub, COMDAT
; Line 3460
	push	ebp
	mov	ebp, esp
	sub	esp, 324				; 00000144H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-324]
	mov	ecx, 81					; 00000051H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 3461
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _cnv$[ebp], ecx
; Line 3462
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _myConverterData$[ebp], ecx
; Line 3463
	mov	eax, DWORD PTR _myConverterData$[ebp]
	add	eax, 54					; 00000036H
	mov	DWORD PTR _pFromU2022State$[ebp], eax
; Line 3468
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _subchar$[ebp], ecx
; Line 3469
	mov	eax, DWORD PTR _cnv$[ebp]
	movsx	ecx, BYTE PTR [eax+61]
	mov	DWORD PTR _length$[ebp], ecx
; Line 3471
	lea	eax, DWORD PTR _buffer$[ebp]
	mov	DWORD PTR _p$[ebp], eax
; Line 3472
	mov	eax, DWORD PTR _myConverterData$[ebp]
	mov	cl, BYTE PTR [eax+99]
	mov	BYTE PTR tv73[ebp], cl
	cmp	BYTE PTR tv73[ebp], 99			; 00000063H
	je	$LN12@ISO_2022_W
	cmp	BYTE PTR tv73[ebp], 106			; 0000006aH
	je	SHORT $LN15@ISO_2022_W
	cmp	BYTE PTR tv73[ebp], 107			; 0000006bH
	je	$LN10@ISO_2022_W
	jmp	$LN16@ISO_2022_W
$LN15@ISO_2022_W:
; Line 3477
	mov	eax, DWORD PTR _pFromU2022State$[ebp]
	movsx	ecx, BYTE PTR [eax+4]
	cmp	ecx, 1
	jne	SHORT $LN14@ISO_2022_W
; Line 3479
	mov	eax, DWORD PTR _pFromU2022State$[ebp]
	mov	BYTE PTR [eax+4], 0
; Line 3480
	mov	eax, DWORD PTR _p$[ebp]
	mov	BYTE PTR [eax], 15			; 0000000fH
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 1
	mov	DWORD PTR _p$[ebp], ecx
$LN14@ISO_2022_W:
; Line 3483
	mov	eax, DWORD PTR _pFromU2022State$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _cs$38495[ebp], cl
; Line 3484
	movsx	eax, BYTE PTR _cs$38495[ebp]
	test	eax, eax
	je	SHORT $LN13@ISO_2022_W
	movsx	eax, BYTE PTR _cs$38495[ebp]
	cmp	eax, 3
	je	SHORT $LN13@ISO_2022_W
; Line 3486
	mov	eax, DWORD PTR _pFromU2022State$[ebp]
	mov	BYTE PTR [eax], 0
; Line 3487
	mov	eax, DWORD PTR _p$[ebp]
	mov	BYTE PTR [eax], 27			; 0000001bH
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 1
	mov	DWORD PTR _p$[ebp], ecx
; Line 3488
	mov	eax, DWORD PTR _p$[ebp]
	mov	BYTE PTR [eax], 40			; 00000028H
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 1
	mov	DWORD PTR _p$[ebp], ecx
; Line 3489
	mov	eax, DWORD PTR _p$[ebp]
	mov	BYTE PTR [eax], 66			; 00000042H
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 1
	mov	DWORD PTR _p$[ebp], ecx
$LN13@ISO_2022_W:
; Line 3492
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _subchar$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
; Line 3493
	jmp	$LN16@ISO_2022_W
$LN12@ISO_2022_W:
; Line 3496
	mov	eax, DWORD PTR _pFromU2022State$[ebp]
	movsx	ecx, BYTE PTR [eax+4]
	test	ecx, ecx
	je	SHORT $LN11@ISO_2022_W
; Line 3498
	mov	eax, DWORD PTR _pFromU2022State$[ebp]
	mov	BYTE PTR [eax+4], 0
; Line 3499
	mov	eax, DWORD PTR _p$[ebp]
	mov	BYTE PTR [eax], 15			; 0000000fH
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 1
	mov	DWORD PTR _p$[ebp], ecx
$LN11@ISO_2022_W:
; Line 3501
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _subchar$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
; Line 3502
	jmp	$LN16@ISO_2022_W
$LN10@ISO_2022_W:
; Line 3504
	mov	eax, DWORD PTR _myConverterData$[ebp]
	cmp	DWORD PTR [eax+64], 0
	jne	$LN9@ISO_2022_W
; Line 3505
	cmp	DWORD PTR _length$[ebp], 1
	jne	SHORT $LN8@ISO_2022_W
; Line 3506
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	movsx	edx, BYTE PTR [ecx+52]
	test	edx, edx
	je	SHORT $LN7@ISO_2022_W
; Line 3508
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+52], 0
; Line 3509
	mov	eax, DWORD PTR _p$[ebp]
	mov	BYTE PTR [eax], 15			; 0000000fH
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 1
	mov	DWORD PTR _p$[ebp], ecx
$LN7@ISO_2022_W:
; Line 3511
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _subchar$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
; Line 3512
	jmp	SHORT $LN6@ISO_2022_W
$LN8@ISO_2022_W:
; Line 3513
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	movsx	edx, BYTE PTR [ecx+52]
	test	edx, edx
	jne	SHORT $LN5@ISO_2022_W
; Line 3515
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+52], 1
; Line 3516
	mov	eax, DWORD PTR _p$[ebp]
	mov	BYTE PTR [eax], 14			; 0000000eH
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 1
	mov	DWORD PTR _p$[ebp], ecx
$LN5@ISO_2022_W:
; Line 3518
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _subchar$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
; Line 3519
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _subchar$[ebp]
	mov	dl, BYTE PTR [ecx+1]
	mov	BYTE PTR [eax], dl
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
$LN6@ISO_2022_W:
; Line 3521
	jmp	$LN16@ISO_2022_W
; Line 3522
	jmp	$LN16@ISO_2022_W
$LN9@ISO_2022_W:
; Line 3524
	mov	eax, DWORD PTR _myConverterData$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR _currentSubChars$38510[ebp], edx
; Line 3525
	mov	eax, DWORD PTR _myConverterData$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	dl, BYTE PTR [ecx+61]
	mov	BYTE PTR _currentSubCharLen$38511[ebp], dl
; Line 3528
	mov	eax, DWORD PTR _myConverterData$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR _subchar$[ebp]
	mov	DWORD PTR [ecx+20], edx
; Line 3529
	mov	eax, DWORD PTR _myConverterData$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	dl, BYTE PTR _length$[ebp]
	mov	BYTE PTR [ecx+61], dl
; Line 3532
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _myConverterData$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR [eax+4], edx
; Line 3533
	mov	eax, DWORD PTR _myConverterData$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR _cnv$[ebp]
	mov	eax, DWORD PTR [edx+56]
	mov	DWORD PTR [ecx+56], eax
; Line 3534
	mov	eax, DWORD PTR _err$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _args$[ebp]
	push	ecx
	call	_ucnv_cbFromUWriteSub_56
	add	esp, 12					; 0000000cH
; Line 3535
	mov	eax, DWORD PTR _myConverterData$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR _cnv$[ebp]
	mov	eax, DWORD PTR [ecx+56]
	mov	DWORD PTR [edx+56], eax
; Line 3536
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _cnv$[ebp]
	mov	DWORD PTR [eax+4], ecx
; Line 3539
	mov	eax, DWORD PTR _myConverterData$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR _currentSubChars$38510[ebp]
	mov	DWORD PTR [ecx+20], edx
; Line 3540
	mov	eax, DWORD PTR _myConverterData$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	dl, BYTE PTR _currentSubCharLen$38511[ebp]
	mov	BYTE PTR [ecx+61], dl
; Line 3542
	mov	eax, DWORD PTR _err$[ebp]
	cmp	DWORD PTR [eax], 15			; 0000000fH
	jne	SHORT $LN3@ISO_2022_W
; Line 3543
	mov	eax, DWORD PTR _myConverterData$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	movsx	edx, BYTE PTR [ecx+63]
	test	edx, edx
	jle	SHORT $LN2@ISO_2022_W
; Line 3547
	push	1
	mov	eax, DWORD PTR _myConverterData$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	add	ecx, 76					; 0000004cH
	push	ecx
	call	_uprv_checkValidMemory
	add	esp, 8
	mov	edx, DWORD PTR _myConverterData$[ebp]
	mov	eax, DWORD PTR [edx+40]
	movsx	ecx, BYTE PTR [eax+63]
	push	ecx
	mov	edx, DWORD PTR _myConverterData$[ebp]
	mov	eax, DWORD PTR [edx+40]
	add	eax, 76					; 0000004cH
	push	eax
	mov	ecx, DWORD PTR _cnv$[ebp]
	add	ecx, 76					; 0000004cH
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN2@ISO_2022_W:
; Line 3549
	mov	eax, DWORD PTR _myConverterData$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR _cnv$[ebp]
	mov	al, BYTE PTR [ecx+63]
	mov	BYTE PTR [edx+63], al
; Line 3550
	mov	eax, DWORD PTR _myConverterData$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	BYTE PTR [ecx+63], 0
$LN3@ISO_2022_W:
; Line 3552
	jmp	SHORT $LN18@ISO_2022_W
$LN16@ISO_2022_W:
; Line 3560
	mov	eax, DWORD PTR _err$[ebp]
	push	eax
	mov	ecx, DWORD PTR _offsetIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	lea	eax, DWORD PTR _buffer$[ebp]
	sub	edx, eax
	push	edx
	lea	ecx, DWORD PTR _buffer$[ebp]
	push	ecx
	mov	edx, DWORD PTR _args$[ebp]
	push	edx
	call	_ucnv_cbFromUWriteBytes_56
	add	esp, 20					; 00000014H
$LN18@ISO_2022_W:
; Line 3561
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN22@ISO_2022_W
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 324				; 00000144H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN22@ISO_2022_W:
	DD	1
	DD	$LN21@ISO_2022_W
$LN21@ISO_2022_W:
	DD	-76					; ffffffb4H
	DD	8
	DD	$LN20@ISO_2022_W
$LN20@ISO_2022_W:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
?_ISO_2022_WriteSub@@YAXPAUUConverterFromUnicodeArgs@@HPAW4UErrorCode@@@Z ENDP ; _ISO_2022_WriteSub
_TEXT	ENDS
EXTRN	_ucnv_incrementRefCount_56:PROC
EXTRN	_ucnv_safeClone_56:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?_ISO_2022_SafeClone@@YAPAUUConverter@@PBU1@PAXPAHPAW4UErrorCode@@@Z
_TEXT	SEGMENT
_size$ = -44						; size = 4
_i$ = -32						; size = 4
_cnvData$ = -20						; size = 4
_localClone$ = -8					; size = 4
_cnv$ = 8						; size = 4
_stackBuffer$ = 12					; size = 4
_pBufferSize$ = 16					; size = 4
_status$ = 20						; size = 4
?_ISO_2022_SafeClone@@YAPAUUConverter@@PBU1@PAXPAHPAW4UErrorCode@@@Z PROC ; _ISO_2022_SafeClone, COMDAT
; Line 3589
	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 3594
	mov	eax, DWORD PTR _pBufferSize$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN7@ISO_2022_S
; Line 3595
	mov	eax, DWORD PTR _pBufferSize$[ebp]
	mov	DWORD PTR [eax], 632			; 00000278H
; Line 3596
	xor	eax, eax
	jmp	$LN8@ISO_2022_S
$LN7@ISO_2022_S:
; Line 3599
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _cnvData$[ebp], ecx
; Line 3600
	mov	eax, DWORD PTR _stackBuffer$[ebp]
	mov	DWORD PTR _localClone$[ebp], eax
; Line 3604
	push	1
	mov	eax, DWORD PTR _cnvData$[ebp]
	push	eax
	call	_uprv_checkValidMemory
	add	esp, 8
	push	104					; 00000068H
	mov	ecx, DWORD PTR _cnvData$[ebp]
	push	ecx
	mov	edx, DWORD PTR _localClone$[ebp]
	add	edx, 528				; 00000210H
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 3605
	mov	eax, DWORD PTR _localClone$[ebp]
	add	eax, 528				; 00000210H
	mov	ecx, DWORD PTR _localClone$[ebp]
	mov	DWORD PTR [ecx+8], eax
; Line 3606
	mov	eax, DWORD PTR _localClone$[ebp]
	mov	BYTE PTR [eax+34], 1
; Line 3610
	mov	eax, DWORD PTR _cnvData$[ebp]
	cmp	DWORD PTR [eax+40], 0
	je	SHORT $LN6@ISO_2022_S
; Line 3611
	mov	DWORD PTR _size$[ebp], 268		; 0000010cH
; Line 3615
	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	lea	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _localClone$[ebp]
	add	edx, 260				; 00000104H
	push	edx
	mov	eax, DWORD PTR _cnvData$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	call	_ucnv_safeClone_56
	add	esp, 16					; 00000010H
	mov	edx, DWORD PTR _localClone$[ebp]
	mov	DWORD PTR [edx+568], eax
; Line 3616
	mov	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN6@ISO_2022_S
; Line 3617
	xor	eax, eax
	jmp	SHORT $LN8@ISO_2022_S
$LN6@ISO_2022_S:
; Line 3621
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@ISO_2022_S
$LN3@ISO_2022_S:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@ISO_2022_S:
	cmp	DWORD PTR _i$[ebp], 10			; 0000000aH
	jge	SHORT $LN2@ISO_2022_S
; Line 3622
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _cnvData$[ebp]
	cmp	DWORD PTR [ecx+eax*4], 0
	je	SHORT $LN1@ISO_2022_S
; Line 3623
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _cnvData$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	push	edx
	call	_ucnv_incrementRefCount_56
	add	esp, 4
$LN1@ISO_2022_S:
; Line 3625
	jmp	SHORT $LN3@ISO_2022_S
$LN2@ISO_2022_S:
; Line 3627
	mov	eax, DWORD PTR _localClone$[ebp]
$LN8@ISO_2022_S:
; Line 3628
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@ISO_2022_S
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN12@ISO_2022_S:
	DD	1
	DD	$LN11@ISO_2022_S
$LN11@ISO_2022_S:
	DD	-44					; ffffffd4H
	DD	4
	DD	$LN10@ISO_2022_S
$LN10@ISO_2022_S:
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
?_ISO_2022_SafeClone@@YAPAUUConverter@@PBU1@PAXPAHPAW4UErrorCode@@@Z ENDP ; _ISO_2022_SafeClone
_TEXT	ENDS
EXTRN	_ucnv_MBCSGetFilteredUnicodeSetForUnicode_56:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?_ISO_2022_GetUnicodeSet@@YAXPBUUConverter@@PBUUSetAdder@@W4UConverterUnicodeSet@@PAW4UErrorCode@@@Z
_TEXT	SEGMENT
tv72 = -232						; size = 4
_filter$38580 = -32					; size = 4
_cnvData$ = -20						; size = 4
_i$ = -8						; size = 4
_cnv$ = 8						; size = 4
_sa$ = 12						; size = 4
_which$ = 16						; size = 4
_pErrorCode$ = 20					; size = 4
?_ISO_2022_GetUnicodeSet@@YAXPBUUConverter@@PBUUSetAdder@@W4UConverterUnicodeSet@@PAW4UErrorCode@@@Z PROC ; _ISO_2022_GetUnicodeSet, COMDAT
; Line 3635
	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 3639
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?U_FAILURE@@YACW4UErrorCode@@@Z		; U_FAILURE
	add	esp, 4
	movsx	edx, al
	test	edx, edx
	je	SHORT $LN22@ISO_2022_G
; Line 3640
	jmp	$LN23@ISO_2022_G
$LN22@ISO_2022_G:
; Line 3651
	mov	eax, DWORD PTR _cnv$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _cnvData$[ebp], ecx
; Line 3654
	mov	eax, DWORD PTR _cnvData$[ebp]
	movsx	ecx, BYTE PTR [eax+99]
	mov	DWORD PTR tv72[ebp], ecx
	mov	edx, DWORD PTR tv72[ebp]
	sub	edx, 99					; 00000063H
	mov	DWORD PTR tv72[ebp], edx
	cmp	DWORD PTR tv72[ebp], 23			; 00000017H
	ja	$LN20@ISO_2022_G
	mov	eax, DWORD PTR tv72[ebp]
	movzx	ecx, BYTE PTR $LN25@ISO_2022_G[eax]
	jmp	DWORD PTR $LN26@ISO_2022_G[ecx*4]
$LN19@ISO_2022_G:
; Line 3657
	mov	esi, esp
	push	165					; 000000a5H
	mov	eax, DWORD PTR _sa$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _sa$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 3658
	mov	esi, esp
	push	8254					; 0000203eH
	mov	eax, DWORD PTR _sa$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _sa$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 3659
	mov	eax, DWORD PTR _cnvData$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	movzx	edx, WORD PTR _jpCharsetMasks[ecx*2]
	and	edx, 2
	je	SHORT $LN18@ISO_2022_G
; Line 3661
	mov	esi, esp
	push	255					; 000000ffH
	push	0
	mov	eax, DWORD PTR _sa$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _sa$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 3662
	jmp	SHORT $LN17@ISO_2022_G
$LN18@ISO_2022_G:
; Line 3664
	mov	esi, esp
	push	127					; 0000007fH
	push	0
	mov	eax, DWORD PTR _sa$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _sa$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN17@ISO_2022_G:
; Line 3666
	mov	eax, DWORD PTR _cnvData$[ebp]
	cmp	DWORD PTR [eax+64], 3
	je	SHORT $LN15@ISO_2022_G
	mov	eax, DWORD PTR _cnvData$[ebp]
	cmp	DWORD PTR [eax+64], 4
	je	SHORT $LN15@ISO_2022_G
	cmp	DWORD PTR _which$[ebp], 1
	jne	SHORT $LN16@ISO_2022_G
$LN15@ISO_2022_G:
; Line 3681
	mov	esi, esp
	push	65439					; 0000ff9fH
	push	65377					; 0000ff61H
	mov	eax, DWORD PTR _sa$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _sa$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN16@ISO_2022_G:
; Line 3683
	jmp	SHORT $LN20@ISO_2022_G
$LN14@ISO_2022_G:
; Line 3688
	mov	esi, esp
	push	127					; 0000007fH
	push	0
	mov	eax, DWORD PTR _sa$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _sa$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 3689
	jmp	SHORT $LN20@ISO_2022_G
$LN13@ISO_2022_G:
; Line 3693
	mov	esi, esp
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _which$[ebp]
	push	ecx
	mov	edx, DWORD PTR _sa$[ebp]
	push	edx
	mov	eax, DWORD PTR _cnvData$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	mov	edx, DWORD PTR _cnvData$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [edx+60]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN20@ISO_2022_G:
; Line 3714
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN11@ISO_2022_G
$LN10@ISO_2022_G:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN11@ISO_2022_G:
	cmp	DWORD PTR _i$[ebp], 10			; 0000000aH
	jge	$LN9@ISO_2022_G
; Line 3716
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _cnvData$[ebp]
	cmp	DWORD PTR [ecx+eax*4], 0
	je	$LN8@ISO_2022_G
; Line 3717
	mov	eax, DWORD PTR _cnvData$[ebp]
	movsx	ecx, BYTE PTR [eax+99]
	cmp	ecx, 106				; 0000006aH
	jne	SHORT $LN7@ISO_2022_G
	cmp	DWORD PTR _i$[ebp], 4
	jne	SHORT $LN7@ISO_2022_G
; Line 3722
	mov	DWORD PTR _filter$38580[ebp], 3
; Line 3724
	jmp	SHORT $LN6@ISO_2022_G
$LN7@ISO_2022_G:
; Line 3725
	mov	eax, DWORD PTR _cnvData$[ebp]
	movsx	ecx, BYTE PTR [eax+99]
	cmp	ecx, 99					; 00000063H
	je	SHORT $LN4@ISO_2022_G
	mov	eax, DWORD PTR _cnvData$[ebp]
	movsx	ecx, BYTE PTR [eax+99]
	cmp	ecx, 122				; 0000007aH
	jne	SHORT $LN5@ISO_2022_G
$LN4@ISO_2022_G:
	mov	eax, DWORD PTR _cnvData$[ebp]
	cmp	DWORD PTR [eax+64], 0
	jne	SHORT $LN5@ISO_2022_G
	cmp	DWORD PTR _i$[ebp], 3
	jne	SHORT $LN5@ISO_2022_G
; Line 3733
	mov	DWORD PTR _filter$38580[ebp], 2
	jmp	SHORT $LN6@ISO_2022_G
$LN5@ISO_2022_G:
; Line 3734
	cmp	DWORD PTR _i$[ebp], 7
	jne	SHORT $LN2@ISO_2022_G
; Line 3739
	mov	DWORD PTR _filter$38580[ebp], 4
; Line 3741
	jmp	SHORT $LN6@ISO_2022_G
$LN2@ISO_2022_G:
; Line 3742
	mov	DWORD PTR _filter$38580[ebp], 0
$LN6@ISO_2022_G:
; Line 3744
	mov	eax, DWORD PTR _pErrorCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _filter$38580[ebp]
	push	ecx
	mov	edx, DWORD PTR _which$[ebp]
	push	edx
	mov	eax, DWORD PTR _sa$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _cnvData$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	push	eax
	call	_ucnv_MBCSGetFilteredUnicodeSetForUnicode_56
	add	esp, 20					; 00000014H
$LN8@ISO_2022_G:
; Line 3746
	jmp	$LN10@ISO_2022_G
$LN9@ISO_2022_G:
; Line 3753
	mov	esi, esp
	push	14					; 0000000eH
	mov	eax, DWORD PTR _sa$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _sa$[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 3754
	mov	esi, esp
	push	15					; 0000000fH
	mov	eax, DWORD PTR _sa$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _sa$[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 3755
	mov	esi, esp
	push	27					; 0000001bH
	mov	eax, DWORD PTR _sa$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _sa$[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 3758
	mov	esi, esp
	push	159					; 0000009fH
	push	128					; 00000080H
	mov	eax, DWORD PTR _sa$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _sa$[ebp]
	mov	eax, DWORD PTR [edx+20]
	call	eax
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN23@ISO_2022_G:
; Line 3759
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN26@ISO_2022_G:
	DD	$LN14@ISO_2022_G
	DD	$LN19@ISO_2022_G
	DD	$LN13@ISO_2022_G
	DD	$LN20@ISO_2022_G
$LN25@ISO_2022_G:
	DB	0
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	1
	DB	2
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	0
?_ISO_2022_GetUnicodeSet@@YAXPBUUConverter@@PBUUSetAdder@@W4UConverterUnicodeSet@@PAW4UErrorCode@@@Z ENDP ; _ISO_2022_GetUnicodeSet
_TEXT	ENDS
PUBLIC	?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::data, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
; Line 1500
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1501
	mov	ecx, DWORD PTR _this$[ebp]
	call	?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
; Line 1502
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::data
_TEXT	ENDS
PUBLIC	?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str, COMDAT
; _this$ = ecx
; Line 1495
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1496
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
; Line 1497
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx
; Line 1510
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1511
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+20]
; Line 1512
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT
tv82 = -208						; size = 4
_this$ = -8						; size = 4
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr, COMDAT
; _this$ = ecx
; Line 2008
	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 2010
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+24], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR tv82[ebp], edx
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	mov	DWORD PTR tv82[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv82[ebp]
; Line 2011
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
_TEXT	ENDS
END
