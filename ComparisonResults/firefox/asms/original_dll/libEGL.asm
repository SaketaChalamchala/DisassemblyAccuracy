;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	AB25A0C6139DFB23B6D8DCE4C7A1FD63
; Input	CRC32 :	88908C08

; File Name   :	C:\compspace\compare\firefox\dlls\original\libEGL.dll
; Format      :	Portable executable for	80386 (PE)
; Imagebase   :	10000000
; Section 1. (virtual address 00001000)
; Virtual size			: 000059C5 (  22981.)
; Section size in file		: 00005A00 (  23040.)
; Offset to raw	data for section: 00000400
; Flags	60000020: Text Executable Readable
; Alignment	: default
; PDB File Name	: c:\builds\moz2_slave\rel-m-rel-w32_bld-000000000000\build\obj-firefox\gfx\angle\src\libEGL\libEGL.pdb
; OS type	  :  MS	Windows
; Application type:  DLL 32bit

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 10001000h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10001000	proc near		; DATA XREF: .rdata:10007160o

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		fld	ds:flt_100075B8
		fst	[ebp+var_8]
		fld1
		push	9
		pop	eax
		fst	[ebp+var_4]
		mov	ecx, eax

loc_10001019:				; CODE XREF: sub_10001000+34j
		fld	[ebp+var_8]
		test	cl, 1
		jz	short loc_1000102B
		fld	[ebp+var_4]
		fld	st(1)
		fmulp	st(1), st
		fstp	[ebp+var_4]

loc_1000102B:				; CODE XREF: sub_10001000+1Fj
		shr	ecx, 1
		jz	short loc_10001036
		fmul	st, st
		fstp	[ebp+var_8]
		jmp	short loc_10001019
; ---------------------------------------------------------------------------

loc_10001036:				; CODE XREF: sub_10001000+2Dj
		fstp	st
		fld	[ebp+var_4]
		fstp	[ebp+var_C]
		fxch	st(1)
		fst	[ebp+var_8]
		fxch	st(1)
		fst	[ebp+var_4]

loc_10001048:				; CODE XREF: sub_10001000+62j
		fld	[ebp+var_8]
		test	al, 1
		jz	short loc_10001059
		fld	[ebp+var_4]
		fld	st(1)
		fmulp	st(1), st
		fstp	[ebp+var_4]

loc_10001059:				; CODE XREF: sub_10001000+4Dj
		shr	eax, 1
		jz	short loc_10001064
		fmul	st, st
		fstp	[ebp+var_8]
		jmp	short loc_10001048
; ---------------------------------------------------------------------------

loc_10001064:				; CODE XREF: sub_10001000+5Bj
		fstp	st
		fld	[ebp+var_4]
		fstp	[ebp+var_10]
		fxch	st(1)
		fstp	[ebp+var_8]
		push	10h
		fstp	[ebp+var_4]
		pop	eax

loc_10001077:				; CODE XREF: sub_10001000+91j
		fld	[ebp+var_8]
		test	al, 1
		jz	short loc_10001088
		fld	[ebp+var_4]
		fld	st(1)
		fmulp	st(1), st
		fstp	[ebp+var_4]

loc_10001088:				; CODE XREF: sub_10001000+7Cj
		shr	eax, 1
		jz	short loc_10001093
		fmul	st, st
		fstp	[ebp+var_8]
		jmp	short loc_10001077
; ---------------------------------------------------------------------------

loc_10001093:				; CODE XREF: sub_10001000+8Aj
		fstp	st
		fld	[ebp+var_C]
		fsub	ds:dbl_100075B0
		fdiv	[ebp+var_10]
		fld	[ebp+var_4]
		fstp	[ebp+var_10]
		fmul	[ebp+var_10]
		fstp	flt_10009368
		mov	esp, ebp
		pop	ebp
		retn
sub_10001000	endp


; =============== S U B	R O U T	I N E =======================================


sub_100010B4	proc near		; DATA XREF: .rdata:10007164o
		push	offset sub_100069BA ; _onexit_t
		call	sub_10006164
		pop	ecx
		retn
sub_100010B4	endp


; =============== S U B	R O U T	I N E =======================================


sub_100010C0	proc near		; DATA XREF: .rdata:10007168o
		push	offset sub_100069AF ; _onexit_t
		call	sub_10006164
		pop	ecx
		retn
sub_100010C0	endp


; =============== S U B	R O U T	I N E =======================================


sub_100010CC	proc near		; DATA XREF: .rdata:1000716Co
		push	offset sub_100069A4 ; _onexit_t
		call	sub_10006164
		pop	ecx
		retn
sub_100010CC	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __usercall sub_100010E0@<eax>(void *@<ecx>, void *@<edx>,	size_t)
sub_100010E0	proc near		; CODE XREF: sub_10003D23+CCp
					; sub_10004592+78p ...

arg_0		= dword	ptr  4

		cmp	[esp+arg_0], 0
		jz	short loc_100010F7
		push	[esp+arg_0]	; size_t
		push	edx		; void *
		push	ecx		; void *
		call	memcpy
		add	esp, 0Ch
		mov	ecx, eax

loc_100010F7:				; CODE XREF: sub_100010E0+5j
		mov	eax, ecx
		retn
sub_100010E0	endp


; =============== S U B	R O U T	I N E =======================================


; int __usercall sub_100010FA@<eax>(void *@<ecx>, void *@<edx>,	size_t)
sub_100010FA	proc near		; CODE XREF: sub_1000454B+15p
					; sub_10004BD5+59p

arg_0		= dword	ptr  4

		cmp	[esp+arg_0], 0
		jz	short loc_10001112
		push	[esp+arg_0]	; size_t
		push	edx		; void *
		push	ecx		; void *
		call	ds:memmove
		add	esp, 0Ch
		mov	ecx, eax

loc_10001112:				; CODE XREF: sub_100010FA+5j
		mov	eax, ecx
		retn
sub_100010FA	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_10001115(void *, char)
sub_10001115	proc near		; DATA XREF: .rdata:off_100074F8o
					; .rdata:off_1000753Co	...

arg_0		= byte ptr  4

		test	[esp+arg_0], 1
		push	esi
		mov	esi, ecx
		mov	dword ptr [esi], offset	off_10007574
		jz	short loc_1000112D
		push	esi		; void *
		call	ds:free
		pop	ecx

loc_1000112D:				; CODE XREF: sub_10001115+Ej
		mov	eax, esi
		pop	esi
		retn	4
sub_10001115	endp


; =============== S U B	R O U T	I N E =======================================


sub_10001133	proc near		; DATA XREF: .rdata:10007504o
					; .rdata:10007560o ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		mov	edx, [esp+arg_4]
		mov	[eax], edx
		mov	[eax+4], ecx
		retn	8
sub_10001133	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10001143	proc near		; DATA XREF: .rdata:1000750Co
					; .rdata:10007550o ...

var_8		= byte ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ecx
		push	[ebp+arg_0]
		mov	eax, [ecx]
		lea	edx, [ebp+var_8]
		push	edx
		call	dword ptr [eax+0Ch]
		mov	edx, [ebp+arg_4]
		mov	ecx, [eax+4]
		cmp	ecx, [edx+4]
		jnz	short loc_1000116A
		mov	eax, [eax]
		cmp	eax, [edx]
		jnz	short loc_1000116A
		xor	eax, eax
		inc	eax
		jmp	short loc_1000116C
; ---------------------------------------------------------------------------

loc_1000116A:				; CODE XREF: sub_10001143+1Aj
					; sub_10001143+20j
		xor	eax, eax

loc_1000116C:				; CODE XREF: sub_10001143+25j
		mov	esp, ebp
		pop	ebp
		retn	8
sub_10001143	endp


; =============== S U B	R O U T	I N E =======================================


sub_10001172	proc near		; DATA XREF: .rdata:10007508o
					; .rdata:1000754Co ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		cmp	ecx, [eax+4]
		jnz	short loc_10001188
		mov	eax, [eax]
		cmp	eax, [esp+arg_4]
		jnz	short loc_10001188
		xor	eax, eax
		inc	eax
		jmp	short locret_1000118A
; ---------------------------------------------------------------------------

loc_10001188:				; CODE XREF: sub_10001172+7j
					; sub_10001172+Fj
		xor	eax, eax

locret_1000118A:			; CODE XREF: sub_10001172+14j
		retn	8
sub_10001172	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000118D	proc near		; DATA XREF: .rdata:100074FCo
		mov	eax, offset aGeneric ; "generic"
		retn
sub_1000118D	endp


; =============== S U B	R O U T	I N E =======================================


sub_10001193	proc near		; CODE XREF: sub_100011BE+32p
					; DATA XREF: .rdata:10007500o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	[esp+arg_4]
		call	ds:?_Syserror_map@std@@YAPBDH@Z	; std::_Syserror_map(int)
		pop	ecx
		test	eax, eax
		jnz	short loc_100011A7
		mov	eax, offset aUnknownError ; "unknown error"

loc_100011A7:				; CODE XREF: sub_10001193+Dj
		mov	ecx, [esp+arg_0]
		push	eax		; void *
		call	sub_10003CB8
		mov	eax, [esp+arg_0]
		retn	8
sub_10001193	endp


; =============== S U B	R O U T	I N E =======================================


sub_100011B8	proc near		; DATA XREF: .rdata:10007558o
		mov	eax, offset aIostream ;	"iostream"
		retn
sub_100011B8	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_100011BE	proc near		; DATA XREF: .rdata:1000755Co

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		cmp	[ebp+arg_4], 1
		jnz	short loc_100011EA
		push	esi
		mov	esi, [ebp+arg_0]
		mov	ecx, esi
		push	offset aIostreamStream ; "iostream stream error"
		and	dword ptr [esi+10h], 0
		mov	dword ptr [esi+14h], 0Fh
		mov	byte ptr [esi],	0
		call	sub_100047CF
		mov	eax, esi
		pop	esi
		jmp	short loc_100011F8
; ---------------------------------------------------------------------------

loc_100011EA:				; CODE XREF: sub_100011BE+7j
		push	[ebp+arg_4]
		push	[ebp+arg_0]
		call	sub_10001193
		mov	eax, [ebp+arg_0]

loc_100011F8:				; CODE XREF: sub_100011BE+2Aj
		pop	ebp
		retn	8
sub_100011BE	endp


; =============== S U B	R O U T	I N E =======================================


sub_100011FC	proc near		; DATA XREF: .rdata:10007540o
		mov	eax, offset aSystem ; "system"
		retn
sub_100011FC	endp


; =============== S U B	R O U T	I N E =======================================


sub_10001202	proc near		; DATA XREF: .rdata:10007544o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	[esp+arg_4]
		call	ds:?_Winerror_map@std@@YAPBDH@Z	; std::_Winerror_map(int)
		pop	ecx
		test	eax, eax
		jnz	short loc_10001216
		mov	eax, offset aUnknownError ; "unknown error"

loc_10001216:				; CODE XREF: sub_10001202+Dj
		mov	ecx, [esp+arg_0]
		push	eax		; void *
		call	sub_10003CB8
		mov	eax, [esp+arg_0]
		retn	8
sub_10001202	endp


; =============== S U B	R O U T	I N E =======================================


sub_10001227	proc near		; DATA XREF: .rdata:10007548o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_4]
		push	esi
		call	ds:?_Syserror_map@std@@YAPBDH@Z	; std::_Syserror_map(int)
		test	eax, eax
		mov	eax, [esp+8+arg_0]
		pop	ecx
		mov	[eax], esi
		jz	short loc_10001247
		mov	dword ptr [eax+4], offset off_1000901C
		jmp	short loc_1000124E
; ---------------------------------------------------------------------------

loc_10001247:				; CODE XREF: sub_10001227+15j
		mov	dword ptr [eax+4], offset off_10009018

loc_1000124E:				; CODE XREF: sub_10001227+1Ej
		pop	esi
		retn	8
sub_10001227	endp


; =============== S U B	R O U T	I N E =======================================


sub_10001252	proc near		; CODE XREF: sub_10003BC3+45p
		mov	eax, dwTlsIndex
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_1000125F
		xor	al, al
		retn
; ---------------------------------------------------------------------------

loc_1000125F:				; CODE XREF: sub_10001252+8j
		push	edx		; lpTlsValue
		push	eax		; dwTlsIndex
		call	ds:TlsSetValue
		dec	eax
		neg	eax
		sbb	eax, eax
		inc	eax
		retn
sub_10001252	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000126E	proc near		; CODE XREF: sub_10001A4E+C8p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch
arg_1C		= dword	ptr  20h

		mov	eax, [esp+arg_0]
		mov	edx, ecx
		mov	ecx, [esp+arg_4]
		push	ebx
		push	ebp
		push	esi
		mov	esi, [esp+0Ch+arg_8]
		xor	ebp, ebp
		push	edi
		push	8
		pop	edi
		mov	[edx], eax
		mov	[edx+4], ecx
		mov	[edx+8], esi
		mov	[edx+28h], ebp
		mov	[edx+2Ch], ebp
		push	10h
		pop	ebx
		sub	eax, 6ABDh
		jz	short loc_1000130D
		sub	eax, 1594h
		jz	short loc_100012F1
		sub	eax, 6
		jz	short loc_1000130D
		dec	eax
		jz	short loc_100012E5
		sub	eax, 0D0Ah
		jz	short loc_100012D6
		sub	eax, 63Fh
		jnz	short loc_10001323
		mov	dword ptr [edx+0Ch], 20h
		mov	[edx+10h], edi
		mov	[edx+14h], edi
		mov	[edx+18h], edi
		mov	[edx+20h], edi
		mov	dword ptr [edx+2Ch], 1
		jmp	short loc_10001323
; ---------------------------------------------------------------------------

loc_100012D6:				; CODE XREF: sub_1000126E+43j
		push	5
		pop	eax
		mov	dword ptr [edx+14h], 6
		mov	[edx+20h], ebp
		jmp	short loc_1000131A
; ---------------------------------------------------------------------------

loc_100012E5:				; CODE XREF: sub_1000126E+3Cj
		mov	[edx+20h], edi
		mov	dword ptr [edx+2Ch], 1
		jmp	short loc_100012FB
; ---------------------------------------------------------------------------

loc_100012F1:				; CODE XREF: sub_1000126E+34j
		mov	[edx+20h], ebp
		mov	dword ptr [edx+28h], 1

loc_100012FB:				; CODE XREF: sub_1000126E+81j
		mov	[edx+18h], edi
		mov	[edx+14h], edi
		mov	[edx+10h], edi
		mov	dword ptr [edx+0Ch], 20h
		jmp	short loc_10001323
; ---------------------------------------------------------------------------

loc_1000130D:				; CODE XREF: sub_1000126E+2Dj
					; sub_1000126E+39j
		push	5
		pop	eax
		mov	dword ptr [edx+20h], 1
		mov	[edx+14h], eax

loc_1000131A:				; CODE XREF: sub_1000126E+75j
		mov	[edx+0Ch], ebx
		mov	[edx+10h], eax
		mov	[edx+18h], eax

loc_10001323:				; CODE XREF: sub_1000126E+4Aj
					; sub_1000126E+66j ...
		mov	ebx, [esp+10h+arg_C]
		xor	eax, eax
		test	bl, bl
		mov	[edx+1Ch], ebp
		mov	[edx+24h], ebp
		setz	al
		mov	dword ptr [edx+30h], 308Eh
		dec	eax
		mov	[edx+38h], ebp
		and	eax, 0FFFFFFE8h
		mov	dword ptr [edx+3Ch], 4
		add	eax, 3050h
		mov	[edx+34h], eax
		sub	ecx, ebp
		jz	short loc_10001392
		sub	ecx, 81A5h
		jz	short loc_10001389
		dec	ecx
		jz	short loc_10001380
		dec	ecx
		jz	short loc_10001377
		sub	ecx, 749h
		jnz	short loc_10001398
		mov	dword ptr [edx+40h], 18h
		mov	[edx+78h], edi
		jmp	short loc_10001398
; ---------------------------------------------------------------------------

loc_10001377:				; CODE XREF: sub_1000126E+F3j
		mov	dword ptr [edx+40h], 20h
		jmp	short loc_10001395
; ---------------------------------------------------------------------------

loc_10001380:				; CODE XREF: sub_1000126E+F0j
		mov	dword ptr [edx+40h], 18h
		jmp	short loc_10001395
; ---------------------------------------------------------------------------

loc_10001389:				; CODE XREF: sub_1000126E+EDj
		mov	dword ptr [edx+40h], 10h
		jmp	short loc_10001395
; ---------------------------------------------------------------------------

loc_10001392:				; CODE XREF: sub_1000126E+E5j
		mov	[edx+40h], ebp

loc_10001395:				; CODE XREF: sub_1000126E+110j
					; sub_1000126E+119j ...
		mov	[edx+78h], ebp

loc_10001398:				; CODE XREF: sub_1000126E+FBj
					; sub_1000126E+107j
		mov	ecx, [esp+10h+arg_18]
		mov	edi, 3038h
		mov	eax, [esp+10h+arg_1C]
		mov	[edx+50h], eax
		mov	[edx+4Ch], ecx
		imul	ecx, eax
		mov	eax, [esp+10h+arg_14]
		mov	[edx+58h], eax
		mov	eax, [esp+10h+arg_10]
		mov	[edx+5Ch], eax
		xor	eax, eax
		test	esi, esi
		mov	[edx+48h], edi
		mov	[edx+80h], edi
		pop	edi
		setnz	al
		mov	[edx+74h], esi
		pop	esi
		shr	ebx, 8
		mov	[edx+44h], ebp
		test	bl, bl
		mov	[edx+60h], ebp
		mov	[edx+64h], ebp
		mov	[edx+68h], ebp
		mov	[edx+84h], ebp
		mov	[edx+88h], ebp
		mov	[edx+8Ch], ebp
		pop	ebp
		mov	[edx+54h], ecx
		mov	dword ptr [edx+6Ch], 4
		mov	[edx+70h], eax
		mov	dword ptr [edx+7Ch], 405h
		pop	ebx
		jz	short loc_10001415
		push	44h
		pop	eax
		mov	[edx+6Ch], eax
		mov	[edx+3Ch], eax

loc_10001415:				; CODE XREF: sub_1000126E+19Cj
		mov	eax, edx
		retn	20h
sub_1000126E	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000141A	proc near		; CODE XREF: sub_1000155D+Fp
					; sub_100015BE+201p

arg_0		= dword	ptr  4

		mov	edx, [esp+arg_0]
		xor	eax, eax
		push	esi
		mov	[ecx], eax
		mov	esi, 3038h
		mov	[ecx+4], al
		jmp	short loc_1000146E
; ---------------------------------------------------------------------------

loc_1000142D:				; CODE XREF: sub_1000141A+56j
		cmp	dword ptr [edx+4], 0
		jz	short loc_1000146B
		cmp	dword ptr [edx+4], 0FFFFFFFFh
		jz	short loc_1000146B
		mov	eax, [edx]
		sub	eax, 3021h
		jz	short loc_10001467
		dec	eax
		jz	short loc_10001461
		dec	eax
		jz	short loc_1000145B
		dec	eax
		jz	short loc_10001456
		sub	eax, 19h
		jnz	short loc_1000146B
		mov	byte ptr [ecx+4], 1
		jmp	short loc_1000146B
; ---------------------------------------------------------------------------

loc_10001456:				; CODE XREF: sub_1000141A+2Fj
		mov	byte ptr [ecx],	1
		jmp	short loc_1000146B
; ---------------------------------------------------------------------------

loc_1000145B:				; CODE XREF: sub_1000141A+2Cj
		mov	byte ptr [ecx+1], 1
		jmp	short loc_1000146B
; ---------------------------------------------------------------------------

loc_10001461:				; CODE XREF: sub_1000141A+29j
		mov	byte ptr [ecx+2], 1
		jmp	short loc_1000146B
; ---------------------------------------------------------------------------

loc_10001467:				; CODE XREF: sub_1000141A+26j
		mov	byte ptr [ecx+3], 1

loc_1000146B:				; CODE XREF: sub_1000141A+17j
					; sub_1000141A+1Dj ...
		add	edx, 8

loc_1000146E:				; CODE XREF: sub_1000141A+11j
		cmp	[edx], esi
		jnz	short loc_1000142D
		mov	eax, ecx
		pop	esi
		retn	4
sub_1000141A	endp


; =============== S U B	R O U T	I N E =======================================


sub_10001478	proc near		; CODE XREF: sub_100014AC+2Ep
					; sub_100014AC+36p

arg_0		= dword	ptr  4

		mov	edx, [esp+arg_0]
		xor	eax, eax
		cmp	[ecx], al
		jz	short loc_10001485
		mov	eax, [edx+10h]

loc_10001485:				; CODE XREF: sub_10001478+8j
		cmp	byte ptr [ecx+1], 0
		jz	short loc_1000148E
		add	eax, [edx+14h]

loc_1000148E:				; CODE XREF: sub_10001478+11j
		cmp	byte ptr [ecx+2], 0
		jz	short loc_10001497
		add	eax, [edx+18h]

loc_10001497:				; CODE XREF: sub_10001478+1Aj
		cmp	byte ptr [ecx+3], 0
		jz	short loc_100014A0
		add	eax, [edx+20h]

loc_100014A0:				; CODE XREF: sub_10001478+23j
		cmp	byte ptr [ecx+4], 0
		jz	short locret_100014A9
		add	eax, [edx+1Ch]

locret_100014A9:			; CODE XREF: sub_10001478+2Cj
		retn	4
sub_10001478	endp


; =============== S U B	R O U T	I N E =======================================


sub_100014AC	proc near		; CODE XREF: sub_10005274+24p
					; sub_10005274+8Ap ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		push	esi
		mov	esi, [esp+8+arg_0]
		mov	ebp, ecx
		push	edi
		mov	edi, [esp+0Ch+arg_4]
		mov	eax, [esi+34h]
		mov	edx, [edi+34h]
		cmp	eax, edx
		jz	short loc_100014CC

loc_100014C3:				; CODE XREF: sub_100014AC+28j
		sbb	eax, eax
		neg	eax
		jmp	loc_10001557
; ---------------------------------------------------------------------------

loc_100014CC:				; CODE XREF: sub_100014AC+15j
		mov	eax, [esi+30h]
		mov	ecx, [edi+30h]
		cmp	eax, ecx
		jnz	short loc_100014C3
		push	ebx
		push	esi
		mov	ecx, ebp
		call	sub_10001478
		push	edi
		mov	ebx, eax
		call	sub_10001478
		mov	ecx, eax
		cmp	ebx, ecx
		jz	short loc_100014F6
		xor	eax, eax
		cmp	ebx, ecx
		setnle	al
		jmp	short loc_10001556
; ---------------------------------------------------------------------------

loc_100014F6:				; CODE XREF: sub_100014AC+3Fj
		mov	ecx, [esi+0Ch]
		mov	edx, [edi+0Ch]
		cmp	ecx, edx
		jnz	short loc_1000153C
		mov	ecx, [esi+70h]
		mov	edx, [edi+70h]
		cmp	ecx, edx
		jnz	short loc_1000153C
		mov	ecx, [esi+74h]
		mov	edx, [edi+74h]
		cmp	ecx, edx
		jnz	short loc_1000153C
		mov	ecx, [esi+40h]
		mov	edx, [edi+40h]
		cmp	ecx, edx
		jnz	short loc_1000153C
		mov	ecx, [esi+78h]
		mov	edx, [edi+78h]
		cmp	ecx, edx
		jnz	short loc_1000153C
		mov	ecx, [esi+24h]
		mov	edx, [edi+24h]
		cmp	ecx, edx
		jnz	short loc_1000153C
		mov	ecx, [esi+68h]
		mov	edx, [edi+68h]
		cmp	ecx, edx
		jz	short loc_10001542

loc_1000153C:				; CODE XREF: sub_100014AC+52j
					; sub_100014AC+5Cj ...
		xor	eax, eax
		cmp	ecx, edx
		jmp	short loc_1000154F
; ---------------------------------------------------------------------------

loc_10001542:				; CODE XREF: sub_100014AC+8Ej
		mov	ecx, [edi+38h]
		cmp	[esi+38h], ecx
		jz	short loc_10001554
		xor	eax, eax
		cmp	[esi+38h], ecx

loc_1000154F:				; CODE XREF: sub_100014AC+94j
		setl	al
		jmp	short loc_10001556
; ---------------------------------------------------------------------------

loc_10001554:				; CODE XREF: sub_100014AC+9Cj
		xor	al, al

loc_10001556:				; CODE XREF: sub_100014AC+48j
					; sub_100014AC+A6j
		pop	ebx

loc_10001557:				; CODE XREF: sub_100014AC+1Bj
		pop	edi
		pop	esi
		pop	ebp
		retn	8
sub_100014AC	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000155D	proc near		; CODE XREF: sub_100019A7+53p
					; sub_10001A4E+9Ep

var_5		= byte ptr -5

		push	ecx
		push	ecx
		push	esi
		push	edi
		mov	esi, ecx
		lea	ecx, [esp+10h+var_5]
		push	offset dword_10007510
		call	sub_1000141A
		and	dword ptr [esi], 0
		mov	edi, eax
		and	dword ptr [esi+4], 0
		push	0A0h
		call	ds:moz_xmalloc
		pop	ecx
		test	eax, eax
		jnz	short loc_10001590
		call	ds:?_Xbad_alloc@std@@YAXXZ ; std::_Xbad_alloc(void)

loc_10001590:				; CODE XREF: sub_1000155D+2Bj
		lea	ecx, [eax+4]
		mov	[eax], eax
		test	ecx, ecx
		jz	short loc_1000159B
		mov	[ecx], eax

loc_1000159B:				; CODE XREF: sub_1000155D+3Aj
		lea	ecx, [eax+8]
		test	ecx, ecx
		jz	short loc_100015A4
		mov	[ecx], eax

loc_100015A4:				; CODE XREF: sub_1000155D+43j
		mov	word ptr [eax+0Ch], 101h
		mov	[esi], eax
		mov	eax, [edi]
		mov	[esi+8], eax
		mov	al, [edi+4]
		mov	[esi+0Ch], al
		mov	eax, esi
		pop	edi
		pop	esi
		pop	ecx
		pop	ecx
		retn
sub_1000155D	endp


; =============== S U B	R O U T	I N E =======================================


sub_100015BE	proc near		; CODE XREF: eglGetConfigs+40p
					; eglChooseConfig+47p

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 1Ch
		push	ebx
		push	ebp
		xor	edx, edx
		mov	ebp, ecx
		push	esi
		push	edi
		mov	ebx, edx
		mov	[esp+2Ch+var_14], edx
		mov	eax, [ebp+4]
		mov	edi, edx
		mov	[esp+2Ch+var_C], ebx
		mov	[esp+2Ch+var_8], edi
		mov	[esp+2Ch+var_4], edx
		test	eax, eax
		jz	short loc_10001608
		cmp	eax, 3FFFFFFFh
		jbe	short loc_100015F6
		push	offset aVectorTTooLong ; "vector<T> too	long"
		call	ds:?moz_Xlength_error@std@@YAXPBD@Z ; std::moz_Xlength_error(char const	*)

loc_100015F6:				; CODE XREF: sub_100015BE+2Bj
		push	eax
		lea	ecx, [esp+30h+var_C]
		call	sub_10004947
		mov	edi, [esp+2Ch+var_8]
		mov	ebx, [esp+2Ch+var_C]

loc_10001608:				; CODE XREF: sub_100015BE+24j
		mov	ecx, [ebp+0]
		mov	eax, [ecx]
		mov	[esp+2Ch+var_18], eax
		cmp	eax, ecx
		jz	loc_100017AF

loc_10001619:				; CODE XREF: sub_100015BE+1EBj
		mov	edx, [esp+2Ch+arg_4]
		mov	ecx, [edx]
		cmp	ecx, 3038h
		jz	loc_10001737
		add	edx, 4

loc_1000162E:				; CODE XREF: sub_100015BE+173j
		add	ecx, 0FFFFCFE0h	; switch 35 cases
		cmp	ecx, 22h
		ja	loc_10001814	; jumptable 1000163D default case
		jmp	ds:off_10001852[ecx*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_10001644:				; CODE XREF: sub_100015BE+7Fj
					; DATA XREF: .text:off_10001852o
		mov	ecx, [eax+1Ch]	; jumptable 1000163D case 12320
		jmp	loc_1000171C
; ---------------------------------------------------------------------------

loc_1000164C:				; CODE XREF: sub_100015BE+7Fj
					; DATA XREF: .text:off_10001852o
		mov	ecx, [eax+30h]	; jumptable 1000163D case 12321
		jmp	loc_1000171C
; ---------------------------------------------------------------------------

loc_10001654:				; CODE XREF: sub_100015BE+7Fj
					; DATA XREF: .text:off_10001852o
		mov	ecx, [eax+28h]	; jumptable 1000163D case 12322
		jmp	loc_1000171C
; ---------------------------------------------------------------------------

loc_1000165C:				; CODE XREF: sub_100015BE+7Fj
					; DATA XREF: .text:off_10001852o
		mov	ecx, [eax+24h]	; jumptable 1000163D case 12323
		jmp	loc_1000171C
; ---------------------------------------------------------------------------

loc_10001664:				; CODE XREF: sub_100015BE+7Fj
					; DATA XREF: .text:off_10001852o
		mov	ecx, [eax+20h]	; jumptable 1000163D case 12324
		jmp	loc_1000171C
; ---------------------------------------------------------------------------

loc_1000166C:				; CODE XREF: sub_100015BE+7Fj
					; DATA XREF: .text:off_10001852o
		mov	ecx, [eax+50h]	; jumptable 1000163D case 12325
		jmp	loc_1000171C
; ---------------------------------------------------------------------------

loc_10001674:				; CODE XREF: sub_100015BE+7Fj
					; DATA XREF: .text:off_10001852o
		mov	ecx, [eax+88h]	; jumptable 1000163D case 12326
		jmp	loc_1000171C
; ---------------------------------------------------------------------------

loc_1000167F:				; CODE XREF: sub_100015BE+7Fj
					; DATA XREF: .text:off_10001852o
		mov	ecx, [eax+44h]	; jumptable 1000163D case 12327

loc_10001682:				; CODE XREF: sub_100015BE+D1j
					; sub_100015BE+DEj ...
		cmp	ecx, [edx]
		setz	cl
		jmp	loc_10001721
; ---------------------------------------------------------------------------

loc_1000168C:				; CODE XREF: sub_100015BE+7Fj
					; DATA XREF: .text:off_10001852o
		mov	ecx, [eax+48h]	; jumptable 1000163D case 12328
		jmp	short loc_10001682
; ---------------------------------------------------------------------------

loc_10001691:				; CODE XREF: sub_100015BE+7Fj
					; DATA XREF: .text:off_10001852o
		mov	ecx, [eax+54h]	; jumptable 1000163D case 12329
		jmp	loc_1000171C
; ---------------------------------------------------------------------------

loc_10001699:				; CODE XREF: sub_100015BE+7Fj
					; DATA XREF: .text:off_10001852o
		mov	ecx, [eax+70h]	; jumptable 1000163D case 12333
		jmp	short loc_10001682
; ---------------------------------------------------------------------------

loc_1000169E:				; CODE XREF: sub_100015BE+7Fj
					; DATA XREF: .text:off_10001852o
		mov	ecx, [eax+78h]	; jumptable 1000163D case 12335
		jmp	short loc_10001682
; ---------------------------------------------------------------------------

loc_100016A3:				; CODE XREF: sub_100015BE+7Fj
					; DATA XREF: .text:off_10001852o
		mov	ecx, [eax+84h]	; jumptable 1000163D case 12337
		jmp	short loc_1000171C
; ---------------------------------------------------------------------------

loc_100016AB:				; CODE XREF: sub_100015BE+7Fj
					; DATA XREF: .text:off_10001852o
		mov	ecx, [eax+80h]	; jumptable 1000163D case 12338
		jmp	short loc_1000171C
; ---------------------------------------------------------------------------

loc_100016B3:				; CODE XREF: sub_100015BE+7Fj
					; DATA XREF: .text:off_10001852o
		mov	ecx, [eax+8Ch]	; jumptable 1000163D case 12339

loc_100016B9:				; CODE XREF: sub_100015BE+145j
		and	ecx, [edx]
		jmp	short loc_10001682
; ---------------------------------------------------------------------------

loc_100016BD:				; CODE XREF: sub_100015BE+7Fj
					; DATA XREF: .text:off_10001852o
		mov	ecx, [eax+90h]	; jumptable 1000163D case 12340
		jmp	short loc_10001682
; ---------------------------------------------------------------------------

loc_100016C5:				; CODE XREF: sub_100015BE+7Fj
					; DATA XREF: .text:off_10001852o
		mov	ecx, [eax+9Ch]	; jumptable 1000163D case 12341
		jmp	short loc_10001682
; ---------------------------------------------------------------------------

loc_100016CD:				; CODE XREF: sub_100015BE+7Fj
					; DATA XREF: .text:off_10001852o
		mov	ecx, [eax+98h]	; jumptable 1000163D case 12342
		jmp	short loc_10001682
; ---------------------------------------------------------------------------

loc_100016D5:				; CODE XREF: sub_100015BE+7Fj
					; DATA XREF: .text:off_10001852o
		mov	ecx, [eax+94h]	; jumptable 1000163D case 12343
		jmp	short loc_10001682
; ---------------------------------------------------------------------------

loc_100016DD:				; CODE XREF: sub_100015BE+7Fj
					; DATA XREF: .text:off_10001852o
		mov	ecx, [eax+38h]	; jumptable 1000163D case 12345
		jmp	short loc_10001682
; ---------------------------------------------------------------------------

loc_100016E2:				; CODE XREF: sub_100015BE+7Fj
					; DATA XREF: .text:off_10001852o
		mov	ecx, [eax+3Ch]	; jumptable 1000163D case 12346
		jmp	short loc_10001682
; ---------------------------------------------------------------------------

loc_100016E7:				; CODE XREF: sub_100015BE+7Fj
					; DATA XREF: .text:off_10001852o
		mov	ecx, [eax+6Ch]	; jumptable 1000163D case 12347
		jmp	short loc_10001682
; ---------------------------------------------------------------------------

loc_100016EC:				; CODE XREF: sub_100015BE+7Fj
					; DATA XREF: .text:off_10001852o
		mov	ecx, [eax+68h]	; jumptable 1000163D case 12348
		jmp	short loc_10001682
; ---------------------------------------------------------------------------

loc_100016F1:				; CODE XREF: sub_100015BE+7Fj
					; DATA XREF: .text:off_10001852o
		mov	ecx, [eax+2Ch]	; jumptable 1000163D case 12349
		jmp	short loc_1000171C
; ---------------------------------------------------------------------------

loc_100016F6:				; CODE XREF: sub_100015BE+7Fj
					; DATA XREF: .text:off_10001852o
		mov	ecx, [eax+34h]	; jumptable 1000163D case 12350
		jmp	short loc_1000171C
; ---------------------------------------------------------------------------

loc_100016FB:				; CODE XREF: sub_100015BE+7Fj
					; DATA XREF: .text:off_10001852o
		mov	ecx, [eax+40h]	; jumptable 1000163D case 12351
		jmp	short loc_10001682
; ---------------------------------------------------------------------------

loc_10001700:				; CODE XREF: sub_100015BE+7Fj
					; DATA XREF: .text:off_10001852o
		mov	ecx, [eax+7Ch]	; jumptable 1000163D case 12352
		jmp	short loc_100016B9
; ---------------------------------------------------------------------------

loc_10001705:				; CODE XREF: sub_100015BE+7Fj
					; DATA XREF: .text:off_10001852o
		mov	ecx, [edx]	; jumptable 1000163D case 12354
		and	ecx, [eax+4Ch]
		jmp	loc_10001682
; ---------------------------------------------------------------------------

loc_1000170F:				; CODE XREF: sub_100015BE+7Fj
					; DATA XREF: .text:off_10001852o
		mov	ecx, [eax+5Ch]	; jumptable 1000163D case 12332
		jmp	short loc_1000171C
; ---------------------------------------------------------------------------

loc_10001714:				; CODE XREF: sub_100015BE+7Fj
					; DATA XREF: .text:off_10001852o
		mov	ecx, [eax+60h]	; jumptable 1000163D case 12330
		jmp	short loc_1000171C
; ---------------------------------------------------------------------------

loc_10001719:				; CODE XREF: sub_100015BE+7Fj
					; DATA XREF: .text:off_10001852o
		mov	ecx, [eax+64h]	; jumptable 1000163D case 12331

loc_1000171C:				; CODE XREF: sub_100015BE+89j
					; sub_100015BE+91j ...
		cmp	ecx, [edx]
		setnl	cl

loc_10001721:				; CODE XREF: sub_100015BE+C9j
		test	cl, cl
		jz	short loc_10001799 ; jumptable 1000163D	case 12353
		mov	ecx, [edx+4]
		add	edx, 8
		cmp	ecx, 3038h
		jnz	loc_1000162E

loc_10001737:				; CODE XREF: sub_100015BE+67j
		lea	esi, [eax+10h]
		lea	eax, [esp+2Ch+var_1C]
		mov	[esp+2Ch+var_1C], esi
		cmp	eax, edi
		jnb	short loc_10001774
		cmp	ebx, eax
		ja	short loc_10001774
		mov	esi, eax
		sub	esi, ebx
		sar	esi, 2
		cmp	edi, [esp+2Ch+var_4]
		jnz	short loc_10001769
		push	ecx
		lea	ecx, [esp+30h+var_C]
		call	sub_100049B8
		mov	edi, [esp+2Ch+var_8]
		mov	ebx, [esp+2Ch+var_C]

loc_10001769:				; CODE XREF: sub_100015BE+197j
		test	edi, edi
		jz	short loc_10001792
		mov	eax, [ebx+esi*4]
		mov	[edi], eax
		jmp	short loc_10001792
; ---------------------------------------------------------------------------

loc_10001774:				; CODE XREF: sub_100015BE+186j
					; sub_100015BE+18Aj
		cmp	edi, [esp+2Ch+var_4]
		jnz	short loc_1000178C
		push	ecx
		lea	ecx, [esp+30h+var_C]
		call	sub_100049B8
		mov	edi, [esp+2Ch+var_8]
		mov	ebx, [esp+2Ch+var_C]

loc_1000178C:				; CODE XREF: sub_100015BE+1BAj
		test	edi, edi
		jz	short loc_10001792
		mov	[edi], esi

loc_10001792:				; CODE XREF: sub_100015BE+1ADj
					; sub_100015BE+1B4j ...
		add	edi, 4
		mov	[esp+2Ch+var_8], edi

loc_10001799:				; CODE XREF: sub_100015BE+7Fj
					; sub_100015BE+165j
					; DATA XREF: ...
		lea	ecx, [esp+2Ch+var_18] ;	jumptable 1000163D case	12353
		call	sub_1000490D
		mov	eax, [esp+2Ch+var_18]
		cmp	eax, [ebp+0]
		jnz	loc_10001619

loc_100017AF:				; CODE XREF: sub_100015BE+55j
		mov	ebp, [esp+2Ch+arg_0]
		test	ebp, ebp
		jz	short loc_10001822
		push	[esp+2Ch+arg_4]
		lea	ecx, [esp+30h+var_14]
		call	sub_1000141A
		push	ecx
		push	ecx
		mov	esi, esp
		mov	edx, edi
		mov	ecx, [eax]
		sub	edx, ebx
		mov	al, [eax+4]
		sar	edx, 2
		mov	[esi], ecx
		mov	ecx, ebx
		mov	[esp+34h+arg_4], edx
		push	edx
		mov	edx, edi
		mov	[esi+4], al
		call	sub_1000540E
		add	esp, 0Ch
		cmp	[esp+2Ch+arg_8], 0
		jle	short loc_10001818
		mov	edx, [esp+2Ch+arg_4]
		mov	esi, ebx
		sub	esi, ebp
		xor	ecx, ecx

loc_100017FB:				; CODE XREF: sub_100015BE+252j
		cmp	ecx, edx
		jge	short loc_1000181A
		mov	eax, [esi+ebp]
		inc	ecx
		mov	eax, [eax+38h]
		mov	[ebp+0], eax
		add	ebp, 4
		cmp	ecx, [esp+2Ch+arg_8]
		jl	short loc_100017FB
		jmp	short loc_1000181A
; ---------------------------------------------------------------------------

loc_10001814:				; CODE XREF: sub_100015BE+79j
					; sub_100015BE+7Fj
					; DATA XREF: ...
		xor	edx, edx	; jumptable 1000163D default case
		jmp	short loc_10001833
; ---------------------------------------------------------------------------

loc_10001818:				; CODE XREF: sub_100015BE+231j
		xor	ecx, ecx

loc_1000181A:				; CODE XREF: sub_100015BE+23Fj
					; sub_100015BE+254j
		mov	eax, [esp+2Ch+arg_C]
		mov	[eax], ecx
		jmp	short loc_1000182D
; ---------------------------------------------------------------------------

loc_10001822:				; CODE XREF: sub_100015BE+1F7j
		mov	eax, [esp+2Ch+arg_C]
		sub	edi, ebx
		sar	edi, 2
		mov	[eax], edi

loc_1000182D:				; CODE XREF: sub_100015BE+262j
		mov	dl, 1
		mov	[esp+2Ch+var_14], edx

loc_10001833:				; CODE XREF: sub_100015BE+258j
		test	ebx, ebx
		jz	short loc_10001843
		push	ebx		; void *
		call	ds:free
		mov	edx, [esp+30h+var_14]
		pop	ecx

loc_10001843:				; CODE XREF: sub_100015BE+277j
		pop	edi
		pop	esi
		pop	ebp
		mov	al, dl
		pop	ebx
		add	esp, 1Ch
		retn	10h
sub_100015BE	endp

; ---------------------------------------------------------------------------
		db 8Dh,	49h, 0
off_10001852	dd offset loc_10001644	; DATA XREF: sub_100015BE+7Fr
		dd offset loc_1000164C	; jump table for switch	statement
		dd offset loc_10001654
		dd offset loc_1000165C
		dd offset loc_10001664
		dd offset loc_1000166C
		dd offset loc_10001674
		dd offset loc_1000167F
		dd offset loc_1000168C
		dd offset loc_10001691
		dd offset loc_10001714
		dd offset loc_10001719
		dd offset loc_1000170F
		dd offset loc_10001699
		dd offset loc_10001814
		dd offset loc_1000169E
		dd offset loc_10001814
		dd offset loc_100016A3
		dd offset loc_100016AB
		dd offset loc_100016B3
		dd offset loc_100016BD
		dd offset loc_100016C5
		dd offset loc_100016CD
		dd offset loc_100016D5
		dd offset loc_10001814
		dd offset loc_100016DD
		dd offset loc_100016E2
		dd offset loc_100016E7
		dd offset loc_100016EC
		dd offset loc_100016F1
		dd offset loc_100016F6
		dd offset loc_100016FB
		dd offset loc_10001700
		dd offset loc_10001799
		dd offset loc_10001705

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_100018DE	proc near		; CODE XREF: sub_10001C4E+9p
					; sub_10001DDA+14p ...

var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		push	esi
		mov	esi, [ecx]
		push	edi
		mov	eax, [esi]
		mov	[ebp+var_4], eax
		cmp	eax, esi
		jz	short loc_10001906
		mov	edi, [ebp+arg_0]

loc_100018F2:				; CODE XREF: sub_100018DE+26j
		cmp	[eax+48h], edi
		jz	short loc_10001910
		lea	ecx, [ebp+var_4]
		call	sub_1000490D
		mov	eax, [ebp+var_4]
		cmp	eax, esi
		jnz	short loc_100018F2

loc_10001906:				; CODE XREF: sub_100018DE+Fj
		xor	eax, eax

loc_10001908:				; CODE XREF: sub_100018DE+35j
		pop	edi
		pop	esi
		mov	esp, ebp
		pop	ebp
		retn	4
; ---------------------------------------------------------------------------

loc_10001910:				; CODE XREF: sub_100018DE+17j
		add	eax, 10h
		jmp	short loc_10001908
sub_100018DE	endp


; =============== S U B	R O U T	I N E =======================================


sub_10001915	proc near		; CODE XREF: sub_1000193C+10p
		mov	eax, dword_10009398
		test	al, 1
		jnz	short loc_10001936
		or	eax, 1
		mov	dword_10009398,	eax
		call	sub_100043A0
		push	offset sub_10006990 ; _onexit_t
		call	sub_10006164
		pop	ecx

loc_10001936:				; CODE XREF: sub_10001915+7j
		mov	eax, offset dword_10009374
		retn
sub_10001915	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_1000193C	proc near		; CODE XREF: eglGetDisplay+9p
					; eglGetPlatformDisplayEXT+8Ap

var_14		= byte ptr -14h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		sub	esp, 14h
		push	ebx
		push	esi
		push	edi
		mov	edi, ecx
		mov	esi, edx
		mov	[ebp+var_4], edi
		call	sub_10001915
		mov	ebx, eax
		lea	eax, [ebp+var_4]
		push	eax
		lea	eax, [ebp+var_8]
		mov	ecx, ebx
		push	eax
		call	sub_10004424
		mov	eax, [eax]
		cmp	eax, [ebx]
		jz	short loc_1000196D
		mov	eax, [eax+14h]
		jmp	short loc_100019A0
; ---------------------------------------------------------------------------

loc_1000196D:				; CODE XREF: sub_1000193C+2Aj
		push	60h
		call	ds:moz_xmalloc
		pop	ecx
		test	eax, eax
		jz	short loc_10001987
		push	esi
		push	edi
		mov	ecx, eax
		call	sub_100019A7
		mov	esi, eax
		jmp	short loc_10001989
; ---------------------------------------------------------------------------

loc_10001987:				; CODE XREF: sub_1000193C+3Cj
		xor	esi, esi

loc_10001989:				; CODE XREF: sub_1000193C+49j
		lea	eax, [ebp+var_C]
		mov	[ebp+var_C], edi
		push	eax
		lea	eax, [ebp+var_14]
		mov	[ebp+var_8], esi
		push	eax
		mov	ecx, ebx
		call	sub_100051BC
		mov	eax, esi

loc_100019A0:				; CODE XREF: sub_1000193C+2Fj
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
sub_1000193C	endp


; =============== S U B	R O U T	I N E =======================================


sub_100019A7	proc near		; CODE XREF: sub_1000193C+42p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		push	ebx
		push	esi
		mov	esi, ecx
		xor	ebx, ebx
		push	14h
		mov	[esi+4], eax
		mov	eax, [esp+0Ch+arg_4]
		mov	dword ptr [esi], offset	off_1000756C
		mov	[esi+8], eax
		mov	[esi+0Ch], ebx
		mov	[esi+10h], ebx
		call	ds:moz_xmalloc
		pop	ecx
		test	eax, eax
		jnz	short loc_100019DA

loc_100019D4:				; CODE XREF: sub_100019A7+69j
		call	ds:?_Xbad_alloc@std@@YAXXZ ; std::_Xbad_alloc(void)

loc_100019DA:				; CODE XREF: sub_100019A7+2Bj
		lea	ecx, [eax+4]
		mov	[eax], eax
		test	ecx, ecx
		jz	short loc_100019E5
		mov	[ecx], eax

loc_100019E5:				; CODE XREF: sub_100019A7+3Aj
		lea	ecx, [eax+8]
		test	ecx, ecx
		jz	short loc_100019EE
		mov	[ecx], eax

loc_100019EE:				; CODE XREF: sub_100019A7+43j
		mov	word ptr [eax+0Ch], 101h
		lea	ecx, [esi+14h]
		mov	[esi+0Ch], eax
		call	sub_1000155D
		push	14h
		mov	[esi+24h], ebx
		mov	[esi+28h], ebx
		call	ds:moz_xmalloc
		pop	ecx
		test	eax, eax
		jz	short loc_100019D4
		lea	ecx, [eax+4]
		mov	[eax], eax
		test	ecx, ecx
		jz	short loc_10001A1D
		mov	[ecx], eax

loc_10001A1D:				; CODE XREF: sub_100019A7+72j
		lea	ecx, [eax+8]
		test	ecx, ecx
		jz	short loc_10001A26
		mov	[ecx], eax

loc_10001A26:				; CODE XREF: sub_100019A7+7Bj
		mov	word ptr [eax+0Ch], 101h
		mov	[esi+24h], eax
		mov	[esi+2Ch], ebx
		push	0Fh
		pop	eax
		mov	[esi+44h], eax
		mov	[esi+40h], ebx
		mov	[esi+30h], bl
		mov	[esi+5Ch], eax
		mov	eax, esi
		mov	[esi+58h], ebx
		mov	[esi+48h], bl
		pop	esi
		pop	ebx
		retn	8
sub_100019A7	endp


; =============== S U B	R O U T	I N E =======================================


sub_10001A4E	proc near		; CODE XREF: eglInitialize:loc_1000305Fp

var_C0		= dword	ptr -0C0h
var_BC		= dword	ptr -0BCh
var_B4		= dword	ptr -0B4h
var_B0		= dword	ptr -0B0h
var_A8		= dword	ptr -0A8h
var_A4		= dword	ptr -0A4h
var_A0		= dword	ptr -0A0h
var_90		= byte ptr -90h
var_58		= dword	ptr -58h

		push	ebp
		mov	ebp, esp
		and	esp, 0FFFFFFF8h
		sub	esp, 0C0h
		push	ebx
		mov	ebx, ecx
		push	ebp
		push	esi
		push	edi
		cmp	dword ptr [ebx+2Ch], 0
		mov	[esp+0D0h+var_B4], ebx
		jz	short loc_10001A77
		cmp	dword ptr [ebx+18h], 0
		jbe	short loc_10001A77
		mov	al, 1
		jmp	loc_10001BE8
; ---------------------------------------------------------------------------

loc_10001A77:				; CODE XREF: sub_10001A4E+1Aj
					; sub_10001A4E+20j
		push	dword ptr [ebx+8]
		push	dword ptr [ebx+4]
		push	ebx
		call	ds:libGLESv2_177
		mov	ecx, eax
		add	esp, 0Ch
		mov	[ebx+2Ch], ecx
		test	ecx, ecx
		jnz	short loc_10001AA9
		mov	ecx, ebx
		call	sub_10001BF0
		call	sub_10003C9D
		mov	dword ptr [eax], 3001h
		xor	al, al
		jmp	loc_10001BE8
; ---------------------------------------------------------------------------

loc_10001AA9:				; CODE XREF: sub_10001A4E+40j
		mov	eax, [ecx]
		call	dword ptr [eax+0B0h]
		mov	ecx, [ebx+2Ch]
		mov	edi, eax
		mov	[esp+0D0h+var_B0], edi
		mov	edx, [ecx]
		call	dword ptr [edx+0B4h]
		mov	ecx, [ebx+2Ch]
		mov	[esp+0D0h+var_A8], eax
		mov	edx, [ecx]
		call	dword ptr [edx+7Ch]
		mov	ecx, [ebx+2Ch]
		mov	esi, [eax+0Ch]
		lea	eax, [esp+0D0h+var_C0]
		mov	edx, [ecx]
		push	eax
		mov	[esp+0D4h+var_A4], esi
		call	dword ptr [edx+0Ch]
		mov	ebp, eax
		lea	ecx, [esp+0D0h+var_A0]
		mov	[esp+0D0h+var_BC], ebp
		call	sub_1000155D
		test	ebp, ebp
		jle	short loc_10001B49
		mov	ebx, [esp+0D0h+var_BC]
		xor	ebp, ebp

loc_10001AFB:				; CODE XREF: sub_10001A4E+F5j
		push	esi
		push	esi
		push	[esp+0D8h+var_A8]
		mov	esi, [esp+0DCh+var_C0]
		lea	ecx, [esp+0DCh+var_90]
		push	edi
		sub	esp, 10h
		mov	edi, esp
		lea	esi, [esi+ebp]
		movsd
		movsd
		movsd
		movsd
		call	sub_1000126E
		movzx	eax, byte_1000936C
		push	eax
		lea	eax, [esp+0D4h+var_90]
		push	eax
		push	ecx
		lea	eax, [esp+0DCh+var_BC]
		push	eax
		lea	ecx, [esp+0E0h+var_A0]
		call	sub_10005274
		mov	esi, [esp+0D0h+var_A4]
		lea	ebp, [ebp+10h]
		mov	edi, [esp+0D0h+var_B0]
		dec	ebx
		jnz	short loc_10001AFB
		mov	ebx, [esp+0D0h+var_B4]

loc_10001B49:				; CODE XREF: sub_10001A4E+A5j
		mov	ecx, [esp+0D0h+var_A0]
		xor	ebp, ebp
		inc	ebp
		mov	eax, [ecx]
		mov	[esp+0D0h+var_BC], eax
		cmp	eax, ecx
		jz	short loc_10001BA5
		lea	ecx, [ebx+14h]
		mov	[esp+0D0h+var_B0], ecx
		mov	ebx, ecx

loc_10001B63:				; CODE XREF: sub_10001A4E+151j
		push	24h
		pop	ecx
		lea	esi, [eax+10h]
		movzx	eax, byte_1000936C
		lea	edi, [esp+0D0h+var_90]
		rep movsd
		push	eax
		lea	eax, [esp+0D4h+var_90]
		mov	[esp+0D4h+var_58], ebp
		push	eax
		push	ecx
		lea	eax, [esp+0DCh+var_B0]
		mov	ecx, ebx
		push	eax
		inc	ebp
		call	sub_10005274
		lea	ecx, [esp+0D0h+var_BC]
		call	sub_1000490D
		mov	eax, [esp+0D0h+var_BC]
		cmp	eax, [esp+0D0h+var_A0]
		jnz	short loc_10001B63
		mov	ebx, [esp+0D0h+var_B4]

loc_10001BA5:				; CODE XREF: sub_10001A4E+10Aj
		mov	ecx, [ebx+2Ch]
		push	[esp+0D0h+var_C0]
		mov	eax, [ecx]
		call	dword ptr [eax+10h]
		xor	eax, eax
		mov	[esp+0D0h+var_C0], eax
		cmp	[ebx+2Ch], eax
		jz	short loc_10001BD4
		cmp	[ebx+18h], eax
		jbe	short loc_10001BD4
		mov	ecx, ebx
		call	sub_100024DF
		mov	ecx, ebx
		call	sub_100027C1
		xor	ebx, ebx
		inc	ebx
		jmp	short loc_10001BDD
; ---------------------------------------------------------------------------

loc_10001BD4:				; CODE XREF: sub_10001A4E+16Cj
					; sub_10001A4E+171j
		mov	ecx, ebx
		call	sub_10001BF0
		xor	bl, bl

loc_10001BDD:				; CODE XREF: sub_10001A4E+184j
		lea	ecx, [esp+0D0h+var_A0]
		call	sub_10004226
		mov	al, bl

loc_10001BE8:				; CODE XREF: sub_10001A4E+24j
					; sub_10001A4E+56j
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
sub_10001A4E	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10001BF0	proc near		; CODE XREF: sub_10001A4E+44p
					; sub_10001A4E+188p ...

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ebx
		push	esi
		mov	esi, ecx
		xor	ebx, ebx
		jmp	short loc_10001C0B
; ---------------------------------------------------------------------------

loc_10001BFC:				; CODE XREF: sub_10001BF0+1Ej
		mov	eax, [esi+0Ch]
		mov	ecx, esi
		mov	eax, [eax]
		push	dword ptr [eax+10h]
		call	sub_100022DC

loc_10001C0B:				; CODE XREF: sub_10001BF0+Aj
		cmp	[esi+10h], ebx
		jnz	short loc_10001BFC
		cmp	[esi+28h], ebx
		jz	short loc_10001C3B
		push	edi

loc_10001C16:				; CODE XREF: sub_10001BF0+48j
		mov	eax, [esi+24h]
		mov	eax, [eax]
		mov	eax, [eax+10h]
		push	eax
		mov	[ebp+var_4], eax
		call	ds:libGLESv2_145
		pop	ecx
		lea	eax, [ebp+var_4]
		push	eax
		lea	ecx, [esi+24h]
		call	sub_10004250
		cmp	[esi+28h], ebx
		jnz	short loc_10001C16
		pop	edi

loc_10001C3B:				; CODE XREF: sub_10001BF0+23j
		push	dword ptr [esi+2Ch]
		call	ds:libGLESv2_178
		pop	ecx
		mov	[esi+2Ch], ebx
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
sub_10001BF0	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10001C4E	proc near		; CODE XREF: eglGetConfigAttrib+22p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	[ebp+arg_0]
		add	ecx, 14h
		call	sub_100018DE
		mov	ecx, [ebp+arg_4]
		add	ecx, 0FFFFCFE0h	; switch 35 cases
		cmp	ecx, 22h
		ja	loc_10001D46	; jumptable 10001C6E default case
		jmp	ds:off_10001D4E[ecx*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_10001C75:				; CODE XREF: sub_10001C4E+20j
					; DATA XREF: .text:off_10001D4Eo
		mov	ecx, [eax+0Ch]	; jumptable 10001C6E case 12320
		jmp	loc_10001D3D
; ---------------------------------------------------------------------------

loc_10001C7D:				; CODE XREF: sub_10001C4E+20j
					; DATA XREF: .text:off_10001D4Eo
		mov	ecx, [eax+20h]	; jumptable 10001C6E case 12321
		jmp	loc_10001D3D
; ---------------------------------------------------------------------------

loc_10001C85:				; CODE XREF: sub_10001C4E+20j
					; DATA XREF: .text:off_10001D4Eo
		mov	ecx, [eax+18h]	; jumptable 10001C6E case 12322
		jmp	loc_10001D3D
; ---------------------------------------------------------------------------

loc_10001C8D:				; CODE XREF: sub_10001C4E+20j
					; DATA XREF: .text:off_10001D4Eo
		mov	ecx, [eax+14h]	; jumptable 10001C6E case 12323
		jmp	loc_10001D3D
; ---------------------------------------------------------------------------

loc_10001C95:				; CODE XREF: sub_10001C4E+20j
					; DATA XREF: .text:off_10001D4Eo
		mov	ecx, [eax+10h]	; jumptable 10001C6E case 12324
		jmp	loc_10001D3D
; ---------------------------------------------------------------------------

loc_10001C9D:				; CODE XREF: sub_10001C4E+20j
					; DATA XREF: .text:off_10001D4Eo
		mov	ecx, [eax+40h]	; jumptable 10001C6E case 12325
		jmp	loc_10001D3D
; ---------------------------------------------------------------------------

loc_10001CA5:				; CODE XREF: sub_10001C4E+20j
					; DATA XREF: .text:off_10001D4Eo
		mov	ecx, [eax+78h]	; jumptable 10001C6E case 12326
		jmp	loc_10001D3D
; ---------------------------------------------------------------------------

loc_10001CAD:				; CODE XREF: sub_10001C4E+20j
					; DATA XREF: .text:off_10001D4Eo
		mov	ecx, [eax+34h]	; jumptable 10001C6E case 12327
		jmp	loc_10001D3D
; ---------------------------------------------------------------------------

loc_10001CB5:				; CODE XREF: sub_10001C4E+20j
					; DATA XREF: .text:off_10001D4Eo
		mov	ecx, [eax+38h]	; jumptable 10001C6E case 12328
		jmp	loc_10001D3D
; ---------------------------------------------------------------------------

loc_10001CBD:				; CODE XREF: sub_10001C4E+20j
					; DATA XREF: .text:off_10001D4Eo
		mov	ecx, [eax+44h]	; jumptable 10001C6E case 12329
		jmp	short loc_10001D3D
; ---------------------------------------------------------------------------

loc_10001CC2:				; CODE XREF: sub_10001C4E+20j
					; DATA XREF: .text:off_10001D4Eo
		mov	ecx, [eax+60h]	; jumptable 10001C6E case 12333
		jmp	short loc_10001D3D
; ---------------------------------------------------------------------------

loc_10001CC7:				; CODE XREF: sub_10001C4E+20j
					; DATA XREF: .text:off_10001D4Eo
		mov	ecx, [eax+68h]	; jumptable 10001C6E case 12335
		jmp	short loc_10001D3D
; ---------------------------------------------------------------------------

loc_10001CCC:				; CODE XREF: sub_10001C4E+20j
					; DATA XREF: .text:off_10001D4Eo
		mov	ecx, [eax+74h]	; jumptable 10001C6E case 12337
		jmp	short loc_10001D3D
; ---------------------------------------------------------------------------

loc_10001CD1:				; CODE XREF: sub_10001C4E+20j
					; DATA XREF: .text:off_10001D4Eo
		mov	ecx, [eax+70h]	; jumptable 10001C6E case 12338
		jmp	short loc_10001D3D
; ---------------------------------------------------------------------------

loc_10001CD6:				; CODE XREF: sub_10001C4E+20j
					; DATA XREF: .text:off_10001D4Eo
		mov	ecx, [eax+7Ch]	; jumptable 10001C6E case 12339
		jmp	short loc_10001D3D
; ---------------------------------------------------------------------------

loc_10001CDB:				; CODE XREF: sub_10001C4E+20j
					; DATA XREF: .text:off_10001D4Eo
		mov	ecx, [eax+80h]	; jumptable 10001C6E case 12340
		jmp	short loc_10001D3D
; ---------------------------------------------------------------------------

loc_10001CE3:				; CODE XREF: sub_10001C4E+20j
					; DATA XREF: .text:off_10001D4Eo
		mov	ecx, [eax+8Ch]	; jumptable 10001C6E case 12341
		jmp	short loc_10001D3D
; ---------------------------------------------------------------------------

loc_10001CEB:				; CODE XREF: sub_10001C4E+20j
					; DATA XREF: .text:off_10001D4Eo
		mov	ecx, [eax+88h]	; jumptable 10001C6E case 12342
		jmp	short loc_10001D3D
; ---------------------------------------------------------------------------

loc_10001CF3:				; CODE XREF: sub_10001C4E+20j
					; DATA XREF: .text:off_10001D4Eo
		mov	ecx, [eax+84h]	; jumptable 10001C6E case 12343
		jmp	short loc_10001D3D
; ---------------------------------------------------------------------------

loc_10001CFB:				; CODE XREF: sub_10001C4E+20j
					; DATA XREF: .text:off_10001D4Eo
		mov	ecx, [eax+28h]	; jumptable 10001C6E case 12345
		jmp	short loc_10001D3D
; ---------------------------------------------------------------------------

loc_10001D00:				; CODE XREF: sub_10001C4E+20j
					; DATA XREF: .text:off_10001D4Eo
		mov	ecx, [eax+2Ch]	; jumptable 10001C6E case 12346
		jmp	short loc_10001D3D
; ---------------------------------------------------------------------------

loc_10001D05:				; CODE XREF: sub_10001C4E+20j
					; DATA XREF: .text:off_10001D4Eo
		mov	ecx, [eax+5Ch]	; jumptable 10001C6E case 12347
		jmp	short loc_10001D3D
; ---------------------------------------------------------------------------

loc_10001D0A:				; CODE XREF: sub_10001C4E+20j
					; DATA XREF: .text:off_10001D4Eo
		mov	ecx, [eax+58h]	; jumptable 10001C6E case 12348
		jmp	short loc_10001D3D
; ---------------------------------------------------------------------------

loc_10001D0F:				; CODE XREF: sub_10001C4E+20j
					; DATA XREF: .text:off_10001D4Eo
		mov	ecx, [eax+1Ch]	; jumptable 10001C6E case 12349
		jmp	short loc_10001D3D
; ---------------------------------------------------------------------------

loc_10001D14:				; CODE XREF: sub_10001C4E+20j
					; DATA XREF: .text:off_10001D4Eo
		mov	ecx, [eax+24h]	; jumptable 10001C6E case 12350
		jmp	short loc_10001D3D
; ---------------------------------------------------------------------------

loc_10001D19:				; CODE XREF: sub_10001C4E+20j
					; DATA XREF: .text:off_10001D4Eo
		mov	ecx, [eax+30h]	; jumptable 10001C6E case 12351
		jmp	short loc_10001D3D
; ---------------------------------------------------------------------------

loc_10001D1E:				; CODE XREF: sub_10001C4E+20j
					; DATA XREF: .text:off_10001D4Eo
		mov	ecx, [eax+6Ch]	; jumptable 10001C6E case 12352
		jmp	short loc_10001D3D
; ---------------------------------------------------------------------------

loc_10001D23:				; CODE XREF: sub_10001C4E+20j
					; DATA XREF: .text:off_10001D4Eo
		mov	eax, [ebp+arg_8] ; jumptable 10001C6E case 12353
		and	dword ptr [eax], 0
		jmp	short loc_10001D42
; ---------------------------------------------------------------------------

loc_10001D2B:				; CODE XREF: sub_10001C4E+20j
					; DATA XREF: .text:off_10001D4Eo
		mov	ecx, [eax+3Ch]	; jumptable 10001C6E case 12354
		jmp	short loc_10001D3D
; ---------------------------------------------------------------------------

loc_10001D30:				; CODE XREF: sub_10001C4E+20j
					; DATA XREF: .text:off_10001D4Eo
		mov	ecx, [eax+4Ch]	; jumptable 10001C6E case 12332
		jmp	short loc_10001D3D
; ---------------------------------------------------------------------------

loc_10001D35:				; CODE XREF: sub_10001C4E+20j
					; DATA XREF: .text:off_10001D4Eo
		mov	ecx, [eax+50h]	; jumptable 10001C6E case 12330
		jmp	short loc_10001D3D
; ---------------------------------------------------------------------------

loc_10001D3A:				; CODE XREF: sub_10001C4E+20j
					; DATA XREF: .text:off_10001D4Eo
		mov	ecx, [eax+54h]	; jumptable 10001C6E case 12331

loc_10001D3D:				; CODE XREF: sub_10001C4E+2Aj
					; sub_10001C4E+32j ...
		mov	eax, [ebp+arg_8]
		mov	[eax], ecx

loc_10001D42:				; CODE XREF: sub_10001C4E+DBj
		mov	al, 1
		jmp	short loc_10001D48
; ---------------------------------------------------------------------------

loc_10001D46:				; CODE XREF: sub_10001C4E+1Aj
					; sub_10001C4E+20j
					; DATA XREF: ...
		xor	al, al		; jumptable 10001C6E default case

loc_10001D48:				; CODE XREF: sub_10001C4E+F6j
		pop	ebp
		retn	0Ch
sub_10001C4E	endp

; ---------------------------------------------------------------------------
		db 8Bh,	0FFh
off_10001D4E	dd offset loc_10001C75	; DATA XREF: sub_10001C4E+20r
		dd offset loc_10001C7D	; jump table for switch	statement
		dd offset loc_10001C85
		dd offset loc_10001C8D
		dd offset loc_10001C95
		dd offset loc_10001C9D
		dd offset loc_10001CA5
		dd offset loc_10001CAD
		dd offset loc_10001CB5
		dd offset loc_10001CBD
		dd offset loc_10001D35
		dd offset loc_10001D3A
		dd offset loc_10001D30
		dd offset loc_10001CC2
		dd offset loc_10001D46
		dd offset loc_10001CC7
		dd offset loc_10001D46
		dd offset loc_10001CCC
		dd offset loc_10001CD1
		dd offset loc_10001CD6
		dd offset loc_10001CDB
		dd offset loc_10001CE3
		dd offset loc_10001CEB
		dd offset loc_10001CF3
		dd offset loc_10001D46
		dd offset loc_10001CFB
		dd offset loc_10001D00
		dd offset loc_10001D05
		dd offset loc_10001D0A
		dd offset loc_10001D0F
		dd offset loc_10001D14
		dd offset loc_10001D19
		dd offset loc_10001D1E
		dd offset loc_10001D23
		dd offset loc_10001D2B

; =============== S U B	R O U T	I N E =======================================


sub_10001DDA	proc near		; CODE XREF: eglCreateWindowSurface+3Dp

var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 14h
		push	ebx
		push	ebp
		push	esi
		mov	ebp, ecx
		push	edi
		push	[esp+24h+arg_4]
		mov	[esp+28h+var_C], ebp
		lea	ecx, [ebp+14h]
		call	sub_100018DE
		mov	ecx, [esp+24h+arg_8]
		xor	esi, esi
		mov	[esp+24h+var_8], eax
		mov	edx, esi
		mov	[esp+24h+var_14], esi
		mov	edi, esi
		mov	[esp+24h+arg_4], edx
		mov	ebx, esi
		mov	[esp+24h+var_10], edi
		test	ecx, ecx
		jz	short loc_10001E8C
		mov	eax, [ecx]
		cmp	eax, 3038h
		jz	short loc_10001E8C
		add	ecx, 4

loc_10001E1F:				; CODE XREF: sub_10001DDA+A4j
		sub	eax, 3056h
		jz	short loc_10001E6D
		dec	eax
		jz	short loc_10001E69
		sub	eax, 2Fh
		jz	short loc_10001E50
		dec	eax
		jz	short loc_10001EA2
		dec	eax
		jz	short loc_10001EA2
		sub	eax, 36h
		jz	short loc_10001E48
		sub	eax, 143h
		jnz	short loc_10001E5C
		mov	edi, [ecx]
		mov	[esp+24h+var_10], edi
		jmp	short loc_10001E73
; ---------------------------------------------------------------------------

loc_10001E48:				; CODE XREF: sub_10001DDA+5Dj
		mov	eax, [ecx]
		mov	[esp+24h+var_14], eax
		jmp	short loc_10001E73
; ---------------------------------------------------------------------------

loc_10001E50:				; CODE XREF: sub_10001DDA+52j
		mov	eax, [ecx]
		sub	eax, 3084h
		jz	short loc_10001E73
		dec	eax
		jz	short loc_10001EA2

loc_10001E5C:				; CODE XREF: sub_10001DDA+64j
		call	sub_10003C9D
		mov	dword ptr [eax], 3004h
		jmp	short loc_10001EAD
; ---------------------------------------------------------------------------

loc_10001E69:				; CODE XREF: sub_10001DDA+4Dj
		mov	ebx, [ecx]
		jmp	short loc_10001E73
; ---------------------------------------------------------------------------

loc_10001E6D:				; CODE XREF: sub_10001DDA+4Aj
		mov	edx, [ecx]
		mov	[esp+24h+arg_4], edx

loc_10001E73:				; CODE XREF: sub_10001DDA+6Cj
					; sub_10001DDA+74j ...
		mov	eax, [ecx+4]
		add	ecx, 8
		cmp	eax, 3038h
		jnz	short loc_10001E1F
		test	ebx, ebx
		js	short loc_10001EB4
		test	edx, edx
		js	short loc_10001EB4
		test	edi, edi
		jnz	short loc_10001E93

loc_10001E8C:				; CODE XREF: sub_10001DDA+37j
					; sub_10001DDA+40j
		or	ebx, 0FFFFFFFFh
		mov	[esp+24h+arg_4], ebx

loc_10001E93:				; CODE XREF: sub_10001DDA+B0j
		mov	edi, [ebp+0Ch]
		mov	ebp, [esp+24h+arg_0]
		mov	eax, [edi]
		mov	[esp+24h+arg_8], eax
		jmp	short loc_10001ED6
; ---------------------------------------------------------------------------

loc_10001EA2:				; CODE XREF: sub_10001DDA+55j
					; sub_10001DDA+58j ...
		call	sub_10003C9D
		mov	dword ptr [eax], 3009h

loc_10001EAD:				; CODE XREF: sub_10001DDA+8Dj
					; sub_10001DDA+E5j ...
		xor	eax, eax
		jmp	loc_10001F73
; ---------------------------------------------------------------------------

loc_10001EB4:				; CODE XREF: sub_10001DDA+A8j
					; sub_10001DDA+ACj
		call	sub_10003C9D
		mov	dword ptr [eax], 300Ch
		jmp	short loc_10001EAD
; ---------------------------------------------------------------------------

loc_10001EC1:				; CODE XREF: sub_10001DDA+FEj
		mov	eax, [eax+10h]
		cmp	[eax+14h], ebp
		jz	short loc_10001F3B
		lea	ecx, [esp+24h+arg_8]
		call	sub_1000490D
		mov	eax, [esp+24h+arg_8]

loc_10001ED6:				; CODE XREF: sub_10001DDA+C6j
		cmp	eax, edi
		jnz	short loc_10001EC1
		mov	edi, [esp+24h+var_C]
		push	esi
		mov	ecx, [edi+2Ch]
		mov	eax, [ecx]
		call	dword ptr [eax+74h]
		test	al, al
		jz	short loc_10001EF6
		mov	ecx, edi
		call	sub_10002243
		test	al, al
		jz	short loc_10001EAD

loc_10001EF6:				; CODE XREF: sub_10001DDA+10Fj
		push	50h
		call	ds:moz_xmalloc
		pop	ecx
		test	eax, eax
		jz	short loc_10001F1F
		push	[esp+24h+var_14] ; int
		mov	ecx, eax	; hData
		push	[esp+28h+arg_4]	; int
		push	ebx		; int
		push	[esp+30h+var_10] ; int
		push	ebp		; int
		push	[esp+38h+var_8]	; int
		push	edi		; int
		call	sub_1000284F
		mov	esi, eax

loc_10001F1F:				; CODE XREF: sub_10001DDA+127j
		mov	ecx, esi
		mov	[esp+24h+arg_4], esi
		call	sub_100029EA
		test	al, al
		jnz	short loc_10001F4B
		mov	eax, [esi]
		mov	ecx, esi
		push	1
		call	dword ptr [eax]
		jmp	loc_10001EAD
; ---------------------------------------------------------------------------

loc_10001F3B:				; CODE XREF: sub_10001DDA+EDj
		call	sub_10003C9D
		mov	dword ptr [eax], 3003h
		jmp	loc_10001EAD
; ---------------------------------------------------------------------------

loc_10001F4B:				; CODE XREF: sub_10001DDA+152j
		movzx	eax, byte_1000936C
		push	eax
		lea	eax, [esp+28h+arg_4]
		push	eax
		push	ecx
		lea	eax, [esp+30h+var_8]
		push	eax
		lea	ecx, [edi+0Ch]
		call	sub_10005329
		call	sub_10003C9D
		mov	dword ptr [eax], 3000h
		mov	eax, esi

loc_10001F73:				; CODE XREF: sub_10001DDA+D5j
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 14h
		retn	0Ch
sub_10001DDA	endp


; =============== S U B	R O U T	I N E =======================================


sub_10001F7D	proc near		; CODE XREF: eglCreatePbufferSurface+21p
					; eglCreatePbufferFromClientBuffer+2Dp

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 0Ch
		push	ebx
		push	ebp
		push	esi
		mov	eax, ecx
		xor	esi, esi
		push	edi
		push	[esp+1Ch+arg_0]
		mov	ecx, 305Ch
		mov	[esp+20h+var_C], eax
		mov	ebp, ecx
		mov	[esp+20h+var_8], ecx
		lea	ecx, [eax+14h]
		mov	edi, esi
		mov	ebx, esi
		call	sub_100018DE
		mov	edx, [esp+1Ch+arg_8]
		mov	[esp+1Ch+arg_0], eax
		test	edx, edx
		jz	loc_10002185
		mov	ecx, [edx]
		cmp	ecx, 3038h
		jz	loc_10002185
		add	edx, 4

loc_10001FC8:				; CODE XREF: sub_10001F7D+B9j
		cmp	ecx, 3081h
		jg	short loc_10002016
		jz	short loc_10002004
		sub	ecx, 3056h
		jz	short loc_10002000
		dec	ecx
		jz	short loc_10001FFC
		dec	ecx
		jz	short loc_1000202A
		sub	ecx, 28h
		jnz	loc_10002185
		mov	ebp, [edx]
		lea	eax, [ebp-305Ch]
		cmp	eax, 2
		ja	loc_10002185
		jmp	short loc_1000202A
; ---------------------------------------------------------------------------

loc_10001FFC:				; CODE XREF: sub_10001F7D+5Ej
		mov	edi, [edx]
		jmp	short loc_1000202A
; ---------------------------------------------------------------------------

loc_10002000:				; CODE XREF: sub_10001F7D+5Bj
		mov	ebx, [edx]
		jmp	short loc_1000202A
; ---------------------------------------------------------------------------

loc_10002004:				; CODE XREF: sub_10001F7D+53j
		mov	eax, [edx]
		mov	[esp+1Ch+var_8], eax
		sub	eax, 305Ch
		jz	short loc_1000202A
		sub	eax, 3
		jmp	short loc_10002024
; ---------------------------------------------------------------------------

loc_10002016:				; CODE XREF: sub_10001F7D+51j
		sub	ecx, 3082h
		jnz	loc_10002175
		cmp	[edx], esi

loc_10002024:				; CODE XREF: sub_10001F7D+97j
		jnz	loc_10002185

loc_1000202A:				; CODE XREF: sub_10001F7D+61j
					; sub_10001F7D+7Dj ...
		mov	ecx, [edx+4]
		add	edx, 8
		cmp	ecx, 3038h
		jnz	short loc_10001FC8
		test	edi, edi
		js	loc_10002168
		test	ebx, ebx
		js	loc_10002168
		test	edi, edi
		jz	loc_10002185
		test	ebx, ebx
		jz	loc_10002185
		lea	eax, [ecx+24h]
		cmp	ebp, eax
		jz	short loc_1000209E
		mov	ecx, [esp+1Ch+var_C]
		mov	ecx, [ecx+2Ch]
		mov	eax, [ecx]
		call	dword ptr [eax+84h]
		cmp	byte ptr [eax+14h], 0
		jnz	short loc_10002092
		lea	eax, [edi-1]
		test	edi, eax
		jnz	short loc_10002082
		lea	eax, [ebx-1]
		test	ebx, eax
		jz	short loc_10002092

loc_10002082:				; CODE XREF: sub_10001F7D+FCj
					; sub_10001F7D+11Dj ...
		call	sub_10003C9D
		mov	dword ptr [eax], 3009h
		jmp	loc_10002190
; ---------------------------------------------------------------------------

loc_10002092:				; CODE XREF: sub_10001F7D+F5j
					; sub_10001F7D+103j
		cmp	[esp+1Ch+var_8], 305Ch
		jz	short loc_10002082
		jmp	short loc_100020A4
; ---------------------------------------------------------------------------

loc_1000209E:				; CODE XREF: sub_10001F7D+E0j
		cmp	[esp+1Ch+var_8], eax
		jnz	short loc_10002082

loc_100020A4:				; CODE XREF: sub_10001F7D+11Fj
		mov	eax, [esp+1Ch+arg_0]
		test	byte ptr [eax+7Ch], 1
		jz	short loc_10002082
		cmp	ebp, 305Dh
		jnz	short loc_100020C0
		cmp	dword ptr [eax+28h], 1
		jnz	loc_10002185

loc_100020C0:				; CODE XREF: sub_10001F7D+137j
		cmp	ebp, 305Eh
		jnz	short loc_100020D2
		cmp	dword ptr [eax+2Ch], 1
		jnz	loc_10002185

loc_100020D2:				; CODE XREF: sub_10001F7D+149j
		mov	eax, [esp+1Ch+var_C]
		push	esi
		mov	ecx, [eax+2Ch]
		mov	eax, [ecx]
		call	dword ptr [eax+74h]
		test	al, al
		jz	short loc_100020F4
		mov	ecx, [esp+1Ch+var_C]
		call	sub_10002243
		test	al, al
		jz	loc_10002190

loc_100020F4:				; CODE XREF: sub_10001F7D+164j
		push	50h
		call	ds:moz_xmalloc
		pop	ecx
		test	eax, eax
		jz	short loc_10002121
		push	[esp+1Ch+var_8]
		mov	ecx, [esp+20h+arg_0]
		push	ebp
		push	ebx
		mov	ebx, [esp+28h+var_C]
		push	edi
		push	[esp+2Ch+arg_4]
		push	ecx
		push	ebx
		mov	ecx, eax
		call	sub_100028EF
		mov	esi, eax
		jmp	short loc_10002125
; ---------------------------------------------------------------------------

loc_10002121:				; CODE XREF: sub_10001F7D+182j
		mov	ebx, [esp+1Ch+var_C]

loc_10002125:				; CODE XREF: sub_10001F7D+1A2j
		mov	ecx, esi
		mov	[esp+1Ch+arg_0], esi
		call	sub_100029EA
		test	al, al
		jnz	short loc_1000213E
		mov	eax, [esi]
		mov	ecx, esi
		push	1
		call	dword ptr [eax]
		jmp	short loc_10002190
; ---------------------------------------------------------------------------

loc_1000213E:				; CODE XREF: sub_10001F7D+1B5j
		movzx	eax, byte_1000936C
		push	eax
		lea	eax, [esp+20h+arg_0]
		push	eax
		push	ecx
		lea	eax, [esp+28h+var_8]
		push	eax
		lea	ecx, [ebx+0Ch]
		call	sub_10005329
		call	sub_10003C9D
		mov	dword ptr [eax], 3000h
		mov	eax, esi
		jmp	short loc_10002192
; ---------------------------------------------------------------------------

loc_10002168:				; CODE XREF: sub_10001F7D+BDj
					; sub_10001F7D+C5j
		call	sub_10003C9D
		mov	dword ptr [eax], 300Ch
		jmp	short loc_10002190
; ---------------------------------------------------------------------------

loc_10002175:				; CODE XREF: sub_10001F7D+9Fj
		sub	ecx, 5
		jz	loc_10002082
		dec	ecx
		jz	loc_10002082

loc_10002185:				; CODE XREF: sub_10001F7D+34j
					; sub_10001F7D+42j ...
		call	sub_10003C9D
		mov	dword ptr [eax], 3004h

loc_10002190:				; CODE XREF: sub_10001F7D+110j
					; sub_10001F7D+171j ...
		xor	eax, eax

loc_10002192:				; CODE XREF: sub_10001F7D+1E9j
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 0Ch
		retn	0Ch
sub_10001F7D	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_1000219C	proc near		; CODE XREF: eglCreateContext+E3p

var_8		= byte ptr -8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ecx
		push	edi
		mov	edi, ecx
		mov	ecx, [edi+2Ch]
		test	ecx, ecx
		jnz	short loc_100021B2

loc_100021AB:				; CODE XREF: sub_1000219C+37j
					; sub_1000219C+5Aj
		xor	eax, eax
		jmp	loc_1000223C
; ---------------------------------------------------------------------------

loc_100021B2:				; CODE XREF: sub_1000219C+Dj
		mov	eax, [ecx]
		push	0
		call	dword ptr [eax+74h]
		test	al, al
		jz	short loc_100021D5
		mov	ecx, edi
		call	sub_10002243
		test	al, al
		jnz	short loc_100021D5
		call	sub_10003C9D
		mov	dword ptr [eax], 300Eh
		jmp	short loc_100021AB
; ---------------------------------------------------------------------------

loc_100021D5:				; CODE XREF: sub_1000219C+1Fj
					; sub_1000219C+2Aj
		cmp	[ebp+arg_4], 2
		jle	short loc_100021F8
		mov	ecx, [edi+2Ch]
		mov	eax, [ecx]
		call	dword ptr [eax+0ACh]
		cmp	eax, 4
		jge	short loc_100021F8
		call	sub_10003C9D
		mov	dword ptr [eax], 3005h
		jmp	short loc_100021AB
; ---------------------------------------------------------------------------

loc_100021F8:				; CODE XREF: sub_1000219C+3Dj
					; sub_1000219C+4Dj
		push	esi
		push	0
		push	[ebp+arg_C]
		push	dword ptr [edi+2Ch]
		push	[ebp+arg_8]
		push	[ebp+arg_4]
		call	ds:libGLESv2_144
		movzx	ecx, byte_1000936C
		add	esp, 14h
		mov	esi, eax
		lea	eax, [ebp+arg_4]
		mov	[ebp+arg_4], esi
		push	ecx
		push	eax
		push	ecx
		lea	eax, [ebp+var_8]
		push	eax
		lea	ecx, [edi+24h]
		call	sub_10005329
		call	sub_10003C9D
		mov	dword ptr [eax], 3000h
		mov	eax, esi
		pop	esi

loc_1000223C:				; CODE XREF: sub_1000219C+11j
		pop	edi
		mov	esp, ebp
		pop	ebp
		retn	14h
sub_1000219C	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10002243	proc near		; CODE XREF: sub_10001DDA+113p
					; sub_10001F7D+16Ap ...

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		push	esi
		mov	esi, ecx
		mov	edx, [esi+24h]
		mov	eax, [edx]
		mov	[ebp+var_4], eax
		cmp	eax, edx
		jz	short loc_10002272

loc_10002256:				; CODE XREF: sub_10002243+2Dj
		mov	ecx, [eax+10h]
		mov	eax, [ecx]
		call	dword ptr [eax+8]
		test	al, al
		jnz	short loc_100022AD
		lea	ecx, [ebp+var_4]
		call	sub_1000490D
		mov	eax, [ebp+var_4]
		cmp	eax, [esi+24h]
		jnz	short loc_10002256

loc_10002272:				; CODE XREF: sub_10002243+11j
		mov	ecx, [esi+0Ch]
		mov	eax, [ecx]
		mov	[ebp+var_4], eax
		cmp	eax, ecx
		jz	short loc_10002296

loc_1000227E:				; CODE XREF: sub_10002243+51j
		mov	ecx, [eax+10h]
		call	sub_100029C4
		lea	ecx, [ebp+var_4]
		call	sub_1000490D
		mov	eax, [ebp+var_4]
		cmp	eax, [esi+0Ch]
		jnz	short loc_1000227E

loc_10002296:				; CODE XREF: sub_10002243+39j
		mov	ecx, [esi+2Ch]
		mov	eax, [ecx]
		call	dword ptr [eax+8]
		test	al, al
		jnz	short loc_100022B1
		call	sub_10003C9D
		mov	dword ptr [eax], 3003h

loc_100022AD:				; CODE XREF: sub_10002243+1Dj
		xor	al, al
		jmp	short loc_100022D7
; ---------------------------------------------------------------------------

loc_100022B1:				; CODE XREF: sub_10002243+5Dj
		mov	ecx, [esi+0Ch]
		mov	eax, [ecx]
		mov	[ebp+var_4], eax
		cmp	eax, ecx
		jz	short loc_100022D5

loc_100022BD:				; CODE XREF: sub_10002243+90j
		mov	ecx, [eax+10h]
		call	sub_100029EA
		lea	ecx, [ebp+var_4]
		call	sub_1000490D
		mov	eax, [ebp+var_4]
		cmp	eax, [esi+0Ch]
		jnz	short loc_100022BD

loc_100022D5:				; CODE XREF: sub_10002243+78j
		mov	al, 1

loc_100022D7:				; CODE XREF: sub_10002243+6Cj
		pop	esi
		mov	esp, ebp
		pop	ebp
		retn
sub_10002243	endp


; =============== S U B	R O U T	I N E =======================================


sub_100022DC	proc near		; CODE XREF: sub_10001BF0+16p
					; eglDestroySurface+2Fp

arg_0		= dword	ptr  4

		push	esi
		mov	esi, ecx
		mov	ecx, [esp+4+arg_0]
		test	ecx, ecx
		jz	short loc_100022ED
		mov	eax, [ecx]
		push	1
		call	dword ptr [eax]

loc_100022ED:				; CODE XREF: sub_100022DC+9j
		lea	eax, [esp+4+arg_0]
		push	eax
		lea	ecx, [esi+0Ch]
		call	sub_10004250
		pop	esi
		retn	4
sub_100022DC	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_100022FE	proc near		; DATA XREF: .rdata:off_1000756Co

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		push	esi
		mov	esi, ecx
		mov	edx, [esi+24h]
		mov	eax, [edx]
		mov	[ebp+var_4], eax
		cmp	eax, edx
		jz	short loc_10002329

loc_10002311:				; CODE XREF: sub_100022FE+29j
		mov	ecx, [eax+10h]
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		lea	ecx, [ebp+var_4]
		call	sub_1000490D
		mov	eax, [ebp+var_4]
		cmp	eax, [esi+24h]
		jnz	short loc_10002311

loc_10002329:				; CODE XREF: sub_100022FE+11j
		call	sub_10003C9D
		pop	esi
		mov	dword ptr [eax], 300Eh
		mov	esp, ebp
		pop	ebp
		retn
sub_100022FE	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10002339	proc near		; DATA XREF: .rdata:10007570o

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		push	esi
		mov	esi, ecx
		mov	edx, [esi+0Ch]
		mov	eax, [edx]
		mov	[ebp+var_4], eax
		cmp	eax, edx
		jz	short loc_1000236B

loc_1000234C:				; CODE XREF: sub_10002339+30j
		mov	ecx, [eax+10h]
		mov	eax, [ecx]
		call	dword ptr [eax+8]
		mov	ecx, eax
		mov	edx, [eax]
		call	dword ptr [edx+10h]
		lea	ecx, [ebp+var_4]
		call	sub_1000490D
		mov	eax, [ebp+var_4]
		cmp	eax, [esi+0Ch]
		jnz	short loc_1000234C

loc_1000236B:				; CODE XREF: sub_10002339+11j
		pop	esi
		mov	esp, ebp
		pop	ebp
		retn
sub_10002339	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10002370	proc near		; CODE XREF: sub_1000277C+21p

var_CC		= dword	ptr -0CCh
var_C8		= dword	ptr -0C8h
var_C4		= dword	ptr -0C4h
var_C0		= byte ptr -0C0h
var_B8		= byte ptr -0B8h
var_B4		= byte ptr -0B4h
var_68		= byte ptr -68h
var_1C		= byte ptr -1Ch
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		and	esp, 0FFFFFFF8h
		sub	esp, 0D0h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+0D0h+var_4], eax
		push	ebx
		push	esi
		push	0Fh
		pop	esi
		xor	ebx, ebx
		mov	[esp+0D8h+var_8], esi
		push	19h		; size_t
		push	offset aEgl_ext_client ; "EGL_EXT_client_extensions"
		lea	ecx, [esp+0E0h+var_1C] ; void *
		mov	[esp+0E0h+var_CC], ebx
		mov	[esp+0E0h+var_C8], ebx
		mov	[esp+0E0h+var_C4], ebx
		mov	[esp+0E0h+var_C], ebx
		mov	[esp+0E0h+var_1C], bl
		call	sub_1000475E
		lea	eax, [esp+0D8h+var_1C]
		push	eax		; void *
		lea	ecx, [esp+0DCh+var_CC]
		call	sub_100042E2
		push	ebx		; size_t
		push	1		; char
		lea	ecx, [esp+0E0h+var_1C]
		call	sub_100047F8
		push	14h		; size_t
		push	offset aAngle_platform ; "ANGLE_platform_angle"
		lea	ecx, [esp+0E0h+var_1C] ; void *
		mov	[esp+0E0h+var_8], esi
		mov	[esp+0E0h+var_C], ebx
		mov	[esp+0E0h+var_1C], bl
		call	sub_1000475E
		lea	eax, [esp+0D8h+var_1C]
		push	eax		; void *
		lea	ecx, [esp+0DCh+var_CC]
		call	sub_100042E2
		push	ebx		; size_t
		push	1		; char
		lea	ecx, [esp+0E0h+var_1C]
		call	sub_100047F8
		push	18h		; size_t
		push	offset aAngle_platfo_0 ; "ANGLE_platform_angle_d3d"
		lea	ecx, [esp+0E0h+var_1C] ; void *
		mov	[esp+0E0h+var_8], esi
		mov	[esp+0E0h+var_C], ebx
		mov	[esp+0E0h+var_1C], bl
		call	sub_1000475E
		lea	eax, [esp+0D8h+var_1C]
		push	eax		; void *
		lea	ecx, [esp+0DCh+var_CC]
		call	sub_100042E2
		push	ebx		; size_t
		push	1		; char
		lea	ecx, [esp+0E0h+var_1C]
		call	sub_100047F8
		push	ecx
		push	ecx
		lea	ecx, [esp+0E0h+var_B8]
		call	sub_10004470
		lea	eax, [esp+0D8h+var_B8]
		push	eax
		push	offset asc_10007288 ; "	"
		push	[esp+0E0h+var_C8]
		lea	ecx, [esp+0E4h+var_C0]
		push	[esp+0E4h+var_CC]
		call	sub_10005221
		add	esp, 10h
		lea	ecx, [esp+0D8h+var_B4]
		mov	esi, offset dword_10009380
		push	esi
		call	sub_10004861
		lea	ecx, [esp+0D8h+var_68]
		call	sub_100044D2
		lea	ecx, [esp+0D8h+var_68]
		call	ds:??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ ;	std::basic_ios<char,std::char_traits<char>>::~basic_ios<char,std::char_traits<char>>(void)
		lea	ecx, [esp+0D8h+var_CC]
		call	sub_10004366
		mov	ecx, [esp+0D8h+var_4]
		mov	eax, esi
		pop	esi
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	esp, ebp
		pop	ebp
		retn
sub_10002370	endp


; =============== S U B	R O U T	I N E =======================================


sub_100024DF	proc near		; CODE XREF: sub_10001A4E+175p

var_E8		= dword	ptr -0E8h
var_E4		= dword	ptr -0E4h
var_E0		= dword	ptr -0E0h
var_DC		= byte ptr -0DCh
var_D4		= byte ptr -0D4h
var_D0		= byte ptr -0D0h
var_84		= byte ptr -84h
var_38		= byte ptr -38h
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= byte ptr -20h
var_8		= dword	ptr -8

		sub	esp, 0ECh
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+0ECh+var_8], eax
		push	ebx
		push	ebp
		push	esi
		push	edi
		push	0Fh
		pop	ebp
		xor	ebx, ebx
		mov	[esp+0FCh+var_24], ebp
		push	21h		; size_t
		mov	esi, ecx
		mov	[esp+100h+var_E8], ebx
		push	offset aEgl_ext_create ; "EGL_EXT_create_context_robustness"
		lea	ecx, [esp+104h+var_38] ; void *
		mov	[esp+104h+var_E4], ebx
		mov	[esp+104h+var_E0], ebx
		mov	[esp+104h+var_28], ebx
		mov	[esp+104h+var_38], bl
		call	sub_1000475E
		lea	eax, [esp+0FCh+var_38]
		push	eax		; void *
		lea	ecx, [esp+100h+var_E8]
		call	sub_100042E2
		xor	edi, edi
		lea	ecx, [esp+0FCh+var_38]
		push	ebx		; size_t
		inc	edi
		push	edi		; char
		call	sub_100047F8
		mov	ecx, [esi+2Ch]
		mov	eax, [ecx]
		call	dword ptr [eax+0A4h]
		test	al, al
		jz	loc_100025F5
		push	28h		; size_t
		push	offset aEgl_angle_d3d_ ; "EGL_ANGLE_d3d_share_handle_client_buffe"...
		lea	ecx, [esp+104h+var_38] ; void *
		mov	[esp+104h+var_24], ebp
		mov	[esp+104h+var_28], ebx
		mov	[esp+104h+var_38], bl
		call	sub_1000475E
		lea	eax, [esp+0FCh+var_38]
		push	eax		; void *
		lea	ecx, [esp+100h+var_E8]
		call	sub_100042E2
		push	ebx		; size_t
		push	edi		; char
		lea	ecx, [esp+104h+var_38]
		call	sub_100047F8
		push	2Dh		; size_t
		push	offset aEgl_angle_surf ; "EGL_ANGLE_surface_d3d_texture_2d_share_"...
		lea	ecx, [esp+104h+var_38] ; void *
		mov	[esp+104h+var_24], ebp
		mov	[esp+104h+var_28], ebx
		mov	[esp+104h+var_38], bl
		call	sub_1000475E
		lea	eax, [esp+0FCh+var_38]
		push	eax		; void *
		lea	ecx, [esp+100h+var_E8]
		call	sub_100042E2
		push	ebx		; size_t
		push	edi		; char
		lea	ecx, [esp+104h+var_38]
		call	sub_100047F8

loc_100025F5:				; CODE XREF: sub_100024DF+82j
		push	1Fh		; size_t
		push	offset aEgl_angle_quer ; "EGL_ANGLE_query_surface_pointer"
		lea	ecx, [esp+104h+var_38] ; void *
		mov	[esp+104h+var_24], ebp
		mov	[esp+104h+var_28], ebx
		mov	[esp+104h+var_38], bl
		call	sub_1000475E
		lea	eax, [esp+0FCh+var_38]
		push	eax		; void *
		lea	ecx, [esp+100h+var_E8]
		call	sub_100042E2
		push	ebx		; size_t
		push	edi		; char
		lea	ecx, [esp+104h+var_38]
		call	sub_100047F8
		push	1Bh		; size_t
		push	offset aEgl_angle_wind ; "EGL_ANGLE_window_fixed_size"
		lea	ecx, [esp+104h+var_38] ; void *
		mov	[esp+104h+var_24], ebp
		mov	[esp+104h+var_28], ebx
		mov	[esp+104h+var_38], bl
		call	sub_1000475E
		lea	eax, [esp+0FCh+var_38]
		push	eax		; void *
		lea	ecx, [esp+100h+var_E8]
		call	sub_100042E2
		push	ebx		; size_t
		push	edi		; char
		lea	ecx, [esp+104h+var_38]
		call	sub_100047F8
		mov	ecx, [esi+2Ch]
		mov	eax, [ecx]
		call	dword ptr [eax+0A8h]
		test	al, al
		jz	short loc_100026D9
		push	16h		; size_t
		push	offset aEgl_nv_post_su ; "EGL_NV_post_sub_buffer"
		lea	ecx, [esp+104h+var_38] ; void *
		mov	[esp+104h+var_24], ebp
		mov	[esp+104h+var_28], ebx
		mov	[esp+104h+var_38], bl
		call	sub_1000475E
		lea	eax, [esp+0FCh+var_38]
		push	eax		; void *
		lea	ecx, [esp+100h+var_E8]
		call	sub_100042E2
		push	ebx		; size_t
		push	edi		; char
		lea	ecx, [esp+104h+var_38]
		call	sub_100047F8

loc_100026D9:				; CODE XREF: sub_100024DF+1B1j
		push	ecx
		push	ecx
		lea	ecx, [esp+104h+var_D4]
		call	sub_10004470
		lea	eax, [esp+0FCh+var_D4]
		push	eax
		push	offset asc_10007288 ; "	"
		push	[esp+104h+var_E4]
		lea	ecx, [esp+108h+var_DC]
		push	[esp+108h+var_E8]
		call	sub_10005221
		add	esp, 10h
		lea	eax, [esp+0FCh+var_20]
		lea	ecx, [esp+0FCh+var_D0]
		push	eax
		call	sub_10004861
		add	esi, 30h
		lea	eax, [esp+0FCh+var_20]
		cmp	esi, eax
		jz	short loc_10002739
		push	ebx		; size_t
		push	edi		; char
		mov	ecx, esi
		call	sub_100047F8
		lea	eax, [esp+0FCh+var_20]
		mov	ecx, esi
		push	eax		; void *
		call	sub_1000454B

loc_10002739:				; CODE XREF: sub_100024DF+240j
		push	ebx		; size_t
		push	edi		; char
		lea	ecx, [esp+104h+var_20]
		call	sub_100047F8
		lea	ecx, [esp+0FCh+var_84]
		call	sub_100044D2
		lea	ecx, [esp+0FCh+var_84]
		call	ds:??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ ;	std::basic_ios<char,std::char_traits<char>>::~basic_ios<char,std::char_traits<char>>(void)
		lea	ecx, [esp+0FCh+var_E8]
		call	sub_10004366
		mov	ecx, [esp+0FCh+var_8]
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 0ECh
		retn
sub_100024DF	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000277C	proc near		; CODE XREF: eglQueryString+54p
		test	ecx, ecx
		jz	short loc_1000278C
		lea	eax, [ecx+30h]
		cmp	dword ptr [eax+14h], 10h
		jb	short locret_100027C0
		mov	eax, [eax]
		retn
; ---------------------------------------------------------------------------

loc_1000278C:				; CODE XREF: sub_1000277C+2j
		mov	eax, dword_1000937C
		test	al, 1
		jnz	short loc_100027AD
		or	eax, 1
		mov	dword_1000937C,	eax
		call	sub_10002370
		push	offset sub_10006995 ; _onexit_t
		call	sub_10006164
		pop	ecx

loc_100027AD:				; CODE XREF: sub_1000277C+17j
		cmp	dword_10009394,	10h
		mov	eax, dword_10009380
		jnb	short locret_100027C0
		mov	eax, offset dword_10009380

locret_100027C0:			; CODE XREF: sub_1000277C+Bj
					; sub_1000277C+3Dj
		retn
sub_1000277C	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_100027C1	proc near		; CODE XREF: sub_10001A4E+17Cp

var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
DstBuf		= byte ptr -44h
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		sub	esp, 4Ch
		mov	eax, ___security_cookie
		xor	eax, ebp
		mov	[ebp+var_4], eax
		push	ebx
		push	esi
		mov	esi, ecx
		push	edi
		push	offset aGoogleInc_ ; "Google Inc."
		lea	ecx, [esi+48h]
		call	sub_100047CF
		mov	ecx, [esi+2Ch]
		xor	edi, edi
		mov	[ebp+var_4C], edi
		mov	[ebp+var_48], edi
		test	ecx, ecx
		jz	short loc_1000283E
		mov	eax, [ecx]
		lea	edx, [ebp+var_4C]
		push	edx
		call	dword ptr [eax+138h]
		test	al, al
		jz	short loc_1000283E
		push	[ebp+var_4C]
		lea	eax, [ebp+DstBuf]
		push	[ebp+var_48]
		push	offset Format	; " (adapter LUID: %08x%08x)"
		push	40h		; SizeInBytes
		push	eax		; DstBuf
		call	ds:sprintf_s
		add	esp, 14h
		cmp	[ebp+DstBuf], 0
		jz	short loc_10002831
		lea	edi, [ebp+DstBuf]
		lea	ecx, [edi+1]

loc_10002828:				; CODE XREF: sub_100027C1+6Cj
		mov	al, [edi]
		inc	edi
		test	al, al
		jnz	short loc_10002828
		sub	edi, ecx

loc_10002831:				; CODE XREF: sub_100027C1+5Fj
		push	edi		; size_t
		lea	eax, [ebp+DstBuf]
		push	eax		; void *
		lea	ecx, [esi+48h]	; int
		call	sub_10004630

loc_1000283E:				; CODE XREF: sub_100027C1+2Fj
					; sub_100027C1+3Fj
		mov	ecx, [ebp+var_4]
		pop	edi
		pop	esi
		xor	ecx, ebp
		pop	ebx
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	esp, ebp
		pop	ebp
		retn
sub_100027C1	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __thiscall sub_1000284F(HANDLE hData, int, int, int, int,	int, int, int)
sub_1000284F	proc near		; CODE XREF: sub_10001DDA+13Ep

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch
arg_18		= dword	ptr  20h

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_0]
		push	esi
		mov	esi, ecx
		push	1
		mov	[esi+4], eax
		mov	eax, [ebp+arg_8]
		mov	dword ptr [esi], offset	off_10007480
		mov	[esi+14h], eax
		mov	eax, [ebp+arg_4]
		mov	[esi+1Ch], eax
		mov	eax, [ebp+arg_18]
		mov	[esi+40h], eax
		mov	eax, [esi+4]
		mov	eax, [eax+2Ch]
		or	dword ptr [esi+3Ch], 0FFFFFFFFh
		mov	[esi+8], eax
		xor	eax, eax
		mov	[esi+10h], eax
		mov	[esi+0Ch], eax
		mov	[esi+4Ch], eax
		mov	eax, 305Ch
		mov	[esi+34h], eax
		mov	[esi+38h], eax
		mov	eax, [ebp+arg_10]
		mov	[esi+24h], eax
		mov	eax, [ebp+arg_14]
		mov	dword ptr [esi+28h], 2710h
		mov	dword ptr [esi+2Ch], 3084h
		mov	dword ptr [esi+30h], 3094h
		mov	[esi+20h], eax
		call	sub_10002DD6
		mov	eax, [ebp+arg_C]
		mov	ecx, esi	; hData
		mov	[esi+44h], eax
		call	sub_10002C57
		mov	eax, esi
		pop	esi
		pop	ebp
		retn	1Ch
sub_1000284F	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_100028D2(void *, char)
sub_100028D2	proc near		; DATA XREF: .rdata:off_10007480o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	sub_1000296F
		test	[esp+4+arg_0], 1
		jz	short loc_100028E9
		push	esi		; void *
		call	ds:free
		pop	ecx

loc_100028E9:				; CODE XREF: sub_100028D2+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_100028D2	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_100028EF	proc near		; CODE XREF: sub_10001F7D+19Bp

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch
arg_18		= dword	ptr  20h

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_0]
		push	esi
		mov	esi, ecx
		xor	ecx, ecx
		push	1
		mov	[esi+4], eax
		mov	eax, [ebp+arg_8]
		mov	[esi+0Ch], eax
		mov	eax, [ebp+arg_4]
		mov	dword ptr [esi], offset	off_10007480
		mov	[esi+14h], ecx
		mov	[esi+1Ch], eax
		mov	eax, [ebp+arg_10]
		mov	[esi+20h], eax
		mov	eax, [ebp+arg_C]
		mov	[esi+24h], eax
		mov	eax, [esi+4]
		mov	[esi+40h], ecx
		mov	eax, [eax+2Ch]
		or	dword ptr [esi+3Ch], 0FFFFFFFFh
		mov	[esi+8], eax
		mov	eax, [ebp+arg_14]
		mov	[esi+10h], ecx
		mov	[esi+18h], cl
		mov	[esi+4Ch], ecx
		mov	ecx, esi
		mov	[esi+34h], eax
		mov	eax, [ebp+arg_18]
		mov	[esi+38h], eax
		mov	dword ptr [esi+28h], 2710h
		mov	dword ptr [esi+2Ch], 3084h
		mov	dword ptr [esi+30h], 3094h
		call	sub_10002DD6
		mov	dword ptr [esi+44h], 1
		mov	eax, esi
		pop	esi
		pop	ebp
		retn	1Ch
sub_100028EF	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000296F	proc near		; CODE XREF: sub_100028D2+3p
		push	edi
		mov	edi, ecx
		cmp	byte ptr [edi+18h], 0
		mov	dword ptr [edi], offset	off_10007480
		jz	short loc_100029BC
		push	ebx
		mov	ebx, [edi+14h]
		test	ebx, ebx
		jz	short loc_100029BB
		push	ebp
		mov	ebp, offset String ; "Egl::SurfaceParentWndProc"
		push	ebp		; lpString
		push	ebx		; hWnd
		call	ds:GetPropA
		test	eax, eax
		jz	short loc_100029A2
		push	eax		; dwNewLong
		push	0FFFFFFFCh	; nIndex
		push	ebx		; hWnd
		call	ds:SetWindowLongA

loc_100029A2:				; CODE XREF: sub_1000296F+27j
		push	offset aEglSurfaceowne ; "Egl::SurfaceOwner"
		push	ebx		; hWnd
		call	ds:RemovePropA
		push	ebp		; lpString
		push	ebx		; hWnd
		call	ds:RemovePropA
		mov	byte ptr [edi+18h], 0
		pop	ebp

loc_100029BB:				; CODE XREF: sub_1000296F+15j
		pop	ebx

loc_100029BC:				; CODE XREF: sub_1000296F+Dj
		mov	ecx, edi
		pop	edi
		jmp	$+5
sub_1000296F	endp


; =============== S U B	R O U T	I N E =======================================


sub_100029C4	proc near		; CODE XREF: sub_10002243+3Ep
					; sub_1000296F+50j
		push	esi
		mov	esi, ecx
		mov	ecx, [esi+10h]
		test	ecx, ecx
		jz	short loc_100029D4
		mov	eax, [ecx]
		push	1
		call	dword ptr [eax]

loc_100029D4:				; CODE XREF: sub_100029C4+8j
		and	dword ptr [esi+10h], 0
		mov	ecx, [esi+4Ch]
		test	ecx, ecx
		jz	short loc_100029E8
		mov	eax, [ecx]
		call	dword ptr [eax+1Ch]
		and	dword ptr [esi+4Ch], 0

loc_100029E8:				; CODE XREF: sub_100029C4+19j
		pop	esi
		retn
sub_100029C4	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_100029EA	proc near		; CODE XREF: sub_10001DDA+14Bp
					; sub_10001F7D+1AEp ...

Rect		= tagRECT ptr -14h
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		sub	esp, 14h
		mov	eax, ___security_cookie
		xor	eax, ebp
		mov	[ebp+var_4], eax
		push	ebx
		push	esi
		mov	esi, ecx
		push	edi
		cmp	dword ptr [esi+44h], 0
		jnz	short loc_10002A34
		lea	eax, [ebp+Rect]
		push	eax		; lpRect
		push	dword ptr [esi+14h] ; hWnd
		call	ds:GetClientRect
		cmp	eax, 1
		jz	short loc_10002A26
		call	sub_10003C9D
		mov	dword ptr [eax], 300Dh

loc_10002A22:				; CODE XREF: sub_100029EA+78j
					; sub_100029EA+98j
		xor	al, al
		jmp	short loc_10002A86
; ---------------------------------------------------------------------------

loc_10002A26:				; CODE XREF: sub_100029EA+2Bj
		mov	edi, [ebp+Rect.right]
		mov	ebx, [ebp+Rect.bottom]
		sub	edi, [ebp+Rect.left]
		sub	ebx, [ebp+Rect.top]
		jmp	short loc_10002A3A
; ---------------------------------------------------------------------------

loc_10002A34:				; CODE XREF: sub_100029EA+19j
		mov	edi, [esi+24h]
		mov	ebx, [esi+20h]

loc_10002A3A:				; CODE XREF: sub_100029EA+48j
		mov	eax, [esi+1Ch]
		mov	ecx, [esi+8]
		push	dword ptr [eax+4]
		mov	edx, [ecx]
		push	dword ptr [eax]
		push	dword ptr [esi+0Ch]
		push	dword ptr [esi+14h]
		call	dword ptr [edx+18h]
		mov	[esi+10h], eax
		test	eax, eax
		jnz	short loc_10002A64
		call	sub_10003C9D
		mov	dword ptr [eax], 3003h
		jmp	short loc_10002A22
; ---------------------------------------------------------------------------

loc_10002A64:				; CODE XREF: sub_100029EA+6Bj
		push	ebx
		push	edi
		mov	ecx, esi
		call	sub_10002B0D
		test	al, al
		jnz	short loc_10002A84
		mov	ecx, [esi+10h]
		test	ecx, ecx
		jz	short loc_10002A7E
		mov	eax, [ecx]
		push	1
		call	dword ptr [eax]

loc_10002A7E:				; CODE XREF: sub_100029EA+8Cj
		and	dword ptr [esi+10h], 0
		jmp	short loc_10002A22
; ---------------------------------------------------------------------------

loc_10002A84:				; CODE XREF: sub_100029EA+85j
		mov	al, 1

loc_10002A86:				; CODE XREF: sub_100029EA+3Aj
		mov	ecx, [ebp+var_4]
		pop	edi
		pop	esi
		xor	ecx, ebp
		pop	ebx
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	esp, ebp
		pop	ebp
		retn
sub_100029EA	endp


; =============== S U B	R O U T	I N E =======================================


sub_10002A97	proc near		; CODE XREF: sub_10002CD7+B1p

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ecx
		push	ecx
		push	ebx
		mov	ebx, [esp+0Ch+arg_4]
		lea	edx, [esp+0Ch+arg_4]
		xor	eax, eax
		push	ebp
		inc	eax
		mov	[esp+10h+var_8], eax
		mov	[esp+10h+var_4], eax
		push	esi
		mov	esi, ecx
		push	edi
		cmp	ebx, eax
		jg	short loc_10002ABA
		lea	edx, [esp+18h+var_8]

loc_10002ABA:				; CODE XREF: sub_10002A97+1Dj
		mov	ebp, [esp+18h+arg_0]
		lea	edi, [esp+18h+arg_0]
		cmp	ebp, eax
		jg	short loc_10002ACA
		lea	edi, [esp+18h+var_4]

loc_10002ACA:				; CODE XREF: sub_10002A97+2Dj
		mov	ecx, [esi+10h]
		push	dword ptr [edx]
		push	dword ptr [edi]
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		mov	edi, eax
		cmp	edi, 300Eh
		jnz	short loc_10002AEB
		mov	ecx, [esi+4]
		mov	eax, [ecx]
		call	dword ptr [eax]

loc_10002AE7:				; CODE XREF: sub_10002A97+63j
		xor	al, al
		jmp	short loc_10002B04
; ---------------------------------------------------------------------------

loc_10002AEB:				; CODE XREF: sub_10002A97+47j
		cmp	edi, 3000h
		jz	short loc_10002AFC
		call	sub_10003C9D
		mov	[eax], edi
		jmp	short loc_10002AE7
; ---------------------------------------------------------------------------

loc_10002AFC:				; CODE XREF: sub_10002A97+5Aj
		mov	[esi+24h], ebp
		mov	al, 1
		mov	[esi+20h], ebx

loc_10002B04:				; CODE XREF: sub_10002A97+52j
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		pop	ecx
		pop	ecx
		retn	8
sub_10002A97	endp


; =============== S U B	R O U T	I N E =======================================


sub_10002B0D	proc near		; CODE XREF: sub_100029EA+7Ep
					; sub_10002CD7+A2p

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ecx
		push	ecx
		push	ebx
		mov	ebx, [esp+0Ch+arg_4]
		lea	edx, [esp+0Ch+arg_4]
		xor	eax, eax
		push	ebp
		inc	eax
		mov	[esp+10h+var_8], eax
		mov	[esp+10h+var_4], eax
		push	esi
		mov	esi, ecx
		push	edi
		cmp	ebx, eax
		jg	short loc_10002B30
		lea	edx, [esp+18h+var_8]

loc_10002B30:				; CODE XREF: sub_10002B0D+1Dj
		mov	ebp, [esp+18h+arg_0]
		lea	edi, [esp+18h+arg_0]
		cmp	ebp, eax
		jg	short loc_10002B40
		lea	edi, [esp+18h+var_4]

loc_10002B40:				; CODE XREF: sub_10002B0D+2Dj
		mov	ecx, [esi+10h]
		push	dword ptr [esi+3Ch]
		push	dword ptr [edx]
		mov	eax, [ecx]
		push	dword ptr [edi]
		call	dword ptr [eax+8]
		mov	edi, eax
		cmp	edi, 300Eh
		jnz	short loc_10002B65
		mov	ecx, [esi+8]
		mov	eax, [ecx]
		call	dword ptr [eax+6Ch]

loc_10002B61:				; CODE XREF: sub_10002B0D+67j
		xor	al, al
		jmp	short loc_10002B82
; ---------------------------------------------------------------------------

loc_10002B65:				; CODE XREF: sub_10002B0D+4Aj
		cmp	edi, 3000h
		jz	short loc_10002B76
		call	sub_10003C9D
		mov	[eax], edi
		jmp	short loc_10002B61
; ---------------------------------------------------------------------------

loc_10002B76:				; CODE XREF: sub_10002B0D+5Ej
		mov	[esi+24h], ebp
		mov	al, 1
		mov	[esi+20h], ebx
		mov	byte ptr [esi+48h], 0

loc_10002B82:				; CODE XREF: sub_10002B0D+56j
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		pop	ecx
		pop	ecx
		retn	8
sub_10002B0D	endp


; =============== S U B	R O U T	I N E =======================================


sub_10002B8B	proc near		; CODE XREF: eglSwapBuffers+52p
					; eglPostSubBufferNV+6Ep

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	esi
		mov	esi, ecx
		push	edi
		mov	edi, [esi+10h]
		test	edi, edi
		jnz	short loc_10002B9A
		mov	al, 1
		jmp	short loc_10002C0B
; ---------------------------------------------------------------------------

loc_10002B9A:				; CODE XREF: sub_10002B8B+9j
		mov	ecx, [esp+8+arg_8]
		push	ebx
		mov	ebx, [esp+0Ch+arg_0]
		lea	eax, [ebx+ecx]
		cmp	eax, [esi+24h]
		jle	short loc_10002BB0
		mov	ecx, [esi+24h]
		sub	ecx, ebx

loc_10002BB0:				; CODE XREF: sub_10002B8B+1Ej
		mov	edx, [esp+0Ch+arg_C]
		push	ebp
		mov	ebp, [esp+10h+arg_4]
		lea	eax, [edx+ebp]
		cmp	eax, [esi+20h]
		jle	short loc_10002BC6
		mov	edx, [esi+20h]
		sub	edx, ebp

loc_10002BC6:				; CODE XREF: sub_10002B8B+34j
		test	ecx, ecx
		jz	short loc_10002C07
		test	edx, edx
		jz	short loc_10002C07
		mov	eax, [edi]
		push	edx
		push	ecx
		push	ebp
		push	ebx
		mov	ecx, edi
		call	dword ptr [eax+0Ch]
		mov	edi, eax
		cmp	edi, 300Eh
		jnz	short loc_10002BED
		mov	ecx, [esi+8]
		mov	eax, [ecx]
		call	dword ptr [eax+6Ch]
		jmp	short loc_10002BFC
; ---------------------------------------------------------------------------

loc_10002BED:				; CODE XREF: sub_10002B8B+56j
		cmp	edi, 3000h
		jz	short loc_10002C00
		call	sub_10003C9D
		mov	[eax], edi

loc_10002BFC:				; CODE XREF: sub_10002B8B+60j
		xor	al, al
		jmp	short loc_10002C09
; ---------------------------------------------------------------------------

loc_10002C00:				; CODE XREF: sub_10002B8B+68j
		mov	ecx, esi
		call	sub_10002CD7

loc_10002C07:				; CODE XREF: sub_10002B8B+3Dj
					; sub_10002B8B+41j
		mov	al, 1

loc_10002C09:				; CODE XREF: sub_10002B8B+73j
		pop	ebp
		pop	ebx

loc_10002C0B:				; CODE XREF: sub_10002B8B+Dj
		pop	edi
		pop	esi
		retn	10h
sub_10002B8B	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	sub_10002C10(HWND hWnd,	UINT Msg, WPARAM wParam, LPARAM	lParam)
sub_10002C10	proc near		; DATA XREF: sub_10002C57+3Ao

hWnd		= dword	ptr  8
Msg		= dword	ptr  0Ch
wParam		= dword	ptr  10h
lParam		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		cmp	[ebp+Msg], 5
		jnz	short loc_10002C32
		push	offset aEglSurfaceowne ; "Egl::SurfaceOwner"
		push	[ebp+hWnd]	; hWnd
		call	ds:GetPropA
		test	eax, eax
		jz	short loc_10002C32
		mov	ecx, eax
		call	sub_10002CD7

loc_10002C32:				; CODE XREF: sub_10002C10+7j
					; sub_10002C10+19j
		push	offset String	; "Egl::SurfaceParentWndProc"
		push	[ebp+hWnd]	; hWnd
		call	ds:GetPropA
		push	[ebp+lParam]	; lParam
		push	[ebp+wParam]	; wParam
		push	[ebp+Msg]	; Msg
		push	[ebp+hWnd]	; hWnd
		push	eax		; lpPrevWndFunc
		call	ds:CallWindowProcA
		pop	ebp
		retn	10h
sub_10002C10	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_10002C57(HANDLE hData)
sub_10002C57	proc near		; CODE XREF: sub_1000284F+77p

dwProcessId	= dword	ptr -4

		push	ecx
		push	ebx
		mov	ebx, ecx
		push	edi
		mov	edi, [ebx+14h]
		test	edi, edi
		jz	short loc_10002CD3
		push	esi
		lea	eax, [esp+10h+dwProcessId]
		push	eax		; lpdwProcessId
		push	edi		; hWnd
		call	ds:GetWindowThreadProcessId
		mov	esi, eax
		call	ds:GetCurrentProcessId
		cmp	[esp+10h+dwProcessId], eax
		jnz	short loc_10002CD2
		call	ds:GetCurrentThreadId
		cmp	esi, eax
		jnz	short loc_10002CD2
		push	ebp
		push	0		; dwErrCode
		call	ds:SetLastError
		push	offset sub_10002C10 ; dwNewLong
		push	0FFFFFFFCh	; nIndex
		push	edi		; hWnd
		call	ds:SetWindowLongA
		mov	ebp, eax
		test	ebp, ebp
		jnz	short loc_10002CB5
		call	ds:GetLastError
		test	eax, eax
		jz	short loc_10002CB5
		mov	byte ptr [ebx+18h], 0
		jmp	short loc_10002CD1
; ---------------------------------------------------------------------------

loc_10002CB5:				; CODE XREF: sub_10002C57+4Cj
					; sub_10002C57+56j
		mov	esi, ds:SetPropA
		push	ebx		; hData
		push	offset aEglSurfaceowne ; "Egl::SurfaceOwner"
		push	edi		; hWnd
		call	esi ; SetPropA
		push	ebp		; hData
		push	offset String	; "Egl::SurfaceParentWndProc"
		push	edi		; hWnd
		call	esi ; SetPropA
		mov	byte ptr [ebx+18h], 1

loc_10002CD1:				; CODE XREF: sub_10002C57+5Cj
		pop	ebp

loc_10002CD2:				; CODE XREF: sub_10002C57+25j
					; sub_10002C57+2Fj
		pop	esi

loc_10002CD3:				; CODE XREF: sub_10002C57+Aj
		pop	edi
		pop	ebx
		pop	ecx
		retn
sub_10002C57	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10002CD7	proc near		; CODE XREF: sub_10002B8B+77p
					; sub_10002C10+1Dp

var_1C		= dword	ptr -1Ch
var_15		= byte ptr -15h
Rect		= tagRECT ptr -14h
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		sub	esp, 1Ch
		mov	eax, ___security_cookie
		xor	eax, ebp
		mov	[ebp+var_4], eax
		push	ebx
		push	esi
		mov	esi, ecx
		push	edi
		mov	eax, [esi]
		call	dword ptr [eax+10h]
		mov	edx, [esi]
		mov	ecx, esi
		mov	ebx, eax
		call	dword ptr [edx+14h]
		xor	ecx, ecx
		mov	edi, eax
		mov	al, cl
		mov	[ebp+var_1C], ecx
		mov	[ebp+var_15], al
		cmp	[esi+44h], ecx
		jnz	short loc_10002D60
		push	dword ptr [esi+14h] ; hWnd
		call	ds:IsIconic
		cmp	eax, 1
		jz	short loc_10002D5B
		lea	eax, [ebp+Rect]
		push	eax		; lpRect
		push	dword ptr [esi+14h] ; hWnd
		call	ds:GetClientRect
		cmp	eax, 1
		jnz	loc_10002DBB
		mov	eax, [esi]
		mov	ecx, esi
		mov	ebx, [ebp+Rect.right]
		mov	edi, [ebp+Rect.bottom]
		sub	ebx, [ebp+Rect.left]
		sub	edi, [ebp+Rect.top]
		call	dword ptr [eax+10h]
		cmp	ebx, eax
		jnz	short loc_10002D57
		mov	eax, [esi]
		mov	ecx, esi
		call	dword ptr [eax+14h]
		cmp	edi, eax
		jnz	short loc_10002D57
		xor	ecx, ecx
		mov	al, cl
		jmp	short loc_10002D60
; ---------------------------------------------------------------------------

loc_10002D57:				; CODE XREF: sub_10002CD7+6Dj
					; sub_10002CD7+78j
		mov	al, 1
		jmp	short loc_10002D5E
; ---------------------------------------------------------------------------

loc_10002D5B:				; CODE XREF: sub_10002CD7+40j
		mov	al, [ebp+var_15]

loc_10002D5E:				; CODE XREF: sub_10002CD7+82j
		xor	ecx, ecx

loc_10002D60:				; CODE XREF: sub_10002CD7+32j
					; sub_10002CD7+7Ej
		mov	dl, [esi+48h]
		test	dl, dl
		jnz	short loc_10002D6B
		test	al, al
		jz	short loc_10002D71

loc_10002D6B:				; CODE XREF: sub_10002CD7+8Ej
		xor	ecx, ecx
		inc	ecx
		mov	[ebp+var_1C], ecx

loc_10002D71:				; CODE XREF: sub_10002CD7+92j
		test	dl, dl
		jz	short loc_10002D80
		push	edi
		push	ebx
		mov	ecx, esi
		call	sub_10002B0D
		jmp	short loc_10002D8D
; ---------------------------------------------------------------------------

loc_10002D80:				; CODE XREF: sub_10002CD7+9Cj
		test	al, al
		jz	short loc_10002D90
		push	edi
		push	ebx
		mov	ecx, esi
		call	sub_10002A97

loc_10002D8D:				; CODE XREF: sub_10002CD7+A7j
		mov	ecx, [ebp+var_1C]

loc_10002D90:				; CODE XREF: sub_10002CD7+ABj
		test	cl, cl
		jz	short loc_10002DBB
		call	sub_10003C9D
		cmp	[eax+0Ch], esi
		jnz	short loc_10002DB7
		call	sub_10003C9D
		push	esi
		push	dword ptr [eax+8]
		call	ds:libGLESv2_147
		push	eax
		call	ds:libGLESv2_146
		add	esp, 0Ch

loc_10002DB7:				; CODE XREF: sub_10002CD7+C5j
		mov	al, 1
		jmp	short loc_10002DBD
; ---------------------------------------------------------------------------

loc_10002DBB:				; CODE XREF: sub_10002CD7+52j
					; sub_10002CD7+BBj
		xor	al, al

loc_10002DBD:				; CODE XREF: sub_10002CD7+E2j
		mov	ecx, [ebp+var_4]
		pop	edi
		pop	esi
		xor	ecx, ebp
		pop	ebx
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	esp, ebp
		pop	ebp
		retn
sub_10002CD7	endp


; =============== S U B	R O U T	I N E =======================================


sub_10002DCE	proc near		; DATA XREF: .rdata:10007484o
		mov	eax, [ecx+40h]
		retn
sub_10002DCE	endp


; =============== S U B	R O U T	I N E =======================================


sub_10002DD2	proc near		; DATA XREF: .rdata:10007488o
		mov	eax, [ecx+10h]
		retn
sub_10002DD2	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10002DD6	proc near		; CODE XREF: sub_1000284F+6Ap
					; sub_100028EF+6Dp ...

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_0]
		push	esi
		push	edi
		mov	edi, ecx
		lea	esi, [edi+3Ch]
		cmp	[esi], eax
		jz	short loc_10002E23
		mov	ecx, [edi+8]
		mov	[esi], eax
		mov	eax, [ecx]
		call	dword ptr [eax+0B0h]
		cmp	[esi], eax
		mov	[ebp+arg_0], eax
		lea	eax, [ebp+arg_0]
		jl	short loc_10002E00
		mov	eax, esi

loc_10002E00:				; CODE XREF: sub_10002DD6+26j
		mov	ecx, [edi+8]
		mov	eax, [eax]
		mov	[esi], eax
		mov	eax, [ecx]
		call	dword ptr [eax+0B4h]
		cmp	eax, [esi]
		mov	[ebp+arg_0], eax
		lea	eax, [ebp+arg_0]
		jl	short loc_10002E1B
		mov	eax, esi

loc_10002E1B:				; CODE XREF: sub_10002DD6+41j
		mov	eax, [eax]
		mov	[esi], eax
		mov	byte ptr [edi+48h], 1

loc_10002E23:				; CODE XREF: sub_10002DD6+Fj
		pop	edi
		pop	esi
		pop	ebp
		retn	4
sub_10002DD6	endp


; =============== S U B	R O U T	I N E =======================================


sub_10002E29	proc near		; DATA XREF: .rdata:1000748Co
		mov	eax, [ecx+1Ch]
		mov	eax, [eax+38h]
		retn
sub_10002E29	endp


; =============== S U B	R O U T	I N E =======================================


sub_10002E30	proc near		; DATA XREF: .rdata:10007490o
		mov	eax, [ecx+24h]
		retn
sub_10002E30	endp


; =============== S U B	R O U T	I N E =======================================


sub_10002E34	proc near		; DATA XREF: .rdata:10007494o
		mov	eax, [ecx+20h]
		retn
sub_10002E34	endp


; =============== S U B	R O U T	I N E =======================================


sub_10002E38	proc near		; DATA XREF: .rdata:10007498o
		mov	eax, [ecx+28h]
		retn
sub_10002E38	endp


; =============== S U B	R O U T	I N E =======================================


sub_10002E3C	proc near		; DATA XREF: .rdata:1000749Co
		mov	eax, [ecx+2Ch]
		retn
sub_10002E3C	endp


; =============== S U B	R O U T	I N E =======================================


sub_10002E40	proc near		; DATA XREF: .rdata:100074A0o
		mov	eax, [ecx+30h]
		retn
sub_10002E40	endp


; =============== S U B	R O U T	I N E =======================================


sub_10002E44	proc near		; DATA XREF: .rdata:100074A4o
		mov	eax, [ecx+34h]
		retn
sub_10002E44	endp


; =============== S U B	R O U T	I N E =======================================


sub_10002E48	proc near		; DATA XREF: .rdata:100074A8o
		mov	eax, [ecx+38h]
		retn
sub_10002E48	endp


; =============== S U B	R O U T	I N E =======================================


sub_10002E4C	proc near		; DATA XREF: .rdata:100074B0o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	[ecx+4Ch], eax
		retn	4
sub_10002E4C	endp


; =============== S U B	R O U T	I N E =======================================


sub_10002E56	proc near		; DATA XREF: .rdata:100074B4o
		mov	eax, [ecx+4Ch]
		retn
sub_10002E56	endp


; =============== S U B	R O U T	I N E =======================================


sub_10002E5A	proc near		; DATA XREF: .rdata:100074ACo
		mov	eax, [ecx+1Ch]
		mov	eax, [eax]
		retn
sub_10002E5A	endp


; =============== S U B	R O U T	I N E =======================================


sub_10002E60	proc near		; CODE XREF: sub_10002E8E+6p
					; sub_10002EC0+Ap ...
		test	ecx, ecx
		jnz	short loc_10002E71
		call	sub_10003C9D
		mov	dword ptr [eax], 3008h
		jmp	short loc_10002E8B
; ---------------------------------------------------------------------------

loc_10002E71:				; CODE XREF: sub_10002E60+2j
		cmp	dword ptr [ecx+2Ch], 0
		jz	short loc_10002E80
		cmp	dword ptr [ecx+18h], 0
		jbe	short loc_10002E80
		mov	al, 1
		retn
; ---------------------------------------------------------------------------

loc_10002E80:				; CODE XREF: sub_10002E60+15j
					; sub_10002E60+1Bj
		call	sub_10003C9D
		mov	dword ptr [eax], 3001h

loc_10002E8B:				; CODE XREF: sub_10002E60+Fj
		xor	al, al
		retn
sub_10002E60	endp


; =============== S U B	R O U T	I N E =======================================


sub_10002E8E	proc near		; CODE XREF: eglGetConfigAttrib+9p
					; eglCreateWindowSurface+9p ...
		push	esi
		push	edi
		mov	edi, edx
		mov	esi, ecx
		call	sub_10002E60
		test	al, al
		jnz	short loc_10002EA1

loc_10002E9D:				; CODE XREF: sub_10002E8E+2Bj
		xor	al, al
		jmp	short loc_10002EBD
; ---------------------------------------------------------------------------

loc_10002EA1:				; CODE XREF: sub_10002E8E+Dj
		push	edi
		lea	ecx, [esi+14h]
		call	sub_100018DE
		test	eax, eax
		jnz	short loc_10002EBB
		call	sub_10003C9D
		mov	dword ptr [eax], 3005h
		jmp	short loc_10002E9D
; ---------------------------------------------------------------------------

loc_10002EBB:				; CODE XREF: sub_10002E8E+1Ej
		mov	al, 1

loc_10002EBD:				; CODE XREF: sub_10002E8E+11j
		pop	edi
		pop	esi
		retn
sub_10002E8E	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10002EC0	proc near		; CODE XREF: eglDestroyContext+Fp
					; eglMakeCurrent+48p ...

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		push	esi
		push	edi
		mov	edi, edx
		mov	esi, ecx
		call	sub_10002E60
		test	al, al
		jnz	short loc_10002ED7

loc_10002ED3:				; CODE XREF: sub_10002EC0+58j
		xor	al, al
		jmp	short loc_10002F1C
; ---------------------------------------------------------------------------

loc_10002ED7:				; CODE XREF: sub_10002EC0+11j
		mov	eax, [esi+24h]
		mov	esi, eax
		mov	edx, eax
		mov	ecx, [esi+4]
		jmp	short loc_10002EF1
; ---------------------------------------------------------------------------

loc_10002EE3:				; CODE XREF: sub_10002EC0+35j
		cmp	[ecx+10h], edi
		jnb	short loc_10002EED
		mov	ecx, [ecx+8]
		jmp	short loc_10002EF1
; ---------------------------------------------------------------------------

loc_10002EED:				; CODE XREF: sub_10002EC0+26j
		mov	edx, ecx
		mov	ecx, [ecx]

loc_10002EF1:				; CODE XREF: sub_10002EC0+21j
					; sub_10002EC0+2Bj
		cmp	byte ptr [ecx+0Dh], 0
		jz	short loc_10002EE3
		cmp	edx, esi
		jz	short loc_10002F03
		mov	[ebp+var_4], edx
		cmp	edi, [edx+10h]
		jnb	short loc_10002F06

loc_10002F03:				; CODE XREF: sub_10002EC0+39j
		mov	[ebp+var_4], esi

loc_10002F06:				; CODE XREF: sub_10002EC0+41j
		lea	ecx, [ebp+var_4]
		cmp	[ecx], eax
		jnz	short loc_10002F1A
		call	sub_10003C9D
		mov	dword ptr [eax], 3006h
		jmp	short loc_10002ED3
; ---------------------------------------------------------------------------

loc_10002F1A:				; CODE XREF: sub_10002EC0+4Bj
		mov	al, 1

loc_10002F1C:				; CODE XREF: sub_10002EC0+15j
		pop	edi
		pop	esi
		mov	esp, ebp
		pop	ebp
		retn
sub_10002EC0	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10002F22	proc near		; CODE XREF: eglDestroySurface+9p
					; eglQuerySurface+Cp ...

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		push	esi
		push	edi
		mov	edi, edx
		mov	esi, ecx
		call	sub_10002E60
		test	al, al
		jnz	short loc_10002F39

loc_10002F35:				; CODE XREF: sub_10002F22+58j
		xor	al, al
		jmp	short loc_10002F7E
; ---------------------------------------------------------------------------

loc_10002F39:				; CODE XREF: sub_10002F22+11j
		mov	eax, [esi+0Ch]
		mov	esi, eax
		mov	edx, eax
		mov	ecx, [esi+4]
		jmp	short loc_10002F53
; ---------------------------------------------------------------------------

loc_10002F45:				; CODE XREF: sub_10002F22+35j
		cmp	[ecx+10h], edi
		jnb	short loc_10002F4F
		mov	ecx, [ecx+8]
		jmp	short loc_10002F53
; ---------------------------------------------------------------------------

loc_10002F4F:				; CODE XREF: sub_10002F22+26j
		mov	edx, ecx
		mov	ecx, [ecx]

loc_10002F53:				; CODE XREF: sub_10002F22+21j
					; sub_10002F22+2Bj
		cmp	byte ptr [ecx+0Dh], 0
		jz	short loc_10002F45
		cmp	edx, esi
		jz	short loc_10002F65
		mov	[ebp+var_4], edx
		cmp	edi, [edx+10h]
		jnb	short loc_10002F68

loc_10002F65:				; CODE XREF: sub_10002F22+39j
		mov	[ebp+var_4], esi

loc_10002F68:				; CODE XREF: sub_10002F22+41j
		lea	ecx, [ebp+var_4]
		cmp	[ecx], eax
		jnz	short loc_10002F7C
		call	sub_10003C9D
		mov	dword ptr [eax], 300Dh
		jmp	short loc_10002F35
; ---------------------------------------------------------------------------

loc_10002F7C:				; CODE XREF: sub_10002F22+4Bj
		mov	al, 1

loc_10002F7E:				; CODE XREF: sub_10002F22+15j
		pop	edi
		pop	esi
		mov	esp, ebp
		pop	ebp
		retn
sub_10002F22	endp

; Exported entry   1. eglGetError

; =============== S U B	R O U T	I N E =======================================


		public eglGetError
eglGetError	proc near		; DATA XREF: .rdata:off_10007748o
		push	esi
		push	edi
		call	sub_10003C9D
		mov	edi, 3000h
		mov	esi, [eax]
		cmp	esi, edi
		jz	short loc_10002F9D
		call	sub_10003C9D
		mov	[eax], edi

loc_10002F9D:				; CODE XREF: eglGetError+10j
		pop	edi
		mov	eax, esi
		pop	esi
		retn
eglGetError	endp

; Exported entry   2. eglGetDisplay

; =============== S U B	R O U T	I N E =======================================


		public eglGetDisplay
eglGetDisplay	proc near		; DATA XREF: .rdata:off_10007748o

arg_0		= dword	ptr  4

		mov	ecx, [esp+arg_0]
		mov	edx, 3203h
		call	sub_1000193C
		retn	4
eglGetDisplay	endp

; Exported entry  35. eglGetPlatformDisplayEXT

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	eglGetPlatformDisplayEXT(int, HDC hDC, int)
		public eglGetPlatformDisplayEXT
eglGetPlatformDisplayEXT proc near	; DATA XREF: .rdata:100075A4o
					; .rdata:off_10007748o

arg_0		= dword	ptr  8
hDC		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		cmp	[ebp+arg_0], 3201h
		jz	short loc_10002FCE
		call	sub_10003C9D
		mov	dword ptr [eax], 3005h

loc_10002FCA:				; CODE XREF: eglGetPlatformDisplayEXT+39j
		xor	eax, eax
		jmp	short loc_10003044
; ---------------------------------------------------------------------------

loc_10002FCE:				; CODE XREF: eglGetPlatformDisplayEXT+Aj
		cmp	[ebp+hDC], 0
		jz	short loc_10002FEE
		push	[ebp+hDC]	; hDC
		call	ds:WindowFromDC
		test	eax, eax
		jnz	short loc_10002FEE
		call	sub_10003C9D
		mov	dword ptr [eax], 3000h
		jmp	short loc_10002FCA
; ---------------------------------------------------------------------------

loc_10002FEE:				; CODE XREF: eglGetPlatformDisplayEXT+1Fj
					; eglGetPlatformDisplayEXT+2Cj
		mov	eax, [ebp+arg_8]
		push	ebx
		push	edi
		mov	edi, 3203h
		mov	edx, edi
		test	eax, eax
		jz	short loc_1000303A
		mov	ecx, [eax]
		mov	ebx, 3038h
		cmp	ecx, ebx
		jz	short loc_1000303A

loc_10003009:				; CODE XREF: eglGetPlatformDisplayEXT+68j
		cmp	ecx, 3202h
		jnz	short loc_10003014
		mov	edx, [eax+4]

loc_10003014:				; CODE XREF: eglGetPlatformDisplayEXT+5Cj
		add	eax, 8
		mov	ecx, [eax]
		cmp	ecx, ebx
		jnz	short loc_10003009
		cmp	edx, edi
		jz	short loc_1000303A
		jle	short loc_1000302B
		cmp	edx, 3206h
		jle	short loc_1000303A

loc_1000302B:				; CODE XREF: eglGetPlatformDisplayEXT+6Ej
		call	sub_10003C9D
		mov	dword ptr [eax], 3000h
		xor	eax, eax
		jmp	short loc_10003042
; ---------------------------------------------------------------------------

loc_1000303A:				; CODE XREF: eglGetPlatformDisplayEXT+49j
					; eglGetPlatformDisplayEXT+54j	...
		mov	ecx, [ebp+hDC]
		call	sub_1000193C

loc_10003042:				; CODE XREF: eglGetPlatformDisplayEXT+85j
		pop	edi
		pop	ebx

loc_10003044:				; CODE XREF: eglGetPlatformDisplayEXT+19j
		pop	ebp
		retn	0Ch
eglGetPlatformDisplayEXT endp

; Exported entry   3. eglInitialize

; =============== S U B	R O U T	I N E =======================================


		public eglInitialize
eglInitialize	proc near		; DATA XREF: .rdata:off_10007748o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	ecx, [esp+arg_0]
		test	ecx, ecx
		jnz	short loc_1000305F
		call	sub_10003C9D
		mov	dword ptr [eax], 3008h

loc_1000305B:				; CODE XREF: eglInitialize+2Bj
		xor	eax, eax
		jmp	short locret_1000309F
; ---------------------------------------------------------------------------

loc_1000305F:				; CODE XREF: eglInitialize+6j
		call	sub_10001A4E
		test	al, al
		jnz	short loc_10003075
		call	sub_10003C9D
		mov	dword ptr [eax], 3001h
		jmp	short loc_1000305B
; ---------------------------------------------------------------------------

loc_10003075:				; CODE XREF: eglInitialize+1Ej
		mov	eax, [esp+arg_4]
		test	eax, eax
		jz	short loc_10003083
		mov	dword ptr [eax], 1

loc_10003083:				; CODE XREF: eglInitialize+33j
		mov	ecx, [esp+arg_8]
		test	ecx, ecx
		jz	short loc_10003091
		mov	dword ptr [ecx], 4

loc_10003091:				; CODE XREF: eglInitialize+41j
		call	sub_10003C9D
		mov	dword ptr [eax], 3000h
		xor	eax, eax
		inc	eax

locret_1000309F:			; CODE XREF: eglInitialize+15j
		retn	0Ch
eglInitialize	endp

; Exported entry   4. eglTerminate

; =============== S U B	R O U T	I N E =======================================


		public eglTerminate
eglTerminate	proc near		; DATA XREF: .rdata:off_10007748o

arg_0		= dword	ptr  4

		mov	ecx, [esp+arg_0]
		test	ecx, ecx
		jnz	short loc_100030B9
		call	sub_10003C9D
		mov	dword ptr [eax], 3008h
		xor	eax, eax
		jmp	short locret_100030CC
; ---------------------------------------------------------------------------

loc_100030B9:				; CODE XREF: eglTerminate+6j
		call	sub_10001BF0
		call	sub_10003C9D
		mov	dword ptr [eax], 3000h
		xor	eax, eax
		inc	eax

locret_100030CC:			; CODE XREF: eglTerminate+15j
		retn	4
eglTerminate	endp

; Exported entry   5. eglQueryString

; =============== S U B	R O U T	I N E =======================================


		public eglQueryString
eglQueryString	proc near		; DATA XREF: .rdata:off_10007748o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_4]
		push	edi
		mov	edi, [esp+8+arg_0]
		test	edi, edi
		jnz	short loc_100030E5
		cmp	esi, 3055h
		jz	short loc_100030F4

loc_100030E5:				; CODE XREF: eglQueryString+Cj
		mov	ecx, edi
		call	sub_10002E60
		test	al, al
		jnz	short loc_100030F4

loc_100030F0:				; CODE XREF: eglQueryString+43j
		xor	eax, eax
		jmp	short loc_10003156
; ---------------------------------------------------------------------------

loc_100030F4:				; CODE XREF: eglQueryString+14j
					; eglQueryString+1Fj
		sub	esi, 3053h
		jz	short loc_1000313E
		dec	esi
		jz	short loc_1000312C
		dec	esi
		jz	short loc_10003121
		call	sub_10003C9D
		sub	esi, 38h
		jz	short loc_10003114
		mov	dword ptr [eax], 300Ch
		jmp	short loc_100030F0
; ---------------------------------------------------------------------------

loc_10003114:				; CODE XREF: eglQueryString+3Bj
		mov	dword ptr [eax], 3000h
		mov	eax, offset aOpengl_es ; "OpenGL_ES"
		jmp	short loc_10003156
; ---------------------------------------------------------------------------

loc_10003121:				; CODE XREF: eglQueryString+31j
		mov	ecx, edi
		call	sub_1000277C
		mov	esi, eax
		jmp	short loc_10003149
; ---------------------------------------------------------------------------

loc_1000312C:				; CODE XREF: eglQueryString+2Ej
		call	sub_10003C9D
		mov	dword ptr [eax], 3000h
		mov	eax, offset a1_4Angle2_1_73 ; "1.4 (ANGLE 2.1.736200d4a356)"
		jmp	short loc_10003156
; ---------------------------------------------------------------------------

loc_1000313E:				; CODE XREF: eglQueryString+2Bj
		lea	esi, [edi+48h]
		cmp	dword ptr [esi+14h], 10h
		jb	short loc_10003149
		mov	esi, [esi]

loc_10003149:				; CODE XREF: eglQueryString+5Bj
					; eglQueryString+76j
		call	sub_10003C9D
		mov	dword ptr [eax], 3000h
		mov	eax, esi

loc_10003156:				; CODE XREF: eglQueryString+23j
					; eglQueryString+50j ...
		pop	edi
		pop	esi
		retn	8
eglQueryString	endp

; Exported entry   6. eglGetConfigs

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public eglGetConfigs
eglGetConfigs	proc near		; DATA XREF: .rdata:off_10007748o

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	esi
		mov	esi, [ebp+arg_0]
		mov	ecx, esi
		call	sub_10002E60
		test	al, al
		jnz	short loc_10003171

loc_1000316D:				; CODE XREF: eglGetConfigs+27j
					; eglGetConfigs+54j
		xor	eax, eax
		jmp	short loc_100031BF
; ---------------------------------------------------------------------------

loc_10003171:				; CODE XREF: eglGetConfigs+10j
		cmp	[ebp+arg_C], 0
		jnz	short loc_10003184
		call	sub_10003C9D
		mov	dword ptr [eax], 300Ch
		jmp	short loc_1000316D
; ---------------------------------------------------------------------------

loc_10003184:				; CODE XREF: eglGetConfigs+1Aj
		push	[ebp+arg_C]
		lea	eax, [ebp+arg_0]
		mov	[ebp+arg_0], 3038h
		push	[ebp+arg_8]
		lea	ecx, [esi+14h]
		push	eax
		push	[ebp+arg_4]
		call	sub_100015BE
		test	al, al
		jnz	short loc_100031B1
		call	sub_10003C9D
		mov	dword ptr [eax], 3004h
		jmp	short loc_1000316D
; ---------------------------------------------------------------------------

loc_100031B1:				; CODE XREF: eglGetConfigs+47j
		call	sub_10003C9D
		mov	dword ptr [eax], 3000h
		xor	eax, eax
		inc	eax

loc_100031BF:				; CODE XREF: eglGetConfigs+14j
		pop	esi
		pop	ebp
		retn	10h
eglGetConfigs	endp

; Exported entry   7. eglChooseConfig

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public eglChooseConfig
eglChooseConfig	proc near		; DATA XREF: .rdata:off_10007748o

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		push	esi
		mov	esi, [ebp+arg_0]
		mov	ecx, esi
		call	sub_10002E60
		test	al, al
		jnz	short loc_100031DA

loc_100031D6:				; CODE XREF: eglChooseConfig+27j
		xor	eax, eax
		jmp	short loc_1000321E
; ---------------------------------------------------------------------------

loc_100031DA:				; CODE XREF: eglChooseConfig+10j
		cmp	[ebp+arg_10], 0
		jnz	short loc_100031ED
		call	sub_10003C9D
		mov	dword ptr [eax], 300Ch
		jmp	short loc_100031D6
; ---------------------------------------------------------------------------

loc_100031ED:				; CODE XREF: eglChooseConfig+1Aj
		mov	eax, [ebp+arg_4]
		mov	[ebp+arg_0], 3038h
		test	eax, eax
		jnz	short loc_100031FE
		lea	eax, [ebp+arg_0]

loc_100031FE:				; CODE XREF: eglChooseConfig+35j
		push	[ebp+arg_10]
		lea	ecx, [esi+14h]
		push	[ebp+arg_C]
		push	eax
		push	[ebp+arg_8]
		call	sub_100015BE
		call	sub_10003C9D
		mov	dword ptr [eax], 3000h
		xor	eax, eax
		inc	eax

loc_1000321E:				; CODE XREF: eglChooseConfig+14j
		pop	esi
		pop	ebp
		retn	14h
eglChooseConfig	endp

; Exported entry   8. eglGetConfigAttrib

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public eglGetConfigAttrib
eglGetConfigAttrib proc	near		; DATA XREF: .rdata:off_10007748o

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		mov	edx, [ebp+arg_4]
		mov	ecx, [ebp+arg_0]
		call	sub_10002E8E
		test	al, al
		jnz	short loc_10003239

loc_10003235:				; CODE XREF: eglGetConfigAttrib+36j
		xor	eax, eax
		jmp	short loc_10003269
; ---------------------------------------------------------------------------

loc_10003239:				; CODE XREF: eglGetConfigAttrib+10j
		push	[ebp+arg_C]
		mov	ecx, [ebp+arg_0]
		push	[ebp+arg_8]
		push	[ebp+arg_4]
		call	sub_10001C4E
		test	al, al
		jnz	short loc_1000325B
		call	sub_10003C9D
		mov	dword ptr [eax], 3004h
		jmp	short loc_10003235
; ---------------------------------------------------------------------------

loc_1000325B:				; CODE XREF: eglGetConfigAttrib+29j
		call	sub_10003C9D
		mov	dword ptr [eax], 3000h
		xor	eax, eax
		inc	eax

loc_10003269:				; CODE XREF: eglGetConfigAttrib+14j
		pop	ebp
		retn	10h
eglGetConfigAttrib endp

; Exported entry   9. eglCreateWindowSurface

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	eglCreateWindowSurface(int, int, HWND hWnd, int)
		public eglCreateWindowSurface
eglCreateWindowSurface proc near	; DATA XREF: .rdata:off_10007748o

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
hWnd		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		mov	edx, [ebp+arg_4]
		mov	ecx, [ebp+arg_0]
		call	sub_10002E8E
		test	al, al
		jnz	short loc_10003283

loc_1000327F:				; CODE XREF: eglCreateWindowSurface+2Fj
		xor	eax, eax
		jmp	short loc_100032AF
; ---------------------------------------------------------------------------

loc_10003283:				; CODE XREF: eglCreateWindowSurface+10j
		push	[ebp+hWnd]	; hWnd
		call	ds:IsWindow
		cmp	eax, 1
		jz	short loc_1000329E
		call	sub_10003C9D
		mov	dword ptr [eax], 300Bh
		jmp	short loc_1000327F
; ---------------------------------------------------------------------------

loc_1000329E:				; CODE XREF: eglCreateWindowSurface+22j
		push	[ebp+arg_C]
		mov	ecx, [ebp+arg_0]
		push	[ebp+arg_4]
		push	[ebp+hWnd]
		call	sub_10001DDA

loc_100032AF:				; CODE XREF: eglCreateWindowSurface+14j
		pop	ebp
		retn	10h
eglCreateWindowSurface endp

; Exported entry  10. eglCreatePbufferSurface

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public eglCreatePbufferSurface
eglCreatePbufferSurface	proc near	; DATA XREF: .rdata:off_10007748o

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		mov	edx, [ebp+arg_4]
		mov	ecx, [ebp+arg_0]
		call	sub_10002E8E
		test	al, al
		jnz	short loc_100032C9
		xor	eax, eax
		jmp	short loc_100032D9
; ---------------------------------------------------------------------------

loc_100032C9:				; CODE XREF: eglCreatePbufferSurface+10j
		push	[ebp+arg_8]
		mov	ecx, [ebp+arg_0]
		push	0
		push	[ebp+arg_4]
		call	sub_10001F7D

loc_100032D9:				; CODE XREF: eglCreatePbufferSurface+14j
		pop	ebp
		retn	0Ch
eglCreatePbufferSurface	endp

; Exported entry  11. eglCreatePixmapSurface

; =============== S U B	R O U T	I N E =======================================


		public eglCreatePixmapSurface
eglCreatePixmapSurface proc near	; DATA XREF: .rdata:off_10007748o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		mov	ecx, [esp+arg_0]
		call	sub_10002E8E
		test	al, al
		jz	short loc_100032F9
		call	sub_10003C9D
		mov	dword ptr [eax], 3000h

loc_100032F9:				; CODE XREF: eglCreatePixmapSurface+Fj
		xor	eax, eax
		retn	10h
eglCreatePixmapSurface endp

; Exported entry  12. eglDestroySurface

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public eglDestroySurface
eglDestroySurface proc near		; DATA XREF: .rdata:off_10007748o

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		mov	edx, [ebp+arg_4]
		mov	ecx, [ebp+arg_0]
		call	sub_10002F22
		test	al, al
		jnz	short loc_10003314

loc_10003310:				; CODE XREF: eglDestroySurface+27j
		xor	eax, eax
		jmp	short loc_10003340
; ---------------------------------------------------------------------------

loc_10003314:				; CODE XREF: eglDestroySurface+10j
		cmp	[ebp+arg_4], 0
		jnz	short loc_10003327
		call	sub_10003C9D
		mov	dword ptr [eax], 300Dh
		jmp	short loc_10003310
; ---------------------------------------------------------------------------

loc_10003327:				; CODE XREF: eglDestroySurface+1Aj
		push	[ebp+arg_4]
		mov	ecx, [ebp+arg_0]
		call	sub_100022DC
		call	sub_10003C9D
		mov	dword ptr [eax], 3000h
		xor	eax, eax
		inc	eax

loc_10003340:				; CODE XREF: eglDestroySurface+14j
		pop	ebp
		retn	8
eglDestroySurface endp

; Exported entry  13. eglQuerySurface

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public eglQuerySurface
eglQuerySurface	proc near		; DATA XREF: .rdata:off_10007748o

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		mov	ecx, [ebp+arg_0]
		push	esi
		mov	esi, [ebp+arg_4]
		mov	edx, esi
		call	sub_10002F22
		test	al, al
		jnz	short loc_10003360

loc_10003359:				; CODE XREF: eglQuerySurface+2Bj
					; eglQuerySurface+10Cj
		xor	eax, eax
		jmp	loc_10003479
; ---------------------------------------------------------------------------

loc_10003360:				; CODE XREF: eglQuerySurface+13j
		test	esi, esi
		jnz	short loc_10003371
		call	sub_10003C9D
		mov	dword ptr [eax], 300Dh
		jmp	short loc_10003359
; ---------------------------------------------------------------------------

loc_10003371:				; CODE XREF: eglQuerySurface+1Ej
		mov	eax, [ebp+arg_8]
		mov	ecx, 3087h
		cmp	eax, ecx
		jg	loc_10003403
		jz	loc_1000346B
		add	ecx, 0FFFFFFF9h
		cmp	eax, ecx
		jg	short loc_100033DB
		jz	short loc_100033CF
		sub	eax, 3028h
		jz	short loc_100033C3
		sub	eax, 2Eh
		jz	short loc_100033B7
		dec	eax
		jz	short loc_100033AB
		dec	eax
		jz	loc_1000346B
		jmp	loc_10003445
; ---------------------------------------------------------------------------

loc_100033AB:				; CODE XREF: eglQuerySurface+59j
		mov	eax, [esi]
		mov	ecx, esi
		call	dword ptr [eax+10h]
		jmp	loc_10003466
; ---------------------------------------------------------------------------

loc_100033B7:				; CODE XREF: eglQuerySurface+56j
		mov	eax, [esi]
		mov	ecx, esi
		call	dword ptr [eax+14h]
		jmp	loc_10003466
; ---------------------------------------------------------------------------

loc_100033C3:				; CODE XREF: eglQuerySurface+51j
		mov	eax, [esi]
		mov	ecx, esi
		call	dword ptr [eax+0Ch]
		jmp	loc_10003466
; ---------------------------------------------------------------------------

loc_100033CF:				; CODE XREF: eglQuerySurface+4Aj
		mov	eax, [esi]
		mov	ecx, esi
		call	dword ptr [eax+24h]
		jmp	loc_10003466
; ---------------------------------------------------------------------------

loc_100033DB:				; CODE XREF: eglQuerySurface+48j
		sub	eax, 3081h
		jz	short loc_100033FA
		dec	eax
		jz	loc_1000346B
		dec	eax
		jz	short loc_1000346B
		sub	eax, 3
		jnz	short loc_10003445
		mov	eax, [esi]
		mov	ecx, esi
		call	dword ptr [eax+1Ch]
		jmp	short loc_10003466
; ---------------------------------------------------------------------------

loc_100033FA:				; CODE XREF: eglQuerySurface+9Cj
		mov	eax, [esi]
		mov	ecx, esi
		call	dword ptr [eax+28h]
		jmp	short loc_10003466
; ---------------------------------------------------------------------------

loc_10003403:				; CODE XREF: eglQuerySurface+37j
		mov	ecx, 3093h
		cmp	eax, ecx
		jg	short loc_10003432
		jz	short loc_10003429
		sub	eax, 3088h
		jz	short loc_1000346B
		sub	eax, 8
		jz	short loc_1000346B
		dec	eax
		jz	short loc_1000346B
		dec	eax
		jnz	short loc_10003445
		mov	eax, [esi]
		mov	ecx, esi
		call	dword ptr [eax+18h]
		jmp	short loc_10003466
; ---------------------------------------------------------------------------

loc_10003429:				; CODE XREF: eglQuerySurface+C8j
		mov	eax, [esi]
		mov	ecx, esi
		call	dword ptr [eax+20h]
		jmp	short loc_10003466
; ---------------------------------------------------------------------------

loc_10003432:				; CODE XREF: eglQuerySurface+C6j
		sub	eax, 3099h
		jz	short loc_1000346B
		sub	eax, 25h
		jz	short loc_1000345F
		sub	eax, 143h
		jz	short loc_10003455

loc_10003445:				; CODE XREF: eglQuerySurface+62j
					; eglQuerySurface+ABj ...
		call	sub_10003C9D
		mov	dword ptr [eax], 3004h
		jmp	loc_10003359
; ---------------------------------------------------------------------------

loc_10003455:				; CODE XREF: eglQuerySurface+FFj
		mov	eax, [ebp+arg_C]
		mov	ecx, [esi+44h]
		mov	[eax], ecx
		jmp	short loc_1000346B
; ---------------------------------------------------------------------------

loc_1000345F:				; CODE XREF: eglQuerySurface+F8j
		mov	eax, [esi]
		mov	ecx, esi
		call	dword ptr [eax+4]

loc_10003466:				; CODE XREF: eglQuerySurface+6Ej
					; eglQuerySurface+7Aj ...
		mov	ecx, [ebp+arg_C]
		mov	[ecx], eax

loc_1000346B:				; CODE XREF: eglQuerySurface+3Dj
					; eglQuerySurface+5Cj ...
		call	sub_10003C9D
		mov	dword ptr [eax], 3000h
		xor	eax, eax
		inc	eax

loc_10003479:				; CODE XREF: eglQuerySurface+17j
		pop	esi
		pop	ebp
		retn	10h
eglQuerySurface	endp

; Exported entry  36. eglQuerySurfacePointerANGLE

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public eglQuerySurfacePointerANGLE
eglQuerySurfacePointerANGLE proc near	; DATA XREF: .rdata:off_10007594o
					; .rdata:off_10007748o

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		mov	ecx, [ebp+arg_0]
		push	esi
		mov	esi, [ebp+arg_4]
		mov	edx, esi
		call	sub_10002F22
		test	al, al
		jnz	short loc_10003497

loc_10003493:				; CODE XREF: eglQuerySurfacePointerANGLE+28j
					; eglQuerySurfacePointerANGLE+44j
		xor	eax, eax
		jmp	short loc_10003503
; ---------------------------------------------------------------------------

loc_10003497:				; CODE XREF: eglQuerySurfacePointerANGLE+13j
		test	esi, esi
		jnz	short loc_100034A8
		call	sub_10003C9D
		mov	dword ptr [eax], 300Dh
		jmp	short loc_10003493
; ---------------------------------------------------------------------------

loc_100034A8:				; CODE XREF: eglQuerySurfacePointerANGLE+1Bj
		mov	eax, [ebp+arg_8]
		sub	eax, 3200h
		jz	short loc_100034D8
		sub	eax, 9
		jz	short loc_100034C4
		call	sub_10003C9D
		mov	dword ptr [eax], 3004h
		jmp	short loc_10003493
; ---------------------------------------------------------------------------

loc_100034C4:				; CODE XREF: eglQuerySurfacePointerANGLE+37j
		mov	eax, [esi]
		mov	ecx, esi
		call	dword ptr [eax+8]
		test	eax, eax
		jz	short loc_100034EE
		mov	edx, [eax]
		mov	ecx, eax
		call	dword ptr [edx+18h]
		jmp	short loc_100034EA
; ---------------------------------------------------------------------------

loc_100034D8:				; CODE XREF: eglQuerySurfacePointerANGLE+32j
		mov	eax, [esi]
		mov	ecx, esi
		call	dword ptr [eax+8]
		test	eax, eax
		jz	short loc_100034EE
		mov	edx, [eax]
		mov	ecx, eax
		call	dword ptr [edx+14h]

loc_100034EA:				; CODE XREF: eglQuerySurfacePointerANGLE+58j
		mov	ecx, eax
		jmp	short loc_100034F0
; ---------------------------------------------------------------------------

loc_100034EE:				; CODE XREF: eglQuerySurfacePointerANGLE+4Fj
					; eglQuerySurfacePointerANGLE+63j
		xor	ecx, ecx

loc_100034F0:				; CODE XREF: eglQuerySurfacePointerANGLE+6Ej
		mov	eax, [ebp+arg_C]
		mov	[eax], ecx
		call	sub_10003C9D
		mov	dword ptr [eax], 3000h
		xor	eax, eax
		inc	eax

loc_10003503:				; CODE XREF: eglQuerySurfacePointerANGLE+17j
		pop	esi
		pop	ebp
		retn	10h
eglQuerySurfacePointerANGLE endp

; Exported entry  14. eglBindAPI

; =============== S U B	R O U T	I N E =======================================


		public eglBindAPI
eglBindAPI	proc near		; DATA XREF: .rdata:off_10007748o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		push	esi
		mov	esi, 30A0h
		cmp	eax, esi
		jz	short loc_1000352A
		add	eax, 0FFFFCF5Fh
		call	sub_10003C9D
		mov	dword ptr [eax], 300Ch
		xor	eax, eax
		jmp	short loc_10003540
; ---------------------------------------------------------------------------

loc_1000352A:				; CODE XREF: eglBindAPI+Cj
		call	sub_10003C9D
		mov	[eax+4], esi
		call	sub_10003C9D
		mov	dword ptr [eax], 3000h
		xor	eax, eax
		inc	eax

loc_10003540:				; CODE XREF: eglBindAPI+20j
		pop	esi
		retn	4
eglBindAPI	endp

; Exported entry  15. eglQueryAPI

; =============== S U B	R O U T	I N E =======================================


		public eglQueryAPI
eglQueryAPI	proc near		; DATA XREF: .rdata:off_10007748o
		push	esi
		call	sub_10003C9D
		mov	esi, [eax+4]
		call	sub_10003C9D
		mov	dword ptr [eax], 3000h
		mov	eax, esi
		pop	esi
		retn
eglQueryAPI	endp

; Exported entry  16. eglWaitClient
; Exported entry  30. eglWaitGL

; =============== S U B	R O U T	I N E =======================================


		public eglWaitGL
eglWaitGL	proc near		; DATA XREF: .rdata:off_10007748o
		call	sub_10003C9D	; eglWaitClient
		mov	dword ptr [eax], 3000h
		xor	eax, eax
		retn
eglWaitGL	endp

; Exported entry  17. eglReleaseThread

; =============== S U B	R O U T	I N E =======================================


		public eglReleaseThread
eglReleaseThread proc near		; DATA XREF: .rdata:off_10007748o
		xor	eax, eax
		push	eax
		push	eax
		push	eax
		push	eax
		call	eglMakeCurrent
		call	sub_10003C9D
		mov	dword ptr [eax], 3000h
		xor	eax, eax
		inc	eax
		retn
eglReleaseThread endp

; Exported entry  18. eglCreatePbufferFromClientBuffer

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public eglCreatePbufferFromClientBuffer
eglCreatePbufferFromClientBuffer proc near ; DATA XREF:	.rdata:off_10007748o

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		mov	edx, [ebp+arg_C]
		mov	ecx, [ebp+arg_0]
		call	sub_10002E8E
		test	al, al
		jz	short loc_100035C3
		cmp	[ebp+arg_4], 3200h
		jnz	short loc_100035B8
		cmp	[ebp+arg_8], 0
		jz	short loc_100035B8
		push	[ebp+arg_10]
		mov	ecx, [ebp+arg_0]
		push	[ebp+arg_8]
		push	[ebp+arg_C]
		call	sub_10001F7D
		jmp	short loc_100035C5
; ---------------------------------------------------------------------------

loc_100035B8:				; CODE XREF: eglCreatePbufferFromClientBuffer+19j
					; eglCreatePbufferFromClientBuffer+1Fj
		call	sub_10003C9D
		mov	dword ptr [eax], 300Ch

loc_100035C3:				; CODE XREF: eglCreatePbufferFromClientBuffer+10j
		xor	eax, eax

loc_100035C5:				; CODE XREF: eglCreatePbufferFromClientBuffer+32j
		pop	ebp
		retn	14h
eglCreatePbufferFromClientBuffer endp

; Exported entry  19. eglSurfaceAttrib

; =============== S U B	R O U T	I N E =======================================


		public eglSurfaceAttrib
eglSurfaceAttrib proc near		; DATA XREF: .rdata:off_10007748o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		mov	ecx, [esp+arg_0]
		call	sub_10002F22
		test	al, al
		jnz	short loc_100035DE
		xor	eax, eax
		jmp	short locret_100035EC
; ---------------------------------------------------------------------------

loc_100035DE:				; CODE XREF: eglSurfaceAttrib+Fj
		call	sub_10003C9D
		mov	dword ptr [eax], 3000h
		xor	eax, eax
		inc	eax

locret_100035EC:			; CODE XREF: eglSurfaceAttrib+13j
		retn	10h
eglSurfaceAttrib endp

; Exported entry  20. eglBindTexImage

; =============== S U B	R O U T	I N E =======================================


		public eglBindTexImage
eglBindTexImage	proc near		; DATA XREF: .rdata:off_10007748o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	ecx, [esp+arg_0]
		push	esi
		mov	esi, [esp+4+arg_4]
		mov	edx, esi
		call	sub_10002F22
		test	al, al
		jz	short loc_1000367D
		cmp	[esp+4+arg_8], 3084h
		jz	short loc_1000361A
		call	sub_10003C9D
		mov	dword ptr [eax], 300Ch
		jmp	short loc_1000367D
; ---------------------------------------------------------------------------

loc_1000361A:				; CODE XREF: eglBindTexImage+1Cj
		test	esi, esi
		jz	short loc_10003672
		cmp	dword ptr [esi+14h], 0
		jnz	short loc_10003672
		mov	eax, [esi]
		mov	ecx, esi
		call	dword ptr [eax+34h]
		test	eax, eax
		jz	short loc_1000363C
		call	sub_10003C9D
		mov	dword ptr [eax], 3002h
		jmp	short loc_1000367D
; ---------------------------------------------------------------------------

loc_1000363C:				; CODE XREF: eglBindTexImage+3Ej
		mov	eax, [esi]
		mov	ecx, esi
		call	dword ptr [eax+24h]
		cmp	eax, 305Ch
		jnz	short loc_10003657

loc_1000364A:				; CODE XREF: eglBindTexImage+71j
		call	sub_10003C9D
		mov	dword ptr [eax], 3009h
		jmp	short loc_1000367D
; ---------------------------------------------------------------------------

loc_10003657:				; CODE XREF: eglBindTexImage+59j
		push	esi
		call	ds:libGLESv2_158
		test	al, al
		jz	short loc_1000364A
		call	sub_10003C9D
		mov	dword ptr [eax], 3000h
		xor	eax, eax
		inc	eax
		jmp	short loc_1000367F
; ---------------------------------------------------------------------------

loc_10003672:				; CODE XREF: eglBindTexImage+2Dj
					; eglBindTexImage+33j
		call	sub_10003C9D
		mov	dword ptr [eax], 300Dh

loc_1000367D:				; CODE XREF: eglBindTexImage+12j
					; eglBindTexImage+29j ...
		xor	eax, eax

loc_1000367F:				; CODE XREF: eglBindTexImage+81j
		pop	esi
		retn	0Ch
eglBindTexImage	endp

; Exported entry  21. eglReleaseTexImage

; =============== S U B	R O U T	I N E =======================================


		public eglReleaseTexImage
eglReleaseTexImage proc	near		; DATA XREF: .rdata:off_10007748o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	ecx, [esp+arg_0]
		push	esi
		mov	esi, [esp+4+arg_4]
		mov	edx, esi
		call	sub_10002F22
		test	al, al
		jz	short loc_10003700
		cmp	[esp+4+arg_8], 3084h
		jz	short loc_100036AE
		call	sub_10003C9D
		mov	dword ptr [eax], 300Ch
		jmp	short loc_10003700
; ---------------------------------------------------------------------------

loc_100036AE:				; CODE XREF: eglReleaseTexImage+1Cj
		test	esi, esi
		jz	short loc_100036F5
		cmp	dword ptr [esi+14h], 0
		jnz	short loc_100036F5
		mov	eax, [esi]
		mov	ecx, esi
		call	dword ptr [eax+24h]
		cmp	eax, 305Ch
		jnz	short loc_100036D3
		call	sub_10003C9D
		mov	dword ptr [eax], 3009h
		jmp	short loc_10003700
; ---------------------------------------------------------------------------

loc_100036D3:				; CODE XREF: eglReleaseTexImage+41j
		mov	eax, [esi]
		mov	ecx, esi
		call	dword ptr [eax+34h]
		test	eax, eax
		jz	short loc_100036E5
		mov	edx, [eax]
		mov	ecx, eax
		call	dword ptr [edx+1Ch]

loc_100036E5:				; CODE XREF: eglReleaseTexImage+59j
		call	sub_10003C9D
		mov	dword ptr [eax], 3000h
		xor	eax, eax
		inc	eax
		jmp	short loc_10003702
; ---------------------------------------------------------------------------

loc_100036F5:				; CODE XREF: eglReleaseTexImage+2Dj
					; eglReleaseTexImage+33j
		call	sub_10003C9D
		mov	dword ptr [eax], 300Dh

loc_10003700:				; CODE XREF: eglReleaseTexImage+12j
					; eglReleaseTexImage+29j ...
		xor	eax, eax

loc_10003702:				; CODE XREF: eglReleaseTexImage+70j
		pop	esi
		retn	0Ch
eglReleaseTexImage endp

; Exported entry  22. eglSwapInterval

; =============== S U B	R O U T	I N E =======================================


		public eglSwapInterval
eglSwapInterval	proc near		; DATA XREF: .rdata:off_10007748o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	ecx, [esp+arg_0]
		call	sub_10002E60
		test	al, al
		jnz	short loc_10003717

loc_10003713:				; CODE XREF: eglSwapInterval+28j
		xor	eax, eax
		jmp	short locret_10003747
; ---------------------------------------------------------------------------

loc_10003717:				; CODE XREF: eglSwapInterval+Bj
		call	sub_10003C9D
		mov	ecx, [eax+0Ch]
		test	ecx, ecx
		jnz	short loc_10003730
		call	sub_10003C9D
		mov	dword ptr [eax], 300Dh
		jmp	short loc_10003713
; ---------------------------------------------------------------------------

loc_10003730:				; CODE XREF: eglSwapInterval+1Bj
		push	[esp+arg_4]
		call	sub_10002DD6
		call	sub_10003C9D
		mov	dword ptr [eax], 3000h
		xor	eax, eax
		inc	eax

locret_10003747:			; CODE XREF: eglSwapInterval+Fj
		retn	8
eglSwapInterval	endp

; Exported entry  23. eglCreateContext

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public eglCreateContext
eglCreateContext proc near		; DATA XREF: .rdata:off_10007748o

var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	ecx, [ebp+arg_C]
		push	ebx
		push	esi
		push	edi
		xor	edi, edi
		mov	byte ptr [ebp+var_4], 0
		inc	edi
		test	ecx, ecx
		jz	loc_10003834
		mov	eax, [ecx]
		mov	edx, 3038h
		cmp	eax, edx
		jz	loc_10003834
		add	ecx, 4

loc_10003775:				; CODE XREF: eglCreateContext+7Aj
		sub	eax, 3098h
		jz	short loc_100037BA
		sub	eax, 27h
		jz	short loc_1000379C
		sub	eax, 79h
		jnz	short loc_100037AA
		cmp	dword ptr [ecx], 31BFh
		jnz	short loc_10003794
		mov	byte ptr [ebp+var_4], 1
		jmp	short loc_100037BC
; ---------------------------------------------------------------------------

loc_10003794:				; CODE XREF: eglCreateContext+42j
		cmp	dword ptr [ecx], 31BEh
		jmp	short loc_100037A8
; ---------------------------------------------------------------------------

loc_1000379C:				; CODE XREF: eglCreateContext+35j
		cmp	dword ptr [ecx], 1
		jz	loc_10003834
		cmp	dword ptr [ecx], 0

loc_100037A8:				; CODE XREF: eglCreateContext+50j
		jz	short loc_100037BC

loc_100037AA:				; CODE XREF: eglCreateContext+3Aj
		call	sub_10003C9D
		mov	dword ptr [eax], 3004h
		jmp	loc_1000383F
; ---------------------------------------------------------------------------

loc_100037BA:				; CODE XREF: eglCreateContext+30j
		mov	edi, [ecx]

loc_100037BC:				; CODE XREF: eglCreateContext+48j
					; eglCreateContext:loc_100037A8j
		mov	eax, [ecx+4]
		add	ecx, 8
		cmp	eax, edx
		jnz	short loc_10003775
		cmp	edi, 2
		jz	short loc_100037D0
		cmp	edi, 3
		jnz	short loc_10003834

loc_100037D0:				; CODE XREF: eglCreateContext+7Fj
		mov	esi, [ebp+arg_8]
		mov	ebx, [ebp+arg_0]
		test	esi, esi
		jz	short loc_10003816
		mov	eax, [esi]
		mov	ecx, esi
		call	dword ptr [eax+8]
		cmp	al, byte ptr [ebp+var_4]
		jz	short loc_100037F3

loc_100037E6:				; CODE XREF: eglCreateContext+CAj
		call	sub_10003C9D
		mov	dword ptr [eax], 3009h
		jmp	short loc_1000383F
; ---------------------------------------------------------------------------

loc_100037F3:				; CODE XREF: eglCreateContext+9Aj
		mov	eax, [esi]
		mov	ecx, esi
		call	dword ptr [eax+0Ch]
		cmp	eax, edi
		jz	short loc_1000380B
		call	sub_10003C9D
		mov	dword ptr [eax], 3006h
		jmp	short loc_1000383F
; ---------------------------------------------------------------------------

loc_1000380B:				; CODE XREF: eglCreateContext+B2j
		mov	eax, [esi+140h]
		cmp	eax, [ebx+2Ch]
		jnz	short loc_100037E6

loc_10003816:				; CODE XREF: eglCreateContext+8Ej
		mov	edx, [ebp+arg_4]
		mov	ecx, ebx
		call	sub_10002E8E
		test	al, al
		jz	short loc_1000383F
		push	ecx
		push	[ebp+var_4]
		push	esi
		push	edi
		push	ecx
		mov	ecx, ebx
		call	sub_1000219C
		jmp	short loc_10003841
; ---------------------------------------------------------------------------

loc_10003834:				; CODE XREF: eglCreateContext+13j
					; eglCreateContext+22j	...
		call	sub_10003C9D
		mov	dword ptr [eax], 3005h

loc_1000383F:				; CODE XREF: eglCreateContext+6Bj
					; eglCreateContext+A7j	...
		xor	eax, eax

loc_10003841:				; CODE XREF: eglCreateContext+E8j
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn	10h
eglCreateContext endp

; Exported entry  24. eglDestroyContext

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public eglDestroyContext
eglDestroyContext proc near		; DATA XREF: .rdata:off_10007748o

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	esi
		mov	esi, [ebp+arg_4]
		mov	edx, esi
		push	edi
		mov	edi, [ebp+arg_0]
		mov	ecx, edi
		call	sub_10002EC0
		test	al, al
		jnz	short loc_10003866

loc_10003862:				; CODE XREF: eglDestroyContext+2Bj
		xor	eax, eax
		jmp	short loc_1000389C
; ---------------------------------------------------------------------------

loc_10003866:				; CODE XREF: eglDestroyContext+16j
		test	esi, esi
		jnz	short loc_10003877
		call	sub_10003C9D
		mov	dword ptr [eax], 3006h
		jmp	short loc_10003862
; ---------------------------------------------------------------------------

loc_10003877:				; CODE XREF: eglDestroyContext+1Ej
		push	esi
		mov	[ebp+arg_4], esi
		call	ds:libGLESv2_145
		pop	ecx
		lea	eax, [ebp+arg_4]
		push	eax
		lea	ecx, [edi+24h]
		call	sub_10004250
		call	sub_10003C9D
		mov	dword ptr [eax], 3000h
		xor	eax, eax
		inc	eax

loc_1000389C:				; CODE XREF: eglDestroyContext+1Aj
		pop	edi
		pop	esi
		pop	ebp
		retn	8
eglDestroyContext endp

; Exported entry  25. eglMakeCurrent

; =============== S U B	R O U T	I N E =======================================


		public eglMakeCurrent
eglMakeCurrent	proc near		; CODE XREF: eglReleaseThread+6p
					; DATA XREF: .rdata:off_10007748o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		cmp	[esp+arg_C], 0
		push	ebx
		mov	ebx, [esp+4+arg_4]
		setz	cl
		push	ebp
		mov	ebp, [esp+8+arg_8]
		test	ebx, ebx
		jz	short loc_100038C0
		test	ebp, ebp
		jz	short loc_100038C0
		xor	al, al
		jmp	short loc_100038C2
; ---------------------------------------------------------------------------

loc_100038C0:				; CODE XREF: eglMakeCurrent+14j
					; eglMakeCurrent+18j
		mov	al, 1

loc_100038C2:				; CODE XREF: eglMakeCurrent+1Cj
		cmp	cl, al
		jz	short loc_100038D8
		call	sub_10003C9D
		mov	dword ptr [eax], 3009h
		xor	eax, eax
		jmp	loc_1000398E
; ---------------------------------------------------------------------------

loc_100038D8:				; CODE XREF: eglMakeCurrent+22j
		cmp	[esp+8+arg_C], 0
		push	esi
		mov	esi, [esp+0Ch+arg_0]
		jz	short loc_100038FA
		mov	edx, [esp+0Ch+arg_C]
		mov	ecx, esi
		call	sub_10002EC0
		test	al, al
		jnz	short loc_100038FA
		xor	eax, eax
		jmp	loc_1000398D
; ---------------------------------------------------------------------------

loc_100038FA:				; CODE XREF: eglMakeCurrent+40j
					; eglMakeCurrent+4Fj
		push	edi
		test	esi, esi
		jz	short loc_10003931
		mov	edi, [esi+2Ch]
		test	edi, edi
		jz	short loc_10003931
		cmp	dword ptr [esi+18h], 0
		jbe	short loc_10003931
		mov	eax, [edi]
		mov	ecx, edi
		push	1
		call	dword ptr [eax+74h]
		test	al, al
		jnz	short loc_10003953
		mov	eax, [edi]
		mov	ecx, edi
		call	dword ptr [eax+70h]
		test	al, al
		jz	short loc_10003931
		call	sub_10003C9D
		mov	dword ptr [eax], 300Eh
		jmp	short loc_10003953
; ---------------------------------------------------------------------------

loc_10003931:				; CODE XREF: eglMakeCurrent+5Bj
					; eglMakeCurrent+62j ...
		test	ebx, ebx
		jz	short loc_10003942
		mov	edx, ebx
		mov	ecx, esi
		call	sub_10002F22
		test	al, al
		jz	short loc_10003953

loc_10003942:				; CODE XREF: eglMakeCurrent+91j
		test	ebp, ebp
		jz	short loc_10003957
		mov	edx, ebp
		mov	ecx, esi
		call	sub_10002F22
		test	al, al
		jnz	short loc_10003957

loc_10003953:				; CODE XREF: eglMakeCurrent+75j
					; eglMakeCurrent+8Dj ...
		xor	eax, eax
		jmp	short loc_1000398C
; ---------------------------------------------------------------------------

loc_10003957:				; CODE XREF: eglMakeCurrent+A2j
					; eglMakeCurrent+AFj
		call	sub_10003C9D
		mov	[eax+8], esi
		call	sub_10003C9D
		mov	[eax+0Ch], ebx
		call	sub_10003C9D
		push	ebx
		push	esi
		push	[esp+18h+arg_C]
		mov	[eax+10h], ebp
		call	ds:libGLESv2_146
		add	esp, 0Ch
		call	sub_10003C9D
		mov	dword ptr [eax], 3000h
		xor	eax, eax
		inc	eax

loc_1000398C:				; CODE XREF: eglMakeCurrent+B3j
		pop	edi

loc_1000398D:				; CODE XREF: eglMakeCurrent+53j
		pop	esi

loc_1000398E:				; CODE XREF: eglMakeCurrent+31j
		pop	ebp
		pop	ebx
		retn	10h
eglMakeCurrent	endp

; Exported entry  26. eglGetCurrentContext

; =============== S U B	R O U T	I N E =======================================


		public eglGetCurrentContext
eglGetCurrentContext proc near		; DATA XREF: .rdata:off_10007748o
		push	esi
		call	ds:libGLESv2_147
		mov	esi, eax
		call	sub_10003C9D
		mov	dword ptr [eax], 3000h
		mov	eax, esi
		pop	esi
		retn
eglGetCurrentContext endp

; Exported entry  27. eglGetCurrentSurface

; =============== S U B	R O U T	I N E =======================================


		public eglGetCurrentSurface
eglGetCurrentSurface proc near		; DATA XREF: .rdata:off_10007748o

arg_0		= dword	ptr  4

		push	esi
		call	sub_10003C9D
		cmp	[esp+4+arg_0], 305Ah
		jnz	short loc_100039CD
		mov	esi, [eax+10h]

loc_100039BE:				; CODE XREF: eglGetCurrentSurface+2Fj
		call	sub_10003C9D
		mov	dword ptr [eax], 3000h
		mov	eax, esi
		jmp	short loc_100039E4
; ---------------------------------------------------------------------------

loc_100039CD:				; CODE XREF: eglGetCurrentSurface+Ej
		cmp	[esp+4+arg_0], 3059h
		jnz	short loc_100039DC
		mov	esi, [eax+0Ch]
		jmp	short loc_100039BE
; ---------------------------------------------------------------------------

loc_100039DC:				; CODE XREF: eglGetCurrentSurface+2Aj
		mov	dword ptr [eax], 300Ch
		xor	eax, eax

loc_100039E4:				; CODE XREF: eglGetCurrentSurface+20j
		pop	esi
		retn	4
eglGetCurrentSurface endp

; Exported entry  28. eglGetCurrentDisplay

; =============== S U B	R O U T	I N E =======================================


		public eglGetCurrentDisplay
eglGetCurrentDisplay proc near		; DATA XREF: .rdata:off_10007748o
		push	esi
		call	sub_10003C9D
		mov	esi, [eax+8]
		call	sub_10003C9D
		mov	dword ptr [eax], 3000h
		mov	eax, esi
		pop	esi
		retn
eglGetCurrentDisplay endp

; Exported entry  29. eglQueryContext

; =============== S U B	R O U T	I N E =======================================


		public eglQueryContext
eglQueryContext	proc near		; DATA XREF: .rdata:off_10007748o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		mov	ecx, [esp+arg_0]
		call	sub_10002EC0
		test	al, al
		jz	short loc_10003A1C
		call	sub_10003C9D
		mov	dword ptr [eax], 3000h

loc_10003A1C:				; CODE XREF: eglQueryContext+Fj
		xor	eax, eax
		retn	10h
eglQueryContext	endp

; Exported entry  31. eglWaitNative

; =============== S U B	R O U T	I N E =======================================


		public eglWaitNative
eglWaitNative	proc near		; DATA XREF: .rdata:off_10007748o
		call	sub_10003C9D
		mov	dword ptr [eax], 3000h
		xor	eax, eax
		retn	4
eglWaitNative	endp

; Exported entry  32. eglSwapBuffers

; =============== S U B	R O U T	I N E =======================================


		public eglSwapBuffers
eglSwapBuffers	proc near		; DATA XREF: .rdata:off_10007748o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_4]
		mov	edx, esi
		push	edi
		mov	edi, [esp+8+arg_0]
		mov	ecx, edi
		call	sub_10002F22
		test	al, al
		jz	short loc_10003A5F
		mov	ecx, [edi+2Ch]
		mov	eax, [ecx]
		call	dword ptr [eax+70h]
		test	al, al
		jz	short loc_10003A66
		call	sub_10003C9D
		mov	dword ptr [eax], 300Eh

loc_10003A5F:				; CODE XREF: eglSwapBuffers+15j
					; eglSwapBuffers+44j ...
		xor	eax, eax

loc_10003A61:				; CODE XREF: eglSwapBuffers+69j
		pop	edi
		pop	esi
		retn	8
; ---------------------------------------------------------------------------

loc_10003A66:				; CODE XREF: eglSwapBuffers+21j
		test	esi, esi
		jnz	short loc_10003A77
		call	sub_10003C9D
		mov	dword ptr [eax], 300Dh
		jmp	short loc_10003A5F
; ---------------------------------------------------------------------------

loc_10003A77:				; CODE XREF: eglSwapBuffers+37j
		push	dword ptr [esi+20h]
		mov	ecx, esi
		push	dword ptr [esi+24h]
		push	0
		push	0
		call	sub_10002B8B
		test	al, al
		jz	short loc_10003A5F
		call	sub_10003C9D
		mov	dword ptr [eax], 3000h
		xor	eax, eax
		inc	eax
		jmp	short loc_10003A61
eglSwapBuffers	endp

; Exported entry  33. eglCopyBuffers

; =============== S U B	R O U T	I N E =======================================


		public eglCopyBuffers
eglCopyBuffers	proc near		; DATA XREF: .rdata:off_10007748o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		push	esi
		mov	esi, [esp+4+arg_0]
		mov	ecx, esi
		call	sub_10002F22
		test	al, al
		jz	short loc_10003AD4
		mov	ecx, [esi+2Ch]
		mov	eax, [ecx]
		call	dword ptr [eax+70h]
		test	al, al
		jz	short loc_10003AC9
		call	sub_10003C9D
		mov	dword ptr [eax], 300Eh
		jmp	short loc_10003AD4
; ---------------------------------------------------------------------------

loc_10003AC9:				; CODE XREF: eglCopyBuffers+1Ej
		call	sub_10003C9D
		mov	dword ptr [eax], 3000h

loc_10003AD4:				; CODE XREF: eglCopyBuffers+12j
					; eglCopyBuffers+2Bj
		xor	eax, eax
		pop	esi
		retn	0Ch
eglCopyBuffers	endp

; Exported entry  37. eglPostSubBufferNV

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public eglPostSubBufferNV
eglPostSubBufferNV proc	near		; DATA XREF: .rdata:1000759Co
					; .rdata:off_10007748o

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch

		push	ebp
		mov	ebp, esp
		cmp	[ebp+arg_8], 0
		push	esi
		push	edi
		jl	short loc_10003B61
		cmp	[ebp+arg_C], 0
		jl	short loc_10003B61
		cmp	[ebp+arg_10], 0
		jl	short loc_10003B61
		cmp	[ebp+arg_14], 0
		jl	short loc_10003B61
		mov	esi, [ebp+arg_4]
		mov	edx, esi
		mov	edi, [ebp+arg_0]
		mov	ecx, edi
		call	sub_10002F22
		test	al, al
		jz	short loc_10003B6C
		mov	ecx, [edi+2Ch]
		mov	eax, [ecx]
		call	dword ptr [eax+70h]
		test	al, al
		jz	short loc_10003B23
		call	sub_10003C9D
		mov	dword ptr [eax], 300Eh
		jmp	short loc_10003B6C
; ---------------------------------------------------------------------------

loc_10003B23:				; CODE XREF: eglPostSubBufferNV+3Aj
		test	esi, esi
		jnz	short loc_10003B34
		call	sub_10003C9D
		mov	dword ptr [eax], 300Dh
		jmp	short loc_10003B6C
; ---------------------------------------------------------------------------

loc_10003B34:				; CODE XREF: eglPostSubBufferNV+4Bj
		cmp	dword ptr [esi+40h], 0
		jz	short loc_10003B51
		push	[ebp+arg_14]
		mov	ecx, esi
		push	[ebp+arg_10]
		push	[ebp+arg_C]
		push	[ebp+arg_8]
		call	sub_10002B8B
		test	al, al
		jz	short loc_10003B6C

loc_10003B51:				; CODE XREF: eglPostSubBufferNV+5Ej
		call	sub_10003C9D
		mov	dword ptr [eax], 3000h
		xor	eax, eax
		inc	eax
		jmp	short loc_10003B6E
; ---------------------------------------------------------------------------

loc_10003B61:				; CODE XREF: eglPostSubBufferNV+9j
					; eglPostSubBufferNV+Fj ...
		call	sub_10003C9D
		mov	dword ptr [eax], 300Ch

loc_10003B6C:				; CODE XREF: eglPostSubBufferNV+2Ej
					; eglPostSubBufferNV+47j ...
		xor	eax, eax

loc_10003B6E:				; CODE XREF: eglPostSubBufferNV+85j
		pop	edi
		pop	esi
		pop	ebp
		retn	18h
eglPostSubBufferNV endp

; Exported entry  34. eglGetProcAddress

; =============== S U B	R O U T	I N E =======================================


		public eglGetProcAddress
eglGetProcAddress proc near		; DATA XREF: .rdata:off_10007748o

arg_0		= dword	ptr  4

		xor	eax, eax
		push	ebx

loc_10003B77:				; CODE XREF: eglGetProcAddress+3Bj
		mov	edx, ds:off_10007590[eax*8]
		mov	ecx, [esp+4+arg_0]

loc_10003B82:				; CODE XREF: eglGetProcAddress+28j
		mov	bl, [ecx]
		cmp	bl, [edx]
		jnz	short loc_10003BA2
		test	bl, bl
		jz	short loc_10003B9E
		mov	bl, [ecx+1]
		cmp	bl, [edx+1]
		jnz	short loc_10003BA2
		add	ecx, 2
		add	edx, 2
		test	bl, bl
		jnz	short loc_10003B82

loc_10003B9E:				; CODE XREF: eglGetProcAddress+16j
		xor	ecx, ecx
		jmp	short loc_10003BA7
; ---------------------------------------------------------------------------

loc_10003BA2:				; CODE XREF: eglGetProcAddress+12j
					; eglGetProcAddress+1Ej
		sbb	ecx, ecx
		or	ecx, 1

loc_10003BA7:				; CODE XREF: eglGetProcAddress+2Cj
		test	ecx, ecx
		jz	short loc_10003BB8
		inc	eax
		cmp	eax, 4
		jb	short loc_10003B77
		pop	ebx
		jmp	ds:libGLESv2_148
; ---------------------------------------------------------------------------

loc_10003BB8:				; CODE XREF: eglGetProcAddress+35j
		mov	eax, ds:off_10007594[eax*8]
		pop	ebx
		retn	4
eglGetProcAddress endp


; =============== S U B	R O U T	I N E =======================================


sub_10003BC3	proc near		; CODE XREF: DllMain(x,x,x):loc_10003C7Ap
					; sub_10003C9D:loc_10003CB2j
		cmp	dwTlsIndex, 0FFFFFFFFh
		jnz	short loc_10003BCF
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_10003BCF:				; CODE XREF: sub_10003BC3+7j
		push	esi
		push	14h
		call	ds:moz_xmalloc
		pop	ecx
		mov	esi, eax
		xor	ecx, ecx
		test	esi, esi
		jz	short loc_10003BEE
		push	edi
		xor	eax, eax
		mov	edi, esi
		stosd
		stosd
		stosd
		stosd
		stosd
		pop	edi
		jmp	short loc_10003BF0
; ---------------------------------------------------------------------------

loc_10003BEE:				; CODE XREF: sub_10003BC3+1Cj
		mov	esi, ecx

loc_10003BF0:				; CODE XREF: sub_10003BC3+29j
		mov	edx, esi
		mov	dword ptr [esi], 3000h
		mov	dword ptr [esi+4], 30A0h
		mov	[esi+8], ecx
		mov	[esi+0Ch], ecx
		mov	[esi+10h], ecx
		call	sub_10001252
		movzx	eax, al
		neg	eax
		sbb	eax, eax
		and	eax, esi
		pop	esi
		retn
sub_10003BC3	endp


; =============== S U B	R O U T	I N E =======================================


sub_10003C18	proc near		; CODE XREF: DllMain(x,x,x)+12p
					; DllMain(x,x,x):loc_10003C81p
		push	esi
		mov	esi, dwTlsIndex
		cmp	esi, 0FFFFFFFFh
		jnz	short loc_10003C28
		xor	eax, eax
		jmp	short loc_10003C35
; ---------------------------------------------------------------------------

loc_10003C28:				; CODE XREF: sub_10003C18+Aj
		push	esi		; dwTlsIndex
		call	ds:TlsGetValue
		mov	esi, dwTlsIndex

loc_10003C35:				; CODE XREF: sub_10003C18+Ej
		push	eax		; void *
		call	ds:free
		pop	ecx
		cmp	esi, 0FFFFFFFFh
		jz	short loc_10003C4B
		push	0		; lpTlsValue
		push	esi		; dwTlsIndex
		call	ds:TlsSetValue

loc_10003C4B:				; CODE XREF: sub_10003C18+28j
		pop	esi
		retn
sub_10003C18	endp


; =============== S U B	R O U T	I N E =======================================


; BOOL __stdcall DllMain(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpvReserved)
_DllMain@12	proc near		; CODE XREF: ___DllMainCRTStartup+7Dp
					; ___DllMainCRTStartup+97p

hinstDLL	= dword	ptr  4
fdwReason	= dword	ptr  8
lpvReserved	= dword	ptr  0Ch

		mov	eax, [esp+fdwReason]
		sub	eax, 0
		jz	short loc_10003C81
		dec	eax
		jz	short loc_10003C66
		dec	eax
		jz	short loc_10003C7A
		dec	eax
		jnz	short loc_10003C97
		call	sub_10003C18
		jmp	short loc_10003C97
; ---------------------------------------------------------------------------

loc_10003C66:				; CODE XREF: DllMain(x,x,x)+Aj
		call	ds:TlsAlloc
		mov	dwTlsIndex, eax
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_10003C7A
		xor	eax, eax
		jmp	short locret_10003C9A
; ---------------------------------------------------------------------------

loc_10003C7A:				; CODE XREF: DllMain(x,x,x)+Dj
					; DllMain(x,x,x)+27j
		call	sub_10003BC3
		jmp	short loc_10003C97
; ---------------------------------------------------------------------------

loc_10003C81:				; CODE XREF: DllMain(x,x,x)+7j
		call	sub_10003C18
		mov	eax, dwTlsIndex
		cmp	eax, 0FFFFFFFFh
		jz	short loc_10003C97
		push	eax		; dwTlsIndex
		call	ds:TlsFree

loc_10003C97:				; CODE XREF: DllMain(x,x,x)+10j
					; DllMain(x,x,x)+17j ...
		xor	eax, eax
		inc	eax

locret_10003C9A:			; CODE XREF: DllMain(x,x,x)+2Bj
		retn	0Ch
_DllMain@12	endp


; =============== S U B	R O U T	I N E =======================================


sub_10003C9D	proc near		; CODE XREF: sub_10001A4E+49p
					; sub_10001DDA:loc_10001E5Cp ...
		mov	eax, dwTlsIndex
		cmp	eax, 0FFFFFFFFh
		jz	short loc_10003CB2
		push	eax		; dwTlsIndex
		call	ds:TlsGetValue
		test	eax, eax
		jnz	short locret_10003CB7

loc_10003CB2:				; CODE XREF: sub_10003C9D+8j
		jmp	sub_10003BC3
; ---------------------------------------------------------------------------

locret_10003CB7:			; CODE XREF: sub_10003C9D+13j
		retn
sub_10003C9D	endp


; =============== S U B	R O U T	I N E =======================================


; int __stdcall	sub_10003CB8(void *)
sub_10003CB8	proc near		; CODE XREF: sub_10001193+19p
					; sub_10001202+19p

arg_0		= dword	ptr  4

		push	esi
		push	[esp+4+arg_0]	; void *
		mov	esi, ecx
		and	dword ptr [esi+10h], 0
		mov	dword ptr [esi+14h], 0Fh
		mov	byte ptr [esi],	0
		call	sub_100047CF
		mov	eax, esi
		pop	esi
		retn	4
sub_10003CB8	endp


; =============== S U B	R O U T	I N E =======================================


sub_10003CD8	proc near		; CODE XREF: sub_100044D2+21p
					; sub_10004502+3p
		push	esi
		mov	esi, ecx
		test	byte ptr [esi+3Ch], 1
		mov	dword ptr [esi], offset	off_100074BC
		jz	short loc_10003CF3
		mov	eax, [esi+0Ch]
		push	dword ptr [eax]	; void *
		call	ds:free
		pop	ecx

loc_10003CF3:				; CODE XREF: sub_10003CD8+Dj
		mov	eax, [esi+0Ch]
		xor	ecx, ecx
		mov	[eax], ecx
		mov	eax, [esi+1Ch]
		mov	[eax], ecx
		mov	eax, [esi+2Ch]
		mov	[eax], ecx
		mov	eax, [esi+10h]
		mov	[eax], ecx
		mov	eax, [esi+20h]
		mov	[eax], ecx
		mov	eax, [esi+30h]
		mov	[eax], ecx
		and	dword ptr [esi+3Ch], 0FFFFFFFEh
		mov	[esi+38h], ecx
		mov	ecx, esi
		pop	esi
		jmp	ds:??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_streambuf<char,std::char_traits<char>>::~basic_streambuf<char,std::char_traits<char>>(void)
sub_10003CD8	endp


; =============== S U B	R O U T	I N E =======================================


sub_10003D23	proc near		; DATA XREF: .rdata:100074C8o

var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		push	ecx
		push	esi
		mov	esi, ecx
		test	byte ptr [esi+3Ch], 2
		jz	short loc_10003D35
		or	eax, 0FFFFFFFFh
		jmp	loc_10003EB2
; ---------------------------------------------------------------------------

loc_10003D35:				; CODE XREF: sub_10003D23+8j
		push	ebx
		mov	ebx, [esp+0Ch+arg_0]
		cmp	ebx, 0FFFFFFFFh
		jnz	short loc_10003D46
		xor	eax, eax
		jmp	loc_10003EB1
; ---------------------------------------------------------------------------

loc_10003D46:				; CODE XREF: sub_10003D23+1Aj
		test	byte ptr [esi+3Ch], 8
		push	edi
		jz	short loc_10003D6C
		mov	edi, [esi+20h]
		cmp	dword ptr [edi], 0
		jz	short loc_10003D6C
		mov	edx, [esi+38h]
		cmp	[edi], edx
		jnb	short loc_10003D6C
		mov	eax, [esi+30h]
		mov	ecx, [eax]
		add	ecx, [edi]
		mov	[edi], edx
		sub	ecx, edx
		mov	eax, [esi+30h]
		mov	[eax], ecx

loc_10003D6C:				; CODE XREF: sub_10003D23+28j
					; sub_10003D23+30j ...
		mov	eax, [esi+20h]
		mov	edx, [eax]
		test	edx, edx
		jz	short loc_10003D95
		mov	ecx, [esi+30h]
		mov	ecx, [ecx]
		add	ecx, edx
		cmp	edx, ecx
		jnb	short loc_10003D91
		mov	ecx, esi
		call	ds:?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::_Pninc(void)
		mov	[eax], bl
		mov	eax, ebx
		jmp	loc_10003EB0
; ---------------------------------------------------------------------------

loc_10003D91:				; CODE XREF: sub_10003D23+5Bj
		test	edx, edx
		jnz	short loc_10003D99

loc_10003D95:				; CODE XREF: sub_10003D23+50j
		xor	ebx, ebx
		jmp	short loc_10003DA5
; ---------------------------------------------------------------------------

loc_10003D99:				; CODE XREF: sub_10003D23+70j
		mov	eax, [esi+30h]
		mov	ecx, [esi+0Ch]
		mov	ebx, [eax]
		sub	ebx, [ecx]
		add	ebx, edx

loc_10003DA5:				; CODE XREF: sub_10003D23+74j
		mov	eax, ebx
		push	20h
		shr	eax, 1
		pop	ecx
		cmp	eax, ecx
		jb	short loc_10003DB6
		mov	ecx, eax
		test	ecx, ecx
		jz	short loc_10003DC9

loc_10003DB6:				; CODE XREF: sub_10003D23+8Bj
					; sub_10003D23+A0j
		mov	eax, 7FFFFFFFh
		sub	eax, ecx
		cmp	eax, ebx
		jnb	short loc_10003DC5
		shr	ecx, 1
		jnz	short loc_10003DB6

loc_10003DC5:				; CODE XREF: sub_10003D23+9Cj
		test	ecx, ecx
		jnz	short loc_10003DD1

loc_10003DC9:				; CODE XREF: sub_10003D23+91j
		or	eax, 0FFFFFFFFh
		jmp	loc_10003EB0
; ---------------------------------------------------------------------------

loc_10003DD1:				; CODE XREF: sub_10003D23+A4j
		lea	eax, [ecx+ebx]
		push	ebp
		push	eax
		mov	[esp+18h+var_4], eax
		call	sub_10004839
		mov	ecx, [esi+0Ch]
		mov	edi, eax
		mov	ebp, [ecx]
		test	ebx, ebx
		jz	short loc_10003DF9
		push	ebx		; size_t
		mov	edx, ebp	; void *
		mov	ecx, edi	; void *
		call	sub_100010E0
		pop	ecx
		test	ebx, ebx
		jnz	short loc_10003E2A

loc_10003DF9:				; CODE XREF: sub_10003D23+C5j
		mov	eax, [esi+10h]
		mov	edx, [esp+14h+var_4]
		mov	[esi+38h], edi
		mov	[eax], edi
		mov	eax, [esi+20h]
		mov	[eax], edi
		mov	eax, [esi+30h]
		mov	[eax], edx
		mov	eax, [esi+0Ch]
		test	byte ptr [esi+3Ch], 4
		mov	[eax], edi
		mov	eax, [esi+1Ch]
		jnz	short loc_10003E63
		mov	[eax], edi
		mov	eax, [esi+2Ch]
		mov	dword ptr [eax], 1
		jmp	short loc_10003E8D
; ---------------------------------------------------------------------------

loc_10003E2A:				; CODE XREF: sub_10003D23+D4j
		mov	ecx, [esi+10h]
		mov	eax, edi
		sub	eax, ebp
		add	[esi+38h], eax
		mov	eax, [esi+20h]
		mov	edx, [eax]
		mov	eax, edi
		sub	eax, ebp
		sub	edx, ebp
		add	[ecx], eax
		add	edx, edi
		mov	eax, [esi+20h]
		mov	ecx, edi
		sub	ecx, edx
		add	ecx, [esp+14h+var_4]
		mov	[eax], edx
		mov	eax, [esi+30h]
		mov	[eax], ecx
		test	byte ptr [esi+3Ch], 4
		jz	short loc_10003E6D
		mov	eax, [esi+0Ch]
		mov	[eax], edi
		mov	eax, [esi+1Ch]

loc_10003E63:				; CODE XREF: sub_10003D23+F8j
		and	dword ptr [eax], 0
		mov	eax, [esi+2Ch]
		mov	[eax], edi
		jmp	short loc_10003E8D
; ---------------------------------------------------------------------------

loc_10003E6D:				; CODE XREF: sub_10003D23+136j
		mov	eax, [esi+20h]
		mov	edx, [eax]
		mov	eax, [esi+1Ch]
		mov	ecx, [eax]
		mov	eax, [esi+0Ch]
		sub	ecx, ebp
		add	ecx, edi
		sub	edx, ecx
		inc	edx
		mov	[eax], edi
		mov	eax, [esi+1Ch]
		mov	[eax], ecx
		mov	eax, [esi+2Ch]
		mov	[eax], edx

loc_10003E8D:				; CODE XREF: sub_10003D23+105j
					; sub_10003D23+148j
		test	byte ptr [esi+3Ch], 1
		jz	short loc_10003E9B
		push	ebp		; void *
		call	ds:free
		pop	ecx

loc_10003E9B:				; CODE XREF: sub_10003D23+16Ej
		or	dword ptr [esi+3Ch], 1
		mov	ecx, esi
		call	ds:?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::_Pninc(void)
		mov	ecx, [esp+14h+arg_0]
		pop	ebp
		mov	[eax], cl
		mov	eax, ecx

loc_10003EB0:				; CODE XREF: sub_10003D23+69j
					; sub_10003D23+A9j
		pop	edi

loc_10003EB1:				; CODE XREF: sub_10003D23+1Ej
		pop	ebx

loc_10003EB2:				; CODE XREF: sub_10003D23+Dj
		pop	esi
		pop	ecx
		retn	4
sub_10003D23	endp


; =============== S U B	R O U T	I N E =======================================


sub_10003EB7	proc near		; DATA XREF: .rdata:100074CCo

arg_0		= dword	ptr  4

		mov	edx, ecx
		push	esi
		mov	eax, [edx+1Ch]
		mov	esi, [eax]
		test	esi, esi
		jz	short loc_10003EFC
		mov	eax, [edx+0Ch]
		cmp	esi, [eax]
		jbe	short loc_10003EFC
		mov	ecx, [esp+4+arg_0]
		cmp	ecx, 0FFFFFFFFh
		jz	short loc_10003EDE
		cmp	cl, [esi-1]
		jz	short loc_10003EDE
		test	byte ptr [edx+3Ch], 2
		jnz	short loc_10003EFC

loc_10003EDE:				; CODE XREF: sub_10003EB7+1Aj
					; sub_10003EB7+1Fj
		mov	eax, [edx+2Ch]
		inc	dword ptr [eax]
		mov	eax, [edx+1Ch]
		dec	dword ptr [eax]
		cmp	ecx, 0FFFFFFFFh
		jz	short loc_10003EF6
		mov	eax, [edx+1Ch]
		mov	eax, [eax]
		mov	[eax], cl
		jmp	short loc_10003EF8
; ---------------------------------------------------------------------------

loc_10003EF6:				; CODE XREF: sub_10003EB7+34j
		xor	ecx, ecx

loc_10003EF8:				; CODE XREF: sub_10003EB7+3Dj
		mov	eax, ecx
		jmp	short loc_10003EFF
; ---------------------------------------------------------------------------

loc_10003EFC:				; CODE XREF: sub_10003EB7+Aj
					; sub_10003EB7+11j ...
		or	eax, 0FFFFFFFFh

loc_10003EFF:				; CODE XREF: sub_10003EB7+43j
		pop	esi
		retn	4
sub_10003EB7	endp


; =============== S U B	R O U T	I N E =======================================


sub_10003F03	proc near		; DATA XREF: .rdata:100074D4o
		push	esi
		mov	esi, [ecx+1Ch]
		mov	edx, [esi]
		test	edx, edx
		jnz	short loc_10003F12
		or	eax, 0FFFFFFFFh
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10003F12:				; CODE XREF: sub_10003F03+8j
		push	edi
		mov	edi, [ecx+2Ch]
		mov	eax, [edi]
		add	eax, edx
		cmp	edx, eax
		jnb	short loc_10003F23
		movzx	eax, byte ptr [edx]
		jmp	short loc_10003F57
; ---------------------------------------------------------------------------

loc_10003F23:				; CODE XREF: sub_10003F03+19j
		test	byte ptr [ecx+3Ch], 4
		jnz	short loc_10003F54
		mov	eax, [ecx+20h]
		mov	eax, [eax]
		test	eax, eax
		jz	short loc_10003F54
		cmp	eax, edx
		ja	short loc_10003F3B
		cmp	[ecx+38h], edx
		jbe	short loc_10003F54

loc_10003F3B:				; CODE XREF: sub_10003F03+31j
		cmp	[ecx+38h], eax
		jnb	short loc_10003F43
		mov	[ecx+38h], eax

loc_10003F43:				; CODE XREF: sub_10003F03+3Bj
		mov	eax, [ecx+38h]
		sub	eax, [esi]
		mov	[edi], eax
		mov	eax, [ecx+1Ch]
		mov	eax, [eax]
		movzx	eax, byte ptr [eax]
		jmp	short loc_10003F57
; ---------------------------------------------------------------------------

loc_10003F54:				; CODE XREF: sub_10003F03+24j
					; sub_10003F03+2Dj ...
		or	eax, 0FFFFFFFFh

loc_10003F57:				; CODE XREF: sub_10003F03+1Ej
					; sub_10003F03+4Fj
		pop	edi
		pop	esi
		retn
sub_10003F03	endp


; =============== S U B	R O U T	I N E =======================================


sub_10003F5A	proc near		; DATA XREF: .rdata:100074E4o

var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	ecx
		push	ebx
		mov	ebx, ecx
		push	ebp
		push	esi
		push	edi
		mov	ecx, [ebx+20h]
		mov	eax, [ecx]
		test	eax, eax
		jz	short loc_10003F72
		cmp	[ebx+38h], eax
		jnb	short loc_10003F72
		mov	[ebx+38h], eax

loc_10003F72:				; CODE XREF: sub_10003F5A+Ej
					; sub_10003F5A+13j
		test	byte ptr [esp+14h+arg_10], 1
		jz	loc_10004048
		mov	eax, [ebx+1Ch]
		mov	edx, [eax]
		mov	[esp+14h+var_4], edx
		test	edx, edx
		jz	loc_10004048
		mov	eax, [esp+14h+arg_C]
		mov	ebp, ds:?_BADOFF@std@@3_JB ; __int64 const std::_BADOFF
		cmp	eax, 2
		jnz	short loc_10003FA2
		mov	eax, [ebx+38h]
		jmp	short loc_10003FB0
; ---------------------------------------------------------------------------

loc_10003FA2:				; CODE XREF: sub_10003F5A+41j
		cmp	eax, 1
		jnz	short loc_10003FC4
		test	byte ptr [esp+14h+arg_10], 2
		jnz	short loc_10003FC8
		mov	eax, edx

loc_10003FB0:				; CODE XREF: sub_10003F5A+46j
		mov	ecx, [ebx+0Ch]
		mov	esi, [esp+14h+arg_4]
		mov	edi, [esp+14h+arg_8]
		sub	eax, [ecx]
		cdq
		add	esi, eax
		adc	edi, edx
		jmp	short loc_10003FD8
; ---------------------------------------------------------------------------

loc_10003FC4:				; CODE XREF: sub_10003F5A+4Bj
		test	eax, eax
		jz	short loc_10003FD0

loc_10003FC8:				; CODE XREF: sub_10003F5A+52j
		mov	esi, [ebp+0]
		mov	edi, [ebp+4]
		jmp	short loc_10003FD8
; ---------------------------------------------------------------------------

loc_10003FD0:				; CODE XREF: sub_10003F5A+6Cj
		mov	edi, [esp+14h+arg_8]
		mov	esi, [esp+14h+arg_4]

loc_10003FD8:				; CODE XREF: sub_10003F5A+68j
					; sub_10003F5A+74j
		test	edi, edi
		jl	loc_100040D1
		jg	short loc_10003FEA
		test	esi, esi
		jb	loc_100040D1

loc_10003FEA:				; CODE XREF: sub_10003F5A+86j
		mov	eax, [ebx+0Ch]
		mov	ecx, [eax]
		mov	eax, [ebx+38h]
		sub	eax, ecx
		cdq
		cmp	edi, edx
		jg	loc_100040D1
		jl	short loc_10004007
		cmp	esi, eax
		ja	loc_100040D1

loc_10004007:				; CODE XREF: sub_10003F5A+A3j
		mov	eax, [ebx+2Ch]
		sub	ecx, [esp+14h+var_4]
		add	ecx, esi
		sub	[eax], ecx
		mov	eax, [ebx+1Ch]
		add	[eax], ecx
		test	byte ptr [esp+14h+arg_10], 2
		jz	loc_100040F1
		mov	edx, [ebx+20h]
		cmp	dword ptr [edx], 0
		jz	loc_100040F1
		mov	eax, [ebx+30h]
		mov	ecx, [eax]
		mov	eax, [ebx+1Ch]
		add	ecx, [edx]
		mov	eax, [eax]
		sub	ecx, eax
		mov	[edx], eax
		mov	eax, [ebx+30h]
		mov	[eax], ecx
		jmp	loc_100040F1
; ---------------------------------------------------------------------------

loc_10004048:				; CODE XREF: sub_10003F5A+1Dj
					; sub_10003F5A+2Ej
		test	byte ptr [esp+14h+arg_10], 2
		jz	loc_100040D9
		mov	edx, [ecx]
		mov	[esp+14h+arg_10], edx
		test	edx, edx
		jz	short loc_100040D9
		mov	eax, [esp+14h+arg_C]
		mov	ebp, ds:?_BADOFF@std@@3_JB ; __int64 const std::_BADOFF
		cmp	eax, 2
		jnz	short loc_10004071
		mov	eax, [ebx+38h]
		jmp	short loc_10004078
; ---------------------------------------------------------------------------

loc_10004071:				; CODE XREF: sub_10003F5A+110j
		cmp	eax, 1
		jnz	short loc_1000408C
		mov	eax, edx

loc_10004078:				; CODE XREF: sub_10003F5A+115j
		mov	ecx, [ebx+0Ch]
		mov	esi, [esp+14h+arg_4]
		mov	edi, [esp+14h+arg_8]
		sub	eax, [ecx]
		cdq
		add	esi, eax
		adc	edi, edx
		jmp	short loc_100040A0
; ---------------------------------------------------------------------------

loc_1000408C:				; CODE XREF: sub_10003F5A+11Aj
		test	eax, eax
		jz	short loc_10004098
		mov	esi, [ebp+0]
		mov	edi, [ebp+4]
		jmp	short loc_100040A0
; ---------------------------------------------------------------------------

loc_10004098:				; CODE XREF: sub_10003F5A+134j
		mov	edi, [esp+14h+arg_8]
		mov	esi, [esp+14h+arg_4]

loc_100040A0:				; CODE XREF: sub_10003F5A+130j
					; sub_10003F5A+13Cj
		test	edi, edi
		jl	short loc_100040D1
		jg	short loc_100040AA
		test	esi, esi
		jb	short loc_100040D1

loc_100040AA:				; CODE XREF: sub_10003F5A+14Aj
		mov	eax, [ebx+0Ch]
		mov	ecx, [eax]
		mov	eax, [ebx+38h]
		sub	eax, ecx
		cdq
		cmp	edi, edx
		jg	short loc_100040D1
		jl	short loc_100040BF
		cmp	esi, eax
		ja	short loc_100040D1

loc_100040BF:				; CODE XREF: sub_10003F5A+15Fj
		mov	eax, [ebx+30h]
		sub	ecx, [esp+14h+arg_10]
		add	ecx, esi
		sub	[eax], ecx
		mov	eax, [ebx+20h]
		add	[eax], ecx
		jmp	short loc_100040F1
; ---------------------------------------------------------------------------

loc_100040D1:				; CODE XREF: sub_10003F5A+80j
					; sub_10003F5A+8Aj ...
		mov	esi, [ebp+0]
		mov	edi, [ebp+4]
		jmp	short loc_100040F1
; ---------------------------------------------------------------------------

loc_100040D9:				; CODE XREF: sub_10003F5A+F3j
					; sub_10003F5A+101j
		mov	esi, [esp+14h+arg_4]
		mov	eax, esi
		mov	edi, [esp+14h+arg_8]
		or	eax, edi
		jz	short loc_100040F1
		mov	eax, ds:?_BADOFF@std@@3_JB ; __int64 const std::_BADOFF
		mov	esi, [eax]
		mov	edi, [eax+4]

loc_100040F1:				; CODE XREF: sub_10003F5A+C2j
					; sub_10003F5A+CEj ...
		mov	eax, [esp+14h+arg_0]
		xor	ecx, ecx
		mov	[eax+4], edi
		pop	edi
		mov	[eax], esi
		pop	esi
		pop	ebp
		mov	[eax+8], ecx
		mov	[eax+0Ch], ecx
		mov	[eax+10h], ecx
		pop	ebx
		pop	ecx
		retn	14h
sub_10003F5A	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000410D	proc near		; DATA XREF: .rdata:100074E8o

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_1C		= dword	ptr  20h

		push	ecx
		push	ecx
		push	ebx
		mov	ebx, [esp+0Ch+arg_10]
		push	ebp
		push	esi
		mov	esi, [esp+14h+arg_C]
		add	esi, [esp+14h+arg_4]
		push	edi
		adc	ebx, [esp+18h+arg_8]
		mov	edi, ecx
		mov	edx, [edi+20h]
		mov	eax, [edx]
		test	eax, eax
		jz	short loc_10004136
		cmp	[edi+38h], eax
		jnb	short loc_10004136
		mov	[edi+38h], eax

loc_10004136:				; CODE XREF: sub_1000410D+1Fj
					; sub_1000410D+24j
		mov	eax, ds:?_BADOFF@std@@3_JB ; __int64 const std::_BADOFF
		mov	ecx, [eax]
		mov	ebp, [eax+4]
		mov	eax, ecx
		mov	[esp+18h+var_8], ecx
		cmp	esi, eax
		jnz	short loc_10004152
		cmp	ebx, ebp
		jz	loc_10004209

loc_10004152:				; CODE XREF: sub_1000410D+3Bj
		test	byte ptr [esp+18h+arg_1C], 1
		jz	short loc_100041C3
		mov	eax, [edi+1Ch]
		mov	eax, [eax]
		mov	[esp+18h+var_4], eax
		test	eax, eax
		jz	short loc_100041C1
		test	ebx, ebx
		jl	short loc_100041BB
		jg	short loc_10004170
		test	esi, esi
		jb	short loc_100041BB

loc_10004170:				; CODE XREF: sub_1000410D+5Dj
		mov	eax, [edi+0Ch]
		mov	ecx, [eax]
		mov	eax, [edi+38h]
		sub	eax, ecx
		cdq
		cmp	ebx, edx
		jg	short loc_100041BB
		jl	short loc_10004185
		cmp	esi, eax
		ja	short loc_100041BB

loc_10004185:				; CODE XREF: sub_1000410D+72j
		mov	eax, [edi+2Ch]
		sub	ecx, [esp+18h+var_4]
		add	ecx, esi
		sub	[eax], ecx
		mov	eax, [edi+1Ch]
		add	[eax], ecx
		test	byte ptr [esp+18h+arg_1C], 2
		jz	short loc_10004209
		mov	edx, [edi+20h]
		cmp	dword ptr [edx], 0
		jz	short loc_10004209
		mov	eax, [edi+30h]
		mov	ecx, [eax]
		mov	eax, [edi+1Ch]
		add	ecx, [edx]
		mov	eax, [eax]
		sub	ecx, eax
		mov	[edx], eax
		mov	eax, [edi+30h]
		mov	[eax], ecx
		jmp	short loc_10004209
; ---------------------------------------------------------------------------

loc_100041BB:				; CODE XREF: sub_1000410D+5Bj
					; sub_1000410D+61j ...
		mov	esi, [esp+18h+var_8]
		jmp	short loc_10004207
; ---------------------------------------------------------------------------

loc_100041C1:				; CODE XREF: sub_1000410D+57j
		mov	eax, ecx

loc_100041C3:				; CODE XREF: sub_1000410D+4Aj
		test	byte ptr [esp+18h+arg_1C], 2
		jz	short loc_10004205
		mov	ecx, [edx]
		mov	[esp+18h+arg_1C], ecx
		test	ecx, ecx
		jz	short loc_10004205
		test	ebx, ebx
		jl	short loc_100041BB
		jg	short loc_100041DE
		test	esi, esi
		jb	short loc_100041BB

loc_100041DE:				; CODE XREF: sub_1000410D+CBj
		mov	eax, [edi+0Ch]
		mov	ecx, [eax]
		mov	eax, [edi+38h]
		sub	eax, ecx
		cdq
		cmp	ebx, edx
		jg	short loc_100041BB
		jl	short loc_100041F3
		cmp	esi, eax
		ja	short loc_100041BB

loc_100041F3:				; CODE XREF: sub_1000410D+E0j
		mov	eax, [edi+30h]
		sub	ecx, [esp+18h+arg_1C]
		add	ecx, esi
		sub	[eax], ecx
		mov	eax, [edi+20h]
		add	[eax], ecx
		jmp	short loc_10004209
; ---------------------------------------------------------------------------

loc_10004205:				; CODE XREF: sub_1000410D+BBj
					; sub_1000410D+C5j
		mov	esi, eax

loc_10004207:				; CODE XREF: sub_1000410D+B2j
		mov	ebx, ebp

loc_10004209:				; CODE XREF: sub_1000410D+3Fj
					; sub_1000410D+8Dj ...
		mov	eax, [esp+18h+arg_0]
		xor	ecx, ecx
		pop	edi
		mov	[eax], esi
		pop	esi
		pop	ebp
		mov	[eax+4], ebx
		mov	[eax+8], ecx
		mov	[eax+0Ch], ecx
		mov	[eax+10h], ecx
		pop	ebx
		pop	ecx
		pop	ecx
		retn	20h
sub_1000410D	endp


; =============== S U B	R O U T	I N E =======================================


sub_10004226	proc near		; CODE XREF: sub_10001A4E+193p
		push	esi
		mov	esi, ecx
		mov	eax, [esi]
		push	dword ptr [eax+4] ; void *
		call	sub_1000503C
		mov	eax, [esi]
		mov	[eax+4], eax
		mov	eax, [esi]
		mov	[eax], eax
		mov	eax, [esi]
		mov	[eax+8], eax
		push	dword ptr [esi]	; void *
		and	dword ptr [esi+4], 0
		call	ds:free
		pop	ecx
		pop	esi
		retn
sub_10004226	endp


; =============== S U B	R O U T	I N E =======================================


sub_10004250	proc near		; CODE XREF: sub_10001BF0+40p
					; sub_100022DC+19p ...

arg_0		= dword	ptr  4

		push	ebx
		push	ebp
		mov	ebp, ecx
		push	esi
		push	edi
		mov	edi, [esp+10h+arg_0]
		mov	ebx, [ebp+0]
		mov	esi, ebx
		mov	eax, [ebx+4]
		mov	edx, eax
		cmp	byte ptr [edx+0Dh], 0
		jnz	short loc_1000428D
		mov	ecx, [edi]

loc_1000426C:				; CODE XREF: sub_10004250+3Bj
		cmp	[edx+10h], ecx
		jnb	short loc_10004276
		mov	edx, [edx+8]
		jmp	short loc_10004287
; ---------------------------------------------------------------------------

loc_10004276:				; CODE XREF: sub_10004250+1Fj
		cmp	byte ptr [esi+0Dh], 0
		jz	short loc_10004283
		cmp	ecx, [edx+10h]
		jnb	short loc_10004283
		mov	esi, edx

loc_10004283:				; CODE XREF: sub_10004250+2Aj
					; sub_10004250+2Fj
		mov	ebx, edx
		mov	edx, [edx]

loc_10004287:				; CODE XREF: sub_10004250+24j
		cmp	byte ptr [edx+0Dh], 0
		jz	short loc_1000426C

loc_1000428D:				; CODE XREF: sub_10004250+18j
		cmp	byte ptr [esi+0Dh], 0
		jnz	short loc_10004295
		mov	eax, [esi]

loc_10004295:				; CODE XREF: sub_10004250+41j
		cmp	byte ptr [eax+0Dh], 0
		jnz	short loc_100042B1
		mov	ecx, [edi]

loc_1000429D:				; CODE XREF: sub_10004250+5Fj
		cmp	ecx, [eax+10h]
		jnb	short loc_100042A8
		mov	esi, eax
		mov	eax, [eax]
		jmp	short loc_100042AB
; ---------------------------------------------------------------------------

loc_100042A8:				; CODE XREF: sub_10004250+50j
		mov	eax, [eax+8]

loc_100042AB:				; CODE XREF: sub_10004250+56j
		cmp	byte ptr [eax+0Dh], 0
		jz	short loc_1000429D

loc_100042B1:				; CODE XREF: sub_10004250+49j
		xor	edi, edi
		mov	[esp+10h+arg_0], ebx
		cmp	ebx, esi
		jz	short loc_100042CB

loc_100042BB:				; CODE XREF: sub_10004250+79j
		lea	ecx, [esp+10h+arg_0]
		inc	edi
		call	sub_1000490D
		cmp	[esp+10h+arg_0], esi
		jnz	short loc_100042BB

loc_100042CB:				; CODE XREF: sub_10004250+69j
		push	esi		; int
		push	ebx		; void *
		lea	eax, [esp+18h+arg_0]
		mov	ecx, ebp
		push	eax		; int
		call	sub_10004A11
		mov	eax, edi
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn	4
sub_10004250	endp


; =============== S U B	R O U T	I N E =======================================


; int __stdcall	sub_100042E2(void *)
sub_100042E2	proc near		; CODE XREF: sub_10002370+61p
					; sub_10002370+A9p ...

arg_0		= dword	ptr  4

		push	esi
		mov	esi, ecx
		push	edi
		mov	edi, [esp+8+arg_0]
		mov	ecx, [esi+4]
		cmp	edi, ecx
		jnb	short loc_10004335
		cmp	[esi], edi
		ja	short loc_10004335
		sub	edi, [esi]
		push	ebx
		mov	eax, edi
		push	18h
		cdq
		pop	ebx
		idiv	ebx
		mov	edi, eax
		cmp	ecx, [esi+8]
		jnz	short loc_1000430F
		push	ecx
		mov	ecx, esi
		call	sub_10004A75

loc_1000430F:				; CODE XREF: sub_100042E2+23j
		mov	ecx, [esi+4]
		imul	eax, edi, 18h
		add	eax, [esi]
		test	ecx, ecx
		jz	short loc_1000432F
		and	dword ptr [ecx+10h], 0
		mov	dword ptr [ecx+14h], 0Fh
		push	eax		; void *
		mov	byte ptr [ecx],	0
		call	sub_1000454B

loc_1000432F:				; CODE XREF: sub_100042E2+37j
		add	[esi+4], ebx
		pop	ebx
		jmp	short loc_10004361
; ---------------------------------------------------------------------------

loc_10004335:				; CODE XREF: sub_100042E2+Dj
					; sub_100042E2+11j
		cmp	ecx, [esi+8]
		jnz	short loc_10004342
		push	ecx
		mov	ecx, esi
		call	sub_10004A75

loc_10004342:				; CODE XREF: sub_100042E2+56j
		mov	ecx, [esi+4]
		test	ecx, ecx
		jz	short loc_1000435D
		and	dword ptr [ecx+10h], 0
		mov	dword ptr [ecx+14h], 0Fh
		push	edi		; void *
		mov	byte ptr [ecx],	0
		call	sub_1000454B

loc_1000435D:				; CODE XREF: sub_100042E2+65j
		add	dword ptr [esi+4], 18h

loc_10004361:				; CODE XREF: sub_100042E2+51j
		pop	edi
		pop	esi
		retn	4
sub_100042E2	endp


; =============== S U B	R O U T	I N E =======================================


sub_10004366	proc near		; CODE XREF: sub_10002370+154p
					; sub_100024DF+27Fp
		push	esi
		mov	esi, ecx
		push	edi
		mov	edi, [esi]
		test	edi, edi
		jz	short loc_1000439D
		push	ebx
		mov	ebx, [esi+4]
		push	ebp
		xor	ebp, ebp
		jmp	short loc_10004386
; ---------------------------------------------------------------------------

loc_10004379:				; CODE XREF: sub_10004366+22j
		push	ebp		; size_t
		push	1		; char
		mov	ecx, edi
		call	sub_100047F8
		add	edi, 18h

loc_10004386:				; CODE XREF: sub_10004366+11j
		cmp	edi, ebx
		jnz	short loc_10004379
		push	dword ptr [esi]	; void *
		call	ds:free
		pop	ecx
		mov	[esi], ebp
		mov	[esi+4], ebp
		mov	[esi+8], ebp
		pop	ebp
		pop	ebx

loc_1000439D:				; CODE XREF: sub_10004366+8j
		pop	edi
		pop	esi
		retn
sub_10004366	endp


; =============== S U B	R O U T	I N E =======================================


sub_100043A0	proc near		; CODE XREF: sub_10001915+11p
		and	dword_10009374,	0
		and	dword_10009378,	0
		push	18h
		call	ds:moz_xmalloc
		pop	ecx
		test	eax, eax
		jnz	short loc_100043C1
		jmp	ds:?_Xbad_alloc@std@@YAXXZ ; std::_Xbad_alloc(void)
; ---------------------------------------------------------------------------

loc_100043C1:				; CODE XREF: sub_100043A0+19j
		lea	ecx, [eax+4]
		mov	[eax], eax
		test	ecx, ecx
		jz	short loc_100043CC
		mov	[ecx], eax

loc_100043CC:				; CODE XREF: sub_100043A0+28j
		lea	ecx, [eax+8]
		test	ecx, ecx
		jz	short loc_100043D5
		mov	[ecx], eax

loc_100043D5:				; CODE XREF: sub_100043A0+31j
		mov	word ptr [eax+0Ch], 101h
		mov	dword_10009374,	eax
		mov	eax, offset dword_10009374
		retn
sub_100043A0	endp


; =============== S U B	R O U T	I N E =======================================


sub_100043E6	proc near		; CODE XREF: sub_10006990j
		mov	eax, dword_10009374
		mov	ecx, offset dword_10009374
		push	dword ptr [eax+4] ; void *
		call	sub_1000503C
		mov	eax, dword_10009374
		mov	[eax+4], eax
		mov	eax, dword_10009374
		mov	[eax], eax
		mov	eax, dword_10009374
		mov	[eax+8], eax
		push	dword_10009374	; void *
		and	dword_10009378,	0
		call	ds:free
		pop	ecx
		retn
sub_100043E6	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10004424	proc near		; CODE XREF: sub_1000193C+21p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		mov	edx, [ecx]
		mov	ecx, edx
		push	esi
		mov	esi, [ebp+arg_4]
		mov	eax, [edx+4]
		cmp	byte ptr [eax+0Dh], 0
		jnz	short loc_10004450
		push	edi
		mov	edi, [esi]

loc_1000443B:				; CODE XREF: sub_10004424+29j
		cmp	[eax+10h], edi
		jnb	short loc_10004445
		mov	eax, [eax+8]
		jmp	short loc_10004449
; ---------------------------------------------------------------------------

loc_10004445:				; CODE XREF: sub_10004424+1Aj
		mov	ecx, eax
		mov	eax, [eax]

loc_10004449:				; CODE XREF: sub_10004424+1Fj
		cmp	byte ptr [eax+0Dh], 0
		jz	short loc_1000443B
		pop	edi

loc_10004450:				; CODE XREF: sub_10004424+12j
		cmp	ecx, edx
		jz	short loc_1000445E
		mov	eax, [esi]
		mov	[ebp+arg_4], ecx
		cmp	eax, [ecx+10h]
		jnb	short loc_10004461

loc_1000445E:				; CODE XREF: sub_10004424+2Ej
		mov	[ebp+arg_4], edx

loc_10004461:				; CODE XREF: sub_10004424+38j
		mov	eax, [ebp+arg_0]
		lea	ecx, [ebp+arg_4]
		mov	ecx, [ecx]
		pop	esi
		mov	[eax], ecx
		pop	ebp
		retn	8
sub_10004424	endp


; =============== S U B	R O U T	I N E =======================================


sub_10004470	proc near		; CODE XREF: sub_10002370+10Bp
					; sub_100024DF+200p

var_4		= dword	ptr -4

		push	ecx
		push	ebx
		push	esi
		push	edi
		mov	edi, ecx
		xor	ebx, ebx
		mov	[esp+10h+var_4], ebx
		lea	ecx, [edi+50h]
		mov	dword ptr [edi], offset	dword_10007534
		call	ds:??0?$basic_ios@DU?$char_traits@D@std@@@std@@IAE@XZ ;	std::basic_ios<char,std::char_traits<char>>::basic_ios<char,std::char_traits<char>>(void)
		push	ebx
		push	ebx
		lea	esi, [edi+4]
		mov	ecx, edi
		push	esi
		call	ds:??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z ; std::basic_ostream<char,std::char_traits<char>>::basic_ostream<char,std::char_traits<char>>(std::basic_streambuf<char,std::char_traits<char>> *,bool)
		mov	eax, [edi]
		mov	eax, [eax+4]
		mov	dword ptr [edi+eax], offset off_100074B8
		mov	eax, [edi]
		mov	ecx, [eax+4]
		lea	eax, [ecx-50h]
		mov	[ecx+edi-4], eax
		mov	ecx, esi
		call	ds:??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ ; std::basic_streambuf<char,std::char_traits<char>>::basic_streambuf<char,std::char_traits<char>>(void)
		mov	eax, edi
		mov	[esi+38h], ebx
		pop	edi
		mov	dword ptr [esi], offset	off_100074BC
		mov	dword ptr [esi+3Ch], 4
		pop	esi
		pop	ebx
		pop	ecx
		retn	8
sub_10004470	endp


; =============== S U B	R O U T	I N E =======================================


sub_100044D2	proc near		; CODE XREF: sub_10002370+141p
					; sub_100024DF+26Cp ...
		push	esi
		mov	esi, ecx
		mov	eax, [esi-50h]
		lea	ecx, [esi-4Ch]
		mov	eax, [eax+4]
		mov	dword ptr [eax+esi-50h], offset	off_100074B8
		mov	eax, [esi-50h]
		mov	edx, [eax+4]
		lea	eax, [edx-50h]
		mov	[edx+esi-54h], eax
		call	sub_10003CD8
		lea	ecx, [esi-48h]
		pop	esi
		jmp	ds:??1?$basic_ostream@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_ostream<char,std::char_traits<char>>::~basic_ostream<char,std::char_traits<char>>(void)
sub_100044D2	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_10004502(void *, char)
sub_10004502	proc near		; DATA XREF: .rdata:off_100074BCo

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	sub_10003CD8
		test	[esp+4+arg_0], 1
		jz	short loc_10004519
		push	esi		; void *
		call	ds:free
		pop	ecx

loc_10004519:				; CODE XREF: sub_10004502+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_10004502	endp

; ---------------------------------------------------------------------------
; START	OF FUNCTION CHUNK FOR sub_10006068

loc_1000451F:				; CODE XREF: sub_10006068+3j
		push	esi
		push	edi
		lea	edi, [ecx-50h]
		lea	ecx, [edi+50h]
		call	sub_100044D2
		lea	ecx, [edi+50h]
		call	ds:??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ ;	std::basic_ios<char,std::char_traits<char>>::~basic_ios<char,std::char_traits<char>>(void)
		test	[esp+8+arg_0], 1
		jz	short loc_10004544
		push	edi		; void *
		call	ds:free
		pop	ecx

loc_10004544:				; CODE XREF: sub_10006068-1B2Ej
		mov	eax, edi
		pop	edi
		pop	esi
		retn	4
; END OF FUNCTION CHUNK	FOR sub_10006068

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	sub_1000454B(void *)
sub_1000454B	proc near		; CODE XREF: sub_100024DF+255p
					; sub_100042E2+48p ...

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		push	edi
		mov	edi, ecx
		cmp	dword ptr [esi+14h], 10h
		jnb	short loc_10004568
		mov	eax, [esi+10h]
		mov	edx, esi	; void *
		inc	eax
		push	eax		; size_t
		call	sub_100010FA
		pop	ecx
		jmp	short loc_10004573
; ---------------------------------------------------------------------------

loc_10004568:				; CODE XREF: sub_1000454B+Cj
		test	edi, edi
		jz	short loc_10004570
		mov	eax, [esi]
		mov	[edi], eax

loc_10004570:				; CODE XREF: sub_1000454B+1Fj
		and	dword ptr [esi], 0

loc_10004573:				; CODE XREF: sub_1000454B+1Bj
		mov	eax, [esi+10h]
		mov	[edi+10h], eax
		mov	eax, [esi+14h]
		mov	[edi+14h], eax
		and	dword ptr [esi+10h], 0
		mov	dword ptr [esi+14h], 0Fh
		pop	edi
		mov	byte ptr [esi],	0
		pop	esi
		retn	4
sub_1000454B	endp


; =============== S U B	R O U T	I N E =======================================


; int __stdcall	sub_10004592(int, int, size_t)
sub_10004592	proc near		; CODE XREF: sub_10004630+28p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		mov	ebx, [esp+4+arg_0]
		push	ebp
		mov	ebp, [esp+8+arg_4]
		push	esi
		mov	eax, [ebx+10h]
		mov	esi, ecx
		cmp	eax, ebp
		jnb	short loc_100045B1
		push	offset aInvalidStringP ; "invalid string position"
		call	ds:?moz_Xout_of_range@std@@YAXPBD@Z ; std::moz_Xout_of_range(char const	*)

loc_100045B1:				; CODE XREF: sub_10004592+12j
		push	edi
		mov	edi, [esp+10h+arg_8]
		sub	eax, ebp
		cmp	eax, edi
		jnb	short loc_100045BE
		mov	edi, eax

loc_100045BE:				; CODE XREF: sub_10004592+28j
		mov	ecx, [esi+10h]
		or	eax, 0FFFFFFFFh
		sub	eax, ecx
		cmp	eax, edi
		ja	short loc_100045D5
		push	offset aStringTooLong ;	"string	too long"
		call	ds:?moz_Xlength_error@std@@YAXPBD@Z ; std::moz_Xlength_error(char const	*)

loc_100045D5:				; CODE XREF: sub_10004592+36j
		test	edi, edi
		jz	short loc_10004627
		lea	eax, [ecx+edi]
		push	ecx
		push	eax
		mov	ecx, esi
		mov	[esp+18h+arg_0], eax
		call	sub_10004C4F
		test	al, al
		jz	short loc_10004627
		cmp	dword ptr [ebx+14h], 10h
		jb	short loc_100045F5
		mov	ebx, [ebx]

loc_100045F5:				; CODE XREF: sub_10004592+5Fj
		cmp	dword ptr [esi+14h], 10h
		jb	short loc_100045FF
		mov	eax, [esi]
		jmp	short loc_10004601
; ---------------------------------------------------------------------------

loc_100045FF:				; CODE XREF: sub_10004592+67j
		mov	eax, esi

loc_10004601:				; CODE XREF: sub_10004592+6Bj
		mov	ecx, [esi+10h]
		lea	edx, [ebx+ebp]	; void *
		push	edi		; size_t
		add	ecx, eax	; void *
		call	sub_100010E0
		cmp	dword ptr [esi+14h], 10h
		pop	ecx
		mov	ecx, [esp+10h+arg_0]
		mov	[esi+10h], ecx
		jb	short loc_10004621
		mov	eax, [esi]
		jmp	short loc_10004623
; ---------------------------------------------------------------------------

loc_10004621:				; CODE XREF: sub_10004592+89j
		mov	eax, esi

loc_10004623:				; CODE XREF: sub_10004592+8Dj
		mov	byte ptr [eax+ecx], 0

loc_10004627:				; CODE XREF: sub_10004592+45j
					; sub_10004592+59j
		pop	edi
		mov	eax, esi
		pop	esi
		pop	ebp
		pop	ebx
		retn	0Ch
sub_10004592	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_10004630(int, void	*, size_t)
sub_10004630	proc near		; CODE XREF: sub_100027C1+78p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		push	edi
		mov	edi, [esp+8+arg_0]
		mov	esi, ecx
		push	edi
		call	sub_10004C92
		test	al, al
		jz	short loc_1000465F
		cmp	dword ptr [esi+14h], 10h
		jb	short loc_1000464C
		mov	eax, [esi]
		jmp	short loc_1000464E
; ---------------------------------------------------------------------------

loc_1000464C:				; CODE XREF: sub_10004630+16j
		mov	eax, esi

loc_1000464E:				; CODE XREF: sub_10004630+1Aj
		push	[esp+8+arg_4]	; size_t
		sub	edi, eax
		mov	ecx, esi
		push	edi		; int
		push	esi		; int
		call	sub_10004592
		jmp	short loc_100046C1
; ---------------------------------------------------------------------------

loc_1000465F:				; CODE XREF: sub_10004630+10j
		mov	ecx, [esi+10h]
		or	eax, 0FFFFFFFFh
		push	ebx
		mov	ebx, [esp+0Ch+arg_4]
		sub	eax, ecx
		cmp	eax, ebx
		ja	short loc_1000467B
		push	offset aStringTooLong ;	"string	too long"
		call	ds:?moz_Xlength_error@std@@YAXPBD@Z ; std::moz_Xlength_error(char const	*)

loc_1000467B:				; CODE XREF: sub_10004630+3Ej
		test	ebx, ebx
		jz	short loc_100046BE
		push	ebp
		lea	ebp, [ecx+ebx]
		push	ecx
		push	ebp
		mov	ecx, esi
		call	sub_10004C4F
		test	al, al
		jz	short loc_100046BD
		cmp	dword ptr [esi+14h], 10h
		jb	short loc_1000469A
		mov	eax, [esi]
		jmp	short loc_1000469C
; ---------------------------------------------------------------------------

loc_1000469A:				; CODE XREF: sub_10004630+64j
		mov	eax, esi

loc_1000469C:				; CODE XREF: sub_10004630+68j
		mov	ecx, [esi+10h]
		mov	edx, edi	; void *
		push	ebx		; size_t
		add	ecx, eax	; void *
		call	sub_100010E0
		cmp	dword ptr [esi+14h], 10h
		pop	ecx
		mov	[esi+10h], ebp
		jb	short loc_100046B7
		mov	eax, [esi]
		jmp	short loc_100046B9
; ---------------------------------------------------------------------------

loc_100046B7:				; CODE XREF: sub_10004630+81j
		mov	eax, esi

loc_100046B9:				; CODE XREF: sub_10004630+85j
		mov	byte ptr [eax+ebp], 0

loc_100046BD:				; CODE XREF: sub_10004630+5Ej
		pop	ebp

loc_100046BE:				; CODE XREF: sub_10004630+4Dj
		mov	eax, esi
		pop	ebx

loc_100046C1:				; CODE XREF: sub_10004630+2Dj
		pop	edi
		pop	esi
		retn	8
sub_10004630	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_100046C6(void *, int, int,	int)
sub_100046C6	proc near		; CODE XREF: sub_1000475E+28p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		mov	ebx, [esp+4+arg_0]
		push	ebp
		mov	ebp, [esp+8+arg_4]
		push	esi
		push	edi
		mov	edi, [ebx+10h]
		mov	esi, ecx
		cmp	edi, ebp
		jnb	short loc_100046E6

loc_100046DB:				; CODE XREF: sub_100046C6+36j
		push	offset aInvalidStringP ; "invalid string position"
		call	ds:?moz_Xout_of_range@std@@YAXPBD@Z ; std::moz_Xout_of_range(char const	*)

loc_100046E6:				; CODE XREF: sub_100046C6+13j
		sub	edi, ebp
		cmp	[esp+10h+arg_8], edi
		jnb	short loc_100046F2
		mov	edi, [esp+10h+arg_8]

loc_100046F2:				; CODE XREF: sub_100046C6+26j
		cmp	esi, ebx
		jnz	short loc_10004719
		lea	eax, [edi+ebp]
		cmp	[esi+10h], eax
		jb	short loc_100046DB
		cmp	dword ptr [esi+14h], 10h
		mov	[esi+10h], eax
		jb	short loc_10004709
		mov	ecx, [esi]

loc_10004709:				; CODE XREF: sub_100046C6+3Fj
		push	ebp
		mov	byte ptr [ecx+eax], 0
		mov	ecx, esi
		push	0
		call	sub_10004BD5
		jmp	short loc_10004755
; ---------------------------------------------------------------------------

loc_10004719:				; CODE XREF: sub_100046C6+2Ej
		push	ecx
		push	edi
		call	sub_10004C4F
		test	al, al
		jz	short loc_10004755
		cmp	dword ptr [ebx+14h], 10h
		jb	short loc_1000472C
		mov	ebx, [ebx]

loc_1000472C:				; CODE XREF: sub_100046C6+62j
		cmp	dword ptr [esi+14h], 10h
		jb	short loc_10004736
		mov	ecx, [esi]
		jmp	short loc_10004738
; ---------------------------------------------------------------------------

loc_10004736:				; CODE XREF: sub_100046C6+6Aj
		mov	ecx, esi	; void *

loc_10004738:				; CODE XREF: sub_100046C6+6Ej
		push	edi		; size_t
		lea	edx, [ebx+ebp]	; void *
		call	sub_100010E0
		cmp	dword ptr [esi+14h], 10h
		pop	ecx
		mov	[esi+10h], edi
		jb	short loc_1000474F
		mov	eax, [esi]
		jmp	short loc_10004751
; ---------------------------------------------------------------------------

loc_1000474F:				; CODE XREF: sub_100046C6+83j
		mov	eax, esi

loc_10004751:				; CODE XREF: sub_100046C6+87j
		mov	byte ptr [eax+edi], 0

loc_10004755:				; CODE XREF: sub_100046C6+51j
					; sub_100046C6+5Cj
		pop	edi
		mov	eax, esi
		pop	esi
		pop	ebp
		pop	ebx
		retn	0Ch
sub_100046C6	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_1000475E(void *, void *, size_t)
sub_1000475E	proc near		; CODE XREF: sub_10002370+50p
					; sub_10002370+98p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		push	edi
		mov	edi, [esp+8+arg_0]
		mov	esi, ecx
		push	edi
		call	sub_10004C92
		test	al, al
		jz	short loc_1000478D
		cmp	dword ptr [esi+14h], 10h
		jb	short loc_1000477A
		mov	eax, [esi]
		jmp	short loc_1000477C
; ---------------------------------------------------------------------------

loc_1000477A:				; CODE XREF: sub_1000475E+16j
		mov	eax, esi

loc_1000477C:				; CODE XREF: sub_1000475E+1Aj
		push	[esp+8+arg_4]	; int
		sub	edi, eax
		mov	ecx, esi	; void *
		push	edi		; int
		push	esi		; int
		call	sub_100046C6
		jmp	short loc_100047CA
; ---------------------------------------------------------------------------

loc_1000478D:				; CODE XREF: sub_1000475E+10j
		push	ebx
		mov	ebx, [esp+0Ch+arg_4]
		push	ecx
		push	ebx
		mov	ecx, esi
		call	sub_10004C4F
		test	al, al
		jz	short loc_100047C7
		cmp	dword ptr [esi+14h], 10h
		jb	short loc_100047A9
		mov	ecx, [esi]
		jmp	short loc_100047AB
; ---------------------------------------------------------------------------

loc_100047A9:				; CODE XREF: sub_1000475E+45j
		mov	ecx, esi	; void *

loc_100047AB:				; CODE XREF: sub_1000475E+49j
		push	ebx		; size_t
		mov	edx, edi	; void *
		call	sub_100010E0
		cmp	dword ptr [esi+14h], 10h
		pop	ecx
		mov	[esi+10h], ebx
		jb	short loc_100047C1
		mov	eax, [esi]
		jmp	short loc_100047C3
; ---------------------------------------------------------------------------

loc_100047C1:				; CODE XREF: sub_1000475E+5Dj
		mov	eax, esi

loc_100047C3:				; CODE XREF: sub_1000475E+61j
		mov	byte ptr [eax+ebx], 0

loc_100047C7:				; CODE XREF: sub_1000475E+3Fj
		mov	eax, esi
		pop	ebx

loc_100047CA:				; CODE XREF: sub_1000475E+2Dj
		pop	edi
		pop	esi
		retn	8
sub_1000475E	endp


; =============== S U B	R O U T	I N E =======================================


; int __stdcall	sub_100047CF(void *)
sub_100047CF	proc near		; CODE XREF: sub_100011BE+22p
					; sub_100027C1+1Dp ...

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		cmp	byte ptr [esi],	0
		jnz	short loc_100047DD
		xor	edx, edx
		jmp	short loc_100047ED
; ---------------------------------------------------------------------------

loc_100047DD:				; CODE XREF: sub_100047CF+8j
		mov	edx, esi
		push	edi
		lea	edi, [edx+1]

loc_100047E3:				; CODE XREF: sub_100047CF+19j
		mov	al, [edx]
		inc	edx
		test	al, al
		jnz	short loc_100047E3
		sub	edx, edi
		pop	edi

loc_100047ED:				; CODE XREF: sub_100047CF+Cj
		push	edx		; size_t
		push	esi		; void *
		call	sub_1000475E
		pop	esi
		retn	4
sub_100047CF	endp


; =============== S U B	R O U T	I N E =======================================


; int __stdcall	sub_100047F8(char, size_t)
sub_100047F8	proc near		; CODE XREF: sub_10002370+70p
					; sub_10002370+B8p ...

arg_0		= byte ptr  4
arg_4		= dword	ptr  8

		cmp	[esp+arg_0], 0
		push	esi
		push	edi
		mov	edi, [esp+8+arg_4]
		mov	esi, ecx
		jz	short loc_10004826
		cmp	dword ptr [esi+14h], 10h
		jb	short loc_10004826
		push	ebx
		mov	ebx, [esi]
		test	edi, edi
		jz	short loc_1000481D
		push	edi		; size_t
		mov	edx, ebx	; void *
		call	sub_100010E0
		pop	ecx

loc_1000481D:				; CODE XREF: sub_100047F8+1Aj
		push	ebx		; void *
		call	ds:free
		pop	ecx
		pop	ebx

loc_10004826:				; CODE XREF: sub_100047F8+Dj
					; sub_100047F8+13j
		mov	[esi+10h], edi
		mov	dword ptr [esi+14h], 0Fh
		mov	byte ptr [edi+esi], 0
		pop	edi
		pop	esi
		retn	8
sub_100047F8	endp


; =============== S U B	R O U T	I N E =======================================


sub_10004839	proc near		; CODE XREF: sub_10003D23+B7p
					; sub_10004FAE+41p

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		xor	ecx, ecx
		test	eax, eax
		jz	short loc_1000485C
		cmp	eax, 0FFFFFFFFh
		ja	short loc_10004856
		push	eax
		call	ds:moz_xmalloc
		pop	ecx
		mov	ecx, eax
		test	ecx, ecx
		jnz	short loc_1000485C

loc_10004856:				; CODE XREF: sub_10004839+Dj
		call	ds:?_Xbad_alloc@std@@YAXXZ ; std::_Xbad_alloc(void)

loc_1000485C:				; CODE XREF: sub_10004839+8j
					; sub_10004839+1Bj
		mov	eax, ecx
		retn	4
sub_10004839	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10004861	proc near		; CODE XREF: sub_10002370+138p
					; sub_100024DF+22Fp

var_20		= byte ptr -20h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 20h
		mov	eax, ___security_cookie
		xor	eax, ebp
		mov	[ebp+var_8], eax
		mov	edx, ecx
		push	ebx
		push	esi
		mov	esi, [ebp+arg_0]
		test	byte ptr [edx+3Ch], 2
		push	edi
		jnz	short loc_100048B1
		mov	eax, [edx+20h]
		mov	ecx, [eax]
		test	ecx, ecx
		jz	short loc_100048B1
		cmp	[edx+38h], ecx
		jb	short loc_10004890
		mov	ecx, [edx+38h]

loc_10004890:				; CODE XREF: sub_10004861+2Aj
		mov	eax, [edx+10h]

loc_10004893:				; CODE XREF: sub_10004861+69j
		mov	eax, [eax]
		xor	ebx, ebx
		push	0Fh
		pop	edi
		sub	ecx, eax
		mov	[ebp+var_C], edi
		push	ecx		; size_t
		push	eax		; void *
		lea	ecx, [ebp+var_20] ; void *
		mov	[ebp+var_10], ebx
		mov	[ebp+var_20], bl
		call	sub_1000475E
		jmp	short loc_100048DA
; ---------------------------------------------------------------------------

loc_100048B1:				; CODE XREF: sub_10004861+1Cj
					; sub_10004861+25j
		test	byte ptr [edx+3Ch], 4
		jnz	short loc_100048CC
		mov	eax, [edx+1Ch]
		mov	edi, [eax]
		test	edi, edi
		jz	short loc_100048CC
		mov	eax, [edx+2Ch]
		mov	ecx, [eax]
		mov	eax, [edx+0Ch]
		add	ecx, edi
		jmp	short loc_10004893
; ---------------------------------------------------------------------------

loc_100048CC:				; CODE XREF: sub_10004861+54j
					; sub_10004861+5Dj
		push	0Fh
		xor	ebx, ebx
		pop	edi
		mov	[ebp+var_C], edi
		mov	[ebp+var_10], ebx
		mov	[ebp+var_20], bl

loc_100048DA:				; CODE XREF: sub_10004861+4Ej
		lea	eax, [ebp+var_20]
		mov	[esi+14h], edi
		mov	[esi+10h], ebx
		mov	ecx, esi
		push	eax		; void *
		mov	[esi], bl
		call	sub_1000454B
		push	ebx		; size_t
		push	1		; char
		lea	ecx, [ebp+var_20]
		call	sub_100047F8
		mov	ecx, [ebp+var_8]
		mov	eax, esi
		pop	edi
		pop	esi
		xor	ecx, ebp
		pop	ebx
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	esp, ebp
		pop	ebp
		retn	4
sub_10004861	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000490D	proc near		; CODE XREF: sub_100015BE+1DFp
					; sub_100018DE+1Cp ...
		mov	edx, ecx
		mov	ecx, [edx]
		cmp	byte ptr [ecx+0Dh], 0
		jnz	short loc_10004944
		mov	eax, [ecx+8]
		cmp	byte ptr [eax+0Dh], 0
		jnz	short loc_10004939
		jmp	short loc_10004924
; ---------------------------------------------------------------------------

loc_10004922:				; CODE XREF: sub_1000490D+1Dj
		mov	eax, ecx

loc_10004924:				; CODE XREF: sub_1000490D+13j
		mov	ecx, [eax]
		cmp	byte ptr [ecx+0Dh], 0
		jz	short loc_10004922
		mov	[edx], eax
		jmp	short loc_10004944
; ---------------------------------------------------------------------------

loc_10004930:				; CODE XREF: sub_1000490D+33j
		mov	eax, [edx]
		cmp	eax, [ecx+8]
		jnz	short loc_10004942
		mov	[edx], ecx

loc_10004939:				; CODE XREF: sub_1000490D+11j
		mov	ecx, [ecx+4]
		cmp	byte ptr [ecx+0Dh], 0
		jz	short loc_10004930

loc_10004942:				; CODE XREF: sub_1000490D+28j
		mov	[edx], ecx

loc_10004944:				; CODE XREF: sub_1000490D+8j
					; sub_1000490D+21j
		mov	eax, edx
		retn
sub_1000490D	endp


; =============== S U B	R O U T	I N E =======================================


sub_10004947	proc near		; CODE XREF: sub_100015BE+3Dp
					; sub_100049B8+4Fp

arg_0		= dword	ptr  4

		push	ebx
		mov	ebx, [esp+4+arg_0]
		push	esi
		xor	esi, esi
		push	edi
		mov	edi, ecx
		test	ebx, ebx
		jz	short loc_10004977
		cmp	ebx, 3FFFFFFFh
		ja	short loc_10004971
		mov	eax, ebx
		shl	eax, 2
		push	eax
		call	ds:moz_xmalloc
		mov	esi, eax
		pop	ecx
		test	esi, esi
		jnz	short loc_10004977

loc_10004971:				; CODE XREF: sub_10004947+15j
		call	ds:?_Xbad_alloc@std@@YAXXZ ; std::_Xbad_alloc(void)

loc_10004977:				; CODE XREF: sub_10004947+Dj
					; sub_10004947+28j
		mov	eax, [edi+4]
		sub	eax, [edi]
		push	ebp
		and	eax, 0FFFFFFFCh
		push	eax		; size_t
		push	dword ptr [edi]	; void *
		push	esi		; void *
		call	ds:memmove
		mov	ebp, [edi+4]
		add	esp, 0Ch
		sub	ebp, [edi]
		sar	ebp, 2
		cmp	dword ptr [edi], 0
		jz	short loc_100049A3
		push	dword ptr [edi]	; void *
		call	ds:free
		pop	ecx

loc_100049A3:				; CODE XREF: sub_10004947+51j
		lea	eax, [esi+ebx*4]
		mov	[edi], esi
		mov	[edi+8], eax
		lea	eax, [esi+ebp*4]
		pop	ebp
		mov	[edi+4], eax
		pop	edi
		pop	esi
		pop	ebx
		retn	4
sub_10004947	endp


; =============== S U B	R O U T	I N E =======================================


sub_100049B8	proc near		; CODE XREF: sub_100015BE+19Ep
					; sub_100015BE+1C1p
		mov	edx, [ecx+8]
		mov	eax, edx
		push	esi
		mov	esi, [ecx+4]
		sub	eax, esi
		sar	eax, 2
		cmp	eax, 1
		jnb	short loc_10004A0D
		sub	esi, [ecx]
		push	edi
		mov	edi, 3FFFFFFFh
		sar	esi, 2
		mov	eax, edi
		sub	eax, esi
		cmp	eax, 1
		jnb	short loc_100049EA
		push	offset aVectorTTooLong ; "vector<T> too	long"
		call	ds:?moz_Xlength_error@std@@YAXPBD@Z ; std::moz_Xlength_error(char const	*)

loc_100049EA:				; CODE XREF: sub_100049B8+25j
		sub	edx, [ecx]
		inc	esi
		sar	edx, 2
		mov	eax, edx
		shr	eax, 1
		sub	edi, eax
		cmp	edi, edx
		jnb	short loc_100049FE
		xor	edx, edx
		jmp	short loc_10004A00
; ---------------------------------------------------------------------------

loc_100049FE:				; CODE XREF: sub_100049B8+40j
		add	edx, eax

loc_10004A00:				; CODE XREF: sub_100049B8+44j
		cmp	edx, esi
		jnb	short loc_10004A06
		mov	edx, esi

loc_10004A06:				; CODE XREF: sub_100049B8+4Aj
		push	edx
		call	sub_10004947
		pop	edi

loc_10004A0D:				; CODE XREF: sub_100049B8+11j
		pop	esi
		retn	4
sub_100049B8	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	sub_10004A11(int, void *, int)
sub_10004A11	proc near		; CODE XREF: sub_10004250+84p

var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	ecx
		push	esi
		mov	esi, [ebp+arg_4]
		push	edi
		mov	edi, ecx
		mov	eax, [edi]
		cmp	esi, [eax]
		jnz	short loc_10004A63
		cmp	[ebp+arg_8], eax
		jnz	short loc_10004A63
		push	dword ptr [eax+4] ; void *
		call	sub_1000503C
		mov	eax, [edi]
		mov	[eax+4], eax
		mov	eax, [edi]
		mov	[eax], eax
		mov	eax, [edi]
		mov	[eax+8], eax
		mov	eax, [edi]
		and	dword ptr [edi+4], 0
		mov	ecx, [eax]
		mov	eax, [ebp+arg_0]
		mov	[eax], ecx
		jmp	short loc_10004A6D
; ---------------------------------------------------------------------------

loc_10004A4C:				; CODE XREF: sub_10004A11+55j
		lea	ecx, [ebp+arg_4]
		call	sub_1000490D
		push	esi		; void *
		lea	eax, [ebp+var_4]
		mov	ecx, edi
		push	eax		; int
		call	sub_10004CCA
		mov	esi, [ebp+arg_4]

loc_10004A63:				; CODE XREF: sub_10004A11+Fj
					; sub_10004A11+14j
		cmp	esi, [ebp+arg_8]
		jnz	short loc_10004A4C
		mov	eax, [ebp+arg_0]
		mov	[eax], esi

loc_10004A6D:				; CODE XREF: sub_10004A11+39j
		pop	edi
		pop	esi
		mov	esp, ebp
		pop	ebp
		retn	0Ch
sub_10004A11	endp


; =============== S U B	R O U T	I N E =======================================


sub_10004A75	proc near		; CODE XREF: sub_100042E2+28p
					; sub_100042E2+5Bp
		push	ebp
		push	esi
		mov	esi, ecx
		push	edi
		push	18h
		pop	ebp
		mov	edi, [esi+8]
		mov	eax, edi
		mov	ecx, [esi+4]
		sub	eax, ecx
		cdq
		idiv	ebp
		cmp	eax, 1
		jnb	short loc_10004AD9
		sub	ecx, [esi]
		mov	eax, ecx
		cdq
		idiv	ebp
		push	ebx
		mov	ebx, 0AAAAAAAh
		mov	ecx, ebx
		sub	ecx, eax
		cmp	ecx, 1
		jnb	short loc_10004AB0
		push	offset aVectorTTooLong ; "vector<T> too	long"
		call	ds:?moz_Xlength_error@std@@YAXPBD@Z ; std::moz_Xlength_error(char const	*)

loc_10004AB0:				; CODE XREF: sub_10004A75+2Ej
		sub	edi, [esi]
		lea	ecx, [eax+1]
		mov	eax, edi
		cdq
		idiv	ebp
		mov	edx, eax
		shr	edx, 1
		sub	ebx, edx
		cmp	ebx, eax
		jnb	short loc_10004AC8
		xor	eax, eax
		jmp	short loc_10004ACA
; ---------------------------------------------------------------------------

loc_10004AC8:				; CODE XREF: sub_10004A75+4Dj
		add	eax, edx

loc_10004ACA:				; CODE XREF: sub_10004A75+51j
		cmp	eax, ecx
		jnb	short loc_10004AD0
		mov	eax, ecx

loc_10004AD0:				; CODE XREF: sub_10004A75+57j
		push	eax
		mov	ecx, esi
		call	sub_10004EF7
		pop	ebx

loc_10004AD9:				; CODE XREF: sub_10004A75+18j
		pop	edi
		pop	esi
		pop	ebp
		retn	4
sub_10004A75	endp


; =============== S U B	R O U T	I N E =======================================


sub_10004ADF	proc near		; CODE XREF: sub_10004CCA+132p
					; sub_10004CCA+183p ...

arg_0		= dword	ptr  4

		mov	edx, [esp+arg_0]
		push	esi
		mov	esi, [edx+8]
		mov	eax, [esi]
		mov	[edx+8], eax
		mov	eax, [esi]
		cmp	byte ptr [eax+0Dh], 0
		jnz	short loc_10004AF7
		mov	[eax+4], edx

loc_10004AF7:				; CODE XREF: sub_10004ADF+13j
		mov	eax, [edx+4]
		mov	[esi+4], eax
		mov	eax, [ecx]
		cmp	edx, [eax+4]
		jnz	short loc_10004B09
		mov	[eax+4], esi
		jmp	short loc_10004B17
; ---------------------------------------------------------------------------

loc_10004B09:				; CODE XREF: sub_10004ADF+23j
		mov	eax, [edx+4]
		cmp	edx, [eax]
		jnz	short loc_10004B14
		mov	[eax], esi
		jmp	short loc_10004B17
; ---------------------------------------------------------------------------

loc_10004B14:				; CODE XREF: sub_10004ADF+2Fj
		mov	[eax+8], esi

loc_10004B17:				; CODE XREF: sub_10004ADF+28j
					; sub_10004ADF+33j
		mov	[esi], edx
		mov	[edx+4], esi
		pop	esi
		retn	4
sub_10004ADF	endp


; =============== S U B	R O U T	I N E =======================================


sub_10004B20	proc near		; CODE XREF: sub_10004CCA+167p
					; sub_10004CCA+19Bp ...

arg_0		= dword	ptr  4

		mov	edx, [esp+arg_0]
		push	esi
		mov	esi, [edx]
		mov	eax, [esi+8]
		mov	[edx], eax
		mov	eax, [esi+8]
		cmp	byte ptr [eax+0Dh], 0
		jnz	short loc_10004B38
		mov	[eax+4], edx

loc_10004B38:				; CODE XREF: sub_10004B20+13j
		mov	eax, [edx+4]
		mov	[esi+4], eax
		mov	eax, [ecx]
		cmp	edx, [eax+4]
		jnz	short loc_10004B4A
		mov	[eax+4], esi
		jmp	short loc_10004B59
; ---------------------------------------------------------------------------

loc_10004B4A:				; CODE XREF: sub_10004B20+23j
		mov	eax, [edx+4]
		cmp	edx, [eax+8]
		jnz	short loc_10004B57
		mov	[eax+8], esi
		jmp	short loc_10004B59
; ---------------------------------------------------------------------------

loc_10004B57:				; CODE XREF: sub_10004B20+30j
		mov	[eax], esi

loc_10004B59:				; CODE XREF: sub_10004B20+28j
					; sub_10004B20+35j
		mov	[esi+8], edx
		mov	[edx+4], esi
		pop	esi
		retn	4
sub_10004B20	endp


; =============== S U B	R O U T	I N E =======================================


sub_10004B63	proc near		; CODE XREF: sub_1000506F+5Dp
					; sub_10005E45+3Ap

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		push	edi
		mov	edi, ecx
		mov	[edi], esi
		mov	eax, [esi]
		mov	eax, [eax+4]
		mov	ecx, [eax+esi+38h]
		test	ecx, ecx
		jz	short loc_10004B7F
		mov	eax, [ecx]
		call	dword ptr [eax+4]

loc_10004B7F:				; CODE XREF: sub_10004B63+15j
		mov	eax, [esi]
		mov	ecx, [eax+4]
		cmp	dword ptr [ecx+esi+0Ch], 0
		jnz	short loc_10004B9D
		mov	ecx, [ecx+esi+3Ch]
		test	ecx, ecx
		jz	short loc_10004B9D
		cmp	ecx, esi
		jz	short loc_10004B9D
		call	ds:?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ ; std::basic_ostream<char,std::char_traits<char>>::flush(void)

loc_10004B9D:				; CODE XREF: sub_10004B63+26j
					; sub_10004B63+2Ej ...
		mov	eax, [esi]
		mov	eax, [eax+4]
		cmp	dword ptr [eax+esi+0Ch], 0
		setz	al
		mov	[edi+4], al
		mov	eax, edi
		pop	edi
		pop	esi
		retn	4
sub_10004B63	endp


; =============== S U B	R O U T	I N E =======================================


sub_10004BB4	proc near		; CODE XREF: sub_1000506F+139p
					; sub_10005E45+109p
		push	esi
		mov	esi, ecx
		mov	ecx, [esi]
		call	ds:?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ ;	std::basic_ostream<char,std::char_traits<char>>::_Osfx(void)
		mov	ecx, [esi]
		pop	esi
		mov	eax, [ecx]
		mov	eax, [eax+4]
		mov	ecx, [eax+ecx+38h]
		test	ecx, ecx
		jz	short locret_10004BD4
		mov	eax, [ecx]
		jmp	dword ptr [eax+8]
; ---------------------------------------------------------------------------

locret_10004BD4:			; CODE XREF: sub_10004BB4+19j
		retn
sub_10004BB4	endp


; =============== S U B	R O U T	I N E =======================================


sub_10004BD5	proc near		; CODE XREF: sub_100046C6+4Cp

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	edx, [esp+arg_0]
		push	esi
		mov	esi, ecx
		push	edi
		mov	edi, [esi+10h]
		cmp	edi, edx
		jnb	short loc_10004BEF
		push	offset aInvalidStringP ; "invalid string position"
		call	ds:?moz_Xout_of_range@std@@YAXPBD@Z ; std::moz_Xout_of_range(char const	*)

loc_10004BEF:				; CODE XREF: sub_10004BD5+Dj
		mov	eax, edi
		push	ebx
		mov	ebx, [esp+0Ch+arg_4]
		sub	eax, edx
		cmp	eax, ebx
		ja	short loc_10004C11
		cmp	dword ptr [esi+14h], 10h
		mov	[esi+10h], edx
		jb	short loc_10004C09
		mov	eax, [esi]
		jmp	short loc_10004C0B
; ---------------------------------------------------------------------------

loc_10004C09:				; CODE XREF: sub_10004BD5+2Ej
		mov	eax, esi

loc_10004C0B:				; CODE XREF: sub_10004BD5+32j
		mov	byte ptr [eax+edx], 0
		jmp	short loc_10004C47
; ---------------------------------------------------------------------------

loc_10004C11:				; CODE XREF: sub_10004BD5+25j
		test	ebx, ebx
		jz	short loc_10004C47
		cmp	dword ptr [esi+14h], 10h
		jb	short loc_10004C1F
		mov	eax, [esi]
		jmp	short loc_10004C21
; ---------------------------------------------------------------------------

loc_10004C1F:				; CODE XREF: sub_10004BD5+44j
		mov	eax, esi

loc_10004C21:				; CODE XREF: sub_10004BD5+48j
		lea	ecx, [eax+edx]	; void *
		sub	edi, ebx
		mov	eax, edi
		sub	eax, edx
		lea	edx, [ecx+ebx]	; void *
		push	eax		; size_t
		call	sub_100010FA
		cmp	dword ptr [esi+14h], 10h
		pop	ecx
		mov	[esi+10h], edi
		jb	short loc_10004C41
		mov	eax, [esi]
		jmp	short loc_10004C43
; ---------------------------------------------------------------------------

loc_10004C41:				; CODE XREF: sub_10004BD5+66j
		mov	eax, esi

loc_10004C43:				; CODE XREF: sub_10004BD5+6Aj
		mov	byte ptr [eax+edi], 0

loc_10004C47:				; CODE XREF: sub_10004BD5+3Aj
					; sub_10004BD5+3Ej
		pop	ebx
		pop	edi
		mov	eax, esi
		pop	esi
		retn	8
sub_10004BD5	endp


; =============== S U B	R O U T	I N E =======================================


sub_10004C4F	proc near		; CODE XREF: sub_10004592+52p
					; sub_10004630+57p ...

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		cmp	esi, 0FFFFFFFEh
		jbe	short loc_10004C64
		push	offset aStringTooLong ;	"string	too long"
		call	ds:?moz_Xlength_error@std@@YAXPBD@Z ; std::moz_Xlength_error(char const	*)

loc_10004C64:				; CODE XREF: sub_10004C4F+8j
		cmp	[ecx+14h], esi
		jnb	short loc_10004C74
		push	dword ptr [ecx+10h] ; size_t
		push	esi		; int
		call	sub_10004FAE
		jmp	short loc_10004C86
; ---------------------------------------------------------------------------

loc_10004C74:				; CODE XREF: sub_10004C4F+18j
		test	esi, esi
		jnz	short loc_10004C86
		and	[ecx+10h], esi
		cmp	dword ptr [ecx+14h], 10h
		jb	short loc_10004C83
		mov	ecx, [ecx]

loc_10004C83:				; CODE XREF: sub_10004C4F+30j
		mov	byte ptr [ecx],	0

loc_10004C86:				; CODE XREF: sub_10004C4F+23j
					; sub_10004C4F+27j
		xor	eax, eax
		cmp	eax, esi
		pop	esi
		sbb	eax, eax
		neg	eax
		retn	8
sub_10004C4F	endp


; =============== S U B	R O U T	I N E =======================================


sub_10004C92	proc near		; CODE XREF: sub_10004630+9p
					; sub_1000475E+9p

arg_0		= dword	ptr  4

		mov	edx, [esp+arg_0]
		test	edx, edx
		jz	short loc_10004CC5
		cmp	dword ptr [ecx+14h], 10h
		jb	short loc_10004CA4
		mov	eax, [ecx]
		jmp	short loc_10004CA6
; ---------------------------------------------------------------------------

loc_10004CA4:				; CODE XREF: sub_10004C92+Cj
		mov	eax, ecx

loc_10004CA6:				; CODE XREF: sub_10004C92+10j
		cmp	edx, eax
		jb	short loc_10004CC5
		cmp	dword ptr [ecx+14h], 10h
		push	esi
		jb	short loc_10004CB5
		mov	esi, [ecx]
		jmp	short loc_10004CB7
; ---------------------------------------------------------------------------

loc_10004CB5:				; CODE XREF: sub_10004C92+1Dj
		mov	esi, ecx

loc_10004CB7:				; CODE XREF: sub_10004C92+21j
		mov	eax, [ecx+10h]
		add	eax, esi
		pop	esi
		cmp	eax, edx
		jbe	short loc_10004CC5
		mov	al, 1
		jmp	short locret_10004CC7
; ---------------------------------------------------------------------------

loc_10004CC5:				; CODE XREF: sub_10004C92+6j
					; sub_10004C92+16j ...
		xor	al, al

locret_10004CC7:			; CODE XREF: sub_10004C92+31j
		retn	4
sub_10004C92	endp


; =============== S U B	R O U T	I N E =======================================


; int __stdcall	sub_10004CCA(int, void *)
sub_10004CCA	proc near		; CODE XREF: sub_10004A11+4Ap

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebx
		mov	ebx, [esp+4+arg_4]
		push	ebp
		push	esi
		mov	ebp, ecx
		lea	ecx, [esp+0Ch+arg_4]
		push	edi
		call	sub_1000490D
		mov	ecx, [ebx]
		cmp	byte ptr [ecx+0Dh], 0
		jz	short loc_10004CEA
		mov	edi, [ebx+8]
		jmp	short loc_10004D02
; ---------------------------------------------------------------------------

loc_10004CEA:				; CODE XREF: sub_10004CCA+19j
		mov	eax, [ebx+8]
		cmp	byte ptr [eax+0Dh], 0
		jz	short loc_10004CF7
		mov	edi, ecx
		jmp	short loc_10004D02
; ---------------------------------------------------------------------------

loc_10004CF7:				; CODE XREF: sub_10004CCA+27j
		mov	edx, [esp+10h+arg_4]
		mov	edi, [edx+8]
		cmp	edx, ebx
		jnz	short loc_10004D72

loc_10004D02:				; CODE XREF: sub_10004CCA+1Ej
					; sub_10004CCA+2Bj
		cmp	byte ptr [edi+0Dh], 0
		mov	esi, [ebx+4]
		jnz	short loc_10004D0E
		mov	[edi+4], esi

loc_10004D0E:				; CODE XREF: sub_10004CCA+3Fj
		mov	eax, [ebp+0]
		cmp	[eax+4], ebx
		jnz	short loc_10004D1B
		mov	[eax+4], edi
		jmp	short loc_10004D26
; ---------------------------------------------------------------------------

loc_10004D1B:				; CODE XREF: sub_10004CCA+4Aj
		cmp	[esi], ebx
		jnz	short loc_10004D23
		mov	[esi], edi
		jmp	short loc_10004D26
; ---------------------------------------------------------------------------

loc_10004D23:				; CODE XREF: sub_10004CCA+53j
		mov	[esi+8], edi

loc_10004D26:				; CODE XREF: sub_10004CCA+4Fj
					; sub_10004CCA+57j
		mov	edx, [ebp+0]
		cmp	[edx], ebx
		jnz	short loc_10004D49
		cmp	byte ptr [edi+0Dh], 0
		jz	short loc_10004D37
		mov	eax, esi
		jmp	short loc_10004D47
; ---------------------------------------------------------------------------

loc_10004D37:				; CODE XREF: sub_10004CCA+67j
		mov	ecx, [edi]
		mov	eax, edi
		jmp	short loc_10004D41
; ---------------------------------------------------------------------------

loc_10004D3D:				; CODE XREF: sub_10004CCA+7Bj
		mov	eax, ecx
		mov	ecx, [eax]

loc_10004D41:				; CODE XREF: sub_10004CCA+71j
		cmp	byte ptr [ecx+0Dh], 0
		jz	short loc_10004D3D

loc_10004D47:				; CODE XREF: sub_10004CCA+6Bj
		mov	[edx], eax

loc_10004D49:				; CODE XREF: sub_10004CCA+61j
		mov	edx, [ebp+0]
		cmp	[edx+8], ebx
		jnz	short loc_10004DC9
		cmp	byte ptr [edi+0Dh], 0
		jz	short loc_10004D5B
		mov	eax, esi
		jmp	short loc_10004D6D
; ---------------------------------------------------------------------------

loc_10004D5B:				; CODE XREF: sub_10004CCA+8Bj
		mov	ecx, [edi+8]
		mov	eax, edi
		jmp	short loc_10004D67
; ---------------------------------------------------------------------------

loc_10004D62:				; CODE XREF: sub_10004CCA+A1j
		mov	eax, ecx
		mov	ecx, [eax+8]

loc_10004D67:				; CODE XREF: sub_10004CCA+96j
		cmp	byte ptr [ecx+0Dh], 0
		jz	short loc_10004D62

loc_10004D6D:				; CODE XREF: sub_10004CCA+8Fj
		mov	[edx+8], eax
		jmp	short loc_10004DC9
; ---------------------------------------------------------------------------

loc_10004D72:				; CODE XREF: sub_10004CCA+36j
		mov	[ecx+4], edx
		mov	eax, [ebx]
		mov	[edx], eax
		cmp	edx, [ebx+8]
		jnz	short loc_10004D82
		mov	esi, edx
		jmp	short loc_10004D9C
; ---------------------------------------------------------------------------

loc_10004D82:				; CODE XREF: sub_10004CCA+B2j
		cmp	byte ptr [edi+0Dh], 0
		mov	esi, [edx+4]
		jnz	short loc_10004D8E
		mov	[edi+4], esi

loc_10004D8E:				; CODE XREF: sub_10004CCA+BFj
		mov	[esi], edi
		mov	eax, [ebx+8]
		mov	[edx+8], eax
		mov	eax, [ebx+8]
		mov	[eax+4], edx

loc_10004D9C:				; CODE XREF: sub_10004CCA+B6j
		mov	eax, [ebp+0]
		cmp	[eax+4], ebx
		jnz	short loc_10004DA9
		mov	[eax+4], edx
		jmp	short loc_10004DB7
; ---------------------------------------------------------------------------

loc_10004DA9:				; CODE XREF: sub_10004CCA+D8j
		mov	eax, [ebx+4]
		cmp	[eax], ebx
		jnz	short loc_10004DB4
		mov	[eax], edx
		jmp	short loc_10004DB7
; ---------------------------------------------------------------------------

loc_10004DB4:				; CODE XREF: sub_10004CCA+E4j
		mov	[eax+8], edx

loc_10004DB7:				; CODE XREF: sub_10004CCA+DDj
					; sub_10004CCA+E8j
		mov	eax, [ebx+4]
		mov	[edx+4], eax
		mov	al, [ebx+0Ch]
		mov	cl, [edx+0Ch]
		mov	[edx+0Ch], al
		mov	[ebx+0Ch], cl

loc_10004DC9:				; CODE XREF: sub_10004CCA+85j
					; sub_10004CCA+A6j
		cmp	byte ptr [ebx+0Ch], 1
		jnz	loc_10004ED3
		jmp	loc_10004E8C
; ---------------------------------------------------------------------------

loc_10004DD8:				; CODE XREF: sub_10004CCA+1C8j
		cmp	byte ptr [edi+0Ch], 1
		jnz	loc_10004ECF
		mov	ecx, [esi]
		cmp	edi, ecx
		jnz	short loc_10004E54
		mov	ecx, [esi+8]
		cmp	byte ptr [ecx+0Ch], 0
		jnz	short loc_10004E04
		mov	byte ptr [ecx+0Ch], 1
		mov	ecx, ebp
		push	esi
		mov	byte ptr [esi+0Ch], 0
		call	sub_10004ADF
		mov	ecx, [esi+8]

loc_10004E04:				; CODE XREF: sub_10004CCA+125j
		cmp	byte ptr [ecx+0Dh], 0
		jnz	short loc_10004E87
		mov	eax, [ecx]
		cmp	byte ptr [eax+0Ch], 1
		jnz	short loc_10004E1B
		mov	eax, [ecx+8]
		cmp	byte ptr [eax+0Ch], 1
		jz	short loc_10004E83

loc_10004E1B:				; CODE XREF: sub_10004CCA+146j
		mov	eax, [ecx+8]
		cmp	byte ptr [eax+0Ch], 1
		jnz	short loc_10004E39
		mov	eax, [ecx]
		push	ecx
		mov	byte ptr [eax+0Ch], 1
		mov	byte ptr [ecx+0Ch], 0
		mov	ecx, ebp
		call	sub_10004B20
		mov	ecx, [esi+8]

loc_10004E39:				; CODE XREF: sub_10004CCA+158j
		mov	al, [esi+0Ch]
		mov	[ecx+0Ch], al
		mov	byte ptr [esi+0Ch], 1
		mov	eax, [ecx+8]
		mov	ecx, ebp
		push	esi
		mov	byte ptr [eax+0Ch], 1
		call	sub_10004ADF
		jmp	short loc_10004ECF
; ---------------------------------------------------------------------------

loc_10004E54:				; CODE XREF: sub_10004CCA+11Cj
		cmp	byte ptr [ecx+0Ch], 0
		jnz	short loc_10004E6C
		mov	byte ptr [ecx+0Ch], 1
		mov	ecx, ebp
		push	esi
		mov	byte ptr [esi+0Ch], 0
		call	sub_10004B20
		mov	ecx, [esi]

loc_10004E6C:				; CODE XREF: sub_10004CCA+18Ej
		cmp	byte ptr [ecx+0Dh], 0
		jnz	short loc_10004E87
		mov	eax, [ecx+8]
		cmp	byte ptr [eax+0Ch], 1
		jnz	short loc_10004E9A
		mov	eax, [ecx]
		cmp	byte ptr [eax+0Ch], 1
		jnz	short loc_10004E9A

loc_10004E83:				; CODE XREF: sub_10004CCA+14Fj
		mov	byte ptr [ecx+0Ch], 0

loc_10004E87:				; CODE XREF: sub_10004CCA+13Ej
					; sub_10004CCA+1A6j
		mov	edi, esi
		mov	esi, [esi+4]

loc_10004E8C:				; CODE XREF: sub_10004CCA+109j
		mov	eax, [ebp+0]
		cmp	edi, [eax+4]
		jnz	loc_10004DD8
		jmp	short loc_10004ECF
; ---------------------------------------------------------------------------

loc_10004E9A:				; CODE XREF: sub_10004CCA+1AFj
					; sub_10004CCA+1B7j
		mov	eax, [ecx]
		cmp	byte ptr [eax+0Ch], 1
		jnz	short loc_10004EB7
		mov	eax, [ecx+8]
		push	ecx
		mov	byte ptr [eax+0Ch], 1
		mov	byte ptr [ecx+0Ch], 0
		mov	ecx, ebp
		call	sub_10004ADF
		mov	ecx, [esi]

loc_10004EB7:				; CODE XREF: sub_10004CCA+1D6j
		mov	al, [esi+0Ch]
		mov	[ecx+0Ch], al
		mov	byte ptr [esi+0Ch], 1
		mov	eax, [ecx]
		mov	ecx, ebp
		push	esi
		mov	byte ptr [eax+0Ch], 1
		call	sub_10004B20

loc_10004ECF:				; CODE XREF: sub_10004CCA+112j
					; sub_10004CCA+188j ...
		mov	byte ptr [edi+0Ch], 1

loc_10004ED3:				; CODE XREF: sub_10004CCA+103j
		push	ebx		; void *
		call	ds:free
		mov	eax, [ebp+4]
		pop	ecx
		test	eax, eax
		jz	short loc_10004EE6
		dec	eax
		mov	[ebp+4], eax

loc_10004EE6:				; CODE XREF: sub_10004CCA+216j
		mov	eax, [esp+10h+arg_0]
		mov	ecx, [esp+10h+arg_4]
		pop	edi
		pop	esi
		pop	ebp
		mov	[eax], ecx
		pop	ebx
		retn	8
sub_10004CCA	endp


; =============== S U B	R O U T	I N E =======================================


sub_10004EF7	proc near		; CODE XREF: sub_10004A75+5Ep

var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		push	ecx
		mov	eax, [esp+4+arg_0]
		push	esi
		push	edi
		xor	edi, edi
		mov	esi, ecx
		test	eax, eax
		jz	short loc_10004F24
		cmp	eax, 0AAAAAAAh
		ja	short loc_10004F1E
		imul	eax, 18h
		push	eax
		call	ds:moz_xmalloc
		mov	edi, eax
		pop	ecx
		test	edi, edi
		jnz	short loc_10004F24

loc_10004F1E:				; CODE XREF: sub_10004EF7+14j
		call	ds:?_Xbad_alloc@std@@YAXXZ ; std::_Xbad_alloc(void)

loc_10004F24:				; CODE XREF: sub_10004EF7+Dj
					; sub_10004EF7+25j
		mov	eax, [esi+4]
		push	ebx
		push	ebp
		mov	ebp, [esi]
		mov	ebx, edi
		push	18h
		mov	[esp+18h+var_4], eax
		pop	ecx
		jmp	short loc_10004F5B
; ---------------------------------------------------------------------------

loc_10004F36:				; CODE XREF: sub_10004EF7+66j
		test	ebx, ebx
		jz	short loc_10004F57
		and	dword ptr [ebx+10h], 0
		mov	ecx, ebx
		mov	dword ptr [ebx+14h], 0Fh
		push	ebp		; void *
		mov	byte ptr [ebx],	0
		call	sub_1000454B
		mov	eax, [esp+14h+var_4]
		push	18h
		pop	ecx

loc_10004F57:				; CODE XREF: sub_10004EF7+41j
		add	ebx, ecx
		add	ebp, ecx

loc_10004F5B:				; CODE XREF: sub_10004EF7+3Dj
		cmp	ebp, eax
		jnz	short loc_10004F36
		mov	ebp, [esi+4]
		mov	eax, ebp
		mov	ebx, [esi]
		sub	eax, ebx
		cdq
		idiv	ecx
		mov	[esp+14h+var_4], eax
		test	ebx, ebx
		jz	short loc_10004F90
		jmp	short loc_10004F83
; ---------------------------------------------------------------------------

loc_10004F75:				; CODE XREF: sub_10004EF7+8Ej
		push	0		; size_t
		push	1		; char
		mov	ecx, ebx
		call	sub_100047F8
		add	ebx, 18h

loc_10004F83:				; CODE XREF: sub_10004EF7+7Cj
		cmp	ebx, ebp
		jnz	short loc_10004F75
		push	dword ptr [esi]	; void *
		call	ds:free
		pop	ecx

loc_10004F90:				; CODE XREF: sub_10004EF7+7Aj
		imul	eax, [esp+14h+arg_0], 18h
		pop	ebp
		pop	ebx
		mov	[esi], edi
		add	eax, edi
		mov	[esi+8], eax
		imul	eax, [esp+0Ch+var_4], 18h
		add	eax, edi
		pop	edi
		mov	[esi+4], eax
		pop	esi
		pop	ecx
		retn	4
sub_10004EF7	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_10004FAE(void *, int, size_t)
sub_10004FAE	proc near		; CODE XREF: sub_10004C4F+1Ep

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebx
		push	ebp
		push	esi
		push	edi
		mov	edi, [esp+10h+arg_0]
		mov	esi, ecx
		or	edi, 0Fh
		cmp	edi, 0FFFFFFFEh
		jbe	short loc_10004FC6
		mov	edi, [esp+10h+arg_0]
		jmp	short loc_10004FEB
; ---------------------------------------------------------------------------

loc_10004FC6:				; CODE XREF: sub_10004FAE+10j
		push	3
		xor	edx, edx
		mov	ebx, [esi+14h]
		mov	eax, edi
		mov	ecx, ebx
		pop	ebp
		div	ebp
		shr	ecx, 1
		cmp	ecx, eax
		jbe	short loc_10004FEB
		push	0FFFFFFFEh
		pop	eax
		sub	eax, ecx
		cmp	ebx, eax
		ja	short loc_10004FE8
		lea	edi, [ecx+ebx]
		jmp	short loc_10004FEB
; ---------------------------------------------------------------------------

loc_10004FE8:				; CODE XREF: sub_10004FAE+33j
		push	0FFFFFFFEh
		pop	edi

loc_10004FEB:				; CODE XREF: sub_10004FAE+16j
					; sub_10004FAE+2Aj ...
		lea	eax, [edi+1]
		push	eax
		call	sub_10004839
		mov	ebx, [esp+10h+arg_4]
		mov	ebp, eax
		test	ebx, ebx
		jz	short loc_10005013
		cmp	dword ptr [esi+14h], 10h
		jb	short loc_10005008
		mov	edx, [esi]
		jmp	short loc_1000500A
; ---------------------------------------------------------------------------

loc_10005008:				; CODE XREF: sub_10004FAE+54j
		mov	edx, esi	; void *

loc_1000500A:				; CODE XREF: sub_10004FAE+58j
		push	ebx		; size_t
		mov	ecx, ebp	; void *
		call	sub_100010E0
		pop	ecx

loc_10005013:				; CODE XREF: sub_10004FAE+4Ej
		push	0		; size_t
		push	1		; char
		mov	ecx, esi
		call	sub_100047F8
		test	esi, esi
		jz	short loc_10005024
		mov	[esi], ebp

loc_10005024:				; CODE XREF: sub_10004FAE+72j
		mov	[esi+14h], edi
		mov	[esi+10h], ebx
		cmp	edi, 10h
		jb	short loc_10005031
		mov	esi, [esi]

loc_10005031:				; CODE XREF: sub_10004FAE+7Fj
		pop	edi
		mov	byte ptr [esi+ebx], 0
		pop	esi
		pop	ebp
		pop	ebx
		retn	8
sub_10004FAE	endp


; =============== S U B	R O U T	I N E =======================================


; int __stdcall	sub_1000503C(void *)
sub_1000503C	proc near		; CODE XREF: sub_10004226+8p
					; sub_100043E6+Dp ...

arg_0		= dword	ptr  4

		push	ebx
		push	esi
		push	edi
		mov	edi, [esp+0Ch+arg_0]
		mov	ebx, ecx
		mov	esi, edi
		cmp	byte ptr [edi+0Dh], 0
		jnz	short loc_10005069

loc_1000504D:				; CODE XREF: sub_1000503C+2Bj
		push	dword ptr [esi+8] ; void *
		mov	ecx, ebx
		call	sub_1000503C
		mov	esi, [esi]
		push	edi		; void *
		call	ds:free
		cmp	byte ptr [esi+0Dh], 0
		mov	edi, esi
		pop	ecx
		jz	short loc_1000504D

loc_10005069:				; CODE XREF: sub_1000503C+Fj
		pop	edi
		pop	esi
		pop	ebx
		retn	4
sub_1000503C	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000506F	proc near		; CODE XREF: sub_10005221+34p

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= byte ptr -0Ch
var_8		= byte ptr -8

		sub	esp, 1Ch
		and	[esp+1Ch+var_18], 0
		mov	eax, edx
		push	ebx
		push	ebp
		push	esi
		cmp	byte ptr [eax],	0
		mov	esi, ecx
		push	edi
		mov	[esp+2Ch+var_10], eax
		jnz	short loc_1000508C
		xor	ebp, ebp
		jmp	short loc_1000509B
; ---------------------------------------------------------------------------

loc_1000508C:				; CODE XREF: sub_1000506F+17j
		mov	ebp, eax
		lea	ecx, [ebp+1]

loc_10005091:				; CODE XREF: sub_1000506F+28j
		mov	al, [ebp+0]
		inc	ebp
		test	al, al
		jnz	short loc_10005091
		sub	ebp, ecx

loc_1000509B:				; CODE XREF: sub_1000506F+1Bj
		mov	eax, [esi]
		mov	eax, [eax+4]
		mov	ebx, [eax+esi+24h]
		mov	edi, [eax+esi+20h]
		test	ebx, ebx
		jl	short loc_100050C3
		jg	short loc_100050BC
		test	edi, edi
		jz	short loc_100050C3
		test	ebx, ebx
		jl	short loc_100050C3
		jg	short loc_100050BC
		cmp	edi, ebp
		jbe	short loc_100050C3

loc_100050BC:				; CODE XREF: sub_1000506F+3Dj
					; sub_1000506F+47j
		sub	edi, ebp
		sbb	ebx, 0
		jmp	short loc_100050C7
; ---------------------------------------------------------------------------

loc_100050C3:				; CODE XREF: sub_1000506F+3Bj
					; sub_1000506F+41j ...
		xor	edi, edi
		xor	ebx, ebx

loc_100050C7:				; CODE XREF: sub_1000506F+52j
		push	esi
		lea	ecx, [esp+30h+var_C]
		call	sub_10004B63
		cmp	[esp+2Ch+var_8], 0
		jnz	short loc_100050E0
		push	4
		pop	ecx
		jmp	loc_10005194
; ---------------------------------------------------------------------------

loc_100050E0:				; CODE XREF: sub_1000506F+67j
		mov	eax, [esi]
		mov	eax, [eax+4]
		mov	eax, [eax+esi+14h]
		and	eax, 1C0h
		cmp	eax, 40h
		jz	short loc_1000512D
		test	ebx, ebx
		jl	short loc_1000512D
		jle	short loc_10005129

loc_100050F9:				; CODE XREF: sub_1000506F+B6j
					; sub_1000506F+BCj
		mov	eax, [esi]
		mov	ecx, [eax+4]
		mov	al, [ecx+esi+40h]
		mov	ecx, [ecx+esi+38h]
		mov	byte ptr [esp+2Ch+var_14], al
		push	[esp+2Ch+var_14]
		call	ds:?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z ; std::basic_streambuf<char,std::char_traits<char>>::sputc(char)
		cmp	eax, 0FFFFFFFFh
		jz	loc_100051B7
		add	edi, 0FFFFFFFFh
		adc	ebx, 0FFFFFFFFh
		test	ebx, ebx
		jg	short loc_100050F9
		jl	short loc_1000512D

loc_10005129:				; CODE XREF: sub_1000506F+88j
		test	edi, edi
		jnz	short loc_100050F9

loc_1000512D:				; CODE XREF: sub_1000506F+82j
					; sub_1000506F+86j ...
		mov	eax, [esi]
		push	0
		push	ebp
		push	[esp+34h+var_10]
		mov	eax, [eax+4]
		mov	ecx, [eax+esi+38h]
		call	ds:?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z ;	std::basic_streambuf<char,std::char_traits<char>>::sputn(char const *,__int64)
		cmp	eax, ebp
		jnz	short loc_100051B7
		test	edx, edx
		jnz	short loc_100051B7
		test	ebx, ebx
		jl	short loc_10005181
		jle	short loc_1000517D

loc_10005151:				; CODE XREF: sub_1000506F+10Aj
					; sub_1000506F+110j
		mov	eax, [esi]
		mov	ecx, [eax+4]
		mov	al, [ecx+esi+40h]
		mov	ecx, [ecx+esi+38h]
		mov	byte ptr [esp+2Ch+var_10], al
		push	[esp+2Ch+var_10]
		call	ds:?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z ; std::basic_streambuf<char,std::char_traits<char>>::sputc(char)
		cmp	eax, 0FFFFFFFFh
		jz	short loc_100051B7
		add	edi, 0FFFFFFFFh
		adc	ebx, 0FFFFFFFFh
		test	ebx, ebx
		jg	short loc_10005151
		jl	short loc_10005181

loc_1000517D:				; CODE XREF: sub_1000506F+E0j
		test	edi, edi
		jnz	short loc_10005151

loc_10005181:				; CODE XREF: sub_1000506F+DEj
					; sub_1000506F+10Cj
		mov	ecx, [esp+2Ch+var_18]

loc_10005185:				; CODE XREF: sub_1000506F+14Bj
		mov	eax, [esi]
		mov	eax, [eax+4]
		and	dword ptr [eax+esi+20h], 0
		and	dword ptr [eax+esi+24h], 0

loc_10005194:				; CODE XREF: sub_1000506F+6Cj
		mov	eax, [esi]
		push	0
		push	ecx
		mov	ecx, [eax+4]
		add	ecx, esi
		call	ds:?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z	; std::basic_ios<char,std::char_traits<char>>::setstate(int,bool)
		lea	ecx, [esp+2Ch+var_C]
		call	sub_10004BB4
		pop	edi
		mov	eax, esi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------

loc_100051B7:				; CODE XREF: sub_1000506F+A8j
					; sub_1000506F+D6j ...
		push	4
		pop	ecx
		jmp	short loc_10005185
sub_1000506F	endp


; =============== S U B	R O U T	I N E =======================================


sub_100051BC	proc near		; CODE XREF: sub_1000193C+5Dp

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		push	18h
		mov	esi, ecx
		call	ds:moz_xmalloc
		mov	edx, eax
		pop	ecx
		test	edx, edx
		jnz	short loc_100051D4
		call	ds:?_Xbad_alloc@std@@YAXXZ ; std::_Xbad_alloc(void)

loc_100051D4:				; CODE XREF: sub_100051BC+10j
		mov	eax, [esi]
		lea	ecx, [edx+4]
		mov	[edx], eax
		test	ecx, ecx
		jz	short loc_100051E3
		mov	eax, [esi]
		mov	[ecx], eax

loc_100051E3:				; CODE XREF: sub_100051BC+21j
		lea	ecx, [edx+8]
		test	ecx, ecx
		jz	short loc_100051EE
		mov	eax, [esi]
		mov	[ecx], eax

loc_100051EE:				; CODE XREF: sub_100051BC+2Cj
		push	edi
		lea	edi, [edx+10h]
		mov	word ptr [edx+0Ch], 0
		test	edi, edi
		jz	short loc_1000520A
		mov	ecx, [esp+8+arg_4]
		mov	eax, [ecx]
		mov	[edi], eax
		mov	eax, [ecx+4]
		mov	[edi+4], eax

loc_1000520A:				; CODE XREF: sub_100051BC+3Ej
		push	edx		; void *
		push	edi		; int
		push	ecx		; int
		push	[esp+14h+arg_0]	; int
		mov	ecx, esi
		call	sub_1000552E
		mov	eax, [esp+8+arg_0]
		pop	edi
		pop	esi
		retn	8
sub_100051BC	endp


; =============== S U B	R O U T	I N E =======================================


sub_10005221	proc near		; CODE XREF: sub_10002370+126p
					; sub_100024DF+21Bp

var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 0Ch
		mov	eax, [esp+0Ch+arg_4]
		push	ebx
		mov	ebx, [esp+10h+arg_8]
		push	ebp
		mov	ebp, [esp+14h+arg_C]
		push	esi
		mov	esi, [esp+18h+arg_0]
		push	edi
		mov	edi, ecx
		mov	[esp+1Ch+var_4], edi
		cmp	esi, eax
		jz	short loc_10005265
		mov	edi, eax

loc_10005244:				; CODE XREF: sub_10005221+3Ej
		mov	edx, esi
		mov	ecx, ebp
		call	sub_10005E45
		test	ebx, ebx
		jz	short loc_1000525A
		mov	edx, ebx
		mov	ecx, ebp
		call	sub_1000506F

loc_1000525A:				; CODE XREF: sub_10005221+2Ej
		add	esi, 18h
		cmp	esi, edi
		jnz	short loc_10005244
		mov	edi, [esp+1Ch+var_4]

loc_10005265:				; CODE XREF: sub_10005221+1Fj
		mov	[edi], ebx
		mov	eax, edi
		mov	[edi+4], ebp
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 0Ch
		retn
sub_10005221	endp


; =============== S U B	R O U T	I N E =======================================


sub_10005274	proc near		; CODE XREF: sub_10001A4E+E4p
					; sub_10001A4E+13Bp

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ecx
		push	ecx
		push	ebx
		mov	ebx, ecx
		mov	al, 1
		push	ebp
		push	esi
		push	edi
		mov	ebp, [ebx]
		mov	edi, ebp
		mov	byte ptr [esp+18h+var_4], al
		mov	esi, [ebp+4]
		jmp	short loc_100052AC
; ---------------------------------------------------------------------------

loc_1000528B:				; CODE XREF: sub_10005274+3Cj
		lea	eax, [esi+10h]
		mov	edi, esi
		push	eax
		push	[esp+1Ch+arg_8]
		lea	ecx, [ebx+8]
		call	sub_100014AC
		mov	byte ptr [esp+18h+var_4], al
		test	al, al
		jz	short loc_100052A9
		mov	esi, [esi]
		jmp	short loc_100052AC
; ---------------------------------------------------------------------------

loc_100052A9:				; CODE XREF: sub_10005274+2Fj
		mov	esi, [esi+8]

loc_100052AC:				; CODE XREF: sub_10005274+15j
					; sub_10005274+33j
		cmp	byte ptr [esi+0Dh], 0
		jz	short loc_1000528B
		mov	esi, edi
		mov	[esp+18h+var_8], esi
		test	al, al
		jz	short loc_100052F3
		cmp	edi, [ebp+0]
		jnz	short loc_100052E6
		push	[esp+18h+arg_C]
		push	[esp+1Ch+arg_8]
		push	edi
		push	1

loc_100052CC:				; CODE XREF: sub_10005274+A0j
		lea	eax, [esp+28h+arg_8]
		mov	ecx, ebx
		push	eax
		call	sub_100055D5
		mov	ecx, [eax]
		mov	eax, [esp+18h+arg_0]
		mov	[eax], ecx
		mov	byte ptr [eax+4], 1
		jmp	short loc_10005320
; ---------------------------------------------------------------------------

loc_100052E6:				; CODE XREF: sub_10005274+4Bj
		lea	ecx, [esp+18h+var_8]
		call	sub_100053CA
		mov	esi, [esp+18h+var_8]

loc_100052F3:				; CODE XREF: sub_10005274+46j
		push	[esp+18h+arg_8]
		lea	eax, [esi+10h]
		push	eax
		lea	ecx, [ebx+8]
		call	sub_100014AC
		test	al, al
		jz	short loc_10005316
		push	[esp+18h+arg_C]
		push	[esp+1Ch+arg_8]
		push	edi
		push	[esp+24h+var_4]
		jmp	short loc_100052CC
; ---------------------------------------------------------------------------

loc_10005316:				; CODE XREF: sub_10005274+91j
		mov	eax, [esp+18h+arg_0]
		mov	[eax], esi
		mov	byte ptr [eax+4], 0

loc_10005320:				; CODE XREF: sub_10005274+70j
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		pop	ecx
		pop	ecx
		retn	10h
sub_10005274	endp


; =============== S U B	R O U T	I N E =======================================


sub_10005329	proc near		; CODE XREF: sub_10001DDA+187p
					; sub_10001F7D+1D7p ...

var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ecx
		push	ebx
		mov	ebx, ecx
		mov	dl, 1
		push	esi
		push	edi
		mov	edi, [esp+10h+arg_8]
		mov	ecx, [ebx]
		mov	esi, ecx
		mov	byte ptr [esp+10h+var_4], dl
		mov	eax, [ecx+4]
		cmp	byte ptr [eax+0Dh], 0
		jnz	short loc_10005367
		push	ebp
		mov	ebp, [edi]

loc_10005349:				; CODE XREF: sub_10005329+3Bj
		cmp	ebp, [eax+10h]
		mov	esi, eax
		setb	dl
		mov	byte ptr [esp+14h+var_4], dl
		test	dl, dl
		jz	short loc_1000535D
		mov	eax, [eax]
		jmp	short loc_10005360
; ---------------------------------------------------------------------------

loc_1000535D:				; CODE XREF: sub_10005329+2Ej
		mov	eax, [eax+8]

loc_10005360:				; CODE XREF: sub_10005329+32j
		cmp	byte ptr [eax+0Dh], 0
		jz	short loc_10005349
		pop	ebp

loc_10005367:				; CODE XREF: sub_10005329+1Bj
		mov	eax, esi
		mov	[esp+10h+arg_8], eax
		test	dl, dl
		jz	short loc_100053A4
		cmp	esi, [ecx]
		jnz	short loc_10005397
		push	[esp+10h+arg_C]
		push	edi
		push	esi
		push	1

loc_1000537D:				; CODE XREF: sub_10005329+8Cj
		lea	eax, [esp+20h+arg_8]
		mov	ecx, ebx
		push	eax
		call	sub_100056F6
		mov	ecx, [eax]
		mov	eax, [esp+10h+arg_0]
		mov	[eax], ecx
		mov	byte ptr [eax+4], 1
		jmp	short loc_100053C3
; ---------------------------------------------------------------------------

loc_10005397:				; CODE XREF: sub_10005329+4Aj
		lea	ecx, [esp+10h+arg_8]
		call	sub_100053CA
		mov	eax, [esp+10h+arg_8]

loc_100053A4:				; CODE XREF: sub_10005329+46j
		mov	ecx, [eax+10h]
		cmp	ecx, [edi]
		jnb	short loc_100053B7
		push	[esp+10h+arg_C]
		push	edi
		push	esi
		push	[esp+1Ch+var_4]
		jmp	short loc_1000537D
; ---------------------------------------------------------------------------

loc_100053B7:				; CODE XREF: sub_10005329+80j
		mov	ecx, [esp+10h+arg_0]
		mov	[ecx], eax
		mov	eax, ecx
		mov	byte ptr [ecx+4], 0

loc_100053C3:				; CODE XREF: sub_10005329+6Cj
		pop	edi
		pop	esi
		pop	ebx
		pop	ecx
		retn	10h
sub_10005329	endp


; =============== S U B	R O U T	I N E =======================================


sub_100053CA	proc near		; CODE XREF: sub_10005274+76p
					; sub_10005329+72p ...
		mov	edx, [ecx]
		cmp	byte ptr [edx+0Dh], 0
		jz	short loc_100053D7
		mov	eax, [edx+8]
		jmp	short loc_100053EC
; ---------------------------------------------------------------------------

loc_100053D7:				; CODE XREF: sub_100053CA+6j
		mov	eax, [edx]
		cmp	byte ptr [eax+0Dh], 0
		jnz	short loc_100053F8
		jmp	short loc_100053E3
; ---------------------------------------------------------------------------

loc_100053E1:				; CODE XREF: sub_100053CA+20j
		mov	eax, edx

loc_100053E3:				; CODE XREF: sub_100053CA+15j
		mov	edx, [eax+8]
		cmp	byte ptr [edx+0Dh], 0
		jz	short loc_100053E1

loc_100053EC:				; CODE XREF: sub_100053CA+Bj
		mov	[ecx], eax
		jmp	short loc_1000540B
; ---------------------------------------------------------------------------

loc_100053F0:				; CODE XREF: sub_100053CA+35j
		mov	eax, [ecx]
		cmp	eax, [edx]
		jnz	short loc_10005401
		mov	[ecx], edx

loc_100053F8:				; CODE XREF: sub_100053CA+13j
		mov	edx, [edx+4]
		cmp	byte ptr [edx+0Dh], 0
		jz	short loc_100053F0

loc_10005401:				; CODE XREF: sub_100053CA+2Aj
		mov	eax, [ecx]
		cmp	byte ptr [eax+0Dh], 0
		jnz	short loc_1000540B
		mov	[ecx], edx

loc_1000540B:				; CODE XREF: sub_100053CA+24j
					; sub_100053CA+3Dj
		mov	eax, ecx
		retn
sub_100053CA	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_1000540E	proc near		; CODE XREF: sub_100015BE+224p
					; sub_1000540E+87p ...

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		and	esp, 0FFFFFFF8h
		sub	esp, 0Ch
		push	ebx
		push	esi
		push	edi
		mov	edi, edx
		mov	ebx, ecx
		mov	eax, edi
		sub	eax, ebx
		sar	eax, 2
		cmp	eax, 20h
		jle	loc_10005506
		mov	esi, [ebp+arg_0]

loc_10005431:				; CODE XREF: sub_1000540E+B9j
		test	esi, esi
		jle	loc_100054CD
		push	ecx
		push	ecx
		mov	ecx, [ebp+arg_4]
		mov	edx, esp
		push	edi
		mov	[edx], ecx
		mov	ecx, [ebp+arg_8]
		mov	[edx+4], cl
		mov	edx, ebx
		lea	ecx, [esp+24h+var_8]
		call	sub_10005817
		mov	eax, esi
		add	esp, 0Ch
		cdq
		mov	ecx, edi
		sub	ecx, [esp+18h+var_4]
		sub	eax, edx
		mov	esi, eax
		and	ecx, 0FFFFFFFCh
		sar	esi, 1
		mov	eax, esi
		cdq
		sub	eax, edx
		sar	eax, 1
		add	esi, eax
		mov	eax, [esp+18h+var_8]
		sub	eax, ebx
		and	eax, 0FFFFFFFCh
		push	ecx
		cmp	eax, ecx
		mov	eax, [ebp+arg_4]
		push	ecx
		jge	short loc_100054A0
		mov	edx, [esp+20h+var_8]
		mov	ecx, esp
		push	esi		; char
		mov	[ecx], eax
		mov	eax, [ebp+arg_8]
		mov	[ecx+4], al
		mov	ecx, ebx
		call	sub_1000540E
		mov	ebx, [esp+24h+var_4]
		jmp	short loc_100054BA
; ---------------------------------------------------------------------------

loc_100054A0:				; CODE XREF: sub_1000540E+74j
		mov	ecx, [esp+20h+var_4]
		mov	edx, esp
		push	esi
		mov	[edx], eax
		mov	eax, [ebp+arg_8]
		mov	[edx+4], al
		mov	edx, edi
		call	sub_1000540E
		mov	edi, [esp+24h+var_8]

loc_100054BA:				; CODE XREF: sub_1000540E+90j
		mov	eax, edi
		add	esp, 0Ch
		sub	eax, ebx
		sar	eax, 2
		cmp	eax, 20h
		jg	loc_10005431

loc_100054CD:				; CODE XREF: sub_1000540E+25j
		mov	[esp+18h+var_8], ebx
		cmp	eax, 20h
		jle	short loc_10005506
		mov	esi, [ebp+arg_4]
		mov	edx, edi
		mov	bl, byte ptr [ebp+arg_8]
		push	ecx
		push	ecx
		mov	ecx, [esp+20h+var_8]
		mov	eax, esp
		mov	[eax], esi
		mov	[eax+4], bl
		call	sub_10005A25
		mov	ecx, [esp+20h+var_8]
		mov	eax, esp
		mov	edx, edi
		mov	[eax], esi
		mov	[eax+4], bl
		call	sub_10005A7A
		pop	ecx
		pop	ecx
		jmp	short loc_10005527
; ---------------------------------------------------------------------------

loc_10005506:				; CODE XREF: sub_1000540E+1Aj
					; sub_1000540E+C6j
		cmp	eax, 1
		jle	short loc_10005527
		mov	eax, [ebp+arg_4]
		sub	esp, 0Ch
		mov	ecx, esp
		mov	edx, edi
		mov	[ecx], eax
		mov	eax, [ebp+arg_8]
		mov	[ecx+4], al
		mov	ecx, ebx	; void *
		call	sub_10005D6C
		add	esp, 0Ch

loc_10005527:				; CODE XREF: sub_1000540E+F6j
					; sub_1000540E+FBj
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
sub_1000540E	endp


; =============== S U B	R O U T	I N E =======================================


; int __stdcall	sub_1000552E(int, int, int, void *)
sub_1000552E	proc near		; CODE XREF: sub_100051BC+57p

var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ecx
		push	ebx
		mov	ebx, [esp+8+arg_8]
		mov	dl, 1
		push	ebp
		mov	ebp, ecx
		mov	byte ptr [esp+0Ch+var_4], dl
		push	esi
		push	edi
		mov	ecx, [ebp+0]
		mov	edi, ecx
		mov	eax, [ecx+4]
		cmp	byte ptr [eax+0Dh], 0
		jnz	short loc_1000556C
		mov	esi, [ebx]

loc_1000554F:				; CODE XREF: sub_1000552E+3Cj
		cmp	esi, [eax+10h]
		mov	edi, eax
		setb	dl
		mov	byte ptr [esp+14h+var_4], dl
		test	dl, dl
		jz	short loc_10005563
		mov	eax, [eax]
		jmp	short loc_10005566
; ---------------------------------------------------------------------------

loc_10005563:				; CODE XREF: sub_1000552E+2Fj
		mov	eax, [eax+8]

loc_10005566:				; CODE XREF: sub_1000552E+33j
		cmp	byte ptr [eax+0Dh], 0
		jz	short loc_1000554F

loc_1000556C:				; CODE XREF: sub_1000552E+1Dj
		mov	esi, edi
		mov	[esp+14h+arg_8], esi
		test	dl, dl
		jz	short loc_100055A9
		cmp	edi, [ecx]
		jnz	short loc_1000559C
		push	[esp+14h+arg_C]	; void *
		push	ecx		; int
		push	edi		; int
		push	1		; char

loc_10005582:				; CODE XREF: sub_1000552E+8Cj
		lea	eax, [esp+24h+arg_C]
		mov	ecx, ebp
		push	eax		; int
		call	sub_10005AD8
		mov	ecx, [eax]
		mov	eax, [esp+14h+arg_0]
		mov	[eax], ecx
		mov	byte ptr [eax+4], 1
		jmp	short loc_100055CD
; ---------------------------------------------------------------------------

loc_1000559C:				; CODE XREF: sub_1000552E+4Aj
		lea	ecx, [esp+14h+arg_8]
		call	sub_100053CA
		mov	esi, [esp+14h+arg_8]

loc_100055A9:				; CODE XREF: sub_1000552E+46j
		mov	eax, [esi+10h]
		push	[esp+14h+arg_C]	; void *
		cmp	eax, [ebx]
		jnb	short loc_100055BC
		push	ecx
		push	edi
		push	[esp+20h+var_4]
		jmp	short loc_10005582
; ---------------------------------------------------------------------------

loc_100055BC:				; CODE XREF: sub_1000552E+84j
		call	ds:free
		mov	eax, [esp+18h+arg_0]
		pop	ecx
		mov	[eax], esi
		mov	byte ptr [eax+4], 0

loc_100055CD:				; CODE XREF: sub_1000552E+6Cj
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		pop	ecx
		retn	10h
sub_1000552E	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_100055D5	proc near		; CODE XREF: sub_10005274+5Fp

arg_0		= dword	ptr  8
arg_4		= byte ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		push	ebx
		push	esi
		push	edi
		mov	edi, ecx
		cmp	dword ptr [edi+4], 1999998h
		jb	short loc_100055F1
		push	offset aMapSetTTooLong ; "map/set<T> too long"
		call	ds:?moz_Xlength_error@std@@YAXPBD@Z ; std::moz_Xlength_error(char const	*)

loc_100055F1:				; CODE XREF: sub_100055D5+Fj
		push	[ebp+arg_C]
		push	[ebp+arg_10]
		call	sub_10005BFC
		inc	dword ptr [edi+4]
		mov	ebx, eax
		mov	eax, [ebp+arg_8]
		mov	[ebx+4], eax
		mov	ecx, [edi]
		cmp	eax, ecx
		jnz	short loc_1000561B
		mov	[ecx+4], ebx
		mov	eax, [edi]
		mov	[eax], ebx
		mov	eax, [edi]
		mov	[eax+8], ebx
		jmp	short loc_1000563A
; ---------------------------------------------------------------------------

loc_1000561B:				; CODE XREF: sub_100055D5+36j
		cmp	[ebp+arg_4], 0
		jz	short loc_1000562D
		mov	[eax], ebx
		mov	ecx, [edi]
		cmp	eax, [ecx]
		jnz	short loc_1000563A
		mov	[ecx], ebx
		jmp	short loc_1000563A
; ---------------------------------------------------------------------------

loc_1000562D:				; CODE XREF: sub_100055D5+4Aj
		mov	[eax+8], ebx
		mov	ecx, [edi]
		cmp	eax, [ecx+8]
		jnz	short loc_1000563A
		mov	[ecx+8], ebx

loc_1000563A:				; CODE XREF: sub_100055D5+44j
					; sub_100055D5+52j ...
		mov	eax, [ebx+4]
		mov	esi, ebx
		jmp	loc_100056D7
; ---------------------------------------------------------------------------

loc_10005644:				; CODE XREF: sub_100055D5+106j
		mov	eax, [esi+4]
		mov	edx, [eax+4]
		mov	ecx, [edx]
		cmp	eax, ecx
		jnz	short loc_10005688
		mov	ecx, [edx+8]
		cmp	byte ptr [ecx+0Ch], 0
		jz	short loc_1000568E
		cmp	esi, [eax+8]
		jnz	short loc_10005668
		mov	esi, eax
		mov	ecx, edi
		push	esi
		call	sub_10004ADF

loc_10005668:				; CODE XREF: sub_100055D5+87j
		mov	eax, [esi+4]
		mov	ecx, edi
		mov	byte ptr [eax+0Ch], 1
		mov	eax, [esi+4]
		mov	eax, [eax+4]
		mov	byte ptr [eax+0Ch], 0
		mov	eax, [esi+4]
		push	dword ptr [eax+4]
		call	sub_10004B20
		jmp	short loc_100056D4
; ---------------------------------------------------------------------------

loc_10005688:				; CODE XREF: sub_100055D5+79j
		cmp	byte ptr [ecx+0Ch], 0
		jnz	short loc_100056A8

loc_1000568E:				; CODE XREF: sub_100055D5+82j
		mov	byte ptr [eax+0Ch], 1
		mov	byte ptr [ecx+0Ch], 1
		mov	eax, [esi+4]
		mov	eax, [eax+4]
		mov	byte ptr [eax+0Ch], 0
		mov	eax, [esi+4]
		mov	esi, [eax+4]
		jmp	short loc_100056D4
; ---------------------------------------------------------------------------

loc_100056A8:				; CODE XREF: sub_100055D5+B7j
		cmp	esi, [eax]
		jnz	short loc_100056B6
		mov	esi, eax
		mov	ecx, edi
		push	esi
		call	sub_10004B20

loc_100056B6:				; CODE XREF: sub_100055D5+D5j
		mov	eax, [esi+4]
		mov	ecx, edi
		mov	byte ptr [eax+0Ch], 1
		mov	eax, [esi+4]
		mov	eax, [eax+4]
		mov	byte ptr [eax+0Ch], 0
		mov	eax, [esi+4]
		push	dword ptr [eax+4]
		call	sub_10004ADF

loc_100056D4:				; CODE XREF: sub_100055D5+B1j
					; sub_100055D5+D1j
		mov	eax, [esi+4]

loc_100056D7:				; CODE XREF: sub_100055D5+6Aj
		cmp	byte ptr [eax+0Ch], 0
		jz	loc_10005644
		mov	eax, [edi]
		pop	edi
		pop	esi
		mov	eax, [eax+4]
		mov	byte ptr [eax+0Ch], 1
		mov	eax, [ebp+arg_0]
		mov	[eax], ebx
		pop	ebx
		pop	ebp
		retn	14h
sub_100055D5	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_100056F6	proc near		; CODE XREF: sub_10005329+5Bp

arg_0		= dword	ptr  8
arg_4		= byte ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		push	ebx
		push	esi
		push	edi
		mov	edi, ecx
		cmp	dword ptr [edi+4], 0CCCCCCBh
		jb	short loc_10005712
		push	offset aMapSetTTooLong ; "map/set<T> too long"
		call	ds:?moz_Xlength_error@std@@YAXPBD@Z ; std::moz_Xlength_error(char const	*)

loc_10005712:				; CODE XREF: sub_100056F6+Fj
		push	[ebp+arg_C]
		push	[ebp+arg_10]
		call	sub_10005C4F
		inc	dword ptr [edi+4]
		mov	ebx, eax
		mov	eax, [ebp+arg_8]
		mov	[ebx+4], eax
		mov	ecx, [edi]
		cmp	eax, ecx
		jnz	short loc_1000573C
		mov	[ecx+4], ebx
		mov	eax, [edi]
		mov	[eax], ebx
		mov	eax, [edi]
		mov	[eax+8], ebx
		jmp	short loc_1000575B
; ---------------------------------------------------------------------------

loc_1000573C:				; CODE XREF: sub_100056F6+36j
		cmp	[ebp+arg_4], 0
		jz	short loc_1000574E
		mov	[eax], ebx
		mov	ecx, [edi]
		cmp	eax, [ecx]
		jnz	short loc_1000575B
		mov	[ecx], ebx
		jmp	short loc_1000575B
; ---------------------------------------------------------------------------

loc_1000574E:				; CODE XREF: sub_100056F6+4Aj
		mov	[eax+8], ebx
		mov	ecx, [edi]
		cmp	eax, [ecx+8]
		jnz	short loc_1000575B
		mov	[ecx+8], ebx

loc_1000575B:				; CODE XREF: sub_100056F6+44j
					; sub_100056F6+52j ...
		mov	eax, [ebx+4]
		mov	esi, ebx
		jmp	loc_100057F8
; ---------------------------------------------------------------------------

loc_10005765:				; CODE XREF: sub_100056F6+106j
		mov	eax, [esi+4]
		mov	edx, [eax+4]
		mov	ecx, [edx]
		cmp	eax, ecx
		jnz	short loc_100057A9
		mov	ecx, [edx+8]
		cmp	byte ptr [ecx+0Ch], 0
		jz	short loc_100057AF
		cmp	esi, [eax+8]
		jnz	short loc_10005789
		mov	esi, eax
		mov	ecx, edi
		push	esi
		call	sub_10004ADF

loc_10005789:				; CODE XREF: sub_100056F6+87j
		mov	eax, [esi+4]
		mov	ecx, edi
		mov	byte ptr [eax+0Ch], 1
		mov	eax, [esi+4]
		mov	eax, [eax+4]
		mov	byte ptr [eax+0Ch], 0
		mov	eax, [esi+4]
		push	dword ptr [eax+4]
		call	sub_10004B20
		jmp	short loc_100057F5
; ---------------------------------------------------------------------------

loc_100057A9:				; CODE XREF: sub_100056F6+79j
		cmp	byte ptr [ecx+0Ch], 0
		jnz	short loc_100057C9

loc_100057AF:				; CODE XREF: sub_100056F6+82j
		mov	byte ptr [eax+0Ch], 1
		mov	byte ptr [ecx+0Ch], 1
		mov	eax, [esi+4]
		mov	eax, [eax+4]
		mov	byte ptr [eax+0Ch], 0
		mov	eax, [esi+4]
		mov	esi, [eax+4]
		jmp	short loc_100057F5
; ---------------------------------------------------------------------------

loc_100057C9:				; CODE XREF: sub_100056F6+B7j
		cmp	esi, [eax]
		jnz	short loc_100057D7
		mov	esi, eax
		mov	ecx, edi
		push	esi
		call	sub_10004B20

loc_100057D7:				; CODE XREF: sub_100056F6+D5j
		mov	eax, [esi+4]
		mov	ecx, edi
		mov	byte ptr [eax+0Ch], 1
		mov	eax, [esi+4]
		mov	eax, [eax+4]
		mov	byte ptr [eax+0Ch], 0
		mov	eax, [esi+4]
		push	dword ptr [eax+4]
		call	sub_10004ADF

loc_100057F5:				; CODE XREF: sub_100056F6+B1j
					; sub_100056F6+D1j
		mov	eax, [esi+4]

loc_100057F8:				; CODE XREF: sub_100056F6+6Aj
		cmp	byte ptr [eax+0Ch], 0
		jz	loc_10005765
		mov	eax, [edi]
		pop	edi
		pop	esi
		mov	eax, [eax+4]
		mov	byte ptr [eax+0Ch], 1
		mov	eax, [ebp+arg_0]
		mov	[eax], ebx
		pop	ebx
		pop	ebp
		retn	14h
sub_100056F6	endp


; =============== S U B	R O U T	I N E =======================================


sub_10005817	proc near		; CODE XREF: sub_1000540E+41p

var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 14h
		push	ebx
		push	ebp
		mov	ebp, [esp+1Ch+arg_0]
		mov	eax, ebp
		push	esi
		mov	esi, edx
		mov	[esp+20h+var_4], ecx
		sub	eax, esi
		mov	[esp+20h+var_8], esi
		sar	eax, 2
		cdq
		push	edi
		sub	eax, edx
		push	ecx
		sar	eax, 1
		push	ecx
		mov	ecx, esp
		lea	edi, [esi+eax*4]
		mov	eax, [esp+2Ch+arg_4]
		mov	edx, edi
		mov	[ecx], eax
		mov	eax, [esp+2Ch+arg_8]
		mov	[ecx+4], al
		lea	eax, [ebp-4]
		push	eax
		mov	ecx, esi
		call	sub_10005C9C
		lea	ebx, [edi+4]
		add	esp, 0Ch
		mov	[esp+24h+var_14], ebx
		jmp	short loc_10005899
; ---------------------------------------------------------------------------

loc_10005865:				; CODE XREF: sub_10005817+84j
		push	dword ptr [edi]
		lea	eax, [edi-4]
		mov	[esp+28h+var_10], eax
		lea	ecx, [esp+28h+arg_4]
		mov	eax, [eax]
		push	eax
		mov	[esp+2Ch+var_C], eax
		call	sub_100014AC
		test	al, al
		jnz	short loc_1000589D
		push	[esp+24h+var_C]
		lea	ecx, [esp+28h+arg_4]
		push	dword ptr [edi]
		call	sub_100014AC
		test	al, al
		jnz	short loc_1000589D
		mov	edi, [esp+24h+var_10]

loc_10005899:				; CODE XREF: sub_10005817+4Cj
		cmp	esi, edi
		jb	short loc_10005865

loc_1000589D:				; CODE XREF: sub_10005817+69j
					; sub_10005817+7Cj
		cmp	ebx, ebp
		jnb	short loc_100058CE

loc_100058A1:				; CODE XREF: sub_10005817+B1j
		push	dword ptr [edi]
		lea	ecx, [esp+28h+arg_4]
		push	dword ptr [ebx]
		call	sub_100014AC
		test	al, al
		jnz	short loc_100058CA
		push	dword ptr [ebx]
		lea	ecx, [esp+28h+arg_4]
		push	dword ptr [edi]
		call	sub_100014AC
		test	al, al
		jnz	short loc_100058CA
		add	ebx, 4
		cmp	ebx, ebp
		jb	short loc_100058A1

loc_100058CA:				; CODE XREF: sub_10005817+99j
					; sub_10005817+AAj
		mov	[esp+24h+var_14], ebx

loc_100058CE:				; CODE XREF: sub_10005817+88j
		mov	esi, edi
		mov	ebp, ebx
		mov	[esp+24h+var_10], esi

loc_100058D6:				; CODE XREF: sub_10005817+1B6j
					; sub_10005817+1F8j
		mov	[esp+24h+var_C], ebp

loc_100058DA:				; CODE XREF: sub_10005817+1E6j
		cmp	ebp, [esp+24h+arg_0]
		jnb	short loc_10005937
		mov	esi, [esp+24h+arg_0]

loc_100058E4:				; CODE XREF: sub_10005817+112j
		mov	eax, [ebp+0]
		lea	ecx, [esp+24h+arg_4]
		push	eax
		push	dword ptr [edi]
		mov	[esp+2Ch+var_C], eax
		call	sub_100014AC
		test	al, al
		jnz	short loc_10005924
		push	dword ptr [edi]
		lea	ecx, [esp+28h+arg_4]
		push	[esp+28h+var_C]
		call	sub_100014AC
		test	al, al
		jnz	short loc_1000592B
		mov	eax, ebx
		add	ebx, 4
		cmp	eax, ebp
		jz	short loc_10005924
		mov	eax, [ebx-4]
		mov	ecx, [esp+24h+var_C]
		mov	[ebx-4], ecx
		mov	[ebp+0], eax

loc_10005924:				; CODE XREF: sub_10005817+E2j
					; sub_10005817+FEj
		add	ebp, 4
		cmp	ebp, esi
		jb	short loc_100058E4

loc_1000592B:				; CODE XREF: sub_10005817+F5j
		mov	esi, [esp+24h+var_10]
		mov	[esp+24h+var_C], ebp
		mov	[esp+24h+var_14], ebx

loc_10005937:				; CODE XREF: sub_10005817+C7j
		mov	eax, [esp+24h+var_8]
		cmp	esi, eax
		jbe	short loc_1000599C
		lea	ebp, [esi-4]
		mov	ebx, eax

loc_10005944:				; CODE XREF: sub_10005817+171j
		push	dword ptr [edi]
		mov	eax, [ebp+0]
		lea	ecx, [esp+28h+arg_4]
		push	eax
		mov	[esp+2Ch+var_10], eax
		call	sub_100014AC
		test	al, al
		jnz	short loc_10005980
		push	[esp+24h+var_10]
		lea	ecx, [esp+28h+arg_4]
		push	dword ptr [edi]
		call	sub_100014AC
		test	al, al
		jnz	short loc_1000598A
		sub	edi, 4
		cmp	edi, ebp
		jz	short loc_10005980
		mov	eax, [edi]
		mov	ecx, [esp+24h+var_10]
		mov	[edi], ecx
		mov	[ebp+0], eax

loc_10005980:				; CODE XREF: sub_10005817+142j
					; sub_10005817+15Cj
		sub	esi, 4
		sub	ebp, 4
		cmp	ebx, esi
		jb	short loc_10005944

loc_1000598A:				; CODE XREF: sub_10005817+155j
		mov	eax, [esp+24h+var_8]
		cmp	esi, eax
		mov	ebx, [esp+24h+var_14]
		mov	ebp, [esp+24h+var_C]
		mov	[esp+24h+var_10], esi

loc_1000599C:				; CODE XREF: sub_10005817+126j
		jnz	short loc_100059D2
		cmp	ebp, [esp+24h+arg_0]
		jz	short loc_10005A14
		cmp	ebx, ebp
		jz	short loc_100059B0
		mov	ecx, [edi]
		mov	eax, [ebx]
		mov	[edi], eax
		mov	[ebx], ecx

loc_100059B0:				; CODE XREF: sub_10005817+18Fj
		mov	esi, ebp
		mov	edx, edi
		add	ebx, 4
		add	edi, 4
		mov	[esp+24h+var_14], ebx
		add	ebp, 4
		mov	eax, [esi]
		mov	ecx, [edx]
		mov	[edx], eax
		mov	[esi], ecx
		mov	esi, [esp+24h+var_10]
		jmp	loc_100058D6
; ---------------------------------------------------------------------------

loc_100059D2:				; CODE XREF: sub_10005817:loc_1000599Cj
		sub	esi, 4
		mov	[esp+24h+var_10], esi
		cmp	ebp, [esp+24h+arg_0]
		jnz	short loc_10005A02
		sub	edi, 4
		cmp	esi, edi
		jz	short loc_100059EE
		mov	ecx, [esi]
		mov	eax, [edi]
		mov	[esi], eax
		mov	[edi], ecx

loc_100059EE:				; CODE XREF: sub_10005817+1CDj
		mov	ecx, [edi]
		sub	ebx, 4
		mov	[esp+24h+var_14], ebx
		mov	eax, [ebx]
		mov	[edi], eax
		mov	[ebx], ecx
		jmp	loc_100058DA
; ---------------------------------------------------------------------------

loc_10005A02:				; CODE XREF: sub_10005817+1C6j
		mov	ecx, [ebp+0]
		mov	eax, [esi]
		mov	[ebp+0], eax
		add	ebp, 4
		mov	[esi], ecx
		jmp	loc_100058D6
; ---------------------------------------------------------------------------

loc_10005A14:				; CODE XREF: sub_10005817+18Bj
		mov	eax, [esp+24h+var_4]
		mov	[eax], edi
		pop	edi
		pop	esi
		pop	ebp
		mov	[eax+4], ebx
		pop	ebx
		add	esp, 14h
		retn
sub_10005817	endp


; =============== S U B	R O U T	I N E =======================================


sub_10005A25	proc near		; CODE XREF: sub_1000540E+DDp

var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= byte ptr  8

		push	ecx
		push	ebx
		push	ebp
		push	esi
		mov	esi, edx
		mov	ebx, ecx
		sub	esi, ebx
		sar	esi, 2
		push	edi
		cmp	esi, 1
		jle	short loc_10005A74
		mov	eax, esi
		cdq
		sub	eax, edx
		mov	edi, eax
		sar	edi, 1
		test	edi, edi
		jle	short loc_10005A74
		mov	ebp, [esp+14h+arg_0]

loc_10005A49:				; CODE XREF: sub_10005A25+4Dj
		push	ecx
		dec	edi
		push	ecx
		mov	cl, [esp+1Ch+arg_4]
		mov	edx, edi
		mov	eax, [ebx+edi*4]
		mov	[esp+1Ch+var_4], eax
		mov	eax, esp
		mov	[eax], ebp
		mov	[eax+4], cl
		lea	eax, [esp+1Ch+var_4]
		push	eax
		push	esi
		mov	ecx, ebx
		call	sub_10005FB4
		add	esp, 10h
		test	edi, edi
		jg	short loc_10005A49

loc_10005A74:				; CODE XREF: sub_10005A25+11j
					; sub_10005A25+1Ej
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		pop	ecx
		retn
sub_10005A25	endp


; =============== S U B	R O U T	I N E =======================================


sub_10005A7A	proc near		; CODE XREF: sub_1000540E+EFp

var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= byte ptr  8

		push	ecx
		push	ebx
		push	ebp
		push	esi
		push	edi
		mov	esi, edx
		mov	edi, ecx
		sub	esi, edi
		mov	eax, esi
		and	eax, 0FFFFFFFCh
		cmp	eax, 4
		jle	short loc_10005AD2
		mov	bl, [esp+14h+arg_4]
		mov	ebp, [esp+14h+arg_0]

loc_10005A97:				; CODE XREF: sub_10005A7A+56j
		mov	eax, [edi+esi-4]
		xor	edx, edx
		mov	[esp+14h+var_4], eax
		mov	eax, [edi]
		push	ecx
		mov	[edi+esi-4], eax
		add	esi, 0FFFFFFFCh
		push	ecx
		mov	eax, esp
		mov	ecx, edi
		mov	[eax], ebp
		mov	[eax+4], bl
		lea	eax, [esp+1Ch+var_4]
		push	eax
		mov	eax, esi
		sar	eax, 2
		push	eax
		call	sub_10005FB4
		mov	eax, esi
		add	esp, 10h
		and	eax, 0FFFFFFFCh
		cmp	eax, 4
		jg	short loc_10005A97

loc_10005AD2:				; CODE XREF: sub_10005A7A+13j
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		pop	ecx
		retn
sub_10005A7A	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	sub_10005AD8(int, char,	int, int, void *)
sub_10005AD8	proc near		; CODE XREF: sub_1000552E+5Bp

var_10		= dword	ptr -10h
arg_0		= dword	ptr  8
arg_4		= byte ptr  0Ch
arg_8		= dword	ptr  10h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		push	ebx
		mov	ebx, ecx
		push	esi
		push	edi
		mov	eax, [ebx+4]
		cmp	eax, 0AAAAAA9h
		jb	short loc_10005B00
		push	[ebp+arg_10]	; void *
		call	ds:free
		mov	[esp+10h+var_10], offset aMapSetTTooLong ; "map/set<T> too long"
		call	ds:?moz_Xlength_error@std@@YAXPBD@Z ; std::moz_Xlength_error(char const	*)

loc_10005B00:				; CODE XREF: sub_10005AD8+10j
		mov	edi, [ebp+arg_10]
		inc	eax
		mov	[ebx+4], eax
		mov	eax, [ebp+arg_8]
		mov	[edi+4], eax
		mov	ecx, [ebx]
		cmp	eax, ecx
		jnz	short loc_10005B21
		mov	[ecx+4], edi
		mov	eax, [ebx]
		mov	[eax], edi
		mov	eax, [ebx]
		mov	[eax+8], edi
		jmp	short loc_10005B40
; ---------------------------------------------------------------------------

loc_10005B21:				; CODE XREF: sub_10005AD8+39j
		cmp	[ebp+arg_4], 0
		jz	short loc_10005B33
		mov	[eax], edi
		mov	ecx, [ebx]
		cmp	eax, [ecx]
		jnz	short loc_10005B40
		mov	[ecx], edi
		jmp	short loc_10005B40
; ---------------------------------------------------------------------------

loc_10005B33:				; CODE XREF: sub_10005AD8+4Dj
		mov	[eax+8], edi
		mov	ecx, [ebx]
		cmp	eax, [ecx+8]
		jnz	short loc_10005B40
		mov	[ecx+8], edi

loc_10005B40:				; CODE XREF: sub_10005AD8+47j
					; sub_10005AD8+55j ...
		mov	eax, [edi+4]
		mov	esi, edi
		jmp	loc_10005BDD
; ---------------------------------------------------------------------------

loc_10005B4A:				; CODE XREF: sub_10005AD8+109j
		mov	eax, [esi+4]
		mov	edx, [eax+4]
		mov	ecx, [edx]
		cmp	eax, ecx
		jnz	short loc_10005B8E
		mov	ecx, [edx+8]
		cmp	byte ptr [ecx+0Ch], 0
		jz	short loc_10005B94
		cmp	esi, [eax+8]
		jnz	short loc_10005B6E
		mov	esi, eax
		mov	ecx, ebx
		push	esi
		call	sub_10004ADF

loc_10005B6E:				; CODE XREF: sub_10005AD8+8Aj
		mov	eax, [esi+4]
		mov	ecx, ebx
		mov	byte ptr [eax+0Ch], 1
		mov	eax, [esi+4]
		mov	eax, [eax+4]
		mov	byte ptr [eax+0Ch], 0
		mov	eax, [esi+4]
		push	dword ptr [eax+4]
		call	sub_10004B20
		jmp	short loc_10005BDA
; ---------------------------------------------------------------------------

loc_10005B8E:				; CODE XREF: sub_10005AD8+7Cj
		cmp	byte ptr [ecx+0Ch], 0
		jnz	short loc_10005BAE

loc_10005B94:				; CODE XREF: sub_10005AD8+85j
		mov	byte ptr [eax+0Ch], 1
		mov	byte ptr [ecx+0Ch], 1
		mov	eax, [esi+4]
		mov	eax, [eax+4]
		mov	byte ptr [eax+0Ch], 0
		mov	eax, [esi+4]
		mov	esi, [eax+4]
		jmp	short loc_10005BDA
; ---------------------------------------------------------------------------

loc_10005BAE:				; CODE XREF: sub_10005AD8+BAj
		cmp	esi, [eax]
		jnz	short loc_10005BBC
		mov	esi, eax
		mov	ecx, ebx
		push	esi
		call	sub_10004B20

loc_10005BBC:				; CODE XREF: sub_10005AD8+D8j
		mov	eax, [esi+4]
		mov	ecx, ebx
		mov	byte ptr [eax+0Ch], 1
		mov	eax, [esi+4]
		mov	eax, [eax+4]
		mov	byte ptr [eax+0Ch], 0
		mov	eax, [esi+4]
		push	dword ptr [eax+4]
		call	sub_10004ADF

loc_10005BDA:				; CODE XREF: sub_10005AD8+B4j
					; sub_10005AD8+D4j
		mov	eax, [esi+4]

loc_10005BDD:				; CODE XREF: sub_10005AD8+6Dj
		cmp	byte ptr [eax+0Ch], 0
		jz	loc_10005B4A
		mov	eax, [ebx]
		mov	eax, [eax+4]
		mov	byte ptr [eax+0Ch], 1
		mov	eax, [ebp+arg_0]
		mov	[eax], edi
		pop	edi
		pop	esi
		pop	ebx
		pop	ebp
		retn	14h
sub_10005AD8	endp


; =============== S U B	R O U T	I N E =======================================


sub_10005BFC	proc near		; CODE XREF: sub_100055D5+22p

arg_4		= dword	ptr  8

		push	esi
		push	0A0h
		mov	esi, ecx
		call	ds:moz_xmalloc
		mov	edx, eax
		pop	ecx
		test	edx, edx
		jnz	short loc_10005C17
		call	ds:?_Xbad_alloc@std@@YAXXZ ; std::_Xbad_alloc(void)

loc_10005C17:				; CODE XREF: sub_10005BFC+13j
		mov	eax, [esi]
		lea	ecx, [edx+4]
		mov	[edx], eax
		test	ecx, ecx
		jz	short loc_10005C26
		mov	eax, [esi]
		mov	[ecx], eax

loc_10005C26:				; CODE XREF: sub_10005BFC+24j
		lea	ecx, [edx+8]
		test	ecx, ecx
		jz	short loc_10005C31
		mov	eax, [esi]
		mov	[ecx], eax

loc_10005C31:				; CODE XREF: sub_10005BFC+2Fj
		push	edi
		lea	edi, [edx+10h]
		mov	word ptr [edx+0Ch], 0
		test	edi, edi
		jz	short loc_10005C48
		mov	esi, [esp+8+arg_4]
		push	24h
		pop	ecx
		rep movsd

loc_10005C48:				; CODE XREF: sub_10005BFC+41j
		pop	edi
		mov	eax, edx
		pop	esi
		retn	8
sub_10005BFC	endp


; =============== S U B	R O U T	I N E =======================================


sub_10005C4F	proc near		; CODE XREF: sub_100056F6+22p

arg_4		= dword	ptr  8

		push	esi
		push	14h
		mov	esi, ecx
		call	ds:moz_xmalloc
		mov	edx, eax
		pop	ecx
		test	edx, edx
		jnz	short loc_10005C67
		call	ds:?_Xbad_alloc@std@@YAXXZ ; std::_Xbad_alloc(void)

loc_10005C67:				; CODE XREF: sub_10005C4F+10j
		mov	eax, [esi]
		lea	ecx, [edx+4]
		mov	[edx], eax
		test	ecx, ecx
		jz	short loc_10005C76
		mov	eax, [esi]
		mov	[ecx], eax

loc_10005C76:				; CODE XREF: sub_10005C4F+21j
		lea	ecx, [edx+8]
		test	ecx, ecx
		jz	short loc_10005C81
		mov	eax, [esi]
		mov	[ecx], eax

loc_10005C81:				; CODE XREF: sub_10005C4F+2Cj
		lea	ecx, [edx+10h]
		mov	word ptr [edx+0Ch], 0
		test	ecx, ecx
		jz	short loc_10005C96
		mov	eax, [esp+4+arg_4]
		mov	eax, [eax]
		mov	[ecx], eax

loc_10005C96:				; CODE XREF: sub_10005C4F+3Dj
		mov	eax, edx
		pop	esi
		retn	8
sub_10005C4F	endp


; =============== S U B	R O U T	I N E =======================================


sub_10005C9C	proc near		; CODE XREF: sub_10005817+3Dp

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ecx
		push	ecx
		push	ebx
		push	ebp
		push	esi
		mov	esi, [esp+14h+arg_0]
		mov	ebp, ecx
		mov	eax, esi
		mov	[esp+14h+var_8], edx
		sub	eax, ebp
		mov	[esp+14h+var_4], ebp
		push	edi
		sar	eax, 2
		push	ecx
		push	ecx
		cmp	eax, 28h
		jle	loc_10005D4B
		mov	cl, byte ptr [esp+20h+arg_8]
		inc	eax
		cdq
		and	edx, 7
		add	eax, edx
		sar	eax, 3
		mov	edi, eax
		mov	ebx, eax
		mov	eax, esp
		shl	edi, 2
		shl	ebx, 3
		lea	edx, [edi+ebp]
		mov	ebp, [esp+20h+arg_4]
		mov	[eax], ebp
		mov	[eax+4], cl
		mov	ecx, [esp+20h+var_4]
		lea	eax, [ebx+ecx]
		push	eax
		call	sub_10005F5D
		mov	edx, [esp+24h+var_8]
		pop	ecx
		mov	cl, byte ptr [esp+20h+arg_8]
		mov	eax, esp
		mov	[eax], ebp
		mov	[eax+4], cl
		lea	eax, [edi+edx]
		mov	ecx, edx
		push	eax
		sub	ecx, edi
		call	sub_10005F5D
		mov	cl, byte ptr [esp+24h+arg_8]
		add	esp, 4
		mov	eax, esp
		sub	esi, edi
		mov	edx, esi
		mov	[eax], ebp
		mov	[eax+4], cl
		mov	eax, [esp+20h+arg_0]
		push	eax
		sub	eax, ebx
		mov	ecx, eax
		call	sub_10005F5D
		mov	edx, [esp+24h+var_8]
		pop	ecx
		mov	cl, byte ptr [esp+20h+arg_8]
		mov	eax, esp
		mov	[eax], ebp
		mov	[eax+4], cl
		mov	ecx, [esp+20h+var_4]
		lea	ecx, [edi+ecx]
		jmp	short loc_10005D5C
; ---------------------------------------------------------------------------

loc_10005D4B:				; CODE XREF: sub_10005C9C+20j
		mov	eax, [esp+20h+arg_4]
		mov	ecx, esp
		mov	[ecx], eax
		mov	eax, [esp+20h+arg_8]
		mov	[ecx+4], al
		mov	ecx, ebp

loc_10005D5C:				; CODE XREF: sub_10005C9C+ADj
		push	esi
		call	sub_10005F5D
		add	esp, 0Ch
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		pop	ecx
		pop	ecx
		retn
sub_10005C9C	endp


; =============== S U B	R O U T	I N E =======================================


; int __usercall sub_10005D6C@<eax>(void *@<ecx>, char)
sub_10005D6C	proc near		; CODE XREF: sub_1000540E+111p

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= byte ptr  4

		sub	esp, 1Ch
		push	ebx
		push	edi
		mov	ebx, edx
		mov	edi, ecx
		mov	[esp+24h+var_4], ebx
		mov	[esp+24h+var_8], edi
		cmp	edi, ebx
		jz	loc_10005E3F
		push	esi
		lea	esi, [edi+4]
		mov	[esp+28h+var_18], esi
		cmp	esi, ebx
		jz	loc_10005E3E
		push	4
		pop	eax
		sub	eax, edi
		mov	[esp+28h+var_14], eax
		push	ebp

loc_10005D9F:				; CODE XREF: sub_10005D6C+CBj
		push	dword ptr [edi]
		mov	ebp, [esi]
		lea	ecx, [esp+30h+arg_0]
		push	ebp
		mov	[esp+34h+var_1C], esi
		call	sub_100014AC
		test	al, al
		jz	short loc_10005DD8
		mov	ecx, [esp+2Ch+var_14]
		mov	eax, esi
		add	ecx, 0FFFFFFFCh
		add	ecx, esi
		and	ecx, 0FFFFFFFCh
		push	ecx		; size_t
		sub	eax, ecx
		add	eax, 4
		push	edi		; void *
		push	eax		; void *
		call	ds:memmove
		add	esp, 0Ch
		mov	[edi], ebp
		jmp	short loc_10005E2E
; ---------------------------------------------------------------------------

loc_10005DD8:				; CODE XREF: sub_10005D6C+47j
		lea	eax, [esi-4]
		mov	[esp+2Ch+var_10], eax
		lea	ecx, [esp+2Ch+arg_0]
		mov	eax, [eax]
		push	eax
		push	ebp
		mov	[esp+34h+var_C], eax
		call	sub_100014AC
		test	al, al
		jz	short loc_10005E28
		mov	ebx, [esp+2Ch+var_10]
		mov	edi, [esp+2Ch+var_1C]
		mov	esi, [esp+2Ch+var_C]

loc_10005E00:				; CODE XREF: sub_10005D6C+AAj
		mov	[edi], esi
		lea	ecx, [esp+2Ch+arg_0]
		mov	edi, ebx
		sub	ebx, 4
		mov	esi, [ebx]
		push	esi
		push	ebp
		call	sub_100014AC
		test	al, al
		jnz	short loc_10005E00
		mov	esi, [esp+2Ch+var_18]
		mov	ebx, [esp+2Ch+var_4]
		mov	[esp+2Ch+var_1C], edi
		mov	edi, [esp+2Ch+var_8]

loc_10005E28:				; CODE XREF: sub_10005D6C+86j
		mov	eax, [esp+2Ch+var_1C]
		mov	[eax], ebp

loc_10005E2E:				; CODE XREF: sub_10005D6C+6Aj
		add	esi, 4
		mov	[esp+2Ch+var_18], esi
		cmp	esi, ebx
		jnz	loc_10005D9F
		pop	ebp

loc_10005E3E:				; CODE XREF: sub_10005D6C+23j
		pop	esi

loc_10005E3F:				; CODE XREF: sub_10005D6C+13j
		pop	edi
		pop	ebx
		add	esp, 1Ch
		retn
sub_10005D6C	endp


; =============== S U B	R O U T	I N E =======================================


sub_10005E45	proc near		; CODE XREF: sub_10005221+27p

var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= byte ptr -0Ch
var_8		= byte ptr -8

		sub	esp, 14h
		push	ebx
		push	ebp
		push	esi
		mov	esi, ecx
		mov	ebp, edx
		push	edi
		xor	ebx, ebx
		mov	eax, [esi]
		mov	ecx, [ebp+10h]
		mov	[esp+24h+var_14], ecx
		mov	edi, [eax+4]
		cmp	[edi+esi+24h], ebx
		jl	short loc_10005E78
		jg	short loc_10005E6C
		cmp	[edi+esi+20h], ebx
		jbe	short loc_10005E78

loc_10005E6C:				; CODE XREF: sub_10005E45+1Fj
		mov	edi, [edi+esi+20h]
		cmp	edi, ecx
		jbe	short loc_10005E78
		sub	edi, ecx
		jmp	short loc_10005E7A
; ---------------------------------------------------------------------------

loc_10005E78:				; CODE XREF: sub_10005E45+1Dj
					; sub_10005E45+25j ...
		xor	edi, edi

loc_10005E7A:				; CODE XREF: sub_10005E45+31j
		push	esi
		lea	ecx, [esp+28h+var_C]
		call	sub_10004B63
		cmp	[esp+24h+var_8], bl
		jnz	short loc_10005E92
		push	4
		pop	ebx
		jmp	loc_10005F3A
; ---------------------------------------------------------------------------

loc_10005E92:				; CODE XREF: sub_10005E45+43j
		mov	eax, [esi]
		mov	eax, [eax+4]
		mov	eax, [eax+esi+14h]
		and	eax, 1C0h
		cmp	eax, 40h
		jz	short loc_10005ECC
		test	edi, edi
		jz	short loc_10005ECC

loc_10005EA9:				; CODE XREF: sub_10005E45+85j
		mov	eax, [esi]
		mov	ecx, [eax+4]
		mov	al, [ecx+esi+40h]
		mov	ecx, [ecx+esi+38h]
		mov	byte ptr [esp+24h+var_10], al
		push	[esp+24h+var_10]
		call	ds:?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z ; std::basic_streambuf<char,std::char_traits<char>>::sputc(char)
		cmp	eax, 0FFFFFFFFh
		jz	short loc_10005F1E
		dec	edi
		jnz	short loc_10005EA9

loc_10005ECC:				; CODE XREF: sub_10005E45+5Ej
					; sub_10005E45+62j
		cmp	dword ptr [ebp+14h], 10h
		jb	short loc_10005ED5
		mov	ebp, [ebp+0]

loc_10005ED5:				; CODE XREF: sub_10005E45+8Bj
		mov	eax, [esi]
		push	0
		push	[esp+28h+var_14]
		mov	eax, [eax+4]
		push	ebp
		mov	ecx, [eax+esi+38h]
		call	ds:?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z ;	std::basic_streambuf<char,std::char_traits<char>>::sputn(char const *,__int64)
		cmp	eax, [esp+24h+var_14]
		jnz	short loc_10005F28
		test	edx, edx
		jnz	short loc_10005F28

loc_10005EF5:				; CODE XREF: sub_10005E45+DCj
		test	edi, edi
		jz	short loc_10005F2B

loc_10005EF9:				; CODE XREF: sub_10005E45+D5j
		mov	eax, [esi]
		mov	ecx, [eax+4]
		mov	al, [ecx+esi+40h]
		mov	ecx, [ecx+esi+38h]
		mov	byte ptr [esp+24h+var_10], al
		push	[esp+24h+var_10]
		call	ds:?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z ; std::basic_streambuf<char,std::char_traits<char>>::sputc(char)
		cmp	eax, 0FFFFFFFFh
		jz	short loc_10005F23
		dec	edi
		jnz	short loc_10005EF9
		jmp	short loc_10005F2B
; ---------------------------------------------------------------------------

loc_10005F1E:				; CODE XREF: sub_10005E45+82j
		push	4
		pop	ebx
		jmp	short loc_10005EF5
; ---------------------------------------------------------------------------

loc_10005F23:				; CODE XREF: sub_10005E45+D2j
		or	ebx, 4
		jmp	short loc_10005F2B
; ---------------------------------------------------------------------------

loc_10005F28:				; CODE XREF: sub_10005E45+AAj
					; sub_10005E45+AEj
		push	4
		pop	ebx

loc_10005F2B:				; CODE XREF: sub_10005E45+B2j
					; sub_10005E45+D7j ...
		mov	eax, [esi]
		mov	eax, [eax+4]
		and	dword ptr [eax+esi+20h], 0
		and	dword ptr [eax+esi+24h], 0

loc_10005F3A:				; CODE XREF: sub_10005E45+48j
		mov	eax, [esi]
		push	0
		push	ebx
		mov	ecx, [eax+4]
		add	ecx, esi
		call	ds:?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z	; std::basic_ios<char,std::char_traits<char>>::setstate(int,bool)
		lea	ecx, [esp+24h+var_C]
		call	sub_10004BB4
		pop	edi
		mov	eax, esi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 14h
		retn
sub_10005E45	endp


; =============== S U B	R O U T	I N E =======================================


sub_10005F5D	proc near		; CODE XREF: sub_10005C9C+54p
					; sub_10005C9C+71p ...

arg_0		= dword	ptr  4
arg_4		= byte ptr  8

		push	ebx
		push	ebp
		push	esi
		mov	ebx, ecx
		mov	esi, edx
		push	edi
		lea	ecx, [esp+10h+arg_4]
		mov	edi, [ebx]
		mov	ebp, [esi]
		push	edi
		push	ebp
		call	sub_100014AC
		test	al, al
		jz	short loc_10005F7C
		mov	[esi], edi
		mov	[ebx], ebp

loc_10005F7C:				; CODE XREF: sub_10005F5D+19j
		mov	ebp, [esp+10h+arg_0]
		lea	ecx, [esp+10h+arg_4]
		push	dword ptr [esi]
		mov	edi, [ebp+0]
		push	edi
		call	sub_100014AC
		test	al, al
		jz	short loc_10005FAF
		mov	eax, [esi]
		lea	ecx, [esp+10h+arg_4]
		mov	[ebp+0], eax
		mov	[esi], edi
		mov	ebp, [ebx]
		push	ebp
		push	edi
		call	sub_100014AC
		test	al, al
		jz	short loc_10005FAF
		mov	[esi], ebp
		mov	[ebx], edi

loc_10005FAF:				; CODE XREF: sub_10005F5D+34j
					; sub_10005F5D+4Cj
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
sub_10005F5D	endp


; =============== S U B	R O U T	I N E =======================================


sub_10005FB4	proc near		; CODE XREF: sub_10005A25+43p
					; sub_10005A7A+46p

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= byte ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 0Ch
		push	ebx
		push	ebp
		mov	ebp, [esp+14h+arg_0]
		mov	ebx, ecx
		push	esi
		push	edi
		mov	edi, edx
		mov	ecx, edi
		mov	[esp+1Ch+var_C], ecx
		lea	esi, ds:2[edi*2]
		cmp	esi, ebp
		jge	short loc_10006000

loc_10005FD4:				; CODE XREF: sub_10005FB4+46j
		push	dword ptr [ebx+esi*4-4]
		lea	ecx, [esp+20h+arg_8]
		push	dword ptr [ebx+esi*4]
		call	sub_100014AC
		test	al, al
		jz	short loc_10005FE9
		dec	esi

loc_10005FE9:				; CODE XREF: sub_10005FB4+32j
		mov	eax, [ebx+esi*4]
		mov	[ebx+edi*4], eax
		mov	edi, esi
		lea	esi, ds:2[esi*2]
		cmp	esi, ebp
		jl	short loc_10005FD4
		mov	ecx, [esp+1Ch+var_C]

loc_10006000:				; CODE XREF: sub_10005FB4+1Ej
		jnz	short loc_1000600C
		mov	eax, [ebx+ebp*4-4]
		mov	[ebx+edi*4], eax
		lea	edi, [ebp-1]

loc_1000600C:				; CODE XREF: sub_10005FB4:loc_10006000j
		mov	eax, [esp+1Ch+arg_8]
		mov	ebp, [esp+1Ch+arg_4]
		mov	[esp+1Ch+var_8], eax
		mov	eax, [esp+1Ch+arg_C]
		mov	[esp+1Ch+var_4], al
		lea	eax, [edi-1]
		cdq
		sub	eax, edx
		mov	esi, eax
		sar	esi, 1
		cmp	ecx, edi
		jge	short loc_1000605A

loc_1000602E:				; CODE XREF: sub_10005FB4+A4j
		push	dword ptr [ebp+0]
		mov	eax, [ebx+esi*4]
		lea	ecx, [esp+20h+var_8]
		push	eax
		call	sub_100014AC
		test	al, al
		jz	short loc_1000605A
		mov	eax, [ebx+esi*4]
		mov	[ebx+edi*4], eax
		lea	eax, [esi-1]
		cdq
		mov	edi, esi
		sub	eax, edx
		mov	esi, eax
		sar	esi, 1
		cmp	[esp+1Ch+var_C], edi
		jl	short loc_1000602E

loc_1000605A:				; CODE XREF: sub_10005FB4+78j
					; sub_10005FB4+8Cj
		mov	eax, [ebp+0]
		mov	[ebx+edi*4], eax
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 0Ch
		retn
sub_10005FB4	endp


; =============== S U B	R O U T	I N E =======================================


sub_10006068	proc near		; DATA XREF: .rdata:off_100074B8o

arg_0		= byte ptr  4

; FUNCTION CHUNK AT 1000451F SIZE 0000002C BYTES

		sub	ecx, [ecx-4]
		jmp	loc_1000451F
sub_10006068	endp

; [0000000F BYTES: COLLAPSED FUNCTION __security_check_cookie(x)]
; [0000003C BYTES: COLLAPSED FUNCTION ___atonexitinit]

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_100060BB(_onexit_t)
sub_100060BB	proc near		; CODE XREF: sub_10006164+6p

var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
Ptr		= dword	ptr -1Ch
ms_exc		= CPPEH_RECORD ptr -18h
arg_0		= dword	ptr  8

		push	14h
		push	offset stru_100076B8
		call	__SEH_prolog4
		and	[ebp+var_24], 0
		push	Ptr		; Ptr
		mov	esi, ds:DecodePointer
		call	esi ; DecodePointer
		mov	[ebp+Ptr], eax
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_100060ED
		push	[ebp+arg_0]	; _onexit_t
		call	ds:_onexit
		pop	ecx
		jmp	short loc_10006152
; ---------------------------------------------------------------------------

loc_100060ED:				; CODE XREF: sub_100060BB+24j
		push	8
		call	_lock
		pop	ecx
		and	[ebp+ms_exc.registration.TryLevel], 0
		push	Ptr		; Ptr
		call	esi ; DecodePointer
		mov	[ebp+Ptr], eax
		push	dword_100093A8	; Ptr
		call	esi ; DecodePointer
		mov	[ebp+var_20], eax
		lea	eax, [ebp+var_20]
		push	eax
		lea	eax, [ebp+Ptr]
		push	eax
		push	[ebp+arg_0]	; Ptr
		mov	esi, ds:EncodePointer
		call	esi ; EncodePointer
		push	eax
		call	__dllonexit
		add	esp, 0Ch
		mov	edi, eax
		mov	[ebp+var_24], edi
		push	[ebp+Ptr]	; Ptr
		call	esi ; EncodePointer
		mov	Ptr, eax
		push	[ebp+var_20]	; Ptr
		call	esi ; EncodePointer
		mov	dword_100093A8,	eax
		mov	[ebp+ms_exc.registration.TryLevel], 0FFFFFFFEh
		call	loc_1000615B
; ---------------------------------------------------------------------------

loc_10006150:				; CODE XREF: sub_100060BB+A8j
		mov	eax, edi

loc_10006152:				; CODE XREF: sub_100060BB+30j
		call	__SEH_epilog4
		retn
; ---------------------------------------------------------------------------

loc_10006158:				; DATA XREF: .rdata:stru_100076B8o
		mov	edi, [ebp+var_24] ; Finally handler 0 for function 100060BB

loc_1000615B:				; CODE XREF: sub_100060BB+90j
		push	8
		call	_unlock
		pop	ecx
		retn
sub_100060BB	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_10006164(_onexit_t)
sub_10006164	proc near		; CODE XREF: sub_100010B4+5p
					; sub_100010C0+5p ...

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	[ebp+arg_0]	; _onexit_t
		call	sub_100060BB
		neg	eax
		pop	ecx
		sbb	eax, eax
		neg	eax
		dec	eax
		pop	ebp
		retn
sub_10006164	endp

; ---------------------------------------------------------------------------
		align 2
; [00000006 BYTES: COLLAPSED FUNCTION _purecall]
; [00000006 BYTES: COLLAPSED FUNCTION std::basic_streambuf<char,std::char_traits<char>>::imbue(std::locale const &)]
; [00000006 BYTES: COLLAPSED FUNCTION std::basic_streambuf<char,std::char_traits<char>>::sync(void)]
; [00000006 BYTES: COLLAPSED FUNCTION std::basic_streambuf<char,std::char_traits<char>>::setbuf(char *,__int64)]
; [00000006 BYTES: COLLAPSED FUNCTION std::basic_streambuf<char,std::char_traits<char>>::xsputn(char const *,__int64)]
; [00000006 BYTES: COLLAPSED FUNCTION std::basic_streambuf<char,std::char_traits<char>>::xsgetn(char *,__int64)]
; [00000006 BYTES: COLLAPSED FUNCTION std::basic_streambuf<char,std::char_traits<char>>::uflow(void)]
; [00000006 BYTES: COLLAPSED FUNCTION std::basic_streambuf<char,std::char_traits<char>>::showmanyc(void)]
; [00000006 BYTES: COLLAPSED FUNCTION std::basic_streambuf<char,std::char_traits<char>>::_Unlock(void)]
; [00000006 BYTES: COLLAPSED FUNCTION std::basic_streambuf<char,std::char_traits<char>>::_Lock(void)]
; [0000004C BYTES: COLLAPSED FUNCTION _pre_c_init]

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10006202	proc near		; CODE XREF: ___DllMainCRTStartup+64p
					; ___DllMainCRTStartup+A3p ...

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ecx
		cmp	[ebp+arg_4], 0
		push	ebx
		push	esi
		push	edi
		jnz	loc_1000633D
		mov	eax, dword_10009030
		test	eax, eax
		jle	loc_10006336
		dec	eax
		mov	ebx, offset dword_1000939C
		mov	dword_10009030,	eax
		xor	edi, edi
		mov	eax, large fs:18h
		mov	[ebp+var_4], edi
		mov	edx, [eax+4]
		jmp	short loc_10006240
; ---------------------------------------------------------------------------

loc_1000623C:				; CODE XREF: sub_10006202+48j
		cmp	eax, edx
		jz	short loc_1000624E

loc_10006240:				; CODE XREF: sub_10006202+38j
		xor	eax, eax
		mov	ecx, edx
		lock cmpxchg [ebx], ecx
		test	eax, eax
		jnz	short loc_1000623C
		jmp	short loc_10006255
; ---------------------------------------------------------------------------

loc_1000624E:				; CODE XREF: sub_10006202+3Cj
		mov	[ebp+var_4], 1

loc_10006255:				; CODE XREF: sub_10006202+4Aj
		cmp	dword_100093A0,	2
		jz	short loc_1000626B
		push	1Fh
		call	_amsg_exit
		pop	ecx
		jmp	loc_100063ED
; ---------------------------------------------------------------------------

loc_1000626B:				; CODE XREF: sub_10006202+5Aj
		push	Ptr		; Ptr
		call	ds:DecodePointer
		mov	esi, eax
		mov	[ebp+arg_8], esi
		test	esi, esi
		jz	loc_1000631E
		push	dword_100093A8	; Ptr
		call	ds:DecodePointer
		mov	ebx, eax
		mov	[ebp+arg_4], esi
		mov	[ebp+arg_0], ebx

loc_10006298:				; CODE XREF: sub_10006202+9Fj
					; sub_10006202+AAj ...
		sub	ebx, 4
		cmp	ebx, esi
		jb	short loc_100062FB
		cmp	[ebx], edi
		jz	short loc_10006298
		push	edi		; Ptr
		call	ds:EncodePointer
		cmp	[ebx], eax
		jz	short loc_10006298
		push	dword ptr [ebx]	; Ptr
		call	ds:DecodePointer
		push	edi		; Ptr
		mov	esi, eax
		call	ds:EncodePointer
		mov	[ebx], eax
		call	esi
		push	Ptr		; Ptr
		mov	esi, ds:DecodePointer
		call	esi ; DecodePointer
		push	dword_100093A8	; Ptr
		mov	[ebp+var_8], eax
		call	esi ; DecodePointer
		mov	ecx, [ebp+var_8]
		cmp	[ebp+arg_4], ecx
		jnz	short loc_100062EC
		mov	esi, [ebp+arg_8]
		cmp	[ebp+arg_0], eax
		jz	short loc_10006298

loc_100062EC:				; CODE XREF: sub_10006202+E0j
		mov	esi, ecx
		mov	[ebp+arg_4], ecx
		mov	[ebp+arg_8], esi
		mov	ebx, eax
		mov	[ebp+arg_0], eax
		jmp	short loc_10006298
; ---------------------------------------------------------------------------

loc_100062FB:				; CODE XREF: sub_10006202+9Bj
		cmp	esi, 0FFFFFFFFh
		jz	short loc_10006308
		push	esi
		call	ds:frex
		pop	ecx

loc_10006308:				; CODE XREF: sub_10006202+FCj
		push	edi		; Ptr
		call	ds:EncodePointer
		mov	dword_100093A8,	eax
		mov	ebx, offset dword_1000939C
		mov	Ptr, eax

loc_1000631E:				; CODE XREF: sub_10006202+7Cj
		mov	dword_100093A0,	edi
		cmp	[ebp+var_4], edi
		jnz	loc_100063ED
		xor	eax, eax
		xchg	eax, [ebx]
		jmp	loc_100063ED
; ---------------------------------------------------------------------------

loc_10006336:				; CODE XREF: sub_10006202+19j
					; sub_10006202+19Fj
		xor	eax, eax
		jmp	loc_100063F0
; ---------------------------------------------------------------------------

loc_1000633D:				; CODE XREF: sub_10006202+Cj
		cmp	[ebp+arg_4], 1
		jnz	loc_100063ED
		mov	eax, large fs:18h
		xor	edi, edi
		mov	esi, edi
		mov	ebx, offset dword_1000939C
		mov	edx, [eax+4]
		jmp	short loc_1000635F
; ---------------------------------------------------------------------------

loc_1000635B:				; CODE XREF: sub_10006202+167j
		cmp	eax, edx
		jz	short loc_1000636D

loc_1000635F:				; CODE XREF: sub_10006202+157j
		xor	eax, eax
		mov	ecx, edx
		lock cmpxchg [ebx], ecx
		test	eax, eax
		jnz	short loc_1000635B
		jmp	short loc_10006370
; ---------------------------------------------------------------------------

loc_1000636D:				; CODE XREF: sub_10006202+15Bj
		xor	esi, esi
		inc	esi

loc_10006370:				; CODE XREF: sub_10006202+169j
		cmp	dword_100093A0,	edi
		push	2
		pop	edi
		jz	short loc_10006384
		push	1Fh
		call	_amsg_exit
		jmp	short loc_100063B9
; ---------------------------------------------------------------------------

loc_10006384:				; CODE XREF: sub_10006202+177j
		push	offset dword_10007180
		push	offset dword_10007174
		mov	dword_100093A0,	1
		call	_initterm_e
		pop	ecx
		pop	ecx
		test	eax, eax
		jnz	short loc_10006336
		push	offset dword_10007170
		push	offset dword_1000715C
		call	_initterm
		pop	ecx
		mov	dword_100093A0,	edi

loc_100063B9:				; CODE XREF: sub_10006202+180j
		pop	ecx
		test	esi, esi
		jnz	short loc_100063C2
		xor	eax, eax
		xchg	eax, [ebx]

loc_100063C2:				; CODE XREF: sub_10006202+1BAj
		cmp	dword_100093A4,	0
		jz	short loc_100063E7
		push	offset dword_100093A4
		call	__IsNonwritableInCurrentImage
		pop	ecx
		test	eax, eax
		jz	short loc_100063E7
		push	[ebp+arg_8]
		push	edi
		push	[ebp+arg_0]
		call	dword_100093A4

loc_100063E7:				; CODE XREF: sub_10006202+1C7j
					; sub_10006202+1D6j
		inc	dword_10009030

loc_100063ED:				; CODE XREF: sub_10006202+64j
					; sub_10006202+125j ...
		xor	eax, eax
		inc	eax

loc_100063F0:				; CODE XREF: sub_10006202+136j
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn	0Ch
sub_10006202	endp

; [00000023 BYTES: COLLAPSED FUNCTION DllEntryPoint]
; [00000133 BYTES: COLLAPSED FUNCTION ___DllMainCRTStartup]
; [0000003D BYTES: COLLAPSED FUNCTION ___raise_securityfailure]
; [000000FB BYTES: COLLAPSED FUNCTION ___report_gsfailure]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _lock]
; [00000006 BYTES: COLLAPSED FUNCTION _unlock]
; [00000006 BYTES: COLLAPSED FUNCTION __dllonexit]
		align 10h
; [00000045 BYTES: COLLAPSED FUNCTION __SEH_prolog4]
; [00000014 BYTES: COLLAPSED FUNCTION __SEH_epilog4]
; [00000023 BYTES: COLLAPSED FUNCTION __except_handler4]
; [00000006 BYTES: COLLAPSED FUNCTION __CppXcptFilter]
; [00000006 BYTES: COLLAPSED FUNCTION _amsg_exit]
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10006730	proc near		; CODE XREF: __IsNonwritableInCurrentImage+59p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_0]
		xor	edx, edx
		push	ebx
		push	esi
		push	edi
		mov	ecx, [eax+3Ch]
		add	ecx, eax
		movzx	eax, word ptr [ecx+14h]
		movzx	ebx, word ptr [ecx+6]
		add	eax, 18h
		add	eax, ecx
		test	ebx, ebx
		jz	short loc_1000676C
		mov	edi, [ebp+arg_4]

loc_10006754:				; CODE XREF: sub_10006730+3Aj
		mov	esi, [eax+0Ch]
		cmp	edi, esi
		jb	short loc_10006764
		mov	ecx, [eax+8]
		add	ecx, esi
		cmp	edi, ecx
		jb	short loc_1000676E

loc_10006764:				; CODE XREF: sub_10006730+29j
		inc	edx
		add	eax, 28h
		cmp	edx, ebx
		jb	short loc_10006754

loc_1000676C:				; CODE XREF: sub_10006730+1Fj
		xor	eax, eax

loc_1000676E:				; CODE XREF: sub_10006730+32j
		pop	edi
		pop	esi
		pop	ebx
		pop	ebp
		retn
sub_10006730	endp

; ---------------------------------------------------------------------------
		align 10h
; [000000BA BYTES: COLLAPSED FUNCTION __IsNonwritableInCurrentImage]
		align 10h
; [00000031 BYTES: COLLAPSED FUNCTION __ValidateImageBase]

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10006871	proc near		; CODE XREF: DllEntryPoint+9p

PerformanceCount= LARGE_INTEGER	ptr -14h
SystemTimeAsFileTime= _FILETIME	ptr -0Ch
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		sub	esp, 14h
		and	[ebp+SystemTimeAsFileTime.dwLowDateTime], 0
		and	[ebp+SystemTimeAsFileTime.dwHighDateTime], 0
		mov	eax, ___security_cookie
		push	esi
		push	edi
		mov	edi, 0BB40E64Eh
		mov	esi, 0FFFF0000h
		cmp	eax, edi
		jz	short loc_100068A1
		test	esi, eax
		jz	short loc_100068A1
		not	eax
		mov	dword_10009004,	eax
		jmp	short loc_10006907
; ---------------------------------------------------------------------------

loc_100068A1:				; CODE XREF: sub_10006871+21j
					; sub_10006871+25j
		lea	eax, [ebp+SystemTimeAsFileTime]
		push	eax		; lpSystemTimeAsFileTime
		call	ds:GetSystemTimeAsFileTime
		mov	eax, [ebp+SystemTimeAsFileTime.dwHighDateTime]
		xor	eax, [ebp+SystemTimeAsFileTime.dwLowDateTime]
		mov	[ebp+var_4], eax
		call	ds:GetCurrentThreadId
		xor	[ebp+var_4], eax
		call	ds:GetCurrentProcessId
		xor	[ebp+var_4], eax
		lea	eax, [ebp+PerformanceCount]
		push	eax		; lpPerformanceCount
		call	ds:QueryPerformanceCounter
		mov	ecx, dword ptr [ebp+PerformanceCount+4]
		lea	eax, [ebp+var_4]
		xor	ecx, dword ptr [ebp+PerformanceCount]
		xor	ecx, [ebp+var_4]
		xor	ecx, eax
		cmp	ecx, edi
		jnz	short loc_100068E9
		mov	ecx, 0BB40E64Fh
		jmp	short loc_100068F9
; ---------------------------------------------------------------------------

loc_100068E9:				; CODE XREF: sub_10006871+6Fj
		test	esi, ecx
		jnz	short loc_100068F9
		mov	eax, ecx
		or	eax, 4711h
		shl	eax, 10h
		or	ecx, eax

loc_100068F9:				; CODE XREF: sub_10006871+76j
					; sub_10006871+7Aj
		mov	___security_cookie, ecx
		not	ecx
		mov	dword_10009004,	ecx

loc_10006907:				; CODE XREF: sub_10006871+2Ej
		pop	edi
		pop	esi
		mov	esp, ebp
		pop	ebp
		retn
sub_10006871	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000690D	proc near		; CODE XREF: _pre_c_init+2Cp
		push	esi
		push	edi
		mov	esi, offset dword_100076A8
		mov	edi, offset dword_100076A8
		jmp	short loc_10006926
; ---------------------------------------------------------------------------

loc_1000691B:				; CODE XREF: sub_1000690D+1Bj
		mov	eax, [esi]
		test	eax, eax
		jz	short loc_10006923
		call	eax

loc_10006923:				; CODE XREF: sub_1000690D+12j
		add	esi, 4

loc_10006926:				; CODE XREF: sub_1000690D+Cj
		cmp	esi, edi
		jb	short loc_1000691B
		pop	edi
		pop	esi
		retn
sub_1000690D	endp


; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1000692D()
sub_1000692D	proc near		; DATA XREF: _pre_c_init+31o
		push	esi
		push	edi
		mov	esi, offset dword_100076B0
		mov	edi, offset dword_100076B0
		jmp	short loc_10006946
; ---------------------------------------------------------------------------

loc_1000693B:				; CODE XREF: sub_1000692D+1Bj
		mov	eax, [esi]
		test	eax, eax
		jz	short loc_10006943
		call	eax

loc_10006943:				; CODE XREF: sub_1000692D+12j
		add	esi, 4

loc_10006946:				; CODE XREF: sub_1000692D+Cj
		cmp	esi, edi
		jb	short loc_1000693B
		pop	edi
		pop	esi
		retn
sub_1000692D	endp

; ---------------------------------------------------------------------------
		align 2
; [00000006 BYTES: COLLAPSED FUNCTION _initterm]
; [00000006 BYTES: COLLAPSED FUNCTION _initterm_e]

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1000695A()
sub_1000695A	proc near		; DATA XREF: _pre_c_init+3Bo
		push	offset dword_10009358
		call	__clean_type_info_names_internal
		pop	ecx
		retn
sub_1000695A	endp

; [00000006 BYTES: COLLAPSED FUNCTION _crt_debugger_hook]
; [00000006 BYTES: COLLAPSED FUNCTION __crtUnhandledException]
; [00000006 BYTES: COLLAPSED FUNCTION __crtTerminateProcess]
; [00000006 BYTES: COLLAPSED FUNCTION _except_handler4_common]
; [00000006 BYTES: COLLAPSED FUNCTION __clean_type_info_names_internal]
; [00000006 BYTES: COLLAPSED FUNCTION IsProcessorFeaturePresent]
; [00000006 BYTES: COLLAPSED FUNCTION memcpy]

; =============== S U B	R O U T	I N E =======================================

; Attributes: thunk

; int __cdecl sub_10006990()
sub_10006990	proc near		; DATA XREF: sub_10001915+16o
		jmp	sub_100043E6
sub_10006990	endp


; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10006995()
sub_10006995	proc near		; DATA XREF: sub_1000277C+26o
		push	0		; size_t
		push	1		; char
		mov	ecx, offset dword_10009380
		call	sub_100047F8
		retn
sub_10006995	endp


; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_100069A4()
sub_100069A4	proc near		; DATA XREF: sub_100010CCo
		mov	off_10009018, offset off_10007574
		retn
sub_100069A4	endp


; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_100069AF()
sub_100069AF	proc near		; DATA XREF: sub_100010C0o
		mov	off_10009020, offset off_10007574
		retn
sub_100069AF	endp


; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_100069BA()
sub_100069BA	proc near		; DATA XREF: sub_100010B4o
		mov	off_1000901C, offset off_10007574
		retn
sub_100069BA	endp

; ---------------------------------------------------------------------------
		align 40h
		dd 180h	dup(?)
_text		ends

; Section 2. (virtual address 00007000)
; Virtual size			: 000016A6 (   5798.)
; Section size in file		: 00001800 (   6144.)
; Offset to raw	data for section: 00005E00
; Flags	40000040: Data Readable
; Alignment	: default
;
; Imports from KERNEL32.dll
;
; ===========================================================================

; Segment type:	Externs
; _idata
; BOOL __stdcall TlsSetValue(DWORD dwTlsIndex, LPVOID lpTlsValue)
		extrn TlsSetValue:dword	; CODE XREF: sub_10001252+Fp
					; sub_10003C18+2Dp
					; DATA XREF: ...
; void __stdcall GetSystemTimeAsFileTime(LPFILETIME lpSystemTimeAsFileTime)
		extrn GetSystemTimeAsFileTime:dword ; CODE XREF: sub_10006871+34p
					; DATA XREF: sub_10006871+34r
; BOOL __stdcall QueryPerformanceCounter(LARGE_INTEGER *lpPerformanceCount)
		extrn QueryPerformanceCounter:dword ; CODE XREF: sub_10006871+59p
					; DATA XREF: sub_10006871+59r
; BOOL __stdcall IsProcessorFeaturePresent(DWORD ProcessorFeature)
		extrn __imp_IsProcessorFeaturePresent:dword
					; DATA XREF: IsProcessorFeaturePresentr
; BOOL __stdcall IsDebuggerPresent()
		extrn IsDebuggerPresent:dword ;	CODE XREF: ___raise_securityfailure+3p
					; DATA XREF: ___raise_securityfailure+3r
; PVOID	__stdcall DecodePointer(PVOID Ptr)
		extrn DecodePointer:dword ; CODE XREF: sub_100060BB+1Cp
					; sub_100060BB+44p ...
; PVOID	__stdcall EncodePointer(PVOID Ptr)
		extrn EncodePointer:dword ; CODE XREF: ___atonexitinit+1Cp
					; sub_100060BB+65p ...
; BOOL __stdcall TlsFree(DWORD dwTlsIndex)
		extrn TlsFree:dword	; CODE XREF: DllMain(x,x,x)+44p
					; DATA XREF: DllMain(x,x,x)+44r
; LPVOID __stdcall TlsGetValue(DWORD dwTlsIndex)
		extrn TlsGetValue:dword	; CODE XREF: sub_10003C18+11p
					; sub_10003C9D+Bp
					; DATA XREF: ...
; DWORD	__stdcall GetLastError()
		extrn GetLastError:dword ; CODE	XREF: sub_10002C57+4Ep
					; DATA XREF: sub_10002C57+4Er
; void __stdcall SetLastError(DWORD dwErrCode)
		extrn SetLastError:dword ; CODE	XREF: sub_10002C57+34p
					; DATA XREF: sub_10002C57+34r
; DWORD	__stdcall GetCurrentThreadId()
		extrn GetCurrentThreadId:dword ; CODE XREF: sub_10002C57+27p
					; sub_10006871+43p
					; DATA XREF: ...
; DWORD	__stdcall TlsAlloc()
		extrn TlsAlloc:dword	; CODE XREF: DllMain(x,x,x):loc_10003C66p
					; DATA XREF: DllMain(x,x,x):loc_10003C66r
; DWORD	__stdcall GetCurrentProcessId()
		extrn GetCurrentProcessId:dword	; CODE XREF: sub_10002C57+1Bp
					; sub_10006871+4Cp
					; DATA XREF: ...

;
; Imports from MSVCP120.dll
;
; public: virtual __thiscall std::basic_streambuf<char,	struct std::char_traits<char>>::~basic_streambuf<char, struct std::char_traits<char>>(void)
		extrn ??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ:dword
					; DATA XREF: sub_10003CD8+45r
					; .rdata:10007B9Co
; __declspec(dllimport)	public:	virtual	void __thiscall	std::basic_streambuf<char, struct std::char_traits<char>>::_Lock(void)
		extrn __imp_?_Lock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ:dword
					; DATA XREF: std::basic_streambuf<char,std::char_traits<char>>::_Lock(void)r
; __declspec(dllimport)	public:	virtual	void __thiscall	std::basic_streambuf<char, struct std::char_traits<char>>::_Unlock(void)
		extrn __imp_?_Unlock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ:dword
					; DATA XREF: std::basic_streambuf<char,std::char_traits<char>>::_Unlock(void)r
; __declspec(dllimport)	protected: virtual __int64 __thiscall std::basic_streambuf<char, struct	std::char_traits<char>>::showmanyc(void)
		extrn __imp_?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JXZ:dword
					; DATA XREF: std::basic_streambuf<char,std::char_traits<char>>::showmanyc(void)r
; __declspec(dllimport)	protected: virtual int __thiscall std::basic_streambuf<char, struct std::char_traits<char>>::uflow(void)
		extrn __imp_?uflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ:dword
					; DATA XREF: std::basic_streambuf<char,std::char_traits<char>>::uflow(void)r
; __declspec(dllimport)	protected: virtual __int64 __thiscall std::basic_streambuf<char, struct	std::char_traits<char>>::xsgetn(char *,	__int64)
		extrn __imp_?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPAD_J@Z:dword
					; DATA XREF: std::basic_streambuf<char,std::char_traits<char>>::xsgetn(char *,__int64)r
; char const * __cdecl std::_Winerror_map(int)
		extrn ?_Winerror_map@std@@YAPBDH@Z:dword ; CODE	XREF: sub_10001202+4p
					; DATA XREF: sub_10001202+4r
; char const * __cdecl std::_Syserror_map(int)
		extrn ?_Syserror_map@std@@YAPBDH@Z:dword ; CODE	XREF: sub_10001193+4p
					; sub_10001227+6p
					; DATA XREF: ...
; __int64 const	std::_BADOFF
		extrn ?_BADOFF@std@@3_JB:dword ; DATA XREF: sub_10003F5A+38r
					; sub_10003F5A+107r ...
; __declspec(dllimport)	protected: virtual __int64 __thiscall std::basic_streambuf<char, struct	std::char_traits<char>>::xsputn(char const *, __int64)
		extrn __imp_?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPBD_J@Z:dword
					; DATA XREF: std::basic_streambuf<char,std::char_traits<char>>::xsputn(char const *,__int64)r
; __declspec(dllimport)	protected: virtual class std::basic_streambuf<char, struct std::char_traits<char>> * __thiscall	std::basic_streambuf<char, struct std::char_traits<char>>::setbuf(char *, __int64)
		extrn __imp_?setbuf@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEPAV12@PAD_J@Z:dword
					; DATA XREF: std::basic_streambuf<char,std::char_traits<char>>::setbuf(char *,__int64)r
; void __cdecl std::_Xbad_alloc(void)
		extrn ?_Xbad_alloc@std@@YAXXZ:dword ; CODE XREF: sub_1000155D+2Dp
					; sub_100019A7:loc_100019D4p ...
; __declspec(dllimport)	protected: virtual int __thiscall std::basic_streambuf<char, struct std::char_traits<char>>::sync(void)
		extrn __imp_?sync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ:dword
					; DATA XREF: std::basic_streambuf<char,std::char_traits<char>>::sync(void)r
; __declspec(dllimport)	protected: virtual void	__thiscall std::basic_streambuf<char, struct std::char_traits<char>>::imbue(class std::locale const &)
		extrn __imp_?imbue@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z:dword
					; DATA XREF: std::basic_streambuf<char,std::char_traits<char>>::imbue(std::locale const	&)r
; public: virtual __thiscall std::basic_ios<char, struct std::char_traits<char>>::~basic_ios<char, struct std::char_traits<char>>(void)
		extrn ??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ:dword
					; CODE XREF: sub_10002370+14Ap
					; sub_100024DF+275p ...
; public: void __thiscall std::basic_ios<char, struct std::char_traits<char>>::setstate(int, bool)
		extrn ?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z:dword
					; CODE XREF: sub_1000506F+12Fp
					; sub_10005E45+FFp
					; DATA XREF: ...
; public: __thiscall std::basic_ostream<char, struct std::char_traits<char>>::basic_ostream<char, struct std::char_traits<char>>(class std::basic_streambuf<char, struct std::char_traits<char>> *, bool)
		extrn ??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z:dword
					; CODE XREF: sub_10004470+23p
					; DATA XREF: sub_10004470+23r
; public: virtual __thiscall std::basic_ostream<char, struct std::char_traits<char>>::~basic_ostream<char, struct std::char_traits<char>>(void)
		extrn ??1?$basic_ostream@DU?$char_traits@D@std@@@std@@UAE@XZ:dword
					; DATA XREF: sub_100044D2+2Ar
; public: __int64 __thiscall std::basic_streambuf<char,	struct std::char_traits<char>>::sputn(char const *, __int64)
		extrn ?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z:dword
					; CODE XREF: sub_1000506F+CEp
					; sub_10005E45+A0p
					; DATA XREF: ...
; public: int __thiscall std::basic_streambuf<char, struct std::char_traits<char>>::sputc(char)
		extrn ?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z:dword
					; CODE XREF: sub_1000506F+9Fp
					; sub_1000506F+F7p ...
; public: class	std::basic_ostream<char, struct	std::char_traits<char>>	& __thiscall std::basic_ostream<char, struct std::char_traits<char>>::flush(void)
		extrn ?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ:dword
					; CODE XREF: sub_10004B63+34p
					; DATA XREF: sub_10004B63+34r
; public: void __thiscall std::basic_ostream<char, struct std::char_traits<char>>::_Osfx(void)
		extrn ?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ:dword
					; CODE XREF: sub_10004BB4+5p
					; DATA XREF: sub_10004BB4+5r
; protected: __thiscall	std::basic_streambuf<char, struct std::char_traits<char>>::basic_streambuf<char, struct	std::char_traits<char>>(void)
		extrn ??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ:dword
					; CODE XREF: sub_10004470+43p
					; DATA XREF: sub_10004470+43r
; protected: __thiscall	std::basic_ios<char, struct std::char_traits<char>>::basic_ios<char, struct std::char_traits<char>>(void)
		extrn ??0?$basic_ios@DU?$char_traits@D@std@@@std@@IAE@XZ:dword
					; CODE XREF: sub_10004470+15p
					; DATA XREF: sub_10004470+15r
; protected: char * __thiscall std::basic_streambuf<char, struct std::char_traits<char>>::_Pninc(void)
		extrn ?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ:dword
					; CODE XREF: sub_10003D23+5Fp
					; sub_10003D23+17Ep
					; DATA XREF: ...

;
; Imports from MSVCR120.dll
;
; void *__cdecl	memcpy(void *, const void *, size_t)
		extrn __imp_memcpy:dword ; DATA	XREF: memcpyr .rdata:10007BC4o
		extrn __imp__purecall:dword ; DATA XREF: _purecallr
		extrn __imp__lock:dword	; DATA XREF: _lockr
		extrn __imp__unlock:dword ; DATA XREF: _unlockr
; void *__cdecl	memmove(void *,	const void *, size_t)
		extrn memmove:dword	; CODE XREF: sub_100010FA+Dp
					; sub_10004947+3Dp ...
; int sprintf_s(char *DstBuf, size_t SizeInBytes, const	char *Format, ...)
		extrn sprintf_s:dword	; CODE XREF: sub_100027C1+52p
					; DATA XREF: sub_100027C1+52r
		extrn _calloc_crt:dword	; CODE XREF: ___atonexitinit+11p
					; DATA XREF: ___atonexitinit+11r
		extrn __imp___dllonexit:dword ;	DATA XREF: __dllonexitr
; _onexit_t __cdecl onexit(_onexit_t)
		extrn _onexit:dword	; CODE XREF: sub_100060BB+29p
					; DATA XREF: sub_100060BB+29r
		extrn __imp___CppXcptFilter:dword ; DATA XREF: __CppXcptFilterr
		extrn __imp__amsg_exit:dword ; DATA XREF: _amsg_exitr
		extrn _malloc_crt:dword	; CODE XREF: _pre_c_init+6p
					; DATA XREF: _pre_c_init+6r
		extrn __imp__initterm:dword ; DATA XREF: _inittermr
		extrn __imp__initterm_e:dword ;	DATA XREF: _initterm_er
		extrn __imp__crt_debugger_hook:dword ; DATA XREF: _crt_debugger_hookr
		extrn __imp___crtUnhandledException:dword
					; DATA XREF: __crtUnhandledExceptionr
		extrn __imp___crtTerminateProcess:dword	; DATA XREF: __crtTerminateProcessr
		extrn __imp__except_handler4_common:dword
					; DATA XREF: _except_handler4_commonr
		extrn __imp___clean_type_info_names_internal:dword
					; DATA XREF: __clean_type_info_names_internalr

;
; Imports from USER32.dll
;
; BOOL __stdcall IsWindow(HWND hWnd)
		extrn IsWindow:dword	; CODE XREF: eglCreateWindowSurface+19p
					; DATA XREF: eglCreateWindowSurface+19r ...
; LRESULT __stdcall CallWindowProcA(WNDPROC lpPrevWndFunc, HWND	hWnd, UINT Msg,	WPARAM wParam, LPARAM lParam)
		extrn CallWindowProcA:dword ; CODE XREF: sub_10002C10+3Dp
					; DATA XREF: sub_10002C10+3Dr
; HWND __stdcall WindowFromDC(HDC hDC)
		extrn WindowFromDC:dword ; CODE	XREF: eglGetPlatformDisplayEXT+24p
					; DATA XREF: eglGetPlatformDisplayEXT+24r
; LONG __stdcall SetWindowLongA(HWND hWnd, int nIndex, LONG dwNewLong)
		extrn SetWindowLongA:dword ; CODE XREF:	sub_1000296F+2Dp
					; sub_10002C57+42p
					; DATA XREF: ...
; BOOL __stdcall IsIconic(HWND hWnd)
		extrn IsIconic:dword	; CODE XREF: sub_10002CD7+37p
					; DATA XREF: sub_10002CD7+37r
; HANDLE __stdcall GetPropA(HWND hWnd, LPCSTR lpString)
		extrn GetPropA:dword	; CODE XREF: sub_1000296F+1Fp
					; sub_10002C10+11p ...
; BOOL __stdcall SetPropA(HWND hWnd, LPCSTR lpString, HANDLE hData)
		extrn SetPropA:dword	; CODE XREF: sub_10002C57+6Bp
					; sub_10002C57+74p
					; DATA XREF: ...
; HANDLE __stdcall RemovePropA(HWND hWnd, LPCSTR lpString)
		extrn RemovePropA:dword	; CODE XREF: sub_1000296F+39p
					; sub_1000296F+41p
					; DATA XREF: ...
; BOOL __stdcall GetClientRect(HWND hWnd, LPRECT lpRect)
		extrn GetClientRect:dword ; CODE XREF: sub_100029EA+22p
					; sub_10002CD7+49p
					; DATA XREF: ...
; DWORD	__stdcall GetWindowThreadProcessId(HWND	hWnd, LPDWORD lpdwProcessId)
		extrn GetWindowThreadProcessId:dword ; CODE XREF: sub_10002C57+13p
					; DATA XREF: sub_10002C57+13r

;
; Imports from libGLESv2.dll
;
		extrn libGLESv2_144:dword ; CODE XREF: sub_1000219C+6Bp
					; DATA XREF: sub_1000219C+6Br ...
		extrn libGLESv2_146:dword ; CODE XREF: sub_10002CD7+D7p
					; eglMakeCurrent+D3p
					; DATA XREF: ...
		extrn libGLESv2_145:dword ; CODE XREF: sub_10001BF0+32p
					; eglDestroyContext+31p
					; DATA XREF: ...
		extrn libGLESv2_147:dword ; CODE XREF: sub_10002CD7+D0p
					; eglGetCurrentContext+1p
					; DATA XREF: ...
		extrn libGLESv2_178:dword ; CODE XREF: sub_10001BF0+4Ep
					; DATA XREF: sub_10001BF0+4Er
		extrn libGLESv2_158:dword ; CODE XREF: eglBindTexImage+69p
					; DATA XREF: eglBindTexImage+69r
		extrn libGLESv2_177:dword ; CODE XREF: sub_10001A4E+30p
					; DATA XREF: sub_10001A4E+30r
		extrn libGLESv2_148:dword ; DATA XREF: eglGetProcAddress+3Er

;
; Imports from mozglue.dll
;
		extrn frex:dword	; CODE XREF: sub_10006202+FFp
					; DATA XREF: sub_10006202+FFr ...
; void __cdecl std::moz_Xlength_error(char const *)
		extrn ?moz_Xlength_error@std@@YAXPBD@Z:dword ; CODE XREF: sub_100015BE+32p
					; sub_10004592+3Dp ...
; void __cdecl std::moz_Xout_of_range(char const *)
		extrn ?moz_Xout_of_range@std@@YAXPBD@Z:dword ; CODE XREF: sub_10004592+19p
					; sub_100046C6+1Ap ...
; void __cdecl free(void *)
		extrn free:dword	; CODE XREF: sub_10001115+11p
					; sub_100015BE+27Ap ...
		extrn moz_xmalloc:dword	; CODE XREF: sub_1000155D+22p
					; sub_1000193C+33p ...


; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 1000715Ch
dword_1000715C	dd 0			; DATA XREF: sub_10006202+1A6o
		dd offset sub_10001000
		dd offset sub_100010B4
		dd offset sub_100010C0
		dd offset sub_100010CC
dword_10007170	dd 0			; DATA XREF: sub_10006202+1A1o
dword_10007174	dd 0			; DATA XREF: sub_10006202+187o
		dd offset _pre_c_init
		dd offset ___atonexitinit
dword_10007180	dd 4 dup(0)		; DATA XREF: sub_10006202:loc_10006384o
; Debug	Directory entries
		dd 0			; Characteristics
		dd 5632BA8Ch		; TimeDateStamp: Fri Oct 30 00:32:12 2015
		dw 0			; MajorVersion
		dw 0			; MinorVersion
		dd 2			; Type:	IMAGE_DEBUG_TYPE_CODEVIEW
		dd 7Eh			; SizeOfData
		dd rva asc_10007608	; AddressOfRawData
		dd 6408h		; PointerToRawData
		dd 0			; Characteristics
		dd 5632BA8Ch		; TimeDateStamp: Fri Oct 30 00:32:12 2015
		dw 0			; MajorVersion
		dw 0			; MinorVersion
		dd 0Ch			; Type
		dd 14h			; SizeOfData
		dd rva dword_10007688	; AddressOfRawData
		dd 6488h		; PointerToRawData
		dd 0			; Characteristics
		dd 5632BA8Ch		; TimeDateStamp: Fri Oct 30 00:32:12 2015
		dw 0			; MajorVersion
		dw 0			; MinorVersion
		dd 0Ah			; Type:	IMAGE_DEBUG_TYPE_RESERVED10
		dd 4			; SizeOfData
		dd rva dword_1000769C	; AddressOfRawData
		dd 649Ch		; PointerToRawData
dword_100071E4	dd 0			; DATA XREF: ___DllMainCRTStartup:loc_1000645Ar
					; ___DllMainCRTStartup+A8r ...
off_100071E8	dd offset dword_10009038 ; DATA	XREF: ___report_gsfailure+EDo
		dd offset dword_10009088
dword_100071F0	dd 0			; DATA XREF: .rdata:100075A8o
aGeneric	db 'generic',0          ; DATA XREF: sub_1000118Do
aUnknownError	db 'unknown error',0    ; DATA XREF: sub_10001193+Fo
					; sub_10001202+Fo
		align 4
aIostream	db 'iostream',0         ; DATA XREF: sub_100011B8o
		align 4
aIostreamStream	db 'iostream stream error',0 ; DATA XREF: sub_100011BE+Fo
		align 10h
aSystem		db 'system',0           ; DATA XREF: sub_100011FCo
		align 4
aEgl_ext_client	db 'EGL_EXT_client_extensions',0 ; DATA XREF: sub_10002370+2Ao
		align 4
aAngle_platform	db 'ANGLE_platform_angle',0 ; DATA XREF: sub_10002370+77o
		align 4
aAngle_platfo_0	db 'ANGLE_platform_angle_d3d',0 ; DATA XREF: sub_10002370+BFo
		align 4
asc_10007288	db ' ',0                ; DATA XREF: sub_10002370+115o
					; sub_100024DF+20Ao
		align 4
aEgl_ext_create	db 'EGL_EXT_create_context_robustness',0 ; DATA XREF: sub_100024DF+2Co
		align 10h
aEgl_angle_d3d_	db 'EGL_ANGLE_d3d_share_handle_client_buffer',0
					; DATA XREF: sub_100024DF+8Ao
		align 4
aEgl_angle_surf	db 'EGL_ANGLE_surface_d3d_texture_2d_share_handle',0
					; DATA XREF: sub_100024DF+D1o
		align 4
aEgl_angle_quer	db 'EGL_ANGLE_query_surface_pointer',0 ; DATA XREF: sub_100024DF+118o
aEgl_angle_wind	db 'EGL_ANGLE_window_fixed_size',0 ; DATA XREF: sub_100024DF+15Fo
aEgl_nv_post_su	db 'EGL_NV_post_sub_buffer',0 ; DATA XREF: sub_100024DF+1B5o
		align 10h
aGoogleInc_	db 'Google Inc.',0      ; DATA XREF: sub_100027C1+15o
; char Format[]
Format		db ' (adapter LUID: %08x%08x)',0 ; DATA XREF: sub_100027C1+4Ao
		align 4
; CHAR aEglSurfaceowne[]
aEglSurfaceowne	db 'Egl::SurfaceOwner',0 ; DATA XREF: sub_1000296F:loc_100029A2o
					; sub_10002C10+9o ...
		align 4
; CHAR String[]
String		db 'Egl::SurfaceParentWndProc',0 ; DATA XREF: sub_1000296F+18o
					; sub_10002C10:loc_10002C32o ...
		align 4
aOpengl_es	db 'OpenGL_ES',0        ; DATA XREF: eglQueryString+4Bo
		align 4
a1_4Angle2_1_73	db '1.4 (ANGLE 2.1.736200d4a356)',0 ; DATA XREF: eglQueryString+68o
		align 4
aEglquerysurf_1	db 'eglQuerySurfacePointerANGLE',0 ; DATA XREF: .rdata:off_10007590o
aEglpostsubbu_0	db 'eglPostSubBufferNV',0 ; DATA XREF: .rdata:10007598o
		align 4
aEglgetplatfo_0	db 'eglGetPlatformDisplayEXT',0 ; DATA XREF: .rdata:100075A0o
		align 10h
aVectorTTooLong	db 'vector<T> too long',0 ; DATA XREF: sub_100015BE+2Do
					; sub_100049B8+27o ...
		align 4
aStringTooLong	db 'string too long',0  ; DATA XREF: sub_10004592+38o
					; sub_10004630+40o ...
aInvalidStringP	db 'invalid string position',0 ; DATA XREF: sub_10004592+14o
					; sub_100046C6:loc_100046DBo ...
aMapSetTTooLong	db 'map/set<T> too long',0 ; DATA XREF: sub_100055D5+11o
					; sub_100056F6+11o ...
off_10007480	dd offset sub_100028D2	; DATA XREF: sub_1000284F+11o
					; sub_100028EF+19o ...
		dd offset sub_10002DCE
		dd offset sub_10002DD2
		dd offset sub_10002E29
		dd offset sub_10002E30
		dd offset sub_10002E34
		dd offset sub_10002E38
		dd offset sub_10002E3C
		dd offset sub_10002E40
		dd offset sub_10002E44
		dd offset sub_10002E48
		dd offset sub_10002E5A
		dd offset sub_10002E4C
		dd offset sub_10002E56
off_100074B8	dd offset sub_10006068	; DATA XREF: sub_10004470+2Eo
					; sub_100044D2+Co
off_100074BC	dd offset sub_10004502	; DATA XREF: sub_10003CD8+7o
					; sub_10004470+4Fo
		dd offset ?_Lock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ ; std::basic_streambuf<char,std::char_traits<char>>::_Lock(void)
		dd offset ?_Unlock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ ; std::basic_streambuf<char,std::char_traits<char>>::_Unlock(void)
		dd offset sub_10003D23
		dd offset sub_10003EB7
		dd offset ?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JXZ ; std::basic_streambuf<char,std::char_traits<char>>::showmanyc(void)
		dd offset sub_10003F03
		dd offset ?uflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ ; std::basic_streambuf<char,std::char_traits<char>>::uflow(void)
		dd offset ?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPAD_J@Z ;	std::basic_streambuf<char,std::char_traits<char>>::xsgetn(char *,__int64)
		dd offset ?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPBD_J@Z ;	std::basic_streambuf<char,std::char_traits<char>>::xsputn(char const *,__int64)
		dd offset sub_10003F5A
		dd offset sub_1000410D
		dd offset ?setbuf@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEPAV12@PAD_J@Z ; std::basic_streambuf<char,std::char_traits<char>>::setbuf(char *,__int64)
		dd offset ?sync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ ;	std::basic_streambuf<char,std::char_traits<char>>::sync(void)
		dd offset ?imbue@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z ; std::basic_streambuf<char,std::char_traits<char>>::imbue(std::locale const	&)
off_100074F8	dd offset sub_10001115	; DATA XREF: .data:off_1000901Co
		dd offset sub_1000118D
		dd offset sub_10001193
		dd offset sub_10001133
		dd offset sub_10001172
		dd offset sub_10001143
dword_10007510	dd 3024h, 1, 3023h, 1, 3022h, 1, 303Dh,	1, 3038h
					; DATA XREF: sub_1000155D+Ao
dword_10007534	dd 0			; DATA XREF: sub_10004470+Fo
		dd 50h
off_1000753C	dd offset sub_10001115	; DATA XREF: .data:off_10009018o
		dd offset sub_100011FC
		dd offset sub_10001202
		dd offset sub_10001227
		dd offset sub_10001172
		dd offset sub_10001143
off_10007554	dd offset sub_10001115	; DATA XREF: .data:off_10009020o
		dd offset sub_100011B8
		dd offset sub_100011BE
		dd offset sub_10001133
		dd offset sub_10001172
		dd offset sub_10001143
off_1000756C	dd offset sub_100022FE	; DATA XREF: sub_100019A7+13o
		dd offset sub_10002339
off_10007574	dd offset sub_10001115	; DATA XREF: sub_10001115+8o
					; sub_100069A4o ...
		dd offset _purecall
		dd offset _purecall
		dd offset sub_10001133
		dd offset sub_10001172
		dd offset sub_10001143
		align 10h
off_10007590	dd offset aEglquerysurf_1 ; DATA XREF: eglGetProcAddress:loc_10003B77r
					; "eglQuerySurfacePointerANGLE"
off_10007594	dd offset eglQuerySurfacePointerANGLE
					; DATA XREF: eglGetProcAddress:loc_10003BB8r
		dd offset aEglpostsubbu_0 ; "eglPostSubBufferNV"
		dd offset eglPostSubBufferNV
		dd offset aEglgetplatfo_0 ; "eglGetPlatformDisplayEXT"
		dd offset eglGetPlatformDisplayEXT
		dd offset dword_100071F0
		align 10h
dbl_100075B0	dq 1.0			; DATA XREF: sub_10001000+98r
flt_100075B8	dd 2.0			; DATA XREF: sub_10001000+6r
		align 10h
__load_config_used dd 48h		; Size
		dd 0			; Time stamp
		dw 2 dup(0)		; Version: 0.0
		dd 0			; GlobalFlagsClear
		dd 0			; GlobalFlagsSet
		dd 0			; CriticalSectionDefaultTimeout
		dd 0			; DeCommitFreeBlockThreshold
		dd 0			; DeCommitTotalFreeThreshold
		dd 0			; LockPrefixTable
		dd 0			; MaximumAllocationSize
		dd 0			; VirtualMemoryThreshold
		dd 0			; ProcessAffinityMask
		dd 0			; ProcessHeapFlags
		dw 0			; CSDVersion
		dw 0			; Reserved1
		dd 0			; EditList
		dd offset ___security_cookie ; SecurityCookie
		dd offset ___safe_se_handler_table ; SEHandlerTable
		dd 1			; SEHandlerCount
; Debug	information (IMAGE_DEBUG_TYPE_CODEVIEW)
asc_10007608	db 'RSDS'               ; DATA XREF: .rdata:100071A4o
					; CV signature
		dd 0E8C514EBh		; Data1	; GUID
		dw 30BDh		; Data2
		dw 4BE3h		; Data3
		db 0ABh, 9, 0F4h, 4Bh, 8Ah, 0AFh, 9Fh, 6Bh; Data4
		dd 2			; Age
		db 'c:\builds\moz2_slave\rel-m-rel-w32_bld-000000000000\build\obj-fir' ; PdbFileName
		db 'efox\gfx\angle\src\libEGL\libEGL.pdb',0
		align 4
; Debug	information (type 12)
dword_10007688	dd 0			; DATA XREF: .rdata:100071C0o
		dd 2 dup(0Fh), 2 dup(0)
; Debug	information (IMAGE_DEBUG_TYPE_RESERVED10)
dword_1000769C	dd 50475500h		; DATA XREF: .rdata:100071DCo
___safe_se_handler_table dd rva	__except_handler4 ; DATA XREF: .rdata:10007600o
		align 8
dword_100076A8	dd 2 dup(0)		; DATA XREF: sub_1000690D+2o
					; sub_1000690D+7o
dword_100076B0	dd 2 dup(0)		; DATA XREF: sub_1000692D+2o
					; sub_1000692D+7o
stru_100076B8	dd 0FFFFFFFEh		; GSCookieOffset ; DATA	XREF: sub_100060BB+2o
		dd 0			; GSCookieXOROffset ; SEH scope	table for function 100060BB
		dd 0FFFFFFCCh		; EHCookieOffset
		dd 0			; EHCookieXOROffset
		dd 0FFFFFFFEh		; ScopeRecord.EnclosingLevel
		dd 0			; ScopeRecord.FilterFunc
		dd offset loc_10006158	; ScopeRecord.HandlerFunc
		align 8
stru_100076D8	dd 0FFFFFFFEh		; GSCookieOffset
					; DATA XREF: ___DllMainCRTStartup+2o
		dd 0			; GSCookieXOROffset ; SEH scope	table for function 1000641C
		dd 0FFFFFFD0h		; EHCookieOffset
		dd 0			; EHCookieXOROffset
		dd 0FFFFFFFEh		; ScopeRecord.EnclosingLevel
		dd 0			; ScopeRecord.FilterFunc
		dd offset $LN18		; ScopeRecord.HandlerFunc
		dd 0			; ScopeRecord.EnclosingLevel
		dd offset $LN22		; ScopeRecord.FilterFunc
		dd offset $LN23		; ScopeRecord.HandlerFunc
stru_10007700	dd 0FFFFFFFEh		; GSCookieOffset
					; DATA XREF: __IsNonwritableInCurrentImage+5o
		dd 0			; GSCookieXOROffset ; SEH scope	table for function 10006780
		dd 0FFFFFFD8h		; EHCookieOffset
		dd 0			; EHCookieXOROffset
		dd 0FFFFFFFEh		; ScopeRecord.EnclosingLevel
		dd offset loc_10006809	; ScopeRecord.FilterFunc
		dd offset loc_1000681C	; ScopeRecord.HandlerFunc
		align 10h
;
; Export directory for libEGL.dll
;
		dd 0			; Characteristics
		dd 5632BA8Ah		; TimeDateStamp: Fri Oct 30 00:32:10 2015
		dw 0			; MajorVersion
		dw 0			; MinorVersion
		dd rva aLibegl_dll	; Name
		dd 1			; Base
		dd 25h			; NumberOfFunctions
		dd 25h			; NumberOfNames
		dd rva off_10007748	; AddressOfFunctions
		dd rva off_100077DC	; AddressOfNames
		dd rva word_10007870	; AddressOfNameOrdinals
;
; Export Address Table for libEGL.dll
;
off_10007748	dd rva eglGetError, rva	eglGetDisplay, rva eglInitialize
					; DATA XREF: .rdata:1000773Co
		dd rva eglTerminate, rva eglQueryString, rva eglGetConfigs
		dd rva eglChooseConfig,	rva eglGetConfigAttrib,	rva eglCreateWindowSurface
		dd rva eglCreatePbufferSurface,	rva eglCreatePixmapSurface
		dd rva eglDestroySurface, rva eglQuerySurface, rva eglBindAPI
		dd rva eglQueryAPI, rva	eglWaitGL, rva eglReleaseThread
		dd rva eglCreatePbufferFromClientBuffer, rva eglSurfaceAttrib
		dd rva eglBindTexImage,	rva eglReleaseTexImage,	rva eglSwapInterval
		dd rva eglCreateContext, rva eglDestroyContext,	rva eglMakeCurrent
		dd rva eglGetCurrentContext, rva eglGetCurrentSurface
		dd rva eglGetCurrentDisplay, rva eglQueryContext, rva eglWaitGL
		dd rva eglWaitNative, rva eglSwapBuffers, rva eglCopyBuffers
		dd rva eglGetProcAddress, rva eglGetPlatformDisplayEXT
		dd rva eglQuerySurfacePointerANGLE, rva	eglPostSubBufferNV
;
; Export Names Table for libEGL.dll
;
off_100077DC	dd rva aEglbindapi, rva	aEglbindteximag, rva aEglchooseconfi
					; DATA XREF: .rdata:10007740o
		dd rva aEglcopybuffers,	rva aEglcreateconte, rva aEglcreatepbuff ; "eglBindAPI"
		dd rva aEglcreatepbu_0,	rva aEglcreatepixma, rva aEglcreatewindo
		dd rva aEgldestroycont,	rva aEgldestroysurf, rva aEglgetconfigat
		dd rva aEglgetconfigs, rva aEglgetcurrentc, rva	aEglgetcurrentd
		dd rva aEglgetcurrents,	rva aEglgetdisplay, rva	aEglgeterror
		dd rva aEglgetplatform,	rva aEglgetprocaddr, rva aEglinitialize
		dd rva aEglmakecurrent,	rva aEglpostsubbuff, rva aEglqueryapi
		dd rva aEglquerycontex,	rva aEglquerystring, rva aEglquerysurfac
		dd rva aEglquerysurf_0,	rva aEglreleasetexi, rva aEglreleasethre
		dd rva aEglsurfaceattr,	rva aEglswapbuffers, rva aEglswapinterva
		dd rva aEglterminate, rva aEglwaitclient, rva aEglwaitgl
		dd rva aEglwaitnative
;
; Export Ordinals Table	for libEGL.dll
;
word_10007870	dw 0Dh,	13h, 6,	20h, 16h, 11h, 9, 0Ah, 8, 17h, 0Bh, 7
					; DATA XREF: .rdata:10007744o
		dw 5, 19h, 1Bh,	1Ah, 1,	0, 22h,	21h, 2,	18h, 24h, 0Eh
		dw 1Ch,	4, 0Ch,	23h, 14h, 10h, 12h, 1Fh, 15h, 3, 0Fh, 1Dh
		dw 1Eh
aLibegl_dll	db 'libEGL.dll',0       ; DATA XREF: .rdata:1000772Co
aEglbindapi	db 'eglBindAPI',0       ; DATA XREF: .rdata:off_100077DCo
aEglbindteximag	db 'eglBindTexImage',0  ; DATA XREF: .rdata:off_100077DCo
aEglchooseconfi	db 'eglChooseConfig',0  ; DATA XREF: .rdata:off_100077DCo
aEglcopybuffers	db 'eglCopyBuffers',0   ; DATA XREF: .rdata:off_100077DCo
aEglcreateconte	db 'eglCreateContext',0 ; DATA XREF: .rdata:off_100077DCo
aEglcreatepbuff	db 'eglCreatePbufferFromClientBuffer',0 ; DATA XREF: .rdata:off_100077DCo
aEglcreatepbu_0	db 'eglCreatePbufferSurface',0 ; DATA XREF: .rdata:off_100077DCo
aEglcreatepixma	db 'eglCreatePixmapSurface',0 ; DATA XREF: .rdata:off_100077DCo
aEglcreatewindo	db 'eglCreateWindowSurface',0 ; DATA XREF: .rdata:off_100077DCo
aEgldestroycont	db 'eglDestroyContext',0 ; DATA XREF: .rdata:off_100077DCo
aEgldestroysurf	db 'eglDestroySurface',0 ; DATA XREF: .rdata:off_100077DCo
aEglgetconfigat	db 'eglGetConfigAttrib',0 ; DATA XREF: .rdata:off_100077DCo
aEglgetconfigs	db 'eglGetConfigs',0    ; DATA XREF: .rdata:off_100077DCo
aEglgetcurrentc	db 'eglGetCurrentContext',0 ; DATA XREF: .rdata:off_100077DCo
aEglgetcurrentd	db 'eglGetCurrentDisplay',0 ; DATA XREF: .rdata:off_100077DCo
aEglgetcurrents	db 'eglGetCurrentSurface',0 ; DATA XREF: .rdata:off_100077DCo
aEglgetdisplay	db 'eglGetDisplay',0    ; DATA XREF: .rdata:off_100077DCo
aEglgeterror	db 'eglGetError',0      ; DATA XREF: .rdata:off_100077DCo
aEglgetplatform	db 'eglGetPlatformDisplayEXT',0 ; DATA XREF: .rdata:off_100077DCo
aEglgetprocaddr	db 'eglGetProcAddress',0 ; DATA XREF: .rdata:off_100077DCo
aEglinitialize	db 'eglInitialize',0    ; DATA XREF: .rdata:off_100077DCo
aEglmakecurrent	db 'eglMakeCurrent',0   ; DATA XREF: .rdata:off_100077DCo
aEglpostsubbuff	db 'eglPostSubBufferNV',0 ; DATA XREF: .rdata:off_100077DCo
aEglqueryapi	db 'eglQueryAPI',0      ; DATA XREF: .rdata:off_100077DCo
aEglquerycontex	db 'eglQueryContext',0  ; DATA XREF: .rdata:off_100077DCo
aEglquerystring	db 'eglQueryString',0   ; DATA XREF: .rdata:off_100077DCo
aEglquerysurfac	db 'eglQuerySurface',0  ; DATA XREF: .rdata:off_100077DCo
aEglquerysurf_0	db 'eglQuerySurfacePointerANGLE',0 ; DATA XREF: .rdata:off_100077DCo
aEglreleasetexi	db 'eglReleaseTexImage',0 ; DATA XREF: .rdata:off_100077DCo
aEglreleasethre	db 'eglReleaseThread',0 ; DATA XREF: .rdata:off_100077DCo
aEglsurfaceattr	db 'eglSurfaceAttrib',0 ; DATA XREF: .rdata:off_100077DCo
aEglswapbuffers	db 'eglSwapBuffers',0   ; DATA XREF: .rdata:off_100077DCo
aEglswapinterva	db 'eglSwapInterval',0  ; DATA XREF: .rdata:off_100077DCo
aEglterminate	db 'eglTerminate',0     ; DATA XREF: .rdata:off_100077DCo
aEglwaitclient	db 'eglWaitClient',0    ; DATA XREF: .rdata:off_100077DCo
aEglwaitgl	db 'eglWaitGL',0        ; DATA XREF: .rdata:off_100077DCo
aEglwaitnative	db 'eglWaitNative',0    ; DATA XREF: .rdata:off_100077DCo
		align 10h
__IMPORT_DESCRIPTOR_libGLESv2 dd rva dword_10007CFC ; Import Name Table
		dd 0			; Time stamp
		dd 0			; Forwarder Chain
		dd rva aLibglesv2_dll	; DLL Name
		dd rva libGLESv2_144	; Import Address Table
__IMPORT_DESCRIPTOR_KERNEL32 dd	rva off_10007BDC ; Import Name Table
		dd 0			; Time stamp
		dd 0			; Forwarder Chain
		dd rva aKernel32_dll	; DLL Name
		dd rva TlsSetValue	; Import Address Table
__IMPORT_DESCRIPTOR_USER32 dd rva off_10007CD0 ; Import	Name Table
		dd 0			; Time stamp
		dd 0			; Forwarder Chain
		dd rva aUser32_dll	; DLL Name
		dd rva IsWindow		; Import Address Table
__IMPORT_DESCRIPTOR_MSVCP120 dd	rva off_10007C18 ; Import Name Table
		dd 0			; Time stamp
		dd 0			; Forwarder Chain
		dd rva aMsvcp120_dll	; DLL Name
		dd rva ??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ	; Import Address Table
__IMPORT_DESCRIPTOR_mozglue dd rva off_10007D20	; Import Name Table
		dd 0			; Time stamp
		dd 0			; Forwarder Chain
		dd rva aMozglue_dll	; DLL Name
		dd rva frex		; Import Address Table
__IMPORT_DESCRIPTOR_MSVCR120 dd	rva off_10007C80 ; Import Name Table
		dd 0			; Time stamp
		dd 0			; Forwarder Chain
		dd rva aMsvcr120_dll	; DLL Name
		dd rva __imp_memcpy	; Import Address Table
		dd 5 dup(0)
;
; Import names for KERNEL32.dll
;
off_10007BDC	dd rva word_10007D54	; DATA XREF: .rdata:__IMPORT_DESCRIPTOR_KERNEL32o
		dd rva word_10008682
		dd rva word_10008668
		dd rva word_1000864C
		dd rva word_10008638
		dd rva word_10008628
		dd rva word_10008618
		dd rva word_10007DBA
		dd rva word_10007D46
		dd rva word_10007D62
		dd rva word_10007D72
		dd rva word_10007D82
		dd rva word_10007D98
		dd rva word_10007DA4
		dd 0
;
; Import names for MSVCP120.dll
;
off_10007C18	dd rva word_100084A6	; DATA XREF: .rdata:__IMPORT_DESCRIPTOR_MSVCP120o
		dd rva word_10008466
		dd rva word_10008424
		dd rva word_100083E0
		dd rva word_100083A0
		dd rva word_1000835A
		dd rva word_10007E7C
		dd rva word_10007E9C
		dd rva word_10007EBC
		dd rva word_10008314
		dd rva word_100082CA
		dd rva word_10007F1A
		dd rva word_1000828C
		dd rva word_10008240
		dd rva word_1000820A
		dd rva word_100081CA
		dd rva word_10008160
		dd rva word_10008126
		dd rva word_10007F6C
		dd rva word_10007FB2
		dd rva word_10007FF2
		dd rva word_10008034
		dd rva word_10008072
		dd rva word_100080AE
		dd rva word_100080E4
		dd 0
;
; Import names for MSVCR120.dll
;
off_10007C80	dd rva word_1000869C	; DATA XREF: .rdata:__IMPORT_DESCRIPTOR_MSVCR120o
		dd rva word_10007F60
		dd rva word_1000850A
		dd rva word_10008512
		dd rva word_10007F40
		dd rva word_10007F34
		dd rva word_1000851C
		dd rva word_1000852A
		dd rva word_10008538
		dd rva word_10008542
		dd rva word_10008554
		dd rva word_1000856A
		dd rva word_10008578
		dd rva word_10008584
		dd rva word_10008592
		dd rva word_100085A8
		dd rva word_100085C2
		dd rva word_100085DA
		dd rva word_100085F4
		dd 0
;
; Import names for USER32.dll
;
off_10007CD0	dd rva word_10007E00	; DATA XREF: .rdata:__IMPORT_DESCRIPTOR_USER32o
		dd rva word_10007DEE
		dd rva word_10007E0C
		dd rva word_10007E1C
		dd rva word_10007E64
		dd rva word_10007E58
		dd rva word_10007E2E
		dd rva word_10007E4A
		dd rva word_10007E3A
		dd rva word_10007DD2
		dd 0
;
; Import names for libGLESv2.dll
;
dword_10007CFC	dd 80000090h		; DATA XREF: .rdata:__IMPORT_DESCRIPTOR_libGLESv2o
		dd 80000092h
		dd 80000091h
		dd 80000093h
		dd 800000B2h
		dd 8000009Eh
		dd 800000B1h
		dd 80000094h
		dd 0
;
; Import names for mozglue.dll
;
off_10007D20	dd rva word_10008562	; DATA XREF: .rdata:__IMPORT_DESCRIPTOR_mozglueo
		dd rva word_10007ED2
		dd rva word_10007EF6
		dd rva word_10007F4A
		dd rva word_10007F52
		dd 0
aLibglesv2_dll	db 'libGLESv2.dll',0    ; DATA XREF: .rdata:10007B5Co
word_10007D46	dw 573h			; DATA XREF: .rdata:10007BFCo
		db 'TlsGetValue',0
word_10007D54	dw 574h			; DATA XREF: .rdata:off_10007BDCo
		db 'TlsSetValue',0
word_10007D62	dw 250h			; DATA XREF: .rdata:10007C00o
		db 'GetLastError',0
		align 2
word_10007D72	dw 50Ah			; DATA XREF: .rdata:10007C04o
		db 'SetLastError',0
		align 2
word_10007D82	dw 20Eh			; DATA XREF: .rdata:10007C08o
		db 'GetCurrentThreadId',0
		align 4
word_10007D98	dw 571h			; DATA XREF: .rdata:10007C0Co
		db 'TlsAlloc',0
		align 4
word_10007DA4	dw 20Ah			; DATA XREF: .rdata:10007C10o
		db 'GetCurrentProcessId',0
word_10007DBA	dw 572h			; DATA XREF: .rdata:10007BF8o
		db 'TlsFree',0
aKernel32_dll	db 'KERNEL32.dll',0     ; DATA XREF: .rdata:10007B70o
		align 2
word_10007DD2	dw 1D3h			; DATA XREF: .rdata:10007CF4o
		db 'GetWindowThreadProcessId',0
		align 2
word_10007DEE	dw 1Dh			; DATA XREF: .rdata:10007CD4o
		db 'CallWindowProcA',0
word_10007E00	dw 211h			; DATA XREF: .rdata:off_10007CD0o
		db 'IsWindow',0
		align 4
word_10007E0C	dw 372h			; DATA XREF: .rdata:10007CD8o
		db 'WindowFromDC',0
		align 4
word_10007E1C	dw 30Ch			; DATA XREF: .rdata:10007CDCo
		db 'SetWindowLongA',0
		align 2
word_10007E2E	dw 2F1h			; DATA XREF: .rdata:10007CE8o
		db 'SetPropA',0
		align 2
word_10007E3A	dw 125h			; DATA XREF: .rdata:10007CF0o
		db 'GetClientRect',0
word_10007E4A	dw 2A8h			; DATA XREF: .rdata:10007CECo
		db 'RemovePropA',0
word_10007E58	dw 195h			; DATA XREF: .rdata:10007CE4o
		db 'GetPropA',0
		align 4
word_10007E64	dw 202h			; DATA XREF: .rdata:10007CE0o
		db 'IsIconic',0
		align 10h
aUser32_dll	db 'USER32.dll',0       ; DATA XREF: .rdata:10007B84o
		align 4
word_10007E7C	dw 2C5h			; DATA XREF: .rdata:10007C30o
		db '?_Winerror_map@std@@YAPBDH@Z',0
		align 4
word_10007E9C	dw 2B0h			; DATA XREF: .rdata:10007C34o
		db '?_Syserror_map@std@@YAPBDH@Z',0
		align 4
word_10007EBC	dw 1A7h			; DATA XREF: .rdata:10007C38o
		db '?_BADOFF@std@@3_JB',0
		align 2
word_10007ED2	dw 46h			; DATA XREF: .rdata:10007D24o
		db '?moz_Xlength_error@std@@YAXPBD@Z',0
		align 2
word_10007EF6	dw 47h			; DATA XREF: .rdata:10007D28o
		db '?moz_Xout_of_range@std@@YAXPBD@Z',0
		align 2
word_10007F1A	dw 2C9h			; DATA XREF: .rdata:10007C44o
		db '?_Xbad_alloc@std@@YAXXZ',0
word_10007F34	dw 728h			; DATA XREF: .rdata:10007C94o
		db 'sprintf_s',0
word_10007F40	dw 6E8h			; DATA XREF: .rdata:10007C90o
		db 'memmove',0
word_10007F4A	dw 68h			; DATA XREF: .rdata:10007D2Co
		db 'free',0
		align 2
word_10007F52	dw 77h			; DATA XREF: .rdata:10007D30o
		db 'moz_xmalloc',0
word_10007F60	dw 449h			; DATA XREF: .rdata:10007C84o
		db '_purecall',0
word_10007F6C	dw 502h			; DATA XREF: .rdata:10007C60o
		db '?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@'
		db 'Z',0
		align 2
word_10007FB2	dw 4FFh			; DATA XREF: .rdata:10007C64o
		db '?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z',0
word_10007FF2	dw 38Eh			; DATA XREF: .rdata:10007C68o
		db '?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ',0
word_10008034	dw 276h			; DATA XREF: .rdata:10007C6Co
		db '?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ',0
		align 2
word_10008072	dw 2Ah			; DATA XREF: .rdata:10007C70o
		db '??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ',0
		align 2
word_100080AE	dw 7			; DATA XREF: .rdata:10007C74o
		db '??0?$basic_ios@DU?$char_traits@D@std@@@std@@IAE@XZ',0
		align 4
word_100080E4	dw 27Ch			; DATA XREF: .rdata:10007C78o
		db '?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ',0
word_10008126	dw 84h			; DATA XREF: .rdata:10007C5Co
		db '??1?$basic_ostream@DU?$char_traits@D@std@@@std@@UAE@XZ',0
		align 10h
word_10008160	dw 20h			; DATA XREF: .rdata:10007C58o
		db '??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_st'
		db 'reambuf@DU?$char_traits@D@std@@@1@_N@Z',0
word_100081CA	dw 4E6h			; DATA XREF: .rdata:10007C54o
		db '?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z',0
		align 2
word_1000820A	dw 7Bh			; DATA XREF: .rdata:10007C50o
		db '??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ',0
		align 10h
word_10008240	dw 41Ch			; DATA XREF: .rdata:10007C4Co
		db '?imbue@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEXABVloca'
		db 'le@2@@Z',0
		align 4
word_1000828C	dw 521h			; DATA XREF: .rdata:10007C48o
		db '?sync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ',0
word_100082CA	dw 4D6h			; DATA XREF: .rdata:10007C40o
		db '?setbuf@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEPAV12@P'
		db 'AD_J@Z',0
word_10008314	dw 56Eh			; DATA XREF: .rdata:10007C3Co
		db '?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPBD_J'
		db '@Z',0
word_1000835A	dw 56Bh			; DATA XREF: .rdata:10007C2Co
		db '?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPAD_J'
		db '@Z',0
word_100083A0	dw 540h			; DATA XREF: .rdata:10007C28o
		db '?uflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ',0
		align 10h
word_100083E0	dw 4F6h			; DATA XREF: .rdata:10007C24o
		db '?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JXZ'
		db 0
word_10008424	dw 2BFh			; DATA XREF: .rdata:10007C20o
		db '?_Unlock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ',0
		align 2
word_10008466	dw 258h			; DATA XREF: .rdata:10007C1Co
		db '?_Lock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ',0
		align 2
word_100084A6	dw 87h			; DATA XREF: .rdata:off_10007C18o
		db '??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ',0
		align 2
aMsvcp120_dll	db 'MSVCP120.dll',0     ; DATA XREF: .rdata:10007B98o
		align 10h
aMozglue_dll	db 'mozglue.dll',0      ; DATA XREF: .rdata:10007BACo
aMsvcr120_dll	db 'MSVCR120.dll',0     ; DATA XREF: .rdata:10007BC0o
		align 2
word_1000850A	dw 394h			; DATA XREF: .rdata:10007C88o
		db '_lock',0
word_10008512	dw 504h			; DATA XREF: .rdata:10007C8Co
		db '_unlock',0
word_1000851C	dw 22Eh			; DATA XREF: .rdata:10007C98o
		db '_calloc_crt',0
word_1000852A	dw 1AEh			; DATA XREF: .rdata:10007C9Co
		db '__dllonexit',0
word_10008538	dw 43Ah			; DATA XREF: .rdata:10007CA0o
		db '_onexit',0
word_10008542	dw 16Fh			; DATA XREF: .rdata:10007CA4o
		db '__CppXcptFilter',0
word_10008554	dw 217h			; DATA XREF: .rdata:10007CA8o
		db '_amsg_exit',0
		align 2
word_10008562	dw 69h			; DATA XREF: .rdata:off_10007D20o
		db 'frex',0
		align 2
word_1000856A	dw 3A5h			; DATA XREF: .rdata:10007CACo
		db '_malloc_crt',0
word_10008578	dw 30Ch			; DATA XREF: .rdata:10007CB0o
		db '_initterm',0
word_10008584	dw 30Dh			; DATA XREF: .rdata:10007CB4o
		db '_initterm_e',0
word_10008592	dw 250h			; DATA XREF: .rdata:10007CB8o
		db '_crt_debugger_hook',0
		align 4
word_100085A8	dw 1ACh			; DATA XREF: .rdata:10007CBCo
		db '__crtUnhandledException',0
word_100085C2	dw 1ABh			; DATA XREF: .rdata:10007CC0o
		db '__crtTerminateProcess',0
word_100085DA	dw 27Ah			; DATA XREF: .rdata:10007CC4o
		db '_except_handler4_common',0
word_100085F4	dw 18Ch			; DATA XREF: .rdata:10007CC8o
		db '__clean_type_info_names_internal',0
		align 4
word_10008618	dw 121h			; DATA XREF: .rdata:10007BF4o
		db 'EncodePointer',0
word_10008628	dw 0FEh			; DATA XREF: .rdata:10007BF0o
		db 'DecodePointer',0
word_10008638	dw 367h			; DATA XREF: .rdata:10007BECo
		db 'IsDebuggerPresent',0
word_1000864C	dw 36Dh			; DATA XREF: .rdata:10007BE8o
		db 'IsProcessorFeaturePresent',0
word_10008668	dw 42Dh			; DATA XREF: .rdata:10007BE4o
		db 'QueryPerformanceCounter',0
word_10008682	dw 2D6h			; DATA XREF: .rdata:10007BE0o
		db 'GetSystemTimeAsFileTime',0
word_1000869C	dw 6E6h			; DATA XREF: .rdata:off_10007C80o
		db 'memcpy',0
		align 1000h
_rdata		ends

; Section 3. (virtual address 00009000)
; Virtual size			: 000003B0 (	944.)
; Section size in file		: 00000200 (	512.)
; Offset to raw	data for section: 00007600
; Flags	C0000040: Data Readable	Writable
; Alignment	: default
; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	para public 'DATA' use32
		assume cs:_data
		;org 10009000h
___security_cookie dd 0BB40E64Eh	; DATA XREF: sub_10002370+Cr
					; sub_100024DF+6r ...
dword_10009004	dd 44BF19B1h		; DATA XREF: ___report_gsfailure+E3r
					; sub_10006871+29w ...
		align 10h
dword_10009010	dd 0FFFFFFFFh		; DATA XREF: ___DllMainCRTStartup+1Cw
					; ___DllMainCRTStartup:$LN20w
; DWORD	dwTlsIndex
dwTlsIndex	dd 0FFFFFFFFh		; DATA XREF: sub_10001252r
					; sub_10003BC3r ...
off_10009018	dd offset off_1000753C	; DATA XREF: sub_10001227:loc_10001247o
					; sub_100069A4w
off_1000901C	dd offset off_100074F8	; DATA XREF: sub_10001227+17o
					; sub_100069BAw
off_10009020	dd offset off_10007554	; DATA XREF: sub_100069AFw
		align 10h
dword_10009030	dd 0			; DATA XREF: sub_10006202+12r
					; sub_10006202+25w ...
		align 8
dword_10009038	dd 0			; DATA XREF: ___report_gsfailure+9Fw
					; .rdata:off_100071E8o
dword_1000903C	dd 0			; DATA XREF: ___report_gsfailure+A9w
		dd 0
dword_10009044	dd 0			; DATA XREF: ___report_gsfailure+9Aw
dword_10009048	dd 0			; DATA XREF: ___report_gsfailure+B3w
dword_1000904C	dd 0			; DATA XREF: ___report_gsfailure+C3w
		dd 0Eh dup(0)
dword_10009088	dd 0			; DATA XREF: ___report_gsfailure+8Bw
					; .rdata:100071ECo
		dd 22h dup(0)
word_10009114	dw 0			; DATA XREF: ___report_gsfailure+5Fw
		align 4
word_10009118	dw 0			; DATA XREF: ___report_gsfailure+58w
		align 4
word_1000911C	dw 0			; DATA XREF: ___report_gsfailure+51w
		align 10h
word_10009120	dw 0			; DATA XREF: ___report_gsfailure+4Aw
		align 4
dword_10009124	dd 0			; DATA XREF: ___report_gsfailure+36w
dword_10009128	dd 0			; DATA XREF: ___report_gsfailure+30w
dword_1000912C	dd 0			; DATA XREF: ___report_gsfailure+2Aw
dword_10009130	dd 0			; DATA XREF: ___report_gsfailure+24w
dword_10009134	dd 0			; DATA XREF: ___report_gsfailure+1Ew
dword_10009138	dd 0			; DATA XREF: ___report_gsfailure:loc_100065A5w
dword_1000913C	dd 0			; DATA XREF: ___report_gsfailure+70w
dword_10009140	dd 0			; DATA XREF: ___report_gsfailure+78w
					; ___report_gsfailure+95r
word_10009144	dw 0			; DATA XREF: ___report_gsfailure+43w
		align 4
dword_10009148	dd 0			; DATA XREF: ___report_gsfailure+67w
dword_1000914C	dd 0			; DATA XREF: ___report_gsfailure+80w
word_10009150	dw 0			; DATA XREF: ___report_gsfailure+3Cw
		align 4
		dd 2Bh dup(0)
		dd 55h dup(?)
dword_10009354	dd ?			; DATA XREF: ___raise_securityfailure+Bw
					; ___raise_securityfailure+1Dr
dword_10009358	dd 4 dup(?)		; DATA XREF: sub_1000695Ao
flt_10009368	dd ?			; DATA XREF: sub_10001000+AAw
byte_1000936C	db ?			; DATA XREF: sub_10001A4E+CDr
					; sub_10001A4E+11Br ...
		align 10h
		dd ?
; void *dword_10009374
dword_10009374	dd ?			; DATA XREF: sub_10001915:loc_10001936o
					; sub_100043A0w ...
dword_10009378	dd ?			; DATA XREF: sub_100043A0+7w
					; sub_100043E6+2Fw
dword_1000937C	dd ?			; DATA XREF: sub_1000277C:loc_1000278Cr
					; sub_1000277C+1Cw
dword_10009380	dd ?			; DATA XREF: sub_10002370+132o
					; sub_1000277C+38r ...
		dd 4 dup(?)
dword_10009394	dd ?			; DATA XREF: sub_1000277C:loc_100027ADr
dword_10009398	dd ?			; DATA XREF: sub_10001915r
					; sub_10001915+Cw
dword_1000939C	dd ?			; DATA XREF: sub_10006202+20o
					; sub_10006202+112o ...
dword_100093A0	dd ?			; DATA XREF: sub_10006202:loc_10006255r
					; sub_10006202:loc_1000631Ew ...
dword_100093A4	dd ?			; DATA XREF: sub_10006202:loc_100063C2r
					; sub_10006202+1C9o ...
; PVOID	dword_100093A8
dword_100093A8	dd ?			; DATA XREF: ___atonexitinit+27w
					; sub_100060BB+49r ...
; PVOID	Ptr
Ptr		dd ?			; DATA XREF: ___atonexitinitr
					; ___atonexitinit+22w ...
		align 1000h
_data		ends


		end DllEntryPoint
