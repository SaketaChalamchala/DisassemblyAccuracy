;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	5094723DAE6156268CC6A61532680A06
; Input	CRC32 :	0BA99A08

; File Name   :	C:\compspace\compare\firefox\dlls\original\nssdbm3.dll
; Format      :	Portable executable for	80386 (PE)
; Imagebase   :	10000000
; Section 1. (virtual address 00001000)
; Virtual size			: 00011DE2 (  73186.)
; Section size in file		: 00011E00 (  73216.)
; Offset to raw	data for section: 00000400
; Flags	60000020: Text Executable Readable
; Alignment	: default
; PDB File Name	: c:\builds\moz2_slave\rel-m-rel-w32_bld-000000000000\build\obj-firefox\security\nss\lib\softoken\legacydb\nssdbm3.pdb
; OS type	  :  MS	Windows
; Application type:  DLL 32bit

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 10001000h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


sub_10001000	proc near		; CODE XREF: sub_10001392+89p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		push	[esp+4+arg_4]
		call	PORT_Alloc_Util
		mov	esi, eax
		pop	ecx
		test	esi, esi
		jnz	short loc_10001013
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10001013:				; CODE XREF: sub_10001000+Fj
		push	edi
		push	[esp+8+arg_4]
		push	esi
		push	[esp+10h+arg_0]
		call	ds:PR_Read
		mov	edi, eax
		add	esp, 0Ch
		cmp	edi, [esp+8+arg_4]
		jz	short loc_1000104C
		push	esi
		call	PORT_Free_Util
		pop	ecx
		test	edi, edi
		jle	short loc_10001048
		push	0
		push	0FFFFE012h
		call	ds:PR_SetError
		pop	ecx
		pop	ecx

loc_10001048:				; CODE XREF: sub_10001000+37j
		xor	eax, eax
		jmp	short loc_1000104E
; ---------------------------------------------------------------------------

loc_1000104C:				; CODE XREF: sub_10001000+2Cj
		mov	eax, esi

loc_1000104E:				; CODE XREF: sub_10001000+4Aj
		pop	edi
		pop	esi
		retn
sub_10001000	endp


; =============== S U B	R O U T	I N E =======================================


sub_10001051	proc near		; CODE XREF: sub_10001099+32p
					; sub_10001142+2Ap ...

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		cmp	dword ptr [eax+4], 26h
		mov	ecx, [eax]
		jb	short loc_1000106B
		test	ecx, ecx
		jz	short loc_1000106B
		cmp	byte ptr [ecx+1], 8
		jnz	short loc_1000106B
		xor	eax, eax
		inc	eax
		retn
; ---------------------------------------------------------------------------

loc_1000106B:				; CODE XREF: sub_10001051+Aj
					; sub_10001051+Ej ...
		xor	eax, eax
		retn
sub_10001051	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000106E	proc near		; DATA XREF: sub_100015E5+66o

arg_0		= dword	ptr  4

		push	esi
		push	edi
		mov	edi, [esp+8+arg_0]
		push	edi
		mov	esi, [edi+1Ch]
		call	sub_10001101
		push	esi
		call	dword ptr [esi+4]
		push	dword ptr [edi+24h]
		mov	esi, eax
		call	PORT_Free_Util
		push	edi
		call	PORT_Free_Util
		add	esp, 10h
		mov	eax, esi
		pop	edi
		pop	esi
		retn
sub_1000106E	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10001099	proc near		; DATA XREF: sub_100015E5+74o

var_8		= byte ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ecx
		push	esi
		mov	esi, [ebp+arg_0]
		push	edi
		push	esi
		mov	edi, [esi+1Ch]
		call	sub_10001101
		cmp	dword ptr [esi+2Ch], 0
		pop	ecx
		jnz	short loc_100010E1
		push	0
		lea	eax, [ebp+var_8]
		push	eax
		push	[ebp+arg_4]
		push	edi
		call	dword ptr [edi+0Ch]
		add	esp, 10h
		test	eax, eax
		jnz	short loc_100010E1
		lea	eax, [ebp+var_8]
		push	eax
		call	sub_10001051
		pop	ecx
		test	eax, eax
		jz	short loc_100010E1
		lea	eax, [ebp+var_8]
		push	eax
		push	esi
		call	sub_1000148D
		pop	ecx
		pop	ecx

loc_100010E1:				; CODE XREF: sub_10001099+18j
					; sub_10001099+2Cj ...
		push	[ebp+arg_8]
		push	[ebp+arg_4]
		push	edi
		call	dword ptr [edi+8]
		add	esp, 0Ch
		pop	edi
		pop	esi
		mov	esp, ebp
		pop	ebp
		retn
sub_10001099	endp


; =============== S U B	R O U T	I N E =======================================


sub_100010F4	proc near		; DATA XREF: sub_100015E5+90o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax+1Ch]
		push	eax
		call	dword ptr [eax+20h]
		pop	ecx
		retn
sub_100010F4	endp


; =============== S U B	R O U T	I N E =======================================


sub_10001101	proc near		; CODE XREF: sub_1000106E+Ap
					; sub_10001099+Ep ...

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		push	edi
		xor	edi, edi
		cmp	[esi+30h], edi
		jz	short loc_1000112B
		push	dword ptr [esi+38h]
		push	dword ptr [esi+34h]
		call	ds:PR_MemUnmap
		push	dword ptr [esi+30h]
		call	ds:PR_CloseFileMap
		add	esp, 0Ch
		mov	[esi+30h], edi
		jmp	short loc_10001139
; ---------------------------------------------------------------------------

loc_1000112B:				; CODE XREF: sub_10001101+Bj
		cmp	[esi+34h], edi
		jz	short loc_1000113F
		push	dword ptr [esi+34h]
		call	PORT_Free_Util
		pop	ecx

loc_10001139:				; CODE XREF: sub_10001101+28j
		mov	[esi+38h], edi
		mov	[esi+34h], edi

loc_1000113F:				; CODE XREF: sub_10001101+2Dj
		pop	edi
		pop	esi
		retn
sub_10001101	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10001142	proc near		; DATA XREF: sub_100015E5+6Do

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	esi
		push	edi
		mov	edi, [ebp+arg_0]
		push	edi
		mov	esi, [edi+1Ch]
		call	sub_10001101
		push	[ebp+arg_C]
		push	[ebp+arg_8]
		push	[ebp+arg_4]
		push	esi
		call	dword ptr [esi+0Ch]
		mov	edx, eax
		add	esp, 14h
		test	edx, edx
		jnz	short loc_10001183
		push	[ebp+arg_8]
		call	sub_10001051
		pop	ecx
		test	eax, eax
		jz	short loc_10001183
		push	[ebp+arg_8]
		push	edi
		call	sub_10001392
		pop	ecx
		pop	ecx
		mov	edx, eax

loc_10001183:				; CODE XREF: sub_10001142+25j
					; sub_10001142+32j
		pop	edi
		mov	eax, edx
		pop	esi
		pop	ebp
		retn
sub_10001142	endp


; =============== S U B	R O U T	I N E =======================================


sub_10001189	proc near		; CODE XREF: sub_10001392+14p
					; sub_1000148D+Cp ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		cmp	[esp+arg_0], 0
		jz	short loc_100011BF
		mov	edx, [esp+arg_4]
		push	edx
		call	sub_10001051
		pop	ecx
		test	eax, eax
		jz	short loc_100011BF
		mov	eax, [edx]
		add	eax, 8
		jz	short loc_100011BF
		cmp	byte ptr [eax],	0
		jz	short loc_100011BF
		push	eax
		push	[esp+4+arg_0]
		push	offset aSS	; "%s/%s"
		call	ds:PR_smprintf
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_100011BF:				; CODE XREF: sub_10001189+5j
					; sub_10001189+14j ...
		push	0
		push	0FFFFE012h
		call	ds:PR_SetError
		pop	ecx
		pop	ecx
		xor	eax, eax
		retn
sub_10001189	endp


; =============== S U B	R O U T	I N E =======================================


sub_100011D1	proc near		; CODE XREF: sub_100012EF+6Cp

var_24		= byte ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= byte ptr -18h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 24h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+24h+var_4], eax
		mov	eax, [esp+24h+arg_8]
		mov	edx, [esp+24h+arg_4]
		push	ebx
		push	ebp
		mov	ecx, [eax+4]
		mov	eax, ecx
		mov	ebp, [esp+2Ch+arg_C]
		push	esi
		push	edi
		mov	edi, [esp+34h+arg_0]
		add	edi, 3Ch
		shr	eax, 8
		mov	[esp+34h+var_1C], 14h
		mov	[edi+5], al
		mov	eax, ecx
		mov	[edi+4], cl
		shr	eax, 10h
		mov	[edi+6], al
		lea	eax, [esp+34h+var_18]
		shr	ecx, 18h
		mov	dword ptr [edi], 808h
		mov	[edi+7], cl
		push	dword ptr [edx+4]
		mov	[esp+38h+var_20], eax
		push	dword ptr [edx]
		push	eax
		call	sub_1000E0C0
		lea	eax, [esp+40h+var_24]
		mov	byte ptr [edi+8], 62h
		push	eax
		push	1Dh
		pop	ebx
		push	ebx
		lea	esi, [edi+9]
		push	esi
		push	0
		call	NSSBase64_EncodeItem_Util
		add	esp, 1Ch
		mov	byte ptr [edi+25h], 0

loc_10001252:				; CODE XREF: sub_100011D1+8Dj
		dec	ebx
		cmp	byte ptr [esi],	2Fh
		jnz	short loc_1000125B
		mov	byte ptr [esi],	2Dh

loc_1000125B:				; CODE XREF: sub_100011D1+85j
		inc	esi
		test	ebx, ebx
		jnz	short loc_10001252
		mov	ecx, [esp+34h+var_4]
		mov	[ebp+0], edi
		pop	edi
		pop	esi
		mov	dword ptr [ebp+4], 26h
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 24h
		retn
sub_100011D1	endp


; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1000127D(char	*)
sub_1000127D	proc near		; CODE XREF: sub_100015E5+1Ap

arg_0		= dword	ptr  4

		push	ebx
		push	ebp
		push	esi
		push	edi
		mov	edi, [esp+10h+arg_0]
		push	edi		; char *
		call	strlen
		mov	ebx, eax
		mov	ebp, offset a_dir ; ".dir"
		pop	ecx
		mov	esi, ebx
		lea	ecx, [ebx+edi]
		jmp	short loc_100012A5
; ---------------------------------------------------------------------------

loc_1000129A:				; CODE XREF: sub_1000127D+2Aj
		mov	al, [ecx]
		cmp	al, 2Eh
		jz	short loc_100012AE
		cmp	al, 2Fh
		jz	short loc_100012A9
		dec	ecx

loc_100012A5:				; CODE XREF: sub_1000127D+1Bj
		cmp	ecx, edi
		ja	short loc_1000129A

loc_100012A9:				; CODE XREF: sub_1000127D+25j
		cmp	byte ptr [ecx],	2Eh
		jnz	short loc_100012C1

loc_100012AE:				; CODE XREF: sub_1000127D+21j
		mov	esi, ecx
		push	ebp		; char *
		push	ecx		; char *
		sub	esi, edi
		call	strcmp
		pop	ecx
		pop	ecx
		test	eax, eax
		jnz	short loc_100012C1
		mov	esi, ebx

loc_100012C1:				; CODE XREF: sub_1000127D+2Fj
					; sub_1000127D+40j
		lea	eax, [esi+5]
		push	eax
		call	PORT_ZAlloc_Util
		mov	ebx, eax
		pop	ecx
		test	ebx, ebx
		jz	short loc_100012EA
		push	esi		; size_t
		push	edi		; void *
		push	ebx		; void *
		call	memcpy
		push	5		; size_t
		lea	eax, [ebx+esi]
		push	ebp		; void *
		push	eax		; void *
		call	memcpy
		add	esp, 18h
		mov	eax, ebx

loc_100012EA:				; CODE XREF: sub_1000127D+52j
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
sub_1000127D	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_100012EF	proc near		; DATA XREF: sub_100015E5+7Bo

var_10		= byte ptr -10h
var_8		= byte ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	ebx
		push	esi
		mov	esi, [ebp+arg_0]
		push	edi
		push	esi
		mov	edi, [esi+1Ch]
		call	sub_10001101
		cmp	dword ptr [esi+2Ch], 0
		pop	ecx
		jnz	short loc_1000137A
		push	0
		lea	eax, [ebp+var_8]
		push	eax
		push	[ebp+arg_4]
		push	edi
		call	dword ptr [edi+0Ch]
		add	esp, 10h
		test	eax, eax
		jnz	short loc_10001346
		cmp	[ebp+arg_C], 8
		jnz	short loc_1000132C
		push	8
		push	[ebp+arg_8]
		jmp	short loc_10001381
; ---------------------------------------------------------------------------

loc_1000132C:				; CODE XREF: sub_100012EF+34j
		lea	eax, [ebp+var_8]
		push	eax
		call	sub_10001051
		pop	ecx
		test	eax, eax
		jz	short loc_10001346
		lea	eax, [ebp+var_8]
		push	eax
		push	esi
		call	sub_1000148D
		pop	ecx
		pop	ecx

loc_10001346:				; CODE XREF: sub_100012EF+2Ej
					; sub_100012EF+49j
		mov	ebx, [ebp+arg_8]
		cmp	dword ptr [ebx+4], 3800h
		jbe	short loc_1000137D
		lea	eax, [ebp+var_10]
		push	eax
		push	ebx
		push	[ebp+arg_4]
		push	esi
		call	sub_100011D1
		push	ebx
		lea	eax, [ebp+var_10]
		push	eax
		push	dword ptr [esi+28h]
		push	esi
		call	sub_10001518
		add	esp, 20h
		lea	ebx, [ebp+var_10]
		test	eax, eax
		jnz	short loc_1000138B
		jmp	short loc_1000137D
; ---------------------------------------------------------------------------

loc_1000137A:				; CODE XREF: sub_100012EF+1Aj
		mov	ebx, [ebp+arg_8]

loc_1000137D:				; CODE XREF: sub_100012EF+61j
					; sub_100012EF+89j
		push	[ebp+arg_C]
		push	ebx

loc_10001381:				; CODE XREF: sub_100012EF+3Bj
		push	[ebp+arg_4]
		push	edi
		call	dword ptr [edi+10h]
		add	esp, 10h

loc_1000138B:				; CODE XREF: sub_100012EF+87j
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
sub_100012EF	endp


; =============== S U B	R O U T	I N E =======================================


sub_10001392	proc near		; CODE XREF: sub_10001142+38p
					; sub_100014B8+38p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		push	ebx
		push	ebp
		push	esi
		mov	esi, [esp+0Ch+arg_4]
		xor	ebx, ebx
		push	edi
		push	esi
		push	dword ptr [eax+24h]
		xor	edi, edi
		call	sub_10001189
		mov	ebp, eax
		pop	ecx
		pop	ecx
		test	ebp, ebp
		jz	loc_1000145A
		push	ebx
		push	1
		push	ebp
		call	ds:PR_OpenFile
		push	ebp
		mov	edi, eax
		call	ds:PR_smprintf_free
		add	esp, 10h
		test	edi, edi
		jz	loc_1000145A
		mov	ecx, [esi]
		push	ebx
		movzx	esi, byte ptr [ecx+7]
		movzx	eax, byte ptr [ecx+6]
		shl	esi, 8
		or	esi, eax
		movzx	eax, byte ptr [ecx+5]
		shl	esi, 8
		or	esi, eax
		movzx	eax, byte ptr [ecx+4]
		shl	esi, 8
		or	esi, eax
		mov	eax, esi
		cdq
		push	edx
		push	eax
		push	edi
		call	ds:PR_CreateFileMap
		mov	ebx, eax
		add	esp, 10h
		test	ebx, ebx
		jnz	short loc_10001424
		call	ds:PR_GetError
		cmp	eax, 0FFFFE898h
		jnz	short loc_1000145A
		push	esi
		push	edi
		call	sub_10001000
		pop	ecx
		pop	ecx
		jmp	short loc_10001433
; ---------------------------------------------------------------------------

loc_10001424:				; CODE XREF: sub_10001392+78j
		push	esi
		push	0
		push	0
		push	ebx
		call	ds:PR_MemMap
		add	esp, 10h

loc_10001433:				; CODE XREF: sub_10001392+90j
		mov	ebp, eax
		test	ebp, ebp
		jz	short loc_1000145A
		push	edi
		call	ds:PR_Close
		mov	eax, [esp+14h+arg_0]
		mov	[eax+30h], ebx
		mov	[eax+34h], ebp
		mov	[eax+38h], esi
		mov	eax, [esp+14h+arg_4]
		mov	[eax], ebp
		mov	[eax+4], esi
		xor	eax, eax
		jmp	short loc_10001487
; ---------------------------------------------------------------------------

loc_1000145A:				; CODE XREF: sub_10001392+1Fj
					; sub_10001392+3Dj ...
		call	ds:PR_GetError
		mov	esi, eax
		test	ebx, ebx
		jz	short loc_1000146E
		push	ebx
		call	ds:PR_CloseFileMap
		pop	ecx

loc_1000146E:				; CODE XREF: sub_10001392+D2j
		test	edi, edi
		jz	short loc_1000147A
		push	edi
		call	ds:PR_Close
		pop	ecx

loc_1000147A:				; CODE XREF: sub_10001392+DEj
		push	0
		push	esi
		call	ds:PR_SetError
		pop	ecx
		or	eax, 0FFFFFFFFh

loc_10001487:				; CODE XREF: sub_10001392+C6j
		pop	ecx
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
sub_10001392	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000148D	proc near		; CODE XREF: sub_10001099+41p
					; sub_100012EF+50p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		push	esi
		push	[esp+4+arg_4]
		push	dword ptr [eax+24h]
		call	sub_10001189
		mov	esi, eax
		pop	ecx
		pop	ecx
		test	esi, esi
		jz	short loc_100014B6
		push	esi
		call	ds:PR_Delete
		push	esi
		call	ds:PR_smprintf_free
		pop	ecx
		pop	ecx

loc_100014B6:				; CODE XREF: sub_1000148D+17j
		pop	esi
		retn
sub_1000148D	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_100014B8	proc near		; DATA XREF: sub_100015E5+82o

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	esi
		push	edi
		mov	edi, [ebp+arg_0]
		push	edi
		mov	esi, [edi+1Ch]
		call	sub_10001101
		push	[ebp+arg_C]
		push	[ebp+arg_8]
		push	[ebp+arg_4]
		push	esi
		call	dword ptr [esi+14h]
		mov	esi, eax
		add	esp, 14h
		test	esi, esi
		jnz	short loc_100014F7
		push	[ebp+arg_8]
		call	sub_10001051
		pop	ecx
		test	eax, eax
		jz	short loc_100014F7
		push	[ebp+arg_8]
		push	edi
		call	sub_10001392
		pop	ecx
		pop	ecx

loc_100014F7:				; CODE XREF: sub_100014B8+25j
					; sub_100014B8+32j
		pop	edi
		mov	eax, esi
		pop	esi
		pop	ebp
		retn
sub_100014B8	endp


; =============== S U B	R O U T	I N E =======================================


sub_100014FD	proc near		; DATA XREF: sub_100015E5+89o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		push	esi
		push	eax
		mov	esi, [eax+1Ch]
		call	sub_10001101
		push	[esp+8+arg_4]
		push	esi
		call	dword ptr [esi+18h]
		add	esp, 0Ch
		pop	esi
		retn
sub_100014FD	endp


; =============== S U B	R O U T	I N E =======================================


sub_10001518	proc near		; CODE XREF: sub_100012EF+7Ap

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebx
		push	ebp
		push	esi
		mov	esi, [esp+0Ch+arg_0]
		xor	ebp, ebp
		push	[esp+0Ch+arg_8]
		push	dword ptr [esi+24h]
		call	sub_10001189
		mov	ebx, eax
		pop	ecx
		pop	ecx
		test	ebx, ebx
		jz	loc_100015C8
		push	1
		push	dword ptr [esi+24h]
		call	ds:PR_Access
		pop	ecx
		pop	ecx
		test	eax, eax
		jz	short loc_10001568
		mov	eax, [esp+0Ch+arg_4]
		sar	eax, 2
		and	eax, 49h
		or	eax, [esp+0Ch+arg_4]
		push	eax
		push	dword ptr [esi+24h]
		call	ds:PR_MkDir
		pop	ecx
		pop	ecx
		test	eax, eax
		jnz	short loc_100015B8

loc_10001568:				; CODE XREF: sub_10001518+30j
		push	[esp+0Ch+arg_4]
		push	2Ah
		push	ebx
		call	ds:PR_OpenFile
		add	esp, 0Ch
		mov	[esp+0Ch+arg_0], eax
		test	eax, eax
		jnz	short loc_1000158A
		call	ds:PR_GetError
		mov	ebp, eax
		jmp	short loc_100015B8
; ---------------------------------------------------------------------------

loc_1000158A:				; CODE XREF: sub_10001518+66j
		push	edi
		mov	edi, [esp+10h+arg_C]
		push	dword ptr [edi+4]
		push	dword ptr [edi]
		push	eax
		call	ds:PR_Write
		mov	esi, eax
		call	ds:PR_GetError
		push	[esp+1Ch+arg_0]
		mov	ebp, eax
		call	ds:PR_Close
		add	esp, 10h
		cmp	esi, [edi+4]
		pop	edi
		jge	short loc_100015DA

loc_100015B8:				; CODE XREF: sub_10001518+4Ej
					; sub_10001518+70j
		push	ebx
		call	ds:PR_Delete
		push	ebx
		call	ds:PR_smprintf_free
		pop	ecx
		pop	ecx

loc_100015C8:				; CODE XREF: sub_10001518+1Bj
		push	0
		push	ebp
		call	ds:PR_SetError
		pop	ecx
		or	eax, 0FFFFFFFFh

loc_100015D5:				; CODE XREF: sub_10001518+CBj
		pop	ecx
		pop	esi
		pop	ebp
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_100015DA:				; CODE XREF: sub_10001518+9Ej
		push	ebx
		call	ds:PR_smprintf_free
		xor	eax, eax
		jmp	short loc_100015D5
sub_10001518	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_100015E5(char	*, int,	int, int)
sub_100015E5	proc near		; CODE XREF: sub_1000C81F+4Ep
					; sub_1000CF2B+42p ...

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	esi
		push	64h
		call	PORT_ZAlloc_Util
		mov	esi, eax
		pop	ecx
		test	esi, esi
		jz	loc_10001697
		push	edi
		push	[ebp+arg_0]	; char *
		call	sub_1000127D
		mov	[esi+24h], eax
		pop	ecx
		test	eax, eax
		jz	short loc_1000167E
		mov	ecx, [ebp+arg_8]
		xor	eax, eax
		cmp	[ebp+arg_4], eax
		mov	edi, [ebp+arg_C]
		push	offset dword_100132A8 ;	int
		push	edi		; int
		push	ecx		; int
		push	[ebp+arg_4]	; int
		setz	al
		mov	[esi+28h], ecx
		push	[ebp+arg_0]	; char *
		mov	[esi+2Ch], eax
		xor	eax, eax
		mov	[esi+30h], eax
		mov	[esi+34h], eax
		mov	[esi+38h], eax
		call	sub_1000E2C0
		add	esp, 14h
		test	eax, eax
		jz	short loc_1000167E
		mov	[esi+1Ch], eax
		mov	eax, esi
		mov	[esi], edi
		mov	dword ptr [esi+4], offset sub_1000106E
		mov	dword ptr [esi+0Ch], offset sub_10001142
		mov	dword ptr [esi+8], offset sub_10001099
		mov	dword ptr [esi+10h], offset sub_100012EF
		mov	dword ptr [esi+14h], offset sub_100014B8
		mov	dword ptr [esi+18h], offset sub_100014FD
		mov	dword ptr [esi+20h], offset sub_100010F4
		jmp	short loc_10001696
; ---------------------------------------------------------------------------

loc_1000167E:				; CODE XREF: sub_100015E5+25j
					; sub_100015E5+5Dj
		cmp	dword ptr [esi+24h], 0
		jz	short loc_1000168D
		push	dword ptr [esi+24h]
		call	PORT_Free_Util
		pop	ecx

loc_1000168D:				; CODE XREF: sub_100015E5+9Dj
		push	esi
		call	PORT_Free_Util
		pop	ecx
		xor	eax, eax

loc_10001696:				; CODE XREF: sub_100015E5+97j
		pop	edi

loc_10001697:				; CODE XREF: sub_100015E5+10j
		pop	esi
		pop	ebp
		retn
sub_100015E5	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_1000169A	proc near		; CODE XREF: sub_10001FBF+28p
					; sub_100022AC+FCp ...

var_10		= byte ptr -10h
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	0
		lea	eax, [ebp+var_10]
		mov	[ebp+var_8], offset aGlobalSalt	; "global-salt"
		push	eax
		lea	eax, [ebp+var_8]
		mov	[ebp+var_4], 0Bh
		push	eax
		push	[ebp+arg_0]
		call	sub_10001A0E
		add	esp, 10h
		test	eax, eax
		jz	short loc_100016CB
		xor	eax, eax
		jmp	short loc_100016D5
; ---------------------------------------------------------------------------

loc_100016CB:				; CODE XREF: sub_1000169A+2Bj
		lea	eax, [ebp+var_10]
		push	eax
		call	sub_10001719
		pop	ecx

loc_100016D5:				; CODE XREF: sub_1000169A+2Fj
		mov	esp, ebp
		pop	ebp
		retn
sub_1000169A	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_100016D9	proc near		; CODE XREF: sub_100023BA+E7p
					; sub_100024FC+88p

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		mov	ecx, [ebp+arg_4]
		push	0
		mov	[ebp+var_10], offset aGlobalSalt ; "global-salt"
		mov	[ebp+var_C], 0Bh
		mov	eax, [ecx+4]
		mov	[ebp+var_8], eax
		mov	eax, [ecx+8]
		mov	[ebp+var_4], eax
		lea	eax, [ebp+var_8]
		push	eax
		lea	eax, [ebp+var_10]
		push	eax
		push	[ebp+arg_0]
		call	sub_10001A41
		add	esp, 10h
		neg	eax
		sbb	eax, eax
		mov	esp, ebp
		pop	ebp
		retn
sub_100016D9	endp


; =============== S U B	R O U T	I N E =======================================


sub_10001719	proc near		; CODE XREF: sub_1000169A+35p
					; sub_100026D0+72p

arg_0		= dword	ptr  4

		push	esi
		push	0Ch
		call	PORT_ZAlloc_Util
		mov	esi, eax
		pop	ecx
		test	esi, esi
		jnz	short loc_1000172A
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1000172A:				; CODE XREF: sub_10001719+Dj
		push	edi
		mov	edi, [esp+8+arg_0]
		push	dword ptr [edi+4]
		call	PORT_ZAlloc_Util
		pop	ecx
		mov	ecx, eax
		mov	[esi+4], ecx
		test	ecx, ecx
		jnz	short loc_1000174C
		push	esi
		call	PORT_Free_Util
		pop	ecx
		xor	eax, eax
		jmp	short loc_10001760
; ---------------------------------------------------------------------------

loc_1000174C:				; CODE XREF: sub_10001719+26j
		mov	eax, [edi+4]
		push	eax		; size_t
		mov	[esi+8], eax
		push	dword ptr [edi]	; void *
		push	ecx		; void *
		call	memcpy
		add	esp, 0Ch
		mov	eax, esi

loc_10001760:				; CODE XREF: sub_10001719+31j
		pop	edi
		pop	esi
		retn
sub_10001719	endp


; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10001763(int,	size_t)
sub_10001763	proc near		; CODE XREF: sub_100019AB+34p
					; sub_100026D0+13Bp ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebx
		mov	ebx, [esp+4+arg_0]
		push	ebp
		push	esi
		push	edi
		mov	ebx, [ebx]
		movzx	eax, byte ptr [ebx]
		cmp	eax, [esp+10h+arg_4]
		jnz	loc_1000185A
		push	800h
		call	PORT_NewArena_Util
		mov	edi, eax
		pop	ecx
		test	edi, edi
		jz	loc_1000185A
		push	24h
		push	edi
		call	PORT_ArenaZAlloc_Util
		mov	esi, eax
		pop	ecx
		pop	ecx
		test	esi, esi
		jz	loc_10001850
		and	dword ptr [esi+10h], 0
		and	dword ptr [esi+1Ch], 0
		mov	[esi], edi
		movzx	eax, byte ptr [ebx+1]
		push	eax
		push	edi
		mov	[esi+14h], eax
		call	PORT_ArenaZAlloc_Util
		mov	[esi+10h], eax
		pop	ecx
		pop	ecx
		test	eax, eax
		jz	loc_10001850
		mov	ebp, [esi+14h]
		push	2
		pop	eax
		add	ebp, eax
		cmp	[esp+10h+arg_4], 3
		jl	short loc_10001811
		movzx	eax, byte ptr [ebx+2]
		mov	[esp+10h+arg_4], eax
		test	eax, eax
		jz	short loc_1000180B
		inc	eax
		push	eax
		push	edi
		call	PORT_ArenaZAlloc_Util
		mov	[esi+8], eax
		pop	ecx
		pop	ecx
		test	eax, eax
		jz	short loc_10001807
		push	[esp+10h+arg_4]	; size_t
		lea	ecx, [ebx+1]
		add	ecx, ebp
		push	ecx		; void *
		push	eax		; void *
		call	memcpy
		add	esp, 0Ch

loc_10001807:				; CODE XREF: sub_10001763+8Fj
		mov	eax, [esp+10h+arg_4]

loc_1000180B:				; CODE XREF: sub_10001763+7Ej
		inc	ebp
		push	3
		add	ebp, eax
		pop	eax

loc_10001811:				; CODE XREF: sub_10001763+72j
		push	dword ptr [esi+14h] ; size_t
		add	eax, ebx
		push	eax		; void *
		push	dword ptr [esi+10h] ; void *
		call	memcpy
		mov	eax, [esp+1Ch+arg_0]
		mov	eax, [eax+4]
		sub	eax, ebp
		push	eax
		push	edi
		mov	[esi+20h], eax
		call	PORT_ArenaZAlloc_Util
		add	esp, 14h
		mov	[esi+1Ch], eax
		test	eax, eax
		jz	short loc_10001850
		push	dword ptr [esi+20h] ; size_t
		lea	ecx, [ebx+ebp]
		push	ecx		; void *
		push	eax		; void *
		call	memcpy
		add	esp, 0Ch
		mov	eax, esi
		jmp	short loc_1000185C
; ---------------------------------------------------------------------------

loc_10001850:				; CODE XREF: sub_10001763+3Aj
					; sub_10001763+5Fj ...
		push	0
		push	edi
		call	PORT_FreeArena_Util
		pop	ecx
		pop	ecx

loc_1000185A:				; CODE XREF: sub_10001763+11j
					; sub_10001763+26j
		xor	eax, eax

loc_1000185C:				; CODE XREF: sub_10001763+EBj
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
sub_10001763	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10001861	proc near		; CODE XREF: sub_100023BA+A9p
					; sub_100026D0+166p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	ebx
		push	esi
		push	edi
		push	[ebp+arg_8]
		call	SECOID_FindOIDByTag_Util
		mov	esi, eax
		pop	ecx
		test	esi, esi
		jz	short loc_100018D8
		mov	ebx, [ebp+arg_C]
		mov	eax, [esi+8]
		mov	edi, [ebp+arg_4]
		mov	edx, [ebx+8]
		inc	edx
		add	eax, edx
		cmp	[ebp+arg_0], 0
		mov	[edi+8], eax
		push	eax
		jz	short loc_1000189A
		push	[ebp+arg_0]
		call	PORT_ArenaAlloc_Util
		pop	ecx
		jmp	short loc_1000189F
; ---------------------------------------------------------------------------

loc_1000189A:				; CODE XREF: sub_10001861+2Cj
		call	PORT_Alloc_Util

loc_1000189F:				; CODE XREF: sub_10001861+37j
		pop	ecx
		mov	ecx, eax
		mov	[edi+4], eax
		test	ecx, ecx
		jz	short loc_100018D8
		mov	al, [esi+8]
		mov	[ecx], al
		push	dword ptr [esi+8] ; size_t
		mov	eax, [edi+4]
		push	dword ptr [esi+4] ; void *
		inc	eax
		push	eax		; void *
		call	memcpy
		push	dword ptr [ebx+8] ; size_t
		mov	eax, [edi+4]
		push	dword ptr [ebx+4] ; void *
		inc	eax
		add	eax, [esi+8]
		push	eax		; void *
		call	memcpy
		add	esp, 18h
		xor	eax, eax
		jmp	short loc_100018DB
; ---------------------------------------------------------------------------

loc_100018D8:				; CODE XREF: sub_10001861+13j
					; sub_10001861+46j
		or	eax, 0FFFFFFFFh

loc_100018DB:				; CODE XREF: sub_10001861+75j
		pop	edi
		pop	esi
		pop	ebx
		pop	ebp
		retn
sub_10001861	endp


; =============== S U B	R O U T	I N E =======================================


sub_100018E0	proc near		; CODE XREF: sub_10002B6A+10p

var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= byte ptr  8

		push	ecx
		push	ebx
		push	ebp
		push	esi
		push	edi
		push	8
		call	PORT_ZAlloc_Util
		mov	edi, eax
		pop	ecx
		test	edi, edi
		jz	short loc_1000193A
		mov	esi, [esp+14h+arg_0]
		mov	ebp, [esi+8]
		test	ebp, ebp
		jz	short loc_1000190A
		push	ebp		; char *
		call	strlen
		pop	ecx
		lea	ebx, [eax+1]
		jmp	short loc_10001912
; ---------------------------------------------------------------------------

loc_1000190A:				; CODE XREF: sub_100018E0+1Cj
		xor	ebx, ebx
		mov	ebp, offset dword_100133A8
		inc	ebx

loc_10001912:				; CODE XREF: sub_100018E0+28j
		mov	eax, [esi+14h]
		add	eax, 3
		add	eax, [esi+20h]
		add	eax, ebx
		push	eax
		mov	[edi+4], eax
		call	PORT_ZAlloc_Util
		pop	ecx
		mov	ecx, eax
		mov	[esp+14h+var_4], ecx
		mov	[edi], ecx
		test	ecx, ecx
		jnz	short loc_10001942
		push	edi
		call	sub_10001991
		pop	ecx

loc_1000193A:				; CODE XREF: sub_100018E0+11j
		xor	eax, eax

loc_1000193C:				; CODE XREF: sub_100018E0+AFj
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_10001942:				; CODE XREF: sub_100018E0+51j
		mov	al, [esp+14h+arg_4]
		mov	[ecx], al
		mov	al, [esi+14h]
		mov	[ecx+1], al
		lea	eax, [ecx+3]
		mov	[ecx+2], bl
		push	dword ptr [esi+14h] ; size_t
		push	dword ptr [esi+10h] ; void *
		push	eax		; void *
		call	memcpy
		mov	eax, [esi+14h]
		push	ebx		; size_t
		add	eax, 3
		add	eax, [esp+24h+var_4]
		push	ebp		; void *
		push	eax		; void *
		call	memcpy
		mov	eax, [esi+14h]
		push	dword ptr [esi+20h] ; size_t
		add	eax, 3
		add	eax, [esp+30h+var_4]
		push	dword ptr [esi+1Ch] ; void *
		add	eax, ebx
		push	eax		; void *
		call	memcpy
		add	esp, 24h
		mov	eax, edi
		jmp	short loc_1000193C
sub_100018E0	endp


; =============== S U B	R O U T	I N E =======================================


sub_10001991	proc near		; CODE XREF: sub_100018E0+54p
					; sub_10002B6A+48p ...

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		test	esi, esi
		jz	short loc_100019A9
		push	dword ptr [esi]
		call	PORT_Free_Util
		push	esi
		call	PORT_Free_Util
		pop	ecx
		pop	ecx

loc_100019A9:				; CODE XREF: sub_10001991+7j
		pop	esi
		retn
sub_10001991	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_100019AB	proc near		; CODE XREF: sub_10001FBF+80p
					; sub_10003197+1Cp

var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ecx
		push	esi
		mov	esi, [ebp+arg_0]
		lea	eax, [ebp+var_8]
		push	0
		push	eax
		push	[ebp+arg_4]
		push	esi
		call	sub_10001A0E
		add	esp, 10h
		test	eax, eax
		jz	short loc_100019D8
		push	0FFFFE012h
		call	PORT_SetError_Util
		xor	eax, eax
		jmp	short loc_100019E5
; ---------------------------------------------------------------------------

loc_100019D8:				; CODE XREF: sub_100019AB+1Dj
		push	dword ptr [esi+0Ch] ; size_t
		lea	eax, [ebp+var_8]
		push	eax		; int
		call	sub_10001763
		pop	ecx

loc_100019E5:				; CODE XREF: sub_100019AB+2Bj
		pop	ecx
		pop	esi
		mov	esp, ebp
		pop	ebp
		retn
sub_100019AB	endp


; =============== S U B	R O U T	I N E =======================================


sub_100019EB	proc near		; CODE XREF: sub_10001CF8+Fp
					; sub_100024FC+2Ep ...

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		push	esi
		push	edi
		mov	edi, [eax+1Ch]
		mov	esi, [eax]
		push	edi
		call	ds:PR_Lock
		push	esi
		call	dword ptr [esi+4]
		push	edi
		call	ds:PR_Unlock
		add	esp, 0Ch
		pop	edi
		pop	esi
		retn
sub_100019EB	endp


; =============== S U B	R O U T	I N E =======================================


sub_10001A0E	proc near		; CODE XREF: sub_1000169A+21p
					; sub_100019AB+13p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	eax, [esp+arg_0]
		push	esi
		push	edi
		mov	edi, [eax+1Ch]
		mov	esi, [eax]
		push	edi
		call	ds:PR_Lock
		push	[esp+0Ch+arg_C]
		push	[esp+10h+arg_8]
		push	[esp+14h+arg_4]
		push	esi
		call	dword ptr [esi+0Ch]
		push	edi
		mov	esi, eax
		call	ds:PR_Unlock
		add	esp, 18h
		mov	eax, esi
		pop	edi
		pop	esi
		retn
sub_10001A0E	endp


; =============== S U B	R O U T	I N E =======================================


sub_10001A41	proc near		; CODE XREF: sub_100016D9+30p
					; sub_10001C47+43p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	eax, [esp+arg_0]
		push	esi
		push	edi
		mov	edi, [eax+1Ch]
		mov	esi, [eax]
		push	edi
		call	ds:PR_Lock
		push	[esp+0Ch+arg_C]
		push	[esp+10h+arg_8]
		push	[esp+14h+arg_4]
		push	esi
		call	dword ptr [esi+10h]
		push	edi
		mov	esi, eax
		call	ds:PR_Unlock
		add	esp, 18h
		mov	eax, esi
		pop	edi
		pop	esi
		retn
sub_10001A41	endp


; =============== S U B	R O U T	I N E =======================================


sub_10001A74	proc near		; CODE XREF: sub_1000262F+21p
					; sub_1000262F+8Fp ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	eax, [esp+arg_0]
		push	esi
		push	edi
		mov	edi, [eax+1Ch]
		mov	esi, [eax]
		push	edi
		call	ds:PR_Lock
		push	[esp+0Ch+arg_C]
		push	[esp+10h+arg_8]
		push	[esp+14h+arg_4]
		push	esi
		call	dword ptr [esi+14h]
		push	edi
		mov	esi, eax
		call	ds:PR_Unlock
		add	esp, 18h
		mov	eax, esi
		pop	edi
		pop	esi
		retn
sub_10001A74	endp


; =============== S U B	R O U T	I N E =======================================


sub_10001AA7	proc near		; CODE XREF: sub_10001E1C+59p
					; sub_100023BA+F6p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		push	esi
		push	edi
		mov	edi, [eax+1Ch]
		mov	esi, [eax]
		push	edi
		call	ds:PR_Lock
		push	[esp+0Ch+arg_4]
		push	esi
		call	dword ptr [esi+18h]
		push	edi
		mov	esi, eax
		call	ds:PR_Unlock
		add	esp, 10h
		mov	eax, esi
		pop	edi
		pop	esi
		retn
sub_10001AA7	endp


; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10001AD2(int,	char *,	int, int)
sub_10001AD2	proc near		; DATA XREF: sub_100078D2+B2o

var_9C		= byte ptr -9Ch
var_98		= dword	ptr -98h
var_94		= dword	ptr -94h
var_8C		= dword	ptr -8Ch
var_88		= dword	ptr -88h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 9Ch
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+9Ch+var_4], eax
		mov	eax, [esp+9Ch+arg_0]
		push	ebx
		push	ebp
		mov	ebp, [esp+0A4h+arg_4]
		push	esi
		mov	esi, [esp+0A8h+arg_8]
		push	edi
		mov	edi, [esp+0ACh+arg_C]
		push	eax
		call	sub_100078AC
		mov	ebx, eax
		pop	ecx
		test	ebx, ebx
		jnz	short loc_10001B1A
		mov	eax, 0E2h
		jmp	short loc_10001B6E
; ---------------------------------------------------------------------------

loc_10001B1A:				; CODE XREF: sub_10001AD2+3Fj
		push	offset aPassword ; "password"
		push	ebp		; char *
		call	strcmp
		pop	ecx
		pop	ecx
		test	eax, eax
		jz	short loc_10001B30

loc_10001B2B:				; CODE XREF: sub_10001AD2+6Dj
		push	5
		pop	eax
		jmp	short loc_10001B6E
; ---------------------------------------------------------------------------

loc_10001B30:				; CODE XREF: sub_10001AD2+57j
		lea	eax, [esp+0ACh+var_9C]
		push	eax
		push	ebx
		call	sub_10001FBF
		pop	ecx
		pop	ecx
		test	eax, eax
		jnz	short loc_10001B2B
		mov	eax, [esp+0ACh+var_94]
		push	eax		; size_t
		push	[esp+0B0h+var_98] ; void *
		mov	[esi+8], eax
		push	dword ptr [esi+4] ; void *
		call	memcpy
		mov	eax, [esp+0B8h+var_88]
		push	eax		; size_t
		push	[esp+0BCh+var_8C] ; void *
		mov	[edi+8], eax
		push	dword ptr [edi+4] ; void *
		call	memcpy
		add	esp, 18h
		xor	eax, eax

loc_10001B6E:				; CODE XREF: sub_10001AD2+46j
					; sub_10001AD2+5Cj
		mov	ecx, [esp+0ACh+var_4]
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 9Ch
		retn
sub_10001AD2	endp


; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10001B87(int,	char *,	int, int)
sub_10001B87	proc near		; DATA XREF: sub_100078D2+B9o

var_9C		= byte ptr -9Ch
var_90		= byte ptr -90h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 9Ch
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+9Ch+var_4], eax
		mov	eax, [esp+9Ch+arg_0]
		push	ebx
		push	ebp
		mov	ebp, [esp+0A4h+arg_C]
		push	esi
		mov	esi, [esp+0A8h+arg_4]
		push	edi
		mov	edi, [esp+0ACh+arg_8]
		push	eax
		call	sub_100078AC
		mov	ebx, eax
		pop	ecx
		test	ebx, ebx
		jnz	short loc_10001BCF
		mov	eax, 0E2h
		jmp	short loc_10001C0B
; ---------------------------------------------------------------------------

loc_10001BCF:				; CODE XREF: sub_10001B87+3Fj
		push	offset aPassword ; "password"
		push	esi		; char *
		call	strcmp
		pop	ecx
		pop	ecx
		test	eax, eax
		jz	short loc_10001BE5
		push	5
		pop	eax
		jmp	short loc_10001C0B
; ---------------------------------------------------------------------------

loc_10001BE5:				; CODE XREF: sub_10001B87+57j
		mov	esi, edi
		lea	eax, [esp+0ACh+var_9C]
		lea	edi, [esp+0ACh+var_9C]
		push	eax
		push	ebx
		movsd
		movsd
		movsd
		mov	esi, ebp
		lea	edi, [esp+0B4h+var_90]
		movsd
		movsd
		movsd
		call	sub_100023BA
		neg	eax
		pop	ecx
		sbb	eax, eax
		pop	ecx
		and	eax, 5

loc_10001C0B:				; CODE XREF: sub_10001B87+46j
					; sub_10001B87+5Cj
		mov	ecx, [esp+0ACh+var_4]
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 9Ch
		retn
sub_10001B87	endp


; =============== S U B	R O U T	I N E =======================================


sub_10001C24	proc near		; DATA XREF: sub_100078D2+D5o

arg_0		= dword	ptr  4

		push	[esp+arg_0]
		call	sub_100078AC
		pop	ecx
		test	eax, eax
		jnz	short loc_10001C38
		mov	eax, 0E2h
		retn
; ---------------------------------------------------------------------------

loc_10001C38:				; CODE XREF: sub_10001C24+Cj
		push	eax
		call	sub_100024FC
		neg	eax
		pop	ecx
		sbb	eax, eax
		and	eax, 5
		retn
sub_10001C24	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10001C47	proc near		; CODE XREF: sub_100024FC+93p
					; sub_100029DF+FBp

var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= byte ptr -14h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 24h
		mov	eax, ___security_cookie
		xor	eax, ebp
		mov	[ebp+var_4], eax
		push	esi
		mov	esi, [ebp+arg_0]
		lea	eax, [ebp+var_14]
		push	10h
		mov	[ebp+var_24], eax
		pop	eax
		push	eax
		mov	[ebp+var_20], eax
		lea	eax, [ebp+var_14]
		push	eax
		mov	[ebp+var_1C], offset aGlobalSalt ; "global-salt"
		mov	[ebp+var_18], 0Bh
		call	sub_1000E040
		push	0
		lea	eax, [ebp+var_24]
		push	eax
		lea	eax, [ebp+var_1C]
		push	eax
		push	esi
		call	sub_10001A41
		mov	ecx, [ebp+var_4]
		add	esp, 18h
		neg	eax
		sbb	eax, eax
		xor	ecx, ebp
		pop	esi
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	esp, ebp
		pop	ebp
		retn
sub_10001C47	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10001CA5	proc near		; CODE XREF: sub_100024FC+6Fp
					; sub_100029DF+B3p

var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_1		= byte ptr -1
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 14h
		push	esi
		mov	esi, [ebp+arg_0]
		lea	eax, [ebp+var_1]
		mov	[ebp+var_C], eax
		lea	eax, [ebp+var_C]
		push	0
		push	eax
		lea	eax, [ebp+var_14]
		mov	[ebp+var_1], 3
		push	eax
		push	esi
		mov	[ebp+var_8], 1
		mov	[ebp+var_14], offset aVersion ;	"Version"
		mov	[ebp+var_10], 7
		call	sub_10001A41
		add	esp, 10h
		test	eax, eax
		jz	short loc_10001CEA
		or	eax, 0FFFFFFFFh
		jmp	short loc_10001CF3
; ---------------------------------------------------------------------------

loc_10001CEA:				; CODE XREF: sub_10001CA5+3Ej
		movzx	eax, [ebp+var_1]
		mov	[esi+0Ch], eax
		xor	eax, eax

loc_10001CF3:				; CODE XREF: sub_10001CA5+43j
		pop	esi
		mov	esp, ebp
		pop	ebp
		retn
sub_10001CA5	endp


; =============== S U B	R O U T	I N E =======================================


sub_10001CF8	proc near		; CODE XREF: sub_100022AC+E9p
					; sub_100026D0+27Dp ...

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		test	esi, esi
		jz	short loc_10001D60
		cmp	dword ptr [esi], 0
		jz	short loc_10001D0D
		push	esi
		call	sub_100019EB
		pop	ecx

loc_10001D0D:				; CODE XREF: sub_10001CF8+Cj
		mov	eax, [esi+4]
		test	eax, eax
		jz	short loc_10001D19
		push	eax
		call	dword ptr [eax+4]
		pop	ecx

loc_10001D19:				; CODE XREF: sub_10001CF8+1Aj
		cmp	dword ptr [esi+14h], 0
		jz	short loc_10001D28
		push	dword ptr [esi+14h]
		call	PORT_Free_Util
		pop	ecx

loc_10001D28:				; CODE XREF: sub_10001CF8+25j
		cmp	dword ptr [esi+10h], 0
		jz	short loc_10001D37
		push	dword ptr [esi+10h]
		call	PORT_Free_Util
		pop	ecx

loc_10001D37:				; CODE XREF: sub_10001CF8+34j
		cmp	dword ptr [esi+8], 0
		jz	short loc_10001D49
		push	1
		push	dword ptr [esi+8]
		call	SECITEM_FreeItem_Util
		pop	ecx
		pop	ecx

loc_10001D49:				; CODE XREF: sub_10001CF8+43j
		cmp	dword ptr [esi+1Ch], 0
		jz	short loc_10001D59
		push	dword ptr [esi+1Ch]
		call	ds:PR_DestroyLock
		pop	ecx

loc_10001D59:				; CODE XREF: sub_10001CF8+55j
		push	esi
		call	PORT_Free_Util
		pop	ecx

loc_10001D60:				; CODE XREF: sub_10001CF8+7j
		pop	esi
		retn
sub_10001CF8	endp


; =============== S U B	R O U T	I N E =======================================


sub_10001D62	proc near		; CODE XREF: sub_100023BA+58p

var_3C		= byte ptr -3Ch
var_30		= dword	ptr -30h
var_24		= byte ptr -24h
var_18		= byte ptr -18h
var_C		= byte ptr -0Ch
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 3Ch
		push	ebx
		push	ebp
		push	esi
		mov	esi, [esp+48h+arg_8]
		xor	ebp, ebp
		push	edi
		push	800h
		mov	ebx, ebp
		mov	[esp+50h+var_30], ebp
		mov	[esi+4], ebp
		call	PORT_NewArena_Util
		mov	edi, eax
		pop	ecx
		test	edi, edi
		jz	loc_10001E14
		push	[esp+4Ch+arg_0]
		lea	eax, [esp+50h+var_24]
		push	offset dword_10013310
		push	eax
		push	edi
		call	SEC_QuickDERDecodeItem_Util
		add	esp, 10h
		test	eax, eax
		jnz	short loc_10001DF8
		lea	eax, [esp+4Ch+var_24]
		push	eax
		call	SECOID_GetAlgorithmTag_Util
		mov	ecx, [esp+50h+arg_4]
		mov	[ecx], eax
		lea	eax, [esp+50h+var_18]
		push	eax
		push	offset dword_100132D0
		lea	eax, [esp+58h+var_3C]
		push	eax
		push	edi
		call	SEC_QuickDERDecodeItem_Util
		add	esp, 14h
		test	eax, eax
		jnz	short loc_10001DF8
		lea	eax, [esp+4Ch+var_3C]
		push	eax
		push	esi
		push	ebp
		call	SECITEM_CopyItem_Util
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_10001DF8
		lea	eax, [esp+4Ch+var_C]
		push	eax
		call	SECITEM_DupItem_Util
		mov	ebx, eax
		pop	ecx
		test	ebx, ebx
		jnz	short loc_10001E09

loc_10001DF8:				; CODE XREF: sub_10001D62+44j
					; sub_10001D62+70j ...
		cmp	[esi+4], ebp
		jz	short loc_10001E09
		push	dword ptr [esi+4]
		call	PORT_Free_Util
		pop	ecx
		mov	[esi+4], ebp

loc_10001E09:				; CODE XREF: sub_10001D62+94j
					; sub_10001D62+99j
		push	ebp
		push	edi
		call	PORT_FreeArena_Util
		pop	ecx
		pop	ecx
		mov	eax, ebx

loc_10001E14:				; CODE XREF: sub_10001D62+25j
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 3Ch
		retn
sub_10001D62	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10001E1C	proc near		; CODE XREF: sub_10006381+18Ap

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ecx
		push	ebx
		mov	ebx, [ebp+arg_0]
		test	ebx, ebx
		jnz	short loc_10001E39

loc_10001E29:				; CODE XREF: sub_10001E1C+54j
					; sub_10001E1C+62j
		push	0FFFFE012h
		call	PORT_SetError_Util
		pop	ecx
		or	eax, 0FFFFFFFFh
		jmp	short loc_10001E80
; ---------------------------------------------------------------------------

loc_10001E39:				; CODE XREF: sub_10001E1C+Bj
		mov	ecx, [ebp+arg_4]
		push	esi
		mov	esi, [ebx]
		push	edi
		mov	eax, [ecx+4]
		mov	edi, [ebx+1Ch]
		mov	[ebp+var_8], eax
		mov	eax, [ecx+8]
		push	edi
		mov	[ebp+var_4], eax
		call	ds:PR_Lock
		push	0
		lea	eax, [ebp+var_8]
		push	eax
		push	esi
		call	dword ptr [esi+8]
		push	edi
		mov	esi, eax
		call	ds:PR_Unlock
		add	esp, 14h
		test	esi, esi
		pop	edi
		pop	esi
		jnz	short loc_10001E29
		push	0
		push	ebx
		call	sub_10001AA7
		pop	ecx
		pop	ecx
		test	eax, eax
		jnz	short loc_10001E29

loc_10001E80:				; CODE XREF: sub_10001E1C+1Bj
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
sub_10001E1C	endp


; =============== S U B	R O U T	I N E =======================================


sub_10001E85	proc near		; CODE XREF: sub_10001FBF+DFp

var_3D		= byte ptr -3Dh
var_3C		= byte ptr -3Ch
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= byte ptr -24h
var_C		= byte ptr -0Ch
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 40h
		push	ebx
		push	ebp
		push	esi
		mov	esi, [esp+4Ch+arg_4]
		lea	eax, [esp+4Ch+var_3D]
		push	edi
		lea	edi, [esp+50h+var_3C]
		mov	[esp+50h+var_3D], 1
		xor	ebp, ebp
		movsd
		mov	ebx, ebp
		push	800h
		movsd
		movsd
		mov	esi, [esp+54h+arg_8]
		lea	edi, [esp+54h+var_C]
		mov	[esp+54h+var_30], ebp
		mov	[esp+54h+var_2C], eax
		mov	[esp+54h+var_28], 1
		movsd
		movsd
		movsd
		call	PORT_NewArena_Util
		mov	esi, eax
		pop	ecx
		test	esi, esi
		jz	short loc_10001F20
		push	offset dword_100132D0
		lea	eax, [esp+54h+var_3C]
		push	eax
		push	ebp
		push	esi
		call	SEC_ASN1EncodeItem_Util
		add	esp, 10h
		test	eax, eax
		jz	short loc_10001F15
		push	eax
		push	[esp+54h+arg_0]
		lea	eax, [esp+58h+var_24]
		push	eax
		push	esi
		call	SECOID_SetAlgorithmID_Util
		add	esp, 10h
		test	eax, eax
		jnz	short loc_10001F15
		push	offset dword_10013310
		lea	eax, [esp+54h+var_24]
		push	eax
		push	ebp
		push	ebp
		call	SEC_ASN1EncodeItem_Util
		add	esp, 10h
		mov	ebx, eax

loc_10001F15:				; CODE XREF: sub_10001E85+61j
					; sub_10001E85+78j
		push	ebp
		push	esi
		call	PORT_FreeArena_Util
		pop	ecx
		pop	ecx
		mov	eax, ebx

loc_10001F20:				; CODE XREF: sub_10001E85+49j
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 40h
		retn
sub_10001E85	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10001F28	proc near		; CODE XREF: sub_10003D97+18p
					; sub_10004867+25p ...

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ecx
		cmp	[ebp+arg_0], 0
		jnz	short loc_10001F42
		push	0FFFFE012h
		call	PORT_SetError_Util
		pop	ecx
		xor	eax, eax
		jmp	short loc_10001F65
; ---------------------------------------------------------------------------

loc_10001F42:				; CODE XREF: sub_10001F28+9j
		mov	ecx, [ebp+arg_4]
		push	[ebp+arg_8]
		push	0
		mov	eax, [ecx+4]
		mov	[ebp+var_8], eax
		mov	eax, [ecx+8]
		mov	[ebp+var_4], eax
		lea	eax, [ebp+var_8]
		push	eax
		push	[ebp+arg_0]
		call	sub_10003197
		add	esp, 10h

loc_10001F65:				; CODE XREF: sub_10001F28+18j
		mov	esp, ebp
		pop	ebp
		retn
sub_10001F28	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10001F69	proc near		; CODE XREF: sub_10003DB8+18p

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		and	[ebp+var_4], 0
		cmp	[ebp+arg_0], 0
		jnz	short loc_10001F88
		push	0FFFFE012h
		call	PORT_SetError_Util
		pop	ecx
		xor	eax, eax
		jmp	short loc_10001FBB
; ---------------------------------------------------------------------------

loc_10001F88:				; CODE XREF: sub_10001F69+Ej
		mov	ecx, [ebp+arg_4]
		push	[ebp+arg_8]
		mov	eax, [ecx+4]
		mov	[ebp+var_C], eax
		mov	eax, [ecx+8]
		mov	[ebp+var_8], eax
		lea	eax, [ebp+var_4]
		push	eax
		lea	eax, [ebp+var_C]
		push	eax
		push	[ebp+arg_0]
		call	sub_10003197
		add	esp, 10h
		test	eax, eax
		jz	short loc_10001FB8
		push	eax
		call	sub_10008EB7
		pop	ecx

loc_10001FB8:				; CODE XREF: sub_10001F69+46j
		mov	eax, [ebp+var_4]

loc_10001FBB:				; CODE XREF: sub_10001F69+1Dj
		mov	esp, ebp
		pop	ebp
		retn
sub_10001F69	endp


; =============== S U B	R O U T	I N E =======================================


sub_10001FBF	proc near		; CODE XREF: sub_10001AD2+64p

var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= byte ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 30h
		push	ebx
		xor	eax, eax
		or	ebx, 0FFFFFFFFh
		push	ebp
		mov	ebp, [esp+38h+arg_0]
		mov	[esp+38h+var_24], eax
		mov	[esp+38h+var_20], eax
		mov	[esp+38h+var_1C], eax
		mov	[esp+38h+var_30], ebx
		test	ebp, ebp
		jz	loc_10002103
		push	edi
		push	ebp
		call	sub_1000169A
		mov	edi, eax
		pop	ecx
		test	edi, edi
		jnz	short loc_10001FF7
		lea	edi, [esp+3Ch+var_24]

loc_10001FF7:				; CODE XREF: sub_10001FBF+32j
		cmp	dword ptr [edi+8], 80h
		ja	loc_100020F0
		mov	ebx, [esp+3Ch+arg_4]
		push	esi
		push	dword ptr [edi+8] ; size_t
		push	dword ptr [edi+4] ; void *
		lea	esi, [ebx+18h]
		push	esi		; void *
		call	memcpy
		mov	[ebx+4], esi
		mov	eax, [edi+8]
		mov	[ebx+8], eax
		add	eax, 18h
		add	eax, ebx
		mov	[esp+4Ch+var_2C], offset aPasswordCheck	; "password-check"
		mov	[ebx+10h], eax
		lea	eax, [esp+4Ch+var_2C]
		push	eax
		push	ebp
		mov	[esp+54h+var_28], 0Eh
		call	sub_100019AB
		mov	esi, eax
		add	esp, 14h
		test	esi, esi
		jz	loc_100020EC
		mov	eax, [esi+1Ch]
		movzx	ecx, byte ptr [eax]
		mov	[esp+40h+var_10], ecx
		mov	eax, [esi+1Ch]
		inc	eax
		mov	[esp+40h+var_14], eax
		lea	eax, [ecx+0Fh]
		cmp	[esi+20h], eax
		jb	short loc_100020DF
		lea	eax, [esp+40h+var_18]
		push	eax
		call	SECOID_FindOIDTag_Util
		and	[esp+44h+var_C], 0
		mov	edx, eax
		mov	eax, [esi+20h]
		sub	eax, [esp+44h+var_10]
		dec	eax
		mov	[esp+44h+var_4], eax
		mov	eax, [esi+1Ch]
		inc	eax
		add	eax, [esp+44h+var_10]
		mov	[esp+44h+var_8], eax
		lea	eax, [esp+44h+var_C]
		push	eax
		lea	eax, [esi+0Ch]
		push	eax
		push	edx
		call	sub_10001E85
		mov	ebp, eax
		add	esp, 10h
		test	ebp, ebp
		jz	short loc_100020DF
		mov	eax, [ebx+8]
		add	eax, [ebp+8]
		cmp	eax, 80h
		ja	short loc_100020D5
		push	dword ptr [ebp+8] ; size_t
		push	dword ptr [ebp+4] ; void *
		push	dword ptr [ebx+10h] ; void *
		call	memcpy
		mov	eax, [ebp+8]
		add	esp, 0Ch
		and	[esp+40h+var_30], 0
		mov	[ebx+14h], eax

loc_100020D5:				; CODE XREF: sub_10001FBF+F8j
		push	1
		push	ebp
		call	SECITEM_FreeItem_Util
		pop	ecx
		pop	ecx

loc_100020DF:				; CODE XREF: sub_10001FBF+AAj
					; sub_10001FBF+EBj
		push	esi
		call	sub_10008ED0
		mov	ebx, [esp+44h+var_30]
		pop	ecx
		jmp	short loc_100020EF
; ---------------------------------------------------------------------------

loc_100020EC:				; CODE XREF: sub_10001FBF+8Cj
		or	ebx, 0FFFFFFFFh

loc_100020EF:				; CODE XREF: sub_10001FBF+12Bj
		pop	esi

loc_100020F0:				; CODE XREF: sub_10001FBF+3Fj
		lea	eax, [esp+3Ch+var_24]
		cmp	edi, eax
		jz	short loc_10002102
		push	1
		push	edi
		call	SECITEM_FreeItem_Util
		pop	ecx
		pop	ecx

loc_10002102:				; CODE XREF: sub_10001FBF+137j
		pop	edi

loc_10002103:				; CODE XREF: sub_10001FBF+20j
		pop	ebp
		mov	eax, ebx
		pop	ebx
		add	esp, 30h
		retn
sub_10001FBF	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000210B	proc near		; CODE XREF: sub_10004B06+CCp
					; sub_10005372+13Cp

var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= byte ptr -20h
var_18		= byte ptr -18h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 28h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+28h+var_4], eax
		mov	eax, [esp+28h+arg_4]
		push	ebp
		mov	ebp, [esp+2Ch+arg_0]
		push	esi
		push	eax
		call	sub_10008489
		mov	esi, eax
		pop	ecx
		test	esi, esi
		jnz	short loc_10002137

loc_10002130:				; CODE XREF: sub_1000210B+3Aj
		xor	eax, eax
		jmp	loc_10002222
; ---------------------------------------------------------------------------

loc_10002137:				; CODE XREF: sub_1000210B+23j
		mov	eax, [esi+4]
		dec	eax
		jz	short loc_10002171
		dec	eax
		jz	short loc_10002165
		dec	eax
		dec	eax
		jz	short loc_10002159
		dec	eax
		jnz	short loc_10002130
		mov	eax, [esi+90h]
		mov	[esp+30h+var_28], eax
		mov	ecx, [esi+94h]
		jmp	short loc_1000217B
; ---------------------------------------------------------------------------

loc_10002159:				; CODE XREF: sub_1000210B+37j
		mov	eax, [esi+28h]
		mov	[esp+30h+var_28], eax
		mov	ecx, [esi+2Ch]
		jmp	short loc_1000217B
; ---------------------------------------------------------------------------

loc_10002165:				; CODE XREF: sub_1000210B+33j
		mov	eax, [esi+34h]
		mov	[esp+30h+var_28], eax
		mov	ecx, [esi+38h]
		jmp	short loc_1000217B
; ---------------------------------------------------------------------------

loc_10002171:				; CODE XREF: sub_1000210B+30j
		mov	eax, [esi+10h]
		mov	[esp+30h+var_28], eax
		mov	ecx, [esi+14h]

loc_1000217B:				; CODE XREF: sub_1000210B+4Cj
					; sub_1000210B+58j ...
		cmp	dword ptr [ebp+0Ch], 3
		push	ebx
		mov	[esp+34h+var_24], ecx
		push	edi
		jz	short loc_100021AC
		push	ecx
		push	eax
		lea	eax, [esp+40h+var_18]
		push	eax
		call	sub_1000E0C0
		push	14h
		pop	edi
		push	edi		; size_t
		lea	eax, [esp+48h+var_18]
		push	eax		; void *
		push	[esp+4Ch+var_28] ; void	*
		call	memcpy
		add	esp, 18h
		mov	[esp+38h+var_24], edi

loc_100021AC:				; CODE XREF: sub_1000210B+7Aj
		push	0
		lea	eax, [esp+3Ch+var_20]
		push	eax
		lea	eax, [esp+40h+var_28]
		push	eax
		push	ebp
		call	sub_10001A0E
		mov	ebx, eax
		add	esp, 10h
		test	ebx, ebx
		jz	short loc_10002212
		mov	ecx, [esp+38h+var_24]
		inc	ecx
		push	ecx
		call	PORT_Alloc_Util
		mov	edi, eax
		pop	ecx
		test	edi, edi
		jz	short loc_10002212
		push	[esp+38h+var_24] ; size_t
		lea	ecx, [edi+1]
		push	[esp+3Ch+var_28] ; void	*
		push	ecx		; void *
		call	memcpy
		push	0
		lea	eax, [esp+48h+var_20]
		mov	byte ptr [edi],	0
		inc	[esp+48h+var_24]
		push	eax
		lea	eax, [esp+4Ch+var_28]
		mov	[esp+4Ch+var_28], edi
		push	eax
		push	ebp
		call	sub_10001A0E
		push	edi
		mov	ebx, eax
		call	PORT_Free_Util
		add	esp, 20h

loc_10002212:				; CODE XREF: sub_1000210B+BAj
					; sub_1000210B+CCj
		push	esi
		call	sub_10008ED0
		pop	ecx
		xor	eax, eax
		test	ebx, ebx
		pop	edi
		setz	al
		pop	ebx

loc_10002222:				; CODE XREF: sub_1000210B+27j
		mov	ecx, [esp+30h+var_4]
		pop	esi
		pop	ebp
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 28h
		retn
sub_1000210B	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10002233	proc near		; CODE XREF: sub_10005269+3Cp
					; sub_10005269+83p

var_10		= byte ptr -10h
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		mov	ecx, [ebp+arg_4]
		push	0
		mov	eax, [ecx+4]
		mov	[ebp+var_8], eax
		mov	eax, [ecx+8]
		mov	[ebp+var_4], eax
		lea	eax, [ebp+var_10]
		push	eax
		lea	eax, [ebp+var_8]
		push	eax
		push	[ebp+arg_0]
		call	sub_10001A0E
		add	esp, 10h
		neg	eax
		sbb	eax, eax
		inc	eax
		mov	esp, ebp
		pop	ebp
		retn
sub_10002233	endp


; =============== S U B	R O U T	I N E =======================================


sub_10002266	proc near		; CODE XREF: sub_100022AC+6p
					; sub_100026D0+1Bp ...

arg_0		= dword	ptr  4

		push	esi
		push	24h
		call	PORT_ZAlloc_Util
		mov	esi, eax
		pop	ecx
		test	esi, esi
		jnz	short loc_10002284
		push	0FFFFE013h
		call	PORT_SetError_Util
		pop	ecx
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10002284:				; CODE XREF: sub_10002266+Dj
		xor	eax, eax
		mov	dword ptr [esi+20h], 1
		mov	[esi+10h], eax
		mov	[esi+14h], eax
		mov	[esi+8], eax
		mov	[esi+4], eax
		mov	eax, [esp+4+arg_0]
		mov	[esi], eax
		call	ds:PR_NewLock
		mov	[esi+1Ch], eax
		mov	eax, esi
		pop	esi
		retn
sub_10002266	endp


; =============== S U B	R O U T	I N E =======================================


sub_100022AC	proc near		; CODE XREF: sub_100077B2+4Cp

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	ebx
		push	ebp
		push	esi
		push	edi
		push	0
		call	sub_10002266
		mov	edi, [esp+14h+arg_0]
		mov	esi, eax
		neg	edi
		push	3
		push	[esp+18h+arg_10]
		sbb	edi, edi
		and	edi, 0FFFFFFFEh
		add	edi, 2
		call	[esp+1Ch+arg_C]
		mov	ebx, eax
		add	esp, 0Ch
		test	ebx, ebx
		jz	loc_1000238A
		mov	ebp, [esp+10h+arg_4]
		test	ebp, ebp
		jz	short loc_100022EF
		push	ebp
		call	PORT_Strdup_Util
		pop	ecx
		jmp	short loc_100022F1
; ---------------------------------------------------------------------------

loc_100022EF:				; CODE XREF: sub_100022AC+38j
		xor	eax, eax

loc_100022F1:				; CODE XREF: sub_100022AC+41j
		mov	[esi+10h], eax
		test	ebp, ebp
		jnz	short loc_100022FB
		push	ebx
		jmp	short loc_10002306
; ---------------------------------------------------------------------------

loc_100022FB:				; CODE XREF: sub_100022AC+4Aj
		cmp	[esp+10h+arg_8], 0
		jz	short loc_1000230E
		push	[esp+10h+arg_8]

loc_10002306:				; CODE XREF: sub_100022AC+4Dj
		call	PORT_Strdup_Util
		pop	ecx
		jmp	short loc_10002310
; ---------------------------------------------------------------------------

loc_1000230E:				; CODE XREF: sub_100022AC+54j
		xor	eax, eax

loc_10002310:				; CODE XREF: sub_100022AC+60j
		push	edi		; int
		push	ebx		; char *
		push	[esp+18h+arg_8]	; int
		mov	[esi+14h], eax
		mov	eax, [esp+1Ch+arg_0]
		push	ebp		; int
		mov	[esi+18h], eax
		call	sub_10002B33
		add	esp, 10h
		mov	[esi], eax
		test	eax, eax
		jz	short loc_10002344
		push	esi
		call	sub_1000328B
		cmp	dword ptr [esi+0Ch], 0FFh
		pop	ecx
		jz	short loc_10002383
		cmp	dword ptr [esi], 0
		jnz	short loc_100023A7

loc_10002344:				; CODE XREF: sub_100022AC+81j
		cmp	[esp+10h+arg_0], 0
		jnz	short loc_10002383
		push	[esp+10h+arg_10] ; int
		push	[esp+14h+arg_C]	; int
		push	esi		; int
		push	ebx		; char *
		push	[esp+20h+arg_8]	; int
		push	ebp		; int
		call	sub_100029DF
		add	esp, 18h
		cmp	eax, 0FFFFFFFEh
		jnz	short loc_100023A3
		push	edi		; int
		push	ebx		; char *
		push	[esp+18h+arg_8]	; int
		push	ebp		; int
		call	sub_10002B33
		push	esi
		mov	[esi], eax
		call	sub_1000328B
		add	esp, 14h
		cmp	dword ptr [esi], 0
		jnz	short loc_100023A7

loc_10002383:				; CODE XREF: sub_100022AC+91j
					; sub_100022AC+9Dj ...
		push	ebx
		call	PORT_Free_Util
		pop	ecx

loc_1000238A:				; CODE XREF: sub_100022AC+2Cj
		push	0FFFFE012h
		call	PORT_SetError_Util
		push	esi
		call	sub_10001CF8
		xor	eax, eax

loc_1000239C:				; CODE XREF: sub_100022AC+10Cj
		pop	ecx
		pop	ecx
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_100023A3:				; CODE XREF: sub_100022AC+B9j
		test	eax, eax
		jnz	short loc_10002383

loc_100023A7:				; CODE XREF: sub_100022AC+96j
					; sub_100022AC+D5j
		push	esi
		call	sub_1000169A
		push	ebx
		mov	[esi+8], eax
		call	PORT_Free_Util
		mov	eax, esi
		jmp	short loc_1000239C
sub_100022AC	endp


; =============== S U B	R O U T	I N E =======================================


sub_100023BA	proc near		; CODE XREF: sub_10001B87+76p

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= byte ptr -0Ch
var_8		= dword	ptr -8
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 18h
		push	esi
		push	edi
		mov	edi, [esp+20h+arg_0]
		or	esi, 0FFFFFFFFh
		test	edi, edi
		jnz	short loc_100023D1
		or	eax, esi
		jmp	loc_100024F6
; ---------------------------------------------------------------------------

loc_100023D1:				; CODE XREF: sub_100023BA+Ej
		and	[esp+20h+var_8], 0
		push	ebx
		push	800h
		mov	[esp+28h+var_14], offset aPasswordCheck	; "password-check"
		mov	[esp+28h+var_10], 0Eh
		call	PORT_NewArena_Util
		mov	ebx, eax
		pop	ecx
		test	ebx, ebx
		jnz	short loc_10002400
		or	eax, 0FFFFFFFFh
		jmp	loc_100024F5
; ---------------------------------------------------------------------------

loc_10002400:				; CODE XREF: sub_100023BA+3Cj
		lea	eax, [esp+24h+var_C]
		push	eax
		lea	eax, [esp+28h+var_18]
		push	eax
		mov	eax, [esp+2Ch+arg_4]
		add	eax, 0Ch
		push	eax
		call	sub_10001D62
		add	esp, 0Ch
		mov	[esp+24h+arg_0], eax
		test	eax, eax
		jz	loc_100024D8
		push	ebp
		push	24h
		push	ebx
		call	PORT_ArenaZAlloc_Util
		mov	ebp, eax
		pop	ecx
		pop	ecx
		test	ebp, ebp
		jz	loc_100024CA
		lea	eax, [esp+28h+var_C]
		mov	[ebp+0], ebx
		push	eax
		lea	ecx, [ebp+0Ch]
		push	ecx
		push	ebx
		call	SECITEM_CopyItem_Util
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		jnz	short loc_100024CA
		push	[esp+28h+arg_0]
		lea	eax, [ebp+18h]
		push	[esp+2Ch+var_18]
		push	eax
		push	ebx
		call	sub_10001861
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		jnz	short loc_100024CA
		push	1
		push	ebp
		lea	eax, [esp+30h+var_14]
		push	eax
		push	edi
		call	sub_10002B6A
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		jnz	short loc_100024CA
		cmp	[edi+8], eax
		jz	short loc_1000249C
		push	1
		push	dword ptr [edi+8]
		call	SECITEM_FreeItem_Util
		and	[edi+8], esi
		pop	ecx
		pop	ecx

loc_1000249C:				; CODE XREF: sub_100023BA+D1j
		push	[esp+28h+arg_4]
		push	edi
		call	sub_100016D9
		mov	esi, eax
		pop	ecx
		pop	ecx
		test	esi, esi
		jnz	short loc_100024CA
		push	eax
		push	edi
		call	sub_10001AA7
		pop	ecx
		pop	ecx
		test	eax, eax
		jz	short loc_100024C0
		or	esi, 0FFFFFFFFh
		jmp	short loc_100024CA
; ---------------------------------------------------------------------------

loc_100024C0:				; CODE XREF: sub_100023BA+FFj
		push	edi
		call	sub_1000169A
		pop	ecx
		mov	[edi+8], eax

loc_100024CA:				; CODE XREF: sub_100023BA+7Bj
					; sub_100023BA+9Aj ...
		push	1
		push	[esp+2Ch+arg_0]
		call	SECITEM_FreeItem_Util
		pop	ecx
		pop	ecx
		pop	ebp

loc_100024D8:				; CODE XREF: sub_100023BA+66j
		push	1
		push	ebx
		call	PORT_FreeArena_Util
		cmp	[esp+2Ch+var_8], 0
		pop	ecx
		pop	ecx
		jz	short loc_100024F3
		push	[esp+24h+var_8]
		call	PORT_Free_Util
		pop	ecx

loc_100024F3:				; CODE XREF: sub_100023BA+12Dj
		mov	eax, esi

loc_100024F5:				; CODE XREF: sub_100023BA+41j
		pop	ebx

loc_100024F6:				; CODE XREF: sub_100023BA+12j
		pop	edi
		pop	esi
		add	esp, 18h
		retn
sub_100023BA	endp


; =============== S U B	R O U T	I N E =======================================


sub_100024FC	proc near		; CODE XREF: sub_10001C24+15p

arg_0		= dword	ptr  4

		push	ebp
		push	esi
		mov	esi, [esp+8+arg_0]
		xor	ebp, ebp
		push	edi
		mov	edi, ebp
		cmp	[esi], ebp
		jnz	short loc_10002512
		xor	eax, eax
		jmp	loc_100025C4
; ---------------------------------------------------------------------------

loc_10002512:				; CODE XREF: sub_100024FC+Dj
		cmp	[esi+18h], ebp
		jz	short loc_1000251F

loc_10002517:				; CODE XREF: sub_100024FC+2Bj
					; sub_100024FC+6Cj
		or	eax, 0FFFFFFFFh
		jmp	loc_100025C4
; ---------------------------------------------------------------------------

loc_1000251F:				; CODE XREF: sub_100024FC+19j
		cmp	[esi+10h], ebp
		jnz	short loc_10002529
		cmp	[esi+14h], ebp
		jz	short loc_10002517

loc_10002529:				; CODE XREF: sub_100024FC+26j
		push	esi
		call	sub_100019EB
		pop	ecx
		push	ebp		; int
		cmp	[esi+10h], edi
		jz	short loc_1000254D
		push	302h
		push	offset aKey	; "key"
		push	dword ptr [esi+14h]
		push	dword ptr [esi+10h]
		call	sub_10007A75
		jmp	short loc_10002561
; ---------------------------------------------------------------------------

loc_1000254D:				; CODE XREF: sub_100024FC+38j
		push	1		; int
		push	180h		; int
		push	302h		; int
		push	dword ptr [esi+14h] ; char *
		call	sub_1000E2C0

loc_10002561:				; CODE XREF: sub_100024FC+4Fj
		add	esp, 14h
		mov	[esi], eax
		cmp	eax, ebp
		jz	short loc_10002517
		push	esi
		call	sub_10001CA5
		pop	ecx
		test	eax, eax
		jz	short loc_1000257A
		xor	edi, edi
		inc	edi
		jmp	short loc_100025AD
; ---------------------------------------------------------------------------

loc_1000257A:				; CODE XREF: sub_100024FC+77j
		push	ebx
		cmp	[esi+8], edi
		jz	short loc_1000258E
		push	dword ptr [esi+8]
		push	esi
		call	sub_100016D9
		pop	ecx
		mov	ebx, eax
		jmp	short loc_100025A4
; ---------------------------------------------------------------------------

loc_1000258E:				; CODE XREF: sub_100024FC+82j
		push	esi
		call	sub_10001C47
		mov	ebx, eax
		pop	ecx
		test	ebx, ebx
		jnz	short loc_100025A9
		push	esi
		call	sub_1000169A
		mov	[esi+8], eax

loc_100025A4:				; CODE XREF: sub_100024FC+90j
		pop	ecx
		test	ebx, ebx
		jz	short loc_100025AC

loc_100025A9:				; CODE XREF: sub_100024FC+9Dj
		xor	edi, edi
		inc	edi

loc_100025AC:				; CODE XREF: sub_100024FC+ABj
		pop	ebx

loc_100025AD:				; CODE XREF: sub_100024FC+7Cj
		push	ebp
		push	esi
		call	sub_10001AA7
		push	dword ptr [esi]
		call	sub_1000745F
		add	esp, 0Ch
		neg	edi
		sbb	edi, edi
		mov	eax, edi

loc_100025C4:				; CODE XREF: sub_100024FC+11j
					; sub_100024FC+1Ej
		pop	edi
		pop	esi
		pop	ebp
		retn
sub_100024FC	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_100025C8	proc near		; CODE XREF: sub_10005715+BFp
					; sub_10005B1C+C7p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		push	0
		push	[ebp+arg_10]
		push	[ebp+arg_C]
		push	[ebp+arg_8]
		push	[ebp+arg_4]
		push	[ebp+arg_0]
		call	sub_100025E6
		add	esp, 18h
		pop	ebp
		retn
sub_100025C8	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_100025E6	proc near		; CODE XREF: sub_100025C8+14p
					; sub_10002978+14p ...

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ecx
		cmp	[ebp+arg_0], 0
		jnz	short loc_10002601
		push	0FFFFE012h
		call	PORT_SetError_Util
		pop	ecx
		or	eax, 0FFFFFFFFh
		jmp	short loc_1000262B
; ---------------------------------------------------------------------------

loc_10002601:				; CODE XREF: sub_100025E6+9j
		push	[ebp+arg_14]
		mov	ecx, [ebp+arg_8]
		push	[ebp+arg_C]
		push	[ebp+arg_4]
		mov	eax, [ecx+4]
		push	[ebp+arg_10]
		mov	[ebp+var_8], eax
		mov	eax, [ecx+8]
		mov	[ebp+var_4], eax
		lea	eax, [ebp+var_8]
		push	eax
		push	[ebp+arg_0]
		call	sub_10003203
		add	esp, 18h

loc_1000262B:				; CODE XREF: sub_100025E6+19j
		mov	esp, ebp
		pop	ebp
		retn
sub_100025E6	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_1000262F	proc near		; CODE XREF: sub_10006D46+12Ep

var_10		= byte ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		cmp	[ebp+arg_0], 0
		jnz	short loc_10002643

loc_1000263B:				; CODE XREF: sub_1000262F+2Bj
		or	eax, 0FFFFFFFFh
		jmp	loc_100026CC
; ---------------------------------------------------------------------------

loc_10002643:				; CODE XREF: sub_1000262F+Aj
		push	3
		lea	eax, [ebp+var_10]
		push	eax
		lea	eax, [ebp+var_8]
		push	eax
		push	[ebp+arg_0]
		call	sub_10001A74
		add	esp, 10h
		test	eax, eax
		jnz	short loc_1000263B

loc_1000265C:				; CODE XREF: sub_1000262F+99j
		cmp	[ebp+var_C], 1
		jbe	short loc_100026B1
		mov	eax, [ebp+var_4]
		cmp	eax, 0Bh
		jnz	short loc_10002682
		push	eax		; size_t
		push	offset aGlobalSalt ; "global-salt"
		push	[ebp+var_8]	; void *
		call	memcmp
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_100026B1
		mov	eax, [ebp+var_4]

loc_10002682:				; CODE XREF: sub_1000262F+39j
		cmp	eax, 0Eh
		jnz	short loc_1000269C
		push	eax		; size_t
		push	offset aPasswordCheck ;	"password-check"
		push	[ebp+var_8]	; void *
		call	memcmp
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_100026B1

loc_1000269C:				; CODE XREF: sub_1000262F+56j
		push	[ebp+arg_8]
		lea	eax, [ebp+var_10]
		push	eax
		lea	eax, [ebp+var_8]
		push	eax
		call	[ebp+arg_4]
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_100026CC

loc_100026B1:				; CODE XREF: sub_1000262F+31j
					; sub_1000262F+4Ej ...
		push	7
		lea	eax, [ebp+var_10]
		push	eax
		lea	eax, [ebp+var_8]
		push	eax
		push	[ebp+arg_0]
		call	sub_10001A74
		add	esp, 10h
		test	eax, eax
		jz	short loc_1000265C
		xor	eax, eax

loc_100026CC:				; CODE XREF: sub_1000262F+Fj
					; sub_1000262F+80j
		mov	esp, ebp
		pop	ebp
		retn
sub_1000262F	endp


; =============== S U B	R O U T	I N E =======================================


sub_100026D0	proc near		; CODE XREF: sub_100029DF+F0p

var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= byte ptr -24h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_8		= dword	ptr -8
arg_0		= dword	ptr  4

		sub	esp, 44h
		push	ebx
		push	ebp
		mov	ebp, [esp+4Ch+arg_0]
		xor	ebx, ebx
		push	edi
		xor	edi, edi
		cmp	[ebp+4], ebx
		jz	loc_1000296F
		push	esi
		push	dword ptr [ebp+4]
		call	sub_10002266
		mov	esi, eax
		mov	[esp+58h+var_44], esi
		pop	ecx
		test	esi, esi
		jz	loc_1000296E
		and	[ebp+4], ebx
		push	esi
		call	sub_10002996
		pop	ecx
		cmp	al, 2
		jnz	loc_10002944
		push	edi
		lea	eax, [esp+58h+var_24]
		mov	[esp+58h+var_2C], offset aGlobalSalt ; "global-salt"
		push	eax
		lea	eax, [esp+5Ch+var_2C]
		mov	[esp+5Ch+var_28], 0Bh
		push	eax
		push	esi
		call	sub_10001A0E
		add	esp, 10h
		test	eax, eax
		jnz	loc_10002944
		lea	eax, [esp+54h+var_24]
		push	eax
		call	sub_10001719
		mov	[esp+58h+arg_0], eax
		pop	ecx
		test	eax, eax
		jz	loc_10002942
		push	edi
		lea	eax, [esp+58h+var_8]
		mov	[esp+58h+var_34], offset aPasswordCheck	; "password-check"
		push	eax
		lea	eax, [esp+5Ch+var_34]
		mov	[esp+5Ch+var_30], 0Eh
		push	eax
		push	esi
		call	sub_10001A0E
		add	esp, 10h
		test	eax, eax
		jz	short loc_100027E8
		push	esi
		call	sub_10002BCA
		pop	ecx
		test	eax, eax
		jz	loc_1000293C
		push	edi
		lea	eax, [esp+58h+var_24]
		mov	[esp+58h+var_14], offset aFakePasswordCh ; "fake-password-check"
		push	eax
		lea	eax, [esp+5Ch+var_2C]
		mov	[esp+5Ch+var_10], 13h
		push	eax
		push	ebp
		mov	[esp+64h+var_44], offset a1 ; "1"
		mov	[esp+64h+var_40], 1
		call	sub_10001A41
		add	esp, 10h
		test	eax, eax
		jnz	loc_1000293C
		push	edi
		lea	eax, [esp+58h+var_44]
		push	eax
		lea	eax, [esp+5Ch+var_14]
		push	eax
		push	ebp
		call	sub_10001A41
		add	esp, 10h
		test	eax, eax
		jnz	loc_1000293C
		jmp	loc_1000286C
; ---------------------------------------------------------------------------

loc_100027E8:				; CODE XREF: sub_100026D0+AAj
		push	edi
		lea	eax, [esp+58h+var_24]
		push	eax
		lea	eax, [esp+5Ch+var_2C]
		push	eax
		push	ebp
		call	sub_10001A41
		add	esp, 10h
		test	eax, eax
		jnz	loc_1000293C
		lea	eax, [esp+54h+var_8]
		push	2		; size_t
		push	eax		; int
		call	sub_10001763
		mov	ebx, eax
		pop	ecx
		pop	ecx
		test	ebx, ebx
		jz	loc_1000293C
		lea	ecx, [ebx+18h]
		mov	esi, ecx
		lea	edi, [esp+54h+var_14]
		lea	eax, [esp+54h+var_14]
		push	eax
		push	6
		movsd
		push	ecx
		movsd
		movsd
		xor	edi, edi
		push	edi
		mov	[ebx+1Ch], edi
		call	sub_10001861
		add	esp, 10h
		test	eax, eax
		jnz	loc_10002938
		push	1
		push	ebx
		lea	eax, [esp+5Ch+var_34]
		push	eax
		push	ebp
		call	sub_10002B6A
		add	esp, 10h
		test	eax, eax
		jnz	loc_10002938
		push	ebx
		call	sub_10008ED0
		mov	esi, [esp+58h+var_44]
		mov	ebx, edi
		pop	ecx

loc_1000286C:				; CODE XREF: sub_100026D0+113j
		push	3
		lea	eax, [esp+58h+var_1C]
		push	eax
		lea	eax, [esp+5Ch+var_3C]
		push	eax
		push	esi
		call	sub_10001A74
		add	esp, 10h
		test	eax, eax
		jnz	loc_1000293C

loc_10002889:				; CODE XREF: sub_100026D0+25Ej
		cmp	[esp+54h+var_18], 1
		jbe	loc_10002917
		mov	ecx, [esp+54h+var_38]
		cmp	ecx, 0Bh
		jnz	short loc_100028B7
		push	ecx		; size_t
		push	offset aGlobalSalt ; "global-salt"
		push	[esp+5Ch+var_3C] ; void	*
		call	memcmp
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_10002917
		mov	ecx, [esp+54h+var_38]

loc_100028B7:				; CODE XREF: sub_100026D0+1CBj
		cmp	ecx, [esp+54h+var_30]
		jnz	short loc_100028D6
		push	ecx		; size_t
		push	[esp+58h+var_34] ; void	*
		push	[esp+5Ch+var_3C] ; void	*
		call	memcmp
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_10002917
		mov	ecx, [esp+54h+var_38]

loc_100028D6:				; CODE XREF: sub_100026D0+1EBj
		mov	eax, [esp+54h+var_3C]
		cmp	byte ptr [eax+ecx-1], 0
		jnz	short loc_10002917
		lea	eax, [esp+54h+var_1C]
		push	2		; size_t
		push	eax		; int
		call	sub_10001763
		mov	edi, eax
		pop	ecx
		pop	ecx
		test	edi, edi
		jz	short loc_10002917
		mov	ecx, [esp+54h+var_3C]
		lea	eax, [esp+54h+var_3C]
		push	0
		push	edi
		push	eax
		push	ebp
		mov	[edi+8], ecx
		call	sub_10002B6A
		and	dword ptr [edi+8], 0
		push	edi
		call	sub_10008ED0
		add	esp, 14h

loc_10002917:				; CODE XREF: sub_100026D0+1BEj
					; sub_100026D0+1E1j ...
		push	7
		lea	eax, [esp+58h+var_1C]
		push	eax
		lea	eax, [esp+5Ch+var_3C]
		push	eax
		push	esi
		call	sub_10001A74
		add	esp, 10h
		test	eax, eax
		jz	loc_10002889
		xor	ebx, ebx
		jmp	short loc_1000293C
; ---------------------------------------------------------------------------

loc_10002938:				; CODE XREF: sub_100026D0+170j
					; sub_100026D0+189j
		mov	esi, [esp+54h+var_44]

loc_1000293C:				; CODE XREF: sub_100026D0+B5j
					; sub_100026D0+F1j ...
		mov	edi, [esp+54h+arg_0]
		jmp	short loc_10002944
; ---------------------------------------------------------------------------

loc_10002942:				; CODE XREF: sub_100026D0+7Ej
		mov	edi, eax

loc_10002944:				; CODE XREF: sub_100026D0+3Bj
					; sub_100026D0+67j ...
		push	0
		push	ebp
		call	sub_10001AA7
		push	esi
		call	sub_10001CF8
		add	esp, 0Ch
		test	edi, edi
		jz	short loc_10002963
		push	1
		push	edi
		call	SECITEM_FreeItem_Util
		pop	ecx
		pop	ecx

loc_10002963:				; CODE XREF: sub_100026D0+287j
		test	ebx, ebx
		jz	short loc_1000296E
		push	ebx
		call	sub_10008ED0
		pop	ecx

loc_1000296E:				; CODE XREF: sub_100026D0+29j
					; sub_100026D0+295j
		pop	esi

loc_1000296F:				; CODE XREF: sub_100026D0+11j
		pop	edi
		pop	ebp
		xor	eax, eax
		pop	ebx
		add	esp, 44h
		retn
sub_100026D0	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10002978	proc near		; CODE XREF: sub_10004C7A+104p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		push	1
		push	[ebp+arg_10]
		push	[ebp+arg_C]
		push	[ebp+arg_8]
		push	[ebp+arg_4]
		push	[ebp+arg_0]
		call	sub_100025E6
		add	esp, 18h
		pop	ebp
		retn
sub_10002978	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10002996	proc near		; CODE XREF: sub_100026D0+33p
					; sub_100029DF+67p ...

var_10		= dword	ptr -10h
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		mov	eax, [ebp+arg_0]
		mov	[ebp+var_8], offset aVersion ; "Version"
		mov	[ebp+var_4], 7
		cmp	dword ptr [eax], 0
		jnz	short loc_100029B6

loc_100029B2:				; CODE XREF: sub_10002996+35j
		or	al, 0FFh
		jmp	short loc_100029DB
; ---------------------------------------------------------------------------

loc_100029B6:				; CODE XREF: sub_10002996+1Aj
		push	0
		lea	ecx, [ebp+var_10]
		push	ecx
		lea	ecx, [ebp+var_8]
		push	ecx
		push	eax
		call	sub_10001A0E
		add	esp, 10h
		test	eax, eax
		js	short loc_100029B2
		cmp	eax, 1
		jl	short loc_100029D6
		xor	al, al
		jmp	short loc_100029DB
; ---------------------------------------------------------------------------

loc_100029D6:				; CODE XREF: sub_10002996+3Aj
		mov	eax, [ebp+var_10]
		mov	al, [eax]

loc_100029DB:				; CODE XREF: sub_10002996+1Ej
					; sub_10002996+3Ej
		mov	esp, ebp
		pop	ebp
		retn
sub_10002996	endp


; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_100029DF(int,	int, char *, int, int, int)
sub_100029DF	proc near		; CODE XREF: sub_100022AC+AEp

var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		push	ecx
		push	ebx
		mov	ebx, [esp+8+arg_0]
		push	esi
		push	edi
		xor	edi, edi
		mov	[esp+10h+var_4], 1
		test	ebx, ebx
		jz	short loc_10002A10
		lea	eax, [esp+10h+var_4]
		push	eax
		push	302h
		push	offset aKey	; "key"
		push	[esp+1Ch+arg_4]
		push	ebx
		call	sub_10007A75
		jmp	short loc_10002A26
; ---------------------------------------------------------------------------

loc_10002A10:				; CODE XREF: sub_100029DF+14j
		push	edi		; int
		push	1		; int
		push	180h		; int
		push	302h		; int
		push	[esp+20h+arg_8]	; char *
		call	sub_1000E2C0

loc_10002A26:				; CODE XREF: sub_100029DF+2Fj
		mov	esi, [esp+24h+arg_C]
		add	esp, 14h
		mov	[esi], eax
		cmp	eax, edi
		jnz	short loc_10002A45
		xor	eax, eax
		cmp	[esp+10h+var_4], 2
		setnz	al
		sub	eax, 2
		jmp	loc_10002AFE
; ---------------------------------------------------------------------------

loc_10002A45:				; CODE XREF: sub_100029DF+52j
		push	esi
		call	sub_10002996
		pop	ecx
		cmp	al, 3
		jnz	short loc_10002A5F
		push	dword ptr [esi]
		call	sub_1000745F
		pop	ecx
		xor	eax, eax
		jmp	loc_10002AFE
; ---------------------------------------------------------------------------

loc_10002A5F:				; CODE XREF: sub_100029DF+6Fj
		push	ebp
		test	ebx, ebx
		jz	short loc_10002A91
		push	edi		; int
		push	1		; int
		push	180h		; int
		push	edi		; int
		push	[esp+24h+arg_8]	; char *
		call	sub_1000E2C0
		mov	ebx, eax
		add	esp, 14h
		test	ebx, ebx
		jz	short loc_10002A91
		push	ebx
		call	sub_10002266
		mov	ebp, eax
		pop	ecx
		test	ebp, ebp
		jnz	short loc_10002B03
		push	ebx
		call	dword ptr [ebx+4]

loc_10002A90:				; CODE XREF: sub_100029DF+13Cj
		pop	ecx

loc_10002A91:				; CODE XREF: sub_100029DF+83j
					; sub_100029DF+9Ej
		push	esi
		call	sub_10001CA5
		pop	ecx
		test	eax, eax
		jnz	short loc_10002AF1
		push	2
		push	[esp+18h+arg_14]
		call	[esp+1Ch+arg_10]
		mov	ebx, eax
		pop	ecx
		pop	ecx
		test	ebx, ebx
		jz	short loc_10002AD9
		push	edi		; int
		push	1		; int
		push	180h		; int
		push	edi		; int
		push	ebx		; char *
		call	sub_1000E2C0
		push	ebx
		mov	[esi+4], eax
		call	PORT_Free_Util
		add	esp, 18h
		cmp	[esi+4], edi
		jz	short loc_10002AD9
		push	esi
		call	sub_100026D0
		pop	ecx
		test	eax, eax
		jz	short loc_10002AE4

loc_10002AD9:				; CODE XREF: sub_100029DF+CDj
					; sub_100029DF+EDj
		push	esi
		call	sub_10001C47
		pop	ecx
		test	eax, eax
		jnz	short loc_10002AF1

loc_10002AE4:				; CODE XREF: sub_100029DF+F8j
		push	edi
		push	esi
		call	sub_10001AA7
		neg	eax
		pop	ecx
		pop	ecx
		sbb	eax, eax

loc_10002AF1:				; CODE XREF: sub_100029DF+BBj
					; sub_100029DF+103j
		mov	edi, eax

loc_10002AF3:				; CODE XREF: sub_100029DF+152j
		push	dword ptr [esi]
		call	sub_1000745F
		pop	ecx
		mov	eax, edi
		pop	ebp

loc_10002AFE:				; CODE XREF: sub_100029DF+61j
					; sub_100029DF+7Bj
		pop	edi
		pop	esi
		pop	ebx
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_10002B03:				; CODE XREF: sub_100029DF+ABj
		push	ebp
		call	sub_10002996
		movzx	eax, al
		mov	[esi+0Ch], eax
		pop	ecx
		cmp	eax, 3
		jz	short loc_10002B20
		push	ebp
		call	sub_10001CF8
		jmp	loc_10002A90
; ---------------------------------------------------------------------------

loc_10002B20:				; CODE XREF: sub_100029DF+134j
		push	ebx
		push	dword ptr [esi]
		call	sub_100073EF
		push	ebp
		call	sub_10001CF8
		add	esp, 0Ch
		jmp	short loc_10002AF3
sub_100029DF	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_10002B33(int,	int, char *, int)
sub_10002B33	proc near		; CODE XREF: sub_100022AC+75p
					; sub_100022AC+C2p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		cmp	[ebp+arg_0], 0
		push	0		; int
		jz	short loc_10002B53
		push	[ebp+arg_C]
		push	offset aKey	; "key"
		push	[ebp+arg_4]
		push	[ebp+arg_0]
		call	sub_10007A75
		jmp	short loc_10002B65
; ---------------------------------------------------------------------------

loc_10002B53:				; CODE XREF: sub_10002B33+9j
		push	1		; int
		push	180h		; int
		push	[ebp+arg_C]	; int
		push	[ebp+arg_8]	; char *
		call	sub_1000E2C0

loc_10002B65:				; CODE XREF: sub_10002B33+1Ej
		add	esp, 14h
		pop	ebp
		retn
sub_10002B33	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10002B6A	proc near		; CODE XREF: sub_100023BA+C0p
					; sub_100026D0+17Fp ...

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	esi
		push	edi
		mov	edi, [ebp+arg_0]
		movzx	eax, byte ptr [edi+0Ch]
		push	eax
		push	[ebp+arg_8]
		call	sub_100018E0
		mov	esi, eax
		pop	ecx
		pop	ecx
		test	esi, esi
		jz	short loc_10002BC3
		cmp	[ebp+arg_C], 0
		jz	short loc_10002B91
		push	0
		jmp	short loc_10002B93
; ---------------------------------------------------------------------------

loc_10002B91:				; CODE XREF: sub_10002B6A+21j
		push	8

loc_10002B93:				; CODE XREF: sub_10002B6A+25j
		push	esi
		push	[ebp+arg_4]
		push	edi
		call	sub_10001A41
		add	esp, 10h
		test	eax, eax
		jnz	short loc_10002BBC
		push	eax
		push	edi
		call	sub_10001AA7
		pop	ecx
		pop	ecx
		test	eax, eax
		jnz	short loc_10002BBC
		push	esi
		call	sub_10001991
		pop	ecx
		xor	eax, eax
		jmp	short loc_10002BC6
; ---------------------------------------------------------------------------

loc_10002BBC:				; CODE XREF: sub_10002B6A+38j
					; sub_10002B6A+45j
		push	esi
		call	sub_10001991
		pop	ecx

loc_10002BC3:				; CODE XREF: sub_10002B6A+1Bj
		or	eax, 0FFFFFFFFh

loc_10002BC6:				; CODE XREF: sub_10002B6A+50j
		pop	edi
		pop	esi
		pop	ebp
		retn
sub_10002B6A	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10002BCA	proc near		; CODE XREF: sub_100026D0+ADp

var_10		= byte ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		lea	eax, [ebp+var_10]
		push	esi
		push	3
		push	eax
		lea	eax, [ebp+var_8]
		xor	esi, esi
		push	eax
		push	[ebp+arg_0]
		call	sub_10001A74
		add	esp, 10h
		test	eax, eax
		jz	short loc_10002BF0
		xor	eax, eax
		jmp	short loc_10002C6E
; ---------------------------------------------------------------------------

loc_10002BF0:				; CODE XREF: sub_10002BCA+20j
					; sub_10002BCA+9Bj
		cmp	[ebp+var_C], 1
		jbe	short loc_10002C4E
		mov	eax, [ebp+var_4]
		cmp	eax, 0Bh
		jnz	short loc_10002C16
		push	eax		; size_t
		push	offset aGlobalSalt ; "global-salt"
		push	[ebp+var_8]	; void *
		call	memcmp
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_10002C4E
		mov	eax, [ebp+var_4]

loc_10002C16:				; CODE XREF: sub_10002BCA+32j
		cmp	eax, 0Eh
		jnz	short loc_10002C33
		push	eax		; size_t
		push	offset aPasswordCheck ;	"password-check"
		push	[ebp+var_8]	; void *
		call	memcmp
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_10002C4E
		mov	eax, [ebp+var_4]

loc_10002C33:				; CODE XREF: sub_10002BCA+4Fj
		mov	ecx, [ebp+var_8]
		cmp	byte ptr [ecx+eax-1], 0
		jnz	short loc_10002C4E
		push	offset aServerKey ; "Server-Key"
		push	ecx		; char *
		call	strcmp
		pop	ecx
		pop	ecx
		test	eax, eax
		jz	short loc_10002C69

loc_10002C4E:				; CODE XREF: sub_10002BCA+2Aj
					; sub_10002BCA+47j ...
		push	7
		lea	eax, [ebp+var_10]
		push	eax
		lea	eax, [ebp+var_8]
		push	eax
		push	[ebp+arg_0]
		call	sub_10001A74
		add	esp, 10h
		test	eax, eax
		jz	short loc_10002BF0
		jmp	short loc_10002C6C
; ---------------------------------------------------------------------------

loc_10002C69:				; CODE XREF: sub_10002BCA+82j
		xor	esi, esi
		inc	esi

loc_10002C6C:				; CODE XREF: sub_10002BCA+9Dj
		mov	eax, esi

loc_10002C6E:				; CODE XREF: sub_10002BCA+24j
		pop	esi
		mov	esp, ebp
		pop	ebp
		retn
sub_10002BCA	endp


; =============== S U B	R O U T	I N E =======================================


sub_10002C73	proc near		; CODE XREF: sub_10003197+51p

var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= byte ptr -18h
var_C		= byte ptr -0Ch
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 20h
		push	ebx
		push	esi
		xor	esi, esi
		and	[esp+28h+var_1C], esi
		push	edi
		or	edi, 0FFFFFFFFh
		cmp	[esp+2Ch+arg_0], esi
		jz	loc_10002FB4
		cmp	[esp+2Ch+arg_4], esi
		jz	loc_10002FB4
		mov	ebx, 800h
		push	ebx
		call	PORT_NewArena_Util
		push	ebx
		mov	[esp+34h+var_20], eax
		call	PORT_NewArena_Util
		mov	ebx, eax
		mov	eax, [esp+34h+var_20]
		pop	ecx
		pop	ecx
		test	eax, eax
		jz	loc_10002F8E
		test	ebx, ebx
		jz	loc_10002F84
		push	ebp
		push	38h
		push	eax
		call	PORT_ArenaZAlloc_Util
		push	0B0h
		push	ebx
		mov	ebp, eax
		call	PORT_ArenaZAlloc_Util
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		jz	loc_10002F7F
		test	ebp, ebp
		jz	loc_10002F7F
		lea	eax, [esp+30h+var_1C]
		mov	[esi], ebx
		push	eax
		push	[esp+34h+arg_0]
		push	[esp+38h+arg_4]
		call	sub_10008058
		mov	edi, eax
		add	esp, 0Ch
		test	edi, edi
		jnz	loc_10002F7F
		cmp	[esp+30h+var_1C], eax
		jz	loc_10002F7F
		push	[esp+30h+var_1C]
		push	offset dword_10013918
		push	ebp
		push	[esp+3Ch+var_20]
		call	SEC_QuickDERDecodeItem_Util
		mov	edi, eax
		add	esp, 10h
		test	edi, edi
		jnz	loc_10002F68
		lea	eax, [ebp+10h]
		push	eax
		call	SECOID_GetAlgorithmTag_Util
		pop	ecx
		sub	eax, 10h
		jz	loc_10002ED1
		sub	eax, 51h
		jz	loc_10002ED1
		sub	eax, 1Bh
		jz	loc_10002E56
		sub	eax, 32h
		jz	loc_10002E14
		sub	eax, 1Ah
		jz	short loc_10002D74

loc_10002D6C:				; CODE XREF: sub_10002C73+2F0j
		or	edi, 0FFFFFFFFh
		jmp	loc_10002F7F
; ---------------------------------------------------------------------------

loc_10002D74:				; CODE XREF: sub_10002C73+F7j
		push	esi
		mov	dword ptr [esi+4], 5
		call	sub_10008F14
		lea	eax, [ebp+28h]
		push	eax
		lea	eax, [esp+38h+var_18]
		push	eax
		push	ebx
		call	SECITEM_CopyItem_Util
		add	esp, 10h
		test	eax, eax
		jnz	loc_10002F7F
		lea	eax, [esp+30h+var_18]
		push	eax
		push	offset dword_100138B8
		push	esi
		push	ebx
		call	SEC_QuickDERDecodeItem_Util
		mov	edi, eax
		add	esp, 10h
		test	edi, edi
		jnz	loc_10002F7F
		lea	eax, [esi+8]
		push	eax
		call	sub_10008F37
		lea	eax, [ebp+1Ch]
		push	eax
		lea	ecx, [esi+70h]
		push	ecx
		push	ebx
		call	SECITEM_CopyItem_Util
		mov	edi, eax
		add	esp, 10h
		test	edi, edi
		jnz	loc_10002F7F
		lea	eax, [esi+8]
		push	eax
		lea	eax, [esi+70h]
		push	eax
		push	ebx
		call	sub_10008C6A
		mov	edi, eax
		add	esp, 0Ch
		test	edi, edi
		jnz	loc_10002F7F
		mov	eax, [esi+94h]
		test	eax, eax
		jz	loc_10002F7F
		shr	eax, 3
		mov	[esi+94h], eax
		jmp	loc_10002F7F
; ---------------------------------------------------------------------------

loc_10002E14:				; CODE XREF: sub_10002C73+EEj
		push	esi
		mov	dword ptr [esi+4], 4
		call	sub_10008EE9
		lea	eax, [ebp+28h]
		push	eax
		lea	eax, [esp+38h+var_18]
		push	eax
		push	ebx
		call	SECITEM_CopyItem_Util
		add	esp, 10h
		test	eax, eax
		jnz	loc_10002F7F
		lea	eax, [esp+30h+var_18]
		push	eax
		push	offset dword_10013828
		push	esi

loc_10002E46:				; CODE XREF: sub_10002C73+259j
		push	ebx
		call	SEC_QuickDERDecodeItem_Util
		add	esp, 10h
		mov	edi, eax
		jmp	loc_10002F7F
; ---------------------------------------------------------------------------

loc_10002E56:				; CODE XREF: sub_10002C73+E5j
		push	esi
		mov	dword ptr [esi+4], 2
		call	sub_10008EFD
		lea	eax, [ebp+28h]
		push	eax
		lea	eax, [esp+38h+var_18]
		push	eax
		push	ebx
		call	SECITEM_CopyItem_Util
		add	esp, 10h
		test	eax, eax
		jnz	loc_10002F7F
		lea	eax, [esp+30h+var_18]
		push	eax
		push	offset dword_100137E8
		push	esi
		push	ebx
		call	SEC_QuickDERDecodeItem_Util
		mov	edi, eax
		add	esp, 10h
		test	edi, edi
		jnz	loc_10002F7F
		lea	eax, [esi+8]
		push	eax
		call	sub_10008F45
		lea	eax, [ebp+1Ch]
		push	eax
		lea	eax, [esp+38h+var_C]
		push	eax
		push	ebx
		call	SECITEM_CopyItem_Util
		add	esp, 10h
		test	eax, eax
		jnz	loc_10002F7F
		lea	eax, [esp+30h+var_C]
		push	eax
		push	offset dword_10013638
		lea	eax, [esi+8]
		push	eax
		jmp	loc_10002E46
; ---------------------------------------------------------------------------

loc_10002ED1:				; CODE XREF: sub_10002C73+D3j
					; sub_10002C73+DCj
		push	esi
		mov	dword ptr [esi+4], 1
		call	sub_10008F56
		lea	eax, [ebp+28h]
		push	eax
		lea	eax, [esp+38h+var_18]
		push	eax
		push	ebx
		call	SECITEM_CopyItem_Util
		add	esp, 10h
		test	eax, eax
		jnz	loc_10002F7F
		lea	eax, [esp+30h+var_18]
		push	eax
		push	offset dword_10013688
		push	esi
		push	ebx
		call	SEC_QuickDERDecodeItem_Util
		mov	edi, eax
		add	esp, 10h
		test	edi, edi
		jz	short loc_10002F7F
		lea	eax, [esp+30h+var_18]
		push	eax
		push	offset dword_10013738
		push	esi
		push	ebx
		call	SEC_QuickDERDecodeItem_Util
		mov	edi, eax
		add	esp, 10h
		test	edi, edi
		jnz	short loc_10002F7F
		cmp	dword ptr [esi+20h], 2
		jnz	short loc_10002F58
		mov	eax, [esi+1Ch]
		cmp	byte ptr [eax],	2
		jnz	short loc_10002F58
		cmp	byte ptr [eax+1], 0
		jnz	short loc_10002F58
		xor	ecx, ecx
		inc	ecx
		cmp	[esi+2Ch], ecx
		jnz	short loc_10002F58
		mov	eax, [esi+28h]
		cmp	byte ptr [eax],	0
		jnz	short loc_10002F58
		mov	[esi+1Ch], eax
		mov	[esi+20h], ecx
		jmp	short loc_10002F7F
; ---------------------------------------------------------------------------

loc_10002F58:				; CODE XREF: sub_10002C73+2BDj
					; sub_10002C73+2C5j ...
		push	0FFFFE009h
		call	PORT_SetError_Util
		pop	ecx
		jmp	loc_10002D6C
; ---------------------------------------------------------------------------

loc_10002F68:				; CODE XREF: sub_10002C73+C0j
		call	PORT_GetError_Util
		cmp	eax, 0FFFFE009h
		jnz	short loc_10002F7F
		push	0FFFFE00Fh
		call	PORT_SetError_Util
		pop	ecx

loc_10002F7F:				; CODE XREF: sub_10002C73+6Dj
					; sub_10002C73+75j ...
		mov	eax, [esp+30h+var_20]
		pop	ebp

loc_10002F84:				; CODE XREF: sub_10002C73+4Aj
		push	1
		push	eax
		call	PORT_FreeArena_Util
		pop	ecx
		pop	ecx

loc_10002F8E:				; CODE XREF: sub_10002C73+42j
		cmp	[esp+2Ch+var_1C], 0
		jz	short loc_10002FA2
		push	1
		push	[esp+30h+var_1C]
		call	SECITEM_ZfreeItem_Util
		pop	ecx
		pop	ecx

loc_10002FA2:				; CODE XREF: sub_10002C73+320j
		test	edi, edi
		jz	short loc_10002FB6
		test	ebx, ebx
		jz	short loc_10002FB4
		push	1
		push	ebx
		call	PORT_FreeArena_Util
		pop	ecx
		pop	ecx

loc_10002FB4:				; CODE XREF: sub_10002C73+13j
					; sub_10002C73+1Dj ...
		xor	esi, esi

loc_10002FB6:				; CODE XREF: sub_10002C73+331j
		pop	edi
		mov	eax, esi
		pop	esi
		pop	ebx
		add	esp, 20h
		retn
sub_10002C73	endp


; =============== S U B	R O U T	I N E =======================================


sub_10002FBF	proc near		; CODE XREF: sub_10003203+55p

var_1C		= dword	ptr -1Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ecx
		push	ecx
		and	[esp+8+var_8], 0
		push	esi
		push	edi
		push	800h
		or	esi, 0FFFFFFFFh
		call	PORT_NewArena_Util
		mov	edi, eax
		pop	ecx
		test	edi, edi
		jz	loc_10003190
		push	ebp
		push	38h
		push	edi
		call	PORT_ArenaZAlloc_Util
		push	0Ch
		push	edi
		mov	ebp, eax
		call	PORT_ArenaZAlloc_Util
		add	esp, 10h
		mov	[esp+14h+var_4], eax
		test	ebp, ebp
		jz	loc_10003185
		test	eax, eax
		jz	loc_10003185
		push	0
		lea	eax, [ebp+4]
		push	eax
		push	edi
		call	SEC_ASN1EncodeInteger_Util
		add	esp, 0Ch
		test	eax, eax
		jz	loc_10003185
		push	ebx
		mov	ebx, [esp+18h+arg_4]
		mov	eax, [ebx+4]
		dec	eax
		jz	loc_10003102
		dec	eax
		jz	loc_100030BE
		dec	eax
		dec	eax
		jz	short loc_10003093
		dec	eax
		jnz	loc_10003139
		push	ebx
		call	sub_10008F14
		mov	esi, [ebx+88h]
		lea	eax, [ebp+28h]
		shl	dword ptr [ebx+94h], 3
		and	dword ptr [ebx+88h], 0
		mov	[esp+1Ch+var_1C], offset dword_100138B8
		push	ebx
		push	eax
		push	edi
		call	SEC_ASN1EncodeItem_Util
		shr	dword ptr [ebx+94h], 3
		add	esp, 10h
		mov	[ebx+88h], esi
		test	eax, eax
		jz	loc_10003150
		lea	eax, [ebx+70h]
		push	eax
		push	0C8h
		jmp	loc_10003125
; ---------------------------------------------------------------------------

loc_10003093:				; CODE XREF: sub_10002FBF+79j
		push	ebx
		call	sub_10008EE9
		mov	[esp+1Ch+var_1C], offset dword_10013828
		lea	eax, [ebp+28h]
		push	ebx
		push	eax
		push	edi
		call	SEC_ASN1EncodeItem_Util
		add	esp, 10h
		test	eax, eax
		jz	loc_10003150
		push	eax
		push	0AEh
		jmp	short loc_10003125
; ---------------------------------------------------------------------------

loc_100030BE:				; CODE XREF: sub_10002FBF+71j
		push	ebx
		call	sub_10008EFD
		mov	[esp+1Ch+var_1C], offset dword_100137E8
		lea	eax, [ebp+28h]
		push	ebx
		push	eax
		push	edi
		call	SEC_ASN1EncodeItem_Util
		add	esp, 10h
		test	eax, eax
		jz	short loc_10003150
		lea	esi, [ebx+8]
		push	esi
		call	sub_10008F45
		mov	[esp+1Ch+var_1C], offset dword_10013638
		push	esi
		push	0
		push	edi
		call	SEC_ASN1EncodeItem_Util
		add	esp, 10h
		test	eax, eax
		jz	short loc_10003150
		push	eax
		push	7Ch
		jmp	short loc_10003125
; ---------------------------------------------------------------------------

loc_10003102:				; CODE XREF: sub_10002FBF+6Aj
		push	ebx
		call	sub_10008F56
		mov	[esp+1Ch+var_1C], offset dword_10013688
		lea	eax, [ebp+28h]
		push	ebx
		push	eax
		push	edi
		call	SEC_ASN1EncodeItem_Util
		add	esp, 10h
		test	eax, eax
		jz	short loc_10003150
		push	0
		push	10h

loc_10003125:				; CODE XREF: sub_10002FBF+CFj
					; sub_10002FBF+FDj ...
		lea	eax, [ebp+10h]
		push	eax
		push	edi
		call	SECOID_SetAlgorithmID_Util
		mov	esi, eax
		add	esp, 10h
		cmp	esi, 0FFFFFFFFh
		jz	short loc_10003184

loc_10003139:				; CODE XREF: sub_10002FBF+7Cj
		push	offset dword_10013918
		push	ebp
		push	[esp+20h+var_4]
		push	edi
		call	SEC_ASN1EncodeItem_Util
		add	esp, 10h
		test	eax, eax
		jnz	short loc_10003155

loc_10003150:				; CODE XREF: sub_10002FBF+C0j
					; sub_10002FBF+F1j ...
		or	esi, 0FFFFFFFFh
		jmp	short loc_10003184
; ---------------------------------------------------------------------------

loc_10003155:				; CODE XREF: sub_10002FBF+18Fj
		lea	ecx, [esp+18h+var_8]
		push	ecx
		push	eax
		push	[esp+20h+arg_8]
		push	edi
		call	sub_10008072
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		jnz	short loc_10003184
		push	[esp+18h+var_8]
		push	[esp+1Ch+arg_C]
		push	[esp+20h+arg_0]
		call	SECITEM_CopyItem_Util
		add	esp, 0Ch
		mov	esi, eax

loc_10003184:				; CODE XREF: sub_10002FBF+178j
					; sub_10002FBF+194j ...
		pop	ebx

loc_10003185:				; CODE XREF: sub_10002FBF+3Cj
					; sub_10002FBF+44j ...
		push	1
		push	edi
		call	PORT_FreeArena_Util
		pop	ecx
		pop	ecx
		pop	ebp

loc_10003190:				; CODE XREF: sub_10002FBF+1Aj
		pop	edi
		mov	eax, esi
		pop	esi
		pop	ecx
		pop	ecx
		retn
sub_10002FBF	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10003197	proc near		; CODE XREF: sub_10001F28+35p
					; sub_10001F69+3Cp

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	esi
		xor	esi, esi
		cmp	[ebp+arg_0], esi
		jz	short loc_100031FE
		cmp	[ebp+arg_4], esi
		jz	short loc_100031FE
		cmp	[ebp+arg_C], esi
		jz	short loc_100031FE
		push	ebx
		push	[ebp+arg_4]
		push	[ebp+arg_0]
		call	sub_100019AB
		mov	ebx, eax
		pop	ecx
		pop	ecx
		test	ebx, ebx
		jz	short loc_100031F9
		push	edi
		mov	edi, [ebp+arg_8]
		test	edi, edi
		jz	short loc_100031E1
		mov	eax, [ebx+8]
		test	eax, eax
		jz	short loc_100031DF
		cmp	byte ptr [eax],	0
		jz	short loc_100031DF
		push	eax
		call	PORT_Strdup_Util
		pop	ecx
		mov	[edi], eax
		jmp	short loc_100031E1
; ---------------------------------------------------------------------------

loc_100031DF:				; CODE XREF: sub_10003197+36j
					; sub_10003197+3Bj
		mov	[edi], esi

loc_100031E1:				; CODE XREF: sub_10003197+2Fj
					; sub_10003197+46j
		push	[ebp+arg_C]
		lea	eax, [ebx+18h]
		push	eax
		call	sub_10002C73
		push	ebx
		mov	esi, eax
		call	sub_10008ED0
		add	esp, 0Ch
		pop	edi

loc_100031F9:				; CODE XREF: sub_10003197+27j
		mov	eax, esi
		pop	ebx
		jmp	short loc_10003200
; ---------------------------------------------------------------------------

loc_100031FE:				; CODE XREF: sub_10003197+9j
					; sub_10003197+Ej ...
		xor	eax, eax

loc_10003200:				; CODE XREF: sub_10003197+65j
		pop	esi
		pop	ebp
		retn
sub_10003197	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10003203	proc near		; CODE XREF: sub_100025E6+3Dp

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch

		push	ebp
		mov	ebp, esp
		push	esi
		or	esi, 0FFFFFFFFh
		cmp	[ebp+arg_0], 0
		push	edi
		jz	short loc_10003285
		cmp	[ebp+arg_4], 0
		jz	short loc_10003285
		cmp	[ebp+arg_8], 0
		jz	short loc_10003285
		cmp	[ebp+arg_C], 0
		jz	short loc_10003285
		push	800h
		call	PORT_NewArena_Util
		mov	edi, eax
		pop	ecx
		test	edi, edi
		jz	short loc_10003285
		push	ebx
		push	24h
		push	edi
		call	PORT_ArenaZAlloc_Util
		mov	ebx, eax
		pop	ecx
		pop	ecx
		test	ebx, ebx
		jz	short loc_1000327A
		mov	eax, [ebp+arg_10]
		mov	[ebx+8], eax
		lea	eax, [ebx+18h]
		push	eax
		push	[ebp+arg_8]
		mov	[ebx], edi
		push	[ebp+arg_C]
		push	edi
		call	sub_10002FBF
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		jnz	short loc_1000327A
		push	[ebp+arg_14]
		push	ebx
		push	[ebp+arg_4]
		push	[ebp+arg_0]
		call	sub_10002B6A
		add	esp, 10h
		mov	esi, eax

loc_1000327A:				; CODE XREF: sub_10003203+40j
					; sub_10003203+61j
		push	1
		push	edi
		call	PORT_FreeArena_Util
		pop	ecx
		pop	ecx
		pop	ebx

loc_10003285:				; CODE XREF: sub_10003203+Cj
					; sub_10003203+12j ...
		pop	edi
		mov	eax, esi
		pop	esi
		pop	ebp
		retn
sub_10003203	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000328B	proc near		; CODE XREF: sub_100022AC+84p
					; sub_100022AC+CAp

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		push	esi
		call	sub_10002996
		movzx	eax, al
		mov	[esi+0Ch], eax
		pop	ecx
		cmp	eax, 3
		jz	short loc_100032B1
		cmp	dword ptr [esi], 0
		jz	short loc_100032B1
		push	esi
		call	sub_100019EB
		and	dword ptr [esi], 0
		pop	ecx

loc_100032B1:				; CODE XREF: sub_1000328B+15j
					; sub_1000328B+1Aj
		xor	eax, eax
		cmp	[esi], eax
		pop	esi
		setnz	al
		retn
sub_1000328B	endp


; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_100032BA(int,	int, void *, size_t)
sub_100032BA	proc near		; CODE XREF: sub_100032FD+18p
					; sub_10003344+44p ...

arg_0		= dword	ptr  4
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	esi
		mov	esi, [esp+4+arg_0]
		cmp	dword ptr [esi+4], 0
		jnz	short loc_100032D0
		mov	eax, [esp+4+arg_C]
		mov	[esi+8], eax
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_100032D0:				; CODE XREF: sub_100032BA+9j
		push	edi
		mov	edi, [esp+8+arg_C]
		cmp	[esi+8], edi
		jnb	short loc_100032E5
		or	dword ptr [esi+8], 0FFFFFFFFh
		mov	eax, 150h
		jmp	short loc_100032FA
; ---------------------------------------------------------------------------

loc_100032E5:				; CODE XREF: sub_100032BA+1Ej
		push	edi		; size_t
		push	[esp+0Ch+arg_8]	; void *
		push	dword ptr [esi+4] ; void *
		call	memcpy
		add	esp, 0Ch
		mov	[esi+8], edi
		xor	eax, eax

loc_100032FA:				; CODE XREF: sub_100032BA+29j
		pop	edi
		pop	esi
		retn
sub_100032BA	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_100032FD(int,	int, void *, size_t)
sub_100032FD	proc near		; CODE XREF: sub_100036E6+D3p
					; sub_100037F1+9Ap ...

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_8]
		mov	ecx, [ebp+arg_C]
		cmp	byte ptr [eax],	0
		jnz	short loc_1000330D
		inc	eax
		dec	ecx

loc_1000330D:				; CODE XREF: sub_100032FD+Cj
		push	ecx		; size_t
		push	eax		; void *
		push	[ebp+arg_4]	; int
		push	[ebp+arg_0]	; int
		call	sub_100032BA
		add	esp, 10h
		pop	ebp
		retn
sub_100032FD	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_1000331F	proc near		; CODE XREF: sub_100036E6+96p
					; sub_100038EE+B0p ...

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_8]
		mov	ecx, [ebp+arg_C]
		cmp	byte ptr [eax],	0
		jnz	short loc_1000332F
		inc	eax
		dec	ecx

loc_1000332F:				; CODE XREF: sub_1000331F+Cj
		push	[ebp+arg_10]
		push	ecx
		push	eax
		push	[ebp+arg_4]
		push	[ebp+arg_0]
		call	sub_10003344
		add	esp, 14h
		pop	ebp
		retn
sub_1000331F	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10003344	proc near		; CODE XREF: sub_1000331F+1Bp
					; sub_10004356+1C0p

var_10		= byte ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		mov	eax, [ebp+arg_8]
		and	[ebp+var_4], 0
		mov	[ebp+var_C], eax
		mov	eax, [ebp+arg_C]
		push	esi
		mov	[ebp+var_8], eax
		mov	esi, 101h
		lea	eax, [ebp+var_4]
		push	eax
		lea	eax, [ebp+var_10]
		push	eax
		push	[ebp+arg_10]
		push	0
		call	sub_10008072
		add	esp, 10h
		test	eax, eax
		jnz	short loc_10003392
		mov	eax, [ebp+var_4]
		push	dword ptr [eax+8] ; size_t
		push	dword ptr [eax+4] ; void *
		push	[ebp+arg_4]	; int
		push	[ebp+arg_0]	; int
		call	sub_100032BA
		add	esp, 10h
		mov	esi, eax

loc_10003392:				; CODE XREF: sub_10003344+33j
		cmp	[ebp+var_4], 0
		jz	short loc_100033A4
		push	1
		push	[ebp+var_4]
		call	SECITEM_FreeItem_Util
		pop	ecx
		pop	ecx

loc_100033A4:				; CODE XREF: sub_10003344+52j
		mov	eax, esi
		pop	esi
		mov	esp, ebp
		pop	ebp
		retn
sub_10003344	endp


; =============== S U B	R O U T	I N E =======================================


sub_100033AB	proc near		; CODE XREF: sub_100047EF+4Dp
					; sub_100049D4+81p ...

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		cmp	dword ptr [esi+18h], 0
		jz	short loc_100033C3
		push	dword ptr [esi+18h]
		call	PORT_Free_Util
		and	dword ptr [esi+18h], 0
		pop	ecx

loc_100033C3:				; CODE XREF: sub_100033AB+9j
		cmp	dword ptr [esi+0Ch], 0
		jz	short loc_100033D8
		push	dword ptr [esi+0Ch]
		call	dword ptr [esi+10h]
		and	dword ptr [esi+0Ch], 0
		and	dword ptr [esi+10h], 0
		pop	ecx

loc_100033D8:				; CODE XREF: sub_100033AB+1Cj
		push	esi
		call	PORT_Free_Util
		pop	ecx
		pop	esi
		retn
sub_100033AB	endp


; =============== S U B	R O U T	I N E =======================================


sub_100033E1	proc near		; CODE XREF: sub_100048EF+BAp

var_18		= byte ptr -18h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 18h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+18h+var_4], eax
		push	ebx
		mov	ebx, [esp+1Ch+arg_4]
		push	ebp
		push	esi
		mov	esi, [esp+24h+arg_0]
		mov	ebp, 82h
		push	edi
		mov	edi, [esp+28h+arg_8]
		cmp	ebx, ebp
		ja	short loc_10003448
		cmp	ebx, 81h
		jnb	short loc_1000348D
		lea	eax, [ebx-1]
		dec	eax
		jz	short loc_10003434
		dec	eax
		jz	short loc_1000348D
		sub	eax, 0Eh
		jz	short loc_1000348D
		sub	eax, 6Fh
		jnz	short loc_10003469
		push	eax
		push	80h
		push	edi
		call	sub_10004FBA
		add	esp, 0Ch
		jmp	short loc_10003470
; ---------------------------------------------------------------------------

loc_10003434:				; CODE XREF: sub_100033E1+33j
		push	1		; size_t
		push	offset byte_10015028 ; void *
		push	2		; int

loc_1000343D:				; CODE XREF: sub_100033E1+AAj
					; sub_100033E1+15Bj ...
		push	edi		; int
		call	sub_100032BA
		add	esp, 10h
		jmp	short loc_10003470
; ---------------------------------------------------------------------------

loc_10003448:				; CODE XREF: sub_100033E1+25j
		cmp	ebx, 101h
		jb	short loc_10003469
		cmp	ebx, 102h
		jbe	short loc_1000348D
		mov	eax, 170h
		cmp	ebx, eax
		jz	short loc_10003483
		cmp	ebx, 0CE534352h
		jz	short loc_1000348D

loc_10003469:				; CODE XREF: sub_100033E1+40j
					; sub_100033E1+6Dj ...
		or	dword ptr [edi+8], 0FFFFFFFFh
		push	12h
		pop	eax

loc_10003470:				; CODE XREF: sub_100033E1+51j
					; sub_100033E1+65j ...
		mov	ecx, [esp+28h+var_4]
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 18h
		retn
; ---------------------------------------------------------------------------

loc_10003483:				; CODE XREF: sub_100033E1+7Ej
		push	1
		push	offset byte_10015000

loc_1000348A:				; CODE XREF: sub_100033E1+1D8j
					; sub_100033E1+1EEj
		push	eax
		jmp	short loc_1000343D
; ---------------------------------------------------------------------------

loc_1000348D:				; CODE XREF: sub_100033E1+2Dj
					; sub_100033E1+36j ...
		push	dword ptr [esi+8]
		call	sub_100078A3
		pop	ecx
		test	eax, eax
		jnz	short loc_1000349E

loc_1000349A:				; CODE XREF: sub_100033E1+CAj
		mov	eax, ebp
		jmp	short loc_10003470
; ---------------------------------------------------------------------------

loc_1000349E:				; CODE XREF: sub_100033E1+B7j
		push	eax
		push	esi
		call	sub_100050AA
		mov	esi, eax
		pop	ecx
		pop	ecx
		test	esi, esi
		jz	short loc_1000349A
		cmp	ebx, 3
		jz	loc_100035E1
		cmp	ebx, 11h
		jz	loc_100035D4
		mov	eax, 81h
		cmp	ebx, eax
		jz	loc_100035C9
		cmp	ebx, ebp
		jz	loc_100035BE
		mov	eax, 101h
		cmp	ebx, eax
		jz	loc_100035B3
		lea	ebp, [eax+1]
		cmp	ebx, ebp
		jz	short loc_10003520
		mov	ebp, 0CE534352h
		cmp	ebx, ebp
		jnz	loc_10003469
		mov	eax, [esi+8Ch]
		test	eax, eax
		jz	short loc_10003537
		cmp	byte ptr [eax],	0
		jz	short loc_10003537
		push	eax		; char *
		call	strlen
		push	eax		; size_t
		push	dword ptr [esi+8Ch] ; void *
		push	ebp		; int

loc_10003512:				; CODE XREF: sub_100033E1+219j
		push	edi		; int
		call	sub_100032BA
		add	esp, 14h
		jmp	loc_10003470
; ---------------------------------------------------------------------------

loc_10003520:				; CODE XREF: sub_100033E1+105j
		mov	eax, [esi+90h]
		test	byte ptr [eax],	40h
		jnz	short loc_10003541
		test	byte ptr [eax+4], 40h
		jnz	short loc_10003541
		test	byte ptr [eax+8], 40h
		jnz	short loc_10003541

loc_10003537:				; CODE XREF: sub_100033E1+11Cj
					; sub_100033E1+121j
		push	0
		push	0

loc_1000353B:				; CODE XREF: sub_100033E1+1E3j
		push	ebp
		jmp	loc_1000343D
; ---------------------------------------------------------------------------

loc_10003541:				; CODE XREF: sub_100033E1+148j
					; sub_100033E1+14Ej ...
		push	esi
		call	sub_10008489
		mov	esi, eax
		pop	ecx
		test	esi, esi
		jz	loc_10003469
		mov	ecx, [esi+4]
		dec	ecx
		jz	short loc_10003574
		dec	ecx
		jz	short loc_1000356F
		dec	ecx
		dec	ecx
		jz	short loc_1000356A
		dec	ecx
		jnz	short loc_1000357B
		lea	eax, [esi+8Ch]
		jmp	short loc_10003577
; ---------------------------------------------------------------------------

loc_1000356A:				; CODE XREF: sub_100033E1+17Cj
		lea	eax, [esi+24h]
		jmp	short loc_10003577
; ---------------------------------------------------------------------------

loc_1000356F:				; CODE XREF: sub_100033E1+178j
		lea	eax, [esi+30h]
		jmp	short loc_10003577
; ---------------------------------------------------------------------------

loc_10003574:				; CODE XREF: sub_100033E1+175j
		lea	eax, [esi+0Ch]

loc_10003577:				; CODE XREF: sub_100033E1+187j
					; sub_100033E1+18Cj ...
		test	eax, eax
		jnz	short loc_10003587

loc_1000357B:				; CODE XREF: sub_100033E1+17Fj
		push	esi
		call	sub_10008ED0
		pop	ecx
		jmp	loc_10003469
; ---------------------------------------------------------------------------

loc_10003587:				; CODE XREF: sub_100033E1+198j
		push	dword ptr [eax+8]
		push	dword ptr [eax+4]
		lea	eax, [esp+30h+var_18]
		push	eax
		call	sub_1000E0C0
		push	esi
		call	sub_10008ED0
		push	14h		; size_t
		lea	eax, [esp+3Ch+var_18]
		push	eax		; void *
		push	ebp		; int
		push	edi		; int
		call	sub_100032BA
		add	esp, 20h
		jmp	loc_10003470
; ---------------------------------------------------------------------------

loc_100035B3:				; CODE XREF: sub_100033E1+FAj
		push	dword ptr [esi+40h]
		push	dword ptr [esi+3Ch]
		jmp	loc_1000348A
; ---------------------------------------------------------------------------

loc_100035BE:				; CODE XREF: sub_100033E1+EDj
		push	dword ptr [esi+28h]
		push	dword ptr [esi+24h]
		jmp	loc_1000353B
; ---------------------------------------------------------------------------

loc_100035C9:				; CODE XREF: sub_100033E1+E5j
		push	dword ptr [esi+1Ch]
		push	dword ptr [esi+18h]
		jmp	loc_1000348A
; ---------------------------------------------------------------------------

loc_100035D4:				; CODE XREF: sub_100033E1+D8j
		push	dword ptr [esi+10h]
		push	dword ptr [esi+0Ch]
		push	11h
		jmp	loc_1000343D
; ---------------------------------------------------------------------------

loc_100035E1:				; CODE XREF: sub_100033E1+CFj
		mov	eax, [esi+88h]
		test	eax, eax
		jz	short loc_100035FF
		push	eax		; char *
		call	strlen
		push	eax
		push	dword ptr [esi+88h]
		push	3
		jmp	loc_10003512
; ---------------------------------------------------------------------------

loc_100035FF:				; CODE XREF: sub_100033E1+208j
		push	0
		push	0
		push	3
		jmp	loc_1000343D
sub_100033E1	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_1000360A	proc near		; CODE XREF: sub_100048EF+8Ep

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	ebx
		push	esi
		mov	esi, [ebp+arg_4]
		push	edi
		cmp	esi, 2
		jz	loc_100036CE
		mov	ebx, 0CE534351h
		cmp	esi, 11h
		jz	short loc_1000367D
		mov	ecx, 101h
		cmp	esi, ecx
		jz	short loc_10003672
		cmp	esi, 170h
		jz	loc_100036CE
		cmp	esi, ebx
		jz	short loc_1000367D
		lea	ecx, [ebx+7]
		cmp	esi, ecx
		jz	short loc_10003655

loc_10003646:				; CODE XREF: sub_1000360A+90j
		mov	eax, [ebp+arg_8]
		push	12h
		or	dword ptr [eax+8], 0FFFFFFFFh
		pop	eax
		jmp	loc_100036E1
; ---------------------------------------------------------------------------

loc_10003655:				; CODE XREF: sub_1000360A+3Aj
		mov	eax, [ebp+arg_0]
		push	1
		cmp	dword ptr [eax+4], 28000001h
		jnz	short loc_1000366A
		push	offset byte_10015000
		jmp	short loc_1000366F
; ---------------------------------------------------------------------------

loc_1000366A:				; CODE XREF: sub_1000360A+57j
		push	offset byte_10015028

loc_1000366F:				; CODE XREF: sub_1000360A+5Ej
					; sub_1000360A+71j
		push	ecx
		jmp	short loc_100036D6
; ---------------------------------------------------------------------------

loc_10003672:				; CODE XREF: sub_1000360A+23j
		mov	eax, [ebp+arg_0]
		push	dword ptr [eax+1Ch]
		push	dword ptr [eax+18h]
		jmp	short loc_1000366F
; ---------------------------------------------------------------------------

loc_1000367D:				; CODE XREF: sub_1000360A+1Aj
					; sub_1000360A+33j
		push	[ebp+arg_0]
		call	sub_100050EB
		mov	edi, eax
		pop	ecx
		test	edi, edi
		jnz	short loc_10003693
		mov	eax, 82h
		jmp	short loc_100036E1
; ---------------------------------------------------------------------------

loc_10003693:				; CODE XREF: sub_1000360A+80j
		cmp	esi, 11h
		jz	short loc_100036C4
		cmp	esi, ebx
		jnz	short loc_10003646
		cmp	dword ptr [edi+1Ch], 0
		jnz	short loc_100036A9
		push	0
		push	0
		push	ebx
		jmp	short loc_100036D6
; ---------------------------------------------------------------------------

loc_100036A9:				; CODE XREF: sub_1000360A+96j
		push	dword ptr [edi+1Ch] ; char *
		call	strlen
		inc	eax
		push	eax		; size_t
		push	dword ptr [edi+1Ch] ; void *
		push	ebx		; int
		push	[ebp+arg_8]	; int
		call	sub_100032BA
		add	esp, 14h
		jmp	short loc_100036E1
; ---------------------------------------------------------------------------

loc_100036C4:				; CODE XREF: sub_1000360A+8Cj
		push	dword ptr [edi+18h]
		push	dword ptr [edi+14h]
		push	11h
		jmp	short loc_100036D6
; ---------------------------------------------------------------------------

loc_100036CE:				; CODE XREF: sub_1000360A+Cj
					; sub_1000360A+2Bj
		push	1		; size_t
		push	offset byte_10015028 ; void *
		push	esi		; int

loc_100036D6:				; CODE XREF: sub_1000360A+66j
					; sub_1000360A+9Dj ...
		push	[ebp+arg_8]	; int
		call	sub_100032BA
		add	esp, 10h

loc_100036E1:				; CODE XREF: sub_1000360A+46j
					; sub_1000360A+87j ...
		pop	edi
		pop	esi
		pop	ebx
		pop	ebp
		retn
sub_1000360A	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_100036E6	proc near		; CODE XREF: sub_10003DD9+11Ep

var_18		= byte ptr -18h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	eax, ___security_cookie
		xor	eax, ebp
		mov	[ebp+var_4], eax
		mov	ecx, [ebp+arg_4]
		mov	edx, [ebp+arg_0]
		push	esi
		mov	esi, [ebp+arg_8]
		push	edi
		mov	edi, [ebp+arg_C]
		cmp	ecx, 109h
		ja	short loc_10003786
		cmp	ecx, 107h
		jnb	short loc_1000372B
		mov	eax, ecx
		sub	eax, 11h
		jz	short loc_10003772
		sub	eax, 0EFh
		jz	short loc_10003760
		dec	eax
		dec	eax
		jz	short loc_10003738
		sub	eax, 3
		jnz	short loc_100037A8

loc_1000372B:				; CODE XREF: sub_100036E6+2Cj
		push	1
		push	offset byte_10015028
		push	ecx
		jmp	loc_100037D8
; ---------------------------------------------------------------------------

loc_10003738:				; CODE XREF: sub_100036E6+3Ej
		push	dword ptr [edx+2Ch]
		lea	eax, [ebp+var_18]
		push	dword ptr [edx+28h]
		push	eax
		call	sub_1000E0C0
		push	14h		; size_t
		lea	eax, [ebp+var_18]
		push	eax		; void *
		push	102h		; int
		push	esi		; int
		call	sub_100032BA
		add	esp, 1Ch
		jmp	loc_100037E1
; ---------------------------------------------------------------------------

loc_10003760:				; CODE XREF: sub_100036E6+3Aj
		push	2
		push	100h
		push	esi
		call	sub_10004FBA
		add	esp, 0Ch
		jmp	short loc_100037E1
; ---------------------------------------------------------------------------

loc_10003772:				; CODE XREF: sub_100036E6+33j
		push	edi
		push	dword ptr [edx+38h]
		push	dword ptr [edx+34h]
		push	11h
		push	esi
		call	sub_1000331F
		add	esp, 14h
		jmp	short loc_100037E1
; ---------------------------------------------------------------------------

loc_10003786:				; CODE XREF: sub_100036E6+24j
		mov	eax, 10Ch
		cmp	ecx, eax
		jz	short loc_100037D0
		add	eax, 24h
		cmp	ecx, eax
		jz	short loc_100037C8
		mov	eax, 132h
		cmp	ecx, eax
		jz	short loc_100037C0
		mov	eax, 0D5A0DB00h
		cmp	ecx, eax
		jz	short loc_100037B1

loc_100037A8:				; CODE XREF: sub_100036E6+43j
		or	dword ptr [esi+8], 0FFFFFFFFh
		push	12h
		pop	eax
		jmp	short loc_100037E1
; ---------------------------------------------------------------------------

loc_100037B1:				; CODE XREF: sub_100036E6+C0j
		push	dword ptr [edx+2Ch] ; size_t
		push	dword ptr [edx+28h] ; void *

loc_100037B7:				; CODE XREF: sub_100036E6+E0j
					; sub_100036E6+E8j
		push	eax		; int
		push	esi		; int
		call	sub_100032FD
		jmp	short loc_100037DE
; ---------------------------------------------------------------------------

loc_100037C0:				; CODE XREF: sub_100036E6+B7j
		push	dword ptr [edx+20h]
		push	dword ptr [edx+1Ch]
		jmp	short loc_100037B7
; ---------------------------------------------------------------------------

loc_100037C8:				; CODE XREF: sub_100036E6+AEj
		push	dword ptr [edx+14h]
		push	dword ptr [edx+10h]
		jmp	short loc_100037B7
; ---------------------------------------------------------------------------

loc_100037D0:				; CODE XREF: sub_100036E6+A7j
		push	1		; size_t
		push	offset byte_10015000 ; void *
		push	eax		; int

loc_100037D8:				; CODE XREF: sub_100036E6+4Dj
		push	esi		; int
		call	sub_100032BA

loc_100037DE:				; CODE XREF: sub_100036E6+D8j
		add	esp, 10h

loc_100037E1:				; CODE XREF: sub_100036E6+75j
					; sub_100036E6+8Aj ...
		mov	ecx, [ebp+var_4]
		pop	edi
		xor	ecx, ebp
		pop	esi
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	esp, ebp
		pop	ebp
		retn
sub_100036E6	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_100037F1	proc near		; CODE XREF: sub_10003F21+12Cp

var_18		= byte ptr -18h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	eax, ___security_cookie
		xor	eax, ebp
		mov	[ebp+var_4], eax
		mov	eax, [ebp+arg_4]
		mov	ecx, 106h
		mov	edx, [ebp+arg_0]
		push	esi
		mov	esi, [ebp+arg_8]
		cmp	eax, ecx
		ja	short loc_10003892
		jz	loc_100038E4
		mov	ecx, eax
		sub	ecx, 11h
		jz	short loc_10003882
		sub	ecx, 0EFh
		jz	short loc_10003870
		dec	ecx
		dec	ecx
		jz	short loc_1000384B
		dec	ecx
		dec	ecx
		jz	loc_100038E4

loc_10003835:				; CODE XREF: sub_100037F1+A6j
					; sub_100037F1+C6j
		or	dword ptr [esi+8], 0FFFFFFFFh
		push	12h
		pop	eax

loc_1000383C:				; CODE XREF: sub_100037F1+7Dj
					; sub_100037F1+8Fj ...
		mov	ecx, [ebp+var_4]
		xor	ecx, ebp
		pop	esi
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	esp, ebp
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_1000384B:				; CODE XREF: sub_100037F1+3Aj
		push	dword ptr [edx+2Ch]
		lea	eax, [ebp+var_18]
		push	dword ptr [edx+28h]
		push	eax
		call	sub_1000E0C0
		push	14h		; size_t
		lea	eax, [ebp+var_18]
		push	eax		; void *
		push	102h		; int
		push	esi		; int
		call	sub_100032BA
		add	esp, 1Ch
		jmp	short loc_1000383C
; ---------------------------------------------------------------------------

loc_10003870:				; CODE XREF: sub_100037F1+36j
		push	2
		push	100h
		push	esi
		call	sub_10004FBA
		add	esp, 0Ch
		jmp	short loc_1000383C
; ---------------------------------------------------------------------------

loc_10003882:				; CODE XREF: sub_100037F1+2Ej
		push	dword ptr [edx+2Ch] ; size_t
		push	dword ptr [edx+28h] ; void *
		push	11h		; int

loc_1000388A:				; CODE XREF: sub_100037F1+DBj
		push	esi		; int
		call	sub_100032FD
		jmp	short loc_100038DC
; ---------------------------------------------------------------------------

loc_10003892:				; CODE XREF: sub_100037F1+21j
		cmp	eax, 10Ah
		jb	short loc_10003835
		cmp	eax, 10Bh
		jbe	short loc_100038E4
		mov	ecx, 10Ch
		cmp	eax, ecx
		jz	short loc_100038CE
		add	ecx, 24h
		cmp	eax, ecx
		jz	short loc_100038C5
		mov	ecx, 132h
		cmp	eax, ecx
		jnz	loc_10003835
		push	dword ptr [edx+20h]
		push	dword ptr [edx+1Ch]
		jmp	short loc_100038CB
; ---------------------------------------------------------------------------

loc_100038C5:				; CODE XREF: sub_100037F1+BDj
		push	dword ptr [edx+14h]
		push	dword ptr [edx+10h]

loc_100038CB:				; CODE XREF: sub_100037F1+D2j
		push	ecx
		jmp	short loc_1000388A
; ---------------------------------------------------------------------------

loc_100038CE:				; CODE XREF: sub_100037F1+B6j
		push	1		; size_t
		push	offset byte_10015000 ; void *
		push	ecx		; int

loc_100038D6:				; CODE XREF: sub_100037F1+FBj
		push	esi		; int
		call	sub_100032BA

loc_100038DC:				; CODE XREF: sub_100037F1+9Fj
		add	esp, 10h
		jmp	loc_1000383C
; ---------------------------------------------------------------------------

loc_100038E4:				; CODE XREF: sub_100037F1+23j
					; sub_100037F1+3Ej ...
		push	1
		push	offset byte_10015028
		push	eax
		jmp	short loc_100038D6
sub_100037F1	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_100038EE	proc near		; CODE XREF: sub_10003DD9+12Dp

var_18		= byte ptr -18h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	eax, ___security_cookie
		xor	eax, ebp
		mov	[ebp+var_4], eax
		mov	edx, [ebp+arg_4]
		mov	eax, 109h
		mov	ecx, [ebp+arg_0]
		push	esi
		mov	esi, [ebp+arg_8]
		push	edi
		mov	edi, [ebp+arg_C]
		cmp	edx, eax
		ja	loc_100039A8
		jz	loc_10003A00
		mov	eax, edx
		sub	eax, 11h
		jz	short loc_10003994
		sub	eax, 0EFh
		jz	short loc_10003982
		dec	eax
		dec	eax
		jz	short loc_1000395A
		sub	eax, 3
		jz	loc_10003A00
		dec	eax
		dec	eax
		jz	loc_10003A00
		dec	eax
		jnz	loc_100039D0
		push	1
		push	offset byte_10015000
		push	108h
		jmp	loc_10003A08
; ---------------------------------------------------------------------------

loc_1000395A:				; CODE XREF: sub_100038EE+41j
		push	dword ptr [ecx+38h]
		lea	eax, [ebp+var_18]
		push	dword ptr [ecx+34h]
		push	eax
		call	sub_1000E0C0
		push	14h		; size_t
		lea	eax, [ebp+var_18]
		push	eax		; void *
		push	102h		; int
		push	esi		; int
		call	sub_100032BA
		add	esp, 1Ch
		jmp	loc_10003A11
; ---------------------------------------------------------------------------

loc_10003982:				; CODE XREF: sub_100038EE+3Dj
		push	1
		push	100h
		push	esi
		call	sub_10004FBA
		add	esp, 0Ch
		jmp	short loc_10003A11
; ---------------------------------------------------------------------------

loc_10003994:				; CODE XREF: sub_100038EE+36j
		push	edi
		push	dword ptr [ecx+44h]
		push	dword ptr [ecx+40h]
		push	11h
		push	esi
		call	sub_1000331F
		add	esp, 14h
		jmp	short loc_10003A11
; ---------------------------------------------------------------------------

loc_100039A8:				; CODE XREF: sub_100038EE+25j
		cmp	edx, 10Ch
		jz	short loc_10003A00
		mov	eax, 130h
		cmp	edx, eax
		jz	short loc_100039F8
		inc	eax
		cmp	edx, eax
		jz	short loc_100039F0
		mov	eax, 132h
		cmp	edx, eax
		jz	short loc_100039E8
		mov	eax, 0D5A0DB00h
		cmp	edx, eax
		jz	short loc_100039D9

loc_100039D0:				; CODE XREF: sub_100038EE+55j
		or	dword ptr [esi+8], 0FFFFFFFFh
		push	12h
		pop	eax
		jmp	short loc_10003A11
; ---------------------------------------------------------------------------

loc_100039D9:				; CODE XREF: sub_100038EE+E0j
		push	dword ptr [ecx+38h] ; size_t
		push	dword ptr [ecx+34h] ; void *

loc_100039DF:				; CODE XREF: sub_100038EE+100j
					; sub_100038EE+108j ...
		push	eax		; int
		push	esi		; int
		call	sub_100032FD
		jmp	short loc_10003A0E
; ---------------------------------------------------------------------------

loc_100039E8:				; CODE XREF: sub_100038EE+D7j
		push	dword ptr [ecx+2Ch]
		push	dword ptr [ecx+28h]
		jmp	short loc_100039DF
; ---------------------------------------------------------------------------

loc_100039F0:				; CODE XREF: sub_100038EE+CEj
		push	dword ptr [ecx+20h]
		push	dword ptr [ecx+1Ch]
		jmp	short loc_100039DF
; ---------------------------------------------------------------------------

loc_100039F8:				; CODE XREF: sub_100038EE+C9j
		push	dword ptr [ecx+14h]
		push	dword ptr [ecx+10h]
		jmp	short loc_100039DF
; ---------------------------------------------------------------------------

loc_10003A00:				; CODE XREF: sub_100038EE+2Bj
					; sub_100038EE+46j ...
		push	1		; size_t
		push	offset byte_10015028 ; void *
		push	edx		; int

loc_10003A08:				; CODE XREF: sub_100038EE+67j
		push	esi		; int
		call	sub_100032BA

loc_10003A0E:				; CODE XREF: sub_100038EE+F8j
		add	esp, 10h

loc_10003A11:				; CODE XREF: sub_100038EE+8Fj
					; sub_100038EE+A4j ...
		mov	ecx, [ebp+var_4]
		pop	edi
		xor	ecx, ebp
		pop	esi
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	esp, ebp
		pop	ebp
		retn
sub_100038EE	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10003A21	proc near		; CODE XREF: sub_10003F21+138p

var_18		= byte ptr -18h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	eax, ___security_cookie
		xor	eax, ebp
		mov	[ebp+var_4], eax
		mov	ecx, [ebp+arg_4]
		mov	eax, 10Ah
		mov	edx, [ebp+arg_0]
		push	esi
		mov	esi, [ebp+arg_8]
		cmp	ecx, eax
		ja	loc_10003AC9
		jz	short loc_10003ABF
		mov	eax, ecx
		sub	eax, 11h
		jz	short loc_10003AAF
		sub	eax, 0EFh
		jz	short loc_10003A9D
		dec	eax
		dec	eax
		jz	short loc_10003A78
		dec	eax
		dec	eax
		jz	loc_10003B01
		dec	eax
		dec	eax
		jz	loc_10003B01

loc_10003A6C:				; CODE XREF: sub_10003A21+C5j
		or	dword ptr [esi+8], 0FFFFFFFFh
		push	12h
		pop	eax
		jmp	loc_10003B12
; ---------------------------------------------------------------------------

loc_10003A78:				; CODE XREF: sub_10003A21+39j
		push	dword ptr [edx+38h]
		lea	eax, [ebp+var_18]
		push	dword ptr [edx+34h]
		push	eax
		call	sub_1000E0C0
		push	14h		; size_t
		lea	eax, [ebp+var_18]
		push	eax		; void *
		push	102h		; int
		push	esi		; int
		call	sub_100032BA
		add	esp, 1Ch
		jmp	short loc_10003B12
; ---------------------------------------------------------------------------

loc_10003A9D:				; CODE XREF: sub_10003A21+35j
		push	1
		push	100h
		push	esi
		call	sub_10004FBA
		add	esp, 0Ch
		jmp	short loc_10003B12
; ---------------------------------------------------------------------------

loc_10003AAF:				; CODE XREF: sub_10003A21+2Ej
		push	dword ptr [edx+38h] ; size_t
		push	dword ptr [edx+34h] ; void *
		push	11h		; int

loc_10003AB7:				; CODE XREF: sub_10003A21+CEj
		push	esi		; int
		call	sub_100032FD
		jmp	short loc_10003B0F
; ---------------------------------------------------------------------------

loc_10003ABF:				; CODE XREF: sub_10003A21+27j
		push	1
		push	offset byte_10015000
		push	eax
		jmp	short loc_10003B09
; ---------------------------------------------------------------------------

loc_10003AC9:				; CODE XREF: sub_10003A21+21j
		cmp	ecx, 10Ch
		jbe	short loc_10003B01
		mov	eax, 130h
		cmp	ecx, eax
		jz	short loc_10003AF9
		inc	eax
		cmp	ecx, eax
		jz	short loc_10003AF1
		mov	eax, 132h
		cmp	ecx, eax
		jnz	short loc_10003A6C
		push	dword ptr [edx+2Ch]
		push	dword ptr [edx+28h]

loc_10003AEE:				; CODE XREF: sub_10003A21+D6j
					; sub_10003A21+DEj
		push	eax
		jmp	short loc_10003AB7
; ---------------------------------------------------------------------------

loc_10003AF1:				; CODE XREF: sub_10003A21+BCj
		push	dword ptr [edx+20h]
		push	dword ptr [edx+1Ch]
		jmp	short loc_10003AEE
; ---------------------------------------------------------------------------

loc_10003AF9:				; CODE XREF: sub_10003A21+B7j
		push	dword ptr [edx+14h]
		push	dword ptr [edx+10h]
		jmp	short loc_10003AEE
; ---------------------------------------------------------------------------

loc_10003B01:				; CODE XREF: sub_10003A21+3Dj
					; sub_10003A21+45j ...
		push	1		; size_t
		push	offset byte_10015028 ; void *
		push	ecx		; int

loc_10003B09:				; CODE XREF: sub_10003A21+A6j
		push	esi		; int
		call	sub_100032BA

loc_10003B0F:				; CODE XREF: sub_10003A21+9Cj
		add	esp, 10h

loc_10003B12:				; CODE XREF: sub_10003A21+52j
					; sub_10003A21+7Aj ...
		mov	ecx, [ebp+var_4]
		xor	ecx, ebp
		pop	esi
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	esp, ebp
		pop	ebp
		retn
sub_10003A21	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10003B21	proc near		; CODE XREF: sub_10003DD9+10Fp

var_18		= byte ptr -18h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	eax, ___security_cookie
		xor	eax, ebp
		mov	[ebp+var_4], eax
		mov	ecx, [ebp+arg_4]
		mov	eax, 108h
		mov	edx, [ebp+arg_0]
		push	esi
		mov	esi, [ebp+arg_8]
		push	edi
		mov	edi, [ebp+arg_C]
		cmp	ecx, eax
		ja	loc_10003BE9
		jz	loc_10003C37
		mov	eax, ecx
		sub	eax, 11h
		jz	short loc_10003BCF
		sub	eax, 0EFh
		jz	short loc_10003BBD
		dec	eax
		dec	eax
		jz	short loc_10003B92
		sub	eax, 3
		jz	short loc_10003B71
		dec	eax
		dec	eax
		jnz	loc_10003C0B

loc_10003B71:				; CODE XREF: sub_10003B21+46j
					; sub_10003B21+CEj
		push	1		; size_t
		push	offset byte_10015028 ; void *

loc_10003B78:				; CODE XREF: sub_10003B21+11Dj
		push	ecx		; int
		push	esi		; int
		call	sub_100032BA

loc_10003B7F:				; CODE XREF: sub_10003B21+109j
		add	esp, 10h

loc_10003B82:				; CODE XREF: sub_10003B21+9Aj
					; sub_10003B21+ACj ...
		mov	ecx, [ebp+var_4]
		pop	edi
		xor	ecx, ebp
		pop	esi
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	esp, ebp
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_10003B92:				; CODE XREF: sub_10003B21+41j
		push	dword ptr [edx+94h]
		lea	eax, [ebp+var_18]
		push	dword ptr [edx+90h]
		push	eax
		call	sub_1000E0C0
		push	14h		; size_t
		lea	eax, [ebp+var_18]
		push	eax		; void *
		push	102h		; int
		push	esi		; int
		call	sub_100032BA
		add	esp, 1Ch
		jmp	short loc_10003B82
; ---------------------------------------------------------------------------

loc_10003BBD:				; CODE XREF: sub_10003B21+3Dj
		push	3
		push	100h
		push	esi
		call	sub_10004FBA
		add	esp, 0Ch
		jmp	short loc_10003B82
; ---------------------------------------------------------------------------

loc_10003BCF:				; CODE XREF: sub_10003B21+36j
		push	edi
		push	dword ptr [edx+0A0h]
		push	dword ptr [edx+9Ch]
		push	11h
		push	esi
		call	sub_1000331F
		add	esp, 14h
		jmp	short loc_10003B82
; ---------------------------------------------------------------------------

loc_10003BE9:				; CODE XREF: sub_10003B21+25j
		cmp	ecx, 109h
		jz	short loc_10003B71
		cmp	ecx, 10Ch
		jz	short loc_10003C37
		mov	eax, 180h
		cmp	ecx, eax
		jz	short loc_10003C2F
		mov	eax, 0D5A0DB00h
		cmp	ecx, eax
		jz	short loc_10003C17

loc_10003C0B:				; CODE XREF: sub_10003B21+4Aj
		or	dword ptr [esi+8], 0FFFFFFFFh
		push	12h
		pop	eax
		jmp	loc_10003B82
; ---------------------------------------------------------------------------

loc_10003C17:				; CODE XREF: sub_10003B21+E8j
		push	dword ptr [edx+94h] ; size_t
		push	dword ptr [edx+90h] ; void *

loc_10003C23:				; CODE XREF: sub_10003B21+114j
		push	eax		; int
		push	esi		; int
		call	sub_100032FD
		jmp	loc_10003B7F
; ---------------------------------------------------------------------------

loc_10003C2F:				; CODE XREF: sub_10003B21+DFj
		push	dword ptr [edx+78h]
		push	dword ptr [edx+74h]
		jmp	short loc_10003C23
; ---------------------------------------------------------------------------

loc_10003C37:				; CODE XREF: sub_10003B21+2Bj
					; sub_10003B21+D6j
		push	1
		push	offset byte_10015000
		jmp	loc_10003B78
sub_10003B21	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10003C43	proc near		; CODE XREF: sub_10003F21+120p

var_18		= byte ptr -18h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	eax, ___security_cookie
		xor	eax, ebp
		mov	[ebp+var_4], eax
		mov	ecx, [ebp+arg_4]
		mov	eax, 10Ah
		push	esi
		mov	esi, [ebp+arg_8]
		push	edi
		mov	edi, [ebp+arg_0]
		cmp	ecx, eax
		ja	short loc_10003CDE
		jz	loc_10003D8B
		mov	eax, ecx
		mov	edx, 100h
		sub	eax, edx
		jz	short loc_10003CD0
		dec	eax
		dec	eax
		jz	short loc_10003CA5
		dec	eax
		dec	eax
		jz	short loc_10003C84
		dec	eax
		dec	eax
		jnz	short loc_10003CFA

loc_10003C84:				; CODE XREF: sub_10003C43+3Bj
					; sub_10003C43+A2j
		push	1		; size_t
		push	offset byte_10015028 ; void *

loc_10003C8B:				; CODE XREF: sub_10003C43+14Fj
		push	ecx		; int
		push	esi		; int
		call	sub_100032BA

loc_10003C92:				; CODE XREF: sub_10003C43+E6j
		add	esp, 10h

loc_10003C95:				; CODE XREF: sub_10003C43+8Bj
					; sub_10003C43+99j ...
		mov	ecx, [ebp+var_4]
		pop	edi
		xor	ecx, ebp
		pop	esi
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	esp, ebp
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_10003CA5:				; CODE XREF: sub_10003C43+37j
		push	dword ptr [edi+94h]
		lea	eax, [ebp+var_18]
		push	dword ptr [edi+90h]
		push	eax
		call	sub_1000E0C0
		push	14h		; size_t
		lea	eax, [ebp+var_18]
		push	eax		; void *
		push	102h		; int
		push	esi		; int
		call	sub_100032BA
		add	esp, 1Ch
		jmp	short loc_10003C95
; ---------------------------------------------------------------------------

loc_10003CD0:				; CODE XREF: sub_10003C43+33j
		push	3
		push	edx
		push	esi
		call	sub_10004FBA
		add	esp, 0Ch
		jmp	short loc_10003C95
; ---------------------------------------------------------------------------

loc_10003CDE:				; CODE XREF: sub_10003C43+22j
		mov	eax, ecx
		sub	eax, 10Bh
		jz	short loc_10003C84
		dec	eax
		jz	loc_10003D8B
		sub	eax, 74h
		jz	loc_10003D7E
		dec	eax
		jz	short loc_10003D02

loc_10003CFA:				; CODE XREF: sub_10003C43+3Fj
		or	dword ptr [esi+8], 0FFFFFFFFh
		push	12h
		jmp	short loc_10003D53
; ---------------------------------------------------------------------------

loc_10003D02:				; CODE XREF: sub_10003C43+B5j
		push	offset aNss_use_decode ; "NSS_USE_DECODED_CKA_EC_POINT"
		call	ds:getenv
		pop	ecx
		test	eax, eax
		jz	short loc_10003D2E
		push	dword ptr [edi+94h] ; size_t
		push	dword ptr [edi+90h] ; void *
		push	181h		; int

loc_10003D23:				; CODE XREF: sub_10003C43+146j
		push	esi		; int
		call	sub_100032FD
		jmp	loc_10003C92
; ---------------------------------------------------------------------------

loc_10003D2E:				; CODE XREF: sub_10003C43+CDj
		push	ebx
		xor	ebx, ebx
		push	ebx
		push	ebx
		call	NSS_Get_SEC_OctetStringTemplate_Util
		push	eax
		lea	eax, [edi+8Ch]
		push	eax
		push	ebx
		push	ebx
		call	SEC_ASN1EncodeItem_Util
		add	esp, 18h
		mov	edi, eax
		pop	ebx
		test	edi, edi
		jnz	short loc_10003D59
		push	2

loc_10003D53:				; CODE XREF: sub_10003C43+BDj
		pop	eax
		jmp	loc_10003C95
; ---------------------------------------------------------------------------

loc_10003D59:				; CODE XREF: sub_10003C43+10Cj
		push	dword ptr [edi+8] ; size_t
		push	dword ptr [edi+4] ; void *
		push	181h		; int
		push	esi		; int
		call	sub_100032FD
		push	1
		push	edi
		mov	esi, eax
		call	SECITEM_FreeItem_Util
		add	esp, 18h
		mov	eax, esi
		jmp	loc_10003C95
; ---------------------------------------------------------------------------

loc_10003D7E:				; CODE XREF: sub_10003C43+AEj
		push	dword ptr [edi+78h]
		push	dword ptr [edi+74h]
		push	180h
		jmp	short loc_10003D23
; ---------------------------------------------------------------------------

loc_10003D8B:				; CODE XREF: sub_10003C43+24j
					; sub_10003C43+A5j
		push	1
		push	offset byte_10015000
		jmp	loc_10003C8B
sub_10003C43	endp


; =============== S U B	R O U T	I N E =======================================


sub_10003D97	proc near		; CODE XREF: sub_100048A4+1Dp

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	[esp+arg_0]
		call	sub_100078AC
		pop	ecx
		test	eax, eax
		jnz	short loc_10003DA6
		retn
; ---------------------------------------------------------------------------

loc_10003DA6:				; CODE XREF: sub_10003D97+Cj
		push	[esp+arg_0]
		push	[esp+4+arg_4]
		push	eax
		call	sub_10001F28
		add	esp, 0Ch
		retn
sub_10003D97	endp


; =============== S U B	R O U T	I N E =======================================


sub_10003DB8	proc near		; CODE XREF: sub_10003DD9+57p
					; sub_10003F21+76p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	[esp+arg_0]
		call	sub_100078AC
		pop	ecx
		test	eax, eax
		jnz	short loc_10003DC7
		retn
; ---------------------------------------------------------------------------

loc_10003DC7:				; CODE XREF: sub_10003DB8+Cj
		push	[esp+arg_0]
		push	[esp+4+arg_4]
		push	eax
		call	sub_10001F69
		add	esp, 0Ch
		retn
sub_10003DB8	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10003DD9	proc near		; CODE XREF: sub_100048EF+A4p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	esi
		mov	esi, [ebp+arg_4]
		push	edi
		cmp	esi, 111h
		ja	loc_10003E6E
		cmp	esi, 110h
		jnb	short loc_10003E67
		lea	eax, [esi-1]
		dec	eax
		jz	loc_10003EBB
		dec	eax
		jz	short loc_10003E26
		sub	eax, 0FEh
		jz	short loc_10003E10
		dec	eax
		dec	eax
		jmp	loc_10003E95
; ---------------------------------------------------------------------------

loc_10003E10:				; CODE XREF: sub_10003DD9+2Ej
		push	0		; size_t
		push	0		; void *
		push	101h		; int

loc_10003E19:				; CODE XREF: sub_10003DD9+68j
					; sub_10003DD9+93j ...
		push	[ebp+arg_8]	; int
		call	sub_100032BA
		jmp	loc_10003F1A
; ---------------------------------------------------------------------------

loc_10003E26:				; CODE XREF: sub_10003DD9+27j
		mov	ecx, [ebp+arg_0]
		lea	eax, [ecx+14h]
		push	eax
		push	dword ptr [ecx+8]
		call	sub_10003DB8
		mov	edi, eax
		pop	ecx
		pop	ecx
		test	edi, edi
		jnz	short loc_10003E43
		push	eax
		push	eax
		push	3
		jmp	short loc_10003E19
; ---------------------------------------------------------------------------

loc_10003E43:				; CODE XREF: sub_10003DD9+62j
		push	edi		; char *
		call	strlen
		push	eax		; size_t
		push	edi		; void *
		push	3		; int
		push	[ebp+arg_8]	; int
		call	sub_100032BA
		push	edi
		mov	esi, eax
		call	PORT_Free_Util
		add	esp, 18h
		mov	eax, esi
		jmp	loc_10003F1D
; ---------------------------------------------------------------------------

loc_10003E67:				; CODE XREF: sub_10003DD9+1Aj
		push	0
		push	0

loc_10003E6B:				; CODE XREF: sub_10003DD9+E9j
		push	esi
		jmp	short loc_10003E19
; ---------------------------------------------------------------------------

loc_10003E6E:				; CODE XREF: sub_10003DD9+Ej
		cmp	esi, 162h
		jb	short loc_10003E97
		cmp	esi, 163h
		jbe	short loc_10003EBB
		mov	eax, 164h
		cmp	esi, eax
		jz	short loc_10003EAE
		cmp	esi, 165h
		jz	short loc_10003EBB
		cmp	esi, 170h

loc_10003E95:				; CODE XREF: sub_10003DD9+32j
		jz	short loc_10003EBB

loc_10003E97:				; CODE XREF: sub_10003DD9+9Bj
		mov	edi, [ebp+arg_0]
		push	edi
		call	sub_10004848
		pop	ecx
		mov	ecx, eax
		test	ecx, ecx
		jnz	short loc_10003EC4
		mov	eax, 82h
		jmp	short loc_10003F1D
; ---------------------------------------------------------------------------

loc_10003EAE:				; CODE XREF: sub_10003DD9+ACj
		push	1
		push	offset byte_10015028
		push	eax
		jmp	loc_10003E19
; ---------------------------------------------------------------------------

loc_10003EBB:				; CODE XREF: sub_10003DD9+20j
					; sub_10003DD9+A3j ...
		push	1
		push	offset byte_10015000
		jmp	short loc_10003E6B
; ---------------------------------------------------------------------------

loc_10003EC4:				; CODE XREF: sub_10003DD9+CCj
		mov	eax, [ecx+4]
		dec	eax
		jz	short loc_10003F0D
		dec	eax
		jz	short loc_10003EFE
		dec	eax
		dec	eax
		jz	short loc_10003EEF
		dec	eax
		jz	short loc_10003EE0
		mov	eax, [ebp+arg_8]
		push	12h
		or	dword ptr [eax+8], 0FFFFFFFFh
		pop	eax
		jmp	short loc_10003F1D
; ---------------------------------------------------------------------------

loc_10003EE0:				; CODE XREF: sub_10003DD9+F9j
		push	dword ptr [edi+8]
		push	[ebp+arg_8]
		push	esi
		push	ecx
		call	sub_10003B21
		jmp	short loc_10003F1A
; ---------------------------------------------------------------------------

loc_10003EEF:				; CODE XREF: sub_10003DD9+F6j
		push	dword ptr [edi+8]
		push	[ebp+arg_8]
		push	esi
		push	ecx
		call	sub_100036E6
		jmp	short loc_10003F1A
; ---------------------------------------------------------------------------

loc_10003EFE:				; CODE XREF: sub_10003DD9+F2j
		push	dword ptr [edi+8]
		push	[ebp+arg_8]
		push	esi
		push	ecx
		call	sub_100038EE
		jmp	short loc_10003F1A
; ---------------------------------------------------------------------------

loc_10003F0D:				; CODE XREF: sub_10003DD9+EFj
		push	dword ptr [edi+8]
		push	[ebp+arg_8]
		push	esi
		push	ecx
		call	sub_1000406F

loc_10003F1A:				; CODE XREF: sub_10003DD9+48j
					; sub_10003DD9+114j ...
		add	esp, 10h

loc_10003F1D:				; CODE XREF: sub_10003DD9+89j
					; sub_10003DD9+D3j ...
		pop	edi
		pop	esi
		pop	ebp
		retn
sub_10003DD9	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10003F21	proc near		; CODE XREF: sub_100048EF+AFp

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	esi
		mov	esi, [ebp+arg_4]
		push	edi
		cmp	esi, 111h
		ja	loc_10003FD1
		cmp	esi, 110h
		jnb	loc_10003FCB
		lea	eax, [esi-1]
		dec	eax
		jz	loc_10004010
		dec	eax
		jz	short loc_10003F8D
		sub	eax, 0FEh
		jz	short loc_10003F82
		dec	eax
		dec	eax
		jz	loc_10004010

loc_10003F5D:				; CODE XREF: sub_10003F21+BEj
					; sub_10003F21+D2j
		push	[ebp+arg_0]
		call	sub_100048A4
		pop	ecx
		mov	ecx, eax
		test	ecx, ecx
		jnz	loc_10004020
		mov	eax, 102h
		cmp	esi, eax
		jnz	loc_10004019
		push	ecx
		push	ecx
		push	eax
		jmp	short loc_10004001
; ---------------------------------------------------------------------------

loc_10003F82:				; CODE XREF: sub_10003F21+32j
		push	0
		push	0
		push	101h
		jmp	short loc_10004001
; ---------------------------------------------------------------------------

loc_10003F8D:				; CODE XREF: sub_10003F21+2Bj
		mov	ecx, [ebp+arg_0]
		lea	eax, [ecx+14h]
		push	eax
		push	dword ptr [ecx+8]
		call	sub_10003DB8
		mov	edi, eax
		pop	ecx
		pop	ecx
		test	edi, edi
		jnz	short loc_10003FAA
		push	eax
		push	eax
		push	3
		jmp	short loc_10004001
; ---------------------------------------------------------------------------

loc_10003FAA:				; CODE XREF: sub_10003F21+81j
		push	edi		; char *
		call	strlen
		push	eax		; size_t
		push	edi		; void *
		push	3		; int
		push	[ebp+arg_8]	; int
		call	sub_100032BA
		push	edi
		mov	esi, eax
		call	PORT_Free_Util
		add	esp, 18h
		mov	eax, esi
		jmp	short loc_1000400C
; ---------------------------------------------------------------------------

loc_10003FCB:				; CODE XREF: sub_10003F21+1Aj
		push	0
		push	0
		jmp	short loc_10004000
; ---------------------------------------------------------------------------

loc_10003FD1:				; CODE XREF: sub_10003F21+Ej
		cmp	esi, 162h
		jz	short loc_10003FF9
		cmp	esi, 163h
		jbe	loc_10003F5D
		cmp	esi, 165h
		jbe	short loc_10004010
		cmp	esi, 170h
		jnz	loc_10003F5D

loc_10003FF9:				; CODE XREF: sub_10003F21+B6j
		push	1		; size_t
		push	offset byte_10015000 ; void *

loc_10004000:				; CODE XREF: sub_10003F21+AEj
					; sub_10003F21+F6j
		push	esi		; int

loc_10004001:				; CODE XREF: sub_10003F21+5Fj
					; sub_10003F21+6Aj ...
		push	[ebp+arg_8]	; int
		call	sub_100032BA
		add	esp, 10h

loc_1000400C:				; CODE XREF: sub_10003F21+A8j
					; sub_10003F21+FDj ...
		pop	edi
		pop	esi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_10004010:				; CODE XREF: sub_10003F21+24j
					; sub_10003F21+36j ...
		push	1
		push	offset byte_10015028
		jmp	short loc_10004000
; ---------------------------------------------------------------------------

loc_10004019:				; CODE XREF: sub_10003F21+56j
		mov	eax, 82h
		jmp	short loc_1000400C
; ---------------------------------------------------------------------------

loc_10004020:				; CODE XREF: sub_10003F21+49j
		mov	eax, [ecx+4]
		dec	eax
		jz	short loc_10004060
		dec	eax
		jz	short loc_10004054
		dec	eax
		dec	eax
		jz	short loc_10004048
		dec	eax
		jz	short loc_1000403C
		mov	eax, [ebp+arg_8]
		push	12h
		or	dword ptr [eax+8], 0FFFFFFFFh
		pop	eax
		jmp	short loc_1000400C
; ---------------------------------------------------------------------------

loc_1000403C:				; CODE XREF: sub_10003F21+10Dj
		push	[ebp+arg_8]
		push	esi
		push	ecx
		call	sub_10003C43
		jmp	short loc_1000406A
; ---------------------------------------------------------------------------

loc_10004048:				; CODE XREF: sub_10003F21+10Aj
		push	[ebp+arg_8]
		push	esi
		push	ecx
		call	sub_100037F1
		jmp	short loc_1000406A
; ---------------------------------------------------------------------------

loc_10004054:				; CODE XREF: sub_10003F21+106j
		push	[ebp+arg_8]
		push	esi
		push	ecx
		call	sub_10003A21
		jmp	short loc_1000406A
; ---------------------------------------------------------------------------

loc_10004060:				; CODE XREF: sub_10003F21+103j
		push	[ebp+arg_8]
		push	esi
		push	ecx
		call	sub_100041C4

loc_1000406A:				; CODE XREF: sub_10003F21+125j
					; sub_10003F21+131j ...
		add	esp, 0Ch
		jmp	short loc_1000400C
sub_10003F21	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_1000406F	proc near		; CODE XREF: sub_10003DD9+13Cp

var_18		= byte ptr -18h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	eax, ___security_cookie
		xor	eax, ebp
		mov	[ebp+var_4], eax
		mov	ecx, [ebp+arg_0]
		mov	edx, [ebp+arg_C]
		push	esi
		mov	esi, [ebp+arg_8]
		push	edi
		mov	edi, [ebp+arg_4]
		lea	eax, [edi-100h]	; switch 41 cases
		cmp	eax, 28h
		ja	loc_1000414F	; jumptable 100040A3 default case
		movzx	eax, ds:byte_1000419B[eax]
		jmp	ds:off_10004167[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_100040AA:				; CODE XREF: sub_1000406F+34j
					; DATA XREF: .text:off_10004167o
		push	0		; jumptable 100040A3 case 256
		push	edi
		push	esi
		call	sub_10004FBA
		add	esp, 0Ch
		jmp	loc_10004156
; ---------------------------------------------------------------------------

loc_100040BB:				; CODE XREF: sub_1000406F+34j
					; DATA XREF: .text:off_10004167o
		push	dword ptr [ecx+20h] ; jumptable	100040A3 case 258
		lea	eax, [ebp+var_18]
		push	dword ptr [ecx+1Ch]
		push	eax
		call	sub_1000E0C0
		push	14h		; size_t
		lea	eax, [ebp+var_18]
		push	eax		; void *
		push	edi		; int
		push	esi		; int
		call	sub_100032BA
		add	esp, 1Ch
		jmp	short loc_10004156
; ---------------------------------------------------------------------------

loc_100040DC:				; CODE XREF: sub_1000406F+34j
					; DATA XREF: .text:off_10004167o
		push	1		; jumptable 100040A3 case 268
		push	offset byte_10015028 ; void *

loc_100040E3:				; CODE XREF: sub_1000406F+87j
		push	edi		; int
		push	esi		; int
		call	sub_100032BA

loc_100040EA:				; CODE XREF: sub_1000406F+96j
		add	esp, 10h
		jmp	short loc_10004156
; ---------------------------------------------------------------------------

loc_100040EF:				; CODE XREF: sub_1000406F+34j
					; DATA XREF: .text:off_10004167o
		push	1		; jumptable 100040A3 cases 261,263-265
		push	offset byte_10015000
		jmp	short loc_100040E3
; ---------------------------------------------------------------------------

loc_100040F8:				; CODE XREF: sub_1000406F+34j
					; DATA XREF: .text:off_10004167o
		push	dword ptr [ecx+20h] ; jumptable	100040A3 case 288
		push	dword ptr [ecx+1Ch] ; void *

loc_100040FE:				; CODE XREF: sub_1000406F+9Ej
		push	edi		; int
		push	esi		; int
		call	sub_100032FD
		jmp	short loc_100040EA
; ---------------------------------------------------------------------------

loc_10004107:				; CODE XREF: sub_1000406F+34j
					; DATA XREF: .text:off_10004167o
		push	dword ptr [ecx+2Ch] ; jumptable	100040A3 case 290
		push	dword ptr [ecx+28h]
		jmp	short loc_100040FE
; ---------------------------------------------------------------------------

loc_1000410F:				; CODE XREF: sub_1000406F+34j
					; DATA XREF: .text:off_10004167o
		push	edx		; jumptable 100040A3 case 291
		push	dword ptr [ecx+38h]
		push	dword ptr [ecx+34h]

loc_10004116:				; CODE XREF: sub_1000406F+BAj
					; sub_1000406F+C3j ...
		push	edi
		push	esi
		call	sub_1000331F
		add	esp, 14h
		jmp	short loc_10004156
; ---------------------------------------------------------------------------

loc_10004122:				; CODE XREF: sub_1000406F+34j
					; DATA XREF: .text:off_10004167o
		push	edx		; jumptable 100040A3 case 292
		push	dword ptr [ecx+44h]
		push	dword ptr [ecx+40h]
		jmp	short loc_10004116
; ---------------------------------------------------------------------------

loc_1000412B:				; CODE XREF: sub_1000406F+34j
					; DATA XREF: .text:off_10004167o
		push	edx		; jumptable 100040A3 case 293
		push	dword ptr [ecx+50h]
		push	dword ptr [ecx+4Ch]
		jmp	short loc_10004116
; ---------------------------------------------------------------------------

loc_10004134:				; CODE XREF: sub_1000406F+34j
					; DATA XREF: .text:off_10004167o
		push	edx		; jumptable 100040A3 case 294
		push	dword ptr [ecx+5Ch]
		push	dword ptr [ecx+58h]
		jmp	short loc_10004116
; ---------------------------------------------------------------------------

loc_1000413D:				; CODE XREF: sub_1000406F+34j
					; DATA XREF: .text:off_10004167o
		push	edx		; jumptable 100040A3 case 295
		push	dword ptr [ecx+68h]
		push	dword ptr [ecx+64h]
		jmp	short loc_10004116
; ---------------------------------------------------------------------------

loc_10004146:				; CODE XREF: sub_1000406F+34j
					; DATA XREF: .text:off_10004167o
		push	edx		; jumptable 100040A3 case 296
		push	dword ptr [ecx+74h]
		push	dword ptr [ecx+70h]
		jmp	short loc_10004116
; ---------------------------------------------------------------------------

loc_1000414F:				; CODE XREF: sub_1000406F+27j
					; sub_1000406F+34j
					; DATA XREF: ...
		or	dword ptr [esi+8], 0FFFFFFFFh ;	jumptable 100040A3 default case
		push	12h
		pop	eax

loc_10004156:				; CODE XREF: sub_1000406F+47j
					; sub_1000406F+6Bj ...
		mov	ecx, [ebp+var_4]
		pop	edi
		xor	ecx, ebp
		pop	esi
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	esp, ebp
		pop	ebp
		retn
sub_1000406F	endp

; ---------------------------------------------------------------------------
		db 90h
off_10004167	dd offset loc_100040AA	; DATA XREF: sub_1000406F+34r
		dd offset loc_100040BB	; jump table for switch	statement
		dd offset loc_100040EF
		dd offset loc_100040DC
		dd offset loc_100040F8
		dd offset loc_10004107
		dd offset loc_1000410F
		dd offset loc_10004122
		dd offset loc_1000412B
		dd offset loc_10004134
		dd offset loc_1000413D
		dd offset loc_10004146
		dd offset loc_1000414F
byte_1000419B	db	0,   0Ch,     1,   0Ch ; DATA XREF: sub_1000406F+2Dr
		db    0Ch,     2,   0Ch,     2 ; indirect table	for switch statement
		db	2,     2,   0Ch,   0Ch
		db	3,   0Ch,   0Ch,   0Ch
		db    0Ch,   0Ch,   0Ch,   0Ch
		db    0Ch,   0Ch,   0Ch,   0Ch
		db    0Ch,   0Ch,   0Ch,   0Ch
		db    0Ch,   0Ch,   0Ch,   0Ch
		db	4,   0Ch,     5,     6
		db	7,     8,     9,   0Ah
		db    0Bh

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_100041C4	proc near		; CODE XREF: sub_10003F21+144p

var_18		= byte ptr -18h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	eax, ___security_cookie
		xor	eax, ebp
		mov	[ebp+var_4], eax
		mov	ecx, [ebp+arg_0]
		push	esi
		mov	esi, [ebp+arg_8]
		push	edi
		mov	edi, [ebp+arg_4]
		lea	eax, [edi-100h]	; switch 35 cases
		cmp	eax, 22h
		ja	short loc_1000425A ; jumptable 100041F1	default	case
		movzx	eax, ds:byte_10004290[eax]
		jmp	ds:off_10004274[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_100041F8:				; CODE XREF: sub_100041C4+2Dj
					; DATA XREF: .text:off_10004274o
		push	0		; jumptable 100041F1 case 256
		push	edi
		push	esi
		call	sub_10004FBA
		add	esp, 0Ch
		jmp	short loc_10004261
; ---------------------------------------------------------------------------

loc_10004206:				; CODE XREF: sub_100041C4+2Dj
					; DATA XREF: .text:off_10004274o
		push	dword ptr [ecx+14h] ; jumptable	100041F1 case 258
		lea	eax, [ebp+var_18]
		push	dword ptr [ecx+10h]
		push	eax
		call	sub_1000E0C0
		push	14h		; size_t
		lea	eax, [ebp+var_18]
		push	eax		; void *
		push	edi		; int
		push	esi		; int
		call	sub_100032BA
		add	esp, 1Ch
		jmp	short loc_10004261
; ---------------------------------------------------------------------------

loc_10004227:				; CODE XREF: sub_100041C4+2Dj
					; DATA XREF: .text:off_10004274o
		push	1		; jumptable 100041F1 case 268
		push	offset byte_10015028 ; void *

loc_1000422E:				; CODE XREF: sub_100041C4+7Dj
		push	edi		; int
		push	esi		; int
		call	sub_100032BA

loc_10004235:				; CODE XREF: sub_100041C4+8Cj
		add	esp, 10h
		jmp	short loc_10004261
; ---------------------------------------------------------------------------

loc_1000423A:				; CODE XREF: sub_100041C4+2Dj
					; DATA XREF: .text:off_10004274o
		push	1		; jumptable 100041F1 cases 260,262,266,267
		push	offset byte_10015000
		jmp	short loc_1000422E
; ---------------------------------------------------------------------------

loc_10004243:				; CODE XREF: sub_100041C4+2Dj
					; DATA XREF: .text:off_10004274o
		push	dword ptr [ecx+14h] ; jumptable	100041F1 case 288
		push	dword ptr [ecx+10h] ; void *

loc_10004249:				; CODE XREF: sub_100041C4+94j
		push	edi		; int
		push	esi		; int
		call	sub_100032FD
		jmp	short loc_10004235
; ---------------------------------------------------------------------------

loc_10004252:				; CODE XREF: sub_100041C4+2Dj
					; DATA XREF: .text:off_10004274o
		push	dword ptr [ecx+20h] ; jumptable	100041F1 case 290
		push	dword ptr [ecx+1Ch]
		jmp	short loc_10004249
; ---------------------------------------------------------------------------

loc_1000425A:				; CODE XREF: sub_100041C4+24j
					; sub_100041C4+2Dj
					; DATA XREF: ...
		or	dword ptr [esi+8], 0FFFFFFFFh ;	jumptable 100041F1 default case
		push	12h
		pop	eax

loc_10004261:				; CODE XREF: sub_100041C4+40j
					; sub_100041C4+61j ...
		mov	ecx, [ebp+var_4]
		pop	edi
		xor	ecx, ebp
		pop	esi
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	esp, ebp
		pop	ebp
		retn
sub_100041C4	endp

; ---------------------------------------------------------------------------
		align 4
off_10004274	dd offset loc_100041F8	; DATA XREF: sub_100041C4+2Dr
		dd offset loc_10004206	; jump table for switch	statement
		dd offset loc_1000423A
		dd offset loc_10004227
		dd offset loc_10004243
		dd offset loc_10004252
		dd offset loc_1000425A
byte_10004290	db	0,     6,     1,     6 ; DATA XREF: sub_100041C4+26r
		db	2,     6,     2,     6 ; indirect table	for switch statement
		db	6,     6,     2,     2
		db	3,     6,     6,     6
		db	6,     6,     6,     6
		db	6,     6,     6,     6
		db	6,     6,     6,     6
		db	6,     6,     6,     6
		db	4,     6,     5

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_100042B3	proc near		; CODE XREF: sub_100048EF+83p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	ebx
		push	esi
		mov	esi, [ebp+arg_4]
		push	edi
		cmp	esi, 2
		jz	short loc_1000433E
		mov	ebx, 101h
		mov	edi, 0CE534354h
		cmp	esi, 11h
		jz	short loc_10004301
		cmp	esi, ebx
		jz	short loc_10004301
		cmp	esi, 170h
		jz	short loc_1000433E
		lea	edx, [edi-2]
		cmp	esi, edx
		jz	short loc_100042F3
		cmp	esi, edi
		jz	short loc_10004301

loc_100042E7:				; CODE XREF: sub_100042B3+6Dj
		mov	eax, [ebp+arg_8]
		push	12h
		or	dword ptr [eax+8], 0FFFFFFFFh
		pop	eax
		jmp	short loc_10004351
; ---------------------------------------------------------------------------

loc_100042F3:				; CODE XREF: sub_100042B3+2Ej
		mov	ecx, [ebp+arg_0]
		mov	eax, [ecx+1Ch]
		dec	eax
		push	eax
		push	dword ptr [ecx+18h]
		push	edx
		jmp	short loc_10004346
; ---------------------------------------------------------------------------

loc_10004301:				; CODE XREF: sub_100042B3+1Bj
					; sub_100042B3+1Fj ...
		push	[ebp+arg_0]
		call	sub_1000513A
		pop	ecx
		test	eax, eax
		jnz	short loc_10004315
		mov	eax, 82h
		jmp	short loc_10004351
; ---------------------------------------------------------------------------

loc_10004315:				; CODE XREF: sub_100042B3+59j
		cmp	esi, 11h
		jz	short loc_10004334
		cmp	esi, ebx
		jz	short loc_1000432B
		cmp	esi, edi
		jnz	short loc_100042E7
		push	dword ptr [eax+34h]
		push	dword ptr [eax+30h]
		push	edi
		jmp	short loc_10004346
; ---------------------------------------------------------------------------

loc_1000432B:				; CODE XREF: sub_100042B3+69j
		push	dword ptr [eax+1Ch]
		push	dword ptr [eax+18h]
		push	ebx
		jmp	short loc_10004346
; ---------------------------------------------------------------------------

loc_10004334:				; CODE XREF: sub_100042B3+65j
		push	dword ptr [eax+28h]
		push	dword ptr [eax+24h]
		push	11h
		jmp	short loc_10004346
; ---------------------------------------------------------------------------

loc_1000433E:				; CODE XREF: sub_100042B3+Cj
					; sub_100042B3+27j
		push	1		; size_t
		push	offset byte_10015028 ; void *
		push	esi		; int

loc_10004346:				; CODE XREF: sub_100042B3+4Cj
					; sub_100042B3+76j ...
		push	[ebp+arg_8]	; int
		call	sub_100032BA
		add	esp, 10h

loc_10004351:				; CODE XREF: sub_100042B3+3Ej
					; sub_100042B3+60j
		pop	edi
		pop	esi
		pop	ebx
		pop	ebp
		retn
sub_100042B3	endp


; =============== S U B	R O U T	I N E =======================================


sub_10004356	proc near		; CODE XREF: sub_100048EF+99p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		mov	ebx, 161h
		push	ebp
		push	esi
		mov	esi, [esp+0Ch+arg_4]
		lea	eax, [ebx-55h]
		lea	ebp, [ebx-61h]
		push	edi
		cmp	esi, eax
		ja	loc_10004425
		jz	loc_1000446A
		cmp	esi, ebp
		ja	short loc_100043F6
		jz	short loc_10004393
		lea	eax, [esi-1]
		dec	eax
		jz	loc_1000446A
		dec	eax
		jz	short loc_100043B0
		sub	eax, 0Eh
		jnz	loc_1000454F

loc_10004393:				; CODE XREF: sub_10004356+25j
					; sub_10004356+FCj
		mov	edi, [esp+10h+arg_0]
		push	edi
		call	sub_10004848
		pop	ecx
		test	eax, eax
		jnz	loc_10004483
		mov	eax, 82h
		jmp	loc_1000447E
; ---------------------------------------------------------------------------

loc_100043B0:				; CODE XREF: sub_10004356+32j
		mov	ecx, [esp+10h+arg_0]
		lea	eax, [ecx+14h]
		push	eax
		push	dword ptr [ecx+8]
		call	sub_10003DB8
		mov	edi, eax
		pop	ecx
		pop	ecx
		test	edi, edi
		jnz	short loc_100043D1
		push	eax
		push	eax
		push	3
		jmp	loc_10004472
; ---------------------------------------------------------------------------

loc_100043D1:				; CODE XREF: sub_10004356+70j
		push	edi		; char *
		call	strlen
		push	eax		; size_t
		push	edi		; void *
		push	3		; int
		push	[esp+20h+arg_8]	; int
		call	sub_100032BA
		push	edi
		mov	esi, eax
		call	PORT_Free_Util
		add	esp, 18h
		mov	eax, esi
		jmp	loc_1000447E
; ---------------------------------------------------------------------------

loc_100043F6:				; CODE XREF: sub_10004356+23j
		mov	ecx, 102h
		cmp	esi, ecx
		jz	short loc_10004418
		jbe	loc_1000454F
		cmp	esi, 108h
		jbe	short loc_1000446A
		cmp	esi, 10Ah
		jmp	loc_10004549
; ---------------------------------------------------------------------------

loc_10004418:				; CODE XREF: sub_10004356+A7j
		mov	eax, [esp+10h+arg_0]
		push	dword ptr [eax+1Ch]
		push	dword ptr [eax+18h]
		push	ecx
		jmp	short loc_10004472
; ---------------------------------------------------------------------------

loc_10004425:				; CODE XREF: sub_10004356+15j
		mov	eax, 164h
		cmp	esi, eax
		ja	loc_10004539
		jz	loc_1000452C
		cmp	esi, 110h
		jb	loc_1000454F
		cmp	esi, 111h
		jbe	loc_10004523
		cmp	esi, ebx
		jz	loc_10004393
		jbe	loc_1000454F
		cmp	esi, 163h
		ja	loc_1000454F

loc_1000446A:				; CODE XREF: sub_10004356+1Bj
					; sub_10004356+2Bj ...
		push	1		; size_t
		push	offset byte_10015000 ; void *

loc_10004471:				; CODE XREF: sub_10004356+1D1j
		push	esi		; int

loc_10004472:				; CODE XREF: sub_10004356+76j
					; sub_10004356+CDj ...
		push	[esp+1Ch+arg_8]	; int
		call	sub_100032BA
		add	esp, 10h

loc_1000447E:				; CODE XREF: sub_10004356+55j
					; sub_10004356+9Bj ...
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_10004483:				; CODE XREF: sub_10004356+4Aj
		sub	esi, 11h
		jz	short loc_10004507
		sub	esi, 0EFh
		jz	short loc_1000449F
		sub	esi, 61h
		jnz	loc_1000454F
		push	dword ptr [eax+38h]
		push	ebx
		jmp	short loc_100044F6
; ---------------------------------------------------------------------------

loc_1000449F:				; CODE XREF: sub_10004356+138j
		mov	ecx, [eax+70h]
		mov	eax, [eax+74h]
		push	4
		pop	edx
		cmp	eax, 8
		jnz	short loc_100044BB
		mov	eax, [ecx]
		mov	[esp+10h+arg_4], eax
		test	eax, eax
		jnz	short loc_100044B9
		add	ecx, edx

loc_100044B9:				; CODE XREF: sub_10004356+15Fj
		mov	eax, edx

loc_100044BB:				; CODE XREF: sub_10004356+155j
		cmp	eax, edx
		jnz	short loc_100044F1
		test	byte ptr [ecx],	80h
		jnz	short loc_100044D6
		cmp	byte ptr [ecx+1], 0
		jnz	short loc_100044D6
		cmp	byte ptr [ecx+2], 0
		jnz	short loc_100044D6
		cmp	byte ptr [ecx+3], 0
		jz	short loc_100044F1

loc_100044D6:				; CODE XREF: sub_10004356+16Cj
					; sub_10004356+172j ...
		push	edx		; size_t
		push	ecx		; void *
		lea	eax, [esp+18h+arg_4]
		push	eax		; void *
		call	memcpy
		push	[esp+1Ch+arg_4]
		call	ds:PR_ntohl
		add	esp, 10h
		jmp	short loc_100044F4
; ---------------------------------------------------------------------------

loc_100044F1:				; CODE XREF: sub_10004356+167j
					; sub_10004356+17Ej
		movzx	eax, byte ptr [ecx]

loc_100044F4:				; CODE XREF: sub_10004356+199j
		push	eax
		push	ebp

loc_100044F6:				; CODE XREF: sub_10004356+147j
		push	[esp+18h+arg_8]
		call	sub_10004FBA
		add	esp, 0Ch
		jmp	loc_1000447E
; ---------------------------------------------------------------------------

loc_10004507:				; CODE XREF: sub_10004356+130j
		push	dword ptr [edi+8]
		push	dword ptr [eax+38h]
		push	dword ptr [eax+34h]
		push	11h
		push	[esp+20h+arg_8]
		call	sub_10003344
		add	esp, 14h
		jmp	loc_1000447E
; ---------------------------------------------------------------------------

loc_10004523:				; CODE XREF: sub_10004356+F4j
		push	0
		push	0
		jmp	loc_10004471
; ---------------------------------------------------------------------------

loc_1000452C:				; CODE XREF: sub_10004356+DCj
		push	1
		push	offset byte_10015028
		push	eax
		jmp	loc_10004472
; ---------------------------------------------------------------------------

loc_10004539:				; CODE XREF: sub_10004356+D6j
		mov	eax, esi
		sub	eax, 165h
		jz	loc_1000446A
		sub	eax, 0Bh

loc_10004549:				; CODE XREF: sub_10004356+BDj
		jz	loc_1000446A

loc_1000454F:				; CODE XREF: sub_10004356+37j
					; sub_10004356+A9j ...
		mov	eax, [esp+10h+arg_8]
		push	12h
		or	dword ptr [eax+8], 0FFFFFFFFh
		pop	eax
		jmp	loc_1000447E
sub_10004356	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000455F	proc near		; CODE XREF: sub_100048EF+78p

var_18		= byte ptr -18h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 18h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+18h+var_4], eax
		push	ebx
		mov	ebx, [esp+1Ch+arg_0]
		push	esi
		mov	esi, [esp+20h+arg_4]
		push	edi
		mov	edi, [esp+24h+arg_8]
		cmp	esi, 0CE53635Bh
		ja	short loc_100045CB
		cmp	esi, 0CE536358h
		jnb	short loc_100045EF
		cmp	esi, 2
		jz	short loc_100045B4
		cmp	esi, 80h
		jbe	short loc_100045E3
		cmp	esi, 82h
		jbe	short loc_100045EF
		mov	eax, 170h
		cmp	esi, eax
		jnz	short loc_100045E3
		push	1
		push	offset byte_10015000
		push	eax
		jmp	short loc_100045BD
; ---------------------------------------------------------------------------

loc_100045B4:				; CODE XREF: sub_1000455F+30j
		push	1		; size_t
		push	offset byte_10015028 ; void *
		push	2		; int

loc_100045BD:				; CODE XREF: sub_1000455F+53j
		push	edi		; int
		call	sub_100032BA
		add	esp, 10h
		jmp	loc_100047DD
; ---------------------------------------------------------------------------

loc_100045CB:				; CODE XREF: sub_1000455F+23j
		cmp	esi, 0CE536360h
		jz	short loc_100045EF
		cmp	esi, 0CE5363B3h
		jbe	short loc_100045E3
		cmp	esi, 0CE5363B5h
		jbe	short loc_100045EF

loc_100045E3:				; CODE XREF: sub_1000455F+38j
					; sub_1000455F+49j ...
		or	dword ptr [edi+8], 0FFFFFFFFh
		push	12h
		pop	eax
		jmp	loc_100047DD
; ---------------------------------------------------------------------------

loc_100045EF:				; CODE XREF: sub_1000455F+2Bj
					; sub_1000455F+40j ...
		push	ebp
		push	dword ptr [ebx+8]
		call	sub_100078A3
		mov	ebp, eax
		pop	ecx
		test	ebp, ebp
		jz	loc_100047D7
		cmp	dword ptr [ebx], 0CE534353h
		jnz	loc_100047D7
		mov	eax, [ebx+0Ch]
		test	eax, eax
		jnz	short loc_10004634
		lea	eax, [ebx+14h]
		push	eax
		push	ebp
		call	sub_1000C691
		mov	[ebx+0Ch], eax
		mov	dword ptr [ebx+10h], offset sub_1000C2BA
		pop	ecx
		pop	ecx
		test	eax, eax
		jz	loc_100047D7

loc_10004634:				; CODE XREF: sub_1000455F+B5j
		cmp	esi, 0CE536358h
		jz	loc_10004780
		cmp	esi, 0CE536359h
		jz	loc_1000476E
		cmp	esi, 0CE53635Ah
		jz	loc_10004766
		cmp	esi, 0CE53635Bh
		jz	loc_1000475E
		mov	ecx, 0CE536360h
		cmp	esi, ecx
		jz	loc_10004739
		cmp	esi, 0CE5363B4h
		jz	loc_1000470C
		cmp	esi, 0CE5363B5h
		jz	short loc_100046EB
		sub	esi, 81h
		jz	short loc_100046AC
		dec	esi
		jnz	short loc_100046DF
		push	ebp
		push	ebx
		call	sub_100050AA
		mov	esi, eax
		pop	ecx
		pop	ecx
		test	esi, esi
		jz	short loc_100046DF
		push	dword ptr [esi+28h]
		push	dword ptr [esi+24h]
		push	82h
		jmp	short loc_100046C6
; ---------------------------------------------------------------------------

loc_100046AC:				; CODE XREF: sub_1000455F+12Cj
		push	ebp
		push	ebx
		call	sub_100050AA
		mov	esi, eax
		pop	ecx
		pop	ecx
		test	esi, esi
		jz	short loc_100046DF
		push	dword ptr [esi+1Ch] ; size_t
		push	dword ptr [esi+18h] ; void *
		push	81h		; int

loc_100046C6:				; CODE XREF: sub_1000455F+14Bj
		push	edi		; int
		call	sub_100032BA
		add	esp, 10h
		mov	edi, eax
		push	esi		; void *
		call	sub_1000C1A9
		pop	ecx
		mov	eax, edi
		jmp	loc_100047DC
; ---------------------------------------------------------------------------

loc_100046DF:				; CODE XREF: sub_1000455F+12Fj
					; sub_1000455F+13Ej ...
		or	dword ptr [edi+8], 0FFFFFFFFh
		push	12h
		pop	eax
		jmp	loc_100047DC
; ---------------------------------------------------------------------------

loc_100046EB:				; CODE XREF: sub_1000455F+124j
		mov	eax, [eax+1Ch]
		push	dword ptr [eax+8]
		push	dword ptr [eax+4]
		lea	eax, [esp+30h+var_18]
		push	eax
		call	sub_1000E000
		push	10h
		lea	eax, [esp+38h+var_18]
		push	eax
		push	0CE5363B5h
		jmp	short loc_1000472B
; ---------------------------------------------------------------------------

loc_1000470C:				; CODE XREF: sub_1000455F+118j
		mov	eax, [eax+1Ch]
		push	dword ptr [eax+8]
		push	dword ptr [eax+4]
		lea	eax, [esp+30h+var_18]
		push	eax
		call	sub_1000E0C0
		push	14h		; size_t
		lea	eax, [esp+38h+var_18]
		push	eax		; void *
		push	0CE5363B4h	; int

loc_1000472B:				; CODE XREF: sub_1000455F+1ABj
		push	edi		; int
		call	sub_100032BA
		add	esp, 1Ch
		jmp	loc_100047DC
; ---------------------------------------------------------------------------

loc_10004739:				; CODE XREF: sub_1000455F+10Cj
		mov	eax, [eax+18h]
		push	1		; size_t
		test	dword ptr [eax], 200h
		jz	short loc_1000474D
		push	offset byte_10015000
		jmp	short loc_10004752
; ---------------------------------------------------------------------------

loc_1000474D:				; CODE XREF: sub_1000455F+1E5j
		push	offset byte_10015028 ; void *

loc_10004752:				; CODE XREF: sub_1000455F+1ECj
		push	ecx		; int
		push	edi		; int
		call	sub_100032BA
		add	esp, 10h
		jmp	short loc_100047DC
; ---------------------------------------------------------------------------

loc_1000475E:				; CODE XREF: sub_1000455F+FFj
		mov	eax, [eax+18h]
		mov	eax, [eax+4]
		jmp	short loc_10004785
; ---------------------------------------------------------------------------

loc_10004766:				; CODE XREF: sub_1000455F+F3j
		mov	eax, [eax+18h]
		mov	eax, [eax+8]
		jmp	short loc_10004785
; ---------------------------------------------------------------------------

loc_1000476E:				; CODE XREF: sub_1000455F+E7j
		mov	eax, [eax+18h]
		mov	eax, [eax]
		test	al, al
		jns	short loc_1000477C
		or	eax, 10h
		jmp	short loc_10004785
; ---------------------------------------------------------------------------

loc_1000477C:				; CODE XREF: sub_1000455F+216j
		xor	eax, eax
		jmp	short loc_10004785
; ---------------------------------------------------------------------------

loc_10004780:				; CODE XREF: sub_1000455F+DBj
		mov	eax, [eax+18h]
		mov	eax, [eax]

loc_10004785:				; CODE XREF: sub_1000455F+205j
					; sub_1000455F+20Dj ...
		test	al, 10h
		jz	short loc_10004790
		push	0CE534352h
		jmp	short loc_100047CB
; ---------------------------------------------------------------------------

loc_10004790:				; CODE XREF: sub_1000455F+228j
		test	al, 2
		jz	short loc_1000479B
		push	0CE534351h
		jmp	short loc_100047CB
; ---------------------------------------------------------------------------

loc_1000479B:				; CODE XREF: sub_1000455F+233j
		test	eax, 400h
		jz	short loc_100047A9
		push	0CE534353h
		jmp	short loc_100047CB
; ---------------------------------------------------------------------------

loc_100047A9:				; CODE XREF: sub_1000455F+241j
		test	eax, 800h
		jnz	short loc_100047C6
		test	al, 8
		jz	short loc_100047BB
		push	0CE53435Bh
		jmp	short loc_100047CB
; ---------------------------------------------------------------------------

loc_100047BB:				; CODE XREF: sub_1000455F+253j
		test	al, 1
		jz	short loc_100047C6
		push	0CE53435Ah
		jmp	short loc_100047CB
; ---------------------------------------------------------------------------

loc_100047C6:				; CODE XREF: sub_1000455F+24Fj
					; sub_1000455F+25Ej
		push	0CE534355h

loc_100047CB:				; CODE XREF: sub_1000455F+22Fj
					; sub_1000455F+23Aj ...
		push	esi
		push	edi
		call	sub_10004FBA
		add	esp, 0Ch
		jmp	short loc_100047DC
; ---------------------------------------------------------------------------

loc_100047D7:				; CODE XREF: sub_1000455F+9Ej
					; sub_1000455F+AAj ...
		mov	eax, 82h

loc_100047DC:				; CODE XREF: sub_1000455F+17Bj
					; sub_1000455F+187j ...
		pop	ebp

loc_100047DD:				; CODE XREF: sub_1000455F+67j
					; sub_1000455F+8Bj
		mov	ecx, [esp+24h+var_4]
		pop	edi
		pop	esi
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 18h
		retn
sub_1000455F	endp


; =============== S U B	R O U T	I N E =======================================


sub_100047EF	proc near		; DATA XREF: sub_100078D2+96o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	eax, [esp+arg_4]
		push	ebp
		push	esi
		and	eax, 3FFFFFFFh
		xor	esi, esi
		push	eax
		push	esi
		push	[esp+10h+arg_0]
		call	sub_100049D4
		mov	ebp, eax
		add	esp, 0Ch
		test	ebp, ebp
		jnz	short loc_10004817
		mov	eax, 82h
		jmp	short loc_10004845
; ---------------------------------------------------------------------------

loc_10004817:				; CODE XREF: sub_100047EF+1Fj
		push	edi
		mov	edi, [esp+0Ch+arg_C]
		test	edi, edi
		jz	short loc_1000483B
		push	ebx
		mov	ebx, [esp+10h+arg_8]

loc_10004825:				; CODE XREF: sub_100047EF+49j
		push	ebx
		push	ebp
		call	sub_100048EF
		pop	ecx
		pop	ecx
		test	esi, esi
		jnz	short loc_10004834
		mov	esi, eax

loc_10004834:				; CODE XREF: sub_100047EF+41j
		add	ebx, 0Ch
		dec	edi
		jnz	short loc_10004825
		pop	ebx

loc_1000483B:				; CODE XREF: sub_100047EF+2Fj
		push	ebp
		call	sub_100033AB
		pop	ecx
		mov	eax, esi
		pop	edi

loc_10004845:				; CODE XREF: sub_100047EF+26j
		pop	esi
		pop	ebp
		retn
sub_100047EF	endp


; =============== S U B	R O U T	I N E =======================================


sub_10004848	proc near		; CODE XREF: sub_10003DD9+C2p
					; sub_10004356+42p ...

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		push	dword ptr [esi+8]
		call	sub_100078AC
		pop	ecx
		test	eax, eax
		jnz	short loc_1000485C
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1000485C:				; CODE XREF: sub_10004848+10j
		push	eax
		push	esi
		call	sub_10004867
		pop	ecx
		pop	ecx
		pop	esi
		retn
sub_10004848	endp


; =============== S U B	R O U T	I N E =======================================


sub_10004867	proc near		; CODE XREF: sub_10004848+16p
					; sub_10004C7A+65p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_0]
		cmp	dword ptr [esi], 3
		jz	short loc_1000487A
		cmp	dword ptr [esi], 4
		jz	short loc_1000487A

loc_10004876:				; CODE XREF: sub_10004867+2Fj
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1000487A:				; CODE XREF: sub_10004867+8j
					; sub_10004867+Dj
		mov	eax, [esi+0Ch]
		test	eax, eax
		jnz	short loc_100048A2
		push	dword ptr [esi+8]
		lea	eax, [esi+14h]
		push	eax
		push	[esp+0Ch+arg_4]
		call	sub_10001F28
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_10004876
		mov	[esi+0Ch], eax
		mov	dword ptr [esi+10h], offset sub_10008EB7

loc_100048A2:				; CODE XREF: sub_10004867+18j
		pop	esi
		retn
sub_10004867	endp


; =============== S U B	R O U T	I N E =======================================


sub_100048A4	proc near		; CODE XREF: sub_10003F21+3Fp

arg_0		= dword	ptr  4

		push	edi
		mov	edi, [esp+4+arg_0]
		cmp	dword ptr [edi], 2
		jz	short loc_100048B2
		xor	eax, eax
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_100048B2:				; CODE XREF: sub_100048A4+8j
		mov	eax, [edi+0Ch]
		test	eax, eax
		jnz	short loc_100048ED
		push	ebx
		lea	eax, [edi+14h]
		push	eax
		push	dword ptr [edi+8]
		call	sub_10003D97
		mov	ebx, eax
		pop	ecx
		pop	ecx
		test	ebx, ebx
		jz	short loc_100048EC
		push	esi
		push	ebx
		call	sub_10008CE4
		push	ebx
		mov	esi, eax
		call	sub_10008EB7
		pop	ecx
		pop	ecx
		mov	[edi+0Ch], esi
		mov	eax, esi
		mov	dword ptr [edi+10h], offset sub_10008ED0
		pop	esi

loc_100048EC:				; CODE XREF: sub_100048A4+28j
		pop	ebx

loc_100048ED:				; CODE XREF: sub_100048A4+13j
		pop	edi
		retn
sub_100048A4	endp


; =============== S U B	R O U T	I N E =======================================


sub_100048EF	proc near		; CODE XREF: sub_100047EF+38p
					; sub_10004DB8+3Cp ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	ecx, [esp+arg_4]
		xor	edx, edx
		mov	eax, [ecx]
		sub	eax, edx
		jz	loc_100049C3
		dec	eax
		jz	loc_100049B0
		dec	eax
		dec	eax
		mov	eax, [esp+arg_0]
		jnz	short loc_1000492F
		cmp	dword ptr [eax], 1
		jz	loc_100049A5
		cmp	dword ptr [eax], 3
		jz	short loc_1000492F
		cmp	dword ptr [eax], 2
		jz	short loc_1000492F
		cmp	dword ptr [eax], 4
		jz	short loc_1000492F
		push	edx
		push	edx
		push	3
		jmp	loc_100049B9
; ---------------------------------------------------------------------------

loc_1000492F:				; CODE XREF: sub_100048EF+1Dj
					; sub_100048EF+2Bj ...
		cmp	dword ptr [eax], 1
		jz	short loc_100049A5
		cmp	dword ptr [eax], 2
		jz	short loc_1000499A
		cmp	dword ptr [eax], 3
		jz	short loc_1000498F
		cmp	dword ptr [eax], 4
		jz	short loc_10004984
		cmp	dword ptr [eax], 0CE534351h
		jz	short loc_10004979
		cmp	dword ptr [eax], 0CE534352h
		jz	short loc_1000496E
		cmp	dword ptr [eax], 0CE534353h
		jz	short loc_10004963
		or	dword ptr [ecx+8], 0FFFFFFFFh
		push	12h
		pop	eax
		retn
; ---------------------------------------------------------------------------

loc_10004963:				; CODE XREF: sub_100048EF+6Aj
		push	ecx
		push	dword ptr [ecx]
		push	eax
		call	sub_1000455F
		jmp	short loc_100049D0
; ---------------------------------------------------------------------------

loc_1000496E:				; CODE XREF: sub_100048EF+62j
		push	ecx
		push	dword ptr [ecx]
		push	eax
		call	sub_100042B3
		jmp	short loc_100049D0
; ---------------------------------------------------------------------------

loc_10004979:				; CODE XREF: sub_100048EF+5Aj
		push	ecx
		push	dword ptr [ecx]
		push	eax
		call	sub_1000360A
		jmp	short loc_100049D0
; ---------------------------------------------------------------------------

loc_10004984:				; CODE XREF: sub_100048EF+52j
		push	ecx
		push	dword ptr [ecx]
		push	eax
		call	sub_10004356
		jmp	short loc_100049D0
; ---------------------------------------------------------------------------

loc_1000498F:				; CODE XREF: sub_100048EF+4Dj
		push	ecx
		push	dword ptr [ecx]
		push	eax
		call	sub_10003DD9
		jmp	short loc_100049D0
; ---------------------------------------------------------------------------

loc_1000499A:				; CODE XREF: sub_100048EF+48j
		push	ecx
		push	dword ptr [ecx]
		push	eax
		call	sub_10003F21
		jmp	short loc_100049D0
; ---------------------------------------------------------------------------

loc_100049A5:				; CODE XREF: sub_100048EF+22j
					; sub_100048EF+43j
		push	ecx
		push	dword ptr [ecx]
		push	eax
		call	sub_100033E1
		jmp	short loc_100049D0
; ---------------------------------------------------------------------------

loc_100049B0:				; CODE XREF: sub_100048EF+11j
		push	1		; size_t
		push	offset byte_10015000 ; void *
		push	1		; int

loc_100049B9:				; CODE XREF: sub_100048EF+3Bj
		push	ecx		; int
		call	sub_100032BA
		add	esp, 10h
		retn
; ---------------------------------------------------------------------------

loc_100049C3:				; CODE XREF: sub_100048EF+Aj
		mov	eax, [esp+arg_0]
		push	dword ptr [eax]
		push	edx
		push	ecx
		call	sub_10004FBA

loc_100049D0:				; CODE XREF: sub_100048EF+7Dj
					; sub_100048EF+88j ...
		add	esp, 0Ch
		retn
sub_100048EF	endp


; =============== S U B	R O U T	I N E =======================================


sub_100049D4	proc near		; CODE XREF: sub_100047EF+13p
					; sub_10004A66+13p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	edi
		push	20h
		call	PORT_Alloc_Util
		mov	edi, eax
		pop	ecx
		test	edi, edi
		jnz	short loc_100049E5
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_100049E5:				; CODE XREF: sub_100049D4+Dj
		push	ebx
		mov	ebx, [esp+8+arg_0]
		push	ebp
		push	esi
		mov	esi, [esp+10h+arg_8]
		xor	ebp, ebp
		mov	eax, esi
		mov	[edi+4], esi
		shr	eax, 1Bh
		and	eax, 7
		mov	[edi+8], ebx
		push	ebx
		mov	[edi+0Ch], ebp
		mov	[edi+10h], ebp
		mov	eax, ds:dword_10013404[eax*4]
		mov	[edi], eax
		mov	[edi+18h], ebp
		mov	[edi+1Ch], ebp
		call	sub_10007688
		mov	eax, [esp+14h+arg_4]
		pop	ecx
		test	eax, eax
		jnz	short loc_10004A3A
		push	esi
		push	ebx
		call	sub_10007EE2
		pop	ecx
		pop	ecx
		test	eax, eax
		jnz	short loc_10004A3A
		push	ebx
		call	sub_10007699
		pop	ecx
		jmp	short loc_10004A54
; ---------------------------------------------------------------------------

loc_10004A3A:				; CODE XREF: sub_100049D4+4Ej
					; sub_100049D4+5Bj
		push	eax
		lea	eax, [edi+14h]
		push	eax
		push	ebp
		call	SECITEM_CopyItem_Util
		push	ebx
		mov	esi, eax
		call	sub_10007699
		add	esp, 10h
		test	esi, esi
		jz	short loc_10004A5F

loc_10004A54:				; CODE XREF: sub_100049D4+64j
		push	edi
		call	sub_100033AB
		pop	ecx
		xor	eax, eax
		jmp	short loc_10004A61
; ---------------------------------------------------------------------------

loc_10004A5F:				; CODE XREF: sub_100049D4+7Ej
		mov	eax, edi

loc_10004A61:				; CODE XREF: sub_100049D4+89j
		pop	esi
		pop	ebp
		pop	ebx
		pop	edi
		retn
sub_100049D4	endp


; =============== S U B	R O U T	I N E =======================================


sub_10004A66	proc near		; DATA XREF: sub_100078D2+9Do

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	eax, [esp+arg_4]
		push	esi
		push	edi
		and	eax, 3FFFFFFFh
		xor	edi, edi
		push	eax
		push	edi
		push	[esp+10h+arg_0]
		call	sub_100049D4
		mov	esi, eax
		mov	[esp+14h+arg_4], edi
		add	esp, 0Ch
		test	esi, esi
		jnz	short loc_10004A92
		mov	eax, 82h
		jmp	short loc_10004B03
; ---------------------------------------------------------------------------

loc_10004A92:				; CODE XREF: sub_10004A66+23j
		push	ebx
		mov	ebx, [esp+0Ch+arg_C]
		test	ebx, ebx
		jz	short loc_10004AF9
		push	ebp
		mov	ebp, [esp+10h+arg_8]

loc_10004AA0:				; CODE XREF: sub_10004A66+53j
		lea	eax, [esp+10h+arg_4]
		push	eax
		push	ebp
		push	esi
		call	sub_10004DB8
		add	esp, 0Ch
		test	edi, edi
		jnz	short loc_10004AB5
		mov	edi, eax

loc_10004AB5:				; CODE XREF: sub_10004A66+4Bj
		add	ebp, 0Ch
		dec	ebx
		jnz	short loc_10004AA0
		cmp	[esp+10h+arg_4], ebx
		jz	short loc_10004AF8
		push	esi
		call	sub_10004848
		lea	ebp, [esi+14h]
		mov	ebx, eax
		push	ebp
		push	dword ptr [esi+8]
		call	sub_10003DB8
		add	esp, 0Ch
		test	ebx, ebx
		jz	short loc_10004AF8
		push	1
		push	[esp+14h+arg_0]
		push	eax
		push	ebp
		push	ebx
		push	[esp+24h+arg_0]
		call	sub_100078AC
		pop	ecx
		push	eax
		call	sub_100025E6
		add	esp, 18h

loc_10004AF8:				; CODE XREF: sub_10004A66+59j
					; sub_10004A66+74j
		pop	ebp

loc_10004AF9:				; CODE XREF: sub_10004A66+33j
		push	esi
		call	sub_100033AB
		pop	ecx
		mov	eax, edi
		pop	ebx

loc_10004B03:				; CODE XREF: sub_10004A66+2Aj
		pop	edi
		pop	esi
		retn
sub_10004A66	endp


; =============== S U B	R O U T	I N E =======================================


sub_10004B06	proc near		; CODE XREF: sub_10004DB8+BDp

var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 20h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+20h+var_4], eax
		mov	eax, [esp+20h+arg_8]
		push	ebx
		push	ebp
		mov	ebp, [esp+28h+arg_0]
		xor	ebx, ebx
		push	esi
		push	edi
		mov	edi, [esp+30h+arg_4]
		mov	esi, ebx
		mov	[esp+30h+var_20], eax
		mov	eax, [esp+30h+arg_C]
		mov	[esp+30h+var_18], ebp
		mov	[esp+30h+var_14], eax
		cmp	edi, 0CE534352h
		jnz	short loc_10004B47
		xor	eax, eax
		jmp	loc_10004C67
; ---------------------------------------------------------------------------

loc_10004B47:				; CODE XREF: sub_10004B06+38j
		push	dword ptr [ebp+8]
		call	sub_100078A3
		mov	[esp+34h+var_1C], eax
		pop	ecx
		test	eax, eax
		jnz	short loc_10004B62
		mov	ebx, 0E2h
		jmp	loc_10004C65
; ---------------------------------------------------------------------------

loc_10004B62:				; CODE XREF: sub_10004B06+50j
		cmp	edi, 3
		jz	short loc_10004B77
		cmp	edi, 102h
		jz	short loc_10004B77
		push	10h

loc_10004B71:				; CODE XREF: sub_10004B06+127j
		pop	ebx
		jmp	loc_10004C65
; ---------------------------------------------------------------------------

loc_10004B77:				; CODE XREF: sub_10004B06+5Fj
					; sub_10004B06+67j
		push	eax
		push	ebp
		call	sub_100050AA
		mov	ebp, eax
		pop	ecx
		pop	ecx
		test	ebp, ebp
		jnz	short loc_10004B90
		mov	ebx, 82h
		jmp	loc_10004C65
; ---------------------------------------------------------------------------

loc_10004B90:				; CODE XREF: sub_10004B06+7Ej
		cmp	edi, 102h
		jnz	short loc_10004C11
		mov	eax, [ebp+90h]
		test	byte ptr [eax],	40h
		jnz	loc_10004C65
		test	byte ptr [eax+4], 40h
		jnz	loc_10004C65
		test	byte ptr [eax+8], 40h
		jnz	loc_10004C65
		mov	eax, [esp+30h+var_18]
		push	dword ptr [eax+8]
		call	sub_100078AC
		pop	ecx
		test	eax, eax
		jz	loc_10004C65
		push	ebp
		push	eax
		call	sub_1000210B
		pop	ecx
		pop	ecx
		test	eax, eax
		jz	loc_10004C65
		mov	esi, [ebp+90h]
		lea	edi, [esp+30h+var_10]
		lea	eax, [esp+30h+var_10]
		push	eax
		push	ebp
		push	[esp+38h+var_1C]
		movsd
		movsd
		movsd
		or	[esp+3Ch+var_10], 40h
		or	[esp+3Ch+var_C], 40h
		or	[esp+3Ch+var_8], 40h
		call	sub_1000C05A
		add	esp, 0Ch
		jmp	short loc_10004C65
; ---------------------------------------------------------------------------

loc_10004C11:				; CODE XREF: sub_10004B06+90j
		cmp	[esp+30h+var_20], ebx
		jz	short loc_10004C43
		mov	edi, [esp+30h+var_14]
		lea	eax, [edi+1]
		push	eax
		call	PORT_ZAlloc_Util
		mov	esi, eax
		pop	ecx
		test	esi, esi
		jnz	short loc_10004C32
		push	2
		jmp	loc_10004B71
; ---------------------------------------------------------------------------

loc_10004C32:				; CODE XREF: sub_10004B06+123j
		push	edi		; size_t
		push	[esp+34h+var_20] ; void	*
		push	esi		; void *
		call	memcpy
		add	esp, 0Ch
		mov	[edi+esi], bl

loc_10004C43:				; CODE XREF: sub_10004B06+10Fj
		push	esi		; char *
		push	ebp		; int
		push	[esp+38h+var_1C] ; int
		call	sub_1000BF7A
		add	esp, 0Ch
		mov	ebx, eax
		neg	ebx
		sbb	ebx, ebx
		and	ebx, 30h
		test	esi, esi
		jz	short loc_10004C65
		push	esi
		call	PORT_Free_Util
		pop	ecx

loc_10004C65:				; CODE XREF: sub_10004B06+57j
					; sub_10004B06+6Cj ...
		mov	eax, ebx

loc_10004C67:				; CODE XREF: sub_10004B06+3Cj
		mov	ecx, [esp+30h+var_4]
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 20h
		retn
sub_10004B06	endp


; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10004C7A(int,	int, void *, size_t, int)
sub_10004C7A	proc near		; CODE XREF: sub_10004DB8+8Cp

var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	ecx
		push	ebx
		push	edi
		mov	edi, [esp+0Ch+arg_4]
		xor	ebx, ebx
		cmp	edi, 102h
		jz	loc_10004DB2
		cmp	edi, 101h
		jz	loc_10004DB2
		cmp	edi, 163h
		jz	loc_10004DB2
		cmp	edi, 164h
		jz	loc_10004DB2
		cmp	edi, 165h
		jz	loc_10004DB2
		push	ebp
		mov	ebp, [esp+10h+arg_0]
		push	esi
		push	dword ptr [ebp+8]
		call	sub_100078AC
		mov	[esp+18h+var_4], eax
		pop	ecx
		test	eax, eax
		jnz	short loc_10004CDD
		mov	esi, 0E2h
		jmp	short loc_10004D37
; ---------------------------------------------------------------------------

loc_10004CDD:				; CODE XREF: sub_10004C7A+5Aj
		push	eax
		push	ebp
		call	sub_10004867
		mov	[esp+1Ch+arg_4], eax
		pop	ecx
		pop	ecx
		test	eax, eax
		jnz	short loc_10004CF5
		mov	esi, 82h
		jmp	short loc_10004D37
; ---------------------------------------------------------------------------

loc_10004CF5:				; CODE XREF: sub_10004C7A+72j
		push	10h
		pop	esi
		cmp	edi, 109h
		ja	loc_10004D91
		cmp	edi, 107h
		jnb	short loc_10004D22
		cmp	edi, 3
		jz	short loc_10004D3D
		cmp	edi, 11h
		jz	loc_10004DA4
		cmp	edi, 105h
		jnz	short loc_10004D37

loc_10004D22:				; CODE XREF: sub_10004C7A+90j
					; sub_10004C7A+11Dj
		mov	eax, [esp+14h+arg_8]
		cmp	[eax], bl
		jnz	short loc_10004D37
		xor	esi, esi

loc_10004D2C:				; CODE XREF: sub_10004C7A+115j
		test	ebx, ebx
		jz	short loc_10004D37
		push	ebx
		call	PORT_Free_Util
		pop	ecx

loc_10004D37:				; CODE XREF: sub_10004C7A+61j
					; sub_10004C7A+79j ...
		mov	eax, esi
		pop	esi
		pop	ebp
		jmp	short loc_10004DB4
; ---------------------------------------------------------------------------

loc_10004D3D:				; CODE XREF: sub_10004C7A+95j
		cmp	[esp+14h+arg_8], ebx
		jz	short loc_10004D6E
		mov	esi, [esp+14h+arg_C]
		lea	eax, [esi+1]
		push	eax
		call	PORT_ZAlloc_Util
		mov	ebx, eax
		pop	ecx
		test	ebx, ebx
		jnz	short loc_10004D5C
		push	2
		pop	esi
		jmp	short loc_10004D37
; ---------------------------------------------------------------------------

loc_10004D5C:				; CODE XREF: sub_10004C7A+DBj
		push	esi		; size_t
		push	[esp+18h+arg_8]	; void *
		push	ebx		; void *
		call	memcpy
		add	esp, 0Ch
		mov	byte ptr [ebx+esi], 0

loc_10004D6E:				; CODE XREF: sub_10004C7A+C7j
		push	dword ptr [ebp+8]
		lea	eax, [ebp+14h]
		push	ebx
		push	eax
		push	[esp+20h+arg_4]
		push	[esp+24h+var_4]
		call	sub_10002978
		add	esp, 14h
		mov	esi, eax
		neg	esi
		sbb	esi, esi
		and	esi, 30h
		jmp	short loc_10004D2C
; ---------------------------------------------------------------------------

loc_10004D91:				; CODE XREF: sub_10004C7A+84j
		cmp	edi, 10Ch
		jz	short loc_10004D22
		lea	eax, [edi-123h]
		cmp	eax, 5
		ja	short loc_10004D37

loc_10004DA4:				; CODE XREF: sub_10004C7A+9Aj
		mov	eax, [esp+14h+arg_10]
		xor	esi, esi
		mov	dword ptr [eax], 1
		jmp	short loc_10004D37
; ---------------------------------------------------------------------------

loc_10004DB2:				; CODE XREF: sub_10004C7A+Fj
					; sub_10004C7A+1Bj ...
		xor	eax, eax

loc_10004DB4:				; CODE XREF: sub_10004C7A+C1j
		pop	edi
		pop	ebx
		pop	ecx
		retn
sub_10004C7A	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10004DB8	proc near		; CODE XREF: sub_10004A66+41p

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, [ebp+arg_4]
		push	edi
		mov	edi, [ebp+arg_0]
		mov	eax, [esi]
		cmp	eax, 0D5A0DB00h
		jnz	short loc_10004DE4
		cmp	dword ptr [edi], 3
		jnz	short loc_10004DE4
		mov	eax, [ebp+arg_8]
		mov	dword ptr [eax], 1

loc_10004DDD:				; CODE XREF: sub_10004DB8+57j
					; sub_10004DB8+9Cj ...
		xor	eax, eax
		jmp	loc_10004E7D
; ---------------------------------------------------------------------------

loc_10004DE4:				; CODE XREF: sub_10004DB8+15j
					; sub_10004DB8+1Aj
		and	[ebp+var_8], 0
		and	[ebp+var_4], 0
		mov	[ebp+var_C], eax
		lea	eax, [ebp+var_C]
		push	eax
		push	edi
		call	sub_100048EF
		pop	ecx
		pop	ecx
		test	eax, eax
		jnz	short loc_10004E7D
		cmp	dword ptr [esi], 3
		jz	short loc_10004E11
		push	esi
		push	edi
		call	sub_10005007
		pop	ecx
		pop	ecx
		test	eax, eax
		jnz	short loc_10004DDD

loc_10004E11:				; CODE XREF: sub_10004DB8+4Aj
		cmp	dword ptr [edi], 1
		push	10h
		pop	eax
		jz	short loc_10004E6C
		cmp	dword ptr [edi], 2
		jz	short loc_10004E4E
		jbe	short loc_10004E7D
		cmp	dword ptr [edi], 4
		jbe	short loc_10004E38
		cmp	dword ptr [edi], 0CE534353h
		jnz	short loc_10004E7D
		push	esi
		push	edi
		call	sub_10004E83
		pop	ecx
		pop	ecx
		jmp	short loc_10004E7D
; ---------------------------------------------------------------------------

loc_10004E38:				; CODE XREF: sub_10004DB8+6Bj
		push	[ebp+arg_8]	; int
		push	dword ptr [esi+8] ; size_t
		push	dword ptr [esi+4] ; void *
		push	dword ptr [esi]	; int
		push	edi		; int
		call	sub_10004C7A
		add	esp, 14h
		jmp	short loc_10004E7D
; ---------------------------------------------------------------------------

loc_10004E4E:				; CODE XREF: sub_10004DB8+64j
		cmp	dword ptr [esi], 102h
		jz	short loc_10004DDD
		cmp	dword ptr [esi], 101h
		jz	loc_10004DDD
		cmp	dword ptr [esi], 3
		jnz	short loc_10004E7D
		jmp	loc_10004DDD
; ---------------------------------------------------------------------------

loc_10004E6C:				; CODE XREF: sub_10004DB8+5Fj
		push	dword ptr [esi+8]
		push	dword ptr [esi+4]
		push	dword ptr [esi]
		push	edi
		call	sub_10004B06
		add	esp, 10h

loc_10004E7D:				; CODE XREF: sub_10004DB8+27j
					; sub_10004DB8+45j ...
		pop	edi
		pop	esi
		mov	esp, ebp
		pop	ebp
		retn
sub_10004DB8	endp


; =============== S U B	R O U T	I N E =======================================


sub_10004E83	proc near		; CODE XREF: sub_10004DB8+77p

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 18h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+18h+var_4], eax
		push	ebx
		mov	ebx, [esp+1Ch+arg_4]
		push	esi
		mov	esi, [esp+20h+arg_0]
		cmp	dword ptr [ebx], 3
		jnz	short loc_10004EA7
		xor	eax, eax
		jmp	loc_10004FA9
; ---------------------------------------------------------------------------

loc_10004EA7:				; CODE XREF: sub_10004E83+1Bj
		lea	eax, [esp+20h+var_14]
		push	eax
		push	1
		push	ebx
		push	dword ptr [ebx]
		call	sub_10007C40
		add	esp, 10h
		test	eax, eax
		jnz	loc_10004FA9
		cmp	dword ptr [ebx], 0CE536359h
		push	ebp
		setz	al
		push	eax
		push	[esp+28h+var_14]
		call	sub_1000531B
		push	dword ptr [esi+8]
		mov	ebp, eax
		call	sub_100078A3
		add	esp, 0Ch
		mov	[esp+24h+var_18], eax
		test	eax, eax
		jnz	short loc_10004EF4
		mov	eax, 0E2h
		jmp	loc_10004FA8
; ---------------------------------------------------------------------------

loc_10004EF4:				; CODE XREF: sub_10004E83+65j
		push	eax
		push	esi
		call	sub_100050AA
		pop	ecx
		pop	ecx
		mov	ecx, eax
		test	ecx, ecx
		jnz	short loc_10004F0D
		mov	eax, 82h
		jmp	loc_10004FA8
; ---------------------------------------------------------------------------

loc_10004F0D:				; CODE XREF: sub_10004E83+7Ej
		cmp	dword ptr [ebx], 0CE536358h
		mov	esi, [ecx+90h]
		push	edi
		lea	edi, [esp+28h+var_10]
		movsd
		movsd
		movsd
		pop	edi
		jz	short loc_10004F7C
		cmp	dword ptr [ebx], 0CE536359h
		jz	short loc_10004F6D
		cmp	dword ptr [ebx], 0CE53635Ah
		jz	short loc_10004F57
		cmp	dword ptr [ebx], 0CE53635Bh
		jz	short loc_10004F41
		push	10h
		pop	eax
		jmp	short loc_10004FA8
; ---------------------------------------------------------------------------

loc_10004F41:				; CODE XREF: sub_10004E83+B7j
		mov	eax, [ecx+90h]
		mov	eax, [eax+4]
		and	eax, 368h
		or	eax, ebp
		mov	[esp+24h+var_C], eax
		jmp	short loc_10004F8F
; ---------------------------------------------------------------------------

loc_10004F57:				; CODE XREF: sub_10004E83+AFj
		mov	eax, [ecx+90h]
		mov	eax, [eax+8]
		and	eax, 368h
		or	eax, ebp
		mov	[esp+24h+var_8], eax
		jmp	short loc_10004F8F
; ---------------------------------------------------------------------------

loc_10004F6D:				; CODE XREF: sub_10004E83+A7j
		mov	eax, [ecx+90h]
		mov	eax, [eax]
		and	eax, 378h
		jmp	short loc_10004F89
; ---------------------------------------------------------------------------

loc_10004F7C:				; CODE XREF: sub_10004E83+9Fj
		mov	eax, [ecx+90h]
		mov	eax, [eax]
		and	eax, 3E8h

loc_10004F89:				; CODE XREF: sub_10004E83+F7j
		or	eax, ebp
		mov	[esp+24h+var_10], eax

loc_10004F8F:				; CODE XREF: sub_10004E83+D2j
					; sub_10004E83+E8j
		lea	eax, [esp+24h+var_10]
		push	eax
		push	ecx
		push	[esp+2Ch+var_18]
		call	sub_1000C05A
		add	esp, 0Ch
		neg	eax
		sbb	eax, eax
		and	eax, 30h

loc_10004FA8:				; CODE XREF: sub_10004E83+6Cj
					; sub_10004E83+85j ...
		pop	ebp

loc_10004FA9:				; CODE XREF: sub_10004E83+1Fj
					; sub_10004E83+38j
		mov	ecx, [esp+20h+var_4]
		pop	esi
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 18h
		retn
sub_10004E83	endp


; =============== S U B	R O U T	I N E =======================================


sub_10004FBA	proc near		; CODE XREF: sub_100033E1+49p
					; sub_100036E6+82p ...

arg_0		= dword	ptr  4
arg_8		= dword	ptr  0Ch

		mov	edx, [esp+arg_0]
		push	edi
		mov	edi, [edx+4]
		test	edi, edi
		jnz	short loc_10004FD1
		mov	dword ptr [edx+8], 4
		xor	eax, eax
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_10004FD1:				; CODE XREF: sub_10004FBA+Aj
		push	ebx
		push	4
		pop	ebx
		cmp	[edx+8], ebx
		jnb	short loc_10004FE5
		or	dword ptr [edx+8], 0FFFFFFFFh
		mov	eax, 150h
		jmp	short loc_10005004
; ---------------------------------------------------------------------------

loc_10004FE5:				; CODE XREF: sub_10004FBA+1Ej
		push	esi
		xor	esi, esi

loc_10004FE8:				; CODE XREF: sub_10004FBA+42j
		mov	eax, [esp+0Ch+arg_8]
		push	3
		pop	ecx
		sub	ecx, esi
		shl	ecx, 3
		shr	eax, cl
		mov	[esi+edi], al
		inc	esi
		cmp	esi, ebx
		jl	short loc_10004FE8
		mov	[edx+8], ebx
		xor	eax, eax
		pop	esi

loc_10005004:				; CODE XREF: sub_10004FBA+29j
		pop	ebx
		pop	edi
		retn
sub_10004FBA	endp


; =============== S U B	R O U T	I N E =======================================


sub_10005007	proc near		; CODE XREF: sub_10004DB8+4Ep
					; sub_10005176+2Fp

var_48		= byte ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= byte ptr -38h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 48h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+48h+var_4], eax
		mov	eax, [esp+48h+arg_0]
		lea	ecx, [esp+48h+var_38]
		push	ebx
		push	ebp
		mov	ebp, [esp+50h+arg_4]
		xor	ebx, ebx
		push	esi
		push	edi
		mov	esi, ebp
		mov	[esp+58h+var_3C], eax
		cmp	dword ptr [ebp+8], 32h
		lea	edi, [esp+58h+var_48]
		movsd
		movsd
		movsd
		mov	[esp+58h+var_44], ecx
		jbe	short loc_10005055
		push	dword ptr [ebp+8]
		call	PORT_Alloc_Util
		mov	ebx, eax
		pop	ecx
		test	ebx, ebx
		jz	short loc_10005097
		mov	eax, [esp+58h+var_3C]
		mov	[esp+58h+var_44], ebx

loc_10005055:				; CODE XREF: sub_10005007+35j
		lea	ecx, [esp+58h+var_48]
		push	ecx
		push	eax
		call	sub_100048EF
		pop	ecx
		pop	ecx
		test	eax, eax
		jnz	short loc_10005083
		mov	eax, [esp+58h+var_40]
		cmp	[ebp+8], eax
		jnz	short loc_10005083
		push	eax		; size_t
		push	[esp+5Ch+var_44] ; void	*
		push	dword ptr [ebp+4] ; void *
		call	memcmp
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_10005087

loc_10005083:				; CODE XREF: sub_10005007+5Dj
					; sub_10005007+66j
		xor	ebp, ebp
		jmp	short loc_1000508A
; ---------------------------------------------------------------------------

loc_10005087:				; CODE XREF: sub_10005007+7Aj
		xor	ebp, ebp
		inc	ebp

loc_1000508A:				; CODE XREF: sub_10005007+7Ej
		test	ebx, ebx
		jz	short loc_10005095
		push	ebx
		call	PORT_Free_Util
		pop	ecx

loc_10005095:				; CODE XREF: sub_10005007+85j
		mov	eax, ebp

loc_10005097:				; CODE XREF: sub_10005007+44j
		mov	ecx, [esp+58h+var_4]
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 48h
		retn
sub_10005007	endp


; =============== S U B	R O U T	I N E =======================================


sub_100050AA	proc near		; CODE XREF: sub_100033E1+BFp
					; sub_1000455F+133p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_0]
		push	edi
		mov	edi, [esi]
		cmp	edi, 1
		jz	short loc_100050C3
		cmp	edi, 0CE534353h
		jz	short loc_100050CA
		xor	eax, eax
		jmp	short loc_100050E8
; ---------------------------------------------------------------------------

loc_100050C3:				; CODE XREF: sub_100050AA+Bj
		mov	eax, [esi+0Ch]
		test	eax, eax
		jnz	short loc_100050E8

loc_100050CA:				; CODE XREF: sub_100050AA+13j
		lea	eax, [esi+14h]
		push	eax
		push	[esp+0Ch+arg_4]
		call	sub_1000C4AD
		pop	ecx
		pop	ecx
		cmp	edi, 1
		jnz	short loc_100050E8
		mov	[esi+0Ch], eax
		mov	dword ptr [esi+10h], offset sub_1000C1A9

loc_100050E8:				; CODE XREF: sub_100050AA+17j
					; sub_100050AA+1Ej ...
		pop	edi
		pop	esi
		retn
sub_100050AA	endp


; =============== S U B	R O U T	I N E =======================================


sub_100050EB	proc near		; CODE XREF: sub_1000360A+76p

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		cmp	dword ptr [esi], 0CE534351h
		jz	short loc_100050FC
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_100050FC:				; CODE XREF: sub_100050EB+Bj
		mov	eax, [esi+0Ch]
		test	eax, eax
		jnz	short loc_10005138
		push	ebx
		push	dword ptr [esi+8]
		xor	ebx, ebx
		cmp	dword ptr [esi+4], 28000001h
		setz	bl
		call	sub_100078A3
		pop	ecx
		mov	ecx, eax
		test	ecx, ecx
		jz	short loc_10005137
		push	ebx
		lea	eax, [esi+14h]
		push	eax
		push	ecx
		call	sub_1000C4E4
		add	esp, 0Ch
		mov	[esi+0Ch], eax
		mov	dword ptr [esi+10h], offset sub_1000C1B7

loc_10005137:				; CODE XREF: sub_100050EB+32j
		pop	ebx

loc_10005138:				; CODE XREF: sub_100050EB+16j
		pop	esi
		retn
sub_100050EB	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000513A	proc near		; CODE XREF: sub_100042B3+51p

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		cmp	dword ptr [esi], 0CE534352h
		jz	short loc_1000514B

loc_10005147:				; CODE XREF: sub_1000513A+23j
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1000514B:				; CODE XREF: sub_1000513A+Bj
		mov	eax, [esi+0Ch]
		test	eax, eax
		jnz	short loc_10005174
		push	dword ptr [esi+8]
		call	sub_100078A3
		pop	ecx
		test	eax, eax
		jz	short loc_10005147
		push	dword ptr [esi+18h] ; char *
		push	eax		; int
		call	sub_1000C933
		pop	ecx
		pop	ecx
		mov	[esi+0Ch], eax
		mov	dword ptr [esi+10h], offset sub_1000C1B7

loc_10005174:				; CODE XREF: sub_1000513A+16j
		pop	esi
		retn
sub_1000513A	endp


; =============== S U B	R O U T	I N E =======================================


sub_10005176	proc near		; CODE XREF: sub_100066A4+35p
					; sub_100066A4+58p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	esi
		push	edi
		push	[esp+8+arg_8]
		xor	edi, edi
		push	[esp+0Ch+arg_4]
		inc	edi
		push	[esp+10h+arg_0]
		call	sub_100049D4
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		jz	short loc_100051C7
		push	ebp
		xor	ebp, ebp
		cmp	[esp+0Ch+arg_10], ebp
		jbe	short loc_100051BD
		push	ebx
		mov	ebx, [esp+10h+arg_C]

loc_100051A3:				; CODE XREF: sub_10005176+44j
		push	ebx
		push	esi
		call	sub_10005007
		mov	edi, eax
		pop	ecx
		pop	ecx
		test	edi, edi
		jz	short loc_100051BC
		inc	ebp
		add	ebx, 0Ch
		cmp	ebp, [esp+10h+arg_10]
		jb	short loc_100051A3

loc_100051BC:				; CODE XREF: sub_10005176+3Aj
		pop	ebx

loc_100051BD:				; CODE XREF: sub_10005176+26j
		push	esi
		call	sub_100033AB
		pop	ecx
		mov	eax, edi
		pop	ebp

loc_100051C7:				; CODE XREF: sub_10005176+1Dj
		pop	edi
		pop	esi
		retn
sub_10005176	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_100051CA	proc near		; DATA XREF: sub_100078D2+A4o

var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	ecx
		push	esi
		mov	esi, [ebp+arg_C]
		lea	eax, [ebp+var_4]
		push	edi
		mov	edi, [ebp+arg_8]
		push	eax
		push	esi
		push	edi
		push	0
		call	sub_10007C40
		add	esp, 10h
		test	eax, eax
		jnz	short loc_10005263
		mov	eax, [ebp+var_4]
		cmp	eax, 1
		jz	short loc_10005253
		jbe	short loc_1000524E
		cmp	eax, 4
		jbe	short loc_1000523B
		cmp	eax, 0CE534351h
		jz	short loc_1000522C
		cmp	eax, 0CE534352h
		jz	short loc_1000521D
		cmp	eax, 0CE534353h
		jnz	short loc_1000524E
		push	esi
		push	edi
		push	[ebp+arg_4]
		push	[ebp+arg_0]
		call	sub_10005C3F
		jmp	short loc_10005260
; ---------------------------------------------------------------------------

loc_1000521D:				; CODE XREF: sub_100051CA+3Bj
		push	esi
		push	edi
		push	[ebp+arg_4]
		push	[ebp+arg_0]
		call	sub_100059D4
		jmp	short loc_10005260
; ---------------------------------------------------------------------------

loc_1000522C:				; CODE XREF: sub_100051CA+34j
		push	esi
		push	edi
		push	[ebp+arg_4]
		push	[ebp+arg_0]
		call	sub_10005593
		jmp	short loc_10005260
; ---------------------------------------------------------------------------

loc_1000523B:				; CODE XREF: sub_100051CA+2Dj
		push	esi
		push	edi
		push	[ebp+arg_4]
		push	eax
		push	[ebp+arg_0]
		call	sub_1000569D
		add	esp, 14h
		jmp	short loc_10005263
; ---------------------------------------------------------------------------

loc_1000524E:				; CODE XREF: sub_100051CA+28j
					; sub_100051CA+42j
		push	13h
		pop	eax
		jmp	short loc_10005263
; ---------------------------------------------------------------------------

loc_10005253:				; CODE XREF: sub_100051CA+26j
		push	esi
		push	edi
		push	[ebp+arg_4]
		push	[ebp+arg_0]
		call	sub_10005372

loc_10005260:				; CODE XREF: sub_100051CA+51j
					; sub_100051CA+60j ...
		add	esp, 10h

loc_10005263:				; CODE XREF: sub_100051CA+1Ej
					; sub_100051CA+82j ...
		pop	edi
		pop	esi
		mov	esp, ebp
		pop	ebp
		retn
sub_100051CA	endp


; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10005269(int,	int, char *)
sub_10005269	proc near		; CODE XREF: sub_10005B1C+82p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		push	ebp
		push	esi
		mov	esi, [esp+0Ch+arg_4]
		xor	ebp, ebp
		push	edi
		mov	edi, [esp+10h+arg_8]
		mov	ebx, ebp
		mov	[esi+4], ebp
		test	edi, edi
		jz	short loc_100052C0
		push	edi
		call	PORT_Strdup_Util
		mov	[esi+4], eax
		pop	ecx
		test	eax, eax
		jnz	short loc_10005296

loc_1000528E:				; CODE XREF: sub_10005269+66j
		push	2
		pop	eax
		jmp	loc_10005316
; ---------------------------------------------------------------------------

loc_10005296:				; CODE XREF: sub_10005269+23j
		push	edi		; char *
		call	strlen
		push	esi
		push	[esp+18h+arg_0]
		inc	eax
		mov	[esi+8], eax
		call	sub_10002233
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_10005316
		push	dword ptr [esi+4]
		call	PORT_Free_Util
		pop	ecx
		mov	[esi+4], ebp
		mov	[esi+8], ebp

loc_100052C0:				; CODE XREF: sub_10005269+15j
		push	12h
		pop	edi
		push	edi
		call	PORT_Alloc_Util
		mov	[esi+4], eax
		pop	ecx
		test	eax, eax
		jz	short loc_1000528E
		mov	[esi+8], edi
		mov	edi, ebp

loc_100052D6:				; CODE XREF: sub_10005269+92j
		push	dword ptr [esi+8]
		push	dword ptr [esi+4]
		call	sub_1000E040
		pop	ecx
		pop	ecx
		test	eax, eax
		jnz	short loc_10005302
		push	esi
		push	[esp+14h+arg_0]
		call	sub_10002233
		pop	ecx
		pop	ecx
		test	eax, eax
		jz	short loc_100052FD
		inc	edi
		cmp	edi, 0Ah
		jbe	short loc_100052D6

loc_100052FD:				; CODE XREF: sub_10005269+8Cj
		cmp	edi, 0Ah
		jbe	short loc_10005314

loc_10005302:				; CODE XREF: sub_10005269+7Cj
		push	30h
		pop	ebx
		push	dword ptr [esi+4]
		call	PORT_Free_Util
		pop	ecx
		mov	[esi+4], ebp
		mov	[esi+8], ebp

loc_10005314:				; CODE XREF: sub_10005269+97j
		mov	eax, ebx

loc_10005316:				; CODE XREF: sub_10005269+28j
					; sub_10005269+46j
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
sub_10005269	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000531B	proc near		; CODE XREF: sub_10004E83+4Dp
					; sub_10005C3F+198p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	ecx, [esp+arg_0]
		cmp	ecx, 0CE534351h
		jz	short loc_1000536E
		cmp	ecx, 0CE534352h
		jz	short loc_1000535C
		cmp	ecx, 0CE534353h
		jz	short loc_10005356
		xor	eax, eax
		cmp	ecx, 0CE53435Ah
		jz	short loc_10005354
		cmp	ecx, 0CE53435Bh
		setz	al
		dec	eax
		and	eax, 7F8h
		add	eax, 8
		retn
; ---------------------------------------------------------------------------

loc_10005354:				; CODE XREF: sub_1000531B+24j
		inc	eax
		retn
; ---------------------------------------------------------------------------

loc_10005356:				; CODE XREF: sub_1000531B+1Aj
		mov	eax, 400h
		retn
; ---------------------------------------------------------------------------

loc_1000535C:				; CODE XREF: sub_1000531B+12j
		mov	eax, [esp+arg_4]
		neg	eax
		sbb	eax, eax
		and	eax, 70h
		add	eax, 10h
		or	eax, 8
		retn
; ---------------------------------------------------------------------------

loc_1000536E:				; CODE XREF: sub_1000531B+Aj
		push	3
		pop	eax
		retn
sub_1000531B	endp


; =============== S U B	R O U T	I N E =======================================


sub_10005372	proc near		; CODE XREF: sub_100051CA+91p

var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
File		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 44h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+44h+var_4], eax
		mov	eax, [esp+44h+arg_4]
		mov	ecx, [esp+44h+arg_0]
		push	ebx
		mov	ebx, [esp+48h+arg_8]
		push	ebp
		push	esi
		push	edi
		mov	[esp+54h+var_2C], eax
		xor	edi, edi
		mov	eax, [esp+54h+arg_C]
		mov	ebp, edi
		mov	[esp+54h+var_40], eax
		push	40h
		pop	eax
		mov	[esp+54h+var_1C], eax
		mov	[esp+54h+var_18], eax
		mov	[esp+54h+var_14], eax
		mov	eax, 800h
		push	ecx
		mov	[esp+58h+var_38], ecx
		mov	[esp+58h+var_30], ebx
		mov	[esp+58h+var_10], eax
		mov	[esp+58h+var_C], eax
		mov	[esp+58h+var_8], eax
		mov	[esp+58h+var_44], 1
		call	sub_100078A3
		push	[esp+58h+var_40]
		mov	esi, eax
		push	ebx
		push	2
		mov	[esp+64h+File],	esi
		call	sub_10007EC2
		add	esp, 10h
		test	eax, eax
		jz	short loc_100053F7

loc_100053EF:				; CODE XREF: sub_10005372+A8j
					; sub_10005372+CBj ...
		push	13h
		pop	eax
		jmp	loc_10005580
; ---------------------------------------------------------------------------

loc_100053F7:				; CODE XREF: sub_10005372+7Bj
		lea	eax, [esp+54h+var_34]
		push	eax
		push	[esp+58h+var_40]
		push	ebx
		push	80h
		call	sub_10007C40
		add	esp, 10h
		test	eax, eax
		jnz	loc_10005580
		cmp	[esp+54h+var_34], edi
		jnz	short loc_100053EF
		test	esi, esi
		jnz	short loc_1000542A
		mov	eax, 0E2h
		jmp	loc_10005580
; ---------------------------------------------------------------------------

loc_1000542A:				; CODE XREF: sub_10005372+ACj
		push	[esp+54h+var_40]
		push	ebx
		push	11h
		call	sub_10007C17
		mov	ecx, eax
		add	esp, 0Ch
		test	ecx, ecx
		jz	short loc_100053EF
		push	[esp+54h+var_40]
		mov	[esp+58h+var_28], edi
		mov	eax, [ecx+4]
		mov	[esp+58h+var_24], eax
		mov	eax, [ecx+8]
		push	ebx
		push	3
		mov	[esp+60h+var_20], eax
		call	sub_10007E54
		mov	ebx, eax
		lea	eax, [esp+60h+var_28]
		push	eax
		push	esi
		call	sub_1000C348
		mov	esi, eax
		add	esp, 14h
		test	esi, esi
		jnz	short loc_1000549E
		lea	eax, [esp+54h+var_28]
		push	ebx		; char *
		push	eax		; int
		call	sub_100080B1
		mov	esi, eax
		mov	[esp+5Ch+var_44], edi
		pop	ecx
		pop	ecx
		test	esi, esi
		jnz	short loc_1000549E
		test	ebx, ebx
		jz	loc_100053EF
		push	ebx
		call	PORT_Free_Util
		pop	ecx
		jmp	loc_100053EF
; ---------------------------------------------------------------------------

loc_1000549E:				; CODE XREF: sub_10005372+FFj
					; sub_10005372+116j
		push	[esp+54h+var_38]
		call	sub_100078AC
		pop	ecx
		test	eax, eax
		jz	short loc_100054BD
		push	esi
		push	eax
		call	sub_1000210B
		pop	ecx
		pop	ecx
		test	eax, eax
		jz	short loc_100054BD
		lea	ebp, [esp+54h+var_1C]

loc_100054BD:				; CODE XREF: sub_10005372+138j
					; sub_10005372+145j
		cmp	[esp+54h+var_44], edi
		jnz	short loc_100054DD
		test	ebp, ebp
		jnz	short loc_100054CB
		lea	ebp, [esp+54h+var_10]

loc_100054CB:				; CODE XREF: sub_10005372+153j
		push	ebp		; Origin
		mov	ebp, [esp+58h+File]
		push	ebx
		push	esi		; Offset
		push	ebp		; File
		call	__fseeki64
		add	esp, 10h
		jmp	short loc_100054F0
; ---------------------------------------------------------------------------

loc_100054DD:				; CODE XREF: sub_10005372+14Fj
		test	ebp, ebp
		jz	short loc_100054F6
		push	ebp
		mov	ebp, [esp+58h+File]
		push	esi
		push	ebp
		call	sub_1000C05A
		add	esp, 0Ch

loc_100054F0:				; CODE XREF: sub_10005372+169j
		mov	[esp+54h+var_44], eax
		jmp	short loc_100054FE
; ---------------------------------------------------------------------------

loc_100054F6:				; CODE XREF: sub_10005372+16Dj
		mov	ebp, [esp+54h+File]
		mov	[esp+54h+var_44], edi

loc_100054FE:				; CODE XREF: sub_10005372+182j
		test	ebx, ebx
		jz	short loc_10005509
		push	ebx
		call	PORT_Free_Util
		pop	ecx

loc_10005509:				; CODE XREF: sub_10005372+18Ej
		cmp	[esp+54h+var_44], edi
		jz	short loc_10005514
		push	30h
		pop	edi
		jmp	short loc_10005577
; ---------------------------------------------------------------------------

loc_10005514:				; CODE XREF: sub_10005372+19Bj
		push	[esp+54h+var_40]
		push	[esp+58h+var_30]
		push	0CE534352h
		call	sub_10007E54
		mov	ebx, eax
		add	esp, 0Ch
		test	ebx, ebx
		jz	short loc_1000555C
		push	ebx		; char *
		push	ebp		; int
		call	sub_1000C933
		pop	ecx
		pop	ecx
		test	eax, eax
		jnz	short loc_1000554E
		push	edi
		push	edi
		lea	eax, [esi+38h]
		push	eax
		push	ebx
		push	ebp
		call	sub_1000CA0F
		add	esp, 14h
		jmp	short loc_10005555
; ---------------------------------------------------------------------------

loc_1000554E:				; CODE XREF: sub_10005372+1C8j
		push	eax		; void *
		call	sub_1000C1B7
		pop	ecx

loc_10005555:				; CODE XREF: sub_10005372+1DAj
		push	ebx
		call	PORT_Free_Util
		pop	ecx

loc_1000555C:				; CODE XREF: sub_10005372+1BBj
		push	38000000h
		lea	eax, [esi+54h]
		push	eax
		push	[esp+5Ch+var_38]
		call	sub_10007EF9
		mov	ecx, [esp+60h+var_2C]
		add	esp, 0Ch
		mov	[ecx], eax

loc_10005577:				; CODE XREF: sub_10005372+1A0j
		push	esi		; void *
		call	sub_1000C1A9
		pop	ecx
		mov	eax, edi

loc_10005580:				; CODE XREF: sub_10005372+80j
					; sub_10005372+9Ej ...
		mov	ecx, [esp+54h+var_4]
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 44h
		retn
sub_10005372	endp


; =============== S U B	R O U T	I N E =======================================


sub_10005593	proc near		; CODE XREF: sub_100051CA+6Ap

var_18		= byte ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= byte ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 18h
		push	ebx
		push	esi
		push	edi
		push	[esp+24h+arg_0]
		call	sub_100078A3
		mov	esi, [esp+28h+arg_C]
		mov	ebx, eax
		mov	edi, [esp+28h+arg_8]
		push	esi
		push	edi
		push	2
		call	sub_10007EC2
		add	esp, 10h
		test	eax, eax
		jz	short loc_100055C4

loc_100055BC:				; CODE XREF: sub_10005593+52j
					; sub_10005593+72j
		push	13h

loc_100055BE:				; CODE XREF: sub_10005593+C8j
		pop	eax
		jmp	loc_10005696
; ---------------------------------------------------------------------------

loc_100055C4:				; CODE XREF: sub_10005593+27j
		test	ebx, ebx
		jnz	short loc_100055D2
		mov	eax, 0E2h
		jmp	loc_10005696
; ---------------------------------------------------------------------------

loc_100055D2:				; CODE XREF: sub_10005593+33j
		push	esi
		push	edi
		push	101h
		call	sub_10007C17
		mov	ecx, eax
		add	esp, 0Ch
		test	ecx, ecx
		jz	short loc_100055BC
		mov	eax, [ecx+4]
		push	esi
		mov	[esp+28h+var_14], eax
		mov	eax, [ecx+8]
		push	edi
		push	11h
		mov	[esp+30h+var_10], eax
		call	sub_10007C17
		mov	ecx, eax
		add	esp, 0Ch
		test	ecx, ecx
		jz	short loc_100055BC
		mov	eax, [ecx+4]
		push	ebp
		push	esi
		mov	[esp+2Ch+var_8], eax
		mov	eax, [ecx+8]
		push	edi
		push	0CE534351h
		mov	[esp+34h+var_4], eax
		call	sub_10007E54
		push	esi
		push	edi
		push	0CE534358h
		mov	ebp, eax
		call	sub_10007EC2
		mov	edi, eax
		lea	eax, [esp+40h+var_18]
		push	edi
		push	ebp
		push	eax
		lea	eax, [esp+4Ch+var_C]
		push	eax
		push	ebx
		call	sub_1000BF42
		add	esp, 2Ch
		mov	esi, eax
		test	ebp, ebp
		jz	short loc_10005654
		push	ebp
		call	PORT_Free_Util
		pop	ecx

loc_10005654:				; CODE XREF: sub_10005593+B8j
		pop	ebp
		test	esi, esi
		jz	short loc_10005660
		push	30h
		jmp	loc_100055BE
; ---------------------------------------------------------------------------

loc_10005660:				; CODE XREF: sub_10005593+C4j
		xor	ebx, ebx
		lea	eax, [esp+24h+var_18]
		test	edi, edi
		setnz	bl
		add	ebx, 28000000h
		push	ebx
		push	eax
		push	[esp+2Ch+arg_0]
		call	sub_10007FA5
		push	ebx
		lea	eax, [esp+34h+var_18]
		push	eax
		push	[esp+38h+arg_0]
		call	sub_10007EF9
		mov	ecx, [esp+3Ch+arg_4]
		add	esp, 18h
		mov	[ecx], eax
		xor	eax, eax

loc_10005696:				; CODE XREF: sub_10005593+2Cj
					; sub_10005593+3Aj
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 18h
		retn
sub_10005593	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_1000569D	proc near		; CODE XREF: sub_100051CA+7Ap

var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		push	ecx
		lea	eax, [ebp+var_4]
		push	eax
		push	[ebp+arg_10]
		push	[ebp+arg_C]
		push	100h
		call	sub_10007C40
		add	esp, 10h
		test	eax, eax
		jnz	short loc_10005711
		mov	eax, [ebp+arg_4]
		dec	eax
		dec	eax
		jz	short loc_100056FA
		dec	eax
		jz	short loc_100056E4
		dec	eax
		jz	short loc_100056CE
		push	13h
		pop	eax
		jmp	short loc_10005711
; ---------------------------------------------------------------------------

loc_100056CE:				; CODE XREF: sub_1000569D+2Aj
		push	[ebp+arg_10]
		push	[ebp+arg_C]
		push	[ebp+arg_8]
		push	[ebp+var_4]
		push	[ebp+arg_0]
		call	sub_10005B1C
		jmp	short loc_1000570E
; ---------------------------------------------------------------------------

loc_100056E4:				; CODE XREF: sub_1000569D+27j
		push	[ebp+arg_10]
		push	[ebp+arg_C]
		push	[ebp+arg_8]
		push	[ebp+var_4]
		push	[ebp+arg_0]
		call	sub_10005715
		jmp	short loc_1000570E
; ---------------------------------------------------------------------------

loc_100056FA:				; CODE XREF: sub_1000569D+24j
		push	[ebp+arg_10]
		push	[ebp+arg_C]
		push	[ebp+arg_8]
		push	[ebp+var_4]
		push	[ebp+arg_0]
		call	sub_1000582E

loc_1000570E:				; CODE XREF: sub_1000569D+45j
					; sub_1000569D+5Bj
		add	esp, 14h

loc_10005711:				; CODE XREF: sub_1000569D+1Dj
					; sub_1000569D+2Fj
		mov	esp, ebp
		pop	ebp
		retn
sub_1000569D	endp


; =============== S U B	R O U T	I N E =======================================


sub_10005715	proc near		; CODE XREF: sub_1000569D+56p

var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= byte ptr -0Ch
var_8		= dword	ptr -8
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		sub	esp, 14h
		push	[esp+14h+arg_0]
		mov	[esp+18h+var_14], 30h
		call	sub_100078AC
		mov	[esp+18h+var_10], eax
		pop	ecx
		test	eax, eax
		jnz	short loc_1000573C
		mov	eax, 0E2h
		jmp	loc_1000582A
; ---------------------------------------------------------------------------

loc_1000573C:				; CODE XREF: sub_10005715+1Bj
		push	ebx
		lea	eax, [esp+18h+var_14]
		push	eax
		push	[esp+1Ch+arg_4]
		push	[esp+20h+arg_10]
		push	[esp+24h+arg_C]
		push	[esp+28h+arg_0]
		call	sub_10005E7E
		mov	ebx, eax
		add	esp, 14h
		test	ebx, ebx
		jnz	short loc_10005769
		mov	eax, [esp+18h+var_14]
		jmp	loc_10005829
; ---------------------------------------------------------------------------

loc_10005769:				; CODE XREF: sub_10005715+49j
		push	ebp
		push	esi
		push	[esp+20h+arg_10]
		push	[esp+24h+arg_C]
		push	3
		call	sub_10007E54
		mov	ebp, eax
		lea	eax, [esp+2Ch+var_C]
		push	eax
		push	[esp+30h+arg_10]
		push	[esp+34h+arg_C]
		push	0D5A0DB00h
		push	0
		call	sub_10007B27
		add	esp, 20h
		mov	[esp+20h+var_14], eax
		test	eax, eax
		jz	short loc_100057AD
		mov	[esp+20h+var_14], 0D0h
		or	esi, 0FFFFFFFFh
		jmp	short loc_100057DE
; ---------------------------------------------------------------------------

loc_100057AD:				; CODE XREF: sub_10005715+89j
		cmp	[esp+20h+arg_4], 0
		jnz	short loc_100057C5
		lea	eax, [ebx+8]
		push	eax
		call	sub_1000E080
		mov	esi, eax
		pop	ecx
		cmp	esi, 0FFFFFFFFh
		jz	short loc_100057DE

loc_100057C5:				; CODE XREF: sub_10005715+9Dj
		push	[esp+20h+arg_0]
		lea	eax, [esp+24h+var_C]
		push	ebp
		push	eax
		push	ebx
		push	[esp+30h+var_10]
		call	sub_100025C8
		add	esp, 14h
		mov	esi, eax

loc_100057DE:				; CODE XREF: sub_10005715+96j
					; sub_10005715+AEj
		test	ebp, ebp
		jz	short loc_100057E9
		push	ebp
		call	PORT_Free_Util
		pop	ecx

loc_100057E9:				; CODE XREF: sub_10005715+CBj
		push	8000000h
		lea	eax, [esp+24h+var_C]
		push	eax
		push	[esp+28h+arg_0]
		call	sub_10007EF9
		mov	ecx, [esp+2Ch+arg_8]
		add	esp, 0Ch
		cmp	[esp+20h+var_8], 0
		mov	[ecx], eax
		jz	short loc_10005816
		push	[esp+20h+var_8]
		call	PORT_Free_Util
		pop	ecx

loc_10005816:				; CODE XREF: sub_10005715+F5j
		push	ebx
		call	sub_10008EB7
		neg	esi
		pop	ecx
		sbb	esi, esi
		and	esi, [esp+20h+var_14]
		mov	eax, esi
		pop	esi
		pop	ebp

loc_10005829:				; CODE XREF: sub_10005715+4Fj
		pop	ebx

loc_1000582A:				; CODE XREF: sub_10005715+22j
		add	esp, 14h
		retn
sub_10005715	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000582E	proc near		; CODE XREF: sub_1000569D+6Cp

var_4C		= dword	ptr -4Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= byte ptr -18h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		sub	esp, 38h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+38h+var_4], eax
		mov	eax, [esp+38h+arg_0]
		xor	edx, edx
		mov	ecx, [esp+38h+arg_C]
		push	ebx
		push	ebp
		mov	ebp, [esp+40h+arg_4]
		mov	ebx, edx
		mov	[esp+40h+var_2C], eax
		mov	eax, [esp+40h+arg_8]
		mov	[esp+40h+var_1C], eax
		mov	[esp+40h+var_38], edx
		mov	[esp+40h+var_34], edx
		mov	[esp+40h+var_30], edx
		mov	[esp+40h+var_28], edx
		mov	[esp+40h+var_24], edx
		mov	[esp+40h+var_20], edx
		push	edi
		push	11h
		pop	eax
		push	2
		pop	edi
		test	ebp, ebp
		jz	short loc_10005895
		cmp	ebp, edi
		jbe	short loc_1000589A
		cmp	ebp, 3
		jnz	short loc_1000588D
		mov	eax, 181h
		jmp	short loc_1000589A
; ---------------------------------------------------------------------------

loc_1000588D:				; CODE XREF: sub_1000582E+56j
		push	13h
		pop	eax
		jmp	loc_100059C2
; ---------------------------------------------------------------------------

loc_10005895:				; CODE XREF: sub_1000582E+4Dj
		mov	eax, 120h

loc_1000589A:				; CODE XREF: sub_1000582E+51j
					; sub_1000582E+5Dj
		push	esi
		lea	esi, [esp+48h+var_38]
		mov	edx, esi
		push	edx
		push	[esp+4Ch+arg_10]
		push	ecx
		push	eax
		push	0
		call	sub_10007B27
		add	esp, 14h
		test	eax, eax
		jnz	loc_100059C1
		cmp	ebp, 3
		jnz	short loc_10005907
		push	800h
		call	PORT_NewArena_Util
		mov	ebx, eax
		pop	ecx
		test	ebx, ebx
		jz	loc_100059A7
		mov	eax, esi
		push	eax
		push	0
		push	0
		call	NSS_Get_SEC_OctetStringTemplate_Util
		pop	ecx
		pop	ecx
		push	eax
		lea	eax, [esp+50h+var_28]
		push	eax
		push	ebx
		call	SEC_QuickDERDecodeItem_Util
		add	esp, 10h
		test	eax, eax
		jz	short loc_10005903
		push	0
		push	ebx
		call	PORT_FreeArena_Util
		pop	ecx
		pop	ecx
		xor	ebx, ebx
		jmp	short loc_10005907
; ---------------------------------------------------------------------------

loc_10005903:				; CODE XREF: sub_1000582E+C5j
		lea	esi, [esp+48h+var_28]

loc_10005907:				; CODE XREF: sub_1000582E+8Fj
					; sub_1000582E+D3j
		cmp	dword ptr [esi+4], 0
		jnz	short loc_10005915

loc_1000590D:				; CODE XREF: sub_1000582E+143j
					; sub_1000582E+158j
		push	13h
		pop	edi
		jmp	loc_100059A7
; ---------------------------------------------------------------------------

loc_10005915:				; CODE XREF: sub_1000582E+DDj
		mov	ebp, [esp+48h+var_2C]
		push	ebp
		call	sub_100078AC
		mov	edi, eax
		pop	ecx
		test	edi, edi
		jnz	short loc_1000592D
		mov	edi, 0E2h
		jmp	short loc_100059A7
; ---------------------------------------------------------------------------

loc_1000592D:				; CODE XREF: sub_1000582E+F6j
		cmp	dword ptr [edi+0Ch], 3
		jz	short loc_1000595C
		push	dword ptr [esi+8]
		lea	eax, [esp+4Ch+var_18]
		push	dword ptr [esi+4]
		push	eax
		call	sub_1000E0C0
		push	14h		; size_t
		lea	eax, [esp+58h+var_18]
		push	eax		; void *
		push	dword ptr [esi+4] ; void *
		call	memcpy
		add	esp, 18h
		mov	dword ptr [esi+8], 14h

loc_1000595C:				; CODE XREF: sub_1000582E+103j
		push	ebp
		push	esi
		push	edi
		call	sub_10001F28
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_10005988
		lea	eax, [esp+48h+var_28]
		cmp	esi, eax
		jnz	short loc_1000590D
		lea	esi, [esp+48h+var_38]
		push	ebp
		mov	eax, esi
		push	eax
		push	edi
		call	sub_10001F28
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_1000590D

loc_10005988:				; CODE XREF: sub_1000582E+13Bj
		push	eax
		call	sub_10008EB7
		mov	[esp+4Ch+var_4C], 10000000h
		xor	edi, edi
		push	esi
		push	ebp
		call	sub_10007EF9
		mov	ecx, [esp+54h+var_1C]
		add	esp, 0Ch
		mov	[ecx], eax

loc_100059A7:				; CODE XREF: sub_1000582E+A0j
					; sub_1000582E+E2j ...
		push	[esp+48h+var_34]
		call	PORT_Free_Util
		pop	ecx
		test	ebx, ebx
		jz	short loc_100059BF
		push	0
		push	ebx
		call	PORT_FreeArena_Util
		pop	ecx
		pop	ecx

loc_100059BF:				; CODE XREF: sub_1000582E+185j
		mov	eax, edi

loc_100059C1:				; CODE XREF: sub_1000582E+86j
		pop	esi

loc_100059C2:				; CODE XREF: sub_1000582E+62j
		mov	ecx, [esp+44h+var_4]
		pop	edi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 38h
		retn
sub_1000582E	endp


; =============== S U B	R O U T	I N E =======================================


sub_100059D4	proc near		; CODE XREF: sub_100051CA+5Bp

var_4C		= dword	ptr -4Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= byte ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 38h
		push	ebx
		push	ebp
		mov	ebp, [esp+40h+arg_8]
		xor	ebx, ebx
		push	esi
		push	edi
		mov	edi, [esp+48h+arg_C]
		mov	esi, ebx
		push	edi
		push	ebp
		push	2
		mov	[esp+54h+var_38], ebx
		call	sub_10007EC2
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_10005A03
		push	13h
		pop	eax
		jmp	loc_10005B14
; ---------------------------------------------------------------------------

loc_10005A03:				; CODE XREF: sub_100059D4+25j
		push	[esp+48h+arg_0]
		call	sub_100078A3
		mov	[esp+4Ch+var_34], eax
		pop	ecx
		test	eax, eax
		jnz	short loc_10005A1F
		mov	eax, 0E2h
		jmp	loc_10005B14
; ---------------------------------------------------------------------------

loc_10005A1F:				; CODE XREF: sub_100059D4+3Fj
		push	edi
		push	ebp
		push	101h
		call	sub_10007C17
		mov	ecx, eax
		add	esp, 0Ch
		test	ecx, ecx
		jnz	short loc_10005A3C

loc_10005A34:				; CODE XREF: sub_100059D4+E4j
		push	13h
		pop	esi
		jmp	loc_10005B12
; ---------------------------------------------------------------------------

loc_10005A3C:				; CODE XREF: sub_100059D4+5Ej
		mov	eax, [ecx+4]
		push	edi
		mov	[esp+4Ch+var_14], eax
		mov	eax, [ecx+8]
		push	ebp
		push	11h
		mov	[esp+54h+var_10], eax
		mov	[esp+54h+var_18], ebx
		call	sub_10007C17
		mov	ecx, eax
		add	esp, 0Ch
		test	ecx, ecx
		jz	short loc_10005A7A
		mov	eax, [ecx+4]
		mov	[esp+48h+var_2C], eax
		mov	eax, [ecx+8]
		mov	[esp+48h+var_28], eax
		lea	eax, [esp+48h+var_30]
		mov	[esp+48h+var_30], ebx
		mov	[esp+48h+var_38], eax

loc_10005A7A:				; CODE XREF: sub_100059D4+8Aj
		push	edi
		push	ebp
		push	0CE534354h
		call	sub_10007C17
		mov	ecx, eax
		add	esp, 0Ch
		test	ecx, ecx
		jz	short loc_10005AA5
		mov	eax, [ecx+4]
		mov	[esp+48h+var_20], eax
		mov	eax, [ecx+8]
		mov	[esp+48h+var_24], ebx
		lea	ebx, [esp+48h+var_24]
		mov	[esp+48h+var_1C], eax

loc_10005AA5:				; CODE XREF: sub_100059D4+B9j
		push	edi
		push	ebp
		push	0CE534352h
		call	sub_10007E54
		mov	edi, eax
		add	esp, 0Ch
		test	edi, edi
		jz	loc_10005A34
		push	ebx
		push	[esp+4Ch+var_38]
		lea	eax, [esp+50h+var_18]
		push	eax
		push	edi
		push	[esp+58h+var_34]
		call	sub_1000CA0F
		add	esp, 14h
		test	eax, eax
		jz	short loc_10005ADE
		push	30h
		pop	esi
		jmp	short loc_10005B0B
; ---------------------------------------------------------------------------

loc_10005ADE:				; CODE XREF: sub_100059D4+103j
		push	edi		; char *
		mov	[esp+4Ch+var_8], edi
		call	strlen
		inc	eax
		mov	[esp+4Ch+var_4C], 30000000h
		mov	[esp+4Ch+var_4], eax
		lea	eax, [esp+4Ch+var_C]
		push	eax
		push	[esp+50h+arg_0]
		call	sub_10007EF9
		mov	ecx, [esp+54h+arg_4]
		add	esp, 0Ch
		mov	[ecx], eax

loc_10005B0B:				; CODE XREF: sub_100059D4+108j
		push	edi
		call	PORT_Free_Util
		pop	ecx

loc_10005B12:				; CODE XREF: sub_100059D4+63j
		mov	eax, esi

loc_10005B14:				; CODE XREF: sub_100059D4+2Aj
					; sub_100059D4+46j
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 38h
		retn
sub_100059D4	endp


; =============== S U B	R O U T	I N E =======================================


sub_10005B1C	proc near		; CODE XREF: sub_1000569D+40p

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		sub	esp, 10h
		push	esi
		push	[esp+14h+arg_0]
		xor	esi, esi
		mov	[esp+18h+var_8], esi
		call	sub_100078AC
		mov	[esp+18h+var_10], eax
		pop	ecx
		test	eax, eax
		jnz	short loc_10005B42
		mov	eax, 0E2h
		jmp	loc_10005C3A
; ---------------------------------------------------------------------------

loc_10005B42:				; CODE XREF: sub_10005B1C+1Aj
		push	ebp
		push	edi
		push	[esp+1Ch+arg_10]
		push	[esp+20h+arg_C]
		push	3
		call	sub_10007E54
		mov	ebp, eax
		lea	eax, [esp+28h+var_C]
		push	eax
		push	[esp+2Ch+arg_10]
		push	[esp+30h+arg_C]
		push	102h
		push	esi
		call	sub_10007B82
		mov	edi, eax
		add	esp, 20h
		test	edi, edi
		jnz	loc_10005C0F
		cmp	[esp+1Ch+var_4], esi
		jnz	short loc_10005BAC
		cmp	[esp+1Ch+var_8], esi
		jz	short loc_10005B94
		push	[esp+1Ch+var_8]
		call	PORT_Free_Util
		pop	ecx
		mov	[esp+1Ch+var_8], esi

loc_10005B94:				; CODE XREF: sub_10005B1C+68j
		push	ebp		; char *
		lea	eax, [esp+20h+var_C]
		push	eax		; int
		push	[esp+24h+var_10] ; int
		call	sub_10005269
		mov	edi, eax
		add	esp, 0Ch
		test	edi, edi
		jnz	short loc_10005C0F

loc_10005BAC:				; CODE XREF: sub_10005B1C+62j
		push	[esp+1Ch+arg_0]
		lea	eax, [esp+20h+var_C]
		push	eax
		push	[esp+24h+arg_4]
		push	[esp+28h+arg_10]
		push	[esp+2Ch+arg_C]
		call	sub_10006254
		mov	esi, eax
		add	esp, 14h
		test	esi, esi
		jnz	short loc_10005BD4
		push	2

loc_10005BD1:				; CODE XREF: sub_10005B1C+D5j
		pop	edi
		jmp	short loc_10005C0F
; ---------------------------------------------------------------------------

loc_10005BD4:				; CODE XREF: sub_10005B1C+B1j
		push	[esp+1Ch+arg_0]
		lea	eax, [esp+20h+var_C]
		push	ebp
		push	eax
		push	esi
		push	[esp+2Ch+var_10]
		call	sub_100025C8
		add	esp, 14h
		test	eax, eax
		jz	short loc_10005BF3
		push	30h
		jmp	short loc_10005BD1
; ---------------------------------------------------------------------------

loc_10005BF3:				; CODE XREF: sub_10005B1C+D1j
		push	18000000h
		lea	eax, [esp+20h+var_C]
		push	eax
		push	[esp+24h+arg_0]
		call	sub_10007EF9
		mov	ecx, [esp+28h+arg_8]
		add	esp, 0Ch
		mov	[ecx], eax

loc_10005C0F:				; CODE XREF: sub_10005B1C+58j
					; sub_10005B1C+8Ej ...
		test	ebp, ebp
		jz	short loc_10005C1A
		push	ebp
		call	PORT_Free_Util
		pop	ecx

loc_10005C1A:				; CODE XREF: sub_10005B1C+F5j
		test	esi, esi
		jz	short loc_10005C25
		push	esi
		call	sub_10008EB7
		pop	ecx

loc_10005C25:				; CODE XREF: sub_10005B1C+100j
		cmp	[esp+1Ch+var_8], 0
		jz	short loc_10005C36
		push	[esp+1Ch+var_8]
		call	PORT_Free_Util
		pop	ecx

loc_10005C36:				; CODE XREF: sub_10005B1C+10Ej
		mov	eax, edi
		pop	edi
		pop	ebp

loc_10005C3A:				; CODE XREF: sub_10005B1C+21j
		pop	esi
		add	esp, 10h
		retn
sub_10005B1C	endp


; =============== S U B	R O U T	I N E =======================================


sub_10005C3F	proc near		; CODE XREF: sub_100051CA+4Cp

var_49		= byte ptr -49h
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= byte ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 4Ch
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+4Ch+var_4], eax
		mov	ecx, [esp+4Ch+arg_4]
		mov	eax, [esp+4Ch+arg_0]
		push	ebp
		mov	[esp+50h+var_30], ecx
		mov	ecx, 0CE534355h
		push	esi
		mov	esi, [esp+54h+arg_8]
		push	edi
		mov	edi, [esp+58h+arg_C]
		mov	[esp+58h+var_3C], ecx
		mov	[esp+58h+var_38], ecx
		mov	[esp+58h+var_44], ecx
		mov	[esp+58h+var_40], ecx
		xor	ecx, ecx
		push	eax
		mov	[esp+5Ch+var_2C], eax
		mov	[esp+5Ch+var_10], ecx
		mov	[esp+5Ch+var_C], ecx
		mov	[esp+5Ch+var_8], ecx
		call	sub_100078A3
		push	edi
		mov	ebp, eax
		push	esi
		push	2
		mov	[esp+68h+var_34], ebp
		call	sub_10007EC2
		add	esp, 10h
		test	eax, eax
		jz	short loc_10005CAF
		push	13h
		pop	eax
		jmp	loc_10005E6C
; ---------------------------------------------------------------------------

loc_10005CAF:				; CODE XREF: sub_10005C3F+66j
		test	ebp, ebp
		jnz	short loc_10005CBD
		mov	eax, 0E2h
		jmp	loc_10005E6C
; ---------------------------------------------------------------------------

loc_10005CBD:				; CODE XREF: sub_10005C3F+72j
		push	ebx
		push	edi
		push	esi
		push	81h
		call	sub_10007C17
		push	edi
		push	esi
		push	82h
		mov	ebx, eax
		call	sub_10007C17
		add	esp, 18h
		mov	edx, eax
		test	ebx, ebx
		jz	loc_10005E68
		test	edx, edx
		jz	loc_10005E68
		mov	ecx, [ebx+4]
		mov	[esp+5Ch+var_24], ecx
		mov	ecx, [ebx+8]
		mov	[esp+5Ch+var_20], ecx
		mov	eax, [edx+4]
		mov	[esp+5Ch+var_18], eax
		mov	eax, [edx+8]
		mov	[esp+5Ch+var_14], eax
		lea	eax, [esp+5Ch+var_28]
		push	eax
		push	ebp
		call	sub_1000C399
		mov	ebx, eax
		pop	ecx
		pop	ecx
		test	ebx, ebx
		jz	loc_10005E68
		lea	eax, [esp+5Ch+var_3C]
		push	eax
		push	edi
		push	esi
		push	0CE536358h
		call	sub_10007C40
		lea	eax, [esp+6Ch+var_38]
		push	eax
		push	edi
		push	esi
		push	0CE536359h
		call	sub_10007C40
		lea	eax, [esp+7Ch+var_44]
		push	eax
		push	edi
		push	esi
		push	0CE53635Bh
		call	sub_10007C40
		lea	eax, [esp+8Ch+var_40]
		push	eax
		push	edi
		push	esi
		push	0CE53635Ah
		call	sub_10007C40
		add	esp, 40h
		mov	[esp+5Ch+var_49], 0
		push	edi
		push	esi
		push	0CE536360h
		call	sub_10007C17
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_10005D8E
		cmp	dword ptr [eax+8], 1
		jnz	short loc_10005D8E
		mov	eax, [eax+4]
		mov	al, [eax]
		mov	[esp+5Ch+var_49], al

loc_10005D8E:				; CODE XREF: sub_10005C3F+13Ej
					; sub_10005C3F+144j
		mov	edi, [ebx+90h]
		test	edi, edi
		jz	short loc_10005DC1
		mov	edi, [edi]
		mov	ecx, 368h
		and	edi, ecx
		mov	[esp+5Ch+var_10], edi
		mov	eax, [ebx+90h]
		mov	ebp, [eax+4]
		and	ebp, ecx
		mov	[esp+5Ch+var_C], ebp
		mov	eax, [ebx+90h]
		mov	eax, [eax+8]
		and	eax, ecx
		jmp	short loc_10005DCD
; ---------------------------------------------------------------------------

loc_10005DC1:				; CODE XREF: sub_10005C3F+157j
		mov	eax, [esp+5Ch+var_8]
		mov	ebp, [esp+5Ch+var_C]
		mov	edi, [esp+5Ch+var_10]

loc_10005DCD:				; CODE XREF: sub_10005C3F+180j
		push	1
		push	[esp+60h+var_38]
		mov	[esp+64h+var_48], eax
		call	sub_1000531B
		push	0
		push	[esp+68h+var_3C]
		mov	esi, eax
		call	sub_1000531B
		or	esi, eax
		push	0
		push	[esp+70h+var_44]
		or	edi, esi
		mov	[esp+74h+var_10], edi
		call	sub_1000531B
		push	0
		push	[esp+78h+var_40]
		or	ebp, eax
		mov	[esp+7Ch+var_C], ebp
		call	sub_1000531B
		mov	ecx, [esp+7Ch+var_48]
		add	esp, 20h
		or	ecx, eax
		cmp	[esp+5Ch+var_49], 0
		mov	[esp+5Ch+var_8], ecx
		jz	short loc_10005E2B
		or	edi, 200h
		mov	[esp+5Ch+var_10], edi

loc_10005E2B:				; CODE XREF: sub_10005C3F+1E0j
		lea	eax, [esp+5Ch+var_10]
		push	eax
		push	ebx
		push	[esp+64h+var_34]
		call	sub_1000C05A
		push	20000000h
		lea	ecx, [ebx+54h]
		mov	esi, eax
		push	ecx
		push	[esp+70h+var_2C]
		call	sub_10007EF9
		mov	ecx, [esp+74h+var_30]
		push	ebx		; void *
		mov	[ecx], eax
		call	sub_1000C1A9
		add	esp, 1Ch
		neg	esi
		sbb	esi, esi
		and	esi, 30h
		mov	eax, esi
		jmp	short loc_10005E6B
; ---------------------------------------------------------------------------

loc_10005E68:				; CODE XREF: sub_10005C3F+A0j
					; sub_10005C3F+A8j ...
		push	13h
		pop	eax

loc_10005E6B:				; CODE XREF: sub_10005C3F+227j
		pop	ebx

loc_10005E6C:				; CODE XREF: sub_10005C3F+6Bj
					; sub_10005C3F+79j
		mov	ecx, [esp+58h+var_4]
		pop	edi
		pop	esi
		pop	ebp
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 4Ch
		retn
sub_10005C3F	endp


; =============== S U B	R O U T	I N E =======================================


sub_10005E7E	proc near		; CODE XREF: sub_10005715+3Dp

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	ebx
		push	800h
		call	PORT_NewArena_Util
		mov	ebx, eax
		pop	ecx
		test	ebx, ebx
		jnz	short loc_10005E9E
		mov	eax, [esp+4+arg_10]
		pop	ebx
		mov	dword ptr [eax], 2
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_10005E9E:				; CODE XREF: sub_10005E7E+10j
		push	edi
		push	0B0h
		push	ebx
		call	PORT_ArenaZAlloc_Util
		mov	edi, eax
		pop	ecx
		pop	ecx
		test	edi, edi
		jnz	short loc_10005EC8
		push	eax
		push	ebx
		call	PORT_FreeArena_Util
		mov	eax, [esp+10h+arg_10]
		mov	dword ptr [eax], 2
		jmp	loc_10006249
; ---------------------------------------------------------------------------

loc_10005EC8:				; CODE XREF: sub_10005E7E+32j
		mov	eax, [esp+8+arg_C]
		mov	[edi], ebx
		push	ebp
		push	esi
		sub	eax, 0
		jz	loc_10006104
		dec	eax
		jz	loc_1000603C
		dec	eax
		jz	loc_10005FAA
		dec	eax
		jz	short loc_10005EF1
		push	63h
		jmp	loc_10006234
; ---------------------------------------------------------------------------

loc_10005EF1:				; CODE XREF: sub_10005E7E+6Aj
		lea	ebp, [edi+70h]
		mov	dword ptr [edi+4], 5
		push	ebp
		push	[esp+14h+arg_8]
		push	[esp+18h+arg_4]
		push	180h
		push	ebx
		call	sub_10007B27
		mov	esi, eax
		add	esp, 14h
		test	esi, esi
		jnz	loc_10006235
		lea	eax, [edi+8]
		push	eax
		push	ebp
		push	ebx
		call	sub_10008C6A
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_10005F38
		mov	esi, 130h
		jmp	loc_10006235
; ---------------------------------------------------------------------------

loc_10005F38:				; CODE XREF: sub_10005E7E+AEj
		push	[esp+10h+arg_0]
		lea	eax, [edi+98h]
		push	eax
		push	[esp+18h+arg_8]
		push	[esp+1Ch+arg_4]
		push	11h
		push	ebx
		call	sub_10007C94
		mov	esi, eax
		add	esp, 18h
		test	esi, esi
		jnz	loc_10006235
		push	[esp+10h+arg_8]
		mov	ebp, 0D5A0DB00h
		push	[esp+14h+arg_4]
		push	ebp
		call	sub_10007EA7
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_10005F9D
		lea	eax, [edi+8Ch]
		push	eax
		push	[esp+14h+arg_8]
		push	[esp+18h+arg_4]
		push	ebp
		push	ebx
		call	sub_10007B27
		mov	esi, eax
		add	esp, 14h
		test	esi, esi
		jnz	loc_10006235

loc_10005F9D:				; CODE XREF: sub_10005E7E+FAj
		push	1
		lea	eax, [edi+0A4h]
		jmp	loc_10006223
; ---------------------------------------------------------------------------

loc_10005FAA:				; CODE XREF: sub_10005E7E+63j
		mov	ebp, [esp+10h+arg_8]
		lea	eax, [edi+0Ch]
		push	eax
		push	ebp
		push	[esp+18h+arg_4]
		mov	dword ptr [edi+4], 4
		push	130h
		push	ebx
		call	sub_10007B27
		mov	esi, eax
		add	esp, 14h
		test	esi, esi
		jnz	loc_10006235
		lea	eax, [edi+18h]
		push	eax
		push	ebp
		push	[esp+18h+arg_4]
		push	132h
		push	ebx
		call	sub_10007B27
		mov	esi, eax
		add	esp, 14h
		test	esi, esi
		jnz	loc_10006235
		push	[esp+10h+arg_0]
		lea	eax, [edi+30h]
		push	eax
		push	ebp
		push	[esp+1Ch+arg_4]
		push	11h
		push	ebx
		call	sub_10007C94
		mov	esi, eax
		add	esp, 18h
		test	esi, esi
		jnz	loc_10006235
		push	ebp
		push	[esp+14h+arg_4]
		mov	ebp, 0D5A0DB00h
		push	ebp
		call	sub_10007EA7
		add	esp, 0Ch
		test	eax, eax
		jz	loc_10006235
		lea	eax, [edi+24h]
		jmp	loc_100060EA
; ---------------------------------------------------------------------------

loc_1000603C:				; CODE XREF: sub_10005E7E+5Cj
		mov	ebp, [esp+10h+arg_8]
		lea	eax, [edi+0Ch]
		push	eax
		push	ebp
		push	[esp+18h+arg_4]
		mov	dword ptr [edi+4], 2
		push	130h
		push	ebx
		call	sub_10007B27
		mov	esi, eax
		add	esp, 14h
		test	esi, esi
		jnz	loc_10006235
		lea	eax, [edi+18h]
		push	eax
		push	ebp
		push	[esp+18h+arg_4]
		push	131h
		push	ebx
		call	sub_10007B27
		mov	esi, eax
		add	esp, 14h
		test	esi, esi
		jnz	loc_10006235
		lea	eax, [edi+24h]
		push	eax
		push	ebp
		push	[esp+18h+arg_4]
		push	132h
		push	ebx
		call	sub_10007B27
		mov	esi, eax
		add	esp, 14h
		test	esi, esi
		jnz	loc_10006235
		push	[esp+10h+arg_0]
		lea	eax, [edi+3Ch]
		push	eax
		push	ebp
		push	[esp+1Ch+arg_4]
		push	11h
		push	ebx
		call	sub_10007C94
		mov	esi, eax
		add	esp, 18h
		test	esi, esi
		jnz	loc_10006235
		push	ebp
		push	[esp+14h+arg_4]
		mov	ebp, 0D5A0DB00h
		push	ebp
		call	sub_10007EA7
		add	esp, 0Ch
		test	eax, eax
		jz	loc_10006235
		lea	eax, [edi+30h]

loc_100060EA:				; CODE XREF: sub_10005E7E+1B9j
		push	eax
		push	[esp+14h+arg_8]
		push	[esp+18h+arg_4]
		push	ebp
		push	ebx
		call	sub_10007B27
		add	esp, 14h
		mov	esi, eax
		jmp	loc_10006235
; ---------------------------------------------------------------------------

loc_10006104:				; CODE XREF: sub_10005E7E+55j
		mov	ebp, [esp+10h+arg_8]
		lea	eax, [edi+18h]
		push	eax
		push	ebp
		push	[esp+18h+arg_4]
		mov	dword ptr [edi+4], 1
		push	120h
		push	ebx
		call	sub_10007B27
		mov	esi, eax
		add	esp, 14h
		test	esi, esi
		jnz	loc_10006235
		lea	eax, [edi+24h]
		push	eax
		push	ebp
		push	[esp+18h+arg_4]
		push	122h
		push	ebx
		call	sub_10007B27
		mov	esi, eax
		add	esp, 14h
		test	esi, esi
		jnz	loc_10006235
		push	[esp+10h+arg_0]
		lea	eax, [edi+30h]
		push	eax
		push	ebp
		push	[esp+1Ch+arg_4]
		push	123h
		push	ebx
		call	sub_10007C94
		mov	esi, eax
		add	esp, 18h
		test	esi, esi
		jnz	loc_10006235
		push	[esp+10h+arg_0]
		lea	eax, [edi+3Ch]
		push	eax
		push	ebp
		push	[esp+1Ch+arg_4]
		push	124h
		push	ebx
		call	sub_10007C94
		mov	esi, eax
		add	esp, 18h
		test	esi, esi
		jnz	loc_10006235
		push	[esp+10h+arg_0]
		lea	eax, [edi+48h]
		push	eax
		push	ebp
		push	[esp+1Ch+arg_4]
		push	125h
		push	ebx
		call	sub_10007C94
		mov	esi, eax
		add	esp, 18h
		test	esi, esi
		jnz	short loc_10006235
		push	[esp+10h+arg_0]
		lea	eax, [edi+54h]
		push	eax
		push	ebp
		push	[esp+1Ch+arg_4]
		push	126h
		push	ebx
		call	sub_10007C94
		mov	esi, eax
		add	esp, 18h
		test	esi, esi
		jnz	short loc_10006235
		push	[esp+10h+arg_0]
		lea	eax, [edi+60h]
		push	eax
		push	ebp
		push	[esp+1Ch+arg_4]
		push	127h
		push	ebx
		call	sub_10007C94
		mov	esi, eax
		add	esp, 18h
		test	esi, esi
		jnz	short loc_10006235
		push	[esp+10h+arg_0]
		lea	eax, [edi+6Ch]
		push	eax
		push	ebp
		push	[esp+1Ch+arg_4]
		push	128h
		push	ebx
		call	sub_10007C94
		mov	esi, eax
		add	esp, 18h
		test	esi, esi
		jnz	short loc_10006235
		push	eax
		lea	eax, [edi+0Ch]

loc_10006223:				; CODE XREF: sub_10005E7E+127j
		push	eax
		push	dword ptr [edi]
		call	DER_SetUInteger
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_10006235
		push	2

loc_10006234:				; CODE XREF: sub_10005E7E+6Ej
		pop	esi

loc_10006235:				; CODE XREF: sub_10005E7E+98j
					; sub_10005E7E+B5j ...
		mov	eax, [esp+10h+arg_10]
		test	esi, esi
		mov	[eax], esi
		pop	esi
		pop	ebp
		jz	short loc_1000624F
		push	0
		push	ebx
		call	PORT_FreeArena_Util

loc_10006249:				; CODE XREF: sub_10005E7E+45j
		pop	ecx
		pop	ecx
		xor	eax, eax
		jmp	short loc_10006251
; ---------------------------------------------------------------------------

loc_1000624F:				; CODE XREF: sub_10005E7E+3C1j
		mov	eax, edi

loc_10006251:				; CODE XREF: sub_10005E7E+3CFj
		pop	edi
		pop	ebx
		retn
sub_10005E7E	endp


; =============== S U B	R O U T	I N E =======================================


sub_10006254	proc near		; CODE XREF: sub_10005B1C+A5p

var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= byte ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		sub	esp, 14h
		push	ebx
		push	ebp
		push	esi
		push	edi
		push	800h
		call	PORT_NewArena_Util
		mov	edi, eax
		pop	ecx
		test	edi, edi
		jz	loc_1000636B
		push	0B0h
		push	edi
		call	PORT_ArenaZAlloc_Util
		mov	esi, eax
		pop	ecx
		pop	ecx
		test	esi, esi
		jz	loc_1000636B
		mov	ebx, [esp+24h+arg_C]
		xor	ebp, ebp
		inc	ebp
		mov	[esi], edi
		mov	[esi+4], ebp
		push	dword ptr [ebx+8]
		push	edi
		call	PORT_ArenaAlloc_Util
		mov	[esi+1Ch], eax
		pop	ecx
		pop	ecx
		test	eax, eax
		jz	loc_1000636B
		mov	ecx, [ebx+8]
		mov	[esi+20h], ecx
		push	dword ptr [ebx+8] ; size_t
		push	dword ptr [ebx+4] ; void *
		push	eax		; void *
		call	memcpy
		push	[esp+30h+arg_10]
		lea	eax, [esi+30h]
		mov	[esi+2Ch], ebp
		push	eax
		push	[esp+38h+arg_4]
		mov	ebx, offset byte_10015029
		push	[esp+3Ch+arg_0]
		mov	[esi+28h], ebx
		push	11h
		push	edi
		call	sub_10007D33
		add	esp, 24h
		test	eax, eax
		jnz	loc_1000636B
		lea	eax, [esp+24h+var_10]
		mov	[esi+44h], ebp
		push	eax
		push	[esp+28h+arg_4]
		mov	[esi+40h], ebx
		push	[esp+2Ch+arg_0]
		mov	[esi+50h], ebp
		push	100h
		mov	[esi+4Ch], ebx
		mov	[esi+5Ch], ebp
		mov	[esi+58h], ebx
		mov	[esi+68h], ebp
		mov	[esi+64h], ebx
		call	sub_10007C40
		add	esp, 10h
		test	eax, eax
		jnz	short loc_1000636B
		mov	eax, [esp+24h+var_10]
		push	eax
		mov	[esp+28h+var_14], eax
		call	ds:PR_htonl
		mov	[esp+28h+var_14], eax
		lea	eax, [esp+28h+var_14]
		mov	[esp+28h+var_8], eax
		lea	eax, [esp+28h+var_C]
		push	eax
		lea	eax, [esi+6Ch]
		mov	[esp+2Ch+var_4], 4
		push	eax
		push	edi
		call	SECITEM_CopyItem_Util
		add	esp, 10h
		test	eax, eax
		jnz	short loc_1000636B
		push	eax
		lea	eax, [esi+0Ch]
		push	eax
		push	dword ptr [esi]
		call	DER_SetUInteger
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_10006377

loc_1000636B:				; CODE XREF: sub_10006254+16j
					; sub_10006254+2Dj ...
		push	0
		push	edi
		call	PORT_FreeArena_Util
		pop	ecx
		pop	ecx
		xor	esi, esi

loc_10006377:				; CODE XREF: sub_10006254+115j
		pop	edi
		mov	eax, esi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 14h
		retn
sub_10006254	endp


; =============== S U B	R O U T	I N E =======================================


sub_10006381	proc near		; DATA XREF: sub_100078D2+ABo

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 1Ch
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+1Ch+var_4], eax
		push	ebx
		push	ebp
		mov	ebp, [esp+24h+arg_0]
		xor	ebx, ebx
		push	esi
		mov	esi, [esp+28h+arg_4]
		push	edi
		and	esi, 3FFFFFFFh
		push	esi
		push	ebp
		mov	[esp+34h+var_18], esi
		call	sub_10007EE2
		mov	edi, eax
		pop	ecx
		pop	ecx
		test	edi, edi
		jnz	short loc_100063C0
		mov	eax, 82h
		jmp	loc_10006531
; ---------------------------------------------------------------------------

loc_100063C0:				; CODE XREF: sub_10006381+33j
		mov	eax, esi
		mov	ecx, 38000000h
		and	eax, ecx
		cmp	eax, 8000000h
		jz	loc_100064F7
		cmp	eax, 18000000h
		jz	loc_100064F7
		cmp	eax, 20000000h
		jz	loc_1000646A
		cmp	eax, 28000000h
		jz	short loc_10006435
		cmp	eax, ecx
		jnz	loc_10006519
		push	ebp
		call	sub_100078A3
		pop	ecx
		test	eax, eax
		jz	loc_10006502
		push	edi
		push	eax
		call	sub_1000C4AD
		mov	edi, eax
		pop	ecx
		pop	ecx
		test	edi, edi
		jz	loc_10006516
		push	edi
		call	sub_1000C15A
		pop	ecx
		test	eax, eax
		jz	short loc_10006429
		push	30h
		pop	ebx

loc_10006429:				; CODE XREF: sub_10006381+A3j
		push	edi		; void *
		call	sub_1000C1A9
		pop	ecx
		jmp	loc_10006519
; ---------------------------------------------------------------------------

loc_10006435:				; CODE XREF: sub_10006381+6Ej
		push	ebp
		call	sub_100078A3
		pop	ecx
		mov	ecx, eax
		test	ecx, ecx
		jz	loc_10006502
		xor	eax, eax
		cmp	esi, 28000001h
		setz	al
		push	eax
		push	edi
		push	ecx
		call	sub_1000C13C
		add	esp, 0Ch
		cmp	eax, 0FFFFFFFFh
		jnz	loc_10006519
		jmp	loc_10006516
; ---------------------------------------------------------------------------

loc_1000646A:				; CODE XREF: sub_10006381+63j
		push	ebp
		call	sub_100078A3
		mov	[esp+30h+var_1C], eax
		pop	ecx
		test	eax, eax
		jz	loc_10006502
		push	edi
		push	eax
		call	sub_1000C4AD
		mov	[esp+34h+var_14], eax
		pop	ecx
		pop	ecx
		test	eax, eax
		jz	loc_10006516
		mov	esi, [eax+90h]
		lea	edi, [esp+2Ch+var_10]
		movsd
		movsd
		movsd
		mov	edx, [esp+2Ch+var_10]
		mov	esi, 368h
		mov	eax, [esp+2Ch+var_C]
		and	edx, esi
		mov	ecx, [esp+2Ch+var_8]
		and	eax, esi
		and	ecx, esi
		mov	esi, 800h
		or	eax, esi
		or	edx, esi
		mov	[esp+2Ch+var_C], eax
		or	ecx, esi
		mov	esi, [esp+2Ch+var_14]
		lea	eax, [esp+2Ch+var_10]
		push	eax
		push	esi
		push	[esp+34h+var_1C]
		mov	[esp+38h+var_10], edx
		mov	[esp+38h+var_8], ecx
		call	sub_1000C05A
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_100064EA
		push	30h
		pop	ebx

loc_100064EA:				; CODE XREF: sub_10006381+164j
		push	esi		; void *
		call	sub_1000C1A9
		mov	esi, [esp+30h+var_18]
		pop	ecx
		jmp	short loc_10006519
; ---------------------------------------------------------------------------

loc_100064F7:				; CODE XREF: sub_10006381+4Dj
					; sub_10006381+58j
		push	ebp
		call	sub_100078AC
		pop	ecx
		test	eax, eax
		jnz	short loc_10006509

loc_10006502:				; CODE XREF: sub_10006381+81j
					; sub_10006381+BFj ...
		mov	ebx, 0E2h
		jmp	short loc_10006519
; ---------------------------------------------------------------------------

loc_10006509:				; CODE XREF: sub_10006381+17Fj
		push	edi
		push	eax
		call	sub_10001E1C
		pop	ecx
		pop	ecx
		test	eax, eax
		jz	short loc_10006519

loc_10006516:				; CODE XREF: sub_10006381+94j
					; sub_10006381+E4j ...
		push	30h
		pop	ebx

loc_10006519:				; CODE XREF: sub_10006381+72j
					; sub_10006381+AFj ...
		push	ebp
		call	sub_10007688
		push	esi
		push	ebp
		call	sub_10007DFC
		push	ebp
		call	sub_10007699
		add	esp, 10h
		mov	eax, ebx

loc_10006531:				; CODE XREF: sub_10006381+3Aj
		mov	ecx, [esp+2Ch+var_4]
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 1Ch
		retn
sub_10006381	endp


; =============== S U B	R O U T	I N E =======================================


sub_10006544	proc near		; CODE XREF: sub_100067A6+85p
					; sub_100067A6+18Fp ...

arg_0		= dword	ptr  4

		mov	ecx, [esp+arg_0]
		xor	eax, eax
		inc	eax
		cmp	[ecx+4], eax
		jnz	short loc_1000655D
		cmp	[ecx+2Ch], eax
		jnz	short loc_1000655D
		mov	ecx, [ecx+28h]
		cmp	byte ptr [ecx],	0
		jz	short locret_1000655F

loc_1000655D:				; CODE XREF: sub_10006544+Aj
					; sub_10006544+Fj
		xor	eax, eax

locret_1000655F:			; CODE XREF: sub_10006544+17j
		retn
sub_10006544	endp


; =============== S U B	R O U T	I N E =======================================


sub_10006560	proc near		; CODE XREF: sub_100069E5+ADp
					; sub_100069E5+E7p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_4]
		push	esi
		mov	esi, [esp+4+arg_0]
		mov	[esi+8], eax
		test	eax, eax
		jle	short loc_1000657D
		shl	eax, 2
		push	eax
		call	PORT_Alloc_Util
		pop	ecx
		mov	[esi+0Ch], eax

loc_1000657D:				; CODE XREF: sub_10006560+Ej
		pop	esi
		retn
sub_10006560	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_1000657F(int,	int, void *, int, int)
sub_1000657F	proc near		; DATA XREF: sub_100078D2+88o

arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		push	ebx
		mov	ebx, [ebp+arg_10]
		push	esi
		push	edi
		mov	edi, [ebp+arg_4]
		and	dword ptr [ebx], 0
		mov	esi, [edi+4]
		mov	ecx, [edi+8]
		sub	esi, ecx
		cmp	[ebp+arg_C], esi
		jg	short loc_1000659E
		mov	esi, [ebp+arg_C]

loc_1000659E:				; CODE XREF: sub_1000657F+1Aj
		test	esi, esi
		jle	short loc_100065BB
		mov	eax, esi
		shl	eax, 2
		push	eax		; size_t
		mov	eax, [edi]
		lea	eax, [eax+ecx*4]
		push	eax		; void *
		push	[ebp+arg_8]	; void *
		call	memcpy
		add	esp, 0Ch
		jmp	short loc_100065C1
; ---------------------------------------------------------------------------

loc_100065BB:				; CODE XREF: sub_1000657F+21j
		mov	eax, [ebp+arg_8]
		and	dword ptr [eax], 0

loc_100065C1:				; CODE XREF: sub_1000657F+3Aj
		add	[edi+8], esi
		xor	eax, eax
		pop	edi
		mov	[ebx], esi
		pop	esi
		pop	ebx
		pop	ebp
		retn
sub_1000657F	endp


; =============== S U B	R O U T	I N E =======================================


sub_100065CD	proc near		; DATA XREF: sub_100078D2+8Fo

arg_4		= dword	ptr  8

		cmp	[esp+arg_4], 0
		jz	short loc_100065DE
		push	[esp+arg_4]
		call	sub_1000664D
		pop	ecx

loc_100065DE:				; CODE XREF: sub_100065CD+5j
		xor	eax, eax
		retn
sub_100065CD	endp


; =============== S U B	R O U T	I N E =======================================


sub_100065E1	proc near		; DATA XREF: sub_100078D2+81o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebx
		mov	ebx, [esp+4+arg_C]
		push	esi
		push	edi
		xor	edi, edi
		push	10h
		mov	[ebx], edi
		call	PORT_Alloc_Util
		mov	esi, eax
		pop	ecx
		test	esi, esi
		jnz	short loc_100065FF
		push	2
		pop	edi
		jmp	short loc_10006641
; ---------------------------------------------------------------------------

loc_100065FF:				; CODE XREF: sub_100065E1+17j
		push	28h
		call	PORT_Alloc_Util
		mov	[esi], eax
		pop	ecx
		test	eax, eax
		jnz	short loc_10006612
		push	2
		pop	edi
		jmp	short loc_1000663A
; ---------------------------------------------------------------------------

loc_10006612:				; CODE XREF: sub_100065E1+2Aj
		push	[esp+0Ch+arg_8]
		mov	[esi+8], edi
		push	[esp+10h+arg_4]
		mov	[esi+4], edi
		push	esi
		push	[esp+18h+arg_0]
		mov	dword ptr [esi+0Ch], 0Ah
		call	sub_10006FB2
		mov	edi, eax
		add	esp, 10h
		test	edi, edi
		jz	short loc_10006645

loc_1000663A:				; CODE XREF: sub_100065E1+2Fj
		push	esi
		call	sub_1000664D
		pop	ecx

loc_10006641:				; CODE XREF: sub_100065E1+1Cj
		mov	eax, edi
		jmp	short loc_10006649
; ---------------------------------------------------------------------------

loc_10006645:				; CODE XREF: sub_100065E1+57j
		mov	[ebx], esi
		xor	eax, eax

loc_10006649:				; CODE XREF: sub_100065E1+62j
		pop	edi
		pop	esi
		pop	ebx
		retn
sub_100065E1	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000664D	proc near		; CODE XREF: sub_100065CD+Bp
					; sub_100065E1+5Ap

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		cmp	dword ptr [esi], 0
		jz	short loc_1000665F
		push	dword ptr [esi]
		call	PORT_Free_Util
		pop	ecx

loc_1000665F:				; CODE XREF: sub_1000664D+8j
		push	esi
		call	PORT_Free_Util
		pop	ecx
		pop	esi
		retn
sub_1000664D	endp


; =============== S U B	R O U T	I N E =======================================


sub_10006668	proc near		; CODE XREF: sub_10006758+40p
					; sub_100067A6+120p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_0]
		cmp	dword ptr [esi], 0
		jz	short loc_100066A2
		mov	eax, [esi+0Ch]
		cmp	[esi+4], eax
		jl	short loc_10006693
		add	eax, 0Ah
		mov	[esi+0Ch], eax
		shl	eax, 2
		push	eax
		push	dword ptr [esi]
		call	PORT_Realloc_Util
		mov	[esi], eax
		pop	ecx
		pop	ecx
		test	eax, eax
		jz	short loc_100066A2

loc_10006693:				; CODE XREF: sub_10006668+10j
		mov	edx, [esi+4]
		mov	ecx, [esi]
		mov	eax, [esp+4+arg_4]
		mov	[ecx+edx*4], eax
		inc	dword ptr [esi+4]

loc_100066A2:				; CODE XREF: sub_10006668+8j
					; sub_10006668+29j
		pop	esi
		retn
sub_10006668	endp


; =============== S U B	R O U T	I N E =======================================


sub_100066A4	proc near		; CODE XREF: sub_10006748+8p
					; DATA XREF: sub_100069E5+B7o ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	edi
		mov	edi, [esp+4+arg_0]
		test	edi, edi
		jnz	short loc_100066B1
		xor	eax, eax
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_100066B1:				; CODE XREF: sub_100066A4+7j
		push	esi
		mov	esi, [esp+8+arg_4]
		cmp	dword ptr [esi+0Ch], 0
		jz	short loc_1000672B
		cmp	dword ptr [esi+1Ch], 0
		jz	short loc_10006708
		test	byte ptr [esi+18h], 1
		jz	short loc_100066E5
		push	dword ptr [esi+14h]
		lea	eax, [edi+54h]
		push	dword ptr [esi+10h]
		push	38000000h
		push	eax
		push	dword ptr [esi]
		call	sub_10005176
		add	esp, 14h
		test	eax, eax
		jz	short loc_10006743

loc_100066E5:				; CODE XREF: sub_100066A4+22j
		test	byte ptr [esi+18h], 2
		jz	short loc_10006708
		push	dword ptr [esi+14h]
		lea	eax, [edi+54h]
		push	dword ptr [esi+10h]
		push	20000000h
		push	eax
		push	dword ptr [esi]
		call	sub_10005176
		add	esp, 14h
		test	eax, eax
		jz	short loc_10006743

loc_10006708:				; CODE XREF: sub_100066A4+1Cj
					; sub_100066A4+45j
		mov	eax, [esi+8]
		cmp	[esi+4], eax
		jl	short loc_10006730
		add	eax, 0Ah
		mov	[esi+8], eax
		shl	eax, 2
		push	eax
		push	dword ptr [esi+0Ch]
		call	PORT_Realloc_Util
		mov	[esi+0Ch], eax
		pop	ecx
		pop	ecx
		test	eax, eax
		jnz	short loc_10006730

loc_1000672B:				; CODE XREF: sub_100066A4+16j
		or	eax, 0FFFFFFFFh
		jmp	short loc_10006745
; ---------------------------------------------------------------------------

loc_10006730:				; CODE XREF: sub_100066A4+6Aj
					; sub_100066A4+85j
		push	edi
		call	sub_1000C31B
		mov	edx, [esi+4]
		pop	ecx
		mov	ecx, [esi+0Ch]
		mov	[ecx+edx*4], eax
		inc	dword ptr [esi+4]

loc_10006743:				; CODE XREF: sub_100066A4+3Fj
					; sub_100066A4+62j
		xor	eax, eax

loc_10006745:				; CODE XREF: sub_100066A4+8Aj
		pop	esi
		pop	edi
		retn
sub_100066A4	endp


; =============== S U B	R O U T	I N E =======================================


sub_10006748	proc near		; DATA XREF: sub_100069E5+218o

arg_0		= dword	ptr  4
arg_8		= dword	ptr  0Ch

		push	[esp+arg_8]
		push	[esp+4+arg_0]
		call	sub_100066A4
		pop	ecx
		pop	ecx
		retn
sub_10006748	endp


; =============== S U B	R O U T	I N E =======================================


sub_10006758	proc near		; DATA XREF: sub_10006CA9+62o

arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebx
		push	esi
		mov	esi, [esp+8+arg_C]
		xor	ebx, ebx
		cmp	[esp+8+arg_8], 4
		push	edi
		setnz	bl
		push	dword ptr [esi+0Ch]
		mov	edi, [esi]
		add	ebx, 28000000h
		push	dword ptr [esi+8]
		push	ebx
		push	[esp+18h+arg_4]
		push	edi
		call	sub_10005176
		add	esp, 14h
		test	eax, eax
		jz	short loc_100067A0
		push	ebx
		push	[esp+10h+arg_4]
		push	edi
		call	sub_10007EF9
		push	eax
		push	dword ptr [esi+4]
		call	sub_10006668
		add	esp, 14h

loc_100067A0:				; CODE XREF: sub_10006758+2Fj
		pop	edi
		pop	esi
		xor	eax, eax
		pop	ebx
		retn
sub_10006758	endp


; =============== S U B	R O U T	I N E =======================================


sub_100067A6	proc near		; DATA XREF: sub_10006D46+11Co

var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= byte ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= byte ptr -18h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_8		= dword	ptr  0Ch

		sub	esp, 34h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+34h+var_4], eax
		and	[esp+34h+var_34], 0
		push	ebx
		push	ebp
		mov	ebp, [esp+3Ch+arg_0]
		push	esi
		mov	esi, [esp+40h+arg_8]
		push	edi
		mov	ecx, [ebp+0]
		mov	edx, [ebp+4]
		cmp	dword ptr [esi+1Ch], 0
		mov	edi, [esi]
		mov	ebx, [esi+18h]
		mov	[esp+44h+var_30], ecx
		mov	[esp+44h+var_2C], edx
		jnz	loc_10006919
		mov	eax, [esi+0Ch]
		test	eax, eax
		jz	loc_10006919
		cmp	dword ptr [eax+4], 0
		jz	loc_10006919
		lea	ecx, [esp+44h+var_18]
		mov	[esp+44h+var_1C], 14h
		mov	[esp+44h+var_20], ecx
		cmp	dword ptr [eax+8], 0
		mov	ecx, [ebp+0]
		jnz	short loc_10006857
		push	edi
		lea	eax, [esp+48h+var_34]
		push	eax
		push	dword ptr [esi+4]
		call	sub_10001F28
		mov	edx, eax
		add	esp, 0Ch
		test	edx, edx
		jz	loc_100069D0
		push	edx
		call	sub_10006544
		neg	eax
		push	0
		sbb	eax, eax
		and	eax, 10h
		add	eax, 0FFFFFFBFh
		and	ebx, eax
		pop	eax
		test	bl, 70h
		push	edx
		setnz	al
		mov	[esp+4Ch+var_28], eax
		call	sub_10008EB7
		mov	eax, [esp+4Ch+var_28]
		pop	ecx
		pop	ecx
		jmp	short loc_100068A5
; ---------------------------------------------------------------------------

loc_10006857:				; CODE XREF: sub_100067A6+67j
		push	edx
		push	ecx
		lea	eax, [esp+4Ch+var_18]
		push	eax
		call	sub_1000E0C0
		lea	eax, [esp+50h+var_24]
		push	eax
		push	dword ptr [esi+0Ch]
		call	SECITEM_ItemsAreEqual_Util
		add	esp, 14h
		test	eax, eax
		jnz	short loc_100068AD
		mov	ecx, [ebp+0]
		cmp	[ecx], al
		jnz	loc_100069D0
		mov	eax, [ebp+4]
		dec	eax
		push	eax
		lea	eax, [ecx+1]
		push	eax
		lea	eax, [esp+4Ch+var_18]
		push	eax
		call	sub_1000E0C0
		lea	eax, [esp+50h+var_24]
		push	eax
		push	dword ptr [esi+0Ch]
		call	SECITEM_ItemsAreEqual_Util
		add	esp, 14h

loc_100068A5:				; CODE XREF: sub_100067A6+AFj
		test	eax, eax
		jz	loc_100069D0

loc_100068AD:				; CODE XREF: sub_100067A6+CFj
		test	bl, 10h
		jz	short loc_100068CE
		push	8000000h
		lea	eax, [esp+48h+var_34]
		push	eax
		push	edi
		call	sub_10007EF9
		push	eax
		push	dword ptr [esi+8]
		call	sub_10006668
		add	esp, 14h

loc_100068CE:				; CODE XREF: sub_100067A6+10Aj
		test	bl, 20h
		jz	short loc_100068EF
		push	10000000h
		lea	eax, [esp+48h+var_34]
		push	eax
		push	edi
		call	sub_10007EF9
		push	eax
		push	dword ptr [esi+8]
		call	sub_10006668
		add	esp, 14h

loc_100068EF:				; CODE XREF: sub_100067A6+12Bj
		test	bl, 40h
		jz	loc_100069D0
		push	18000000h
		lea	eax, [esp+48h+var_34]
		push	eax
		push	edi
		call	sub_10007EF9
		push	eax
		push	dword ptr [esi+8]
		call	sub_10006668
		add	esp, 14h
		jmp	loc_100069D0
; ---------------------------------------------------------------------------

loc_10006919:				; CODE XREF: sub_100067A6+35j
					; sub_100067A6+40j ...
		push	edi
		lea	eax, [esp+48h+var_34]
		push	eax
		push	dword ptr [esi+4]
		call	sub_10001F28
		mov	edi, eax
		add	esp, 0Ch
		test	edi, edi
		jz	loc_100069D0
		push	edi
		call	sub_10006544
		pop	ecx
		test	eax, eax
		jz	short loc_1000694F
		test	bl, 40h
		jz	loc_100069C9
		mov	ebx, 18000000h
		jmp	short loc_10006996
; ---------------------------------------------------------------------------

loc_1000694F:				; CODE XREF: sub_100067A6+197j
		test	bl, 10h
		jz	short loc_1000698C
		push	dword ptr [esi+14h]
		mov	ebp, 8000000h
		lea	eax, [esp+48h+var_34]
		push	dword ptr [esi+10h]
		push	ebp
		push	eax
		push	dword ptr [esi]
		call	sub_10005176
		add	esp, 14h
		test	eax, eax
		jz	short loc_1000698C
		push	ebp
		lea	eax, [esp+48h+var_34]
		push	eax
		push	dword ptr [esi]
		call	sub_10007EF9
		push	eax
		push	dword ptr [esi+8]
		call	sub_10006668
		add	esp, 14h

loc_1000698C:				; CODE XREF: sub_100067A6+1ACj
					; sub_100067A6+1CBj
		test	bl, 20h
		jz	short loc_100069C9
		mov	ebx, 10000000h

loc_10006996:				; CODE XREF: sub_100067A6+1A7j
		push	dword ptr [esi+14h]
		lea	eax, [esp+48h+var_34]
		push	dword ptr [esi+10h]
		push	ebx
		push	eax
		push	dword ptr [esi]
		call	sub_10005176
		add	esp, 14h
		test	eax, eax
		jz	short loc_100069C9
		push	ebx
		lea	eax, [esp+48h+var_34]
		push	eax
		push	dword ptr [esi]
		call	sub_10007EF9
		push	eax
		push	dword ptr [esi+8]
		call	sub_10006668
		add	esp, 14h

loc_100069C9:				; CODE XREF: sub_100067A6+19Cj
					; sub_100067A6+1E9j ...
		push	edi
		call	sub_10008EB7
		pop	ecx

loc_100069D0:				; CODE XREF: sub_100067A6+7Ej
					; sub_100067A6+D6j ...
		mov	ecx, [esp+44h+var_4]
		xor	eax, eax
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 34h
		retn
sub_100067A6	endp


; =============== S U B	R O U T	I N E =======================================


sub_100069E5	proc near		; CODE XREF: sub_10006FB2+36Ep

var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch
arg_1C		= dword	ptr  20h
arg_20		= dword	ptr  24h
arg_24		= dword	ptr  28h

		sub	esp, 28h
		push	ebp
		mov	ebp, [esp+2Ch+arg_0]
		push	edi
		push	ebp
		call	sub_100078A3
		mov	edi, eax
		pop	ecx
		test	edi, edi
		jz	loc_10006CA3
		mov	ecx, [esp+30h+arg_20]
		mov	eax, [esp+30h+arg_24]
		mov	[esp+30h+var_10], ecx
		mov	ecx, [esp+30h+arg_4]
		push	ebx
		xor	ebx, ebx
		mov	[esp+34h+var_C], eax
		mov	eax, [esp+34h+arg_18]
		push	esi
		mov	[esp+38h+var_20], ebp
		mov	[esp+38h+var_18], ebx
		mov	[esp+38h+var_14], ebx
		mov	[esp+38h+var_1C], ebx
		mov	[esp+38h+var_8], eax
		mov	[esp+38h+var_4], ebx
		cmp	[ecx+4], ebx
		jz	short loc_10006A4F
		push	ecx
		push	edi
		call	sub_1000C348
		push	eax		; void *
		lea	eax, [esp+44h+var_20]
		push	eax		; int
		call	sub_10006F5D
		jmp	loc_10006C08
; ---------------------------------------------------------------------------

loc_10006A4F:				; CODE XREF: sub_100069E5+51j
		mov	esi, [esp+38h+arg_8]
		cmp	[esi+4], ebx
		jz	short loc_10006AB6
		mov	eax, [esi+8]
		inc	eax
		push	eax
		call	PORT_Alloc_Util
		mov	[esp+3Ch+var_28], eax
		pop	ecx
		test	eax, eax
		jz	loc_10006CA1
		push	dword ptr [esi+8] ; size_t
		push	dword ptr [esi+4] ; void *
		push	eax		; void *
		call	memcpy
		mov	ecx, [esi+8]
		mov	esi, [esp+44h+var_28]
		push	esi		; char *
		push	edi		; int
		mov	[esi+ecx], bl
		call	sub_1000C762
		push	eax
		lea	eax, [esp+50h+var_20]
		push	eax
		call	sub_10006560
		lea	eax, [esp+54h+var_20]
		push	eax		; int
		push	offset sub_100066A4 ; int
		push	esi		; char *
		push	edi		; int
		call	sub_1000CAF5
		push	esi
		call	PORT_Free_Util
		add	esp, 30h
		jmp	loc_10006C0B
; ---------------------------------------------------------------------------

loc_10006AB6:				; CODE XREF: sub_100069E5+71j
		mov	esi, [esp+38h+arg_C]
		cmp	[esi+4], ebx
		jz	short loc_10006AEA
		push	esi
		push	edi
		call	sub_1000C79A
		push	eax
		lea	eax, [esp+44h+var_20]
		push	eax
		call	sub_10006560
		lea	eax, [esp+48h+var_20]
		push	eax
		push	offset sub_100066A4
		push	esi
		push	edi
		call	sub_1000CB65
		add	esp, 20h
		jmp	loc_10006C0B
; ---------------------------------------------------------------------------

loc_10006AEA:				; CODE XREF: sub_100069E5+D8j
		mov	esi, [esp+38h+arg_10]
		cmp	[esi+4], ebx
		jz	short loc_10006B57
		cmp	[esi+10h], ebx
		jz	short loc_10006B57
		test	al, 1
		jz	short loc_10006B15
		push	esi
		push	edi
		call	sub_1000C399
		push	eax		; void *
		lea	eax, [esp+44h+var_20]
		push	eax		; int
		call	sub_10006F5D
		mov	eax, [esp+48h+arg_18]
		add	esp, 10h

loc_10006B15:				; CODE XREF: sub_100069E5+115j
		test	al, 2
		jz	loc_10006C0F
		push	esi
		push	edi
		call	sub_1000C544
		mov	esi, eax
		pop	ecx
		pop	ecx
		test	esi, esi
		jz	loc_10006C0B
		push	20000000h
		lea	ecx, [esi+8]
		push	ecx
		push	ebp
		call	sub_10007EF9
		push	eax
		push	[esp+48h+arg_1C]
		call	sub_10006668
		push	esi		; void *
		call	sub_1000C2BA
		add	esp, 18h
		jmp	loc_10006C0B
; ---------------------------------------------------------------------------

loc_10006B57:				; CODE XREF: sub_100069E5+10Cj
					; sub_100069E5+111j
		mov	esi, [esp+38h+arg_14]
		cmp	[esi+4], ebx
		jz	short loc_10006BDD
		mov	eax, [esi+8]
		inc	eax
		push	eax
		call	PORT_Alloc_Util
		mov	[esp+3Ch+var_28], eax
		pop	ecx
		test	eax, eax
		jz	loc_10006CA1
		push	dword ptr [esi+8] ; size_t
		push	dword ptr [esi+4] ; void *
		push	eax		; void *
		call	memcpy
		mov	eax, [esp+44h+var_28]
		mov	ecx, [esi+8]
		push	eax		; char *
		push	edi		; int
		mov	[eax+ecx], bl
		call	sub_1000C933
		add	esp, 14h
		mov	[esp+38h+var_24], eax
		test	eax, eax
		jz	short loc_10006BD1
		lea	esi, [eax+14h]
		push	esi
		push	edi
		call	sub_1000C79A
		push	eax
		lea	eax, [esp+44h+var_20]
		push	eax
		call	sub_10006560
		lea	eax, [esp+48h+var_20]
		push	eax
		push	offset sub_100066A4
		push	esi
		push	edi
		call	sub_1000CB65
		push	[esp+58h+var_24] ; void	*
		call	sub_1000C1B7
		add	esp, 24h

loc_10006BD1:				; CODE XREF: sub_100069E5+1B8j
		push	[esp+38h+var_28]
		call	PORT_Free_Util
		pop	ecx
		jmp	short loc_10006C0B
; ---------------------------------------------------------------------------

loc_10006BDD:				; CODE XREF: sub_100069E5+179j
		push	28h
		mov	[esp+3Ch+var_4], 1
		mov	[esp+3Ch+var_18], 0Ah
		call	PORT_Alloc_Util
		mov	[esp+3Ch+var_14], eax
		lea	eax, [esp+3Ch+var_20]
		push	eax
		push	offset sub_10006748
		push	edi
		call	sub_1000CAB1

loc_10006C08:				; CODE XREF: sub_100069E5+65j
		add	esp, 10h

loc_10006C0B:				; CODE XREF: sub_100069E5+CCj
					; sub_100069E5+100j ...
		mov	eax, [esp+38h+arg_18]

loc_10006C0F:				; CODE XREF: sub_100069E5+132j
		cmp	[esp+38h+var_1C], ebx
		jle	short loc_10006C90
		mov	ecx, eax
		and	ecx, 1
		and	eax, 2
		mov	[esp+38h+var_24], ecx
		mov	esi, eax
		mov	[esp+38h+arg_18], eax

loc_10006C27:				; CODE XREF: sub_100069E5+2A9j
		mov	eax, [esp+38h+var_14]
		mov	edi, [eax+ebx*4]
		test	ecx, ecx
		jz	short loc_10006C4E
		push	38000000h
		lea	eax, [edi+54h]
		push	eax
		push	ebp
		call	sub_10007EF9
		push	eax
		push	[esp+48h+arg_1C]
		call	sub_10006668
		add	esp, 14h

loc_10006C4E:				; CODE XREF: sub_100069E5+24Bj
		test	esi, esi
		jz	short loc_10006C7E
		push	dword ptr [edi+90h]
		call	sub_1000CED2
		pop	ecx
		test	eax, eax
		jz	short loc_10006C7E
		push	20000000h
		lea	eax, [edi+54h]
		push	eax
		push	ebp
		call	sub_10007EF9
		push	eax
		push	[esp+48h+arg_1C]
		call	sub_10006668
		add	esp, 14h

loc_10006C7E:				; CODE XREF: sub_100069E5+26Bj
					; sub_100069E5+27Bj
		push	edi		; void *
		call	sub_1000C1A9
		inc	ebx
		pop	ecx
		mov	ecx, [esp+38h+var_24]
		cmp	ebx, [esp+38h+var_1C]
		jl	short loc_10006C27

loc_10006C90:				; CODE XREF: sub_100069E5+22Ej
		cmp	[esp+38h+var_14], 0
		jz	short loc_10006CA1
		push	[esp+38h+var_14]
		call	PORT_Free_Util
		pop	ecx

loc_10006CA1:				; CODE XREF: sub_100069E5+84j
					; sub_100069E5+18Cj ...
		pop	esi
		pop	ebx

loc_10006CA3:				; CODE XREF: sub_100069E5+14j
		pop	edi
		pop	ebp
		add	esp, 28h
		retn
sub_100069E5	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10006CA9	proc near		; CODE XREF: sub_10006FB2+3B7p

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch
arg_18		= dword	ptr  20h

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	ebx
		mov	ebx, [ebp+arg_0]
		push	esi
		push	ebx
		call	sub_100078A3
		mov	esi, eax
		pop	ecx
		test	esi, esi
		jz	short loc_10006D40
		push	edi
		mov	edi, [ebp+arg_4]
		cmp	dword ptr [edi+4], 0
		jz	short loc_10006D08
		push	[ebp+arg_8]
		push	edi
		push	esi
		call	sub_1000C4E4
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		jz	short loc_10006D3F
		xor	ecx, ecx
		cmp	[ebp+arg_8], ecx
		setnz	cl
		add	ecx, 28000000h
		push	ecx
		push	edi
		push	ebx
		call	sub_10007EF9
		push	eax
		push	[ebp+arg_10]
		call	sub_10006668
		push	esi		; void *
		call	sub_1000C1B7
		add	esp, 18h
		jmp	short loc_10006D3F
; ---------------------------------------------------------------------------

loc_10006D08:				; CODE XREF: sub_10006CA9+20j
		mov	eax, [ebp+arg_10]
		mov	edi, offset sub_10006758
		mov	[ebp+var_C], eax
		mov	eax, [ebp+arg_14]
		mov	[ebp+var_8], eax
		mov	eax, [ebp+arg_18]
		mov	[ebp+var_4], eax
		lea	eax, [ebp+var_10]
		push	eax
		push	edi
		push	4
		push	esi
		mov	[ebp+var_10], ebx
		call	sub_1000CA18
		lea	eax, [ebp+var_10]
		push	eax
		push	edi
		push	5
		push	esi
		call	sub_1000CA18
		add	esp, 20h

loc_10006D3F:				; CODE XREF: sub_10006CA9+33j
					; sub_10006CA9+5Dj
		pop	edi

loc_10006D40:				; CODE XREF: sub_10006CA9+16j
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
sub_10006CA9	endp


; =============== S U B	R O U T	I N E =======================================


sub_10006D46	proc near		; CODE XREF: sub_10006FB2+395p

var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch

		sub	esp, 24h
		push	ebx
		push	ebp
		push	edi
		mov	edi, [esp+30h+arg_0]
		xor	ebx, ebx
		push	edi
		call	sub_100078AC
		mov	ebp, eax
		pop	ecx
		test	ebp, ebp
		jz	loc_10006E7D
		push	esi
		mov	esi, [esp+34h+arg_4]
		cmp	[esi+4], ebx
		jz	loc_10006E35
		push	edi
		push	esi
		push	ebp
		call	sub_10001F28
		add	esp, 0Ch
		mov	[esp+34h+var_24], eax
		test	eax, eax
		jz	loc_10006E25
		mov	edx, [esp+34h+arg_8]
		test	dl, 40h
		jz	short loc_10006DBE
		push	eax
		call	sub_10006544
		pop	ecx
		test	eax, eax
		jz	short loc_10006DBA
		push	18000000h
		push	esi
		push	edi
		call	sub_10007EF9
		push	eax
		push	[esp+44h+arg_C]
		call	sub_10006668
		mov	edx, [esp+48h+arg_8]
		add	esp, 14h
		inc	ebx

loc_10006DBA:				; CODE XREF: sub_10006D46+54j
		mov	eax, [esp+34h+var_24]

loc_10006DBE:				; CODE XREF: sub_10006D46+49j
		test	dl, 10h
		jz	short loc_10006DEA
		push	eax
		call	sub_10006544
		pop	ecx
		test	eax, eax
		jnz	short loc_10006DEA
		push	8000000h
		push	esi
		push	edi
		call	sub_10007EF9
		push	eax
		push	[esp+44h+arg_C]
		call	sub_10006668
		xor	ebx, ebx
		add	esp, 14h
		inc	ebx

loc_10006DEA:				; CODE XREF: sub_10006D46+7Bj
					; sub_10006D46+86j
		test	byte ptr [esp+34h+arg_8], 20h
		jz	short loc_10006E1B
		push	[esp+34h+var_24]
		call	sub_10006544
		pop	ecx
		test	eax, eax
		jnz	short loc_10006E1B
		push	10000000h
		push	esi
		push	edi
		call	sub_10007EF9
		push	eax
		push	[esp+44h+arg_C]
		call	sub_10006668
		xor	ebx, ebx
		add	esp, 14h
		inc	ebx

loc_10006E1B:				; CODE XREF: sub_10006D46+A9j
					; sub_10006D46+B7j
		push	[esp+34h+var_24]
		call	sub_10008EB7
		pop	ecx

loc_10006E25:				; CODE XREF: sub_10006D46+3Cj
		cmp	dword ptr [ebp+0Ch], 3
		jnz	short loc_10006E7C
		cmp	dword ptr [esi+8], 14h
		jnz	short loc_10006E7C
		test	ebx, ebx
		jnz	short loc_10006E7C

loc_10006E35:				; CODE XREF: sub_10006D46+25j
		mov	eax, [esp+34h+arg_C]
		mov	[esp+34h+var_18], eax
		mov	eax, [esp+34h+arg_14]
		mov	[esp+34h+var_10], eax
		mov	eax, [esp+34h+arg_18]
		mov	[esp+34h+var_C], eax
		mov	eax, [esp+34h+arg_8]
		mov	[esp+34h+var_8], eax
		mov	eax, [esp+34h+arg_10]
		mov	[esp+34h+var_4], eax
		lea	eax, [esp+34h+var_20]
		push	eax
		push	offset sub_100067A6
		push	ebp
		mov	[esp+40h+var_20], edi
		mov	[esp+40h+var_1C], ebp
		mov	[esp+40h+var_14], esi
		call	sub_1000262F
		add	esp, 0Ch

loc_10006E7C:				; CODE XREF: sub_10006D46+E3j
					; sub_10006D46+E9j ...
		pop	esi

loc_10006E7D:				; CODE XREF: sub_10006D46+17j
		pop	edi
		pop	ebp
		pop	ebx
		add	esp, 24h
		retn
sub_10006D46	endp


; =============== S U B	R O U T	I N E =======================================


sub_10006E84	proc near		; CODE XREF: sub_10006FB2+3D3p

var_24		= dword	ptr -24h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		sub	esp, 10h
		push	ebx
		push	ebp
		mov	ebp, [esp+18h+arg_0]
		push	esi
		push	ebp
		call	sub_100078A3
		mov	ebx, eax
		pop	ecx
		test	ebx, ebx
		jz	loc_10006F56
		push	edi
		mov	edi, [esp+20h+arg_4]
		cmp	dword ptr [edi+4], 0
		jz	short loc_10006F24
		mov	eax, [edi+8]
		inc	eax
		push	eax
		call	PORT_Alloc_Util
		mov	esi, eax
		pop	ecx
		test	esi, esi
		jz	loc_10006F55
		push	dword ptr [edi+8] ; size_t
		push	dword ptr [edi+4] ; void *
		push	esi		; void *
		call	memcpy
		mov	ecx, [edi+8]
		push	esi		; char *
		push	ebx		; int
		mov	byte ptr [esi+ecx], 0
		call	sub_1000C933
		mov	edi, eax
		add	esp, 14h
		test	edi, edi
		jz	short loc_10006F1B
		push	esi		; char *
		mov	[esp+24h+var_C], esi
		call	strlen
		and	[esp+24h+var_10], 0
		inc	eax
		mov	[esp+24h+var_8], eax
		lea	eax, [esp+24h+var_10]
		mov	[esp+24h+var_24], 30000000h
		push	eax
		push	ebp
		call	sub_10007EF9
		push	eax
		push	[esp+30h+arg_8]
		call	sub_10006668
		push	edi		; void *
		call	sub_1000C1B7
		add	esp, 18h

loc_10006F1B:				; CODE XREF: sub_10006E84+5Cj
		push	esi
		call	PORT_Free_Util
		pop	ecx
		jmp	short loc_10006F55
; ---------------------------------------------------------------------------

loc_10006F24:				; CODE XREF: sub_10006E84+24j
		mov	eax, [esp+20h+arg_8]
		mov	[esp+20h+var_C], eax
		mov	eax, [esp+20h+arg_C]
		mov	[esp+20h+var_8], eax
		mov	eax, [esp+20h+arg_10]
		mov	[esp+20h+var_4], eax
		lea	eax, [esp+20h+var_10]
		push	eax
		push	offset sub_10007397
		push	6
		push	ebx
		mov	[esp+30h+var_10], ebp
		call	sub_1000CA18
		add	esp, 10h

loc_10006F55:				; CODE XREF: sub_10006E84+35j
					; sub_10006E84+9Ej
		pop	edi

loc_10006F56:				; CODE XREF: sub_10006E84+15j
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 10h
		retn
sub_10006E84	endp


; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10006F5D(int,	void *)
sub_10006F5D	proc near		; CODE XREF: sub_100069E5+60p
					; sub_100069E5+124p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_4]
		test	esi, esi
		jz	short loc_10006FB0
		push	edi
		mov	edi, [esp+8+arg_0]
		cmp	dword ptr [edi+1Ch], 0
		jz	short loc_10006F8E
		push	dword ptr [edi+14h]
		lea	eax, [esi+54h]
		push	dword ptr [edi+10h]
		push	38000000h
		push	eax
		push	dword ptr [edi]
		call	sub_10005176
		add	esp, 14h
		test	eax, eax
		jz	short loc_10006F9D

loc_10006F8E:				; CODE XREF: sub_10006F5D+12j
		push	4
		call	PORT_Alloc_Util
		mov	[edi+0Ch], eax
		pop	ecx
		test	eax, eax
		jnz	short loc_10006FA6

loc_10006F9D:				; CODE XREF: sub_10006F5D+2Fj
		push	esi		; void *
		call	sub_1000C1A9
		pop	ecx
		jmp	short loc_10006FAF
; ---------------------------------------------------------------------------

loc_10006FA6:				; CODE XREF: sub_10006F5D+3Ej
		mov	[eax], esi
		mov	dword ptr [edi+4], 1

loc_10006FAF:				; CODE XREF: sub_10006F5D+47j
		pop	edi

loc_10006FB0:				; CODE XREF: sub_10006F5D+7j
		pop	esi
		retn
sub_10006F5D	endp


; =============== S U B	R O U T	I N E =======================================


sub_10006FB2	proc near		; CODE XREF: sub_100065E1+4Bp

var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= byte ptr -30h
var_24		= byte ptr -24h
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 7Ch
		push	ebx
		push	ebp
		xor	ebp, ebp
		push	esi
		push	edi
		mov	edi, [esp+8Ch+arg_0]
		mov	eax, ebp
		push	edi
		mov	[esp+90h+var_78], eax
		mov	[esp+90h+var_48], ebp
		mov	[esp+90h+var_44], ebp
		mov	[esp+90h+var_40], ebp
		mov	[esp+90h+var_60], ebp
		mov	[esp+90h+var_5C], ebp
		mov	[esp+90h+var_58], ebp
		mov	[esp+90h+var_6C], ebp
		mov	[esp+90h+var_68], ebp
		mov	[esp+90h+var_64], ebp
		mov	[esp+90h+var_54], ebp
		mov	[esp+90h+var_50], ebp
		mov	[esp+90h+var_4C], ebp
		mov	[esp+90h+var_3C], ebp
		mov	[esp+90h+var_38], ebp
		mov	[esp+90h+var_34], ebp
		mov	[esp+90h+var_18], ebp
		mov	[esp+90h+var_14], ebp
		mov	[esp+90h+var_10], ebp
		mov	[esp+90h+var_C], ebp
		mov	[esp+90h+var_8], ebp
		mov	[esp+90h+var_4], ebp
		call	sub_100078A3
		pop	ecx
		mov	ecx, ebp
		test	eax, eax
		jnz	short loc_1000703D
		push	50h
		mov	[esp+90h+var_7C], ecx
		jmp	short loc_10007043
; ---------------------------------------------------------------------------

loc_1000703D:				; CODE XREF: sub_10006FB2+81j
		push	2Fh
		mov	[esp+90h+var_7C], ebp

loc_10007043:				; CODE XREF: sub_10006FB2+89j
		mov	esi, [esp+90h+arg_8]
		mov	ebp, [esp+90h+arg_C]
		add	esi, 8
		pop	ebx

loc_10007055:				; CODE XREF: sub_10006FB2+335j
		cmp	ecx, ebp
		jge	loc_100072ED
		lea	ecx, [esi-8]
		mov	eax, [ecx]
		cmp	eax, 106h
		ja	loc_10007200
		jz	loc_10007261
		cmp	eax, 82h
		ja	loc_100071AD
		jz	loc_100071A1
		sub	eax, 0
		jz	loc_10007122
		dec	eax
		jz	loc_10007115
		dec	eax
		jz	short loc_100070F8
		dec	eax
		jz	short loc_100070EF
		sub	eax, 0Eh
		jz	short loc_100070E3
		sub	eax, 6Fh
		jz	short loc_100070B3
		dec	eax
		jnz	short loc_100070CC
		lea	ecx, [esp+8Ch+var_18]

loc_100070AB:				; CODE XREF: sub_10006FB2+1F6j
		and	ebx, 3
		jmp	loc_100072CE
; ---------------------------------------------------------------------------

loc_100070B3:				; CODE XREF: sub_10006FB2+F0j
		lea	eax, [esp+8Ch+var_74]
		push	eax
		push	1
		push	ecx
		push	80h
		call	sub_10007C40
		add	esp, 10h
		test	eax, eax
		jz	short loc_100070D3

loc_100070CC:				; CODE XREF: sub_10006FB2+F3j
					; sub_10006FB2+12Fj ...
		xor	ebx, ebx
		jmp	loc_100072D9
; ---------------------------------------------------------------------------

loc_100070D3:				; CODE XREF: sub_10006FB2+118j
		and	ebx, 1
		cmp	[esp+8Ch+var_74], 0

loc_100070DB:				; CODE XREF: sub_10006FB2+16Ej
		jz	loc_100072D9
		jmp	short loc_100070CC
; ---------------------------------------------------------------------------

loc_100070E3:				; CODE XREF: sub_10006FB2+EBj
		lea	ecx, [esp+8Ch+var_48]
		and	ebx, 0Dh
		jmp	loc_100072CE
; ---------------------------------------------------------------------------

loc_100070EF:				; CODE XREF: sub_10006FB2+E6j
		lea	ecx, [esp+8Ch+var_6C]
		jmp	loc_100072CE
; ---------------------------------------------------------------------------

loc_100070F8:				; CODE XREF: sub_10006FB2+E3j
		cmp	dword ptr [esi], 1
		jnz	short loc_100070CC
		mov	eax, [esi-4]
		cmp	byte ptr [eax],	1
		jnz	short loc_1000710D

loc_10007105:				; CODE XREF: sub_10006FB2+231j
					; sub_10006FB2+25Aj ...
		and	ebx, 50h
		jmp	loc_100072D9
; ---------------------------------------------------------------------------

loc_1000710D:				; CODE XREF: sub_10006FB2+151j
		and	ebx, 0FFFFFFAFh
		jmp	loc_100072D9
; ---------------------------------------------------------------------------

loc_10007115:				; CODE XREF: sub_10006FB2+DCj
		cmp	dword ptr [esi], 1
		jnz	short loc_100070CC
		mov	eax, [esi-4]
		cmp	byte ptr [eax],	1
		jmp	short loc_100070DB
; ---------------------------------------------------------------------------

loc_10007122:				; CODE XREF: sub_10006FB2+D5j
		lea	eax, [esp+8Ch+var_70]
		push	eax
		push	1
		push	ecx
		push	0
		call	sub_10007C40
		add	esp, 10h
		test	eax, eax
		jnz	short loc_100070CC
		mov	eax, [esp+8Ch+var_70]
		cmp	eax, 1
		jz	short loc_10007199
		cmp	eax, 2
		jz	short loc_10007191
		cmp	eax, 3
		jz	short loc_10007189
		cmp	eax, 4
		jz	short loc_10007181
		cmp	eax, 0CE534351h
		jz	short loc_10007179
		cmp	eax, 0CE534352h
		jz	short loc_10007171
		cmp	eax, 0CE534353h
		jnz	loc_100070CC
		and	ebx, 2
		jmp	loc_100072D9
; ---------------------------------------------------------------------------

loc_10007171:				; CODE XREF: sub_10006FB2+1AAj
					; sub_10006FB2+2C7j
		and	ebx, 8
		jmp	loc_100072D9
; ---------------------------------------------------------------------------

loc_10007179:				; CODE XREF: sub_10006FB2+1A3j
		and	ebx, 4
		jmp	loc_100072D9
; ---------------------------------------------------------------------------

loc_10007181:				; CODE XREF: sub_10006FB2+19Cj
		and	ebx, 40h
		jmp	loc_100072D9
; ---------------------------------------------------------------------------

loc_10007189:				; CODE XREF: sub_10006FB2+197j
					; sub_10006FB2+27Bj
		and	ebx, 10h
		jmp	loc_100072D9
; ---------------------------------------------------------------------------

loc_10007191:				; CODE XREF: sub_10006FB2+192j
					; sub_10006FB2+28Dj
		and	ebx, 20h
		jmp	loc_100072D9
; ---------------------------------------------------------------------------

loc_10007199:				; CODE XREF: sub_10006FB2+18Dj
		and	ebx, 1
		jmp	loc_100072D9
; ---------------------------------------------------------------------------

loc_100071A1:				; CODE XREF: sub_10006FB2+CCj
		lea	ecx, [esp+8Ch+var_C]
		jmp	loc_100070AB
; ---------------------------------------------------------------------------

loc_100071AD:				; CODE XREF: sub_10006FB2+C6j
		sub	eax, 100h
		jz	loc_1000725C
		dec	eax
		jz	short loc_100071F4
		dec	eax
		jz	short loc_100071E8
		dec	eax
		jz	short loc_100071CE
		dec	eax
		jz	loc_10007261
		dec	eax
		jmp	loc_10007251
; ---------------------------------------------------------------------------

loc_100071CE:				; CODE XREF: sub_10006FB2+20Dj
		cmp	dword ptr [esi], 1
		jnz	loc_100070CC
		mov	eax, [esi-4]
		cmp	byte ptr [eax],	1
		jnz	loc_100070CC
		jmp	loc_10007105
; ---------------------------------------------------------------------------

loc_100071E8:				; CODE XREF: sub_10006FB2+20Aj
		lea	ecx, [esp+8Ch+var_3C]
		and	ebx, 71h
		jmp	loc_100072CE
; ---------------------------------------------------------------------------

loc_100071F4:				; CODE XREF: sub_10006FB2+207j
		lea	ecx, [esp+8Ch+var_60]
		and	ebx, 3Dh
		jmp	loc_100072CE
; ---------------------------------------------------------------------------

loc_10007200:				; CODE XREF: sub_10006FB2+B5j
		cmp	eax, 165h
		ja	short loc_10007266
		cmp	eax, 164h
		jnb	loc_10007105
		cmp	eax, 107h
		jb	loc_100070CC
		cmp	eax, 108h
		jbe	loc_10007105
		cmp	eax, 109h
		jz	loc_10007189
		cmp	eax, 10Ah
		jz	short loc_10007261
		cmp	eax, 10Bh
		jz	loc_10007191
		cmp	eax, 10Ch
		jz	short loc_1000725C
		cmp	eax, 162h

loc_10007251:				; CODE XREF: sub_10006FB2+217j
		jz	loc_10007105
		jmp	loc_100070CC
; ---------------------------------------------------------------------------

loc_1000725C:				; CODE XREF: sub_10006FB2+200j
					; sub_10006FB2+298j
		and	ebx, 70h
		jmp	short loc_100072D9
; ---------------------------------------------------------------------------

loc_10007261:				; CODE XREF: sub_10006FB2+BBj
					; sub_10006FB2+210j ...
		and	ebx, 60h
		jmp	short loc_100072D9
; ---------------------------------------------------------------------------

loc_10007266:				; CODE XREF: sub_10006FB2+253j
		cmp	eax, 170h
		jz	short loc_100072D9
		cmp	eax, 0CE534352h
		jz	short loc_100072C7
		cmp	eax, 0CE534354h
		jz	loc_10007171
		cmp	eax, 0CE534358h
		jz	short loc_100072AA
		cmp	eax, 0CE5363B4h
		jz	short loc_100072A1
		cmp	eax, 0CE5363B5h
		jnz	loc_100070CC
		and	ebx, 2
		lea	ecx, [esp+8Ch+var_30]
		jmp	short loc_100072CE
; ---------------------------------------------------------------------------

loc_100072A1:				; CODE XREF: sub_10006FB2+2D9j
		and	ebx, 2
		lea	ecx, [esp+8Ch+var_24]
		jmp	short loc_100072CE
; ---------------------------------------------------------------------------

loc_100072AA:				; CODE XREF: sub_10006FB2+2D2j
		cmp	dword ptr [esi], 1
		jnz	loc_100070CC
		mov	eax, [esi-4]
		xor	ecx, ecx
		and	ebx, 4
		cmp	byte ptr [eax],	1
		setz	cl
		mov	[esp+8Ch+var_78], ecx
		jmp	short loc_100072D9
; ---------------------------------------------------------------------------

loc_100072C7:				; CODE XREF: sub_10006FB2+2C0j
		lea	ecx, [esp+8Ch+var_54]
		and	ebx, 9

loc_100072CE:				; CODE XREF: sub_10006FB2+FCj
					; sub_10006FB2+138j ...
		mov	eax, [esi-4]
		mov	[ecx+4], eax
		mov	eax, [esi]
		mov	[ecx+8], eax

loc_100072D9:				; CODE XREF: sub_10006FB2+11Cj
					; sub_10006FB2:loc_100070DBj ...
		mov	ecx, [esp+8Ch+var_7C]
		add	esi, 0Ch
		inc	ecx
		mov	[esp+8Ch+var_7C], ecx
		test	ebx, ebx
		jnz	loc_10007055

loc_100072ED:				; CODE XREF: sub_10006FB2+A5j
		mov	esi, [esp+8Ch+arg_4]
		test	bl, 3
		jz	short loc_10007328
		push	ebp
		push	[esp+90h+arg_8]
		lea	eax, [esp+94h+var_54]
		push	esi
		push	ebx
		push	eax
		lea	eax, [esp+0A0h+var_18]
		push	eax
		lea	eax, [esp+0A4h+var_60]
		push	eax
		lea	eax, [esp+0A8h+var_6C]
		push	eax
		lea	eax, [esp+0ACh+var_48]
		push	eax
		push	edi
		call	sub_100069E5
		add	esp, 28h

loc_10007328:				; CODE XREF: sub_10006FB2+345j
		test	bl, 70h
		jz	short loc_1000734F
		xor	eax, eax
		cmp	[esp+8Ch+var_64], eax
		push	ebp
		push	[esp+90h+arg_8]
		setnz	al
		push	eax
		push	esi
		push	ebx
		lea	eax, [esp+0A0h+var_3C]
		push	eax
		push	edi
		call	sub_10006D46
		add	esp, 1Ch

loc_1000734F:				; CODE XREF: sub_10006FB2+379j
		test	bl, 4
		jz	short loc_10007371
		mov	eax, [esp+8Ch+var_78]
		push	ebp
		push	[esp+90h+arg_8]
		push	esi
		push	ebx
		push	eax
		lea	eax, [esp+0A0h+var_60]
		push	eax
		push	edi
		call	sub_10006CA9
		add	esp, 1Ch

loc_10007371:				; CODE XREF: sub_10006FB2+3A0j
		test	bl, 8
		jz	short loc_1000738D
		push	ebp
		push	[esp+90h+arg_8]
		lea	eax, [esp+94h+var_54]
		push	esi
		push	eax
		push	edi
		call	sub_10006E84
		add	esp, 14h

loc_1000738D:				; CODE XREF: sub_10006FB2+3C2j
		pop	edi
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		add	esp, 7Ch
		retn
sub_10006FB2	endp


; =============== S U B	R O U T	I N E =======================================


sub_10007397	proc near		; DATA XREF: sub_10006E84+BDo

arg_4		= dword	ptr  8
arg_C		= dword	ptr  10h

		push	ebx
		push	esi
		mov	esi, [esp+8+arg_C]
		mov	ebx, 30000000h
		push	edi
		push	dword ptr [esi+0Ch]
		mov	edi, [esi]
		push	dword ptr [esi+8]
		push	ebx
		push	[esp+18h+arg_4]
		push	edi
		call	sub_10005176
		add	esp, 14h
		test	eax, eax
		jz	short loc_100073D4
		push	ebx
		push	[esp+10h+arg_4]
		push	edi
		call	sub_10007EF9
		push	eax
		push	dword ptr [esi+4]
		call	sub_10006668
		add	esp, 14h

loc_100073D4:				; CODE XREF: sub_10007397+24j
		pop	edi
		pop	esi
		xor	eax, eax
		pop	ebx
		retn
sub_10007397	endp


; =============== S U B	R O U T	I N E =======================================


sub_100073DA	proc near		; CODE XREF: .text:100075E6p

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		cmp	dword ptr [eax], 0FFh
		jz	short loc_100073E9
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_100073E9:				; CODE XREF: sub_100073DA+Aj
		push	eax
		call	dword ptr [eax+24h]
		pop	ecx
		retn
sub_100073DA	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_100073EF	proc near		; CODE XREF: sub_100029DF+144p
					; sub_1000DE98+D6p

var_10		= byte ptr -10h
var_8		= byte ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		lea	eax, [ebp+var_8]
		push	edi
		mov	edi, [ebp+arg_4]
		push	3
		push	eax
		lea	eax, [ebp+var_10]
		push	eax
		push	edi
		call	dword ptr [edi+14h]
		add	esp, 10h
		test	eax, eax
		jnz	short loc_1000743E
		push	esi
		mov	esi, [ebp+arg_0]

loc_10007412:				; CODE XREF: sub_100073EF+44j
		push	8
		lea	eax, [ebp+var_8]
		push	eax
		lea	eax, [ebp+var_10]
		push	eax
		push	esi
		call	dword ptr [esi+10h]
		push	7
		lea	eax, [ebp+var_8]
		push	eax
		lea	eax, [ebp+var_10]
		push	eax
		push	edi
		call	dword ptr [edi+14h]
		add	esp, 20h
		test	eax, eax
		jz	short loc_10007412
		push	0
		push	esi
		call	dword ptr [esi+18h]
		pop	ecx
		pop	ecx
		pop	esi

loc_1000743E:				; CODE XREF: sub_100073EF+1Dj
		xor	eax, eax
		pop	edi
		mov	esp, ebp
		pop	ebp
		retn
sub_100073EF	endp


; =============== S U B	R O U T	I N E =======================================


sub_10007445	proc near		; CODE XREF: sub_100075AF+15p
					; sub_10007656+15p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		cmp	dword ptr [eax], 0FFh
		jz	short loc_10007454
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_10007454:				; CODE XREF: sub_10007445+Aj
		push	[esp+arg_4]
		push	eax
		call	dword ptr [eax+28h]
		pop	ecx
		pop	ecx
		retn
sub_10007445	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000745F	proc near		; CODE XREF: sub_100024FC+BAp
					; sub_100029DF+73p ...

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		cmp	dword ptr [eax], 0FFh
		jz	short loc_1000746E

loc_1000746B:				; CODE XREF: sub_1000745F+16j
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_1000746E:				; CODE XREF: sub_1000745F+Aj
		cmp	dword_10015030,	0
		jz	short loc_1000746B
		push	eax
		call	dword ptr [eax+30h]
		pop	ecx
		retn
sub_1000745F	endp

; Exported entry   3. legacy_Open

; =============== S U B	R O U T	I N E =======================================


; int __cdecl legacy_Open(char *, int, int, int, int, int, int,	int)
		public legacy_Open
legacy_Open	proc near		; DATA XREF: .rdata:off_10013DC8o

var_D		= byte ptr -0Dh
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch
arg_1C		= dword	ptr  20h

		sub	esp, 10h
		xor	eax, eax
		mov	[esp+10h+var_D], 64h
		push	edi
		xor	edi, edi
		cmp	[esp+14h+arg_14], 1
		setz	al
		mov	[esp+14h+var_8], eax
		call	SECOID_Init
		test	eax, eax
		jz	short loc_100074A7
		push	30h
		pop	eax
		jmp	loc_10007588
; ---------------------------------------------------------------------------

loc_100074A7:				; CODE XREF: legacy_Open+20j
		push	ebx
		push	ebp
		push	esi
		call	sub_1000C6F9
		mov	ebx, [esp+20h+arg_1C]
		test	ebx, ebx
		jz	short loc_100074B9
		and	[ebx], edi

loc_100074B9:				; CODE XREF: legacy_Open+38j
		mov	esi, [esp+20h+arg_18]
		mov	ebp, [esp+20h+var_8]
		test	esi, esi
		jz	short loc_10007507
		and	[esi], edi
		lea	eax, [esp+20h+var_C]
		push	eax		; int
		push	ebp		; int
		push	[esp+28h+arg_4]	; int
		push	[esp+2Ch+arg_0]	; char *
		call	sub_10007703
		mov	edi, eax
		add	esp, 10h
		test	edi, edi
		jnz	short loc_1000755B
		push	eax
		push	[esp+24h+var_C]
		push	[esp+28h+arg_14]
		push	esi
		call	sub_100078D2
		mov	edi, eax
		add	esp, 10h
		test	edi, edi
		jz	short loc_10007507
		push	[esp+20h+var_C]
		call	sub_1000C0CE

loc_10007504:				; CODE XREF: legacy_Open+C9j
		pop	ecx
		jmp	short loc_10007557
; ---------------------------------------------------------------------------

loc_10007507:				; CODE XREF: legacy_Open+46j
					; legacy_Open+7Cj
		test	ebx, ebx
		jz	short loc_10007557
		lea	eax, [esp+20h+var_4]
		push	eax		; int
		push	ebp		; int
		push	[esp+28h+arg_8]	; int
		push	[esp+2Ch+arg_0]	; char *
		call	sub_100077B2
		mov	edi, eax
		add	esp, 10h
		test	edi, edi
		jnz	short loc_1000755B
		mov	ebp, [esp+20h+var_4]
		push	ebp
		push	eax
		push	[esp+28h+arg_14]
		push	ebx
		call	sub_100078D2
		mov	edi, eax
		add	esp, 10h
		test	edi, edi
		jz	short loc_10007548
		push	ebp
		call	sub_10001CF8
		jmp	short loc_10007504
; ---------------------------------------------------------------------------

loc_10007548:				; CODE XREF: legacy_Open+C1j
		test	esi, esi
		jz	short loc_10007583
		mov	eax, [esi]
		test	eax, eax
		jz	short loc_10007583
		mov	eax, [eax]
		mov	[eax+4], ebp

loc_10007557:				; CODE XREF: legacy_Open+88j
					; legacy_Open+8Cj
		test	edi, edi
		jz	short loc_10007583

loc_1000755B:				; CODE XREF: legacy_Open+64j
					; legacy_Open+A8j
		test	ebx, ebx
		jz	short loc_1000756F
		cmp	dword ptr [ebx], 0
		jz	short loc_1000756F
		push	dword ptr [ebx]
		call	sub_100075F4
		and	dword ptr [ebx], 0
		pop	ecx

loc_1000756F:				; CODE XREF: legacy_Open+E0j
					; legacy_Open+E5j
		test	esi, esi
		jz	short loc_10007583
		cmp	dword ptr [esi], 0
		jz	short loc_10007583
		push	dword ptr [esi]
		call	sub_100075F4
		and	dword ptr [esi], 0
		pop	ecx

loc_10007583:				; CODE XREF: legacy_Open+CDj
					; legacy_Open+D3j ...
		pop	esi
		pop	ebp
		mov	eax, edi
		pop	ebx

loc_10007588:				; CODE XREF: legacy_Open+25j
		pop	edi
		add	esp, 10h
		retn
legacy_Open	endp

; Exported entry   7. legacy_Shutdown

; =============== S U B	R O U T	I N E =======================================


		public legacy_Shutdown
legacy_Shutdown	proc near		; DATA XREF: .rdata:off_10013DC8o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	dword_100153B0,	eax
		call	sub_1000C1BC
		call	sub_1000C275
		call	SECOID_Shutdown
		and	dword_100153B0,	0
		xor	eax, eax
		retn
legacy_Shutdown	endp


; =============== S U B	R O U T	I N E =======================================


sub_100075AF	proc near		; DATA XREF: sub_100078D2+CEo

arg_0		= dword	ptr  4

		push	[esp+arg_0]
		call	sub_100078B6
		pop	ecx
		test	eax, eax
		jnz	short loc_100075C1
		push	5
		pop	eax
		retn
; ---------------------------------------------------------------------------

loc_100075C1:				; CODE XREF: sub_100075AF+Cj
		push	1
		push	eax
		call	sub_10007445
		neg	eax
		pop	ecx
		sbb	eax, eax
		pop	ecx
		and	eax, 5
		retn
sub_100075AF	endp

; ---------------------------------------------------------------------------

loc_100075D3:				; DATA XREF: sub_100078D2+C0o
		push	dword ptr [esp+4]
		call	sub_100078B6
		pop	ecx
		test	eax, eax
		jnz	short loc_100075E5
		push	5
		pop	eax
		retn
; ---------------------------------------------------------------------------

loc_100075E5:				; CODE XREF: .text:100075DFj
		push	eax
		call	sub_100073DA
		neg	eax
		pop	ecx
		sbb	eax, eax
		and	eax, 5
		retn

; =============== S U B	R O U T	I N E =======================================


sub_100075F4	proc near		; CODE XREF: legacy_Open+E9p
					; legacy_Open+FDp
					; DATA XREF: ...

arg_0		= dword	ptr  4

		push	esi
		push	edi
		mov	edi, [esp+8+arg_0]
		push	edi
		mov	esi, [edi]
		call	sub_10007BE9
		pop	ecx
		test	esi, esi
		jz	short loc_1000764A
		cmp	dword ptr [esi], 0
		jz	short loc_10007615
		push	dword ptr [esi]
		call	sub_1000C0CE
		jmp	short loc_10007623
; ---------------------------------------------------------------------------

loc_10007615:				; CODE XREF: sub_100075F4+16j
		cmp	dword ptr [esi+4], 0
		jz	short loc_10007624
		push	dword ptr [esi+4]
		call	sub_10001CF8

loc_10007623:				; CODE XREF: sub_100075F4+1Fj
		pop	ecx

loc_10007624:				; CODE XREF: sub_100075F4+25j
		cmp	dword ptr [esi+8], 0
		jz	short loc_10007634
		push	dword ptr [esi+8]
		call	ds:PR_DestroyLock
		pop	ecx

loc_10007634:				; CODE XREF: sub_100075F4+34j
		cmp	dword ptr [esi+0Ch], 0
		jz	short loc_10007643
		push	dword ptr [esi+0Ch]
		call	PL_HashTableDestroy
		pop	ecx

loc_10007643:				; CODE XREF: sub_100075F4+44j
		push	esi
		call	PORT_Free_Util
		pop	ecx

loc_1000764A:				; CODE XREF: sub_100075F4+11j
		push	edi
		call	PORT_Free_Util
		pop	ecx
		pop	edi
		xor	eax, eax
		pop	esi
		retn
sub_100075F4	endp


; =============== S U B	R O U T	I N E =======================================


sub_10007656	proc near		; DATA XREF: sub_100078D2+C7o

arg_0		= dword	ptr  4

		push	[esp+arg_0]
		call	sub_100078B6
		pop	ecx
		test	eax, eax
		jnz	short loc_10007668
		push	5
		pop	eax
		retn
; ---------------------------------------------------------------------------

loc_10007668:				; CODE XREF: sub_10007656+Cj
		push	0
		push	eax
		call	sub_10007445
		neg	eax
		pop	ecx
		sbb	eax, eax
		pop	ecx
		and	eax, 5
		retn
sub_10007656	endp

; ---------------------------------------------------------------------------

loc_1000767A:				; DATA XREF: sub_100078D2+55o
		mov	ecx, [esp+4]
		xor	eax, eax
		cmp	ecx, [esp+8]
		setz	al
		retn

; =============== S U B	R O U T	I N E =======================================


sub_10007688	proc near		; CODE XREF: sub_100049D4+42p
					; sub_10006381+199p ...

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax]
		push	dword ptr [eax+8]
		call	ds:PR_Lock
		pop	ecx
		retn
sub_10007688	endp


; =============== S U B	R O U T	I N E =======================================


sub_10007699	proc near		; CODE XREF: sub_100049D4+5Ep
					; sub_100049D4+74p ...

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax]
		push	dword ptr [eax+8]
		call	ds:PR_Unlock
		pop	ecx
		retn
sub_10007699	endp


; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_100076AA(char	*, int)
sub_100076AA	proc near		; CODE XREF: sub_10007703+22p
					; sub_100077B2+1Dp

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_0]
		push	0Ch		; size_t
		push	offset aMultiaccess ; "multiaccess:"
		push	esi		; char *
		call	ds:strncmp
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_100076F0
		lea	ecx, [esi+0Ch]
		push	ecx
		call	PORT_Strdup_Util
		pop	ecx
		mov	ecx, [esp+4+arg_4]
		mov	[ecx], eax
		test	eax, eax
		jz	short loc_100076F0
		mov	esi, eax
		jmp	short loc_100076E2
; ---------------------------------------------------------------------------

loc_100076DC:				; CODE XREF: sub_100076AA+3Bj
		cmp	byte ptr [esi],	3Ah
		jz	short loc_100076EC
		inc	esi

loc_100076E2:				; CODE XREF: sub_100076AA+30j
		cmp	byte ptr [esi],	0
		jnz	short loc_100076DC
		cmp	byte ptr [esi],	3Ah
		jnz	short loc_100076F0

loc_100076EC:				; CODE XREF: sub_100076AA+35j
		mov	byte ptr [esi],	0
		inc	esi

loc_100076F0:				; CODE XREF: sub_100076AA+18j
					; sub_100076AA+2Cj ...
		mov	eax, esi
		pop	esi
		retn
sub_100076AA	endp


; =============== S U B	R O U T	I N E =======================================


sub_100076F4	proc near		; CODE XREF: sub_10007BE9+Dp
					; sub_10007DB6+6p ...

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax]
		mov	eax, [eax+0Ch]
		retn
sub_100076F4	endp


; =============== S U B	R O U T	I N E =======================================


sub_100076FE	proc near		; DATA XREF: sub_100078D2+5Ao

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		retn
sub_100076FE	endp


; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10007703(char	*, int,	int, int)
sub_10007703	proc near		; CODE XREF: legacy_Open+58p

var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ecx
		and	[esp+4+var_4], 0
		push	ebp
		push	edi
		mov	edi, [esp+0Ch+arg_4]
		mov	ebp, 0CE534351h
		test	edi, edi
		jnz	short loc_1000771C
		mov	edi, offset dword_100133A8

loc_1000771C:				; CODE XREF: sub_10007703+12j
		lea	eax, [esp+0Ch+var_4]
		push	eax		; int
		push	[esp+10h+arg_0]	; char *
		call	sub_100076AA
		push	edi
		push	eax
		push	offset aSS	; "%s/%s"
		call	ds:PR_smprintf
		add	esp, 14h
		mov	[esp+0Ch+arg_4], eax
		test	eax, eax
		jz	short loc_1000779B
		push	esi
		push	10h
		call	PORT_ZAlloc_Util
		mov	esi, eax
		pop	ecx
		test	esi, esi
		jz	short loc_1000778F
		push	0
		push	[esp+14h+arg_4]
		mov	dword ptr [esi+0Ch], 1
		push	offset loc_1000783D
		push	edi
		push	[esp+20h+var_4]
		push	[esp+24h+arg_8]
		push	esi
		call	sub_1000C7C0
		add	esp, 1Ch
		test	eax, eax
		jnz	short loc_10007783
		mov	eax, [esp+10h+arg_C]
		xor	ebp, ebp
		mov	[eax], esi
		xor	esi, esi

loc_10007783:				; CODE XREF: sub_10007703+74j
		test	esi, esi
		jz	short loc_1000778F
		push	esi
		call	ds:PR_Free
		pop	ecx

loc_1000778F:				; CODE XREF: sub_10007703+4Cj
					; sub_10007703+82j
		push	[esp+10h+arg_4]
		call	ds:PR_smprintf_free
		pop	ecx
		pop	esi

loc_1000779B:				; CODE XREF: sub_10007703+3Dj
		cmp	[esp+0Ch+var_4], 0
		jz	short loc_100077AC
		push	[esp+0Ch+var_4]
		call	PORT_Free_Util
		pop	ecx

loc_100077AC:				; CODE XREF: sub_10007703+9Dj
		pop	edi
		mov	eax, ebp
		pop	ebp
		pop	ecx
		retn
sub_10007703	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_100077B2(char	*, int,	int, int)
sub_100077B2	proc near		; CODE XREF: legacy_Open+9Cp

var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	ecx
		and	[ebp+var_4], 0
		push	ebx
		push	esi
		mov	esi, [ebp+arg_4]
		test	esi, esi
		jnz	short loc_100077C8
		mov	esi, offset dword_100133A8

loc_100077C8:				; CODE XREF: sub_100077B2+Fj
		lea	eax, [ebp+var_4]
		push	eax		; int
		push	[ebp+arg_0]	; char *
		call	sub_100076AA
		push	esi
		push	eax
		push	offset aSS	; "%s/%s"
		call	ds:PR_smprintf
		mov	ebx, eax
		add	esp, 14h
		test	ebx, ebx
		jnz	short loc_100077EF
		push	2
		pop	eax
		jmp	short loc_1000782D
; ---------------------------------------------------------------------------

loc_100077EF:				; CODE XREF: sub_100077B2+36j
		push	edi
		push	ebx
		push	offset sub_100079F7
		push	esi
		mov	esi, [ebp+var_4]
		push	esi
		push	[ebp+arg_8]
		call	sub_100022AC
		push	ebx
		mov	edi, eax
		call	ds:PR_smprintf_free
		add	esp, 18h
		test	esi, esi
		jz	short loc_1000781A
		push	esi
		call	PORT_Free_Util
		pop	ecx

loc_1000781A:				; CODE XREF: sub_100077B2+5Fj
		test	edi, edi
		jnz	short loc_10007825
		mov	eax, 0CE534352h
		jmp	short loc_1000782C
; ---------------------------------------------------------------------------

loc_10007825:				; CODE XREF: sub_100077B2+6Aj
		mov	eax, [ebp+arg_C]
		mov	[eax], edi
		xor	eax, eax

loc_1000782C:				; CODE XREF: sub_100077B2+71j
		pop	edi

loc_1000782D:				; CODE XREF: sub_100077B2+3Bj
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
sub_100077B2	endp


; =============== S U B	R O U T	I N E =======================================


sub_10007833	proc near		; DATA XREF: sub_100078D2+E3o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	dword_100153B0,	eax
		retn
sub_10007833	endp

; ---------------------------------------------------------------------------

loc_1000783D:				; DATA XREF: sub_10007703+5Bo
		mov	eax, [esp+8]
		push	esi
		push	edi
		xor	edi, edi
		sub	eax, 5
		jz	short loc_1000786F
		dec	eax
		jz	short loc_10007868
		dec	eax
		jz	short loc_10007861
		dec	eax
		jz	short loc_1000785A
		mov	eax, offset dword_100133A8
		jmp	short loc_10007874
; ---------------------------------------------------------------------------

loc_1000785A:				; CODE XREF: .text:10007851j
		mov	eax, offset a8	; "8"
		jmp	short loc_10007874
; ---------------------------------------------------------------------------

loc_10007861:				; CODE XREF: .text:1000784Ej
		mov	eax, offset a7	; "7"
		jmp	short loc_10007874
; ---------------------------------------------------------------------------

loc_10007868:				; CODE XREF: .text:1000784Bj
		mov	eax, offset a6	; "6"
		jmp	short loc_10007874
; ---------------------------------------------------------------------------

loc_1000786F:				; CODE XREF: .text:10007848j
		mov	eax, offset a5	; "5"

loc_10007874:				; CODE XREF: .text:10007858j
					; .text:1000785Fj ...
		push	eax
		push	dword ptr [esp+10h]
		push	offset aScertS_db ; "%scert%s.db"
		call	ds:PR_smprintf
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		jz	short loc_1000789E
		push	esi
		call	PORT_Strdup_Util
		push	esi
		mov	edi, eax
		call	ds:PR_smprintf_free
		pop	ecx
		pop	ecx

loc_1000789E:				; CODE XREF: .text:1000788Bj
		mov	eax, edi
		pop	edi
		pop	esi
		retn

; =============== S U B	R O U T	I N E =======================================


sub_100078A3	proc near		; CODE XREF: sub_100033E1+AFp
					; sub_1000455F+94p ...

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax]
		mov	eax, [eax]
		retn
sub_100078A3	endp


; =============== S U B	R O U T	I N E =======================================


sub_100078AC	proc near		; CODE XREF: sub_10001AD2+35p
					; sub_10001B87+35p ...

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax]
		mov	eax, [eax+4]
		retn
sub_100078AC	endp


; =============== S U B	R O U T	I N E =======================================


sub_100078B6	proc near		; CODE XREF: sub_100075AF+4p
					; .text:100075D7p ...

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax]
		mov	ecx, [eax]
		test	ecx, ecx
		jz	short loc_100078C5
		mov	eax, [ecx]
		retn
; ---------------------------------------------------------------------------

loc_100078C5:				; CODE XREF: sub_100078B6+Aj
		mov	eax, [eax+4]
		test	eax, eax
		jz	short loc_100078CF
		mov	eax, [eax]
		retn
; ---------------------------------------------------------------------------

loc_100078CF:				; CODE XREF: sub_100078B6+14j
		xor	eax, eax
		retn
sub_100078B6	endp


; =============== S U B	R O U T	I N E =======================================


sub_100078D2	proc near		; CODE XREF: legacy_Open+70p
					; legacy_Open+B5p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebx
		mov	ebx, [esp+4+arg_0]
		push	ebp
		push	esi
		push	edi
		xor	ebp, ebp
		push	50h
		mov	[ebx], ebp
		call	PORT_Alloc_Util
		mov	esi, eax
		pop	ecx
		test	esi, esi
		jz	loc_100079EF
		push	10h
		call	PORT_Alloc_Util
		mov	edi, eax
		pop	ecx
		test	edi, edi
		jz	loc_100079C0
		mov	ecx, [esp+10h+arg_8]
		mov	[edi], ecx
		mov	ecx, [esp+10h+arg_C]
		mov	[edi+4], ecx
		call	ds:PR_NewLock
		mov	[edi+8], eax
		test	eax, eax
		jz	loc_100079C0
		push	ebp
		push	ebp
		push	offset SECITEM_HashCompare
		push	offset loc_1000767A
		push	offset sub_100076FE
		push	40h
		call	PL_NewHashTable
		add	esp, 18h
		mov	[edi+0Ch], eax
		test	eax, eax
		jz	short loc_100079C0
		mov	eax, [esp+10h+arg_4]
		mov	[esi+0Ch], eax
		xor	eax, eax
		mov	[esi], edi
		mov	[esi+4], ebp
		mov	[esi+10h], ebp
		mov	dword ptr [esi+14h], offset sub_100065E1
		mov	dword ptr [esi+18h], offset sub_1000657F
		mov	dword ptr [esi+1Ch], offset sub_100065CD
		mov	dword ptr [esi+20h], offset sub_100047EF
		mov	dword ptr [esi+24h], offset sub_10004A66
		mov	dword ptr [esi+28h], offset sub_100051CA
		mov	dword ptr [esi+2Ch], offset sub_10006381
		mov	dword ptr [esi+30h], offset sub_10001AD2
		mov	dword ptr [esi+34h], offset sub_10001B87
		mov	dword ptr [esi+38h], offset loc_100075D3
		mov	dword ptr [esi+3Ch], offset sub_10007656
		mov	dword ptr [esi+40h], offset sub_100075AF
		mov	dword ptr [esi+44h], offset sub_10001C24
		mov	dword ptr [esi+48h], offset sub_100075F4
		mov	dword ptr [esi+4Ch], offset sub_10007833
		mov	[ebx], esi
		jmp	short loc_100079F2
; ---------------------------------------------------------------------------

loc_100079C0:				; CODE XREF: sub_100078D2+2Aj
					; sub_100078D2+48j ...
		push	esi
		call	PORT_Free_Util
		pop	ecx
		test	edi, edi
		jz	short loc_100079EF
		cmp	[edi+8], ebp
		jz	short loc_100079DA
		push	dword ptr [edi+8]
		call	ds:PR_DestroyLock
		pop	ecx

loc_100079DA:				; CODE XREF: sub_100078D2+FCj
		cmp	[edi+0Ch], ebp
		jz	short loc_100079E8
		push	dword ptr [edi+0Ch]
		call	PL_HashTableDestroy
		pop	ecx

loc_100079E8:				; CODE XREF: sub_100078D2+10Bj
		push	edi
		call	PORT_Free_Util
		pop	ecx

loc_100079EF:				; CODE XREF: sub_100078D2+18j
					; sub_100078D2+F7j
		push	2
		pop	eax

loc_100079F2:				; CODE XREF: sub_100078D2+ECj
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
sub_100078D2	endp


; =============== S U B	R O U T	I N E =======================================


sub_100079F7	proc near		; DATA XREF: sub_100077B2+3Fo

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_4]
		push	esi
		push	edi
		xor	edi, edi
		dec	eax
		jz	short loc_10007A1E
		dec	eax
		dec	eax
		jz	short loc_10007A17
		dec	eax
		jz	short loc_10007A10
		mov	eax, offset dword_100133A8
		jmp	short loc_10007A23
; ---------------------------------------------------------------------------

loc_10007A10:				; CODE XREF: sub_100079F7+10j
		mov	eax, offset a4	; "4"
		jmp	short loc_10007A23
; ---------------------------------------------------------------------------

loc_10007A17:				; CODE XREF: sub_100079F7+Dj
		mov	eax, offset a3	; "3"
		jmp	short loc_10007A23
; ---------------------------------------------------------------------------

loc_10007A1E:				; CODE XREF: sub_100079F7+9j
		mov	eax, offset a1	; "1"

loc_10007A23:				; CODE XREF: sub_100079F7+17j
					; sub_100079F7+1Ej ...
		push	eax
		push	[esp+0Ch+arg_0]
		push	offset aSkeyS_db ; "%skey%s.db"
		call	ds:PR_smprintf
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		jz	short loc_10007A4D
		push	esi
		call	PORT_Strdup_Util
		push	esi
		mov	edi, eax
		call	ds:PR_smprintf_free
		pop	ecx
		pop	ecx

loc_10007A4D:				; CODE XREF: sub_100079F7+43j
		mov	eax, edi
		pop	edi
		pop	esi
		retn
sub_100079F7	endp


; =============== S U B	R O U T	I N E =======================================


sub_10007A52	proc near		; CODE XREF: sub_10007A75+12p

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		sub	eax, 0
		jz	short loc_10007A71
		dec	eax
		dec	eax
		jz	short loc_10007A6D
		sub	eax, 300h
		jz	short loc_10007A69
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_10007A69:				; CODE XREF: sub_10007A52+12j
		push	4
		jmp	short loc_10007A6F
; ---------------------------------------------------------------------------

loc_10007A6D:				; CODE XREF: sub_10007A52+Bj
		push	2

loc_10007A6F:				; CODE XREF: sub_10007A52+19j
		pop	eax
		retn
; ---------------------------------------------------------------------------

loc_10007A71:				; CODE XREF: sub_10007A52+7j
		xor	eax, eax
		inc	eax
		retn
sub_10007A52	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10007A75	proc near		; CODE XREF: sub_100024FC+4Ap
					; sub_100029DF+2Ap ...

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		mov	ecx, dword_1001502C
		push	esi
		push	edi
		test	ecx, ecx
		jz	short loc_10007ABA

loc_10007A84:				; CODE XREF: sub_10007A75+7Fj
		push	[ebp+arg_C]
		call	sub_10007A52
		push	eax
		push	[ebp+arg_8]
		push	[ebp+arg_4]
		push	[ebp+arg_0]
		call	ecx
		mov	edi, eax
		add	esp, 14h
		test	edi, edi
		jnz	short loc_10007AB6
		mov	esi, [ebp+arg_10]
		test	esi, esi
		jz	short loc_10007AB6
		mov	ecx, dword_10015030
		test	ecx, ecx
		jz	short loc_10007AB6
		call	ecx ; dword_10015030
		mov	[esi], eax

loc_10007AB6:				; CODE XREF: sub_10007A75+2Aj
					; sub_10007A75+31j ...
		mov	eax, edi
		jmp	short loc_10007B10
; ---------------------------------------------------------------------------

loc_10007ABA:				; CODE XREF: sub_10007A75+Dj
		push	offset aRdb_dll	; "rdb.dll"
		call	ds:PR_LoadLibrary
		mov	edi, eax
		pop	ecx
		test	edi, edi
		jz	short loc_10007B0E
		mov	esi, ds:PR_FindSymbol
		push	offset aRdbstatus ; "rdbstatus"
		push	edi
		call	esi ; PR_FindSymbol
		push	offset aRdbopen	; "rdbopen"
		push	edi
		mov	dword_10015030,	eax
		call	esi ; PR_FindSymbol
		mov	ecx, eax
		add	esp, 10h
		mov	dword_1001502C,	ecx
		test	ecx, ecx
		jnz	short loc_10007A84
		push	offset aNss_disable_un ; "NSS_DISABLE_UNLOAD"
		call	ds:PR_GetEnv
		pop	ecx
		test	eax, eax
		jnz	short loc_10007B0E
		push	edi
		call	ds:PR_UnloadLibrary
		pop	ecx

loc_10007B0E:				; CODE XREF: sub_10007A75+55j
					; sub_10007A75+8Fj
		xor	eax, eax

loc_10007B10:				; CODE XREF: sub_10007A75+43j
		pop	edi
		pop	esi
		pop	ebp
		retn
sub_10007A75	endp

; Exported entry   6. legacy_SetCryptFunctions

; =============== S U B	R O U T	I N E =======================================


		public legacy_SetCryptFunctions
legacy_SetCryptFunctions proc near	; DATA XREF: .rdata:off_10013DC8o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		mov	dword_10015034,	eax
		mov	eax, [esp+arg_4]
		mov	dword_10015038,	eax
		retn
legacy_SetCryptFunctions endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10007B27	proc near		; CODE XREF: sub_10005715+7Bp
					; sub_1000582E+7Cp ...

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		push	esi
		mov	esi, [ebp+arg_10]
		push	edi
		push	[ebp+arg_C]
		push	[ebp+arg_8]
		and	dword ptr [esi+4], 0
		push	[ebp+arg_4]
		call	sub_10007C17
		mov	edi, eax
		add	esp, 0Ch
		test	edi, edi
		jnz	short loc_10007B51
		mov	eax, 0D0h
		jmp	short loc_10007B7E
; ---------------------------------------------------------------------------

loc_10007B51:				; CODE XREF: sub_10007B27+21j
		push	dword ptr [edi+8]
		push	esi
		push	[ebp+arg_0]
		call	SECITEM_AllocItem_Util
		add	esp, 0Ch
		cmp	dword ptr [esi+4], 0
		jnz	short loc_10007B6B
		push	2
		pop	eax
		jmp	short loc_10007B7E
; ---------------------------------------------------------------------------

loc_10007B6B:				; CODE XREF: sub_10007B27+3Dj
		push	dword ptr [esi+8] ; size_t
		push	dword ptr [edi+4] ; void *
		push	dword ptr [esi+4] ; void *
		call	memcpy
		add	esp, 0Ch
		xor	eax, eax

loc_10007B7E:				; CODE XREF: sub_10007B27+28j
					; sub_10007B27+42j
		pop	edi
		pop	esi
		pop	ebp
		retn
sub_10007B27	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10007B82	proc near		; CODE XREF: sub_10005B1C+4Cp

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		push	edi
		push	[ebp+arg_C]
		push	[ebp+arg_8]
		push	[ebp+arg_4]
		call	sub_10007C17
		mov	edi, eax
		add	esp, 0Ch
		test	edi, edi
		jnz	short loc_10007BA4
		mov	eax, 0D0h
		jmp	short loc_10007BE6
; ---------------------------------------------------------------------------

loc_10007BA4:				; CODE XREF: sub_10007B82+19j
		cmp	[ebp+arg_0], 0
		push	ebx
		mov	ebx, [edi+8]
		push	esi
		mov	esi, [ebp+arg_10]
		push	ebx
		jz	short loc_10007BBE
		push	[ebp+arg_0]
		call	PORT_ArenaAlloc_Util
		pop	ecx
		jmp	short loc_10007BC3
; ---------------------------------------------------------------------------

loc_10007BBE:				; CODE XREF: sub_10007B82+2Fj
		call	PORT_Alloc_Util

loc_10007BC3:				; CODE XREF: sub_10007B82+3Aj
		mov	[esi+4], eax
		pop	ecx
		test	eax, eax
		jnz	short loc_10007BD0
		push	2
		pop	eax
		jmp	short loc_10007BE4
; ---------------------------------------------------------------------------

loc_10007BD0:				; CODE XREF: sub_10007B82+47j
		push	ebx		; size_t
		mov	[esi+8], ebx
		push	dword ptr [edi+4] ; void *
		push	dword ptr [esi+4] ; void *
		call	memcpy
		add	esp, 0Ch
		xor	eax, eax

loc_10007BE4:				; CODE XREF: sub_10007B82+4Cj
		pop	esi
		pop	ebx

loc_10007BE6:				; CODE XREF: sub_10007B82+20j
		pop	edi
		pop	ebp
		retn
sub_10007B82	endp


; =============== S U B	R O U T	I N E =======================================


sub_10007BE9	proc near		; CODE XREF: sub_100075F4+9p

arg_0		= dword	ptr  4

		push	[esp+arg_0]
		call	sub_10007688
		push	[esp+4+arg_0]
		call	sub_100076F4
		push	0
		push	offset sub_10007E41
		push	eax
		call	PL_HashTableEnumerateEntries
		push	[esp+14h+arg_0]
		call	sub_10007699
		add	esp, 18h
		xor	eax, eax
		retn
sub_10007BE9	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10007C17	proc near		; CODE XREF: sub_10005372+BFp
					; sub_10005593+46p ...

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		xor	eax, eax
		cmp	[ebp+arg_8], eax
		jbe	short loc_10007C34
		mov	ecx, [ebp+arg_4]
		mov	edx, [ebp+arg_0]

loc_10007C27:				; CODE XREF: sub_10007C17+1Bj
		cmp	[ecx], edx
		jz	short loc_10007C38
		inc	eax
		add	ecx, 0Ch
		cmp	eax, [ebp+arg_8]
		jb	short loc_10007C27

loc_10007C34:				; CODE XREF: sub_10007C17+8j
		xor	eax, eax
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_10007C38:				; CODE XREF: sub_10007C17+12j
		imul	eax, 0Ch
		add	eax, [ebp+arg_4]
		pop	ebp
		retn
sub_10007C17	endp


; =============== S U B	R O U T	I N E =======================================


sub_10007C40	proc near		; CODE XREF: sub_10004E83+2Ep
					; sub_100051CA+14p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	esi
		push	[esp+4+arg_8]
		xor	esi, esi
		push	[esp+8+arg_4]
		push	[esp+0Ch+arg_0]
		call	sub_10007C17
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_10007C62
		mov	eax, 0D0h
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10007C62:				; CODE XREF: sub_10007C40+19j
		cmp	dword ptr [eax+8], 4
		jz	short loc_10007C6D
		push	13h
		pop	eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10007C6D:				; CODE XREF: sub_10007C40+26j
		push	edi
		mov	edi, [eax+4]
		mov	edx, esi

loc_10007C73:				; CODE XREF: sub_10007C40+47j
		movzx	eax, byte ptr [edx+edi]
		push	3
		pop	ecx
		sub	ecx, edx
		shl	ecx, 3
		shl	eax, cl
		or	esi, eax
		inc	edx
		cmp	edx, 4
		jl	short loc_10007C73
		mov	eax, [esp+8+arg_C]
		pop	edi
		mov	[eax], esi
		xor	eax, eax
		pop	esi
		retn
sub_10007C40	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10007C94	proc near		; CODE XREF: sub_10005E7E+D0p
					; sub_10005E7E+189p ...

var_10		= byte ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	esi
		push	edi
		push	[ebp+arg_C]
		mov	edi, [ebp+arg_10]
		xor	esi, esi
		push	[ebp+arg_8]
		mov	[ebp+var_4], esi
		push	[ebp+arg_4]
		mov	[edi+4], esi
		call	sub_10007C17
		mov	ecx, eax
		add	esp, 0Ch
		test	ecx, ecx
		jnz	short loc_10007CC5
		mov	eax, 0D0h
		jmp	short loc_10007D2D
; ---------------------------------------------------------------------------

loc_10007CC5:				; CODE XREF: sub_10007C94+28j
		mov	eax, [ecx+4]
		mov	[ebp+var_C], eax
		mov	eax, [ecx+8]
		mov	[ebp+var_8], eax
		lea	eax, [ebp+var_4]
		push	eax
		lea	eax, [ebp+var_10]
		push	eax
		push	[ebp+arg_14]
		call	sub_10008058
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_10007CEF
		mov	eax, 101h
		jmp	short loc_10007D2D
; ---------------------------------------------------------------------------

loc_10007CEF:				; CODE XREF: sub_10007C94+52j
		mov	eax, [ebp+var_4]
		push	dword ptr [eax+8]
		push	edi
		push	[ebp+arg_0]
		call	SECITEM_AllocItem_Util
		add	esp, 0Ch
		cmp	[edi+4], esi
		jnz	short loc_10007D0B
		push	2
		pop	esi
		jmp	short loc_10007D1F
; ---------------------------------------------------------------------------

loc_10007D0B:				; CODE XREF: sub_10007C94+70j
		mov	eax, [ebp+var_4]
		push	dword ptr [edi+8] ; size_t
		push	dword ptr [eax+4] ; void *
		push	dword ptr [edi+4] ; void *
		call	memcpy
		add	esp, 0Ch

loc_10007D1F:				; CODE XREF: sub_10007C94+75j
		push	1
		push	[ebp+var_4]
		call	SECITEM_FreeItem_Util
		pop	ecx
		pop	ecx
		mov	eax, esi

loc_10007D2D:				; CODE XREF: sub_10007C94+2Fj
					; sub_10007C94+59j
		pop	edi
		pop	esi
		mov	esp, ebp
		pop	ebp
		retn
sub_10007C94	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10007D33	proc near		; CODE XREF: sub_10006254+85p
		push	ebp
		mov	ebp, esp
		pop	ebp
		jmp	sub_10007C94
sub_10007D33	endp


; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10007D3C(void	*, int,	int)
sub_10007D3C	proc near		; CODE XREF: sub_10007EF9+1Fp
					; sub_10007FA5+1Fp

var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ecx
		push	esi
		mov	esi, [esp+8+arg_0]
		push	4		; size_t
		push	0		; int
		push	esi		; void *
		call	memset
		mov	eax, [esp+14h+arg_8]
		add	esp, 0Ch
		add	eax, 0FFFFFFFCh
		test	eax, eax
		jle	short loc_10007DB3
		mov	dl, [esi+3]
		push	ebx
		mov	bl, [esi+1]
		mov	bh, [esi+2]
		push	ebp
		push	edi
		mov	edi, [esp+14h+arg_4]
		mov	ebp, edi
		mov	byte ptr [esp+14h+arg_8], dl
		mov	edx, edi
		lea	ecx, [edi+1]
		sub	edx, ecx
		sub	ebp, ecx
		mov	[esp+14h+var_4], edx
		sub	edi, ecx
		lea	edx, [eax-1]
		shr	edx, 2
		inc	edx

loc_10007D86:				; CODE XREF: sub_10007D3C+72j
		mov	al, [ecx+ebp]
		xor	[esi], al
		xor	bl, [ecx]
		lea	ecx, [ecx+4]
		mov	eax, [esp+14h+var_4]
		mov	[esi+1], bl
		xor	bh, [eax+ecx-2]
		mov	al, byte ptr [esp+14h+arg_8]
		mov	[esi+2], bh
		xor	al, [edi+ecx-1]
		mov	byte ptr [esp+14h+arg_8], al
		mov	[esi+3], al
		dec	edx
		jnz	short loc_10007D86
		pop	edi
		pop	ebp
		pop	ebx

loc_10007DB3:				; CODE XREF: sub_10007D3C+1Cj
		pop	esi
		pop	ecx
		retn
sub_10007D3C	endp


; =============== S U B	R O U T	I N E =======================================


sub_10007DB6	proc near		; CODE XREF: sub_10007EF9+8Ep

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi
		push	edi
		push	[esp+8+arg_0]
		call	sub_100076F4
		push	[esp+0Ch+arg_8]
		mov	edi, eax
		call	SECITEM_DupItem_Util
		mov	esi, eax
		pop	ecx
		pop	ecx
		test	esi, esi
		jnz	short loc_10007DD9

loc_10007DD4:				; CODE XREF: sub_10007DB6+3Fj
		or	eax, 0FFFFFFFFh
		jmp	short loc_10007DF9
; ---------------------------------------------------------------------------

loc_10007DD9:				; CODE XREF: sub_10007DB6+1Cj
		push	esi
		push	[esp+0Ch+arg_4]
		push	edi
		call	PL_HashTableAdd
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_10007DF7
		push	1
		push	esi
		call	SECITEM_FreeItem_Util
		pop	ecx
		pop	ecx
		jmp	short loc_10007DD4
; ---------------------------------------------------------------------------

loc_10007DF7:				; CODE XREF: sub_10007DB6+33j
		xor	eax, eax

loc_10007DF9:				; CODE XREF: sub_10007DB6+21j
		pop	edi
		pop	esi
		retn
sub_10007DB6	endp


; =============== S U B	R O U T	I N E =======================================


sub_10007DFC	proc near		; CODE XREF: sub_10006381+1A0p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		push	edi
		push	[esp+8+arg_0]
		call	sub_100076F4
		push	[esp+0Ch+arg_4]
		mov	esi, eax
		push	esi
		call	PL_HashTableLookup
		push	[esp+14h+arg_4]
		mov	edi, eax
		push	esi
		call	PL_HashTableRemove
		mov	esi, eax
		add	esp, 14h
		test	esi, esi
		jz	short loc_10007E36
		test	edi, edi
		jz	short loc_10007E36
		push	1
		push	edi
		call	SECITEM_FreeItem_Util
		pop	ecx
		pop	ecx

loc_10007E36:				; CODE XREF: sub_10007DFC+2Aj
					; sub_10007DFC+2Ej
		xor	eax, eax
		test	esi, esi
		pop	edi
		setnz	al
		dec	eax
		pop	esi
		retn
sub_10007DFC	endp


; =============== S U B	R O U T	I N E =======================================


sub_10007E41	proc near		; DATA XREF: sub_10007BE9+14o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		push	1
		push	dword ptr [eax+0Ch]
		call	SECITEM_FreeItem_Util
		pop	ecx
		pop	ecx
		xor	eax, eax
		retn
sub_10007E41	endp


; =============== S U B	R O U T	I N E =======================================


sub_10007E54	proc near		; CODE XREF: sub_10005372+E6p
					; sub_10005372+1AFp ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi
		push	edi
		push	[esp+8+arg_8]
		xor	edi, edi
		push	[esp+0Ch+arg_4]
		push	[esp+10h+arg_0]
		call	sub_10007C17
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		jnz	short loc_10007E76

loc_10007E72:				; CODE XREF: sub_10007E54+36j
		xor	eax, eax
		jmp	short loc_10007EA4
; ---------------------------------------------------------------------------

loc_10007E76:				; CODE XREF: sub_10007E54+1Cj
		cmp	[esi+4], edi
		jz	short loc_10007EA2
		mov	eax, [esi+8]
		inc	eax
		push	eax
		call	PORT_Alloc_Util
		mov	edi, eax
		pop	ecx
		test	edi, edi
		jz	short loc_10007E72
		push	dword ptr [esi+8] ; size_t
		push	dword ptr [esi+4] ; void *
		push	edi		; void *
		call	memcpy
		mov	eax, [esi+8]
		add	esp, 0Ch
		mov	byte ptr [edi+eax], 0

loc_10007EA2:				; CODE XREF: sub_10007E54+25j
		mov	eax, edi

loc_10007EA4:				; CODE XREF: sub_10007E54+20j
		pop	edi
		pop	esi
		retn
sub_10007E54	endp


; =============== S U B	R O U T	I N E =======================================


sub_10007EA7	proc near		; CODE XREF: sub_10005E7E+F0p
					; sub_10005E7E+1A6p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	[esp+arg_8]
		push	[esp+4+arg_4]
		push	[esp+8+arg_0]
		call	sub_10007C17
		add	esp, 0Ch
		neg	eax
		sbb	eax, eax
		neg	eax
		retn
sub_10007EA7	endp


; =============== S U B	R O U T	I N E =======================================


sub_10007EC2	proc near		; CODE XREF: sub_10005372+71p
					; sub_10005593+1Dp ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	[esp+arg_8]
		push	[esp+4+arg_4]
		push	[esp+8+arg_0]
		call	sub_10007C17
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_10007EDB
		retn
; ---------------------------------------------------------------------------

loc_10007EDB:				; CODE XREF: sub_10007EC2+16j
		mov	eax, [eax+4]
		movzx	eax, byte ptr [eax]
		retn
sub_10007EC2	endp


; =============== S U B	R O U T	I N E =======================================


sub_10007EE2	proc near		; CODE XREF: sub_100049D4+52p
					; sub_10006381+28p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	[esp+arg_0]
		call	sub_100076F4
		push	[esp+4+arg_4]
		push	eax
		call	PL_HashTableLookup
		add	esp, 0Ch
		retn
sub_10007EE2	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10007EF9	proc near		; CODE XREF: sub_10005372+1F7p
					; sub_10005593+F3p ...

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	ebx
		mov	ebx, [ebp+arg_4]
		push	esi
		mov	esi, [ebp+arg_8]
		push	edi
		mov	edi, 28000001h
		cmp	esi, edi
		jz	short loc_10007F54
		push	dword ptr [ebx+8] ; int
		lea	eax, [ebp+arg_8]
		push	dword ptr [ebx+4] ; int
		push	eax		; void *
		call	sub_10007D3C
		mov	eax, [ebp+arg_8]
		add	esp, 0Ch
		movzx	ecx, al
		shl	ecx, 8
		movzx	eax, ah
		or	ecx, eax
		movzx	eax, byte ptr [ebp+arg_8+3]
		shl	ecx, 10h
		or	ecx, eax
		movzx	eax, byte ptr [ebp+arg_8+2]
		and	eax, 7FFFFh
		and	ecx, 7FFFFFFh
		shl	eax, 8
		or	ecx, eax
		or	esi, ecx
		cmp	esi, edi
		jnz	short loc_10007F54
		lea	esi, [edi+1]

loc_10007F54:				; CODE XREF: sub_10007EF9+13j
					; sub_10007EF9+56j
		mov	edi, [ebp+arg_0]
		push	edi
		call	sub_10007688
		push	esi
		push	edi
		call	sub_10007EE2
		add	esp, 0Ch
		jmp	short loc_10007F80
; ---------------------------------------------------------------------------

loc_10007F69:				; CODE XREF: sub_10007EF9+89j
		push	ebx
		push	eax
		call	SECITEM_ItemsAreEqual_Util
		pop	ecx
		pop	ecx
		test	eax, eax
		jnz	short loc_10007F9C
		inc	esi
		push	esi
		push	edi
		call	sub_10007EE2
		pop	ecx
		pop	ecx

loc_10007F80:				; CODE XREF: sub_10007EF9+6Ej
		test	eax, eax
		jnz	short loc_10007F69
		push	ebx
		push	esi
		push	edi
		call	sub_10007DB6
		push	edi
		call	sub_10007699
		add	esp, 10h

loc_10007F95:				; CODE XREF: sub_10007EF9+AAj
		pop	edi
		mov	eax, esi
		pop	esi
		pop	ebx
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_10007F9C:				; CODE XREF: sub_10007EF9+7Bj
		push	edi
		call	sub_10007699
		pop	ecx
		jmp	short loc_10007F95
sub_10007EF9	endp


; =============== S U B	R O U T	I N E =======================================


sub_10007FA5	proc near		; CODE XREF: sub_10005593+E4p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebp
		mov	ebp, [esp+4+arg_4]
		push	esi
		mov	esi, [esp+8+arg_8]
		push	edi
		mov	edi, 28000001h
		cmp	esi, edi
		jz	short loc_10008003
		push	dword ptr [ebp+8] ; int
		lea	eax, [esp+10h+arg_8]
		push	dword ptr [ebp+4] ; int
		push	eax		; void *
		call	sub_10007D3C
		mov	eax, [esp+18h+arg_8]
		add	esp, 0Ch
		movzx	ecx, al
		shl	ecx, 8
		movzx	eax, ah
		or	ecx, eax
		movzx	eax, byte ptr [esp+0Ch+arg_8+3]
		shl	ecx, 10h
		or	ecx, eax
		movzx	eax, byte ptr [esp+0Ch+arg_8+2]
		and	eax, 7FFFFh
		and	ecx, 7FFFFFFh
		shl	eax, 8
		or	ecx, eax
		or	esi, ecx
		cmp	esi, edi
		jnz	short loc_10008003
		lea	esi, [edi+1]

loc_10008003:				; CODE XREF: sub_10007FA5+12j
					; sub_10007FA5+59j
		push	[esp+0Ch+arg_0]
		call	sub_10007688
		push	esi
		push	[esp+14h+arg_0]
		call	sub_10007EE2
		add	esp, 0Ch
		jmp	short loc_10008035
; ---------------------------------------------------------------------------

loc_1000801B:				; CODE XREF: sub_10007FA5+94j
		push	ebp
		push	edi
		call	SECITEM_ItemsAreEqual_Util
		pop	ecx
		pop	ecx
		test	eax, eax
		jnz	short loc_1000804D
		inc	esi
		push	esi
		push	[esp+10h+arg_0]
		call	sub_10007EE2
		pop	ecx
		pop	ecx

loc_10008035:				; CODE XREF: sub_10007FA5+74j
		mov	edi, eax
		test	edi, edi
		jnz	short loc_1000801B
		xor	esi, esi

loc_1000803D:				; CODE XREF: sub_10007FA5+B1j
		push	[esp+0Ch+arg_0]
		call	sub_10007699
		pop	ecx
		pop	edi
		mov	eax, esi
		pop	esi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_1000804D:				; CODE XREF: sub_10007FA5+81j
		mov	eax, [edi+4]
		xor	esi, esi
		xor	byte ptr [eax],	80h
		inc	esi
		jmp	short loc_1000803D
sub_10007FA5	endp


; =============== S U B	R O U T	I N E =======================================


sub_10008058	proc near		; CODE XREF: sub_10002C73+8Ap
					; sub_10007C94+48p
		mov	eax, dword_10015038
		test	eax, eax
		jnz	short loc_10008070
		push	0FFFFE001h
		call	PORT_SetError_Util
		pop	ecx
		or	eax, 0FFFFFFFFh
		retn
; ---------------------------------------------------------------------------

loc_10008070:				; CODE XREF: sub_10008058+7j
		jmp	eax
sub_10008058	endp


; =============== S U B	R O U T	I N E =======================================


sub_10008072	proc near		; CODE XREF: sub_10002FBF+1A1p
					; sub_10003344+29p
		mov	eax, dword_10015034
		test	eax, eax
		jnz	short loc_1000808A
		push	0FFFFE001h
		call	PORT_SetError_Util
		pop	ecx
		or	eax, 0FFFFFFFFh
		retn
; ---------------------------------------------------------------------------

loc_1000808A:				; CODE XREF: sub_10008072+7j
		jmp	eax
sub_10008072	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000808C	proc near		; CODE XREF: sub_100088CD+33p
					; sub_100088CD+67p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_4]
		movzx	eax, al
		sub	eax, 17h
		jz	short loc_100080A6
		dec	eax
		jnz	short locret_100080B0
		mov	eax, [esp+arg_0]
		mov	dword ptr [eax], 0Ch
		retn
; ---------------------------------------------------------------------------

loc_100080A6:				; CODE XREF: sub_1000808C+Aj
		mov	eax, [esp+arg_0]
		mov	dword ptr [eax], 0Bh

locret_100080B0:			; CODE XREF: sub_1000808C+Dj
		retn
sub_1000808C	endp


; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_100080B1(int,	char *)
sub_100080B1	proc near		; CODE XREF: sub_10005372+107p
					; sub_100093C7+Cp ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebx
		push	ebp
		push	esi
		push	edi
		call	sub_1000C104
		mov	ebx, eax
		test	ebx, ebx
		jz	loc_1000818F
		mov	esi, [esp+10h+arg_0]
		lea	eax, [ebx+7Ch]
		push	eax
		lea	edi, [ebx+8]
		xor	ebp, ebp
		lea	eax, [ebx+44h]
		movsd
		push	eax
		lea	eax, [ebx+60h]
		push	eax
		movsd
		lea	eax, [ebx+38h]
		push	eax
		lea	eax, [ebx+20h]
		push	eax
		movsd
		lea	esi, [ebx+2Ch]
		mov	[ebx+88h], ebp
		push	esi
		lea	edi, [ebx+14h]
		mov	[ebx+58h], ebp
		push	edi
		push	dword ptr [ebx+10h]
		mov	dword ptr [ebx+94h], 1
		push	dword ptr [ebx+0Ch]
		call	sub_1000866C
		add	esp, 24h
		test	eax, eax
		jnz	short loc_10008188
		lea	eax, [ebx+54h]
		mov	[ebx+74h], ebp
		push	eax
		push	esi
		push	edi
		lea	eax, [ebx+228h]
		mov	[ebx+78h], ebp
		push	200h
		push	eax
		mov	[ebx+6Ch], ebp
		mov	[ebx+90h], ebp
		mov	[ebx+4], ebp
		call	sub_10008B45
		add	esp, 14h
		test	eax, eax
		jnz	short loc_10008188
		cmp	[esp+10h+arg_4], ebp
		jnz	short loc_1000814F
		mov	[ebx+88h], ebp
		jmp	short loc_1000816D
; ---------------------------------------------------------------------------

loc_1000814F:				; CODE XREF: sub_100080B1+94j
		push	0C8h		; int
		lea	eax, [ebx+98h]
		push	eax		; void *
		push	[esp+18h+arg_4]	; char *
		call	sub_1000D0B4
		add	esp, 0Ch
		mov	[ebx+88h], eax

loc_1000816D:				; CODE XREF: sub_100080B1+9Cj
		push	ebx
		call	sub_10008969
		mov	[ebx+8Ch], eax
		mov	eax, ebx
		pop	ecx
		mov	dword ptr [ebx+94h], 1
		jmp	short loc_10008191
; ---------------------------------------------------------------------------

loc_10008188:				; CODE XREF: sub_100080B1+5Ej
					; sub_100080B1+8Ej
		push	ebx		; void *
		call	sub_1000C1A9
		pop	ecx

loc_1000818F:				; CODE XREF: sub_100080B1+Dj
		xor	eax, eax

loc_10008191:				; CODE XREF: sub_100080B1+D5j
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
sub_100080B1	endp


; =============== S U B	R O U T	I N E =======================================


sub_10008196	proc near		; CODE XREF: sub_10008969+32p

var_1C		= dword	ptr -1Ch
var_18		= byte ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= byte ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 1Ch
		push	ebx
		push	ebp
		push	esi
		push	edi
		push	0
		push	0
		lea	eax, [esp+34h+var_1C]
		push	eax
		mov	eax, [esp+38h+arg_0]
		push	dword ptr [eax+84h]
		push	dword ptr [eax+80h]
		call	sub_10008BA3
		mov	ebp, [esp+40h+var_1C]
		add	esp, 14h
		mov	ebx, eax

loc_100081C4:				; CODE XREF: sub_10008196+AAj
		test	ebx, ebx
		jz	loc_10008320
		test	ebp, ebp
		jz	loc_10008320
		push	0
		push	0
		lea	eax, [esp+34h+arg_0]
		push	eax
		push	ebp
		push	ebx
		call	sub_10008BA3
		mov	esi, eax
		add	esp, 14h
		test	esi, esi
		jz	loc_10008320
		mov	edi, [esp+2Ch+arg_0]
		lea	eax, [esp+2Ch+var_1C]
		push	0
		push	0
		push	eax
		sub	ebx, edi
		sub	ebx, esi
		push	edi
		add	ebp, ebx
		lea	ebx, [edi+esi]
		push	esi
		call	sub_10008BA3
		add	esp, 14h
		test	eax, eax
		jz	loc_10008320
		mov	ecx, [esp+2Ch+var_1C]
		sub	esi, ecx
		sub	esi, eax
		mov	[esp+2Ch+var_14], eax
		add	edi, esi
		mov	[esp+2Ch+var_10], ecx
		mov	[esp+2Ch+arg_0], edi
		lea	esi, [ecx+eax]
		lea	eax, [esp+2Ch+var_18]
		push	eax
		call	SECOID_FindOIDTag_Util
		pop	ecx
		cmp	eax, 53h
		jnz	short loc_100081C4
		xor	ebx, ebx
		cmp	byte ptr [esi],	1
		jnz	short loc_1000826F
		push	ebx
		push	ebx
		lea	eax, [esp+34h+arg_0]
		push	eax
		push	edi
		push	esi
		call	sub_10008BA3
		add	esp, 14h
		test	eax, eax
		jz	loc_10008320
		mov	ecx, [esp+2Ch+arg_0]
		sub	esi, ecx
		sub	esi, eax
		add	edi, esi
		lea	esi, [ecx+eax]

loc_1000826F:				; CODE XREF: sub_10008196+B1j
		push	ebx
		push	ebx
		lea	eax, [esp+34h+arg_0]
		push	eax
		push	edi
		push	esi
		call	sub_10008BA3
		add	esp, 14h
		test	eax, eax
		jz	loc_10008320
		push	ebx
		push	ebx
		lea	ecx, [esp+34h+arg_0]
		push	ecx
		push	[esp+38h+arg_0]
		push	eax
		call	sub_10008BA3
		mov	esi, eax
		add	esp, 14h
		test	esi, esi
		jz	short loc_10008320
		mov	ebp, [esp+2Ch+arg_0]

loc_100082A6:				; CODE XREF: sub_10008196+169j
		test	ebp, ebp
		jz	short loc_10008320
		push	ebx
		push	ebx
		lea	eax, [esp+34h+arg_0]
		push	eax
		push	ebp
		push	esi
		call	sub_10008BA3
		mov	ebx, eax
		add	esp, 14h
		test	ebx, ebx
		jz	short loc_10008320
		cmp	byte ptr [esi],	0A2h
		mov	edi, [esp+2Ch+arg_0]
		jnz	short loc_100082EB
		push	[esp+2Ch+arg_8]
		lea	eax, [esp+30h+var_C]
		mov	[esp+30h+var_8], ebx
		push	[esp+30h+arg_4]
		mov	[esp+34h+var_4], edi
		push	eax
		call	sub_1000832A
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_10008322

loc_100082EB:				; CODE XREF: sub_10008196+132j
		cmp	byte ptr [esi],	81h
		jz	short loc_10008301
		sub	esi, edi
		sub	esi, ebx
		add	ebp, esi
		lea	esi, [edi+ebx]
		test	esi, esi
		jz	short loc_10008320
		xor	ebx, ebx
		jmp	short loc_100082A6
; ---------------------------------------------------------------------------

loc_10008301:				; CODE XREF: sub_10008196+158j
		push	[esp+2Ch+arg_8]	; int
		lea	eax, [edi+1]
		push	[esp+30h+arg_4]	; int
		push	eax		; size_t
		push	ebx		; void *
		call	sub_1000D0E9
		add	esp, 10h
		test	eax, eax
		jz	short loc_10008322
		mov	byte ptr [eax+edi], 0
		jmp	short loc_10008322
; ---------------------------------------------------------------------------

loc_10008320:				; CODE XREF: sub_10008196+30j
					; sub_10008196+38j ...
		xor	eax, eax

loc_10008322:				; CODE XREF: sub_10008196+153j
					; sub_10008196+182j ...
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 1Ch
		retn
sub_10008196	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000832A	proc near		; CODE XREF: sub_10008196+149p
					; sub_10008969+19p

var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= byte ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 24h
		lea	eax, [esp+24h+var_1C]
		push	esi
		push	0
		push	0
		push	eax
		mov	eax, [esp+34h+arg_0]
		push	dword ptr [eax+8]
		push	dword ptr [eax+4]
		call	sub_10008BA3
		mov	esi, eax
		add	esp, 14h
		test	esi, esi
		jz	loc_1000845E
		push	ebx
		push	ebp
		mov	ebp, [esp+30h+var_1C]
		push	edi
		jmp	loc_10008451
; ---------------------------------------------------------------------------

loc_1000835F:				; CODE XREF: sub_1000832A+129j
		push	0
		push	0
		lea	eax, [esp+3Ch+var_20]
		push	eax
		push	ebp
		push	esi
		call	sub_10008BA3
		mov	edi, eax
		add	esp, 14h
		test	edi, edi
		jz	loc_10008459
		mov	ebx, [esp+34h+var_20]
		sub	esi, ebx
		sub	esi, edi
		add	ebp, esi
		lea	esi, [ebx+edi]
		jmp	loc_10008449
; ---------------------------------------------------------------------------

loc_1000838E:				; CODE XREF: sub_1000832A+121j
		push	0
		push	0
		lea	eax, [esp+3Ch+arg_0]
		push	eax
		push	ebx
		push	edi
		call	sub_10008BA3
		add	esp, 14h
		mov	[esp+34h+var_18], eax
		test	eax, eax
		jz	loc_10008459
		mov	ecx, [esp+34h+arg_0]
		lea	edx, [esp+34h+var_24]
		push	0
		push	0
		sub	edi, ecx
		mov	[esp+3Ch+arg_0], ecx
		push	edx
		sub	edi, eax
		push	ecx
		add	ebx, edi
		lea	edi, [ecx+eax]
		push	eax
		mov	[esp+48h+var_20], ebx
		call	sub_10008BA3
		mov	edx, eax
		add	esp, 14h
		mov	[esp+34h+var_14], edx
		test	edx, edx
		jz	short loc_10008459
		mov	eax, [esp+34h+var_18]
		sub	eax, [esp+34h+var_24]
		mov	ecx, [esp+34h+arg_0]
		sub	eax, edx
		add	edx, [esp+34h+var_24]
		add	ecx, eax
		push	0
		push	0
		lea	eax, [esp+3Ch+var_1C]
		mov	[esp+3Ch+arg_0], ecx
		push	eax
		push	ecx
		push	edx
		mov	[esp+48h+var_18], edx
		call	sub_10008BA3
		add	esp, 14h
		mov	[esp+34h+var_10], eax
		test	eax, eax
		jz	short loc_10008459
		mov	ecx, [esp+34h+var_18]
		sub	ecx, [esp+34h+var_1C]
		sub	ecx, eax
		mov	eax, [esp+34h+var_14]
		add	[esp+34h+arg_0], ecx
		mov	[esp+34h+var_8], eax
		mov	eax, [esp+34h+var_24]
		mov	[esp+34h+var_4], eax
		lea	eax, [esp+34h+var_C]
		push	eax
		call	SECOID_FindOIDTag_Util
		pop	ecx
		cmp	eax, 1Fh
		jz	short loc_10008463
		cmp	eax, 63h
		jz	short loc_10008463

loc_10008449:				; CODE XREF: sub_1000832A+5Fj
		test	ebx, ebx
		jnz	loc_1000838E

loc_10008451:				; CODE XREF: sub_1000832A+30j
		test	ebp, ebp
		jnz	loc_1000835F

loc_10008459:				; CODE XREF: sub_1000832A+4Cj
					; sub_1000832A+7Dj ...
		xor	eax, eax

loc_1000845B:				; CODE XREF: sub_1000832A+157j
					; sub_1000832A+15Dj
		pop	edi
		pop	ebp
		pop	ebx

loc_1000845E:				; CODE XREF: sub_1000832A+23j
		pop	esi
		add	esp, 24h
		retn
; ---------------------------------------------------------------------------

loc_10008463:				; CODE XREF: sub_1000832A+118j
					; sub_1000832A+11Dj
		push	[esp+34h+arg_8]	; int
		mov	ebx, [esp+38h+var_1C]
		push	[esp+38h+arg_4]	; int
		lea	eax, [ebx+1]
		push	eax		; size_t
		push	[esp+40h+var_10] ; void	*
		call	sub_1000D0E9
		add	esp, 10h
		test	eax, eax
		jz	short loc_1000845B
		mov	byte ptr [eax+ebx], 0
		jmp	short loc_1000845B
sub_1000832A	endp


; =============== S U B	R O U T	I N E =======================================


sub_10008489	proc near		; CODE XREF: sub_1000210B+19p
					; sub_100033E1+161p

var_40		= byte ptr -40h
var_38		= dword	ptr -38h
var_34		= byte ptr -34h
var_28		= byte ptr -28h
var_24		= byte ptr -24h
var_18		= byte ptr -18h
var_C		= byte ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		sub	esp, 40h
		push	ebp
		push	800h
		call	PORT_NewArena_Util
		mov	ebp, eax
		pop	ecx
		test	ebp, ebp
		jz	loc_1000862C
		push	ebx
		push	98h
		push	ebp
		call	PORT_ArenaZAlloc_Util
		mov	ebx, eax
		pop	ecx
		pop	ecx
		test	ebx, ebx
		jnz	short loc_100084C6
		push	eax
		push	ebp
		call	PORT_FreeArena_Util
		pop	ecx
		pop	ecx
		xor	eax, eax
		jmp	loc_1000862B
; ---------------------------------------------------------------------------

loc_100084C6:				; CODE XREF: sub_10008489+2Bj
		push	esi
		push	28h		; size_t
		xor	esi, esi
		mov	[ebx], ebp
		lea	eax, [esp+50h+var_28]
		push	esi		; int
		push	eax		; void *
		call	memset
		mov	eax, [esp+58h+arg_0]
		add	eax, 44h
		push	eax
		lea	eax, [esp+5Ch+var_34]
		push	eax
		push	ebp
		call	SECITEM_CopyItem_Util
		add	esp, 18h
		test	eax, eax
		jz	short loc_100084FF

loc_100084F2:				; CODE XREF: sub_10008489+90j
		push	esi
		push	ebp
		call	PORT_FreeArena_Util
		pop	ecx
		jmp	loc_10008627
; ---------------------------------------------------------------------------

loc_100084FF:				; CODE XREF: sub_10008489+67j
		lea	eax, [esp+4Ch+var_34]
		push	eax
		push	offset dword_10013578
		lea	eax, [esp+54h+var_28]
		push	eax
		push	ebp
		call	SEC_QuickDERDecodeItem_Util
		add	esp, 10h
		test	eax, eax
		jnz	short loc_100084F2
		mov	eax, [esp+4Ch+var_4]
		lea	esi, [esp+4Ch+var_C]
		push	edi
		lea	edi, [esp+50h+var_40]
		add	eax, 7
		movsd
		shr	eax, 3
		movsd
		movsd
		mov	[esp+50h+var_38], eax
		lea	eax, [esp+50h+var_24]
		push	eax
		call	SECOID_GetAlgorithmTag_Util
		pop	ecx
		pop	edi
		sub	eax, 10h
		jz	loc_100085F5
		sub	eax, 51h
		jz	loc_100085F5
		sub	eax, 1Bh
		jz	short loc_100085D3
		sub	eax, 32h
		jz	short loc_100085B4
		sub	eax, 1Ah
		jnz	loc_10008621
		lea	eax, [esp+4Ch+var_18]
		mov	dword ptr [ebx+4], 5
		push	eax
		lea	esi, [ebx+70h]
		push	esi
		push	ebp
		call	SECITEM_CopyItem_Util
		add	esp, 0Ch
		test	eax, eax
		jnz	loc_10008621
		lea	eax, [ebx+8]
		push	eax
		push	esi
		push	ebp
		call	sub_10008C6A
		add	esp, 0Ch
		test	eax, eax
		jnz	loc_10008621
		lea	eax, [esp+4Ch+var_40]
		push	eax
		lea	eax, [ebx+8Ch]
		push	eax
		push	ebp
		call	SECITEM_CopyItem_Util
		add	esp, 0Ch
		jmp	short loc_10008619
; ---------------------------------------------------------------------------

loc_100085B4:				; CODE XREF: sub_10008489+D2j
		push	0Ah
		pop	eax
		mov	[ebx+0Ch], eax
		mov	[ebx+18h], eax
		mov	[ebx+24h], eax
		lea	eax, [esp+4Ch+var_40]
		push	eax
		mov	dword ptr [ebx+4], 4
		push	offset dword_10013618
		jmp	short loc_1000860F
; ---------------------------------------------------------------------------

loc_100085D3:				; CODE XREF: sub_10008489+CDj
		push	0Ah
		pop	eax
		mov	[ebx+30h], eax
		mov	[ebx+0Ch], eax
		mov	[ebx+18h], eax
		mov	[ebx+24h], eax
		lea	eax, [esp+4Ch+var_40]
		push	eax
		mov	dword ptr [ebx+4], 2
		push	offset dword_100135F8
		jmp	short loc_1000860F
; ---------------------------------------------------------------------------

loc_100085F5:				; CODE XREF: sub_10008489+BBj
					; sub_10008489+C4j
		push	0Ah
		pop	eax
		mov	[ebx+0Ch], eax
		mov	[ebx+18h], eax
		lea	eax, [esp+4Ch+var_40]
		push	eax
		mov	dword ptr [ebx+4], 1
		push	offset dword_100135B8

loc_1000860F:				; CODE XREF: sub_10008489+148j
					; sub_10008489+16Aj
		push	ebx
		push	ebp
		call	SEC_QuickDERDecodeItem_Util
		add	esp, 10h

loc_10008619:				; CODE XREF: sub_10008489+129j
		test	eax, eax
		jnz	short loc_10008621
		mov	eax, ebx
		jmp	short loc_1000862A
; ---------------------------------------------------------------------------

loc_10008621:				; CODE XREF: sub_10008489+D7j
					; sub_10008489+F8j ...
		push	ebx
		call	sub_10008ED0

loc_10008627:				; CODE XREF: sub_10008489+71j
		pop	ecx
		xor	eax, eax

loc_1000862A:				; CODE XREF: sub_10008489+196j
		pop	esi

loc_1000862B:				; CODE XREF: sub_10008489+38j
		pop	ebx

loc_1000862C:				; CODE XREF: sub_10008489+13j
		pop	ebp
		add	esp, 40h
		retn
sub_10008489	endp


; =============== S U B	R O U T	I N E =======================================


sub_10008631	proc near		; CODE XREF: sub_1000AB2F+CBp
					; sub_1000CDAA+16p

arg_0		= dword	ptr  4

		cmp	[esp+arg_0], 0
		jnz	short loc_1000863B
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_1000863B:				; CODE XREF: sub_10008631+5j
		push	esi
		push	edi
		push	[esp+8+arg_0]
		call	PORT_Strdup_Util
		mov	esi, eax
		mov	edi, esi
		pop	ecx
		test	esi, esi
		jz	short loc_10008669
		cmp	byte ptr [esi],	0
		jz	short loc_10008667

loc_10008654:				; CODE XREF: sub_10008631+34j
		movsx	eax, byte ptr [edi]
		push	eax		; int
		call	ds:tolower
		mov	[edi], al
		inc	edi
		pop	ecx
		cmp	byte ptr [edi],	0
		jnz	short loc_10008654

loc_10008667:				; CODE XREF: sub_10008631+21j
		mov	eax, esi

loc_10008669:				; CODE XREF: sub_10008631+1Cj
		pop	edi
		pop	esi
		retn
sub_10008631	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000866C	proc near		; CODE XREF: sub_100080B1+54p
					; sub_10008A72+2Bp

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch
arg_1C		= dword	ptr  20h
arg_20		= dword	ptr  24h

		push	ecx
		push	ecx
		push	ebp
		xor	ebp, ebp
		lea	eax, [esp+0Ch+var_4]
		push	ebp
		push	ebp
		push	eax
		push	[esp+18h+arg_4]
		push	[esp+1Ch+arg_0]
		call	sub_10008BA3
		add	esp, 14h
		test	eax, eax
		jnz	short loc_10008694
		or	eax, 0FFFFFFFFh
		jmp	loc_100088C4
; ---------------------------------------------------------------------------

loc_10008694:				; CODE XREF: sub_1000866C+1Ej
		push	ebx
		push	ebp
		push	ebp
		lea	ecx, [esp+18h+var_4]
		push	ecx
		push	[esp+1Ch+var_4]
		push	eax
		call	sub_10008BA3
		mov	ebx, eax
		add	esp, 14h
		test	ebx, ebx
		jnz	short loc_100086B7
		or	eax, 0FFFFFFFFh
		jmp	loc_100088C3
; ---------------------------------------------------------------------------

loc_100086B7:				; CODE XREF: sub_1000866C+41j
		mov	al, [ebx]
		and	al, 0A0h
		push	edi
		mov	edi, [esp+14h+var_4]
		cmp	al, 0A0h
		jnz	short loc_100086F0
		push	ebp
		push	ebp
		lea	eax, [esp+1Ch+var_8]
		push	eax
		push	edi
		push	ebx
		call	sub_10008BA3
		mov	ecx, eax
		add	esp, 14h
		test	ecx, ecx
		jnz	short loc_100086E3
		or	eax, 0FFFFFFFFh
		jmp	loc_100088C2
; ---------------------------------------------------------------------------

loc_100086E3:				; CODE XREF: sub_1000866C+6Dj
		mov	eax, [esp+14h+var_8]
		sub	ebx, eax
		sub	ebx, ecx
		add	edi, ebx
		lea	ebx, [eax+ecx]

loc_100086F0:				; CODE XREF: sub_1000866C+56j
		push	esi
		mov	esi, [esp+18h+arg_10]
		test	esi, esi
		jz	short loc_1000870D
		push	ebp
		push	1
		lea	eax, [esi+8]
		push	eax
		push	edi
		push	ebx
		call	sub_10008BA3
		add	esp, 14h
		mov	[esi+4], eax

loc_1000870D:				; CODE XREF: sub_1000866C+8Bj
		mov	esi, [esp+18h+arg_C]
		push	0
		push	0
		lea	ebp, [esi+8]
		push	ebp
		push	edi
		push	ebx
		call	sub_10008BA3
		mov	ecx, eax
		add	esp, 14h
		mov	[esi+4], ecx
		test	ecx, ecx
		jz	loc_100088C8
		mov	eax, [ebp+0]
		sub	ebx, eax
		push	0
		push	0
		sub	ebx, ecx
		lea	esi, [eax+ecx]
		add	edi, ebx
		lea	eax, [esp+20h+var_8]
		push	eax
		push	edi
		push	esi
		call	sub_10008BA3
		mov	ecx, eax
		add	esp, 14h
		test	ecx, ecx
		jz	loc_100088C8
		mov	eax, [esp+18h+var_8]
		sub	esi, eax
		sub	esi, ecx
		add	edi, esi
		mov	esi, [esp+18h+arg_8]
		push	0
		push	1
		lea	ebx, [eax+ecx]
		lea	ebp, [esi+8]
		push	ebp
		push	edi
		push	ebx
		call	sub_10008BA3
		mov	ecx, eax
		add	esp, 14h
		mov	[esi+4], ecx
		test	ecx, ecx
		jz	loc_100088C8
		mov	eax, [ebp+0]
		sub	ebx, eax
		sub	ebx, ecx
		add	edi, ebx
		mov	ebx, [esp+18h+arg_18]
		lea	esi, [eax+ecx]
		test	ebx, ebx
		jz	loc_100088BF
		push	0
		push	0
		lea	ebp, [ebx+8]
		push	ebp
		push	edi
		push	esi
		call	sub_10008BA3
		mov	ecx, eax
		add	esp, 14h
		mov	[ebx+4], ecx
		test	ecx, ecx
		jz	loc_100088C8
		mov	eax, [ebp+0]
		sub	esi, eax
		sub	esi, ecx
		add	edi, esi
		mov	esi, [esp+18h+arg_14]
		push	0
		push	1
		lea	ebx, [eax+ecx]
		lea	ebp, [esi+8]
		push	ebp
		push	edi
		push	ebx
		call	sub_10008BA3
		mov	ecx, eax
		add	esp, 14h
		mov	[esi+4], ecx
		test	ecx, ecx
		jz	loc_100088C8
		mov	eax, [ebp+0]
		sub	ebx, eax
		mov	esi, [esp+18h+arg_1C]
		sub	ebx, ecx
		push	0
		push	1
		add	edi, ebx
		lea	ebx, [eax+ecx]
		lea	ebp, [esi+8]
		push	ebp
		push	edi
		push	ebx
		call	sub_10008BA3
		mov	ecx, eax
		add	esp, 14h
		mov	[esi+4], ecx
		test	ecx, ecx
		jz	loc_100088C8
		mov	eax, [ebp+0]
		sub	ebx, eax
		sub	ebx, ecx
		lea	esi, [eax+ecx]
		mov	eax, [esp+18h+arg_20]
		mov	dword ptr [eax+4], 0
		lea	ebp, [eax+8]
		mov	dword ptr [ebp+0], 0
		add	edi, ebx
		jz	short loc_100088BF

loc_10008841:				; CODE XREF: sub_1000866C+251j
		cmp	byte ptr [esi],	0A3h
		jnz	short loc_10008899
		push	0
		push	0
		push	ebp
		push	edi
		push	esi
		call	sub_10008BA3
		mov	ebx, eax
		add	esp, 14h
		mov	eax, [esp+18h+arg_20]
		mov	[eax+4], ebx
		test	ebx, ebx
		jz	short loc_100088C8
		mov	ecx, [ebp+0]
		sub	ecx, esi
		add	ecx, ebx
		cmp	ecx, edi
		jnz	short loc_100088C8
		mov	edi, [ebp+0]
		lea	eax, [esp+18h+var_8]
		push	0
		push	0
		push	eax
		push	edi
		push	ebx
		call	sub_10008BA3
		mov	esi, eax
		add	esp, 14h
		test	esi, esi
		jz	short loc_100088C8
		mov	ecx, [esp+18h+var_8]
		sub	ecx, ebx
		add	ecx, esi
		cmp	ecx, edi
		jnz	short loc_100088C8
		sub	ebx, esi
		add	edi, ebx

loc_10008899:				; CODE XREF: sub_1000866C+1D8j
		push	0
		push	0
		lea	eax, [esp+20h+var_8]
		push	eax
		push	edi
		push	esi
		call	sub_10008BA3
		add	esp, 14h
		test	eax, eax
		jz	short loc_100088C8
		mov	ecx, [esp+18h+var_8]
		sub	esi, ecx
		sub	esi, eax
		add	edi, esi
		lea	esi, [ecx+eax]
		jnz	short loc_10008841

loc_100088BF:				; CODE XREF: sub_1000866C+12Fj
					; sub_1000866C+1D3j
		xor	eax, eax

loc_100088C1:				; CODE XREF: sub_1000866C+25Fj
		pop	esi

loc_100088C2:				; CODE XREF: sub_1000866C+72j
		pop	edi

loc_100088C3:				; CODE XREF: sub_1000866C+46j
		pop	ebx

loc_100088C4:				; CODE XREF: sub_1000866C+23j
		pop	ebp
		pop	ecx
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_100088C8:				; CODE XREF: sub_1000866C+BEj
					; sub_1000866C+E7j ...
		or	eax, 0FFFFFFFFh
		jmp	short loc_100088C1
sub_1000866C	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_100088CD	proc near		; CODE XREF: sub_100089C8+11p
					; sub_100089C8+2Cp

var_18		= byte ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= byte ptr -0Ch
var_8		= dword	ptr -8
var_4		= byte ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 1Ch
		mov	eax, [ebp+arg_0]
		push	esi
		push	edi
		mov	edi, [eax+68h]
		mov	esi, [eax+64h]
		lea	eax, [ebp+arg_0]
		push	eax
		push	0
		lea	eax, [ebp+var_10]
		push	eax
		push	edi
		push	esi
		call	sub_10008BA3
		add	esp, 14h
		mov	[ebp+var_14], eax
		test	eax, eax
		jz	short loc_10008960
		push	[ebp+arg_0]
		lea	eax, [ebp+var_18]
		push	eax
		call	sub_1000808C
		sub	esi, [ebp+var_10]
		lea	ecx, [ebp+arg_0]
		mov	eax, [ebp+var_14]
		sub	esi, eax
		add	eax, [ebp+var_10]
		add	edi, esi
		push	ecx
		push	0
		lea	ecx, [ebp+var_4]
		push	ecx
		push	edi
		push	eax
		call	sub_10008BA3
		add	esp, 1Ch
		mov	[ebp+var_8], eax
		test	eax, eax
		jz	short loc_10008960
		push	[ebp+arg_0]
		lea	eax, [ebp+var_C]
		push	eax
		call	sub_1000808C
		lea	eax, [ebp+var_18]
		push	eax
		push	[ebp+arg_4]
		call	DER_DecodeTimeChoice_Util
		add	esp, 10h
		test	eax, eax
		jnz	short loc_10008960
		lea	eax, [ebp+var_C]
		push	eax
		push	[ebp+arg_8]
		call	DER_DecodeTimeChoice_Util
		neg	eax
		pop	ecx
		pop	ecx
		sbb	eax, eax
		jmp	short loc_10008963
; ---------------------------------------------------------------------------

loc_10008960:				; CODE XREF: sub_100088CD+2Aj
					; sub_100088CD+5Ej ...
		or	eax, 0FFFFFFFFh

loc_10008963:				; CODE XREF: sub_100088CD+91j
		pop	edi
		pop	esi
		mov	esp, ebp
		pop	ebp
		retn
sub_100088CD	endp


; =============== S U B	R O U T	I N E =======================================


sub_10008969	proc near		; CODE XREF: sub_100080B1+BDp

arg_0		= dword	ptr  4

		push	ebx
		push	ebp
		push	esi
		push	edi
		mov	edi, [esp+10h+arg_0]
		mov	ebp, 0C8h
		push	ebp
		lea	ebx, [edi+160h]
		lea	eax, [edi+38h]
		push	ebx
		push	eax
		call	sub_1000832A
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		jnz	short loc_100089A5
		cmp	[edi+80h], eax
		jz	short loc_100089A5
		push	ebp
		push	ebx
		push	edi
		call	sub_10008196
		add	esp, 0Ch
		mov	esi, eax

loc_100089A5:				; CODE XREF: sub_10008969+25j
					; sub_10008969+2Dj
		mov	edi, esi
		test	esi, esi
		jz	short loc_100089C1

loc_100089AB:				; CODE XREF: sub_10008969+56j
		mov	al, [edi]
		test	al, al
		jz	short loc_100089C1
		movsx	eax, al
		push	eax		; int
		call	ds:tolower
		mov	[edi], al
		pop	ecx
		inc	edi
		jnz	short loc_100089AB

loc_100089C1:				; CODE XREF: sub_10008969+40j
					; sub_10008969+46j
		pop	edi
		mov	eax, esi
		pop	esi
		pop	ebp
		pop	ebx
		retn
sub_10008969	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_100089C8	proc near		; CODE XREF: sub_100091D6+AFp

var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 20h
		lea	eax, [ebp+var_8]
		push	eax
		lea	eax, [ebp+var_18]
		push	eax
		push	[ebp+arg_0]
		call	sub_100088CD
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_100089E9
		xor	eax, eax
		jmp	short loc_10008A5E
; ---------------------------------------------------------------------------

loc_100089E9:				; CODE XREF: sub_100089C8+1Bj
		lea	eax, [ebp+var_10]
		push	eax
		lea	eax, [ebp+var_20]
		push	eax
		push	[ebp+arg_4]
		call	sub_100088CD
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_10008A05
		xor	eax, eax
		inc	eax
		jmp	short loc_10008A5E
; ---------------------------------------------------------------------------

loc_10008A05:				; CODE XREF: sub_100089C8+36j
		mov	eax, [ebp+var_14]
		xor	ecx, ecx
		push	esi
		push	edi
		xor	edi, edi
		mov	esi, ecx
		inc	edi
		cmp	eax, [ebp+var_1C]
		jl	short loc_10008A22
		jg	short loc_10008A20
		mov	eax, [ebp+var_18]
		cmp	eax, [ebp+var_20]
		jbe	short loc_10008A22

loc_10008A20:				; CODE XREF: sub_100089C8+4Ej
		mov	esi, edi

loc_10008A22:				; CODE XREF: sub_100089C8+4Cj
					; sub_100089C8+56j
		mov	eax, [ebp+var_4]
		cmp	eax, [ebp+var_C]
		jl	short loc_10008A36
		jg	short loc_10008A34
		mov	eax, [ebp+var_8]
		cmp	eax, [ebp+var_10]
		jbe	short loc_10008A36

loc_10008A34:				; CODE XREF: sub_100089C8+62j
		mov	ecx, edi

loc_10008A36:				; CODE XREF: sub_100089C8+60j
					; sub_100089C8+6Aj
		test	esi, esi
		jz	short loc_10008A40
		test	ecx, ecx
		jz	short loc_10008A44
		jmp	short loc_10008A6E
; ---------------------------------------------------------------------------

loc_10008A40:				; CODE XREF: sub_100089C8+70j
		test	ecx, ecx
		jz	short loc_10008A5A

loc_10008A44:				; CODE XREF: sub_100089C8+74j
		call	ds:PR_Now
		test	esi, esi
		jz	short loc_10008A62
		cmp	[ebp+var_4], edx
		jg	short loc_10008A6E
		jl	short loc_10008A5A
		cmp	[ebp+var_8], eax
		jnb	short loc_10008A6E

loc_10008A5A:				; CODE XREF: sub_100089C8+7Aj
					; sub_100089C8+8Bj ...
		xor	eax, eax

loc_10008A5C:				; CODE XREF: sub_100089C8+A8j
		pop	edi
		pop	esi

loc_10008A5E:				; CODE XREF: sub_100089C8+1Fj
					; sub_100089C8+3Bj
		mov	esp, ebp
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_10008A62:				; CODE XREF: sub_100089C8+84j
		cmp	[ebp+var_C], edx
		jg	short loc_10008A5A
		jl	short loc_10008A6E
		cmp	[ebp+var_10], eax
		jnb	short loc_10008A5A

loc_10008A6E:				; CODE XREF: sub_100089C8+76j
					; sub_100089C8+89j ...
		mov	eax, edi
		jmp	short loc_10008A5C
sub_100089C8	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10008A72	proc near		; CODE XREF: sub_1000BA0D+37p
					; sub_1000C348+23p

var_18		= byte ptr -18h
var_C		= byte ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		lea	eax, [ebp+var_18]
		push	esi
		push	18h		; size_t
		xor	esi, esi
		push	esi		; int
		push	eax		; void *
		call	memset
		push	esi
		push	esi
		push	esi
		push	esi
		push	esi
		lea	eax, [ebp+var_18]
		push	eax
		lea	eax, [ebp+var_C]
		push	eax
		mov	eax, [ebp+arg_4]
		push	dword ptr [eax+8]
		push	dword ptr [eax+4]
		call	sub_1000866C
		add	esp, 30h
		pop	esi
		test	eax, eax
		jz	short loc_10008AAF
		or	eax, 0FFFFFFFFh
		jmp	short loc_10008AC5
; ---------------------------------------------------------------------------

loc_10008AAF:				; CODE XREF: sub_10008A72+36j
		push	[ebp+arg_8]
		lea	eax, [ebp+var_18]
		push	eax
		lea	eax, [ebp+var_C]
		push	eax
		push	[ebp+arg_0]
		call	sub_10008AC9
		add	esp, 10h

loc_10008AC5:				; CODE XREF: sub_10008A72+3Bj
		mov	esp, ebp
		pop	ebp
		retn
sub_10008A72	endp


; =============== S U B	R O U T	I N E =======================================


sub_10008AC9	proc near		; CODE XREF: sub_10008A72+4Bp

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebx
		mov	ebx, [esp+4+arg_4]
		push	ebp
		push	esi
		push	edi
		mov	edi, [esp+10h+arg_8]
		mov	esi, [edi+8]
		add	esi, [ebx+8]
		cmp	[esp+10h+arg_0], 0
		jnz	short loc_10008AEF
		push	0FFFFE005h

loc_10008AE7:				; CODE XREF: sub_10008AC9+33j
		call	PORT_SetError_Util
		pop	ecx
		jmp	short loc_10008B15
; ---------------------------------------------------------------------------

loc_10008AEF:				; CODE XREF: sub_10008AC9+17j
		cmp	esi, 0F000h
		jbe	short loc_10008AFE
		push	0FFFFE004h
		jmp	short loc_10008AE7
; ---------------------------------------------------------------------------

loc_10008AFE:				; CODE XREF: sub_10008AC9+2Cj
		push	esi
		push	[esp+14h+arg_0]
		call	PORT_ArenaAlloc_Util
		mov	ebp, [esp+18h+arg_C]
		pop	ecx
		pop	ecx
		mov	[ebp+4], eax
		test	eax, eax
		jnz	short loc_10008B1A

loc_10008B15:				; CODE XREF: sub_10008AC9+24j
		or	eax, 0FFFFFFFFh
		jmp	short loc_10008B40
; ---------------------------------------------------------------------------

loc_10008B1A:				; CODE XREF: sub_10008AC9+4Aj
		mov	[ebp+8], esi
		push	dword ptr [edi+8] ; size_t
		push	dword ptr [edi+4] ; void *
		push	eax		; void *
		call	memcpy
		push	dword ptr [ebx+8] ; size_t
		mov	eax, [edi+8]
		push	dword ptr [ebx+4] ; void *
		add	eax, [ebp+4]
		push	eax		; void *
		call	memcpy
		add	esp, 18h
		xor	eax, eax

loc_10008B40:				; CODE XREF: sub_10008AC9+4Fj
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
sub_10008AC9	endp


; =============== S U B	R O U T	I N E =======================================


sub_10008B45	proc near		; CODE XREF: sub_100080B1+84p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	ebx
		mov	ebx, [esp+4+arg_8]
		push	ebp
		push	esi
		mov	esi, [esp+0Ch+arg_C]
		push	edi
		push	[esp+10h+arg_4]
		mov	edi, [esi+8]
		add	edi, [ebx+8]
		push	[esp+14h+arg_0]
		push	edi
		call	sub_1000D09D
		mov	ebp, [esp+1Ch+arg_10]
		add	esp, 0Ch
		mov	[ebp+4], eax
		test	eax, eax
		jnz	short loc_10008B78
		or	eax, 0FFFFFFFFh
		jmp	short loc_10008B9E
; ---------------------------------------------------------------------------

loc_10008B78:				; CODE XREF: sub_10008B45+2Cj
		mov	[ebp+8], edi
		push	dword ptr [esi+8] ; size_t
		push	dword ptr [esi+4] ; void *
		push	eax		; void *
		call	memcpy
		push	dword ptr [ebx+8] ; size_t
		mov	eax, [ebp+4]
		push	dword ptr [ebx+4] ; void *
		add	eax, [esi+8]
		push	eax		; void *
		call	memcpy
		add	esp, 18h
		xor	eax, eax

loc_10008B9E:				; CODE XREF: sub_10008B45+31j
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
sub_10008B45	endp


; =============== S U B	R O U T	I N E =======================================


sub_10008BA3	proc near		; CODE XREF: sub_10008196+20p
					; sub_10008196+49p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	ebx
		mov	ebx, [esp+4+arg_4]
		push	esi
		push	2
		pop	esi
		cmp	ebx, esi
		jnb	short loc_10008BB4
		xor	eax, eax
		jmp	short loc_10008C25
; ---------------------------------------------------------------------------

loc_10008BB4:				; CODE XREF: sub_10008BA3+Bj
		mov	ecx, [esp+8+arg_10]
		push	ebp
		mov	ebp, [esp+0Ch+arg_0]
		mov	al, [ebp+0]
		test	ecx, ecx
		jz	short loc_10008BC6
		mov	[ecx], al

loc_10008BC6:				; CODE XREF: sub_10008BA3+1Fj
		test	al, al
		jnz	short loc_10008BCE
		xor	eax, eax
		jmp	short loc_10008C24
; ---------------------------------------------------------------------------

loc_10008BCE:				; CODE XREF: sub_10008BA3+25j
		movzx	edx, byte ptr [ebp+1]
		push	edi
		mov	edi, [esp+10h+arg_8]
		mov	[edi], edx
		test	dl, dl
		jns	short loc_10008BFF
		and	edx, 7Fh
		lea	eax, [edx+2]
		cmp	eax, ebx
		ja	short loc_10008C09
		and	dword ptr [edi], 0
		jmp	short loc_10008BFB
; ---------------------------------------------------------------------------

loc_10008BEC:				; CODE XREF: sub_10008BA3+5Aj
		mov	eax, [edi]
		dec	edx
		movzx	ecx, byte ptr [esi+ebp]
		shl	eax, 8
		or	ecx, eax
		inc	esi
		mov	[edi], ecx

loc_10008BFB:				; CODE XREF: sub_10008BA3+47j
		test	edx, edx
		jg	short loc_10008BEC

loc_10008BFF:				; CODE XREF: sub_10008BA3+38j
		mov	ecx, [edi]
		sub	ebx, esi
		cmp	ecx, ebx
		jbe	short loc_10008C0D
		mov	[edi], ebx

loc_10008C09:				; CODE XREF: sub_10008BA3+42j
		xor	eax, eax
		jmp	short loc_10008C23
; ---------------------------------------------------------------------------

loc_10008C0D:				; CODE XREF: sub_10008BA3+62j
		mov	eax, [esp+10h+arg_C]
		test	eax, eax
		jz	short loc_10008C19
		add	ecx, esi
		mov	[edi], ecx

loc_10008C19:				; CODE XREF: sub_10008BA3+70j
		neg	eax
		sbb	eax, eax
		not	eax
		and	eax, esi
		add	eax, ebp

loc_10008C23:				; CODE XREF: sub_10008BA3+68j
		pop	edi

loc_10008C24:				; CODE XREF: sub_10008BA3+29j
		pop	ebp

loc_10008C25:				; CODE XREF: sub_10008BA3+Fj
		pop	esi
		pop	ebx
		retn
sub_10008BA3	endp


; =============== S U B	R O U T	I N E =======================================


sub_10008C28	proc near		; CODE XREF: sub_10008CE4+9Bp

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		mov	ebx, [esp+4+arg_8]
		push	esi
		mov	esi, [esp+8+arg_0]
		push	edi
		mov	edi, [esp+0Ch+arg_4]
		lea	eax, [ebx+68h]
		push	eax
		lea	eax, [edi+68h]
		mov	[edi], esi
		push	eax
		push	esi
		call	SECITEM_CopyItem_Util
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_10008C63
		lea	eax, [ebx+78h]
		push	eax
		lea	eax, [edi+78h]
		push	eax
		push	esi
		call	SECITEM_CopyItem_Util
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_10008C66

loc_10008C63:				; CODE XREF: sub_10008C28+24j
		or	eax, 0FFFFFFFFh

loc_10008C66:				; CODE XREF: sub_10008C28+39j
		pop	edi
		pop	esi
		pop	ebx
		retn
sub_10008C28	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10008C6A	proc near		; CODE XREF: sub_10002C73+173p
					; sub_10005E7E+A4p ...

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		mov	ecx, [ebp+arg_4]
		and	[ebp+var_C], 0
		mov	eax, [ecx+8]
		mov	ecx, [ecx+4]
		sub	eax, 2
		mov	[ebp+var_4], eax
		lea	eax, [ecx+2]
		mov	[ebp+var_8], eax
		cmp	byte ptr [ecx],	6
		jnz	short loc_10008CD2
		lea	eax, [ebp+var_C]
		push	eax
		call	SECOID_FindOIDTag_Util
		pop	ecx
		test	eax, eax
		jz	short loc_10008CD2
		mov	eax, [ebp+var_4]
		mov	ecx, [ebp+arg_0]
		push	esi
		mov	esi, [ebp+arg_8]
		push	eax
		push	ecx
		mov	[esi], ecx
		mov	[esi+80h], eax
		call	PORT_ArenaAlloc_Util
		mov	[esi+7Ch], eax
		pop	ecx
		pop	ecx
		pop	esi
		test	eax, eax
		jz	short loc_10008CDD
		push	[ebp+var_4]	; size_t
		push	[ebp+var_8]	; void *
		push	eax		; void *
		call	memcpy
		add	esp, 0Ch
		xor	eax, eax
		jmp	short loc_10008CE0
; ---------------------------------------------------------------------------

loc_10008CD2:				; CODE XREF: sub_10008C6A+22j
					; sub_10008C6A+30j
		push	0FFFFE08Dh
		call	PORT_SetError_Util
		pop	ecx

loc_10008CDD:				; CODE XREF: sub_10008C6A+53j
		or	eax, 0FFFFFFFFh

loc_10008CE0:				; CODE XREF: sub_10008C6A+66j
		mov	esp, ebp
		pop	ebp
		retn
sub_10008C6A	endp


; =============== S U B	R O U T	I N E =======================================


sub_10008CE4	proc near		; CODE XREF: sub_100048A4+2Cp

arg_0		= dword	ptr  4

		push	esi
		push	800h
		call	PORT_NewArena_Util
		mov	esi, eax
		pop	ecx
		test	esi, esi
		jnz	short loc_10008D05
		push	0FFFFE013h
		call	PORT_SetError_Util
		pop	ecx
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10008D05:				; CODE XREF: sub_10008CE4+10j
		push	ebx
		push	edi
		mov	edi, [esp+0Ch+arg_0]
		mov	eax, [edi+4]
		test	eax, eax
		js	loc_10008EA7
		cmp	eax, 1
		jle	loc_10008E4D
		cmp	eax, 2
		jz	loc_10008DE2
		cmp	eax, 4
		jz	short loc_10008D89
		cmp	eax, 5
		jnz	loc_10008EA7
		push	98h
		push	esi
		call	PORT_ArenaZAlloc_Util
		mov	ebx, eax
		pop	ecx
		pop	ecx
		test	ebx, ebx
		jz	loc_10008EA7
		mov	[ebx], esi
		mov	ecx, [edi+4]
		mov	[ebx+4], ecx
		lea	ecx, [edi+8Ch]
		push	ecx
		lea	ecx, [ebx+8Ch]
		push	ecx
		push	esi
		call	SECITEM_CopyItem_Util
		add	esp, 0Ch
		test	eax, eax
		jnz	loc_10008EA7
		lea	eax, [edi+8]
		lea	ecx, [ebx+8]
		push	eax
		push	ecx
		push	esi
		mov	[ecx], esi
		call	sub_10008C28
		jmp	loc_10008E91
; ---------------------------------------------------------------------------

loc_10008D89:				; CODE XREF: sub_10008CE4+47j
		push	98h
		push	esi
		call	PORT_ArenaZAlloc_Util
		mov	ebx, eax
		pop	ecx
		pop	ecx
		test	ebx, ebx
		jz	loc_10008EA7
		mov	[ebx], esi
		mov	ecx, [edi+4]
		mov	[ebx+4], ecx
		lea	ecx, [edi+24h]
		push	ecx
		lea	ecx, [ebx+24h]
		push	ecx
		push	esi
		call	SECITEM_CopyItem_Util
		add	esp, 0Ch
		test	eax, eax
		jnz	loc_10008EA7
		lea	eax, [edi+0Ch]
		push	eax
		lea	eax, [ebx+0Ch]
		push	eax
		push	esi
		call	SECITEM_CopyItem_Util
		add	esp, 0Ch
		test	eax, eax
		jnz	loc_10008EA7
		lea	eax, [edi+18h]
		jmp	loc_10008E86
; ---------------------------------------------------------------------------

loc_10008DE2:				; CODE XREF: sub_10008CE4+3Ej
		push	98h
		push	esi
		call	PORT_ArenaZAlloc_Util
		mov	ebx, eax
		pop	ecx
		pop	ecx
		test	ebx, ebx
		jz	loc_10008EA7
		mov	[ebx], esi
		mov	ecx, [edi+4]
		mov	[ebx+4], ecx
		lea	ecx, [edi+30h]
		push	ecx
		lea	ecx, [ebx+30h]
		push	ecx
		push	esi
		call	SECITEM_CopyItem_Util
		add	esp, 0Ch
		test	eax, eax
		jnz	loc_10008EA7
		lea	eax, [edi+0Ch]
		push	eax
		lea	eax, [ebx+0Ch]
		push	eax
		push	esi
		call	SECITEM_CopyItem_Util
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_10008EA7
		lea	eax, [edi+18h]
		push	eax
		lea	eax, [ebx+18h]
		push	eax
		push	esi
		call	SECITEM_CopyItem_Util
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_10008EA7
		lea	eax, [edi+24h]
		push	eax
		lea	eax, [ebx+24h]
		jmp	short loc_10008E8A
; ---------------------------------------------------------------------------

loc_10008E4D:				; CODE XREF: sub_10008CE4+35j
		push	98h
		push	esi
		call	PORT_ArenaZAlloc_Util
		mov	ebx, eax
		pop	ecx
		pop	ecx
		test	ebx, ebx
		jz	short loc_10008E9C
		mov	[ebx], esi
		mov	ecx, [edi+4]
		mov	[ebx+4], ecx
		cmp	dword ptr [edi+4], 0
		jz	short loc_10008EB3
		lea	eax, [edi+18h]
		push	eax
		lea	eax, [ebx+0Ch]
		push	eax
		push	esi
		call	SECITEM_CopyItem_Util
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_10008EA7
		lea	eax, [edi+24h]

loc_10008E86:				; CODE XREF: sub_10008CE4+F9j
		push	eax
		lea	eax, [ebx+18h]

loc_10008E8A:				; CODE XREF: sub_10008CE4+167j
		push	eax
		push	esi
		call	SECITEM_CopyItem_Util

loc_10008E91:				; CODE XREF: sub_10008CE4+A0j
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_10008EA7
		mov	eax, ebx
		jmp	short loc_10008EB3
; ---------------------------------------------------------------------------

loc_10008E9C:				; CODE XREF: sub_10008CE4+17Aj
		push	0FFFFE013h
		call	PORT_SetError_Util
		pop	ecx

loc_10008EA7:				; CODE XREF: sub_10008CE4+2Cj
					; sub_10008CE4+4Cj ...
		push	0
		push	esi
		call	PORT_FreeArena_Util
		pop	ecx
		pop	ecx
		xor	eax, eax

loc_10008EB3:				; CODE XREF: sub_10008CE4+188j
					; sub_10008CE4+1B6j
		pop	edi
		pop	ebx
		pop	esi
		retn
sub_10008CE4	endp


; =============== S U B	R O U T	I N E =======================================


sub_10008EB7	proc near		; CODE XREF: sub_10001F69+49p
					; sub_100048A4+34p ...

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		test	eax, eax
		jz	short locret_10008ECF
		cmp	dword ptr [eax], 0
		jz	short locret_10008ECF
		push	1
		push	dword ptr [eax]
		call	PORT_FreeArena_Util
		pop	ecx
		pop	ecx

locret_10008ECF:			; CODE XREF: sub_10008EB7+6j
					; sub_10008EB7+Bj
		retn
sub_10008EB7	endp


; =============== S U B	R O U T	I N E =======================================


sub_10008ED0	proc near		; CODE XREF: sub_10001FBF+121p
					; sub_1000210B+108p ...

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		test	eax, eax
		jz	short locret_10008EE8
		cmp	dword ptr [eax], 0
		jz	short locret_10008EE8
		push	0
		push	dword ptr [eax]
		call	PORT_FreeArena_Util
		pop	ecx
		pop	ecx

locret_10008EE8:			; CODE XREF: sub_10008ED0+6j
					; sub_10008ED0+Bj
		retn
sub_10008ED0	endp


; =============== S U B	R O U T	I N E =======================================


sub_10008EE9	proc near		; CODE XREF: sub_10002C73+1A9p
					; sub_10002FBF+D5p

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		push	0Ah
		pop	ecx
		mov	[eax+0Ch], ecx
		mov	[eax+18h], ecx
		mov	[eax+24h], ecx
		mov	[eax+30h], ecx
		retn
sub_10008EE9	endp


; =============== S U B	R O U T	I N E =======================================


sub_10008EFD	proc near		; CODE XREF: sub_10002C73+1EBp
					; sub_10002FBF+100p

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		push	0Ah
		pop	ecx
		mov	[eax+30h], ecx
		mov	[eax+3Ch], ecx
		mov	[eax+0Ch], ecx
		mov	[eax+18h], ecx
		mov	[eax+24h], ecx
		retn
sub_10008EFD	endp


; =============== S U B	R O U T	I N E =======================================


sub_10008F14	proc near		; CODE XREF: sub_10002C73+109p
					; sub_10002FBF+83p

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		push	0Ah
		pop	ecx
		mov	[eax+0A4h], ecx
		mov	[eax+70h], ecx
		mov	[eax+80h], ecx
		mov	[eax+98h], ecx
		mov	[eax+8Ch], ecx
		retn
sub_10008F14	endp


; =============== S U B	R O U T	I N E =======================================


sub_10008F37	proc near		; CODE XREF: sub_10002C73+14Ap

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		push	0Ah
		pop	ecx
		mov	[eax+68h], ecx
		mov	[eax+78h], ecx
		retn
sub_10008F37	endp


; =============== S U B	R O U T	I N E =======================================


sub_10008F45	proc near		; CODE XREF: sub_10002C73+22Cp
					; sub_10002FBF+122p

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		push	0Ah
		pop	ecx
		mov	[eax+4], ecx
		mov	[eax+10h], ecx
		mov	[eax+1Ch], ecx
		retn
sub_10008F45	endp


; =============== S U B	R O U T	I N E =======================================


sub_10008F56	proc near		; CODE XREF: sub_10002C73+266p
					; sub_10002FBF+144p

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		push	0Ah
		pop	ecx
		mov	[eax+18h], ecx
		mov	[eax+24h], ecx
		mov	[eax+30h], ecx
		mov	[eax+3Ch], ecx
		mov	[eax+48h], ecx
		mov	[eax+54h], ecx
		mov	[eax+60h], ecx
		mov	[eax+6Ch], ecx
		retn
sub_10008F56	endp


; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10008F76(int,	int, char *, int)
sub_10008F76	proc near		; CODE XREF: sub_1000B353+7Ep
					; sub_1000CC4E+58p ...

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 0Ch
		push	ebx
		push	ebp
		mov	ebp, [esp+14h+arg_8]
		push	esi
		push	edi
		xor	edi, edi
		and	[esp+1Ch+var_C], edi
		test	ebp, ebp
		jz	short loc_10008F93
		mov	[esp+1Ch+var_C], 1

loc_10008F93:				; CODE XREF: sub_10008F76+13j
		mov	eax, [esp+1Ch+arg_4]
		mov	ebx, [esp+1Ch+arg_0]
		add	eax, 38h
		push	eax
		push	ebx
		mov	[esp+24h+var_4], eax
		call	sub_1000B0A1
		mov	esi, eax
		pop	ecx
		pop	ecx
		test	esi, esi
		jz	short loc_10008FBD
		cmp	[esi+20h], edi
		jz	short loc_10008FBD
		and	[esp+1Ch+var_C], edi
		mov	ebp, [esi+20h]

loc_10008FBD:				; CODE XREF: sub_10008F76+39j
					; sub_10008F76+3Ej
		mov	eax, [esp+1Ch+arg_4]
		push	0		; int
		push	[esp+20h+arg_C]	; int
		add	eax, 8
		push	ebp		; char *
		push	eax		; int
		call	sub_1000A7F8
		add	esp, 10h
		mov	[esp+1Ch+var_8], eax
		test	eax, eax
		jz	loc_100090E4
		cmp	[esp+1Ch+var_C], edi
		jz	short loc_10009003
		push	0		; int
		push	[esp+20h+var_4]	; int
		push	ebp		; char *
		call	sub_1000A99A
		mov	edi, eax
		add	esp, 0Ch
		test	edi, edi
		jz	loc_100090CF
		mov	eax, [esp+1Ch+var_8]

loc_10009003:				; CODE XREF: sub_10008F76+6Ej
		push	eax		; size_t
		push	ebx		; int
		call	sub_1000BA0D
		pop	ecx
		pop	ecx
		test	eax, eax
		jnz	loc_100090CF
		mov	[esp+1Ch+arg_8], 1
		test	edi, edi
		jz	short loc_1000902D
		push	edi
		push	ebx
		call	sub_1000BB8A
		pop	ecx
		pop	ecx
		test	eax, eax
		jnz	short loc_10009091

loc_1000902D:				; CODE XREF: sub_10008F76+A8j
		mov	ecx, [esp+1Ch+arg_4]
		mov	[esp+1Ch+arg_8], 2
		mov	[ecx+4], ebx
		test	esi, esi
		jz	short loc_1000904D
		push	ebp
		push	ecx
		push	esi
		call	sub_100091D6
		add	esp, 0Ch
		jmp	short loc_10009075
; ---------------------------------------------------------------------------

loc_1000904D:				; CODE XREF: sub_10008F76+C8j
		push	0		; int
		push	0		; int
		push	ebp		; char *
		lea	eax, [ecx+70h]
		push	eax		; int
		lea	eax, [ecx+54h]
		push	eax		; int
		lea	eax, [ecx+38h]
		push	eax		; int
		call	sub_1000AB2F
		mov	esi, eax
		add	esp, 18h
		test	esi, esi
		jz	short loc_10009091
		push	esi
		push	ebx
		call	sub_1000BC7E
		pop	ecx
		pop	ecx

loc_10009075:				; CODE XREF: sub_10008F76+D5j
		test	eax, eax
		jnz	short loc_10009091
		test	edi, edi
		jz	short loc_10009084
		push	edi		; void *
		call	sub_1000A0E5
		pop	ecx

loc_10009084:				; CODE XREF: sub_10008F76+105j
		push	esi		; void *
		call	sub_1000A0E5
		mov	eax, [esp+20h+var_8]
		pop	ecx
		jmp	short loc_100090F1
; ---------------------------------------------------------------------------

loc_10009091:				; CODE XREF: sub_10008F76+B5j
					; sub_10008F76+F4j ...
		mov	eax, [esp+1Ch+arg_4]
		add	eax, 54h
		push	eax
		push	ebx
		call	sub_10009D85
		mov	eax, [esp+24h+arg_8]
		pop	ecx
		pop	ecx
		cmp	eax, 1
		jle	short loc_100090BE
		cmp	[esp+1Ch+var_C], 0
		jz	short loc_100090BE
		push	ebp		; char *
		push	ebx		; int
		call	sub_10009EC1
		mov	eax, [esp+24h+arg_8]
		pop	ecx
		pop	ecx

loc_100090BE:				; CODE XREF: sub_10008F76+132j
					; sub_10008F76+139j
		cmp	eax, 2
		jle	short loc_100090CF
		push	[esp+1Ch+var_4]
		push	ebx
		call	sub_10009F8F
		pop	ecx
		pop	ecx

loc_100090CF:				; CODE XREF: sub_10008F76+83j
					; sub_10008F76+98j ...
		push	[esp+1Ch+var_8]	; void *
		call	sub_1000A0E5
		pop	ecx
		test	edi, edi
		jz	short loc_100090E4
		push	edi		; void *
		call	sub_1000A0E5
		pop	ecx

loc_100090E4:				; CODE XREF: sub_10008F76+64j
					; sub_10008F76+165j
		test	esi, esi
		jz	short loc_100090EF
		push	esi		; void *
		call	sub_1000A0E5
		pop	ecx

loc_100090EF:				; CODE XREF: sub_10008F76+170j
		xor	eax, eax

loc_100090F1:				; CODE XREF: sub_10008F76+119j
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 0Ch
		retn
sub_10008F76	endp


; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_100090F9(int,	int, char *)
sub_100090F9	proc near		; CODE XREF: sub_1000BF7A+58p
					; sub_1000BF7A+79p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		mov	ebx, [esp+4+arg_4]
		push	ebp
		push	esi
		push	edi
		mov	edi, [ebx+6Ch]
		test	edi, edi
		jz	short loc_1000916D
		lea	esi, [edi+30h]
		push	esi
		push	dword ptr [edi+2Ch]
		call	sub_1000D118
		and	dword ptr [edi+2Ch], 0
		mov	ebp, 0C8h
		push	ebp		; int
		push	esi		; void *
		push	[esp+20h+arg_8]	; char *
		call	sub_1000D0B4
		push	edi		; size_t
		push	[esp+28h+arg_0]	; int
		mov	[edi+2Ch], eax
		call	sub_1000BA0D
		add	esp, 1Ch
		test	eax, eax
		jnz	short loc_1000916D
		lea	esi, [ebx+98h]
		push	esi
		push	dword ptr [ebx+88h]
		call	sub_1000D118
		and	dword ptr [ebx+88h], 0
		push	ebp		; int
		push	esi		; void *
		push	[esp+20h+arg_8]	; char *
		call	sub_1000D0B4
		add	esp, 14h
		mov	[ebx+88h], eax
		xor	eax, eax
		jmp	short loc_10009170
; ---------------------------------------------------------------------------

loc_1000916D:				; CODE XREF: sub_100090F9+Dj
					; sub_100090F9+41j
		or	eax, 0FFFFFFFFh

loc_10009170:				; CODE XREF: sub_100090F9+72j
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
sub_100090F9	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10009175	proc near		; CODE XREF: sub_1000BF7A+41p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		cmp	[ebp+arg_8], 0
		jnz	short loc_10009183
		or	eax, 0FFFFFFFFh
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_10009183:				; CODE XREF: sub_10009175+7j
		push	esi
		push	edi
		mov	edi, [ebp+arg_4]
		add	edi, 38h
		push	edi
		push	[ebp+arg_0]
		call	sub_1000B0A1
		mov	esi, eax
		pop	ecx
		pop	ecx
		test	esi, esi
		jz	short loc_100091CF
		cmp	dword ptr [esi+20h], 0
		jnz	short loc_100091CF
		push	[ebp+arg_8]
		push	dword ptr [esi+0Ch]
		call	PORT_ArenaStrdup_Util
		mov	[esi+20h], eax
		pop	ecx
		pop	ecx
		test	eax, eax
		jz	short loc_100091CF
		push	edi
		push	[ebp+arg_0]
		call	sub_10009F8F
		push	esi
		push	[ebp+arg_0]
		call	sub_1000BC7E
		add	esp, 10h
		test	eax, eax
		jz	short loc_100091D2

loc_100091CF:				; CODE XREF: sub_10009175+25j
					; sub_10009175+2Bj ...
		or	eax, 0FFFFFFFFh

loc_100091D2:				; CODE XREF: sub_10009175+58j
		pop	edi
		pop	esi
		pop	ebp
		retn
sub_10009175	endp


; =============== S U B	R O U T	I N E =======================================


sub_100091D6	proc near		; CODE XREF: sub_10008F76+CDp

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 1Ch
		push	ebx
		mov	ebx, [esp+20h+arg_0]
		push	ebp
		xor	ebp, ebp
		push	edi
		mov	edi, [ebx+1Ch]
		mov	[esp+28h+var_14], edi
		cmp	[ebx+20h], ebp
		jnz	short loc_10009211
		cmp	[esp+28h+arg_8], ebp
		jz	short loc_10009211
		push	[esp+28h+arg_8]
		push	dword ptr [ebx+0Ch]
		call	PORT_ArenaStrdup_Util
		mov	[ebx+20h], eax
		pop	ecx
		pop	ecx
		test	eax, eax
		jnz	short loc_10009211
		or	eax, 0FFFFFFFFh
		jmp	loc_100093C0
; ---------------------------------------------------------------------------

loc_10009211:				; CODE XREF: sub_100091D6+16j
					; sub_100091D6+1Cj ...
		push	esi
		lea	eax, [edi+1]
		imul	esi, eax, 0Ch
		push	esi
		push	dword ptr [ebx+0Ch]
		call	PORT_ArenaZAlloc_Util
		push	esi
		push	dword ptr [ebx+0Ch]
		mov	[esp+3Ch+var_1C], eax
		call	PORT_ArenaZAlloc_Util
		mov	ecx, [esp+3Ch+var_1C]
		add	esp, 10h
		mov	[esp+2Ch+var_10], eax
		test	ecx, ecx
		jz	loc_100093BC
		test	eax, eax
		jz	loc_100093BC
		mov	esi, ebp
		mov	[esp+2Ch+arg_0], esi
		test	edi, edi
		jz	loc_100092EA
		mov	esi, [esp+2Ch+arg_4]
		mov	edx, ebp
		sub	ecx, eax
		mov	[esp+2Ch+var_18], edx
		mov	[esp+2Ch+var_C], eax
		mov	[esp+2Ch+var_4], ecx

loc_1000926B:				; CODE XREF: sub_100091D6+10Aj
		mov	eax, [ebx+24h]
		add	eax, edx
		push	eax
		push	dword ptr [esi+4]
		call	sub_1000C4AD
		mov	[esp+34h+var_8], eax
		pop	ecx
		pop	ecx
		test	eax, eax
		jz	short loc_100092D2
		push	eax
		push	esi
		call	sub_100089C8
		push	[esp+34h+var_8]	; void *
		mov	esi, eax
		call	sub_1000C1A9
		add	esp, 0Ch
		test	esi, esi
		jnz	short loc_100092E2
		mov	esi, [ebx+24h]
		mov	ecx, [esp+2Ch+var_C]
		mov	edx, [esp+2Ch+var_18]
		add	esi, edx
		mov	edi, [esp+2Ch+var_4]
		lea	edi, [edi+ecx]
		movsd
		movsd
		movsd
		mov	esi, [ebx+28h]
		mov	edi, ecx
		add	esi, edx
		inc	[esp+2Ch+arg_0]
		add	ecx, 0Ch
		mov	[esp+2Ch+var_C], ecx
		movsd
		movsd
		movsd
		mov	edi, [esp+2Ch+var_14]
		mov	esi, [esp+2Ch+arg_4]
		jmp	short loc_100092D6
; ---------------------------------------------------------------------------

loc_100092D2:				; CODE XREF: sub_100091D6+ABj
		mov	edx, [esp+2Ch+var_18]

loc_100092D6:				; CODE XREF: sub_100091D6+FAj
		inc	ebp
		add	edx, 0Ch
		mov	[esp+2Ch+var_18], edx
		cmp	ebp, edi
		jb	short loc_1000926B

loc_100092E2:				; CODE XREF: sub_100091D6+C4j
		mov	esi, [esp+2Ch+arg_0]
		mov	ecx, [esp+2Ch+var_1C]

loc_100092EA:				; CODE XREF: sub_100091D6+7Bj
		mov	eax, [esp+2Ch+arg_4]
		imul	edx, esi, 0Ch
		add	eax, 54h
		push	eax
		mov	[esp+30h+arg_0], edx
		lea	eax, [edx+ecx]
		push	eax
		push	dword ptr [ebx+0Ch]
		call	SECITEM_CopyItem_Util
		add	esp, 0Ch
		test	eax, eax
		jnz	loc_100093BC
		mov	eax, [esp+2Ch+arg_4]
		add	eax, 70h
		push	eax
		mov	eax, [esp+30h+var_10]
		add	eax, [esp+30h+arg_0]
		push	eax
		push	dword ptr [ebx+0Ch]
		call	SECITEM_CopyItem_Util
		add	esp, 0Ch
		test	eax, eax
		jnz	loc_100093BC
		mov	ecx, [esp+2Ch+var_1C]
		inc	esi
		cmp	ebp, edi
		jnb	short loc_10009391
		imul	eax, ebp, 0Ch
		sub	edi, ebp
		imul	edx, esi, 0Ch
		mov	[esp+2Ch+var_18], ecx
		mov	[esp+2Ch+var_14], edi
		mov	[esp+2Ch+var_4], eax
		mov	eax, [esp+2Ch+var_10]
		add	edx, eax
		sub	[esp+2Ch+var_18], eax
		add	esi, edi
		mov	ebp, [esp+2Ch+var_18]
		mov	eax, edi
		mov	ecx, [esp+2Ch+var_4]
		mov	[esp+2Ch+arg_0], esi

loc_1000936B:				; CODE XREF: sub_100091D6+1B1j
		mov	esi, [ebx+24h]
		lea	edi, [edx+ebp]
		add	esi, ecx
		movsd
		movsd
		movsd
		mov	esi, [ebx+28h]
		mov	edi, edx
		add	esi, ecx
		add	edx, 0Ch
		add	ecx, 0Ch
		movsd
		movsd
		movsd
		dec	eax
		jnz	short loc_1000936B
		mov	esi, [esp+2Ch+arg_0]
		mov	ecx, [esp+2Ch+var_1C]

loc_10009391:				; CODE XREF: sub_100091D6+165j
		mov	ebp, [esp+2Ch+arg_4]
		mov	eax, [esp+2Ch+var_10]
		mov	[ebx+28h], eax
		mov	[ebx+24h], ecx
		lea	eax, [ebp+38h]
		mov	[ebx+1Ch], esi
		push	eax
		push	dword ptr [ebp+4]
		call	sub_10009F8F
		push	ebx
		push	dword ptr [ebp+4]
		call	sub_1000BC7E
		add	esp, 10h
		jmp	short loc_100093BF
; ---------------------------------------------------------------------------

loc_100093BC:				; CODE XREF: sub_100091D6+65j
					; sub_100091D6+6Dj ...
		or	eax, 0FFFFFFFFh

loc_100093BF:				; CODE XREF: sub_100091D6+1E4j
		pop	esi

loc_100093C0:				; CODE XREF: sub_100091D6+36j
		pop	edi
		pop	ebp
		pop	ebx
		add	esp, 1Ch
		retn
sub_100091D6	endp


; =============== S U B	R O U T	I N E =======================================


sub_100093C7	proc near		; CODE XREF: sub_1000BD8F+89p
					; sub_1000C4AD+1Ep

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_4]
		push	dword ptr [esi+2Ch] ; char *
		lea	eax, [esi+20h]
		push	eax		; int
		call	sub_100080B1
		pop	ecx
		pop	ecx
		mov	ecx, eax
		test	ecx, ecx
		jnz	short loc_100093E2
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_100093E2:				; CODE XREF: sub_100093C7+17j
		mov	eax, [esp+4+arg_0]
		mov	[ecx+4], eax
		lea	eax, [esi+14h]
		mov	[ecx+6Ch], esi
		mov	[ecx+90h], eax
		mov	eax, ecx
		pop	esi
		retn
sub_100093C7	endp


; =============== S U B	R O U T	I N E =======================================


sub_100093F9	proc near		; CODE XREF: sub_1000AD1A+B8p
					; sub_1000B752+133p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebx
		push	ebp
		push	esi
		mov	esi, [esp+0Ch+arg_0]
		push	edi
		mov	eax, [esi+4]
		cmp	eax, 5
		jz	short loc_1000941D
		push	6
		pop	edx
		cmp	eax, edx
		jz	short loc_1000941D
		add	eax, 0FFFFFFF9h
		cmp	eax, 1
		ja	short loc_1000941D
		push	0Ah
		pop	ebx
		jmp	short loc_10009423
; ---------------------------------------------------------------------------

loc_1000941D:				; CODE XREF: sub_100093F9+Ej
					; sub_100093F9+15j ...
		push	7
		pop	ebx
		push	3
		pop	edx

loc_10009423:				; CODE XREF: sub_100093F9+22j
		mov	edi, [esp+10h+arg_4]
		cmp	[edi+8], ebx
		jnb	short loc_10009436

loc_1000942C:				; CODE XREF: sub_100093F9+70j
					; sub_100093F9+75j
		push	0FFFFE012h
		jmp	loc_100094C3
; ---------------------------------------------------------------------------

loc_10009436:				; CODE XREF: sub_100093F9+31j
		mov	eax, [edi+4]
		movzx	ecx, byte ptr [eax+edx]
		movzx	eax, byte ptr [eax+edx+1]
		shl	ecx, 8
		or	ecx, eax
		mov	[esi+28h], ecx
		mov	eax, [edi+4]
		movzx	ebp, byte ptr [eax+edx+2]
		movzx	eax, byte ptr [eax+edx+3]
		mov	edx, [edi+8]
		shl	ebp, 8
		sub	edx, ecx
		or	ebp, eax
		sub	edx, ebp
		sub	edx, ebx
		jz	short loc_10009473
		test	edx, edx
		js	short loc_1000942C
		test	dx, dx
		jnz	short loc_1000942C
		add	[esi+28h], edx

loc_10009473:				; CODE XREF: sub_100093F9+6Cj
		push	800h		; int
		lea	eax, [esi+0F8h]
		push	eax		; int
		mov	eax, [edi+4]
		push	dword ptr [esi+28h] ; size_t
		add	eax, ebx
		push	eax		; void *
		call	sub_1000D0E9
		add	esp, 10h
		mov	[esi+24h], eax
		test	eax, eax
		jz	short loc_100094BE
		cmp	ebp, 1
		jbe	short loc_100094CE
		push	0C8h		; int
		lea	eax, [esi+30h]
		push	eax		; int
		mov	eax, [edi+4]
		add	eax, ebx
		add	eax, [esi+28h]
		push	ebp		; size_t
		push	eax		; void *
		call	sub_1000D0E9
		add	esp, 10h
		mov	[esi+2Ch], eax
		test	eax, eax
		jnz	short loc_100094D2

loc_100094BE:				; CODE XREF: sub_100093F9+9Cj
		push	0FFFFE013h

loc_100094C3:				; CODE XREF: sub_100093F9+38j
		call	PORT_SetError_Util
		pop	ecx
		or	eax, 0FFFFFFFFh
		jmp	short loc_1000952E
; ---------------------------------------------------------------------------

loc_100094CE:				; CODE XREF: sub_100093F9+A1j
		and	dword ptr [esi+2Ch], 0

loc_100094D2:				; CODE XREF: sub_100093F9+C3j
		cmp	dword ptr [esi+4], 7
		mov	eax, [edi+4]
		jnb	short loc_100094F7
		movzx	eax, byte ptr [eax]
		mov	[esi+14h], eax
		mov	eax, [edi+4]
		movzx	eax, byte ptr [eax+1]
		mov	[esi+18h], eax
		mov	eax, [edi+4]
		movzx	eax, byte ptr [eax+2]
		mov	[esi+1Ch], eax
		jmp	short loc_1000952C
; ---------------------------------------------------------------------------

loc_100094F7:				; CODE XREF: sub_100093F9+E0j
		movzx	ecx, byte ptr [eax]
		movzx	eax, byte ptr [eax+1]
		shl	ecx, 8
		or	ecx, eax
		mov	[esi+14h], ecx
		mov	eax, [edi+4]
		movzx	ecx, byte ptr [eax+2]
		movzx	eax, byte ptr [eax+3]
		shl	ecx, 8
		or	ecx, eax
		mov	[esi+18h], ecx
		mov	eax, [edi+4]
		movzx	ecx, byte ptr [eax+4]
		movzx	eax, byte ptr [eax+5]
		shl	ecx, 8
		or	ecx, eax
		mov	[esi+1Ch], ecx

loc_1000952C:				; CODE XREF: sub_100093F9+FCj
		xor	eax, eax

loc_1000952E:				; CODE XREF: sub_100093F9+D3j
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
sub_100093F9	endp


; =============== S U B	R O U T	I N E =======================================


sub_10009533	proc near		; CODE XREF: sub_1000AE28+BAp
					; sub_1000B752+CAp

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebx
		push	esi
		push	edi
		mov	edi, [esp+0Ch+arg_4]
		cmp	dword ptr [edi+8], 4
		jnb	short loc_1000954A

loc_10009540:				; CODE XREF: sub_10009533+4Bj
					; sub_10009533+50j
		push	0FFFFE012h
		jmp	loc_100095D5
; ---------------------------------------------------------------------------

loc_1000954A:				; CODE XREF: sub_10009533+Bj
		mov	eax, [edi+4]
		mov	esi, [esp+0Ch+arg_0]
		movzx	edx, byte ptr [eax]
		movzx	eax, byte ptr [eax+1]
		shl	edx, 8
		or	edx, eax
		mov	[esi+18h], edx
		mov	eax, [edi+4]
		mov	ecx, [edi+8]
		sub	ecx, edx
		movzx	ebx, byte ptr [eax+2]
		movzx	eax, byte ptr [eax+3]
		shl	ebx, 8
		or	ebx, eax
		sub	ecx, ebx
		sub	ecx, 4
		jz	short loc_1000958B
		test	ecx, ecx
		js	short loc_10009540
		test	cx, cx
		jnz	short loc_10009540
		lea	eax, [edx+ecx]
		mov	[esi+18h], eax

loc_1000958B:				; CODE XREF: sub_10009533+47j
		push	dword ptr [esi+18h]
		push	dword ptr [esi+0Ch]
		call	PORT_ArenaAlloc_Util
		pop	ecx
		pop	ecx
		mov	ecx, eax
		mov	[esi+14h], ecx
		test	ecx, ecx
		jz	short loc_100095D0
		push	dword ptr [esi+18h] ; size_t
		mov	eax, [edi+4]
		add	eax, 4
		push	eax		; void *
		push	ecx		; void *
		call	memcpy
		and	dword ptr [esi+1Ch], 0
		add	esp, 0Ch
		test	ebx, ebx
		jz	short loc_100095F4
		push	ebx
		push	dword ptr [esi+0Ch]
		call	PORT_ArenaAlloc_Util
		mov	edx, eax
		mov	[esi+1Ch], edx
		pop	ecx
		pop	ecx
		test	edx, edx
		jnz	short loc_100095E0

loc_100095D0:				; CODE XREF: sub_10009533+6Cj
		push	0FFFFE013h

loc_100095D5:				; CODE XREF: sub_10009533+12j
		call	PORT_SetError_Util
		pop	ecx
		or	eax, 0FFFFFFFFh
		jmp	short loc_100095F6
; ---------------------------------------------------------------------------

loc_100095E0:				; CODE XREF: sub_10009533+9Bj
		mov	eax, [edi+4]
		add	eax, 4
		add	eax, [esi+18h]
		push	ebx		; size_t
		push	eax		; void *
		push	edx		; void *
		call	memcpy
		add	esp, 0Ch

loc_100095F4:				; CODE XREF: sub_10009533+87j
		xor	eax, eax

loc_100095F6:				; CODE XREF: sub_10009533+ABj
		pop	edi
		pop	esi
		pop	ebx
		retn
sub_10009533	endp


; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_100095FA(int,	int, char *)
sub_100095FA	proc near		; CODE XREF: sub_1000AFC5+C4p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi
		push	edi
		mov	edi, [esp+8+arg_4]
		cmp	dword ptr [edi+8], 2
		jnb	short loc_1000960D

loc_10009606:				; CODE XREF: sub_100095FA+34j
					; sub_100095FA+39j
		push	0FFFFE012h
		jmp	short loc_10009656
; ---------------------------------------------------------------------------

loc_1000960D:				; CODE XREF: sub_100095FA+Aj
		mov	eax, [edi+4]
		mov	esi, [esp+8+arg_0]
		movzx	edx, byte ptr [eax]
		movzx	eax, byte ptr [eax+1]
		shl	edx, 8
		or	edx, eax
		mov	[esi+1Ch], edx
		mov	ecx, [edi+8]
		sub	ecx, edx
		dec	ecx
		dec	ecx
		jz	short loc_1000963B
		test	ecx, ecx
		js	short loc_10009606
		test	cx, cx
		jnz	short loc_10009606
		lea	eax, [edx+ecx]
		mov	[esi+1Ch], eax

loc_1000963B:				; CODE XREF: sub_100095FA+30j
		push	dword ptr [esi+1Ch]
		push	dword ptr [esi+0Ch]
		call	PORT_ArenaAlloc_Util
		pop	ecx
		pop	ecx
		mov	ecx, eax
		mov	[esi+18h], ecx
		test	ecx, ecx
		jnz	short loc_10009661
		push	0FFFFE013h

loc_10009656:				; CODE XREF: sub_100095FA+11j
		call	PORT_SetError_Util
		pop	ecx
		or	eax, 0FFFFFFFFh
		jmp	short loc_100096A0
; ---------------------------------------------------------------------------

loc_10009661:				; CODE XREF: sub_100095FA+55j
		push	dword ptr [esi+1Ch] ; size_t
		mov	eax, [edi+4]
		add	eax, 2
		push	eax		; void *
		push	ecx		; void *
		call	memcpy
		push	[esp+14h+arg_8]	; char *
		and	dword ptr [esi+14h], 0
		call	strlen
		inc	eax
		push	eax
		push	dword ptr [esi+0Ch]
		call	PORT_ArenaAlloc_Util
		add	esp, 18h
		mov	[esi+10h], eax
		test	eax, eax
		jz	short loc_1000969E
		push	[esp+8+arg_8]	; char *
		push	eax		; char *
		call	strcpy
		pop	ecx
		pop	ecx

loc_1000969E:				; CODE XREF: sub_100095FA+96j
		xor	eax, eax

loc_100096A0:				; CODE XREF: sub_100095FA+65j
		pop	edi
		pop	esi
		retn
sub_100095FA	endp


; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_100096A3(int,	int, char *)
sub_100096A3	proc near		; CODE XREF: sub_1000B752+23Cp
					; sub_1000C933+C4p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		push	esi
		push	edi
		mov	edi, [esp+0Ch+arg_4]
		cmp	dword ptr [edi+8], 6
		jb	loc_100097C7
		mov	eax, [edi+4]
		mov	esi, [esp+0Ch+arg_0]
		movzx	ecx, byte ptr [eax]
		movzx	eax, byte ptr [eax+1]
		shl	ecx, 8
		or	ecx, eax
		mov	[esi+1Ch], ecx
		mov	eax, [edi+4]
		mov	ebx, [esi+1Ch]
		movzx	ecx, byte ptr [eax+2]
		movzx	eax, byte ptr [eax+3]
		shl	ecx, 8
		or	ecx, eax
		mov	[esi+28h], ecx
		mov	eax, [edi+4]
		movzx	ecx, byte ptr [eax+4]
		movzx	eax, byte ptr [eax+5]
		shl	ecx, 8
		or	ecx, eax
		mov	[esi+34h], ecx
		mov	edx, [edi+8]
		sub	edx, ebx
		sub	edx, ecx
		sub	edx, [esi+28h]
		sub	edx, 6
		jz	short loc_10009719
		test	edx, edx
		js	loc_100097C7
		test	dx, dx
		jnz	loc_100097C7
		lea	eax, [ebx+edx]
		mov	[esi+1Ch], eax

loc_10009719:				; CODE XREF: sub_100096A3+5Dj
		push	dword ptr [esi+1Ch]
		push	dword ptr [esi+0Ch]
		call	PORT_ArenaAlloc_Util
		pop	ecx
		pop	ecx
		mov	ecx, eax
		mov	[esi+18h], ecx
		test	ecx, ecx
		jnz	short loc_10009739

loc_1000972F:				; CODE XREF: sub_100096A3+C3j
					; sub_100096A3+F5j
		push	0FFFFE013h
		jmp	loc_100097CC
; ---------------------------------------------------------------------------

loc_10009739:				; CODE XREF: sub_100096A3+8Aj
		push	dword ptr [esi+1Ch] ; size_t
		mov	eax, [edi+4]
		add	eax, 6
		push	eax		; void *
		push	ecx		; void *
		call	memcpy
		add	esp, 0Ch
		cmp	dword ptr [esi+28h], 0
		jz	short loc_1000977E
		push	dword ptr [esi+28h]
		push	dword ptr [esi+0Ch]
		call	PORT_ArenaAlloc_Util
		mov	edx, eax
		mov	[esi+24h], edx
		pop	ecx
		pop	ecx
		test	edx, edx
		jz	short loc_1000972F
		mov	eax, [edi+4]
		push	dword ptr [esi+28h] ; size_t
		add	eax, 6
		add	eax, [esi+1Ch]
		push	eax		; void *
		push	edx		; void *
		call	memcpy
		add	esp, 0Ch

loc_1000977E:				; CODE XREF: sub_100096A3+ADj
		cmp	dword ptr [esi+34h], 0
		jz	short loc_100097B5
		push	dword ptr [esi+34h]
		push	dword ptr [esi+0Ch]
		call	PORT_ArenaAlloc_Util
		mov	edx, eax
		mov	[esi+30h], edx
		pop	ecx
		pop	ecx
		test	edx, edx
		jz	short loc_1000972F
		mov	ecx, [esi+28h]
		mov	eax, [edi+4]
		push	dword ptr [esi+34h] ; size_t
		add	ecx, [esi+1Ch]
		add	eax, 6
		add	eax, ecx
		push	eax		; void *
		push	edx		; void *
		call	memcpy
		add	esp, 0Ch

loc_100097B5:				; CODE XREF: sub_100096A3+DFj
		mov	eax, [esi+34h]
		test	eax, eax
		jz	short loc_100097C2
		cmp	dword ptr [esi+28h], 0
		jnz	short loc_100097D7

loc_100097C2:				; CODE XREF: sub_100096A3+117j
		cmp	[esi+28h], eax
		jz	short loc_100097D7

loc_100097C7:				; CODE XREF: sub_100096A3+Bj
					; sub_100096A3+61j ...
		push	0FFFFE012h

loc_100097CC:				; CODE XREF: sub_100096A3+91j
		call	PORT_SetError_Util
		pop	ecx
		or	eax, 0FFFFFFFFh
		jmp	short loc_10009802
; ---------------------------------------------------------------------------

loc_100097D7:				; CODE XREF: sub_100096A3+11Dj
					; sub_100096A3+122j
		push	[esp+0Ch+arg_8]	; char *
		call	strlen
		inc	eax
		push	eax
		push	dword ptr [esi+0Ch]
		call	PORT_ArenaAlloc_Util
		add	esp, 0Ch
		mov	[esi+10h], eax
		test	eax, eax
		jz	short loc_10009800
		push	[esp+0Ch+arg_8]	; char *
		push	eax		; char *
		call	strcpy
		pop	ecx
		pop	ecx

loc_10009800:				; CODE XREF: sub_100096A3+14Fj
		xor	eax, eax

loc_10009802:				; CODE XREF: sub_100096A3+132j
		pop	edi
		pop	esi
		pop	ebx
		retn
sub_100096A3	endp


; =============== S U B	R O U T	I N E =======================================


sub_10009806	proc near		; CODE XREF: sub_1000B0A1+B7p

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 18h
		push	ebx
		push	ebp
		push	esi
		push	edi
		mov	edi, [esp+28h+arg_0]
		mov	ebp, [edi+0Ch]
		push	ebp
		mov	[esp+2Ch+arg_0], ebp
		call	PORT_ArenaMark_Util
		push	[esp+2Ch+arg_8]
		lea	ecx, [edi+10h]
		mov	[esp+30h+var_4], eax
		push	ecx
		push	ebp
		call	SECITEM_CopyItem_Util
		add	esp, 10h
		test	eax, eax
		jnz	loc_10009B3A
		mov	ebx, [esp+28h+arg_4]
		cmp	dword ptr [ebx+8], 6
		jnb	short loc_10009855

loc_10009845:				; CODE XREF: sub_10009806+A5j
					; sub_10009806+1F0j
		push	0FFFFE012h

loc_1000984A:				; CODE XREF: sub_10009806+ECj
		call	PORT_SetError_Util
		pop	ecx
		jmp	loc_10009B3A
; ---------------------------------------------------------------------------

loc_10009855:				; CODE XREF: sub_10009806+3Dj
		mov	eax, [ebx+4]
		movzx	edx, byte ptr [eax]
		movzx	eax, byte ptr [eax+1]
		shl	edx, 8
		or	edx, eax
		mov	[edi+1Ch], edx
		mov	ecx, [ebx+4]
		mov	[esp+28h+var_10], edx
		movzx	esi, byte ptr [ecx+2]
		movzx	eax, byte ptr [ecx+3]
		shl	esi, 8
		or	esi, eax
		movzx	eax, byte ptr [ecx+4]
		shl	eax, 8
		mov	[esp+28h+var_18], eax
		movzx	eax, byte ptr [ecx+5]
		mov	ecx, [esp+28h+var_18]
		or	ecx, eax
		mov	[esp+28h+var_C], esi
		mov	[esp+28h+var_18], ecx
		lea	eax, [ecx+6]
		add	eax, esi
		mov	[esp+28h+var_8], eax
		lea	eax, [eax+edx*4]
		mov	[esp+28h+var_14], eax
		cmp	[ebx+8], eax
		jb	short loc_10009845
		imul	esi, edx, 0Ch
		push	esi
		push	ebp
		call	PORT_ArenaAlloc_Util
		push	esi
		push	ebp
		mov	[edi+24h], eax
		call	PORT_ArenaAlloc_Util
		xor	ebx, ebx
		mov	[edi+28h], eax
		add	esp, 10h
		cmp	[edi+24h], ebx
		jz	short loc_100098ED
		test	eax, eax
		jz	short loc_100098ED
		mov	esi, [esp+28h+var_C]
		cmp	esi, 1
		jbe	short loc_1000990E
		push	esi
		push	ebp
		call	PORT_ArenaAlloc_Util
		pop	ecx
		pop	ecx
		mov	ecx, eax
		mov	[edi+20h], ecx
		test	ecx, ecx
		jnz	short loc_100098F7

loc_100098ED:				; CODE XREF: sub_10009806+C6j
					; sub_10009806+CAj ...
		push	0FFFFE013h
		jmp	loc_1000984A
; ---------------------------------------------------------------------------

loc_100098F7:				; CODE XREF: sub_10009806+E5j
		push	esi		; size_t
		mov	esi, [esp+2Ch+arg_4]
		mov	eax, [esi+4]
		add	eax, 6
		push	eax		; void *
		push	ecx		; void *
		call	memcpy
		add	esp, 0Ch
		jmp	short loc_10009915
; ---------------------------------------------------------------------------

loc_1000990E:				; CODE XREF: sub_10009806+D3j
		mov	esi, [esp+28h+arg_4]
		mov	[edi+20h], ebx

loc_10009915:				; CODE XREF: sub_10009806+106j
		cmp	[esp+28h+var_18], 1
		mov	[edi+30h], ebx
		jbe	short loc_1000996D
		push	8
		push	ebp
		call	PORT_ArenaAlloc_Util
		mov	[edi+2Ch], eax
		pop	ecx
		pop	ecx
		test	eax, eax
		jz	short loc_100098ED
		push	[esp+28h+var_18]
		push	ebp
		call	PORT_ArenaAlloc_Util
		pop	ecx
		pop	ecx
		mov	ecx, [edi+2Ch]
		mov	[ecx], eax
		mov	eax, [edi+2Ch]
		mov	edx, [eax]
		test	edx, edx
		jz	short loc_100098ED
		mov	ecx, [esp+28h+var_C]
		mov	eax, [esi+4]
		add	ecx, 6
		push	[esp+28h+var_18] ; size_t
		add	eax, ecx
		push	eax		; void *
		push	edx		; void *
		call	memcpy
		add	esp, 0Ch
		mov	dword ptr [edi+30h], 1
		jmp	short loc_10009970
; ---------------------------------------------------------------------------

loc_1000996D:				; CODE XREF: sub_10009806+117j
		mov	[edi+2Ch], ebx

loc_10009970:				; CODE XREF: sub_10009806+165j
		mov	esi, [esi+4]
		add	esi, [esp+28h+var_8]
		mov	edx, [esp+28h+var_10]
		test	edx, edx
		jz	short loc_100099EB
		mov	ebp, ebx
		mov	ebx, [esp+28h+var_14]

loc_10009985:				; CODE XREF: sub_10009806+19Bj
		movzx	ecx, byte ptr [esi]
		lea	ebp, [ebp+0Ch]
		movzx	eax, byte ptr [esi+1]
		add	esi, 2
		shl	ecx, 8
		or	ecx, eax
		mov	eax, [edi+24h]
		add	ebx, ecx
		mov	[eax+ebp-4], ecx
		dec	edx
		jnz	short loc_10009985
		mov	edx, [esp+28h+var_10]
		mov	ebp, [esp+28h+arg_0]
		mov	[esp+28h+var_14], ebx
		xor	ebx, ebx
		test	edx, edx
		jz	short loc_100099EB
		mov	ebp, ebx
		mov	[esp+28h+var_8], edx
		mov	ebx, [esp+28h+var_14]

loc_100099BF:				; CODE XREF: sub_10009806+1D5j
		movzx	ecx, byte ptr [esi]
		lea	ebp, [ebp+0Ch]
		movzx	eax, byte ptr [esi+1]
		add	esi, 2
		shl	ecx, 8
		or	ecx, eax
		mov	eax, [edi+28h]
		add	ebx, ecx
		mov	[eax+ebp-4], ecx
		dec	edx
		jnz	short loc_100099BF
		mov	ebp, [esp+28h+arg_0]
		mov	edx, [esp+28h+var_10]
		mov	[esp+28h+var_14], ebx
		xor	ebx, ebx

loc_100099EB:				; CODE XREF: sub_10009806+177j
					; sub_10009806+1ADj
		mov	eax, [esp+28h+arg_4]
		mov	ecx, [esp+28h+var_14]
		cmp	ecx, [eax+8]
		ja	loc_10009845
		mov	[esp+28h+var_8], ebx
		test	edx, edx
		jz	short loc_10009A66
		mov	ecx, ebx
		mov	[esp+28h+var_14], ebx

loc_10009A0A:				; CODE XREF: sub_10009806+25Ej
		mov	eax, [edi+24h]
		mov	eax, [ecx+eax+8]
		push	eax
		push	ebp
		mov	[esp+30h+var_C], eax
		call	PORT_ArenaAlloc_Util
		mov	edx, [esp+30h+var_14]
		pop	ecx
		pop	ecx
		mov	ecx, [edi+24h]
		mov	[edx+ecx+4], eax
		mov	eax, [edi+24h]
		mov	eax, [edx+eax+4]
		test	eax, eax
		jz	loc_100098ED
		push	[esp+28h+var_C]	; size_t
		push	esi		; void *
		push	eax		; void *
		call	memcpy
		mov	eax, [esp+34h+var_8]
		add	esp, 0Ch
		add	esi, [esp+28h+var_C]
		inc	eax
		mov	ecx, [esp+28h+var_14]
		mov	edx, [esp+28h+var_10]
		add	ecx, 0Ch
		mov	[esp+28h+var_8], eax
		mov	[esp+28h+var_14], ecx
		cmp	eax, edx
		jb	short loc_10009A0A

loc_10009A66:				; CODE XREF: sub_10009806+1FCj
		mov	[esp+28h+var_C], ebx
		test	edx, edx
		jz	short loc_10009ACE
		mov	ecx, ebx
		mov	[esp+28h+var_14], ebx

loc_10009A74:				; CODE XREF: sub_10009806+2C6j
		mov	eax, [edi+28h]
		mov	eax, [ecx+eax+8]
		push	eax
		push	ebp
		mov	[esp+30h+var_8], eax
		call	PORT_ArenaAlloc_Util
		mov	edx, [esp+30h+var_14]
		pop	ecx
		pop	ecx
		mov	ecx, [edi+28h]
		mov	[edx+ecx+4], eax
		mov	eax, [edi+28h]
		mov	eax, [edx+eax+4]
		test	eax, eax
		jz	loc_100098ED
		push	[esp+28h+var_8]	; size_t
		push	esi		; void *
		push	eax		; void *
		call	memcpy
		mov	eax, [esp+34h+var_C]
		add	esp, 0Ch
		add	esi, [esp+28h+var_8]
		inc	eax
		mov	ecx, [esp+28h+var_14]
		add	ecx, 0Ch
		mov	[esp+28h+var_C], eax
		mov	[esp+28h+var_14], ecx
		cmp	eax, [esp+28h+var_10]
		jb	short loc_10009A74

loc_10009ACE:				; CODE XREF: sub_10009806+266j
		mov	eax, [esp+28h+arg_4]
		mov	ebp, [eax+8]
		add	ebp, [eax+4]
		cmp	[esp+28h+var_18], 0
		mov	[esp+28h+var_10], ebp
		jnz	loc_10009BAE
		mov	eax, ebp
		sub	eax, esi
		cmp	eax, 1
		jle	loc_10009BAE
		movzx	ecx, byte ptr [esi]
		movzx	eax, byte ptr [esi+1]
		add	esi, 2
		shl	ecx, 8
		or	ecx, eax
		mov	edx, ecx
		mov	[edi+30h], ecx
		mov	ecx, ebp
		sub	ecx, esi
		lea	eax, [edx+edx]
		cmp	ecx, eax
		jl	short loc_10009B36
		mov	eax, edx
		shl	eax, 2
		push	eax
		push	[esp+2Ch+arg_0]
		call	PORT_ArenaAlloc_Util
		mov	[edi+2Ch], eax
		pop	ecx
		pop	ecx
		test	eax, eax
		jnz	short loc_10009B51

loc_10009B2B:				; CODE XREF: sub_10009806+389j
		push	0FFFFE013h
		call	PORT_SetError_Util
		pop	ecx

loc_10009B36:				; CODE XREF: sub_10009806+30Bj
					; sub_10009806+357j ...
		mov	ebp, [esp+28h+arg_0]

loc_10009B3A:				; CODE XREF: sub_10009806+2Fj
					; sub_10009806+4Aj
		push	[esp+28h+var_4]
		push	ebp
		call	PORT_ArenaRelease_Util
		or	eax, 0FFFFFFFFh

loc_10009B47:				; CODE XREF: sub_10009806+3B7j
		pop	ecx
		pop	ecx
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 18h
		retn
; ---------------------------------------------------------------------------

loc_10009B51:				; CODE XREF: sub_10009806+323j
		cmp	[edi+30h], ebx
		jbe	short loc_10009BAA

loc_10009B56:				; CODE XREF: sub_10009806+3A2j
		mov	eax, ebp
		sub	eax, esi
		cmp	eax, 2
		jl	short loc_10009B36
		movzx	ebp, byte ptr [esi]
		movzx	eax, byte ptr [esi+1]
		add	esi, 2
		shl	ebp, 8
		or	ebp, eax
		mov	eax, [esp+28h+var_10]
		sub	eax, esi
		cmp	eax, ebp
		jl	short loc_10009B36
		push	ebp
		push	[esp+2Ch+arg_0]
		call	PORT_ArenaAlloc_Util
		pop	ecx
		pop	ecx
		mov	ecx, [edi+2Ch]
		mov	[ecx+ebx*4], eax
		mov	eax, [edi+2Ch]
		test	eax, eax
		jz	short loc_10009B2B
		push	ebp		; size_t
		push	esi		; void *
		push	dword ptr [eax+ebx*4] ;	void *
		call	memcpy
		add	esi, ebp
		add	esp, 0Ch
		mov	ebp, [esp+28h+var_10]
		inc	ebx
		cmp	ebx, [edi+30h]
		jb	short loc_10009B56

loc_10009BAA:				; CODE XREF: sub_10009806+34Ej
		cmp	esi, ebp
		jnz	short loc_10009B36

loc_10009BAE:				; CODE XREF: sub_10009806+2DBj
					; sub_10009806+2E8j
		push	[esp+28h+var_4]
		push	[esp+2Ch+arg_0]
		call	PORT_ArenaUnmark_Util
		xor	eax, eax
		jmp	short loc_10009B47
sub_10009806	endp


; =============== S U B	R O U T	I N E =======================================


sub_10009BBF	proc near		; CODE XREF: sub_1000C691+30p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi
		call	sub_1000C754
		mov	esi, dword_10015040
		test	esi, esi
		jz	short loc_10009BDC
		mov	eax, [esi]
		dec	dword_1001504C
		mov	dword_10015040,	eax

loc_10009BDC:				; CODE XREF: sub_10009BBF+Ej
		call	sub_1000CBEB
		test	esi, esi
		jnz	short loc_10009BF8
		push	220h
		call	PORT_ZAlloc_Util
		mov	esi, eax
		pop	ecx
		test	esi, esi
		jnz	short loc_10009BF8
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10009BF8:				; CODE XREF: sub_10009BBF+24j
					; sub_10009BBF+35j
		mov	eax, [esp+4+arg_0]
		push	ebx
		mov	ebx, [esp+8+arg_8]
		push	edi
		mov	edi, [esp+0Ch+arg_4]
		mov	[esi+4], eax
		lea	eax, [esi+20h]
		push	200h		; int
		push	eax		; int
		mov	[esi+14h], edi
		push	dword ptr [ebx+8] ; size_t
		push	dword ptr [ebx+4] ; void *
		call	sub_1000D0E9
		add	esp, 10h
		mov	[esi+0Ch], eax
		test	eax, eax
		jnz	short loc_10009C35
		push	esi
		call	PORT_Free_Util
		pop	ecx
		xor	eax, eax
		jmp	short loc_10009C49
; ---------------------------------------------------------------------------

loc_10009C35:				; CODE XREF: sub_10009BBF+69j
		mov	eax, [ebx+8]
		mov	[esi+10h], eax
		lea	eax, [edi+14h]
		mov	[esi+18h], eax
		lea	eax, [edi+20h]
		mov	[esi+1Ch], eax
		mov	eax, esi

loc_10009C49:				; CODE XREF: sub_10009BBF+74j
		pop	edi
		pop	ebx
		pop	esi
		retn
sub_10009BBF	endp


; =============== S U B	R O U T	I N E =======================================


sub_10009C4D	proc near		; CODE XREF: sub_1000B353+51p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		cmp	[esp+arg_4], 7
		jge	short loc_10009C62
		push	0FFFFE012h
		call	PORT_SetError_Util
		pop	ecx
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_10009C62:				; CODE XREF: sub_10009C4D+5j
		push	ebx
		push	ebp
		mov	ebp, [esp+8+arg_0]
		push	edi
		movzx	edi, byte ptr [ebp+3]
		movzx	eax, byte ptr [ebp+4]
		movzx	ebx, byte ptr [ebp+5]
		shl	edi, 8
		or	edi, eax
		shl	ebx, 8
		movzx	eax, byte ptr [ebp+6]
		or	ebx, eax
		lea	eax, [edi+7]
		add	eax, ebx
		cmp	eax, [esp+0Ch+arg_4]
		jz	short loc_10009C95
		push	0FFFFE012h
		jmp	short loc_10009CAD
; ---------------------------------------------------------------------------

loc_10009C95:				; CODE XREF: sub_10009C4D+3Fj
		push	800h
		call	PORT_NewArena_Util
		mov	[esp+10h+arg_4], eax
		pop	ecx
		test	eax, eax
		jnz	short loc_10009CBA
		push	0FFFFE013h

loc_10009CAD:				; CODE XREF: sub_10009C4D+46j
		call	PORT_SetError_Util
		pop	ecx
		xor	eax, eax
		jmp	loc_10009D81
; ---------------------------------------------------------------------------

loc_10009CBA:				; CODE XREF: sub_10009C4D+59j
		push	esi
		push	8F8h
		push	eax
		call	PORT_ArenaAlloc_Util
		mov	esi, eax
		pop	ecx
		pop	ecx
		test	esi, esi
		jz	loc_10009D66
		mov	ecx, [esp+10h+arg_4]
		and	dword ptr [esi+8], 0
		mov	[esi+0Ch], ecx
		mov	dword ptr [esi+4], 8
		mov	dword ptr [esi], 1
		movzx	eax, byte ptr [ebp+0]
		mov	[esi+14h], eax
		movzx	eax, byte ptr [ebp+1]
		mov	[esi+18h], eax
		movzx	eax, byte ptr [ebp+2]
		push	edi
		push	ecx
		mov	[esi+1Ch], eax
		call	PORT_ArenaAlloc_Util
		mov	[esi+24h], eax
		pop	ecx
		pop	ecx
		test	eax, eax
		jz	short loc_10009D66
		push	edi		; size_t
		lea	ecx, [ebp+7]
		mov	[esi+28h], edi
		push	ecx		; void *
		push	eax		; void *
		call	memcpy
		add	esp, 0Ch
		test	ebx, ebx
		jz	short loc_10009D5E
		push	ebx
		push	[esp+14h+arg_4]
		call	PORT_ArenaAlloc_Util
		mov	[esi+2Ch], eax
		pop	ecx
		pop	ecx
		test	eax, eax
		jz	short loc_10009D66
		lea	ecx, [ebp+7]
		push	ebx		; size_t
		add	ecx, edi
		push	ecx		; void *
		push	eax		; void *
		call	memcpy
		push	offset aServerCert ; "Server-Cert"
		push	dword ptr [esi+2Ch] ; char *
		call	strcmp
		add	esp, 14h
		test	eax, eax
		jnz	short loc_10009D62
		or	dword ptr [esi+14h], 40h
		jmp	short loc_10009D62
; ---------------------------------------------------------------------------

loc_10009D5E:				; CODE XREF: sub_10009C4D+D5j
		and	dword ptr [esi+2Ch], 0

loc_10009D62:				; CODE XREF: sub_10009C4D+109j
					; sub_10009C4D+10Fj
		mov	eax, esi
		jmp	short loc_10009D80
; ---------------------------------------------------------------------------

loc_10009D66:				; CODE XREF: sub_10009C4D+7Fj
					; sub_10009C4D+C0j ...
		push	0
		push	[esp+14h+arg_4]
		call	PORT_FreeArena_Util
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 0Ch
		xor	eax, eax

loc_10009D80:				; CODE XREF: sub_10009C4D+117j
		pop	esi

loc_10009D81:				; CODE XREF: sub_10009C4D+68j
		pop	edi
		pop	ebp
		pop	ebx
		retn
sub_10009C4D	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10009D85	proc near		; CODE XREF: sub_10008F76+124p
					; sub_1000C15A+17p

var_C		= byte ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		xor	ecx, ecx
		lea	eax, [ebp+var_C]
		push	eax
		push	ecx
		push	[ebp+arg_4]
		mov	[ebp+var_8], ecx
		mov	[ebp+var_4], ecx
		call	sub_1000A241
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_10009DCA
		lea	eax, [ebp+var_C]
		push	eax
		push	1
		push	[ebp+arg_0]
		call	sub_10009E46
		add	esp, 0Ch
		cmp	eax, 0FFFFFFFFh
		jz	short loc_10009DCA
		push	[ebp+var_8]
		call	PORT_Free_Util
		pop	ecx
		xor	eax, eax
		jmp	short loc_10009DDC
; ---------------------------------------------------------------------------

loc_10009DCA:				; CODE XREF: sub_10009D85+20j
					; sub_10009D85+36j
		cmp	[ebp+var_8], 0
		jz	short loc_10009DD9
		push	[ebp+var_8]
		call	PORT_Free_Util
		pop	ecx

loc_10009DD9:				; CODE XREF: sub_10009D85+49j
		or	eax, 0FFFFFFFFh

loc_10009DDC:				; CODE XREF: sub_10009D85+43j
		mov	esp, ebp
		pop	ebp
		retn
sub_10009D85	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10009DE0	proc near		; CODE XREF: sub_1000C13C+15p
					; sub_1000CBF9+1Bp

var_C		= byte ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		push	800h
		call	PORT_NewArena_Util
		mov	esi, eax
		pop	ecx
		test	esi, esi
		jz	short loc_10009E3E
		push	[ebp+arg_8]
		lea	eax, [ebp+var_C]
		push	eax
		push	esi
		push	[ebp+arg_4]
		call	sub_1000A344
		add	esp, 10h
		test	eax, eax
		jnz	short loc_10009E34
		lea	eax, [ebp+var_C]
		push	eax
		push	[ebp+arg_8]
		push	[ebp+arg_0]
		call	sub_10009E46
		add	esp, 0Ch
		cmp	eax, 0FFFFFFFFh
		jz	short loc_10009E34
		push	0
		push	esi
		call	PORT_FreeArena_Util
		pop	ecx
		pop	ecx
		xor	eax, eax
		jmp	short loc_10009E41
; ---------------------------------------------------------------------------

loc_10009E34:				; CODE XREF: sub_10009DE0+2Dj
					; sub_10009DE0+44j
		push	0
		push	esi
		call	PORT_FreeArena_Util
		pop	ecx
		pop	ecx

loc_10009E3E:				; CODE XREF: sub_10009DE0+16j
		or	eax, 0FFFFFFFFh

loc_10009E41:				; CODE XREF: sub_10009DE0+52j
		pop	esi
		mov	esp, ebp
		pop	ebp
		retn
sub_10009DE0	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10009E46	proc near		; CODE XREF: sub_10009D85+2Bp
					; sub_10009DE0+39p ...

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= byte ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ecx
		mov	eax, [ebp+arg_8]
		push	esi
		push	edi
		mov	edi, [ebp+arg_0]
		mov	ecx, [eax+4]
		mov	eax, [eax+8]
		push	dword_10015054
		mov	[ebp+var_4], eax
		mov	al, [ebp+arg_4]
		mov	[ebp+var_8], ecx
		mov	[ecx], al
		mov	esi, [edi]
		call	ds:PR_Lock
		push	0
		lea	eax, [ebp+var_8]
		push	eax
		push	esi
		call	dword ptr [esi+8]
		push	dword_10015054
		mov	esi, eax
		call	ds:PR_Unlock
		add	esp, 14h
		lea	ecx, [esi+790Fh]
		neg	ecx
		sbb	ecx, ecx
		and	ecx, esi
		jnz	short loc_10009EA9
		push	ecx
		push	dword ptr [edi]
		call	sub_1000BF14
		pop	ecx
		pop	ecx
		test	eax, eax
		jz	short loc_10009EB9

loc_10009EA9:				; CODE XREF: sub_10009E46+53j
		push	0FFFFE012h
		call	PORT_SetError_Util
		pop	ecx
		or	eax, 0FFFFFFFFh
		jmp	short loc_10009EBB
; ---------------------------------------------------------------------------

loc_10009EB9:				; CODE XREF: sub_10009E46+61j
		xor	eax, eax

loc_10009EBB:				; CODE XREF: sub_10009E46+71j
		pop	edi
		pop	esi
		mov	esp, ebp
		pop	ebp
		retn
sub_10009E46	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_10009EC1(int,	char *)
sub_10009EC1	proc near		; CODE XREF: sub_10008F76+13Dp
					; sub_1000B23C+F2p

var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		cmp	[ebp+arg_4], 0
		jnz	short loc_10009ED1
		xor	eax, eax
		jmp	short loc_10009F29
; ---------------------------------------------------------------------------

loc_10009ED1:				; CODE XREF: sub_10009EC1+Aj
		push	esi
		push	800h
		call	PORT_NewArena_Util
		mov	esi, eax
		pop	ecx
		test	esi, esi
		jz	short loc_10009F25
		lea	eax, [ebp+var_C]
		push	eax		; int
		push	esi		; int
		push	[ebp+arg_4]	; char *
		call	sub_1000A408
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_10009F1B
		lea	eax, [ebp+var_C]
		push	eax
		push	2
		push	[ebp+arg_0]
		call	sub_10009E46
		add	esp, 0Ch
		cmp	eax, 0FFFFFFFFh
		jz	short loc_10009F1B
		push	0
		push	esi
		call	PORT_FreeArena_Util
		pop	ecx
		pop	ecx
		xor	eax, eax
		jmp	short loc_10009F28
; ---------------------------------------------------------------------------

loc_10009F1B:				; CODE XREF: sub_10009EC1+34j
					; sub_10009EC1+4Aj
		push	0
		push	esi
		call	PORT_FreeArena_Util
		pop	ecx
		pop	ecx

loc_10009F25:				; CODE XREF: sub_10009EC1+20j
		or	eax, 0FFFFFFFFh

loc_10009F28:				; CODE XREF: sub_10009EC1+58j
		pop	esi

loc_10009F29:				; CODE XREF: sub_10009EC1+Ej
		mov	esp, ebp
		pop	ebp
		retn
sub_10009EC1	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_10009F2D(int,	char *)
sub_10009F2D	proc near		; CODE XREF: sub_1000B23C+D9p
					; sub_1000CCF8+6Cp

var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		push	800h
		call	PORT_NewArena_Util
		mov	esi, eax
		pop	ecx
		test	esi, esi
		jz	short loc_10009F87
		lea	eax, [ebp+var_C]
		push	eax		; int
		push	esi		; int
		push	[ebp+arg_4]	; char *
		call	sub_1000A514
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_10009F7D
		lea	eax, [ebp+var_C]
		push	eax
		push	6
		push	[ebp+arg_0]
		call	sub_10009E46
		add	esp, 0Ch
		cmp	eax, 0FFFFFFFFh
		jz	short loc_10009F7D
		push	0
		push	esi
		call	PORT_FreeArena_Util
		pop	ecx
		pop	ecx
		xor	eax, eax
		jmp	short loc_10009F8A
; ---------------------------------------------------------------------------

loc_10009F7D:				; CODE XREF: sub_10009F2D+2Aj
					; sub_10009F2D+40j
		push	0
		push	esi
		call	PORT_FreeArena_Util
		pop	ecx
		pop	ecx

loc_10009F87:				; CODE XREF: sub_10009F2D+16j
		or	eax, 0FFFFFFFFh

loc_10009F8A:				; CODE XREF: sub_10009F2D+4Ej
		pop	esi
		mov	esp, ebp
		pop	ebp
		retn
sub_10009F2D	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10009F8F	proc near		; CODE XREF: sub_10008F76+152p
					; sub_10009175+45p ...

var_C		= byte ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		push	800h
		call	PORT_NewArena_Util
		mov	esi, eax
		pop	ecx
		test	esi, esi
		jz	short loc_10009FE9
		lea	eax, [ebp+var_C]
		push	eax
		push	esi
		push	[ebp+arg_4]
		call	sub_1000A7AD
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_10009FDF
		lea	eax, [ebp+var_C]
		push	eax
		push	3
		push	[ebp+arg_0]
		call	sub_10009E46
		add	esp, 0Ch
		cmp	eax, 0FFFFFFFFh
		jz	short loc_10009FDF
		push	0
		push	esi
		call	PORT_FreeArena_Util
		pop	ecx
		pop	ecx
		xor	eax, eax
		jmp	short loc_10009FEC
; ---------------------------------------------------------------------------

loc_10009FDF:				; CODE XREF: sub_10009F8F+2Aj
					; sub_10009F8F+40j
		push	0
		push	esi
		call	PORT_FreeArena_Util
		pop	ecx
		pop	ecx

loc_10009FE9:				; CODE XREF: sub_10009F8F+16j
		or	eax, 0FFFFFFFFh

loc_10009FEC:				; CODE XREF: sub_10009F8F+4Ej
		pop	esi
		mov	esp, ebp
		pop	ebp
		retn
sub_10009F8F	endp


; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10009FF1(void	*, int)
sub_10009FF1	proc near		; CODE XREF: sub_1000BD8F+9Ep
					; sub_1000C1A9+6p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	edi
		mov	edi, [esp+4+arg_0]
		test	edi, edi
		jz	loc_1000A0E3
		cmp	[esp+4+arg_4], 0
		push	ebx
		mov	ebx, [edi+4]
		jz	short loc_1000A014
		test	ebx, ebx
		jz	short loc_1000A014
		push	ebx
		call	sub_1000C745
		pop	ecx

loc_1000A014:				; CODE XREF: sub_10009FF1+16j
					; sub_10009FF1+1Aj
		push	esi
		push	dword_10015058
		call	ds:PR_Lock
		dec	dword ptr [edi+94h]
		push	dword_10015058
		mov	esi, [edi+94h]
		call	ds:PR_Unlock
		pop	ecx
		pop	ecx
		test	esi, esi
		pop	esi
		jnz	loc_1000A0D0
		cmp	dword ptr [edi+6Ch], 0
		jz	short loc_1000A053
		push	dword ptr [edi+6Ch] ; void *
		call	sub_1000A0E5
		pop	ecx

loc_1000A053:				; CODE XREF: sub_10009FF1+57j
		lea	eax, [edi+98h]
		push	eax
		push	dword ptr [edi+88h]
		call	sub_1000D118
		lea	eax, [edi+160h]
		push	eax
		push	dword ptr [edi+8Ch]
		call	sub_1000D118
		lea	eax, [edi+228h]
		push	eax
		push	dword ptr [edi+58h]
		call	sub_1000D118
		xor	eax, eax
		push	428h		; size_t
		push	eax		; int
		push	edi		; void *
		mov	[edi+58h], eax
		mov	[edi+88h], eax
		call	memset
		add	esp, 24h
		call	sub_1000C754
		mov	eax, dword_10015048
		cmp	eax, 0Ah
		jle	short loc_1000A0B8
		push	edi
		call	PORT_Free_Util
		pop	ecx
		jmp	short loc_1000A0CB
; ---------------------------------------------------------------------------

loc_1000A0B8:				; CODE XREF: sub_10009FF1+BCj
		inc	eax
		mov	dword_10015048,	eax
		mov	eax, dword_1001503C
		mov	[edi], eax
		mov	dword_1001503C,	edi

loc_1000A0CB:				; CODE XREF: sub_10009FF1+C5j
		call	sub_1000CBEB

loc_1000A0D0:				; CODE XREF: sub_10009FF1+4Dj
		cmp	[esp+8+arg_4], 0
		jz	short loc_1000A0E2
		test	ebx, ebx
		jz	short loc_1000A0E2
		push	ebx
		call	sub_1000CBDC
		pop	ecx

loc_1000A0E2:				; CODE XREF: sub_10009FF1+E4j
					; sub_10009FF1+E8j
		pop	ebx

loc_1000A0E3:				; CODE XREF: sub_10009FF1+7j
		pop	edi
		retn
sub_10009FF1	endp


; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1000A0E5(void	*)
sub_1000A0E5	proc near		; CODE XREF: sub_10008F76+108p
					; sub_10008F76+10Fp ...

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		push	edi
		mov	edi, [esi+0Ch]
		test	edi, edi
		jnz	short loc_1000A158
		cmp	dword ptr [esi], 1
		jnz	short loc_1000A16D
		lea	eax, [esi+0F8h]
		push	eax
		push	dword ptr [esi+24h]
		call	sub_1000D118
		lea	eax, [esi+30h]
		push	eax
		push	dword ptr [esi+2Ch]
		call	sub_1000D118
		add	esp, 10h
		call	sub_1000C754
		mov	eax, dword_10015050
		cmp	eax, 0Ah
		jle	short loc_1000A12D
		push	esi
		call	PORT_Free_Util
		pop	ecx
		jmp	short loc_1000A151
; ---------------------------------------------------------------------------

loc_1000A12D:				; CODE XREF: sub_1000A0E5+3Dj
		push	8F8h		; size_t
		inc	eax
		push	0		; int
		push	esi		; void *
		mov	dword_10015050,	eax
		call	memset
		mov	eax, dword_10015044
		add	esp, 0Ch
		mov	[esi+10h], eax
		mov	dword_10015044,	esi

loc_1000A151:				; CODE XREF: sub_1000A0E5+46j
		pop	edi
		pop	esi
		jmp	sub_1000CBEB
; ---------------------------------------------------------------------------

loc_1000A158:				; CODE XREF: sub_1000A0E5+Bj
		push	10h		; size_t
		push	0		; int
		push	esi		; void *
		call	memset
		push	0
		push	edi
		call	PORT_FreeArena_Util
		add	esp, 14h

loc_1000A16D:				; CODE XREF: sub_1000A0E5+10j
		pop	edi
		pop	esi
		retn
sub_1000A0E5	endp


; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1000A170(size_t, int,	int)
sub_1000A170	proc near		; CODE XREF: sub_1000BA0D+22p

var_1		= byte ptr -1
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ecx
		push	ebx
		push	ebp
		push	esi
		push	edi
		mov	edi, [esp+14h+arg_0]
		mov	[esp+14h+var_1], 0
		mov	ebp, [edi+2Ch]
		test	ebp, ebp
		jnz	short loc_1000A189
		lea	ebp, [esp+14h+var_1]

loc_1000A189:				; CODE XREF: sub_1000A170+13j
		push	ebp		; char *
		call	strlen
		mov	ecx, [edi+28h]
		inc	eax
		mov	esi, [esp+18h+arg_8]
		add	ecx, 0Dh
		add	ecx, eax
		mov	[esp+18h+arg_0], eax
		push	ecx
		push	[esp+1Ch+arg_4]
		mov	[esi+8], ecx
		call	PORT_ArenaAlloc_Util
		mov	ebx, eax
		add	esp, 0Ch
		mov	[esi+4], ebx
		test	ebx, ebx
		jnz	short loc_1000A1C9
		push	0FFFFE013h
		call	PORT_SetError_Util
		pop	ecx
		or	eax, 0FFFFFFFFh
		jmp	short loc_1000A23B
; ---------------------------------------------------------------------------

loc_1000A1C9:				; CODE XREF: sub_1000A170+47j
		mov	eax, [edi+14h]
		shr	eax, 8
		mov	[ebx+3], al
		mov	al, [edi+14h]
		mov	[ebx+4], al
		mov	eax, [edi+18h]
		mov	ecx, [esp+14h+arg_0]
		shr	eax, 8
		mov	[ebx+5], al
		mov	al, [edi+18h]
		mov	[ebx+6], al
		mov	eax, [edi+1Ch]
		shr	eax, 8
		mov	[ebx+7], al
		mov	al, [edi+1Ch]
		mov	[ebx+8], al
		mov	eax, [edi+28h]
		shr	eax, 8
		mov	[ebx+9], al
		mov	al, [edi+28h]
		mov	[ebx+0Ah], al
		mov	eax, ecx
		shr	eax, 8
		mov	[ebx+0Bh], al
		lea	eax, [ebx+0Dh]
		mov	[ebx+0Ch], cl
		push	dword ptr [edi+28h] ; size_t
		push	dword ptr [edi+24h] ; void *
		push	eax		; void *
		call	memcpy
		mov	eax, [edi+28h]
		push	[esp+20h+arg_0]	; size_t
		add	eax, 0Dh
		add	eax, ebx
		push	ebp		; void *
		push	eax		; void *
		call	memcpy
		add	esp, 18h
		xor	eax, eax

loc_1000A23B:				; CODE XREF: sub_1000A170+57j
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		pop	ecx
		retn
sub_1000A170	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_1000A241	proc near		; CODE XREF: sub_10009D85+16p
					; sub_1000AD1A+8Cp ...

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	ebx
		mov	ebx, [ebp+arg_0]
		push	esi
		push	edi
		mov	esi, [ebx+8]
		inc	esi
		cmp	esi, 0F000h
		ja	short loc_1000A2A1
		cmp	[ebp+arg_4], 0
		jz	short loc_1000A26B
		push	esi
		push	[ebp+arg_4]
		call	PORT_ArenaAlloc_Util
		mov	edi, [ebp+arg_8]
		pop	ecx
		jmp	short loc_1000A279
; ---------------------------------------------------------------------------

loc_1000A26B:				; CODE XREF: sub_1000A241+19j
		mov	edi, [ebp+arg_8]
		cmp	[edi+8], esi
		jnb	short loc_1000A27D
		push	esi
		call	PORT_Alloc_Util

loc_1000A279:				; CODE XREF: sub_1000A241+28j
		mov	[edi+4], eax
		pop	ecx

loc_1000A27D:				; CODE XREF: sub_1000A241+30j
		mov	eax, [edi+4]
		mov	[edi+8], esi
		test	eax, eax
		jz	short loc_1000A2A1
		push	dword ptr [ebx+8] ; size_t
		inc	eax
		push	dword ptr [ebx+4] ; void *
		push	eax		; void *
		call	memcpy
		mov	eax, [edi+4]
		add	esp, 0Ch
		mov	byte ptr [eax],	1
		xor	eax, eax
		jmp	short loc_1000A2A4
; ---------------------------------------------------------------------------

loc_1000A2A1:				; CODE XREF: sub_1000A241+13j
					; sub_1000A241+44j
		or	eax, 0FFFFFFFFh

loc_1000A2A4:				; CODE XREF: sub_1000A241+5Ej
		pop	edi
		pop	esi
		pop	ebx
		pop	ebp
		retn
sub_1000A241	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000A2A9	proc near		; CODE XREF: sub_1000BA9F+22p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		push	ebp
		push	edi
		mov	edi, [esp+0Ch+arg_0]
		xor	ebx, ebx
		cmp	[edi+1Ch], ebx
		jz	short loc_1000A2C3
		push	dword ptr [edi+1Ch] ; char *
		call	strlen
		pop	ecx
		lea	ebx, [eax+1]

loc_1000A2C3:				; CODE XREF: sub_1000A2A9+Cj
		mov	ecx, [edi+18h]
		add	ecx, 7
		push	esi
		mov	esi, [esp+10h+arg_8]
		add	ecx, ebx
		push	ecx
		push	[esp+14h+arg_4]
		mov	[esi+8], ecx
		call	PORT_ArenaAlloc_Util
		pop	ecx
		mov	ebp, eax
		mov	[esi+4], ebp
		pop	ecx
		pop	esi
		test	ebp, ebp
		jnz	short loc_1000A2F9
		push	0FFFFE013h
		call	PORT_SetError_Util
		pop	ecx
		or	eax, 0FFFFFFFFh
		jmp	short loc_1000A340
; ---------------------------------------------------------------------------

loc_1000A2F9:				; CODE XREF: sub_1000A2A9+3Ej
		mov	eax, [edi+18h]
		shr	eax, 8
		mov	[ebp+3], al
		mov	al, [edi+18h]
		mov	[ebp+4], al
		mov	eax, ebx
		shr	eax, 8
		mov	[ebp+5], al
		lea	eax, [ebp+7]
		mov	[ebp+6], bl
		push	dword ptr [edi+18h] ; size_t
		push	dword ptr [edi+14h] ; void *
		push	eax		; void *
		call	memcpy
		add	esp, 0Ch
		test	ebx, ebx
		jz	short loc_1000A33E
		mov	eax, [edi+18h]
		push	ebx		; size_t
		push	dword ptr [edi+1Ch] ; void *
		add	eax, 7
		add	eax, ebp
		push	eax		; void *
		call	memcpy
		add	esp, 0Ch

loc_1000A33E:				; CODE XREF: sub_1000A2A9+7Ej
		xor	eax, eax

loc_1000A340:				; CODE XREF: sub_1000A2A9+4Ej
		pop	edi
		pop	ebp
		pop	ebx
		retn
sub_1000A2A9	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_1000A344	proc near		; CODE XREF: sub_10009DE0+23p
					; sub_1000AE28+8Bp ...

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	ebx
		mov	ebx, [ebp+arg_C]
		push	esi
		mov	esi, [ebp+arg_8]
		push	edi
		cmp	ebx, 5
		jnz	short loc_1000A373
		xor	eax, eax
		inc	eax
		push	eax
		push	[ebp+arg_4]
		mov	[esi+8], eax
		call	PORT_ArenaAlloc_Util
		mov	[esi+4], eax
		pop	ecx
		pop	ecx
		test	eax, eax
		jz	short loc_1000A3AD
		mov	[eax], bl

loc_1000A36F:				; CODE XREF: sub_1000A344+67j
		xor	eax, eax
		jmp	short loc_1000A3B0
; ---------------------------------------------------------------------------

loc_1000A373:				; CODE XREF: sub_1000A344+Fj
		mov	edi, [ebp+arg_0]
		mov	eax, [edi+8]
		inc	eax
		mov	[esi+8], eax
		cmp	eax, 0F000h
		ja	short loc_1000A3AD
		push	eax
		push	[ebp+arg_4]
		call	PORT_ArenaAlloc_Util
		mov	[esi+4], eax
		pop	ecx
		pop	ecx
		test	eax, eax
		jz	short loc_1000A3AD
		push	dword ptr [edi+8] ; size_t
		inc	eax
		push	dword ptr [edi+4] ; void *
		push	eax		; void *
		call	memcpy
		mov	eax, [esi+4]
		add	esp, 0Ch
		mov	[eax], bl
		jmp	short loc_1000A36F
; ---------------------------------------------------------------------------

loc_1000A3AD:				; CODE XREF: sub_1000A344+27j
					; sub_1000A344+3Ej ...
		or	eax, 0FFFFFFFFh

loc_1000A3B0:				; CODE XREF: sub_1000A344+2Dj
		pop	edi
		pop	esi
		pop	ebx
		pop	ebp
		retn
sub_1000A344	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000A3B5	proc near		; CODE XREF: sub_1000BB8A+22p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi
		mov	esi, [esp+4+arg_8]
		push	edi
		mov	edi, [esp+8+arg_0]
		mov	eax, [edi+1Ch]
		add	eax, 5
		push	eax
		push	[esp+0Ch+arg_4]
		mov	[esi+8], eax
		call	PORT_ArenaAlloc_Util
		pop	ecx
		pop	ecx
		mov	ecx, eax
		mov	[esi+4], ecx
		test	ecx, ecx
		jnz	short loc_1000A3E2
		or	eax, 0FFFFFFFFh
		jmp	short loc_1000A405
; ---------------------------------------------------------------------------

loc_1000A3E2:				; CODE XREF: sub_1000A3B5+26j
		mov	eax, [edi+1Ch]
		shr	eax, 8
		mov	[ecx+3], al
		mov	al, [edi+1Ch]
		mov	[ecx+4], al
		lea	eax, [ecx+5]
		push	dword ptr [edi+1Ch] ; size_t
		push	dword ptr [edi+18h] ; void *
		push	eax		; void *
		call	memcpy
		add	esp, 0Ch
		xor	eax, eax

loc_1000A405:				; CODE XREF: sub_1000A3B5+2Bj
		pop	edi
		pop	esi
		retn
sub_1000A3B5	endp


; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1000A408(char	*, int,	int)
sub_1000A408	proc near		; CODE XREF: sub_10009EC1+2Ap
					; sub_1000AFC5+89p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi
		push	edi
		push	[esp+8+arg_0]	; char *
		call	strlen
		mov	edi, [esp+0Ch+arg_8]
		pop	ecx
		lea	esi, [eax+1]
		lea	eax, [esi+1]
		mov	[edi+8], eax
		cmp	eax, 0F000h
		ja	short loc_1000A454
		push	eax
		push	[esp+0Ch+arg_4]
		call	PORT_ArenaAlloc_Util
		mov	[edi+4], eax
		pop	ecx
		pop	ecx
		test	eax, eax
		jz	short loc_1000A454
		push	esi		; size_t
		push	[esp+0Ch+arg_0]	; void *
		inc	eax
		push	eax		; void *
		call	memcpy
		mov	eax, [edi+4]
		add	esp, 0Ch
		mov	byte ptr [eax],	2
		xor	eax, eax
		jmp	short loc_1000A457
; ---------------------------------------------------------------------------

loc_1000A454:				; CODE XREF: sub_1000A408+1Ej
					; sub_1000A408+31j
		or	eax, 0FFFFFFFFh

loc_1000A457:				; CODE XREF: sub_1000A408+4Aj
		pop	edi
		pop	esi
		retn
sub_1000A408	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000A45A	proc near		; CODE XREF: sub_1000BC04+22p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		push	esi
		mov	esi, [esp+8+arg_8]
		push	edi
		mov	edi, [esp+0Ch+arg_0]
		mov	ecx, [edi+1Ch]
		mov	eax, [edi+34h]
		add	ecx, [edi+28h]
		add	eax, 9
		add	eax, ecx
		push	eax
		push	[esp+10h+arg_4]
		mov	[esi+8], eax
		call	PORT_ArenaAlloc_Util
		mov	ebx, eax
		mov	[esi+4], ebx
		pop	ecx
		pop	ecx
		test	ebx, ebx
		jnz	short loc_1000A49B
		push	0FFFFE013h
		call	PORT_SetError_Util
		pop	ecx
		or	eax, 0FFFFFFFFh
		jmp	short loc_1000A510
; ---------------------------------------------------------------------------

loc_1000A49B:				; CODE XREF: sub_1000A45A+2Fj
		mov	eax, [edi+1Ch]
		shr	eax, 8
		mov	[ebx+3], al
		mov	al, [edi+1Ch]
		mov	[ebx+4], al
		mov	eax, [edi+28h]
		shr	eax, 8
		mov	[ebx+5], al
		mov	al, [edi+28h]
		mov	[ebx+6], al
		mov	eax, [edi+34h]
		shr	eax, 8
		mov	[ebx+7], al
		mov	al, [edi+34h]
		mov	[ebx+8], al
		lea	eax, [ebx+9]
		push	dword ptr [edi+1Ch] ; size_t
		push	dword ptr [edi+18h] ; void *
		push	eax		; void *
		call	memcpy
		add	esp, 0Ch
		cmp	dword ptr [edi+28h], 0
		jz	short loc_1000A50E
		push	dword ptr [edi+28h] ; size_t
		mov	eax, [edi+1Ch]
		push	dword ptr [edi+24h] ; void *
		add	eax, 9
		add	eax, ebx
		push	eax		; void *
		call	memcpy
		mov	eax, [edi+1Ch]
		push	dword ptr [edi+34h] ; size_t
		add	eax, 9
		add	eax, [edi+28h]
		push	dword ptr [edi+30h] ; void *
		add	eax, ebx
		push	eax		; void *
		call	memcpy
		add	esp, 18h

loc_1000A50E:				; CODE XREF: sub_1000A45A+84j
		xor	eax, eax

loc_1000A510:				; CODE XREF: sub_1000A45A+3Fj
		pop	edi
		pop	esi
		pop	ebx
		retn
sub_1000A45A	endp


; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1000A514(char	*, int,	int)
sub_1000A514	proc near		; CODE XREF: sub_10009F2D+20p
					; sub_1000BC04+36p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi
		push	edi
		push	[esp+8+arg_0]	; char *
		call	strlen
		mov	edi, [esp+0Ch+arg_8]
		pop	ecx
		lea	esi, [eax+1]
		lea	eax, [esi+1]
		mov	[edi+8], eax
		cmp	eax, 0F000h
		ja	short loc_1000A560
		push	eax
		push	[esp+0Ch+arg_4]
		call	PORT_ArenaAlloc_Util
		mov	[edi+4], eax
		pop	ecx
		pop	ecx
		test	eax, eax
		jz	short loc_1000A560
		push	esi		; size_t
		push	[esp+0Ch+arg_0]	; void *
		inc	eax
		push	eax		; void *
		call	memcpy
		mov	eax, [edi+4]
		add	esp, 0Ch
		mov	byte ptr [eax],	6
		xor	eax, eax
		jmp	short loc_1000A563
; ---------------------------------------------------------------------------

loc_1000A560:				; CODE XREF: sub_1000A514+1Ej
					; sub_1000A514+31j
		or	eax, 0FFFFFFFFh

loc_1000A563:				; CODE XREF: sub_1000A514+4Aj
		pop	edi
		pop	esi
		retn
sub_1000A514	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000A566	proc near		; CODE XREF: sub_1000BC7E+22p

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 18h
		push	ebx
		push	ebp
		push	esi
		push	edi
		mov	edi, [esp+28h+arg_0]
		xor	ebx, ebx
		mov	esi, ebx
		mov	[esp+28h+var_8], ebx
		mov	[esp+28h+var_18], esi
		mov	ebp, [edi+24h]
		mov	eax, [edi+28h]
		mov	[esp+28h+var_14], ebp
		mov	[esp+28h+var_C], eax
		cmp	[edi+20h], ebx
		jz	short loc_1000A5A0
		push	dword ptr [edi+20h] ; char *
		call	strlen
		inc	eax
		pop	ecx
		mov	[esp+28h+var_18], eax
		mov	esi, eax

loc_1000A5A0:				; CODE XREF: sub_1000A566+28j
		cmp	[edi+2Ch], ebx
		jz	loc_1000A662
		mov	ebp, ebx
		push	2
		pop	eax
		mov	[esp+28h+var_10], eax
		cmp	[edi+30h], ebx
		jbe	short loc_1000A5DC
		mov	esi, eax

loc_1000A5B9:				; CODE XREF: sub_1000A566+68j
		mov	eax, [edi+2Ch]
		push	dword ptr [eax+ebp*4] ;	char *
		call	strlen
		add	esi, 3
		add	esi, eax
		inc	ebp
		pop	ecx
		cmp	ebp, [edi+30h]
		jb	short loc_1000A5B9
		mov	[esp+28h+var_10], esi
		mov	esi, [esp+28h+var_18]
		mov	eax, [esp+28h+var_10]

loc_1000A5DC:				; CODE XREF: sub_1000A566+4Fj
		mov	ebp, [esp+28h+var_14]

loc_1000A5E0:				; CODE XREF: sub_1000A566+FEj
		mov	ecx, [edi+1Ch]
		mov	[esp+28h+var_10], ecx
		mov	[esp+28h+var_4], ebx
		lea	edx, ds:6[ecx*4]
		add	edx, esi
		add	edx, eax
		test	ecx, ecx
		jz	short loc_1000A630
		lea	esi, [ebp+8]
		mov	ebp, [esp+28h+var_C]
		sub	ebp, [esp+28h+var_14]

loc_1000A605:				; CODE XREF: sub_1000A566+C8j
		cmp	dword ptr [esi+ebp], 0FFFFh
		ja	short loc_1000A669
		mov	eax, [esi]
		cmp	eax, 0FFFFh
		ja	short loc_1000A669
		add	eax, [esi+ebp]
		add	esi, 0Ch
		mov	edi, [esp+28h+arg_0]
		add	edx, eax
		mov	eax, [esp+28h+var_4]
		inc	eax
		mov	[esp+28h+var_4], eax
		cmp	eax, ecx
		jb	short loc_1000A605

loc_1000A630:				; CODE XREF: sub_1000A566+92j
		mov	esi, [esp+28h+arg_8]
		lea	eax, [edx+3]
		push	eax
		push	[esp+2Ch+arg_4]
		mov	[esi+8], eax
		call	PORT_ArenaAlloc_Util
		mov	ebp, eax
		mov	[esi+4], ebp
		pop	ecx
		pop	ecx
		test	ebp, ebp
		jnz	short loc_1000A670
		push	0FFFFE013h

loc_1000A654:				; CODE XREF: sub_1000A566+108j
		call	PORT_SetError_Util
		pop	ecx
		or	eax, 0FFFFFFFFh
		jmp	loc_1000A7A5
; ---------------------------------------------------------------------------

loc_1000A662:				; CODE XREF: sub_1000A566+3Dj
		mov	eax, ebx
		jmp	loc_1000A5E0
; ---------------------------------------------------------------------------

loc_1000A669:				; CODE XREF: sub_1000A566+A6j
					; sub_1000A566+AFj
		push	0FFFFE004h
		jmp	short loc_1000A654
; ---------------------------------------------------------------------------

loc_1000A670:				; CODE XREF: sub_1000A566+E7j
		mov	ecx, [esp+28h+var_10]
		mov	eax, ecx
		shr	eax, 8
		mov	[ebp+3], al
		mov	[ebp+4], cl
		mov	ecx, [esp+28h+var_18]
		mov	eax, ecx
		shr	eax, 8
		push	ecx		; size_t
		mov	[ebp+5], al
		lea	eax, [ebp+9]
		mov	[ebp+6], cl
		mov	[ebp+7], bx
		push	dword ptr [edi+20h] ; void *
		push	eax		; void *
		call	memcpy
		mov	esi, [esp+34h+var_18]
		add	esp, 0Ch
		mov	ecx, [esp+28h+var_10]
		add	esi, 9
		add	esi, ebp
		test	ecx, ecx
		jz	loc_1000A749
		mov	edx, [esp+28h+var_14]
		mov	ebp, ecx
		add	edx, 8

loc_1000A6C0:				; CODE XREF: sub_1000A566+16Dj
		mov	eax, [edx]
		shr	eax, 8
		mov	[esi], al
		mov	al, [edx]
		lea	edx, [edx+0Ch]
		mov	[esi+1], al
		add	esi, 2
		dec	ebp
		jnz	short loc_1000A6C0
		test	ecx, ecx
		jz	short loc_1000A749
		mov	edx, [esp+28h+var_C]
		mov	ebp, ecx
		add	edx, 8

loc_1000A6E2:				; CODE XREF: sub_1000A566+18Fj
		mov	eax, [edx]
		shr	eax, 8
		mov	[esi], al
		mov	al, [edx]
		lea	edx, [edx+0Ch]
		mov	[esi+1], al
		add	esi, 2
		dec	ebp
		jnz	short loc_1000A6E2
		test	ecx, ecx
		jz	short loc_1000A749
		mov	ebp, [esp+28h+var_14]
		mov	edi, ecx
		add	ebp, 8

loc_1000A704:				; CODE XREF: sub_1000A566+1B4j
		push	dword ptr [ebp+0] ; size_t
		push	dword ptr [ebp-4] ; void *
		push	esi		; void *
		call	memcpy
		add	esi, [ebp+0]
		add	esp, 0Ch
		lea	ebp, [ebp+0Ch]
		dec	edi
		jnz	short loc_1000A704
		mov	ecx, [esp+28h+var_10]
		mov	edi, [esp+28h+arg_0]
		test	ecx, ecx
		jz	short loc_1000A749
		mov	ebp, [esp+28h+var_C]
		mov	ebx, ecx
		add	ebp, 8

loc_1000A731:				; CODE XREF: sub_1000A566+1E1j
		push	dword ptr [ebp+0] ; size_t
		push	dword ptr [ebp-4] ; void *
		push	esi		; void *
		call	memcpy
		add	esi, [ebp+0]
		add	esp, 0Ch
		lea	ebp, [ebp+0Ch]
		dec	ebx
		jnz	short loc_1000A731

loc_1000A749:				; CODE XREF: sub_1000A566+14Bj
					; sub_1000A566+171j ...
		cmp	[edi+2Ch], ebx
		jz	short loc_1000A7A3
		mov	eax, [edi+30h]
		shr	eax, 8
		mov	[esi], al
		mov	al, [edi+30h]
		mov	[esi+1], al
		add	esi, 2
		cmp	[edi+30h], ebx
		jbe	short loc_1000A7A3

loc_1000A764:				; CODE XREF: sub_1000A566+23Bj
		mov	eax, [edi+2Ch]
		push	dword ptr [eax+ebx*4] ;	char *
		call	strlen
		lea	ebx, [eax+1]
		mov	eax, [esp+2Ch+var_8]
		mov	ecx, ebx
		mov	[esi+1], bl
		sar	ecx, 8
		mov	[esi], cl
		add	esi, 2
		mov	ecx, [edi+2Ch]
		push	ebx		; size_t
		push	dword ptr [ecx+eax*4] ;	void *
		push	esi		; void *
		call	memcpy
		add	esi, ebx
		add	esp, 10h
		mov	ebx, [esp+28h+var_8]
		inc	ebx
		mov	[esp+28h+var_8], ebx
		cmp	ebx, [edi+30h]
		jb	short loc_1000A764

loc_1000A7A3:				; CODE XREF: sub_1000A566+1E6j
					; sub_1000A566+1FCj
		xor	eax, eax

loc_1000A7A5:				; CODE XREF: sub_1000A566+F7j
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 18h
		retn
sub_1000A566	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000A7AD	proc near		; CODE XREF: sub_10009F8F+20p
					; sub_1000B0A1+89p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi
		mov	esi, [esp+4+arg_8]
		push	edi
		mov	edi, [esp+8+arg_0]
		mov	eax, [edi+8]
		inc	eax
		mov	[esi+8], eax
		cmp	eax, 0F000h
		ja	short loc_1000A7F2
		push	eax
		push	[esp+0Ch+arg_4]
		call	PORT_ArenaAlloc_Util
		mov	[esi+4], eax
		pop	ecx
		pop	ecx
		test	eax, eax
		jz	short loc_1000A7F2
		push	dword ptr [edi+8] ; size_t
		inc	eax
		push	dword ptr [edi+4] ; void *
		push	eax		; void *
		call	memcpy
		mov	eax, [esi+4]
		add	esp, 0Ch
		mov	byte ptr [eax],	3
		xor	eax, eax
		jmp	short loc_1000A7F5
; ---------------------------------------------------------------------------

loc_1000A7F2:				; CODE XREF: sub_1000A7AD+16j
					; sub_1000A7AD+29j
		or	eax, 0FFFFFFFFh

loc_1000A7F5:				; CODE XREF: sub_1000A7AD+43j
		pop	edi
		pop	esi
		retn
sub_1000A7AD	endp


; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1000A7F8(int,	char *,	int, int)
sub_1000A7F8	proc near		; CODE XREF: sub_10008F76+56p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebx
		push	ebp
		push	esi
		push	edi
		push	800h
		call	PORT_NewArena_Util
		mov	ebp, eax
		pop	ecx
		test	ebp, ebp
		jz	loc_1000A8C1
		push	8F8h
		push	ebp
		call	PORT_ArenaZAlloc_Util
		mov	ebx, eax
		pop	ecx
		pop	ecx
		test	ebx, ebx
		jz	loc_1000A8B7
		mov	esi, [esp+10h+arg_8]
		mov	ecx, [esp+10h+arg_C]
		mov	[ebx+0Ch], ebp
		mov	dword ptr [ebx], 1
		mov	dword ptr [ebx+4], 8
		mov	[ebx+8], ecx
		test	esi, esi
		jz	short loc_1000A84D
		lea	edi, [ebx+14h]
		movsd
		movsd
		movsd

loc_1000A84D:				; CODE XREF: sub_1000A7F8+4Dj
		mov	esi, [esp+10h+arg_0]
		push	dword ptr [esi+8]
		push	ebp
		call	PORT_ArenaAlloc_Util
		mov	[ebx+24h], eax
		pop	ecx
		pop	ecx
		test	eax, eax
		jz	short loc_1000A8B7
		mov	ecx, [esi+8]
		mov	[ebx+28h], ecx
		push	dword ptr [esi+8] ; size_t
		push	dword ptr [esi+4] ; void *
		push	eax		; void *
		call	memcpy
		mov	edi, [esp+1Ch+arg_4]
		add	esp, 0Ch
		test	edi, edi
		jz	short loc_1000A88C
		push	edi		; char *
		call	strlen
		pop	ecx
		lea	esi, [eax+1]
		jmp	short loc_1000A88E
; ---------------------------------------------------------------------------

loc_1000A88C:				; CODE XREF: sub_1000A7F8+86j
		xor	esi, esi

loc_1000A88E:				; CODE XREF: sub_1000A7F8+92j
		test	esi, esi
		jz	short loc_1000A8AF
		push	esi
		push	ebp
		call	PORT_ArenaAlloc_Util
		mov	[ebx+2Ch], eax
		pop	ecx
		pop	ecx
		test	eax, eax
		jz	short loc_1000A8B7
		push	esi		; size_t
		push	edi		; void *
		push	eax		; void *
		call	memcpy
		add	esp, 0Ch
		jmp	short loc_1000A8B3
; ---------------------------------------------------------------------------

loc_1000A8AF:				; CODE XREF: sub_1000A7F8+98j
		and	dword ptr [ebx+2Ch], 0

loc_1000A8B3:				; CODE XREF: sub_1000A7F8+B5j
		mov	eax, ebx
		jmp	short loc_1000A8CE
; ---------------------------------------------------------------------------

loc_1000A8B7:				; CODE XREF: sub_1000A7F8+2Aj
					; sub_1000A7F8+69j ...
		push	0
		push	ebp
		call	PORT_FreeArena_Util
		pop	ecx
		pop	ecx

loc_1000A8C1:				; CODE XREF: sub_1000A7F8+13j
		push	0FFFFE013h
		call	PORT_SetError_Util
		pop	ecx
		xor	eax, eax

loc_1000A8CE:				; CODE XREF: sub_1000A7F8+BDj
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
sub_1000A7F8	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_1000A8D3(int,	char *,	int, int)
sub_1000A8D3	proc near		; CODE XREF: sub_1000CBF9+29p

var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ebx
		push	esi
		push	edi
		push	800h
		call	PORT_NewArena_Util
		mov	edi, eax
		pop	ecx
		test	edi, edi
		jz	loc_1000A986
		push	20h
		push	edi
		call	PORT_ArenaZAlloc_Util
		mov	esi, eax
		pop	ecx
		pop	ecx
		test	esi, esi
		jz	short loc_1000A97C
		mov	ecx, [ebp+arg_8]
		mov	ebx, [ebp+arg_0]
		mov	[esi], ecx
		mov	ecx, [ebp+arg_C]
		mov	[esi+0Ch], edi
		mov	dword ptr [esi+4], 8
		mov	[esi+8], ecx
		push	dword ptr [ebx+8]
		push	edi
		call	PORT_ArenaAlloc_Util
		mov	[esi+14h], eax
		pop	ecx
		pop	ecx
		test	eax, eax
		jz	short loc_1000A97C
		cmp	[ebp+arg_4], 0
		jz	short loc_1000A95D
		push	[ebp+arg_4]	; char *
		call	strlen
		inc	eax
		push	eax
		push	edi
		mov	[ebp+var_4], eax
		call	PORT_ArenaAlloc_Util
		add	esp, 0Ch
		mov	[esi+1Ch], eax
		test	eax, eax
		jz	short loc_1000A97C
		push	[ebp+var_4]	; size_t
		push	[ebp+arg_4]	; void *
		push	eax		; void *
		call	memcpy
		add	esp, 0Ch
		jmp	short loc_1000A961
; ---------------------------------------------------------------------------

loc_1000A95D:				; CODE XREF: sub_1000A8D3+5Aj
		and	dword ptr [esi+1Ch], 0

loc_1000A961:				; CODE XREF: sub_1000A8D3+88j
		mov	eax, [ebx+8]
		mov	[esi+18h], eax
		push	dword ptr [ebx+8] ; size_t
		push	dword ptr [ebx+4] ; void *
		push	dword ptr [esi+14h] ; void *
		call	memcpy
		add	esp, 0Ch
		mov	eax, esi
		jmp	short loc_1000A993
; ---------------------------------------------------------------------------

loc_1000A97C:				; CODE XREF: sub_1000A8D3+2Aj
					; sub_1000A8D3+54j ...
		push	0
		push	edi
		call	PORT_FreeArena_Util
		pop	ecx
		pop	ecx

loc_1000A986:				; CODE XREF: sub_1000A8D3+16j
		push	0FFFFE013h
		call	PORT_SetError_Util
		pop	ecx
		xor	eax, eax

loc_1000A993:				; CODE XREF: sub_1000A8D3+A7j
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
sub_1000A8D3	endp


; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1000A99A(char	*, int,	int)
sub_1000A99A	proc near		; CODE XREF: sub_10008F76+77p
					; sub_1000BF7A:loc_1000C01Ap

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		push	esi
		push	edi
		push	800h
		call	PORT_NewArena_Util
		mov	esi, eax
		pop	ecx
		test	esi, esi
		jnz	short loc_1000A9BA
		push	0FFFFE013h
		call	PORT_SetError_Util
		jmp	short loc_1000A9DE
; ---------------------------------------------------------------------------

loc_1000A9BA:				; CODE XREF: sub_1000A99A+12j
		push	20h
		push	esi
		call	PORT_ArenaAlloc_Util
		mov	edi, eax
		pop	ecx
		pop	ecx
		test	edi, edi
		jnz	short loc_1000A9E5
		push	0FFFFE013h
		call	PORT_SetError_Util
		pop	ecx

loc_1000A9D5:				; CODE XREF: sub_1000A99A+7Dj
					; sub_1000A99A+9Dj
		push	0
		push	esi
		call	PORT_FreeArena_Util
		pop	ecx

loc_1000A9DE:				; CODE XREF: sub_1000A99A+1Ej
		pop	ecx
		xor	eax, eax

loc_1000A9E1:				; CODE XREF: sub_1000A99A+A1j
		pop	edi
		pop	esi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1000A9E5:				; CODE XREF: sub_1000A99A+2Ej
		mov	eax, [esp+0Ch+arg_8]
		push	[esp+0Ch+arg_0]	; char *
		mov	[edi+0Ch], esi
		mov	dword ptr [edi], 2
		mov	dword ptr [edi+4], 8
		mov	[edi+8], eax
		call	strlen
		lea	ebx, [eax+1]
		push	ebx
		push	esi
		call	PORT_ArenaAlloc_Util
		add	esp, 0Ch
		mov	[edi+10h], eax
		test	eax, eax
		jz	short loc_1000A9D5
		push	ebx		; size_t
		push	[esp+10h+arg_0]	; void *
		push	eax		; void *
		call	memcpy
		push	[esp+18h+arg_4]
		lea	eax, [edi+14h]
		push	eax
		push	esi
		call	SECITEM_CopyItem_Util
		add	esp, 18h
		test	eax, eax
		jnz	short loc_1000A9D5
		mov	eax, edi
		jmp	short loc_1000A9E1
sub_1000A99A	endp


; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1000AA3D(char	*, int,	int, int, int)
sub_1000AA3D	proc near		; CODE XREF: sub_1000CCF8+51p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	ebx
		push	ebp
		push	esi
		push	edi
		push	800h
		call	PORT_NewArena_Util
		mov	edi, eax
		pop	ecx
		test	edi, edi
		jnz	short loc_1000AA5E
		push	0FFFFE013h
		call	PORT_SetError_Util
		jmp	short loc_1000AA83
; ---------------------------------------------------------------------------

loc_1000AA5E:				; CODE XREF: sub_1000AA3D+13j
		push	38h
		push	edi
		call	PORT_ArenaAlloc_Util
		mov	esi, eax
		xor	ebp, ebp
		pop	ecx
		pop	ecx
		test	esi, esi
		jnz	short loc_1000AA8B
		push	0FFFFE013h
		call	PORT_SetError_Util
		pop	ecx

loc_1000AA7B:				; CODE XREF: sub_1000AA3D+80j
					; sub_1000AA3D+A0j ...
		push	ebp
		push	edi
		call	PORT_FreeArena_Util
		pop	ecx

loc_1000AA83:				; CODE XREF: sub_1000AA3D+1Fj
		pop	ecx
		xor	eax, eax

loc_1000AA86:				; CODE XREF: sub_1000AA3D+EDj
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1000AA8B:				; CODE XREF: sub_1000AA3D+31j
		mov	eax, [esp+10h+arg_10]
		push	[esp+10h+arg_0]	; char *
		mov	[esi+0Ch], edi
		mov	dword ptr [esi], 6
		mov	dword ptr [esi+4], 8
		mov	[esi+8], eax
		call	strlen
		lea	ebx, [eax+1]
		push	ebx
		push	edi
		call	PORT_ArenaAlloc_Util
		add	esp, 0Ch
		mov	[esi+10h], eax
		test	eax, eax
		jz	short loc_1000AA7B
		push	ebx		; size_t
		push	[esp+14h+arg_0]	; void *
		push	eax		; void *
		call	memcpy
		push	[esp+1Ch+arg_4]
		lea	eax, [esi+14h]
		push	eax
		push	edi
		call	SECITEM_CopyItem_Util
		add	esp, 18h
		test	eax, eax
		jnz	short loc_1000AA7B
		cmp	[esp+10h+arg_8], ebp
		jz	short loc_1000AAFC
		push	[esp+10h+arg_8]
		lea	eax, [esi+20h]
		push	eax
		push	edi
		call	SECITEM_CopyItem_Util
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_1000AA7B
		jmp	short loc_1000AB02
; ---------------------------------------------------------------------------

loc_1000AAFC:				; CODE XREF: sub_1000AA3D+A6j
		mov	[esi+24h], ebp
		mov	[esi+28h], ebp

loc_1000AB02:				; CODE XREF: sub_1000AA3D+BDj
		cmp	[esp+10h+arg_C], ebp
		jz	short loc_1000AB22
		push	[esp+10h+arg_C]
		lea	eax, [esi+2Ch]
		push	eax
		push	edi
		call	SECITEM_CopyItem_Util
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_1000AB28
		jmp	loc_1000AA7B
; ---------------------------------------------------------------------------

loc_1000AB22:				; CODE XREF: sub_1000AA3D+C9j
		mov	[esi+30h], ebp
		mov	[esi+34h], ebp

loc_1000AB28:				; CODE XREF: sub_1000AA3D+DEj
		mov	eax, esi
		jmp	loc_1000AA86
sub_1000AA3D	endp


; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1000AB2F(int,	int, int, char *, int, int)
sub_1000AB2F	proc near		; CODE XREF: sub_10008F76+E8p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		push	ebx
		push	ebp
		push	esi
		push	edi
		push	800h
		call	PORT_NewArena_Util
		mov	edi, eax
		pop	ecx
		test	edi, edi
		jnz	short loc_1000AB50
		push	0FFFFE013h
		call	PORT_SetError_Util
		jmp	short loc_1000AB76
; ---------------------------------------------------------------------------

loc_1000AB50:				; CODE XREF: sub_1000AB2F+13j
		push	34h
		push	edi
		call	PORT_ArenaAlloc_Util
		mov	esi, eax
		xor	ebp, ebp
		pop	ecx
		pop	ecx
		test	esi, esi
		jnz	short loc_1000AB7E
		push	0FFFFE013h
		call	PORT_SetError_Util

loc_1000AB6C:				; CODE XREF: sub_1000AB2F+FDj
		pop	ecx

loc_1000AB6D:				; CODE XREF: sub_1000AB2F+79j
					; sub_1000AB2F+A9j ...
		push	0
		push	edi
		call	PORT_FreeArena_Util
		pop	ecx

loc_1000AB76:				; CODE XREF: sub_1000AB2F+1Fj
		pop	ecx
		xor	eax, eax

loc_1000AB79:				; CODE XREF: sub_1000AB2F+186j
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1000AB7E:				; CODE XREF: sub_1000AB2F+31j
		mov	eax, [esp+10h+arg_14]
		push	[esp+10h+arg_0]
		mov	[esi+8], eax
		lea	eax, [esi+10h]
		push	eax
		push	edi
		mov	[esi+0Ch], edi
		mov	dword ptr [esi], 3
		mov	dword ptr [esi+4], 8
		call	SECITEM_CopyItem_Util
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_1000AB6D
		mov	ebx, [esp+10h+arg_C]
		mov	dword ptr [esi+1Ch], 1
		mov	[esi+30h], ebp
		test	ebx, ebx
		jz	short loc_1000ABE9
		cmp	[ebx], al
		jz	short loc_1000ABE9
		push	ebx		; char *
		call	strlen
		lea	ebp, [eax+1]
		push	ebp
		push	edi
		call	PORT_ArenaAlloc_Util
		add	esp, 0Ch
		mov	[esi+20h], eax
		test	eax, eax
		jz	short loc_1000AB6D
		push	ebp		; size_t
		push	ebx		; void *
		push	eax		; void *
		call	memcpy
		add	esp, 0Ch
		xor	ebp, ebp
		jmp	short loc_1000ABEC
; ---------------------------------------------------------------------------

loc_1000ABE9:				; CODE XREF: sub_1000AB2F+8Bj
					; sub_1000AB2F+8Fj
		mov	[esi+20h], ebp

loc_1000ABEC:				; CODE XREF: sub_1000AB2F+B8j
		mov	eax, [esp+10h+arg_10]
		test	eax, eax
		jz	short loc_1000AC55
		cmp	byte ptr [eax],	0
		jz	short loc_1000AC55
		push	eax
		call	sub_10008631
		mov	ebx, eax
		pop	ecx
		test	ebx, ebx
		jnz	short loc_1000AC0E
		mov	[esi+2Ch], ebp
		jmp	loc_1000AB6D
; ---------------------------------------------------------------------------

loc_1000AC0E:				; CODE XREF: sub_1000AB2F+D5j
		push	ebx		; char *
		call	strlen
		push	4
		push	edi
		call	PORT_ArenaAlloc_Util
		add	esp, 0Ch
		mov	[esi+2Ch], eax
		push	ebx
		test	eax, eax
		jnz	short loc_1000AC31
		call	PORT_Free_Util
		jmp	loc_1000AB6C
; ---------------------------------------------------------------------------

loc_1000AC31:				; CODE XREF: sub_1000AB2F+F6j
		push	edi
		call	PORT_ArenaStrdup_Util
		pop	ecx
		pop	ecx
		mov	ecx, [esi+2Ch]
		mov	[ecx], eax
		mov	eax, [esi+2Ch]
		cmp	[eax], ebp
		jz	short loc_1000AC4C
		mov	dword ptr [esi+30h], 1

loc_1000AC4C:				; CODE XREF: sub_1000AB2F+114j
		push	ebx
		call	PORT_Free_Util
		pop	ecx
		jmp	short loc_1000AC58
; ---------------------------------------------------------------------------

loc_1000AC55:				; CODE XREF: sub_1000AB2F+C3j
					; sub_1000AB2F+C8j
		mov	[esi+2Ch], ebp

loc_1000AC58:				; CODE XREF: sub_1000AB2F+124j
		push	0Ch
		push	edi
		call	PORT_ArenaAlloc_Util
		push	0Ch
		push	edi
		mov	[esi+24h], eax
		call	PORT_ArenaAlloc_Util
		add	esp, 10h
		mov	[esi+28h], eax
		cmp	dword ptr [esi+24h], 0
		jz	loc_1000AB6D
		test	eax, eax
		jz	loc_1000AB6D
		push	[esp+10h+arg_4]
		push	dword ptr [esi+24h]
		push	edi
		call	SECITEM_CopyItem_Util
		add	esp, 0Ch
		test	eax, eax
		jnz	loc_1000AB6D
		push	[esp+10h+arg_8]
		push	dword ptr [esi+28h]
		push	edi
		call	SECITEM_CopyItem_Util
		add	esp, 0Ch
		test	eax, eax
		jnz	loc_1000AB6D
		mov	eax, esi
		jmp	loc_1000AB79
sub_1000AB2F	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000ACBA	proc near		; CODE XREF: sub_1000CF2B+68p

arg_0		= dword	ptr  4

		push	esi
		push	800h
		call	PORT_NewArena_Util
		mov	esi, eax
		pop	ecx
		test	esi, esi
		jnz	short loc_1000ACD9
		push	0FFFFE013h
		call	PORT_SetError_Util
		pop	ecx
		jmp	short loc_1000ACFE
; ---------------------------------------------------------------------------

loc_1000ACD9:				; CODE XREF: sub_1000ACBA+10j
		push	10h
		push	esi
		call	PORT_ArenaAlloc_Util
		pop	ecx
		pop	ecx
		mov	ecx, eax
		test	ecx, ecx
		jnz	short loc_1000AD02
		push	0FFFFE013h
		call	PORT_SetError_Util
		push	0
		push	esi
		call	PORT_FreeArena_Util
		add	esp, 0Ch

loc_1000ACFE:				; CODE XREF: sub_1000ACBA+1Dj
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1000AD02:				; CODE XREF: sub_1000ACBA+2Dj
		mov	eax, [esp+4+arg_0]
		and	dword ptr [ecx], 0
		mov	[ecx+0Ch], esi
		mov	[ecx+8], eax
		mov	eax, ecx
		mov	dword ptr [ecx+4], 8
		pop	esi
		retn
sub_1000ACBA	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000AD1A	proc near		; CODE XREF: sub_1000C4AD+Cp
					; sub_1000C691+Cp

var_21C		= byte ptr -21Ch
var_218		= dword	ptr -218h
var_214		= dword	ptr -214h
var_210		= byte ptr -210h
var_204		= byte ptr -204h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 21Ch
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+21Ch+var_4], eax
		push	ebx
		mov	ebx, [esp+220h+arg_4]
		push	ebp
		mov	ebp, [esp+224h+arg_0]
		push	esi
		push	edi
		lea	edi, [esp+22Ch+var_204]
		mov	[esp+22Ch+var_214], 200h
		mov	[esp+22Ch+var_218], edi
		call	sub_1000C754
		mov	esi, dword_10015044
		test	esi, esi
		jz	short loc_1000AD6D
		mov	eax, [esi+10h]
		dec	dword_10015050
		mov	dword_10015044,	eax

loc_1000AD6D:				; CODE XREF: sub_1000AD1A+43j
		call	sub_1000CBEB
		test	esi, esi
		jnz	short loc_1000AD94
		push	8F8h
		call	PORT_ZAlloc_Util
		mov	esi, eax
		pop	ecx
		test	esi, esi
		jnz	short loc_1000AD94
		push	0FFFFE013h
		call	PORT_SetError_Util
		pop	ecx
		jmp	short loc_1000ADF5
; ---------------------------------------------------------------------------

loc_1000AD94:				; CODE XREF: sub_1000AD1A+5Aj
					; sub_1000AD1A+6Bj
		lea	eax, [esp+22Ch+var_21C]
		mov	dword ptr [esi], 1
		push	eax
		xor	edi, edi
		push	edi
		push	ebx
		mov	[esi+0Ch], edi
		call	sub_1000A241
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_1000ADF1
		push	edi
		lea	eax, [esp+230h+var_210]
		push	eax
		lea	eax, [esp+234h+var_21C]
		push	eax
		push	esi
		push	ebp
		call	sub_1000AEF9
		add	esp, 14h
		cmp	eax, 0FFFFFFFFh
		jz	short loc_1000ADF1
		lea	eax, [esp+22Ch+var_210]
		push	eax
		push	esi
		call	sub_100093F9
		pop	ecx
		pop	ecx
		test	eax, eax
		jnz	short loc_1000ADF1
		lea	eax, [esp+22Ch+var_204]
		push	eax
		push	[esp+230h+var_218]
		call	sub_1000D118
		pop	ecx
		pop	ecx
		mov	eax, esi
		jmp	short loc_1000AE0F
; ---------------------------------------------------------------------------

loc_1000ADF1:				; CODE XREF: sub_1000AD1A+96j
					; sub_1000AD1A+B0j ...
		mov	edi, [esp+22Ch+var_218]

loc_1000ADF5:				; CODE XREF: sub_1000AD1A+78j
		lea	eax, [esp+22Ch+var_204]
		push	eax
		push	edi
		call	sub_1000D118
		pop	ecx
		pop	ecx
		test	esi, esi
		jz	short loc_1000AE0D
		push	esi		; void *
		call	sub_1000A0E5
		pop	ecx

loc_1000AE0D:				; CODE XREF: sub_1000AD1A+EAj
		xor	eax, eax

loc_1000AE0F:				; CODE XREF: sub_1000AD1A+D5j
		mov	ecx, [esp+22Ch+var_4]
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 21Ch
		retn
sub_1000AD1A	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000AE28	proc near		; CODE XREF: sub_1000C4E4+43p

var_18		= byte ptr -18h
var_C		= byte ptr -0Ch
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 18h
		push	ebx
		push	ebp
		push	esi
		push	edi
		mov	esi, 800h
		push	esi
		call	PORT_NewArena_Util
		mov	edi, eax
		pop	ecx
		test	edi, edi
		jnz	short loc_1000AE4D
		push	0FFFFE013h
		call	PORT_SetError_Util
		jmp	short loc_1000AE94
; ---------------------------------------------------------------------------

loc_1000AE4D:				; CODE XREF: sub_1000AE28+17j
		push	esi
		call	PORT_NewArena_Util
		mov	ebx, eax
		xor	ebp, ebp
		pop	ecx
		test	ebx, ebx
		jnz	short loc_1000AE68
		push	0FFFFE013h
		call	PORT_SetError_Util
		jmp	short loc_1000AE8B
; ---------------------------------------------------------------------------

loc_1000AE68:				; CODE XREF: sub_1000AE28+32j
		push	20h
		push	edi
		call	PORT_ArenaAlloc_Util
		mov	esi, eax
		pop	ecx
		pop	ecx
		test	esi, esi
		jnz	short loc_1000AE9F
		push	0FFFFE013h
		call	PORT_SetError_Util
		pop	ecx

loc_1000AE83:				; CODE XREF: sub_1000AE28+95j
					; sub_1000AE28+B2j ...
		push	ebp
		push	ebx
		call	PORT_FreeArena_Util
		pop	ecx

loc_1000AE8B:				; CODE XREF: sub_1000AE28+3Ej
		pop	ecx
		push	ebp
		push	edi
		call	PORT_FreeArena_Util
		pop	ecx

loc_1000AE94:				; CODE XREF: sub_1000AE28+23j
		xor	eax, eax

loc_1000AE96:				; CODE XREF: sub_1000AE28+CFj
		pop	ecx
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 18h
		retn
; ---------------------------------------------------------------------------

loc_1000AE9F:				; CODE XREF: sub_1000AE28+4Ej
		mov	eax, [esp+28h+arg_8]
		push	eax
		mov	[esi], eax
		lea	eax, [esp+2Ch+var_18]
		push	eax
		push	ebx
		push	[esp+34h+arg_4]
		mov	[esi+0Ch], edi
		call	sub_1000A344
		add	esp, 10h
		test	eax, eax
		jnz	short loc_1000AE83
		push	ebp
		lea	eax, [esp+2Ch+var_C]
		push	eax
		lea	eax, [esp+30h+var_18]
		push	eax
		push	esi
		push	[esp+38h+arg_0]
		call	sub_1000AEF9
		add	esp, 14h
		cmp	eax, 0FFFFFFFFh
		jz	short loc_1000AE83
		lea	eax, [esp+28h+var_C]
		push	eax
		push	esi
		call	sub_10009533
		pop	ecx
		pop	ecx
		test	eax, eax
		jnz	short loc_1000AE83
		push	ebp
		push	ebx
		call	PORT_FreeArena_Util
		pop	ecx
		mov	eax, esi
		jmp	short loc_1000AE96
sub_1000AE28	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_1000AEF9	proc near		; CODE XREF: sub_1000AD1A+A5p
					; sub_1000AE28+A7p ...

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		mov	eax, [ebp+arg_8]
		push	esi
		push	edi
		mov	edi, [ebp+arg_4]
		mov	ecx, [eax+4]
		mov	eax, [eax+8]
		mov	[ebp+var_4], eax
		mov	al, [edi]
		mov	[ebp+var_8], ecx
		mov	[ecx], al
		lea	eax, [ebp+var_10]
		push	0
		push	eax
		lea	eax, [ebp+var_8]
		push	eax
		mov	eax, [ebp+arg_0]
		push	dword ptr [eax]
		call	sub_1000BE5D
		add	esp, 10h
		test	eax, eax
		jz	short loc_1000AF39

loc_1000AF32:				; CODE XREF: sub_1000AEF9+46j
					; sub_1000AEF9+55j ...
		push	0FFFFE012h
		jmp	short loc_1000AF94
; ---------------------------------------------------------------------------

loc_1000AF39:				; CODE XREF: sub_1000AEF9+37j
		mov	edx, [ebp+var_C]
		cmp	edx, 3
		jb	short loc_1000AF32
		mov	esi, [ebp+var_10]
		mov	cl, [esi]
		cmp	cl, 8
		jz	short loc_1000AF50
		cmp	cl, 7
		jnz	short loc_1000AF32

loc_1000AF50:				; CODE XREF: sub_1000AEF9+50j
		mov	al, [esi+1]
		cmp	al, [edi]
		jnz	short loc_1000AF32
		movzx	eax, cl
		add	edx, 0FFFFFFFDh
		mov	[edi+4], eax
		movzx	eax, byte ptr [esi+1]
		mov	[edi], eax
		movzx	eax, byte ptr [esi+2]
		mov	[edi+8], eax
		mov	edi, [ebp+arg_C]
		mov	[edi+8], edx
		jz	short loc_1000AFB9
		cmp	[ebp+arg_10], 0
		jz	short loc_1000AFB1
		push	edx
		push	[ebp+arg_10]
		call	PORT_ArenaAlloc_Util
		pop	ecx
		pop	ecx
		mov	ecx, eax
		mov	[edi+4], ecx
		test	ecx, ecx
		jnz	short loc_1000AF9F
		push	0FFFFE013h

loc_1000AF94:				; CODE XREF: sub_1000AEF9+3Ej
		call	PORT_SetError_Util
		pop	ecx
		or	eax, 0FFFFFFFFh
		jmp	short loc_1000AFBF
; ---------------------------------------------------------------------------

loc_1000AF9F:				; CODE XREF: sub_1000AEF9+94j
		push	dword ptr [edi+8] ; size_t
		lea	eax, [esi+3]
		push	eax		; void *
		push	ecx		; void *
		call	memcpy
		add	esp, 0Ch
		jmp	short loc_1000AFBD
; ---------------------------------------------------------------------------

loc_1000AFB1:				; CODE XREF: sub_1000AEF9+80j
		lea	eax, [esi+3]
		mov	[edi+4], eax
		jmp	short loc_1000AFBD
; ---------------------------------------------------------------------------

loc_1000AFB9:				; CODE XREF: sub_1000AEF9+7Aj
		and	dword ptr [edi+4], 0

loc_1000AFBD:				; CODE XREF: sub_1000AEF9+B6j
					; sub_1000AEF9+BEj
		xor	eax, eax

loc_1000AFBF:				; CODE XREF: sub_1000AEF9+A4j
		pop	edi
		pop	esi
		mov	esp, ebp
		pop	ebp
		retn
sub_1000AEF9	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_1000AFC5(int,	char *)
sub_1000AFC5	proc near		; CODE XREF: sub_1000B472+1A5p
					; sub_1000BF7A+8Bp ...

var_18		= dword	ptr -18h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		push	ebx
		push	esi
		push	edi
		mov	esi, 800h
		push	esi
		call	PORT_NewArena_Util
		mov	ebx, eax
		pop	ecx
		test	ebx, ebx
		jnz	short loc_1000AFEC
		push	0FFFFE013h
		call	PORT_SetError_Util
		jmp	short loc_1000B033
; ---------------------------------------------------------------------------

loc_1000AFEC:				; CODE XREF: sub_1000AFC5+19j
		push	esi
		call	PORT_NewArena_Util
		mov	edi, eax
		pop	ecx
		test	edi, edi
		jnz	short loc_1000B005
		push	0FFFFE013h
		call	PORT_SetError_Util
		jmp	short loc_1000B029
; ---------------------------------------------------------------------------

loc_1000B005:				; CODE XREF: sub_1000AFC5+32j
		push	20h
		push	ebx
		call	PORT_ArenaAlloc_Util
		mov	esi, eax
		pop	ecx
		pop	ecx
		test	esi, esi
		jnz	short loc_1000B03D
		push	0FFFFE013h

loc_1000B01A:				; CODE XREF: sub_1000AFC5+BAj
		call	PORT_SetError_Util
		pop	ecx

loc_1000B020:				; CODE XREF: sub_1000AFC5+93j
					; sub_1000AFC5+ADj ...
		push	0
		push	edi
		call	PORT_FreeArena_Util
		pop	ecx

loc_1000B029:				; CODE XREF: sub_1000AFC5+3Ej
		pop	ecx
		push	0
		push	ebx
		call	PORT_FreeArena_Util
		pop	ecx

loc_1000B033:				; CODE XREF: sub_1000AFC5+25j
		xor	eax, eax

loc_1000B035:				; CODE XREF: sub_1000AFC5+DAj
		pop	ecx
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_1000B03D:				; CODE XREF: sub_1000AFC5+4Ej
		lea	eax, [ebp+var_18]
		mov	[esi+0Ch], ebx
		push	eax		; int
		push	edi		; int
		push	[ebp+arg_4]	; char *
		mov	dword ptr [esi], 2
		call	sub_1000A408
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_1000B020
		push	edi
		lea	eax, [ebp+var_C]
		push	eax
		lea	eax, [ebp+var_18]
		push	eax
		push	esi
		push	[ebp+arg_0]
		call	sub_1000AEF9
		add	esp, 14h
		cmp	eax, 0FFFFFFFFh
		jz	short loc_1000B020
		cmp	[ebp+var_4], 2
		jnb	short loc_1000B081
		push	0FFFFE012h
		jmp	short loc_1000B01A
; ---------------------------------------------------------------------------

loc_1000B081:				; CODE XREF: sub_1000AFC5+B3j
		push	[ebp+arg_4]	; char *
		lea	eax, [ebp+var_C]
		push	eax		; int
		push	esi		; int
		call	sub_100095FA
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_1000B020
		push	eax
		push	edi
		call	PORT_FreeArena_Util
		pop	ecx
		mov	eax, esi
		jmp	short loc_1000B035
sub_1000AFC5	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_1000B0A1	proc near		; CODE XREF: sub_10008F76+2Ep
					; sub_10009175+1Ap ...

var_18		= byte ptr -18h
var_C		= byte ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		push	ebx
		push	esi
		push	edi
		mov	esi, 800h
		push	esi
		call	PORT_NewArena_Util
		mov	ebx, eax
		pop	ecx
		test	ebx, ebx
		jnz	short loc_1000B0C8
		push	0FFFFE013h
		call	PORT_SetError_Util
		jmp	short loc_1000B10F
; ---------------------------------------------------------------------------

loc_1000B0C8:				; CODE XREF: sub_1000B0A1+19j
		push	esi
		call	PORT_NewArena_Util
		mov	edi, eax
		pop	ecx
		test	edi, edi
		jnz	short loc_1000B0E1
		push	0FFFFE013h
		call	PORT_SetError_Util
		jmp	short loc_1000B105
; ---------------------------------------------------------------------------

loc_1000B0E1:				; CODE XREF: sub_1000B0A1+32j
		push	34h
		push	ebx
		call	PORT_ArenaAlloc_Util
		mov	esi, eax
		pop	ecx
		pop	ecx
		test	esi, esi
		jnz	short loc_1000B119
		push	0FFFFE013h
		call	PORT_SetError_Util
		pop	ecx

loc_1000B0FC:				; CODE XREF: sub_1000B0A1+93j
					; sub_1000B0A1+ADj ...
		push	0
		push	edi
		call	PORT_FreeArena_Util
		pop	ecx

loc_1000B105:				; CODE XREF: sub_1000B0A1+3Ej
		pop	ecx
		push	0
		push	ebx
		call	PORT_FreeArena_Util
		pop	ecx

loc_1000B10F:				; CODE XREF: sub_1000B0A1+25j
		xor	eax, eax

loc_1000B111:				; CODE XREF: sub_1000B0A1+CFj
		pop	ecx
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_1000B119:				; CODE XREF: sub_1000B0A1+4Ej
		lea	eax, [ebp+var_C]
		mov	[esi+0Ch], ebx
		push	eax
		push	edi
		push	[ebp+arg_4]
		mov	dword ptr [esi], 3
		call	sub_1000A7AD
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_1000B0FC
		push	edi
		lea	eax, [ebp+var_18]
		push	eax
		lea	eax, [ebp+var_C]
		push	eax
		push	esi
		push	[ebp+arg_0]
		call	sub_1000AEF9
		add	esp, 14h
		cmp	eax, 0FFFFFFFFh
		jz	short loc_1000B0FC
		push	[ebp+arg_4]
		lea	eax, [ebp+var_18]
		push	eax
		push	esi
		call	sub_10009806
		add	esp, 0Ch
		cmp	eax, 0FFFFFFFFh
		jz	short loc_1000B0FC
		push	0
		push	edi
		call	PORT_FreeArena_Util
		pop	ecx
		mov	eax, esi
		jmp	short loc_1000B111
sub_1000B0A1	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000B172	proc near		; CODE XREF: sub_1000C6DB+4p

var_18		= byte ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= byte ptr -0Ch
arg_0		= dword	ptr  4

		sub	esp, 18h
		push	ebx
		push	ebp
		push	esi
		push	edi
		mov	esi, 800h
		push	esi
		call	PORT_NewArena_Util
		mov	edi, eax
		pop	ecx
		test	edi, edi
		jnz	short loc_1000B197
		push	0FFFFE013h
		call	PORT_SetError_Util
		jmp	short loc_1000B1DE
; ---------------------------------------------------------------------------

loc_1000B197:				; CODE XREF: sub_1000B172+17j
		push	esi
		call	PORT_NewArena_Util
		mov	esi, eax
		xor	ebp, ebp
		pop	ecx
		test	esi, esi
		jnz	short loc_1000B1B2
		push	0FFFFE013h
		call	PORT_SetError_Util
		jmp	short loc_1000B1D5
; ---------------------------------------------------------------------------

loc_1000B1B2:				; CODE XREF: sub_1000B172+32j
		push	10h
		push	edi
		call	PORT_ArenaZAlloc_Util
		mov	ebx, eax
		pop	ecx
		pop	ecx
		test	ebx, ebx
		jnz	short loc_1000B1E9
		push	0FFFFE013h
		call	PORT_SetError_Util
		pop	ecx

loc_1000B1CD:				; CODE XREF: sub_1000B172+92j
					; sub_1000B172+BCj
		push	ebp
		push	esi
		call	PORT_FreeArena_Util
		pop	ecx

loc_1000B1D5:				; CODE XREF: sub_1000B172+3Ej
		pop	ecx
		push	ebp
		push	edi
		call	PORT_FreeArena_Util
		pop	ecx

loc_1000B1DE:				; CODE XREF: sub_1000B172+23j
		xor	eax, eax

loc_1000B1E0:				; CODE XREF: sub_1000B172+C8j
		pop	ecx
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 18h
		retn
; ---------------------------------------------------------------------------

loc_1000B1E9:				; CODE XREF: sub_1000B172+4Ej
		push	9
		pop	eax
		push	eax
		push	esi
		mov	[ebx+0Ch], edi
		mov	[ebx], ebp
		mov	[esp+30h+var_10], eax
		call	PORT_ArenaAlloc_Util
		mov	[esp+30h+var_14], eax
		pop	ecx
		pop	ecx
		test	eax, eax
		jz	short loc_1000B1CD
		push	8		; size_t
		inc	eax
		push	offset aVersion	; "Version"
		push	eax		; void *
		call	memcpy
		push	esi
		lea	eax, [esp+38h+var_C]
		push	eax
		lea	eax, [esp+3Ch+var_18]
		push	eax
		push	ebx
		push	[esp+44h+arg_0]
		call	sub_1000AEF9
		add	esp, 20h
		test	eax, eax
		jnz	short loc_1000B1CD
		push	ebp
		push	esi
		call	PORT_FreeArena_Util
		pop	ecx
		mov	eax, ebx
		jmp	short loc_1000B1E0
sub_1000B172	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000B23C	proc near		; CODE XREF: sub_1000C15A+27p

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		sub	esp, 0Ch
		push	ebp
		push	esi
		mov	esi, [esp+14h+arg_0]
		push	edi
		lea	edi, [esi+38h]
		push	edi
		push	dword ptr [esi+4]
		mov	[esp+20h+var_4], edi
		call	sub_1000B0A1
		mov	ebp, eax
		pop	ecx
		pop	ecx
		test	ebp, ebp
		jnz	short loc_1000B266
		or	eax, 0FFFFFFFFh
		jmp	loc_1000B34C
; ---------------------------------------------------------------------------

loc_1000B266:				; CODE XREF: sub_1000B23C+20j
		or	[esp+18h+var_8], 0FFFFFFFFh
		push	ebx
		xor	ebx, ebx
		cmp	dword ptr [ebp+1Ch], 1
		jbe	loc_1000B302
		cmp	[ebp+1Ch], ebx
		jbe	loc_1000B340
		lea	eax, [esi+54h]
		mov	[esp+1Ch+var_C], ebx
		mov	ecx, ebx

loc_1000B28A:				; CODE XREF: sub_1000B23C+72j
		push	eax
		mov	eax, [ebp+24h]
		add	eax, ecx
		push	eax
		call	SECITEM_CompareItem_Util
		pop	ecx
		inc	ebx
		pop	ecx
		test	eax, eax
		jz	short loc_1000B2B5
		mov	ecx, [esp+1Ch+var_C]
		lea	eax, [esi+54h]
		add	ecx, 0Ch
		mov	[esp+1Ch+var_C], ecx
		cmp	ebx, [ebp+1Ch]
		jb	short loc_1000B28A
		jmp	loc_1000B340
; ---------------------------------------------------------------------------

loc_1000B2B5:				; CODE XREF: sub_1000B23C+5Fj
		cmp	ebx, [ebp+1Ch]
		jnb	short loc_1000B2E4
		imul	ecx, ebx, 0Ch

loc_1000B2BD:				; CODE XREF: sub_1000B23C+9Ej
		mov	esi, [ebp+24h]
		add	esi, ecx
		lea	edi, [esi-0Ch]
		movsd
		movsd
		movsd
		mov	esi, [ebp+28h]
		add	esi, ecx
		inc	ebx
		add	ecx, 0Ch
		lea	edi, [esi-0Ch]
		movsd
		movsd
		movsd
		cmp	ebx, [ebp+1Ch]
		jb	short loc_1000B2BD
		mov	esi, [esp+1Ch+arg_0]
		mov	edi, [esp+1Ch+var_4]

loc_1000B2E4:				; CODE XREF: sub_1000B23C+7Cj
		dec	dword ptr [ebp+1Ch]
		push	edi
		push	dword ptr [esi+4]
		call	sub_10009F8F
		push	ebp
		push	dword ptr [esi+4]
		call	sub_1000BC7E
		add	esp, 10h
		mov	[esp+1Ch+var_8], eax
		jmp	short loc_1000B340
; ---------------------------------------------------------------------------

loc_1000B302:				; CODE XREF: sub_1000B23C+36j
		cmp	[ebp+2Ch], ebx
		jz	short loc_1000B322
		cmp	[ebp+30h], ebx
		jbe	short loc_1000B322

loc_1000B30C:				; CODE XREF: sub_1000B23C+E4j
		mov	eax, [ebp+2Ch]
		push	dword ptr [eax+ebx*4] ;	char *
		push	dword ptr [esi+4] ; int
		call	sub_10009F2D
		inc	ebx
		pop	ecx
		pop	ecx
		cmp	ebx, [ebp+30h]
		jb	short loc_1000B30C

loc_1000B322:				; CODE XREF: sub_1000B23C+C9j
					; sub_1000B23C+CEj
		cmp	dword ptr [ebp+20h], 0
		jz	short loc_1000B335
		push	dword ptr [ebp+20h] ; char *
		push	dword ptr [esi+4] ; int
		call	sub_10009EC1
		pop	ecx
		pop	ecx

loc_1000B335:				; CODE XREF: sub_1000B23C+EAj
		push	edi
		push	dword ptr [esi+4]
		call	sub_10009F8F
		pop	ecx
		pop	ecx

loc_1000B340:				; CODE XREF: sub_1000B23C+3Fj
					; sub_1000B23C+74j ...
		push	ebp		; void *
		call	sub_1000A0E5
		mov	eax, [esp+20h+var_8]
		pop	ecx
		pop	ebx

loc_1000B34C:				; CODE XREF: sub_1000B23C+25j
		pop	edi
		pop	esi
		pop	ebp
		add	esp, 0Ch
		retn
sub_1000B23C	endp


; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1000B353(int,	void *)
sub_1000B353	proc near		; CODE XREF: sub_1000CF2B+14Ep

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= byte ptr -8
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 10h
		lea	eax, [esp+10h+var_10]
		push	esi
		mov	esi, [esp+14h+arg_4]
		push	3
		push	eax
		lea	eax, [esp+1Ch+var_8]
		push	eax
		push	esi
		call	dword ptr [esi+14h]
		add	esp, 10h
		test	eax, eax
		jz	short loc_1000B379
		or	eax, 0FFFFFFFFh
		jmp	loc_1000B424
; ---------------------------------------------------------------------------

loc_1000B379:				; CODE XREF: sub_1000B353+1Cj
		push	ebx
		push	800h
		call	PORT_NewArena_Util
		mov	ebx, eax
		pop	ecx
		test	ebx, ebx
		jnz	short loc_1000B393
		or	eax, 0FFFFFFFFh
		jmp	loc_1000B423
; ---------------------------------------------------------------------------

loc_1000B393:				; CODE XREF: sub_1000B353+36j
		push	ebp
		push	edi

loc_1000B395:				; CODE XREF: sub_1000B353+BBj
		cmp	[esp+20h+var_C], 1
		jz	short loc_1000B3F9
		push	[esp+20h+var_C]
		push	[esp+24h+var_10]
		call	sub_10009C4D
		mov	edi, eax
		pop	ecx
		pop	ecx
		test	edi, edi
		jz	short loc_1000B3F9
		push	dword ptr [edi+2Ch] ; char *
		lea	ecx, [edi+20h]
		push	ecx		; int
		call	sub_100080B1
		mov	ebp, eax
		pop	ecx
		pop	ecx
		test	ebp, ebp
		jz	short loc_1000B3F2
		lea	ecx, [edi+14h]
		push	ecx		; int
		push	dword ptr [edi+2Ch] ; char *
		push	ebp		; int
		push	[esp+2Ch+arg_0]	; int
		call	sub_10008F76
		push	ebp		; void *
		mov	[esp+34h+arg_4], eax
		call	sub_1000C1A9
		mov	eax, [esp+34h+arg_4]
		add	esp, 14h
		test	eax, eax
		jz	short loc_1000B3F2
		push	eax		; void *
		call	sub_1000A0E5
		pop	ecx

loc_1000B3F2:				; CODE XREF: sub_1000B353+70j
					; sub_1000B353+96j
		push	edi		; void *
		call	sub_1000A0E5
		pop	ecx

loc_1000B3F9:				; CODE XREF: sub_1000B353+47j
					; sub_1000B353+5Cj
		push	7
		lea	eax, [esp+24h+var_10]
		push	eax
		lea	eax, [esp+28h+var_8]
		push	eax
		push	esi
		call	dword ptr [esi+14h]
		add	esp, 10h
		test	eax, eax
		jz	short loc_1000B395
		push	0
		push	ebx
		call	PORT_FreeArena_Util
		push	esi
		call	dword ptr [esi+4]
		add	esp, 0Ch
		xor	eax, eax
		pop	edi
		pop	ebp

loc_1000B423:				; CODE XREF: sub_1000B353+3Bj
		pop	ebx

loc_1000B424:				; CODE XREF: sub_1000B353+21j
		pop	esi
		add	esp, 10h
		retn
sub_1000B353	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_1000B429	proc near		; CODE XREF: sub_1000CF2B+157p

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	esi
		mov	esi, [ebp+arg_4]
		mov	[ebp+var_10], esi
		call	ds:PR_NewMonitor
		push	[ebp+arg_0]
		and	[ebp+var_8], 0
		mov	[ebp+var_C], eax
		lea	eax, [ebp+var_10]
		push	offset sub_1000D12E
		push	eax
		mov	[ebp+var_4], 1
		call	sub_1000CAB1
		push	[ebp+var_C]
		call	ds:PR_DestroyMonitor
		push	esi
		call	dword ptr [esi+4]
		add	esp, 14h
		xor	eax, eax
		pop	esi
		mov	esp, ebp
		pop	ebp
		retn
sub_1000B429	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000B472	proc near		; CODE XREF: sub_1000CF2B+E9p

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 1Ch
		push	ebx
		mov	ebx, [esp+20h+arg_4]
		xor	eax, eax
		push	esi
		push	edi
		mov	[esp+28h+var_1C], eax
		xor	edi, edi
		mov	[esp+28h+var_18], eax
		xor	esi, esi
		push	3
		lea	eax, [esp+2Ch+var_10]
		mov	[esp+2Ch+var_14], edi
		push	eax
		lea	eax, [esp+30h+var_8]
		push	eax
		push	ebx
		call	dword ptr [ebx+14h]
		add	esp, 10h
		test	eax, eax
		jz	short loc_1000B4AD
		or	eax, 0FFFFFFFFh
		jmp	loc_1000B74B
; ---------------------------------------------------------------------------

loc_1000B4AD:				; CODE XREF: sub_1000B472+31j
		mov	edi, [esp+28h+arg_0]
		push	ebp

loc_1000B4B2:				; CODE XREF: sub_1000B472+147j
		mov	eax, [esp+2Ch+var_C]
		mov	ebp, [esp+2Ch+var_10]
		cmp	eax, 3
		jb	loc_1000B5A4
		cmp	byte ptr [ebp+0], 6
		jnz	loc_1000B5A4
		movzx	ecx, byte ptr [ebp+1]
		cmp	ecx, 3
		jnz	short loc_1000B51F
		add	eax, 4
		push	eax
		call	PORT_Alloc_Util
		mov	esi, eax
		pop	ecx
		test	esi, esi
		jz	loc_1000B57D
		push	5		; size_t
		push	ebp		; void *
		push	esi		; void *
		call	memcpy
		push	4		; size_t
		lea	eax, [esi+5]
		push	0		; int
		push	eax		; void *
		call	memset
		mov	eax, [esp+44h+var_C]
		add	eax, 0FFFFFFFBh
		push	eax		; size_t
		lea	eax, [ebp+5]
		push	eax		; void *
		lea	eax, [esi+9]
		push	eax		; void *
		call	memcpy
		add	esp, 24h
		add	[esp+2Ch+var_C], 4
		jmp	short loc_1000B577
; ---------------------------------------------------------------------------

loc_1000B51F:				; CODE XREF: sub_1000B472+62j
		cmp	ecx, 1
		jnz	short loc_1000B57D
		add	eax, 3
		push	eax
		call	PORT_Alloc_Util
		mov	esi, eax
		pop	ecx
		test	esi, esi
		jz	short loc_1000B57D
		push	3		; size_t
		push	ebp		; void *
		push	esi		; void *
		call	memcpy
		xor	ecx, ecx
		mov	[esi+3], cl
		mov	al, [ebp+3]
		mov	[esi+4], al
		mov	[esi+5], cl
		mov	al, [ebp+4]
		mov	[esi+6], al
		mov	[esi+7], cl
		mov	al, [ebp+5]
		mov	[esi+8], al
		mov	eax, [esp+38h+var_C]
		add	eax, 0FFFFFFFAh
		push	eax		; size_t
		lea	eax, [ebp+6]
		push	eax		; void *
		lea	eax, [esi+9]
		push	eax		; void *
		call	memcpy
		add	esp, 18h
		add	[esp+2Ch+var_C], 3

loc_1000B577:				; CODE XREF: sub_1000B472+ABj
		mov	ebp, esi
		mov	[esp+2Ch+var_10], esi

loc_1000B57D:				; CODE XREF: sub_1000B472+72j
					; sub_1000B472+B0j ...
		push	0
		lea	eax, [esp+30h+var_10]
		mov	byte ptr [ebp+0], 8
		push	eax
		lea	eax, [esp+34h+var_8]
		push	eax
		push	dword ptr [edi]
		call	sub_1000BEA8
		add	esp, 10h
		test	esi, esi
		jz	short loc_1000B5A4
		push	esi
		call	PORT_Free_Util
		pop	ecx
		xor	esi, esi

loc_1000B5A4:				; CODE XREF: sub_1000B472+4Bj
					; sub_1000B472+55j ...
		push	7
		lea	eax, [esp+30h+var_10]
		push	eax
		lea	eax, [esp+34h+var_8]
		push	eax
		push	ebx
		call	dword ptr [ebx+14h]
		add	esp, 10h
		test	eax, eax
		jz	loc_1000B4B2
		push	0
		push	dword ptr [edi]
		call	sub_1000BF14
		push	3
		lea	eax, [esp+38h+var_10]
		push	eax
		lea	eax, [esp+3Ch+var_8]
		push	eax
		push	ebx
		call	dword ptr [ebx+14h]
		mov	edi, [esp+44h+var_14]
		add	esp, 18h
		test	eax, eax
		jz	short loc_1000B5EB
		or	eax, 0FFFFFFFFh
		jmp	loc_1000B74A
; ---------------------------------------------------------------------------

loc_1000B5EB:				; CODE XREF: sub_1000B472+16Fj
		mov	esi, [esp+2Ch+arg_0]

loc_1000B5EF:				; CODE XREF: sub_1000B472+2C0j
		cmp	[esp+2Ch+var_C], 3
		jb	loc_1000B71D
		mov	eax, [esp+2Ch+var_10]
		cmp	byte ptr [eax],	8
		jnz	loc_1000B71D
		movzx	eax, byte ptr [eax+1]
		cmp	eax, 2
		jnz	short loc_1000B66A
		mov	ebp, [esp+2Ch+var_8]
		inc	ebp
		push	ebp		; char *
		push	esi		; int
		call	sub_1000AFC5
		mov	[esp+34h+var_1C], eax
		pop	ecx
		pop	ecx
		test	eax, eax
		jz	loc_1000B6E6
		lea	ecx, [eax+14h]
		push	ecx
		push	esi
		call	sub_1000B0A1
		mov	edi, eax
		pop	ecx
		pop	ecx
		test	edi, edi
		jz	loc_1000B6F3
		mov	ecx, [esp+2Ch+var_4]
		dec	ecx
		push	ecx
		push	dword ptr [edi+0Ch]
		call	PORT_ArenaAlloc_Util
		mov	[edi+20h], eax
		pop	ecx
		pop	ecx
		test	eax, eax
		jz	loc_1000B6E6
		mov	ecx, [esp+2Ch+var_4]
		dec	ecx
		push	ecx		; size_t
		push	ebp		; void *
		push	eax		; void *
		call	memcpy
		jmp	short loc_1000B6DC
; ---------------------------------------------------------------------------

loc_1000B66A:				; CODE XREF: sub_1000B472+19Cj
		cmp	eax, 6
		jnz	short loc_1000B6E6
		mov	ebp, [esp+2Ch+var_8]
		inc	ebp
		push	ebp		; char *
		push	esi		; int
		call	sub_1000C933
		mov	[esp+34h+var_18], eax
		pop	ecx
		pop	ecx
		test	eax, eax
		jz	short loc_1000B6E6
		lea	ecx, [eax+14h]
		push	ecx
		push	esi
		call	sub_1000B0A1
		mov	edi, eax
		pop	ecx
		pop	ecx
		test	edi, edi
		jz	short loc_1000B6F3
		push	4
		push	dword ptr [edi+0Ch]
		call	PORT_ArenaAlloc_Util
		mov	[edi+2Ch], eax
		pop	ecx
		pop	ecx
		test	eax, eax
		jz	short loc_1000B6E6
		mov	eax, [esp+2Ch+var_4]
		dec	eax
		push	eax
		push	dword ptr [edi+0Ch]
		call	PORT_ArenaAlloc_Util
		pop	ecx
		pop	ecx
		mov	ecx, [edi+2Ch]
		mov	[ecx], eax
		mov	eax, [edi+2Ch]
		mov	ecx, [eax]
		test	ecx, ecx
		jz	short loc_1000B6E6
		mov	eax, [esp+2Ch+var_4]
		dec	eax
		push	eax		; size_t
		push	ebp		; void *
		push	ecx		; void *
		call	memcpy
		mov	dword ptr [edi+30h], 1

loc_1000B6DC:				; CODE XREF: sub_1000B472+1F6j
		push	edi
		push	esi
		call	sub_1000BC7E
		add	esp, 14h

loc_1000B6E6:				; CODE XREF: sub_1000B472+1B2j
					; sub_1000B472+1E3j ...
		test	edi, edi
		jz	short loc_1000B6F3
		push	edi		; void *
		call	sub_1000A0E5
		pop	ecx
		xor	edi, edi

loc_1000B6F3:				; CODE XREF: sub_1000B472+1C8j
					; sub_1000B472+223j ...
		mov	eax, [esp+2Ch+var_1C]
		test	eax, eax
		jz	short loc_1000B708
		push	eax		; void *
		call	sub_1000A0E5
		xor	eax, eax
		pop	ecx
		mov	[esp+2Ch+var_1C], eax

loc_1000B708:				; CODE XREF: sub_1000B472+287j
		mov	ebp, [esp+2Ch+var_18]
		test	ebp, ebp
		jz	short loc_1000B71D
		push	ebp		; void *
		call	sub_1000A0E5
		xor	eax, eax
		pop	ecx
		mov	[esp+2Ch+var_18], eax

loc_1000B71D:				; CODE XREF: sub_1000B472+182j
					; sub_1000B472+18Fj ...
		push	7
		lea	eax, [esp+30h+var_10]
		push	eax
		lea	eax, [esp+34h+var_8]
		push	eax
		push	ebx
		call	dword ptr [ebx+14h]
		add	esp, 10h
		test	eax, eax
		jz	loc_1000B5EF
		push	0
		push	dword ptr [esi]
		call	sub_1000BF14
		push	ebx
		call	dword ptr [ebx+4]
		add	esp, 0Ch
		xor	eax, eax

loc_1000B74A:				; CODE XREF: sub_1000B472+174j
		pop	ebp

loc_1000B74B:				; CODE XREF: sub_1000B472+36j
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 1Ch
		retn
sub_1000B472	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000B752	proc near		; CODE XREF: sub_1000CF2B+B5p

var_97C		= dword	ptr -97Ch
var_978		= dword	ptr -978h
var_974		= dword	ptr -974h
var_970		= dword	ptr -970h
var_96C		= dword	ptr -96Ch
var_968		= dword	ptr -968h
var_964		= dword	ptr -964h
var_960		= dword	ptr -960h
var_95C		= dword	ptr -95Ch
var_958		= dword	ptr -958h
var_954		= dword	ptr -954h
var_950		= dword	ptr -950h
var_944		= dword	ptr -944h
var_940		= dword	ptr -940h
var_93C		= dword	ptr -93Ch
var_938		= dword	ptr -938h
var_934		= dword	ptr -934h
var_930		= dword	ptr -930h
var_92C		= dword	ptr -92Ch
var_928		= dword	ptr -928h
var_924		= dword	ptr -924h
var_920		= dword	ptr -920h
var_914		= dword	ptr -914h
var_908		= dword	ptr -908h
var_8FC		= dword	ptr -8FCh
var_8F8		= dword	ptr -8F8h
var_8F4		= dword	ptr -8F4h
var_8E8		= dword	ptr -8E8h
var_8DC		= dword	ptr -8DCh
var_8D8		= dword	ptr -8D8h
var_8D0		= dword	ptr -8D0h
var_8CC		= byte ptr -8CCh
var_804		= byte ptr -804h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 97Ch
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+97Ch+var_4], eax
		push	ebx
		mov	ebx, [esp+980h+arg_0]
		lea	eax, [esp+980h+var_974]
		push	ebp
		push	esi
		mov	esi, [esp+988h+arg_4]
		xor	ebp, ebp
		push	3
		push	eax
		lea	eax, [esp+990h+var_97C]
		push	eax
		push	esi
		call	dword ptr [esi+14h]
		add	esp, 10h
		test	eax, eax
		jz	short loc_1000B798
		or	eax, 0FFFFFFFFh
		jmp	loc_1000B9F5
; ---------------------------------------------------------------------------

loc_1000B798:				; CODE XREF: sub_1000B752+3Cj
		push	edi

loc_1000B799:				; CODE XREF: sub_1000B752+1B9j
		mov	edx, [esp+98Ch+var_974]
		mov	ecx, [esp+98Ch+var_970]
		add	ecx, 0FFFFFFFDh
		mov	[esp+98Ch+var_964], ecx
		lea	eax, [edx+3]
		mov	[esp+98Ch+var_968], eax
		mov	eax, [esp+98Ch+var_97C]
		movzx	edi, byte ptr [eax]
		inc	eax
		mov	[esp+98Ch+var_93C], eax
		mov	eax, [esp+98Ch+var_978]
		dec	eax
		mov	[esp+98Ch+var_938], eax
		test	ecx, ecx
		jz	loc_1000B8F6
		test	eax, eax
		jz	loc_1000B8F6
		mov	eax, edi
		dec	eax
		jz	short loc_1000B858
		sub	eax, 3
		jz	short loc_1000B7E8
		dec	eax
		jnz	loc_1000B8F6
		xor	ebp, ebp
		inc	ebp

loc_1000B7E8:				; CODE XREF: sub_1000B752+8Aj
		movzx	eax, byte ptr [edx]
		mov	[esp+98Ch+var_95C], eax
		movzx	eax, byte ptr [edx+2]
		push	800h
		mov	[esp+990h+var_960], edi
		mov	[esp+990h+var_958], eax
		call	PORT_NewArena_Util
		mov	[esp+990h+var_954], eax
		pop	ecx
		test	eax, eax
		jz	loc_1000B8F6
		lea	eax, [esp+98Ch+var_96C]
		push	eax
		lea	eax, [esp+990h+var_960]
		push	eax
		call	sub_10009533
		pop	ecx
		pop	ecx
		test	eax, eax
		jnz	loc_1000B8F6
		push	ebp		; int
		push	[esp+990h+var_944] ; char *
		lea	eax, [esp+994h+var_940]
		push	eax		; int
		lea	eax, [esp+998h+var_950]
		push	eax		; int
		push	ebx		; int
		call	sub_1000CBF9
		push	0
		push	[esp+9A4h+var_954]
		call	PORT_FreeArena_Util
		add	esp, 1Ch
		and	[esp+98Ch+var_954], 0
		jmp	loc_1000B8F6
; ---------------------------------------------------------------------------

loc_1000B858:				; CODE XREF: sub_1000B752+85j
		movzx	eax, byte ptr [edx]
		mov	[esp+98Ch+var_8F8], eax
		mov	[esp+98Ch+var_8FC], 1
		movzx	eax, byte ptr [edx+2]
		mov	[esp+98Ch+var_8F4], eax
		lea	eax, [esp+98Ch+var_96C]
		push	eax
		lea	eax, [esp+990h+var_8FC]
		push	eax
		call	sub_100093F9
		pop	ecx
		pop	ecx
		test	eax, eax
		jnz	short loc_1000B8F6
		push	[esp+98Ch+var_8D0] ; char *
		lea	eax, [esp+990h+var_8DC]
		push	eax		; int
		call	sub_100080B1
		mov	edi, eax
		pop	ecx
		pop	ecx
		test	edi, edi
		jz	short loc_1000B8CB
		lea	eax, [esp+98Ch+var_8E8]
		push	eax		; int
		push	[esp+990h+var_8D0] ; char *
		push	edi		; int
		push	ebx		; int
		call	sub_1000CC4E
		push	edi		; void *
		call	sub_1000C1A9
		add	esp, 14h

loc_1000B8CB:				; CODE XREF: sub_1000B752+158j
		lea	eax, [esp+98Ch+var_804]
		push	eax
		push	[esp+990h+var_8D8]
		call	sub_1000D118
		lea	eax, [esp+994h+var_8CC]
		push	eax
		push	[esp+998h+var_8D0]
		call	sub_1000D118
		add	esp, 10h

loc_1000B8F6:				; CODE XREF: sub_1000B752+74j
					; sub_1000B752+7Cj ...
		push	7
		lea	eax, [esp+990h+var_974]
		push	eax
		lea	eax, [esp+994h+var_97C]
		push	eax
		push	esi
		call	dword ptr [esi+14h]
		add	esp, 10h
		test	eax, eax
		jz	loc_1000B799
		push	3
		lea	eax, [esp+990h+var_974]
		push	eax
		lea	eax, [esp+994h+var_97C]
		push	eax
		push	esi
		call	dword ptr [esi+14h]
		add	esp, 10h
		test	eax, eax
		jz	short loc_1000B930
		or	eax, 0FFFFFFFFh
		jmp	loc_1000B9F4
; ---------------------------------------------------------------------------

loc_1000B930:				; CODE XREF: sub_1000B752+1D4j
		push	6
		pop	ebp

loc_1000B933:				; CODE XREF: sub_1000B752+28Ej
		mov	ecx, [esp+98Ch+var_974]
		mov	edi, [esp+98Ch+var_97C]
		mov	edx, [esp+98Ch+var_970]
		add	edx, 0FFFFFFFDh
		lea	eax, [ecx+3]
		mov	[esp+98Ch+var_964], edx
		mov	[esp+98Ch+var_968], eax
		movzx	eax, byte ptr [edi]
		cmp	eax, ebp
		jnz	short loc_1000B9CB
		mov	eax, [esp+98Ch+var_978]
		inc	edi
		dec	eax
		test	edx, edx
		jz	short loc_1000B9CB
		test	eax, eax
		jz	short loc_1000B9CB
		movzx	eax, byte ptr [ecx]
		mov	[esp+98Ch+var_930], eax
		mov	[esp+98Ch+var_934], ebp
		movzx	eax, byte ptr [ecx+2]
		push	800h
		mov	[esp+990h+var_92C], eax
		call	PORT_NewArena_Util
		mov	[esp+990h+var_928], eax
		lea	eax, [esp+990h+var_96C]
		push	edi		; char *
		push	eax		; int
		lea	eax, [esp+998h+var_934]
		push	eax		; int
		call	sub_100096A3
		add	esp, 10h
		test	eax, eax
		jnz	short loc_1000B9B9
		lea	eax, [esp+98Ch+var_908]
		push	eax		; int
		lea	eax, [esp+990h+var_914]
		push	eax		; int
		lea	eax, [esp+994h+var_920]
		push	eax		; int
		push	[esp+998h+var_924] ; char *
		push	ebx		; int
		call	sub_1000CCF8
		add	esp, 14h

loc_1000B9B9:				; CODE XREF: sub_1000B752+246j
		push	0
		push	[esp+990h+var_928]
		call	PORT_FreeArena_Util
		and	[esp+994h+var_928], 0
		pop	ecx
		pop	ecx

loc_1000B9CB:				; CODE XREF: sub_1000B752+200j
					; sub_1000B752+20Aj ...
		push	7
		lea	eax, [esp+990h+var_974]
		push	eax
		lea	eax, [esp+994h+var_97C]
		push	eax
		push	esi
		call	dword ptr [esi+14h]
		add	esp, 10h
		test	eax, eax
		jz	loc_1000B933
		push	esi
		call	dword ptr [esi+4]
		pop	ecx
		mov	dword ptr [ebx+8], 1
		xor	eax, eax

loc_1000B9F4:				; CODE XREF: sub_1000B752+1D9j
		pop	edi

loc_1000B9F5:				; CODE XREF: sub_1000B752+41j
		mov	ecx, [esp+988h+var_4]
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 97Ch
		retn
sub_1000B752	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_1000BA0D(int,	size_t)
sub_1000BA0D	proc near		; CODE XREF: sub_10008F76+8Fp
					; sub_100090F9+37p ...

var_24		= byte ptr -24h
var_18		= dword	ptr -18h
var_C		= byte ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 24h
		push	esi
		push	edi
		push	800h
		call	PORT_NewArena_Util
		mov	esi, eax
		pop	ecx
		test	esi, esi
		jz	short loc_1000BA96
		mov	edi, [ebp+arg_4]
		lea	eax, [ebp+var_18]
		push	eax		; int
		push	esi		; int
		push	edi		; size_t
		call	sub_1000A170
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_1000BA8C
		lea	eax, [ebp+var_C]
		push	eax
		lea	eax, [edi+20h]
		push	eax
		push	esi
		call	sub_10008A72
		add	esp, 0Ch
		cmp	eax, 0FFFFFFFFh
		jz	short loc_1000BA8C
		lea	eax, [ebp+var_24]
		push	eax
		lea	eax, [ebp+var_C]
		push	esi
		push	eax
		call	sub_1000A241
		add	esp, 0Ch
		cmp	eax, 0FFFFFFFFh
		jz	short loc_1000BA8C
		lea	eax, [ebp+var_18]
		push	eax
		lea	eax, [ebp+var_24]
		push	eax
		push	edi
		push	[ebp+arg_0]
		call	sub_1000BB1D
		add	esp, 10h
		test	eax, eax
		jnz	short loc_1000BA8C
		push	eax
		push	esi
		call	PORT_FreeArena_Util
		pop	ecx
		pop	ecx
		xor	eax, eax
		jmp	short loc_1000BA99
; ---------------------------------------------------------------------------

loc_1000BA8C:				; CODE XREF: sub_1000BA0D+2Cj
					; sub_1000BA0D+42j ...
		push	0
		push	esi
		call	PORT_FreeArena_Util
		pop	ecx
		pop	ecx

loc_1000BA96:				; CODE XREF: sub_1000BA0D+17j
		or	eax, 0FFFFFFFFh

loc_1000BA99:				; CODE XREF: sub_1000BA0D+7Dj
		pop	edi
		pop	esi
		mov	esp, ebp
		pop	ebp
		retn
sub_1000BA0D	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_1000BA9F	proc near		; CODE XREF: sub_1000CBF9+3Ep

var_18		= byte ptr -18h
var_C		= byte ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		push	esi
		push	edi
		push	800h
		call	PORT_NewArena_Util
		mov	esi, eax
		pop	ecx
		test	esi, esi
		jz	short loc_1000BB14
		mov	edi, [ebp+arg_4]
		lea	eax, [ebp+var_C]
		push	eax
		push	esi
		push	edi
		call	sub_1000A2A9
		add	esp, 0Ch
		cmp	eax, 0FFFFFFFFh
		jz	short loc_1000BB0A
		push	dword ptr [edi]
		lea	eax, [ebp+var_18]
		push	eax
		push	esi
		push	[ebp+arg_8]
		call	sub_1000A344
		add	esp, 10h
		cmp	eax, 0FFFFFFFFh
		jz	short loc_1000BB0A
		lea	eax, [ebp+var_C]
		push	eax
		lea	eax, [ebp+var_18]
		push	eax
		push	edi
		push	[ebp+arg_0]
		call	sub_1000BB1D
		add	esp, 10h
		test	eax, eax
		jnz	short loc_1000BB0A
		push	eax
		push	esi
		call	PORT_FreeArena_Util
		pop	ecx
		pop	ecx
		xor	eax, eax
		jmp	short loc_1000BB17
; ---------------------------------------------------------------------------

loc_1000BB0A:				; CODE XREF: sub_1000BA9F+2Dj
					; sub_1000BA9F+44j ...
		push	0
		push	esi
		call	PORT_FreeArena_Util
		pop	ecx
		pop	ecx

loc_1000BB14:				; CODE XREF: sub_1000BA9F+17j
		or	eax, 0FFFFFFFFh

loc_1000BB17:				; CODE XREF: sub_1000BA9F+69j
		pop	edi
		pop	esi
		mov	esp, ebp
		pop	ebp
		retn
sub_1000BA9F	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_1000BB1D	proc near		; CODE XREF: sub_1000BA0D+66p
					; sub_1000BA9F+52p ...

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		mov	eax, [ebp+arg_C]
		mov	edx, [ebp+arg_4]
		push	esi
		mov	esi, [ebp+arg_0]
		mov	ecx, [eax+4]
		mov	eax, [eax+8]
		mov	[ebp+var_4], eax
		mov	al, [edx+4]
		mov	[ebp+var_8], ecx
		mov	[ecx], al
		mov	al, [edx]
		mov	[ecx+1], al
		mov	al, [edx+8]
		mov	[ecx+2], al
		mov	eax, [ebp+arg_8]
		push	0
		mov	ecx, [eax+4]
		mov	eax, [eax+8]
		mov	[ebp+var_C], eax
		mov	al, [edx]
		mov	[ebp+var_10], ecx
		mov	[ecx], al
		lea	eax, [ebp+var_8]
		push	eax
		lea	eax, [ebp+var_10]
		push	eax
		push	dword ptr [esi]
		call	sub_1000BEA8
		add	esp, 10h
		test	eax, eax
		jnz	short loc_1000BB82
		push	eax
		push	dword ptr [esi]
		call	sub_1000BF14
		pop	ecx
		pop	ecx
		test	eax, eax
		jz	short loc_1000BB85

loc_1000BB82:				; CODE XREF: sub_1000BB1D+55j
		or	eax, 0FFFFFFFFh

loc_1000BB85:				; CODE XREF: sub_1000BB1D+63j
		pop	esi
		mov	esp, ebp
		pop	ebp
		retn
sub_1000BB1D	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_1000BB8A	proc near		; CODE XREF: sub_10008F76+ACp
					; sub_1000BF7A+B0p

var_18		= dword	ptr -18h
var_C		= byte ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		push	esi
		push	edi
		push	800h
		call	PORT_NewArena_Util
		mov	esi, eax
		pop	ecx
		test	esi, esi
		jz	short loc_1000BBFB
		mov	edi, [ebp+arg_4]
		lea	eax, [ebp+var_C]
		push	eax
		push	esi
		push	edi
		call	sub_1000A3B5
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_1000BBF1
		lea	eax, [ebp+var_18]
		push	eax		; int
		push	esi		; int
		push	dword ptr [edi+10h] ; char *
		call	sub_1000A408
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_1000BBF1
		lea	eax, [ebp+var_C]
		push	eax
		lea	eax, [ebp+var_18]
		push	eax
		push	edi
		push	[ebp+arg_0]
		call	sub_1000BB1D
		add	esp, 10h
		test	eax, eax
		jnz	short loc_1000BBF1
		push	eax
		push	esi
		call	PORT_FreeArena_Util
		pop	ecx
		pop	ecx
		xor	eax, eax
		jmp	short loc_1000BBFE
; ---------------------------------------------------------------------------

loc_1000BBF1:				; CODE XREF: sub_1000BB8A+2Cj
					; sub_1000BB8A+40j ...
		push	0
		push	esi
		call	PORT_FreeArena_Util
		pop	ecx
		pop	ecx

loc_1000BBFB:				; CODE XREF: sub_1000BB8A+17j
		or	eax, 0FFFFFFFFh

loc_1000BBFE:				; CODE XREF: sub_1000BB8A+65j
		pop	edi
		pop	esi
		mov	esp, ebp
		pop	ebp
		retn
sub_1000BB8A	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_1000BC04	proc near		; CODE XREF: sub_1000CCF8+91p

var_18		= dword	ptr -18h
var_C		= byte ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		push	esi
		push	edi
		push	800h
		call	PORT_NewArena_Util
		mov	esi, eax
		pop	ecx
		test	esi, esi
		jz	short loc_1000BC75
		mov	edi, [ebp+arg_4]
		lea	eax, [ebp+var_C]
		push	eax
		push	esi
		push	edi
		call	sub_1000A45A
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_1000BC6B
		lea	eax, [ebp+var_18]
		push	eax		; int
		push	esi		; int
		push	dword ptr [edi+10h] ; char *
		call	sub_1000A514
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_1000BC6B
		lea	eax, [ebp+var_C]
		push	eax
		lea	eax, [ebp+var_18]
		push	eax
		push	edi
		push	[ebp+arg_0]
		call	sub_1000BB1D
		add	esp, 10h
		test	eax, eax
		jnz	short loc_1000BC6B
		push	eax
		push	esi
		call	PORT_FreeArena_Util
		pop	ecx
		pop	ecx
		xor	eax, eax
		jmp	short loc_1000BC78
; ---------------------------------------------------------------------------

loc_1000BC6B:				; CODE XREF: sub_1000BC04+2Cj
					; sub_1000BC04+40j ...
		push	0
		push	esi
		call	PORT_FreeArena_Util
		pop	ecx
		pop	ecx

loc_1000BC75:				; CODE XREF: sub_1000BC04+17j
		or	eax, 0FFFFFFFFh

loc_1000BC78:				; CODE XREF: sub_1000BC04+65j
		pop	edi
		pop	esi
		mov	esp, ebp
		pop	ebp
		retn
sub_1000BC04	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_1000BC7E	proc near		; CODE XREF: sub_10008F76+F8p
					; sub_10009175+4Ep ...

var_18		= byte ptr -18h
var_C		= byte ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		push	esi
		push	edi
		push	800h
		call	PORT_NewArena_Util
		mov	esi, eax
		pop	ecx
		test	esi, esi
		jz	short loc_1000BCF0
		mov	edi, [ebp+arg_4]
		lea	eax, [ebp+var_C]
		push	eax
		push	esi
		push	edi
		call	sub_1000A566
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_1000BCE6
		lea	eax, [ebp+var_18]
		push	eax
		lea	eax, [edi+10h]
		push	esi
		push	eax
		call	sub_1000A7AD
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_1000BCE6
		lea	eax, [ebp+var_C]
		push	eax
		lea	eax, [ebp+var_18]
		push	eax
		push	edi
		push	[ebp+arg_0]
		call	sub_1000BB1D
		add	esp, 10h
		test	eax, eax
		jnz	short loc_1000BCE6
		push	eax
		push	esi
		call	PORT_FreeArena_Util
		pop	ecx
		pop	ecx
		xor	eax, eax
		jmp	short loc_1000BCF3
; ---------------------------------------------------------------------------

loc_1000BCE6:				; CODE XREF: sub_1000BC7E+2Cj
					; sub_1000BC7E+41j ...
		push	0
		push	esi
		call	PORT_FreeArena_Util
		pop	ecx
		pop	ecx

loc_1000BCF0:				; CODE XREF: sub_1000BC7E+17j
		or	eax, 0FFFFFFFFh

loc_1000BCF3:				; CODE XREF: sub_1000BC7E+66j
		pop	edi
		pop	esi
		mov	esp, ebp
		pop	ebp
		retn
sub_1000BC7E	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_1000BCF9	proc near		; CODE XREF: sub_1000CF2B+7Ep

var_18		= byte ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= byte ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		push	esi
		push	800h
		call	PORT_NewArena_Util
		mov	esi, eax
		pop	ecx
		test	esi, esi
		jz	short loc_1000BD3C
		push	3
		pop	eax
		push	eax
		push	esi
		mov	[ebp+var_4], eax
		call	PORT_ArenaAlloc_Util
		mov	[ebp+var_8], eax
		pop	ecx
		pop	ecx
		test	eax, eax
		jnz	short loc_1000BD44
		push	0FFFFE013h
		call	PORT_SetError_Util
		pop	ecx

loc_1000BD32:				; CODE XREF: sub_1000BCF9+5Fj
					; sub_1000BCF9+87j
		push	0
		push	esi
		call	PORT_FreeArena_Util
		pop	ecx
		pop	ecx

loc_1000BD3C:				; CODE XREF: sub_1000BCF9+16j
		or	eax, 0FFFFFFFFh

loc_1000BD3F:				; CODE XREF: sub_1000BCF9+94j
		pop	esi
		mov	esp, ebp
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_1000BD44:				; CODE XREF: sub_1000BCF9+2Cj
		push	9
		pop	eax
		push	eax
		push	esi
		mov	[ebp+var_10], eax
		call	PORT_ArenaAlloc_Util
		mov	[ebp+var_14], eax
		pop	ecx
		pop	ecx
		test	eax, eax
		jz	short loc_1000BD32
		push	8		; size_t
		inc	eax
		push	offset aVersion	; "Version"
		push	eax		; void *
		call	memcpy
		lea	eax, [ebp+var_C]
		push	eax
		lea	eax, [ebp+var_18]
		push	eax
		push	[ebp+arg_4]
		push	[ebp+arg_0]
		call	sub_1000BB1D
		add	esp, 1Ch
		test	eax, eax
		jnz	short loc_1000BD32
		push	eax
		push	esi
		call	PORT_FreeArena_Util
		pop	ecx
		pop	ecx
		xor	eax, eax
		jmp	short loc_1000BD3F
sub_1000BCF9	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_1000BD8F	proc near		; DATA XREF: sub_1000CAB1+21o

var_C		= byte ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		push	edi
		push	800h
		call	PORT_NewArena_Util
		mov	esi, eax
		pop	ecx
		test	esi, esi
		jz	short loc_1000BE04
		push	8F8h
		push	esi
		call	PORT_ArenaAlloc_Util
		mov	edx, [ebp+arg_0]
		mov	edi, eax
		mov	ecx, [edx+4]
		movzx	ecx, byte ptr [ecx]
		mov	[edi+4], ecx
		mov	ecx, [edx+4]
		movzx	ecx, byte ptr [ecx+1]
		mov	[edi], ecx
		mov	ecx, [edx+4]
		movzx	eax, byte ptr [ecx+2]
		mov	[edi+8], eax
		mov	[edi+0Ch], esi
		mov	eax, [edx+8]
		sub	eax, 3
		mov	[ebp+var_4], eax
		mov	eax, [edx+4]
		add	eax, 3
		mov	[ebp+var_8], eax
		lea	eax, [ebp+var_C]
		push	eax
		push	edi
		call	sub_100093F9
		add	esp, 10h
		test	eax, eax
		jz	short loc_1000BE0D
		push	0
		push	esi
		call	PORT_FreeArena_Util
		pop	ecx
		pop	ecx

loc_1000BE04:				; CODE XREF: sub_1000BD8F+17j
		or	eax, 0FFFFFFFFh

loc_1000BE07:				; CODE XREF: sub_1000BD8F+A8j
		pop	edi
		pop	esi
		mov	esp, ebp
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_1000BE0D:				; CODE XREF: sub_1000BD8F+69j
		mov	esi, [ebp+arg_C]
		and	dword ptr [edi+20h], 0
		push	edi
		push	dword ptr [esi+4]
		call	sub_100093C7
		push	dword ptr [esi+8]
		mov	edi, eax
		push	[ebp+arg_4]
		push	edi
		call	dword ptr [esi]
		push	0		; int
		push	edi		; void *
		mov	esi, eax
		call	sub_10009FF1
		add	esp, 1Ch
		mov	eax, esi
		jmp	short loc_1000BE07
sub_1000BD8F	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000BE39	proc near		; CODE XREF: sub_1000C0CE+10p
					; sub_1000C81F+100p

arg_0		= dword	ptr  4

		push	dword_10015054
		call	ds:PR_Lock
		mov	eax, [esp+4+arg_0]
		push	eax
		call	dword ptr [eax+4]
		push	dword_10015054
		call	ds:PR_Unlock
		add	esp, 0Ch
		retn
sub_1000BE39	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000BE5D	proc near		; CODE XREF: sub_1000AEF9+2Dp

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	esi
		push	dword_10015054
		call	ds:PR_Lock
		push	[esp+8+arg_C]
		mov	eax, [esp+0Ch+arg_0]
		push	[esp+0Ch+arg_8]
		push	[esp+10h+arg_4]
		push	eax
		call	dword ptr [eax+0Ch]
		push	dword_10015054
		mov	esi, eax
		call	ds:PR_Unlock
		add	esp, 18h
		mov	eax, esi
		pop	esi
		retn
sub_1000BE5D	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000BE93	proc near		; CODE XREF: sub_1000C7C0+8p
		cmp	dword_10015054,	0
		jnz	short locret_1000BEA7
		call	ds:PR_NewLock
		mov	dword_10015054,	eax

locret_1000BEA7:			; CODE XREF: sub_1000BE93+7j
		retn
sub_1000BE93	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000BEA8	proc near		; CODE XREF: sub_1000B472+11Dp
					; sub_1000BB1D+4Bp

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	esi
		push	dword_10015054
		call	ds:PR_Lock
		push	[esp+8+arg_C]
		mov	eax, [esp+0Ch+arg_0]
		push	[esp+0Ch+arg_8]
		push	[esp+10h+arg_4]
		push	eax
		call	dword ptr [eax+10h]
		push	dword_10015054
		mov	esi, eax
		call	ds:PR_Unlock
		add	esp, 18h
		mov	eax, esi
		pop	esi
		retn
sub_1000BEA8	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000BEDE	proc near		; CODE XREF: sub_1000CA18+1Ap
					; sub_1000CA18+7Cp

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	esi
		push	dword_10015054
		call	ds:PR_Lock
		push	[esp+8+arg_C]
		mov	eax, [esp+0Ch+arg_0]
		push	[esp+0Ch+arg_8]
		push	[esp+10h+arg_4]
		push	eax
		call	dword ptr [eax+14h]
		push	dword_10015054
		mov	esi, eax
		call	ds:PR_Unlock
		add	esp, 18h
		mov	eax, esi
		pop	esi
		retn
sub_1000BEDE	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000BF14	proc near		; CODE XREF: sub_10009E46+58p
					; sub_1000B472+151p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		push	dword_10015054
		call	ds:PR_Lock
		mov	eax, [esp+8+arg_0]
		push	[esp+8+arg_4]
		push	eax
		call	dword ptr [eax+18h]
		push	dword_10015054
		mov	esi, eax
		call	ds:PR_Unlock
		add	esp, 10h
		mov	eax, esi
		pop	esi
		retn
sub_1000BF14	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_1000BF42	proc near		; CODE XREF: sub_10005593+ACp
		push	ebp
		mov	ebp, esp
		pop	ebp
		jmp	sub_1000CBF9
sub_1000BF42	endp

; [0000002F BYTES: COLLAPSED FUNCTION __fseeki64]

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1000BF7A(int,	int, char *)
sub_1000BF7A	proc near		; CODE XREF: sub_10004B06+143p

var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ecx
		push	ebx
		mov	ebx, [esp+8+arg_0]
		push	ebp
		push	esi
		push	edi
		push	ebx
		or	esi, 0FFFFFFFFh
		xor	edi, edi
		call	sub_1000C745
		mov	eax, [esp+18h+arg_4]
		add	eax, 38h
		push	eax
		push	ebx
		mov	[esp+20h+var_4], eax
		call	sub_1000B0A1
		mov	ebp, eax
		add	esp, 0Ch
		test	ebp, ebp
		jz	loc_1000C04B
		cmp	[ebp+20h], edi
		jnz	short loc_1000BFEB
		push	[esp+14h+arg_8]
		push	[esp+18h+arg_4]
		push	ebx
		call	sub_10009175
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		jnz	short loc_1000C039
		push	[esp+14h+arg_8]	; char *
		push	[esp+18h+arg_4]	; int
		push	ebx		; int
		call	sub_100090F9
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		jnz	short loc_1000C039
		push	eax
		push	[esp+18h+var_4]
		push	[esp+1Ch+arg_8]
		jmp	short loc_1000C01A
; ---------------------------------------------------------------------------

loc_1000BFEB:				; CODE XREF: sub_1000BF7A+36j
		push	dword ptr [ebp+20h] ; char *
		push	[esp+18h+arg_4]	; int
		push	ebx		; int
		call	sub_100090F9
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		jnz	short loc_1000C039
		push	dword ptr [ebp+20h] ; char *
		push	ebx		; int
		call	sub_1000AFC5
		mov	edi, eax
		pop	ecx
		pop	ecx
		test	edi, edi
		jnz	short loc_1000C037
		push	eax		; int
		push	[esp+18h+var_4]	; int
		push	dword ptr [ebp+20h] ; char *

loc_1000C01A:				; CODE XREF: sub_1000BF7A+6Fj
		call	sub_1000A99A
		mov	edi, eax
		add	esp, 0Ch
		test	edi, edi
		jz	short loc_1000C039
		push	edi
		push	ebx
		call	sub_1000BB8A
		mov	esi, eax
		pop	ecx
		pop	ecx
		test	esi, esi
		jnz	short loc_1000C039

loc_1000C037:				; CODE XREF: sub_1000BF7A+96j
		xor	esi, esi

loc_1000C039:				; CODE XREF: sub_1000BF7A+4Dj
					; sub_1000BF7A+64j ...
		push	ebp		; void *
		call	sub_1000A0E5
		pop	ecx
		test	edi, edi
		jz	short loc_1000C04B
		push	edi		; void *
		call	sub_1000A0E5
		pop	ecx

loc_1000C04B:				; CODE XREF: sub_1000BF7A+2Dj
					; sub_1000BF7A+C8j
		push	ebx
		call	sub_1000CBDC
		pop	ecx
		pop	edi
		mov	eax, esi
		pop	esi
		pop	ebp
		pop	ebx
		pop	ecx
		retn
sub_1000BF7A	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_1000C05A	proc near		; CODE XREF: sub_10004B06+101p
					; sub_10004E83+116p ...

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	esi
		push	edi
		push	[ebp+arg_0]
		call	sub_1000C745
		push	dword_1001505C
		call	ds:PR_Lock
		mov	eax, [ebp+arg_4]
		pop	ecx
		pop	ecx
		mov	edi, [eax+90h]
		test	edi, edi
		jnz	short loc_1000C087
		or	esi, 0FFFFFFFFh
		jmp	short loc_1000C0B2
; ---------------------------------------------------------------------------

loc_1000C087:				; CODE XREF: sub_1000C05A+26j
		mov	esi, [ebp+arg_8]
		movsd
		movsd
		movsd
		mov	eax, [eax+6Ch]
		test	eax, eax
		jnz	short loc_1000C098
		xor	esi, esi
		jmp	short loc_1000C0B2
; ---------------------------------------------------------------------------

loc_1000C098:				; CODE XREF: sub_1000C05A+38j
		mov	esi, [ebp+arg_8]
		lea	edi, [eax+14h]
		push	eax		; size_t
		push	[ebp+arg_0]	; int
		movsd
		movsd
		movsd
		call	sub_1000BA0D
		mov	esi, eax
		neg	esi
		pop	ecx
		pop	ecx
		sbb	esi, esi

loc_1000C0B2:				; CODE XREF: sub_1000C05A+2Bj
					; sub_1000C05A+3Cj
		push	dword_1001505C
		call	ds:PR_Unlock
		push	[ebp+arg_0]
		call	sub_1000CBDC
		pop	ecx
		pop	ecx
		pop	edi
		mov	eax, esi
		pop	esi
		pop	ebp
		retn
sub_1000C05A	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000C0CE	proc near		; CODE XREF: legacy_Open+82p
					; sub_100075F4+1Ap

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		test	esi, esi
		jz	short loc_1000C102
		cmp	dword ptr [esi], 0
		jz	short loc_1000C0E7
		push	dword ptr [esi]
		call	sub_1000BE39
		and	dword ptr [esi], 0
		pop	ecx

loc_1000C0E7:				; CODE XREF: sub_1000C0CE+Cj
		cmp	dword ptr [esi+4], 0
		jz	short loc_1000C0FB
		push	dword ptr [esi+4]
		call	ds:PR_DestroyMonitor
		and	dword ptr [esi+4], 0
		pop	ecx

loc_1000C0FB:				; CODE XREF: sub_1000C0CE+1Dj
		push	esi
		call	PORT_Free_Util
		pop	ecx

loc_1000C102:				; CODE XREF: sub_1000C0CE+7j
		pop	esi
		retn
sub_1000C0CE	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000C104	proc near		; CODE XREF: sub_100080B1+4p
		push	esi
		call	sub_1000C754
		mov	esi, dword_1001503C
		test	esi, esi
		jz	short loc_1000C122
		mov	ecx, [esi]
		dec	dword_10015048
		mov	dword_1001503C,	ecx

loc_1000C122:				; CODE XREF: sub_1000C104+Ej
		call	sub_1000CBEB
		test	esi, esi
		jz	short loc_1000C12F
		mov	eax, esi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1000C12F:				; CODE XREF: sub_1000C104+25j
		push	428h
		call	PORT_ZAlloc_Util
		pop	ecx
		pop	esi
		retn
sub_1000C104	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000C13C	proc near		; CODE XREF: sub_10006381+D3p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		xor	eax, eax
		cmp	[esp+arg_8], eax
		setnz	al
		add	eax, 4
		push	eax
		push	[esp+4+arg_4]
		push	[esp+8+arg_0]
		call	sub_10009DE0
		add	esp, 0Ch
		retn
sub_1000C13C	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000C15A	proc near		; CODE XREF: sub_10006381+9Bp

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		push	edi
		push	dword ptr [esi+4]
		call	sub_1000C745
		lea	eax, [esi+54h]
		xor	edi, edi
		push	eax
		push	dword ptr [esi+4]
		call	sub_10009D85
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_1000C180
		or	edi, 0FFFFFFFFh

loc_1000C180:				; CODE XREF: sub_1000C15A+21j
		push	esi
		call	sub_1000B23C
		push	dword ptr [esi+6Ch] ; void *
		call	sub_1000A0E5
		push	dword ptr [esi+4]
		and	dword ptr [esi+6Ch], 0
		and	dword ptr [esi+90h], 0
		call	sub_1000CBDC
		add	esp, 0Ch
		mov	eax, edi
		pop	edi
		pop	esi
		retn
sub_1000C15A	endp


; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1000C1A9(void	*)
sub_1000C1A9	proc near		; CODE XREF: sub_1000455F+173p
					; sub_10005372+206p ...

arg_0		= dword	ptr  4

		push	1		; int
		push	[esp+4+arg_0]	; void *
		call	sub_10009FF1
		pop	ecx
		pop	ecx
		retn
sub_1000C1A9	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: thunk

; int __cdecl sub_1000C1B7(void	*)
sub_1000C1B7	proc near		; CODE XREF: sub_10005372+1DDp
					; sub_100069E5+1E4p ...
		jmp	sub_1000A0E5
sub_1000C1B7	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000C1BC	proc near		; CODE XREF: legacy_Shutdown+9p
		cmp	dword_10015060,	0
		jz	locret_1000C274
		call	sub_1000C754
		jmp	short loc_1000C1E5
; ---------------------------------------------------------------------------

loc_1000C1D0:				; CODE XREF: sub_1000C1BC+32j
		mov	eax, [eax+10h]
		dec	dword_10015050
		push	ecx
		mov	dword_10015044,	eax
		call	PORT_Free_Util
		pop	ecx

loc_1000C1E5:				; CODE XREF: sub_1000C1BC+12j
		mov	eax, dword_10015044
		mov	ecx, eax
		test	eax, eax
		jnz	short loc_1000C1D0
		push	esi
		xor	esi, esi
		mov	dword_10015050,	esi
		call	sub_1000CBEB
		call	sub_1000C754
		jmp	short loc_1000C219
; ---------------------------------------------------------------------------

loc_1000C205:				; CODE XREF: sub_1000C1BC+66j
		mov	eax, [eax]
		dec	dword_1001504C
		push	ecx
		mov	dword_10015040,	eax
		call	PORT_Free_Util
		pop	ecx

loc_1000C219:				; CODE XREF: sub_1000C1BC+47j
		mov	eax, dword_10015040
		mov	ecx, eax
		test	eax, eax
		jnz	short loc_1000C205
		mov	dword_1001504C,	esi
		call	sub_1000CBEB
		call	sub_1000C754
		jmp	short loc_1000C24A
; ---------------------------------------------------------------------------

loc_1000C236:				; CODE XREF: sub_1000C1BC+97j
		mov	eax, [eax]
		dec	dword_10015048
		push	ecx
		mov	dword_1001503C,	eax
		call	PORT_Free_Util
		pop	ecx

loc_1000C24A:				; CODE XREF: sub_1000C1BC+78j
		mov	eax, dword_1001503C
		mov	ecx, eax
		test	eax, eax
		jnz	short loc_1000C236
		mov	dword_10015048,	esi
		call	sub_1000CBEB
		push	dword_10015060
		call	ds:PR_DestroyLock
		pop	ecx
		mov	dword_10015060,	esi
		pop	esi

locret_1000C274:			; CODE XREF: sub_1000C1BC+7j
		retn
sub_1000C1BC	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000C275	proc near		; CODE XREF: legacy_Shutdown+Ep
		mov	eax, dword_10015054
		push	esi
		mov	esi, ds:PR_DestroyLock
		test	eax, eax
		jz	short loc_1000C290
		push	eax
		call	esi ; PR_DestroyLock
		and	dword_10015054,	0
		pop	ecx

loc_1000C290:				; CODE XREF: sub_1000C275+Ej
		mov	eax, dword_10015058
		test	eax, eax
		jz	short loc_1000C2A4
		push	eax
		call	esi ; PR_DestroyLock
		and	dword_10015058,	0
		pop	ecx

loc_1000C2A4:				; CODE XREF: sub_1000C275+22j
		mov	eax, dword_1001505C
		test	eax, eax
		jz	short loc_1000C2B8
		push	eax
		call	esi ; PR_DestroyLock
		and	dword_1001505C,	0
		pop	ecx

loc_1000C2B8:				; CODE XREF: sub_1000C275+36j
		pop	esi
		retn
sub_1000C275	endp


; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1000C2BA(void	*)
sub_1000C2BA	proc near		; CODE XREF: sub_100069E5+165p
					; DATA XREF: sub_1000455F+C4o

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		cmp	dword ptr [esi+14h], 0
		jz	short loc_1000C2CE
		push	dword ptr [esi+14h] ; void *
		call	sub_1000A0E5
		pop	ecx

loc_1000C2CE:				; CODE XREF: sub_1000C2BA+9j
		lea	eax, [esi+20h]
		push	eax
		push	dword ptr [esi+0Ch]
		call	sub_1000D118
		push	220h		; size_t
		push	0		; int
		push	esi		; void *
		call	memset
		add	esp, 14h
		call	sub_1000C754
		mov	eax, dword_1001504C
		cmp	eax, 0Ah
		jle	short loc_1000C302
		push	esi
		call	PORT_Free_Util
		pop	ecx
		jmp	short loc_1000C315
; ---------------------------------------------------------------------------

loc_1000C302:				; CODE XREF: sub_1000C2BA+3Dj
		inc	eax
		mov	dword_1001504C,	eax
		mov	eax, dword_10015040
		mov	[esi], eax
		mov	dword_10015040,	esi

loc_1000C315:				; CODE XREF: sub_1000C2BA+46j
		pop	esi
		jmp	sub_1000CBEB
sub_1000C2BA	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000C31B	proc near		; CODE XREF: sub_100066A4+8Dp

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		test	esi, esi
		jz	short loc_1000C344
		push	dword_10015058
		call	ds:PR_Lock
		push	dword_10015058
		inc	dword ptr [esi+94h]
		call	ds:PR_Unlock
		pop	ecx
		pop	ecx

loc_1000C344:				; CODE XREF: sub_1000C31B+7j
		mov	eax, esi
		pop	esi
		retn
sub_1000C31B	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_1000C348	proc near		; CODE XREF: sub_10005372+F3p
					; sub_100069E5+55p

var_C		= byte ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		push	edi
		push	800h
		xor	edi, edi
		call	PORT_NewArena_Util
		mov	esi, eax
		pop	ecx
		test	esi, esi
		jz	short loc_1000C393
		lea	eax, [ebp+var_C]
		push	eax
		push	[ebp+arg_4]
		push	esi
		call	sub_10008A72
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_1000C387
		lea	eax, [ebp+var_C]
		push	eax
		push	[ebp+arg_0]
		call	sub_1000C4AD
		pop	ecx
		pop	ecx
		mov	edi, eax

loc_1000C387:				; CODE XREF: sub_1000C348+2Dj
		push	0
		push	esi
		call	PORT_FreeArena_Util
		pop	ecx
		pop	ecx
		mov	eax, edi

loc_1000C393:				; CODE XREF: sub_1000C348+19j
		pop	edi
		pop	esi
		mov	esp, ebp
		pop	ebp
		retn
sub_1000C348	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000C399	proc near		; CODE XREF: sub_10005C3F+D0p
					; sub_100069E5+119p

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 10h
		push	ebx
		push	ebp
		push	esi
		mov	esi, [esp+1Ch+arg_4]
		push	edi
		xor	edi, edi
		mov	ecx, [esi+14h]
		mov	ebx, ecx
		cmp	ecx, 3
		jb	short loc_1000C3F2
		mov	eax, [esi+10h]
		cmp	byte ptr [eax],	2
		jnz	short loc_1000C3F2
		movzx	ebx, byte ptr [eax+1]
		lea	ebp, [ecx-2]
		push	2
		pop	edi
		test	bl, bl
		jns	short loc_1000C3EA
		and	ebx, 7Fh
		mov	edx, ebx
		xor	ebx, ebx
		sub	ebp, edx
		test	ebp, ebp
		jle	short loc_1000C3EA
		test	edx, edx
		jz	short loc_1000C3EA
		mov	esi, eax

loc_1000C3D9:				; CODE XREF: sub_1000C399+4Bj
		movzx	eax, byte ptr [esi+edi]
		shl	ebx, 8
		or	ebx, eax
		inc	edi
		dec	edx
		jnz	short loc_1000C3D9
		mov	esi, [esp+20h+arg_4]

loc_1000C3EA:				; CODE XREF: sub_1000C399+2Bj
					; sub_1000C399+38j ...
		cmp	ebx, ebp
		jz	short loc_1000C3F2
		mov	ebx, ecx
		xor	edi, edi

loc_1000C3F2:				; CODE XREF: sub_1000C399+15j
					; sub_1000C399+1Dj ...
		mov	eax, [esi+8]
		and	[esp+20h+var_C], 0
		add	eax, ecx
		push	eax
		call	PORT_Alloc_Util
		pop	ecx
		mov	ecx, [esi+8]
		mov	ebp, eax
		add	ecx, ebx
		mov	[esp+20h+var_8], ebp
		mov	[esp+20h+var_4], ecx
		test	ebp, ebp
		jz	loc_1000C4A5
		mov	eax, [esi+10h]
		push	ebx		; size_t
		add	eax, edi
		push	eax		; void *
		push	ebp		; void *
		call	memcpy
		push	dword ptr [esi+8] ; size_t
		lea	eax, [ebx+ebp]
		push	dword ptr [esi+4] ; void *
		push	eax		; void *
		call	memcpy
		lea	eax, [esp+38h+var_C]
		push	eax
		push	[esp+3Ch+arg_0]
		call	sub_1000C4AD
		mov	edi, eax
		add	esp, 20h
		test	edi, edi
		jz	short loc_1000C45B
		push	[esp+20h+var_8]
		call	PORT_Free_Util
		pop	ecx
		mov	eax, edi
		jmp	short loc_1000C4A5
; ---------------------------------------------------------------------------

loc_1000C45B:				; CODE XREF: sub_1000C399+B2j
		push	dword ptr [esi+14h] ; size_t
		push	dword ptr [esi+10h] ; void *
		push	[esp+28h+var_8]	; void *
		call	memcpy
		push	dword ptr [esi+8] ; size_t
		mov	eax, [esi+14h]
		push	dword ptr [esi+4] ; void *
		add	eax, [esp+34h+var_8]
		push	eax		; void *
		call	memcpy
		mov	eax, [esi+8]
		add	eax, [esi+14h]
		mov	[esp+38h+var_4], eax
		lea	eax, [esp+38h+var_C]
		push	eax
		push	[esp+3Ch+arg_0]
		call	sub_1000C4AD
		push	[esp+40h+var_8]
		mov	esi, eax
		call	PORT_Free_Util
		add	esp, 24h
		mov	eax, esi

loc_1000C4A5:				; CODE XREF: sub_1000C399+7Bj
					; sub_1000C399+C0j
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 10h
		retn
sub_1000C399	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000C4AD	proc near		; CODE XREF: sub_100050AA+28p
					; sub_10006381+89p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		push	edi
		push	[esp+8+arg_4]
		xor	edi, edi
		push	[esp+0Ch+arg_0]
		call	sub_1000AD1A
		mov	esi, eax
		pop	ecx
		pop	ecx
		test	esi, esi
		jz	short loc_1000C4DF
		push	esi
		push	[esp+0Ch+arg_0]
		call	sub_100093C7
		mov	edi, eax
		pop	ecx
		pop	ecx
		test	edi, edi
		jnz	short loc_1000C4DF
		push	esi		; void *
		call	sub_1000A0E5
		pop	ecx

loc_1000C4DF:				; CODE XREF: sub_1000C4AD+17j
					; sub_1000C4AD+29j
		mov	eax, edi
		pop	edi
		pop	esi
		retn
sub_1000C4AD	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_1000C4E4	proc near		; CODE XREF: sub_100050EB+3Ap
					; sub_10006CA9+27p

var_C		= byte ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	ebx
		push	esi
		xor	ebx, ebx
		push	edi
		xor	edi, edi
		cmp	[ebp+arg_8], ebx
		push	800h
		setnz	bl
		add	ebx, 4
		call	PORT_NewArena_Util
		mov	esi, eax
		pop	ecx
		test	esi, esi
		jz	short loc_1000C53B
		push	ebx
		lea	eax, [ebp+var_C]
		push	eax
		push	esi
		push	[ebp+arg_4]
		call	sub_1000A344
		add	esp, 10h
		test	eax, eax
		jnz	short loc_1000C531
		push	ebx
		push	[ebp+arg_4]
		push	[ebp+arg_0]
		call	sub_1000AE28
		add	esp, 0Ch
		mov	edi, eax

loc_1000C531:				; CODE XREF: sub_1000C4E4+3Aj
		push	0
		push	esi
		call	PORT_FreeArena_Util
		pop	ecx
		pop	ecx

loc_1000C53B:				; CODE XREF: sub_1000C4E4+25j
		mov	eax, edi
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
sub_1000C4E4	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000C544	proc near		; CODE XREF: sub_100069E5+13Ap

var_214		= dword	ptr -214h
var_210		= dword	ptr -210h
var_20C		= dword	ptr -20Ch
var_208		= dword	ptr -208h
var_204		= byte ptr -204h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 214h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+214h+var_4], eax
		mov	eax, [esp+214h+arg_0]
		push	ebx
		push	ebp
		push	esi
		mov	esi, [esp+220h+arg_4]
		xor	ebp, ebp
		push	edi
		mov	[esp+224h+var_208], eax
		mov	edx, [esi+14h]
		mov	ebx, edx
		cmp	edx, 3
		jb	short loc_1000C5BB
		mov	eax, [esi+10h]
		cmp	byte ptr [eax],	2
		jnz	short loc_1000C5BB
		movzx	ebx, byte ptr [eax+1]
		lea	edi, [edx-2]
		push	2
		pop	ebp
		test	bl, bl
		jns	short loc_1000C5B3
		and	ebx, 7Fh
		mov	ecx, ebx
		xor	ebx, ebx
		sub	edi, ecx
		test	edi, edi
		jle	short loc_1000C5B3
		test	ecx, ecx
		jz	short loc_1000C5B3
		mov	edx, eax

loc_1000C5A3:				; CODE XREF: sub_1000C544+6Aj
		movzx	eax, byte ptr [edx+ebp]
		shl	ebx, 8
		or	ebx, eax
		inc	ebp
		dec	ecx
		jnz	short loc_1000C5A3
		mov	edx, [esi+14h]

loc_1000C5B3:				; CODE XREF: sub_1000C544+4Aj
					; sub_1000C544+57j ...
		cmp	ebx, edi
		jz	short loc_1000C5BB
		mov	ebx, edx
		xor	ebp, ebp

loc_1000C5BB:				; CODE XREF: sub_1000C544+34j
					; sub_1000C544+3Cj ...
		mov	ecx, [esi+8]
		and	[esp+224h+var_214], 0
		lea	eax, [ecx+ebx]
		mov	[esp+224h+var_20C], eax
		lea	eax, [ecx+edx]
		cmp	eax, 200h
		jbe	short loc_1000C5DF
		push	eax
		call	PORT_Alloc_Util
		pop	ecx
		mov	edi, eax
		jmp	short loc_1000C5E3
; ---------------------------------------------------------------------------

loc_1000C5DF:				; CODE XREF: sub_1000C544+8Ej
		lea	edi, [esp+224h+var_204]

loc_1000C5E3:				; CODE XREF: sub_1000C544+99j
		mov	[esp+224h+var_210], edi
		test	edi, edi
		jnz	short loc_1000C5F2
		xor	eax, eax
		jmp	loc_1000C678
; ---------------------------------------------------------------------------

loc_1000C5F2:				; CODE XREF: sub_1000C544+A5j
		mov	eax, [esi+10h]
		push	ebx		; size_t
		add	eax, ebp
		push	eax		; void *
		push	edi		; void *
		call	memcpy
		push	dword ptr [esi+8] ; size_t
		lea	eax, [edi+ebx]
		push	dword ptr [esi+4] ; void *
		push	eax		; void *
		call	memcpy
		mov	ebx, [esp+23Ch+var_208]
		lea	eax, [esp+23Ch+var_214]
		push	eax
		push	ebx
		call	sub_1000C691
		mov	edi, eax
		add	esp, 20h
		test	edi, edi
		jnz	short loc_1000C666
		test	ebp, ebp
		jz	short loc_1000C666
		push	dword ptr [esi+14h] ; size_t
		push	dword ptr [esi+10h] ; void *
		push	[esp+22Ch+var_210] ; void *
		call	memcpy
		push	dword ptr [esi+8] ; size_t
		mov	eax, [esi+14h]
		push	dword ptr [esi+4] ; void *
		add	eax, [esp+238h+var_210]
		push	eax		; void *
		call	memcpy
		mov	eax, [esi+8]
		add	eax, [esi+14h]
		mov	[esp+23Ch+var_20C], eax
		lea	eax, [esp+23Ch+var_214]
		push	eax
		push	ebx
		call	sub_1000C691
		add	esp, 20h
		mov	edi, eax

loc_1000C666:				; CODE XREF: sub_1000C544+E0j
					; sub_1000C544+E4j
		lea	eax, [esp+224h+var_204]
		push	eax
		push	[esp+228h+var_210]
		call	sub_1000D118
		pop	ecx
		pop	ecx
		mov	eax, edi

loc_1000C678:				; CODE XREF: sub_1000C544+A9j
		mov	ecx, [esp+224h+var_4]
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 214h
		retn
sub_1000C544	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000C691	proc near		; CODE XREF: sub_1000455F+BCp
					; sub_1000C544+D4p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		push	edi
		push	[esp+8+arg_4]
		xor	edi, edi
		push	[esp+0Ch+arg_0]
		call	sub_1000AD1A
		mov	esi, eax
		pop	ecx
		pop	ecx
		test	esi, esi
		jz	short loc_1000C6D6
		lea	eax, [esi+14h]
		push	eax
		call	sub_1000CED2
		pop	ecx
		test	eax, eax
		jz	short loc_1000C6CF
		push	[esp+8+arg_4]
		push	esi
		push	[esp+10h+arg_0]
		call	sub_10009BBF
		mov	edi, eax
		add	esp, 0Ch
		test	edi, edi
		jnz	short loc_1000C6D6

loc_1000C6CF:				; CODE XREF: sub_1000C691+25j
		push	esi		; void *
		call	sub_1000A0E5
		pop	ecx

loc_1000C6D6:				; CODE XREF: sub_1000C691+17j
					; sub_1000C691+3Cj
		mov	eax, edi
		pop	edi
		pop	esi
		retn
sub_1000C691	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000C6DB	proc near		; CODE XREF: sub_1000C81F+61p
					; sub_1000C81F+95p

arg_0		= dword	ptr  4

		push	[esp+arg_0]
		call	sub_1000B172
		pop	ecx
		test	eax, eax
		jnz	short loc_1000C6EA
		retn
; ---------------------------------------------------------------------------

loc_1000C6EA:				; CODE XREF: sub_1000C6DB+Cj
		push	esi
		mov	esi, [eax+4]
		push	eax		; void *
		call	sub_1000A0E5
		pop	ecx
		mov	eax, esi
		pop	esi
		retn
sub_1000C6DB	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000C6F9	proc near		; CODE XREF: legacy_Open+2Dp
		cmp	dword_10015060,	0
		push	esi
		mov	esi, ds:PR_NewLock
		jnz	short loc_1000C719
		call	esi ; PR_NewLock
		mov	dword_10015060,	eax
		test	eax, eax
		jnz	short loc_1000C719

loc_1000C714:				; CODE XREF: sub_1000C6F9+32j
					; sub_1000C6F9+46j
		or	eax, 0FFFFFFFFh
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1000C719:				; CODE XREF: sub_1000C6F9+Ej
					; sub_1000C6F9+19j
		cmp	dword_10015058,	0
		jnz	short loc_1000C72D
		call	esi ; PR_NewLock
		mov	dword_10015058,	eax
		test	eax, eax
		jz	short loc_1000C714

loc_1000C72D:				; CODE XREF: sub_1000C6F9+27j
		cmp	dword_1001505C,	0
		jnz	short loc_1000C741
		call	esi ; PR_NewLock
		mov	dword_1001505C,	eax
		test	eax, eax
		jz	short loc_1000C714

loc_1000C741:				; CODE XREF: sub_1000C6F9+3Bj
		xor	eax, eax
		pop	esi
		retn
sub_1000C6F9	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000C745	proc near		; CODE XREF: sub_10009FF1+1Dp
					; __fseeki64+7p ...

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		push	dword ptr [eax+4]
		call	ds:PR_EnterMonitor
		pop	ecx
		retn
sub_1000C745	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000C754	proc near		; CODE XREF: sub_10009BBF+1p
					; sub_10009FF1+AFp ...
		push	dword_10015060
		call	ds:PR_Lock
		pop	ecx
		retn
sub_1000C754	endp


; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1000C762(int,	char *)
sub_1000C762	proc near		; CODE XREF: sub_100069E5+A2p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		push	edi
		push	[esp+8+arg_4]	; char *
		push	[esp+0Ch+arg_0]	; int
		call	sub_1000AFC5
		mov	esi, eax
		pop	ecx
		pop	ecx
		test	esi, esi
		jz	short loc_1000C793
		lea	ecx, [esi+14h]
		push	ecx
		push	[esp+0Ch+arg_0]
		call	sub_1000C79A
		push	esi		; void *
		mov	edi, eax
		call	sub_1000A0E5
		add	esp, 0Ch
		jmp	short loc_1000C795
; ---------------------------------------------------------------------------

loc_1000C793:				; CODE XREF: sub_1000C762+15j
		xor	edi, edi

loc_1000C795:				; CODE XREF: sub_1000C762+2Fj
		mov	eax, edi
		pop	edi
		pop	esi
		retn
sub_1000C762	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000C79A	proc near		; CODE XREF: sub_100069E5+DCp
					; sub_100069E5+1BFp ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	[esp+arg_4]
		push	[esp+4+arg_0]
		call	sub_1000B0A1
		pop	ecx
		pop	ecx
		test	eax, eax
		jnz	short loc_1000C7B1
		or	eax, 0FFFFFFFFh
		retn
; ---------------------------------------------------------------------------

loc_1000C7B1:				; CODE XREF: sub_1000C79A+11j
		push	esi
		mov	esi, [eax+1Ch]
		push	eax		; void *
		call	sub_1000A0E5
		pop	ecx
		mov	eax, esi
		pop	esi
		retn
sub_1000C79A	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_1000C7C0	proc near		; CODE XREF: sub_10007703+6Ap

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch

		push	ebp
		mov	ebp, esp
		push	esi
		mov	esi, [ebp+arg_0]
		push	esi
		call	sub_1000BE93
		call	ds:PR_NewMonitor
		push	[ebp+arg_14]
		and	dword ptr [esi+8], 0
		push	[ebp+arg_10]
		mov	[esi+4], eax
		push	[ebp+arg_C]
		push	[ebp+arg_8]
		push	[ebp+arg_4]
		push	esi
		call	sub_1000C81F
		add	esp, 1Ch
		test	eax, eax
		jz	short loc_1000C81A
		cmp	dword ptr [esi+4], 0
		jz	short loc_1000C80A
		push	dword ptr [esi+4]
		call	ds:PR_DestroyMonitor
		and	dword ptr [esi+4], 0
		pop	ecx

loc_1000C80A:				; CODE XREF: sub_1000C7C0+3Aj
		push	0FFFFE012h
		call	PORT_SetError_Util
		pop	ecx
		or	eax, 0FFFFFFFFh
		jmp	short loc_1000C81C
; ---------------------------------------------------------------------------

loc_1000C81A:				; CODE XREF: sub_1000C7C0+34j
		xor	eax, eax

loc_1000C81C:				; CODE XREF: sub_1000C7C0+58j
		pop	esi
		pop	ebp
		retn
sub_1000C7C0	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000C81F	proc near		; CODE XREF: sub_1000C7C0+2Ap

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		push	ebx
		push	8
		push	[esp+8+arg_14]
		call	[esp+0Ch+arg_10]
		mov	ebx, eax
		pop	ecx
		pop	ecx
		test	ebx, ebx
		jnz	short loc_1000C837
		or	eax, 0FFFFFFFFh
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1000C837:				; CODE XREF: sub_1000C81F+11j
		push	ebp
		mov	ebp, [esp+8+arg_8]
		push	esi
		push	edi
		mov	edi, [esp+10h+arg_4]
		neg	edi
		push	0
		sbb	edi, edi
		and	edi, 0FFFFFFFEh
		add	edi, 2
		test	ebp, ebp
		jz	short loc_1000C864
		push	edi
		push	offset aCert	; "cert"
		push	[esp+1Ch+arg_C]
		push	ebp
		call	sub_10007A75
		jmp	short loc_1000C872
; ---------------------------------------------------------------------------

loc_1000C864:				; CODE XREF: sub_1000C81F+31j
		push	1		; int
		push	180h		; int
		push	edi		; int
		push	ebx		; char *
		call	sub_100015E5

loc_1000C872:				; CODE XREF: sub_1000C81F+43j
		mov	esi, [esp+24h+arg_0]
		add	esp, 14h
		mov	[esi], eax
		test	eax, eax
		jz	short loc_1000C894

loc_1000C87F:				; CODE XREF: sub_1000C81F+E5j
		push	esi
		call	sub_1000C6DB
		pop	ecx
		cmp	eax, 8
		jz	short loc_1000C8BF
		test	ebp, ebp
		jz	short loc_1000C90D
		cmp	eax, 7
		jmp	short loc_1000C90B
; ---------------------------------------------------------------------------

loc_1000C894:				; CODE XREF: sub_1000C81F+5Ej
		cmp	[esp+10h+arg_4], 0
		jz	short loc_1000C8CD
		push	7
		push	[esp+14h+arg_14]
		push	[esp+18h+arg_10]
		call	sub_1000CEF4
		add	esp, 0Ch
		mov	[esi], eax
		test	eax, eax
		jz	short loc_1000C90D
		push	esi
		call	sub_1000C6DB
		pop	ecx
		cmp	eax, 7
		jnz	short loc_1000C90D

loc_1000C8BF:				; CODE XREF: sub_1000C81F+6Aj
					; sub_1000C81F:loc_1000C90Bj
		push	ebx
		call	PORT_Free_Util
		xor	eax, eax

loc_1000C8C7:				; CODE XREF: sub_1000C81F+112j
		pop	ecx
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1000C8CD:				; CODE XREF: sub_1000C81F+7Aj
		push	[esp+10h+arg_14] ; int
		push	[esp+14h+arg_10] ; int
		push	esi		; int
		push	ebx		; char *
		push	[esp+20h+arg_C]	; int
		push	ebp		; int
		call	sub_1000CF2B
		add	esp, 18h
		cmp	eax, 0FFFFFFFEh
		jnz	short loc_1000C909
		push	0
		push	edi
		push	offset aCert	; "cert"
		push	[esp+1Ch+arg_C]
		push	ebp
		call	sub_10007A75
		add	esp, 14h
		mov	[esi], eax
		test	eax, eax
		jz	short loc_1000C90D
		jmp	loc_1000C87F
; ---------------------------------------------------------------------------

loc_1000C909:				; CODE XREF: sub_1000C81F+C8j
		test	eax, eax

loc_1000C90B:				; CODE XREF: sub_1000C81F+73j
		jz	short loc_1000C8BF

loc_1000C90D:				; CODE XREF: sub_1000C81F+6Ej
					; sub_1000C81F+92j ...
		push	0FFFFE012h
		call	PORT_SetError_Util
		cmp	dword ptr [esi], 0
		pop	ecx
		jz	short loc_1000C928
		push	dword ptr [esi]
		call	sub_1000BE39
		and	dword ptr [esi], 0
		pop	ecx

loc_1000C928:				; CODE XREF: sub_1000C81F+FCj
		push	ebx
		call	PORT_Free_Util
		or	eax, 0FFFFFFFFh
		jmp	short loc_1000C8C7
sub_1000C81F	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_1000C933(int,	char *)
sub_1000C933	proc near		; CODE XREF: sub_1000513A+29p
					; sub_10005372+1BFp ...

var_18		= dword	ptr -18h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		push	ebx
		push	esi
		push	edi
		mov	esi, 800h
		push	esi
		call	PORT_NewArena_Util
		mov	ebx, eax
		pop	ecx
		test	ebx, ebx
		jnz	short loc_1000C95A
		push	0FFFFE013h
		call	PORT_SetError_Util
		jmp	short loc_1000C9A1
; ---------------------------------------------------------------------------

loc_1000C95A:				; CODE XREF: sub_1000C933+19j
		push	esi
		call	PORT_NewArena_Util
		mov	edi, eax
		pop	ecx
		test	edi, edi
		jnz	short loc_1000C973
		push	0FFFFE013h
		call	PORT_SetError_Util
		jmp	short loc_1000C997
; ---------------------------------------------------------------------------

loc_1000C973:				; CODE XREF: sub_1000C933+32j
		push	38h
		push	ebx
		call	PORT_ArenaAlloc_Util
		mov	esi, eax
		pop	ecx
		pop	ecx
		test	esi, esi
		jnz	short loc_1000C9AB
		push	0FFFFE013h

loc_1000C988:				; CODE XREF: sub_1000C933+BAj
		call	PORT_SetError_Util
		pop	ecx

loc_1000C98E:				; CODE XREF: sub_1000C933+93j
					; sub_1000C933+ADj ...
		push	0
		push	edi
		call	PORT_FreeArena_Util
		pop	ecx

loc_1000C997:				; CODE XREF: sub_1000C933+3Ej
		pop	ecx
		push	0
		push	ebx
		call	PORT_FreeArena_Util
		pop	ecx

loc_1000C9A1:				; CODE XREF: sub_1000C933+25j
		xor	eax, eax

loc_1000C9A3:				; CODE XREF: sub_1000C933+DAj
		pop	ecx
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_1000C9AB:				; CODE XREF: sub_1000C933+4Ej
		lea	eax, [ebp+var_18]
		mov	[esi+0Ch], ebx
		push	eax		; int
		push	edi		; int
		push	[ebp+arg_4]	; char *
		mov	dword ptr [esi], 6
		call	sub_1000A514
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_1000C98E
		push	edi
		lea	eax, [ebp+var_C]
		push	eax
		lea	eax, [ebp+var_18]
		push	eax
		push	esi
		push	[ebp+arg_0]
		call	sub_1000AEF9
		add	esp, 14h
		cmp	eax, 0FFFFFFFFh
		jz	short loc_1000C98E
		cmp	[ebp+var_4], 6
		jnb	short loc_1000C9EF
		push	0FFFFE012h
		jmp	short loc_1000C988
; ---------------------------------------------------------------------------

loc_1000C9EF:				; CODE XREF: sub_1000C933+B3j
		push	[ebp+arg_4]	; char *
		lea	eax, [ebp+var_C]
		push	eax		; int
		push	esi		; int
		call	sub_100096A3
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_1000C98E
		push	eax
		push	edi
		call	PORT_FreeArena_Util
		pop	ecx
		mov	eax, esi
		jmp	short loc_1000C9A3
sub_1000C933	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_1000CA0F	proc near		; CODE XREF: sub_10005372+1D2p
					; sub_100059D4+F9p
		push	ebp
		mov	ebp, esp
		pop	ebp
		jmp	sub_1000CCF8
sub_1000CA0F	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_1000CA18	proc near		; CODE XREF: sub_10006CA9+81p
					; sub_10006CA9+8Ep ...

var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		lea	eax, [ebp+var_8]
		push	ebx
		mov	ebx, [ebp+arg_0]
		push	esi
		push	edi
		push	3
		push	eax
		lea	eax, [ebp+var_10]
		xor	edi, edi
		push	eax
		push	dword ptr [ebx]
		call	sub_1000BEDE
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		jz	short loc_1000CA45
		or	eax, 0FFFFFFFFh
		jmp	short loc_1000CAAA
; ---------------------------------------------------------------------------

loc_1000CA45:				; CODE XREF: sub_1000CA18+26j
					; sub_1000CA18+86j
		mov	ecx, [ebp+var_8]
		mov	edx, [ebp+arg_4]
		cmp	[ecx+1], dl
		jnz	short loc_1000CA88
		mov	eax, [ebp+var_4]
		and	[ebp+var_28], 0
		push	[ebp+arg_C]
		and	[ebp+var_1C], 0
		mov	[ebp+var_20], eax
		mov	eax, [ebp+var_C]
		dec	eax
		mov	[ebp+var_24], ecx
		mov	[ebp+var_14], eax
		mov	eax, [ebp+var_10]
		inc	eax
		mov	[ebp+var_18], eax
		lea	eax, [ebp+var_1C]
		push	edx
		push	eax
		lea	eax, [ebp+var_28]
		push	eax
		call	[ebp+arg_8]
		mov	edi, eax
		add	esp, 10h
		test	edi, edi
		jnz	short loc_1000CA88
		inc	esi

loc_1000CA88:				; CODE XREF: sub_1000CA18+36j
					; sub_1000CA18+6Dj
		push	7
		lea	eax, [ebp+var_8]
		push	eax
		lea	eax, [ebp+var_10]
		push	eax
		push	dword ptr [ebx]
		call	sub_1000BEDE
		add	esp, 10h
		test	eax, eax
		jz	short loc_1000CA45
		neg	esi
		sbb	esi, esi
		not	esi
		and	esi, edi
		mov	eax, esi

loc_1000CAAA:				; CODE XREF: sub_1000CA18+2Bj
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
sub_1000CA18	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_1000CAB1	proc near		; CODE XREF: sub_100069E5+21Ep
					; sub_1000B429+2Dp

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		push	edi
		mov	edi, [ebp+arg_0]
		push	edi
		call	sub_1000C745
		mov	eax, [ebp+arg_4]
		mov	[ebp+var_C], eax
		mov	eax, [ebp+arg_8]
		mov	[ebp+var_4], eax
		lea	eax, [ebp+var_C]
		push	eax
		push	offset sub_1000BD8F
		push	1
		push	edi
		mov	[ebp+var_8], edi
		call	sub_1000CA18
		push	edi
		mov	esi, eax
		call	sub_1000CBDC
		add	esp, 18h
		mov	eax, esi
		pop	edi
		pop	esi
		mov	esp, ebp
		pop	ebp
		retn
sub_1000CAB1	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_1000CAF5(int,	char *,	int, int)
sub_1000CAF5	proc near		; CODE XREF: sub_100069E5+BEp

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	ebx
		push	esi
		push	edi
		push	[ebp+arg_4]	; char *
		xor	esi, esi
		push	[ebp+arg_0]	; int
		call	sub_1000AFC5
		mov	edi, eax
		pop	ecx
		pop	ecx
		test	edi, edi
		jz	short loc_1000CB15
		lea	eax, [edi+14h]
		jmp	short loc_1000CB2B
; ---------------------------------------------------------------------------

loc_1000CB15:				; CODE XREF: sub_1000CAF5+19j
		push	[ebp+arg_4]	; char *
		push	[ebp+arg_0]	; int
		call	sub_1000C933
		mov	esi, eax
		pop	ecx
		pop	ecx
		test	esi, esi
		jz	short loc_1000CB45
		lea	eax, [esi+14h]

loc_1000CB2B:				; CODE XREF: sub_1000CAF5+1Ej
		test	eax, eax
		jz	short loc_1000CB45
		push	[ebp+arg_C]
		push	[ebp+arg_8]
		push	eax
		push	[ebp+arg_0]
		call	sub_1000CB65
		add	esp, 10h
		mov	ebx, eax
		jmp	short loc_1000CB48
; ---------------------------------------------------------------------------

loc_1000CB45:				; CODE XREF: sub_1000CAF5+31j
					; sub_1000CAF5+38j
		or	ebx, 0FFFFFFFFh

loc_1000CB48:				; CODE XREF: sub_1000CAF5+4Ej
		test	edi, edi
		jz	short loc_1000CB53
		push	edi		; void *
		call	sub_1000A0E5
		pop	ecx

loc_1000CB53:				; CODE XREF: sub_1000CAF5+55j
		test	esi, esi
		jz	short loc_1000CB5E
		push	esi		; void *
		call	sub_1000A0E5
		pop	ecx

loc_1000CB5E:				; CODE XREF: sub_1000CAF5+60j
		pop	edi
		pop	esi
		mov	eax, ebx
		pop	ebx
		pop	ebp
		retn
sub_1000CAF5	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000CB65	proc near		; CODE XREF: sub_100069E5+F8p
					; sub_100069E5+1DBp ...

var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ecx
		push	esi
		push	edi
		push	[esp+0Ch+arg_4]
		xor	esi, esi
		push	[esp+10h+arg_0]
		call	sub_1000B0A1
		mov	edi, eax
		pop	ecx
		pop	ecx
		test	edi, edi
		jnz	short loc_1000CB84
		or	eax, 0FFFFFFFFh
		jmp	short loc_1000CBD8
; ---------------------------------------------------------------------------

loc_1000CB84:				; CODE XREF: sub_1000CB65+18j
		push	ebx
		mov	ebx, esi
		cmp	[edi+1Ch], esi
		jbe	short loc_1000CBCE
		push	ebp
		mov	ebp, esi

loc_1000CB8F:				; CODE XREF: sub_1000CB65+66j
		mov	eax, [edi+24h]
		add	eax, ebp
		push	eax
		push	[esp+18h+arg_0]
		call	sub_1000C4AD
		mov	[esp+1Ch+var_4], eax
		pop	ecx
		pop	ecx
		test	eax, eax
		jz	short loc_1000CBC4
		push	[esp+14h+arg_C]
		push	eax
		call	[esp+1Ch+arg_8]
		push	[esp+1Ch+var_4]	; void *
		mov	esi, eax
		call	sub_1000C1A9
		add	esp, 0Ch
		cmp	esi, 0FFFFFFFFh
		jz	short loc_1000CBCD

loc_1000CBC4:				; CODE XREF: sub_1000CB65+41j
		inc	ebx
		add	ebp, 0Ch
		cmp	ebx, [edi+1Ch]
		jb	short loc_1000CB8F

loc_1000CBCD:				; CODE XREF: sub_1000CB65+5Dj
		pop	ebp

loc_1000CBCE:				; CODE XREF: sub_1000CB65+25j
		push	edi		; void *
		call	sub_1000A0E5
		pop	ecx
		mov	eax, esi
		pop	ebx

loc_1000CBD8:				; CODE XREF: sub_1000CB65+1Dj
		pop	edi
		pop	esi
		pop	ecx
		retn
sub_1000CB65	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000CBDC	proc near		; CODE XREF: sub_10009FF1+EBp
					; __fseeki64+22p ...

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		push	dword ptr [eax+4]
		call	ds:PR_ExitMonitor
		pop	ecx
		retn
sub_1000CBDC	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000CBEB	proc near		; CODE XREF: sub_10009BBF:loc_10009BDCp
					; sub_10009FF1:loc_1000A0CBp ...
		push	dword_10015060
		call	ds:PR_Unlock
		pop	ecx
		retn
sub_1000CBEB	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_1000CBF9(int,	int, int, char *, int)
sub_1000CBF9	proc near		; CODE XREF: sub_1000B752+E9p
					; sub_1000BF42+4j

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		push	ebx
		push	esi
		push	edi
		xor	ebx, ebx
		or	edi, 0FFFFFFFFh
		cmp	[ebp+arg_10], ebx
		setnz	bl
		add	ebx, 4
		push	ebx
		push	[ebp+arg_8]
		push	[ebp+arg_0]
		call	sub_10009DE0
		push	0		; int
		push	ebx		; int
		push	[ebp+arg_C]	; char *
		push	[ebp+arg_4]	; int
		call	sub_1000A8D3
		mov	esi, eax
		add	esp, 1Ch
		test	esi, esi
		jz	short loc_1000CC47
		push	[ebp+arg_8]
		push	esi
		push	[ebp+arg_0]
		call	sub_1000BA9F
		push	esi		; void *
		mov	edi, eax
		call	sub_1000A0E5
		add	esp, 10h

loc_1000CC47:				; CODE XREF: sub_1000CBF9+35j
		mov	eax, edi
		pop	edi
		pop	esi
		pop	ebx
		pop	ebp
		retn
sub_1000CBF9	endp


; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1000CC4E(int,	int, char *, int)
sub_1000CC4E	proc near		; CODE XREF: sub_1000B752+16Bp
					; __fseeki64+18p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebx
		mov	ebx, [esp+4+arg_8]
		push	ebp
		push	esi
		push	edi
		mov	edi, [esp+10h+arg_4]
		test	ebx, ebx
		jz	short loc_1000CC96
		push	ebx		; char *
		push	[esp+14h+arg_0]	; int
		call	sub_1000AFC5
		mov	ebp, eax
		pop	ecx
		pop	ecx
		test	ebp, ebp
		jz	short loc_1000CC96
		lea	ecx, [ebp+14h]
		push	ecx
		lea	ecx, [edi+38h]
		push	ecx
		call	SECITEM_CompareItem_Util
		mov	esi, eax
		neg	esi
		push	ebp		; void *
		sbb	esi, esi
		call	sub_1000A0E5
		add	esp, 0Ch
		and	esi, 1
		jz	short loc_1000CC96

loc_1000CC91:				; CODE XREF: sub_1000CC4E+64j
		or	esi, 0FFFFFFFFh
		jmp	short loc_1000CCF1
; ---------------------------------------------------------------------------

loc_1000CC96:				; CODE XREF: sub_1000CC4E+Ej
					; sub_1000CC4E+20j ...
		push	[esp+10h+arg_C]	; int
		mov	esi, [edi+88h]
		push	ebx		; char *
		push	edi		; int
		push	[esp+1Ch+arg_0]	; int
		call	sub_10008F76
		mov	ebx, eax
		add	esp, 10h
		test	ebx, ebx
		jz	short loc_1000CC91
		lea	ebp, [edi+98h]
		push	ebp
		push	esi
		call	sub_1000D118
		xor	esi, esi
		pop	ecx
		pop	ecx
		cmp	[ebx+2Ch], esi
		jz	short loc_1000CCDD
		push	0C8h		; int
		push	ebp		; void *
		push	dword ptr [ebx+2Ch] ; char *
		call	sub_1000D0B4
		add	esp, 0Ch
		jmp	short loc_1000CCDF
; ---------------------------------------------------------------------------

loc_1000CCDD:				; CODE XREF: sub_1000CC4E+7Aj
		mov	eax, esi

loc_1000CCDF:				; CODE XREF: sub_1000CC4E+8Dj
		lea	ecx, [ebx+14h]
		mov	[edi+88h], eax
		mov	[edi+90h], ecx
		mov	[edi+6Ch], ebx

loc_1000CCF1:				; CODE XREF: sub_1000CC4E+46j
		pop	edi
		mov	eax, esi
		pop	esi
		pop	ebp
		pop	ebx
		retn
sub_1000CC4E	endp


; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1000CCF8(int,	char *,	int, int, int)
sub_1000CCF8	proc near		; CODE XREF: sub_1000B752+25Fp
					; sub_1000CA0F+4j

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	ebx
		push	esi
		mov	esi, [esp+8+arg_0]
		push	edi
		mov	edi, [esp+0Ch+arg_4]
		push	edi		; char *
		push	esi		; int
		call	sub_1000C933
		mov	ebx, eax
		pop	ecx
		pop	ecx
		test	ebx, ebx
		jz	short loc_1000CD3A
		push	ebp
		lea	ebp, [ebx+14h]
		push	ebp
		push	[esp+14h+arg_8]
		call	SECITEM_ItemsAreEqual_Util
		pop	ecx
		pop	ecx
		test	eax, eax
		jnz	short loc_1000CD32
		push	eax		; int
		push	edi		; char *
		push	ebp		; int
		push	esi		; int
		call	sub_1000CDAA
		add	esp, 10h

loc_1000CD32:				; CODE XREF: sub_1000CCF8+2Cj
		push	ebx		; void *
		call	sub_1000A0E5
		pop	ecx
		pop	ebp

loc_1000CD3A:				; CODE XREF: sub_1000CCF8+18j
		push	0		; int
		push	[esp+10h+arg_10] ; int
		push	[esp+14h+arg_C]	; int
		push	[esp+18h+arg_8]	; int
		push	edi		; char *
		call	sub_1000AA3D
		mov	ebx, eax
		add	esp, 14h
		test	ebx, ebx
		jnz	short loc_1000CD5C
		or	edi, 0FFFFFFFFh
		jmp	short loc_1000CDA4
; ---------------------------------------------------------------------------

loc_1000CD5C:				; CODE XREF: sub_1000CCF8+5Dj
		push	esi
		call	sub_1000C745
		push	edi		; char *
		push	esi		; int
		call	sub_10009F2D
		push	1		; int
		push	edi		; char *
		push	[esp+20h+arg_8]	; int
		push	esi		; int
		call	sub_1000CDAA
		mov	edi, eax
		add	esp, 1Ch
		test	edi, edi
		jz	short loc_1000CD87
		push	esi
		call	sub_1000CBDC
		jmp	short loc_1000CD9C
; ---------------------------------------------------------------------------

loc_1000CD87:				; CODE XREF: sub_1000CCF8+85j
		push	ebx
		push	esi
		call	sub_1000BC04
		pop	ecx
		pop	ecx
		push	esi
		mov	edi, eax
		call	sub_1000CBDC
		test	edi, edi
		jnz	short $+2

loc_1000CD9C:				; CODE XREF: sub_1000CCF8+8Dj
					; sub_1000CCF8+A2j
		pop	ecx
		push	ebx		; void *
		call	sub_1000A0E5
		pop	ecx

loc_1000CDA4:				; CODE XREF: sub_1000CCF8+62j
		mov	eax, edi
		pop	edi
		pop	esi
		pop	ebx
		retn
sub_1000CCF8	endp


; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1000CDAA(int,	int, char *, int)
sub_1000CDAA	proc near		; CODE XREF: sub_1000CCF8+32p
					; sub_1000CCF8+79p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebx
		push	edi
		or	edi, 0FFFFFFFFh
		cmp	[esp+8+arg_8], 0
		mov	ebx, edi
		jz	loc_1000CECD
		push	[esp+8+arg_8]
		call	sub_10008631
		mov	[esp+0Ch+arg_8], eax
		pop	ecx
		test	eax, eax
		jnz	short loc_1000CDD5
		mov	eax, edi
		jmp	loc_1000CECF
; ---------------------------------------------------------------------------

loc_1000CDD5:				; CODE XREF: sub_1000CDAA+22j
		push	esi
		push	[esp+0Ch+arg_4]
		push	[esp+10h+arg_0]
		call	sub_1000B0A1
		mov	esi, eax
		pop	ecx
		pop	ecx
		test	esi, esi
		jz	loc_1000CEBE
		push	ebp
		xor	ebp, ebp
		cmp	[esi+30h], ebp
		jle	short loc_1000CE18
		mov	edi, [esp+10h+arg_8]

loc_1000CDFB:				; CODE XREF: sub_1000CDAA+69j
		mov	eax, [esi+2Ch]
		push	edi		; char *
		push	dword ptr [eax+ebp*4] ;	char *
		call	strcmp
		pop	ecx
		pop	ecx
		test	eax, eax
		jnz	short loc_1000CE0F
		mov	ebx, ebp

loc_1000CE0F:				; CODE XREF: sub_1000CDAA+61j
		inc	ebp
		cmp	ebp, [esi+30h]
		jl	short loc_1000CDFB
		or	edi, 0FFFFFFFFh

loc_1000CE18:				; CODE XREF: sub_1000CDAA+4Bj
		cmp	[esp+10h+arg_C], 0
		pop	ebp
		jnz	short loc_1000CE42
		cmp	ebx, edi
		jnz	short loc_1000CE2B

loc_1000CE24:				; CODE XREF: sub_1000CDAA+9Aj
		xor	edi, edi
		jmp	loc_1000CEB7
; ---------------------------------------------------------------------------

loc_1000CE2B:				; CODE XREF: sub_1000CDAA+78j
		dec	dword ptr [esi+30h]
		jmp	short loc_1000CE3B
; ---------------------------------------------------------------------------

loc_1000CE30:				; CODE XREF: sub_1000CDAA+94j
		mov	ecx, [esi+2Ch]
		mov	eax, [ecx+ebx*4+4]
		mov	[ecx+ebx*4], eax
		inc	ebx

loc_1000CE3B:				; CODE XREF: sub_1000CDAA+84j
		cmp	ebx, [esi+30h]
		jl	short loc_1000CE30
		jmp	short loc_1000CE9B
; ---------------------------------------------------------------------------

loc_1000CE42:				; CODE XREF: sub_1000CDAA+74j
		cmp	ebx, edi
		jnz	short loc_1000CE24
		mov	eax, [esi+30h]
		lea	eax, ds:4[eax*4]
		push	eax
		push	dword ptr [esi+0Ch]
		call	PORT_ArenaAlloc_Util
		mov	ebx, eax
		pop	ecx
		pop	ecx
		test	ebx, ebx
		jz	short loc_1000CEB7
		xor	ecx, ecx
		cmp	[esi+30h], ecx
		jle	short loc_1000CE77

loc_1000CE68:				; CODE XREF: sub_1000CDAA+CBj
		mov	eax, [esi+2Ch]
		mov	eax, [eax+ecx*4]
		mov	[ebx+ecx*4], eax
		inc	ecx
		cmp	ecx, [esi+30h]
		jl	short loc_1000CE68

loc_1000CE77:				; CODE XREF: sub_1000CDAA+BCj
		push	[esp+0Ch+arg_8]
		push	dword ptr [esi+0Ch]
		call	PORT_ArenaStrdup_Util
		pop	ecx
		pop	ecx
		mov	ecx, [esi+30h]
		mov	[ebx+ecx*4], eax
		mov	eax, [esi+30h]
		cmp	dword ptr [ebx+eax*4], 0
		jz	short loc_1000CEB7
		inc	eax
		mov	[esi+2Ch], ebx
		mov	[esi+30h], eax

loc_1000CE9B:				; CODE XREF: sub_1000CDAA+96j
		push	[esp+0Ch+arg_4]
		push	[esp+10h+arg_0]
		call	sub_10009F8F
		push	esi
		push	[esp+18h+arg_0]
		call	sub_1000BC7E
		add	esp, 10h
		mov	edi, eax

loc_1000CEB7:				; CODE XREF: sub_1000CDAA+7Cj
					; sub_1000CDAA+B5j ...
		push	esi		; void *
		call	sub_1000A0E5
		pop	ecx

loc_1000CEBE:				; CODE XREF: sub_1000CDAA+3Fj
		push	[esp+0Ch+arg_8]
		call	PORT_Free_Util
		pop	ecx
		mov	eax, edi
		pop	esi
		jmp	short loc_1000CECF
; ---------------------------------------------------------------------------

loc_1000CECD:				; CODE XREF: sub_1000CDAA+Cj
		xor	eax, eax

loc_1000CECF:				; CODE XREF: sub_1000CDAA+26j
					; sub_1000CDAA+121j
		pop	edi
		pop	ebx
		retn
sub_1000CDAA	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000CED2	proc near		; CODE XREF: sub_100069E5+273p
					; sub_1000C691+1Dp

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		test	eax, eax
		jnz	short loc_1000CEDD

loc_1000CEDA:				; CODE XREF: sub_1000CED2+1Cj
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_1000CEDD:				; CODE XREF: sub_1000CED2+6j
		mov	ecx, 800h
		test	[eax], ecx
		jz	short loc_1000CEF0
		test	[eax+4], ecx
		jz	short loc_1000CEF0
		test	[eax+8], ecx
		jnz	short loc_1000CEDA

loc_1000CEF0:				; CODE XREF: sub_1000CED2+12j
					; sub_1000CED2+17j
		xor	eax, eax
		inc	eax
		retn
sub_1000CED2	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000CEF4	proc near		; CODE XREF: sub_1000C81F+86p
					; sub_1000CF2B+CBp ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi
		push	edi
		push	[esp+8+arg_8]
		xor	esi, esi
		push	[esp+0Ch+arg_4]
		call	[esp+10h+arg_0]
		mov	edi, eax
		pop	ecx
		pop	ecx
		test	edi, edi
		jz	short loc_1000CF26
		push	esi		; int
		push	1		; int
		push	180h		; int
		push	esi		; int
		push	edi		; char *
		call	sub_1000E2C0
		push	edi
		mov	esi, eax
		call	PORT_Free_Util
		add	esp, 18h

loc_1000CF26:				; CODE XREF: sub_1000CEF4+16j
		pop	edi
		mov	eax, esi
		pop	esi
		retn
sub_1000CEF4	endp


; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1000CF2B(int,	int, char *, int, int, int)
sub_1000CF2B	proc near		; CODE XREF: sub_1000C81F+BDp

var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		sub	esp, 14h
		push	ebx
		mov	ebx, [esp+18h+arg_0]
		xor	eax, eax
		push	ebp
		inc	eax
		xor	ebp, ebp
		mov	[esp+1Ch+var_14], eax
		push	esi
		test	ebx, ebx
		jz	short loc_1000CF5D
		lea	eax, [esp+20h+var_14]
		push	eax
		push	302h
		push	offset aCert	; "cert"
		push	[esp+2Ch+arg_4]
		push	ebx
		call	sub_10007A75
		jmp	short loc_1000CF72
; ---------------------------------------------------------------------------

loc_1000CF5D:				; CODE XREF: sub_1000CF2B+15j
		push	ebp
		push	eax		; int
		push	180h		; int
		push	302h		; int
		push	[esp+30h+arg_8]	; char *
		call	sub_100015E5

loc_1000CF72:				; CODE XREF: sub_1000CF2B+30j
		mov	esi, [esp+34h+arg_C]
		add	esp, 14h
		mov	[esi], eax
		cmp	eax, ebp
		jnz	short loc_1000CF91
		xor	eax, eax
		cmp	[esp+20h+var_14], 2
		setnz	al
		sub	eax, 2
		jmp	loc_1000D096
; ---------------------------------------------------------------------------

loc_1000CF91:				; CODE XREF: sub_1000CF2B+52j
		push	edi
		push	ebp
		call	sub_1000ACBA
		mov	ebp, eax
		pop	ecx
		test	ebp, ebp
		jnz	short loc_1000CFA7
		or	edi, 0FFFFFFFFh
		jmp	loc_1000D08B
; ---------------------------------------------------------------------------

loc_1000CFA7:				; CODE XREF: sub_1000CF2B+72j
		push	ebp
		push	esi
		call	sub_1000BCF9
		push	ebp		; void *
		mov	edi, eax
		call	sub_1000A0E5
		add	esp, 0Ch
		test	edi, edi
		jnz	loc_1000D08B
		test	ebx, ebx
		jz	short loc_1000CFEA
		push	edi
		push	1		; int
		push	180h		; int
		push	edi		; int
		push	[esp+34h+arg_8]	; char *
		call	sub_100015E5
		add	esp, 14h
		test	eax, eax
		jz	short loc_1000CFEA

loc_1000CFDE:				; CODE XREF: sub_1000CF2B+D5j
		push	eax
		push	esi
		call	sub_1000B752
		jmp	loc_1000D087
; ---------------------------------------------------------------------------

loc_1000CFEA:				; CODE XREF: sub_1000CF2B+98j
					; sub_1000CF2B+B1j
		mov	ebx, [esp+24h+arg_14]
		mov	ebp, [esp+24h+arg_10]
		push	7
		push	ebx
		push	ebp
		call	sub_1000CEF4
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_1000CFDE
		push	6
		push	ebx
		push	ebp
		call	sub_1000CEF4
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_1000D01B
		push	eax
		push	esi
		call	sub_1000B472
		jmp	short loc_1000D087
; ---------------------------------------------------------------------------

loc_1000D01B:				; CODE XREF: sub_1000CF2B+E5j
		push	5
		push	ebx
		push	ebp
		call	sub_1000CEF4
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_1000D02E
		push	eax
		jmp	short loc_1000D081
; ---------------------------------------------------------------------------

loc_1000D02E:				; CODE XREF: sub_1000CF2B+FEj
		push	4
		push	ebx
		push	ebp
		call	sub_1000CEF4
		mov	ebx, eax
		add	esp, 0Ch
		test	ebx, ebx
		jz	short loc_1000D08B
		push	0
		lea	eax, [esp+28h+var_8]
		mov	[esp+28h+var_10], offset aVersion ; "Version"
		push	eax
		lea	eax, [esp+2Ch+var_10]
		mov	[esp+2Ch+var_C], 7
		push	eax
		push	ebx
		call	dword ptr [ebx+0Ch]
		add	esp, 10h
		test	eax, eax
		jnz	short loc_1000D080
		cmp	[esp+24h+var_4], 1
		jnz	short loc_1000D080
		mov	eax, [esp+24h+var_8]
		cmp	byte ptr [eax],	4
		ja	short loc_1000D080
		push	ebx		; void *
		push	esi		; int
		call	sub_1000B353
		jmp	short loc_1000D087
; ---------------------------------------------------------------------------

loc_1000D080:				; CODE XREF: sub_1000CF2B+13Aj
					; sub_1000CF2B+141j ...
		push	ebx

loc_1000D081:				; CODE XREF: sub_1000CF2B+101j
		push	esi
		call	sub_1000B429

loc_1000D087:				; CODE XREF: sub_1000CF2B+BAj
					; sub_1000CF2B+EEj ...
		pop	ecx
		mov	edi, eax
		pop	ecx

loc_1000D08B:				; CODE XREF: sub_1000CF2B+77j
					; sub_1000CF2B+90j ...
		push	dword ptr [esi]
		call	sub_1000745F
		pop	ecx
		mov	eax, edi
		pop	edi

loc_1000D096:				; CODE XREF: sub_1000CF2B+61j
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 14h
		retn
sub_1000CF2B	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000D09D	proc near		; CODE XREF: sub_10008B45+1Bp
					; sub_1000D0E9+Dp

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, [esp+arg_0]
		cmp	eax, [esp+arg_8]
		jg	short loc_1000D0AC
		mov	eax, [esp+arg_4]
		retn
; ---------------------------------------------------------------------------

loc_1000D0AC:				; CODE XREF: sub_1000D09D+8j
		push	eax
		call	PORT_Alloc_Util
		pop	ecx
		retn
sub_1000D09D	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_1000D0B4(char	*, void	*, int)
sub_1000D0B4	proc near		; CODE XREF: sub_100080B1+AEp
					; sub_100090F9+2Ap ...

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	esi
		push	[ebp+arg_0]	; char *
		call	strlen
		inc	eax
		pop	ecx
		cmp	eax, [ebp+arg_8]
		jg	short loc_1000D0D9
		mov	esi, [ebp+arg_4]
		push	eax		; size_t
		push	[ebp+arg_0]	; void *
		push	esi		; void *
		call	memcpy
		add	esp, 0Ch
		jmp	short loc_1000D0E4
; ---------------------------------------------------------------------------

loc_1000D0D9:				; CODE XREF: sub_1000D0B4+11j
		push	[ebp+arg_0]
		call	PORT_Strdup_Util
		pop	ecx
		mov	esi, eax

loc_1000D0E4:				; CODE XREF: sub_1000D0B4+23j
		mov	eax, esi
		pop	esi
		pop	ebp
		retn
sub_1000D0B4	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_1000D0E9(void	*, size_t, int,	int)
sub_1000D0E9	proc near		; CODE XREF: sub_10008196+178p
					; sub_1000832A+14Dp ...

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	esi
		push	[ebp+arg_C]
		push	[ebp+arg_8]
		push	[ebp+arg_4]
		call	sub_1000D09D
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		jz	short loc_1000D113
		push	[ebp+arg_4]	; size_t
		push	[ebp+arg_0]	; void *
		push	esi		; void *
		call	memcpy
		add	esp, 0Ch

loc_1000D113:				; CODE XREF: sub_1000D0E9+19j
		mov	eax, esi
		pop	esi
		pop	ebp
		retn
sub_1000D0E9	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000D118	proc near		; CODE XREF: sub_100090F9+16p
					; sub_100090F9+50p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		test	eax, eax
		jz	short locret_1000D12D
		cmp	eax, [esp+arg_4]
		jz	short locret_1000D12D
		push	eax
		call	PORT_Free_Util
		pop	ecx

locret_1000D12D:			; CODE XREF: sub_1000D118+6j
					; sub_1000D118+Cj
		retn
sub_1000D118	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000D12E	proc near		; DATA XREF: sub_1000B429+20o

arg_0		= dword	ptr  4
arg_8		= dword	ptr  0Ch

		push	esi
		push	edi
		mov	edi, [esp+8+arg_0]
		cmp	dword ptr [edi+8Ch], 0
		mov	esi, [edi+6Ch]
		jz	short loc_1000D153
		test	byte ptr [esi+14h], 40h
		jz	short loc_1000D153
		cmp	dword ptr [esi+18h], 0
		jnz	short loc_1000D153
		mov	dword ptr [esi+18h], 40h

loc_1000D153:				; CODE XREF: sub_1000D12E+10j
					; sub_1000D12E+16j ...
		mov	eax, [edi+6Ch]
		push	offset aServerCert ; "Server-Cert"
		push	dword ptr [eax+2Ch] ; char *
		call	strcmp
		pop	ecx
		pop	ecx
		test	eax, eax
		jnz	short loc_1000D16D
		or	dword ptr [esi+14h], 40h

loc_1000D16D:				; CODE XREF: sub_1000D12E+39j
		mov	ecx, [edi+6Ch]
		lea	eax, [ecx+14h]
		push	eax		; int
		push	dword ptr [ecx+2Ch] ; char *
		push	edi		; int
		push	[esp+14h+arg_8]	; int
		call	sub_10008F76
		add	esp, 10h
		pop	edi
		pop	esi
		test	eax, eax
		jz	short loc_1000D191
		push	eax		; void *
		call	sub_1000A0E5
		pop	ecx

loc_1000D191:				; CODE XREF: sub_1000D12E+5Aj
		xor	eax, eax
		retn
sub_1000D12E	endp

; Exported entry   1. legacy_AddSecmodDB

; =============== S U B	R O U T	I N E =======================================


; int __cdecl legacy_AddSecmodDB(int, int, char	*, int,	int)
		public legacy_AddSecmodDB
legacy_AddSecmodDB proc	near		; CODE XREF: legacy_ReadSecmodDB+139p
					; DATA XREF: .rdata:off_10013DC8o

var_10		= byte ptr -10h
var_8		= dword	ptr -8
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		sub	esp, 10h
		cmp	[esp+10h+arg_10], 0
		jnz	short loc_1000D1A6
		or	eax, 0FFFFFFFFh
		jmp	loc_1000D255
; ---------------------------------------------------------------------------

loc_1000D1A6:				; CODE XREF: legacy_AddSecmodDB+8j
		push	ebp
		push	esi
		xor	ebp, ebp
		push	ebp		; int
		push	ebp		; int
		push	[esp+20h+arg_8]	; char *
		push	[esp+24h+arg_4]	; int
		push	[esp+28h+arg_0]	; int
		call	sub_1000DE98
		mov	esi, eax
		add	esp, 14h
		test	esi, esi
		jnz	short loc_1000D1CE
		or	eax, 0FFFFFFFFh
		jmp	loc_1000D253
; ---------------------------------------------------------------------------

loc_1000D1CE:				; CODE XREF: legacy_AddSecmodDB+30j
		push	edi
		push	[esp+1Ch+arg_C]
		lea	eax, [esp+20h+var_10]
		push	eax
		call	sub_1000DE52
		mov	edi, eax
		pop	ecx
		pop	ecx
		test	edi, edi
		jnz	short loc_1000D24B
		push	[esp+1Ch+arg_C]
		lea	eax, [esp+20h+var_8]
		push	eax
		call	sub_1000D9F0
		mov	edi, eax
		pop	ecx
		pop	ecx
		test	edi, edi
		jz	short loc_1000D207
		lea	eax, [esp+1Ch+var_10]
		push	eax
		call	sub_1000DE0B
		jmp	short loc_1000D24A
; ---------------------------------------------------------------------------

loc_1000D207:				; CODE XREF: legacy_AddSecmodDB+65j
		push	ebx
		push	ebp
		lea	eax, [esp+24h+var_8]
		or	edi, 0FFFFFFFFh
		push	eax
		lea	eax, [esp+28h+var_10]
		push	eax
		push	esi
		call	dword ptr [esi+10h]
		mov	ebx, eax
		lea	eax, [esp+30h+var_10]
		push	eax
		call	sub_1000DE0B
		add	esp, 14h
		cmp	[esp+20h+var_8], ebp
		jz	short loc_1000D239
		push	[esp+20h+var_8]
		call	PORT_Free_Util
		pop	ecx

loc_1000D239:				; CODE XREF: legacy_AddSecmodDB+99j
		test	ebx, ebx
		pop	ebx
		jnz	short loc_1000D24B
		push	ebp
		push	esi
		call	dword ptr [esi+18h]
		neg	eax
		pop	ecx
		sbb	eax, eax
		and	edi, eax

loc_1000D24A:				; CODE XREF: legacy_AddSecmodDB+71j
		pop	ecx

loc_1000D24B:				; CODE XREF: legacy_AddSecmodDB+4Fj
					; legacy_AddSecmodDB+A8j
		push	esi
		call	dword ptr [esi+4]
		pop	ecx
		mov	eax, edi
		pop	edi

loc_1000D253:				; CODE XREF: legacy_AddSecmodDB+35j
		pop	esi
		pop	ebp

loc_1000D255:				; CODE XREF: legacy_AddSecmodDB+Dj
		add	esp, 10h
		retn
legacy_AddSecmodDB endp

; Exported entry   2. legacy_DeleteSecmodDB

; =============== S U B	R O U T	I N E =======================================


; int __cdecl legacy_DeleteSecmodDB(int, int, char *, int, int)
		public legacy_DeleteSecmodDB
legacy_DeleteSecmodDB proc near		; DATA XREF: .rdata:off_10013DC8o

var_8		= byte ptr -8
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	ecx
		push	ecx
		cmp	[esp+8+arg_10],	0
		jnz	short loc_1000D267
		or	eax, 0FFFFFFFFh
		jmp	short loc_1000D2DC
; ---------------------------------------------------------------------------

loc_1000D267:				; CODE XREF: legacy_DeleteSecmodDB+7j
		push	ebp
		push	edi
		xor	ebp, ebp
		push	ebp		; int
		push	ebp		; int
		push	[esp+18h+arg_8]	; char *
		push	[esp+1Ch+arg_4]	; int
		push	[esp+20h+arg_0]	; int
		call	sub_1000DE98
		mov	edi, eax
		add	esp, 14h
		test	edi, edi
		jnz	short loc_1000D28C
		or	eax, 0FFFFFFFFh
		jmp	short loc_1000D2DA
; ---------------------------------------------------------------------------

loc_1000D28C:				; CODE XREF: legacy_DeleteSecmodDB+2Cj
		push	ebx
		push	[esp+14h+arg_C]
		lea	eax, [esp+18h+var_8]
		push	eax
		call	sub_1000DE52
		mov	ebx, eax
		pop	ecx
		pop	ecx
		test	ebx, ebx
		jnz	short loc_1000D2D2
		push	esi
		push	ebp
		lea	eax, [esp+1Ch+var_8]
		or	ebx, 0FFFFFFFFh
		push	eax
		push	edi
		call	dword ptr [edi+8]
		mov	esi, eax
		lea	eax, [esp+24h+var_8]
		push	eax
		call	sub_1000DE0B
		add	esp, 10h
		test	esi, esi
		pop	esi
		jnz	short loc_1000D2D2
		push	ebp
		push	edi
		call	dword ptr [edi+18h]
		neg	eax
		pop	ecx
		sbb	eax, eax
		pop	ecx
		and	ebx, eax

loc_1000D2D2:				; CODE XREF: legacy_DeleteSecmodDB+48j
					; legacy_DeleteSecmodDB+6Aj
		push	edi
		call	dword ptr [edi+4]
		pop	ecx
		mov	eax, ebx
		pop	ebx

loc_1000D2DA:				; CODE XREF: legacy_DeleteSecmodDB+31j
		pop	edi
		pop	ebp

loc_1000D2DC:				; CODE XREF: legacy_DeleteSecmodDB+Cj
		pop	ecx
		pop	ecx
		retn
legacy_DeleteSecmodDB endp

; Exported entry   4. legacy_ReadSecmodDB

; =============== S U B	R O U T	I N E =======================================


; int __cdecl legacy_ReadSecmodDB(int, int, char *, int, int)
		public legacy_ReadSecmodDB
legacy_ReadSecmodDB proc near		; DATA XREF: .rdata:off_10013DC8o

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= byte ptr -10h
var_8		= byte ptr -8
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		sub	esp, 18h
		push	ebx
		push	esi
		push	0Ah
		pop	ebx
		push	28h
		call	PORT_ZAlloc_Util
		mov	esi, eax
		pop	ecx
		test	esi, esi
		jz	loc_1000D432
		push	ebp
		mov	ebp, [esp+24h+arg_10]
		push	edi
		push	ebp		; int
		push	1		; int
		push	[esp+30h+arg_8]	; char *
		push	[esp+34h+arg_4]	; int
		push	[esp+38h+arg_0]	; int
		call	sub_1000DE98
		mov	edi, eax
		add	esp, 14h
		test	edi, edi
		jz	loc_1000D3C1
		push	3
		lea	eax, [esp+2Ch+var_10]
		push	eax
		lea	eax, [esp+30h+var_8]
		push	eax
		push	edi
		call	dword ptr [edi+14h]
		add	esp, 10h
		test	eax, eax
		jnz	loc_1000D3C1
		push	4
		pop	ebp
		push	2
		pop	eax
		mov	[esp+28h+var_18], eax

loc_1000D345:				; CODE XREF: legacy_ReadSecmodDB+DCj
		and	[esp+28h+var_14], 0
		cmp	eax, ebx
		jl	short loc_1000D377
		add	ebx, 0Ah
		mov	eax, ebx
		shl	eax, 2
		push	eax
		push	esi
		call	PORT_Realloc_Util
		pop	ecx
		pop	ecx
		test	eax, eax
		jz	short loc_1000D3BD
		mov	esi, eax
		add	eax, 4
		push	28h		; size_t
		add	eax, ebp
		push	0		; int
		push	eax		; void *
		call	memset
		add	esp, 0Ch

loc_1000D377:				; CODE XREF: legacy_ReadSecmodDB+6Dj
		lea	eax, [esp+28h+var_14]
		push	eax
		lea	eax, [esp+2Ch+var_10]
		push	eax
		push	[esp+30h+arg_C]
		call	sub_1000D465
		add	esp, 0Ch
		cmp	[esp+28h+var_14], 0
		jz	short loc_1000D398
		mov	[esi], eax
		jmp	short loc_1000D3A2
; ---------------------------------------------------------------------------

loc_1000D398:				; CODE XREF: legacy_ReadSecmodDB+B3j
		inc	[esp+28h+var_18]
		mov	[esi+ebp], eax
		add	ebp, 4

loc_1000D3A2:				; CODE XREF: legacy_ReadSecmodDB+B7j
		push	7
		lea	eax, [esp+2Ch+var_10]
		push	eax
		lea	eax, [esp+30h+var_8]
		push	eax
		push	edi
		call	dword ptr [edi+14h]
		add	esp, 10h
		test	eax, eax
		mov	eax, [esp+28h+var_18]
		jz	short loc_1000D345

loc_1000D3BD:				; CODE XREF: legacy_ReadSecmodDB+82j
		mov	ebp, [esp+28h+arg_10]

loc_1000D3C1:				; CODE XREF: legacy_ReadSecmodDB+3Bj
					; legacy_ReadSecmodDB+56j
		cmp	dword ptr [esi], 0
		jnz	short loc_1000D3F5
		push	22h
		push	[esp+2Ch+arg_C]
		call	NSSUTIL_Quote
		mov	ebx, eax
		pop	ecx
		pop	ecx
		test	ebx, ebx
		jz	short loc_1000D3F5
		push	offset aSlotflagsRsaDs ; "slotFlags=[RSA,DSA,DH,RC2,RC4,DES,RANDO"...
		push	ebx
		push	offset aLibraryNameNss ; "library= name=\"NSS Internal PKCS #11	M"...
		call	ds:PR_smprintf
		push	ebx
		mov	[esi], eax
		call	PORT_Free_Util
		add	esp, 10h

loc_1000D3F5:				; CODE XREF: legacy_ReadSecmodDB+E5j
					; legacy_ReadSecmodDB+F8j
		test	edi, edi
		jz	short loc_1000D400
		push	edi
		call	dword ptr [edi+4]
		pop	ecx
		jmp	short loc_1000D420
; ---------------------------------------------------------------------------

loc_1000D400:				; CODE XREF: legacy_ReadSecmodDB+118j
		cmp	dword ptr [esi], 0
		jz	short loc_1000D425
		test	ebp, ebp
		jz	short loc_1000D420
		push	ebp		; int
		push	dword ptr [esi]	; int
		push	[esp+30h+arg_8]	; char *
		push	[esp+34h+arg_4]	; int
		push	[esp+38h+arg_0]	; int
		call	legacy_AddSecmodDB
		add	esp, 14h

loc_1000D420:				; CODE XREF: legacy_ReadSecmodDB+11Fj
					; legacy_ReadSecmodDB+128j
		cmp	dword ptr [esi], 0
		jnz	short loc_1000D42E

loc_1000D425:				; CODE XREF: legacy_ReadSecmodDB+124j
		push	esi
		call	PORT_Free_Util
		pop	ecx
		xor	esi, esi

loc_1000D42E:				; CODE XREF: legacy_ReadSecmodDB+144j
		pop	edi
		mov	eax, esi
		pop	ebp

loc_1000D432:				; CODE XREF: legacy_ReadSecmodDB+14j
		pop	esi
		pop	ebx
		add	esp, 18h
		retn
legacy_ReadSecmodDB endp

; Exported entry   5. legacy_ReleaseSecmodDBData

; =============== S U B	R O U T	I N E =======================================


		public legacy_ReleaseSecmodDBData
legacy_ReleaseSecmodDBData proc	near	; DATA XREF: .rdata:off_10013DC8o

arg_C		= dword	ptr  10h

		push	esi
		mov	esi, [esp+4+arg_C]
		test	esi, esi
		jz	short loc_1000D461
		mov	eax, [esi]
		push	edi
		mov	edi, esi
		jmp	short loc_1000D455
; ---------------------------------------------------------------------------

loc_1000D448:				; CODE XREF: legacy_ReleaseSecmodDBData+1Fj
		push	eax
		call	ds:PR_smprintf_free
		lea	edi, [edi+4]
		mov	eax, [edi]
		pop	ecx

loc_1000D455:				; CODE XREF: legacy_ReleaseSecmodDBData+Ej
		test	eax, eax
		jnz	short loc_1000D448
		push	esi
		call	PORT_Free_Util
		pop	ecx
		pop	edi

loc_1000D461:				; CODE XREF: legacy_ReleaseSecmodDBData+7j
		xor	eax, eax
		pop	esi
		retn
legacy_ReleaseSecmodDBData endp


; =============== S U B	R O U T	I N E =======================================


sub_1000D465	proc near		; CODE XREF: legacy_ReadSecmodDB+A6p

var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 48h
		push	ebx
		push	edi
		xor	eax, eax
		push	32h
		pop	edi
		push	800h
		mov	[esp+54h+var_28], eax
		mov	ebx, eax
		mov	[esp+54h+var_38], eax
		mov	[esp+54h+var_20], eax
		mov	[esp+54h+var_18], eax
		mov	[esp+54h+var_1C], eax
		mov	[esp+54h+var_44], eax
		call	PORT_NewArena_Util
		pop	ecx
		mov	ecx, eax
		mov	[esp+50h+var_40], ecx
		test	ecx, ecx
		jz	loc_1000D9EA
		push	ebp
		mov	ebp, [esp+54h+arg_4]
		push	esi
		cmp	dword ptr [ebp+4], 10h
		jb	loc_1000D9CE
		mov	esi, [ebp+0]
		xor	eax, eax
		cmp	[esi+6], al
		setnz	al
		xor	edx, edx
		cmp	[esi+7], dl
		mov	[esp+58h+var_3C], eax
		setnz	dl
		mov	[esp+58h+var_4], edx
		mov	edx, [esp+58h+arg_8]
		test	edx, edx
		jz	short loc_1000D4D7
		mov	[edx], eax

loc_1000D4D7:				; CODE XREF: sub_1000D465+6Ej
		test	eax, eax
		jz	short loc_1000D509
		push	[esp+58h+arg_0]
		push	ecx
		call	PORT_ArenaStrdup_Util
		mov	[esp+60h+var_38], eax
		pop	ecx
		pop	ecx
		test	eax, eax
		jz	loc_1000D9D9
		cmp	[esi], bl
		jnz	loc_1000D57C
		cmp	byte ptr [esi+1], 4
		ja	short loc_1000D509
		mov	[esp+58h+var_20], 1

loc_1000D509:				; CODE XREF: sub_1000D465+74j
					; sub_1000D465+9Aj
		cmp	[esi], bl
		jnz	short loc_1000D57C
		cmp	byte ptr [esi+1], 6
		jb	short loc_1000D57C
		cmp	dword ptr [ebp+4], 26h
		jb	loc_1000D9CE
		movzx	edi, byte ptr [esi+10h]
		movzx	eax, byte ptr [esi+11h]
		movzx	ebx, byte ptr [esi+14h]
		shl	edi, 8
		or	edi, eax
		shl	ebx, 8
		movzx	eax, byte ptr [esi+12h]
		shl	edi, 8
		or	edi, eax
		movzx	eax, byte ptr [esi+13h]
		shl	edi, 8
		or	edi, eax
		movzx	eax, byte ptr [esi+15h]
		or	ebx, eax
		movzx	eax, byte ptr [esi+16h]
		shl	ebx, 8
		or	ebx, eax
		movzx	eax, byte ptr [esi+17h]
		shl	ebx, 8
		or	ebx, eax
		xor	eax, eax
		cmp	[esi+19h], al
		setnz	al
		mov	[esp+58h+var_18], eax
		xor	eax, eax
		cmp	[esi+1Ah], al
		setnz	al
		mov	[esp+58h+var_1C], eax
		xor	eax, eax
		inc	eax
		mov	[esp+58h+var_44], eax
		jmp	short loc_1000D57E
; ---------------------------------------------------------------------------

loc_1000D57C:				; CODE XREF: sub_1000D465+90j
					; sub_1000D465+A6j ...
		mov	eax, ebx

loc_1000D57E:				; CODE XREF: sub_1000D465+115j
		cmp	[esp+58h+var_3C], 0
		jz	short loc_1000D58E
		test	eax, eax
		jnz	short loc_1000D58E
		push	64h
		xor	edi, edi
		pop	ebx

loc_1000D58E:				; CODE XREF: sub_1000D465+11Ej
					; sub_1000D465+122j
		movzx	ecx, byte ptr [esi+8]
		movzx	eax, byte ptr [esi+9]
		shl	ecx, 8
		or	ecx, eax
		movzx	eax, byte ptr [esi+0Ah]
		shl	ecx, 8
		or	ecx, eax
		movzx	eax, byte ptr [esi+0Bh]
		shl	ecx, 8
		or	ecx, eax
		movzx	eax, byte ptr [esi+0Dh]
		mov	[esp+58h+var_8], ecx
		movzx	ecx, byte ptr [esi+0Ch]
		shl	ecx, 8
		or	ecx, eax
		movzx	eax, byte ptr [esi+0Eh]
		shl	ecx, 8
		or	ecx, eax
		movzx	eax, byte ptr [esi+0Fh]
		shl	ecx, 8
		or	ecx, eax
		movzx	eax, byte ptr [esi+5]
		mov	[esp+58h+var_C], ecx
		movzx	ecx, byte ptr [esi+4]
		shl	cx, 8
		or	cx, ax
		movzx	eax, cx
		movzx	ecx, byte ptr [esi+2]
		mov	[esp+58h+var_2C], eax
		movzx	eax, byte ptr [esi+3]
		shl	cx, 8
		or	cx, ax
		movzx	eax, cx
		movzx	edx, ax
		mov	[esp+58h+var_48], eax
		lea	eax, [edx+2]
		cmp	[ebp+4], eax
		jb	loc_1000D9CE
		mov	esi, [ebp+0]
		mov	[esp+58h+var_24], esi
		movzx	eax, byte ptr [esi+edx]
		movzx	ecx, byte ptr [esi+edx+1]
		shl	ax, 8
		or	cx, ax
		lea	eax, [edx+2]
		movzx	ecx, cx
		add	eax, ecx
		mov	[esp+58h+var_30], ecx
		mov	[esp+58h+var_34], eax
		cmp	[ebp+4], eax
		jb	loc_1000D9CE
		lea	eax, [ecx+1]
		push	eax
		push	[esp+5Ch+var_40]
		call	PORT_ArenaAlloc_Util
		mov	edx, eax
		mov	[esp+60h+var_14], edx
		pop	ecx
		pop	ecx
		test	edx, edx
		jz	loc_1000D9D9
		mov	ecx, [esp+58h+var_48]
		push	[esp+58h+var_30] ; size_t
		movzx	eax, cx
		add	eax, 2
		add	eax, esi
		push	eax		; void *
		push	edx		; void *
		call	memcpy
		mov	eax, [esp+64h+var_30]
		add	esp, 0Ch
		mov	ecx, [esp+58h+var_14]
		mov	edx, [esp+58h+var_34]
		mov	byte ptr [eax+ecx], 0
		lea	eax, [edx+2]
		cmp	[ebp+4], eax
		jb	loc_1000D9CE
		movzx	eax, byte ptr [esi+edx]
		movzx	ecx, byte ptr [esi+edx+1]
		shl	ax, 8
		or	cx, ax
		movzx	eax, cx
		mov	[esp+58h+var_30], eax
		test	ax, ax
		jz	short loc_1000D70C
		movzx	ecx, ax
		lea	eax, [edx+2]
		add	eax, ecx
		cmp	[ebp+4], eax
		jb	loc_1000D9CE
		lea	eax, [ecx+1]
		push	eax
		push	[esp+5Ch+var_40]
		call	PORT_ArenaAlloc_Util
		mov	edx, eax
		mov	[esp+60h+var_28], edx
		pop	ecx
		pop	ecx
		test	edx, edx
		jz	loc_1000D9D9
		mov	eax, [esp+58h+var_30]
		movzx	ecx, ax
		push	ecx		; size_t
		mov	ecx, [esp+5Ch+var_34]
		add	ecx, 2
		add	ecx, esi
		push	ecx		; void *
		push	edx		; void *
		call	memcpy
		mov	ecx, [esp+64h+var_30]
		add	esp, 0Ch
		mov	edx, [esp+58h+var_28]
		movzx	eax, cx
		mov	byte ptr [eax+edx], 0
		mov	eax, ecx
		mov	edx, [esp+58h+var_34]

loc_1000D70C:				; CODE XREF: sub_1000D465+247j
		movzx	esi, ax
		add	esi, 2
		add	esi, edx
		cmp	[esp+58h+var_3C], 0
		jnz	loc_1000D7B8
		cmp	[esp+58h+var_44], 0
		jz	loc_1000D7B8
		lea	eax, [esi+2]
		cmp	[ebp+4], eax
		jb	loc_1000D9CE
		mov	eax, [esp+58h+var_24]
		movzx	ecx, byte ptr [eax+esi+1]
		movzx	eax, byte ptr [eax+esi]
		shl	ax, 8
		or	cx, ax
		movzx	eax, cx
		mov	[esp+58h+var_30], eax
		test	ax, ax
		jz	short loc_1000D7B0
		movzx	ecx, ax
		lea	eax, [esi+2]
		add	eax, ecx
		cmp	[ebp+4], eax
		jb	loc_1000D9CE
		lea	eax, [ecx+1]
		push	eax
		push	[esp+5Ch+var_40]
		call	PORT_ArenaAlloc_Util
		mov	edx, eax
		mov	[esp+60h+var_38], edx
		pop	ecx
		pop	ecx
		test	edx, edx
		jz	loc_1000D9D9
		mov	ecx, [esp+58h+var_30]
		movzx	eax, cx
		push	eax		; size_t
		mov	eax, [esp+5Ch+var_24]
		add	eax, 2
		add	eax, esi
		push	eax		; void *
		push	edx		; void *
		call	memcpy
		mov	ecx, [esp+64h+var_30]
		add	esp, 0Ch
		mov	edx, [esp+58h+var_38]
		movzx	eax, cx
		mov	byte ptr [eax+edx], 0
		mov	eax, ecx

loc_1000D7B0:				; CODE XREF: sub_1000D465+2EFj
		movzx	eax, ax
		add	esi, 2
		add	esi, eax

loc_1000D7B8:				; CODE XREF: sub_1000D465+2B4j
					; sub_1000D465+2BFj
		mov	ecx, [esp+58h+var_2C]
		cmp	cx, word ptr [esp+58h+var_48]
		jb	short loc_1000D7CE
		movzx	eax, cx
		cmp	eax, esi
		jb	loc_1000D9CE

loc_1000D7CE:				; CODE XREF: sub_1000D465+35Cj
		movzx	ecx, cx
		lea	eax, [ecx+2]
		cmp	[ebp+4], eax
		jb	loc_1000D9CE
		mov	edx, [ebp+0]
		mov	[esp+58h+var_24], edx
		movzx	eax, byte ptr [ecx+edx]
		shl	ax, 8
		movzx	esi, ax
		movzx	eax, byte ptr [ecx+edx+1]
		or	esi, eax
		mov	eax, [esp+58h+var_48]
		cmp	word ptr [esp+58h+var_2C], ax
		jnb	short loc_1000D81E
		mov	ebp, [esp+58h+var_48]
		mov	eax, esi
		shl	eax, 5
		add	eax, 2
		movzx	edx, bp
		mov	ebp, [esp+58h+arg_4]
		add	eax, ecx
		cmp	edx, eax
		jb	loc_1000D9CE

loc_1000D81E:				; CODE XREF: sub_1000D465+39Aj
		mov	eax, esi
		shl	eax, 5
		add	eax, 2
		add	eax, ecx
		cmp	[ebp+4], eax
		jb	loc_1000D9CE
		mov	eax, esi
		shl	eax, 2
		push	eax
		push	[esp+5Ch+var_40]
		call	PORT_ArenaZAlloc_Util
		mov	edx, eax
		mov	[esp+60h+var_30], edx
		pop	ecx
		pop	ecx
		test	edx, edx
		jz	loc_1000D9D9
		xor	ebp, ebp
		test	esi, esi
		jle	loc_1000D962
		mov	edx, [esp+58h+var_2C]
		mov	eax, [esp+58h+var_24]
		movzx	ecx, dx
		add	eax, 4
		add	ecx, eax
		mov	[esp+58h+var_2C], ecx

loc_1000D86E:				; CODE XREF: sub_1000D465+4F7j
		movzx	edx, byte ptr [ecx-2]
		movzx	eax, byte ptr [ecx-1]
		shl	edx, 8
		or	edx, eax
		movzx	eax, byte ptr [ecx]
		shl	edx, 8
		or	edx, eax
		movzx	eax, byte ptr [ecx+1]
		shl	edx, 8
		or	edx, eax
		movzx	eax, byte ptr [ecx+3]
		mov	[esp+58h+var_24], edx
		movzx	edx, byte ptr [ecx+2]
		shl	edx, 8
		or	edx, eax
		movzx	eax, byte ptr [ecx+4]
		shl	edx, 8
		or	edx, eax
		movzx	eax, byte ptr [ecx+5]
		shl	edx, 8
		or	edx, eax
		movzx	eax, byte ptr [ecx+6]
		shl	eax, 8
		mov	[esp+58h+var_48], eax
		movzx	eax, byte ptr [ecx+7]
		or	[esp+58h+var_48], eax
		shl	[esp+58h+var_48], 8
		movzx	eax, byte ptr [ecx+8]
		or	[esp+58h+var_48], eax
		shl	[esp+58h+var_48], 8
		movzx	eax, byte ptr [ecx+9]
		or	[esp+58h+var_48], eax
		cmp	[esp+58h+var_20], 0
		movzx	eax, byte ptr [ecx+0Bh]
		mov	[esp+58h+var_34], edx
		mov	[esp+58h+var_10], eax
		jz	short loc_1000D91C
		cmp	[esp+58h+var_3C], 0
		jz	short loc_1000D91C
		cmp	[esp+58h+var_24], 2
		jz	short loc_1000D91C
		push	offset aSlotflagsRsaDs ; "slotFlags=[RSA,DSA,DH,RC2,RC4,DES,RANDO"...
		push	offset aSlotflags ; "slotFlags"
		call	NSSUTIL_ArgParseSlotFlags
		mov	edx, [esp+60h+var_34]
		pop	ecx
		pop	ecx
		mov	ecx, [esp+58h+var_2C]
		or	edx, eax
		mov	eax, [esp+58h+var_10]

loc_1000D91C:				; CODE XREF: sub_1000D465+488j
					; sub_1000D465+48Fj ...
		test	eax, eax
		jz	short loc_1000D92A
		cmp	[esp+58h+var_44], 0
		jnz	short loc_1000D92A
		push	64h
		pop	edi

loc_1000D92A:				; CODE XREF: sub_1000D465+4B9j
					; sub_1000D465+4C0j
		push	0
		push	eax
		movzx	eax, byte ptr [ecx+0Ah]
		push	eax
		push	[esp+64h+var_48]
		push	edx
		push	[esp+6Ch+var_24]
		call	NSSUTIL_MkSlotString
		mov	edx, [esp+70h+var_30]
		add	esp, 18h
		mov	[edx+ebp*4], eax
		test	eax, eax
		jz	short loc_1000D9C4
		mov	ecx, [esp+58h+var_2C]
		inc	ebp
		add	ecx, 20h
		mov	[esp+58h+var_2C], ecx
		cmp	ebp, esi
		jl	loc_1000D86E

loc_1000D962:				; CODE XREF: sub_1000D465+3EFj
		push	[esp+58h+var_C]
		mov	eax, [esp+5Ch+var_3C]
		push	[esp+5Ch+var_8]
		push	ebx
		push	edi
		push	eax
		push	[esp+6Ch+var_1C]
		push	[esp+70h+var_18]
		push	[esp+74h+var_4]
		push	eax
		push	esi
		push	edx
		call	NSSUTIL_MkNSSString
		push	esi
		push	[esp+88h+var_30]
		mov	edi, eax
		call	sub_1000DE26
		push	edi
		push	[esp+90h+var_38]
		push	[esp+94h+var_14]
		push	[esp+98h+var_28]
		call	NSSUTIL_MkModuleSpec
		add	esp, 44h
		mov	esi, eax
		push	edi
		call	ds:PR_smprintf_free
		push	1
		push	[esp+60h+var_40]
		call	PORT_FreeArena_Util
		add	esp, 0Ch
		mov	eax, esi
		jmp	short loc_1000D9E8
; ---------------------------------------------------------------------------

loc_1000D9C4:				; CODE XREF: sub_1000D465+4E7j
		push	ebp
		push	edx
		call	sub_1000DE26
		pop	ecx
		jmp	short loc_1000D9D8
; ---------------------------------------------------------------------------

loc_1000D9CE:				; CODE XREF: sub_1000D465+47j
					; sub_1000D465+B2j ...
		push	0FFFFE012h
		call	PORT_SetError_Util

loc_1000D9D8:				; CODE XREF: sub_1000D465+567j
		pop	ecx

loc_1000D9D9:				; CODE XREF: sub_1000D465+88j
					; sub_1000D465+1F1j ...
		push	1
		push	[esp+5Ch+var_40]
		call	PORT_FreeArena_Util
		pop	ecx
		pop	ecx
		xor	eax, eax

loc_1000D9E8:				; CODE XREF: sub_1000D465+55Dj
		pop	esi
		pop	ebp

loc_1000D9EA:				; CODE XREF: sub_1000D465+37j
		pop	edi
		pop	ebx
		add	esp, 48h
		retn
sub_1000D465	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000D9F0	proc near		; CODE XREF: legacy_AddSecmodDB+5Ap

var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= byte ptr -8
var_7		= byte ptr -7
var_6		= byte ptr -6
var_5		= byte ptr -5
var_4		= byte ptr -4
var_3		= byte ptr -3
var_2		= byte ptr -2
var_1		= byte ptr -1
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 38h
		xor	eax, eax
		push	ebx
		push	ebp
		push	esi
		mov	esi, eax
		mov	[esp+44h+var_34], eax
		mov	ebx, eax
		mov	[esp+44h+var_30], eax
		mov	[esp+44h+var_2C], eax
		mov	ebp, eax
		mov	[esp+44h+var_28], eax
		mov	[esp+44h+var_38], eax
		lea	eax, [esp+44h+var_38]
		push	eax
		lea	eax, [esp+48h+var_28]
		mov	[esp+48h+var_24], esi
		push	eax
		lea	eax, [esp+4Ch+var_30]
		push	eax
		lea	eax, [esp+50h+var_2C]
		push	eax
		push	[esp+54h+arg_4]
		call	NSSUTIL_ArgParseModuleSpec
		add	esp, 14h
		test	eax, eax
		jnz	loc_1000DE04
		push	edi
		or	edi, 0FFFFFFFFh
		cmp	[esp+48h+var_30], ebx
		jz	loc_1000DDC3
		push	[esp+48h+var_30] ; char	*
		call	strlen
		movzx	eax, ax
		pop	ecx
		mov	[esp+48h+var_20], eax
		cmp	[esp+48h+var_2C], ebx
		jz	short loc_1000DA74
		push	[esp+48h+var_2C] ; char	*
		call	strlen
		movzx	esi, ax
		pop	ecx
		mov	[esp+48h+var_24], esi

loc_1000DA74:				; CODE XREF: sub_1000D9F0+71j
		cmp	[esp+48h+var_28], ebx
		jz	short loc_1000DA87
		push	[esp+48h+var_28] ; char	*
		call	strlen
		pop	ecx
		movzx	ebx, ax

loc_1000DA87:				; CODE XREF: sub_1000D9F0+88j
		push	[esp+48h+var_38]
		push	offset aSlotparams ; "slotParams"
		call	NSSUTIL_ArgGetParamValue
		mov	edi, eax
		lea	eax, [esp+50h+var_34]
		push	eax
		push	edi
		push	0
		call	NSSUTIL_ArgParseSlotInfo
		add	esp, 14h
		mov	ebp, eax
		mov	[esp+48h+var_C], ebp
		test	edi, edi
		jz	short loc_1000DAB8
		push	edi
		call	PORT_Free_Util
		pop	ecx

loc_1000DAB8:				; CODE XREF: sub_1000D9F0+BFj
		mov	ecx, [esp+48h+var_34]
		test	ecx, ecx
		jz	short loc_1000DAC8
		test	ebp, ebp
		jz	loc_1000DDAF

loc_1000DAC8:				; CODE XREF: sub_1000D9F0+CEj
		mov	eax, [esp+48h+var_20]
		movzx	edi, ax
		movzx	eax, si
		shl	ecx, 5
		movzx	edx, bx
		add	ecx, eax
		add	ecx, edx
		mov	[esp+48h+var_1C], edi
		lea	esi, [edi+28h]
		mov	[esp+48h+var_14], edx
		add	esi, ecx
		mov	[esp+48h+var_18], eax
		push	esi
		call	PORT_ZAlloc_Util
		pop	ecx
		mov	ecx, [esp+48h+arg_0]
		mov	edi, eax
		mov	[ecx], edi
		mov	[ecx+4], esi
		test	edi, edi
		jz	loc_1000DDAF
		mov	word ptr [edi],	600h
		mov	esi, offset aFlags ; "flags"
		push	[esp+48h+var_38]
		push	offset aInternal ; "internal"
		push	esi
		call	NSSUTIL_ArgHasFlag
		test	eax, eax
		setnz	al
		mov	[edi+6], al
		push	[esp+54h+var_38]
		push	offset aFips	; "FIPS"
		push	esi
		call	NSSUTIL_ArgHasFlag
		test	eax, eax
		setnz	al
		mov	[edi+7], al
		push	[esp+60h+var_38]
		push	offset aIsmoduledb ; "isModuleDB"
		push	esi
		call	NSSUTIL_ArgHasFlag
		test	eax, eax
		setnz	al
		mov	[edi+19h], al
		push	[esp+6Ch+var_38]
		push	offset aIsmoduledbonly ; "isModuleDBOnly"
		push	esi
		call	NSSUTIL_ArgHasFlag
		test	eax, eax
		setnz	al
		mov	[edi+1Ah], al
		push	[esp+78h+var_38]
		push	offset aCritical ; "critical"
		push	esi
		call	NSSUTIL_ArgHasFlag
		test	eax, eax
		push	0
		setnz	al
		push	32h
		mov	[edi+1Bh], al
		push	[esp+8Ch+var_38]
		push	offset aTrustorder ; "trustOrder"
		call	NSSUTIL_ArgReadLong
		add	esp, 4Ch
		mov	[edi+13h], al
		mov	ecx, eax
		shr	ecx, 8
		mov	[edi+12h], cl
		mov	ecx, eax
		push	0
		shr	ecx, 10h
		shr	eax, 18h
		push	0
		mov	[edi+11h], cl
		mov	[edi+10h], al
		push	[esp+50h+var_38]
		push	offset aCipherorder ; "cipherOrder"
		call	NSSUTIL_ArgReadLong
		mov	ecx, eax
		mov	[edi+17h], al
		shr	ecx, 8
		mov	[edi+16h], cl
		mov	ecx, eax
		shr	ecx, 10h
		shr	eax, 18h
		mov	[edi+15h], cl
		mov	[edi+14h], al
		push	[esp+58h+var_38]
		push	offset aCiphers	; "ciphers"
		call	NSSUTIL_ArgGetParamValue
		mov	esi, eax
		lea	eax, [esp+60h+var_8]
		push	esi
		push	eax
		call	NSSUTIL_ArgParseCipherFlags
		mov	cl, [esp+68h+var_8]
		add	esp, 20h
		mov	[edi+0Bh], cl
		mov	cl, [esp+48h+var_7]
		mov	[edi+0Ah], cl
		mov	al, [esp+48h+var_6]
		mov	[edi+9], al
		mov	al, [esp+48h+var_5]
		mov	[edi+8], al
		mov	al, [esp+48h+var_4]
		mov	[edi+0Fh], al
		mov	al, [esp+48h+var_3]
		mov	[edi+0Eh], al
		mov	al, [esp+48h+var_2]
		mov	[edi+0Dh], al
		mov	al, [esp+48h+var_1]
		mov	[edi+0Ch], al
		test	esi, esi
		jz	short loc_1000DC3E
		push	esi
		call	PORT_Free_Util
		pop	ecx

loc_1000DC3E:				; CODE XREF: sub_1000D9F0+245j
		mov	edx, [esp+48h+var_20]
		mov	ecx, [esp+48h+var_24]
		push	[esp+48h+var_1C] ; size_t
		add	ecx, 26h
		mov	word ptr [edi+2], 2000h
		lea	eax, [edx+ebx]
		add	eax, ecx
		movzx	ecx, ax
		mov	[edi+5], cl
		mov	eax, ecx
		shr	eax, 8
		mov	[edi+4], al
		mov	al, byte ptr [esp+4Ch+var_34]
		mov	[ecx+edi+1], al
		mov	eax, [esp+4Ch+var_34]
		shr	eax, 8
		mov	[ecx+edi], al
		mov	eax, edx
		shr	eax, 8
		mov	[edi+20h], al
		lea	eax, [edi+22h]
		mov	[edi+21h], dl
		push	[esp+4Ch+var_30] ; void	*
		mov	[esp+50h+var_10], ecx
		push	eax		; void *
		call	memcpy
		mov	eax, [esp+54h+var_20]
		add	esp, 0Ch
		mov	edx, [esp+48h+var_24]
		add	eax, 2
		movzx	esi, ax
		mov	eax, edx
		mov	ecx, esi
		shr	eax, 8
		add	esi, 2
		mov	[ecx+edi+21h], dl
		mov	[ecx+edi+20h], al
		test	dx, dx
		jz	short loc_1000DCD9
		push	[esp+48h+var_18] ; size_t
		movzx	eax, si
		push	[esp+4Ch+var_2C] ; void	*
		add	eax, 20h
		add	eax, edi
		push	eax		; void *
		call	memcpy
		mov	edx, [esp+54h+var_24]
		add	esp, 0Ch

loc_1000DCD9:				; CODE XREF: sub_1000D9F0+2CAj
		add	esi, edx
		mov	eax, ebx
		movzx	ecx, si
		shr	eax, 8
		mov	[ecx+edi+21h], bl
		mov	[ecx+edi+20h], al
		test	bx, bx
		jz	short loc_1000DD0C
		push	[esp+48h+var_14] ; size_t
		lea	eax, [esi+2]
		push	[esp+4Ch+var_28] ; void	*
		movzx	eax, ax
		add	eax, 20h
		add	eax, edi
		push	eax		; void *
		call	memcpy
		add	esp, 0Ch

loc_1000DD0C:				; CODE XREF: sub_1000D9F0+2FEj
		mov	eax, [esp+48h+var_34]
		test	eax, eax
		jz	loc_1000DDAB
		and	[esp+48h+var_14], 0
		test	eax, eax
		jle	loc_1000DDAB
		mov	esi, [esp+48h+var_10]
		lea	ebx, [ebp+2]
		mov	ebp, [esp+48h+var_14]
		add	esi, 4
		add	esi, edi

loc_1000DD35:				; CODE XREF: sub_1000D9F0+3B5j
		mov	al, [ebx-2]
		mov	[esi+1], al
		mov	al, [ebx-1]
		mov	[esi], al
		mov	al, [ebx]
		mov	[esi-1], al
		mov	al, [ebx+1]
		mov	[esi-2], al
		mov	al, [ebx+2]
		mov	[esi+5], al
		mov	al, [ebx+3]
		mov	[esi+4], al
		mov	al, [ebx+4]
		mov	[esi+3], al
		mov	al, [ebx+5]
		mov	[esi+2], al
		mov	al, [ebx+0Ah]
		mov	[esi+9], al
		mov	eax, [ebx+0Ah]
		sar	eax, 8
		mov	[esi+8], al
		mov	al, [ebx+0Ch]
		mov	[esi+7], al
		mov	al, [ebx+0Dh]
		mov	[esi+6], al
		mov	al, [ebx+6]
		mov	[esi+0Ah], al
		mov	al, [ebx+0Eh]
		push	12h		; size_t
		mov	[esi+0Bh], al
		lea	eax, [esi+0Ch]
		push	0		; int
		push	eax		; void *
		call	memset
		add	esp, 0Ch
		lea	ebx, [ebx+24h]
		inc	ebp
		lea	esi, [esi+20h]
		cmp	ebp, [esp+48h+var_34]
		jl	short loc_1000DD35
		mov	ebp, [esp+48h+var_C]

loc_1000DDAB:				; CODE XREF: sub_1000D9F0+322j
					; sub_1000D9F0+32Fj
		xor	edi, edi
		jmp	short loc_1000DDB2
; ---------------------------------------------------------------------------

loc_1000DDAF:				; CODE XREF: sub_1000D9F0+D2j
					; sub_1000D9F0+111j
		or	edi, 0FFFFFFFFh

loc_1000DDB2:				; CODE XREF: sub_1000D9F0+3BDj
		cmp	[esp+48h+var_30], 0
		jz	short loc_1000DDC3
		push	[esp+48h+var_30]
		call	PORT_Free_Util
		pop	ecx

loc_1000DDC3:				; CODE XREF: sub_1000D9F0+56j
					; sub_1000D9F0+3C7j
		cmp	[esp+48h+var_2C], 0
		jz	short loc_1000DDD4
		push	[esp+48h+var_2C]
		call	PORT_Free_Util
		pop	ecx

loc_1000DDD4:				; CODE XREF: sub_1000D9F0+3D8j
		cmp	[esp+48h+var_28], 0
		jz	short loc_1000DDE5
		push	[esp+48h+var_28]
		call	PORT_Free_Util
		pop	ecx

loc_1000DDE5:				; CODE XREF: sub_1000D9F0+3E9j
		test	ebp, ebp
		jz	short loc_1000DDF0
		push	ebp
		call	PORT_Free_Util
		pop	ecx

loc_1000DDF0:				; CODE XREF: sub_1000D9F0+3F7j
		cmp	[esp+48h+var_38], 0
		jz	short loc_1000DE01
		push	[esp+48h+var_38]
		call	PORT_Free_Util
		pop	ecx

loc_1000DE01:				; CODE XREF: sub_1000D9F0+405j
		mov	eax, edi
		pop	edi

loc_1000DE04:				; CODE XREF: sub_1000D9F0+48j
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 38h
		retn
sub_1000D9F0	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000DE0B	proc near		; CODE XREF: legacy_AddSecmodDB+6Cp
					; legacy_AddSecmodDB+8Dp ...

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		cmp	dword ptr [esi], 0
		jz	short loc_1000DE1D
		push	dword ptr [esi]
		call	PORT_Free_Util
		pop	ecx

loc_1000DE1D:				; CODE XREF: sub_1000DE0B+8j
		and	dword ptr [esi], 0
		and	dword ptr [esi+4], 0
		pop	esi
		retn
sub_1000DE0B	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000DE26	proc near		; CODE XREF: sub_1000D465+527p
					; sub_1000D465+561p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		xor	esi, esi
		cmp	[esp+4+arg_4], esi
		jle	short loc_1000DE50
		push	edi
		mov	edi, [esp+8+arg_0]

loc_1000DE34:				; CODE XREF: sub_1000DE26+27j
		cmp	dword ptr [edi+esi*4], 0
		jz	short loc_1000DE48
		push	dword ptr [edi+esi*4]
		call	ds:PR_smprintf_free
		and	dword ptr [edi+esi*4], 0
		pop	ecx

loc_1000DE48:				; CODE XREF: sub_1000DE26+12j
		inc	esi
		cmp	esi, [esp+8+arg_4]
		jl	short loc_1000DE34
		pop	edi

loc_1000DE50:				; CODE XREF: sub_1000DE26+7j
		pop	esi
		retn
sub_1000DE26	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000DE52	proc near		; CODE XREF: legacy_AddSecmodDB+44p
					; legacy_DeleteSecmodDB+3Dp

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		push	[esp+4+arg_4]
		push	offset aName	; "name"
		call	NSSUTIL_ArgGetParamValue
		mov	esi, eax
		pop	ecx
		pop	ecx
		test	esi, esi
		jnz	short loc_1000DE84
		push	[esp+4+arg_4]
		push	offset aLibrary	; "library"
		call	NSSUTIL_ArgGetParamValue
		mov	esi, eax
		pop	ecx
		pop	ecx
		test	esi, esi
		jnz	short loc_1000DE84
		or	eax, 0FFFFFFFFh
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1000DE84:				; CODE XREF: sub_1000DE52+15j
					; sub_1000DE52+2Bj
		push	esi		; char *
		call	strlen
		pop	ecx
		mov	ecx, [esp+4+arg_0]
		mov	[ecx], esi
		mov	[ecx+4], eax
		xor	eax, eax
		pop	esi
		retn
sub_1000DE52	endp


; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1000DE98(int,	int, char *, int, int)
sub_1000DE98	proc near		; CODE XREF: legacy_AddSecmodDB+24p
					; legacy_DeleteSecmodDB+20p ...

var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	ecx
		cmp	[esp+4+arg_0], 0
		push	ebx
		push	esi
		push	edi
		jz	loc_1000DF8D
		push	ebp
		push	[esp+14h+arg_4]
		call	PORT_Strdup_Util
		mov	ebp, eax
		push	ebp		; char *
		call	strlen
		pop	ecx
		xor	ebx, ebx
		mov	[esp+18h+var_4], 1
		pop	ecx
		cmp	eax, 3
		jl	short loc_1000DEE2
		lea	esi, [eax-3]
		add	esi, ebp
		push	offset a_db	; ".db"
		push	esi		; char *
		call	strcmp
		pop	ecx
		pop	ecx
		test	eax, eax
		jnz	short loc_1000DEE2
		mov	[esi], bl

loc_1000DEE2:				; CODE XREF: sub_1000DE98+30j
					; sub_1000DE98+46j
		mov	edi, [esp+14h+arg_C]
		neg	edi
		push	ebx
		sbb	edi, edi
		and	edi, 0FFFFFFFEh
		add	edi, 2
		push	edi
		push	ebp
		push	offset dword_100133A8
		push	[esp+24h+arg_0]
		call	sub_10007A75
		add	esp, 14h
		mov	esi, eax
		cmp	[esp+14h+arg_10], ebx
		jz	short loc_1000DF83
		test	esi, esi
		jnz	short loc_1000DF83
		lea	eax, [esp+14h+var_4]
		push	eax
		push	302h
		push	ebp
		push	offset dword_100133A8
		push	[esp+24h+arg_0]
		call	sub_10007A75
		mov	esi, eax
		add	esp, 14h
		test	esi, esi
		jnz	short loc_1000DF51
		cmp	[esp+14h+var_4], 2
		jnz	short loc_1000DF83
		push	ebx
		push	edi
		push	ebp
		push	offset dword_100133A8
		push	[esp+24h+arg_0]
		call	sub_10007A75
		add	esp, 14h
		mov	esi, eax
		jmp	short loc_1000DF83
; ---------------------------------------------------------------------------

loc_1000DF51:				; CODE XREF: sub_1000DE98+98j
		push	ebx		; int
		push	1		; int
		push	180h		; int
		push	ebx		; int
		push	[esp+24h+arg_8]	; char *
		call	sub_1000E2C0
		mov	edi, eax
		add	esp, 14h
		test	edi, edi
		jz	short loc_1000DF7C
		push	edi
		push	esi
		call	sub_100073EF
		push	edi
		call	dword ptr [edi+4]
		add	esp, 0Ch
		jmp	short loc_1000DF83
; ---------------------------------------------------------------------------

loc_1000DF7C:				; CODE XREF: sub_1000DE98+D2j
		push	esi
		call	dword ptr [esi+4]
		pop	ecx
		mov	esi, ebx

loc_1000DF83:				; CODE XREF: sub_1000DE98+72j
					; sub_1000DE98+76j ...
		push	ebp
		call	PORT_Free_Util
		pop	ecx
		pop	ebp
		jmp	short loc_1000DFE1
; ---------------------------------------------------------------------------

loc_1000DF8D:				; CODE XREF: sub_1000DE98+9j
		mov	eax, [esp+10h+arg_C]
		xor	ebx, ebx
		neg	eax
		mov	edi, 180h
		push	ebx		; int
		sbb	eax, eax
		push	1		; int
		and	eax, 0FFFFFFFEh
		push	edi		; int
		add	eax, 2
		push	eax		; int
		push	[esp+20h+arg_8]	; char *
		call	sub_1000E2C0
		mov	esi, eax
		add	esp, 14h
		test	esi, esi
		jnz	short loc_1000DFE1
		cmp	[esp+10h+arg_C], ebx
		jnz	short loc_1000DFE3
		push	ebx		; int
		push	1		; int
		push	edi		; int
		push	302h		; int
		push	[esp+20h+arg_8]	; char *
		call	sub_1000E2C0
		mov	esi, eax
		add	esp, 14h
		test	esi, esi
		jz	short loc_1000DFE1
		push	ebx
		push	esi
		call	dword ptr [esi+18h]
		pop	ecx
		pop	ecx

loc_1000DFE1:				; CODE XREF: sub_1000DE98+F3j
					; sub_1000DE98+11Fj ...
		mov	eax, esi

loc_1000DFE3:				; CODE XREF: sub_1000DE98+125j
		pop	edi
		pop	esi
		pop	ebx
		pop	ecx
		retn
sub_1000DE98	endp

; ---------------------------------------------------------------------------
		align 20h

; =============== S U B	R O U T	I N E =======================================


sub_1000E000	proc near		; CODE XREF: sub_1000455F+19Ap
		mov	eax, dword_1001506C
		test	eax, eax
		jnz	short loc_1000E029
		push	offset loc_1000E100
		push	offset dword_10015070
		call	ds:PR_CallOnce
		add	esp, 8
		test	eax, eax
		jz	short loc_1000E024
		or	eax, 0FFFFFFFFh
		retn
; ---------------------------------------------------------------------------

loc_1000E024:				; CODE XREF: sub_1000E000+1Ej
		mov	eax, dword_1001506C

loc_1000E029:				; CODE XREF: sub_1000E000+7j
		mov	eax, [eax+8Ch]
		jmp	eax
sub_1000E000	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000E040	proc near		; CODE XREF: sub_10001C47+33p
					; sub_10005269+73p
		mov	eax, dword_1001506C
		test	eax, eax
		jnz	short loc_1000E069
		push	offset loc_1000E100
		push	offset dword_10015070
		call	ds:PR_CallOnce
		add	esp, 8
		test	eax, eax
		jz	short loc_1000E064
		or	eax, 0FFFFFFFFh
		retn
; ---------------------------------------------------------------------------

loc_1000E064:				; CODE XREF: sub_1000E040+1Ej
		mov	eax, dword_1001506C

loc_1000E069:				; CODE XREF: sub_1000E040+7j
		mov	eax, [eax+10Ch]
		jmp	eax
sub_1000E040	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000E080	proc near		; CODE XREF: sub_10005715+A3p
		mov	eax, dword_1001506C
		test	eax, eax
		jnz	short loc_1000E0A9
		push	offset loc_1000E100
		push	offset dword_10015070
		call	ds:PR_CallOnce
		add	esp, 8
		test	eax, eax
		jz	short loc_1000E0A4
		or	eax, 0FFFFFFFFh
		retn
; ---------------------------------------------------------------------------

loc_1000E0A4:				; CODE XREF: sub_1000E080+1Ej
		mov	eax, dword_1001506C

loc_1000E0A9:				; CODE XREF: sub_1000E080+7j
		mov	eax, [eax+124h]
		jmp	eax
sub_1000E080	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000E0C0	proc near		; CODE XREF: sub_100011D1+5Dp
					; sub_1000210B+83p ...
		mov	eax, dword_1001506C
		test	eax, eax
		jnz	short loc_1000E0E9
		push	offset loc_1000E100
		push	offset dword_10015070
		call	ds:PR_CallOnce
		add	esp, 8
		test	eax, eax
		jz	short loc_1000E0E4
		or	eax, 0FFFFFFFFh
		retn
; ---------------------------------------------------------------------------

loc_1000E0E4:				; CODE XREF: sub_1000E0C0+1Ej
		mov	eax, dword_1001506C

loc_1000E0E9:				; CODE XREF: sub_1000E0C0+7j
		mov	eax, [eax+0DCh]
		jmp	eax
sub_1000E0C0	endp

; ---------------------------------------------------------------------------
		align 10h

loc_1000E100:				; DATA XREF: sub_1000E000+9o
					; sub_1000E040+9o ...
		push	edi
		mov	edi, off_10015008
		test	edi, edi
		jnz	short loc_1000E11F
		push	edi
		push	0FFFFE8A7h
		call	ds:PR_SetError
		add	esp, 8
		or	eax, 0FFFFFFFFh
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_1000E11F:				; CODE XREF: .text:1000E109j
		push	esi
		push	edi
		call	sub_1000E250
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		jz	short loc_1000E18D
		push	offset aFreebl_getvect ; "FREEBL_GetVector"
		push	esi
		call	ds:PR_FindFunctionSymbol
		add	esp, 8
		test	eax, eax
		jz	short loc_1000E183
		call	eax
		mov	edx, eax
		test	edx, edx
		jz	short loc_1000E183
		movzx	eax, word ptr [edx+2]
		mov	ecx, eax
		and	ecx, 0FF00h
		cmp	ecx, 300h
		jnz	short loc_1000E183
		cmp	al, 11h
		jb	short loc_1000E183
		mov	eax, 348h
		cmp	[edx], ax
		jb	short loc_1000E183
		mov	dword_10015068,	esi
		xor	eax, eax
		pop	esi
		mov	dword_10015064,	edi
		mov	dword_1001506C,	edx
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_1000E183:				; CODE XREF: .text:1000E140j
					; .text:1000E148j ...
		push	esi
		call	ds:PR_UnloadLibrary
		add	esp, 4

loc_1000E18D:				; CODE XREF: .text:1000E12Dj
		pop	esi
		or	eax, 0FFFFFFFFh
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1000E1A0(char	*, int)
sub_1000E1A0	proc near		; CODE XREF: sub_1000E250+26p

var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 0Ch
		push	ebx
		push	ebp
		push	esi
		push	edi
		call	ds:PR_GetDirectorySeparator
		mov	ebp, [esp+1Ch+arg_0]
		movsx	eax, al
		push	eax		; int
		push	ebp		; char *
		call	ds:strrchr
		mov	edi, eax
		add	esp, 8
		test	edi, edi
		jz	short loc_1000E23F
		mov	esi, [esp+1Ch+arg_4]
		sub	edi, ebp
		mov	ecx, esi
		inc	edi
		lea	edx, [ecx+1]

loc_1000E1D1:				; CODE XREF: sub_1000E1A0+36j
		mov	al, [ecx]
		inc	ecx
		test	al, al
		jnz	short loc_1000E1D1
		sub	ecx, edx
		lea	eax, [edi+1]
		add	eax, ecx
		push	eax
		call	PORT_Alloc_Util
		mov	ebx, eax
		add	esp, 4
		test	ebx, ebx
		jz	short loc_1000E23F
		push	edi		; size_t
		push	ebp		; void *
		push	ebx		; void *
		call	memcpy
		lea	ecx, [edi+ebx]
		add	esp, 0Ch
		sub	ecx, esi
		mov	edi, edi

loc_1000E200:				; CODE XREF: sub_1000E1A0+6Bj
		mov	al, [esi]
		lea	esi, [esi+1]
		mov	[ecx+esi-1], al
		test	al, al
		jnz	short loc_1000E200
		mov	eax, [esp+1Ch+var_4]
		push	0Ah
		sub	esp, 0Ch
		mov	ecx, esp
		mov	dword ptr [ecx], 0
		mov	[ecx+4], ebx
		mov	[ecx+8], eax
		call	ds:PR_LoadLibraryWithFlags
		push	ebx
		mov	esi, eax
		call	PORT_Free_Util
		add	esp, 14h
		mov	eax, esi
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_1000E23F:				; CODE XREF: sub_1000E1A0+23j
					; sub_1000E1A0+4Cj
		pop	edi
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		add	esp, 0Ch
		retn
sub_1000E1A0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000E250	proc near		; CODE XREF: .text:1000E121p
					; DATA XREF: sub_1000E250+6o

var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		sub	esp, 0Ch
		push	ebx
		push	esi
		push	edi
		push	offset sub_1000E250
		push	off_10015004
		call	ds:PR_GetLibraryFilePathname
		mov	ebx, [esp+20h+arg_0]
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		jz	short loc_1000E294
		push	ebx		; int
		push	esi		; char *
		call	sub_1000E1A0
		push	esi
		mov	edi, eax
		call	ds:PR_Free
		add	esp, 0Ch
		test	edi, edi
		jz	short loc_1000E294
		mov	eax, edi
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_1000E294:				; CODE XREF: sub_1000E250+22j
					; sub_1000E250+39j
		mov	eax, [esp+18h+var_4]
		push	0Ah
		sub	esp, 0Ch
		mov	ecx, esp
		mov	dword ptr [ecx], 0
		mov	[ecx+4], ebx
		mov	[ecx+8], eax
		call	ds:PR_LoadLibraryWithFlags
		add	esp, 10h
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0Ch
		retn
sub_1000E250	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1000E2C0(char	*, int,	int, int, int)
sub_1000E2C0	proc near		; CODE XREF: sub_100015E5+53p
					; sub_100024FC+60p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		cmp	dword_1001507C,	0
		mov	edx, [esp+arg_0]
		jz	short loc_1000E2D1
		test	edx, edx
		jnz	short loc_1000E304

loc_1000E2D1:				; CODE XREF: sub_1000E2C0+Bj
		mov	ecx, [esp+arg_4]
		test	ecx, 1FFFF8FDh
		jnz	short loc_1000E304
		dec	[esp+arg_C]
		jnz	short loc_1000E304
		mov	eax, ecx
		and	ecx, 702h
		and	eax, 0E0000000h
		push	eax
		push	[esp+4+arg_10]	; int
		push	[esp+8+arg_8]	; int
		push	ecx		; int
		push	edx		; char *
		call	sub_1000E410
		add	esp, 14h
		retn
; ---------------------------------------------------------------------------

loc_1000E304:				; CODE XREF: sub_1000E2C0+Fj
					; sub_1000E2C0+1Bj ...
		call	ds:_errno
		mov	dword ptr [eax], 16h
		xor	eax, eax
		retn
sub_1000E2C0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000E320	proc near		; CODE XREF: sub_100108D0+BAp
					; sub_10011220+20Cp ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi
		mov	esi, [esp+4+arg_0]
		push	[esp+4+arg_8]
		push	[esp+8+arg_4]
		mov	eax, [esi+10Ch]
		call	eax
		mov	ecx, [esi+2Ch]
		add	esp, 8
		and	ecx, eax
		cmp	ecx, [esi+28h]
		jbe	short loc_1000E345
		and	ecx, [esi+30h]

loc_1000E345:				; CODE XREF: sub_1000E320+20j
		mov	eax, ecx
		pop	esi
		retn
sub_1000E320	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1000E350(size_t)
sub_1000E350	proc near		; CODE XREF: sub_1000FFF0+EDp

arg_0		= dword	ptr  4

		push	ebx
		push	ebp
		push	esi
		mov	esi, [esp+0Ch+arg_0]
		push	edi
		inc	dword ptr [esi+28h]
		mov	edi, [esi+28h]
		mov	ebp, edi
		mov	ecx, [esi+1Ch]
		mov	ebx, edi
		and	ebp, [esi+30h]
		shr	ebx, cl
		cmp	ebx, [esi+104h]
		jl	short loc_1000E3CE
		mov	eax, [esi+14h]
		cmp	ebx, eax
		jl	short loc_1000E3A7
		shl	eax, 2
		lea	ecx, [eax+eax]
		push	ecx		; size_t
		push	eax		; size_t
		lea	eax, [esi+1DCh]
		mov	[esp+18h+arg_0], ecx
		push	eax		; int
		call	sub_1000EE60
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_1000E3A0

loc_1000E398:				; CODE XREF: sub_1000E350+70j
		pop	edi
		pop	esi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1000E3A0:				; CODE XREF: sub_1000E350+46j
		mov	eax, [esp+10h+arg_0]
		mov	[esi+14h], eax

loc_1000E3A7:				; CODE XREF: sub_1000E350+27j
		push	4		; size_t
		push	dword ptr [esi+18h] ; size_t
		call	ds:calloc
		mov	ecx, [esi+1DCh]
		add	esp, 8
		mov	[ecx+ebx*4], eax
		test	eax, eax
		jz	short loc_1000E398
		inc	dword ptr [esi+108h]
		inc	dword ptr [esi+104h]

loc_1000E3CE:				; CODE XREF: sub_1000E350+20j
		mov	eax, [esi+28h]
		inc	eax
		push	eax
		call	sub_1000FF30
		mov	ecx, [esi+20h]
		add	esp, 4
		cmp	eax, ecx
		jle	short loc_1000E3ED
		mov	ecx, [esi+ecx*4+44h]
		mov	[esi+eax*4+44h], ecx
		mov	[esi+20h], eax

loc_1000E3ED:				; CODE XREF: sub_1000E350+90j
		mov	eax, [esi+2Ch]
		cmp	edi, eax
		jbe	short loc_1000E3FC
		mov	[esi+30h], eax
		or	eax, edi
		mov	[esi+2Ch], eax

loc_1000E3FC:				; CODE XREF: sub_1000E350+A2j
		push	edi		; int
		push	ebp		; int
		push	esi		; size_t
		call	sub_100108D0
		add	esp, 0Ch
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
sub_1000E350	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1000E410(char	*, int,	int, int)
sub_1000E410	proc near		; CODE XREF: sub_1000E2C0+3Bp

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= byte ptr -34h
var_20		= dword	ptr -20h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 3Ch
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+3Ch+var_4], eax
		mov	eax, [esp+3Ch+arg_C]
		push	ebp
		mov	ebp, [esp+40h+arg_4]
		mov	[esp+40h+var_38], eax
		mov	eax, ebp
		and	al, 3
		push	edi
		mov	edi, [esp+44h+arg_0]
		cmp	al, 1
		jnz	short loc_1000E457
		call	ds:_errno
		pop	edi
		pop	ebp
		mov	dword ptr [eax], 16h
		xor	eax, eax
		mov	ecx, [esp+3Ch+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 3Ch
		retn
; ---------------------------------------------------------------------------

loc_1000E457:				; CODE XREF: sub_1000E410+26j
		push	esi
		push	30h		; size_t
		lea	eax, [esp+4Ch+var_34]
		push	0		; int
		push	eax		; void *
		call	memset
		push	1E8h		; size_t
		push	1		; size_t
		call	ds:calloc
		mov	esi, eax
		add	esp, 14h
		test	esi, esi
		jnz	short loc_1000E49C
		call	ds:_errno
		pop	esi
		pop	edi
		pop	ebp
		mov	dword ptr [eax], 0Ch
		xor	eax, eax
		mov	ecx, [esp+3Ch+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 3Ch
		retn
; ---------------------------------------------------------------------------

loc_1000E49C:				; CODE XREF: sub_1000E410+6Aj
		mov	dword ptr [esi+114h], 0FFFFFFFFh
		test	edi, edi
		jz	short loc_1000E4BA
		push	edi		; char *
		call	ds:strdup
		add	esp, 4
		mov	[esi+118h], eax

loc_1000E4BA:				; CODE XREF: sub_1000E410+98j
		mov	[esi+110h], ebp
		mov	[esp+48h+var_3C], 0
		push	ebx
		mov	ebx, ds:_errno
		test	edi, edi
		jz	short loc_1000E508
		test	ebp, 200h
		jnz	short loc_1000E508
		lea	eax, [esp+4Ch+var_34]
		push	eax
		push	edi
		call	ds:_stat64i32
		add	esp, 8
		test	eax, eax
		jz	short loc_1000E4F5
		call	ebx ; _errno
		cmp	dword ptr [eax], 2
		jz	short loc_1000E508

loc_1000E4F5:				; CODE XREF: sub_1000E410+DCj
		mov	eax, [esp+4Ch+var_14]
		or	eax, [esp+4Ch+var_10]
		jz	short loc_1000E51F
		cmp	[esp+4Ch+var_20], 0
		jnz	short loc_1000E51F
		jmp	short loc_1000E517
; ---------------------------------------------------------------------------

loc_1000E508:				; CODE XREF: sub_1000E410+C1j
					; sub_1000E410+C9j ...
		call	ebx ; _errno
		cmp	dword ptr [eax], 2
		jnz	short loc_1000E517
		call	ebx ; _errno
		mov	dword ptr [eax], 0

loc_1000E517:				; CODE XREF: sub_1000E410+F6j
					; sub_1000E410+FDj
		mov	[esp+4Ch+var_3C], 1

loc_1000E51F:				; CODE XREF: sub_1000E410+EDj
					; sub_1000E410+F4j
		mov	eax, [esp+4Ch+var_20]
		mov	[esi+1E0h], eax
		test	edi, edi
		jz	short loc_1000E54D
		push	[esp+4Ch+arg_8]
		or	ebp, 8000h
		push	ebp		; int
		push	edi		; char *
		call	ds:_open
		add	esp, 0Ch
		mov	[esi+114h], eax
		cmp	eax, 0FFFFFFFFh
		jz	short loc_1000E56B

loc_1000E54D:				; CODE XREF: sub_1000E410+11Bj
		cmp	[esp+4Ch+var_3C], 0
		mov	ebp, [esp+4Ch+var_38]
		jz	short loc_1000E591
		push	ebp
		push	edi
		push	esi
		call	sub_1000F2B0
		add	esp, 0Ch
		test	eax, eax
		jnz	loc_1000E681

loc_1000E56B:				; CODE XREF: sub_1000E410+13Bj
					; sub_1000E410+1AFj ...
		call	ebx ; _errno
		push	esi		; void *
		mov	edi, [eax]
		call	sub_1000F160
		add	esp, 4
		call	ebx ; _errno
		pop	ebx
		pop	esi
		mov	[eax], edi
		xor	eax, eax
		pop	edi
		pop	ebp
		mov	ecx, [esp+3Ch+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 3Ch
		retn
; ---------------------------------------------------------------------------

loc_1000E591:				; CODE XREF: sub_1000E410+146j
		test	ebp, ebp
		jz	short loc_1000E59C
		mov	eax, [ebp+10h]
		test	eax, eax
		jnz	short loc_1000E5A1

loc_1000E59C:				; CODE XREF: sub_1000E410+183j
		mov	eax, off_1001500C

loc_1000E5A1:				; CODE XREF: sub_1000E410+18Aj
		push	104h		; unsigned int
		push	esi		; void *
		push	dword ptr [esi+114h] ; int
		mov	[esi+10Ch], eax
		call	ds:_read
		add	esp, 0Ch
		cmp	eax, 0FFFFFFFFh
		jz	short loc_1000E56B
		cmp	eax, 104h
		jz	short loc_1000E5EF

loc_1000E5C8:				; CODE XREF: sub_1000E410+1EEj
					; sub_1000E410+1FBj ...
		push	esi		; void *
		mov	edi, 16h
		call	sub_1000F160
		add	esp, 4
		call	ebx ; _errno
		pop	ebx
		pop	esi
		mov	[eax], edi
		xor	eax, eax
		pop	edi
		pop	ebp
		mov	ecx, [esp+3Ch+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 3Ch
		retn
; ---------------------------------------------------------------------------

loc_1000E5EF:				; CODE XREF: sub_1000E410+1B6j
		push	esi
		call	sub_1000F4C0
		add	esp, 4
		cmp	dword ptr [esi], 61561h
		jnz	short loc_1000E5C8
		mov	eax, [esi+4]
		cmp	eax, 2
		jz	short loc_1000E60D
		cmp	eax, 1
		jnz	short loc_1000E5C8

loc_1000E60D:				; CODE XREF: sub_1000E410+1F6j
		mov	eax, [esi+10Ch]
		push	0Ch
		push	offset aSniglet	; "%$sniglet^&"
		call	eax
		add	esp, 8
		cmp	eax, [esi+40h]
		jnz	short loc_1000E5C8
		cmp	dword ptr [esi+38h], 0
		jl	short loc_1000E5C8
		mov	eax, [esi+28h]
		add	eax, [esi+18h]
		cdq
		idiv	dword ptr [esi+18h]
		mov	dword ptr [esi+104h], 0
		push	eax
		push	esi
		call	sub_1000E750
		add	esp, 8
		test	eax, eax
		jnz	loc_1000E56B
		mov	eax, [esi+20h]
		mov	ecx, [esi+0Ch]
		mov	eax, [esi+eax*4+44h]
		lea	eax, [eax+ecx*8]
		mov	ecx, [esi+10h]
		dec	eax
		add	ecx, 3
		sar	eax, cl
		mov	[esi+1BCh], eax
		shl	eax, 2
		push	eax		; size_t
		lea	eax, [esi+13Ch]
		push	0		; int
		push	eax		; void *
		call	memset
		add	esp, 0Ch

loc_1000E681:				; CODE XREF: sub_1000E410+155j
		test	ebp, ebp
		jz	short loc_1000E68F
		mov	eax, [ebp+0Ch]
		test	eax, eax
		jz	short loc_1000E68F
		push	eax
		jmp	short loc_1000E694
; ---------------------------------------------------------------------------

loc_1000E68F:				; CODE XREF: sub_1000E410+273j
					; sub_1000E410+27Aj
		push	10000h

loc_1000E694:				; CODE XREF: sub_1000E410+27Dj
		push	esi
		call	sub_1000FA80
		mov	eax, [esp+54h+var_3C]
		add	esp, 8
		mov	[esi+134h], eax
		test	edi, edi
		jz	short loc_1000E6BB
		test	byte ptr [esi+110h], 2
		jz	short loc_1000E6BB
		mov	eax, 1
		jmp	short loc_1000E6BD
; ---------------------------------------------------------------------------

loc_1000E6BB:				; CODE XREF: sub_1000E410+299j
					; sub_1000E410+2A2j
		xor	eax, eax

loc_1000E6BD:				; CODE XREF: sub_1000E410+2A9j
		push	24h		; size_t
		mov	[esi+138h], eax
		mov	dword ptr [esi+128h], 0FFFFFFFFh
		call	ds:malloc
		add	esp, 4
		test	eax, eax
		jnz	short loc_1000E701
		push	esi		; void *
		lea	edi, [eax+0Ch]
		call	sub_1000F160
		add	esp, 4
		call	ebx ; _errno
		pop	ebx
		pop	esi
		mov	[eax], edi
		xor	eax, eax
		pop	edi
		pop	ebp
		mov	ecx, [esp+3Ch+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 3Ch
		retn
; ---------------------------------------------------------------------------

loc_1000E701:				; CODE XREF: sub_1000E410+2CAj
		mov	ecx, [esp+4Ch+var_4]
		pop	ebx
		mov	[eax+1Ch], esi
		pop	esi
		pop	edi
		pop	ebp
		xor	ecx, esp
		mov	dword ptr [eax+4], offset loc_1000EC50
		mov	dword ptr [eax+8], offset loc_1000EC80
		mov	dword ptr [eax+20h], offset loc_1000ED20
		mov	dword ptr [eax+0Ch], offset loc_1000ED50
		mov	dword ptr [eax+10h], offset loc_1000EDC0
		mov	dword ptr [eax+14h], offset loc_1000EEB0
		mov	dword ptr [eax+18h], offset loc_1000F0D0
		mov	dword ptr [eax], 1
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 3Ch
		retn
sub_1000E410	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000E750	proc near		; CODE XREF: sub_1000E410+230p
					; sub_1000F410+9Ap

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebx
		mov	ebx, ds:calloc
		push	esi
		mov	esi, [esp+8+arg_0]
		push	4		; size_t
		push	dword ptr [esi+14h] ; size_t
		call	ebx ; calloc
		add	esp, 8
		mov	[esi+1DCh], eax
		test	eax, eax
		jnz	short loc_1000E782
		call	ds:_errno
		pop	esi
		pop	ebx
		mov	dword ptr [eax], 0Ch
		or	eax, 0FFFFFFFFh
		retn
; ---------------------------------------------------------------------------

loc_1000E782:				; CODE XREF: sub_1000E750+1Ej
		mov	ecx, [esi+1Ch]
		push	edi
		mov	edi, [esp+0Ch+arg_4]
		mov	eax, edi
		shl	eax, cl
		push	4		; size_t
		push	eax		; size_t
		call	ebx ; calloc
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		jnz	short loc_1000E7AF
		call	ds:_errno
		pop	edi
		pop	esi
		pop	ebx
		mov	dword ptr [eax], 0Ch
		or	eax, 0FFFFFFFFh
		retn
; ---------------------------------------------------------------------------

loc_1000E7AF:				; CODE XREF: sub_1000E750+4Aj
		xor	edx, edx
		test	edi, edi
		jle	short loc_1000E7D3

loc_1000E7B5:				; CODE XREF: sub_1000E750+81j
		mov	ecx, [esi+1Ch]
		mov	eax, edx
		shl	eax, cl
		lea	ecx, [ebx+eax*4]
		mov	eax, [esi+1DCh]
		mov	[eax+edx*4], ecx
		inc	edx
		inc	dword ptr [esi+104h]
		cmp	edx, edi
		jl	short loc_1000E7B5

loc_1000E7D3:				; CODE XREF: sub_1000E750+63j
		pop	edi
		pop	esi
		xor	eax, eax
		pop	ebx
		retn
sub_1000E750	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000E7E0	proc near		; CODE XREF: .text:1000F112p
					; sub_1000F160+8Dp

var_108		= byte ptr -108h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		sub	esp, 108h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+108h+var_4], eax
		push	ebx
		mov	ebx, [esp+10Ch+arg_0]
		cmp	dword ptr [ebx+138h], 0
		jnz	short loc_1000E81D
		xor	eax, eax
		pop	ebx
		mov	ecx, [esp+108h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 108h
		retn
; ---------------------------------------------------------------------------

loc_1000E81D:				; CODE XREF: sub_1000E7E0+23j
		mov	eax, [ebx+10Ch]
		push	esi
		push	0Ch
		push	offset aSniglet	; "%$sniglet^&"
		mov	dword ptr [ebx], 61561h
		mov	dword ptr [ebx+4], 2
		call	eax
		mov	esi, [ebx+114h]
		mov	[ebx+40h], eax
		lea	eax, [esp+118h+var_108]
		push	eax
		push	ebx
		call	sub_1000F710
		push	0		; int
		push	0		; __int32
		push	esi		; int
		call	ds:_lseek
		add	esp, 1Ch
		cmp	eax, 0FFFFFFFFh
		jz	short loc_1000E899
		push	104h		; unsigned int
		lea	eax, [esp+114h+var_108]
		push	eax		; void *
		push	esi		; int
		call	ds:_write
		add	esp, 0Ch
		cmp	eax, 0FFFFFFFFh
		jz	short loc_1000E899
		cmp	eax, 104h
		jz	short loc_1000E8B3
		mov	esi, ds:_errno
		call	esi ; _errno
		mov	dword ptr [eax], 16h
		call	esi ; _errno
		mov	eax, [eax]
		mov	[ebx+130h], eax

loc_1000E899:				; CODE XREF: sub_1000E7E0+7Fj
					; sub_1000E7E0+98j
		pop	esi
		or	eax, 0FFFFFFFFh
		pop	ebx
		mov	ecx, [esp+108h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 108h
		retn
; ---------------------------------------------------------------------------

loc_1000E8B3:				; CODE XREF: sub_1000E7E0+9Fj
		push	ebp
		push	edi
		xor	esi, esi
		lea	edi, [ebx+13Ch]
		lea	ebp, [ebx+0C4h]

loc_1000E8C3:				; CODE XREF: sub_1000E7E0+10Aj
		mov	ecx, [edi]
		test	ecx, ecx
		jz	short loc_1000E8E0
		movzx	eax, word ptr [ebp+0]
		push	1		; int
		push	0		; int
		push	eax		; int
		push	ecx		; void *
		push	ebx		; int
		call	sub_100105F0
		add	esp, 14h
		test	eax, eax
		jnz	short loc_1000E907

loc_1000E8E0:				; CODE XREF: sub_1000E7E0+E7j
		inc	esi
		add	ebp, 2
		add	edi, 4
		cmp	esi, 20h
		jl	short loc_1000E8C3
		xor	eax, eax

loc_1000E8EE:				; CODE XREF: sub_1000E7E0+12Aj
		mov	ecx, [esp+118h+var_4]
		pop	edi
		pop	ebp
		pop	esi
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 108h
		retn
; ---------------------------------------------------------------------------

loc_1000E907:				; CODE XREF: sub_1000E7E0+FEj
		or	eax, 0FFFFFFFFh
		jmp	short loc_1000E8EE
sub_1000E7E0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1000E910(size_t, int,	void *,	int)
sub_1000E910	proc near		; CODE XREF: .text:1000ECE4p
					; .text:1000ED8Bp ...

var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 20h
		mov	ecx, [esp+20h+arg_8]
		push	esi
		push	edi
		mov	edi, [esp+28h+arg_0]
		mov	[esp+28h+var_8], 0
		mov	[esp+28h+var_C], 0FFFFFFFFh
		mov	eax, [edi+0Ch]
		mov	[esp+28h+var_1C], eax
		mov	eax, [ecx+4]
		mov	ecx, [ecx]
		push	eax
		mov	[esp+2Ch+var_18], eax
		mov	eax, [edi+10Ch]
		push	ecx
		mov	[esp+30h+var_4], ecx
		call	eax
		mov	ecx, [edi+2Ch]
		add	esp, 8
		and	ecx, eax
		cmp	ecx, [edi+28h]
		jbe	short loc_1000E95B
		and	ecx, [edi+30h]

loc_1000E95B:				; CODE XREF: sub_1000E910+46j
		push	0
		push	0
		push	ecx
		push	edi
		call	sub_1000FAB0
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		jnz	short loc_1000E97A
		pop	edi
		mov	eax, 0FFFFFC19h
		pop	esi
		add	esp, 20h
		retn
; ---------------------------------------------------------------------------

loc_1000E97A:				; CODE XREF: sub_1000E910+5Dj
		or	byte ptr [esi+15h], 8
		lea	ecx, [esi+15h]
		push	ebx
		mov	ebx, [esi+10h]
		push	ebp
		mov	ebp, 1
		mov	[esp+30h+var_20], ecx
		movzx	edx, word ptr [ebx]
		add	ebx, 2
		mov	[esp+30h+var_14], edx
		cmp	edx, ebp
		jle	loc_1000EB1D

loc_1000E9A1:				; CODE XREF: sub_1000E910+1E5j
		movzx	eax, word ptr [ebx+2]
		cmp	eax, 4
		jb	loc_1000EA3E
		movzx	edx, word ptr [ebx]
		mov	eax, [esp+30h+var_1C]
		sub	eax, edx
		cmp	[esp+30h+var_18], eax
		jnz	short loc_1000EA2B
		mov	ecx, [esi+10h]
		mov	edi, [esp+30h+var_18]
		add	ecx, edx
		mov	edx, [esp+30h+var_4]
		sub	edi, 4
		jb	short loc_1000E9E1
		nop

loc_1000E9D0:				; CODE XREF: sub_1000E910+CFj
		mov	eax, [edx]
		cmp	eax, [ecx]
		jnz	short loc_1000E9EA
		add	edx, 4
		add	ecx, 4
		sub	edi, 4
		jnb	short loc_1000E9D0

loc_1000E9E1:				; CODE XREF: sub_1000E910+BDj
		cmp	edi, 0FFFFFFFCh
		jz	loc_1000EAFD

loc_1000E9EA:				; CODE XREF: sub_1000E910+C4j
		mov	al, [edx]
		cmp	al, [ecx]
		jnz	short loc_1000EA27
		cmp	edi, 0FFFFFFFDh
		jz	loc_1000EAFD
		mov	al, [edx+1]
		cmp	al, [ecx+1]
		jnz	short loc_1000EA27
		cmp	edi, 0FFFFFFFEh
		jz	loc_1000EAFD
		mov	al, [edx+2]
		cmp	al, [ecx+2]
		jnz	short loc_1000EA27
		cmp	edi, 0FFFFFFFFh
		jz	loc_1000EAFD
		mov	al, [edx+3]
		cmp	al, [ecx+3]
		jz	loc_1000EAFD

loc_1000EA27:				; CODE XREF: sub_1000E910+DEj
					; sub_1000E910+EFj ...
		mov	edi, [esp+30h+arg_0]

loc_1000EA2B:				; CODE XREF: sub_1000E910+ABj
		movzx	eax, word ptr [ebx+2]
		add	ebx, 4
		mov	edx, [esp+30h+var_14]
		add	ebp, 2
		jmp	loc_1000EAEF
; ---------------------------------------------------------------------------

loc_1000EA3E:				; CODE XREF: sub_1000E910+98j
		test	ax, ax
		jnz	short loc_1000EA84
		movzx	eax, word ptr [ebx]
		cmp	[esp+30h+var_C], eax
		jz	short loc_1000EA77
		push	0
		push	esi
		push	eax
		push	edi
		mov	[esp+40h+var_C], eax
		call	sub_1000FAB0
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		jz	loc_1000EBE8
		mov	eax, [esp+30h+var_8]
		inc	eax
		mov	[esp+30h+var_8], eax
		cmp	eax, 7D0h
		jbe	short loc_1000EADA

loc_1000EA77:				; CODE XREF: sub_1000E910+13Aj
		pop	ebp
		pop	ebx
		pop	edi
		mov	eax, 0FFFFFC19h
		pop	esi
		add	esp, 20h
		retn
; ---------------------------------------------------------------------------

loc_1000EA84:				; CODE XREF: sub_1000E910+131j
		push	[esp+30h+var_18]
		push	[esp+34h+var_4]
		push	ebp
		push	esi
		push	edi
		call	sub_10011CB0
		mov	ebp, eax
		add	esp, 14h
		test	ebp, ebp
		jg	short loc_1000EB01
		cmp	ebp, 0FFFFFFFEh
		jnz	loc_1000EBE8
		lea	eax, [esp+30h+var_10]
		mov	[esp+30h+var_10], esi
		push	eax
		push	edi
		call	sub_10011E30
		movzx	eax, ax
		add	esp, 8
		test	ax, ax
		jz	short loc_1000EB15
		push	0
		push	[esp+34h+var_10]
		push	eax
		push	edi
		call	sub_1000FAB0
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		jz	loc_1000EBE8

loc_1000EADA:				; CODE XREF: sub_1000E910+165j
		mov	ebx, [esi+10h]
		mov	ebp, 1
		mov	eax, [edi+0Ch]
		movzx	edx, word ptr [ebx]
		add	ebx, 2
		mov	[esp+30h+var_14], edx

loc_1000EAEF:				; CODE XREF: sub_1000E910+129j
		mov	[esp+30h+var_1C], eax
		cmp	ebp, edx
		jl	loc_1000E9A1
		jmp	short loc_1000EB19
; ---------------------------------------------------------------------------

loc_1000EAFD:				; CODE XREF: sub_1000E910+D4j
					; sub_1000E910+E3j ...
		mov	edi, [esp+30h+arg_0]

loc_1000EB01:				; CODE XREF: sub_1000E910+18Bj
		mov	eax, [esp+30h+arg_4]
		cmp	eax, 3		; switch 4 cases
		ja	loc_1000EC1E	; jumptable 1000EB0E default case
		jmp	ds:off_1000EC34[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_1000EB15:				; CODE XREF: sub_1000E910+1AEj
		mov	esi, [esp+30h+var_10]

loc_1000EB19:				; CODE XREF: sub_1000E910+1EBj
		mov	ecx, [esp+30h+var_20]

loc_1000EB1D:				; CODE XREF: sub_1000E910+8Bj
		mov	eax, [esp+30h+arg_4]
		dec	eax
		cmp	eax, 1
		ja	loc_1000EC24
		push	[esp+30h+arg_C]	; int
		push	[esp+34h+arg_8]	; void *
		push	esi		; int
		push	edi		; size_t
		call	sub_1000FFF0
		add	esp, 10h
		test	eax, eax
		mov	eax, [esp+30h+var_20]
		jz	loc_1000EC11
		and	byte ptr [eax],	0F7h

loc_1000EB4C:				; CODE XREF: sub_1000E910+2F7j
		pop	ebp
		pop	ebx
		pop	edi
		or	eax, 0FFFFFFFFh
		pop	esi
		add	esp, 20h
		retn
; ---------------------------------------------------------------------------

loc_1000EB57:				; CODE XREF: sub_1000E910+1FEj
					; DATA XREF: .text:off_1000EC34o
		mov	eax, [esp+30h+var_20] ;	jumptable 1000EB0E case	2
		pop	ebp
		pop	ebx
		pop	edi
		and	byte ptr [eax],	0F7h
		mov	eax, 1
		pop	esi
		add	esp, 20h
		retn
; ---------------------------------------------------------------------------

loc_1000EB6B:				; CODE XREF: sub_1000E910+1FEj
					; DATA XREF: .text:off_1000EC34o
		mov	ecx, [esi+10h]	; jumptable 1000EB0E case 0
		movzx	eax, word ptr [ecx+ebp*2+2]
		cmp	eax, 4
		jnb	short loc_1000EB9C
		push	0
		push	[esp+34h+arg_C]
		push	ebp
		push	esi
		push	edi
		call	sub_10011930
		add	esp, 14h
		test	eax, eax
		jz	loc_1000EC0D
		pop	ebp
		pop	ebx
		pop	edi
		or	eax, 0FFFFFFFFh
		pop	esi
		add	esp, 20h
		retn
; ---------------------------------------------------------------------------

loc_1000EB9C:				; CODE XREF: sub_1000E910+266j
		mov	edx, [esp+30h+arg_C]
		add	eax, ecx
		mov	[edx], eax
		movzx	eax, word ptr [ecx+ebp*2+2]
		movzx	ecx, word ptr [ecx+ebp*2]
		sub	ecx, eax
		mov	eax, [esp+30h+var_20]
		pop	ebp
		pop	ebx
		mov	[edx+4], ecx
		and	byte ptr [eax],	0F7h
		xor	eax, eax
		pop	edi
		pop	esi
		add	esp, 20h
		retn
; ---------------------------------------------------------------------------

loc_1000EBC3:				; CODE XREF: sub_1000E910+1FEj
					; DATA XREF: .text:off_1000EC34o
		push	ebp		; jumptable 1000EB0E case 1
		push	esi
		push	edi
		call	sub_10010160
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_1000EBE8
		push	[esp+30h+arg_C]	; int
		push	[esp+34h+arg_8]	; void *
		push	esi		; int
		push	edi		; size_t
		call	sub_1000FFF0
		add	esp, 10h
		test	eax, eax
		jz	short loc_1000EC0D

loc_1000EBE8:				; CODE XREF: sub_1000E910+151j
					; sub_1000E910+190j ...
		mov	eax, [esp+30h+var_20]
		pop	ebp
		pop	ebx
		pop	edi
		and	byte ptr [eax],	0F7h
		or	eax, 0FFFFFFFFh
		pop	esi
		add	esp, 20h
		retn
; ---------------------------------------------------------------------------

loc_1000EBFA:				; CODE XREF: sub_1000E910+1FEj
					; DATA XREF: .text:off_1000EC34o
		push	ebp		; jumptable 1000EB0E case 3
		push	esi
		push	edi
		call	sub_10010160
		add	esp, 0Ch
		test	eax, eax
		jnz	loc_1000EB4C

loc_1000EC0D:				; CODE XREF: sub_1000E910+27Bj
					; sub_1000E910+2D6j
		mov	eax, [esp+30h+var_20]

loc_1000EC11:				; CODE XREF: sub_1000E910+233j
		and	byte ptr [eax],	0F7h
		xor	eax, eax
		pop	ebp
		pop	ebx
		pop	edi
		pop	esi
		add	esp, 20h
		retn
; ---------------------------------------------------------------------------

loc_1000EC1E:				; CODE XREF: sub_1000E910+1F8j
		call	ds:abort	; jumptable 1000EB0E default case
; ---------------------------------------------------------------------------

loc_1000EC24:				; CODE XREF: sub_1000E910+215j
		and	byte ptr [ecx],	0F7h
		mov	eax, 1
		pop	ebp
		pop	ebx
		pop	edi
		pop	esi
		add	esp, 20h
		retn
sub_1000E910	endp

; ---------------------------------------------------------------------------
off_1000EC34	dd offset loc_1000EB6B	; DATA XREF: sub_1000E910+1FEr
		dd offset loc_1000EBC3	; jump table for switch	statement
		dd offset loc_1000EB57
		dd offset loc_1000EBFA
		align 10h

loc_1000EC50:				; DATA XREF: sub_1000E410+2FEo
		push	edi
		mov	edi, [esp+8]
		test	edi, edi
		jnz	short loc_1000EC5E

loc_1000EC59:				; CODE XREF: .text:1000EC63j
		or	eax, 0FFFFFFFFh
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_1000EC5E:				; CODE XREF: .text:1000EC57j
		mov	eax, [edi+1Ch]
		test	eax, eax
		jz	short loc_1000EC59
		push	esi
		push	eax
		call	sub_1000F160
		push	edi
		mov	esi, eax
		call	ds:free
		add	esp, 8
		mov	eax, esi
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_1000EC80:				; DATA XREF: sub_1000E410+305o
		push	esi
		push	edi
		mov	edi, [esp+0Ch]
		mov	esi, [edi+1Ch]
		test	esi, esi
		jz	short loc_1000ECB0
		mov	eax, [esp+14h]
		test	eax, eax
		jz	short loc_1000ECB6
		cmp	eax, 1
		jz	short loc_1000ECB6
		call	ds:_errno
		mov	dword ptr [eax], 16h
		mov	dword ptr [esi+130h], 16h

loc_1000ECB0:				; CODE XREF: .text:1000EC8Bj
		pop	edi
		or	eax, 0FFFFFFFFh
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1000ECB6:				; CODE XREF: .text:1000EC93j
					; .text:1000EC98j
		test	byte ptr [esi+110h], 3
		jnz	short loc_1000ECDB
		call	ds:_errno
		pop	edi
		mov	dword ptr [eax], 1
		or	eax, 0FFFFFFFFh
		mov	dword ptr [esi+130h], 1
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1000ECDB:				; CODE XREF: .text:1000ECBDj
		push	0
		push	dword ptr [esp+14h]
		push	3
		push	esi
		call	sub_1000E910
		mov	esi, eax
		add	esp, 10h
		cmp	esi, 0FFFFFC19h
		jnz	short loc_1000ED0D
		mov	ecx, [edi+1Ch]
		test	ecx, ecx
		jz	short loc_1000ED0D
		push	ecx
		call	sub_1000F160
		add	esp, 4
		mov	dword ptr [edi+1Ch], 0

loc_1000ED0D:				; CODE XREF: .text:1000ECF4j
					; .text:1000ECFBj
		pop	edi
		mov	eax, esi
		pop	esi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_1000ED20:				; DATA XREF: sub_1000E410+30Co
		mov	eax, [esp+4]
		test	eax, eax
		jz	short loc_1000ED46
		mov	eax, [eax+1Ch]
		test	eax, eax
		jz	short loc_1000ED46
		mov	eax, [eax+114h]
		cmp	eax, 0FFFFFFFFh
		jnz	short locret_1000ED49
		call	ds:_errno
		mov	dword ptr [eax], 2

loc_1000ED46:				; CODE XREF: .text:1000ED26j
					; .text:1000ED2Dj
		or	eax, 0FFFFFFFFh

locret_1000ED49:			; CODE XREF: .text:1000ED38j
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_1000ED50:				; DATA XREF: sub_1000E410+313o
		push	esi
		mov	esi, [esp+8]
		push	edi
		mov	edi, [esi+1Ch]
		test	edi, edi
		jz	short loc_1000ED7A
		cmp	dword ptr [esp+18h], 0
		jz	short loc_1000ED80
		call	ds:_errno
		mov	dword ptr [eax], 16h
		mov	dword ptr [edi+130h], 16h

loc_1000ED7A:				; CODE XREF: .text:1000ED5Bj
		pop	edi
		or	eax, 0FFFFFFFFh
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1000ED80:				; CODE XREF: .text:1000ED62j
		push	dword ptr [esp+14h]
		push	dword ptr [esp+14h]
		push	0
		push	edi
		call	sub_1000E910
		mov	edi, eax
		add	esp, 10h
		cmp	edi, 0FFFFFC19h
		jnz	short loc_1000EDB4
		mov	ecx, [esi+1Ch]
		test	ecx, ecx
		jz	short loc_1000EDB4
		push	ecx
		call	sub_1000F160
		add	esp, 4
		mov	dword ptr [esi+1Ch], 0

loc_1000EDB4:				; CODE XREF: .text:1000ED9Bj
					; .text:1000EDA2j
		mov	eax, edi
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_1000EDC0:				; DATA XREF: sub_1000E410+31Ao
		push	esi
		push	edi
		mov	edi, [esp+0Ch]
		mov	esi, [edi+1Ch]
		test	esi, esi
		jz	short loc_1000EDF0
		mov	ecx, [esp+18h]
		test	ecx, ecx
		jz	short loc_1000EDF6
		cmp	ecx, 8
		jz	short loc_1000EDF6
		call	ds:_errno
		mov	dword ptr [eax], 16h
		mov	dword ptr [esi+130h], 16h

loc_1000EDF0:				; CODE XREF: .text:1000EDCBj
		pop	edi
		or	eax, 0FFFFFFFFh
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1000EDF6:				; CODE XREF: .text:1000EDD3j
					; .text:1000EDD8j
		test	byte ptr [esi+110h], 3
		jnz	short loc_1000EE1B
		call	ds:_errno
		pop	edi
		mov	dword ptr [eax], 1
		or	eax, 0FFFFFFFFh
		mov	dword ptr [esi+130h], 1
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1000EE1B:				; CODE XREF: .text:1000EDFDj
		push	dword ptr [esp+14h]
		xor	eax, eax
		cmp	ecx, 8
		push	dword ptr [esp+14h]
		setz	al
		inc	eax
		push	eax
		push	esi
		call	sub_1000E910
		mov	esi, eax
		add	esp, 10h
		cmp	esi, 0FFFFFC19h
		jnz	short loc_1000EE57
		mov	ecx, [edi+1Ch]
		test	ecx, ecx
		jz	short loc_1000EE57
		push	ecx
		call	sub_1000F160
		add	esp, 4
		mov	dword ptr [edi+1Ch], 0

loc_1000EE57:				; CODE XREF: .text:1000EE3Ej
					; .text:1000EE45j
		pop	edi
		mov	eax, esi
		pop	esi
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1000EE60(int,	size_t,	size_t)
sub_1000EE60	proc near		; CODE XREF: sub_1000E350+3Cp

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		push	ebp
		mov	ebp, [esp+8+arg_8]
		push	ebp		; size_t
		call	ds:malloc
		mov	ebx, eax
		add	esp, 4
		test	ebx, ebx
		jz	short loc_1000EEA9
		push	esi
		mov	esi, [esp+0Ch+arg_4]
		push	edi
		mov	edi, [esp+10h+arg_0]
		push	esi		; size_t
		push	dword ptr [edi]	; void *
		push	ebx		; void *
		call	ds:memmove
		sub	ebp, esi
		lea	eax, [ebx+esi]
		push	ebp		; size_t
		push	0		; int
		push	eax		; void *
		call	memset
		push	dword ptr [edi]	; void *
		call	ds:free
		add	esp, 1Ch
		mov	[edi], ebx
		mov	eax, ebx
		pop	edi
		pop	esi

loc_1000EEA9:				; CODE XREF: sub_1000EE60+14j
		pop	ebp
		pop	ebx
		retn
sub_1000EE60	endp

; ---------------------------------------------------------------------------
		align 10h

loc_1000EEB0:				; DATA XREF: sub_1000E410+321o
		push	esi
		mov	esi, [esp+8]
		mov	esi, [esi+1Ch]
		test	esi, esi
		jz	short loc_1000EEE4
		mov	eax, [esp+14h]
		test	eax, eax
		jz	short loc_1000EEE9
		cmp	eax, 3
		jz	short loc_1000EEE9
		cmp	eax, 7
		jz	short loc_1000EEE9
		call	ds:_errno
		mov	dword ptr [eax], 16h
		mov	dword ptr [esi+130h], 16h

loc_1000EEE4:				; CODE XREF: .text:1000EEBAj
		or	eax, 0FFFFFFFFh
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1000EEE9:				; CODE XREF: .text:1000EEC2j
					; .text:1000EEC7j ...
		cmp	dword ptr [esi+128h], 0
		jl	short loc_1000EEF7
		cmp	eax, 3
		jnz	short loc_1000EF15

loc_1000EEF7:				; CODE XREF: .text:1000EEF0j
		mov	dword ptr [esi+128h], 0
		mov	dword ptr [esi+12Ch], 1
		mov	dword ptr [esi+124h], 0

loc_1000EF15:				; CODE XREF: .text:1000EEF5j
		mov	ecx, [esp+8]
		push	edi
		xor	edi, edi
		push	ebx
		lea	ecx, [ecx+0]

loc_1000EF20:				; CODE XREF: .text:1000EFEFj
					; .text:1000F005j
		test	edi, edi
		jz	short loc_1000EF2E
		cmp	word ptr [edi],	0
		jnz	loc_1000F00A

loc_1000EF2E:				; CODE XREF: .text:1000EF22j
		mov	ecx, [esi+124h]
		test	ecx, ecx
		jnz	short loc_1000EF98
		mov	ebx, [esi+128h]
		cmp	ebx, [esi+28h]
		ja	short loc_1000EF7A

loc_1000EF43:				; CODE XREF: .text:1000EF78j
		push	0
		push	0
		push	ebx
		push	esi
		call	sub_1000FAB0
		mov	ecx, eax
		add	esp, 10h
		test	ecx, ecx
		jz	loc_1000F0C4
		mov	[esi+124h], ecx
		mov	edi, [ecx+10h]
		cmp	word ptr [edi],	0
		jnz	short loc_1000EF7A
		inc	ebx
		mov	dword ptr [esi+12Ch], 1
		cmp	ebx, [esi+28h]
		jbe	short loc_1000EF43

loc_1000EF7A:				; CODE XREF: .text:1000EF41j
					; .text:1000EF68j
		mov	[esi+128h], ebx
		cmp	ebx, [esi+28h]
		jle	short loc_1000EF9B
		pop	ebx
		pop	edi
		mov	dword ptr [esi+128h], 0FFFFFFFFh
		mov	eax, 1
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1000EF98:				; CODE XREF: .text:1000EF36j
		mov	edi, [ecx+10h]

loc_1000EF9B:				; CODE XREF: .text:1000EF83j
		mov	eax, [esi+12Ch]
		cmp	word ptr [edi+eax*2+2],	0
		jnz	short loc_1000EFEB
		lea	esp, [esp+0]

loc_1000EFB0:				; CODE XREF: .text:1000EFE9j
		mov	eax, [esi+12Ch]
		push	0
		push	ecx
		movzx	eax, word ptr [edi+eax*2]
		push	eax
		push	esi
		call	sub_1000FAB0
		mov	ecx, eax
		add	esp, 10h
		mov	[esi+124h], ecx
		test	ecx, ecx
		jz	loc_1000F0C4
		mov	edi, [ecx+10h]
		mov	dword ptr [esi+12Ch], 1
		cmp	word ptr [edi+4], 0
		jz	short loc_1000EFB0

loc_1000EFEB:				; CODE XREF: .text:1000EFA7j
		cmp	word ptr [edi],	0
		jnz	loc_1000EF20
		inc	dword ptr [esi+128h]
		mov	dword ptr [esi+124h], 0
		jmp	loc_1000EF20
; ---------------------------------------------------------------------------

loc_1000F00A:				; CODE XREF: .text:1000EF28j
		movzx	ebx, word ptr [esi+12Ch]
		cmp	word ptr [edi+ebx*2+2],	4
		push	ebp
		lea	ebp, [edi+ebx*2]
		jnb	short loc_1000F041
		push	1
		push	dword ptr [esp+20h]
		push	dword ptr [esp+20h]
		push	ecx
		push	esi
		call	sub_100118F0
		add	esp, 14h
		test	eax, eax
		jz	loc_1000F0BD
		pop	ebp
		pop	ebx
		pop	edi
		or	eax, 0FFFFFFFFh
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1000F041:				; CODE XREF: .text:1000F01Bj
		mov	eax, [esi+124h]
		movzx	ecx, word ptr [ebp+0]
		mov	edx, [esp+18h]
		add	ecx, [eax+10h]
		mov	[edx], ecx
		cmp	ebx, 1
		jbe	short loc_1000F05F
		movzx	ecx, word ptr [ebp-2]
		jmp	short loc_1000F062
; ---------------------------------------------------------------------------

loc_1000F05F:				; CODE XREF: .text:1000F057j
		mov	ecx, [esi+0Ch]

loc_1000F062:				; CODE XREF: .text:1000F05Dj
		movzx	eax, word ptr [ebp+0]
		add	ebx, 2
		sub	ecx, eax
		mov	[edx+4], ecx
		mov	eax, [esi+124h]
		movzx	ecx, word ptr [ebp+2]
		mov	edx, [esp+1Ch]
		add	ecx, [eax+10h]
		mov	[edx], ecx
		movzx	eax, word ptr [ebp+2]
		movzx	ecx, word ptr [ebp+0]
		sub	ecx, eax
		mov	[edx+4], ecx
		cmp	bx, [edi]
		jbe	short loc_1000F0B4
		inc	dword ptr [esi+128h]
		xor	eax, eax
		pop	ebp
		pop	ebx
		pop	edi
		mov	dword ptr [esi+124h], 0
		mov	dword ptr [esi+12Ch], 1
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1000F0B4:				; CODE XREF: .text:1000F091j
		movzx	eax, bx
		mov	[esi+12Ch], eax

loc_1000F0BD:				; CODE XREF: .text:1000F033j
		pop	ebp
		pop	ebx
		pop	edi
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1000F0C4:				; CODE XREF: .text:1000EF55j
					; .text:1000EFD1j
		pop	ebx
		pop	edi
		or	eax, 0FFFFFFFFh
		pop	esi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_1000F0D0:				; DATA XREF: sub_1000E410+328o
		cmp	dword ptr [esp+8], 0
		jz	short loc_1000F0E7
		call	ds:_errno
		mov	dword ptr [eax], 16h
		or	eax, 0FFFFFFFFh
		retn
; ---------------------------------------------------------------------------

loc_1000F0E7:				; CODE XREF: .text:1000F0D5j
		push	esi
		mov	esi, [esp+8]
		test	esi, esi
		jz	short loc_1000F158
		mov	esi, [esi+1Ch]
		test	esi, esi
		jz	short loc_1000F158
		cmp	dword ptr [esi+138h], 0
		jz	short loc_1000F154
		push	1
		push	0
		push	esi
		call	sub_1000F9A0
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_1000F158
		push	esi
		call	sub_1000E7E0
		add	esp, 4
		test	eax, eax
		jnz	short loc_1000F158
		cmp	[esi+1E5h], al
		jz	short loc_1000F14A
		cmp	[esi+118h], eax
		jz	short loc_1000F14A
		cmp	[esi+1E4h], al
		jnz	short loc_1000F14A
		push	esi
		call	sub_1000F950
		add	esp, 4
		mov	byte ptr [esi+1E5h], 0
		test	eax, eax
		jnz	short loc_1000F15B

loc_1000F14A:				; CODE XREF: .text:1000F124j
					; .text:1000F12Cj ...
		mov	dword ptr [esi+134h], 0

loc_1000F154:				; CODE XREF: .text:1000F0FEj
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1000F158:				; CODE XREF: .text:1000F0EEj
					; .text:1000F0F5j ...
		or	eax, 0FFFFFFFFh

loc_1000F15B:				; CODE XREF: .text:1000F148j
		pop	esi
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1000F160(void	*)
sub_1000F160	proc near		; CODE XREF: sub_1000E410+160p
					; sub_1000E410+1BEp ...

var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		push	ecx
		push	ebx
		push	esi
		mov	esi, [esp+0Ch+arg_0]
		xor	ebx, ebx
		push	edi
		mov	[esp+10h+var_4], ebx
		push	dword ptr [esi+138h]
		push	1
		push	esi
		call	sub_1000F9A0
		mov	edi, ds:_errno
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_1000F191
		call	edi ; _errno
		mov	ebx, [eax]
		mov	[esp+10h+var_4], ebx

loc_1000F191:				; CODE XREF: sub_1000F160+27j
		mov	eax, [esi+1DCh]
		push	ebp
		mov	ebp, ds:free
		test	eax, eax
		jz	short loc_1000F1EC
		push	dword ptr [eax]	; void *
		call	ebp ; free
		add	esp, 4
		cmp	dword ptr [esi+108h], 0
		jz	short loc_1000F1DB

loc_1000F1B2:				; CODE XREF: sub_1000F160+79j
		dec	dword ptr [esi+104h]
		mov	ecx, [esi+104h]
		mov	eax, [esi+1DCh]
		dec	dword ptr [esi+108h]
		push	dword ptr [eax+ecx*4] ;	void *
		call	ebp ; free
		add	esp, 4
		cmp	dword ptr [esi+108h], 0
		jnz	short loc_1000F1B2

loc_1000F1DB:				; CODE XREF: sub_1000F160+50j
		push	dword ptr [esi+1DCh] ; void *
		dec	dword ptr [esi+108h]
		call	ebp ; free
		add	esp, 4

loc_1000F1EC:				; CODE XREF: sub_1000F160+40j
		push	esi
		call	sub_1000E7E0
		add	esp, 4
		test	eax, eax
		jz	short loc_1000F205
		test	ebx, ebx
		jnz	short loc_1000F205
		call	edi ; _errno
		mov	ebx, [eax]
		mov	[esp+14h+var_4], ebx

loc_1000F205:				; CODE XREF: sub_1000F160+97j
					; sub_1000F160+9Bj
		xor	edi, edi
		cmp	[esi+1BCh], edi
		jle	short loc_1000F231
		lea	ebx, [esi+13Ch]

loc_1000F215:				; CODE XREF: sub_1000F160+CBj
		mov	eax, [ebx]
		test	eax, eax
		jz	short loc_1000F221
		push	eax		; void *
		call	ebp ; free
		add	esp, 4

loc_1000F221:				; CODE XREF: sub_1000F160+B9j
		inc	edi
		add	ebx, 4
		cmp	edi, [esi+1BCh]
		jl	short loc_1000F215
		mov	ebx, [esp+14h+var_4]

loc_1000F231:				; CODE XREF: sub_1000F160+ADj
		mov	eax, [esi+114h]
		cmp	eax, 0FFFFFFFFh
		jz	short loc_1000F246
		push	eax		; int
		call	ds:_close
		add	esp, 4

loc_1000F246:				; CODE XREF: sub_1000F160+DAj
		mov	eax, [esi+118h]
		test	eax, eax
		jz	short loc_1000F26E
		cmp	byte ptr [esi+1E4h], 0
		jz	short loc_1000F263
		push	eax		; char *
		call	ds:_unlink
		add	esp, 4

loc_1000F263:				; CODE XREF: sub_1000F160+F7j
		push	dword ptr [esi+118h] ; void *
		call	ebp ; free
		add	esp, 4

loc_1000F26E:				; CODE XREF: sub_1000F160+EEj
		mov	eax, [esi+11Ch]
		test	eax, eax
		jz	short loc_1000F27E
		push	eax		; void *
		call	ebp ; free
		add	esp, 4

loc_1000F27E:				; CODE XREF: sub_1000F160+116j
		mov	eax, [esi+120h]
		test	eax, eax
		jz	short loc_1000F28E
		push	eax		; void *
		call	ebp ; free
		add	esp, 4

loc_1000F28E:				; CODE XREF: sub_1000F160+126j
		push	esi		; void *
		call	ebp ; free
		add	esp, 4
		pop	ebp
		test	ebx, ebx
		jz	short loc_1000F2A9
		call	ds:_errno
		pop	edi
		pop	esi
		mov	[eax], ebx
		or	eax, 0FFFFFFFFh
		pop	ebx
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_1000F2A9:				; CODE XREF: sub_1000F160+137j
		pop	edi
		pop	esi
		xor	eax, eax
		pop	ebx
		pop	ecx
		retn
sub_1000F160	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000F2B0	proc near		; CODE XREF: sub_1000E410+14Bp

var_34		= byte ptr -34h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 34h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+34h+var_4], eax
		push	ebx
		push	ebp
		mov	ebp, [esp+3Ch+arg_4]
		mov	ebx, 1
		push	esi
		mov	esi, [esp+40h+arg_0]
		push	edi
		mov	edi, [esp+44h+arg_8]
		push	80h		; size_t
		mov	dword ptr [esi+38h], 0
		mov	dword ptr [esi+8], 4D2h
		mov	dword ptr [esi+0Ch], 1000h
		mov	dword ptr [esi+10h], 0Ch
		mov	dword ptr [esi+18h], 100h
		mov	dword ptr [esi+1Ch], 8
		mov	dword ptr [esi+14h], 100h
		mov	dword ptr [esi+34h], 10000h
		mov	eax, off_1001500C
		mov	[esi+10Ch], eax
		lea	eax, [esi+44h]
		push	0		; int
		push	eax		; void *
		call	memset
		push	40h		; size_t
		lea	eax, [esi+0C4h]
		push	0		; int
		push	eax		; void *
		call	memset
		add	esp, 18h
		test	ebp, ebp
		jz	short loc_1000F35E
		lea	eax, [esp+44h+var_34]
		push	eax
		push	ebp
		call	ds:_stat64i32
		add	esp, 8
		test	eax, eax
		jnz	short loc_1000F391
		push	dword ptr [esi+0Ch]
		call	sub_1000FF30
		add	esp, 4
		mov	[esi+10h], eax

loc_1000F35E:				; CODE XREF: sub_1000F2B0+8Bj
		test	edi, edi
		jz	short loc_1000F3DE
		mov	eax, [edi]
		test	eax, eax
		jz	short loc_1000F3A6
		push	eax
		call	sub_1000FF30
		mov	edx, ebx
		mov	[esi+10h], eax
		mov	ecx, eax
		add	esp, 4
		shl	edx, cl
		mov	[esi+0Ch], edx
		cmp	edx, 8000h
		jle	short loc_1000F3A6

loc_1000F385:				; CODE XREF: sub_1000F2B0+129j
		call	ds:_errno
		mov	dword ptr [eax], 16h

loc_1000F391:				; CODE XREF: sub_1000F2B0+9Ej
		pop	edi
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		mov	ecx, [esp+34h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 34h
		retn
; ---------------------------------------------------------------------------

loc_1000F3A6:				; CODE XREF: sub_1000F2B0+B6j
					; sub_1000F2B0+D3j
		mov	eax, [edi+4]
		test	eax, eax
		jz	short loc_1000F3B0
		mov	[esi+34h], eax

loc_1000F3B0:				; CODE XREF: sub_1000F2B0+FBj
		mov	eax, [edi+10h]
		test	eax, eax
		jz	short loc_1000F3BD
		mov	[esi+10Ch], eax

loc_1000F3BD:				; CODE XREF: sub_1000F2B0+105j
		mov	eax, [edi+8]
		test	eax, eax
		jz	short loc_1000F3C6
		mov	ebx, eax

loc_1000F3C6:				; CODE XREF: sub_1000F2B0+112j
		mov	eax, [edi+14h]
		test	eax, eax
		jz	short loc_1000F3DE
		cmp	eax, 10E1h
		jz	short loc_1000F3DB
		cmp	eax, 4D2h
		jnz	short loc_1000F385

loc_1000F3DB:				; CODE XREF: sub_1000F2B0+122j
		mov	[esi+8], eax

loc_1000F3DE:				; CODE XREF: sub_1000F2B0+B0j
					; sub_1000F2B0+11Bj
		push	ebx
		push	esi
		call	sub_1000F410
		mov	ecx, [esp+4Ch+var_4]
		add	esp, 8
		neg	eax
		sbb	eax, eax
		pop	edi
		not	eax
		and	eax, esi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 34h
		retn
sub_1000F2B0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000F410	proc near		; CODE XREF: sub_1000F2B0+130p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_4]
		push	ebx
		push	esi
		mov	esi, [esp+8+arg_0]
		dec	eax
		cdq
		push	edi
		idiv	dword ptr [esi+34h]
		inc	eax
		cmp	eax, 2
		jg	short loc_1000F42B
		mov	eax, 2

loc_1000F42B:				; CODE XREF: sub_1000F410+14j
		push	eax
		call	sub_1000FF30
		mov	ecx, eax
		mov	edi, 1
		mov	ebx, edi
		shl	ebx, cl
		lea	ecx, [eax+1]
		mov	[esi+eax*4+44h], ecx
		mov	[esi+eax*4+48h], ecx
		mov	[esi+20h], eax
		push	0
		shl	eax, 0Bh
		push	ecx
		inc	eax
		mov	dword ptr [esi+24h], 2
		push	eax
		push	esi
		call	sub_10010560
		add	esp, 14h
		test	eax, eax
		jz	short loc_1000F46D
		pop	edi
		pop	esi
		or	eax, 0FFFFFFFFh
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1000F46D:				; CODE XREF: sub_1000F410+54j
		lea	ecx, ds:0FFFFFFFFh[ebx*2]
		mov	edx, 1FFh
		mov	[esi+2Ch], ecx
		lea	eax, [ebx-1]
		mov	ecx, [esi+10h]
		shr	edx, cl
		inc	edx
		mov	[esi+30h], eax
		mov	[esi+28h], eax
		mov	[esi+3Ch], edx
		cdq
		idiv	dword ptr [esi+18h]
		inc	eax
		push	eax
		call	sub_1000FF30
		mov	ecx, eax
		add	esp, 4
		shl	edi, cl
		cmp	edi, [esi+14h]
		jle	short loc_1000F4A8
		mov	[esi+14h], edi

loc_1000F4A8:				; CODE XREF: sub_1000F410+93j
		push	edi
		push	esi
		call	sub_1000E750
		add	esp, 8
		pop	edi
		pop	esi
		pop	ebx
		retn
sub_1000F410	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000F4C0	proc near		; CODE XREF: sub_1000E410+1E0p

arg_0		= dword	ptr  4

		mov	edx, [esp+arg_0]
		push	esi
		push	edi
		mov	ecx, [edx]
		mov	eax, ecx
		shr	eax, 18h
		mov	[edx], al
		mov	eax, ecx
		shr	eax, 10h
		mov	[edx+1], al
		mov	eax, ecx
		shr	eax, 8
		mov	[edx+2], al
		mov	[edx+3], cl
		mov	ecx, [edx+4]
		mov	eax, ecx
		shr	eax, 18h
		mov	[edx+4], al
		mov	eax, ecx
		shr	eax, 10h
		mov	[edx+5], al
		mov	eax, ecx
		shr	eax, 8
		mov	[edx+6], al
		mov	[edx+7], cl
		mov	ecx, [edx+8]
		mov	eax, ecx
		shr	eax, 18h
		mov	[edx+8], al
		mov	eax, ecx
		shr	eax, 10h
		mov	[edx+9], al
		mov	eax, ecx
		shr	eax, 8
		mov	[edx+0Ah], al
		mov	[edx+0Bh], cl
		mov	ecx, [edx+0Ch]
		mov	eax, ecx
		shr	eax, 18h
		mov	[edx+0Ch], al
		mov	eax, ecx
		shr	eax, 10h
		mov	[edx+0Dh], al
		mov	eax, ecx
		shr	eax, 8
		mov	[edx+0Eh], al
		mov	[edx+0Fh], cl
		mov	ecx, [edx+10h]
		mov	eax, ecx
		shr	eax, 18h
		mov	[edx+10h], al
		mov	eax, ecx
		shr	eax, 10h
		mov	[edx+11h], al
		mov	eax, ecx
		shr	eax, 8
		mov	[edx+12h], al
		mov	[edx+13h], cl
		mov	ecx, [edx+14h]
		mov	eax, ecx
		shr	eax, 18h
		mov	[edx+14h], al
		mov	eax, ecx
		shr	eax, 10h
		mov	[edx+15h], al
		mov	eax, ecx
		shr	eax, 8
		mov	[edx+16h], al
		mov	[edx+17h], cl
		mov	ecx, [edx+18h]
		mov	eax, ecx
		shr	eax, 18h
		mov	[edx+18h], al
		mov	eax, ecx
		shr	eax, 10h
		mov	[edx+19h], al
		mov	eax, ecx
		shr	eax, 8
		mov	[edx+1Ah], al
		mov	[edx+1Bh], cl
		mov	ecx, [edx+1Ch]
		mov	eax, ecx
		mov	[edx+1Fh], cl
		shr	eax, 18h
		mov	[edx+1Ch], al
		mov	eax, ecx
		shr	eax, 10h
		mov	[edx+1Dh], al
		mov	eax, ecx
		shr	eax, 8
		mov	[edx+1Eh], al
		mov	ecx, [edx+20h]
		mov	eax, ecx
		shr	eax, 18h
		mov	[edx+20h], al
		mov	eax, ecx
		shr	eax, 10h
		mov	[edx+21h], al
		mov	eax, ecx
		shr	eax, 8
		mov	[edx+22h], al
		mov	[edx+23h], cl
		mov	ecx, [edx+24h]
		mov	eax, ecx
		shr	eax, 18h
		mov	[edx+24h], al
		mov	eax, ecx
		shr	eax, 10h
		mov	[edx+25h], al
		mov	eax, ecx
		shr	eax, 8
		mov	[edx+26h], al
		mov	[edx+27h], cl
		mov	ecx, [edx+28h]
		mov	eax, ecx
		shr	eax, 18h
		mov	[edx+28h], al
		mov	eax, ecx
		shr	eax, 10h
		mov	[edx+29h], al
		mov	eax, ecx
		shr	eax, 8
		mov	[edx+2Ah], al
		mov	[edx+2Bh], cl
		mov	ecx, [edx+2Ch]
		mov	eax, ecx
		shr	eax, 18h
		mov	[edx+2Ch], al
		mov	eax, ecx
		shr	eax, 10h
		mov	[edx+2Dh], al
		mov	eax, ecx
		shr	eax, 8
		mov	[edx+2Eh], al
		mov	[edx+2Fh], cl
		mov	ecx, [edx+30h]
		mov	eax, ecx
		shr	eax, 18h
		mov	[edx+30h], al
		mov	eax, ecx
		shr	eax, 10h
		mov	[edx+31h], al
		mov	eax, ecx
		shr	eax, 8
		mov	[edx+32h], al
		mov	[edx+33h], cl
		mov	ecx, [edx+34h]
		mov	eax, ecx
		shr	eax, 18h
		mov	[edx+34h], al
		mov	eax, ecx
		shr	eax, 10h
		mov	[edx+35h], al
		mov	eax, ecx
		shr	eax, 8
		mov	[edx+36h], al
		mov	[edx+37h], cl
		mov	ecx, [edx+38h]
		mov	eax, ecx
		shr	eax, 18h
		mov	[edx+38h], al
		mov	eax, ecx
		shr	eax, 10h
		lea	esi, [edx+0C4h]
		mov	[edx+39h], al
		mov	edi, 20h
		mov	eax, ecx
		mov	[edx+3Bh], cl
		shr	eax, 8
		mov	[edx+3Ah], al
		mov	ecx, [edx+3Ch]
		mov	eax, ecx
		shr	eax, 18h
		mov	[edx+3Ch], al
		mov	eax, ecx
		shr	eax, 10h
		mov	[edx+3Dh], al
		mov	eax, ecx
		shr	eax, 8
		mov	[edx+3Eh], al
		mov	[edx+3Fh], cl
		mov	ecx, [edx+40h]
		mov	eax, ecx
		shr	eax, 18h
		mov	[edx+40h], al
		mov	eax, ecx
		shr	eax, 10h
		mov	[edx+41h], al
		mov	eax, ecx
		shr	eax, 8
		mov	[edx+42h], al
		lea	eax, [edx+44h]
		mov	[edx+43h], cl

loc_1000F6D0:				; CODE XREF: sub_1000F4C0+243j
		mov	edx, [eax]
		lea	eax, [eax+4]
		mov	ecx, edx
		mov	[eax-1], dl
		shr	ecx, 18h
		lea	esi, [esi+2]
		mov	[eax-4], cl
		mov	ecx, edx
		shr	ecx, 10h
		mov	[eax-3], cl
		mov	ecx, edx
		shr	ecx, 8
		mov	[eax-2], cl
		movzx	edx, word ptr [esi-2]
		mov	ecx, edx
		mov	[esi-1], dl
		shr	ecx, 8
		mov	[esi-2], cl
		dec	edi
		jnz	short loc_1000F6D0
		pop	edi
		pop	esi
		retn
sub_1000F4C0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000F710	proc near		; CODE XREF: sub_1000E7E0+69p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	ecx, [esp+arg_0]
		push	ebx
		push	ebp
		push	esi
		movzx	eax, byte ptr [ecx+3]
		push	edi
		mov	edi, [esp+10h+arg_4]
		mov	[edi], al
		movzx	eax, byte ptr [ecx+2]
		mov	[edi+1], al
		movzx	eax, byte ptr [ecx+1]
		mov	[edi+2], al
		movzx	eax, byte ptr [ecx]
		mov	[edi+3], al
		movzx	eax, byte ptr [ecx+7]
		mov	[edi+4], al
		movzx	eax, byte ptr [ecx+6]
		mov	[edi+5], al
		movzx	eax, byte ptr [ecx+5]
		mov	[edi+6], al
		movzx	eax, byte ptr [ecx+4]
		mov	[edi+7], al
		movzx	eax, byte ptr [ecx+0Bh]
		mov	[edi+8], al
		movzx	eax, byte ptr [ecx+0Ah]
		mov	[edi+9], al
		movzx	eax, byte ptr [ecx+9]
		mov	[edi+0Ah], al
		movzx	eax, byte ptr [ecx+8]
		mov	[edi+0Bh], al
		movzx	eax, byte ptr [ecx+0Fh]
		mov	[edi+0Ch], al
		movzx	eax, byte ptr [ecx+0Eh]
		mov	[edi+0Dh], al
		movzx	eax, byte ptr [ecx+0Dh]
		mov	[edi+0Eh], al
		movzx	eax, byte ptr [ecx+0Ch]
		mov	[edi+0Fh], al
		movzx	eax, byte ptr [ecx+13h]
		mov	[edi+10h], al
		movzx	eax, byte ptr [ecx+12h]
		mov	[edi+11h], al
		movzx	eax, byte ptr [ecx+11h]
		mov	[edi+12h], al
		movzx	eax, byte ptr [ecx+10h]
		mov	[edi+13h], al
		movzx	eax, byte ptr [ecx+17h]
		mov	[edi+14h], al
		movzx	eax, byte ptr [ecx+16h]
		mov	[edi+15h], al
		movzx	eax, byte ptr [ecx+15h]
		mov	[edi+16h], al
		movzx	eax, byte ptr [ecx+14h]
		mov	[edi+17h], al
		movzx	eax, byte ptr [ecx+1Bh]
		mov	[edi+18h], al
		movzx	eax, byte ptr [ecx+1Ah]
		mov	[edi+19h], al
		movzx	eax, byte ptr [ecx+19h]
		mov	[edi+1Ah], al
		movzx	eax, byte ptr [ecx+18h]
		mov	[edi+1Bh], al
		movzx	eax, byte ptr [ecx+1Fh]
		mov	[edi+1Ch], al
		movzx	eax, byte ptr [ecx+1Eh]
		mov	[edi+1Dh], al
		movzx	eax, byte ptr [ecx+1Dh]
		mov	[edi+1Eh], al
		movzx	eax, byte ptr [ecx+1Ch]
		mov	[edi+1Fh], al
		movzx	eax, byte ptr [ecx+23h]
		mov	[edi+20h], al
		movzx	eax, byte ptr [ecx+22h]
		mov	[edi+21h], al
		movzx	eax, byte ptr [ecx+21h]
		mov	[edi+22h], al
		movzx	eax, byte ptr [ecx+20h]
		mov	[edi+23h], al
		movzx	eax, byte ptr [ecx+27h]
		mov	[edi+24h], al
		movzx	eax, byte ptr [ecx+26h]
		mov	[edi+25h], al
		lea	ebx, [edi+0C5h]
		movzx	eax, byte ptr [ecx+25h]
		lea	esi, [edi+45h]
		mov	[edi+26h], al
		lea	edx, [ecx+0C4h]
		movzx	eax, byte ptr [ecx+24h]
		mov	ebp, 20h
		mov	[edi+27h], al
		movzx	eax, byte ptr [ecx+2Bh]
		mov	[edi+28h], al
		movzx	eax, byte ptr [ecx+2Ah]
		mov	[edi+29h], al
		movzx	eax, byte ptr [ecx+29h]
		mov	[edi+2Ah], al
		movzx	eax, byte ptr [ecx+28h]
		mov	[edi+2Bh], al
		movzx	eax, byte ptr [ecx+2Fh]
		mov	[edi+2Ch], al
		movzx	eax, byte ptr [ecx+2Eh]
		mov	[edi+2Dh], al
		movzx	eax, byte ptr [ecx+2Dh]
		mov	[edi+2Eh], al
		movzx	eax, byte ptr [ecx+2Ch]
		mov	[edi+2Fh], al
		movzx	eax, byte ptr [ecx+33h]
		mov	[edi+30h], al
		movzx	eax, byte ptr [ecx+32h]
		mov	[edi+31h], al
		movzx	eax, byte ptr [ecx+31h]
		mov	[edi+32h], al
		movzx	eax, byte ptr [ecx+30h]
		mov	[edi+33h], al
		movzx	eax, byte ptr [ecx+37h]
		mov	[edi+34h], al
		movzx	eax, byte ptr [ecx+36h]
		mov	[edi+35h], al
		movzx	eax, byte ptr [ecx+35h]
		mov	[edi+36h], al
		movzx	eax, byte ptr [ecx+34h]
		mov	[edi+37h], al
		movzx	eax, byte ptr [ecx+3Bh]
		mov	[edi+38h], al
		movzx	eax, byte ptr [ecx+3Ah]
		mov	[edi+39h], al
		movzx	eax, byte ptr [ecx+39h]
		mov	[edi+3Ah], al
		movzx	eax, byte ptr [ecx+38h]
		mov	[edi+3Bh], al
		movzx	eax, byte ptr [ecx+3Fh]
		mov	[edi+3Ch], al
		movzx	eax, byte ptr [ecx+3Eh]
		mov	[edi+3Dh], al
		movzx	eax, byte ptr [ecx+3Dh]
		mov	[edi+3Eh], al
		movzx	eax, byte ptr [ecx+3Ch]
		mov	[edi+3Fh], al
		movzx	eax, byte ptr [ecx+43h]
		mov	[edi+40h], al
		movzx	eax, byte ptr [ecx+42h]
		mov	[edi+41h], al
		movzx	eax, byte ptr [ecx+41h]
		mov	[edi+42h], al
		movzx	eax, byte ptr [ecx+40h]
		mov	[edi+43h], al
		lea	eax, [ecx+46h]
		sub	edi, ecx
		nop

loc_1000F910:				; CODE XREF: sub_1000F710+239j
		movzx	ecx, byte ptr [eax+1]
		lea	eax, [eax+4]
		mov	[esi-1], cl
		lea	esi, [esi+4]
		movzx	ecx, byte ptr [eax-4]
		lea	edx, [edx+2]
		mov	[esi-4], cl
		lea	ebx, [ebx+2]
		movzx	ecx, byte ptr [eax-5]
		mov	[edi+eax-4], cl
		movzx	ecx, byte ptr [eax-6]
		mov	[esi-2], cl
		movzx	ecx, byte ptr [edx-1]
		mov	[edi+edx-2], cl
		movzx	ecx, byte ptr [edx-2]
		mov	[ebx-2], cl
		dec	ebp
		jnz	short loc_1000F910
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
sub_1000F710	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000F950	proc near		; CODE XREF: .text:1000F137p

arg_0		= dword	ptr  4

		push	ebx
		push	esi
		push	edi
		mov	edi, [esp+0Ch+arg_0]
		push	2		; int
		push	0		; __int32
		mov	esi, [edi+114h]
		push	esi		; int
		call	ds:_lseek
		push	esi		; int
		mov	ebx, eax
		call	ds:_get_osfhandle
		add	esp, 10h
		push	eax		; hFile
		call	ds:FlushFileBuffers
		cmp	ebx, 0FFFFFFFFh
		jnz	short loc_1000F986
		pop	edi
		pop	esi
		or	eax, ebx
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1000F986:				; CODE XREF: sub_1000F950+2Ej
		neg	eax
		mov	[edi+1E0h], ebx
		pop	edi
		sbb	eax, eax
		neg	eax
		pop	esi
		dec	eax
		pop	ebx
		retn
sub_1000F950	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000F9A0	proc near		; CODE XREF: .text:1000F105p
					; sub_1000F160+17p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	edx, [esp+arg_0]
		push	esi
		mov	esi, [edx+1C4h]
		push	edi
		lea	edi, [edx+1C4h]
		test	esi, esi
		jnz	short loc_1000F9BB
		pop	edi
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1000F9BB:				; CODE XREF: sub_1000F9A0+14j
		push	ebx
		push	ebp
		cmp	esi, edi
		jz	loc_1000FA70
		mov	ebx, ds:free
		jmp	short loc_1000F9D0
; ---------------------------------------------------------------------------
		align 10h

loc_1000F9D0:				; CODE XREF: sub_1000F9A0+2Bj
					; sub_1000F9A0+9Ej
		mov	ecx, [esi+0Ch]
		test	ecx, ecx
		jnz	short loc_1000F9DD
		test	byte ptr [esi+15h], 4
		jz	short loc_1000FA07

loc_1000F9DD:				; CODE XREF: sub_1000F9A0+35j
		cmp	[esp+10h+arg_8], 0
		jz	short loc_1000FA07
		mov	al, [esi+15h]
		test	al, 1
		jz	short loc_1000FA07
		push	0		; int
		movsx	eax, al
		and	eax, 4
		push	eax		; int
		push	ecx		; int
		push	dword ptr [esi+10h] ; void *
		push	edx		; int
		call	sub_100105F0
		mov	ebp, eax
		add	esp, 14h
		test	ebp, ebp
		jnz	short loc_1000FA40

loc_1000FA07:				; CODE XREF: sub_1000F9A0+3Bj
					; sub_1000F9A0+42j ...
		cmp	[esp+10h+arg_4], 0
		jz	short loc_1000FA34
		mov	eax, [esi+10h]
		test	eax, eax
		jz	short loc_1000FA1B
		push	eax		; void *
		call	ebx ; free
		add	esp, 4

loc_1000FA1B:				; CODE XREF: sub_1000F9A0+73j
		mov	ecx, [esi]
		mov	eax, [esi+4]
		push	esi		; void *
		mov	[ecx+4], eax
		mov	ecx, [esi+4]
		mov	eax, [esi]
		mov	[ecx], eax
		call	ebx ; free
		mov	esi, [edi]
		add	esp, 4
		jmp	short loc_1000FA36
; ---------------------------------------------------------------------------

loc_1000FA34:				; CODE XREF: sub_1000F9A0+6Cj
		mov	esi, [esi]

loc_1000FA36:				; CODE XREF: sub_1000F9A0+92j
		cmp	esi, edi
		jz	short loc_1000FA70
		mov	edx, [esp+10h+arg_0]
		jmp	short loc_1000F9D0
; ---------------------------------------------------------------------------

loc_1000FA40:				; CODE XREF: sub_1000F9A0+65j
		cmp	[esp+10h+arg_4], 0
		jz	short loc_1000FA69
		mov	eax, [esi+10h]
		test	eax, eax
		jz	short loc_1000FA54
		push	eax		; void *
		call	ebx ; free
		add	esp, 4

loc_1000FA54:				; CODE XREF: sub_1000F9A0+ACj
		mov	ecx, [esi]
		mov	eax, [esi+4]
		push	esi		; void *
		mov	[ecx+4], eax
		mov	ecx, [esi+4]
		mov	eax, [esi]
		mov	[ecx], eax
		call	ebx ; free
		add	esp, 4

loc_1000FA69:				; CODE XREF: sub_1000F9A0+A5j
		mov	eax, ebp
		pop	ebp
		pop	ebx
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1000FA70:				; CODE XREF: sub_1000F9A0+1Fj
					; sub_1000F9A0+98j
		pop	ebp
		pop	ebx
		pop	edi
		xor	eax, eax
		pop	esi
		retn
sub_1000F9A0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000FA80	proc near		; CODE XREF: sub_1000E410+285p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_4]
		push	esi
		mov	esi, [esp+4+arg_0]
		dec	eax
		add	eax, [esi+0Ch]
		lea	edx, [esi+1C4h]
		mov	ecx, [esi+10h]
		sar	eax, cl
		cmp	eax, 6
		jg	short loc_1000FAA2
		mov	eax, 6

loc_1000FAA2:				; CODE XREF: sub_1000FA80+1Bj
		mov	[esi+1C0h], eax
		mov	[edx+4], edx
		mov	[edx], edx
		pop	esi
		retn
sub_1000FA80	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000FAB0	proc near		; CODE XREF: sub_1000E910+51p
					; sub_1000E910+145p ...

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 0Ch
		push	ebx
		mov	ebx, [esp+10h+arg_0]
		push	ebp
		push	esi
		mov	esi, [esp+18h+arg_8]
		xor	ebp, ebp
		mov	[esp+18h+var_8], 0
		mov	[esp+18h+var_4], 0
		mov	[esp+18h+var_C], ebp
		push	edi
		test	esi, esi
		jz	short loc_1000FAF8
		mov	edi, [esi+8]
		mov	eax, [esp+1Ch+arg_4]
		test	edi, edi
		jz	short loc_1000FAE9
		cmp	[edi+0Ch], eax
		jz	short loc_1000FAEB

loc_1000FAE9:				; CODE XREF: sub_1000FAB0+32j
		xor	edi, edi

loc_1000FAEB:				; CODE XREF: sub_1000FAB0+37j
		cmp	[esp+1Ch+arg_C], ebp
		jnz	short loc_1000FB40
		mov	ebp, 2
		jmp	short loc_1000FB40
; ---------------------------------------------------------------------------

loc_1000FAF8:				; CODE XREF: sub_1000FAB0+27j
		mov	edx, [esp+1Ch+arg_4]
		mov	ecx, [ebx+1Ch]
		mov	eax, [ebx+1DCh]
		mov	ebp, [ebx+18h]
		shr	edx, cl
		dec	ebp
		and	ebp, [esp+1Ch+arg_4]
		mov	[esp+1Ch+var_8], ebp
		mov	ecx, [eax+edx*4]
		mov	[esp+1Ch+var_4], ecx
		mov	eax, [ecx+ebp*4]
		lea	edi, [eax-2]
		neg	edi
		sbb	edi, edi
		and	edi, eax
		test	eax, eax
		jz	loc_1000FBC2
		cmp	eax, 2
		jnz	short loc_1000FBB0
		mov	[esp+1Ch+var_C], eax

loc_1000FB37:				; CODE XREF: sub_1000FAB0+10Aj
					; sub_1000FAB0+121j
		mov	ebp, 1

loc_1000FB3C:				; CODE XREF: sub_1000FAB0+129j
		mov	eax, [esp+1Ch+arg_4]

loc_1000FB40:				; CODE XREF: sub_1000FAB0+3Fj
					; sub_1000FAB0+46j
		test	edi, edi
		jnz	loc_1000FBFE
		push	esi
		push	eax
		push	ebx
		call	sub_1000FC90
		mov	edi, eax
		add	esp, 0Ch
		xor	eax, eax
		test	edi, edi
		jz	loc_1000FC2B
		push	eax		; int
		push	ebp		; int
		test	esi, esi
		setz	al
		push	eax		; int
		push	[esp+28h+arg_4]	; int
		push	dword ptr [edi+10h] ; void *
		push	ebx		; int
		call	sub_10010320
		add	esp, 18h
		test	eax, eax
		jz	short loc_1000FBDE
		test	esi, esi
		jz	short loc_1000FB86
		mov	dword ptr [esi+8], 0

loc_1000FB86:				; CODE XREF: sub_1000FAB0+CDj
		mov	ecx, [edi]
		mov	eax, [edi+4]
		mov	esi, ds:free
		mov	[ecx+4], eax
		mov	ecx, [edi+4]
		mov	eax, [edi]
		mov	[ecx], eax
		push	dword ptr [edi+10h] ; void *
		call	esi ; free
		push	edi		; void *
		call	esi ; free
		add	esp, 8
		xor	eax, eax
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_1000FBB0:				; CODE XREF: sub_1000FAB0+81j
		movsx	eax, byte ptr [eax+14h]
		mov	[esp+1Ch+var_C], eax
		test	eax, eax
		jnz	loc_1000FB37
		jmp	short loc_1000FBCA
; ---------------------------------------------------------------------------

loc_1000FBC2:				; CODE XREF: sub_1000FAB0+78j
		mov	[esp+1Ch+var_C], 0

loc_1000FBCA:				; CODE XREF: sub_1000FAB0+110j
		cmp	dword ptr [ebx+134h], 0
		jz	loc_1000FB37
		xor	ebp, ebp
		jmp	loc_1000FB3C
; ---------------------------------------------------------------------------

loc_1000FBDE:				; CODE XREF: sub_1000FAB0+C9j
		test	esi, esi
		jnz	short loc_1000FC29
		mov	eax, [esp+1Ch+var_C]
		mov	ecx, [esp+1Ch+var_4]
		mov	[edi+14h], al
		mov	eax, [esp+1Ch+var_8]
		mov	[ecx+eax*4], edi
		mov	eax, edi
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_1000FBFE:				; CODE XREF: sub_1000FAB0+92j
		mov	ecx, [edi]
		mov	eax, [edi+4]
		mov	[ecx+4], eax
		mov	ecx, [edi+4]
		mov	eax, [edi]
		mov	[ecx], eax
		mov	eax, [ebx+1C8h]
		mov	[edi+4], eax
		lea	eax, [ebx+1C4h]
		mov	[edi], eax
		mov	[ebx+1C8h], edi
		mov	eax, [edi+4]
		mov	[eax], edi

loc_1000FC29:				; CODE XREF: sub_1000FAB0+130j
		mov	eax, edi

loc_1000FC2B:				; CODE XREF: sub_1000FAB0+A9j
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 0Ch
		retn
sub_1000FAB0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000FC40	proc near		; CODE XREF: sub_10010270+9Cp

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		mov	ecx, [edx]
		mov	eax, [edx+4]
		mov	dword ptr [edx+8], 0
		mov	dword ptr [edx+0Ch], 0
		mov	byte ptr [edx+15h], 0
		mov	[ecx+4], eax
		mov	ecx, [edx+4]
		mov	eax, [edx]
		mov	[ecx], eax
		mov	ecx, [esp+arg_0]
		mov	eax, [ecx+1C4h]
		mov	eax, [eax+4]
		mov	[edx+4], eax
		mov	eax, [ecx+1C4h]
		mov	[edx], eax
		mov	eax, [ecx+1C4h]
		mov	[eax+4], edx
		mov	eax, [edx+4]
		mov	[eax], edx
		retn
sub_1000FC40	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000FC90	proc near		; CODE XREF: sub_1000FAB0+9Bp

var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ecx
		push	ebx
		mov	ebx, [esp+8+arg_0]
		push	ebp
		push	esi
		lea	edx, [ebx+1C4h]
		mov	[esp+10h+var_4], 0
		cmp	dword ptr [ebx+1C0h], 0
		push	edi
		mov	edi, [edx]
		jnz	loc_1000FE56
		test	byte ptr [edi+15h], 8
		jnz	loc_1000FE56
		mov	ecx, [edi]
		mov	eax, [edi+4]
		mov	[ecx+4], eax
		mov	ecx, [edi+4]
		mov	eax, [edi]
		mov	[ecx], eax
		mov	esi, [edi+0Ch]
		test	esi, esi
		jnz	short loc_1000FCE0
		test	byte ptr [edi+15h], 4
		jz	loc_1000FEE3

loc_1000FCE0:				; CODE XREF: sub_1000FC90+44j
		mov	ecx, [edi+10h]
		movzx	eax, word ptr [ecx]
		test	ax, ax
		jz	short loc_1000FD03
		mov	edx, eax
		mov	eax, [ebx+0Ch]
		shr	eax, 1
		cmp	edx, eax
		ja	loc_1000FEAB
		movzx	eax, word ptr [ecx+edx*2-2]
		mov	[esp+14h+var_4], eax

loc_1000FD03:				; CODE XREF: sub_1000FC90+59j
		mov	al, [edi+15h]
		test	al, 1
		jz	short loc_1000FD26
		push	0		; int
		movsx	eax, al
		and	eax, 4
		push	eax		; int
		push	esi		; int
		push	ecx		; void *
		push	ebx		; int
		call	sub_100105F0
		add	esp, 14h
		test	eax, eax
		jnz	loc_1000FEAB

loc_1000FD26:				; CODE XREF: sub_1000FC90+78j
		mov	al, [edi+15h]
		mov	byte ptr [esp+14h+arg_0], al
		test	al, 4
		jz	short loc_1000FD7C
		mov	esi, [ebx+18h]
		mov	edx, [edi+0Ch]
		dec	esi
		mov	ecx, [ebx+1Ch]
		and	esi, edx
		mov	eax, [ebx+1DCh]
		shr	edx, cl
		cmp	dword ptr [ebx+134h], 0
		mov	ecx, [eax+edx*4]
		jz	short loc_1000FD75
		test	byte ptr [esp+14h+arg_0], 1
		jnz	short loc_1000FD6C
		mov	eax, [ecx+esi*4]
		test	eax, eax
		jz	short loc_1000FD75
		cmp	eax, 2
		jz	short loc_1000FD6C
		movsx	eax, byte ptr [eax+14h]
		test	eax, eax
		jz	short loc_1000FD75

loc_1000FD6C:				; CODE XREF: sub_1000FC90+C6j
					; sub_1000FC90+D2j
		mov	dword ptr [ecx+esi*4], 2
		jmp	short loc_1000FD7C
; ---------------------------------------------------------------------------

loc_1000FD75:				; CODE XREF: sub_1000FC90+BFj
					; sub_1000FC90+CDj ...
		mov	dword ptr [ecx+esi*4], 0

loc_1000FD7C:				; CODE XREF: sub_1000FC90+9Fj
					; sub_1000FC90+E3j
		cmp	dword ptr [edi+8], 0
		mov	esi, edi
		jz	loc_1000FEDD
		jmp	short loc_1000FD90
; ---------------------------------------------------------------------------
		align 10h

loc_1000FD90:				; CODE XREF: sub_1000FC90+F8j
					; sub_1000FC90+1BBj
		lea	eax, [esi+8]
		mov	esi, [eax]
		mov	dword ptr [eax], 0
		mov	cl, [esi+15h]
		test	cl, 8
		jnz	loc_1000FE41
		test	cl, 4
		jnz	loc_1000FEDD
		mov	eax, [esp+14h+var_4]
		mov	ebp, [esi+0Ch]
		movzx	eax, ax
		cmp	eax, ebp
		jnz	loc_1000FEDD
		mov	edx, [esi+10h]
		movzx	eax, word ptr [edx]
		test	ax, ax
		jz	short loc_1000FDED
		mov	[esp+14h+arg_0], eax
		mov	eax, [ebx+0Ch]
		shr	eax, 1
		cmp	[esp+14h+arg_0], eax
		ja	loc_1000FEAB
		mov	eax, [esp+14h+arg_0]
		movzx	eax, word ptr [edx+eax*2-2]
		mov	[esp+14h+var_4], eax

loc_1000FDED:				; CODE XREF: sub_1000FC90+13Bj
		test	cl, 1
		jz	short loc_1000FE09
		push	0		; int
		push	0		; int
		push	ebp		; int
		push	edx		; void *
		push	ebx		; int
		call	sub_100105F0
		add	esp, 14h
		test	eax, eax
		jnz	loc_1000FEAB

loc_1000FE09:				; CODE XREF: sub_1000FC90+160j
		mov	ecx, [esi]
		lea	edx, [ebx+1C4h]
		mov	eax, [esi+4]
		mov	dword ptr [esi+0Ch], 0
		mov	byte ptr [esi+15h], 0
		mov	[ecx+4], eax
		mov	ecx, [esi+4]
		mov	eax, [esi]
		mov	[ecx], eax
		mov	eax, [edx]
		mov	eax, [eax+4]
		mov	[esi+4], eax
		mov	eax, [edx]
		mov	[esi], eax
		mov	eax, [edx]
		mov	[eax+4], esi
		mov	eax, [esi+4]
		mov	[eax], esi
		jmp	short loc_1000FE47
; ---------------------------------------------------------------------------

loc_1000FE41:				; CODE XREF: sub_1000FC90+111j
		lea	edx, [ebx+1C4h]

loc_1000FE47:				; CODE XREF: sub_1000FC90+1AFj
		cmp	dword ptr [esi+8], 0
		jnz	loc_1000FD90
		jmp	loc_1000FEE3
; ---------------------------------------------------------------------------

loc_1000FE56:				; CODE XREF: sub_1000FC90+20j
					; sub_1000FC90+2Aj
		mov	esi, ds:malloc
		push	18h		; size_t
		call	esi ; malloc
		mov	edi, eax
		add	esp, 4
		test	edi, edi
		jz	short loc_1000FEAB
		mov	dword ptr [edi], 0FFFFFFFFh
		mov	dword ptr [edi+4], 0FFFFFFFFh
		mov	dword ptr [edi+8], 0FFFFFFFFh
		mov	dword ptr [edi+0Ch], 0FFFFFFFFh
		mov	dword ptr [edi+10h], 0FFFFFFFFh
		mov	dword ptr [edi+14h], 0FFFFFFFFh
		push	dword ptr [ebx+0Ch] ; size_t
		call	esi ; malloc
		add	esp, 4
		mov	[edi+10h], eax
		test	eax, eax
		jnz	short loc_1000FEB3
		push	edi		; void *
		call	ds:free
		add	esp, 4

loc_1000FEAB:				; CODE XREF: sub_1000FC90+64j
					; sub_1000FC90+90j ...
		pop	edi
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_1000FEB3:				; CODE XREF: sub_1000FC90+20Fj
		push	dword ptr [ebx+0Ch] ; size_t
		push	0FFh		; int
		push	eax		; void *
		call	memset
		mov	eax, [ebx+1C0h]
		lea	edx, [ebx+1C4h]
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_1000FEE3
		dec	eax
		mov	[ebx+1C0h], eax
		jmp	short loc_1000FEE3
; ---------------------------------------------------------------------------

loc_1000FEDD:				; CODE XREF: sub_1000FC90+F2j
					; sub_1000FC90+11Aj ...
		lea	edx, [ebx+1C4h]

loc_1000FEE3:				; CODE XREF: sub_1000FC90+4Aj
					; sub_1000FC90+1C1j ...
		mov	eax, [esp+14h+arg_4]
		mov	[edi+0Ch], eax
		mov	eax, [esp+14h+arg_8]
		mov	dword ptr [edi+8], 0
		test	eax, eax
		jz	short loc_1000FF02
		mov	[eax+8], edi
		mov	byte ptr [edi+15h], 0
		jmp	short loc_1000FF06
; ---------------------------------------------------------------------------

loc_1000FF02:				; CODE XREF: sub_1000FC90+267j
		mov	byte ptr [edi+15h], 4

loc_1000FF06:				; CODE XREF: sub_1000FC90+270j
		mov	eax, [ebx+1C8h]
		mov	[edi+4], eax
		mov	[edi], edx
		mov	[ebx+1C8h], edi
		mov	eax, [edi+4]
		mov	[eax], edi
		mov	eax, edi
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		pop	ecx
		retn
sub_1000FC90	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000FF30	proc near		; CODE XREF: sub_1000E350+83p
					; sub_1000F2B0+A3p ...

arg_0		= dword	ptr  4

		mov	edx, [esp+arg_0]
		mov	ecx, 1
		xor	eax, eax
		cmp	edx, ecx
		jbe	short locret_1000FF47
		nop

loc_1000FF40:				; CODE XREF: sub_1000FF30+15j
		add	ecx, ecx
		inc	eax
		cmp	ecx, edx
		jb	short loc_1000FF40

locret_1000FF47:			; CODE XREF: sub_1000FF30+Dj
		retn
sub_1000FF30	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000FF50	proc near		; CODE XREF: sub_1000FFF0+11Cp
					; sub_10011220+23Bp ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebx
		push	ebp
		push	esi
		mov	esi, [esp+0Ch+arg_0]
		push	edi
		mov	edi, [esp+10h+arg_4]
		cmp	dword ptr [esi+34h], 10000h
		mov	ebx, [edi+10h]
		jnz	short loc_1000FF7C
		movzx	eax, word ptr [ebx]
		shr	eax, 1
		mov	[esi+34h], eax
		cmp	eax, 4
		jge	short loc_1000FF7C
		mov	dword ptr [esi+34h], 4

loc_1000FF7C:				; CODE XREF: sub_1000FF50+16j
					; sub_1000FF50+23j
		or	byte ptr [edi+15h], 1
		push	esi
		call	sub_10010DC0
		movzx	ebp, ax
		add	esp, 4
		test	bp, bp
		jz	short loc_1000FFE5
		push	1
		push	edi
		push	ebp
		push	esi
		call	sub_1000FAB0
		add	esp, 10h
		mov	[edi+8], eax
		test	eax, eax
		jz	short loc_1000FFE5
		or	byte ptr [eax+15h], 1
		movzx	eax, word ptr [ebx]
		mov	ecx, eax
		mov	edx, eax
		movzx	eax, word ptr [ebx+ecx*2+4]
		mov	[ebx+ecx*2+8], ax
		movzx	eax, word ptr [ebx]
		movzx	eax, word ptr [ebx+eax*2+2]
		sub	ax, 4
		mov	[ebx+ecx*2+2], bp
		mov	[ebx+ecx*2+6], ax
		xor	eax, eax
		mov	[ebx+ecx*2+4], ax
		lea	eax, [edx+2]
		mov	[ebx], ax
		mov	eax, [edi+8]
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1000FFE5:				; CODE XREF: sub_1000FF50+3Fj
					; sub_1000FF50+53j
		pop	edi
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		retn
sub_1000FF50	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1000FFF0(size_t, int,	void *,	int)
sub_1000FFF0	proc near		; CODE XREF: sub_1000E910+225p
					; sub_1000E910+2CCp

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebx
		mov	ebx, [esp+4+arg_0]
		push	ebp
		mov	ebp, [esp+8+arg_C]
		push	esi
		mov	esi, [esp+0Ch+arg_4]
		push	edi
		mov	[esp+10h+arg_4], 0
		mov	edx, [esi+10h]
		movzx	ecx, word ptr [edx]
		test	cx, cx
		jz	short loc_10010090

loc_10010013:				; CODE XREF: sub_1000FFF0+9Ej
		movzx	edi, word ptr [edx+4]
		cmp	edi, 4
		jb	short loc_10010026
		movzx	eax, cx
		cmp	word ptr [edx+eax*2], 4
		jnb	short loc_10010090

loc_10010026:				; CODE XREF: sub_1000FFF0+2Aj
		cmp	edi, 3
		jnz	short loc_10010031
		cmp	cx, 2
		jz	short loc_10010090

loc_10010031:				; CODE XREF: sub_1000FFF0+39j
		cmp	edi, 4
		jnb	short loc_10010049
		movzx	eax, cx
		cmp	word ptr [edx+eax*2], 0
		lea	eax, [edx+eax*2]
		jz	short loc_10010049
		movzx	eax, word ptr [eax-2]
		jmp	short loc_1001006E
; ---------------------------------------------------------------------------

loc_10010049:				; CODE XREF: sub_1000FFF0+44j
					; sub_1000FFF0+51j
		movzx	eax, cx
		lea	edi, [edx+eax*2]
		mov	eax, [esp+10h+arg_8]
		mov	ecx, [eax+4]
		mov	eax, [ebp+4]
		add	eax, 4
		add	ecx, eax
		movzx	eax, word ptr [edi+2]
		cmp	eax, ecx
		ja	loc_100100EA
		movzx	eax, word ptr [edi-2]

loc_1001006E:				; CODE XREF: sub_1000FFF0+57j
		push	0
		push	esi
		push	eax
		push	ebx
		call	sub_1000FAB0
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		jz	loc_10010157
		mov	edx, [esi+10h]
		movzx	ecx, word ptr [edx]
		test	cx, cx
		jnz	short loc_10010013

loc_10010090:				; CODE XREF: sub_1000FFF0+21j
					; sub_1000FFF0+34j ...
		cmp	word ptr [edx+4], 4
		mov	edi, [esp+10h+arg_8]
		jb	short loc_10010102
		mov	eax, [ebp+4]
		mov	ecx, [edi+4]
		add	eax, 8
		add	ecx, eax
		movzx	eax, word ptr [edx]
		movzx	eax, word ptr [edx+eax*2+2]
		cmp	ecx, eax
		ja	short loc_10010102
		push	ebp
		push	edi
		push	dword ptr [esi+10h]

loc_100100B7:				; CODE XREF: sub_1000FFF0+14Ej
		call	sub_100110C0
		add	esp, 0Ch

loc_100100BF:				; CODE XREF: sub_1000FFF0+161j
		or	byte ptr [esi+15h], 1
		inc	dword ptr [ebx+38h]
		cmp	[esp+10h+arg_4], 0
		jnz	short loc_100100DC
		mov	ecx, [ebx+28h]
		mov	eax, [ebx+38h]
		inc	ecx
		cdq
		idiv	ecx
		cmp	eax, [ebx+34h]
		jle	short loc_100100FB

loc_100100DC:				; CODE XREF: sub_1000FFF0+DBj
		push	ebx		; size_t
		call	sub_1000E350
		add	esp, 4
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_100100EA:				; CODE XREF: sub_1000FFF0+74j
		push	ebp
		push	[esp+14h+arg_8]
		push	edx
		call	sub_10011150
		add	esp, 0Ch
		inc	dword ptr [ebx+38h]

loc_100100FB:				; CODE XREF: sub_1000FFF0+EAj
		pop	edi
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_10010102:				; CODE XREF: sub_1000FFF0+A9j
					; sub_1000FFF0+C0j
		push	esi
		push	ebx
		mov	[esp+18h+arg_4], 1
		call	sub_1000FF50
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		jz	short loc_10010157
		mov	edx, [esi+10h]
		cmp	word ptr [edx+4], 4
		jb	short loc_10010143
		mov	eax, [ebp+4]
		mov	ecx, [edi+4]
		add	eax, 8
		add	ecx, eax
		movzx	eax, word ptr [edx]
		movzx	eax, word ptr [edx+eax*2+2]
		cmp	ecx, eax
		ja	short loc_10010143
		push	ebp
		push	edi
		push	edx
		jmp	loc_100100B7
; ---------------------------------------------------------------------------

loc_10010143:				; CODE XREF: sub_1000FFF0+132j
					; sub_1000FFF0+149j
		push	ebp		; int
		push	edi		; void *
		push	esi		; int
		push	ebx		; int
		call	sub_10011660
		add	esp, 10h
		test	eax, eax
		jz	loc_100100BF

loc_10010157:				; CODE XREF: sub_1000FFF0+8Fj
					; sub_1000FFF0+128j
		pop	edi
		pop	esi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		retn
sub_1000FFF0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10010160	proc near		; CODE XREF: sub_1000E910+2B6p
					; sub_1000E910+2EDp

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, [esp+arg_4]
		push	ebx
		push	ebp
		push	esi
		mov	ebx, [eax+10h]
		mov	esi, [esp+0Ch+arg_8]
		movzx	ebp, word ptr [ebx]
		movzx	ecx, word ptr [ebx+esi*2+2]
		cmp	ecx, 4
		jnb	short loc_1001018C
		push	eax
		push	[esp+10h+arg_0]
		call	sub_10011550
		add	esp, 8
		pop	esi
		pop	ebp
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1001018C:				; CODE XREF: sub_10010160+19j
		cmp	esi, 1
		jz	short loc_10010198
		movzx	eax, word ptr [ebx+esi*2-2]
		jmp	short loc_100101A0
; ---------------------------------------------------------------------------

loc_10010198:				; CODE XREF: sub_10010160+2Fj
		mov	eax, [esp+0Ch+arg_0]
		movzx	eax, word ptr [eax+0Ch]

loc_100101A0:				; CODE XREF: sub_10010160+36j
		sub	eax, ecx
		push	edi
		movzx	edi, ax
		lea	eax, [ebp-1]
		cmp	esi, eax
		jz	short loc_1001022A
		movzx	eax, word ptr [ebx+ebp*2+4]
		sub	ecx, eax
		lea	edx, [eax+edi]
		mov	eax, [esp+10h+arg_0]
		mov	eax, [eax+0Ch]
		cmp	edx, eax
		ja	short loc_100101C8
		sub	eax, edx
		cmp	ecx, eax
		jbe	short loc_100101D2

loc_100101C8:				; CODE XREF: sub_10010160+60j
		pop	edi
		pop	esi
		pop	ebp
		mov	eax, 0FFFFFC19h
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_100101D2:				; CODE XREF: sub_10010160+66j
		movzx	eax, word ptr [ebx+ebp*2+4]
		push	ecx		; size_t
		add	eax, ebx
		push	eax		; void *
		lea	eax, [ebx+edx]
		push	eax		; void *
		call	ds:memmove
		lea	ecx, [esi+2]
		add	esp, 0Ch
		cmp	ecx, ebp
		jg	short loc_1001022A
		mov	esi, ebp
		lea	eax, [ecx+1]
		sub	esi, ecx
		lea	eax, [ebx+eax*2]
		shr	esi, 1
		inc	esi
		lea	esp, [esp+0]

loc_10010200:				; CODE XREF: sub_10010160+C8j
		movzx	edx, word ptr [eax]
		mov	cx, [eax-2]
		test	dx, dx
		jnz	short loc_10010216
		mov	[eax-6], cx
		mov	[eax-4], dx
		jmp	short loc_10010224
; ---------------------------------------------------------------------------

loc_10010216:				; CODE XREF: sub_10010160+AAj
		add	cx, di
		mov	[eax-6], cx
		lea	ecx, [edx+edi]
		mov	[eax-4], cx

loc_10010224:				; CODE XREF: sub_10010160+B4j
		add	eax, 4
		dec	esi
		jnz	short loc_10010200

loc_1001022A:				; CODE XREF: sub_10010160+4Bj
					; sub_10010160+8Dj
		movzx	eax, word ptr [ebx]
		movzx	eax, word ptr [ebx+eax*2+4]
		add	ax, di
		mov	[ebx+ebp*2], ax
		movzx	eax, word ptr [ebx+ebp*2+2]
		add	ax, 4
		add	ax, di
		mov	[ebx+ebp*2-2], ax
		lea	eax, [ebp-2]
		mov	[ebx], ax
		mov	eax, [esp+10h+arg_0]
		pop	edi
		pop	esi
		pop	ebp
		dec	dword ptr [eax+38h]
		mov	eax, [esp+4+arg_4]
		pop	ebx
		or	byte ptr [eax+15h], 1
		xor	eax, eax
		retn
sub_10010160	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10010270	proc near		; CODE XREF: sub_10011220+16Dp
					; sub_10011220+300p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	edi
		mov	edi, [esp+4+arg_4]
		test	edi, edi
		jz	loc_10010317
		cmp	dword ptr [edi+0Ch], 0
		jz	loc_10010317
		movzx	ecx, word ptr [edi+0Ch]
		mov	ax, cx
		push	ebx
		shr	ax, 0Bh
		push	ebp
		movzx	eax, ax
		push	esi
		mov	esi, [esp+10h+arg_0]
		test	ax, ax
		jz	short loc_100102A7
		mov	eax, [esi+eax*4+40h]
		jmp	short loc_100102A9
; ---------------------------------------------------------------------------

loc_100102A7:				; CODE XREF: sub_10010270+2Fj
		xor	eax, eax

loc_100102A9:				; CODE XREF: sub_10010270+35j
		and	ecx, 7FFh
		lea	edx, [ecx-1]
		add	edx, eax
		cmp	edx, [esi+24h]
		jnb	short loc_100102BC
		mov	[esi+24h], edx

loc_100102BC:				; CODE XREF: sub_10010270+47j
		mov	ecx, [esi+10h]
		mov	ebp, edx
		mov	eax, [esi+0Ch]
		add	ecx, 3
		shr	ebp, cl
		lea	ebx, ds:0FFFFFFFFh[eax*8]
		mov	eax, [esi+ebp*4+13Ch]
		and	ebx, edx
		mov	[esp+10h+arg_4], eax
		test	eax, eax
		jnz	short loc_100102EF
		push	ebp
		push	esi
		call	sub_10010AE0
		add	esp, 8
		mov	ebp, eax
		jmp	short loc_100102F3
; ---------------------------------------------------------------------------

loc_100102EF:				; CODE XREF: sub_10010270+6Fj
		mov	ebp, [esp+10h+arg_4]

loc_100102F3:				; CODE XREF: sub_10010270+7Dj
		mov	edx, ebx
		mov	eax, 1
		and	ebx, 1Fh
		shr	edx, 5
		mov	ecx, ebx
		shl	eax, cl
		not	eax
		and	[ebp+edx*4+0], eax
		push	edi
		push	esi
		call	sub_1000FC40
		add	esp, 8
		pop	esi
		pop	ebp
		pop	ebx

loc_10010317:				; CODE XREF: sub_10010270+7j
					; sub_10010270+11j
		pop	edi
		retn
sub_10010270	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10010320(int,	void *,	int, int, int, int)
sub_10010320	proc near		; CODE XREF: sub_1000FAB0+BFp
					; sub_10010AE0+3Cp ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		push	ebp
		push	edi
		mov	edi, [esp+8+arg_0]
		mov	edx, [edi+114h]
		mov	ebp, [edi+0Ch]
		mov	[esp+8+arg_0], edx
		cmp	edx, 0FFFFFFFFh
		jz	loc_10010534
		cmp	[esp+8+arg_10],	0
		jz	loc_10010534
		cmp	[esp+8+arg_C], 0
		push	ebx
		push	esi
		mov	esi, [esp+10h+arg_8]
		jz	short loc_1001037C
		test	esi, esi
		jz	short loc_10010373
		lea	eax, [esi+1]
		push	eax
		call	sub_1000FF30
		mov	edx, [esp+14h+arg_0]
		add	esp, 4
		mov	ecx, [edi+eax*4+40h]
		mov	eax, [edi+3Ch]
		add	eax, ecx
		jmp	short loc_100103B0
; ---------------------------------------------------------------------------

loc_10010373:				; CODE XREF: sub_10010320+36j
		mov	eax, [edi+3Ch]
		xor	ecx, ecx
		add	eax, ecx
		jmp	short loc_100103B0
; ---------------------------------------------------------------------------

loc_1001037C:				; CODE XREF: sub_10010320+32j
		mov	ecx, esi
		mov	ebx, 1
		shr	ecx, 0Bh
		shl	ebx, cl
		lea	eax, [ebx-1]
		test	eax, eax
		jz	short loc_100103A2
		push	ebx
		call	sub_1000FF30
		mov	edx, [esp+14h+arg_0]
		add	esp, 4
		mov	eax, [edi+eax*4+40h]
		jmp	short loc_100103A4
; ---------------------------------------------------------------------------

loc_100103A2:				; CODE XREF: sub_10010320+6Dj
		xor	eax, eax

loc_100103A4:				; CODE XREF: sub_10010320+80j
		and	esi, 7FFh
		dec	esi
		add	esi, [edi+3Ch]
		add	esi, ebx

loc_100103B0:				; CODE XREF: sub_10010320+51j
					; sub_10010320+5Aj
		mov	ecx, [edi+10h]
		add	eax, esi
		push	0
		shl	eax, cl
		push	eax
		push	edx
		call	sub_10010B60
		add	esp, 0Ch
		cmp	eax, 0FFFFFFFFh
		jz	short loc_10010424
		mov	esi, [esp+10h+arg_4]
		push	ebp		; unsigned int
		push	esi		; void *
		push	[esp+18h+arg_0]	; int
		call	ds:_read
		add	esp, 0Ch
		cmp	eax, 0FFFFFFFFh
		jz	short loc_10010424
		test	eax, eax
		jnz	short loc_10010414
		mov	[esi], ax

loc_100103E7:				; CODE XREF: sub_10010320+F6j
		mov	ebx, [esp+10h+arg_14]
		test	ebx, ebx
		jnz	short loc_1001042C
		cmp	[esi], bx
		jnz	short loc_1001042C
		xor	eax, eax
		mov	[esi], ax
		movzx	eax, word ptr [edi+0Ch]
		sub	ax, 6
		mov	[esi+2], ax
		movzx	eax, word ptr [edi+0Ch]
		mov	[esi+4], ax

loc_1001040D:				; CODE XREF: sub_10010320+156j
					; sub_10010320+15Ej ...
		pop	esi
		pop	ebx
		pop	edi
		xor	eax, eax
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_10010414:				; CODE XREF: sub_10010320+C2j
		cmp	eax, ebp
		jz	short loc_100103E7
		call	ds:_errno
		mov	dword ptr [eax], 16h

loc_10010424:				; CODE XREF: sub_10010320+A6j
					; sub_10010320+BEj
		pop	esi
		pop	ebx
		pop	edi
		or	eax, 0FFFFFFFFh
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_1001042C:				; CODE XREF: sub_10010320+CDj
					; sub_10010320+D2j
		cmp	dword ptr [edi+8], 4D2h
		jz	short loc_10010474
		test	ebx, ebx
		jz	loc_100104E1
		mov	edi, [edi+0Ch]
		sar	edi, 2
		test	edi, edi
		jle	short loc_10010474
		lea	edx, [esi+2]
		lea	ebx, [ebx+0]

loc_10010450:				; CODE XREF: sub_10010320+152j
		mov	ecx, [edx-2]
		lea	edx, [edx+4]
		mov	eax, ecx
		mov	[edx-3], cl
		shr	eax, 18h
		mov	[edx-6], al
		mov	eax, ecx
		shr	eax, 10h
		mov	[edx-5], al
		mov	eax, ecx
		shr	eax, 8
		mov	[edx-4], al
		dec	edi
		jnz	short loc_10010450

loc_10010474:				; CODE XREF: sub_10010320+113j
					; sub_10010320+125j
		test	ebx, ebx
		jnz	short loc_1001040D

loc_10010478:				; CODE XREF: sub_10010320+1E3j
					; sub_10010320+205j
		movzx	eax, word ptr [esi]
		test	ax, ax
		jz	short loc_1001040D
		mov	ecx, eax
		mov	ebx, eax
		mov	eax, ebp
		shr	eax, 1
		cmp	ecx, eax
		ja	loc_1001052A
		movzx	eax, word ptr [esi+ecx*2+2]
		cmp	eax, ebp
		ja	loc_1001052A
		mov	ecx, 1
		movzx	edi, bp
		mov	eax, ecx
		cmp	ax, bx
		ja	loc_1001040D

loc_100104B0:				; CODE XREF: sub_10010320+1B8j
		movzx	eax, cx
		lea	edx, [esi+eax*2]
		movzx	eax, word ptr [edx+2]
		cmp	eax, 4
		jb	loc_1001040D
		movzx	edx, word ptr [edx]
		cmp	dx, di
		ja	short loc_1001052A
		cmp	ax, dx
		ja	short loc_1001052A
		add	ecx, 2
		mov	edi, eax
		cmp	cx, bx
		jbe	short loc_100104B0
		pop	esi
		pop	ebx
		pop	edi
		xor	eax, eax
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_100104E1:				; CODE XREF: sub_10010320+117j
		movzx	ecx, word ptr [esi]
		mov	eax, ecx
		mov	[esi+1], cl
		shr	eax, 8
		mov	[esi], al
		mov	eax, ebp
		movzx	edi, word ptr [esi]
		add	edi, 2
		shr	eax, 1
		cmp	edi, eax
		ja	short loc_1001052A
		mov	edx, 1
		cmp	edi, edx
		jl	loc_10010478
		lea	esp, [esp+0]

loc_10010510:				; CODE XREF: sub_10010320+203j
		movzx	ecx, word ptr [esi+edx*2]
		mov	eax, ecx
		mov	[esi+edx*2+1], cl
		shr	eax, 8
		mov	[esi+edx*2], al
		inc	edx
		cmp	edx, edi
		jle	short loc_10010510
		jmp	loc_10010478
; ---------------------------------------------------------------------------

loc_1001052A:				; CODE XREF: sub_10010320+16Aj
					; sub_10010320+177j ...
		pop	esi
		pop	ebx
		pop	edi
		mov	eax, 0FFFFFC19h
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_10010534:				; CODE XREF: sub_10010320+16j
					; sub_10010320+21j
		mov	ecx, [esp+8+arg_4]
		xor	eax, eax
		mov	[ecx], ax
		movzx	eax, word ptr [edi+0Ch]
		sub	ax, 6
		mov	[ecx+2], ax
		movzx	eax, word ptr [edi+0Ch]
		pop	edi
		mov	[ecx+4], ax
		xor	eax, eax
		pop	ebp
		retn
sub_10010320	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10010560	proc near		; CODE XREF: sub_1000F410+4Ap
					; sub_10010DC0+284p

arg_0		= dword	ptr  4
arg_4		= word ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebx
		mov	ebx, [esp+4+arg_0]
		push	ebp
		push	dword ptr [ebx+0Ch] ; size_t
		call	ds:malloc
		mov	ebp, eax
		add	esp, 4
		test	ebp, ebp
		jnz	short loc_1001057E
		lea	eax, [ebp+1]
		pop	ebp
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1001057E:				; CODE XREF: sub_10010560+16j
		inc	dword ptr [ebx+1BCh]
		push	esi
		push	edi
		mov	edi, [esp+10h+arg_8]
		lea	ebx, [edi-1]
		sar	ebx, 5
		lea	esi, ds:4[ebx*4]
		push	esi		; size_t
		push	0		; int
		push	ebp		; void *
		call	memset
		mov	eax, [esp+1Ch+arg_0]
		mov	eax, [eax+0Ch]
		sub	eax, esi
		push	eax		; size_t
		lea	eax, [esi+ebp]
		push	0FFh		; int
		push	eax		; void *
		call	memset
		mov	edx, [esp+28h+arg_0]
		and	edi, 1Fh
		add	esp, 18h
		or	eax, 0FFFFFFFFh
		mov	ecx, edi
		shl	eax, cl
		mov	ecx, [esp+10h+arg_C]
		mov	[ebp+ebx*4+0], eax
		or	dword ptr [ebp+0], 1
		mov	ax, [esp+10h+arg_4]
		pop	edi
		mov	[edx+ecx*2+0C4h], ax
		xor	eax, eax
		pop	esi
		mov	[edx+ecx*4+13Ch], ebp
		pop	ebp
		pop	ebx
		retn
sub_10010560	endp


; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_100105F0(int,	void *,	int, int, int)
sub_100105F0	proc near		; CODE XREF: sub_1000E7E0+F4p
					; sub_1000F9A0+59p ...

var_414		= dword	ptr -414h
var_410		= dword	ptr -410h
var_40C		= dword	ptr -40Ch
var_408		= dword	ptr -408h
var_404		= byte ptr -404h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		sub	esp, 414h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+414h+var_4], eax
		push	ebx
		mov	ebx, [esp+418h+arg_4]
		push	esi
		mov	esi, [esp+41Ch+arg_8]
		push	edi
		mov	edi, [esp+420h+arg_0]
		mov	[esp+420h+var_408], ebx
		mov	[esp+420h+var_414], esi
		cmp	dword ptr [edi+114h], 0FFFFFFFFh
		mov	ecx, [edi+0Ch]
		mov	[esp+420h+var_410], ecx
		jnz	short loc_10010660
		push	edi
		call	sub_10010C70
		add	esp, 4
		test	eax, eax
		jz	short loc_1001065C
		pop	edi
		pop	esi
		or	eax, 0FFFFFFFFh
		pop	ebx
		mov	ecx, [esp+414h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 414h
		retn
; ---------------------------------------------------------------------------

loc_1001065C:				; CODE XREF: sub_100105F0+4Fj
		mov	ecx, [esp+420h+var_410]

loc_10010660:				; CODE XREF: sub_100105F0+42j
		cmp	dword ptr [edi+8], 4D2h
		mov	eax, [edi+114h]
		mov	[esp+420h+var_40C], eax
		jz	loc_10010709
		cmp	[esp+420h+arg_10], 0
		jz	short loc_100106B6
		mov	esi, [edi+0Ch]
		sar	esi, 2
		test	esi, esi
		jle	short loc_10010705
		lea	edx, [ebx+2]
		mov	edi, edi

loc_10010690:				; CODE XREF: sub_100105F0+C2j
		mov	ecx, [edx-2]
		lea	edx, [edx+4]
		mov	eax, ecx
		mov	[edx-3], cl
		shr	eax, 18h
		mov	[edx-6], al
		mov	eax, ecx
		shr	eax, 10h
		mov	[edx-5], al
		mov	eax, ecx
		shr	eax, 8
		mov	[edx-4], al
		dec	esi
		jnz	short loc_10010690
		jmp	short loc_10010705
; ---------------------------------------------------------------------------

loc_100106B6:				; CODE XREF: sub_100105F0+8Fj
		movzx	esi, word ptr [ebx]
		mov	eax, ecx
		add	esi, 2
		shr	eax, 1
		cmp	esi, eax
		jbe	short loc_100106E1
		pop	edi
		pop	esi
		mov	eax, 0FFFFFC19h
		pop	ebx
		mov	ecx, [esp+414h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 414h
		retn
; ---------------------------------------------------------------------------

loc_100106E1:				; CODE XREF: sub_100105F0+D2j
		xor	edx, edx
		test	esi, esi
		js	short loc_10010705
		jmp	short loc_100106F0
; ---------------------------------------------------------------------------
		align 10h

loc_100106F0:				; CODE XREF: sub_100105F0+F7j
					; sub_100105F0+113j
		movzx	ecx, word ptr [ebx+edx*2]
		mov	eax, ecx
		mov	[ebx+edx*2+1], cl
		shr	eax, 8
		mov	[ebx+edx*2], al
		inc	edx
		cmp	edx, esi
		jle	short loc_100106F0

loc_10010705:				; CODE XREF: sub_100105F0+99j
					; sub_100105F0+C4j ...
		mov	esi, [esp+420h+var_414]

loc_10010709:				; CODE XREF: sub_100105F0+81j
		cmp	[esp+420h+arg_C], 0
		push	ebp
		jz	short loc_10010738
		test	esi, esi
		jz	short loc_1001072F
		lea	eax, [esi+1]
		push	eax
		call	sub_1000FF30
		mov	ebp, [edi+3Ch]
		add	esp, 4
		mov	eax, [edi+eax*4+40h]
		add	ebp, eax
		jmp	short loc_1001076A
; ---------------------------------------------------------------------------

loc_1001072F:				; CODE XREF: sub_100105F0+126j
		mov	ebp, [edi+3Ch]
		xor	eax, eax
		add	ebp, eax
		jmp	short loc_1001076A
; ---------------------------------------------------------------------------

loc_10010738:				; CODE XREF: sub_100105F0+122j
		mov	ecx, esi
		mov	ebp, 1
		shr	ecx, 0Bh
		shl	ebp, cl
		lea	eax, [ebp-1]
		test	eax, eax
		jz	short loc_1001075A
		push	ebp
		call	sub_1000FF30
		add	esp, 4
		mov	eax, [edi+eax*4+40h]
		jmp	short loc_1001075C
; ---------------------------------------------------------------------------

loc_1001075A:				; CODE XREF: sub_100105F0+159j
		xor	eax, eax

loc_1001075C:				; CODE XREF: sub_100105F0+168j
		and	esi, 7FFh
		add	esi, [edi+3Ch]
		add	esi, ebp
		lea	ebp, [eax-1]

loc_1001076A:				; CODE XREF: sub_100105F0+13Dj
					; sub_100105F0+146j
		mov	ecx, [edi+10h]
		add	ebp, esi
		mov	esi, [esp+424h+var_40C]
		push	2		; int
		push	0		; __int32
		push	esi		; int
		shl	ebp, cl
		call	ds:_lseek
		add	esp, 0Ch
		mov	[esp+424h+var_414], eax
		test	eax, eax
		js	short loc_100107F0
		cmp	ebp, eax
		jle	short loc_100107E2
		push	400h		; size_t
		lea	eax, [esp+428h+var_404]
		push	0		; int
		push	eax		; void *
		call	memset
		mov	esi, ebp
		add	esp, 0Ch
		sub	esi, [esp+424h+var_414]
		test	esi, esi
		jle	short loc_100107DE
		mov	ebx, [esp+424h+var_40C]

loc_100107B1:				; CODE XREF: sub_100105F0+1E8j
		mov	eax, esi
		cmp	esi, 400h
		jl	short loc_100107C0
		mov	eax, 400h

loc_100107C0:				; CODE XREF: sub_100105F0+1C9j
		push	eax		; unsigned int
		lea	eax, [esp+428h+var_404]
		push	eax		; void *
		push	ebx		; int
		call	ds:_write
		sub	esi, 400h
		add	esp, 0Ch
		test	esi, esi
		jg	short loc_100107B1
		mov	ebx, [esp+424h+var_408]

loc_100107DE:				; CODE XREF: sub_100105F0+1BBj
		mov	esi, [esp+424h+var_40C]

loc_100107E2:				; CODE XREF: sub_100105F0+19Dj
		mov	eax, ds:_lseek
		push	0		; int
		push	ebp		; __int32
		push	esi		; int
		call	eax ; _lseek
		add	esp, 0Ch

loc_100107F0:				; CODE XREF: sub_100105F0+199j
		cmp	eax, 0FFFFFFFFh
		jz	short loc_1001081D
		push	[esp+424h+var_410] ; unsigned int
		push	ebx		; void *
		push	esi		; int
		call	ds:_write
		add	esp, 0Ch
		cmp	eax, 0FFFFFFFFh
		jz	short loc_1001081D
		mov	ecx, [esp+424h+var_410]
		cmp	eax, ecx
		jz	short loc_10010839
		call	ds:_errno
		mov	dword ptr [eax], 16h

loc_1001081D:				; CODE XREF: sub_100105F0+203j
					; sub_100105F0+217j
		or	eax, 0FFFFFFFFh

loc_10010820:				; CODE XREF: sub_100105F0+2A6j
					; sub_100105F0+2DBj
		mov	ecx, [esp+424h+var_4]
		pop	ebp
		pop	edi
		pop	esi
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 414h
		retn
; ---------------------------------------------------------------------------

loc_10010839:				; CODE XREF: sub_100105F0+21Fj
		lea	eax, [ecx+ebp]
		cmp	eax, [edi+1E0h]
		jbe	short loc_1001084B
		mov	byte ptr [edi+1E5h], 1

loc_1001084B:				; CODE XREF: sub_100105F0+252j
		cmp	dword ptr [edi+8], 4D2h
		jz	short loc_100108C9
		cmp	[esp+424h+arg_10], 0
		jz	short loc_10010898
		mov	esi, [edi+0Ch]
		sar	esi, 2
		test	esi, esi
		jle	short loc_100108C9
		lea	edx, [ebx+2]
		jmp	short loc_10010870
; ---------------------------------------------------------------------------
		align 10h

loc_10010870:				; CODE XREF: sub_100105F0+27Bj
					; sub_100105F0+2A2j
		mov	ecx, [edx-2]
		lea	edx, [edx+4]
		mov	eax, ecx
		mov	[edx-3], cl
		shr	eax, 18h
		mov	[edx-6], al
		mov	eax, ecx
		shr	eax, 10h
		mov	[edx-5], al
		mov	eax, ecx
		shr	eax, 8
		mov	[edx-4], al
		dec	esi
		jnz	short loc_10010870
		xor	eax, eax
		jmp	short loc_10010820
; ---------------------------------------------------------------------------

loc_10010898:				; CODE XREF: sub_100105F0+26Cj
		movzx	ecx, word ptr [ebx]
		mov	edx, 1
		mov	eax, ecx
		mov	[ebx+1], cl
		shr	eax, 8
		mov	[ebx], al
		movzx	esi, word ptr [ebx]
		add	esi, 2
		cmp	esi, edx
		jl	short loc_100108C9

loc_100108B4:				; CODE XREF: sub_100105F0+2D7j
		movzx	ecx, word ptr [ebx+edx*2]
		mov	eax, ecx
		mov	[ebx+edx*2+1], cl
		shr	eax, 8
		mov	[ebx+edx*2], al
		inc	edx
		cmp	edx, esi
		jle	short loc_100108B4

loc_100108C9:				; CODE XREF: sub_100105F0+262j
					; sub_100105F0+276j ...
		xor	eax, eax
		jmp	loc_10010820
sub_100105F0	endp


; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_100108D0(size_t, int,	int)
sub_100108D0	proc near		; CODE XREF: sub_1000E350+AFp

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 2Ch
		push	ebx
		push	ebp
		push	esi
		push	edi
		mov	edi, [esp+3Ch+arg_0]
		push	0
		push	0
		push	[esp+44h+arg_4]
		movzx	eax, word ptr [edi+0Ch]
		push	edi
		mov	ebx, eax
		mov	ebp, eax
		call	sub_1000FAB0
		mov	esi, eax
		add	esp, 10h
		mov	[esp+3Ch+var_20], esi
		test	esi, esi
		jnz	short loc_10010909

loc_100108FE:				; CODE XREF: sub_100108D0+52j
		pop	edi
		pop	esi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------

loc_10010909:				; CODE XREF: sub_100108D0+2Cj
		push	0
		push	0
		push	[esp+44h+arg_8]
		push	edi
		call	sub_1000FAB0
		mov	ecx, eax
		add	esp, 10h
		mov	[esp+3Ch+var_1C], ecx
		test	ecx, ecx
		jz	short loc_100108FE
		or	byte ptr [esi+15h], 9
		or	byte ptr [ecx+15h], 9
		mov	eax, [ecx+10h]
		xor	ecx, ecx
		mov	edi, [esi+10h]
		mov	[esp+3Ch+var_18], eax
		mov	eax, 1
		mov	edx, eax
		mov	[esp+3Ch+var_28], ecx
		mov	[esp+3Ch+var_24], eax
		mov	[esp+3Ch+var_2C], eax
		cmp	dx, [edi]
		jnb	loc_10010A68

loc_10010954:				; CODE XREF: sub_100108D0+18Ej
		movzx	eax, ax
		cmp	word ptr [edi+eax*2+2],	4
		lea	esi, [edi+eax*2]
		jb	loc_10010AAA
		movzx	ecx, word ptr [esi]
		lea	edx, [ecx+edi]
		mov	[esp+3Ch+var_8], edx
		cmp	ecx, ebp
		ja	loc_10010A9D
		mov	eax, ebp
		sub	eax, ecx
		push	eax
		push	edx
		push	[esp+44h+arg_0]
		mov	[esp+48h+var_14], eax
		mov	[esp+48h+var_4], eax
		call	sub_1000E320
		add	esp, 0Ch
		cmp	eax, [esp+3Ch+arg_4]
		jnz	short loc_100109F5
		sub	ebx, ebp
		movzx	eax, bx
		test	ax, ax
		jz	short loc_100109E6
		movzx	ecx, word ptr [esi+2]
		add	eax, ecx
		movzx	ebx, ax
		mov	eax, ecx
		sub	ebp, eax
		add	eax, edi
		push	ebp		; size_t
		push	eax		; void *
		lea	eax, [edi+ebx]
		push	eax		; void *
		call	ds:memmove
		mov	eax, [esp+48h+var_2C]
		add	esp, 0Ch
		movzx	eax, ax
		lea	ecx, [edi+eax*2]
		mov	ax, [esi]
		sub	ax, [esi+2]
		add	ax, bx
		mov	[ecx+2], bx
		add	[esp+3Ch+var_2C], 2
		mov	[ecx], ax
		mov	ecx, [esp+3Ch+var_28]
		jmp	short loc_10010A4C
; ---------------------------------------------------------------------------

loc_100109E6:				; CODE XREF: sub_100108D0+D0j
		movzx	ebx, word ptr [esi+2]
		add	[esp+3Ch+var_2C], 2
		mov	ecx, [esp+3Ch+var_28]
		jmp	short loc_10010A4C
; ---------------------------------------------------------------------------

loc_100109F5:				; CODE XREF: sub_100108D0+C6j
		movzx	ecx, word ptr [esi+2]
		mov	ebp, [esp+3Ch+var_18]
		movzx	edx, word ptr [esi]
		sub	edx, ecx
		lea	eax, [ecx+edi]
		mov	[esp+3Ch+var_C], edx
		cmp	word ptr [ebp+4], 4
		mov	[esp+3Ch+var_10], eax
		jb	loc_10010A9D
		movzx	eax, word ptr [ebp+0]
		movzx	ecx, word ptr [ebp+eax*2+2]
		mov	eax, [esp+3Ch+var_14]
		add	eax, 8
		add	eax, edx
		cmp	eax, ecx
		ja	short loc_10010A9D
		lea	eax, [esp+3Ch+var_10]
		push	eax
		lea	eax, [esp+40h+var_8]
		push	eax
		push	ebp
		call	sub_100110C0
		mov	ecx, [esp+48h+var_28]
		add	esp, 0Ch
		add	ecx, 2
		mov	[esp+3Ch+var_28], ecx

loc_10010A4C:				; CODE XREF: sub_100108D0+114j
					; sub_100108D0+123j
		mov	eax, [esp+3Ch+var_24]
		movzx	ebp, word ptr [esi+2]
		add	eax, 2
		mov	[esp+3Ch+var_24], eax
		cmp	ax, [edi]
		jb	loc_10010954
		mov	esi, [esp+3Ch+var_20]

loc_10010A68:				; CODE XREF: sub_100108D0+7Ej
		sub	[edi], cx
		mov	ecx, ebx
		movzx	edx, word ptr [edi]
		lea	eax, [edx+edx]
		sub	ecx, eax
		mov	eax, edx
		sub	ecx, 6
		mov	[edi+eax*2+2], cx
		movzx	eax, word ptr [edi]
		mov	[edi+eax*2+4], bx
		and	byte ptr [esi+15h], 0F7h
		mov	esi, [esp+3Ch+var_1C]
		pop	edi
		and	byte ptr [esi+15h], 0F7h
		xor	eax, eax
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------

loc_10010A9D:				; CODE XREF: sub_100108D0+A2j
					; sub_100108D0+142j ...
		pop	edi
		pop	esi
		pop	ebp
		mov	eax, 0FFFFFC19h
		pop	ebx
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------

loc_10010AAA:				; CODE XREF: sub_100108D0+90j
		mov	esi, [esp+3Ch+var_1C]
		mov	edi, [esp+3Ch+var_20]
		movzx	eax, cx
		push	eax		; int
		movzx	eax, bx
		push	eax		; int
		push	esi		; int
		push	edi		; int
		push	[esp+4Ch+arg_4]	; int
		push	[esp+50h+arg_0]	; size_t
		call	sub_10011220
		and	byte ptr [edi+15h], 0F7h
		add	esp, 18h
		and	byte ptr [esi+15h], 0F7h
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 2Ch
		retn
sub_100108D0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10010AE0	proc near		; CODE XREF: sub_10010270+73p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_0]
		push	edi
		mov	edi, [esp+8+arg_4]
		cmp	edi, [esi+1BCh]
		jnb	short loc_10010B43
		push	dword ptr [esi+0Ch] ; size_t
		call	ds:malloc
		mov	ecx, eax
		add	esp, 4
		mov	[esi+edi*4+13Ch], ecx
		test	ecx, ecx
		jz	short loc_10010B43
		movzx	eax, word ptr [esi+edi*2+0C4h]
		push	1		; int
		push	1		; int
		push	0		; int
		push	eax		; int
		push	ecx		; void *
		push	esi		; int
		call	sub_10010320
		add	esp, 18h
		test	eax, eax
		jz	short loc_10010B48
		push	dword ptr [esi+edi*4+13Ch] ; void *
		call	ds:free
		add	esp, 4
		mov	dword ptr [esi+edi*4+13Ch], 0

loc_10010B43:				; CODE XREF: sub_10010AE0+10j
					; sub_10010AE0+29j
		pop	edi
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10010B48:				; CODE XREF: sub_10010AE0+46j
		mov	eax, [esi+edi*4+13Ch]
		pop	edi
		pop	esi
		retn
sub_10010AE0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10010B60	proc near		; CODE XREF: sub_10010320+9Bp

var_404		= byte ptr -404h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 404h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+404h+var_4], eax
		push	ebx
		mov	ebx, ds:_lseek
		push	ebp
		mov	ebp, [esp+40Ch+arg_0]
		push	esi
		xor	esi, esi
		cmp	[esp+410h+arg_8], 1
		push	edi
		mov	edi, [esp+414h+arg_4]
		jnz	short loc_10010BBD
		push	1		; int
		cmp	edi, 1
		jge	short loc_10010BAB
		push	edi		; __int32
		push	ebp		; int
		call	ebx ; _lseek
		add	esp, 0Ch
		jmp	loc_10010C4B
; ---------------------------------------------------------------------------

loc_10010BAB:				; CODE XREF: sub_10010B60+3Dj
		push	0		; __int32
		push	ebp		; int
		call	ebx ; _lseek
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_10010C4B

loc_10010BBD:				; CODE XREF: sub_10010B60+36j
		push	2		; int
		push	0		; __int32
		push	ebp		; int
		call	ebx ; _lseek
		mov	ebx, eax
		add	esp, 0Ch
		test	ebx, ebx
		jns	short loc_10010BD2
		jmp	loc_10010C4B
; ---------------------------------------------------------------------------

loc_10010BD2:				; CODE XREF: sub_10010B60+6Bj
		mov	eax, [esp+414h+arg_8]
		test	eax, eax
		jz	short loc_10010BED
		cmp	eax, 1
		jnz	short loc_10010BE6
		add	edi, esi
		jmp	short loc_10010BED
; ---------------------------------------------------------------------------

loc_10010BE6:				; CODE XREF: sub_10010B60+80j
		cmp	eax, 2
		jnz	short loc_10010C48
		add	edi, ebx

loc_10010BED:				; CODE XREF: sub_10010B60+7Bj
					; sub_10010B60+84j
		cmp	edi, ebx
		jle	short loc_10010C38
		push	400h		; size_t
		lea	eax, [esp+418h+var_404]
		push	0		; int
		push	eax		; void *
		call	memset
		mov	esi, edi
		add	esp, 0Ch
		sub	esi, ebx
		test	esi, esi
		jle	short loc_10010C38
		mov	ebx, ds:_write

loc_10010C13:				; CODE XREF: sub_10010B60+D6j
		mov	eax, esi
		cmp	esi, 400h
		jl	short loc_10010C22
		mov	eax, 400h

loc_10010C22:				; CODE XREF: sub_10010B60+BBj
		push	eax		; unsigned int
		lea	eax, [esp+418h+var_404]
		push	eax		; void *
		push	ebp		; int
		call	ebx ; _write
		sub	esi, 400h
		add	esp, 0Ch
		test	esi, esi
		jg	short loc_10010C13

loc_10010C38:				; CODE XREF: sub_10010B60+8Fj
					; sub_10010B60+ABj
		mov	eax, ds:_lseek
		push	0		; int
		push	edi		; __int32
		push	ebp		; int
		call	eax ; _lseek
		add	esp, 0Ch
		jmp	short loc_10010C4B
; ---------------------------------------------------------------------------

loc_10010C48:				; CODE XREF: sub_10010B60+89j
		or	eax, 0FFFFFFFFh

loc_10010C4B:				; CODE XREF: sub_10010B60+46j
					; sub_10010B60+57j ...
		mov	ecx, [esp+414h+var_4]
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 404h
		retn
sub_10010B60	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10010C70	proc near		; CODE XREF: sub_100105F0+45p

var_404		= byte ptr -404h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		sub	esp, 404h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+404h+var_4], eax
		push	ebx
		mov	ebx, [esp+408h+arg_0]
		push	esi
		mov	esi, ds:getenv
		push	offset aTmp	; "TMP"
		mov	[esp+410h+var_404], 0
		call	esi ; getenv
		mov	edx, eax
		add	esp, 4
		test	edx, edx
		jnz	short loc_10010CCD
		push	offset aTmpdir	; "TMPDIR"
		call	esi ; getenv
		mov	edx, eax
		add	esp, 4
		test	edx, edx
		jnz	short loc_10010CCD
		push	offset aTemp	; "TEMP"
		call	esi ; getenv
		mov	edx, eax
		add	esp, 4
		test	edx, edx
		jnz	short loc_10010CCD
		mov	edx, offset a_	; "."

loc_10010CCD:				; CODE XREF: sub_10010C70+36j
					; sub_10010C70+46j ...
		mov	ecx, edx
		lea	esi, [ecx+1]

loc_10010CD2:				; CODE XREF: sub_10010C70+67j
		mov	al, [ecx]
		inc	ecx
		test	al, al
		jnz	short loc_10010CD2
		sub	ecx, esi
		jz	short loc_10010CFD
		cmp	ecx, 3F3h
		jnb	short loc_10010CFD
		lea	esi, [esp+40Ch+var_404]
		mov	ecx, edx
		sub	esi, edx
		lea	ecx, [ecx+0]

loc_10010CF0:				; CODE XREF: sub_10010C70+8Bj
		mov	al, [ecx]
		lea	ecx, [ecx+1]
		mov	[esi+ecx-1], al
		test	al, al
		jnz	short loc_10010CF0

loc_10010CFD:				; CODE XREF: sub_10010C70+6Bj
					; sub_10010C70+73j
		lea	ecx, [esp+40Ch+var_404]
		lea	esi, [ecx+1]

loc_10010D04:				; CODE XREF: sub_10010C70+99j
		mov	al, [ecx]
		inc	ecx
		test	al, al
		jnz	short loc_10010D04
		sub	ecx, esi
		mov	al, [ecx+edx-1]
		cmp	al, 2Fh
		jz	short loc_10010D1E
		mov	edx, offset a_hashxxxxxx ; "/_hashXXXXXX"
		cmp	al, 5Ch
		jnz	short loc_10010D23

loc_10010D1E:				; CODE XREF: sub_10010C70+A3j
		mov	edx, (offset a_hashxxxxxx+1) ; "_hashXXXXXX"

loc_10010D23:				; CODE XREF: sub_10010C70+ACj
		mov	esi, edx

loc_10010D25:				; CODE XREF: sub_10010C70+BAj
		mov	al, [edx]
		inc	edx
		test	al, al
		jnz	short loc_10010D25
		push	edi
		lea	edi, [esp+410h+var_404]
		sub	edx, esi
		dec	edi

loc_10010D34:				; CODE XREF: sub_10010C70+CAj
		mov	al, [edi+1]
		inc	edi
		test	al, al
		jnz	short loc_10010D34
		mov	ecx, edx
		lea	eax, [esp+410h+var_404]
		shr	ecx, 2
		rep movsd
		mov	ecx, edx
		and	ecx, 3
		push	8040h		; int
		rep movsb
		push	eax		; char *
		call	sub_10012340
		add	esp, 8
		mov	[ebx+114h], eax
		pop	edi
		cmp	eax, 0FFFFFFFFh
		jz	short loc_10010D97
		mov	eax, [ebx+118h]
		test	eax, eax
		jz	short loc_10010D7C
		push	eax		; void *
		call	ds:free
		add	esp, 4

loc_10010D7C:				; CODE XREF: sub_10010C70+100j
		lea	eax, [esp+40Ch+var_404]
		push	eax		; char *
		call	ds:strdup
		add	esp, 4
		mov	[ebx+118h], eax
		mov	byte ptr [ebx+1E4h], 1

loc_10010D97:				; CODE XREF: sub_10010C70+F6j
		mov	ecx, [esp+40Ch+var_4]
		xor	eax, eax
		cmp	dword ptr [ebx+114h], 0FFFFFFFFh
		pop	esi
		setnz	al
		pop	ebx
		xor	ecx, esp
		dec	eax
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 404h
		retn
sub_10010C70	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10010DC0	proc near		; CODE XREF: sub_1000FF50+31p

var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		sub	esp, 14h
		push	ebx
		push	ebp
		push	esi
		push	edi
		mov	edi, [esp+24h+arg_0]
		xor	ebp, ebp
		mov	ebx, [edi+20h]
		mov	esi, [edi+10h]
		mov	edx, [edi+ebx*4+44h]
		dec	edx
		lea	ecx, [esi+3]
		mov	eax, edx
		sar	eax, cl
		lea	ecx, [esi+3]
		mov	[esp+24h+arg_0], eax
		mov	eax, [edi+0Ch]
		lea	eax, ds:0FFFFFFFFh[eax*8]
		and	eax, edx
		mov	edx, [esp+24h+arg_0]
		mov	[esp+24h+var_4], eax
		mov	eax, [edi+24h]
		sar	eax, cl
		mov	[esp+24h+var_8], eax
		mov	esi, eax
		mov	[esp+24h+var_C], esi
		cmp	eax, edx
		ja	loc_10010EF8
		add	eax, 4Fh
		mov	ecx, esi
		add	ecx, 62h
		lea	eax, [edi+eax*4]
		lea	ecx, [edi+ecx*2]
		mov	[esp+24h+var_10], eax
		mov	[esp+24h+var_14], ecx

loc_10010E27:				; CODE XREF: sub_10010DC0+132j
		mov	ebp, [eax]
		test	ebp, ebp
		jnz	short loc_10010E85
		cmp	esi, [edi+1BCh]
		jnb	loc_10010F34
		push	dword ptr [edi+0Ch] ; size_t
		call	ds:malloc
		mov	ebp, [esp+28h+var_10]
		mov	ecx, eax
		add	esp, 4
		mov	[ebp+0], ecx
		test	ecx, ecx
		jz	loc_10010F34
		mov	eax, [esp+24h+var_14]
		push	1		; int
		push	1		; int
		push	0		; int
		movzx	eax, word ptr [eax]
		push	eax		; int
		push	ecx		; void *
		push	edi		; int
		call	sub_10010320
		add	esp, 18h
		test	eax, eax
		jnz	loc_10010F19
		mov	ebp, [ebp+0]
		test	ebp, ebp
		jz	loc_10010F34
		mov	edx, [esp+24h+arg_0]

loc_10010E85:				; CODE XREF: sub_10010DC0+6Bj
		cmp	esi, edx
		jnz	short loc_10010E8F
		mov	ecx, [esp+24h+var_4]
		jmp	short loc_10010E99
; ---------------------------------------------------------------------------

loc_10010E8F:				; CODE XREF: sub_10010DC0+C7j
		mov	eax, [edi+0Ch]
		lea	ecx, ds:0FFFFFFFFh[eax*8]

loc_10010E99:				; CODE XREF: sub_10010DC0+CDj
		cmp	esi, [esp+24h+var_8]
		jnz	short loc_10010EC0
		mov	esi, [edi+0Ch]
		lea	esi, ds:0FFFFFFFFh[esi*8]
		and	esi, [edi+24h]
		mov	eax, esi
		cdq
		and	edx, 1Fh
		add	eax, edx
		mov	edx, [esp+24h+arg_0]
		sar	eax, 5
		and	esi, 0FFFFFFE0h
		jmp	short loc_10010EC4
; ---------------------------------------------------------------------------

loc_10010EC0:				; CODE XREF: sub_10010DC0+DDj
		xor	esi, esi
		xor	eax, eax

loc_10010EC4:				; CODE XREF: sub_10010DC0+FEj
		cmp	esi, ecx
		jg	short loc_10010ED7

loc_10010EC8:				; CODE XREF: sub_10010DC0+115j
		cmp	dword ptr [ebp+eax*4+0], 0FFFFFFFFh
		jnz	short loc_10010F3E
		add	esi, 20h
		inc	eax
		cmp	esi, ecx
		jle	short loc_10010EC8

loc_10010ED7:				; CODE XREF: sub_10010DC0+106j
		mov	esi, [esp+24h+var_C]
		mov	eax, [esp+24h+var_10]
		inc	esi
		add	[esp+24h+var_14], 2
		add	eax, 4
		mov	[esp+24h+var_C], esi
		mov	[esp+24h+var_10], eax
		cmp	esi, edx
		jbe	loc_10010E27

loc_10010EF8:				; CODE XREF: sub_10010DC0+4Bj
		mov	eax, [edi+ebx*4+44h]
		lea	ecx, [edi+ebx*4]
		mov	[edi+24h], eax
		inc	dword ptr [ecx+44h]
		mov	esi, [ecx+44h]
		test	ebx, ebx
		jz	loc_10010FDD
		mov	eax, [edi+ebx*4+40h]
		jmp	loc_10010FDF
; ---------------------------------------------------------------------------

loc_10010F19:				; CODE XREF: sub_10010DC0+B0j
		push	dword ptr [edi+esi*4+13Ch] ; void *
		call	ds:free
		add	esp, 4
		mov	dword ptr [edi+esi*4+13Ch], 0

loc_10010F34:				; CODE XREF: sub_10010DC0+73j
					; sub_10010DC0+90j ...
		pop	edi
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		add	esp, 14h
		retn
; ---------------------------------------------------------------------------

loc_10010F3E:				; CODE XREF: sub_10010DC0+10Dj
		mov	eax, [ebp+eax*4+0]
		mov	edx, 1
		xor	ecx, ecx
		lea	esp, [esp+0]

loc_10010F50:				; CODE XREF: sub_10010DC0+19Aj
		test	edx, eax
		jz	short loc_10010F5C
		inc	ecx
		add	edx, edx
		cmp	ecx, 20h
		jb	short loc_10010F50

loc_10010F5C:				; CODE XREF: sub_10010DC0+192j
		add	esi, ecx
		mov	eax, esi
		mov	ecx, esi
		cdq
		and	edx, 1Fh
		add	eax, edx
		sar	eax, 5
		lea	edx, ds:0[eax*4]
		and	ecx, 8000001Fh
		jns	short loc_10010F7F
		dec	ecx
		or	ecx, 0FFFFFFE0h
		inc	ecx

loc_10010F7F:				; CODE XREF: sub_10010DC0+1B8j
		mov	eax, 1
		shl	eax, cl
		or	[edx+ebp], eax
		mov	edx, [edi+0Ch]
		shl	edx, 3
		imul	edx, [esp+24h+var_C]
		inc	edx
		add	edx, esi
		cmp	edx, [edi+24h]
		jl	short loc_10010FA2
		lea	eax, [edx-1]
		mov	[edi+24h], eax

loc_10010FA2:				; CODE XREF: sub_10010DC0+1DAj
		xor	eax, eax
		test	ebx, ebx
		jz	short loc_10010FC4
		lea	ecx, [edi+44h]
		jmp	short loc_10010FB0
; ---------------------------------------------------------------------------
		align 10h

loc_10010FB0:				; CODE XREF: sub_10010DC0+1EBj
					; sub_10010DC0+1FAj
		cmp	edx, [ecx]
		jle	short loc_10010FBC
		inc	eax
		add	ecx, 4
		cmp	eax, ebx
		jb	short loc_10010FB0

loc_10010FBC:				; CODE XREF: sub_10010DC0+1F2j
		test	eax, eax
		jz	short loc_10010FC4
		sub	edx, [edi+eax*4+40h]

loc_10010FC4:				; CODE XREF: sub_10010DC0+1E6j
					; sub_10010DC0+1FEj
		cmp	edx, 7FFh
		jge	loc_10010F34
		pop	edi
		pop	esi
		shl	eax, 0Bh
		pop	ebp
		add	eax, edx
		pop	ebx
		add	esp, 14h
		retn
; ---------------------------------------------------------------------------

loc_10010FDD:				; CODE XREF: sub_10010DC0+14Aj
		xor	eax, eax

loc_10010FDF:				; CODE XREF: sub_10010DC0+154j
		sub	esi, eax
		cmp	esi, 7FFh
		jle	short loc_10011020
		inc	ebx
		cmp	ebx, 20h
		jl	short loc_1001100B

loc_10010FEF:				; CODE XREF: sub_10010DC0+276j
					; sub_10010DC0+2A8j
		push	31h		; unsigned int
		push	offset aHashOutOfOverf ; "HASH:	Out of overflow	pages.	Increase "...
		push	2		; int
		call	ds:_write
		add	esp, 0Ch
		xor	eax, eax
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 14h
		retn
; ---------------------------------------------------------------------------

loc_1001100B:				; CODE XREF: sub_10010DC0+22Dj
		mov	[edi+20h], ebx
		mov	esi, 1
		mov	eax, [edi+ebx*4+40h]
		mov	[edi+ebx*4+44h], eax
		dec	eax
		mov	[edi+ebx*4+40h], eax

loc_10011020:				; CODE XREF: sub_10010DC0+227j
		mov	eax, [edi+0Ch]
		mov	ecx, [esp+24h+var_4]
		lea	eax, ds:0FFFFFFFFh[eax*8]
		cmp	ecx, eax
		jnz	short loc_1001108A
		inc	edx
		cmp	edx, 20h
		jge	short loc_10010FEF
		push	edx
		mov	eax, ebx
		shl	eax, 0Bh
		push	1
		add	eax, esi
		push	eax
		push	edi
		call	sub_10010560
		add	esp, 10h
		test	eax, eax
		jnz	loc_10010F34
		inc	dword ptr [edi+ebx*4+44h]
		lea	eax, [edi+ebx*4]
		inc	esi
		cmp	esi, 7FFh
		jle	short loc_100110AE
		inc	ebx
		cmp	ebx, 20h
		jge	short loc_10010FEF
		mov	[edi+20h], ebx
		xor	esi, esi
		mov	eax, [edi+ebx*4+40h]
		mov	[edi+ebx*4+44h], eax
		dec	eax
		mov	[edi+ebx*4+40h], eax
		shl	ebx, 0Bh
		pop	edi
		lea	eax, [esi+ebx]
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 14h
		retn
; ---------------------------------------------------------------------------

loc_1001108A:				; CODE XREF: sub_10010DC0+270j
		inc	ecx
		mov	eax, ecx
		cdq
		and	edx, 1Fh
		add	eax, edx
		sar	eax, 5
		and	ecx, 8000001Fh
		jns	short loc_100110A3
		dec	ecx
		or	ecx, 0FFFFFFE0h
		inc	ecx

loc_100110A3:				; CODE XREF: sub_10010DC0+2DCj
		mov	edx, 1
		shl	edx, cl
		or	[ebp+eax*4+0], edx

loc_100110AE:				; CODE XREF: sub_10010DC0+2A2j
		shl	ebx, 0Bh
		pop	edi
		lea	eax, [esi+ebx]
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 14h
		retn
sub_10010DC0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100110C0	proc near		; CODE XREF: sub_1000FFF0:loc_100100B7p
					; sub_100108D0+169p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	ecx, [esp+arg_4]
		push	ebx
		push	ebp
		mov	ebp, [esp+8+arg_0]
		push	edi
		push	dword ptr [ecx+4] ; size_t
		movzx	eax, word ptr [ebp+0]
		push	dword ptr [ecx]	; void *
		lea	ebx, [eax+1]
		mov	ax, [ebp+eax*2+4]
		sub	ax, [ecx+4]
		movzx	eax, ax
		mov	di, ax
		mov	[esp+14h+arg_0], eax
		movzx	eax, di
		add	eax, ebp
		push	eax		; void *
		call	ds:memmove
		movzx	eax, bx
		mov	[ebp+eax*2+0], di
		mov	eax, [esp+18h+arg_8]
		push	dword ptr [eax+4] ; size_t
		sub	di, [eax+4]
		push	dword ptr [eax]	; void *
		movzx	eax, di
		add	eax, ebp
		mov	word ptr [esp+20h+arg_0], di
		push	eax		; void *
		call	ds:memmove
		mov	ecx, [esp+24h+arg_0]
		inc	ebx
		movzx	edx, bx
		add	esp, 18h
		lea	eax, [ebx+ebx]
		mov	[ebp+edx*2+0], di
		sub	ecx, eax
		mov	[ebp+0], bx
		sub	ecx, 6
		mov	[ebp+edx*2+4], di
		pop	edi
		mov	[ebp+edx*2+2], cx
		pop	ebp
		pop	ebx
		retn
sub_100110C0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10011150	proc near		; CODE XREF: sub_1000FFF0+100p

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 10h
		mov	ecx, [esp+10h+arg_4]
		push	ebx
		push	ebp
		push	esi
		mov	esi, [esp+1Ch+arg_0]
		push	edi
		movzx	eax, word ptr [esi]
		mov	edx, eax
		mov	[esp+20h+var_8], eax
		mov	[esp+20h+var_10], edx
		movzx	eax, word ptr [esi+edx*2+2]
		movzx	ebx, word ptr [esi+edx*2-2]
		mov	[esp+20h+var_4], eax
		mov	ax, [esi+edx*2+4]
		sub	ax, [ecx+4]
		movzx	eax, ax
		mov	bp, ax
		mov	[esp+20h+var_C], eax
		mov	[esi+edx*2-2], bp
		push	dword ptr [ecx+4] ; size_t
		movzx	eax, bp
		push	dword ptr [ecx]	; void *
		add	eax, esi
		mov	esi, ds:memmove
		push	eax		; void *
		call	esi ; memmove
		mov	edi, [esp+2Ch+arg_8]
		mov	ecx, [esp+2Ch+arg_0]
		mov	eax, [esp+2Ch+var_10]
		sub	bp, [edi+4]
		mov	[ecx+eax*2], bp
		push	dword ptr [edi+4] ; size_t
		movzx	eax, bp
		push	dword ptr [edi]	; void *
		add	eax, ecx
		push	eax		; void *
		call	esi ; memmove
		mov	edx, [esp+38h+arg_0]
		xor	ecx, ecx
		mov	eax, [esp+38h+var_8]
		add	esp, 18h
		add	eax, 2
		mov	[edx], ax
		mov	eax, [esp+20h+var_10]
		mov	[edx+eax*2+4], cx
		mov	ecx, [esp+20h+var_4]
		mov	[edx+eax*2+2], bx
		mov	eax, [esp+20h+arg_4]
		sub	cx, [eax+4]
		sub	cx, [edi+4]
		movzx	eax, word ptr [edx]
		sub	cx, 4
		pop	edi
		pop	esi
		mov	[edx+eax*2+2], cx
		movzx	eax, word ptr [edx]
		mov	[edx+eax*2+4], bp
		pop	ebp
		pop	ebx
		add	esp, 10h
		retn
sub_10011150	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_10011220(size_t, int,	int, int, int, int)
sub_10011220	proc near		; CODE XREF: sub_100108D0+1F4p

var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch

		push	ebp
		mov	ebp, esp
		and	esp, 0FFFFFFF8h
		sub	esp, 54h
		push	ebx
		mov	ebx, [ebp+arg_C]
		xor	ecx, ecx
		push	esi
		mov	esi, [ebp+arg_8]
		mov	[esp+5Ch+var_3C], ecx
		mov	eax, [ebx+10h]
		mov	[esp+5Ch+var_2C], eax
		mov	edx, [esi+10h]
		mov	eax, [ebp+arg_10]
		movzx	eax, ax
		mov	[esp+5Ch+var_38], eax
		movzx	ecx, word ptr [edx]
		push	edi
		mov	[esp+60h+var_28], 0
		mov	[esp+60h+var_4C], esi
		lea	eax, [ecx-1]
		mov	[esp+60h+var_50], edx
		movzx	eax, ax
		mov	[esp+60h+var_44], edx
		mov	[esp+60h+var_40], eax
		cmp	ax, cx
		jnb	loc_10011528
		mov	ecx, eax
		jmp	short loc_10011280
; ---------------------------------------------------------------------------
		align 10h

loc_10011280:				; CODE XREF: sub_10011220+58j
					; sub_10011220+2F0j
		mov	eax, [esp+60h+var_28]
		inc	eax
		mov	[esp+60h+var_28], eax
		cmp	eax, 2710h
		ja	loc_1001153B
		movzx	eax, word ptr [edx+4]
		cmp	eax, 4
		jnb	short loc_10011309
		test	ax, ax
		jz	short loc_10011309
		lea	eax, [esp+60h+var_10]
		push	eax		; int
		push	[ebp+arg_4]	; int
		mov	eax, [esp+68h+var_4C]
		push	dword ptr [eax+0Ch] ; __int16
		push	eax		; int
		push	ebx		; int
		push	esi		; int
		push	[ebp+arg_0]	; size_t
		call	sub_10011B10
		add	esp, 1Ch
		test	eax, eax
		jnz	loc_1001152A
		mov	esi, [esp+60h+var_C]
		test	esi, esi
		jz	loc_10011531
		mov	ebx, [esp+60h+var_10]
		mov	edi, [esi+10h]
		mov	[esp+60h+var_44], edi
		test	ebx, ebx
		jz	loc_10011531
		mov	eax, [ebx+10h]
		mov	[esp+60h+var_2C], eax
		mov	eax, [esp+60h+var_8]
		mov	[esp+60h+var_4C], eax
		test	eax, eax
		jz	loc_10011528
		mov	edx, [eax+10h]
		mov	[esp+60h+var_50], edx
		jmp	loc_1001139D
; ---------------------------------------------------------------------------

loc_10011309:				; CODE XREF: sub_10011220+7Bj
					; sub_10011220+80j
		movzx	eax, cx
		cmp	word ptr [edx+eax*2+2],	0
		jnz	loc_100113A1
		movzx	edi, word ptr [edx+eax*2]
		mov	eax, 0FFFEh
		sub	eax, [ebp+arg_14]
		add	[edx], ax
		mov	dx, [edx]
		mov	ecx, [esp+60h+var_38]
		push	0
		push	[esp+64h+var_4C]
		lea	eax, [edx+edx]
		sub	ecx, eax
		movzx	eax, dx
		mov	edx, [esp+68h+var_50]
		sub	ecx, 6
		push	edi
		mov	edi, [ebp+arg_0]
		push	edi
		mov	[edx+eax*2+2], cx
		movzx	eax, word ptr [edx]
		mov	ecx, [esp+70h+var_38]
		mov	[edx+eax*2+4], cx
		call	sub_1000FAB0
		add	esp, 10h
		mov	[esp+60h+var_4C], eax
		test	eax, eax
		jz	loc_10011531
		movzx	ecx, word ptr [edi+0Ch]
		mov	edx, [eax+10h]
		mov	[esp+60h+var_38], ecx
		mov	ecx, [esp+60h+var_3C]
		mov	[esp+60h+var_50], edx
		mov	[ebp+arg_14], 0
		test	ecx, ecx
		jz	short loc_1001139D
		push	ecx
		push	edi
		call	sub_10010270
		mov	edx, [esp+68h+var_50]
		add	esp, 8
		mov	eax, [esp+60h+var_4C]

loc_1001139D:				; CODE XREF: sub_10011220+E4j
					; sub_10011220+169j
		mov	[esp+60h+var_3C], eax

loc_100113A1:				; CODE XREF: sub_10011220+F2j
		mov	eax, [ebp+arg_0]
		movzx	ecx, word ptr [eax+0Ch]
		mov	[esp+60h+var_24], ecx
		mov	ecx, 1
		mov	edi, ecx
		mov	[esp+60h+var_40], ecx
		cmp	di, [edx]
		mov	edi, [esp+60h+var_44]
		jnb	loc_1001150D

loc_100113C4:				; CODE XREF: sub_10011220+2E4j
		movzx	eax, cx
		cmp	word ptr [edx+eax*2+2],	4
		lea	eax, [edx+eax*2]
		mov	[esp+60h+var_34], eax
		jb	loc_1001150A
		movzx	eax, word ptr [eax]
		mov	ecx, [esp+60h+var_24]
		add	edx, eax
		movzx	ecx, cx
		sub	ecx, eax
		mov	[esp+60h+var_48], eax
		mov	eax, [esp+60h+var_50]
		mov	[esp+60h+var_30], ecx
		push	[esp+60h+var_30]
		mov	[esp+64h+var_14], ecx
		mov	ecx, [esp+64h+var_34]
		push	edx
		push	[ebp+arg_0]
		mov	[esp+6Ch+var_18], edx
		movzx	ecx, word ptr [ecx+2]
		add	eax, ecx
		mov	[esp+6Ch+var_20], eax
		mov	eax, [esp+6Ch+var_48]
		sub	eax, ecx
		mov	ecx, [esp+6Ch+var_34]
		mov	[esp+6Ch+var_48], eax
		mov	[esp+6Ch+var_1C], eax
		movzx	eax, word ptr [ecx+2]
		mov	[esp+6Ch+var_24], eax
		call	sub_1000E320
		add	esp, 0Ch
		cmp	eax, [ebp+arg_4]
		jnz	short loc_1001148D
		cmp	word ptr [edi+4], 4
		jb	short loc_10011457
		movzx	eax, word ptr [edi]
		movzx	ecx, word ptr [edi+eax*2+2]
		mov	eax, [esp+60h+var_48]
		add	eax, 8
		add	eax, [esp+60h+var_30]
		cmp	eax, ecx
		jbe	short loc_10011474

loc_10011457:				; CODE XREF: sub_10011220+21Ej
		push	esi
		push	[ebp+arg_0]
		call	sub_1000FF50
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		jz	loc_10011531
		mov	edi, [esi+10h]
		mov	[esp+60h+var_44], edi

loc_10011474:				; CODE XREF: sub_10011220+235j
		lea	eax, [esp+60h+var_20]
		push	eax
		lea	eax, [esp+64h+var_18]
		push	eax
		push	edi
		call	sub_100110C0
		add	esp, 0Ch
		or	byte ptr [esi+15h], 1
		jmp	short loc_100114F2
; ---------------------------------------------------------------------------

loc_1001148D:				; CODE XREF: sub_10011220+217j
		mov	edx, [esp+60h+var_2C]
		cmp	word ptr [edx+4], 4
		jb	short loc_100114C2
		movzx	eax, word ptr [edx]
		mov	edi, [esp+60h+var_30]
		add	edi, 8
		movzx	ecx, word ptr [edx+eax*2+2]
		mov	eax, [esp+60h+var_48]
		add	eax, edi
		mov	edi, [esp+60h+var_44]
		cmp	eax, ecx
		ja	short loc_100114C2
		lea	eax, [esp+60h+var_20]
		push	eax
		lea	eax, [esp+64h+var_18]
		push	eax
		push	edx
		jmp	short loc_100114E6
; ---------------------------------------------------------------------------

loc_100114C2:				; CODE XREF: sub_10011220+276j
					; sub_10011220+293j
		push	ebx
		push	[ebp+arg_0]
		call	sub_1000FF50
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		jz	short loc_10011531
		mov	eax, [ebx+10h]
		lea	ecx, [esp+60h+var_20]
		push	ecx
		lea	ecx, [esp+64h+var_18]
		mov	[esp+64h+var_2C], eax
		push	ecx
		push	eax

loc_100114E6:				; CODE XREF: sub_10011220+2A0j
		call	sub_100110C0
		add	esp, 0Ch
		or	byte ptr [ebx+15h], 1

loc_100114F2:				; CODE XREF: sub_10011220+26Bj
		mov	ecx, [esp+60h+var_40]
		mov	edx, [esp+60h+var_50]
		add	ecx, 2
		mov	[esp+60h+var_40], ecx
		cmp	cx, [edx]
		jb	loc_100113C4

loc_1001150A:				; CODE XREF: sub_10011220+1B4j
		mov	eax, [ebp+arg_0]

loc_1001150D:				; CODE XREF: sub_10011220+19Ej
		cmp	cx, [edx]
		jb	loc_10011280
		mov	ecx, [esp+60h+var_3C]
		test	ecx, ecx
		jz	short loc_10011528
		push	ecx
		push	eax
		call	sub_10010270
		add	esp, 8

loc_10011528:				; CODE XREF: sub_10011220+50j
					; sub_10011220+D7j ...
		xor	eax, eax

loc_1001152A:				; CODE XREF: sub_10011220+A1j
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_10011531:				; CODE XREF: sub_10011220+ADj
					; sub_10011220+C0j ...
		or	eax, 0FFFFFFFFh
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_1001153B:				; CODE XREF: sub_10011220+6Ej
		pop	edi
		pop	esi
		mov	eax, 0FFFFFC19h
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
sub_10011220	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10011550	proc near		; CODE XREF: sub_10010160+20p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_4]
		push	ebx
		mov	ebx, [esp+4+arg_0]
		push	ebp
		mov	ecx, [eax+10h]
		push	esi
		push	edi
		xor	edi, edi
		mov	esi, eax
		xor	ebp, ebp

loc_10011565:				; CODE XREF: sub_10011550+79j
		test	ebp, ebp
		jz	short loc_10011570
		cmp	word ptr [ecx+4], 3
		jz	short loc_100115CB

loc_10011570:				; CODE XREF: sub_10011550+17j
		movzx	eax, word ptr [ecx+4]
		cmp	eax, 2
		jz	short loc_1001157E
		cmp	eax, 3
		jnz	short loc_10011593

loc_1001157E:				; CODE XREF: sub_10011550+27j
		mov	ebp, 1
		cmp	eax, 3
		jnz	short loc_10011593
		movzx	eax, word ptr [ecx]
		cmp	word ptr [ecx+eax*2+2],	0
		jnz	short loc_100115CB

loc_10011593:				; CODE XREF: sub_10011550+2Cj
					; sub_10011550+36j
		movzx	eax, word ptr [ecx]
		push	0
		push	esi
		movzx	eax, word ptr [ecx+eax*2-2]
		or	byte ptr [esi+15h], 1
		push	eax
		push	ebx
		call	sub_1000FAB0
		add	esp, 10h
		mov	esi, eax
		test	edi, edi
		jz	short loc_100115BC
		push	edi
		push	ebx
		call	sub_10010270
		add	esp, 8

loc_100115BC:				; CODE XREF: sub_10011550+60j
		mov	edi, esi
		test	esi, esi
		jz	loc_10011656
		mov	ecx, [esi+10h]
		jmp	short loc_10011565
; ---------------------------------------------------------------------------

loc_100115CB:				; CODE XREF: sub_10011550+1Ej
					; sub_10011550+41j
		movzx	edx, word ptr [ecx]
		mov	eax, [esp+10h+arg_4]
		movzx	ecx, word ptr [ecx+edx*2-2]
		mov	ebp, [eax+10h]
		cmp	edx, 2
		jle	short loc_100115F5
		mov	[ebp+2], cx
		xor	eax, eax
		mov	ecx, [esp+10h+arg_4]
		mov	[ebp+4], ax
		mov	eax, [esi+8]
		mov	[ecx+8], eax
		jmp	short loc_100115FC
; ---------------------------------------------------------------------------

loc_100115F5:				; CODE XREF: sub_10011550+8Dj
		mov	dword ptr [eax+8], 0

loc_100115FC:				; CODE XREF: sub_10011550+A3j
		sub	edx, 2
		mov	[ebp+0], dx
		movzx	ecx, word ptr [ebx+0Ch]
		lea	eax, [edx+edx]
		sub	cx, ax
		movzx	eax, dx
		sub	cx, 6
		mov	[ebp+eax*2+2], cx
		movzx	eax, word ptr [ebp+0]
		movzx	ecx, word ptr [ebx+0Ch]
		dec	cx
		mov	[ebp+eax*2+4], cx
		mov	eax, [esp+10h+arg_4]
		or	byte ptr [eax+15h], 1
		test	esi, esi
		jz	short loc_1001163E
		push	esi
		push	ebx
		call	sub_10010270
		add	esp, 8

loc_1001163E:				; CODE XREF: sub_10011550+E2j
		cmp	edi, esi
		jz	short loc_1001164C
		push	edi
		push	ebx
		call	sub_10010270
		add	esp, 8

loc_1001164C:				; CODE XREF: sub_10011550+F0j
		dec	dword ptr [ebx+38h]
		xor	eax, eax
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_10011656:				; CODE XREF: sub_10011550+70j
		pop	edi
		pop	esi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		retn
sub_10011550	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10011660(int,	int, void *, int)
sub_10011660	proc near		; CODE XREF: sub_1000FFF0+157p

var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 14h
		mov	eax, [esp+14h+arg_4]
		push	ebx
		mov	ebx, [esp+18h+arg_C]
		push	ebp
		mov	edx, [eax+10h]
		mov	eax, [esp+1Ch+arg_8]
		mov	ebp, [ebx+4]
		push	esi
		push	edi
		mov	ecx, [eax]
		mov	esi, edx
		mov	[esp+24h+var_C], ecx
		mov	ecx, [eax+4]
		mov	eax, [ebx]
		mov	[esp+24h+arg_8], eax
		movzx	eax, word ptr [edx]
		mov	[esp+24h+var_10], edx
		mov	[esp+24h+var_14], ecx
		mov	ax, [edx+eax*2+2]
		sub	ax, 8
		movzx	edi, ax
		test	ecx, ecx
		jz	loc_100117E9
		lea	esp, [esp+0]

loc_100116B0:				; CODE XREF: sub_10011660+17Fj
		movzx	eax, di
		cmp	eax, ecx
		jnb	short loc_100116BC
		movzx	ecx, di
		jmp	short loc_100116BF
; ---------------------------------------------------------------------------

loc_100116BC:				; CODE XREF: sub_10011660+55j
		movzx	ecx, cx

loc_100116BF:				; CODE XREF: sub_10011660+5Aj
		movzx	eax, word ptr [esi]
		movzx	edi, cx
		push	edi		; size_t
		push	[esp+28h+var_C]	; void *
		mov	ax, [esi+eax*2+4]
		sub	ax, cx
		movzx	ebx, ax
		lea	eax, [edx+ebx]
		push	eax		; void *
		call	ds:memmove
		movzx	edx, word ptr [esi]
		mov	ecx, ebx
		push	[esp+30h+arg_4]
		sub	[esp+34h+var_14], edi
		push	[esp+34h+arg_0]
		add	[esp+38h+var_C], edi
		mov	[esi+edx*2+2], bx
		add	edx, 2
		mov	[esi], dx
		lea	eax, [edx+edx]
		sub	ecx, eax
		movzx	eax, dx
		sub	ecx, 6
		mov	[esi+eax*2+2], cx
		movzx	eax, word ptr [esi]
		mov	[esi+eax*2+4], bx
		mov	eax, 1
		mov	[esi+edx*2], ax
		call	sub_1000FF50
		mov	ecx, eax
		add	esp, 14h
		mov	[esp+24h+arg_4], ecx
		test	ecx, ecx
		jz	loc_1001189B
		cmp	[esp+24h+var_14], 0
		movzx	edi, word ptr [esi]
		mov	[esp+24h+var_4], edi
		jnz	short loc_100117BD
		movzx	ebx, word ptr [esi]
		movzx	edx, word ptr [esi+ebx*2+2]
		test	dx, dx
		jz	short loc_100117B3
		mov	ecx, edx
		cmp	edx, ebp
		jb	short loc_1001175A
		movzx	ecx, bp

loc_1001175A:				; CODE XREF: sub_10011660+F5j
		mov	ax, [esi+ebx*2+4]
		sub	ax, cx
		mov	[esp+24h+var_8], ecx
		movzx	ebx, ax
		mov	[esi+edi*2], bx
		mov	eax, ebx
		add	eax, [esp+24h+var_10]
		movzx	edi, cx
		push	edi		; size_t
		push	[esp+28h+arg_8]	; void *
		push	eax		; void *
		call	ds:memmove
		mov	eax, [esp+30h+var_4]
		mov	ecx, 3
		add	[esp+30h+arg_8], edi
		add	esp, 0Ch
		sub	ebp, edi
		mov	[esi+eax*2-4], cx
		movzx	eax, word ptr [esi]
		mov	ecx, [esp+24h+var_8]
		sub	[esi+eax*2+2], cx
		movzx	eax, word ptr [esi]
		mov	ecx, [esp+24h+arg_4]
		mov	[esi+eax*2+4], bx
		jmp	short loc_100117BD
; ---------------------------------------------------------------------------

loc_100117B3:				; CODE XREF: sub_10011660+EFj
		mov	eax, 2
		mov	[esi+edi*2-4], ax

loc_100117BD:				; CODE XREF: sub_10011660+E2j
					; sub_10011660+151j
		mov	edx, [ecx+10h]
		mov	esi, edx
		or	byte ptr [ecx+15h], 1
		mov	ecx, [esp+24h+var_14]
		mov	[esp+24h+var_10], edx
		movzx	eax, word ptr [esi]
		mov	ax, [esi+eax*2+2]
		sub	ax, 8
		movzx	edi, ax
		test	ecx, ecx
		jnz	loc_100116B0
		mov	ebx, [esp+24h+arg_C]

loc_100117E9:				; CODE XREF: sub_10011660+43j
		movzx	eax, word ptr [esi]
		mov	ax, [esi+eax*2+2]
		sub	ax, 8
		movzx	eax, ax
		test	ebp, ebp
		jz	loc_100118D7

loc_10011800:				; CODE XREF: sub_10011660+272j
		movzx	edi, ax
		movzx	ecx, ax
		cmp	edi, ebp
		jb	short loc_1001181A
		movzx	ecx, bp
		jnz	short loc_1001181A
		cmp	ebp, [ebx+4]
		jnz	short loc_1001181A
		add	ecx, 0FFFFh

loc_1001181A:				; CODE XREF: sub_10011660+1A8j
					; sub_10011660+1ADj ...
		movzx	eax, word ptr [esi]
		movzx	edi, cx
		push	edi		; size_t
		push	[esp+28h+arg_8]	; void *
		mov	ax, [esi+eax*2+4]
		sub	ax, cx
		movzx	ebx, ax
		lea	eax, [edx+ebx]
		push	eax		; void *
		call	ds:memmove
		movzx	edx, word ptr [esi]
		mov	ecx, ebx
		add	[esp+30h+arg_8], edi
		add	esp, 0Ch
		mov	[esi+edx*2+2], bx
		add	edx, 2
		mov	[esi], dx
		lea	eax, [edx+edx]
		sub	ecx, eax
		movzx	eax, dx
		sub	ecx, 6
		mov	[esi+eax*2+2], cx
		movzx	eax, word ptr [esi]
		mov	[esi+eax*2+4], bx
		sub	ebp, edi
		jz	short loc_100118A6
		push	[esp+24h+arg_4]
		mov	eax, 2
		push	[esp+28h+arg_0]
		mov	[esi+edx*2], ax
		call	sub_1000FF50
		mov	ecx, eax
		add	esp, 8
		mov	[esp+24h+arg_4], ecx
		test	ecx, ecx
		jz	short loc_1001189B
		mov	edx, [ecx+10h]
		mov	esi, edx
		mov	[esp+24h+var_10], edx
		jmp	short loc_100118B7
; ---------------------------------------------------------------------------

loc_1001189B:				; CODE XREF: sub_10011660+D0j
					; sub_10011660+22Ej
		pop	edi
		pop	esi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		add	esp, 14h
		retn
; ---------------------------------------------------------------------------

loc_100118A6:				; CODE XREF: sub_10011660+20Bj
		mov	ecx, [esp+24h+arg_4]
		mov	eax, 3
		mov	[esi+edx*2], ax
		mov	edx, [esp+24h+var_10]

loc_100118B7:				; CODE XREF: sub_10011660+239j
		or	byte ptr [ecx+15h], 1
		movzx	eax, word ptr [esi]
		mov	ax, [esi+eax*2+2]
		sub	ax, 8
		movzx	eax, ax
		test	ebp, ebp
		jz	short loc_100118D7
		mov	ebx, [esp+24h+arg_C]
		jmp	loc_10011800
; ---------------------------------------------------------------------------

loc_100118D7:				; CODE XREF: sub_10011660+19Aj
					; sub_10011660+26Cj
		pop	edi
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		add	esp, 14h
		retn
sub_10011660	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_100118F0(size_t, int,	int, int, int)
sub_100118F0	proc near		; CODE XREF: .text:1000F029p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	esi
		push	[esp+4+arg_10]	; int
		mov	esi, [esp+8+arg_0]
		push	[esp+8+arg_C]	; int
		push	0		; int
		push	[esp+10h+arg_4]	; int
		push	esi		; size_t
		call	sub_10012000
		mov	ecx, [esp+18h+arg_8]
		add	esp, 14h
		mov	[ecx+4], eax
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_1001191C
		or	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1001191C:				; CODE XREF: sub_100118F0+26j
		mov	eax, [esi+120h]
		mov	[ecx], eax
		xor	eax, eax
		pop	esi
		retn
sub_100118F0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10011930	proc near		; CODE XREF: sub_1000E910+271p
					; sub_10012000+A8p

var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	ecx
		mov	eax, [esp+4+arg_8]
		push	ebp
		mov	ebp, [esp+8+arg_0]
		push	esi
		push	edi
		mov	edi, [esp+10h+arg_4]
		mov	esi, [edi+10h]
		cmp	word ptr [esi+eax*2+2],	1
		jnz	short loc_1001197D
		jmp	short loc_10011950
; ---------------------------------------------------------------------------
		align 10h

loc_10011950:				; CODE XREF: sub_10011930+1Bj
					; sub_10011930+4Bj
		movzx	eax, word ptr [esi]
		push	0
		push	edi
		movzx	eax, word ptr [esi+eax*2-2]
		push	eax
		push	ebp
		call	sub_1000FAB0
		mov	edi, eax
		add	esp, 10h
		test	edi, edi
		jz	loc_10011A53
		mov	esi, [edi+10h]
		mov	eax, 1
		cmp	[esi+4], ax
		jz	short loc_10011950

loc_1001197D:				; CODE XREF: sub_10011930+19j
		cmp	word ptr [esi+eax*2+2],	2
		movzx	eax, word ptr [esi]
		jnz	short loc_100119C0
		movzx	eax, word ptr [esi+eax*2-2]
		push	0
		push	edi
		push	eax
		push	ebp
		call	sub_1000FAB0
		mov	ecx, eax
		add	esp, 10h
		test	ecx, ecx
		jz	loc_10011A53
		movzx	eax, word ptr [ecx+0Ch]
		lea	esi, [ecx+0Ch]
		mov	[esp+10h+arg_4], eax
		mov	edi, ecx
		mov	eax, [ecx+10h]
		xor	edx, edx
		movzx	eax, word ptr [eax+2]
		mov	[esp+10h+arg_8], eax
		jmp	short loc_10011A09
; ---------------------------------------------------------------------------

loc_100119C0:				; CODE XREF: sub_10011930+56j
		cmp	word ptr [esi+eax*2+2],	0
		lea	ecx, [esi+eax*2]
		movzx	edx, word ptr [ecx]
		jnz	loc_10011A8C
		mov	ax, [esi+2]
		lea	esi, [edi+0Ch]
		sub	ax, dx
		mov	[esp+10h+arg_8], edx
		movzx	eax, ax
		mov	[esp+10h+var_4], eax
		movzx	eax, word ptr [esi]
		push	0
		mov	[esp+14h+arg_4], eax
		movzx	eax, word ptr [ecx-2]
		push	edi
		push	eax
		push	ebp
		call	sub_1000FAB0
		mov	ecx, eax
		add	esp, 10h
		test	ecx, ecx
		jz	short loc_10011A53
		mov	edx, [esp+10h+var_4]

loc_10011A09:				; CODE XREF: sub_10011930+8Ej
		mov	al, [edi+15h]
		push	ebx
		push	[esp+14h+arg_10]
		movsx	ebx, al
		or	al, 8
		mov	[edi+15h], al
		movzx	eax, dx
		push	eax
		push	ecx
		push	ebp
		mov	[esp+24h+var_4], eax
		call	sub_10011EA0
		mov	ecx, [esp+24h+arg_C]
		add	esp, 10h
		mov	[ecx+4], eax
		mov	[edi+15h], bl
		cmp	dword ptr [ecx+4], 0FFFFFFFFh
		pop	ebx
		jz	short loc_10011A53
		mov	eax, [esp+10h+arg_4]
		movzx	eax, ax
		cmp	[esi], eax
		jz	short loc_10011A5B
		call	ds:_errno
		mov	dword ptr [eax], 16h

loc_10011A53:				; CODE XREF: sub_10011930+39j
					; sub_10011930+6Ej ...
		pop	edi
		pop	esi
		or	eax, 0FFFFFFFFh
		pop	ebp
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_10011A5B:				; CODE XREF: sub_10011930+115j
		mov	eax, [esp+10h+arg_8]
		push	[esp+10h+var_4]	; size_t
		movzx	eax, ax
		add	eax, [edi+10h]
		push	eax		; void *
		push	dword ptr [ebp+11Ch] ; void *
		call	ds:memmove
		mov	ecx, [esp+1Ch+arg_C]
		add	esp, 0Ch
		mov	eax, [ebp+11Ch]
		pop	edi
		pop	esi
		mov	[ecx], eax
		xor	eax, eax
		pop	ebp
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_10011A8C:				; CODE XREF: sub_10011930+9Cj
		mov	ecx, [esp+10h+arg_C]
		lea	eax, [edx+esi]
		mov	[ecx], eax
		movzx	eax, word ptr [esi+2]
		sub	eax, edx
		cmp	[esp+10h+arg_10], 0
		mov	[ecx+4], eax
		jz	short loc_10011AFC
		movzx	eax, word ptr [esi]
		cmp	eax, 2
		jnz	short loc_10011AB9
		mov	dword ptr [ebp+12Ch], 1
		jmp	short loc_10011AEC
; ---------------------------------------------------------------------------

loc_10011AB9:				; CODE XREF: sub_10011930+17Bj
		movzx	eax, word ptr [esi+eax*2-2]
		push	0
		push	edi
		push	eax
		push	ebp
		call	sub_1000FAB0
		add	esp, 10h
		mov	[ebp+124h], eax
		test	eax, eax
		jz	loc_10011A53
		mov	dword ptr [ebp+12Ch], 1
		mov	eax, [eax+10h]
		cmp	word ptr [eax],	0
		jnz	short loc_10011AFC

loc_10011AEC:				; CODE XREF: sub_10011930+187j
		inc	dword ptr [ebp+128h]
		mov	dword ptr [ebp+124h], 0

loc_10011AFC:				; CODE XREF: sub_10011930+173j
					; sub_10011930+1BAj
		pop	edi
		pop	esi
		xor	eax, eax
		pop	ebp
		pop	ecx
		retn
sub_10011930	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10011B10(size_t, int,	int, int, __int16, int,	int)
sub_10011B10	proc near		; CODE XREF: sub_10011220+97p

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= word ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch

		sub	esp, 0Ch
		lea	eax, [esp+0Ch+var_8]
		push	esi
		mov	esi, [esp+10h+arg_0]
		push	edi
		mov	edi, [esp+14h+arg_C]
		push	0		; int
		push	eax		; int
		push	0		; int
		push	edi		; int
		push	esi		; size_t
		call	sub_10012000
		add	esp, 14h
		cmp	eax, 0FFFFFFFFh
		jz	loc_10011C9A
		push	ebx
		push	ebp
		push	eax
		push	dword ptr [esi+120h]
		push	esi
		call	sub_1000E320
		xor	ecx, ecx
		cmp	eax, [esp+28h+arg_14]
		lea	eax, [esp+28h+arg_C]
		push	eax
		setnz	cl
		push	esi
		mov	[esp+30h+var_C], ecx
		call	sub_10011E30
		mov	ebx, [esp+30h+arg_18]
		add	esp, 14h
		mov	ebp, [esp+1Ch+arg_C]
		mov	[ebx+0Ch], ax
		test	ax, ax
		jz	short loc_10011B96
		push	0
		push	ebp
		movzx	eax, ax
		push	eax
		push	esi
		call	sub_1000FAB0
		add	esp, 10h
		mov	[ebx+8], eax
		test	eax, eax
		jnz	short loc_10011B9D

loc_10011B8B:				; CODE XREF: sub_10011B10+160j
		pop	ebp
		pop	ebx
		pop	edi
		or	eax, 0FFFFFFFFh
		pop	esi
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_10011B96:				; CODE XREF: sub_10011B10+62j
		mov	dword ptr [ebx+8], 0

loc_10011B9D:				; CODE XREF: sub_10011B10+79j
		cmp	[esp+1Ch+var_C], 0
		mov	eax, [esp+1Ch+arg_8]
		jnz	short loc_10011BAC
		mov	eax, [esp+1Ch+arg_4]

loc_10011BAC:				; CODE XREF: sub_10011B10+96j
		or	byte ptr [eax+15h], 1
		mov	[eax+8], edi
		mov	eax, [eax+10h]
		mov	[esp+1Ch+arg_C], eax
		movzx	ecx, word ptr [eax]
		mov	edx, ecx
		movzx	edi, word ptr [eax+edx*2+2]
		cmp	edi, 4
		jnb	short loc_10011BD6
		pop	ebp
		pop	ebx
		pop	edi
		mov	eax, 0FFFFFC19h
		pop	esi
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_10011BD6:				; CODE XREF: sub_10011B10+B7j
		movzx	esi, word ptr [eax+edx*2+4]
		lea	eax, [ecx+1]
		mov	ebx, [esp+1Ch+arg_C]
		movzx	edx, ax
		mov	ax, [esp+1Ch+arg_10]
		mov	ecx, edx
		inc	edx
		mov	[ebx+ecx*2], ax
		xor	ebx, ebx
		mov	ecx, [esp+1Ch+arg_C]
		movzx	eax, dx
		mov	[ecx+eax*2], bx
		mov	ebx, [esp+1Ch+arg_18]
		mov	[ecx], dx
		mov	edx, [esp+1Ch+arg_C]
		mov	[ecx+eax*2+4], si
		lea	ecx, [edi-4]
		movzx	eax, word ptr [edx]
		mov	[edx+eax*2+2], cx
		mov	eax, [esp+1Ch+arg_8]
		mov	[ebx], eax
		mov	eax, [esp+1Ch+arg_4]
		mov	[ebx+4], eax
		mov	esi, [ebp+10h]
		or	byte ptr [ebp+15h], 1
		movzx	eax, word ptr [esi]
		cmp	eax, 2
		jbe	short loc_10011C7A
		movzx	ecx, word ptr [esi+eax*2+2]
		movzx	edx, word ptr [esi+eax*2+4]
		add	ecx, 4
		movzx	eax, word ptr [esi]
		movzx	edi, word ptr [esi+8]
		add	eax, 0FFFFFFFEh
		mov	[esi], ax
		movzx	eax, ax
		push	ebp
		push	[esp+20h+arg_0]
		mov	[esi+eax*2+2], cx
		movzx	eax, word ptr [esi]
		mov	[esi+eax*2+4], dx
		call	sub_1000FF50
		mov	ebp, eax
		add	esp, 8
		test	ebp, ebp
		jz	loc_10011B8B
		mov	[esi+8], di

loc_10011C7A:				; CODE XREF: sub_10011B10+123j
		cmp	[esp+1Ch+var_C], 0
		jz	short loc_10011C8D
		mov	[ebx], ebp
		xor	eax, eax
		pop	ebp
		pop	ebx
		pop	edi
		pop	esi
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_10011C8D:				; CODE XREF: sub_10011B10+16Fj
		mov	[ebx+4], ebp
		xor	eax, eax
		pop	ebp
		pop	ebx
		pop	edi
		pop	esi
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_10011C9A:				; CODE XREF: sub_10011B10+23j
		pop	edi
		or	eax, 0FFFFFFFFh
		pop	esi
		add	esp, 0Ch
		retn
sub_10011B10	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10011CB0	proc near		; CODE XREF: sub_1000E910+17Fp

var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	ecx
		mov	eax, [esp+4+arg_10]
		mov	ecx, [esp+4+arg_8]
		push	ebx
		push	ebp
		mov	ebp, [esp+0Ch+arg_4]
		mov	[esp+0Ch+arg_4], eax
		mov	eax, [esp+0Ch+arg_0]
		push	esi
		mov	edx, [ebp+10h]
		mov	esi, edx
		push	edi
		mov	ax, [eax+0Ch]
		mov	edi, [esp+14h+arg_C]
		sub	ax, [edx+ecx*2]
		movzx	eax, ax

loc_10011CDD:				; CODE XREF: sub_10011CB0+F1j
		mov	ebx, eax
		mov	[esp+14h+var_4], edx
		cmp	ebx, [esp+14h+arg_10]
		jg	loc_10011DB1
		cmp	word ptr [edx+ecx*2+2],	1
		jnz	loc_10011DB1
		movzx	ecx, word ptr [edx+ecx*2]
		mov	edx, edi
		add	ecx, esi
		mov	esi, ebx
		sub	esi, 4
		jb	short loc_10011D19

loc_10011D08:				; CODE XREF: sub_10011CB0+67j
		mov	eax, [ecx]
		cmp	eax, [edx]
		jnz	short loc_10011D1E
		add	ecx, 4
		add	edx, 4
		sub	esi, 4
		jnb	short loc_10011D08

loc_10011D19:				; CODE XREF: sub_10011CB0+56j
		cmp	esi, 0FFFFFFFCh
		jz	short loc_10011D5B

loc_10011D1E:				; CODE XREF: sub_10011CB0+5Cj
		mov	al, [ecx]
		cmp	al, [edx]
		jnz	loc_10011E1D
		cmp	esi, 0FFFFFFFDh
		jz	short loc_10011D5B
		mov	al, [ecx+1]
		cmp	al, [edx+1]
		jnz	loc_10011E1D
		cmp	esi, 0FFFFFFFEh
		jz	short loc_10011D5B
		mov	al, [ecx+2]
		cmp	al, [edx+2]
		jnz	loc_10011E1D
		cmp	esi, 0FFFFFFFFh
		jz	short loc_10011D5B
		mov	al, [ecx+3]
		cmp	al, [edx+3]
		jnz	loc_10011E1D

loc_10011D5B:				; CODE XREF: sub_10011CB0+6Cj
					; sub_10011CB0+7Bj ...
		mov	ecx, [esp+14h+arg_8]
		add	edi, ebx
		mov	eax, [esp+14h+var_4]
		sub	[esp+14h+arg_4], ebx
		mov	ebx, [esp+14h+arg_0]
		push	0
		movzx	eax, word ptr [eax+ecx*2+4]
		push	ebp
		push	eax
		push	ebx
		call	sub_1000FAB0
		mov	ebp, eax
		add	esp, 10h
		test	ebp, ebp
		jz	short loc_10011DA6
		mov	esi, [ebp+10h]
		mov	edx, esi
		mov	cx, [ebx+0Ch]
		mov	[esp+14h+arg_8], 1
		sub	cx, [esi+2]
		movzx	eax, cx
		mov	ecx, [esp+14h+arg_8]
		jmp	loc_10011CDD
; ---------------------------------------------------------------------------

loc_10011DA6:				; CODE XREF: sub_10011CB0+D3j
		pop	edi
		pop	esi
		pop	ebp
		mov	eax, 0FFFFFFFDh
		pop	ebx
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_10011DB1:				; CODE XREF: sub_10011CB0+37j
					; sub_10011CB0+43j
		movzx	edx, ax
		cmp	edx, [esp+14h+arg_4]
		jnz	short loc_10011E1D
		mov	eax, [esp+14h+var_4]
		movzx	ecx, word ptr [eax+ecx*2]
		add	ecx, esi
		sub	edx, 4
		jb	short loc_10011DE1
		lea	esp, [esp+0]

loc_10011DD0:				; CODE XREF: sub_10011CB0+12Fj
		mov	eax, [ecx]
		cmp	eax, [edi]
		jnz	short loc_10011DE6
		add	ecx, 4
		add	edi, 4
		sub	edx, 4
		jnb	short loc_10011DD0

loc_10011DE1:				; CODE XREF: sub_10011CB0+117j
		cmp	edx, 0FFFFFFFCh
		jz	short loc_10011E13

loc_10011DE6:				; CODE XREF: sub_10011CB0+124j
		mov	al, [ecx]
		cmp	al, [edi]
		jnz	short loc_10011E1D
		cmp	edx, 0FFFFFFFDh
		jz	short loc_10011E13
		mov	al, [ecx+1]
		cmp	al, [edi+1]
		jnz	short loc_10011E1D
		cmp	edx, 0FFFFFFFEh
		jz	short loc_10011E13
		mov	al, [ecx+2]
		cmp	al, [edi+2]
		jnz	short loc_10011E1D
		cmp	edx, 0FFFFFFFFh
		jz	short loc_10011E13
		mov	cl, [ecx+3]
		cmp	cl, [edi+3]
		jnz	short loc_10011E1D

loc_10011E13:				; CODE XREF: sub_10011CB0+134j
					; sub_10011CB0+13Fj ...
		mov	eax, [esp+14h+arg_8]
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_10011E1D:				; CODE XREF: sub_10011CB0+72j
					; sub_10011CB0+83j ...
		pop	edi
		pop	esi
		pop	ebp
		mov	eax, 0FFFFFFFEh
		pop	ebx
		pop	ecx
		retn
sub_10011CB0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10011E30	proc near		; CODE XREF: sub_1000E910+1A0p
					; sub_10011B10+4Bp

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebx
		mov	ebx, [esp+4+arg_4]
		push	esi
		push	edi
		mov	edi, [esp+0Ch+arg_0]
		mov	esi, [ebx]

loc_10011E3D:				; CODE XREF: sub_10011E30+4Dj
		mov	eax, [esi+10h]
		cmp	word ptr [eax+4], 3
		movzx	edx, word ptr [eax]
		jnz	short loc_10011E5E
		cmp	edx, 2
		jz	short loc_10011E85
		cmp	word ptr [eax+edx*2], 0
		jz	short loc_10011E85
		cmp	word ptr [eax+edx*2+2],	0
		jnz	short loc_10011E85

loc_10011E5E:				; CODE XREF: sub_10011E30+18j
		mov	ecx, [edi+0Ch]
		shr	ecx, 1
		cmp	edx, ecx
		ja	short loc_10011E7F
		movzx	eax, word ptr [eax+edx*2-2]
		push	0
		push	esi
		push	eax
		push	edi
		call	sub_1000FAB0
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		jnz	short loc_10011E3D

loc_10011E7F:				; CODE XREF: sub_10011E30+35j
					; sub_10011E30+5Bj
		pop	edi
		pop	esi
		xor	eax, eax
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_10011E85:				; CODE XREF: sub_10011E30+1Dj
					; sub_10011E30+24j ...
		mov	[ebx], esi
		cmp	word ptr [eax],	2
		jbe	short loc_10011E7F
		mov	ax, [eax+6]
		pop	edi
		pop	esi
		pop	ebx
		retn
sub_10011E30	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10011EA0	proc near		; CODE XREF: sub_10011930+F3p

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 0Ch
		push	ebx
		push	ebp
		mov	ebp, [esp+14h+arg_8]
		push	esi
		mov	esi, [esp+18h+arg_4]
		mov	al, [esi+15h]
		lea	ebx, [esi+15h]
		movsx	ecx, al
		or	al, 8
		push	edi
		mov	edi, [esp+1Ch+arg_0]
		mov	[esp+1Ch+var_C], esi
		mov	[esp+1Ch+var_8], ebx
		mov	[esp+1Ch+arg_4], ecx
		mov	[ebx], al
		lea	esp, [esp+0]

loc_10011ED0:				; CODE XREF: sub_10011EA0+64j
		mov	ecx, [esi+10h]
		mov	edx, [edi+0Ch]
		movzx	eax, word ptr [ecx+2]
		sub	edx, eax
		js	short loc_10011F06
		add	ebp, edx
		cmp	word ptr [ecx+4], 3
		mov	[esp+1Ch+var_4], ebp
		jz	short loc_10011F17
		movzx	eax, word ptr [ecx]
		push	0
		push	esi
		movzx	eax, word ptr [ecx+eax*2-2]
		push	eax
		push	edi
		call	sub_1000FAB0
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		jnz	short loc_10011ED0

loc_10011F06:				; CODE XREF: sub_10011EA0+3Cj
					; sub_10011EA0+9Dj
		mov	ecx, [esp+1Ch+arg_4]
		mov	[ebx], cl

loc_10011F0C:				; CODE XREF: sub_10011EA0+136j
		pop	edi
		pop	esi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_10011F17:				; CODE XREF: sub_10011EA0+49j
		mov	eax, [edi+11Ch]
		test	eax, eax
		jz	short loc_10011F2B
		push	eax		; void *
		call	ds:free
		add	esp, 4

loc_10011F2B:				; CODE XREF: sub_10011EA0+7Fj
		push	ebp		; size_t
		call	ds:malloc
		add	esp, 4
		mov	[edi+11Ch], eax
		test	eax, eax
		jz	short loc_10011F06
		mov	ebp, [esp+1Ch+var_C]

loc_10011F43:				; CODE XREF: sub_10011EA0+EBj
		mov	ebx, [ebp+10h]
		mov	esi, [edi+0Ch]
		movzx	eax, word ptr [ebx+2]
		sub	esi, eax
		add	eax, ebx
		push	esi		; size_t
		push	eax		; void *
		mov	eax, [edi+11Ch]
		add	eax, [esp+24h+arg_8]
		push	eax		; void *
		call	ds:memmove
		add	[esp+28h+arg_8], esi
		add	esp, 0Ch
		cmp	word ptr [ebx+4], 3
		jz	short loc_10011F8D
		movzx	eax, word ptr [ebx]
		push	0
		push	ebp
		movzx	eax, word ptr [ebx+eax*2-2]
		push	eax
		push	edi
		call	sub_1000FAB0
		mov	ebp, eax
		add	esp, 10h
		test	ebp, ebp
		jnz	short loc_10011F43

loc_10011F8D:				; CODE XREF: sub_10011EA0+D0j
		cmp	[esp+1Ch+arg_C], 0
		mov	eax, [esp+1Ch+var_8]
		mov	ecx, [esp+1Ch+arg_4]
		mov	[esp+1Ch+var_C], ebp
		mov	ebp, [esp+1Ch+var_4]
		mov	[eax], cl
		jz	short loc_10011FF5
		mov	dword ptr [edi+12Ch], 1
		movzx	ecx, word ptr [ebx]
		cmp	ecx, 2
		jz	short loc_10011FE5
		mov	eax, [esp+1Ch+var_C]
		push	0
		push	eax
		movzx	eax, word ptr [ebx+ecx*2-2]
		push	eax
		push	edi
		call	sub_1000FAB0
		add	esp, 10h
		mov	[edi+124h], eax
		test	eax, eax
		jz	loc_10011F0C
		mov	ecx, [eax+10h]
		cmp	word ptr [ecx],	0
		jnz	short loc_10011FF5

loc_10011FE5:				; CODE XREF: sub_10011EA0+116j
		inc	dword ptr [edi+128h]
		mov	dword ptr [edi+124h], 0

loc_10011FF5:				; CODE XREF: sub_10011EA0+104j
					; sub_10011EA0+143j
		pop	edi
		pop	esi
		mov	eax, ebp
		pop	ebp
		pop	ebx
		add	esp, 0Ch
		retn
sub_10011EA0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10012000(size_t, int,	int, int, int)
sub_10012000	proc near		; CODE XREF: sub_100118F0+14p
					; sub_10011B10+18p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	ebx
		mov	ebx, [esp+4+arg_8]
		push	ebp
		push	esi
		mov	esi, [esp+0Ch+arg_0]
		push	edi
		mov	edi, [esp+10h+arg_4]
		mov	ecx, [esi+0Ch]
		mov	ebp, [edi+10h]
		movzx	eax, word ptr [ebp+2]
		sub	ecx, eax
		movzx	eax, word ptr [edi+0Ch]
		mov	[esp+10h+arg_4], eax
		add	ebx, ecx
		movzx	eax, word ptr [ebp+4]
		mov	[esp+10h+arg_0], ecx
		cmp	eax, 2
		jz	short loc_10012074
		cmp	eax, 3
		jz	short loc_10012074
		movzx	eax, word ptr [ebp+0]
		push	0
		push	edi
		movzx	eax, word ptr [ebp+eax*2-2]
		push	eax
		push	esi
		call	sub_1000FAB0
		add	esp, 10h
		test	eax, eax
		jz	short loc_1001206C
		push	[esp+10h+arg_10] ; int
		push	[esp+14h+arg_C]	; int
		push	ebx		; int
		push	eax		; int
		push	esi		; size_t
		call	sub_10012000
		mov	ebx, eax
		add	esp, 14h
		cmp	ebx, 1
		jge	short loc_100120B4

loc_1001206C:				; CODE XREF: sub_10012000+50j
					; sub_10012000+9Aj ...
		pop	edi
		pop	esi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_10012074:				; CODE XREF: sub_10012000+31j
					; sub_10012000+36j
		mov	eax, [esi+120h]
		test	eax, eax
		jz	short loc_10012088
		push	eax		; void *
		call	ds:free
		add	esp, 4

loc_10012088:				; CODE XREF: sub_10012000+7Cj
		push	ebx		; size_t
		call	ds:malloc
		add	esp, 4
		mov	[esi+120h], eax
		test	eax, eax
		jz	short loc_1001206C
		push	[esp+10h+arg_10]
		push	[esp+14h+arg_C]
		push	1
		push	edi
		push	esi
		call	sub_10011930
		add	esp, 14h
		test	eax, eax
		jnz	short loc_1001206C

loc_100120B4:				; CODE XREF: sub_10012000+6Aj
		mov	eax, [esp+10h+arg_4]
		movzx	eax, ax
		cmp	[edi+0Ch], eax
		jz	short loc_100120D4
		call	ds:_errno
		pop	edi
		pop	esi
		pop	ebp
		mov	dword ptr [eax], 16h
		or	eax, 0FFFFFFFFh
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_100120D4:				; CODE XREF: sub_10012000+BEj
		movzx	eax, word ptr [ebp+2]
		add	eax, [edi+10h]
		push	[esp+10h+arg_0]	; size_t
		push	eax		; void *
		mov	eax, [esi+120h]
		add	eax, [esp+18h+arg_8]
		push	eax		; void *
		call	ds:memmove
		add	esp, 0Ch
		mov	eax, ebx
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
sub_10012000	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10012100	proc near		; DATA XREF: .data:off_1001500Co

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	ecx, [esp+arg_4]
		xor	eax, eax
		mov	edx, [esp+arg_0]
		test	ecx, ecx
		jz	locret_10012196
		push	esi
		lea	esi, [ecx+7]
		and	ecx, 7
		shr	esi, 3
		cmp	ecx, 7		; switch 8 cases
		ja	short loc_10012195 ; jumptable 10012121	default	case
		jmp	ds:off_10012198[ecx*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_10012128:				; CODE XREF: sub_10012100+21j
					; sub_10012100+93j
					; DATA XREF: ...
		mov	ecx, eax	; jumptable 10012121 case 3
		shl	eax, 5
		add	eax, ecx
		movzx	ecx, byte ptr [edx]
		add	eax, ecx
		inc	edx

loc_10012135:				; CODE XREF: sub_10012100+21j
					; DATA XREF: .text:off_10012198o
		mov	ecx, eax	; jumptable 10012121 case 2
		shl	eax, 5
		add	eax, ecx
		movzx	ecx, byte ptr [edx]
		add	eax, ecx
		inc	edx

loc_10012142:				; CODE XREF: sub_10012100+21j
					; DATA XREF: .text:off_10012198o
		mov	ecx, eax	; jumptable 10012121 case 1
		shl	eax, 5
		add	eax, ecx
		movzx	ecx, byte ptr [edx]
		add	eax, ecx
		inc	edx
		dec	esi
		jz	short loc_10012195 ; jumptable 10012121	default	case

loc_10012152:				; CODE XREF: sub_10012100+21j
					; DATA XREF: .text:off_10012198o
		mov	ecx, eax	; jumptable 10012121 case 0
		shl	eax, 5
		add	eax, ecx
		movzx	ecx, byte ptr [edx]
		add	eax, ecx
		inc	edx

loc_1001215F:				; CODE XREF: sub_10012100+21j
					; DATA XREF: .text:off_10012198o
		mov	ecx, eax	; jumptable 10012121 case 7
		shl	eax, 5
		add	eax, ecx
		movzx	ecx, byte ptr [edx]
		add	eax, ecx
		inc	edx

loc_1001216C:				; CODE XREF: sub_10012100+21j
					; DATA XREF: .text:off_10012198o
		mov	ecx, eax	; jumptable 10012121 case 6
		shl	eax, 5
		add	eax, ecx
		movzx	ecx, byte ptr [edx]
		add	eax, ecx
		inc	edx

loc_10012179:				; CODE XREF: sub_10012100+21j
					; DATA XREF: .text:off_10012198o
		mov	ecx, eax	; jumptable 10012121 case 5
		shl	eax, 5
		add	eax, ecx
		movzx	ecx, byte ptr [edx]
		add	eax, ecx
		inc	edx

loc_10012186:				; CODE XREF: sub_10012100+21j
					; DATA XREF: .text:off_10012198o
		mov	ecx, eax	; jumptable 10012121 case 4
		shl	eax, 5
		add	eax, ecx
		movzx	ecx, byte ptr [edx]
		add	eax, ecx
		inc	edx
		jmp	short loc_10012128 ; jumptable 10012121	case 3
; ---------------------------------------------------------------------------

loc_10012195:				; CODE XREF: sub_10012100+1Fj
					; sub_10012100+50j
		pop	esi		; jumptable 10012121 default case

locret_10012196:			; CODE XREF: sub_10012100+Cj
		retn
sub_10012100	endp

; ---------------------------------------------------------------------------
		align 4
off_10012198	dd offset loc_10012152	; DATA XREF: sub_10012100+21r
		dd offset loc_10012142	; jump table for switch	statement
		dd offset loc_10012135
		dd offset loc_10012128
		dd offset loc_10012186
		dd offset loc_10012179
		dd offset loc_1001216C
		dd offset loc_1001215F
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_100121C0(char	*, int,	int)
sub_100121C0	proc near		; CODE XREF: sub_10012340+Ep

var_38		= dword	ptr -38h
var_34		= byte ptr -34h
var_2E		= dword	ptr -2Eh
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 38h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+38h+var_4], eax
		push	ebx
		push	ebp
		mov	ebp, [esp+40h+arg_4]
		push	esi
		push	edi
		mov	edi, [esp+48h+arg_0]
		call	ds:_getpid
		cmp	byte ptr [edi],	0
		mov	ebx, eax
		mov	esi, edi
		jz	short loc_100121F6
		lea	esp, [esp+0]

loc_100121F0:				; CODE XREF: sub_100121C0+34j
		inc	esi
		cmp	byte ptr [esi],	0
		jnz	short loc_100121F0

loc_100121F6:				; CODE XREF: sub_100121C0+27j
		dec	esi
		cmp	byte ptr [esi],	58h
		jnz	short loc_10012223
		lea	esp, [esp+0]

loc_10012200:				; CODE XREF: sub_100121C0+61j
		mov	eax, 0CCCCCCCDh
		mul	ebx
		shr	edx, 3
		mov	al, dl
		shl	al, 2
		lea	ecx, [eax+edx]
		add	cl, cl
		sub	bl, cl
		add	bl, 30h
		mov	[esi], bl
		dec	esi
		mov	ebx, edx
		cmp	byte ptr [esi],	58h
		jz	short loc_10012200

loc_10012223:				; CODE XREF: sub_100121C0+3Aj
		lea	eax, [esi+1]
		mov	[esp+48h+var_38], eax
		mov	eax, ds:_stat64i32
		cmp	esi, edi
		jbe	short loc_1001228A

loc_10012233:				; CODE XREF: sub_100121C0+82j
		mov	bl, [esi]
		cmp	bl, 2Fh
		jz	short loc_10012246
		cmp	bl, 5Ch
		jz	short loc_10012246
		dec	esi
		cmp	esi, edi
		ja	short loc_10012233
		jmp	short loc_1001228A
; ---------------------------------------------------------------------------

loc_10012246:				; CODE XREF: sub_100121C0+78j
					; sub_100121C0+7Dj
		lea	ecx, [esp+48h+var_34]
		mov	byte ptr [esi],	0
		push	ecx
		push	edi
		call	eax ; _stat64i32
		add	esp, 8
		mov	[esi], bl
		test	eax, eax
		jnz	short loc_10012270
		test	[esp+48h+var_2E], 4000h
		jnz	short loc_10012285
		call	ds:_errno
		mov	dword ptr [eax], 14h

loc_10012270:				; CODE XREF: sub_100121C0+98j
					; sub_100121C0+F9j ...
		pop	edi
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		mov	ecx, [esp+38h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 38h
		retn
; ---------------------------------------------------------------------------

loc_10012285:				; CODE XREF: sub_100121C0+A2j
		mov	eax, ds:_stat64i32

loc_1001228A:				; CODE XREF: sub_100121C0+71j
					; sub_100121C0+84j
		mov	ebx, ds:_errno

loc_10012290:				; CODE XREF: sub_100121C0+139j
					; sub_100121C0+13Dj
		test	ebp, ebp
		jz	short loc_100122BD
		mov	eax, [esp+48h+arg_8]
		push	180h
		or	eax, 502h
		push	eax		; int
		push	edi		; char *
		call	ds:_open
		add	esp, 0Ch
		mov	[ebp+0], eax
		test	eax, eax
		jns	short loc_100122FF
		call	ebx ; _errno
		cmp	dword ptr [eax], 11h
		jnz	short loc_10012270
		jmp	short loc_100122CC
; ---------------------------------------------------------------------------

loc_100122BD:				; CODE XREF: sub_100121C0+D2j
		lea	ecx, [esp+48h+var_34]
		push	ecx
		push	edi
		call	eax ; _stat64i32
		add	esp, 8
		test	eax, eax
		jnz	short loc_10012317

loc_100122CC:				; CODE XREF: sub_100121C0+FBj
		mov	esi, [esp+48h+var_38]

loc_100122D0:				; CODE XREF: sub_100121C0+11Ej
		mov	al, [esi]
		test	al, al
		jz	short loc_10012270
		cmp	al, 7Ah
		jnz	short loc_100122E0
		mov	byte ptr [esi],	61h
		inc	esi
		jmp	short loc_100122D0
; ---------------------------------------------------------------------------

loc_100122E0:				; CODE XREF: sub_100121C0+118j
		movsx	eax, byte ptr [esi]
		push	eax		; int
		call	ds:isdigit
		add	esp, 4
		test	eax, eax
		mov	eax, ds:_stat64i32
		jz	short loc_100122FB
		mov	byte ptr [esi],	61h
		jmp	short loc_10012290
; ---------------------------------------------------------------------------

loc_100122FB:				; CODE XREF: sub_100121C0+134j
		inc	byte ptr [esi]
		jmp	short loc_10012290
; ---------------------------------------------------------------------------

loc_100122FF:				; CODE XREF: sub_100121C0+F2j
		pop	edi
		pop	esi
		pop	ebp
		mov	eax, 1
		pop	ebx
		mov	ecx, [esp+38h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 38h
		retn
; ---------------------------------------------------------------------------

loc_10012317:				; CODE XREF: sub_100121C0+10Aj
		call	ebx ; _errno
		xor	ecx, ecx
		pop	edi
		pop	esi
		cmp	dword ptr [eax], 2
		pop	ebp
		setz	cl
		mov	eax, ecx
		mov	ecx, [esp+3Ch+var_4]
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 38h
		retn
sub_100121C0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10012340(char	*, int)
sub_10012340	proc near		; CODE XREF: sub_10010C70+E4p

var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ecx
		push	[esp+4+arg_4]	; int
		lea	eax, [esp+8+var_4]
		push	eax		; int
		push	[esp+0Ch+arg_0]	; char *
		call	sub_100121C0
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_1001235F
		mov	eax, [esp+4+var_4]
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_1001235F:				; CODE XREF: sub_10012340+18j
		or	eax, 0FFFFFFFFh
		pop	ecx
		retn
sub_10012340	endp

; [00000006 BYTES: COLLAPSED FUNCTION PORT_Alloc_Util]
; [00000006 BYTES: COLLAPSED FUNCTION PORT_ZAlloc_Util]
; [00000006 BYTES: COLLAPSED FUNCTION PORT_Free_Util]
; [00000006 BYTES: COLLAPSED FUNCTION NSSBase64_EncodeItem_Util]
; [00000006 BYTES: COLLAPSED FUNCTION NSS_Get_SECOID_AlgorithmIDTemplate_Util]
; [00000006 BYTES: COLLAPSED FUNCTION PORT_Strdup_Util]
; [00000006 BYTES: COLLAPSED FUNCTION PORT_SetError_Util]
; [00000006 BYTES: COLLAPSED FUNCTION PORT_GetError_Util]
; [00000006 BYTES: COLLAPSED FUNCTION PORT_NewArena_Util]
; [00000006 BYTES: COLLAPSED FUNCTION PORT_ArenaAlloc_Util]
; [00000006 BYTES: COLLAPSED FUNCTION PORT_ArenaZAlloc_Util]
; [00000006 BYTES: COLLAPSED FUNCTION PORT_FreeArena_Util]
; [00000006 BYTES: COLLAPSED FUNCTION SECITEM_CopyItem_Util]
; [00000006 BYTES: COLLAPSED FUNCTION SECITEM_DupItem_Util]
; [00000006 BYTES: COLLAPSED FUNCTION SECITEM_FreeItem_Util]
; [00000006 BYTES: COLLAPSED FUNCTION SECITEM_ZfreeItem_Util]
; [00000006 BYTES: COLLAPSED FUNCTION SEC_QuickDERDecodeItem_Util]
; [00000006 BYTES: COLLAPSED FUNCTION SEC_ASN1EncodeItem_Util]
; [00000006 BYTES: COLLAPSED FUNCTION SEC_ASN1EncodeInteger_Util]
; [00000006 BYTES: COLLAPSED FUNCTION SECOID_FindOIDTag_Util]
; [00000006 BYTES: COLLAPSED FUNCTION SECOID_FindOIDByTag_Util]
; [00000006 BYTES: COLLAPSED FUNCTION SECOID_SetAlgorithmID_Util]
; [00000006 BYTES: COLLAPSED FUNCTION SECOID_GetAlgorithmTag_Util]
; [00000006 BYTES: COLLAPSED FUNCTION NSS_Get_SEC_OctetStringTemplate_Util]
; [00000006 BYTES: COLLAPSED FUNCTION DER_SetUInteger]
; [00000006 BYTES: COLLAPSED FUNCTION PORT_Realloc_Util]
; [00000006 BYTES: COLLAPSED FUNCTION SECITEM_ItemsAreEqual_Util]
; [00000006 BYTES: COLLAPSED FUNCTION PL_NewHashTable]
; [00000006 BYTES: COLLAPSED FUNCTION PL_HashTableDestroy]
; [00000006 BYTES: COLLAPSED FUNCTION SECITEM_HashCompare]
; [00000006 BYTES: COLLAPSED FUNCTION SECOID_Init]
; [00000006 BYTES: COLLAPSED FUNCTION SECOID_Shutdown]
; [00000006 BYTES: COLLAPSED FUNCTION PL_HashTableAdd]
; [00000006 BYTES: COLLAPSED FUNCTION PL_HashTableRemove]
; [00000006 BYTES: COLLAPSED FUNCTION PL_HashTableLookup]
; [00000006 BYTES: COLLAPSED FUNCTION PL_HashTableEnumerateEntries]
; [00000006 BYTES: COLLAPSED FUNCTION SECITEM_AllocItem_Util]
; [00000006 BYTES: COLLAPSED FUNCTION DER_DecodeTimeChoice_Util]
; [00000006 BYTES: COLLAPSED FUNCTION NSS_Get_SEC_AnyTemplate_Util]
; [00000006 BYTES: COLLAPSED FUNCTION NSS_Get_SEC_BitStringTemplate_Util]
; [00000006 BYTES: COLLAPSED FUNCTION NSS_Get_SEC_ObjectIDTemplate_Util]
; [00000006 BYTES: COLLAPSED FUNCTION PORT_ArenaMark_Util]
; [00000006 BYTES: COLLAPSED FUNCTION PORT_ArenaRelease_Util]
; [00000006 BYTES: COLLAPSED FUNCTION PORT_ArenaUnmark_Util]
; [00000006 BYTES: COLLAPSED FUNCTION PORT_ArenaStrdup_Util]
; [00000006 BYTES: COLLAPSED FUNCTION SECITEM_CompareItem_Util]
; [00000006 BYTES: COLLAPSED FUNCTION NSSUTIL_ArgGetParamValue]
; [00000006 BYTES: COLLAPSED FUNCTION NSSUTIL_ArgHasFlag]
; [00000006 BYTES: COLLAPSED FUNCTION NSSUTIL_ArgReadLong]
; [00000006 BYTES: COLLAPSED FUNCTION NSSUTIL_Quote]
; [00000006 BYTES: COLLAPSED FUNCTION NSSUTIL_ArgParseSlotFlags]
; [00000006 BYTES: COLLAPSED FUNCTION NSSUTIL_ArgParseSlotInfo]
; [00000006 BYTES: COLLAPSED FUNCTION NSSUTIL_MkSlotString]
; [00000006 BYTES: COLLAPSED FUNCTION NSSUTIL_ArgParseModuleSpec]
; [00000006 BYTES: COLLAPSED FUNCTION NSSUTIL_MkModuleSpec]
; [00000006 BYTES: COLLAPSED FUNCTION NSSUTIL_ArgParseCipherFlags]
; [00000006 BYTES: COLLAPSED FUNCTION NSSUTIL_MkNSSString]
; [00000006 BYTES: COLLAPSED FUNCTION memcpy]
; [00000006 BYTES: COLLAPSED FUNCTION strcmp]
; [00000006 BYTES: COLLAPSED FUNCTION strlen]
; [0000000F BYTES: COLLAPSED FUNCTION __security_check_cookie(x)]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION memcmp]
; [00000006 BYTES: COLLAPSED FUNCTION memset]
; [00000006 BYTES: COLLAPSED FUNCTION strcpy]
; [0000004C BYTES: COLLAPSED FUNCTION _pre_c_init]

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_1001253A	proc near		; CODE XREF: ___DllMainCRTStartup+64p
					; ___DllMainCRTStartup+A3p ...

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ecx
		cmp	[ebp+arg_4], 0
		push	ebx
		push	esi
		push	edi
		jnz	loc_10012675
		mov	eax, dword_10015080
		test	eax, eax
		jle	loc_1001266E
		dec	eax
		mov	ebx, offset dword_100153B4
		mov	dword_10015080,	eax
		xor	edi, edi
		mov	eax, large fs:18h
		mov	[ebp+var_4], edi
		mov	edx, [eax+4]
		jmp	short loc_10012578
; ---------------------------------------------------------------------------

loc_10012574:				; CODE XREF: sub_1001253A+48j
		cmp	eax, edx
		jz	short loc_10012586

loc_10012578:				; CODE XREF: sub_1001253A+38j
		xor	eax, eax
		mov	ecx, edx
		lock cmpxchg [ebx], ecx
		test	eax, eax
		jnz	short loc_10012574
		jmp	short loc_1001258D
; ---------------------------------------------------------------------------

loc_10012586:				; CODE XREF: sub_1001253A+3Cj
		mov	[ebp+var_4], 1

loc_1001258D:				; CODE XREF: sub_1001253A+4Aj
		cmp	dword_100153B8,	2
		jz	short loc_100125A3
		push	1Fh
		call	_amsg_exit
		pop	ecx
		jmp	loc_10012725
; ---------------------------------------------------------------------------

loc_100125A3:				; CODE XREF: sub_1001253A+5Aj
		push	Ptr		; Ptr
		call	ds:DecodePointer
		mov	esi, eax
		mov	[ebp+arg_8], esi
		test	esi, esi
		jz	loc_10012656
		push	dword_100153BC	; Ptr
		call	ds:DecodePointer
		mov	ebx, eax
		mov	[ebp+arg_4], esi
		mov	[ebp+arg_0], ebx

loc_100125D0:				; CODE XREF: sub_1001253A+9Fj
					; sub_1001253A+AAj ...
		sub	ebx, 4
		cmp	ebx, esi
		jb	short loc_10012633
		cmp	[ebx], edi
		jz	short loc_100125D0
		push	edi		; Ptr
		call	ds:EncodePointer
		cmp	[ebx], eax
		jz	short loc_100125D0
		push	dword ptr [ebx]	; Ptr
		call	ds:DecodePointer
		push	edi		; Ptr
		mov	esi, eax
		call	ds:EncodePointer
		mov	[ebx], eax
		call	esi
		push	Ptr		; Ptr
		mov	esi, ds:DecodePointer
		call	esi ; DecodePointer
		push	dword_100153BC	; Ptr
		mov	[ebp+var_8], eax
		call	esi ; DecodePointer
		mov	ecx, [ebp+var_8]
		cmp	[ebp+arg_4], ecx
		jnz	short loc_10012624
		mov	esi, [ebp+arg_8]
		cmp	[ebp+arg_0], eax
		jz	short loc_100125D0

loc_10012624:				; CODE XREF: sub_1001253A+E0j
		mov	esi, ecx
		mov	[ebp+arg_4], ecx
		mov	[ebp+arg_8], esi
		mov	ebx, eax
		mov	[ebp+arg_0], eax
		jmp	short loc_100125D0
; ---------------------------------------------------------------------------

loc_10012633:				; CODE XREF: sub_1001253A+9Bj
		cmp	esi, 0FFFFFFFFh
		jz	short loc_10012640
		push	esi
		call	ds:frex
		pop	ecx

loc_10012640:				; CODE XREF: sub_1001253A+FCj
		push	edi		; Ptr
		call	ds:EncodePointer
		mov	dword_100153BC,	eax
		mov	ebx, offset dword_100153B4
		mov	Ptr, eax

loc_10012656:				; CODE XREF: sub_1001253A+7Cj
		mov	dword_100153B8,	edi
		cmp	[ebp+var_4], edi
		jnz	loc_10012725
		xor	eax, eax
		xchg	eax, [ebx]
		jmp	loc_10012725
; ---------------------------------------------------------------------------

loc_1001266E:				; CODE XREF: sub_1001253A+19j
					; sub_1001253A+19Fj
		xor	eax, eax
		jmp	loc_10012728
; ---------------------------------------------------------------------------

loc_10012675:				; CODE XREF: sub_1001253A+Cj
		cmp	[ebp+arg_4], 1
		jnz	loc_10012725
		mov	eax, large fs:18h
		xor	edi, edi
		mov	esi, edi
		mov	ebx, offset dword_100153B4
		mov	edx, [eax+4]
		jmp	short loc_10012697
; ---------------------------------------------------------------------------

loc_10012693:				; CODE XREF: sub_1001253A+167j
		cmp	eax, edx
		jz	short loc_100126A5

loc_10012697:				; CODE XREF: sub_1001253A+157j
		xor	eax, eax
		mov	ecx, edx
		lock cmpxchg [ebx], ecx
		test	eax, eax
		jnz	short loc_10012693
		jmp	short loc_100126A8
; ---------------------------------------------------------------------------

loc_100126A5:				; CODE XREF: sub_1001253A+15Bj
		xor	esi, esi
		inc	esi

loc_100126A8:				; CODE XREF: sub_1001253A+169j
		cmp	dword_100153B8,	edi
		push	2
		pop	edi
		jz	short loc_100126BC
		push	1Fh
		call	_amsg_exit
		jmp	short loc_100126F1
; ---------------------------------------------------------------------------

loc_100126BC:				; CODE XREF: sub_1001253A+177j
		push	offset dword_1001326C
		push	offset dword_10013260
		mov	dword_100153B8,	1
		call	_initterm_e
		pop	ecx
		pop	ecx
		test	eax, eax
		jnz	short loc_1001266E
		push	offset dword_1001325C
		push	offset dword_10013258
		call	_initterm
		pop	ecx
		mov	dword_100153B8,	edi

loc_100126F1:				; CODE XREF: sub_1001253A+180j
		pop	ecx
		test	esi, esi
		jnz	short loc_100126FA
		xor	eax, eax
		xchg	eax, [ebx]

loc_100126FA:				; CODE XREF: sub_1001253A+1BAj
		cmp	dword_100153C4,	0
		jz	short loc_1001271F
		push	offset dword_100153C4
		call	__IsNonwritableInCurrentImage
		pop	ecx
		test	eax, eax
		jz	short loc_1001271F
		push	[ebp+arg_8]
		push	edi
		push	[ebp+arg_0]
		call	dword_100153C4

loc_1001271F:				; CODE XREF: sub_1001253A+1C7j
					; sub_1001253A+1D6j
		inc	dword_10015080

loc_10012725:				; CODE XREF: sub_1001253A+64j
					; sub_1001253A+125j ...
		xor	eax, eax
		inc	eax

loc_10012728:				; CODE XREF: sub_1001253A+136j
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn	0Ch
sub_1001253A	endp

; [00000023 BYTES: COLLAPSED FUNCTION DllEntryPoint]
; [00000133 BYTES: COLLAPSED FUNCTION ___DllMainCRTStartup]
; [0000003D BYTES: COLLAPSED FUNCTION ___raise_securityfailure]
; [000000FB BYTES: COLLAPSED FUNCTION ___report_gsfailure]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION __CppXcptFilter]
; [00000006 BYTES: COLLAPSED FUNCTION _amsg_exit]
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_100129D0	proc near		; CODE XREF: __IsNonwritableInCurrentImage+59p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_0]
		xor	edx, edx
		push	ebx
		push	esi
		push	edi
		mov	ecx, [eax+3Ch]
		add	ecx, eax
		movzx	eax, word ptr [ecx+14h]
		movzx	ebx, word ptr [ecx+6]
		add	eax, 18h
		add	eax, ecx
		test	ebx, ebx
		jz	short loc_10012A0C
		mov	edi, [ebp+arg_4]

loc_100129F4:				; CODE XREF: sub_100129D0+3Aj
		mov	esi, [eax+0Ch]
		cmp	edi, esi
		jb	short loc_10012A04
		mov	ecx, [eax+8]
		add	ecx, esi
		cmp	edi, ecx
		jb	short loc_10012A0E

loc_10012A04:				; CODE XREF: sub_100129D0+29j
		inc	edx
		add	eax, 28h
		cmp	edx, ebx
		jb	short loc_100129F4

loc_10012A0C:				; CODE XREF: sub_100129D0+1Fj
		xor	eax, eax

loc_10012A0E:				; CODE XREF: sub_100129D0+32j
		pop	edi
		pop	esi
		pop	ebx
		pop	ebp
		retn
sub_100129D0	endp

; ---------------------------------------------------------------------------
		align 10h
; [000000BA BYTES: COLLAPSED FUNCTION __IsNonwritableInCurrentImage]
		align 10h
; [00000031 BYTES: COLLAPSED FUNCTION __ValidateImageBase]
; [0000003C BYTES: COLLAPSED FUNCTION ___atonexitinit]

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_10012B4D(_onexit_t)
sub_10012B4D	proc near		; CODE XREF: sub_10012BF6+6p

var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
Ptr		= dword	ptr -1Ch
ms_exc		= CPPEH_RECORD ptr -18h
arg_0		= dword	ptr  8

		push	14h
		push	offset stru_10013D80
		call	__SEH_prolog4
		and	[ebp+var_24], 0
		push	Ptr		; Ptr
		mov	esi, ds:DecodePointer
		call	esi ; DecodePointer
		mov	[ebp+Ptr], eax
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_10012B7F
		push	[ebp+arg_0]	; _onexit_t
		call	ds:_onexit
		pop	ecx
		jmp	short loc_10012BE4
; ---------------------------------------------------------------------------

loc_10012B7F:				; CODE XREF: sub_10012B4D+24j
		push	8
		call	_lock
		pop	ecx
		and	[ebp+ms_exc.registration.TryLevel], 0
		push	Ptr		; Ptr
		call	esi ; DecodePointer
		mov	[ebp+Ptr], eax
		push	dword_100153BC	; Ptr
		call	esi ; DecodePointer
		mov	[ebp+var_20], eax
		lea	eax, [ebp+var_20]
		push	eax
		lea	eax, [ebp+Ptr]
		push	eax
		push	[ebp+arg_0]	; Ptr
		mov	esi, ds:EncodePointer
		call	esi ; EncodePointer
		push	eax
		call	__dllonexit
		add	esp, 0Ch
		mov	edi, eax
		mov	[ebp+var_24], edi
		push	[ebp+Ptr]	; Ptr
		call	esi ; EncodePointer
		mov	Ptr, eax
		push	[ebp+var_20]	; Ptr
		call	esi ; EncodePointer
		mov	dword_100153BC,	eax
		mov	[ebp+ms_exc.registration.TryLevel], 0FFFFFFFEh
		call	loc_10012BED
; ---------------------------------------------------------------------------

loc_10012BE2:				; CODE XREF: sub_10012B4D+A8j
		mov	eax, edi

loc_10012BE4:				; CODE XREF: sub_10012B4D+30j
		call	__SEH_epilog4
		retn
; ---------------------------------------------------------------------------

loc_10012BEA:				; DATA XREF: .rdata:stru_10013D80o
		mov	edi, [ebp+var_24] ; Finally handler 0 for function 10012B4D

loc_10012BED:				; CODE XREF: sub_10012B4D+90j
		push	8
		call	_unlock
		pop	ecx
		retn
sub_10012B4D	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_10012BF6(_onexit_t)
sub_10012BF6	proc near		; CODE XREF: _pre_c_init+36p
					; _pre_c_init+42p

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	[ebp+arg_0]	; _onexit_t
		call	sub_10012B4D
		neg	eax
		pop	ecx
		sbb	eax, eax
		neg	eax
		dec	eax
		pop	ebp
		retn
sub_10012BF6	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10012C0B	proc near		; CODE XREF: DllEntryPoint+9p

PerformanceCount= LARGE_INTEGER	ptr -14h
SystemTimeAsFileTime= _FILETIME	ptr -0Ch
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		sub	esp, 14h
		and	[ebp+SystemTimeAsFileTime.dwLowDateTime], 0
		and	[ebp+SystemTimeAsFileTime.dwHighDateTime], 0
		mov	eax, ___security_cookie
		push	esi
		push	edi
		mov	edi, 0BB40E64Eh
		mov	esi, 0FFFF0000h
		cmp	eax, edi
		jz	short loc_10012C3B
		test	esi, eax
		jz	short loc_10012C3B
		not	eax
		mov	dword_10015014,	eax
		jmp	short loc_10012CA1
; ---------------------------------------------------------------------------

loc_10012C3B:				; CODE XREF: sub_10012C0B+21j
					; sub_10012C0B+25j
		lea	eax, [ebp+SystemTimeAsFileTime]
		push	eax		; lpSystemTimeAsFileTime
		call	ds:GetSystemTimeAsFileTime
		mov	eax, [ebp+SystemTimeAsFileTime.dwHighDateTime]
		xor	eax, [ebp+SystemTimeAsFileTime.dwLowDateTime]
		mov	[ebp+var_4], eax
		call	ds:GetCurrentThreadId
		xor	[ebp+var_4], eax
		call	ds:GetCurrentProcessId
		xor	[ebp+var_4], eax
		lea	eax, [ebp+PerformanceCount]
		push	eax		; lpPerformanceCount
		call	ds:QueryPerformanceCounter
		mov	ecx, dword ptr [ebp+PerformanceCount+4]
		lea	eax, [ebp+var_4]
		xor	ecx, dword ptr [ebp+PerformanceCount]
		xor	ecx, [ebp+var_4]
		xor	ecx, eax
		cmp	ecx, edi
		jnz	short loc_10012C83
		mov	ecx, 0BB40E64Fh
		jmp	short loc_10012C93
; ---------------------------------------------------------------------------

loc_10012C83:				; CODE XREF: sub_10012C0B+6Fj
		test	esi, ecx
		jnz	short loc_10012C93
		mov	eax, ecx
		or	eax, 4711h
		shl	eax, 10h
		or	ecx, eax

loc_10012C93:				; CODE XREF: sub_10012C0B+76j
					; sub_10012C0B+7Aj
		mov	___security_cookie, ecx
		not	ecx
		mov	dword_10015014,	ecx

loc_10012CA1:				; CODE XREF: sub_10012C0B+2Ej
		pop	edi
		pop	esi
		mov	esp, ebp
		pop	ebp
		retn
sub_10012C0B	endp

; [00000022 BYTES: COLLAPSED FUNCTION DllMain(x,x,x)]

; =============== S U B	R O U T	I N E =======================================


sub_10012CC9	proc near		; CODE XREF: _pre_c_init+2Cp
		push	esi
		push	edi
		mov	esi, offset dword_10013D28
		mov	edi, offset dword_10013D28
		jmp	short loc_10012CE2
; ---------------------------------------------------------------------------

loc_10012CD7:				; CODE XREF: sub_10012CC9+1Bj
		mov	eax, [esi]
		test	eax, eax
		jz	short loc_10012CDF
		call	eax

loc_10012CDF:				; CODE XREF: sub_10012CC9+12j
		add	esi, 4

loc_10012CE2:				; CODE XREF: sub_10012CC9+Cj
		cmp	esi, edi
		jb	short loc_10012CD7
		pop	edi
		pop	esi
		retn
sub_10012CC9	endp


; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10012CE9()
sub_10012CE9	proc near		; DATA XREF: _pre_c_init+31o
		push	esi
		push	edi
		mov	esi, offset dword_10013D30
		mov	edi, offset dword_10013D30
		jmp	short loc_10012D02
; ---------------------------------------------------------------------------

loc_10012CF7:				; CODE XREF: sub_10012CE9+1Bj
		mov	eax, [esi]
		test	eax, eax
		jz	short loc_10012CFF
		call	eax

loc_10012CFF:				; CODE XREF: sub_10012CE9+12j
		add	esi, 4

loc_10012D02:				; CODE XREF: sub_10012CE9+Cj
		cmp	esi, edi
		jb	short loc_10012CF7
		pop	edi
		pop	esi
		retn
sub_10012CE9	endp

; ---------------------------------------------------------------------------
		align 2
; [00000006 BYTES: COLLAPSED FUNCTION _initterm]
; [00000006 BYTES: COLLAPSED FUNCTION _initterm_e]

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10012D16()
sub_10012D16	proc near		; DATA XREF: _pre_c_init+3Bo
		push	offset dword_100153A8
		call	__clean_type_info_names_internal
		pop	ecx
		retn
sub_10012D16	endp

; ---------------------------------------------------------------------------
		align 10h
; [00000045 BYTES: COLLAPSED FUNCTION __SEH_prolog4]
; [00000014 BYTES: COLLAPSED FUNCTION __SEH_epilog4]
; [00000023 BYTES: COLLAPSED FUNCTION __except_handler4]
; [00000006 BYTES: COLLAPSED FUNCTION _crt_debugger_hook]
; [00000006 BYTES: COLLAPSED FUNCTION __crtUnhandledException]
; [00000006 BYTES: COLLAPSED FUNCTION __crtTerminateProcess]
; [00000006 BYTES: COLLAPSED FUNCTION _lock]
; [00000006 BYTES: COLLAPSED FUNCTION _unlock]
; [00000006 BYTES: COLLAPSED FUNCTION __dllonexit]
; [00000006 BYTES: COLLAPSED FUNCTION __clean_type_info_names_internal]
; [00000006 BYTES: COLLAPSED FUNCTION _except_handler4_common]
; [00000006 BYTES: COLLAPSED FUNCTION IsProcessorFeaturePresent]
		align 20h
		dd 80h dup(?)
_text		ends

; Section 2. (virtual address 00013000)
; Virtual size			: 00001C66 (   7270.)
; Section size in file		: 00001E00 (   7680.)
; Offset to raw	data for section: 00012200
; Flags	40000040: Data Readable
; Alignment	: default
;
; Imports from KERNEL32.dll
;
; ===========================================================================

; Segment type:	Externs
; _idata
; void __stdcall GetSystemTimeAsFileTime(LPFILETIME lpSystemTimeAsFileTime)
		extrn GetSystemTimeAsFileTime:dword ; CODE XREF: sub_10012C0B+34p
					; DATA XREF: sub_10012C0B+34r ...
; PVOID	__stdcall EncodePointer(PVOID Ptr)
		extrn EncodePointer:dword ; CODE XREF: _pre_c_init+10p
					; sub_1001253A+A2p ...
; PVOID	__stdcall DecodePointer(PVOID Ptr)
		extrn DecodePointer:dword ; CODE XREF: sub_1001253A+6Fp
					; sub_1001253A+88p ...
; BOOL __stdcall IsDebuggerPresent()
		extrn IsDebuggerPresent:dword ;	CODE XREF: ___raise_securityfailure+3p
					; DATA XREF: ___raise_securityfailure+3r
; BOOL __stdcall IsProcessorFeaturePresent(DWORD ProcessorFeature)
		extrn __imp_IsProcessorFeaturePresent:dword
					; DATA XREF: IsProcessorFeaturePresentr
; BOOL __stdcall QueryPerformanceCounter(LARGE_INTEGER *lpPerformanceCount)
		extrn QueryPerformanceCounter:dword ; CODE XREF: sub_10012C0B+59p
					; DATA XREF: sub_10012C0B+59r
; BOOL __stdcall DisableThreadLibraryCalls(HMODULE hLibModule)
		extrn DisableThreadLibraryCalls:dword ;	CODE XREF: DllMain(x,x,x)+15p
					; DATA XREF: DllMain(x,x,x)+15r
; BOOL __stdcall FlushFileBuffers(HANDLE hFile)
		extrn FlushFileBuffers:dword ; CODE XREF: sub_1000F950+25p
					; DATA XREF: sub_1000F950+25r
; DWORD	__stdcall GetCurrentThreadId()
		extrn GetCurrentThreadId:dword ; CODE XREF: sub_10012C0B+43p
					; DATA XREF: sub_10012C0B+43r
; DWORD	__stdcall GetCurrentProcessId()
		extrn GetCurrentProcessId:dword	; CODE XREF: sub_10012C0B+4Cp
					; DATA XREF: sub_10012C0B+4Cr

;
; Imports from MSVCR120.dll
;
; int __cdecl close(int)
		extrn _close:dword	; CODE XREF: sub_1000F160+DDp
					; DATA XREF: sub_1000F160+DDr ...
; __int32 __cdecl lseek(int, __int32, int)
		extrn _lseek:dword	; CODE XREF: sub_1000E7E0+73p
					; sub_1000F950+12p ...
; int open(const char *, int, ...)
		extrn _open:dword	; CODE XREF: sub_1000E410+129p
					; sub_100121C0+E4p
					; DATA XREF: ...
; int __cdecl read(int,	void *,	unsigned int)
		extrn _read:dword	; CODE XREF: sub_1000E410+1A3p
					; sub_10010320+B2p
					; DATA XREF: ...
; int __cdecl getpid()
		extrn _getpid:dword	; CODE XREF: sub_100121C0+1Ap
					; DATA XREF: sub_100121C0+1Ar
; int __cdecl unlink(const char	*)
		extrn _unlink:dword	; CODE XREF: sub_1000F160+FAp
					; DATA XREF: sub_1000F160+FAr
		extrn __imp__except_handler4_common:dword
					; DATA XREF: _except_handler4_commonr
		extrn __imp___clean_type_info_names_internal:dword
					; DATA XREF: __clean_type_info_names_internalr
; _onexit_t __cdecl onexit(_onexit_t)
		extrn _onexit:dword	; CODE XREF: sub_10012B4D+29p
					; DATA XREF: sub_10012B4D+29r
		extrn __imp___dllonexit:dword ;	DATA XREF: __dllonexitr
		extrn _calloc_crt:dword	; CODE XREF: ___atonexitinit+11p
					; DATA XREF: ___atonexitinit+11r
		extrn __imp__unlock:dword ; DATA XREF: _unlockr
		extrn __imp__lock:dword	; DATA XREF: _lockr
		extrn __imp___crtTerminateProcess:dword	; DATA XREF: __crtTerminateProcessr
		extrn __imp___crtUnhandledException:dword
					; DATA XREF: __crtUnhandledExceptionr
		extrn __imp__crt_debugger_hook:dword ; DATA XREF: _crt_debugger_hookr
		extrn __imp__initterm_e:dword ;	DATA XREF: _initterm_er
		extrn __imp__initterm:dword ; DATA XREF: _inittermr
		extrn _malloc_crt:dword	; CODE XREF: _pre_c_init+6p
					; DATA XREF: _pre_c_init+6r
		extrn __imp__amsg_exit:dword ; DATA XREF: _amsg_exitr
		extrn __imp___CppXcptFilter:dword ; DATA XREF: __CppXcptFilterr
; int __cdecl isdigit(int)
		extrn isdigit:dword	; CODE XREF: sub_100121C0+124p
					; DATA XREF: sub_100121C0+124r
; __int32 __cdecl get_osfhandle(int)
		extrn _get_osfhandle:dword ; CODE XREF:	sub_1000F950+1Bp
					; DATA XREF: sub_1000F950+1Br
; void *__cdecl	memmove(void *,	const void *, size_t)
		extrn memmove:dword	; CODE XREF: sub_1000EE60+24p
					; sub_10010160+7Fp ...
; void __cdecl __noreturn abort()
		extrn abort:dword	; CODE XREF: sub_1000E910:loc_1000EC1Ep
					; DATA XREF: sub_1000E910:loc_1000EC1Er
		extrn _stat64i32:dword	; CODE XREF: sub_1000E410+D1p
					; sub_1000F2B0+93p ...
; int errno
		extrn _errno:dword	; CODE XREF: sub_1000E2C0:loc_1000E304p
					; sub_1000E410+28p ...
; char *__cdecl	strrchr(const char *, int)
		extrn strrchr:dword	; CODE XREF: sub_1000E1A0+16p
					; DATA XREF: sub_1000E1A0+16r
; char *__cdecl	strcpy(char *, const char *)
		extrn __imp_strcpy:dword ; DATA	XREF: strcpyr
; int __cdecl tolower(int)
		extrn tolower:dword	; CODE XREF: sub_10008631+27p
					; sub_10008969+4Cp
					; DATA XREF: ...
; void *__cdecl	memset(void *, int, size_t)
		extrn __imp_memset:dword ; DATA	XREF: memsetr
; int __cdecl strncmp(const char *, const char *, size_t)
		extrn strncmp:dword	; CODE XREF: sub_100076AA+Dp
					; DATA XREF: sub_100076AA+Dr
; char *__cdecl	getenv(const char *)
		extrn getenv:dword	; CODE XREF: sub_10003C43+C4p
					; sub_10010C70+2Dp ...
; int __cdecl memcmp(const void	*, const void *, size_t)
		extrn __imp_memcmp:dword ; DATA	XREF: memcmpr
; size_t __cdecl strlen(const char *)
		extrn __imp_strlen:dword ; DATA	XREF: strlenr
; int __cdecl strcmp(const char	*, const char *)
		extrn __imp_strcmp:dword ; DATA	XREF: strcmpr
; void *__cdecl	memcpy(void *, const void *, size_t)
		extrn __imp_memcpy:dword ; DATA	XREF: memcpyr
; int __cdecl write(int, const void *, unsigned	int)
		extrn _write:dword	; CODE XREF: sub_1000E7E0+8Cp
					; sub_100105F0+1D7p ...

;
; Imports from mozglue.dll
;
; char *__cdecl	strdup(const char *)
		extrn strdup:dword	; CODE XREF: sub_1000E410+9Bp
					; sub_10010C70+111p
					; DATA XREF: ...
; void *__cdecl	malloc(size_t)
		extrn malloc:dword	; CODE XREF: sub_1000E410+2BFp
					; sub_1000EE60+7p ...
; void __cdecl free(void *)
		extrn free:dword	; CODE XREF: .text:1000EC6Fp
					; sub_1000EE60+3Ap ...
; void *__cdecl	calloc(size_t, size_t)
		extrn calloc:dword	; CODE XREF: sub_1000E350+5Cp
					; sub_1000E410+5Dp ...
		extrn frex:dword	; CODE XREF: sub_1001253A+FFp
					; DATA XREF: sub_1001253A+FFr

;
; Imports from nss3.dll
;
		extrn __imp_SECOID_Init:dword ;	DATA XREF: SECOID_Initr
					; .rdata:10013EB8o
		extrn __imp_SECOID_Shutdown:dword ; DATA XREF: SECOID_Shutdownr
		extrn __imp_PL_HashTableAdd:dword ; DATA XREF: PL_HashTableAddr
		extrn __imp_PL_HashTableRemove:dword ; DATA XREF: PL_HashTableRemover
		extrn __imp_PL_HashTableLookup:dword ; DATA XREF: PL_HashTableLookupr
		extrn __imp_PL_HashTableEnumerateEntries:dword
					; DATA XREF: PL_HashTableEnumerateEntriesr
		extrn __imp_SECITEM_AllocItem_Util:dword
					; DATA XREF: SECITEM_AllocItem_Utilr
		extrn PR_Now:dword	; CODE XREF: sub_100089C8:loc_10008A44p
					; DATA XREF: sub_100089C8:loc_10008A44r
		extrn __imp_DER_DecodeTimeChoice_Util:dword
					; DATA XREF: DER_DecodeTimeChoice_Utilr
		extrn __imp_NSS_Get_SEC_AnyTemplate_Util:dword
					; DATA XREF: NSS_Get_SEC_AnyTemplate_Utilr
		extrn __imp_NSS_Get_SEC_BitStringTemplate_Util:dword
					; DATA XREF: NSS_Get_SEC_BitStringTemplate_Utilr
		extrn __imp_NSS_Get_SEC_ObjectIDTemplate_Util:dword
					; DATA XREF: NSS_Get_SEC_ObjectIDTemplate_Utilr
		extrn __imp_PORT_ArenaMark_Util:dword ;	DATA XREF: PORT_ArenaMark_Utilr
		extrn __imp_PORT_ArenaRelease_Util:dword
					; DATA XREF: PORT_ArenaRelease_Utilr
		extrn __imp_PORT_ArenaUnmark_Util:dword	; DATA XREF: PORT_ArenaUnmark_Utilr
		extrn __imp_PORT_ArenaStrdup_Util:dword	; DATA XREF: PORT_ArenaStrdup_Utilr
		extrn __imp_SECITEM_CompareItem_Util:dword
					; DATA XREF: SECITEM_CompareItem_Utilr
		extrn PR_NewMonitor:dword ; CODE XREF: sub_1000B429+Dp
					; sub_1000C7C0+Dp
					; DATA XREF: ...
		extrn PR_UnloadLibrary:dword ; CODE XREF: sub_10007A75+92p
					; .text:1000E184p
					; DATA XREF: ...
		extrn PR_EnterMonitor:dword ; CODE XREF: sub_1000C745+7p
					; DATA XREF: sub_1000C745+7r
		extrn PR_ExitMonitor:dword ; CODE XREF:	sub_1000CBDC+7p
					; DATA XREF: sub_1000CBDC+7r
		extrn __imp_NSSUTIL_ArgGetParamValue:dword
					; DATA XREF: NSSUTIL_ArgGetParamValuer
		extrn __imp_NSSUTIL_ArgHasFlag:dword ; DATA XREF: NSSUTIL_ArgHasFlagr
		extrn __imp_NSSUTIL_ArgReadLong:dword ;	DATA XREF: NSSUTIL_ArgReadLongr
		extrn __imp_NSSUTIL_Quote:dword	; DATA XREF: NSSUTIL_Quoter
		extrn __imp_NSSUTIL_ArgParseSlotFlags:dword
					; DATA XREF: NSSUTIL_ArgParseSlotFlagsr
		extrn __imp_NSSUTIL_ArgParseSlotInfo:dword
					; DATA XREF: NSSUTIL_ArgParseSlotInfor
		extrn PR_Free:dword	; CODE XREF: sub_10007703+85p
					; sub_1000E250+2Ep
					; DATA XREF: ...
		extrn __imp_NSSUTIL_ArgParseModuleSpec:dword
					; DATA XREF: NSSUTIL_ArgParseModuleSpecr
		extrn __imp_NSSUTIL_MkModuleSpec:dword ; DATA XREF: NSSUTIL_MkModuleSpecr
		extrn __imp_NSSUTIL_ArgParseCipherFlags:dword
					; DATA XREF: NSSUTIL_ArgParseCipherFlagsr
		extrn __imp_NSSUTIL_MkNSSString:dword ;	DATA XREF: NSSUTIL_MkNSSStringr
		extrn PR_LoadLibraryWithFlags:dword ; CODE XREF: sub_1000E1A0+84p
					; sub_1000E250+5Bp
					; DATA XREF: ...
		extrn PR_FindFunctionSymbol:dword ; CODE XREF: .text:1000E135p
					; DATA XREF: .text:1000E135r
		extrn PR_GetLibraryFilePathname:dword ;	CODE XREF: sub_1000E250+11p
					; DATA XREF: sub_1000E250+11r
		extrn PR_CallOnce:dword	; CODE XREF: sub_1000E000+13p
					; sub_1000E040+13p ...
		extrn PR_GetDirectorySeparator:dword ; CODE XREF: sub_1000E1A0+7p
					; DATA XREF: sub_1000E1A0+7r
		extrn PR_LoadLibrary:dword ; CODE XREF:	sub_10007A75+4Ap
					; DATA XREF: sub_10007A75+4Ar
		extrn __imp_SECITEM_ItemsAreEqual_Util:dword
					; DATA XREF: SECITEM_ItemsAreEqual_Utilr
		extrn __imp_PORT_Realloc_Util:dword ; DATA XREF: PORT_Realloc_Utilr
		extrn __imp_DER_SetUInteger:dword ; DATA XREF: DER_SetUIntegerr
		extrn PR_htonl:dword	; CODE XREF: sub_10006254+D4p
					; DATA XREF: sub_10006254+D4r
		extrn __imp_NSS_Get_SEC_OctetStringTemplate_Util:dword
					; DATA XREF: NSS_Get_SEC_OctetStringTemplate_Utilr
		extrn PR_ntohl:dword	; CODE XREF: sub_10004356+190p
					; DATA XREF: sub_10004356+190r
		extrn __imp_SECOID_GetAlgorithmTag_Util:dword
					; DATA XREF: SECOID_GetAlgorithmTag_Utilr
		extrn __imp_SECOID_SetAlgorithmID_Util:dword
					; DATA XREF: SECOID_SetAlgorithmID_Utilr
		extrn __imp_SECOID_FindOIDByTag_Util:dword
					; DATA XREF: SECOID_FindOIDByTag_Utilr
		extrn __imp_SECOID_FindOIDTag_Util:dword
					; DATA XREF: SECOID_FindOIDTag_Utilr
		extrn __imp_SEC_ASN1EncodeInteger_Util:dword
					; DATA XREF: SEC_ASN1EncodeInteger_Utilr
		extrn __imp_SEC_ASN1EncodeItem_Util:dword
					; DATA XREF: SEC_ASN1EncodeItem_Utilr
		extrn PR_GetEnv:dword	; CODE XREF: sub_10007A75+86p
					; DATA XREF: sub_10007A75+86r
		extrn __imp_SECITEM_HashCompare:dword ;	DATA XREF: SECITEM_HashComparer
		extrn __imp_PL_HashTableDestroy:dword ;	DATA XREF: PL_HashTableDestroyr
		extrn __imp_SEC_QuickDERDecodeItem_Util:dword
					; DATA XREF: SEC_QuickDERDecodeItem_Utilr
		extrn __imp_PL_NewHashTable:dword ; DATA XREF: PL_NewHashTabler
		extrn PR_Unlock:dword	; CODE XREF: sub_100019EB+17p
					; sub_10001A0E+25p ...
		extrn PR_Lock:dword	; CODE XREF: sub_100019EB+Cp
					; sub_10001A0E+Cp ...
		extrn PR_DestroyLock:dword ; CODE XREF:	sub_10001CF8+5Ap
					; sub_100075F4+39p ...
		extrn PR_NewLock:dword	; CODE XREF: sub_10002266+39p
					; sub_100078D2+3Dp ...
		extrn __imp_NSSUTIL_MkSlotString:dword ; DATA XREF: NSSUTIL_MkSlotStringr
		extrn __imp_SECITEM_ZfreeItem_Util:dword
					; DATA XREF: SECITEM_ZfreeItem_Utilr
		extrn __imp_SECITEM_FreeItem_Util:dword	; DATA XREF: SECITEM_FreeItem_Utilr
		extrn __imp_SECITEM_DupItem_Util:dword ; DATA XREF: SECITEM_DupItem_Utilr
		extrn __imp_SECITEM_CopyItem_Util:dword	; DATA XREF: SECITEM_CopyItem_Utilr
		extrn __imp_PORT_FreeArena_Util:dword ;	DATA XREF: PORT_FreeArena_Utilr
		extrn __imp_PORT_ArenaZAlloc_Util:dword	; DATA XREF: PORT_ArenaZAlloc_Utilr
		extrn __imp_PORT_ArenaAlloc_Util:dword ; DATA XREF: PORT_ArenaAlloc_Utilr
		extrn __imp_PORT_NewArena_Util:dword ; DATA XREF: PORT_NewArena_Utilr
		extrn __imp_PORT_GetError_Util:dword ; DATA XREF: PORT_GetError_Utilr
		extrn __imp_PORT_SetError_Util:dword ; DATA XREF: PORT_SetError_Utilr
		extrn __imp_PORT_Strdup_Util:dword ; DATA XREF:	PORT_Strdup_Utilr
		extrn __imp_NSS_Get_SECOID_AlgorithmIDTemplate_Util:dword
					; DATA XREF: NSS_Get_SECOID_AlgorithmIDTemplate_Utilr
		extrn PR_smprintf_free:dword ; CODE XREF: sub_10001392+32p
					; sub_1000148D+21p ...
		extrn PR_smprintf:dword	; CODE XREF: sub_10001189+2Cp
					; sub_10007703+2Ep ...
		extrn PR_FindSymbol:dword ; CODE XREF: sub_10007A75+63p
					; sub_10007A75+70p
					; DATA XREF: ...
		extrn PR_CloseFileMap:dword ; CODE XREF: sub_10001101+1Cp
					; sub_10001392+D5p
					; DATA XREF: ...
		extrn PR_MemUnmap:dword	; CODE XREF: sub_10001101+13p
					; DATA XREF: sub_10001101+13r
		extrn PR_MemMap:dword	; CODE XREF: sub_10001392+98p
					; DATA XREF: sub_10001392+98r
		extrn PR_CreateFileMap:dword ; CODE XREF: sub_10001392+6Bp
					; DATA XREF: sub_10001392+6Br
		extrn PR_MkDir:dword	; CODE XREF: sub_10001518+44p
					; DATA XREF: sub_10001518+44r
		extrn PR_Access:dword	; CODE XREF: sub_10001518+26p
					; DATA XREF: sub_10001518+26r
		extrn PR_Delete:dword	; CODE XREF: sub_1000148D+1Ap
					; sub_10001518+A1p
					; DATA XREF: ...
		extrn PR_Write:dword	; CODE XREF: sub_10001518+7Dp
					; DATA XREF: sub_10001518+7Dr
		extrn PR_Read:dword	; CODE XREF: sub_10001000+1Dp
					; DATA XREF: sub_10001000+1Dr
		extrn PR_Close:dword	; CODE XREF: sub_10001392+A8p
					; sub_10001392+E1p ...
		extrn PR_OpenFile:dword	; CODE XREF: sub_10001392+29p
					; sub_10001518+57p
					; DATA XREF: ...
		extrn PR_GetError:dword	; CODE XREF: sub_10001392+7Ap
					; sub_10001392:loc_1000145Ap ...
		extrn PR_SetError:dword	; CODE XREF: sub_10001000+40p
					; sub_10001189+3Dp ...
		extrn __imp_NSSBase64_EncodeItem_Util:dword
					; DATA XREF: NSSBase64_EncodeItem_Utilr
		extrn __imp_PORT_Free_Util:dword ; DATA	XREF: PORT_Free_Utilr
		extrn __imp_PORT_ZAlloc_Util:dword ; DATA XREF:	PORT_ZAlloc_Utilr
		extrn PR_DestroyMonitor:dword ;	CODE XREF: sub_1000B429+35p
					; sub_1000C0CE+22p ...
		extrn __imp_PORT_Alloc_Util:dword ; DATA XREF: PORT_Alloc_Utilr


; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 10013258h
dword_10013258	dd 0			; DATA XREF: sub_1001253A+1A6o
dword_1001325C	dd 0			; DATA XREF: sub_1001253A+1A1o
dword_10013260	dd 0			; DATA XREF: sub_1001253A+187o
		dd offset _pre_c_init
		dd offset ___atonexitinit
dword_1001326C	dd 0			; DATA XREF: sub_1001253A:loc_100126BCo
; Debug	Directory entries
		dd 0			; Characteristics
		dd 5632AA43h		; TimeDateStamp: Thu Oct 29 23:22:43 2015
		dw 0			; MajorVersion
		dw 0			; MinorVersion
		dd 2			; Type:	IMAGE_DEBUG_TYPE_CODEVIEW
		dd 8Dh			; SizeOfData
		dd rva asc_10013C78	; AddressOfRawData
		dd 12E78h		; PointerToRawData
		dd 0			; Characteristics
		dd 5632AA43h		; TimeDateStamp: Thu Oct 29 23:22:43 2015
		dw 0			; MajorVersion
		dw 0			; MinorVersion
		dd 0Ch			; Type
		dd 14h			; SizeOfData
		dd rva dword_10013D08	; AddressOfRawData
		dd 12F08h		; PointerToRawData
dword_100132A8	dd 4000h, 2 dup(0)	; DATA XREF: sub_100015E5+32o
		dd 20000h, 2 dup(0)
aSS		db '%s/%s',0            ; DATA XREF: sub_10001189+27o
					; sub_10007703+29o ...
		align 4
; char a_dir[]
a_dir		db '.dir',0             ; DATA XREF: sub_1000127D+10o
		align 10h
dword_100132D0	dd 10h,	2 dup(0)	; DATA XREF: sub_10001D62+5Bo
					; sub_10001E85+4Bo
		dd 18h,	4, 3 dup(0)
		dd 2, 0Ch, 6 dup(0)
dword_10013310	dd 10h,	2 dup(0)	; DATA XREF: sub_10001D62+33o
					; sub_10001E85+7Ao
		dd 24h,	4800h, 0
		dd offset off_10013350
		align 10h
		dd 4, 18h, 6 dup(0)
off_10013350	dd offset NSS_Get_SECOID_AlgorithmIDTemplate_Util
					; DATA XREF: .rdata:10013328o
					; .rdata:10013380o
		dd 1000h, 0
		dd offset dword_10013368
		dd 2 dup(0)
dword_10013368	dd 10h,	2 dup(0)	; DATA XREF: .rdata:1001335Co
		dd 28h,	4800h, 4
		dd offset off_10013350
		align 8
		dd 4, 1Ch, 6 dup(0)
dword_100133A8	dd 0			; DATA XREF: sub_100018E0+2Co
					; sub_10007703+14o ...
aGlobalSalt	db 'global-salt',0      ; DATA XREF: sub_1000169A+Bo
					; sub_100016D9+Bo ...
aPasswordCheck	db 'password-check',0   ; DATA XREF: sub_10001FBF+67o
					; sub_100023BA+22o ...
		align 4
aVersion	db 'Version',0          ; DATA XREF: sub_10001CA5+26o
					; sub_10002996+9o ...
; char aServerKey[]
aServerKey	db 'Server-Key',0       ; DATA XREF: sub_10002BCA+73o
		align 4
aFakePasswordCh	db 'fake-password-check',0 ; DATA XREF: sub_100026D0+C0o
a1		db '1',0                ; DATA XREF: sub_100026D0+D7o
					; sub_100079F7:loc_10007A1Eo
		align 4
aKey		db 'key',0              ; DATA XREF: sub_100024FC+3Fo
					; sub_100029DF+20o ...
; char aPassword[]
aPassword	db 'password',0         ; DATA XREF: sub_10001AD2:loc_10001B1Ao
					; sub_10001B87:loc_10001BCFo
		align 4
dword_10013404	dd 0			; DATA XREF: sub_100049D4+33r
		dd 3, 2, 4, 0CE534353h,	0CE534351h, 0CE534352h,	1, 0
		dd offset byte_10015000
		dd 1, 0
		dd offset byte_10015028
		dd 1, 4	dup(0)
		dd offset byte_10015001
		dd 1, 2, 2Ch, 6	dup(0)
; char aNss_use_decode[]
aNss_use_decode	db 'NSS_USE_DECODED_CKA_EC_POINT',0 ; DATA XREF: sub_10003C43:loc_10003D02o
		align 4
aHeaderNss3_19_	db '$Header: NSS 3.19.4 Basic ECC  Oct 29 2015 16:22:43 $',0
		align 4
a@Nss3_19_4Basi	db '@(#)NSS 3.19.4 Basic ECC  Oct 29 2015 16:22:43',0
		align 4
a8		db '8',0                ; DATA XREF: .text:loc_1000785Ao
		align 10h
a7		db '7',0                ; DATA XREF: .text:loc_10007861o
		align 4
a6		db '6',0                ; DATA XREF: .text:loc_10007868o
		align 4
a5		db '5',0                ; DATA XREF: .text:loc_1000786Fo
		align 4
aScertS_db	db '%scert%s.db',0      ; DATA XREF: .text:10007879o
a4		db '4',0                ; DATA XREF: sub_100079F7:loc_10007A10o
		align 4
a3		db '3',0                ; DATA XREF: sub_100079F7:loc_10007A17o
		align 10h
aSkeyS_db	db '%skey%s.db',0       ; DATA XREF: sub_100079F7+31o
		align 4
; char aMultiaccess[]
aMultiaccess	db 'multiaccess:',0     ; DATA XREF: sub_100076AA+7o
		align 4
aRdb_dll	db 'rdb.dll',0          ; DATA XREF: sub_10007A75:loc_10007ABAo
aRdbstatus	db 'rdbstatus',0        ; DATA XREF: sub_10007A75+5Do
		align 10h
aRdbopen	db 'rdbopen',0          ; DATA XREF: sub_10007A75+65o
aNss_disable_un	db 'NSS_DISABLE_UNLOAD',0 ; DATA XREF: sub_10007A75+81o
		align 10h
off_10013570	dd offset NSS_Get_SECOID_AlgorithmIDTemplate_Util
					; DATA XREF: .rdata:10013590o
		align 8
dword_10013578	dd 10h,	2 dup(0)	; DATA XREF: sub_10008489+7Bo
		dd 28h,	4800h, 4
		dd offset off_10013570
		align 8
		dd 3, 1Ch, 6 dup(0)
dword_100135B8	dd 10h,	2 dup(0)	; DATA XREF: sub_10008489+181o
		dd 98h,	2, 0Ch,	2 dup(0)
		dd 2, 18h, 6 dup(0)
dword_100135F8	dd 2, 30h, 6 dup(0)	; DATA XREF: sub_10008489+165o
dword_10013618	dd 2, 24h, 6 dup(0)	; DATA XREF: sub_10008489+143o
dword_10013638	dd 10h,	2 dup(0)	; DATA XREF: sub_10002C73+250o
					; sub_10002FBF+127o
		dd 28h,	2, 4, 2	dup(0)
		dd 2, 10h, 2 dup(0)
		dd 2, 1Ch, 6 dup(0)
dword_10013688	dd 10h,	2 dup(0)	; DATA XREF: sub_10002C73+28Ao
					; sub_10002FBF+149o
		dd 0B0h, 2, 0Ch, 2 dup(0)
		dd 2, 18h, 2 dup(0)
		dd 2, 24h, 2 dup(0)
		dd 2, 30h, 2 dup(0)
		dd 2, 3Ch, 2 dup(0)
		dd 2, 48h, 2 dup(0)
		dd 2, 54h, 2 dup(0)
		dd 2, 60h, 2 dup(0)
		dd 2, 6Ch, 6 dup(0)
dword_10013738	dd 10h,	2 dup(0)	; DATA XREF: sub_10002C73+2A4o
		dd 0B0h, 2, 0Ch, 2 dup(0)
		dd 400h, 18h, 2	dup(0)
		dd 2, 24h, 2 dup(0)
		dd 2, 30h, 2 dup(0)
		dd 2, 3Ch, 2 dup(0)
		dd 2, 48h, 2 dup(0)
		dd 2, 54h, 2 dup(0)
		dd 2, 60h, 2 dup(0)
		dd 2, 6Ch, 6 dup(0)
dword_100137E8	dd 10h,	2 dup(0)	; DATA XREF: sub_10002C73+20Fo
					; sub_10002FBF+105o
		dd 0B0h, 2, 30h, 2 dup(0)
		dd 2, 3Ch, 6 dup(0)
dword_10013828	dd 10h,	2 dup(0)	; DATA XREF: sub_10002C73+1CDo
					; sub_10002FBF+DAo
		dd 0B0h, 2, 24h, 2 dup(0)
		dd 2, 30h, 2 dup(0)
		dd 2, 18h, 2 dup(0)
		dd 2, 0Ch, 6 dup(0)
		dd 100000h, 4, 0
		dd 84h,	6, 78h,	0
		dd 1, 4	dup(0)
dword_100138B8	dd 10h,	2 dup(0)	; DATA XREF: sub_10002C73+12Do
					; sub_10002FBF+9Fo
		dd 0B0h, 2, 0A4h, 2 dup(0)
		dd 4, 98h, 2 dup(0)
		dd 43A0h, 80h
		dd offset off_10013980
		align 8
		dd 43A1h, 8Ch
		dd offset off_1001397C
		dd 5 dup(0)
dword_10013918	dd 10h,	2 dup(0)	; DATA XREF: sub_10002C73+AAo
					; sub_10002FBF:loc_10003139o
		dd 38h,	2, 4, 2	dup(0)
		dd 4800h, 10h
		dd offset off_10013984
		align 8
		dd 4, 28h, 2 dup(0)
		dd 1A0h, 34h
		dd offset dword_100139C8
		dd 5 dup(0)
off_10013978	dd offset NSS_Get_SEC_AnyTemplate_Util ; DATA XREF: .rdata:100139B0o
off_1001397C	dd offset NSS_Get_SEC_BitStringTemplate_Util ; DATA XREF: .rdata:10013900o
off_10013980	dd offset NSS_Get_SEC_ObjectIDTemplate_Util ; DATA XREF: .rdata:100138F0o
off_10013984	dd offset NSS_Get_SECOID_AlgorithmIDTemplate_Util
					; DATA XREF: .rdata:10013940o
dword_10013988	dd 10h,	2 dup(0)	; DATA XREF: .rdata:100139D0o
		dd 10h,	6, 3 dup(0)
		dd 6011h, 0Ch
		dd offset off_10013978
		dd 5 dup(0)
dword_100139C8	dd 2011h, 0		; DATA XREF: .rdata:10013960o
		dd offset dword_10013988
		align 8
; char aServerCert[]
aServerCert	db 'Server-Cert',0      ; DATA XREF: sub_10009C4D+F7o
					; sub_1000D12E+28o
aCert		db 'cert',0             ; DATA XREF: sub_1000C81F+34o
					; sub_1000C81F+CDo ...
		align 4
aName		db 'name',0             ; DATA XREF: sub_1000DE52+5o
		align 4
aLibrary	db 'library',0          ; DATA XREF: sub_1000DE52+1Bo
aSlotparams	db 'slotParams',0       ; DATA XREF: sub_1000D9F0+9Bo
		align 4
aInternal	db 'internal',0         ; DATA XREF: sub_1000D9F0+125o
		align 4
aFlags		db 'flags',0            ; DATA XREF: sub_1000D9F0+11Co
		align 4
aFips		db 'FIPS',0             ; DATA XREF: sub_1000D9F0+13Co
		align 4
aIsmoduledb	db 'isModuleDB',0       ; DATA XREF: sub_1000D9F0+153o
		align 10h
aIsmoduledbonly	db 'isModuleDBOnly',0   ; DATA XREF: sub_1000D9F0+16Ao
		align 10h
aCritical	db 'critical',0         ; DATA XREF: sub_1000D9F0+181o
		align 4
aTrustorder	db 'trustOrder',0       ; DATA XREF: sub_1000D9F0+19Co
		align 4
aCipherorder	db 'cipherOrder',0      ; DATA XREF: sub_1000D9F0+1CAo
aCiphers	db 'ciphers',0          ; DATA XREF: sub_1000D9F0+1F1o
		align 10h
aSlotflagsRsaDs	db 'slotFlags=[RSA,DSA,DH,RC2,RC4,DES,RANDOM,SHA1,MD5,MD2,SSL,TLS,AES'
					; DATA XREF: legacy_ReadSecmodDB+FAo
					; sub_1000D465+498o
		db ',Camellia,SEED,SHA256,SHA512]',0
		align 10h
aSlotflags	db 'slotFlags',0        ; DATA XREF: sub_1000D465+49Do
		align 4
; char a_db[]
a_db		db '.db',0              ; DATA XREF: sub_1000DE98+37o
aLibraryNameNss	db 'library= name="NSS Internal PKCS #11 Module" parameters=%s NSS="F'
					; DATA XREF: legacy_ReadSecmodDB+100o
		db 'lags=internal,critical trustOrder=75 cipherOrder=100 slotParams=('
		db '1={%s askpw=any timeout=30})"',0
aSoftokn3_dll	db 'softokn3.dll',0     ; DATA XREF: .data:off_10015004o
		align 10h
aFreebl3_dll	db 'freebl3.dll',0      ; DATA XREF: .data:off_10015008o
aFreebl_getvect	db 'FREEBL_GetVector',0 ; DATA XREF: .text:1000E12Fo
		align 10h
		dd 3 dup(0)
aSniglet	db '%$sniglet^&',0      ; DATA XREF: sub_1000E410+205o
					; sub_1000E7E0+46o
a_hashxxxxxx	db '/_hashXXXXXX',0     ; DATA XREF: sub_10010C70+A5o
					; sub_10010C70:loc_10010D1Eo
		align 4
aHashOutOfOverf	db 'HASH: Out of overflow pages.  Increase page size',0Ah,0
					; DATA XREF: sub_10010DC0+231o
		align 4
; char aTmp[]
aTmp		db 'TMP',0              ; DATA XREF: sub_10010C70+23o
; char aTmpdir[]
aTmpdir		db 'TMPDIR',0           ; DATA XREF: sub_10010C70+38o
		align 4
; char aTemp[]
aTemp		db 'TEMP',0             ; DATA XREF: sub_10010C70+48o
		align 10h
a_		db '.',0                ; DATA XREF: sub_10010C70+58o
		align 4
dword_10013C24	dd 0			; DATA XREF: ___DllMainCRTStartup:loc_10012792r
					; ___DllMainCRTStartup+A8r ...
off_10013C28	dd offset dword_10015088 ; DATA	XREF: ___report_gsfailure+EDo
		dd offset dword_100150D8
__load_config_used dd 48h		; Size
		dd 0			; Time stamp
		dw 2 dup(0)		; Version: 0.0
		dd 0			; GlobalFlagsClear
		dd 0			; GlobalFlagsSet
		dd 0			; CriticalSectionDefaultTimeout
		dd 0			; DeCommitFreeBlockThreshold
		dd 0			; DeCommitTotalFreeThreshold
		dd 0			; LockPrefixTable
		dd 0			; MaximumAllocationSize
		dd 0			; VirtualMemoryThreshold
		dd 0			; ProcessAffinityMask
		dd 0			; ProcessHeapFlags
		dw 0			; CSDVersion
		dw 0			; Reserved1
		dd 0			; EditList
		dd offset ___security_cookie ; SecurityCookie
		dd offset ___safe_se_handler_table ; SEHandlerTable
		dd 1			; SEHandlerCount
; Debug	information (IMAGE_DEBUG_TYPE_CODEVIEW)
asc_10013C78	db 'RSDS'               ; DATA XREF: .rdata:10013284o
					; CV signature
		dd 5164737Ah		; Data1	; GUID
		dw 6B9Dh		; Data2
		dw 45E9h		; Data3
		db 0BBh, 0F1h, 9Ah, 2Bh, 75h, 0B6h, 0FDh, 6Bh; Data4
		dd 1			; Age
		db 'c:\builds\moz2_slave\rel-m-rel-w32_bld-000000000000\build\obj-fir' ; PdbFileName
		db 'efox\security\nss\lib\softoken\legacydb\nssdbm3.pdb',0
		align 4
; Debug	information (type 12)
dword_10013D08	dd 0			; DATA XREF: .rdata:100132A0o
		dd 2 dup(23h), 3 dup(0)
___safe_se_handler_table dd rva	__except_handler4 ; DATA XREF: .rdata:10013C70o
		align 8
dword_10013D28	dd 2 dup(0)		; DATA XREF: sub_10012CC9+2o
					; sub_10012CC9+7o
dword_10013D30	dd 2 dup(0)		; DATA XREF: sub_10012CE9+2o
					; sub_10012CE9+7o
stru_10013D38	dd 0FFFFFFFEh		; GSCookieOffset
					; DATA XREF: ___DllMainCRTStartup+2o
		dd 0			; GSCookieXOROffset ; SEH scope	table for function 10012754
		dd 0FFFFFFD0h		; EHCookieOffset
		dd 0			; EHCookieXOROffset
		dd 0FFFFFFFEh		; ScopeRecord.EnclosingLevel
		dd 0			; ScopeRecord.FilterFunc
		dd offset $LN18		; ScopeRecord.HandlerFunc
		dd 0			; ScopeRecord.EnclosingLevel
		dd offset $LN22		; ScopeRecord.FilterFunc
		dd offset $LN23		; ScopeRecord.HandlerFunc
stru_10013D60	dd 0FFFFFFFEh		; GSCookieOffset
					; DATA XREF: __IsNonwritableInCurrentImage+5o
		dd 0			; GSCookieXOROffset ; SEH scope	table for function 10012A20
		dd 0FFFFFFD8h		; EHCookieOffset
		dd 0			; EHCookieXOROffset
		dd 0FFFFFFFEh		; ScopeRecord.EnclosingLevel
		dd offset loc_10012AA9	; ScopeRecord.FilterFunc
		dd offset loc_10012ABC	; ScopeRecord.HandlerFunc
		align 10h
stru_10013D80	dd 0FFFFFFFEh		; GSCookieOffset ; DATA	XREF: sub_10012B4D+2o
		dd 0			; GSCookieXOROffset ; SEH scope	table for function 10012B4D
		dd 0FFFFFFCCh		; EHCookieOffset
		dd 0			; EHCookieXOROffset
		dd 0FFFFFFFEh		; ScopeRecord.EnclosingLevel
		dd 0			; ScopeRecord.FilterFunc
		dd offset loc_10012BEA	; ScopeRecord.HandlerFunc
		align 10h
;
; Export directory for nssdbm3.dll
;
		dd 0			; Characteristics
		dd 5632AA43h		; TimeDateStamp: Thu Oct 29 23:22:43 2015
		dw 0			; MajorVersion
		dw 0			; MinorVersion
		dd rva aNssdbm3_dll	; Name
		dd 1			; Base
		dd 7			; NumberOfFunctions
		dd 7			; NumberOfNames
		dd rva off_10013DC8	; AddressOfFunctions
		dd rva off_10013DE4	; AddressOfNames
		dd rva word_10013E00	; AddressOfNameOrdinals
;
; Export Address Table for nssdbm3.dll
;
off_10013DC8	dd rva legacy_AddSecmodDB, rva legacy_DeleteSecmodDB, rva legacy_Open
					; DATA XREF: .rdata:10013DBCo
		dd rva legacy_ReadSecmodDB, rva	legacy_ReleaseSecmodDBData
		dd rva legacy_SetCryptFunctions, rva legacy_Shutdown
;
; Export Names Table for nssdbm3.dll
;
off_10013DE4	dd rva aLegacy_addsecm,	rva aLegacy_deletes, rva aLegacy_open
					; DATA XREF: .rdata:10013DC0o
		dd rva aLegacy_readsec,	rva aLegacy_release, rva aLegacy_setcryp ; "legacy_AddSecmodDB"
		dd rva aLegacy_shutdow
;
; Export Ordinals Table	for nssdbm3.dll
;
word_10013E00	dw 0, 1, 2, 3, 4, 5, 6	; DATA XREF: .rdata:10013DC4o
aNssdbm3_dll	db 'nssdbm3.dll',0      ; DATA XREF: .rdata:10013DACo
aLegacy_addsecm	db 'legacy_AddSecmodDB',0 ; DATA XREF: .rdata:off_10013DE4o
aLegacy_deletes	db 'legacy_DeleteSecmodDB',0 ; DATA XREF: .rdata:off_10013DE4o
aLegacy_open	db 'legacy_Open',0      ; DATA XREF: .rdata:off_10013DE4o
aLegacy_readsec	db 'legacy_ReadSecmodDB',0 ; DATA XREF: .rdata:off_10013DE4o
aLegacy_release	db 'legacy_ReleaseSecmodDBData',0 ; DATA XREF: .rdata:off_10013DE4o
aLegacy_setcryp	db 'legacy_SetCryptFunctions',0 ; DATA XREF: .rdata:off_10013DE4o
aLegacy_shutdow	db 'legacy_Shutdown',0  ; DATA XREF: .rdata:off_10013DE4o
		align 4
__IMPORT_DESCRIPTOR_nss3 dd rva	off_10013FEC ; Import Name Table
		dd 0			; Time stamp
		dd 0			; Forwarder Chain
		dd rva aNss3_dll	; DLL Name
		dd rva __imp_SECOID_Init ; Import Address Table
__IMPORT_DESCRIPTOR_MSVCR120 dd	rva off_10013F38 ; Import Name Table
		dd 0			; Time stamp
		dd 0			; Forwarder Chain
		dd rva aMsvcr120_dll	; DLL Name
		dd rva _close		; Import Address Table
__IMPORT_DESCRIPTOR_mozglue dd rva off_10013FD4	; Import Name Table
		dd 0			; Time stamp
		dd 0			; Forwarder Chain
		dd rva aMozglue_dll	; DLL Name
		dd rva strdup		; Import Address Table
__IMPORT_DESCRIPTOR_KERNEL32 dd	rva off_10013F0C ; Import Name Table
		dd 0			; Time stamp
		dd 0			; Forwarder Chain
		dd rva aKernel32_dll	; DLL Name
		dd rva GetSystemTimeAsFileTime ; Import	Address	Table
		dd 5 dup(0)
;
; Import names for KERNEL32.dll
;
off_10013F0C	dd rva word_10014BE0	; DATA XREF: .rdata:__IMPORT_DESCRIPTOR_KERNEL32o
		dd rva word_10014B4A
		dd rva word_10014B5A
		dd rva word_10014B6A
		dd rva word_10014B7E
		dd rva word_10014B9A
		dd rva word_10014BFA
		dd rva word_10014B36
		dd rva word_10014BCA
		dd rva word_10014BB4
		dd 0
;
; Import names for MSVCR120.dll
;
off_10013F38	dd rva word_10014C2E	; DATA XREF: .rdata:__IMPORT_DESCRIPTOR_MSVCR120o
		dd rva word_10014C38
		dd rva word_10014C42
		dd rva word_10014C4A
		dd rva word_10014C5C
		dd rva word_10014C24
		dd rva word_10014B1C
		dd rva word_10014AF8
		dd rva word_10014AEE
		dd rva word_10014AE0
		dd rva word_10014AD2
		dd rva word_10014AC8
		dd rva word_10014AC0
		dd rva word_10014AA8
		dd rva word_10014A8E
		dd rva word_10014A78
		dd rva word_10014A5E
		dd rva word_10014A52
		dd rva word_10014A44
		dd rva word_10014A2E
		dd rva word_10014A1C
		dd rva word_10014A04
		dd rva word_100149F2
		dd rva word_100149DE
		dd rva word_100149BA
		dd rva word_100149AC
		dd rva word_100149A2
		dd rva word_10014998
		dd rva word_1001498E
		dd rva word_10014984
		dd rva word_1001497A
		dd rva word_10014970
		dd rva word_10014966
		dd rva word_1001495C
		dd rva word_10014952
		dd rva word_10014948
		dd rva word_1001493E
		dd rva word_10014C52
		dd 0
;
; Import names for mozglue.dll
;
off_10013FD4	dd rva word_100149E8	; DATA XREF: .rdata:__IMPORT_DESCRIPTOR_mozglueo
		dd rva word_100149D4
		dd rva word_100149CC
		dd rva word_100149C2
		dd rva word_10014A3C
		dd 0
;
; Import names for nss3.dll
;
off_10013FEC	dd rva word_100145BE	; DATA XREF: .rdata:__IMPORT_DESCRIPTOR_nss3o
		dd rva word_100145CC
		dd rva word_100145DE
		dd rva word_100145F0
		dd rva word_10014606
		dd rva word_1001461C
		dd rva word_1001463C
		dd rva word_10014656
		dd rva word_10014660
		dd rva word_1001467C
		dd rva word_1001469C
		dd rva word_100146C2
		dd rva word_100146E6
		dd rva word_100146FC
		dd rva word_10014716
		dd rva word_1001472E
		dd rva word_10014746
		dd rva word_10014762
		dd rva word_10014546
		dd rva word_10014786
		dd rva word_10014798
		dd rva word_100147AA
		dd rva word_100147C6
		dd rva word_100147DC
		dd rva word_100147F2
		dd rva word_10014802
		dd rva word_1001481E
		dd rva word_100145B4
		dd rva word_10014852
		dd rva word_10014870
		dd rva word_10014888
		dd rva word_100148A6
		dd rva word_100148BC
		dd rva word_100148D6
		dd rva word_100148EE
		dd rva word_1001490A
		dd rva word_10014918
		dd rva word_10014534
		dd rva word_10014516
		dd rva word_10014502
		dd rva word_100144F0
		dd rva word_100144E4
		dd rva word_100144BC
		dd rva word_100144B0
		dd rva word_10014492
		dd rva word_10014474
		dd rva word_10014458
		dd rva word_1001443E
		dd rva word_10014420
		dd rva word_10014406
		dd rva word_100145A8
		dd rva word_10014592
		dd rva word_1001457C
		dd rva word_100143E8
		dd rva word_1001456A
		dd rva word_100143DC
		dd rva word_100143D2
		dd rva word_100143C0
		dd rva word_100143B2
		dd rva word_1001483A
		dd rva word_10014398
		dd rva word_10014380
		dd rva word_10014368
		dd rva word_10014350
		dd rva word_1001433A
		dd rva word_10014322
		dd rva word_1001430A
		dd rva word_100142F4
		dd rva word_100142DE
		dd rva word_100142C8
		dd rva word_100142B4
		dd rva word_1001428A
		dd rva word_10014276
		dd rva word_10014268
		dd rva word_1001455A
		dd rva word_10014256
		dd rva word_10014248
		dd rva word_1001423C
		dd rva word_10014228
		dd rva word_1001421C
		dd rva word_10014210
		dd rva word_10014204
		dd rva word_100141F8
		dd rva word_100141EE
		dd rva word_100141E2
		dd rva word_100141D4
		dd rva word_100141C6
		dd rva word_100141B8
		dd rva word_1001419C
		dd rva word_1001418A
		dd rva word_10014176
		dd rva word_10014772
		dd rva word_10014164
		dd 0
word_10014164	dw 1EEh			; DATA XREF: .rdata:1001415Co
		db 'PORT_Alloc_Util',0
word_10014176	dw 20Dh			; DATA XREF: .rdata:10014154o
		db 'PORT_ZAlloc_Util',0
		align 2
word_1001418A	dw 1FCh			; DATA XREF: .rdata:10014150o
		db 'PORT_Free_Util',0
		align 4
word_1001419C	dw 0AEh			; DATA XREF: .rdata:1001414Co
		db 'NSSBase64_EncodeItem_Util',0
word_100141B8	dw 349h			; DATA XREF: .rdata:10014148o
		db 'PR_SetError',0
word_100141C6	dw 2A1h			; DATA XREF: .rdata:10014144o
		db 'PR_GetError',0
word_100141D4	dw 316h			; DATA XREF: .rdata:10014140o
		db 'PR_OpenFile',0
word_100141E2	dw 23Ch			; DATA XREF: .rdata:1001413Co
		db 'PR_Close',0
		align 2
word_100141EE	dw 330h			; DATA XREF: .rdata:10014138o
		db 'PR_Read',0
word_100141F8	dw 37Fh			; DATA XREF: .rdata:10014134o
		db 'PR_Write',0
		align 4
word_10014204	dw 256h			; DATA XREF: .rdata:10014130o
		db 'PR_Delete',0
word_10014210	dw 218h			; DATA XREF: .rdata:1001412Co
		db 'PR_Access',0
word_1001421C	dw 2FEh			; DATA XREF: .rdata:10014128o
		db 'PR_MkDir',0
		align 4
word_10014228	dw 246h			; DATA XREF: .rdata:10014124o
		db 'PR_CreateFileMap',0
		align 4
word_1001423C	dw 2FAh			; DATA XREF: .rdata:10014120o
		db 'PR_MemMap',0
word_10014248	dw 2FBh			; DATA XREF: .rdata:1001411Co
		db 'PR_MemUnmap',0
word_10014256	dw 23Eh			; DATA XREF: .rdata:10014118o
		db 'PR_CloseFileMap',0
word_10014268	dw 38Bh			; DATA XREF: .rdata:10014110o
		db 'PR_smprintf',0
word_10014276	dw 38Ch			; DATA XREF: .rdata:1001410Co
		db 'PR_smprintf_free',0
		align 2
word_1001428A	dw 101h			; DATA XREF: .rdata:10014108o
		db 'NSS_Get_SECOID_AlgorithmIDTemplate_Util',0
word_100142B4	dw 208h			; DATA XREF: .rdata:10014104o
		db 'PORT_Strdup_Util',0
		align 4
word_100142C8	dw 204h			; DATA XREF: .rdata:10014100o
		db 'PORT_SetError_Util',0
		align 2
word_100142DE	dw 1FEh			; DATA XREF: .rdata:100140FCo
		db 'PORT_GetError_Util',0
		align 4
word_100142F4	dw 200h			; DATA XREF: .rdata:100140F8o
		db 'PORT_NewArena_Util',0
		align 2
word_1001430A	dw 1F0h			; DATA XREF: .rdata:100140F4o
		db 'PORT_ArenaAlloc_Util',0
		align 2
word_10014322	dw 1F8h			; DATA XREF: .rdata:100140F0o
		db 'PORT_ArenaZAlloc_Util',0
word_1001433A	dw 1FBh			; DATA XREF: .rdata:100140ECo
		db 'PORT_FreeArena_Util',0
word_10014350	dw 39Fh			; DATA XREF: .rdata:100140E8o
		db 'SECITEM_CopyItem_Util',0
word_10014368	dw 3A2h			; DATA XREF: .rdata:100140E4o
		db 'SECITEM_DupItem_Util',0
		align 10h
word_10014380	dw 3A4h			; DATA XREF: .rdata:100140E0o
		db 'SECITEM_FreeItem_Util',0
word_10014398	dw 3AAh			; DATA XREF: .rdata:100140DCo
		db 'SECITEM_ZfreeItem_Util',0
		align 2
word_100143B2	dw 301h			; DATA XREF: .rdata:100140D4o
		db 'PR_NewLock',0
		align 10h
word_100143C0	dw 25Ch			; DATA XREF: .rdata:100140D0o
		db 'PR_DestroyLock',0
		align 2
word_100143D2	dw 2F3h			; DATA XREF: .rdata:100140CCo
		db 'PR_Lock',0
word_100143DC	dw 374h			; DATA XREF: .rdata:100140C8o
		db 'PR_Unlock',0
word_100143E8	dw 431h			; DATA XREF: .rdata:100140C0o
		db 'SEC_QuickDERDecodeItem_Util',0
word_10014406	dw 3F8h			; DATA XREF: .rdata:100140B0o
		db 'SEC_ASN1EncodeItem_Util',0
word_10014420	dw 3F6h			; DATA XREF: .rdata:100140ACo
		db 'SEC_ASN1EncodeInteger_Util',0
		align 2
word_1001443E	dw 3E9h			; DATA XREF: .rdata:100140A8o
		db 'SECOID_FindOIDTag_Util',0
		align 4
word_10014458	dw 3E6h			; DATA XREF: .rdata:100140A4o
		db 'SECOID_FindOIDByTag_Util',0
		align 4
word_10014474	dw 3EFh			; DATA XREF: .rdata:100140A0o
		db 'SECOID_SetAlgorithmID_Util',0
		align 2
word_10014492	dw 3ECh			; DATA XREF: .rdata:1001409Co
		db 'SECOID_GetAlgorithmTag_Util',0
word_100144B0	dw 388h			; DATA XREF: .rdata:10014098o
		db 'PR_ntohl',0
		align 4
word_100144BC	dw 10Fh			; DATA XREF: .rdata:10014094o
		db 'NSS_Get_SEC_OctetStringTemplate_Util',0
		align 4
word_100144E4	dw 385h			; DATA XREF: .rdata:10014090o
		db 'PR_htonl',0
		align 10h
word_100144F0	dw 98h			; DATA XREF: .rdata:1001408Co
		db 'DER_SetUInteger',0
word_10014502	dw 201h			; DATA XREF: .rdata:10014088o
		db 'PORT_Realloc_Util',0
word_10014516	dw 3A7h			; DATA XREF: .rdata:10014084o
		db 'SECITEM_ItemsAreEqual_Util',0
		align 4
word_10014534	dw 2EFh			; DATA XREF: .rdata:10014080o
		db 'PR_LoadLibrary',0
		align 2
word_10014546	dw 373h			; DATA XREF: .rdata:10014034o
		db 'PR_UnloadLibrary',0
		align 2
word_1001455A	dw 28Bh			; DATA XREF: .rdata:10014114o
		db 'PR_FindSymbol',0
word_1001456A	dw 1CAh			; DATA XREF: .rdata:100140C4o
		db 'PL_NewHashTable',0
word_1001457C	dw 1BFh			; DATA XREF: .rdata:100140BCo
		db 'PL_HashTableDestroy',0
word_10014592	dw 3A5h			; DATA XREF: .rdata:100140B8o
		db 'SECITEM_HashCompare',0
word_100145A8	dw 2A0h			; DATA XREF: .rdata:100140B4o
		db 'PR_GetEnv',0
word_100145B4	dw 290h			; DATA XREF: .rdata:10014058o
		db 'PR_Free',0
word_100145BE	dw 3EDh			; DATA XREF: .rdata:off_10013FECo
		db 'SECOID_Init',0
word_100145CC	dw 3F0h			; DATA XREF: .rdata:10013FF0o
		db 'SECOID_Shutdown',0
word_100145DE	dw 1BEh			; DATA XREF: .rdata:10013FF4o
		db 'PL_HashTableAdd',0
word_100145F0	dw 1C8h			; DATA XREF: .rdata:10013FF8o
		db 'PL_HashTableRemove',0
		align 2
word_10014606	dw 1C2h			; DATA XREF: .rdata:10013FFCo
		db 'PL_HashTableLookup',0
		align 4
word_1001461C	dw 1C1h			; DATA XREF: .rdata:10014000o
		db 'PL_HashTableEnumerateEntries',0
		align 4
word_1001463C	dw 39Ah			; DATA XREF: .rdata:10014004o
		db 'SECITEM_AllocItem_Util',0
		align 2
word_10014656	dw 312h			; DATA XREF: .rdata:10014008o
		db 'PR_Now',0
		align 10h
word_10014660	dw 8Fh			; DATA XREF: .rdata:1001400Co
		db 'DER_DecodeTimeChoice_Util',0
word_1001467C	dw 102h			; DATA XREF: .rdata:10014010o
		db 'NSS_Get_SEC_AnyTemplate_Util',0
		align 4
word_1001469C	dw 105h			; DATA XREF: .rdata:10014014o
		db 'NSS_Get_SEC_BitStringTemplate_Util',0
		align 2
word_100146C2	dw 10Dh			; DATA XREF: .rdata:10014018o
		db 'NSS_Get_SEC_ObjectIDTemplate_Util',0
word_100146E6	dw 1F2h			; DATA XREF: .rdata:1001401Co
		db 'PORT_ArenaMark_Util',0
word_100146FC	dw 1F3h			; DATA XREF: .rdata:10014020o
		db 'PORT_ArenaRelease_Util',0
		align 2
word_10014716	dw 1F6h			; DATA XREF: .rdata:10014024o
		db 'PORT_ArenaUnmark_Util',0
word_1001472E	dw 1F5h			; DATA XREF: .rdata:10014028o
		db 'PORT_ArenaStrdup_Util',0
word_10014746	dw 39Dh			; DATA XREF: .rdata:1001402Co
		db 'SECITEM_CompareItem_Util',0
		align 2
word_10014762	dw 303h			; DATA XREF: .rdata:10014030o
		db 'PR_NewMonitor',0
word_10014772	dw 25Eh			; DATA XREF: .rdata:10014158o
		db 'PR_DestroyMonitor',0
word_10014786	dw 270h			; DATA XREF: .rdata:10014038o
		db 'PR_EnterMonitor',0
word_10014798	dw 27Ah			; DATA XREF: .rdata:1001403Co
		db 'PR_ExitMonitor',0
		align 2
word_100147AA	dw 0B4h			; DATA XREF: .rdata:10014040o
		db 'NSSUTIL_ArgGetParamValue',0
		align 2
word_100147C6	dw 0B5h			; DATA XREF: .rdata:10014044o
		db 'NSSUTIL_ArgHasFlag',0
		align 4
word_100147DC	dw 0BBh			; DATA XREF: .rdata:10014048o
		db 'NSSUTIL_ArgReadLong',0
word_100147F2	dw 0C3h			; DATA XREF: .rdata:1001404Co
		db 'NSSUTIL_Quote',0
word_10014802	dw 0B9h			; DATA XREF: .rdata:10014050o
		db 'NSSUTIL_ArgParseSlotFlags',0
word_1001481E	dw 0BAh			; DATA XREF: .rdata:10014054o
		db 'NSSUTIL_ArgParseSlotInfo',0
		align 2
word_1001483A	dw 0C2h			; DATA XREF: .rdata:100140D8o
		db 'NSSUTIL_MkSlotString',0
		align 2
word_10014852	dw 0B8h			; DATA XREF: .rdata:1001405Co
		db 'NSSUTIL_ArgParseModuleSpec',0
		align 10h
word_10014870	dw 0C0h			; DATA XREF: .rdata:10014060o
		db 'NSSUTIL_MkModuleSpec',0
		align 4
word_10014888	dw 0B7h			; DATA XREF: .rdata:10014064o
		db 'NSSUTIL_ArgParseCipherFlags',0
word_100148A6	dw 0C1h			; DATA XREF: .rdata:10014068o
		db 'NSSUTIL_MkNSSString',0
word_100148BC	dw 2F0h			; DATA XREF: .rdata:1001406Co
		db 'PR_LoadLibraryWithFlags',0
word_100148D6	dw 285h			; DATA XREF: .rdata:10014070o
		db 'PR_FindFunctionSymbol',0
word_100148EE	dw 2AFh			; DATA XREF: .rdata:10014074o
		db 'PR_GetLibraryFilePathname',0
word_1001490A	dw 231h			; DATA XREF: .rdata:10014078o
		db 'PR_CallOnce',0
word_10014918	dw 29Eh			; DATA XREF: .rdata:1001407Co
		db 'PR_GetDirectorySeparator',0
		align 4
aNss3_dll	db 'nss3.dll',0         ; DATA XREF: .rdata:10013EB4o
		align 2
word_1001493E	dw 6E6h			; DATA XREF: .rdata:10013FC8o
		db 'memcpy',0
		align 4
word_10014948	dw 730h			; DATA XREF: .rdata:10013FC4o
		db 'strcmp',0
		align 2
word_10014952	dw 738h			; DATA XREF: .rdata:10013FC0o
		db 'strlen',0
		align 4
word_1001495C	dw 6E5h			; DATA XREF: .rdata:10013FBCo
		db 'memcmp',0
		align 2
word_10014966	dw 693h			; DATA XREF: .rdata:10013FB8o
		db 'getenv',0
		align 10h
word_10014970	dw 73Bh			; DATA XREF: .rdata:10013FB4o
		db 'strncmp',0
word_1001497A	dw 6EAh			; DATA XREF: .rdata:10013FB0o
		db 'memset',0
		align 4
word_10014984	dw 75Ch			; DATA XREF: .rdata:10013FACo
		db 'tolower',0
word_1001498E	dw 732h			; DATA XREF: .rdata:10013FA8o
		db 'strcpy',0
		align 4
word_10014998	dw 740h			; DATA XREF: .rdata:10013FA4o
		db 'strrchr',0
word_100149A2	dw 276h			; DATA XREF: .rdata:10013FA0o
		db '_errno',0
		align 4
word_100149AC	dw 4A8h			; DATA XREF: .rdata:10013F9Co
		db '_stat64i32',0
		align 2
word_100149BA	dw 5DCh			; DATA XREF: .rdata:10013F98o
		db 'abort',0
word_100149C2	dw 67h			; DATA XREF: .rdata:10013FE0o
		db 'calloc',0
		align 4
word_100149CC	dw 68h			; DATA XREF: .rdata:10013FDCo
		db 'free',0
		align 4
word_100149D4	dw 70h			; DATA XREF: .rdata:10013FD8o
		db 'malloc',0
		align 2
word_100149DE	dw 6E8h			; DATA XREF: .rdata:10013F94o
		db 'memmove',0
word_100149E8	dw 7Ch			; DATA XREF: .rdata:off_10013FD4o
		db 'strdup',0
		align 2
word_100149F2	dw 2D9h			; DATA XREF: .rdata:10013F90o
		db '_get_osfhandle',0
		align 4
word_10014A04	dw 6A3h			; DATA XREF: .rdata:10013F8Co
		db 'isdigit',0
aMsvcr120_dll	db 'MSVCR120.dll',0     ; DATA XREF: .rdata:10013EC8o
		align 4
word_10014A1C	dw 16Fh			; DATA XREF: .rdata:10013F88o
		db '__CppXcptFilter',0
word_10014A2E	dw 217h			; DATA XREF: .rdata:10013F84o
		db '_amsg_exit',0
		align 4
word_10014A3C	dw 69h			; DATA XREF: .rdata:10013FE4o
		db 'frex',0
		align 4
word_10014A44	dw 3A5h			; DATA XREF: .rdata:10013F80o
		db '_malloc_crt',0
word_10014A52	dw 30Ch			; DATA XREF: .rdata:10013F7Co
		db '_initterm',0
word_10014A5E	dw 30Dh			; DATA XREF: .rdata:10013F78o
		db '_initterm_e',0
aMozglue_dll	db 'mozglue.dll',0      ; DATA XREF: .rdata:10013EDCo
word_10014A78	dw 250h			; DATA XREF: .rdata:10013F74o
		db '_crt_debugger_hook',0
		align 2
word_10014A8E	dw 1ACh			; DATA XREF: .rdata:10013F70o
		db '__crtUnhandledException',0
word_10014AA8	dw 1ABh			; DATA XREF: .rdata:10013F6Co
		db '__crtTerminateProcess',0
word_10014AC0	dw 394h			; DATA XREF: .rdata:10013F68o
		db '_lock',0
word_10014AC8	dw 504h			; DATA XREF: .rdata:10013F64o
		db '_unlock',0
word_10014AD2	dw 22Eh			; DATA XREF: .rdata:10013F60o
		db '_calloc_crt',0
word_10014AE0	dw 1AEh			; DATA XREF: .rdata:10013F5Co
		db '__dllonexit',0
word_10014AEE	dw 43Ah			; DATA XREF: .rdata:10013F58o
		db '_onexit',0
word_10014AF8	dw 18Ch			; DATA XREF: .rdata:10013F54o
		db '__clean_type_info_names_internal',0
		align 4
word_10014B1C	dw 27Ah			; DATA XREF: .rdata:10013F50o
		db '_except_handler4_common',0
word_10014B36	dw 192h			; DATA XREF: .rdata:10013F28o
		db 'FlushFileBuffers',0
		align 2
word_10014B4A	dw 121h			; DATA XREF: .rdata:10013F10o
		db 'EncodePointer',0
word_10014B5A	dw 0FEh			; DATA XREF: .rdata:10013F14o
		db 'DecodePointer',0
word_10014B6A	dw 367h			; DATA XREF: .rdata:10013F18o
		db 'IsDebuggerPresent',0
word_10014B7E	dw 36Dh			; DATA XREF: .rdata:10013F1Co
		db 'IsProcessorFeaturePresent',0
word_10014B9A	dw 42Dh			; DATA XREF: .rdata:10013F20o
		db 'QueryPerformanceCounter',0
word_10014BB4	dw 20Ah			; DATA XREF: .rdata:10013F30o
		db 'GetCurrentProcessId',0
word_10014BCA	dw 20Eh			; DATA XREF: .rdata:10013F2Co
		db 'GetCurrentThreadId',0
		align 10h
word_10014BE0	dw 2D6h			; DATA XREF: .rdata:off_10013F0Co
		db 'GetSystemTimeAsFileTime',0
word_10014BFA	dw 113h			; DATA XREF: .rdata:10013F24o
		db 'DisableThreadLibraryCalls',0
aKernel32_dll	db 'KERNEL32.dll',0     ; DATA XREF: .rdata:10013EF0o
		align 4
word_10014C24	dw 502h			; DATA XREF: .rdata:10013F4Co
		db '_unlink',0
word_10014C2E	dw 23Dh			; DATA XREF: .rdata:off_10013F38o
		db '_close',0
		align 4
word_10014C38	dw 39Dh			; DATA XREF: .rdata:10013F3Co
		db '_lseek',0
		align 2
word_10014C42	dw 43Bh			; DATA XREF: .rdata:10013F40o
		db '_open',0
word_10014C4A	dw 453h			; DATA XREF: .rdata:10013F44o
		db '_read',0
word_10014C52	dw 5ADh			; DATA XREF: .rdata:10013FCCo
		db '_write',0
		align 4
word_10014C5C	dw 2F0h			; DATA XREF: .rdata:10013F48o
		db '_getpid',0
		align 400h
_rdata		ends

; Section 3. (virtual address 00015000)
; Virtual size			: 000003C8 (	968.)
; Section size in file		: 00000200 (	512.)
; Offset to raw	data for section: 00014000
; Flags	C0000040: Data Readable	Writable
; Alignment	: default
; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	para public 'DATA' use32
		assume cs:_data
		;org 10015000h
byte_10015000	db 1			; DATA XREF: sub_100033E1+A4o
					; sub_1000360A+59o ...
byte_10015001	db 1, 2	dup(0)		; DATA XREF: .rdata:1001344Co
off_10015004	dd offset aSoftokn3_dll	; DATA XREF: sub_1000E250+Br
					; "softokn3.dll"
off_10015008	dd offset aFreebl3_dll	; DATA XREF: .text:1000E101r
					; "freebl3.dll"
off_1001500C	dd offset sub_10012100	; DATA XREF: sub_1000E410:loc_1000E59Cr
					; sub_1000F2B0+60r
___security_cookie dd 0BB40E64Eh	; DATA XREF: sub_100011D1+3r
					; sub_10001AD2+6r ...
dword_10015014	dd 44BF19B1h		; DATA XREF: ___report_gsfailure+E3r
					; sub_10012C0B+29w ...
		align 10h
dword_10015020	dd 0FFFFFFFFh		; DATA XREF: ___DllMainCRTStartup+1Cw
					; ___DllMainCRTStartup:$LN20w
		align 8
byte_10015028	db 0			; DATA XREF: sub_100033E1+55o
					; sub_1000360A:loc_1000366Ao ...
byte_10015029	db 3 dup(0)		; DATA XREF: sub_10006254+76o
dword_1001502C	dd 0			; DATA XREF: sub_10007A75+3r
					; sub_10007A75+77w
dword_10015030	dd 0			; DATA XREF: sub_1000745F:loc_1000746Er
					; sub_10007A75+33r ...
dword_10015034	dd 0			; DATA XREF: legacy_SetCryptFunctions+4w
					; sub_10008072r
dword_10015038	dd 0			; DATA XREF: legacy_SetCryptFunctions+Dw
					; sub_10008058r
dword_1001503C	dd 0			; DATA XREF: sub_10009FF1+CDr
					; sub_10009FF1+D4w ...
dword_10015040	dd 0			; DATA XREF: sub_10009BBF+6r
					; sub_10009BBF+18w ...
dword_10015044	dd 0			; DATA XREF: sub_1000A0E5+5Br
					; sub_1000A0E5+66w ...
dword_10015048	dd 0			; DATA XREF: sub_10009FF1+B4r
					; sub_10009FF1+C8w ...
dword_1001504C	dd 0			; DATA XREF: sub_10009BBF+12w
					; sub_1000C1BC+4Bw ...
dword_10015050	dd 0			; DATA XREF: sub_1000A0E5+35r
					; sub_1000A0E5+51w ...
dword_10015054	dd 0			; DATA XREF: sub_10009E46+13r
					; sub_10009E46+36r ...
dword_10015058	dd 0			; DATA XREF: sub_10009FF1+24r
					; sub_10009FF1+36r ...
dword_1001505C	dd 0			; DATA XREF: sub_1000C05A+Dr
					; sub_1000C05A:loc_1000C0B2r ...
dword_10015060	dd 0			; DATA XREF: sub_1000C1BCr
					; sub_1000C1BC+A4r ...
dword_10015064	dd 0			; DATA XREF: .text:1000E175w
dword_10015068	dd 0			; DATA XREF: .text:1000E16Cw
dword_1001506C	dd 0			; DATA XREF: sub_1000E000r
					; sub_1000E000:loc_1000E024r ...
dword_10015070	dd 3 dup(0)		; DATA XREF: sub_1000E000+Eo
					; sub_1000E040+Eo ...
dword_1001507C	dd 0			; DATA XREF: sub_1000E2C0r
dword_10015080	dd 0			; DATA XREF: sub_1001253A+12r
					; sub_1001253A+25w ...
		align 8
dword_10015088	dd 0			; DATA XREF: ___report_gsfailure+9Fw
					; .rdata:off_10013C28o
dword_1001508C	dd 0			; DATA XREF: ___report_gsfailure+A9w
		dd 0
dword_10015094	dd 0			; DATA XREF: ___report_gsfailure+9Aw
dword_10015098	dd 0			; DATA XREF: ___report_gsfailure+B3w
dword_1001509C	dd 0			; DATA XREF: ___report_gsfailure+C3w
		dd 0Eh dup(0)
dword_100150D8	dd 0			; DATA XREF: ___report_gsfailure+8Bw
					; .rdata:10013C2Co
		dd 22h dup(0)
word_10015164	dw 0			; DATA XREF: ___report_gsfailure+5Fw
		align 4
word_10015168	dw 0			; DATA XREF: ___report_gsfailure+58w
		align 4
word_1001516C	dw 0			; DATA XREF: ___report_gsfailure+51w
		align 10h
word_10015170	dw 0			; DATA XREF: ___report_gsfailure+4Aw
		align 4
dword_10015174	dd 0			; DATA XREF: ___report_gsfailure+36w
dword_10015178	dd 0			; DATA XREF: ___report_gsfailure+30w
dword_1001517C	dd 0			; DATA XREF: ___report_gsfailure+2Aw
dword_10015180	dd 0			; DATA XREF: ___report_gsfailure+24w
dword_10015184	dd 0			; DATA XREF: ___report_gsfailure+1Ew
dword_10015188	dd 0			; DATA XREF: ___report_gsfailure:loc_100128DDw
dword_1001518C	dd 0			; DATA XREF: ___report_gsfailure+70w
dword_10015190	dd 0			; DATA XREF: ___report_gsfailure+78w
					; ___report_gsfailure+95r
word_10015194	dw 0			; DATA XREF: ___report_gsfailure+43w
		align 4
dword_10015198	dd 0			; DATA XREF: ___report_gsfailure+67w
dword_1001519C	dd 0			; DATA XREF: ___report_gsfailure+80w
word_100151A0	dw 0			; DATA XREF: ___report_gsfailure+3Cw
		align 4
		dd 17h dup(0)
		dd 69h dup(?)
dword_100153A4	dd ?			; DATA XREF: ___raise_securityfailure+Bw
					; ___raise_securityfailure+1Dr
dword_100153A8	dd 2 dup(?)		; DATA XREF: sub_10012D16o
dword_100153B0	dd ?			; DATA XREF: legacy_Shutdown+4w
					; legacy_Shutdown+18w ...
dword_100153B4	dd ?			; DATA XREF: sub_1001253A+20o
					; sub_1001253A+112o ...
dword_100153B8	dd ?			; DATA XREF: sub_1001253A:loc_1001258Dr
					; sub_1001253A:loc_10012656w ...
; PVOID	dword_100153BC
dword_100153BC	dd ?			; DATA XREF: _pre_c_init+1Bw
					; sub_1001253A+82r ...
; PVOID	Ptr
Ptr		dd ?			; DATA XREF: _pre_c_init+16w
					; sub_1001253A:loc_100125A3r ...
dword_100153C4	dd ?			; DATA XREF: sub_1001253A:loc_100126FAr
					; sub_1001253A+1C9o ...
		align 1000h
_data		ends


		end DllEntryPoint
