;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	0090BE410BC502EBAFD8AF83CB104218
; Input	CRC32 :	07262988

; File Name   :	D:\compspace\dlls\firefox\dll\full\nssdbm3_full.dll
; Format      :	Portable executable for	80386 (PE)
; Imagebase   :	10000000
; Section 1. (virtual address 00001000)
; Virtual size			: 00011DE2 (  73186.)
; Section size in file		: 00011E00 (  73216.)
; Offset to raw	data for section: 00000400
; Flags	60300020: Text Executable Readable
; Alignment	: 4 bytes
; PDB File Name	: c:\builds\moz2_slave\rel-m-rel-w32_bld-000000000000\build\obj-firefox\security\nss\lib\softoken\legacydb\nssdbm3.pdb
; OS type	  :  MS	Windows
; Application type:  DLL 32bit

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	dword public 'CODE' use32
		assume cs:_text
		;org 10001000h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


sub_10001000	proc near		; CODE XREF: sub_10001392+89p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		push	[esp+4+arg_4]
		call	PORT_Alloc_Util
		mov	esi, eax
		pop	ecx
		test	esi, esi
		jnz	short loc_10001013
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10001013:				; CODE XREF: sub_10001000+Fj
		push	edi
		push	[esp+8+arg_4]
		push	esi
		push	[esp+10h+arg_0]
		call	ds:PR_Read
		mov	edi, eax
		add	esp, 0Ch
		cmp	edi, [esp+8+arg_4]
		jz	short loc_1000104C
		push	esi
		call	PORT_Free_Util
		pop	ecx
		test	edi, edi
		jle	short loc_10001048
		push	0
		push	0FFFFE012h
		call	ds:PR_SetError
		pop	ecx
		pop	ecx

loc_10001048:				; CODE XREF: sub_10001000+37j
		xor	eax, eax
		jmp	short loc_1000104E
; ---------------------------------------------------------------------------

loc_1000104C:				; CODE XREF: sub_10001000+2Cj
		mov	eax, esi

loc_1000104E:				; CODE XREF: sub_10001000+4Aj
		pop	edi
		pop	esi
		retn
sub_10001000	endp


; =============== S U B	R O U T	I N E =======================================


sub_10001051	proc near		; CODE XREF: sub_10001099+32p
					; sub_10001142+2Ap ...

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		cmp	dword ptr [eax+4], 26h
		mov	ecx, [eax]
		jb	short loc_1000106B
		test	ecx, ecx
		jz	short loc_1000106B
		cmp	byte ptr [ecx+1], 8
		jnz	short loc_1000106B
		xor	eax, eax
		inc	eax
		retn
; ---------------------------------------------------------------------------

loc_1000106B:				; CODE XREF: sub_10001051+Aj
					; sub_10001051+Ej ...
		xor	eax, eax
		retn
sub_10001051	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000106E	proc near		; DATA XREF: sub_100015E5+66o

arg_0		= dword	ptr  4

		push	esi
		push	edi
		mov	edi, [esp+8+arg_0]
		push	edi
		mov	esi, [edi+1Ch]
		call	sub_10001101
		push	esi
		call	dword ptr [esi+4]
		push	dword ptr [edi+24h]
		mov	esi, eax
		call	PORT_Free_Util
		push	edi
		call	PORT_Free_Util
		add	esp, 10h
		mov	eax, esi
		pop	edi
		pop	esi
		retn
sub_1000106E	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10001099	proc near		; DATA XREF: sub_100015E5+74o

var_8		= byte ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ecx
		push	esi
		mov	esi, [ebp+arg_0]
		push	edi
		push	esi
		mov	edi, [esi+1Ch]
		call	sub_10001101
		cmp	dword ptr [esi+2Ch], 0
		pop	ecx
		jnz	short loc_100010E1
		push	0
		lea	eax, [ebp+var_8]
		push	eax
		push	[ebp+arg_4]
		push	edi
		call	dword ptr [edi+0Ch]
		add	esp, 10h
		test	eax, eax
		jnz	short loc_100010E1
		lea	eax, [ebp+var_8]
		push	eax
		call	sub_10001051
		pop	ecx
		test	eax, eax
		jz	short loc_100010E1
		lea	eax, [ebp+var_8]
		push	eax
		push	esi
		call	sub_1000148D
		pop	ecx
		pop	ecx

loc_100010E1:				; CODE XREF: sub_10001099+18j
					; sub_10001099+2Cj ...
		push	[ebp+arg_8]
		push	[ebp+arg_4]
		push	edi
		call	dword ptr [edi+8]
		add	esp, 0Ch
		pop	edi
		pop	esi
		mov	esp, ebp
		pop	ebp
		retn
sub_10001099	endp


; =============== S U B	R O U T	I N E =======================================


sub_100010F4	proc near		; DATA XREF: sub_100015E5+90o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax+1Ch]
		push	eax
		call	dword ptr [eax+20h]
		pop	ecx
		retn
sub_100010F4	endp


; =============== S U B	R O U T	I N E =======================================


sub_10001101	proc near		; CODE XREF: sub_1000106E+Ap
					; sub_10001099+Ep ...

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		push	edi
		xor	edi, edi
		cmp	[esi+30h], edi
		jz	short loc_1000112B
		push	dword ptr [esi+38h]
		push	dword ptr [esi+34h]
		call	ds:PR_MemUnmap
		push	dword ptr [esi+30h]
		call	ds:PR_CloseFileMap
		add	esp, 0Ch
		mov	[esi+30h], edi
		jmp	short loc_10001139
; ---------------------------------------------------------------------------

loc_1000112B:				; CODE XREF: sub_10001101+Bj
		cmp	[esi+34h], edi
		jz	short loc_1000113F
		push	dword ptr [esi+34h]
		call	PORT_Free_Util
		pop	ecx

loc_10001139:				; CODE XREF: sub_10001101+28j
		mov	[esi+38h], edi
		mov	[esi+34h], edi

loc_1000113F:				; CODE XREF: sub_10001101+2Dj
		pop	edi
		pop	esi
		retn
sub_10001101	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10001142	proc near		; DATA XREF: sub_100015E5+6Do

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	esi
		push	edi
		mov	edi, [ebp+arg_0]
		push	edi
		mov	esi, [edi+1Ch]
		call	sub_10001101
		push	[ebp+arg_C]
		push	[ebp+arg_8]
		push	[ebp+arg_4]
		push	esi
		call	dword ptr [esi+0Ch]
		mov	edx, eax
		add	esp, 14h
		test	edx, edx
		jnz	short loc_10001183
		push	[ebp+arg_8]
		call	sub_10001051
		pop	ecx
		test	eax, eax
		jz	short loc_10001183
		push	[ebp+arg_8]
		push	edi
		call	sub_10001392
		pop	ecx
		pop	ecx
		mov	edx, eax

loc_10001183:				; CODE XREF: sub_10001142+25j
					; sub_10001142+32j
		pop	edi
		mov	eax, edx
		pop	esi
		pop	ebp
		retn
sub_10001142	endp


; =============== S U B	R O U T	I N E =======================================


sub_10001189	proc near		; CODE XREF: sub_10001392+14p
					; sub_1000148D+Cp ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		cmp	[esp+arg_0], 0
		jz	short loc_100011BF
		mov	edx, [esp+arg_4]
		push	edx
		call	sub_10001051
		pop	ecx
		test	eax, eax
		jz	short loc_100011BF
		mov	eax, [edx]
		add	eax, 8
		jz	short loc_100011BF
		cmp	byte ptr [eax],	0
		jz	short loc_100011BF
		push	eax
		push	[esp+4+arg_0]
		push	offset aSS	; "%s/%s"
		call	ds:PR_smprintf
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_100011BF:				; CODE XREF: sub_10001189+5j
					; sub_10001189+14j ...
		push	0
		push	0FFFFE012h
		call	ds:PR_SetError
		pop	ecx
		pop	ecx
		xor	eax, eax
		retn
sub_10001189	endp


; =============== S U B	R O U T	I N E =======================================


sub_100011D1	proc near		; CODE XREF: sub_100012EF+6Cp

var_24		= byte ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= byte ptr -18h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 24h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+24h+var_4], eax
		mov	eax, [esp+24h+arg_8]
		mov	edx, [esp+24h+arg_4]
		push	ebx
		push	ebp
		mov	ecx, [eax+4]
		mov	eax, ecx
		mov	ebp, [esp+2Ch+arg_C]
		push	esi
		push	edi
		mov	edi, [esp+34h+arg_0]
		add	edi, 3Ch
		shr	eax, 8
		mov	[esp+34h+var_1C], 14h
		mov	[edi+5], al
		mov	eax, ecx
		mov	[edi+4], cl
		shr	eax, 10h
		mov	[edi+6], al
		lea	eax, [esp+34h+var_18]
		shr	ecx, 18h
		mov	dword ptr [edi], 808h
		mov	[edi+7], cl
		push	dword ptr [edx+4]
		mov	[esp+38h+var_20], eax
		push	dword ptr [edx]
		push	eax
		call	sub_1000E0A0
		lea	eax, [esp+40h+var_24]
		mov	byte ptr [edi+8], 62h
		push	eax
		push	1Dh
		pop	ebx
		push	ebx
		lea	esi, [edi+9]
		push	esi
		push	0
		call	NSSBase64_EncodeItem_Util
		add	esp, 1Ch
		mov	byte ptr [edi+25h], 0

loc_10001252:				; CODE XREF: sub_100011D1+8Dj
		dec	ebx
		cmp	byte ptr [esi],	2Fh
		jnz	short loc_1000125B
		mov	byte ptr [esi],	2Dh

loc_1000125B:				; CODE XREF: sub_100011D1+85j
		inc	esi
		test	ebx, ebx
		jnz	short loc_10001252
		mov	ecx, [esp+34h+var_4]
		mov	[ebp+0], edi
		pop	edi
		pop	esi
		mov	dword ptr [ebp+4], 26h
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 24h
		retn
sub_100011D1	endp


; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1000127D(char	*Str)
sub_1000127D	proc near		; CODE XREF: sub_100015E5+1Ap

Str		= dword	ptr  4

		push	ebx
		push	ebp
		push	esi
		push	edi
		mov	edi, [esp+10h+Str]
		push	edi		; Str
		call	strlen
		mov	ebx, eax
		mov	ebp, offset Src	; ".dir"
		pop	ecx
		mov	esi, ebx
		lea	ecx, [ebx+edi]
		jmp	short loc_100012A5
; ---------------------------------------------------------------------------

loc_1000129A:				; CODE XREF: sub_1000127D+2Aj
		mov	al, [ecx]
		cmp	al, 2Eh
		jz	short loc_100012AE
		cmp	al, 2Fh
		jz	short loc_100012A9
		dec	ecx

loc_100012A5:				; CODE XREF: sub_1000127D+1Bj
		cmp	ecx, edi
		ja	short loc_1000129A

loc_100012A9:				; CODE XREF: sub_1000127D+25j
		cmp	byte ptr [ecx],	2Eh
		jnz	short loc_100012C1

loc_100012AE:				; CODE XREF: sub_1000127D+21j
		mov	esi, ecx
		push	ebp		; Str2
		push	ecx		; Str1
		sub	esi, edi
		call	strcmp
		pop	ecx
		pop	ecx
		test	eax, eax
		jnz	short loc_100012C1
		mov	esi, ebx

loc_100012C1:				; CODE XREF: sub_1000127D+2Fj
					; sub_1000127D+40j
		lea	eax, [esi+5]
		push	eax
		call	PORT_ZAlloc_Util
		mov	ebx, eax
		pop	ecx
		test	ebx, ebx
		jz	short loc_100012EA
		push	esi		; Size
		push	edi		; Src
		push	ebx		; Dst
		call	memcpy
		push	5		; Size
		lea	eax, [ebx+esi]
		push	ebp		; Src
		push	eax		; Dst
		call	memcpy
		add	esp, 18h
		mov	eax, ebx

loc_100012EA:				; CODE XREF: sub_1000127D+52j
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
sub_1000127D	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_100012EF	proc near		; DATA XREF: sub_100015E5+7Bo

var_10		= byte ptr -10h
var_8		= byte ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	ebx
		push	esi
		mov	esi, [ebp+arg_0]
		push	edi
		push	esi
		mov	edi, [esi+1Ch]
		call	sub_10001101
		cmp	dword ptr [esi+2Ch], 0
		pop	ecx
		jnz	short loc_1000137A
		push	0
		lea	eax, [ebp+var_8]
		push	eax
		push	[ebp+arg_4]
		push	edi
		call	dword ptr [edi+0Ch]
		add	esp, 10h
		test	eax, eax
		jnz	short loc_10001346
		cmp	[ebp+arg_C], 8
		jnz	short loc_1000132C
		push	8
		push	[ebp+arg_8]
		jmp	short loc_10001381
; ---------------------------------------------------------------------------

loc_1000132C:				; CODE XREF: sub_100012EF+34j
		lea	eax, [ebp+var_8]
		push	eax
		call	sub_10001051
		pop	ecx
		test	eax, eax
		jz	short loc_10001346
		lea	eax, [ebp+var_8]
		push	eax
		push	esi
		call	sub_1000148D
		pop	ecx
		pop	ecx

loc_10001346:				; CODE XREF: sub_100012EF+2Ej
					; sub_100012EF+49j
		mov	ebx, [ebp+arg_8]
		cmp	dword ptr [ebx+4], 3800h
		jbe	short loc_1000137D
		lea	eax, [ebp+var_10]
		push	eax
		push	ebx
		push	[ebp+arg_4]
		push	esi
		call	sub_100011D1
		push	ebx
		lea	eax, [ebp+var_10]
		push	eax
		push	dword ptr [esi+28h]
		push	esi
		call	sub_10001518
		add	esp, 20h
		lea	ebx, [ebp+var_10]
		test	eax, eax
		jnz	short loc_1000138B
		jmp	short loc_1000137D
; ---------------------------------------------------------------------------

loc_1000137A:				; CODE XREF: sub_100012EF+1Aj
		mov	ebx, [ebp+arg_8]

loc_1000137D:				; CODE XREF: sub_100012EF+61j
					; sub_100012EF+89j
		push	[ebp+arg_C]
		push	ebx

loc_10001381:				; CODE XREF: sub_100012EF+3Bj
		push	[ebp+arg_4]
		push	edi
		call	dword ptr [edi+10h]
		add	esp, 10h

loc_1000138B:				; CODE XREF: sub_100012EF+87j
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
sub_100012EF	endp


; =============== S U B	R O U T	I N E =======================================


sub_10001392	proc near		; CODE XREF: sub_10001142+38p
					; sub_100014B8+38p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		push	ebx
		push	ebp
		push	esi
		mov	esi, [esp+0Ch+arg_4]
		xor	ebx, ebx
		push	edi
		push	esi
		push	dword ptr [eax+24h]
		xor	edi, edi
		call	sub_10001189
		mov	ebp, eax
		pop	ecx
		pop	ecx
		test	ebp, ebp
		jz	loc_1000145A
		push	ebx
		push	1
		push	ebp
		call	ds:PR_OpenFile
		push	ebp
		mov	edi, eax
		call	ds:PR_smprintf_free
		add	esp, 10h
		test	edi, edi
		jz	loc_1000145A
		mov	ecx, [esi]
		push	ebx
		movzx	esi, byte ptr [ecx+7]
		movzx	eax, byte ptr [ecx+6]
		shl	esi, 8
		or	esi, eax
		movzx	eax, byte ptr [ecx+5]
		shl	esi, 8
		or	esi, eax
		movzx	eax, byte ptr [ecx+4]
		shl	esi, 8
		or	esi, eax
		mov	eax, esi
		cdq
		push	edx
		push	eax
		push	edi
		call	ds:PR_CreateFileMap
		mov	ebx, eax
		add	esp, 10h
		test	ebx, ebx
		jnz	short loc_10001424
		call	ds:PR_GetError
		cmp	eax, 0FFFFE898h
		jnz	short loc_1000145A
		push	esi
		push	edi
		call	sub_10001000
		pop	ecx
		pop	ecx
		jmp	short loc_10001433
; ---------------------------------------------------------------------------

loc_10001424:				; CODE XREF: sub_10001392+78j
		push	esi
		push	0
		push	0
		push	ebx
		call	ds:PR_MemMap
		add	esp, 10h

loc_10001433:				; CODE XREF: sub_10001392+90j
		mov	ebp, eax
		test	ebp, ebp
		jz	short loc_1000145A
		push	edi
		call	ds:PR_Close
		mov	eax, [esp+14h+arg_0]
		mov	[eax+30h], ebx
		mov	[eax+34h], ebp
		mov	[eax+38h], esi
		mov	eax, [esp+14h+arg_4]
		mov	[eax], ebp
		mov	[eax+4], esi
		xor	eax, eax
		jmp	short loc_10001487
; ---------------------------------------------------------------------------

loc_1000145A:				; CODE XREF: sub_10001392+1Fj
					; sub_10001392+3Dj ...
		call	ds:PR_GetError
		mov	esi, eax
		test	ebx, ebx
		jz	short loc_1000146E
		push	ebx
		call	ds:PR_CloseFileMap
		pop	ecx

loc_1000146E:				; CODE XREF: sub_10001392+D2j
		test	edi, edi
		jz	short loc_1000147A
		push	edi
		call	ds:PR_Close
		pop	ecx

loc_1000147A:				; CODE XREF: sub_10001392+DEj
		push	0
		push	esi
		call	ds:PR_SetError
		pop	ecx
		or	eax, 0FFFFFFFFh

loc_10001487:				; CODE XREF: sub_10001392+C6j
		pop	ecx
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
sub_10001392	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000148D	proc near		; CODE XREF: sub_10001099+41p
					; sub_100012EF+50p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		push	esi
		push	[esp+4+arg_4]
		push	dword ptr [eax+24h]
		call	sub_10001189
		mov	esi, eax
		pop	ecx
		pop	ecx
		test	esi, esi
		jz	short loc_100014B6
		push	esi
		call	ds:PR_Delete
		push	esi
		call	ds:PR_smprintf_free
		pop	ecx
		pop	ecx

loc_100014B6:				; CODE XREF: sub_1000148D+17j
		pop	esi
		retn
sub_1000148D	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_100014B8	proc near		; DATA XREF: sub_100015E5+82o

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	esi
		push	edi
		mov	edi, [ebp+arg_0]
		push	edi
		mov	esi, [edi+1Ch]
		call	sub_10001101
		push	[ebp+arg_C]
		push	[ebp+arg_8]
		push	[ebp+arg_4]
		push	esi
		call	dword ptr [esi+14h]
		mov	esi, eax
		add	esp, 14h
		test	esi, esi
		jnz	short loc_100014F7
		push	[ebp+arg_8]
		call	sub_10001051
		pop	ecx
		test	eax, eax
		jz	short loc_100014F7
		push	[ebp+arg_8]
		push	edi
		call	sub_10001392
		pop	ecx
		pop	ecx

loc_100014F7:				; CODE XREF: sub_100014B8+25j
					; sub_100014B8+32j
		pop	edi
		mov	eax, esi
		pop	esi
		pop	ebp
		retn
sub_100014B8	endp


; =============== S U B	R O U T	I N E =======================================


sub_100014FD	proc near		; DATA XREF: sub_100015E5+89o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		push	esi
		push	eax
		mov	esi, [eax+1Ch]
		call	sub_10001101
		push	[esp+8+arg_4]
		push	esi
		call	dword ptr [esi+18h]
		add	esp, 0Ch
		pop	esi
		retn
sub_100014FD	endp


; =============== S U B	R O U T	I N E =======================================


sub_10001518	proc near		; CODE XREF: sub_100012EF+7Ap

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebx
		push	ebp
		push	esi
		mov	esi, [esp+0Ch+arg_0]
		xor	ebp, ebp
		push	[esp+0Ch+arg_8]
		push	dword ptr [esi+24h]
		call	sub_10001189
		mov	ebx, eax
		pop	ecx
		pop	ecx
		test	ebx, ebx
		jz	loc_100015C8
		push	1
		push	dword ptr [esi+24h]
		call	ds:PR_Access
		pop	ecx
		pop	ecx
		test	eax, eax
		jz	short loc_10001568
		mov	eax, [esp+0Ch+arg_4]
		sar	eax, 2
		and	eax, 49h
		or	eax, [esp+0Ch+arg_4]
		push	eax
		push	dword ptr [esi+24h]
		call	ds:PR_MkDir
		pop	ecx
		pop	ecx
		test	eax, eax
		jnz	short loc_100015B8

loc_10001568:				; CODE XREF: sub_10001518+30j
		push	[esp+0Ch+arg_4]
		push	2Ah
		push	ebx
		call	ds:PR_OpenFile
		add	esp, 0Ch
		mov	[esp+0Ch+arg_0], eax
		test	eax, eax
		jnz	short loc_1000158A
		call	ds:PR_GetError
		mov	ebp, eax
		jmp	short loc_100015B8
; ---------------------------------------------------------------------------

loc_1000158A:				; CODE XREF: sub_10001518+66j
		push	edi
		mov	edi, [esp+10h+arg_C]
		push	dword ptr [edi+4]
		push	dword ptr [edi]
		push	eax
		call	ds:PR_Write
		mov	esi, eax
		call	ds:PR_GetError
		push	[esp+1Ch+arg_0]
		mov	ebp, eax
		call	ds:PR_Close
		add	esp, 10h
		cmp	esi, [edi+4]
		pop	edi
		jge	short loc_100015DA

loc_100015B8:				; CODE XREF: sub_10001518+4Ej
					; sub_10001518+70j
		push	ebx
		call	ds:PR_Delete
		push	ebx
		call	ds:PR_smprintf_free
		pop	ecx
		pop	ecx

loc_100015C8:				; CODE XREF: sub_10001518+1Bj
		push	0
		push	ebp
		call	ds:PR_SetError
		pop	ecx
		or	eax, 0FFFFFFFFh

loc_100015D5:				; CODE XREF: sub_10001518+CBj
		pop	ecx
		pop	esi
		pop	ebp
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_100015DA:				; CODE XREF: sub_10001518+9Ej
		push	ebx
		call	ds:PR_smprintf_free
		xor	eax, eax
		jmp	short loc_100015D5
sub_10001518	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_100015E5(char	*Str, int, int,	int)
sub_100015E5	proc near		; CODE XREF: sub_1000C810+4Ep
					; sub_1000CF1C+42p ...

Str		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	esi
		push	64h
		call	PORT_ZAlloc_Util
		mov	esi, eax
		pop	ecx
		test	esi, esi
		jz	loc_10001697
		push	edi
		push	[ebp+Str]	; Str
		call	sub_1000127D
		mov	[esi+24h], eax
		pop	ecx
		test	eax, eax
		jz	short loc_1000167E
		mov	ecx, [ebp+arg_8]
		xor	eax, eax
		cmp	[ebp+arg_4], eax
		mov	edi, [ebp+arg_C]
		push	offset dword_100132B8 ;	int
		push	edi		; int
		push	ecx		; int
		push	[ebp+arg_4]	; int
		setz	al
		mov	[esi+28h], ecx
		push	[ebp+Str]	; Src
		mov	[esi+2Ch], eax
		xor	eax, eax
		mov	[esi+30h], eax
		mov	[esi+34h], eax
		mov	[esi+38h], eax
		call	sub_1000E2A0
		add	esp, 14h
		test	eax, eax
		jz	short loc_1000167E
		mov	[esi+1Ch], eax
		mov	eax, esi
		mov	[esi], edi
		mov	dword ptr [esi+4], offset sub_1000106E
		mov	dword ptr [esi+0Ch], offset sub_10001142
		mov	dword ptr [esi+8], offset sub_10001099
		mov	dword ptr [esi+10h], offset sub_100012EF
		mov	dword ptr [esi+14h], offset sub_100014B8
		mov	dword ptr [esi+18h], offset sub_100014FD
		mov	dword ptr [esi+20h], offset sub_100010F4
		jmp	short loc_10001696
; ---------------------------------------------------------------------------

loc_1000167E:				; CODE XREF: sub_100015E5+25j
					; sub_100015E5+5Dj
		cmp	dword ptr [esi+24h], 0
		jz	short loc_1000168D
		push	dword ptr [esi+24h]
		call	PORT_Free_Util
		pop	ecx

loc_1000168D:				; CODE XREF: sub_100015E5+9Dj
		push	esi
		call	PORT_Free_Util
		pop	ecx
		xor	eax, eax

loc_10001696:				; CODE XREF: sub_100015E5+97j
		pop	edi

loc_10001697:				; CODE XREF: sub_100015E5+10j
		pop	esi
		pop	ebp
		retn
sub_100015E5	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_1000169A	proc near		; CODE XREF: sub_10001FC4+28p
					; sub_100022B1+FCp ...

var_10		= byte ptr -10h
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	0
		lea	eax, [ebp+var_10]
		mov	[ebp+var_8], offset aGlobalSalt	; "global-salt"
		push	eax
		lea	eax, [ebp+var_8]
		mov	[ebp+var_4], 0Bh
		push	eax
		push	[ebp+arg_0]
		call	sub_10001A13
		add	esp, 10h
		test	eax, eax
		jz	short loc_100016CB
		xor	eax, eax
		jmp	short loc_100016D5
; ---------------------------------------------------------------------------

loc_100016CB:				; CODE XREF: sub_1000169A+2Bj
		lea	eax, [ebp+var_10]
		push	eax
		call	sub_10001719
		pop	ecx

loc_100016D5:				; CODE XREF: sub_1000169A+2Fj
		mov	esp, ebp
		pop	ebp
		retn
sub_1000169A	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_100016D9	proc near		; CODE XREF: sub_100023BF+EBp
					; sub_10002505+88p

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		mov	ecx, [ebp+arg_4]
		push	0
		mov	[ebp+var_10], offset aGlobalSalt ; "global-salt"
		mov	[ebp+var_C], 0Bh
		mov	eax, [ecx+4]
		mov	[ebp+var_8], eax
		mov	eax, [ecx+8]
		mov	[ebp+var_4], eax
		lea	eax, [ebp+var_8]
		push	eax
		lea	eax, [ebp+var_10]
		push	eax
		push	[ebp+arg_0]
		call	sub_10001A46
		add	esp, 10h
		neg	eax
		sbb	eax, eax
		mov	esp, ebp
		pop	ebp
		retn
sub_100016D9	endp


; =============== S U B	R O U T	I N E =======================================


sub_10001719	proc near		; CODE XREF: sub_1000169A+35p
					; sub_100026D9+72p

arg_0		= dword	ptr  4

		push	esi
		push	0Ch
		call	PORT_ZAlloc_Util
		mov	esi, eax
		pop	ecx
		test	esi, esi
		jnz	short loc_1000172A
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1000172A:				; CODE XREF: sub_10001719+Dj
		push	edi
		mov	edi, [esp+8+arg_0]
		push	dword ptr [edi+4]
		call	PORT_ZAlloc_Util
		pop	ecx
		mov	ecx, eax
		mov	[esi+4], ecx
		test	ecx, ecx
		jnz	short loc_1000174C
		push	esi
		call	PORT_Free_Util
		pop	ecx
		xor	eax, eax
		jmp	short loc_10001760
; ---------------------------------------------------------------------------

loc_1000174C:				; CODE XREF: sub_10001719+26j
		mov	eax, [edi+4]
		push	eax		; Size
		mov	[esi+8], eax
		push	dword ptr [edi]	; Src
		push	ecx		; Dst
		call	memcpy
		add	esp, 0Ch
		mov	eax, esi

loc_10001760:				; CODE XREF: sub_10001719+31j
		pop	edi
		pop	esi
		retn
sub_10001719	endp


; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10001763(int,	size_t Size)
sub_10001763	proc near		; CODE XREF: sub_100019B0+34p
					; sub_100026D9+13Bp ...

arg_0		= dword	ptr  4
Size		= dword	ptr  8

		push	ebx
		mov	ebx, [esp+4+arg_0]
		push	ebp
		push	esi
		push	edi
		mov	ebx, [ebx]
		movzx	eax, byte ptr [ebx]
		cmp	eax, [esp+10h+Size]
		jnz	loc_1000185A
		push	800h
		call	PORT_NewArena_Util
		mov	edi, eax
		pop	ecx
		test	edi, edi
		jz	loc_1000185A
		push	24h
		push	edi
		call	PORT_ArenaZAlloc_Util
		mov	esi, eax
		pop	ecx
		pop	ecx
		test	esi, esi
		jz	loc_10001850
		and	dword ptr [esi+10h], 0
		and	dword ptr [esi+1Ch], 0
		mov	[esi], edi
		movzx	eax, byte ptr [ebx+1]
		push	eax
		push	edi
		mov	[esi+14h], eax
		call	PORT_ArenaZAlloc_Util
		mov	[esi+10h], eax
		pop	ecx
		pop	ecx
		test	eax, eax
		jz	loc_10001850
		mov	ebp, [esi+14h]
		push	2
		pop	eax
		add	ebp, eax
		cmp	[esp+10h+Size],	3
		jl	short loc_10001811
		movzx	eax, byte ptr [ebx+2]
		mov	[esp+10h+Size],	eax
		test	eax, eax
		jz	short loc_1000180B
		inc	eax
		push	eax
		push	edi
		call	PORT_ArenaZAlloc_Util
		mov	[esi+8], eax
		pop	ecx
		pop	ecx
		test	eax, eax
		jz	short loc_10001807
		push	[esp+10h+Size]	; Size
		lea	ecx, [ebx+1]
		add	ecx, ebp
		push	ecx		; Src
		push	eax		; Dst
		call	memcpy
		add	esp, 0Ch

loc_10001807:				; CODE XREF: sub_10001763+8Fj
		mov	eax, [esp+10h+Size]

loc_1000180B:				; CODE XREF: sub_10001763+7Ej
		inc	ebp
		push	3
		add	ebp, eax
		pop	eax

loc_10001811:				; CODE XREF: sub_10001763+72j
		push	dword ptr [esi+14h] ; Size
		add	eax, ebx
		push	eax		; Src
		push	dword ptr [esi+10h] ; Dst
		call	memcpy
		mov	eax, [esp+1Ch+arg_0]
		mov	eax, [eax+4]
		sub	eax, ebp
		push	eax
		push	edi
		mov	[esi+20h], eax
		call	PORT_ArenaZAlloc_Util
		add	esp, 14h
		mov	[esi+1Ch], eax
		test	eax, eax
		jz	short loc_10001850
		push	dword ptr [esi+20h] ; Size
		lea	ecx, [ebx+ebp]
		push	ecx		; Src
		push	eax		; Dst
		call	memcpy
		add	esp, 0Ch
		mov	eax, esi
		jmp	short loc_1000185C
; ---------------------------------------------------------------------------

loc_10001850:				; CODE XREF: sub_10001763+3Aj
					; sub_10001763+5Fj ...
		push	0
		push	edi
		call	PORT_FreeArena_Util
		pop	ecx
		pop	ecx

loc_1000185A:				; CODE XREF: sub_10001763+11j
					; sub_10001763+26j
		xor	eax, eax

loc_1000185C:				; CODE XREF: sub_10001763+EBj
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
sub_10001763	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10001861	proc near		; CODE XREF: sub_100023BF+ADp
					; sub_100026D9+166p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	esi
		push	[ebp+arg_8]
		call	SECOID_FindOIDByTag_Util
		mov	esi, eax
		pop	ecx
		test	esi, esi
		jnz	short loc_10001879
		or	eax, 0FFFFFFFFh
		jmp	short loc_100018E2
; ---------------------------------------------------------------------------

loc_10001879:				; CODE XREF: sub_10001861+11j
		mov	eax, [esi+8]
		push	ebx
		mov	ebx, [ebp+arg_C]
		push	edi
		mov	edi, [ebp+arg_4]
		mov	ecx, [ebx+8]
		inc	ecx
		add	eax, ecx
		cmp	[ebp+arg_0], 0
		mov	[edi+8], eax
		push	eax
		jz	short loc_1000189F
		push	[ebp+arg_0]
		call	PORT_ArenaAlloc_Util
		pop	ecx
		jmp	short loc_100018A4
; ---------------------------------------------------------------------------

loc_1000189F:				; CODE XREF: sub_10001861+31j
		call	PORT_Alloc_Util

loc_100018A4:				; CODE XREF: sub_10001861+3Cj
		pop	ecx
		mov	ecx, eax
		mov	[edi+4], eax
		test	ecx, ecx
		jnz	short loc_100018B3
		or	eax, 0FFFFFFFFh
		jmp	short loc_100018E0
; ---------------------------------------------------------------------------

loc_100018B3:				; CODE XREF: sub_10001861+4Bj
		mov	al, [esi+8]
		mov	[ecx], al
		push	dword ptr [esi+8] ; Size
		mov	eax, [edi+4]
		push	dword ptr [esi+4] ; Src
		inc	eax
		push	eax		; Dst
		call	memcpy
		push	dword ptr [ebx+8] ; Size
		mov	eax, [edi+4]
		push	dword ptr [ebx+4] ; Src
		inc	eax
		add	eax, [esi+8]
		push	eax		; Dst
		call	memcpy
		add	esp, 18h
		xor	eax, eax

loc_100018E0:				; CODE XREF: sub_10001861+50j
		pop	edi
		pop	ebx

loc_100018E2:				; CODE XREF: sub_10001861+16j
		pop	esi
		pop	ebp
		retn
sub_10001861	endp


; =============== S U B	R O U T	I N E =======================================


sub_100018E5	proc near		; CODE XREF: sub_10002B73+10p

var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= byte ptr  8

		push	ecx
		push	ebx
		push	ebp
		push	esi
		push	edi
		push	8
		call	PORT_ZAlloc_Util
		mov	edi, eax
		pop	ecx
		test	edi, edi
		jz	short loc_1000193F
		mov	esi, [esp+14h+arg_0]
		mov	ebp, [esi+8]
		test	ebp, ebp
		jz	short loc_1000190F
		push	ebp		; Str
		call	strlen
		pop	ecx
		lea	ebx, [eax+1]
		jmp	short loc_10001917
; ---------------------------------------------------------------------------

loc_1000190F:				; CODE XREF: sub_100018E5+1Cj
		xor	ebx, ebx
		mov	ebp, offset dword_100133B8
		inc	ebx

loc_10001917:				; CODE XREF: sub_100018E5+28j
		mov	eax, [esi+14h]
		add	eax, 3
		add	eax, [esi+20h]
		add	eax, ebx
		push	eax
		mov	[edi+4], eax
		call	PORT_ZAlloc_Util
		pop	ecx
		mov	ecx, eax
		mov	[esp+14h+var_4], ecx
		mov	[edi], ecx
		test	ecx, ecx
		jnz	short loc_10001947
		push	edi
		call	sub_10001996
		pop	ecx

loc_1000193F:				; CODE XREF: sub_100018E5+11j
		xor	eax, eax

loc_10001941:				; CODE XREF: sub_100018E5+AFj
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_10001947:				; CODE XREF: sub_100018E5+51j
		mov	al, [esp+14h+arg_4]
		mov	[ecx], al
		mov	al, [esi+14h]
		mov	[ecx+1], al
		lea	eax, [ecx+3]
		mov	[ecx+2], bl
		push	dword ptr [esi+14h] ; Size
		push	dword ptr [esi+10h] ; Src
		push	eax		; Dst
		call	memcpy
		mov	eax, [esi+14h]
		push	ebx		; Size
		add	eax, 3
		add	eax, [esp+24h+var_4]
		push	ebp		; Src
		push	eax		; Dst
		call	memcpy
		mov	eax, [esi+14h]
		push	dword ptr [esi+20h] ; Size
		add	eax, 3
		add	eax, [esp+30h+var_4]
		push	dword ptr [esi+1Ch] ; Src
		add	eax, ebx
		push	eax		; Dst
		call	memcpy
		add	esp, 24h
		mov	eax, edi
		jmp	short loc_10001941
sub_100018E5	endp


; =============== S U B	R O U T	I N E =======================================


sub_10001996	proc near		; CODE XREF: sub_100018E5+54p
					; sub_10002B73+48p ...

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		test	esi, esi
		jz	short loc_100019AE
		push	dword ptr [esi]
		call	PORT_Free_Util
		push	esi
		call	PORT_Free_Util
		pop	ecx
		pop	ecx

loc_100019AE:				; CODE XREF: sub_10001996+7j
		pop	esi
		retn
sub_10001996	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_100019B0	proc near		; CODE XREF: sub_10001FC4+80p
					; sub_100031A0+1Cp

var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ecx
		push	esi
		mov	esi, [ebp+arg_0]
		lea	eax, [ebp+var_8]
		push	0
		push	eax
		push	[ebp+arg_4]
		push	esi
		call	sub_10001A13
		add	esp, 10h
		test	eax, eax
		jz	short loc_100019DD
		push	0FFFFE012h
		call	PORT_SetError_Util
		xor	eax, eax
		jmp	short loc_100019EA
; ---------------------------------------------------------------------------

loc_100019DD:				; CODE XREF: sub_100019B0+1Dj
		push	dword ptr [esi+0Ch] ; Size
		lea	eax, [ebp+var_8]
		push	eax		; int
		call	sub_10001763
		pop	ecx

loc_100019EA:				; CODE XREF: sub_100019B0+2Bj
		pop	ecx
		pop	esi
		mov	esp, ebp
		pop	ebp
		retn
sub_100019B0	endp


; =============== S U B	R O U T	I N E =======================================


sub_100019F0	proc near		; CODE XREF: sub_10001CFD+Fp
					; sub_10002505+2Ep ...

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		push	esi
		push	edi
		mov	edi, [eax+1Ch]
		mov	esi, [eax]
		push	edi
		call	ds:PR_Lock
		push	esi
		call	dword ptr [esi+4]
		push	edi
		call	ds:PR_Unlock
		add	esp, 0Ch
		pop	edi
		pop	esi
		retn
sub_100019F0	endp


; =============== S U B	R O U T	I N E =======================================


sub_10001A13	proc near		; CODE XREF: sub_1000169A+21p
					; sub_100019B0+13p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	eax, [esp+arg_0]
		push	esi
		push	edi
		mov	edi, [eax+1Ch]
		mov	esi, [eax]
		push	edi
		call	ds:PR_Lock
		push	[esp+0Ch+arg_C]
		push	[esp+10h+arg_8]
		push	[esp+14h+arg_4]
		push	esi
		call	dword ptr [esi+0Ch]
		push	edi
		mov	esi, eax
		call	ds:PR_Unlock
		add	esp, 18h
		mov	eax, esi
		pop	edi
		pop	esi
		retn
sub_10001A13	endp


; =============== S U B	R O U T	I N E =======================================


sub_10001A46	proc near		; CODE XREF: sub_100016D9+30p
					; sub_10001C4C+43p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	eax, [esp+arg_0]
		push	esi
		push	edi
		mov	edi, [eax+1Ch]
		mov	esi, [eax]
		push	edi
		call	ds:PR_Lock
		push	[esp+0Ch+arg_C]
		push	[esp+10h+arg_8]
		push	[esp+14h+arg_4]
		push	esi
		call	dword ptr [esi+10h]
		push	edi
		mov	esi, eax
		call	ds:PR_Unlock
		add	esp, 18h
		mov	eax, esi
		pop	edi
		pop	esi
		retn
sub_10001A46	endp


; =============== S U B	R O U T	I N E =======================================


sub_10001A79	proc near		; CODE XREF: sub_10002638+21p
					; sub_10002638+8Fp ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	eax, [esp+arg_0]
		push	esi
		push	edi
		mov	edi, [eax+1Ch]
		mov	esi, [eax]
		push	edi
		call	ds:PR_Lock
		push	[esp+0Ch+arg_C]
		push	[esp+10h+arg_8]
		push	[esp+14h+arg_4]
		push	esi
		call	dword ptr [esi+14h]
		push	edi
		mov	esi, eax
		call	ds:PR_Unlock
		add	esp, 18h
		mov	eax, esi
		pop	edi
		pop	esi
		retn
sub_10001A79	endp


; =============== S U B	R O U T	I N E =======================================


sub_10001AAC	proc near		; CODE XREF: sub_10001E21+59p
					; sub_100023BF+FAp ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		push	esi
		push	edi
		mov	edi, [eax+1Ch]
		mov	esi, [eax]
		push	edi
		call	ds:PR_Lock
		push	[esp+0Ch+arg_4]
		push	esi
		call	dword ptr [esi+18h]
		push	edi
		mov	esi, eax
		call	ds:PR_Unlock
		add	esp, 10h
		mov	eax, esi
		pop	edi
		pop	esi
		retn
sub_10001AAC	endp


; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10001AD7(int,	char *Str1, int, int)
sub_10001AD7	proc near		; DATA XREF: sub_100078E3+B2o

var_9C		= byte ptr -9Ch
Src		= dword	ptr -98h
Size		= dword	ptr -94h
var_8C		= dword	ptr -8Ch
var_88		= dword	ptr -88h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
Str1		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 9Ch
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+9Ch+var_4], eax
		mov	eax, [esp+9Ch+arg_0]
		push	ebx
		push	ebp
		mov	ebp, [esp+0A4h+Str1]
		push	esi
		mov	esi, [esp+0A8h+arg_8]
		push	edi
		mov	edi, [esp+0ACh+arg_C]
		push	eax
		call	sub_100078BD
		mov	ebx, eax
		pop	ecx
		test	ebx, ebx
		jnz	short loc_10001B1F
		mov	eax, 0E2h
		jmp	short loc_10001B73
; ---------------------------------------------------------------------------

loc_10001B1F:				; CODE XREF: sub_10001AD7+3Fj
		push	offset Str2	; "password"
		push	ebp		; Str1
		call	strcmp
		pop	ecx
		pop	ecx
		test	eax, eax
		jz	short loc_10001B35

loc_10001B30:				; CODE XREF: sub_10001AD7+6Dj
		push	5
		pop	eax
		jmp	short loc_10001B73
; ---------------------------------------------------------------------------

loc_10001B35:				; CODE XREF: sub_10001AD7+57j
		lea	eax, [esp+0ACh+var_9C]
		push	eax
		push	ebx
		call	sub_10001FC4
		pop	ecx
		pop	ecx
		test	eax, eax
		jnz	short loc_10001B30
		mov	eax, [esp+0ACh+Size]
		push	eax		; Size
		push	[esp+0B0h+Src]	; Src
		mov	[esi+8], eax
		push	dword ptr [esi+4] ; Dst
		call	memcpy
		mov	eax, [esp+0B8h+var_88]
		push	eax		; Size
		push	[esp+0BCh+var_8C] ; Src
		mov	[edi+8], eax
		push	dword ptr [edi+4] ; Dst
		call	memcpy
		add	esp, 18h
		xor	eax, eax

loc_10001B73:				; CODE XREF: sub_10001AD7+46j
					; sub_10001AD7+5Cj
		mov	ecx, [esp+0ACh+var_4]
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 9Ch
		retn
sub_10001AD7	endp


; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10001B8C(int,	char *Str1, int, int)
sub_10001B8C	proc near		; DATA XREF: sub_100078E3+B9o

var_9C		= byte ptr -9Ch
var_90		= byte ptr -90h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
Str1		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 9Ch
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+9Ch+var_4], eax
		mov	eax, [esp+9Ch+arg_0]
		push	ebx
		push	ebp
		mov	ebp, [esp+0A4h+arg_C]
		push	esi
		mov	esi, [esp+0A8h+Str1]
		push	edi
		mov	edi, [esp+0ACh+arg_8]
		push	eax
		call	sub_100078BD
		mov	ebx, eax
		pop	ecx
		test	ebx, ebx
		jnz	short loc_10001BD4
		mov	eax, 0E2h
		jmp	short loc_10001C10
; ---------------------------------------------------------------------------

loc_10001BD4:				; CODE XREF: sub_10001B8C+3Fj
		push	offset Str2	; "password"
		push	esi		; Str1
		call	strcmp
		pop	ecx
		pop	ecx
		test	eax, eax
		jz	short loc_10001BEA
		push	5
		pop	eax
		jmp	short loc_10001C10
; ---------------------------------------------------------------------------

loc_10001BEA:				; CODE XREF: sub_10001B8C+57j
		mov	esi, edi
		lea	eax, [esp+0ACh+var_9C]
		lea	edi, [esp+0ACh+var_9C]
		push	eax
		push	ebx
		movsd
		movsd
		movsd
		mov	esi, ebp
		lea	edi, [esp+0B4h+var_90]
		movsd
		movsd
		movsd
		call	sub_100023BF
		neg	eax
		pop	ecx
		sbb	eax, eax
		pop	ecx
		and	eax, 5

loc_10001C10:				; CODE XREF: sub_10001B8C+46j
					; sub_10001B8C+5Cj
		mov	ecx, [esp+0ACh+var_4]
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 9Ch
		retn
sub_10001B8C	endp


; =============== S U B	R O U T	I N E =======================================


sub_10001C29	proc near		; DATA XREF: sub_100078E3+D5o

arg_0		= dword	ptr  4

		push	[esp+arg_0]
		call	sub_100078BD
		pop	ecx
		test	eax, eax
		jnz	short loc_10001C3D
		mov	eax, 0E2h
		retn
; ---------------------------------------------------------------------------

loc_10001C3D:				; CODE XREF: sub_10001C29+Cj
		push	eax
		call	sub_10002505
		neg	eax
		pop	ecx
		sbb	eax, eax
		and	eax, 5
		retn
sub_10001C29	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10001C4C	proc near		; CODE XREF: sub_10002505+93p
					; sub_100029E8+FBp

var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= byte ptr -14h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 24h
		mov	eax, ___security_cookie
		xor	eax, ebp
		mov	[ebp+var_4], eax
		push	esi
		mov	esi, [ebp+arg_0]
		lea	eax, [ebp+var_14]
		push	10h
		mov	[ebp+var_24], eax
		pop	eax
		push	eax
		mov	[ebp+var_20], eax
		lea	eax, [ebp+var_14]
		push	eax
		mov	[ebp+var_1C], offset aGlobalSalt ; "global-salt"
		mov	[ebp+var_18], 0Bh
		call	sub_1000E020
		push	0
		lea	eax, [ebp+var_24]
		push	eax
		lea	eax, [ebp+var_1C]
		push	eax
		push	esi
		call	sub_10001A46
		mov	ecx, [ebp+var_4]
		add	esp, 18h
		neg	eax
		sbb	eax, eax
		xor	ecx, ebp
		pop	esi
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	esp, ebp
		pop	ebp
		retn
sub_10001C4C	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10001CAA	proc near		; CODE XREF: sub_10002505+6Fp
					; sub_100029E8+B3p

var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_1		= byte ptr -1
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 14h
		push	esi
		mov	esi, [ebp+arg_0]
		lea	eax, [ebp+var_1]
		mov	[ebp+var_C], eax
		lea	eax, [ebp+var_C]
		push	0
		push	eax
		lea	eax, [ebp+var_14]
		mov	[ebp+var_1], 3
		push	eax
		push	esi
		mov	[ebp+var_8], 1
		mov	[ebp+var_14], offset aVersion ;	"Version"
		mov	[ebp+var_10], 7
		call	sub_10001A46
		add	esp, 10h
		test	eax, eax
		jz	short loc_10001CEF
		or	eax, 0FFFFFFFFh
		jmp	short loc_10001CF8
; ---------------------------------------------------------------------------

loc_10001CEF:				; CODE XREF: sub_10001CAA+3Ej
		movzx	eax, [ebp+var_1]
		mov	[esi+0Ch], eax
		xor	eax, eax

loc_10001CF8:				; CODE XREF: sub_10001CAA+43j
		pop	esi
		mov	esp, ebp
		pop	ebp
		retn
sub_10001CAA	endp


; =============== S U B	R O U T	I N E =======================================


sub_10001CFD	proc near		; CODE XREF: sub_100022B1+E9p
					; sub_100026D9+27Dp ...

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		test	esi, esi
		jz	short loc_10001D65
		cmp	dword ptr [esi], 0
		jz	short loc_10001D12
		push	esi
		call	sub_100019F0
		pop	ecx

loc_10001D12:				; CODE XREF: sub_10001CFD+Cj
		mov	eax, [esi+4]
		test	eax, eax
		jz	short loc_10001D1E
		push	eax
		call	dword ptr [eax+4]
		pop	ecx

loc_10001D1E:				; CODE XREF: sub_10001CFD+1Aj
		cmp	dword ptr [esi+14h], 0
		jz	short loc_10001D2D
		push	dword ptr [esi+14h]
		call	PORT_Free_Util
		pop	ecx

loc_10001D2D:				; CODE XREF: sub_10001CFD+25j
		cmp	dword ptr [esi+10h], 0
		jz	short loc_10001D3C
		push	dword ptr [esi+10h]
		call	PORT_Free_Util
		pop	ecx

loc_10001D3C:				; CODE XREF: sub_10001CFD+34j
		cmp	dword ptr [esi+8], 0
		jz	short loc_10001D4E
		push	1
		push	dword ptr [esi+8]
		call	SECITEM_FreeItem_Util
		pop	ecx
		pop	ecx

loc_10001D4E:				; CODE XREF: sub_10001CFD+43j
		cmp	dword ptr [esi+1Ch], 0
		jz	short loc_10001D5E
		push	dword ptr [esi+1Ch]
		call	ds:PR_DestroyLock
		pop	ecx

loc_10001D5E:				; CODE XREF: sub_10001CFD+55j
		push	esi
		call	PORT_Free_Util
		pop	ecx

loc_10001D65:				; CODE XREF: sub_10001CFD+7j
		pop	esi
		retn
sub_10001CFD	endp


; =============== S U B	R O U T	I N E =======================================


sub_10001D67	proc near		; CODE XREF: sub_100023BF+5Cp

var_3C		= byte ptr -3Ch
var_30		= dword	ptr -30h
var_24		= byte ptr -24h
var_18		= byte ptr -18h
var_C		= byte ptr -0Ch
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 3Ch
		push	ebx
		push	ebp
		push	esi
		mov	esi, [esp+48h+arg_8]
		xor	ebp, ebp
		push	edi
		push	800h
		mov	ebx, ebp
		mov	[esp+50h+var_30], ebp
		mov	[esi+4], ebp
		call	PORT_NewArena_Util
		mov	edi, eax
		pop	ecx
		test	edi, edi
		jz	loc_10001E19
		push	[esp+4Ch+arg_0]
		lea	eax, [esp+50h+var_24]
		push	offset dword_10013320
		push	eax
		push	edi
		call	SEC_QuickDERDecodeItem_Util
		add	esp, 10h
		test	eax, eax
		jnz	short loc_10001DFD
		lea	eax, [esp+4Ch+var_24]
		push	eax
		call	SECOID_GetAlgorithmTag_Util
		mov	ecx, [esp+50h+arg_4]
		mov	[ecx], eax
		lea	eax, [esp+50h+var_18]
		push	eax
		push	offset dword_100132E0
		lea	eax, [esp+58h+var_3C]
		push	eax
		push	edi
		call	SEC_QuickDERDecodeItem_Util
		add	esp, 14h
		test	eax, eax
		jnz	short loc_10001DFD
		lea	eax, [esp+4Ch+var_3C]
		push	eax
		push	esi
		push	ebp
		call	SECITEM_CopyItem_Util
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_10001DFD
		lea	eax, [esp+4Ch+var_C]
		push	eax
		call	SECITEM_DupItem_Util
		mov	ebx, eax
		pop	ecx
		test	ebx, ebx
		jnz	short loc_10001E0E

loc_10001DFD:				; CODE XREF: sub_10001D67+44j
					; sub_10001D67+70j ...
		cmp	[esi+4], ebp
		jz	short loc_10001E0E
		push	dword ptr [esi+4]
		call	PORT_Free_Util
		pop	ecx
		mov	[esi+4], ebp

loc_10001E0E:				; CODE XREF: sub_10001D67+94j
					; sub_10001D67+99j
		push	ebp
		push	edi
		call	PORT_FreeArena_Util
		pop	ecx
		pop	ecx
		mov	eax, ebx

loc_10001E19:				; CODE XREF: sub_10001D67+25j
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 3Ch
		retn
sub_10001D67	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10001E21	proc near		; CODE XREF: sub_10006396+18Ap

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ecx
		push	ebx
		mov	ebx, [ebp+arg_0]
		test	ebx, ebx
		jnz	short loc_10001E3E

loc_10001E2E:				; CODE XREF: sub_10001E21+54j
					; sub_10001E21+62j
		push	0FFFFE012h
		call	PORT_SetError_Util
		pop	ecx
		or	eax, 0FFFFFFFFh
		jmp	short loc_10001E85
; ---------------------------------------------------------------------------

loc_10001E3E:				; CODE XREF: sub_10001E21+Bj
		mov	ecx, [ebp+arg_4]
		push	esi
		mov	esi, [ebx]
		push	edi
		mov	eax, [ecx+4]
		mov	edi, [ebx+1Ch]
		mov	[ebp+var_8], eax
		mov	eax, [ecx+8]
		push	edi
		mov	[ebp+var_4], eax
		call	ds:PR_Lock
		push	0
		lea	eax, [ebp+var_8]
		push	eax
		push	esi
		call	dword ptr [esi+8]
		push	edi
		mov	esi, eax
		call	ds:PR_Unlock
		add	esp, 14h
		test	esi, esi
		pop	edi
		pop	esi
		jnz	short loc_10001E2E
		push	0
		push	ebx
		call	sub_10001AAC
		pop	ecx
		pop	ecx
		test	eax, eax
		jnz	short loc_10001E2E

loc_10001E85:				; CODE XREF: sub_10001E21+1Bj
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
sub_10001E21	endp


; =============== S U B	R O U T	I N E =======================================


sub_10001E8A	proc near		; CODE XREF: sub_10001FC4+DFp

var_3D		= byte ptr -3Dh
var_3C		= byte ptr -3Ch
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= byte ptr -24h
var_C		= byte ptr -0Ch
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 40h
		push	ebx
		push	ebp
		push	esi
		mov	esi, [esp+4Ch+arg_4]
		lea	eax, [esp+4Ch+var_3D]
		push	edi
		lea	edi, [esp+50h+var_3C]
		mov	[esp+50h+var_3D], 1
		xor	ebp, ebp
		movsd
		mov	ebx, ebp
		push	800h
		movsd
		movsd
		mov	esi, [esp+54h+arg_8]
		lea	edi, [esp+54h+var_C]
		mov	[esp+54h+var_30], ebp
		mov	[esp+54h+var_2C], eax
		mov	[esp+54h+var_28], 1
		movsd
		movsd
		movsd
		call	PORT_NewArena_Util
		mov	esi, eax
		pop	ecx
		test	esi, esi
		jz	short loc_10001F25
		push	offset dword_100132E0
		lea	eax, [esp+54h+var_3C]
		push	eax
		push	ebp
		push	esi
		call	SEC_ASN1EncodeItem_Util
		add	esp, 10h
		test	eax, eax
		jz	short loc_10001F1A
		push	eax
		push	[esp+54h+arg_0]
		lea	eax, [esp+58h+var_24]
		push	eax
		push	esi
		call	SECOID_SetAlgorithmID_Util
		add	esp, 10h
		test	eax, eax
		jnz	short loc_10001F1A
		push	offset dword_10013320
		lea	eax, [esp+54h+var_24]
		push	eax
		push	ebp
		push	ebp
		call	SEC_ASN1EncodeItem_Util
		add	esp, 10h
		mov	ebx, eax

loc_10001F1A:				; CODE XREF: sub_10001E8A+61j
					; sub_10001E8A+78j
		push	ebp
		push	esi
		call	PORT_FreeArena_Util
		pop	ecx
		pop	ecx
		mov	eax, ebx

loc_10001F25:				; CODE XREF: sub_10001E8A+49j
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 40h
		retn
sub_10001E8A	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10001F2D	proc near		; CODE XREF: sub_10003DA0+18p
					; sub_10004870+25p ...

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ecx
		cmp	[ebp+arg_0], 0
		jnz	short loc_10001F47
		push	0FFFFE012h
		call	PORT_SetError_Util
		pop	ecx
		xor	eax, eax
		jmp	short loc_10001F6A
; ---------------------------------------------------------------------------

loc_10001F47:				; CODE XREF: sub_10001F2D+9j
		mov	ecx, [ebp+arg_4]
		push	[ebp+arg_8]
		push	0
		mov	eax, [ecx+4]
		mov	[ebp+var_8], eax
		mov	eax, [ecx+8]
		mov	[ebp+var_4], eax
		lea	eax, [ebp+var_8]
		push	eax
		push	[ebp+arg_0]
		call	sub_100031A0
		add	esp, 10h

loc_10001F6A:				; CODE XREF: sub_10001F2D+18j
		mov	esp, ebp
		pop	ebp
		retn
sub_10001F2D	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10001F6E	proc near		; CODE XREF: sub_10003DC1+18p

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		and	[ebp+var_4], 0
		cmp	[ebp+arg_0], 0
		jnz	short loc_10001F8D
		push	0FFFFE012h
		call	PORT_SetError_Util
		pop	ecx
		xor	eax, eax
		jmp	short loc_10001FC0
; ---------------------------------------------------------------------------

loc_10001F8D:				; CODE XREF: sub_10001F6E+Ej
		mov	ecx, [ebp+arg_4]
		push	[ebp+arg_8]
		mov	eax, [ecx+4]
		mov	[ebp+var_C], eax
		mov	eax, [ecx+8]
		mov	[ebp+var_8], eax
		lea	eax, [ebp+var_4]
		push	eax
		lea	eax, [ebp+var_C]
		push	eax
		push	[ebp+arg_0]
		call	sub_100031A0
		add	esp, 10h
		test	eax, eax
		jz	short loc_10001FBD
		push	eax
		call	sub_10008EC8
		pop	ecx

loc_10001FBD:				; CODE XREF: sub_10001F6E+46j
		mov	eax, [ebp+var_4]

loc_10001FC0:				; CODE XREF: sub_10001F6E+1Dj
		mov	esp, ebp
		pop	ebp
		retn
sub_10001F6E	endp


; =============== S U B	R O U T	I N E =======================================


sub_10001FC4	proc near		; CODE XREF: sub_10001AD7+64p

var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= byte ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 30h
		push	ebx
		xor	eax, eax
		or	ebx, 0FFFFFFFFh
		push	ebp
		mov	ebp, [esp+38h+arg_0]
		mov	[esp+38h+var_24], eax
		mov	[esp+38h+var_20], eax
		mov	[esp+38h+var_1C], eax
		mov	[esp+38h+var_30], ebx
		test	ebp, ebp
		jz	loc_10002108
		push	edi
		push	ebp
		call	sub_1000169A
		mov	edi, eax
		pop	ecx
		test	edi, edi
		jnz	short loc_10001FFC
		lea	edi, [esp+3Ch+var_24]

loc_10001FFC:				; CODE XREF: sub_10001FC4+32j
		cmp	dword ptr [edi+8], 80h
		ja	loc_100020F5
		mov	ebx, [esp+3Ch+arg_4]
		push	esi
		push	dword ptr [edi+8] ; Size
		push	dword ptr [edi+4] ; Src
		lea	esi, [ebx+18h]
		push	esi		; Dst
		call	memcpy
		mov	[ebx+4], esi
		mov	eax, [edi+8]
		mov	[ebx+8], eax
		add	eax, 18h
		add	eax, ebx
		mov	[esp+4Ch+var_2C], offset aPasswordCheck	; "password-check"
		mov	[ebx+10h], eax
		lea	eax, [esp+4Ch+var_2C]
		push	eax
		push	ebp
		mov	[esp+54h+var_28], 0Eh
		call	sub_100019B0
		mov	esi, eax
		add	esp, 14h
		test	esi, esi
		jz	loc_100020F1
		mov	eax, [esi+1Ch]
		movzx	ecx, byte ptr [eax]
		mov	[esp+40h+var_10], ecx
		mov	eax, [esi+1Ch]
		inc	eax
		mov	[esp+40h+var_14], eax
		lea	eax, [ecx+0Fh]
		cmp	[esi+20h], eax
		jb	short loc_100020E4
		lea	eax, [esp+40h+var_18]
		push	eax
		call	SECOID_FindOIDTag_Util
		and	[esp+44h+var_C], 0
		mov	edx, eax
		mov	eax, [esi+20h]
		sub	eax, [esp+44h+var_10]
		dec	eax
		mov	[esp+44h+var_4], eax
		mov	eax, [esi+1Ch]
		inc	eax
		add	eax, [esp+44h+var_10]
		mov	[esp+44h+var_8], eax
		lea	eax, [esp+44h+var_C]
		push	eax
		lea	eax, [esi+0Ch]
		push	eax
		push	edx
		call	sub_10001E8A
		mov	ebp, eax
		add	esp, 10h
		test	ebp, ebp
		jz	short loc_100020E4
		mov	eax, [ebx+8]
		add	eax, [ebp+8]
		cmp	eax, 80h
		ja	short loc_100020DA
		push	dword ptr [ebp+8] ; Size
		push	dword ptr [ebp+4] ; Src
		push	dword ptr [ebx+10h] ; Dst
		call	memcpy
		mov	eax, [ebp+8]
		add	esp, 0Ch
		and	[esp+40h+var_30], 0
		mov	[ebx+14h], eax

loc_100020DA:				; CODE XREF: sub_10001FC4+F8j
		push	1
		push	ebp
		call	SECITEM_FreeItem_Util
		pop	ecx
		pop	ecx

loc_100020E4:				; CODE XREF: sub_10001FC4+AAj
					; sub_10001FC4+EBj
		push	esi
		call	sub_10008EE1
		mov	ebx, [esp+44h+var_30]
		pop	ecx
		jmp	short loc_100020F4
; ---------------------------------------------------------------------------

loc_100020F1:				; CODE XREF: sub_10001FC4+8Cj
		or	ebx, 0FFFFFFFFh

loc_100020F4:				; CODE XREF: sub_10001FC4+12Bj
		pop	esi

loc_100020F5:				; CODE XREF: sub_10001FC4+3Fj
		lea	eax, [esp+3Ch+var_24]
		cmp	edi, eax
		jz	short loc_10002107
		push	1
		push	edi
		call	SECITEM_FreeItem_Util
		pop	ecx
		pop	ecx

loc_10002107:				; CODE XREF: sub_10001FC4+137j
		pop	edi

loc_10002108:				; CODE XREF: sub_10001FC4+20j
		pop	ebp
		mov	eax, ebx
		pop	ebx
		add	esp, 30h
		retn
sub_10001FC4	endp


; =============== S U B	R O U T	I N E =======================================


sub_10002110	proc near		; CODE XREF: sub_10004B1B+CCp
					; sub_10005387+13Cp

Dst		= dword	ptr -28h
Size		= dword	ptr -24h
var_20		= byte ptr -20h
Src		= byte ptr -18h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 28h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+28h+var_4], eax
		mov	eax, [esp+28h+arg_4]
		push	ebp
		mov	ebp, [esp+2Ch+arg_0]
		push	esi
		push	eax
		call	sub_1000849A
		mov	esi, eax
		pop	ecx
		test	esi, esi
		jnz	short loc_1000213C

loc_10002135:				; CODE XREF: sub_10002110+3Aj
		xor	eax, eax
		jmp	loc_10002227
; ---------------------------------------------------------------------------

loc_1000213C:				; CODE XREF: sub_10002110+23j
		mov	eax, [esi+4]
		dec	eax
		jz	short loc_10002176
		dec	eax
		jz	short loc_1000216A
		dec	eax
		dec	eax
		jz	short loc_1000215E
		dec	eax
		jnz	short loc_10002135
		mov	eax, [esi+90h]
		mov	[esp+30h+Dst], eax
		mov	ecx, [esi+94h]
		jmp	short loc_10002180
; ---------------------------------------------------------------------------

loc_1000215E:				; CODE XREF: sub_10002110+37j
		mov	eax, [esi+28h]
		mov	[esp+30h+Dst], eax
		mov	ecx, [esi+2Ch]
		jmp	short loc_10002180
; ---------------------------------------------------------------------------

loc_1000216A:				; CODE XREF: sub_10002110+33j
		mov	eax, [esi+34h]
		mov	[esp+30h+Dst], eax
		mov	ecx, [esi+38h]
		jmp	short loc_10002180
; ---------------------------------------------------------------------------

loc_10002176:				; CODE XREF: sub_10002110+30j
		mov	eax, [esi+10h]
		mov	[esp+30h+Dst], eax
		mov	ecx, [esi+14h]

loc_10002180:				; CODE XREF: sub_10002110+4Cj
					; sub_10002110+58j ...
		cmp	dword ptr [ebp+0Ch], 3
		push	ebx
		mov	[esp+34h+Size],	ecx
		push	edi
		jz	short loc_100021B1
		push	ecx
		push	eax
		lea	eax, [esp+40h+Src]
		push	eax
		call	sub_1000E0A0
		push	14h
		pop	edi
		push	edi		; Size
		lea	eax, [esp+48h+Src]
		push	eax		; Src
		push	[esp+4Ch+Dst]	; Dst
		call	memcpy
		add	esp, 18h
		mov	[esp+38h+Size],	edi

loc_100021B1:				; CODE XREF: sub_10002110+7Aj
		push	0
		lea	eax, [esp+3Ch+var_20]
		push	eax
		lea	eax, [esp+40h+Dst]
		push	eax
		push	ebp
		call	sub_10001A13
		mov	ebx, eax
		add	esp, 10h
		test	ebx, ebx
		jz	short loc_10002217
		mov	ecx, [esp+38h+Size]
		inc	ecx
		push	ecx
		call	PORT_Alloc_Util
		mov	edi, eax
		pop	ecx
		test	edi, edi
		jz	short loc_10002217
		push	[esp+38h+Size]	; Size
		lea	ecx, [edi+1]
		push	[esp+3Ch+Dst]	; Src
		push	ecx		; Dst
		call	memcpy
		push	0
		lea	eax, [esp+48h+var_20]
		mov	byte ptr [edi],	0
		inc	[esp+48h+Size]
		push	eax
		lea	eax, [esp+4Ch+Dst]
		mov	[esp+4Ch+Dst], edi
		push	eax
		push	ebp
		call	sub_10001A13
		push	edi
		mov	ebx, eax
		call	PORT_Free_Util
		add	esp, 20h

loc_10002217:				; CODE XREF: sub_10002110+BAj
					; sub_10002110+CCj
		push	esi
		call	sub_10008EE1
		pop	ecx
		xor	eax, eax
		test	ebx, ebx
		pop	edi
		setz	al
		pop	ebx

loc_10002227:				; CODE XREF: sub_10002110+27j
		mov	ecx, [esp+30h+var_4]
		pop	esi
		pop	ebp
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 28h
		retn
sub_10002110	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10002238	proc near		; CODE XREF: sub_1000527E+3Cp
					; sub_1000527E+83p

var_10		= byte ptr -10h
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		mov	ecx, [ebp+arg_4]
		push	0
		mov	eax, [ecx+4]
		mov	[ebp+var_8], eax
		mov	eax, [ecx+8]
		mov	[ebp+var_4], eax
		lea	eax, [ebp+var_10]
		push	eax
		lea	eax, [ebp+var_8]
		push	eax
		push	[ebp+arg_0]
		call	sub_10001A13
		add	esp, 10h
		neg	eax
		sbb	eax, eax
		inc	eax
		mov	esp, ebp
		pop	ebp
		retn
sub_10002238	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000226B	proc near		; CODE XREF: sub_100022B1+6p
					; sub_100026D9+1Bp ...

arg_0		= dword	ptr  4

		push	esi
		push	24h
		call	PORT_ZAlloc_Util
		mov	esi, eax
		pop	ecx
		test	esi, esi
		jnz	short loc_10002289
		push	0FFFFE013h
		call	PORT_SetError_Util
		pop	ecx
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10002289:				; CODE XREF: sub_1000226B+Dj
		xor	eax, eax
		mov	dword ptr [esi+20h], 1
		mov	[esi+10h], eax
		mov	[esi+14h], eax
		mov	[esi+8], eax
		mov	[esi+4], eax
		mov	eax, [esp+4+arg_0]
		mov	[esi], eax
		call	ds:PR_NewLock
		mov	[esi+1Ch], eax
		mov	eax, esi
		pop	esi
		retn
sub_1000226B	endp


; =============== S U B	R O U T	I N E =======================================


sub_100022B1	proc near		; CODE XREF: sub_100077C3+4Cp

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	ebx
		push	ebp
		push	esi
		push	edi
		push	0
		call	sub_1000226B
		mov	edi, [esp+14h+arg_0]
		mov	esi, eax
		neg	edi
		push	3
		push	[esp+18h+arg_10]
		sbb	edi, edi
		and	edi, 0FFFFFFFEh
		add	edi, 2
		call	[esp+1Ch+arg_C]
		mov	ebx, eax
		add	esp, 0Ch
		test	ebx, ebx
		jz	loc_1000238F
		mov	ebp, [esp+10h+arg_4]
		test	ebp, ebp
		jz	short loc_100022F4
		push	ebp
		call	PORT_Strdup_Util
		pop	ecx
		jmp	short loc_100022F6
; ---------------------------------------------------------------------------

loc_100022F4:				; CODE XREF: sub_100022B1+38j
		xor	eax, eax

loc_100022F6:				; CODE XREF: sub_100022B1+41j
		mov	[esi+10h], eax
		test	ebp, ebp
		jnz	short loc_10002300
		push	ebx
		jmp	short loc_1000230B
; ---------------------------------------------------------------------------

loc_10002300:				; CODE XREF: sub_100022B1+4Aj
		cmp	[esp+10h+arg_8], 0
		jz	short loc_10002313
		push	[esp+10h+arg_8]

loc_1000230B:				; CODE XREF: sub_100022B1+4Dj
		call	PORT_Strdup_Util
		pop	ecx
		jmp	short loc_10002315
; ---------------------------------------------------------------------------

loc_10002313:				; CODE XREF: sub_100022B1+54j
		xor	eax, eax

loc_10002315:				; CODE XREF: sub_100022B1+60j
		push	edi		; int
		push	ebx		; Src
		push	[esp+18h+arg_8]	; int
		mov	[esi+14h], eax
		mov	eax, [esp+1Ch+arg_0]
		push	ebp		; int
		mov	[esi+18h], eax
		call	sub_10002B3C
		add	esp, 10h
		mov	[esi], eax
		test	eax, eax
		jz	short loc_10002349
		push	esi
		call	sub_10003294
		cmp	dword ptr [esi+0Ch], 0FFh
		pop	ecx
		jz	short loc_10002388
		cmp	dword ptr [esi], 0
		jnz	short loc_100023AC

loc_10002349:				; CODE XREF: sub_100022B1+81j
		cmp	[esp+10h+arg_0], 0
		jnz	short loc_10002388
		push	[esp+10h+arg_10] ; int
		push	[esp+14h+arg_C]	; int
		push	esi		; int
		push	ebx		; Src
		push	[esp+20h+arg_8]	; int
		push	ebp		; int
		call	sub_100029E8
		add	esp, 18h
		cmp	eax, 0FFFFFFFEh
		jnz	short loc_100023A8
		push	edi		; int
		push	ebx		; Src
		push	[esp+18h+arg_8]	; int
		push	ebp		; int
		call	sub_10002B3C
		push	esi
		mov	[esi], eax
		call	sub_10003294
		add	esp, 14h
		cmp	dword ptr [esi], 0
		jnz	short loc_100023AC

loc_10002388:				; CODE XREF: sub_100022B1+91j
					; sub_100022B1+9Dj ...
		push	ebx
		call	PORT_Free_Util
		pop	ecx

loc_1000238F:				; CODE XREF: sub_100022B1+2Cj
		push	0FFFFE012h
		call	PORT_SetError_Util
		push	esi
		call	sub_10001CFD
		xor	eax, eax

loc_100023A1:				; CODE XREF: sub_100022B1+10Cj
		pop	ecx
		pop	ecx
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_100023A8:				; CODE XREF: sub_100022B1+B9j
		test	eax, eax
		jnz	short loc_10002388

loc_100023AC:				; CODE XREF: sub_100022B1+96j
					; sub_100022B1+D5j
		push	esi
		call	sub_1000169A
		push	ebx
		mov	[esi+8], eax
		call	PORT_Free_Util
		mov	eax, esi
		jmp	short loc_100023A1
sub_100022B1	endp


; =============== S U B	R O U T	I N E =======================================


sub_100023BF	proc near		; CODE XREF: sub_10001B8C+76p

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= byte ptr -0Ch
var_8		= dword	ptr -8
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 18h
		and	[esp+18h+var_18], 0
		push	esi
		push	edi
		mov	edi, [esp+20h+arg_0]
		or	esi, 0FFFFFFFFh
		test	edi, edi
		jnz	short loc_100023DA
		or	eax, esi
		jmp	loc_100024FF
; ---------------------------------------------------------------------------

loc_100023DA:				; CODE XREF: sub_100023BF+12j
		and	[esp+20h+var_8], 0
		push	ebx
		push	800h
		mov	[esp+28h+var_14], offset aPasswordCheck	; "password-check"
		mov	[esp+28h+var_10], 0Eh
		call	PORT_NewArena_Util
		mov	ebx, eax
		pop	ecx
		test	ebx, ebx
		jnz	short loc_10002409
		or	eax, 0FFFFFFFFh
		jmp	loc_100024FE
; ---------------------------------------------------------------------------

loc_10002409:				; CODE XREF: sub_100023BF+40j
		lea	eax, [esp+24h+var_C]
		push	eax
		lea	eax, [esp+28h+var_18]
		push	eax
		mov	eax, [esp+2Ch+arg_4]
		add	eax, 0Ch
		push	eax
		call	sub_10001D67
		add	esp, 0Ch
		mov	[esp+24h+arg_0], eax
		test	eax, eax
		jz	loc_100024E1
		push	ebp
		push	24h
		push	ebx
		call	PORT_ArenaZAlloc_Util
		mov	ebp, eax
		pop	ecx
		pop	ecx
		test	ebp, ebp
		jz	loc_100024D3
		lea	eax, [esp+28h+var_C]
		mov	[ebp+0], ebx
		push	eax
		lea	ecx, [ebp+0Ch]
		push	ecx
		push	ebx
		call	SECITEM_CopyItem_Util
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		jnz	short loc_100024D3
		push	[esp+28h+arg_0]
		lea	eax, [ebp+18h]
		push	[esp+2Ch+var_18]
		push	eax
		push	ebx
		call	sub_10001861
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		jnz	short loc_100024D3
		push	1
		push	ebp
		lea	eax, [esp+30h+var_14]
		push	eax
		push	edi
		call	sub_10002B73
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		jnz	short loc_100024D3
		cmp	[edi+8], eax
		jz	short loc_100024A5
		push	1
		push	dword ptr [edi+8]
		call	SECITEM_FreeItem_Util
		and	[edi+8], esi
		pop	ecx
		pop	ecx

loc_100024A5:				; CODE XREF: sub_100023BF+D5j
		push	[esp+28h+arg_4]
		push	edi
		call	sub_100016D9
		mov	esi, eax
		pop	ecx
		pop	ecx
		test	esi, esi
		jnz	short loc_100024D3
		push	eax
		push	edi
		call	sub_10001AAC
		pop	ecx
		pop	ecx
		test	eax, eax
		jz	short loc_100024C9
		or	esi, 0FFFFFFFFh
		jmp	short loc_100024D3
; ---------------------------------------------------------------------------

loc_100024C9:				; CODE XREF: sub_100023BF+103j
		push	edi
		call	sub_1000169A
		pop	ecx
		mov	[edi+8], eax

loc_100024D3:				; CODE XREF: sub_100023BF+7Fj
					; sub_100023BF+9Ej ...
		push	1
		push	[esp+2Ch+arg_0]
		call	SECITEM_FreeItem_Util
		pop	ecx
		pop	ecx
		pop	ebp

loc_100024E1:				; CODE XREF: sub_100023BF+6Aj
		push	1
		push	ebx
		call	PORT_FreeArena_Util
		cmp	[esp+2Ch+var_8], 0
		pop	ecx
		pop	ecx
		jz	short loc_100024FC
		push	[esp+24h+var_8]
		call	PORT_Free_Util
		pop	ecx

loc_100024FC:				; CODE XREF: sub_100023BF+131j
		mov	eax, esi

loc_100024FE:				; CODE XREF: sub_100023BF+45j
		pop	ebx

loc_100024FF:				; CODE XREF: sub_100023BF+16j
		pop	edi
		pop	esi
		add	esp, 18h
		retn
sub_100023BF	endp


; =============== S U B	R O U T	I N E =======================================


sub_10002505	proc near		; CODE XREF: sub_10001C29+15p

arg_0		= dword	ptr  4

		push	ebp
		push	esi
		mov	esi, [esp+8+arg_0]
		xor	ebp, ebp
		push	edi
		mov	edi, ebp
		cmp	[esi], ebp
		jnz	short loc_1000251B
		xor	eax, eax
		jmp	loc_100025CD
; ---------------------------------------------------------------------------

loc_1000251B:				; CODE XREF: sub_10002505+Dj
		cmp	[esi+18h], ebp
		jz	short loc_10002528

loc_10002520:				; CODE XREF: sub_10002505+2Bj
					; sub_10002505+6Cj
		or	eax, 0FFFFFFFFh
		jmp	loc_100025CD
; ---------------------------------------------------------------------------

loc_10002528:				; CODE XREF: sub_10002505+19j
		cmp	[esi+10h], ebp
		jnz	short loc_10002532
		cmp	[esi+14h], ebp
		jz	short loc_10002520

loc_10002532:				; CODE XREF: sub_10002505+26j
		push	esi
		call	sub_100019F0
		pop	ecx
		push	ebp		; int
		cmp	[esi+10h], edi
		jz	short loc_10002556
		push	302h
		push	offset aKey	; "key"
		push	dword ptr [esi+14h]
		push	dword ptr [esi+10h]
		call	sub_10007A86
		jmp	short loc_1000256A
; ---------------------------------------------------------------------------

loc_10002556:				; CODE XREF: sub_10002505+38j
		push	1		; int
		push	180h		; int
		push	302h		; int
		push	dword ptr [esi+14h] ; Src
		call	sub_1000E2A0

loc_1000256A:				; CODE XREF: sub_10002505+4Fj
		add	esp, 14h
		mov	[esi], eax
		cmp	eax, ebp
		jz	short loc_10002520
		push	esi
		call	sub_10001CAA
		pop	ecx
		test	eax, eax
		jz	short loc_10002583
		xor	edi, edi
		inc	edi
		jmp	short loc_100025B6
; ---------------------------------------------------------------------------

loc_10002583:				; CODE XREF: sub_10002505+77j
		push	ebx
		cmp	[esi+8], edi
		jz	short loc_10002597
		push	dword ptr [esi+8]
		push	esi
		call	sub_100016D9
		pop	ecx
		mov	ebx, eax
		jmp	short loc_100025AD
; ---------------------------------------------------------------------------

loc_10002597:				; CODE XREF: sub_10002505+82j
		push	esi
		call	sub_10001C4C
		mov	ebx, eax
		pop	ecx
		test	ebx, ebx
		jnz	short loc_100025B2
		push	esi
		call	sub_1000169A
		mov	[esi+8], eax

loc_100025AD:				; CODE XREF: sub_10002505+90j
		pop	ecx
		test	ebx, ebx
		jz	short loc_100025B5

loc_100025B2:				; CODE XREF: sub_10002505+9Dj
		xor	edi, edi
		inc	edi

loc_100025B5:				; CODE XREF: sub_10002505+ABj
		pop	ebx

loc_100025B6:				; CODE XREF: sub_10002505+7Cj
		push	ebp
		push	esi
		call	sub_10001AAC
		push	dword ptr [esi]
		call	sub_10007474
		add	esp, 0Ch
		neg	edi
		sbb	edi, edi
		mov	eax, edi

loc_100025CD:				; CODE XREF: sub_10002505+11j
					; sub_10002505+1Ej
		pop	edi
		pop	esi
		pop	ebp
		retn
sub_10002505	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_100025D1	proc near		; CODE XREF: sub_1000572A+BFp
					; sub_10005B31+C7p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		push	0
		push	[ebp+arg_10]
		push	[ebp+arg_C]
		push	[ebp+arg_8]
		push	[ebp+arg_4]
		push	[ebp+arg_0]
		call	sub_100025EF
		add	esp, 18h
		pop	ebp
		retn
sub_100025D1	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_100025EF	proc near		; CODE XREF: sub_100025D1+14p
					; sub_10002981+14p ...

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ecx
		cmp	[ebp+arg_0], 0
		jnz	short loc_1000260A
		push	0FFFFE012h
		call	PORT_SetError_Util
		pop	ecx
		or	eax, 0FFFFFFFFh
		jmp	short loc_10002634
; ---------------------------------------------------------------------------

loc_1000260A:				; CODE XREF: sub_100025EF+9j
		push	[ebp+arg_14]
		mov	ecx, [ebp+arg_8]
		push	[ebp+arg_C]
		push	[ebp+arg_4]
		mov	eax, [ecx+4]
		push	[ebp+arg_10]
		mov	[ebp+var_8], eax
		mov	eax, [ecx+8]
		mov	[ebp+var_4], eax
		lea	eax, [ebp+var_8]
		push	eax
		push	[ebp+arg_0]
		call	sub_1000320C
		add	esp, 18h

loc_10002634:				; CODE XREF: sub_100025EF+19j
		mov	esp, ebp
		pop	ebp
		retn
sub_100025EF	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10002638	proc near		; CODE XREF: sub_10006D5B+12Ep

var_10		= byte ptr -10h
var_C		= dword	ptr -0Ch
Buf1		= dword	ptr -8
Size		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		cmp	[ebp+arg_0], 0
		jnz	short loc_1000264C

loc_10002644:				; CODE XREF: sub_10002638+2Bj
		or	eax, 0FFFFFFFFh
		jmp	loc_100026D5
; ---------------------------------------------------------------------------

loc_1000264C:				; CODE XREF: sub_10002638+Aj
		push	3
		lea	eax, [ebp+var_10]
		push	eax
		lea	eax, [ebp+Buf1]
		push	eax
		push	[ebp+arg_0]
		call	sub_10001A79
		add	esp, 10h
		test	eax, eax
		jnz	short loc_10002644

loc_10002665:				; CODE XREF: sub_10002638+99j
		cmp	[ebp+var_C], 1
		jbe	short loc_100026BA
		mov	eax, [ebp+Size]
		cmp	eax, 0Bh
		jnz	short loc_1000268B
		push	eax		; Size
		push	offset aGlobalSalt ; "global-salt"
		push	[ebp+Buf1]	; Buf1
		call	memcmp
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_100026BA
		mov	eax, [ebp+Size]

loc_1000268B:				; CODE XREF: sub_10002638+39j
		cmp	eax, 0Eh
		jnz	short loc_100026A5
		push	eax		; Size
		push	offset aPasswordCheck ;	"password-check"
		push	[ebp+Buf1]	; Buf1
		call	memcmp
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_100026BA

loc_100026A5:				; CODE XREF: sub_10002638+56j
		push	[ebp+arg_8]
		lea	eax, [ebp+var_10]
		push	eax
		lea	eax, [ebp+Buf1]
		push	eax
		call	[ebp+arg_4]
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_100026D5

loc_100026BA:				; CODE XREF: sub_10002638+31j
					; sub_10002638+4Ej ...
		push	7
		lea	eax, [ebp+var_10]
		push	eax
		lea	eax, [ebp+Buf1]
		push	eax
		push	[ebp+arg_0]
		call	sub_10001A79
		add	esp, 10h
		test	eax, eax
		jz	short loc_10002665
		xor	eax, eax

loc_100026D5:				; CODE XREF: sub_10002638+Fj
					; sub_10002638+80j
		mov	esp, ebp
		pop	ebp
		retn
sub_10002638	endp


; =============== S U B	R O U T	I N E =======================================


sub_100026D9	proc near		; CODE XREF: sub_100029E8+F0p

var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
Buf1		= dword	ptr -3Ch
Size		= dword	ptr -38h
Buf2		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= byte ptr -24h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_8		= dword	ptr -8
arg_0		= dword	ptr  4

		sub	esp, 44h
		push	ebx
		push	ebp
		mov	ebp, [esp+4Ch+arg_0]
		xor	ebx, ebx
		push	edi
		xor	edi, edi
		cmp	[ebp+4], ebx
		jz	loc_10002978
		push	esi
		push	dword ptr [ebp+4]
		call	sub_1000226B
		mov	esi, eax
		mov	[esp+58h+var_44], esi
		pop	ecx
		test	esi, esi
		jz	loc_10002977
		and	[ebp+4], ebx
		push	esi
		call	sub_1000299F
		pop	ecx
		cmp	al, 2
		jnz	loc_1000294D
		push	edi
		lea	eax, [esp+58h+var_24]
		mov	[esp+58h+var_2C], offset aGlobalSalt ; "global-salt"
		push	eax
		lea	eax, [esp+5Ch+var_2C]
		mov	[esp+5Ch+var_28], 0Bh
		push	eax
		push	esi
		call	sub_10001A13
		add	esp, 10h
		test	eax, eax
		jnz	loc_1000294D
		lea	eax, [esp+54h+var_24]
		push	eax
		call	sub_10001719
		mov	[esp+58h+arg_0], eax
		pop	ecx
		test	eax, eax
		jz	loc_1000294B
		push	edi
		lea	eax, [esp+58h+var_8]
		mov	[esp+58h+Buf2],	offset aPasswordCheck ;	"password-check"
		push	eax
		lea	eax, [esp+5Ch+Buf2]
		mov	[esp+5Ch+var_30], 0Eh
		push	eax
		push	esi
		call	sub_10001A13
		add	esp, 10h
		test	eax, eax
		jz	short loc_100027F1
		push	esi
		call	sub_10002BD3
		pop	ecx
		test	eax, eax
		jz	loc_10002945
		push	edi
		lea	eax, [esp+58h+var_24]
		mov	[esp+58h+var_14], offset aFakePasswordCh ; "fake-password-check"
		push	eax
		lea	eax, [esp+5Ch+var_2C]
		mov	[esp+5Ch+var_10], 13h
		push	eax
		push	ebp
		mov	[esp+64h+var_44], offset a1 ; "1"
		mov	[esp+64h+var_40], 1
		call	sub_10001A46
		add	esp, 10h
		test	eax, eax
		jnz	loc_10002945
		push	edi
		lea	eax, [esp+58h+var_44]
		push	eax
		lea	eax, [esp+5Ch+var_14]
		push	eax
		push	ebp
		call	sub_10001A46
		add	esp, 10h
		test	eax, eax
		jnz	loc_10002945
		jmp	loc_10002875
; ---------------------------------------------------------------------------

loc_100027F1:				; CODE XREF: sub_100026D9+AAj
		push	edi
		lea	eax, [esp+58h+var_24]
		push	eax
		lea	eax, [esp+5Ch+var_2C]
		push	eax
		push	ebp
		call	sub_10001A46
		add	esp, 10h
		test	eax, eax
		jnz	loc_10002945
		lea	eax, [esp+54h+var_8]
		push	2		; Size
		push	eax		; int
		call	sub_10001763
		mov	ebx, eax
		pop	ecx
		pop	ecx
		test	ebx, ebx
		jz	loc_10002945
		lea	ecx, [ebx+18h]
		mov	esi, ecx
		lea	edi, [esp+54h+var_14]
		lea	eax, [esp+54h+var_14]
		push	eax
		push	6
		movsd
		push	ecx
		movsd
		movsd
		xor	edi, edi
		push	edi
		mov	[ebx+1Ch], edi
		call	sub_10001861
		add	esp, 10h
		test	eax, eax
		jnz	loc_10002941
		push	1
		push	ebx
		lea	eax, [esp+5Ch+Buf2]
		push	eax
		push	ebp
		call	sub_10002B73
		add	esp, 10h
		test	eax, eax
		jnz	loc_10002941
		push	ebx
		call	sub_10008EE1
		mov	esi, [esp+58h+var_44]
		mov	ebx, edi
		pop	ecx

loc_10002875:				; CODE XREF: sub_100026D9+113j
		push	3
		lea	eax, [esp+58h+var_1C]
		push	eax
		lea	eax, [esp+5Ch+Buf1]
		push	eax
		push	esi
		call	sub_10001A79
		add	esp, 10h
		test	eax, eax
		jnz	loc_10002945

loc_10002892:				; CODE XREF: sub_100026D9+25Ej
		cmp	[esp+54h+var_18], 1
		jbe	loc_10002920
		mov	ecx, [esp+54h+Size]
		cmp	ecx, 0Bh
		jnz	short loc_100028C0
		push	ecx		; Size
		push	offset aGlobalSalt ; "global-salt"
		push	[esp+5Ch+Buf1]	; Buf1
		call	memcmp
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_10002920
		mov	ecx, [esp+54h+Size]

loc_100028C0:				; CODE XREF: sub_100026D9+1CBj
		cmp	ecx, [esp+54h+var_30]
		jnz	short loc_100028DF
		push	ecx		; Size
		push	[esp+58h+Buf2]	; Buf2
		push	[esp+5Ch+Buf1]	; Buf1
		call	memcmp
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_10002920
		mov	ecx, [esp+54h+Size]

loc_100028DF:				; CODE XREF: sub_100026D9+1EBj
		mov	eax, [esp+54h+Buf1]
		cmp	byte ptr [eax+ecx-1], 0
		jnz	short loc_10002920
		lea	eax, [esp+54h+var_1C]
		push	2		; Size
		push	eax		; int
		call	sub_10001763
		mov	edi, eax
		pop	ecx
		pop	ecx
		test	edi, edi
		jz	short loc_10002920
		mov	ecx, [esp+54h+Buf1]
		lea	eax, [esp+54h+Buf1]
		push	0
		push	edi
		push	eax
		push	ebp
		mov	[edi+8], ecx
		call	sub_10002B73
		and	dword ptr [edi+8], 0
		push	edi
		call	sub_10008EE1
		add	esp, 14h

loc_10002920:				; CODE XREF: sub_100026D9+1BEj
					; sub_100026D9+1E1j ...
		push	7
		lea	eax, [esp+58h+var_1C]
		push	eax
		lea	eax, [esp+5Ch+Buf1]
		push	eax
		push	esi
		call	sub_10001A79
		add	esp, 10h
		test	eax, eax
		jz	loc_10002892
		xor	ebx, ebx
		jmp	short loc_10002945
; ---------------------------------------------------------------------------

loc_10002941:				; CODE XREF: sub_100026D9+170j
					; sub_100026D9+189j
		mov	esi, [esp+54h+var_44]

loc_10002945:				; CODE XREF: sub_100026D9+B5j
					; sub_100026D9+F1j ...
		mov	edi, [esp+54h+arg_0]
		jmp	short loc_1000294D
; ---------------------------------------------------------------------------

loc_1000294B:				; CODE XREF: sub_100026D9+7Ej
		mov	edi, eax

loc_1000294D:				; CODE XREF: sub_100026D9+3Bj
					; sub_100026D9+67j ...
		push	0
		push	ebp
		call	sub_10001AAC
		push	esi
		call	sub_10001CFD
		add	esp, 0Ch
		test	edi, edi
		jz	short loc_1000296C
		push	1
		push	edi
		call	SECITEM_FreeItem_Util
		pop	ecx
		pop	ecx

loc_1000296C:				; CODE XREF: sub_100026D9+287j
		test	ebx, ebx
		jz	short loc_10002977
		push	ebx
		call	sub_10008EE1
		pop	ecx

loc_10002977:				; CODE XREF: sub_100026D9+29j
					; sub_100026D9+295j
		pop	esi

loc_10002978:				; CODE XREF: sub_100026D9+11j
		pop	edi
		pop	ebp
		xor	eax, eax
		pop	ebx
		add	esp, 44h
		retn
sub_100026D9	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10002981	proc near		; CODE XREF: sub_10004C8F+104p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		push	1
		push	[ebp+arg_10]
		push	[ebp+arg_C]
		push	[ebp+arg_8]
		push	[ebp+arg_4]
		push	[ebp+arg_0]
		call	sub_100025EF
		add	esp, 18h
		pop	ebp
		retn
sub_10002981	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_1000299F	proc near		; CODE XREF: sub_100026D9+33p
					; sub_100029E8+67p ...

var_10		= dword	ptr -10h
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		mov	eax, [ebp+arg_0]
		mov	[ebp+var_8], offset aVersion ; "Version"
		mov	[ebp+var_4], 7
		cmp	dword ptr [eax], 0
		jnz	short loc_100029BF

loc_100029BB:				; CODE XREF: sub_1000299F+35j
		or	al, 0FFh
		jmp	short loc_100029E4
; ---------------------------------------------------------------------------

loc_100029BF:				; CODE XREF: sub_1000299F+1Aj
		push	0
		lea	ecx, [ebp+var_10]
		push	ecx
		lea	ecx, [ebp+var_8]
		push	ecx
		push	eax
		call	sub_10001A13
		add	esp, 10h
		test	eax, eax
		js	short loc_100029BB
		cmp	eax, 1
		jl	short loc_100029DF
		xor	al, al
		jmp	short loc_100029E4
; ---------------------------------------------------------------------------

loc_100029DF:				; CODE XREF: sub_1000299F+3Aj
		mov	eax, [ebp+var_10]
		mov	al, [eax]

loc_100029E4:				; CODE XREF: sub_1000299F+1Ej
					; sub_1000299F+3Ej
		mov	esp, ebp
		pop	ebp
		retn
sub_1000299F	endp


; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_100029E8(int,	int, char *Src,	int, int, int)
sub_100029E8	proc near		; CODE XREF: sub_100022B1+AEp

var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
Src		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		push	ecx
		push	ebx
		mov	ebx, [esp+8+arg_0]
		push	esi
		push	edi
		xor	edi, edi
		mov	[esp+10h+var_4], 1
		test	ebx, ebx
		jz	short loc_10002A19
		lea	eax, [esp+10h+var_4]
		push	eax
		push	302h
		push	offset aKey	; "key"
		push	[esp+1Ch+arg_4]
		push	ebx
		call	sub_10007A86
		jmp	short loc_10002A2F
; ---------------------------------------------------------------------------

loc_10002A19:				; CODE XREF: sub_100029E8+14j
		push	edi		; int
		push	1		; int
		push	180h		; int
		push	302h		; int
		push	[esp+20h+Src]	; Src
		call	sub_1000E2A0

loc_10002A2F:				; CODE XREF: sub_100029E8+2Fj
		mov	esi, [esp+24h+arg_C]
		add	esp, 14h
		mov	[esi], eax
		cmp	eax, edi
		jnz	short loc_10002A4E
		xor	eax, eax
		cmp	[esp+10h+var_4], 2
		setnz	al
		sub	eax, 2
		jmp	loc_10002B07
; ---------------------------------------------------------------------------

loc_10002A4E:				; CODE XREF: sub_100029E8+52j
		push	esi
		call	sub_1000299F
		pop	ecx
		cmp	al, 3
		jnz	short loc_10002A68
		push	dword ptr [esi]
		call	sub_10007474
		pop	ecx
		xor	eax, eax
		jmp	loc_10002B07
; ---------------------------------------------------------------------------

loc_10002A68:				; CODE XREF: sub_100029E8+6Fj
		push	ebp
		test	ebx, ebx
		jz	short loc_10002A9A
		push	edi		; int
		push	1		; int
		push	180h		; int
		push	edi		; int
		push	[esp+24h+Src]	; Src
		call	sub_1000E2A0
		mov	ebx, eax
		add	esp, 14h
		test	ebx, ebx
		jz	short loc_10002A9A
		push	ebx
		call	sub_1000226B
		mov	ebp, eax
		pop	ecx
		test	ebp, ebp
		jnz	short loc_10002B0C
		push	ebx
		call	dword ptr [ebx+4]

loc_10002A99:				; CODE XREF: sub_100029E8+13Cj
		pop	ecx

loc_10002A9A:				; CODE XREF: sub_100029E8+83j
					; sub_100029E8+9Ej
		push	esi
		call	sub_10001CAA
		pop	ecx
		test	eax, eax
		jnz	short loc_10002AFA
		push	2
		push	[esp+18h+arg_14]
		call	[esp+1Ch+arg_10]
		mov	ebx, eax
		pop	ecx
		pop	ecx
		test	ebx, ebx
		jz	short loc_10002AE2
		push	edi		; int
		push	1		; int
		push	180h		; int
		push	edi		; int
		push	ebx		; Src
		call	sub_1000E2A0
		push	ebx
		mov	[esi+4], eax
		call	PORT_Free_Util
		add	esp, 18h
		cmp	[esi+4], edi
		jz	short loc_10002AE2
		push	esi
		call	sub_100026D9
		pop	ecx
		test	eax, eax
		jz	short loc_10002AED

loc_10002AE2:				; CODE XREF: sub_100029E8+CDj
					; sub_100029E8+EDj
		push	esi
		call	sub_10001C4C
		pop	ecx
		test	eax, eax
		jnz	short loc_10002AFA

loc_10002AED:				; CODE XREF: sub_100029E8+F8j
		push	edi
		push	esi
		call	sub_10001AAC
		neg	eax
		pop	ecx
		pop	ecx
		sbb	eax, eax

loc_10002AFA:				; CODE XREF: sub_100029E8+BBj
					; sub_100029E8+103j
		mov	edi, eax

loc_10002AFC:				; CODE XREF: sub_100029E8+152j
		push	dword ptr [esi]
		call	sub_10007474
		pop	ecx
		mov	eax, edi
		pop	ebp

loc_10002B07:				; CODE XREF: sub_100029E8+61j
					; sub_100029E8+7Bj
		pop	edi
		pop	esi
		pop	ebx
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_10002B0C:				; CODE XREF: sub_100029E8+ABj
		push	ebp
		call	sub_1000299F
		movzx	eax, al
		mov	[esi+0Ch], eax
		pop	ecx
		cmp	eax, 3
		jz	short loc_10002B29
		push	ebp
		call	sub_10001CFD
		jmp	loc_10002A99
; ---------------------------------------------------------------------------

loc_10002B29:				; CODE XREF: sub_100029E8+134j
		push	ebx
		push	dword ptr [esi]
		call	sub_10007404
		push	ebp
		call	sub_10001CFD
		add	esp, 0Ch
		jmp	short loc_10002AFC
sub_100029E8	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_10002B3C(int,	int, char *Src,	int)
sub_10002B3C	proc near		; CODE XREF: sub_100022B1+75p
					; sub_100022B1+C2p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
Src		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		cmp	[ebp+arg_0], 0
		push	0		; int
		jz	short loc_10002B5C
		push	[ebp+arg_C]
		push	offset aKey	; "key"
		push	[ebp+arg_4]
		push	[ebp+arg_0]
		call	sub_10007A86
		jmp	short loc_10002B6E
; ---------------------------------------------------------------------------

loc_10002B5C:				; CODE XREF: sub_10002B3C+9j
		push	1		; int
		push	180h		; int
		push	[ebp+arg_C]	; int
		push	[ebp+Src]	; Src
		call	sub_1000E2A0

loc_10002B6E:				; CODE XREF: sub_10002B3C+1Ej
		add	esp, 14h
		pop	ebp
		retn
sub_10002B3C	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10002B73	proc near		; CODE XREF: sub_100023BF+C4p
					; sub_100026D9+17Fp ...

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	esi
		push	edi
		mov	edi, [ebp+arg_0]
		movzx	eax, byte ptr [edi+0Ch]
		push	eax
		push	[ebp+arg_8]
		call	sub_100018E5
		mov	esi, eax
		pop	ecx
		pop	ecx
		test	esi, esi
		jz	short loc_10002BCC
		cmp	[ebp+arg_C], 0
		jz	short loc_10002B9A
		push	0
		jmp	short loc_10002B9C
; ---------------------------------------------------------------------------

loc_10002B9A:				; CODE XREF: sub_10002B73+21j
		push	8

loc_10002B9C:				; CODE XREF: sub_10002B73+25j
		push	esi
		push	[ebp+arg_4]
		push	edi
		call	sub_10001A46
		add	esp, 10h
		test	eax, eax
		jnz	short loc_10002BC5
		push	eax
		push	edi
		call	sub_10001AAC
		pop	ecx
		pop	ecx
		test	eax, eax
		jnz	short loc_10002BC5
		push	esi
		call	sub_10001996
		pop	ecx
		xor	eax, eax
		jmp	short loc_10002BCF
; ---------------------------------------------------------------------------

loc_10002BC5:				; CODE XREF: sub_10002B73+38j
					; sub_10002B73+45j
		push	esi
		call	sub_10001996
		pop	ecx

loc_10002BCC:				; CODE XREF: sub_10002B73+1Bj
		or	eax, 0FFFFFFFFh

loc_10002BCF:				; CODE XREF: sub_10002B73+50j
		pop	edi
		pop	esi
		pop	ebp
		retn
sub_10002B73	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10002BD3	proc near		; CODE XREF: sub_100026D9+ADp

var_10		= byte ptr -10h
var_C		= dword	ptr -0Ch
Buf1		= dword	ptr -8
Size		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		lea	eax, [ebp+var_10]
		push	esi
		push	3
		push	eax
		lea	eax, [ebp+Buf1]
		xor	esi, esi
		push	eax
		push	[ebp+arg_0]
		call	sub_10001A79
		add	esp, 10h
		test	eax, eax
		jz	short loc_10002BF9
		xor	eax, eax
		jmp	short loc_10002C77
; ---------------------------------------------------------------------------

loc_10002BF9:				; CODE XREF: sub_10002BD3+20j
					; sub_10002BD3+9Bj
		cmp	[ebp+var_C], 1
		jbe	short loc_10002C57
		mov	eax, [ebp+Size]
		cmp	eax, 0Bh
		jnz	short loc_10002C1F
		push	eax		; Size
		push	offset aGlobalSalt ; "global-salt"
		push	[ebp+Buf1]	; Buf1
		call	memcmp
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_10002C57
		mov	eax, [ebp+Size]

loc_10002C1F:				; CODE XREF: sub_10002BD3+32j
		cmp	eax, 0Eh
		jnz	short loc_10002C3C
		push	eax		; Size
		push	offset aPasswordCheck ;	"password-check"
		push	[ebp+Buf1]	; Buf1
		call	memcmp
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_10002C57
		mov	eax, [ebp+Size]

loc_10002C3C:				; CODE XREF: sub_10002BD3+4Fj
		mov	ecx, [ebp+Buf1]
		cmp	byte ptr [ecx+eax-1], 0
		jnz	short loc_10002C57
		push	offset aServerKey ; "Server-Key"
		push	ecx		; Str1
		call	strcmp
		pop	ecx
		pop	ecx
		test	eax, eax
		jz	short loc_10002C72

loc_10002C57:				; CODE XREF: sub_10002BD3+2Aj
					; sub_10002BD3+47j ...
		push	7
		lea	eax, [ebp+var_10]
		push	eax
		lea	eax, [ebp+Buf1]
		push	eax
		push	[ebp+arg_0]
		call	sub_10001A79
		add	esp, 10h
		test	eax, eax
		jz	short loc_10002BF9
		jmp	short loc_10002C75
; ---------------------------------------------------------------------------

loc_10002C72:				; CODE XREF: sub_10002BD3+82j
		xor	esi, esi
		inc	esi

loc_10002C75:				; CODE XREF: sub_10002BD3+9Dj
		mov	eax, esi

loc_10002C77:				; CODE XREF: sub_10002BD3+24j
		pop	esi
		mov	esp, ebp
		pop	ebp
		retn
sub_10002BD3	endp


; =============== S U B	R O U T	I N E =======================================


sub_10002C7C	proc near		; CODE XREF: sub_100031A0+51p

var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= byte ptr -18h
var_C		= byte ptr -0Ch
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 20h
		push	ebx
		push	esi
		xor	esi, esi
		and	[esp+28h+var_1C], esi
		push	edi
		or	edi, 0FFFFFFFFh
		cmp	[esp+2Ch+arg_0], esi
		jz	loc_10002FBD
		cmp	[esp+2Ch+arg_4], esi
		jz	loc_10002FBD
		mov	ebx, 800h
		push	ebx
		call	PORT_NewArena_Util
		push	ebx
		mov	[esp+34h+var_20], eax
		call	PORT_NewArena_Util
		mov	ebx, eax
		mov	eax, [esp+34h+var_20]
		pop	ecx
		pop	ecx
		test	eax, eax
		jz	loc_10002F97
		test	ebx, ebx
		jz	loc_10002F8D
		push	ebp
		push	38h
		push	eax
		call	PORT_ArenaZAlloc_Util
		push	0B0h
		push	ebx
		mov	ebp, eax
		call	PORT_ArenaZAlloc_Util
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		jz	loc_10002F88
		test	ebp, ebp
		jz	loc_10002F88
		lea	eax, [esp+30h+var_1C]
		mov	[esi], ebx
		push	eax
		push	[esp+34h+arg_0]
		push	[esp+38h+arg_4]
		call	sub_10008069
		mov	edi, eax
		add	esp, 0Ch
		test	edi, edi
		jnz	loc_10002F88
		cmp	[esp+30h+var_1C], eax
		jz	loc_10002F88
		push	[esp+30h+var_1C]
		push	offset dword_100138B0
		push	ebp
		push	[esp+3Ch+var_20]
		call	SEC_QuickDERDecodeItem_Util
		mov	edi, eax
		add	esp, 10h
		test	edi, edi
		jnz	loc_10002F71
		lea	eax, [ebp+10h]
		push	eax
		call	SECOID_GetAlgorithmTag_Util
		pop	ecx
		sub	eax, 10h
		jz	loc_10002EDA
		sub	eax, 51h
		jz	loc_10002EDA
		sub	eax, 1Bh
		jz	loc_10002E5F
		sub	eax, 32h
		jz	loc_10002E1D
		sub	eax, 1Ah
		jz	short loc_10002D7D

loc_10002D75:				; CODE XREF: sub_10002C7C+2F0j
		or	edi, 0FFFFFFFFh
		jmp	loc_10002F88
; ---------------------------------------------------------------------------

loc_10002D7D:				; CODE XREF: sub_10002C7C+F7j
		push	esi
		mov	dword ptr [esi+4], 5
		call	sub_10008F25
		lea	eax, [ebp+28h]
		push	eax
		lea	eax, [esp+38h+var_18]
		push	eax
		push	ebx
		call	SECITEM_CopyItem_Util
		add	esp, 10h
		test	eax, eax
		jnz	loc_10002F88
		lea	eax, [esp+30h+var_18]
		push	eax
		push	offset dword_10013850
		push	esi
		push	ebx
		call	SEC_QuickDERDecodeItem_Util
		mov	edi, eax
		add	esp, 10h
		test	edi, edi
		jnz	loc_10002F88
		lea	eax, [esi+8]
		push	eax
		call	sub_10008F48
		lea	eax, [ebp+1Ch]
		push	eax
		lea	ecx, [esi+70h]
		push	ecx
		push	ebx
		call	SECITEM_CopyItem_Util
		mov	edi, eax
		add	esp, 10h
		test	edi, edi
		jnz	loc_10002F88
		lea	eax, [esi+8]
		push	eax
		lea	eax, [esi+70h]
		push	eax
		push	ebx
		call	sub_10008C7B
		mov	edi, eax
		add	esp, 0Ch
		test	edi, edi
		jnz	loc_10002F88
		mov	eax, [esi+94h]
		test	eax, eax
		jz	loc_10002F88
		shr	eax, 3
		mov	[esi+94h], eax
		jmp	loc_10002F88
; ---------------------------------------------------------------------------

loc_10002E1D:				; CODE XREF: sub_10002C7C+EEj
		push	esi
		mov	dword ptr [esi+4], 4
		call	sub_10008EFA
		lea	eax, [ebp+28h]
		push	eax
		lea	eax, [esp+38h+var_18]
		push	eax
		push	ebx
		call	SECITEM_CopyItem_Util
		add	esp, 10h
		test	eax, eax
		jnz	loc_10002F88
		lea	eax, [esp+30h+var_18]
		push	eax
		push	offset dword_100137C0
		push	esi

loc_10002E4F:				; CODE XREF: sub_10002C7C+259j
		push	ebx
		call	SEC_QuickDERDecodeItem_Util
		add	esp, 10h
		mov	edi, eax
		jmp	loc_10002F88
; ---------------------------------------------------------------------------

loc_10002E5F:				; CODE XREF: sub_10002C7C+E5j
		push	esi
		mov	dword ptr [esi+4], 2
		call	sub_10008F0E
		lea	eax, [ebp+28h]
		push	eax
		lea	eax, [esp+38h+var_18]
		push	eax
		push	ebx
		call	SECITEM_CopyItem_Util
		add	esp, 10h
		test	eax, eax
		jnz	loc_10002F88
		lea	eax, [esp+30h+var_18]
		push	eax
		push	offset dword_10013780
		push	esi
		push	ebx
		call	SEC_QuickDERDecodeItem_Util
		mov	edi, eax
		add	esp, 10h
		test	edi, edi
		jnz	loc_10002F88
		lea	eax, [esi+8]
		push	eax
		call	sub_10008F56
		lea	eax, [ebp+1Ch]
		push	eax
		lea	eax, [esp+38h+var_C]
		push	eax
		push	ebx
		call	SECITEM_CopyItem_Util
		add	esp, 10h
		test	eax, eax
		jnz	loc_10002F88
		lea	eax, [esp+30h+var_C]
		push	eax
		push	offset dword_100135D0
		lea	eax, [esi+8]
		push	eax
		jmp	loc_10002E4F
; ---------------------------------------------------------------------------

loc_10002EDA:				; CODE XREF: sub_10002C7C+D3j
					; sub_10002C7C+DCj
		push	esi
		mov	dword ptr [esi+4], 1
		call	sub_10008F67
		lea	eax, [ebp+28h]
		push	eax
		lea	eax, [esp+38h+var_18]
		push	eax
		push	ebx
		call	SECITEM_CopyItem_Util
		add	esp, 10h
		test	eax, eax
		jnz	loc_10002F88
		lea	eax, [esp+30h+var_18]
		push	eax
		push	offset dword_10013620
		push	esi
		push	ebx
		call	SEC_QuickDERDecodeItem_Util
		mov	edi, eax
		add	esp, 10h
		test	edi, edi
		jz	short loc_10002F88
		lea	eax, [esp+30h+var_18]
		push	eax
		push	offset dword_100136D0
		push	esi
		push	ebx
		call	SEC_QuickDERDecodeItem_Util
		mov	edi, eax
		add	esp, 10h
		test	edi, edi
		jnz	short loc_10002F88
		cmp	dword ptr [esi+20h], 2
		jnz	short loc_10002F61
		mov	eax, [esi+1Ch]
		cmp	byte ptr [eax],	2
		jnz	short loc_10002F61
		cmp	byte ptr [eax+1], 0
		jnz	short loc_10002F61
		xor	ecx, ecx
		inc	ecx
		cmp	[esi+2Ch], ecx
		jnz	short loc_10002F61
		mov	eax, [esi+28h]
		cmp	byte ptr [eax],	0
		jnz	short loc_10002F61
		mov	[esi+1Ch], eax
		mov	[esi+20h], ecx
		jmp	short loc_10002F88
; ---------------------------------------------------------------------------

loc_10002F61:				; CODE XREF: sub_10002C7C+2BDj
					; sub_10002C7C+2C5j ...
		push	0FFFFE009h
		call	PORT_SetError_Util
		pop	ecx
		jmp	loc_10002D75
; ---------------------------------------------------------------------------

loc_10002F71:				; CODE XREF: sub_10002C7C+C0j
		call	PORT_GetError_Util
		cmp	eax, 0FFFFE009h
		jnz	short loc_10002F88
		push	0FFFFE00Fh
		call	PORT_SetError_Util
		pop	ecx

loc_10002F88:				; CODE XREF: sub_10002C7C+6Dj
					; sub_10002C7C+75j ...
		mov	eax, [esp+30h+var_20]
		pop	ebp

loc_10002F8D:				; CODE XREF: sub_10002C7C+4Aj
		push	1
		push	eax
		call	PORT_FreeArena_Util
		pop	ecx
		pop	ecx

loc_10002F97:				; CODE XREF: sub_10002C7C+42j
		cmp	[esp+2Ch+var_1C], 0
		jz	short loc_10002FAB
		push	1
		push	[esp+30h+var_1C]
		call	SECITEM_ZfreeItem_Util
		pop	ecx
		pop	ecx

loc_10002FAB:				; CODE XREF: sub_10002C7C+320j
		test	edi, edi
		jz	short loc_10002FBF
		test	ebx, ebx
		jz	short loc_10002FBD
		push	1
		push	ebx
		call	PORT_FreeArena_Util
		pop	ecx
		pop	ecx

loc_10002FBD:				; CODE XREF: sub_10002C7C+13j
					; sub_10002C7C+1Dj ...
		xor	esi, esi

loc_10002FBF:				; CODE XREF: sub_10002C7C+331j
		pop	edi
		mov	eax, esi
		pop	esi
		pop	ebx
		add	esp, 20h
		retn
sub_10002C7C	endp


; =============== S U B	R O U T	I N E =======================================


sub_10002FC8	proc near		; CODE XREF: sub_1000320C+55p

var_1C		= dword	ptr -1Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ecx
		push	ecx
		and	[esp+8+var_8], 0
		push	esi
		push	edi
		push	800h
		or	esi, 0FFFFFFFFh
		call	PORT_NewArena_Util
		mov	edi, eax
		pop	ecx
		test	edi, edi
		jz	loc_10003199
		push	ebp
		push	38h
		push	edi
		call	PORT_ArenaZAlloc_Util
		push	0Ch
		push	edi
		mov	ebp, eax
		call	PORT_ArenaZAlloc_Util
		add	esp, 10h
		mov	[esp+14h+var_4], eax
		test	ebp, ebp
		jz	loc_1000318E
		test	eax, eax
		jz	loc_1000318E
		push	0
		lea	eax, [ebp+4]
		push	eax
		push	edi
		call	SEC_ASN1EncodeInteger_Util
		add	esp, 0Ch
		test	eax, eax
		jz	loc_1000318E
		push	ebx
		mov	ebx, [esp+18h+arg_4]
		mov	eax, [ebx+4]
		dec	eax
		jz	loc_1000310B
		dec	eax
		jz	loc_100030C7
		dec	eax
		dec	eax
		jz	short loc_1000309C
		dec	eax
		jnz	loc_10003142
		push	ebx
		call	sub_10008F25
		mov	esi, [ebx+88h]
		lea	eax, [ebp+28h]
		shl	dword ptr [ebx+94h], 3
		and	dword ptr [ebx+88h], 0
		mov	[esp+1Ch+var_1C], offset dword_10013850
		push	ebx
		push	eax
		push	edi
		call	SEC_ASN1EncodeItem_Util
		shr	dword ptr [ebx+94h], 3
		add	esp, 10h
		mov	[ebx+88h], esi
		test	eax, eax
		jz	loc_10003159
		lea	eax, [ebx+70h]
		push	eax
		push	0C8h
		jmp	loc_1000312E
; ---------------------------------------------------------------------------

loc_1000309C:				; CODE XREF: sub_10002FC8+79j
		push	ebx
		call	sub_10008EFA
		mov	[esp+1Ch+var_1C], offset dword_100137C0
		lea	eax, [ebp+28h]
		push	ebx
		push	eax
		push	edi
		call	SEC_ASN1EncodeItem_Util
		add	esp, 10h
		test	eax, eax
		jz	loc_10003159
		push	eax
		push	0AEh
		jmp	short loc_1000312E
; ---------------------------------------------------------------------------

loc_100030C7:				; CODE XREF: sub_10002FC8+71j
		push	ebx
		call	sub_10008F0E
		mov	[esp+1Ch+var_1C], offset dword_10013780
		lea	eax, [ebp+28h]
		push	ebx
		push	eax
		push	edi
		call	SEC_ASN1EncodeItem_Util
		add	esp, 10h
		test	eax, eax
		jz	short loc_10003159
		lea	esi, [ebx+8]
		push	esi
		call	sub_10008F56
		mov	[esp+1Ch+var_1C], offset dword_100135D0
		push	esi
		push	0
		push	edi
		call	SEC_ASN1EncodeItem_Util
		add	esp, 10h
		test	eax, eax
		jz	short loc_10003159
		push	eax
		push	7Ch
		jmp	short loc_1000312E
; ---------------------------------------------------------------------------

loc_1000310B:				; CODE XREF: sub_10002FC8+6Aj
		push	ebx
		call	sub_10008F67
		mov	[esp+1Ch+var_1C], offset dword_10013620
		lea	eax, [ebp+28h]
		push	ebx
		push	eax
		push	edi
		call	SEC_ASN1EncodeItem_Util
		add	esp, 10h
		test	eax, eax
		jz	short loc_10003159
		push	0
		push	10h

loc_1000312E:				; CODE XREF: sub_10002FC8+CFj
					; sub_10002FC8+FDj ...
		lea	eax, [ebp+10h]
		push	eax
		push	edi
		call	SECOID_SetAlgorithmID_Util
		mov	esi, eax
		add	esp, 10h
		cmp	esi, 0FFFFFFFFh
		jz	short loc_1000318D

loc_10003142:				; CODE XREF: sub_10002FC8+7Cj
		push	offset dword_100138B0
		push	ebp
		push	[esp+20h+var_4]
		push	edi
		call	SEC_ASN1EncodeItem_Util
		add	esp, 10h
		test	eax, eax
		jnz	short loc_1000315E

loc_10003159:				; CODE XREF: sub_10002FC8+C0j
					; sub_10002FC8+F1j ...
		or	esi, 0FFFFFFFFh
		jmp	short loc_1000318D
; ---------------------------------------------------------------------------

loc_1000315E:				; CODE XREF: sub_10002FC8+18Fj
		lea	ecx, [esp+18h+var_8]
		push	ecx
		push	eax
		push	[esp+20h+arg_8]
		push	edi
		call	sub_10008083
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		jnz	short loc_1000318D
		push	[esp+18h+var_8]
		push	[esp+1Ch+arg_C]
		push	[esp+20h+arg_0]
		call	SECITEM_CopyItem_Util
		add	esp, 0Ch
		mov	esi, eax

loc_1000318D:				; CODE XREF: sub_10002FC8+178j
					; sub_10002FC8+194j ...
		pop	ebx

loc_1000318E:				; CODE XREF: sub_10002FC8+3Cj
					; sub_10002FC8+44j ...
		push	1
		push	edi
		call	PORT_FreeArena_Util
		pop	ecx
		pop	ecx
		pop	ebp

loc_10003199:				; CODE XREF: sub_10002FC8+1Aj
		pop	edi
		mov	eax, esi
		pop	esi
		pop	ecx
		pop	ecx
		retn
sub_10002FC8	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_100031A0	proc near		; CODE XREF: sub_10001F2D+35p
					; sub_10001F6E+3Cp

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	esi
		xor	esi, esi
		cmp	[ebp+arg_0], esi
		jz	short loc_10003207
		cmp	[ebp+arg_4], esi
		jz	short loc_10003207
		cmp	[ebp+arg_C], esi
		jz	short loc_10003207
		push	ebx
		push	[ebp+arg_4]
		push	[ebp+arg_0]
		call	sub_100019B0
		mov	ebx, eax
		pop	ecx
		pop	ecx
		test	ebx, ebx
		jz	short loc_10003202
		push	edi
		mov	edi, [ebp+arg_8]
		test	edi, edi
		jz	short loc_100031EA
		mov	eax, [ebx+8]
		test	eax, eax
		jz	short loc_100031E8
		cmp	byte ptr [eax],	0
		jz	short loc_100031E8
		push	eax
		call	PORT_Strdup_Util
		pop	ecx
		mov	[edi], eax
		jmp	short loc_100031EA
; ---------------------------------------------------------------------------

loc_100031E8:				; CODE XREF: sub_100031A0+36j
					; sub_100031A0+3Bj
		mov	[edi], esi

loc_100031EA:				; CODE XREF: sub_100031A0+2Fj
					; sub_100031A0+46j
		push	[ebp+arg_C]
		lea	eax, [ebx+18h]
		push	eax
		call	sub_10002C7C
		push	ebx
		mov	esi, eax
		call	sub_10008EE1
		add	esp, 0Ch
		pop	edi

loc_10003202:				; CODE XREF: sub_100031A0+27j
		mov	eax, esi
		pop	ebx
		jmp	short loc_10003209
; ---------------------------------------------------------------------------

loc_10003207:				; CODE XREF: sub_100031A0+9j
					; sub_100031A0+Ej ...
		xor	eax, eax

loc_10003209:				; CODE XREF: sub_100031A0+65j
		pop	esi
		pop	ebp
		retn
sub_100031A0	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_1000320C	proc near		; CODE XREF: sub_100025EF+3Dp

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch

		push	ebp
		mov	ebp, esp
		push	esi
		or	esi, 0FFFFFFFFh
		cmp	[ebp+arg_0], 0
		push	edi
		jz	short loc_1000328E
		cmp	[ebp+arg_4], 0
		jz	short loc_1000328E
		cmp	[ebp+arg_8], 0
		jz	short loc_1000328E
		cmp	[ebp+arg_C], 0
		jz	short loc_1000328E
		push	800h
		call	PORT_NewArena_Util
		mov	edi, eax
		pop	ecx
		test	edi, edi
		jz	short loc_1000328E
		push	ebx
		push	24h
		push	edi
		call	PORT_ArenaZAlloc_Util
		mov	ebx, eax
		pop	ecx
		pop	ecx
		test	ebx, ebx
		jz	short loc_10003283
		mov	eax, [ebp+arg_10]
		mov	[ebx+8], eax
		lea	eax, [ebx+18h]
		push	eax
		push	[ebp+arg_8]
		mov	[ebx], edi
		push	[ebp+arg_C]
		push	edi
		call	sub_10002FC8
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		jnz	short loc_10003283
		push	[ebp+arg_14]
		push	ebx
		push	[ebp+arg_4]
		push	[ebp+arg_0]
		call	sub_10002B73
		add	esp, 10h
		mov	esi, eax

loc_10003283:				; CODE XREF: sub_1000320C+40j
					; sub_1000320C+61j
		push	1
		push	edi
		call	PORT_FreeArena_Util
		pop	ecx
		pop	ecx
		pop	ebx

loc_1000328E:				; CODE XREF: sub_1000320C+Cj
					; sub_1000320C+12j ...
		pop	edi
		mov	eax, esi
		pop	esi
		pop	ebp
		retn
sub_1000320C	endp


; =============== S U B	R O U T	I N E =======================================


sub_10003294	proc near		; CODE XREF: sub_100022B1+84p
					; sub_100022B1+CAp

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		push	esi
		call	sub_1000299F
		movzx	eax, al
		mov	[esi+0Ch], eax
		pop	ecx
		cmp	eax, 3
		jz	short loc_100032BA
		cmp	dword ptr [esi], 0
		jz	short loc_100032BA
		push	esi
		call	sub_100019F0
		and	dword ptr [esi], 0
		pop	ecx

loc_100032BA:				; CODE XREF: sub_10003294+15j
					; sub_10003294+1Aj
		xor	eax, eax
		cmp	[esi], eax
		pop	esi
		setnz	al
		retn
sub_10003294	endp


; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_100032C3(int,	int, void *Src,	size_t Size)
sub_100032C3	proc near		; CODE XREF: sub_10003306+18p
					; sub_1000334D+44p ...

arg_0		= dword	ptr  4
Src		= dword	ptr  0Ch
Size		= dword	ptr  10h

		push	esi
		mov	esi, [esp+4+arg_0]
		cmp	dword ptr [esi+4], 0
		jnz	short loc_100032D9
		mov	eax, [esp+4+Size]
		mov	[esi+8], eax
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_100032D9:				; CODE XREF: sub_100032C3+9j
		push	edi
		mov	edi, [esp+8+Size]
		cmp	[esi+8], edi
		jnb	short loc_100032EE
		or	dword ptr [esi+8], 0FFFFFFFFh
		mov	eax, 150h
		jmp	short loc_10003303
; ---------------------------------------------------------------------------

loc_100032EE:				; CODE XREF: sub_100032C3+1Ej
		push	edi		; Size
		push	[esp+0Ch+Src]	; Src
		push	dword ptr [esi+4] ; Dst
		call	memcpy
		add	esp, 0Ch
		mov	[esi+8], edi
		xor	eax, eax

loc_10003303:				; CODE XREF: sub_100032C3+29j
		pop	edi
		pop	esi
		retn
sub_100032C3	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_10003306(int,	int, void *Src,	size_t Size)
sub_10003306	proc near		; CODE XREF: sub_100036EF+D3p
					; sub_100037FA+9Ap ...

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
Src		= dword	ptr  10h
Size		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+Src]
		mov	ecx, [ebp+Size]
		cmp	byte ptr [eax],	0
		jnz	short loc_10003316
		inc	eax
		dec	ecx

loc_10003316:				; CODE XREF: sub_10003306+Cj
		push	ecx		; Size
		push	eax		; Src
		push	[ebp+arg_4]	; int
		push	[ebp+arg_0]	; int
		call	sub_100032C3
		add	esp, 10h
		pop	ebp
		retn
sub_10003306	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10003328	proc near		; CODE XREF: sub_100036EF+96p
					; sub_100038F7+B0p ...

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_8]
		mov	ecx, [ebp+arg_C]
		cmp	byte ptr [eax],	0
		jnz	short loc_10003338
		inc	eax
		dec	ecx

loc_10003338:				; CODE XREF: sub_10003328+Cj
		push	[ebp+arg_10]
		push	ecx
		push	eax
		push	[ebp+arg_4]
		push	[ebp+arg_0]
		call	sub_1000334D
		add	esp, 14h
		pop	ebp
		retn
sub_10003328	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_1000334D	proc near		; CODE XREF: sub_10003328+1Bp
					; sub_1000435F+1C0p

var_10		= byte ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		mov	eax, [ebp+arg_8]
		and	[ebp+var_4], 0
		mov	[ebp+var_C], eax
		mov	eax, [ebp+arg_C]
		push	esi
		mov	[ebp+var_8], eax
		mov	esi, 101h
		lea	eax, [ebp+var_4]
		push	eax
		lea	eax, [ebp+var_10]
		push	eax
		push	[ebp+arg_10]
		push	0
		call	sub_10008083
		add	esp, 10h
		test	eax, eax
		jnz	short loc_1000339B
		mov	eax, [ebp+var_4]
		push	dword ptr [eax+8] ; Size
		push	dword ptr [eax+4] ; Src
		push	[ebp+arg_4]	; int
		push	[ebp+arg_0]	; int
		call	sub_100032C3
		add	esp, 10h
		mov	esi, eax

loc_1000339B:				; CODE XREF: sub_1000334D+33j
		cmp	[ebp+var_4], 0
		jz	short loc_100033AD
		push	1
		push	[ebp+var_4]
		call	SECITEM_FreeItem_Util
		pop	ecx
		pop	ecx

loc_100033AD:				; CODE XREF: sub_1000334D+52j
		mov	eax, esi
		pop	esi
		mov	esp, ebp
		pop	ebp
		retn
sub_1000334D	endp


; =============== S U B	R O U T	I N E =======================================


sub_100033B4	proc near		; CODE XREF: sub_100047F8+4Dp
					; sub_100049DD+81p ...

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		cmp	dword ptr [esi+18h], 0
		jz	short loc_100033CC
		push	dword ptr [esi+18h]
		call	PORT_Free_Util
		and	dword ptr [esi+18h], 0
		pop	ecx

loc_100033CC:				; CODE XREF: sub_100033B4+9j
		cmp	dword ptr [esi+0Ch], 0
		jz	short loc_100033E1
		push	dword ptr [esi+0Ch]
		call	dword ptr [esi+10h]
		and	dword ptr [esi+0Ch], 0
		and	dword ptr [esi+10h], 0
		pop	ecx

loc_100033E1:				; CODE XREF: sub_100033B4+1Cj
		push	esi
		call	PORT_Free_Util
		pop	ecx
		pop	esi
		retn
sub_100033B4	endp


; =============== S U B	R O U T	I N E =======================================


sub_100033EA	proc near		; CODE XREF: sub_100048F8+BAp

Src		= byte ptr -18h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 18h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+18h+var_4], eax
		push	ebx
		mov	ebx, [esp+1Ch+arg_4]
		push	ebp
		push	esi
		mov	esi, [esp+24h+arg_0]
		mov	ebp, 82h
		push	edi
		mov	edi, [esp+28h+arg_8]
		cmp	ebx, ebp
		ja	short loc_10003451
		cmp	ebx, 81h
		jnb	short loc_10003496
		lea	eax, [ebx-1]
		dec	eax
		jz	short loc_1000343D
		dec	eax
		jz	short loc_10003496
		sub	eax, 0Eh
		jz	short loc_10003496
		sub	eax, 6Fh
		jnz	short loc_10003472
		push	eax
		push	80h
		push	edi
		call	sub_10004FCF
		add	esp, 0Ch
		jmp	short loc_10003479
; ---------------------------------------------------------------------------

loc_1000343D:				; CODE XREF: sub_100033EA+33j
		push	1		; Size
		push	offset byte_10015028 ; Src
		push	2		; int

loc_10003446:				; CODE XREF: sub_100033EA+AAj
					; sub_100033EA+15Bj ...
		push	edi		; int
		call	sub_100032C3
		add	esp, 10h
		jmp	short loc_10003479
; ---------------------------------------------------------------------------

loc_10003451:				; CODE XREF: sub_100033EA+25j
		cmp	ebx, 101h
		jb	short loc_10003472
		cmp	ebx, 102h
		jbe	short loc_10003496
		mov	eax, 170h
		cmp	ebx, eax
		jz	short loc_1000348C
		cmp	ebx, 0CE534352h
		jz	short loc_10003496

loc_10003472:				; CODE XREF: sub_100033EA+40j
					; sub_100033EA+6Dj ...
		or	dword ptr [edi+8], 0FFFFFFFFh
		push	12h
		pop	eax

loc_10003479:				; CODE XREF: sub_100033EA+51j
					; sub_100033EA+65j ...
		mov	ecx, [esp+28h+var_4]
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 18h
		retn
; ---------------------------------------------------------------------------

loc_1000348C:				; CODE XREF: sub_100033EA+7Ej
		push	1
		push	offset dword_10015000

loc_10003493:				; CODE XREF: sub_100033EA+1D8j
					; sub_100033EA+1EEj
		push	eax
		jmp	short loc_10003446
; ---------------------------------------------------------------------------

loc_10003496:				; CODE XREF: sub_100033EA+2Dj
					; sub_100033EA+36j ...
		push	dword ptr [esi+8]
		call	sub_100078B4
		pop	ecx
		test	eax, eax
		jnz	short loc_100034A7

loc_100034A3:				; CODE XREF: sub_100033EA+CAj
		mov	eax, ebp
		jmp	short loc_10003479
; ---------------------------------------------------------------------------

loc_100034A7:				; CODE XREF: sub_100033EA+B7j
		push	eax
		push	esi
		call	sub_100050BF
		mov	esi, eax
		pop	ecx
		pop	ecx
		test	esi, esi
		jz	short loc_100034A3
		cmp	ebx, 3
		jz	loc_100035EA
		cmp	ebx, 11h
		jz	loc_100035DD
		mov	eax, 81h
		cmp	ebx, eax
		jz	loc_100035D2
		cmp	ebx, ebp
		jz	loc_100035C7
		mov	eax, 101h
		cmp	ebx, eax
		jz	loc_100035BC
		lea	ebp, [eax+1]
		cmp	ebx, ebp
		jz	short loc_10003529
		mov	ebp, 0CE534352h
		cmp	ebx, ebp
		jnz	loc_10003472
		mov	eax, [esi+8Ch]
		test	eax, eax
		jz	short loc_10003540
		cmp	byte ptr [eax],	0
		jz	short loc_10003540
		push	eax		; Str
		call	strlen
		push	eax		; Size
		push	dword ptr [esi+8Ch] ; Src
		push	ebp		; int

loc_1000351B:				; CODE XREF: sub_100033EA+219j
		push	edi		; int
		call	sub_100032C3
		add	esp, 14h
		jmp	loc_10003479
; ---------------------------------------------------------------------------

loc_10003529:				; CODE XREF: sub_100033EA+105j
		mov	eax, [esi+90h]
		test	byte ptr [eax],	40h
		jnz	short loc_1000354A
		test	byte ptr [eax+4], 40h
		jnz	short loc_1000354A
		test	byte ptr [eax+8], 40h
		jnz	short loc_1000354A

loc_10003540:				; CODE XREF: sub_100033EA+11Cj
					; sub_100033EA+121j
		push	0
		push	0

loc_10003544:				; CODE XREF: sub_100033EA+1E3j
		push	ebp
		jmp	loc_10003446
; ---------------------------------------------------------------------------

loc_1000354A:				; CODE XREF: sub_100033EA+148j
					; sub_100033EA+14Ej ...
		push	esi
		call	sub_1000849A
		mov	esi, eax
		pop	ecx
		test	esi, esi
		jz	loc_10003472
		mov	ecx, [esi+4]
		dec	ecx
		jz	short loc_1000357D
		dec	ecx
		jz	short loc_10003578
		dec	ecx
		dec	ecx
		jz	short loc_10003573
		dec	ecx
		jnz	short loc_10003584
		lea	eax, [esi+8Ch]
		jmp	short loc_10003580
; ---------------------------------------------------------------------------

loc_10003573:				; CODE XREF: sub_100033EA+17Cj
		lea	eax, [esi+24h]
		jmp	short loc_10003580
; ---------------------------------------------------------------------------

loc_10003578:				; CODE XREF: sub_100033EA+178j
		lea	eax, [esi+30h]
		jmp	short loc_10003580
; ---------------------------------------------------------------------------

loc_1000357D:				; CODE XREF: sub_100033EA+175j
		lea	eax, [esi+0Ch]

loc_10003580:				; CODE XREF: sub_100033EA+187j
					; sub_100033EA+18Cj ...
		test	eax, eax
		jnz	short loc_10003590

loc_10003584:				; CODE XREF: sub_100033EA+17Fj
		push	esi
		call	sub_10008EE1
		pop	ecx
		jmp	loc_10003472
; ---------------------------------------------------------------------------

loc_10003590:				; CODE XREF: sub_100033EA+198j
		push	dword ptr [eax+8]
		push	dword ptr [eax+4]
		lea	eax, [esp+30h+Src]
		push	eax
		call	sub_1000E0A0
		push	esi
		call	sub_10008EE1
		push	14h		; Size
		lea	eax, [esp+3Ch+Src]
		push	eax		; Src
		push	ebp		; int
		push	edi		; int
		call	sub_100032C3
		add	esp, 20h
		jmp	loc_10003479
; ---------------------------------------------------------------------------

loc_100035BC:				; CODE XREF: sub_100033EA+FAj
		push	dword ptr [esi+40h]
		push	dword ptr [esi+3Ch]
		jmp	loc_10003493
; ---------------------------------------------------------------------------

loc_100035C7:				; CODE XREF: sub_100033EA+EDj
		push	dword ptr [esi+28h]
		push	dword ptr [esi+24h]
		jmp	loc_10003544
; ---------------------------------------------------------------------------

loc_100035D2:				; CODE XREF: sub_100033EA+E5j
		push	dword ptr [esi+1Ch]
		push	dword ptr [esi+18h]
		jmp	loc_10003493
; ---------------------------------------------------------------------------

loc_100035DD:				; CODE XREF: sub_100033EA+D8j
		push	dword ptr [esi+10h]
		push	dword ptr [esi+0Ch]
		push	11h
		jmp	loc_10003446
; ---------------------------------------------------------------------------

loc_100035EA:				; CODE XREF: sub_100033EA+CFj
		mov	eax, [esi+88h]
		test	eax, eax
		jz	short loc_10003608
		push	eax		; Str
		call	strlen
		push	eax
		push	dword ptr [esi+88h]
		push	3
		jmp	loc_1000351B
; ---------------------------------------------------------------------------

loc_10003608:				; CODE XREF: sub_100033EA+208j
		push	0
		push	0
		push	3
		jmp	loc_10003446
sub_100033EA	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10003613	proc near		; CODE XREF: sub_100048F8+8Ep

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	ebx
		push	esi
		mov	esi, [ebp+arg_4]
		push	edi
		cmp	esi, 2
		jz	loc_100036D7
		mov	ebx, 0CE534351h
		cmp	esi, 11h
		jz	short loc_10003686
		mov	ecx, 101h
		cmp	esi, ecx
		jz	short loc_1000367B
		cmp	esi, 170h
		jz	loc_100036D7
		cmp	esi, ebx
		jz	short loc_10003686
		lea	ecx, [ebx+7]
		cmp	esi, ecx
		jz	short loc_1000365E

loc_1000364F:				; CODE XREF: sub_10003613+90j
		mov	eax, [ebp+arg_8]
		push	12h
		or	dword ptr [eax+8], 0FFFFFFFFh
		pop	eax
		jmp	loc_100036EA
; ---------------------------------------------------------------------------

loc_1000365E:				; CODE XREF: sub_10003613+3Aj
		mov	eax, [ebp+arg_0]
		push	1
		cmp	dword ptr [eax+4], 28000001h
		jnz	short loc_10003673
		push	offset dword_10015000
		jmp	short loc_10003678
; ---------------------------------------------------------------------------

loc_10003673:				; CODE XREF: sub_10003613+57j
		push	offset byte_10015028

loc_10003678:				; CODE XREF: sub_10003613+5Ej
					; sub_10003613+71j
		push	ecx
		jmp	short loc_100036DF
; ---------------------------------------------------------------------------

loc_1000367B:				; CODE XREF: sub_10003613+23j
		mov	eax, [ebp+arg_0]
		push	dword ptr [eax+1Ch]
		push	dword ptr [eax+18h]
		jmp	short loc_10003678
; ---------------------------------------------------------------------------

loc_10003686:				; CODE XREF: sub_10003613+1Aj
					; sub_10003613+33j
		push	[ebp+arg_0]
		call	sub_10005100
		mov	edi, eax
		pop	ecx
		test	edi, edi
		jnz	short loc_1000369C
		mov	eax, 82h
		jmp	short loc_100036EA
; ---------------------------------------------------------------------------

loc_1000369C:				; CODE XREF: sub_10003613+80j
		cmp	esi, 11h
		jz	short loc_100036CD
		cmp	esi, ebx
		jnz	short loc_1000364F
		cmp	dword ptr [edi+1Ch], 0
		jnz	short loc_100036B2
		push	0
		push	0
		push	ebx
		jmp	short loc_100036DF
; ---------------------------------------------------------------------------

loc_100036B2:				; CODE XREF: sub_10003613+96j
		push	dword ptr [edi+1Ch] ; Str
		call	strlen
		inc	eax
		push	eax		; Size
		push	dword ptr [edi+1Ch] ; Src
		push	ebx		; int
		push	[ebp+arg_8]	; int
		call	sub_100032C3
		add	esp, 14h
		jmp	short loc_100036EA
; ---------------------------------------------------------------------------

loc_100036CD:				; CODE XREF: sub_10003613+8Cj
		push	dword ptr [edi+18h]
		push	dword ptr [edi+14h]
		push	11h
		jmp	short loc_100036DF
; ---------------------------------------------------------------------------

loc_100036D7:				; CODE XREF: sub_10003613+Cj
					; sub_10003613+2Bj
		push	1		; Size
		push	offset byte_10015028 ; Src
		push	esi		; int

loc_100036DF:				; CODE XREF: sub_10003613+66j
					; sub_10003613+9Dj ...
		push	[ebp+arg_8]	; int
		call	sub_100032C3
		add	esp, 10h

loc_100036EA:				; CODE XREF: sub_10003613+46j
					; sub_10003613+87j ...
		pop	edi
		pop	esi
		pop	ebx
		pop	ebp
		retn
sub_10003613	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_100036EF	proc near		; CODE XREF: sub_10003DE2+11Ep

Src		= byte ptr -18h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	eax, ___security_cookie
		xor	eax, ebp
		mov	[ebp+var_4], eax
		mov	ecx, [ebp+arg_4]
		mov	edx, [ebp+arg_0]
		push	esi
		mov	esi, [ebp+arg_8]
		push	edi
		mov	edi, [ebp+arg_C]
		cmp	ecx, 109h
		ja	short loc_1000378F
		cmp	ecx, 107h
		jnb	short loc_10003734
		mov	eax, ecx
		sub	eax, 11h
		jz	short loc_1000377B
		sub	eax, 0EFh
		jz	short loc_10003769
		dec	eax
		dec	eax
		jz	short loc_10003741
		sub	eax, 3
		jnz	short loc_100037B1

loc_10003734:				; CODE XREF: sub_100036EF+2Cj
		push	1
		push	offset byte_10015028
		push	ecx
		jmp	loc_100037E1
; ---------------------------------------------------------------------------

loc_10003741:				; CODE XREF: sub_100036EF+3Ej
		push	dword ptr [edx+2Ch]
		lea	eax, [ebp+Src]
		push	dword ptr [edx+28h]
		push	eax
		call	sub_1000E0A0
		push	14h		; Size
		lea	eax, [ebp+Src]
		push	eax		; Src
		push	102h		; int
		push	esi		; int
		call	sub_100032C3
		add	esp, 1Ch
		jmp	loc_100037EA
; ---------------------------------------------------------------------------

loc_10003769:				; CODE XREF: sub_100036EF+3Aj
		push	2
		push	100h
		push	esi
		call	sub_10004FCF
		add	esp, 0Ch
		jmp	short loc_100037EA
; ---------------------------------------------------------------------------

loc_1000377B:				; CODE XREF: sub_100036EF+33j
		push	edi
		push	dword ptr [edx+38h]
		push	dword ptr [edx+34h]
		push	11h
		push	esi
		call	sub_10003328
		add	esp, 14h
		jmp	short loc_100037EA
; ---------------------------------------------------------------------------

loc_1000378F:				; CODE XREF: sub_100036EF+24j
		mov	eax, 10Ch
		cmp	ecx, eax
		jz	short loc_100037D9
		add	eax, 24h
		cmp	ecx, eax
		jz	short loc_100037D1
		mov	eax, 132h
		cmp	ecx, eax
		jz	short loc_100037C9
		mov	eax, 0D5A0DB00h
		cmp	ecx, eax
		jz	short loc_100037BA

loc_100037B1:				; CODE XREF: sub_100036EF+43j
		or	dword ptr [esi+8], 0FFFFFFFFh
		push	12h
		pop	eax
		jmp	short loc_100037EA
; ---------------------------------------------------------------------------

loc_100037BA:				; CODE XREF: sub_100036EF+C0j
		push	dword ptr [edx+2Ch] ; Size
		push	dword ptr [edx+28h] ; Src

loc_100037C0:				; CODE XREF: sub_100036EF+E0j
					; sub_100036EF+E8j
		push	eax		; int
		push	esi		; int
		call	sub_10003306
		jmp	short loc_100037E7
; ---------------------------------------------------------------------------

loc_100037C9:				; CODE XREF: sub_100036EF+B7j
		push	dword ptr [edx+20h]
		push	dword ptr [edx+1Ch]
		jmp	short loc_100037C0
; ---------------------------------------------------------------------------

loc_100037D1:				; CODE XREF: sub_100036EF+AEj
		push	dword ptr [edx+14h]
		push	dword ptr [edx+10h]
		jmp	short loc_100037C0
; ---------------------------------------------------------------------------

loc_100037D9:				; CODE XREF: sub_100036EF+A7j
		push	1		; Size
		push	offset dword_10015000 ;	Src
		push	eax		; int

loc_100037E1:				; CODE XREF: sub_100036EF+4Dj
		push	esi		; int
		call	sub_100032C3

loc_100037E7:				; CODE XREF: sub_100036EF+D8j
		add	esp, 10h

loc_100037EA:				; CODE XREF: sub_100036EF+75j
					; sub_100036EF+8Aj ...
		mov	ecx, [ebp+var_4]
		pop	edi
		xor	ecx, ebp
		pop	esi
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	esp, ebp
		pop	ebp
		retn
sub_100036EF	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_100037FA	proc near		; CODE XREF: sub_10003F2A+12Cp

Src		= byte ptr -18h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	eax, ___security_cookie
		xor	eax, ebp
		mov	[ebp+var_4], eax
		mov	eax, [ebp+arg_4]
		mov	ecx, 106h
		mov	edx, [ebp+arg_0]
		push	esi
		mov	esi, [ebp+arg_8]
		cmp	eax, ecx
		ja	short loc_1000389B
		jz	loc_100038ED
		mov	ecx, eax
		sub	ecx, 11h
		jz	short loc_1000388B
		sub	ecx, 0EFh
		jz	short loc_10003879
		dec	ecx
		dec	ecx
		jz	short loc_10003854
		dec	ecx
		dec	ecx
		jz	loc_100038ED

loc_1000383E:				; CODE XREF: sub_100037FA+A6j
					; sub_100037FA+C6j
		or	dword ptr [esi+8], 0FFFFFFFFh
		push	12h
		pop	eax

loc_10003845:				; CODE XREF: sub_100037FA+7Dj
					; sub_100037FA+8Fj ...
		mov	ecx, [ebp+var_4]
		xor	ecx, ebp
		pop	esi
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	esp, ebp
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_10003854:				; CODE XREF: sub_100037FA+3Aj
		push	dword ptr [edx+2Ch]
		lea	eax, [ebp+Src]
		push	dword ptr [edx+28h]
		push	eax
		call	sub_1000E0A0
		push	14h		; Size
		lea	eax, [ebp+Src]
		push	eax		; Src
		push	102h		; int
		push	esi		; int
		call	sub_100032C3
		add	esp, 1Ch
		jmp	short loc_10003845
; ---------------------------------------------------------------------------

loc_10003879:				; CODE XREF: sub_100037FA+36j
		push	2
		push	100h
		push	esi
		call	sub_10004FCF
		add	esp, 0Ch
		jmp	short loc_10003845
; ---------------------------------------------------------------------------

loc_1000388B:				; CODE XREF: sub_100037FA+2Ej
		push	dword ptr [edx+2Ch] ; Size
		push	dword ptr [edx+28h] ; Src
		push	11h		; int

loc_10003893:				; CODE XREF: sub_100037FA+DBj
		push	esi		; int
		call	sub_10003306
		jmp	short loc_100038E5
; ---------------------------------------------------------------------------

loc_1000389B:				; CODE XREF: sub_100037FA+21j
		cmp	eax, 10Ah
		jb	short loc_1000383E
		cmp	eax, 10Bh
		jbe	short loc_100038ED
		mov	ecx, 10Ch
		cmp	eax, ecx
		jz	short loc_100038D7
		add	ecx, 24h
		cmp	eax, ecx
		jz	short loc_100038CE
		mov	ecx, 132h
		cmp	eax, ecx
		jnz	loc_1000383E
		push	dword ptr [edx+20h]
		push	dword ptr [edx+1Ch]
		jmp	short loc_100038D4
; ---------------------------------------------------------------------------

loc_100038CE:				; CODE XREF: sub_100037FA+BDj
		push	dword ptr [edx+14h]
		push	dword ptr [edx+10h]

loc_100038D4:				; CODE XREF: sub_100037FA+D2j
		push	ecx
		jmp	short loc_10003893
; ---------------------------------------------------------------------------

loc_100038D7:				; CODE XREF: sub_100037FA+B6j
		push	1		; Size
		push	offset dword_10015000 ;	Src
		push	ecx		; int

loc_100038DF:				; CODE XREF: sub_100037FA+FBj
		push	esi		; int
		call	sub_100032C3

loc_100038E5:				; CODE XREF: sub_100037FA+9Fj
		add	esp, 10h
		jmp	loc_10003845
; ---------------------------------------------------------------------------

loc_100038ED:				; CODE XREF: sub_100037FA+23j
					; sub_100037FA+3Ej ...
		push	1
		push	offset byte_10015028
		push	eax
		jmp	short loc_100038DF
sub_100037FA	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_100038F7	proc near		; CODE XREF: sub_10003DE2+12Dp

Src		= byte ptr -18h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	eax, ___security_cookie
		xor	eax, ebp
		mov	[ebp+var_4], eax
		mov	edx, [ebp+arg_4]
		mov	eax, 109h
		mov	ecx, [ebp+arg_0]
		push	esi
		mov	esi, [ebp+arg_8]
		push	edi
		mov	edi, [ebp+arg_C]
		cmp	edx, eax
		ja	loc_100039B1
		jz	loc_10003A09
		mov	eax, edx
		sub	eax, 11h
		jz	short loc_1000399D
		sub	eax, 0EFh
		jz	short loc_1000398B
		dec	eax
		dec	eax
		jz	short loc_10003963
		sub	eax, 3
		jz	loc_10003A09
		dec	eax
		dec	eax
		jz	loc_10003A09
		dec	eax
		jnz	loc_100039D9
		push	1
		push	offset dword_10015000
		push	108h
		jmp	loc_10003A11
; ---------------------------------------------------------------------------

loc_10003963:				; CODE XREF: sub_100038F7+41j
		push	dword ptr [ecx+38h]
		lea	eax, [ebp+Src]
		push	dword ptr [ecx+34h]
		push	eax
		call	sub_1000E0A0
		push	14h		; Size
		lea	eax, [ebp+Src]
		push	eax		; Src
		push	102h		; int
		push	esi		; int
		call	sub_100032C3
		add	esp, 1Ch
		jmp	loc_10003A1A
; ---------------------------------------------------------------------------

loc_1000398B:				; CODE XREF: sub_100038F7+3Dj
		push	1
		push	100h
		push	esi
		call	sub_10004FCF
		add	esp, 0Ch
		jmp	short loc_10003A1A
; ---------------------------------------------------------------------------

loc_1000399D:				; CODE XREF: sub_100038F7+36j
		push	edi
		push	dword ptr [ecx+44h]
		push	dword ptr [ecx+40h]
		push	11h
		push	esi
		call	sub_10003328
		add	esp, 14h
		jmp	short loc_10003A1A
; ---------------------------------------------------------------------------

loc_100039B1:				; CODE XREF: sub_100038F7+25j
		cmp	edx, 10Ch
		jz	short loc_10003A09
		mov	eax, 130h
		cmp	edx, eax
		jz	short loc_10003A01
		inc	eax
		cmp	edx, eax
		jz	short loc_100039F9
		mov	eax, 132h
		cmp	edx, eax
		jz	short loc_100039F1
		mov	eax, 0D5A0DB00h
		cmp	edx, eax
		jz	short loc_100039E2

loc_100039D9:				; CODE XREF: sub_100038F7+55j
		or	dword ptr [esi+8], 0FFFFFFFFh
		push	12h
		pop	eax
		jmp	short loc_10003A1A
; ---------------------------------------------------------------------------

loc_100039E2:				; CODE XREF: sub_100038F7+E0j
		push	dword ptr [ecx+38h] ; Size
		push	dword ptr [ecx+34h] ; Src

loc_100039E8:				; CODE XREF: sub_100038F7+100j
					; sub_100038F7+108j ...
		push	eax		; int
		push	esi		; int
		call	sub_10003306
		jmp	short loc_10003A17
; ---------------------------------------------------------------------------

loc_100039F1:				; CODE XREF: sub_100038F7+D7j
		push	dword ptr [ecx+2Ch]
		push	dword ptr [ecx+28h]
		jmp	short loc_100039E8
; ---------------------------------------------------------------------------

loc_100039F9:				; CODE XREF: sub_100038F7+CEj
		push	dword ptr [ecx+20h]
		push	dword ptr [ecx+1Ch]
		jmp	short loc_100039E8
; ---------------------------------------------------------------------------

loc_10003A01:				; CODE XREF: sub_100038F7+C9j
		push	dword ptr [ecx+14h]
		push	dword ptr [ecx+10h]
		jmp	short loc_100039E8
; ---------------------------------------------------------------------------

loc_10003A09:				; CODE XREF: sub_100038F7+2Bj
					; sub_100038F7+46j ...
		push	1		; Size
		push	offset byte_10015028 ; Src
		push	edx		; int

loc_10003A11:				; CODE XREF: sub_100038F7+67j
		push	esi		; int
		call	sub_100032C3

loc_10003A17:				; CODE XREF: sub_100038F7+F8j
		add	esp, 10h

loc_10003A1A:				; CODE XREF: sub_100038F7+8Fj
					; sub_100038F7+A4j ...
		mov	ecx, [ebp+var_4]
		pop	edi
		xor	ecx, ebp
		pop	esi
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	esp, ebp
		pop	ebp
		retn
sub_100038F7	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10003A2A	proc near		; CODE XREF: sub_10003F2A+138p

Src		= byte ptr -18h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	eax, ___security_cookie
		xor	eax, ebp
		mov	[ebp+var_4], eax
		mov	ecx, [ebp+arg_4]
		mov	eax, 10Ah
		mov	edx, [ebp+arg_0]
		push	esi
		mov	esi, [ebp+arg_8]
		cmp	ecx, eax
		ja	loc_10003AD2
		jz	short loc_10003AC8
		mov	eax, ecx
		sub	eax, 11h
		jz	short loc_10003AB8
		sub	eax, 0EFh
		jz	short loc_10003AA6
		dec	eax
		dec	eax
		jz	short loc_10003A81
		dec	eax
		dec	eax
		jz	loc_10003B0A
		dec	eax
		dec	eax
		jz	loc_10003B0A

loc_10003A75:				; CODE XREF: sub_10003A2A+C5j
		or	dword ptr [esi+8], 0FFFFFFFFh
		push	12h
		pop	eax
		jmp	loc_10003B1B
; ---------------------------------------------------------------------------

loc_10003A81:				; CODE XREF: sub_10003A2A+39j
		push	dword ptr [edx+38h]
		lea	eax, [ebp+Src]
		push	dword ptr [edx+34h]
		push	eax
		call	sub_1000E0A0
		push	14h		; Size
		lea	eax, [ebp+Src]
		push	eax		; Src
		push	102h		; int
		push	esi		; int
		call	sub_100032C3
		add	esp, 1Ch
		jmp	short loc_10003B1B
; ---------------------------------------------------------------------------

loc_10003AA6:				; CODE XREF: sub_10003A2A+35j
		push	1
		push	100h
		push	esi
		call	sub_10004FCF
		add	esp, 0Ch
		jmp	short loc_10003B1B
; ---------------------------------------------------------------------------

loc_10003AB8:				; CODE XREF: sub_10003A2A+2Ej
		push	dword ptr [edx+38h] ; Size
		push	dword ptr [edx+34h] ; Src
		push	11h		; int

loc_10003AC0:				; CODE XREF: sub_10003A2A+CEj
		push	esi		; int
		call	sub_10003306
		jmp	short loc_10003B18
; ---------------------------------------------------------------------------

loc_10003AC8:				; CODE XREF: sub_10003A2A+27j
		push	1
		push	offset dword_10015000
		push	eax
		jmp	short loc_10003B12
; ---------------------------------------------------------------------------

loc_10003AD2:				; CODE XREF: sub_10003A2A+21j
		cmp	ecx, 10Ch
		jbe	short loc_10003B0A
		mov	eax, 130h
		cmp	ecx, eax
		jz	short loc_10003B02
		inc	eax
		cmp	ecx, eax
		jz	short loc_10003AFA
		mov	eax, 132h
		cmp	ecx, eax
		jnz	short loc_10003A75
		push	dword ptr [edx+2Ch]
		push	dword ptr [edx+28h]

loc_10003AF7:				; CODE XREF: sub_10003A2A+D6j
					; sub_10003A2A+DEj
		push	eax
		jmp	short loc_10003AC0
; ---------------------------------------------------------------------------

loc_10003AFA:				; CODE XREF: sub_10003A2A+BCj
		push	dword ptr [edx+20h]
		push	dword ptr [edx+1Ch]
		jmp	short loc_10003AF7
; ---------------------------------------------------------------------------

loc_10003B02:				; CODE XREF: sub_10003A2A+B7j
		push	dword ptr [edx+14h]
		push	dword ptr [edx+10h]
		jmp	short loc_10003AF7
; ---------------------------------------------------------------------------

loc_10003B0A:				; CODE XREF: sub_10003A2A+3Dj
					; sub_10003A2A+45j ...
		push	1		; Size
		push	offset byte_10015028 ; Src
		push	ecx		; int

loc_10003B12:				; CODE XREF: sub_10003A2A+A6j
		push	esi		; int
		call	sub_100032C3

loc_10003B18:				; CODE XREF: sub_10003A2A+9Cj
		add	esp, 10h

loc_10003B1B:				; CODE XREF: sub_10003A2A+52j
					; sub_10003A2A+7Aj ...
		mov	ecx, [ebp+var_4]
		xor	ecx, ebp
		pop	esi
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	esp, ebp
		pop	ebp
		retn
sub_10003A2A	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10003B2A	proc near		; CODE XREF: sub_10003DE2+10Fp

Src		= byte ptr -18h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	eax, ___security_cookie
		xor	eax, ebp
		mov	[ebp+var_4], eax
		mov	ecx, [ebp+arg_4]
		mov	eax, 108h
		mov	edx, [ebp+arg_0]
		push	esi
		mov	esi, [ebp+arg_8]
		push	edi
		mov	edi, [ebp+arg_C]
		cmp	ecx, eax
		ja	loc_10003BF2
		jz	loc_10003C40
		mov	eax, ecx
		sub	eax, 11h
		jz	short loc_10003BD8
		sub	eax, 0EFh
		jz	short loc_10003BC6
		dec	eax
		dec	eax
		jz	short loc_10003B9B
		sub	eax, 3
		jz	short loc_10003B7A
		dec	eax
		dec	eax
		jnz	loc_10003C14

loc_10003B7A:				; CODE XREF: sub_10003B2A+46j
					; sub_10003B2A+CEj
		push	1		; Size
		push	offset byte_10015028 ; Src

loc_10003B81:				; CODE XREF: sub_10003B2A+11Dj
		push	ecx		; int
		push	esi		; int
		call	sub_100032C3

loc_10003B88:				; CODE XREF: sub_10003B2A+109j
		add	esp, 10h

loc_10003B8B:				; CODE XREF: sub_10003B2A+9Aj
					; sub_10003B2A+ACj ...
		mov	ecx, [ebp+var_4]
		pop	edi
		xor	ecx, ebp
		pop	esi
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	esp, ebp
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_10003B9B:				; CODE XREF: sub_10003B2A+41j
		push	dword ptr [edx+94h]
		lea	eax, [ebp+Src]
		push	dword ptr [edx+90h]
		push	eax
		call	sub_1000E0A0
		push	14h		; Size
		lea	eax, [ebp+Src]
		push	eax		; Src
		push	102h		; int
		push	esi		; int
		call	sub_100032C3
		add	esp, 1Ch
		jmp	short loc_10003B8B
; ---------------------------------------------------------------------------

loc_10003BC6:				; CODE XREF: sub_10003B2A+3Dj
		push	3
		push	100h
		push	esi
		call	sub_10004FCF
		add	esp, 0Ch
		jmp	short loc_10003B8B
; ---------------------------------------------------------------------------

loc_10003BD8:				; CODE XREF: sub_10003B2A+36j
		push	edi
		push	dword ptr [edx+0A0h]
		push	dword ptr [edx+9Ch]
		push	11h
		push	esi
		call	sub_10003328
		add	esp, 14h
		jmp	short loc_10003B8B
; ---------------------------------------------------------------------------

loc_10003BF2:				; CODE XREF: sub_10003B2A+25j
		cmp	ecx, 109h
		jz	short loc_10003B7A
		cmp	ecx, 10Ch
		jz	short loc_10003C40
		mov	eax, 180h
		cmp	ecx, eax
		jz	short loc_10003C38
		mov	eax, 0D5A0DB00h
		cmp	ecx, eax
		jz	short loc_10003C20

loc_10003C14:				; CODE XREF: sub_10003B2A+4Aj
		or	dword ptr [esi+8], 0FFFFFFFFh
		push	12h
		pop	eax
		jmp	loc_10003B8B
; ---------------------------------------------------------------------------

loc_10003C20:				; CODE XREF: sub_10003B2A+E8j
		push	dword ptr [edx+94h] ; Size
		push	dword ptr [edx+90h] ; Src

loc_10003C2C:				; CODE XREF: sub_10003B2A+114j
		push	eax		; int
		push	esi		; int
		call	sub_10003306
		jmp	loc_10003B88
; ---------------------------------------------------------------------------

loc_10003C38:				; CODE XREF: sub_10003B2A+DFj
		push	dword ptr [edx+78h]
		push	dword ptr [edx+74h]
		jmp	short loc_10003C2C
; ---------------------------------------------------------------------------

loc_10003C40:				; CODE XREF: sub_10003B2A+2Bj
					; sub_10003B2A+D6j
		push	1
		push	offset dword_10015000
		jmp	loc_10003B81
sub_10003B2A	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10003C4C	proc near		; CODE XREF: sub_10003F2A+120p

Src		= byte ptr -18h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	eax, ___security_cookie
		xor	eax, ebp
		mov	[ebp+var_4], eax
		mov	ecx, [ebp+arg_4]
		mov	eax, 10Ah
		push	esi
		mov	esi, [ebp+arg_8]
		push	edi
		mov	edi, [ebp+arg_0]
		cmp	ecx, eax
		ja	short loc_10003CE7
		jz	loc_10003D94
		mov	eax, ecx
		mov	edx, 100h
		sub	eax, edx
		jz	short loc_10003CD9
		dec	eax
		dec	eax
		jz	short loc_10003CAE
		dec	eax
		dec	eax
		jz	short loc_10003C8D
		dec	eax
		dec	eax
		jnz	short loc_10003D03

loc_10003C8D:				; CODE XREF: sub_10003C4C+3Bj
					; sub_10003C4C+A2j
		push	1		; Size
		push	offset byte_10015028 ; Src

loc_10003C94:				; CODE XREF: sub_10003C4C+14Fj
		push	ecx		; int
		push	esi		; int
		call	sub_100032C3

loc_10003C9B:				; CODE XREF: sub_10003C4C+E6j
		add	esp, 10h

loc_10003C9E:				; CODE XREF: sub_10003C4C+8Bj
					; sub_10003C4C+99j ...
		mov	ecx, [ebp+var_4]
		pop	edi
		xor	ecx, ebp
		pop	esi
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	esp, ebp
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_10003CAE:				; CODE XREF: sub_10003C4C+37j
		push	dword ptr [edi+94h]
		lea	eax, [ebp+Src]
		push	dword ptr [edi+90h]
		push	eax
		call	sub_1000E0A0
		push	14h		; Size
		lea	eax, [ebp+Src]
		push	eax		; Src
		push	102h		; int
		push	esi		; int
		call	sub_100032C3
		add	esp, 1Ch
		jmp	short loc_10003C9E
; ---------------------------------------------------------------------------

loc_10003CD9:				; CODE XREF: sub_10003C4C+33j
		push	3
		push	edx
		push	esi
		call	sub_10004FCF
		add	esp, 0Ch
		jmp	short loc_10003C9E
; ---------------------------------------------------------------------------

loc_10003CE7:				; CODE XREF: sub_10003C4C+22j
		mov	eax, ecx
		sub	eax, 10Bh
		jz	short loc_10003C8D
		dec	eax
		jz	loc_10003D94
		sub	eax, 74h
		jz	loc_10003D87
		dec	eax
		jz	short loc_10003D0B

loc_10003D03:				; CODE XREF: sub_10003C4C+3Fj
		or	dword ptr [esi+8], 0FFFFFFFFh
		push	12h
		jmp	short loc_10003D5C
; ---------------------------------------------------------------------------

loc_10003D0B:				; CODE XREF: sub_10003C4C+B5j
		push	offset VarName	; "NSS_USE_DECODED_CKA_EC_POINT"
		call	ds:getenv
		pop	ecx
		test	eax, eax
		jz	short loc_10003D37
		push	dword ptr [edi+94h] ; Size
		push	dword ptr [edi+90h] ; Src
		push	181h		; int

loc_10003D2C:				; CODE XREF: sub_10003C4C+146j
		push	esi		; int
		call	sub_10003306
		jmp	loc_10003C9B
; ---------------------------------------------------------------------------

loc_10003D37:				; CODE XREF: sub_10003C4C+CDj
		push	ebx
		xor	ebx, ebx
		push	ebx
		push	ebx
		call	NSS_Get_SEC_OctetStringTemplate_Util
		push	eax
		lea	eax, [edi+8Ch]
		push	eax
		push	ebx
		push	ebx
		call	SEC_ASN1EncodeItem_Util
		add	esp, 18h
		mov	edi, eax
		pop	ebx
		test	edi, edi
		jnz	short loc_10003D62
		push	2

loc_10003D5C:				; CODE XREF: sub_10003C4C+BDj
		pop	eax
		jmp	loc_10003C9E
; ---------------------------------------------------------------------------

loc_10003D62:				; CODE XREF: sub_10003C4C+10Cj
		push	dword ptr [edi+8] ; Size
		push	dword ptr [edi+4] ; Src
		push	181h		; int
		push	esi		; int
		call	sub_10003306
		push	1
		push	edi
		mov	esi, eax
		call	SECITEM_FreeItem_Util
		add	esp, 18h
		mov	eax, esi
		jmp	loc_10003C9E
; ---------------------------------------------------------------------------

loc_10003D87:				; CODE XREF: sub_10003C4C+AEj
		push	dword ptr [edi+78h]
		push	dword ptr [edi+74h]
		push	180h
		jmp	short loc_10003D2C
; ---------------------------------------------------------------------------

loc_10003D94:				; CODE XREF: sub_10003C4C+24j
					; sub_10003C4C+A5j
		push	1
		push	offset dword_10015000
		jmp	loc_10003C94
sub_10003C4C	endp


; =============== S U B	R O U T	I N E =======================================


sub_10003DA0	proc near		; CODE XREF: sub_100048AD+1Dp

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	[esp+arg_0]
		call	sub_100078BD
		pop	ecx
		test	eax, eax
		jnz	short loc_10003DAF
		retn
; ---------------------------------------------------------------------------

loc_10003DAF:				; CODE XREF: sub_10003DA0+Cj
		push	[esp+arg_0]
		push	[esp+4+arg_4]
		push	eax
		call	sub_10001F2D
		add	esp, 0Ch
		retn
sub_10003DA0	endp


; =============== S U B	R O U T	I N E =======================================


sub_10003DC1	proc near		; CODE XREF: sub_10003DE2+57p
					; sub_10003F2A+76p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	[esp+arg_0]
		call	sub_100078BD
		pop	ecx
		test	eax, eax
		jnz	short loc_10003DD0
		retn
; ---------------------------------------------------------------------------

loc_10003DD0:				; CODE XREF: sub_10003DC1+Cj
		push	[esp+arg_0]
		push	[esp+4+arg_4]
		push	eax
		call	sub_10001F6E
		add	esp, 0Ch
		retn
sub_10003DC1	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10003DE2	proc near		; CODE XREF: sub_100048F8+A4p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	esi
		mov	esi, [ebp+arg_4]
		push	edi
		cmp	esi, 111h
		ja	loc_10003E77
		cmp	esi, 110h
		jnb	short loc_10003E70
		lea	eax, [esi-1]
		dec	eax
		jz	loc_10003EC4
		dec	eax
		jz	short loc_10003E2F
		sub	eax, 0FEh
		jz	short loc_10003E19
		dec	eax
		dec	eax
		jmp	loc_10003E9E
; ---------------------------------------------------------------------------

loc_10003E19:				; CODE XREF: sub_10003DE2+2Ej
		push	0		; Size
		push	0		; Src
		push	101h		; int

loc_10003E22:				; CODE XREF: sub_10003DE2+68j
					; sub_10003DE2+93j ...
		push	[ebp+arg_8]	; int
		call	sub_100032C3
		jmp	loc_10003F23
; ---------------------------------------------------------------------------

loc_10003E2F:				; CODE XREF: sub_10003DE2+27j
		mov	ecx, [ebp+arg_0]
		lea	eax, [ecx+14h]
		push	eax
		push	dword ptr [ecx+8]
		call	sub_10003DC1
		mov	edi, eax
		pop	ecx
		pop	ecx
		test	edi, edi
		jnz	short loc_10003E4C
		push	eax
		push	eax
		push	3
		jmp	short loc_10003E22
; ---------------------------------------------------------------------------

loc_10003E4C:				; CODE XREF: sub_10003DE2+62j
		push	edi		; Str
		call	strlen
		push	eax		; Size
		push	edi		; Src
		push	3		; int
		push	[ebp+arg_8]	; int
		call	sub_100032C3
		push	edi
		mov	esi, eax
		call	PORT_Free_Util
		add	esp, 18h
		mov	eax, esi
		jmp	loc_10003F26
; ---------------------------------------------------------------------------

loc_10003E70:				; CODE XREF: sub_10003DE2+1Aj
		push	0
		push	0

loc_10003E74:				; CODE XREF: sub_10003DE2+E9j
		push	esi
		jmp	short loc_10003E22
; ---------------------------------------------------------------------------

loc_10003E77:				; CODE XREF: sub_10003DE2+Ej
		cmp	esi, 162h
		jb	short loc_10003EA0
		cmp	esi, 163h
		jbe	short loc_10003EC4
		mov	eax, 164h
		cmp	esi, eax
		jz	short loc_10003EB7
		cmp	esi, 165h
		jz	short loc_10003EC4
		cmp	esi, 170h

loc_10003E9E:				; CODE XREF: sub_10003DE2+32j
		jz	short loc_10003EC4

loc_10003EA0:				; CODE XREF: sub_10003DE2+9Bj
		mov	edi, [ebp+arg_0]
		push	edi
		call	sub_10004851
		pop	ecx
		mov	ecx, eax
		test	ecx, ecx
		jnz	short loc_10003ECD
		mov	eax, 82h
		jmp	short loc_10003F26
; ---------------------------------------------------------------------------

loc_10003EB7:				; CODE XREF: sub_10003DE2+ACj
		push	1
		push	offset byte_10015028
		push	eax
		jmp	loc_10003E22
; ---------------------------------------------------------------------------

loc_10003EC4:				; CODE XREF: sub_10003DE2+20j
					; sub_10003DE2+A3j ...
		push	1
		push	offset dword_10015000
		jmp	short loc_10003E74
; ---------------------------------------------------------------------------

loc_10003ECD:				; CODE XREF: sub_10003DE2+CCj
		mov	eax, [ecx+4]
		dec	eax
		jz	short loc_10003F16
		dec	eax
		jz	short loc_10003F07
		dec	eax
		dec	eax
		jz	short loc_10003EF8
		dec	eax
		jz	short loc_10003EE9
		mov	eax, [ebp+arg_8]
		push	12h
		or	dword ptr [eax+8], 0FFFFFFFFh
		pop	eax
		jmp	short loc_10003F26
; ---------------------------------------------------------------------------

loc_10003EE9:				; CODE XREF: sub_10003DE2+F9j
		push	dword ptr [edi+8]
		push	[ebp+arg_8]
		push	esi
		push	ecx
		call	sub_10003B2A
		jmp	short loc_10003F23
; ---------------------------------------------------------------------------

loc_10003EF8:				; CODE XREF: sub_10003DE2+F6j
		push	dword ptr [edi+8]
		push	[ebp+arg_8]
		push	esi
		push	ecx
		call	sub_100036EF
		jmp	short loc_10003F23
; ---------------------------------------------------------------------------

loc_10003F07:				; CODE XREF: sub_10003DE2+F2j
		push	dword ptr [edi+8]
		push	[ebp+arg_8]
		push	esi
		push	ecx
		call	sub_100038F7
		jmp	short loc_10003F23
; ---------------------------------------------------------------------------

loc_10003F16:				; CODE XREF: sub_10003DE2+EFj
		push	dword ptr [edi+8]
		push	[ebp+arg_8]
		push	esi
		push	ecx
		call	sub_10004078

loc_10003F23:				; CODE XREF: sub_10003DE2+48j
					; sub_10003DE2+114j ...
		add	esp, 10h

loc_10003F26:				; CODE XREF: sub_10003DE2+89j
					; sub_10003DE2+D3j ...
		pop	edi
		pop	esi
		pop	ebp
		retn
sub_10003DE2	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10003F2A	proc near		; CODE XREF: sub_100048F8+AFp

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	esi
		mov	esi, [ebp+arg_4]
		push	edi
		cmp	esi, 111h
		ja	loc_10003FDA
		cmp	esi, 110h
		jnb	loc_10003FD4
		lea	eax, [esi-1]
		dec	eax
		jz	loc_10004019
		dec	eax
		jz	short loc_10003F96
		sub	eax, 0FEh
		jz	short loc_10003F8B
		dec	eax
		dec	eax
		jz	loc_10004019

loc_10003F66:				; CODE XREF: sub_10003F2A+BEj
					; sub_10003F2A+D2j
		push	[ebp+arg_0]
		call	sub_100048AD
		pop	ecx
		mov	ecx, eax
		test	ecx, ecx
		jnz	loc_10004029
		mov	eax, 102h
		cmp	esi, eax
		jnz	loc_10004022
		push	ecx
		push	ecx
		push	eax
		jmp	short loc_1000400A
; ---------------------------------------------------------------------------

loc_10003F8B:				; CODE XREF: sub_10003F2A+32j
		push	0
		push	0
		push	101h
		jmp	short loc_1000400A
; ---------------------------------------------------------------------------

loc_10003F96:				; CODE XREF: sub_10003F2A+2Bj
		mov	ecx, [ebp+arg_0]
		lea	eax, [ecx+14h]
		push	eax
		push	dword ptr [ecx+8]
		call	sub_10003DC1
		mov	edi, eax
		pop	ecx
		pop	ecx
		test	edi, edi
		jnz	short loc_10003FB3
		push	eax
		push	eax
		push	3
		jmp	short loc_1000400A
; ---------------------------------------------------------------------------

loc_10003FB3:				; CODE XREF: sub_10003F2A+81j
		push	edi		; Str
		call	strlen
		push	eax		; Size
		push	edi		; Src
		push	3		; int
		push	[ebp+arg_8]	; int
		call	sub_100032C3
		push	edi
		mov	esi, eax
		call	PORT_Free_Util
		add	esp, 18h
		mov	eax, esi
		jmp	short loc_10004015
; ---------------------------------------------------------------------------

loc_10003FD4:				; CODE XREF: sub_10003F2A+1Aj
		push	0
		push	0
		jmp	short loc_10004009
; ---------------------------------------------------------------------------

loc_10003FDA:				; CODE XREF: sub_10003F2A+Ej
		cmp	esi, 162h
		jz	short loc_10004002
		cmp	esi, 163h
		jbe	loc_10003F66
		cmp	esi, 165h
		jbe	short loc_10004019
		cmp	esi, 170h
		jnz	loc_10003F66

loc_10004002:				; CODE XREF: sub_10003F2A+B6j
		push	1		; Size
		push	offset dword_10015000 ;	Src

loc_10004009:				; CODE XREF: sub_10003F2A+AEj
					; sub_10003F2A+F6j
		push	esi		; int

loc_1000400A:				; CODE XREF: sub_10003F2A+5Fj
					; sub_10003F2A+6Aj ...
		push	[ebp+arg_8]	; int
		call	sub_100032C3
		add	esp, 10h

loc_10004015:				; CODE XREF: sub_10003F2A+A8j
					; sub_10003F2A+FDj ...
		pop	edi
		pop	esi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_10004019:				; CODE XREF: sub_10003F2A+24j
					; sub_10003F2A+36j ...
		push	1
		push	offset byte_10015028
		jmp	short loc_10004009
; ---------------------------------------------------------------------------

loc_10004022:				; CODE XREF: sub_10003F2A+56j
		mov	eax, 82h
		jmp	short loc_10004015
; ---------------------------------------------------------------------------

loc_10004029:				; CODE XREF: sub_10003F2A+49j
		mov	eax, [ecx+4]
		dec	eax
		jz	short loc_10004069
		dec	eax
		jz	short loc_1000405D
		dec	eax
		dec	eax
		jz	short loc_10004051
		dec	eax
		jz	short loc_10004045
		mov	eax, [ebp+arg_8]
		push	12h
		or	dword ptr [eax+8], 0FFFFFFFFh
		pop	eax
		jmp	short loc_10004015
; ---------------------------------------------------------------------------

loc_10004045:				; CODE XREF: sub_10003F2A+10Dj
		push	[ebp+arg_8]
		push	esi
		push	ecx
		call	sub_10003C4C
		jmp	short loc_10004073
; ---------------------------------------------------------------------------

loc_10004051:				; CODE XREF: sub_10003F2A+10Aj
		push	[ebp+arg_8]
		push	esi
		push	ecx
		call	sub_100037FA
		jmp	short loc_10004073
; ---------------------------------------------------------------------------

loc_1000405D:				; CODE XREF: sub_10003F2A+106j
		push	[ebp+arg_8]
		push	esi
		push	ecx
		call	sub_10003A2A
		jmp	short loc_10004073
; ---------------------------------------------------------------------------

loc_10004069:				; CODE XREF: sub_10003F2A+103j
		push	[ebp+arg_8]
		push	esi
		push	ecx
		call	sub_100041CD

loc_10004073:				; CODE XREF: sub_10003F2A+125j
					; sub_10003F2A+131j ...
		add	esp, 0Ch
		jmp	short loc_10004015
sub_10003F2A	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10004078	proc near		; CODE XREF: sub_10003DE2+13Cp

Src		= byte ptr -18h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	eax, ___security_cookie
		xor	eax, ebp
		mov	[ebp+var_4], eax
		mov	ecx, [ebp+arg_0]
		mov	edx, [ebp+arg_C]
		push	esi
		mov	esi, [ebp+arg_8]
		push	edi
		mov	edi, [ebp+arg_4]
		lea	eax, [edi-100h]	; switch 41 cases
		cmp	eax, 28h
		ja	loc_10004158	; jumptable 100040AC default case
		movzx	eax, ds:byte_100041A4[eax]
		jmp	ds:off_10004170[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_100040B3:				; CODE XREF: sub_10004078+34j
					; DATA XREF: .text:off_10004170o
		push	0		; jumptable 100040AC case 256
		push	edi
		push	esi
		call	sub_10004FCF
		add	esp, 0Ch
		jmp	loc_1000415F
; ---------------------------------------------------------------------------

loc_100040C4:				; CODE XREF: sub_10004078+34j
					; DATA XREF: .text:off_10004170o
		push	dword ptr [ecx+20h] ; jumptable	100040AC case 258
		lea	eax, [ebp+Src]
		push	dword ptr [ecx+1Ch]
		push	eax
		call	sub_1000E0A0
		push	14h		; Size
		lea	eax, [ebp+Src]
		push	eax		; Src
		push	edi		; int
		push	esi		; int
		call	sub_100032C3
		add	esp, 1Ch
		jmp	short loc_1000415F
; ---------------------------------------------------------------------------

loc_100040E5:				; CODE XREF: sub_10004078+34j
					; DATA XREF: .text:off_10004170o
		push	1		; jumptable 100040AC case 268
		push	offset byte_10015028 ; Src

loc_100040EC:				; CODE XREF: sub_10004078+87j
		push	edi		; int
		push	esi		; int
		call	sub_100032C3

loc_100040F3:				; CODE XREF: sub_10004078+96j
		add	esp, 10h
		jmp	short loc_1000415F
; ---------------------------------------------------------------------------

loc_100040F8:				; CODE XREF: sub_10004078+34j
					; DATA XREF: .text:off_10004170o
		push	1		; jumptable 100040AC cases 261,263-265
		push	offset dword_10015000
		jmp	short loc_100040EC
; ---------------------------------------------------------------------------

loc_10004101:				; CODE XREF: sub_10004078+34j
					; DATA XREF: .text:off_10004170o
		push	dword ptr [ecx+20h] ; jumptable	100040AC case 288
		push	dword ptr [ecx+1Ch] ; Src

loc_10004107:				; CODE XREF: sub_10004078+9Ej
		push	edi		; int
		push	esi		; int
		call	sub_10003306
		jmp	short loc_100040F3
; ---------------------------------------------------------------------------

loc_10004110:				; CODE XREF: sub_10004078+34j
					; DATA XREF: .text:off_10004170o
		push	dword ptr [ecx+2Ch] ; jumptable	100040AC case 290
		push	dword ptr [ecx+28h]
		jmp	short loc_10004107
; ---------------------------------------------------------------------------

loc_10004118:				; CODE XREF: sub_10004078+34j
					; DATA XREF: .text:off_10004170o
		push	edx		; jumptable 100040AC case 291
		push	dword ptr [ecx+38h]
		push	dword ptr [ecx+34h]

loc_1000411F:				; CODE XREF: sub_10004078+BAj
					; sub_10004078+C3j ...
		push	edi
		push	esi
		call	sub_10003328
		add	esp, 14h
		jmp	short loc_1000415F
; ---------------------------------------------------------------------------

loc_1000412B:				; CODE XREF: sub_10004078+34j
					; DATA XREF: .text:off_10004170o
		push	edx		; jumptable 100040AC case 292
		push	dword ptr [ecx+44h]
		push	dword ptr [ecx+40h]
		jmp	short loc_1000411F
; ---------------------------------------------------------------------------

loc_10004134:				; CODE XREF: sub_10004078+34j
					; DATA XREF: .text:off_10004170o
		push	edx		; jumptable 100040AC case 293
		push	dword ptr [ecx+50h]
		push	dword ptr [ecx+4Ch]
		jmp	short loc_1000411F
; ---------------------------------------------------------------------------

loc_1000413D:				; CODE XREF: sub_10004078+34j
					; DATA XREF: .text:off_10004170o
		push	edx		; jumptable 100040AC case 294
		push	dword ptr [ecx+5Ch]
		push	dword ptr [ecx+58h]
		jmp	short loc_1000411F
; ---------------------------------------------------------------------------

loc_10004146:				; CODE XREF: sub_10004078+34j
					; DATA XREF: .text:off_10004170o
		push	edx		; jumptable 100040AC case 295
		push	dword ptr [ecx+68h]
		push	dword ptr [ecx+64h]
		jmp	short loc_1000411F
; ---------------------------------------------------------------------------

loc_1000414F:				; CODE XREF: sub_10004078+34j
					; DATA XREF: .text:off_10004170o
		push	edx		; jumptable 100040AC case 296
		push	dword ptr [ecx+74h]
		push	dword ptr [ecx+70h]
		jmp	short loc_1000411F
; ---------------------------------------------------------------------------

loc_10004158:				; CODE XREF: sub_10004078+27j
					; sub_10004078+34j
					; DATA XREF: ...
		or	dword ptr [esi+8], 0FFFFFFFFh ;	jumptable 100040AC default case
		push	12h
		pop	eax

loc_1000415F:				; CODE XREF: sub_10004078+47j
					; sub_10004078+6Bj ...
		mov	ecx, [ebp+var_4]
		pop	edi
		xor	ecx, ebp
		pop	esi
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	esp, ebp
		pop	ebp
		retn
sub_10004078	endp

; ---------------------------------------------------------------------------
		align 10h
off_10004170	dd offset loc_100040B3	; DATA XREF: sub_10004078+34r
		dd offset loc_100040C4	; jump table for switch	statement
		dd offset loc_100040F8
		dd offset loc_100040E5
		dd offset loc_10004101
		dd offset loc_10004110
		dd offset loc_10004118
		dd offset loc_1000412B
		dd offset loc_10004134
		dd offset loc_1000413D
		dd offset loc_10004146
		dd offset loc_1000414F
		dd offset loc_10004158
byte_100041A4	db	0,   0Ch,     1,   0Ch ; DATA XREF: sub_10004078+2Dr
		db    0Ch,     2,   0Ch,     2 ; indirect table	for switch statement
		db	2,     2,   0Ch,   0Ch
		db	3,   0Ch,   0Ch,   0Ch
		db    0Ch,   0Ch,   0Ch,   0Ch
		db    0Ch,   0Ch,   0Ch,   0Ch
		db    0Ch,   0Ch,   0Ch,   0Ch
		db    0Ch,   0Ch,   0Ch,   0Ch
		db	4,   0Ch,     5,     6
		db	7,     8,     9,   0Ah
		db    0Bh

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_100041CD	proc near		; CODE XREF: sub_10003F2A+144p

Src		= byte ptr -18h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	eax, ___security_cookie
		xor	eax, ebp
		mov	[ebp+var_4], eax
		mov	ecx, [ebp+arg_0]
		push	esi
		mov	esi, [ebp+arg_8]
		push	edi
		mov	edi, [ebp+arg_4]
		lea	eax, [edi-100h]	; switch 35 cases
		cmp	eax, 22h
		ja	short loc_10004263 ; jumptable 100041FA	default	case
		movzx	eax, ds:byte_10004299[eax]
		jmp	ds:off_1000427D[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_10004201:				; CODE XREF: sub_100041CD+2Dj
					; DATA XREF: .text:off_1000427Do
		push	0		; jumptable 100041FA case 256
		push	edi
		push	esi
		call	sub_10004FCF
		add	esp, 0Ch
		jmp	short loc_1000426A
; ---------------------------------------------------------------------------

loc_1000420F:				; CODE XREF: sub_100041CD+2Dj
					; DATA XREF: .text:off_1000427Do
		push	dword ptr [ecx+14h] ; jumptable	100041FA case 258
		lea	eax, [ebp+Src]
		push	dword ptr [ecx+10h]
		push	eax
		call	sub_1000E0A0
		push	14h		; Size
		lea	eax, [ebp+Src]
		push	eax		; Src
		push	edi		; int
		push	esi		; int
		call	sub_100032C3
		add	esp, 1Ch
		jmp	short loc_1000426A
; ---------------------------------------------------------------------------

loc_10004230:				; CODE XREF: sub_100041CD+2Dj
					; DATA XREF: .text:off_1000427Do
		push	1		; jumptable 100041FA case 268
		push	offset byte_10015028 ; Src

loc_10004237:				; CODE XREF: sub_100041CD+7Dj
		push	edi		; int
		push	esi		; int
		call	sub_100032C3

loc_1000423E:				; CODE XREF: sub_100041CD+8Cj
		add	esp, 10h
		jmp	short loc_1000426A
; ---------------------------------------------------------------------------

loc_10004243:				; CODE XREF: sub_100041CD+2Dj
					; DATA XREF: .text:off_1000427Do
		push	1		; jumptable 100041FA cases 260,262,266,267
		push	offset dword_10015000
		jmp	short loc_10004237
; ---------------------------------------------------------------------------

loc_1000424C:				; CODE XREF: sub_100041CD+2Dj
					; DATA XREF: .text:off_1000427Do
		push	dword ptr [ecx+14h] ; jumptable	100041FA case 288
		push	dword ptr [ecx+10h] ; Src

loc_10004252:				; CODE XREF: sub_100041CD+94j
		push	edi		; int
		push	esi		; int
		call	sub_10003306
		jmp	short loc_1000423E
; ---------------------------------------------------------------------------

loc_1000425B:				; CODE XREF: sub_100041CD+2Dj
					; DATA XREF: .text:off_1000427Do
		push	dword ptr [ecx+20h] ; jumptable	100041FA case 290
		push	dword ptr [ecx+1Ch]
		jmp	short loc_10004252
; ---------------------------------------------------------------------------

loc_10004263:				; CODE XREF: sub_100041CD+24j
					; sub_100041CD+2Dj
					; DATA XREF: ...
		or	dword ptr [esi+8], 0FFFFFFFFh ;	jumptable 100041FA default case
		push	12h
		pop	eax

loc_1000426A:				; CODE XREF: sub_100041CD+40j
					; sub_100041CD+61j ...
		mov	ecx, [ebp+var_4]
		pop	edi
		xor	ecx, ebp
		pop	esi
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	esp, ebp
		pop	ebp
		retn
sub_100041CD	endp

; ---------------------------------------------------------------------------
		db 8Dh,	49h, 0
off_1000427D	dd offset loc_10004201	; DATA XREF: sub_100041CD+2Dr
		dd offset loc_1000420F	; jump table for switch	statement
		dd offset loc_10004243
		dd offset loc_10004230
		dd offset loc_1000424C
		dd offset loc_1000425B
		dd offset loc_10004263
byte_10004299	db	0,     6,     1,     6 ; DATA XREF: sub_100041CD+26r
		db	2,     6,     2,     6 ; indirect table	for switch statement
		db	6,     6,     2,     2
		db	3,     6,     6,     6
		db	6,     6,     6,     6
		db	6,     6,     6,     6
		db	6,     6,     6,     6
		db	6,     6,     6,     6
		db	4,     6,     5

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_100042BC	proc near		; CODE XREF: sub_100048F8+83p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	ebx
		push	esi
		mov	esi, [ebp+arg_4]
		push	edi
		cmp	esi, 2
		jz	short loc_10004347
		mov	ebx, 101h
		mov	edi, 0CE534354h
		cmp	esi, 11h
		jz	short loc_1000430A
		cmp	esi, ebx
		jz	short loc_1000430A
		cmp	esi, 170h
		jz	short loc_10004347
		lea	edx, [edi-2]
		cmp	esi, edx
		jz	short loc_100042FC
		cmp	esi, edi
		jz	short loc_1000430A

loc_100042F0:				; CODE XREF: sub_100042BC+6Dj
		mov	eax, [ebp+arg_8]
		push	12h
		or	dword ptr [eax+8], 0FFFFFFFFh
		pop	eax
		jmp	short loc_1000435A
; ---------------------------------------------------------------------------

loc_100042FC:				; CODE XREF: sub_100042BC+2Ej
		mov	ecx, [ebp+arg_0]
		mov	eax, [ecx+1Ch]
		dec	eax
		push	eax
		push	dword ptr [ecx+18h]
		push	edx
		jmp	short loc_1000434F
; ---------------------------------------------------------------------------

loc_1000430A:				; CODE XREF: sub_100042BC+1Bj
					; sub_100042BC+1Fj ...
		push	[ebp+arg_0]
		call	sub_1000514F
		pop	ecx
		test	eax, eax
		jnz	short loc_1000431E
		mov	eax, 82h
		jmp	short loc_1000435A
; ---------------------------------------------------------------------------

loc_1000431E:				; CODE XREF: sub_100042BC+59j
		cmp	esi, 11h
		jz	short loc_1000433D
		cmp	esi, ebx
		jz	short loc_10004334
		cmp	esi, edi
		jnz	short loc_100042F0
		push	dword ptr [eax+34h]
		push	dword ptr [eax+30h]
		push	edi
		jmp	short loc_1000434F
; ---------------------------------------------------------------------------

loc_10004334:				; CODE XREF: sub_100042BC+69j
		push	dword ptr [eax+1Ch]
		push	dword ptr [eax+18h]
		push	ebx
		jmp	short loc_1000434F
; ---------------------------------------------------------------------------

loc_1000433D:				; CODE XREF: sub_100042BC+65j
		push	dword ptr [eax+28h]
		push	dword ptr [eax+24h]
		push	11h
		jmp	short loc_1000434F
; ---------------------------------------------------------------------------

loc_10004347:				; CODE XREF: sub_100042BC+Cj
					; sub_100042BC+27j
		push	1		; Size
		push	offset byte_10015028 ; Src
		push	esi		; int

loc_1000434F:				; CODE XREF: sub_100042BC+4Cj
					; sub_100042BC+76j ...
		push	[ebp+arg_8]	; int
		call	sub_100032C3
		add	esp, 10h

loc_1000435A:				; CODE XREF: sub_100042BC+3Ej
					; sub_100042BC+60j
		pop	edi
		pop	esi
		pop	ebx
		pop	ebp
		retn
sub_100042BC	endp


; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1000435F(int,	int Dst, int)
sub_1000435F	proc near		; CODE XREF: sub_100048F8+99p

arg_0		= dword	ptr  4
Dst		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		mov	ebx, 161h
		push	ebp
		push	esi
		mov	esi, [esp+0Ch+Dst]
		lea	eax, [ebx-55h]
		lea	ebp, [ebx-61h]
		push	edi
		cmp	esi, eax
		ja	loc_1000442E
		jz	loc_10004473
		cmp	esi, ebp
		ja	short loc_100043FF
		jz	short loc_1000439C
		lea	eax, [esi-1]
		dec	eax
		jz	loc_10004473
		dec	eax
		jz	short loc_100043B9
		sub	eax, 0Eh
		jnz	loc_10004558

loc_1000439C:				; CODE XREF: sub_1000435F+25j
					; sub_1000435F+FCj
		mov	edi, [esp+10h+arg_0]
		push	edi
		call	sub_10004851
		pop	ecx
		test	eax, eax
		jnz	loc_1000448C
		mov	eax, 82h
		jmp	loc_10004487
; ---------------------------------------------------------------------------

loc_100043B9:				; CODE XREF: sub_1000435F+32j
		mov	ecx, [esp+10h+arg_0]
		lea	eax, [ecx+14h]
		push	eax
		push	dword ptr [ecx+8]
		call	sub_10003DC1
		mov	edi, eax
		pop	ecx
		pop	ecx
		test	edi, edi
		jnz	short loc_100043DA
		push	eax
		push	eax
		push	3
		jmp	loc_1000447B
; ---------------------------------------------------------------------------

loc_100043DA:				; CODE XREF: sub_1000435F+70j
		push	edi		; Str
		call	strlen
		push	eax		; Size
		push	edi		; Src
		push	3		; int
		push	[esp+20h+arg_8]	; int
		call	sub_100032C3
		push	edi
		mov	esi, eax
		call	PORT_Free_Util
		add	esp, 18h
		mov	eax, esi
		jmp	loc_10004487
; ---------------------------------------------------------------------------

loc_100043FF:				; CODE XREF: sub_1000435F+23j
		mov	ecx, 102h
		cmp	esi, ecx
		jz	short loc_10004421
		jbe	loc_10004558
		cmp	esi, 108h
		jbe	short loc_10004473
		cmp	esi, 10Ah
		jmp	loc_10004552
; ---------------------------------------------------------------------------

loc_10004421:				; CODE XREF: sub_1000435F+A7j
		mov	eax, [esp+10h+arg_0]
		push	dword ptr [eax+1Ch]
		push	dword ptr [eax+18h]
		push	ecx
		jmp	short loc_1000447B
; ---------------------------------------------------------------------------

loc_1000442E:				; CODE XREF: sub_1000435F+15j
		mov	eax, 164h
		cmp	esi, eax
		ja	loc_10004542
		jz	loc_10004535
		cmp	esi, 110h
		jb	loc_10004558
		cmp	esi, 111h
		jbe	loc_1000452C
		cmp	esi, ebx
		jz	loc_1000439C
		jbe	loc_10004558
		cmp	esi, 163h
		ja	loc_10004558

loc_10004473:				; CODE XREF: sub_1000435F+1Bj
					; sub_1000435F+2Bj ...
		push	1		; Size
		push	offset dword_10015000 ;	Src

loc_1000447A:				; CODE XREF: sub_1000435F+1D1j
		push	esi		; int

loc_1000447B:				; CODE XREF: sub_1000435F+76j
					; sub_1000435F+CDj ...
		push	[esp+1Ch+arg_8]	; int
		call	sub_100032C3
		add	esp, 10h

loc_10004487:				; CODE XREF: sub_1000435F+55j
					; sub_1000435F+9Bj ...
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1000448C:				; CODE XREF: sub_1000435F+4Aj
		sub	esi, 11h
		jz	short loc_10004510
		sub	esi, 0EFh
		jz	short loc_100044A8
		sub	esi, 61h
		jnz	loc_10004558
		push	dword ptr [eax+38h]
		push	ebx
		jmp	short loc_100044FF
; ---------------------------------------------------------------------------

loc_100044A8:				; CODE XREF: sub_1000435F+138j
		mov	ecx, [eax+70h]
		mov	eax, [eax+74h]
		push	4
		pop	edx
		cmp	eax, 8
		jnz	short loc_100044C4
		mov	eax, [ecx]
		mov	[esp+10h+Dst], eax
		test	eax, eax
		jnz	short loc_100044C2
		add	ecx, edx

loc_100044C2:				; CODE XREF: sub_1000435F+15Fj
		mov	eax, edx

loc_100044C4:				; CODE XREF: sub_1000435F+155j
		cmp	eax, edx
		jnz	short loc_100044FA
		test	byte ptr [ecx],	80h
		jnz	short loc_100044DF
		cmp	byte ptr [ecx+1], 0
		jnz	short loc_100044DF
		cmp	byte ptr [ecx+2], 0
		jnz	short loc_100044DF
		cmp	byte ptr [ecx+3], 0
		jz	short loc_100044FA

loc_100044DF:				; CODE XREF: sub_1000435F+16Cj
					; sub_1000435F+172j ...
		push	edx		; Size
		push	ecx		; Src
		lea	eax, [esp+18h+Dst]
		push	eax		; Dst
		call	memcpy
		push	[esp+1Ch+Dst]
		call	ds:PR_ntohl
		add	esp, 10h
		jmp	short loc_100044FD
; ---------------------------------------------------------------------------

loc_100044FA:				; CODE XREF: sub_1000435F+167j
					; sub_1000435F+17Ej
		movzx	eax, byte ptr [ecx]

loc_100044FD:				; CODE XREF: sub_1000435F+199j
		push	eax
		push	ebp

loc_100044FF:				; CODE XREF: sub_1000435F+147j
		push	[esp+18h+arg_8]
		call	sub_10004FCF
		add	esp, 0Ch
		jmp	loc_10004487
; ---------------------------------------------------------------------------

loc_10004510:				; CODE XREF: sub_1000435F+130j
		push	dword ptr [edi+8]
		push	dword ptr [eax+38h]
		push	dword ptr [eax+34h]
		push	11h
		push	[esp+20h+arg_8]
		call	sub_1000334D
		add	esp, 14h
		jmp	loc_10004487
; ---------------------------------------------------------------------------

loc_1000452C:				; CODE XREF: sub_1000435F+F4j
		push	0
		push	0
		jmp	loc_1000447A
; ---------------------------------------------------------------------------

loc_10004535:				; CODE XREF: sub_1000435F+DCj
		push	1
		push	offset byte_10015028
		push	eax
		jmp	loc_1000447B
; ---------------------------------------------------------------------------

loc_10004542:				; CODE XREF: sub_1000435F+D6j
		mov	eax, esi
		sub	eax, 165h
		jz	loc_10004473
		sub	eax, 0Bh

loc_10004552:				; CODE XREF: sub_1000435F+BDj
		jz	loc_10004473

loc_10004558:				; CODE XREF: sub_1000435F+37j
					; sub_1000435F+A9j ...
		mov	eax, [esp+10h+arg_8]
		push	12h
		or	dword ptr [eax+8], 0FFFFFFFFh
		pop	eax
		jmp	loc_10004487
sub_1000435F	endp


; =============== S U B	R O U T	I N E =======================================


sub_10004568	proc near		; CODE XREF: sub_100048F8+78p

Src		= byte ptr -18h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 18h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+18h+var_4], eax
		push	ebx
		mov	ebx, [esp+1Ch+arg_0]
		push	esi
		mov	esi, [esp+20h+arg_4]
		push	edi
		mov	edi, [esp+24h+arg_8]
		cmp	esi, 0CE53635Bh
		ja	short loc_100045D4
		cmp	esi, 0CE536358h
		jnb	short loc_100045F8
		cmp	esi, 2
		jz	short loc_100045BD
		cmp	esi, 80h
		jbe	short loc_100045EC
		cmp	esi, 82h
		jbe	short loc_100045F8
		mov	eax, 170h
		cmp	esi, eax
		jnz	short loc_100045EC
		push	1
		push	offset dword_10015000
		push	eax
		jmp	short loc_100045C6
; ---------------------------------------------------------------------------

loc_100045BD:				; CODE XREF: sub_10004568+30j
		push	1		; Size
		push	offset byte_10015028 ; Src
		push	2		; int

loc_100045C6:				; CODE XREF: sub_10004568+53j
		push	edi		; int
		call	sub_100032C3
		add	esp, 10h
		jmp	loc_100047E6
; ---------------------------------------------------------------------------

loc_100045D4:				; CODE XREF: sub_10004568+23j
		cmp	esi, 0CE536360h
		jz	short loc_100045F8
		cmp	esi, 0CE5363B3h
		jbe	short loc_100045EC
		cmp	esi, 0CE5363B5h
		jbe	short loc_100045F8

loc_100045EC:				; CODE XREF: sub_10004568+38j
					; sub_10004568+49j ...
		or	dword ptr [edi+8], 0FFFFFFFFh
		push	12h
		pop	eax
		jmp	loc_100047E6
; ---------------------------------------------------------------------------

loc_100045F8:				; CODE XREF: sub_10004568+2Bj
					; sub_10004568+40j ...
		push	ebp
		push	dword ptr [ebx+8]
		call	sub_100078B4
		mov	ebp, eax
		pop	ecx
		test	ebp, ebp
		jz	loc_100047E0
		cmp	dword ptr [ebx], 0CE534353h
		jnz	loc_100047E0
		mov	eax, [ebx+0Ch]
		test	eax, eax
		jnz	short loc_1000463D
		lea	eax, [ebx+14h]
		push	eax
		push	ebp
		call	sub_1000C682
		mov	[ebx+0Ch], eax
		mov	dword ptr [ebx+10h], offset sub_1000C2AB
		pop	ecx
		pop	ecx
		test	eax, eax
		jz	loc_100047E0

loc_1000463D:				; CODE XREF: sub_10004568+B5j
		cmp	esi, 0CE536358h
		jz	loc_10004789
		cmp	esi, 0CE536359h
		jz	loc_10004777
		cmp	esi, 0CE53635Ah
		jz	loc_1000476F
		cmp	esi, 0CE53635Bh
		jz	loc_10004767
		mov	ecx, 0CE536360h
		cmp	esi, ecx
		jz	loc_10004742
		cmp	esi, 0CE5363B4h
		jz	loc_10004715
		cmp	esi, 0CE5363B5h
		jz	short loc_100046F4
		sub	esi, 81h
		jz	short loc_100046B5
		dec	esi
		jnz	short loc_100046E8
		push	ebp
		push	ebx
		call	sub_100050BF
		mov	esi, eax
		pop	ecx
		pop	ecx
		test	esi, esi
		jz	short loc_100046E8
		push	dword ptr [esi+28h]
		push	dword ptr [esi+24h]
		push	82h
		jmp	short loc_100046CF
; ---------------------------------------------------------------------------

loc_100046B5:				; CODE XREF: sub_10004568+12Cj
		push	ebp
		push	ebx
		call	sub_100050BF
		mov	esi, eax
		pop	ecx
		pop	ecx
		test	esi, esi
		jz	short loc_100046E8
		push	dword ptr [esi+1Ch] ; Size
		push	dword ptr [esi+18h] ; Src
		push	81h		; int

loc_100046CF:				; CODE XREF: sub_10004568+14Bj
		push	edi		; int
		call	sub_100032C3
		add	esp, 10h
		mov	edi, eax
		push	esi		; Dst
		call	sub_1000C19A
		pop	ecx
		mov	eax, edi
		jmp	loc_100047E5
; ---------------------------------------------------------------------------

loc_100046E8:				; CODE XREF: sub_10004568+12Fj
					; sub_10004568+13Ej ...
		or	dword ptr [edi+8], 0FFFFFFFFh
		push	12h
		pop	eax
		jmp	loc_100047E5
; ---------------------------------------------------------------------------

loc_100046F4:				; CODE XREF: sub_10004568+124j
		mov	eax, [eax+1Ch]
		push	dword ptr [eax+8]
		push	dword ptr [eax+4]
		lea	eax, [esp+30h+Src]
		push	eax
		call	sub_1000DFE0
		push	10h
		lea	eax, [esp+38h+Src]
		push	eax
		push	0CE5363B5h
		jmp	short loc_10004734
; ---------------------------------------------------------------------------

loc_10004715:				; CODE XREF: sub_10004568+118j
		mov	eax, [eax+1Ch]
		push	dword ptr [eax+8]
		push	dword ptr [eax+4]
		lea	eax, [esp+30h+Src]
		push	eax
		call	sub_1000E0A0
		push	14h		; Size
		lea	eax, [esp+38h+Src]
		push	eax		; Src
		push	0CE5363B4h	; int

loc_10004734:				; CODE XREF: sub_10004568+1ABj
		push	edi		; int
		call	sub_100032C3
		add	esp, 1Ch
		jmp	loc_100047E5
; ---------------------------------------------------------------------------

loc_10004742:				; CODE XREF: sub_10004568+10Cj
		mov	eax, [eax+18h]
		push	1		; Size
		test	dword ptr [eax], 200h
		jz	short loc_10004756
		push	offset dword_10015000
		jmp	short loc_1000475B
; ---------------------------------------------------------------------------

loc_10004756:				; CODE XREF: sub_10004568+1E5j
		push	offset byte_10015028 ; Src

loc_1000475B:				; CODE XREF: sub_10004568+1ECj
		push	ecx		; int
		push	edi		; int
		call	sub_100032C3
		add	esp, 10h
		jmp	short loc_100047E5
; ---------------------------------------------------------------------------

loc_10004767:				; CODE XREF: sub_10004568+FFj
		mov	eax, [eax+18h]
		mov	eax, [eax+4]
		jmp	short loc_1000478E
; ---------------------------------------------------------------------------

loc_1000476F:				; CODE XREF: sub_10004568+F3j
		mov	eax, [eax+18h]
		mov	eax, [eax+8]
		jmp	short loc_1000478E
; ---------------------------------------------------------------------------

loc_10004777:				; CODE XREF: sub_10004568+E7j
		mov	eax, [eax+18h]
		mov	eax, [eax]
		test	al, al
		jns	short loc_10004785
		or	eax, 10h
		jmp	short loc_1000478E
; ---------------------------------------------------------------------------

loc_10004785:				; CODE XREF: sub_10004568+216j
		xor	eax, eax
		jmp	short loc_1000478E
; ---------------------------------------------------------------------------

loc_10004789:				; CODE XREF: sub_10004568+DBj
		mov	eax, [eax+18h]
		mov	eax, [eax]

loc_1000478E:				; CODE XREF: sub_10004568+205j
					; sub_10004568+20Dj ...
		test	al, 10h
		jz	short loc_10004799
		push	0CE534352h
		jmp	short loc_100047D4
; ---------------------------------------------------------------------------

loc_10004799:				; CODE XREF: sub_10004568+228j
		test	al, 2
		jz	short loc_100047A4
		push	0CE534351h
		jmp	short loc_100047D4
; ---------------------------------------------------------------------------

loc_100047A4:				; CODE XREF: sub_10004568+233j
		test	eax, 400h
		jz	short loc_100047B2
		push	0CE534353h
		jmp	short loc_100047D4
; ---------------------------------------------------------------------------

loc_100047B2:				; CODE XREF: sub_10004568+241j
		test	eax, 800h
		jnz	short loc_100047CF
		test	al, 8
		jz	short loc_100047C4
		push	0CE53435Bh
		jmp	short loc_100047D4
; ---------------------------------------------------------------------------

loc_100047C4:				; CODE XREF: sub_10004568+253j
		test	al, 1
		jz	short loc_100047CF
		push	0CE53435Ah
		jmp	short loc_100047D4
; ---------------------------------------------------------------------------

loc_100047CF:				; CODE XREF: sub_10004568+24Fj
					; sub_10004568+25Ej
		push	0CE534355h

loc_100047D4:				; CODE XREF: sub_10004568+22Fj
					; sub_10004568+23Aj ...
		push	esi
		push	edi
		call	sub_10004FCF
		add	esp, 0Ch
		jmp	short loc_100047E5
; ---------------------------------------------------------------------------

loc_100047E0:				; CODE XREF: sub_10004568+9Ej
					; sub_10004568+AAj ...
		mov	eax, 82h

loc_100047E5:				; CODE XREF: sub_10004568+17Bj
					; sub_10004568+187j ...
		pop	ebp

loc_100047E6:				; CODE XREF: sub_10004568+67j
					; sub_10004568+8Bj
		mov	ecx, [esp+24h+var_4]
		pop	edi
		pop	esi
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 18h
		retn
sub_10004568	endp


; =============== S U B	R O U T	I N E =======================================


sub_100047F8	proc near		; DATA XREF: sub_100078E3+96o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	eax, [esp+arg_4]
		push	ebp
		push	esi
		and	eax, 3FFFFFFFh
		xor	esi, esi
		push	eax
		push	esi
		push	[esp+10h+arg_0]
		call	sub_100049DD
		mov	ebp, eax
		add	esp, 0Ch
		test	ebp, ebp
		jnz	short loc_10004820
		mov	eax, 82h
		jmp	short loc_1000484E
; ---------------------------------------------------------------------------

loc_10004820:				; CODE XREF: sub_100047F8+1Fj
		push	edi
		mov	edi, [esp+0Ch+arg_C]
		test	edi, edi
		jz	short loc_10004844
		push	ebx
		mov	ebx, [esp+10h+arg_8]

loc_1000482E:				; CODE XREF: sub_100047F8+49j
		push	ebx
		push	ebp
		call	sub_100048F8
		pop	ecx
		pop	ecx
		test	esi, esi
		jnz	short loc_1000483D
		mov	esi, eax

loc_1000483D:				; CODE XREF: sub_100047F8+41j
		add	ebx, 0Ch
		dec	edi
		jnz	short loc_1000482E
		pop	ebx

loc_10004844:				; CODE XREF: sub_100047F8+2Fj
		push	ebp
		call	sub_100033B4
		pop	ecx
		mov	eax, esi
		pop	edi

loc_1000484E:				; CODE XREF: sub_100047F8+26j
		pop	esi
		pop	ebp
		retn
sub_100047F8	endp


; =============== S U B	R O U T	I N E =======================================


sub_10004851	proc near		; CODE XREF: sub_10003DE2+C2p
					; sub_1000435F+42p ...

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		push	dword ptr [esi+8]
		call	sub_100078BD
		pop	ecx
		test	eax, eax
		jnz	short loc_10004865
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10004865:				; CODE XREF: sub_10004851+10j
		push	eax
		push	esi
		call	sub_10004870
		pop	ecx
		pop	ecx
		pop	esi
		retn
sub_10004851	endp


; =============== S U B	R O U T	I N E =======================================


sub_10004870	proc near		; CODE XREF: sub_10004851+16p
					; sub_10004C8F+65p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_0]
		cmp	dword ptr [esi], 3
		jz	short loc_10004883
		cmp	dword ptr [esi], 4
		jz	short loc_10004883

loc_1000487F:				; CODE XREF: sub_10004870+2Fj
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10004883:				; CODE XREF: sub_10004870+8j
					; sub_10004870+Dj
		mov	eax, [esi+0Ch]
		test	eax, eax
		jnz	short loc_100048AB
		push	dword ptr [esi+8]
		lea	eax, [esi+14h]
		push	eax
		push	[esp+0Ch+arg_4]
		call	sub_10001F2D
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_1000487F
		mov	[esi+0Ch], eax
		mov	dword ptr [esi+10h], offset sub_10008EC8

loc_100048AB:				; CODE XREF: sub_10004870+18j
		pop	esi
		retn
sub_10004870	endp


; =============== S U B	R O U T	I N E =======================================


sub_100048AD	proc near		; CODE XREF: sub_10003F2A+3Fp

arg_0		= dword	ptr  4

		push	edi
		mov	edi, [esp+4+arg_0]
		cmp	dword ptr [edi], 2
		jz	short loc_100048BB
		xor	eax, eax
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_100048BB:				; CODE XREF: sub_100048AD+8j
		mov	eax, [edi+0Ch]
		test	eax, eax
		jnz	short loc_100048F6
		push	ebx
		lea	eax, [edi+14h]
		push	eax
		push	dword ptr [edi+8]
		call	sub_10003DA0
		mov	ebx, eax
		pop	ecx
		pop	ecx
		test	ebx, ebx
		jz	short loc_100048F5
		push	esi
		push	ebx
		call	sub_10008CF5
		push	ebx
		mov	esi, eax
		call	sub_10008EC8
		pop	ecx
		pop	ecx
		mov	[edi+0Ch], esi
		mov	eax, esi
		mov	dword ptr [edi+10h], offset sub_10008EE1
		pop	esi

loc_100048F5:				; CODE XREF: sub_100048AD+28j
		pop	ebx

loc_100048F6:				; CODE XREF: sub_100048AD+13j
		pop	edi
		retn
sub_100048AD	endp


; =============== S U B	R O U T	I N E =======================================


sub_100048F8	proc near		; CODE XREF: sub_100047F8+38p
					; sub_10004DCD+3Cp ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	ecx, [esp+arg_4]
		xor	edx, edx
		mov	eax, [ecx]
		sub	eax, edx
		jz	loc_100049CC
		dec	eax
		jz	loc_100049B9
		dec	eax
		dec	eax
		mov	eax, [esp+arg_0]
		jnz	short loc_10004938
		cmp	dword ptr [eax], 1
		jz	loc_100049AE
		cmp	dword ptr [eax], 3
		jz	short loc_10004938
		cmp	dword ptr [eax], 2
		jz	short loc_10004938
		cmp	dword ptr [eax], 4
		jz	short loc_10004938
		push	edx
		push	edx
		push	3
		jmp	loc_100049C2
; ---------------------------------------------------------------------------

loc_10004938:				; CODE XREF: sub_100048F8+1Dj
					; sub_100048F8+2Bj ...
		cmp	dword ptr [eax], 1
		jz	short loc_100049AE
		cmp	dword ptr [eax], 2
		jz	short loc_100049A3
		cmp	dword ptr [eax], 3
		jz	short loc_10004998
		cmp	dword ptr [eax], 4
		jz	short loc_1000498D
		cmp	dword ptr [eax], 0CE534351h
		jz	short loc_10004982
		cmp	dword ptr [eax], 0CE534352h
		jz	short loc_10004977
		cmp	dword ptr [eax], 0CE534353h
		jz	short loc_1000496C
		or	dword ptr [ecx+8], 0FFFFFFFFh
		push	12h
		pop	eax
		retn
; ---------------------------------------------------------------------------

loc_1000496C:				; CODE XREF: sub_100048F8+6Aj
		push	ecx
		push	dword ptr [ecx]
		push	eax
		call	sub_10004568
		jmp	short loc_100049D9
; ---------------------------------------------------------------------------

loc_10004977:				; CODE XREF: sub_100048F8+62j
		push	ecx
		push	dword ptr [ecx]
		push	eax
		call	sub_100042BC
		jmp	short loc_100049D9
; ---------------------------------------------------------------------------

loc_10004982:				; CODE XREF: sub_100048F8+5Aj
		push	ecx
		push	dword ptr [ecx]
		push	eax
		call	sub_10003613
		jmp	short loc_100049D9
; ---------------------------------------------------------------------------

loc_1000498D:				; CODE XREF: sub_100048F8+52j
		push	ecx		; int
		push	dword ptr [ecx]	; Dst
		push	eax		; int
		call	sub_1000435F
		jmp	short loc_100049D9
; ---------------------------------------------------------------------------

loc_10004998:				; CODE XREF: sub_100048F8+4Dj
		push	ecx
		push	dword ptr [ecx]
		push	eax
		call	sub_10003DE2
		jmp	short loc_100049D9
; ---------------------------------------------------------------------------

loc_100049A3:				; CODE XREF: sub_100048F8+48j
		push	ecx
		push	dword ptr [ecx]
		push	eax
		call	sub_10003F2A
		jmp	short loc_100049D9
; ---------------------------------------------------------------------------

loc_100049AE:				; CODE XREF: sub_100048F8+22j
					; sub_100048F8+43j
		push	ecx
		push	dword ptr [ecx]
		push	eax
		call	sub_100033EA
		jmp	short loc_100049D9
; ---------------------------------------------------------------------------

loc_100049B9:				; CODE XREF: sub_100048F8+11j
		push	1		; Size
		push	offset dword_10015000 ;	Src
		push	1		; int

loc_100049C2:				; CODE XREF: sub_100048F8+3Bj
		push	ecx		; int
		call	sub_100032C3
		add	esp, 10h
		retn
; ---------------------------------------------------------------------------

loc_100049CC:				; CODE XREF: sub_100048F8+Aj
		mov	eax, [esp+arg_0]
		push	dword ptr [eax]
		push	edx
		push	ecx
		call	sub_10004FCF

loc_100049D9:				; CODE XREF: sub_100048F8+7Dj
					; sub_100048F8+88j ...
		add	esp, 0Ch
		retn
sub_100048F8	endp


; =============== S U B	R O U T	I N E =======================================


sub_100049DD	proc near		; CODE XREF: sub_100047F8+13p
					; sub_10004A6F+13p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	edi
		push	20h
		call	PORT_Alloc_Util
		mov	edi, eax
		pop	ecx
		test	edi, edi
		jnz	short loc_100049EE
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_100049EE:				; CODE XREF: sub_100049DD+Dj
		push	ebx
		mov	ebx, [esp+8+arg_0]
		push	ebp
		push	esi
		mov	esi, [esp+10h+arg_8]
		xor	ebp, ebp
		mov	eax, esi
		mov	[edi+4], esi
		shr	eax, 1Bh
		and	eax, 7
		mov	[edi+8], ebx
		push	ebx
		mov	[edi+0Ch], ebp
		mov	[edi+10h], ebp
		mov	eax, ds:dword_10013414[eax*4]
		mov	[edi], eax
		mov	[edi+18h], ebp
		mov	[edi+1Ch], ebp
		call	sub_10007699
		mov	eax, [esp+14h+arg_4]
		pop	ecx
		test	eax, eax
		jnz	short loc_10004A43
		push	esi
		push	ebx
		call	sub_10007EF3
		pop	ecx
		pop	ecx
		test	eax, eax
		jnz	short loc_10004A43
		push	ebx
		call	sub_100076AA
		pop	ecx
		jmp	short loc_10004A5D
; ---------------------------------------------------------------------------

loc_10004A43:				; CODE XREF: sub_100049DD+4Ej
					; sub_100049DD+5Bj
		push	eax
		lea	eax, [edi+14h]
		push	eax
		push	ebp
		call	SECITEM_CopyItem_Util
		push	ebx
		mov	esi, eax
		call	sub_100076AA
		add	esp, 10h
		test	esi, esi
		jz	short loc_10004A68

loc_10004A5D:				; CODE XREF: sub_100049DD+64j
		push	edi
		call	sub_100033B4
		pop	ecx
		xor	eax, eax
		jmp	short loc_10004A6A
; ---------------------------------------------------------------------------

loc_10004A68:				; CODE XREF: sub_100049DD+7Ej
		mov	eax, edi

loc_10004A6A:				; CODE XREF: sub_100049DD+89j
		pop	esi
		pop	ebp
		pop	ebx
		pop	edi
		retn
sub_100049DD	endp


; =============== S U B	R O U T	I N E =======================================


sub_10004A6F	proc near		; DATA XREF: sub_100078E3+9Do

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	eax, [esp+arg_4]
		push	esi
		push	edi
		and	eax, 3FFFFFFFh
		xor	edi, edi
		push	eax
		push	edi
		push	[esp+10h+arg_0]
		call	sub_100049DD
		mov	esi, eax
		mov	[esp+14h+arg_4], edi
		add	esp, 0Ch
		test	esi, esi
		jnz	short loc_10004A9B
		mov	eax, 82h
		jmp	short loc_10004B18
; ---------------------------------------------------------------------------

loc_10004A9B:				; CODE XREF: sub_10004A6F+23j
		push	ebx
		mov	ebx, [esp+0Ch+arg_C]
		test	ebx, ebx
		jz	short loc_10004B0E
		push	ebp
		mov	ebp, [esp+10h+arg_8]

loc_10004AA9:				; CODE XREF: sub_10004A6F+53j
		lea	eax, [esp+10h+arg_4]
		push	eax
		push	ebp
		push	esi
		call	sub_10004DCD
		add	esp, 0Ch
		test	edi, edi
		jnz	short loc_10004ABE
		mov	edi, eax

loc_10004ABE:				; CODE XREF: sub_10004A6F+4Bj
		add	ebp, 0Ch
		dec	ebx
		jnz	short loc_10004AA9
		cmp	[esp+10h+arg_4], ebx
		jz	short loc_10004B0D
		push	esi
		call	sub_10004851
		mov	ebp, eax
		lea	eax, [esi+14h]
		push	eax
		push	dword ptr [esi+8]
		call	sub_10003DC1
		add	esp, 0Ch
		mov	ebx, eax
		test	ebp, ebp
		jz	short loc_10004B06
		push	1
		push	[esp+14h+arg_0]
		lea	eax, [esi+14h]
		push	ebx
		push	eax
		push	ebp
		push	[esp+24h+arg_0]
		call	sub_100078BD
		pop	ecx
		push	eax
		call	sub_100025EF
		add	esp, 18h

loc_10004B06:				; CODE XREF: sub_10004A6F+76j
		push	ebx
		call	PORT_Free_Util
		pop	ecx

loc_10004B0D:				; CODE XREF: sub_10004A6F+59j
		pop	ebp

loc_10004B0E:				; CODE XREF: sub_10004A6F+33j
		push	esi
		call	sub_100033B4
		pop	ecx
		mov	eax, edi
		pop	ebx

loc_10004B18:				; CODE XREF: sub_10004A6F+2Aj
		pop	edi
		pop	esi
		retn
sub_10004A6F	endp


; =============== S U B	R O U T	I N E =======================================


sub_10004B1B	proc near		; CODE XREF: sub_10004DCD+BDp

Src		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
Size		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 20h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+20h+var_4], eax
		mov	eax, [esp+20h+arg_8]
		push	ebx
		push	ebp
		mov	ebp, [esp+28h+arg_0]
		xor	ebx, ebx
		push	esi
		push	edi
		mov	edi, [esp+30h+arg_4]
		mov	esi, ebx
		mov	[esp+30h+Src], eax
		mov	eax, [esp+30h+arg_C]
		mov	[esp+30h+var_18], ebp
		mov	[esp+30h+Size],	eax
		cmp	edi, 0CE534352h
		jnz	short loc_10004B5C
		xor	eax, eax
		jmp	loc_10004C7C
; ---------------------------------------------------------------------------

loc_10004B5C:				; CODE XREF: sub_10004B1B+38j
		push	dword ptr [ebp+8]
		call	sub_100078B4
		mov	[esp+34h+var_1C], eax
		pop	ecx
		test	eax, eax
		jnz	short loc_10004B77
		mov	ebx, 0E2h
		jmp	loc_10004C7A
; ---------------------------------------------------------------------------

loc_10004B77:				; CODE XREF: sub_10004B1B+50j
		cmp	edi, 3
		jz	short loc_10004B8C
		cmp	edi, 102h
		jz	short loc_10004B8C
		push	10h

loc_10004B86:				; CODE XREF: sub_10004B1B+127j
		pop	ebx
		jmp	loc_10004C7A
; ---------------------------------------------------------------------------

loc_10004B8C:				; CODE XREF: sub_10004B1B+5Fj
					; sub_10004B1B+67j
		push	eax
		push	ebp
		call	sub_100050BF
		mov	ebp, eax
		pop	ecx
		pop	ecx
		test	ebp, ebp
		jnz	short loc_10004BA5
		mov	ebx, 82h
		jmp	loc_10004C7A
; ---------------------------------------------------------------------------

loc_10004BA5:				; CODE XREF: sub_10004B1B+7Ej
		cmp	edi, 102h
		jnz	short loc_10004C26
		mov	eax, [ebp+90h]
		test	byte ptr [eax],	40h
		jnz	loc_10004C7A
		test	byte ptr [eax+4], 40h
		jnz	loc_10004C7A
		test	byte ptr [eax+8], 40h
		jnz	loc_10004C7A
		mov	eax, [esp+30h+var_18]
		push	dword ptr [eax+8]
		call	sub_100078BD
		pop	ecx
		test	eax, eax
		jz	loc_10004C7A
		push	ebp
		push	eax
		call	sub_10002110
		pop	ecx
		pop	ecx
		test	eax, eax
		jz	loc_10004C7A
		mov	esi, [ebp+90h]
		lea	edi, [esp+30h+var_10]
		lea	eax, [esp+30h+var_10]
		push	eax
		push	ebp
		push	[esp+38h+var_1C]
		movsd
		movsd
		movsd
		or	[esp+3Ch+var_10], 40h
		or	[esp+3Ch+var_C], 40h
		or	[esp+3Ch+var_8], 40h
		call	sub_1000C04B
		add	esp, 0Ch
		jmp	short loc_10004C7A
; ---------------------------------------------------------------------------

loc_10004C26:				; CODE XREF: sub_10004B1B+90j
		cmp	[esp+30h+Src], ebx
		jz	short loc_10004C58
		mov	edi, [esp+30h+Size]
		lea	eax, [edi+1]
		push	eax
		call	PORT_ZAlloc_Util
		mov	esi, eax
		pop	ecx
		test	esi, esi
		jnz	short loc_10004C47
		push	2
		jmp	loc_10004B86
; ---------------------------------------------------------------------------

loc_10004C47:				; CODE XREF: sub_10004B1B+123j
		push	edi		; Size
		push	[esp+34h+Src]	; Src
		push	esi		; Dst
		call	memcpy
		add	esp, 0Ch
		mov	[edi+esi], bl

loc_10004C58:				; CODE XREF: sub_10004B1B+10Fj
		push	esi		; Str
		push	ebp		; int
		push	[esp+38h+var_1C] ; int
		call	sub_1000BF6B
		add	esp, 0Ch
		mov	ebx, eax
		neg	ebx
		sbb	ebx, ebx
		and	ebx, 30h
		test	esi, esi
		jz	short loc_10004C7A
		push	esi
		call	PORT_Free_Util
		pop	ecx

loc_10004C7A:				; CODE XREF: sub_10004B1B+57j
					; sub_10004B1B+6Cj ...
		mov	eax, ebx

loc_10004C7C:				; CODE XREF: sub_10004B1B+3Cj
		mov	ecx, [esp+30h+var_4]
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 20h
		retn
sub_10004B1B	endp


; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10004C8F(int,	int, void *Src,	size_t Size, int)
sub_10004C8F	proc near		; CODE XREF: sub_10004DCD+8Cp

var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
Src		= dword	ptr  0Ch
Size		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	ecx
		push	ebx
		push	edi
		mov	edi, [esp+0Ch+arg_4]
		xor	ebx, ebx
		cmp	edi, 102h
		jz	loc_10004DC7
		cmp	edi, 101h
		jz	loc_10004DC7
		cmp	edi, 163h
		jz	loc_10004DC7
		cmp	edi, 164h
		jz	loc_10004DC7
		cmp	edi, 165h
		jz	loc_10004DC7
		push	ebp
		mov	ebp, [esp+10h+arg_0]
		push	esi
		push	dword ptr [ebp+8]
		call	sub_100078BD
		mov	[esp+18h+var_4], eax
		pop	ecx
		test	eax, eax
		jnz	short loc_10004CF2
		mov	esi, 0E2h
		jmp	short loc_10004D4C
; ---------------------------------------------------------------------------

loc_10004CF2:				; CODE XREF: sub_10004C8F+5Aj
		push	eax
		push	ebp
		call	sub_10004870
		mov	[esp+1Ch+arg_4], eax
		pop	ecx
		pop	ecx
		test	eax, eax
		jnz	short loc_10004D0A
		mov	esi, 82h
		jmp	short loc_10004D4C
; ---------------------------------------------------------------------------

loc_10004D0A:				; CODE XREF: sub_10004C8F+72j
		push	10h
		pop	esi
		cmp	edi, 109h
		ja	loc_10004DA6
		cmp	edi, 107h
		jnb	short loc_10004D37
		cmp	edi, 3
		jz	short loc_10004D52
		cmp	edi, 11h
		jz	loc_10004DB9
		cmp	edi, 105h
		jnz	short loc_10004D4C

loc_10004D37:				; CODE XREF: sub_10004C8F+90j
					; sub_10004C8F+11Dj
		mov	eax, [esp+14h+Src]
		cmp	[eax], bl
		jnz	short loc_10004D4C
		xor	esi, esi

loc_10004D41:				; CODE XREF: sub_10004C8F+115j
		test	ebx, ebx
		jz	short loc_10004D4C
		push	ebx
		call	PORT_Free_Util
		pop	ecx

loc_10004D4C:				; CODE XREF: sub_10004C8F+61j
					; sub_10004C8F+79j ...
		mov	eax, esi
		pop	esi
		pop	ebp
		jmp	short loc_10004DC9
; ---------------------------------------------------------------------------

loc_10004D52:				; CODE XREF: sub_10004C8F+95j
		cmp	[esp+14h+Src], ebx
		jz	short loc_10004D83
		mov	esi, [esp+14h+Size]
		lea	eax, [esi+1]
		push	eax
		call	PORT_ZAlloc_Util
		mov	ebx, eax
		pop	ecx
		test	ebx, ebx
		jnz	short loc_10004D71
		push	2
		pop	esi
		jmp	short loc_10004D4C
; ---------------------------------------------------------------------------

loc_10004D71:				; CODE XREF: sub_10004C8F+DBj
		push	esi		; Size
		push	[esp+18h+Src]	; Src
		push	ebx		; Dst
		call	memcpy
		add	esp, 0Ch
		mov	byte ptr [ebx+esi], 0

loc_10004D83:				; CODE XREF: sub_10004C8F+C7j
		push	dword ptr [ebp+8]
		lea	eax, [ebp+14h]
		push	ebx
		push	eax
		push	[esp+20h+arg_4]
		push	[esp+24h+var_4]
		call	sub_10002981
		add	esp, 14h
		mov	esi, eax
		neg	esi
		sbb	esi, esi
		and	esi, 30h
		jmp	short loc_10004D41
; ---------------------------------------------------------------------------

loc_10004DA6:				; CODE XREF: sub_10004C8F+84j
		cmp	edi, 10Ch
		jz	short loc_10004D37
		lea	eax, [edi-123h]
		cmp	eax, 5
		ja	short loc_10004D4C

loc_10004DB9:				; CODE XREF: sub_10004C8F+9Aj
		mov	eax, [esp+14h+arg_10]
		xor	esi, esi
		mov	dword ptr [eax], 1
		jmp	short loc_10004D4C
; ---------------------------------------------------------------------------

loc_10004DC7:				; CODE XREF: sub_10004C8F+Fj
					; sub_10004C8F+1Bj ...
		xor	eax, eax

loc_10004DC9:				; CODE XREF: sub_10004C8F+C1j
		pop	edi
		pop	ebx
		pop	ecx
		retn
sub_10004C8F	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10004DCD	proc near		; CODE XREF: sub_10004A6F+41p

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, [ebp+arg_4]
		push	edi
		mov	edi, [ebp+arg_0]
		mov	eax, [esi]
		cmp	eax, 0D5A0DB00h
		jnz	short loc_10004DF9
		cmp	dword ptr [edi], 3
		jnz	short loc_10004DF9
		mov	eax, [ebp+arg_8]
		mov	dword ptr [eax], 1

loc_10004DF2:				; CODE XREF: sub_10004DCD+57j
					; sub_10004DCD+9Cj ...
		xor	eax, eax
		jmp	loc_10004E92
; ---------------------------------------------------------------------------

loc_10004DF9:				; CODE XREF: sub_10004DCD+15j
					; sub_10004DCD+1Aj
		and	[ebp+var_8], 0
		and	[ebp+var_4], 0
		mov	[ebp+var_C], eax
		lea	eax, [ebp+var_C]
		push	eax
		push	edi
		call	sub_100048F8
		pop	ecx
		pop	ecx
		test	eax, eax
		jnz	short loc_10004E92
		cmp	dword ptr [esi], 3
		jz	short loc_10004E26
		push	esi
		push	edi
		call	sub_1000501C
		pop	ecx
		pop	ecx
		test	eax, eax
		jnz	short loc_10004DF2

loc_10004E26:				; CODE XREF: sub_10004DCD+4Aj
		cmp	dword ptr [edi], 1
		push	10h
		pop	eax
		jz	short loc_10004E81
		cmp	dword ptr [edi], 2
		jz	short loc_10004E63
		jbe	short loc_10004E92
		cmp	dword ptr [edi], 4
		jbe	short loc_10004E4D
		cmp	dword ptr [edi], 0CE534353h
		jnz	short loc_10004E92
		push	esi
		push	edi
		call	sub_10004E98
		pop	ecx
		pop	ecx
		jmp	short loc_10004E92
; ---------------------------------------------------------------------------

loc_10004E4D:				; CODE XREF: sub_10004DCD+6Bj
		push	[ebp+arg_8]	; int
		push	dword ptr [esi+8] ; Size
		push	dword ptr [esi+4] ; Src
		push	dword ptr [esi]	; int
		push	edi		; int
		call	sub_10004C8F
		add	esp, 14h
		jmp	short loc_10004E92
; ---------------------------------------------------------------------------

loc_10004E63:				; CODE XREF: sub_10004DCD+64j
		cmp	dword ptr [esi], 102h
		jz	short loc_10004DF2
		cmp	dword ptr [esi], 101h
		jz	loc_10004DF2
		cmp	dword ptr [esi], 3
		jnz	short loc_10004E92
		jmp	loc_10004DF2
; ---------------------------------------------------------------------------

loc_10004E81:				; CODE XREF: sub_10004DCD+5Fj
		push	dword ptr [esi+8]
		push	dword ptr [esi+4]
		push	dword ptr [esi]
		push	edi
		call	sub_10004B1B
		add	esp, 10h

loc_10004E92:				; CODE XREF: sub_10004DCD+27j
					; sub_10004DCD+45j ...
		pop	edi
		pop	esi
		mov	esp, ebp
		pop	ebp
		retn
sub_10004DCD	endp


; =============== S U B	R O U T	I N E =======================================


sub_10004E98	proc near		; CODE XREF: sub_10004DCD+77p

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 18h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+18h+var_4], eax
		push	ebx
		mov	ebx, [esp+1Ch+arg_4]
		push	esi
		mov	esi, [esp+20h+arg_0]
		cmp	dword ptr [ebx], 3
		jnz	short loc_10004EBC
		xor	eax, eax
		jmp	loc_10004FBE
; ---------------------------------------------------------------------------

loc_10004EBC:				; CODE XREF: sub_10004E98+1Bj
		lea	eax, [esp+20h+var_14]
		push	eax
		push	1
		push	ebx
		push	dword ptr [ebx]
		call	sub_10007C51
		add	esp, 10h
		test	eax, eax
		jnz	loc_10004FBE
		cmp	dword ptr [ebx], 0CE536359h
		push	ebp
		setz	al
		push	eax
		push	[esp+28h+var_14]
		call	sub_10005330
		push	dword ptr [esi+8]
		mov	ebp, eax
		call	sub_100078B4
		add	esp, 0Ch
		mov	[esp+24h+var_18], eax
		test	eax, eax
		jnz	short loc_10004F09
		mov	eax, 0E2h
		jmp	loc_10004FBD
; ---------------------------------------------------------------------------

loc_10004F09:				; CODE XREF: sub_10004E98+65j
		push	eax
		push	esi
		call	sub_100050BF
		pop	ecx
		pop	ecx
		mov	ecx, eax
		test	ecx, ecx
		jnz	short loc_10004F22
		mov	eax, 82h
		jmp	loc_10004FBD
; ---------------------------------------------------------------------------

loc_10004F22:				; CODE XREF: sub_10004E98+7Ej
		cmp	dword ptr [ebx], 0CE536358h
		mov	esi, [ecx+90h]
		push	edi
		lea	edi, [esp+28h+var_10]
		movsd
		movsd
		movsd
		pop	edi
		jz	short loc_10004F91
		cmp	dword ptr [ebx], 0CE536359h
		jz	short loc_10004F82
		cmp	dword ptr [ebx], 0CE53635Ah
		jz	short loc_10004F6C
		cmp	dword ptr [ebx], 0CE53635Bh
		jz	short loc_10004F56
		push	10h
		pop	eax
		jmp	short loc_10004FBD
; ---------------------------------------------------------------------------

loc_10004F56:				; CODE XREF: sub_10004E98+B7j
		mov	eax, [ecx+90h]
		mov	eax, [eax+4]
		and	eax, 368h
		or	eax, ebp
		mov	[esp+24h+var_C], eax
		jmp	short loc_10004FA4
; ---------------------------------------------------------------------------

loc_10004F6C:				; CODE XREF: sub_10004E98+AFj
		mov	eax, [ecx+90h]
		mov	eax, [eax+8]
		and	eax, 368h
		or	eax, ebp
		mov	[esp+24h+var_8], eax
		jmp	short loc_10004FA4
; ---------------------------------------------------------------------------

loc_10004F82:				; CODE XREF: sub_10004E98+A7j
		mov	eax, [ecx+90h]
		mov	eax, [eax]
		and	eax, 378h
		jmp	short loc_10004F9E
; ---------------------------------------------------------------------------

loc_10004F91:				; CODE XREF: sub_10004E98+9Fj
		mov	eax, [ecx+90h]
		mov	eax, [eax]
		and	eax, 3E8h

loc_10004F9E:				; CODE XREF: sub_10004E98+F7j
		or	eax, ebp
		mov	[esp+24h+var_10], eax

loc_10004FA4:				; CODE XREF: sub_10004E98+D2j
					; sub_10004E98+E8j
		lea	eax, [esp+24h+var_10]
		push	eax
		push	ecx
		push	[esp+2Ch+var_18]
		call	sub_1000C04B
		add	esp, 0Ch
		neg	eax
		sbb	eax, eax
		and	eax, 30h

loc_10004FBD:				; CODE XREF: sub_10004E98+6Cj
					; sub_10004E98+85j ...
		pop	ebp

loc_10004FBE:				; CODE XREF: sub_10004E98+1Fj
					; sub_10004E98+38j
		mov	ecx, [esp+20h+var_4]
		pop	esi
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 18h
		retn
sub_10004E98	endp


; =============== S U B	R O U T	I N E =======================================


sub_10004FCF	proc near		; CODE XREF: sub_100033EA+49p
					; sub_100036EF+82p ...

arg_0		= dword	ptr  4
arg_8		= dword	ptr  0Ch

		mov	edx, [esp+arg_0]
		push	edi
		mov	edi, [edx+4]
		test	edi, edi
		jnz	short loc_10004FE6
		mov	dword ptr [edx+8], 4
		xor	eax, eax
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_10004FE6:				; CODE XREF: sub_10004FCF+Aj
		push	ebx
		push	4
		pop	ebx
		cmp	[edx+8], ebx
		jnb	short loc_10004FFA
		or	dword ptr [edx+8], 0FFFFFFFFh
		mov	eax, 150h
		jmp	short loc_10005019
; ---------------------------------------------------------------------------

loc_10004FFA:				; CODE XREF: sub_10004FCF+1Ej
		push	esi
		xor	esi, esi

loc_10004FFD:				; CODE XREF: sub_10004FCF+42j
		mov	eax, [esp+0Ch+arg_8]
		push	3
		pop	ecx
		sub	ecx, esi
		shl	ecx, 3
		shr	eax, cl
		mov	[esi+edi], al
		inc	esi
		cmp	esi, ebx
		jl	short loc_10004FFD
		mov	[edx+8], ebx
		xor	eax, eax
		pop	esi

loc_10005019:				; CODE XREF: sub_10004FCF+29j
		pop	ebx
		pop	edi
		retn
sub_10004FCF	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000501C	proc near		; CODE XREF: sub_10004DCD+4Ep
					; sub_1000518B+2Fp

var_48		= byte ptr -48h
Buf2		= dword	ptr -44h
Size		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= byte ptr -38h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 48h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+48h+var_4], eax
		mov	eax, [esp+48h+arg_0]
		lea	ecx, [esp+48h+var_38]
		push	ebx
		push	ebp
		mov	ebp, [esp+50h+arg_4]
		xor	ebx, ebx
		push	esi
		push	edi
		mov	esi, ebp
		mov	[esp+58h+var_3C], eax
		cmp	dword ptr [ebp+8], 32h
		lea	edi, [esp+58h+var_48]
		movsd
		movsd
		movsd
		mov	[esp+58h+Buf2],	ecx
		jbe	short loc_1000506A
		push	dword ptr [ebp+8]
		call	PORT_Alloc_Util
		mov	ebx, eax
		pop	ecx
		test	ebx, ebx
		jz	short loc_100050AC
		mov	eax, [esp+58h+var_3C]
		mov	[esp+58h+Buf2],	ebx

loc_1000506A:				; CODE XREF: sub_1000501C+35j
		lea	ecx, [esp+58h+var_48]
		push	ecx
		push	eax
		call	sub_100048F8
		pop	ecx
		pop	ecx
		test	eax, eax
		jnz	short loc_10005098
		mov	eax, [esp+58h+Size]
		cmp	[ebp+8], eax
		jnz	short loc_10005098
		push	eax		; Size
		push	[esp+5Ch+Buf2]	; Buf2
		push	dword ptr [ebp+4] ; Buf1
		call	memcmp
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_1000509C

loc_10005098:				; CODE XREF: sub_1000501C+5Dj
					; sub_1000501C+66j
		xor	ebp, ebp
		jmp	short loc_1000509F
; ---------------------------------------------------------------------------

loc_1000509C:				; CODE XREF: sub_1000501C+7Aj
		xor	ebp, ebp
		inc	ebp

loc_1000509F:				; CODE XREF: sub_1000501C+7Ej
		test	ebx, ebx
		jz	short loc_100050AA
		push	ebx
		call	PORT_Free_Util
		pop	ecx

loc_100050AA:				; CODE XREF: sub_1000501C+85j
		mov	eax, ebp

loc_100050AC:				; CODE XREF: sub_1000501C+44j
		mov	ecx, [esp+58h+var_4]
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 48h
		retn
sub_1000501C	endp


; =============== S U B	R O U T	I N E =======================================


sub_100050BF	proc near		; CODE XREF: sub_100033EA+BFp
					; sub_10004568+133p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_0]
		push	edi
		mov	edi, [esi]
		cmp	edi, 1
		jz	short loc_100050D8
		cmp	edi, 0CE534353h
		jz	short loc_100050DF
		xor	eax, eax
		jmp	short loc_100050FD
; ---------------------------------------------------------------------------

loc_100050D8:				; CODE XREF: sub_100050BF+Bj
		mov	eax, [esi+0Ch]
		test	eax, eax
		jnz	short loc_100050FD

loc_100050DF:				; CODE XREF: sub_100050BF+13j
		lea	eax, [esi+14h]
		push	eax
		push	[esp+0Ch+arg_4]
		call	sub_1000C49E
		pop	ecx
		pop	ecx
		cmp	edi, 1
		jnz	short loc_100050FD
		mov	[esi+0Ch], eax
		mov	dword ptr [esi+10h], offset sub_1000C19A

loc_100050FD:				; CODE XREF: sub_100050BF+17j
					; sub_100050BF+1Ej ...
		pop	edi
		pop	esi
		retn
sub_100050BF	endp


; =============== S U B	R O U T	I N E =======================================


sub_10005100	proc near		; CODE XREF: sub_10003613+76p

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		cmp	dword ptr [esi], 0CE534351h
		jz	short loc_10005111
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10005111:				; CODE XREF: sub_10005100+Bj
		mov	eax, [esi+0Ch]
		test	eax, eax
		jnz	short loc_1000514D
		push	ebx
		push	dword ptr [esi+8]
		xor	ebx, ebx
		cmp	dword ptr [esi+4], 28000001h
		setz	bl
		call	sub_100078B4
		pop	ecx
		mov	ecx, eax
		test	ecx, ecx
		jz	short loc_1000514C
		push	ebx
		lea	eax, [esi+14h]
		push	eax
		push	ecx
		call	sub_1000C4D5
		add	esp, 0Ch
		mov	[esi+0Ch], eax
		mov	dword ptr [esi+10h], offset sub_1000C1A8

loc_1000514C:				; CODE XREF: sub_10005100+32j
		pop	ebx

loc_1000514D:				; CODE XREF: sub_10005100+16j
		pop	esi
		retn
sub_10005100	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000514F	proc near		; CODE XREF: sub_100042BC+51p

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		cmp	dword ptr [esi], 0CE534352h
		jz	short loc_10005160

loc_1000515C:				; CODE XREF: sub_1000514F+23j
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10005160:				; CODE XREF: sub_1000514F+Bj
		mov	eax, [esi+0Ch]
		test	eax, eax
		jnz	short loc_10005189
		push	dword ptr [esi+8]
		call	sub_100078B4
		pop	ecx
		test	eax, eax
		jz	short loc_1000515C
		push	dword ptr [esi+18h] ; Str
		push	eax		; int
		call	sub_1000C924
		pop	ecx
		pop	ecx
		mov	[esi+0Ch], eax
		mov	dword ptr [esi+10h], offset sub_1000C1A8

loc_10005189:				; CODE XREF: sub_1000514F+16j
		pop	esi
		retn
sub_1000514F	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000518B	proc near		; CODE XREF: sub_100066B9+35p
					; sub_100066B9+58p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	esi
		push	edi
		push	[esp+8+arg_8]
		xor	edi, edi
		push	[esp+0Ch+arg_4]
		inc	edi
		push	[esp+10h+arg_0]
		call	sub_100049DD
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		jz	short loc_100051DC
		push	ebp
		xor	ebp, ebp
		cmp	[esp+0Ch+arg_10], ebp
		jbe	short loc_100051D2
		push	ebx
		mov	ebx, [esp+10h+arg_C]

loc_100051B8:				; CODE XREF: sub_1000518B+44j
		push	ebx
		push	esi
		call	sub_1000501C
		mov	edi, eax
		pop	ecx
		pop	ecx
		test	edi, edi
		jz	short loc_100051D1
		inc	ebp
		add	ebx, 0Ch
		cmp	ebp, [esp+10h+arg_10]
		jb	short loc_100051B8

loc_100051D1:				; CODE XREF: sub_1000518B+3Aj
		pop	ebx

loc_100051D2:				; CODE XREF: sub_1000518B+26j
		push	esi
		call	sub_100033B4
		pop	ecx
		mov	eax, edi
		pop	ebp

loc_100051DC:				; CODE XREF: sub_1000518B+1Dj
		pop	edi
		pop	esi
		retn
sub_1000518B	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_100051DF	proc near		; DATA XREF: sub_100078E3+A4o

var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	ecx
		push	esi
		mov	esi, [ebp+arg_C]
		lea	eax, [ebp+var_4]
		push	edi
		mov	edi, [ebp+arg_8]
		push	eax
		push	esi
		push	edi
		push	0
		call	sub_10007C51
		add	esp, 10h
		test	eax, eax
		jnz	short loc_10005278
		mov	eax, [ebp+var_4]
		cmp	eax, 1
		jz	short loc_10005268
		jbe	short loc_10005263
		cmp	eax, 4
		jbe	short loc_10005250
		cmp	eax, 0CE534351h
		jz	short loc_10005241
		cmp	eax, 0CE534352h
		jz	short loc_10005232
		cmp	eax, 0CE534353h
		jnz	short loc_10005263
		push	esi
		push	edi
		push	[ebp+arg_4]
		push	[ebp+arg_0]
		call	sub_10005C54
		jmp	short loc_10005275
; ---------------------------------------------------------------------------

loc_10005232:				; CODE XREF: sub_100051DF+3Bj
		push	esi
		push	edi
		push	[ebp+arg_4]
		push	[ebp+arg_0]
		call	sub_100059E9
		jmp	short loc_10005275
; ---------------------------------------------------------------------------

loc_10005241:				; CODE XREF: sub_100051DF+34j
		push	esi
		push	edi
		push	[ebp+arg_4]
		push	[ebp+arg_0]
		call	sub_100055A8
		jmp	short loc_10005275
; ---------------------------------------------------------------------------

loc_10005250:				; CODE XREF: sub_100051DF+2Dj
		push	esi
		push	edi
		push	[ebp+arg_4]
		push	eax
		push	[ebp+arg_0]
		call	sub_100056B2
		add	esp, 14h
		jmp	short loc_10005278
; ---------------------------------------------------------------------------

loc_10005263:				; CODE XREF: sub_100051DF+28j
					; sub_100051DF+42j
		push	13h
		pop	eax
		jmp	short loc_10005278
; ---------------------------------------------------------------------------

loc_10005268:				; CODE XREF: sub_100051DF+26j
		push	esi
		push	edi
		push	[ebp+arg_4]
		push	[ebp+arg_0]
		call	sub_10005387

loc_10005275:				; CODE XREF: sub_100051DF+51j
					; sub_100051DF+60j ...
		add	esp, 10h

loc_10005278:				; CODE XREF: sub_100051DF+1Ej
					; sub_100051DF+82j ...
		pop	edi
		pop	esi
		mov	esp, ebp
		pop	ebp
		retn
sub_100051DF	endp


; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1000527E(int,	int, char *Str)
sub_1000527E	proc near		; CODE XREF: sub_10005B31+82p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
Str		= dword	ptr  0Ch

		push	ebx
		push	ebp
		push	esi
		mov	esi, [esp+0Ch+arg_4]
		xor	ebp, ebp
		push	edi
		mov	edi, [esp+10h+Str]
		mov	ebx, ebp
		mov	[esi+4], ebp
		test	edi, edi
		jz	short loc_100052D5
		push	edi
		call	PORT_Strdup_Util
		mov	[esi+4], eax
		pop	ecx
		test	eax, eax
		jnz	short loc_100052AB

loc_100052A3:				; CODE XREF: sub_1000527E+66j
		push	2
		pop	eax
		jmp	loc_1000532B
; ---------------------------------------------------------------------------

loc_100052AB:				; CODE XREF: sub_1000527E+23j
		push	edi		; Str
		call	strlen
		push	esi
		push	[esp+18h+arg_0]
		inc	eax
		mov	[esi+8], eax
		call	sub_10002238
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_1000532B
		push	dword ptr [esi+4]
		call	PORT_Free_Util
		pop	ecx
		mov	[esi+4], ebp
		mov	[esi+8], ebp

loc_100052D5:				; CODE XREF: sub_1000527E+15j
		push	12h
		pop	edi
		push	edi
		call	PORT_Alloc_Util
		mov	[esi+4], eax
		pop	ecx
		test	eax, eax
		jz	short loc_100052A3
		mov	[esi+8], edi
		mov	edi, ebp

loc_100052EB:				; CODE XREF: sub_1000527E+92j
		push	dword ptr [esi+8]
		push	dword ptr [esi+4]
		call	sub_1000E020
		pop	ecx
		pop	ecx
		test	eax, eax
		jnz	short loc_10005317
		push	esi
		push	[esp+14h+arg_0]
		call	sub_10002238
		pop	ecx
		pop	ecx
		test	eax, eax
		jz	short loc_10005312
		inc	edi
		cmp	edi, 0Ah
		jbe	short loc_100052EB

loc_10005312:				; CODE XREF: sub_1000527E+8Cj
		cmp	edi, 0Ah
		jbe	short loc_10005329

loc_10005317:				; CODE XREF: sub_1000527E+7Cj
		push	30h
		pop	ebx
		push	dword ptr [esi+4]
		call	PORT_Free_Util
		pop	ecx
		mov	[esi+4], ebp
		mov	[esi+8], ebp

loc_10005329:				; CODE XREF: sub_1000527E+97j
		mov	eax, ebx

loc_1000532B:				; CODE XREF: sub_1000527E+28j
					; sub_1000527E+46j
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
sub_1000527E	endp


; =============== S U B	R O U T	I N E =======================================


sub_10005330	proc near		; CODE XREF: sub_10004E98+4Dp
					; sub_10005C54+198p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	ecx, [esp+arg_0]
		cmp	ecx, 0CE534351h
		jz	short loc_10005383
		cmp	ecx, 0CE534352h
		jz	short loc_10005371
		cmp	ecx, 0CE534353h
		jz	short loc_1000536B
		xor	eax, eax
		cmp	ecx, 0CE53435Ah
		jz	short loc_10005369
		cmp	ecx, 0CE53435Bh
		setz	al
		dec	eax
		and	eax, 7F8h
		add	eax, 8
		retn
; ---------------------------------------------------------------------------

loc_10005369:				; CODE XREF: sub_10005330+24j
		inc	eax
		retn
; ---------------------------------------------------------------------------

loc_1000536B:				; CODE XREF: sub_10005330+1Aj
		mov	eax, 400h
		retn
; ---------------------------------------------------------------------------

loc_10005371:				; CODE XREF: sub_10005330+12j
		mov	eax, [esp+arg_4]
		neg	eax
		sbb	eax, eax
		and	eax, 70h
		add	eax, 10h
		or	eax, 8
		retn
; ---------------------------------------------------------------------------

loc_10005383:				; CODE XREF: sub_10005330+Aj
		push	3
		pop	eax
		retn
sub_10005330	endp


; =============== S U B	R O U T	I N E =======================================


sub_10005387	proc near		; CODE XREF: sub_100051DF+91p

var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
File		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 44h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+44h+var_4], eax
		mov	eax, [esp+44h+arg_4]
		mov	ecx, [esp+44h+arg_0]
		push	ebx
		mov	ebx, [esp+48h+arg_8]
		push	ebp
		push	esi
		push	edi
		mov	[esp+54h+var_2C], eax
		xor	edi, edi
		mov	eax, [esp+54h+arg_C]
		mov	ebp, edi
		mov	[esp+54h+var_40], eax
		push	40h
		pop	eax
		mov	[esp+54h+var_1C], eax
		mov	[esp+54h+var_18], eax
		mov	[esp+54h+var_14], eax
		mov	eax, 800h
		push	ecx
		mov	[esp+58h+var_38], ecx
		mov	[esp+58h+var_30], ebx
		mov	[esp+58h+var_10], eax
		mov	[esp+58h+var_C], eax
		mov	[esp+58h+var_8], eax
		mov	[esp+58h+var_44], 1
		call	sub_100078B4
		push	[esp+58h+var_40]
		mov	esi, eax
		push	ebx
		push	2
		mov	[esp+64h+File],	esi
		call	sub_10007ED3
		add	esp, 10h
		test	eax, eax
		jz	short loc_1000540C

loc_10005404:				; CODE XREF: sub_10005387+A8j
					; sub_10005387+CBj ...
		push	13h
		pop	eax
		jmp	loc_10005595
; ---------------------------------------------------------------------------

loc_1000540C:				; CODE XREF: sub_10005387+7Bj
		lea	eax, [esp+54h+var_34]
		push	eax
		push	[esp+58h+var_40]
		push	ebx
		push	80h
		call	sub_10007C51
		add	esp, 10h
		test	eax, eax
		jnz	loc_10005595
		cmp	[esp+54h+var_34], edi
		jnz	short loc_10005404
		test	esi, esi
		jnz	short loc_1000543F
		mov	eax, 0E2h
		jmp	loc_10005595
; ---------------------------------------------------------------------------

loc_1000543F:				; CODE XREF: sub_10005387+ACj
		push	[esp+54h+var_40]
		push	ebx
		push	11h
		call	sub_10007C28
		mov	ecx, eax
		add	esp, 0Ch
		test	ecx, ecx
		jz	short loc_10005404
		push	[esp+54h+var_40]
		mov	[esp+58h+var_28], edi
		mov	eax, [ecx+4]
		mov	[esp+58h+var_24], eax
		mov	eax, [ecx+8]
		push	ebx
		push	3
		mov	[esp+60h+var_20], eax
		call	sub_10007E65
		mov	ebx, eax
		lea	eax, [esp+60h+var_28]
		push	eax
		push	esi
		call	sub_1000C339
		mov	esi, eax
		add	esp, 14h
		test	esi, esi
		jnz	short loc_100054B3
		lea	eax, [esp+54h+var_28]
		push	ebx		; Str
		push	eax		; int
		call	sub_100080C2
		mov	esi, eax
		mov	[esp+5Ch+var_44], edi
		pop	ecx
		pop	ecx
		test	esi, esi
		jnz	short loc_100054B3
		test	ebx, ebx
		jz	loc_10005404
		push	ebx
		call	PORT_Free_Util
		pop	ecx
		jmp	loc_10005404
; ---------------------------------------------------------------------------

loc_100054B3:				; CODE XREF: sub_10005387+FFj
					; sub_10005387+116j
		push	[esp+54h+var_38]
		call	sub_100078BD
		pop	ecx
		test	eax, eax
		jz	short loc_100054D2
		push	esi
		push	eax
		call	sub_10002110
		pop	ecx
		pop	ecx
		test	eax, eax
		jz	short loc_100054D2
		lea	ebp, [esp+54h+var_1C]

loc_100054D2:				; CODE XREF: sub_10005387+138j
					; sub_10005387+145j
		cmp	[esp+54h+var_44], edi
		jnz	short loc_100054F2
		test	ebp, ebp
		jnz	short loc_100054E0
		lea	ebp, [esp+54h+var_10]

loc_100054E0:				; CODE XREF: sub_10005387+153j
		push	ebp		; Origin
		mov	ebp, [esp+58h+File]
		push	ebx
		push	esi		; Offset
		push	ebp		; File
		call	__fseeki64
		add	esp, 10h
		jmp	short loc_10005505
; ---------------------------------------------------------------------------

loc_100054F2:				; CODE XREF: sub_10005387+14Fj
		test	ebp, ebp
		jz	short loc_1000550B
		push	ebp
		mov	ebp, [esp+58h+File]
		push	esi
		push	ebp
		call	sub_1000C04B
		add	esp, 0Ch

loc_10005505:				; CODE XREF: sub_10005387+169j
		mov	[esp+54h+var_44], eax
		jmp	short loc_10005513
; ---------------------------------------------------------------------------

loc_1000550B:				; CODE XREF: sub_10005387+16Dj
		mov	ebp, [esp+54h+File]
		mov	[esp+54h+var_44], edi

loc_10005513:				; CODE XREF: sub_10005387+182j
		test	ebx, ebx
		jz	short loc_1000551E
		push	ebx
		call	PORT_Free_Util
		pop	ecx

loc_1000551E:				; CODE XREF: sub_10005387+18Ej
		cmp	[esp+54h+var_44], edi
		jz	short loc_10005529
		push	30h
		pop	edi
		jmp	short loc_1000558C
; ---------------------------------------------------------------------------

loc_10005529:				; CODE XREF: sub_10005387+19Bj
		push	[esp+54h+var_40]
		push	[esp+58h+var_30]
		push	0CE534352h
		call	sub_10007E65
		mov	ebx, eax
		add	esp, 0Ch
		test	ebx, ebx
		jz	short loc_10005571
		push	ebx		; Str
		push	ebp		; int
		call	sub_1000C924
		pop	ecx
		pop	ecx
		test	eax, eax
		jnz	short loc_10005563
		push	edi
		push	edi
		lea	eax, [esi+38h]
		push	eax
		push	ebx
		push	ebp
		call	sub_1000CA00
		add	esp, 14h
		jmp	short loc_1000556A
; ---------------------------------------------------------------------------

loc_10005563:				; CODE XREF: sub_10005387+1C8j
		push	eax		; Dst
		call	sub_1000C1A8
		pop	ecx

loc_1000556A:				; CODE XREF: sub_10005387+1DAj
		push	ebx
		call	PORT_Free_Util
		pop	ecx

loc_10005571:				; CODE XREF: sub_10005387+1BBj
		push	38000000h	; Dst
		lea	eax, [esi+54h]
		push	eax		; int
		push	[esp+5Ch+var_38] ; int
		call	sub_10007F0A
		mov	ecx, [esp+60h+var_2C]
		add	esp, 0Ch
		mov	[ecx], eax

loc_1000558C:				; CODE XREF: sub_10005387+1A0j
		push	esi		; Dst
		call	sub_1000C19A
		pop	ecx
		mov	eax, edi

loc_10005595:				; CODE XREF: sub_10005387+80j
					; sub_10005387+9Ej ...
		mov	ecx, [esp+54h+var_4]
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 44h
		retn
sub_10005387	endp


; =============== S U B	R O U T	I N E =======================================


sub_100055A8	proc near		; CODE XREF: sub_100051DF+6Ap

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= byte ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 18h
		push	ebx
		push	esi
		push	edi
		push	[esp+24h+arg_0]
		call	sub_100078B4
		mov	esi, [esp+28h+arg_C]
		mov	ebx, eax
		mov	edi, [esp+28h+arg_8]
		push	esi
		push	edi
		push	2
		call	sub_10007ED3
		add	esp, 10h
		test	eax, eax
		jz	short loc_100055D9

loc_100055D1:				; CODE XREF: sub_100055A8+52j
					; sub_100055A8+72j
		push	13h

loc_100055D3:				; CODE XREF: sub_100055A8+C8j
		pop	eax
		jmp	loc_100056AB
; ---------------------------------------------------------------------------

loc_100055D9:				; CODE XREF: sub_100055A8+27j
		test	ebx, ebx
		jnz	short loc_100055E7
		mov	eax, 0E2h
		jmp	loc_100056AB
; ---------------------------------------------------------------------------

loc_100055E7:				; CODE XREF: sub_100055A8+33j
		push	esi
		push	edi
		push	101h
		call	sub_10007C28
		mov	ecx, eax
		add	esp, 0Ch
		test	ecx, ecx
		jz	short loc_100055D1
		mov	eax, [ecx+4]
		push	esi
		mov	[esp+28h+var_14], eax
		mov	eax, [ecx+8]
		push	edi
		push	11h
		mov	[esp+30h+var_10], eax
		call	sub_10007C28
		mov	ecx, eax
		add	esp, 0Ch
		test	ecx, ecx
		jz	short loc_100055D1
		mov	eax, [ecx+4]
		push	ebp
		push	esi
		mov	[esp+2Ch+var_8], eax
		mov	eax, [ecx+8]
		push	edi
		push	0CE534351h
		mov	[esp+34h+var_4], eax
		call	sub_10007E65
		push	esi
		push	edi
		push	0CE534358h
		mov	ebp, eax
		call	sub_10007ED3
		mov	edi, eax
		lea	eax, [esp+40h+var_18]
		push	edi
		push	ebp
		push	eax
		lea	eax, [esp+4Ch+var_C]
		push	eax
		push	ebx
		call	sub_1000BF33
		add	esp, 2Ch
		mov	esi, eax
		test	ebp, ebp
		jz	short loc_10005669
		push	ebp
		call	PORT_Free_Util
		pop	ecx

loc_10005669:				; CODE XREF: sub_100055A8+B8j
		pop	ebp
		test	esi, esi
		jz	short loc_10005675
		push	30h
		jmp	loc_100055D3
; ---------------------------------------------------------------------------

loc_10005675:				; CODE XREF: sub_100055A8+C4j
		xor	ebx, ebx
		lea	eax, [esp+24h+var_18]
		test	edi, edi
		setnz	bl
		add	ebx, 28000000h
		push	ebx		; Dst
		push	eax		; int
		push	[esp+2Ch+arg_0]	; int
		call	sub_10007FB6
		push	ebx		; Dst
		lea	eax, [esp+34h+var_18]
		push	eax		; int
		push	[esp+38h+arg_0]	; int
		call	sub_10007F0A
		mov	ecx, [esp+3Ch+arg_4]
		add	esp, 18h
		mov	[ecx], eax
		xor	eax, eax

loc_100056AB:				; CODE XREF: sub_100055A8+2Cj
					; sub_100055A8+3Aj
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 18h
		retn
sub_100055A8	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_100056B2	proc near		; CODE XREF: sub_100051DF+7Ap

var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		push	ecx
		lea	eax, [ebp+var_4]
		push	eax
		push	[ebp+arg_10]
		push	[ebp+arg_C]
		push	100h
		call	sub_10007C51
		add	esp, 10h
		test	eax, eax
		jnz	short loc_10005726
		mov	eax, [ebp+arg_4]
		dec	eax
		dec	eax
		jz	short loc_1000570F
		dec	eax
		jz	short loc_100056F9
		dec	eax
		jz	short loc_100056E3
		push	13h
		pop	eax
		jmp	short loc_10005726
; ---------------------------------------------------------------------------

loc_100056E3:				; CODE XREF: sub_100056B2+2Aj
		push	[ebp+arg_10]
		push	[ebp+arg_C]
		push	[ebp+arg_8]
		push	[ebp+var_4]
		push	[ebp+arg_0]
		call	sub_10005B31
		jmp	short loc_10005723
; ---------------------------------------------------------------------------

loc_100056F9:				; CODE XREF: sub_100056B2+27j
		push	[ebp+arg_10]
		push	[ebp+arg_C]
		push	[ebp+arg_8]
		push	[ebp+var_4]
		push	[ebp+arg_0]
		call	sub_1000572A
		jmp	short loc_10005723
; ---------------------------------------------------------------------------

loc_1000570F:				; CODE XREF: sub_100056B2+24j
		push	[ebp+arg_10]
		push	[ebp+arg_C]
		push	[ebp+arg_8]
		push	[ebp+var_4]
		push	[ebp+arg_0]
		call	sub_10005843

loc_10005723:				; CODE XREF: sub_100056B2+45j
					; sub_100056B2+5Bj
		add	esp, 14h

loc_10005726:				; CODE XREF: sub_100056B2+1Dj
					; sub_100056B2+2Fj
		mov	esp, ebp
		pop	ebp
		retn
sub_100056B2	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000572A	proc near		; CODE XREF: sub_100056B2+56p

var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		sub	esp, 14h
		push	[esp+14h+arg_0]
		mov	[esp+18h+var_14], 30h
		call	sub_100078BD
		mov	[esp+18h+var_10], eax
		pop	ecx
		test	eax, eax
		jnz	short loc_10005751
		mov	eax, 0E2h
		jmp	loc_1000583F
; ---------------------------------------------------------------------------

loc_10005751:				; CODE XREF: sub_1000572A+1Bj
		push	ebx
		lea	eax, [esp+18h+var_14]
		push	eax
		push	[esp+1Ch+arg_4]
		push	[esp+20h+arg_10]
		push	[esp+24h+arg_C]
		push	[esp+28h+arg_0]
		call	sub_10005E93
		mov	ebx, eax
		add	esp, 14h
		test	ebx, ebx
		jnz	short loc_1000577E
		mov	eax, [esp+18h+var_14]
		jmp	loc_1000583E
; ---------------------------------------------------------------------------

loc_1000577E:				; CODE XREF: sub_1000572A+49j
		push	ebp
		push	esi
		push	[esp+20h+arg_10]
		push	[esp+24h+arg_C]
		push	3
		call	sub_10007E65
		mov	ebp, eax
		lea	eax, [esp+2Ch+var_C]
		push	eax
		push	[esp+30h+arg_10]
		push	[esp+34h+arg_C]
		push	0D5A0DB00h
		push	0
		call	sub_10007B38
		add	esp, 20h
		mov	[esp+20h+var_14], eax
		test	eax, eax
		jz	short loc_100057C2
		mov	[esp+20h+var_14], 0D0h
		or	esi, 0FFFFFFFFh
		jmp	short loc_100057F3
; ---------------------------------------------------------------------------

loc_100057C2:				; CODE XREF: sub_1000572A+89j
		cmp	[esp+20h+arg_4], 0
		jnz	short loc_100057DA
		lea	eax, [ebx+8]
		push	eax
		call	sub_1000E060
		mov	esi, eax
		pop	ecx
		cmp	esi, 0FFFFFFFFh
		jz	short loc_100057F3

loc_100057DA:				; CODE XREF: sub_1000572A+9Dj
		push	[esp+20h+arg_0]
		lea	eax, [esp+24h+var_C]
		push	ebp
		push	eax
		push	ebx
		push	[esp+30h+var_10]
		call	sub_100025D1
		add	esp, 14h
		mov	esi, eax

loc_100057F3:				; CODE XREF: sub_1000572A+96j
					; sub_1000572A+AEj
		test	ebp, ebp
		jz	short loc_100057FE
		push	ebp
		call	PORT_Free_Util
		pop	ecx

loc_100057FE:				; CODE XREF: sub_1000572A+CBj
		push	8000000h	; Dst
		lea	eax, [esp+24h+var_C]
		push	eax		; int
		push	[esp+28h+arg_0]	; int
		call	sub_10007F0A
		mov	ecx, [esp+2Ch+arg_8]
		add	esp, 0Ch
		cmp	[esp+20h+var_8], 0
		mov	[ecx], eax
		jz	short loc_1000582B
		push	[esp+20h+var_8]
		call	PORT_Free_Util
		pop	ecx

loc_1000582B:				; CODE XREF: sub_1000572A+F5j
		push	ebx
		call	sub_10008EC8
		neg	esi
		pop	ecx
		sbb	esi, esi
		and	esi, [esp+20h+var_14]
		mov	eax, esi
		pop	esi
		pop	ebp

loc_1000583E:				; CODE XREF: sub_1000572A+4Fj
		pop	ebx

loc_1000583F:				; CODE XREF: sub_1000572A+22j
		add	esp, 14h
		retn
sub_1000572A	endp


; =============== S U B	R O U T	I N E =======================================


sub_10005843	proc near		; CODE XREF: sub_100056B2+6Cp

Dst		= dword	ptr -4Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
Src		= byte ptr -18h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		sub	esp, 38h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+38h+var_4], eax
		mov	eax, [esp+38h+arg_0]
		xor	edx, edx
		mov	ecx, [esp+38h+arg_C]
		push	ebx
		push	ebp
		mov	ebp, [esp+40h+arg_4]
		mov	ebx, edx
		mov	[esp+40h+var_2C], eax
		mov	eax, [esp+40h+arg_8]
		mov	[esp+40h+var_1C], eax
		mov	[esp+40h+var_38], edx
		mov	[esp+40h+var_34], edx
		mov	[esp+40h+var_30], edx
		mov	[esp+40h+var_28], edx
		mov	[esp+40h+var_24], edx
		mov	[esp+40h+var_20], edx
		push	edi
		push	11h
		pop	eax
		push	2
		pop	edi
		test	ebp, ebp
		jz	short loc_100058AA
		cmp	ebp, edi
		jbe	short loc_100058AF
		cmp	ebp, 3
		jnz	short loc_100058A2
		mov	eax, 181h
		jmp	short loc_100058AF
; ---------------------------------------------------------------------------

loc_100058A2:				; CODE XREF: sub_10005843+56j
		push	13h
		pop	eax
		jmp	loc_100059D7
; ---------------------------------------------------------------------------

loc_100058AA:				; CODE XREF: sub_10005843+4Dj
		mov	eax, 120h

loc_100058AF:				; CODE XREF: sub_10005843+51j
					; sub_10005843+5Dj
		push	esi
		lea	esi, [esp+48h+var_38]
		mov	edx, esi
		push	edx
		push	[esp+4Ch+arg_10]
		push	ecx
		push	eax
		push	0
		call	sub_10007B38
		add	esp, 14h
		test	eax, eax
		jnz	loc_100059D6
		cmp	ebp, 3
		jnz	short loc_1000591C
		push	800h
		call	PORT_NewArena_Util
		mov	ebx, eax
		pop	ecx
		test	ebx, ebx
		jz	loc_100059BC
		mov	eax, esi
		push	eax
		push	0
		push	0
		call	NSS_Get_SEC_OctetStringTemplate_Util
		pop	ecx
		pop	ecx
		push	eax
		lea	eax, [esp+50h+var_28]
		push	eax
		push	ebx
		call	SEC_QuickDERDecodeItem_Util
		add	esp, 10h
		test	eax, eax
		jz	short loc_10005918
		push	0
		push	ebx
		call	PORT_FreeArena_Util
		pop	ecx
		pop	ecx
		xor	ebx, ebx
		jmp	short loc_1000591C
; ---------------------------------------------------------------------------

loc_10005918:				; CODE XREF: sub_10005843+C5j
		lea	esi, [esp+48h+var_28]

loc_1000591C:				; CODE XREF: sub_10005843+8Fj
					; sub_10005843+D3j
		cmp	dword ptr [esi+4], 0
		jnz	short loc_1000592A

loc_10005922:				; CODE XREF: sub_10005843+143j
					; sub_10005843+158j
		push	13h
		pop	edi
		jmp	loc_100059BC
; ---------------------------------------------------------------------------

loc_1000592A:				; CODE XREF: sub_10005843+DDj
		mov	ebp, [esp+48h+var_2C]
		push	ebp
		call	sub_100078BD
		mov	edi, eax
		pop	ecx
		test	edi, edi
		jnz	short loc_10005942
		mov	edi, 0E2h
		jmp	short loc_100059BC
; ---------------------------------------------------------------------------

loc_10005942:				; CODE XREF: sub_10005843+F6j
		cmp	dword ptr [edi+0Ch], 3
		jz	short loc_10005971
		push	dword ptr [esi+8]
		lea	eax, [esp+4Ch+Src]
		push	dword ptr [esi+4]
		push	eax
		call	sub_1000E0A0
		push	14h		; Size
		lea	eax, [esp+58h+Src]
		push	eax		; Src
		push	dword ptr [esi+4] ; Dst
		call	memcpy
		add	esp, 18h
		mov	dword ptr [esi+8], 14h

loc_10005971:				; CODE XREF: sub_10005843+103j
		push	ebp
		push	esi
		push	edi
		call	sub_10001F2D
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_1000599D
		lea	eax, [esp+48h+var_28]
		cmp	esi, eax
		jnz	short loc_10005922
		lea	esi, [esp+48h+var_38]
		push	ebp
		mov	eax, esi
		push	eax
		push	edi
		call	sub_10001F2D
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_10005922

loc_1000599D:				; CODE XREF: sub_10005843+13Bj
		push	eax
		call	sub_10008EC8
		mov	[esp+4Ch+Dst], 10000000h ; Dst
		xor	edi, edi
		push	esi		; int
		push	ebp		; int
		call	sub_10007F0A
		mov	ecx, [esp+54h+var_1C]
		add	esp, 0Ch
		mov	[ecx], eax

loc_100059BC:				; CODE XREF: sub_10005843+A0j
					; sub_10005843+E2j ...
		push	[esp+48h+var_34]
		call	PORT_Free_Util
		pop	ecx
		test	ebx, ebx
		jz	short loc_100059D4
		push	0
		push	ebx
		call	PORT_FreeArena_Util
		pop	ecx
		pop	ecx

loc_100059D4:				; CODE XREF: sub_10005843+185j
		mov	eax, edi

loc_100059D6:				; CODE XREF: sub_10005843+86j
		pop	esi

loc_100059D7:				; CODE XREF: sub_10005843+62j
		mov	ecx, [esp+44h+var_4]
		pop	edi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 38h
		retn
sub_10005843	endp


; =============== S U B	R O U T	I N E =======================================


sub_100059E9	proc near		; CODE XREF: sub_100051DF+5Bp

Dst		= dword	ptr -4Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 38h
		push	ebx
		push	ebp
		mov	ebp, [esp+40h+arg_8]
		xor	ebx, ebx
		push	esi
		push	edi
		mov	edi, [esp+48h+arg_C]
		mov	esi, ebx
		push	edi
		push	ebp
		push	2
		mov	[esp+54h+var_38], ebx
		call	sub_10007ED3
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_10005A18
		push	13h
		pop	eax
		jmp	loc_10005B29
; ---------------------------------------------------------------------------

loc_10005A18:				; CODE XREF: sub_100059E9+25j
		push	[esp+48h+arg_0]
		call	sub_100078B4
		mov	[esp+4Ch+var_34], eax
		pop	ecx
		test	eax, eax
		jnz	short loc_10005A34
		mov	eax, 0E2h
		jmp	loc_10005B29
; ---------------------------------------------------------------------------

loc_10005A34:				; CODE XREF: sub_100059E9+3Fj
		push	edi
		push	ebp
		push	101h
		call	sub_10007C28
		mov	ecx, eax
		add	esp, 0Ch
		test	ecx, ecx
		jnz	short loc_10005A51

loc_10005A49:				; CODE XREF: sub_100059E9+E4j
		push	13h
		pop	esi
		jmp	loc_10005B27
; ---------------------------------------------------------------------------

loc_10005A51:				; CODE XREF: sub_100059E9+5Ej
		mov	eax, [ecx+4]
		push	edi
		mov	[esp+4Ch+var_14], eax
		mov	eax, [ecx+8]
		push	ebp
		push	11h
		mov	[esp+54h+var_10], eax
		mov	[esp+54h+var_18], ebx
		call	sub_10007C28
		mov	ecx, eax
		add	esp, 0Ch
		test	ecx, ecx
		jz	short loc_10005A8F
		mov	eax, [ecx+4]
		mov	[esp+48h+var_2C], eax
		mov	eax, [ecx+8]
		mov	[esp+48h+var_28], eax
		lea	eax, [esp+48h+var_30]
		mov	[esp+48h+var_30], ebx
		mov	[esp+48h+var_38], eax

loc_10005A8F:				; CODE XREF: sub_100059E9+8Aj
		push	edi
		push	ebp
		push	0CE534354h
		call	sub_10007C28
		mov	ecx, eax
		add	esp, 0Ch
		test	ecx, ecx
		jz	short loc_10005ABA
		mov	eax, [ecx+4]
		mov	[esp+48h+var_20], eax
		mov	eax, [ecx+8]
		mov	[esp+48h+var_24], ebx
		lea	ebx, [esp+48h+var_24]
		mov	[esp+48h+var_1C], eax

loc_10005ABA:				; CODE XREF: sub_100059E9+B9j
		push	edi
		push	ebp
		push	0CE534352h
		call	sub_10007E65
		mov	edi, eax
		add	esp, 0Ch
		test	edi, edi
		jz	loc_10005A49
		push	ebx
		push	[esp+4Ch+var_38]
		lea	eax, [esp+50h+var_18]
		push	eax
		push	edi
		push	[esp+58h+var_34]
		call	sub_1000CA00
		add	esp, 14h
		test	eax, eax
		jz	short loc_10005AF3
		push	30h
		pop	esi
		jmp	short loc_10005B20
; ---------------------------------------------------------------------------

loc_10005AF3:				; CODE XREF: sub_100059E9+103j
		push	edi		; Str
		mov	[esp+4Ch+var_8], edi
		call	strlen
		inc	eax
		mov	[esp+4Ch+Dst], 30000000h ; Dst
		mov	[esp+4Ch+var_4], eax
		lea	eax, [esp+4Ch+var_C]
		push	eax		; int
		push	[esp+50h+arg_0]	; int
		call	sub_10007F0A
		mov	ecx, [esp+54h+arg_4]
		add	esp, 0Ch
		mov	[ecx], eax

loc_10005B20:				; CODE XREF: sub_100059E9+108j
		push	edi
		call	PORT_Free_Util
		pop	ecx

loc_10005B27:				; CODE XREF: sub_100059E9+63j
		mov	eax, esi

loc_10005B29:				; CODE XREF: sub_100059E9+2Aj
					; sub_100059E9+46j
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 38h
		retn
sub_100059E9	endp


; =============== S U B	R O U T	I N E =======================================


sub_10005B31	proc near		; CODE XREF: sub_100056B2+40p

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		sub	esp, 10h
		push	esi
		push	[esp+14h+arg_0]
		xor	esi, esi
		mov	[esp+18h+var_8], esi
		call	sub_100078BD
		mov	[esp+18h+var_10], eax
		pop	ecx
		test	eax, eax
		jnz	short loc_10005B57
		mov	eax, 0E2h
		jmp	loc_10005C4F
; ---------------------------------------------------------------------------

loc_10005B57:				; CODE XREF: sub_10005B31+1Aj
		push	ebp
		push	edi
		push	[esp+1Ch+arg_10]
		push	[esp+20h+arg_C]
		push	3
		call	sub_10007E65
		mov	ebp, eax
		lea	eax, [esp+28h+var_C]
		push	eax
		push	[esp+2Ch+arg_10]
		push	[esp+30h+arg_C]
		push	102h
		push	esi
		call	sub_10007B93
		mov	edi, eax
		add	esp, 20h
		test	edi, edi
		jnz	loc_10005C24
		cmp	[esp+1Ch+var_4], esi
		jnz	short loc_10005BC1
		cmp	[esp+1Ch+var_8], esi
		jz	short loc_10005BA9
		push	[esp+1Ch+var_8]
		call	PORT_Free_Util
		pop	ecx
		mov	[esp+1Ch+var_8], esi

loc_10005BA9:				; CODE XREF: sub_10005B31+68j
		push	ebp		; Str
		lea	eax, [esp+20h+var_C]
		push	eax		; int
		push	[esp+24h+var_10] ; int
		call	sub_1000527E
		mov	edi, eax
		add	esp, 0Ch
		test	edi, edi
		jnz	short loc_10005C24

loc_10005BC1:				; CODE XREF: sub_10005B31+62j
		push	[esp+1Ch+arg_0]
		lea	eax, [esp+20h+var_C]
		push	eax
		push	[esp+24h+arg_4]
		push	[esp+28h+arg_10]
		push	[esp+2Ch+arg_C]
		call	sub_10006269
		mov	esi, eax
		add	esp, 14h
		test	esi, esi
		jnz	short loc_10005BE9
		push	2

loc_10005BE6:				; CODE XREF: sub_10005B31+D5j
		pop	edi
		jmp	short loc_10005C24
; ---------------------------------------------------------------------------

loc_10005BE9:				; CODE XREF: sub_10005B31+B1j
		push	[esp+1Ch+arg_0]
		lea	eax, [esp+20h+var_C]
		push	ebp
		push	eax
		push	esi
		push	[esp+2Ch+var_10]
		call	sub_100025D1
		add	esp, 14h
		test	eax, eax
		jz	short loc_10005C08
		push	30h
		jmp	short loc_10005BE6
; ---------------------------------------------------------------------------

loc_10005C08:				; CODE XREF: sub_10005B31+D1j
		push	18000000h	; Dst
		lea	eax, [esp+20h+var_C]
		push	eax		; int
		push	[esp+24h+arg_0]	; int
		call	sub_10007F0A
		mov	ecx, [esp+28h+arg_8]
		add	esp, 0Ch
		mov	[ecx], eax

loc_10005C24:				; CODE XREF: sub_10005B31+58j
					; sub_10005B31+8Ej ...
		test	ebp, ebp
		jz	short loc_10005C2F
		push	ebp
		call	PORT_Free_Util
		pop	ecx

loc_10005C2F:				; CODE XREF: sub_10005B31+F5j
		test	esi, esi
		jz	short loc_10005C3A
		push	esi
		call	sub_10008EC8
		pop	ecx

loc_10005C3A:				; CODE XREF: sub_10005B31+100j
		cmp	[esp+1Ch+var_8], 0
		jz	short loc_10005C4B
		push	[esp+1Ch+var_8]
		call	PORT_Free_Util
		pop	ecx

loc_10005C4B:				; CODE XREF: sub_10005B31+10Ej
		mov	eax, edi
		pop	edi
		pop	ebp

loc_10005C4F:				; CODE XREF: sub_10005B31+21j
		pop	esi
		add	esp, 10h
		retn
sub_10005B31	endp


; =============== S U B	R O U T	I N E =======================================


sub_10005C54	proc near		; CODE XREF: sub_100051DF+4Cp

var_49		= byte ptr -49h
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= byte ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 4Ch
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+4Ch+var_4], eax
		mov	ecx, [esp+4Ch+arg_4]
		mov	eax, [esp+4Ch+arg_0]
		push	ebp
		mov	[esp+50h+var_30], ecx
		mov	ecx, 0CE534355h
		push	esi
		mov	esi, [esp+54h+arg_8]
		push	edi
		mov	edi, [esp+58h+arg_C]
		mov	[esp+58h+var_3C], ecx
		mov	[esp+58h+var_38], ecx
		mov	[esp+58h+var_44], ecx
		mov	[esp+58h+var_40], ecx
		xor	ecx, ecx
		push	eax
		mov	[esp+5Ch+var_2C], eax
		mov	[esp+5Ch+var_10], ecx
		mov	[esp+5Ch+var_C], ecx
		mov	[esp+5Ch+var_8], ecx
		call	sub_100078B4
		push	edi
		mov	ebp, eax
		push	esi
		push	2
		mov	[esp+68h+var_34], ebp
		call	sub_10007ED3
		add	esp, 10h
		test	eax, eax
		jz	short loc_10005CC4
		push	13h
		pop	eax
		jmp	loc_10005E81
; ---------------------------------------------------------------------------

loc_10005CC4:				; CODE XREF: sub_10005C54+66j
		test	ebp, ebp
		jnz	short loc_10005CD2
		mov	eax, 0E2h
		jmp	loc_10005E81
; ---------------------------------------------------------------------------

loc_10005CD2:				; CODE XREF: sub_10005C54+72j
		push	ebx
		push	edi
		push	esi
		push	81h
		call	sub_10007C28
		push	edi
		push	esi
		push	82h
		mov	ebx, eax
		call	sub_10007C28
		add	esp, 18h
		mov	edx, eax
		test	ebx, ebx
		jz	loc_10005E7D
		test	edx, edx
		jz	loc_10005E7D
		mov	ecx, [ebx+4]
		mov	[esp+5Ch+var_24], ecx
		mov	ecx, [ebx+8]
		mov	[esp+5Ch+var_20], ecx
		mov	eax, [edx+4]
		mov	[esp+5Ch+var_18], eax
		mov	eax, [edx+8]
		mov	[esp+5Ch+var_14], eax
		lea	eax, [esp+5Ch+var_28]
		push	eax
		push	ebp
		call	sub_1000C38A
		mov	ebx, eax
		pop	ecx
		pop	ecx
		test	ebx, ebx
		jz	loc_10005E7D
		lea	eax, [esp+5Ch+var_3C]
		push	eax
		push	edi
		push	esi
		push	0CE536358h
		call	sub_10007C51
		lea	eax, [esp+6Ch+var_38]
		push	eax
		push	edi
		push	esi
		push	0CE536359h
		call	sub_10007C51
		lea	eax, [esp+7Ch+var_44]
		push	eax
		push	edi
		push	esi
		push	0CE53635Bh
		call	sub_10007C51
		lea	eax, [esp+8Ch+var_40]
		push	eax
		push	edi
		push	esi
		push	0CE53635Ah
		call	sub_10007C51
		add	esp, 40h
		mov	[esp+5Ch+var_49], 0
		push	edi
		push	esi
		push	0CE536360h
		call	sub_10007C28
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_10005DA3
		cmp	dword ptr [eax+8], 1
		jnz	short loc_10005DA3
		mov	eax, [eax+4]
		mov	al, [eax]
		mov	[esp+5Ch+var_49], al

loc_10005DA3:				; CODE XREF: sub_10005C54+13Ej
					; sub_10005C54+144j
		mov	edi, [ebx+90h]
		test	edi, edi
		jz	short loc_10005DD6
		mov	edi, [edi]
		mov	ecx, 368h
		and	edi, ecx
		mov	[esp+5Ch+var_10], edi
		mov	eax, [ebx+90h]
		mov	ebp, [eax+4]
		and	ebp, ecx
		mov	[esp+5Ch+var_C], ebp
		mov	eax, [ebx+90h]
		mov	eax, [eax+8]
		and	eax, ecx
		jmp	short loc_10005DE2
; ---------------------------------------------------------------------------

loc_10005DD6:				; CODE XREF: sub_10005C54+157j
		mov	eax, [esp+5Ch+var_8]
		mov	ebp, [esp+5Ch+var_C]
		mov	edi, [esp+5Ch+var_10]

loc_10005DE2:				; CODE XREF: sub_10005C54+180j
		push	1
		push	[esp+60h+var_38]
		mov	[esp+64h+var_48], eax
		call	sub_10005330
		push	0
		push	[esp+68h+var_3C]
		mov	esi, eax
		call	sub_10005330
		or	esi, eax
		push	0
		push	[esp+70h+var_44]
		or	edi, esi
		mov	[esp+74h+var_10], edi
		call	sub_10005330
		push	0
		push	[esp+78h+var_40]
		or	ebp, eax
		mov	[esp+7Ch+var_C], ebp
		call	sub_10005330
		mov	ecx, [esp+7Ch+var_48]
		add	esp, 20h
		or	ecx, eax
		cmp	[esp+5Ch+var_49], 0
		mov	[esp+5Ch+var_8], ecx
		jz	short loc_10005E40
		or	edi, 200h
		mov	[esp+5Ch+var_10], edi

loc_10005E40:				; CODE XREF: sub_10005C54+1E0j
		lea	eax, [esp+5Ch+var_10]
		push	eax
		push	ebx
		push	[esp+64h+var_34]
		call	sub_1000C04B
		push	20000000h	; Dst
		lea	ecx, [ebx+54h]
		mov	esi, eax
		push	ecx		; int
		push	[esp+70h+var_2C] ; int
		call	sub_10007F0A
		mov	ecx, [esp+74h+var_30]
		push	ebx		; Dst
		mov	[ecx], eax
		call	sub_1000C19A
		add	esp, 1Ch
		neg	esi
		sbb	esi, esi
		and	esi, 30h
		mov	eax, esi
		jmp	short loc_10005E80
; ---------------------------------------------------------------------------

loc_10005E7D:				; CODE XREF: sub_10005C54+A0j
					; sub_10005C54+A8j ...
		push	13h
		pop	eax

loc_10005E80:				; CODE XREF: sub_10005C54+227j
		pop	ebx

loc_10005E81:				; CODE XREF: sub_10005C54+6Bj
					; sub_10005C54+79j
		mov	ecx, [esp+58h+var_4]
		pop	edi
		pop	esi
		pop	ebp
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 4Ch
		retn
sub_10005C54	endp


; =============== S U B	R O U T	I N E =======================================


sub_10005E93	proc near		; CODE XREF: sub_1000572A+3Dp

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	ebx
		push	800h
		call	PORT_NewArena_Util
		mov	ebx, eax
		pop	ecx
		test	ebx, ebx
		jnz	short loc_10005EB3
		mov	eax, [esp+4+arg_10]
		pop	ebx
		mov	dword ptr [eax], 2
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_10005EB3:				; CODE XREF: sub_10005E93+10j
		push	edi
		push	0B0h
		push	ebx
		call	PORT_ArenaZAlloc_Util
		mov	edi, eax
		pop	ecx
		pop	ecx
		test	edi, edi
		jnz	short loc_10005EDD
		push	eax
		push	ebx
		call	PORT_FreeArena_Util
		mov	eax, [esp+10h+arg_10]
		mov	dword ptr [eax], 2
		jmp	loc_1000625E
; ---------------------------------------------------------------------------

loc_10005EDD:				; CODE XREF: sub_10005E93+32j
		mov	eax, [esp+8+arg_C]
		mov	[edi], ebx
		push	ebp
		push	esi
		sub	eax, 0
		jz	loc_10006119
		dec	eax
		jz	loc_10006051
		dec	eax
		jz	loc_10005FBF
		dec	eax
		jz	short loc_10005F06
		push	63h
		jmp	loc_10006249
; ---------------------------------------------------------------------------

loc_10005F06:				; CODE XREF: sub_10005E93+6Aj
		lea	ebp, [edi+70h]
		mov	dword ptr [edi+4], 5
		push	ebp
		push	[esp+14h+arg_8]
		push	[esp+18h+arg_4]
		push	180h
		push	ebx
		call	sub_10007B38
		mov	esi, eax
		add	esp, 14h
		test	esi, esi
		jnz	loc_1000624A
		lea	eax, [edi+8]
		push	eax
		push	ebp
		push	ebx
		call	sub_10008C7B
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_10005F4D
		mov	esi, 130h
		jmp	loc_1000624A
; ---------------------------------------------------------------------------

loc_10005F4D:				; CODE XREF: sub_10005E93+AEj
		push	[esp+10h+arg_0]
		lea	eax, [edi+98h]
		push	eax
		push	[esp+18h+arg_8]
		push	[esp+1Ch+arg_4]
		push	11h
		push	ebx
		call	sub_10007CA5
		mov	esi, eax
		add	esp, 18h
		test	esi, esi
		jnz	loc_1000624A
		push	[esp+10h+arg_8]
		mov	ebp, 0D5A0DB00h
		push	[esp+14h+arg_4]
		push	ebp
		call	sub_10007EB8
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_10005FB2
		lea	eax, [edi+8Ch]
		push	eax
		push	[esp+14h+arg_8]
		push	[esp+18h+arg_4]
		push	ebp
		push	ebx
		call	sub_10007B38
		mov	esi, eax
		add	esp, 14h
		test	esi, esi
		jnz	loc_1000624A

loc_10005FB2:				; CODE XREF: sub_10005E93+FAj
		push	1
		lea	eax, [edi+0A4h]
		jmp	loc_10006238
; ---------------------------------------------------------------------------

loc_10005FBF:				; CODE XREF: sub_10005E93+63j
		mov	ebp, [esp+10h+arg_8]
		lea	eax, [edi+0Ch]
		push	eax
		push	ebp
		push	[esp+18h+arg_4]
		mov	dword ptr [edi+4], 4
		push	130h
		push	ebx
		call	sub_10007B38
		mov	esi, eax
		add	esp, 14h
		test	esi, esi
		jnz	loc_1000624A
		lea	eax, [edi+18h]
		push	eax
		push	ebp
		push	[esp+18h+arg_4]
		push	132h
		push	ebx
		call	sub_10007B38
		mov	esi, eax
		add	esp, 14h
		test	esi, esi
		jnz	loc_1000624A
		push	[esp+10h+arg_0]
		lea	eax, [edi+30h]
		push	eax
		push	ebp
		push	[esp+1Ch+arg_4]
		push	11h
		push	ebx
		call	sub_10007CA5
		mov	esi, eax
		add	esp, 18h
		test	esi, esi
		jnz	loc_1000624A
		push	ebp
		push	[esp+14h+arg_4]
		mov	ebp, 0D5A0DB00h
		push	ebp
		call	sub_10007EB8
		add	esp, 0Ch
		test	eax, eax
		jz	loc_1000624A
		lea	eax, [edi+24h]
		jmp	loc_100060FF
; ---------------------------------------------------------------------------

loc_10006051:				; CODE XREF: sub_10005E93+5Cj
		mov	ebp, [esp+10h+arg_8]
		lea	eax, [edi+0Ch]
		push	eax
		push	ebp
		push	[esp+18h+arg_4]
		mov	dword ptr [edi+4], 2
		push	130h
		push	ebx
		call	sub_10007B38
		mov	esi, eax
		add	esp, 14h
		test	esi, esi
		jnz	loc_1000624A
		lea	eax, [edi+18h]
		push	eax
		push	ebp
		push	[esp+18h+arg_4]
		push	131h
		push	ebx
		call	sub_10007B38
		mov	esi, eax
		add	esp, 14h
		test	esi, esi
		jnz	loc_1000624A
		lea	eax, [edi+24h]
		push	eax
		push	ebp
		push	[esp+18h+arg_4]
		push	132h
		push	ebx
		call	sub_10007B38
		mov	esi, eax
		add	esp, 14h
		test	esi, esi
		jnz	loc_1000624A
		push	[esp+10h+arg_0]
		lea	eax, [edi+3Ch]
		push	eax
		push	ebp
		push	[esp+1Ch+arg_4]
		push	11h
		push	ebx
		call	sub_10007CA5
		mov	esi, eax
		add	esp, 18h
		test	esi, esi
		jnz	loc_1000624A
		push	ebp
		push	[esp+14h+arg_4]
		mov	ebp, 0D5A0DB00h
		push	ebp
		call	sub_10007EB8
		add	esp, 0Ch
		test	eax, eax
		jz	loc_1000624A
		lea	eax, [edi+30h]

loc_100060FF:				; CODE XREF: sub_10005E93+1B9j
		push	eax
		push	[esp+14h+arg_8]
		push	[esp+18h+arg_4]
		push	ebp
		push	ebx
		call	sub_10007B38
		add	esp, 14h
		mov	esi, eax
		jmp	loc_1000624A
; ---------------------------------------------------------------------------

loc_10006119:				; CODE XREF: sub_10005E93+55j
		mov	ebp, [esp+10h+arg_8]
		lea	eax, [edi+18h]
		push	eax
		push	ebp
		push	[esp+18h+arg_4]
		mov	dword ptr [edi+4], 1
		push	120h
		push	ebx
		call	sub_10007B38
		mov	esi, eax
		add	esp, 14h
		test	esi, esi
		jnz	loc_1000624A
		lea	eax, [edi+24h]
		push	eax
		push	ebp
		push	[esp+18h+arg_4]
		push	122h
		push	ebx
		call	sub_10007B38
		mov	esi, eax
		add	esp, 14h
		test	esi, esi
		jnz	loc_1000624A
		push	[esp+10h+arg_0]
		lea	eax, [edi+30h]
		push	eax
		push	ebp
		push	[esp+1Ch+arg_4]
		push	123h
		push	ebx
		call	sub_10007CA5
		mov	esi, eax
		add	esp, 18h
		test	esi, esi
		jnz	loc_1000624A
		push	[esp+10h+arg_0]
		lea	eax, [edi+3Ch]
		push	eax
		push	ebp
		push	[esp+1Ch+arg_4]
		push	124h
		push	ebx
		call	sub_10007CA5
		mov	esi, eax
		add	esp, 18h
		test	esi, esi
		jnz	loc_1000624A
		push	[esp+10h+arg_0]
		lea	eax, [edi+48h]
		push	eax
		push	ebp
		push	[esp+1Ch+arg_4]
		push	125h
		push	ebx
		call	sub_10007CA5
		mov	esi, eax
		add	esp, 18h
		test	esi, esi
		jnz	short loc_1000624A
		push	[esp+10h+arg_0]
		lea	eax, [edi+54h]
		push	eax
		push	ebp
		push	[esp+1Ch+arg_4]
		push	126h
		push	ebx
		call	sub_10007CA5
		mov	esi, eax
		add	esp, 18h
		test	esi, esi
		jnz	short loc_1000624A
		push	[esp+10h+arg_0]
		lea	eax, [edi+60h]
		push	eax
		push	ebp
		push	[esp+1Ch+arg_4]
		push	127h
		push	ebx
		call	sub_10007CA5
		mov	esi, eax
		add	esp, 18h
		test	esi, esi
		jnz	short loc_1000624A
		push	[esp+10h+arg_0]
		lea	eax, [edi+6Ch]
		push	eax
		push	ebp
		push	[esp+1Ch+arg_4]
		push	128h
		push	ebx
		call	sub_10007CA5
		mov	esi, eax
		add	esp, 18h
		test	esi, esi
		jnz	short loc_1000624A
		push	eax
		lea	eax, [edi+0Ch]

loc_10006238:				; CODE XREF: sub_10005E93+127j
		push	eax
		push	dword ptr [edi]
		call	DER_SetUInteger
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_1000624A
		push	2

loc_10006249:				; CODE XREF: sub_10005E93+6Ej
		pop	esi

loc_1000624A:				; CODE XREF: sub_10005E93+98j
					; sub_10005E93+B5j ...
		mov	eax, [esp+10h+arg_10]
		test	esi, esi
		mov	[eax], esi
		pop	esi
		pop	ebp
		jz	short loc_10006264
		push	0
		push	ebx
		call	PORT_FreeArena_Util

loc_1000625E:				; CODE XREF: sub_10005E93+45j
		pop	ecx
		pop	ecx
		xor	eax, eax
		jmp	short loc_10006266
; ---------------------------------------------------------------------------

loc_10006264:				; CODE XREF: sub_10005E93+3C1j
		mov	eax, edi

loc_10006266:				; CODE XREF: sub_10005E93+3CFj
		pop	edi
		pop	ebx
		retn
sub_10005E93	endp


; =============== S U B	R O U T	I N E =======================================


sub_10006269	proc near		; CODE XREF: sub_10005B31+A5p

var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= byte ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		sub	esp, 14h
		push	ebx
		push	ebp
		push	esi
		push	edi
		push	800h
		call	PORT_NewArena_Util
		mov	edi, eax
		pop	ecx
		test	edi, edi
		jz	loc_10006380
		push	0B0h
		push	edi
		call	PORT_ArenaZAlloc_Util
		mov	esi, eax
		pop	ecx
		pop	ecx
		test	esi, esi
		jz	loc_10006380
		mov	ebx, [esp+24h+arg_C]
		xor	ebp, ebp
		inc	ebp
		mov	[esi], edi
		mov	[esi+4], ebp
		push	dword ptr [ebx+8]
		push	edi
		call	PORT_ArenaAlloc_Util
		mov	[esi+1Ch], eax
		pop	ecx
		pop	ecx
		test	eax, eax
		jz	loc_10006380
		mov	ecx, [ebx+8]
		mov	[esi+20h], ecx
		push	dword ptr [ebx+8] ; Size
		push	dword ptr [ebx+4] ; Src
		push	eax		; Dst
		call	memcpy
		push	[esp+30h+arg_10]
		lea	eax, [esi+30h]
		mov	[esi+2Ch], ebp
		push	eax
		push	[esp+38h+arg_4]
		mov	ebx, offset byte_10015029
		push	[esp+3Ch+arg_0]
		mov	[esi+28h], ebx
		push	11h
		push	edi
		call	sub_10007D44
		add	esp, 24h
		test	eax, eax
		jnz	loc_10006380
		lea	eax, [esp+24h+var_10]
		mov	[esi+44h], ebp
		push	eax
		push	[esp+28h+arg_4]
		mov	[esi+40h], ebx
		push	[esp+2Ch+arg_0]
		mov	[esi+50h], ebp
		push	100h
		mov	[esi+4Ch], ebx
		mov	[esi+5Ch], ebp
		mov	[esi+58h], ebx
		mov	[esi+68h], ebp
		mov	[esi+64h], ebx
		call	sub_10007C51
		add	esp, 10h
		test	eax, eax
		jnz	short loc_10006380
		mov	eax, [esp+24h+var_10]
		push	eax
		mov	[esp+28h+var_14], eax
		call	ds:PR_htonl
		mov	[esp+28h+var_14], eax
		lea	eax, [esp+28h+var_14]
		mov	[esp+28h+var_8], eax
		lea	eax, [esp+28h+var_C]
		push	eax
		lea	eax, [esi+6Ch]
		mov	[esp+2Ch+var_4], 4
		push	eax
		push	edi
		call	SECITEM_CopyItem_Util
		add	esp, 10h
		test	eax, eax
		jnz	short loc_10006380
		push	eax
		lea	eax, [esi+0Ch]
		push	eax
		push	dword ptr [esi]
		call	DER_SetUInteger
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_1000638C

loc_10006380:				; CODE XREF: sub_10006269+16j
					; sub_10006269+2Dj ...
		push	0
		push	edi
		call	PORT_FreeArena_Util
		pop	ecx
		pop	ecx
		xor	esi, esi

loc_1000638C:				; CODE XREF: sub_10006269+115j
		pop	edi
		mov	eax, esi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 14h
		retn
sub_10006269	endp


; =============== S U B	R O U T	I N E =======================================


sub_10006396	proc near		; DATA XREF: sub_100078E3+ABo

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
Dst		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 1Ch
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+1Ch+var_4], eax
		push	ebx
		push	ebp
		mov	ebp, [esp+24h+arg_0]
		xor	ebx, ebx
		push	esi
		mov	esi, [esp+28h+arg_4]
		push	edi
		and	esi, 3FFFFFFFh
		push	esi
		push	ebp
		mov	[esp+34h+var_18], esi
		call	sub_10007EF3
		mov	edi, eax
		pop	ecx
		pop	ecx
		test	edi, edi
		jnz	short loc_100063D5
		mov	eax, 82h
		jmp	loc_10006546
; ---------------------------------------------------------------------------

loc_100063D5:				; CODE XREF: sub_10006396+33j
		mov	eax, esi
		mov	ecx, 38000000h
		and	eax, ecx
		cmp	eax, 8000000h
		jz	loc_1000650C
		cmp	eax, 18000000h
		jz	loc_1000650C
		cmp	eax, 20000000h
		jz	loc_1000647F
		cmp	eax, 28000000h
		jz	short loc_1000644A
		cmp	eax, ecx
		jnz	loc_1000652E
		push	ebp
		call	sub_100078B4
		pop	ecx
		test	eax, eax
		jz	loc_10006517
		push	edi
		push	eax
		call	sub_1000C49E
		mov	edi, eax
		pop	ecx
		pop	ecx
		test	edi, edi
		jz	loc_1000652B
		push	edi
		call	sub_1000C14B
		pop	ecx
		test	eax, eax
		jz	short loc_1000643E
		push	30h
		pop	ebx

loc_1000643E:				; CODE XREF: sub_10006396+A3j
		push	edi		; Dst
		call	sub_1000C19A
		pop	ecx
		jmp	loc_1000652E
; ---------------------------------------------------------------------------

loc_1000644A:				; CODE XREF: sub_10006396+6Ej
		push	ebp
		call	sub_100078B4
		pop	ecx
		mov	ecx, eax
		test	ecx, ecx
		jz	loc_10006517
		xor	eax, eax
		cmp	esi, 28000001h
		setz	al
		push	eax
		push	edi
		push	ecx
		call	sub_1000C12D
		add	esp, 0Ch
		cmp	eax, 0FFFFFFFFh
		jnz	loc_1000652E
		jmp	loc_1000652B
; ---------------------------------------------------------------------------

loc_1000647F:				; CODE XREF: sub_10006396+63j
		push	ebp
		call	sub_100078B4
		mov	[esp+30h+var_1C], eax
		pop	ecx
		test	eax, eax
		jz	loc_10006517
		push	edi
		push	eax
		call	sub_1000C49E
		mov	[esp+34h+Dst], eax
		pop	ecx
		pop	ecx
		test	eax, eax
		jz	loc_1000652B
		mov	esi, [eax+90h]
		lea	edi, [esp+2Ch+var_10]
		movsd
		movsd
		movsd
		mov	edx, [esp+2Ch+var_10]
		mov	esi, 368h
		mov	eax, [esp+2Ch+var_C]
		and	edx, esi
		mov	ecx, [esp+2Ch+var_8]
		and	eax, esi
		and	ecx, esi
		mov	esi, 800h
		or	eax, esi
		or	edx, esi
		mov	[esp+2Ch+var_C], eax
		or	ecx, esi
		mov	esi, [esp+2Ch+Dst]
		lea	eax, [esp+2Ch+var_10]
		push	eax
		push	esi
		push	[esp+34h+var_1C]
		mov	[esp+38h+var_10], edx
		mov	[esp+38h+var_8], ecx
		call	sub_1000C04B
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_100064FF
		push	30h
		pop	ebx

loc_100064FF:				; CODE XREF: sub_10006396+164j
		push	esi		; Dst
		call	sub_1000C19A
		mov	esi, [esp+30h+var_18]
		pop	ecx
		jmp	short loc_1000652E
; ---------------------------------------------------------------------------

loc_1000650C:				; CODE XREF: sub_10006396+4Dj
					; sub_10006396+58j
		push	ebp
		call	sub_100078BD
		pop	ecx
		test	eax, eax
		jnz	short loc_1000651E

loc_10006517:				; CODE XREF: sub_10006396+81j
					; sub_10006396+BFj ...
		mov	ebx, 0E2h
		jmp	short loc_1000652E
; ---------------------------------------------------------------------------

loc_1000651E:				; CODE XREF: sub_10006396+17Fj
		push	edi
		push	eax
		call	sub_10001E21
		pop	ecx
		pop	ecx
		test	eax, eax
		jz	short loc_1000652E

loc_1000652B:				; CODE XREF: sub_10006396+94j
					; sub_10006396+E4j ...
		push	30h
		pop	ebx

loc_1000652E:				; CODE XREF: sub_10006396+72j
					; sub_10006396+AFj ...
		push	ebp
		call	sub_10007699
		push	esi
		push	ebp
		call	sub_10007E0D
		push	ebp
		call	sub_100076AA
		add	esp, 10h
		mov	eax, ebx

loc_10006546:				; CODE XREF: sub_10006396+3Aj
		mov	ecx, [esp+2Ch+var_4]
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 1Ch
		retn
sub_10006396	endp


; =============== S U B	R O U T	I N E =======================================


sub_10006559	proc near		; CODE XREF: sub_100067BB+85p
					; sub_100067BB+18Fp ...

arg_0		= dword	ptr  4

		mov	ecx, [esp+arg_0]
		xor	eax, eax
		inc	eax
		cmp	[ecx+4], eax
		jnz	short loc_10006572
		cmp	[ecx+2Ch], eax
		jnz	short loc_10006572
		mov	ecx, [ecx+28h]
		cmp	byte ptr [ecx],	0
		jz	short locret_10006574

loc_10006572:				; CODE XREF: sub_10006559+Aj
					; sub_10006559+Fj
		xor	eax, eax

locret_10006574:			; CODE XREF: sub_10006559+17j
		retn
sub_10006559	endp


; =============== S U B	R O U T	I N E =======================================


sub_10006575	proc near		; CODE XREF: sub_100069FA+ADp
					; sub_100069FA+E7p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_4]
		push	esi
		mov	esi, [esp+4+arg_0]
		mov	[esi+8], eax
		test	eax, eax
		jle	short loc_10006592
		shl	eax, 2
		push	eax
		call	PORT_Alloc_Util
		pop	ecx
		mov	[esi+0Ch], eax

loc_10006592:				; CODE XREF: sub_10006575+Ej
		pop	esi
		retn
sub_10006575	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_10006594(int,	int, void *Dst,	int, int)
sub_10006594	proc near		; DATA XREF: sub_100078E3+88o

arg_4		= dword	ptr  0Ch
Dst		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		push	ebx
		mov	ebx, [ebp+arg_10]
		push	esi
		push	edi
		mov	edi, [ebp+arg_4]
		and	dword ptr [ebx], 0
		mov	esi, [edi+4]
		mov	ecx, [edi+8]
		sub	esi, ecx
		cmp	[ebp+arg_C], esi
		jg	short loc_100065B3
		mov	esi, [ebp+arg_C]

loc_100065B3:				; CODE XREF: sub_10006594+1Aj
		test	esi, esi
		jle	short loc_100065D0
		mov	eax, esi
		shl	eax, 2
		push	eax		; Size
		mov	eax, [edi]
		lea	eax, [eax+ecx*4]
		push	eax		; Src
		push	[ebp+Dst]	; Dst
		call	memcpy
		add	esp, 0Ch
		jmp	short loc_100065D6
; ---------------------------------------------------------------------------

loc_100065D0:				; CODE XREF: sub_10006594+21j
		mov	eax, [ebp+Dst]
		and	dword ptr [eax], 0

loc_100065D6:				; CODE XREF: sub_10006594+3Aj
		add	[edi+8], esi
		xor	eax, eax
		pop	edi
		mov	[ebx], esi
		pop	esi
		pop	ebx
		pop	ebp
		retn
sub_10006594	endp


; =============== S U B	R O U T	I N E =======================================


sub_100065E2	proc near		; DATA XREF: sub_100078E3+8Fo

arg_4		= dword	ptr  8

		cmp	[esp+arg_4], 0
		jz	short loc_100065F3
		push	[esp+arg_4]
		call	sub_10006662
		pop	ecx

loc_100065F3:				; CODE XREF: sub_100065E2+5j
		xor	eax, eax
		retn
sub_100065E2	endp


; =============== S U B	R O U T	I N E =======================================


sub_100065F6	proc near		; DATA XREF: sub_100078E3+81o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebx
		mov	ebx, [esp+4+arg_C]
		push	esi
		push	edi
		xor	edi, edi
		push	10h
		mov	[ebx], edi
		call	PORT_Alloc_Util
		mov	esi, eax
		pop	ecx
		test	esi, esi
		jnz	short loc_10006614
		push	2
		pop	edi
		jmp	short loc_10006656
; ---------------------------------------------------------------------------

loc_10006614:				; CODE XREF: sub_100065F6+17j
		push	28h
		call	PORT_Alloc_Util
		mov	[esi], eax
		pop	ecx
		test	eax, eax
		jnz	short loc_10006627
		push	2
		pop	edi
		jmp	short loc_1000664F
; ---------------------------------------------------------------------------

loc_10006627:				; CODE XREF: sub_100065F6+2Aj
		push	[esp+0Ch+arg_8]
		mov	[esi+8], edi
		push	[esp+10h+arg_4]
		mov	[esi+4], edi
		push	esi
		push	[esp+18h+arg_0]
		mov	dword ptr [esi+0Ch], 0Ah
		call	sub_10006FC7
		mov	edi, eax
		add	esp, 10h
		test	edi, edi
		jz	short loc_1000665A

loc_1000664F:				; CODE XREF: sub_100065F6+2Fj
		push	esi
		call	sub_10006662
		pop	ecx

loc_10006656:				; CODE XREF: sub_100065F6+1Cj
		mov	eax, edi
		jmp	short loc_1000665E
; ---------------------------------------------------------------------------

loc_1000665A:				; CODE XREF: sub_100065F6+57j
		mov	[ebx], esi
		xor	eax, eax

loc_1000665E:				; CODE XREF: sub_100065F6+62j
		pop	edi
		pop	esi
		pop	ebx
		retn
sub_100065F6	endp


; =============== S U B	R O U T	I N E =======================================


sub_10006662	proc near		; CODE XREF: sub_100065E2+Bp
					; sub_100065F6+5Ap

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		cmp	dword ptr [esi], 0
		jz	short loc_10006674
		push	dword ptr [esi]
		call	PORT_Free_Util
		pop	ecx

loc_10006674:				; CODE XREF: sub_10006662+8j
		push	esi
		call	PORT_Free_Util
		pop	ecx
		pop	esi
		retn
sub_10006662	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000667D	proc near		; CODE XREF: sub_1000676D+40p
					; sub_100067BB+120p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_0]
		cmp	dword ptr [esi], 0
		jz	short loc_100066B7
		mov	eax, [esi+0Ch]
		cmp	[esi+4], eax
		jl	short loc_100066A8
		add	eax, 0Ah
		mov	[esi+0Ch], eax
		shl	eax, 2
		push	eax
		push	dword ptr [esi]
		call	PORT_Realloc_Util
		mov	[esi], eax
		pop	ecx
		pop	ecx
		test	eax, eax
		jz	short loc_100066B7

loc_100066A8:				; CODE XREF: sub_1000667D+10j
		mov	edx, [esi+4]
		mov	ecx, [esi]
		mov	eax, [esp+4+arg_4]
		mov	[ecx+edx*4], eax
		inc	dword ptr [esi+4]

loc_100066B7:				; CODE XREF: sub_1000667D+8j
					; sub_1000667D+29j
		pop	esi
		retn
sub_1000667D	endp


; =============== S U B	R O U T	I N E =======================================


sub_100066B9	proc near		; CODE XREF: sub_1000675D+8p
					; DATA XREF: sub_100069FA+B7o ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	edi
		mov	edi, [esp+4+arg_0]
		test	edi, edi
		jnz	short loc_100066C6
		xor	eax, eax
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_100066C6:				; CODE XREF: sub_100066B9+7j
		push	esi
		mov	esi, [esp+8+arg_4]
		cmp	dword ptr [esi+0Ch], 0
		jz	short loc_10006740
		cmp	dword ptr [esi+1Ch], 0
		jz	short loc_1000671D
		test	byte ptr [esi+18h], 1
		jz	short loc_100066FA
		push	dword ptr [esi+14h]
		lea	eax, [edi+54h]
		push	dword ptr [esi+10h]
		push	38000000h
		push	eax
		push	dword ptr [esi]
		call	sub_1000518B
		add	esp, 14h
		test	eax, eax
		jz	short loc_10006758

loc_100066FA:				; CODE XREF: sub_100066B9+22j
		test	byte ptr [esi+18h], 2
		jz	short loc_1000671D
		push	dword ptr [esi+14h]
		lea	eax, [edi+54h]
		push	dword ptr [esi+10h]
		push	20000000h
		push	eax
		push	dword ptr [esi]
		call	sub_1000518B
		add	esp, 14h
		test	eax, eax
		jz	short loc_10006758

loc_1000671D:				; CODE XREF: sub_100066B9+1Cj
					; sub_100066B9+45j
		mov	eax, [esi+8]
		cmp	[esi+4], eax
		jl	short loc_10006745
		add	eax, 0Ah
		mov	[esi+8], eax
		shl	eax, 2
		push	eax
		push	dword ptr [esi+0Ch]
		call	PORT_Realloc_Util
		mov	[esi+0Ch], eax
		pop	ecx
		pop	ecx
		test	eax, eax
		jnz	short loc_10006745

loc_10006740:				; CODE XREF: sub_100066B9+16j
		or	eax, 0FFFFFFFFh
		jmp	short loc_1000675A
; ---------------------------------------------------------------------------

loc_10006745:				; CODE XREF: sub_100066B9+6Aj
					; sub_100066B9+85j
		push	edi
		call	sub_1000C30C
		mov	edx, [esi+4]
		pop	ecx
		mov	ecx, [esi+0Ch]
		mov	[ecx+edx*4], eax
		inc	dword ptr [esi+4]

loc_10006758:				; CODE XREF: sub_100066B9+3Fj
					; sub_100066B9+62j
		xor	eax, eax

loc_1000675A:				; CODE XREF: sub_100066B9+8Aj
		pop	esi
		pop	edi
		retn
sub_100066B9	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000675D	proc near		; DATA XREF: sub_100069FA+218o

arg_0		= dword	ptr  4
arg_8		= dword	ptr  0Ch

		push	[esp+arg_8]
		push	[esp+4+arg_0]
		call	sub_100066B9
		pop	ecx
		pop	ecx
		retn
sub_1000675D	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000676D	proc near		; DATA XREF: sub_10006CBE+62o

arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebx
		push	esi
		mov	esi, [esp+8+arg_C]
		xor	ebx, ebx
		cmp	[esp+8+arg_8], 4
		push	edi
		setnz	bl
		push	dword ptr [esi+0Ch]
		mov	edi, [esi]
		add	ebx, 28000000h
		push	dword ptr [esi+8]
		push	ebx
		push	[esp+18h+arg_4]
		push	edi
		call	sub_1000518B
		add	esp, 14h
		test	eax, eax
		jz	short loc_100067B5
		push	ebx		; Dst
		push	[esp+10h+arg_4]	; int
		push	edi		; int
		call	sub_10007F0A
		push	eax
		push	dword ptr [esi+4]
		call	sub_1000667D
		add	esp, 14h

loc_100067B5:				; CODE XREF: sub_1000676D+2Fj
		pop	edi
		pop	esi
		xor	eax, eax
		pop	ebx
		retn
sub_1000676D	endp


; =============== S U B	R O U T	I N E =======================================


sub_100067BB	proc near		; DATA XREF: sub_10006D5B+11Co

var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= byte ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= byte ptr -18h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_8		= dword	ptr  0Ch

		sub	esp, 34h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+34h+var_4], eax
		and	[esp+34h+var_34], 0
		push	ebx
		push	ebp
		mov	ebp, [esp+3Ch+arg_0]
		push	esi
		mov	esi, [esp+40h+arg_8]
		push	edi
		mov	ecx, [ebp+0]
		mov	edx, [ebp+4]
		cmp	dword ptr [esi+1Ch], 0
		mov	edi, [esi]
		mov	ebx, [esi+18h]
		mov	[esp+44h+var_30], ecx
		mov	[esp+44h+var_2C], edx
		jnz	loc_1000692E
		mov	eax, [esi+0Ch]
		test	eax, eax
		jz	loc_1000692E
		cmp	dword ptr [eax+4], 0
		jz	loc_1000692E
		lea	ecx, [esp+44h+var_18]
		mov	[esp+44h+var_1C], 14h
		mov	[esp+44h+var_20], ecx
		cmp	dword ptr [eax+8], 0
		mov	ecx, [ebp+0]
		jnz	short loc_1000686C
		push	edi
		lea	eax, [esp+48h+var_34]
		push	eax
		push	dword ptr [esi+4]
		call	sub_10001F2D
		mov	edx, eax
		add	esp, 0Ch
		test	edx, edx
		jz	loc_100069E5
		push	edx
		call	sub_10006559
		neg	eax
		push	0
		sbb	eax, eax
		and	eax, 10h
		add	eax, 0FFFFFFBFh
		and	ebx, eax
		pop	eax
		test	bl, 70h
		push	edx
		setnz	al
		mov	[esp+4Ch+var_28], eax
		call	sub_10008EC8
		mov	eax, [esp+4Ch+var_28]
		pop	ecx
		pop	ecx
		jmp	short loc_100068BA
; ---------------------------------------------------------------------------

loc_1000686C:				; CODE XREF: sub_100067BB+67j
		push	edx
		push	ecx
		lea	eax, [esp+4Ch+var_18]
		push	eax
		call	sub_1000E0A0
		lea	eax, [esp+50h+var_24]
		push	eax
		push	dword ptr [esi+0Ch]
		call	SECITEM_ItemsAreEqual_Util
		add	esp, 14h
		test	eax, eax
		jnz	short loc_100068C2
		mov	ecx, [ebp+0]
		cmp	[ecx], al
		jnz	loc_100069E5
		mov	eax, [ebp+4]
		dec	eax
		push	eax
		lea	eax, [ecx+1]
		push	eax
		lea	eax, [esp+4Ch+var_18]
		push	eax
		call	sub_1000E0A0
		lea	eax, [esp+50h+var_24]
		push	eax
		push	dword ptr [esi+0Ch]
		call	SECITEM_ItemsAreEqual_Util
		add	esp, 14h

loc_100068BA:				; CODE XREF: sub_100067BB+AFj
		test	eax, eax
		jz	loc_100069E5

loc_100068C2:				; CODE XREF: sub_100067BB+CFj
		test	bl, 10h
		jz	short loc_100068E3
		push	8000000h	; Dst
		lea	eax, [esp+48h+var_34]
		push	eax		; int
		push	edi		; int
		call	sub_10007F0A
		push	eax
		push	dword ptr [esi+8]
		call	sub_1000667D
		add	esp, 14h

loc_100068E3:				; CODE XREF: sub_100067BB+10Aj
		test	bl, 20h
		jz	short loc_10006904
		push	10000000h	; Dst
		lea	eax, [esp+48h+var_34]
		push	eax		; int
		push	edi		; int
		call	sub_10007F0A
		push	eax
		push	dword ptr [esi+8]
		call	sub_1000667D
		add	esp, 14h

loc_10006904:				; CODE XREF: sub_100067BB+12Bj
		test	bl, 40h
		jz	loc_100069E5
		push	18000000h	; Dst
		lea	eax, [esp+48h+var_34]
		push	eax		; int
		push	edi		; int
		call	sub_10007F0A
		push	eax
		push	dword ptr [esi+8]
		call	sub_1000667D
		add	esp, 14h
		jmp	loc_100069E5
; ---------------------------------------------------------------------------

loc_1000692E:				; CODE XREF: sub_100067BB+35j
					; sub_100067BB+40j ...
		push	edi
		lea	eax, [esp+48h+var_34]
		push	eax
		push	dword ptr [esi+4]
		call	sub_10001F2D
		mov	edi, eax
		add	esp, 0Ch
		test	edi, edi
		jz	loc_100069E5
		push	edi
		call	sub_10006559
		pop	ecx
		test	eax, eax
		jz	short loc_10006964
		test	bl, 40h
		jz	loc_100069DE
		mov	ebx, 18000000h
		jmp	short loc_100069AB
; ---------------------------------------------------------------------------

loc_10006964:				; CODE XREF: sub_100067BB+197j
		test	bl, 10h
		jz	short loc_100069A1
		push	dword ptr [esi+14h]
		mov	ebp, 8000000h
		lea	eax, [esp+48h+var_34]
		push	dword ptr [esi+10h]
		push	ebp
		push	eax
		push	dword ptr [esi]
		call	sub_1000518B
		add	esp, 14h
		test	eax, eax
		jz	short loc_100069A1
		push	ebp		; Dst
		lea	eax, [esp+48h+var_34]
		push	eax		; int
		push	dword ptr [esi]	; int
		call	sub_10007F0A
		push	eax
		push	dword ptr [esi+8]
		call	sub_1000667D
		add	esp, 14h

loc_100069A1:				; CODE XREF: sub_100067BB+1ACj
					; sub_100067BB+1CBj
		test	bl, 20h
		jz	short loc_100069DE
		mov	ebx, 10000000h

loc_100069AB:				; CODE XREF: sub_100067BB+1A7j
		push	dword ptr [esi+14h]
		lea	eax, [esp+48h+var_34]
		push	dword ptr [esi+10h]
		push	ebx
		push	eax
		push	dword ptr [esi]
		call	sub_1000518B
		add	esp, 14h
		test	eax, eax
		jz	short loc_100069DE
		push	ebx		; Dst
		lea	eax, [esp+48h+var_34]
		push	eax		; int
		push	dword ptr [esi]	; int
		call	sub_10007F0A
		push	eax
		push	dword ptr [esi+8]
		call	sub_1000667D
		add	esp, 14h

loc_100069DE:				; CODE XREF: sub_100067BB+19Cj
					; sub_100067BB+1E9j ...
		push	edi
		call	sub_10008EC8
		pop	ecx

loc_100069E5:				; CODE XREF: sub_100067BB+7Ej
					; sub_100067BB+D6j ...
		mov	ecx, [esp+44h+var_4]
		xor	eax, eax
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 34h
		retn
sub_100067BB	endp


; =============== S U B	R O U T	I N E =======================================


sub_100069FA	proc near		; CODE XREF: sub_10006FC7+36Ep

Str		= dword	ptr -28h
Dst		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch
arg_1C		= dword	ptr  20h
arg_20		= dword	ptr  24h
arg_24		= dword	ptr  28h

		sub	esp, 28h
		push	ebp
		mov	ebp, [esp+2Ch+arg_0]
		push	edi
		push	ebp
		call	sub_100078B4
		mov	edi, eax
		pop	ecx
		test	edi, edi
		jz	loc_10006CB8
		mov	ecx, [esp+30h+arg_20]
		mov	eax, [esp+30h+arg_24]
		mov	[esp+30h+var_10], ecx
		mov	ecx, [esp+30h+arg_4]
		push	ebx
		xor	ebx, ebx
		mov	[esp+34h+var_C], eax
		mov	eax, [esp+34h+arg_18]
		push	esi
		mov	[esp+38h+var_20], ebp
		mov	[esp+38h+var_18], ebx
		mov	[esp+38h+var_14], ebx
		mov	[esp+38h+var_1C], ebx
		mov	[esp+38h+var_8], eax
		mov	[esp+38h+var_4], ebx
		cmp	[ecx+4], ebx
		jz	short loc_10006A64
		push	ecx
		push	edi
		call	sub_1000C339
		push	eax		; Dst
		lea	eax, [esp+44h+var_20]
		push	eax		; int
		call	sub_10006F72
		jmp	loc_10006C1D
; ---------------------------------------------------------------------------

loc_10006A64:				; CODE XREF: sub_100069FA+51j
		mov	esi, [esp+38h+arg_8]
		cmp	[esi+4], ebx
		jz	short loc_10006ACB
		mov	eax, [esi+8]
		inc	eax
		push	eax
		call	PORT_Alloc_Util
		mov	[esp+3Ch+Str], eax
		pop	ecx
		test	eax, eax
		jz	loc_10006CB6
		push	dword ptr [esi+8] ; Size
		push	dword ptr [esi+4] ; Src
		push	eax		; Dst
		call	memcpy
		mov	ecx, [esi+8]
		mov	esi, [esp+44h+Str]
		push	esi		; Str
		push	edi		; int
		mov	[esi+ecx], bl
		call	sub_1000C753
		push	eax
		lea	eax, [esp+50h+var_20]
		push	eax
		call	sub_10006575
		lea	eax, [esp+54h+var_20]
		push	eax		; int
		push	offset sub_100066B9 ; int
		push	esi		; Str
		push	edi		; int
		call	sub_1000CAE6
		push	esi
		call	PORT_Free_Util
		add	esp, 30h
		jmp	loc_10006C20
; ---------------------------------------------------------------------------

loc_10006ACB:				; CODE XREF: sub_100069FA+71j
		mov	esi, [esp+38h+arg_C]
		cmp	[esi+4], ebx
		jz	short loc_10006AFF
		push	esi
		push	edi
		call	sub_1000C78B
		push	eax
		lea	eax, [esp+44h+var_20]
		push	eax
		call	sub_10006575
		lea	eax, [esp+48h+var_20]
		push	eax
		push	offset sub_100066B9
		push	esi
		push	edi
		call	sub_1000CB56
		add	esp, 20h
		jmp	loc_10006C20
; ---------------------------------------------------------------------------

loc_10006AFF:				; CODE XREF: sub_100069FA+D8j
		mov	esi, [esp+38h+arg_10]
		cmp	[esi+4], ebx
		jz	short loc_10006B6C
		cmp	[esi+10h], ebx
		jz	short loc_10006B6C
		test	al, 1
		jz	short loc_10006B2A
		push	esi
		push	edi
		call	sub_1000C38A
		push	eax		; Dst
		lea	eax, [esp+44h+var_20]
		push	eax		; int
		call	sub_10006F72
		mov	eax, [esp+48h+arg_18]
		add	esp, 10h

loc_10006B2A:				; CODE XREF: sub_100069FA+115j
		test	al, 2
		jz	loc_10006C24
		push	esi
		push	edi
		call	sub_1000C535
		mov	esi, eax
		pop	ecx
		pop	ecx
		test	esi, esi
		jz	loc_10006C20
		push	20000000h	; Dst
		lea	ecx, [esi+8]
		push	ecx		; int
		push	ebp		; int
		call	sub_10007F0A
		push	eax
		push	[esp+48h+arg_1C]
		call	sub_1000667D
		push	esi		; Dst
		call	sub_1000C2AB
		add	esp, 18h
		jmp	loc_10006C20
; ---------------------------------------------------------------------------

loc_10006B6C:				; CODE XREF: sub_100069FA+10Cj
					; sub_100069FA+111j
		mov	esi, [esp+38h+arg_14]
		cmp	[esi+4], ebx
		jz	short loc_10006BF2
		mov	eax, [esi+8]
		inc	eax
		push	eax
		call	PORT_Alloc_Util
		mov	[esp+3Ch+Str], eax
		pop	ecx
		test	eax, eax
		jz	loc_10006CB6
		push	dword ptr [esi+8] ; Size
		push	dword ptr [esi+4] ; Src
		push	eax		; Dst
		call	memcpy
		mov	eax, [esp+44h+Str]
		mov	ecx, [esi+8]
		push	eax		; Str
		push	edi		; int
		mov	[eax+ecx], bl
		call	sub_1000C924
		add	esp, 14h
		mov	[esp+38h+Dst], eax
		test	eax, eax
		jz	short loc_10006BE6
		lea	esi, [eax+14h]
		push	esi
		push	edi
		call	sub_1000C78B
		push	eax
		lea	eax, [esp+44h+var_20]
		push	eax
		call	sub_10006575
		lea	eax, [esp+48h+var_20]
		push	eax
		push	offset sub_100066B9
		push	esi
		push	edi
		call	sub_1000CB56
		push	[esp+58h+Dst]	; Dst
		call	sub_1000C1A8
		add	esp, 24h

loc_10006BE6:				; CODE XREF: sub_100069FA+1B8j
		push	[esp+38h+Str]
		call	PORT_Free_Util
		pop	ecx
		jmp	short loc_10006C20
; ---------------------------------------------------------------------------

loc_10006BF2:				; CODE XREF: sub_100069FA+179j
		push	28h
		mov	[esp+3Ch+var_4], 1
		mov	[esp+3Ch+var_18], 0Ah
		call	PORT_Alloc_Util
		mov	[esp+3Ch+var_14], eax
		lea	eax, [esp+3Ch+var_20]
		push	eax
		push	offset sub_1000675D
		push	edi
		call	sub_1000CAA2

loc_10006C1D:				; CODE XREF: sub_100069FA+65j
		add	esp, 10h

loc_10006C20:				; CODE XREF: sub_100069FA+CCj
					; sub_100069FA+100j ...
		mov	eax, [esp+38h+arg_18]

loc_10006C24:				; CODE XREF: sub_100069FA+132j
		cmp	[esp+38h+var_1C], ebx
		jle	short loc_10006CA5
		mov	ecx, eax
		and	ecx, 1
		and	eax, 2
		mov	[esp+38h+Dst], ecx
		mov	esi, eax
		mov	[esp+38h+arg_18], eax

loc_10006C3C:				; CODE XREF: sub_100069FA+2A9j
		mov	eax, [esp+38h+var_14]
		mov	edi, [eax+ebx*4]
		test	ecx, ecx
		jz	short loc_10006C63
		push	38000000h	; Dst
		lea	eax, [edi+54h]
		push	eax		; int
		push	ebp		; int
		call	sub_10007F0A
		push	eax
		push	[esp+48h+arg_1C]
		call	sub_1000667D
		add	esp, 14h

loc_10006C63:				; CODE XREF: sub_100069FA+24Bj
		test	esi, esi
		jz	short loc_10006C93
		push	dword ptr [edi+90h]
		call	sub_1000CEC3
		pop	ecx
		test	eax, eax
		jz	short loc_10006C93
		push	20000000h	; Dst
		lea	eax, [edi+54h]
		push	eax		; int
		push	ebp		; int
		call	sub_10007F0A
		push	eax
		push	[esp+48h+arg_1C]
		call	sub_1000667D
		add	esp, 14h

loc_10006C93:				; CODE XREF: sub_100069FA+26Bj
					; sub_100069FA+27Bj
		push	edi		; Dst
		call	sub_1000C19A
		inc	ebx
		pop	ecx
		mov	ecx, [esp+38h+Dst]
		cmp	ebx, [esp+38h+var_1C]
		jl	short loc_10006C3C

loc_10006CA5:				; CODE XREF: sub_100069FA+22Ej
		cmp	[esp+38h+var_14], 0
		jz	short loc_10006CB6
		push	[esp+38h+var_14]
		call	PORT_Free_Util
		pop	ecx

loc_10006CB6:				; CODE XREF: sub_100069FA+84j
					; sub_100069FA+18Cj ...
		pop	esi
		pop	ebx

loc_10006CB8:				; CODE XREF: sub_100069FA+14j
		pop	edi
		pop	ebp
		add	esp, 28h
		retn
sub_100069FA	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10006CBE	proc near		; CODE XREF: sub_10006FC7+3B7p

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch
arg_18		= dword	ptr  20h

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	ebx
		mov	ebx, [ebp+arg_0]
		push	esi
		push	ebx
		call	sub_100078B4
		mov	esi, eax
		pop	ecx
		test	esi, esi
		jz	short loc_10006D55
		push	edi
		mov	edi, [ebp+arg_4]
		cmp	dword ptr [edi+4], 0
		jz	short loc_10006D1D
		push	[ebp+arg_8]
		push	edi
		push	esi
		call	sub_1000C4D5
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		jz	short loc_10006D54
		xor	ecx, ecx
		cmp	[ebp+arg_8], ecx
		setnz	cl
		add	ecx, 28000000h
		push	ecx		; Dst
		push	edi		; int
		push	ebx		; int
		call	sub_10007F0A
		push	eax
		push	[ebp+arg_10]
		call	sub_1000667D
		push	esi		; Dst
		call	sub_1000C1A8
		add	esp, 18h
		jmp	short loc_10006D54
; ---------------------------------------------------------------------------

loc_10006D1D:				; CODE XREF: sub_10006CBE+20j
		mov	eax, [ebp+arg_10]
		mov	edi, offset sub_1000676D
		mov	[ebp+var_C], eax
		mov	eax, [ebp+arg_14]
		mov	[ebp+var_8], eax
		mov	eax, [ebp+arg_18]
		mov	[ebp+var_4], eax
		lea	eax, [ebp+var_10]
		push	eax
		push	edi
		push	4
		push	esi
		mov	[ebp+var_10], ebx
		call	sub_1000CA09
		lea	eax, [ebp+var_10]
		push	eax
		push	edi
		push	5
		push	esi
		call	sub_1000CA09
		add	esp, 20h

loc_10006D54:				; CODE XREF: sub_10006CBE+33j
					; sub_10006CBE+5Dj
		pop	edi

loc_10006D55:				; CODE XREF: sub_10006CBE+16j
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
sub_10006CBE	endp


; =============== S U B	R O U T	I N E =======================================


sub_10006D5B	proc near		; CODE XREF: sub_10006FC7+395p

var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch

		sub	esp, 24h
		push	ebx
		push	ebp
		push	edi
		mov	edi, [esp+30h+arg_0]
		xor	ebx, ebx
		push	edi
		call	sub_100078BD
		mov	ebp, eax
		pop	ecx
		test	ebp, ebp
		jz	loc_10006E92
		push	esi
		mov	esi, [esp+34h+arg_4]
		cmp	[esi+4], ebx
		jz	loc_10006E4A
		push	edi
		push	esi
		push	ebp
		call	sub_10001F2D
		add	esp, 0Ch
		mov	[esp+34h+var_24], eax
		test	eax, eax
		jz	loc_10006E3A
		mov	edx, [esp+34h+arg_8]
		test	dl, 40h
		jz	short loc_10006DD3
		push	eax
		call	sub_10006559
		pop	ecx
		test	eax, eax
		jz	short loc_10006DCF
		push	18000000h	; Dst
		push	esi		; int
		push	edi		; int
		call	sub_10007F0A
		push	eax
		push	[esp+44h+arg_C]
		call	sub_1000667D
		mov	edx, [esp+48h+arg_8]
		add	esp, 14h
		inc	ebx

loc_10006DCF:				; CODE XREF: sub_10006D5B+54j
		mov	eax, [esp+34h+var_24]

loc_10006DD3:				; CODE XREF: sub_10006D5B+49j
		test	dl, 10h
		jz	short loc_10006DFF
		push	eax
		call	sub_10006559
		pop	ecx
		test	eax, eax
		jnz	short loc_10006DFF
		push	8000000h	; Dst
		push	esi		; int
		push	edi		; int
		call	sub_10007F0A
		push	eax
		push	[esp+44h+arg_C]
		call	sub_1000667D
		xor	ebx, ebx
		add	esp, 14h
		inc	ebx

loc_10006DFF:				; CODE XREF: sub_10006D5B+7Bj
					; sub_10006D5B+86j
		test	byte ptr [esp+34h+arg_8], 20h
		jz	short loc_10006E30
		push	[esp+34h+var_24]
		call	sub_10006559
		pop	ecx
		test	eax, eax
		jnz	short loc_10006E30
		push	10000000h	; Dst
		push	esi		; int
		push	edi		; int
		call	sub_10007F0A
		push	eax
		push	[esp+44h+arg_C]
		call	sub_1000667D
		xor	ebx, ebx
		add	esp, 14h
		inc	ebx

loc_10006E30:				; CODE XREF: sub_10006D5B+A9j
					; sub_10006D5B+B7j
		push	[esp+34h+var_24]
		call	sub_10008EC8
		pop	ecx

loc_10006E3A:				; CODE XREF: sub_10006D5B+3Cj
		cmp	dword ptr [ebp+0Ch], 3
		jnz	short loc_10006E91
		cmp	dword ptr [esi+8], 14h
		jnz	short loc_10006E91
		test	ebx, ebx
		jnz	short loc_10006E91

loc_10006E4A:				; CODE XREF: sub_10006D5B+25j
		mov	eax, [esp+34h+arg_C]
		mov	[esp+34h+var_18], eax
		mov	eax, [esp+34h+arg_14]
		mov	[esp+34h+var_10], eax
		mov	eax, [esp+34h+arg_18]
		mov	[esp+34h+var_C], eax
		mov	eax, [esp+34h+arg_8]
		mov	[esp+34h+var_8], eax
		mov	eax, [esp+34h+arg_10]
		mov	[esp+34h+var_4], eax
		lea	eax, [esp+34h+var_20]
		push	eax
		push	offset sub_100067BB
		push	ebp
		mov	[esp+40h+var_20], edi
		mov	[esp+40h+var_1C], ebp
		mov	[esp+40h+var_14], esi
		call	sub_10002638
		add	esp, 0Ch

loc_10006E91:				; CODE XREF: sub_10006D5B+E3j
					; sub_10006D5B+E9j ...
		pop	esi

loc_10006E92:				; CODE XREF: sub_10006D5B+17j
		pop	edi
		pop	ebp
		pop	ebx
		add	esp, 24h
		retn
sub_10006D5B	endp


; =============== S U B	R O U T	I N E =======================================


sub_10006E99	proc near		; CODE XREF: sub_10006FC7+3D3p

Dst		= dword	ptr -24h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		sub	esp, 10h
		push	ebx
		push	ebp
		mov	ebp, [esp+18h+arg_0]
		push	esi
		push	ebp
		call	sub_100078B4
		mov	ebx, eax
		pop	ecx
		test	ebx, ebx
		jz	loc_10006F6B
		push	edi
		mov	edi, [esp+20h+arg_4]
		cmp	dword ptr [edi+4], 0
		jz	short loc_10006F39
		mov	eax, [edi+8]
		inc	eax
		push	eax
		call	PORT_Alloc_Util
		mov	esi, eax
		pop	ecx
		test	esi, esi
		jz	loc_10006F6A
		push	dword ptr [edi+8] ; Size
		push	dword ptr [edi+4] ; Src
		push	esi		; Dst
		call	memcpy
		mov	ecx, [edi+8]
		push	esi		; Str
		push	ebx		; int
		mov	byte ptr [esi+ecx], 0
		call	sub_1000C924
		mov	edi, eax
		add	esp, 14h
		test	edi, edi
		jz	short loc_10006F30
		push	esi		; Str
		mov	[esp+24h+var_C], esi
		call	strlen
		and	[esp+24h+var_10], 0
		inc	eax
		mov	[esp+24h+var_8], eax
		lea	eax, [esp+24h+var_10]
		mov	[esp+24h+Dst], 30000000h ; Dst
		push	eax		; int
		push	ebp		; int
		call	sub_10007F0A
		push	eax
		push	[esp+30h+arg_8]
		call	sub_1000667D
		push	edi		; Dst
		call	sub_1000C1A8
		add	esp, 18h

loc_10006F30:				; CODE XREF: sub_10006E99+5Cj
		push	esi
		call	PORT_Free_Util
		pop	ecx
		jmp	short loc_10006F6A
; ---------------------------------------------------------------------------

loc_10006F39:				; CODE XREF: sub_10006E99+24j
		mov	eax, [esp+20h+arg_8]
		mov	[esp+20h+var_C], eax
		mov	eax, [esp+20h+arg_C]
		mov	[esp+20h+var_8], eax
		mov	eax, [esp+20h+arg_10]
		mov	[esp+20h+var_4], eax
		lea	eax, [esp+20h+var_10]
		push	eax
		push	offset sub_100073AC
		push	6
		push	ebx
		mov	[esp+30h+var_10], ebp
		call	sub_1000CA09
		add	esp, 10h

loc_10006F6A:				; CODE XREF: sub_10006E99+35j
					; sub_10006E99+9Ej
		pop	edi

loc_10006F6B:				; CODE XREF: sub_10006E99+15j
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 10h
		retn
sub_10006E99	endp


; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10006F72(int,	void *Dst)
sub_10006F72	proc near		; CODE XREF: sub_100069FA+60p
					; sub_100069FA+124p

arg_0		= dword	ptr  4
Dst		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+Dst]
		test	esi, esi
		jz	short loc_10006FC5
		push	edi
		mov	edi, [esp+8+arg_0]
		cmp	dword ptr [edi+1Ch], 0
		jz	short loc_10006FA3
		push	dword ptr [edi+14h]
		lea	eax, [esi+54h]
		push	dword ptr [edi+10h]
		push	38000000h
		push	eax
		push	dword ptr [edi]
		call	sub_1000518B
		add	esp, 14h
		test	eax, eax
		jz	short loc_10006FB2

loc_10006FA3:				; CODE XREF: sub_10006F72+12j
		push	4
		call	PORT_Alloc_Util
		mov	[edi+0Ch], eax
		pop	ecx
		test	eax, eax
		jnz	short loc_10006FBB

loc_10006FB2:				; CODE XREF: sub_10006F72+2Fj
		push	esi		; Dst
		call	sub_1000C19A
		pop	ecx
		jmp	short loc_10006FC4
; ---------------------------------------------------------------------------

loc_10006FBB:				; CODE XREF: sub_10006F72+3Ej
		mov	[eax], esi
		mov	dword ptr [edi+4], 1

loc_10006FC4:				; CODE XREF: sub_10006F72+47j
		pop	edi

loc_10006FC5:				; CODE XREF: sub_10006F72+7j
		pop	esi
		retn
sub_10006F72	endp


; =============== S U B	R O U T	I N E =======================================


sub_10006FC7	proc near		; CODE XREF: sub_100065F6+4Bp

var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= byte ptr -30h
var_24		= byte ptr -24h
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 7Ch
		push	ebx
		push	ebp
		xor	ebp, ebp
		push	esi
		push	edi
		mov	edi, [esp+8Ch+arg_0]
		mov	eax, ebp
		push	edi
		mov	[esp+90h+var_78], eax
		mov	[esp+90h+var_48], ebp
		mov	[esp+90h+var_44], ebp
		mov	[esp+90h+var_40], ebp
		mov	[esp+90h+var_60], ebp
		mov	[esp+90h+var_5C], ebp
		mov	[esp+90h+var_58], ebp
		mov	[esp+90h+var_6C], ebp
		mov	[esp+90h+var_68], ebp
		mov	[esp+90h+var_64], ebp
		mov	[esp+90h+var_54], ebp
		mov	[esp+90h+var_50], ebp
		mov	[esp+90h+var_4C], ebp
		mov	[esp+90h+var_3C], ebp
		mov	[esp+90h+var_38], ebp
		mov	[esp+90h+var_34], ebp
		mov	[esp+90h+var_18], ebp
		mov	[esp+90h+var_14], ebp
		mov	[esp+90h+var_10], ebp
		mov	[esp+90h+var_C], ebp
		mov	[esp+90h+var_8], ebp
		mov	[esp+90h+var_4], ebp
		call	sub_100078B4
		pop	ecx
		mov	ecx, ebp
		test	eax, eax
		jnz	short loc_10007052
		push	50h
		mov	[esp+90h+var_7C], ecx
		jmp	short loc_10007058
; ---------------------------------------------------------------------------

loc_10007052:				; CODE XREF: sub_10006FC7+81j
		push	2Fh
		mov	[esp+90h+var_7C], ebp

loc_10007058:				; CODE XREF: sub_10006FC7+89j
		mov	esi, [esp+90h+arg_8]
		mov	ebp, [esp+90h+arg_C]
		add	esi, 8
		pop	ebx

loc_1000706A:				; CODE XREF: sub_10006FC7+335j
		cmp	ecx, ebp
		jge	loc_10007302
		lea	ecx, [esi-8]
		mov	eax, [ecx]
		cmp	eax, 106h
		ja	loc_10007215
		jz	loc_10007276
		cmp	eax, 82h
		ja	loc_100071C2
		jz	loc_100071B6
		sub	eax, 0
		jz	loc_10007137
		dec	eax
		jz	loc_1000712A
		dec	eax
		jz	short loc_1000710D
		dec	eax
		jz	short loc_10007104
		sub	eax, 0Eh
		jz	short loc_100070F8
		sub	eax, 6Fh
		jz	short loc_100070C8
		dec	eax
		jnz	short loc_100070E1
		lea	ecx, [esp+8Ch+var_18]

loc_100070C0:				; CODE XREF: sub_10006FC7+1F6j
		and	ebx, 3
		jmp	loc_100072E3
; ---------------------------------------------------------------------------

loc_100070C8:				; CODE XREF: sub_10006FC7+F0j
		lea	eax, [esp+8Ch+var_74]
		push	eax
		push	1
		push	ecx
		push	80h
		call	sub_10007C51
		add	esp, 10h
		test	eax, eax
		jz	short loc_100070E8

loc_100070E1:				; CODE XREF: sub_10006FC7+F3j
					; sub_10006FC7+12Fj ...
		xor	ebx, ebx
		jmp	loc_100072EE
; ---------------------------------------------------------------------------

loc_100070E8:				; CODE XREF: sub_10006FC7+118j
		and	ebx, 1
		cmp	[esp+8Ch+var_74], 0

loc_100070F0:				; CODE XREF: sub_10006FC7+16Ej
		jz	loc_100072EE
		jmp	short loc_100070E1
; ---------------------------------------------------------------------------

loc_100070F8:				; CODE XREF: sub_10006FC7+EBj
		lea	ecx, [esp+8Ch+var_48]
		and	ebx, 0Dh
		jmp	loc_100072E3
; ---------------------------------------------------------------------------

loc_10007104:				; CODE XREF: sub_10006FC7+E6j
		lea	ecx, [esp+8Ch+var_6C]
		jmp	loc_100072E3
; ---------------------------------------------------------------------------

loc_1000710D:				; CODE XREF: sub_10006FC7+E3j
		cmp	dword ptr [esi], 1
		jnz	short loc_100070E1
		mov	eax, [esi-4]
		cmp	byte ptr [eax],	1
		jnz	short loc_10007122

loc_1000711A:				; CODE XREF: sub_10006FC7+231j
					; sub_10006FC7+25Aj ...
		and	ebx, 50h
		jmp	loc_100072EE
; ---------------------------------------------------------------------------

loc_10007122:				; CODE XREF: sub_10006FC7+151j
		and	ebx, 0FFFFFFAFh
		jmp	loc_100072EE
; ---------------------------------------------------------------------------

loc_1000712A:				; CODE XREF: sub_10006FC7+DCj
		cmp	dword ptr [esi], 1
		jnz	short loc_100070E1
		mov	eax, [esi-4]
		cmp	byte ptr [eax],	1
		jmp	short loc_100070F0
; ---------------------------------------------------------------------------

loc_10007137:				; CODE XREF: sub_10006FC7+D5j
		lea	eax, [esp+8Ch+var_70]
		push	eax
		push	1
		push	ecx
		push	0
		call	sub_10007C51
		add	esp, 10h
		test	eax, eax
		jnz	short loc_100070E1
		mov	eax, [esp+8Ch+var_70]
		cmp	eax, 1
		jz	short loc_100071AE
		cmp	eax, 2
		jz	short loc_100071A6
		cmp	eax, 3
		jz	short loc_1000719E
		cmp	eax, 4
		jz	short loc_10007196
		cmp	eax, 0CE534351h
		jz	short loc_1000718E
		cmp	eax, 0CE534352h
		jz	short loc_10007186
		cmp	eax, 0CE534353h
		jnz	loc_100070E1
		and	ebx, 2
		jmp	loc_100072EE
; ---------------------------------------------------------------------------

loc_10007186:				; CODE XREF: sub_10006FC7+1AAj
					; sub_10006FC7+2C7j
		and	ebx, 8
		jmp	loc_100072EE
; ---------------------------------------------------------------------------

loc_1000718E:				; CODE XREF: sub_10006FC7+1A3j
		and	ebx, 4
		jmp	loc_100072EE
; ---------------------------------------------------------------------------

loc_10007196:				; CODE XREF: sub_10006FC7+19Cj
		and	ebx, 40h
		jmp	loc_100072EE
; ---------------------------------------------------------------------------

loc_1000719E:				; CODE XREF: sub_10006FC7+197j
					; sub_10006FC7+27Bj
		and	ebx, 10h
		jmp	loc_100072EE
; ---------------------------------------------------------------------------

loc_100071A6:				; CODE XREF: sub_10006FC7+192j
					; sub_10006FC7+28Dj
		and	ebx, 20h
		jmp	loc_100072EE
; ---------------------------------------------------------------------------

loc_100071AE:				; CODE XREF: sub_10006FC7+18Dj
		and	ebx, 1
		jmp	loc_100072EE
; ---------------------------------------------------------------------------

loc_100071B6:				; CODE XREF: sub_10006FC7+CCj
		lea	ecx, [esp+8Ch+var_C]
		jmp	loc_100070C0
; ---------------------------------------------------------------------------

loc_100071C2:				; CODE XREF: sub_10006FC7+C6j
		sub	eax, 100h
		jz	loc_10007271
		dec	eax
		jz	short loc_10007209
		dec	eax
		jz	short loc_100071FD
		dec	eax
		jz	short loc_100071E3
		dec	eax
		jz	loc_10007276
		dec	eax
		jmp	loc_10007266
; ---------------------------------------------------------------------------

loc_100071E3:				; CODE XREF: sub_10006FC7+20Dj
		cmp	dword ptr [esi], 1
		jnz	loc_100070E1
		mov	eax, [esi-4]
		cmp	byte ptr [eax],	1
		jnz	loc_100070E1
		jmp	loc_1000711A
; ---------------------------------------------------------------------------

loc_100071FD:				; CODE XREF: sub_10006FC7+20Aj
		lea	ecx, [esp+8Ch+var_3C]
		and	ebx, 71h
		jmp	loc_100072E3
; ---------------------------------------------------------------------------

loc_10007209:				; CODE XREF: sub_10006FC7+207j
		lea	ecx, [esp+8Ch+var_60]
		and	ebx, 3Dh
		jmp	loc_100072E3
; ---------------------------------------------------------------------------

loc_10007215:				; CODE XREF: sub_10006FC7+B5j
		cmp	eax, 165h
		ja	short loc_1000727B
		cmp	eax, 164h
		jnb	loc_1000711A
		cmp	eax, 107h
		jb	loc_100070E1
		cmp	eax, 108h
		jbe	loc_1000711A
		cmp	eax, 109h
		jz	loc_1000719E
		cmp	eax, 10Ah
		jz	short loc_10007276
		cmp	eax, 10Bh
		jz	loc_100071A6
		cmp	eax, 10Ch
		jz	short loc_10007271
		cmp	eax, 162h

loc_10007266:				; CODE XREF: sub_10006FC7+217j
		jz	loc_1000711A
		jmp	loc_100070E1
; ---------------------------------------------------------------------------

loc_10007271:				; CODE XREF: sub_10006FC7+200j
					; sub_10006FC7+298j
		and	ebx, 70h
		jmp	short loc_100072EE
; ---------------------------------------------------------------------------

loc_10007276:				; CODE XREF: sub_10006FC7+BBj
					; sub_10006FC7+210j ...
		and	ebx, 60h
		jmp	short loc_100072EE
; ---------------------------------------------------------------------------

loc_1000727B:				; CODE XREF: sub_10006FC7+253j
		cmp	eax, 170h
		jz	short loc_100072EE
		cmp	eax, 0CE534352h
		jz	short loc_100072DC
		cmp	eax, 0CE534354h
		jz	loc_10007186
		cmp	eax, 0CE534358h
		jz	short loc_100072BF
		cmp	eax, 0CE5363B4h
		jz	short loc_100072B6
		cmp	eax, 0CE5363B5h
		jnz	loc_100070E1
		and	ebx, 2
		lea	ecx, [esp+8Ch+var_30]
		jmp	short loc_100072E3
; ---------------------------------------------------------------------------

loc_100072B6:				; CODE XREF: sub_10006FC7+2D9j
		and	ebx, 2
		lea	ecx, [esp+8Ch+var_24]
		jmp	short loc_100072E3
; ---------------------------------------------------------------------------

loc_100072BF:				; CODE XREF: sub_10006FC7+2D2j
		cmp	dword ptr [esi], 1
		jnz	loc_100070E1
		mov	eax, [esi-4]
		xor	ecx, ecx
		and	ebx, 4
		cmp	byte ptr [eax],	1
		setz	cl
		mov	[esp+8Ch+var_78], ecx
		jmp	short loc_100072EE
; ---------------------------------------------------------------------------

loc_100072DC:				; CODE XREF: sub_10006FC7+2C0j
		lea	ecx, [esp+8Ch+var_54]
		and	ebx, 9

loc_100072E3:				; CODE XREF: sub_10006FC7+FCj
					; sub_10006FC7+138j ...
		mov	eax, [esi-4]
		mov	[ecx+4], eax
		mov	eax, [esi]
		mov	[ecx+8], eax

loc_100072EE:				; CODE XREF: sub_10006FC7+11Cj
					; sub_10006FC7:loc_100070F0j ...
		mov	ecx, [esp+8Ch+var_7C]
		add	esi, 0Ch
		inc	ecx
		mov	[esp+8Ch+var_7C], ecx
		test	ebx, ebx
		jnz	loc_1000706A

loc_10007302:				; CODE XREF: sub_10006FC7+A5j
		mov	esi, [esp+8Ch+arg_4]
		test	bl, 3
		jz	short loc_1000733D
		push	ebp
		push	[esp+90h+arg_8]
		lea	eax, [esp+94h+var_54]
		push	esi
		push	ebx
		push	eax
		lea	eax, [esp+0A0h+var_18]
		push	eax
		lea	eax, [esp+0A4h+var_60]
		push	eax
		lea	eax, [esp+0A8h+var_6C]
		push	eax
		lea	eax, [esp+0ACh+var_48]
		push	eax
		push	edi
		call	sub_100069FA
		add	esp, 28h

loc_1000733D:				; CODE XREF: sub_10006FC7+345j
		test	bl, 70h
		jz	short loc_10007364
		xor	eax, eax
		cmp	[esp+8Ch+var_64], eax
		push	ebp
		push	[esp+90h+arg_8]
		setnz	al
		push	eax
		push	esi
		push	ebx
		lea	eax, [esp+0A0h+var_3C]
		push	eax
		push	edi
		call	sub_10006D5B
		add	esp, 1Ch

loc_10007364:				; CODE XREF: sub_10006FC7+379j
		test	bl, 4
		jz	short loc_10007386
		mov	eax, [esp+8Ch+var_78]
		push	ebp
		push	[esp+90h+arg_8]
		push	esi
		push	ebx
		push	eax
		lea	eax, [esp+0A0h+var_60]
		push	eax
		push	edi
		call	sub_10006CBE
		add	esp, 1Ch

loc_10007386:				; CODE XREF: sub_10006FC7+3A0j
		test	bl, 8
		jz	short loc_100073A2
		push	ebp
		push	[esp+90h+arg_8]
		lea	eax, [esp+94h+var_54]
		push	esi
		push	eax
		push	edi
		call	sub_10006E99
		add	esp, 14h

loc_100073A2:				; CODE XREF: sub_10006FC7+3C2j
		pop	edi
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		add	esp, 7Ch
		retn
sub_10006FC7	endp


; =============== S U B	R O U T	I N E =======================================


sub_100073AC	proc near		; DATA XREF: sub_10006E99+BDo

arg_4		= dword	ptr  8
arg_C		= dword	ptr  10h

		push	ebx
		push	esi
		mov	esi, [esp+8+arg_C]
		mov	ebx, 30000000h
		push	edi
		push	dword ptr [esi+0Ch]
		mov	edi, [esi]
		push	dword ptr [esi+8]
		push	ebx
		push	[esp+18h+arg_4]
		push	edi
		call	sub_1000518B
		add	esp, 14h
		test	eax, eax
		jz	short loc_100073E9
		push	ebx		; Dst
		push	[esp+10h+arg_4]	; int
		push	edi		; int
		call	sub_10007F0A
		push	eax
		push	dword ptr [esi+4]
		call	sub_1000667D
		add	esp, 14h

loc_100073E9:				; CODE XREF: sub_100073AC+24j
		pop	edi
		pop	esi
		xor	eax, eax
		pop	ebx
		retn
sub_100073AC	endp


; =============== S U B	R O U T	I N E =======================================


sub_100073EF	proc near		; CODE XREF: .text:10007605p

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		cmp	dword ptr [eax], 0FFh
		jz	short loc_100073FE
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_100073FE:				; CODE XREF: sub_100073EF+Aj
		push	eax
		call	dword ptr [eax+24h]
		pop	ecx
		retn
sub_100073EF	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10007404	proc near		; CODE XREF: sub_100029E8+144p
					; sub_1000DE89+D6p

var_10		= byte ptr -10h
var_8		= byte ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		lea	eax, [ebp+var_8]
		push	edi
		mov	edi, [ebp+arg_4]
		push	3
		push	eax
		lea	eax, [ebp+var_10]
		push	eax
		push	edi
		call	dword ptr [edi+14h]
		add	esp, 10h
		test	eax, eax
		jnz	short loc_10007453
		push	esi
		mov	esi, [ebp+arg_0]

loc_10007427:				; CODE XREF: sub_10007404+44j
		push	8
		lea	eax, [ebp+var_8]
		push	eax
		lea	eax, [ebp+var_10]
		push	eax
		push	esi
		call	dword ptr [esi+10h]
		push	7
		lea	eax, [ebp+var_8]
		push	eax
		lea	eax, [ebp+var_10]
		push	eax
		push	edi
		call	dword ptr [edi+14h]
		add	esp, 20h
		test	eax, eax
		jz	short loc_10007427
		push	0
		push	esi
		call	dword ptr [esi+18h]
		pop	ecx
		pop	ecx
		pop	esi

loc_10007453:				; CODE XREF: sub_10007404+1Dj
		xor	eax, eax
		pop	edi
		mov	esp, ebp
		pop	ebp
		retn
sub_10007404	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000745A	proc near		; CODE XREF: sub_100075CE+15p
					; sub_10007675+15p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		cmp	dword ptr [eax], 0FFh
		jz	short loc_10007469
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_10007469:				; CODE XREF: sub_1000745A+Aj
		push	[esp+arg_4]
		push	eax
		call	dword ptr [eax+28h]
		pop	ecx
		pop	ecx
		retn
sub_1000745A	endp


; =============== S U B	R O U T	I N E =======================================


sub_10007474	proc near		; CODE XREF: sub_10002505+BAp
					; sub_100029E8+73p ...

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		cmp	dword ptr [eax], 0FFh
		jz	short loc_10007483

loc_10007480:				; CODE XREF: sub_10007474+16j
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_10007483:				; CODE XREF: sub_10007474+Aj
		cmp	dword_10015030,	0
		jz	short loc_10007480
		push	eax
		call	dword ptr [eax+30h]
		pop	ecx
		retn
sub_10007474	endp

; Exported entry   3. legacy_Open

; =============== S U B	R O U T	I N E =======================================


; int __cdecl legacy_Open(char *Str1, int, int,	int, int, int, int, int)
		public legacy_Open
legacy_Open	proc near		; DATA XREF: .rdata:off_10013D68o

var_D		= byte ptr -0Dh
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
Str1		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch
arg_1C		= dword	ptr  20h

		sub	esp, 10h
		xor	eax, eax
		mov	[esp+10h+var_D], 56h
		push	ebp
		xor	ebp, ebp
		cmp	[esp+14h+arg_14], 1
		push	edi
		setz	al
		mov	edi, ebp
		mov	[esp+18h+var_8], eax
		call	SECOID_Init
		test	eax, eax
		jz	short loc_100074BF
		push	30h
		pop	eax
		jmp	loc_100075A6
; ---------------------------------------------------------------------------

loc_100074BF:				; CODE XREF: legacy_Open+23j
		push	ebx
		push	esi
		call	sub_1000C6EA
		mov	ebx, [esp+20h+arg_1C]
		test	ebx, ebx
		jz	short loc_100074D0
		mov	[ebx], ebp

loc_100074D0:				; CODE XREF: legacy_Open+3Aj
		mov	esi, [esp+20h+arg_18]
		test	esi, esi
		jz	short loc_10007522
		lea	eax, [esp+20h+var_C]
		mov	[esi], ebp
		push	eax		; int
		mov	[esp+24h+var_C], ebp
		mov	ebp, [esp+24h+var_8]
		push	ebp		; int
		push	[esp+28h+arg_4]	; int
		push	[esp+2Ch+Str1]	; Str1
		call	sub_10007714
		mov	edi, eax
		add	esp, 10h
		test	edi, edi
		jnz	short loc_1000757A
		push	eax
		push	[esp+24h+var_C]
		push	[esp+28h+arg_14]
		push	esi
		call	sub_100078E3
		mov	edi, eax
		add	esp, 10h
		test	edi, edi
		jz	short loc_10007526
		push	[esp+20h+var_C]
		call	sub_1000C0BF

loc_1000751F:				; CODE XREF: legacy_Open+D3j
		pop	ecx
		jmp	short loc_10007576
; ---------------------------------------------------------------------------

loc_10007522:				; CODE XREF: legacy_Open+44j
		mov	ebp, [esp+20h+var_8]

loc_10007526:				; CODE XREF: legacy_Open+82j
		test	ebx, ebx
		jz	short loc_10007576
		lea	eax, [esp+20h+var_4]
		push	eax		; int
		push	ebp		; int
		push	[esp+28h+arg_8]	; int
		push	[esp+2Ch+Str1]	; Str1
		call	sub_100077C3
		mov	edi, eax
		add	esp, 10h
		test	edi, edi
		jnz	short loc_1000757A
		mov	ebp, [esp+20h+var_4]
		push	ebp
		push	eax
		push	[esp+28h+arg_14]
		push	ebx
		call	sub_100078E3
		mov	edi, eax
		add	esp, 10h
		test	edi, edi
		jz	short loc_10007567
		push	ebp
		call	sub_10001CFD
		jmp	short loc_1000751F
; ---------------------------------------------------------------------------

loc_10007567:				; CODE XREF: legacy_Open+CBj
		test	esi, esi
		jz	short loc_100075A2
		mov	eax, [esi]
		test	eax, eax
		jz	short loc_100075A2
		mov	eax, [eax]
		mov	[eax+4], ebp

loc_10007576:				; CODE XREF: legacy_Open+8Ej
					; legacy_Open+96j
		test	edi, edi
		jz	short loc_100075A2

loc_1000757A:				; CODE XREF: legacy_Open+6Aj
					; legacy_Open+B2j
		test	ebx, ebx
		jz	short loc_1000758E
		cmp	dword ptr [ebx], 0
		jz	short loc_1000758E
		push	dword ptr [ebx]
		call	sub_10007613
		and	dword ptr [ebx], 0
		pop	ecx

loc_1000758E:				; CODE XREF: legacy_Open+EAj
					; legacy_Open+EFj
		test	esi, esi
		jz	short loc_100075A2
		cmp	dword ptr [esi], 0
		jz	short loc_100075A2
		push	dword ptr [esi]
		call	sub_10007613
		and	dword ptr [esi], 0
		pop	ecx

loc_100075A2:				; CODE XREF: legacy_Open+D7j
					; legacy_Open+DDj ...
		pop	esi
		mov	eax, edi
		pop	ebx

loc_100075A6:				; CODE XREF: legacy_Open+28j
		pop	edi
		pop	ebp
		add	esp, 10h
		retn
legacy_Open	endp

; Exported entry   7. legacy_Shutdown

; =============== S U B	R O U T	I N E =======================================


		public legacy_Shutdown
legacy_Shutdown	proc near		; DATA XREF: .rdata:off_10013D68o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	dword_100153B0,	eax
		call	sub_1000C1AD
		call	sub_1000C266
		call	SECOID_Shutdown
		and	dword_100153B0,	0
		xor	eax, eax
		retn
legacy_Shutdown	endp


; =============== S U B	R O U T	I N E =======================================


sub_100075CE	proc near		; DATA XREF: sub_100078E3+CEo

arg_0		= dword	ptr  4

		push	[esp+arg_0]
		call	sub_100078C7
		pop	ecx
		test	eax, eax
		jnz	short loc_100075E0
		push	5
		pop	eax
		retn
; ---------------------------------------------------------------------------

loc_100075E0:				; CODE XREF: sub_100075CE+Cj
		push	1
		push	eax
		call	sub_1000745A
		neg	eax
		pop	ecx
		sbb	eax, eax
		pop	ecx
		and	eax, 5
		retn
sub_100075CE	endp

; ---------------------------------------------------------------------------

loc_100075F2:				; DATA XREF: sub_100078E3+C0o
		push	dword ptr [esp+4]
		call	sub_100078C7
		pop	ecx
		test	eax, eax
		jnz	short loc_10007604
		push	5
		pop	eax
		retn
; ---------------------------------------------------------------------------

loc_10007604:				; CODE XREF: .text:100075FEj
		push	eax
		call	sub_100073EF
		neg	eax
		pop	ecx
		sbb	eax, eax
		and	eax, 5
		retn

; =============== S U B	R O U T	I N E =======================================


sub_10007613	proc near		; CODE XREF: legacy_Open+F3p
					; legacy_Open+107p
					; DATA XREF: ...

arg_0		= dword	ptr  4

		push	esi
		push	edi
		mov	edi, [esp+8+arg_0]
		push	edi
		mov	esi, [edi]
		call	sub_10007BFA
		pop	ecx
		test	esi, esi
		jz	short loc_10007669
		cmp	dword ptr [esi], 0
		jz	short loc_10007634
		push	dword ptr [esi]
		call	sub_1000C0BF
		jmp	short loc_10007642
; ---------------------------------------------------------------------------

loc_10007634:				; CODE XREF: sub_10007613+16j
		cmp	dword ptr [esi+4], 0
		jz	short loc_10007643
		push	dword ptr [esi+4]
		call	sub_10001CFD

loc_10007642:				; CODE XREF: sub_10007613+1Fj
		pop	ecx

loc_10007643:				; CODE XREF: sub_10007613+25j
		cmp	dword ptr [esi+8], 0
		jz	short loc_10007653
		push	dword ptr [esi+8]
		call	ds:PR_DestroyLock
		pop	ecx

loc_10007653:				; CODE XREF: sub_10007613+34j
		cmp	dword ptr [esi+0Ch], 0
		jz	short loc_10007662
		push	dword ptr [esi+0Ch]
		call	PL_HashTableDestroy
		pop	ecx

loc_10007662:				; CODE XREF: sub_10007613+44j
		push	esi
		call	PORT_Free_Util
		pop	ecx

loc_10007669:				; CODE XREF: sub_10007613+11j
		push	edi
		call	PORT_Free_Util
		pop	ecx
		pop	edi
		xor	eax, eax
		pop	esi
		retn
sub_10007613	endp


; =============== S U B	R O U T	I N E =======================================


sub_10007675	proc near		; DATA XREF: sub_100078E3+C7o

arg_0		= dword	ptr  4

		push	[esp+arg_0]
		call	sub_100078C7
		pop	ecx
		test	eax, eax
		jnz	short loc_10007687
		push	5
		pop	eax
		retn
; ---------------------------------------------------------------------------

loc_10007687:				; CODE XREF: sub_10007675+Cj
		push	0
		push	eax
		call	sub_1000745A
		neg	eax
		pop	ecx
		sbb	eax, eax
		pop	ecx
		and	eax, 5
		retn
sub_10007675	endp


; =============== S U B	R O U T	I N E =======================================


sub_10007699	proc near		; CODE XREF: sub_100049DD+42p
					; sub_10006396+199p ...

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax]
		push	dword ptr [eax+8]
		call	ds:PR_Lock
		pop	ecx
		retn
sub_10007699	endp


; =============== S U B	R O U T	I N E =======================================


sub_100076AA	proc near		; CODE XREF: sub_100049DD+5Ep
					; sub_100049DD+74p ...

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax]
		push	dword ptr [eax+8]
		call	ds:PR_Unlock
		pop	ecx
		retn
sub_100076AA	endp


; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_100076BB(char	*Str1, int)
sub_100076BB	proc near		; CODE XREF: sub_10007714+22p
					; sub_100077C3+1Dp

Str1		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+Str1]
		push	0Ch		; MaxCount
		push	offset aMultiaccess ; "multiaccess:"
		push	esi		; Str1
		call	ds:strncmp
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_10007701
		lea	ecx, [esi+0Ch]
		push	ecx
		call	PORT_Strdup_Util
		pop	ecx
		mov	ecx, [esp+4+arg_4]
		mov	[ecx], eax
		test	eax, eax
		jz	short loc_10007701
		mov	esi, eax
		jmp	short loc_100076F3
; ---------------------------------------------------------------------------

loc_100076ED:				; CODE XREF: sub_100076BB+3Bj
		cmp	byte ptr [esi],	3Ah
		jz	short loc_100076FD
		inc	esi

loc_100076F3:				; CODE XREF: sub_100076BB+30j
		cmp	byte ptr [esi],	0
		jnz	short loc_100076ED
		cmp	byte ptr [esi],	3Ah
		jnz	short loc_10007701

loc_100076FD:				; CODE XREF: sub_100076BB+35j
		mov	byte ptr [esi],	0
		inc	esi

loc_10007701:				; CODE XREF: sub_100076BB+18j
					; sub_100076BB+2Cj ...
		mov	eax, esi
		pop	esi
		retn
sub_100076BB	endp


; =============== S U B	R O U T	I N E =======================================


sub_10007705	proc near		; CODE XREF: sub_10007BFA+Dp
					; sub_10007DC7+6p ...

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax]
		mov	eax, [eax+0Ch]
		retn
sub_10007705	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000770F	proc near		; DATA XREF: sub_100078E3+5Ao

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		retn
sub_1000770F	endp


; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10007714(char	*Str1, int, int, int)
sub_10007714	proc near		; CODE XREF: legacy_Open+5Ep

var_4		= dword	ptr -4
Str1		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ecx
		and	[esp+4+var_4], 0
		push	ebp
		push	edi
		mov	edi, [esp+0Ch+arg_4]
		mov	ebp, 0CE534351h
		test	edi, edi
		jnz	short loc_1000772D
		mov	edi, offset dword_100133B8

loc_1000772D:				; CODE XREF: sub_10007714+12j
		lea	eax, [esp+0Ch+var_4]
		push	eax		; int
		push	[esp+10h+Str1]	; Str1
		call	sub_100076BB
		push	edi
		push	eax
		push	offset aSS	; "%s/%s"
		call	ds:PR_smprintf
		add	esp, 14h
		mov	[esp+0Ch+arg_4], eax
		test	eax, eax
		jz	short loc_100077AC
		push	esi
		push	10h
		call	PORT_ZAlloc_Util
		mov	esi, eax
		pop	ecx
		test	esi, esi
		jz	short loc_100077A0
		push	0
		push	[esp+14h+arg_4]
		mov	dword ptr [esi+0Ch], 1
		push	offset loc_1000784E
		push	edi
		push	[esp+20h+var_4]
		push	[esp+24h+arg_8]
		push	esi
		call	sub_1000C7B1
		add	esp, 1Ch
		test	eax, eax
		jnz	short loc_10007794
		mov	eax, [esp+10h+arg_C]
		xor	ebp, ebp
		mov	[eax], esi
		xor	esi, esi

loc_10007794:				; CODE XREF: sub_10007714+74j
		test	esi, esi
		jz	short loc_100077A0
		push	esi
		call	ds:PR_Free
		pop	ecx

loc_100077A0:				; CODE XREF: sub_10007714+4Cj
					; sub_10007714+82j
		push	[esp+10h+arg_4]
		call	ds:PR_smprintf_free
		pop	ecx
		pop	esi

loc_100077AC:				; CODE XREF: sub_10007714+3Dj
		cmp	[esp+0Ch+var_4], 0
		jz	short loc_100077BD
		push	[esp+0Ch+var_4]
		call	PORT_Free_Util
		pop	ecx

loc_100077BD:				; CODE XREF: sub_10007714+9Dj
		pop	edi
		mov	eax, ebp
		pop	ebp
		pop	ecx
		retn
sub_10007714	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_100077C3(char	*Str1, int, int, int)
sub_100077C3	proc near		; CODE XREF: legacy_Open+A6p

var_4		= dword	ptr -4
Str1		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	ecx
		and	[ebp+var_4], 0
		push	ebx
		push	esi
		mov	esi, [ebp+arg_4]
		test	esi, esi
		jnz	short loc_100077D9
		mov	esi, offset dword_100133B8

loc_100077D9:				; CODE XREF: sub_100077C3+Fj
		lea	eax, [ebp+var_4]
		push	eax		; int
		push	[ebp+Str1]	; Str1
		call	sub_100076BB
		push	esi
		push	eax
		push	offset aSS	; "%s/%s"
		call	ds:PR_smprintf
		mov	ebx, eax
		add	esp, 14h
		test	ebx, ebx
		jnz	short loc_10007800
		push	2
		pop	eax
		jmp	short loc_1000783E
; ---------------------------------------------------------------------------

loc_10007800:				; CODE XREF: sub_100077C3+36j
		push	edi
		push	ebx
		push	offset sub_10007A08
		push	esi
		mov	esi, [ebp+var_4]
		push	esi
		push	[ebp+arg_8]
		call	sub_100022B1
		push	ebx
		mov	edi, eax
		call	ds:PR_smprintf_free
		add	esp, 18h
		test	esi, esi
		jz	short loc_1000782B
		push	esi
		call	PORT_Free_Util
		pop	ecx

loc_1000782B:				; CODE XREF: sub_100077C3+5Fj
		test	edi, edi
		jnz	short loc_10007836
		mov	eax, 0CE534352h
		jmp	short loc_1000783D
; ---------------------------------------------------------------------------

loc_10007836:				; CODE XREF: sub_100077C3+6Aj
		mov	eax, [ebp+arg_C]
		mov	[eax], edi
		xor	eax, eax

loc_1000783D:				; CODE XREF: sub_100077C3+71j
		pop	edi

loc_1000783E:				; CODE XREF: sub_100077C3+3Bj
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
sub_100077C3	endp


; =============== S U B	R O U T	I N E =======================================


sub_10007844	proc near		; DATA XREF: sub_100078E3+E3o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	dword_100153B0,	eax
		retn
sub_10007844	endp

; ---------------------------------------------------------------------------

loc_1000784E:				; DATA XREF: sub_10007714+5Bo
		mov	eax, [esp+8]
		push	esi
		push	edi
		xor	edi, edi
		sub	eax, 5
		jz	short loc_10007880
		dec	eax
		jz	short loc_10007879
		dec	eax
		jz	short loc_10007872
		dec	eax
		jz	short loc_1000786B
		mov	eax, offset dword_100133B8
		jmp	short loc_10007885
; ---------------------------------------------------------------------------

loc_1000786B:				; CODE XREF: .text:10007862j
		mov	eax, offset a8	; "8"
		jmp	short loc_10007885
; ---------------------------------------------------------------------------

loc_10007872:				; CODE XREF: .text:1000785Fj
		mov	eax, offset a7	; "7"
		jmp	short loc_10007885
; ---------------------------------------------------------------------------

loc_10007879:				; CODE XREF: .text:1000785Cj
		mov	eax, offset a6	; "6"
		jmp	short loc_10007885
; ---------------------------------------------------------------------------

loc_10007880:				; CODE XREF: .text:10007859j
		mov	eax, offset a5	; "5"

loc_10007885:				; CODE XREF: .text:10007869j
					; .text:10007870j ...
		push	eax
		push	dword ptr [esp+10h]
		push	offset aScertS_db ; "%scert%s.db"
		call	ds:PR_smprintf
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		jz	short loc_100078AF
		push	esi
		call	PORT_Strdup_Util
		push	esi
		mov	edi, eax
		call	ds:PR_smprintf_free
		pop	ecx
		pop	ecx

loc_100078AF:				; CODE XREF: .text:1000789Cj
		mov	eax, edi
		pop	edi
		pop	esi
		retn

; =============== S U B	R O U T	I N E =======================================


sub_100078B4	proc near		; CODE XREF: sub_100033EA+AFp
					; sub_10004568+94p ...

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax]
		mov	eax, [eax]
		retn
sub_100078B4	endp


; =============== S U B	R O U T	I N E =======================================


sub_100078BD	proc near		; CODE XREF: sub_10001AD7+35p
					; sub_10001B8C+35p ...

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax]
		mov	eax, [eax+4]
		retn
sub_100078BD	endp


; =============== S U B	R O U T	I N E =======================================


sub_100078C7	proc near		; CODE XREF: sub_100075CE+4p
					; .text:100075F6p ...

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax]
		mov	ecx, [eax]
		test	ecx, ecx
		jz	short loc_100078D6
		mov	eax, [ecx]
		retn
; ---------------------------------------------------------------------------

loc_100078D6:				; CODE XREF: sub_100078C7+Aj
		mov	eax, [eax+4]
		test	eax, eax
		jz	short loc_100078E0
		mov	eax, [eax]
		retn
; ---------------------------------------------------------------------------

loc_100078E0:				; CODE XREF: sub_100078C7+14j
		xor	eax, eax
		retn
sub_100078C7	endp


; =============== S U B	R O U T	I N E =======================================


sub_100078E3	proc near		; CODE XREF: legacy_Open+76p
					; legacy_Open+BFp

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebx
		mov	ebx, [esp+4+arg_0]
		push	ebp
		push	esi
		push	edi
		xor	ebp, ebp
		push	50h
		mov	[ebx], ebp
		call	PORT_Alloc_Util
		mov	esi, eax
		pop	ecx
		test	esi, esi
		jz	loc_10007A00
		push	10h
		call	PORT_Alloc_Util
		mov	edi, eax
		pop	ecx
		test	edi, edi
		jz	loc_100079D1
		mov	ecx, [esp+10h+arg_8]
		mov	[edi], ecx
		mov	ecx, [esp+10h+arg_C]
		mov	[edi+4], ecx
		call	ds:PR_NewLock
		mov	[edi+8], eax
		test	eax, eax
		jz	loc_100079D1
		push	ebp
		push	ebp
		push	offset loc_10012408
		push	offset PL_CompareValues
		push	offset sub_1000770F
		push	40h
		call	PL_NewHashTable
		add	esp, 18h
		mov	[edi+0Ch], eax
		test	eax, eax
		jz	short loc_100079D1
		mov	eax, [esp+10h+arg_4]
		mov	[esi+0Ch], eax
		xor	eax, eax
		mov	[esi], edi
		mov	[esi+4], ebp
		mov	[esi+10h], ebp
		mov	dword ptr [esi+14h], offset sub_100065F6
		mov	dword ptr [esi+18h], offset sub_10006594
		mov	dword ptr [esi+1Ch], offset sub_100065E2
		mov	dword ptr [esi+20h], offset sub_100047F8
		mov	dword ptr [esi+24h], offset sub_10004A6F
		mov	dword ptr [esi+28h], offset sub_100051DF
		mov	dword ptr [esi+2Ch], offset sub_10006396
		mov	dword ptr [esi+30h], offset sub_10001AD7
		mov	dword ptr [esi+34h], offset sub_10001B8C
		mov	dword ptr [esi+38h], offset loc_100075F2
		mov	dword ptr [esi+3Ch], offset sub_10007675
		mov	dword ptr [esi+40h], offset sub_100075CE
		mov	dword ptr [esi+44h], offset sub_10001C29
		mov	dword ptr [esi+48h], offset sub_10007613
		mov	dword ptr [esi+4Ch], offset sub_10007844
		mov	[ebx], esi
		jmp	short loc_10007A03
; ---------------------------------------------------------------------------

loc_100079D1:				; CODE XREF: sub_100078E3+2Aj
					; sub_100078E3+48j ...
		push	esi
		call	PORT_Free_Util
		pop	ecx
		test	edi, edi
		jz	short loc_10007A00
		cmp	[edi+8], ebp
		jz	short loc_100079EB
		push	dword ptr [edi+8]
		call	ds:PR_DestroyLock
		pop	ecx

loc_100079EB:				; CODE XREF: sub_100078E3+FCj
		cmp	[edi+0Ch], ebp
		jz	short loc_100079F9
		push	dword ptr [edi+0Ch]
		call	PL_HashTableDestroy
		pop	ecx

loc_100079F9:				; CODE XREF: sub_100078E3+10Bj
		push	edi
		call	PORT_Free_Util
		pop	ecx

loc_10007A00:				; CODE XREF: sub_100078E3+18j
					; sub_100078E3+F7j
		push	2
		pop	eax

loc_10007A03:				; CODE XREF: sub_100078E3+ECj
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
sub_100078E3	endp


; =============== S U B	R O U T	I N E =======================================


sub_10007A08	proc near		; DATA XREF: sub_100077C3+3Fo

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_4]
		push	esi
		push	edi
		xor	edi, edi
		dec	eax
		jz	short loc_10007A2F
		dec	eax
		dec	eax
		jz	short loc_10007A28
		dec	eax
		jz	short loc_10007A21
		mov	eax, offset dword_100133B8
		jmp	short loc_10007A34
; ---------------------------------------------------------------------------

loc_10007A21:				; CODE XREF: sub_10007A08+10j
		mov	eax, offset a4	; "4"
		jmp	short loc_10007A34
; ---------------------------------------------------------------------------

loc_10007A28:				; CODE XREF: sub_10007A08+Dj
		mov	eax, offset a3	; "3"
		jmp	short loc_10007A34
; ---------------------------------------------------------------------------

loc_10007A2F:				; CODE XREF: sub_10007A08+9j
		mov	eax, offset a1	; "1"

loc_10007A34:				; CODE XREF: sub_10007A08+17j
					; sub_10007A08+1Ej ...
		push	eax
		push	[esp+0Ch+arg_0]
		push	offset aSkeyS_db ; "%skey%s.db"
		call	ds:PR_smprintf
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		jz	short loc_10007A5E
		push	esi
		call	PORT_Strdup_Util
		push	esi
		mov	edi, eax
		call	ds:PR_smprintf_free
		pop	ecx
		pop	ecx

loc_10007A5E:				; CODE XREF: sub_10007A08+43j
		mov	eax, edi
		pop	edi
		pop	esi
		retn
sub_10007A08	endp


; =============== S U B	R O U T	I N E =======================================


sub_10007A63	proc near		; CODE XREF: sub_10007A86+12p

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		sub	eax, 0
		jz	short loc_10007A82
		dec	eax
		dec	eax
		jz	short loc_10007A7E
		sub	eax, 300h
		jz	short loc_10007A7A
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_10007A7A:				; CODE XREF: sub_10007A63+12j
		push	4
		jmp	short loc_10007A80
; ---------------------------------------------------------------------------

loc_10007A7E:				; CODE XREF: sub_10007A63+Bj
		push	2

loc_10007A80:				; CODE XREF: sub_10007A63+19j
		pop	eax
		retn
; ---------------------------------------------------------------------------

loc_10007A82:				; CODE XREF: sub_10007A63+7j
		xor	eax, eax
		inc	eax
		retn
sub_10007A63	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10007A86	proc near		; CODE XREF: sub_10002505+4Ap
					; sub_100029E8+2Ap ...

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		mov	ecx, dword_1001502C
		push	esi
		push	edi
		test	ecx, ecx
		jz	short loc_10007ACB

loc_10007A95:				; CODE XREF: sub_10007A86+7Fj
		push	[ebp+arg_C]
		call	sub_10007A63
		push	eax
		push	[ebp+arg_8]
		push	[ebp+arg_4]
		push	[ebp+arg_0]
		call	ecx
		mov	edi, eax
		add	esp, 14h
		test	edi, edi
		jnz	short loc_10007AC7
		mov	esi, [ebp+arg_10]
		test	esi, esi
		jz	short loc_10007AC7
		mov	ecx, dword_10015030
		test	ecx, ecx
		jz	short loc_10007AC7
		call	ecx ; dword_10015030
		mov	[esi], eax

loc_10007AC7:				; CODE XREF: sub_10007A86+2Aj
					; sub_10007A86+31j ...
		mov	eax, edi
		jmp	short loc_10007B21
; ---------------------------------------------------------------------------

loc_10007ACB:				; CODE XREF: sub_10007A86+Dj
		push	offset aRdb_dll	; "rdb.dll"
		call	ds:PR_LoadLibrary
		mov	edi, eax
		pop	ecx
		test	edi, edi
		jz	short loc_10007B1F
		mov	esi, ds:PR_FindSymbol
		push	offset aRdbstatus ; "rdbstatus"
		push	edi
		call	esi ; PR_FindSymbol
		push	offset aRdbopen	; "rdbopen"
		push	edi
		mov	dword_10015030,	eax
		call	esi ; PR_FindSymbol
		mov	ecx, eax
		add	esp, 10h
		mov	dword_1001502C,	ecx
		test	ecx, ecx
		jnz	short loc_10007A95
		push	offset aNss_disable_un ; "NSS_DISABLE_UNLOAD"
		call	ds:PR_GetEnv
		pop	ecx
		test	eax, eax
		jnz	short loc_10007B1F
		push	edi
		call	ds:PR_UnloadLibrary
		pop	ecx

loc_10007B1F:				; CODE XREF: sub_10007A86+55j
					; sub_10007A86+8Fj
		xor	eax, eax

loc_10007B21:				; CODE XREF: sub_10007A86+43j
		pop	edi
		pop	esi
		pop	ebp
		retn
sub_10007A86	endp

; Exported entry   6. legacy_SetCryptFunctions

; =============== S U B	R O U T	I N E =======================================


		public legacy_SetCryptFunctions
legacy_SetCryptFunctions proc near	; DATA XREF: .rdata:off_10013D68o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		mov	dword_10015034,	eax
		mov	eax, [esp+arg_4]
		mov	dword_10015038,	eax
		retn
legacy_SetCryptFunctions endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10007B38	proc near		; CODE XREF: sub_1000572A+7Bp
					; sub_10005843+7Cp ...

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		push	esi
		mov	esi, [ebp+arg_10]
		push	edi
		push	[ebp+arg_C]
		push	[ebp+arg_8]
		and	dword ptr [esi+4], 0
		push	[ebp+arg_4]
		call	sub_10007C28
		mov	edi, eax
		add	esp, 0Ch
		test	edi, edi
		jnz	short loc_10007B62
		mov	eax, 0D0h
		jmp	short loc_10007B8F
; ---------------------------------------------------------------------------

loc_10007B62:				; CODE XREF: sub_10007B38+21j
		push	dword ptr [edi+8]
		push	esi
		push	[ebp+arg_0]
		call	SECITEM_AllocItem_Util
		add	esp, 0Ch
		cmp	dword ptr [esi+4], 0
		jnz	short loc_10007B7C
		push	2
		pop	eax
		jmp	short loc_10007B8F
; ---------------------------------------------------------------------------

loc_10007B7C:				; CODE XREF: sub_10007B38+3Dj
		push	dword ptr [esi+8] ; Size
		push	dword ptr [edi+4] ; Src
		push	dword ptr [esi+4] ; Dst
		call	memcpy
		add	esp, 0Ch
		xor	eax, eax

loc_10007B8F:				; CODE XREF: sub_10007B38+28j
					; sub_10007B38+42j
		pop	edi
		pop	esi
		pop	ebp
		retn
sub_10007B38	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10007B93	proc near		; CODE XREF: sub_10005B31+4Cp

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		push	edi
		push	[ebp+arg_C]
		push	[ebp+arg_8]
		push	[ebp+arg_4]
		call	sub_10007C28
		mov	edi, eax
		add	esp, 0Ch
		test	edi, edi
		jnz	short loc_10007BB5
		mov	eax, 0D0h
		jmp	short loc_10007BF7
; ---------------------------------------------------------------------------

loc_10007BB5:				; CODE XREF: sub_10007B93+19j
		cmp	[ebp+arg_0], 0
		push	ebx
		mov	ebx, [edi+8]
		push	esi
		mov	esi, [ebp+arg_10]
		push	ebx
		jz	short loc_10007BCF
		push	[ebp+arg_0]
		call	PORT_ArenaAlloc_Util
		pop	ecx
		jmp	short loc_10007BD4
; ---------------------------------------------------------------------------

loc_10007BCF:				; CODE XREF: sub_10007B93+2Fj
		call	PORT_Alloc_Util

loc_10007BD4:				; CODE XREF: sub_10007B93+3Aj
		mov	[esi+4], eax
		pop	ecx
		test	eax, eax
		jnz	short loc_10007BE1
		push	2
		pop	eax
		jmp	short loc_10007BF5
; ---------------------------------------------------------------------------

loc_10007BE1:				; CODE XREF: sub_10007B93+47j
		push	ebx		; Size
		mov	[esi+8], ebx
		push	dword ptr [edi+4] ; Src
		push	dword ptr [esi+4] ; Dst
		call	memcpy
		add	esp, 0Ch
		xor	eax, eax

loc_10007BF5:				; CODE XREF: sub_10007B93+4Cj
		pop	esi
		pop	ebx

loc_10007BF7:				; CODE XREF: sub_10007B93+20j
		pop	edi
		pop	ebp
		retn
sub_10007B93	endp


; =============== S U B	R O U T	I N E =======================================


sub_10007BFA	proc near		; CODE XREF: sub_10007613+9p

arg_0		= dword	ptr  4

		push	[esp+arg_0]
		call	sub_10007699
		push	[esp+4+arg_0]
		call	sub_10007705
		push	0
		push	offset sub_10007E52
		push	eax
		call	PL_HashTableEnumerateEntries
		push	[esp+14h+arg_0]
		call	sub_100076AA
		add	esp, 18h
		xor	eax, eax
		retn
sub_10007BFA	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10007C28	proc near		; CODE XREF: sub_10005387+BFp
					; sub_100055A8+46p ...

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		xor	eax, eax
		cmp	[ebp+arg_8], eax
		jbe	short loc_10007C45
		mov	ecx, [ebp+arg_4]
		mov	edx, [ebp+arg_0]

loc_10007C38:				; CODE XREF: sub_10007C28+1Bj
		cmp	[ecx], edx
		jz	short loc_10007C49
		inc	eax
		add	ecx, 0Ch
		cmp	eax, [ebp+arg_8]
		jb	short loc_10007C38

loc_10007C45:				; CODE XREF: sub_10007C28+8j
		xor	eax, eax
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_10007C49:				; CODE XREF: sub_10007C28+12j
		imul	eax, 0Ch
		add	eax, [ebp+arg_4]
		pop	ebp
		retn
sub_10007C28	endp


; =============== S U B	R O U T	I N E =======================================


sub_10007C51	proc near		; CODE XREF: sub_10004E98+2Ep
					; sub_100051DF+14p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	esi
		push	[esp+4+arg_8]
		xor	esi, esi
		push	[esp+8+arg_4]
		push	[esp+0Ch+arg_0]
		call	sub_10007C28
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_10007C73
		mov	eax, 0D0h
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10007C73:				; CODE XREF: sub_10007C51+19j
		cmp	dword ptr [eax+8], 4
		jz	short loc_10007C7E
		push	13h
		pop	eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10007C7E:				; CODE XREF: sub_10007C51+26j
		push	edi
		mov	edi, [eax+4]
		mov	edx, esi

loc_10007C84:				; CODE XREF: sub_10007C51+47j
		movzx	eax, byte ptr [edx+edi]
		push	3
		pop	ecx
		sub	ecx, edx
		shl	ecx, 3
		shl	eax, cl
		or	esi, eax
		inc	edx
		cmp	edx, 4
		jl	short loc_10007C84
		mov	eax, [esp+8+arg_C]
		pop	edi
		mov	[eax], esi
		xor	eax, eax
		pop	esi
		retn
sub_10007C51	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10007CA5	proc near		; CODE XREF: sub_10005E93+D0p
					; sub_10005E93+189p ...

var_10		= byte ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	esi
		push	edi
		push	[ebp+arg_C]
		mov	edi, [ebp+arg_10]
		xor	esi, esi
		push	[ebp+arg_8]
		mov	[ebp+var_4], esi
		push	[ebp+arg_4]
		mov	[edi+4], esi
		call	sub_10007C28
		mov	ecx, eax
		add	esp, 0Ch
		test	ecx, ecx
		jnz	short loc_10007CD6
		mov	eax, 0D0h
		jmp	short loc_10007D3E
; ---------------------------------------------------------------------------

loc_10007CD6:				; CODE XREF: sub_10007CA5+28j
		mov	eax, [ecx+4]
		mov	[ebp+var_C], eax
		mov	eax, [ecx+8]
		mov	[ebp+var_8], eax
		lea	eax, [ebp+var_4]
		push	eax
		lea	eax, [ebp+var_10]
		push	eax
		push	[ebp+arg_14]
		call	sub_10008069
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_10007D00
		mov	eax, 101h
		jmp	short loc_10007D3E
; ---------------------------------------------------------------------------

loc_10007D00:				; CODE XREF: sub_10007CA5+52j
		mov	eax, [ebp+var_4]
		push	dword ptr [eax+8]
		push	edi
		push	[ebp+arg_0]
		call	SECITEM_AllocItem_Util
		add	esp, 0Ch
		cmp	[edi+4], esi
		jnz	short loc_10007D1C
		push	2
		pop	esi
		jmp	short loc_10007D30
; ---------------------------------------------------------------------------

loc_10007D1C:				; CODE XREF: sub_10007CA5+70j
		mov	eax, [ebp+var_4]
		push	dword ptr [edi+8] ; Size
		push	dword ptr [eax+4] ; Src
		push	dword ptr [edi+4] ; Dst
		call	memcpy
		add	esp, 0Ch

loc_10007D30:				; CODE XREF: sub_10007CA5+75j
		push	1
		push	[ebp+var_4]
		call	SECITEM_FreeItem_Util
		pop	ecx
		pop	ecx
		mov	eax, esi

loc_10007D3E:				; CODE XREF: sub_10007CA5+2Fj
					; sub_10007CA5+59j
		pop	edi
		pop	esi
		mov	esp, ebp
		pop	ebp
		retn
sub_10007CA5	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10007D44	proc near		; CODE XREF: sub_10006269+85p
		push	ebp
		mov	ebp, esp
		pop	ebp
		jmp	sub_10007CA5
sub_10007D44	endp


; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10007D4D(void	*Dst, int, int)
sub_10007D4D	proc near		; CODE XREF: sub_10007F0A+1Fp
					; sub_10007FB6+1Fp

var_4		= dword	ptr -4
Dst		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ecx
		push	esi
		mov	esi, [esp+8+Dst]
		push	4		; Size
		push	0		; Val
		push	esi		; Dst
		call	memset
		mov	eax, [esp+14h+arg_8]
		add	esp, 0Ch
		add	eax, 0FFFFFFFCh
		test	eax, eax
		jle	short loc_10007DC4
		mov	dl, [esi+3]
		push	ebx
		mov	bl, [esi+1]
		mov	bh, [esi+2]
		push	ebp
		push	edi
		mov	edi, [esp+14h+arg_4]
		mov	ebp, edi
		mov	byte ptr [esp+14h+arg_8], dl
		mov	edx, edi
		lea	ecx, [edi+1]
		sub	edx, ecx
		sub	ebp, ecx
		mov	[esp+14h+var_4], edx
		sub	edi, ecx
		lea	edx, [eax-1]
		shr	edx, 2
		inc	edx

loc_10007D97:				; CODE XREF: sub_10007D4D+72j
		mov	al, [ecx+ebp]
		xor	[esi], al
		xor	bl, [ecx]
		lea	ecx, [ecx+4]
		mov	eax, [esp+14h+var_4]
		mov	[esi+1], bl
		xor	bh, [eax+ecx-2]
		mov	al, byte ptr [esp+14h+arg_8]
		mov	[esi+2], bh
		xor	al, [edi+ecx-1]
		mov	byte ptr [esp+14h+arg_8], al
		mov	[esi+3], al
		dec	edx
		jnz	short loc_10007D97
		pop	edi
		pop	ebp
		pop	ebx

loc_10007DC4:				; CODE XREF: sub_10007D4D+1Cj
		pop	esi
		pop	ecx
		retn
sub_10007D4D	endp


; =============== S U B	R O U T	I N E =======================================


sub_10007DC7	proc near		; CODE XREF: sub_10007F0A+8Ep

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi
		push	edi
		push	[esp+8+arg_0]
		call	sub_10007705
		push	[esp+0Ch+arg_8]
		mov	edi, eax
		call	SECITEM_DupItem_Util
		mov	esi, eax
		pop	ecx
		pop	ecx
		test	esi, esi
		jnz	short loc_10007DEA

loc_10007DE5:				; CODE XREF: sub_10007DC7+3Fj
		or	eax, 0FFFFFFFFh
		jmp	short loc_10007E0A
; ---------------------------------------------------------------------------

loc_10007DEA:				; CODE XREF: sub_10007DC7+1Cj
		push	esi
		push	[esp+0Ch+arg_4]
		push	edi
		call	PL_HashTableAdd
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_10007E08
		push	1
		push	esi
		call	SECITEM_FreeItem_Util
		pop	ecx
		pop	ecx
		jmp	short loc_10007DE5
; ---------------------------------------------------------------------------

loc_10007E08:				; CODE XREF: sub_10007DC7+33j
		xor	eax, eax

loc_10007E0A:				; CODE XREF: sub_10007DC7+21j
		pop	edi
		pop	esi
		retn
sub_10007DC7	endp


; =============== S U B	R O U T	I N E =======================================


sub_10007E0D	proc near		; CODE XREF: sub_10006396+1A0p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		push	edi
		push	[esp+8+arg_0]
		call	sub_10007705
		push	[esp+0Ch+arg_4]
		mov	esi, eax
		push	esi
		call	PL_HashTableLookup
		push	[esp+14h+arg_4]
		mov	edi, eax
		push	esi
		call	PL_HashTableRemove
		mov	esi, eax
		add	esp, 14h
		test	esi, esi
		jz	short loc_10007E47
		test	edi, edi
		jz	short loc_10007E47
		push	1
		push	edi
		call	SECITEM_FreeItem_Util
		pop	ecx
		pop	ecx

loc_10007E47:				; CODE XREF: sub_10007E0D+2Aj
					; sub_10007E0D+2Ej
		xor	eax, eax
		test	esi, esi
		pop	edi
		setnz	al
		dec	eax
		pop	esi
		retn
sub_10007E0D	endp


; =============== S U B	R O U T	I N E =======================================


sub_10007E52	proc near		; DATA XREF: sub_10007BFA+14o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		push	1
		push	dword ptr [eax+0Ch]
		call	SECITEM_FreeItem_Util
		pop	ecx
		pop	ecx
		xor	eax, eax
		retn
sub_10007E52	endp


; =============== S U B	R O U T	I N E =======================================


sub_10007E65	proc near		; CODE XREF: sub_10005387+E6p
					; sub_10005387+1AFp ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi
		push	edi
		push	[esp+8+arg_8]
		xor	edi, edi
		push	[esp+0Ch+arg_4]
		push	[esp+10h+arg_0]
		call	sub_10007C28
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		jnz	short loc_10007E87

loc_10007E83:				; CODE XREF: sub_10007E65+36j
		xor	eax, eax
		jmp	short loc_10007EB5
; ---------------------------------------------------------------------------

loc_10007E87:				; CODE XREF: sub_10007E65+1Cj
		cmp	[esi+4], edi
		jz	short loc_10007EB3
		mov	eax, [esi+8]
		inc	eax
		push	eax
		call	PORT_Alloc_Util
		mov	edi, eax
		pop	ecx
		test	edi, edi
		jz	short loc_10007E83
		push	dword ptr [esi+8] ; Size
		push	dword ptr [esi+4] ; Src
		push	edi		; Dst
		call	memcpy
		mov	eax, [esi+8]
		add	esp, 0Ch
		mov	byte ptr [edi+eax], 0

loc_10007EB3:				; CODE XREF: sub_10007E65+25j
		mov	eax, edi

loc_10007EB5:				; CODE XREF: sub_10007E65+20j
		pop	edi
		pop	esi
		retn
sub_10007E65	endp


; =============== S U B	R O U T	I N E =======================================


sub_10007EB8	proc near		; CODE XREF: sub_10005E93+F0p
					; sub_10005E93+1A6p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	[esp+arg_8]
		push	[esp+4+arg_4]
		push	[esp+8+arg_0]
		call	sub_10007C28
		add	esp, 0Ch
		neg	eax
		sbb	eax, eax
		neg	eax
		retn
sub_10007EB8	endp


; =============== S U B	R O U T	I N E =======================================


sub_10007ED3	proc near		; CODE XREF: sub_10005387+71p
					; sub_100055A8+1Dp ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	[esp+arg_8]
		push	[esp+4+arg_4]
		push	[esp+8+arg_0]
		call	sub_10007C28
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_10007EEC
		retn
; ---------------------------------------------------------------------------

loc_10007EEC:				; CODE XREF: sub_10007ED3+16j
		mov	eax, [eax+4]
		movzx	eax, byte ptr [eax]
		retn
sub_10007ED3	endp


; =============== S U B	R O U T	I N E =======================================


sub_10007EF3	proc near		; CODE XREF: sub_100049DD+52p
					; sub_10006396+28p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	[esp+arg_0]
		call	sub_10007705
		push	[esp+4+arg_4]
		push	eax
		call	PL_HashTableLookup
		add	esp, 0Ch
		retn
sub_10007EF3	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_10007F0A(int,	int, int Dst)
sub_10007F0A	proc near		; CODE XREF: sub_10005387+1F7p
					; sub_100055A8+F3p ...

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
Dst		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	ebx
		mov	ebx, [ebp+arg_4]
		push	esi
		mov	esi, [ebp+Dst]
		push	edi
		mov	edi, 28000001h
		cmp	esi, edi
		jz	short loc_10007F65
		push	dword ptr [ebx+8] ; int
		lea	eax, [ebp+Dst]
		push	dword ptr [ebx+4] ; int
		push	eax		; Dst
		call	sub_10007D4D
		mov	eax, [ebp+Dst]
		add	esp, 0Ch
		movzx	ecx, al
		shl	ecx, 8
		movzx	eax, ah
		or	ecx, eax
		movzx	eax, byte ptr [ebp+Dst+3]
		shl	ecx, 10h
		or	ecx, eax
		movzx	eax, byte ptr [ebp+Dst+2]
		and	eax, 7FFFFh
		and	ecx, 7FFFFFFh
		shl	eax, 8
		or	ecx, eax
		or	esi, ecx
		cmp	esi, edi
		jnz	short loc_10007F65
		lea	esi, [edi+1]

loc_10007F65:				; CODE XREF: sub_10007F0A+13j
					; sub_10007F0A+56j
		mov	edi, [ebp+arg_0]
		push	edi
		call	sub_10007699
		push	esi
		push	edi
		call	sub_10007EF3
		add	esp, 0Ch
		jmp	short loc_10007F91
; ---------------------------------------------------------------------------

loc_10007F7A:				; CODE XREF: sub_10007F0A+89j
		push	ebx
		push	eax
		call	SECITEM_ItemsAreEqual_Util
		pop	ecx
		pop	ecx
		test	eax, eax
		jnz	short loc_10007FAD
		inc	esi
		push	esi
		push	edi
		call	sub_10007EF3
		pop	ecx
		pop	ecx

loc_10007F91:				; CODE XREF: sub_10007F0A+6Ej
		test	eax, eax
		jnz	short loc_10007F7A
		push	ebx
		push	esi
		push	edi
		call	sub_10007DC7
		push	edi
		call	sub_100076AA
		add	esp, 10h

loc_10007FA6:				; CODE XREF: sub_10007F0A+AAj
		pop	edi
		mov	eax, esi
		pop	esi
		pop	ebx
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_10007FAD:				; CODE XREF: sub_10007F0A+7Bj
		push	edi
		call	sub_100076AA
		pop	ecx
		jmp	short loc_10007FA6
sub_10007F0A	endp


; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10007FB6(int,	int, int Dst)
sub_10007FB6	proc near		; CODE XREF: sub_100055A8+E4p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
Dst		= dword	ptr  0Ch

		push	ebp
		mov	ebp, [esp+4+arg_4]
		push	esi
		mov	esi, [esp+8+Dst]
		push	edi
		mov	edi, 28000001h
		cmp	esi, edi
		jz	short loc_10008014
		push	dword ptr [ebp+8] ; int
		lea	eax, [esp+10h+Dst]
		push	dword ptr [ebp+4] ; int
		push	eax		; Dst
		call	sub_10007D4D
		mov	eax, [esp+18h+Dst]
		add	esp, 0Ch
		movzx	ecx, al
		shl	ecx, 8
		movzx	eax, ah
		or	ecx, eax
		movzx	eax, byte ptr [esp+0Ch+Dst+3]
		shl	ecx, 10h
		or	ecx, eax
		movzx	eax, byte ptr [esp+0Ch+Dst+2]
		and	eax, 7FFFFh
		and	ecx, 7FFFFFFh
		shl	eax, 8
		or	ecx, eax
		or	esi, ecx
		cmp	esi, edi
		jnz	short loc_10008014
		lea	esi, [edi+1]

loc_10008014:				; CODE XREF: sub_10007FB6+12j
					; sub_10007FB6+59j
		push	[esp+0Ch+arg_0]
		call	sub_10007699
		push	esi
		push	[esp+14h+arg_0]
		call	sub_10007EF3
		add	esp, 0Ch
		jmp	short loc_10008046
; ---------------------------------------------------------------------------

loc_1000802C:				; CODE XREF: sub_10007FB6+94j
		push	ebp
		push	edi
		call	SECITEM_ItemsAreEqual_Util
		pop	ecx
		pop	ecx
		test	eax, eax
		jnz	short loc_1000805E
		inc	esi
		push	esi
		push	[esp+10h+arg_0]
		call	sub_10007EF3
		pop	ecx
		pop	ecx

loc_10008046:				; CODE XREF: sub_10007FB6+74j
		mov	edi, eax
		test	edi, edi
		jnz	short loc_1000802C
		xor	esi, esi

loc_1000804E:				; CODE XREF: sub_10007FB6+B1j
		push	[esp+0Ch+arg_0]
		call	sub_100076AA
		pop	ecx
		pop	edi
		mov	eax, esi
		pop	esi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_1000805E:				; CODE XREF: sub_10007FB6+81j
		mov	eax, [edi+4]
		xor	esi, esi
		xor	byte ptr [eax],	80h
		inc	esi
		jmp	short loc_1000804E
sub_10007FB6	endp


; =============== S U B	R O U T	I N E =======================================


sub_10008069	proc near		; CODE XREF: sub_10002C7C+8Ap
					; sub_10007CA5+48p
		mov	eax, dword_10015038
		test	eax, eax
		jnz	short loc_10008081
		push	0FFFFE001h
		call	PORT_SetError_Util
		pop	ecx
		or	eax, 0FFFFFFFFh
		retn
; ---------------------------------------------------------------------------

loc_10008081:				; CODE XREF: sub_10008069+7j
		jmp	eax
sub_10008069	endp


; =============== S U B	R O U T	I N E =======================================


sub_10008083	proc near		; CODE XREF: sub_10002FC8+1A1p
					; sub_1000334D+29p
		mov	eax, dword_10015034
		test	eax, eax
		jnz	short loc_1000809B
		push	0FFFFE001h
		call	PORT_SetError_Util
		pop	ecx
		or	eax, 0FFFFFFFFh
		retn
; ---------------------------------------------------------------------------

loc_1000809B:				; CODE XREF: sub_10008083+7j
		jmp	eax
sub_10008083	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000809D	proc near		; CODE XREF: sub_100088DE+33p
					; sub_100088DE+67p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_4]
		movzx	eax, al
		sub	eax, 17h
		jz	short loc_100080B7
		dec	eax
		jnz	short locret_100080C1
		mov	eax, [esp+arg_0]
		mov	dword ptr [eax], 0Ch
		retn
; ---------------------------------------------------------------------------

loc_100080B7:				; CODE XREF: sub_1000809D+Aj
		mov	eax, [esp+arg_0]
		mov	dword ptr [eax], 0Bh

locret_100080C1:			; CODE XREF: sub_1000809D+Dj
		retn
sub_1000809D	endp


; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_100080C2(int,	char *Str)
sub_100080C2	proc near		; CODE XREF: sub_10005387+107p
					; sub_100093BF+Cp ...

arg_0		= dword	ptr  4
Str		= dword	ptr  8

		push	ebx
		push	ebp
		push	esi
		push	edi
		call	sub_1000C0F5
		mov	ebx, eax
		test	ebx, ebx
		jz	loc_100081A0
		mov	esi, [esp+10h+arg_0]
		lea	eax, [ebx+7Ch]
		push	eax
		lea	edi, [ebx+8]
		xor	ebp, ebp
		lea	eax, [ebx+44h]
		movsd
		push	eax
		lea	eax, [ebx+60h]
		push	eax
		movsd
		lea	eax, [ebx+38h]
		push	eax
		lea	eax, [ebx+20h]
		push	eax
		movsd
		lea	esi, [ebx+2Ch]
		mov	[ebx+88h], ebp
		push	esi
		lea	edi, [ebx+14h]
		mov	[ebx+58h], ebp
		push	edi
		push	dword ptr [ebx+10h]
		mov	dword ptr [ebx+94h], 1
		push	dword ptr [ebx+0Ch]
		call	sub_1000867D
		add	esp, 24h
		test	eax, eax
		jnz	short loc_10008199
		lea	eax, [ebx+54h]
		mov	[ebx+74h], ebp
		push	eax
		push	esi
		push	edi
		lea	eax, [ebx+228h]
		mov	[ebx+78h], ebp
		push	200h
		push	eax
		mov	[ebx+6Ch], ebp
		mov	[ebx+90h], ebp
		mov	[ebx+4], ebp
		call	sub_10008B56
		add	esp, 14h
		test	eax, eax
		jnz	short loc_10008199
		cmp	[esp+10h+Str], ebp
		jnz	short loc_10008160
		mov	[ebx+88h], ebp
		jmp	short loc_1000817E
; ---------------------------------------------------------------------------

loc_10008160:				; CODE XREF: sub_100080C2+94j
		push	0C8h		; int
		lea	eax, [ebx+98h]
		push	eax		; Dst
		push	[esp+18h+Str]	; Str
		call	sub_1000D0A5
		add	esp, 0Ch
		mov	[ebx+88h], eax

loc_1000817E:				; CODE XREF: sub_100080C2+9Cj
		push	ebx
		call	sub_1000897A
		mov	[ebx+8Ch], eax
		mov	eax, ebx
		pop	ecx
		mov	dword ptr [ebx+94h], 1
		jmp	short loc_100081A2
; ---------------------------------------------------------------------------

loc_10008199:				; CODE XREF: sub_100080C2+5Ej
					; sub_100080C2+8Ej
		push	ebx		; Dst
		call	sub_1000C19A
		pop	ecx

loc_100081A0:				; CODE XREF: sub_100080C2+Dj
		xor	eax, eax

loc_100081A2:				; CODE XREF: sub_100080C2+D5j
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
sub_100080C2	endp


; =============== S U B	R O U T	I N E =======================================


sub_100081A7	proc near		; CODE XREF: sub_1000897A+32p

var_1C		= dword	ptr -1Ch
var_18		= byte ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= byte ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 1Ch
		push	ebx
		push	ebp
		push	esi
		push	edi
		push	0
		push	0
		lea	eax, [esp+34h+var_1C]
		push	eax
		mov	eax, [esp+38h+arg_0]
		push	dword ptr [eax+84h]
		push	dword ptr [eax+80h]
		call	sub_10008BB4
		mov	ebp, [esp+40h+var_1C]
		add	esp, 14h
		mov	ebx, eax

loc_100081D5:				; CODE XREF: sub_100081A7+AAj
		test	ebx, ebx
		jz	loc_10008331
		test	ebp, ebp
		jz	loc_10008331
		push	0
		push	0
		lea	eax, [esp+34h+arg_0]
		push	eax
		push	ebp
		push	ebx
		call	sub_10008BB4
		mov	esi, eax
		add	esp, 14h
		test	esi, esi
		jz	loc_10008331
		mov	edi, [esp+2Ch+arg_0]
		lea	eax, [esp+2Ch+var_1C]
		push	0
		push	0
		push	eax
		sub	ebx, edi
		sub	ebx, esi
		push	edi
		add	ebp, ebx
		lea	ebx, [edi+esi]
		push	esi
		call	sub_10008BB4
		add	esp, 14h
		test	eax, eax
		jz	loc_10008331
		mov	ecx, [esp+2Ch+var_1C]
		sub	esi, ecx
		sub	esi, eax
		mov	[esp+2Ch+var_14], eax
		add	edi, esi
		mov	[esp+2Ch+var_10], ecx
		mov	[esp+2Ch+arg_0], edi
		lea	esi, [ecx+eax]
		lea	eax, [esp+2Ch+var_18]
		push	eax
		call	SECOID_FindOIDTag_Util
		pop	ecx
		cmp	eax, 53h
		jnz	short loc_100081D5
		xor	ebx, ebx
		cmp	byte ptr [esi],	1
		jnz	short loc_10008280
		push	ebx
		push	ebx
		lea	eax, [esp+34h+arg_0]
		push	eax
		push	edi
		push	esi
		call	sub_10008BB4
		add	esp, 14h
		test	eax, eax
		jz	loc_10008331
		mov	ecx, [esp+2Ch+arg_0]
		sub	esi, ecx
		sub	esi, eax
		add	edi, esi
		lea	esi, [ecx+eax]

loc_10008280:				; CODE XREF: sub_100081A7+B1j
		push	ebx
		push	ebx
		lea	eax, [esp+34h+arg_0]
		push	eax
		push	edi
		push	esi
		call	sub_10008BB4
		add	esp, 14h
		test	eax, eax
		jz	loc_10008331
		push	ebx
		push	ebx
		lea	ecx, [esp+34h+arg_0]
		push	ecx
		push	[esp+38h+arg_0]
		push	eax
		call	sub_10008BB4
		mov	esi, eax
		add	esp, 14h
		test	esi, esi
		jz	short loc_10008331
		mov	ebp, [esp+2Ch+arg_0]

loc_100082B7:				; CODE XREF: sub_100081A7+169j
		test	ebp, ebp
		jz	short loc_10008331
		push	ebx
		push	ebx
		lea	eax, [esp+34h+arg_0]
		push	eax
		push	ebp
		push	esi
		call	sub_10008BB4
		mov	ebx, eax
		add	esp, 14h
		test	ebx, ebx
		jz	short loc_10008331
		cmp	byte ptr [esi],	0A2h
		mov	edi, [esp+2Ch+arg_0]
		jnz	short loc_100082FC
		push	[esp+2Ch+arg_8]
		lea	eax, [esp+30h+var_C]
		mov	[esp+30h+var_8], ebx
		push	[esp+30h+arg_4]
		mov	[esp+34h+var_4], edi
		push	eax
		call	sub_1000833B
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_10008333

loc_100082FC:				; CODE XREF: sub_100081A7+132j
		cmp	byte ptr [esi],	81h
		jz	short loc_10008312
		sub	esi, edi
		sub	esi, ebx
		add	ebp, esi
		lea	esi, [edi+ebx]
		test	esi, esi
		jz	short loc_10008331
		xor	ebx, ebx
		jmp	short loc_100082B7
; ---------------------------------------------------------------------------

loc_10008312:				; CODE XREF: sub_100081A7+158j
		push	[esp+2Ch+arg_8]	; int
		lea	eax, [edi+1]
		push	[esp+30h+arg_4]	; int
		push	eax		; Size
		push	ebx		; Src
		call	sub_1000D0DA
		add	esp, 10h
		test	eax, eax
		jz	short loc_10008333
		mov	byte ptr [eax+edi], 0
		jmp	short loc_10008333
; ---------------------------------------------------------------------------

loc_10008331:				; CODE XREF: sub_100081A7+30j
					; sub_100081A7+38j ...
		xor	eax, eax

loc_10008333:				; CODE XREF: sub_100081A7+153j
					; sub_100081A7+182j ...
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 1Ch
		retn
sub_100081A7	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000833B	proc near		; CODE XREF: sub_100081A7+149p
					; sub_1000897A+19p

var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
Src		= dword	ptr -10h
var_C		= byte ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 24h
		lea	eax, [esp+24h+var_1C]
		push	esi
		push	0
		push	0
		push	eax
		mov	eax, [esp+34h+arg_0]
		push	dword ptr [eax+8]
		push	dword ptr [eax+4]
		call	sub_10008BB4
		mov	esi, eax
		add	esp, 14h
		test	esi, esi
		jz	loc_1000846F
		push	ebx
		push	ebp
		mov	ebp, [esp+30h+var_1C]
		push	edi
		jmp	loc_10008462
; ---------------------------------------------------------------------------

loc_10008370:				; CODE XREF: sub_1000833B+129j
		push	0
		push	0
		lea	eax, [esp+3Ch+var_20]
		push	eax
		push	ebp
		push	esi
		call	sub_10008BB4
		mov	edi, eax
		add	esp, 14h
		test	edi, edi
		jz	loc_1000846A
		mov	ebx, [esp+34h+var_20]
		sub	esi, ebx
		sub	esi, edi
		add	ebp, esi
		lea	esi, [ebx+edi]
		jmp	loc_1000845A
; ---------------------------------------------------------------------------

loc_1000839F:				; CODE XREF: sub_1000833B+121j
		push	0
		push	0
		lea	eax, [esp+3Ch+arg_0]
		push	eax
		push	ebx
		push	edi
		call	sub_10008BB4
		add	esp, 14h
		mov	[esp+34h+var_18], eax
		test	eax, eax
		jz	loc_1000846A
		mov	ecx, [esp+34h+arg_0]
		lea	edx, [esp+34h+var_24]
		push	0
		push	0
		sub	edi, ecx
		mov	[esp+3Ch+arg_0], ecx
		push	edx
		sub	edi, eax
		push	ecx
		add	ebx, edi
		lea	edi, [ecx+eax]
		push	eax
		mov	[esp+48h+var_20], ebx
		call	sub_10008BB4
		mov	edx, eax
		add	esp, 14h
		mov	[esp+34h+var_14], edx
		test	edx, edx
		jz	short loc_1000846A
		mov	eax, [esp+34h+var_18]
		sub	eax, [esp+34h+var_24]
		mov	ecx, [esp+34h+arg_0]
		sub	eax, edx
		add	edx, [esp+34h+var_24]
		add	ecx, eax
		push	0
		push	0
		lea	eax, [esp+3Ch+var_1C]
		mov	[esp+3Ch+arg_0], ecx
		push	eax
		push	ecx
		push	edx
		mov	[esp+48h+var_18], edx
		call	sub_10008BB4
		add	esp, 14h
		mov	[esp+34h+Src], eax
		test	eax, eax
		jz	short loc_1000846A
		mov	ecx, [esp+34h+var_18]
		sub	ecx, [esp+34h+var_1C]
		sub	ecx, eax
		mov	eax, [esp+34h+var_14]
		add	[esp+34h+arg_0], ecx
		mov	[esp+34h+var_8], eax
		mov	eax, [esp+34h+var_24]
		mov	[esp+34h+var_4], eax
		lea	eax, [esp+34h+var_C]
		push	eax
		call	SECOID_FindOIDTag_Util
		pop	ecx
		cmp	eax, 1Fh
		jz	short loc_10008474
		cmp	eax, 63h
		jz	short loc_10008474

loc_1000845A:				; CODE XREF: sub_1000833B+5Fj
		test	ebx, ebx
		jnz	loc_1000839F

loc_10008462:				; CODE XREF: sub_1000833B+30j
		test	ebp, ebp
		jnz	loc_10008370

loc_1000846A:				; CODE XREF: sub_1000833B+4Cj
					; sub_1000833B+7Dj ...
		xor	eax, eax

loc_1000846C:				; CODE XREF: sub_1000833B+157j
					; sub_1000833B+15Dj
		pop	edi
		pop	ebp
		pop	ebx

loc_1000846F:				; CODE XREF: sub_1000833B+23j
		pop	esi
		add	esp, 24h
		retn
; ---------------------------------------------------------------------------

loc_10008474:				; CODE XREF: sub_1000833B+118j
					; sub_1000833B+11Dj
		push	[esp+34h+arg_8]	; int
		mov	ebx, [esp+38h+var_1C]
		push	[esp+38h+arg_4]	; int
		lea	eax, [ebx+1]
		push	eax		; Size
		push	[esp+40h+Src]	; Src
		call	sub_1000D0DA
		add	esp, 10h
		test	eax, eax
		jz	short loc_1000846C
		mov	byte ptr [eax+ebx], 0
		jmp	short loc_1000846C
sub_1000833B	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000849A	proc near		; CODE XREF: sub_10002110+19p
					; sub_100033EA+161p

var_40		= byte ptr -40h
var_38		= dword	ptr -38h
var_34		= byte ptr -34h
Dst		= byte ptr -28h
var_24		= byte ptr -24h
var_18		= byte ptr -18h
var_C		= byte ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		sub	esp, 40h
		push	ebp
		push	800h
		call	PORT_NewArena_Util
		mov	ebp, eax
		pop	ecx
		test	ebp, ebp
		jz	loc_1000863D
		push	ebx
		push	98h
		push	ebp
		call	PORT_ArenaZAlloc_Util
		mov	ebx, eax
		pop	ecx
		pop	ecx
		test	ebx, ebx
		jnz	short loc_100084D7
		push	eax
		push	ebp
		call	PORT_FreeArena_Util
		pop	ecx
		pop	ecx
		xor	eax, eax
		jmp	loc_1000863C
; ---------------------------------------------------------------------------

loc_100084D7:				; CODE XREF: sub_1000849A+2Bj
		push	esi
		push	28h		; Size
		xor	esi, esi
		mov	[ebx], ebp
		lea	eax, [esp+50h+Dst]
		push	esi		; Val
		push	eax		; Dst
		call	memset
		mov	eax, [esp+58h+arg_0]
		add	eax, 44h
		push	eax
		lea	eax, [esp+5Ch+var_34]
		push	eax
		push	ebp
		call	SECITEM_CopyItem_Util
		add	esp, 18h
		test	eax, eax
		jz	short loc_10008510

loc_10008503:				; CODE XREF: sub_1000849A+90j
		push	esi
		push	ebp
		call	PORT_FreeArena_Util
		pop	ecx
		jmp	loc_10008638
; ---------------------------------------------------------------------------

loc_10008510:				; CODE XREF: sub_1000849A+67j
		lea	eax, [esp+4Ch+var_34]
		push	eax
		push	offset dword_10013510
		lea	eax, [esp+54h+Dst]
		push	eax
		push	ebp
		call	SEC_QuickDERDecodeItem_Util
		add	esp, 10h
		test	eax, eax
		jnz	short loc_10008503
		mov	eax, [esp+4Ch+var_4]
		lea	esi, [esp+4Ch+var_C]
		push	edi
		lea	edi, [esp+50h+var_40]
		add	eax, 7
		movsd
		shr	eax, 3
		movsd
		movsd
		mov	[esp+50h+var_38], eax
		lea	eax, [esp+50h+var_24]
		push	eax
		call	SECOID_GetAlgorithmTag_Util
		pop	ecx
		pop	edi
		sub	eax, 10h
		jz	loc_10008606
		sub	eax, 51h
		jz	loc_10008606
		sub	eax, 1Bh
		jz	short loc_100085E4
		sub	eax, 32h
		jz	short loc_100085C5
		sub	eax, 1Ah
		jnz	loc_10008632
		lea	eax, [esp+4Ch+var_18]
		mov	dword ptr [ebx+4], 5
		push	eax
		lea	esi, [ebx+70h]
		push	esi
		push	ebp
		call	SECITEM_CopyItem_Util
		add	esp, 0Ch
		test	eax, eax
		jnz	loc_10008632
		lea	eax, [ebx+8]
		push	eax
		push	esi
		push	ebp
		call	sub_10008C7B
		add	esp, 0Ch
		test	eax, eax
		jnz	loc_10008632
		lea	eax, [esp+4Ch+var_40]
		push	eax
		lea	eax, [ebx+8Ch]
		push	eax
		push	ebp
		call	SECITEM_CopyItem_Util
		add	esp, 0Ch
		jmp	short loc_1000862A
; ---------------------------------------------------------------------------

loc_100085C5:				; CODE XREF: sub_1000849A+D2j
		push	0Ah
		pop	eax
		mov	[ebx+0Ch], eax
		mov	[ebx+18h], eax
		mov	[ebx+24h], eax
		lea	eax, [esp+4Ch+var_40]
		push	eax
		mov	dword ptr [ebx+4], 4
		push	offset dword_100135B0
		jmp	short loc_10008620
; ---------------------------------------------------------------------------

loc_100085E4:				; CODE XREF: sub_1000849A+CDj
		push	0Ah
		pop	eax
		mov	[ebx+30h], eax
		mov	[ebx+0Ch], eax
		mov	[ebx+18h], eax
		mov	[ebx+24h], eax
		lea	eax, [esp+4Ch+var_40]
		push	eax
		mov	dword ptr [ebx+4], 2
		push	offset dword_10013590
		jmp	short loc_10008620
; ---------------------------------------------------------------------------

loc_10008606:				; CODE XREF: sub_1000849A+BBj
					; sub_1000849A+C4j
		push	0Ah
		pop	eax
		mov	[ebx+0Ch], eax
		mov	[ebx+18h], eax
		lea	eax, [esp+4Ch+var_40]
		push	eax
		mov	dword ptr [ebx+4], 1
		push	offset dword_10013550

loc_10008620:				; CODE XREF: sub_1000849A+148j
					; sub_1000849A+16Aj
		push	ebx
		push	ebp
		call	SEC_QuickDERDecodeItem_Util
		add	esp, 10h

loc_1000862A:				; CODE XREF: sub_1000849A+129j
		test	eax, eax
		jnz	short loc_10008632
		mov	eax, ebx
		jmp	short loc_1000863B
; ---------------------------------------------------------------------------

loc_10008632:				; CODE XREF: sub_1000849A+D7j
					; sub_1000849A+F8j ...
		push	ebx
		call	sub_10008EE1

loc_10008638:				; CODE XREF: sub_1000849A+71j
		pop	ecx
		xor	eax, eax

loc_1000863B:				; CODE XREF: sub_1000849A+196j
		pop	esi

loc_1000863C:				; CODE XREF: sub_1000849A+38j
		pop	ebx

loc_1000863D:				; CODE XREF: sub_1000849A+13j
		pop	ebp
		add	esp, 40h
		retn
sub_1000849A	endp


; =============== S U B	R O U T	I N E =======================================


sub_10008642	proc near		; CODE XREF: sub_1000AB27+CBp
					; sub_1000CD9B+16p

arg_0		= dword	ptr  4

		cmp	[esp+arg_0], 0
		jnz	short loc_1000864C
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_1000864C:				; CODE XREF: sub_10008642+5j
		push	esi
		push	edi
		push	[esp+8+arg_0]
		call	PORT_Strdup_Util
		mov	esi, eax
		mov	edi, esi
		pop	ecx
		test	esi, esi
		jz	short loc_1000867A
		cmp	byte ptr [esi],	0
		jz	short loc_10008678

loc_10008665:				; CODE XREF: sub_10008642+34j
		movsx	eax, byte ptr [edi]
		push	eax		; C
		call	ds:tolower
		mov	[edi], al
		inc	edi
		pop	ecx
		cmp	byte ptr [edi],	0
		jnz	short loc_10008665

loc_10008678:				; CODE XREF: sub_10008642+21j
		mov	eax, esi

loc_1000867A:				; CODE XREF: sub_10008642+1Cj
		pop	edi
		pop	esi
		retn
sub_10008642	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000867D	proc near		; CODE XREF: sub_100080C2+54p
					; sub_10008A83+2Bp

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch
arg_1C		= dword	ptr  20h
arg_20		= dword	ptr  24h

		push	ecx
		push	ecx
		push	ebp
		xor	ebp, ebp
		lea	eax, [esp+0Ch+var_4]
		push	ebp
		push	ebp
		push	eax
		push	[esp+18h+arg_4]
		push	[esp+1Ch+arg_0]
		call	sub_10008BB4
		add	esp, 14h
		test	eax, eax
		jnz	short loc_100086A5
		or	eax, 0FFFFFFFFh
		jmp	loc_100088D5
; ---------------------------------------------------------------------------

loc_100086A5:				; CODE XREF: sub_1000867D+1Ej
		push	ebx
		push	ebp
		push	ebp
		lea	ecx, [esp+18h+var_4]
		push	ecx
		push	[esp+1Ch+var_4]
		push	eax
		call	sub_10008BB4
		mov	ebx, eax
		add	esp, 14h
		test	ebx, ebx
		jnz	short loc_100086C8
		or	eax, 0FFFFFFFFh
		jmp	loc_100088D4
; ---------------------------------------------------------------------------

loc_100086C8:				; CODE XREF: sub_1000867D+41j
		mov	al, [ebx]
		and	al, 0A0h
		push	edi
		mov	edi, [esp+14h+var_4]
		cmp	al, 0A0h
		jnz	short loc_10008701
		push	ebp
		push	ebp
		lea	eax, [esp+1Ch+var_8]
		push	eax
		push	edi
		push	ebx
		call	sub_10008BB4
		mov	ecx, eax
		add	esp, 14h
		test	ecx, ecx
		jnz	short loc_100086F4
		or	eax, 0FFFFFFFFh
		jmp	loc_100088D3
; ---------------------------------------------------------------------------

loc_100086F4:				; CODE XREF: sub_1000867D+6Dj
		mov	eax, [esp+14h+var_8]
		sub	ebx, eax
		sub	ebx, ecx
		add	edi, ebx
		lea	ebx, [eax+ecx]

loc_10008701:				; CODE XREF: sub_1000867D+56j
		push	esi
		mov	esi, [esp+18h+arg_10]
		test	esi, esi
		jz	short loc_1000871E
		push	ebp
		push	1
		lea	eax, [esi+8]
		push	eax
		push	edi
		push	ebx
		call	sub_10008BB4
		add	esp, 14h
		mov	[esi+4], eax

loc_1000871E:				; CODE XREF: sub_1000867D+8Bj
		mov	esi, [esp+18h+arg_C]
		push	0
		push	0
		lea	ebp, [esi+8]
		push	ebp
		push	edi
		push	ebx
		call	sub_10008BB4
		mov	ecx, eax
		add	esp, 14h
		mov	[esi+4], ecx
		test	ecx, ecx
		jz	loc_100088D9
		mov	eax, [ebp+0]
		sub	ebx, eax
		push	0
		push	0
		sub	ebx, ecx
		lea	esi, [eax+ecx]
		add	edi, ebx
		lea	eax, [esp+20h+var_8]
		push	eax
		push	edi
		push	esi
		call	sub_10008BB4
		mov	ecx, eax
		add	esp, 14h
		test	ecx, ecx
		jz	loc_100088D9
		mov	eax, [esp+18h+var_8]
		sub	esi, eax
		sub	esi, ecx
		add	edi, esi
		mov	esi, [esp+18h+arg_8]
		push	0
		push	1
		lea	ebx, [eax+ecx]
		lea	ebp, [esi+8]
		push	ebp
		push	edi
		push	ebx
		call	sub_10008BB4
		mov	ecx, eax
		add	esp, 14h
		mov	[esi+4], ecx
		test	ecx, ecx
		jz	loc_100088D9
		mov	eax, [ebp+0]
		sub	ebx, eax
		sub	ebx, ecx
		add	edi, ebx
		mov	ebx, [esp+18h+arg_18]
		lea	esi, [eax+ecx]
		test	ebx, ebx
		jz	loc_100088D0
		push	0
		push	0
		lea	ebp, [ebx+8]
		push	ebp
		push	edi
		push	esi
		call	sub_10008BB4
		mov	ecx, eax
		add	esp, 14h
		mov	[ebx+4], ecx
		test	ecx, ecx
		jz	loc_100088D9
		mov	eax, [ebp+0]
		sub	esi, eax
		sub	esi, ecx
		add	edi, esi
		mov	esi, [esp+18h+arg_14]
		push	0
		push	1
		lea	ebx, [eax+ecx]
		lea	ebp, [esi+8]
		push	ebp
		push	edi
		push	ebx
		call	sub_10008BB4
		mov	ecx, eax
		add	esp, 14h
		mov	[esi+4], ecx
		test	ecx, ecx
		jz	loc_100088D9
		mov	eax, [ebp+0]
		sub	ebx, eax
		mov	esi, [esp+18h+arg_1C]
		sub	ebx, ecx
		push	0
		push	1
		add	edi, ebx
		lea	ebx, [eax+ecx]
		lea	ebp, [esi+8]
		push	ebp
		push	edi
		push	ebx
		call	sub_10008BB4
		mov	ecx, eax
		add	esp, 14h
		mov	[esi+4], ecx
		test	ecx, ecx
		jz	loc_100088D9
		mov	eax, [ebp+0]
		sub	ebx, eax
		sub	ebx, ecx
		lea	esi, [eax+ecx]
		mov	eax, [esp+18h+arg_20]
		mov	dword ptr [eax+4], 0
		lea	ebp, [eax+8]
		mov	dword ptr [ebp+0], 0
		add	edi, ebx
		jz	short loc_100088D0

loc_10008852:				; CODE XREF: sub_1000867D+251j
		cmp	byte ptr [esi],	0A3h
		jnz	short loc_100088AA
		push	0
		push	0
		push	ebp
		push	edi
		push	esi
		call	sub_10008BB4
		mov	ebx, eax
		add	esp, 14h
		mov	eax, [esp+18h+arg_20]
		mov	[eax+4], ebx
		test	ebx, ebx
		jz	short loc_100088D9
		mov	ecx, [ebp+0]
		sub	ecx, esi
		add	ecx, ebx
		cmp	ecx, edi
		jnz	short loc_100088D9
		mov	edi, [ebp+0]
		lea	eax, [esp+18h+var_8]
		push	0
		push	0
		push	eax
		push	edi
		push	ebx
		call	sub_10008BB4
		mov	esi, eax
		add	esp, 14h
		test	esi, esi
		jz	short loc_100088D9
		mov	ecx, [esp+18h+var_8]
		sub	ecx, ebx
		add	ecx, esi
		cmp	ecx, edi
		jnz	short loc_100088D9
		sub	ebx, esi
		add	edi, ebx

loc_100088AA:				; CODE XREF: sub_1000867D+1D8j
		push	0
		push	0
		lea	eax, [esp+20h+var_8]
		push	eax
		push	edi
		push	esi
		call	sub_10008BB4
		add	esp, 14h
		test	eax, eax
		jz	short loc_100088D9
		mov	ecx, [esp+18h+var_8]
		sub	esi, ecx
		sub	esi, eax
		add	edi, esi
		lea	esi, [ecx+eax]
		jnz	short loc_10008852

loc_100088D0:				; CODE XREF: sub_1000867D+12Fj
					; sub_1000867D+1D3j
		xor	eax, eax

loc_100088D2:				; CODE XREF: sub_1000867D+25Fj
		pop	esi

loc_100088D3:				; CODE XREF: sub_1000867D+72j
		pop	edi

loc_100088D4:				; CODE XREF: sub_1000867D+46j
		pop	ebx

loc_100088D5:				; CODE XREF: sub_1000867D+23j
		pop	ebp
		pop	ecx
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_100088D9:				; CODE XREF: sub_1000867D+BEj
					; sub_1000867D+E7j ...
		or	eax, 0FFFFFFFFh
		jmp	short loc_100088D2
sub_1000867D	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_100088DE	proc near		; CODE XREF: sub_100089D9+11p
					; sub_100089D9+2Cp

var_18		= byte ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= byte ptr -0Ch
var_8		= dword	ptr -8
var_4		= byte ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 1Ch
		mov	eax, [ebp+arg_0]
		push	esi
		push	edi
		mov	edi, [eax+68h]
		mov	esi, [eax+64h]
		lea	eax, [ebp+arg_0]
		push	eax
		push	0
		lea	eax, [ebp+var_10]
		push	eax
		push	edi
		push	esi
		call	sub_10008BB4
		add	esp, 14h
		mov	[ebp+var_14], eax
		test	eax, eax
		jz	short loc_10008971
		push	[ebp+arg_0]
		lea	eax, [ebp+var_18]
		push	eax
		call	sub_1000809D
		sub	esi, [ebp+var_10]
		lea	ecx, [ebp+arg_0]
		mov	eax, [ebp+var_14]
		sub	esi, eax
		add	eax, [ebp+var_10]
		add	edi, esi
		push	ecx
		push	0
		lea	ecx, [ebp+var_4]
		push	ecx
		push	edi
		push	eax
		call	sub_10008BB4
		add	esp, 1Ch
		mov	[ebp+var_8], eax
		test	eax, eax
		jz	short loc_10008971
		push	[ebp+arg_0]
		lea	eax, [ebp+var_C]
		push	eax
		call	sub_1000809D
		lea	eax, [ebp+var_18]
		push	eax
		push	[ebp+arg_4]
		call	DER_DecodeTimeChoice_Util
		add	esp, 10h
		test	eax, eax
		jnz	short loc_10008971
		lea	eax, [ebp+var_C]
		push	eax
		push	[ebp+arg_8]
		call	DER_DecodeTimeChoice_Util
		neg	eax
		pop	ecx
		pop	ecx
		sbb	eax, eax
		jmp	short loc_10008974
; ---------------------------------------------------------------------------

loc_10008971:				; CODE XREF: sub_100088DE+2Aj
					; sub_100088DE+5Ej ...
		or	eax, 0FFFFFFFFh

loc_10008974:				; CODE XREF: sub_100088DE+91j
		pop	edi
		pop	esi
		mov	esp, ebp
		pop	ebp
		retn
sub_100088DE	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000897A	proc near		; CODE XREF: sub_100080C2+BDp

arg_0		= dword	ptr  4

		push	ebx
		push	ebp
		push	esi
		push	edi
		mov	edi, [esp+10h+arg_0]
		mov	ebp, 0C8h
		push	ebp
		lea	ebx, [edi+160h]
		lea	eax, [edi+38h]
		push	ebx
		push	eax
		call	sub_1000833B
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		jnz	short loc_100089B6
		cmp	[edi+80h], eax
		jz	short loc_100089B6
		push	ebp
		push	ebx
		push	edi
		call	sub_100081A7
		add	esp, 0Ch
		mov	esi, eax

loc_100089B6:				; CODE XREF: sub_1000897A+25j
					; sub_1000897A+2Dj
		mov	edi, esi
		test	esi, esi
		jz	short loc_100089D2

loc_100089BC:				; CODE XREF: sub_1000897A+56j
		mov	al, [edi]
		test	al, al
		jz	short loc_100089D2
		movsx	eax, al
		push	eax		; C
		call	ds:tolower
		mov	[edi], al
		pop	ecx
		inc	edi
		jnz	short loc_100089BC

loc_100089D2:				; CODE XREF: sub_1000897A+40j
					; sub_1000897A+46j
		pop	edi
		mov	eax, esi
		pop	esi
		pop	ebp
		pop	ebx
		retn
sub_1000897A	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_100089D9	proc near		; CODE XREF: sub_100091CE+AFp

var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 20h
		lea	eax, [ebp+var_8]
		push	eax
		lea	eax, [ebp+var_18]
		push	eax
		push	[ebp+arg_0]
		call	sub_100088DE
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_100089FA
		xor	eax, eax
		jmp	short loc_10008A6F
; ---------------------------------------------------------------------------

loc_100089FA:				; CODE XREF: sub_100089D9+1Bj
		lea	eax, [ebp+var_10]
		push	eax
		lea	eax, [ebp+var_20]
		push	eax
		push	[ebp+arg_4]
		call	sub_100088DE
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_10008A16
		xor	eax, eax
		inc	eax
		jmp	short loc_10008A6F
; ---------------------------------------------------------------------------

loc_10008A16:				; CODE XREF: sub_100089D9+36j
		mov	eax, [ebp+var_14]
		xor	ecx, ecx
		push	esi
		push	edi
		xor	edi, edi
		mov	esi, ecx
		inc	edi
		cmp	eax, [ebp+var_1C]
		jl	short loc_10008A33
		jg	short loc_10008A31
		mov	eax, [ebp+var_18]
		cmp	eax, [ebp+var_20]
		jbe	short loc_10008A33

loc_10008A31:				; CODE XREF: sub_100089D9+4Ej
		mov	esi, edi

loc_10008A33:				; CODE XREF: sub_100089D9+4Cj
					; sub_100089D9+56j
		mov	eax, [ebp+var_4]
		cmp	eax, [ebp+var_C]
		jl	short loc_10008A47
		jg	short loc_10008A45
		mov	eax, [ebp+var_8]
		cmp	eax, [ebp+var_10]
		jbe	short loc_10008A47

loc_10008A45:				; CODE XREF: sub_100089D9+62j
		mov	ecx, edi

loc_10008A47:				; CODE XREF: sub_100089D9+60j
					; sub_100089D9+6Aj
		test	esi, esi
		jz	short loc_10008A51
		test	ecx, ecx
		jz	short loc_10008A55
		jmp	short loc_10008A7F
; ---------------------------------------------------------------------------

loc_10008A51:				; CODE XREF: sub_100089D9+70j
		test	ecx, ecx
		jz	short loc_10008A6B

loc_10008A55:				; CODE XREF: sub_100089D9+74j
		call	ds:PR_Now
		test	esi, esi
		jz	short loc_10008A73
		cmp	[ebp+var_4], edx
		jg	short loc_10008A7F
		jl	short loc_10008A6B
		cmp	[ebp+var_8], eax
		jnb	short loc_10008A7F

loc_10008A6B:				; CODE XREF: sub_100089D9+7Aj
					; sub_100089D9+8Bj ...
		xor	eax, eax

loc_10008A6D:				; CODE XREF: sub_100089D9+A8j
		pop	edi
		pop	esi

loc_10008A6F:				; CODE XREF: sub_100089D9+1Fj
					; sub_100089D9+3Bj
		mov	esp, ebp
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_10008A73:				; CODE XREF: sub_100089D9+84j
		cmp	[ebp+var_C], edx
		jg	short loc_10008A6B
		jl	short loc_10008A7F
		cmp	[ebp+var_10], eax
		jnb	short loc_10008A6B

loc_10008A7F:				; CODE XREF: sub_100089D9+76j
					; sub_100089D9+89j ...
		mov	eax, edi
		jmp	short loc_10008A6D
sub_100089D9	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10008A83	proc near		; CODE XREF: sub_1000B9FE+37p
					; sub_1000C339+23p

Dst		= byte ptr -18h
var_C		= byte ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		lea	eax, [ebp+Dst]
		push	esi
		push	18h		; Size
		xor	esi, esi
		push	esi		; Val
		push	eax		; Dst
		call	memset
		push	esi
		push	esi
		push	esi
		push	esi
		push	esi
		lea	eax, [ebp+Dst]
		push	eax
		lea	eax, [ebp+var_C]
		push	eax
		mov	eax, [ebp+arg_4]
		push	dword ptr [eax+8]
		push	dword ptr [eax+4]
		call	sub_1000867D
		add	esp, 30h
		pop	esi
		test	eax, eax
		jz	short loc_10008AC0
		or	eax, 0FFFFFFFFh
		jmp	short loc_10008AD6
; ---------------------------------------------------------------------------

loc_10008AC0:				; CODE XREF: sub_10008A83+36j
		push	[ebp+arg_8]
		lea	eax, [ebp+Dst]
		push	eax
		lea	eax, [ebp+var_C]
		push	eax
		push	[ebp+arg_0]
		call	sub_10008ADA
		add	esp, 10h

loc_10008AD6:				; CODE XREF: sub_10008A83+3Bj
		mov	esp, ebp
		pop	ebp
		retn
sub_10008A83	endp


; =============== S U B	R O U T	I N E =======================================


sub_10008ADA	proc near		; CODE XREF: sub_10008A83+4Bp

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebx
		mov	ebx, [esp+4+arg_4]
		push	ebp
		push	esi
		push	edi
		mov	edi, [esp+10h+arg_8]
		mov	esi, [edi+8]
		add	esi, [ebx+8]
		cmp	[esp+10h+arg_0], 0
		jnz	short loc_10008B00
		push	0FFFFE005h

loc_10008AF8:				; CODE XREF: sub_10008ADA+33j
		call	PORT_SetError_Util
		pop	ecx
		jmp	short loc_10008B26
; ---------------------------------------------------------------------------

loc_10008B00:				; CODE XREF: sub_10008ADA+17j
		cmp	esi, 0F000h
		jbe	short loc_10008B0F
		push	0FFFFE004h
		jmp	short loc_10008AF8
; ---------------------------------------------------------------------------

loc_10008B0F:				; CODE XREF: sub_10008ADA+2Cj
		push	esi
		push	[esp+14h+arg_0]
		call	PORT_ArenaAlloc_Util
		mov	ebp, [esp+18h+arg_C]
		pop	ecx
		pop	ecx
		mov	[ebp+4], eax
		test	eax, eax
		jnz	short loc_10008B2B

loc_10008B26:				; CODE XREF: sub_10008ADA+24j
		or	eax, 0FFFFFFFFh
		jmp	short loc_10008B51
; ---------------------------------------------------------------------------

loc_10008B2B:				; CODE XREF: sub_10008ADA+4Aj
		mov	[ebp+8], esi
		push	dword ptr [edi+8] ; Size
		push	dword ptr [edi+4] ; Src
		push	eax		; Dst
		call	memcpy
		push	dword ptr [ebx+8] ; Size
		mov	eax, [edi+8]
		push	dword ptr [ebx+4] ; Src
		add	eax, [ebp+4]
		push	eax		; Dst
		call	memcpy
		add	esp, 18h
		xor	eax, eax

loc_10008B51:				; CODE XREF: sub_10008ADA+4Fj
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
sub_10008ADA	endp


; =============== S U B	R O U T	I N E =======================================


sub_10008B56	proc near		; CODE XREF: sub_100080C2+84p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	ebx
		mov	ebx, [esp+4+arg_8]
		push	ebp
		push	esi
		mov	esi, [esp+0Ch+arg_C]
		push	edi
		push	[esp+10h+arg_4]
		mov	edi, [esi+8]
		add	edi, [ebx+8]
		push	[esp+14h+arg_0]
		push	edi
		call	sub_1000D08E
		mov	ebp, [esp+1Ch+arg_10]
		add	esp, 0Ch
		mov	[ebp+4], eax
		test	eax, eax
		jnz	short loc_10008B89
		or	eax, 0FFFFFFFFh
		jmp	short loc_10008BAF
; ---------------------------------------------------------------------------

loc_10008B89:				; CODE XREF: sub_10008B56+2Cj
		mov	[ebp+8], edi
		push	dword ptr [esi+8] ; Size
		push	dword ptr [esi+4] ; Src
		push	eax		; Dst
		call	memcpy
		push	dword ptr [ebx+8] ; Size
		mov	eax, [ebp+4]
		push	dword ptr [ebx+4] ; Src
		add	eax, [esi+8]
		push	eax		; Dst
		call	memcpy
		add	esp, 18h
		xor	eax, eax

loc_10008BAF:				; CODE XREF: sub_10008B56+31j
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
sub_10008B56	endp


; =============== S U B	R O U T	I N E =======================================


sub_10008BB4	proc near		; CODE XREF: sub_100081A7+20p
					; sub_100081A7+49p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	ebx
		mov	ebx, [esp+4+arg_4]
		push	esi
		push	2
		pop	esi
		cmp	ebx, esi
		jnb	short loc_10008BC5
		xor	eax, eax
		jmp	short loc_10008C36
; ---------------------------------------------------------------------------

loc_10008BC5:				; CODE XREF: sub_10008BB4+Bj
		mov	ecx, [esp+8+arg_10]
		push	ebp
		mov	ebp, [esp+0Ch+arg_0]
		mov	al, [ebp+0]
		test	ecx, ecx
		jz	short loc_10008BD7
		mov	[ecx], al

loc_10008BD7:				; CODE XREF: sub_10008BB4+1Fj
		test	al, al
		jnz	short loc_10008BDF
		xor	eax, eax
		jmp	short loc_10008C35
; ---------------------------------------------------------------------------

loc_10008BDF:				; CODE XREF: sub_10008BB4+25j
		movzx	edx, byte ptr [ebp+1]
		push	edi
		mov	edi, [esp+10h+arg_8]
		mov	[edi], edx
		test	dl, dl
		jns	short loc_10008C10
		and	edx, 7Fh
		lea	eax, [edx+2]
		cmp	eax, ebx
		ja	short loc_10008C1A
		and	dword ptr [edi], 0
		jmp	short loc_10008C0C
; ---------------------------------------------------------------------------

loc_10008BFD:				; CODE XREF: sub_10008BB4+5Aj
		mov	eax, [edi]
		dec	edx
		movzx	ecx, byte ptr [esi+ebp]
		shl	eax, 8
		or	ecx, eax
		inc	esi
		mov	[edi], ecx

loc_10008C0C:				; CODE XREF: sub_10008BB4+47j
		test	edx, edx
		jg	short loc_10008BFD

loc_10008C10:				; CODE XREF: sub_10008BB4+38j
		mov	ecx, [edi]
		sub	ebx, esi
		cmp	ecx, ebx
		jbe	short loc_10008C1E
		mov	[edi], ebx

loc_10008C1A:				; CODE XREF: sub_10008BB4+42j
		xor	eax, eax
		jmp	short loc_10008C34
; ---------------------------------------------------------------------------

loc_10008C1E:				; CODE XREF: sub_10008BB4+62j
		mov	eax, [esp+10h+arg_C]
		test	eax, eax
		jz	short loc_10008C2A
		add	ecx, esi
		mov	[edi], ecx

loc_10008C2A:				; CODE XREF: sub_10008BB4+70j
		neg	eax
		sbb	eax, eax
		not	eax
		and	eax, esi
		add	eax, ebp

loc_10008C34:				; CODE XREF: sub_10008BB4+68j
		pop	edi

loc_10008C35:				; CODE XREF: sub_10008BB4+29j
		pop	ebp

loc_10008C36:				; CODE XREF: sub_10008BB4+Fj
		pop	esi
		pop	ebx
		retn
sub_10008BB4	endp


; =============== S U B	R O U T	I N E =======================================


sub_10008C39	proc near		; CODE XREF: sub_10008CF5+9Bp

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		mov	ebx, [esp+4+arg_8]
		push	esi
		mov	esi, [esp+8+arg_0]
		push	edi
		mov	edi, [esp+0Ch+arg_4]
		lea	eax, [ebx+68h]
		push	eax
		lea	eax, [edi+68h]
		mov	[edi], esi
		push	eax
		push	esi
		call	SECITEM_CopyItem_Util
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_10008C74
		lea	eax, [ebx+78h]
		push	eax
		lea	eax, [edi+78h]
		push	eax
		push	esi
		call	SECITEM_CopyItem_Util
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_10008C77

loc_10008C74:				; CODE XREF: sub_10008C39+24j
		or	eax, 0FFFFFFFFh

loc_10008C77:				; CODE XREF: sub_10008C39+39j
		pop	edi
		pop	esi
		pop	ebx
		retn
sub_10008C39	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10008C7B	proc near		; CODE XREF: sub_10002C7C+173p
					; sub_10005E93+A4p ...

var_C		= dword	ptr -0Ch
Src		= dword	ptr -8
Size		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		mov	ecx, [ebp+arg_4]
		and	[ebp+var_C], 0
		mov	eax, [ecx+8]
		mov	ecx, [ecx+4]
		sub	eax, 2
		mov	[ebp+Size], eax
		lea	eax, [ecx+2]
		mov	[ebp+Src], eax
		cmp	byte ptr [ecx],	6
		jnz	short loc_10008CE3
		lea	eax, [ebp+var_C]
		push	eax
		call	SECOID_FindOIDTag_Util
		pop	ecx
		test	eax, eax
		jz	short loc_10008CE3
		mov	eax, [ebp+Size]
		mov	ecx, [ebp+arg_0]
		push	esi
		mov	esi, [ebp+arg_8]
		push	eax
		push	ecx
		mov	[esi], ecx
		mov	[esi+80h], eax
		call	PORT_ArenaAlloc_Util
		mov	[esi+7Ch], eax
		pop	ecx
		pop	ecx
		pop	esi
		test	eax, eax
		jz	short loc_10008CEE
		push	[ebp+Size]	; Size
		push	[ebp+Src]	; Src
		push	eax		; Dst
		call	memcpy
		add	esp, 0Ch
		xor	eax, eax
		jmp	short loc_10008CF1
; ---------------------------------------------------------------------------

loc_10008CE3:				; CODE XREF: sub_10008C7B+22j
					; sub_10008C7B+30j
		push	0FFFFE08Dh
		call	PORT_SetError_Util
		pop	ecx

loc_10008CEE:				; CODE XREF: sub_10008C7B+53j
		or	eax, 0FFFFFFFFh

loc_10008CF1:				; CODE XREF: sub_10008C7B+66j
		mov	esp, ebp
		pop	ebp
		retn
sub_10008C7B	endp


; =============== S U B	R O U T	I N E =======================================


sub_10008CF5	proc near		; CODE XREF: sub_100048AD+2Cp

arg_0		= dword	ptr  4

		push	esi
		push	800h
		call	PORT_NewArena_Util
		mov	esi, eax
		pop	ecx
		test	esi, esi
		jnz	short loc_10008D16
		push	0FFFFE013h
		call	PORT_SetError_Util
		pop	ecx
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10008D16:				; CODE XREF: sub_10008CF5+10j
		push	ebx
		push	edi
		mov	edi, [esp+0Ch+arg_0]
		mov	eax, [edi+4]
		test	eax, eax
		js	loc_10008EB8
		cmp	eax, 1
		jle	loc_10008E5E
		cmp	eax, 2
		jz	loc_10008DF3
		cmp	eax, 4
		jz	short loc_10008D9A
		cmp	eax, 5
		jnz	loc_10008EB8
		push	98h
		push	esi
		call	PORT_ArenaZAlloc_Util
		mov	ebx, eax
		pop	ecx
		pop	ecx
		test	ebx, ebx
		jz	loc_10008EB8
		mov	[ebx], esi
		mov	ecx, [edi+4]
		mov	[ebx+4], ecx
		lea	ecx, [edi+8Ch]
		push	ecx
		lea	ecx, [ebx+8Ch]
		push	ecx
		push	esi
		call	SECITEM_CopyItem_Util
		add	esp, 0Ch
		test	eax, eax
		jnz	loc_10008EB8
		lea	eax, [edi+8]
		lea	ecx, [ebx+8]
		push	eax
		push	ecx
		push	esi
		mov	[ecx], esi
		call	sub_10008C39
		jmp	loc_10008EA2
; ---------------------------------------------------------------------------

loc_10008D9A:				; CODE XREF: sub_10008CF5+47j
		push	98h
		push	esi
		call	PORT_ArenaZAlloc_Util
		mov	ebx, eax
		pop	ecx
		pop	ecx
		test	ebx, ebx
		jz	loc_10008EB8
		mov	[ebx], esi
		mov	ecx, [edi+4]
		mov	[ebx+4], ecx
		lea	ecx, [edi+24h]
		push	ecx
		lea	ecx, [ebx+24h]
		push	ecx
		push	esi
		call	SECITEM_CopyItem_Util
		add	esp, 0Ch
		test	eax, eax
		jnz	loc_10008EB8
		lea	eax, [edi+0Ch]
		push	eax
		lea	eax, [ebx+0Ch]
		push	eax
		push	esi
		call	SECITEM_CopyItem_Util
		add	esp, 0Ch
		test	eax, eax
		jnz	loc_10008EB8
		lea	eax, [edi+18h]
		jmp	loc_10008E97
; ---------------------------------------------------------------------------

loc_10008DF3:				; CODE XREF: sub_10008CF5+3Ej
		push	98h
		push	esi
		call	PORT_ArenaZAlloc_Util
		mov	ebx, eax
		pop	ecx
		pop	ecx
		test	ebx, ebx
		jz	loc_10008EB8
		mov	[ebx], esi
		mov	ecx, [edi+4]
		mov	[ebx+4], ecx
		lea	ecx, [edi+30h]
		push	ecx
		lea	ecx, [ebx+30h]
		push	ecx
		push	esi
		call	SECITEM_CopyItem_Util
		add	esp, 0Ch
		test	eax, eax
		jnz	loc_10008EB8
		lea	eax, [edi+0Ch]
		push	eax
		lea	eax, [ebx+0Ch]
		push	eax
		push	esi
		call	SECITEM_CopyItem_Util
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_10008EB8
		lea	eax, [edi+18h]
		push	eax
		lea	eax, [ebx+18h]
		push	eax
		push	esi
		call	SECITEM_CopyItem_Util
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_10008EB8
		lea	eax, [edi+24h]
		push	eax
		lea	eax, [ebx+24h]
		jmp	short loc_10008E9B
; ---------------------------------------------------------------------------

loc_10008E5E:				; CODE XREF: sub_10008CF5+35j
		push	98h
		push	esi
		call	PORT_ArenaZAlloc_Util
		mov	ebx, eax
		pop	ecx
		pop	ecx
		test	ebx, ebx
		jz	short loc_10008EAD
		mov	[ebx], esi
		mov	ecx, [edi+4]
		mov	[ebx+4], ecx
		cmp	dword ptr [edi+4], 0
		jz	short loc_10008EC4
		lea	eax, [edi+18h]
		push	eax
		lea	eax, [ebx+0Ch]
		push	eax
		push	esi
		call	SECITEM_CopyItem_Util
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_10008EB8
		lea	eax, [edi+24h]

loc_10008E97:				; CODE XREF: sub_10008CF5+F9j
		push	eax
		lea	eax, [ebx+18h]

loc_10008E9B:				; CODE XREF: sub_10008CF5+167j
		push	eax
		push	esi
		call	SECITEM_CopyItem_Util

loc_10008EA2:				; CODE XREF: sub_10008CF5+A0j
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_10008EB8
		mov	eax, ebx
		jmp	short loc_10008EC4
; ---------------------------------------------------------------------------

loc_10008EAD:				; CODE XREF: sub_10008CF5+17Aj
		push	0FFFFE013h
		call	PORT_SetError_Util
		pop	ecx

loc_10008EB8:				; CODE XREF: sub_10008CF5+2Cj
					; sub_10008CF5+4Cj ...
		push	0
		push	esi
		call	PORT_FreeArena_Util
		pop	ecx
		pop	ecx
		xor	eax, eax

loc_10008EC4:				; CODE XREF: sub_10008CF5+188j
					; sub_10008CF5+1B6j
		pop	edi
		pop	ebx
		pop	esi
		retn
sub_10008CF5	endp


; =============== S U B	R O U T	I N E =======================================


sub_10008EC8	proc near		; CODE XREF: sub_10001F6E+49p
					; sub_100048AD+34p ...

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		test	eax, eax
		jz	short locret_10008EE0
		cmp	dword ptr [eax], 0
		jz	short locret_10008EE0
		push	1
		push	dword ptr [eax]
		call	PORT_FreeArena_Util
		pop	ecx
		pop	ecx

locret_10008EE0:			; CODE XREF: sub_10008EC8+6j
					; sub_10008EC8+Bj
		retn
sub_10008EC8	endp


; =============== S U B	R O U T	I N E =======================================


sub_10008EE1	proc near		; CODE XREF: sub_10001FC4+121p
					; sub_10002110+108p ...

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		test	eax, eax
		jz	short locret_10008EF9
		cmp	dword ptr [eax], 0
		jz	short locret_10008EF9
		push	0
		push	dword ptr [eax]
		call	PORT_FreeArena_Util
		pop	ecx
		pop	ecx

locret_10008EF9:			; CODE XREF: sub_10008EE1+6j
					; sub_10008EE1+Bj
		retn
sub_10008EE1	endp


; =============== S U B	R O U T	I N E =======================================


sub_10008EFA	proc near		; CODE XREF: sub_10002C7C+1A9p
					; sub_10002FC8+D5p

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		push	0Ah
		pop	ecx
		mov	[eax+0Ch], ecx
		mov	[eax+18h], ecx
		mov	[eax+24h], ecx
		mov	[eax+30h], ecx
		retn
sub_10008EFA	endp


; =============== S U B	R O U T	I N E =======================================


sub_10008F0E	proc near		; CODE XREF: sub_10002C7C+1EBp
					; sub_10002FC8+100p

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		push	0Ah
		pop	ecx
		mov	[eax+30h], ecx
		mov	[eax+3Ch], ecx
		mov	[eax+0Ch], ecx
		mov	[eax+18h], ecx
		mov	[eax+24h], ecx
		retn
sub_10008F0E	endp


; =============== S U B	R O U T	I N E =======================================


sub_10008F25	proc near		; CODE XREF: sub_10002C7C+109p
					; sub_10002FC8+83p

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		push	0Ah
		pop	ecx
		mov	[eax+0A4h], ecx
		mov	[eax+70h], ecx
		mov	[eax+80h], ecx
		mov	[eax+98h], ecx
		mov	[eax+8Ch], ecx
		retn
sub_10008F25	endp


; =============== S U B	R O U T	I N E =======================================


sub_10008F48	proc near		; CODE XREF: sub_10002C7C+14Ap

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		push	0Ah
		pop	ecx
		mov	[eax+68h], ecx
		mov	[eax+78h], ecx
		retn
sub_10008F48	endp


; =============== S U B	R O U T	I N E =======================================


sub_10008F56	proc near		; CODE XREF: sub_10002C7C+22Cp
					; sub_10002FC8+122p

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		push	0Ah
		pop	ecx
		mov	[eax+4], ecx
		mov	[eax+10h], ecx
		mov	[eax+1Ch], ecx
		retn
sub_10008F56	endp


; =============== S U B	R O U T	I N E =======================================


sub_10008F67	proc near		; CODE XREF: sub_10002C7C+266p
					; sub_10002FC8+144p

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		push	0Ah
		pop	ecx
		mov	[eax+18h], ecx
		mov	[eax+24h], ecx
		mov	[eax+30h], ecx
		mov	[eax+3Ch], ecx
		mov	[eax+48h], ecx
		mov	[eax+54h], ecx
		mov	[eax+60h], ecx
		mov	[eax+6Ch], ecx
		retn
sub_10008F67	endp


; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10008F87(int,	int, char *Str,	int)
sub_10008F87	proc near		; CODE XREF: sub_1000B344+7Ep
					; sub_1000CC3F+58p ...

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
Str		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ecx
		push	ecx
		push	ebx
		mov	ebx, [esp+0Ch+Str]
		push	ebp
		push	esi
		push	edi
		xor	edi, edi
		and	[esp+18h+var_8], edi
		test	ebx, ebx
		jz	short loc_10008FA3
		mov	[esp+18h+var_8], 1

loc_10008FA3:				; CODE XREF: sub_10008F87+12j
		mov	eax, [esp+18h+arg_4]
		mov	ebp, [esp+18h+arg_0]
		add	eax, 38h
		push	eax
		push	ebp
		mov	[esp+20h+var_4], eax
		call	sub_1000B092
		mov	esi, eax
		pop	ecx
		pop	ecx
		test	esi, esi
		jz	short loc_10008FCD
		cmp	[esi+20h], edi
		jz	short loc_10008FCD
		and	[esp+18h+var_8], edi
		mov	ebx, [esi+20h]

loc_10008FCD:				; CODE XREF: sub_10008F87+38j
					; sub_10008F87+3Dj
		mov	eax, [esp+18h+arg_4]
		push	0		; int
		push	[esp+1Ch+arg_C]	; int
		add	eax, 8
		push	ebx		; Str
		push	eax		; int
		call	sub_1000A7F0
		add	esp, 10h
		mov	[esp+18h+Str], eax
		test	eax, eax
		jz	loc_100090DD
		cmp	[esp+18h+var_8], edi
		jz	short loc_10009013
		push	0		; int
		push	[esp+1Ch+var_4]	; int
		push	ebx		; Str
		call	sub_1000A992
		mov	edi, eax
		add	esp, 0Ch
		test	edi, edi
		jz	loc_100090C8
		mov	eax, [esp+18h+Str]

loc_10009013:				; CODE XREF: sub_10008F87+6Dj
		push	eax		; Size
		push	ebp		; int
		call	sub_1000B9FE
		pop	ecx
		pop	ecx
		test	eax, eax
		jnz	loc_100090C8
		mov	[esp+18h+var_4], 1
		test	edi, edi
		jz	short loc_1000903D
		push	edi
		push	ebp
		call	sub_1000BB7B
		pop	ecx
		pop	ecx
		test	eax, eax
		jnz	short loc_100090A1

loc_1000903D:				; CODE XREF: sub_10008F87+A7j
		mov	ecx, [esp+18h+arg_4]
		mov	[esp+18h+var_4], 2
		mov	[ecx+4], ebp
		test	esi, esi
		jz	short loc_1000905D
		push	ebx
		push	ecx
		push	esi
		call	sub_100091CE
		add	esp, 0Ch
		jmp	short loc_10009085
; ---------------------------------------------------------------------------

loc_1000905D:				; CODE XREF: sub_10008F87+C7j
		push	0		; int
		push	0		; int
		push	ebx		; Str
		lea	eax, [ecx+70h]
		push	eax		; int
		lea	eax, [ecx+54h]
		push	eax		; int
		lea	eax, [ecx+38h]
		push	eax		; int
		call	sub_1000AB27
		mov	esi, eax
		add	esp, 18h
		test	esi, esi
		jz	short loc_100090A1
		push	esi
		push	ebp
		call	sub_1000BC6F
		pop	ecx
		pop	ecx

loc_10009085:				; CODE XREF: sub_10008F87+D4j
		test	eax, eax
		jnz	short loc_100090A1
		test	edi, edi
		jz	short loc_10009094
		push	edi		; Dst
		call	sub_1000A0DD
		pop	ecx

loc_10009094:				; CODE XREF: sub_10008F87+104j
		push	esi		; Dst
		call	sub_1000A0DD
		mov	eax, [esp+1Ch+Str]
		pop	ecx
		jmp	short loc_100090EA
; ---------------------------------------------------------------------------

loc_100090A1:				; CODE XREF: sub_10008F87+B4j
					; sub_10008F87+F3j ...
		mov	eax, [esp+18h+arg_4]
		add	eax, 54h
		push	eax
		push	ebp
		call	sub_10009D7D
		cmp	[esp+20h+var_4], 1
		pop	ecx
		pop	ecx
		jle	short loc_100090C8
		cmp	[esp+18h+var_8], 0
		jz	short loc_100090C8
		push	ebx		; Str
		push	ebp		; int
		call	sub_10009EB9
		pop	ecx
		pop	ecx

loc_100090C8:				; CODE XREF: sub_10008F87+82j
					; sub_10008F87+97j ...
		push	[esp+18h+Str]	; Dst
		call	sub_1000A0DD
		pop	ecx
		test	edi, edi
		jz	short loc_100090DD
		push	edi		; Dst
		call	sub_1000A0DD
		pop	ecx

loc_100090DD:				; CODE XREF: sub_10008F87+63j
					; sub_10008F87+14Dj
		test	esi, esi
		jz	short loc_100090E8
		push	esi		; Dst
		call	sub_1000A0DD
		pop	ecx

loc_100090E8:				; CODE XREF: sub_10008F87+158j
		xor	eax, eax

loc_100090EA:				; CODE XREF: sub_10008F87+118j
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		pop	ecx
		pop	ecx
		retn
sub_10008F87	endp


; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_100090F1(int,	int, char *Str)
sub_100090F1	proc near		; CODE XREF: sub_1000BF6B+58p
					; sub_1000BF6B+79p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
Str		= dword	ptr  0Ch

		push	ebx
		mov	ebx, [esp+4+arg_4]
		push	ebp
		push	esi
		push	edi
		mov	edi, [ebx+6Ch]
		test	edi, edi
		jz	short loc_10009165
		lea	esi, [edi+30h]
		push	esi
		push	dword ptr [edi+2Ch]
		call	sub_1000D109
		and	dword ptr [edi+2Ch], 0
		mov	ebp, 0C8h
		push	ebp		; int
		push	esi		; Dst
		push	[esp+20h+Str]	; Str
		call	sub_1000D0A5
		push	edi		; Size
		push	[esp+28h+arg_0]	; int
		mov	[edi+2Ch], eax
		call	sub_1000B9FE
		add	esp, 1Ch
		test	eax, eax
		jnz	short loc_10009165
		lea	esi, [ebx+98h]
		push	esi
		push	dword ptr [ebx+88h]
		call	sub_1000D109
		and	dword ptr [ebx+88h], 0
		push	ebp		; int
		push	esi		; Dst
		push	[esp+20h+Str]	; Str
		call	sub_1000D0A5
		add	esp, 14h
		mov	[ebx+88h], eax
		xor	eax, eax
		jmp	short loc_10009168
; ---------------------------------------------------------------------------

loc_10009165:				; CODE XREF: sub_100090F1+Dj
					; sub_100090F1+41j
		or	eax, 0FFFFFFFFh

loc_10009168:				; CODE XREF: sub_100090F1+72j
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
sub_100090F1	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_1000916D	proc near		; CODE XREF: sub_1000BF6B+41p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		cmp	[ebp+arg_8], 0
		jnz	short loc_1000917B
		or	eax, 0FFFFFFFFh
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_1000917B:				; CODE XREF: sub_1000916D+7j
		push	esi
		push	edi
		mov	edi, [ebp+arg_4]
		add	edi, 38h
		push	edi
		push	[ebp+arg_0]
		call	sub_1000B092
		mov	esi, eax
		pop	ecx
		pop	ecx
		test	esi, esi
		jz	short loc_100091C7
		cmp	dword ptr [esi+20h], 0
		jnz	short loc_100091C7
		push	[ebp+arg_8]
		push	dword ptr [esi+0Ch]
		call	PORT_ArenaStrdup_Util
		mov	[esi+20h], eax
		pop	ecx
		pop	ecx
		test	eax, eax
		jz	short loc_100091C7
		push	edi
		push	[ebp+arg_0]
		call	sub_10009F87
		push	esi
		push	[ebp+arg_0]
		call	sub_1000BC6F
		add	esp, 10h
		test	eax, eax
		jz	short loc_100091CA

loc_100091C7:				; CODE XREF: sub_1000916D+25j
					; sub_1000916D+2Bj ...
		or	eax, 0FFFFFFFFh

loc_100091CA:				; CODE XREF: sub_1000916D+58j
		pop	edi
		pop	esi
		pop	ebp
		retn
sub_1000916D	endp


; =============== S U B	R O U T	I N E =======================================


sub_100091CE	proc near		; CODE XREF: sub_10008F87+CCp

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
Dst		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 1Ch
		push	ebx
		mov	ebx, [esp+20h+arg_0]
		push	ebp
		xor	ebp, ebp
		push	edi
		mov	edi, [ebx+1Ch]
		mov	[esp+28h+var_14], edi
		cmp	[ebx+20h], ebp
		jnz	short loc_10009209
		cmp	[esp+28h+arg_8], ebp
		jz	short loc_10009209
		push	[esp+28h+arg_8]
		push	dword ptr [ebx+0Ch]
		call	PORT_ArenaStrdup_Util
		mov	[ebx+20h], eax
		pop	ecx
		pop	ecx
		test	eax, eax
		jnz	short loc_10009209
		or	eax, 0FFFFFFFFh
		jmp	loc_100093B8
; ---------------------------------------------------------------------------

loc_10009209:				; CODE XREF: sub_100091CE+16j
					; sub_100091CE+1Cj ...
		push	esi
		lea	eax, [edi+1]
		imul	esi, eax, 0Ch
		push	esi
		push	dword ptr [ebx+0Ch]
		call	PORT_ArenaZAlloc_Util
		push	esi
		push	dword ptr [ebx+0Ch]
		mov	[esp+3Ch+var_1C], eax
		call	PORT_ArenaZAlloc_Util
		mov	ecx, [esp+3Ch+var_1C]
		add	esp, 10h
		mov	[esp+2Ch+var_10], eax
		test	ecx, ecx
		jz	loc_100093B4
		test	eax, eax
		jz	loc_100093B4
		mov	esi, ebp
		mov	[esp+2Ch+arg_0], esi
		test	edi, edi
		jz	loc_100092E2
		mov	esi, [esp+2Ch+arg_4]
		mov	edx, ebp
		sub	ecx, eax
		mov	[esp+2Ch+var_18], edx
		mov	[esp+2Ch+var_C], eax
		mov	[esp+2Ch+var_4], ecx

loc_10009263:				; CODE XREF: sub_100091CE+10Aj
		mov	eax, [ebx+24h]
		add	eax, edx
		push	eax
		push	dword ptr [esi+4]
		call	sub_1000C49E
		mov	[esp+34h+Dst], eax
		pop	ecx
		pop	ecx
		test	eax, eax
		jz	short loc_100092CA
		push	eax
		push	esi
		call	sub_100089D9
		push	[esp+34h+Dst]	; Dst
		mov	esi, eax
		call	sub_1000C19A
		add	esp, 0Ch
		test	esi, esi
		jnz	short loc_100092DA
		mov	esi, [ebx+24h]
		mov	ecx, [esp+2Ch+var_C]
		mov	edx, [esp+2Ch+var_18]
		add	esi, edx
		mov	edi, [esp+2Ch+var_4]
		lea	edi, [edi+ecx]
		movsd
		movsd
		movsd
		mov	esi, [ebx+28h]
		mov	edi, ecx
		add	esi, edx
		inc	[esp+2Ch+arg_0]
		add	ecx, 0Ch
		mov	[esp+2Ch+var_C], ecx
		movsd
		movsd
		movsd
		mov	edi, [esp+2Ch+var_14]
		mov	esi, [esp+2Ch+arg_4]
		jmp	short loc_100092CE
; ---------------------------------------------------------------------------

loc_100092CA:				; CODE XREF: sub_100091CE+ABj
		mov	edx, [esp+2Ch+var_18]

loc_100092CE:				; CODE XREF: sub_100091CE+FAj
		inc	ebp
		add	edx, 0Ch
		mov	[esp+2Ch+var_18], edx
		cmp	ebp, edi
		jb	short loc_10009263

loc_100092DA:				; CODE XREF: sub_100091CE+C4j
		mov	esi, [esp+2Ch+arg_0]
		mov	ecx, [esp+2Ch+var_1C]

loc_100092E2:				; CODE XREF: sub_100091CE+7Bj
		mov	eax, [esp+2Ch+arg_4]
		imul	edx, esi, 0Ch
		add	eax, 54h
		push	eax
		mov	[esp+30h+arg_0], edx
		lea	eax, [edx+ecx]
		push	eax
		push	dword ptr [ebx+0Ch]
		call	SECITEM_CopyItem_Util
		add	esp, 0Ch
		test	eax, eax
		jnz	loc_100093B4
		mov	eax, [esp+2Ch+arg_4]
		add	eax, 70h
		push	eax
		mov	eax, [esp+30h+var_10]
		add	eax, [esp+30h+arg_0]
		push	eax
		push	dword ptr [ebx+0Ch]
		call	SECITEM_CopyItem_Util
		add	esp, 0Ch
		test	eax, eax
		jnz	loc_100093B4
		mov	ecx, [esp+2Ch+var_1C]
		inc	esi
		cmp	ebp, edi
		jnb	short loc_10009389
		imul	eax, ebp, 0Ch
		sub	edi, ebp
		imul	edx, esi, 0Ch
		mov	[esp+2Ch+var_18], ecx
		mov	[esp+2Ch+var_14], edi
		mov	[esp+2Ch+var_4], eax
		mov	eax, [esp+2Ch+var_10]
		add	edx, eax
		sub	[esp+2Ch+var_18], eax
		add	esi, edi
		mov	ebp, [esp+2Ch+var_18]
		mov	eax, edi
		mov	ecx, [esp+2Ch+var_4]
		mov	[esp+2Ch+arg_0], esi

loc_10009363:				; CODE XREF: sub_100091CE+1B1j
		mov	esi, [ebx+24h]
		lea	edi, [edx+ebp]
		add	esi, ecx
		movsd
		movsd
		movsd
		mov	esi, [ebx+28h]
		mov	edi, edx
		add	esi, ecx
		add	edx, 0Ch
		add	ecx, 0Ch
		movsd
		movsd
		movsd
		dec	eax
		jnz	short loc_10009363
		mov	esi, [esp+2Ch+arg_0]
		mov	ecx, [esp+2Ch+var_1C]

loc_10009389:				; CODE XREF: sub_100091CE+165j
		mov	ebp, [esp+2Ch+arg_4]
		mov	eax, [esp+2Ch+var_10]
		mov	[ebx+28h], eax
		mov	[ebx+24h], ecx
		lea	eax, [ebp+38h]
		mov	[ebx+1Ch], esi
		push	eax
		push	dword ptr [ebp+4]
		call	sub_10009F87
		push	ebx
		push	dword ptr [ebp+4]
		call	sub_1000BC6F
		add	esp, 10h
		jmp	short loc_100093B7
; ---------------------------------------------------------------------------

loc_100093B4:				; CODE XREF: sub_100091CE+65j
					; sub_100091CE+6Dj ...
		or	eax, 0FFFFFFFFh

loc_100093B7:				; CODE XREF: sub_100091CE+1E4j
		pop	esi

loc_100093B8:				; CODE XREF: sub_100091CE+36j
		pop	edi
		pop	ebp
		pop	ebx
		add	esp, 1Ch
		retn
sub_100091CE	endp


; =============== S U B	R O U T	I N E =======================================


sub_100093BF	proc near		; CODE XREF: sub_1000BD80+89p
					; sub_1000C49E+1Ep

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_4]
		push	dword ptr [esi+2Ch] ; Str
		lea	eax, [esi+20h]
		push	eax		; int
		call	sub_100080C2
		pop	ecx
		pop	ecx
		mov	ecx, eax
		test	ecx, ecx
		jnz	short loc_100093DA
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_100093DA:				; CODE XREF: sub_100093BF+17j
		mov	eax, [esp+4+arg_0]
		mov	[ecx+4], eax
		lea	eax, [esi+14h]
		mov	[ecx+6Ch], esi
		mov	[ecx+90h], eax
		mov	eax, ecx
		pop	esi
		retn
sub_100093BF	endp


; =============== S U B	R O U T	I N E =======================================


sub_100093F1	proc near		; CODE XREF: sub_1000AD0B+B8p
					; sub_1000B743+133p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebx
		push	ebp
		push	esi
		mov	esi, [esp+0Ch+arg_0]
		push	edi
		mov	eax, [esi+4]
		cmp	eax, 5
		jz	short loc_10009415
		push	6
		pop	edx
		cmp	eax, edx
		jz	short loc_10009415
		add	eax, 0FFFFFFF9h
		cmp	eax, 1
		ja	short loc_10009415
		push	0Ah
		pop	ebx
		jmp	short loc_1000941B
; ---------------------------------------------------------------------------

loc_10009415:				; CODE XREF: sub_100093F1+Ej
					; sub_100093F1+15j ...
		push	7
		pop	ebx
		push	3
		pop	edx

loc_1000941B:				; CODE XREF: sub_100093F1+22j
		mov	edi, [esp+10h+arg_4]
		cmp	[edi+8], ebx
		jnb	short loc_1000942E

loc_10009424:				; CODE XREF: sub_100093F1+70j
					; sub_100093F1+75j
		push	0FFFFE012h
		jmp	loc_100094BB
; ---------------------------------------------------------------------------

loc_1000942E:				; CODE XREF: sub_100093F1+31j
		mov	eax, [edi+4]
		movzx	ecx, byte ptr [eax+edx]
		movzx	eax, byte ptr [eax+edx+1]
		shl	ecx, 8
		or	ecx, eax
		mov	[esi+28h], ecx
		mov	eax, [edi+4]
		movzx	ebp, byte ptr [eax+edx+2]
		movzx	eax, byte ptr [eax+edx+3]
		mov	edx, [edi+8]
		shl	ebp, 8
		sub	edx, ecx
		or	ebp, eax
		sub	edx, ebp
		sub	edx, ebx
		jz	short loc_1000946B
		test	edx, edx
		js	short loc_10009424
		test	dx, dx
		jnz	short loc_10009424
		add	[esi+28h], edx

loc_1000946B:				; CODE XREF: sub_100093F1+6Cj
		push	800h		; int
		lea	eax, [esi+0F8h]
		push	eax		; int
		mov	eax, [edi+4]
		push	dword ptr [esi+28h] ; Size
		add	eax, ebx
		push	eax		; Src
		call	sub_1000D0DA
		add	esp, 10h
		mov	[esi+24h], eax
		test	eax, eax
		jz	short loc_100094B6
		cmp	ebp, 1
		jbe	short loc_100094C6
		push	0C8h		; int
		lea	eax, [esi+30h]
		push	eax		; int
		mov	eax, [edi+4]
		add	eax, ebx
		add	eax, [esi+28h]
		push	ebp		; Size
		push	eax		; Src
		call	sub_1000D0DA
		add	esp, 10h
		mov	[esi+2Ch], eax
		test	eax, eax
		jnz	short loc_100094CA

loc_100094B6:				; CODE XREF: sub_100093F1+9Cj
		push	0FFFFE013h

loc_100094BB:				; CODE XREF: sub_100093F1+38j
		call	PORT_SetError_Util
		pop	ecx
		or	eax, 0FFFFFFFFh
		jmp	short loc_10009526
; ---------------------------------------------------------------------------

loc_100094C6:				; CODE XREF: sub_100093F1+A1j
		and	dword ptr [esi+2Ch], 0

loc_100094CA:				; CODE XREF: sub_100093F1+C3j
		cmp	dword ptr [esi+4], 7
		mov	eax, [edi+4]
		jnb	short loc_100094EF
		movzx	eax, byte ptr [eax]
		mov	[esi+14h], eax
		mov	eax, [edi+4]
		movzx	eax, byte ptr [eax+1]
		mov	[esi+18h], eax
		mov	eax, [edi+4]
		movzx	eax, byte ptr [eax+2]
		mov	[esi+1Ch], eax
		jmp	short loc_10009524
; ---------------------------------------------------------------------------

loc_100094EF:				; CODE XREF: sub_100093F1+E0j
		movzx	ecx, byte ptr [eax]
		movzx	eax, byte ptr [eax+1]
		shl	ecx, 8
		or	ecx, eax
		mov	[esi+14h], ecx
		mov	eax, [edi+4]
		movzx	ecx, byte ptr [eax+2]
		movzx	eax, byte ptr [eax+3]
		shl	ecx, 8
		or	ecx, eax
		mov	[esi+18h], ecx
		mov	eax, [edi+4]
		movzx	ecx, byte ptr [eax+4]
		movzx	eax, byte ptr [eax+5]
		shl	ecx, 8
		or	ecx, eax
		mov	[esi+1Ch], ecx

loc_10009524:				; CODE XREF: sub_100093F1+FCj
		xor	eax, eax

loc_10009526:				; CODE XREF: sub_100093F1+D3j
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
sub_100093F1	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000952B	proc near		; CODE XREF: sub_1000AE19+BAp
					; sub_1000B743+CAp

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebx
		push	esi
		push	edi
		mov	edi, [esp+0Ch+arg_4]
		cmp	dword ptr [edi+8], 4
		jnb	short loc_10009542

loc_10009538:				; CODE XREF: sub_1000952B+4Bj
					; sub_1000952B+50j
		push	0FFFFE012h
		jmp	loc_100095CD
; ---------------------------------------------------------------------------

loc_10009542:				; CODE XREF: sub_1000952B+Bj
		mov	eax, [edi+4]
		mov	esi, [esp+0Ch+arg_0]
		movzx	edx, byte ptr [eax]
		movzx	eax, byte ptr [eax+1]
		shl	edx, 8
		or	edx, eax
		mov	[esi+18h], edx
		mov	eax, [edi+4]
		mov	ecx, [edi+8]
		sub	ecx, edx
		movzx	ebx, byte ptr [eax+2]
		movzx	eax, byte ptr [eax+3]
		shl	ebx, 8
		or	ebx, eax
		sub	ecx, ebx
		sub	ecx, 4
		jz	short loc_10009583
		test	ecx, ecx
		js	short loc_10009538
		test	cx, cx
		jnz	short loc_10009538
		lea	eax, [edx+ecx]
		mov	[esi+18h], eax

loc_10009583:				; CODE XREF: sub_1000952B+47j
		push	dword ptr [esi+18h]
		push	dword ptr [esi+0Ch]
		call	PORT_ArenaAlloc_Util
		pop	ecx
		pop	ecx
		mov	ecx, eax
		mov	[esi+14h], ecx
		test	ecx, ecx
		jz	short loc_100095C8
		push	dword ptr [esi+18h] ; Size
		mov	eax, [edi+4]
		add	eax, 4
		push	eax		; Src
		push	ecx		; Dst
		call	memcpy
		and	dword ptr [esi+1Ch], 0
		add	esp, 0Ch
		test	ebx, ebx
		jz	short loc_100095EC
		push	ebx
		push	dword ptr [esi+0Ch]
		call	PORT_ArenaAlloc_Util
		mov	edx, eax
		mov	[esi+1Ch], edx
		pop	ecx
		pop	ecx
		test	edx, edx
		jnz	short loc_100095D8

loc_100095C8:				; CODE XREF: sub_1000952B+6Cj
		push	0FFFFE013h

loc_100095CD:				; CODE XREF: sub_1000952B+12j
		call	PORT_SetError_Util
		pop	ecx
		or	eax, 0FFFFFFFFh
		jmp	short loc_100095EE
; ---------------------------------------------------------------------------

loc_100095D8:				; CODE XREF: sub_1000952B+9Bj
		mov	eax, [edi+4]
		add	eax, 4
		add	eax, [esi+18h]
		push	ebx		; Size
		push	eax		; Src
		push	edx		; Dst
		call	memcpy
		add	esp, 0Ch

loc_100095EC:				; CODE XREF: sub_1000952B+87j
		xor	eax, eax

loc_100095EE:				; CODE XREF: sub_1000952B+ABj
		pop	edi
		pop	esi
		pop	ebx
		retn
sub_1000952B	endp


; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_100095F2(int,	int, char *Str)
sub_100095F2	proc near		; CODE XREF: sub_1000AFB6+C4p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
Str		= dword	ptr  0Ch

		push	esi
		push	edi
		mov	edi, [esp+8+arg_4]
		cmp	dword ptr [edi+8], 2
		jnb	short loc_10009605

loc_100095FE:				; CODE XREF: sub_100095F2+34j
					; sub_100095F2+39j
		push	0FFFFE012h
		jmp	short loc_1000964E
; ---------------------------------------------------------------------------

loc_10009605:				; CODE XREF: sub_100095F2+Aj
		mov	eax, [edi+4]
		mov	esi, [esp+8+arg_0]
		movzx	edx, byte ptr [eax]
		movzx	eax, byte ptr [eax+1]
		shl	edx, 8
		or	edx, eax
		mov	[esi+1Ch], edx
		mov	ecx, [edi+8]
		sub	ecx, edx
		dec	ecx
		dec	ecx
		jz	short loc_10009633
		test	ecx, ecx
		js	short loc_100095FE
		test	cx, cx
		jnz	short loc_100095FE
		lea	eax, [edx+ecx]
		mov	[esi+1Ch], eax

loc_10009633:				; CODE XREF: sub_100095F2+30j
		push	dword ptr [esi+1Ch]
		push	dword ptr [esi+0Ch]
		call	PORT_ArenaAlloc_Util
		pop	ecx
		pop	ecx
		mov	ecx, eax
		mov	[esi+18h], ecx
		test	ecx, ecx
		jnz	short loc_10009659
		push	0FFFFE013h

loc_1000964E:				; CODE XREF: sub_100095F2+11j
		call	PORT_SetError_Util
		pop	ecx
		or	eax, 0FFFFFFFFh
		jmp	short loc_10009698
; ---------------------------------------------------------------------------

loc_10009659:				; CODE XREF: sub_100095F2+55j
		push	dword ptr [esi+1Ch] ; Size
		mov	eax, [edi+4]
		add	eax, 2
		push	eax		; Src
		push	ecx		; Dst
		call	memcpy
		push	[esp+14h+Str]	; Str
		and	dword ptr [esi+14h], 0
		call	strlen
		inc	eax
		push	eax
		push	dword ptr [esi+0Ch]
		call	PORT_ArenaAlloc_Util
		add	esp, 18h
		mov	[esi+10h], eax
		test	eax, eax
		jz	short loc_10009696
		push	[esp+8+Str]	; Source
		push	eax		; Dest
		call	strcpy
		pop	ecx
		pop	ecx

loc_10009696:				; CODE XREF: sub_100095F2+96j
		xor	eax, eax

loc_10009698:				; CODE XREF: sub_100095F2+65j
		pop	edi
		pop	esi
		retn
sub_100095F2	endp


; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1000969B(int,	int, char *Str)
sub_1000969B	proc near		; CODE XREF: sub_1000B743+23Cp
					; sub_1000C924+C4p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
Str		= dword	ptr  0Ch

		push	ebx
		push	esi
		push	edi
		mov	edi, [esp+0Ch+arg_4]
		cmp	dword ptr [edi+8], 6
		jb	loc_100097BF
		mov	eax, [edi+4]
		mov	esi, [esp+0Ch+arg_0]
		movzx	ecx, byte ptr [eax]
		movzx	eax, byte ptr [eax+1]
		shl	ecx, 8
		or	ecx, eax
		mov	[esi+1Ch], ecx
		mov	eax, [edi+4]
		mov	ebx, [esi+1Ch]
		movzx	ecx, byte ptr [eax+2]
		movzx	eax, byte ptr [eax+3]
		shl	ecx, 8
		or	ecx, eax
		mov	[esi+28h], ecx
		mov	eax, [edi+4]
		movzx	ecx, byte ptr [eax+4]
		movzx	eax, byte ptr [eax+5]
		shl	ecx, 8
		or	ecx, eax
		mov	[esi+34h], ecx
		mov	edx, [edi+8]
		sub	edx, ebx
		sub	edx, ecx
		sub	edx, [esi+28h]
		sub	edx, 6
		jz	short loc_10009711
		test	edx, edx
		js	loc_100097BF
		test	dx, dx
		jnz	loc_100097BF
		lea	eax, [ebx+edx]
		mov	[esi+1Ch], eax

loc_10009711:				; CODE XREF: sub_1000969B+5Dj
		push	dword ptr [esi+1Ch]
		push	dword ptr [esi+0Ch]
		call	PORT_ArenaAlloc_Util
		pop	ecx
		pop	ecx
		mov	ecx, eax
		mov	[esi+18h], ecx
		test	ecx, ecx
		jnz	short loc_10009731

loc_10009727:				; CODE XREF: sub_1000969B+C3j
					; sub_1000969B+F5j
		push	0FFFFE013h
		jmp	loc_100097C4
; ---------------------------------------------------------------------------

loc_10009731:				; CODE XREF: sub_1000969B+8Aj
		push	dword ptr [esi+1Ch] ; Size
		mov	eax, [edi+4]
		add	eax, 6
		push	eax		; Src
		push	ecx		; Dst
		call	memcpy
		add	esp, 0Ch
		cmp	dword ptr [esi+28h], 0
		jz	short loc_10009776
		push	dword ptr [esi+28h]
		push	dword ptr [esi+0Ch]
		call	PORT_ArenaAlloc_Util
		mov	edx, eax
		mov	[esi+24h], edx
		pop	ecx
		pop	ecx
		test	edx, edx
		jz	short loc_10009727
		mov	eax, [edi+4]
		push	dword ptr [esi+28h] ; Size
		add	eax, 6
		add	eax, [esi+1Ch]
		push	eax		; Src
		push	edx		; Dst
		call	memcpy
		add	esp, 0Ch

loc_10009776:				; CODE XREF: sub_1000969B+ADj
		cmp	dword ptr [esi+34h], 0
		jz	short loc_100097AD
		push	dword ptr [esi+34h]
		push	dword ptr [esi+0Ch]
		call	PORT_ArenaAlloc_Util
		mov	edx, eax
		mov	[esi+30h], edx
		pop	ecx
		pop	ecx
		test	edx, edx
		jz	short loc_10009727
		mov	ecx, [esi+28h]
		mov	eax, [edi+4]
		push	dword ptr [esi+34h] ; Size
		add	ecx, [esi+1Ch]
		add	eax, 6
		add	eax, ecx
		push	eax		; Src
		push	edx		; Dst
		call	memcpy
		add	esp, 0Ch

loc_100097AD:				; CODE XREF: sub_1000969B+DFj
		mov	eax, [esi+34h]
		test	eax, eax
		jz	short loc_100097BA
		cmp	dword ptr [esi+28h], 0
		jnz	short loc_100097CF

loc_100097BA:				; CODE XREF: sub_1000969B+117j
		cmp	[esi+28h], eax
		jz	short loc_100097CF

loc_100097BF:				; CODE XREF: sub_1000969B+Bj
					; sub_1000969B+61j ...
		push	0FFFFE012h

loc_100097C4:				; CODE XREF: sub_1000969B+91j
		call	PORT_SetError_Util
		pop	ecx
		or	eax, 0FFFFFFFFh
		jmp	short loc_100097FA
; ---------------------------------------------------------------------------

loc_100097CF:				; CODE XREF: sub_1000969B+11Dj
					; sub_1000969B+122j
		push	[esp+0Ch+Str]	; Str
		call	strlen
		inc	eax
		push	eax
		push	dword ptr [esi+0Ch]
		call	PORT_ArenaAlloc_Util
		add	esp, 0Ch
		mov	[esi+10h], eax
		test	eax, eax
		jz	short loc_100097F8
		push	[esp+0Ch+Str]	; Source
		push	eax		; Dest
		call	strcpy
		pop	ecx
		pop	ecx

loc_100097F8:				; CODE XREF: sub_1000969B+14Fj
		xor	eax, eax

loc_100097FA:				; CODE XREF: sub_1000969B+132j
		pop	edi
		pop	esi
		pop	ebx
		retn
sub_1000969B	endp


; =============== S U B	R O U T	I N E =======================================


sub_100097FE	proc near		; CODE XREF: sub_1000B092+B7p

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
Size		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 18h
		push	ebx
		push	ebp
		push	esi
		push	edi
		mov	edi, [esp+28h+arg_0]
		mov	ebp, [edi+0Ch]
		push	ebp
		mov	[esp+2Ch+arg_0], ebp
		call	PORT_ArenaMark_Util
		push	[esp+2Ch+arg_8]
		lea	ecx, [edi+10h]
		mov	[esp+30h+var_4], eax
		push	ecx
		push	ebp
		call	SECITEM_CopyItem_Util
		add	esp, 10h
		test	eax, eax
		jnz	loc_10009B32
		mov	ebx, [esp+28h+arg_4]
		cmp	dword ptr [ebx+8], 6
		jnb	short loc_1000984D

loc_1000983D:				; CODE XREF: sub_100097FE+A5j
					; sub_100097FE+1F0j
		push	0FFFFE012h

loc_10009842:				; CODE XREF: sub_100097FE+ECj
		call	PORT_SetError_Util
		pop	ecx
		jmp	loc_10009B32
; ---------------------------------------------------------------------------

loc_1000984D:				; CODE XREF: sub_100097FE+3Dj
		mov	eax, [ebx+4]
		movzx	edx, byte ptr [eax]
		movzx	eax, byte ptr [eax+1]
		shl	edx, 8
		or	edx, eax
		mov	[edi+1Ch], edx
		mov	ecx, [ebx+4]
		mov	[esp+28h+var_10], edx
		movzx	esi, byte ptr [ecx+2]
		movzx	eax, byte ptr [ecx+3]
		shl	esi, 8
		or	esi, eax
		movzx	eax, byte ptr [ecx+4]
		shl	eax, 8
		mov	[esp+28h+var_18], eax
		movzx	eax, byte ptr [ecx+5]
		mov	ecx, [esp+28h+var_18]
		or	ecx, eax
		mov	[esp+28h+Size],	esi
		mov	[esp+28h+var_18], ecx
		lea	eax, [ecx+6]
		add	eax, esi
		mov	[esp+28h+var_8], eax
		lea	eax, [eax+edx*4]
		mov	[esp+28h+var_14], eax
		cmp	[ebx+8], eax
		jb	short loc_1000983D
		imul	esi, edx, 0Ch
		push	esi
		push	ebp
		call	PORT_ArenaAlloc_Util
		push	esi
		push	ebp
		mov	[edi+24h], eax
		call	PORT_ArenaAlloc_Util
		xor	ebx, ebx
		mov	[edi+28h], eax
		add	esp, 10h
		cmp	[edi+24h], ebx
		jz	short loc_100098E5
		test	eax, eax
		jz	short loc_100098E5
		mov	esi, [esp+28h+Size]
		cmp	esi, 1
		jbe	short loc_10009906
		push	esi
		push	ebp
		call	PORT_ArenaAlloc_Util
		pop	ecx
		pop	ecx
		mov	ecx, eax
		mov	[edi+20h], ecx
		test	ecx, ecx
		jnz	short loc_100098EF

loc_100098E5:				; CODE XREF: sub_100097FE+C6j
					; sub_100097FE+CAj ...
		push	0FFFFE013h
		jmp	loc_10009842
; ---------------------------------------------------------------------------

loc_100098EF:				; CODE XREF: sub_100097FE+E5j
		push	esi		; Size
		mov	esi, [esp+2Ch+arg_4]
		mov	eax, [esi+4]
		add	eax, 6
		push	eax		; Src
		push	ecx		; Dst
		call	memcpy
		add	esp, 0Ch
		jmp	short loc_1000990D
; ---------------------------------------------------------------------------

loc_10009906:				; CODE XREF: sub_100097FE+D3j
		mov	esi, [esp+28h+arg_4]
		mov	[edi+20h], ebx

loc_1000990D:				; CODE XREF: sub_100097FE+106j
		cmp	[esp+28h+var_18], 1
		mov	[edi+30h], ebx
		jbe	short loc_10009965
		push	8
		push	ebp
		call	PORT_ArenaAlloc_Util
		mov	[edi+2Ch], eax
		pop	ecx
		pop	ecx
		test	eax, eax
		jz	short loc_100098E5
		push	[esp+28h+var_18]
		push	ebp
		call	PORT_ArenaAlloc_Util
		pop	ecx
		pop	ecx
		mov	ecx, [edi+2Ch]
		mov	[ecx], eax
		mov	eax, [edi+2Ch]
		mov	edx, [eax]
		test	edx, edx
		jz	short loc_100098E5
		mov	ecx, [esp+28h+Size]
		mov	eax, [esi+4]
		add	ecx, 6
		push	[esp+28h+var_18] ; Size
		add	eax, ecx
		push	eax		; Src
		push	edx		; Dst
		call	memcpy
		add	esp, 0Ch
		mov	dword ptr [edi+30h], 1
		jmp	short loc_10009968
; ---------------------------------------------------------------------------

loc_10009965:				; CODE XREF: sub_100097FE+117j
		mov	[edi+2Ch], ebx

loc_10009968:				; CODE XREF: sub_100097FE+165j
		mov	esi, [esi+4]
		add	esi, [esp+28h+var_8]
		mov	edx, [esp+28h+var_10]
		test	edx, edx
		jz	short loc_100099E3
		mov	ebp, ebx
		mov	ebx, [esp+28h+var_14]

loc_1000997D:				; CODE XREF: sub_100097FE+19Bj
		movzx	ecx, byte ptr [esi]
		lea	ebp, [ebp+0Ch]
		movzx	eax, byte ptr [esi+1]
		add	esi, 2
		shl	ecx, 8
		or	ecx, eax
		mov	eax, [edi+24h]
		add	ebx, ecx
		mov	[eax+ebp-4], ecx
		dec	edx
		jnz	short loc_1000997D
		mov	edx, [esp+28h+var_10]
		mov	ebp, [esp+28h+arg_0]
		mov	[esp+28h+var_14], ebx
		xor	ebx, ebx
		test	edx, edx
		jz	short loc_100099E3
		mov	ebp, ebx
		mov	[esp+28h+var_8], edx
		mov	ebx, [esp+28h+var_14]

loc_100099B7:				; CODE XREF: sub_100097FE+1D5j
		movzx	ecx, byte ptr [esi]
		lea	ebp, [ebp+0Ch]
		movzx	eax, byte ptr [esi+1]
		add	esi, 2
		shl	ecx, 8
		or	ecx, eax
		mov	eax, [edi+28h]
		add	ebx, ecx
		mov	[eax+ebp-4], ecx
		dec	edx
		jnz	short loc_100099B7
		mov	ebp, [esp+28h+arg_0]
		mov	edx, [esp+28h+var_10]
		mov	[esp+28h+var_14], ebx
		xor	ebx, ebx

loc_100099E3:				; CODE XREF: sub_100097FE+177j
					; sub_100097FE+1ADj
		mov	eax, [esp+28h+arg_4]
		mov	ecx, [esp+28h+var_14]
		cmp	ecx, [eax+8]
		ja	loc_1000983D
		mov	[esp+28h+var_8], ebx
		test	edx, edx
		jz	short loc_10009A5E
		mov	ecx, ebx
		mov	[esp+28h+var_14], ebx

loc_10009A02:				; CODE XREF: sub_100097FE+25Ej
		mov	eax, [edi+24h]
		mov	eax, [ecx+eax+8]
		push	eax
		push	ebp
		mov	[esp+30h+Size],	eax
		call	PORT_ArenaAlloc_Util
		mov	edx, [esp+30h+var_14]
		pop	ecx
		pop	ecx
		mov	ecx, [edi+24h]
		mov	[edx+ecx+4], eax
		mov	eax, [edi+24h]
		mov	eax, [edx+eax+4]
		test	eax, eax
		jz	loc_100098E5
		push	[esp+28h+Size]	; Size
		push	esi		; Src
		push	eax		; Dst
		call	memcpy
		mov	eax, [esp+34h+var_8]
		add	esp, 0Ch
		add	esi, [esp+28h+Size]
		inc	eax
		mov	ecx, [esp+28h+var_14]
		mov	edx, [esp+28h+var_10]
		add	ecx, 0Ch
		mov	[esp+28h+var_8], eax
		mov	[esp+28h+var_14], ecx
		cmp	eax, edx
		jb	short loc_10009A02

loc_10009A5E:				; CODE XREF: sub_100097FE+1FCj
		mov	[esp+28h+Size],	ebx
		test	edx, edx
		jz	short loc_10009AC6
		mov	ecx, ebx
		mov	[esp+28h+var_14], ebx

loc_10009A6C:				; CODE XREF: sub_100097FE+2C6j
		mov	eax, [edi+28h]
		mov	eax, [ecx+eax+8]
		push	eax
		push	ebp
		mov	[esp+30h+var_8], eax
		call	PORT_ArenaAlloc_Util
		mov	edx, [esp+30h+var_14]
		pop	ecx
		pop	ecx
		mov	ecx, [edi+28h]
		mov	[edx+ecx+4], eax
		mov	eax, [edi+28h]
		mov	eax, [edx+eax+4]
		test	eax, eax
		jz	loc_100098E5
		push	[esp+28h+var_8]	; Size
		push	esi		; Src
		push	eax		; Dst
		call	memcpy
		mov	eax, [esp+34h+Size]
		add	esp, 0Ch
		add	esi, [esp+28h+var_8]
		inc	eax
		mov	ecx, [esp+28h+var_14]
		add	ecx, 0Ch
		mov	[esp+28h+Size],	eax
		mov	[esp+28h+var_14], ecx
		cmp	eax, [esp+28h+var_10]
		jb	short loc_10009A6C

loc_10009AC6:				; CODE XREF: sub_100097FE+266j
		mov	eax, [esp+28h+arg_4]
		mov	ebp, [eax+8]
		add	ebp, [eax+4]
		cmp	[esp+28h+var_18], 0
		mov	[esp+28h+var_10], ebp
		jnz	loc_10009BA6
		mov	eax, ebp
		sub	eax, esi
		cmp	eax, 1
		jle	loc_10009BA6
		movzx	ecx, byte ptr [esi]
		movzx	eax, byte ptr [esi+1]
		add	esi, 2
		shl	ecx, 8
		or	ecx, eax
		mov	edx, ecx
		mov	[edi+30h], ecx
		mov	ecx, ebp
		sub	ecx, esi
		lea	eax, [edx+edx]
		cmp	ecx, eax
		jl	short loc_10009B2E
		mov	eax, edx
		shl	eax, 2
		push	eax
		push	[esp+2Ch+arg_0]
		call	PORT_ArenaAlloc_Util
		mov	[edi+2Ch], eax
		pop	ecx
		pop	ecx
		test	eax, eax
		jnz	short loc_10009B49

loc_10009B23:				; CODE XREF: sub_100097FE+389j
		push	0FFFFE013h
		call	PORT_SetError_Util
		pop	ecx

loc_10009B2E:				; CODE XREF: sub_100097FE+30Bj
					; sub_100097FE+357j ...
		mov	ebp, [esp+28h+arg_0]

loc_10009B32:				; CODE XREF: sub_100097FE+2Fj
					; sub_100097FE+4Aj
		push	[esp+28h+var_4]
		push	ebp
		call	PORT_ArenaRelease_Util
		or	eax, 0FFFFFFFFh

loc_10009B3F:				; CODE XREF: sub_100097FE+3B7j
		pop	ecx
		pop	ecx
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 18h
		retn
; ---------------------------------------------------------------------------

loc_10009B49:				; CODE XREF: sub_100097FE+323j
		cmp	[edi+30h], ebx
		jbe	short loc_10009BA2

loc_10009B4E:				; CODE XREF: sub_100097FE+3A2j
		mov	eax, ebp
		sub	eax, esi
		cmp	eax, 2
		jl	short loc_10009B2E
		movzx	ebp, byte ptr [esi]
		movzx	eax, byte ptr [esi+1]
		add	esi, 2
		shl	ebp, 8
		or	ebp, eax
		mov	eax, [esp+28h+var_10]
		sub	eax, esi
		cmp	eax, ebp
		jl	short loc_10009B2E
		push	ebp
		push	[esp+2Ch+arg_0]
		call	PORT_ArenaAlloc_Util
		pop	ecx
		pop	ecx
		mov	ecx, [edi+2Ch]
		mov	[ecx+ebx*4], eax
		mov	eax, [edi+2Ch]
		test	eax, eax
		jz	short loc_10009B23
		push	ebp		; Size
		push	esi		; Src
		push	dword ptr [eax+ebx*4] ;	Dst
		call	memcpy
		add	esi, ebp
		add	esp, 0Ch
		mov	ebp, [esp+28h+var_10]
		inc	ebx
		cmp	ebx, [edi+30h]
		jb	short loc_10009B4E

loc_10009BA2:				; CODE XREF: sub_100097FE+34Ej
		cmp	esi, ebp
		jnz	short loc_10009B2E

loc_10009BA6:				; CODE XREF: sub_100097FE+2DBj
					; sub_100097FE+2E8j
		push	[esp+28h+var_4]
		push	[esp+2Ch+arg_0]
		call	PORT_ArenaUnmark_Util
		xor	eax, eax
		jmp	short loc_10009B3F
sub_100097FE	endp


; =============== S U B	R O U T	I N E =======================================


sub_10009BB7	proc near		; CODE XREF: sub_1000C682+30p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi
		call	sub_1000C745
		mov	esi, dword_10015040
		test	esi, esi
		jz	short loc_10009BD4
		mov	eax, [esi]
		dec	dword_1001504C
		mov	dword_10015040,	eax

loc_10009BD4:				; CODE XREF: sub_10009BB7+Ej
		call	sub_1000CBDC
		test	esi, esi
		jnz	short loc_10009BF0
		push	220h
		call	PORT_ZAlloc_Util
		mov	esi, eax
		pop	ecx
		test	esi, esi
		jnz	short loc_10009BF0
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10009BF0:				; CODE XREF: sub_10009BB7+24j
					; sub_10009BB7+35j
		mov	eax, [esp+4+arg_0]
		push	ebx
		mov	ebx, [esp+8+arg_8]
		push	edi
		mov	edi, [esp+0Ch+arg_4]
		mov	[esi+4], eax
		lea	eax, [esi+20h]
		push	200h		; int
		push	eax		; int
		mov	[esi+14h], edi
		push	dword ptr [ebx+8] ; Size
		push	dword ptr [ebx+4] ; Src
		call	sub_1000D0DA
		add	esp, 10h
		mov	[esi+0Ch], eax
		test	eax, eax
		jnz	short loc_10009C2D
		push	esi
		call	PORT_Free_Util
		pop	ecx
		xor	eax, eax
		jmp	short loc_10009C41
; ---------------------------------------------------------------------------

loc_10009C2D:				; CODE XREF: sub_10009BB7+69j
		mov	eax, [ebx+8]
		mov	[esi+10h], eax
		lea	eax, [edi+14h]
		mov	[esi+18h], eax
		lea	eax, [edi+20h]
		mov	[esi+1Ch], eax
		mov	eax, esi

loc_10009C41:				; CODE XREF: sub_10009BB7+74j
		pop	edi
		pop	ebx
		pop	esi
		retn
sub_10009BB7	endp


; =============== S U B	R O U T	I N E =======================================


sub_10009C45	proc near		; CODE XREF: sub_1000B344+51p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		cmp	[esp+arg_4], 7
		jge	short loc_10009C5A
		push	0FFFFE012h
		call	PORT_SetError_Util
		pop	ecx
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_10009C5A:				; CODE XREF: sub_10009C45+5j
		push	ebx
		push	ebp
		mov	ebp, [esp+8+arg_0]
		push	edi
		movzx	edi, byte ptr [ebp+3]
		movzx	eax, byte ptr [ebp+4]
		movzx	ebx, byte ptr [ebp+5]
		shl	edi, 8
		or	edi, eax
		shl	ebx, 8
		movzx	eax, byte ptr [ebp+6]
		or	ebx, eax
		lea	eax, [edi+7]
		add	eax, ebx
		cmp	eax, [esp+0Ch+arg_4]
		jz	short loc_10009C8D
		push	0FFFFE012h
		jmp	short loc_10009CA5
; ---------------------------------------------------------------------------

loc_10009C8D:				; CODE XREF: sub_10009C45+3Fj
		push	800h
		call	PORT_NewArena_Util
		mov	[esp+10h+arg_4], eax
		pop	ecx
		test	eax, eax
		jnz	short loc_10009CB2
		push	0FFFFE013h

loc_10009CA5:				; CODE XREF: sub_10009C45+46j
		call	PORT_SetError_Util
		pop	ecx
		xor	eax, eax
		jmp	loc_10009D79
; ---------------------------------------------------------------------------

loc_10009CB2:				; CODE XREF: sub_10009C45+59j
		push	esi
		push	8F8h
		push	eax
		call	PORT_ArenaAlloc_Util
		mov	esi, eax
		pop	ecx
		pop	ecx
		test	esi, esi
		jz	loc_10009D5E
		mov	ecx, [esp+10h+arg_4]
		and	dword ptr [esi+8], 0
		mov	[esi+0Ch], ecx
		mov	dword ptr [esi+4], 8
		mov	dword ptr [esi], 1
		movzx	eax, byte ptr [ebp+0]
		mov	[esi+14h], eax
		movzx	eax, byte ptr [ebp+1]
		mov	[esi+18h], eax
		movzx	eax, byte ptr [ebp+2]
		push	edi
		push	ecx
		mov	[esi+1Ch], eax
		call	PORT_ArenaAlloc_Util
		mov	[esi+24h], eax
		pop	ecx
		pop	ecx
		test	eax, eax
		jz	short loc_10009D5E
		push	edi		; Size
		lea	ecx, [ebp+7]
		mov	[esi+28h], edi
		push	ecx		; Src
		push	eax		; Dst
		call	memcpy
		add	esp, 0Ch
		test	ebx, ebx
		jz	short loc_10009D56
		push	ebx
		push	[esp+14h+arg_4]
		call	PORT_ArenaAlloc_Util
		mov	[esi+2Ch], eax
		pop	ecx
		pop	ecx
		test	eax, eax
		jz	short loc_10009D5E
		lea	ecx, [ebp+7]
		push	ebx		; Size
		add	ecx, edi
		push	ecx		; Src
		push	eax		; Dst
		call	memcpy
		push	offset aServerCert ; "Server-Cert"
		push	dword ptr [esi+2Ch] ; Str1
		call	strcmp
		add	esp, 14h
		test	eax, eax
		jnz	short loc_10009D5A
		or	dword ptr [esi+14h], 40h
		jmp	short loc_10009D5A
; ---------------------------------------------------------------------------

loc_10009D56:				; CODE XREF: sub_10009C45+D5j
		and	dword ptr [esi+2Ch], 0

loc_10009D5A:				; CODE XREF: sub_10009C45+109j
					; sub_10009C45+10Fj
		mov	eax, esi
		jmp	short loc_10009D78
; ---------------------------------------------------------------------------

loc_10009D5E:				; CODE XREF: sub_10009C45+7Fj
					; sub_10009C45+C0j ...
		push	0
		push	[esp+14h+arg_4]
		call	PORT_FreeArena_Util
		push	0FFFFE013h
		call	PORT_SetError_Util
		add	esp, 0Ch
		xor	eax, eax

loc_10009D78:				; CODE XREF: sub_10009C45+117j
		pop	esi

loc_10009D79:				; CODE XREF: sub_10009C45+68j
		pop	edi
		pop	ebp
		pop	ebx
		retn
sub_10009C45	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10009D7D	proc near		; CODE XREF: sub_10008F87+123p
					; sub_1000C14B+17p

var_C		= byte ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		xor	ecx, ecx
		lea	eax, [ebp+var_C]
		push	eax
		push	ecx
		push	[ebp+arg_4]
		mov	[ebp+var_8], ecx
		mov	[ebp+var_4], ecx
		call	sub_1000A239
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_10009DC2
		lea	eax, [ebp+var_C]
		push	eax
		push	1
		push	[ebp+arg_0]
		call	sub_10009E3E
		add	esp, 0Ch
		cmp	eax, 0FFFFFFFFh
		jz	short loc_10009DC2
		push	[ebp+var_8]
		call	PORT_Free_Util
		pop	ecx
		xor	eax, eax
		jmp	short loc_10009DD4
; ---------------------------------------------------------------------------

loc_10009DC2:				; CODE XREF: sub_10009D7D+20j
					; sub_10009D7D+36j
		cmp	[ebp+var_8], 0
		jz	short loc_10009DD1
		push	[ebp+var_8]
		call	PORT_Free_Util
		pop	ecx

loc_10009DD1:				; CODE XREF: sub_10009D7D+49j
		or	eax, 0FFFFFFFFh

loc_10009DD4:				; CODE XREF: sub_10009D7D+43j
		mov	esp, ebp
		pop	ebp
		retn
sub_10009D7D	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10009DD8	proc near		; CODE XREF: sub_1000C12D+15p
					; sub_1000CBEA+1Bp

var_C		= byte ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		push	800h
		call	PORT_NewArena_Util
		mov	esi, eax
		pop	ecx
		test	esi, esi
		jz	short loc_10009E36
		push	[ebp+arg_8]
		lea	eax, [ebp+var_C]
		push	eax
		push	esi
		push	[ebp+arg_4]
		call	sub_1000A33C
		add	esp, 10h
		test	eax, eax
		jnz	short loc_10009E2C
		lea	eax, [ebp+var_C]
		push	eax
		push	[ebp+arg_8]
		push	[ebp+arg_0]
		call	sub_10009E3E
		add	esp, 0Ch
		cmp	eax, 0FFFFFFFFh
		jz	short loc_10009E2C
		push	0
		push	esi
		call	PORT_FreeArena_Util
		pop	ecx
		pop	ecx
		xor	eax, eax
		jmp	short loc_10009E39
; ---------------------------------------------------------------------------

loc_10009E2C:				; CODE XREF: sub_10009DD8+2Dj
					; sub_10009DD8+44j
		push	0
		push	esi
		call	PORT_FreeArena_Util
		pop	ecx
		pop	ecx

loc_10009E36:				; CODE XREF: sub_10009DD8+16j
		or	eax, 0FFFFFFFFh

loc_10009E39:				; CODE XREF: sub_10009DD8+52j
		pop	esi
		mov	esp, ebp
		pop	ebp
		retn
sub_10009DD8	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10009E3E	proc near		; CODE XREF: sub_10009D7D+2Bp
					; sub_10009DD8+39p ...

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= byte ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ecx
		mov	eax, [ebp+arg_8]
		push	esi
		push	edi
		mov	edi, [ebp+arg_0]
		mov	ecx, [eax+4]
		mov	eax, [eax+8]
		push	dword_10015054
		mov	[ebp+var_4], eax
		mov	al, [ebp+arg_4]
		mov	[ebp+var_8], ecx
		mov	[ecx], al
		mov	esi, [edi]
		call	ds:PR_Lock
		push	0
		lea	eax, [ebp+var_8]
		push	eax
		push	esi
		call	dword ptr [esi+8]
		push	dword_10015054
		mov	esi, eax
		call	ds:PR_Unlock
		add	esp, 14h
		lea	ecx, [esi+790Fh]
		neg	ecx
		sbb	ecx, ecx
		and	ecx, esi
		jnz	short loc_10009EA1
		push	ecx
		push	dword ptr [edi]
		call	sub_1000BF05
		pop	ecx
		pop	ecx
		test	eax, eax
		jz	short loc_10009EB1

loc_10009EA1:				; CODE XREF: sub_10009E3E+53j
		push	0FFFFE012h
		call	PORT_SetError_Util
		pop	ecx
		or	eax, 0FFFFFFFFh
		jmp	short loc_10009EB3
; ---------------------------------------------------------------------------

loc_10009EB1:				; CODE XREF: sub_10009E3E+61j
		xor	eax, eax

loc_10009EB3:				; CODE XREF: sub_10009E3E+71j
		pop	edi
		pop	esi
		mov	esp, ebp
		pop	ebp
		retn
sub_10009E3E	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_10009EB9(int,	char *Str)
sub_10009EB9	proc near		; CODE XREF: sub_10008F87+13Ap
					; sub_1000B22D+F2p

var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8
Str		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		cmp	[ebp+Str], 0
		jnz	short loc_10009EC9
		xor	eax, eax
		jmp	short loc_10009F21
; ---------------------------------------------------------------------------

loc_10009EC9:				; CODE XREF: sub_10009EB9+Aj
		push	esi
		push	800h
		call	PORT_NewArena_Util
		mov	esi, eax
		pop	ecx
		test	esi, esi
		jz	short loc_10009F1D
		lea	eax, [ebp+var_C]
		push	eax		; int
		push	esi		; int
		push	[ebp+Str]	; Str
		call	sub_1000A400
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_10009F13
		lea	eax, [ebp+var_C]
		push	eax
		push	2
		push	[ebp+arg_0]
		call	sub_10009E3E
		add	esp, 0Ch
		cmp	eax, 0FFFFFFFFh
		jz	short loc_10009F13
		push	0
		push	esi
		call	PORT_FreeArena_Util
		pop	ecx
		pop	ecx
		xor	eax, eax
		jmp	short loc_10009F20
; ---------------------------------------------------------------------------

loc_10009F13:				; CODE XREF: sub_10009EB9+34j
					; sub_10009EB9+4Aj
		push	0
		push	esi
		call	PORT_FreeArena_Util
		pop	ecx
		pop	ecx

loc_10009F1D:				; CODE XREF: sub_10009EB9+20j
		or	eax, 0FFFFFFFFh

loc_10009F20:				; CODE XREF: sub_10009EB9+58j
		pop	esi

loc_10009F21:				; CODE XREF: sub_10009EB9+Ej
		mov	esp, ebp
		pop	ebp
		retn
sub_10009EB9	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_10009F25(int,	char *Str)
sub_10009F25	proc near		; CODE XREF: sub_1000B22D+D9p
					; sub_1000CCE9+6Cp

var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8
Str		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		push	800h
		call	PORT_NewArena_Util
		mov	esi, eax
		pop	ecx
		test	esi, esi
		jz	short loc_10009F7F
		lea	eax, [ebp+var_C]
		push	eax		; int
		push	esi		; int
		push	[ebp+Str]	; Str
		call	sub_1000A50C
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_10009F75
		lea	eax, [ebp+var_C]
		push	eax
		push	6
		push	[ebp+arg_0]
		call	sub_10009E3E
		add	esp, 0Ch
		cmp	eax, 0FFFFFFFFh
		jz	short loc_10009F75
		push	0
		push	esi
		call	PORT_FreeArena_Util
		pop	ecx
		pop	ecx
		xor	eax, eax
		jmp	short loc_10009F82
; ---------------------------------------------------------------------------

loc_10009F75:				; CODE XREF: sub_10009F25+2Aj
					; sub_10009F25+40j
		push	0
		push	esi
		call	PORT_FreeArena_Util
		pop	ecx
		pop	ecx

loc_10009F7F:				; CODE XREF: sub_10009F25+16j
		or	eax, 0FFFFFFFFh

loc_10009F82:				; CODE XREF: sub_10009F25+4Ej
		pop	esi
		mov	esp, ebp
		pop	ebp
		retn
sub_10009F25	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10009F87	proc near		; CODE XREF: sub_1000916D+45p
					; sub_100091CE+1D3p ...

var_C		= byte ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		push	800h
		call	PORT_NewArena_Util
		mov	esi, eax
		pop	ecx
		test	esi, esi
		jz	short loc_10009FE1
		lea	eax, [ebp+var_C]
		push	eax
		push	esi
		push	[ebp+arg_4]
		call	sub_1000A7A5
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_10009FD7
		lea	eax, [ebp+var_C]
		push	eax
		push	3
		push	[ebp+arg_0]
		call	sub_10009E3E
		add	esp, 0Ch
		cmp	eax, 0FFFFFFFFh
		jz	short loc_10009FD7
		push	0
		push	esi
		call	PORT_FreeArena_Util
		pop	ecx
		pop	ecx
		xor	eax, eax
		jmp	short loc_10009FE4
; ---------------------------------------------------------------------------

loc_10009FD7:				; CODE XREF: sub_10009F87+2Aj
					; sub_10009F87+40j
		push	0
		push	esi
		call	PORT_FreeArena_Util
		pop	ecx
		pop	ecx

loc_10009FE1:				; CODE XREF: sub_10009F87+16j
		or	eax, 0FFFFFFFFh

loc_10009FE4:				; CODE XREF: sub_10009F87+4Ej
		pop	esi
		mov	esp, ebp
		pop	ebp
		retn
sub_10009F87	endp


; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10009FE9(void	*Dst, int)
sub_10009FE9	proc near		; CODE XREF: sub_1000BD80+9Ep
					; sub_1000C19A+6p

Dst		= dword	ptr  4
arg_4		= dword	ptr  8

		push	edi
		mov	edi, [esp+4+Dst]
		test	edi, edi
		jz	loc_1000A0DB
		cmp	[esp+4+arg_4], 0
		push	ebx
		mov	ebx, [edi+4]
		jz	short loc_1000A00C
		test	ebx, ebx
		jz	short loc_1000A00C
		push	ebx
		call	sub_1000C736
		pop	ecx

loc_1000A00C:				; CODE XREF: sub_10009FE9+16j
					; sub_10009FE9+1Aj
		push	esi
		push	dword_10015058
		call	ds:PR_Lock
		dec	dword ptr [edi+94h]
		push	dword_10015058
		mov	esi, [edi+94h]
		call	ds:PR_Unlock
		pop	ecx
		pop	ecx
		test	esi, esi
		pop	esi
		jnz	loc_1000A0C8
		cmp	dword ptr [edi+6Ch], 0
		jz	short loc_1000A04B
		push	dword ptr [edi+6Ch] ; Dst
		call	sub_1000A0DD
		pop	ecx

loc_1000A04B:				; CODE XREF: sub_10009FE9+57j
		lea	eax, [edi+98h]
		push	eax
		push	dword ptr [edi+88h]
		call	sub_1000D109
		lea	eax, [edi+160h]
		push	eax
		push	dword ptr [edi+8Ch]
		call	sub_1000D109
		lea	eax, [edi+228h]
		push	eax
		push	dword ptr [edi+58h]
		call	sub_1000D109
		xor	eax, eax
		push	428h		; Size
		push	eax		; Val
		push	edi		; Dst
		mov	[edi+58h], eax
		mov	[edi+88h], eax
		call	memset
		add	esp, 24h
		call	sub_1000C745
		mov	eax, dword_10015048
		cmp	eax, 0Ah
		jle	short loc_1000A0B0
		push	edi
		call	PORT_Free_Util
		pop	ecx
		jmp	short loc_1000A0C3
; ---------------------------------------------------------------------------

loc_1000A0B0:				; CODE XREF: sub_10009FE9+BCj
		inc	eax
		mov	dword_10015048,	eax
		mov	eax, dword_1001503C
		mov	[edi], eax
		mov	dword_1001503C,	edi

loc_1000A0C3:				; CODE XREF: sub_10009FE9+C5j
		call	sub_1000CBDC

loc_1000A0C8:				; CODE XREF: sub_10009FE9+4Dj
		cmp	[esp+8+arg_4], 0
		jz	short loc_1000A0DA
		test	ebx, ebx
		jz	short loc_1000A0DA
		push	ebx
		call	sub_1000CBCD
		pop	ecx

loc_1000A0DA:				; CODE XREF: sub_10009FE9+E4j
					; sub_10009FE9+E8j
		pop	ebx

loc_1000A0DB:				; CODE XREF: sub_10009FE9+7j
		pop	edi
		retn
sub_10009FE9	endp


; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1000A0DD(void	*Dst)
sub_1000A0DD	proc near		; CODE XREF: sub_10008F87+107p
					; sub_10008F87+10Ep ...

Dst		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+Dst]
		push	edi
		mov	edi, [esi+0Ch]
		test	edi, edi
		jnz	short loc_1000A150
		cmp	dword ptr [esi], 1
		jnz	short loc_1000A165
		lea	eax, [esi+0F8h]
		push	eax
		push	dword ptr [esi+24h]
		call	sub_1000D109
		lea	eax, [esi+30h]
		push	eax
		push	dword ptr [esi+2Ch]
		call	sub_1000D109
		add	esp, 10h
		call	sub_1000C745
		mov	eax, dword_10015050
		cmp	eax, 0Ah
		jle	short loc_1000A125
		push	esi
		call	PORT_Free_Util
		pop	ecx
		jmp	short loc_1000A149
; ---------------------------------------------------------------------------

loc_1000A125:				; CODE XREF: sub_1000A0DD+3Dj
		push	8F8h		; Size
		inc	eax
		push	0		; Val
		push	esi		; Dst
		mov	dword_10015050,	eax
		call	memset
		mov	eax, dword_10015044
		add	esp, 0Ch
		mov	[esi+10h], eax
		mov	dword_10015044,	esi

loc_1000A149:				; CODE XREF: sub_1000A0DD+46j
		pop	edi
		pop	esi
		jmp	sub_1000CBDC
; ---------------------------------------------------------------------------

loc_1000A150:				; CODE XREF: sub_1000A0DD+Bj
		push	10h		; Size
		push	0		; Val
		push	esi		; Dst
		call	memset
		push	0
		push	edi
		call	PORT_FreeArena_Util
		add	esp, 14h

loc_1000A165:				; CODE XREF: sub_1000A0DD+10j
		pop	edi
		pop	esi
		retn
sub_1000A0DD	endp


; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1000A168(size_t Size,	int, int)
sub_1000A168	proc near		; CODE XREF: sub_1000B9FE+22p

var_1		= byte ptr -1
Size		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ecx
		push	ebx
		push	ebp
		push	esi
		push	edi
		mov	edi, [esp+14h+Size]
		mov	[esp+14h+var_1], 0
		mov	ebp, [edi+2Ch]
		test	ebp, ebp
		jnz	short loc_1000A181
		lea	ebp, [esp+14h+var_1]

loc_1000A181:				; CODE XREF: sub_1000A168+13j
		push	ebp		; Str
		call	strlen
		mov	ecx, [edi+28h]
		inc	eax
		mov	esi, [esp+18h+arg_8]
		add	ecx, 0Dh
		add	ecx, eax
		mov	[esp+18h+Size],	eax
		push	ecx
		push	[esp+1Ch+arg_4]
		mov	[esi+8], ecx
		call	PORT_ArenaAlloc_Util
		mov	ebx, eax
		add	esp, 0Ch
		mov	[esi+4], ebx
		test	ebx, ebx
		jnz	short loc_1000A1C1
		push	0FFFFE013h
		call	PORT_SetError_Util
		pop	ecx
		or	eax, 0FFFFFFFFh
		jmp	short loc_1000A233
; ---------------------------------------------------------------------------

loc_1000A1C1:				; CODE XREF: sub_1000A168+47j
		mov	eax, [edi+14h]
		shr	eax, 8
		mov	[ebx+3], al
		mov	al, [edi+14h]
		mov	[ebx+4], al
		mov	eax, [edi+18h]
		mov	ecx, [esp+14h+Size]
		shr	eax, 8
		mov	[ebx+5], al
		mov	al, [edi+18h]
		mov	[ebx+6], al
		mov	eax, [edi+1Ch]
		shr	eax, 8
		mov	[ebx+7], al
		mov	al, [edi+1Ch]
		mov	[ebx+8], al
		mov	eax, [edi+28h]
		shr	eax, 8
		mov	[ebx+9], al
		mov	al, [edi+28h]
		mov	[ebx+0Ah], al
		mov	eax, ecx
		shr	eax, 8
		mov	[ebx+0Bh], al
		lea	eax, [ebx+0Dh]
		mov	[ebx+0Ch], cl
		push	dword ptr [edi+28h] ; Size
		push	dword ptr [edi+24h] ; Src
		push	eax		; Dst
		call	memcpy
		mov	eax, [edi+28h]
		push	[esp+20h+Size]	; Size
		add	eax, 0Dh
		add	eax, ebx
		push	ebp		; Src
		push	eax		; Dst
		call	memcpy
		add	esp, 18h
		xor	eax, eax

loc_1000A233:				; CODE XREF: sub_1000A168+57j
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		pop	ecx
		retn
sub_1000A168	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_1000A239	proc near		; CODE XREF: sub_10009D7D+16p
					; sub_1000AD0B+8Cp ...

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	ebx
		mov	ebx, [ebp+arg_0]
		push	esi
		push	edi
		mov	esi, [ebx+8]
		inc	esi
		cmp	esi, 0F000h
		ja	short loc_1000A299
		cmp	[ebp+arg_4], 0
		jz	short loc_1000A263
		push	esi
		push	[ebp+arg_4]
		call	PORT_ArenaAlloc_Util
		mov	edi, [ebp+arg_8]
		pop	ecx
		jmp	short loc_1000A271
; ---------------------------------------------------------------------------

loc_1000A263:				; CODE XREF: sub_1000A239+19j
		mov	edi, [ebp+arg_8]
		cmp	[edi+8], esi
		jnb	short loc_1000A275
		push	esi
		call	PORT_Alloc_Util

loc_1000A271:				; CODE XREF: sub_1000A239+28j
		mov	[edi+4], eax
		pop	ecx

loc_1000A275:				; CODE XREF: sub_1000A239+30j
		mov	eax, [edi+4]
		mov	[edi+8], esi
		test	eax, eax
		jz	short loc_1000A299
		push	dword ptr [ebx+8] ; Size
		inc	eax
		push	dword ptr [ebx+4] ; Src
		push	eax		; Dst
		call	memcpy
		mov	eax, [edi+4]
		add	esp, 0Ch
		mov	byte ptr [eax],	1
		xor	eax, eax
		jmp	short loc_1000A29C
; ---------------------------------------------------------------------------

loc_1000A299:				; CODE XREF: sub_1000A239+13j
					; sub_1000A239+44j
		or	eax, 0FFFFFFFFh

loc_1000A29C:				; CODE XREF: sub_1000A239+5Ej
		pop	edi
		pop	esi
		pop	ebx
		pop	ebp
		retn
sub_1000A239	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000A2A1	proc near		; CODE XREF: sub_1000BA90+22p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		push	ebp
		push	edi
		mov	edi, [esp+0Ch+arg_0]
		xor	ebx, ebx
		cmp	[edi+1Ch], ebx
		jz	short loc_1000A2BB
		push	dword ptr [edi+1Ch] ; Str
		call	strlen
		pop	ecx
		lea	ebx, [eax+1]

loc_1000A2BB:				; CODE XREF: sub_1000A2A1+Cj
		mov	ecx, [edi+18h]
		add	ecx, 7
		push	esi
		mov	esi, [esp+10h+arg_8]
		add	ecx, ebx
		push	ecx
		push	[esp+14h+arg_4]
		mov	[esi+8], ecx
		call	PORT_ArenaAlloc_Util
		pop	ecx
		mov	ebp, eax
		mov	[esi+4], ebp
		pop	ecx
		pop	esi
		test	ebp, ebp
		jnz	short loc_1000A2F1
		push	0FFFFE013h
		call	PORT_SetError_Util
		pop	ecx
		or	eax, 0FFFFFFFFh
		jmp	short loc_1000A338
; ---------------------------------------------------------------------------

loc_1000A2F1:				; CODE XREF: sub_1000A2A1+3Ej
		mov	eax, [edi+18h]
		shr	eax, 8
		mov	[ebp+3], al
		mov	al, [edi+18h]
		mov	[ebp+4], al
		mov	eax, ebx
		shr	eax, 8
		mov	[ebp+5], al
		lea	eax, [ebp+7]
		mov	[ebp+6], bl
		push	dword ptr [edi+18h] ; Size
		push	dword ptr [edi+14h] ; Src
		push	eax		; Dst
		call	memcpy
		add	esp, 0Ch
		test	ebx, ebx
		jz	short loc_1000A336
		mov	eax, [edi+18h]
		push	ebx		; Size
		push	dword ptr [edi+1Ch] ; Src
		add	eax, 7
		add	eax, ebp
		push	eax		; Dst
		call	memcpy
		add	esp, 0Ch

loc_1000A336:				; CODE XREF: sub_1000A2A1+7Ej
		xor	eax, eax

loc_1000A338:				; CODE XREF: sub_1000A2A1+4Ej
		pop	edi
		pop	ebp
		pop	ebx
		retn
sub_1000A2A1	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_1000A33C	proc near		; CODE XREF: sub_10009DD8+23p
					; sub_1000AE19+8Bp ...

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	ebx
		mov	ebx, [ebp+arg_C]
		push	esi
		mov	esi, [ebp+arg_8]
		push	edi
		cmp	ebx, 5
		jnz	short loc_1000A36B
		xor	eax, eax
		inc	eax
		push	eax
		push	[ebp+arg_4]
		mov	[esi+8], eax
		call	PORT_ArenaAlloc_Util
		mov	[esi+4], eax
		pop	ecx
		pop	ecx
		test	eax, eax
		jz	short loc_1000A3A5
		mov	[eax], bl

loc_1000A367:				; CODE XREF: sub_1000A33C+67j
		xor	eax, eax
		jmp	short loc_1000A3A8
; ---------------------------------------------------------------------------

loc_1000A36B:				; CODE XREF: sub_1000A33C+Fj
		mov	edi, [ebp+arg_0]
		mov	eax, [edi+8]
		inc	eax
		mov	[esi+8], eax
		cmp	eax, 0F000h
		ja	short loc_1000A3A5
		push	eax
		push	[ebp+arg_4]
		call	PORT_ArenaAlloc_Util
		mov	[esi+4], eax
		pop	ecx
		pop	ecx
		test	eax, eax
		jz	short loc_1000A3A5
		push	dword ptr [edi+8] ; Size
		inc	eax
		push	dword ptr [edi+4] ; Src
		push	eax		; Dst
		call	memcpy
		mov	eax, [esi+4]
		add	esp, 0Ch
		mov	[eax], bl
		jmp	short loc_1000A367
; ---------------------------------------------------------------------------

loc_1000A3A5:				; CODE XREF: sub_1000A33C+27j
					; sub_1000A33C+3Ej ...
		or	eax, 0FFFFFFFFh

loc_1000A3A8:				; CODE XREF: sub_1000A33C+2Dj
		pop	edi
		pop	esi
		pop	ebx
		pop	ebp
		retn
sub_1000A33C	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000A3AD	proc near		; CODE XREF: sub_1000BB7B+22p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi
		mov	esi, [esp+4+arg_8]
		push	edi
		mov	edi, [esp+8+arg_0]
		mov	eax, [edi+1Ch]
		add	eax, 5
		push	eax
		push	[esp+0Ch+arg_4]
		mov	[esi+8], eax
		call	PORT_ArenaAlloc_Util
		pop	ecx
		pop	ecx
		mov	ecx, eax
		mov	[esi+4], ecx
		test	ecx, ecx
		jnz	short loc_1000A3DA
		or	eax, 0FFFFFFFFh
		jmp	short loc_1000A3FD
; ---------------------------------------------------------------------------

loc_1000A3DA:				; CODE XREF: sub_1000A3AD+26j
		mov	eax, [edi+1Ch]
		shr	eax, 8
		mov	[ecx+3], al
		mov	al, [edi+1Ch]
		mov	[ecx+4], al
		lea	eax, [ecx+5]
		push	dword ptr [edi+1Ch] ; Size
		push	dword ptr [edi+18h] ; Src
		push	eax		; Dst
		call	memcpy
		add	esp, 0Ch
		xor	eax, eax

loc_1000A3FD:				; CODE XREF: sub_1000A3AD+2Bj
		pop	edi
		pop	esi
		retn
sub_1000A3AD	endp


; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1000A400(char	*Str, int, int)
sub_1000A400	proc near		; CODE XREF: sub_10009EB9+2Ap
					; sub_1000AFB6+89p ...

Str		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi
		push	edi
		push	[esp+8+Str]	; Str
		call	strlen
		mov	edi, [esp+0Ch+arg_8]
		pop	ecx
		lea	esi, [eax+1]
		lea	eax, [esi+1]
		mov	[edi+8], eax
		cmp	eax, 0F000h
		ja	short loc_1000A44C
		push	eax
		push	[esp+0Ch+arg_4]
		call	PORT_ArenaAlloc_Util
		mov	[edi+4], eax
		pop	ecx
		pop	ecx
		test	eax, eax
		jz	short loc_1000A44C
		push	esi		; Size
		push	[esp+0Ch+Str]	; Src
		inc	eax
		push	eax		; Dst
		call	memcpy
		mov	eax, [edi+4]
		add	esp, 0Ch
		mov	byte ptr [eax],	2
		xor	eax, eax
		jmp	short loc_1000A44F
; ---------------------------------------------------------------------------

loc_1000A44C:				; CODE XREF: sub_1000A400+1Ej
					; sub_1000A400+31j
		or	eax, 0FFFFFFFFh

loc_1000A44F:				; CODE XREF: sub_1000A400+4Aj
		pop	edi
		pop	esi
		retn
sub_1000A400	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000A452	proc near		; CODE XREF: sub_1000BBF5+22p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		push	esi
		mov	esi, [esp+8+arg_8]
		push	edi
		mov	edi, [esp+0Ch+arg_0]
		mov	ecx, [edi+1Ch]
		mov	eax, [edi+34h]
		add	ecx, [edi+28h]
		add	eax, 9
		add	eax, ecx
		push	eax
		push	[esp+10h+arg_4]
		mov	[esi+8], eax
		call	PORT_ArenaAlloc_Util
		mov	ebx, eax
		mov	[esi+4], ebx
		pop	ecx
		pop	ecx
		test	ebx, ebx
		jnz	short loc_1000A493
		push	0FFFFE013h
		call	PORT_SetError_Util
		pop	ecx
		or	eax, 0FFFFFFFFh
		jmp	short loc_1000A508
; ---------------------------------------------------------------------------

loc_1000A493:				; CODE XREF: sub_1000A452+2Fj
		mov	eax, [edi+1Ch]
		shr	eax, 8
		mov	[ebx+3], al
		mov	al, [edi+1Ch]
		mov	[ebx+4], al
		mov	eax, [edi+28h]
		shr	eax, 8
		mov	[ebx+5], al
		mov	al, [edi+28h]
		mov	[ebx+6], al
		mov	eax, [edi+34h]
		shr	eax, 8
		mov	[ebx+7], al
		mov	al, [edi+34h]
		mov	[ebx+8], al
		lea	eax, [ebx+9]
		push	dword ptr [edi+1Ch] ; Size
		push	dword ptr [edi+18h] ; Src
		push	eax		; Dst
		call	memcpy
		add	esp, 0Ch
		cmp	dword ptr [edi+28h], 0
		jz	short loc_1000A506
		push	dword ptr [edi+28h] ; Size
		mov	eax, [edi+1Ch]
		push	dword ptr [edi+24h] ; Src
		add	eax, 9
		add	eax, ebx
		push	eax		; Dst
		call	memcpy
		mov	eax, [edi+1Ch]
		push	dword ptr [edi+34h] ; Size
		add	eax, 9
		add	eax, [edi+28h]
		push	dword ptr [edi+30h] ; Src
		add	eax, ebx
		push	eax		; Dst
		call	memcpy
		add	esp, 18h

loc_1000A506:				; CODE XREF: sub_1000A452+84j
		xor	eax, eax

loc_1000A508:				; CODE XREF: sub_1000A452+3Fj
		pop	edi
		pop	esi
		pop	ebx
		retn
sub_1000A452	endp


; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1000A50C(char	*Str, int, int)
sub_1000A50C	proc near		; CODE XREF: sub_10009F25+20p
					; sub_1000BBF5+36p ...

Str		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi
		push	edi
		push	[esp+8+Str]	; Str
		call	strlen
		mov	edi, [esp+0Ch+arg_8]
		pop	ecx
		lea	esi, [eax+1]
		lea	eax, [esi+1]
		mov	[edi+8], eax
		cmp	eax, 0F000h
		ja	short loc_1000A558
		push	eax
		push	[esp+0Ch+arg_4]
		call	PORT_ArenaAlloc_Util
		mov	[edi+4], eax
		pop	ecx
		pop	ecx
		test	eax, eax
		jz	short loc_1000A558
		push	esi		; Size
		push	[esp+0Ch+Str]	; Src
		inc	eax
		push	eax		; Dst
		call	memcpy
		mov	eax, [edi+4]
		add	esp, 0Ch
		mov	byte ptr [eax],	6
		xor	eax, eax
		jmp	short loc_1000A55B
; ---------------------------------------------------------------------------

loc_1000A558:				; CODE XREF: sub_1000A50C+1Ej
					; sub_1000A50C+31j
		or	eax, 0FFFFFFFFh

loc_1000A55B:				; CODE XREF: sub_1000A50C+4Aj
		pop	edi
		pop	esi
		retn
sub_1000A50C	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000A55E	proc near		; CODE XREF: sub_1000BC6F+22p

Size		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 18h
		push	ebx
		push	ebp
		push	esi
		push	edi
		mov	edi, [esp+28h+arg_0]
		xor	ebx, ebx
		mov	esi, ebx
		mov	[esp+28h+var_8], ebx
		mov	[esp+28h+Size],	esi
		mov	ebp, [edi+24h]
		mov	eax, [edi+28h]
		mov	[esp+28h+var_14], ebp
		mov	[esp+28h+var_C], eax
		cmp	[edi+20h], ebx
		jz	short loc_1000A598
		push	dword ptr [edi+20h] ; Str
		call	strlen
		inc	eax
		pop	ecx
		mov	[esp+28h+Size],	eax
		mov	esi, eax

loc_1000A598:				; CODE XREF: sub_1000A55E+28j
		cmp	[edi+2Ch], ebx
		jz	loc_1000A65A
		mov	ebp, ebx
		push	2
		pop	eax
		mov	[esp+28h+var_10], eax
		cmp	[edi+30h], ebx
		jbe	short loc_1000A5D4
		mov	esi, eax

loc_1000A5B1:				; CODE XREF: sub_1000A55E+68j
		mov	eax, [edi+2Ch]
		push	dword ptr [eax+ebp*4] ;	Str
		call	strlen
		add	esi, 3
		add	esi, eax
		inc	ebp
		pop	ecx
		cmp	ebp, [edi+30h]
		jb	short loc_1000A5B1
		mov	[esp+28h+var_10], esi
		mov	esi, [esp+28h+Size]
		mov	eax, [esp+28h+var_10]

loc_1000A5D4:				; CODE XREF: sub_1000A55E+4Fj
		mov	ebp, [esp+28h+var_14]

loc_1000A5D8:				; CODE XREF: sub_1000A55E+FEj
		mov	ecx, [edi+1Ch]
		mov	[esp+28h+var_10], ecx
		mov	[esp+28h+var_4], ebx
		lea	edx, ds:6[ecx*4]
		add	edx, esi
		add	edx, eax
		test	ecx, ecx
		jz	short loc_1000A628
		lea	esi, [ebp+8]
		mov	ebp, [esp+28h+var_C]
		sub	ebp, [esp+28h+var_14]

loc_1000A5FD:				; CODE XREF: sub_1000A55E+C8j
		cmp	dword ptr [esi+ebp], 0FFFFh
		ja	short loc_1000A661
		mov	eax, [esi]
		cmp	eax, 0FFFFh
		ja	short loc_1000A661
		add	eax, [esi+ebp]
		add	esi, 0Ch
		mov	edi, [esp+28h+arg_0]
		add	edx, eax
		mov	eax, [esp+28h+var_4]
		inc	eax
		mov	[esp+28h+var_4], eax
		cmp	eax, ecx
		jb	short loc_1000A5FD

loc_1000A628:				; CODE XREF: sub_1000A55E+92j
		mov	esi, [esp+28h+arg_8]
		lea	eax, [edx+3]
		push	eax
		push	[esp+2Ch+arg_4]
		mov	[esi+8], eax
		call	PORT_ArenaAlloc_Util
		mov	ebp, eax
		mov	[esi+4], ebp
		pop	ecx
		pop	ecx
		test	ebp, ebp
		jnz	short loc_1000A668
		push	0FFFFE013h

loc_1000A64C:				; CODE XREF: sub_1000A55E+108j
		call	PORT_SetError_Util
		pop	ecx
		or	eax, 0FFFFFFFFh
		jmp	loc_1000A79D
; ---------------------------------------------------------------------------

loc_1000A65A:				; CODE XREF: sub_1000A55E+3Dj
		mov	eax, ebx
		jmp	loc_1000A5D8
; ---------------------------------------------------------------------------

loc_1000A661:				; CODE XREF: sub_1000A55E+A6j
					; sub_1000A55E+AFj
		push	0FFFFE004h
		jmp	short loc_1000A64C
; ---------------------------------------------------------------------------

loc_1000A668:				; CODE XREF: sub_1000A55E+E7j
		mov	ecx, [esp+28h+var_10]
		mov	eax, ecx
		shr	eax, 8
		mov	[ebp+3], al
		mov	[ebp+4], cl
		mov	ecx, [esp+28h+Size]
		mov	eax, ecx
		shr	eax, 8
		push	ecx		; Size
		mov	[ebp+5], al
		lea	eax, [ebp+9]
		mov	[ebp+6], cl
		mov	[ebp+7], bx
		push	dword ptr [edi+20h] ; Src
		push	eax		; Dst
		call	memcpy
		mov	esi, [esp+34h+Size]
		add	esp, 0Ch
		mov	ecx, [esp+28h+var_10]
		add	esi, 9
		add	esi, ebp
		test	ecx, ecx
		jz	loc_1000A741
		mov	edx, [esp+28h+var_14]
		mov	ebp, ecx
		add	edx, 8

loc_1000A6B8:				; CODE XREF: sub_1000A55E+16Dj
		mov	eax, [edx]
		shr	eax, 8
		mov	[esi], al
		mov	al, [edx]
		lea	edx, [edx+0Ch]
		mov	[esi+1], al
		add	esi, 2
		dec	ebp
		jnz	short loc_1000A6B8
		test	ecx, ecx
		jz	short loc_1000A741
		mov	edx, [esp+28h+var_C]
		mov	ebp, ecx
		add	edx, 8

loc_1000A6DA:				; CODE XREF: sub_1000A55E+18Fj
		mov	eax, [edx]
		shr	eax, 8
		mov	[esi], al
		mov	al, [edx]
		lea	edx, [edx+0Ch]
		mov	[esi+1], al
		add	esi, 2
		dec	ebp
		jnz	short loc_1000A6DA
		test	ecx, ecx
		jz	short loc_1000A741
		mov	ebp, [esp+28h+var_14]
		mov	edi, ecx
		add	ebp, 8

loc_1000A6FC:				; CODE XREF: sub_1000A55E+1B4j
		push	dword ptr [ebp+0] ; Size
		push	dword ptr [ebp-4] ; Src
		push	esi		; Dst
		call	memcpy
		add	esi, [ebp+0]
		add	esp, 0Ch
		lea	ebp, [ebp+0Ch]
		dec	edi
		jnz	short loc_1000A6FC
		mov	ecx, [esp+28h+var_10]
		mov	edi, [esp+28h+arg_0]
		test	ecx, ecx
		jz	short loc_1000A741
		mov	ebp, [esp+28h+var_C]
		mov	ebx, ecx
		add	ebp, 8

loc_1000A729:				; CODE XREF: sub_1000A55E+1E1j
		push	dword ptr [ebp+0] ; Size
		push	dword ptr [ebp-4] ; Src
		push	esi		; Dst
		call	memcpy
		add	esi, [ebp+0]
		add	esp, 0Ch
		lea	ebp, [ebp+0Ch]
		dec	ebx
		jnz	short loc_1000A729

loc_1000A741:				; CODE XREF: sub_1000A55E+14Bj
					; sub_1000A55E+171j ...
		cmp	[edi+2Ch], ebx
		jz	short loc_1000A79B
		mov	eax, [edi+30h]
		shr	eax, 8
		mov	[esi], al
		mov	al, [edi+30h]
		mov	[esi+1], al
		add	esi, 2
		cmp	[edi+30h], ebx
		jbe	short loc_1000A79B

loc_1000A75C:				; CODE XREF: sub_1000A55E+23Bj
		mov	eax, [edi+2Ch]
		push	dword ptr [eax+ebx*4] ;	Str
		call	strlen
		lea	ebx, [eax+1]
		mov	eax, [esp+2Ch+var_8]
		mov	ecx, ebx
		mov	[esi+1], bl
		sar	ecx, 8
		mov	[esi], cl
		add	esi, 2
		mov	ecx, [edi+2Ch]
		push	ebx		; Size
		push	dword ptr [ecx+eax*4] ;	Src
		push	esi		; Dst
		call	memcpy
		add	esi, ebx
		add	esp, 10h
		mov	ebx, [esp+28h+var_8]
		inc	ebx
		mov	[esp+28h+var_8], ebx
		cmp	ebx, [edi+30h]
		jb	short loc_1000A75C

loc_1000A79B:				; CODE XREF: sub_1000A55E+1E6j
					; sub_1000A55E+1FCj
		xor	eax, eax

loc_1000A79D:				; CODE XREF: sub_1000A55E+F7j
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 18h
		retn
sub_1000A55E	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000A7A5	proc near		; CODE XREF: sub_10009F87+20p
					; sub_1000B092+89p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi
		mov	esi, [esp+4+arg_8]
		push	edi
		mov	edi, [esp+8+arg_0]
		mov	eax, [edi+8]
		inc	eax
		mov	[esi+8], eax
		cmp	eax, 0F000h
		ja	short loc_1000A7EA
		push	eax
		push	[esp+0Ch+arg_4]
		call	PORT_ArenaAlloc_Util
		mov	[esi+4], eax
		pop	ecx
		pop	ecx
		test	eax, eax
		jz	short loc_1000A7EA
		push	dword ptr [edi+8] ; Size
		inc	eax
		push	dword ptr [edi+4] ; Src
		push	eax		; Dst
		call	memcpy
		mov	eax, [esi+4]
		add	esp, 0Ch
		mov	byte ptr [eax],	3
		xor	eax, eax
		jmp	short loc_1000A7ED
; ---------------------------------------------------------------------------

loc_1000A7EA:				; CODE XREF: sub_1000A7A5+16j
					; sub_1000A7A5+29j
		or	eax, 0FFFFFFFFh

loc_1000A7ED:				; CODE XREF: sub_1000A7A5+43j
		pop	edi
		pop	esi
		retn
sub_1000A7A5	endp


; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1000A7F0(int,	char *Str, int,	int)
sub_1000A7F0	proc near		; CODE XREF: sub_10008F87+55p

arg_0		= dword	ptr  4
Str		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebx
		push	ebp
		push	esi
		push	edi
		push	800h
		call	PORT_NewArena_Util
		mov	ebp, eax
		pop	ecx
		test	ebp, ebp
		jz	loc_1000A8B9
		push	8F8h
		push	ebp
		call	PORT_ArenaZAlloc_Util
		mov	ebx, eax
		pop	ecx
		pop	ecx
		test	ebx, ebx
		jz	loc_1000A8AF
		mov	esi, [esp+10h+arg_8]
		mov	ecx, [esp+10h+arg_C]
		mov	[ebx+0Ch], ebp
		mov	dword ptr [ebx], 1
		mov	dword ptr [ebx+4], 8
		mov	[ebx+8], ecx
		test	esi, esi
		jz	short loc_1000A845
		lea	edi, [ebx+14h]
		movsd
		movsd
		movsd

loc_1000A845:				; CODE XREF: sub_1000A7F0+4Dj
		mov	esi, [esp+10h+arg_0]
		push	dword ptr [esi+8]
		push	ebp
		call	PORT_ArenaAlloc_Util
		mov	[ebx+24h], eax
		pop	ecx
		pop	ecx
		test	eax, eax
		jz	short loc_1000A8AF
		mov	ecx, [esi+8]
		mov	[ebx+28h], ecx
		push	dword ptr [esi+8] ; Size
		push	dword ptr [esi+4] ; Src
		push	eax		; Dst
		call	memcpy
		mov	edi, [esp+1Ch+Str]
		add	esp, 0Ch
		test	edi, edi
		jz	short loc_1000A884
		push	edi		; Str
		call	strlen
		pop	ecx
		lea	esi, [eax+1]
		jmp	short loc_1000A886
; ---------------------------------------------------------------------------

loc_1000A884:				; CODE XREF: sub_1000A7F0+86j
		xor	esi, esi

loc_1000A886:				; CODE XREF: sub_1000A7F0+92j
		test	esi, esi
		jz	short loc_1000A8A7
		push	esi
		push	ebp
		call	PORT_ArenaAlloc_Util
		mov	[ebx+2Ch], eax
		pop	ecx
		pop	ecx
		test	eax, eax
		jz	short loc_1000A8AF
		push	esi		; Size
		push	edi		; Src
		push	eax		; Dst
		call	memcpy
		add	esp, 0Ch
		jmp	short loc_1000A8AB
; ---------------------------------------------------------------------------

loc_1000A8A7:				; CODE XREF: sub_1000A7F0+98j
		and	dword ptr [ebx+2Ch], 0

loc_1000A8AB:				; CODE XREF: sub_1000A7F0+B5j
		mov	eax, ebx
		jmp	short loc_1000A8C6
; ---------------------------------------------------------------------------

loc_1000A8AF:				; CODE XREF: sub_1000A7F0+2Aj
					; sub_1000A7F0+69j ...
		push	0
		push	ebp
		call	PORT_FreeArena_Util
		pop	ecx
		pop	ecx

loc_1000A8B9:				; CODE XREF: sub_1000A7F0+13j
		push	0FFFFE013h
		call	PORT_SetError_Util
		pop	ecx
		xor	eax, eax

loc_1000A8C6:				; CODE XREF: sub_1000A7F0+BDj
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
sub_1000A7F0	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_1000A8CB(int,	char *Str, int,	int)
sub_1000A8CB	proc near		; CODE XREF: sub_1000CBEA+29p

Size		= dword	ptr -4
arg_0		= dword	ptr  8
Str		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ebx
		push	esi
		push	edi
		push	800h
		call	PORT_NewArena_Util
		mov	edi, eax
		pop	ecx
		test	edi, edi
		jz	loc_1000A97E
		push	20h
		push	edi
		call	PORT_ArenaZAlloc_Util
		mov	esi, eax
		pop	ecx
		pop	ecx
		test	esi, esi
		jz	short loc_1000A974
		mov	ecx, [ebp+arg_8]
		mov	ebx, [ebp+arg_0]
		mov	[esi], ecx
		mov	ecx, [ebp+arg_C]
		mov	[esi+0Ch], edi
		mov	dword ptr [esi+4], 8
		mov	[esi+8], ecx
		push	dword ptr [ebx+8]
		push	edi
		call	PORT_ArenaAlloc_Util
		mov	[esi+14h], eax
		pop	ecx
		pop	ecx
		test	eax, eax
		jz	short loc_1000A974
		cmp	[ebp+Str], 0
		jz	short loc_1000A955
		push	[ebp+Str]	; Str
		call	strlen
		inc	eax
		push	eax
		push	edi
		mov	[ebp+Size], eax
		call	PORT_ArenaAlloc_Util
		add	esp, 0Ch
		mov	[esi+1Ch], eax
		test	eax, eax
		jz	short loc_1000A974
		push	[ebp+Size]	; Size
		push	[ebp+Str]	; Src
		push	eax		; Dst
		call	memcpy
		add	esp, 0Ch
		jmp	short loc_1000A959
; ---------------------------------------------------------------------------

loc_1000A955:				; CODE XREF: sub_1000A8CB+5Aj
		and	dword ptr [esi+1Ch], 0

loc_1000A959:				; CODE XREF: sub_1000A8CB+88j
		mov	eax, [ebx+8]
		mov	[esi+18h], eax
		push	dword ptr [ebx+8] ; Size
		push	dword ptr [ebx+4] ; Src
		push	dword ptr [esi+14h] ; Dst
		call	memcpy
		add	esp, 0Ch
		mov	eax, esi
		jmp	short loc_1000A98B
; ---------------------------------------------------------------------------

loc_1000A974:				; CODE XREF: sub_1000A8CB+2Aj
					; sub_1000A8CB+54j ...
		push	0
		push	edi
		call	PORT_FreeArena_Util
		pop	ecx
		pop	ecx

loc_1000A97E:				; CODE XREF: sub_1000A8CB+16j
		push	0FFFFE013h
		call	PORT_SetError_Util
		pop	ecx
		xor	eax, eax

loc_1000A98B:				; CODE XREF: sub_1000A8CB+A7j
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
sub_1000A8CB	endp


; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1000A992(char	*Str, int, int)
sub_1000A992	proc near		; CODE XREF: sub_10008F87+76p
					; sub_1000BF6B:loc_1000C00Bp

Str		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		push	esi
		push	edi
		push	800h
		call	PORT_NewArena_Util
		mov	esi, eax
		pop	ecx
		test	esi, esi
		jnz	short loc_1000A9B2
		push	0FFFFE013h
		call	PORT_SetError_Util
		jmp	short loc_1000A9D6
; ---------------------------------------------------------------------------

loc_1000A9B2:				; CODE XREF: sub_1000A992+12j
		push	20h
		push	esi
		call	PORT_ArenaAlloc_Util
		mov	edi, eax
		pop	ecx
		pop	ecx
		test	edi, edi
		jnz	short loc_1000A9DD
		push	0FFFFE013h
		call	PORT_SetError_Util
		pop	ecx

loc_1000A9CD:				; CODE XREF: sub_1000A992+7Dj
					; sub_1000A992+9Dj
		push	0
		push	esi
		call	PORT_FreeArena_Util
		pop	ecx

loc_1000A9D6:				; CODE XREF: sub_1000A992+1Ej
		pop	ecx
		xor	eax, eax

loc_1000A9D9:				; CODE XREF: sub_1000A992+A1j
		pop	edi
		pop	esi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1000A9DD:				; CODE XREF: sub_1000A992+2Ej
		mov	eax, [esp+0Ch+arg_8]
		push	[esp+0Ch+Str]	; Str
		mov	[edi+0Ch], esi
		mov	dword ptr [edi], 2
		mov	dword ptr [edi+4], 8
		mov	[edi+8], eax
		call	strlen
		lea	ebx, [eax+1]
		push	ebx
		push	esi
		call	PORT_ArenaAlloc_Util
		add	esp, 0Ch
		mov	[edi+10h], eax
		test	eax, eax
		jz	short loc_1000A9CD
		push	ebx		; Size
		push	[esp+10h+Str]	; Src
		push	eax		; Dst
		call	memcpy
		push	[esp+18h+arg_4]
		lea	eax, [edi+14h]
		push	eax
		push	esi
		call	SECITEM_CopyItem_Util
		add	esp, 18h
		test	eax, eax
		jnz	short loc_1000A9CD
		mov	eax, edi
		jmp	short loc_1000A9D9
sub_1000A992	endp


; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1000AA35(char	*Str, int, int,	int, int)
sub_1000AA35	proc near		; CODE XREF: sub_1000CCE9+51p

Str		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	ebx
		push	ebp
		push	esi
		push	edi
		push	800h
		call	PORT_NewArena_Util
		mov	edi, eax
		pop	ecx
		test	edi, edi
		jnz	short loc_1000AA56
		push	0FFFFE013h
		call	PORT_SetError_Util
		jmp	short loc_1000AA7B
; ---------------------------------------------------------------------------

loc_1000AA56:				; CODE XREF: sub_1000AA35+13j
		push	38h
		push	edi
		call	PORT_ArenaAlloc_Util
		mov	esi, eax
		xor	ebp, ebp
		pop	ecx
		pop	ecx
		test	esi, esi
		jnz	short loc_1000AA83
		push	0FFFFE013h
		call	PORT_SetError_Util
		pop	ecx

loc_1000AA73:				; CODE XREF: sub_1000AA35+80j
					; sub_1000AA35+A0j ...
		push	ebp
		push	edi
		call	PORT_FreeArena_Util
		pop	ecx

loc_1000AA7B:				; CODE XREF: sub_1000AA35+1Fj
		pop	ecx
		xor	eax, eax

loc_1000AA7E:				; CODE XREF: sub_1000AA35+EDj
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1000AA83:				; CODE XREF: sub_1000AA35+31j
		mov	eax, [esp+10h+arg_10]
		push	[esp+10h+Str]	; Str
		mov	[esi+0Ch], edi
		mov	dword ptr [esi], 6
		mov	dword ptr [esi+4], 8
		mov	[esi+8], eax
		call	strlen
		lea	ebx, [eax+1]
		push	ebx
		push	edi
		call	PORT_ArenaAlloc_Util
		add	esp, 0Ch
		mov	[esi+10h], eax
		test	eax, eax
		jz	short loc_1000AA73
		push	ebx		; Size
		push	[esp+14h+Str]	; Src
		push	eax		; Dst
		call	memcpy
		push	[esp+1Ch+arg_4]
		lea	eax, [esi+14h]
		push	eax
		push	edi
		call	SECITEM_CopyItem_Util
		add	esp, 18h
		test	eax, eax
		jnz	short loc_1000AA73
		cmp	[esp+10h+arg_8], ebp
		jz	short loc_1000AAF4
		push	[esp+10h+arg_8]
		lea	eax, [esi+20h]
		push	eax
		push	edi
		call	SECITEM_CopyItem_Util
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_1000AA73
		jmp	short loc_1000AAFA
; ---------------------------------------------------------------------------

loc_1000AAF4:				; CODE XREF: sub_1000AA35+A6j
		mov	[esi+24h], ebp
		mov	[esi+28h], ebp

loc_1000AAFA:				; CODE XREF: sub_1000AA35+BDj
		cmp	[esp+10h+arg_C], ebp
		jz	short loc_1000AB1A
		push	[esp+10h+arg_C]
		lea	eax, [esi+2Ch]
		push	eax
		push	edi
		call	SECITEM_CopyItem_Util
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_1000AB20
		jmp	loc_1000AA73
; ---------------------------------------------------------------------------

loc_1000AB1A:				; CODE XREF: sub_1000AA35+C9j
		mov	[esi+30h], ebp
		mov	[esi+34h], ebp

loc_1000AB20:				; CODE XREF: sub_1000AA35+DEj
		mov	eax, esi
		jmp	loc_1000AA7E
sub_1000AA35	endp


; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1000AB27(int,	int, int, char *Str, int, int)
sub_1000AB27	proc near		; CODE XREF: sub_10008F87+E7p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
Str		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		push	ebx
		push	ebp
		push	esi
		push	edi
		push	800h
		call	PORT_NewArena_Util
		mov	edi, eax
		pop	ecx
		test	edi, edi
		jnz	short loc_1000AB48
		push	0FFFFE013h
		call	PORT_SetError_Util
		jmp	short loc_1000AB6E
; ---------------------------------------------------------------------------

loc_1000AB48:				; CODE XREF: sub_1000AB27+13j
		push	34h
		push	edi
		call	PORT_ArenaAlloc_Util
		mov	esi, eax
		xor	ebp, ebp
		pop	ecx
		pop	ecx
		test	esi, esi
		jnz	short loc_1000AB76
		push	0FFFFE013h
		call	PORT_SetError_Util

loc_1000AB64:				; CODE XREF: sub_1000AB27+F6j
		pop	ecx

loc_1000AB65:				; CODE XREF: sub_1000AB27+79j
					; sub_1000AB27+A9j ...
		push	0
		push	edi
		call	PORT_FreeArena_Util
		pop	ecx

loc_1000AB6E:				; CODE XREF: sub_1000AB27+1Fj
		pop	ecx
		xor	eax, eax

loc_1000AB71:				; CODE XREF: sub_1000AB27+17Fj
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1000AB76:				; CODE XREF: sub_1000AB27+31j
		mov	eax, [esp+10h+arg_14]
		push	[esp+10h+arg_0]
		mov	[esi+8], eax
		lea	eax, [esi+10h]
		push	eax
		push	edi
		mov	[esi+0Ch], edi
		mov	dword ptr [esi], 3
		mov	dword ptr [esi+4], 8
		call	SECITEM_CopyItem_Util
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_1000AB65
		mov	ebx, [esp+10h+Str]
		mov	dword ptr [esi+1Ch], 1
		mov	[esi+30h], ebp
		test	ebx, ebx
		jz	short loc_1000ABE1
		cmp	[ebx], al
		jz	short loc_1000ABE1
		push	ebx		; Str
		call	strlen
		lea	ebp, [eax+1]
		push	ebp
		push	edi
		call	PORT_ArenaAlloc_Util
		add	esp, 0Ch
		mov	[esi+20h], eax
		test	eax, eax
		jz	short loc_1000AB65
		push	ebp		; Size
		push	ebx		; Src
		push	eax		; Dst
		call	memcpy
		add	esp, 0Ch
		xor	ebp, ebp
		jmp	short loc_1000ABE4
; ---------------------------------------------------------------------------

loc_1000ABE1:				; CODE XREF: sub_1000AB27+8Bj
					; sub_1000AB27+8Fj
		mov	[esi+20h], ebp

loc_1000ABE4:				; CODE XREF: sub_1000AB27+B8j
		mov	eax, [esp+10h+arg_10]
		test	eax, eax
		jz	short loc_1000AC46
		cmp	byte ptr [eax],	0
		jz	short loc_1000AC46
		push	eax
		call	sub_10008642
		mov	ebx, eax
		pop	ecx
		test	ebx, ebx
		jnz	short loc_1000AC06
		mov	[esi+2Ch], ebp
		jmp	loc_1000AB65
; ---------------------------------------------------------------------------

loc_1000AC06:				; CODE XREF: sub_1000AB27+D5j
		push	4
		push	edi
		call	PORT_ArenaAlloc_Util
		mov	[esi+2Ch], eax
		pop	ecx
		pop	ecx
		push	ebx
		test	eax, eax
		jnz	short loc_1000AC22
		call	PORT_Free_Util
		jmp	loc_1000AB64
; ---------------------------------------------------------------------------

loc_1000AC22:				; CODE XREF: sub_1000AB27+EFj
		push	edi
		call	PORT_ArenaStrdup_Util
		pop	ecx
		pop	ecx
		mov	ecx, [esi+2Ch]
		mov	[ecx], eax
		mov	eax, [esi+2Ch]
		cmp	[eax], ebp
		jz	short loc_1000AC3D
		mov	dword ptr [esi+30h], 1

loc_1000AC3D:				; CODE XREF: sub_1000AB27+10Dj
		push	ebx
		call	PORT_Free_Util
		pop	ecx
		jmp	short loc_1000AC49
; ---------------------------------------------------------------------------

loc_1000AC46:				; CODE XREF: sub_1000AB27+C3j
					; sub_1000AB27+C8j
		mov	[esi+2Ch], ebp

loc_1000AC49:				; CODE XREF: sub_1000AB27+11Dj
		push	0Ch
		push	edi
		call	PORT_ArenaAlloc_Util
		push	0Ch
		push	edi
		mov	[esi+24h], eax
		call	PORT_ArenaAlloc_Util
		add	esp, 10h
		mov	[esi+28h], eax
		cmp	dword ptr [esi+24h], 0
		jz	loc_1000AB65
		test	eax, eax
		jz	loc_1000AB65
		push	[esp+10h+arg_4]
		push	dword ptr [esi+24h]
		push	edi
		call	SECITEM_CopyItem_Util
		add	esp, 0Ch
		test	eax, eax
		jnz	loc_1000AB65
		push	[esp+10h+arg_8]
		push	dword ptr [esi+28h]
		push	edi
		call	SECITEM_CopyItem_Util
		add	esp, 0Ch
		test	eax, eax
		jnz	loc_1000AB65
		mov	eax, esi
		jmp	loc_1000AB71
sub_1000AB27	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000ACAB	proc near		; CODE XREF: sub_1000CF1C+68p

arg_0		= dword	ptr  4

		push	esi
		push	800h
		call	PORT_NewArena_Util
		mov	esi, eax
		pop	ecx
		test	esi, esi
		jnz	short loc_1000ACCA
		push	0FFFFE013h
		call	PORT_SetError_Util
		pop	ecx
		jmp	short loc_1000ACEF
; ---------------------------------------------------------------------------

loc_1000ACCA:				; CODE XREF: sub_1000ACAB+10j
		push	10h
		push	esi
		call	PORT_ArenaAlloc_Util
		pop	ecx
		pop	ecx
		mov	ecx, eax
		test	ecx, ecx
		jnz	short loc_1000ACF3
		push	0FFFFE013h
		call	PORT_SetError_Util
		push	0
		push	esi
		call	PORT_FreeArena_Util
		add	esp, 0Ch

loc_1000ACEF:				; CODE XREF: sub_1000ACAB+1Dj
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1000ACF3:				; CODE XREF: sub_1000ACAB+2Dj
		mov	eax, [esp+4+arg_0]
		and	dword ptr [ecx], 0
		mov	[ecx+0Ch], esi
		mov	[ecx+8], eax
		mov	eax, ecx
		mov	dword ptr [ecx+4], 8
		pop	esi
		retn
sub_1000ACAB	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000AD0B	proc near		; CODE XREF: sub_1000C49E+Cp
					; sub_1000C682+Cp

var_21C		= byte ptr -21Ch
var_218		= dword	ptr -218h
var_214		= dword	ptr -214h
var_210		= byte ptr -210h
var_204		= byte ptr -204h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 21Ch
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+21Ch+var_4], eax
		push	ebx
		mov	ebx, [esp+220h+arg_4]
		push	ebp
		mov	ebp, [esp+224h+arg_0]
		push	esi
		push	edi
		lea	edi, [esp+22Ch+var_204]
		mov	[esp+22Ch+var_214], 200h
		mov	[esp+22Ch+var_218], edi
		call	sub_1000C745
		mov	esi, dword_10015044
		test	esi, esi
		jz	short loc_1000AD5E
		mov	eax, [esi+10h]
		dec	dword_10015050
		mov	dword_10015044,	eax

loc_1000AD5E:				; CODE XREF: sub_1000AD0B+43j
		call	sub_1000CBDC
		test	esi, esi
		jnz	short loc_1000AD85
		push	8F8h
		call	PORT_ZAlloc_Util
		mov	esi, eax
		pop	ecx
		test	esi, esi
		jnz	short loc_1000AD85
		push	0FFFFE013h
		call	PORT_SetError_Util
		pop	ecx
		jmp	short loc_1000ADE6
; ---------------------------------------------------------------------------

loc_1000AD85:				; CODE XREF: sub_1000AD0B+5Aj
					; sub_1000AD0B+6Bj
		lea	eax, [esp+22Ch+var_21C]
		mov	dword ptr [esi], 1
		push	eax
		xor	edi, edi
		push	edi
		push	ebx
		mov	[esi+0Ch], edi
		call	sub_1000A239
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_1000ADE2
		push	edi
		lea	eax, [esp+230h+var_210]
		push	eax
		lea	eax, [esp+234h+var_21C]
		push	eax
		push	esi
		push	ebp
		call	sub_1000AEEA
		add	esp, 14h
		cmp	eax, 0FFFFFFFFh
		jz	short loc_1000ADE2
		lea	eax, [esp+22Ch+var_210]
		push	eax
		push	esi
		call	sub_100093F1
		pop	ecx
		pop	ecx
		test	eax, eax
		jnz	short loc_1000ADE2
		lea	eax, [esp+22Ch+var_204]
		push	eax
		push	[esp+230h+var_218]
		call	sub_1000D109
		pop	ecx
		pop	ecx
		mov	eax, esi
		jmp	short loc_1000AE00
; ---------------------------------------------------------------------------

loc_1000ADE2:				; CODE XREF: sub_1000AD0B+96j
					; sub_1000AD0B+B0j ...
		mov	edi, [esp+22Ch+var_218]

loc_1000ADE6:				; CODE XREF: sub_1000AD0B+78j
		lea	eax, [esp+22Ch+var_204]
		push	eax
		push	edi
		call	sub_1000D109
		pop	ecx
		pop	ecx
		test	esi, esi
		jz	short loc_1000ADFE
		push	esi		; Dst
		call	sub_1000A0DD
		pop	ecx

loc_1000ADFE:				; CODE XREF: sub_1000AD0B+EAj
		xor	eax, eax

loc_1000AE00:				; CODE XREF: sub_1000AD0B+D5j
		mov	ecx, [esp+22Ch+var_4]
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 21Ch
		retn
sub_1000AD0B	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000AE19	proc near		; CODE XREF: sub_1000C4D5+43p

var_18		= byte ptr -18h
var_C		= byte ptr -0Ch
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 18h
		push	ebx
		push	ebp
		push	esi
		push	edi
		mov	esi, 800h
		push	esi
		call	PORT_NewArena_Util
		mov	edi, eax
		pop	ecx
		test	edi, edi
		jnz	short loc_1000AE3E
		push	0FFFFE013h
		call	PORT_SetError_Util
		jmp	short loc_1000AE85
; ---------------------------------------------------------------------------

loc_1000AE3E:				; CODE XREF: sub_1000AE19+17j
		push	esi
		call	PORT_NewArena_Util
		mov	ebx, eax
		xor	ebp, ebp
		pop	ecx
		test	ebx, ebx
		jnz	short loc_1000AE59
		push	0FFFFE013h
		call	PORT_SetError_Util
		jmp	short loc_1000AE7C
; ---------------------------------------------------------------------------

loc_1000AE59:				; CODE XREF: sub_1000AE19+32j
		push	20h
		push	edi
		call	PORT_ArenaAlloc_Util
		mov	esi, eax
		pop	ecx
		pop	ecx
		test	esi, esi
		jnz	short loc_1000AE90
		push	0FFFFE013h
		call	PORT_SetError_Util
		pop	ecx

loc_1000AE74:				; CODE XREF: sub_1000AE19+95j
					; sub_1000AE19+B2j ...
		push	ebp
		push	ebx
		call	PORT_FreeArena_Util
		pop	ecx

loc_1000AE7C:				; CODE XREF: sub_1000AE19+3Ej
		pop	ecx
		push	ebp
		push	edi
		call	PORT_FreeArena_Util
		pop	ecx

loc_1000AE85:				; CODE XREF: sub_1000AE19+23j
		xor	eax, eax

loc_1000AE87:				; CODE XREF: sub_1000AE19+CFj
		pop	ecx
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 18h
		retn
; ---------------------------------------------------------------------------

loc_1000AE90:				; CODE XREF: sub_1000AE19+4Ej
		mov	eax, [esp+28h+arg_8]
		push	eax
		mov	[esi], eax
		lea	eax, [esp+2Ch+var_18]
		push	eax
		push	ebx
		push	[esp+34h+arg_4]
		mov	[esi+0Ch], edi
		call	sub_1000A33C
		add	esp, 10h
		test	eax, eax
		jnz	short loc_1000AE74
		push	ebp
		lea	eax, [esp+2Ch+var_C]
		push	eax
		lea	eax, [esp+30h+var_18]
		push	eax
		push	esi
		push	[esp+38h+arg_0]
		call	sub_1000AEEA
		add	esp, 14h
		cmp	eax, 0FFFFFFFFh
		jz	short loc_1000AE74
		lea	eax, [esp+28h+var_C]
		push	eax
		push	esi
		call	sub_1000952B
		pop	ecx
		pop	ecx
		test	eax, eax
		jnz	short loc_1000AE74
		push	ebp
		push	ebx
		call	PORT_FreeArena_Util
		pop	ecx
		mov	eax, esi
		jmp	short loc_1000AE87
sub_1000AE19	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_1000AEEA	proc near		; CODE XREF: sub_1000AD0B+A5p
					; sub_1000AE19+A7p ...

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		mov	eax, [ebp+arg_8]
		push	esi
		push	edi
		mov	edi, [ebp+arg_4]
		mov	ecx, [eax+4]
		mov	eax, [eax+8]
		mov	[ebp+var_4], eax
		mov	al, [edi]
		mov	[ebp+var_8], ecx
		mov	[ecx], al
		lea	eax, [ebp+var_10]
		push	0
		push	eax
		lea	eax, [ebp+var_8]
		push	eax
		mov	eax, [ebp+arg_0]
		push	dword ptr [eax]
		call	sub_1000BE4E
		add	esp, 10h
		test	eax, eax
		jz	short loc_1000AF2A

loc_1000AF23:				; CODE XREF: sub_1000AEEA+46j
					; sub_1000AEEA+55j ...
		push	0FFFFE012h
		jmp	short loc_1000AF85
; ---------------------------------------------------------------------------

loc_1000AF2A:				; CODE XREF: sub_1000AEEA+37j
		mov	edx, [ebp+var_C]
		cmp	edx, 3
		jb	short loc_1000AF23
		mov	esi, [ebp+var_10]
		mov	cl, [esi]
		cmp	cl, 8
		jz	short loc_1000AF41
		cmp	cl, 7
		jnz	short loc_1000AF23

loc_1000AF41:				; CODE XREF: sub_1000AEEA+50j
		mov	al, [esi+1]
		cmp	al, [edi]
		jnz	short loc_1000AF23
		movzx	eax, cl
		add	edx, 0FFFFFFFDh
		mov	[edi+4], eax
		movzx	eax, byte ptr [esi+1]
		mov	[edi], eax
		movzx	eax, byte ptr [esi+2]
		mov	[edi+8], eax
		mov	edi, [ebp+arg_C]
		mov	[edi+8], edx
		jz	short loc_1000AFAA
		cmp	[ebp+arg_10], 0
		jz	short loc_1000AFA2
		push	edx
		push	[ebp+arg_10]
		call	PORT_ArenaAlloc_Util
		pop	ecx
		pop	ecx
		mov	ecx, eax
		mov	[edi+4], ecx
		test	ecx, ecx
		jnz	short loc_1000AF90
		push	0FFFFE013h

loc_1000AF85:				; CODE XREF: sub_1000AEEA+3Ej
		call	PORT_SetError_Util
		pop	ecx
		or	eax, 0FFFFFFFFh
		jmp	short loc_1000AFB0
; ---------------------------------------------------------------------------

loc_1000AF90:				; CODE XREF: sub_1000AEEA+94j
		push	dword ptr [edi+8] ; Size
		lea	eax, [esi+3]
		push	eax		; Src
		push	ecx		; Dst
		call	memcpy
		add	esp, 0Ch
		jmp	short loc_1000AFAE
; ---------------------------------------------------------------------------

loc_1000AFA2:				; CODE XREF: sub_1000AEEA+80j
		lea	eax, [esi+3]
		mov	[edi+4], eax
		jmp	short loc_1000AFAE
; ---------------------------------------------------------------------------

loc_1000AFAA:				; CODE XREF: sub_1000AEEA+7Aj
		and	dword ptr [edi+4], 0

loc_1000AFAE:				; CODE XREF: sub_1000AEEA+B6j
					; sub_1000AEEA+BEj
		xor	eax, eax

loc_1000AFB0:				; CODE XREF: sub_1000AEEA+A4j
		pop	edi
		pop	esi
		mov	esp, ebp
		pop	ebp
		retn
sub_1000AEEA	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_1000AFB6(int,	char *Str)
sub_1000AFB6	proc near		; CODE XREF: sub_1000B463+1A5p
					; sub_1000BF6B+8Bp ...

var_18		= dword	ptr -18h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
Str		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		push	ebx
		push	esi
		push	edi
		mov	esi, 800h
		push	esi
		call	PORT_NewArena_Util
		mov	ebx, eax
		pop	ecx
		test	ebx, ebx
		jnz	short loc_1000AFDD
		push	0FFFFE013h
		call	PORT_SetError_Util
		jmp	short loc_1000B024
; ---------------------------------------------------------------------------

loc_1000AFDD:				; CODE XREF: sub_1000AFB6+19j
		push	esi
		call	PORT_NewArena_Util
		mov	edi, eax
		pop	ecx
		test	edi, edi
		jnz	short loc_1000AFF6
		push	0FFFFE013h
		call	PORT_SetError_Util
		jmp	short loc_1000B01A
; ---------------------------------------------------------------------------

loc_1000AFF6:				; CODE XREF: sub_1000AFB6+32j
		push	20h
		push	ebx
		call	PORT_ArenaAlloc_Util
		mov	esi, eax
		pop	ecx
		pop	ecx
		test	esi, esi
		jnz	short loc_1000B02E
		push	0FFFFE013h

loc_1000B00B:				; CODE XREF: sub_1000AFB6+BAj
		call	PORT_SetError_Util
		pop	ecx

loc_1000B011:				; CODE XREF: sub_1000AFB6+93j
					; sub_1000AFB6+ADj ...
		push	0
		push	edi
		call	PORT_FreeArena_Util
		pop	ecx

loc_1000B01A:				; CODE XREF: sub_1000AFB6+3Ej
		pop	ecx
		push	0
		push	ebx
		call	PORT_FreeArena_Util
		pop	ecx

loc_1000B024:				; CODE XREF: sub_1000AFB6+25j
		xor	eax, eax

loc_1000B026:				; CODE XREF: sub_1000AFB6+DAj
		pop	ecx
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_1000B02E:				; CODE XREF: sub_1000AFB6+4Ej
		lea	eax, [ebp+var_18]
		mov	[esi+0Ch], ebx
		push	eax		; int
		push	edi		; int
		push	[ebp+Str]	; Str
		mov	dword ptr [esi], 2
		call	sub_1000A400
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_1000B011
		push	edi
		lea	eax, [ebp+var_C]
		push	eax
		lea	eax, [ebp+var_18]
		push	eax
		push	esi
		push	[ebp+arg_0]
		call	sub_1000AEEA
		add	esp, 14h
		cmp	eax, 0FFFFFFFFh
		jz	short loc_1000B011
		cmp	[ebp+var_4], 2
		jnb	short loc_1000B072
		push	0FFFFE012h
		jmp	short loc_1000B00B
; ---------------------------------------------------------------------------

loc_1000B072:				; CODE XREF: sub_1000AFB6+B3j
		push	[ebp+Str]	; Str
		lea	eax, [ebp+var_C]
		push	eax		; int
		push	esi		; int
		call	sub_100095F2
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_1000B011
		push	eax
		push	edi
		call	PORT_FreeArena_Util
		pop	ecx
		mov	eax, esi
		jmp	short loc_1000B026
sub_1000AFB6	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_1000B092	proc near		; CODE XREF: sub_10008F87+2Dp
					; sub_1000916D+1Ap ...

var_18		= byte ptr -18h
var_C		= byte ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		push	ebx
		push	esi
		push	edi
		mov	esi, 800h
		push	esi
		call	PORT_NewArena_Util
		mov	ebx, eax
		pop	ecx
		test	ebx, ebx
		jnz	short loc_1000B0B9
		push	0FFFFE013h
		call	PORT_SetError_Util
		jmp	short loc_1000B100
; ---------------------------------------------------------------------------

loc_1000B0B9:				; CODE XREF: sub_1000B092+19j
		push	esi
		call	PORT_NewArena_Util
		mov	edi, eax
		pop	ecx
		test	edi, edi
		jnz	short loc_1000B0D2
		push	0FFFFE013h
		call	PORT_SetError_Util
		jmp	short loc_1000B0F6
; ---------------------------------------------------------------------------

loc_1000B0D2:				; CODE XREF: sub_1000B092+32j
		push	34h
		push	ebx
		call	PORT_ArenaAlloc_Util
		mov	esi, eax
		pop	ecx
		pop	ecx
		test	esi, esi
		jnz	short loc_1000B10A
		push	0FFFFE013h
		call	PORT_SetError_Util
		pop	ecx

loc_1000B0ED:				; CODE XREF: sub_1000B092+93j
					; sub_1000B092+ADj ...
		push	0
		push	edi
		call	PORT_FreeArena_Util
		pop	ecx

loc_1000B0F6:				; CODE XREF: sub_1000B092+3Ej
		pop	ecx
		push	0
		push	ebx
		call	PORT_FreeArena_Util
		pop	ecx

loc_1000B100:				; CODE XREF: sub_1000B092+25j
		xor	eax, eax

loc_1000B102:				; CODE XREF: sub_1000B092+CFj
		pop	ecx
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_1000B10A:				; CODE XREF: sub_1000B092+4Ej
		lea	eax, [ebp+var_C]
		mov	[esi+0Ch], ebx
		push	eax
		push	edi
		push	[ebp+arg_4]
		mov	dword ptr [esi], 3
		call	sub_1000A7A5
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_1000B0ED
		push	edi
		lea	eax, [ebp+var_18]
		push	eax
		lea	eax, [ebp+var_C]
		push	eax
		push	esi
		push	[ebp+arg_0]
		call	sub_1000AEEA
		add	esp, 14h
		cmp	eax, 0FFFFFFFFh
		jz	short loc_1000B0ED
		push	[ebp+arg_4]
		lea	eax, [ebp+var_18]
		push	eax
		push	esi
		call	sub_100097FE
		add	esp, 0Ch
		cmp	eax, 0FFFFFFFFh
		jz	short loc_1000B0ED
		push	0
		push	edi
		call	PORT_FreeArena_Util
		pop	ecx
		mov	eax, esi
		jmp	short loc_1000B102
sub_1000B092	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000B163	proc near		; CODE XREF: sub_1000C6CC+4p

var_18		= byte ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= byte ptr -0Ch
arg_0		= dword	ptr  4

		sub	esp, 18h
		push	ebx
		push	ebp
		push	esi
		push	edi
		mov	esi, 800h
		push	esi
		call	PORT_NewArena_Util
		mov	edi, eax
		pop	ecx
		test	edi, edi
		jnz	short loc_1000B188
		push	0FFFFE013h
		call	PORT_SetError_Util
		jmp	short loc_1000B1CF
; ---------------------------------------------------------------------------

loc_1000B188:				; CODE XREF: sub_1000B163+17j
		push	esi
		call	PORT_NewArena_Util
		mov	esi, eax
		xor	ebp, ebp
		pop	ecx
		test	esi, esi
		jnz	short loc_1000B1A3
		push	0FFFFE013h
		call	PORT_SetError_Util
		jmp	short loc_1000B1C6
; ---------------------------------------------------------------------------

loc_1000B1A3:				; CODE XREF: sub_1000B163+32j
		push	10h
		push	edi
		call	PORT_ArenaZAlloc_Util
		mov	ebx, eax
		pop	ecx
		pop	ecx
		test	ebx, ebx
		jnz	short loc_1000B1DA
		push	0FFFFE013h
		call	PORT_SetError_Util
		pop	ecx

loc_1000B1BE:				; CODE XREF: sub_1000B163+92j
					; sub_1000B163+BCj
		push	ebp
		push	esi
		call	PORT_FreeArena_Util
		pop	ecx

loc_1000B1C6:				; CODE XREF: sub_1000B163+3Ej
		pop	ecx
		push	ebp
		push	edi
		call	PORT_FreeArena_Util
		pop	ecx

loc_1000B1CF:				; CODE XREF: sub_1000B163+23j
		xor	eax, eax

loc_1000B1D1:				; CODE XREF: sub_1000B163+C8j
		pop	ecx
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 18h
		retn
; ---------------------------------------------------------------------------

loc_1000B1DA:				; CODE XREF: sub_1000B163+4Ej
		push	9
		pop	eax
		push	eax
		push	esi
		mov	[ebx+0Ch], edi
		mov	[ebx], ebp
		mov	[esp+30h+var_10], eax
		call	PORT_ArenaAlloc_Util
		mov	[esp+30h+var_14], eax
		pop	ecx
		pop	ecx
		test	eax, eax
		jz	short loc_1000B1BE
		push	8		; Size
		inc	eax
		push	offset aVersion	; "Version"
		push	eax		; Dst
		call	memcpy
		push	esi
		lea	eax, [esp+38h+var_C]
		push	eax
		lea	eax, [esp+3Ch+var_18]
		push	eax
		push	ebx
		push	[esp+44h+arg_0]
		call	sub_1000AEEA
		add	esp, 20h
		test	eax, eax
		jnz	short loc_1000B1BE
		push	ebp
		push	esi
		call	PORT_FreeArena_Util
		pop	ecx
		mov	eax, ebx
		jmp	short loc_1000B1D1
sub_1000B163	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000B22D	proc near		; CODE XREF: sub_1000C14B+27p

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		sub	esp, 0Ch
		push	ebp
		push	esi
		mov	esi, [esp+14h+arg_0]
		push	edi
		lea	edi, [esi+38h]
		push	edi
		push	dword ptr [esi+4]
		mov	[esp+20h+var_4], edi
		call	sub_1000B092
		mov	ebp, eax
		pop	ecx
		pop	ecx
		test	ebp, ebp
		jnz	short loc_1000B257
		or	eax, 0FFFFFFFFh
		jmp	loc_1000B33D
; ---------------------------------------------------------------------------

loc_1000B257:				; CODE XREF: sub_1000B22D+20j
		or	[esp+18h+var_8], 0FFFFFFFFh
		push	ebx
		xor	ebx, ebx
		cmp	dword ptr [ebp+1Ch], 1
		jbe	loc_1000B2F3
		cmp	[ebp+1Ch], ebx
		jbe	loc_1000B331
		lea	eax, [esi+54h]
		mov	[esp+1Ch+var_C], ebx
		mov	ecx, ebx

loc_1000B27B:				; CODE XREF: sub_1000B22D+72j
		push	eax
		mov	eax, [ebp+24h]
		add	eax, ecx
		push	eax
		call	SECITEM_CompareItem_Util
		pop	ecx
		inc	ebx
		pop	ecx
		test	eax, eax
		jz	short loc_1000B2A6
		mov	ecx, [esp+1Ch+var_C]
		lea	eax, [esi+54h]
		add	ecx, 0Ch
		mov	[esp+1Ch+var_C], ecx
		cmp	ebx, [ebp+1Ch]
		jb	short loc_1000B27B
		jmp	loc_1000B331
; ---------------------------------------------------------------------------

loc_1000B2A6:				; CODE XREF: sub_1000B22D+5Fj
		cmp	ebx, [ebp+1Ch]
		jnb	short loc_1000B2D5
		imul	ecx, ebx, 0Ch

loc_1000B2AE:				; CODE XREF: sub_1000B22D+9Ej
		mov	esi, [ebp+24h]
		add	esi, ecx
		lea	edi, [esi-0Ch]
		movsd
		movsd
		movsd
		mov	esi, [ebp+28h]
		add	esi, ecx
		inc	ebx
		add	ecx, 0Ch
		lea	edi, [esi-0Ch]
		movsd
		movsd
		movsd
		cmp	ebx, [ebp+1Ch]
		jb	short loc_1000B2AE
		mov	esi, [esp+1Ch+arg_0]
		mov	edi, [esp+1Ch+var_4]

loc_1000B2D5:				; CODE XREF: sub_1000B22D+7Cj
		dec	dword ptr [ebp+1Ch]
		push	edi
		push	dword ptr [esi+4]
		call	sub_10009F87
		push	ebp
		push	dword ptr [esi+4]
		call	sub_1000BC6F
		add	esp, 10h
		mov	[esp+1Ch+var_8], eax
		jmp	short loc_1000B331
; ---------------------------------------------------------------------------

loc_1000B2F3:				; CODE XREF: sub_1000B22D+36j
		cmp	[ebp+2Ch], ebx
		jz	short loc_1000B313
		cmp	[ebp+30h], ebx
		jbe	short loc_1000B313

loc_1000B2FD:				; CODE XREF: sub_1000B22D+E4j
		mov	eax, [ebp+2Ch]
		push	dword ptr [eax+ebx*4] ;	Str
		push	dword ptr [esi+4] ; int
		call	sub_10009F25
		inc	ebx
		pop	ecx
		pop	ecx
		cmp	ebx, [ebp+30h]
		jb	short loc_1000B2FD

loc_1000B313:				; CODE XREF: sub_1000B22D+C9j
					; sub_1000B22D+CEj
		cmp	dword ptr [ebp+20h], 0
		jz	short loc_1000B326
		push	dword ptr [ebp+20h] ; Str
		push	dword ptr [esi+4] ; int
		call	sub_10009EB9
		pop	ecx
		pop	ecx

loc_1000B326:				; CODE XREF: sub_1000B22D+EAj
		push	edi
		push	dword ptr [esi+4]
		call	sub_10009F87
		pop	ecx
		pop	ecx

loc_1000B331:				; CODE XREF: sub_1000B22D+3Fj
					; sub_1000B22D+74j ...
		push	ebp		; Dst
		call	sub_1000A0DD
		mov	eax, [esp+20h+var_8]
		pop	ecx
		pop	ebx

loc_1000B33D:				; CODE XREF: sub_1000B22D+25j
		pop	edi
		pop	esi
		pop	ebp
		add	esp, 0Ch
		retn
sub_1000B22D	endp


; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1000B344(int,	void *Dst)
sub_1000B344	proc near		; CODE XREF: sub_1000CF1C+14Ep

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= byte ptr -8
arg_0		= dword	ptr  4
Dst		= dword	ptr  8

		sub	esp, 10h
		lea	eax, [esp+10h+var_10]
		push	esi
		mov	esi, [esp+14h+Dst]
		push	3
		push	eax
		lea	eax, [esp+1Ch+var_8]
		push	eax
		push	esi
		call	dword ptr [esi+14h]
		add	esp, 10h
		test	eax, eax
		jz	short loc_1000B36A
		or	eax, 0FFFFFFFFh
		jmp	loc_1000B415
; ---------------------------------------------------------------------------

loc_1000B36A:				; CODE XREF: sub_1000B344+1Cj
		push	ebx
		push	800h
		call	PORT_NewArena_Util
		mov	ebx, eax
		pop	ecx
		test	ebx, ebx
		jnz	short loc_1000B384
		or	eax, 0FFFFFFFFh
		jmp	loc_1000B414
; ---------------------------------------------------------------------------

loc_1000B384:				; CODE XREF: sub_1000B344+36j
		push	ebp
		push	edi

loc_1000B386:				; CODE XREF: sub_1000B344+BBj
		cmp	[esp+20h+var_C], 1
		jz	short loc_1000B3EA
		push	[esp+20h+var_C]
		push	[esp+24h+var_10]
		call	sub_10009C45
		mov	edi, eax
		pop	ecx
		pop	ecx
		test	edi, edi
		jz	short loc_1000B3EA
		push	dword ptr [edi+2Ch] ; Str
		lea	ecx, [edi+20h]
		push	ecx		; int
		call	sub_100080C2
		mov	ebp, eax
		pop	ecx
		pop	ecx
		test	ebp, ebp
		jz	short loc_1000B3E3
		lea	ecx, [edi+14h]
		push	ecx		; int
		push	dword ptr [edi+2Ch] ; Str
		push	ebp		; int
		push	[esp+2Ch+arg_0]	; int
		call	sub_10008F87
		push	ebp		; Dst
		mov	[esp+34h+Dst], eax
		call	sub_1000C19A
		mov	eax, [esp+34h+Dst]
		add	esp, 14h
		test	eax, eax
		jz	short loc_1000B3E3
		push	eax		; Dst
		call	sub_1000A0DD
		pop	ecx

loc_1000B3E3:				; CODE XREF: sub_1000B344+70j
					; sub_1000B344+96j
		push	edi		; Dst
		call	sub_1000A0DD
		pop	ecx

loc_1000B3EA:				; CODE XREF: sub_1000B344+47j
					; sub_1000B344+5Cj
		push	7
		lea	eax, [esp+24h+var_10]
		push	eax
		lea	eax, [esp+28h+var_8]
		push	eax
		push	esi
		call	dword ptr [esi+14h]
		add	esp, 10h
		test	eax, eax
		jz	short loc_1000B386
		push	0
		push	ebx
		call	PORT_FreeArena_Util
		push	esi
		call	dword ptr [esi+4]
		add	esp, 0Ch
		xor	eax, eax
		pop	edi
		pop	ebp

loc_1000B414:				; CODE XREF: sub_1000B344+3Bj
		pop	ebx

loc_1000B415:				; CODE XREF: sub_1000B344+21j
		pop	esi
		add	esp, 10h
		retn
sub_1000B344	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_1000B41A	proc near		; CODE XREF: sub_1000CF1C+157p

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	esi
		mov	esi, [ebp+arg_4]
		mov	[ebp+var_10], esi
		call	ds:PR_NewMonitor
		push	[ebp+arg_0]
		and	[ebp+var_8], 0
		mov	[ebp+var_C], eax
		lea	eax, [ebp+var_10]
		push	offset sub_1000D11F
		push	eax
		mov	[ebp+var_4], 1
		call	sub_1000CAA2
		push	[ebp+var_C]
		call	ds:PR_DestroyMonitor
		push	esi
		call	dword ptr [esi+4]
		add	esp, 14h
		xor	eax, eax
		pop	esi
		mov	esp, ebp
		pop	ebp
		retn
sub_1000B41A	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000B463	proc near		; CODE XREF: sub_1000CF1C+E9p

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
Dst		= dword	ptr -14h
Src		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 1Ch
		push	ebx
		mov	ebx, [esp+20h+arg_4]
		xor	eax, eax
		push	esi
		push	edi
		mov	[esp+28h+var_1C], eax
		xor	edi, edi
		mov	[esp+28h+var_18], eax
		xor	esi, esi
		push	3
		lea	eax, [esp+2Ch+Src]
		mov	[esp+2Ch+Dst], edi
		push	eax
		lea	eax, [esp+30h+var_8]
		push	eax
		push	ebx
		call	dword ptr [ebx+14h]
		add	esp, 10h
		test	eax, eax
		jz	short loc_1000B49E
		or	eax, 0FFFFFFFFh
		jmp	loc_1000B73C
; ---------------------------------------------------------------------------

loc_1000B49E:				; CODE XREF: sub_1000B463+31j
		mov	edi, [esp+28h+arg_0]
		push	ebp

loc_1000B4A3:				; CODE XREF: sub_1000B463+147j
		mov	eax, [esp+2Ch+var_C]
		mov	ebp, [esp+2Ch+Src]
		cmp	eax, 3
		jb	loc_1000B595
		cmp	byte ptr [ebp+0], 6
		jnz	loc_1000B595
		movzx	ecx, byte ptr [ebp+1]
		cmp	ecx, 3
		jnz	short loc_1000B510
		add	eax, 4
		push	eax
		call	PORT_Alloc_Util
		mov	esi, eax
		pop	ecx
		test	esi, esi
		jz	loc_1000B56E
		push	5		; Size
		push	ebp		; Src
		push	esi		; Dst
		call	memcpy
		push	4		; Size
		lea	eax, [esi+5]
		push	0		; Val
		push	eax		; Dst
		call	memset
		mov	eax, [esp+44h+var_C]
		add	eax, 0FFFFFFFBh
		push	eax		; Size
		lea	eax, [ebp+5]
		push	eax		; Src
		lea	eax, [esi+9]
		push	eax		; Dst
		call	memcpy
		add	esp, 24h
		add	[esp+2Ch+var_C], 4
		jmp	short loc_1000B568
; ---------------------------------------------------------------------------

loc_1000B510:				; CODE XREF: sub_1000B463+62j
		cmp	ecx, 1
		jnz	short loc_1000B56E
		add	eax, 3
		push	eax
		call	PORT_Alloc_Util
		mov	esi, eax
		pop	ecx
		test	esi, esi
		jz	short loc_1000B56E
		push	3		; Size
		push	ebp		; Src
		push	esi		; Dst
		call	memcpy
		xor	ecx, ecx
		mov	[esi+3], cl
		mov	al, [ebp+3]
		mov	[esi+4], al
		mov	[esi+5], cl
		mov	al, [ebp+4]
		mov	[esi+6], al
		mov	[esi+7], cl
		mov	al, [ebp+5]
		mov	[esi+8], al
		mov	eax, [esp+38h+var_C]
		add	eax, 0FFFFFFFAh
		push	eax		; Size
		lea	eax, [ebp+6]
		push	eax		; Src
		lea	eax, [esi+9]
		push	eax		; Dst
		call	memcpy
		add	esp, 18h
		add	[esp+2Ch+var_C], 3

loc_1000B568:				; CODE XREF: sub_1000B463+ABj
		mov	ebp, esi
		mov	[esp+2Ch+Src], esi

loc_1000B56E:				; CODE XREF: sub_1000B463+72j
					; sub_1000B463+B0j ...
		push	0
		lea	eax, [esp+30h+Src]
		mov	byte ptr [ebp+0], 8
		push	eax
		lea	eax, [esp+34h+var_8]
		push	eax
		push	dword ptr [edi]
		call	sub_1000BE99
		add	esp, 10h
		test	esi, esi
		jz	short loc_1000B595
		push	esi
		call	PORT_Free_Util
		pop	ecx
		xor	esi, esi

loc_1000B595:				; CODE XREF: sub_1000B463+4Bj
					; sub_1000B463+55j ...
		push	7
		lea	eax, [esp+30h+Src]
		push	eax
		lea	eax, [esp+34h+var_8]
		push	eax
		push	ebx
		call	dword ptr [ebx+14h]
		add	esp, 10h
		test	eax, eax
		jz	loc_1000B4A3
		push	0
		push	dword ptr [edi]
		call	sub_1000BF05
		push	3
		lea	eax, [esp+38h+Src]
		push	eax
		lea	eax, [esp+3Ch+var_8]
		push	eax
		push	ebx
		call	dword ptr [ebx+14h]
		mov	edi, [esp+44h+Dst]
		add	esp, 18h
		test	eax, eax
		jz	short loc_1000B5DC
		or	eax, 0FFFFFFFFh
		jmp	loc_1000B73B
; ---------------------------------------------------------------------------

loc_1000B5DC:				; CODE XREF: sub_1000B463+16Fj
		mov	esi, [esp+2Ch+arg_0]

loc_1000B5E0:				; CODE XREF: sub_1000B463+2C0j
		cmp	[esp+2Ch+var_C], 3
		jb	loc_1000B70E
		mov	eax, [esp+2Ch+Src]
		cmp	byte ptr [eax],	8
		jnz	loc_1000B70E
		movzx	eax, byte ptr [eax+1]
		cmp	eax, 2
		jnz	short loc_1000B65B
		mov	ebp, [esp+2Ch+var_8]
		inc	ebp
		push	ebp		; Str
		push	esi		; int
		call	sub_1000AFB6
		mov	[esp+34h+var_1C], eax
		pop	ecx
		pop	ecx
		test	eax, eax
		jz	loc_1000B6D7
		lea	ecx, [eax+14h]
		push	ecx
		push	esi
		call	sub_1000B092
		mov	edi, eax
		pop	ecx
		pop	ecx
		test	edi, edi
		jz	loc_1000B6E4
		mov	ecx, [esp+2Ch+var_4]
		dec	ecx
		push	ecx
		push	dword ptr [edi+0Ch]
		call	PORT_ArenaAlloc_Util
		mov	[edi+20h], eax
		pop	ecx
		pop	ecx
		test	eax, eax
		jz	loc_1000B6D7
		mov	ecx, [esp+2Ch+var_4]
		dec	ecx
		push	ecx		; Size
		push	ebp		; Src
		push	eax		; Dst
		call	memcpy
		jmp	short loc_1000B6CD
; ---------------------------------------------------------------------------

loc_1000B65B:				; CODE XREF: sub_1000B463+19Cj
		cmp	eax, 6
		jnz	short loc_1000B6D7
		mov	ebp, [esp+2Ch+var_8]
		inc	ebp
		push	ebp		; Str
		push	esi		; int
		call	sub_1000C924
		mov	[esp+34h+var_18], eax
		pop	ecx
		pop	ecx
		test	eax, eax
		jz	short loc_1000B6D7
		lea	ecx, [eax+14h]
		push	ecx
		push	esi
		call	sub_1000B092
		mov	edi, eax
		pop	ecx
		pop	ecx
		test	edi, edi
		jz	short loc_1000B6E4
		push	4
		push	dword ptr [edi+0Ch]
		call	PORT_ArenaAlloc_Util
		mov	[edi+2Ch], eax
		pop	ecx
		pop	ecx
		test	eax, eax
		jz	short loc_1000B6D7
		mov	eax, [esp+2Ch+var_4]
		dec	eax
		push	eax
		push	dword ptr [edi+0Ch]
		call	PORT_ArenaAlloc_Util
		pop	ecx
		pop	ecx
		mov	ecx, [edi+2Ch]
		mov	[ecx], eax
		mov	eax, [edi+2Ch]
		mov	ecx, [eax]
		test	ecx, ecx
		jz	short loc_1000B6D7
		mov	eax, [esp+2Ch+var_4]
		dec	eax
		push	eax		; Size
		push	ebp		; Src
		push	ecx		; Dst
		call	memcpy
		mov	dword ptr [edi+30h], 1

loc_1000B6CD:				; CODE XREF: sub_1000B463+1F6j
		push	edi
		push	esi
		call	sub_1000BC6F
		add	esp, 14h

loc_1000B6D7:				; CODE XREF: sub_1000B463+1B2j
					; sub_1000B463+1E3j ...
		test	edi, edi
		jz	short loc_1000B6E4
		push	edi		; Dst
		call	sub_1000A0DD
		pop	ecx
		xor	edi, edi

loc_1000B6E4:				; CODE XREF: sub_1000B463+1C8j
					; sub_1000B463+223j ...
		mov	eax, [esp+2Ch+var_1C]
		test	eax, eax
		jz	short loc_1000B6F9
		push	eax		; Dst
		call	sub_1000A0DD
		xor	eax, eax
		pop	ecx
		mov	[esp+2Ch+var_1C], eax

loc_1000B6F9:				; CODE XREF: sub_1000B463+287j
		mov	ebp, [esp+2Ch+var_18]
		test	ebp, ebp
		jz	short loc_1000B70E
		push	ebp		; Dst
		call	sub_1000A0DD
		xor	eax, eax
		pop	ecx
		mov	[esp+2Ch+var_18], eax

loc_1000B70E:				; CODE XREF: sub_1000B463+182j
					; sub_1000B463+18Fj ...
		push	7
		lea	eax, [esp+30h+Src]
		push	eax
		lea	eax, [esp+34h+var_8]
		push	eax
		push	ebx
		call	dword ptr [ebx+14h]
		add	esp, 10h
		test	eax, eax
		jz	loc_1000B5E0
		push	0
		push	dword ptr [esi]
		call	sub_1000BF05
		push	ebx
		call	dword ptr [ebx+4]
		add	esp, 0Ch
		xor	eax, eax

loc_1000B73B:				; CODE XREF: sub_1000B463+174j
		pop	ebp

loc_1000B73C:				; CODE XREF: sub_1000B463+36j
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 1Ch
		retn
sub_1000B463	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000B743	proc near		; CODE XREF: sub_1000CF1C+B5p

var_97C		= dword	ptr -97Ch
var_978		= dword	ptr -978h
var_974		= dword	ptr -974h
var_970		= dword	ptr -970h
var_96C		= dword	ptr -96Ch
var_968		= dword	ptr -968h
var_964		= dword	ptr -964h
var_960		= dword	ptr -960h
var_95C		= dword	ptr -95Ch
var_958		= dword	ptr -958h
var_954		= dword	ptr -954h
var_950		= dword	ptr -950h
Str		= dword	ptr -944h
var_940		= dword	ptr -940h
var_93C		= dword	ptr -93Ch
var_938		= dword	ptr -938h
var_934		= dword	ptr -934h
var_930		= dword	ptr -930h
var_92C		= dword	ptr -92Ch
var_928		= dword	ptr -928h
var_924		= dword	ptr -924h
var_920		= dword	ptr -920h
var_914		= dword	ptr -914h
var_908		= dword	ptr -908h
var_8FC		= dword	ptr -8FCh
var_8F8		= dword	ptr -8F8h
var_8F4		= dword	ptr -8F4h
var_8E8		= dword	ptr -8E8h
var_8DC		= dword	ptr -8DCh
var_8D8		= dword	ptr -8D8h
var_8D0		= dword	ptr -8D0h
var_8CC		= byte ptr -8CCh
var_804		= byte ptr -804h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 97Ch
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+97Ch+var_4], eax
		push	ebx
		mov	ebx, [esp+980h+arg_0]
		lea	eax, [esp+980h+var_974]
		push	ebp
		push	esi
		mov	esi, [esp+988h+arg_4]
		xor	ebp, ebp
		push	3
		push	eax
		lea	eax, [esp+990h+var_97C]
		push	eax
		push	esi
		call	dword ptr [esi+14h]
		add	esp, 10h
		test	eax, eax
		jz	short loc_1000B789
		or	eax, 0FFFFFFFFh
		jmp	loc_1000B9E6
; ---------------------------------------------------------------------------

loc_1000B789:				; CODE XREF: sub_1000B743+3Cj
		push	edi

loc_1000B78A:				; CODE XREF: sub_1000B743+1B9j
		mov	edx, [esp+98Ch+var_974]
		mov	ecx, [esp+98Ch+var_970]
		add	ecx, 0FFFFFFFDh
		mov	[esp+98Ch+var_964], ecx
		lea	eax, [edx+3]
		mov	[esp+98Ch+var_968], eax
		mov	eax, [esp+98Ch+var_97C]
		movzx	edi, byte ptr [eax]
		inc	eax
		mov	[esp+98Ch+var_93C], eax
		mov	eax, [esp+98Ch+var_978]
		dec	eax
		mov	[esp+98Ch+var_938], eax
		test	ecx, ecx
		jz	loc_1000B8E7
		test	eax, eax
		jz	loc_1000B8E7
		mov	eax, edi
		dec	eax
		jz	short loc_1000B849
		sub	eax, 3
		jz	short loc_1000B7D9
		dec	eax
		jnz	loc_1000B8E7
		xor	ebp, ebp
		inc	ebp

loc_1000B7D9:				; CODE XREF: sub_1000B743+8Aj
		movzx	eax, byte ptr [edx]
		mov	[esp+98Ch+var_95C], eax
		movzx	eax, byte ptr [edx+2]
		push	800h
		mov	[esp+990h+var_960], edi
		mov	[esp+990h+var_958], eax
		call	PORT_NewArena_Util
		mov	[esp+990h+var_954], eax
		pop	ecx
		test	eax, eax
		jz	loc_1000B8E7
		lea	eax, [esp+98Ch+var_96C]
		push	eax
		lea	eax, [esp+990h+var_960]
		push	eax
		call	sub_1000952B
		pop	ecx
		pop	ecx
		test	eax, eax
		jnz	loc_1000B8E7
		push	ebp		; int
		push	[esp+990h+Str]	; Str
		lea	eax, [esp+994h+var_940]
		push	eax		; int
		lea	eax, [esp+998h+var_950]
		push	eax		; int
		push	ebx		; int
		call	sub_1000CBEA
		push	0
		push	[esp+9A4h+var_954]
		call	PORT_FreeArena_Util
		add	esp, 1Ch
		and	[esp+98Ch+var_954], 0
		jmp	loc_1000B8E7
; ---------------------------------------------------------------------------

loc_1000B849:				; CODE XREF: sub_1000B743+85j
		movzx	eax, byte ptr [edx]
		mov	[esp+98Ch+var_8F8], eax
		mov	[esp+98Ch+var_8FC], 1
		movzx	eax, byte ptr [edx+2]
		mov	[esp+98Ch+var_8F4], eax
		lea	eax, [esp+98Ch+var_96C]
		push	eax
		lea	eax, [esp+990h+var_8FC]
		push	eax
		call	sub_100093F1
		pop	ecx
		pop	ecx
		test	eax, eax
		jnz	short loc_1000B8E7
		push	[esp+98Ch+var_8D0] ; Str
		lea	eax, [esp+990h+var_8DC]
		push	eax		; int
		call	sub_100080C2
		mov	edi, eax
		pop	ecx
		pop	ecx
		test	edi, edi
		jz	short loc_1000B8BC
		lea	eax, [esp+98Ch+var_8E8]
		push	eax		; int
		push	[esp+990h+var_8D0] ; Str
		push	edi		; int
		push	ebx		; int
		call	sub_1000CC3F
		push	edi		; Dst
		call	sub_1000C19A
		add	esp, 14h

loc_1000B8BC:				; CODE XREF: sub_1000B743+158j
		lea	eax, [esp+98Ch+var_804]
		push	eax
		push	[esp+990h+var_8D8]
		call	sub_1000D109
		lea	eax, [esp+994h+var_8CC]
		push	eax
		push	[esp+998h+var_8D0]
		call	sub_1000D109
		add	esp, 10h

loc_1000B8E7:				; CODE XREF: sub_1000B743+74j
					; sub_1000B743+7Cj ...
		push	7
		lea	eax, [esp+990h+var_974]
		push	eax
		lea	eax, [esp+994h+var_97C]
		push	eax
		push	esi
		call	dword ptr [esi+14h]
		add	esp, 10h
		test	eax, eax
		jz	loc_1000B78A
		push	3
		lea	eax, [esp+990h+var_974]
		push	eax
		lea	eax, [esp+994h+var_97C]
		push	eax
		push	esi
		call	dword ptr [esi+14h]
		add	esp, 10h
		test	eax, eax
		jz	short loc_1000B921
		or	eax, 0FFFFFFFFh
		jmp	loc_1000B9E5
; ---------------------------------------------------------------------------

loc_1000B921:				; CODE XREF: sub_1000B743+1D4j
		push	6
		pop	ebp

loc_1000B924:				; CODE XREF: sub_1000B743+28Ej
		mov	ecx, [esp+98Ch+var_974]
		mov	edi, [esp+98Ch+var_97C]
		mov	edx, [esp+98Ch+var_970]
		add	edx, 0FFFFFFFDh
		lea	eax, [ecx+3]
		mov	[esp+98Ch+var_964], edx
		mov	[esp+98Ch+var_968], eax
		movzx	eax, byte ptr [edi]
		cmp	eax, ebp
		jnz	short loc_1000B9BC
		mov	eax, [esp+98Ch+var_978]
		inc	edi
		dec	eax
		test	edx, edx
		jz	short loc_1000B9BC
		test	eax, eax
		jz	short loc_1000B9BC
		movzx	eax, byte ptr [ecx]
		mov	[esp+98Ch+var_930], eax
		mov	[esp+98Ch+var_934], ebp
		movzx	eax, byte ptr [ecx+2]
		push	800h
		mov	[esp+990h+var_92C], eax
		call	PORT_NewArena_Util
		mov	[esp+990h+var_928], eax
		lea	eax, [esp+990h+var_96C]
		push	edi		; Str
		push	eax		; int
		lea	eax, [esp+998h+var_934]
		push	eax		; int
		call	sub_1000969B
		add	esp, 10h
		test	eax, eax
		jnz	short loc_1000B9AA
		lea	eax, [esp+98Ch+var_908]
		push	eax		; int
		lea	eax, [esp+990h+var_914]
		push	eax		; int
		lea	eax, [esp+994h+var_920]
		push	eax		; int
		push	[esp+998h+var_924] ; Str
		push	ebx		; int
		call	sub_1000CCE9
		add	esp, 14h

loc_1000B9AA:				; CODE XREF: sub_1000B743+246j
		push	0
		push	[esp+990h+var_928]
		call	PORT_FreeArena_Util
		and	[esp+994h+var_928], 0
		pop	ecx
		pop	ecx

loc_1000B9BC:				; CODE XREF: sub_1000B743+200j
					; sub_1000B743+20Aj ...
		push	7
		lea	eax, [esp+990h+var_974]
		push	eax
		lea	eax, [esp+994h+var_97C]
		push	eax
		push	esi
		call	dword ptr [esi+14h]
		add	esp, 10h
		test	eax, eax
		jz	loc_1000B924
		push	esi
		call	dword ptr [esi+4]
		pop	ecx
		mov	dword ptr [ebx+8], 1
		xor	eax, eax

loc_1000B9E5:				; CODE XREF: sub_1000B743+1D9j
		pop	edi

loc_1000B9E6:				; CODE XREF: sub_1000B743+41j
		mov	ecx, [esp+988h+var_4]
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 97Ch
		retn
sub_1000B743	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_1000B9FE(int,	size_t Size)
sub_1000B9FE	proc near		; CODE XREF: sub_10008F87+8Ep
					; sub_100090F1+37p ...

var_24		= byte ptr -24h
var_18		= dword	ptr -18h
var_C		= byte ptr -0Ch
arg_0		= dword	ptr  8
Size		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 24h
		push	esi
		push	edi
		push	800h
		call	PORT_NewArena_Util
		mov	esi, eax
		pop	ecx
		test	esi, esi
		jz	short loc_1000BA87
		mov	edi, [ebp+Size]
		lea	eax, [ebp+var_18]
		push	eax		; int
		push	esi		; int
		push	edi		; Size
		call	sub_1000A168
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_1000BA7D
		lea	eax, [ebp+var_C]
		push	eax
		lea	eax, [edi+20h]
		push	eax
		push	esi
		call	sub_10008A83
		add	esp, 0Ch
		cmp	eax, 0FFFFFFFFh
		jz	short loc_1000BA7D
		lea	eax, [ebp+var_24]
		push	eax
		lea	eax, [ebp+var_C]
		push	esi
		push	eax
		call	sub_1000A239
		add	esp, 0Ch
		cmp	eax, 0FFFFFFFFh
		jz	short loc_1000BA7D
		lea	eax, [ebp+var_18]
		push	eax
		lea	eax, [ebp+var_24]
		push	eax
		push	edi
		push	[ebp+arg_0]
		call	sub_1000BB0E
		add	esp, 10h
		test	eax, eax
		jnz	short loc_1000BA7D
		push	eax
		push	esi
		call	PORT_FreeArena_Util
		pop	ecx
		pop	ecx
		xor	eax, eax
		jmp	short loc_1000BA8A
; ---------------------------------------------------------------------------

loc_1000BA7D:				; CODE XREF: sub_1000B9FE+2Cj
					; sub_1000B9FE+42j ...
		push	0
		push	esi
		call	PORT_FreeArena_Util
		pop	ecx
		pop	ecx

loc_1000BA87:				; CODE XREF: sub_1000B9FE+17j
		or	eax, 0FFFFFFFFh

loc_1000BA8A:				; CODE XREF: sub_1000B9FE+7Dj
		pop	edi
		pop	esi
		mov	esp, ebp
		pop	ebp
		retn
sub_1000B9FE	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_1000BA90	proc near		; CODE XREF: sub_1000CBEA+3Ep

var_18		= byte ptr -18h
var_C		= byte ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		push	esi
		push	edi
		push	800h
		call	PORT_NewArena_Util
		mov	esi, eax
		pop	ecx
		test	esi, esi
		jz	short loc_1000BB05
		mov	edi, [ebp+arg_4]
		lea	eax, [ebp+var_C]
		push	eax
		push	esi
		push	edi
		call	sub_1000A2A1
		add	esp, 0Ch
		cmp	eax, 0FFFFFFFFh
		jz	short loc_1000BAFB
		push	dword ptr [edi]
		lea	eax, [ebp+var_18]
		push	eax
		push	esi
		push	[ebp+arg_8]
		call	sub_1000A33C
		add	esp, 10h
		cmp	eax, 0FFFFFFFFh
		jz	short loc_1000BAFB
		lea	eax, [ebp+var_C]
		push	eax
		lea	eax, [ebp+var_18]
		push	eax
		push	edi
		push	[ebp+arg_0]
		call	sub_1000BB0E
		add	esp, 10h
		test	eax, eax
		jnz	short loc_1000BAFB
		push	eax
		push	esi
		call	PORT_FreeArena_Util
		pop	ecx
		pop	ecx
		xor	eax, eax
		jmp	short loc_1000BB08
; ---------------------------------------------------------------------------

loc_1000BAFB:				; CODE XREF: sub_1000BA90+2Dj
					; sub_1000BA90+44j ...
		push	0
		push	esi
		call	PORT_FreeArena_Util
		pop	ecx
		pop	ecx

loc_1000BB05:				; CODE XREF: sub_1000BA90+17j
		or	eax, 0FFFFFFFFh

loc_1000BB08:				; CODE XREF: sub_1000BA90+69j
		pop	edi
		pop	esi
		mov	esp, ebp
		pop	ebp
		retn
sub_1000BA90	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_1000BB0E	proc near		; CODE XREF: sub_1000B9FE+66p
					; sub_1000BA90+52p ...

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		mov	eax, [ebp+arg_C]
		mov	edx, [ebp+arg_4]
		push	esi
		mov	esi, [ebp+arg_0]
		mov	ecx, [eax+4]
		mov	eax, [eax+8]
		mov	[ebp+var_4], eax
		mov	al, [edx+4]
		mov	[ebp+var_8], ecx
		mov	[ecx], al
		mov	al, [edx]
		mov	[ecx+1], al
		mov	al, [edx+8]
		mov	[ecx+2], al
		mov	eax, [ebp+arg_8]
		push	0
		mov	ecx, [eax+4]
		mov	eax, [eax+8]
		mov	[ebp+var_C], eax
		mov	al, [edx]
		mov	[ebp+var_10], ecx
		mov	[ecx], al
		lea	eax, [ebp+var_8]
		push	eax
		lea	eax, [ebp+var_10]
		push	eax
		push	dword ptr [esi]
		call	sub_1000BE99
		add	esp, 10h
		test	eax, eax
		jnz	short loc_1000BB73
		push	eax
		push	dword ptr [esi]
		call	sub_1000BF05
		pop	ecx
		pop	ecx
		test	eax, eax
		jz	short loc_1000BB76

loc_1000BB73:				; CODE XREF: sub_1000BB0E+55j
		or	eax, 0FFFFFFFFh

loc_1000BB76:				; CODE XREF: sub_1000BB0E+63j
		pop	esi
		mov	esp, ebp
		pop	ebp
		retn
sub_1000BB0E	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_1000BB7B	proc near		; CODE XREF: sub_10008F87+ABp
					; sub_1000BF6B+B0p

var_18		= dword	ptr -18h
var_C		= byte ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		push	esi
		push	edi
		push	800h
		call	PORT_NewArena_Util
		mov	esi, eax
		pop	ecx
		test	esi, esi
		jz	short loc_1000BBEC
		mov	edi, [ebp+arg_4]
		lea	eax, [ebp+var_C]
		push	eax
		push	esi
		push	edi
		call	sub_1000A3AD
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_1000BBE2
		lea	eax, [ebp+var_18]
		push	eax		; int
		push	esi		; int
		push	dword ptr [edi+10h] ; Str
		call	sub_1000A400
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_1000BBE2
		lea	eax, [ebp+var_C]
		push	eax
		lea	eax, [ebp+var_18]
		push	eax
		push	edi
		push	[ebp+arg_0]
		call	sub_1000BB0E
		add	esp, 10h
		test	eax, eax
		jnz	short loc_1000BBE2
		push	eax
		push	esi
		call	PORT_FreeArena_Util
		pop	ecx
		pop	ecx
		xor	eax, eax
		jmp	short loc_1000BBEF
; ---------------------------------------------------------------------------

loc_1000BBE2:				; CODE XREF: sub_1000BB7B+2Cj
					; sub_1000BB7B+40j ...
		push	0
		push	esi
		call	PORT_FreeArena_Util
		pop	ecx
		pop	ecx

loc_1000BBEC:				; CODE XREF: sub_1000BB7B+17j
		or	eax, 0FFFFFFFFh

loc_1000BBEF:				; CODE XREF: sub_1000BB7B+65j
		pop	edi
		pop	esi
		mov	esp, ebp
		pop	ebp
		retn
sub_1000BB7B	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_1000BBF5	proc near		; CODE XREF: sub_1000CCE9+91p

var_18		= dword	ptr -18h
var_C		= byte ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		push	esi
		push	edi
		push	800h
		call	PORT_NewArena_Util
		mov	esi, eax
		pop	ecx
		test	esi, esi
		jz	short loc_1000BC66
		mov	edi, [ebp+arg_4]
		lea	eax, [ebp+var_C]
		push	eax
		push	esi
		push	edi
		call	sub_1000A452
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_1000BC5C
		lea	eax, [ebp+var_18]
		push	eax		; int
		push	esi		; int
		push	dword ptr [edi+10h] ; Str
		call	sub_1000A50C
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_1000BC5C
		lea	eax, [ebp+var_C]
		push	eax
		lea	eax, [ebp+var_18]
		push	eax
		push	edi
		push	[ebp+arg_0]
		call	sub_1000BB0E
		add	esp, 10h
		test	eax, eax
		jnz	short loc_1000BC5C
		push	eax
		push	esi
		call	PORT_FreeArena_Util
		pop	ecx
		pop	ecx
		xor	eax, eax
		jmp	short loc_1000BC69
; ---------------------------------------------------------------------------

loc_1000BC5C:				; CODE XREF: sub_1000BBF5+2Cj
					; sub_1000BBF5+40j ...
		push	0
		push	esi
		call	PORT_FreeArena_Util
		pop	ecx
		pop	ecx

loc_1000BC66:				; CODE XREF: sub_1000BBF5+17j
		or	eax, 0FFFFFFFFh

loc_1000BC69:				; CODE XREF: sub_1000BBF5+65j
		pop	edi
		pop	esi
		mov	esp, ebp
		pop	ebp
		retn
sub_1000BBF5	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_1000BC6F	proc near		; CODE XREF: sub_10008F87+F7p
					; sub_1000916D+4Ep ...

var_18		= byte ptr -18h
var_C		= byte ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		push	esi
		push	edi
		push	800h
		call	PORT_NewArena_Util
		mov	esi, eax
		pop	ecx
		test	esi, esi
		jz	short loc_1000BCE1
		mov	edi, [ebp+arg_4]
		lea	eax, [ebp+var_C]
		push	eax
		push	esi
		push	edi
		call	sub_1000A55E
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_1000BCD7
		lea	eax, [ebp+var_18]
		push	eax
		lea	eax, [edi+10h]
		push	esi
		push	eax
		call	sub_1000A7A5
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_1000BCD7
		lea	eax, [ebp+var_C]
		push	eax
		lea	eax, [ebp+var_18]
		push	eax
		push	edi
		push	[ebp+arg_0]
		call	sub_1000BB0E
		add	esp, 10h
		test	eax, eax
		jnz	short loc_1000BCD7
		push	eax
		push	esi
		call	PORT_FreeArena_Util
		pop	ecx
		pop	ecx
		xor	eax, eax
		jmp	short loc_1000BCE4
; ---------------------------------------------------------------------------

loc_1000BCD7:				; CODE XREF: sub_1000BC6F+2Cj
					; sub_1000BC6F+41j ...
		push	0
		push	esi
		call	PORT_FreeArena_Util
		pop	ecx
		pop	ecx

loc_1000BCE1:				; CODE XREF: sub_1000BC6F+17j
		or	eax, 0FFFFFFFFh

loc_1000BCE4:				; CODE XREF: sub_1000BC6F+66j
		pop	edi
		pop	esi
		mov	esp, ebp
		pop	ebp
		retn
sub_1000BC6F	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_1000BCEA	proc near		; CODE XREF: sub_1000CF1C+7Ep

var_18		= byte ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= byte ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		push	esi
		push	800h
		call	PORT_NewArena_Util
		mov	esi, eax
		pop	ecx
		test	esi, esi
		jz	short loc_1000BD2D
		push	3
		pop	eax
		push	eax
		push	esi
		mov	[ebp+var_4], eax
		call	PORT_ArenaAlloc_Util
		mov	[ebp+var_8], eax
		pop	ecx
		pop	ecx
		test	eax, eax
		jnz	short loc_1000BD35
		push	0FFFFE013h
		call	PORT_SetError_Util
		pop	ecx

loc_1000BD23:				; CODE XREF: sub_1000BCEA+5Fj
					; sub_1000BCEA+87j
		push	0
		push	esi
		call	PORT_FreeArena_Util
		pop	ecx
		pop	ecx

loc_1000BD2D:				; CODE XREF: sub_1000BCEA+16j
		or	eax, 0FFFFFFFFh

loc_1000BD30:				; CODE XREF: sub_1000BCEA+94j
		pop	esi
		mov	esp, ebp
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_1000BD35:				; CODE XREF: sub_1000BCEA+2Cj
		push	9
		pop	eax
		push	eax
		push	esi
		mov	[ebp+var_10], eax
		call	PORT_ArenaAlloc_Util
		mov	[ebp+var_14], eax
		pop	ecx
		pop	ecx
		test	eax, eax
		jz	short loc_1000BD23
		push	8		; Size
		inc	eax
		push	offset aVersion	; "Version"
		push	eax		; Dst
		call	memcpy
		lea	eax, [ebp+var_C]
		push	eax
		lea	eax, [ebp+var_18]
		push	eax
		push	[ebp+arg_4]
		push	[ebp+arg_0]
		call	sub_1000BB0E
		add	esp, 1Ch
		test	eax, eax
		jnz	short loc_1000BD23
		push	eax
		push	esi
		call	PORT_FreeArena_Util
		pop	ecx
		pop	ecx
		xor	eax, eax
		jmp	short loc_1000BD30
sub_1000BCEA	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_1000BD80	proc near		; DATA XREF: sub_1000CAA2+21o

var_C		= byte ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		push	edi
		push	800h
		call	PORT_NewArena_Util
		mov	esi, eax
		pop	ecx
		test	esi, esi
		jz	short loc_1000BDF5
		push	8F8h
		push	esi
		call	PORT_ArenaAlloc_Util
		mov	edx, [ebp+arg_0]
		mov	edi, eax
		mov	ecx, [edx+4]
		movzx	ecx, byte ptr [ecx]
		mov	[edi+4], ecx
		mov	ecx, [edx+4]
		movzx	ecx, byte ptr [ecx+1]
		mov	[edi], ecx
		mov	ecx, [edx+4]
		movzx	eax, byte ptr [ecx+2]
		mov	[edi+8], eax
		mov	[edi+0Ch], esi
		mov	eax, [edx+8]
		sub	eax, 3
		mov	[ebp+var_4], eax
		mov	eax, [edx+4]
		add	eax, 3
		mov	[ebp+var_8], eax
		lea	eax, [ebp+var_C]
		push	eax
		push	edi
		call	sub_100093F1
		add	esp, 10h
		test	eax, eax
		jz	short loc_1000BDFE
		push	0
		push	esi
		call	PORT_FreeArena_Util
		pop	ecx
		pop	ecx

loc_1000BDF5:				; CODE XREF: sub_1000BD80+17j
		or	eax, 0FFFFFFFFh

loc_1000BDF8:				; CODE XREF: sub_1000BD80+A8j
		pop	edi
		pop	esi
		mov	esp, ebp
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_1000BDFE:				; CODE XREF: sub_1000BD80+69j
		mov	esi, [ebp+arg_C]
		and	dword ptr [edi+20h], 0
		push	edi
		push	dword ptr [esi+4]
		call	sub_100093BF
		push	dword ptr [esi+8]
		mov	edi, eax
		push	[ebp+arg_4]
		push	edi
		call	dword ptr [esi]
		push	0		; int
		push	edi		; Dst
		mov	esi, eax
		call	sub_10009FE9
		add	esp, 1Ch
		mov	eax, esi
		jmp	short loc_1000BDF8
sub_1000BD80	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000BE2A	proc near		; CODE XREF: sub_1000C0BF+10p
					; sub_1000C810+100p

arg_0		= dword	ptr  4

		push	dword_10015054
		call	ds:PR_Lock
		mov	eax, [esp+4+arg_0]
		push	eax
		call	dword ptr [eax+4]
		push	dword_10015054
		call	ds:PR_Unlock
		add	esp, 0Ch
		retn
sub_1000BE2A	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000BE4E	proc near		; CODE XREF: sub_1000AEEA+2Dp

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	esi
		push	dword_10015054
		call	ds:PR_Lock
		push	[esp+8+arg_C]
		mov	eax, [esp+0Ch+arg_0]
		push	[esp+0Ch+arg_8]
		push	[esp+10h+arg_4]
		push	eax
		call	dword ptr [eax+0Ch]
		push	dword_10015054
		mov	esi, eax
		call	ds:PR_Unlock
		add	esp, 18h
		mov	eax, esi
		pop	esi
		retn
sub_1000BE4E	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000BE84	proc near		; CODE XREF: sub_1000C7B1+8p
		cmp	dword_10015054,	0
		jnz	short locret_1000BE98
		call	ds:PR_NewLock
		mov	dword_10015054,	eax

locret_1000BE98:			; CODE XREF: sub_1000BE84+7j
		retn
sub_1000BE84	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000BE99	proc near		; CODE XREF: sub_1000B463+11Dp
					; sub_1000BB0E+4Bp

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	esi
		push	dword_10015054
		call	ds:PR_Lock
		push	[esp+8+arg_C]
		mov	eax, [esp+0Ch+arg_0]
		push	[esp+0Ch+arg_8]
		push	[esp+10h+arg_4]
		push	eax
		call	dword ptr [eax+10h]
		push	dword_10015054
		mov	esi, eax
		call	ds:PR_Unlock
		add	esp, 18h
		mov	eax, esi
		pop	esi
		retn
sub_1000BE99	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000BECF	proc near		; CODE XREF: sub_1000CA09+1Ap
					; sub_1000CA09+7Cp

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	esi
		push	dword_10015054
		call	ds:PR_Lock
		push	[esp+8+arg_C]
		mov	eax, [esp+0Ch+arg_0]
		push	[esp+0Ch+arg_8]
		push	[esp+10h+arg_4]
		push	eax
		call	dword ptr [eax+14h]
		push	dword_10015054
		mov	esi, eax
		call	ds:PR_Unlock
		add	esp, 18h
		mov	eax, esi
		pop	esi
		retn
sub_1000BECF	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000BF05	proc near		; CODE XREF: sub_10009E3E+58p
					; sub_1000B463+151p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		push	dword_10015054
		call	ds:PR_Lock
		mov	eax, [esp+8+arg_0]
		push	[esp+8+arg_4]
		push	eax
		call	dword ptr [eax+18h]
		push	dword_10015054
		mov	esi, eax
		call	ds:PR_Unlock
		add	esp, 10h
		mov	eax, esi
		pop	esi
		retn
sub_1000BF05	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_1000BF33	proc near		; CODE XREF: sub_100055A8+ACp
		push	ebp
		mov	ebp, esp
		pop	ebp
		jmp	sub_1000CBEA
sub_1000BF33	endp

; [0000002F BYTES: COLLAPSED FUNCTION __fseeki64]

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1000BF6B(int,	int, char *Str)
sub_1000BF6B	proc near		; CODE XREF: sub_10004B1B+143p

var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
Str		= dword	ptr  0Ch

		push	ecx
		push	ebx
		mov	ebx, [esp+8+arg_0]
		push	ebp
		push	esi
		push	edi
		push	ebx
		or	esi, 0FFFFFFFFh
		xor	edi, edi
		call	sub_1000C736
		mov	eax, [esp+18h+arg_4]
		add	eax, 38h
		push	eax
		push	ebx
		mov	[esp+20h+var_4], eax
		call	sub_1000B092
		mov	ebp, eax
		add	esp, 0Ch
		test	ebp, ebp
		jz	loc_1000C03C
		cmp	[ebp+20h], edi
		jnz	short loc_1000BFDC
		push	[esp+14h+Str]
		push	[esp+18h+arg_4]
		push	ebx
		call	sub_1000916D
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		jnz	short loc_1000C02A
		push	[esp+14h+Str]	; Str
		push	[esp+18h+arg_4]	; int
		push	ebx		; int
		call	sub_100090F1
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		jnz	short loc_1000C02A
		push	eax
		push	[esp+18h+var_4]
		push	[esp+1Ch+Str]
		jmp	short loc_1000C00B
; ---------------------------------------------------------------------------

loc_1000BFDC:				; CODE XREF: sub_1000BF6B+36j
		push	dword ptr [ebp+20h] ; Str
		push	[esp+18h+arg_4]	; int
		push	ebx		; int
		call	sub_100090F1
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		jnz	short loc_1000C02A
		push	dword ptr [ebp+20h] ; Str
		push	ebx		; int
		call	sub_1000AFB6
		mov	edi, eax
		pop	ecx
		pop	ecx
		test	edi, edi
		jnz	short loc_1000C028
		push	eax		; int
		push	[esp+18h+var_4]	; int
		push	dword ptr [ebp+20h] ; Str

loc_1000C00B:				; CODE XREF: sub_1000BF6B+6Fj
		call	sub_1000A992
		mov	edi, eax
		add	esp, 0Ch
		test	edi, edi
		jz	short loc_1000C02A
		push	edi
		push	ebx
		call	sub_1000BB7B
		mov	esi, eax
		pop	ecx
		pop	ecx
		test	esi, esi
		jnz	short loc_1000C02A

loc_1000C028:				; CODE XREF: sub_1000BF6B+96j
		xor	esi, esi

loc_1000C02A:				; CODE XREF: sub_1000BF6B+4Dj
					; sub_1000BF6B+64j ...
		push	ebp		; Dst
		call	sub_1000A0DD
		pop	ecx
		test	edi, edi
		jz	short loc_1000C03C
		push	edi		; Dst
		call	sub_1000A0DD
		pop	ecx

loc_1000C03C:				; CODE XREF: sub_1000BF6B+2Dj
					; sub_1000BF6B+C8j
		push	ebx
		call	sub_1000CBCD
		pop	ecx
		pop	edi
		mov	eax, esi
		pop	esi
		pop	ebp
		pop	ebx
		pop	ecx
		retn
sub_1000BF6B	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_1000C04B	proc near		; CODE XREF: sub_10004B1B+101p
					; sub_10004E98+116p ...

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	esi
		push	edi
		push	[ebp+arg_0]
		call	sub_1000C736
		push	dword_1001505C
		call	ds:PR_Lock
		mov	eax, [ebp+arg_4]
		pop	ecx
		pop	ecx
		mov	edi, [eax+90h]
		test	edi, edi
		jnz	short loc_1000C078
		or	esi, 0FFFFFFFFh
		jmp	short loc_1000C0A3
; ---------------------------------------------------------------------------

loc_1000C078:				; CODE XREF: sub_1000C04B+26j
		mov	esi, [ebp+arg_8]
		movsd
		movsd
		movsd
		mov	eax, [eax+6Ch]
		test	eax, eax
		jnz	short loc_1000C089
		xor	esi, esi
		jmp	short loc_1000C0A3
; ---------------------------------------------------------------------------

loc_1000C089:				; CODE XREF: sub_1000C04B+38j
		mov	esi, [ebp+arg_8]
		lea	edi, [eax+14h]
		push	eax		; Size
		push	[ebp+arg_0]	; int
		movsd
		movsd
		movsd
		call	sub_1000B9FE
		mov	esi, eax
		neg	esi
		pop	ecx
		pop	ecx
		sbb	esi, esi

loc_1000C0A3:				; CODE XREF: sub_1000C04B+2Bj
					; sub_1000C04B+3Cj
		push	dword_1001505C
		call	ds:PR_Unlock
		push	[ebp+arg_0]
		call	sub_1000CBCD
		pop	ecx
		pop	ecx
		pop	edi
		mov	eax, esi
		pop	esi
		pop	ebp
		retn
sub_1000C04B	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000C0BF	proc near		; CODE XREF: legacy_Open+88p
					; sub_10007613+1Ap

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		test	esi, esi
		jz	short loc_1000C0F3
		cmp	dword ptr [esi], 0
		jz	short loc_1000C0D8
		push	dword ptr [esi]
		call	sub_1000BE2A
		and	dword ptr [esi], 0
		pop	ecx

loc_1000C0D8:				; CODE XREF: sub_1000C0BF+Cj
		cmp	dword ptr [esi+4], 0
		jz	short loc_1000C0EC
		push	dword ptr [esi+4]
		call	ds:PR_DestroyMonitor
		and	dword ptr [esi+4], 0
		pop	ecx

loc_1000C0EC:				; CODE XREF: sub_1000C0BF+1Dj
		push	esi
		call	PORT_Free_Util
		pop	ecx

loc_1000C0F3:				; CODE XREF: sub_1000C0BF+7j
		pop	esi
		retn
sub_1000C0BF	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000C0F5	proc near		; CODE XREF: sub_100080C2+4p
		push	esi
		call	sub_1000C745
		mov	esi, dword_1001503C
		test	esi, esi
		jz	short loc_1000C113
		mov	ecx, [esi]
		dec	dword_10015048
		mov	dword_1001503C,	ecx

loc_1000C113:				; CODE XREF: sub_1000C0F5+Ej
		call	sub_1000CBDC
		test	esi, esi
		jz	short loc_1000C120
		mov	eax, esi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1000C120:				; CODE XREF: sub_1000C0F5+25j
		push	428h
		call	PORT_ZAlloc_Util
		pop	ecx
		pop	esi
		retn
sub_1000C0F5	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000C12D	proc near		; CODE XREF: sub_10006396+D3p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		xor	eax, eax
		cmp	[esp+arg_8], eax
		setnz	al
		add	eax, 4
		push	eax
		push	[esp+4+arg_4]
		push	[esp+8+arg_0]
		call	sub_10009DD8
		add	esp, 0Ch
		retn
sub_1000C12D	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000C14B	proc near		; CODE XREF: sub_10006396+9Bp

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		push	edi
		push	dword ptr [esi+4]
		call	sub_1000C736
		lea	eax, [esi+54h]
		xor	edi, edi
		push	eax
		push	dword ptr [esi+4]
		call	sub_10009D7D
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_1000C171
		or	edi, 0FFFFFFFFh

loc_1000C171:				; CODE XREF: sub_1000C14B+21j
		push	esi
		call	sub_1000B22D
		push	dword ptr [esi+6Ch] ; Dst
		call	sub_1000A0DD
		push	dword ptr [esi+4]
		and	dword ptr [esi+6Ch], 0
		and	dword ptr [esi+90h], 0
		call	sub_1000CBCD
		add	esp, 0Ch
		mov	eax, edi
		pop	edi
		pop	esi
		retn
sub_1000C14B	endp


; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1000C19A(void	*Dst)
sub_1000C19A	proc near		; CODE XREF: sub_10004568+173p
					; sub_10005387+206p ...

Dst		= dword	ptr  4

		push	1		; int
		push	[esp+4+Dst]	; Dst
		call	sub_10009FE9
		pop	ecx
		pop	ecx
		retn
sub_1000C19A	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: thunk

; int __cdecl sub_1000C1A8(void	*Dst)
sub_1000C1A8	proc near		; CODE XREF: sub_10005387+1DDp
					; sub_100069FA+1E4p ...

Dst		= dword	ptr  4

		jmp	sub_1000A0DD
sub_1000C1A8	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000C1AD	proc near		; CODE XREF: legacy_Shutdown+9p
		cmp	dword_10015060,	0
		jz	locret_1000C265
		call	sub_1000C745
		jmp	short loc_1000C1D6
; ---------------------------------------------------------------------------

loc_1000C1C1:				; CODE XREF: sub_1000C1AD+32j
		mov	eax, [eax+10h]
		dec	dword_10015050
		push	ecx
		mov	dword_10015044,	eax
		call	PORT_Free_Util
		pop	ecx

loc_1000C1D6:				; CODE XREF: sub_1000C1AD+12j
		mov	eax, dword_10015044
		mov	ecx, eax
		test	eax, eax
		jnz	short loc_1000C1C1
		push	esi
		xor	esi, esi
		mov	dword_10015050,	esi
		call	sub_1000CBDC
		call	sub_1000C745
		jmp	short loc_1000C20A
; ---------------------------------------------------------------------------

loc_1000C1F6:				; CODE XREF: sub_1000C1AD+66j
		mov	eax, [eax]
		dec	dword_1001504C
		push	ecx
		mov	dword_10015040,	eax
		call	PORT_Free_Util
		pop	ecx

loc_1000C20A:				; CODE XREF: sub_1000C1AD+47j
		mov	eax, dword_10015040
		mov	ecx, eax
		test	eax, eax
		jnz	short loc_1000C1F6
		mov	dword_1001504C,	esi
		call	sub_1000CBDC
		call	sub_1000C745
		jmp	short loc_1000C23B
; ---------------------------------------------------------------------------

loc_1000C227:				; CODE XREF: sub_1000C1AD+97j
		mov	eax, [eax]
		dec	dword_10015048
		push	ecx
		mov	dword_1001503C,	eax
		call	PORT_Free_Util
		pop	ecx

loc_1000C23B:				; CODE XREF: sub_1000C1AD+78j
		mov	eax, dword_1001503C
		mov	ecx, eax
		test	eax, eax
		jnz	short loc_1000C227
		mov	dword_10015048,	esi
		call	sub_1000CBDC
		push	dword_10015060
		call	ds:PR_DestroyLock
		pop	ecx
		mov	dword_10015060,	esi
		pop	esi

locret_1000C265:			; CODE XREF: sub_1000C1AD+7j
		retn
sub_1000C1AD	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000C266	proc near		; CODE XREF: legacy_Shutdown+Ep
		mov	eax, dword_10015054
		push	esi
		mov	esi, ds:PR_DestroyLock
		test	eax, eax
		jz	short loc_1000C281
		push	eax
		call	esi ; PR_DestroyLock
		and	dword_10015054,	0
		pop	ecx

loc_1000C281:				; CODE XREF: sub_1000C266+Ej
		mov	eax, dword_10015058
		test	eax, eax
		jz	short loc_1000C295
		push	eax
		call	esi ; PR_DestroyLock
		and	dword_10015058,	0
		pop	ecx

loc_1000C295:				; CODE XREF: sub_1000C266+22j
		mov	eax, dword_1001505C
		test	eax, eax
		jz	short loc_1000C2A9
		push	eax
		call	esi ; PR_DestroyLock
		and	dword_1001505C,	0
		pop	ecx

loc_1000C2A9:				; CODE XREF: sub_1000C266+36j
		pop	esi
		retn
sub_1000C266	endp


; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1000C2AB(void	*Dst)
sub_1000C2AB	proc near		; CODE XREF: sub_100069FA+165p
					; DATA XREF: sub_10004568+C4o

Dst		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+Dst]
		cmp	dword ptr [esi+14h], 0
		jz	short loc_1000C2BF
		push	dword ptr [esi+14h] ; Dst
		call	sub_1000A0DD
		pop	ecx

loc_1000C2BF:				; CODE XREF: sub_1000C2AB+9j
		lea	eax, [esi+20h]
		push	eax
		push	dword ptr [esi+0Ch]
		call	sub_1000D109
		push	220h		; Size
		push	0		; Val
		push	esi		; Dst
		call	memset
		add	esp, 14h
		call	sub_1000C745
		mov	eax, dword_1001504C
		cmp	eax, 0Ah
		jle	short loc_1000C2F3
		push	esi
		call	PORT_Free_Util
		pop	ecx
		jmp	short loc_1000C306
; ---------------------------------------------------------------------------

loc_1000C2F3:				; CODE XREF: sub_1000C2AB+3Dj
		inc	eax
		mov	dword_1001504C,	eax
		mov	eax, dword_10015040
		mov	[esi], eax
		mov	dword_10015040,	esi

loc_1000C306:				; CODE XREF: sub_1000C2AB+46j
		pop	esi
		jmp	sub_1000CBDC
sub_1000C2AB	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000C30C	proc near		; CODE XREF: sub_100066B9+8Dp

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		test	esi, esi
		jz	short loc_1000C335
		push	dword_10015058
		call	ds:PR_Lock
		push	dword_10015058
		inc	dword ptr [esi+94h]
		call	ds:PR_Unlock
		pop	ecx
		pop	ecx

loc_1000C335:				; CODE XREF: sub_1000C30C+7j
		mov	eax, esi
		pop	esi
		retn
sub_1000C30C	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_1000C339	proc near		; CODE XREF: sub_10005387+F3p
					; sub_100069FA+55p

var_C		= byte ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		push	edi
		push	800h
		xor	edi, edi
		call	PORT_NewArena_Util
		mov	esi, eax
		pop	ecx
		test	esi, esi
		jz	short loc_1000C384
		lea	eax, [ebp+var_C]
		push	eax
		push	[ebp+arg_4]
		push	esi
		call	sub_10008A83
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_1000C378
		lea	eax, [ebp+var_C]
		push	eax
		push	[ebp+arg_0]
		call	sub_1000C49E
		pop	ecx
		pop	ecx
		mov	edi, eax

loc_1000C378:				; CODE XREF: sub_1000C339+2Dj
		push	0
		push	esi
		call	PORT_FreeArena_Util
		pop	ecx
		pop	ecx
		mov	eax, edi

loc_1000C384:				; CODE XREF: sub_1000C339+19j
		pop	edi
		pop	esi
		mov	esp, ebp
		pop	ebp
		retn
sub_1000C339	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000C38A	proc near		; CODE XREF: sub_10005C54+D0p
					; sub_100069FA+119p

var_C		= dword	ptr -0Ch
Dst		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 10h
		push	ebx
		push	ebp
		push	esi
		mov	esi, [esp+1Ch+arg_4]
		push	edi
		xor	edi, edi
		mov	ecx, [esi+14h]
		mov	ebx, ecx
		cmp	ecx, 3
		jb	short loc_1000C3E3
		mov	eax, [esi+10h]
		cmp	byte ptr [eax],	2
		jnz	short loc_1000C3E3
		movzx	ebx, byte ptr [eax+1]
		lea	ebp, [ecx-2]
		push	2
		pop	edi
		test	bl, bl
		jns	short loc_1000C3DB
		and	ebx, 7Fh
		mov	edx, ebx
		xor	ebx, ebx
		sub	ebp, edx
		test	ebp, ebp
		jle	short loc_1000C3DB
		test	edx, edx
		jz	short loc_1000C3DB
		mov	esi, eax

loc_1000C3CA:				; CODE XREF: sub_1000C38A+4Bj
		movzx	eax, byte ptr [esi+edi]
		shl	ebx, 8
		or	ebx, eax
		inc	edi
		dec	edx
		jnz	short loc_1000C3CA
		mov	esi, [esp+20h+arg_4]

loc_1000C3DB:				; CODE XREF: sub_1000C38A+2Bj
					; sub_1000C38A+38j ...
		cmp	ebx, ebp
		jz	short loc_1000C3E3
		mov	ebx, ecx
		xor	edi, edi

loc_1000C3E3:				; CODE XREF: sub_1000C38A+15j
					; sub_1000C38A+1Dj ...
		mov	eax, [esi+8]
		and	[esp+20h+var_C], 0
		add	eax, ecx
		push	eax
		call	PORT_Alloc_Util
		pop	ecx
		mov	ecx, [esi+8]
		mov	ebp, eax
		add	ecx, ebx
		mov	[esp+20h+Dst], ebp
		mov	[esp+20h+var_4], ecx
		test	ebp, ebp
		jz	loc_1000C496
		mov	eax, [esi+10h]
		push	ebx		; Size
		add	eax, edi
		push	eax		; Src
		push	ebp		; Dst
		call	memcpy
		push	dword ptr [esi+8] ; Size
		lea	eax, [ebx+ebp]
		push	dword ptr [esi+4] ; Src
		push	eax		; Dst
		call	memcpy
		lea	eax, [esp+38h+var_C]
		push	eax
		push	[esp+3Ch+arg_0]
		call	sub_1000C49E
		mov	edi, eax
		add	esp, 20h
		test	edi, edi
		jz	short loc_1000C44C
		push	[esp+20h+Dst]
		call	PORT_Free_Util
		pop	ecx
		mov	eax, edi
		jmp	short loc_1000C496
; ---------------------------------------------------------------------------

loc_1000C44C:				; CODE XREF: sub_1000C38A+B2j
		push	dword ptr [esi+14h] ; Size
		push	dword ptr [esi+10h] ; Src
		push	[esp+28h+Dst]	; Dst
		call	memcpy
		push	dword ptr [esi+8] ; Size
		mov	eax, [esi+14h]
		push	dword ptr [esi+4] ; Src
		add	eax, [esp+34h+Dst]
		push	eax		; Dst
		call	memcpy
		mov	eax, [esi+8]
		add	eax, [esi+14h]
		mov	[esp+38h+var_4], eax
		lea	eax, [esp+38h+var_C]
		push	eax
		push	[esp+3Ch+arg_0]
		call	sub_1000C49E
		push	[esp+40h+Dst]
		mov	esi, eax
		call	PORT_Free_Util
		add	esp, 24h
		mov	eax, esi

loc_1000C496:				; CODE XREF: sub_1000C38A+7Bj
					; sub_1000C38A+C0j
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 10h
		retn
sub_1000C38A	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000C49E	proc near		; CODE XREF: sub_100050BF+28p
					; sub_10006396+89p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		push	edi
		push	[esp+8+arg_4]
		xor	edi, edi
		push	[esp+0Ch+arg_0]
		call	sub_1000AD0B
		mov	esi, eax
		pop	ecx
		pop	ecx
		test	esi, esi
		jz	short loc_1000C4D0
		push	esi
		push	[esp+0Ch+arg_0]
		call	sub_100093BF
		mov	edi, eax
		pop	ecx
		pop	ecx
		test	edi, edi
		jnz	short loc_1000C4D0
		push	esi		; Dst
		call	sub_1000A0DD
		pop	ecx

loc_1000C4D0:				; CODE XREF: sub_1000C49E+17j
					; sub_1000C49E+29j
		mov	eax, edi
		pop	edi
		pop	esi
		retn
sub_1000C49E	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_1000C4D5	proc near		; CODE XREF: sub_10005100+3Ap
					; sub_10006CBE+27p

var_C		= byte ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	ebx
		push	esi
		xor	ebx, ebx
		push	edi
		xor	edi, edi
		cmp	[ebp+arg_8], ebx
		push	800h
		setnz	bl
		add	ebx, 4
		call	PORT_NewArena_Util
		mov	esi, eax
		pop	ecx
		test	esi, esi
		jz	short loc_1000C52C
		push	ebx
		lea	eax, [ebp+var_C]
		push	eax
		push	esi
		push	[ebp+arg_4]
		call	sub_1000A33C
		add	esp, 10h
		test	eax, eax
		jnz	short loc_1000C522
		push	ebx
		push	[ebp+arg_4]
		push	[ebp+arg_0]
		call	sub_1000AE19
		add	esp, 0Ch
		mov	edi, eax

loc_1000C522:				; CODE XREF: sub_1000C4D5+3Aj
		push	0
		push	esi
		call	PORT_FreeArena_Util
		pop	ecx
		pop	ecx

loc_1000C52C:				; CODE XREF: sub_1000C4D5+25j
		mov	eax, edi
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
sub_1000C4D5	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000C535	proc near		; CODE XREF: sub_100069FA+13Ap

var_214		= dword	ptr -214h
Dst		= dword	ptr -210h
var_20C		= dword	ptr -20Ch
var_208		= dword	ptr -208h
var_204		= byte ptr -204h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 214h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+214h+var_4], eax
		mov	eax, [esp+214h+arg_0]
		push	ebx
		push	ebp
		push	esi
		mov	esi, [esp+220h+arg_4]
		xor	ebp, ebp
		push	edi
		mov	[esp+224h+var_208], eax
		mov	edx, [esi+14h]
		mov	ebx, edx
		cmp	edx, 3
		jb	short loc_1000C5AC
		mov	eax, [esi+10h]
		cmp	byte ptr [eax],	2
		jnz	short loc_1000C5AC
		movzx	ebx, byte ptr [eax+1]
		lea	edi, [edx-2]
		push	2
		pop	ebp
		test	bl, bl
		jns	short loc_1000C5A4
		and	ebx, 7Fh
		mov	ecx, ebx
		xor	ebx, ebx
		sub	edi, ecx
		test	edi, edi
		jle	short loc_1000C5A4
		test	ecx, ecx
		jz	short loc_1000C5A4
		mov	edx, eax

loc_1000C594:				; CODE XREF: sub_1000C535+6Aj
		movzx	eax, byte ptr [edx+ebp]
		shl	ebx, 8
		or	ebx, eax
		inc	ebp
		dec	ecx
		jnz	short loc_1000C594
		mov	edx, [esi+14h]

loc_1000C5A4:				; CODE XREF: sub_1000C535+4Aj
					; sub_1000C535+57j ...
		cmp	ebx, edi
		jz	short loc_1000C5AC
		mov	ebx, edx
		xor	ebp, ebp

loc_1000C5AC:				; CODE XREF: sub_1000C535+34j
					; sub_1000C535+3Cj ...
		mov	ecx, [esi+8]
		and	[esp+224h+var_214], 0
		lea	eax, [ecx+ebx]
		mov	[esp+224h+var_20C], eax
		lea	eax, [ecx+edx]
		cmp	eax, 200h
		jbe	short loc_1000C5D0
		push	eax
		call	PORT_Alloc_Util
		pop	ecx
		mov	edi, eax
		jmp	short loc_1000C5D4
; ---------------------------------------------------------------------------

loc_1000C5D0:				; CODE XREF: sub_1000C535+8Ej
		lea	edi, [esp+224h+var_204]

loc_1000C5D4:				; CODE XREF: sub_1000C535+99j
		mov	[esp+224h+Dst],	edi
		test	edi, edi
		jnz	short loc_1000C5E3
		xor	eax, eax
		jmp	loc_1000C669
; ---------------------------------------------------------------------------

loc_1000C5E3:				; CODE XREF: sub_1000C535+A5j
		mov	eax, [esi+10h]
		push	ebx		; Size
		add	eax, ebp
		push	eax		; Src
		push	edi		; Dst
		call	memcpy
		push	dword ptr [esi+8] ; Size
		lea	eax, [edi+ebx]
		push	dword ptr [esi+4] ; Src
		push	eax		; Dst
		call	memcpy
		mov	ebx, [esp+23Ch+var_208]
		lea	eax, [esp+23Ch+var_214]
		push	eax
		push	ebx
		call	sub_1000C682
		mov	edi, eax
		add	esp, 20h
		test	edi, edi
		jnz	short loc_1000C657
		test	ebp, ebp
		jz	short loc_1000C657
		push	dword ptr [esi+14h] ; Size
		push	dword ptr [esi+10h] ; Src
		push	[esp+22Ch+Dst]	; Dst
		call	memcpy
		push	dword ptr [esi+8] ; Size
		mov	eax, [esi+14h]
		push	dword ptr [esi+4] ; Src
		add	eax, [esp+238h+Dst]
		push	eax		; Dst
		call	memcpy
		mov	eax, [esi+8]
		add	eax, [esi+14h]
		mov	[esp+23Ch+var_20C], eax
		lea	eax, [esp+23Ch+var_214]
		push	eax
		push	ebx
		call	sub_1000C682
		add	esp, 20h
		mov	edi, eax

loc_1000C657:				; CODE XREF: sub_1000C535+E0j
					; sub_1000C535+E4j
		lea	eax, [esp+224h+var_204]
		push	eax
		push	[esp+228h+Dst]
		call	sub_1000D109
		pop	ecx
		pop	ecx
		mov	eax, edi

loc_1000C669:				; CODE XREF: sub_1000C535+A9j
		mov	ecx, [esp+224h+var_4]
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 214h
		retn
sub_1000C535	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000C682	proc near		; CODE XREF: sub_10004568+BCp
					; sub_1000C535+D4p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		push	edi
		push	[esp+8+arg_4]
		xor	edi, edi
		push	[esp+0Ch+arg_0]
		call	sub_1000AD0B
		mov	esi, eax
		pop	ecx
		pop	ecx
		test	esi, esi
		jz	short loc_1000C6C7
		lea	eax, [esi+14h]
		push	eax
		call	sub_1000CEC3
		pop	ecx
		test	eax, eax
		jz	short loc_1000C6C0
		push	[esp+8+arg_4]
		push	esi
		push	[esp+10h+arg_0]
		call	sub_10009BB7
		mov	edi, eax
		add	esp, 0Ch
		test	edi, edi
		jnz	short loc_1000C6C7

loc_1000C6C0:				; CODE XREF: sub_1000C682+25j
		push	esi		; Dst
		call	sub_1000A0DD
		pop	ecx

loc_1000C6C7:				; CODE XREF: sub_1000C682+17j
					; sub_1000C682+3Cj
		mov	eax, edi
		pop	edi
		pop	esi
		retn
sub_1000C682	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000C6CC	proc near		; CODE XREF: sub_1000C810+61p
					; sub_1000C810+95p

arg_0		= dword	ptr  4

		push	[esp+arg_0]
		call	sub_1000B163
		pop	ecx
		test	eax, eax
		jnz	short loc_1000C6DB
		retn
; ---------------------------------------------------------------------------

loc_1000C6DB:				; CODE XREF: sub_1000C6CC+Cj
		push	esi
		mov	esi, [eax+4]
		push	eax		; Dst
		call	sub_1000A0DD
		pop	ecx
		mov	eax, esi
		pop	esi
		retn
sub_1000C6CC	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000C6EA	proc near		; CODE XREF: legacy_Open+2Fp
		cmp	dword_10015060,	0
		push	esi
		mov	esi, ds:PR_NewLock
		jnz	short loc_1000C70A
		call	esi ; PR_NewLock
		mov	dword_10015060,	eax
		test	eax, eax
		jnz	short loc_1000C70A

loc_1000C705:				; CODE XREF: sub_1000C6EA+32j
					; sub_1000C6EA+46j
		or	eax, 0FFFFFFFFh
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1000C70A:				; CODE XREF: sub_1000C6EA+Ej
					; sub_1000C6EA+19j
		cmp	dword_10015058,	0
		jnz	short loc_1000C71E
		call	esi ; PR_NewLock
		mov	dword_10015058,	eax
		test	eax, eax
		jz	short loc_1000C705

loc_1000C71E:				; CODE XREF: sub_1000C6EA+27j
		cmp	dword_1001505C,	0
		jnz	short loc_1000C732
		call	esi ; PR_NewLock
		mov	dword_1001505C,	eax
		test	eax, eax
		jz	short loc_1000C705

loc_1000C732:				; CODE XREF: sub_1000C6EA+3Bj
		xor	eax, eax
		pop	esi
		retn
sub_1000C6EA	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000C736	proc near		; CODE XREF: sub_10009FE9+1Dp
					; __fseeki64+7p ...

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		push	dword ptr [eax+4]
		call	ds:PR_EnterMonitor
		pop	ecx
		retn
sub_1000C736	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000C745	proc near		; CODE XREF: sub_10009BB7+1p
					; sub_10009FE9+AFp ...
		push	dword_10015060
		call	ds:PR_Lock
		pop	ecx
		retn
sub_1000C745	endp


; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1000C753(int,	char *Str)
sub_1000C753	proc near		; CODE XREF: sub_100069FA+A2p

arg_0		= dword	ptr  4
Str		= dword	ptr  8

		push	esi
		push	edi
		push	[esp+8+Str]	; Str
		push	[esp+0Ch+arg_0]	; int
		call	sub_1000AFB6
		mov	esi, eax
		pop	ecx
		pop	ecx
		test	esi, esi
		jz	short loc_1000C784
		lea	ecx, [esi+14h]
		push	ecx
		push	[esp+0Ch+arg_0]
		call	sub_1000C78B
		push	esi		; Dst
		mov	edi, eax
		call	sub_1000A0DD
		add	esp, 0Ch
		jmp	short loc_1000C786
; ---------------------------------------------------------------------------

loc_1000C784:				; CODE XREF: sub_1000C753+15j
		xor	edi, edi

loc_1000C786:				; CODE XREF: sub_1000C753+2Fj
		mov	eax, edi
		pop	edi
		pop	esi
		retn
sub_1000C753	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000C78B	proc near		; CODE XREF: sub_100069FA+DCp
					; sub_100069FA+1BFp ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	[esp+arg_4]
		push	[esp+4+arg_0]
		call	sub_1000B092
		pop	ecx
		pop	ecx
		test	eax, eax
		jnz	short loc_1000C7A2
		or	eax, 0FFFFFFFFh
		retn
; ---------------------------------------------------------------------------

loc_1000C7A2:				; CODE XREF: sub_1000C78B+11j
		push	esi
		mov	esi, [eax+1Ch]
		push	eax		; Dst
		call	sub_1000A0DD
		pop	ecx
		mov	eax, esi
		pop	esi
		retn
sub_1000C78B	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_1000C7B1	proc near		; CODE XREF: sub_10007714+6Ap

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch

		push	ebp
		mov	ebp, esp
		push	esi
		mov	esi, [ebp+arg_0]
		push	esi
		call	sub_1000BE84
		call	ds:PR_NewMonitor
		push	[ebp+arg_14]
		and	dword ptr [esi+8], 0
		push	[ebp+arg_10]
		mov	[esi+4], eax
		push	[ebp+arg_C]
		push	[ebp+arg_8]
		push	[ebp+arg_4]
		push	esi
		call	sub_1000C810
		add	esp, 1Ch
		test	eax, eax
		jz	short loc_1000C80B
		cmp	dword ptr [esi+4], 0
		jz	short loc_1000C7FB
		push	dword ptr [esi+4]
		call	ds:PR_DestroyMonitor
		and	dword ptr [esi+4], 0
		pop	ecx

loc_1000C7FB:				; CODE XREF: sub_1000C7B1+3Aj
		push	0FFFFE012h
		call	PORT_SetError_Util
		pop	ecx
		or	eax, 0FFFFFFFFh
		jmp	short loc_1000C80D
; ---------------------------------------------------------------------------

loc_1000C80B:				; CODE XREF: sub_1000C7B1+34j
		xor	eax, eax

loc_1000C80D:				; CODE XREF: sub_1000C7B1+58j
		pop	esi
		pop	ebp
		retn
sub_1000C7B1	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000C810	proc near		; CODE XREF: sub_1000C7B1+2Ap

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		push	ebx
		push	8
		push	[esp+8+arg_14]
		call	[esp+0Ch+arg_10]
		mov	ebx, eax
		pop	ecx
		pop	ecx
		test	ebx, ebx
		jnz	short loc_1000C828
		or	eax, 0FFFFFFFFh
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1000C828:				; CODE XREF: sub_1000C810+11j
		push	ebp
		mov	ebp, [esp+8+arg_8]
		push	esi
		push	edi
		mov	edi, [esp+10h+arg_4]
		neg	edi
		push	0
		sbb	edi, edi
		and	edi, 0FFFFFFFEh
		add	edi, 2
		test	ebp, ebp
		jz	short loc_1000C855
		push	edi
		push	offset aCert	; "cert"
		push	[esp+1Ch+arg_C]
		push	ebp
		call	sub_10007A86
		jmp	short loc_1000C863
; ---------------------------------------------------------------------------

loc_1000C855:				; CODE XREF: sub_1000C810+31j
		push	1		; int
		push	180h		; int
		push	edi		; int
		push	ebx		; Str
		call	sub_100015E5

loc_1000C863:				; CODE XREF: sub_1000C810+43j
		mov	esi, [esp+24h+arg_0]
		add	esp, 14h
		mov	[esi], eax
		test	eax, eax
		jz	short loc_1000C885

loc_1000C870:				; CODE XREF: sub_1000C810+E5j
		push	esi
		call	sub_1000C6CC
		pop	ecx
		cmp	eax, 8
		jz	short loc_1000C8B0
		test	ebp, ebp
		jz	short loc_1000C8FE
		cmp	eax, 7
		jmp	short loc_1000C8FC
; ---------------------------------------------------------------------------

loc_1000C885:				; CODE XREF: sub_1000C810+5Ej
		cmp	[esp+10h+arg_4], 0
		jz	short loc_1000C8BE
		push	7
		push	[esp+14h+arg_14]
		push	[esp+18h+arg_10]
		call	sub_1000CEE5
		add	esp, 0Ch
		mov	[esi], eax
		test	eax, eax
		jz	short loc_1000C8FE
		push	esi
		call	sub_1000C6CC
		pop	ecx
		cmp	eax, 7
		jnz	short loc_1000C8FE

loc_1000C8B0:				; CODE XREF: sub_1000C810+6Aj
					; sub_1000C810:loc_1000C8FCj
		push	ebx
		call	PORT_Free_Util
		xor	eax, eax

loc_1000C8B8:				; CODE XREF: sub_1000C810+112j
		pop	ecx
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1000C8BE:				; CODE XREF: sub_1000C810+7Aj
		push	[esp+10h+arg_14] ; int
		push	[esp+14h+arg_10] ; int
		push	esi		; int
		push	ebx		; Str
		push	[esp+20h+arg_C]	; int
		push	ebp		; int
		call	sub_1000CF1C
		add	esp, 18h
		cmp	eax, 0FFFFFFFEh
		jnz	short loc_1000C8FA
		push	0
		push	edi
		push	offset aCert	; "cert"
		push	[esp+1Ch+arg_C]
		push	ebp
		call	sub_10007A86
		add	esp, 14h
		mov	[esi], eax
		test	eax, eax
		jz	short loc_1000C8FE
		jmp	loc_1000C870
; ---------------------------------------------------------------------------

loc_1000C8FA:				; CODE XREF: sub_1000C810+C8j
		test	eax, eax

loc_1000C8FC:				; CODE XREF: sub_1000C810+73j
		jz	short loc_1000C8B0

loc_1000C8FE:				; CODE XREF: sub_1000C810+6Ej
					; sub_1000C810+92j ...
		push	0FFFFE012h
		call	PORT_SetError_Util
		cmp	dword ptr [esi], 0
		pop	ecx
		jz	short loc_1000C919
		push	dword ptr [esi]
		call	sub_1000BE2A
		and	dword ptr [esi], 0
		pop	ecx

loc_1000C919:				; CODE XREF: sub_1000C810+FCj
		push	ebx
		call	PORT_Free_Util
		or	eax, 0FFFFFFFFh
		jmp	short loc_1000C8B8
sub_1000C810	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_1000C924(int,	char *Str)
sub_1000C924	proc near		; CODE XREF: sub_1000514F+29p
					; sub_10005387+1BFp ...

var_18		= dword	ptr -18h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
Str		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		push	ebx
		push	esi
		push	edi
		mov	esi, 800h
		push	esi
		call	PORT_NewArena_Util
		mov	ebx, eax
		pop	ecx
		test	ebx, ebx
		jnz	short loc_1000C94B
		push	0FFFFE013h
		call	PORT_SetError_Util
		jmp	short loc_1000C992
; ---------------------------------------------------------------------------

loc_1000C94B:				; CODE XREF: sub_1000C924+19j
		push	esi
		call	PORT_NewArena_Util
		mov	edi, eax
		pop	ecx
		test	edi, edi
		jnz	short loc_1000C964
		push	0FFFFE013h
		call	PORT_SetError_Util
		jmp	short loc_1000C988
; ---------------------------------------------------------------------------

loc_1000C964:				; CODE XREF: sub_1000C924+32j
		push	38h
		push	ebx
		call	PORT_ArenaAlloc_Util
		mov	esi, eax
		pop	ecx
		pop	ecx
		test	esi, esi
		jnz	short loc_1000C99C
		push	0FFFFE013h

loc_1000C979:				; CODE XREF: sub_1000C924+BAj
		call	PORT_SetError_Util
		pop	ecx

loc_1000C97F:				; CODE XREF: sub_1000C924+93j
					; sub_1000C924+ADj ...
		push	0
		push	edi
		call	PORT_FreeArena_Util
		pop	ecx

loc_1000C988:				; CODE XREF: sub_1000C924+3Ej
		pop	ecx
		push	0
		push	ebx
		call	PORT_FreeArena_Util
		pop	ecx

loc_1000C992:				; CODE XREF: sub_1000C924+25j
		xor	eax, eax

loc_1000C994:				; CODE XREF: sub_1000C924+DAj
		pop	ecx
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_1000C99C:				; CODE XREF: sub_1000C924+4Ej
		lea	eax, [ebp+var_18]
		mov	[esi+0Ch], ebx
		push	eax		; int
		push	edi		; int
		push	[ebp+Str]	; Str
		mov	dword ptr [esi], 6
		call	sub_1000A50C
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_1000C97F
		push	edi
		lea	eax, [ebp+var_C]
		push	eax
		lea	eax, [ebp+var_18]
		push	eax
		push	esi
		push	[ebp+arg_0]
		call	sub_1000AEEA
		add	esp, 14h
		cmp	eax, 0FFFFFFFFh
		jz	short loc_1000C97F
		cmp	[ebp+var_4], 6
		jnb	short loc_1000C9E0
		push	0FFFFE012h
		jmp	short loc_1000C979
; ---------------------------------------------------------------------------

loc_1000C9E0:				; CODE XREF: sub_1000C924+B3j
		push	[ebp+Str]	; Str
		lea	eax, [ebp+var_C]
		push	eax		; int
		push	esi		; int
		call	sub_1000969B
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_1000C97F
		push	eax
		push	edi
		call	PORT_FreeArena_Util
		pop	ecx
		mov	eax, esi
		jmp	short loc_1000C994
sub_1000C924	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_1000CA00	proc near		; CODE XREF: sub_10005387+1D2p
					; sub_100059E9+F9p
		push	ebp
		mov	ebp, esp
		pop	ebp
		jmp	sub_1000CCE9
sub_1000CA00	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_1000CA09	proc near		; CODE XREF: sub_10006CBE+81p
					; sub_10006CBE+8Ep ...

var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		lea	eax, [ebp+var_8]
		push	ebx
		mov	ebx, [ebp+arg_0]
		push	esi
		push	edi
		push	3
		push	eax
		lea	eax, [ebp+var_10]
		xor	edi, edi
		push	eax
		push	dword ptr [ebx]
		call	sub_1000BECF
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		jz	short loc_1000CA36
		or	eax, 0FFFFFFFFh
		jmp	short loc_1000CA9B
; ---------------------------------------------------------------------------

loc_1000CA36:				; CODE XREF: sub_1000CA09+26j
					; sub_1000CA09+86j
		mov	ecx, [ebp+var_8]
		mov	edx, [ebp+arg_4]
		cmp	[ecx+1], dl
		jnz	short loc_1000CA79
		mov	eax, [ebp+var_4]
		and	[ebp+var_28], 0
		push	[ebp+arg_C]
		and	[ebp+var_1C], 0
		mov	[ebp+var_20], eax
		mov	eax, [ebp+var_C]
		dec	eax
		mov	[ebp+var_24], ecx
		mov	[ebp+var_14], eax
		mov	eax, [ebp+var_10]
		inc	eax
		mov	[ebp+var_18], eax
		lea	eax, [ebp+var_1C]
		push	edx
		push	eax
		lea	eax, [ebp+var_28]
		push	eax
		call	[ebp+arg_8]
		mov	edi, eax
		add	esp, 10h
		test	edi, edi
		jnz	short loc_1000CA79
		inc	esi

loc_1000CA79:				; CODE XREF: sub_1000CA09+36j
					; sub_1000CA09+6Dj
		push	7
		lea	eax, [ebp+var_8]
		push	eax
		lea	eax, [ebp+var_10]
		push	eax
		push	dword ptr [ebx]
		call	sub_1000BECF
		add	esp, 10h
		test	eax, eax
		jz	short loc_1000CA36
		neg	esi
		sbb	esi, esi
		not	esi
		and	esi, edi
		mov	eax, esi

loc_1000CA9B:				; CODE XREF: sub_1000CA09+2Bj
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
sub_1000CA09	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_1000CAA2	proc near		; CODE XREF: sub_100069FA+21Ep
					; sub_1000B41A+2Dp

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		push	edi
		mov	edi, [ebp+arg_0]
		push	edi
		call	sub_1000C736
		mov	eax, [ebp+arg_4]
		mov	[ebp+var_C], eax
		mov	eax, [ebp+arg_8]
		mov	[ebp+var_4], eax
		lea	eax, [ebp+var_C]
		push	eax
		push	offset sub_1000BD80
		push	1
		push	edi
		mov	[ebp+var_8], edi
		call	sub_1000CA09
		push	edi
		mov	esi, eax
		call	sub_1000CBCD
		add	esp, 18h
		mov	eax, esi
		pop	edi
		pop	esi
		mov	esp, ebp
		pop	ebp
		retn
sub_1000CAA2	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_1000CAE6(int,	char *Str, int,	int)
sub_1000CAE6	proc near		; CODE XREF: sub_100069FA+BEp

arg_0		= dword	ptr  8
Str		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	ebx
		push	esi
		push	edi
		push	[ebp+Str]	; Str
		xor	esi, esi
		push	[ebp+arg_0]	; int
		call	sub_1000AFB6
		mov	edi, eax
		pop	ecx
		pop	ecx
		test	edi, edi
		jz	short loc_1000CB06
		lea	eax, [edi+14h]
		jmp	short loc_1000CB1C
; ---------------------------------------------------------------------------

loc_1000CB06:				; CODE XREF: sub_1000CAE6+19j
		push	[ebp+Str]	; Str
		push	[ebp+arg_0]	; int
		call	sub_1000C924
		mov	esi, eax
		pop	ecx
		pop	ecx
		test	esi, esi
		jz	short loc_1000CB36
		lea	eax, [esi+14h]

loc_1000CB1C:				; CODE XREF: sub_1000CAE6+1Ej
		test	eax, eax
		jz	short loc_1000CB36
		push	[ebp+arg_C]
		push	[ebp+arg_8]
		push	eax
		push	[ebp+arg_0]
		call	sub_1000CB56
		add	esp, 10h
		mov	ebx, eax
		jmp	short loc_1000CB39
; ---------------------------------------------------------------------------

loc_1000CB36:				; CODE XREF: sub_1000CAE6+31j
					; sub_1000CAE6+38j
		or	ebx, 0FFFFFFFFh

loc_1000CB39:				; CODE XREF: sub_1000CAE6+4Ej
		test	edi, edi
		jz	short loc_1000CB44
		push	edi		; Dst
		call	sub_1000A0DD
		pop	ecx

loc_1000CB44:				; CODE XREF: sub_1000CAE6+55j
		test	esi, esi
		jz	short loc_1000CB4F
		push	esi		; Dst
		call	sub_1000A0DD
		pop	ecx

loc_1000CB4F:				; CODE XREF: sub_1000CAE6+60j
		pop	edi
		pop	esi
		mov	eax, ebx
		pop	ebx
		pop	ebp
		retn
sub_1000CAE6	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000CB56	proc near		; CODE XREF: sub_100069FA+F8p
					; sub_100069FA+1DBp ...

Dst		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ecx
		push	esi
		push	edi
		push	[esp+0Ch+arg_4]
		xor	esi, esi
		push	[esp+10h+arg_0]
		call	sub_1000B092
		mov	edi, eax
		pop	ecx
		pop	ecx
		test	edi, edi
		jnz	short loc_1000CB75
		or	eax, 0FFFFFFFFh
		jmp	short loc_1000CBC9
; ---------------------------------------------------------------------------

loc_1000CB75:				; CODE XREF: sub_1000CB56+18j
		push	ebx
		mov	ebx, esi
		cmp	[edi+1Ch], esi
		jbe	short loc_1000CBBF
		push	ebp
		mov	ebp, esi

loc_1000CB80:				; CODE XREF: sub_1000CB56+66j
		mov	eax, [edi+24h]
		add	eax, ebp
		push	eax
		push	[esp+18h+arg_0]
		call	sub_1000C49E
		mov	[esp+1Ch+Dst], eax
		pop	ecx
		pop	ecx
		test	eax, eax
		jz	short loc_1000CBB5
		push	[esp+14h+arg_C]
		push	eax
		call	[esp+1Ch+arg_8]
		push	[esp+1Ch+Dst]	; Dst
		mov	esi, eax
		call	sub_1000C19A
		add	esp, 0Ch
		cmp	esi, 0FFFFFFFFh
		jz	short loc_1000CBBE

loc_1000CBB5:				; CODE XREF: sub_1000CB56+41j
		inc	ebx
		add	ebp, 0Ch
		cmp	ebx, [edi+1Ch]
		jb	short loc_1000CB80

loc_1000CBBE:				; CODE XREF: sub_1000CB56+5Dj
		pop	ebp

loc_1000CBBF:				; CODE XREF: sub_1000CB56+25j
		push	edi		; Dst
		call	sub_1000A0DD
		pop	ecx
		mov	eax, esi
		pop	ebx

loc_1000CBC9:				; CODE XREF: sub_1000CB56+1Dj
		pop	edi
		pop	esi
		pop	ecx
		retn
sub_1000CB56	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000CBCD	proc near		; CODE XREF: sub_10009FE9+EBp
					; __fseeki64+22p ...

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		push	dword ptr [eax+4]
		call	ds:PR_ExitMonitor
		pop	ecx
		retn
sub_1000CBCD	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000CBDC	proc near		; CODE XREF: sub_10009BB7:loc_10009BD4p
					; sub_10009FE9:loc_1000A0C3p ...
		push	dword_10015060
		call	ds:PR_Unlock
		pop	ecx
		retn
sub_1000CBDC	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_1000CBEA(int,	int, int, char *Str, int)
sub_1000CBEA	proc near		; CODE XREF: sub_1000B743+E9p
					; sub_1000BF33+4j

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
Str		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		push	ebx
		push	esi
		push	edi
		xor	ebx, ebx
		or	edi, 0FFFFFFFFh
		cmp	[ebp+arg_10], ebx
		setnz	bl
		add	ebx, 4
		push	ebx
		push	[ebp+arg_8]
		push	[ebp+arg_0]
		call	sub_10009DD8
		push	0		; int
		push	ebx		; int
		push	[ebp+Str]	; Str
		push	[ebp+arg_4]	; int
		call	sub_1000A8CB
		mov	esi, eax
		add	esp, 1Ch
		test	esi, esi
		jz	short loc_1000CC38
		push	[ebp+arg_8]
		push	esi
		push	[ebp+arg_0]
		call	sub_1000BA90
		push	esi		; Dst
		mov	edi, eax
		call	sub_1000A0DD
		add	esp, 10h

loc_1000CC38:				; CODE XREF: sub_1000CBEA+35j
		mov	eax, edi
		pop	edi
		pop	esi
		pop	ebx
		pop	ebp
		retn
sub_1000CBEA	endp


; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1000CC3F(int,	int, char *Str,	int)
sub_1000CC3F	proc near		; CODE XREF: sub_1000B743+16Bp
					; __fseeki64+18p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
Str		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebx
		mov	ebx, [esp+4+Str]
		push	ebp
		push	esi
		push	edi
		mov	edi, [esp+10h+arg_4]
		test	ebx, ebx
		jz	short loc_1000CC87
		push	ebx		; Str
		push	[esp+14h+arg_0]	; int
		call	sub_1000AFB6
		mov	ebp, eax
		pop	ecx
		pop	ecx
		test	ebp, ebp
		jz	short loc_1000CC87
		lea	ecx, [ebp+14h]
		push	ecx
		lea	ecx, [edi+38h]
		push	ecx
		call	SECITEM_CompareItem_Util
		mov	esi, eax
		neg	esi
		push	ebp		; Dst
		sbb	esi, esi
		call	sub_1000A0DD
		add	esp, 0Ch
		and	esi, 1
		jz	short loc_1000CC87

loc_1000CC82:				; CODE XREF: sub_1000CC3F+64j
		or	esi, 0FFFFFFFFh
		jmp	short loc_1000CCE2
; ---------------------------------------------------------------------------

loc_1000CC87:				; CODE XREF: sub_1000CC3F+Ej
					; sub_1000CC3F+20j ...
		push	[esp+10h+arg_C]	; int
		mov	esi, [edi+88h]
		push	ebx		; Str
		push	edi		; int
		push	[esp+1Ch+arg_0]	; int
		call	sub_10008F87
		mov	ebx, eax
		add	esp, 10h
		test	ebx, ebx
		jz	short loc_1000CC82
		lea	ebp, [edi+98h]
		push	ebp
		push	esi
		call	sub_1000D109
		xor	esi, esi
		pop	ecx
		pop	ecx
		cmp	[ebx+2Ch], esi
		jz	short loc_1000CCCE
		push	0C8h		; int
		push	ebp		; Dst
		push	dword ptr [ebx+2Ch] ; Str
		call	sub_1000D0A5
		add	esp, 0Ch
		jmp	short loc_1000CCD0
; ---------------------------------------------------------------------------

loc_1000CCCE:				; CODE XREF: sub_1000CC3F+7Aj
		mov	eax, esi

loc_1000CCD0:				; CODE XREF: sub_1000CC3F+8Dj
		lea	ecx, [ebx+14h]
		mov	[edi+88h], eax
		mov	[edi+90h], ecx
		mov	[edi+6Ch], ebx

loc_1000CCE2:				; CODE XREF: sub_1000CC3F+46j
		pop	edi
		mov	eax, esi
		pop	esi
		pop	ebp
		pop	ebx
		retn
sub_1000CC3F	endp


; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1000CCE9(int,	char *Str, int,	int, int)
sub_1000CCE9	proc near		; CODE XREF: sub_1000B743+25Fp
					; sub_1000CA00+4j

arg_0		= dword	ptr  4
Str		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	ebx
		push	esi
		mov	esi, [esp+8+arg_0]
		push	edi
		mov	edi, [esp+0Ch+Str]
		push	edi		; Str
		push	esi		; int
		call	sub_1000C924
		mov	ebx, eax
		pop	ecx
		pop	ecx
		test	ebx, ebx
		jz	short loc_1000CD2B
		push	ebp
		lea	ebp, [ebx+14h]
		push	ebp
		push	[esp+14h+arg_8]
		call	SECITEM_ItemsAreEqual_Util
		pop	ecx
		pop	ecx
		test	eax, eax
		jnz	short loc_1000CD23
		push	eax		; int
		push	edi		; Str2
		push	ebp		; int
		push	esi		; int
		call	sub_1000CD9B
		add	esp, 10h

loc_1000CD23:				; CODE XREF: sub_1000CCE9+2Cj
		push	ebx		; Dst
		call	sub_1000A0DD
		pop	ecx
		pop	ebp

loc_1000CD2B:				; CODE XREF: sub_1000CCE9+18j
		push	0		; int
		push	[esp+10h+arg_10] ; int
		push	[esp+14h+arg_C]	; int
		push	[esp+18h+arg_8]	; int
		push	edi		; Str
		call	sub_1000AA35
		mov	ebx, eax
		add	esp, 14h
		test	ebx, ebx
		jnz	short loc_1000CD4D
		or	edi, 0FFFFFFFFh
		jmp	short loc_1000CD95
; ---------------------------------------------------------------------------

loc_1000CD4D:				; CODE XREF: sub_1000CCE9+5Dj
		push	esi
		call	sub_1000C736
		push	edi		; Str
		push	esi		; int
		call	sub_10009F25
		push	1		; int
		push	edi		; Str2
		push	[esp+20h+arg_8]	; int
		push	esi		; int
		call	sub_1000CD9B
		mov	edi, eax
		add	esp, 1Ch
		test	edi, edi
		jz	short loc_1000CD78
		push	esi
		call	sub_1000CBCD
		jmp	short loc_1000CD8D
; ---------------------------------------------------------------------------

loc_1000CD78:				; CODE XREF: sub_1000CCE9+85j
		push	ebx
		push	esi
		call	sub_1000BBF5
		pop	ecx
		pop	ecx
		push	esi
		mov	edi, eax
		call	sub_1000CBCD
		test	edi, edi
		jnz	short $+2

loc_1000CD8D:				; CODE XREF: sub_1000CCE9+8Dj
					; sub_1000CCE9+A2j
		pop	ecx
		push	ebx		; Dst
		call	sub_1000A0DD
		pop	ecx

loc_1000CD95:				; CODE XREF: sub_1000CCE9+62j
		mov	eax, edi
		pop	edi
		pop	esi
		pop	ebx
		retn
sub_1000CCE9	endp


; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1000CD9B(int,	int, char *Str2, int)
sub_1000CD9B	proc near		; CODE XREF: sub_1000CCE9+32p
					; sub_1000CCE9+79p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
Str2		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebx
		push	edi
		or	edi, 0FFFFFFFFh
		cmp	[esp+8+Str2], 0
		mov	ebx, edi
		jz	loc_1000CEBE
		push	[esp+8+Str2]
		call	sub_10008642
		mov	[esp+0Ch+Str2],	eax
		pop	ecx
		test	eax, eax
		jnz	short loc_1000CDC6
		mov	eax, edi
		jmp	loc_1000CEC0
; ---------------------------------------------------------------------------

loc_1000CDC6:				; CODE XREF: sub_1000CD9B+22j
		push	esi
		push	[esp+0Ch+arg_4]
		push	[esp+10h+arg_0]
		call	sub_1000B092
		mov	esi, eax
		pop	ecx
		pop	ecx
		test	esi, esi
		jz	loc_1000CEAF
		push	ebp
		xor	ebp, ebp
		cmp	[esi+30h], ebp
		jle	short loc_1000CE09
		mov	edi, [esp+10h+Str2]

loc_1000CDEC:				; CODE XREF: sub_1000CD9B+69j
		mov	eax, [esi+2Ch]
		push	edi		; Str2
		push	dword ptr [eax+ebp*4] ;	Str1
		call	strcmp
		pop	ecx
		pop	ecx
		test	eax, eax
		jnz	short loc_1000CE00
		mov	ebx, ebp

loc_1000CE00:				; CODE XREF: sub_1000CD9B+61j
		inc	ebp
		cmp	ebp, [esi+30h]
		jl	short loc_1000CDEC
		or	edi, 0FFFFFFFFh

loc_1000CE09:				; CODE XREF: sub_1000CD9B+4Bj
		cmp	[esp+10h+arg_C], 0
		pop	ebp
		jnz	short loc_1000CE33
		cmp	ebx, edi
		jnz	short loc_1000CE1C

loc_1000CE15:				; CODE XREF: sub_1000CD9B+9Aj
		xor	edi, edi
		jmp	loc_1000CEA8
; ---------------------------------------------------------------------------

loc_1000CE1C:				; CODE XREF: sub_1000CD9B+78j
		dec	dword ptr [esi+30h]
		jmp	short loc_1000CE2C
; ---------------------------------------------------------------------------

loc_1000CE21:				; CODE XREF: sub_1000CD9B+94j
		mov	ecx, [esi+2Ch]
		mov	eax, [ecx+ebx*4+4]
		mov	[ecx+ebx*4], eax
		inc	ebx

loc_1000CE2C:				; CODE XREF: sub_1000CD9B+84j
		cmp	ebx, [esi+30h]
		jl	short loc_1000CE21
		jmp	short loc_1000CE8C
; ---------------------------------------------------------------------------

loc_1000CE33:				; CODE XREF: sub_1000CD9B+74j
		cmp	ebx, edi
		jnz	short loc_1000CE15
		mov	eax, [esi+30h]
		lea	eax, ds:4[eax*4]
		push	eax
		push	dword ptr [esi+0Ch]
		call	PORT_ArenaAlloc_Util
		mov	ebx, eax
		pop	ecx
		pop	ecx
		test	ebx, ebx
		jz	short loc_1000CEA8
		xor	ecx, ecx
		cmp	[esi+30h], ecx
		jle	short loc_1000CE68

loc_1000CE59:				; CODE XREF: sub_1000CD9B+CBj
		mov	eax, [esi+2Ch]
		mov	eax, [eax+ecx*4]
		mov	[ebx+ecx*4], eax
		inc	ecx
		cmp	ecx, [esi+30h]
		jl	short loc_1000CE59

loc_1000CE68:				; CODE XREF: sub_1000CD9B+BCj
		push	[esp+0Ch+Str2]
		push	dword ptr [esi+0Ch]
		call	PORT_ArenaStrdup_Util
		pop	ecx
		pop	ecx
		mov	ecx, [esi+30h]
		mov	[ebx+ecx*4], eax
		mov	eax, [esi+30h]
		cmp	dword ptr [ebx+eax*4], 0
		jz	short loc_1000CEA8
		inc	eax
		mov	[esi+2Ch], ebx
		mov	[esi+30h], eax

loc_1000CE8C:				; CODE XREF: sub_1000CD9B+96j
		push	[esp+0Ch+arg_4]
		push	[esp+10h+arg_0]
		call	sub_10009F87
		push	esi
		push	[esp+18h+arg_0]
		call	sub_1000BC6F
		add	esp, 10h
		mov	edi, eax

loc_1000CEA8:				; CODE XREF: sub_1000CD9B+7Cj
					; sub_1000CD9B+B5j ...
		push	esi		; Dst
		call	sub_1000A0DD
		pop	ecx

loc_1000CEAF:				; CODE XREF: sub_1000CD9B+3Fj
		push	[esp+0Ch+Str2]
		call	PORT_Free_Util
		pop	ecx
		mov	eax, edi
		pop	esi
		jmp	short loc_1000CEC0
; ---------------------------------------------------------------------------

loc_1000CEBE:				; CODE XREF: sub_1000CD9B+Cj
		xor	eax, eax

loc_1000CEC0:				; CODE XREF: sub_1000CD9B+26j
					; sub_1000CD9B+121j
		pop	edi
		pop	ebx
		retn
sub_1000CD9B	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000CEC3	proc near		; CODE XREF: sub_100069FA+273p
					; sub_1000C682+1Dp

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		test	eax, eax
		jnz	short loc_1000CECE

loc_1000CECB:				; CODE XREF: sub_1000CEC3+1Cj
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_1000CECE:				; CODE XREF: sub_1000CEC3+6j
		mov	ecx, 800h
		test	[eax], ecx
		jz	short loc_1000CEE1
		test	[eax+4], ecx
		jz	short loc_1000CEE1
		test	[eax+8], ecx
		jnz	short loc_1000CECB

loc_1000CEE1:				; CODE XREF: sub_1000CEC3+12j
					; sub_1000CEC3+17j
		xor	eax, eax
		inc	eax
		retn
sub_1000CEC3	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000CEE5	proc near		; CODE XREF: sub_1000C810+86p
					; sub_1000CF1C+CBp ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi
		push	edi
		push	[esp+8+arg_8]
		xor	esi, esi
		push	[esp+0Ch+arg_4]
		call	[esp+10h+arg_0]
		mov	edi, eax
		pop	ecx
		pop	ecx
		test	edi, edi
		jz	short loc_1000CF17
		push	esi		; int
		push	1		; int
		push	180h		; int
		push	esi		; int
		push	edi		; Src
		call	sub_1000E2A0
		push	edi
		mov	esi, eax
		call	PORT_Free_Util
		add	esp, 18h

loc_1000CF17:				; CODE XREF: sub_1000CEE5+16j
		pop	edi
		mov	eax, esi
		pop	esi
		retn
sub_1000CEE5	endp


; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1000CF1C(int,	int, char *Str,	int, int, int)
sub_1000CF1C	proc near		; CODE XREF: sub_1000C810+BDp

var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
Str		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		sub	esp, 14h
		push	ebx
		mov	ebx, [esp+18h+arg_0]
		xor	eax, eax
		push	ebp
		inc	eax
		xor	ebp, ebp
		mov	[esp+1Ch+var_14], eax
		push	esi
		test	ebx, ebx
		jz	short loc_1000CF4E
		lea	eax, [esp+20h+var_14]
		push	eax
		push	302h
		push	offset aCert	; "cert"
		push	[esp+2Ch+arg_4]
		push	ebx
		call	sub_10007A86
		jmp	short loc_1000CF63
; ---------------------------------------------------------------------------

loc_1000CF4E:				; CODE XREF: sub_1000CF1C+15j
		push	ebp
		push	eax		; int
		push	180h		; int
		push	302h		; int
		push	[esp+30h+Str]	; Str
		call	sub_100015E5

loc_1000CF63:				; CODE XREF: sub_1000CF1C+30j
		mov	esi, [esp+34h+arg_C]
		add	esp, 14h
		mov	[esi], eax
		cmp	eax, ebp
		jnz	short loc_1000CF82
		xor	eax, eax
		cmp	[esp+20h+var_14], 2
		setnz	al
		sub	eax, 2
		jmp	loc_1000D087
; ---------------------------------------------------------------------------

loc_1000CF82:				; CODE XREF: sub_1000CF1C+52j
		push	edi
		push	ebp
		call	sub_1000ACAB
		mov	ebp, eax
		pop	ecx
		test	ebp, ebp
		jnz	short loc_1000CF98
		or	edi, 0FFFFFFFFh
		jmp	loc_1000D07C
; ---------------------------------------------------------------------------

loc_1000CF98:				; CODE XREF: sub_1000CF1C+72j
		push	ebp
		push	esi
		call	sub_1000BCEA
		push	ebp		; Dst
		mov	edi, eax
		call	sub_1000A0DD
		add	esp, 0Ch
		test	edi, edi
		jnz	loc_1000D07C
		test	ebx, ebx
		jz	short loc_1000CFDB
		push	edi
		push	1		; int
		push	180h		; int
		push	edi		; int
		push	[esp+34h+Str]	; Str
		call	sub_100015E5
		add	esp, 14h
		test	eax, eax
		jz	short loc_1000CFDB

loc_1000CFCF:				; CODE XREF: sub_1000CF1C+D5j
		push	eax
		push	esi
		call	sub_1000B743
		jmp	loc_1000D078
; ---------------------------------------------------------------------------

loc_1000CFDB:				; CODE XREF: sub_1000CF1C+98j
					; sub_1000CF1C+B1j
		mov	ebx, [esp+24h+arg_14]
		mov	ebp, [esp+24h+arg_10]
		push	7
		push	ebx
		push	ebp
		call	sub_1000CEE5
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_1000CFCF
		push	6
		push	ebx
		push	ebp
		call	sub_1000CEE5
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_1000D00C
		push	eax
		push	esi
		call	sub_1000B463
		jmp	short loc_1000D078
; ---------------------------------------------------------------------------

loc_1000D00C:				; CODE XREF: sub_1000CF1C+E5j
		push	5
		push	ebx
		push	ebp
		call	sub_1000CEE5
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_1000D01F
		push	eax
		jmp	short loc_1000D072
; ---------------------------------------------------------------------------

loc_1000D01F:				; CODE XREF: sub_1000CF1C+FEj
		push	4
		push	ebx
		push	ebp
		call	sub_1000CEE5
		mov	ebx, eax
		add	esp, 0Ch
		test	ebx, ebx
		jz	short loc_1000D07C
		push	0
		lea	eax, [esp+28h+var_8]
		mov	[esp+28h+var_10], offset aVersion ; "Version"
		push	eax
		lea	eax, [esp+2Ch+var_10]
		mov	[esp+2Ch+var_C], 7
		push	eax
		push	ebx
		call	dword ptr [ebx+0Ch]
		add	esp, 10h
		test	eax, eax
		jnz	short loc_1000D071
		cmp	[esp+24h+var_4], 1
		jnz	short loc_1000D071
		mov	eax, [esp+24h+var_8]
		cmp	byte ptr [eax],	4
		ja	short loc_1000D071
		push	ebx		; Dst
		push	esi		; int
		call	sub_1000B344
		jmp	short loc_1000D078
; ---------------------------------------------------------------------------

loc_1000D071:				; CODE XREF: sub_1000CF1C+13Aj
					; sub_1000CF1C+141j ...
		push	ebx

loc_1000D072:				; CODE XREF: sub_1000CF1C+101j
		push	esi
		call	sub_1000B41A

loc_1000D078:				; CODE XREF: sub_1000CF1C+BAj
					; sub_1000CF1C+EEj ...
		pop	ecx
		mov	edi, eax
		pop	ecx

loc_1000D07C:				; CODE XREF: sub_1000CF1C+77j
					; sub_1000CF1C+90j ...
		push	dword ptr [esi]
		call	sub_10007474
		pop	ecx
		mov	eax, edi
		pop	edi

loc_1000D087:				; CODE XREF: sub_1000CF1C+61j
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 14h
		retn
sub_1000CF1C	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000D08E	proc near		; CODE XREF: sub_10008B56+1Bp
					; sub_1000D0DA+Dp

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, [esp+arg_0]
		cmp	eax, [esp+arg_8]
		jg	short loc_1000D09D
		mov	eax, [esp+arg_4]
		retn
; ---------------------------------------------------------------------------

loc_1000D09D:				; CODE XREF: sub_1000D08E+8j
		push	eax
		call	PORT_Alloc_Util
		pop	ecx
		retn
sub_1000D08E	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_1000D0A5(char	*Str, void *Dst, int)
sub_1000D0A5	proc near		; CODE XREF: sub_100080C2+AEp
					; sub_100090F1+2Ap ...

Str		= dword	ptr  8
Dst		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	esi
		push	[ebp+Str]	; Str
		call	strlen
		inc	eax
		pop	ecx
		cmp	eax, [ebp+arg_8]
		jg	short loc_1000D0CA
		mov	esi, [ebp+Dst]
		push	eax		; Size
		push	[ebp+Str]	; Src
		push	esi		; Dst
		call	memcpy
		add	esp, 0Ch
		jmp	short loc_1000D0D5
; ---------------------------------------------------------------------------

loc_1000D0CA:				; CODE XREF: sub_1000D0A5+11j
		push	[ebp+Str]
		call	PORT_Strdup_Util
		pop	ecx
		mov	esi, eax

loc_1000D0D5:				; CODE XREF: sub_1000D0A5+23j
		mov	eax, esi
		pop	esi
		pop	ebp
		retn
sub_1000D0A5	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_1000D0DA(void	*Src, size_t Size, int,	int)
sub_1000D0DA	proc near		; CODE XREF: sub_100081A7+178p
					; sub_1000833B+14Dp ...

Src		= dword	ptr  8
Size		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	esi
		push	[ebp+arg_C]
		push	[ebp+arg_8]
		push	[ebp+Size]
		call	sub_1000D08E
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		jz	short loc_1000D104
		push	[ebp+Size]	; Size
		push	[ebp+Src]	; Src
		push	esi		; Dst
		call	memcpy
		add	esp, 0Ch

loc_1000D104:				; CODE XREF: sub_1000D0DA+19j
		mov	eax, esi
		pop	esi
		pop	ebp
		retn
sub_1000D0DA	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000D109	proc near		; CODE XREF: sub_100090F1+16p
					; sub_100090F1+50p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		test	eax, eax
		jz	short locret_1000D11E
		cmp	eax, [esp+arg_4]
		jz	short locret_1000D11E
		push	eax
		call	PORT_Free_Util
		pop	ecx

locret_1000D11E:			; CODE XREF: sub_1000D109+6j
					; sub_1000D109+Cj
		retn
sub_1000D109	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000D11F	proc near		; DATA XREF: sub_1000B41A+20o

arg_0		= dword	ptr  4
arg_8		= dword	ptr  0Ch

		push	esi
		push	edi
		mov	edi, [esp+8+arg_0]
		cmp	dword ptr [edi+8Ch], 0
		mov	esi, [edi+6Ch]
		jz	short loc_1000D144
		test	byte ptr [esi+14h], 40h
		jz	short loc_1000D144
		cmp	dword ptr [esi+18h], 0
		jnz	short loc_1000D144
		mov	dword ptr [esi+18h], 40h

loc_1000D144:				; CODE XREF: sub_1000D11F+10j
					; sub_1000D11F+16j ...
		mov	eax, [edi+6Ch]
		push	offset aServerCert ; "Server-Cert"
		push	dword ptr [eax+2Ch] ; Str1
		call	strcmp
		pop	ecx
		pop	ecx
		test	eax, eax
		jnz	short loc_1000D15E
		or	dword ptr [esi+14h], 40h

loc_1000D15E:				; CODE XREF: sub_1000D11F+39j
		mov	ecx, [edi+6Ch]
		lea	eax, [ecx+14h]
		push	eax		; int
		push	dword ptr [ecx+2Ch] ; Str
		push	edi		; int
		push	[esp+14h+arg_8]	; int
		call	sub_10008F87
		add	esp, 10h
		pop	edi
		pop	esi
		test	eax, eax
		jz	short loc_1000D182
		push	eax		; Dst
		call	sub_1000A0DD
		pop	ecx

loc_1000D182:				; CODE XREF: sub_1000D11F+5Aj
		xor	eax, eax
		retn
sub_1000D11F	endp

; Exported entry   1. legacy_AddSecmodDB

; =============== S U B	R O U T	I N E =======================================


; int __cdecl legacy_AddSecmodDB(int, int, char	*Src, int, int)
		public legacy_AddSecmodDB
legacy_AddSecmodDB proc	near		; CODE XREF: legacy_ReadSecmodDB+139p
					; DATA XREF: .rdata:off_10013D68o

var_10		= byte ptr -10h
var_8		= dword	ptr -8
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
Src		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		sub	esp, 10h
		cmp	[esp+10h+arg_10], 0
		jnz	short loc_1000D197
		or	eax, 0FFFFFFFFh
		jmp	loc_1000D246
; ---------------------------------------------------------------------------

loc_1000D197:				; CODE XREF: legacy_AddSecmodDB+8j
		push	ebp
		push	esi
		xor	ebp, ebp
		push	ebp		; int
		push	ebp		; int
		push	[esp+20h+Src]	; Src
		push	[esp+24h+arg_4]	; int
		push	[esp+28h+arg_0]	; int
		call	sub_1000DE89
		mov	esi, eax
		add	esp, 14h
		test	esi, esi
		jnz	short loc_1000D1BF
		or	eax, 0FFFFFFFFh
		jmp	loc_1000D244
; ---------------------------------------------------------------------------

loc_1000D1BF:				; CODE XREF: legacy_AddSecmodDB+30j
		push	edi
		push	[esp+1Ch+arg_C]
		lea	eax, [esp+20h+var_10]
		push	eax
		call	sub_1000DE43
		mov	edi, eax
		pop	ecx
		pop	ecx
		test	edi, edi
		jnz	short loc_1000D23C
		push	[esp+1Ch+arg_C]
		lea	eax, [esp+20h+var_8]
		push	eax
		call	sub_1000D9E1
		mov	edi, eax
		pop	ecx
		pop	ecx
		test	edi, edi
		jz	short loc_1000D1F8
		lea	eax, [esp+1Ch+var_10]
		push	eax
		call	sub_1000DDFC
		jmp	short loc_1000D23B
; ---------------------------------------------------------------------------

loc_1000D1F8:				; CODE XREF: legacy_AddSecmodDB+65j
		push	ebx
		push	ebp
		lea	eax, [esp+24h+var_8]
		or	edi, 0FFFFFFFFh
		push	eax
		lea	eax, [esp+28h+var_10]
		push	eax
		push	esi
		call	dword ptr [esi+10h]
		mov	ebx, eax
		lea	eax, [esp+30h+var_10]
		push	eax
		call	sub_1000DDFC
		add	esp, 14h
		cmp	[esp+20h+var_8], ebp
		jz	short loc_1000D22A
		push	[esp+20h+var_8]
		call	PORT_Free_Util
		pop	ecx

loc_1000D22A:				; CODE XREF: legacy_AddSecmodDB+99j
		test	ebx, ebx
		pop	ebx
		jnz	short loc_1000D23C
		push	ebp
		push	esi
		call	dword ptr [esi+18h]
		neg	eax
		pop	ecx
		sbb	eax, eax
		and	edi, eax

loc_1000D23B:				; CODE XREF: legacy_AddSecmodDB+71j
		pop	ecx

loc_1000D23C:				; CODE XREF: legacy_AddSecmodDB+4Fj
					; legacy_AddSecmodDB+A8j
		push	esi
		call	dword ptr [esi+4]
		pop	ecx
		mov	eax, edi
		pop	edi

loc_1000D244:				; CODE XREF: legacy_AddSecmodDB+35j
		pop	esi
		pop	ebp

loc_1000D246:				; CODE XREF: legacy_AddSecmodDB+Dj
		add	esp, 10h
		retn
legacy_AddSecmodDB endp

; Exported entry   2. legacy_DeleteSecmodDB

; =============== S U B	R O U T	I N E =======================================


; int __cdecl legacy_DeleteSecmodDB(int, int, char *Src, int, int)
		public legacy_DeleteSecmodDB
legacy_DeleteSecmodDB proc near		; DATA XREF: .rdata:off_10013D68o

var_8		= byte ptr -8
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
Src		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	ecx
		push	ecx
		cmp	[esp+8+arg_10],	0
		jnz	short loc_1000D258
		or	eax, 0FFFFFFFFh
		jmp	short loc_1000D2CD
; ---------------------------------------------------------------------------

loc_1000D258:				; CODE XREF: legacy_DeleteSecmodDB+7j
		push	ebp
		push	edi
		xor	ebp, ebp
		push	ebp		; int
		push	ebp		; int
		push	[esp+18h+Src]	; Src
		push	[esp+1Ch+arg_4]	; int
		push	[esp+20h+arg_0]	; int
		call	sub_1000DE89
		mov	edi, eax
		add	esp, 14h
		test	edi, edi
		jnz	short loc_1000D27D
		or	eax, 0FFFFFFFFh
		jmp	short loc_1000D2CB
; ---------------------------------------------------------------------------

loc_1000D27D:				; CODE XREF: legacy_DeleteSecmodDB+2Cj
		push	ebx
		push	[esp+14h+arg_C]
		lea	eax, [esp+18h+var_8]
		push	eax
		call	sub_1000DE43
		mov	ebx, eax
		pop	ecx
		pop	ecx
		test	ebx, ebx
		jnz	short loc_1000D2C3
		push	esi
		push	ebp
		lea	eax, [esp+1Ch+var_8]
		or	ebx, 0FFFFFFFFh
		push	eax
		push	edi
		call	dword ptr [edi+8]
		mov	esi, eax
		lea	eax, [esp+24h+var_8]
		push	eax
		call	sub_1000DDFC
		add	esp, 10h
		test	esi, esi
		pop	esi
		jnz	short loc_1000D2C3
		push	ebp
		push	edi
		call	dword ptr [edi+18h]
		neg	eax
		pop	ecx
		sbb	eax, eax
		pop	ecx
		and	ebx, eax

loc_1000D2C3:				; CODE XREF: legacy_DeleteSecmodDB+48j
					; legacy_DeleteSecmodDB+6Aj
		push	edi
		call	dword ptr [edi+4]
		pop	ecx
		mov	eax, ebx
		pop	ebx

loc_1000D2CB:				; CODE XREF: legacy_DeleteSecmodDB+31j
		pop	edi
		pop	ebp

loc_1000D2CD:				; CODE XREF: legacy_DeleteSecmodDB+Cj
		pop	ecx
		pop	ecx
		retn
legacy_DeleteSecmodDB endp

; Exported entry   4. legacy_ReadSecmodDB

; =============== S U B	R O U T	I N E =======================================


; int __cdecl legacy_ReadSecmodDB(int, int, char *Src, int, int)
		public legacy_ReadSecmodDB
legacy_ReadSecmodDB proc near		; DATA XREF: .rdata:off_10013D68o

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= byte ptr -10h
var_8		= byte ptr -8
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
Src		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		sub	esp, 18h
		push	ebx
		push	esi
		push	0Ah
		pop	ebx
		push	28h
		call	PORT_ZAlloc_Util
		mov	esi, eax
		pop	ecx
		test	esi, esi
		jz	loc_1000D423
		push	ebp
		mov	ebp, [esp+24h+arg_10]
		push	edi
		push	ebp		; int
		push	1		; int
		push	[esp+30h+Src]	; Src
		push	[esp+34h+arg_4]	; int
		push	[esp+38h+arg_0]	; int
		call	sub_1000DE89
		mov	edi, eax
		add	esp, 14h
		test	edi, edi
		jz	loc_1000D3B2
		push	3
		lea	eax, [esp+2Ch+var_10]
		push	eax
		lea	eax, [esp+30h+var_8]
		push	eax
		push	edi
		call	dword ptr [edi+14h]
		add	esp, 10h
		test	eax, eax
		jnz	loc_1000D3B2
		push	4
		pop	ebp
		push	2
		pop	eax
		mov	[esp+28h+var_18], eax

loc_1000D336:				; CODE XREF: legacy_ReadSecmodDB+DCj
		and	[esp+28h+var_14], 0
		cmp	eax, ebx
		jl	short loc_1000D368
		add	ebx, 0Ah
		mov	eax, ebx
		shl	eax, 2
		push	eax
		push	esi
		call	PORT_Realloc_Util
		pop	ecx
		pop	ecx
		test	eax, eax
		jz	short loc_1000D3AE
		mov	esi, eax
		add	eax, 4
		push	28h		; Size
		add	eax, ebp
		push	0		; Val
		push	eax		; Dst
		call	memset
		add	esp, 0Ch

loc_1000D368:				; CODE XREF: legacy_ReadSecmodDB+6Dj
		lea	eax, [esp+28h+var_14]
		push	eax
		lea	eax, [esp+2Ch+var_10]
		push	eax
		push	[esp+30h+arg_C]
		call	sub_1000D456
		add	esp, 0Ch
		cmp	[esp+28h+var_14], 0
		jz	short loc_1000D389
		mov	[esi], eax
		jmp	short loc_1000D393
; ---------------------------------------------------------------------------

loc_1000D389:				; CODE XREF: legacy_ReadSecmodDB+B3j
		inc	[esp+28h+var_18]
		mov	[esi+ebp], eax
		add	ebp, 4

loc_1000D393:				; CODE XREF: legacy_ReadSecmodDB+B7j
		push	7
		lea	eax, [esp+2Ch+var_10]
		push	eax
		lea	eax, [esp+30h+var_8]
		push	eax
		push	edi
		call	dword ptr [edi+14h]
		add	esp, 10h
		test	eax, eax
		mov	eax, [esp+28h+var_18]
		jz	short loc_1000D336

loc_1000D3AE:				; CODE XREF: legacy_ReadSecmodDB+82j
		mov	ebp, [esp+28h+arg_10]

loc_1000D3B2:				; CODE XREF: legacy_ReadSecmodDB+3Bj
					; legacy_ReadSecmodDB+56j
		cmp	dword ptr [esi], 0
		jnz	short loc_1000D3E6
		push	22h
		push	[esp+2Ch+arg_C]
		call	NSSUTIL_Quote
		mov	ebx, eax
		pop	ecx
		pop	ecx
		test	ebx, ebx
		jz	short loc_1000D3E6
		push	offset aSlotflagsRsaDs ; "slotFlags=[RSA,DSA,DH,RC2,RC4,DES,RANDO"...
		push	ebx
		push	offset aLibraryNameNss ; "library= name=\"NSS Internal PKCS #11	M"...
		call	ds:PR_smprintf
		push	ebx
		mov	[esi], eax
		call	PORT_Free_Util
		add	esp, 10h

loc_1000D3E6:				; CODE XREF: legacy_ReadSecmodDB+E5j
					; legacy_ReadSecmodDB+F8j
		test	edi, edi
		jz	short loc_1000D3F1
		push	edi
		call	dword ptr [edi+4]
		pop	ecx
		jmp	short loc_1000D411
; ---------------------------------------------------------------------------

loc_1000D3F1:				; CODE XREF: legacy_ReadSecmodDB+118j
		cmp	dword ptr [esi], 0
		jz	short loc_1000D416
		test	ebp, ebp
		jz	short loc_1000D411
		push	ebp		; int
		push	dword ptr [esi]	; int
		push	[esp+30h+Src]	; Src
		push	[esp+34h+arg_4]	; int
		push	[esp+38h+arg_0]	; int
		call	legacy_AddSecmodDB
		add	esp, 14h

loc_1000D411:				; CODE XREF: legacy_ReadSecmodDB+11Fj
					; legacy_ReadSecmodDB+128j
		cmp	dword ptr [esi], 0
		jnz	short loc_1000D41F

loc_1000D416:				; CODE XREF: legacy_ReadSecmodDB+124j
		push	esi
		call	PORT_Free_Util
		pop	ecx
		xor	esi, esi

loc_1000D41F:				; CODE XREF: legacy_ReadSecmodDB+144j
		pop	edi
		mov	eax, esi
		pop	ebp

loc_1000D423:				; CODE XREF: legacy_ReadSecmodDB+14j
		pop	esi
		pop	ebx
		add	esp, 18h
		retn
legacy_ReadSecmodDB endp

; Exported entry   5. legacy_ReleaseSecmodDBData

; =============== S U B	R O U T	I N E =======================================


		public legacy_ReleaseSecmodDBData
legacy_ReleaseSecmodDBData proc	near	; DATA XREF: .rdata:off_10013D68o

arg_C		= dword	ptr  10h

		push	esi
		mov	esi, [esp+4+arg_C]
		test	esi, esi
		jz	short loc_1000D452
		mov	eax, [esi]
		push	edi
		mov	edi, esi
		jmp	short loc_1000D446
; ---------------------------------------------------------------------------

loc_1000D439:				; CODE XREF: legacy_ReleaseSecmodDBData+1Fj
		push	eax
		call	ds:PR_smprintf_free
		lea	edi, [edi+4]
		mov	eax, [edi]
		pop	ecx

loc_1000D446:				; CODE XREF: legacy_ReleaseSecmodDBData+Ej
		test	eax, eax
		jnz	short loc_1000D439
		push	esi
		call	PORT_Free_Util
		pop	ecx
		pop	edi

loc_1000D452:				; CODE XREF: legacy_ReleaseSecmodDBData+7j
		xor	eax, eax
		pop	esi
		retn
legacy_ReleaseSecmodDBData endp


; =============== S U B	R O U T	I N E =======================================


sub_1000D456	proc near		; CODE XREF: legacy_ReadSecmodDB+A6p

var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
Size		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 48h
		push	ebx
		push	edi
		xor	eax, eax
		push	32h
		pop	edi
		push	800h
		mov	[esp+54h+var_28], eax
		mov	ebx, eax
		mov	[esp+54h+var_38], eax
		mov	[esp+54h+var_20], eax
		mov	[esp+54h+var_18], eax
		mov	[esp+54h+var_1C], eax
		mov	[esp+54h+var_44], eax
		call	PORT_NewArena_Util
		pop	ecx
		mov	ecx, eax
		mov	[esp+50h+var_40], ecx
		test	ecx, ecx
		jz	loc_1000D9DB
		push	ebp
		mov	ebp, [esp+54h+arg_4]
		push	esi
		cmp	dword ptr [ebp+4], 10h
		jb	loc_1000D9BF
		mov	esi, [ebp+0]
		xor	eax, eax
		cmp	[esi+6], al
		setnz	al
		xor	edx, edx
		cmp	[esi+7], dl
		mov	[esp+58h+var_3C], eax
		setnz	dl
		mov	[esp+58h+var_4], edx
		mov	edx, [esp+58h+arg_8]
		test	edx, edx
		jz	short loc_1000D4C8
		mov	[edx], eax

loc_1000D4C8:				; CODE XREF: sub_1000D456+6Ej
		test	eax, eax
		jz	short loc_1000D4FA
		push	[esp+58h+arg_0]
		push	ecx
		call	PORT_ArenaStrdup_Util
		mov	[esp+60h+var_38], eax
		pop	ecx
		pop	ecx
		test	eax, eax
		jz	loc_1000D9CA
		cmp	[esi], bl
		jnz	loc_1000D56D
		cmp	byte ptr [esi+1], 4
		ja	short loc_1000D4FA
		mov	[esp+58h+var_20], 1

loc_1000D4FA:				; CODE XREF: sub_1000D456+74j
					; sub_1000D456+9Aj
		cmp	[esi], bl
		jnz	short loc_1000D56D
		cmp	byte ptr [esi+1], 6
		jb	short loc_1000D56D
		cmp	dword ptr [ebp+4], 26h
		jb	loc_1000D9BF
		movzx	edi, byte ptr [esi+10h]
		movzx	eax, byte ptr [esi+11h]
		movzx	ebx, byte ptr [esi+14h]
		shl	edi, 8
		or	edi, eax
		shl	ebx, 8
		movzx	eax, byte ptr [esi+12h]
		shl	edi, 8
		or	edi, eax
		movzx	eax, byte ptr [esi+13h]
		shl	edi, 8
		or	edi, eax
		movzx	eax, byte ptr [esi+15h]
		or	ebx, eax
		movzx	eax, byte ptr [esi+16h]
		shl	ebx, 8
		or	ebx, eax
		movzx	eax, byte ptr [esi+17h]
		shl	ebx, 8
		or	ebx, eax
		xor	eax, eax
		cmp	[esi+19h], al
		setnz	al
		mov	[esp+58h+var_18], eax
		xor	eax, eax
		cmp	[esi+1Ah], al
		setnz	al
		mov	[esp+58h+var_1C], eax
		xor	eax, eax
		inc	eax
		mov	[esp+58h+var_44], eax
		jmp	short loc_1000D56F
; ---------------------------------------------------------------------------

loc_1000D56D:				; CODE XREF: sub_1000D456+90j
					; sub_1000D456+A6j ...
		mov	eax, ebx

loc_1000D56F:				; CODE XREF: sub_1000D456+115j
		cmp	[esp+58h+var_3C], 0
		jz	short loc_1000D57F
		test	eax, eax
		jnz	short loc_1000D57F
		push	64h
		xor	edi, edi
		pop	ebx

loc_1000D57F:				; CODE XREF: sub_1000D456+11Ej
					; sub_1000D456+122j
		movzx	ecx, byte ptr [esi+8]
		movzx	eax, byte ptr [esi+9]
		shl	ecx, 8
		or	ecx, eax
		movzx	eax, byte ptr [esi+0Ah]
		shl	ecx, 8
		or	ecx, eax
		movzx	eax, byte ptr [esi+0Bh]
		shl	ecx, 8
		or	ecx, eax
		movzx	eax, byte ptr [esi+0Dh]
		mov	[esp+58h+var_8], ecx
		movzx	ecx, byte ptr [esi+0Ch]
		shl	ecx, 8
		or	ecx, eax
		movzx	eax, byte ptr [esi+0Eh]
		shl	ecx, 8
		or	ecx, eax
		movzx	eax, byte ptr [esi+0Fh]
		shl	ecx, 8
		or	ecx, eax
		movzx	eax, byte ptr [esi+5]
		mov	[esp+58h+var_C], ecx
		movzx	ecx, byte ptr [esi+4]
		shl	cx, 8
		or	cx, ax
		movzx	eax, cx
		movzx	ecx, byte ptr [esi+2]
		mov	[esp+58h+var_2C], eax
		movzx	eax, byte ptr [esi+3]
		shl	cx, 8
		or	cx, ax
		movzx	eax, cx
		movzx	edx, ax
		mov	[esp+58h+var_48], eax
		lea	eax, [edx+2]
		cmp	[ebp+4], eax
		jb	loc_1000D9BF
		mov	esi, [ebp+0]
		mov	[esp+58h+var_24], esi
		movzx	eax, byte ptr [esi+edx]
		movzx	ecx, byte ptr [esi+edx+1]
		shl	ax, 8
		or	cx, ax
		lea	eax, [edx+2]
		movzx	ecx, cx
		add	eax, ecx
		mov	[esp+58h+Size],	ecx
		mov	[esp+58h+var_34], eax
		cmp	[ebp+4], eax
		jb	loc_1000D9BF
		lea	eax, [ecx+1]
		push	eax
		push	[esp+5Ch+var_40]
		call	PORT_ArenaAlloc_Util
		mov	edx, eax
		mov	[esp+60h+var_14], edx
		pop	ecx
		pop	ecx
		test	edx, edx
		jz	loc_1000D9CA
		mov	ecx, [esp+58h+var_48]
		push	[esp+58h+Size]	; Size
		movzx	eax, cx
		add	eax, 2
		add	eax, esi
		push	eax		; Src
		push	edx		; Dst
		call	memcpy
		mov	eax, [esp+64h+Size]
		add	esp, 0Ch
		mov	ecx, [esp+58h+var_14]
		mov	edx, [esp+58h+var_34]
		mov	byte ptr [eax+ecx], 0
		lea	eax, [edx+2]
		cmp	[ebp+4], eax
		jb	loc_1000D9BF
		movzx	eax, byte ptr [esi+edx]
		movzx	ecx, byte ptr [esi+edx+1]
		shl	ax, 8
		or	cx, ax
		movzx	eax, cx
		mov	[esp+58h+Size],	eax
		test	ax, ax
		jz	short loc_1000D6FD
		movzx	ecx, ax
		lea	eax, [edx+2]
		add	eax, ecx
		cmp	[ebp+4], eax
		jb	loc_1000D9BF
		lea	eax, [ecx+1]
		push	eax
		push	[esp+5Ch+var_40]
		call	PORT_ArenaAlloc_Util
		mov	edx, eax
		mov	[esp+60h+var_28], edx
		pop	ecx
		pop	ecx
		test	edx, edx
		jz	loc_1000D9CA
		mov	eax, [esp+58h+Size]
		movzx	ecx, ax
		push	ecx		; Size
		mov	ecx, [esp+5Ch+var_34]
		add	ecx, 2
		add	ecx, esi
		push	ecx		; Src
		push	edx		; Dst
		call	memcpy
		mov	ecx, [esp+64h+Size]
		add	esp, 0Ch
		mov	edx, [esp+58h+var_28]
		movzx	eax, cx
		mov	byte ptr [eax+edx], 0
		mov	eax, ecx
		mov	edx, [esp+58h+var_34]

loc_1000D6FD:				; CODE XREF: sub_1000D456+247j
		movzx	esi, ax
		add	esi, 2
		add	esi, edx
		cmp	[esp+58h+var_3C], 0
		jnz	loc_1000D7A9
		cmp	[esp+58h+var_44], 0
		jz	loc_1000D7A9
		lea	eax, [esi+2]
		cmp	[ebp+4], eax
		jb	loc_1000D9BF
		mov	eax, [esp+58h+var_24]
		movzx	ecx, byte ptr [eax+esi+1]
		movzx	eax, byte ptr [eax+esi]
		shl	ax, 8
		or	cx, ax
		movzx	eax, cx
		mov	[esp+58h+Size],	eax
		test	ax, ax
		jz	short loc_1000D7A1
		movzx	ecx, ax
		lea	eax, [esi+2]
		add	eax, ecx
		cmp	[ebp+4], eax
		jb	loc_1000D9BF
		lea	eax, [ecx+1]
		push	eax
		push	[esp+5Ch+var_40]
		call	PORT_ArenaAlloc_Util
		mov	edx, eax
		mov	[esp+60h+var_38], edx
		pop	ecx
		pop	ecx
		test	edx, edx
		jz	loc_1000D9CA
		mov	ecx, [esp+58h+Size]
		movzx	eax, cx
		push	eax		; Size
		mov	eax, [esp+5Ch+var_24]
		add	eax, 2
		add	eax, esi
		push	eax		; Src
		push	edx		; Dst
		call	memcpy
		mov	ecx, [esp+64h+Size]
		add	esp, 0Ch
		mov	edx, [esp+58h+var_38]
		movzx	eax, cx
		mov	byte ptr [eax+edx], 0
		mov	eax, ecx

loc_1000D7A1:				; CODE XREF: sub_1000D456+2EFj
		movzx	eax, ax
		add	esi, 2
		add	esi, eax

loc_1000D7A9:				; CODE XREF: sub_1000D456+2B4j
					; sub_1000D456+2BFj
		mov	ecx, [esp+58h+var_2C]
		cmp	cx, word ptr [esp+58h+var_48]
		jb	short loc_1000D7BF
		movzx	eax, cx
		cmp	eax, esi
		jb	loc_1000D9BF

loc_1000D7BF:				; CODE XREF: sub_1000D456+35Cj
		movzx	ecx, cx
		lea	eax, [ecx+2]
		cmp	[ebp+4], eax
		jb	loc_1000D9BF
		mov	edx, [ebp+0]
		mov	[esp+58h+var_24], edx
		movzx	eax, byte ptr [ecx+edx]
		shl	ax, 8
		movzx	esi, ax
		movzx	eax, byte ptr [ecx+edx+1]
		or	esi, eax
		mov	eax, [esp+58h+var_48]
		cmp	word ptr [esp+58h+var_2C], ax
		jnb	short loc_1000D80F
		mov	ebp, [esp+58h+var_48]
		mov	eax, esi
		shl	eax, 5
		add	eax, 2
		movzx	edx, bp
		mov	ebp, [esp+58h+arg_4]
		add	eax, ecx
		cmp	edx, eax
		jb	loc_1000D9BF

loc_1000D80F:				; CODE XREF: sub_1000D456+39Aj
		mov	eax, esi
		shl	eax, 5
		add	eax, 2
		add	eax, ecx
		cmp	[ebp+4], eax
		jb	loc_1000D9BF
		mov	eax, esi
		shl	eax, 2
		push	eax
		push	[esp+5Ch+var_40]
		call	PORT_ArenaZAlloc_Util
		mov	edx, eax
		mov	[esp+60h+Size],	edx
		pop	ecx
		pop	ecx
		test	edx, edx
		jz	loc_1000D9CA
		xor	ebp, ebp
		test	esi, esi
		jle	loc_1000D953
		mov	edx, [esp+58h+var_2C]
		mov	eax, [esp+58h+var_24]
		movzx	ecx, dx
		add	eax, 4
		add	ecx, eax
		mov	[esp+58h+var_2C], ecx

loc_1000D85F:				; CODE XREF: sub_1000D456+4F7j
		movzx	edx, byte ptr [ecx-2]
		movzx	eax, byte ptr [ecx-1]
		shl	edx, 8
		or	edx, eax
		movzx	eax, byte ptr [ecx]
		shl	edx, 8
		or	edx, eax
		movzx	eax, byte ptr [ecx+1]
		shl	edx, 8
		or	edx, eax
		movzx	eax, byte ptr [ecx+3]
		mov	[esp+58h+var_24], edx
		movzx	edx, byte ptr [ecx+2]
		shl	edx, 8
		or	edx, eax
		movzx	eax, byte ptr [ecx+4]
		shl	edx, 8
		or	edx, eax
		movzx	eax, byte ptr [ecx+5]
		shl	edx, 8
		or	edx, eax
		movzx	eax, byte ptr [ecx+6]
		shl	eax, 8
		mov	[esp+58h+var_48], eax
		movzx	eax, byte ptr [ecx+7]
		or	[esp+58h+var_48], eax
		shl	[esp+58h+var_48], 8
		movzx	eax, byte ptr [ecx+8]
		or	[esp+58h+var_48], eax
		shl	[esp+58h+var_48], 8
		movzx	eax, byte ptr [ecx+9]
		or	[esp+58h+var_48], eax
		cmp	[esp+58h+var_20], 0
		movzx	eax, byte ptr [ecx+0Bh]
		mov	[esp+58h+var_34], edx
		mov	[esp+58h+var_10], eax
		jz	short loc_1000D90D
		cmp	[esp+58h+var_3C], 0
		jz	short loc_1000D90D
		cmp	[esp+58h+var_24], 2
		jz	short loc_1000D90D
		push	offset aSlotflagsRsaDs ; "slotFlags=[RSA,DSA,DH,RC2,RC4,DES,RANDO"...
		push	offset aSlotflags ; "slotFlags"
		call	NSSUTIL_ArgParseSlotFlags
		mov	edx, [esp+60h+var_34]
		pop	ecx
		pop	ecx
		mov	ecx, [esp+58h+var_2C]
		or	edx, eax
		mov	eax, [esp+58h+var_10]

loc_1000D90D:				; CODE XREF: sub_1000D456+488j
					; sub_1000D456+48Fj ...
		test	eax, eax
		jz	short loc_1000D91B
		cmp	[esp+58h+var_44], 0
		jnz	short loc_1000D91B
		push	64h
		pop	edi

loc_1000D91B:				; CODE XREF: sub_1000D456+4B9j
					; sub_1000D456+4C0j
		push	0
		push	eax
		movzx	eax, byte ptr [ecx+0Ah]
		push	eax
		push	[esp+64h+var_48]
		push	edx
		push	[esp+6Ch+var_24]
		call	NSSUTIL_MkSlotString
		mov	edx, [esp+70h+Size]
		add	esp, 18h
		mov	[edx+ebp*4], eax
		test	eax, eax
		jz	short loc_1000D9B5
		mov	ecx, [esp+58h+var_2C]
		inc	ebp
		add	ecx, 20h
		mov	[esp+58h+var_2C], ecx
		cmp	ebp, esi
		jl	loc_1000D85F

loc_1000D953:				; CODE XREF: sub_1000D456+3EFj
		push	[esp+58h+var_C]
		mov	eax, [esp+5Ch+var_3C]
		push	[esp+5Ch+var_8]
		push	ebx
		push	edi
		push	eax
		push	[esp+6Ch+var_1C]
		push	[esp+70h+var_18]
		push	[esp+74h+var_4]
		push	eax
		push	esi
		push	edx
		call	NSSUTIL_MkNSSString
		push	esi
		push	[esp+88h+Size]
		mov	edi, eax
		call	sub_1000DE17
		push	edi
		push	[esp+90h+var_38]
		push	[esp+94h+var_14]
		push	[esp+98h+var_28]
		call	NSSUTIL_MkModuleSpec
		add	esp, 44h
		mov	esi, eax
		push	edi
		call	ds:PR_smprintf_free
		push	1
		push	[esp+60h+var_40]
		call	PORT_FreeArena_Util
		add	esp, 0Ch
		mov	eax, esi
		jmp	short loc_1000D9D9
; ---------------------------------------------------------------------------

loc_1000D9B5:				; CODE XREF: sub_1000D456+4E7j
		push	ebp
		push	edx
		call	sub_1000DE17
		pop	ecx
		jmp	short loc_1000D9C9
; ---------------------------------------------------------------------------

loc_1000D9BF:				; CODE XREF: sub_1000D456+47j
					; sub_1000D456+B2j ...
		push	0FFFFE012h
		call	PORT_SetError_Util

loc_1000D9C9:				; CODE XREF: sub_1000D456+567j
		pop	ecx

loc_1000D9CA:				; CODE XREF: sub_1000D456+88j
					; sub_1000D456+1F1j ...
		push	1
		push	[esp+5Ch+var_40]
		call	PORT_FreeArena_Util
		pop	ecx
		pop	ecx
		xor	eax, eax

loc_1000D9D9:				; CODE XREF: sub_1000D456+55Dj
		pop	esi
		pop	ebp

loc_1000D9DB:				; CODE XREF: sub_1000D456+37j
		pop	edi
		pop	ebx
		add	esp, 48h
		retn
sub_1000D456	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000D9E1	proc near		; CODE XREF: legacy_AddSecmodDB+5Ap

var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
Str		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
Size		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= byte ptr -8
var_7		= byte ptr -7
var_6		= byte ptr -6
var_5		= byte ptr -5
var_4		= byte ptr -4
var_3		= byte ptr -3
var_2		= byte ptr -2
var_1		= byte ptr -1
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 38h
		xor	eax, eax
		push	ebx
		push	ebp
		push	esi
		mov	esi, eax
		mov	[esp+44h+var_34], eax
		mov	ebx, eax
		mov	[esp+44h+Str], eax
		mov	[esp+44h+var_2C], eax
		mov	ebp, eax
		mov	[esp+44h+var_28], eax
		mov	[esp+44h+var_38], eax
		lea	eax, [esp+44h+var_38]
		push	eax
		lea	eax, [esp+48h+var_28]
		mov	[esp+48h+var_24], esi
		push	eax
		lea	eax, [esp+4Ch+Str]
		push	eax
		lea	eax, [esp+50h+var_2C]
		push	eax
		push	[esp+54h+arg_4]
		call	NSSUTIL_ArgParseModuleSpec
		add	esp, 14h
		test	eax, eax
		jnz	loc_1000DDF5
		push	edi
		or	edi, 0FFFFFFFFh
		cmp	[esp+48h+Str], ebx
		jz	loc_1000DDB4
		push	[esp+48h+Str]	; Str
		call	strlen
		movzx	eax, ax
		pop	ecx
		mov	[esp+48h+var_20], eax
		cmp	[esp+48h+var_2C], ebx
		jz	short loc_1000DA65
		push	[esp+48h+var_2C] ; Str
		call	strlen
		movzx	esi, ax
		pop	ecx
		mov	[esp+48h+var_24], esi

loc_1000DA65:				; CODE XREF: sub_1000D9E1+71j
		cmp	[esp+48h+var_28], ebx
		jz	short loc_1000DA78
		push	[esp+48h+var_28] ; Str
		call	strlen
		pop	ecx
		movzx	ebx, ax

loc_1000DA78:				; CODE XREF: sub_1000D9E1+88j
		push	[esp+48h+var_38]
		push	offset aSlotparams ; "slotParams"
		call	NSSUTIL_ArgGetParamValue
		mov	edi, eax
		lea	eax, [esp+50h+var_34]
		push	eax
		push	edi
		push	0
		call	NSSUTIL_ArgParseSlotInfo
		add	esp, 14h
		mov	ebp, eax
		mov	[esp+48h+var_C], ebp
		test	edi, edi
		jz	short loc_1000DAA9
		push	edi
		call	PORT_Free_Util
		pop	ecx

loc_1000DAA9:				; CODE XREF: sub_1000D9E1+BFj
		mov	ecx, [esp+48h+var_34]
		test	ecx, ecx
		jz	short loc_1000DAB9
		test	ebp, ebp
		jz	loc_1000DDA0

loc_1000DAB9:				; CODE XREF: sub_1000D9E1+CEj
		mov	eax, [esp+48h+var_20]
		movzx	edi, ax
		movzx	eax, si
		shl	ecx, 5
		movzx	edx, bx
		add	ecx, eax
		add	ecx, edx
		mov	[esp+48h+Size],	edi
		lea	esi, [edi+28h]
		mov	[esp+48h+var_14], edx
		add	esi, ecx
		mov	[esp+48h+var_18], eax
		push	esi
		call	PORT_ZAlloc_Util
		pop	ecx
		mov	ecx, [esp+48h+arg_0]
		mov	edi, eax
		mov	[ecx], edi
		mov	[ecx+4], esi
		test	edi, edi
		jz	loc_1000DDA0
		mov	word ptr [edi],	600h
		mov	esi, offset aFlags ; "flags"
		push	[esp+48h+var_38]
		push	offset aInternal ; "internal"
		push	esi
		call	NSSUTIL_ArgHasFlag
		test	eax, eax
		setnz	al
		mov	[edi+6], al
		push	[esp+54h+var_38]
		push	offset aFips	; "FIPS"
		push	esi
		call	NSSUTIL_ArgHasFlag
		test	eax, eax
		setnz	al
		mov	[edi+7], al
		push	[esp+60h+var_38]
		push	offset aIsmoduledb ; "isModuleDB"
		push	esi
		call	NSSUTIL_ArgHasFlag
		test	eax, eax
		setnz	al
		mov	[edi+19h], al
		push	[esp+6Ch+var_38]
		push	offset aIsmoduledbonly ; "isModuleDBOnly"
		push	esi
		call	NSSUTIL_ArgHasFlag
		test	eax, eax
		setnz	al
		mov	[edi+1Ah], al
		push	[esp+78h+var_38]
		push	offset aCritical ; "critical"
		push	esi
		call	NSSUTIL_ArgHasFlag
		test	eax, eax
		push	0
		setnz	al
		push	32h
		mov	[edi+1Bh], al
		push	[esp+8Ch+var_38]
		push	offset aTrustorder ; "trustOrder"
		call	NSSUTIL_ArgReadLong
		add	esp, 4Ch
		mov	[edi+13h], al
		mov	ecx, eax
		shr	ecx, 8
		mov	[edi+12h], cl
		mov	ecx, eax
		push	0
		shr	ecx, 10h
		shr	eax, 18h
		push	0
		mov	[edi+11h], cl
		mov	[edi+10h], al
		push	[esp+50h+var_38]
		push	offset aCipherorder ; "cipherOrder"
		call	NSSUTIL_ArgReadLong
		mov	ecx, eax
		mov	[edi+17h], al
		shr	ecx, 8
		mov	[edi+16h], cl
		mov	ecx, eax
		shr	ecx, 10h
		shr	eax, 18h
		mov	[edi+15h], cl
		mov	[edi+14h], al
		push	[esp+58h+var_38]
		push	offset aCiphers	; "ciphers"
		call	NSSUTIL_ArgGetParamValue
		mov	esi, eax
		lea	eax, [esp+60h+var_8]
		push	esi
		push	eax
		call	NSSUTIL_ArgParseCipherFlags
		mov	cl, [esp+68h+var_8]
		add	esp, 20h
		mov	[edi+0Bh], cl
		mov	cl, [esp+48h+var_7]
		mov	[edi+0Ah], cl
		mov	al, [esp+48h+var_6]
		mov	[edi+9], al
		mov	al, [esp+48h+var_5]
		mov	[edi+8], al
		mov	al, [esp+48h+var_4]
		mov	[edi+0Fh], al
		mov	al, [esp+48h+var_3]
		mov	[edi+0Eh], al
		mov	al, [esp+48h+var_2]
		mov	[edi+0Dh], al
		mov	al, [esp+48h+var_1]
		mov	[edi+0Ch], al
		test	esi, esi
		jz	short loc_1000DC2F
		push	esi
		call	PORT_Free_Util
		pop	ecx

loc_1000DC2F:				; CODE XREF: sub_1000D9E1+245j
		mov	edx, [esp+48h+var_20]
		mov	ecx, [esp+48h+var_24]
		push	[esp+48h+Size]	; Size
		add	ecx, 26h
		mov	word ptr [edi+2], 2000h
		lea	eax, [edx+ebx]
		add	eax, ecx
		movzx	ecx, ax
		mov	[edi+5], cl
		mov	eax, ecx
		shr	eax, 8
		mov	[edi+4], al
		mov	al, byte ptr [esp+4Ch+var_34]
		mov	[ecx+edi+1], al
		mov	eax, [esp+4Ch+var_34]
		shr	eax, 8
		mov	[ecx+edi], al
		mov	eax, edx
		shr	eax, 8
		mov	[edi+20h], al
		lea	eax, [edi+22h]
		mov	[edi+21h], dl
		push	[esp+4Ch+Str]	; Src
		mov	[esp+50h+var_10], ecx
		push	eax		; Dst
		call	memcpy
		mov	eax, [esp+54h+var_20]
		add	esp, 0Ch
		mov	edx, [esp+48h+var_24]
		add	eax, 2
		movzx	esi, ax
		mov	eax, edx
		mov	ecx, esi
		shr	eax, 8
		add	esi, 2
		mov	[ecx+edi+21h], dl
		mov	[ecx+edi+20h], al
		test	dx, dx
		jz	short loc_1000DCCA
		push	[esp+48h+var_18] ; Size
		movzx	eax, si
		push	[esp+4Ch+var_2C] ; Src
		add	eax, 20h
		add	eax, edi
		push	eax		; Dst
		call	memcpy
		mov	edx, [esp+54h+var_24]
		add	esp, 0Ch

loc_1000DCCA:				; CODE XREF: sub_1000D9E1+2CAj
		add	esi, edx
		mov	eax, ebx
		movzx	ecx, si
		shr	eax, 8
		mov	[ecx+edi+21h], bl
		mov	[ecx+edi+20h], al
		test	bx, bx
		jz	short loc_1000DCFD
		push	[esp+48h+var_14] ; Size
		lea	eax, [esi+2]
		push	[esp+4Ch+var_28] ; Src
		movzx	eax, ax
		add	eax, 20h
		add	eax, edi
		push	eax		; Dst
		call	memcpy
		add	esp, 0Ch

loc_1000DCFD:				; CODE XREF: sub_1000D9E1+2FEj
		mov	eax, [esp+48h+var_34]
		test	eax, eax
		jz	loc_1000DD9C
		and	[esp+48h+var_14], 0
		test	eax, eax
		jle	loc_1000DD9C
		mov	esi, [esp+48h+var_10]
		lea	ebx, [ebp+2]
		mov	ebp, [esp+48h+var_14]
		add	esi, 4
		add	esi, edi

loc_1000DD26:				; CODE XREF: sub_1000D9E1+3B5j
		mov	al, [ebx-2]
		mov	[esi+1], al
		mov	al, [ebx-1]
		mov	[esi], al
		mov	al, [ebx]
		mov	[esi-1], al
		mov	al, [ebx+1]
		mov	[esi-2], al
		mov	al, [ebx+2]
		mov	[esi+5], al
		mov	al, [ebx+3]
		mov	[esi+4], al
		mov	al, [ebx+4]
		mov	[esi+3], al
		mov	al, [ebx+5]
		mov	[esi+2], al
		mov	al, [ebx+0Ah]
		mov	[esi+9], al
		mov	eax, [ebx+0Ah]
		sar	eax, 8
		mov	[esi+8], al
		mov	al, [ebx+0Ch]
		mov	[esi+7], al
		mov	al, [ebx+0Dh]
		mov	[esi+6], al
		mov	al, [ebx+6]
		mov	[esi+0Ah], al
		mov	al, [ebx+0Eh]
		push	12h		; Size
		mov	[esi+0Bh], al
		lea	eax, [esi+0Ch]
		push	0		; Val
		push	eax		; Dst
		call	memset
		add	esp, 0Ch
		lea	ebx, [ebx+24h]
		inc	ebp
		lea	esi, [esi+20h]
		cmp	ebp, [esp+48h+var_34]
		jl	short loc_1000DD26
		mov	ebp, [esp+48h+var_C]

loc_1000DD9C:				; CODE XREF: sub_1000D9E1+322j
					; sub_1000D9E1+32Fj
		xor	edi, edi
		jmp	short loc_1000DDA3
; ---------------------------------------------------------------------------

loc_1000DDA0:				; CODE XREF: sub_1000D9E1+D2j
					; sub_1000D9E1+111j
		or	edi, 0FFFFFFFFh

loc_1000DDA3:				; CODE XREF: sub_1000D9E1+3BDj
		cmp	[esp+48h+Str], 0
		jz	short loc_1000DDB4
		push	[esp+48h+Str]
		call	PORT_Free_Util
		pop	ecx

loc_1000DDB4:				; CODE XREF: sub_1000D9E1+56j
					; sub_1000D9E1+3C7j
		cmp	[esp+48h+var_2C], 0
		jz	short loc_1000DDC5
		push	[esp+48h+var_2C]
		call	PORT_Free_Util
		pop	ecx

loc_1000DDC5:				; CODE XREF: sub_1000D9E1+3D8j
		cmp	[esp+48h+var_28], 0
		jz	short loc_1000DDD6
		push	[esp+48h+var_28]
		call	PORT_Free_Util
		pop	ecx

loc_1000DDD6:				; CODE XREF: sub_1000D9E1+3E9j
		test	ebp, ebp
		jz	short loc_1000DDE1
		push	ebp
		call	PORT_Free_Util
		pop	ecx

loc_1000DDE1:				; CODE XREF: sub_1000D9E1+3F7j
		cmp	[esp+48h+var_38], 0
		jz	short loc_1000DDF2
		push	[esp+48h+var_38]
		call	PORT_Free_Util
		pop	ecx

loc_1000DDF2:				; CODE XREF: sub_1000D9E1+405j
		mov	eax, edi
		pop	edi

loc_1000DDF5:				; CODE XREF: sub_1000D9E1+48j
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 38h
		retn
sub_1000D9E1	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000DDFC	proc near		; CODE XREF: legacy_AddSecmodDB+6Cp
					; legacy_AddSecmodDB+8Dp ...

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		cmp	dword ptr [esi], 0
		jz	short loc_1000DE0E
		push	dword ptr [esi]
		call	PORT_Free_Util
		pop	ecx

loc_1000DE0E:				; CODE XREF: sub_1000DDFC+8j
		and	dword ptr [esi], 0
		and	dword ptr [esi+4], 0
		pop	esi
		retn
sub_1000DDFC	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000DE17	proc near		; CODE XREF: sub_1000D456+527p
					; sub_1000D456+561p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		xor	esi, esi
		cmp	[esp+4+arg_4], esi
		jle	short loc_1000DE41
		push	edi
		mov	edi, [esp+8+arg_0]

loc_1000DE25:				; CODE XREF: sub_1000DE17+27j
		cmp	dword ptr [edi+esi*4], 0
		jz	short loc_1000DE39
		push	dword ptr [edi+esi*4]
		call	ds:PR_smprintf_free
		and	dword ptr [edi+esi*4], 0
		pop	ecx

loc_1000DE39:				; CODE XREF: sub_1000DE17+12j
		inc	esi
		cmp	esi, [esp+8+arg_4]
		jl	short loc_1000DE25
		pop	edi

loc_1000DE41:				; CODE XREF: sub_1000DE17+7j
		pop	esi
		retn
sub_1000DE17	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000DE43	proc near		; CODE XREF: legacy_AddSecmodDB+44p
					; legacy_DeleteSecmodDB+3Dp

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		push	[esp+4+arg_4]
		push	offset aName	; "name"
		call	NSSUTIL_ArgGetParamValue
		mov	esi, eax
		pop	ecx
		pop	ecx
		test	esi, esi
		jnz	short loc_1000DE75
		push	[esp+4+arg_4]
		push	offset aLibrary	; "library"
		call	NSSUTIL_ArgGetParamValue
		mov	esi, eax
		pop	ecx
		pop	ecx
		test	esi, esi
		jnz	short loc_1000DE75
		or	eax, 0FFFFFFFFh
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1000DE75:				; CODE XREF: sub_1000DE43+15j
					; sub_1000DE43+2Bj
		push	esi		; Str
		call	strlen
		pop	ecx
		mov	ecx, [esp+4+arg_0]
		mov	[ecx], esi
		mov	[ecx+4], eax
		xor	eax, eax
		pop	esi
		retn
sub_1000DE43	endp


; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1000DE89(int,	int, char *Src,	int, int)
sub_1000DE89	proc near		; CODE XREF: legacy_AddSecmodDB+24p
					; legacy_DeleteSecmodDB+20p ...

var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
Src		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	ecx
		cmp	[esp+4+arg_0], 0
		push	ebx
		push	esi
		push	edi
		jz	loc_1000DF7E
		push	ebp
		push	[esp+14h+arg_4]
		call	PORT_Strdup_Util
		mov	ebp, eax
		push	ebp		; Str
		call	strlen
		pop	ecx
		xor	ebx, ebx
		mov	[esp+18h+var_4], 1
		pop	ecx
		cmp	eax, 3
		jl	short loc_1000DED3
		lea	esi, [eax-3]
		add	esi, ebp
		push	offset a_db	; ".db"
		push	esi		; Str1
		call	strcmp
		pop	ecx
		pop	ecx
		test	eax, eax
		jnz	short loc_1000DED3
		mov	[esi], bl

loc_1000DED3:				; CODE XREF: sub_1000DE89+30j
					; sub_1000DE89+46j
		mov	edi, [esp+14h+arg_C]
		neg	edi
		push	ebx
		sbb	edi, edi
		and	edi, 0FFFFFFFEh
		add	edi, 2
		push	edi
		push	ebp
		push	offset dword_100133B8
		push	[esp+24h+arg_0]
		call	sub_10007A86
		add	esp, 14h
		mov	esi, eax
		cmp	[esp+14h+arg_10], ebx
		jz	short loc_1000DF74
		test	esi, esi
		jnz	short loc_1000DF74
		lea	eax, [esp+14h+var_4]
		push	eax
		push	302h
		push	ebp
		push	offset dword_100133B8
		push	[esp+24h+arg_0]
		call	sub_10007A86
		mov	esi, eax
		add	esp, 14h
		test	esi, esi
		jnz	short loc_1000DF42
		cmp	[esp+14h+var_4], 2
		jnz	short loc_1000DF74
		push	ebx
		push	edi
		push	ebp
		push	offset dword_100133B8
		push	[esp+24h+arg_0]
		call	sub_10007A86
		add	esp, 14h
		mov	esi, eax
		jmp	short loc_1000DF74
; ---------------------------------------------------------------------------

loc_1000DF42:				; CODE XREF: sub_1000DE89+98j
		push	ebx		; int
		push	1		; int
		push	180h		; int
		push	ebx		; int
		push	[esp+24h+Src]	; Src
		call	sub_1000E2A0
		mov	edi, eax
		add	esp, 14h
		test	edi, edi
		jz	short loc_1000DF6D
		push	edi
		push	esi
		call	sub_10007404
		push	edi
		call	dword ptr [edi+4]
		add	esp, 0Ch
		jmp	short loc_1000DF74
; ---------------------------------------------------------------------------

loc_1000DF6D:				; CODE XREF: sub_1000DE89+D2j
		push	esi
		call	dword ptr [esi+4]
		pop	ecx
		mov	esi, ebx

loc_1000DF74:				; CODE XREF: sub_1000DE89+72j
					; sub_1000DE89+76j ...
		push	ebp
		call	PORT_Free_Util
		pop	ecx
		pop	ebp
		jmp	short loc_1000DFD2
; ---------------------------------------------------------------------------

loc_1000DF7E:				; CODE XREF: sub_1000DE89+9j
		mov	eax, [esp+10h+arg_C]
		xor	ebx, ebx
		neg	eax
		mov	edi, 180h
		push	ebx		; int
		sbb	eax, eax
		push	1		; int
		and	eax, 0FFFFFFFEh
		push	edi		; int
		add	eax, 2
		push	eax		; int
		push	[esp+20h+Src]	; Src
		call	sub_1000E2A0
		mov	esi, eax
		add	esp, 14h
		test	esi, esi
		jnz	short loc_1000DFD2
		cmp	[esp+10h+arg_C], ebx
		jnz	short loc_1000DFD4
		push	ebx		; int
		push	1		; int
		push	edi		; int
		push	302h		; int
		push	[esp+20h+Src]	; Src
		call	sub_1000E2A0
		mov	esi, eax
		add	esp, 14h
		test	esi, esi
		jz	short loc_1000DFD2
		push	ebx
		push	esi
		call	dword ptr [esi+18h]
		pop	ecx
		pop	ecx

loc_1000DFD2:				; CODE XREF: sub_1000DE89+F3j
					; sub_1000DE89+11Fj ...
		mov	eax, esi

loc_1000DFD4:				; CODE XREF: sub_1000DE89+125j
		pop	edi
		pop	esi
		pop	ebx
		pop	ecx
		retn
sub_1000DE89	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000DFE0	proc near		; CODE XREF: sub_10004568+19Ap
		mov	eax, dword_1001506C
		test	eax, eax
		jnz	short loc_1000E009
		push	offset loc_1000E0E0
		push	offset dword_10015070
		call	ds:PR_CallOnce
		add	esp, 8
		test	eax, eax
		jz	short loc_1000E004
		or	eax, 0FFFFFFFFh
		retn
; ---------------------------------------------------------------------------

loc_1000E004:				; CODE XREF: sub_1000DFE0+1Ej
		mov	eax, dword_1001506C

loc_1000E009:				; CODE XREF: sub_1000DFE0+7j
		mov	eax, [eax+8Ch]
		jmp	eax
sub_1000DFE0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000E020	proc near		; CODE XREF: sub_10001C4C+33p
					; sub_1000527E+73p
		mov	eax, dword_1001506C
		test	eax, eax
		jnz	short loc_1000E049
		push	offset loc_1000E0E0
		push	offset dword_10015070
		call	ds:PR_CallOnce
		add	esp, 8
		test	eax, eax
		jz	short loc_1000E044
		or	eax, 0FFFFFFFFh
		retn
; ---------------------------------------------------------------------------

loc_1000E044:				; CODE XREF: sub_1000E020+1Ej
		mov	eax, dword_1001506C

loc_1000E049:				; CODE XREF: sub_1000E020+7j
		mov	eax, [eax+10Ch]
		jmp	eax
sub_1000E020	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000E060	proc near		; CODE XREF: sub_1000572A+A3p
		mov	eax, dword_1001506C
		test	eax, eax
		jnz	short loc_1000E089
		push	offset loc_1000E0E0
		push	offset dword_10015070
		call	ds:PR_CallOnce
		add	esp, 8
		test	eax, eax
		jz	short loc_1000E084
		or	eax, 0FFFFFFFFh
		retn
; ---------------------------------------------------------------------------

loc_1000E084:				; CODE XREF: sub_1000E060+1Ej
		mov	eax, dword_1001506C

loc_1000E089:				; CODE XREF: sub_1000E060+7j
		mov	eax, [eax+124h]
		jmp	eax
sub_1000E060	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000E0A0	proc near		; CODE XREF: sub_100011D1+5Dp
					; sub_10002110+83p ...
		mov	eax, dword_1001506C
		test	eax, eax
		jnz	short loc_1000E0C9
		push	offset loc_1000E0E0
		push	offset dword_10015070
		call	ds:PR_CallOnce
		add	esp, 8
		test	eax, eax
		jz	short loc_1000E0C4
		or	eax, 0FFFFFFFFh
		retn
; ---------------------------------------------------------------------------

loc_1000E0C4:				; CODE XREF: sub_1000E0A0+1Ej
		mov	eax, dword_1001506C

loc_1000E0C9:				; CODE XREF: sub_1000E0A0+7j
		mov	eax, [eax+0DCh]
		jmp	eax
sub_1000E0A0	endp

; ---------------------------------------------------------------------------
		align 10h

loc_1000E0E0:				; DATA XREF: sub_1000DFE0+9o
					; sub_1000E020+9o ...
		push	esi
		mov	esi, off_10015008
		test	esi, esi
		jnz	short loc_1000E0FF
		push	esi
		push	0FFFFE8A7h
		call	ds:PR_SetError
		add	esp, 8
		or	eax, 0FFFFFFFFh
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1000E0FF:				; CODE XREF: .text:1000E0E9j
		push	edi
		push	esi
		call	sub_1000E230
		mov	edi, eax
		add	esp, 4
		test	edi, edi
		jz	short loc_1000E172
		push	offset aFreebl_getvect ; "FREEBL_GetVector"
		push	edi
		call	ds:PR_FindFunctionSymbol
		add	esp, 8
		test	eax, eax
		jz	short loc_1000E163
		call	eax
		mov	edx, eax
		test	edx, edx
		jz	short loc_1000E163
		movzx	eax, word ptr [edx+2]
		mov	ecx, eax
		and	ecx, 0FF00h
		cmp	ecx, 300h
		jnz	short loc_1000E163
		cmp	al, 11h
		jb	short loc_1000E163
		mov	eax, 348h
		cmp	[edx], ax
		jb	short loc_1000E163
		mov	dword_10015068,	edi
		xor	eax, eax
		pop	edi
		mov	dword_10015064,	esi
		mov	dword_1001506C,	edx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1000E163:				; CODE XREF: .text:1000E120j
					; .text:1000E128j ...
		push	dword_10015068
		call	ds:PR_UnloadLibrary
		add	esp, 4

loc_1000E172:				; CODE XREF: .text:1000E10Dj
		pop	edi
		or	eax, 0FFFFFFFFh
		pop	esi
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1000E180(char	*Str, int)
sub_1000E180	proc near		; CODE XREF: sub_1000E230+26p

var_4		= dword	ptr -4
Str		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 0Ch
		push	ebx
		push	ebp
		push	esi
		push	edi
		call	ds:PR_GetDirectorySeparator
		mov	ebp, [esp+1Ch+Str]
		movsx	eax, al
		push	eax		; Ch
		push	ebp		; Str
		call	ds:strrchr
		mov	edi, eax
		add	esp, 8
		test	edi, edi
		jz	short loc_1000E21F
		mov	esi, [esp+1Ch+arg_4]
		sub	edi, ebp
		mov	ecx, esi
		inc	edi
		lea	edx, [ecx+1]

loc_1000E1B1:				; CODE XREF: sub_1000E180+36j
		mov	al, [ecx]
		inc	ecx
		test	al, al
		jnz	short loc_1000E1B1
		sub	ecx, edx
		lea	eax, [edi+1]
		add	eax, ecx
		push	eax
		call	PORT_Alloc_Util
		mov	ebx, eax
		add	esp, 4
		test	ebx, ebx
		jz	short loc_1000E21F
		push	edi		; Size
		push	ebp		; Src
		push	ebx		; Dst
		call	memcpy
		lea	ecx, [edi+ebx]
		add	esp, 0Ch
		sub	ecx, esi
		mov	edi, edi

loc_1000E1E0:				; CODE XREF: sub_1000E180+6Bj
		mov	al, [esi]
		lea	esi, [esi+1]
		mov	[ecx+esi-1], al
		test	al, al
		jnz	short loc_1000E1E0
		mov	eax, [esp+1Ch+var_4]
		push	0Ah
		sub	esp, 0Ch
		mov	ecx, esp
		mov	dword ptr [ecx], 0
		mov	[ecx+4], ebx
		mov	[ecx+8], eax
		call	ds:PR_LoadLibraryWithFlags
		push	ebx
		mov	esi, eax
		call	PORT_Free_Util
		add	esp, 14h
		mov	eax, esi
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_1000E21F:				; CODE XREF: sub_1000E180+23j
					; sub_1000E180+4Cj
		pop	edi
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		add	esp, 0Ch
		retn
sub_1000E180	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000E230	proc near		; CODE XREF: .text:1000E101p
					; DATA XREF: sub_1000E230+6o

var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		sub	esp, 0Ch
		push	ebx
		push	esi
		push	edi
		push	offset sub_1000E230
		push	off_10015004
		call	ds:PR_GetLibraryFilePathname
		mov	ebx, [esp+20h+arg_0]
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		jz	short loc_1000E274
		push	ebx		; int
		push	esi		; Str
		call	sub_1000E180
		push	esi
		mov	edi, eax
		call	ds:PR_Free
		add	esp, 0Ch
		test	edi, edi
		jz	short loc_1000E274
		mov	eax, edi
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_1000E274:				; CODE XREF: sub_1000E230+22j
					; sub_1000E230+39j
		mov	eax, [esp+18h+var_4]
		push	0Ah
		sub	esp, 0Ch
		mov	ecx, esp
		mov	dword ptr [ecx], 0
		mov	[ecx+4], ebx
		mov	[ecx+8], eax
		call	ds:PR_LoadLibraryWithFlags
		add	esp, 10h
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0Ch
		retn
sub_1000E230	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1000E2A0(char	*Src, int, int,	int, int)
sub_1000E2A0	proc near		; CODE XREF: sub_100015E5+53p
					; sub_10002505+60p ...

Src		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		cmp	dword_1001507C,	0
		mov	edx, [esp+Src]
		jz	short loc_1000E2B1
		test	edx, edx
		jnz	short loc_1000E2E4

loc_1000E2B1:				; CODE XREF: sub_1000E2A0+Bj
		mov	ecx, [esp+arg_4]
		test	ecx, 1FFFF8FDh
		jnz	short loc_1000E2E4
		dec	[esp+arg_C]
		jnz	short loc_1000E2E4
		mov	eax, ecx
		and	ecx, 702h
		and	eax, 0E0000000h
		push	eax
		push	[esp+4+arg_10]	; int
		push	[esp+8+arg_8]	; int
		push	ecx		; int
		push	edx		; Src
		call	sub_1000E3F0
		add	esp, 14h
		retn
; ---------------------------------------------------------------------------

loc_1000E2E4:				; CODE XREF: sub_1000E2A0+Fj
					; sub_1000E2A0+1Bj ...
		call	ds:_errno
		mov	dword ptr [eax], 16h
		xor	eax, eax
		retn
sub_1000E2A0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000E300	proc near		; CODE XREF: sub_100108B0+BAp
					; sub_10011210+20Cp ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi
		mov	esi, [esp+4+arg_0]
		push	[esp+4+arg_8]
		push	[esp+8+arg_4]
		mov	eax, [esi+10Ch]
		call	eax
		mov	ecx, [esi+2Ch]
		add	esp, 8
		and	ecx, eax
		cmp	ecx, [esi+28h]
		jbe	short loc_1000E325
		and	ecx, [esi+30h]

loc_1000E325:				; CODE XREF: sub_1000E300+20j
		mov	eax, ecx
		pop	esi
		retn
sub_1000E300	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1000E330(size_t Size)
sub_1000E330	proc near		; CODE XREF: sub_1000FFC0+EDp

Size		= dword	ptr  4

		push	ebx
		push	ebp
		push	esi
		mov	esi, [esp+0Ch+Size]
		push	edi
		inc	dword ptr [esi+28h]
		mov	edi, [esi+28h]
		mov	ebp, edi
		mov	ecx, [esi+1Ch]
		mov	ebx, edi
		and	ebp, [esi+30h]
		shr	ebx, cl
		cmp	ebx, [esi+104h]
		jl	short loc_1000E3AE
		mov	eax, [esi+14h]
		cmp	ebx, eax
		jl	short loc_1000E387
		shl	eax, 2
		lea	ecx, [eax+eax]
		push	ecx		; Size
		push	eax		; size_t
		lea	eax, [esi+1DCh]
		mov	[esp+18h+Size],	ecx
		push	eax		; int
		call	sub_1000EE40
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_1000E380

loc_1000E378:				; CODE XREF: sub_1000E330+70j
		pop	edi
		pop	esi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1000E380:				; CODE XREF: sub_1000E330+46j
		mov	eax, [esp+10h+Size]
		mov	[esi+14h], eax

loc_1000E387:				; CODE XREF: sub_1000E330+27j
		push	4		; SizeOfElements
		push	dword ptr [esi+18h] ; NumOfElements
		call	ds:calloc
		mov	ecx, [esi+1DCh]
		add	esp, 8
		mov	[ecx+ebx*4], eax
		test	eax, eax
		jz	short loc_1000E378
		inc	dword ptr [esi+108h]
		inc	dword ptr [esi+104h]

loc_1000E3AE:				; CODE XREF: sub_1000E330+20j
		mov	eax, [esi+28h]
		inc	eax
		push	eax
		call	sub_1000FF00
		mov	ecx, [esi+20h]
		add	esp, 4
		cmp	eax, ecx
		jle	short loc_1000E3CD
		mov	ecx, [esi+ecx*4+44h]
		mov	[esi+eax*4+44h], ecx
		mov	[esi+20h], eax

loc_1000E3CD:				; CODE XREF: sub_1000E330+90j
		mov	eax, [esi+2Ch]
		cmp	edi, eax
		jbe	short loc_1000E3DC
		mov	[esi+30h], eax
		or	eax, edi
		mov	[esi+2Ch], eax

loc_1000E3DC:				; CODE XREF: sub_1000E330+A2j
		push	edi		; int
		push	ebp		; int
		push	esi		; Size
		call	sub_100108B0
		add	esp, 0Ch
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
sub_1000E330	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1000E3F0(char	*Src, int, int,	int)
sub_1000E3F0	proc near		; CODE XREF: sub_1000E2A0+3Bp

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
Dst		= byte ptr -34h
var_20		= dword	ptr -20h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_4		= dword	ptr -4
Src		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 3Ch
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+3Ch+var_4], eax
		mov	eax, [esp+3Ch+arg_C]
		push	ebp
		mov	ebp, [esp+40h+arg_4]
		mov	[esp+40h+var_38], eax
		mov	eax, ebp
		and	al, 3
		push	edi
		mov	edi, [esp+44h+Src]
		cmp	al, 1
		jnz	short loc_1000E437
		call	ds:_errno
		pop	edi
		pop	ebp
		mov	dword ptr [eax], 16h
		xor	eax, eax
		mov	ecx, [esp+3Ch+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 3Ch
		retn
; ---------------------------------------------------------------------------

loc_1000E437:				; CODE XREF: sub_1000E3F0+26j
		push	esi
		push	30h		; Size
		lea	eax, [esp+4Ch+Dst]
		push	0		; Val
		push	eax		; Dst
		call	memset
		push	1E8h		; SizeOfElements
		push	1		; NumOfElements
		call	ds:calloc
		mov	esi, eax
		add	esp, 14h
		test	esi, esi
		jnz	short loc_1000E47C
		call	ds:_errno
		pop	esi
		pop	edi
		pop	ebp
		mov	dword ptr [eax], 0Ch
		xor	eax, eax
		mov	ecx, [esp+3Ch+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 3Ch
		retn
; ---------------------------------------------------------------------------

loc_1000E47C:				; CODE XREF: sub_1000E3F0+6Aj
		mov	dword ptr [esi+114h], 0FFFFFFFFh
		test	edi, edi
		jz	short loc_1000E49A
		push	edi		; Src
		call	ds:strdup
		add	esp, 4
		mov	[esi+118h], eax

loc_1000E49A:				; CODE XREF: sub_1000E3F0+98j
		mov	[esi+110h], ebp
		mov	[esp+48h+var_3C], 0
		push	ebx
		mov	ebx, ds:_errno
		test	edi, edi
		jz	short loc_1000E4E8
		test	ebp, 200h
		jnz	short loc_1000E4E8
		lea	eax, [esp+4Ch+Dst]
		push	eax
		push	edi
		call	ds:_stat64i32
		add	esp, 8
		test	eax, eax
		jz	short loc_1000E4D5
		call	ebx ; _errno
		cmp	dword ptr [eax], 2
		jz	short loc_1000E4E8

loc_1000E4D5:				; CODE XREF: sub_1000E3F0+DCj
		mov	eax, [esp+4Ch+var_14]
		or	eax, [esp+4Ch+var_10]
		jz	short loc_1000E4FF
		cmp	[esp+4Ch+var_20], 0
		jnz	short loc_1000E4FF
		jmp	short loc_1000E4F7
; ---------------------------------------------------------------------------

loc_1000E4E8:				; CODE XREF: sub_1000E3F0+C1j
					; sub_1000E3F0+C9j ...
		call	ebx ; _errno
		cmp	dword ptr [eax], 2
		jnz	short loc_1000E4F7
		call	ebx ; _errno
		mov	dword ptr [eax], 0

loc_1000E4F7:				; CODE XREF: sub_1000E3F0+F6j
					; sub_1000E3F0+FDj
		mov	[esp+4Ch+var_3C], 1

loc_1000E4FF:				; CODE XREF: sub_1000E3F0+EDj
					; sub_1000E3F0+F4j
		mov	eax, [esp+4Ch+var_20]
		mov	[esi+1E0h], eax
		test	edi, edi
		jz	short loc_1000E52D
		push	[esp+4Ch+arg_8]
		or	ebp, 8000h
		push	ebp		; int
		push	edi		; char *
		call	ds:_open
		add	esp, 0Ch
		mov	[esi+114h], eax
		cmp	eax, 0FFFFFFFFh
		jz	short loc_1000E54B

loc_1000E52D:				; CODE XREF: sub_1000E3F0+11Bj
		cmp	[esp+4Ch+var_3C], 0
		mov	ebp, [esp+4Ch+var_38]
		jz	short loc_1000E571
		push	ebp
		push	edi
		push	esi
		call	sub_1000F280
		add	esp, 0Ch
		test	eax, eax
		jnz	loc_1000E661

loc_1000E54B:				; CODE XREF: sub_1000E3F0+13Bj
					; sub_1000E3F0+1AFj ...
		call	ebx ; _errno
		push	esi		; Memory
		mov	edi, [eax]
		call	sub_1000F130
		add	esp, 4
		call	ebx ; _errno
		pop	ebx
		pop	esi
		mov	[eax], edi
		xor	eax, eax
		pop	edi
		pop	ebp
		mov	ecx, [esp+3Ch+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 3Ch
		retn
; ---------------------------------------------------------------------------

loc_1000E571:				; CODE XREF: sub_1000E3F0+146j
		test	ebp, ebp
		jz	short loc_1000E57C
		mov	eax, [ebp+10h]
		test	eax, eax
		jnz	short loc_1000E581

loc_1000E57C:				; CODE XREF: sub_1000E3F0+183j
		mov	eax, off_1001500C

loc_1000E581:				; CODE XREF: sub_1000E3F0+18Aj
		push	104h		; unsigned int
		push	esi		; void *
		push	dword ptr [esi+114h] ; int
		mov	[esi+10Ch], eax
		call	ds:_read
		add	esp, 0Ch
		cmp	eax, 0FFFFFFFFh
		jz	short loc_1000E54B
		cmp	eax, 104h
		jz	short loc_1000E5CF

loc_1000E5A8:				; CODE XREF: sub_1000E3F0+1EEj
					; sub_1000E3F0+1FBj ...
		push	esi		; Memory
		mov	edi, 16h
		call	sub_1000F130
		add	esp, 4
		call	ebx ; _errno
		pop	ebx
		pop	esi
		mov	[eax], edi
		xor	eax, eax
		pop	edi
		pop	ebp
		mov	ecx, [esp+3Ch+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 3Ch
		retn
; ---------------------------------------------------------------------------

loc_1000E5CF:				; CODE XREF: sub_1000E3F0+1B6j
		push	esi
		call	sub_1000F490
		add	esp, 4
		cmp	dword ptr [esi], 61561h
		jnz	short loc_1000E5A8
		mov	eax, [esi+4]
		cmp	eax, 2
		jz	short loc_1000E5ED
		cmp	eax, 1
		jnz	short loc_1000E5A8

loc_1000E5ED:				; CODE XREF: sub_1000E3F0+1F6j
		mov	eax, [esi+10Ch]
		push	0Ch
		push	offset aSniglet	; "%$sniglet^&"
		call	eax
		add	esp, 8
		cmp	eax, [esi+40h]
		jnz	short loc_1000E5A8
		cmp	dword ptr [esi+38h], 0
		jl	short loc_1000E5A8
		mov	eax, [esi+28h]
		add	eax, [esi+18h]
		cdq
		idiv	dword ptr [esi+18h]
		mov	dword ptr [esi+104h], 0
		push	eax
		push	esi
		call	sub_1000E730
		add	esp, 8
		test	eax, eax
		jnz	loc_1000E54B
		mov	eax, [esi+20h]
		mov	ecx, [esi+0Ch]
		mov	eax, [esi+eax*4+44h]
		lea	eax, [eax+ecx*8]
		mov	ecx, [esi+10h]
		dec	eax
		add	ecx, 3
		sar	eax, cl
		mov	[esi+1BCh], eax
		shl	eax, 2
		push	eax		; Size
		lea	eax, [esi+13Ch]
		push	0		; Val
		push	eax		; Dst
		call	memset
		add	esp, 0Ch

loc_1000E661:				; CODE XREF: sub_1000E3F0+155j
		test	ebp, ebp
		jz	short loc_1000E66F
		mov	eax, [ebp+0Ch]
		test	eax, eax
		jz	short loc_1000E66F
		push	eax
		jmp	short loc_1000E674
; ---------------------------------------------------------------------------

loc_1000E66F:				; CODE XREF: sub_1000E3F0+273j
					; sub_1000E3F0+27Aj
		push	10000h

loc_1000E674:				; CODE XREF: sub_1000E3F0+27Dj
		push	esi
		call	sub_1000FA50
		mov	eax, [esp+54h+var_3C]
		add	esp, 8
		mov	[esi+134h], eax
		test	edi, edi
		jz	short loc_1000E69B
		test	byte ptr [esi+110h], 2
		jz	short loc_1000E69B
		mov	eax, 1
		jmp	short loc_1000E69D
; ---------------------------------------------------------------------------

loc_1000E69B:				; CODE XREF: sub_1000E3F0+299j
					; sub_1000E3F0+2A2j
		xor	eax, eax

loc_1000E69D:				; CODE XREF: sub_1000E3F0+2A9j
		push	24h		; Size
		mov	[esi+138h], eax
		mov	dword ptr [esi+128h], 0FFFFFFFFh
		call	ds:malloc
		add	esp, 4
		test	eax, eax
		jnz	short loc_1000E6E1
		push	esi		; Memory
		lea	edi, [eax+0Ch]
		call	sub_1000F130
		add	esp, 4
		call	ebx ; _errno
		pop	ebx
		pop	esi
		mov	[eax], edi
		xor	eax, eax
		pop	edi
		pop	ebp
		mov	ecx, [esp+3Ch+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 3Ch
		retn
; ---------------------------------------------------------------------------

loc_1000E6E1:				; CODE XREF: sub_1000E3F0+2CAj
		mov	ecx, [esp+4Ch+var_4]
		pop	ebx
		mov	[eax+1Ch], esi
		pop	esi
		pop	edi
		pop	ebp
		xor	ecx, esp
		mov	dword ptr [eax+4], offset loc_1000EC30
		mov	dword ptr [eax+8], offset loc_1000EC60
		mov	dword ptr [eax+20h], offset loc_1000ED00
		mov	dword ptr [eax+0Ch], offset loc_1000ED30
		mov	dword ptr [eax+10h], offset loc_1000EDA0
		mov	dword ptr [eax+14h], offset loc_1000EE90
		mov	dword ptr [eax+18h], offset loc_1000F0A0
		mov	dword ptr [eax], 1
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 3Ch
		retn
sub_1000E3F0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000E730	proc near		; CODE XREF: sub_1000E3F0+230p
					; sub_1000F3E0+9Ap

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebx
		mov	ebx, ds:calloc
		push	esi
		mov	esi, [esp+8+arg_0]
		push	4		; SizeOfElements
		push	dword ptr [esi+14h] ; NumOfElements
		call	ebx ; calloc
		add	esp, 8
		mov	[esi+1DCh], eax
		test	eax, eax
		jnz	short loc_1000E762
		call	ds:_errno
		pop	esi
		pop	ebx
		mov	dword ptr [eax], 0Ch
		or	eax, 0FFFFFFFFh
		retn
; ---------------------------------------------------------------------------

loc_1000E762:				; CODE XREF: sub_1000E730+1Ej
		mov	ecx, [esi+1Ch]
		push	edi
		mov	edi, [esp+0Ch+arg_4]
		mov	eax, edi
		shl	eax, cl
		push	4		; SizeOfElements
		push	eax		; NumOfElements
		call	ebx ; calloc
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		jnz	short loc_1000E78F
		call	ds:_errno
		pop	edi
		pop	esi
		pop	ebx
		mov	dword ptr [eax], 0Ch
		or	eax, 0FFFFFFFFh
		retn
; ---------------------------------------------------------------------------

loc_1000E78F:				; CODE XREF: sub_1000E730+4Aj
		xor	edx, edx
		test	edi, edi
		jle	short loc_1000E7B3

loc_1000E795:				; CODE XREF: sub_1000E730+81j
		mov	ecx, [esi+1Ch]
		mov	eax, edx
		shl	eax, cl
		lea	ecx, [ebx+eax*4]
		mov	eax, [esi+1DCh]
		mov	[eax+edx*4], ecx
		inc	edx
		inc	dword ptr [esi+104h]
		cmp	edx, edi
		jl	short loc_1000E795

loc_1000E7B3:				; CODE XREF: sub_1000E730+63j
		pop	edi
		pop	esi
		xor	eax, eax
		pop	ebx
		retn
sub_1000E730	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000E7C0	proc near		; CODE XREF: .text:1000F0E2p
					; sub_1000F130+8Dp

var_108		= byte ptr -108h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		sub	esp, 108h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+108h+var_4], eax
		push	ebx
		mov	ebx, [esp+10Ch+arg_0]
		cmp	dword ptr [ebx+138h], 0
		jnz	short loc_1000E7FD
		xor	eax, eax
		pop	ebx
		mov	ecx, [esp+108h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 108h
		retn
; ---------------------------------------------------------------------------

loc_1000E7FD:				; CODE XREF: sub_1000E7C0+23j
		mov	eax, [ebx+10Ch]
		push	esi
		push	0Ch
		push	offset aSniglet	; "%$sniglet^&"
		mov	dword ptr [ebx], 61561h
		mov	dword ptr [ebx+4], 2
		call	eax
		mov	esi, [ebx+114h]
		mov	[ebx+40h], eax
		lea	eax, [esp+118h+var_108]
		push	eax
		push	ebx
		call	sub_1000F6E0
		push	0		; int
		push	0		; __int32
		push	esi		; int
		call	ds:_lseek
		add	esp, 1Ch
		cmp	eax, 0FFFFFFFFh
		jz	short loc_1000E879
		push	104h		; unsigned int
		lea	eax, [esp+114h+var_108]
		push	eax		; void *
		push	esi		; int
		call	ds:_write
		add	esp, 0Ch
		cmp	eax, 0FFFFFFFFh
		jz	short loc_1000E879
		cmp	eax, 104h
		jz	short loc_1000E893
		mov	esi, ds:_errno
		call	esi ; _errno
		mov	dword ptr [eax], 16h
		call	esi ; _errno
		mov	eax, [eax]
		mov	[ebx+130h], eax

loc_1000E879:				; CODE XREF: sub_1000E7C0+7Fj
					; sub_1000E7C0+98j
		pop	esi
		or	eax, 0FFFFFFFFh
		pop	ebx
		mov	ecx, [esp+108h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 108h
		retn
; ---------------------------------------------------------------------------

loc_1000E893:				; CODE XREF: sub_1000E7C0+9Fj
		push	ebp
		push	edi
		xor	esi, esi
		lea	edi, [ebx+13Ch]
		lea	ebp, [ebx+0C4h]

loc_1000E8A3:				; CODE XREF: sub_1000E7C0+10Aj
		mov	ecx, [edi]
		test	ecx, ecx
		jz	short loc_1000E8C0
		movzx	eax, word ptr [ebp+0]
		push	1		; int
		push	0		; int
		push	eax		; int
		push	ecx		; void *
		push	ebx		; int
		call	sub_100105C0
		add	esp, 14h
		test	eax, eax
		jnz	short loc_1000E8E7

loc_1000E8C0:				; CODE XREF: sub_1000E7C0+E7j
		inc	esi
		add	ebp, 2
		add	edi, 4
		cmp	esi, 20h
		jl	short loc_1000E8A3
		xor	eax, eax

loc_1000E8CE:				; CODE XREF: sub_1000E7C0+12Aj
		mov	ecx, [esp+118h+var_4]
		pop	edi
		pop	ebp
		pop	esi
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 108h
		retn
; ---------------------------------------------------------------------------

loc_1000E8E7:				; CODE XREF: sub_1000E7C0+FEj
		or	eax, 0FFFFFFFFh
		jmp	short loc_1000E8CE
sub_1000E7C0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1000E8F0(size_t Size,	int, void *, int)
sub_1000E8F0	proc near		; CODE XREF: .text:1000ECC4p
					; .text:1000ED6Bp ...

var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
Size		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 20h
		mov	ecx, [esp+20h+arg_8]
		push	esi
		push	edi
		mov	edi, [esp+28h+Size]
		mov	[esp+28h+var_8], 0
		mov	[esp+28h+var_C], 0FFFFFFFFh
		mov	eax, [edi+0Ch]
		mov	[esp+28h+var_1C], eax
		mov	eax, [ecx+4]
		mov	ecx, [ecx]
		push	eax
		mov	[esp+2Ch+var_18], eax
		mov	eax, [edi+10Ch]
		push	ecx
		mov	[esp+30h+var_4], ecx
		call	eax
		mov	ecx, [edi+2Ch]
		add	esp, 8
		and	ecx, eax
		cmp	ecx, [edi+28h]
		jbe	short loc_1000E93B
		and	ecx, [edi+30h]

loc_1000E93B:				; CODE XREF: sub_1000E8F0+46j
		push	0
		push	0
		push	ecx
		push	edi
		call	sub_1000FA80
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		jnz	short loc_1000E95A
		pop	edi
		mov	eax, 0FFFFFC19h
		pop	esi
		add	esp, 20h
		retn
; ---------------------------------------------------------------------------

loc_1000E95A:				; CODE XREF: sub_1000E8F0+5Dj
		or	byte ptr [esi+15h], 8
		lea	ecx, [esi+15h]
		push	ebx
		mov	ebx, [esi+10h]
		push	ebp
		mov	ebp, 1
		mov	[esp+30h+var_20], ecx
		movzx	edx, word ptr [ebx]
		add	ebx, 2
		mov	[esp+30h+var_14], edx
		cmp	edx, ebp
		jle	loc_1000EAFD

loc_1000E981:				; CODE XREF: sub_1000E8F0+1E5j
		movzx	eax, word ptr [ebx+2]
		cmp	eax, 4
		jb	loc_1000EA1E
		movzx	edx, word ptr [ebx]
		mov	eax, [esp+30h+var_1C]
		sub	eax, edx
		cmp	[esp+30h+var_18], eax
		jnz	short loc_1000EA0B
		mov	ecx, [esi+10h]
		mov	edi, [esp+30h+var_18]
		add	ecx, edx
		mov	edx, [esp+30h+var_4]
		sub	edi, 4
		jb	short loc_1000E9C1
		nop

loc_1000E9B0:				; CODE XREF: sub_1000E8F0+CFj
		mov	eax, [edx]
		cmp	eax, [ecx]
		jnz	short loc_1000E9CA
		add	edx, 4
		add	ecx, 4
		sub	edi, 4
		jnb	short loc_1000E9B0

loc_1000E9C1:				; CODE XREF: sub_1000E8F0+BDj
		cmp	edi, 0FFFFFFFCh
		jz	loc_1000EADD

loc_1000E9CA:				; CODE XREF: sub_1000E8F0+C4j
		mov	al, [edx]
		cmp	al, [ecx]
		jnz	short loc_1000EA07
		cmp	edi, 0FFFFFFFDh
		jz	loc_1000EADD
		mov	al, [edx+1]
		cmp	al, [ecx+1]
		jnz	short loc_1000EA07
		cmp	edi, 0FFFFFFFEh
		jz	loc_1000EADD
		mov	al, [edx+2]
		cmp	al, [ecx+2]
		jnz	short loc_1000EA07
		cmp	edi, 0FFFFFFFFh
		jz	loc_1000EADD
		mov	al, [edx+3]
		cmp	al, [ecx+3]
		jz	loc_1000EADD

loc_1000EA07:				; CODE XREF: sub_1000E8F0+DEj
					; sub_1000E8F0+EFj ...
		mov	edi, [esp+30h+Size]

loc_1000EA0B:				; CODE XREF: sub_1000E8F0+ABj
		movzx	eax, word ptr [ebx+2]
		add	ebx, 4
		mov	edx, [esp+30h+var_14]
		add	ebp, 2
		jmp	loc_1000EACF
; ---------------------------------------------------------------------------

loc_1000EA1E:				; CODE XREF: sub_1000E8F0+98j
		test	ax, ax
		jnz	short loc_1000EA64
		movzx	eax, word ptr [ebx]
		cmp	[esp+30h+var_C], eax
		jz	short loc_1000EA57
		push	0
		push	esi
		push	eax
		push	edi
		mov	[esp+40h+var_C], eax
		call	sub_1000FA80
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		jz	loc_1000EBC8
		mov	eax, [esp+30h+var_8]
		inc	eax
		mov	[esp+30h+var_8], eax
		cmp	eax, 7D0h
		jbe	short loc_1000EABA

loc_1000EA57:				; CODE XREF: sub_1000E8F0+13Aj
		pop	ebp
		pop	ebx
		pop	edi
		mov	eax, 0FFFFFC19h
		pop	esi
		add	esp, 20h
		retn
; ---------------------------------------------------------------------------

loc_1000EA64:				; CODE XREF: sub_1000E8F0+131j
		push	[esp+30h+var_18]
		push	[esp+34h+var_4]
		push	ebp
		push	esi
		push	edi
		call	sub_10011CA0
		mov	ebp, eax
		add	esp, 14h
		test	ebp, ebp
		jg	short loc_1000EAE1
		cmp	ebp, 0FFFFFFFEh
		jnz	loc_1000EBC8
		lea	eax, [esp+30h+var_10]
		mov	[esp+30h+var_10], esi
		push	eax
		push	edi
		call	sub_10011E20
		movzx	eax, ax
		add	esp, 8
		test	ax, ax
		jz	short loc_1000EAF5
		push	0
		push	[esp+34h+var_10]
		push	eax
		push	edi
		call	sub_1000FA80
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		jz	loc_1000EBC8

loc_1000EABA:				; CODE XREF: sub_1000E8F0+165j
		mov	ebx, [esi+10h]
		mov	ebp, 1
		mov	eax, [edi+0Ch]
		movzx	edx, word ptr [ebx]
		add	ebx, 2
		mov	[esp+30h+var_14], edx

loc_1000EACF:				; CODE XREF: sub_1000E8F0+129j
		mov	[esp+30h+var_1C], eax
		cmp	ebp, edx
		jl	loc_1000E981
		jmp	short loc_1000EAF9
; ---------------------------------------------------------------------------

loc_1000EADD:				; CODE XREF: sub_1000E8F0+D4j
					; sub_1000E8F0+E3j ...
		mov	edi, [esp+30h+Size]

loc_1000EAE1:				; CODE XREF: sub_1000E8F0+18Bj
		mov	eax, [esp+30h+arg_4]
		cmp	eax, 3		; switch 4 cases
		ja	loc_1000EBFE	; jumptable 1000EAEE default case
		jmp	ds:off_1000EC14[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_1000EAF5:				; CODE XREF: sub_1000E8F0+1AEj
		mov	esi, [esp+30h+var_10]

loc_1000EAF9:				; CODE XREF: sub_1000E8F0+1EBj
		mov	ecx, [esp+30h+var_20]

loc_1000EAFD:				; CODE XREF: sub_1000E8F0+8Bj
		mov	eax, [esp+30h+arg_4]
		dec	eax
		cmp	eax, 1
		ja	loc_1000EC04
		push	[esp+30h+arg_C]	; int
		push	[esp+34h+arg_8]	; void *
		push	esi		; int
		push	edi		; Size
		call	sub_1000FFC0
		add	esp, 10h
		test	eax, eax
		mov	eax, [esp+30h+var_20]
		jz	loc_1000EBF1
		and	byte ptr [eax],	0F7h

loc_1000EB2C:				; CODE XREF: sub_1000E8F0+2F7j
		pop	ebp
		pop	ebx
		pop	edi
		or	eax, 0FFFFFFFFh
		pop	esi
		add	esp, 20h
		retn
; ---------------------------------------------------------------------------

loc_1000EB37:				; CODE XREF: sub_1000E8F0+1FEj
					; DATA XREF: .text:off_1000EC14o
		mov	eax, [esp+30h+var_20] ;	jumptable 1000EAEE case	2
		pop	ebp
		pop	ebx
		pop	edi
		and	byte ptr [eax],	0F7h
		mov	eax, 1
		pop	esi
		add	esp, 20h
		retn
; ---------------------------------------------------------------------------

loc_1000EB4B:				; CODE XREF: sub_1000E8F0+1FEj
					; DATA XREF: .text:off_1000EC14o
		mov	ecx, [esi+10h]	; jumptable 1000EAEE case 0
		movzx	eax, word ptr [ecx+ebp*2+2]
		cmp	eax, 4
		jnb	short loc_1000EB7C
		push	0
		push	[esp+34h+arg_C]
		push	ebp
		push	esi
		push	edi
		call	sub_10011920
		add	esp, 14h
		test	eax, eax
		jz	loc_1000EBED
		pop	ebp
		pop	ebx
		pop	edi
		or	eax, 0FFFFFFFFh
		pop	esi
		add	esp, 20h
		retn
; ---------------------------------------------------------------------------

loc_1000EB7C:				; CODE XREF: sub_1000E8F0+266j
		mov	edx, [esp+30h+arg_C]
		add	eax, ecx
		mov	[edx], eax
		movzx	eax, word ptr [ecx+ebp*2+2]
		movzx	ecx, word ptr [ecx+ebp*2]
		sub	ecx, eax
		mov	eax, [esp+30h+var_20]
		pop	ebp
		pop	ebx
		mov	[edx+4], ecx
		and	byte ptr [eax],	0F7h
		xor	eax, eax
		pop	edi
		pop	esi
		add	esp, 20h
		retn
; ---------------------------------------------------------------------------

loc_1000EBA3:				; CODE XREF: sub_1000E8F0+1FEj
					; DATA XREF: .text:off_1000EC14o
		push	ebp		; jumptable 1000EAEE case 1
		push	esi
		push	edi
		call	sub_10010130
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_1000EBC8
		push	[esp+30h+arg_C]	; int
		push	[esp+34h+arg_8]	; void *
		push	esi		; int
		push	edi		; Size
		call	sub_1000FFC0
		add	esp, 10h
		test	eax, eax
		jz	short loc_1000EBED

loc_1000EBC8:				; CODE XREF: sub_1000E8F0+151j
					; sub_1000E8F0+190j ...
		mov	eax, [esp+30h+var_20]
		pop	ebp
		pop	ebx
		pop	edi
		and	byte ptr [eax],	0F7h
		or	eax, 0FFFFFFFFh
		pop	esi
		add	esp, 20h
		retn
; ---------------------------------------------------------------------------

loc_1000EBDA:				; CODE XREF: sub_1000E8F0+1FEj
					; DATA XREF: .text:off_1000EC14o
		push	ebp		; jumptable 1000EAEE case 3
		push	esi
		push	edi
		call	sub_10010130
		add	esp, 0Ch
		test	eax, eax
		jnz	loc_1000EB2C

loc_1000EBED:				; CODE XREF: sub_1000E8F0+27Bj
					; sub_1000E8F0+2D6j
		mov	eax, [esp+30h+var_20]

loc_1000EBF1:				; CODE XREF: sub_1000E8F0+233j
		and	byte ptr [eax],	0F7h
		xor	eax, eax
		pop	ebp
		pop	ebx
		pop	edi
		pop	esi
		add	esp, 20h
		retn
; ---------------------------------------------------------------------------

loc_1000EBFE:				; CODE XREF: sub_1000E8F0+1F8j
		call	ds:abort	; jumptable 1000EAEE default case
; ---------------------------------------------------------------------------

loc_1000EC04:				; CODE XREF: sub_1000E8F0+215j
		and	byte ptr [ecx],	0F7h
		mov	eax, 1
		pop	ebp
		pop	ebx
		pop	edi
		pop	esi
		add	esp, 20h
		retn
sub_1000E8F0	endp

; ---------------------------------------------------------------------------
off_1000EC14	dd offset loc_1000EB4B	; DATA XREF: sub_1000E8F0+1FEr
		dd offset loc_1000EBA3	; jump table for switch	statement
		dd offset loc_1000EB37
		dd offset loc_1000EBDA
		align 10h

loc_1000EC30:				; DATA XREF: sub_1000E3F0+2FEo
		push	edi
		mov	edi, [esp+8]
		test	edi, edi
		jnz	short loc_1000EC3E

loc_1000EC39:				; CODE XREF: .text:1000EC43j
		or	eax, 0FFFFFFFFh
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_1000EC3E:				; CODE XREF: .text:1000EC37j
		mov	eax, [edi+1Ch]
		test	eax, eax
		jz	short loc_1000EC39
		push	esi
		push	eax
		call	sub_1000F130
		push	edi
		mov	esi, eax
		call	ds:free
		add	esp, 8
		mov	eax, esi
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_1000EC60:				; DATA XREF: sub_1000E3F0+305o
		push	esi
		push	edi
		mov	edi, [esp+0Ch]
		mov	esi, [edi+1Ch]
		test	esi, esi
		jz	short loc_1000EC90
		mov	eax, [esp+14h]
		test	eax, eax
		jz	short loc_1000EC96
		cmp	eax, 1
		jz	short loc_1000EC96
		call	ds:_errno
		mov	dword ptr [eax], 16h
		mov	dword ptr [esi+130h], 16h

loc_1000EC90:				; CODE XREF: .text:1000EC6Bj
		pop	edi
		or	eax, 0FFFFFFFFh
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1000EC96:				; CODE XREF: .text:1000EC73j
					; .text:1000EC78j
		test	byte ptr [esi+110h], 3
		jnz	short loc_1000ECBB
		call	ds:_errno
		pop	edi
		mov	dword ptr [eax], 1
		or	eax, 0FFFFFFFFh
		mov	dword ptr [esi+130h], 1
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1000ECBB:				; CODE XREF: .text:1000EC9Dj
		push	0
		push	dword ptr [esp+14h]
		push	3
		push	esi
		call	sub_1000E8F0
		mov	esi, eax
		add	esp, 10h
		cmp	esi, 0FFFFFC19h
		jnz	short loc_1000ECED
		mov	ecx, [edi+1Ch]
		test	ecx, ecx
		jz	short loc_1000ECED
		push	ecx
		call	sub_1000F130
		add	esp, 4
		mov	dword ptr [edi+1Ch], 0

loc_1000ECED:				; CODE XREF: .text:1000ECD4j
					; .text:1000ECDBj
		pop	edi
		mov	eax, esi
		pop	esi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_1000ED00:				; DATA XREF: sub_1000E3F0+30Co
		mov	eax, [esp+4]
		test	eax, eax
		jz	short loc_1000ED26
		mov	eax, [eax+1Ch]
		test	eax, eax
		jz	short loc_1000ED26
		mov	eax, [eax+114h]
		cmp	eax, 0FFFFFFFFh
		jnz	short locret_1000ED29
		call	ds:_errno
		mov	dword ptr [eax], 2

loc_1000ED26:				; CODE XREF: .text:1000ED06j
					; .text:1000ED0Dj
		or	eax, 0FFFFFFFFh

locret_1000ED29:			; CODE XREF: .text:1000ED18j
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_1000ED30:				; DATA XREF: sub_1000E3F0+313o
		push	esi
		mov	esi, [esp+8]
		push	edi
		mov	edi, [esi+1Ch]
		test	edi, edi
		jz	short loc_1000ED5A
		cmp	dword ptr [esp+18h], 0
		jz	short loc_1000ED60
		call	ds:_errno
		mov	dword ptr [eax], 16h
		mov	dword ptr [edi+130h], 16h

loc_1000ED5A:				; CODE XREF: .text:1000ED3Bj
		pop	edi
		or	eax, 0FFFFFFFFh
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1000ED60:				; CODE XREF: .text:1000ED42j
		push	dword ptr [esp+14h]
		push	dword ptr [esp+14h]
		push	0
		push	edi
		call	sub_1000E8F0
		mov	edi, eax
		add	esp, 10h
		cmp	edi, 0FFFFFC19h
		jnz	short loc_1000ED94
		mov	ecx, [esi+1Ch]
		test	ecx, ecx
		jz	short loc_1000ED94
		push	ecx
		call	sub_1000F130
		add	esp, 4
		mov	dword ptr [esi+1Ch], 0

loc_1000ED94:				; CODE XREF: .text:1000ED7Bj
					; .text:1000ED82j
		mov	eax, edi
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_1000EDA0:				; DATA XREF: sub_1000E3F0+31Ao
		push	esi
		push	edi
		mov	edi, [esp+0Ch]
		mov	esi, [edi+1Ch]
		test	esi, esi
		jz	short loc_1000EDD0
		mov	ecx, [esp+18h]
		test	ecx, ecx
		jz	short loc_1000EDD6
		cmp	ecx, 8
		jz	short loc_1000EDD6
		call	ds:_errno
		mov	dword ptr [eax], 16h
		mov	dword ptr [esi+130h], 16h

loc_1000EDD0:				; CODE XREF: .text:1000EDABj
		pop	edi
		or	eax, 0FFFFFFFFh
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1000EDD6:				; CODE XREF: .text:1000EDB3j
					; .text:1000EDB8j
		test	byte ptr [esi+110h], 3
		jnz	short loc_1000EDFB
		call	ds:_errno
		pop	edi
		mov	dword ptr [eax], 1
		or	eax, 0FFFFFFFFh
		mov	dword ptr [esi+130h], 1
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1000EDFB:				; CODE XREF: .text:1000EDDDj
		push	dword ptr [esp+14h]
		xor	eax, eax
		cmp	ecx, 8
		push	dword ptr [esp+14h]
		setz	al
		inc	eax
		push	eax
		push	esi
		call	sub_1000E8F0
		mov	esi, eax
		add	esp, 10h
		cmp	esi, 0FFFFFC19h
		jnz	short loc_1000EE37
		mov	ecx, [edi+1Ch]
		test	ecx, ecx
		jz	short loc_1000EE37
		push	ecx
		call	sub_1000F130
		add	esp, 4
		mov	dword ptr [edi+1Ch], 0

loc_1000EE37:				; CODE XREF: .text:1000EE1Ej
					; .text:1000EE25j
		pop	edi
		mov	eax, esi
		pop	esi
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1000EE40(int,	size_t,	size_t Size)
sub_1000EE40	proc near		; CODE XREF: sub_1000E330+3Cp

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
Size		= dword	ptr  0Ch

		push	ebx
		push	ebp
		mov	ebp, [esp+8+Size]
		push	ebp		; Size
		call	ds:malloc
		mov	ebx, eax
		add	esp, 4
		test	ebx, ebx
		jz	short loc_1000EE89
		push	esi
		mov	esi, [esp+0Ch+arg_4]
		push	edi
		mov	edi, [esp+10h+arg_0]
		push	esi		; Size
		push	dword ptr [edi]	; Src
		push	ebx		; Dst
		call	ds:memmove
		sub	ebp, esi
		lea	eax, [ebx+esi]
		push	ebp		; Size
		push	0		; Val
		push	eax		; Dst
		call	memset
		push	dword ptr [edi]	; Memory
		call	ds:free
		add	esp, 1Ch
		mov	[edi], ebx
		mov	eax, ebx
		pop	edi
		pop	esi

loc_1000EE89:				; CODE XREF: sub_1000EE40+14j
		pop	ebp
		pop	ebx
		retn
sub_1000EE40	endp

; ---------------------------------------------------------------------------
		align 10h

loc_1000EE90:				; DATA XREF: sub_1000E3F0+321o
		push	esi
		mov	esi, [esp+8]
		xor	ecx, ecx
		mov	esi, [esi+1Ch]
		test	esi, esi
		jz	short loc_1000EEC6
		mov	eax, [esp+14h]
		test	eax, eax
		jz	short loc_1000EECB
		cmp	eax, 3
		jz	short loc_1000EECB
		cmp	eax, 7
		jz	short loc_1000EECB
		call	ds:_errno
		mov	dword ptr [eax], 16h
		mov	dword ptr [esi+130h], 16h

loc_1000EEC6:				; CODE XREF: .text:1000EE9Cj
		or	eax, 0FFFFFFFFh
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1000EECB:				; CODE XREF: .text:1000EEA4j
					; .text:1000EEA9j ...
		cmp	[esi+128h], ecx
		jl	short loc_1000EED8
		cmp	eax, 3
		jnz	short loc_1000EEEE

loc_1000EED8:				; CODE XREF: .text:1000EED1j
		mov	[esi+128h], ecx
		mov	dword ptr [esi+12Ch], 1
		mov	[esi+124h], ecx

loc_1000EEEE:				; CODE XREF: .text:1000EED6j
		push	edi
		xor	edi, edi
		push	ebx

loc_1000EEF2:				; CODE XREF: .text:1000EFBFj
					; .text:1000EFD5j
		test	edi, edi
		jz	short loc_1000EF00
		cmp	word ptr [edi],	0
		jnz	loc_1000EFDA

loc_1000EF00:				; CODE XREF: .text:1000EEF4j
		mov	ecx, [esi+124h]
		test	ecx, ecx
		jnz	short loc_1000EF6A
		mov	ebx, [esi+128h]
		cmp	ebx, [esi+28h]
		ja	short loc_1000EF4C

loc_1000EF15:				; CODE XREF: .text:1000EF4Aj
		push	0
		push	0
		push	ebx
		push	esi
		call	sub_1000FA80
		mov	ecx, eax
		add	esp, 10h
		test	ecx, ecx
		jz	loc_1000F094
		mov	[esi+124h], ecx
		mov	edi, [ecx+10h]
		cmp	word ptr [edi],	0
		jnz	short loc_1000EF4C
		inc	ebx
		mov	dword ptr [esi+12Ch], 1
		cmp	ebx, [esi+28h]
		jbe	short loc_1000EF15

loc_1000EF4C:				; CODE XREF: .text:1000EF13j
					; .text:1000EF3Aj
		mov	[esi+128h], ebx
		cmp	ebx, [esi+28h]
		jle	short loc_1000EF6D
		pop	ebx
		pop	edi
		mov	dword ptr [esi+128h], 0FFFFFFFFh
		mov	eax, 1
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1000EF6A:				; CODE XREF: .text:1000EF08j
		mov	edi, [ecx+10h]

loc_1000EF6D:				; CODE XREF: .text:1000EF55j
		mov	eax, [esi+12Ch]
		cmp	word ptr [edi+eax*2+2],	0
		jnz	short loc_1000EFBB
		jmp	short loc_1000EF80
; ---------------------------------------------------------------------------
		align 10h

loc_1000EF80:				; CODE XREF: .text:1000EF7Bj
					; .text:1000EFB9j
		mov	eax, [esi+12Ch]
		push	0
		push	ecx
		movzx	eax, word ptr [edi+eax*2]
		push	eax
		push	esi
		call	sub_1000FA80
		mov	ecx, eax
		add	esp, 10h
		mov	[esi+124h], ecx
		test	ecx, ecx
		jz	loc_1000F094
		mov	edi, [ecx+10h]
		mov	dword ptr [esi+12Ch], 1
		cmp	word ptr [edi+4], 0
		jz	short loc_1000EF80

loc_1000EFBB:				; CODE XREF: .text:1000EF79j
		cmp	word ptr [edi],	0
		jnz	loc_1000EEF2
		inc	dword ptr [esi+128h]
		mov	dword ptr [esi+124h], 0
		jmp	loc_1000EEF2
; ---------------------------------------------------------------------------

loc_1000EFDA:				; CODE XREF: .text:1000EEFAj
		movzx	ebx, word ptr [esi+12Ch]
		cmp	word ptr [edi+ebx*2+2],	4
		push	ebp
		lea	ebp, [edi+ebx*2]
		jnb	short loc_1000F011
		push	1
		push	dword ptr [esp+20h]
		push	dword ptr [esp+20h]
		push	ecx
		push	esi
		call	sub_100118E0
		add	esp, 14h
		test	eax, eax
		jz	loc_1000F08D
		pop	ebp
		pop	ebx
		pop	edi
		or	eax, 0FFFFFFFFh
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1000F011:				; CODE XREF: .text:1000EFEBj
		mov	eax, [esi+124h]
		movzx	ecx, word ptr [ebp+0]
		mov	edx, [esp+18h]
		add	ecx, [eax+10h]
		mov	[edx], ecx
		cmp	ebx, 1
		jbe	short loc_1000F02F
		movzx	ecx, word ptr [ebp-2]
		jmp	short loc_1000F032
; ---------------------------------------------------------------------------

loc_1000F02F:				; CODE XREF: .text:1000F027j
		mov	ecx, [esi+0Ch]

loc_1000F032:				; CODE XREF: .text:1000F02Dj
		movzx	eax, word ptr [ebp+0]
		add	ebx, 2
		sub	ecx, eax
		mov	[edx+4], ecx
		mov	eax, [esi+124h]
		movzx	ecx, word ptr [ebp+2]
		mov	edx, [esp+1Ch]
		add	ecx, [eax+10h]
		mov	[edx], ecx
		movzx	eax, word ptr [ebp+2]
		movzx	ecx, word ptr [ebp+0]
		sub	ecx, eax
		mov	[edx+4], ecx
		cmp	bx, [edi]
		jbe	short loc_1000F084
		inc	dword ptr [esi+128h]
		xor	eax, eax
		pop	ebp
		pop	ebx
		pop	edi
		mov	dword ptr [esi+124h], 0
		mov	dword ptr [esi+12Ch], 1
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1000F084:				; CODE XREF: .text:1000F061j
		movzx	eax, bx
		mov	[esi+12Ch], eax

loc_1000F08D:				; CODE XREF: .text:1000F003j
		pop	ebp
		pop	ebx
		pop	edi
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1000F094:				; CODE XREF: .text:1000EF27j
					; .text:1000EFA1j
		pop	ebx
		pop	edi
		or	eax, 0FFFFFFFFh
		pop	esi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_1000F0A0:				; DATA XREF: sub_1000E3F0+328o
		cmp	dword ptr [esp+8], 0
		jz	short loc_1000F0B7
		call	ds:_errno
		mov	dword ptr [eax], 16h
		or	eax, 0FFFFFFFFh
		retn
; ---------------------------------------------------------------------------

loc_1000F0B7:				; CODE XREF: .text:1000F0A5j
		push	esi
		mov	esi, [esp+8]
		test	esi, esi
		jz	short loc_1000F128
		mov	esi, [esi+1Ch]
		test	esi, esi
		jz	short loc_1000F128
		cmp	dword ptr [esi+138h], 0
		jz	short loc_1000F124
		push	1
		push	0
		push	esi
		call	sub_1000F970
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_1000F128
		push	esi
		call	sub_1000E7C0
		add	esp, 4
		test	eax, eax
		jnz	short loc_1000F128
		cmp	[esi+1E5h], al
		jz	short loc_1000F11A
		cmp	[esi+118h], eax
		jz	short loc_1000F11A
		cmp	[esi+1E4h], al
		jnz	short loc_1000F11A
		push	esi
		call	sub_1000F920
		add	esp, 4
		mov	byte ptr [esi+1E5h], 0
		test	eax, eax
		jnz	short loc_1000F12B

loc_1000F11A:				; CODE XREF: .text:1000F0F4j
					; .text:1000F0FCj ...
		mov	dword ptr [esi+134h], 0

loc_1000F124:				; CODE XREF: .text:1000F0CEj
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1000F128:				; CODE XREF: .text:1000F0BEj
					; .text:1000F0C5j ...
		or	eax, 0FFFFFFFFh

loc_1000F12B:				; CODE XREF: .text:1000F118j
		pop	esi
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1000F130(void	*Memory)
sub_1000F130	proc near		; CODE XREF: sub_1000E3F0+160p
					; sub_1000E3F0+1BEp ...

var_4		= dword	ptr -4
Memory		= dword	ptr  4

		push	ecx
		push	ebx
		push	esi
		mov	esi, [esp+0Ch+Memory]
		xor	ebx, ebx
		push	edi
		mov	[esp+10h+var_4], ebx
		push	dword ptr [esi+138h]
		push	1
		push	esi
		call	sub_1000F970
		mov	edi, ds:_errno
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_1000F161
		call	edi ; _errno
		mov	ebx, [eax]
		mov	[esp+10h+var_4], ebx

loc_1000F161:				; CODE XREF: sub_1000F130+27j
		mov	eax, [esi+1DCh]
		push	ebp
		mov	ebp, ds:free
		test	eax, eax
		jz	short loc_1000F1BC
		push	dword ptr [eax]	; Memory
		call	ebp ; free
		add	esp, 4
		cmp	dword ptr [esi+108h], 0
		jz	short loc_1000F1AB

loc_1000F182:				; CODE XREF: sub_1000F130+79j
		dec	dword ptr [esi+104h]
		mov	ecx, [esi+104h]
		mov	eax, [esi+1DCh]
		dec	dword ptr [esi+108h]
		push	dword ptr [eax+ecx*4] ;	Memory
		call	ebp ; free
		add	esp, 4
		cmp	dword ptr [esi+108h], 0
		jnz	short loc_1000F182

loc_1000F1AB:				; CODE XREF: sub_1000F130+50j
		push	dword ptr [esi+1DCh] ; Memory
		dec	dword ptr [esi+108h]
		call	ebp ; free
		add	esp, 4

loc_1000F1BC:				; CODE XREF: sub_1000F130+40j
		push	esi
		call	sub_1000E7C0
		add	esp, 4
		test	eax, eax
		jz	short loc_1000F1D5
		test	ebx, ebx
		jnz	short loc_1000F1D5
		call	edi ; _errno
		mov	ebx, [eax]
		mov	[esp+14h+var_4], ebx

loc_1000F1D5:				; CODE XREF: sub_1000F130+97j
					; sub_1000F130+9Bj
		xor	edi, edi
		cmp	[esi+1BCh], edi
		jle	short loc_1000F201
		lea	ebx, [esi+13Ch]

loc_1000F1E5:				; CODE XREF: sub_1000F130+CBj
		mov	eax, [ebx]
		test	eax, eax
		jz	short loc_1000F1F1
		push	eax		; Memory
		call	ebp ; free
		add	esp, 4

loc_1000F1F1:				; CODE XREF: sub_1000F130+B9j
		inc	edi
		add	ebx, 4
		cmp	edi, [esi+1BCh]
		jl	short loc_1000F1E5
		mov	ebx, [esp+14h+var_4]

loc_1000F201:				; CODE XREF: sub_1000F130+ADj
		mov	eax, [esi+114h]
		cmp	eax, 0FFFFFFFFh
		jz	short loc_1000F216
		push	eax		; int
		call	ds:_close
		add	esp, 4

loc_1000F216:				; CODE XREF: sub_1000F130+DAj
		mov	eax, [esi+118h]
		test	eax, eax
		jz	short loc_1000F23E
		cmp	byte ptr [esi+1E4h], 0
		jz	short loc_1000F233
		push	eax		; Filename
		call	ds:_unlink
		add	esp, 4

loc_1000F233:				; CODE XREF: sub_1000F130+F7j
		push	dword ptr [esi+118h] ; Memory
		call	ebp ; free
		add	esp, 4

loc_1000F23E:				; CODE XREF: sub_1000F130+EEj
		mov	eax, [esi+11Ch]
		test	eax, eax
		jz	short loc_1000F24E
		push	eax		; Memory
		call	ebp ; free
		add	esp, 4

loc_1000F24E:				; CODE XREF: sub_1000F130+116j
		mov	eax, [esi+120h]
		test	eax, eax
		jz	short loc_1000F25E
		push	eax		; Memory
		call	ebp ; free
		add	esp, 4

loc_1000F25E:				; CODE XREF: sub_1000F130+126j
		push	esi		; Memory
		call	ebp ; free
		add	esp, 4
		pop	ebp
		test	ebx, ebx
		jz	short loc_1000F279
		call	ds:_errno
		pop	edi
		pop	esi
		mov	[eax], ebx
		or	eax, 0FFFFFFFFh
		pop	ebx
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_1000F279:				; CODE XREF: sub_1000F130+137j
		pop	edi
		pop	esi
		xor	eax, eax
		pop	ebx
		pop	ecx
		retn
sub_1000F130	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000F280	proc near		; CODE XREF: sub_1000E3F0+14Bp

var_34		= byte ptr -34h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 34h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+34h+var_4], eax
		push	ebx
		push	ebp
		mov	ebp, [esp+3Ch+arg_4]
		mov	ebx, 1
		push	esi
		mov	esi, [esp+40h+arg_0]
		push	edi
		mov	edi, [esp+44h+arg_8]
		push	80h		; Size
		mov	dword ptr [esi+38h], 0
		mov	dword ptr [esi+8], 4D2h
		mov	dword ptr [esi+0Ch], 1000h
		mov	dword ptr [esi+10h], 0Ch
		mov	dword ptr [esi+18h], 100h
		mov	dword ptr [esi+1Ch], 8
		mov	dword ptr [esi+14h], 100h
		mov	dword ptr [esi+34h], 10000h
		mov	eax, off_1001500C
		mov	[esi+10Ch], eax
		lea	eax, [esi+44h]
		push	0		; Val
		push	eax		; Dst
		call	memset
		push	40h		; Size
		lea	eax, [esi+0C4h]
		push	0		; Val
		push	eax		; Dst
		call	memset
		add	esp, 18h
		test	ebp, ebp
		jz	short loc_1000F32E
		lea	eax, [esp+44h+var_34]
		push	eax
		push	ebp
		call	ds:_stat64i32
		add	esp, 8
		test	eax, eax
		jnz	short loc_1000F361
		push	dword ptr [esi+0Ch]
		call	sub_1000FF00
		add	esp, 4
		mov	[esi+10h], eax

loc_1000F32E:				; CODE XREF: sub_1000F280+8Bj
		test	edi, edi
		jz	short loc_1000F3AE
		mov	eax, [edi]
		test	eax, eax
		jz	short loc_1000F376
		push	eax
		call	sub_1000FF00
		mov	edx, ebx
		mov	[esi+10h], eax
		mov	ecx, eax
		add	esp, 4
		shl	edx, cl
		mov	[esi+0Ch], edx
		cmp	edx, 8000h
		jle	short loc_1000F376

loc_1000F355:				; CODE XREF: sub_1000F280+129j
		call	ds:_errno
		mov	dword ptr [eax], 16h

loc_1000F361:				; CODE XREF: sub_1000F280+9Ej
		pop	edi
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		mov	ecx, [esp+34h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 34h
		retn
; ---------------------------------------------------------------------------

loc_1000F376:				; CODE XREF: sub_1000F280+B6j
					; sub_1000F280+D3j
		mov	eax, [edi+4]
		test	eax, eax
		jz	short loc_1000F380
		mov	[esi+34h], eax

loc_1000F380:				; CODE XREF: sub_1000F280+FBj
		mov	eax, [edi+10h]
		test	eax, eax
		jz	short loc_1000F38D
		mov	[esi+10Ch], eax

loc_1000F38D:				; CODE XREF: sub_1000F280+105j
		mov	eax, [edi+8]
		test	eax, eax
		jz	short loc_1000F396
		mov	ebx, eax

loc_1000F396:				; CODE XREF: sub_1000F280+112j
		mov	eax, [edi+14h]
		test	eax, eax
		jz	short loc_1000F3AE
		cmp	eax, 10E1h
		jz	short loc_1000F3AB
		cmp	eax, 4D2h
		jnz	short loc_1000F355

loc_1000F3AB:				; CODE XREF: sub_1000F280+122j
		mov	[esi+8], eax

loc_1000F3AE:				; CODE XREF: sub_1000F280+B0j
					; sub_1000F280+11Bj
		push	ebx
		push	esi
		call	sub_1000F3E0
		mov	ecx, [esp+4Ch+var_4]
		add	esp, 8
		neg	eax
		sbb	eax, eax
		pop	edi
		not	eax
		and	eax, esi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 34h
		retn
sub_1000F280	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000F3E0	proc near		; CODE XREF: sub_1000F280+130p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_4]
		push	ebx
		push	esi
		mov	esi, [esp+8+arg_0]
		dec	eax
		cdq
		push	edi
		idiv	dword ptr [esi+34h]
		inc	eax
		cmp	eax, 2
		jg	short loc_1000F3FB
		mov	eax, 2

loc_1000F3FB:				; CODE XREF: sub_1000F3E0+14j
		push	eax
		call	sub_1000FF00
		mov	ecx, eax
		mov	edi, 1
		mov	ebx, edi
		shl	ebx, cl
		lea	ecx, [eax+1]
		mov	[esi+eax*4+44h], ecx
		mov	[esi+eax*4+48h], ecx
		mov	[esi+20h], eax
		push	0
		shl	eax, 0Bh
		push	ecx
		inc	eax
		mov	dword ptr [esi+24h], 2
		push	eax
		push	esi
		call	sub_10010530
		add	esp, 14h
		test	eax, eax
		jz	short loc_1000F43D
		pop	edi
		pop	esi
		or	eax, 0FFFFFFFFh
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1000F43D:				; CODE XREF: sub_1000F3E0+54j
		lea	ecx, ds:0FFFFFFFFh[ebx*2]
		mov	edx, 1FFh
		mov	[esi+2Ch], ecx
		lea	eax, [ebx-1]
		mov	ecx, [esi+10h]
		shr	edx, cl
		inc	edx
		mov	[esi+30h], eax
		mov	[esi+28h], eax
		mov	[esi+3Ch], edx
		cdq
		idiv	dword ptr [esi+18h]
		inc	eax
		push	eax
		call	sub_1000FF00
		mov	ecx, eax
		add	esp, 4
		shl	edi, cl
		cmp	edi, [esi+14h]
		jle	short loc_1000F478
		mov	[esi+14h], edi

loc_1000F478:				; CODE XREF: sub_1000F3E0+93j
		push	edi
		push	esi
		call	sub_1000E730
		add	esp, 8
		pop	edi
		pop	esi
		pop	ebx
		retn
sub_1000F3E0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000F490	proc near		; CODE XREF: sub_1000E3F0+1E0p

arg_0		= dword	ptr  4

		mov	edx, [esp+arg_0]
		push	esi
		push	edi
		mov	ecx, [edx]
		mov	eax, ecx
		shr	eax, 18h
		mov	[edx], al
		mov	eax, ecx
		shr	eax, 10h
		mov	[edx+1], al
		mov	eax, ecx
		shr	eax, 8
		mov	[edx+2], al
		mov	[edx+3], cl
		mov	ecx, [edx+4]
		mov	eax, ecx
		shr	eax, 18h
		mov	[edx+4], al
		mov	eax, ecx
		shr	eax, 10h
		mov	[edx+5], al
		mov	eax, ecx
		shr	eax, 8
		mov	[edx+6], al
		mov	[edx+7], cl
		mov	ecx, [edx+8]
		mov	eax, ecx
		shr	eax, 18h
		mov	[edx+8], al
		mov	eax, ecx
		shr	eax, 10h
		mov	[edx+9], al
		mov	eax, ecx
		shr	eax, 8
		mov	[edx+0Ah], al
		mov	[edx+0Bh], cl
		mov	ecx, [edx+0Ch]
		mov	eax, ecx
		shr	eax, 18h
		mov	[edx+0Ch], al
		mov	eax, ecx
		shr	eax, 10h
		mov	[edx+0Dh], al
		mov	eax, ecx
		shr	eax, 8
		mov	[edx+0Eh], al
		mov	[edx+0Fh], cl
		mov	ecx, [edx+10h]
		mov	eax, ecx
		shr	eax, 18h
		mov	[edx+10h], al
		mov	eax, ecx
		shr	eax, 10h
		mov	[edx+11h], al
		mov	eax, ecx
		shr	eax, 8
		mov	[edx+12h], al
		mov	[edx+13h], cl
		mov	ecx, [edx+14h]
		mov	eax, ecx
		shr	eax, 18h
		mov	[edx+14h], al
		mov	eax, ecx
		shr	eax, 10h
		mov	[edx+15h], al
		mov	eax, ecx
		shr	eax, 8
		mov	[edx+16h], al
		mov	[edx+17h], cl
		mov	ecx, [edx+18h]
		mov	eax, ecx
		shr	eax, 18h
		mov	[edx+18h], al
		mov	eax, ecx
		shr	eax, 10h
		mov	[edx+19h], al
		mov	eax, ecx
		shr	eax, 8
		mov	[edx+1Ah], al
		mov	[edx+1Bh], cl
		mov	ecx, [edx+1Ch]
		mov	eax, ecx
		mov	[edx+1Fh], cl
		shr	eax, 18h
		mov	[edx+1Ch], al
		mov	eax, ecx
		shr	eax, 10h
		mov	[edx+1Dh], al
		mov	eax, ecx
		shr	eax, 8
		mov	[edx+1Eh], al
		mov	ecx, [edx+20h]
		mov	eax, ecx
		shr	eax, 18h
		mov	[edx+20h], al
		mov	eax, ecx
		shr	eax, 10h
		mov	[edx+21h], al
		mov	eax, ecx
		shr	eax, 8
		mov	[edx+22h], al
		mov	[edx+23h], cl
		mov	ecx, [edx+24h]
		mov	eax, ecx
		shr	eax, 18h
		mov	[edx+24h], al
		mov	eax, ecx
		shr	eax, 10h
		mov	[edx+25h], al
		mov	eax, ecx
		shr	eax, 8
		mov	[edx+26h], al
		mov	[edx+27h], cl
		mov	ecx, [edx+28h]
		mov	eax, ecx
		shr	eax, 18h
		mov	[edx+28h], al
		mov	eax, ecx
		shr	eax, 10h
		mov	[edx+29h], al
		mov	eax, ecx
		shr	eax, 8
		mov	[edx+2Ah], al
		mov	[edx+2Bh], cl
		mov	ecx, [edx+2Ch]
		mov	eax, ecx
		shr	eax, 18h
		mov	[edx+2Ch], al
		mov	eax, ecx
		shr	eax, 10h
		mov	[edx+2Dh], al
		mov	eax, ecx
		shr	eax, 8
		mov	[edx+2Eh], al
		mov	[edx+2Fh], cl
		mov	ecx, [edx+30h]
		mov	eax, ecx
		shr	eax, 18h
		mov	[edx+30h], al
		mov	eax, ecx
		shr	eax, 10h
		mov	[edx+31h], al
		mov	eax, ecx
		shr	eax, 8
		mov	[edx+32h], al
		mov	[edx+33h], cl
		mov	ecx, [edx+34h]
		mov	eax, ecx
		shr	eax, 18h
		mov	[edx+34h], al
		mov	eax, ecx
		shr	eax, 10h
		mov	[edx+35h], al
		mov	eax, ecx
		shr	eax, 8
		mov	[edx+36h], al
		mov	[edx+37h], cl
		mov	ecx, [edx+38h]
		mov	eax, ecx
		shr	eax, 18h
		mov	[edx+38h], al
		mov	eax, ecx
		shr	eax, 10h
		lea	esi, [edx+0C4h]
		mov	[edx+39h], al
		mov	edi, 20h
		mov	eax, ecx
		mov	[edx+3Bh], cl
		shr	eax, 8
		mov	[edx+3Ah], al
		mov	ecx, [edx+3Ch]
		mov	eax, ecx
		shr	eax, 18h
		mov	[edx+3Ch], al
		mov	eax, ecx
		shr	eax, 10h
		mov	[edx+3Dh], al
		mov	eax, ecx
		shr	eax, 8
		mov	[edx+3Eh], al
		mov	[edx+3Fh], cl
		mov	ecx, [edx+40h]
		mov	eax, ecx
		shr	eax, 18h
		mov	[edx+40h], al
		mov	eax, ecx
		shr	eax, 10h
		mov	[edx+41h], al
		mov	eax, ecx
		shr	eax, 8
		mov	[edx+42h], al
		lea	eax, [edx+44h]
		mov	[edx+43h], cl

loc_1000F6A0:				; CODE XREF: sub_1000F490+243j
		mov	edx, [eax]
		lea	eax, [eax+4]
		mov	ecx, edx
		mov	[eax-1], dl
		shr	ecx, 18h
		lea	esi, [esi+2]
		mov	[eax-4], cl
		mov	ecx, edx
		shr	ecx, 10h
		mov	[eax-3], cl
		mov	ecx, edx
		shr	ecx, 8
		mov	[eax-2], cl
		movzx	edx, word ptr [esi-2]
		mov	ecx, edx
		mov	[esi-1], dl
		shr	ecx, 8
		mov	[esi-2], cl
		dec	edi
		jnz	short loc_1000F6A0
		pop	edi
		pop	esi
		retn
sub_1000F490	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000F6E0	proc near		; CODE XREF: sub_1000E7C0+69p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	ecx, [esp+arg_0]
		push	ebx
		push	ebp
		push	esi
		movzx	eax, byte ptr [ecx+3]
		push	edi
		mov	edi, [esp+10h+arg_4]
		mov	[edi], al
		movzx	eax, byte ptr [ecx+2]
		mov	[edi+1], al
		movzx	eax, byte ptr [ecx+1]
		mov	[edi+2], al
		movzx	eax, byte ptr [ecx]
		mov	[edi+3], al
		movzx	eax, byte ptr [ecx+7]
		mov	[edi+4], al
		movzx	eax, byte ptr [ecx+6]
		mov	[edi+5], al
		movzx	eax, byte ptr [ecx+5]
		mov	[edi+6], al
		movzx	eax, byte ptr [ecx+4]
		mov	[edi+7], al
		movzx	eax, byte ptr [ecx+0Bh]
		mov	[edi+8], al
		movzx	eax, byte ptr [ecx+0Ah]
		mov	[edi+9], al
		movzx	eax, byte ptr [ecx+9]
		mov	[edi+0Ah], al
		movzx	eax, byte ptr [ecx+8]
		mov	[edi+0Bh], al
		movzx	eax, byte ptr [ecx+0Fh]
		mov	[edi+0Ch], al
		movzx	eax, byte ptr [ecx+0Eh]
		mov	[edi+0Dh], al
		movzx	eax, byte ptr [ecx+0Dh]
		mov	[edi+0Eh], al
		movzx	eax, byte ptr [ecx+0Ch]
		mov	[edi+0Fh], al
		movzx	eax, byte ptr [ecx+13h]
		mov	[edi+10h], al
		movzx	eax, byte ptr [ecx+12h]
		mov	[edi+11h], al
		movzx	eax, byte ptr [ecx+11h]
		mov	[edi+12h], al
		movzx	eax, byte ptr [ecx+10h]
		mov	[edi+13h], al
		movzx	eax, byte ptr [ecx+17h]
		mov	[edi+14h], al
		movzx	eax, byte ptr [ecx+16h]
		mov	[edi+15h], al
		movzx	eax, byte ptr [ecx+15h]
		mov	[edi+16h], al
		movzx	eax, byte ptr [ecx+14h]
		mov	[edi+17h], al
		movzx	eax, byte ptr [ecx+1Bh]
		mov	[edi+18h], al
		movzx	eax, byte ptr [ecx+1Ah]
		mov	[edi+19h], al
		movzx	eax, byte ptr [ecx+19h]
		mov	[edi+1Ah], al
		movzx	eax, byte ptr [ecx+18h]
		mov	[edi+1Bh], al
		movzx	eax, byte ptr [ecx+1Fh]
		mov	[edi+1Ch], al
		movzx	eax, byte ptr [ecx+1Eh]
		mov	[edi+1Dh], al
		movzx	eax, byte ptr [ecx+1Dh]
		mov	[edi+1Eh], al
		movzx	eax, byte ptr [ecx+1Ch]
		mov	[edi+1Fh], al
		movzx	eax, byte ptr [ecx+23h]
		mov	[edi+20h], al
		movzx	eax, byte ptr [ecx+22h]
		mov	[edi+21h], al
		movzx	eax, byte ptr [ecx+21h]
		mov	[edi+22h], al
		movzx	eax, byte ptr [ecx+20h]
		mov	[edi+23h], al
		movzx	eax, byte ptr [ecx+27h]
		mov	[edi+24h], al
		movzx	eax, byte ptr [ecx+26h]
		mov	[edi+25h], al
		lea	ebx, [edi+0C5h]
		movzx	eax, byte ptr [ecx+25h]
		lea	esi, [edi+45h]
		mov	[edi+26h], al
		lea	edx, [ecx+0C4h]
		movzx	eax, byte ptr [ecx+24h]
		mov	ebp, 20h
		mov	[edi+27h], al
		movzx	eax, byte ptr [ecx+2Bh]
		mov	[edi+28h], al
		movzx	eax, byte ptr [ecx+2Ah]
		mov	[edi+29h], al
		movzx	eax, byte ptr [ecx+29h]
		mov	[edi+2Ah], al
		movzx	eax, byte ptr [ecx+28h]
		mov	[edi+2Bh], al
		movzx	eax, byte ptr [ecx+2Fh]
		mov	[edi+2Ch], al
		movzx	eax, byte ptr [ecx+2Eh]
		mov	[edi+2Dh], al
		movzx	eax, byte ptr [ecx+2Dh]
		mov	[edi+2Eh], al
		movzx	eax, byte ptr [ecx+2Ch]
		mov	[edi+2Fh], al
		movzx	eax, byte ptr [ecx+33h]
		mov	[edi+30h], al
		movzx	eax, byte ptr [ecx+32h]
		mov	[edi+31h], al
		movzx	eax, byte ptr [ecx+31h]
		mov	[edi+32h], al
		movzx	eax, byte ptr [ecx+30h]
		mov	[edi+33h], al
		movzx	eax, byte ptr [ecx+37h]
		mov	[edi+34h], al
		movzx	eax, byte ptr [ecx+36h]
		mov	[edi+35h], al
		movzx	eax, byte ptr [ecx+35h]
		mov	[edi+36h], al
		movzx	eax, byte ptr [ecx+34h]
		mov	[edi+37h], al
		movzx	eax, byte ptr [ecx+3Bh]
		mov	[edi+38h], al
		movzx	eax, byte ptr [ecx+3Ah]
		mov	[edi+39h], al
		movzx	eax, byte ptr [ecx+39h]
		mov	[edi+3Ah], al
		movzx	eax, byte ptr [ecx+38h]
		mov	[edi+3Bh], al
		movzx	eax, byte ptr [ecx+3Fh]
		mov	[edi+3Ch], al
		movzx	eax, byte ptr [ecx+3Eh]
		mov	[edi+3Dh], al
		movzx	eax, byte ptr [ecx+3Dh]
		mov	[edi+3Eh], al
		movzx	eax, byte ptr [ecx+3Ch]
		mov	[edi+3Fh], al
		movzx	eax, byte ptr [ecx+43h]
		mov	[edi+40h], al
		movzx	eax, byte ptr [ecx+42h]
		mov	[edi+41h], al
		movzx	eax, byte ptr [ecx+41h]
		mov	[edi+42h], al
		movzx	eax, byte ptr [ecx+40h]
		mov	[edi+43h], al
		lea	eax, [ecx+46h]
		sub	edi, ecx
		nop

loc_1000F8E0:				; CODE XREF: sub_1000F6E0+239j
		movzx	ecx, byte ptr [eax+1]
		lea	eax, [eax+4]
		mov	[esi-1], cl
		lea	esi, [esi+4]
		movzx	ecx, byte ptr [eax-4]
		lea	edx, [edx+2]
		mov	[esi-4], cl
		lea	ebx, [ebx+2]
		movzx	ecx, byte ptr [eax-5]
		mov	[edi+eax-4], cl
		movzx	ecx, byte ptr [eax-6]
		mov	[esi-2], cl
		movzx	ecx, byte ptr [edx-1]
		mov	[edi+edx-2], cl
		movzx	ecx, byte ptr [edx-2]
		mov	[ebx-2], cl
		dec	ebp
		jnz	short loc_1000F8E0
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
sub_1000F6E0	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000F920	proc near		; CODE XREF: .text:1000F107p

arg_0		= dword	ptr  4

		push	ebx
		push	esi
		push	edi
		mov	edi, [esp+0Ch+arg_0]
		push	2		; int
		push	0		; __int32
		mov	esi, [edi+114h]
		push	esi		; int
		call	ds:_lseek
		push	esi		; int
		mov	ebx, eax
		call	ds:_get_osfhandle
		add	esp, 10h
		push	eax		; hFile
		call	ds:FlushFileBuffers
		cmp	ebx, 0FFFFFFFFh
		jnz	short loc_1000F956
		pop	edi
		pop	esi
		or	eax, ebx
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1000F956:				; CODE XREF: sub_1000F920+2Ej
		neg	eax
		mov	[edi+1E0h], ebx
		pop	edi
		sbb	eax, eax
		neg	eax
		pop	esi
		dec	eax
		pop	ebx
		retn
sub_1000F920	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000F970	proc near		; CODE XREF: .text:1000F0D5p
					; sub_1000F130+17p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	edx, [esp+arg_0]
		push	esi
		mov	esi, [edx+1C4h]
		push	edi
		lea	edi, [edx+1C4h]
		test	esi, esi
		jnz	short loc_1000F98B
		pop	edi
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1000F98B:				; CODE XREF: sub_1000F970+14j
		push	ebx
		push	ebp
		cmp	esi, edi
		jz	loc_1000FA40
		mov	ebx, ds:free
		jmp	short loc_1000F9A0
; ---------------------------------------------------------------------------
		align 10h

loc_1000F9A0:				; CODE XREF: sub_1000F970+2Bj
					; sub_1000F970+9Ej
		mov	ecx, [esi+0Ch]
		test	ecx, ecx
		jnz	short loc_1000F9AD
		test	byte ptr [esi+15h], 4
		jz	short loc_1000F9D7

loc_1000F9AD:				; CODE XREF: sub_1000F970+35j
		cmp	[esp+10h+arg_8], 0
		jz	short loc_1000F9D7
		mov	al, [esi+15h]
		test	al, 1
		jz	short loc_1000F9D7
		push	0		; int
		movsx	eax, al
		and	eax, 4
		push	eax		; int
		push	ecx		; int
		push	dword ptr [esi+10h] ; void *
		push	edx		; int
		call	sub_100105C0
		mov	ebp, eax
		add	esp, 14h
		test	ebp, ebp
		jnz	short loc_1000FA10

loc_1000F9D7:				; CODE XREF: sub_1000F970+3Bj
					; sub_1000F970+42j ...
		cmp	[esp+10h+arg_4], 0
		jz	short loc_1000FA04
		mov	eax, [esi+10h]
		test	eax, eax
		jz	short loc_1000F9EB
		push	eax		; Memory
		call	ebx ; free
		add	esp, 4

loc_1000F9EB:				; CODE XREF: sub_1000F970+73j
		mov	ecx, [esi]
		mov	eax, [esi+4]
		push	esi		; Memory
		mov	[ecx+4], eax
		mov	ecx, [esi+4]
		mov	eax, [esi]
		mov	[ecx], eax
		call	ebx ; free
		mov	esi, [edi]
		add	esp, 4
		jmp	short loc_1000FA06
; ---------------------------------------------------------------------------

loc_1000FA04:				; CODE XREF: sub_1000F970+6Cj
		mov	esi, [esi]

loc_1000FA06:				; CODE XREF: sub_1000F970+92j
		cmp	esi, edi
		jz	short loc_1000FA40
		mov	edx, [esp+10h+arg_0]
		jmp	short loc_1000F9A0
; ---------------------------------------------------------------------------

loc_1000FA10:				; CODE XREF: sub_1000F970+65j
		cmp	[esp+10h+arg_4], 0
		jz	short loc_1000FA39
		mov	eax, [esi+10h]
		test	eax, eax
		jz	short loc_1000FA24
		push	eax		; Memory
		call	ebx ; free
		add	esp, 4

loc_1000FA24:				; CODE XREF: sub_1000F970+ACj
		mov	ecx, [esi]
		mov	eax, [esi+4]
		push	esi		; Memory
		mov	[ecx+4], eax
		mov	ecx, [esi+4]
		mov	eax, [esi]
		mov	[ecx], eax
		call	ebx ; free
		add	esp, 4

loc_1000FA39:				; CODE XREF: sub_1000F970+A5j
		mov	eax, ebp
		pop	ebp
		pop	ebx
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1000FA40:				; CODE XREF: sub_1000F970+1Fj
					; sub_1000F970+98j
		pop	ebp
		pop	ebx
		pop	edi
		xor	eax, eax
		pop	esi
		retn
sub_1000F970	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000FA50	proc near		; CODE XREF: sub_1000E3F0+285p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_4]
		push	esi
		mov	esi, [esp+4+arg_0]
		dec	eax
		add	eax, [esi+0Ch]
		lea	edx, [esi+1C4h]
		mov	ecx, [esi+10h]
		sar	eax, cl
		cmp	eax, 6
		jg	short loc_1000FA72
		mov	eax, 6

loc_1000FA72:				; CODE XREF: sub_1000FA50+1Bj
		mov	[esi+1C0h], eax
		mov	[edx+4], edx
		mov	[edx], edx
		pop	esi
		retn
sub_1000FA50	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000FA80	proc near		; CODE XREF: sub_1000E8F0+51p
					; sub_1000E8F0+145p ...

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 0Ch
		push	ebx
		mov	ebx, [esp+10h+arg_0]
		push	ebp
		push	esi
		mov	esi, [esp+18h+arg_8]
		xor	ebp, ebp
		mov	[esp+18h+var_8], 0
		mov	[esp+18h+var_4], 0
		mov	[esp+18h+var_C], ebp
		push	edi
		test	esi, esi
		jz	short loc_1000FAC8
		mov	edi, [esi+8]
		mov	eax, [esp+1Ch+arg_4]
		test	edi, edi
		jz	short loc_1000FAB9
		cmp	[edi+0Ch], eax
		jz	short loc_1000FABB

loc_1000FAB9:				; CODE XREF: sub_1000FA80+32j
		xor	edi, edi

loc_1000FABB:				; CODE XREF: sub_1000FA80+37j
		cmp	[esp+1Ch+arg_C], ebp
		jnz	short loc_1000FB10
		mov	ebp, 2
		jmp	short loc_1000FB10
; ---------------------------------------------------------------------------

loc_1000FAC8:				; CODE XREF: sub_1000FA80+27j
		mov	edx, [esp+1Ch+arg_4]
		mov	ecx, [ebx+1Ch]
		mov	eax, [ebx+1DCh]
		mov	ebp, [ebx+18h]
		shr	edx, cl
		dec	ebp
		and	ebp, [esp+1Ch+arg_4]
		mov	[esp+1Ch+var_8], ebp
		mov	ecx, [eax+edx*4]
		mov	[esp+1Ch+var_4], ecx
		mov	eax, [ecx+ebp*4]
		lea	edi, [eax-2]
		neg	edi
		sbb	edi, edi
		and	edi, eax
		test	eax, eax
		jz	loc_1000FB92
		cmp	eax, 2
		jnz	short loc_1000FB80
		mov	[esp+1Ch+var_C], eax

loc_1000FB07:				; CODE XREF: sub_1000FA80+10Aj
					; sub_1000FA80+121j
		mov	ebp, 1

loc_1000FB0C:				; CODE XREF: sub_1000FA80+129j
		mov	eax, [esp+1Ch+arg_4]

loc_1000FB10:				; CODE XREF: sub_1000FA80+3Fj
					; sub_1000FA80+46j
		test	edi, edi
		jnz	loc_1000FBCE
		push	esi
		push	eax
		push	ebx
		call	sub_1000FC60
		mov	edi, eax
		add	esp, 0Ch
		xor	eax, eax
		test	edi, edi
		jz	loc_1000FBFB
		push	eax		; int
		push	ebp		; int
		test	esi, esi
		setz	al
		push	eax		; int
		push	[esp+28h+arg_4]	; int
		push	dword ptr [edi+10h] ; void *
		push	ebx		; int
		call	sub_100102F0
		add	esp, 18h
		test	eax, eax
		jz	short loc_1000FBAE
		test	esi, esi
		jz	short loc_1000FB56
		mov	dword ptr [esi+8], 0

loc_1000FB56:				; CODE XREF: sub_1000FA80+CDj
		mov	ecx, [edi]
		mov	eax, [edi+4]
		mov	esi, ds:free
		mov	[ecx+4], eax
		mov	ecx, [edi+4]
		mov	eax, [edi]
		mov	[ecx], eax
		push	dword ptr [edi+10h] ; Memory
		call	esi ; free
		push	edi		; Memory
		call	esi ; free
		add	esp, 8
		xor	eax, eax
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_1000FB80:				; CODE XREF: sub_1000FA80+81j
		movsx	eax, byte ptr [eax+14h]
		mov	[esp+1Ch+var_C], eax
		test	eax, eax
		jnz	loc_1000FB07
		jmp	short loc_1000FB9A
; ---------------------------------------------------------------------------

loc_1000FB92:				; CODE XREF: sub_1000FA80+78j
		mov	[esp+1Ch+var_C], 0

loc_1000FB9A:				; CODE XREF: sub_1000FA80+110j
		cmp	dword ptr [ebx+134h], 0
		jz	loc_1000FB07
		xor	ebp, ebp
		jmp	loc_1000FB0C
; ---------------------------------------------------------------------------

loc_1000FBAE:				; CODE XREF: sub_1000FA80+C9j
		test	esi, esi
		jnz	short loc_1000FBF9
		mov	eax, [esp+1Ch+var_C]
		mov	ecx, [esp+1Ch+var_4]
		mov	[edi+14h], al
		mov	eax, [esp+1Ch+var_8]
		mov	[ecx+eax*4], edi
		mov	eax, edi
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_1000FBCE:				; CODE XREF: sub_1000FA80+92j
		mov	ecx, [edi]
		mov	eax, [edi+4]
		mov	[ecx+4], eax
		mov	ecx, [edi+4]
		mov	eax, [edi]
		mov	[ecx], eax
		mov	eax, [ebx+1C8h]
		mov	[edi+4], eax
		lea	eax, [ebx+1C4h]
		mov	[edi], eax
		mov	[ebx+1C8h], edi
		mov	eax, [edi+4]
		mov	[eax], edi

loc_1000FBF9:				; CODE XREF: sub_1000FA80+130j
		mov	eax, edi

loc_1000FBFB:				; CODE XREF: sub_1000FA80+A9j
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 0Ch
		retn
sub_1000FA80	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000FC10	proc near		; CODE XREF: sub_10010240+9Cp

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		mov	ecx, [edx]
		mov	eax, [edx+4]
		mov	dword ptr [edx+8], 0
		mov	dword ptr [edx+0Ch], 0
		mov	byte ptr [edx+15h], 0
		mov	[ecx+4], eax
		mov	ecx, [edx+4]
		mov	eax, [edx]
		mov	[ecx], eax
		mov	ecx, [esp+arg_0]
		mov	eax, [ecx+1C4h]
		mov	eax, [eax+4]
		mov	[edx+4], eax
		mov	eax, [ecx+1C4h]
		mov	[edx], eax
		mov	eax, [ecx+1C4h]
		mov	[eax+4], edx
		mov	eax, [edx+4]
		mov	[eax], edx
		retn
sub_1000FC10	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000FC60	proc near		; CODE XREF: sub_1000FA80+9Bp

var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ecx
		push	ebx
		mov	ebx, [esp+8+arg_0]
		push	ebp
		push	esi
		lea	edx, [ebx+1C4h]
		mov	[esp+10h+var_4], 0
		cmp	dword ptr [ebx+1C0h], 0
		push	edi
		mov	edi, [edx]
		jnz	loc_1000FE26
		test	byte ptr [edi+15h], 8
		jnz	loc_1000FE26
		mov	ecx, [edi]
		mov	eax, [edi+4]
		mov	[ecx+4], eax
		mov	ecx, [edi+4]
		mov	eax, [edi]
		mov	[ecx], eax
		mov	esi, [edi+0Ch]
		test	esi, esi
		jnz	short loc_1000FCB0
		test	byte ptr [edi+15h], 4
		jz	loc_1000FEB3

loc_1000FCB0:				; CODE XREF: sub_1000FC60+44j
		mov	ecx, [edi+10h]
		movzx	eax, word ptr [ecx]
		test	ax, ax
		jz	short loc_1000FCD3
		mov	edx, eax
		mov	eax, [ebx+0Ch]
		shr	eax, 1
		cmp	edx, eax
		ja	loc_1000FE7B
		movzx	eax, word ptr [ecx+edx*2-2]
		mov	[esp+14h+var_4], eax

loc_1000FCD3:				; CODE XREF: sub_1000FC60+59j
		mov	al, [edi+15h]
		test	al, 1
		jz	short loc_1000FCF6
		push	0		; int
		movsx	eax, al
		and	eax, 4
		push	eax		; int
		push	esi		; int
		push	ecx		; void *
		push	ebx		; int
		call	sub_100105C0
		add	esp, 14h
		test	eax, eax
		jnz	loc_1000FE7B

loc_1000FCF6:				; CODE XREF: sub_1000FC60+78j
		mov	al, [edi+15h]
		mov	byte ptr [esp+14h+arg_0], al
		test	al, 4
		jz	short loc_1000FD4C
		mov	esi, [ebx+18h]
		mov	edx, [edi+0Ch]
		dec	esi
		mov	ecx, [ebx+1Ch]
		and	esi, edx
		mov	eax, [ebx+1DCh]
		shr	edx, cl
		cmp	dword ptr [ebx+134h], 0
		mov	ecx, [eax+edx*4]
		jz	short loc_1000FD45
		test	byte ptr [esp+14h+arg_0], 1
		jnz	short loc_1000FD3C
		mov	eax, [ecx+esi*4]
		test	eax, eax
		jz	short loc_1000FD45
		cmp	eax, 2
		jz	short loc_1000FD3C
		movsx	eax, byte ptr [eax+14h]
		test	eax, eax
		jz	short loc_1000FD45

loc_1000FD3C:				; CODE XREF: sub_1000FC60+C6j
					; sub_1000FC60+D2j
		mov	dword ptr [ecx+esi*4], 2
		jmp	short loc_1000FD4C
; ---------------------------------------------------------------------------

loc_1000FD45:				; CODE XREF: sub_1000FC60+BFj
					; sub_1000FC60+CDj ...
		mov	dword ptr [ecx+esi*4], 0

loc_1000FD4C:				; CODE XREF: sub_1000FC60+9Fj
					; sub_1000FC60+E3j
		cmp	dword ptr [edi+8], 0
		mov	esi, edi
		jz	loc_1000FEAD
		jmp	short loc_1000FD60
; ---------------------------------------------------------------------------
		align 10h

loc_1000FD60:				; CODE XREF: sub_1000FC60+F8j
					; sub_1000FC60+1BBj
		lea	eax, [esi+8]
		mov	esi, [eax]
		mov	dword ptr [eax], 0
		mov	cl, [esi+15h]
		test	cl, 8
		jnz	loc_1000FE11
		test	cl, 4
		jnz	loc_1000FEAD
		mov	eax, [esp+14h+var_4]
		mov	ebp, [esi+0Ch]
		movzx	eax, ax
		cmp	eax, ebp
		jnz	loc_1000FEAD
		mov	edx, [esi+10h]
		movzx	eax, word ptr [edx]
		test	ax, ax
		jz	short loc_1000FDBD
		mov	[esp+14h+arg_0], eax
		mov	eax, [ebx+0Ch]
		shr	eax, 1
		cmp	[esp+14h+arg_0], eax
		ja	loc_1000FE7B
		mov	eax, [esp+14h+arg_0]
		movzx	eax, word ptr [edx+eax*2-2]
		mov	[esp+14h+var_4], eax

loc_1000FDBD:				; CODE XREF: sub_1000FC60+13Bj
		test	cl, 1
		jz	short loc_1000FDD9
		push	0		; int
		push	0		; int
		push	ebp		; int
		push	edx		; void *
		push	ebx		; int
		call	sub_100105C0
		add	esp, 14h
		test	eax, eax
		jnz	loc_1000FE7B

loc_1000FDD9:				; CODE XREF: sub_1000FC60+160j
		mov	ecx, [esi]
		lea	edx, [ebx+1C4h]
		mov	eax, [esi+4]
		mov	dword ptr [esi+0Ch], 0
		mov	byte ptr [esi+15h], 0
		mov	[ecx+4], eax
		mov	ecx, [esi+4]
		mov	eax, [esi]
		mov	[ecx], eax
		mov	eax, [edx]
		mov	eax, [eax+4]
		mov	[esi+4], eax
		mov	eax, [edx]
		mov	[esi], eax
		mov	eax, [edx]
		mov	[eax+4], esi
		mov	eax, [esi+4]
		mov	[eax], esi
		jmp	short loc_1000FE17
; ---------------------------------------------------------------------------

loc_1000FE11:				; CODE XREF: sub_1000FC60+111j
		lea	edx, [ebx+1C4h]

loc_1000FE17:				; CODE XREF: sub_1000FC60+1AFj
		cmp	dword ptr [esi+8], 0
		jnz	loc_1000FD60
		jmp	loc_1000FEB3
; ---------------------------------------------------------------------------

loc_1000FE26:				; CODE XREF: sub_1000FC60+20j
					; sub_1000FC60+2Aj
		mov	esi, ds:malloc
		push	18h		; Size
		call	esi ; malloc
		mov	edi, eax
		add	esp, 4
		test	edi, edi
		jz	short loc_1000FE7B
		mov	dword ptr [edi], 0FFFFFFFFh
		mov	dword ptr [edi+4], 0FFFFFFFFh
		mov	dword ptr [edi+8], 0FFFFFFFFh
		mov	dword ptr [edi+0Ch], 0FFFFFFFFh
		mov	dword ptr [edi+10h], 0FFFFFFFFh
		mov	dword ptr [edi+14h], 0FFFFFFFFh
		push	dword ptr [ebx+0Ch] ; Size
		call	esi ; malloc
		add	esp, 4
		mov	[edi+10h], eax
		test	eax, eax
		jnz	short loc_1000FE83
		push	edi		; Memory
		call	ds:free
		add	esp, 4

loc_1000FE7B:				; CODE XREF: sub_1000FC60+64j
					; sub_1000FC60+90j ...
		pop	edi
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_1000FE83:				; CODE XREF: sub_1000FC60+20Fj
		push	dword ptr [ebx+0Ch] ; Size
		push	0FFh		; Val
		push	eax		; Dst
		call	memset
		mov	eax, [ebx+1C0h]
		lea	edx, [ebx+1C4h]
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_1000FEB3
		dec	eax
		mov	[ebx+1C0h], eax
		jmp	short loc_1000FEB3
; ---------------------------------------------------------------------------

loc_1000FEAD:				; CODE XREF: sub_1000FC60+F2j
					; sub_1000FC60+11Aj ...
		lea	edx, [ebx+1C4h]

loc_1000FEB3:				; CODE XREF: sub_1000FC60+4Aj
					; sub_1000FC60+1C1j ...
		mov	eax, [esp+14h+arg_4]
		mov	[edi+0Ch], eax
		mov	eax, [esp+14h+arg_8]
		mov	dword ptr [edi+8], 0
		test	eax, eax
		jz	short loc_1000FED2
		mov	[eax+8], edi
		mov	byte ptr [edi+15h], 0
		jmp	short loc_1000FED6
; ---------------------------------------------------------------------------

loc_1000FED2:				; CODE XREF: sub_1000FC60+267j
		mov	byte ptr [edi+15h], 4

loc_1000FED6:				; CODE XREF: sub_1000FC60+270j
		mov	eax, [ebx+1C8h]
		mov	[edi+4], eax
		mov	[edi], edx
		mov	[ebx+1C8h], edi
		mov	eax, [edi+4]
		mov	[eax], edi
		mov	eax, edi
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		pop	ecx
		retn
sub_1000FC60	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000FF00	proc near		; CODE XREF: sub_1000E330+83p
					; sub_1000F280+A3p ...

arg_0		= dword	ptr  4

		mov	edx, [esp+arg_0]
		mov	ecx, 1
		xor	eax, eax
		cmp	edx, ecx
		jbe	short locret_1000FF17
		nop

loc_1000FF10:				; CODE XREF: sub_1000FF00+15j
		add	ecx, ecx
		inc	eax
		cmp	ecx, edx
		jb	short loc_1000FF10

locret_1000FF17:			; CODE XREF: sub_1000FF00+Dj
		retn
sub_1000FF00	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000FF20	proc near		; CODE XREF: sub_1000FFC0+11Cp
					; sub_10011210+23Bp ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebx
		push	ebp
		push	esi
		mov	esi, [esp+0Ch+arg_0]
		push	edi
		mov	edi, [esp+10h+arg_4]
		cmp	dword ptr [esi+34h], 10000h
		mov	ebx, [edi+10h]
		jnz	short loc_1000FF4C
		movzx	eax, word ptr [ebx]
		shr	eax, 1
		mov	[esi+34h], eax
		cmp	eax, 4
		jge	short loc_1000FF4C
		mov	dword ptr [esi+34h], 4

loc_1000FF4C:				; CODE XREF: sub_1000FF20+16j
					; sub_1000FF20+23j
		or	byte ptr [edi+15h], 1
		push	esi
		call	sub_10010DA0
		movzx	ebp, ax
		add	esp, 4
		test	bp, bp
		jz	short loc_1000FFB5
		push	1
		push	edi
		push	ebp
		push	esi
		call	sub_1000FA80
		add	esp, 10h
		mov	[edi+8], eax
		test	eax, eax
		jz	short loc_1000FFB5
		or	byte ptr [eax+15h], 1
		movzx	eax, word ptr [ebx]
		mov	ecx, eax
		mov	edx, eax
		movzx	eax, word ptr [ebx+ecx*2+4]
		mov	[ebx+ecx*2+8], ax
		movzx	eax, word ptr [ebx]
		movzx	eax, word ptr [ebx+eax*2+2]
		sub	ax, 4
		mov	[ebx+ecx*2+2], bp
		mov	[ebx+ecx*2+6], ax
		xor	eax, eax
		mov	[ebx+ecx*2+4], ax
		lea	eax, [edx+2]
		mov	[ebx], ax
		mov	eax, [edi+8]
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1000FFB5:				; CODE XREF: sub_1000FF20+3Fj
					; sub_1000FF20+53j
		pop	edi
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		retn
sub_1000FF20	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1000FFC0(size_t Size,	int, void *, int)
sub_1000FFC0	proc near		; CODE XREF: sub_1000E8F0+225p
					; sub_1000E8F0+2CCp

Size		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebx
		mov	ebx, [esp+4+Size]
		push	ebp
		mov	ebp, [esp+8+arg_C]
		push	esi
		mov	esi, [esp+0Ch+arg_4]
		push	edi
		mov	[esp+10h+arg_4], 0
		mov	edx, [esi+10h]
		movzx	ecx, word ptr [edx]
		test	cx, cx
		jz	short loc_10010060

loc_1000FFE3:				; CODE XREF: sub_1000FFC0+9Ej
		movzx	edi, word ptr [edx+4]
		cmp	edi, 4
		jb	short loc_1000FFF6
		movzx	eax, cx
		cmp	word ptr [edx+eax*2], 4
		jnb	short loc_10010060

loc_1000FFF6:				; CODE XREF: sub_1000FFC0+2Aj
		cmp	edi, 3
		jnz	short loc_10010001
		cmp	cx, 2
		jz	short loc_10010060

loc_10010001:				; CODE XREF: sub_1000FFC0+39j
		cmp	edi, 4
		jnb	short loc_10010019
		movzx	eax, cx
		cmp	word ptr [edx+eax*2], 0
		lea	eax, [edx+eax*2]
		jz	short loc_10010019
		movzx	eax, word ptr [eax-2]
		jmp	short loc_1001003E
; ---------------------------------------------------------------------------

loc_10010019:				; CODE XREF: sub_1000FFC0+44j
					; sub_1000FFC0+51j
		movzx	eax, cx
		lea	edi, [edx+eax*2]
		mov	eax, [esp+10h+arg_8]
		mov	ecx, [eax+4]
		mov	eax, [ebp+4]
		add	eax, 4
		add	ecx, eax
		movzx	eax, word ptr [edi+2]
		cmp	eax, ecx
		ja	loc_100100BA
		movzx	eax, word ptr [edi-2]

loc_1001003E:				; CODE XREF: sub_1000FFC0+57j
		push	0
		push	esi
		push	eax
		push	ebx
		call	sub_1000FA80
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		jz	loc_10010127
		mov	edx, [esi+10h]
		movzx	ecx, word ptr [edx]
		test	cx, cx
		jnz	short loc_1000FFE3

loc_10010060:				; CODE XREF: sub_1000FFC0+21j
					; sub_1000FFC0+34j ...
		cmp	word ptr [edx+4], 4
		mov	edi, [esp+10h+arg_8]
		jb	short loc_100100D2
		mov	eax, [ebp+4]
		mov	ecx, [edi+4]
		add	eax, 8
		add	ecx, eax
		movzx	eax, word ptr [edx]
		movzx	eax, word ptr [edx+eax*2+2]
		cmp	ecx, eax
		ja	short loc_100100D2
		push	ebp
		push	edi
		push	dword ptr [esi+10h]

loc_10010087:				; CODE XREF: sub_1000FFC0+14Ej
		call	sub_100110B0
		add	esp, 0Ch

loc_1001008F:				; CODE XREF: sub_1000FFC0+161j
		or	byte ptr [esi+15h], 1
		inc	dword ptr [ebx+38h]
		cmp	[esp+10h+arg_4], 0
		jnz	short loc_100100AC
		mov	ecx, [ebx+28h]
		mov	eax, [ebx+38h]
		inc	ecx
		cdq
		idiv	ecx
		cmp	eax, [ebx+34h]
		jle	short loc_100100CB

loc_100100AC:				; CODE XREF: sub_1000FFC0+DBj
		push	ebx		; Size
		call	sub_1000E330
		add	esp, 4
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_100100BA:				; CODE XREF: sub_1000FFC0+74j
		push	ebp
		push	[esp+14h+arg_8]
		push	edx
		call	sub_10011140
		add	esp, 0Ch
		inc	dword ptr [ebx+38h]

loc_100100CB:				; CODE XREF: sub_1000FFC0+EAj
		pop	edi
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_100100D2:				; CODE XREF: sub_1000FFC0+A9j
					; sub_1000FFC0+C0j
		push	esi
		push	ebx
		mov	[esp+18h+arg_4], 1
		call	sub_1000FF20
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		jz	short loc_10010127
		mov	edx, [esi+10h]
		cmp	word ptr [edx+4], 4
		jb	short loc_10010113
		mov	eax, [ebp+4]
		mov	ecx, [edi+4]
		add	eax, 8
		add	ecx, eax
		movzx	eax, word ptr [edx]
		movzx	eax, word ptr [edx+eax*2+2]
		cmp	ecx, eax
		ja	short loc_10010113
		push	ebp
		push	edi
		push	edx
		jmp	loc_10010087
; ---------------------------------------------------------------------------

loc_10010113:				; CODE XREF: sub_1000FFC0+132j
					; sub_1000FFC0+149j
		push	ebp		; int
		push	edi		; void *
		push	esi		; int
		push	ebx		; int
		call	sub_10011650
		add	esp, 10h
		test	eax, eax
		jz	loc_1001008F

loc_10010127:				; CODE XREF: sub_1000FFC0+8Fj
					; sub_1000FFC0+128j
		pop	edi
		pop	esi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		retn
sub_1000FFC0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10010130	proc near		; CODE XREF: sub_1000E8F0+2B6p
					; sub_1000E8F0+2EDp

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, [esp+arg_4]
		push	ebx
		push	ebp
		push	esi
		mov	ebx, [eax+10h]
		mov	esi, [esp+0Ch+arg_8]
		movzx	ebp, word ptr [ebx]
		movzx	ecx, word ptr [ebx+esi*2+2]
		cmp	ecx, 4
		jnb	short loc_1001015C
		push	eax
		push	[esp+10h+arg_0]
		call	sub_10011540
		add	esp, 8
		pop	esi
		pop	ebp
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1001015C:				; CODE XREF: sub_10010130+19j
		cmp	esi, 1
		jz	short loc_10010168
		movzx	eax, word ptr [ebx+esi*2-2]
		jmp	short loc_10010170
; ---------------------------------------------------------------------------

loc_10010168:				; CODE XREF: sub_10010130+2Fj
		mov	eax, [esp+0Ch+arg_0]
		movzx	eax, word ptr [eax+0Ch]

loc_10010170:				; CODE XREF: sub_10010130+36j
		sub	eax, ecx
		push	edi
		movzx	edi, ax
		lea	eax, [ebp-1]
		cmp	esi, eax
		jz	short loc_100101FA
		movzx	eax, word ptr [ebx+ebp*2+4]
		sub	ecx, eax
		lea	edx, [eax+edi]
		mov	eax, [esp+10h+arg_0]
		mov	eax, [eax+0Ch]
		cmp	edx, eax
		ja	short loc_10010198
		sub	eax, edx
		cmp	ecx, eax
		jbe	short loc_100101A2

loc_10010198:				; CODE XREF: sub_10010130+60j
		pop	edi
		pop	esi
		pop	ebp
		mov	eax, 0FFFFFC19h
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_100101A2:				; CODE XREF: sub_10010130+66j
		movzx	eax, word ptr [ebx+ebp*2+4]
		push	ecx		; Size
		add	eax, ebx
		push	eax		; Src
		lea	eax, [ebx+edx]
		push	eax		; Dst
		call	ds:memmove
		lea	ecx, [esi+2]
		add	esp, 0Ch
		cmp	ecx, ebp
		jg	short loc_100101FA
		mov	esi, ebp
		lea	eax, [ecx+1]
		sub	esi, ecx
		lea	eax, [ebx+eax*2]
		shr	esi, 1
		inc	esi
		lea	esp, [esp+0]

loc_100101D0:				; CODE XREF: sub_10010130+C8j
		movzx	edx, word ptr [eax]
		mov	cx, [eax-2]
		test	dx, dx
		jnz	short loc_100101E6
		mov	[eax-6], cx
		mov	[eax-4], dx
		jmp	short loc_100101F4
; ---------------------------------------------------------------------------

loc_100101E6:				; CODE XREF: sub_10010130+AAj
		add	cx, di
		mov	[eax-6], cx
		lea	ecx, [edx+edi]
		mov	[eax-4], cx

loc_100101F4:				; CODE XREF: sub_10010130+B4j
		add	eax, 4
		dec	esi
		jnz	short loc_100101D0

loc_100101FA:				; CODE XREF: sub_10010130+4Bj
					; sub_10010130+8Dj
		movzx	eax, word ptr [ebx]
		movzx	eax, word ptr [ebx+eax*2+4]
		add	ax, di
		mov	[ebx+ebp*2], ax
		movzx	eax, word ptr [ebx+ebp*2+2]
		add	ax, 4
		add	ax, di
		mov	[ebx+ebp*2-2], ax
		lea	eax, [ebp-2]
		mov	[ebx], ax
		mov	eax, [esp+10h+arg_0]
		pop	edi
		pop	esi
		pop	ebp
		dec	dword ptr [eax+38h]
		mov	eax, [esp+4+arg_4]
		pop	ebx
		or	byte ptr [eax+15h], 1
		xor	eax, eax
		retn
sub_10010130	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10010240	proc near		; CODE XREF: sub_10011210+16Dp
					; sub_10011210+300p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	edi
		mov	edi, [esp+4+arg_4]
		test	edi, edi
		jz	loc_100102E7
		cmp	dword ptr [edi+0Ch], 0
		jz	loc_100102E7
		movzx	ecx, word ptr [edi+0Ch]
		mov	ax, cx
		push	ebx
		shr	ax, 0Bh
		push	ebp
		movzx	eax, ax
		push	esi
		mov	esi, [esp+10h+arg_0]
		test	ax, ax
		jz	short loc_10010277
		mov	eax, [esi+eax*4+40h]
		jmp	short loc_10010279
; ---------------------------------------------------------------------------

loc_10010277:				; CODE XREF: sub_10010240+2Fj
		xor	eax, eax

loc_10010279:				; CODE XREF: sub_10010240+35j
		and	ecx, 7FFh
		lea	edx, [ecx-1]
		add	edx, eax
		cmp	edx, [esi+24h]
		jnb	short loc_1001028C
		mov	[esi+24h], edx

loc_1001028C:				; CODE XREF: sub_10010240+47j
		mov	ecx, [esi+10h]
		mov	ebp, edx
		mov	eax, [esi+0Ch]
		add	ecx, 3
		shr	ebp, cl
		lea	ebx, ds:0FFFFFFFFh[eax*8]
		mov	eax, [esi+ebp*4+13Ch]
		and	ebx, edx
		mov	[esp+10h+arg_4], eax
		test	eax, eax
		jnz	short loc_100102BF
		push	ebp
		push	esi
		call	sub_10010AC0
		add	esp, 8
		mov	ebp, eax
		jmp	short loc_100102C3
; ---------------------------------------------------------------------------

loc_100102BF:				; CODE XREF: sub_10010240+6Fj
		mov	ebp, [esp+10h+arg_4]

loc_100102C3:				; CODE XREF: sub_10010240+7Dj
		mov	edx, ebx
		mov	eax, 1
		and	ebx, 1Fh
		shr	edx, 5
		mov	ecx, ebx
		shl	eax, cl
		not	eax
		and	[ebp+edx*4+0], eax
		push	edi
		push	esi
		call	sub_1000FC10
		add	esp, 8
		pop	esi
		pop	ebp
		pop	ebx

loc_100102E7:				; CODE XREF: sub_10010240+7j
					; sub_10010240+11j
		pop	edi
		retn
sub_10010240	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_100102F0(int,	void *,	int, int, int, int)
sub_100102F0	proc near		; CODE XREF: sub_1000FA80+BFp
					; sub_10010AC0+3Cp ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		push	ebp
		push	edi
		mov	edi, [esp+8+arg_0]
		mov	edx, [edi+114h]
		mov	ebp, [edi+0Ch]
		mov	[esp+8+arg_0], edx
		cmp	edx, 0FFFFFFFFh
		jz	loc_10010504
		cmp	[esp+8+arg_10],	0
		jz	loc_10010504
		cmp	[esp+8+arg_C], 0
		push	ebx
		push	esi
		mov	esi, [esp+10h+arg_8]
		jz	short loc_1001034C
		test	esi, esi
		jz	short loc_10010343
		lea	eax, [esi+1]
		push	eax
		call	sub_1000FF00
		mov	edx, [esp+14h+arg_0]
		add	esp, 4
		mov	ecx, [edi+eax*4+40h]
		mov	eax, [edi+3Ch]
		add	eax, ecx
		jmp	short loc_10010380
; ---------------------------------------------------------------------------

loc_10010343:				; CODE XREF: sub_100102F0+36j
		mov	eax, [edi+3Ch]
		xor	ecx, ecx
		add	eax, ecx
		jmp	short loc_10010380
; ---------------------------------------------------------------------------

loc_1001034C:				; CODE XREF: sub_100102F0+32j
		mov	ecx, esi
		mov	ebx, 1
		shr	ecx, 0Bh
		shl	ebx, cl
		lea	eax, [ebx-1]
		test	eax, eax
		jz	short loc_10010372
		push	ebx
		call	sub_1000FF00
		mov	edx, [esp+14h+arg_0]
		add	esp, 4
		mov	eax, [edi+eax*4+40h]
		jmp	short loc_10010374
; ---------------------------------------------------------------------------

loc_10010372:				; CODE XREF: sub_100102F0+6Dj
		xor	eax, eax

loc_10010374:				; CODE XREF: sub_100102F0+80j
		and	esi, 7FFh
		dec	esi
		add	esi, [edi+3Ch]
		add	esi, ebx

loc_10010380:				; CODE XREF: sub_100102F0+51j
					; sub_100102F0+5Aj
		mov	ecx, [edi+10h]
		add	eax, esi
		push	0
		shl	eax, cl
		push	eax
		push	edx
		call	sub_10010B40
		add	esp, 0Ch
		cmp	eax, 0FFFFFFFFh
		jz	short loc_100103F4
		mov	esi, [esp+10h+arg_4]
		push	ebp		; unsigned int
		push	esi		; void *
		push	[esp+18h+arg_0]	; int
		call	ds:_read
		add	esp, 0Ch
		cmp	eax, 0FFFFFFFFh
		jz	short loc_100103F4
		test	eax, eax
		jnz	short loc_100103E4
		mov	[esi], ax

loc_100103B7:				; CODE XREF: sub_100102F0+F6j
		mov	ebx, [esp+10h+arg_14]
		test	ebx, ebx
		jnz	short loc_100103FC
		cmp	[esi], bx
		jnz	short loc_100103FC
		xor	eax, eax
		mov	[esi], ax
		movzx	eax, word ptr [edi+0Ch]
		sub	ax, 6
		mov	[esi+2], ax
		movzx	eax, word ptr [edi+0Ch]
		mov	[esi+4], ax

loc_100103DD:				; CODE XREF: sub_100102F0+156j
					; sub_100102F0+15Ej ...
		pop	esi
		pop	ebx
		pop	edi
		xor	eax, eax
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_100103E4:				; CODE XREF: sub_100102F0+C2j
		cmp	eax, ebp
		jz	short loc_100103B7
		call	ds:_errno
		mov	dword ptr [eax], 16h

loc_100103F4:				; CODE XREF: sub_100102F0+A6j
					; sub_100102F0+BEj
		pop	esi
		pop	ebx
		pop	edi
		or	eax, 0FFFFFFFFh
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_100103FC:				; CODE XREF: sub_100102F0+CDj
					; sub_100102F0+D2j
		cmp	dword ptr [edi+8], 4D2h
		jz	short loc_10010444
		test	ebx, ebx
		jz	loc_100104B1
		mov	edi, [edi+0Ch]
		sar	edi, 2
		test	edi, edi
		jle	short loc_10010444
		lea	edx, [esi+2]
		lea	ebx, [ebx+0]

loc_10010420:				; CODE XREF: sub_100102F0+152j
		mov	ecx, [edx-2]
		lea	edx, [edx+4]
		mov	eax, ecx
		mov	[edx-3], cl
		shr	eax, 18h
		mov	[edx-6], al
		mov	eax, ecx
		shr	eax, 10h
		mov	[edx-5], al
		mov	eax, ecx
		shr	eax, 8
		mov	[edx-4], al
		dec	edi
		jnz	short loc_10010420

loc_10010444:				; CODE XREF: sub_100102F0+113j
					; sub_100102F0+125j
		test	ebx, ebx
		jnz	short loc_100103DD

loc_10010448:				; CODE XREF: sub_100102F0+1E3j
					; sub_100102F0+205j
		movzx	eax, word ptr [esi]
		test	ax, ax
		jz	short loc_100103DD
		mov	ecx, eax
		mov	ebx, eax
		mov	eax, ebp
		shr	eax, 1
		cmp	ecx, eax
		ja	loc_100104FA
		movzx	eax, word ptr [esi+ecx*2+2]
		cmp	eax, ebp
		ja	loc_100104FA
		mov	ecx, 1
		movzx	edi, bp
		mov	eax, ecx
		cmp	ax, bx
		ja	loc_100103DD

loc_10010480:				; CODE XREF: sub_100102F0+1B8j
		movzx	eax, cx
		lea	edx, [esi+eax*2]
		movzx	eax, word ptr [edx+2]
		cmp	eax, 4
		jb	loc_100103DD
		movzx	edx, word ptr [edx]
		cmp	dx, di
		ja	short loc_100104FA
		cmp	ax, dx
		ja	short loc_100104FA
		add	ecx, 2
		mov	edi, eax
		cmp	cx, bx
		jbe	short loc_10010480
		pop	esi
		pop	ebx
		pop	edi
		xor	eax, eax
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_100104B1:				; CODE XREF: sub_100102F0+117j
		movzx	ecx, word ptr [esi]
		mov	eax, ecx
		mov	[esi+1], cl
		shr	eax, 8
		mov	[esi], al
		mov	eax, ebp
		movzx	edi, word ptr [esi]
		add	edi, 2
		shr	eax, 1
		cmp	edi, eax
		ja	short loc_100104FA
		mov	edx, 1
		cmp	edi, edx
		jl	loc_10010448
		lea	esp, [esp+0]

loc_100104E0:				; CODE XREF: sub_100102F0+203j
		movzx	ecx, word ptr [esi+edx*2]
		mov	eax, ecx
		mov	[esi+edx*2+1], cl
		shr	eax, 8
		mov	[esi+edx*2], al
		inc	edx
		cmp	edx, edi
		jle	short loc_100104E0
		jmp	loc_10010448
; ---------------------------------------------------------------------------

loc_100104FA:				; CODE XREF: sub_100102F0+16Aj
					; sub_100102F0+177j ...
		pop	esi
		pop	ebx
		pop	edi
		mov	eax, 0FFFFFC19h
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_10010504:				; CODE XREF: sub_100102F0+16j
					; sub_100102F0+21j
		mov	ecx, [esp+8+arg_4]
		xor	eax, eax
		mov	[ecx], ax
		movzx	eax, word ptr [edi+0Ch]
		sub	ax, 6
		mov	[ecx+2], ax
		movzx	eax, word ptr [edi+0Ch]
		pop	edi
		mov	[ecx+4], ax
		xor	eax, eax
		pop	ebp
		retn
sub_100102F0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10010530	proc near		; CODE XREF: sub_1000F3E0+4Ap
					; sub_10010DA0+28Ep

arg_0		= dword	ptr  4
arg_4		= word ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebx
		mov	ebx, [esp+4+arg_0]
		push	ebp
		push	dword ptr [ebx+0Ch] ; Size
		call	ds:malloc
		mov	ebp, eax
		add	esp, 4
		test	ebp, ebp
		jnz	short loc_1001054E
		lea	eax, [ebp+1]
		pop	ebp
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1001054E:				; CODE XREF: sub_10010530+16j
		inc	dword ptr [ebx+1BCh]
		push	esi
		push	edi
		mov	edi, [esp+10h+arg_8]
		lea	ebx, [edi-1]
		sar	ebx, 5
		lea	esi, ds:4[ebx*4]
		push	esi		; Size
		push	0		; Val
		push	ebp		; Dst
		call	memset
		mov	eax, [esp+1Ch+arg_0]
		mov	eax, [eax+0Ch]
		sub	eax, esi
		push	eax		; Size
		lea	eax, [esi+ebp]
		push	0FFh		; Val
		push	eax		; Dst
		call	memset
		mov	edx, [esp+28h+arg_0]
		and	edi, 1Fh
		add	esp, 18h
		or	eax, 0FFFFFFFFh
		mov	ecx, edi
		shl	eax, cl
		mov	ecx, [esp+10h+arg_C]
		mov	[ebp+ebx*4+0], eax
		or	dword ptr [ebp+0], 1
		mov	ax, [esp+10h+arg_4]
		pop	edi
		mov	[edx+ecx*2+0C4h], ax
		xor	eax, eax
		pop	esi
		mov	[edx+ecx*4+13Ch], ebp
		pop	ebp
		pop	ebx
		retn
sub_10010530	endp


; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_100105C0(int,	void *,	int, int, int)
sub_100105C0	proc near		; CODE XREF: sub_1000E7C0+F4p
					; sub_1000F970+59p ...

var_410		= dword	ptr -410h
var_40C		= dword	ptr -40Ch
var_408		= dword	ptr -408h
Dst		= byte ptr -404h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		sub	esp, 410h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+410h+var_4], eax
		push	ebx
		mov	ebx, [esp+414h+arg_4]
		push	esi
		mov	esi, [esp+418h+arg_8]
		push	edi
		mov	edi, [esp+41Ch+arg_0]
		mov	[esp+41Ch+var_40C], esi
		cmp	dword ptr [edi+114h], 0FFFFFFFFh
		mov	ecx, [edi+0Ch]
		mov	[esp+41Ch+var_408], ecx
		jnz	short loc_1001062C
		push	edi
		call	sub_10010C50
		add	esp, 4
		test	eax, eax
		jz	short loc_10010628
		pop	edi
		pop	esi
		or	eax, 0FFFFFFFFh
		pop	ebx
		mov	ecx, [esp+410h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 410h
		retn
; ---------------------------------------------------------------------------

loc_10010628:				; CODE XREF: sub_100105C0+4Bj
		mov	ecx, [esp+41Ch+var_408]

loc_1001062C:				; CODE XREF: sub_100105C0+3Ej
		cmp	dword ptr [edi+8], 4D2h
		mov	eax, [edi+114h]
		mov	[esp+41Ch+var_410], eax
		jz	loc_100106D9
		cmp	[esp+41Ch+arg_10], 0
		jz	short loc_10010686
		mov	esi, [edi+0Ch]
		sar	esi, 2
		test	esi, esi
		jle	short loc_100106D5
		lea	edx, [ebx+2]
		lea	ebx, [ebx+0]

loc_10010660:				; CODE XREF: sub_100105C0+C2j
		mov	ecx, [edx-2]
		lea	edx, [edx+4]
		mov	eax, ecx
		mov	[edx-3], cl
		shr	eax, 18h
		mov	[edx-6], al
		mov	eax, ecx
		shr	eax, 10h
		mov	[edx-5], al
		mov	eax, ecx
		shr	eax, 8
		mov	[edx-4], al
		dec	esi
		jnz	short loc_10010660
		jmp	short loc_100106D5
; ---------------------------------------------------------------------------

loc_10010686:				; CODE XREF: sub_100105C0+8Bj
		movzx	esi, word ptr [ebx]
		mov	eax, ecx
		add	esi, 2
		shr	eax, 1
		cmp	esi, eax
		jbe	short loc_100106B1
		pop	edi
		pop	esi
		mov	eax, 0FFFFFC19h
		pop	ebx
		mov	ecx, [esp+410h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 410h
		retn
; ---------------------------------------------------------------------------

loc_100106B1:				; CODE XREF: sub_100105C0+D2j
		xor	edx, edx
		test	esi, esi
		js	short loc_100106D5
		jmp	short loc_100106C0
; ---------------------------------------------------------------------------
		align 10h

loc_100106C0:				; CODE XREF: sub_100105C0+F7j
					; sub_100105C0+113j
		movzx	ecx, word ptr [ebx+edx*2]
		mov	eax, ecx
		mov	[ebx+edx*2+1], cl
		shr	eax, 8
		mov	[ebx+edx*2], al
		inc	edx
		cmp	edx, esi
		jle	short loc_100106C0

loc_100106D5:				; CODE XREF: sub_100105C0+95j
					; sub_100105C0+C4j ...
		mov	esi, [esp+41Ch+var_40C]

loc_100106D9:				; CODE XREF: sub_100105C0+7Dj
		cmp	[esp+41Ch+arg_C], 0
		push	ebp
		jz	short loc_10010708
		test	esi, esi
		jz	short loc_100106FF
		lea	eax, [esi+1]
		push	eax
		call	sub_1000FF00
		mov	ebp, [edi+3Ch]
		add	esp, 4
		mov	eax, [edi+eax*4+40h]
		add	ebp, eax
		jmp	short loc_1001073A
; ---------------------------------------------------------------------------

loc_100106FF:				; CODE XREF: sub_100105C0+126j
		mov	ebp, [edi+3Ch]
		xor	eax, eax
		add	ebp, eax
		jmp	short loc_1001073A
; ---------------------------------------------------------------------------

loc_10010708:				; CODE XREF: sub_100105C0+122j
		mov	ecx, esi
		mov	ebp, 1
		shr	ecx, 0Bh
		shl	ebp, cl
		lea	eax, [ebp-1]
		test	eax, eax
		jz	short loc_1001072A
		push	ebp
		call	sub_1000FF00
		add	esp, 4
		mov	eax, [edi+eax*4+40h]
		jmp	short loc_1001072C
; ---------------------------------------------------------------------------

loc_1001072A:				; CODE XREF: sub_100105C0+159j
		xor	eax, eax

loc_1001072C:				; CODE XREF: sub_100105C0+168j
		and	esi, 7FFh
		add	esi, [edi+3Ch]
		add	esi, ebp
		lea	ebp, [eax-1]

loc_1001073A:				; CODE XREF: sub_100105C0+13Dj
					; sub_100105C0+146j
		mov	ecx, [edi+10h]
		add	ebp, esi
		mov	esi, ds:_lseek
		push	2		; int
		push	0		; __int32
		push	[esp+428h+var_410] ; int
		shl	ebp, cl
		call	esi ; _lseek
		add	esp, 0Ch
		test	eax, eax
		jns	short loc_1001075E
		mov	esi, [esp+420h+var_410]
		jmp	short loc_100107D1
; ---------------------------------------------------------------------------

loc_1001075E:				; CODE XREF: sub_100105C0+196j
		cmp	ebp, eax
		jg	short loc_10010771
		push	0		; int
		push	ebp		; __int32
		push	[esp+428h+var_410] ; int
		call	esi ; _lseek
		mov	esi, [esp+42Ch+var_410]
		jmp	short loc_100107CE
; ---------------------------------------------------------------------------

loc_10010771:				; CODE XREF: sub_100105C0+1A0j
		mov	esi, ebp
		push	400h		; Size
		sub	esi, eax
		lea	eax, [esp+424h+Dst]
		push	0		; Val
		push	eax		; Dst
		call	memset
		add	esp, 0Ch
		test	esi, esi
		jle	short loc_100107C0
		lea	ecx, [ecx+0]

loc_10010790:				; CODE XREF: sub_100105C0+1FEj
		mov	eax, esi
		cmp	esi, 400h
		jl	short loc_1001079F
		mov	eax, 400h

loc_1001079F:				; CODE XREF: sub_100105C0+1D8j
		push	eax		; unsigned int
		lea	eax, [esp+424h+Dst]
		push	eax		; void *
		push	[esp+428h+var_410] ; int
		call	ds:_write
		add	esp, 0Ch
		test	eax, eax
		js	short loc_100107FE
		sub	esi, 400h
		test	esi, esi
		jg	short loc_10010790

loc_100107C0:				; CODE XREF: sub_100105C0+1CBj
		mov	esi, [esp+420h+var_410]
		push	0		; int
		push	ebp		; __int32
		push	esi		; int
		call	ds:_lseek

loc_100107CE:				; CODE XREF: sub_100105C0+1AFj
		add	esp, 0Ch

loc_100107D1:				; CODE XREF: sub_100105C0+19Cj
		cmp	eax, 0FFFFFFFFh
		jz	short loc_100107FE
		push	[esp+420h+var_408] ; unsigned int
		push	ebx		; void *
		push	esi		; int
		call	ds:_write
		add	esp, 0Ch
		cmp	eax, 0FFFFFFFFh
		jz	short loc_100107FE
		mov	ecx, [esp+420h+var_408]
		cmp	eax, ecx
		jz	short loc_1001081A
		call	ds:_errno
		mov	dword ptr [eax], 16h

loc_100107FE:				; CODE XREF: sub_100105C0+1F4j
					; sub_100105C0+214j ...
		or	eax, 0FFFFFFFFh

loc_10010801:				; CODE XREF: sub_100105C0+2B6j
					; sub_100105C0+2EBj
		mov	ecx, [esp+420h+var_4]
		pop	ebp
		pop	edi
		pop	esi
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 410h
		retn
; ---------------------------------------------------------------------------

loc_1001081A:				; CODE XREF: sub_100105C0+230j
		lea	eax, [ecx+ebp]
		cmp	eax, [edi+1E0h]
		jbe	short loc_1001082C
		mov	byte ptr [edi+1E5h], 1

loc_1001082C:				; CODE XREF: sub_100105C0+263j
		cmp	dword ptr [edi+8], 4D2h
		jz	short loc_100108A9
		cmp	[esp+420h+arg_10], 0
		jz	short loc_10010878
		mov	esi, [edi+0Ch]
		sar	esi, 2
		test	esi, esi
		jle	short loc_100108A9
		lea	edx, [ebx+2]
		lea	esp, [esp+0]

loc_10010850:				; CODE XREF: sub_100105C0+2B2j
		mov	ecx, [edx-2]
		lea	edx, [edx+4]
		mov	eax, ecx
		mov	[edx-3], cl
		shr	eax, 18h
		mov	[edx-6], al
		mov	eax, ecx
		shr	eax, 10h
		mov	[edx-5], al
		mov	eax, ecx
		shr	eax, 8
		mov	[edx-4], al
		dec	esi
		jnz	short loc_10010850
		xor	eax, eax
		jmp	short loc_10010801
; ---------------------------------------------------------------------------

loc_10010878:				; CODE XREF: sub_100105C0+27Dj
		movzx	ecx, word ptr [ebx]
		mov	edx, 1
		mov	eax, ecx
		mov	[ebx+1], cl
		shr	eax, 8
		mov	[ebx], al
		movzx	esi, word ptr [ebx]
		add	esi, 2
		cmp	esi, edx
		jl	short loc_100108A9

loc_10010894:				; CODE XREF: sub_100105C0+2E7j
		movzx	ecx, word ptr [ebx+edx*2]
		mov	eax, ecx
		mov	[ebx+edx*2+1], cl
		shr	eax, 8
		mov	[ebx+edx*2], al
		inc	edx
		cmp	edx, esi
		jle	short loc_10010894

loc_100108A9:				; CODE XREF: sub_100105C0+273j
					; sub_100105C0+287j ...
		xor	eax, eax
		jmp	loc_10010801
sub_100105C0	endp


; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_100108B0(size_t Size,	int, int)
sub_100108B0	proc near		; CODE XREF: sub_1000E330+AFp

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
Size		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 2Ch
		push	ebx
		push	ebp
		push	esi
		push	edi
		mov	edi, [esp+3Ch+Size]
		push	0
		push	0
		push	[esp+44h+arg_4]
		movzx	eax, word ptr [edi+0Ch]
		push	edi
		mov	ebx, eax
		mov	ebp, eax
		call	sub_1000FA80
		mov	esi, eax
		add	esp, 10h
		mov	[esp+3Ch+var_20], esi
		test	esi, esi
		jnz	short loc_100108E9

loc_100108DE:				; CODE XREF: sub_100108B0+52j
		pop	edi
		pop	esi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------

loc_100108E9:				; CODE XREF: sub_100108B0+2Cj
		push	0
		push	0
		push	[esp+44h+arg_8]
		push	edi
		call	sub_1000FA80
		mov	ecx, eax
		add	esp, 10h
		mov	[esp+3Ch+var_1C], ecx
		test	ecx, ecx
		jz	short loc_100108DE
		or	byte ptr [esi+15h], 9
		or	byte ptr [ecx+15h], 9
		mov	eax, [ecx+10h]
		xor	ecx, ecx
		mov	edi, [esi+10h]
		mov	[esp+3Ch+var_18], eax
		mov	eax, 1
		mov	edx, eax
		mov	[esp+3Ch+var_28], ecx
		mov	[esp+3Ch+var_24], eax
		mov	[esp+3Ch+var_2C], eax
		cmp	dx, [edi]
		jnb	loc_10010A48

loc_10010934:				; CODE XREF: sub_100108B0+18Ej
		movzx	eax, ax
		cmp	word ptr [edi+eax*2+2],	4
		lea	esi, [edi+eax*2]
		jb	loc_10010A8A
		movzx	ecx, word ptr [esi]
		lea	edx, [ecx+edi]
		mov	[esp+3Ch+var_8], edx
		cmp	ecx, ebp
		ja	loc_10010A7D
		mov	eax, ebp
		sub	eax, ecx
		push	eax
		push	edx
		push	[esp+44h+Size]
		mov	[esp+48h+var_14], eax
		mov	[esp+48h+var_4], eax
		call	sub_1000E300
		add	esp, 0Ch
		cmp	eax, [esp+3Ch+arg_4]
		jnz	short loc_100109D5
		sub	ebx, ebp
		movzx	eax, bx
		test	ax, ax
		jz	short loc_100109C6
		movzx	ecx, word ptr [esi+2]
		add	eax, ecx
		movzx	ebx, ax
		mov	eax, ecx
		sub	ebp, eax
		add	eax, edi
		push	ebp		; Size
		push	eax		; Src
		lea	eax, [edi+ebx]
		push	eax		; Dst
		call	ds:memmove
		mov	eax, [esp+48h+var_2C]
		add	esp, 0Ch
		movzx	eax, ax
		lea	ecx, [edi+eax*2]
		mov	ax, [esi]
		sub	ax, [esi+2]
		add	ax, bx
		mov	[ecx+2], bx
		add	[esp+3Ch+var_2C], 2
		mov	[ecx], ax
		mov	ecx, [esp+3Ch+var_28]
		jmp	short loc_10010A2C
; ---------------------------------------------------------------------------

loc_100109C6:				; CODE XREF: sub_100108B0+D0j
		movzx	ebx, word ptr [esi+2]
		add	[esp+3Ch+var_2C], 2
		mov	ecx, [esp+3Ch+var_28]
		jmp	short loc_10010A2C
; ---------------------------------------------------------------------------

loc_100109D5:				; CODE XREF: sub_100108B0+C6j
		movzx	ecx, word ptr [esi+2]
		mov	ebp, [esp+3Ch+var_18]
		movzx	edx, word ptr [esi]
		sub	edx, ecx
		lea	eax, [ecx+edi]
		mov	[esp+3Ch+var_C], edx
		cmp	word ptr [ebp+4], 4
		mov	[esp+3Ch+var_10], eax
		jb	loc_10010A7D
		movzx	eax, word ptr [ebp+0]
		movzx	ecx, word ptr [ebp+eax*2+2]
		mov	eax, [esp+3Ch+var_14]
		add	eax, 8
		add	eax, edx
		cmp	eax, ecx
		ja	short loc_10010A7D
		lea	eax, [esp+3Ch+var_10]
		push	eax
		lea	eax, [esp+40h+var_8]
		push	eax
		push	ebp
		call	sub_100110B0
		mov	ecx, [esp+48h+var_28]
		add	esp, 0Ch
		add	ecx, 2
		mov	[esp+3Ch+var_28], ecx

loc_10010A2C:				; CODE XREF: sub_100108B0+114j
					; sub_100108B0+123j
		mov	eax, [esp+3Ch+var_24]
		movzx	ebp, word ptr [esi+2]
		add	eax, 2
		mov	[esp+3Ch+var_24], eax
		cmp	ax, [edi]
		jb	loc_10010934
		mov	esi, [esp+3Ch+var_20]

loc_10010A48:				; CODE XREF: sub_100108B0+7Ej
		sub	[edi], cx
		mov	ecx, ebx
		movzx	edx, word ptr [edi]
		lea	eax, [edx+edx]
		sub	ecx, eax
		mov	eax, edx
		sub	ecx, 6
		mov	[edi+eax*2+2], cx
		movzx	eax, word ptr [edi]
		mov	[edi+eax*2+4], bx
		and	byte ptr [esi+15h], 0F7h
		mov	esi, [esp+3Ch+var_1C]
		pop	edi
		and	byte ptr [esi+15h], 0F7h
		xor	eax, eax
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------

loc_10010A7D:				; CODE XREF: sub_100108B0+A2j
					; sub_100108B0+142j ...
		pop	edi
		pop	esi
		pop	ebp
		mov	eax, 0FFFFFC19h
		pop	ebx
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------

loc_10010A8A:				; CODE XREF: sub_100108B0+90j
		mov	esi, [esp+3Ch+var_1C]
		mov	edi, [esp+3Ch+var_20]
		movzx	eax, cx
		push	eax		; int
		movzx	eax, bx
		push	eax		; int
		push	esi		; int
		push	edi		; int
		push	[esp+4Ch+arg_4]	; int
		push	[esp+50h+Size]	; Size
		call	sub_10011210
		and	byte ptr [edi+15h], 0F7h
		add	esp, 18h
		and	byte ptr [esi+15h], 0F7h
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 2Ch
		retn
sub_100108B0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10010AC0	proc near		; CODE XREF: sub_10010240+73p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_0]
		push	edi
		mov	edi, [esp+8+arg_4]
		cmp	edi, [esi+1BCh]
		jnb	short loc_10010B23
		push	dword ptr [esi+0Ch] ; Size
		call	ds:malloc
		mov	ecx, eax
		add	esp, 4
		mov	[esi+edi*4+13Ch], ecx
		test	ecx, ecx
		jz	short loc_10010B23
		movzx	eax, word ptr [esi+edi*2+0C4h]
		push	1		; int
		push	1		; int
		push	0		; int
		push	eax		; int
		push	ecx		; void *
		push	esi		; int
		call	sub_100102F0
		add	esp, 18h
		test	eax, eax
		jz	short loc_10010B28
		push	dword ptr [esi+edi*4+13Ch] ; Memory
		call	ds:free
		add	esp, 4
		mov	dword ptr [esi+edi*4+13Ch], 0

loc_10010B23:				; CODE XREF: sub_10010AC0+10j
					; sub_10010AC0+29j
		pop	edi
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10010B28:				; CODE XREF: sub_10010AC0+46j
		mov	eax, [esi+edi*4+13Ch]
		pop	edi
		pop	esi
		retn
sub_10010AC0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10010B40	proc near		; CODE XREF: sub_100102F0+9Bp

Dst		= byte ptr -404h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 404h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+404h+var_4], eax
		mov	eax, ds:_lseek
		push	ebx
		mov	ebx, [esp+408h+arg_8]
		push	ebp
		mov	ebp, [esp+40Ch+arg_0]
		push	esi
		xor	esi, esi
		push	edi
		mov	edi, [esp+414h+arg_4]
		cmp	ebx, 1
		jnz	short loc_10010BA3
		push	1		; int
		cmp	edi, 1
		jge	short loc_10010B8C
		push	edi		; __int32
		push	ebp		; int
		call	eax ; _lseek
		add	esp, 0Ch
		jmp	loc_10010C2C
; ---------------------------------------------------------------------------

loc_10010B8C:				; CODE XREF: sub_10010B40+3Ej
		push	0		; __int32
		push	ebp		; int
		call	eax ; _lseek
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	loc_10010C2C
		mov	eax, ds:_lseek

loc_10010BA3:				; CODE XREF: sub_10010B40+37j
		push	2		; int
		push	0		; __int32
		push	ebp		; int
		call	eax ; _lseek
		add	esp, 0Ch
		test	eax, eax
		js	short loc_10010C2C
		test	ebx, ebx
		jz	short loc_10010BC5
		cmp	ebx, 1
		jnz	short loc_10010BBE
		add	edi, esi
		jmp	short loc_10010BC5
; ---------------------------------------------------------------------------

loc_10010BBE:				; CODE XREF: sub_10010B40+78j
		cmp	ebx, 2
		jnz	short loc_10010C29
		add	edi, eax

loc_10010BC5:				; CODE XREF: sub_10010B40+73j
					; sub_10010B40+7Cj
		cmp	edi, eax
		jle	short loc_10010C19
		mov	esi, edi
		push	400h		; Size
		sub	esi, eax
		lea	eax, [esp+418h+Dst]
		push	0		; Val
		push	eax		; Dst
		call	memset
		add	esp, 0Ch
		test	esi, esi
		jle	short loc_10010C19
		mov	ebx, ds:_write
		jmp	short loc_10010BF0
; ---------------------------------------------------------------------------
		align 10h

loc_10010BF0:				; CODE XREF: sub_10010B40+ABj
					; sub_10010B40+D7j
		mov	eax, esi
		cmp	esi, 400h
		jl	short loc_10010BFF
		mov	eax, 400h

loc_10010BFF:				; CODE XREF: sub_10010B40+B8j
		push	eax		; unsigned int
		lea	eax, [esp+418h+Dst]
		push	eax		; void *
		push	ebp		; int
		call	ebx ; _write
		add	esp, 0Ch
		test	eax, eax
		js	short loc_10010C29
		sub	esi, 400h
		test	esi, esi
		jg	short loc_10010BF0

loc_10010C19:				; CODE XREF: sub_10010B40+87j
					; sub_10010B40+A3j
		mov	eax, ds:_lseek
		push	0		; int
		push	edi		; __int32
		push	ebp		; int
		call	eax ; _lseek
		add	esp, 0Ch
		jmp	short loc_10010C2C
; ---------------------------------------------------------------------------

loc_10010C29:				; CODE XREF: sub_10010B40+81j
					; sub_10010B40+CDj
		or	eax, 0FFFFFFFFh

loc_10010C2C:				; CODE XREF: sub_10010B40+47j
					; sub_10010B40+58j ...
		mov	ecx, [esp+414h+var_4]
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 404h
		retn
sub_10010B40	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10010C50	proc near		; CODE XREF: sub_100105C0+41p

Src		= byte ptr -404h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		sub	esp, 404h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+404h+var_4], eax
		push	ebx
		mov	ebx, [esp+408h+arg_0]
		push	esi
		mov	esi, ds:getenv
		push	offset aTmp	; "TMP"
		mov	[esp+410h+Src],	0
		call	esi ; getenv
		mov	edx, eax
		add	esp, 4
		test	edx, edx
		jnz	short loc_10010CAD
		push	offset aTmpdir	; "TMPDIR"
		call	esi ; getenv
		mov	edx, eax
		add	esp, 4
		test	edx, edx
		jnz	short loc_10010CAD
		push	offset aTemp	; "TEMP"
		call	esi ; getenv
		mov	edx, eax
		add	esp, 4
		test	edx, edx
		jnz	short loc_10010CAD
		mov	edx, offset a_	; "."

loc_10010CAD:				; CODE XREF: sub_10010C50+36j
					; sub_10010C50+46j ...
		mov	ecx, edx
		lea	esi, [ecx+1]

loc_10010CB2:				; CODE XREF: sub_10010C50+67j
		mov	al, [ecx]
		inc	ecx
		test	al, al
		jnz	short loc_10010CB2
		sub	ecx, esi
		jz	short loc_10010CDD
		cmp	ecx, 3F3h
		jnb	short loc_10010CDD
		lea	esi, [esp+40Ch+Src]
		mov	ecx, edx
		sub	esi, edx
		lea	ecx, [ecx+0]

loc_10010CD0:				; CODE XREF: sub_10010C50+8Bj
		mov	al, [ecx]
		lea	ecx, [ecx+1]
		mov	[esi+ecx-1], al
		test	al, al
		jnz	short loc_10010CD0

loc_10010CDD:				; CODE XREF: sub_10010C50+6Bj
					; sub_10010C50+73j
		lea	ecx, [esp+40Ch+Src]
		lea	esi, [ecx+1]

loc_10010CE4:				; CODE XREF: sub_10010C50+99j
		mov	al, [ecx]
		inc	ecx
		test	al, al
		jnz	short loc_10010CE4
		sub	ecx, esi
		mov	al, [ecx+edx-1]
		cmp	al, 2Fh
		jz	short loc_10010CFE
		mov	edx, offset a_hashxxxxxx ; "/_hashXXXXXX"
		cmp	al, 5Ch
		jnz	short loc_10010D03

loc_10010CFE:				; CODE XREF: sub_10010C50+A3j
		mov	edx, (offset a_hashxxxxxx+1) ; "_hashXXXXXX"

loc_10010D03:				; CODE XREF: sub_10010C50+ACj
		mov	esi, edx

loc_10010D05:				; CODE XREF: sub_10010C50+BAj
		mov	al, [edx]
		inc	edx
		test	al, al
		jnz	short loc_10010D05
		push	edi
		lea	edi, [esp+410h+Src]
		sub	edx, esi
		dec	edi

loc_10010D14:				; CODE XREF: sub_10010C50+CAj
		mov	al, [edi+1]
		inc	edi
		test	al, al
		jnz	short loc_10010D14
		mov	ecx, edx
		lea	eax, [esp+410h+Src]
		shr	ecx, 2
		rep movsd
		mov	ecx, edx
		and	ecx, 3
		push	8040h		; int
		rep movsb
		push	eax		; char *
		call	sub_10012330
		add	esp, 8
		mov	[ebx+114h], eax
		pop	edi
		cmp	eax, 0FFFFFFFFh
		jz	short loc_10010D77
		mov	eax, [ebx+118h]
		test	eax, eax
		jz	short loc_10010D5C
		push	eax		; Memory
		call	ds:free
		add	esp, 4

loc_10010D5C:				; CODE XREF: sub_10010C50+100j
		lea	eax, [esp+40Ch+Src]
		push	eax		; Src
		call	ds:strdup
		add	esp, 4
		mov	[ebx+118h], eax
		mov	byte ptr [ebx+1E4h], 1

loc_10010D77:				; CODE XREF: sub_10010C50+F6j
		mov	ecx, [esp+40Ch+var_4]
		xor	eax, eax
		cmp	dword ptr [ebx+114h], 0FFFFFFFFh
		pop	esi
		setnz	al
		pop	ebx
		xor	ecx, esp
		dec	eax
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 404h
		retn
sub_10010C50	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10010DA0	proc near		; CODE XREF: sub_1000FF20+31p

var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		sub	esp, 14h
		push	ebx
		push	ebp
		push	esi
		push	edi
		mov	edi, [esp+24h+arg_0]
		xor	ebp, ebp
		mov	ebx, [edi+20h]
		mov	esi, [edi+10h]
		mov	edx, [edi+ebx*4+44h]
		dec	edx
		lea	ecx, [esi+3]
		mov	eax, edx
		sar	eax, cl
		lea	ecx, [esi+3]
		mov	[esp+24h+arg_0], eax
		mov	eax, [edi+0Ch]
		lea	eax, ds:0FFFFFFFFh[eax*8]
		and	eax, edx
		mov	edx, [esp+24h+arg_0]
		mov	[esp+24h+var_4], eax
		mov	eax, [edi+24h]
		sar	eax, cl
		mov	[esp+24h+var_8], eax
		mov	esi, eax
		mov	[esp+24h+var_C], esi
		cmp	eax, edx
		ja	loc_10010ED8
		add	eax, 4Fh
		mov	ecx, esi
		add	ecx, 62h
		lea	eax, [edi+eax*4]
		lea	ecx, [edi+ecx*2]
		mov	[esp+24h+var_10], eax
		mov	[esp+24h+var_14], ecx

loc_10010E07:				; CODE XREF: sub_10010DA0+132j
		mov	ebp, [eax]
		test	ebp, ebp
		jnz	short loc_10010E65
		cmp	esi, [edi+1BCh]
		jnb	loc_10010F14
		push	dword ptr [edi+0Ch] ; Size
		call	ds:malloc
		mov	ebp, [esp+28h+var_10]
		mov	ecx, eax
		add	esp, 4
		mov	[ebp+0], ecx
		test	ecx, ecx
		jz	loc_10010F14
		mov	eax, [esp+24h+var_14]
		push	1		; int
		push	1		; int
		push	0		; int
		movzx	eax, word ptr [eax]
		push	eax		; int
		push	ecx		; void *
		push	edi		; int
		call	sub_100102F0
		add	esp, 18h
		test	eax, eax
		jnz	loc_10010EF9
		mov	ebp, [ebp+0]
		test	ebp, ebp
		jz	loc_10010F14
		mov	edx, [esp+24h+arg_0]

loc_10010E65:				; CODE XREF: sub_10010DA0+6Bj
		cmp	esi, edx
		jnz	short loc_10010E6F
		mov	ecx, [esp+24h+var_4]
		jmp	short loc_10010E79
; ---------------------------------------------------------------------------

loc_10010E6F:				; CODE XREF: sub_10010DA0+C7j
		mov	eax, [edi+0Ch]
		lea	ecx, ds:0FFFFFFFFh[eax*8]

loc_10010E79:				; CODE XREF: sub_10010DA0+CDj
		cmp	esi, [esp+24h+var_8]
		jnz	short loc_10010EA0
		mov	eax, [edi+0Ch]
		lea	esi, ds:0FFFFFFFFh[eax*8]
		and	esi, [edi+24h]
		mov	eax, esi
		cdq
		and	edx, 1Fh
		add	eax, edx
		mov	edx, [esp+24h+arg_0]
		sar	eax, 5
		and	esi, 0FFFFFFE0h
		jmp	short loc_10010EA4
; ---------------------------------------------------------------------------

loc_10010EA0:				; CODE XREF: sub_10010DA0+DDj
		xor	esi, esi
		xor	eax, eax

loc_10010EA4:				; CODE XREF: sub_10010DA0+FEj
		cmp	esi, ecx
		jg	short loc_10010EB7

loc_10010EA8:				; CODE XREF: sub_10010DA0+115j
		cmp	dword ptr [ebp+eax*4+0], 0FFFFFFFFh
		jnz	short loc_10010F1E
		add	esi, 20h
		inc	eax
		cmp	esi, ecx
		jle	short loc_10010EA8

loc_10010EB7:				; CODE XREF: sub_10010DA0+106j
		mov	esi, [esp+24h+var_C]
		mov	eax, [esp+24h+var_10]
		inc	esi
		add	[esp+24h+var_14], 2
		add	eax, 4
		mov	[esp+24h+var_C], esi
		mov	[esp+24h+var_10], eax
		cmp	esi, edx
		jbe	loc_10010E07

loc_10010ED8:				; CODE XREF: sub_10010DA0+4Bj
		mov	eax, [edi+ebx*4+44h]
		lea	ecx, [edi+ebx*4]
		mov	[edi+24h], eax
		inc	dword ptr [ecx+44h]
		mov	esi, [ecx+44h]
		test	ebx, ebx
		jz	loc_10010FBD
		mov	eax, [edi+ebx*4+40h]
		jmp	loc_10010FBF
; ---------------------------------------------------------------------------

loc_10010EF9:				; CODE XREF: sub_10010DA0+B0j
		push	dword ptr [edi+esi*4+13Ch] ; Memory
		call	ds:free
		add	esp, 4
		mov	dword ptr [edi+esi*4+13Ch], 0

loc_10010F14:				; CODE XREF: sub_10010DA0+73j
					; sub_10010DA0+90j ...
		pop	edi
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		add	esp, 14h
		retn
; ---------------------------------------------------------------------------

loc_10010F1E:				; CODE XREF: sub_10010DA0+10Dj
		mov	eax, [ebp+eax*4+0]
		mov	edx, 1
		xor	ecx, ecx
		lea	esp, [esp+0]

loc_10010F30:				; CODE XREF: sub_10010DA0+19Aj
		test	edx, eax
		jz	short loc_10010F3C
		inc	ecx
		add	edx, edx
		cmp	ecx, 20h
		jb	short loc_10010F30

loc_10010F3C:				; CODE XREF: sub_10010DA0+192j
		add	esi, ecx
		mov	eax, esi
		mov	ecx, esi
		cdq
		and	edx, 1Fh
		add	eax, edx
		sar	eax, 5
		lea	edx, ds:0[eax*4]
		and	ecx, 8000001Fh
		jns	short loc_10010F5F
		dec	ecx
		or	ecx, 0FFFFFFE0h
		inc	ecx

loc_10010F5F:				; CODE XREF: sub_10010DA0+1B8j
		mov	eax, 1
		shl	eax, cl
		or	[edx+ebp], eax
		mov	edx, [edi+0Ch]
		shl	edx, 3
		imul	edx, [esp+24h+var_C]
		inc	edx
		add	edx, esi
		cmp	edx, [edi+24h]
		jl	short loc_10010F82
		lea	eax, [edx-1]
		mov	[edi+24h], eax

loc_10010F82:				; CODE XREF: sub_10010DA0+1DAj
		xor	eax, eax
		test	ebx, ebx
		jz	short loc_10010FA4
		lea	ecx, [edi+44h]
		jmp	short loc_10010F90
; ---------------------------------------------------------------------------
		align 10h

loc_10010F90:				; CODE XREF: sub_10010DA0+1EBj
					; sub_10010DA0+1FAj
		cmp	edx, [ecx]
		jle	short loc_10010F9C
		inc	eax
		add	ecx, 4
		cmp	eax, ebx
		jb	short loc_10010F90

loc_10010F9C:				; CODE XREF: sub_10010DA0+1F2j
		test	eax, eax
		jz	short loc_10010FA4
		sub	edx, [edi+eax*4+40h]

loc_10010FA4:				; CODE XREF: sub_10010DA0+1E6j
					; sub_10010DA0+1FEj
		cmp	edx, 7FFh
		jge	loc_10010F14
		pop	edi
		pop	esi
		shl	eax, 0Bh
		pop	ebp
		add	eax, edx
		pop	ebx
		add	esp, 14h
		retn
; ---------------------------------------------------------------------------

loc_10010FBD:				; CODE XREF: sub_10010DA0+14Aj
		xor	eax, eax

loc_10010FBF:				; CODE XREF: sub_10010DA0+154j
		sub	esi, eax
		cmp	esi, 7FFh
		jle	short loc_1001100A
		inc	ebx
		cmp	ebx, 20h
		jl	short loc_10010FF5

loc_10010FCF:				; CODE XREF: sub_10010DA0+280j
					; sub_10010DA0+2B2j
		call	ds:__iob_func
		add	eax, 40h
		push	eax		; File
		push	31h		; Count
		push	1		; Size
		push	offset aHashOutOfOverf ; "HASH:	Out of overflow	pages.	Increase "...
		call	ds:fwrite
		add	esp, 10h
		xor	eax, eax
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 14h
		retn
; ---------------------------------------------------------------------------

loc_10010FF5:				; CODE XREF: sub_10010DA0+22Dj
		mov	[edi+20h], ebx
		mov	esi, 1
		mov	eax, [edi+ebx*4+40h]
		mov	[edi+ebx*4+44h], eax
		dec	eax
		mov	[edi+ebx*4+40h], eax

loc_1001100A:				; CODE XREF: sub_10010DA0+227j
		mov	eax, [edi+0Ch]
		mov	ecx, [esp+24h+var_4]
		lea	eax, ds:0FFFFFFFFh[eax*8]
		cmp	ecx, eax
		jnz	short loc_10011078
		inc	edx
		cmp	edx, 20h
		jge	short loc_10010FCF
		push	edx
		mov	eax, ebx
		shl	eax, 0Bh
		push	1
		add	eax, esi
		push	eax
		push	edi
		call	sub_10010530
		add	esp, 10h
		test	eax, eax
		jnz	loc_10010F14
		inc	dword ptr [edi+ebx*4+44h]
		lea	eax, [edi+ebx*4]
		inc	esi
		cmp	esi, 7FFh
		jle	short loc_1001109C
		inc	ebx
		cmp	ebx, 20h
		jge	loc_10010FCF
		mov	[edi+20h], ebx
		xor	esi, esi
		mov	eax, [edi+ebx*4+40h]
		mov	[edi+ebx*4+44h], eax
		dec	eax
		mov	[edi+ebx*4+40h], eax
		shl	ebx, 0Bh
		pop	edi
		lea	eax, [esi+ebx]
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 14h
		retn
; ---------------------------------------------------------------------------

loc_10011078:				; CODE XREF: sub_10010DA0+27Aj
		inc	ecx
		mov	eax, ecx
		cdq
		and	edx, 1Fh
		add	eax, edx
		sar	eax, 5
		and	ecx, 8000001Fh
		jns	short loc_10011091
		dec	ecx
		or	ecx, 0FFFFFFE0h
		inc	ecx

loc_10011091:				; CODE XREF: sub_10010DA0+2EAj
		mov	edx, 1
		shl	edx, cl
		or	[ebp+eax*4+0], edx

loc_1001109C:				; CODE XREF: sub_10010DA0+2ACj
		shl	ebx, 0Bh
		pop	edi
		lea	eax, [esi+ebx]
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 14h
		retn
sub_10010DA0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100110B0	proc near		; CODE XREF: sub_1000FFC0:loc_10010087p
					; sub_100108B0+169p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	ecx, [esp+arg_4]
		push	ebx
		push	ebp
		mov	ebp, [esp+8+arg_0]
		push	edi
		push	dword ptr [ecx+4] ; Size
		movzx	eax, word ptr [ebp+0]
		push	dword ptr [ecx]	; Src
		lea	ebx, [eax+1]
		mov	ax, [ebp+eax*2+4]
		sub	ax, [ecx+4]
		movzx	eax, ax
		mov	di, ax
		mov	[esp+14h+arg_0], eax
		movzx	eax, di
		add	eax, ebp
		push	eax		; Dst
		call	ds:memmove
		movzx	eax, bx
		mov	[ebp+eax*2+0], di
		mov	eax, [esp+18h+arg_8]
		push	dword ptr [eax+4] ; Size
		sub	di, [eax+4]
		push	dword ptr [eax]	; Src
		movzx	eax, di
		add	eax, ebp
		mov	word ptr [esp+20h+arg_0], di
		push	eax		; Dst
		call	ds:memmove
		mov	ecx, [esp+24h+arg_0]
		inc	ebx
		movzx	edx, bx
		add	esp, 18h
		lea	eax, [ebx+ebx]
		mov	[ebp+edx*2+0], di
		sub	ecx, eax
		mov	[ebp+0], bx
		sub	ecx, 6
		mov	[ebp+edx*2+4], di
		pop	edi
		mov	[ebp+edx*2+2], cx
		pop	ebp
		pop	ebx
		retn
sub_100110B0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10011140	proc near		; CODE XREF: sub_1000FFC0+100p

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 10h
		mov	ecx, [esp+10h+arg_4]
		push	ebx
		push	ebp
		push	esi
		mov	esi, [esp+1Ch+arg_0]
		push	edi
		movzx	eax, word ptr [esi]
		mov	edx, eax
		mov	[esp+20h+var_8], eax
		mov	[esp+20h+var_10], edx
		movzx	eax, word ptr [esi+edx*2+2]
		movzx	ebx, word ptr [esi+edx*2-2]
		mov	[esp+20h+var_4], eax
		mov	ax, [esi+edx*2+4]
		sub	ax, [ecx+4]
		movzx	eax, ax
		mov	bp, ax
		mov	[esp+20h+var_C], eax
		mov	[esi+edx*2-2], bp
		push	dword ptr [ecx+4] ; Size
		movzx	eax, bp
		push	dword ptr [ecx]	; Src
		add	eax, esi
		mov	esi, ds:memmove
		push	eax		; Dst
		call	esi ; memmove
		mov	edi, [esp+2Ch+arg_8]
		mov	ecx, [esp+2Ch+arg_0]
		mov	eax, [esp+2Ch+var_10]
		sub	bp, [edi+4]
		mov	[ecx+eax*2], bp
		push	dword ptr [edi+4] ; Size
		movzx	eax, bp
		push	dword ptr [edi]	; Src
		add	eax, ecx
		push	eax		; Dst
		call	esi ; memmove
		mov	edx, [esp+38h+arg_0]
		xor	ecx, ecx
		mov	eax, [esp+38h+var_8]
		add	esp, 18h
		add	eax, 2
		mov	[edx], ax
		mov	eax, [esp+20h+var_10]
		mov	[edx+eax*2+4], cx
		mov	ecx, [esp+20h+var_4]
		mov	[edx+eax*2+2], bx
		mov	eax, [esp+20h+arg_4]
		sub	cx, [eax+4]
		sub	cx, [edi+4]
		movzx	eax, word ptr [edx]
		sub	cx, 4
		pop	edi
		pop	esi
		mov	[edx+eax*2+2], cx
		movzx	eax, word ptr [edx]
		mov	[edx+eax*2+4], bp
		pop	ebp
		pop	ebx
		add	esp, 10h
		retn
sub_10011140	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_10011210(size_t Size,	int, int, int, int, int)
sub_10011210	proc near		; CODE XREF: sub_100108B0+1F4p

var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
Size		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch

		push	ebp
		mov	ebp, esp
		and	esp, 0FFFFFFF8h
		sub	esp, 54h
		push	ebx
		mov	ebx, [ebp+arg_C]
		xor	ecx, ecx
		push	esi
		mov	esi, [ebp+arg_8]
		mov	[esp+5Ch+var_3C], ecx
		mov	eax, [ebx+10h]
		mov	[esp+5Ch+var_2C], eax
		mov	edx, [esi+10h]
		mov	eax, [ebp+arg_10]
		movzx	eax, ax
		mov	[esp+5Ch+var_38], eax
		movzx	ecx, word ptr [edx]
		push	edi
		mov	[esp+60h+var_28], 0
		mov	[esp+60h+var_4C], esi
		lea	eax, [ecx-1]
		mov	[esp+60h+var_50], edx
		movzx	eax, ax
		mov	[esp+60h+var_44], edx
		mov	[esp+60h+var_40], eax
		cmp	ax, cx
		jnb	loc_10011518
		mov	ecx, eax
		jmp	short loc_10011270
; ---------------------------------------------------------------------------
		align 10h

loc_10011270:				; CODE XREF: sub_10011210+58j
					; sub_10011210+2F0j
		mov	eax, [esp+60h+var_28]
		inc	eax
		mov	[esp+60h+var_28], eax
		cmp	eax, 2710h
		ja	loc_1001152B
		movzx	eax, word ptr [edx+4]
		cmp	eax, 4
		jnb	short loc_100112F9
		test	ax, ax
		jz	short loc_100112F9
		lea	eax, [esp+60h+var_10]
		push	eax		; int
		push	[ebp+arg_4]	; int
		mov	eax, [esp+68h+var_4C]
		push	dword ptr [eax+0Ch] ; __int16
		push	eax		; int
		push	ebx		; int
		push	esi		; int
		push	[ebp+Size]	; Size
		call	sub_10011B00
		add	esp, 1Ch
		test	eax, eax
		jnz	loc_1001151A
		mov	esi, [esp+60h+var_C]
		test	esi, esi
		jz	loc_10011521
		mov	ebx, [esp+60h+var_10]
		mov	edi, [esi+10h]
		mov	[esp+60h+var_44], edi
		test	ebx, ebx
		jz	loc_10011521
		mov	eax, [ebx+10h]
		mov	[esp+60h+var_2C], eax
		mov	eax, [esp+60h+var_8]
		mov	[esp+60h+var_4C], eax
		test	eax, eax
		jz	loc_10011518
		mov	edx, [eax+10h]
		mov	[esp+60h+var_50], edx
		jmp	loc_1001138D
; ---------------------------------------------------------------------------

loc_100112F9:				; CODE XREF: sub_10011210+7Bj
					; sub_10011210+80j
		movzx	eax, cx
		cmp	word ptr [edx+eax*2+2],	0
		jnz	loc_10011391
		movzx	edi, word ptr [edx+eax*2]
		mov	eax, 0FFFEh
		sub	eax, [ebp+arg_14]
		add	[edx], ax
		mov	dx, [edx]
		mov	ecx, [esp+60h+var_38]
		push	0
		push	[esp+64h+var_4C]
		lea	eax, [edx+edx]
		sub	ecx, eax
		movzx	eax, dx
		mov	edx, [esp+68h+var_50]
		sub	ecx, 6
		push	edi
		mov	edi, [ebp+Size]
		push	edi
		mov	[edx+eax*2+2], cx
		movzx	eax, word ptr [edx]
		mov	ecx, [esp+70h+var_38]
		mov	[edx+eax*2+4], cx
		call	sub_1000FA80
		add	esp, 10h
		mov	[esp+60h+var_4C], eax
		test	eax, eax
		jz	loc_10011521
		movzx	ecx, word ptr [edi+0Ch]
		mov	edx, [eax+10h]
		mov	[esp+60h+var_38], ecx
		mov	ecx, [esp+60h+var_3C]
		mov	[esp+60h+var_50], edx
		mov	[ebp+arg_14], 0
		test	ecx, ecx
		jz	short loc_1001138D
		push	ecx
		push	edi
		call	sub_10010240
		mov	edx, [esp+68h+var_50]
		add	esp, 8
		mov	eax, [esp+60h+var_4C]

loc_1001138D:				; CODE XREF: sub_10011210+E4j
					; sub_10011210+169j
		mov	[esp+60h+var_3C], eax

loc_10011391:				; CODE XREF: sub_10011210+F2j
		mov	eax, [ebp+Size]
		movzx	ecx, word ptr [eax+0Ch]
		mov	[esp+60h+var_24], ecx
		mov	ecx, 1
		mov	edi, ecx
		mov	[esp+60h+var_40], ecx
		cmp	di, [edx]
		mov	edi, [esp+60h+var_44]
		jnb	loc_100114FD

loc_100113B4:				; CODE XREF: sub_10011210+2E4j
		movzx	eax, cx
		cmp	word ptr [edx+eax*2+2],	4
		lea	eax, [edx+eax*2]
		mov	[esp+60h+var_34], eax
		jb	loc_100114FA
		movzx	eax, word ptr [eax]
		mov	ecx, [esp+60h+var_24]
		add	edx, eax
		movzx	ecx, cx
		sub	ecx, eax
		mov	[esp+60h+var_48], eax
		mov	eax, [esp+60h+var_50]
		mov	[esp+60h+var_30], ecx
		push	[esp+60h+var_30]
		mov	[esp+64h+var_14], ecx
		mov	ecx, [esp+64h+var_34]
		push	edx
		push	[ebp+Size]
		mov	[esp+6Ch+var_18], edx
		movzx	ecx, word ptr [ecx+2]
		add	eax, ecx
		mov	[esp+6Ch+var_20], eax
		mov	eax, [esp+6Ch+var_48]
		sub	eax, ecx
		mov	ecx, [esp+6Ch+var_34]
		mov	[esp+6Ch+var_48], eax
		mov	[esp+6Ch+var_1C], eax
		movzx	eax, word ptr [ecx+2]
		mov	[esp+6Ch+var_24], eax
		call	sub_1000E300
		add	esp, 0Ch
		cmp	eax, [ebp+arg_4]
		jnz	short loc_1001147D
		cmp	word ptr [edi+4], 4
		jb	short loc_10011447
		movzx	eax, word ptr [edi]
		movzx	ecx, word ptr [edi+eax*2+2]
		mov	eax, [esp+60h+var_48]
		add	eax, 8
		add	eax, [esp+60h+var_30]
		cmp	eax, ecx
		jbe	short loc_10011464

loc_10011447:				; CODE XREF: sub_10011210+21Ej
		push	esi
		push	[ebp+Size]
		call	sub_1000FF20
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		jz	loc_10011521
		mov	edi, [esi+10h]
		mov	[esp+60h+var_44], edi

loc_10011464:				; CODE XREF: sub_10011210+235j
		lea	eax, [esp+60h+var_20]
		push	eax
		lea	eax, [esp+64h+var_18]
		push	eax
		push	edi
		call	sub_100110B0
		add	esp, 0Ch
		or	byte ptr [esi+15h], 1
		jmp	short loc_100114E2
; ---------------------------------------------------------------------------

loc_1001147D:				; CODE XREF: sub_10011210+217j
		mov	edx, [esp+60h+var_2C]
		cmp	word ptr [edx+4], 4
		jb	short loc_100114B2
		movzx	eax, word ptr [edx]
		mov	edi, [esp+60h+var_30]
		add	edi, 8
		movzx	ecx, word ptr [edx+eax*2+2]
		mov	eax, [esp+60h+var_48]
		add	eax, edi
		mov	edi, [esp+60h+var_44]
		cmp	eax, ecx
		ja	short loc_100114B2
		lea	eax, [esp+60h+var_20]
		push	eax
		lea	eax, [esp+64h+var_18]
		push	eax
		push	edx
		jmp	short loc_100114D6
; ---------------------------------------------------------------------------

loc_100114B2:				; CODE XREF: sub_10011210+276j
					; sub_10011210+293j
		push	ebx
		push	[ebp+Size]
		call	sub_1000FF20
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		jz	short loc_10011521
		mov	eax, [ebx+10h]
		lea	ecx, [esp+60h+var_20]
		push	ecx
		lea	ecx, [esp+64h+var_18]
		mov	[esp+64h+var_2C], eax
		push	ecx
		push	eax

loc_100114D6:				; CODE XREF: sub_10011210+2A0j
		call	sub_100110B0
		add	esp, 0Ch
		or	byte ptr [ebx+15h], 1

loc_100114E2:				; CODE XREF: sub_10011210+26Bj
		mov	ecx, [esp+60h+var_40]
		mov	edx, [esp+60h+var_50]
		add	ecx, 2
		mov	[esp+60h+var_40], ecx
		cmp	cx, [edx]
		jb	loc_100113B4

loc_100114FA:				; CODE XREF: sub_10011210+1B4j
		mov	eax, [ebp+Size]

loc_100114FD:				; CODE XREF: sub_10011210+19Ej
		cmp	cx, [edx]
		jb	loc_10011270
		mov	ecx, [esp+60h+var_3C]
		test	ecx, ecx
		jz	short loc_10011518
		push	ecx
		push	eax
		call	sub_10010240
		add	esp, 8

loc_10011518:				; CODE XREF: sub_10011210+50j
					; sub_10011210+D7j ...
		xor	eax, eax

loc_1001151A:				; CODE XREF: sub_10011210+A1j
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_10011521:				; CODE XREF: sub_10011210+ADj
					; sub_10011210+C0j ...
		or	eax, 0FFFFFFFFh
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_1001152B:				; CODE XREF: sub_10011210+6Ej
		pop	edi
		pop	esi
		mov	eax, 0FFFFFC19h
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
sub_10011210	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10011540	proc near		; CODE XREF: sub_10010130+20p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_4]
		push	ebx
		mov	ebx, [esp+4+arg_0]
		push	ebp
		mov	ecx, [eax+10h]
		push	esi
		push	edi
		xor	edi, edi
		mov	esi, eax
		xor	ebp, ebp

loc_10011555:				; CODE XREF: sub_10011540+79j
		test	ebp, ebp
		jz	short loc_10011560
		cmp	word ptr [ecx+4], 3
		jz	short loc_100115BB

loc_10011560:				; CODE XREF: sub_10011540+17j
		movzx	eax, word ptr [ecx+4]
		cmp	eax, 2
		jz	short loc_1001156E
		cmp	eax, 3
		jnz	short loc_10011583

loc_1001156E:				; CODE XREF: sub_10011540+27j
		mov	ebp, 1
		cmp	eax, 3
		jnz	short loc_10011583
		movzx	eax, word ptr [ecx]
		cmp	word ptr [ecx+eax*2+2],	0
		jnz	short loc_100115BB

loc_10011583:				; CODE XREF: sub_10011540+2Cj
					; sub_10011540+36j
		movzx	eax, word ptr [ecx]
		push	0
		push	esi
		movzx	eax, word ptr [ecx+eax*2-2]
		or	byte ptr [esi+15h], 1
		push	eax
		push	ebx
		call	sub_1000FA80
		add	esp, 10h
		mov	esi, eax
		test	edi, edi
		jz	short loc_100115AC
		push	edi
		push	ebx
		call	sub_10010240
		add	esp, 8

loc_100115AC:				; CODE XREF: sub_10011540+60j
		mov	edi, esi
		test	esi, esi
		jz	loc_10011646
		mov	ecx, [esi+10h]
		jmp	short loc_10011555
; ---------------------------------------------------------------------------

loc_100115BB:				; CODE XREF: sub_10011540+1Ej
					; sub_10011540+41j
		movzx	edx, word ptr [ecx]
		mov	eax, [esp+10h+arg_4]
		movzx	ecx, word ptr [ecx+edx*2-2]
		mov	ebp, [eax+10h]
		cmp	edx, 2
		jle	short loc_100115E5
		mov	[ebp+2], cx
		xor	eax, eax
		mov	ecx, [esp+10h+arg_4]
		mov	[ebp+4], ax
		mov	eax, [esi+8]
		mov	[ecx+8], eax
		jmp	short loc_100115EC
; ---------------------------------------------------------------------------

loc_100115E5:				; CODE XREF: sub_10011540+8Dj
		mov	dword ptr [eax+8], 0

loc_100115EC:				; CODE XREF: sub_10011540+A3j
		sub	edx, 2
		mov	[ebp+0], dx
		movzx	ecx, word ptr [ebx+0Ch]
		lea	eax, [edx+edx]
		sub	cx, ax
		movzx	eax, dx
		sub	cx, 6
		mov	[ebp+eax*2+2], cx
		movzx	eax, word ptr [ebp+0]
		movzx	ecx, word ptr [ebx+0Ch]
		dec	cx
		mov	[ebp+eax*2+4], cx
		mov	eax, [esp+10h+arg_4]
		or	byte ptr [eax+15h], 1
		test	esi, esi
		jz	short loc_1001162E
		push	esi
		push	ebx
		call	sub_10010240
		add	esp, 8

loc_1001162E:				; CODE XREF: sub_10011540+E2j
		cmp	edi, esi
		jz	short loc_1001163C
		push	edi
		push	ebx
		call	sub_10010240
		add	esp, 8

loc_1001163C:				; CODE XREF: sub_10011540+F0j
		dec	dword ptr [ebx+38h]
		xor	eax, eax
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_10011646:				; CODE XREF: sub_10011540+70j
		pop	edi
		pop	esi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		retn
sub_10011540	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10011650(int,	int, void *, int)
sub_10011650	proc near		; CODE XREF: sub_1000FFC0+157p

var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
Src		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 14h
		mov	eax, [esp+14h+arg_4]
		push	ebx
		mov	ebx, [esp+18h+arg_C]
		push	ebp
		mov	edx, [eax+10h]
		mov	eax, [esp+1Ch+arg_8]
		mov	ebp, [ebx+4]
		push	esi
		push	edi
		mov	ecx, [eax]
		mov	esi, edx
		mov	[esp+24h+Src], ecx
		mov	ecx, [eax+4]
		mov	eax, [ebx]
		mov	[esp+24h+arg_8], eax
		movzx	eax, word ptr [edx]
		mov	[esp+24h+var_10], edx
		mov	[esp+24h+var_14], ecx
		mov	ax, [edx+eax*2+2]
		sub	ax, 8
		movzx	edi, ax
		test	ecx, ecx
		jz	loc_100117D9
		lea	esp, [esp+0]

loc_100116A0:				; CODE XREF: sub_10011650+17Fj
		movzx	eax, di
		cmp	eax, ecx
		jnb	short loc_100116AC
		movzx	ecx, di
		jmp	short loc_100116AF
; ---------------------------------------------------------------------------

loc_100116AC:				; CODE XREF: sub_10011650+55j
		movzx	ecx, cx

loc_100116AF:				; CODE XREF: sub_10011650+5Aj
		movzx	eax, word ptr [esi]
		movzx	edi, cx
		push	edi		; Size
		push	[esp+28h+Src]	; Src
		mov	ax, [esi+eax*2+4]
		sub	ax, cx
		movzx	ebx, ax
		lea	eax, [edx+ebx]
		push	eax		; Dst
		call	ds:memmove
		movzx	edx, word ptr [esi]
		mov	ecx, ebx
		push	[esp+30h+arg_4]
		sub	[esp+34h+var_14], edi
		push	[esp+34h+arg_0]
		add	[esp+38h+Src], edi
		mov	[esi+edx*2+2], bx
		add	edx, 2
		mov	[esi], dx
		lea	eax, [edx+edx]
		sub	ecx, eax
		movzx	eax, dx
		sub	ecx, 6
		mov	[esi+eax*2+2], cx
		movzx	eax, word ptr [esi]
		mov	[esi+eax*2+4], bx
		mov	eax, 1
		mov	[esi+edx*2], ax
		call	sub_1000FF20
		mov	ecx, eax
		add	esp, 14h
		mov	[esp+24h+arg_4], ecx
		test	ecx, ecx
		jz	loc_1001188B
		cmp	[esp+24h+var_14], 0
		movzx	edi, word ptr [esi]
		mov	[esp+24h+var_4], edi
		jnz	short loc_100117AD
		movzx	ebx, word ptr [esi]
		movzx	edx, word ptr [esi+ebx*2+2]
		test	dx, dx
		jz	short loc_100117A3
		mov	ecx, edx
		cmp	edx, ebp
		jb	short loc_1001174A
		movzx	ecx, bp

loc_1001174A:				; CODE XREF: sub_10011650+F5j
		mov	ax, [esi+ebx*2+4]
		sub	ax, cx
		mov	[esp+24h+var_8], ecx
		movzx	ebx, ax
		mov	[esi+edi*2], bx
		mov	eax, ebx
		add	eax, [esp+24h+var_10]
		movzx	edi, cx
		push	edi		; Size
		push	[esp+28h+arg_8]	; Src
		push	eax		; Dst
		call	ds:memmove
		mov	eax, [esp+30h+var_4]
		mov	ecx, 3
		add	[esp+30h+arg_8], edi
		add	esp, 0Ch
		sub	ebp, edi
		mov	[esi+eax*2-4], cx
		movzx	eax, word ptr [esi]
		mov	ecx, [esp+24h+var_8]
		sub	[esi+eax*2+2], cx
		movzx	eax, word ptr [esi]
		mov	ecx, [esp+24h+arg_4]
		mov	[esi+eax*2+4], bx
		jmp	short loc_100117AD
; ---------------------------------------------------------------------------

loc_100117A3:				; CODE XREF: sub_10011650+EFj
		mov	eax, 2
		mov	[esi+edi*2-4], ax

loc_100117AD:				; CODE XREF: sub_10011650+E2j
					; sub_10011650+151j
		mov	edx, [ecx+10h]
		mov	esi, edx
		or	byte ptr [ecx+15h], 1
		mov	ecx, [esp+24h+var_14]
		mov	[esp+24h+var_10], edx
		movzx	eax, word ptr [esi]
		mov	ax, [esi+eax*2+2]
		sub	ax, 8
		movzx	edi, ax
		test	ecx, ecx
		jnz	loc_100116A0
		mov	ebx, [esp+24h+arg_C]

loc_100117D9:				; CODE XREF: sub_10011650+43j
		movzx	eax, word ptr [esi]
		mov	ax, [esi+eax*2+2]
		sub	ax, 8
		movzx	eax, ax
		test	ebp, ebp
		jz	loc_100118C7

loc_100117F0:				; CODE XREF: sub_10011650+272j
		movzx	edi, ax
		movzx	ecx, ax
		cmp	edi, ebp
		jb	short loc_1001180A
		movzx	ecx, bp
		jnz	short loc_1001180A
		cmp	ebp, [ebx+4]
		jnz	short loc_1001180A
		add	ecx, 0FFFFh

loc_1001180A:				; CODE XREF: sub_10011650+1A8j
					; sub_10011650+1ADj ...
		movzx	eax, word ptr [esi]
		movzx	edi, cx
		push	edi		; Size
		push	[esp+28h+arg_8]	; Src
		mov	ax, [esi+eax*2+4]
		sub	ax, cx
		movzx	ebx, ax
		lea	eax, [edx+ebx]
		push	eax		; Dst
		call	ds:memmove
		movzx	edx, word ptr [esi]
		mov	ecx, ebx
		add	[esp+30h+arg_8], edi
		add	esp, 0Ch
		mov	[esi+edx*2+2], bx
		add	edx, 2
		mov	[esi], dx
		lea	eax, [edx+edx]
		sub	ecx, eax
		movzx	eax, dx
		sub	ecx, 6
		mov	[esi+eax*2+2], cx
		movzx	eax, word ptr [esi]
		mov	[esi+eax*2+4], bx
		sub	ebp, edi
		jz	short loc_10011896
		push	[esp+24h+arg_4]
		mov	eax, 2
		push	[esp+28h+arg_0]
		mov	[esi+edx*2], ax
		call	sub_1000FF20
		mov	ecx, eax
		add	esp, 8
		mov	[esp+24h+arg_4], ecx
		test	ecx, ecx
		jz	short loc_1001188B
		mov	edx, [ecx+10h]
		mov	esi, edx
		mov	[esp+24h+var_10], edx
		jmp	short loc_100118A7
; ---------------------------------------------------------------------------

loc_1001188B:				; CODE XREF: sub_10011650+D0j
					; sub_10011650+22Ej
		pop	edi
		pop	esi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		add	esp, 14h
		retn
; ---------------------------------------------------------------------------

loc_10011896:				; CODE XREF: sub_10011650+20Bj
		mov	ecx, [esp+24h+arg_4]
		mov	eax, 3
		mov	[esi+edx*2], ax
		mov	edx, [esp+24h+var_10]

loc_100118A7:				; CODE XREF: sub_10011650+239j
		or	byte ptr [ecx+15h], 1
		movzx	eax, word ptr [esi]
		mov	ax, [esi+eax*2+2]
		sub	ax, 8
		movzx	eax, ax
		test	ebp, ebp
		jz	short loc_100118C7
		mov	ebx, [esp+24h+arg_C]
		jmp	loc_100117F0
; ---------------------------------------------------------------------------

loc_100118C7:				; CODE XREF: sub_10011650+19Aj
					; sub_10011650+26Cj
		pop	edi
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		add	esp, 14h
		retn
sub_10011650	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_100118E0(size_t Size,	int, int, int, int)
sub_100118E0	proc near		; CODE XREF: .text:1000EFF9p

Size		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	esi
		push	[esp+4+arg_10]	; int
		mov	esi, [esp+8+Size]
		push	[esp+8+arg_C]	; int
		push	0		; int
		push	[esp+10h+arg_4]	; int
		push	esi		; Size
		call	sub_10011FF0
		mov	ecx, [esp+18h+arg_8]
		add	esp, 14h
		mov	[ecx+4], eax
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_1001190C
		or	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1001190C:				; CODE XREF: sub_100118E0+26j
		mov	eax, [esi+120h]
		mov	[ecx], eax
		xor	eax, eax
		pop	esi
		retn
sub_100118E0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10011920	proc near		; CODE XREF: sub_1000E8F0+271p
					; sub_10011FF0+A8p

Size		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	ecx
		mov	eax, [esp+4+arg_8]
		push	ebp
		mov	ebp, [esp+8+arg_0]
		push	esi
		push	edi
		mov	edi, [esp+10h+arg_4]
		mov	esi, [edi+10h]
		cmp	word ptr [esi+eax*2+2],	1
		jnz	short loc_1001196D
		jmp	short loc_10011940
; ---------------------------------------------------------------------------
		align 10h

loc_10011940:				; CODE XREF: sub_10011920+1Bj
					; sub_10011920+4Bj
		movzx	eax, word ptr [esi]
		push	0
		push	edi
		movzx	eax, word ptr [esi+eax*2-2]
		push	eax
		push	ebp
		call	sub_1000FA80
		mov	edi, eax
		add	esp, 10h
		test	edi, edi
		jz	loc_10011A43
		mov	esi, [edi+10h]
		mov	eax, 1
		cmp	[esi+4], ax
		jz	short loc_10011940

loc_1001196D:				; CODE XREF: sub_10011920+19j
		cmp	word ptr [esi+eax*2+2],	2
		movzx	eax, word ptr [esi]
		jnz	short loc_100119B0
		movzx	eax, word ptr [esi+eax*2-2]
		push	0
		push	edi
		push	eax
		push	ebp
		call	sub_1000FA80
		mov	ecx, eax
		add	esp, 10h
		test	ecx, ecx
		jz	loc_10011A43
		movzx	eax, word ptr [ecx+0Ch]
		lea	esi, [ecx+0Ch]
		mov	[esp+10h+arg_4], eax
		mov	edi, ecx
		mov	eax, [ecx+10h]
		xor	edx, edx
		movzx	eax, word ptr [eax+2]
		mov	[esp+10h+arg_8], eax
		jmp	short loc_100119F9
; ---------------------------------------------------------------------------

loc_100119B0:				; CODE XREF: sub_10011920+56j
		cmp	word ptr [esi+eax*2+2],	0
		lea	ecx, [esi+eax*2]
		movzx	edx, word ptr [ecx]
		jnz	loc_10011A7C
		mov	ax, [esi+2]
		lea	esi, [edi+0Ch]
		sub	ax, dx
		mov	[esp+10h+arg_8], edx
		movzx	eax, ax
		mov	[esp+10h+Size],	eax
		movzx	eax, word ptr [esi]
		push	0
		mov	[esp+14h+arg_4], eax
		movzx	eax, word ptr [ecx-2]
		push	edi
		push	eax
		push	ebp
		call	sub_1000FA80
		mov	ecx, eax
		add	esp, 10h
		test	ecx, ecx
		jz	short loc_10011A43
		mov	edx, [esp+10h+Size]

loc_100119F9:				; CODE XREF: sub_10011920+8Ej
		mov	al, [edi+15h]
		push	ebx
		push	[esp+14h+arg_10]
		movsx	ebx, al
		or	al, 8
		mov	[edi+15h], al
		movzx	eax, dx
		push	eax
		push	ecx
		push	ebp
		mov	[esp+24h+Size],	eax
		call	sub_10011E90
		mov	ecx, [esp+24h+arg_C]
		add	esp, 10h
		mov	[ecx+4], eax
		mov	[edi+15h], bl
		cmp	dword ptr [ecx+4], 0FFFFFFFFh
		pop	ebx
		jz	short loc_10011A43
		mov	eax, [esp+10h+arg_4]
		movzx	eax, ax
		cmp	[esi], eax
		jz	short loc_10011A4B
		call	ds:_errno
		mov	dword ptr [eax], 16h

loc_10011A43:				; CODE XREF: sub_10011920+39j
					; sub_10011920+6Ej ...
		pop	edi
		pop	esi
		or	eax, 0FFFFFFFFh
		pop	ebp
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_10011A4B:				; CODE XREF: sub_10011920+115j
		mov	eax, [esp+10h+arg_8]
		push	[esp+10h+Size]	; Size
		movzx	eax, ax
		add	eax, [edi+10h]
		push	eax		; Src
		push	dword ptr [ebp+11Ch] ; Dst
		call	ds:memmove
		mov	ecx, [esp+1Ch+arg_C]
		add	esp, 0Ch
		mov	eax, [ebp+11Ch]
		pop	edi
		pop	esi
		mov	[ecx], eax
		xor	eax, eax
		pop	ebp
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_10011A7C:				; CODE XREF: sub_10011920+9Cj
		mov	ecx, [esp+10h+arg_C]
		lea	eax, [edx+esi]
		mov	[ecx], eax
		movzx	eax, word ptr [esi+2]
		sub	eax, edx
		cmp	[esp+10h+arg_10], 0
		mov	[ecx+4], eax
		jz	short loc_10011AEC
		movzx	eax, word ptr [esi]
		cmp	eax, 2
		jnz	short loc_10011AA9
		mov	dword ptr [ebp+12Ch], 1
		jmp	short loc_10011ADC
; ---------------------------------------------------------------------------

loc_10011AA9:				; CODE XREF: sub_10011920+17Bj
		movzx	eax, word ptr [esi+eax*2-2]
		push	0
		push	edi
		push	eax
		push	ebp
		call	sub_1000FA80
		add	esp, 10h
		mov	[ebp+124h], eax
		test	eax, eax
		jz	loc_10011A43
		mov	dword ptr [ebp+12Ch], 1
		mov	eax, [eax+10h]
		cmp	word ptr [eax],	0
		jnz	short loc_10011AEC

loc_10011ADC:				; CODE XREF: sub_10011920+187j
		inc	dword ptr [ebp+128h]
		mov	dword ptr [ebp+124h], 0

loc_10011AEC:				; CODE XREF: sub_10011920+173j
					; sub_10011920+1BAj
		pop	edi
		pop	esi
		xor	eax, eax
		pop	ebp
		pop	ecx
		retn
sub_10011920	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10011B00(size_t Size,	int, int, int, __int16,	int, int)
sub_10011B00	proc near		; CODE XREF: sub_10011210+97p

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
Size		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= word ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch

		sub	esp, 0Ch
		lea	eax, [esp+0Ch+var_8]
		push	esi
		mov	esi, [esp+10h+Size]
		push	edi
		mov	edi, [esp+14h+arg_C]
		push	0		; int
		push	eax		; int
		push	0		; int
		push	edi		; int
		push	esi		; Size
		call	sub_10011FF0
		add	esp, 14h
		cmp	eax, 0FFFFFFFFh
		jz	loc_10011C8A
		push	ebx
		push	ebp
		push	eax
		push	dword ptr [esi+120h]
		push	esi
		call	sub_1000E300
		xor	ecx, ecx
		cmp	eax, [esp+28h+arg_14]
		lea	eax, [esp+28h+arg_C]
		push	eax
		setnz	cl
		push	esi
		mov	[esp+30h+var_C], ecx
		call	sub_10011E20
		mov	ebx, [esp+30h+arg_18]
		add	esp, 14h
		mov	ebp, [esp+1Ch+arg_C]
		mov	[ebx+0Ch], ax
		test	ax, ax
		jz	short loc_10011B86
		push	0
		push	ebp
		movzx	eax, ax
		push	eax
		push	esi
		call	sub_1000FA80
		add	esp, 10h
		mov	[ebx+8], eax
		test	eax, eax
		jnz	short loc_10011B8D

loc_10011B7B:				; CODE XREF: sub_10011B00+160j
		pop	ebp
		pop	ebx
		pop	edi
		or	eax, 0FFFFFFFFh
		pop	esi
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_10011B86:				; CODE XREF: sub_10011B00+62j
		mov	dword ptr [ebx+8], 0

loc_10011B8D:				; CODE XREF: sub_10011B00+79j
		cmp	[esp+1Ch+var_C], 0
		mov	eax, [esp+1Ch+arg_8]
		jnz	short loc_10011B9C
		mov	eax, [esp+1Ch+arg_4]

loc_10011B9C:				; CODE XREF: sub_10011B00+96j
		or	byte ptr [eax+15h], 1
		mov	[eax+8], edi
		mov	eax, [eax+10h]
		mov	[esp+1Ch+arg_C], eax
		movzx	ecx, word ptr [eax]
		mov	edx, ecx
		movzx	edi, word ptr [eax+edx*2+2]
		cmp	edi, 4
		jnb	short loc_10011BC6
		pop	ebp
		pop	ebx
		pop	edi
		mov	eax, 0FFFFFC19h
		pop	esi
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_10011BC6:				; CODE XREF: sub_10011B00+B7j
		movzx	esi, word ptr [eax+edx*2+4]
		lea	eax, [ecx+1]
		mov	ebx, [esp+1Ch+arg_C]
		movzx	edx, ax
		mov	ax, [esp+1Ch+arg_10]
		mov	ecx, edx
		inc	edx
		mov	[ebx+ecx*2], ax
		xor	ebx, ebx
		mov	ecx, [esp+1Ch+arg_C]
		movzx	eax, dx
		mov	[ecx+eax*2], bx
		mov	ebx, [esp+1Ch+arg_18]
		mov	[ecx], dx
		mov	edx, [esp+1Ch+arg_C]
		mov	[ecx+eax*2+4], si
		lea	ecx, [edi-4]
		movzx	eax, word ptr [edx]
		mov	[edx+eax*2+2], cx
		mov	eax, [esp+1Ch+arg_8]
		mov	[ebx], eax
		mov	eax, [esp+1Ch+arg_4]
		mov	[ebx+4], eax
		mov	esi, [ebp+10h]
		or	byte ptr [ebp+15h], 1
		movzx	eax, word ptr [esi]
		cmp	eax, 2
		jbe	short loc_10011C6A
		movzx	ecx, word ptr [esi+eax*2+2]
		movzx	edx, word ptr [esi+eax*2+4]
		add	ecx, 4
		movzx	eax, word ptr [esi]
		movzx	edi, word ptr [esi+8]
		add	eax, 0FFFFFFFEh
		mov	[esi], ax
		movzx	eax, ax
		push	ebp
		push	[esp+20h+Size]
		mov	[esi+eax*2+2], cx
		movzx	eax, word ptr [esi]
		mov	[esi+eax*2+4], dx
		call	sub_1000FF20
		mov	ebp, eax
		add	esp, 8
		test	ebp, ebp
		jz	loc_10011B7B
		mov	[esi+8], di

loc_10011C6A:				; CODE XREF: sub_10011B00+123j
		cmp	[esp+1Ch+var_C], 0
		jz	short loc_10011C7D
		mov	[ebx], ebp
		xor	eax, eax
		pop	ebp
		pop	ebx
		pop	edi
		pop	esi
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_10011C7D:				; CODE XREF: sub_10011B00+16Fj
		mov	[ebx+4], ebp
		xor	eax, eax
		pop	ebp
		pop	ebx
		pop	edi
		pop	esi
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_10011C8A:				; CODE XREF: sub_10011B00+23j
		pop	edi
		or	eax, 0FFFFFFFFh
		pop	esi
		add	esp, 0Ch
		retn
sub_10011B00	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10011CA0	proc near		; CODE XREF: sub_1000E8F0+17Fp

var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	ecx
		mov	eax, [esp+4+arg_10]
		mov	ecx, [esp+4+arg_8]
		push	ebx
		push	ebp
		mov	ebp, [esp+0Ch+arg_4]
		mov	[esp+0Ch+arg_4], eax
		mov	eax, [esp+0Ch+arg_0]
		push	esi
		mov	edx, [ebp+10h]
		mov	esi, edx
		push	edi
		mov	ax, [eax+0Ch]
		mov	edi, [esp+14h+arg_C]
		sub	ax, [edx+ecx*2]
		movzx	eax, ax

loc_10011CCD:				; CODE XREF: sub_10011CA0+F1j
		mov	ebx, eax
		mov	[esp+14h+var_4], edx
		cmp	ebx, [esp+14h+arg_10]
		jg	loc_10011DA1
		cmp	word ptr [edx+ecx*2+2],	1
		jnz	loc_10011DA1
		movzx	ecx, word ptr [edx+ecx*2]
		mov	edx, edi
		add	ecx, esi
		mov	esi, ebx
		sub	esi, 4
		jb	short loc_10011D09

loc_10011CF8:				; CODE XREF: sub_10011CA0+67j
		mov	eax, [ecx]
		cmp	eax, [edx]
		jnz	short loc_10011D0E
		add	ecx, 4
		add	edx, 4
		sub	esi, 4
		jnb	short loc_10011CF8

loc_10011D09:				; CODE XREF: sub_10011CA0+56j
		cmp	esi, 0FFFFFFFCh
		jz	short loc_10011D4B

loc_10011D0E:				; CODE XREF: sub_10011CA0+5Cj
		mov	al, [ecx]
		cmp	al, [edx]
		jnz	loc_10011E0D
		cmp	esi, 0FFFFFFFDh
		jz	short loc_10011D4B
		mov	al, [ecx+1]
		cmp	al, [edx+1]
		jnz	loc_10011E0D
		cmp	esi, 0FFFFFFFEh
		jz	short loc_10011D4B
		mov	al, [ecx+2]
		cmp	al, [edx+2]
		jnz	loc_10011E0D
		cmp	esi, 0FFFFFFFFh
		jz	short loc_10011D4B
		mov	al, [ecx+3]
		cmp	al, [edx+3]
		jnz	loc_10011E0D

loc_10011D4B:				; CODE XREF: sub_10011CA0+6Cj
					; sub_10011CA0+7Bj ...
		mov	ecx, [esp+14h+arg_8]
		add	edi, ebx
		mov	eax, [esp+14h+var_4]
		sub	[esp+14h+arg_4], ebx
		mov	ebx, [esp+14h+arg_0]
		push	0
		movzx	eax, word ptr [eax+ecx*2+4]
		push	ebp
		push	eax
		push	ebx
		call	sub_1000FA80
		mov	ebp, eax
		add	esp, 10h
		test	ebp, ebp
		jz	short loc_10011D96
		mov	esi, [ebp+10h]
		mov	edx, esi
		mov	cx, [ebx+0Ch]
		mov	[esp+14h+arg_8], 1
		sub	cx, [esi+2]
		movzx	eax, cx
		mov	ecx, [esp+14h+arg_8]
		jmp	loc_10011CCD
; ---------------------------------------------------------------------------

loc_10011D96:				; CODE XREF: sub_10011CA0+D3j
		pop	edi
		pop	esi
		pop	ebp
		mov	eax, 0FFFFFFFDh
		pop	ebx
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_10011DA1:				; CODE XREF: sub_10011CA0+37j
					; sub_10011CA0+43j
		movzx	edx, ax
		cmp	edx, [esp+14h+arg_4]
		jnz	short loc_10011E0D
		mov	eax, [esp+14h+var_4]
		movzx	ecx, word ptr [eax+ecx*2]
		add	ecx, esi
		sub	edx, 4
		jb	short loc_10011DD1
		lea	esp, [esp+0]

loc_10011DC0:				; CODE XREF: sub_10011CA0+12Fj
		mov	eax, [ecx]
		cmp	eax, [edi]
		jnz	short loc_10011DD6
		add	ecx, 4
		add	edi, 4
		sub	edx, 4
		jnb	short loc_10011DC0

loc_10011DD1:				; CODE XREF: sub_10011CA0+117j
		cmp	edx, 0FFFFFFFCh
		jz	short loc_10011E03

loc_10011DD6:				; CODE XREF: sub_10011CA0+124j
		mov	al, [ecx]
		cmp	al, [edi]
		jnz	short loc_10011E0D
		cmp	edx, 0FFFFFFFDh
		jz	short loc_10011E03
		mov	al, [ecx+1]
		cmp	al, [edi+1]
		jnz	short loc_10011E0D
		cmp	edx, 0FFFFFFFEh
		jz	short loc_10011E03
		mov	al, [ecx+2]
		cmp	al, [edi+2]
		jnz	short loc_10011E0D
		cmp	edx, 0FFFFFFFFh
		jz	short loc_10011E03
		mov	cl, [ecx+3]
		cmp	cl, [edi+3]
		jnz	short loc_10011E0D

loc_10011E03:				; CODE XREF: sub_10011CA0+134j
					; sub_10011CA0+13Fj ...
		mov	eax, [esp+14h+arg_8]
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_10011E0D:				; CODE XREF: sub_10011CA0+72j
					; sub_10011CA0+83j ...
		pop	edi
		pop	esi
		pop	ebp
		mov	eax, 0FFFFFFFEh
		pop	ebx
		pop	ecx
		retn
sub_10011CA0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10011E20	proc near		; CODE XREF: sub_1000E8F0+1A0p
					; sub_10011B00+4Bp

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebx
		mov	ebx, [esp+4+arg_4]
		push	esi
		push	edi
		mov	edi, [esp+0Ch+arg_0]
		mov	esi, [ebx]

loc_10011E2D:				; CODE XREF: sub_10011E20+4Dj
		mov	eax, [esi+10h]
		cmp	word ptr [eax+4], 3
		movzx	edx, word ptr [eax]
		jnz	short loc_10011E4E
		cmp	edx, 2
		jz	short loc_10011E75
		cmp	word ptr [eax+edx*2], 0
		jz	short loc_10011E75
		cmp	word ptr [eax+edx*2+2],	0
		jnz	short loc_10011E75

loc_10011E4E:				; CODE XREF: sub_10011E20+18j
		mov	ecx, [edi+0Ch]
		shr	ecx, 1
		cmp	edx, ecx
		ja	short loc_10011E6F
		movzx	eax, word ptr [eax+edx*2-2]
		push	0
		push	esi
		push	eax
		push	edi
		call	sub_1000FA80
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		jnz	short loc_10011E2D

loc_10011E6F:				; CODE XREF: sub_10011E20+35j
					; sub_10011E20+5Bj
		pop	edi
		pop	esi
		xor	eax, eax
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_10011E75:				; CODE XREF: sub_10011E20+1Dj
					; sub_10011E20+24j ...
		mov	[ebx], esi
		cmp	word ptr [eax],	2
		jbe	short loc_10011E6F
		mov	ax, [eax+6]
		pop	edi
		pop	esi
		pop	ebx
		retn
sub_10011E20	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10011E90	proc near		; CODE XREF: sub_10011920+F3p

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 0Ch
		push	ebx
		push	ebp
		mov	ebp, [esp+14h+arg_8]
		push	esi
		mov	esi, [esp+18h+arg_4]
		mov	al, [esi+15h]
		lea	ebx, [esi+15h]
		movsx	ecx, al
		or	al, 8
		push	edi
		mov	edi, [esp+1Ch+arg_0]
		mov	[esp+1Ch+var_C], esi
		mov	[esp+1Ch+var_8], ebx
		mov	[esp+1Ch+arg_4], ecx
		mov	[ebx], al
		lea	esp, [esp+0]

loc_10011EC0:				; CODE XREF: sub_10011E90+64j
		mov	ecx, [esi+10h]
		mov	edx, [edi+0Ch]
		movzx	eax, word ptr [ecx+2]
		sub	edx, eax
		js	short loc_10011EF6
		add	ebp, edx
		cmp	word ptr [ecx+4], 3
		mov	[esp+1Ch+var_4], ebp
		jz	short loc_10011F07
		movzx	eax, word ptr [ecx]
		push	0
		push	esi
		movzx	eax, word ptr [ecx+eax*2-2]
		push	eax
		push	edi
		call	sub_1000FA80
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		jnz	short loc_10011EC0

loc_10011EF6:				; CODE XREF: sub_10011E90+3Cj
					; sub_10011E90+9Dj
		mov	ecx, [esp+1Ch+arg_4]
		mov	[ebx], cl

loc_10011EFC:				; CODE XREF: sub_10011E90+136j
		pop	edi
		pop	esi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_10011F07:				; CODE XREF: sub_10011E90+49j
		mov	eax, [edi+11Ch]
		test	eax, eax
		jz	short loc_10011F1B
		push	eax		; Memory
		call	ds:free
		add	esp, 4

loc_10011F1B:				; CODE XREF: sub_10011E90+7Fj
		push	ebp		; Size
		call	ds:malloc
		add	esp, 4
		mov	[edi+11Ch], eax
		test	eax, eax
		jz	short loc_10011EF6
		mov	ebp, [esp+1Ch+var_C]

loc_10011F33:				; CODE XREF: sub_10011E90+EBj
		mov	ebx, [ebp+10h]
		mov	esi, [edi+0Ch]
		movzx	eax, word ptr [ebx+2]
		sub	esi, eax
		add	eax, ebx
		push	esi		; Size
		push	eax		; Src
		mov	eax, [edi+11Ch]
		add	eax, [esp+24h+arg_8]
		push	eax		; Dst
		call	ds:memmove
		add	[esp+28h+arg_8], esi
		add	esp, 0Ch
		cmp	word ptr [ebx+4], 3
		jz	short loc_10011F7D
		movzx	eax, word ptr [ebx]
		push	0
		push	ebp
		movzx	eax, word ptr [ebx+eax*2-2]
		push	eax
		push	edi
		call	sub_1000FA80
		mov	ebp, eax
		add	esp, 10h
		test	ebp, ebp
		jnz	short loc_10011F33

loc_10011F7D:				; CODE XREF: sub_10011E90+D0j
		cmp	[esp+1Ch+arg_C], 0
		mov	eax, [esp+1Ch+var_8]
		mov	ecx, [esp+1Ch+arg_4]
		mov	[esp+1Ch+var_C], ebp
		mov	ebp, [esp+1Ch+var_4]
		mov	[eax], cl
		jz	short loc_10011FE5
		mov	dword ptr [edi+12Ch], 1
		movzx	ecx, word ptr [ebx]
		cmp	ecx, 2
		jz	short loc_10011FD5
		mov	eax, [esp+1Ch+var_C]
		push	0
		push	eax
		movzx	eax, word ptr [ebx+ecx*2-2]
		push	eax
		push	edi
		call	sub_1000FA80
		add	esp, 10h
		mov	[edi+124h], eax
		test	eax, eax
		jz	loc_10011EFC
		mov	ecx, [eax+10h]
		cmp	word ptr [ecx],	0
		jnz	short loc_10011FE5

loc_10011FD5:				; CODE XREF: sub_10011E90+116j
		inc	dword ptr [edi+128h]
		mov	dword ptr [edi+124h], 0

loc_10011FE5:				; CODE XREF: sub_10011E90+104j
					; sub_10011E90+143j
		pop	edi
		pop	esi
		mov	eax, ebp
		pop	ebp
		pop	ebx
		add	esp, 0Ch
		retn
sub_10011E90	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10011FF0(size_t Size,	int, int, int, int)
sub_10011FF0	proc near		; CODE XREF: sub_100118E0+14p
					; sub_10011B00+18p ...

Size		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	ebx
		mov	ebx, [esp+4+arg_8]
		push	ebp
		push	esi
		mov	esi, [esp+0Ch+Size]
		push	edi
		mov	edi, [esp+10h+arg_4]
		mov	ecx, [esi+0Ch]
		mov	ebp, [edi+10h]
		movzx	eax, word ptr [ebp+2]
		sub	ecx, eax
		movzx	eax, word ptr [edi+0Ch]
		mov	[esp+10h+arg_4], eax
		add	ebx, ecx
		movzx	eax, word ptr [ebp+4]
		mov	[esp+10h+Size],	ecx
		cmp	eax, 2
		jz	short loc_10012064
		cmp	eax, 3
		jz	short loc_10012064
		movzx	eax, word ptr [ebp+0]
		push	0
		push	edi
		movzx	eax, word ptr [ebp+eax*2-2]
		push	eax
		push	esi
		call	sub_1000FA80
		add	esp, 10h
		test	eax, eax
		jz	short loc_1001205C
		push	[esp+10h+arg_10] ; int
		push	[esp+14h+arg_C]	; int
		push	ebx		; int
		push	eax		; int
		push	esi		; Size
		call	sub_10011FF0
		mov	ebx, eax
		add	esp, 14h
		cmp	ebx, 1
		jge	short loc_100120A4

loc_1001205C:				; CODE XREF: sub_10011FF0+50j
					; sub_10011FF0+9Aj ...
		pop	edi
		pop	esi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_10012064:				; CODE XREF: sub_10011FF0+31j
					; sub_10011FF0+36j
		mov	eax, [esi+120h]
		test	eax, eax
		jz	short loc_10012078
		push	eax		; Memory
		call	ds:free
		add	esp, 4

loc_10012078:				; CODE XREF: sub_10011FF0+7Cj
		push	ebx		; Size
		call	ds:malloc
		add	esp, 4
		mov	[esi+120h], eax
		test	eax, eax
		jz	short loc_1001205C
		push	[esp+10h+arg_10]
		push	[esp+14h+arg_C]
		push	1
		push	edi
		push	esi
		call	sub_10011920
		add	esp, 14h
		test	eax, eax
		jnz	short loc_1001205C

loc_100120A4:				; CODE XREF: sub_10011FF0+6Aj
		mov	eax, [esp+10h+arg_4]
		movzx	eax, ax
		cmp	[edi+0Ch], eax
		jz	short loc_100120C4
		call	ds:_errno
		pop	edi
		pop	esi
		pop	ebp
		mov	dword ptr [eax], 16h
		or	eax, 0FFFFFFFFh
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_100120C4:				; CODE XREF: sub_10011FF0+BEj
		movzx	eax, word ptr [ebp+2]
		add	eax, [edi+10h]
		push	[esp+10h+Size]	; Size
		push	eax		; Src
		mov	eax, [esi+120h]
		add	eax, [esp+18h+arg_8]
		push	eax		; Dst
		call	ds:memmove
		add	esp, 0Ch
		mov	eax, ebx
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
sub_10011FF0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100120F0	proc near		; DATA XREF: .data:off_1001500Co

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	ecx, [esp+arg_4]
		xor	eax, eax
		mov	edx, [esp+arg_0]
		test	ecx, ecx
		jz	locret_10012186
		push	esi
		lea	esi, [ecx+7]
		and	ecx, 7
		shr	esi, 3
		cmp	ecx, 7		; switch 8 cases
		ja	short loc_10012185 ; jumptable 10012111	default	case
		jmp	ds:off_10012188[ecx*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_10012118:				; CODE XREF: sub_100120F0+21j
					; sub_100120F0+93j
					; DATA XREF: ...
		mov	ecx, eax	; jumptable 10012111 case 3
		shl	eax, 5
		add	eax, ecx
		movzx	ecx, byte ptr [edx]
		add	eax, ecx
		inc	edx

loc_10012125:				; CODE XREF: sub_100120F0+21j
					; DATA XREF: .text:off_10012188o
		mov	ecx, eax	; jumptable 10012111 case 2
		shl	eax, 5
		add	eax, ecx
		movzx	ecx, byte ptr [edx]
		add	eax, ecx
		inc	edx

loc_10012132:				; CODE XREF: sub_100120F0+21j
					; DATA XREF: .text:off_10012188o
		mov	ecx, eax	; jumptable 10012111 case 1
		shl	eax, 5
		add	eax, ecx
		movzx	ecx, byte ptr [edx]
		add	eax, ecx
		inc	edx
		dec	esi
		jz	short loc_10012185 ; jumptable 10012111	default	case

loc_10012142:				; CODE XREF: sub_100120F0+21j
					; DATA XREF: .text:off_10012188o
		mov	ecx, eax	; jumptable 10012111 case 0
		shl	eax, 5
		add	eax, ecx
		movzx	ecx, byte ptr [edx]
		add	eax, ecx
		inc	edx

loc_1001214F:				; CODE XREF: sub_100120F0+21j
					; DATA XREF: .text:off_10012188o
		mov	ecx, eax	; jumptable 10012111 case 7
		shl	eax, 5
		add	eax, ecx
		movzx	ecx, byte ptr [edx]
		add	eax, ecx
		inc	edx

loc_1001215C:				; CODE XREF: sub_100120F0+21j
					; DATA XREF: .text:off_10012188o
		mov	ecx, eax	; jumptable 10012111 case 6
		shl	eax, 5
		add	eax, ecx
		movzx	ecx, byte ptr [edx]
		add	eax, ecx
		inc	edx

loc_10012169:				; CODE XREF: sub_100120F0+21j
					; DATA XREF: .text:off_10012188o
		mov	ecx, eax	; jumptable 10012111 case 5
		shl	eax, 5
		add	eax, ecx
		movzx	ecx, byte ptr [edx]
		add	eax, ecx
		inc	edx

loc_10012176:				; CODE XREF: sub_100120F0+21j
					; DATA XREF: .text:off_10012188o
		mov	ecx, eax	; jumptable 10012111 case 4
		shl	eax, 5
		add	eax, ecx
		movzx	ecx, byte ptr [edx]
		add	eax, ecx
		inc	edx
		jmp	short loc_10012118 ; jumptable 10012111	case 3
; ---------------------------------------------------------------------------

loc_10012185:				; CODE XREF: sub_100120F0+1Fj
					; sub_100120F0+50j
		pop	esi		; jumptable 10012111 default case

locret_10012186:			; CODE XREF: sub_100120F0+Cj
		retn
sub_100120F0	endp

; ---------------------------------------------------------------------------
		align 4
off_10012188	dd offset loc_10012142	; DATA XREF: sub_100120F0+21r
		dd offset loc_10012132	; jump table for switch	statement
		dd offset loc_10012125
		dd offset loc_10012118
		dd offset loc_10012176
		dd offset loc_10012169
		dd offset loc_1001215C
		dd offset loc_1001214F
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_100121B0(char	*, int,	int)
sub_100121B0	proc near		; CODE XREF: sub_10012330+Ep

var_38		= dword	ptr -38h
var_34		= byte ptr -34h
var_2E		= dword	ptr -2Eh
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 38h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+38h+var_4], eax
		push	ebx
		push	ebp
		mov	ebp, [esp+40h+arg_4]
		push	esi
		push	edi
		mov	edi, [esp+48h+arg_0]
		call	ds:_getpid
		cmp	byte ptr [edi],	0
		mov	ebx, eax
		mov	esi, edi
		jz	short loc_100121E6
		lea	esp, [esp+0]

loc_100121E0:				; CODE XREF: sub_100121B0+34j
		inc	esi
		cmp	byte ptr [esi],	0
		jnz	short loc_100121E0

loc_100121E6:				; CODE XREF: sub_100121B0+27j
		dec	esi
		cmp	byte ptr [esi],	58h
		jnz	short loc_10012213
		lea	esp, [esp+0]

loc_100121F0:				; CODE XREF: sub_100121B0+61j
		mov	eax, 0CCCCCCCDh
		mul	ebx
		shr	edx, 3
		mov	al, dl
		shl	al, 2
		lea	ecx, [eax+edx]
		add	cl, cl
		sub	bl, cl
		add	bl, 30h
		mov	[esi], bl
		dec	esi
		mov	ebx, edx
		cmp	byte ptr [esi],	58h
		jz	short loc_100121F0

loc_10012213:				; CODE XREF: sub_100121B0+3Aj
		lea	eax, [esi+1]
		mov	[esp+48h+var_38], eax
		mov	eax, ds:_stat64i32
		cmp	esi, edi
		jbe	short loc_1001227A

loc_10012223:				; CODE XREF: sub_100121B0+82j
		mov	bl, [esi]
		cmp	bl, 2Fh
		jz	short loc_10012236
		cmp	bl, 5Ch
		jz	short loc_10012236
		dec	esi
		cmp	esi, edi
		ja	short loc_10012223
		jmp	short loc_1001227A
; ---------------------------------------------------------------------------

loc_10012236:				; CODE XREF: sub_100121B0+78j
					; sub_100121B0+7Dj
		lea	ecx, [esp+48h+var_34]
		mov	byte ptr [esi],	0
		push	ecx
		push	edi
		call	eax ; _stat64i32
		add	esp, 8
		mov	[esi], bl
		test	eax, eax
		jnz	short loc_10012260
		test	[esp+48h+var_2E], 4000h
		jnz	short loc_10012275
		call	ds:_errno
		mov	dword ptr [eax], 14h

loc_10012260:				; CODE XREF: sub_100121B0+98j
					; sub_100121B0+F9j ...
		pop	edi
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		mov	ecx, [esp+38h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 38h
		retn
; ---------------------------------------------------------------------------

loc_10012275:				; CODE XREF: sub_100121B0+A2j
		mov	eax, ds:_stat64i32

loc_1001227A:				; CODE XREF: sub_100121B0+71j
					; sub_100121B0+84j
		mov	ebx, ds:_errno

loc_10012280:				; CODE XREF: sub_100121B0+139j
					; sub_100121B0+13Dj
		test	ebp, ebp
		jz	short loc_100122AD
		mov	eax, [esp+48h+arg_8]
		push	180h
		or	eax, 502h
		push	eax		; int
		push	edi		; char *
		call	ds:_open
		add	esp, 0Ch
		mov	[ebp+0], eax
		test	eax, eax
		jns	short loc_100122EF
		call	ebx ; _errno
		cmp	dword ptr [eax], 11h
		jnz	short loc_10012260
		jmp	short loc_100122BC
; ---------------------------------------------------------------------------

loc_100122AD:				; CODE XREF: sub_100121B0+D2j
		lea	ecx, [esp+48h+var_34]
		push	ecx
		push	edi
		call	eax ; _stat64i32
		add	esp, 8
		test	eax, eax
		jnz	short loc_10012307

loc_100122BC:				; CODE XREF: sub_100121B0+FBj
		mov	esi, [esp+48h+var_38]

loc_100122C0:				; CODE XREF: sub_100121B0+11Ej
		mov	al, [esi]
		test	al, al
		jz	short loc_10012260
		cmp	al, 7Ah
		jnz	short loc_100122D0
		mov	byte ptr [esi],	61h
		inc	esi
		jmp	short loc_100122C0
; ---------------------------------------------------------------------------

loc_100122D0:				; CODE XREF: sub_100121B0+118j
		movsx	eax, byte ptr [esi]
		push	eax		; C
		call	ds:isdigit
		add	esp, 4
		test	eax, eax
		mov	eax, ds:_stat64i32
		jz	short loc_100122EB
		mov	byte ptr [esi],	61h
		jmp	short loc_10012280
; ---------------------------------------------------------------------------

loc_100122EB:				; CODE XREF: sub_100121B0+134j
		inc	byte ptr [esi]
		jmp	short loc_10012280
; ---------------------------------------------------------------------------

loc_100122EF:				; CODE XREF: sub_100121B0+F2j
		pop	edi
		pop	esi
		pop	ebp
		mov	eax, 1
		pop	ebx
		mov	ecx, [esp+38h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 38h
		retn
; ---------------------------------------------------------------------------

loc_10012307:				; CODE XREF: sub_100121B0+10Aj
		call	ebx ; _errno
		xor	ecx, ecx
		pop	edi
		pop	esi
		cmp	dword ptr [eax], 2
		pop	ebp
		setz	cl
		mov	eax, ecx
		mov	ecx, [esp+3Ch+var_4]
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 38h
		retn
sub_100121B0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10012330(char	*, int)
sub_10012330	proc near		; CODE XREF: sub_10010C50+E4p

var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ecx
		push	[esp+4+arg_4]	; int
		lea	eax, [esp+8+var_4]
		push	eax		; int
		push	[esp+0Ch+arg_0]	; char *
		call	sub_100121B0
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_1001234F
		mov	eax, [esp+4+var_4]
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_1001234F:				; CODE XREF: sub_10012330+18j
		or	eax, 0FFFFFFFFh
		pop	ecx
		retn
sub_10012330	endp

; [00000006 BYTES: COLLAPSED FUNCTION PORT_Alloc_Util]
; [00000006 BYTES: COLLAPSED FUNCTION PORT_ZAlloc_Util]
; [00000006 BYTES: COLLAPSED FUNCTION PORT_Free_Util]
; [00000006 BYTES: COLLAPSED FUNCTION NSSBase64_EncodeItem_Util]
; [00000006 BYTES: COLLAPSED FUNCTION NSS_Get_SECOID_AlgorithmIDTemplate_Util]
; [00000006 BYTES: COLLAPSED FUNCTION PORT_Strdup_Util]
; [00000006 BYTES: COLLAPSED FUNCTION PORT_SetError_Util]
; [00000006 BYTES: COLLAPSED FUNCTION PORT_GetError_Util]
; [00000006 BYTES: COLLAPSED FUNCTION PORT_NewArena_Util]
; [00000006 BYTES: COLLAPSED FUNCTION PORT_ArenaAlloc_Util]
; [00000006 BYTES: COLLAPSED FUNCTION PORT_ArenaZAlloc_Util]
; [00000006 BYTES: COLLAPSED FUNCTION PORT_FreeArena_Util]
; [00000006 BYTES: COLLAPSED FUNCTION SECITEM_CopyItem_Util]
; [00000006 BYTES: COLLAPSED FUNCTION SECITEM_DupItem_Util]
; [00000006 BYTES: COLLAPSED FUNCTION SECITEM_FreeItem_Util]
; [00000006 BYTES: COLLAPSED FUNCTION SECITEM_ZfreeItem_Util]
; [00000006 BYTES: COLLAPSED FUNCTION SEC_QuickDERDecodeItem_Util]
; [00000006 BYTES: COLLAPSED FUNCTION SEC_ASN1EncodeItem_Util]
; [00000006 BYTES: COLLAPSED FUNCTION SEC_ASN1EncodeInteger_Util]
; [00000006 BYTES: COLLAPSED FUNCTION SECOID_FindOIDTag_Util]
; [00000006 BYTES: COLLAPSED FUNCTION SECOID_FindOIDByTag_Util]
; [00000006 BYTES: COLLAPSED FUNCTION SECOID_SetAlgorithmID_Util]
; [00000006 BYTES: COLLAPSED FUNCTION SECOID_GetAlgorithmTag_Util]
; [00000006 BYTES: COLLAPSED FUNCTION NSS_Get_SEC_OctetStringTemplate_Util]
; [00000006 BYTES: COLLAPSED FUNCTION DER_SetUInteger]
; [00000006 BYTES: COLLAPSED FUNCTION PORT_Realloc_Util]
; [00000006 BYTES: COLLAPSED FUNCTION SECITEM_ItemsAreEqual_Util]
; [00000006 BYTES: COLLAPSED FUNCTION PL_NewHashTable]
; [00000006 BYTES: COLLAPSED FUNCTION PL_HashTableDestroy]
; [00000006 BYTES: COLLAPSED FUNCTION PL_CompareValues]
; ---------------------------------------------------------------------------

loc_10012408:				; DATA XREF: sub_100078E3+50o
		jmp	ds:SECITEM_HashCompare
; [00000006 BYTES: COLLAPSED FUNCTION SECOID_Init]
; [00000006 BYTES: COLLAPSED FUNCTION SECOID_Shutdown]
; [00000006 BYTES: COLLAPSED FUNCTION PL_HashTableAdd]
; [00000006 BYTES: COLLAPSED FUNCTION PL_HashTableRemove]
; [00000006 BYTES: COLLAPSED FUNCTION PL_HashTableLookup]
; [00000006 BYTES: COLLAPSED FUNCTION PL_HashTableEnumerateEntries]
; [00000006 BYTES: COLLAPSED FUNCTION SECITEM_AllocItem_Util]
; [00000006 BYTES: COLLAPSED FUNCTION DER_DecodeTimeChoice_Util]
; [00000006 BYTES: COLLAPSED FUNCTION NSS_Get_SEC_AnyTemplate_Util]
; [00000006 BYTES: COLLAPSED FUNCTION NSS_Get_SEC_BitStringTemplate_Util]
; [00000006 BYTES: COLLAPSED FUNCTION NSS_Get_SEC_ObjectIDTemplate_Util]
; [00000006 BYTES: COLLAPSED FUNCTION PORT_ArenaMark_Util]
; [00000006 BYTES: COLLAPSED FUNCTION PORT_ArenaRelease_Util]
; [00000006 BYTES: COLLAPSED FUNCTION PORT_ArenaUnmark_Util]
; [00000006 BYTES: COLLAPSED FUNCTION PORT_ArenaStrdup_Util]
; [00000006 BYTES: COLLAPSED FUNCTION SECITEM_CompareItem_Util]
; [00000006 BYTES: COLLAPSED FUNCTION NSSUTIL_ArgGetParamValue]
; [00000006 BYTES: COLLAPSED FUNCTION NSSUTIL_ArgHasFlag]
; [00000006 BYTES: COLLAPSED FUNCTION NSSUTIL_ArgReadLong]
; [00000006 BYTES: COLLAPSED FUNCTION NSSUTIL_Quote]
; [00000006 BYTES: COLLAPSED FUNCTION NSSUTIL_ArgParseSlotFlags]
; [00000006 BYTES: COLLAPSED FUNCTION NSSUTIL_ArgParseSlotInfo]
; [00000006 BYTES: COLLAPSED FUNCTION NSSUTIL_MkSlotString]
; [00000006 BYTES: COLLAPSED FUNCTION NSSUTIL_ArgParseModuleSpec]
; [00000006 BYTES: COLLAPSED FUNCTION NSSUTIL_MkModuleSpec]
; [00000006 BYTES: COLLAPSED FUNCTION NSSUTIL_ArgParseCipherFlags]
; [00000006 BYTES: COLLAPSED FUNCTION NSSUTIL_MkNSSString]
; [00000006 BYTES: COLLAPSED FUNCTION memcpy]
; [00000006 BYTES: COLLAPSED FUNCTION strcmp]
; [00000006 BYTES: COLLAPSED FUNCTION strlen]
; [0000000F BYTES: COLLAPSED FUNCTION __security_check_cookie(x)]
		align 2
; [00000006 BYTES: COLLAPSED FUNCTION memcmp]
; [00000006 BYTES: COLLAPSED FUNCTION memset]
; [00000006 BYTES: COLLAPSED FUNCTION strcpy]
; [0000004C BYTES: COLLAPSED FUNCTION _pre_c_init]

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10012530	proc near		; CODE XREF: ___DllMainCRTStartup+64p
					; ___DllMainCRTStartup+A3p ...

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ecx
		cmp	[ebp+arg_4], 0
		push	ebx
		push	esi
		push	edi
		jnz	loc_1001266B
		mov	eax, dword_10015080
		test	eax, eax
		jle	loc_10012664
		dec	eax
		mov	ebx, offset dword_100153B4
		mov	dword_10015080,	eax
		xor	edi, edi
		mov	eax, large fs:18h
		mov	[ebp+var_4], edi
		mov	edx, [eax+4]
		jmp	short loc_1001256E
; ---------------------------------------------------------------------------

loc_1001256A:				; CODE XREF: sub_10012530+48j
		cmp	eax, edx
		jz	short loc_1001257C

loc_1001256E:				; CODE XREF: sub_10012530+38j
		xor	eax, eax
		mov	ecx, edx
		lock cmpxchg [ebx], ecx
		test	eax, eax
		jnz	short loc_1001256A
		jmp	short loc_10012583
; ---------------------------------------------------------------------------

loc_1001257C:				; CODE XREF: sub_10012530+3Cj
		mov	[ebp+var_4], 1

loc_10012583:				; CODE XREF: sub_10012530+4Aj
		cmp	dword_100153B8,	2
		jz	short loc_10012599
		push	1Fh
		call	_amsg_exit
		pop	ecx
		jmp	loc_1001271B
; ---------------------------------------------------------------------------

loc_10012599:				; CODE XREF: sub_10012530+5Aj
		push	Ptr		; Ptr
		call	ds:DecodePointer
		mov	esi, eax
		mov	[ebp+arg_8], esi
		test	esi, esi
		jz	loc_1001264C
		push	dword_100153BC	; Ptr
		call	ds:DecodePointer
		mov	ebx, eax
		mov	[ebp+arg_4], esi
		mov	[ebp+arg_0], ebx

loc_100125C6:				; CODE XREF: sub_10012530+9Fj
					; sub_10012530+AAj ...
		sub	ebx, 4
		cmp	ebx, esi
		jb	short loc_10012629
		cmp	[ebx], edi
		jz	short loc_100125C6
		push	edi		; Ptr
		call	ds:EncodePointer
		cmp	[ebx], eax
		jz	short loc_100125C6
		push	dword ptr [ebx]	; Ptr
		call	ds:DecodePointer
		push	edi		; Ptr
		mov	esi, eax
		call	ds:EncodePointer
		mov	[ebx], eax
		call	esi
		push	Ptr		; Ptr
		mov	esi, ds:DecodePointer
		call	esi ; DecodePointer
		push	dword_100153BC	; Ptr
		mov	[ebp+var_8], eax
		call	esi ; DecodePointer
		mov	ecx, [ebp+var_8]
		cmp	[ebp+arg_4], ecx
		jnz	short loc_1001261A
		mov	esi, [ebp+arg_8]
		cmp	[ebp+arg_0], eax
		jz	short loc_100125C6

loc_1001261A:				; CODE XREF: sub_10012530+E0j
		mov	esi, ecx
		mov	[ebp+arg_4], ecx
		mov	[ebp+arg_8], esi
		mov	ebx, eax
		mov	[ebp+arg_0], eax
		jmp	short loc_100125C6
; ---------------------------------------------------------------------------

loc_10012629:				; CODE XREF: sub_10012530+9Bj
		cmp	esi, 0FFFFFFFFh
		jz	short loc_10012636
		push	esi
		call	ds:frex
		pop	ecx

loc_10012636:				; CODE XREF: sub_10012530+FCj
		push	edi		; Ptr
		call	ds:EncodePointer
		mov	dword_100153BC,	eax
		mov	ebx, offset dword_100153B4
		mov	Ptr, eax

loc_1001264C:				; CODE XREF: sub_10012530+7Cj
		mov	dword_100153B8,	edi
		cmp	[ebp+var_4], edi
		jnz	loc_1001271B
		xor	eax, eax
		xchg	eax, [ebx]
		jmp	loc_1001271B
; ---------------------------------------------------------------------------

loc_10012664:				; CODE XREF: sub_10012530+19j
					; sub_10012530+19Fj
		xor	eax, eax
		jmp	loc_1001271E
; ---------------------------------------------------------------------------

loc_1001266B:				; CODE XREF: sub_10012530+Cj
		cmp	[ebp+arg_4], 1
		jnz	loc_1001271B
		mov	eax, large fs:18h
		xor	edi, edi
		mov	esi, edi
		mov	ebx, offset dword_100153B4
		mov	edx, [eax+4]
		jmp	short loc_1001268D
; ---------------------------------------------------------------------------

loc_10012689:				; CODE XREF: sub_10012530+167j
		cmp	eax, edx
		jz	short loc_1001269B

loc_1001268D:				; CODE XREF: sub_10012530+157j
		xor	eax, eax
		mov	ecx, edx
		lock cmpxchg [ebx], ecx
		test	eax, eax
		jnz	short loc_10012689
		jmp	short loc_1001269E
; ---------------------------------------------------------------------------

loc_1001269B:				; CODE XREF: sub_10012530+15Bj
		xor	esi, esi
		inc	esi

loc_1001269E:				; CODE XREF: sub_10012530+169j
		cmp	dword_100153B8,	edi
		push	2
		pop	edi
		jz	short loc_100126B2
		push	1Fh
		call	_amsg_exit
		jmp	short loc_100126E7
; ---------------------------------------------------------------------------

loc_100126B2:				; CODE XREF: sub_10012530+177j
		push	offset dword_10013278
		push	offset dword_1001326C
		mov	dword_100153B8,	1
		call	_initterm_e
		pop	ecx
		pop	ecx
		test	eax, eax
		jnz	short loc_10012664
		push	offset dword_10013268
		push	offset dword_10013264
		call	_initterm
		pop	ecx
		mov	dword_100153B8,	edi

loc_100126E7:				; CODE XREF: sub_10012530+180j
		pop	ecx
		test	esi, esi
		jnz	short loc_100126F0
		xor	eax, eax
		xchg	eax, [ebx]

loc_100126F0:				; CODE XREF: sub_10012530+1BAj
		cmp	dword_100153C4,	0
		jz	short loc_10012715
		push	offset dword_100153C4
		call	__IsNonwritableInCurrentImage
		pop	ecx
		test	eax, eax
		jz	short loc_10012715
		push	[ebp+arg_8]
		push	edi
		push	[ebp+arg_0]
		call	dword_100153C4

loc_10012715:				; CODE XREF: sub_10012530+1C7j
					; sub_10012530+1D6j
		inc	dword_10015080

loc_1001271B:				; CODE XREF: sub_10012530+64j
					; sub_10012530+125j ...
		xor	eax, eax
		inc	eax

loc_1001271E:				; CODE XREF: sub_10012530+136j
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn	0Ch
sub_10012530	endp

; [00000023 BYTES: COLLAPSED FUNCTION DllEntryPoint]
; [00000133 BYTES: COLLAPSED FUNCTION ___DllMainCRTStartup]
; [0000003D BYTES: COLLAPSED FUNCTION ___raise_securityfailure]
; [000000FB BYTES: COLLAPSED FUNCTION ___report_gsfailure]
		align 2
; [00000006 BYTES: COLLAPSED FUNCTION __CppXcptFilter]
; [00000006 BYTES: COLLAPSED FUNCTION _amsg_exit]
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_100129D0	proc near		; CODE XREF: __IsNonwritableInCurrentImage+59p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_0]
		xor	edx, edx
		push	ebx
		push	esi
		push	edi
		mov	ecx, [eax+3Ch]
		add	ecx, eax
		movzx	eax, word ptr [ecx+14h]
		movzx	ebx, word ptr [ecx+6]
		add	eax, 18h
		add	eax, ecx
		test	ebx, ebx
		jz	short loc_10012A0C
		mov	edi, [ebp+arg_4]

loc_100129F4:				; CODE XREF: sub_100129D0+3Aj
		mov	esi, [eax+0Ch]
		cmp	edi, esi
		jb	short loc_10012A04
		mov	ecx, [eax+8]
		add	ecx, esi
		cmp	edi, ecx
		jb	short loc_10012A0E

loc_10012A04:				; CODE XREF: sub_100129D0+29j
		inc	edx
		add	eax, 28h
		cmp	edx, ebx
		jb	short loc_100129F4

loc_10012A0C:				; CODE XREF: sub_100129D0+1Fj
		xor	eax, eax

loc_10012A0E:				; CODE XREF: sub_100129D0+32j
		pop	edi
		pop	esi
		pop	ebx
		pop	ebp
		retn
sub_100129D0	endp

; ---------------------------------------------------------------------------
		align 10h
; [000000BA BYTES: COLLAPSED FUNCTION __IsNonwritableInCurrentImage]
		align 10h
; [00000031 BYTES: COLLAPSED FUNCTION __ValidateImageBase]
; [0000003C BYTES: COLLAPSED FUNCTION ___atonexitinit]

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_10012B4D(_onexit_t Func)
sub_10012B4D	proc near		; CODE XREF: sub_10012BF6+6p

var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
Ptr		= dword	ptr -1Ch
ms_exc		= CPPEH_RECORD ptr -18h
Func		= dword	ptr  8

		push	14h
		push	offset stru_10013D20
		call	__SEH_prolog4
		and	[ebp+var_24], 0
		push	Ptr		; Ptr
		mov	esi, ds:DecodePointer
		call	esi ; DecodePointer
		mov	[ebp+Ptr], eax
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_10012B7F
		push	[ebp+Func]	; Func
		call	ds:_onexit
		pop	ecx
		jmp	short loc_10012BE4
; ---------------------------------------------------------------------------

loc_10012B7F:				; CODE XREF: sub_10012B4D+24j
		push	8
		call	_lock
		pop	ecx
		and	[ebp+ms_exc.registration.TryLevel], 0
		push	Ptr		; Ptr
		call	esi ; DecodePointer
		mov	[ebp+Ptr], eax
		push	dword_100153BC	; Ptr
		call	esi ; DecodePointer
		mov	[ebp+var_20], eax
		lea	eax, [ebp+var_20]
		push	eax
		lea	eax, [ebp+Ptr]
		push	eax
		push	[ebp+Func]	; Ptr
		mov	esi, ds:EncodePointer
		call	esi ; EncodePointer
		push	eax
		call	__dllonexit
		add	esp, 0Ch
		mov	edi, eax
		mov	[ebp+var_24], edi
		push	[ebp+Ptr]	; Ptr
		call	esi ; EncodePointer
		mov	Ptr, eax
		push	[ebp+var_20]	; Ptr
		call	esi ; EncodePointer
		mov	dword_100153BC,	eax
		mov	[ebp+ms_exc.registration.TryLevel], 0FFFFFFFEh
		call	loc_10012BED
; ---------------------------------------------------------------------------

loc_10012BE2:				; CODE XREF: sub_10012B4D+A8j
		mov	eax, edi

loc_10012BE4:				; CODE XREF: sub_10012B4D+30j
		call	__SEH_epilog4
		retn
; ---------------------------------------------------------------------------

loc_10012BEA:				; DATA XREF: .rdata:stru_10013D20o
		mov	edi, [ebp+var_24] ; Finally handler 0 for function 10012B4D

loc_10012BED:				; CODE XREF: sub_10012B4D+90j
		push	8
		call	_unlock
		pop	ecx
		retn
sub_10012B4D	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_10012BF6(_onexit_t Func)
sub_10012BF6	proc near		; CODE XREF: _pre_c_init+36p
					; _pre_c_init+42p

Func		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	[ebp+Func]	; Func
		call	sub_10012B4D
		neg	eax
		pop	ecx
		sbb	eax, eax
		neg	eax
		dec	eax
		pop	ebp
		retn
sub_10012BF6	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10012C0B	proc near		; CODE XREF: DllEntryPoint+9p

PerformanceCount= LARGE_INTEGER	ptr -14h
SystemTimeAsFileTime= _FILETIME	ptr -0Ch
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		sub	esp, 14h
		and	[ebp+SystemTimeAsFileTime.dwLowDateTime], 0
		and	[ebp+SystemTimeAsFileTime.dwHighDateTime], 0
		mov	eax, ___security_cookie
		push	esi
		push	edi
		mov	edi, 0BB40E64Eh
		mov	esi, 0FFFF0000h
		cmp	eax, edi
		jz	short loc_10012C3B
		test	esi, eax
		jz	short loc_10012C3B
		not	eax
		mov	dword_10015014,	eax
		jmp	short loc_10012CA1
; ---------------------------------------------------------------------------

loc_10012C3B:				; CODE XREF: sub_10012C0B+21j
					; sub_10012C0B+25j
		lea	eax, [ebp+SystemTimeAsFileTime]
		push	eax		; lpSystemTimeAsFileTime
		call	ds:GetSystemTimeAsFileTime
		mov	eax, [ebp+SystemTimeAsFileTime.dwHighDateTime]
		xor	eax, [ebp+SystemTimeAsFileTime.dwLowDateTime]
		mov	[ebp+var_4], eax
		call	ds:GetCurrentThreadId
		xor	[ebp+var_4], eax
		call	ds:GetCurrentProcessId
		xor	[ebp+var_4], eax
		lea	eax, [ebp+PerformanceCount]
		push	eax		; lpPerformanceCount
		call	ds:QueryPerformanceCounter
		mov	ecx, dword ptr [ebp+PerformanceCount+4]
		lea	eax, [ebp+var_4]
		xor	ecx, dword ptr [ebp+PerformanceCount]
		xor	ecx, [ebp+var_4]
		xor	ecx, eax
		cmp	ecx, edi
		jnz	short loc_10012C83
		mov	ecx, 0BB40E64Fh
		jmp	short loc_10012C93
; ---------------------------------------------------------------------------

loc_10012C83:				; CODE XREF: sub_10012C0B+6Fj
		test	esi, ecx
		jnz	short loc_10012C93
		mov	eax, ecx
		or	eax, 4711h
		shl	eax, 10h
		or	ecx, eax

loc_10012C93:				; CODE XREF: sub_10012C0B+76j
					; sub_10012C0B+7Aj
		mov	___security_cookie, ecx
		not	ecx
		mov	dword_10015014,	ecx

loc_10012CA1:				; CODE XREF: sub_10012C0B+2Ej
		pop	edi
		pop	esi
		mov	esp, ebp
		pop	ebp
		retn
sub_10012C0B	endp

; [00000022 BYTES: COLLAPSED FUNCTION DllMain(x,x,x)]

; =============== S U B	R O U T	I N E =======================================


sub_10012CC9	proc near		; CODE XREF: _pre_c_init+2Cp
		push	esi
		push	edi
		mov	esi, offset dword_10013CC8
		mov	edi, offset dword_10013CC8
		jmp	short loc_10012CE2
; ---------------------------------------------------------------------------

loc_10012CD7:				; CODE XREF: sub_10012CC9+1Bj
		mov	eax, [esi]
		test	eax, eax
		jz	short loc_10012CDF
		call	eax

loc_10012CDF:				; CODE XREF: sub_10012CC9+12j
		add	esi, 4

loc_10012CE2:				; CODE XREF: sub_10012CC9+Cj
		cmp	esi, edi
		jb	short loc_10012CD7
		pop	edi
		pop	esi
		retn
sub_10012CC9	endp


; =============== S U B	R O U T	I N E =======================================


; int __cdecl Func()
Func		proc near		; DATA XREF: _pre_c_init+31o
		push	esi
		push	edi
		mov	esi, offset dword_10013CD0
		mov	edi, offset dword_10013CD0
		jmp	short loc_10012D02
; ---------------------------------------------------------------------------

loc_10012CF7:				; CODE XREF: Func+1Bj
		mov	eax, [esi]
		test	eax, eax
		jz	short loc_10012CFF
		call	eax

loc_10012CFF:				; CODE XREF: Func+12j
		add	esi, 4

loc_10012D02:				; CODE XREF: Func+Cj
		cmp	esi, edi
		jb	short loc_10012CF7
		pop	edi
		pop	esi
		retn
Func		endp

; ---------------------------------------------------------------------------
		align 2
; [00000006 BYTES: COLLAPSED FUNCTION _initterm]
; [00000006 BYTES: COLLAPSED FUNCTION _initterm_e]

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10012D16()
sub_10012D16	proc near		; DATA XREF: _pre_c_init+3Bo
		push	offset dword_100153A8
		call	__clean_type_info_names_internal
		pop	ecx
		retn
sub_10012D16	endp

; ---------------------------------------------------------------------------
		align 10h
; [00000045 BYTES: COLLAPSED FUNCTION __SEH_prolog4]
; [00000014 BYTES: COLLAPSED FUNCTION __SEH_epilog4]
; [00000023 BYTES: COLLAPSED FUNCTION __except_handler4]
; [00000006 BYTES: COLLAPSED FUNCTION _crt_debugger_hook]
; [00000006 BYTES: COLLAPSED FUNCTION __crtUnhandledException]
; [00000006 BYTES: COLLAPSED FUNCTION __crtTerminateProcess]
; [00000006 BYTES: COLLAPSED FUNCTION _lock]
; [00000006 BYTES: COLLAPSED FUNCTION _unlock]
; [00000006 BYTES: COLLAPSED FUNCTION __dllonexit]
; [00000006 BYTES: COLLAPSED FUNCTION __clean_type_info_names_internal]
; [00000006 BYTES: COLLAPSED FUNCTION _except_handler4_common]
; [00000006 BYTES: COLLAPSED FUNCTION IsProcessorFeaturePresent]
		align 20h
		dd 80h dup(?)
_text		ends

; Section 2. (virtual address 00013000)
; Virtual size			: 00001C3E (   7230.)
; Section size in file		: 00001E00 (   7680.)
; Offset to raw	data for section: 00012200
; Flags	40300040: Data Readable
; Alignment	: 4 bytes
;
; Imports from KERNEL32.dll
;
; ===========================================================================

; Segment type:	Externs
; _idata
; void __stdcall GetSystemTimeAsFileTime(LPFILETIME lpSystemTimeAsFileTime)
		extrn GetSystemTimeAsFileTime:dword ; CODE XREF: sub_10012C0B+34p
					; DATA XREF: sub_10012C0B+34r ...
; PVOID	__stdcall EncodePointer(PVOID Ptr)
		extrn EncodePointer:dword ; CODE XREF: _pre_c_init+10p
					; sub_10012530+A2p ...
; PVOID	__stdcall DecodePointer(PVOID Ptr)
		extrn DecodePointer:dword ; CODE XREF: sub_10012530+6Fp
					; sub_10012530+88p ...
; BOOL __stdcall IsDebuggerPresent()
		extrn IsDebuggerPresent:dword ;	CODE XREF: ___raise_securityfailure+3p
					; DATA XREF: ___raise_securityfailure+3r
; BOOL __stdcall IsProcessorFeaturePresent(DWORD ProcessorFeature)
		extrn __imp_IsProcessorFeaturePresent:dword
					; DATA XREF: IsProcessorFeaturePresentr
; BOOL __stdcall QueryPerformanceCounter(LARGE_INTEGER *lpPerformanceCount)
		extrn QueryPerformanceCounter:dword ; CODE XREF: sub_10012C0B+59p
					; DATA XREF: sub_10012C0B+59r
; BOOL __stdcall DisableThreadLibraryCalls(HMODULE hLibModule)
		extrn DisableThreadLibraryCalls:dword ;	CODE XREF: DllMain(x,x,x)+15p
					; DATA XREF: DllMain(x,x,x)+15r
; BOOL __stdcall FlushFileBuffers(HANDLE hFile)
		extrn FlushFileBuffers:dword ; CODE XREF: sub_1000F920+25p
					; DATA XREF: sub_1000F920+25r
; DWORD	__stdcall GetCurrentThreadId()
		extrn GetCurrentThreadId:dword ; CODE XREF: sub_10012C0B+43p
					; DATA XREF: sub_10012C0B+43r
; DWORD	__stdcall GetCurrentProcessId()
		extrn GetCurrentProcessId:dword	; CODE XREF: sub_10012C0B+4Cp
					; DATA XREF: sub_10012C0B+4Cr

;
; Imports from MSVCR120.dll
;
; int __cdecl close(int)
		extrn _close:dword	; CODE XREF: sub_1000F130+DDp
					; DATA XREF: sub_1000F130+DDr ...
; __int32 __cdecl lseek(int, __int32, int)
		extrn _lseek:dword	; CODE XREF: sub_1000E7C0+73p
					; sub_1000F920+12p ...
; int open(const char *, int, ...)
		extrn _open:dword	; CODE XREF: sub_1000E3F0+129p
					; sub_100121B0+E4p
					; DATA XREF: ...
; int __cdecl read(int,	void *,	unsigned int)
		extrn _read:dword	; CODE XREF: sub_1000E3F0+1A3p
					; sub_100102F0+B2p
					; DATA XREF: ...
; int __cdecl getpid()
		extrn _getpid:dword	; CODE XREF: sub_100121B0+1Ap
					; DATA XREF: sub_100121B0+1Ar
; int __cdecl unlink(const char	*Filename)
		extrn _unlink:dword	; CODE XREF: sub_1000F130+FAp
					; DATA XREF: sub_1000F130+FAr
		extrn __imp__except_handler4_common:dword
					; DATA XREF: _except_handler4_commonr
		extrn __imp___clean_type_info_names_internal:dword
					; DATA XREF: __clean_type_info_names_internalr
; _onexit_t __cdecl onexit(_onexit_t Func)
		extrn _onexit:dword	; CODE XREF: sub_10012B4D+29p
					; DATA XREF: sub_10012B4D+29r
		extrn __imp___dllonexit:dword ;	DATA XREF: __dllonexitr
		extrn _calloc_crt:dword	; CODE XREF: ___atonexitinit+11p
					; DATA XREF: ___atonexitinit+11r
		extrn __imp__unlock:dword ; DATA XREF: _unlockr
		extrn __imp__lock:dword	; DATA XREF: _lockr
		extrn __imp___crtTerminateProcess:dword	; DATA XREF: __crtTerminateProcessr
		extrn __imp___crtUnhandledException:dword
					; DATA XREF: __crtUnhandledExceptionr
		extrn __imp__crt_debugger_hook:dword ; DATA XREF: _crt_debugger_hookr
		extrn __imp__initterm_e:dword ;	DATA XREF: _initterm_er
		extrn __imp__initterm:dword ; DATA XREF: _inittermr
		extrn _malloc_crt:dword	; CODE XREF: _pre_c_init+6p
					; DATA XREF: _pre_c_init+6r
		extrn __imp__amsg_exit:dword ; DATA XREF: _amsg_exitr
		extrn __imp___CppXcptFilter:dword ; DATA XREF: __CppXcptFilterr
; int __cdecl isdigit(int C)
		extrn isdigit:dword	; CODE XREF: sub_100121B0+124p
					; DATA XREF: sub_100121B0+124r
; size_t __cdecl fwrite(const void *Str, size_t	Size, size_t Count, FILE *File)
		extrn fwrite:dword	; CODE XREF: sub_10010DA0+242p
					; DATA XREF: sub_10010DA0+242r
; FILE *__cdecl	_iob_func()
		extrn __iob_func:dword	; CODE XREF: sub_10010DA0:loc_10010FCFp
					; DATA XREF: sub_10010DA0:loc_10010FCFr
; __int32 __cdecl get_osfhandle(int)
		extrn _get_osfhandle:dword ; CODE XREF:	sub_1000F920+1Bp
					; DATA XREF: sub_1000F920+1Br
; void *__cdecl	memmove(void *Dst, const void *Src, size_t Size)
		extrn memmove:dword	; CODE XREF: sub_1000EE40+24p
					; sub_10010130+7Fp ...
; void __cdecl abort()
		extrn abort:dword	; CODE XREF: sub_1000E8F0:loc_1000EBFEp
					; DATA XREF: sub_1000E8F0:loc_1000EBFEr
		extrn _stat64i32:dword	; CODE XREF: sub_1000E3F0+D1p
					; sub_1000F280+93p ...
; int *__cdecl errno()
		extrn _errno:dword	; CODE XREF: sub_1000E2A0:loc_1000E2E4p
					; sub_1000E3F0+28p ...
; char *__cdecl	strrchr(const char *Str, int Ch)
		extrn strrchr:dword	; CODE XREF: sub_1000E180+16p
					; DATA XREF: sub_1000E180+16r
; char *__cdecl	strcpy(char *Dest, const char *Source)
		extrn __imp_strcpy:dword ; DATA	XREF: strcpyr
; int __cdecl tolower(int C)
		extrn tolower:dword	; CODE XREF: sub_10008642+27p
					; sub_1000897A+4Cp
					; DATA XREF: ...
; void *__cdecl	memset(void *Dst, int Val, size_t Size)
		extrn __imp_memset:dword ; DATA	XREF: memsetr
; int __cdecl strncmp(const char *Str1,	const char *Str2, size_t MaxCount)
		extrn strncmp:dword	; CODE XREF: sub_100076BB+Dp
					; DATA XREF: sub_100076BB+Dr
; char *__cdecl	getenv(const char *VarName)
		extrn getenv:dword	; CODE XREF: sub_10003C4C+C4p
					; sub_10010C50+2Dp ...
; int __cdecl memcmp(const void	*Buf1, const void *Buf2, size_t	Size)
		extrn __imp_memcmp:dword ; DATA	XREF: memcmpr
; size_t __cdecl strlen(const char *Str)
		extrn __imp_strlen:dword ; DATA	XREF: strlenr
; int __cdecl strcmp(const char	*Str1, const char *Str2)
		extrn __imp_strcmp:dword ; DATA	XREF: strcmpr
; void *__cdecl	memcpy(void *Dst, const	void *Src, size_t Size)
		extrn __imp_memcpy:dword ; DATA	XREF: memcpyr
; int __cdecl write(int, const void *, unsigned	int)
		extrn _write:dword	; CODE XREF: sub_1000E7C0+8Cp
					; sub_100105C0+1E9p ...

;
; Imports from mozglue.dll
;
; char *__cdecl	strdup(const char *Src)
		extrn strdup:dword	; CODE XREF: sub_1000E3F0+9Bp
					; sub_10010C50+111p
					; DATA XREF: ...
; void *__cdecl	malloc(size_t Size)
		extrn malloc:dword	; CODE XREF: sub_1000E3F0+2BFp
					; sub_1000EE40+7p ...
; void __cdecl free(void *Memory)
		extrn free:dword	; CODE XREF: .text:1000EC4Fp
					; sub_1000EE40+3Ap ...
; void *__cdecl	calloc(size_t NumOfElements, size_t SizeOfElements)
		extrn calloc:dword	; CODE XREF: sub_1000E330+5Cp
					; sub_1000E3F0+5Dp ...
		extrn frex:dword	; CODE XREF: sub_10012530+FFp
					; DATA XREF: sub_10012530+FFr

;
; Imports from nss3.dll
;
		extrn __imp_SECOID_Shutdown:dword ; DATA XREF: SECOID_Shutdownr
					; .rdata:10013E58o
		extrn __imp_PL_HashTableAdd:dword ; DATA XREF: PL_HashTableAddr
		extrn __imp_PL_HashTableRemove:dword ; DATA XREF: PL_HashTableRemover
		extrn __imp_PL_HashTableLookup:dword ; DATA XREF: PL_HashTableLookupr
		extrn __imp_PL_HashTableEnumerateEntries:dword
					; DATA XREF: PL_HashTableEnumerateEntriesr
		extrn __imp_SECITEM_AllocItem_Util:dword
					; DATA XREF: SECITEM_AllocItem_Utilr
		extrn PR_Now:dword	; CODE XREF: sub_100089D9:loc_10008A55p
					; DATA XREF: sub_100089D9:loc_10008A55r
		extrn __imp_DER_DecodeTimeChoice_Util:dword
					; DATA XREF: DER_DecodeTimeChoice_Utilr
		extrn __imp_NSS_Get_SEC_AnyTemplate_Util:dword
					; DATA XREF: NSS_Get_SEC_AnyTemplate_Utilr
		extrn __imp_NSS_Get_SEC_BitStringTemplate_Util:dword
					; DATA XREF: NSS_Get_SEC_BitStringTemplate_Utilr
		extrn __imp_NSS_Get_SEC_ObjectIDTemplate_Util:dword
					; DATA XREF: NSS_Get_SEC_ObjectIDTemplate_Utilr
		extrn __imp_PORT_ArenaMark_Util:dword ;	DATA XREF: PORT_ArenaMark_Utilr
		extrn __imp_PORT_ArenaRelease_Util:dword
					; DATA XREF: PORT_ArenaRelease_Utilr
		extrn __imp_PORT_ArenaUnmark_Util:dword	; DATA XREF: PORT_ArenaUnmark_Utilr
		extrn __imp_PORT_ArenaStrdup_Util:dword	; DATA XREF: PORT_ArenaStrdup_Utilr
		extrn __imp_SECITEM_CompareItem_Util:dword
					; DATA XREF: SECITEM_CompareItem_Utilr
		extrn PR_NewMonitor:dword ; CODE XREF: sub_1000B41A+Dp
					; sub_1000C7B1+Dp
					; DATA XREF: ...
		extrn PR_DestroyMonitor:dword ;	CODE XREF: sub_1000B41A+35p
					; sub_1000C0BF+22p ...
		extrn __imp_PL_NewHashTable:dword ; DATA XREF: PL_NewHashTabler
		extrn PR_ExitMonitor:dword ; CODE XREF:	sub_1000CBCD+7p
					; DATA XREF: sub_1000CBCD+7r
		extrn __imp_NSSUTIL_ArgGetParamValue:dword
					; DATA XREF: NSSUTIL_ArgGetParamValuer
		extrn __imp_NSSUTIL_ArgHasFlag:dword ; DATA XREF: NSSUTIL_ArgHasFlagr
		extrn __imp_NSSUTIL_ArgReadLong:dword ;	DATA XREF: NSSUTIL_ArgReadLongr
		extrn __imp_NSSUTIL_Quote:dword	; DATA XREF: NSSUTIL_Quoter
		extrn __imp_NSSUTIL_ArgParseSlotFlags:dword
					; DATA XREF: NSSUTIL_ArgParseSlotFlagsr
		extrn __imp_NSSUTIL_ArgParseSlotInfo:dword
					; DATA XREF: NSSUTIL_ArgParseSlotInfor
		extrn __imp_NSSUTIL_MkSlotString:dword ; DATA XREF: NSSUTIL_MkSlotStringr
		extrn __imp_NSSUTIL_ArgParseModuleSpec:dword
					; DATA XREF: NSSUTIL_ArgParseModuleSpecr
		extrn __imp_SECOID_Init:dword ;	DATA XREF: SECOID_Initr
		extrn __imp_NSSUTIL_ArgParseCipherFlags:dword
					; DATA XREF: NSSUTIL_ArgParseCipherFlagsr
		extrn __imp_NSSUTIL_MkNSSString:dword ;	DATA XREF: NSSUTIL_MkNSSStringr
		extrn PR_LoadLibraryWithFlags:dword ; CODE XREF: sub_1000E180+84p
					; sub_1000E230+5Bp
					; DATA XREF: ...
		extrn PR_FindFunctionSymbol:dword ; CODE XREF: .text:1000E115p
					; DATA XREF: .text:1000E115r
		extrn PR_GetLibraryFilePathname:dword ;	CODE XREF: sub_1000E230+11p
					; DATA XREF: sub_1000E230+11r
		extrn PR_CallOnce:dword	; CODE XREF: sub_1000DFE0+13p
					; sub_1000E020+13p ...
		extrn PR_GetDirectorySeparator:dword ; CODE XREF: sub_1000E180+7p
					; DATA XREF: sub_1000E180+7r
		extrn PR_FindSymbol:dword ; CODE XREF: sub_10007A86+63p
					; sub_10007A86+70p
					; DATA XREF: ...
		extrn PR_UnloadLibrary:dword ; CODE XREF: sub_10007A86+92p
					; .text:1000E169p
					; DATA XREF: ...
		extrn PR_LoadLibrary:dword ; CODE XREF:	sub_10007A86+4Ap
					; DATA XREF: sub_10007A86+4Ar
		extrn __imp_SECITEM_ItemsAreEqual_Util:dword
					; DATA XREF: SECITEM_ItemsAreEqual_Utilr
		extrn __imp_PORT_Realloc_Util:dword ; DATA XREF: PORT_Realloc_Utilr
		extrn __imp_DER_SetUInteger:dword ; DATA XREF: DER_SetUIntegerr
		extrn PR_htonl:dword	; CODE XREF: sub_10006269+D4p
					; DATA XREF: sub_10006269+D4r
		extrn __imp_NSS_Get_SEC_OctetStringTemplate_Util:dword
					; DATA XREF: NSS_Get_SEC_OctetStringTemplate_Utilr
		extrn PR_ntohl:dword	; CODE XREF: sub_1000435F+190p
					; DATA XREF: sub_1000435F+190r
		extrn __imp_SECOID_GetAlgorithmTag_Util:dword
					; DATA XREF: SECOID_GetAlgorithmTag_Utilr
		extrn __imp_SECOID_SetAlgorithmID_Util:dword
					; DATA XREF: SECOID_SetAlgorithmID_Utilr
		extrn __imp_SECOID_FindOIDByTag_Util:dword
					; DATA XREF: SECOID_FindOIDByTag_Utilr
		extrn __imp_SECOID_FindOIDTag_Util:dword
					; DATA XREF: SECOID_FindOIDTag_Utilr
		extrn PR_Free:dword	; CODE XREF: sub_10007714+85p
					; sub_1000E230+2Ep
					; DATA XREF: ...
		extrn PR_GetEnv:dword	; CODE XREF: sub_10007A86+86p
					; DATA XREF: sub_10007A86+86r
		extrn SECITEM_HashCompare:dword	; DATA XREF: .text:loc_10012408r
		extrn __imp_SEC_ASN1EncodeInteger_Util:dword
					; DATA XREF: SEC_ASN1EncodeInteger_Utilr
		extrn __imp_PL_CompareValues:dword ; DATA XREF:	PL_CompareValuesr
		extrn __imp_SEC_ASN1EncodeItem_Util:dword
					; DATA XREF: SEC_ASN1EncodeItem_Utilr
		extrn __imp_SEC_QuickDERDecodeItem_Util:dword
					; DATA XREF: SEC_QuickDERDecodeItem_Utilr
		extrn PR_Unlock:dword	; CODE XREF: sub_100019F0+17p
					; sub_10001A13+25p ...
		extrn PR_Lock:dword	; CODE XREF: sub_100019F0+Cp
					; sub_10001A13+Cp ...
		extrn PR_DestroyLock:dword ; CODE XREF:	sub_10001CFD+5Ap
					; sub_10007613+39p ...
		extrn PR_NewLock:dword	; CODE XREF: sub_1000226B+39p
					; sub_100078E3+3Dp ...
		extrn __imp_NSSUTIL_MkModuleSpec:dword ; DATA XREF: NSSUTIL_MkModuleSpecr
		extrn __imp_SECITEM_ZfreeItem_Util:dword
					; DATA XREF: SECITEM_ZfreeItem_Utilr
		extrn __imp_SECITEM_FreeItem_Util:dword	; DATA XREF: SECITEM_FreeItem_Utilr
		extrn __imp_SECITEM_DupItem_Util:dword ; DATA XREF: SECITEM_DupItem_Utilr
		extrn __imp_SECITEM_CopyItem_Util:dword	; DATA XREF: SECITEM_CopyItem_Utilr
		extrn __imp_PORT_FreeArena_Util:dword ;	DATA XREF: PORT_FreeArena_Utilr
		extrn __imp_PORT_ArenaZAlloc_Util:dword	; DATA XREF: PORT_ArenaZAlloc_Utilr
		extrn __imp_PORT_ArenaAlloc_Util:dword ; DATA XREF: PORT_ArenaAlloc_Utilr
		extrn __imp_PORT_NewArena_Util:dword ; DATA XREF: PORT_NewArena_Utilr
		extrn __imp_PORT_GetError_Util:dword ; DATA XREF: PORT_GetError_Utilr
		extrn __imp_PORT_SetError_Util:dword ; DATA XREF: PORT_SetError_Utilr
		extrn __imp_PORT_Strdup_Util:dword ; DATA XREF:	PORT_Strdup_Utilr
		extrn __imp_NSS_Get_SECOID_AlgorithmIDTemplate_Util:dword
					; DATA XREF: NSS_Get_SECOID_AlgorithmIDTemplate_Utilr
		extrn PR_smprintf_free:dword ; CODE XREF: sub_10001392+32p
					; sub_1000148D+21p ...
		extrn PR_smprintf:dword	; CODE XREF: sub_10001189+2Cp
					; sub_10007714+2Ep ...
		extrn __imp_PL_HashTableDestroy:dword ;	DATA XREF: PL_HashTableDestroyr
		extrn PR_CloseFileMap:dword ; CODE XREF: sub_10001101+1Cp
					; sub_10001392+D5p
					; DATA XREF: ...
		extrn PR_MemUnmap:dword	; CODE XREF: sub_10001101+13p
					; DATA XREF: sub_10001101+13r
		extrn PR_MemMap:dword	; CODE XREF: sub_10001392+98p
					; DATA XREF: sub_10001392+98r
		extrn PR_CreateFileMap:dword ; CODE XREF: sub_10001392+6Bp
					; DATA XREF: sub_10001392+6Br
		extrn PR_MkDir:dword	; CODE XREF: sub_10001518+44p
					; DATA XREF: sub_10001518+44r
		extrn PR_Access:dword	; CODE XREF: sub_10001518+26p
					; DATA XREF: sub_10001518+26r
		extrn PR_Delete:dword	; CODE XREF: sub_1000148D+1Ap
					; sub_10001518+A1p
					; DATA XREF: ...
		extrn PR_Write:dword	; CODE XREF: sub_10001518+7Dp
					; DATA XREF: sub_10001518+7Dr
		extrn PR_Read:dword	; CODE XREF: sub_10001000+1Dp
					; DATA XREF: sub_10001000+1Dr
		extrn PR_Close:dword	; CODE XREF: sub_10001392+A8p
					; sub_10001392+E1p ...
		extrn PR_OpenFile:dword	; CODE XREF: sub_10001392+29p
					; sub_10001518+57p
					; DATA XREF: ...
		extrn PR_GetError:dword	; CODE XREF: sub_10001392+7Ap
					; sub_10001392:loc_1000145Ap ...
		extrn PR_SetError:dword	; CODE XREF: sub_10001000+40p
					; sub_10001189+3Dp ...
		extrn __imp_NSSBase64_EncodeItem_Util:dword
					; DATA XREF: NSSBase64_EncodeItem_Utilr
		extrn __imp_PORT_Free_Util:dword ; DATA	XREF: PORT_Free_Utilr
		extrn __imp_PORT_ZAlloc_Util:dword ; DATA XREF:	PORT_ZAlloc_Utilr
		extrn PR_EnterMonitor:dword ; CODE XREF: sub_1000C736+7p
					; DATA XREF: sub_1000C736+7r
		extrn __imp_PORT_Alloc_Util:dword ; DATA XREF: PORT_Alloc_Utilr


; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 10013264h
dword_10013264	dd 0			; DATA XREF: sub_10012530+1A6o
dword_10013268	dd 0			; DATA XREF: sub_10012530+1A1o
dword_1001326C	dd 0			; DATA XREF: sub_10012530+187o
		dd offset _pre_c_init
		dd offset ___atonexitinit
dword_10013278	dd 2 dup(0)		; DATA XREF: sub_10012530:loc_100126B2o
; Debug	Directory entries
		dd 0			; Characteristics
		dd 56E89987h		; TimeDateStamp: Tue Mar 15 23:23:51 2016
		dw 0			; MajorVersion
		dw 0			; MinorVersion
		dd 2			; Type:	IMAGE_DEBUG_TYPE_CODEVIEW
		dd 8Dh			; SizeOfData
		dd rva asc_10013C10	; AddressOfRawData
		dd 12E10h		; PointerToRawData
		dd 0			; Characteristics
		dd 56E89987h		; TimeDateStamp: Tue Mar 15 23:23:51 2016
		dw 0			; MajorVersion
		dw 0			; MinorVersion
		dd 0Ch			; Type
		dd 14h			; SizeOfData
		dd rva dword_10013CA0	; AddressOfRawData
		dd 12EA0h		; PointerToRawData
dword_100132B8	dd 4000h, 2 dup(0)	; DATA XREF: sub_100015E5+32o
		dd 20000h, 2 dup(0)
aSS		db '%s/%s',0            ; DATA XREF: sub_10001189+27o
					; sub_10007714+29o ...
		align 4
; char Src[]
Src		db '.dir',0             ; DATA XREF: sub_1000127D+10o
		align 10h
dword_100132E0	dd 10h,	2 dup(0)	; DATA XREF: sub_10001D67+5Bo
					; sub_10001E8A+4Bo
		dd 18h,	4, 3 dup(0)
		dd 2, 0Ch, 6 dup(0)
dword_10013320	dd 10h,	2 dup(0)	; DATA XREF: sub_10001D67+33o
					; sub_10001E8A+7Ao
		dd 24h,	4800h, 0
		dd offset off_10013360
		align 10h
		dd 4, 18h, 6 dup(0)
off_10013360	dd offset NSS_Get_SECOID_AlgorithmIDTemplate_Util
					; DATA XREF: .rdata:10013338o
					; .rdata:10013390o
		dd 1000h, 0
		dd offset dword_10013378
		dd 2 dup(0)
dword_10013378	dd 10h,	2 dup(0)	; DATA XREF: .rdata:1001336Co
		dd 28h,	4800h, 4
		dd offset off_10013360
		align 8
		dd 4, 1Ch, 6 dup(0)
dword_100133B8	dd 0			; DATA XREF: sub_100018E5+2Co
					; sub_10007714+14o ...
aGlobalSalt	db 'global-salt',0      ; DATA XREF: sub_1000169A+Bo
					; sub_100016D9+Bo ...
aPasswordCheck	db 'password-check',0   ; DATA XREF: sub_10001FC4+67o
					; sub_100023BF+26o ...
		align 4
aVersion	db 'Version',0          ; DATA XREF: sub_10001CAA+26o
					; sub_1000299F+9o ...
; char aServerKey[]
aServerKey	db 'Server-Key',0       ; DATA XREF: sub_10002BD3+73o
		align 4
aFakePasswordCh	db 'fake-password-check',0 ; DATA XREF: sub_100026D9+C0o
a1		db '1',0                ; DATA XREF: sub_100026D9+D7o
					; sub_10007A08:loc_10007A2Fo
		align 4
aKey		db 'key',0              ; DATA XREF: sub_10002505+3Fo
					; sub_100029E8+20o ...
; char Str2[]
Str2		db 'password',0         ; DATA XREF: sub_10001AD7:loc_10001B1Fo
					; sub_10001B8C:loc_10001BD4o
		align 4
dword_10013414	dd 0			; DATA XREF: sub_100049DD+33r
		dd 3, 2, 4, 0CE534353h,	0CE534351h, 0CE534352h,	1, 0
		dd offset dword_10015000
		dd 1, 0
		dd offset byte_10015028
		dd 1, 3	dup(0)
; char VarName[]
VarName		db 'NSS_USE_DECODED_CKA_EC_POINT',0 ; DATA XREF: sub_10003C4C:loc_10003D0Bo
		align 4
aVersionNss3_21	db 'Version: NSS 3.21.1 Basic ECC',0
		align 4
a8		db '8',0                ; DATA XREF: .text:loc_1000786Bo
		align 4
a7		db '7',0                ; DATA XREF: .text:loc_10007872o
		align 10h
a6		db '6',0                ; DATA XREF: .text:loc_10007879o
		align 4
a5		db '5',0                ; DATA XREF: .text:loc_10007880o
		align 4
aScertS_db	db '%scert%s.db',0      ; DATA XREF: .text:1000788Ao
a4		db '4',0                ; DATA XREF: sub_10007A08:loc_10007A21o
		align 4
a3		db '3',0                ; DATA XREF: sub_10007A08:loc_10007A28o
		align 4
aSkeyS_db	db '%skey%s.db',0       ; DATA XREF: sub_10007A08+31o
		align 4
; char aMultiaccess[]
aMultiaccess	db 'multiaccess:',0     ; DATA XREF: sub_100076BB+7o
		align 4
aRdb_dll	db 'rdb.dll',0          ; DATA XREF: sub_10007A86:loc_10007ACBo
aRdbstatus	db 'rdbstatus',0        ; DATA XREF: sub_10007A86+5Do
		align 4
aRdbopen	db 'rdbopen',0          ; DATA XREF: sub_10007A86+65o
aNss_disable_un	db 'NSS_DISABLE_UNLOAD',0 ; DATA XREF: sub_10007A86+81o
		align 4
off_10013508	dd offset NSS_Get_SECOID_AlgorithmIDTemplate_Util
					; DATA XREF: .rdata:10013528o
		align 10h
dword_10013510	dd 10h,	2 dup(0)	; DATA XREF: sub_1000849A+7Bo
		dd 28h,	4800h, 4
		dd offset off_10013508
		align 10h
		dd 3, 1Ch, 6 dup(0)
dword_10013550	dd 10h,	2 dup(0)	; DATA XREF: sub_1000849A+181o
		dd 98h,	2, 0Ch,	2 dup(0)
		dd 2, 18h, 6 dup(0)
dword_10013590	dd 2, 30h, 6 dup(0)	; DATA XREF: sub_1000849A+165o
dword_100135B0	dd 2, 24h, 6 dup(0)	; DATA XREF: sub_1000849A+143o
dword_100135D0	dd 10h,	2 dup(0)	; DATA XREF: sub_10002C7C+250o
					; sub_10002FC8+127o
		dd 28h,	2, 4, 2	dup(0)
		dd 2, 10h, 2 dup(0)
		dd 2, 1Ch, 6 dup(0)
dword_10013620	dd 10h,	2 dup(0)	; DATA XREF: sub_10002C7C+28Ao
					; sub_10002FC8+149o
		dd 0B0h, 2, 0Ch, 2 dup(0)
		dd 2, 18h, 2 dup(0)
		dd 2, 24h, 2 dup(0)
		dd 2, 30h, 2 dup(0)
		dd 2, 3Ch, 2 dup(0)
		dd 2, 48h, 2 dup(0)
		dd 2, 54h, 2 dup(0)
		dd 2, 60h, 2 dup(0)
		dd 2, 6Ch, 6 dup(0)
dword_100136D0	dd 10h,	2 dup(0)	; DATA XREF: sub_10002C7C+2A4o
		dd 0B0h, 2, 0Ch, 2 dup(0)
		dd 400h, 18h, 2	dup(0)
		dd 2, 24h, 2 dup(0)
		dd 2, 30h, 2 dup(0)
		dd 2, 3Ch, 2 dup(0)
		dd 2, 48h, 2 dup(0)
		dd 2, 54h, 2 dup(0)
		dd 2, 60h, 2 dup(0)
		dd 2, 6Ch, 6 dup(0)
dword_10013780	dd 10h,	2 dup(0)	; DATA XREF: sub_10002C7C+20Fo
					; sub_10002FC8+105o
		dd 0B0h, 2, 30h, 2 dup(0)
		dd 2, 3Ch, 6 dup(0)
dword_100137C0	dd 10h,	2 dup(0)	; DATA XREF: sub_10002C7C+1CDo
					; sub_10002FC8+DAo
		dd 0B0h, 2, 24h, 2 dup(0)
		dd 2, 30h, 2 dup(0)
		dd 2, 18h, 2 dup(0)
		dd 2, 0Ch, 6 dup(0)
		dd 100000h, 4, 0
		dd 84h,	6, 78h,	0
		dd 1, 4	dup(0)
dword_10013850	dd 10h,	2 dup(0)	; DATA XREF: sub_10002C7C+12Do
					; sub_10002FC8+9Fo
		dd 0B0h, 2, 0A4h, 2 dup(0)
		dd 4, 98h, 2 dup(0)
		dd 43A0h, 80h
		dd offset off_10013918
		align 10h
		dd 43A1h, 8Ch
		dd offset off_10013914
		dd 5 dup(0)
dword_100138B0	dd 10h,	2 dup(0)	; DATA XREF: sub_10002C7C+AAo
					; sub_10002FC8:loc_10003142o
		dd 38h,	2, 4, 2	dup(0)
		dd 4800h, 10h
		dd offset off_1001391C
		align 10h
		dd 4, 28h, 2 dup(0)
		dd 1A0h, 34h
		dd offset dword_10013960
		dd 5 dup(0)
off_10013910	dd offset NSS_Get_SEC_AnyTemplate_Util ; DATA XREF: .rdata:10013948o
off_10013914	dd offset NSS_Get_SEC_BitStringTemplate_Util ; DATA XREF: .rdata:10013898o
off_10013918	dd offset NSS_Get_SEC_ObjectIDTemplate_Util ; DATA XREF: .rdata:10013888o
off_1001391C	dd offset NSS_Get_SECOID_AlgorithmIDTemplate_Util
					; DATA XREF: .rdata:100138D8o
dword_10013920	dd 10h,	2 dup(0)	; DATA XREF: .rdata:10013968o
		dd 10h,	6, 3 dup(0)
		dd 6011h, 0Ch
		dd offset off_10013910
		align 20h
dword_10013960	dd 2011h, 0		; DATA XREF: .rdata:100138F8o
		dd offset dword_10013920
		align 10h
; char aServerCert[]
aServerCert	db 'Server-Cert',0      ; DATA XREF: sub_10009C45+F7o
					; sub_1000D11F+28o
aCert		db 'cert',0             ; DATA XREF: sub_1000C810+34o
					; sub_1000C810+CDo ...
		align 4
aName		db 'name',0             ; DATA XREF: sub_1000DE43+5o
		align 4
aLibrary	db 'library',0          ; DATA XREF: sub_1000DE43+1Bo
aSlotparams	db 'slotParams',0       ; DATA XREF: sub_1000D9E1+9Bo
		align 10h
aInternal	db 'internal',0         ; DATA XREF: sub_1000D9E1+125o
		align 4
aFlags		db 'flags',0            ; DATA XREF: sub_1000D9E1+11Co
		align 4
aFips		db 'FIPS',0             ; DATA XREF: sub_1000D9E1+13Co
		align 4
aIsmoduledb	db 'isModuleDB',0       ; DATA XREF: sub_1000D9E1+153o
		align 4
aIsmoduledbonly	db 'isModuleDBOnly',0   ; DATA XREF: sub_1000D9E1+16Ao
		align 4
aCritical	db 'critical',0         ; DATA XREF: sub_1000D9E1+181o
		align 4
aTrustorder	db 'trustOrder',0       ; DATA XREF: sub_1000D9E1+19Co
		align 10h
aCipherorder	db 'cipherOrder',0      ; DATA XREF: sub_1000D9E1+1CAo
aCiphers	db 'ciphers',0          ; DATA XREF: sub_1000D9E1+1F1o
		align 8
aSlotflagsRsaDs	db 'slotFlags=[RSA,DSA,DH,RC2,RC4,DES,RANDOM,SHA1,MD5,MD2,SSL,TLS,AES'
					; DATA XREF: legacy_ReadSecmodDB+FAo
					; sub_1000D456+498o
		db ',Camellia,SEED,SHA256,SHA512]',0
		align 4
aSlotflags	db 'slotFlags',0        ; DATA XREF: sub_1000D456+49Do
		align 4
; char a_db[]
a_db		db '.db',0              ; DATA XREF: sub_1000DE89+37o
aLibraryNameNss	db 'library= name="NSS Internal PKCS #11 Module" parameters=%s NSS="F'
					; DATA XREF: legacy_ReadSecmodDB+100o
		db 'lags=internal,critical trustOrder=75 cipherOrder=100 slotParams=('
		db '1={%s askpw=any timeout=30})"',0
aSoftokn3_dll	db 'softokn3.dll',0     ; DATA XREF: .data:off_10015004o
		align 4
aFreebl3_dll	db 'freebl3.dll',0      ; DATA XREF: .data:off_10015008o
aFreebl_getvect	db 'FREEBL_GetVector',0 ; DATA XREF: .text:1000E10Fo
		align 4
		dd 3 dup(0)
aSniglet	db '%$sniglet^&',0      ; DATA XREF: sub_1000E3F0+205o
					; sub_1000E7C0+46o
a_hashxxxxxx	db '/_hashXXXXXX',0     ; DATA XREF: sub_10010C50+A5o
					; sub_10010C50:loc_10010CFEo
		align 10h
aHashOutOfOverf	db 'HASH: Out of overflow pages.  Increase page size',0Ah,0
					; DATA XREF: sub_10010DA0+23Do
		align 4
; char aTmp[]
aTmp		db 'TMP',0              ; DATA XREF: sub_10010C50+23o
; char aTmpdir[]
aTmpdir		db 'TMPDIR',0           ; DATA XREF: sub_10010C50+38o
		align 10h
; char aTemp[]
aTemp		db 'TEMP',0             ; DATA XREF: sub_10010C50+48o
		align 4
a_		db '.',0                ; DATA XREF: sub_10010C50+58o
		align 4
dword_10013BBC	dd 0			; DATA XREF: ___DllMainCRTStartup:loc_10012788r
					; ___DllMainCRTStartup+A8r ...
off_10013BC0	dd offset dword_10015088 ; DATA	XREF: ___report_gsfailure+EDo
		dd offset dword_100150D8
__load_config_used dd 48h		; Size
		dd 0			; Time stamp
		dw 2 dup(0)		; Version: 0.0
		dd 0			; GlobalFlagsClear
		dd 0			; GlobalFlagsSet
		dd 0			; CriticalSectionDefaultTimeout
		dd 0			; DeCommitFreeBlockThreshold
		dd 0			; DeCommitTotalFreeThreshold
		dd 0			; LockPrefixTable
		dd 0			; MaximumAllocationSize
		dd 0			; VirtualMemoryThreshold
		dd 0			; ProcessAffinityMask
		dd 0			; ProcessHeapFlags
		dw 0			; CSDVersion
		dw 0			; Reserved1
		dd 0			; EditList
		dd offset ___security_cookie ; SecurityCookie
		dd offset ___safe_se_handler_table ; SEHandlerTable
		dd 1			; SEHandlerCount
; Debug	information (IMAGE_DEBUG_TYPE_CODEVIEW)
asc_10013C10	db 'RSDS'               ; DATA XREF: .rdata:10013294o
					; CV signature
		dd 134143Dh		; Data1	; GUID
		dw 0D383h		; Data2
		dw 4CBEh		; Data3
		db 9Dh,	4, 0B6h, 0EAh, 2Eh, 0B4h, 4Bh, 53h; Data4
		dd 1			; Age
		db 'c:\builds\moz2_slave\rel-m-rel-w32_bld-000000000000\build\obj-fir' ; PdbFileName
		db 'efox\security\nss\lib\softoken\legacydb\nssdbm3.pdb',0
		align 10h
; Debug	information (type 12)
dword_10013CA0	dd 0			; DATA XREF: .rdata:100132B0o
		dd 2 dup(23h), 5 dup(0)
___safe_se_handler_table dd rva	__except_handler4 ; DATA XREF: .rdata:10013C08o
		align 8
dword_10013CC8	dd 2 dup(0)		; DATA XREF: sub_10012CC9+2o
					; sub_10012CC9+7o
dword_10013CD0	dd 2 dup(0)		; DATA XREF: Func+2o Func+7o
stru_10013CD8	dd 0FFFFFFFEh		; GSCookieOffset
					; DATA XREF: ___DllMainCRTStartup+2o
		dd 0			; GSCookieXOROffset ; SEH scope	table for function 1001274A
		dd 0FFFFFFD0h		; EHCookieOffset
		dd 0			; EHCookieXOROffset
		dd 0FFFFFFFEh		; ScopeRecord.EnclosingLevel
		dd 0			; ScopeRecord.FilterFunc
		dd offset $LN18		; ScopeRecord.HandlerFunc
		dd 0			; ScopeRecord.EnclosingLevel
		dd offset $LN22		; ScopeRecord.FilterFunc
		dd offset $LN23		; ScopeRecord.HandlerFunc
stru_10013D00	dd 0FFFFFFFEh		; GSCookieOffset
					; DATA XREF: __IsNonwritableInCurrentImage+5o
		dd 0			; GSCookieXOROffset ; SEH scope	table for function 10012A20
		dd 0FFFFFFD8h		; EHCookieOffset
		dd 0			; EHCookieXOROffset
		dd 0FFFFFFFEh		; ScopeRecord.EnclosingLevel
		dd offset loc_10012AA9	; ScopeRecord.FilterFunc
		dd offset loc_10012ABC	; ScopeRecord.HandlerFunc
		align 10h
stru_10013D20	dd 0FFFFFFFEh		; GSCookieOffset ; DATA	XREF: sub_10012B4D+2o
		dd 0			; GSCookieXOROffset ; SEH scope	table for function 10012B4D
		dd 0FFFFFFCCh		; EHCookieOffset
		dd 0			; EHCookieXOROffset
		dd 0FFFFFFFEh		; ScopeRecord.EnclosingLevel
		dd 0			; ScopeRecord.FilterFunc
		dd offset loc_10012BEA	; ScopeRecord.HandlerFunc
		align 10h
;
; Export directory for nssdbm3.dll
;
		dd 0			; Characteristics
		dd 56E89987h		; TimeDateStamp: Tue Mar 15 23:23:51 2016
		dw 0			; MajorVersion
		dw 0			; MinorVersion
		dd rva aNssdbm3_dll	; Name
		dd 1			; Base
		dd 7			; NumberOfFunctions
		dd 7			; NumberOfNames
		dd rva off_10013D68	; AddressOfFunctions
		dd rva off_10013D84	; AddressOfNames
		dd rva word_10013DA0	; AddressOfNameOrdinals
;
; Export Address Table for nssdbm3.dll
;
off_10013D68	dd rva legacy_AddSecmodDB, rva legacy_DeleteSecmodDB, rva legacy_Open
					; DATA XREF: .rdata:10013D5Co
		dd rva legacy_ReadSecmodDB, rva	legacy_ReleaseSecmodDBData
		dd rva legacy_SetCryptFunctions, rva legacy_Shutdown
;
; Export Names Table for nssdbm3.dll
;
off_10013D84	dd rva aLegacy_addsecm,	rva aLegacy_deletes, rva aLegacy_open
					; DATA XREF: .rdata:10013D60o
		dd rva aLegacy_readsec,	rva aLegacy_release, rva aLegacy_setcryp ; "legacy_AddSecmodDB"
		dd rva aLegacy_shutdow
;
; Export Ordinals Table	for nssdbm3.dll
;
word_10013DA0	dw 0, 1, 2, 3, 4, 5, 6	; DATA XREF: .rdata:10013D64o
aNssdbm3_dll	db 'nssdbm3.dll',0      ; DATA XREF: .rdata:10013D4Co
aLegacy_addsecm	db 'legacy_AddSecmodDB',0 ; DATA XREF: .rdata:off_10013D84o
aLegacy_deletes	db 'legacy_DeleteSecmodDB',0 ; DATA XREF: .rdata:off_10013D84o
aLegacy_open	db 'legacy_Open',0      ; DATA XREF: .rdata:off_10013D84o
aLegacy_readsec	db 'legacy_ReadSecmodDB',0 ; DATA XREF: .rdata:off_10013D84o
aLegacy_release	db 'legacy_ReleaseSecmodDBData',0 ; DATA XREF: .rdata:off_10013D84o
aLegacy_setcryp	db 'legacy_SetCryptFunctions',0 ; DATA XREF: .rdata:off_10013D84o
aLegacy_shutdow	db 'legacy_Shutdown',0  ; DATA XREF: .rdata:off_10013D84o
		align 4
__IMPORT_DESCRIPTOR_nss3 dd rva	off_10013F94 ; Import Name Table
		dd 0			; Time stamp
		dd 0			; Forwarder Chain
		dd rva aNss3_dll	; DLL Name
		dd rva __imp_SECOID_Shutdown ; Import Address Table
__IMPORT_DESCRIPTOR_MSVCR120 dd	rva off_10013ED8 ; Import Name Table
		dd 0			; Time stamp
		dd 0			; Forwarder Chain
		dd rva aMsvcr120_dll	; DLL Name
		dd rva _close		; Import Address Table
__IMPORT_DESCRIPTOR_mozglue dd rva off_10013F7C	; Import Name Table
		dd 0			; Time stamp
		dd 0			; Forwarder Chain
		dd rva aMozglue_dll	; DLL Name
		dd rva strdup		; Import Address Table
__IMPORT_DESCRIPTOR_KERNEL32 dd	rva off_10013EAC ; Import Name Table
		dd 0			; Time stamp
		dd 0			; Forwarder Chain
		dd rva aKernel32_dll	; DLL Name
		dd rva GetSystemTimeAsFileTime ; Import	Address	Table
		dd 5 dup(0)
;
; Import names for KERNEL32.dll
;
off_10013EAC	dd rva word_10014BB8	; DATA XREF: .rdata:__IMPORT_DESCRIPTOR_KERNEL32o
		dd rva word_10014B22
		dd rva word_10014B32
		dd rva word_10014B42
		dd rva word_10014B56
		dd rva word_10014B72
		dd rva word_10014BD2
		dd rva word_10014B0E
		dd rva word_10014BA2
		dd rva word_10014B8C
		dd 0
;
; Import names for MSVCR120.dll
;
off_10013ED8	dd rva word_10014C06	; DATA XREF: .rdata:__IMPORT_DESCRIPTOR_MSVCR120o
		dd rva word_10014C10
		dd rva word_10014C1A
		dd rva word_10014C22
		dd rva word_10014C34
		dd rva word_10014BFC
		dd rva word_10014AF4
		dd rva word_10014AD0
		dd rva word_10014AC6
		dd rva word_10014AB8
		dd rva word_10014AAA
		dd rva word_10014AA0
		dd rva word_10014A98
		dd rva word_10014A80
		dd rva word_10014A66
		dd rva word_10014A50
		dd rva word_10014A36
		dd rva word_10014A2A
		dd rva word_10014A1C
		dd rva word_10014A06
		dd rva word_100149F4
		dd rva word_100149DC
		dd rva word_100149D2
		dd rva word_100149C4
		dd rva word_100149B2
		dd rva word_1001499E
		dd rva word_1001497A
		dd rva word_1001496C
		dd rva word_10014962
		dd rva word_10014958
		dd rva word_1001494E
		dd rva word_10014944
		dd rva word_1001493A
		dd rva word_10014930
		dd rva word_10014926
		dd rva word_1001491C
		dd rva word_10014912
		dd rva word_10014908
		dd rva word_100148FE
		dd rva word_10014C2A
		dd 0
;
; Import names for mozglue.dll
;
off_10013F7C	dd rva word_100149A8	; DATA XREF: .rdata:__IMPORT_DESCRIPTOR_mozglueo
		dd rva word_10014994
		dd rva word_1001498C
		dd rva word_10014982
		dd rva word_10014A14
		dd 0
;
; Import names for nss3.dll
;
off_10013F94	dd rva word_1001458C	; DATA XREF: .rdata:__IMPORT_DESCRIPTOR_nss3o
		dd rva word_1001459E
		dd rva word_100145B0
		dd rva word_100145C6
		dd rva word_100145DC
		dd rva word_100145FC
		dd rva word_10014616
		dd rva word_10014620
		dd rva word_1001463C
		dd rva word_1001465C
		dd rva word_10014682
		dd rva word_100146A6
		dd rva word_100146BC
		dd rva word_100146D6
		dd rva word_100146EE
		dd rva word_10014706
		dd rva word_10014722
		dd rva word_10014732
		dd rva word_10014516
		dd rva word_10014758
		dd rva word_1001476A
		dd rva word_10014786
		dd rva word_1001479C
		dd rva word_100147B2
		dd rva word_100147C2
		dd rva word_100147DE
		dd rva word_100147FA
		dd rva word_10014812
		dd rva word_1001457E
		dd rva word_10014848
		dd rva word_10014866
		dd rva word_1001487C
		dd rva word_10014896
		dd rva word_100148AE
		dd rva word_100148CA
		dd rva word_100148D8
		dd rva word_10014506
		dd rva word_100144F2
		dd rva word_100144E0
		dd rva word_100144C2
		dd rva word_100144AE
		dd rva word_1001449C
		dd rva word_10014490
		dd rva word_10014468
		dd rva word_1001445C
		dd rva word_1001443E
		dd rva word_10014420
		dd rva word_10014404
		dd rva word_100143EA
		dd rva word_10014574
		dd rva word_10014568
		dd rva word_10014552
		dd rva word_100143CC
		dd rva word_1001453E
		dd rva word_100143B2
		dd rva word_10014394
		dd rva word_10014388
		dd rva word_1001437E
		dd rva word_1001436C
		dd rva word_1001435E
		dd rva word_10014830
		dd rva word_10014344
		dd rva word_1001432C
		dd rva word_10014314
		dd rva word_100142FC
		dd rva word_100142E6
		dd rva word_100142CE
		dd rva word_100142B6
		dd rva word_100142A0
		dd rva word_1001428A
		dd rva word_10014274
		dd rva word_10014260
		dd rva word_10014236
		dd rva word_10014222
		dd rva word_10014214
		dd rva word_10014528
		dd rva word_10014202
		dd rva word_100141F4
		dd rva word_100141E8
		dd rva word_100141D4
		dd rva word_100141C8
		dd rva word_100141BC
		dd rva word_100141B0
		dd rva word_100141A4
		dd rva word_1001419A
		dd rva word_1001418E
		dd rva word_10014180
		dd rva word_10014172
		dd rva word_10014164
		dd rva word_10014148
		dd rva word_10014136
		dd rva word_10014122
		dd rva word_10014746
		dd rva word_10014110
		dd 0
word_10014110	dw 1EAh			; DATA XREF: .rdata:10014108o
		db 'PORT_Alloc_Util',0
word_10014122	dw 209h			; DATA XREF: .rdata:10014100o
		db 'PORT_ZAlloc_Util',0
		align 2
word_10014136	dw 1F8h			; DATA XREF: .rdata:100140FCo
		db 'PORT_Free_Util',0
		align 4
word_10014148	dw 0AEh			; DATA XREF: .rdata:100140F8o
		db 'NSSBase64_EncodeItem_Util',0
word_10014164	dw 346h			; DATA XREF: .rdata:100140F4o
		db 'PR_SetError',0
word_10014172	dw 29Eh			; DATA XREF: .rdata:100140F0o
		db 'PR_GetError',0
word_10014180	dw 313h			; DATA XREF: .rdata:100140ECo
		db 'PR_OpenFile',0
word_1001418E	dw 238h			; DATA XREF: .rdata:100140E8o
		db 'PR_Close',0
		align 2
word_1001419A	dw 32Dh			; DATA XREF: .rdata:100140E4o
		db 'PR_Read',0
word_100141A4	dw 37Ch			; DATA XREF: .rdata:100140E0o
		db 'PR_Write',0
		align 10h
word_100141B0	dw 252h			; DATA XREF: .rdata:100140DCo
		db 'PR_Delete',0
word_100141BC	dw 214h			; DATA XREF: .rdata:100140D8o
		db 'PR_Access',0
word_100141C8	dw 2FBh			; DATA XREF: .rdata:100140D4o
		db 'PR_MkDir',0
		align 4
word_100141D4	dw 242h			; DATA XREF: .rdata:100140D0o
		db 'PR_CreateFileMap',0
		align 4
word_100141E8	dw 2F7h			; DATA XREF: .rdata:100140CCo
		db 'PR_MemMap',0
word_100141F4	dw 2F8h			; DATA XREF: .rdata:100140C8o
		db 'PR_MemUnmap',0
word_10014202	dw 23Ah			; DATA XREF: .rdata:100140C4o
		db 'PR_CloseFileMap',0
word_10014214	dw 388h			; DATA XREF: .rdata:100140BCo
		db 'PR_smprintf',0
word_10014222	dw 389h			; DATA XREF: .rdata:100140B8o
		db 'PR_smprintf_free',0
		align 2
word_10014236	dw 101h			; DATA XREF: .rdata:100140B4o
		db 'NSS_Get_SECOID_AlgorithmIDTemplate_Util',0
word_10014260	dw 204h			; DATA XREF: .rdata:100140B0o
		db 'PORT_Strdup_Util',0
		align 4
word_10014274	dw 200h			; DATA XREF: .rdata:100140ACo
		db 'PORT_SetError_Util',0
		align 2
word_1001428A	dw 1FAh			; DATA XREF: .rdata:100140A8o
		db 'PORT_GetError_Util',0
		align 10h
word_100142A0	dw 1FCh			; DATA XREF: .rdata:100140A4o
		db 'PORT_NewArena_Util',0
		align 2
word_100142B6	dw 1ECh			; DATA XREF: .rdata:100140A0o
		db 'PORT_ArenaAlloc_Util',0
		align 2
word_100142CE	dw 1F4h			; DATA XREF: .rdata:1001409Co
		db 'PORT_ArenaZAlloc_Util',0
word_100142E6	dw 1F7h			; DATA XREF: .rdata:10014098o
		db 'PORT_FreeArena_Util',0
word_100142FC	dw 39Ch			; DATA XREF: .rdata:10014094o
		db 'SECITEM_CopyItem_Util',0
word_10014314	dw 39Fh			; DATA XREF: .rdata:10014090o
		db 'SECITEM_DupItem_Util',0
		align 4
word_1001432C	dw 3A1h			; DATA XREF: .rdata:1001408Co
		db 'SECITEM_FreeItem_Util',0
word_10014344	dw 3A7h			; DATA XREF: .rdata:10014088o
		db 'SECITEM_ZfreeItem_Util',0
		align 2
word_1001435E	dw 2FEh			; DATA XREF: .rdata:10014080o
		db 'PR_NewLock',0
		align 4
word_1001436C	dw 258h			; DATA XREF: .rdata:1001407Co
		db 'PR_DestroyLock',0
		align 2
word_1001437E	dw 2F0h			; DATA XREF: .rdata:10014078o
		db 'PR_Lock',0
word_10014388	dw 371h			; DATA XREF: .rdata:10014074o
		db 'PR_Unlock',0
word_10014394	dw 42Eh			; DATA XREF: .rdata:10014070o
		db 'SEC_QuickDERDecodeItem_Util',0
word_100143B2	dw 3F5h			; DATA XREF: .rdata:1001406Co
		db 'SEC_ASN1EncodeItem_Util',0
word_100143CC	dw 3F3h			; DATA XREF: .rdata:10014064o
		db 'SEC_ASN1EncodeInteger_Util',0
		align 2
word_100143EA	dw 3E6h			; DATA XREF: .rdata:10014054o
		db 'SECOID_FindOIDTag_Util',0
		align 4
word_10014404	dw 3E3h			; DATA XREF: .rdata:10014050o
		db 'SECOID_FindOIDByTag_Util',0
		align 10h
word_10014420	dw 3ECh			; DATA XREF: .rdata:1001404Co
		db 'SECOID_SetAlgorithmID_Util',0
		align 2
word_1001443E	dw 3E9h			; DATA XREF: .rdata:10014048o
		db 'SECOID_GetAlgorithmTag_Util',0
word_1001445C	dw 385h			; DATA XREF: .rdata:10014044o
		db 'PR_ntohl',0
		align 4
word_10014468	dw 10Fh			; DATA XREF: .rdata:10014040o
		db 'NSS_Get_SEC_OctetStringTemplate_Util',0
		align 10h
word_10014490	dw 382h			; DATA XREF: .rdata:1001403Co
		db 'PR_htonl',0
		align 4
word_1001449C	dw 98h			; DATA XREF: .rdata:10014038o
		db 'DER_SetUInteger',0
word_100144AE	dw 1FDh			; DATA XREF: .rdata:10014034o
		db 'PORT_Realloc_Util',0
word_100144C2	dw 3A4h			; DATA XREF: .rdata:10014030o
		db 'SECITEM_ItemsAreEqual_Util',0
		align 10h
word_100144E0	dw 2ECh			; DATA XREF: .rdata:1001402Co
		db 'PR_LoadLibrary',0
		align 2
word_100144F2	dw 370h			; DATA XREF: .rdata:10014028o
		db 'PR_UnloadLibrary',0
		align 2
word_10014506	dw 287h			; DATA XREF: .rdata:10014024o
		db 'PR_FindSymbol',0
word_10014516	dw 1C6h			; DATA XREF: .rdata:10013FDCo
		db 'PL_NewHashTable',0
word_10014528	dw 1BBh			; DATA XREF: .rdata:100140C0o
		db 'PL_HashTableDestroy',0
word_1001453E	dw 1B1h			; DATA XREF: .rdata:10014068o
		db 'PL_CompareValues',0
		align 2
word_10014552	dw 3A2h			; DATA XREF: .rdata:10014060o
		db 'SECITEM_HashCompare',0
word_10014568	dw 29Ch			; DATA XREF: .rdata:1001405Co
		db 'PR_GetEnv',0
word_10014574	dw 28Ch			; DATA XREF: .rdata:10014058o
		db 'PR_Free',0
word_1001457E	dw 3EAh			; DATA XREF: .rdata:10014004o
		db 'SECOID_Init',0
word_1001458C	dw 3EDh			; DATA XREF: .rdata:off_10013F94o
		db 'SECOID_Shutdown',0
word_1001459E	dw 1BAh			; DATA XREF: .rdata:10013F98o
		db 'PL_HashTableAdd',0
word_100145B0	dw 1C4h			; DATA XREF: .rdata:10013F9Co
		db 'PL_HashTableRemove',0
		align 2
word_100145C6	dw 1BEh			; DATA XREF: .rdata:10013FA0o
		db 'PL_HashTableLookup',0
		align 4
word_100145DC	dw 1BDh			; DATA XREF: .rdata:10013FA4o
		db 'PL_HashTableEnumerateEntries',0
		align 4
word_100145FC	dw 397h			; DATA XREF: .rdata:10013FA8o
		db 'SECITEM_AllocItem_Util',0
		align 2
word_10014616	dw 30Fh			; DATA XREF: .rdata:10013FACo
		db 'PR_Now',0
		align 10h
word_10014620	dw 8Fh			; DATA XREF: .rdata:10013FB0o
		db 'DER_DecodeTimeChoice_Util',0
word_1001463C	dw 102h			; DATA XREF: .rdata:10013FB4o
		db 'NSS_Get_SEC_AnyTemplate_Util',0
		align 4
word_1001465C	dw 105h			; DATA XREF: .rdata:10013FB8o
		db 'NSS_Get_SEC_BitStringTemplate_Util',0
		align 2
word_10014682	dw 10Dh			; DATA XREF: .rdata:10013FBCo
		db 'NSS_Get_SEC_ObjectIDTemplate_Util',0
word_100146A6	dw 1EEh			; DATA XREF: .rdata:10013FC0o
		db 'PORT_ArenaMark_Util',0
word_100146BC	dw 1EFh			; DATA XREF: .rdata:10013FC4o
		db 'PORT_ArenaRelease_Util',0
		align 2
word_100146D6	dw 1F2h			; DATA XREF: .rdata:10013FC8o
		db 'PORT_ArenaUnmark_Util',0
word_100146EE	dw 1F1h			; DATA XREF: .rdata:10013FCCo
		db 'PORT_ArenaStrdup_Util',0
word_10014706	dw 39Ah			; DATA XREF: .rdata:10013FD0o
		db 'SECITEM_CompareItem_Util',0
		align 2
word_10014722	dw 300h			; DATA XREF: .rdata:10013FD4o
		db 'PR_NewMonitor',0
word_10014732	dw 25Ah			; DATA XREF: .rdata:10013FD8o
		db 'PR_DestroyMonitor',0
word_10014746	dw 26Ch			; DATA XREF: .rdata:10014104o
		db 'PR_EnterMonitor',0
word_10014758	dw 276h			; DATA XREF: .rdata:10013FE0o
		db 'PR_ExitMonitor',0
		align 2
word_1001476A	dw 0B4h			; DATA XREF: .rdata:10013FE4o
		db 'NSSUTIL_ArgGetParamValue',0
		align 2
word_10014786	dw 0B5h			; DATA XREF: .rdata:10013FE8o
		db 'NSSUTIL_ArgHasFlag',0
		align 4
word_1001479C	dw 0BBh			; DATA XREF: .rdata:10013FECo
		db 'NSSUTIL_ArgReadLong',0
word_100147B2	dw 0C3h			; DATA XREF: .rdata:10013FF0o
		db 'NSSUTIL_Quote',0
word_100147C2	dw 0B9h			; DATA XREF: .rdata:10013FF4o
		db 'NSSUTIL_ArgParseSlotFlags',0
word_100147DE	dw 0BAh			; DATA XREF: .rdata:10013FF8o
		db 'NSSUTIL_ArgParseSlotInfo',0
		align 2
word_100147FA	dw 0C2h			; DATA XREF: .rdata:10013FFCo
		db 'NSSUTIL_MkSlotString',0
		align 2
word_10014812	dw 0B8h			; DATA XREF: .rdata:10014000o
		db 'NSSUTIL_ArgParseModuleSpec',0
		align 10h
word_10014830	dw 0C0h			; DATA XREF: .rdata:10014084o
		db 'NSSUTIL_MkModuleSpec',0
		align 4
word_10014848	dw 0B7h			; DATA XREF: .rdata:10014008o
		db 'NSSUTIL_ArgParseCipherFlags',0
word_10014866	dw 0C1h			; DATA XREF: .rdata:1001400Co
		db 'NSSUTIL_MkNSSString',0
word_1001487C	dw 2EDh			; DATA XREF: .rdata:10014010o
		db 'PR_LoadLibraryWithFlags',0
word_10014896	dw 281h			; DATA XREF: .rdata:10014014o
		db 'PR_FindFunctionSymbol',0
word_100148AE	dw 2ACh			; DATA XREF: .rdata:10014018o
		db 'PR_GetLibraryFilePathname',0
word_100148CA	dw 22Dh			; DATA XREF: .rdata:1001401Co
		db 'PR_CallOnce',0
word_100148D8	dw 29Ah			; DATA XREF: .rdata:10014020o
		db 'PR_GetDirectorySeparator',0
		align 4
aNss3_dll	db 'nss3.dll',0         ; DATA XREF: .rdata:10013E54o
		align 2
word_100148FE	dw 6E6h			; DATA XREF: .rdata:10013F70o
		db 'memcpy',0
		align 4
word_10014908	dw 730h			; DATA XREF: .rdata:10013F6Co
		db 'strcmp',0
		align 2
word_10014912	dw 738h			; DATA XREF: .rdata:10013F68o
		db 'strlen',0
		align 4
word_1001491C	dw 6E5h			; DATA XREF: .rdata:10013F64o
		db 'memcmp',0
		align 2
word_10014926	dw 693h			; DATA XREF: .rdata:10013F60o
		db 'getenv',0
		align 10h
word_10014930	dw 73Bh			; DATA XREF: .rdata:10013F5Co
		db 'strncmp',0
word_1001493A	dw 6EAh			; DATA XREF: .rdata:10013F58o
		db 'memset',0
		align 4
word_10014944	dw 75Ch			; DATA XREF: .rdata:10013F54o
		db 'tolower',0
word_1001494E	dw 732h			; DATA XREF: .rdata:10013F50o
		db 'strcpy',0
		align 4
word_10014958	dw 740h			; DATA XREF: .rdata:10013F4Co
		db 'strrchr',0
word_10014962	dw 276h			; DATA XREF: .rdata:10013F48o
		db '_errno',0
		align 4
word_1001496C	dw 4A8h			; DATA XREF: .rdata:10013F44o
		db '_stat64i32',0
		align 2
word_1001497A	dw 5DCh			; DATA XREF: .rdata:10013F40o
		db 'abort',0
word_10014982	dw 66h			; DATA XREF: .rdata:10013F88o
		db 'calloc',0
		align 4
word_1001498C	dw 67h			; DATA XREF: .rdata:10013F84o
		db 'free',0
		align 4
word_10014994	dw 6Fh			; DATA XREF: .rdata:10013F80o
		db 'malloc',0
		align 2
word_1001499E	dw 6E8h			; DATA XREF: .rdata:10013F3Co
		db 'memmove',0
word_100149A8	dw 7Bh			; DATA XREF: .rdata:off_10013F7Co
		db 'strdup',0
		align 2
word_100149B2	dw 2D9h			; DATA XREF: .rdata:10013F38o
		db '_get_osfhandle',0
		align 4
word_100149C4	dw 1B8h			; DATA XREF: .rdata:10013F34o
		db '__iob_func',0
		align 2
word_100149D2	dw 68Eh			; DATA XREF: .rdata:10013F30o
		db 'fwrite',0
		align 4
word_100149DC	dw 6A3h			; DATA XREF: .rdata:10013F2Co
		db 'isdigit',0
aMsvcr120_dll	db 'MSVCR120.dll',0     ; DATA XREF: .rdata:10013E68o
		align 4
word_100149F4	dw 16Fh			; DATA XREF: .rdata:10013F28o
		db '__CppXcptFilter',0
word_10014A06	dw 217h			; DATA XREF: .rdata:10013F24o
		db '_amsg_exit',0
		align 4
word_10014A14	dw 68h			; DATA XREF: .rdata:10013F8Co
		db 'frex',0
		align 4
word_10014A1C	dw 3A5h			; DATA XREF: .rdata:10013F20o
		db '_malloc_crt',0
word_10014A2A	dw 30Ch			; DATA XREF: .rdata:10013F1Co
		db '_initterm',0
word_10014A36	dw 30Dh			; DATA XREF: .rdata:10013F18o
		db '_initterm_e',0
aMozglue_dll	db 'mozglue.dll',0      ; DATA XREF: .rdata:10013E7Co
word_10014A50	dw 250h			; DATA XREF: .rdata:10013F14o
		db '_crt_debugger_hook',0
		align 2
word_10014A66	dw 1ACh			; DATA XREF: .rdata:10013F10o
		db '__crtUnhandledException',0
word_10014A80	dw 1ABh			; DATA XREF: .rdata:10013F0Co
		db '__crtTerminateProcess',0
word_10014A98	dw 394h			; DATA XREF: .rdata:10013F08o
		db '_lock',0
word_10014AA0	dw 504h			; DATA XREF: .rdata:10013F04o
		db '_unlock',0
word_10014AAA	dw 22Eh			; DATA XREF: .rdata:10013F00o
		db '_calloc_crt',0
word_10014AB8	dw 1AEh			; DATA XREF: .rdata:10013EFCo
		db '__dllonexit',0
word_10014AC6	dw 43Ah			; DATA XREF: .rdata:10013EF8o
		db '_onexit',0
word_10014AD0	dw 18Ch			; DATA XREF: .rdata:10013EF4o
		db '__clean_type_info_names_internal',0
		align 4
word_10014AF4	dw 27Ah			; DATA XREF: .rdata:10013EF0o
		db '_except_handler4_common',0
word_10014B0E	dw 192h			; DATA XREF: .rdata:10013EC8o
		db 'FlushFileBuffers',0
		align 2
word_10014B22	dw 121h			; DATA XREF: .rdata:10013EB0o
		db 'EncodePointer',0
word_10014B32	dw 0FEh			; DATA XREF: .rdata:10013EB4o
		db 'DecodePointer',0
word_10014B42	dw 367h			; DATA XREF: .rdata:10013EB8o
		db 'IsDebuggerPresent',0
word_10014B56	dw 36Dh			; DATA XREF: .rdata:10013EBCo
		db 'IsProcessorFeaturePresent',0
word_10014B72	dw 42Dh			; DATA XREF: .rdata:10013EC0o
		db 'QueryPerformanceCounter',0
word_10014B8C	dw 20Ah			; DATA XREF: .rdata:10013ED0o
		db 'GetCurrentProcessId',0
word_10014BA2	dw 20Eh			; DATA XREF: .rdata:10013ECCo
		db 'GetCurrentThreadId',0
		align 4
word_10014BB8	dw 2D6h			; DATA XREF: .rdata:off_10013EACo
		db 'GetSystemTimeAsFileTime',0
word_10014BD2	dw 113h			; DATA XREF: .rdata:10013EC4o
		db 'DisableThreadLibraryCalls',0
aKernel32_dll	db 'KERNEL32.dll',0     ; DATA XREF: .rdata:10013E90o
		align 4
word_10014BFC	dw 502h			; DATA XREF: .rdata:10013EECo
		db '_unlink',0
word_10014C06	dw 23Dh			; DATA XREF: .rdata:off_10013ED8o
		db '_close',0
		align 10h
word_10014C10	dw 39Dh			; DATA XREF: .rdata:10013EDCo
		db '_lseek',0
		align 2
word_10014C1A	dw 43Bh			; DATA XREF: .rdata:10013EE0o
		db '_open',0
word_10014C22	dw 453h			; DATA XREF: .rdata:10013EE4o
		db '_read',0
word_10014C2A	dw 5ADh			; DATA XREF: .rdata:10013F74o
		db '_write',0
		align 4
word_10014C34	dw 2F0h			; DATA XREF: .rdata:10013EE8o
		db '_getpid',0
		align 400h
_rdata		ends

; Section 3. (virtual address 00015000)
; Virtual size			: 000003C8 (	968.)
; Section size in file		: 00000200 (	512.)
; Offset to raw	data for section: 00014000
; Flags	C0300040: Data Readable	Writable
; Alignment	: 4 bytes
; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
		;org 10015000h
dword_10015000	dd 101h			; DATA XREF: sub_100033EA+A4o
					; sub_10003613+59o ...
off_10015004	dd offset aSoftokn3_dll	; DATA XREF: sub_1000E230+Br
					; "softokn3.dll"
off_10015008	dd offset aFreebl3_dll	; DATA XREF: .text:1000E0E1r
					; "freebl3.dll"
off_1001500C	dd offset sub_100120F0	; DATA XREF: sub_1000E3F0:loc_1000E57Cr
					; sub_1000F280+60r
___security_cookie dd 0BB40E64Eh	; DATA XREF: sub_100011D1+3r
					; sub_10001AD7+6r ...
dword_10015014	dd 44BF19B1h		; DATA XREF: ___report_gsfailure+E3r
					; sub_10012C0B+29w ...
		align 10h
dword_10015020	dd 0FFFFFFFFh		; DATA XREF: ___DllMainCRTStartup+1Cw
					; ___DllMainCRTStartup:$LN20w
		align 8
byte_10015028	db 0			; DATA XREF: sub_100033EA+55o
					; sub_10003613:loc_10003673o ...
byte_10015029	db 3 dup(0)		; DATA XREF: sub_10006269+76o
dword_1001502C	dd 0			; DATA XREF: sub_10007A86+3r
					; sub_10007A86+77w
dword_10015030	dd 0			; DATA XREF: sub_10007474:loc_10007483r
					; sub_10007A86+33r ...
dword_10015034	dd 0			; DATA XREF: legacy_SetCryptFunctions+4w
					; sub_10008083r
dword_10015038	dd 0			; DATA XREF: legacy_SetCryptFunctions+Dw
					; sub_10008069r
dword_1001503C	dd 0			; DATA XREF: sub_10009FE9+CDr
					; sub_10009FE9+D4w ...
dword_10015040	dd 0			; DATA XREF: sub_10009BB7+6r
					; sub_10009BB7+18w ...
dword_10015044	dd 0			; DATA XREF: sub_1000A0DD+5Br
					; sub_1000A0DD+66w ...
dword_10015048	dd 0			; DATA XREF: sub_10009FE9+B4r
					; sub_10009FE9+C8w ...
dword_1001504C	dd 0			; DATA XREF: sub_10009BB7+12w
					; sub_1000C1AD+4Bw ...
dword_10015050	dd 0			; DATA XREF: sub_1000A0DD+35r
					; sub_1000A0DD+51w ...
dword_10015054	dd 0			; DATA XREF: sub_10009E3E+13r
					; sub_10009E3E+36r ...
dword_10015058	dd 0			; DATA XREF: sub_10009FE9+24r
					; sub_10009FE9+36r ...
dword_1001505C	dd 0			; DATA XREF: sub_1000C04B+Dr
					; sub_1000C04B:loc_1000C0A3r ...
dword_10015060	dd 0			; DATA XREF: sub_1000C1ADr
					; sub_1000C1AD+A4r ...
dword_10015064	dd 0			; DATA XREF: .text:1000E155w
dword_10015068	dd 0			; DATA XREF: .text:1000E14Cw
					; .text:loc_1000E163r
dword_1001506C	dd 0			; DATA XREF: sub_1000DFE0r
					; sub_1000DFE0:loc_1000E004r ...
dword_10015070	dd 3 dup(0)		; DATA XREF: sub_1000DFE0+Eo
					; sub_1000E020+Eo ...
dword_1001507C	dd 0			; DATA XREF: sub_1000E2A0r
dword_10015080	dd 0			; DATA XREF: sub_10012530+12r
					; sub_10012530+25w ...
		align 8
dword_10015088	dd 0			; DATA XREF: ___report_gsfailure+9Fw
					; .rdata:off_10013BC0o
dword_1001508C	dd 0			; DATA XREF: ___report_gsfailure+A9w
		dd 0
dword_10015094	dd 0			; DATA XREF: ___report_gsfailure+9Aw
dword_10015098	dd 0			; DATA XREF: ___report_gsfailure+B3w
dword_1001509C	dd 0			; DATA XREF: ___report_gsfailure+C3w
		dd 0Eh dup(0)
dword_100150D8	dd 0			; DATA XREF: ___report_gsfailure+8Bw
					; .rdata:10013BC4o
		dd 22h dup(0)
word_10015164	dw 0			; DATA XREF: ___report_gsfailure+5Fw
		align 4
word_10015168	dw 0			; DATA XREF: ___report_gsfailure+58w
		align 4
word_1001516C	dw 0			; DATA XREF: ___report_gsfailure+51w
		align 10h
word_10015170	dw 0			; DATA XREF: ___report_gsfailure+4Aw
		align 4
dword_10015174	dd 0			; DATA XREF: ___report_gsfailure+36w
dword_10015178	dd 0			; DATA XREF: ___report_gsfailure+30w
dword_1001517C	dd 0			; DATA XREF: ___report_gsfailure+2Aw
dword_10015180	dd 0			; DATA XREF: ___report_gsfailure+24w
dword_10015184	dd 0			; DATA XREF: ___report_gsfailure+1Ew
dword_10015188	dd 0			; DATA XREF: ___report_gsfailure:loc_100128D3w
dword_1001518C	dd 0			; DATA XREF: ___report_gsfailure+70w
dword_10015190	dd 0			; DATA XREF: ___report_gsfailure+78w
					; ___report_gsfailure+95r
word_10015194	dw 0			; DATA XREF: ___report_gsfailure+43w
		align 4
dword_10015198	dd 0			; DATA XREF: ___report_gsfailure+67w
dword_1001519C	dd 0			; DATA XREF: ___report_gsfailure+80w
word_100151A0	dw 0			; DATA XREF: ___report_gsfailure+3Cw
		align 4
		dd 17h dup(0)
		dd 69h dup(?)
dword_100153A4	dd ?			; DATA XREF: ___raise_securityfailure+Bw
					; ___raise_securityfailure+1Dr
dword_100153A8	dd 2 dup(?)		; DATA XREF: sub_10012D16o
dword_100153B0	dd ?			; DATA XREF: legacy_Shutdown+4w
					; legacy_Shutdown+18w ...
dword_100153B4	dd ?			; DATA XREF: sub_10012530+20o
					; sub_10012530+112o ...
dword_100153B8	dd ?			; DATA XREF: sub_10012530:loc_10012583r
					; sub_10012530:loc_1001264Cw ...
; PVOID	dword_100153BC
dword_100153BC	dd ?			; DATA XREF: _pre_c_init+1Bw
					; sub_10012530+82r ...
; PVOID	Ptr
Ptr		dd ?			; DATA XREF: _pre_c_init+16w
					; sub_10012530:loc_10012599r ...
dword_100153C4	dd ?			; DATA XREF: sub_10012530:loc_100126F0r
					; sub_10012530+1C9o ...
		align 1000h
_data		ends


		end DllEntryPoint
