;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	BF707A015736CC040F3471F7007D849F
; Input	CRC32 :	10D213B6

; File Name   :	C:\compspace\compare\thunderbird\dlls\full\MapiProxy_InUse_full.dll
; Format      :	Portable executable for	80386 (PE)
; Imagebase   :	10000000
; Section 1. (virtual address 00001000)
; Virtual size			: 00000A1A (   2586.)
; Section size in file		: 00000C00 (   3072.)
; Offset to raw	data for section: 00000400
; Flags	60300020: Text Executable Readable
; Alignment	: 4 bytes
; PDB File Name	: c:\builds\moz2_slave\tb-rel-c-esr38-w32_bld-0000000\build\objdir-tb\mailnews\mapi\mapihook\build\MapiProxy.pdb
; OS type	  :  MS	Windows
; Application type:  DLL 32bit

		include	uni.inc	; see unicode subdir of	ida for	info on	unicode

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	dword public 'CODE' use32
		assume cs:_text
		;org 10001000h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	sub_10001000(IRpcStubBuffer *This)
sub_10001000	proc near		; DATA XREF: .rdata:10003630o

This		= dword	ptr  4

		push	offset pPSF	; pPSF
		push	[esp+4+This]	; This
		call	NdrCStdStubBuffer_Release
		retn	4
sub_10001000	endp

; Exported entry   2. DllCanUnloadNow

; =============== S U B	R O U T	I N E =======================================


; HRESULT __stdcall DllCanUnloadNow()
		public DllCanUnloadNow
DllCanUnloadNow	proc near		; DATA XREF: .rdata:off_10003838o
		push	offset pPSF	; pPSFactoryBuffer
		call	ds:NdrDllCanUnloadNow
		retn
DllCanUnloadNow	endp

; Exported entry   1. DllGetClassObject

; =============== S U B	R O U T	I N E =======================================


; HRESULT __stdcall DllGetClassObject(const IID	*const rclsid, const IID *const	riid, LPVOID *ppv)
		public DllGetClassObject
DllGetClassObject proc near		; DATA XREF: .rdata:off_10003838o

rclsid		= dword	ptr  4
riid		= dword	ptr  8
ppv		= dword	ptr  0Ch

		mov	eax, pProxyFileList
		mov	eax, [eax+4]
		mov	eax, [eax]
		test	eax, eax
		jz	short loc_1000102F
		mov	eax, [eax]
		jmp	short loc_10001031
; ---------------------------------------------------------------------------

loc_1000102F:				; CODE XREF: DllGetClassObject+Cj
		xor	eax, eax

loc_10001031:				; CODE XREF: DllGetClassObject+10j
		push	offset pPSF	; pPSFactoryBuffer
		push	eax		; pclsid
		push	offset pProxyFileList ;	pProxyFileList
		push	[esp+0Ch+ppv]	; ppv
		push	[esp+10h+riid]	; riid
		push	[esp+14h+rclsid] ; rclsid
		call	ds:NdrDllGetClassObject
		retn	0Ch
DllGetClassObject endp


; =============== S U B	R O U T	I N E =======================================


; BOOL __stdcall DllMain(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpvReserved)
_DllMain@12	proc near		; CODE XREF: ___DllMainCRTStartup+7Dp
					; ___DllMainCRTStartup+97p

hinstDLL	= dword	ptr  4
fdwReason	= dword	ptr  8
lpvReserved	= dword	ptr  0Ch

		cmp	[esp+fdwReason], 1
		jnz	short loc_10001069
		mov	ecx, [esp+hinstDLL]
		push	ecx		; hLibModule
		mov	hDll, ecx
		call	ds:DisableThreadLibraryCalls

loc_10001069:				; CODE XREF: DllMain(x,x,x)+5j
		xor	eax, eax
		inc	eax
		retn	0Ch
_DllMain@12	endp

; Exported entry   4. DllRegisterServer

; =============== S U B	R O U T	I N E =======================================


; HRESULT __stdcall DllRegisterServer()
		public DllRegisterServer
DllRegisterServer proc near		; DATA XREF: .rdata:off_10003838o
		mov	eax, pProxyFileList
		mov	eax, [eax+4]
		mov	eax, [eax]
		test	eax, eax
		jz	short loc_10001081
		mov	eax, [eax]
		jmp	short loc_10001083
; ---------------------------------------------------------------------------

loc_10001081:				; CODE XREF: DllRegisterServer+Cj
		xor	eax, eax

loc_10001083:				; CODE XREF: DllRegisterServer+10j
		push	eax		; pclsid
		push	offset pProxyFileList ;	pProxyFileList
		push	hDll		; hDll
		call	ds:NdrDllRegisterProxy
		retn
DllRegisterServer endp

; Exported entry   5. DllUnregisterServer

; =============== S U B	R O U T	I N E =======================================


; HRESULT __stdcall DllUnregisterServer()
		public DllUnregisterServer
DllUnregisterServer proc near		; DATA XREF: .rdata:off_10003838o
		mov	eax, pProxyFileList
		mov	eax, [eax+4]
		mov	eax, [eax]
		test	eax, eax
		jz	short loc_100010A8
		mov	eax, [eax]
		jmp	short loc_100010AA
; ---------------------------------------------------------------------------

loc_100010A8:				; CODE XREF: DllUnregisterServer+Cj
		xor	eax, eax

loc_100010AA:				; CODE XREF: DllUnregisterServer+10j
		push	eax		; pclsid
		push	offset pProxyFileList ;	pProxyFileList
		push	hDll		; hDll
		call	ds:NdrDllUnregisterProxy
		retn
DllUnregisterServer endp

; Exported entry   3. GetProxyDllInfo

; =============== S U B	R O U T	I N E =======================================


		public GetProxyDllInfo
GetProxyDllInfo	proc near		; DATA XREF: .rdata:off_10003838o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		mov	dword ptr [eax], offset	pProxyFileList
		mov	eax, pProxyFileList
		mov	eax, [eax+4]
		mov	ecx, [eax]
		test	ecx, ecx
		jz	short loc_100010D9
		mov	ecx, [ecx]
		jmp	short loc_100010DB
; ---------------------------------------------------------------------------

loc_100010D9:				; CODE XREF: GetProxyDllInfo+16j
		xor	ecx, ecx

loc_100010DB:				; CODE XREF: GetProxyDllInfo+1Aj
		mov	eax, [esp+arg_4]
		mov	[eax], ecx
		retn	8
GetProxyDllInfo	endp

; [00000006 BYTES: COLLAPSED FUNCTION NdrCStdStubBuffer_Release]
; [00000006 BYTES: COLLAPSED FUNCTION CStdStubBuffer_QueryInterface]
; [00000006 BYTES: COLLAPSED FUNCTION CStdStubBuffer_AddRef]
; [00000006 BYTES: COLLAPSED FUNCTION CStdStubBuffer_Connect]
; [00000006 BYTES: COLLAPSED FUNCTION CStdStubBuffer_Disconnect]
; [00000006 BYTES: COLLAPSED FUNCTION CStdStubBuffer_Invoke]
; [00000006 BYTES: COLLAPSED FUNCTION CStdStubBuffer_IsIIDSupported]
; [00000006 BYTES: COLLAPSED FUNCTION CStdStubBuffer_CountRefs]
; [00000006 BYTES: COLLAPSED FUNCTION CStdStubBuffer_DebugServerQueryInterface]
; [00000006 BYTES: COLLAPSED FUNCTION CStdStubBuffer_DebugServerRelease]
; [00000006 BYTES: COLLAPSED FUNCTION NdrOleAllocate]
; [00000006 BYTES: COLLAPSED FUNCTION NdrOleFree]
; [00000006 BYTES: COLLAPSED FUNCTION IUnknown_QueryInterface_Proxy]
; [00000006 BYTES: COLLAPSED FUNCTION IUnknown_AddRef_Proxy]
; [00000006 BYTES: COLLAPSED FUNCTION IUnknown_Release_Proxy]
; [00000006 BYTES: COLLAPSED FUNCTION memcmp]
; [0000004C BYTES: COLLAPSED FUNCTION _pre_c_init]

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10001190	proc near		; CODE XREF: ___DllMainCRTStartup+64p
					; ___DllMainCRTStartup+A3p ...

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ecx
		cmp	[ebp+arg_4], 0
		push	ebx
		push	esi
		push	edi
		jnz	loc_100012CB
		mov	eax, dword_10004074
		test	eax, eax
		jle	loc_100012C4
		dec	eax
		mov	ebx, offset dword_100043A0
		mov	dword_10004074,	eax
		xor	edi, edi
		mov	eax, large fs:18h
		mov	[ebp+var_4], edi
		mov	edx, [eax+4]
		jmp	short loc_100011CE
; ---------------------------------------------------------------------------

loc_100011CA:				; CODE XREF: sub_10001190+48j
		cmp	eax, edx
		jz	short loc_100011DC

loc_100011CE:				; CODE XREF: sub_10001190+38j
		xor	eax, eax
		mov	ecx, edx
		lock cmpxchg [ebx], ecx
		test	eax, eax
		jnz	short loc_100011CA
		jmp	short loc_100011E3
; ---------------------------------------------------------------------------

loc_100011DC:				; CODE XREF: sub_10001190+3Cj
		mov	[ebp+var_4], 1

loc_100011E3:				; CODE XREF: sub_10001190+4Aj
		cmp	dword_100043A4,	2
		jz	short loc_100011F9
		push	1Fh
		call	_amsg_exit
		pop	ecx
		jmp	loc_1000137B
; ---------------------------------------------------------------------------

loc_100011F9:				; CODE XREF: sub_10001190+5Aj
		push	Ptr		; Ptr
		call	ds:DecodePointer
		mov	esi, eax
		mov	[ebp+arg_8], esi
		test	esi, esi
		jz	loc_100012AC
		push	dword_100043A8	; Ptr
		call	ds:DecodePointer
		mov	ebx, eax
		mov	[ebp+arg_4], esi
		mov	[ebp+arg_0], ebx

loc_10001226:				; CODE XREF: sub_10001190+9Fj
					; sub_10001190+AAj ...
		sub	ebx, 4
		cmp	ebx, esi
		jb	short loc_10001289
		cmp	[ebx], edi
		jz	short loc_10001226
		push	edi		; Ptr
		call	ds:EncodePointer
		cmp	[ebx], eax
		jz	short loc_10001226
		push	dword ptr [ebx]	; Ptr
		call	ds:DecodePointer
		push	edi		; Ptr
		mov	esi, eax
		call	ds:EncodePointer
		mov	[ebx], eax
		call	esi
		push	Ptr		; Ptr
		mov	esi, ds:DecodePointer
		call	esi ; DecodePointer
		push	dword_100043A8	; Ptr
		mov	[ebp+var_8], eax
		call	esi ; DecodePointer
		mov	ecx, [ebp+var_8]
		cmp	[ebp+arg_4], ecx
		jnz	short loc_1000127A
		mov	esi, [ebp+arg_8]
		cmp	[ebp+arg_0], eax
		jz	short loc_10001226

loc_1000127A:				; CODE XREF: sub_10001190+E0j
		mov	esi, ecx
		mov	[ebp+arg_4], ecx
		mov	[ebp+arg_8], esi
		mov	ebx, eax
		mov	[ebp+arg_0], eax
		jmp	short loc_10001226
; ---------------------------------------------------------------------------

loc_10001289:				; CODE XREF: sub_10001190+9Bj
		cmp	esi, 0FFFFFFFFh
		jz	short loc_10001296
		push	esi		; Memory
		call	ds:free
		pop	ecx

loc_10001296:				; CODE XREF: sub_10001190+FCj
		push	edi		; Ptr
		call	ds:EncodePointer
		mov	dword_100043A8,	eax
		mov	ebx, offset dword_100043A0
		mov	Ptr, eax

loc_100012AC:				; CODE XREF: sub_10001190+7Cj
		mov	dword_100043A4,	edi
		cmp	[ebp+var_4], edi
		jnz	loc_1000137B
		xor	eax, eax
		xchg	eax, [ebx]
		jmp	loc_1000137B
; ---------------------------------------------------------------------------

loc_100012C4:				; CODE XREF: sub_10001190+19j
					; sub_10001190+19Fj
		xor	eax, eax
		jmp	loc_1000137E
; ---------------------------------------------------------------------------

loc_100012CB:				; CODE XREF: sub_10001190+Cj
		cmp	[ebp+arg_4], 1
		jnz	loc_1000137B
		mov	eax, large fs:18h
		xor	edi, edi
		mov	esi, edi
		mov	ebx, offset dword_100043A0
		mov	edx, [eax+4]
		jmp	short loc_100012ED
; ---------------------------------------------------------------------------

loc_100012E9:				; CODE XREF: sub_10001190+167j
		cmp	eax, edx
		jz	short loc_100012FB

loc_100012ED:				; CODE XREF: sub_10001190+157j
		xor	eax, eax
		mov	ecx, edx
		lock cmpxchg [ebx], ecx
		test	eax, eax
		jnz	short loc_100012E9
		jmp	short loc_100012FE
; ---------------------------------------------------------------------------

loc_100012FB:				; CODE XREF: sub_10001190+15Bj
		xor	esi, esi
		inc	esi

loc_100012FE:				; CODE XREF: sub_10001190+169j
		cmp	dword_100043A4,	edi
		push	2
		pop	edi
		jz	short loc_10001312
		push	1Fh
		call	_amsg_exit
		jmp	short loc_10001347
; ---------------------------------------------------------------------------

loc_10001312:				; CODE XREF: sub_10001190+177j
		push	offset dword_100030D4
		push	offset dword_100030C8
		mov	dword_100043A4,	1
		call	_initterm_e
		pop	ecx
		pop	ecx
		test	eax, eax
		jnz	short loc_100012C4
		push	offset dword_100030C4
		push	offset dword_100030C0
		call	_initterm
		pop	ecx
		mov	dword_100043A4,	edi

loc_10001347:				; CODE XREF: sub_10001190+180j
		pop	ecx
		test	esi, esi
		jnz	short loc_10001350
		xor	eax, eax
		xchg	eax, [ebx]

loc_10001350:				; CODE XREF: sub_10001190+1BAj
		cmp	dword_100043B0,	0
		jz	short loc_10001375
		push	offset dword_100043B0
		call	__IsNonwritableInCurrentImage
		pop	ecx
		test	eax, eax
		jz	short loc_10001375
		push	[ebp+arg_8]
		push	edi
		push	[ebp+arg_0]
		call	dword_100043B0

loc_10001375:				; CODE XREF: sub_10001190+1C7j
					; sub_10001190+1D6j
		inc	dword_10004074

loc_1000137B:				; CODE XREF: sub_10001190+64j
					; sub_10001190+125j ...
		xor	eax, eax
		inc	eax

loc_1000137E:				; CODE XREF: sub_10001190+136j
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn	0Ch
sub_10001190	endp

; [00000023 BYTES: COLLAPSED FUNCTION DllEntryPoint]
; [00000133 BYTES: COLLAPSED FUNCTION ___DllMainCRTStartup]
		align 2
; [00000006 BYTES: COLLAPSED FUNCTION __CppXcptFilter]
; [00000006 BYTES: COLLAPSED FUNCTION _amsg_exit]
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_100014F0	proc near		; CODE XREF: __IsNonwritableInCurrentImage+59p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_0]
		xor	edx, edx
		push	ebx
		push	esi
		push	edi
		mov	ecx, [eax+3Ch]
		add	ecx, eax
		movzx	eax, word ptr [ecx+14h]
		movzx	ebx, word ptr [ecx+6]
		add	eax, 18h
		add	eax, ecx
		test	ebx, ebx
		jz	short loc_1000152C
		mov	edi, [ebp+arg_4]

loc_10001514:				; CODE XREF: sub_100014F0+3Aj
		mov	esi, [eax+0Ch]
		cmp	edi, esi
		jb	short loc_10001524
		mov	ecx, [eax+8]
		add	ecx, esi
		cmp	edi, ecx
		jb	short loc_1000152E

loc_10001524:				; CODE XREF: sub_100014F0+29j
		inc	edx
		add	eax, 28h
		cmp	edx, ebx
		jb	short loc_10001514

loc_1000152C:				; CODE XREF: sub_100014F0+1Fj
		xor	eax, eax

loc_1000152E:				; CODE XREF: sub_100014F0+32j
		pop	edi
		pop	esi
		pop	ebx
		pop	ebp
		retn
sub_100014F0	endp

; ---------------------------------------------------------------------------
		align 10h
; [000000BA BYTES: COLLAPSED FUNCTION __IsNonwritableInCurrentImage]
		align 10h
; [00000031 BYTES: COLLAPSED FUNCTION __ValidateImageBase]
; [0000003C BYTES: COLLAPSED FUNCTION ___atonexitinit]

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_1000166D(_onexit_t Func)
sub_1000166D	proc near		; CODE XREF: sub_10001716+6p

var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
Ptr		= dword	ptr -1Ch
ms_exc		= CPPEH_RECORD ptr -18h
Func		= dword	ptr  8

		push	14h
		push	offset stru_100037F0
		call	__SEH_prolog4
		and	[ebp+var_24], 0
		push	Ptr		; Ptr
		mov	esi, ds:DecodePointer
		call	esi ; DecodePointer
		mov	[ebp+Ptr], eax
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_1000169F
		push	[ebp+Func]	; Func
		call	ds:_onexit
		pop	ecx
		jmp	short loc_10001704
; ---------------------------------------------------------------------------

loc_1000169F:				; CODE XREF: sub_1000166D+24j
		push	8
		call	_lock
		pop	ecx
		and	[ebp+ms_exc.registration.TryLevel], 0
		push	Ptr		; Ptr
		call	esi ; DecodePointer
		mov	[ebp+Ptr], eax
		push	dword_100043A8	; Ptr
		call	esi ; DecodePointer
		mov	[ebp+var_20], eax
		lea	eax, [ebp+var_20]
		push	eax
		lea	eax, [ebp+Ptr]
		push	eax
		push	[ebp+Func]	; Ptr
		mov	esi, ds:EncodePointer
		call	esi ; EncodePointer
		push	eax
		call	__dllonexit
		add	esp, 0Ch
		mov	edi, eax
		mov	[ebp+var_24], edi
		push	[ebp+Ptr]	; Ptr
		call	esi ; EncodePointer
		mov	Ptr, eax
		push	[ebp+var_20]	; Ptr
		call	esi ; EncodePointer
		mov	dword_100043A8,	eax
		mov	[ebp+ms_exc.registration.TryLevel], 0FFFFFFFEh
		call	loc_1000170D
; ---------------------------------------------------------------------------

loc_10001702:				; CODE XREF: sub_1000166D+A8j
		mov	eax, edi

loc_10001704:				; CODE XREF: sub_1000166D+30j
		call	__SEH_epilog4
		retn
; ---------------------------------------------------------------------------

loc_1000170A:				; DATA XREF: .rdata:stru_100037F0o
		mov	edi, [ebp+var_24] ; Finally handler 0 for function 1000166D

loc_1000170D:				; CODE XREF: sub_1000166D+90j
		push	8
		call	_unlock
		pop	ecx
		retn
sub_1000166D	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_10001716(_onexit_t Func)
sub_10001716	proc near		; CODE XREF: _pre_c_init+36p
					; _pre_c_init+42p

Func		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	[ebp+Func]	; Func
		call	sub_1000166D
		neg	eax
		pop	ecx
		sbb	eax, eax
		neg	eax
		dec	eax
		pop	ebp
		retn
sub_10001716	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_1000172B	proc near		; CODE XREF: DllEntryPoint+9p

PerformanceCount= LARGE_INTEGER	ptr -14h
SystemTimeAsFileTime= _FILETIME	ptr -0Ch
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		sub	esp, 14h
		and	[ebp+SystemTimeAsFileTime.dwLowDateTime], 0
		and	[ebp+SystemTimeAsFileTime.dwHighDateTime], 0
		mov	eax, ___security_cookie
		push	esi
		push	edi
		mov	edi, 0BB40E64Eh
		mov	esi, 0FFFF0000h
		cmp	eax, edi
		jz	short loc_1000175B
		test	esi, eax
		jz	short loc_1000175B
		not	eax
		mov	dword_10004058,	eax
		jmp	short loc_100017C1
; ---------------------------------------------------------------------------

loc_1000175B:				; CODE XREF: sub_1000172B+21j
					; sub_1000172B+25j
		lea	eax, [ebp+SystemTimeAsFileTime]
		push	eax		; lpSystemTimeAsFileTime
		call	ds:GetSystemTimeAsFileTime
		mov	eax, [ebp+SystemTimeAsFileTime.dwHighDateTime]
		xor	eax, [ebp+SystemTimeAsFileTime.dwLowDateTime]
		mov	[ebp+var_4], eax
		call	ds:GetCurrentThreadId
		xor	[ebp+var_4], eax
		call	ds:GetCurrentProcessId
		xor	[ebp+var_4], eax
		lea	eax, [ebp+PerformanceCount]
		push	eax		; lpPerformanceCount
		call	ds:QueryPerformanceCounter
		mov	ecx, dword ptr [ebp+PerformanceCount+4]
		lea	eax, [ebp+var_4]
		xor	ecx, dword ptr [ebp+PerformanceCount]
		xor	ecx, [ebp+var_4]
		xor	ecx, eax
		cmp	ecx, edi
		jnz	short loc_100017A3
		mov	ecx, 0BB40E64Fh
		jmp	short loc_100017B3
; ---------------------------------------------------------------------------

loc_100017A3:				; CODE XREF: sub_1000172B+6Fj
		test	esi, ecx
		jnz	short loc_100017B3
		mov	eax, ecx
		or	eax, 4711h
		shl	eax, 10h
		or	ecx, eax

loc_100017B3:				; CODE XREF: sub_1000172B+76j
					; sub_1000172B+7Aj
		mov	___security_cookie, ecx
		not	ecx
		mov	dword_10004058,	ecx

loc_100017C1:				; CODE XREF: sub_1000172B+2Ej
		pop	edi
		pop	esi
		mov	esp, ebp
		pop	ebp
		retn
sub_1000172B	endp


; =============== S U B	R O U T	I N E =======================================


sub_100017C7	proc near		; CODE XREF: _pre_c_init+2Cp
		push	esi
		push	edi
		mov	esi, offset dword_10003798
		mov	edi, offset dword_10003798
		jmp	short loc_100017E0
; ---------------------------------------------------------------------------

loc_100017D5:				; CODE XREF: sub_100017C7+1Bj
		mov	eax, [esi]
		test	eax, eax
		jz	short loc_100017DD
		call	eax

loc_100017DD:				; CODE XREF: sub_100017C7+12j
		add	esi, 4

loc_100017E0:				; CODE XREF: sub_100017C7+Cj
		cmp	esi, edi
		jb	short loc_100017D5
		pop	edi
		pop	esi
		retn
sub_100017C7	endp


; =============== S U B	R O U T	I N E =======================================


; int __cdecl Func()
Func		proc near		; DATA XREF: _pre_c_init+31o
		push	esi
		push	edi
		mov	esi, offset dword_100037A0
		mov	edi, offset dword_100037A0
		jmp	short loc_10001800
; ---------------------------------------------------------------------------

loc_100017F5:				; CODE XREF: Func+1Bj
		mov	eax, [esi]
		test	eax, eax
		jz	short loc_100017FD
		call	eax

loc_100017FD:				; CODE XREF: Func+12j
		add	esi, 4

loc_10001800:				; CODE XREF: Func+Cj
		cmp	esi, edi
		jb	short loc_100017F5
		pop	edi
		pop	esi
		retn
Func		endp

; ---------------------------------------------------------------------------
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _initterm]
; [00000006 BYTES: COLLAPSED FUNCTION _initterm_e]

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10001814()
sub_10001814	proc near		; DATA XREF: _pre_c_init+3Bo
		push	offset dword_10004078
		call	__clean_type_info_names_internal
		pop	ecx
		retn
sub_10001814	endp

; [00000045 BYTES: COLLAPSED FUNCTION __SEH_prolog4]
; [00000014 BYTES: COLLAPSED FUNCTION __SEH_epilog4]
; [00000023 BYTES: COLLAPSED FUNCTION __except_handler4]
; [00000006 BYTES: COLLAPSED FUNCTION _lock]
; [00000006 BYTES: COLLAPSED FUNCTION _unlock]
; [00000006 BYTES: COLLAPSED FUNCTION __dllonexit]
; [00000006 BYTES: COLLAPSED FUNCTION __clean_type_info_names_internal]
; ---------------------------------------------------------------------------

loc_100018B4:				; DATA XREF: __except_handler4+Fo
		cmp	ecx, ___security_cookie
		jnz	short loc_100018BE
		rep retn
; ---------------------------------------------------------------------------

loc_100018BE:				; CODE XREF: .text:100018BAj
		jmp	___report_gsfailure
; ---------------------------------------------------------------------------
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _except_handler4_common]
; [0000003D BYTES: COLLAPSED FUNCTION ___raise_securityfailure]
; [000000FB BYTES: COLLAPSED FUNCTION ___report_gsfailure]
; [00000006 BYTES: COLLAPSED FUNCTION _crt_debugger_hook]
; [00000006 BYTES: COLLAPSED FUNCTION __crtUnhandledException]
; [00000006 BYTES: COLLAPSED FUNCTION __crtTerminateProcess]
; [00000006 BYTES: COLLAPSED FUNCTION IsProcessorFeaturePresent]
		align 200h
		dd 100h	dup(?)
_text		ends

; Section 2. (virtual address 00002000)
; Virtual size			: 0000003C (	 60.)
; Section size in file		: 00000200 (	512.)
; Offset to raw	data for section: 00001000
; Flags	60300020: Text Executable Readable
; Alignment	: 4 bytes
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_orpc		segment	dword public 'CODE' use32
		assume cs:_orpc
		;org 10002000h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	sub_10002000(void *Buf1, int)
sub_10002000	proc near		; DATA XREF: .rdata:10003678o

var_4		= dword	ptr -4
Buf1		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ecx
		push	10h		; Size
		push	4
		pop	eax
		imul	eax, 0
		mov	eax, ds:off_10003650[eax]
		push	dword ptr [eax+4] ; Buf2
		push	[ebp+Buf1]	; Buf1
		call	memcmp
		add	esp, 0Ch
		mov	[ebp+var_4], eax
		cmp	[ebp+var_4], 0
		jnz	short loc_10002034
		mov	eax, [ebp+arg_4]
		and	dword ptr [eax], 0
		xor	eax, eax
		inc	eax
		jmp	short loc_10002036
; ---------------------------------------------------------------------------

loc_10002034:				; CODE XREF: sub_10002000+27j
		xor	eax, eax

loc_10002036:				; CODE XREF: sub_10002000+32j
		mov	esp, ebp
		pop	ebp
		retn	8
sub_10002000	endp

; ---------------------------------------------------------------------------
		align 200h
		dd 380h	dup(?)
_orpc		ends

; Section 3. (virtual address 00003000)
; Virtual size			: 00000DE8 (   3560.)
; Section size in file		: 00000E00 (   3584.)
; Offset to raw	data for section: 00001200
; Flags	40300040: Data Readable
; Alignment	: 4 bytes
;
; Imports from KERNEL32.dll
;
; ===========================================================================

; Segment type:	Externs
; _idata
; BOOL __stdcall DisableThreadLibraryCalls(HMODULE hLibModule)
		extrn DisableThreadLibraryCalls:dword ;	CODE XREF: DllMain(x,x,x)+12p
					; DATA XREF: DllMain(x,x,x)+12r ...
; BOOL __stdcall IsDebuggerPresent()
		extrn IsDebuggerPresent:dword ;	CODE XREF: ___raise_securityfailure+3p
					; DATA XREF: ___raise_securityfailure+3r
; void __stdcall GetSystemTimeAsFileTime(LPFILETIME lpSystemTimeAsFileTime)
		extrn GetSystemTimeAsFileTime:dword ; CODE XREF: sub_1000172B+34p
					; DATA XREF: sub_1000172B+34r
; DWORD	__stdcall GetCurrentThreadId()
		extrn GetCurrentThreadId:dword ; CODE XREF: sub_1000172B+43p
					; DATA XREF: sub_1000172B+43r
; DWORD	__stdcall GetCurrentProcessId()
		extrn GetCurrentProcessId:dword	; CODE XREF: sub_1000172B+4Cp
					; DATA XREF: sub_1000172B+4Cr
; BOOL __stdcall QueryPerformanceCounter(LARGE_INTEGER *lpPerformanceCount)
		extrn QueryPerformanceCounter:dword ; CODE XREF: sub_1000172B+59p
					; DATA XREF: sub_1000172B+59r
; PVOID	__stdcall DecodePointer(PVOID Ptr)
		extrn DecodePointer:dword ; CODE XREF: sub_10001190+6Fp
					; sub_10001190+88p ...
; PVOID	__stdcall EncodePointer(PVOID Ptr)
		extrn EncodePointer:dword ; CODE XREF: _pre_c_init+10p
					; sub_10001190+A2p ...
; BOOL __stdcall IsProcessorFeaturePresent(DWORD ProcessorFeature)
		extrn __imp_IsProcessorFeaturePresent:dword
					; DATA XREF: IsProcessorFeaturePresentr

;
; Imports from MSVCR120.dll
;
		extrn __imp___crtTerminateProcess:dword	; DATA XREF: __crtTerminateProcessr
					; .rdata:10003908o
		extrn __imp___crtUnhandledException:dword
					; DATA XREF: __crtUnhandledExceptionr
		extrn __imp__crt_debugger_hook:dword ; DATA XREF: _crt_debugger_hookr
		extrn __imp__except_handler4_common:dword
					; DATA XREF: _except_handler4_commonr
		extrn __imp___clean_type_info_names_internal:dword
					; DATA XREF: __clean_type_info_names_internalr
; _onexit_t __cdecl onexit(_onexit_t Func)
		extrn _onexit:dword	; CODE XREF: sub_1000166D+29p
					; DATA XREF: sub_1000166D+29r
		extrn __imp___dllonexit:dword ;	DATA XREF: __dllonexitr
		extrn _calloc_crt:dword	; CODE XREF: ___atonexitinit+11p
					; DATA XREF: ___atonexitinit+11r
		extrn __imp__unlock:dword ; DATA XREF: _unlockr
		extrn __imp__lock:dword	; DATA XREF: _lockr
		extrn __imp__amsg_exit:dword ; DATA XREF: _amsg_exitr
; int __cdecl memcmp(const void	*Buf1, const void *Buf2, size_t	Size)
		extrn __imp_memcmp:dword ; DATA	XREF: memcmpr
		extrn __imp___CppXcptFilter:dword ; DATA XREF: __CppXcptFilterr
		extrn __imp__initterm_e:dword ;	DATA XREF: _initterm_er
; void __cdecl free(void *Memory)
		extrn free:dword	; CODE XREF: sub_10001190+FFp
					; DATA XREF: sub_10001190+FFr
		extrn _malloc_crt:dword	; CODE XREF: _pre_c_init+6p
					; DATA XREF: _pre_c_init+6r
		extrn __imp__initterm:dword ; DATA XREF: _inittermr

;
; Imports from RPCRT4.dll
;
; HRESULT __stdcall CStdStubBuffer_Connect(IRpcStubBuffer *This, IUnknown *pUnkServer)
		extrn __imp_CStdStubBuffer_Connect:dword
					; DATA XREF: CStdStubBuffer_Connectr
					; .rdata:100038F4o
; ULONG	__stdcall IUnknown_Release_Proxy(IUnknown *This)
		extrn __imp_IUnknown_Release_Proxy:dword
					; DATA XREF: IUnknown_Release_Proxyr
; ULONG	__stdcall IUnknown_AddRef_Proxy(IUnknown *This)
		extrn __imp_IUnknown_AddRef_Proxy:dword	; DATA XREF: IUnknown_AddRef_Proxyr
; HRESULT __stdcall IUnknown_QueryInterface_Proxy(IUnknown *This, const	IID *const riid, void **ppvObject)
		extrn __imp_IUnknown_QueryInterface_Proxy:dword
					; DATA XREF: IUnknown_QueryInterface_Proxyr
; void __stdcall NdrOleFree(void *NodeToFree)
		extrn __imp_NdrOleFree:dword ; DATA XREF: NdrOleFreer
; void *__stdcall NdrOleAllocate(size_t	Size)
		extrn __imp_NdrOleAllocate:dword ; DATA	XREF: NdrOleAllocater
; void __stdcall CStdStubBuffer_DebugServerRelease(IRpcStubBuffer *This, void *pv)
		extrn __imp_CStdStubBuffer_DebugServerRelease:dword
					; DATA XREF: CStdStubBuffer_DebugServerReleaser
; HRESULT __stdcall CStdStubBuffer_DebugServerQueryInterface(IRpcStubBuffer *This, void	**ppv)
		extrn __imp_CStdStubBuffer_DebugServerQueryInterface:dword
					; DATA XREF: CStdStubBuffer_DebugServerQueryInterfacer
; ULONG	__stdcall CStdStubBuffer_CountRefs(IRpcStubBuffer *This)
		extrn __imp_CStdStubBuffer_CountRefs:dword
					; DATA XREF: CStdStubBuffer_CountRefsr
; IRpcStubBuffer *__stdcall CStdStubBuffer_IsIIDSupported(IRpcStubBuffer *This,	const IID *const riid)
		extrn __imp_CStdStubBuffer_IsIIDSupported:dword
					; DATA XREF: CStdStubBuffer_IsIIDSupportedr
; HRESULT __stdcall CStdStubBuffer_Invoke(IRpcStubBuffer *This,	RPCOLEMESSAGE *pRpcMsg,	IRpcChannelBuffer *pRpcChannelBuffer)
		extrn __imp_CStdStubBuffer_Invoke:dword	; DATA XREF: CStdStubBuffer_Invoker
; ULONG	__stdcall CStdStubBuffer_AddRef(IRpcStubBuffer *This)
		extrn __imp_CStdStubBuffer_AddRef:dword	; DATA XREF: CStdStubBuffer_AddRefr
; HRESULT __stdcall CStdStubBuffer_QueryInterface(IRpcStubBuffer *This,	const IID *const riid, void **ppvObject)
		extrn __imp_CStdStubBuffer_QueryInterface:dword
					; DATA XREF: CStdStubBuffer_QueryInterfacer
; HRESULT __stdcall NdrDllUnregisterProxy(HMODULE hDll,	const ProxyFileInfo **pProxyFileList, const CLSID *pclsid)
		extrn NdrDllUnregisterProxy:dword ; CODE XREF: DllUnregisterServer+20p
					; DATA XREF: DllUnregisterServer+20r
; HRESULT __stdcall NdrDllRegisterProxy(HMODULE	hDll, const ProxyFileInfo **pProxyFileList, const CLSID	*pclsid)
		extrn NdrDllRegisterProxy:dword	; CODE XREF: DllRegisterServer+20p
					; DATA XREF: DllRegisterServer+20r
; HRESULT __stdcall NdrDllCanUnloadNow(CStdPSFactoryBuffer *pPSFactoryBuffer)
		extrn NdrDllCanUnloadNow:dword ; CODE XREF: DllCanUnloadNow+5p
					; DATA XREF: DllCanUnloadNow+5r
; HRESULT __stdcall NdrDllGetClassObject(const IID *const rclsid, const	IID *const riid, void **ppv, const ProxyFileInfo **pProxyFileList, const CLSID *pclsid,	CStdPSFactoryBuffer *pPSFactoryBuffer)
		extrn NdrDllGetClassObject:dword ; CODE	XREF: DllGetClassObject+2Bp
					; DATA XREF: DllGetClassObject+2Br
; ULONG	__stdcall NdrCStdStubBuffer_Release(IRpcStubBuffer *This, IPSFactoryBuffer *pPSF)
		extrn __imp_NdrCStdStubBuffer_Release:dword
					; DATA XREF: NdrCStdStubBuffer_Releaser
; void __stdcall CStdStubBuffer_Disconnect(IRpcStubBuffer *This)
		extrn __imp_CStdStubBuffer_Disconnect:dword
					; DATA XREF: CStdStubBuffer_Disconnectr


; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 100030C0h
dword_100030C0	dd 0			; DATA XREF: sub_10001190+1A6o
dword_100030C4	dd 0			; DATA XREF: sub_10001190+1A1o
dword_100030C8	dd 0			; DATA XREF: sub_10001190+187o
		dd offset _pre_c_init
		dd offset ___atonexitinit
dword_100030D4	dd 3 dup(0)		; DATA XREF: sub_10001190:loc_10001312o
; Debug	Directory entries
		dd 0			; Characteristics
		dd 56F299EAh		; TimeDateStamp: Wed Mar 23 13:28:10 2016
		dw 0			; MajorVersion
		dw 0			; MinorVersion
		dd 2			; Type:	IMAGE_DEBUG_TYPE_CODEVIEW
		dd 87h			; SizeOfData
		dd rva asc_100036F0	; AddressOfRawData
		dd 18F0h		; PointerToRawData
		dd 0			; Characteristics
		dd 56F299EAh		; TimeDateStamp: Wed Mar 23 13:28:10 2016
		dw 0			; MajorVersion
		dw 0			; MinorVersion
		dd 0Ch			; Type
		dd 14h			; SizeOfData
		dd rva dword_10003778	; AddressOfRawData
		dd 1978h		; PointerToRawData
dword_10003118	dd 6EDCD38Eh, 11D58861h, 0B000DDA3h, 0A7BAF3D0h, 8A885D04h
					; DATA XREF: .rdata:off_10003618o
					; .data:1000400Co
		dd 11C91CEBh, 8E89Fh, 6048102Bh, 2, 2 dup(0)
dword_10003144	dd 20012h, 200011Dh, 125B05h, 11D0002h,	5B050200h, 5C080C11h
		dd 0BE0012h, 180316h, 5C465C4Bh, 80008h, 5C220812h, 0C5C46h
		dd 812000Ch, 5C465C22h,	140014h, 5C020812h, 808085Bh, 5B080808h
		dd 18031Bh, 200019h, 5C4B0001h,	184948h, 30000h, 80008h
		dd 5C220812h, 0C000Ch, 5C220812h, 140014h, 5C020812h, 0A5004C5Bh
		dd 3165BFFh, 5C4B0018h,	0C5C46h, 812000Ch, 5C465C25h, 100010h
		dd 5C250812h, 145C46h, 8120014h, 85B5C02h, 8080808h, 31B5B08h
		dd 190018h, 10028h, 49485C4Bh, 18h, 0C0003h, 812000Ch
		dd 105C25h, 8120010h, 145C25h, 8120014h, 4C5B5C02h, 5BFFA500h
		dd 300316h, 5C465C4Bh, 40004h, 5C220812h, 85C46h, 8120008h
		dd 5C465C22h, 0C000Ch, 5C220812h, 105C46h, 8120010h, 5C465C22h
		dd 140014h, 5C220812h, 1C5C46h,	12001Ch, 5C46FF04h, 240024h
		dd 0FF260012h, 2C5C46h,	12002Ch, 85BFF7Ah, 2 dup(8080808h)
		dd 5B080808h, 20011h, 18031Bh, 0C0026h,	5C4B0001h, 184948h
		dd 30000h, 80008h, 5C220812h, 0C000Ch, 5C220812h, 140014h
		dd 5C020812h, 0AD004C5Bh, 115BFEh, 31B0002h, 260018h, 10014h
		dd 49485C4Bh, 18h, 0C0003h, 812000Ch, 105C25h, 8120010h
		dd 145C25h, 8120014h, 4C5B5C02h, 5BFED500h, 5C250812h
		dd 40001Dh, 14115B02h, 130002h,	0FF20h,	6C330000h, 0
		dd 1C0003h, 240430h, 1080644h, 0
		dd 480000h, 80004h, 8000Ah, 0A0002h, 0C000Ch, 100048h
		dd 21500008h, 80014h, 180070h, 6C330008h, 0
		dd 80004h, 80000h, 1080144h, 0
		dd 700000h, 80004h, 6C33h, 50000h, 8, 1440008h,	108h, 0
		dd 40070h, 6C330008h, 0
		dd 0C0006h, 80008h, 1080244h, 0
		dd 480000h, 80004h, 80070h, 6C330008h, 0
		dw 7
		unicode	0, <($>
		dw 8
		dd 5080946h, 10000h, 480000h, 80004h, 8000Bh, 48001Ah
		dd 6000Ch, 10010Bh, 480142h, 60014h, 18010Bh, 480178h
		dd 8001Ch, 200048h, 700008h, 80024h, 6C33h, 80000h, 10001Ch
		dd 6460008h, 108h, 0
		dd 40048h, 0B0008h, 1AA0008h, 0C000Bh, 0B01AAh,	1AA0010h
		dd 140048h, 700008h, 80018h, 6C33h, 90000h, 700024h, 8460058h
		dd 108h, 0
		dd 40048h, 480008h, 80008h, 0C000Bh, 0B01AAh, 1AA0010h
		dd 140048h, 480008h, 80018h, 1C001Ah, 7001AEh, 80020h
		dd 6C33h, 0A0000h, 200020h, 7470008h, 10308h, 0
		dd 40048h, 480008h, 80008h, 0C000Bh, 4801AAh, 80010h, 140048h
		dd 20130008h, 1B40018h,	1C0070h, 6C330008h, 0
		dd 1C000Bh, 80020h, 1080646h, 0
		dd 480000h, 80004h, 80048h, 0B0008h, 1AA000Ch, 100048h
		dd 480008h, 80014h, 180070h, 6C330008h,	0
		dd 20000Ch, 80020h, 5080746h, 10000h, 480000h, 80004h
		dd 80048h, 0B0008h, 1A000Ch, 100048h, 480008h, 80014h
		dd 18000Bh, 7001AAh, 8001Ch, 6C33h, 0D0000h, 8000Ch, 2440008h
		dd 108h, 0
		dd 40048h, 700008h, 80008h, 6C33h, 0E0000h, 8, 1440008h
		dd 108h, 0
		dd 40070h, 8, 0
dword_10003578	dd 0			; DATA XREF: .rdata:off_100035C8o
					; .rdata:off_100035E8o
		dd offset NdrOleAllocate
		dd offset NdrOleFree
		dd 5 dup(0)
		dd offset dword_10003118+2Ah
		dd 1, 50002h, 0
		dd 800025Bh, 3 dup(0)
		dd 1, 3	dup(0)
off_100035C8	dd offset dword_10003578 ; DATA	XREF: .rdata:1000361Co
		align 10h
		dd offset dword_10003144+1BEh
		dd offset word_100035FA
		dd 4 dup(0)
off_100035E8	dd offset dword_10003578 ; DATA	XREF: .data:off_10004008o
		dd offset dword_10003144+1BEh
		dd offset word_100035FA
		dd 0
		db 2 dup(0)
word_100035FA	dw 0			; DATA XREF: .rdata:100035D4o
					; .rdata:100035F0o
		dd 0
		dd 3C0000h, 78005Ah, 0EA009Ch, 16E0126h, 1EC01B0h, 252022Eh
off_10003618	dd offset dword_10003118 ; DATA	XREF: .rdata:off_10003658o
		dd offset off_100035C8
		dd 0Fh,	0
		dd offset CStdStubBuffer_QueryInterface
		dd offset CStdStubBuffer_AddRef
		dd offset sub_10001000
		dd offset CStdStubBuffer_Connect
		dd offset CStdStubBuffer_Disconnect
		dd offset CStdStubBuffer_Invoke
		dd offset CStdStubBuffer_IsIIDSupported
		dd offset CStdStubBuffer_CountRefs
		dd offset CStdStubBuffer_DebugServerQueryInterface
		dd offset CStdStubBuffer_DebugServerRelease
off_10003650	dd offset off_10004008	; DATA XREF: sub_10002000+Cr
					; .rdata:off_10003668o
		align 8
off_10003658	dd offset off_10003618	; DATA XREF: .rdata:1000366Co
		align 10h
off_10003660	dd offset aNsimapi	; DATA XREF: .rdata:10003670o
					; "nsIMapi"
		align 8
off_10003668	dd offset off_10003650	; DATA XREF: .data:pProxyFileListo
		dd offset off_10003658
		dd offset off_10003660
		dd 0
		dd offset sub_10002000
		dd 20001h, 4 dup(0)
aNsimapi	db 'nsIMapi',0          ; DATA XREF: .rdata:off_10003660o
dword_10003698	dd 0			; DATA XREF: ___DllMainCRTStartup:loc_100013E8r
					; ___DllMainCRTStartup+A8r ...
off_1000369C	dd offset dword_10004080 ; DATA	XREF: ___report_gsfailure+EDo
		dd offset dword_100040D0
		align 8
__load_config_used dd 48h		; Size
		dd 0			; Time stamp
		dw 2 dup(0)		; Version: 0.0
		dd 0			; GlobalFlagsClear
		dd 0			; GlobalFlagsSet
		dd 0			; CriticalSectionDefaultTimeout
		dd 0			; DeCommitFreeBlockThreshold
		dd 0			; DeCommitTotalFreeThreshold
		dd 0			; LockPrefixTable
		dd 0			; MaximumAllocationSize
		dd 0			; VirtualMemoryThreshold
		dd 0			; ProcessAffinityMask
		dd 0			; ProcessHeapFlags
		dw 0			; CSDVersion
		dw 0			; Reserved1
		dd 0			; EditList
		dd offset ___security_cookie ; SecurityCookie
		dd offset ___safe_se_handler_table ; SEHandlerTable
		dd 1			; SEHandlerCount
; Debug	information (IMAGE_DEBUG_TYPE_CODEVIEW)
asc_100036F0	db 'RSDS'               ; DATA XREF: .rdata:100030F4o
					; CV signature
		dd 0B6D55019h		; Data1	; GUID
		dw 0A3BCh		; Data2
		dw 4AD3h		; Data3
		db 9Fh,	30h, 3Dh, 0F4h,	9Eh, 0E6h, 0C7h, 5Dh; Data4
		dd 1			; Age
		db 'c:\builds\moz2_slave\tb-rel-c-esr38-w32_bld-0000000\build\objdir-' ; PdbFileName
		db 'tb\mailnews\mapi\mapihook\build\MapiProxy.pdb',0
		align 4
; Debug	information (type 12)
dword_10003778	dd 0			; DATA XREF: .rdata:10003110o
		dd 2 dup(10h), 3 dup(0)
___safe_se_handler_table dd rva	__except_handler4 ; DATA XREF: .rdata:100036E8o
		align 8
dword_10003798	dd 2 dup(0)		; DATA XREF: sub_100017C7+2o
					; sub_100017C7+7o
dword_100037A0	dd 2 dup(0)		; DATA XREF: Func+2o Func+7o
stru_100037A8	dd 0FFFFFFFEh		; GSCookieOffset
					; DATA XREF: ___DllMainCRTStartup+2o
		dd 0			; GSCookieXOROffset ; SEH scope	table for function 100013AA
		dd 0FFFFFFD0h		; EHCookieOffset
		dd 0			; EHCookieXOROffset
		dd 0FFFFFFFEh		; ScopeRecord.EnclosingLevel
		dd 0			; ScopeRecord.FilterFunc
		dd offset $LN18		; ScopeRecord.HandlerFunc
		dd 0			; ScopeRecord.EnclosingLevel
		dd offset $LN22		; ScopeRecord.FilterFunc
		dd offset $LN23		; ScopeRecord.HandlerFunc
stru_100037D0	dd 0FFFFFFFEh		; GSCookieOffset
					; DATA XREF: __IsNonwritableInCurrentImage+5o
		dd 0			; GSCookieXOROffset ; SEH scope	table for function 10001540
		dd 0FFFFFFD8h		; EHCookieOffset
		dd 0			; EHCookieXOROffset
		dd 0FFFFFFFEh		; ScopeRecord.EnclosingLevel
		dd offset loc_100015C9	; ScopeRecord.FilterFunc
		dd offset loc_100015DC	; ScopeRecord.HandlerFunc
		align 10h
stru_100037F0	dd 0FFFFFFFEh		; GSCookieOffset ; DATA	XREF: sub_1000166D+2o
		dd 0			; GSCookieXOROffset ; SEH scope	table for function 1000166D
		dd 0FFFFFFCCh		; EHCookieOffset
		dd 0			; EHCookieXOROffset
		dd 0FFFFFFFEh		; ScopeRecord.EnclosingLevel
		dd 0			; ScopeRecord.FilterFunc
		dd offset loc_1000170A	; ScopeRecord.HandlerFunc
		align 10h
;
; Export directory for MapiProxy.dll
;
		dd 0			; Characteristics
		dd 56F299EAh		; TimeDateStamp: Wed Mar 23 13:28:10 2016
		dw 0			; MajorVersion
		dw 0			; MinorVersion
		dd rva aMapiproxy_dll	; Name
		dd 1			; Base
		dd 5			; NumberOfFunctions
		dd 5			; NumberOfNames
		dd rva off_10003838	; AddressOfFunctions
		dd rva off_1000384C	; AddressOfNames
		dd rva word_10003860	; AddressOfNameOrdinals
;
; Export Address Table for MapiProxy.dll
;
off_10003838	dd rva DllGetClassObject, rva DllCanUnloadNow, rva GetProxyDllInfo
					; DATA XREF: .rdata:1000382Co
		dd rva DllRegisterServer, rva DllUnregisterServer
;
; Export Names Table for MapiProxy.dll
;
off_1000384C	dd rva aDllcanunloadno,	rva aDllgetclassobj, rva aDllregisterser
					; DATA XREF: .rdata:10003830o
		dd rva aDllunregisters,	rva aGetproxydllinf ; "DllCanUnloadNow"
;
; Export Ordinals Table	for MapiProxy.dll
;
word_10003860	dw 1, 0, 3, 4, 2	; DATA XREF: .rdata:10003834o
aMapiproxy_dll	db 'MapiProxy.dll',0    ; DATA XREF: .rdata:1000381Co
aDllcanunloadno	db 'DllCanUnloadNow',0  ; DATA XREF: .rdata:off_1000384Co
aDllgetclassobj	db 'DllGetClassObject',0 ; DATA XREF: .rdata:off_1000384Co
aDllregisterser	db 'DllRegisterServer',0 ; DATA XREF: .rdata:off_1000384Co
aDllunregisters	db 'DllUnregisterServer',0 ; DATA XREF: .rdata:off_1000384Co
aGetproxydllinf	db 'GetProxyDllInfo',0  ; DATA XREF: .rdata:off_1000384Co
__IMPORT_DESCRIPTOR_KERNEL32 dd	rva off_10003920 ; Import Name Table
		dd 0			; Time stamp
		dd 0			; Forwarder Chain
		dd rva aKernel32_dll	; DLL Name
		dd rva DisableThreadLibraryCalls ; Import Address Table
__IMPORT_DESCRIPTOR_RPCRT4 dd rva off_10003990 ; Import	Name Table
		dd 0			; Time stamp
		dd 0			; Forwarder Chain
		dd rva aRpcrt4_dll	; DLL Name
		dd rva __imp_CStdStubBuffer_Connect ; Import Address Table
__IMPORT_DESCRIPTOR_MSVCR120 dd	rva off_10003948 ; Import Name Table
		dd 0			; Time stamp
		dd 0			; Forwarder Chain
		dd rva aMsvcr120_dll	; DLL Name
		dd rva __imp___crtTerminateProcess ; Import Address Table
		align 20h
;
; Import names for KERNEL32.dll
;
off_10003920	dd rva word_100039E0	; DATA XREF: .rdata:__IMPORT_DESCRIPTOR_KERNEL32o
		dd rva word_10003DB8
		dd rva word_10003D9E
		dd rva word_10003D88
		dd rva word_10003D72
		dd rva word_10003D58
		dd rva word_10003D48
		dd rva word_10003D38
		dd rva word_10003DCC
		dd 0
;
; Import names for MSVCR120.dll
;
off_10003948	dd rva word_10003D20	; DATA XREF: .rdata:__IMPORT_DESCRIPTOR_MSVCR120o
		dd rva word_10003D06
		dd rva word_10003CF0
		dd rva word_10003CD6
		dd rva word_10003CB2
		dd rva word_10003CA8
		dd rva word_10003C9A
		dd rva word_10003C8C
		dd rva word_10003C82
		dd rva word_10003C7A
		dd rva word_10003C3C
		dd rva word_10003C12
		dd rva word_10003C2A
		dd rva word_10003C6C
		dd rva word_10003C4A
		dd rva word_10003C52
		dd rva word_10003C60
		dd 0
;
; Import names for RPCRT4.dll
;
off_10003990	dd rva word_10003ABA	; DATA XREF: .rdata:__IMPORT_DESCRIPTOR_RPCRT4o
		dd rva word_10003BEC
		dd rva word_10003BD4
		dd rva word_10003BB4
		dd rva word_10003BA6
		dd rva word_10003B94
		dd rva word_10003B70
		dd rva word_10003B44
		dd rva word_10003B28
		dd rva word_10003B08
		dd rva word_10003AF0
		dd rva word_10003AA2
		dd rva word_10003A82
		dd rva word_10003A6A
		dd rva word_10003A54
		dd rva word_10003A3E
		dd rva word_10003A26
		dd rva word_10003A0A
		dd rva word_10003AD4
		dd 0
word_100039E0	dw 113h			; DATA XREF: .rdata:off_10003920o
		db 'DisableThreadLibraryCalls',0
aKernel32_dll	db 'KERNEL32.dll',0     ; DATA XREF: .rdata:100038DCo
		align 2
word_10003A0A	dw 99h			; DATA XREF: .rdata:100039D4o
		db 'NdrCStdStubBuffer_Release',0
word_10003A26	dw 0CEh			; DATA XREF: .rdata:100039D0o
		db 'NdrDllGetClassObject',0
		align 2
word_10003A3E	dw 0CDh			; DATA XREF: .rdata:100039CCo
		db 'NdrDllCanUnloadNow',0
		align 4
word_10003A54	dw 0CFh			; DATA XREF: .rdata:100039C8o
		db 'NdrDllRegisterProxy',0
word_10003A6A	dw 0D0h			; DATA XREF: .rdata:100039C4o
		db 'NdrDllUnregisterProxy',0
word_10003A82	dw 8			; DATA XREF: .rdata:100039C0o
		db 'CStdStubBuffer_QueryInterface',0
word_10003AA2	dw 0			; DATA XREF: .rdata:100039BCo
		db 'CStdStubBuffer_AddRef',0
word_10003ABA	dw 1			; DATA XREF: .rdata:off_10003990o
		db 'CStdStubBuffer_Connect',0
		align 4
word_10003AD4	dw 5			; DATA XREF: .rdata:100039D8o
		db 'CStdStubBuffer_Disconnect',0
word_10003AF0	dw 6			; DATA XREF: .rdata:100039B8o
		db 'CStdStubBuffer_Invoke',0
word_10003B08	dw 7			; DATA XREF: .rdata:100039B4o
		db 'CStdStubBuffer_IsIIDSupported',0
word_10003B28	dw 2			; DATA XREF: .rdata:100039B0o
		db 'CStdStubBuffer_CountRefs',0
		align 4
word_10003B44	dw 3			; DATA XREF: .rdata:100039ACo
		db 'CStdStubBuffer_DebugServerQueryInterface',0
		align 10h
word_10003B70	dw 4			; DATA XREF: .rdata:100039A8o
		db 'CStdStubBuffer_DebugServerRelease',0
word_10003B94	dw 107h			; DATA XREF: .rdata:100039A4o
		db 'NdrOleAllocate',0
		align 2
word_10003BA6	dw 108h			; DATA XREF: .rdata:100039A0o
		db 'NdrOleFree',0
		align 4
word_10003BB4	dw 10h			; DATA XREF: .rdata:1000399Co
		db 'IUnknown_QueryInterface_Proxy',0
word_10003BD4	dw 0Fh			; DATA XREF: .rdata:10003998o
		db 'IUnknown_AddRef_Proxy',0
word_10003BEC	dw 11h			; DATA XREF: .rdata:10003994o
		db 'IUnknown_Release_Proxy',0
		align 2
aRpcrt4_dll	db 'RPCRT4.dll',0       ; DATA XREF: .rdata:100038F0o
		align 2
word_10003C12	dw 6E5h			; DATA XREF: .rdata:10003974o
		db 'memcmp',0
		align 4
aMsvcr120_dll	db 'MSVCR120.dll',0     ; DATA XREF: .rdata:10003904o
		align 2
word_10003C2A	dw 16Fh			; DATA XREF: .rdata:10003978o
		db '__CppXcptFilter',0
word_10003C3C	dw 217h			; DATA XREF: .rdata:10003970o
		db '_amsg_exit',0
		align 2
word_10003C4A	dw 683h			; DATA XREF: .rdata:10003980o
		db 'free',0
		align 2
word_10003C52	dw 3A5h			; DATA XREF: .rdata:10003984o
		db '_malloc_crt',0
word_10003C60	dw 30Ch			; DATA XREF: .rdata:10003988o
		db '_initterm',0
word_10003C6C	dw 30Dh			; DATA XREF: .rdata:1000397Co
		db '_initterm_e',0
word_10003C7A	dw 394h			; DATA XREF: .rdata:1000396Co
		db '_lock',0
word_10003C82	dw 504h			; DATA XREF: .rdata:10003968o
		db '_unlock',0
word_10003C8C	dw 22Eh			; DATA XREF: .rdata:10003964o
		db '_calloc_crt',0
word_10003C9A	dw 1AEh			; DATA XREF: .rdata:10003960o
		db '__dllonexit',0
word_10003CA8	dw 43Ah			; DATA XREF: .rdata:1000395Co
		db '_onexit',0
word_10003CB2	dw 18Ch			; DATA XREF: .rdata:10003958o
		db '__clean_type_info_names_internal',0
		align 2
word_10003CD6	dw 27Ah			; DATA XREF: .rdata:10003954o
		db '_except_handler4_common',0
word_10003CF0	dw 250h			; DATA XREF: .rdata:10003950o
		db '_crt_debugger_hook',0
		align 2
word_10003D06	dw 1ACh			; DATA XREF: .rdata:1000394Co
		db '__crtUnhandledException',0
word_10003D20	dw 1ABh			; DATA XREF: .rdata:off_10003948o
		db '__crtTerminateProcess',0
word_10003D38	dw 121h			; DATA XREF: .rdata:1000393Co
		db 'EncodePointer',0
word_10003D48	dw 0FEh			; DATA XREF: .rdata:10003938o
		db 'DecodePointer',0
word_10003D58	dw 42Dh			; DATA XREF: .rdata:10003934o
		db 'QueryPerformanceCounter',0
word_10003D72	dw 20Ah			; DATA XREF: .rdata:10003930o
		db 'GetCurrentProcessId',0
word_10003D88	dw 20Eh			; DATA XREF: .rdata:1000392Co
		db 'GetCurrentThreadId',0
		align 2
word_10003D9E	dw 2D6h			; DATA XREF: .rdata:10003928o
		db 'GetSystemTimeAsFileTime',0
word_10003DB8	dw 367h			; DATA XREF: .rdata:10003924o
		db 'IsDebuggerPresent',0
word_10003DCC	dw 36Dh			; DATA XREF: .rdata:10003940o
		db 'IsProcessorFeaturePresent',0
		align 400h
_rdata		ends

; Section 4. (virtual address 00004000)
; Virtual size			: 000003B4 (	948.)
; Section size in file		: 00000200 (	512.)
; Offset to raw	data for section: 00002000
; Flags	C0300040: Data Readable	Writable
; Alignment	: 4 bytes
; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
		;org 10004000h
; ProxyFileInfo	*pProxyFileList
pProxyFileList	dd offset off_10003668	; DATA XREF: DllGetClassObjectr
					; DllGetClassObject+1Ao ...
		align 8
off_10004008	dd offset off_100035E8	; DATA XREF: .rdata:off_10003650o
		dd offset dword_10003118
		dd offset IUnknown_QueryInterface_Proxy
		dd offset IUnknown_AddRef_Proxy
		dd offset IUnknown_Release_Proxy
		dd 0Ch dup(0FFFFFFFFh),	0
dword_10004050	dd 0FFFFFFFFh		; DATA XREF: ___DllMainCRTStartup+1Cw
					; ___DllMainCRTStartup:$LN20w
___security_cookie dd 0BB40E64Eh	; DATA XREF: __IsNonwritableInCurrentImage+1Cr
					; sub_1000172B+Er ...
dword_10004058	dd 44BF19B1h		; DATA XREF: sub_1000172B+29w
					; sub_1000172B+90w ...
		align 10h
; CStdPSFactoryBuffer pPSF
pPSF		CStdPSFactoryBuffer <0>	; DATA XREF: sub_10001000o
					; DllCanUnloadNowo ...
; HMODULE hDll
hDll		dd 0			; DATA XREF: DllMain(x,x,x)+Cw
					; DllRegisterServer+1Ar ...
dword_10004074	dd 0			; DATA XREF: sub_10001190+12r
					; sub_10001190+25w ...
dword_10004078	dd 2 dup(0)		; DATA XREF: sub_10001814o
dword_10004080	dd 0			; DATA XREF: ___report_gsfailure+9Fw
					; .rdata:off_1000369Co
dword_10004084	dd 0			; DATA XREF: ___report_gsfailure+A9w
		dd 0
dword_1000408C	dd 0			; DATA XREF: ___report_gsfailure+9Aw
dword_10004090	dd 0			; DATA XREF: ___report_gsfailure+B3w
dword_10004094	dd 0			; DATA XREF: ___report_gsfailure+C3w
		dd 0Eh dup(0)
dword_100040D0	dd 0			; DATA XREF: ___report_gsfailure+8Bw
					; .rdata:100036A0o
		dd 22h dup(0)
word_1000415C	dw 0			; DATA XREF: ___report_gsfailure+5Fw
		align 10h
word_10004160	dw 0			; DATA XREF: ___report_gsfailure+58w
		align 4
word_10004164	dw 0			; DATA XREF: ___report_gsfailure+51w
		align 4
word_10004168	dw 0			; DATA XREF: ___report_gsfailure+4Aw
		align 4
dword_1000416C	dd 0			; DATA XREF: ___report_gsfailure+36w
dword_10004170	dd 0			; DATA XREF: ___report_gsfailure+30w
dword_10004174	dd 0			; DATA XREF: ___report_gsfailure+2Aw
dword_10004178	dd 0			; DATA XREF: ___report_gsfailure+24w
dword_1000417C	dd 0			; DATA XREF: ___report_gsfailure+1Ew
dword_10004180	dd 0			; DATA XREF: ___report_gsfailure:loc_10001920w
dword_10004184	dd 0			; DATA XREF: ___report_gsfailure+70w
dword_10004188	dd 0			; DATA XREF: ___report_gsfailure+78w
					; ___report_gsfailure+95r
word_1000418C	dw 0			; DATA XREF: ___report_gsfailure+43w
		align 10h
dword_10004190	dd 0			; DATA XREF: ___report_gsfailure+67w
dword_10004194	dd 0			; DATA XREF: ___report_gsfailure+80w
word_10004198	dw 0			; DATA XREF: ___report_gsfailure+3Cw
		align 4
		dd 19h dup(0)
		dd 67h dup(?)
dword_1000439C	dd ?			; DATA XREF: ___raise_securityfailure+Bw
					; ___raise_securityfailure+1Dr
dword_100043A0	dd ?			; DATA XREF: sub_10001190+20o
					; sub_10001190+112o ...
dword_100043A4	dd ?			; DATA XREF: sub_10001190:loc_100011E3r
					; sub_10001190:loc_100012ACw ...
; PVOID	dword_100043A8
dword_100043A8	dd ?			; DATA XREF: _pre_c_init+1Bw
					; sub_10001190+82r ...
; PVOID	Ptr
Ptr		dd ?			; DATA XREF: _pre_c_init+16w
					; sub_10001190:loc_100011F9r ...
dword_100043B0	dd ?			; DATA XREF: sub_10001190:loc_10001350r
					; sub_10001190+1C9o ...
		align 1000h
_data		ends


		end DllEntryPoint
