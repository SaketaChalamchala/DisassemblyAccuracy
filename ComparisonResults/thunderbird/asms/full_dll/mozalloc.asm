;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	6D9091F738EBE7D3700072051B7D566F
; Input	CRC32 :	2CA56EFF

; File Name   :	C:\compspace\compare\thunderbird\dlls\full\mozalloc_full.dll
; Format      :	Portable executable for	80386 (PE)
; Imagebase   :	10000000
; Section 1. (virtual address 00001000)
; Virtual size			: 00000AF2 (   2802.)
; Section size in file		: 00000C00 (   3072.)
; Offset to raw	data for section: 00000400
; Flags	60300020: Text Executable Readable
; Alignment	: 4 bytes
; PDB File Name	: c:\builds\moz2_slave\tb-rel-c-esr38-w32_bld-0000000\build\objdir-tb\memory\mozalloc\mozalloc.pdb
; OS type	  :  MS	Windows
; Application type:  DLL 32bit

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	dword public 'CODE' use32
		assume cs:_text
		;org 10001000h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

; int __cdecl sub_10001000(int,	char *Str)
sub_10001000	proc near		; CODE XREF: std::moz_Xinvalid_argument(char const *)+9p
					; std::moz_Xlength_error(char const *)+9p ...

arg_0		= dword	ptr  4
Str		= dword	ptr  8

		push	[esp+arg_0]
		push	offset Format	; "fatal: STL threw %s:	"
		call	ds:__iob_func
		add	eax, 40h
		push	eax		; File
		call	ds:fprintf
		add	esp, 0Ch
		push	[esp+Str]	; Str
		call	?mozalloc_abort@@YAXQBD@Z ; mozalloc_abort(char	const *	const)
sub_10001000	endp

; ---------------------------------------------------------------------------
		align 2
; Exported entry   1. ?moz_Xinvalid_argument@std@@YAXPBD@Z

; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

; void __cdecl std::moz_Xinvalid_argument(const	char *Str)
		public ?moz_Xinvalid_argument@std@@YAXPBD@Z
?moz_Xinvalid_argument@std@@YAXPBD@Z proc near ; DATA XREF: .rdata:off_10002348o

Str		= dword	ptr  4

		push	[esp+Str]	; Str
		push	offset aInvalid_argume ; "invalid_argument"
		call	sub_10001000
?moz_Xinvalid_argument@std@@YAXPBD@Z endp

; ---------------------------------------------------------------------------
		db 0CCh
; Exported entry   2. ?moz_Xlength_error@std@@YAXPBD@Z

; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

; void __cdecl std::moz_Xlength_error(const char *Str)
		public ?moz_Xlength_error@std@@YAXPBD@Z
?moz_Xlength_error@std@@YAXPBD@Z proc near ; DATA XREF:	.rdata:off_10002348o

Str		= dword	ptr  4

		push	[esp+Str]	; Str
		push	offset aLength_error ; "length_error"
		call	sub_10001000
?moz_Xlength_error@std@@YAXPBD@Z endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry   3. ?moz_Xout_of_range@std@@YAXPBD@Z

; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

; void __cdecl std::moz_Xout_of_range(const char *Str)
		public ?moz_Xout_of_range@std@@YAXPBD@Z
?moz_Xout_of_range@std@@YAXPBD@Z proc near ; DATA XREF:	.rdata:off_10002348o

Str		= dword	ptr  4

		push	[esp+Str]	; Str
		push	offset aOut_of_range ; "out_of_range"
		call	sub_10001000
?moz_Xout_of_range@std@@YAXPBD@Z endp

; ---------------------------------------------------------------------------
		db 0CCh
; Exported entry   4. ?moz_Xoverflow_error@std@@YAXPBD@Z

; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

; void __cdecl std::moz_Xoverflow_error(const char *Str)
		public ?moz_Xoverflow_error@std@@YAXPBD@Z
?moz_Xoverflow_error@std@@YAXPBD@Z proc	near ; DATA XREF: .rdata:off_10002348o

Str		= dword	ptr  4

		push	[esp+Str]	; Str
		push	offset aOverflow_error ; "overflow_error"
		call	sub_10001000
?moz_Xoverflow_error@std@@YAXPBD@Z endp

; ---------------------------------------------------------------------------
		align 2
; Exported entry   5. ?moz_Xruntime_error@std@@YAXPBD@Z

; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

; void __cdecl std::moz_Xruntime_error(const char *Str)
		public ?moz_Xruntime_error@std@@YAXPBD@Z
?moz_Xruntime_error@std@@YAXPBD@Z proc near ; DATA XREF: .rdata:off_10002348o

Str		= dword	ptr  4

		push	[esp+Str]	; Str
		push	offset aRuntime_error ;	"runtime_error"
		call	sub_10001000
?moz_Xruntime_error@std@@YAXPBD@Z endp

; ---------------------------------------------------------------------------
		db 0CCh
; Exported entry   9. ?mozilla_Throw@std@@YAXABVexception@stdext@@@Z

; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

; void __cdecl std::mozilla_Throw(const	struct stdext::exception *)
		public ?mozilla_Throw@std@@YAXABVexception@stdext@@@Z
?mozilla_Throw@std@@YAXABVexception@stdext@@@Z proc near ; DATA	XREF: .rdata:off_10002348o

arg_0		= dword	ptr  4

		mov	ecx, [esp+arg_0]
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		push	eax		; Str
		call	?mozalloc_abort@@YAXQBD@Z ; mozalloc_abort(char	const *	const)
?mozilla_Throw@std@@YAXABVexception@stdext@@@Z endp

; ---------------------------------------------------------------------------
		db 0CCh
; Exported entry   6. ?mozalloc_abort@@YAXQBD@Z

; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

; void __cdecl mozalloc_abort(const char *const	Str)
		public ?mozalloc_abort@@YAXQBD@Z
?mozalloc_abort@@YAXQBD@Z proc near	; CODE XREF: sub_10001000+20p
					; std::mozilla_Throw(stdext::exception const &)+Ap ...

Str		= dword	ptr  4

		call	ds:__iob_func
		add	eax, 40h
		push	eax		; File
		push	[esp+4+Str]	; Str
		call	ds:fputs
		call	ds:__iob_func
		add	eax, 40h
		push	eax		; File
		push	offset Str	; "\n"
		call	ds:fputs
		add	esp, 10h
		int	3		; Trap to Debugger
		push	3		; uExitCode
		mov	large dword ptr	ds:0, 25h
		call	ds:GetCurrentProcess
		push	eax		; hProcess
		call	ds:TerminateProcess
		int	3		; Trap to Debugger
?mozalloc_abort@@YAXQBD@Z endp

; Exported entry   7. ?mozalloc_handle_oom@@YAXI@Z

; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn bp-based	frame

; void __cdecl mozalloc_handle_oom(unsigned int)
		public ?mozalloc_handle_oom@@YAXI@Z
?mozalloc_handle_oom@@YAXI@Z proc near	; CODE XREF: moz_xcalloc+24p
					; moz_xmalloc+1Ap ...

Str		= byte ptr -38h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 38h
		mov	eax, ___security_cookie
		xor	eax, ebp
		mov	[ebp+var_4], eax
		push	ebx
		push	esi
		push	edi
		mov	eax, dword_10003018
		lea	edi, [ebp+Str]
		mov	ebx, [ebp+arg_0]
		mov	esi, offset aOutOfMemory0x0 ; "out of memory: 0x0000000000000000 bytes"...
		push	0Ch
		pop	ecx
		rep movsd
		movsw
		test	eax, eax
		jz	short loc_100010FA
		push	ebx
		call	eax ; dword_10003018
		pop	ecx

loc_100010FA:				; CODE XREF: mozalloc_handle_oom(uint)+2Cj
		push	20h
		pop	ecx
		test	ebx, ebx
		jz	short loc_10001120
		mov	edx, off_10003000

loc_10001107:				; CODE XREF: mozalloc_handle_oom(uint)+56j
		cmp	ecx, 11h
		jb	short loc_10001120
		mov	eax, ebx
		shr	ebx, 4
		and	eax, 0Fh
		mov	al, [eax+edx]
		mov	[ebp+ecx+Str], al
		dec	ecx
		test	ebx, ebx
		jnz	short loc_10001107

loc_10001120:				; CODE XREF: mozalloc_handle_oom(uint)+37j
					; mozalloc_handle_oom(uint)+42j
		lea	eax, [ebp+Str]
		push	eax		; Str
		call	?mozalloc_abort@@YAXQBD@Z ; mozalloc_abort(char	const *	const)
?mozalloc_handle_oom@@YAXI@Z endp

; ---------------------------------------------------------------------------
		align 2
; Exported entry   8. ?mozalloc_set_oom_abort_handler@@YAXP6AXI@Z@Z

; =============== S U B	R O U T	I N E =======================================


; void __cdecl mozalloc_set_oom_abort_handler(void (__cdecl *)(unsigned	int))
		public ?mozalloc_set_oom_abort_handler@@YAXP6AXI@Z@Z
?mozalloc_set_oom_abort_handler@@YAXP6AXI@Z@Z proc near	; DATA XREF: .rdata:off_10002348o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	dword_10003018,	eax
		retn
?mozalloc_set_oom_abort_handler@@YAXP6AXI@Z@Z endp

; Exported entry  10. moz_calloc

; =============== S U B	R O U T	I N E =======================================


; void *__cdecl	moz_calloc(size_t NumOfElements, size_t	SizeOfElements)
		public moz_calloc
moz_calloc	proc near		; DATA XREF: .rdata:off_10002348o
		jmp	ds:calloc
moz_calloc	endp

; Exported entry  11. moz_free

; =============== S U B	R O U T	I N E =======================================


; void __cdecl moz_free(void *Memory)
		public moz_free
moz_free	proc near		; DATA XREF: .rdata:off_10002348o
		jmp	ds:free
moz_free	endp

; Exported entry  12. moz_malloc

; =============== S U B	R O U T	I N E =======================================


; void *__cdecl	moz_malloc(size_t Size)
		public moz_malloc
moz_malloc	proc near		; DATA XREF: .rdata:off_10002348o
		jmp	ds:malloc
moz_malloc	endp

; Exported entry  13. moz_malloc_size_of
; Exported entry  14. moz_malloc_usable_size

; =============== S U B	R O U T	I N E =======================================


		public moz_malloc_size_of
moz_malloc_size_of proc	near		; DATA XREF: .rdata:off_10002348o

arg_0		= dword	ptr  4

		cmp	[esp+arg_0], 0	; moz_malloc_size_of
		jnz	short loc_10001150
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_10001150:				; CODE XREF: moz_malloc_size_of+5j
		jmp	malloc_usable_size
moz_malloc_size_of endp

; Exported entry  15. moz_realloc

; =============== S U B	R O U T	I N E =======================================


; void *__cdecl	moz_realloc(void *Memory, size_t NewSize)
		public moz_realloc
moz_realloc	proc near		; DATA XREF: .rdata:off_10002348o
		jmp	ds:realloc
moz_realloc	endp

; Exported entry  16. moz_strdup

; =============== S U B	R O U T	I N E =======================================


; char *__cdecl	moz_strdup(const char *Src)
		public moz_strdup
moz_strdup	proc near		; DATA XREF: .rdata:off_10002348o
		jmp	ds:strdup
moz_strdup	endp

; Exported entry  17. moz_xcalloc

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl moz_xcalloc(size_t NumOfElements,	size_t SizeOfElements)
		public moz_xcalloc
moz_xcalloc	proc near		; DATA XREF: .rdata:off_10002348o

NumOfElements	= dword	ptr  8
SizeOfElements	= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	[ebp+SizeOfElements] ; SizeOfElements
		push	[ebp+NumOfElements] ; NumOfElements
		call	ds:calloc
		pop	ecx
		pop	ecx
		test	eax, eax
		jnz	short loc_10001180
		cmp	[ebp+NumOfElements], eax
		jz	short loc_10001180
		cmp	[ebp+SizeOfElements], eax
		jnz	short loc_10001182

loc_10001180:				; CODE XREF: moz_xcalloc+13j
					; moz_xcalloc+18j
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_10001182:				; CODE XREF: moz_xcalloc+1Dj
		push	[ebp+SizeOfElements] ; unsigned	int
		call	?mozalloc_handle_oom@@YAXI@Z ; mozalloc_handle_oom(uint)
moz_xcalloc	endp

; ---------------------------------------------------------------------------
		db 0CCh
; Exported entry  18. moz_xmalloc

; =============== S U B	R O U T	I N E =======================================


; int __cdecl moz_xmalloc(size_t Size)
		public moz_xmalloc
moz_xmalloc	proc near		; DATA XREF: .rdata:off_10002348o

Size		= dword	ptr  4

		push	[esp+Size]	; Size
		call	ds:malloc
		pop	ecx
		test	eax, eax
		jnz	short locret_100011A0
		cmp	[esp+Size], eax
		jnz	short loc_100011A1

locret_100011A0:			; CODE XREF: moz_xmalloc+Dj
		retn
; ---------------------------------------------------------------------------

loc_100011A1:				; CODE XREF: moz_xmalloc+13j
		push	[esp+Size]	; unsigned int
		call	?mozalloc_handle_oom@@YAXI@Z ; mozalloc_handle_oom(uint)
moz_xmalloc	endp

; ---------------------------------------------------------------------------
		db 0CCh
; Exported entry  19. moz_xrealloc

; =============== S U B	R O U T	I N E =======================================


; int __cdecl moz_xrealloc(void	*Memory, size_t	NewSize)
		public moz_xrealloc
moz_xrealloc	proc near		; DATA XREF: .rdata:off_10002348o

Memory		= dword	ptr  4
NewSize		= dword	ptr  8

		push	[esp+NewSize]	; NewSize
		push	[esp+4+Memory]	; Memory
		call	ds:realloc
		pop	ecx
		pop	ecx
		test	eax, eax
		jnz	short locret_100011C5
		cmp	[esp+NewSize], eax
		jnz	short loc_100011C6

locret_100011C5:			; CODE XREF: moz_xrealloc+12j
		retn
; ---------------------------------------------------------------------------

loc_100011C6:				; CODE XREF: moz_xrealloc+18j
		push	[esp+NewSize]	; unsigned int
		call	?mozalloc_handle_oom@@YAXI@Z ; mozalloc_handle_oom(uint)
moz_xrealloc	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  20. moz_xstrdup

; =============== S U B	R O U T	I N E =======================================


; int __cdecl moz_xstrdup(char *Src)
		public moz_xstrdup
moz_xstrdup	proc near		; DATA XREF: .rdata:off_10002348o

Src		= dword	ptr  4

		push	[esp+Src]	; Src
		call	ds:strdup
		pop	ecx
		test	eax, eax
		jz	short loc_100011E0
		retn
; ---------------------------------------------------------------------------

loc_100011E0:				; CODE XREF: moz_xstrdup+Dj
		push	0		; unsigned int
		call	?mozalloc_handle_oom@@YAXI@Z ; mozalloc_handle_oom(uint)
moz_xstrdup	endp

; ---------------------------------------------------------------------------
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION malloc_usable_size]
; [0000000F BYTES: COLLAPSED FUNCTION __security_check_cookie(x)]
; [0000004C BYTES: COLLAPSED FUNCTION _pre_c_init]

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10001249	proc near		; CODE XREF: ___DllMainCRTStartup+64p
					; ___DllMainCRTStartup+A3p ...

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ecx
		cmp	[ebp+arg_4], 0
		push	ebx
		push	esi
		push	edi
		jnz	loc_10001384
		mov	eax, dword_1000301C
		test	eax, eax
		jle	loc_1000137D
		dec	eax
		mov	ebx, offset dword_10003348
		mov	dword_1000301C,	eax
		xor	edi, edi
		mov	eax, large fs:18h
		mov	[ebp+var_4], edi
		mov	edx, [eax+4]
		jmp	short loc_10001287
; ---------------------------------------------------------------------------

loc_10001283:				; CODE XREF: sub_10001249+48j
		cmp	eax, edx
		jz	short loc_10001295

loc_10001287:				; CODE XREF: sub_10001249+38j
		xor	eax, eax
		mov	ecx, edx
		lock cmpxchg [ebx], ecx
		test	eax, eax
		jnz	short loc_10001283
		jmp	short loc_1000129C
; ---------------------------------------------------------------------------

loc_10001295:				; CODE XREF: sub_10001249+3Cj
		mov	[ebp+var_4], 1

loc_1000129C:				; CODE XREF: sub_10001249+4Aj
		cmp	dword_1000334C,	2
		jz	short loc_100012B2
		push	1Fh
		call	_amsg_exit
		pop	ecx
		jmp	loc_10001434
; ---------------------------------------------------------------------------

loc_100012B2:				; CODE XREF: sub_10001249+5Aj
		push	Ptr		; Ptr
		call	ds:DecodePointer
		mov	esi, eax
		mov	[ebp+arg_8], esi
		test	esi, esi
		jz	loc_10001365
		push	dword_10003350	; Ptr
		call	ds:DecodePointer
		mov	ebx, eax
		mov	[ebp+arg_4], esi
		mov	[ebp+arg_0], ebx

loc_100012DF:				; CODE XREF: sub_10001249+9Fj
					; sub_10001249+AAj ...
		sub	ebx, 4
		cmp	ebx, esi
		jb	short loc_10001342
		cmp	[ebx], edi
		jz	short loc_100012DF
		push	edi		; Ptr
		call	ds:EncodePointer
		cmp	[ebx], eax
		jz	short loc_100012DF
		push	dword ptr [ebx]	; Ptr
		call	ds:DecodePointer
		push	edi		; Ptr
		mov	esi, eax
		call	ds:EncodePointer
		mov	[ebx], eax
		call	esi
		push	Ptr		; Ptr
		mov	esi, ds:DecodePointer
		call	esi ; DecodePointer
		push	dword_10003350	; Ptr
		mov	[ebp+var_8], eax
		call	esi ; DecodePointer
		mov	ecx, [ebp+var_8]
		cmp	[ebp+arg_4], ecx
		jnz	short loc_10001333
		mov	esi, [ebp+arg_8]
		cmp	[ebp+arg_0], eax
		jz	short loc_100012DF

loc_10001333:				; CODE XREF: sub_10001249+E0j
		mov	esi, ecx
		mov	[ebp+arg_4], ecx
		mov	[ebp+arg_8], esi
		mov	ebx, eax
		mov	[ebp+arg_0], eax
		jmp	short loc_100012DF
; ---------------------------------------------------------------------------

loc_10001342:				; CODE XREF: sub_10001249+9Bj
		cmp	esi, 0FFFFFFFFh
		jz	short loc_1000134F
		push	esi
		call	ds:frex
		pop	ecx

loc_1000134F:				; CODE XREF: sub_10001249+FCj
		push	edi		; Ptr
		call	ds:EncodePointer
		mov	dword_10003350,	eax
		mov	ebx, offset dword_10003348
		mov	Ptr, eax

loc_10001365:				; CODE XREF: sub_10001249+7Cj
		mov	dword_1000334C,	edi
		cmp	[ebp+var_4], edi
		jnz	loc_10001434
		xor	eax, eax
		xchg	eax, [ebx]
		jmp	loc_10001434
; ---------------------------------------------------------------------------

loc_1000137D:				; CODE XREF: sub_10001249+19j
					; sub_10001249+19Fj
		xor	eax, eax
		jmp	loc_10001437
; ---------------------------------------------------------------------------

loc_10001384:				; CODE XREF: sub_10001249+Cj
		cmp	[ebp+arg_4], 1
		jnz	loc_10001434
		mov	eax, large fs:18h
		xor	edi, edi
		mov	esi, edi
		mov	ebx, offset dword_10003348
		mov	edx, [eax+4]
		jmp	short loc_100013A6
; ---------------------------------------------------------------------------

loc_100013A2:				; CODE XREF: sub_10001249+167j
		cmp	eax, edx
		jz	short loc_100013B4

loc_100013A6:				; CODE XREF: sub_10001249+157j
		xor	eax, eax
		mov	ecx, edx
		lock cmpxchg [ebx], ecx
		test	eax, eax
		jnz	short loc_100013A2
		jmp	short loc_100013B7
; ---------------------------------------------------------------------------

loc_100013B4:				; CODE XREF: sub_10001249+15Bj
		xor	esi, esi
		inc	esi

loc_100013B7:				; CODE XREF: sub_10001249+169j
		cmp	dword_1000334C,	edi
		push	2
		pop	edi
		jz	short loc_100013CB
		push	1Fh
		call	_amsg_exit
		jmp	short loc_10001400
; ---------------------------------------------------------------------------

loc_100013CB:				; CODE XREF: sub_10001249+177j
		push	offset dword_100020B0
		push	offset dword_100020A4
		mov	dword_1000334C,	1
		call	_initterm_e
		pop	ecx
		pop	ecx
		test	eax, eax
		jnz	short loc_1000137D
		push	offset dword_100020A0
		push	offset dword_1000209C
		call	_initterm
		pop	ecx
		mov	dword_1000334C,	edi

loc_10001400:				; CODE XREF: sub_10001249+180j
		pop	ecx
		test	esi, esi
		jnz	short loc_10001409
		xor	eax, eax
		xchg	eax, [ebx]

loc_10001409:				; CODE XREF: sub_10001249+1BAj
		cmp	dword_10003358,	0
		jz	short loc_1000142E
		push	offset dword_10003358
		call	__IsNonwritableInCurrentImage
		pop	ecx
		test	eax, eax
		jz	short loc_1000142E
		push	[ebp+arg_8]
		push	edi
		push	[ebp+arg_0]
		call	dword_10003358

loc_1000142E:				; CODE XREF: sub_10001249+1C7j
					; sub_10001249+1D6j
		inc	dword_1000301C

loc_10001434:				; CODE XREF: sub_10001249+64j
					; sub_10001249+125j ...
		xor	eax, eax
		inc	eax

loc_10001437:				; CODE XREF: sub_10001249+136j
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn	0Ch
sub_10001249	endp

; [00000023 BYTES: COLLAPSED FUNCTION DllEntryPoint]
; [00000133 BYTES: COLLAPSED FUNCTION ___DllMainCRTStartup]
; [0000003D BYTES: COLLAPSED FUNCTION ___raise_securityfailure]
; [000000FB BYTES: COLLAPSED FUNCTION ___report_gsfailure]
; [00000006 BYTES: COLLAPSED FUNCTION __CppXcptFilter]
; [00000006 BYTES: COLLAPSED FUNCTION _amsg_exit]
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_100016E0	proc near		; CODE XREF: __IsNonwritableInCurrentImage+59p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_0]
		xor	edx, edx
		push	ebx
		push	esi
		push	edi
		mov	ecx, [eax+3Ch]
		add	ecx, eax
		movzx	eax, word ptr [ecx+14h]
		movzx	ebx, word ptr [ecx+6]
		add	eax, 18h
		add	eax, ecx
		test	ebx, ebx
		jz	short loc_1000171C
		mov	edi, [ebp+arg_4]

loc_10001704:				; CODE XREF: sub_100016E0+3Aj
		mov	esi, [eax+0Ch]
		cmp	edi, esi
		jb	short loc_10001714
		mov	ecx, [eax+8]
		add	ecx, esi
		cmp	edi, ecx
		jb	short loc_1000171E

loc_10001714:				; CODE XREF: sub_100016E0+29j
		inc	edx
		add	eax, 28h
		cmp	edx, ebx
		jb	short loc_10001704

loc_1000171C:				; CODE XREF: sub_100016E0+1Fj
		xor	eax, eax

loc_1000171E:				; CODE XREF: sub_100016E0+32j
		pop	edi
		pop	esi
		pop	ebx
		pop	ebp
		retn
sub_100016E0	endp

; ---------------------------------------------------------------------------
		align 10h
; [000000BA BYTES: COLLAPSED FUNCTION __IsNonwritableInCurrentImage]
		align 10h
; [00000031 BYTES: COLLAPSED FUNCTION __ValidateImageBase]
; [0000003C BYTES: COLLAPSED FUNCTION ___atonexitinit]

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_1000185D(_onexit_t Func)
sub_1000185D	proc near		; CODE XREF: sub_10001906+6p

var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
Ptr		= dword	ptr -1Ch
ms_exc		= CPPEH_RECORD ptr -18h
Func		= dword	ptr  8

		push	14h
		push	offset stru_10002300
		call	__SEH_prolog4
		and	[ebp+var_24], 0
		push	Ptr		; Ptr
		mov	esi, ds:DecodePointer
		call	esi ; DecodePointer
		mov	[ebp+Ptr], eax
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_1000188F
		push	[ebp+Func]	; Func
		call	ds:_onexit
		pop	ecx
		jmp	short loc_100018F4
; ---------------------------------------------------------------------------

loc_1000188F:				; CODE XREF: sub_1000185D+24j
		push	8
		call	_lock
		pop	ecx
		and	[ebp+ms_exc.registration.TryLevel], 0
		push	Ptr		; Ptr
		call	esi ; DecodePointer
		mov	[ebp+Ptr], eax
		push	dword_10003350	; Ptr
		call	esi ; DecodePointer
		mov	[ebp+var_20], eax
		lea	eax, [ebp+var_20]
		push	eax
		lea	eax, [ebp+Ptr]
		push	eax
		push	[ebp+Func]	; Ptr
		mov	esi, ds:EncodePointer
		call	esi ; EncodePointer
		push	eax
		call	__dllonexit
		add	esp, 0Ch
		mov	edi, eax
		mov	[ebp+var_24], edi
		push	[ebp+Ptr]	; Ptr
		call	esi ; EncodePointer
		mov	Ptr, eax
		push	[ebp+var_20]	; Ptr
		call	esi ; EncodePointer
		mov	dword_10003350,	eax
		mov	[ebp+ms_exc.registration.TryLevel], 0FFFFFFFEh
		call	loc_100018FD
; ---------------------------------------------------------------------------

loc_100018F2:				; CODE XREF: sub_1000185D+A8j
		mov	eax, edi

loc_100018F4:				; CODE XREF: sub_1000185D+30j
		call	__SEH_epilog4
		retn
; ---------------------------------------------------------------------------

loc_100018FA:				; DATA XREF: .rdata:stru_10002300o
		mov	edi, [ebp+var_24] ; Finally handler 0 for function 1000185D

loc_100018FD:				; CODE XREF: sub_1000185D+90j
		push	8
		call	_unlock
		pop	ecx
		retn
sub_1000185D	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_10001906(_onexit_t Func)
sub_10001906	proc near		; CODE XREF: _pre_c_init+36p
					; _pre_c_init+42p

Func		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	[ebp+Func]	; Func
		call	sub_1000185D
		neg	eax
		pop	ecx
		sbb	eax, eax
		neg	eax
		dec	eax
		pop	ebp
		retn
sub_10001906	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_1000191B	proc near		; CODE XREF: DllEntryPoint+9p

PerformanceCount= LARGE_INTEGER	ptr -14h
SystemTimeAsFileTime= _FILETIME	ptr -0Ch
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		sub	esp, 14h
		and	[ebp+SystemTimeAsFileTime.dwLowDateTime], 0
		and	[ebp+SystemTimeAsFileTime.dwHighDateTime], 0
		mov	eax, ___security_cookie
		push	esi
		push	edi
		mov	edi, 0BB40E64Eh
		mov	esi, 0FFFF0000h
		cmp	eax, edi
		jz	short loc_1000194B
		test	esi, eax
		jz	short loc_1000194B
		not	eax
		mov	dword_10003008,	eax
		jmp	short loc_100019B1
; ---------------------------------------------------------------------------

loc_1000194B:				; CODE XREF: sub_1000191B+21j
					; sub_1000191B+25j
		lea	eax, [ebp+SystemTimeAsFileTime]
		push	eax		; lpSystemTimeAsFileTime
		call	ds:GetSystemTimeAsFileTime
		mov	eax, [ebp+SystemTimeAsFileTime.dwHighDateTime]
		xor	eax, [ebp+SystemTimeAsFileTime.dwLowDateTime]
		mov	[ebp+var_4], eax
		call	ds:GetCurrentThreadId
		xor	[ebp+var_4], eax
		call	ds:GetCurrentProcessId
		xor	[ebp+var_4], eax
		lea	eax, [ebp+PerformanceCount]
		push	eax		; lpPerformanceCount
		call	ds:QueryPerformanceCounter
		mov	ecx, dword ptr [ebp+PerformanceCount+4]
		lea	eax, [ebp+var_4]
		xor	ecx, dword ptr [ebp+PerformanceCount]
		xor	ecx, [ebp+var_4]
		xor	ecx, eax
		cmp	ecx, edi
		jnz	short loc_10001993
		mov	ecx, 0BB40E64Fh
		jmp	short loc_100019A3
; ---------------------------------------------------------------------------

loc_10001993:				; CODE XREF: sub_1000191B+6Fj
		test	esi, ecx
		jnz	short loc_100019A3
		mov	eax, ecx
		or	eax, 4711h
		shl	eax, 10h
		or	ecx, eax

loc_100019A3:				; CODE XREF: sub_1000191B+76j
					; sub_1000191B+7Aj
		mov	___security_cookie, ecx
		not	ecx
		mov	dword_10003008,	ecx

loc_100019B1:				; CODE XREF: sub_1000191B+2Ej
		pop	edi
		pop	esi
		mov	esp, ebp
		pop	ebp
		retn
sub_1000191B	endp

; [00000022 BYTES: COLLAPSED FUNCTION DllMain(x,x,x)]

; =============== S U B	R O U T	I N E =======================================


sub_100019D9	proc near		; CODE XREF: _pre_c_init+2Cp
		push	esi
		push	edi
		mov	esi, offset dword_100022A8
		mov	edi, offset dword_100022A8
		jmp	short loc_100019F2
; ---------------------------------------------------------------------------

loc_100019E7:				; CODE XREF: sub_100019D9+1Bj
		mov	eax, [esi]
		test	eax, eax
		jz	short loc_100019EF
		call	eax

loc_100019EF:				; CODE XREF: sub_100019D9+12j
		add	esi, 4

loc_100019F2:				; CODE XREF: sub_100019D9+Cj
		cmp	esi, edi
		jb	short loc_100019E7
		pop	edi
		pop	esi
		retn
sub_100019D9	endp


; =============== S U B	R O U T	I N E =======================================


; int __cdecl Func()
Func		proc near		; DATA XREF: _pre_c_init+31o
		push	esi
		push	edi
		mov	esi, offset dword_100022B0
		mov	edi, offset dword_100022B0
		jmp	short loc_10001A12
; ---------------------------------------------------------------------------

loc_10001A07:				; CODE XREF: Func+1Bj
		mov	eax, [esi]
		test	eax, eax
		jz	short loc_10001A0F
		call	eax

loc_10001A0F:				; CODE XREF: Func+12j
		add	esi, 4

loc_10001A12:				; CODE XREF: Func+Cj
		cmp	esi, edi
		jb	short loc_10001A07
		pop	edi
		pop	esi
		retn
Func		endp

; ---------------------------------------------------------------------------
		align 2
; [00000006 BYTES: COLLAPSED FUNCTION _initterm]
; [00000006 BYTES: COLLAPSED FUNCTION _initterm_e]

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10001A26()
sub_10001A26	proc near		; DATA XREF: _pre_c_init+3Bo
		push	offset dword_10003340
		call	__clean_type_info_names_internal
		pop	ecx
		retn
sub_10001A26	endp

; ---------------------------------------------------------------------------
		align 10h
; [00000045 BYTES: COLLAPSED FUNCTION __SEH_prolog4]
; [00000014 BYTES: COLLAPSED FUNCTION __SEH_epilog4]
; [00000023 BYTES: COLLAPSED FUNCTION __except_handler4]
; [00000006 BYTES: COLLAPSED FUNCTION _crt_debugger_hook]
; [00000006 BYTES: COLLAPSED FUNCTION __crtUnhandledException]
; [00000006 BYTES: COLLAPSED FUNCTION __crtTerminateProcess]
; [00000006 BYTES: COLLAPSED FUNCTION _lock]
; [00000006 BYTES: COLLAPSED FUNCTION _unlock]
; [00000006 BYTES: COLLAPSED FUNCTION __dllonexit]
; [00000006 BYTES: COLLAPSED FUNCTION __clean_type_info_names_internal]
; [00000006 BYTES: COLLAPSED FUNCTION _except_handler4_common]
; [00000006 BYTES: COLLAPSED FUNCTION IsProcessorFeaturePresent]
		align 200h
		dd 100h	dup(?)
_text		ends

; Section 2. (virtual address 00002000)
; Virtual size			: 0000096C (   2412.)
; Section size in file		: 00000A00 (   2560.)
; Offset to raw	data for section: 00001000
; Flags	40300040: Data Readable
; Alignment	: 4 bytes
;
; Imports from KERNEL32.dll
;
; ===========================================================================

; Segment type:	Externs
; _idata
; BOOL __stdcall TerminateProcess(HANDLE hProcess, UINT	uExitCode)
		extrn TerminateProcess:dword
					; CODE XREF: mozalloc_abort(char const * const)+40p
					; DATA XREF: mozalloc_abort(char const * const)+40r ...
; HANDLE __stdcall GetCurrentProcess()
		extrn GetCurrentProcess:dword
					; CODE XREF: mozalloc_abort(char const * const)+39p
					; DATA XREF: mozalloc_abort(char const * const)+39r
; void __stdcall GetSystemTimeAsFileTime(LPFILETIME lpSystemTimeAsFileTime)
		extrn GetSystemTimeAsFileTime:dword ; CODE XREF: sub_1000191B+34p
					; DATA XREF: sub_1000191B+34r
; DWORD	__stdcall GetCurrentThreadId()
		extrn GetCurrentThreadId:dword ; CODE XREF: sub_1000191B+43p
					; DATA XREF: sub_1000191B+43r
; DWORD	__stdcall GetCurrentProcessId()
		extrn GetCurrentProcessId:dword	; CODE XREF: sub_1000191B+4Cp
					; DATA XREF: sub_1000191B+4Cr
; BOOL __stdcall QueryPerformanceCounter(LARGE_INTEGER *lpPerformanceCount)
		extrn QueryPerformanceCounter:dword ; CODE XREF: sub_1000191B+59p
					; DATA XREF: sub_1000191B+59r
; BOOL __stdcall IsProcessorFeaturePresent(DWORD ProcessorFeature)
		extrn __imp_IsProcessorFeaturePresent:dword
					; DATA XREF: IsProcessorFeaturePresentr
; BOOL __stdcall IsDebuggerPresent()
		extrn IsDebuggerPresent:dword ;	CODE XREF: ___raise_securityfailure+3p
					; DATA XREF: ___raise_securityfailure+3r
; PVOID	__stdcall DecodePointer(PVOID Ptr)
		extrn DecodePointer:dword ; CODE XREF: sub_10001249+6Fp
					; sub_10001249+88p ...
; PVOID	__stdcall EncodePointer(PVOID Ptr)
		extrn EncodePointer:dword ; CODE XREF: _pre_c_init+10p
					; sub_10001249+A2p ...
; BOOL __stdcall DisableThreadLibraryCalls(HMODULE hLibModule)
		extrn DisableThreadLibraryCalls:dword ;	CODE XREF: DllMain(x,x,x)+15p
					; DATA XREF: DllMain(x,x,x)+15r

;
; Imports from MSVCR120.dll
;
		extrn __imp___CppXcptFilter:dword ; DATA XREF: __CppXcptFilterr
					; .rdata:10002614o
		extrn __imp__amsg_exit:dword ; DATA XREF: _amsg_exitr
; FILE *__cdecl	_iob_func()
		extrn __iob_func:dword	; CODE XREF: sub_10001000+9p
					; mozalloc_abort(char const * const)p ...
		extrn _malloc_crt:dword	; CODE XREF: _pre_c_init+6p
					; DATA XREF: _pre_c_init+6r
		extrn __imp__initterm:dword ; DATA XREF: _inittermr
		extrn __imp__initterm_e:dword ;	DATA XREF: _initterm_er
; int __cdecl fputs(const char *Str, FILE *File)
		extrn fputs:dword	; CODE XREF: mozalloc_abort(char const * const)+Ep
					; mozalloc_abort(char const * const)+23p
					; DATA XREF: ...
		extrn __imp__crt_debugger_hook:dword ; DATA XREF: _crt_debugger_hookr
		extrn __imp___crtUnhandledException:dword
					; DATA XREF: __crtUnhandledExceptionr
		extrn __imp___crtTerminateProcess:dword	; DATA XREF: __crtTerminateProcessr
		extrn __imp__lock:dword	; DATA XREF: _lockr
		extrn __imp__unlock:dword ; DATA XREF: _unlockr
		extrn _calloc_crt:dword	; CODE XREF: ___atonexitinit+11p
					; DATA XREF: ___atonexitinit+11r
		extrn __imp___dllonexit:dword ;	DATA XREF: __dllonexitr
; _onexit_t __cdecl onexit(_onexit_t Func)
		extrn _onexit:dword	; CODE XREF: sub_1000185D+29p
					; DATA XREF: sub_1000185D+29r
		extrn __imp___clean_type_info_names_internal:dword
					; DATA XREF: __clean_type_info_names_internalr
		extrn __imp__except_handler4_common:dword
					; DATA XREF: _except_handler4_commonr
; int fprintf(FILE *File, const	char *Format, ...)
		extrn fprintf:dword	; CODE XREF: sub_10001000+13p
					; DATA XREF: sub_10001000+13r

;
; Imports from mozglue.dll
;
; void *__cdecl	realloc(void *Memory, size_t NewSize)
		extrn realloc:dword	; CODE XREF: moz_xrealloc+8p
					; DATA XREF: moz_reallocr ...
; void *__cdecl	malloc(size_t Size)
		extrn malloc:dword	; CODE XREF: moz_xmalloc+4p
					; DATA XREF: moz_mallocr ...
; void __cdecl free(void *Memory)
		extrn free:dword	; DATA XREF: moz_freer
; void *__cdecl	calloc(size_t NumOfElements, size_t SizeOfElements)
		extrn calloc:dword	; CODE XREF: moz_xcalloc+9p
					; DATA XREF: moz_callocr ...
		extrn __imp_malloc_usable_size:dword ; DATA XREF: malloc_usable_sizer
		extrn frex:dword	; CODE XREF: sub_10001249+FFp
					; DATA XREF: sub_10001249+FFr
; char *__cdecl	strdup(const char *Src)
		extrn strdup:dword	; CODE XREF: moz_xstrdup+4p
					; DATA XREF: moz_strdupr ...


; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1000209Ch
dword_1000209C	dd 0			; DATA XREF: sub_10001249+1A6o
dword_100020A0	dd 0			; DATA XREF: sub_10001249+1A1o
dword_100020A4	dd 0			; DATA XREF: sub_10001249+187o
		dd offset _pre_c_init
		dd offset ___atonexitinit
dword_100020B0	dd 4 dup(0)		; DATA XREF: sub_10001249:loc_100013CBo
; Debug	Directory entries
		dd 0			; Characteristics
		dd 56F29A21h		; TimeDateStamp: Wed Mar 23 13:29:05 2016
		dw 0			; MajorVersion
		dw 0			; MinorVersion
		dd 2			; Type:	IMAGE_DEBUG_TYPE_CODEVIEW
		dd 79h			; SizeOfData
		dd rva asc_10002208	; AddressOfRawData
		dd 1208h		; PointerToRawData
		dd 0			; Characteristics
		dd 56F29A21h		; TimeDateStamp: Wed Mar 23 13:29:05 2016
		dw 0			; MajorVersion
		dw 0			; MinorVersion
		dd 0Ch			; Type
		dd 14h			; SizeOfData
		dd rva dword_10002284	; AddressOfRawData
		dd 1284h		; PointerToRawData
; char Format[]
Format		db 'fatal: STL threw %s: ',0 ; DATA XREF: sub_10001000+4o
		align 10h
aInvalid_argume	db 'invalid_argument',0 ; DATA XREF: std::moz_Xinvalid_argument(char const *)+4o
		align 4
aLength_error	db 'length_error',0     ; DATA XREF: std::moz_Xlength_error(char const *)+4o
		align 4
aOut_of_range	db 'out_of_range',0     ; DATA XREF: std::moz_Xout_of_range(char const *)+4o
		align 4
aOverflow_error	db 'overflow_error',0   ; DATA XREF: std::moz_Xoverflow_error(char const *)+4o
		align 4
aRuntime_error	db 'runtime_error',0    ; DATA XREF: std::moz_Xruntime_error(char const *)+4o
		align 4
a0123456789abcd	db '0123456789ABCDEF',0 ; DATA XREF: .data:off_10003000o
		align 4
; char Str[2]
Str		db 0Ah,0		; DATA XREF: mozalloc_abort(char const * const)+1Eo
		align 4
aOutOfMemory0x0	db 'out of memory: 0x0000000000000000 bytes requested',0
					; DATA XREF: mozalloc_handle_oom(uint)+1Eo
		align 10h
dword_100021B0	dd 0			; DATA XREF: ___DllMainCRTStartup:loc_100014A1r
					; ___DllMainCRTStartup+A8r ...
off_100021B4	dd offset dword_10003020 ; DATA	XREF: ___report_gsfailure+EDo
		dd offset dword_10003070
		align 10h
__load_config_used dd 48h		; Size
		dd 0			; Time stamp
		dw 2 dup(0)		; Version: 0.0
		dd 0			; GlobalFlagsClear
		dd 0			; GlobalFlagsSet
		dd 0			; CriticalSectionDefaultTimeout
		dd 0			; DeCommitFreeBlockThreshold
		dd 0			; DeCommitTotalFreeThreshold
		dd 0			; LockPrefixTable
		dd 0			; MaximumAllocationSize
		dd 0			; VirtualMemoryThreshold
		dd 0			; ProcessAffinityMask
		dd 0			; ProcessHeapFlags
		dw 0			; CSDVersion
		dw 0			; Reserved1
		dd 0			; EditList
		dd offset ___security_cookie ; SecurityCookie
		dd offset ___safe_se_handler_table ; SEHandlerTable
		dd 1			; SEHandlerCount
; Debug	information (IMAGE_DEBUG_TYPE_CODEVIEW)
asc_10002208	db 'RSDS'               ; DATA XREF: .rdata:100020D4o
					; CV signature
		dd 0BE2A571Bh		; Data1	; GUID
		dw 7BBFh		; Data2
		dw 4F1Eh		; Data3
		db 9Ah,	0DEh, 3Ch, 5Ch,	0BCh, 46h, 7Fh,	16h; Data4
		dd 1			; Age
		db 'c:\builds\moz2_slave\tb-rel-c-esr38-w32_bld-0000000\build\objdir-' ; PdbFileName
		db 'tb\memory\mozalloc\mozalloc.pdb',0
		align 4
; Debug	information (type 12)
dword_10002284	dd 0			; DATA XREF: .rdata:100020F0o
		dd 2 dup(12h), 4 dup(0)
___safe_se_handler_table dd rva	__except_handler4 ; DATA XREF: .rdata:10002200o
		align 8
dword_100022A8	dd 2 dup(0)		; DATA XREF: sub_100019D9+2o
					; sub_100019D9+7o
dword_100022B0	dd 2 dup(0)		; DATA XREF: Func+2o Func+7o
stru_100022B8	dd 0FFFFFFFEh		; GSCookieOffset
					; DATA XREF: ___DllMainCRTStartup+2o
		dd 0			; GSCookieXOROffset ; SEH scope	table for function 10001463
		dd 0FFFFFFD0h		; EHCookieOffset
		dd 0			; EHCookieXOROffset
		dd 0FFFFFFFEh		; ScopeRecord.EnclosingLevel
		dd 0			; ScopeRecord.FilterFunc
		dd offset $LN18		; ScopeRecord.HandlerFunc
		dd 0			; ScopeRecord.EnclosingLevel
		dd offset $LN22		; ScopeRecord.FilterFunc
		dd offset $LN23		; ScopeRecord.HandlerFunc
stru_100022E0	dd 0FFFFFFFEh		; GSCookieOffset
					; DATA XREF: __IsNonwritableInCurrentImage+5o
		dd 0			; GSCookieXOROffset ; SEH scope	table for function 10001730
		dd 0FFFFFFD8h		; EHCookieOffset
		dd 0			; EHCookieXOROffset
		dd 0FFFFFFFEh		; ScopeRecord.EnclosingLevel
		dd offset loc_100017B9	; ScopeRecord.FilterFunc
		dd offset loc_100017CC	; ScopeRecord.HandlerFunc
		align 10h
stru_10002300	dd 0FFFFFFFEh		; GSCookieOffset ; DATA	XREF: sub_1000185D+2o
		dd 0			; GSCookieXOROffset ; SEH scope	table for function 1000185D
		dd 0FFFFFFCCh		; EHCookieOffset
		dd 0			; EHCookieXOROffset
		dd 0FFFFFFFEh		; ScopeRecord.EnclosingLevel
		dd 0			; ScopeRecord.FilterFunc
		dd offset loc_100018FA	; ScopeRecord.HandlerFunc
		align 10h
;
; Export directory for mozalloc.dll
;
		dd 0			; Characteristics
		dd 56F29A21h		; TimeDateStamp: Wed Mar 23 13:29:05 2016
		dw 0			; MajorVersion
		dw 0			; MinorVersion
		dd rva aMozalloc_dll	; Name
		dd 1			; Base
		dd 14h			; NumberOfFunctions
		dd 14h			; NumberOfNames
		dd rva off_10002348	; AddressOfFunctions
		dd rva off_10002398	; AddressOfNames
		dd rva word_100023E8	; AddressOfNameOrdinals
;
; Export Address Table for mozalloc.dll
;
off_10002348	dd rva ?moz_Xinvalid_argument@std@@YAXPBD@Z, rva ?moz_Xlength_error@std@@YAXPBD@Z
					; DATA XREF: .rdata:1000233Co
		dd rva ?moz_Xout_of_range@std@@YAXPBD@Z, rva ?moz_Xoverflow_error@std@@YAXPBD@Z	; std::moz_Xinvalid_argument(char const	*)
		dd rva ?moz_Xruntime_error@std@@YAXPBD@Z, rva ?mozalloc_abort@@YAXQBD@Z
		dd rva ?mozalloc_handle_oom@@YAXI@Z, rva ?mozalloc_set_oom_abort_handler@@YAXP6AXI@Z@Z
		dd rva ?mozilla_Throw@std@@YAXABVexception@stdext@@@Z
		dd rva moz_calloc, rva moz_free, rva moz_malloc, 2 dup(rva moz_malloc_size_of)
		dd rva moz_realloc, rva	moz_strdup, rva	moz_xcalloc, rva moz_xmalloc
		dd rva moz_xrealloc, rva moz_xstrdup
;
; Export Names Table for mozalloc.dll
;
off_10002398	dd rva a?moz_xinvalid_,	rva a?moz_xlength_e, rva a?moz_xout_of_r
					; DATA XREF: .rdata:10002340o
		dd rva a?moz_xoverflow,	rva a?moz_xruntime_, rva a?mozalloc_abor ; "?moz_Xinvalid_argument@std@@YAXPBD@Z"
		dd rva a?mozalloc_hand,	rva a?mozalloc_set_, rva a?mozilla_throw
		dd rva aMoz_calloc, rva	aMoz_free, rva aMoz_malloc, rva	aMoz_malloc_siz
		dd rva aMoz_malloc_usa,	rva aMoz_realloc, rva aMoz_strdup
		dd rva aMoz_xcalloc, rva aMoz_xmalloc, rva aMoz_xrealloc
		dd rva aMoz_xstrdup
;
; Export Ordinals Table	for mozalloc.dll
;
word_100023E8	dw 0, 1, 2, 3, 4, 5, 6,	7, 8, 9, 0Ah, 0Bh, 0Ch,	0Dh, 0Eh
					; DATA XREF: .rdata:10002344o
		dw 0Fh,	10h, 11h, 12h, 13h
aMozalloc_dll	db 'mozalloc.dll',0     ; DATA XREF: .rdata:1000232Co
a?moz_xinvalid_	db '?moz_Xinvalid_argument@std@@YAXPBD@Z',0
					; DATA XREF: .rdata:off_10002398o
a?moz_xlength_e	db '?moz_Xlength_error@std@@YAXPBD@Z',0 ; DATA XREF: .rdata:off_10002398o
a?moz_xout_of_r	db '?moz_Xout_of_range@std@@YAXPBD@Z',0 ; DATA XREF: .rdata:off_10002398o
a?moz_xoverflow	db '?moz_Xoverflow_error@std@@YAXPBD@Z',0 ; DATA XREF: .rdata:off_10002398o
a?moz_xruntime_	db '?moz_Xruntime_error@std@@YAXPBD@Z',0 ; DATA XREF: .rdata:off_10002398o
a?mozalloc_abor	db '?mozalloc_abort@@YAXQBD@Z',0 ; DATA XREF: .rdata:off_10002398o
a?mozalloc_hand	db '?mozalloc_handle_oom@@YAXI@Z',0 ; DATA XREF: .rdata:off_10002398o
a?mozalloc_set_	db '?mozalloc_set_oom_abort_handler@@YAXP6AXI@Z@Z',0
					; DATA XREF: .rdata:off_10002398o
a?mozilla_throw	db '?mozilla_Throw@std@@YAXABVexception@stdext@@@Z',0
					; DATA XREF: .rdata:off_10002398o
aMoz_calloc	db 'moz_calloc',0       ; DATA XREF: .rdata:off_10002398o
aMoz_free	db 'moz_free',0         ; DATA XREF: .rdata:off_10002398o
aMoz_malloc	db 'moz_malloc',0       ; DATA XREF: .rdata:off_10002398o
aMoz_malloc_siz	db 'moz_malloc_size_of',0 ; DATA XREF: .rdata:off_10002398o
aMoz_malloc_usa	db 'moz_malloc_usable_size',0 ; DATA XREF: .rdata:off_10002398o
aMoz_realloc	db 'moz_realloc',0      ; DATA XREF: .rdata:off_10002398o
aMoz_strdup	db 'moz_strdup',0       ; DATA XREF: .rdata:off_10002398o
aMoz_xcalloc	db 'moz_xcalloc',0      ; DATA XREF: .rdata:off_10002398o
aMoz_xmalloc	db 'moz_xmalloc',0      ; DATA XREF: .rdata:off_10002398o
aMoz_xrealloc	db 'moz_xrealloc',0     ; DATA XREF: .rdata:off_10002398o
aMoz_xstrdup	db 'moz_xstrdup',0      ; DATA XREF: .rdata:off_10002398o
		align 10h
__IMPORT_DESCRIPTOR_KERNEL32 dd	rva off_10002640 ; Import Name Table
		dd 0			; Time stamp
		dd 0			; Forwarder Chain
		dd rva aKernel32_dll	; DLL Name
		dd rva TerminateProcess	; Import Address Table
__IMPORT_DESCRIPTOR_MSVCR120 dd	rva off_10002670 ; Import Name Table
		dd 0			; Time stamp
		dd 0			; Forwarder Chain
		dd rva aMsvcr120_dll	; DLL Name
		dd rva __imp___CppXcptFilter ; Import Address Table
__IMPORT_DESCRIPTOR_mozglue dd rva off_100026BC	; Import Name Table
		dd 0			; Time stamp
		dd 0			; Forwarder Chain
		dd rva aMozglue_dll	; DLL Name
		dd rva realloc		; Import Address Table
		align 20h
;
; Import names for KERNEL32.dll
;
off_10002640	dd rva word_100026DC	; DATA XREF: .rdata:__IMPORT_DESCRIPTOR_KERNEL32o
		dd rva word_100026F0
		dd rva word_10002936
		dd rva word_10002920
		dd rva word_1000290A
		dd rva word_100028F0
		dd rva word_100028D4
		dd rva word_100028C0
		dd rva word_100028B0
		dd rva word_100028A0
		dd rva word_10002950
		dd 0
;
; Import names for MSVCR120.dll
;
off_10002670	dd rva word_10002792	; DATA XREF: .rdata:__IMPORT_DESCRIPTOR_MSVCR120o
		dd rva word_100027A4
		dd rva word_10002712
		dd rva word_100027BA
		dd rva word_100027C8
		dd rva word_100027D4
		dd rva word_10002770
		dd rva word_100027E2
		dd rva word_100027F8
		dd rva word_10002812
		dd rva word_1000282A
		dd rva word_10002832
		dd rva word_1000283C
		dd rva word_1000284A
		dd rva word_10002858
		dd rva word_10002862
		dd rva word_10002886
		dd rva word_10002720
		dd 0
;
; Import names for mozglue.dll
;
off_100026BC	dd rva word_10002746	; DATA XREF: .rdata:__IMPORT_DESCRIPTOR_mozglueo
		dd rva word_1000273C
		dd rva word_10002734
		dd rva word_1000272A
		dd rva word_1000275A
		dd rva word_100027B2
		dd rva word_10002750
		dd 0
word_100026DC	dw 55Fh			; DATA XREF: .rdata:off_10002640o
		db 'TerminateProcess',0
		align 10h
word_100026F0	dw 209h			; DATA XREF: .rdata:10002644o
		db 'GetCurrentProcess',0
aKernel32_dll	db 'KERNEL32.dll',0     ; DATA XREF: .rdata:100025FCo
		align 2
word_10002712	dw 1B8h			; DATA XREF: .rdata:10002678o
		db '__iob_func',0
		align 10h
word_10002720	dw 67Bh			; DATA XREF: .rdata:100026B4o
		db 'fprintf',0
word_1000272A	dw 4Dh			; DATA XREF: .rdata:100026C8o
		db 'calloc',0
		align 4
word_10002734	dw 4Eh			; DATA XREF: .rdata:100026C4o
		db 'free',0
		align 4
word_1000273C	dw 56h			; DATA XREF: .rdata:100026C0o
		db 'malloc',0
		align 2
word_10002746	dw 5Bh			; DATA XREF: .rdata:off_100026BCo
		db 'realloc',0
word_10002750	dw 5Ch			; DATA XREF: .rdata:100026D4o
		db 'strdup',0
		align 2
word_1000275A	dw 58h			; DATA XREF: .rdata:100026CCo
		db 'malloc_usable_size',0
		align 10h
word_10002770	dw 67Eh			; DATA XREF: .rdata:10002688o
		db 'fputs',0
aMsvcr120_dll	db 'MSVCR120.dll',0     ; DATA XREF: .rdata:10002610o
		align 2
aMozglue_dll	db 'mozglue.dll',0      ; DATA XREF: .rdata:10002624o
word_10002792	dw 16Fh			; DATA XREF: .rdata:off_10002670o
		db '__CppXcptFilter',0
word_100027A4	dw 217h			; DATA XREF: .rdata:10002674o
		db '_amsg_exit',0
		align 2
word_100027B2	dw 4Fh			; DATA XREF: .rdata:100026D0o
		db 'frex',0
		align 2
word_100027BA	dw 3A5h			; DATA XREF: .rdata:1000267Co
		db '_malloc_crt',0
word_100027C8	dw 30Ch			; DATA XREF: .rdata:10002680o
		db '_initterm',0
word_100027D4	dw 30Dh			; DATA XREF: .rdata:10002684o
		db '_initterm_e',0
word_100027E2	dw 250h			; DATA XREF: .rdata:1000268Co
		db '_crt_debugger_hook',0
		align 4
word_100027F8	dw 1ACh			; DATA XREF: .rdata:10002690o
		db '__crtUnhandledException',0
word_10002812	dw 1ABh			; DATA XREF: .rdata:10002694o
		db '__crtTerminateProcess',0
word_1000282A	dw 394h			; DATA XREF: .rdata:10002698o
		db '_lock',0
word_10002832	dw 504h			; DATA XREF: .rdata:1000269Co
		db '_unlock',0
word_1000283C	dw 22Eh			; DATA XREF: .rdata:100026A0o
		db '_calloc_crt',0
word_1000284A	dw 1AEh			; DATA XREF: .rdata:100026A4o
		db '__dllonexit',0
word_10002858	dw 43Ah			; DATA XREF: .rdata:100026A8o
		db '_onexit',0
word_10002862	dw 18Ch			; DATA XREF: .rdata:100026ACo
		db '__clean_type_info_names_internal',0
		align 2
word_10002886	dw 27Ah			; DATA XREF: .rdata:100026B0o
		db '_except_handler4_common',0
word_100028A0	dw 121h			; DATA XREF: .rdata:10002664o
		db 'EncodePointer',0
word_100028B0	dw 0FEh			; DATA XREF: .rdata:10002660o
		db 'DecodePointer',0
word_100028C0	dw 367h			; DATA XREF: .rdata:1000265Co
		db 'IsDebuggerPresent',0
word_100028D4	dw 36Dh			; DATA XREF: .rdata:10002658o
		db 'IsProcessorFeaturePresent',0
word_100028F0	dw 42Dh			; DATA XREF: .rdata:10002654o
		db 'QueryPerformanceCounter',0
word_1000290A	dw 20Ah			; DATA XREF: .rdata:10002650o
		db 'GetCurrentProcessId',0
word_10002920	dw 20Eh			; DATA XREF: .rdata:1000264Co
		db 'GetCurrentThreadId',0
		align 2
word_10002936	dw 2D6h			; DATA XREF: .rdata:10002648o
		db 'GetSystemTimeAsFileTime',0
word_10002950	dw 113h			; DATA XREF: .rdata:10002668o
		db 'DisableThreadLibraryCalls',0
		align 800h
_rdata		ends

; Section 3. (virtual address 00003000)
; Virtual size			: 0000035C (	860.)
; Section size in file		: 00000200 (	512.)
; Offset to raw	data for section: 00001A00
; Flags	C0300040: Data Readable	Writable
; Alignment	: 4 bytes
; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
		;org 10003000h
off_10003000	dd offset a0123456789abcd ; DATA XREF: mozalloc_handle_oom(uint)+39r
					; "0123456789ABCDEF"
___security_cookie dd 0BB40E64Eh	; DATA XREF: mozalloc_handle_oom(uint)+6r
					; __security_check_cookie(x)r ...
dword_10003008	dd 44BF19B1h		; DATA XREF: ___report_gsfailure+E3r
					; sub_1000191B+29w ...
		align 10h
dword_10003010	dd 0FFFFFFFFh		; DATA XREF: ___DllMainCRTStartup+1Cw
					; ___DllMainCRTStartup:$LN20w
		align 8
dword_10003018	dd 0			; DATA XREF: mozalloc_handle_oom(uint)+13r
					; mozalloc_set_oom_abort_handler(void (*)(uint))+4w
dword_1000301C	dd 0			; DATA XREF: sub_10001249+12r
					; sub_10001249+25w ...
dword_10003020	dd 0			; DATA XREF: ___report_gsfailure+9Fw
					; .rdata:off_100021B4o
dword_10003024	dd 0			; DATA XREF: ___report_gsfailure+A9w
		dd 0
dword_1000302C	dd 0			; DATA XREF: ___report_gsfailure+9Aw
dword_10003030	dd 0			; DATA XREF: ___report_gsfailure+B3w
dword_10003034	dd 0			; DATA XREF: ___report_gsfailure+C3w
		dd 0Eh dup(0)
dword_10003070	dd 0			; DATA XREF: ___report_gsfailure+8Bw
					; .rdata:100021B8o
		dd 22h dup(0)
word_100030FC	dw 0			; DATA XREF: ___report_gsfailure+5Fw
		align 10h
word_10003100	dw 0			; DATA XREF: ___report_gsfailure+58w
		align 4
word_10003104	dw 0			; DATA XREF: ___report_gsfailure+51w
		align 4
word_10003108	dw 0			; DATA XREF: ___report_gsfailure+4Aw
		align 4
dword_1000310C	dd 0			; DATA XREF: ___report_gsfailure+36w
dword_10003110	dd 0			; DATA XREF: ___report_gsfailure+30w
dword_10003114	dd 0			; DATA XREF: ___report_gsfailure+2Aw
dword_10003118	dd 0			; DATA XREF: ___report_gsfailure+24w
dword_1000311C	dd 0			; DATA XREF: ___report_gsfailure+1Ew
dword_10003120	dd 0			; DATA XREF: ___report_gsfailure:loc_100015ECw
dword_10003124	dd 0			; DATA XREF: ___report_gsfailure+70w
dword_10003128	dd 0			; DATA XREF: ___report_gsfailure+78w
					; ___report_gsfailure+95r
word_1000312C	dw 0			; DATA XREF: ___report_gsfailure+43w
		align 10h
dword_10003130	dd 0			; DATA XREF: ___report_gsfailure+67w
dword_10003134	dd 0			; DATA XREF: ___report_gsfailure+80w
word_10003138	dw 0			; DATA XREF: ___report_gsfailure+3Cw
		align 4
		dd 31h dup(0)
		dd 4Fh dup(?)
dword_1000333C	dd ?			; DATA XREF: ___raise_securityfailure+Bw
					; ___raise_securityfailure+1Dr
dword_10003340	dd 2 dup(?)		; DATA XREF: sub_10001A26o
dword_10003348	dd ?			; DATA XREF: sub_10001249+20o
					; sub_10001249+112o ...
dword_1000334C	dd ?			; DATA XREF: sub_10001249:loc_1000129Cr
					; sub_10001249:loc_10001365w ...
; PVOID	dword_10003350
dword_10003350	dd ?			; DATA XREF: _pre_c_init+1Bw
					; sub_10001249+82r ...
; PVOID	Ptr
Ptr		dd ?			; DATA XREF: _pre_c_init+16w
					; sub_10001249:loc_100012B2r ...
dword_10003358	dd ?			; DATA XREF: sub_10001249:loc_10001409r
					; sub_10001249+1C9o ...
		align 1000h
_data		ends


		end DllEntryPoint
