;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	54EBCBD789E5C9C75D3D61DEFD153312
; Input	CRC32 :	57A77404

; File Name   :	C:\compspace\compare\thunderbird\dlls\full\nsldif32v60_full.dll
; Format      :	Portable executable for	80386 (PE)
; Imagebase   :	10000000
; Section 1. (virtual address 00001000)
; Virtual size			: 000012E0 (   4832.)
; Section size in file		: 00001400 (   5120.)
; Offset to raw	data for section: 00000400
; Flags	60300020: Text Executable Readable
; Alignment	: 4 bytes
; Exported entry 3009. ldif_base64_decode
; PDB File Name	: c:\builds\moz2_slave\tb-rel-c-esr38-w32_bld-0000000\build\objdir-tb\ldap\sdks\c-sdk\ldap\libraries\libldif\nsldif32v60.pdb
; OS type	  :  MS	Windows
; Application type:  DLL 32bit

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	dword public 'CODE' use32
		assume cs:_text
		;org 10001000h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int __cdecl ldif_base64_decode(char *Str, int)
		public ldif_base64_decode
ldif_base64_decode proc	near		; CODE XREF: ldif_parse_line+BFp
					; DATA XREF: .rdata:off_10003288o

Str		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebx
		push	ebp
		push	esi
		mov	esi, [esp+0Ch+Str]
		push	edi
		push	0		; Val
		push	esi		; Str
		call	ds:strchr
		mov	edx, [esp+18h+arg_4]
		mov	ebp, eax
		add	esp, 8
		xor	edi, edi
		cmp	esi, ebp
		jnb	loc_100010DF

loc_10001024:				; CODE XREF: ldif_base64_decode+BFj
		xor	ecx, ecx

loc_10001026:				; CODE XREF: ldif_base64_decode+4Cj
		mov	al, [ecx+esi]
		cmp	al, 3Dh
		jz	short loc_10001048
		test	al, al
		js	loc_100010CC
		movsx	eax, al
		and	eax, 7Fh
		cmp	byte_10004410[eax], 3Fh
		ja	loc_100010CC

loc_10001048:				; CODE XREF: ldif_base64_decode+2Bj
		inc	ecx
		cmp	ecx, 4
		jl	short loc_10001026
		movsx	eax, byte ptr [esi]
		and	eax, 7Fh
		mov	cl, byte_10004410[eax]
		shl	cl, 2
		mov	[edx], cl
		movsx	eax, byte ptr [esi+1]
		and	eax, 7Fh
		mov	bl, byte_10004410[eax]
		mov	al, bl
		shr	al, 4
		or	al, cl
		mov	[edx], al
		cmp	byte ptr [esi+2], 3Dh
		jz	short loc_100010DE
		shl	bl, 4
		mov	[edx+1], bl
		movsx	eax, byte ptr [esi+2]
		and	eax, 7Fh
		mov	cl, byte_10004410[eax]
		mov	al, cl
		shr	al, 2
		or	[edx+1], al
		cmp	byte ptr [esi+3], 3Dh
		jz	short loc_100010D4
		shl	cl, 6
		add	edi, 3
		mov	[edx+2], cl
		movsx	eax, byte ptr [esi+3]
		add	esi, 4
		and	eax, 7Fh
		mov	al, byte_10004410[eax]
		or	al, cl
		mov	[edx+2], al
		add	edx, 3
		cmp	esi, ebp
		jb	loc_10001024
		mov	eax, edi
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_100010CC:				; CODE XREF: ldif_base64_decode+2Fj
					; ldif_base64_decode+42j
		pop	edi
		pop	esi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_100010D4:				; CODE XREF: ldif_base64_decode+9Aj
		add	edi, 2
		mov	eax, edi
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_100010DE:				; CODE XREF: ldif_base64_decode+79j
		inc	edi

loc_100010DF:				; CODE XREF: ldif_base64_decode+1Ej
		mov	eax, edi
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
ldif_base64_decode endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 3010. ldif_base64_encode

; =============== S U B	R O U T	I N E =======================================


		public ldif_base64_encode
ldif_base64_encode proc	near		; DATA XREF: .rdata:off_10003288o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	4Ch
		push	[esp+4+arg_C]
		push	[esp+8+arg_8]
		push	[esp+0Ch+arg_4]
		push	[esp+10h+arg_0]
		call	sub_10001110
		add	esp, 14h
		retn
ldif_base64_encode endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10001110	proc near		; CODE XREF: ldif_base64_encode+12p
					; ldif_base64_encode_nowrap+12p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		mov	eax, [esp+arg_4]
		mov	edx, [esp+arg_C]
		push	ebx
		mov	ebx, [esp+4+arg_10]
		push	ebp
		mov	ebp, [esp+8+arg_8]
		push	esi
		push	edi
		mov	edi, [esp+10h+arg_0]
		add	ebp, edi
		mov	[esp+10h+arg_8], ebp
		lea	ecx, [ebp-2]
		cmp	edi, ecx
		jnb	loc_10001223
		mov	ebp, ecx
		jmp	short loc_10001140
; ---------------------------------------------------------------------------
		align 10h

loc_10001140:				; CODE XREF: sub_10001110+2Bj
					; sub_10001110+109j
		movzx	ecx, byte ptr [edi]
		movzx	esi, byte ptr [edi+1]
		shl	ecx, 8
		or	esi, ecx
		movzx	ecx, byte ptr [edi+2]
		shl	esi, 8
		or	esi, ecx
		cmp	ebx, 0FFFFFFFFh
		jz	short loc_10001172
		test	edx, edx
		js	short loc_10001172
		mov	ecx, edx
		inc	edx
		cmp	ecx, ebx
		jle	short loc_10001172
		mov	word ptr [eax],	200Ah
		mov	edx, 2
		add	eax, 2

loc_10001172:				; CODE XREF: sub_10001110+48j
					; sub_10001110+4Cj ...
		mov	ecx, esi
		shl	esi, 6
		shr	ecx, 12h
		and	ecx, 3Fh
		mov	cl, byte_10004000[ecx]
		mov	[eax], cl
		inc	eax
		cmp	ebx, 0FFFFFFFFh
		jz	short loc_100011A3
		test	edx, edx
		js	short loc_100011A3
		mov	ecx, edx
		inc	edx
		cmp	ecx, ebx
		jle	short loc_100011A3
		mov	word ptr [eax],	200Ah
		mov	edx, 2
		add	eax, 2

loc_100011A3:				; CODE XREF: sub_10001110+79j
					; sub_10001110+7Dj ...
		mov	ecx, esi
		shl	esi, 6
		shr	ecx, 12h
		and	ecx, 3Fh
		mov	cl, byte_10004000[ecx]
		mov	[eax], cl
		inc	eax
		cmp	ebx, 0FFFFFFFFh
		jz	short loc_100011D4
		test	edx, edx
		js	short loc_100011D4
		mov	ecx, edx
		inc	edx
		cmp	ecx, ebx
		jle	short loc_100011D4
		mov	word ptr [eax],	200Ah
		mov	edx, 2
		add	eax, 2

loc_100011D4:				; CODE XREF: sub_10001110+AAj
					; sub_10001110+AEj ...
		mov	ecx, esi
		shl	esi, 6
		shr	ecx, 12h
		and	ecx, 3Fh
		mov	cl, byte_10004000[ecx]
		mov	[eax], cl
		inc	eax
		cmp	ebx, 0FFFFFFFFh
		jz	short loc_10001205
		test	edx, edx
		js	short loc_10001205
		mov	ecx, edx
		inc	edx
		cmp	ecx, ebx
		jle	short loc_10001205
		mov	word ptr [eax],	200Ah
		mov	edx, 2
		add	eax, 2

loc_10001205:				; CODE XREF: sub_10001110+DBj
					; sub_10001110+DFj ...
		shr	esi, 12h
		add	edi, 3
		and	esi, 3Fh
		mov	cl, byte_10004000[esi]
		mov	[eax], cl
		inc	eax
		cmp	edi, ebp
		jb	loc_10001140
		mov	ebp, [esp+10h+arg_8]

loc_10001223:				; CODE XREF: sub_10001110+23j
		cmp	edi, ebp
		jnb	loc_100012C0
		mov	ebx, [esp+10h+arg_8]
		lea	ebp, [esp+10h+arg_0]
		xor	esi, esi
		sub	ebp, edi

loc_10001237:				; CODE XREF: sub_10001110+130j
		mov	cl, [edi]
		inc	esi
		mov	[edi+ebp], cl
		inc	edi
		cmp	edi, ebx
		jb	short loc_10001237
		mov	ebx, [esp+10h+arg_10]
		xor	edi, edi
		cmp	esi, 3
		jge	short loc_1000125F

loc_1000124D:				; CODE XREF: sub_10001110+14Dj
		jnb	loc_100012DA
		mov	byte ptr [esp+esi+10h+arg_0], 0
		inc	edi
		inc	esi
		cmp	esi, 3
		jl	short loc_1000124D

loc_1000125F:				; CODE XREF: sub_10001110+13Bj
		movzx	ebp, byte ptr [esp+10h+arg_0]
		movzx	ecx, byte ptr [esp+10h+arg_0+1]
		shl	ebp, 8
		or	ebp, ecx
		movzx	ecx, byte ptr [esp+10h+arg_0+2]
		shl	ebp, 8
		or	ebp, ecx
		xor	esi, esi
		lea	ebx, [ebx+0]

loc_10001280:				; CODE XREF: sub_10001110+1AEj
		cmp	ebx, 0FFFFFFFFh
		jz	short loc_1000129D
		test	edx, edx
		js	short loc_1000129D
		mov	ecx, edx
		inc	edx
		cmp	ecx, ebx
		jle	short loc_1000129D
		mov	word ptr [eax],	200Ah
		mov	edx, 2
		add	eax, 2

loc_1000129D:				; CODE XREF: sub_10001110+173j
					; sub_10001110+177j ...
		cmp	esi, 3
		jnz	short loc_100012CC
		test	edi, edi
		jg	short loc_100012D5

loc_100012A6:				; CODE XREF: sub_10001110+1BFj
					; sub_10001110+1C3j
		mov	ecx, ebp
		shr	ecx, 12h
		and	ecx, 3Fh
		mov	cl, byte_10004000[ecx]
		mov	[eax], cl

loc_100012B6:				; CODE XREF: sub_10001110+1C8j
		inc	esi
		shl	ebp, 6
		inc	eax
		cmp	esi, 4
		jl	short loc_10001280

loc_100012C0:				; CODE XREF: sub_10001110+115j
		pop	edi
		pop	esi
		pop	ebp
		mov	byte ptr [eax],	0
		sub	eax, [esp+4+arg_4]
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_100012CC:				; CODE XREF: sub_10001110+190j
		cmp	esi, 2
		jnz	short loc_100012A6
		cmp	edi, esi
		jnz	short loc_100012A6

loc_100012D5:				; CODE XREF: sub_10001110+194j
		mov	byte ptr [eax],	3Dh
		jmp	short loc_100012B6
; ---------------------------------------------------------------------------

loc_100012DA:				; CODE XREF: sub_10001110:loc_1000124Dj
		call	___report_rangecheckfailure
		int	3		; Trap to Debugger
sub_10001110	endp

; Exported entry 3011. ldif_base64_encode_nowrap

; =============== S U B	R O U T	I N E =======================================


		public ldif_base64_encode_nowrap
ldif_base64_encode_nowrap proc near	; DATA XREF: .rdata:off_10003288o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	0FFFFFFFFh
		push	[esp+4+arg_C]
		push	[esp+8+arg_8]
		push	[esp+0Ch+arg_4]
		push	[esp+10h+arg_0]
		call	sub_10001110
		add	esp, 14h
		retn
ldif_base64_encode_nowrap endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 3012. ldif_get_entry

		public ldif_get_entry
ldif_get_entry:				; DATA XREF: .rdata:off_10003288o
		sub	esp, 218h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+214h], eax
		mov	eax, [esp+21Ch]
		push	ebx
		push	ebp
		mov	ebp, [esp+228h]
		xor	ebx, ebx
		push	esi
		push	edi
		push	eax
		mov	[esp+20h], eax
		xor	esi, esi
		lea	eax, [esp+28h]
		mov	[esp+18h], ebp
		push	200h
		push	eax
		mov	[esp+1Ch], ebx
		xor	edi, edi
		call	ds:fgets
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_1000138D

loc_10001350:				; CODE XREF: .text:1000138Bj
		test	ebp, ebp
		jz	short loc_10001357
		inc	dword ptr [ebp+0]

loc_10001357:				; CODE XREF: .text:10001352j
		mov	al, [esp+24h]
		test	al, al
		jz	short loc_1000136E
		cmp	al, 0Ah
		jz	short loc_1000136E
		cmp	al, 0Dh
		jnz	short loc_100013A8
		cmp	byte ptr [esp+25h], 0Ah
		jnz	short loc_100013AC

loc_1000136E:				; CODE XREF: .text:1000135Dj
					; .text:10001361j
		test	esi, esi
		jnz	short loc_1000138D

loc_10001372:				; CODE XREF: .text:100013AAj
					; .text:10001464j
		push	dword ptr [esp+1Ch]
		lea	eax, [esp+28h]
		push	200h
		push	eax
		call	ds:fgets
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_10001350

loc_1000138D:				; CODE XREF: .text:1000134Ej
					; .text:10001370j
		mov	eax, ebx

loc_1000138F:				; CODE XREF: .text:1000146Bj
		mov	ecx, [esp+224h]
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 218h
		retn
; ---------------------------------------------------------------------------

loc_100013A8:				; CODE XREF: .text:10001365j
		cmp	al, 23h
		jz	short loc_10001372

loc_100013AC:				; CODE XREF: .text:1000136Cj
		lea	esi, [esp+24h]
		mov	dword ptr [esp+18h], 1
		lea	ecx, [esi+1]
		jmp	short loc_100013C0
; ---------------------------------------------------------------------------
		align 10h

loc_100013C0:				; CODE XREF: .text:100013BBj
					; .text:100013C5j
		mov	al, [esi]
		inc	esi
		test	al, al
		jnz	short loc_100013C0
		sub	esi, ecx
		test	esi, esi
		jle	short loc_100013D7
		cmp	byte ptr [esp+esi+23h],	0Dh
		jnz	short loc_100013D7
		dec	esi
		jmp	short loc_100013F3
; ---------------------------------------------------------------------------

loc_100013D7:				; CODE XREF: .text:100013CBj
					; .text:100013D2j
		cmp	esi, 1
		jle	short loc_10001400
		cmp	byte ptr [esp+esi+22h],	0Dh
		jnz	short loc_10001400
		cmp	byte ptr [esp+esi+23h],	0Ah
		jnz	short loc_10001400
		mov	al, [esp+esi+23h]
		dec	esi
		mov	[esp+esi+23h], al

loc_100013F3:				; CODE XREF: .text:100013D5j
		cmp	esi, 200h
		jnb	short loc_10001470
		mov	byte ptr [esp+esi+24h],	0

loc_10001400:				; CODE XREF: .text:100013DAj
					; .text:100013E1j ...
		mov	eax, [esp+10h]
		add	eax, esi
		mov	[esp+20h], eax
		lea	ebp, [eax+1]
		cmp	ebp, edi
		jle	short loc_1000143E

loc_10001411:				; CODE XREF: .text:1000143Cj
		test	ebx, ebx
		jnz	short loc_10001427
		add	edi, 200h
		push	edi
		call	ds:malloc
		add	esp, 4
		jmp	short loc_10001434
; ---------------------------------------------------------------------------

loc_10001427:				; CODE XREF: .text:10001413j
		add	edi, edi
		push	edi
		push	ebx
		call	ds:realloc
		add	esp, 8

loc_10001434:				; CODE XREF: .text:10001425j
		mov	ebx, eax
		test	ebx, ebx
		jz	short loc_10001469
		cmp	ebp, edi
		jg	short loc_10001411

loc_1000143E:				; CODE XREF: .text:1000140Fj
		inc	esi
		lea	eax, [esp+24h]
		push	esi
		push	eax
		mov	eax, [esp+18h]
		add	eax, ebx
		push	eax
		call	memcpy
		mov	eax, [esp+2Ch]
		add	esp, 0Ch
		mov	ebp, [esp+14h]
		mov	esi, [esp+18h]
		mov	[esp+10h], eax
		jmp	loc_10001372
; ---------------------------------------------------------------------------

loc_10001469:				; CODE XREF: .text:10001438j
		xor	eax, eax
		jmp	loc_1000138F
; ---------------------------------------------------------------------------

loc_10001470:				; CODE XREF: .text:100013F9j
		call	___report_rangecheckfailure
; ---------------------------------------------------------------------------
		db 0Bh dup(0CCh)
; Exported entry 3002. ldif_getline

; =============== S U B	R O U T	I N E =======================================


		public ldif_getline
ldif_getline	proc near		; DATA XREF: .rdata:off_10003288o

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		mov	eax, [esi]
		test	eax, eax
		jz	loc_10001534
		mov	al, [eax]
		cmp	al, 0Ah
		jz	loc_10001534
		test	al, al
		jz	loc_10001534
		push	edi
		mov	edi, ds:strchr
		cmp	al, 23h
		jnz	short loc_100014C7
		lea	esp, [esp+0]

loc_100014B0:				; CODE XREF: ldif_getline+45j
		push	0Ah		; Val
		push	dword ptr [esi]	; Str
		call	edi ; strchr
		add	esp, 8
		mov	[esi], eax
		test	eax, eax
		jz	short loc_10001518
		inc	eax
		mov	[esi], eax
		cmp	byte ptr [eax],	23h
		jz	short loc_100014B0

loc_100014C7:				; CODE XREF: ldif_getline+2Aj
		push	ebx
		mov	ebx, [esi]
		push	0Ah		; Val
		push	ebx		; Str
		call	edi ; strchr
		add	esp, 8
		mov	[esi], eax
		test	eax, eax
		jz	short loc_1000152E

loc_100014D8:				; CODE XREF: ldif_getline+90j
		mov	eax, [esi]
		mov	cl, [eax+1]
		cmp	cl, 20h
		jz	short loc_100014E7
		cmp	cl, 9
		jnz	short loc_1000151D

loc_100014E7:				; CODE XREF: ldif_getline+60j
		cmp	cl, 0Ah
		jz	short loc_1000151D
		cmp	byte ptr [eax-1], 0Dh
		jnz	short loc_100014F6
		mov	byte ptr [eax-1], 1

loc_100014F6:				; CODE XREF: ldif_getline+70j
		mov	eax, [esi]
		push	0Ah		; Val
		mov	byte ptr [eax],	1
		mov	eax, [esi]
		mov	byte ptr [eax+1], 1
		inc	dword ptr [esi]
		push	dword ptr [esi]	; Str
		call	edi ; strchr
		add	esp, 8
		mov	[esi], eax
		test	eax, eax
		jnz	short loc_100014D8
		mov	eax, ebx
		pop	ebx
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10001518:				; CODE XREF: ldif_getline+3Dj
		pop	edi
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1000151D:				; CODE XREF: ldif_getline+65j
					; ldif_getline+6Aj
		cmp	byte ptr [eax-1], 0Dh
		jnz	short loc_10001527
		mov	byte ptr [eax-1], 0

loc_10001527:				; CODE XREF: ldif_getline+A1j
		mov	ecx, [esi]
		mov	byte ptr [ecx],	0
		inc	dword ptr [esi]

loc_1000152E:				; CODE XREF: ldif_getline+56j
		mov	eax, ebx
		pop	ebx
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10001534:				; CODE XREF: ldif_getline+9j
					; ldif_getline+13j ...
		xor	eax, eax
		pop	esi
		retn
ldif_getline	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 3001. ldif_parse_line

; =============== S U B	R O U T	I N E =======================================


		public ldif_parse_line
ldif_parse_line	proc near		; DATA XREF: .rdata:off_10003288o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	ecx, [esp+arg_0]

loc_10001544:				; CODE XREF: ldif_parse_line+13j
		mov	al, [ecx]
		cmp	al, 20h
		jz	short loc_10001552
		cmp	al, 9
		jz	short loc_10001552
		cmp	al, 0Ah
		jnz	short loc_10001555

loc_10001552:				; CODE XREF: ldif_parse_line+8j
					; ldif_parse_line+Cj
		inc	ecx
		jmp	short loc_10001544
; ---------------------------------------------------------------------------

loc_10001555:				; CODE XREF: ldif_parse_line+10j
		mov	eax, [esp+arg_4]
		push	esi
		mov	esi, ecx
		mov	[eax], ecx
		cmp	byte ptr [ecx],	0
		jz	short loc_1000156E

loc_10001563:				; CODE XREF: ldif_parse_line+2Cj
		cmp	byte ptr [esi],	3Ah
		jz	short loc_1000156E
		inc	esi
		cmp	byte ptr [esi],	0
		jnz	short loc_10001563

loc_1000156E:				; CODE XREF: ldif_parse_line+21j
					; ldif_parse_line+26j
		cmp	byte ptr [esi],	0
		jnz	short loc_10001578
		or	eax, 0FFFFFFFFh
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10001578:				; CODE XREF: ldif_parse_line+31j
		lea	eax, [esi-1]
		cmp	eax, ecx
		jbe	short loc_10001599
		nop

loc_10001580:				; CODE XREF: ldif_parse_line+57j
		mov	dl, [eax]
		cmp	dl, 20h
		jz	short loc_10001591
		cmp	dl, 9
		jz	short loc_10001591
		cmp	dl, 0Ah
		jnz	short loc_10001599

loc_10001591:				; CODE XREF: ldif_parse_line+45j
					; ldif_parse_line+4Aj
		mov	byte ptr [eax],	0
		dec	eax
		cmp	eax, ecx
		ja	short loc_10001580

loc_10001599:				; CODE XREF: ldif_parse_line+3Dj
					; ldif_parse_line+4Fj
		mov	byte ptr [esi],	0
		inc	esi
		push	edi
		cmp	byte ptr [esi],	3Ah
		jnz	short loc_100015AB
		inc	esi
		mov	edi, 1
		jmp	short loc_100015B0
; ---------------------------------------------------------------------------

loc_100015AB:				; CODE XREF: ldif_parse_line+61j
		xor	edi, edi
		lea	ecx, [ecx+0]

loc_100015B0:				; CODE XREF: ldif_parse_line+69j
					; ldif_parse_line+7Fj
		mov	al, [esi]
		cmp	al, 20h
		jz	short loc_100015BE
		cmp	al, 9
		jz	short loc_100015BE
		cmp	al, 0Ah
		jnz	short loc_100015C1

loc_100015BE:				; CODE XREF: ldif_parse_line+74j
					; ldif_parse_line+78j
		inc	esi
		jmp	short loc_100015B0
; ---------------------------------------------------------------------------

loc_100015C1:				; CODE XREF: ldif_parse_line+7Cj
		cmp	byte ptr [esi],	0
		jnz	short loc_100015DB
		mov	eax, [esp+8+arg_8]
		pop	edi
		mov	[eax], esi
		mov	eax, [esp+4+arg_C]
		pop	esi
		mov	dword ptr [eax], 0
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_100015DB:				; CODE XREF: ldif_parse_line+84j
		mov	eax, esi
		mov	ecx, esi
		nop

loc_100015E0:				; CODE XREF: ldif_parse_line+AEj
		mov	dl, [eax]
		cmp	dl, 1
		jz	short loc_100015EA
		mov	[ecx], dl
		inc	ecx

loc_100015EA:				; CODE XREF: ldif_parse_line+A5j
		inc	eax
		cmp	byte ptr [eax],	0
		jnz	short loc_100015E0
		mov	eax, [esp+8+arg_8]
		mov	byte ptr [ecx],	0
		mov	[eax], esi
		test	edi, edi
		jz	short loc_10001620
		push	esi		; int
		push	esi		; Str
		call	ldif_base64_decode
		mov	ecx, [esp+10h+arg_C]
		add	esp, 8
		mov	[ecx], eax
		test	eax, eax
		jns	short loc_10001617
		pop	edi
		or	eax, 0FFFFFFFFh
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10001617:				; CODE XREF: ldif_parse_line+CFj
		mov	byte ptr [eax+esi], 0
		xor	eax, eax
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10001620:				; CODE XREF: ldif_parse_line+BBj
		mov	eax, [esp+8+arg_C]
		sub	ecx, esi
		pop	edi
		pop	esi
		mov	[eax], ecx
		xor	eax, eax
		retn
ldif_parse_line	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 3003. ldif_put_type_and_value

; =============== S U B	R O U T	I N E =======================================


		public ldif_put_type_and_value
ldif_put_type_and_value	proc near	; DATA XREF: .rdata:off_10003288o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	0
		push	[esp+4+arg_C]
		push	[esp+8+arg_8]
		push	[esp+0Ch+arg_4]
		push	[esp+10h+arg_0]
		call	ldif_put_type_and_value_with_options
		add	esp, 14h
		retn
ldif_put_type_and_value	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 3004. ldif_put_type_and_value_nowrap

; =============== S U B	R O U T	I N E =======================================


		public ldif_put_type_and_value_nowrap
ldif_put_type_and_value_nowrap proc near ; DATA	XREF: .rdata:off_10003288o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	1
		push	[esp+4+arg_C]
		push	[esp+8+arg_8]
		push	[esp+0Ch+arg_4]
		push	[esp+10h+arg_0]
		call	ldif_put_type_and_value_with_options
		add	esp, 14h
		retn
ldif_put_type_and_value_nowrap endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 3005. ldif_put_type_and_value_with_options

; =============== S U B	R O U T	I N E =======================================


		public ldif_put_type_and_value_with_options
ldif_put_type_and_value_with_options proc near ; CODE XREF: ldif_put_type_and_value+12p
					; ldif_put_type_and_value_nowrap+12p ...

var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	ecx
		mov	ecx, [esp+4+arg_4]
		mov	eax, 0FFFFFFFFh
		push	ebx
		push	ebp
		push	esi
		mov	dl, [ecx]
		mov	ebp, 4Ch
		mov	esi, [esp+10h+arg_0]
		push	edi
		xor	edi, edi
		test	byte ptr [esp+14h+arg_10], 1
		cmovnz	ebp, eax
		test	dl, dl
		jz	short loc_100016A7

loc_10001697:				; CODE XREF: ldif_put_type_and_value_with_options+35j
		mov	eax, [esi]
		lea	ecx, [ecx+1]
		inc	edi
		mov	[eax], dl
		inc	dword ptr [esi]
		mov	dl, [ecx]
		test	dl, dl
		jnz	short loc_10001697

loc_100016A7:				; CODE XREF: ldif_put_type_and_value_with_options+25j
		mov	eax, [esi]
		inc	edi
		mov	byte ptr [eax],	3Ah
		inc	dword ptr [esi]
		mov	eax, [esp+14h+arg_10]
		mov	ecx, [esi]
		mov	[esp+14h+arg_0], ecx
		test	al, 2
		jz	short loc_100016CB
		mov	byte ptr [ecx],	3Ch
		inc	dword ptr [esi]
		inc	edi
		mov	ebx, [esi]
		mov	[esp+14h+arg_0], ebx
		jmp	short loc_100016CD
; ---------------------------------------------------------------------------

loc_100016CB:				; CODE XREF: ldif_put_type_and_value_with_options+4Bj
		mov	ebx, ecx

loc_100016CD:				; CODE XREF: ldif_put_type_and_value_with_options+59j
		mov	ecx, [esp+14h+arg_8]
		mov	edx, ecx
		mov	[esp+14h+var_4], edi
		mov	[esp+14h+arg_4], edx
		test	ecx, ecx
		jz	loc_10001791
		cmp	[esp+14h+arg_C], 0
		jle	loc_10001791
		mov	edx, [esp+14h+arg_C]
		mov	byte ptr [ebx],	20h
		add	edx, ecx
		inc	dword ptr [esi]
		test	al, 4
		mov	al, [ecx]
		mov	[esp+14h+arg_4], edx
		jz	short loc_10001753
		cmp	al, 0Dh
		jz	short loc_10001717
		cmp	al, 0Ah
		jz	short loc_10001717
		cmp	al, 3Ah
		jz	short loc_10001717
		cmp	al, 20h
		jz	short loc_10001717
		cmp	al, 3Ch
		jnz	short loc_1000178D

loc_10001717:				; CODE XREF: ldif_put_type_and_value_with_options+95j
					; ldif_put_type_and_value_with_options+99j ...
		mov	eax, [esp+14h+arg_0]
		mov	[esi], eax
		push	ebp
		mov	byte ptr [eax],	3Ah
		inc	dword ptr [esi]
		mov	eax, [esi]
		mov	byte ptr [eax],	20h
		mov	eax, [esp+18h+var_4]
		inc	dword ptr [esi]
		add	eax, 2
		push	eax
		push	[esp+1Ch+arg_C]
		push	dword ptr [esi]
		push	[esp+24h+arg_8]
		call	sub_10001110
		add	esp, 14h
		add	[esi], eax

loc_10001746:				; CODE XREF: ldif_put_type_and_value_with_options+125j
		mov	eax, [esi]
		pop	edi
		mov	byte ptr [eax],	0Ah
		inc	dword ptr [esi]
		pop	esi
		pop	ebp
		pop	ebx
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_10001753:				; CODE XREF: ldif_put_type_and_value_with_options+91j
		cmp	al, 0Dh
		jz	short loc_10001717
		cmp	al, 0Ah
		jz	short loc_10001717
		cmp	al, 3Ah
		jz	short loc_10001717
		cmp	al, 20h
		jz	short loc_10001717
		cmp	al, 3Ch
		jz	short loc_10001717
		movsx	eax, al
		cmp	eax, 80h
		jnb	short loc_10001787
		push	eax		; C
		call	ds:isspace
		add	esp, 4
		test	eax, eax
		jnz	short loc_10001717
		mov	ecx, [esp+14h+arg_8]
		mov	edx, [esp+14h+arg_4]

loc_10001787:				; CODE XREF: ldif_put_type_and_value_with_options+FFj
		cmp	byte ptr [edx-1], 20h
		jz	short loc_10001717

loc_1000178D:				; CODE XREF: ldif_put_type_and_value_with_options+A5j
		mov	eax, [esp+14h+arg_10]

loc_10001791:				; CODE XREF: ldif_put_type_and_value_with_options+6Dj
					; ldif_put_type_and_value_with_options+78j
		mov	ebx, ecx
		cmp	ecx, edx
		jnb	short loc_10001746
		and	eax, 4
		mov	[esp+14h+arg_10], eax
		mov	edi, edi

loc_100017A0:				; CODE XREF: ldif_put_type_and_value_with_options+1AAj
		test	eax, eax
		mov	al, [ebx]
		jz	short loc_100017B8
		cmp	al, 0Dh
		jz	loc_10001717
		cmp	al, 0Ah
		jz	loc_10001717
		jmp	short loc_100017EE
; ---------------------------------------------------------------------------

loc_100017B8:				; CODE XREF: ldif_put_type_and_value_with_options+134j
		cmp	al, 0Dh
		jz	loc_10001717
		cmp	al, 0Ah
		jz	loc_10001717
		cmp	al, 80h
		jnb	loc_10001717
		movzx	eax, al
		push	eax		; C
		call	ds:isprint
		add	esp, 4
		test	eax, eax
		jnz	short loc_100017EA
		cmp	byte ptr [ebx],	9
		jnz	loc_10001717

loc_100017EA:				; CODE XREF: ldif_put_type_and_value_with_options+16Fj
		mov	edx, [esp+14h+arg_4]

loc_100017EE:				; CODE XREF: ldif_put_type_and_value_with_options+146j
		cmp	ebp, 0FFFFFFFFh
		jz	short loc_1000180A
		cmp	edi, ebp
		jle	short loc_1000180A
		mov	eax, [esi]
		mov	edi, 1
		mov	byte ptr [eax],	0Ah
		inc	dword ptr [esi]
		mov	eax, [esi]
		mov	byte ptr [eax],	20h
		inc	dword ptr [esi]

loc_1000180A:				; CODE XREF: ldif_put_type_and_value_with_options+181j
					; ldif_put_type_and_value_with_options+185j
		mov	ecx, [esi]
		inc	edi
		mov	al, [ebx]
		inc	ebx
		mov	[ecx], al
		inc	dword ptr [esi]
		mov	eax, [esp+14h+arg_10]
		cmp	ebx, edx
		jb	short loc_100017A0
		mov	eax, [esi]
		pop	edi
		mov	byte ptr [eax],	0Ah
		inc	dword ptr [esi]
		pop	esi
		pop	ebp
		pop	ebx
		pop	ecx
		retn
ldif_put_type_and_value_with_options endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 3006. ldif_type_and_value

; =============== S U B	R O U T	I N E =======================================


		public ldif_type_and_value
ldif_type_and_value proc near		; DATA XREF: .rdata:off_10003288o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	0
		push	[esp+4+arg_8]
		push	[esp+8+arg_4]
		push	[esp+0Ch+arg_0]
		call	ldif_type_and_value_with_options
		add	esp, 10h
		retn
ldif_type_and_value endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 3007. ldif_type_and_value_nowrap

; =============== S U B	R O U T	I N E =======================================


		public ldif_type_and_value_nowrap
ldif_type_and_value_nowrap proc	near	; DATA XREF: .rdata:off_10003288o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	1
		push	[esp+4+arg_8]
		push	[esp+8+arg_4]
		push	[esp+0Ch+arg_0]
		call	ldif_type_and_value_with_options
		add	esp, 10h
		retn
ldif_type_and_value_nowrap endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 3008. ldif_type_and_value_with_options

; =============== S U B	R O U T	I N E =======================================


		public ldif_type_and_value_with_options
ldif_type_and_value_with_options proc near ; CODE XREF:	ldif_type_and_value+Ep
					; ldif_type_and_value_nowrap+Ep
					; DATA XREF: ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	ecx, [esp+arg_0]
		lea	edx, [ecx+1]

loc_10001877:				; CODE XREF: ldif_type_and_value_with_options+Cj
		mov	al, [ecx]
		inc	ecx
		test	al, al
		jnz	short loc_10001877
		push	ebx
		mov	ebx, [esp+4+arg_8]
		sub	ecx, edx
		mov	eax, 55555556h
		push	esi
		lea	edx, ds:0[ebx*4]
		imul	edx
		mov	eax, 6BCA1AF3h
		mov	esi, edx
		shr	esi, 1Fh
		add	esi, edx
		lea	edx, [esi+6]
		add	esi, 8
		add	edx, ecx
		imul	edx
		sar	edx, 5
		mov	eax, edx
		shr	eax, 1Fh
		add	eax, edx
		lea	eax, [esi+eax*2]
		add	eax, ecx
		push	eax		; Size
		call	ds:malloc
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		jz	short loc_100018EE
		push	[esp+8+arg_C]
		lea	eax, [esp+0Ch+arg_8]
		mov	[esp+0Ch+arg_8], esi
		push	ebx
		push	[esp+10h+arg_4]
		push	[esp+14h+arg_0]
		push	eax
		call	ldif_put_type_and_value_with_options
		mov	eax, [esp+1Ch+arg_8]
		add	esp, 14h
		mov	byte ptr [eax],	0

loc_100018EE:				; CODE XREF: ldif_type_and_value_with_options+57j
		mov	eax, esi
		pop	esi
		pop	ebx
		retn
ldif_type_and_value_with_options endp

; [0000003D BYTES: COLLAPSED FUNCTION ___raise_securityfailure]
; [000000FB BYTES: COLLAPSED FUNCTION ___report_gsfailure]
; [0000000C BYTES: COLLAPSED FUNCTION ___report_rangecheckfailure]
; [000000D0 BYTES: COLLAPSED FUNCTION ___report_securityfailure]
; [0000000F BYTES: COLLAPSED FUNCTION __security_check_cookie(x)]
; [00000006 BYTES: COLLAPSED FUNCTION memcpy]
; [0000004C BYTES: COLLAPSED FUNCTION _pre_c_init]

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10001B68	proc near		; CODE XREF: ___DllMainCRTStartup+64p
					; ___DllMainCRTStartup+A3p ...

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ecx
		cmp	[ebp+arg_4], 0
		push	ebx
		push	esi
		push	edi
		jnz	loc_10001CA3
		mov	eax, dword_100047C8
		test	eax, eax
		jle	loc_10001C9C
		dec	eax
		mov	ebx, offset dword_100047D4
		mov	dword_100047C8,	eax
		xor	edi, edi
		mov	eax, large fs:18h
		mov	[ebp+var_4], edi
		mov	edx, [eax+4]
		jmp	short loc_10001BA6
; ---------------------------------------------------------------------------

loc_10001BA2:				; CODE XREF: sub_10001B68+48j
		cmp	eax, edx
		jz	short loc_10001BB4

loc_10001BA6:				; CODE XREF: sub_10001B68+38j
		xor	eax, eax
		mov	ecx, edx
		lock cmpxchg [ebx], ecx
		test	eax, eax
		jnz	short loc_10001BA2
		jmp	short loc_10001BBB
; ---------------------------------------------------------------------------

loc_10001BB4:				; CODE XREF: sub_10001B68+3Cj
		mov	[ebp+var_4], 1

loc_10001BBB:				; CODE XREF: sub_10001B68+4Aj
		cmp	dword_100047D8,	2
		jz	short loc_10001BD1
		push	1Fh
		call	_amsg_exit
		pop	ecx
		jmp	loc_10001D53
; ---------------------------------------------------------------------------

loc_10001BD1:				; CODE XREF: sub_10001B68+5Aj
		push	Ptr		; Ptr
		call	ds:DecodePointer
		mov	esi, eax
		mov	[ebp+arg_8], esi
		test	esi, esi
		jz	loc_10001C84
		push	dword_100047DC	; Ptr
		call	ds:DecodePointer
		mov	ebx, eax
		mov	[ebp+arg_4], esi
		mov	[ebp+arg_0], ebx

loc_10001BFE:				; CODE XREF: sub_10001B68+9Fj
					; sub_10001B68+AAj ...
		sub	ebx, 4
		cmp	ebx, esi
		jb	short loc_10001C61
		cmp	[ebx], edi
		jz	short loc_10001BFE
		push	edi		; Ptr
		call	ds:EncodePointer
		cmp	[ebx], eax
		jz	short loc_10001BFE
		push	dword ptr [ebx]	; Ptr
		call	ds:DecodePointer
		push	edi		; Ptr
		mov	esi, eax
		call	ds:EncodePointer
		mov	[ebx], eax
		call	esi
		push	Ptr		; Ptr
		mov	esi, ds:DecodePointer
		call	esi ; DecodePointer
		push	dword_100047DC	; Ptr
		mov	[ebp+var_8], eax
		call	esi ; DecodePointer
		mov	ecx, [ebp+var_8]
		cmp	[ebp+arg_4], ecx
		jnz	short loc_10001C52
		mov	esi, [ebp+arg_8]
		cmp	[ebp+arg_0], eax
		jz	short loc_10001BFE

loc_10001C52:				; CODE XREF: sub_10001B68+E0j
		mov	esi, ecx
		mov	[ebp+arg_4], ecx
		mov	[ebp+arg_8], esi
		mov	ebx, eax
		mov	[ebp+arg_0], eax
		jmp	short loc_10001BFE
; ---------------------------------------------------------------------------

loc_10001C61:				; CODE XREF: sub_10001B68+9Bj
		cmp	esi, 0FFFFFFFFh
		jz	short loc_10001C6E
		push	esi		; Memory
		call	ds:free
		pop	ecx

loc_10001C6E:				; CODE XREF: sub_10001B68+FCj
		push	edi		; Ptr
		call	ds:EncodePointer
		mov	dword_100047DC,	eax
		mov	ebx, offset dword_100047D4
		mov	Ptr, eax

loc_10001C84:				; CODE XREF: sub_10001B68+7Cj
		mov	dword_100047D8,	edi
		cmp	[ebp+var_4], edi
		jnz	loc_10001D53
		xor	eax, eax
		xchg	eax, [ebx]
		jmp	loc_10001D53
; ---------------------------------------------------------------------------

loc_10001C9C:				; CODE XREF: sub_10001B68+19j
					; sub_10001B68+19Fj
		xor	eax, eax
		jmp	loc_10001D56
; ---------------------------------------------------------------------------

loc_10001CA3:				; CODE XREF: sub_10001B68+Cj
		cmp	[ebp+arg_4], 1
		jnz	loc_10001D53
		mov	eax, large fs:18h
		xor	edi, edi
		mov	esi, edi
		mov	ebx, offset dword_100047D4
		mov	edx, [eax+4]
		jmp	short loc_10001CC5
; ---------------------------------------------------------------------------

loc_10001CC1:				; CODE XREF: sub_10001B68+167j
		cmp	eax, edx
		jz	short loc_10001CD3

loc_10001CC5:				; CODE XREF: sub_10001B68+157j
		xor	eax, eax
		mov	ecx, edx
		lock cmpxchg [ebx], ecx
		test	eax, eax
		jnz	short loc_10001CC1
		jmp	short loc_10001CD6
; ---------------------------------------------------------------------------

loc_10001CD3:				; CODE XREF: sub_10001B68+15Bj
		xor	esi, esi
		inc	esi

loc_10001CD6:				; CODE XREF: sub_10001B68+169j
		cmp	dword_100047D8,	edi
		push	2
		pop	edi
		jz	short loc_10001CEA
		push	1Fh
		call	_amsg_exit
		jmp	short loc_10001D1F
; ---------------------------------------------------------------------------

loc_10001CEA:				; CODE XREF: sub_10001B68+177j
		push	offset dword_1000309C
		push	offset dword_10003090
		mov	dword_100047D8,	1
		call	_initterm_e
		pop	ecx
		pop	ecx
		test	eax, eax
		jnz	short loc_10001C9C
		push	offset dword_1000308C
		push	offset dword_10003088
		call	_initterm
		pop	ecx
		mov	dword_100047D8,	edi

loc_10001D1F:				; CODE XREF: sub_10001B68+180j
		pop	ecx
		test	esi, esi
		jnz	short loc_10001D28
		xor	eax, eax
		xchg	eax, [ebx]

loc_10001D28:				; CODE XREF: sub_10001B68+1BAj
		cmp	dword_100047E4,	0
		jz	short loc_10001D4D
		push	offset dword_100047E4
		call	__IsNonwritableInCurrentImage
		pop	ecx
		test	eax, eax
		jz	short loc_10001D4D
		push	[ebp+arg_8]
		push	edi
		push	[ebp+arg_0]
		call	dword_100047E4

loc_10001D4D:				; CODE XREF: sub_10001B68+1C7j
					; sub_10001B68+1D6j
		inc	dword_100047C8

loc_10001D53:				; CODE XREF: sub_10001B68+64j
					; sub_10001B68+125j ...
		xor	eax, eax
		inc	eax

loc_10001D56:				; CODE XREF: sub_10001B68+136j
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn	0Ch
sub_10001B68	endp

; [00000023 BYTES: COLLAPSED FUNCTION DllEntryPoint]
; [00000133 BYTES: COLLAPSED FUNCTION ___DllMainCRTStartup]
		align 2
; [00000006 BYTES: COLLAPSED FUNCTION _crt_debugger_hook]
; [00000006 BYTES: COLLAPSED FUNCTION __crtUnhandledException]
; [00000006 BYTES: COLLAPSED FUNCTION __crtTerminateProcess]
; [00000006 BYTES: COLLAPSED FUNCTION __CppXcptFilter]
; [00000006 BYTES: COLLAPSED FUNCTION _amsg_exit]
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10001EE0	proc near		; CODE XREF: __IsNonwritableInCurrentImage+59p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_0]
		xor	edx, edx
		push	ebx
		push	esi
		push	edi
		mov	ecx, [eax+3Ch]
		add	ecx, eax
		movzx	eax, word ptr [ecx+14h]
		movzx	ebx, word ptr [ecx+6]
		add	eax, 18h
		add	eax, ecx
		test	ebx, ebx
		jz	short loc_10001F1C
		mov	edi, [ebp+arg_4]

loc_10001F04:				; CODE XREF: sub_10001EE0+3Aj
		mov	esi, [eax+0Ch]
		cmp	edi, esi
		jb	short loc_10001F14
		mov	ecx, [eax+8]
		add	ecx, esi
		cmp	edi, ecx
		jb	short loc_10001F1E

loc_10001F14:				; CODE XREF: sub_10001EE0+29j
		inc	edx
		add	eax, 28h
		cmp	edx, ebx
		jb	short loc_10001F04

loc_10001F1C:				; CODE XREF: sub_10001EE0+1Fj
		xor	eax, eax

loc_10001F1E:				; CODE XREF: sub_10001EE0+32j
		pop	edi
		pop	esi
		pop	ebx
		pop	ebp
		retn
sub_10001EE0	endp

; ---------------------------------------------------------------------------
		align 10h
; [000000BA BYTES: COLLAPSED FUNCTION __IsNonwritableInCurrentImage]
		align 10h
; [00000031 BYTES: COLLAPSED FUNCTION __ValidateImageBase]
; [0000003C BYTES: COLLAPSED FUNCTION ___atonexitinit]

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_1000205D(_onexit_t Func)
sub_1000205D	proc near		; CODE XREF: sub_10002106+6p

var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
Ptr		= dword	ptr -1Ch
ms_exc		= CPPEH_RECORD ptr -18h
Func		= dword	ptr  8

		push	14h
		push	offset stru_10003240
		call	__SEH_prolog4
		and	[ebp+var_24], 0
		push	Ptr		; Ptr
		mov	esi, ds:DecodePointer
		call	esi ; DecodePointer
		mov	[ebp+Ptr], eax
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_1000208F
		push	[ebp+Func]	; Func
		call	ds:_onexit
		pop	ecx
		jmp	short loc_100020F4
; ---------------------------------------------------------------------------

loc_1000208F:				; CODE XREF: sub_1000205D+24j
		push	8
		call	_lock
		pop	ecx
		and	[ebp+ms_exc.registration.TryLevel], 0
		push	Ptr		; Ptr
		call	esi ; DecodePointer
		mov	[ebp+Ptr], eax
		push	dword_100047DC	; Ptr
		call	esi ; DecodePointer
		mov	[ebp+var_20], eax
		lea	eax, [ebp+var_20]
		push	eax
		lea	eax, [ebp+Ptr]
		push	eax
		push	[ebp+Func]	; Ptr
		mov	esi, ds:EncodePointer
		call	esi ; EncodePointer
		push	eax
		call	__dllonexit
		add	esp, 0Ch
		mov	edi, eax
		mov	[ebp+var_24], edi
		push	[ebp+Ptr]	; Ptr
		call	esi ; EncodePointer
		mov	Ptr, eax
		push	[ebp+var_20]	; Ptr
		call	esi ; EncodePointer
		mov	dword_100047DC,	eax
		mov	[ebp+ms_exc.registration.TryLevel], 0FFFFFFFEh
		call	loc_100020FD
; ---------------------------------------------------------------------------

loc_100020F2:				; CODE XREF: sub_1000205D+A8j
		mov	eax, edi

loc_100020F4:				; CODE XREF: sub_1000205D+30j
		call	__SEH_epilog4
		retn
; ---------------------------------------------------------------------------

loc_100020FA:				; DATA XREF: .rdata:stru_10003240o
		mov	edi, [ebp+var_24] ; Finally handler 0 for function 1000205D

loc_100020FD:				; CODE XREF: sub_1000205D+90j
		push	8
		call	_unlock
		pop	ecx
		retn
sub_1000205D	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_10002106(_onexit_t Func)
sub_10002106	proc near		; CODE XREF: _pre_c_init+36p
					; _pre_c_init+42p

Func		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	[ebp+Func]	; Func
		call	sub_1000205D
		neg	eax
		pop	ecx
		sbb	eax, eax
		neg	eax
		dec	eax
		pop	ebp
		retn
sub_10002106	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_1000211B	proc near		; CODE XREF: DllEntryPoint+9p

PerformanceCount= LARGE_INTEGER	ptr -14h
SystemTimeAsFileTime= _FILETIME	ptr -0Ch
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		sub	esp, 14h
		and	[ebp+SystemTimeAsFileTime.dwLowDateTime], 0
		and	[ebp+SystemTimeAsFileTime.dwHighDateTime], 0
		mov	eax, ___security_cookie
		push	esi
		push	edi
		mov	edi, 0BB40E64Eh
		mov	esi, 0FFFF0000h
		cmp	eax, edi
		jz	short loc_1000214B
		test	esi, eax
		jz	short loc_1000214B
		not	eax
		mov	dword_10004494,	eax
		jmp	short loc_100021B1
; ---------------------------------------------------------------------------

loc_1000214B:				; CODE XREF: sub_1000211B+21j
					; sub_1000211B+25j
		lea	eax, [ebp+SystemTimeAsFileTime]
		push	eax		; lpSystemTimeAsFileTime
		call	ds:GetSystemTimeAsFileTime
		mov	eax, [ebp+SystemTimeAsFileTime.dwHighDateTime]
		xor	eax, [ebp+SystemTimeAsFileTime.dwLowDateTime]
		mov	[ebp+var_4], eax
		call	ds:GetCurrentThreadId
		xor	[ebp+var_4], eax
		call	ds:GetCurrentProcessId
		xor	[ebp+var_4], eax
		lea	eax, [ebp+PerformanceCount]
		push	eax		; lpPerformanceCount
		call	ds:QueryPerformanceCounter
		mov	ecx, dword ptr [ebp+PerformanceCount+4]
		lea	eax, [ebp+var_4]
		xor	ecx, dword ptr [ebp+PerformanceCount]
		xor	ecx, [ebp+var_4]
		xor	ecx, eax
		cmp	ecx, edi
		jnz	short loc_10002193
		mov	ecx, 0BB40E64Fh
		jmp	short loc_100021A3
; ---------------------------------------------------------------------------

loc_10002193:				; CODE XREF: sub_1000211B+6Fj
		test	esi, ecx
		jnz	short loc_100021A3
		mov	eax, ecx
		or	eax, 4711h
		shl	eax, 10h
		or	ecx, eax

loc_100021A3:				; CODE XREF: sub_1000211B+76j
					; sub_1000211B+7Aj
		mov	___security_cookie, ecx
		not	ecx
		mov	dword_10004494,	ecx

loc_100021B1:				; CODE XREF: sub_1000211B+2Ej
		pop	edi
		pop	esi
		mov	esp, ebp
		pop	ebp
		retn
sub_1000211B	endp

; [00000022 BYTES: COLLAPSED FUNCTION DllMain(x,x,x)]

; =============== S U B	R O U T	I N E =======================================


sub_100021D9	proc near		; CODE XREF: _pre_c_init+2Cp
		push	esi
		push	edi
		mov	esi, offset dword_100031E8
		mov	edi, offset dword_100031E8
		jmp	short loc_100021F2
; ---------------------------------------------------------------------------

loc_100021E7:				; CODE XREF: sub_100021D9+1Bj
		mov	eax, [esi]
		test	eax, eax
		jz	short loc_100021EF
		call	eax

loc_100021EF:				; CODE XREF: sub_100021D9+12j
		add	esi, 4

loc_100021F2:				; CODE XREF: sub_100021D9+Cj
		cmp	esi, edi
		jb	short loc_100021E7
		pop	edi
		pop	esi
		retn
sub_100021D9	endp


; =============== S U B	R O U T	I N E =======================================


; int __cdecl Func()
Func		proc near		; DATA XREF: _pre_c_init+31o
		push	esi
		push	edi
		mov	esi, offset dword_100031F0
		mov	edi, offset dword_100031F0
		jmp	short loc_10002212
; ---------------------------------------------------------------------------

loc_10002207:				; CODE XREF: Func+1Bj
		mov	eax, [esi]
		test	eax, eax
		jz	short loc_1000220F
		call	eax

loc_1000220F:				; CODE XREF: Func+12j
		add	esi, 4

loc_10002212:				; CODE XREF: Func+Cj
		cmp	esi, edi
		jb	short loc_10002207
		pop	edi
		pop	esi
		retn
Func		endp

; ---------------------------------------------------------------------------
		align 2
; [00000006 BYTES: COLLAPSED FUNCTION _initterm]
; [00000006 BYTES: COLLAPSED FUNCTION _initterm_e]

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10002226()
sub_10002226	proc near		; DATA XREF: _pre_c_init+3Bo
		push	offset dword_100047CC
		call	__clean_type_info_names_internal
		pop	ecx
		retn
sub_10002226	endp

; ---------------------------------------------------------------------------
		align 10h
; [00000045 BYTES: COLLAPSED FUNCTION __SEH_prolog4]
; [00000014 BYTES: COLLAPSED FUNCTION __SEH_epilog4]
; [00000023 BYTES: COLLAPSED FUNCTION __except_handler4]
; [00000006 BYTES: COLLAPSED FUNCTION _lock]
; [00000006 BYTES: COLLAPSED FUNCTION _unlock]
; [00000006 BYTES: COLLAPSED FUNCTION __dllonexit]
; [00000006 BYTES: COLLAPSED FUNCTION __clean_type_info_names_internal]
; [00000006 BYTES: COLLAPSED FUNCTION _except_handler4_common]
; [00000006 BYTES: COLLAPSED FUNCTION IsProcessorFeaturePresent]
		align 200h
		dd 300h	dup(?)
_text		ends

; Section 2. (virtual address 00003000)
; Virtual size			: 00000726 (   1830.)
; Section size in file		: 00000800 (   2048.)
; Offset to raw	data for section: 00001800
; Flags	40300040: Data Readable
; Alignment	: 4 bytes
;
; Imports from KERNEL32.dll
;
; ===========================================================================

; Segment type:	Externs
; _idata
; void __stdcall GetSystemTimeAsFileTime(LPFILETIME lpSystemTimeAsFileTime)
		extrn GetSystemTimeAsFileTime:dword ; CODE XREF: sub_1000211B+34p
					; DATA XREF: sub_1000211B+34r ...
; DWORD	__stdcall GetCurrentThreadId()
		extrn GetCurrentThreadId:dword ; CODE XREF: sub_1000211B+43p
					; DATA XREF: sub_1000211B+43r
; DWORD	__stdcall GetCurrentProcessId()
		extrn GetCurrentProcessId:dword	; CODE XREF: sub_1000211B+4Cp
					; DATA XREF: sub_1000211B+4Cr
; BOOL __stdcall QueryPerformanceCounter(LARGE_INTEGER *lpPerformanceCount)
		extrn QueryPerformanceCounter:dword ; CODE XREF: sub_1000211B+59p
					; DATA XREF: sub_1000211B+59r
; PVOID	__stdcall DecodePointer(PVOID Ptr)
		extrn DecodePointer:dword ; CODE XREF: sub_10001B68+6Fp
					; sub_10001B68+88p ...
; PVOID	__stdcall EncodePointer(PVOID Ptr)
		extrn EncodePointer:dword ; CODE XREF: _pre_c_init+10p
					; sub_10001B68+A2p ...
; BOOL __stdcall IsProcessorFeaturePresent(DWORD ProcessorFeature)
		extrn __imp_IsProcessorFeaturePresent:dword
					; DATA XREF: IsProcessorFeaturePresentr
; BOOL __stdcall IsDebuggerPresent()
		extrn IsDebuggerPresent:dword ;	CODE XREF: ___raise_securityfailure+3p
					; DATA XREF: ___raise_securityfailure+3r
; BOOL __stdcall DisableThreadLibraryCalls(HMODULE hLibModule)
		extrn DisableThreadLibraryCalls:dword ;	CODE XREF: DllMain(x,x,x)+15p
					; DATA XREF: DllMain(x,x,x)+15r

;
; Imports from MSVCR120.dll
;
		extrn __imp___CppXcptFilter:dword ; DATA XREF: __CppXcptFilterr
					; .rdata:10003438o
		extrn __imp__amsg_exit:dword ; DATA XREF: _amsg_exitr
; void __cdecl free(void *Memory)
		extrn free:dword	; CODE XREF: sub_10001B68+FFp
					; DATA XREF: sub_10001B68+FFr
		extrn _malloc_crt:dword	; CODE XREF: _pre_c_init+6p
					; DATA XREF: _pre_c_init+6r
		extrn __imp__initterm:dword ; DATA XREF: _inittermr
		extrn __imp__initterm_e:dword ;	DATA XREF: _initterm_er
		extrn __imp___crtTerminateProcess:dword	; DATA XREF: __crtTerminateProcessr
		extrn __imp__lock:dword	; DATA XREF: _lockr
		extrn __imp__unlock:dword ; DATA XREF: _unlockr
		extrn _calloc_crt:dword	; CODE XREF: ___atonexitinit+11p
					; DATA XREF: ___atonexitinit+11r
		extrn __imp___dllonexit:dword ;	DATA XREF: __dllonexitr
; _onexit_t __cdecl onexit(_onexit_t Func)
		extrn _onexit:dword	; CODE XREF: sub_1000205D+29p
					; DATA XREF: sub_1000205D+29r
		extrn __imp___clean_type_info_names_internal:dword
					; DATA XREF: __clean_type_info_names_internalr
		extrn __imp__except_handler4_common:dword
					; DATA XREF: _except_handler4_commonr
		extrn __imp___crtUnhandledException:dword
					; DATA XREF: __crtUnhandledExceptionr
		extrn __imp__crt_debugger_hook:dword ; DATA XREF: _crt_debugger_hookr
; void *__cdecl	memcpy(void *Dst, const	void *Src, size_t Size)
		extrn __imp_memcpy:dword ; DATA	XREF: memcpyr
; int __cdecl isprint(int C)
		extrn isprint:dword	; CODE XREF: ldif_put_type_and_value_with_options+164p
					; DATA XREF: ldif_put_type_and_value_with_options+164r
; int __cdecl isspace(int C)
		extrn isspace:dword	; CODE XREF: ldif_put_type_and_value_with_options+102p
					; DATA XREF: ldif_put_type_and_value_with_options+102r
; void *__cdecl	realloc(void *Memory, size_t NewSize)
		extrn realloc:dword	; CODE XREF: .text:1000142Bp
					; DATA XREF: .text:1000142Br
; void *__cdecl	malloc(size_t Size)
		extrn malloc:dword	; CODE XREF: .text:1000141Cp
					; ldif_type_and_value_with_options+4Ap
					; DATA XREF: ...
; char *__cdecl	strchr(const char *Str,	int Val)
		extrn strchr:dword	; CODE XREF: ldif_base64_decode+Bp
					; ldif_getline+34p ...
; char *__cdecl	fgets(char *Buf, int MaxCount, FILE *File)
		extrn fgets:dword	; CODE XREF: .text:10001343p
					; .text:10001380p
					; DATA XREF: ...


; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 10003088h
dword_10003088	dd 0			; DATA XREF: sub_10001B68+1A6o
dword_1000308C	dd 0			; DATA XREF: sub_10001B68+1A1o
dword_10003090	dd 0			; DATA XREF: sub_10001B68+187o
		dd offset _pre_c_init
		dd offset ___atonexitinit
dword_1000309C	dd 0			; DATA XREF: sub_10001B68:loc_10001CEAo
; Debug	Directory entries
		dd 0			; Characteristics
		dd 56F29A5Fh		; TimeDateStamp: Wed Mar 23 13:30:07 2016
		dw 0			; MajorVersion
		dw 0			; MinorVersion
		dd 2			; Type:	IMAGE_DEBUG_TYPE_CODEVIEW
		dd 93h			; SizeOfData
		dd rva asc_10003130	; AddressOfRawData
		dd 1930h		; PointerToRawData
		dd 0			; Characteristics
		dd 56F29A5Fh		; TimeDateStamp: Wed Mar 23 13:30:07 2016
		dw 0			; MajorVersion
		dw 0			; MinorVersion
		dd 0Ch			; Type
		dd 14h			; SizeOfData
		dd rva dword_100031C4	; AddressOfRawData
		dd 19C4h		; PointerToRawData
off_100030D8	dd offset dword_100044A8 ; DATA	XREF: ___report_gsfailure+EDo
					; ___report_securityfailure+C2o
		dd offset dword_100044F8
dword_100030E0	dd 0			; DATA XREF: ___DllMainCRTStartup:loc_10001DC0r
					; ___DllMainCRTStartup+A8r ...
		align 8
__load_config_used dd 48h		; Size
		dd 0			; Time stamp
		dw 2 dup(0)		; Version: 0.0
		dd 0			; GlobalFlagsClear
		dd 0			; GlobalFlagsSet
		dd 0			; CriticalSectionDefaultTimeout
		dd 0			; DeCommitFreeBlockThreshold
		dd 0			; DeCommitTotalFreeThreshold
		dd 0			; LockPrefixTable
		dd 0			; MaximumAllocationSize
		dd 0			; VirtualMemoryThreshold
		dd 0			; ProcessAffinityMask
		dd 0			; ProcessHeapFlags
		dw 0			; CSDVersion
		dw 0			; Reserved1
		dd 0			; EditList
		dd offset ___security_cookie ; SecurityCookie
		dd offset ___safe_se_handler_table ; SEHandlerTable
		dd 1			; SEHandlerCount
; Debug	information (IMAGE_DEBUG_TYPE_CODEVIEW)
asc_10003130	db 'RSDS'               ; DATA XREF: .rdata:100030B4o
					; CV signature
		dd 959B71A0h		; Data1	; GUID
		dw 0F51Fh		; Data2
		dw 439Bh		; Data3
		db 90h,	85h, 88h, 0E5h,	73h, 0E2h, 39h,	0EBh; Data4
		dd 1			; Age
		db 'c:\builds\moz2_slave\tb-rel-c-esr38-w32_bld-0000000\build\objdir-' ; PdbFileName
		db 'tb\ldap\sdks\c-sdk\ldap\libraries\libldif\nsldif32v60.pdb',0
		align 4
; Debug	information (type 12)
dword_100031C4	dd 0			; DATA XREF: .rdata:100030D0o
		dd 2 dup(0Fh), 4 dup(0)
___safe_se_handler_table dd rva	__except_handler4 ; DATA XREF: .rdata:10003128o
		align 8
dword_100031E8	dd 2 dup(0)		; DATA XREF: sub_100021D9+2o
					; sub_100021D9+7o
dword_100031F0	dd 2 dup(0)		; DATA XREF: Func+2o Func+7o
stru_100031F8	dd 0FFFFFFFEh		; GSCookieOffset
					; DATA XREF: ___DllMainCRTStartup+2o
		dd 0			; GSCookieXOROffset ; SEH scope	table for function 10001D82
		dd 0FFFFFFD0h		; EHCookieOffset
		dd 0			; EHCookieXOROffset
		dd 0FFFFFFFEh		; ScopeRecord.EnclosingLevel
		dd 0			; ScopeRecord.FilterFunc
		dd offset $LN18		; ScopeRecord.HandlerFunc
		dd 0			; ScopeRecord.EnclosingLevel
		dd offset $LN22		; ScopeRecord.FilterFunc
		dd offset $LN23		; ScopeRecord.HandlerFunc
stru_10003220	dd 0FFFFFFFEh		; GSCookieOffset
					; DATA XREF: __IsNonwritableInCurrentImage+5o
		dd 0			; GSCookieXOROffset ; SEH scope	table for function 10001F30
		dd 0FFFFFFD8h		; EHCookieOffset
		dd 0			; EHCookieXOROffset
		dd 0FFFFFFFEh		; ScopeRecord.EnclosingLevel
		dd offset loc_10001FB9	; ScopeRecord.FilterFunc
		dd offset loc_10001FCC	; ScopeRecord.HandlerFunc
		align 10h
stru_10003240	dd 0FFFFFFFEh		; GSCookieOffset ; DATA	XREF: sub_1000205D+2o
		dd 0			; GSCookieXOROffset ; SEH scope	table for function 1000205D
		dd 0FFFFFFCCh		; EHCookieOffset
		dd 0			; EHCookieXOROffset
		dd 0FFFFFFFEh		; ScopeRecord.EnclosingLevel
		dd 0			; ScopeRecord.FilterFunc
		dd offset loc_100020FA	; ScopeRecord.HandlerFunc
		align 10h
;
; Export directory for NSLDIF32V60.dll
;
		dd 0			; Characteristics
		dd 56F29A5Fh		; TimeDateStamp: Wed Mar 23 13:30:07 2016
		dw 0			; MajorVersion
		dw 0			; MinorVersion
		dd rva aNsldif32v60_dl	; Name
		dd 0BB9h		; Base
		dd 0Ch			; NumberOfFunctions
		dd 0Ch			; NumberOfNames
		dd rva off_10003288	; AddressOfFunctions
		dd rva off_100032B8	; AddressOfNames
		dd rva word_100032E8	; AddressOfNameOrdinals
;
; Export Address Table for NSLDIF32V60.dll
;
off_10003288	dd rva ldif_parse_line,	rva ldif_getline, rva ldif_put_type_and_value
					; DATA XREF: .rdata:1000327Co
		dd rva ldif_put_type_and_value_nowrap, rva ldif_put_type_and_value_with_options
		dd rva ldif_type_and_value, rva	ldif_type_and_value_nowrap
		dd rva ldif_type_and_value_with_options, rva ldif_base64_decode
		dd rva ldif_base64_encode, rva ldif_base64_encode_nowrap
		dd rva ldif_get_entry
;
; Export Names Table for NSLDIF32V60.dll
;
off_100032B8	dd rva aLdif_base64_de,	rva aLdif_base64_en, rva aLdif_base64__0
					; DATA XREF: .rdata:10003280o
		dd rva aLdif_get_entry,	rva aLdif_getline, rva aLdif_parse_lin ; "ldif_base64_decode"
		dd rva aLdif_put_type_,	rva aLdif_put_typ_0, rva aLdif_put_typ_1
		dd rva aLdif_type_and_,	rva aLdif_type_an_0, rva aLdif_type_an_1
;
; Export Ordinals Table	for NSLDIF32V60.dll
;
word_100032E8	dw 8, 9, 0Ah, 0Bh, 1, 0, 2, 3, 4, 5, 6,	7 ; DATA XREF: .rdata:10003284o
aNsldif32v60_dl	db 'NSLDIF32V60.dll',0  ; DATA XREF: .rdata:1000326Co
aLdif_base64_de	db 'ldif_base64_decode',0 ; DATA XREF: .rdata:off_100032B8o
aLdif_base64_en	db 'ldif_base64_encode',0 ; DATA XREF: .rdata:off_100032B8o
aLdif_base64__0	db 'ldif_base64_encode_nowrap',0 ; DATA XREF: .rdata:off_100032B8o
aLdif_get_entry	db 'ldif_get_entry',0   ; DATA XREF: .rdata:off_100032B8o
aLdif_getline	db 'ldif_getline',0     ; DATA XREF: .rdata:off_100032B8o
aLdif_parse_lin	db 'ldif_parse_line',0  ; DATA XREF: .rdata:off_100032B8o
aLdif_put_type_	db 'ldif_put_type_and_value',0 ; DATA XREF: .rdata:off_100032B8o
aLdif_put_typ_0	db 'ldif_put_type_and_value_nowrap',0 ; DATA XREF: .rdata:off_100032B8o
aLdif_put_typ_1	db 'ldif_put_type_and_value_with_options',0
					; DATA XREF: .rdata:off_100032B8o
aLdif_type_and_	db 'ldif_type_and_value',0 ; DATA XREF: .rdata:off_100032B8o
aLdif_type_an_0	db 'ldif_type_and_value_nowrap',0 ; DATA XREF: .rdata:off_100032B8o
aLdif_type_an_1	db 'ldif_type_and_value_with_options',0 ; DATA XREF: .rdata:off_100032B8o
__IMPORT_DESCRIPTOR_MSVCR120 dd	rva off_1000348C ; Import Name Table
		dd 0			; Time stamp
		dd 0			; Forwarder Chain
		dd rva aMsvcr120_dll	; DLL Name
		dd rva __imp___CppXcptFilter ; Import Address Table
__IMPORT_DESCRIPTOR_KERNEL32 dd	rva off_10003464 ; Import Name Table
		dd 0			; Time stamp
		dd 0			; Forwarder Chain
		dd rva aKernel32_dll	; DLL Name
		dd rva GetSystemTimeAsFileTime ; Import	Address	Table
		dd 5 dup(0)
;
; Import names for KERNEL32.dll
;
off_10003464	dd rva word_100036E2	; DATA XREF: .rdata:__IMPORT_DESCRIPTOR_KERNEL32o
		dd rva word_100036CC
		dd rva word_100036B6
		dd rva word_1000369C
		dd rva word_1000368C
		dd rva word_1000367C
		dd rva word_10003660
		dd rva word_1000364C
		dd rva word_100036FC
		dd 0
;
; Import names for MSVCR120.dll
;
off_1000348C	dd rva word_10003586	; DATA XREF: .rdata:__IMPORT_DESCRIPTOR_MSVCR120o
		dd rva word_10003598
		dd rva word_100035A6
		dd rva word_100035AE
		dd rva word_100035BC
		dd rva word_100035C8
		dd rva word_10003560
		dd rva word_100035D6
		dd rva word_100035DE
		dd rva word_100035E8
		dd rva word_100035F6
		dd rva word_10003604
		dd rva word_1000360E
		dd rva word_10003632
		dd rva word_10003546
		dd rva word_10003530
		dd rva word_10003526
		dd rva word_1000351C
		dd rva word_10003512
		dd rva word_10003508
		dd rva word_100034FE
		dd rva word_100034F4
		dd rva word_100034EC
		dd 0
word_100034EC	dw 66Bh			; DATA XREF: .rdata:100034E4o
		db 'fgets',0
word_100034F4	dw 72Fh			; DATA XREF: .rdata:100034E0o
		db 'strchr',0
		align 2
word_100034FE	dw 6DBh			; DATA XREF: .rdata:100034DCo
		db 'malloc',0
		align 4
word_10003508	dw 709h			; DATA XREF: .rdata:100034D8o
		db 'realloc',0
word_10003512	dw 6A9h			; DATA XREF: .rdata:100034D4o
		db 'isspace',0
word_1000351C	dw 6A7h			; DATA XREF: .rdata:100034D0o
		db 'isprint',0
word_10003526	dw 6E6h			; DATA XREF: .rdata:100034CCo
		db 'memcpy',0
		align 10h
word_10003530	dw 250h			; DATA XREF: .rdata:100034C8o
		db '_crt_debugger_hook',0
		align 2
word_10003546	dw 1ACh			; DATA XREF: .rdata:100034C4o
		db '__crtUnhandledException',0
word_10003560	dw 1ABh			; DATA XREF: .rdata:100034A4o
		db '__crtTerminateProcess',0
aMsvcr120_dll	db 'MSVCR120.dll',0     ; DATA XREF: .rdata:10003434o
		align 2
word_10003586	dw 16Fh			; DATA XREF: .rdata:off_1000348Co
		db '__CppXcptFilter',0
word_10003598	dw 217h			; DATA XREF: .rdata:10003490o
		db '_amsg_exit',0
		align 2
word_100035A6	dw 683h			; DATA XREF: .rdata:10003494o
		db 'free',0
		align 2
word_100035AE	dw 3A5h			; DATA XREF: .rdata:10003498o
		db '_malloc_crt',0
word_100035BC	dw 30Ch			; DATA XREF: .rdata:1000349Co
		db '_initterm',0
word_100035C8	dw 30Dh			; DATA XREF: .rdata:100034A0o
		db '_initterm_e',0
word_100035D6	dw 394h			; DATA XREF: .rdata:100034A8o
		db '_lock',0
word_100035DE	dw 504h			; DATA XREF: .rdata:100034ACo
		db '_unlock',0
word_100035E8	dw 22Eh			; DATA XREF: .rdata:100034B0o
		db '_calloc_crt',0
word_100035F6	dw 1AEh			; DATA XREF: .rdata:100034B4o
		db '__dllonexit',0
word_10003604	dw 43Ah			; DATA XREF: .rdata:100034B8o
		db '_onexit',0
word_1000360E	dw 18Ch			; DATA XREF: .rdata:100034BCo
		db '__clean_type_info_names_internal',0
		align 2
word_10003632	dw 27Ah			; DATA XREF: .rdata:100034C0o
		db '_except_handler4_common',0
word_1000364C	dw 367h			; DATA XREF: .rdata:10003480o
		db 'IsDebuggerPresent',0
word_10003660	dw 36Dh			; DATA XREF: .rdata:1000347Co
		db 'IsProcessorFeaturePresent',0
word_1000367C	dw 121h			; DATA XREF: .rdata:10003478o
		db 'EncodePointer',0
word_1000368C	dw 0FEh			; DATA XREF: .rdata:10003474o
		db 'DecodePointer',0
word_1000369C	dw 42Dh			; DATA XREF: .rdata:10003470o
		db 'QueryPerformanceCounter',0
word_100036B6	dw 20Ah			; DATA XREF: .rdata:1000346Co
		db 'GetCurrentProcessId',0
word_100036CC	dw 20Eh			; DATA XREF: .rdata:10003468o
		db 'GetCurrentThreadId',0
		align 2
word_100036E2	dw 2D6h			; DATA XREF: .rdata:off_10003464o
		db 'GetSystemTimeAsFileTime',0
word_100036FC	dw 113h			; DATA XREF: .rdata:10003484o
		db 'DisableThreadLibraryCalls',0
aKernel32_dll	db 'KERNEL32.dll',0     ; DATA XREF: .rdata:10003448o
		align 1000h
_rdata		ends

; Section 3. (virtual address 00004000)
; Virtual size			: 000007E8 (   2024.)
; Section size in file		: 00000600 (   1536.)
; Offset to raw	data for section: 00002000
; Flags	C0300040: Data Readable	Writable
; Alignment	: 4 bytes
; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
		;org 10004000h
byte_10004000	db 41h			; DATA XREF: sub_10001110+6Dr
					; sub_10001110+9Er ...
aBcdefghijklmno	db 'BCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',0
		align 4
		dd 0F3h	dup(0)
byte_10004410	db 0FFh			; DATA XREF: ldif_base64_decode+3Br
					; ldif_base64_decode+54r ...
		db 3 dup(0FFh)
		dd 9 dup(0FFFFFFFFh), 3EFFFFFFh, 3FFFFFFFh, 37363534h
		dd 3B3A3938h, 0FFFF3D3Ch, 0FFFFFFFFh, 20100FFh,	6050403h
		dd 0A090807h, 0E0D0C0Bh, 1211100Fh, 16151413h, 0FF191817h
		dd 0FFFFFFFFh, 1C1B1AFFh, 201F1E1Dh, 24232221h,	28272625h
		dd 2C2B2A29h, 302F2E2Dh, 0FF333231h, 0FFFFFFFFh
___security_cookie dd 0BB40E64Eh	; DATA XREF: .text:10001306r
					; ___report_gsfailure+D3r ...
dword_10004494	dd 44BF19B1h		; DATA XREF: ___report_gsfailure+E3r
					; sub_1000211B+29w ...
		align 10h
dword_100044A0	dd 0FFFFFFFFh		; DATA XREF: ___DllMainCRTStartup+1Cw
					; ___DllMainCRTStartup:$LN20w
		align 8
dword_100044A8	dd 0			; DATA XREF: ___report_gsfailure+9Fw
					; ___report_securityfailure+95w ...
dword_100044AC	dd 0			; DATA XREF: ___report_gsfailure+A9w
					; ___report_securityfailure+9Fw
		dd 0
dword_100044B4	dd 0			; DATA XREF: ___report_gsfailure+9Aw
					; ___report_securityfailure+90w
dword_100044B8	dd 0			; DATA XREF: ___report_gsfailure+B3w
					; ___report_securityfailure+A9w
dword_100044BC	dd 0			; DATA XREF: ___report_gsfailure+C3w
					; ___report_securityfailure+BCw
		dd 0Eh dup(0)
dword_100044F8	dd 0			; DATA XREF: ___report_gsfailure+8Bw
					; .rdata:100030DCo
		dd 22h dup(0)
word_10004584	dw 0			; DATA XREF: ___report_gsfailure+5Fw
					; ___report_securityfailure+5Fw
		align 4
word_10004588	dw 0			; DATA XREF: ___report_gsfailure+58w
					; ___report_securityfailure+58w
		align 4
word_1000458C	dw 0			; DATA XREF: ___report_gsfailure+51w
					; ___report_securityfailure+51w
		align 10h
word_10004590	dw 0			; DATA XREF: ___report_gsfailure+4Aw
					; ___report_securityfailure+4Aw
		align 4
dword_10004594	dd 0			; DATA XREF: ___report_gsfailure+36w
					; ___report_securityfailure+36w
dword_10004598	dd 0			; DATA XREF: ___report_gsfailure+30w
					; ___report_securityfailure+30w
dword_1000459C	dd 0			; DATA XREF: ___report_gsfailure+2Aw
					; ___report_securityfailure+2Aw
dword_100045A0	dd 0			; DATA XREF: ___report_gsfailure+24w
					; ___report_securityfailure+24w
dword_100045A4	dd 0			; DATA XREF: ___report_gsfailure+1Ew
					; ___report_securityfailure+1Ew
dword_100045A8	dd 0			; DATA XREF: ___report_gsfailure:loc_10001949w
					; ___report_securityfailure:loc_10001A50w
dword_100045AC	dd 0			; DATA XREF: ___report_gsfailure+70w
					; ___report_securityfailure+70w
dword_100045B0	dd 0			; DATA XREF: ___report_gsfailure+78w
					; ___report_gsfailure+95r ...
word_100045B4	dw 0			; DATA XREF: ___report_gsfailure+43w
					; ___report_securityfailure+43w
		align 4
dword_100045B8	dd 0			; DATA XREF: ___report_gsfailure+67w
					; ___report_securityfailure+67w
dword_100045BC	dd 0			; DATA XREF: ___report_gsfailure+80w
					; ___report_securityfailure+80w
word_100045C0	dw 0			; DATA XREF: ___report_gsfailure+3Cw
					; ___report_securityfailure+3Cw
		align 4
		dd 0Fh dup(0)
		dd 71h dup(?)
dword_100047C4	dd ?			; DATA XREF: ___raise_securityfailure+Bw
					; ___raise_securityfailure+1Dr
dword_100047C8	dd ?			; DATA XREF: sub_10001B68+12r
					; sub_10001B68+25w ...
dword_100047CC	dd 2 dup(?)		; DATA XREF: sub_10002226o
dword_100047D4	dd ?			; DATA XREF: sub_10001B68+20o
					; sub_10001B68+112o ...
dword_100047D8	dd ?			; DATA XREF: sub_10001B68:loc_10001BBBr
					; sub_10001B68:loc_10001C84w ...
; PVOID	dword_100047DC
dword_100047DC	dd ?			; DATA XREF: _pre_c_init+1Bw
					; sub_10001B68+82r ...
; PVOID	Ptr
Ptr		dd ?			; DATA XREF: _pre_c_init+16w
					; sub_10001B68:loc_10001BD1r ...
dword_100047E4	dd ?			; DATA XREF: sub_10001B68:loc_10001D28r
					; sub_10001B68+1C9o ...
		align 1000h
_data		ends


		end DllEntryPoint
