;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	14266236758BE9A3DDB68D624FF47262
; Input	CRC32 :	224C0F36

; File Name   :	C:\compspace\compare\thunderbird\dlls\full\nsldap32v60_full.dll
; Format      :	Portable executable for	80386 (PE)
; Imagebase   :	10000000
; Section 1. (virtual address 00001000)
; Virtual size			: 0001D290 ( 119440.)
; Section size in file		: 0001D400 ( 119808.)
; Offset to raw	data for section: 00000400
; Flags	60300020: Text Executable Readable
; Alignment	: 4 bytes
; PDB File Name	: c:\builds\moz2_slave\tb-rel-c-esr38-w32_bld-0000000\build\objdir-tb\ldap\sdks\c-sdk\ldap\libraries\libldap\nsldap32v60.pdb
; OS type	  :  MS	Windows
; Application type:  DLL 32bit

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	dword public 'CODE' use32
		assume cs:_text
		;org 10001000h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10001000(void	*Memory, int, int, int,	int)
sub_10001000	proc near		; CODE XREF: sub_10001000+36p
					; ldap_abandon_ext+EFp
					; DATA XREF: ...

var_4		= dword	ptr -4
Memory		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	ecx
		push	ebx
		mov	ebx, [esp+8+arg_8]
		push	ebp
		push	esi
		mov	esi, [esp+10h+Memory]
		xor	ebp, ebp
		push	edi
		mov	[esp+14h+var_4], ebp
		mov	edi, [esi+34h]
		test	edi, edi
		jz	short loc_1000107B
		lea	ebx, [ebx+0]

loc_10001020:				; CODE XREF: sub_10001000+43j
		mov	eax, [edi]
		cmp	eax, ebx
		jz	short loc_10001047
		cmp	[edi+0Ch], ebx
		jnz	short loc_1000103E
		push	[esp+14h+arg_10] ; int
		push	[esp+18h+arg_C]	; int
		push	eax		; int
		push	ebx		; int
		push	esi		; Memory
		call	sub_10001000
		add	esp, 14h

loc_1000103E:				; CODE XREF: sub_10001000+29j
		mov	edi, [edi+44h]
		test	edi, edi
		jnz	short loc_10001020
		jmp	short loc_1000107B
; ---------------------------------------------------------------------------

loc_10001047:				; CODE XREF: sub_10001000+24j
		cmp	[esp+14h+arg_4], ebx
		jnz	short loc_1000106A
		cmp	[edi+34h], ebp
		jz	short loc_1000106A
		push	0
		push	0
		mov	ebp, 59h
		push	ebp
		push	esi
		call	ldap_set_lderrno
		pop	edi
		pop	esi
		mov	eax, ebp
		pop	ebp
		pop	ebx
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_1000106A:				; CODE XREF: sub_10001000+4Bj
					; sub_10001000+50j
		mov	eax, 1
		xor	ecx, ecx
		cmp	[edi+4], eax
		cmovz	ecx, eax
		mov	[esp+14h+var_4], ecx

loc_1000107B:				; CODE XREF: sub_10001000+18j
					; sub_10001000+45j
		push	ebx
		push	esi
		call	sub_10011070
		add	esp, 8
		test	eax, eax
		jz	loc_10001311
		test	edi, edi
		jz	loc_100011F6
		cmp	[esp+14h+var_4], ebp
		jz	loc_100011D0
		lea	eax, [esp+14h+Memory]
		push	eax
		push	esi
		call	sub_1000EF40
		mov	ebp, eax
		add	esp, 8
		test	ebp, ebp
		jnz	loc_100011D0
		mov	eax, [esi+0C0h]
		test	eax, eax
		jz	short loc_1000111D
		mov	ecx, [esi+0DCh]
		test	ecx, ecx
		jz	short loc_1000111D
		mov	edx, [esi+13Ch]
		test	edx, edx
		jz	short loc_10001115
		call	edx
		cmp	[esi+148h], eax
		jnz	short loc_100010E7
		inc	dword ptr [esi+180h]
		jmp	short loc_1000111D
; ---------------------------------------------------------------------------

loc_100010E7:				; CODE XREF: sub_10001000+DDj
		mov	eax, [esi+0DCh]
		push	dword ptr [eax+8]
		mov	eax, [esi+0C0h]
		call	eax
		mov	eax, [esi+13Ch]
		add	esp, 4
		call	eax
		mov	[esi+148h], eax
		mov	dword ptr [esi+180h], 1
		jmp	short loc_1000111D
; ---------------------------------------------------------------------------

loc_10001115:				; CODE XREF: sub_10001000+D3j
		push	dword ptr [ecx+8]
		call	eax
		add	esp, 4

loc_1000111D:				; CODE XREF: sub_10001000+BFj
					; sub_10001000+C9j ...
		inc	dword ptr [esi+30h]
		cmp	dword ptr [esi+0C0h], 0
		mov	ebp, [esi+30h]
		jz	short loc_1000117A
		mov	eax, [esi+0DCh]
		test	eax, eax
		jz	short loc_1000117A
		mov	ecx, [esi+13Ch]
		test	ecx, ecx
		jz	short loc_1000116C
		call	ecx
		cmp	[esi+148h], eax
		jnz	short loc_1000117A
		dec	dword ptr [esi+180h]
		jnz	short loc_1000117A
		mov	dword ptr [esi+148h], 0FFFFFFFFh
		mov	dword ptr [esi+180h], 0
		mov	eax, [esi+0DCh]

loc_1000116C:				; CODE XREF: sub_10001000+13Ej
		push	dword ptr [eax+8]
		mov	eax, [esi+0C4h]
		call	eax
		add	esp, 4

loc_1000117A:				; CODE XREF: sub_10001000+12Aj
					; sub_10001000+134j ...
		push	ebx
		push	50h
		push	ebp
		push	offset aIti	; "{iti"
		push	[esp+24h+Memory]
		call	ber_printf
		add	esp, 14h
		cmp	eax, 0FFFFFFFFh
		jz	short loc_100011C0
		push	[esp+14h+Memory]
		push	1
		push	[esp+1Ch+arg_C]
		push	esi
		call	sub_10002DD0
		add	esp, 10h
		test	eax, eax
		jnz	short loc_100011C0
		push	ebp		; int
		push	[esp+18h+Memory] ; Memory
		push	dword ptr [edi+2Ch] ; int
		push	esi		; int
		call	sub_10001510
		add	esp, 10h
		mov	ebp, eax
		jmp	short loc_100011D0
; ---------------------------------------------------------------------------

loc_100011C0:				; CODE XREF: sub_10001000+192j
					; sub_10001000+1A9j
		push	1		; int
		push	[esp+18h+Memory] ; Memory
		mov	ebp, 53h
		call	ber_free

loc_100011D0:				; CODE XREF: sub_10001000+99j
					; sub_10001000+B1j ...
		push	1
		push	0
		push	0
		push	0
		push	dword ptr [edi+2Ch]
		push	esi
		call	sub_1000F5E0
		add	esp, 18h
		cmp	[esp+14h+arg_4], ebx
		jnz	short loc_100011F6
		push	0
		push	edi
		push	esi
		call	sub_1000F6D0
		add	esp, 0Ch

loc_100011F6:				; CODE XREF: sub_10001000+8Fj
					; sub_10001000+1E8j
		mov	eax, [esi+0C0h]
		test	eax, eax
		jz	short loc_1000125C
		mov	ecx, [esi+0DCh]
		test	ecx, ecx
		jz	short loc_1000125C
		mov	edx, [esi+13Ch]
		test	edx, edx
		jz	short loc_10001254
		call	edx
		cmp	[esi+154h], eax
		jnz	short loc_10001226
		inc	dword ptr [esi+18Ch]
		jmp	short loc_1000125C
; ---------------------------------------------------------------------------

loc_10001226:				; CODE XREF: sub_10001000+21Cj
		mov	eax, [esi+0DCh]
		push	dword ptr [eax+14h]
		mov	eax, [esi+0C0h]
		call	eax
		mov	eax, [esi+13Ch]
		add	esp, 4
		call	eax
		mov	[esi+154h], eax
		mov	dword ptr [esi+18Ch], 1
		jmp	short loc_1000125C
; ---------------------------------------------------------------------------

loc_10001254:				; CODE XREF: sub_10001000+212j
		push	dword ptr [ecx+14h]
		call	eax
		add	esp, 4

loc_1000125C:				; CODE XREF: sub_10001000+1FEj
					; sub_10001000+208j ...
		mov	ecx, [esi+3Ch]
		test	ecx, ecx
		jnz	short loc_1000127F
		push	8
		call	ldap_x_malloc
		add	esp, 4
		mov	[esi+3Ch], eax
		test	eax, eax
		jnz	short loc_1000127B

loc_10001274:				; CODE XREF: sub_10001000+2A7j
		mov	ebp, 5Ah
		jmp	short loc_100012BA
; ---------------------------------------------------------------------------

loc_1000127B:				; CODE XREF: sub_10001000+272j
		xor	edi, edi
		jmp	short loc_100012A9
; ---------------------------------------------------------------------------

loc_1000127F:				; CODE XREF: sub_10001000+261j
		xor	edi, edi
		cmp	dword ptr [ecx], 0FFFFFFFFh
		jz	short loc_10001291
		mov	eax, ecx

loc_10001288:				; CODE XREF: sub_10001000+28Fj
		lea	eax, [eax+4]
		inc	edi
		cmp	dword ptr [eax], 0FFFFFFFFh
		jnz	short loc_10001288

loc_10001291:				; CODE XREF: sub_10001000+284j
		lea	eax, ds:8[edi*4]
		push	eax
		push	ecx
		call	ldap_x_realloc
		add	esp, 8
		mov	[esi+3Ch], eax
		test	eax, eax
		jz	short loc_10001274

loc_100012A9:				; CODE XREF: sub_10001000+27Dj
		mov	eax, [esi+3Ch]
		mov	[eax+edi*4], ebx
		mov	eax, [esi+3Ch]
		mov	dword ptr [eax+edi*4+4], 0FFFFFFFFh

loc_100012BA:				; CODE XREF: sub_10001000+279j
		cmp	dword ptr [esi+0C0h], 0
		jz	short loc_10001311
		mov	eax, [esi+0DCh]
		test	eax, eax
		jz	short loc_10001311
		mov	ecx, [esi+13Ch]
		test	ecx, ecx
		jz	short loc_10001303
		call	ecx
		cmp	[esi+154h], eax
		jnz	short loc_10001311
		dec	dword ptr [esi+18Ch]
		jnz	short loc_10001311
		mov	dword ptr [esi+154h], 0FFFFFFFFh
		mov	dword ptr [esi+18Ch], 0
		mov	eax, [esi+0DCh]

loc_10001303:				; CODE XREF: sub_10001000+2D5j
		push	dword ptr [eax+14h]
		mov	eax, [esi+0C4h]
		call	eax
		add	esp, 4

loc_10001311:				; CODE XREF: sub_10001000+87j
					; sub_10001000+2C1j ...
		push	0
		push	0
		push	ebp
		push	esi
		call	ldap_set_lderrno
		pop	edi
		pop	esi
		mov	eax, ebp
		pop	ebp
		pop	ebx
		pop	ecx
		retn
sub_10001000	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  10. ldap_abandon

; =============== S U B	R O U T	I N E =======================================


		public ldap_abandon
ldap_abandon	proc near		; CODE XREF: sub_10013A60+BCp
					; sub_100177B0+90p ...

Memory		= dword	ptr  4
arg_4		= dword	ptr  8

		push	0		; int
		push	0		; int
		push	[esp+8+arg_4]	; int
		push	[esp+0Ch+Memory] ; Memory
		call	ldap_abandon_ext
		neg	eax
		sbb	eax, eax
		retn	8
ldap_abandon	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 506. ldap_abandon_ext

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	ldap_abandon_ext(void *Memory, int, int, int)
		public ldap_abandon_ext
ldap_abandon_ext proc near		; CODE XREF: ldap_abandon+Cp
					; DATA XREF: .rdata:off_10020938o

Memory		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	edi
		mov	edi, [esp+4+Memory]
		test	edi, edi
		jnz	short loc_10001362
		mov	eax, 59h
		pop	edi
		retn	10h
; ---------------------------------------------------------------------------

loc_10001362:				; CODE XREF: ldap_abandon_ext+7j
		mov	eax, [edi+0C0h]
		test	eax, eax
		jz	short loc_100013C8
		mov	ecx, [edi+0DCh]
		test	ecx, ecx
		jz	short loc_100013C8
		mov	edx, [edi+13Ch]
		test	edx, edx
		jz	short loc_100013C0
		call	edx
		cmp	[edi+164h], eax
		jnz	short loc_10001392
		inc	dword ptr [edi+19Ch]
		jmp	short loc_100013C8
; ---------------------------------------------------------------------------

loc_10001392:				; CODE XREF: ldap_abandon_ext+38j
		mov	eax, [edi+0DCh]
		push	dword ptr [eax+24h]
		mov	eax, [edi+0C0h]
		call	eax
		mov	eax, [edi+13Ch]
		add	esp, 4
		call	eax
		mov	[edi+164h], eax
		mov	dword ptr [edi+19Ch], 1
		jmp	short loc_100013C8
; ---------------------------------------------------------------------------

loc_100013C0:				; CODE XREF: ldap_abandon_ext+2Ej
		push	dword ptr [ecx+24h]
		call	eax
		add	esp, 4

loc_100013C8:				; CODE XREF: ldap_abandon_ext+1Aj
					; ldap_abandon_ext+24j	...
		mov	eax, [edi+0C0h]
		test	eax, eax
		jz	short loc_1000142E
		mov	ecx, [edi+0DCh]
		test	ecx, ecx
		jz	short loc_1000142E
		mov	edx, [edi+13Ch]
		test	edx, edx
		jz	short loc_10001426
		call	edx
		cmp	[edi+14Ch], eax
		jnz	short loc_100013F8
		inc	dword ptr [edi+184h]
		jmp	short loc_1000142E
; ---------------------------------------------------------------------------

loc_100013F8:				; CODE XREF: ldap_abandon_ext+9Ej
		mov	eax, [edi+0DCh]
		push	dword ptr [eax+0Ch]
		mov	eax, [edi+0C0h]
		call	eax
		mov	eax, [edi+13Ch]
		add	esp, 4
		call	eax
		mov	[edi+14Ch], eax
		mov	dword ptr [edi+184h], 1
		jmp	short loc_1000142E
; ---------------------------------------------------------------------------

loc_10001426:				; CODE XREF: ldap_abandon_ext+94j
		push	dword ptr [ecx+0Ch]
		call	eax
		add	esp, 4

loc_1000142E:				; CODE XREF: ldap_abandon_ext+80j
					; ldap_abandon_ext+8Aj	...
		push	ebx
		push	esi
		push	[esp+0Ch+arg_C]	; int
		mov	esi, [esp+10h+arg_4]
		push	[esp+10h+arg_8]	; int
		push	esi		; int
		push	esi		; int
		push	edi		; Memory
		call	sub_10001000
		push	esi
		push	edi
		mov	ebx, eax
		call	sub_10008040
		add	esp, 1Ch
		cmp	dword ptr [edi+0C0h], 0
		jz	loc_10001507
		mov	ecx, [edi+0DCh]
		test	ecx, ecx
		jz	short loc_100014B0
		mov	eax, [edi+13Ch]
		test	eax, eax
		jz	short loc_100014A2
		call	eax
		cmp	[edi+14Ch], eax
		jnz	short loc_100014B0
		dec	dword ptr [edi+184h]
		jnz	short loc_100014B0
		mov	dword ptr [edi+14Ch], 0FFFFFFFFh
		mov	dword ptr [edi+184h], 0
		mov	eax, [edi+0DCh]
		push	dword ptr [eax+0Ch]
		jmp	short loc_100014A5
; ---------------------------------------------------------------------------

loc_100014A2:				; CODE XREF: ldap_abandon_ext+11Fj
		push	dword ptr [ecx+0Ch]

loc_100014A5:				; CODE XREF: ldap_abandon_ext+150j
		mov	eax, [edi+0C4h]
		call	eax
		add	esp, 4

loc_100014B0:				; CODE XREF: ldap_abandon_ext+115j
					; ldap_abandon_ext+129j ...
		cmp	dword ptr [edi+0C0h], 0
		jz	short loc_10001507
		mov	eax, [edi+0DCh]
		test	eax, eax
		jz	short loc_10001507
		mov	ecx, [edi+13Ch]
		test	ecx, ecx
		jz	short loc_100014F9
		call	ecx
		cmp	[edi+164h], eax
		jnz	short loc_10001507
		dec	dword ptr [edi+19Ch]
		jnz	short loc_10001507
		mov	dword ptr [edi+164h], 0FFFFFFFFh
		mov	dword ptr [edi+19Ch], 0
		mov	eax, [edi+0DCh]

loc_100014F9:				; CODE XREF: ldap_abandon_ext+17Bj
		push	dword ptr [eax+24h]
		mov	eax, [edi+0C4h]
		call	eax
		add	esp, 4

loc_10001507:				; CODE XREF: ldap_abandon_ext+107j
					; ldap_abandon_ext+167j ...
		pop	esi
		mov	eax, ebx
		pop	ebx
		pop	edi
		retn	10h
ldap_abandon_ext endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10001510(int,	int, void *Memory, int)
sub_10001510	proc near		; CODE XREF: sub_10001000+1B4p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
Memory		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebx
		mov	ebx, [esp+4+arg_0]
		push	esi
		mov	esi, [esp+8+Memory]
		push	edi
		mov	edi, [esp+0Ch+arg_4]
		push	0
		push	1
		push	esi
		push	dword ptr [edi]
		push	ebx
		call	sub_1000FB90
		add	esp, 14h
		cmp	eax, 0FFFFFFFEh
		jnz	short loc_1000157B
		push	0
		push	[esp+10h+arg_C]
		push	esi
		push	edi
		call	sub_1000FAF0
		add	esp, 10h
		test	eax, eax
		jnz	short loc_10001559
		push	1		; int
		push	esi		; Memory
		call	ber_free
		pop	edi
		pop	esi
		mov	eax, 5Ah
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_10001559:				; CODE XREF: sub_10001510+36j
		push	eax
		push	ebx
		mov	dword ptr [eax+4], 4
		call	sub_1000FB50
		push	dword ptr [edi]
		inc	dword ptr [edi+24h]
		push	ebx
		call	sub_1000C780
		add	esp, 10h

loc_10001575:				; CODE XREF: sub_10001510+6Dj
		pop	edi
		pop	esi
		xor	eax, eax
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1000157B:				; CODE XREF: sub_10001510+22j
		test	eax, eax
		jz	short loc_10001575
		push	1		; int
		push	esi		; Memory
		call	ber_free
		pop	edi
		pop	esi
		mov	eax, 51h
		pop	ebx
		retn
sub_10001510	endp

; Exported entry  11. ldap_add

; =============== S U B	R O U T	I N E =======================================


		public ldap_add
ldap_add	proc near		; DATA XREF: .rdata:off_10020938o

var_4		= dword	ptr -4
Memory		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ecx
		lea	eax, [esp+4+var_4]
		push	eax		; int
		push	0		; int
		push	0		; int
		push	[esp+10h+arg_8]	; int
		push	[esp+14h+arg_4]	; int
		push	[esp+18h+Memory] ; Memory
		call	ldap_add_ext
		or	ecx, 0FFFFFFFFh
		test	eax, eax
		cmovz	ecx, [esp+4+var_4]
		mov	eax, ecx
		pop	ecx
		retn	0Ch
ldap_add	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 507. ldap_add_ext

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	ldap_add_ext(void *Memory, int,	int, int, int, int)
		public ldap_add_ext
ldap_add_ext	proc near		; CODE XREF: ldap_add+15p
					; ldap_add_ext_s+1Cp ...

Memory		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_14		= dword	ptr  18h

		push	esi
		mov	esi, [esp+4+Memory]
		test	esi, esi
		jnz	short loc_100015D0
		lea	eax, [esi+59h]
		pop	esi
		retn	18h
; ---------------------------------------------------------------------------

loc_100015D0:				; CODE XREF: ldap_add_ext+7j
		push	ebp
		mov	ebp, [esp+8+arg_14]
		test	ebp, ebp
		jnz	short loc_100015EB
		push	ebp
		push	ebp
		push	59h
		push	esi
		call	ldap_set_lderrno
		lea	eax, [ebp+59h]
		pop	ebp
		pop	esi
		retn	18h
; ---------------------------------------------------------------------------

loc_100015EB:				; CODE XREF: ldap_add_ext+17j
		push	ebx
		mov	ebx, [esp+0Ch+arg_8]
		test	ebx, ebx
		jz	loc_1000192C
		cmp	dword ptr [ebx], 0
		jz	loc_1000192C
		mov	eax, [esp+0Ch+arg_4]
		test	eax, eax
		mov	ecx, [esi+0C0h]
		push	edi
		mov	edi, offset Src
		cmovnz	edi, eax
		mov	[esp+10h+arg_14], edi
		test	ecx, ecx
		jz	short loc_1000167A
		mov	eax, [esi+0DCh]
		test	eax, eax
		jz	short loc_1000167A
		mov	edx, [esi+13Ch]
		test	edx, edx
		jz	short loc_10001672
		call	edx
		cmp	[esi+148h], eax
		jnz	short loc_10001644
		inc	dword ptr [esi+180h]
		jmp	short loc_1000167A
; ---------------------------------------------------------------------------

loc_10001644:				; CODE XREF: ldap_add_ext+7Aj
		mov	eax, [esi+0DCh]
		push	dword ptr [eax+8]
		mov	eax, [esi+0C0h]
		call	eax
		mov	eax, [esi+13Ch]
		add	esp, 4
		call	eax
		mov	[esi+148h], eax
		mov	dword ptr [esi+180h], 1
		jmp	short loc_1000167A
; ---------------------------------------------------------------------------

loc_10001672:				; CODE XREF: ldap_add_ext+70j
		push	dword ptr [eax+8]
		call	ecx
		add	esp, 4

loc_1000167A:				; CODE XREF: ldap_add_ext+5Cj
					; ldap_add_ext+66j ...
		inc	dword ptr [esi+30h]
		mov	eax, [esi+30h]
		mov	[ebp+0], eax
		cmp	dword ptr [esi+0C0h], 0
		jz	short loc_100016DA
		mov	eax, [esi+0DCh]
		test	eax, eax
		jz	short loc_100016DA
		mov	ecx, [esi+13Ch]
		test	ecx, ecx
		jz	short loc_100016CC
		call	ecx
		cmp	[esi+148h], eax
		jnz	short loc_100016DA
		dec	dword ptr [esi+180h]
		jnz	short loc_100016DA
		mov	dword ptr [esi+148h], 0FFFFFFFFh
		mov	dword ptr [esi+180h], 0
		mov	eax, [esi+0DCh]

loc_100016CC:				; CODE XREF: ldap_add_ext+DEj
		push	dword ptr [eax+8]
		mov	eax, [esi+0C4h]
		call	eax
		add	esp, 4

loc_100016DA:				; CODE XREF: ldap_add_ext+CAj
					; ldap_add_ext+D4j ...
		cmp	dword ptr [esi+0E0h], 0
		jz	loc_10001827
		cmp	dword ptr [esi+0FCh], 0
		jz	loc_10001827
		mov	eax, [esi+0C0h]
		test	eax, eax
		jz	short loc_10001758
		mov	ecx, [esi+0DCh]
		test	ecx, ecx
		jz	short loc_10001758
		mov	edx, [esi+13Ch]
		test	edx, edx
		jz	short loc_10001751
		call	edx
		cmp	[esi+140h], eax
		jnz	short loc_10001724
		inc	dword ptr [esi+178h]
		jmp	short loc_10001758
; ---------------------------------------------------------------------------

loc_10001724:				; CODE XREF: ldap_add_ext+15Aj
		mov	eax, [esi+0DCh]
		push	dword ptr [eax]
		mov	eax, [esi+0C0h]
		call	eax
		mov	eax, [esi+13Ch]
		add	esp, 4
		call	eax
		mov	[esi+140h], eax
		mov	dword ptr [esi+178h], 1
		jmp	short loc_10001758
; ---------------------------------------------------------------------------

loc_10001751:				; CODE XREF: ldap_add_ext+150j
		push	dword ptr [ecx]
		call	eax
		add	esp, 4

loc_10001758:				; CODE XREF: ldap_add_ext+13Cj
					; ldap_add_ext+146j ...
		mov	eax, [esi+0FCh]
		push	ebx
		push	edi
		push	68h
		push	dword ptr [ebp+0]
		push	esi
		call	eax
		add	esp, 14h
		test	eax, eax
		jz	short loc_100017D1
		mov	[ebp+0], eax
		cmp	dword ptr [esi+0C0h], 0
		jz	short loc_100017C8
		mov	eax, [esi+0DCh]
		test	eax, eax
		jz	short loc_100017C8
		mov	ecx, [esi+13Ch]
		test	ecx, ecx
		jz	short loc_100017BB
		call	ecx
		cmp	[esi+140h], eax
		jnz	short loc_100017C8
		dec	dword ptr [esi+178h]
		jnz	short loc_100017C8
		mov	dword ptr [esi+140h], 0FFFFFFFFh
		mov	dword ptr [esi+178h], 0
		mov	eax, [esi+0DCh]

loc_100017BB:				; CODE XREF: ldap_add_ext+1CDj
		push	dword ptr [eax]
		mov	eax, [esi+0C4h]
		call	eax
		add	esp, 4

loc_100017C8:				; CODE XREF: ldap_add_ext+1B9j
					; ldap_add_ext+1C3j ...
		xor	eax, eax

loc_100017CA:				; CODE XREF: ldap_add_ext+277j
		pop	edi
		pop	ebx
		pop	ebp
		pop	esi
		retn	18h
; ---------------------------------------------------------------------------

loc_100017D1:				; CODE XREF: ldap_add_ext+1ADj
		cmp	dword ptr [esi+0C0h], 0
		jz	short loc_10001827
		mov	eax, [esi+0DCh]
		test	eax, eax
		jz	short loc_10001827
		mov	ecx, [esi+13Ch]
		test	ecx, ecx
		jz	short loc_1000181A
		call	ecx
		cmp	[esi+140h], eax
		jnz	short loc_10001827
		dec	dword ptr [esi+178h]
		jnz	short loc_10001827
		mov	dword ptr [esi+140h], 0FFFFFFFFh
		mov	dword ptr [esi+178h], 0
		mov	eax, [esi+0DCh]

loc_1000181A:				; CODE XREF: ldap_add_ext+22Cj
		push	dword ptr [eax]
		mov	eax, [esi+0C4h]
		call	eax
		add	esp, 4

loc_10001827:				; CODE XREF: ldap_add_ext+121j
					; ldap_add_ext+12Ej ...
		lea	eax, [esp+10h+Memory]
		push	eax
		push	esi
		call	sub_1000EF40
		add	esp, 8
		test	eax, eax
		jnz	short loc_100017CA
		push	edi
		push	68h
		push	dword ptr [ebp+0]
		push	offset aItS	; "{it{s{"
		push	[esp+20h+Memory]
		call	ber_printf
		add	esp, 14h
		cmp	eax, 0FFFFFFFFh
		jz	short loc_100018AA
		xor	edi, edi
		cmp	[ebx], edi
		jz	short loc_10001894
		mov	eax, ebx
		lea	ecx, [ecx+0]

loc_10001860:				; CODE XREF: ldap_add_ext+2D2j
		mov	eax, [eax]
		test	byte ptr [eax],	80h
		push	dword ptr [eax+8]
		push	dword ptr [eax+4]
		jz	short loc_10001874
		push	offset aSV	; "{s[V]}"
		jmp	short loc_10001879
; ---------------------------------------------------------------------------

loc_10001874:				; CODE XREF: ldap_add_ext+2ABj
		push	offset aSV_0	; "{s[v]}"

loc_10001879:				; CODE XREF: ldap_add_ext+2B2j
		push	[esp+1Ch+Memory]
		call	ber_printf
		add	esp, 10h
		cmp	eax, 0FFFFFFFFh
		jz	short loc_100018AA
		inc	edi
		cmp	dword ptr [ebx+edi*4], 0
		lea	eax, [ebx+edi*4]
		jnz	short loc_10001860

loc_10001894:				; CODE XREF: ldap_add_ext+299j
		push	offset asc_1001F1C8 ; "}}"
		push	[esp+14h+Memory]
		call	ber_printf
		add	esp, 8
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_100018CD

loc_100018AA:				; CODE XREF: ldap_add_ext+293j
					; ldap_add_ext+2C8j
		push	0
		push	0
		push	53h
		push	esi
		call	ldap_set_lderrno
		push	1		; int
		push	[esp+14h+Memory] ; Memory
		call	ber_free
		pop	edi
		pop	ebx
		pop	ebp
		mov	eax, 53h
		pop	esi
		retn	18h
; ---------------------------------------------------------------------------

loc_100018CD:				; CODE XREF: ldap_add_ext+2E8j
		push	[esp+10h+Memory]
		push	1
		push	[esp+18h+arg_C]
		push	esi
		call	sub_10002DD0
		mov	edi, eax
		add	esp, 10h
		test	edi, edi
		jz	short loc_100018FA
		push	1		; int
		push	[esp+14h+Memory] ; Memory
		call	ber_free
		mov	eax, edi
		pop	edi
		pop	ebx
		pop	ebp
		pop	esi
		retn	18h
; ---------------------------------------------------------------------------

loc_100018FA:				; CODE XREF: ldap_add_ext+324j
		push	[esp+10h+Memory]
		push	[esp+14h+arg_14]
		push	68h
		push	dword ptr [ebp+0]
		push	esi
		call	sub_1000FC30
		add	esp, 14h
		mov	[ebp+0], eax
		test	eax, eax
		jns	loc_100017C8
		push	0
		push	0
		push	esi
		call	ldap_get_lderrno
		pop	edi
		pop	ebx
		pop	ebp
		pop	esi
		retn	18h
; ---------------------------------------------------------------------------

loc_1000192C:				; CODE XREF: ldap_add_ext+32j
					; ldap_add_ext+3Bj
		push	0
		push	0
		push	59h
		push	esi
		call	ldap_set_lderrno
		pop	ebx
		pop	ebp
		mov	eax, 59h
		pop	esi
		retn	18h
ldap_add_ext	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 508. ldap_add_ext_s

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	ldap_add_ext_s(void *Memory, int, int, int, int)
		public ldap_add_ext_s
ldap_add_ext_s	proc near		; DATA XREF: .rdata:off_10020938o

var_4		= dword	ptr -4
Memory		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	ecx
		push	esi
		mov	esi, [esp+8+Memory]
		lea	eax, [esp+8+var_4]
		push	eax		; int
		push	[esp+0Ch+arg_10] ; int
		push	[esp+10h+arg_C]	; int
		push	[esp+14h+arg_8]	; int
		push	[esp+18h+arg_4]	; int
		push	esi		; Memory
		call	ldap_add_ext
		test	eax, eax
		jnz	short loc_100019A8
		lea	eax, [esp+8+arg_10]
		push	eax
		push	0
		push	1
		push	[esp+14h+var_4]
		push	esi
		call	ldap_result
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_1000199C
		push	0
		push	0
		push	esi
		call	ldap_get_lderrno
		pop	esi
		pop	ecx
		retn	14h
; ---------------------------------------------------------------------------

loc_1000199C:				; CODE XREF: ldap_add_ext_s+3Bj
		push	1
		push	[esp+0Ch+arg_10]
		push	esi
		call	ldap_result2error

loc_100019A8:				; CODE XREF: ldap_add_ext_s+23j
		pop	esi
		pop	ecx
		retn	14h
ldap_add_ext_s	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  44. ldap_add_s

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	ldap_add_s(void	*Memory, int, int)
		public ldap_add_s
ldap_add_s	proc near		; DATA XREF: .rdata:off_10020938o

var_4		= dword	ptr -4
Memory		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ecx
		push	esi
		mov	esi, [esp+8+Memory]
		lea	eax, [esp+8+var_4]
		push	eax		; int
		push	0		; int
		push	0		; int
		push	[esp+14h+arg_8]	; int
		push	[esp+18h+arg_4]	; int
		push	esi		; Memory
		call	ldap_add_ext
		test	eax, eax
		jnz	short loc_10001A04
		lea	eax, [esp+8+arg_8]
		push	eax
		push	0
		push	1
		push	[esp+14h+var_4]
		push	esi
		call	ldap_result
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_100019F8
		push	0
		push	0
		push	esi
		call	ldap_get_lderrno
		pop	esi
		pop	ecx
		retn	0Ch
; ---------------------------------------------------------------------------

loc_100019F8:				; CODE XREF: ldap_add_s+37j
		push	1
		push	[esp+0Ch+arg_8]
		push	esi
		call	ldap_result2error

loc_10001A04:				; CODE XREF: ldap_add_s+1Fj
		pop	esi
		pop	ecx
		retn	0Ch
ldap_add_s	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 600. ldap_create_authzid_control

; =============== S U B	R O U T	I N E =======================================


		public ldap_create_authzid_control
ldap_create_authzid_control proc near	; DATA XREF: .rdata:off_10020938o

arg_0		= dword	ptr  4
arg_4		= byte ptr  8
arg_8		= dword	ptr  0Ch

		push	edi
		mov	edi, [esp+4+arg_0]
		test	edi, edi
		jz	short loc_10001A2B
		mov	eax, [esp+4+arg_8]
		test	eax, eax
		jnz	short loc_10001A34
		push	eax
		push	eax
		push	59h
		push	edi
		call	ldap_set_lderrno

loc_10001A2B:				; CODE XREF: ldap_create_authzid_control+7j
		mov	eax, 59h
		pop	edi
		retn	0Ch
; ---------------------------------------------------------------------------

loc_10001A34:				; CODE XREF: ldap_create_authzid_control+Fj
		push	esi
		push	eax		; int
		push	dword ptr [esp+0Ch+arg_4] ; char
		push	0		; int
		push	0		; Memory
		push	offset a2_16_840_1_113 ; "2.16.840.1.113730.3.4.16"
		call	sub_100029E0
		add	esp, 14h
		mov	esi, eax
		push	0
		push	0
		push	esi
		push	edi
		call	ldap_set_lderrno
		mov	eax, esi
		pop	esi
		pop	edi
		retn	0Ch
ldap_create_authzid_control endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 601. ldap_parse_authzid_control

; =============== S U B	R O U T	I N E =======================================


		public ldap_parse_authzid_control
ldap_parse_authzid_control proc	near	; DATA XREF: .rdata:off_10020938o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		mov	ebx, [esp+4+arg_0]
		test	ebx, ebx
		jnz	short loc_10001A70
		lea	eax, [ebx+59h]
		pop	ebx
		retn	0Ch
; ---------------------------------------------------------------------------

loc_10001A70:				; CODE XREF: ldap_parse_authzid_control+7j
		push	edi
		mov	edi, [esp+8+arg_4]
		test	edi, edi
		jnz	short loc_10001A8B
		push	edi
		push	edi
		push	5Dh
		push	ebx
		call	ldap_set_lderrno
		lea	eax, [edi+5Dh]
		pop	edi
		pop	ebx
		retn	0Ch
; ---------------------------------------------------------------------------

loc_10001A8B:				; CODE XREF: ldap_parse_authzid_control+17j
		push	esi
		xor	ecx, ecx
		xor	esi, esi
		cmp	[edi], ecx
		jz	loc_10001B34

loc_10001A98:				; CODE XREF: ldap_parse_authzid_control+77j
		test	ecx, ecx
		jnz	short loc_10001ADD
		mov	ecx, [edi+esi*4]
		mov	eax, offset a2_16_840_1_1_0 ; "2.16.840.1.113730.3.4.15"
		mov	ecx, [ecx]

loc_10001AA6:				; CODE XREF: ldap_parse_authzid_control+60j
		mov	dl, [ecx]
		cmp	dl, [eax]
		jnz	short loc_10001AC6
		test	dl, dl
		jz	short loc_10001AC2
		mov	dl, [ecx+1]
		cmp	dl, [eax+1]
		jnz	short loc_10001AC6
		add	ecx, 2
		add	eax, 2
		test	dl, dl
		jnz	short loc_10001AA6

loc_10001AC2:				; CODE XREF: ldap_parse_authzid_control+4Ej
		xor	eax, eax
		jmp	short loc_10001ACB
; ---------------------------------------------------------------------------

loc_10001AC6:				; CODE XREF: ldap_parse_authzid_control+4Aj
					; ldap_parse_authzid_control+56j
		sbb	eax, eax
		or	eax, 1

loc_10001ACB:				; CODE XREF: ldap_parse_authzid_control+64j
		xor	ecx, ecx
		test	eax, eax
		setz	cl
		inc	esi
		cmp	dword ptr [edi+esi*4], 0
		jnz	short loc_10001A98
		test	ecx, ecx
		jz	short loc_10001B34

loc_10001ADD:				; CODE XREF: ldap_parse_authzid_control+3Aj
		mov	esi, [edi+esi*4-4]
		test	esi, esi
		jz	short loc_10001B2C
		cmp	dword ptr [esi+8], 0
		jz	short loc_10001B2C
		mov	eax, [esi+4]
		test	eax, eax
		jz	short loc_10001B2C
		inc	eax
		push	eax
		call	ldap_x_malloc
		mov	edi, eax
		add	esp, 4
		test	edi, edi
		jnz	short loc_10001B15
		push	eax
		push	eax
		push	5Ah
		push	ebx
		call	ldap_set_lderrno
		pop	esi
		lea	eax, [edi+5Ah]
		pop	edi
		pop	ebx
		retn	0Ch
; ---------------------------------------------------------------------------

loc_10001B15:				; CODE XREF: ldap_parse_authzid_control+A0j
		mov	eax, [esi+4]
		inc	eax
		push	eax		; int
		push	dword ptr [esi+8] ; Src
		push	edi		; Dst
		call	sub_100027D0
		mov	eax, [esp+18h+arg_8]
		add	esp, 0Ch
		mov	[eax], edi

loc_10001B2C:				; CODE XREF: ldap_parse_authzid_control+83j
					; ldap_parse_authzid_control+89j ...
		pop	esi
		pop	edi
		xor	eax, eax
		pop	ebx
		retn	0Ch
; ---------------------------------------------------------------------------

loc_10001B34:				; CODE XREF: ldap_parse_authzid_control+32j
					; ldap_parse_authzid_control+7Bj
		push	0
		push	0
		push	5Dh
		push	ebx
		call	ldap_set_lderrno
		pop	esi
		pop	edi
		mov	eax, 5Dh
		pop	ebx
		retn	0Ch
ldap_parse_authzid_control endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  61. ldap_bind

; =============== S U B	R O U T	I N E =======================================


		public ldap_bind
ldap_bind	proc near		; DATA XREF: .rdata:off_10020938o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	eax, [esp+arg_0]
		test	eax, eax
		jz	short loc_10001B6E
		cmp	[esp+arg_C], 80h
		jz	short loc_10001B74
		push	0
		push	0
		push	56h
		push	eax
		call	ldap_set_lderrno

loc_10001B6E:				; CODE XREF: ldap_bind+6j
		or	eax, 0FFFFFFFFh
		retn	10h
; ---------------------------------------------------------------------------

loc_10001B74:				; CODE XREF: ldap_bind+10j
		push	[esp+arg_8]
		push	[esp+4+arg_4]
		push	eax
		call	ldap_simple_bind
		retn	10h
ldap_bind	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  45. ldap_bind_s

; =============== S U B	R O U T	I N E =======================================


		public ldap_bind_s
ldap_bind_s	proc near		; CODE XREF: sub_1000F7B0+29Ep
					; sub_1000F7B0+2CEp
					; DATA XREF: ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		cmp	[esp+arg_C], 80h
		jz	short loc_10001BB1
		push	0
		push	0
		push	56h
		push	[esp+0Ch+arg_0]
		call	ldap_set_lderrno
		mov	eax, 56h
		retn	10h
; ---------------------------------------------------------------------------

loc_10001BB1:				; CODE XREF: ldap_bind_s+8j
		push	[esp+arg_8]
		push	[esp+4+arg_4]
		push	[esp+8+arg_0]
		call	ldap_simple_bind_s
		retn	10h
ldap_bind_s	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  95. ldap_set_rebind_proc

; =============== S U B	R O U T	I N E =======================================


		public ldap_set_rebind_proc
ldap_set_rebind_proc proc near		; DATA XREF: .rdata:off_10020938o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi
		mov	esi, [esp+4+arg_0]
		test	esi, esi
		jnz	short loc_10001BEB
		cmp	dword_100249D0,	esi
		jnz	short loc_10001BE6
		call	sub_1000B840

loc_10001BE6:				; CODE XREF: ldap_set_rebind_proc+Fj
		mov	esi, offset dword_10025280

loc_10001BEB:				; CODE XREF: ldap_set_rebind_proc+7j
		mov	eax, [esi+0C0h]
		test	eax, eax
		jz	short loc_10001C51
		mov	ecx, [esi+0DCh]
		test	ecx, ecx
		jz	short loc_10001C51
		mov	edx, [esi+13Ch]
		test	edx, edx
		jz	short loc_10001C49
		call	edx
		cmp	[esi+15Ch], eax
		jnz	short loc_10001C1B
		inc	dword ptr [esi+194h]
		jmp	short loc_10001C51
; ---------------------------------------------------------------------------

loc_10001C1B:				; CODE XREF: ldap_set_rebind_proc+41j
		mov	eax, [esi+0DCh]
		push	dword ptr [eax+1Ch]
		mov	eax, [esi+0C0h]
		call	eax
		mov	eax, [esi+13Ch]
		add	esp, 4
		call	eax
		mov	[esi+15Ch], eax
		mov	dword ptr [esi+194h], 1
		jmp	short loc_10001C51
; ---------------------------------------------------------------------------

loc_10001C49:				; CODE XREF: ldap_set_rebind_proc+37j
		push	dword ptr [ecx+1Ch]
		call	eax
		add	esp, 4

loc_10001C51:				; CODE XREF: ldap_set_rebind_proc+23j
					; ldap_set_rebind_proc+2Dj ...
		cmp	dword ptr [esi+0C0h], 0
		mov	eax, [esp+4+arg_4]
		mov	[esi+70h], eax
		mov	eax, [esp+4+arg_8]
		mov	[esi+74h], eax
		jz	short loc_10001CB6
		mov	eax, [esi+0DCh]
		test	eax, eax
		jz	short loc_10001CB6
		mov	ecx, [esi+13Ch]
		test	ecx, ecx
		jz	short loc_10001CA8
		call	ecx
		cmp	[esi+15Ch], eax
		jnz	short loc_10001CB6
		dec	dword ptr [esi+194h]
		jnz	short loc_10001CB6
		mov	dword ptr [esi+15Ch], 0FFFFFFFFh
		mov	dword ptr [esi+194h], 0
		mov	eax, [esi+0DCh]

loc_10001CA8:				; CODE XREF: ldap_set_rebind_proc+AAj
		push	dword ptr [eax+1Ch]
		mov	eax, [esi+0C4h]
		call	eax
		add	esp, 4

loc_10001CB6:				; CODE XREF: ldap_set_rebind_proc+96j
					; ldap_set_rebind_proc+A0j ...
		pop	esi
		retn	0Ch
ldap_set_rebind_proc endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10001CC0	proc near		; CODE XREF: sub_10008360+1C9p

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		push	edi
		xor	edi, edi
		mov	eax, [esi+0C0h]
		test	eax, eax
		jz	short loc_10001D2E
		mov	ecx, [esi+0DCh]
		test	ecx, ecx
		jz	short loc_10001D2E
		mov	edx, [esi+13Ch]
		test	edx, edx
		jz	short loc_10001D26
		call	edx
		cmp	[esi+164h], eax
		jnz	short loc_10001CF8
		inc	dword ptr [esi+19Ch]
		jmp	short loc_10001D2E
; ---------------------------------------------------------------------------

loc_10001CF8:				; CODE XREF: sub_10001CC0+2Ej
		mov	eax, [esi+0DCh]
		push	dword ptr [eax+24h]
		mov	eax, [esi+0C0h]
		call	eax
		mov	eax, [esi+13Ch]
		add	esp, 4
		call	eax
		mov	[esi+164h], eax
		mov	dword ptr [esi+19Ch], 1
		jmp	short loc_10001D2E
; ---------------------------------------------------------------------------

loc_10001D26:				; CODE XREF: sub_10001CC0+24j
		push	dword ptr [ecx+24h]
		call	eax
		add	esp, 4

loc_10001D2E:				; CODE XREF: sub_10001CC0+10j
					; sub_10001CC0+1Aj ...
		mov	eax, [esi+64h]
		test	eax, eax
		jz	short loc_10001D4D
		cmp	dword ptr [eax+14h], 3
		jnz	short loc_10001D4D
		cmp	[eax+20h], edi
		jz	short loc_10001D4D
		mov	eax, [eax+1Ch]
		mov	edi, offset Src
		test	eax, eax
		cmovnz	edi, eax

loc_10001D4D:				; CODE XREF: sub_10001CC0+73j
					; sub_10001CC0+79j ...
		cmp	dword ptr [esi+0C0h], 0
		jz	short loc_10001DB7
		mov	eax, [esi+0DCh]
		test	eax, eax
		jz	short loc_10001DB7
		mov	ecx, [esi+13Ch]
		test	ecx, ecx
		jz	short loc_10001DA9
		call	ecx
		cmp	[esi+164h], eax
		jnz	short loc_10001DB7
		dec	dword ptr [esi+19Ch]
		jnz	short loc_10001DB7
		mov	dword ptr [esi+164h], 0FFFFFFFFh
		mov	dword ptr [esi+19Ch], 0
		mov	ecx, [esi+0DCh]
		push	dword ptr [ecx+24h]
		mov	ecx, [esi+0C4h]
		call	ecx
		add	esp, 4
		mov	eax, edi
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10001DA9:				; CODE XREF: sub_10001CC0+A8j
		push	dword ptr [eax+24h]
		mov	eax, [esi+0C4h]
		call	eax
		add	esp, 4

loc_10001DB7:				; CODE XREF: sub_10001CC0+94j
					; sub_10001CC0+9Ej ...
		mov	eax, edi
		pop	edi
		pop	esi
		retn
sub_10001CC0	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 445. ldap_cache_flush

; =============== S U B	R O U T	I N E =======================================


		public ldap_cache_flush
ldap_cache_flush proc near		; DATA XREF: .rdata:off_10020938o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	edx, [esp+arg_0]
		test	edx, edx
		jnz	short loc_10001DD0
		mov	eax, 59h
		retn	0Ch
; ---------------------------------------------------------------------------

loc_10001DD0:				; CODE XREF: ldap_cache_flush+6j
		mov	eax, [esp+arg_4]
		mov	ecx, offset Src
		push	[esp+arg_8]
		test	eax, eax
		cmovnz	ecx, eax
		mov	eax, [edx+110h]
		push	ecx
		push	edx
		call	eax
		add	esp, 0Ch
		retn	0Ch
ldap_cache_flush endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10001E00	proc near		; CODE XREF: sub_10011680+403p

var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
Memory		= dword	ptr -54h
Str1		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
Dest		= byte ptr -38h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 5Ch
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+5Ch+var_4], eax
		mov	eax, [esp+5Ch+arg_4]
		push	ebx
		mov	ebx, [esp+60h+arg_0]
		mov	[esp+60h+var_58], ebx
		cmp	dword ptr [eax+4], 64h
		mov	[esp+60h+var_5C], eax
		jnz	loc_10001FCC
		cmp	dword ptr [ebx+0FCh], 0
		jz	loc_10001FCC
		push	ebp
		push	esi
		push	edi
		push	eax
		push	ebx
		call	ldap_get_dn
		push	14h
		mov	[esp+70h+var_4C], eax
		call	ldap_x_malloc
		add	esp, 4
		mov	esi, eax
		lea	eax, [esp+6Ch+Memory]
		mov	edi, 5
		xor	ebp, ebp
		push	eax
		push	[esp+70h+var_5C]
		push	ebx
		call	ldap_first_attribute
		mov	[esp+6Ch+Str1],	eax
		test	eax, eax
		jz	short loc_10001EE1
		mov	ebx, 4

loc_10001E73:				; CODE XREF: sub_10001E00+DBj
		cmp	ebp, ebx
		jnz	short loc_10001E90
		add	edi, 5
		add	ebx, 5
		lea	eax, ds:0[edi*4]
		push	eax
		push	esi
		call	ldap_x_realloc
		add	esp, 8
		mov	esi, eax

loc_10001E90:				; CODE XREF: sub_10001E00+75j
		push	0Ch
		push	1
		call	ldap_x_calloc
		mov	ecx, [esp+74h+Str1]
		add	esp, 8
		mov	[esi+ebp*4], eax
		mov	dword ptr [eax], 80h
		mov	eax, [esi+ebp*4]
		push	ecx		; Str1
		push	[esp+70h+var_5C] ; int
		push	[esp+74h+var_58] ; int
		mov	[eax+4], ecx
		call	ldap_get_values_len
		mov	ecx, [esi+ebp*4]
		mov	[ecx+8], eax
		push	[esp+6Ch+Memory]
		push	[esp+70h+var_5C]
		push	[esp+74h+var_58]
		call	ldap_next_attribute
		inc	ebp
		mov	[esp+6Ch+Str1],	eax
		test	eax, eax
		jnz	short loc_10001E73
		mov	ebx, [esp+6Ch+var_58]

loc_10001EE1:				; CODE XREF: sub_10001E00+6Cj
		mov	eax, [esp+6Ch+Memory]
		test	eax, eax
		jz	short loc_10001EF1
		push	0		; int
		push	eax		; Memory
		call	ber_free

loc_10001EF1:				; CODE XREF: sub_10001E00+E7j
		push	0
		push	0
		push	ebx
		call	ldap_get_lderrno
		test	eax, eax
		jz	short loc_10001F1A
		push	1
		push	esi
		call	ldap_mods_free
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		mov	ecx, [esp+5Ch+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 5Ch
		retn
; ---------------------------------------------------------------------------

loc_10001F1A:				; CODE XREF: sub_10001E00+FDj
		lea	eax, [edi-1]
		cmp	ebp, eax
		jnz	short loc_10001F34
		lea	eax, ds:4[edi*4]
		push	eax
		push	esi
		call	ldap_x_realloc
		add	esp, 8
		mov	esi, eax

loc_10001F34:				; CODE XREF: sub_10001E00+11Fj
		push	0Ch
		push	1
		call	ldap_x_calloc
		mov	[esi+ebp*4], eax
		push	0		; Time
		mov	dword ptr [eax], 80h
		mov	eax, [esi+ebp*4]
		mov	dword ptr [eax+4], offset aCachedtime ;	"cachedtime"
		call	ds:_time64
		push	edx
		push	eax
		lea	eax, [esp+80h+Dest]
		push	offset Format	; "%ld"
		push	eax		; Dest
		call	ds:sprintf
		lea	eax, [esp+88h+Dest]
		add	esp, 1Ch
		mov	ecx, eax
		mov	[esp+6Ch+var_44], eax
		lea	edx, [ecx+1]
		lea	ebx, [ebx+0]

loc_10001F80:				; CODE XREF: sub_10001E00+185j
		mov	al, [ecx]
		inc	ecx
		test	al, al
		jnz	short loc_10001F80
		sub	ecx, edx
		mov	[esp+6Ch+var_3C], 0
		mov	[esp+6Ch+var_48], ecx
		lea	eax, [esp+6Ch+var_48]
		mov	[esp+6Ch+var_40], eax
		lea	ecx, [esp+6Ch+var_40]
		mov	eax, [esi+ebp*4]
		push	esi
		push	[esp+70h+var_4C]
		mov	[eax+8], ecx
		mov	eax, [esp+74h+var_5C]
		mov	dword ptr [esi+ebp*4+4], 0
		push	dword ptr [eax+4]
		mov	eax, [ebx+0FCh]
		push	0FFFFFFFFh
		push	ebx
		call	eax
		add	esp, 14h
		pop	edi
		pop	esi
		pop	ebp

loc_10001FCC:				; CODE XREF: sub_10001E00+23j
					; sub_10001E00+30j
		mov	ecx, [esp+60h+var_4]
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 5Ch
		retn
sub_10001E00	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 447. ldap_charray_add

; =============== S U B	R O U T	I N E =======================================


		public ldap_charray_add
ldap_charray_add proc near		; DATA XREF: .rdata:off_10020938o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		push	edi
		mov	edi, [esp+8+arg_0]
		mov	ecx, [edi]
		test	ecx, ecx
		jnz	short loc_10002008
		push	8
		call	ldap_x_malloc
		add	esp, 4
		mov	[edi], eax
		test	eax, eax
		jnz	short loc_10002004

loc_10001FFC:				; CODE XREF: ldap_charray_add+4Ej
		pop	edi
		or	eax, 0FFFFFFFFh
		pop	esi
		retn	8
; ---------------------------------------------------------------------------

loc_10002004:				; CODE XREF: ldap_charray_add+1Aj
		xor	esi, esi
		jmp	short loc_10002030
; ---------------------------------------------------------------------------

loc_10002008:				; CODE XREF: ldap_charray_add+Aj
		xor	esi, esi
		lea	ebx, [ebx+0]

loc_10002010:				; CODE XREF: ldap_charray_add+37j
		cmp	dword ptr [ecx+esi*4], 0
		jz	short loc_10002019
		inc	esi
		jmp	short loc_10002010
; ---------------------------------------------------------------------------

loc_10002019:				; CODE XREF: ldap_charray_add+34j
		lea	eax, ds:8[esi*4]
		push	eax
		push	ecx
		call	ldap_x_realloc
		add	esp, 8
		mov	[edi], eax
		test	eax, eax
		jz	short loc_10001FFC

loc_10002030:				; CODE XREF: ldap_charray_add+26j
		mov	ecx, [edi]
		mov	eax, [esp+8+arg_4]
		mov	[ecx+esi*4], eax
		mov	eax, [edi]
		pop	edi
		mov	dword ptr [eax+esi*4+4], 0
		xor	eax, eax
		pop	esi
		retn	8
ldap_charray_add endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 448. ldap_charray_dup

; =============== S U B	R O U T	I N E =======================================


		public ldap_charray_dup
ldap_charray_dup proc near		; DATA XREF: .rdata:off_10020938o

arg_0		= dword	ptr  4

		push	ebx
		push	esi
		mov	esi, [esp+8+arg_0]
		xor	eax, eax
		cmp	[esi], eax
		jz	short loc_10002067
		lea	esp, [esp+0]

loc_10002060:				; CODE XREF: ldap_charray_dup+15j
		inc	eax
		cmp	dword ptr [esi+eax*4], 0
		jnz	short loc_10002060

loc_10002067:				; CODE XREF: ldap_charray_dup+Aj
		lea	eax, ds:4[eax*4]
		push	eax
		call	ldap_x_malloc
		mov	ebx, eax
		add	esp, 4
		test	ebx, ebx
		jnz	short loc_10002082
		pop	esi
		pop	ebx
		retn	4
; ---------------------------------------------------------------------------

loc_10002082:				; CODE XREF: ldap_charray_dup+2Bj
		push	ebp
		push	edi
		xor	edi, edi
		cmp	[esi], edi
		jz	short loc_100020B2
		mov	eax, esi
		xor	ebp, ebp
		mov	edi, edi

loc_10002090:				; CODE XREF: ldap_charray_dup+60j
		push	dword ptr [eax]
		call	sub_1000BAB0
		add	esp, 4
		mov	[ebx+ebp], eax
		test	eax, eax
		jz	short loc_100020C2
		inc	edi
		lea	ebp, ds:0[edi*4]
		cmp	dword ptr [esi+ebp], 0
		lea	eax, [esi+ebp]
		jnz	short loc_10002090

loc_100020B2:				; CODE XREF: ldap_charray_dup+38j
		mov	dword ptr [ebx+edi*4], 0
		mov	eax, ebx
		pop	edi
		pop	ebp
		pop	esi
		pop	ebx
		retn	4
; ---------------------------------------------------------------------------

loc_100020C2:				; CODE XREF: ldap_charray_dup+4Fj
		xor	esi, esi
		test	edi, edi
		jle	short loc_100020D8

loc_100020C8:				; CODE XREF: ldap_charray_dup+86j
		push	dword ptr [ebx+esi*4]
		call	ldap_x_free
		inc	esi
		add	esp, 4
		cmp	esi, edi
		jl	short loc_100020C8

loc_100020D8:				; CODE XREF: ldap_charray_dup+76j
		push	ebx
		call	ldap_x_free
		add	esp, 4
		xor	eax, eax
		pop	edi
		pop	ebp
		pop	esi
		pop	ebx
		retn	4
ldap_charray_dup endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 449. ldap_charray_free

; =============== S U B	R O U T	I N E =======================================


		public ldap_charray_free
ldap_charray_free proc near		; CODE XREF: sub_10005B60+DDp
					; DATA XREF: .rdata:off_10020938o

arg_0		= dword	ptr  4

		push	edi
		mov	edi, [esp+4+arg_0]
		test	edi, edi
		jz	short loc_10002122
		cmp	dword ptr [edi], 0
		push	esi
		mov	esi, edi
		jz	short loc_10002118

loc_10002101:				; CODE XREF: ldap_charray_free+26j
		mov	eax, [esi]
		test	eax, eax
		jz	short loc_10002110
		push	eax
		call	ldap_x_free
		add	esp, 4

loc_10002110:				; CODE XREF: ldap_charray_free+15j
		add	esi, 4
		cmp	dword ptr [esi], 0
		jnz	short loc_10002101

loc_10002118:				; CODE XREF: ldap_charray_free+Fj
		push	edi
		call	ldap_x_free
		add	esp, 4
		pop	esi

loc_10002122:				; CODE XREF: ldap_charray_free+7j
		pop	edi
		retn	4
ldap_charray_free endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 470. ldap_charray_inlist

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	ldap_charray_inlist(int, char *Str1)
		public ldap_charray_inlist
ldap_charray_inlist proc near		; DATA XREF: .rdata:off_10020938o

arg_0		= dword	ptr  4
Str1		= dword	ptr  8

		push	edi
		mov	edi, [esp+4+arg_0]
		test	edi, edi
		jnz	short loc_1000213F
		xor	eax, eax
		pop	edi
		retn	8
; ---------------------------------------------------------------------------

loc_1000213F:				; CODE XREF: ldap_charray_inlist+7j
		push	ebx
		push	ebp
		push	esi
		xor	esi, esi
		cmp	[edi], esi
		jz	short loc_1000216A
		mov	ebx, [esp+10h+Str1]
		mov	eax, edi
		mov	ebp, ds:_stricmp

loc_10002154:				; CODE XREF: ldap_charray_inlist+38j
		push	dword ptr [eax]	; Str2
		push	ebx		; Str1
		call	ebp ; _stricmp
		add	esp, 8
		test	eax, eax
		jz	short loc_10002173
		inc	esi
		cmp	dword ptr [edi+esi*4], 0
		lea	eax, [edi+esi*4]
		jnz	short loc_10002154

loc_1000216A:				; CODE XREF: ldap_charray_inlist+16j
		pop	esi
		pop	ebp
		pop	ebx
		xor	eax, eax
		pop	edi
		retn	8
; ---------------------------------------------------------------------------

loc_10002173:				; CODE XREF: ldap_charray_inlist+2Ej
		pop	esi
		pop	ebp
		pop	ebx
		mov	eax, 1
		pop	edi
		retn	8
ldap_charray_inlist endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 420. ldap_charray_merge

; =============== S U B	R O U T	I N E =======================================


		public ldap_charray_merge
ldap_charray_merge proc	near		; CODE XREF: ldap_multisort_entries+100p
					; DATA XREF: .rdata:off_10020938o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebx
		mov	ebx, [esp+4+arg_4]
		test	ebx, ebx
		jz	loc_10002219
		cmp	dword ptr [ebx], 0
		jz	loc_10002219
		push	ebp
		mov	ebp, [esp+8+arg_0]
		push	edi
		xor	edi, edi
		mov	ecx, [ebp+0]
		test	ecx, ecx
		jz	short loc_100021AE

loc_100021A5:				; CODE XREF: ldap_charray_merge+2Cj
		cmp	dword ptr [ecx+edi*4], 0
		jz	short loc_100021AE
		inc	edi
		jmp	short loc_100021A5
; ---------------------------------------------------------------------------

loc_100021AE:				; CODE XREF: ldap_charray_merge+23j
					; ldap_charray_merge+29j
		push	esi
		xor	esi, esi

loc_100021B1:				; CODE XREF: ldap_charray_merge+36j
		inc	esi
		cmp	dword ptr [ebx+esi*4], 0
		jnz	short loc_100021B1
		lea	eax, [esi+edi]
		shl	eax, 2
		mov	[esp+10h+arg_4], eax
		add	eax, 4
		push	eax
		push	ecx
		call	ldap_x_realloc
		add	esp, 8
		mov	[ebp+0], eax
		test	eax, eax
		jnz	short loc_100021E0
		pop	esi
		pop	edi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		retn	8
; ---------------------------------------------------------------------------

loc_100021E0:				; CODE XREF: ldap_charray_merge+54j
		xor	edx, edx
		test	esi, esi
		jle	short loc_10002202
		shl	edi, 2
		lea	esp, [esp+0]

loc_100021F0:				; CODE XREF: ldap_charray_merge+80j
		mov	ecx, [ebp+0]
		lea	edi, [edi+4]
		mov	eax, [ebx+edx*4]
		inc	edx
		mov	[edi+ecx-4], eax
		cmp	edx, esi
		jl	short loc_100021F0

loc_10002202:				; CODE XREF: ldap_charray_merge+64j
		mov	eax, [ebp+0]
		mov	ecx, [esp+10h+arg_4]
		pop	esi
		pop	edi
		pop	ebp
		mov	dword ptr [ecx+eax], 0
		xor	eax, eax
		pop	ebx
		retn	8
; ---------------------------------------------------------------------------

loc_10002219:				; CODE XREF: ldap_charray_merge+7j
					; ldap_charray_merge+10j
		xor	eax, eax
		pop	ebx
		retn	8
ldap_charray_merge endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 471. ldap_charray_position

; =============== S U B	R O U T	I N E =======================================


		public ldap_charray_position
ldap_charray_position proc near		; DATA XREF: .rdata:off_10020938o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebx
		push	ebp
		push	esi
		push	edi
		mov	edi, [esp+10h+arg_0]
		xor	esi, esi
		cmp	[edi], esi
		jz	short loc_10002256
		mov	ebx, [esp+10h+arg_4]
		mov	eax, edi
		mov	ebp, ds:_stricmp
		lea	ebx, [ebx+0]

loc_10002240:				; CODE XREF: ldap_charray_position+34j
		push	dword ptr [eax]	; Str2
		push	ebx		; Str1
		call	ebp ; _stricmp
		add	esp, 8
		test	eax, eax
		jz	short loc_10002260
		inc	esi
		cmp	dword ptr [edi+esi*4], 0
		lea	eax, [edi+esi*4]
		jnz	short loc_10002240

loc_10002256:				; CODE XREF: ldap_charray_position+Cj
		pop	edi
		pop	esi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		retn	8
; ---------------------------------------------------------------------------

loc_10002260:				; CODE XREF: ldap_charray_position+2Aj
		pop	edi
		mov	eax, esi
		pop	esi
		pop	ebp
		pop	ebx
		retn	8
ldap_charray_position endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 446. ldap_str2charray

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	ldap_str2charray(char *, char *Str)
		public ldap_str2charray
ldap_str2charray proc near		; DATA XREF: .rdata:off_10020938o

arg_0		= dword	ptr  4
Str		= dword	ptr  8

		push	ebx
		mov	ebx, [esp+4+arg_0]
		push	ebp
		mov	ebp, [esp+8+Str]
		push	esi
		cmp	byte ptr [ebx],	0
		mov	esi, ebx
		push	edi
		mov	edi, 1
		jz	short loc_100022A9
		mov	ebx, ds:strchr
		mov	edi, edi

loc_10002290:				; CODE XREF: ldap_str2charray+33j
		movsx	eax, byte ptr [esi]
		push	eax		; Val
		push	ebp		; Str
		call	ebx ; strchr
		add	esp, 8
		test	eax, eax
		jz	short loc_1000229F
		inc	edi

loc_1000229F:				; CODE XREF: ldap_str2charray+2Cj
		inc	esi
		cmp	byte ptr [esi],	0
		jnz	short loc_10002290
		mov	ebx, [esp+10h+arg_0]

loc_100022A9:				; CODE XREF: ldap_str2charray+16j
		lea	eax, ds:4[edi*4]
		push	eax
		call	ldap_x_malloc
		mov	edi, eax
		add	esp, 4
		test	edi, edi
		jz	short loc_1000232A
		push	ebp		; Delim
		push	ebx		; Str
		xor	esi, esi
		call	ds:strtok
		add	esp, 8
		test	eax, eax
		jz	short loc_100022F8
		mov	ebx, edi

loc_100022D2:				; CODE XREF: ldap_str2charray+86j
		push	eax
		call	sub_1000BAB0
		inc	esi
		mov	[ebx], eax
		add	esp, 4
		cmp	dword ptr [edi+esi*4-4], 0
		lea	ebx, [edi+esi*4]
		jz	short loc_10002308
		push	ebp		; Delim
		push	0		; Str
		call	ds:strtok
		add	esp, 8
		test	eax, eax
		jnz	short loc_100022D2

loc_100022F8:				; CODE XREF: ldap_str2charray+5Ej
		mov	dword ptr [edi+esi*4], 0
		mov	eax, edi
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn	8
; ---------------------------------------------------------------------------

loc_10002308:				; CODE XREF: ldap_str2charray+76j
		lea	ebx, [esi-1]
		xor	esi, esi
		test	ebx, ebx
		jle	short loc_10002321

loc_10002311:				; CODE XREF: ldap_str2charray+AFj
		push	dword ptr [edi+esi*4]
		call	ldap_x_free
		inc	esi
		add	esp, 4
		cmp	esi, ebx
		jl	short loc_10002311

loc_10002321:				; CODE XREF: ldap_str2charray+9Fj
		push	edi
		call	ldap_x_free
		add	esp, 4

loc_1000232A:				; CODE XREF: ldap_str2charray+4Dj
		pop	edi
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		retn	8
ldap_str2charray endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  19. ldap_compare

; =============== S U B	R O U T	I N E =======================================


		public ldap_compare
ldap_compare	proc near		; DATA XREF: .rdata:off_10020938o

var_8		= dword	ptr -8
var_4		= dword	ptr -4
Memory		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 8
		mov	eax, [esp+8+arg_C]
		mov	[esp+8+var_4], eax
		test	eax, eax
		jnz	short loc_10002354
		mov	[esp+8+var_8], eax
		jmp	short loc_10002363
; ---------------------------------------------------------------------------

loc_10002354:				; CODE XREF: ldap_compare+Dj
		lea	edx, [eax+1]

loc_10002357:				; CODE XREF: ldap_compare+1Cj
		mov	cl, [eax]
		inc	eax
		test	cl, cl
		jnz	short loc_10002357
		sub	eax, edx
		mov	[esp+8+var_8], eax

loc_10002363:				; CODE XREF: ldap_compare+12j
		lea	eax, [esp+8+arg_C]
		push	eax		; int
		push	0		; int
		push	0		; int
		lea	eax, [esp+14h+var_8]
		push	eax		; int
		push	[esp+18h+arg_8]	; int
		push	[esp+1Ch+arg_4]	; int
		push	[esp+20h+Memory] ; Memory
		call	ldap_compare_ext
		or	ecx, 0FFFFFFFFh
		test	eax, eax
		cmovz	ecx, [esp+8+arg_C]
		mov	eax, ecx
		add	esp, 8
		retn	10h
ldap_compare	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 513. ldap_compare_ext

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	ldap_compare_ext(void *Memory, int, int, int, int, int,	int)
		public ldap_compare_ext
ldap_compare_ext proc near		; CODE XREF: ldap_compare+3Dp
					; ldap_compare_ext_s+20p ...

Memory		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_18		= dword	ptr  1Ch

		push	esi
		mov	esi, [esp+4+Memory]
		test	esi, esi
		jnz	short loc_100023B0
		lea	eax, [esi+59h]
		pop	esi
		retn	1Ch
; ---------------------------------------------------------------------------

loc_100023B0:				; CODE XREF: ldap_compare_ext+7j
		cmp	[esp+4+arg_8], 0
		push	ebx
		push	edi
		jz	loc_100026B4
		mov	ebx, [esp+0Ch+arg_C]
		test	ebx, ebx
		jz	loc_100026B4
		cmp	dword ptr [ebx], 0
		jz	loc_100026B4
		mov	edi, [esp+0Ch+arg_18]
		test	edi, edi
		jz	loc_100026B4
		mov	eax, [esp+0Ch+arg_4]
		test	eax, eax
		mov	ecx, [esi+0C0h]
		push	ebp
		mov	ebp, offset Src
		cmovnz	ebp, eax
		test	ecx, ecx
		jz	short loc_10002453
		mov	eax, [esi+0DCh]
		test	eax, eax
		jz	short loc_10002453
		mov	edx, [esi+13Ch]
		test	edx, edx
		jz	short loc_1000244B
		call	edx
		cmp	[esi+148h], eax
		jnz	short loc_1000241D
		inc	dword ptr [esi+180h]
		jmp	short loc_10002453
; ---------------------------------------------------------------------------

loc_1000241D:				; CODE XREF: ldap_compare_ext+73j
		mov	eax, [esi+0DCh]
		push	dword ptr [eax+8]
		mov	eax, [esi+0C0h]
		call	eax
		mov	eax, [esi+13Ch]
		add	esp, 4
		call	eax
		mov	[esi+148h], eax
		mov	dword ptr [esi+180h], 1
		jmp	short loc_10002453
; ---------------------------------------------------------------------------

loc_1000244B:				; CODE XREF: ldap_compare_ext+69j
		push	dword ptr [eax+8]
		call	ecx
		add	esp, 4

loc_10002453:				; CODE XREF: ldap_compare_ext+55j
					; ldap_compare_ext+5Fj	...
		inc	dword ptr [esi+30h]
		mov	eax, [esi+30h]
		mov	[edi], eax
		cmp	dword ptr [esi+0C0h], 0
		jz	short loc_100024B2
		mov	eax, [esi+0DCh]
		test	eax, eax
		jz	short loc_100024B2
		mov	ecx, [esi+13Ch]
		test	ecx, ecx
		jz	short loc_100024A4
		call	ecx
		cmp	[esi+148h], eax
		jnz	short loc_100024B2
		dec	dword ptr [esi+180h]
		jnz	short loc_100024B2
		mov	dword ptr [esi+148h], 0FFFFFFFFh
		mov	dword ptr [esi+180h], 0
		mov	eax, [esi+0DCh]

loc_100024A4:				; CODE XREF: ldap_compare_ext+D6j
		push	dword ptr [eax+8]
		mov	eax, [esi+0C4h]
		call	eax
		add	esp, 4

loc_100024B2:				; CODE XREF: ldap_compare_ext+C2j
					; ldap_compare_ext+CCj	...
		cmp	dword ptr [esi+0E0h], 0
		jz	loc_10002601
		cmp	dword ptr [esi+0F8h], 0
		jz	loc_10002601
		mov	eax, [esi+0C0h]
		test	eax, eax
		jz	short loc_10002530
		mov	ecx, [esi+0DCh]
		test	ecx, ecx
		jz	short loc_10002530
		mov	edx, [esi+13Ch]
		test	edx, edx
		jz	short loc_10002529
		call	edx
		cmp	[esi+140h], eax
		jnz	short loc_100024FC
		inc	dword ptr [esi+178h]
		jmp	short loc_10002530
; ---------------------------------------------------------------------------

loc_100024FC:				; CODE XREF: ldap_compare_ext+152j
		mov	eax, [esi+0DCh]
		push	dword ptr [eax]
		mov	eax, [esi+0C0h]
		call	eax
		mov	eax, [esi+13Ch]
		add	esp, 4
		call	eax
		mov	[esi+140h], eax
		mov	dword ptr [esi+178h], 1
		jmp	short loc_10002530
; ---------------------------------------------------------------------------

loc_10002529:				; CODE XREF: ldap_compare_ext+148j
		push	dword ptr [ecx]
		call	eax
		add	esp, 4

loc_10002530:				; CODE XREF: ldap_compare_ext+134j
					; ldap_compare_ext+13Ej ...
		mov	eax, [esi+0F8h]
		push	ebx
		push	[esp+14h+arg_8]
		push	ebp
		push	6Eh
		push	dword ptr [edi]
		push	esi
		call	eax
		add	esp, 18h
		test	eax, eax
		jz	short loc_100025AB
		mov	[edi], eax
		cmp	dword ptr [esi+0C0h], 0
		jz	short loc_100025A2
		mov	eax, [esi+0DCh]
		test	eax, eax
		jz	short loc_100025A2
		mov	ecx, [esi+13Ch]
		test	ecx, ecx
		jz	short loc_10002595
		call	ecx
		cmp	[esi+140h], eax
		jnz	short loc_100025A2
		dec	dword ptr [esi+178h]
		jnz	short loc_100025A2
		mov	dword ptr [esi+140h], 0FFFFFFFFh
		mov	dword ptr [esi+178h], 0
		mov	eax, [esi+0DCh]

loc_10002595:				; CODE XREF: ldap_compare_ext+1C7j
		push	dword ptr [eax]
		mov	eax, [esi+0C4h]
		call	eax
		add	esp, 4

loc_100025A2:				; CODE XREF: ldap_compare_ext+1B3j
					; ldap_compare_ext+1BDj ...
		xor	eax, eax

loc_100025A4:				; CODE XREF: ldap_compare_ext+271j
		pop	ebp
		pop	edi
		pop	ebx
		pop	esi
		retn	1Ch
; ---------------------------------------------------------------------------

loc_100025AB:				; CODE XREF: ldap_compare_ext+1A8j
		cmp	dword ptr [esi+0C0h], 0
		jz	short loc_10002601
		mov	eax, [esi+0DCh]
		test	eax, eax
		jz	short loc_10002601
		mov	ecx, [esi+13Ch]
		test	ecx, ecx
		jz	short loc_100025F4
		call	ecx
		cmp	[esi+140h], eax
		jnz	short loc_10002601
		dec	dword ptr [esi+178h]
		jnz	short loc_10002601
		mov	dword ptr [esi+140h], 0FFFFFFFFh
		mov	dword ptr [esi+178h], 0
		mov	eax, [esi+0DCh]

loc_100025F4:				; CODE XREF: ldap_compare_ext+226j
		push	dword ptr [eax]
		mov	eax, [esi+0C4h]
		call	eax
		add	esp, 4

loc_10002601:				; CODE XREF: ldap_compare_ext+119j
					; ldap_compare_ext+126j ...
		lea	eax, [esp+10h+Memory]
		push	eax
		push	esi
		call	sub_1000EF40
		add	esp, 8
		test	eax, eax
		jnz	short loc_100025A4
		push	dword ptr [ebx]
		push	dword ptr [ebx+4]
		push	[esp+18h+arg_8]
		push	ebp
		push	6Eh
		push	dword ptr [edi]
		push	offset aItSSo	; "{it{s{so}}"
		push	[esp+2Ch+Memory]
		call	ber_printf
		add	esp, 20h
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_1000265A
		push	0
		push	0
		push	53h
		push	esi
		call	ldap_set_lderrno
		push	1		; int
		push	[esp+14h+Memory] ; Memory
		call	ber_free
		pop	ebp
		pop	edi
		pop	ebx
		mov	eax, 53h
		pop	esi
		retn	1Ch
; ---------------------------------------------------------------------------

loc_1000265A:				; CODE XREF: ldap_compare_ext+295j
		push	[esp+10h+Memory]
		push	1
		push	[esp+18h+arg_10]
		push	esi
		call	sub_10002DD0
		mov	ebx, eax
		add	esp, 10h
		test	ebx, ebx
		jz	short loc_10002687
		push	1		; int
		push	[esp+14h+Memory] ; Memory
		call	ber_free
		pop	ebp
		pop	edi
		mov	eax, ebx
		pop	ebx
		pop	esi
		retn	1Ch
; ---------------------------------------------------------------------------

loc_10002687:				; CODE XREF: ldap_compare_ext+2D1j
		push	[esp+10h+Memory]
		push	ebp
		push	6Eh
		push	dword ptr [edi]
		push	esi
		call	sub_1000FC30
		add	esp, 14h
		mov	[edi], eax
		test	eax, eax
		jns	loc_100025A2
		push	0
		push	0
		push	esi
		call	ldap_get_lderrno
		pop	ebp
		pop	edi
		pop	ebx
		pop	esi
		retn	1Ch
; ---------------------------------------------------------------------------

loc_100026B4:				; CODE XREF: ldap_compare_ext+17j
					; ldap_compare_ext+23j	...
		push	0
		push	0
		push	59h
		push	esi
		call	ldap_set_lderrno
		pop	edi
		pop	ebx
		mov	eax, 59h
		pop	esi
		retn	1Ch
ldap_compare_ext endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 514. ldap_compare_ext_s

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	ldap_compare_ext_s(void	*Memory, int, int, int,	int, int)
		public ldap_compare_ext_s
ldap_compare_ext_s proc	near		; DATA XREF: .rdata:off_10020938o

var_4		= dword	ptr -4
Memory		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		push	ecx
		push	esi
		mov	esi, [esp+8+Memory]
		lea	eax, [esp+8+var_4]
		push	eax		; int
		push	[esp+0Ch+arg_14] ; int
		push	[esp+10h+arg_10] ; int
		push	[esp+14h+arg_C]	; int
		push	[esp+18h+arg_8]	; int
		push	[esp+1Ch+arg_4]	; int
		push	esi		; Memory
		call	ldap_compare_ext
		test	eax, eax
		jnz	short loc_1000272C
		lea	eax, [esp+8+arg_14]
		push	eax
		push	0
		push	1
		push	[esp+14h+var_4]
		push	esi
		call	ldap_result
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_10002720
		push	0
		push	0
		push	esi
		call	ldap_get_lderrno
		pop	esi
		pop	ecx
		retn	18h
; ---------------------------------------------------------------------------

loc_10002720:				; CODE XREF: ldap_compare_ext_s+3Fj
		push	1
		push	[esp+0Ch+arg_14]
		push	esi
		call	ldap_result2error

loc_1000272C:				; CODE XREF: ldap_compare_ext_s+27j
		pop	esi
		pop	ecx
		retn	18h
ldap_compare_ext_s endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  52. ldap_compare_s

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	ldap_compare_s(void *Memory, int, int, int)
		public ldap_compare_s
ldap_compare_s	proc near		; DATA XREF: .rdata:off_10020938o

var_8		= dword	ptr -8
var_4		= dword	ptr -4
Memory		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 8
		mov	ecx, [esp+8+arg_C]
		mov	[esp+8+var_4], ecx
		test	ecx, ecx
		jnz	short loc_10002754
		mov	[esp+8+var_8], ecx
		jmp	short loc_10002763
; ---------------------------------------------------------------------------

loc_10002754:				; CODE XREF: ldap_compare_s+Dj
		lea	edx, [ecx+1]

loc_10002757:				; CODE XREF: ldap_compare_s+1Cj
		mov	al, [ecx]
		inc	ecx
		test	al, al
		jnz	short loc_10002757
		sub	ecx, edx
		mov	[esp+8+var_8], ecx

loc_10002763:				; CODE XREF: ldap_compare_s+12j
		push	esi
		mov	esi, [esp+0Ch+Memory]
		lea	eax, [esp+0Ch+arg_C]
		push	eax		; int
		push	0		; int
		push	0		; int
		lea	eax, [esp+18h+var_8]
		push	eax		; int
		push	[esp+1Ch+arg_8]	; int
		push	[esp+20h+arg_4]	; int
		push	esi		; Memory
		call	ldap_compare_ext
		test	eax, eax
		jnz	short loc_100027BD
		lea	eax, [esp+0Ch+arg_8]
		push	eax
		push	0
		push	1
		push	[esp+18h+arg_C]
		push	esi
		call	ldap_result
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_100027B1
		push	0
		push	0
		push	esi
		call	ldap_get_lderrno
		pop	esi
		add	esp, 8
		retn	10h
; ---------------------------------------------------------------------------

loc_100027B1:				; CODE XREF: ldap_compare_s+5Ej
		push	1
		push	[esp+10h+arg_8]
		push	esi
		call	ldap_result2error

loc_100027BD:				; CODE XREF: ldap_compare_s+46j
		pop	esi
		add	esp, 8
		retn	10h
ldap_compare_s	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_100027D0(void	*Dst, void *Src, int)
sub_100027D0	proc near		; CODE XREF: ldap_parse_authzid_control+BEp

Dst		= dword	ptr  4
Src		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	ecx, [esp+Src]
		push	ebx
		push	edi
		mov	edi, ecx
		lea	edx, [edi+1]
		jmp	short loc_100027E0
; ---------------------------------------------------------------------------
		align 10h

loc_100027E0:				; CODE XREF: sub_100027D0+Bj
					; sub_100027D0+15j
		mov	al, [edi]
		inc	edi
		test	al, al
		jnz	short loc_100027E0
		mov	ebx, [esp+8+arg_8]
		sub	edi, edx
		test	ebx, ebx
		jz	short loc_10002810
		cmp	edi, ebx
		jb	short loc_100027F8
		dec	ebx
		jmp	short loc_100027FA
; ---------------------------------------------------------------------------

loc_100027F8:				; CODE XREF: sub_100027D0+23j
		mov	ebx, edi

loc_100027FA:				; CODE XREF: sub_100027D0+26j
		push	esi
		mov	esi, [esp+0Ch+Dst]
		push	ebx		; Size
		push	ecx		; Src
		push	esi		; Dst
		call	ds:memmove
		add	esp, 0Ch
		mov	byte ptr [ebx+esi], 0
		pop	esi

loc_10002810:				; CODE XREF: sub_100027D0+1Fj
		mov	eax, edi
		pop	edi
		pop	ebx
		retn
sub_100027D0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10002820	proc near		; CODE XREF: sub_10002AA0+9Bp

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_0]
		push	edi
		test	esi, esi
		jz	loc_100028B0
		mov	edi, [esp+8+arg_4]
		test	edi, edi
		jz	short loc_100028B0
		mov	al, [edi+0Ch]
		mov	[esi+0Ch], al
		push	dword ptr [edi]
		call	sub_1000BAB0
		add	esp, 4
		mov	[esi], eax
		test	eax, eax
		jnz	short loc_10002854
		pop	edi
		mov	eax, 5Ah
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10002854:				; CODE XREF: sub_10002820+2Aj
		cmp	dword ptr [edi+8], 0
		push	ebx
		mov	ebx, [edi+4]
		jz	short loc_1000289C
		test	ebx, ebx
		jz	short loc_1000289C
		push	ebx
		mov	[esi+4], ebx
		call	ldap_x_malloc
		add	esp, 4
		mov	[esi+8], eax
		test	eax, eax
		jnz	short loc_10002888
		push	dword ptr [esi]
		call	ldap_x_free
		add	esp, 4
		mov	eax, 5Ah
		pop	ebx
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10002888:				; CODE XREF: sub_10002820+53j
		push	ebx		; Size
		push	dword ptr [edi+8] ; Src
		push	eax		; Dst
		call	ds:memmove
		add	esp, 0Ch
		xor	eax, eax
		pop	ebx
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1000289C:				; CODE XREF: sub_10002820+3Cj
					; sub_10002820+40j
		pop	ebx
		pop	edi
		mov	dword ptr [esi+4], 0
		xor	eax, eax
		mov	dword ptr [esi+8], 0
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_100028B0:				; CODE XREF: sub_10002820+8j
					; sub_10002820+14j
		pop	edi
		mov	eax, 59h
		pop	esi
		retn
sub_10002820	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 485. ldap_control_free

; =============== S U B	R O U T	I N E =======================================


		public ldap_control_free
ldap_control_free proc near		; DATA XREF: .rdata:off_10020938o

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		test	esi, esi
		jz	short loc_100028F1
		mov	eax, [esi]
		test	eax, eax
		jz	short loc_100028D8
		push	eax
		call	ldap_x_free
		add	esp, 4

loc_100028D8:				; CODE XREF: ldap_control_free+Dj
		mov	eax, [esi+8]
		test	eax, eax
		jz	short loc_100028E8
		push	eax
		call	ldap_x_free
		add	esp, 4

loc_100028E8:				; CODE XREF: ldap_control_free+1Dj
		push	esi
		call	ldap_x_free
		add	esp, 4

loc_100028F1:				; CODE XREF: ldap_control_free+7j
		pop	esi
		retn	4
ldap_control_free endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 486. ldap_controls_free

; =============== S U B	R O U T	I N E =======================================


		public ldap_controls_free
ldap_controls_free proc	near		; CODE XREF: sub_10002AA0+Dp
					; sub_10002AA0+D9p ...

arg_0		= dword	ptr  4

		push	ebx
		mov	ebx, [esp+4+arg_0]
		test	ebx, ebx
		jz	short loc_10002956
		push	edi
		xor	edi, edi
		cmp	[ebx], edi
		jz	short loc_1000294C
		mov	eax, ebx
		push	esi

loc_10002913:				; CODE XREF: ldap_controls_free+49j
		mov	esi, [eax]
		test	esi, esi
		jz	short loc_10002941
		mov	eax, [esi]
		test	eax, eax
		jz	short loc_10002928
		push	eax
		call	ldap_x_free
		add	esp, 4

loc_10002928:				; CODE XREF: ldap_controls_free+1Dj
		mov	eax, [esi+8]
		test	eax, eax
		jz	short loc_10002938
		push	eax
		call	ldap_x_free
		add	esp, 4

loc_10002938:				; CODE XREF: ldap_controls_free+2Dj
		push	esi
		call	ldap_x_free
		add	esp, 4

loc_10002941:				; CODE XREF: ldap_controls_free+17j
		inc	edi
		cmp	dword ptr [ebx+edi*4], 0
		lea	eax, [ebx+edi*4]
		jnz	short loc_10002913
		pop	esi

loc_1000294C:				; CODE XREF: ldap_controls_free+Ej
		push	ebx
		call	ldap_x_free
		add	esp, 4
		pop	edi

loc_10002956:				; CODE XREF: ldap_controls_free+7j
		pop	ebx
		retn	4
ldap_controls_free endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 538. ldap_find_control

; =============== S U B	R O U T	I N E =======================================


		public ldap_find_control
ldap_find_control proc near		; DATA XREF: .rdata:off_10020938o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	edi
		mov	edi, [esp+4+arg_4]
		test	edi, edi
		jnz	short loc_1000296F
		xor	eax, eax
		pop	edi
		retn	8
; ---------------------------------------------------------------------------

loc_1000296F:				; CODE XREF: ldap_find_control+7j
		push	ebx
		push	esi
		xor	ecx, ecx
		xor	esi, esi
		cmp	[edi], ecx
		jz	short loc_100029D1
		mov	ebx, [esp+0Ch+arg_0]
		lea	ecx, [ecx+0]

loc_10002980:				; CODE XREF: ldap_find_control+61j
		test	ecx, ecx
		jnz	short loc_100029C7
		mov	ecx, [edi+esi*4]
		mov	eax, ebx
		mov	ecx, [ecx]
		jmp	short loc_10002990
; ---------------------------------------------------------------------------
		align 10h

loc_10002990:				; CODE XREF: ldap_find_control+2Bj
					; ldap_find_control+4Aj
		mov	dl, [ecx]
		cmp	dl, [eax]
		jnz	short loc_100029B0
		test	dl, dl
		jz	short loc_100029AC
		mov	dl, [ecx+1]
		cmp	dl, [eax+1]
		jnz	short loc_100029B0
		add	ecx, 2
		add	eax, 2
		test	dl, dl
		jnz	short loc_10002990

loc_100029AC:				; CODE XREF: ldap_find_control+38j
		xor	eax, eax
		jmp	short loc_100029B5
; ---------------------------------------------------------------------------

loc_100029B0:				; CODE XREF: ldap_find_control+34j
					; ldap_find_control+40j
		sbb	eax, eax
		or	eax, 1

loc_100029B5:				; CODE XREF: ldap_find_control+4Ej
		xor	ecx, ecx
		test	eax, eax
		setz	cl
		inc	esi
		cmp	dword ptr [edi+esi*4], 0
		jnz	short loc_10002980
		test	ecx, ecx
		jz	short loc_100029D1

loc_100029C7:				; CODE XREF: ldap_find_control+22j
		mov	eax, [edi+esi*4-4]
		pop	esi
		pop	ebx
		pop	edi
		retn	8
; ---------------------------------------------------------------------------

loc_100029D1:				; CODE XREF: ldap_find_control+17j
					; ldap_find_control+65j
		pop	esi
		pop	ebx
		xor	eax, eax
		pop	edi
		retn	8
ldap_find_control endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_100029E0(int,	void *Memory, int, char, int)
sub_100029E0	proc near		; CODE XREF: ldap_create_authzid_control+33p
					; ldap_create_geteffectiveRights_control+B0p ...

arg_0		= dword	ptr  4
Memory		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= byte ptr  10h
arg_10		= dword	ptr  14h

		push	esi
		mov	esi, [esp+4+Memory]
		test	esi, esi
		jnz	short loc_100029EF
		mov	[esp+4+Memory],	esi
		jmp	short loc_10002A12
; ---------------------------------------------------------------------------

loc_100029EF:				; CODE XREF: sub_100029E0+7j
		push	edi
		lea	eax, [esp+8+Memory]
		push	eax
		push	esi
		call	ber_flatten
		cmp	[esp+8+arg_8], 0
		mov	edi, eax
		jz	short loc_10002A0C
		push	1		; int
		push	esi		; Memory
		call	ber_free

loc_10002A0C:				; CODE XREF: sub_100029E0+22j
		cmp	edi, 0FFFFFFFFh
		pop	edi
		jz	short loc_10002A5B

loc_10002A12:				; CODE XREF: sub_100029E0+Dj
		push	10h
		call	ldap_x_malloc
		mov	esi, [esp+8+arg_10]
		mov	ecx, eax
		add	esp, 4
		mov	[esi], ecx
		test	ecx, ecx
		jz	short loc_10002A4D
		mov	al, [esp+4+arg_C]
		push	[esp+4+arg_0]
		mov	[ecx+0Ch], al
		call	sub_1000BAB0
		mov	ecx, [esi]
		add	esp, 4
		mov	[ecx], eax
		test	eax, eax
		jnz	short loc_10002A62
		push	dword ptr [esi]
		call	ldap_x_free
		add	esp, 4

loc_10002A4D:				; CODE XREF: sub_100029E0+46j
		mov	eax, [esp+4+Memory]
		test	eax, eax
		jz	short loc_10002A5B
		push	eax
		call	ber_bvfree

loc_10002A5B:				; CODE XREF: sub_100029E0+30j
					; sub_100029E0+73j
		mov	eax, 5Ah
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10002A62:				; CODE XREF: sub_100029E0+61j
		mov	edx, [esp+4+Memory]
		test	edx, edx
		jnz	short loc_10002A78
		mov	eax, [esi]
		mov	[eax+4], edx
		mov	eax, [esi]
		pop	esi
		mov	[eax+8], edx
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_10002A78:				; CODE XREF: sub_100029E0+88j
		mov	ecx, [esi]
		mov	eax, [edx]
		mov	[ecx+4], eax
		mov	eax, [edx+4]
		mov	[ecx+8], eax
		push	[esp+4+Memory]
		call	ldap_x_free
		add	esp, 4
		xor	eax, eax
		pop	esi
		retn
sub_100029E0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10002AA0	proc near		; CODE XREF: ldap_get_option+1BCp
					; ldap_get_option+1D4p	...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		mov	ebx, [esp+4+arg_4]
		push	edi
		mov	eax, [ebx]
		test	eax, eax
		jz	short loc_10002AB2
		push	eax
		call	ldap_controls_free

loc_10002AB2:				; CODE XREF: sub_10002AA0+Aj
		mov	edi, [esp+8+arg_8]
		test	edi, edi
		jz	loc_10002B9F
		cmp	dword ptr [edi], 0
		jz	loc_10002B9F
		xor	eax, eax
		lea	esp, [esp+0]

loc_10002AD0:				; CODE XREF: sub_10002AA0+38j
		cmp	dword ptr [edi+eax*4+4], 0
		lea	eax, [eax+1]
		jnz	short loc_10002AD0
		push	esi
		lea	esi, ds:0[eax*4]
		lea	eax, [esi+4]
		push	eax
		call	ldap_x_malloc
		add	esp, 4
		mov	[ebx], eax
		test	eax, eax
		jnz	short loc_10002B08
		push	eax
		push	eax
		push	5Ah
		push	[esp+18h+arg_0]
		call	ldap_set_lderrno
		pop	esi
		pop	edi
		or	eax, 0FFFFFFFFh
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_10002B08:				; CODE XREF: sub_10002AA0+52j
		push	ebp
		xor	ebp, ebp
		mov	dword ptr [esi+eax], 0
		cmp	[edi], ebp
		jz	short loc_10002B70
		mov	eax, edi
		xor	ebx, ebx
		lea	ebx, [ebx+0]

loc_10002B20:				; CODE XREF: sub_10002AA0+CEj
		mov	eax, [eax]
		push	10h
		mov	[esp+14h+arg_8], eax
		call	ldap_x_malloc
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		jz	short loc_10002B50
		push	[esp+10h+arg_8]
		push	esi
		call	sub_10002820
		add	esp, 8
		test	eax, eax
		jz	short loc_10002B52
		push	esi
		call	ldap_x_free
		add	esp, 4

loc_10002B50:				; CODE XREF: sub_10002AA0+94j
		xor	esi, esi

loc_10002B52:				; CODE XREF: sub_10002AA0+A5j
		mov	ecx, [esp+10h+arg_4]
		mov	eax, [ecx]
		mov	[ebx+eax], esi
		test	esi, esi
		jz	short loc_10002B77
		inc	ebp
		lea	ebx, ds:0[ebp*4]
		cmp	dword ptr [ebx+edi], 0
		lea	eax, [ebx+edi]
		jnz	short loc_10002B20

loc_10002B70:				; CODE XREF: sub_10002AA0+74j
		pop	ebp
		pop	esi
		pop	edi
		xor	eax, eax
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_10002B77:				; CODE XREF: sub_10002AA0+BDj
		push	dword ptr [ecx]
		call	ldap_controls_free
		mov	eax, [esp+10h+arg_4]
		push	0
		push	0
		push	5Ah
		push	[esp+1Ch+arg_0]
		mov	dword ptr [eax], 0
		call	ldap_set_lderrno
		pop	ebp
		pop	esi
		pop	edi
		or	eax, 0FFFFFFFFh
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_10002B9F:				; CODE XREF: sub_10002AA0+18j
					; sub_10002AA0+21j
		pop	edi
		mov	dword ptr [ebx], 0
		xor	eax, eax
		pop	ebx
		retn
sub_10002AA0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10002BB0	proc near		; CODE XREF: sub_10011680+287p

Dst		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+Dst]
		test	esi, esi
		jnz	short loc_10002BC0
		mov	eax, 54h
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10002BC0:				; CODE XREF: sub_10002BB0+7j
		lea	eax, [esp+4+Dst]
		push	eax
		push	esi
		call	ber_peek_tag
		cmp	eax, 0A0h
		jz	short loc_10002BFB

loc_10002BD2:				; CODE XREF: sub_10002BB0+49j
		cmp	eax, 0FFFFFFFFh
		jz	short loc_10002BFB
		lea	eax, [esp+4+Dst]
		push	eax		; int
		push	esi		; Dst
		call	ber_skip_tag
		mov	eax, [esp+4+Dst]
		add	[esi+54h], eax
		lea	eax, [esp+4+Dst]
		push	eax
		push	esi
		call	ber_peek_tag
		cmp	eax, 0A0h
		jnz	short loc_10002BD2

loc_10002BFB:				; CODE XREF: sub_10002BB0+20j
					; sub_10002BB0+25j
		push	[esp+4+arg_4]
		push	esi
		call	sub_10002C10
		add	esp, 8
		pop	esi
		retn
sub_10002BB0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10002C10	proc near		; CODE XREF: sub_10002BB0+50p
					; sub_10004BB0+1E2p ...

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= byte ptr -8
var_4		= dword	ptr -4
Dst		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 10h
		lea	eax, [esp+10h+arg_4]
		push	ebx
		mov	ebx, [esp+14h+arg_4]
		push	edi
		mov	edi, [esp+18h+Dst]
		push	eax
		push	1
		push	edi
		mov	dword ptr [ebx], 0
		call	ber_get_option
		test	eax, eax
		jz	short loc_10002C3F
		pop	edi
		mov	eax, 54h
		pop	ebx
		add	esp, 10h
		retn
; ---------------------------------------------------------------------------

loc_10002C3F:				; CODE XREF: sub_10002C10+22j
		cmp	[esp+18h+arg_4], 0
		jnz	short loc_10002C4E
		pop	edi
		xor	eax, eax
		pop	ebx
		add	esp, 10h
		retn
; ---------------------------------------------------------------------------

loc_10002C4E:				; CODE XREF: sub_10002C10+34j
		lea	eax, [esp+18h+arg_4]
		push	eax
		push	edi
		call	ber_peek_tag
		mov	ecx, eax
		cmp	ecx, 0A0h
		jz	short loc_10002C76
		xor	eax, eax
		mov	edx, 54h
		cmp	ecx, 0FFFFFFFFh
		pop	edi
		cmovz	eax, edx
		pop	ebx
		add	esp, 10h
		retn
; ---------------------------------------------------------------------------

loc_10002C76:				; CODE XREF: sub_10002C10+51j
		push	ebp
		push	esi
		lea	eax, [esp+20h+var_4]
		xor	ebp, ebp
		push	eax
		lea	eax, [esp+24h+arg_4]
		push	eax
		push	edi
		call	ber_first_element
		cmp	eax, 0FFFFFFFFh
		jz	loc_10002D65
		xor	edx, edx
		or	ecx, 0FFFFFFFFh
		mov	[esp+20h+var_C], edx
		mov	[esp+20h+var_10], ecx

loc_10002CA0:				; CODE XREF: sub_10002C10+19Bj
		cmp	eax, 0FFFFFFFEh
		jz	loc_10002DB7
		cmp	ebp, ecx
		jl	short loc_10002CD0
		add	edx, 14h
		add	ecx, 5
		push	edx
		push	dword ptr [ebx]
		mov	[esp+28h+var_10], ecx
		mov	[esp+28h+var_C], edx
		call	ldap_x_realloc
		add	esp, 8
		mov	[ebx], eax
		test	eax, eax
		jz	loc_10002DB0

loc_10002CD0:				; CODE XREF: sub_10002C10+9Bj
		push	10h
		push	1
		call	ldap_x_calloc
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		jz	loc_10002DB0
		mov	ecx, [ebx]
		push	esi
		push	offset aA	; "{a"
		push	edi		; Dst
		mov	[ecx+ebp*4], esi
		inc	ebp
		mov	ecx, [ebx]
		mov	dword ptr [ecx+ebp*4], 0
		call	ber_scanf
		add	esp, 0Ch
		cmp	eax, 0FFFFFFFFh
		jz	short loc_10002D65
		lea	eax, [esp+20h+arg_4]
		push	eax
		push	edi
		call	ber_peek_tag
		cmp	eax, 1
		jnz	short loc_10002D3A
		lea	eax, [esp+20h+var_8]
		push	eax
		push	offset aB	; "b"
		push	edi		; Dst
		call	ber_scanf
		add	esp, 0Ch
		cmp	eax, 0FFFFFFFFh
		jz	short loc_10002D65
		mov	al, [esp+20h+var_8]
		mov	[esi+0Ch], al
		jmp	short loc_10002D3E
; ---------------------------------------------------------------------------

loc_10002D3A:				; CODE XREF: sub_10002C10+107j
		mov	byte ptr [esi+0Ch], 0

loc_10002D3E:				; CODE XREF: sub_10002C10+128j
		lea	eax, [esp+20h+arg_4]
		push	eax
		push	edi
		call	ber_peek_tag
		cmp	eax, 4
		jnz	short loc_10002D81
		lea	eax, [esi+4]
		push	eax
		push	offset aO	; "o"
		push	edi		; Dst
		call	ber_scanf
		add	esp, 0Ch
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_10002D8F

loc_10002D65:				; CODE XREF: sub_10002C10+7Dj
					; sub_10002C10+F7j ...
		mov	esi, 54h

loc_10002D6A:				; CODE XREF: sub_10002C10+1A5j
		push	dword ptr [ebx]
		call	ldap_controls_free
		mov	eax, esi
		mov	dword ptr [ebx], 0
		pop	esi
		pop	ebp
		pop	edi
		pop	ebx
		add	esp, 10h
		retn
; ---------------------------------------------------------------------------

loc_10002D81:				; CODE XREF: sub_10002C10+13Cj
		mov	dword ptr [esi+8], 0
		mov	dword ptr [esi+4], 0

loc_10002D8F:				; CODE XREF: sub_10002C10+153j
		push	[esp+20h+var_4]
		lea	eax, [esp+24h+arg_4]
		push	eax
		push	edi
		call	ber_next_element
		cmp	eax, 0FFFFFFFFh
		jz	short loc_10002D65
		mov	ecx, [esp+20h+var_10]
		mov	edx, [esp+20h+var_C]
		jmp	loc_10002CA0
; ---------------------------------------------------------------------------

loc_10002DB0:				; CODE XREF: sub_10002C10+BAj
					; sub_10002C10+D0j
		mov	esi, 5Ah
		jmp	short loc_10002D6A
; ---------------------------------------------------------------------------

loc_10002DB7:				; CODE XREF: sub_10002C10+93j
		pop	esi
		pop	ebp
		pop	edi
		xor	eax, eax
		pop	ebx
		add	esp, 10h
		retn
sub_10002C10	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10002DD0	proc near		; CODE XREF: sub_10001000+19Fp
					; ldap_add_ext+318p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
Size		= dword	ptr  10h

		push	ebx
		push	ebp
		push	esi
		mov	esi, [esp+0Ch+arg_0]
		push	edi
		mov	eax, [esi+0C0h]
		test	eax, eax
		jz	short loc_10002E3E
		mov	ecx, [esi+0DCh]
		test	ecx, ecx
		jz	short loc_10002E3E
		mov	edx, [esi+13Ch]
		test	edx, edx
		jz	short loc_10002E36
		call	edx
		cmp	[esi+158h], eax
		jnz	short loc_10002E08
		inc	dword ptr [esi+190h]
		jmp	short loc_10002E3E
; ---------------------------------------------------------------------------

loc_10002E08:				; CODE XREF: sub_10002DD0+2Ej
		mov	eax, [esi+0DCh]
		push	dword ptr [eax+18h]
		mov	eax, [esi+0C0h]
		call	eax
		mov	eax, [esi+13Ch]
		add	esp, 4
		call	eax
		mov	[esi+158h], eax
		mov	dword ptr [esi+190h], 1
		jmp	short loc_10002E3E
; ---------------------------------------------------------------------------

loc_10002E36:				; CODE XREF: sub_10002DD0+24j
		push	dword ptr [ecx+18h]
		call	eax
		add	esp, 4

loc_10002E3E:				; CODE XREF: sub_10002DD0+10j
					; sub_10002DD0+1Aj ...
		mov	edi, [esp+10h+arg_4]
		mov	ebp, [esp+10h+Size]
		test	edi, edi
		jnz	short loc_10002E58
		mov	edi, [esi+114h]
		test	edi, edi
		jz	loc_10002F4E

loc_10002E58:				; CODE XREF: sub_10002DD0+78j
		cmp	dword ptr [edi], 0
		jz	loc_10002F4E
		mov	eax, [esi+64h]
		test	eax, eax
		jnz	short loc_10002E6D
		mov	eax, [esi+8]
		jmp	short loc_10002E70
; ---------------------------------------------------------------------------

loc_10002E6D:				; CODE XREF: sub_10002DD0+96j
		mov	eax, [eax+8]

loc_10002E70:				; CODE XREF: sub_10002DD0+9Bj
		cmp	eax, 3
		jge	short loc_10002E94

loc_10002E75:				; CODE XREF: sub_10002DD0+B8j
		mov	eax, [edi]
		test	eax, eax
		jz	loc_10002F4E
		cmp	byte ptr [eax+0Ch], 0
		jnz	short loc_10002E8A
		add	edi, 4
		jmp	short loc_10002E75
; ---------------------------------------------------------------------------

loc_10002E8A:				; CODE XREF: sub_10002DD0+B3j
		mov	ebx, 5Ch
		jmp	loc_10002FC0
; ---------------------------------------------------------------------------

loc_10002E94:				; CODE XREF: sub_10002DD0+A3j
		push	0A0h
		push	offset aT	; "t{"
		push	ebp
		call	ber_printf
		add	esp, 0Ch
		cmp	eax, 0FFFFFFFFh
		jz	loc_10002FBB
		cmp	dword ptr [edi], 0
		mov	[esp+10h+arg_0], 0
		jz	loc_10002F43
		mov	eax, edi

loc_10002EC3:				; CODE XREF: sub_10002DD0+171j
		mov	ebx, [eax]
		push	dword ptr [ebx]
		push	offset aS	; "{s"
		push	ebp
		call	ber_printf
		add	esp, 0Ch
		cmp	eax, 0FFFFFFFFh
		jz	loc_10002FBB
		mov	al, [ebx+0Ch]
		test	al, al
		jz	short loc_10002F00
		movsx	eax, al
		push	eax
		push	offset aB	; "b"
		push	ebp
		call	ber_printf
		add	esp, 0Ch
		cmp	eax, 0FFFFFFFFh
		jz	loc_10002FBB

loc_10002F00:				; CODE XREF: sub_10002DD0+113j
		mov	eax, [ebx+8]
		test	eax, eax
		jz	short loc_10002F22
		push	dword ptr [ebx+4]
		push	eax
		push	offset aO	; "o"
		push	ebp
		call	ber_printf
		add	esp, 10h
		cmp	eax, 0FFFFFFFFh
		jz	loc_10002FBB

loc_10002F22:				; CODE XREF: sub_10002DD0+135j
		push	ebp		; Size
		call	ber_put_set
		cmp	eax, 0FFFFFFFFh
		jz	loc_10002FBB
		mov	eax, [esp+10h+arg_0]
		inc	eax
		cmp	dword ptr [edi+eax*4], 0
		mov	[esp+10h+arg_0], eax
		lea	eax, [edi+eax*4]
		jnz	short loc_10002EC3

loc_10002F43:				; CODE XREF: sub_10002DD0+EBj
		push	ebp		; Size
		call	ber_put_set
		cmp	eax, 0FFFFFFFFh
		jz	short loc_10002FBB

loc_10002F4E:				; CODE XREF: sub_10002DD0+82j
					; sub_10002DD0+8Bj ...
		cmp	dword ptr [esi+0C0h], 0
		jz	short loc_10002FA5
		mov	eax, [esi+0DCh]
		test	eax, eax
		jz	short loc_10002FA5
		mov	ecx, [esi+13Ch]
		test	ecx, ecx
		jz	short loc_10002F97
		call	ecx
		cmp	[esi+158h], eax
		jnz	short loc_10002FA5
		dec	dword ptr [esi+190h]
		jnz	short loc_10002FA5
		mov	dword ptr [esi+158h], 0FFFFFFFFh
		mov	dword ptr [esi+190h], 0
		mov	eax, [esi+0DCh]

loc_10002F97:				; CODE XREF: sub_10002DD0+199j
		push	dword ptr [eax+18h]
		mov	eax, [esi+0C4h]
		call	eax
		add	esp, 4

loc_10002FA5:				; CODE XREF: sub_10002DD0+185j
					; sub_10002DD0+18Fj ...
		cmp	[esp+10h+arg_8], 0
		jz	loc_10003036
		push	ebp		; Size
		call	ber_put_set
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_10003036

loc_10002FBB:				; CODE XREF: sub_10002DD0+DAj
					; sub_10002DD0+108j ...
		mov	ebx, 53h

loc_10002FC0:				; CODE XREF: sub_10002DD0+BFj
		cmp	dword ptr [esi+0C0h], 0
		jz	short loc_10003024
		mov	eax, [esi+0DCh]
		test	eax, eax
		jz	short loc_10003024
		mov	ecx, [esi+13Ch]
		test	ecx, ecx
		jz	short loc_10003016
		call	ecx
		cmp	[esi+158h], eax
		jnz	short loc_10003024
		dec	dword ptr [esi+190h]
		jnz	short loc_10003024
		mov	dword ptr [esi+158h], 0FFFFFFFFh
		mov	dword ptr [esi+190h], 0
		mov	eax, [esi+0DCh]
		push	dword ptr [eax+18h]
		mov	eax, [esi+0C4h]
		call	eax
		jmp	short loc_10003021
; ---------------------------------------------------------------------------

loc_10003016:				; CODE XREF: sub_10002DD0+20Bj
		push	dword ptr [eax+18h]
		mov	ecx, [esi+0C4h]
		call	ecx

loc_10003021:				; CODE XREF: sub_10002DD0+244j
		add	esp, 4

loc_10003024:				; CODE XREF: sub_10002DD0+1F7j
					; sub_10002DD0+201j ...
		push	0
		push	0
		push	ebx
		push	esi
		call	ldap_set_lderrno
		pop	edi
		pop	esi
		pop	ebp
		mov	eax, ebx
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_10003036:				; CODE XREF: sub_10002DD0+1DAj
					; sub_10002DD0+1E9j
		pop	edi
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		retn
sub_10002DD0	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  37. ldap_count_values
; Exported entry  77. ldap_count_values_len

; =============== S U B	R O U T	I N E =======================================


		public ldap_count_values
ldap_count_values proc near		; CODE XREF: sub_1000A200+27p
					; sub_1000A200+30p ...

arg_0		= dword	ptr  4

		mov	ecx, [esp+arg_0] ; ldap_count_values
		xor	eax, eax
		test	ecx, ecx
		jz	short locret_10003057
		cmp	[ecx], eax
		jz	short locret_10003057
		mov	edi, edi

loc_10003050:				; CODE XREF: ldap_count_values+15j
		inc	eax
		cmp	dword ptr [ecx+eax*4], 0
		jnz	short loc_10003050

locret_10003057:			; CODE XREF: ldap_count_values+8j
					; ldap_count_values+Cj
		retn	4
ldap_count_values endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  20. ldap_delete

; =============== S U B	R O U T	I N E =======================================


		public ldap_delete
ldap_delete	proc near		; DATA XREF: .rdata:off_10020938o

var_4		= dword	ptr -4
Memory		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ecx
		lea	eax, [esp+4+var_4]
		push	eax		; int
		push	0		; int
		push	0		; int
		push	[esp+10h+arg_4]	; int
		push	[esp+14h+Memory] ; Memory
		call	ldap_delete_ext
		or	ecx, 0FFFFFFFFh
		test	eax, eax
		cmovz	ecx, [esp+4+var_4]
		mov	eax, ecx
		pop	ecx
		retn	8
ldap_delete	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 515. ldap_delete_ext

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	ldap_delete_ext(void *Memory, int, int,	int, int)
		public ldap_delete_ext
ldap_delete_ext	proc near		; CODE XREF: ldap_delete+11p
					; ldap_delete_ext_s+18p ...

Memory		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_10		= dword	ptr  14h

		push	esi
		mov	esi, [esp+4+Memory]
		test	esi, esi
		jnz	short loc_100030A0
		lea	eax, [esi+59h]
		pop	esi
		retn	14h
; ---------------------------------------------------------------------------

loc_100030A0:				; CODE XREF: ldap_delete_ext+7j
		push	edi
		mov	edi, [esp+8+arg_10]
		test	edi, edi
		jnz	short loc_100030BB
		push	edi
		push	edi
		push	59h
		push	esi
		call	ldap_set_lderrno
		lea	eax, [edi+59h]
		pop	edi
		pop	esi
		retn	14h
; ---------------------------------------------------------------------------

loc_100030BB:				; CODE XREF: ldap_delete_ext+17j
		mov	eax, [esp+8+arg_4]
		test	eax, eax
		mov	ecx, [esi+0C0h]
		push	ebp
		mov	ebp, offset Src
		cmovnz	ebp, eax
		test	ecx, ecx
		jz	short loc_10003130
		mov	eax, [esi+0DCh]
		test	eax, eax
		jz	short loc_10003130
		mov	edx, [esi+13Ch]
		test	edx, edx
		jz	short loc_10003128
		call	edx
		cmp	[esi+148h], eax
		jnz	short loc_100030FA
		inc	dword ptr [esi+180h]
		jmp	short loc_10003130
; ---------------------------------------------------------------------------

loc_100030FA:				; CODE XREF: ldap_delete_ext+60j
		mov	eax, [esi+0DCh]
		push	dword ptr [eax+8]
		mov	eax, [esi+0C0h]
		call	eax
		mov	eax, [esi+13Ch]
		add	esp, 4
		call	eax
		mov	[esi+148h], eax
		mov	dword ptr [esi+180h], 1
		jmp	short loc_10003130
; ---------------------------------------------------------------------------

loc_10003128:				; CODE XREF: ldap_delete_ext+56j
		push	dword ptr [eax+8]
		call	ecx
		add	esp, 4

loc_10003130:				; CODE XREF: ldap_delete_ext+42j
					; ldap_delete_ext+4Cj ...
		inc	dword ptr [esi+30h]
		mov	eax, [esi+30h]
		mov	[edi], eax
		cmp	dword ptr [esi+0C0h], 0
		jz	short loc_1000318F
		mov	eax, [esi+0DCh]
		test	eax, eax
		jz	short loc_1000318F
		mov	ecx, [esi+13Ch]
		test	ecx, ecx
		jz	short loc_10003181
		call	ecx
		cmp	[esi+148h], eax
		jnz	short loc_1000318F
		dec	dword ptr [esi+180h]
		jnz	short loc_1000318F
		mov	dword ptr [esi+148h], 0FFFFFFFFh
		mov	dword ptr [esi+180h], 0
		mov	eax, [esi+0DCh]

loc_10003181:				; CODE XREF: ldap_delete_ext+C3j
		push	dword ptr [eax+8]
		mov	eax, [esi+0C4h]
		call	eax
		add	esp, 4

loc_1000318F:				; CODE XREF: ldap_delete_ext+AFj
					; ldap_delete_ext+B9j ...
		cmp	dword ptr [esi+0E0h], 0
		jz	loc_100032D8
		cmp	dword ptr [esi+100h], 0
		jz	loc_100032D8
		mov	eax, [esi+0C0h]
		test	eax, eax
		jz	short loc_1000320D
		mov	ecx, [esi+0DCh]
		test	ecx, ecx
		jz	short loc_1000320D
		mov	edx, [esi+13Ch]
		test	edx, edx
		jz	short loc_10003206
		call	edx
		cmp	[esi+140h], eax
		jnz	short loc_100031D9
		inc	dword ptr [esi+178h]
		jmp	short loc_1000320D
; ---------------------------------------------------------------------------

loc_100031D9:				; CODE XREF: ldap_delete_ext+13Fj
		mov	eax, [esi+0DCh]
		push	dword ptr [eax]
		mov	eax, [esi+0C0h]
		call	eax
		mov	eax, [esi+13Ch]
		add	esp, 4
		call	eax
		mov	[esi+140h], eax
		mov	dword ptr [esi+178h], 1
		jmp	short loc_1000320D
; ---------------------------------------------------------------------------

loc_10003206:				; CODE XREF: ldap_delete_ext+135j
		push	dword ptr [ecx]
		call	eax
		add	esp, 4

loc_1000320D:				; CODE XREF: ldap_delete_ext+121j
					; ldap_delete_ext+12Bj	...
		mov	eax, [esi+100h]
		push	ebp
		push	4Ah
		push	dword ptr [edi]
		push	esi
		call	eax
		add	esp, 10h
		test	eax, eax
		jz	short loc_10003282
		mov	[edi], eax
		cmp	dword ptr [esi+0C0h], 0
		jz	short loc_1000327A
		mov	eax, [esi+0DCh]
		test	eax, eax
		jz	short loc_1000327A
		mov	ecx, [esi+13Ch]
		test	ecx, ecx
		jz	short loc_1000326D
		call	ecx
		cmp	[esi+140h], eax
		jnz	short loc_1000327A
		dec	dword ptr [esi+178h]
		jnz	short loc_1000327A
		mov	dword ptr [esi+140h], 0FFFFFFFFh
		mov	dword ptr [esi+178h], 0
		mov	eax, [esi+0DCh]

loc_1000326D:				; CODE XREF: ldap_delete_ext+1AFj
		push	dword ptr [eax]
		mov	eax, [esi+0C4h]
		call	eax
		add	esp, 4

loc_1000327A:				; CODE XREF: ldap_delete_ext+19Bj
					; ldap_delete_ext+1A5j	...
		pop	ebp
		pop	edi
		xor	eax, eax
		pop	esi
		retn	14h
; ---------------------------------------------------------------------------

loc_10003282:				; CODE XREF: ldap_delete_ext+190j
		cmp	dword ptr [esi+0C0h], 0
		jz	short loc_100032D8
		mov	eax, [esi+0DCh]
		test	eax, eax
		jz	short loc_100032D8
		mov	ecx, [esi+13Ch]
		test	ecx, ecx
		jz	short loc_100032CB
		call	ecx
		cmp	[esi+140h], eax
		jnz	short loc_100032D8
		dec	dword ptr [esi+178h]
		jnz	short loc_100032D8
		mov	dword ptr [esi+140h], 0FFFFFFFFh
		mov	dword ptr [esi+178h], 0
		mov	eax, [esi+0DCh]

loc_100032CB:				; CODE XREF: ldap_delete_ext+20Dj
		push	dword ptr [eax]
		mov	eax, [esi+0C4h]
		call	eax
		add	esp, 4

loc_100032D8:				; CODE XREF: ldap_delete_ext+106j
					; ldap_delete_ext+113j	...
		lea	eax, [esp+0Ch+Memory]
		push	eax
		push	esi
		call	sub_1000EF40
		add	esp, 8
		test	eax, eax
		jnz	loc_10003385
		push	ebp
		push	4Ah
		push	dword ptr [edi]
		push	offset aIts	; "{its"
		push	[esp+1Ch+Memory]
		call	ber_printf
		add	esp, 14h
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_1000332B
		push	0
		push	0
		push	53h
		push	esi
		call	ldap_set_lderrno
		push	1		; int
		push	[esp+10h+Memory] ; Memory
		call	ber_free
		pop	ebp
		pop	edi
		mov	eax, 53h
		pop	esi
		retn	14h
; ---------------------------------------------------------------------------

loc_1000332B:				; CODE XREF: ldap_delete_ext+277j
		push	ebx
		push	[esp+10h+Memory]
		push	1
		push	[esp+18h+arg_8]
		push	esi
		call	sub_10002DD0
		mov	ebx, eax
		add	esp, 10h
		test	ebx, ebx
		jz	short loc_10003359
		push	1		; int
		push	[esp+14h+Memory] ; Memory
		call	ber_free
		mov	eax, ebx
		pop	ebx
		pop	ebp
		pop	edi
		pop	esi
		retn	14h
; ---------------------------------------------------------------------------

loc_10003359:				; CODE XREF: ldap_delete_ext+2B3j
		push	[esp+10h+Memory]
		push	ebp
		push	4Ah
		push	dword ptr [edi]
		push	esi
		call	sub_1000FC30
		add	esp, 14h
		mov	[edi], eax
		test	eax, eax
		jns	short loc_10003382
		push	0
		push	0
		push	esi
		call	ldap_get_lderrno
		pop	ebx
		pop	ebp
		pop	edi
		pop	esi
		retn	14h
; ---------------------------------------------------------------------------

loc_10003382:				; CODE XREF: ldap_delete_ext+2DFj
		xor	eax, eax
		pop	ebx

loc_10003385:				; CODE XREF: ldap_delete_ext+258j
		pop	ebp
		pop	edi
		pop	esi
		retn	14h
ldap_delete_ext	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 516. ldap_delete_ext_s

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	ldap_delete_ext_s(void *Memory,	int, int, int)
		public ldap_delete_ext_s
ldap_delete_ext_s proc near		; DATA XREF: .rdata:off_10020938o

var_4		= dword	ptr -4
Memory		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ecx
		push	esi
		mov	esi, [esp+8+Memory]
		lea	eax, [esp+8+var_4]
		push	eax		; int
		push	[esp+0Ch+arg_C]	; int
		push	[esp+10h+arg_8]	; int
		push	[esp+14h+arg_4]	; int
		push	esi		; Memory
		call	ldap_delete_ext
		test	eax, eax
		jnz	short loc_100033E4
		lea	eax, [esp+8+arg_C]
		push	eax
		push	0
		push	1
		push	[esp+14h+var_4]
		push	esi
		call	ldap_result
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_100033D8
		push	0
		push	0
		push	esi
		call	ldap_get_lderrno
		pop	esi
		pop	ecx
		retn	10h
; ---------------------------------------------------------------------------

loc_100033D8:				; CODE XREF: ldap_delete_ext_s+37j
		push	1
		push	[esp+0Ch+arg_C]
		push	esi
		call	ldap_result2error

loc_100033E4:				; CODE XREF: ldap_delete_ext_s+1Fj
		pop	esi
		pop	ecx
		retn	10h
ldap_delete_ext_s endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  47. ldap_delete_s

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	ldap_delete_s(void *Memory, int)
		public ldap_delete_s
ldap_delete_s	proc near		; DATA XREF: .rdata:off_10020938o

var_4		= dword	ptr -4
Memory		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ecx
		push	esi
		mov	esi, [esp+8+Memory]
		lea	eax, [esp+8+var_4]
		push	eax		; int
		push	0		; int
		push	0		; int
		push	[esp+14h+arg_4]	; int
		push	esi		; Memory
		call	ldap_delete_ext
		test	eax, eax
		jnz	short loc_10003440
		lea	eax, [esp+8+arg_4]
		push	eax
		push	0
		push	1
		push	[esp+14h+var_4]
		push	esi
		call	ldap_result
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_10003434
		push	0
		push	0
		push	esi
		call	ldap_get_lderrno
		pop	esi
		pop	ecx
		retn	8
; ---------------------------------------------------------------------------

loc_10003434:				; CODE XREF: ldap_delete_s+33j
		push	1
		push	[esp+0Ch+arg_4]
		push	esi
		call	ldap_result2error

loc_10003440:				; CODE XREF: ldap_delete_s+1Bj
		pop	esi
		pop	ecx
		retn	8
ldap_delete_s	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10003450	proc near		; CODE XREF: sub_10003C30+4EDp
					; sub_10003C30+50Cp ...

arg_0		= dword	ptr  4

		push	ebp
		mov	ebp, [esp+4+arg_0]
		test	ebp, ebp
		jz	loc_10003577
		mov	eax, [ebp+0]
		test	eax, eax
		jz	short loc_1000346D
		push	eax
		call	ldap_x_free
		add	esp, 4

loc_1000346D:				; CODE XREF: sub_10003450+12j
		mov	eax, [ebp+4]
		test	eax, eax
		jz	short loc_1000347D
		push	eax
		call	ldap_x_free
		add	esp, 4

loc_1000347D:				; CODE XREF: sub_10003450+22j
		mov	eax, [ebp+8]
		test	eax, eax
		jz	short loc_1000348D
		push	eax
		call	ldap_x_free
		add	esp, 4

loc_1000348D:				; CODE XREF: sub_10003450+32j
		mov	eax, [ebp+10h]
		test	eax, eax
		jz	short loc_1000349D
		push	eax
		call	ldap_x_free
		add	esp, 4

loc_1000349D:				; CODE XREF: sub_10003450+42j
		mov	eax, [ebp+14h]
		test	eax, eax
		jz	short loc_100034AD
		push	eax
		call	ldap_x_free
		add	esp, 4

loc_100034AD:				; CODE XREF: sub_10003450+52j
		mov	eax, [ebp+18h]
		test	eax, eax
		jz	short loc_100034BD
		push	eax
		call	ldap_x_free
		add	esp, 4

loc_100034BD:				; CODE XREF: sub_10003450+62j
		push	esi
		push	edi
		mov	edi, [ebp+1Ch]
		test	edi, edi
		jz	short loc_100034DF

loc_100034C6:				; CODE XREF: sub_10003450+8Dj
		push	dword ptr [edi]
		mov	esi, [edi+4]
		call	sub_10004450
		push	edi
		call	ldap_x_free
		add	esp, 8
		mov	edi, esi
		test	esi, esi
		jnz	short loc_100034C6

loc_100034DF:				; CODE XREF: sub_10003450+74j
		mov	esi, [ebp+20h]
		test	esi, esi
		jz	short loc_10003518

loc_100034E6:				; CODE XREF: sub_10003450+C6j
		mov	eax, [esi+4]
		mov	edi, [esi+0Ch]
		test	eax, eax
		jz	short loc_100034F9
		push	eax
		call	ldap_x_free
		add	esp, 4

loc_100034F9:				; CODE XREF: sub_10003450+9Ej
		mov	eax, [esi+8]
		test	eax, eax
		jz	short loc_10003509
		push	eax
		call	ldap_x_free
		add	esp, 4

loc_10003509:				; CODE XREF: sub_10003450+AEj
		push	esi
		call	ldap_x_free
		add	esp, 4
		mov	esi, edi
		test	edi, edi
		jnz	short loc_100034E6

loc_10003518:				; CODE XREF: sub_10003450+94j
		mov	esi, [ebp+24h]
		test	esi, esi
		jz	short loc_1000356C
		push	ebx

loc_10003520:				; CODE XREF: sub_10003450+119j
		mov	ebx, [esi+18h]

loc_10003523:				; CODE XREF: sub_10003450+113j
		mov	eax, [esi+8]
		mov	edi, [esi+14h]
		test	eax, eax
		jz	short loc_10003536
		push	eax
		call	ldap_x_free
		add	esp, 4

loc_10003536:				; CODE XREF: sub_10003450+DBj
		mov	eax, [esi+0Ch]
		test	eax, eax
		jz	short loc_10003546
		push	eax
		call	ldap_x_free
		add	esp, 4

loc_10003546:				; CODE XREF: sub_10003450+EBj
		mov	eax, [esi+10h]
		test	eax, eax
		jz	short loc_10003556
		push	eax
		call	sub_10004450
		add	esp, 4

loc_10003556:				; CODE XREF: sub_10003450+FBj
		push	esi
		call	ldap_x_free
		add	esp, 4
		mov	esi, edi
		test	edi, edi
		jnz	short loc_10003523
		mov	esi, ebx
		test	ebx, ebx
		jnz	short loc_10003520
		pop	ebx

loc_1000356C:				; CODE XREF: sub_10003450+CDj
		push	ebp
		call	ldap_x_free
		add	esp, 4
		pop	edi
		pop	esi

loc_10003577:				; CODE XREF: sub_10003450+7j
		pop	ebp
		retn
sub_10003450	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 409. ldap_first_tmplcol

; =============== S U B	R O U T	I N E =======================================


		public ldap_first_tmplcol
ldap_first_tmplcol proc	near		; CODE XREF: sub_10015D40+55Ep
					; sub_10016E60+18p
					; DATA XREF: ...

arg_4		= dword	ptr  8

		mov	eax, [esp+arg_4]
		retn	8
ldap_first_tmplcol endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 407. ldap_first_tmplrow

; =============== S U B	R O U T	I N E =======================================


		public ldap_first_tmplrow
ldap_first_tmplrow proc	near		; CODE XREF: sub_10015D40+533p
					; sub_10016E60+Ap
					; DATA XREF: ...

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax+24h]
		retn	4
ldap_first_tmplrow endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 402. ldap_free_templates

; =============== S U B	R O U T	I N E =======================================


		public ldap_free_templates
ldap_free_templates proc near		; CODE XREF: ldap_init_templates_buf+C8p
					; DATA XREF: .rdata:off_10020938o

arg_0		= dword	ptr  4

		push	ebp
		mov	ebp, [esp+4+arg_0]
		test	ebp, ebp
		jz	loc_100036E5
		push	ebx
		push	esi
		push	edi

loc_100035B0:				; CODE XREF: ldap_free_templates+13Cj
		mov	eax, [ebp+0]
		mov	ebx, [ebp+2Ch]
		mov	[esp+10h+arg_0], ebx
		test	eax, eax
		jz	short loc_100035C7
		push	eax
		call	ldap_x_free
		add	esp, 4

loc_100035C7:				; CODE XREF: ldap_free_templates+1Cj
		mov	eax, [ebp+4]
		test	eax, eax
		jz	short loc_100035D7
		push	eax
		call	ldap_x_free
		add	esp, 4

loc_100035D7:				; CODE XREF: ldap_free_templates+2Cj
		mov	eax, [ebp+8]
		test	eax, eax
		jz	short loc_100035E7
		push	eax
		call	ldap_x_free
		add	esp, 4

loc_100035E7:				; CODE XREF: ldap_free_templates+3Cj
		mov	eax, [ebp+10h]
		test	eax, eax
		jz	short loc_100035F7
		push	eax
		call	ldap_x_free
		add	esp, 4

loc_100035F7:				; CODE XREF: ldap_free_templates+4Cj
		mov	eax, [ebp+14h]
		test	eax, eax
		jz	short loc_10003607
		push	eax
		call	ldap_x_free
		add	esp, 4

loc_10003607:				; CODE XREF: ldap_free_templates+5Cj
		mov	eax, [ebp+18h]
		test	eax, eax
		jz	short loc_10003617
		push	eax
		call	ldap_x_free
		add	esp, 4

loc_10003617:				; CODE XREF: ldap_free_templates+6Cj
		mov	edi, [ebp+1Ch]
		test	edi, edi
		jz	short loc_10003639
		mov	edi, edi

loc_10003620:				; CODE XREF: ldap_free_templates+97j
		push	dword ptr [edi]
		mov	esi, [edi+4]
		call	sub_10004450
		push	edi
		call	ldap_x_free
		add	esp, 8
		mov	edi, esi
		test	esi, esi
		jnz	short loc_10003620

loc_10003639:				; CODE XREF: ldap_free_templates+7Cj
		mov	esi, [ebp+20h]
		test	esi, esi
		jz	short loc_10003672

loc_10003640:				; CODE XREF: ldap_free_templates+D0j
		mov	eax, [esi+4]
		mov	edi, [esi+0Ch]
		test	eax, eax
		jz	short loc_10003653
		push	eax
		call	ldap_x_free
		add	esp, 4

loc_10003653:				; CODE XREF: ldap_free_templates+A8j
		mov	eax, [esi+8]
		test	eax, eax
		jz	short loc_10003663
		push	eax
		call	ldap_x_free
		add	esp, 4

loc_10003663:				; CODE XREF: ldap_free_templates+B8j
		push	esi
		call	ldap_x_free
		add	esp, 4
		mov	esi, edi
		test	edi, edi
		jnz	short loc_10003640

loc_10003672:				; CODE XREF: ldap_free_templates+9Ej
		mov	esi, [ebp+24h]
		test	esi, esi
		jz	short loc_100036CF
		lea	esp, [esp+0]

loc_10003680:				; CODE XREF: ldap_free_templates+129j
		mov	ebx, [esi+18h]

loc_10003683:				; CODE XREF: ldap_free_templates+123j
		mov	eax, [esi+8]
		mov	edi, [esi+14h]
		test	eax, eax
		jz	short loc_10003696
		push	eax
		call	ldap_x_free
		add	esp, 4

loc_10003696:				; CODE XREF: ldap_free_templates+EBj
		mov	eax, [esi+0Ch]
		test	eax, eax
		jz	short loc_100036A6
		push	eax
		call	ldap_x_free
		add	esp, 4

loc_100036A6:				; CODE XREF: ldap_free_templates+FBj
		mov	eax, [esi+10h]
		test	eax, eax
		jz	short loc_100036B6
		push	eax
		call	sub_10004450
		add	esp, 4

loc_100036B6:				; CODE XREF: ldap_free_templates+10Bj
		push	esi
		call	ldap_x_free
		add	esp, 4
		mov	esi, edi
		test	edi, edi
		jnz	short loc_10003683
		mov	esi, ebx
		test	ebx, ebx
		jnz	short loc_10003680
		mov	ebx, [esp+10h+arg_0]

loc_100036CF:				; CODE XREF: ldap_free_templates+D7j
		push	ebp
		call	ldap_x_free
		add	esp, 4
		mov	ebp, ebx
		test	ebx, ebx
		jnz	loc_100035B0
		pop	edi
		pop	esi
		pop	ebx

loc_100036E5:				; CODE XREF: ldap_free_templates+7j
		pop	ebp
		retn	4
ldap_free_templates endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 400. ldap_init_templates

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	ldap_init_templates(char *Filename, int)
		public ldap_init_templates
ldap_init_templates proc near		; DATA XREF: .rdata:off_10020938o

Filename	= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		mov	ebp, [esp+4+arg_4]
		push	esi
		push	offset Mode	; "r"
		push	[esp+0Ch+Filename] ; Filename
		mov	dword ptr [ebp+0], 0
		call	ds:fopen
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		jnz	short loc_1000371D
		lea	eax, [esi+4]
		pop	esi
		pop	ebp
		retn	8
; ---------------------------------------------------------------------------

loc_1000371D:				; CODE XREF: ldap_init_templates+23j
		push	edi
		mov	edi, ds:fseek
		push	2		; Origin
		push	0		; Offset
		push	esi		; File
		call	edi ; fseek
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_10003747
		push	esi		; File
		call	ds:fclose
		add	esp, 4
		mov	eax, 4
		pop	edi
		pop	esi
		pop	ebp
		retn	8
; ---------------------------------------------------------------------------

loc_10003747:				; CODE XREF: ldap_init_templates+40j
		push	ebx
		push	esi		; File
		call	ds:ftell
		push	0		; Origin
		push	0		; Offset
		push	esi		; File
		mov	ebx, eax
		call	edi ; fseek
		add	esp, 10h
		test	eax, eax
		jz	short loc_10003775
		push	esi		; File
		call	ds:fclose
		add	esp, 4
		mov	eax, 4
		pop	ebx
		pop	edi
		pop	esi
		pop	ebp
		retn	8
; ---------------------------------------------------------------------------

loc_10003775:				; CODE XREF: ldap_init_templates+6Dj
		push	ebx
		call	ldap_x_malloc
		add	esp, 4
		mov	edi, eax
		push	esi		; File
		test	edi, edi
		jnz	short loc_10003798
		call	ds:fclose
		add	esp, 4
		lea	eax, [edi+2]
		pop	ebx
		pop	edi
		pop	esi
		pop	ebp
		retn	8
; ---------------------------------------------------------------------------

loc_10003798:				; CODE XREF: ldap_init_templates+93j
		push	ebx		; Count
		push	1		; ElementSize
		push	edi		; DstBuf
		call	ds:fread
		push	esi		; File
		mov	[esp+24h+arg_4], eax
		call	ds:feof
		push	esi		; File
		mov	[esp+28h+Filename], eax
		call	ds:fclose
		mov	eax, [esp+28h+arg_4]
		add	esp, 18h
		cmp	eax, ebx
		jz	short loc_100037DF
		cmp	[esp+10h+Filename], 0
		jnz	short loc_100037DF
		push	edi
		call	ldap_x_free
		add	esp, 4
		mov	eax, 4
		pop	ebx
		pop	edi
		pop	esi
		pop	ebp
		retn	8
; ---------------------------------------------------------------------------

loc_100037DF:				; CODE XREF: ldap_init_templates+D1j
					; ldap_init_templates+D8j
		push	ebp
		push	eax
		push	edi
		call	ldap_init_templates_buf
		push	edi
		mov	esi, eax
		call	ldap_x_free
		add	esp, 4
		mov	eax, esi
		pop	ebx
		pop	edi
		pop	esi
		pop	ebp
		retn	8
ldap_init_templates endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 401. ldap_init_templates_buf

; =============== S U B	R O U T	I N E =======================================


		public ldap_init_templates_buf
ldap_init_templates_buf	proc near	; CODE XREF: ldap_init_templates+F2p
					; DATA XREF: .rdata:off_10020938o

var_4		= dword	ptr -4
arg_0		= byte ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ecx
		push	ebx
		push	ebp
		mov	ebp, [esp+0Ch+arg_8]
		lea	eax, [esp+0Ch+arg_8]
		push	edi
		push	eax
		lea	eax, [esp+14h+arg_4]
		xor	ebx, ebx
		push	eax
		lea	eax, [esp+18h+arg_0]
		mov	[ebp+0], ebx
		push	eax
		xor	edi, edi
		call	sub_10004490
		add	esp, 0Ch
		cmp	eax, 2
		jnz	loc_100038D6
		mov	eax, [esp+10h+arg_8]
		push	offset Str2	; "version"
		push	dword ptr [eax]	; Str1
		call	ds:_stricmp
		add	esp, 8
		test	eax, eax
		jnz	loc_100038D6
		mov	eax, [esp+10h+arg_8]
		push	esi
		push	dword ptr [eax+4] ; Str
		call	ds:atoi
		push	[esp+18h+arg_8]
		mov	esi, eax
		call	sub_10004450
		add	esp, 8
		cmp	esi, 1
		pop	esi
		jz	short loc_10003877
		pop	edi
		pop	ebp
		lea	eax, [ebx+1]
		pop	ebx
		pop	ecx
		retn	0Ch
; ---------------------------------------------------------------------------

loc_10003877:				; CODE XREF: ldap_init_templates_buf+6Bj
		cmp	[esp+10h+arg_4], ebx
		jle	short loc_100038CD
		lea	ecx, [ecx+0]

loc_10003880:				; CODE XREF: ldap_init_templates_buf+BAj
		push	1
		lea	eax, [esp+14h+var_4]
		push	eax
		lea	eax, [esp+18h+arg_4]
		push	eax
		lea	eax, [esp+1Ch+arg_0]
		push	eax
		call	sub_10003C30
		mov	ebx, eax
		add	esp, 10h
		test	ebx, ebx
		jnz	short loc_100038C5
		mov	ecx, [esp+10h+var_4]
		test	ecx, ecx
		jz	short loc_100038CD
		test	edi, edi
		jnz	short loc_100038B0
		mov	[ebp+0], ecx
		jmp	short loc_100038B3
; ---------------------------------------------------------------------------

loc_100038B0:				; CODE XREF: ldap_init_templates_buf+A9j
		mov	[edi+2Ch], ecx

loc_100038B3:				; CODE XREF: ldap_init_templates_buf+AEj
		cmp	[esp+10h+arg_4], 0
		mov	edi, ecx
		jg	short loc_10003880
		pop	edi
		pop	ebp
		mov	eax, ebx
		pop	ebx
		pop	ecx
		retn	0Ch
; ---------------------------------------------------------------------------

loc_100038C5:				; CODE XREF: ldap_init_templates_buf+9Dj
		push	dword ptr [ebp+0]
		call	ldap_free_templates

loc_100038CD:				; CODE XREF: ldap_init_templates_buf+7Bj
					; ldap_init_templates_buf+A5j
		pop	edi
		pop	ebp
		mov	eax, ebx
		pop	ebx
		pop	ecx
		retn	0Ch
; ---------------------------------------------------------------------------

loc_100038D6:				; CODE XREF: ldap_init_templates_buf+29j
					; ldap_init_templates_buf+45j
		push	[esp+10h+arg_8]
		call	sub_10004450
		add	esp, 4
		mov	eax, 3
		pop	edi
		pop	ebp
		pop	ebx
		pop	ecx
		retn	0Ch
ldap_init_templates_buf	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  78. ldap_name2template

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	ldap_name2template(char	*Str1, int)
		public ldap_name2template
ldap_name2template proc	near		; DATA XREF: .rdata:off_10020938o

Str1		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebx
		push	esi
		mov	esi, [esp+8+arg_4]
		push	edi
		test	esi, esi
		jz	short loc_10003918
		mov	edi, [esp+0Ch+Str1]
		mov	ebx, ds:_stricmp

loc_10003905:				; CODE XREF: ldap_name2template+26j
		push	dword ptr [esi]	; Str2
		push	edi		; Str1
		call	ebx ; _stricmp
		add	esp, 8
		test	eax, eax
		jz	short loc_10003920
		mov	esi, [esi+2Ch]
		test	esi, esi
		jnz	short loc_10003905

loc_10003918:				; CODE XREF: ldap_name2template+9j
		pop	edi
		pop	esi
		xor	eax, eax
		pop	ebx
		retn	8
; ---------------------------------------------------------------------------

loc_10003920:				; CODE XREF: ldap_name2template+1Fj
		pop	edi
		mov	eax, esi
		pop	esi
		pop	ebx
		retn	8
ldap_name2template endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 404. ldap_next_disptmpl

; =============== S U B	R O U T	I N E =======================================


		public ldap_next_disptmpl
ldap_next_disptmpl proc	near		; DATA XREF: .rdata:off_10020938o

arg_4		= dword	ptr  8

		mov	eax, [esp+arg_4]
		test	eax, eax
		jnz	short loc_1000393B
		retn	8
; ---------------------------------------------------------------------------

loc_1000393B:				; CODE XREF: ldap_next_disptmpl+6j
		mov	eax, [eax+2Ch]
		retn	8
ldap_next_disptmpl endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 410. ldap_next_tmplcol

; =============== S U B	R O U T	I N E =======================================


		public ldap_next_tmplcol
ldap_next_tmplcol proc near		; CODE XREF: sub_10015D40+715p
					; sub_10016E60+41p
					; DATA XREF: ...

arg_8		= dword	ptr  0Ch

		mov	eax, [esp+arg_8]
		test	eax, eax
		jnz	short loc_1000395B
		retn	0Ch
; ---------------------------------------------------------------------------

loc_1000395B:				; CODE XREF: ldap_next_tmplcol+6j
		mov	eax, [eax+14h]
		retn	0Ch
ldap_next_tmplcol endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 408. ldap_next_tmplrow

; =============== S U B	R O U T	I N E =======================================


		public ldap_next_tmplrow
ldap_next_tmplrow proc near		; CODE XREF: sub_10015D40+72Dp
					; sub_10016E60+4Ep
					; DATA XREF: ...

arg_4		= dword	ptr  8

		mov	eax, [esp+arg_4]
		test	eax, eax
		jnz	short loc_1000397B
		retn	8
; ---------------------------------------------------------------------------

loc_1000397B:				; CODE XREF: ldap_next_tmplrow+6j
		mov	eax, [eax+18h]
		retn	8
ldap_next_tmplrow endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 405. ldap_oc2template

; =============== S U B	R O U T	I N E =======================================


		public ldap_oc2template
ldap_oc2template proc near		; CODE XREF: sub_10016490+105p
					; DATA XREF: .rdata:off_10020938o

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	ecx, [esp+arg_4]
		sub	esp, 8
		push	ebx
		test	ecx, ecx
		jz	loc_10003A7A
		mov	ebx, [esp+0Ch+arg_0]
		test	ebx, ebx
		jz	loc_10003A7A
		cmp	dword ptr [ebx], 0
		jz	loc_10003A7A
		push	ebp
		push	esi
		push	edi
		jmp	short loc_100039C0
; ---------------------------------------------------------------------------
		align 10h

loc_100039C0:				; CODE XREF: ldap_oc2template+28j
					; ldap_oc2template+CAj
		mov	ebp, [ecx+1Ch]
		test	ebp, ebp
		jz	loc_10003A51
		jmp	short loc_100039D0
; ---------------------------------------------------------------------------
		align 10h

loc_100039D0:				; CODE XREF: ldap_oc2template+3Bj
					; ldap_oc2template+BBj
		mov	eax, [ebp+0]
		xor	ecx, ecx
		xor	edi, edi
		mov	[esp+18h+var_8], ecx
		mov	[esp+18h+arg_0], edi
		cmp	[eax], ecx
		jz	loc_10003A6C
		xor	edx, edx
		mov	[esp+18h+var_4], edx
		lea	ecx, [ecx+0]

loc_100039F0:				; CODE XREF: ldap_oc2template+B0j
		xor	esi, esi
		cmp	[ebx], esi
		jz	short loc_10003A20
		mov	ecx, ebx

loc_100039F8:				; CODE XREF: ldap_oc2template+8Aj
		mov	eax, [ebp+0]
		push	dword ptr [eax+edx] ; Str2
		push	dword ptr [ecx]	; Str1
		call	ds:_stricmp
		add	esp, 8
		test	eax, eax
		jnz	short loc_10003A0E
		inc	edi

loc_10003A0E:				; CODE XREF: ldap_oc2template+7Bj
		mov	edx, [esp+18h+var_4]
		inc	esi
		cmp	dword ptr [ebx+esi*4], 0
		lea	ecx, [ebx+esi*4]
		jnz	short loc_100039F8
		mov	ecx, [esp+18h+var_8]

loc_10003A20:				; CODE XREF: ldap_oc2template+64j
		mov	eax, [ebp+0]
		inc	ecx
		mov	esi, [esp+18h+arg_0]
		inc	esi
		mov	[esp+18h+var_8], ecx
		mov	[esp+18h+arg_0], esi
		lea	edx, ds:0[ecx*4]
		cmp	dword ptr [edx+eax], 0
		mov	[esp+18h+var_4], edx
		jnz	short loc_100039F0
		cmp	edi, esi
		jz	short loc_10003A6C
		mov	ebp, [ebp+4]
		test	ebp, ebp
		jnz	short loc_100039D0
		mov	ecx, [esp+18h+arg_4]

loc_10003A51:				; CODE XREF: ldap_oc2template+35j
		mov	ecx, [ecx+2Ch]
		mov	[esp+18h+arg_4], ecx
		test	ecx, ecx
		jnz	loc_100039C0
		pop	edi
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		add	esp, 8
		retn	8
; ---------------------------------------------------------------------------

loc_10003A6C:				; CODE XREF: ldap_oc2template+51j
					; ldap_oc2template+B4j
		mov	eax, [esp+18h+arg_4]
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 8
		retn	8
; ---------------------------------------------------------------------------

loc_10003A7A:				; CODE XREF: ldap_oc2template+Aj
					; ldap_oc2template+16j	...
		xor	eax, eax
		pop	ebx
		add	esp, 8
		retn	8
ldap_oc2template endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 406. ldap_tmplattrs

; =============== S U B	R O U T	I N E =======================================


		public ldap_tmplattrs
ldap_tmplattrs	proc near		; CODE XREF: sub_10016490+138p
					; DATA XREF: .rdata:off_10020938o

var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ecx
		push	ebx
		push	ebp
		push	edi
		xor	ebp, ebp
		xor	ebx, ebx
		push	4
		mov	[esp+14h+var_4], ebp
		call	ldap_x_malloc
		mov	edi, eax
		add	esp, 4
		test	edi, edi
		jnz	short loc_10003AB3
		pop	edi
		pop	ebp
		pop	ebx
		pop	ecx
		retn	10h
; ---------------------------------------------------------------------------

loc_10003AB3:				; CODE XREF: ldap_tmplattrs+1Aj
		push	esi
		mov	esi, [esp+14h+arg_4]
		test	esi, esi
		jz	short loc_10003B07
		lea	esp, [esp+0]

loc_10003AC0:				; CODE XREF: ldap_tmplattrs+71j
		cmp	dword ptr [esi], 0
		jz	short loc_10003B03
		lea	eax, ds:8[ebx*4]
		push	eax
		push	edi
		call	ldap_x_realloc
		mov	edi, eax
		add	esp, 8
		test	edi, edi
		jz	short loc_10003AF7
		push	dword ptr [esi]
		call	sub_1000BAB0
		mov	[edi+ebx*4], eax
		add	esp, 4
		inc	ebx
		test	eax, eax
		jz	short loc_10003AF7
		mov	dword ptr [edi+ebx*4], 0
		jmp	short loc_10003AFC
; ---------------------------------------------------------------------------

loc_10003AF7:				; CODE XREF: ldap_tmplattrs+4Aj
					; ldap_tmplattrs+5Cj
		mov	ebp, 1

loc_10003AFC:				; CODE XREF: ldap_tmplattrs+65j
		add	esi, 4
		test	ebp, ebp
		jz	short loc_10003AC0

loc_10003B03:				; CODE XREF: ldap_tmplattrs+33j
		mov	[esp+14h+var_4], ebp

loc_10003B07:				; CODE XREF: ldap_tmplattrs+2Aj
		mov	eax, [esp+14h+arg_0]
		mov	ecx, [eax+24h]
		mov	eax, [esp+14h+var_4]
		mov	[esp+14h+arg_4], ecx
		test	eax, eax
		jnz	loc_10003BA5
		mov	ebp, [esp+14h+arg_C]

loc_10003B22:				; CODE XREF: ldap_tmplattrs+10Fj
		test	ecx, ecx
		jz	loc_10003BD8
		mov	esi, ecx
		lea	esp, [esp+0]

loc_10003B30:				; CODE XREF: ldap_tmplattrs+100j
		test	ebp, ebp
		jz	short loc_10003B45
		cmp	[esp+14h+arg_8], 0
		jz	short loc_10003B41
		test	[esi], ebp
		jnz	short loc_10003B8B
		jmp	short loc_10003B45
; ---------------------------------------------------------------------------

loc_10003B41:				; CODE XREF: ldap_tmplattrs+A9j
		test	[esi], ebp
		jz	short loc_10003B8B

loc_10003B45:				; CODE XREF: ldap_tmplattrs+A2j
					; ldap_tmplattrs+AFj
		cmp	dword ptr [esi+8], 0
		jz	short loc_10003B8B
		lea	eax, ds:8[ebx*4]
		push	eax
		push	edi
		call	ldap_x_realloc
		mov	edi, eax
		add	esp, 8
		test	edi, edi
		jz	short loc_10003B82
		push	dword ptr [esi+8]
		call	sub_1000BAB0
		mov	[edi+ebx*4], eax
		add	esp, 4
		inc	ebx
		test	eax, eax
		jz	short loc_10003B82
		mov	eax, [esp+14h+var_4]
		mov	dword ptr [edi+ebx*4], 0
		jmp	short loc_10003B8B
; ---------------------------------------------------------------------------

loc_10003B82:				; CODE XREF: ldap_tmplattrs+D0j
					; ldap_tmplattrs+E3j
		mov	eax, 1
		mov	[esp+14h+var_4], eax

loc_10003B8B:				; CODE XREF: ldap_tmplattrs+ADj
					; ldap_tmplattrs+B3j ...
		mov	esi, [esi+14h]
		test	esi, esi
		jnz	short loc_10003B30
		mov	ecx, [esp+14h+arg_4]
		mov	ecx, [ecx+18h]
		mov	[esp+14h+arg_4], ecx
		test	eax, eax
		jz	loc_10003B22

loc_10003BA5:				; CODE XREF: ldap_tmplattrs+88j
					; ldap_tmplattrs+14Aj ...
		xor	esi, esi
		test	ebx, ebx
		jle	short loc_10003BC5
		jmp	short loc_10003BB0
; ---------------------------------------------------------------------------
		align 10h

loc_10003BB0:				; CODE XREF: ldap_tmplattrs+11Bj
					; ldap_tmplattrs+133j
		mov	eax, [edi+esi*4]
		test	eax, eax
		jz	short loc_10003BC0
		push	eax
		call	ldap_x_free
		add	esp, 4

loc_10003BC0:				; CODE XREF: ldap_tmplattrs+125j
		inc	esi
		cmp	esi, ebx
		jl	short loc_10003BB0

loc_10003BC5:				; CODE XREF: ldap_tmplattrs+119j
		push	edi
		call	ldap_x_free
		add	esp, 4
		xor	eax, eax
		pop	esi
		pop	edi
		pop	ebp
		pop	ebx
		pop	ecx
		retn	10h
; ---------------------------------------------------------------------------

loc_10003BD8:				; CODE XREF: ldap_tmplattrs+94j
		test	eax, eax
		jnz	short loc_10003BA5
		test	ebx, ebx
		jz	short loc_10003BA5
		pop	esi
		mov	eax, edi
		pop	edi
		pop	ebp
		pop	ebx
		pop	ecx
		retn	10h
ldap_tmplattrs	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 417. ldap_tmplerr2string

; =============== S U B	R O U T	I N E =======================================


		public ldap_tmplerr2string
ldap_tmplerr2string proc near		; DATA XREF: .rdata:off_10020938o

arg_0		= dword	ptr  4

		mov	ecx, dword_100240E8
		xor	eax, eax
		cmp	ecx, 0FFFFFFFFh
		jz	short loc_10003C12
		mov	edx, [esp+arg_0]

loc_10003C01:				; CODE XREF: ldap_tmplerr2string+20j
		cmp	edx, ecx
		jz	short loc_10003C1A
		mov	ecx, dword_100240F0[eax*8]
		inc	eax
		cmp	ecx, 0FFFFFFFFh
		jnz	short loc_10003C01

loc_10003C12:				; CODE XREF: ldap_tmplerr2string+Bj
		mov	eax, offset aUnknownError ; "Unknown error"
		retn	4
; ---------------------------------------------------------------------------

loc_10003C1A:				; CODE XREF: ldap_tmplerr2string+13j
		mov	eax, off_100240EC[eax*8]
		retn	4
ldap_tmplerr2string endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10003C30	proc near		; CODE XREF: ldap_init_templates_buf+91p

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 1Ch
		push	ebp
		mov	ebp, [esp+20h+arg_0]
		lea	eax, [esp+20h+var_1C]
		push	esi
		push	edi
		push	eax
		push	[esp+2Ch+arg_4]
		xor	edi, edi
		push	ebp
		mov	[esp+34h+var_8], edi
		mov	[esp+34h+var_14], edi
		mov	[esp+34h+var_4], edi
		call	sub_10004490
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, 1
		jz	short loc_10003C7D
		push	[esp+28h+var_1C]
		call	sub_10004450
		add	esp, 4
		neg	esi
		sbb	esi, esi
		and	esi, 3
		pop	edi
		mov	eax, esi
		pop	esi
		pop	ebp
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------

loc_10003C7D:				; CODE XREF: sub_10003C30+2Fj
		push	ebx
		push	30h
		push	1
		call	ldap_x_calloc
		mov	ebx, eax
		add	esp, 8
		mov	[esp+2Ch+var_18], ebx
		test	ebx, ebx
		jnz	short loc_10003CAB
		push	[esp+2Ch+var_1C]
		call	sub_10004450
		add	esp, 4
		lea	eax, [ebx+2]
		pop	ebx
		pop	edi
		pop	esi
		pop	ebp
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------

loc_10003CAB:				; CODE XREF: sub_10003C30+62j
		mov	eax, [esp+2Ch+var_1C]
		mov	eax, [eax]
		mov	[ebx], eax
		push	[esp+2Ch+var_1C]
		call	ldap_x_free
		mov	esi, [esp+30h+arg_4]
		lea	eax, [esp+30h+var_1C]
		push	eax
		push	esi
		push	ebp
		call	sub_10004490
		add	esp, 10h
		cmp	eax, 1
		jnz	loc_10004132
		mov	eax, [esp+2Ch+var_1C]
		mov	eax, [eax]
		mov	[ebx+4], eax
		push	[esp+2Ch+var_1C]
		call	ldap_x_free
		lea	eax, [esp+30h+var_1C]
		push	eax
		push	esi
		push	ebp
		call	sub_10004490
		add	esp, 10h
		cmp	eax, 1
		jnz	loc_10004132
		mov	eax, [esp+2Ch+var_1C]
		mov	eax, [eax]
		mov	[ebx+8], eax
		push	[esp+2Ch+var_1C]
		call	ldap_x_free
		lea	eax, [esp+30h+var_1C]
		push	eax
		push	esi
		push	ebp
		call	sub_10004490
		add	esp, 10h
		cmp	eax, 1
		jl	loc_10004132
		mov	ecx, [esp+2Ch+var_1C]
		xor	eax, eax
		mov	ebp, ds:_stricmp
		mov	[esp+2Ch+var_10], eax
		cmp	[ecx], eax
		jz	short loc_10003DAF
		xor	edx, edx
		mov	[esp+2Ch+var_C], edx

loc_10003D46:				; CODE XREF: sub_10003C30+177j
		xor	edi, edi
		cmp	off_10024000, edi
		jz	short loc_10003D93
		mov	eax, offset off_10024000
		xor	esi, esi

loc_10003D57:				; CODE XREF: sub_10003C30+15Dj
		push	dword ptr [eax]	; Str2
		push	dword ptr [edx+ecx] ; Str1
		call	ebp ; _stricmp
		add	esp, 8
		test	eax, eax
		jnz	short loc_10003D6E
		mov	eax, dword_10024010[esi]
		or	[ebx+0Ch], eax

loc_10003D6E:				; CODE XREF: sub_10003C30+133j
		mov	ecx, [esp+2Ch+var_1C]
		inc	edi
		lea	esi, ds:0[edi*4]
		cmp	off_10024000[esi], 0
		lea	eax, off_10024000[esi]
		jz	short loc_10003D8F
		mov	edx, [esp+2Ch+var_C]
		jmp	short loc_10003D57
; ---------------------------------------------------------------------------

loc_10003D8F:				; CODE XREF: sub_10003C30+157j
		mov	eax, [esp+2Ch+var_10]

loc_10003D93:				; CODE XREF: sub_10003C30+11Ej
		inc	eax
		mov	[esp+2Ch+var_10], eax
		lea	edx, ds:0[eax*4]
		cmp	dword ptr [edx+ecx], 0
		mov	[esp+2Ch+var_C], edx
		jnz	short loc_10003D46
		mov	esi, [esp+2Ch+arg_4]
		xor	edi, edi

loc_10003DAF:				; CODE XREF: sub_10003C30+10Ej
		push	ecx
		call	sub_10004450
		lea	eax, [esp+30h+var_1C]
		push	eax
		push	esi
		push	[esp+38h+arg_0]
		call	sub_10004490
		add	esp, 10h
		test	eax, eax
		jle	short loc_10003E10
		jmp	short loc_10003DD0
; ---------------------------------------------------------------------------
		align 10h

loc_10003DD0:				; CODE XREF: sub_10003C30+19Bj
					; sub_10003C30+1DEj
		push	8
		push	1
		call	ldap_x_calloc
		add	esp, 8
		test	eax, eax
		jz	loc_10004113
		mov	ecx, [esp+2Ch+var_1C]
		mov	[eax], ecx
		cmp	dword ptr [ebx+1Ch], 0
		jnz	short loc_10003DF5
		mov	[ebx+1Ch], eax
		jmp	short loc_10003DF8
; ---------------------------------------------------------------------------

loc_10003DF5:				; CODE XREF: sub_10003C30+1BEj
		mov	[edi+4], eax

loc_10003DF8:				; CODE XREF: sub_10003C30+1C3j
		mov	edi, eax
		lea	eax, [esp+2Ch+var_1C]
		push	eax
		push	esi
		push	[esp+34h+arg_0]
		call	sub_10004490
		add	esp, 0Ch
		test	eax, eax
		jg	short loc_10003DD0

loc_10003E10:				; CODE XREF: sub_10003C30+199j
		js	loc_10004251
		mov	edi, [esp+2Ch+arg_0]
		lea	eax, [esp+2Ch+var_1C]
		push	eax
		push	esi
		push	edi
		call	sub_10004490
		add	esp, 0Ch
		cmp	eax, 1
		jnz	loc_10004132
		mov	eax, [esp+2Ch+var_1C]
		mov	eax, [eax]
		cmp	byte ptr [eax],	0
		jz	short loc_10003E42
		mov	[ebx+10h], eax
		jmp	short loc_10003E4B
; ---------------------------------------------------------------------------

loc_10003E42:				; CODE XREF: sub_10003C30+20Bj
		push	eax
		call	ldap_x_free
		add	esp, 4

loc_10003E4B:				; CODE XREF: sub_10003C30+210j
		push	[esp+2Ch+var_1C]
		call	ldap_x_free
		lea	eax, [esp+30h+var_1C]
		push	eax
		push	esi
		push	edi
		call	sub_10004490
		add	esp, 10h
		cmp	eax, 1
		jnz	loc_10004132
		mov	eax, [esp+2Ch+var_1C]
		mov	eax, [eax]
		mov	[ebx+14h], eax
		push	[esp+2Ch+var_1C]
		call	ldap_x_free
		lea	eax, [esp+30h+var_1C]
		push	eax
		push	esi
		push	edi
		call	sub_10004490
		add	esp, 10h
		cmp	eax, 1
		jnz	loc_10004132
		mov	eax, [esp+2Ch+var_1C]
		mov	eax, [eax]
		cmp	byte ptr [eax],	0
		jz	short loc_10003EA6
		mov	[ebx+18h], eax
		jmp	short loc_10003EAF
; ---------------------------------------------------------------------------

loc_10003EA6:				; CODE XREF: sub_10003C30+26Fj
		push	eax
		call	ldap_x_free
		add	esp, 4

loc_10003EAF:				; CODE XREF: sub_10003C30+274j
		push	[esp+2Ch+var_1C]
		call	ldap_x_free
		lea	eax, [esp+30h+var_1C]
		push	eax
		push	esi
		push	edi
		call	sub_10004490
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		jle	loc_10003FA3

loc_10003ED1:				; CODE XREF: sub_10003C30+36Dj
		mov	ecx, [esp+2Ch+var_1C]
		push	dword ptr [ecx]	; Str2
		push	offset Str1	; "constant"
		call	ebp ; _stricmp
		add	esp, 8
		test	eax, eax
		jnz	short loc_10003EEA
		lea	edi, [eax+1]
		jmp	short loc_10003F05
; ---------------------------------------------------------------------------

loc_10003EEA:				; CODE XREF: sub_10003C30+2B3j
		mov	eax, [esp+2Ch+var_1C]
		push	dword ptr [eax]	; Str2
		push	offset aAddersdn ; "addersdn"
		call	ebp ; _stricmp
		add	esp, 8
		test	eax, eax
		jnz	loc_10004132
		lea	edi, [eax+2]

loc_10003F05:				; CODE XREF: sub_10003C30+2B8j
		cmp	esi, 2
		jl	loc_10004132
		cmp	edi, 1
		jnz	short loc_10003F18
		cmp	esi, 3
		jmp	short loc_10003F1F
; ---------------------------------------------------------------------------

loc_10003F18:				; CODE XREF: sub_10003C30+2E1j
		cmp	edi, 2
		jnz	short loc_10003F25
		cmp	esi, edi

loc_10003F1F:				; CODE XREF: sub_10003C30+2E6j
		jnz	loc_10004132

loc_10003F25:				; CODE XREF: sub_10003C30+2EBj
		push	10h
		push	1
		call	ldap_x_calloc
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		jz	loc_10004113
		mov	[esi], edi
		mov	ecx, [esp+2Ch+var_1C]
		mov	ecx, [ecx+4]
		mov	[esi+4], ecx
		cmp	edi, 1
		jnz	short loc_10003F56
		mov	eax, [esp+2Ch+var_1C]
		mov	eax, [eax+8]
		mov	[esi+8], eax

loc_10003F56:				; CODE XREF: sub_10003C30+31Aj
		mov	eax, [esp+2Ch+var_1C]
		push	dword ptr [eax]
		call	ldap_x_free
		push	[esp+30h+var_1C]
		call	ldap_x_free
		add	esp, 8
		cmp	dword ptr [ebx+20h], 0
		jnz	short loc_10003F78
		mov	[ebx+20h], esi
		jmp	short loc_10003F7F
; ---------------------------------------------------------------------------

loc_10003F78:				; CODE XREF: sub_10003C30+341j
		mov	eax, [esp+2Ch+var_8]
		mov	[eax+0Ch], esi

loc_10003F7F:				; CODE XREF: sub_10003C30+346j
		mov	edi, [esp+2Ch+arg_0]
		lea	eax, [esp+2Ch+var_1C]
		push	eax
		push	[esp+30h+arg_4]
		mov	[esp+34h+var_8], esi
		push	edi
		call	sub_10004490
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		jg	loc_10003ED1

loc_10003FA3:				; CODE XREF: sub_10003C30+29Bj
		lea	eax, [esp+2Ch+var_1C]
		mov	[esp+2Ch+var_10], 0
		push	eax
		push	[esp+30h+arg_4]
		push	edi
		call	sub_10004490
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		jle	loc_1000424F
		jmp	short loc_10003FD0
; ---------------------------------------------------------------------------
		align 10h

loc_10003FD0:				; CODE XREF: sub_10003C30+397j
					; sub_10003C30+613j
		mov	ecx, [esp+2Ch+var_1C]
		push	offset aItem	; "item"
		push	dword ptr [ecx]	; Str1
		call	ebp ; _stricmp
		add	esp, 8
		test	eax, eax
		jnz	loc_10004205
		cmp	esi, 4
		jl	loc_10004280
		push	20h
		push	1
		call	ldap_x_calloc
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		jz	loc_100042A2
		mov	ecx, [esp+2Ch+var_1C]
		push	2Ch		; Ch
		push	dword ptr [ecx+4] ; Str
		call	ds:strrchr
		mov	edi, eax
		add	esp, 8
		test	edi, edi
		jz	short loc_10004081
		nop

loc_10004020:				; CODE XREF: sub_10003C30+44Fj
		mov	byte ptr [edi],	0
		xor	esi, esi
		inc	edi
		cmp	off_1002401C, esi
		jz	short loc_10004051
		mov	eax, offset off_1002401C

loc_10004033:				; CODE XREF: sub_10003C30+41Fj
		push	dword ptr [eax]	; Str2
		push	edi		; Str1
		call	ebp ; _stricmp
		add	esp, 8
		test	eax, eax
		jz	short loc_10004051
		inc	esi
		cmp	off_1002401C[esi*4], 0
		lea	eax, off_1002401C[esi*4]
		jnz	short loc_10004033

loc_10004051:				; CODE XREF: sub_10003C30+3FCj
					; sub_10003C30+40Dj
		cmp	off_1002401C[esi*4], 0
		jz	loc_10004280
		mov	eax, dword_100240D0[esi*4]
		or	[ebx+4], eax
		mov	eax, [esp+2Ch+var_1C]
		push	2Ch		; Ch
		push	dword ptr [eax+4] ; Str
		call	ds:strrchr
		mov	edi, eax
		add	esp, 8
		test	edi, edi
		jnz	short loc_10004020

loc_10004081:				; CODE XREF: sub_10003C30+3EDj
		xor	esi, esi
		cmp	off_10024038, esi
		jz	short loc_100040B4
		mov	eax, offset off_10024038

loc_10004090:				; CODE XREF: sub_10003C30+482j
		push	dword ptr [eax]	; Str2
		mov	eax, [esp+30h+var_1C]
		push	dword ptr [eax+4] ; Str1
		call	ebp ; _stricmp
		add	esp, 8
		test	eax, eax
		jz	short loc_100040B4
		inc	esi
		cmp	off_10024038[esi*4], 0
		lea	eax, off_10024038[esi*4]
		jnz	short loc_10004090

loc_100040B4:				; CODE XREF: sub_10003C30+459j
					; sub_10003C30+470j
		cmp	off_10024038[esi*4], 0
		jz	loc_10004280
		mov	eax, [esp+2Ch+var_1C]
		push	dword ptr [eax]
		call	ldap_x_free
		mov	eax, [esp+30h+var_1C]
		push	dword ptr [eax+4]
		call	ldap_x_free
		mov	eax, dword_10024088[esi*4]
		add	esp, 8
		mov	[ebx], eax
		mov	eax, [esp+2Ch+var_1C]
		mov	eax, [eax+8]
		mov	[ebx+0Ch], eax
		mov	eax, [esp+2Ch+var_1C]
		mov	eax, [eax+0Ch]
		cmp	byte ptr [eax],	0
		jnz	short loc_10004151
		mov	dword ptr [ebx+8], 0
		mov	eax, [esp+2Ch+var_1C]
		push	dword ptr [eax+0Ch]
		call	ldap_x_free
		add	esp, 4
		jmp	short loc_10004154
; ---------------------------------------------------------------------------

loc_10004113:				; CODE XREF: sub_10003C30+1AEj
					; sub_10003C30+305j
		push	[esp+2Ch+var_1C]
		call	sub_10004450
		push	ebx
		call	sub_10003450
		add	esp, 8
		mov	eax, 2
		pop	ebx
		pop	edi
		pop	esi
		pop	ebp
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------

loc_10004132:				; CODE XREF: sub_10003C30+A2j
					; sub_10003C30+CCj ...
		push	[esp+2Ch+var_1C]
		call	sub_10004450
		push	ebx
		call	sub_10003450
		add	esp, 8
		mov	eax, 3
		pop	ebx
		pop	edi
		pop	esi
		pop	ebp
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------

loc_10004151:				; CODE XREF: sub_10003C30+4C9j
		mov	[ebx+8], eax

loc_10004154:				; CODE XREF: sub_10003C30+4E1j
		mov	ecx, [esp+2Ch+var_1C]
		cmp	dword ptr [ecx+10h], 0
		lea	eax, [ecx+10h]
		jz	short loc_100041B0
		xor	ecx, ecx

loc_10004163:				; CODE XREF: sub_10003C30+53Dj
		cmp	dword ptr [eax+4], 0
		lea	eax, [eax+4]
		lea	ecx, [ecx+1]
		jnz	short loc_10004163
		lea	eax, [ecx+1]
		push	4
		push	eax
		call	ldap_x_calloc
		add	esp, 8
		mov	[ebx+10h], eax
		test	eax, eax
		jz	loc_10004267
		mov	ecx, [esp+2Ch+var_1C]
		cmp	dword ptr [ecx+10h], 0
		lea	eax, [ecx+10h]
		jz	short loc_100041B0
		xor	edx, edx

loc_10004197:				; CODE XREF: sub_10003C30+57Ej
		mov	ecx, [ebx+10h]
		mov	eax, [eax]
		mov	[edx+ecx], eax
		add	edx, 4
		mov	ecx, [esp+2Ch+var_1C]
		lea	eax, [ecx+10h]
		add	eax, edx
		cmp	dword ptr [eax], 0
		jnz	short loc_10004197

loc_100041B0:				; CODE XREF: sub_10003C30+52Fj
					; sub_10003C30+563j
		push	ecx
		call	ldap_x_free
		mov	eax, [esp+30h+var_18]
		add	esp, 4
		cmp	dword ptr [eax+24h], 0
		jnz	short loc_100041C8
		mov	[eax+24h], ebx
		jmp	short loc_100041EF
; ---------------------------------------------------------------------------

loc_100041C8:				; CODE XREF: sub_10003C30+591j
		cmp	[esp+2Ch+var_10], 0
		jz	short loc_100041E8
		mov	eax, [esp+2Ch+var_4]
		mov	edi, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_4], ebx
		mov	[esp+2Ch+var_10], 0
		mov	[eax+14h], ebx
		jmp	short loc_1000422D
; ---------------------------------------------------------------------------

loc_100041E8:				; CODE XREF: sub_10003C30+59Dj
		mov	eax, [esp+2Ch+var_14]
		mov	[eax+18h], ebx

loc_100041EF:				; CODE XREF: sub_10003C30+596j
		mov	edi, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_14], ebx
		mov	[esp+2Ch+var_4], ebx
		mov	[esp+2Ch+var_10], 0
		jmp	short loc_1000422D
; ---------------------------------------------------------------------------

loc_10004205:				; CODE XREF: sub_10003C30+3B2j
		mov	eax, [esp+2Ch+var_1C]
		push	offset aSamerow	; "samerow"
		push	dword ptr [eax]	; Str1
		call	ebp ; _stricmp
		add	esp, 8
		push	[esp+2Ch+var_1C]
		test	eax, eax
		jnz	short loc_10004284
		call	sub_10004450
		add	esp, 4
		mov	[esp+2Ch+var_10], 1

loc_1000422D:				; CODE XREF: sub_10003C30+5B6j
					; sub_10003C30+5D3j
		lea	eax, [esp+2Ch+var_1C]
		push	eax
		push	[esp+30h+arg_4]
		push	edi
		call	sub_10004490
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		jg	loc_10003FD0
		mov	ebx, [esp+2Ch+var_18]
		test	esi, esi

loc_1000424F:				; CODE XREF: sub_10003C30+391j
		jns	short loc_100042C4

loc_10004251:				; CODE XREF: sub_10003C30:loc_10003E10j
		push	ebx
		call	sub_10003450
		add	esp, 4
		mov	eax, 3
		pop	ebx
		pop	edi
		pop	esi
		pop	ebp
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------

loc_10004267:				; CODE XREF: sub_10003C30+552j
		push	[esp+2Ch+var_18]
		call	sub_10003450
		add	esp, 4
		mov	eax, 2
		pop	ebx
		pop	edi
		pop	esi
		pop	ebp
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------

loc_10004280:				; CODE XREF: sub_10003C30+3BBj
					; sub_10003C30+429j ...
		push	[esp+2Ch+var_1C]

loc_10004284:				; CODE XREF: sub_10003C30+5EBj
		call	sub_10004450
		push	[esp+30h+var_18]
		call	sub_10003450
		add	esp, 8
		mov	eax, 3
		pop	ebx
		pop	edi
		pop	esi
		pop	ebp
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------

loc_100042A2:				; CODE XREF: sub_10003C30+3D1j
		push	[esp+2Ch+var_1C]
		call	sub_10004450
		push	[esp+30h+var_18]
		call	sub_10003450
		add	esp, 8
		mov	eax, 2
		pop	ebx
		pop	edi
		pop	esi
		pop	ebp
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------

loc_100042C4:				; CODE XREF: sub_10003C30:loc_1000424Fj
		mov	eax, [esp+2Ch+arg_8]
		mov	[eax], ebx
		xor	eax, eax
		pop	ebx
		pop	edi
		pop	esi
		pop	ebp
		add	esp, 1Ch
		retn
sub_10003C30	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100042E0	proc near		; CODE XREF: sub_10004490+17p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	edx, [esp+arg_0]
		push	ebx
		push	esi
		push	edi
		mov	edi, [esp+0Ch+arg_4]
		mov	esi, [edx]
		mov	eax, [edi]
		nop

loc_100042F0:				; CODE XREF: sub_100042E0+52j
					; sub_100042E0+59j
		mov	ebx, esi
		test	eax, eax
		jle	short loc_10004329

loc_100042F6:				; CODE XREF: sub_100042E0+26j
		mov	cl, [esi]
		cmp	cl, 0Dh
		jz	short loc_10004318
		cmp	cl, 0Ah
		jz	short loc_1000430A
		dec	eax
		inc	esi
		test	eax, eax
		jg	short loc_100042F6
		jmp	short loc_10004329
; ---------------------------------------------------------------------------

loc_1000430A:				; CODE XREF: sub_100042E0+20j
		cmp	eax, 1
		jle	short loc_10004329
		cmp	byte ptr [esi+1], 0Dh
		lea	ecx, [esi+1]
		jmp	short loc_10004324
; ---------------------------------------------------------------------------

loc_10004318:				; CODE XREF: sub_100042E0+1Bj
		cmp	eax, 1
		jle	short loc_10004329
		cmp	byte ptr [esi+1], 0Ah
		lea	ecx, [esi+1]

loc_10004324:				; CODE XREF: sub_100042E0+36j
		jnz	short loc_10004329
		dec	eax
		mov	esi, ecx

loc_10004329:				; CODE XREF: sub_100042E0+14j
					; sub_100042E0+28j ...
		dec	eax
		inc	esi
		test	eax, eax
		jle	short loc_1000433B
		cmp	byte ptr [ebx],	23h
		jz	short loc_100042F0
		lea	ecx, [ebx+1]
		cmp	ecx, esi
		jz	short loc_100042F0

loc_1000433B:				; CODE XREF: sub_100042E0+4Dj
		mov	[edx], esi
		mov	[edi], eax
		test	eax, eax
		jg	short loc_10004353
		mov	eax, [esp+0Ch+arg_8]
		pop	edi
		pop	esi
		pop	ebx
		mov	dword ptr [eax], 0
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_10004353:				; CODE XREF: sub_100042E0+61j
		push	ebp
		mov	ebp, esi
		sub	ebp, ebx
		push	ebp
		call	ldap_x_malloc
		mov	edi, eax
		add	esp, 4
		test	edi, edi
		jnz	short loc_10004375
		mov	eax, [esp+10h+arg_8]
		pop	ebp
		mov	[eax], edi
		or	eax, 0FFFFFFFFh
		pop	edi
		pop	esi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_10004375:				; CODE XREF: sub_100042E0+85j
		push	ebp		; Size
		push	ebx		; Src
		push	edi		; Dst
		call	ds:memmove
		mov	eax, edi
		lea	ecx, [edi+1]
		add	esp, 0Ch
		sub	eax, ebx
		mov	byte ptr [eax+esi-1], 0
		mov	eax, [esp+10h+arg_8]
		mov	[eax], edi

loc_10004393:				; CODE XREF: sub_100042E0+B8j
		mov	al, [edi]
		inc	edi
		test	al, al
		jnz	short loc_10004393
		sub	edi, ecx
		pop	ebp
		mov	eax, edi
		pop	edi
		pop	esi
		pop	ebx
		retn
sub_100042E0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100043B0	proc near		; CODE XREF: sub_10004490+5Ep
					; sub_10004490+97p

arg_0		= dword	ptr  4

		push	ebx
		push	esi
		mov	esi, [esp+8+arg_0]
		xor	ebx, ebx
		mov	esi, [esi]
		cmp	[esi], bl
		jnz	short loc_100043C3

loc_100043BE:				; CODE XREF: sub_100043B0+2Fj
		pop	esi
		xor	eax, eax
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_100043C3:				; CODE XREF: sub_100043B0+Cj
		push	esi
		call	ldap_utf8isspace
		test	eax, eax
		jz	short loc_100043DB
		lea	ecx, [ecx+0]

loc_100043D0:				; CODE XREF: sub_100043B0+29j
		inc	esi
		push	esi
		call	ldap_utf8isspace
		test	eax, eax
		jnz	short loc_100043D0

loc_100043DB:				; CODE XREF: sub_100043B0+1Bj
		mov	al, [esi]
		test	al, al
		jz	short loc_100043BE
		cmp	al, 22h
		jnz	short loc_100043EB
		mov	ebx, 1
		inc	esi

loc_100043EB:				; CODE XREF: sub_100043B0+33j
		cmp	byte ptr [esi],	0
		push	ebp
		push	edi
		mov	ebp, esi
		mov	edi, esi
		jz	short loc_10004426

loc_100043F6:				; CODE XREF: sub_100043B0+6Cj
		push	esi
		call	ldap_utf8isspace
		test	eax, eax
		jz	short loc_10004404
		test	ebx, ebx
		jz	short loc_10004420

loc_10004404:				; CODE XREF: sub_100043B0+4Ej
		mov	al, [esi]
		cmp	al, 22h
		jnz	short loc_10004415
		xor	eax, eax
		test	ebx, ebx
		setz	al
		mov	ebx, eax
		jmp	short loc_10004418
; ---------------------------------------------------------------------------

loc_10004415:				; CODE XREF: sub_100043B0+58j
		mov	[edi], al
		inc	edi

loc_10004418:				; CODE XREF: sub_100043B0+63j
		inc	esi
		cmp	byte ptr [esi],	0
		jnz	short loc_100043F6
		jmp	short loc_10004426
; ---------------------------------------------------------------------------

loc_10004420:				; CODE XREF: sub_100043B0+52j
		cmp	byte ptr [esi],	0
		jz	short loc_10004426
		inc	esi

loc_10004426:				; CODE XREF: sub_100043B0+44j
					; sub_100043B0+6Ej ...
		mov	eax, [esp+10h+arg_0]
		mov	byte ptr [edi],	0
		mov	[eax], esi
		lea	eax, [edi+1]
		cmp	eax, ebp
		jnz	short loc_1000443D
		pop	edi
		pop	ebp
		pop	esi
		xor	eax, eax
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1000443D:				; CODE XREF: sub_100043B0+84j
		push	ebp
		call	sub_1000BAB0
		add	esp, 4
		pop	edi
		pop	ebp
		pop	esi
		pop	ebx
		retn
sub_100043B0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10004450	proc near		; CODE XREF: sub_10003450+7Bp
					; sub_10003450+FEp ...

arg_0		= dword	ptr  4

		push	edi
		mov	edi, [esp+4+arg_0]
		test	edi, edi
		jz	short loc_10004480
		mov	eax, [edi]
		push	esi
		xor	esi, esi
		test	eax, eax
		jz	short loc_10004476

loc_10004462:				; CODE XREF: sub_10004450+24j
		push	eax
		call	ldap_x_free
		mov	eax, [edi+esi*4+4]
		lea	esi, [esi+1]
		add	esp, 4
		test	eax, eax
		jnz	short loc_10004462

loc_10004476:				; CODE XREF: sub_10004450+10j
		push	edi
		call	ldap_x_free
		add	esp, 4
		pop	esi

loc_10004480:				; CODE XREF: sub_10004450+7j
		pop	edi
		retn
sub_10004450	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10004490	proc near		; CODE XREF: ldap_init_templates_buf+1Ep
					; sub_10003C30+22p ...

var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ecx
		mov	eax, [esp+4+arg_8]
		mov	dword ptr [eax], 0
		lea	eax, [esp+4+var_4]
		push	eax
		push	[esp+8+arg_4]
		push	[esp+0Ch+arg_0]
		call	sub_100042E0
		add	esp, 0Ch
		test	eax, eax
		jle	loc_100045A2
		push	esi
		push	4
		push	1
		call	ldap_x_calloc
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		jnz	short loc_100044DC
		push	[esp+8+var_4]
		call	ldap_x_free
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	esi
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_100044DC:				; CODE XREF: sub_10004490+38j
		push	ebx
		push	ebp
		mov	ebp, [esp+10h+var_4]
		lea	eax, [esp+10h+var_4]
		push	edi
		push	eax
		xor	edi, edi
		mov	[esp+18h+var_4], ebp
		call	sub_100043B0
		mov	ebx, eax
		add	esp, 4
		test	ebx, ebx
		jz	short loc_1000455B
		lea	esp, [esp+0]

loc_10004500:				; CODE XREF: sub_10004490+A3j
		lea	ecx, ds:8[edi*4]
		push	ecx
		push	esi
		call	ldap_x_realloc
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		jz	short loc_1000457D
		mov	[esi+edi*4], ebx
		lea	eax, [esp+14h+var_4]
		inc	edi
		push	eax
		mov	dword ptr [esi+edi*4], 0
		call	sub_100043B0
		mov	ebx, eax
		add	esp, 4
		test	ebx, ebx
		jnz	short loc_10004500
		cmp	edi, 1
		jnz	short loc_1000455B
		push	offset aEnd	; "END"
		push	dword ptr [esi]	; Str1
		call	ds:_stricmp
		add	esp, 8
		test	eax, eax
		jnz	short loc_1000455B
		push	esi
		xor	edi, edi
		call	sub_10004450
		add	esp, 4
		xor	esi, esi

loc_1000455B:				; CODE XREF: sub_10004490+6Aj
					; sub_10004490+A8j ...
		push	ebp
		call	ldap_x_free
		add	esp, 4
		test	edi, edi
		jnz	short loc_10004596
		test	esi, esi
		jz	short loc_1000459C
		push	esi
		call	ldap_x_free
		add	esp, 4
		mov	eax, edi
		pop	edi
		pop	ebp
		pop	ebx
		pop	esi
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_1000457D:				; CODE XREF: sub_10004490+85j
		push	0
		call	ldap_x_free
		push	ebp
		call	ldap_x_free
		add	esp, 8
		or	eax, 0FFFFFFFFh
		pop	edi
		pop	ebp
		pop	ebx
		pop	esi
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_10004596:				; CODE XREF: sub_10004490+D6j
		mov	eax, [esp+14h+arg_8]
		mov	[eax], esi

loc_1000459C:				; CODE XREF: sub_10004490+DAj
		mov	eax, edi
		pop	edi
		pop	ebp
		pop	ebx
		pop	esi

loc_100045A2:				; CODE XREF: sub_10004490+21j
		pop	ecx
		retn
sub_10004490	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  22. ldap_err2string

; =============== S U B	R O U T	I N E =======================================


		public ldap_err2string
ldap_err2string	proc near		; DATA XREF: .rdata:off_10020938o

arg_0		= dword	ptr  4

		mov	ecx, dword_10024110
		xor	eax, eax
		cmp	ecx, 0FFFFFFFFh
		jz	short loc_100045D2
		mov	edx, [esp+arg_0]

loc_100045C1:				; CODE XREF: ldap_err2string+20j
		cmp	edx, ecx
		jz	short loc_100045DA
		mov	ecx, dword_10024118[eax*8]
		inc	eax
		cmp	ecx, 0FFFFFFFFh
		jnz	short loc_100045C1

loc_100045D2:				; CODE XREF: ldap_err2string+Bj
		mov	eax, offset aUnknownError ; "Unknown error"
		retn	4
; ---------------------------------------------------------------------------

loc_100045DA:				; CODE XREF: ldap_err2string+13j
		mov	eax, off_10024114[eax*8]
		retn	4
ldap_err2string	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 430. ldap_get_lderrno

; =============== S U B	R O U T	I N E =======================================


		public ldap_get_lderrno
ldap_get_lderrno proc near		; CODE XREF: ldap_add_ext+360p
					; ldap_add_ext_s+42p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	edx, [esp+arg_0]
		test	edx, edx
		jnz	short loc_10004600
		mov	eax, 59h
		retn	0Ch
; ---------------------------------------------------------------------------

loc_10004600:				; CODE XREF: ldap_get_lderrno+6j
		mov	eax, [edx+0D0h]
		test	eax, eax
		jnz	short loc_1000462A
		mov	ecx, [esp+arg_4]
		test	ecx, ecx
		jz	short loc_10004617
		mov	eax, [edx+2Ch]
		mov	[ecx], eax

loc_10004617:				; CODE XREF: ldap_get_lderrno+20j
		mov	eax, [esp+arg_8]
		test	eax, eax
		jz	short loc_10004624
		mov	ecx, [edx+28h]
		mov	[eax], ecx

loc_10004624:				; CODE XREF: ldap_get_lderrno+2Dj
		mov	eax, [edx+24h]
		retn	0Ch
; ---------------------------------------------------------------------------

loc_1000462A:				; CODE XREF: ldap_get_lderrno+18j
		push	dword ptr [edx+0D8h]
		push	[esp+4+arg_8]
		push	[esp+8+arg_4]
		call	eax
		add	esp, 0Ch
		retn	0Ch
ldap_get_lderrno endp

; Exported entry 503. ldap_parse_result

; =============== S U B	R O U T	I N E =======================================


		public ldap_parse_result
ldap_parse_result proc near		; CODE XREF: ldap_result2error+19p
					; sub_10012D30+ABp
					; DATA XREF: ...

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch
arg_1C		= dword	ptr  20h

		sub	esp, 8
		push	ebx
		mov	ebx, [esp+0Ch+arg_0]
		mov	[esp+0Ch+var_4], 0
		mov	[esp+0Ch+var_8], 0
		push	edi
		test	ebx, ebx
		jz	loc_10004771
		mov	edi, [esp+10h+arg_4]
		test	edi, edi
		jz	loc_10004771
		push	esi
		mov	esi, edi

loc_10004670:				; CODE XREF: ldap_parse_result+42j
		mov	eax, [esi+4]
		cmp	eax, 64h
		jz	short loc_1000467D
		cmp	eax, 73h
		jnz	short loc_1000469A

loc_1000467D:				; CODE XREF: ldap_parse_result+36j
		mov	esi, [esi+0Ch]
		test	esi, esi
		jnz	short loc_10004670
		push	esi
		push	esi
		push	5Eh
		push	ebx
		call	ldap_set_lderrno
		lea	eax, [esi+5Eh]
		pop	esi
		pop	edi
		pop	ebx
		add	esp, 8
		retn	20h
; ---------------------------------------------------------------------------

loc_1000469A:				; CODE XREF: ldap_parse_result+3Bj
		push	ebp
		push	[esp+18h+arg_18]
		lea	eax, [esp+1Ch+var_4]
		push	[esp+1Ch+arg_14]
		push	eax
		lea	eax, [esp+24h+var_8]
		push	eax
		lea	eax, [esp+28h+arg_18]
		push	eax
		push	dword ptr [esi+8]
		push	dword ptr [esi+4]
		push	ebx
		call	sub_10004BB0
		mov	ebp, eax
		add	esp, 20h
		test	ebp, ebp
		jnz	loc_10004767
		mov	ecx, [esp+18h+arg_8]
		test	ecx, ecx
		jz	short loc_100046D9
		mov	eax, [esp+18h+arg_18]
		mov	[ecx], eax

loc_100046D9:				; CODE XREF: ldap_parse_result+91j
		mov	edi, [esp+18h+arg_C]
		test	edi, edi
		jz	short loc_100046EF
		push	[esp+18h+var_8]
		call	sub_1000BAB0
		add	esp, 4
		mov	[edi], eax

loc_100046EF:				; CODE XREF: ldap_parse_result+9Fj
		mov	edi, [esp+18h+arg_10]
		mov	edx, [esp+18h+var_4]
		mov	[esp+18h+arg_0], edx
		test	edi, edi
		jz	short loc_1000470E
		push	edx
		call	sub_1000BAB0
		mov	edx, [esp+1Ch+var_4]
		add	esp, 4
		mov	[edi], eax

loc_1000470E:				; CODE XREF: ldap_parse_result+BDj
		mov	eax, [esi+0Ch]
		test	eax, eax
		jz	short loc_10004729

loc_10004715:				; CODE XREF: ldap_parse_result+E7j
		mov	ecx, [eax+4]
		cmp	ecx, 64h
		jz	short loc_10004722
		cmp	ecx, 73h
		jnz	short loc_10004760

loc_10004722:				; CODE XREF: ldap_parse_result+DBj
		mov	eax, [eax+0Ch]
		test	eax, eax
		jnz	short loc_10004715

loc_10004729:				; CODE XREF: ldap_parse_result+D3j
					; ldap_parse_result+125j
		mov	edi, [esp+18h+arg_4]
		mov	esi, [esp+18h+var_8]

loc_10004731:				; CODE XREF: ldap_parse_result+12Fj
		cmp	[esp+18h+arg_1C], 0
		jz	short loc_10004742
		push	edi
		call	ldap_msgfree
		mov	edx, [esp+18h+arg_0]

loc_10004742:				; CODE XREF: ldap_parse_result+F6j
		push	edx
		test	ebp, ebp
		mov	eax, ebp
		push	esi
		cmovz	eax, [esp+20h+arg_18]
		push	eax
		push	ebx
		call	ldap_set_lderrno
		mov	eax, ebp
		pop	ebp
		pop	esi
		pop	edi
		pop	ebx
		add	esp, 8
		retn	20h
; ---------------------------------------------------------------------------

loc_10004760:				; CODE XREF: ldap_parse_result+E0j
		mov	ebp, 5Fh
		jmp	short loc_10004729
; ---------------------------------------------------------------------------

loc_10004767:				; CODE XREF: ldap_parse_result+85j
		xor	edx, edx
		xor	esi, esi
		mov	[esp+18h+arg_0], edx
		jmp	short loc_10004731
; ---------------------------------------------------------------------------

loc_10004771:				; CODE XREF: ldap_parse_result+1Bj
					; ldap_parse_result+27j
		pop	edi
		mov	eax, 59h
		pop	ebx
		add	esp, 8
		retn	20h
ldap_parse_result endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 432. ldap_perror

; =============== S U B	R O U T	I N E =======================================


		public ldap_perror
ldap_perror	proc near		; DATA XREF: .rdata:off_10020938o

var_40C		= dword	ptr -40Ch
var_408		= dword	ptr -408h
Dest		= byte ptr -404h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 40Ch
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+40Ch+var_4], eax
		push	ebx
		mov	ebx, [esp+410h+arg_4]
		mov	[esp+410h+var_408], 0
		mov	[esp+410h+var_40C], 0
		push	ebp
		push	esi
		mov	esi, [esp+418h+arg_0]
		test	ebx, ebx
		jnz	short loc_100047C2
		mov	ebp, offset Src
		mov	ebx, ebp
		jmp	short loc_100047C7
; ---------------------------------------------------------------------------

loc_100047C2:				; CODE XREF: ldap_perror+37j
		mov	ebp, offset asc_1001F970 ; ": "

loc_100047C7:				; CODE XREF: ldap_perror+40j
		test	esi, esi
		jnz	short loc_1000480D
		call	ds:_errno
		push	dword ptr [eax]	; int
		call	ds:strerror
		test	eax, eax
		mov	ecx, offset aUnknownError_0 ; "unknown error"
		cmovnz	ecx, eax
		lea	eax, [esp+41Ch+Dest]
		push	ecx
		push	ebp
		push	ebx
		push	offset aSSS	; "%s%s%s"
		push	400h		; Count
		push	eax		; Dest
		call	ds:_snprintf
		lea	eax, [esp+434h+Dest]
		push	eax		; Str
		call	ber_err_print
		add	esp, 20h
		jmp	loc_10004947
; ---------------------------------------------------------------------------

loc_1000480D:				; CODE XREF: ldap_perror+49j
		mov	eax, [esi+0C0h]
		test	eax, eax
		jz	short loc_10004873
		mov	ecx, [esi+0DCh]
		test	ecx, ecx
		jz	short loc_10004873
		mov	edx, [esi+13Ch]
		test	edx, edx
		jz	short loc_1000486B
		call	edx
		cmp	[esi+160h], eax
		jnz	short loc_1000483D
		inc	dword ptr [esi+198h]
		jmp	short loc_10004873
; ---------------------------------------------------------------------------

loc_1000483D:				; CODE XREF: ldap_perror+B3j
		mov	eax, [esi+0DCh]
		push	dword ptr [eax+20h]
		mov	eax, [esi+0C0h]
		call	eax
		mov	eax, [esi+13Ch]
		add	esp, 4
		call	eax
		mov	[esi+160h], eax
		mov	dword ptr [esi+198h], 1
		jmp	short loc_10004873
; ---------------------------------------------------------------------------

loc_1000486B:				; CODE XREF: ldap_perror+A9j
		push	dword ptr [ecx+20h]
		call	eax
		add	esp, 4

loc_10004873:				; CODE XREF: ldap_perror+95j
					; ldap_perror+9Fj ...
		mov	eax, [esi+0D0h]
		push	edi
		test	eax, eax
		jnz	short loc_10004891
		mov	eax, [esi+2Ch]
		mov	edi, [esi+24h]
		mov	[esp+41Ch+var_408], eax
		mov	eax, [esi+28h]
		mov	[esp+41Ch+var_40C], eax
		jmp	short loc_100048A8
; ---------------------------------------------------------------------------

loc_10004891:				; CODE XREF: ldap_perror+FCj
		push	dword ptr [esi+0D8h]
		lea	ecx, [esp+420h+var_40C]
		push	ecx
		lea	ecx, [esp+424h+var_408]
		push	ecx
		call	eax
		add	esp, 0Ch
		mov	edi, eax

loc_100048A8:				; CODE XREF: ldap_perror+10Fj
		mov	ecx, dword_10024110
		xor	edx, edx
		cmp	ecx, 0FFFFFFFFh
		jz	short loc_100048CA

loc_100048B5:				; CODE XREF: ldap_perror+148j
		cmp	edi, ecx
		jz	loc_10004961
		mov	ecx, dword_10024118[edx*8]
		inc	edx
		cmp	ecx, 0FFFFFFFFh
		jnz	short loc_100048B5

loc_100048CA:				; CODE XREF: ldap_perror+133j
		push	edi
		push	ebp
		push	ebx
		push	offset aSSnotAnLdapErr ; "%s%sNot an LDAP errno	%d\n"
		lea	eax, [esp+42Ch+Dest]
		push	400h		; Count
		push	eax		; Dest
		call	ds:_snprintf

loc_100048E2:				; CODE XREF: ldap_perror+2B8j
		lea	eax, [esp+434h+Dest]
		push	eax		; Str
		call	ber_err_print
		add	esp, 1Ch

loc_100048EF:				; CODE XREF: ldap_perror+295j
					; ldap_perror+29Ej
		cmp	dword ptr [esi+0C0h], 0
		jz	short loc_10004946
		mov	eax, [esi+0DCh]
		test	eax, eax
		jz	short loc_10004946
		mov	ecx, [esi+13Ch]
		test	ecx, ecx
		jz	short loc_10004938
		call	ecx
		cmp	[esi+160h], eax
		jnz	short loc_10004946
		dec	dword ptr [esi+198h]
		jnz	short loc_10004946
		mov	dword ptr [esi+160h], 0FFFFFFFFh
		mov	dword ptr [esi+198h], 0
		mov	eax, [esi+0DCh]

loc_10004938:				; CODE XREF: ldap_perror+18Aj
		push	dword ptr [eax+20h]
		mov	eax, [esi+0C4h]
		call	eax
		add	esp, 4

loc_10004946:				; CODE XREF: ldap_perror+176j
					; ldap_perror+180j ...
		pop	edi

loc_10004947:				; CODE XREF: ldap_perror+88j
		mov	ecx, [esp+418h+var_4]
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 40Ch
		retn	8
; ---------------------------------------------------------------------------

loc_10004961:				; CODE XREF: ldap_perror+137j
		push	off_10024114[edx*8]
		lea	eax, [esp+420h+Dest]
		push	ebp
		push	ebx
		push	offset aSSS	; "%s%s%s"
		push	400h		; Count
		push	eax		; Dest
		call	ds:_snprintf
		lea	eax, [esp+434h+Dest]
		push	eax		; Str
		call	ber_err_print
		add	esp, 1Ch
		cmp	edi, 5Bh
		jnz	short loc_100049CE
		push	offset Str	; " - "
		call	ber_err_print
		mov	eax, [esi+0C8h]
		add	esp, 4
		test	eax, eax
		jz	short loc_100049AC
		call	eax
		jmp	short loc_100049B4
; ---------------------------------------------------------------------------

loc_100049AC:				; CODE XREF: ldap_perror+226j
		call	ds:_errno
		mov	eax, [eax]

loc_100049B4:				; CODE XREF: ldap_perror+22Aj
		push	eax		; int
		call	ds:strerror
		test	eax, eax
		mov	ecx, offset aUnknownError_0 ; "unknown error"
		cmovnz	ecx, eax
		push	ecx		; Str
		call	ber_err_print
		add	esp, 8

loc_100049CE:				; CODE XREF: ldap_perror+20Fj
		push	offset asc_1001F980 ; "\n"
		call	ber_err_print
		mov	eax, [esp+420h+var_408]
		add	esp, 4
		mov	edi, ds:_snprintf
		test	eax, eax
		jz	short loc_10004A0F
		cmp	byte ptr [eax],	0
		jz	short loc_10004A0F
		push	eax
		push	ebp
		push	ebx
		push	offset aSSmatchedS ; "%s%smatched: %s\n"
		lea	eax, [esp+42Ch+Dest]
		push	400h		; Count
		push	eax		; Dest
		call	edi ; _snprintf
		lea	eax, [esp+434h+Dest]
		push	eax		; Str
		call	ber_err_print
		add	esp, 1Ch

loc_10004A0F:				; CODE XREF: ldap_perror+267j
					; ldap_perror+26Cj
		mov	eax, [esp+41Ch+var_40C]
		test	eax, eax
		jz	loc_100048EF
		cmp	byte ptr [eax],	0
		jz	loc_100048EF
		push	eax
		push	ebp
		push	ebx
		push	offset aSSadditionalIn ; "%s%sadditional info: %s\n"
		lea	eax, [esp+42Ch+Dest]
		push	400h		; Count
		push	eax		; Dest
		call	edi ; _snprintf
		jmp	loc_100048E2
ldap_perror	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  21. ldap_result2error

; =============== S U B	R O U T	I N E =======================================


		public ldap_result2error
ldap_result2error proc near		; CODE XREF: ldap_add_ext_s+53p
					; ldap_add_s+4Fp ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	[esp+arg_8]
		lea	eax, [esp+4+arg_8]
		push	0
		push	0
		push	0
		push	0
		push	eax
		push	[esp+18h+arg_4]
		push	[esp+1Ch+arg_0]
		call	ldap_parse_result
		mov	ecx, [esp+arg_8]
		test	eax, eax
		cmovnz	ecx, eax
		mov	eax, ecx
		retn	0Ch
ldap_result2error endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 431. ldap_set_lderrno

; =============== S U B	R O U T	I N E =======================================


		public ldap_set_lderrno
ldap_set_lderrno proc near		; CODE XREF: sub_10001000+5Dp
					; sub_10001000+317p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	esi
		mov	esi, [esp+4+arg_0]
		test	esi, esi
		jnz	short loc_10004A82
		mov	eax, 59h
		pop	esi
		retn	10h
; ---------------------------------------------------------------------------

loc_10004A82:				; CODE XREF: ldap_set_lderrno+7j
		mov	eax, [esi+0D4h]
		test	eax, eax
		jz	short loc_10004AA9
		push	dword ptr [esi+0D8h]
		push	[esp+8+arg_C]
		push	[esp+0Ch+arg_8]
		push	[esp+10h+arg_4]
		call	eax
		add	esp, 10h
		xor	eax, eax
		pop	esi
		retn	10h
; ---------------------------------------------------------------------------

loc_10004AA9:				; CODE XREF: ldap_set_lderrno+1Aj
		mov	eax, [esi+0C0h]
		test	eax, eax
		jz	short loc_10004B0F
		mov	ecx, [esi+0DCh]
		test	ecx, ecx
		jz	short loc_10004B0F
		mov	edx, [esi+13Ch]
		test	edx, edx
		jz	short loc_10004B07
		call	edx
		cmp	[esi+160h], eax
		jnz	short loc_10004AD9
		inc	dword ptr [esi+198h]
		jmp	short loc_10004B0F
; ---------------------------------------------------------------------------

loc_10004AD9:				; CODE XREF: ldap_set_lderrno+5Fj
		mov	eax, [esi+0DCh]
		push	dword ptr [eax+20h]
		mov	eax, [esi+0C0h]
		call	eax
		mov	eax, [esi+13Ch]
		add	esp, 4
		call	eax
		mov	[esi+160h], eax
		mov	dword ptr [esi+198h], 1
		jmp	short loc_10004B0F
; ---------------------------------------------------------------------------

loc_10004B07:				; CODE XREF: ldap_set_lderrno+55j
		push	dword ptr [ecx+20h]
		call	eax
		add	esp, 4

loc_10004B0F:				; CODE XREF: ldap_set_lderrno+41j
					; ldap_set_lderrno+4Bj	...
		mov	eax, [esp+4+arg_4]
		mov	[esi+24h], eax
		mov	eax, [esi+2Ch]
		test	eax, eax
		jz	short loc_10004B26
		push	eax
		call	ldap_x_free
		add	esp, 4

loc_10004B26:				; CODE XREF: ldap_set_lderrno+ABj
		mov	eax, [esp+4+arg_8]
		mov	[esi+2Ch], eax
		mov	eax, [esi+28h]
		test	eax, eax
		jz	short loc_10004B3D
		push	eax
		call	ldap_x_free
		add	esp, 4

loc_10004B3D:				; CODE XREF: ldap_set_lderrno+C2j
		cmp	dword ptr [esi+0C0h], 0
		mov	eax, [esp+4+arg_C]
		mov	[esi+28h], eax
		jz	short loc_10004B9B
		mov	eax, [esi+0DCh]
		test	eax, eax
		jz	short loc_10004B9B
		mov	ecx, [esi+13Ch]
		test	ecx, ecx
		jz	short loc_10004B8D
		call	ecx
		cmp	[esi+160h], eax
		jnz	short loc_10004B9B
		dec	dword ptr [esi+198h]
		jnz	short loc_10004B9B
		mov	dword ptr [esi+160h], 0FFFFFFFFh
		mov	dword ptr [esi+198h], 0
		mov	eax, [esi+0DCh]

loc_10004B8D:				; CODE XREF: ldap_set_lderrno+EFj
		push	dword ptr [eax+20h]
		mov	eax, [esi+0C4h]
		call	eax
		add	esp, 4

loc_10004B9B:				; CODE XREF: ldap_set_lderrno+DBj
					; ldap_set_lderrno+E5j	...
		xor	eax, eax
		pop	esi
		retn	10h
ldap_set_lderrno endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10004BB0	proc near		; CODE XREF: ldap_parse_result+79p
					; sub_10010900+93p ...

var_150		= dword	ptr -150h
var_14C		= byte ptr -14Ch
var_148		= dword	ptr -148h
var_144		= dword	ptr -144h
var_140		= dword	ptr -140h
var_13C		= dword	ptr -13Ch
var_138		= dword	ptr -138h
var_134		= dword	ptr -134h
Dst		= dword	ptr -130h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch
arg_1C		= dword	ptr  20h

		sub	esp, 150h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+150h+var_4], eax
		mov	eax, [esp+150h+arg_C]
		mov	ecx, [esp+150h+arg_10]
		mov	edx, [esp+150h+arg_1C]
		push	ebx
		mov	ebx, [esp+154h+arg_18]
		push	ebp
		xor	ebp, ebp
		mov	[esp+158h+var_134], eax
		mov	eax, [esp+158h+arg_14]
		mov	[esp+158h+var_13C], ecx
		mov	[esp+158h+var_138], eax
		mov	[esp+158h+var_140], edx
		mov	[esp+158h+var_150], ebp
		mov	[esp+158h+var_148], ebp
		push	esi
		mov	esi, [esp+15Ch+arg_8]
		push	edi
		test	ecx, ecx
		jz	short loc_10004C12
		mov	[ecx], ebp

loc_10004C12:				; CODE XREF: sub_10004BB0+5Ej
		test	eax, eax
		jz	short loc_10004C18
		mov	[eax], ebp

loc_10004C18:				; CODE XREF: sub_10004BB0+64j
		test	ebx, ebx
		jz	short loc_10004C1E
		mov	[ebx], ebp

loc_10004C1E:				; CODE XREF: sub_10004BB0+6Aj
		test	edx, edx
		jz	short loc_10004C24
		mov	[edx], ebp

loc_10004C24:				; CODE XREF: sub_10004BB0+70j
		mov	eax, [esp+160h+arg_0]
		lea	edi, [esp+160h+Dst]
		mov	ecx, 4Bh
		rep movsd
		mov	ecx, [eax+64h]
		test	ecx, ecx
		jnz	short loc_10004C42
		mov	eax, [eax+8]
		jmp	short loc_10004C45
; ---------------------------------------------------------------------------

loc_10004C42:				; CODE XREF: sub_10004BB0+8Bj
		mov	eax, [ecx+8]

loc_10004C45:				; CODE XREF: sub_10004BB0+90j
		cmp	eax, 2
		lea	eax, [esp+160h+var_150]
		push	eax
		jge	short loc_10004C6D
		lea	eax, [esp+164h+var_144]
		push	eax
		lea	eax, [esp+168h+Dst]
		push	offset aIa	; "{ia}"
		push	eax		; Dst
		call	ber_scanf
		add	esp, 10h
		mov	esi, eax
		jmp	loc_10004D9C
; ---------------------------------------------------------------------------

loc_10004C6D:				; CODE XREF: sub_10004BB0+9Dj
		lea	eax, [esp+164h+var_148]
		push	eax
		lea	eax, [esp+168h+var_144]
		push	eax
		lea	eax, [esp+16Ch+Dst]
		push	offset aIaa	; "{iaa"
		push	eax		; Dst
		call	ber_scanf
		mov	esi, eax
		add	esp, 14h
		cmp	esi, 0FFFFFFFFh
		jz	loc_10004DA5
		lea	eax, [esp+160h+var_14C]
		push	eax
		lea	eax, [esp+164h+Dst]
		push	eax
		call	ber_peek_tag
		cmp	eax, 0A3h
		jnz	short loc_10004CD7
		lea	eax, [esp+160h+Dst]
		test	ebx, ebx
		jnz	short loc_10004CC4
		push	offset asc_1001F9E0 ; "x"
		push	eax		; Dst
		call	ber_scanf
		add	esp, 8
		mov	esi, eax
		jmp	short loc_10004CDD
; ---------------------------------------------------------------------------

loc_10004CC4:				; CODE XREF: sub_10004BB0+100j
		push	ebx
		push	offset aV	; "v"
		push	eax		; Dst
		call	ber_scanf
		add	esp, 0Ch
		mov	esi, eax
		jmp	short loc_10004CDD
; ---------------------------------------------------------------------------

loc_10004CD7:				; CODE XREF: sub_10004BB0+F8j
		test	ebx, ebx
		jz	short loc_10004CDD
		mov	[ebx], ebp

loc_10004CDD:				; CODE XREF: sub_10004BB0+112j
					; sub_10004BB0+125j ...
		cmp	esi, 0FFFFFFFFh
		jz	loc_10004DA5
		mov	eax, [esp+160h+arg_4]
		cmp	eax, 61h
		jnz	short loc_10004D08
		lea	eax, [esp+160h+var_14C]
		push	eax
		lea	eax, [esp+164h+Dst]
		push	eax
		call	ber_peek_tag
		cmp	eax, 87h
		jmp	short loc_10004D50
; ---------------------------------------------------------------------------

loc_10004D08:				; CODE XREF: sub_10004BB0+140j
		cmp	eax, 78h
		jnz	short loc_10004D66
		lea	eax, [esp+160h+var_14C]
		push	eax
		lea	eax, [esp+164h+Dst]
		push	eax
		call	ber_peek_tag
		cmp	eax, 8Ah
		jnz	short loc_10004D37
		lea	eax, [esp+160h+Dst]
		push	offset asc_1001F9E0 ; "x"
		push	eax		; Dst
		call	ber_scanf
		add	esp, 8
		mov	esi, eax

loc_10004D37:				; CODE XREF: sub_10004BB0+171j
		cmp	esi, 0FFFFFFFFh
		jz	short loc_10004DA5
		lea	eax, [esp+160h+var_14C]
		push	eax
		lea	eax, [esp+164h+Dst]
		push	eax
		call	ber_peek_tag
		cmp	eax, 8Bh

loc_10004D50:				; CODE XREF: sub_10004BB0+156j
		jnz	short loc_10004D66
		lea	eax, [esp+160h+Dst]
		push	offset asc_1001F9E0 ; "x"
		push	eax		; Dst
		call	ber_scanf
		mov	esi, eax
		add	esp, 8

loc_10004D66:				; CODE XREF: sub_10004BB0+15Bj
					; sub_10004BB0:loc_10004D50j
		cmp	esi, 0FFFFFFFFh
		jz	short loc_10004DA5
		mov	edi, [esp+160h+var_140]
		test	edi, edi
		jz	short loc_10004D9C
		lea	eax, [esp+160h+Dst]
		push	offset asc_1001F9E8 ; "}"
		push	eax		; Dst
		call	ber_scanf
		mov	esi, eax
		add	esp, 8
		cmp	esi, 0FFFFFFFFh
		jz	short loc_10004DA5
		lea	eax, [esp+160h+Dst]
		push	edi
		push	eax
		call	sub_10002C10
		add	esp, 8
		mov	ebp, eax

loc_10004D9C:				; CODE XREF: sub_10004BB0+B8j
					; sub_10004BB0+1C1j
		cmp	esi, 0FFFFFFFFh
		jnz	short loc_10004DAA
		test	ebp, ebp
		jnz	short loc_10004DAA

loc_10004DA5:				; CODE XREF: sub_10004BB0+DEj
					; sub_10004BB0+130j ...
		mov	ebp, 54h

loc_10004DAA:				; CODE XREF: sub_10004BB0+1EFj
					; sub_10004BB0+1F3j
		mov	ecx, [esp+160h+var_134]
		test	ecx, ecx
		jz	short loc_10004DB8
		mov	eax, [esp+160h+var_144]
		mov	[ecx], eax

loc_10004DB8:				; CODE XREF: sub_10004BB0+200j
		mov	ecx, [esp+160h+var_13C]
		mov	eax, [esp+160h+var_148]
		test	ecx, ecx
		jz	short loc_10004DC8
		mov	[ecx], eax
		jmp	short loc_10004DD5
; ---------------------------------------------------------------------------

loc_10004DC8:				; CODE XREF: sub_10004BB0+212j
		test	eax, eax
		jz	short loc_10004DD5
		push	eax
		call	ldap_x_free
		add	esp, 4

loc_10004DD5:				; CODE XREF: sub_10004BB0+216j
					; sub_10004BB0+21Aj
		mov	ecx, [esp+160h+var_138]
		mov	eax, [esp+160h+var_150]
		test	ecx, ecx
		jz	short loc_10004DE5
		mov	[ecx], eax
		jmp	short loc_10004DF2
; ---------------------------------------------------------------------------

loc_10004DE5:				; CODE XREF: sub_10004BB0+22Fj
		test	eax, eax
		jz	short loc_10004DF2
		push	eax
		call	ldap_x_free
		add	esp, 4

loc_10004DF2:				; CODE XREF: sub_10004BB0+233j
					; sub_10004BB0+237j
		mov	ecx, [esp+160h+var_4]
		mov	eax, ebp
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 150h
		retn
sub_10004BB0	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 519. ldap_extended_operation

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	ldap_extended_operation(void *Memory, int, int,	int, int, int)
		public ldap_extended_operation
ldap_extended_operation	proc near	; CODE XREF: ldap_extended_operation_s+1Cp
					; ldap_passwd+1DCp ...

Memory		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_14		= dword	ptr  18h

		push	esi
		mov	esi, [esp+4+Memory]
		test	esi, esi
		jnz	short loc_10004E22
		mov	eax, 59h
		pop	esi
		retn	18h
; ---------------------------------------------------------------------------

loc_10004E22:				; CODE XREF: ldap_extended_operation+7j
		mov	eax, [esi+64h]
		test	eax, eax
		jnz	short loc_10004E2E
		mov	eax, [esi+8]
		jmp	short loc_10004E31
; ---------------------------------------------------------------------------

loc_10004E2E:				; CODE XREF: ldap_extended_operation+17j
		mov	eax, [eax+8]

loc_10004E31:				; CODE XREF: ldap_extended_operation+1Cj
		cmp	eax, 3
		jge	short loc_10004E4B
		push	0
		push	0
		push	5Ch
		push	esi
		call	ldap_set_lderrno
		mov	eax, 5Ch
		pop	esi
		retn	18h
; ---------------------------------------------------------------------------

loc_10004E4B:				; CODE XREF: ldap_extended_operation+24j
		push	ebp
		mov	ebp, [esp+8+arg_14]
		push	edi
		test	ebp, ebp
		jz	loc_10005014
		mov	edi, [esp+0Ch+arg_4]
		test	edi, edi
		jz	loc_10005014
		cmp	byte ptr [edi],	0
		jz	loc_10005014
		mov	eax, [esi+0C0h]
		test	eax, eax
		jz	short loc_10004ED4
		mov	ecx, [esi+0DCh]
		test	ecx, ecx
		jz	short loc_10004ED4
		mov	edx, [esi+13Ch]
		test	edx, edx
		jz	short loc_10004ECC
		call	edx
		cmp	[esi+148h], eax
		jnz	short loc_10004E9E
		inc	dword ptr [esi+180h]
		jmp	short loc_10004ED4
; ---------------------------------------------------------------------------

loc_10004E9E:				; CODE XREF: ldap_extended_operation+84j
		mov	eax, [esi+0DCh]
		push	dword ptr [eax+8]
		mov	eax, [esi+0C0h]
		call	eax
		mov	eax, [esi+13Ch]
		add	esp, 4
		call	eax
		mov	[esi+148h], eax
		mov	dword ptr [esi+180h], 1
		jmp	short loc_10004ED4
; ---------------------------------------------------------------------------

loc_10004ECC:				; CODE XREF: ldap_extended_operation+7Aj
		push	dword ptr [ecx+8]
		call	eax
		add	esp, 4

loc_10004ED4:				; CODE XREF: ldap_extended_operation+66j
					; ldap_extended_operation+70j ...
		inc	dword ptr [esi+30h]
		cmp	dword ptr [esi+0C0h], 0
		push	ebx
		mov	ebx, [esi+30h]
		jz	short loc_10004F32
		mov	eax, [esi+0DCh]
		test	eax, eax
		jz	short loc_10004F32
		mov	ecx, [esi+13Ch]
		test	ecx, ecx
		jz	short loc_10004F24
		call	ecx
		cmp	[esi+148h], eax
		jnz	short loc_10004F32
		dec	dword ptr [esi+180h]
		jnz	short loc_10004F32
		mov	dword ptr [esi+148h], 0FFFFFFFFh
		mov	dword ptr [esi+180h], 0
		mov	eax, [esi+0DCh]

loc_10004F24:				; CODE XREF: ldap_extended_operation+E6j
		push	dword ptr [eax+8]
		mov	eax, [esi+0C4h]
		call	eax
		add	esp, 4

loc_10004F32:				; CODE XREF: ldap_extended_operation+D2j
					; ldap_extended_operation+DCj ...
		lea	eax, [esp+10h+Memory]
		push	eax
		push	esi
		call	sub_1000EF40
		add	esp, 8
		test	eax, eax
		jnz	short loc_10004FAD
		mov	eax, [esp+10h+arg_8]
		test	eax, eax
		jz	short loc_10004F72
		push	dword ptr [eax]
		push	dword ptr [eax+4]
		push	81h
		push	edi
		push	80h
		push	77h
		push	ebx
		push	offset aItTsto	; "{it{tsto}"
		push	[esp+30h+Memory]
		call	ber_printf
		add	esp, 24h
		jmp	short loc_10004F8C
; ---------------------------------------------------------------------------

loc_10004F72:				; CODE XREF: ldap_extended_operation+13Aj
		push	edi
		push	80h
		push	77h
		push	ebx
		push	offset aItTs	; "{it{ts}"
		push	[esp+24h+Memory]
		call	ber_printf
		add	esp, 18h

loc_10004F8C:				; CODE XREF: ldap_extended_operation+160j
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_10004FB4
		push	0
		push	0
		push	53h
		push	esi
		call	ldap_set_lderrno
		push	1		; int
		push	[esp+14h+Memory] ; Memory
		call	ber_free
		mov	eax, 53h

loc_10004FAD:				; CODE XREF: ldap_extended_operation+132j
		pop	ebx
		pop	edi
		pop	ebp
		pop	esi
		retn	18h
; ---------------------------------------------------------------------------

loc_10004FB4:				; CODE XREF: ldap_extended_operation+17Fj
		push	[esp+10h+Memory]
		push	1
		push	[esp+18h+arg_C]
		push	esi
		call	sub_10002DD0
		mov	edi, eax
		add	esp, 10h
		test	edi, edi
		jz	short loc_10004FE1
		push	1		; int
		push	[esp+14h+Memory] ; Memory
		call	ber_free
		pop	ebx
		mov	eax, edi
		pop	edi
		pop	ebp
		pop	esi
		retn	18h
; ---------------------------------------------------------------------------

loc_10004FE1:				; CODE XREF: ldap_extended_operation+1BBj
		push	[esp+10h+Memory]
		push	0
		push	77h
		push	ebx
		push	esi
		call	sub_1000FC30
		add	esp, 14h
		mov	[ebp+0], eax
		test	eax, eax
		jns	short loc_1000500B
		push	0
		push	0
		push	esi
		call	ldap_get_lderrno
		pop	ebx
		pop	edi
		pop	ebp
		pop	esi
		retn	18h
; ---------------------------------------------------------------------------

loc_1000500B:				; CODE XREF: ldap_extended_operation+1E8j
		pop	ebx
		pop	edi
		pop	ebp
		xor	eax, eax
		pop	esi
		retn	18h
; ---------------------------------------------------------------------------

loc_10005014:				; CODE XREF: ldap_extended_operation+43j
					; ldap_extended_operation+4Fj ...
		push	0
		push	0
		push	59h
		push	esi
		call	ldap_set_lderrno
		pop	edi
		pop	ebp
		mov	eax, 59h
		pop	esi
		retn	18h
ldap_extended_operation	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 520. ldap_extended_operation_s

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	ldap_extended_operation_s(void *Memory,	int, int, int, int, int, int)
		public ldap_extended_operation_s
ldap_extended_operation_s proc near	; DATA XREF: .rdata:off_10020938o

var_4		= dword	ptr -4
Memory		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch

		push	ecx
		push	esi
		mov	esi, [esp+8+Memory]
		lea	eax, [esp+8+var_4]
		push	eax		; int
		push	[esp+0Ch+arg_10] ; int
		push	[esp+10h+arg_C]	; int
		push	[esp+14h+arg_8]	; int
		push	[esp+18h+arg_4]	; int
		push	esi		; Memory
		call	ldap_extended_operation
		test	eax, eax
		jnz	short loc_100050B5
		lea	eax, [esp+8+arg_10]
		push	eax
		push	0
		push	1
		push	[esp+14h+var_4]
		push	esi
		call	ldap_result
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_1000507C
		push	0
		push	0
		push	esi
		call	ldap_get_lderrno
		pop	esi
		pop	ecx
		retn	1Ch
; ---------------------------------------------------------------------------

loc_1000507C:				; CODE XREF: ldap_extended_operation_s+3Bj
		push	edi
		push	0
		push	[esp+10h+arg_18]
		push	[esp+14h+arg_14]
		push	[esp+18h+arg_10]
		push	esi
		call	ldap_parse_extended_result
		mov	edi, eax
		test	edi, edi
		jz	short loc_100050A8
		push	[esp+0Ch+arg_10]
		call	ldap_msgfree
		mov	eax, edi
		pop	edi
		pop	esi
		pop	ecx
		retn	1Ch
; ---------------------------------------------------------------------------

loc_100050A8:				; CODE XREF: ldap_extended_operation_s+65j
		push	1
		push	[esp+10h+arg_10]
		push	esi
		call	ldap_result2error
		pop	edi

loc_100050B5:				; CODE XREF: ldap_extended_operation_s+23j
		pop	esi
		pop	ecx
		retn	1Ch
ldap_extended_operation_s endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 504. ldap_parse_extended_result

; =============== S U B	R O U T	I N E =======================================


		public ldap_parse_extended_result
ldap_parse_extended_result proc	near	; CODE XREF: ldap_extended_operation_s+5Cp
					; ldap_parse_passwd+62p ...

var_150		= dword	ptr -150h
var_14C		= dword	ptr -14Ch
var_148		= dword	ptr -148h
var_144		= dword	ptr -144h
var_140		= dword	ptr -140h
var_13C		= dword	ptr -13Ch
var_138		= dword	ptr -138h
var_134		= byte ptr -134h
Dst		= dword	ptr -130h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		sub	esp, 150h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+150h+var_4], eax
		mov	eax, [esp+150h+arg_8]
		push	ebx
		mov	ebx, [esp+154h+arg_0]
		mov	[esp+154h+var_140], eax
		mov	eax, [esp+154h+arg_C]
		mov	[esp+154h+var_13C], eax
		push	ebp
		mov	ebp, [esp+158h+arg_4]
		test	ebx, ebx
		jz	loc_10005272
		test	ebp, ebp
		jz	loc_10005272
		cmp	dword ptr [ebp+4], 78h
		jnz	loc_10005272
		mov	eax, [ebx+64h]
		mov	ecx, 4Bh
		mov	[esp+158h+var_148], 0
		mov	[esp+158h+var_144], 0
		push	esi
		mov	esi, [ebp+8]
		push	edi
		lea	edi, [esp+160h+Dst]
		rep movsd
		pop	edi
		pop	esi
		test	eax, eax
		jnz	short loc_10005142
		mov	eax, [ebx+8]
		jmp	short loc_10005145
; ---------------------------------------------------------------------------

loc_10005142:				; CODE XREF: ldap_parse_extended_result+7Bj
		mov	eax, [eax+8]

loc_10005145:				; CODE XREF: ldap_parse_extended_result+80j
		cmp	eax, 3
		jge	short loc_10005160
		push	0
		push	0
		push	5Ch
		push	ebx
		call	ldap_set_lderrno
		mov	eax, 5Ch
		jmp	loc_10005277
; ---------------------------------------------------------------------------

loc_10005160:				; CODE XREF: ldap_parse_extended_result+88j
		lea	eax, [esp+158h+var_148]
		push	eax
		lea	eax, [esp+15Ch+var_144]
		push	eax
		lea	eax, [esp+160h+var_138]
		push	eax
		lea	eax, [esp+164h+Dst]
		push	offset aIaa	; "{iaa"
		push	eax		; Dst
		call	ber_scanf
		add	esp, 14h
		cmp	eax, 0FFFFFFFFh
		jz	loc_1000525F
		lea	eax, [esp+158h+var_134]
		mov	[esp+158h+var_14C], 0
		push	eax
		lea	eax, [esp+15Ch+Dst]
		push	eax
		call	ber_peek_tag
		cmp	eax, 8Ah
		jnz	short loc_100051C8
		lea	eax, [esp+158h+var_14C]
		push	eax
		lea	eax, [esp+15Ch+Dst]
		push	offset aA_0	; "a"
		push	eax		; Dst
		call	ber_scanf
		add	esp, 0Ch
		cmp	eax, 0FFFFFFFFh
		jz	loc_1000525F

loc_100051C8:				; CODE XREF: ldap_parse_extended_result+E6j
		mov	ecx, [esp+158h+var_140]
		mov	eax, [esp+158h+var_14C]
		test	ecx, ecx
		jz	short loc_100051D8
		mov	[ecx], eax
		jmp	short loc_100051E5
; ---------------------------------------------------------------------------

loc_100051D8:				; CODE XREF: ldap_parse_extended_result+112j
		test	eax, eax
		jz	short loc_100051E5
		push	eax
		call	ldap_x_free
		add	esp, 4

loc_100051E5:				; CODE XREF: ldap_parse_extended_result+116j
					; ldap_parse_extended_result+11Aj
		lea	eax, [esp+158h+var_134]
		mov	[esp+158h+var_150], 0
		push	eax
		lea	eax, [esp+15Ch+Dst]
		push	eax
		call	ber_peek_tag
		cmp	eax, 8Bh
		jnz	short loc_1000521F
		lea	eax, [esp+158h+var_150]
		push	eax
		lea	eax, [esp+15Ch+Dst]
		push	offset aO_0	; "O"
		push	eax		; Dst
		call	ber_scanf
		add	esp, 0Ch
		cmp	eax, 0FFFFFFFFh
		jz	short loc_1000525F

loc_1000521F:				; CODE XREF: ldap_parse_extended_result+141j
		mov	ecx, [esp+158h+var_13C]
		mov	eax, [esp+158h+var_150]
		test	ecx, ecx
		jz	short loc_1000522F
		mov	[ecx], eax
		jmp	short loc_10005239
; ---------------------------------------------------------------------------

loc_1000522F:				; CODE XREF: ldap_parse_extended_result+169j
		test	eax, eax
		jz	short loc_10005239
		push	eax
		call	ber_bvfree

loc_10005239:				; CODE XREF: ldap_parse_extended_result+16Dj
					; ldap_parse_extended_result+171j
		push	[esp+158h+var_148]
		push	[esp+15Ch+var_144]
		push	[esp+160h+var_138]
		push	ebx
		call	ldap_set_lderrno
		cmp	[esp+158h+arg_10], 0
		jz	short loc_1000525B
		push	ebp
		call	ldap_msgfree

loc_1000525B:				; CODE XREF: ldap_parse_extended_result+193j
		xor	eax, eax
		jmp	short loc_10005277
; ---------------------------------------------------------------------------

loc_1000525F:				; CODE XREF: ldap_parse_extended_result+C4j
					; ldap_parse_extended_result+102j ...
		push	0
		push	0
		push	54h
		push	ebx
		call	ldap_set_lderrno
		mov	eax, 54h
		jmp	short loc_10005277
; ---------------------------------------------------------------------------

loc_10005272:				; CODE XREF: ldap_parse_extended_result+3Cj
					; ldap_parse_extended_result+44j ...
		mov	eax, 59h

loc_10005277:				; CODE XREF: ldap_parse_extended_result+9Bj
					; ldap_parse_extended_result+19Dj ...
		mov	ecx, [esp+158h+var_4]
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 150h
		retn	14h
ldap_parse_extended_result endp

; Exported entry 201. ldap_ber_free

; =============== S U B	R O U T	I N E =======================================


		public ldap_ber_free
ldap_ber_free	proc near		; DATA XREF: .rdata:off_10020938o
		jmp	ber_free
ldap_ber_free	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  56. ldap_getfilter_free

; =============== S U B	R O U T	I N E =======================================


		public ldap_getfilter_free
ldap_getfilter_free proc near		; CODE XREF: ldap_init_getfilter_buf+277p
					; ldap_init_getfilter_buf+2C9p	...

arg_0		= dword	ptr  4

		push	ebp
		mov	ebp, [esp+4+arg_0]
		test	ebp, ebp
		jz	loc_10005375
		push	ebx
		mov	ebx, [ebp+0]
		test	ebx, ebx
		jz	short loc_1000530C
		push	esi
		push	edi

loc_100052B7:				; CODE XREF: ldap_getfilter_free+68j
		mov	esi, [ebx+0Ch]
		test	esi, esi
		jz	short loc_100052E1
		mov	edi, edi

loc_100052C0:				; CODE XREF: ldap_getfilter_free+3Fj
		push	dword ptr [esi]
		mov	edi, [esi+10h]
		call	ldap_x_free
		push	dword ptr [esi+4]
		call	ldap_x_free
		push	esi
		call	ldap_x_free
		add	esp, 0Ch
		mov	esi, edi
		test	edi, edi
		jnz	short loc_100052C0

loc_100052E1:				; CODE XREF: ldap_getfilter_free+1Cj
		push	dword ptr [ebx+4]
		mov	esi, [ebx+10h]
		call	ldap_x_free
		push	dword ptr [ebx+8]
		call	ldap_x_free
		push	dword ptr [ebx]
		call	ldap_x_free
		push	ebx
		call	ldap_x_free
		add	esp, 10h
		mov	ebx, esi
		test	esi, esi
		jnz	short loc_100052B7
		pop	edi
		pop	esi

loc_1000530C:				; CODE XREF: ldap_getfilter_free+13j
		mov	eax, [ebp+41Ch]
		pop	ebx
		test	eax, eax
		jz	short loc_10005320
		push	eax
		call	ldap_x_free
		add	esp, 4

loc_10005320:				; CODE XREF: ldap_getfilter_free+75j
		mov	eax, [ebp+420h]
		test	eax, eax
		jz	short loc_10005333
		push	eax
		call	ldap_x_free
		add	esp, 4

loc_10005333:				; CODE XREF: ldap_getfilter_free+88j
		mov	eax, [ebp+424h]
		test	eax, eax
		jz	short loc_10005346
		push	eax
		call	ldap_x_free
		add	esp, 4

loc_10005346:				; CODE XREF: ldap_getfilter_free+9Bj
		mov	eax, [ebp+428h]
		test	eax, eax
		jz	short loc_10005359
		push	eax
		call	ldap_x_free
		add	esp, 4

loc_10005359:				; CODE XREF: ldap_getfilter_free+AEj
		mov	eax, [ebp+42Ch]
		test	eax, eax
		jz	short loc_1000536C
		push	eax
		call	ldap_x_free
		add	esp, 4

loc_1000536C:				; CODE XREF: ldap_getfilter_free+C1j
		push	ebp
		call	ldap_x_free
		add	esp, 4

loc_10005375:				; CODE XREF: ldap_getfilter_free+7j
		pop	ebp
		retn	4
ldap_getfilter_free endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 200. ldap_memfree

; =============== S U B	R O U T	I N E =======================================


		public ldap_memfree
ldap_memfree	proc near		; CODE XREF: sub_10009610+530p
					; sub_1000B120+49p ...

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		test	eax, eax
		jz	short locret_1000538F
		push	eax
		call	ldap_x_free
		pop	ecx

locret_1000538F:			; CODE XREF: ldap_memfree+6j
		retn	4
ldap_memfree	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  88. ldap_mods_free

; =============== S U B	R O U T	I N E =======================================


		public ldap_mods_free
ldap_mods_free	proc near		; CODE XREF: sub_10001E00+102p
					; DATA XREF: .rdata:off_10020938o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebx
		mov	ebx, [esp+4+arg_0]
		test	ebx, ebx
		jz	short loc_1000540B
		push	edi
		xor	edi, edi
		cmp	[ebx], edi
		jz	short loc_100053FA
		push	esi
		mov	esi, ebx

loc_100053B3:				; CODE XREF: ldap_mods_free+57j
		mov	eax, [esi]
		test	byte ptr [eax],	80h
		mov	eax, [eax+8]
		jz	short loc_100053C9
		test	eax, eax
		jz	short loc_100053D3
		push	eax
		call	ber_bvecfree
		jmp	short loc_100053D3
; ---------------------------------------------------------------------------

loc_100053C9:				; CODE XREF: ldap_mods_free+1Bj
		test	eax, eax
		jz	short loc_100053D3
		push	eax
		call	ldap_value_free

loc_100053D3:				; CODE XREF: ldap_mods_free+1Fj
					; ldap_mods_free+27j ...
		mov	eax, [esi]
		mov	eax, [eax+4]
		test	eax, eax
		jz	short loc_100053E5
		push	eax
		call	ldap_x_free
		add	esp, 4

loc_100053E5:				; CODE XREF: ldap_mods_free+3Aj
		push	dword ptr [esi]
		call	ldap_x_free
		inc	edi
		add	esp, 4
		cmp	dword ptr [ebx+edi*4], 0
		lea	esi, [ebx+edi*4]
		jnz	short loc_100053B3
		pop	esi

loc_100053FA:				; CODE XREF: ldap_mods_free+Ej
		cmp	[esp+8+arg_4], 0
		pop	edi
		jz	short loc_1000540B
		push	ebx
		call	ldap_x_free
		add	esp, 4

loc_1000540B:				; CODE XREF: ldap_mods_free+7j
					; ldap_mods_free+60j
		pop	ebx
		retn	8
ldap_mods_free	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  38. ldap_value_free

; =============== S U B	R O U T	I N E =======================================


		public ldap_value_free
ldap_value_free	proc near		; CODE XREF: ldap_mods_free+2Ep
					; sub_100073A0+AFp ...

arg_0		= dword	ptr  4

		push	edi
		mov	edi, [esp+4+arg_0]
		test	edi, edi
		jz	short loc_10005440
		mov	eax, [edi]
		push	esi
		xor	esi, esi
		test	eax, eax
		jz	short loc_10005436

loc_10005422:				; CODE XREF: ldap_value_free+24j
		push	eax
		call	ldap_x_free
		mov	eax, [edi+esi*4+4]
		lea	esi, [esi+1]
		add	esp, 4
		test	eax, eax
		jnz	short loc_10005422

loc_10005436:				; CODE XREF: ldap_value_free+10j
		push	edi
		call	ldap_x_free
		add	esp, 4
		pop	esi

loc_10005440:				; CODE XREF: ldap_value_free+7j
		pop	edi
		retn	4
ldap_value_free	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  79. ldap_value_free_len

; =============== S U B	R O U T	I N E =======================================


		public ldap_value_free_len
ldap_value_free_len proc near		; DATA XREF: .rdata:off_10020938o

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		test	esi, esi
		jz	short loc_1000548F
		mov	eax, [esi]
		push	edi
		xor	edi, edi
		test	eax, eax
		jz	short loc_10005485
		push	ebx
		mov	ebx, esi

loc_10005465:				; CODE XREF: ldap_value_free_len+32j
		push	dword ptr [eax+4]
		call	ldap_x_free
		push	dword ptr [ebx]
		call	ldap_x_free
		lea	edi, [edi+1]
		add	esp, 8
		mov	eax, [esi+edi*4]
		lea	ebx, [esi+edi*4]
		test	eax, eax
		jnz	short loc_10005465
		pop	ebx

loc_10005485:				; CODE XREF: ldap_value_free_len+10j
		push	esi
		call	ldap_x_free
		add	esp, 4
		pop	edi

loc_1000548F:				; CODE XREF: ldap_value_free_len+7j
		pop	esi
		retn	4
ldap_value_free_len endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  63. ldap_free_friendlymap

; =============== S U B	R O U T	I N E =======================================


		public ldap_free_friendlymap
ldap_free_friendlymap proc near		; DATA XREF: .rdata:off_10020938o

arg_0		= dword	ptr  4

		push	edi
		mov	edi, [esp+4+arg_0]
		test	edi, edi
		jz	short loc_100054E2
		push	esi
		mov	esi, [edi]
		test	esi, esi
		jz	short loc_100054E1
		mov	eax, [esi]
		test	eax, eax
		jz	short loc_100054D1

loc_100054B6:				; CODE XREF: ldap_free_friendlymap+2Fj
		push	eax
		call	ldap_x_free
		push	dword ptr [esi+4]
		call	ldap_x_free
		mov	eax, [esi+8]
		lea	esi, [esi+8]
		add	esp, 8
		test	eax, eax
		jnz	short loc_100054B6

loc_100054D1:				; CODE XREF: ldap_free_friendlymap+14j
		push	dword ptr [edi]
		call	ldap_x_free
		add	esp, 4
		mov	dword ptr [edi], 0

loc_100054E1:				; CODE XREF: ldap_free_friendlymap+Ej
		pop	esi

loc_100054E2:				; CODE XREF: ldap_free_friendlymap+7j
		pop	edi
		retn	4
ldap_free_friendlymap endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  62. ldap_friendly_name

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	ldap_friendly_name(char	*Filename, char	*Str1, int)
		public ldap_friendly_name
ldap_friendly_name proc	near		; DATA XREF: .rdata:off_10020938o

var_210		= dword	ptr -210h
var_20C		= dword	ptr -20Ch
var_208		= dword	ptr -208h
Buf		= byte ptr -204h
var_4		= dword	ptr -4
Filename	= dword	ptr  4
Str1		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 210h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+210h+var_4], eax
		mov	ecx, [esp+210h+Filename]
		push	ebx
		mov	ebx, [esp+214h+arg_8]
		push	ebp
		mov	ebp, [esp+218h+Str1]
		mov	[esp+218h+var_20C], ebp
		test	ebx, ebx
		jnz	short loc_1000552A
		mov	eax, ebp
		jmp	loc_10005704
; ---------------------------------------------------------------------------

loc_1000552A:				; CODE XREF: ldap_friendly_name+31j
		test	ebp, ebp
		jnz	short loc_10005535
		xor	eax, eax
		jmp	loc_10005704
; ---------------------------------------------------------------------------

loc_10005535:				; CODE XREF: ldap_friendly_name+3Cj
		cmp	dword ptr [ebx], 0
		push	esi
		push	edi
		jnz	loc_100056D1
		push	offset Mode	; "r"
		push	ecx		; Filename
		call	ds:fopen
		mov	edi, eax
		add	esp, 8
		mov	[esp+220h+var_208], edi
		test	edi, edi
		jz	loc_10005700
		mov	esi, ds:fgets
		lea	eax, [esp+220h+Buf]
		push	edi		; File
		push	200h		; MaxCount
		push	eax		; Buf
		xor	ebp, ebp
		call	esi ; fgets
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_1000559C
		lea	esp, [esp+0]

loc_10005580:				; CODE XREF: ldap_friendly_name+AAj
		cmp	[esp+220h+Buf],	23h
		jz	short loc_10005588
		inc	ebp

loc_10005588:				; CODE XREF: ldap_friendly_name+95j
		push	edi		; File
		lea	eax, [esp+224h+Buf]
		push	200h		; MaxCount
		push	eax		; Buf
		call	esi ; fgets
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_10005580

loc_1000559C:				; CODE XREF: ldap_friendly_name+87j
		push	edi		; File
		call	ds:rewind
		lea	eax, ds:8[ebp*8]
		push	eax
		call	ldap_x_malloc
		add	esp, 8
		mov	[ebx], eax
		push	edi		; File
		test	eax, eax
		jnz	short loc_100055CC
		call	ds:fclose
		mov	eax, [esp+224h+var_20C]
		add	esp, 4
		jmp	loc_10005702
; ---------------------------------------------------------------------------

loc_100055CC:				; CODE XREF: ldap_friendly_name+C8j
		lea	eax, [esp+224h+Buf]
		xor	esi, esi
		push	200h		; MaxCount
		push	eax		; Buf
		mov	[esp+22Ch+var_210], esi
		call	ds:fgets
		add	esp, 0Ch
		test	eax, eax
		jz	loc_100056BA
		lea	ecx, [ecx+0]

loc_100055F0:				; CODE XREF: ldap_friendly_name+1C4j
		cmp	esi, ebp
		jge	loc_100056BA
		cmp	[esp+220h+Buf],	23h
		jz	loc_1000569E
		lea	eax, [esp+220h+Buf]
		push	0Ah		; Val
		push	eax		; Str
		call	ds:strchr
		add	esp, 8
		test	eax, eax
		jz	short loc_1000561A
		mov	byte ptr [eax],	0

loc_1000561A:				; CODE XREF: ldap_friendly_name+125j
		lea	eax, [esp+220h+Buf]
		push	9		; Val
		push	eax		; Str
		call	ds:strchr
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		jz	short loc_1000569A
		mov	byte ptr [esi],	0
		inc	esi
		cmp	byte ptr [esi],	22h
		jnz	short loc_1000566D
		mov	cl, [esi+1]
		inc	esi
		xor	edx, edx
		xor	eax, eax
		test	cl, cl
		jz	short loc_1000566D
		lea	edi, [edx+1]

loc_10005648:				; CODE XREF: ldap_friendly_name+177j
		test	eax, eax
		jnz	short loc_10005669
		cmp	cl, 22h
		jz	short loc_1000565A
		cmp	cl, 5Ch
		jnz	short loc_1000565F
		mov	edx, edi
		jmp	short loc_10005661
; ---------------------------------------------------------------------------

loc_1000565A:				; CODE XREF: ldap_friendly_name+15Fj
		test	edx, edx
		cmovz	eax, edi

loc_1000565F:				; CODE XREF: ldap_friendly_name+164j
		xor	edx, edx

loc_10005661:				; CODE XREF: ldap_friendly_name+168j
		mov	cl, [esi+1]
		inc	esi
		test	cl, cl
		jnz	short loc_10005648

loc_10005669:				; CODE XREF: ldap_friendly_name+15Aj
		mov	edi, [esp+220h+var_208]

loc_1000566D:				; CODE XREF: ldap_friendly_name+147j
					; ldap_friendly_name+153j
		lea	eax, [esp+220h+Buf]
		push	eax
		call	sub_1000BAB0
		mov	ecx, [ebx]
		mov	edx, [esp+224h+var_210]
		push	esi
		mov	[ecx+edx*8], eax
		call	sub_1000BAB0
		mov	esi, [esp+228h+var_210]
		add	esp, 8
		mov	ecx, [ebx]
		mov	[ecx+esi*8+4], eax
		inc	esi
		mov	[esp+220h+var_210], esi
		jmp	short loc_1000569E
; ---------------------------------------------------------------------------

loc_1000569A:				; CODE XREF: ldap_friendly_name+13Ej
		mov	esi, [esp+220h+var_210]

loc_1000569E:				; CODE XREF: ldap_friendly_name+10Dj
					; ldap_friendly_name+1A8j
		push	edi		; File
		lea	eax, [esp+224h+Buf]
		push	200h		; MaxCount
		push	eax		; Buf
		call	ds:fgets
		add	esp, 0Ch
		test	eax, eax
		jnz	loc_100055F0

loc_100056BA:				; CODE XREF: ldap_friendly_name+F7j
					; ldap_friendly_name+102j
		push	edi		; File
		call	ds:fclose
		mov	eax, [ebx]
		add	esp, 4
		mov	ebp, [esp+220h+var_20C]
		mov	dword ptr [eax+esi*8], 0

loc_100056D1:				; CODE XREF: ldap_friendly_name+4Aj
		mov	eax, [ebx]
		xor	esi, esi
		cmp	[eax], esi
		jz	short loc_10005700
		mov	edi, ds:_stricmp
		xor	ecx, ecx

loc_100056E1:				; CODE XREF: ldap_friendly_name+20Ej
		mov	eax, [ebx]
		push	dword ptr [eax+ecx] ; Str2
		push	ebp		; Str1
		call	edi ; _stricmp
		add	esp, 8
		test	eax, eax
		mov	eax, [ebx]
		jz	short loc_1000571D
		inc	esi
		lea	ecx, ds:0[esi*8]
		cmp	dword ptr [ecx+eax], 0
		jnz	short loc_100056E1

loc_10005700:				; CODE XREF: ldap_friendly_name+67j
					; ldap_friendly_name+1E7j
		mov	eax, ebp

loc_10005702:				; CODE XREF: ldap_friendly_name+D7j
					; ldap_friendly_name+231j
		pop	edi
		pop	esi

loc_10005704:				; CODE XREF: ldap_friendly_name+35j
					; ldap_friendly_name+40j
		mov	ecx, [esp+218h+var_4]
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 210h
		retn	0Ch
; ---------------------------------------------------------------------------

loc_1000571D:				; CODE XREF: ldap_friendly_name+200j
		mov	eax, [eax+esi*8+4]
		jmp	short loc_10005702
ldap_friendly_name endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10005730	proc near		; CODE XREF: ldap_first_attribute+A0p
					; ldap_next_attribute+4Dp

var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		push	ecx
		lea	eax, [esp+4+var_4]
		push	eax
		push	1
		push	[esp+0Ch+arg_0]
		call	ber_get_option
		mov	ecx, [esp+4+var_4]
		xor	edx, edx
		test	eax, eax
		cmovnz	ecx, edx
		mov	eax, ecx
		pop	ecx
		retn
sub_10005730	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  32. ldap_first_attribute

; =============== S U B	R O U T	I N E =======================================


		public ldap_first_attribute
ldap_first_attribute proc near		; CODE XREF: sub_10001E00+61p
					; sub_10015D40+3C8p
					; DATA XREF: ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebp
		mov	ebp, [esp+4+arg_0]
		test	ebp, ebp
		jnz	short loc_1000575F
		xor	eax, eax
		pop	ebp
		retn	0Ch
; ---------------------------------------------------------------------------

loc_1000575F:				; CODE XREF: ldap_first_attribute+7j
		push	ebx
		mov	ebx, [esp+8+arg_8]
		push	esi
		test	ebx, ebx
		jz	loc_1000582E
		mov	esi, [esp+0Ch+arg_4]
		test	esi, esi
		jz	loc_1000582E
		cmp	dword ptr [esi+4], 64h
		jnz	loc_1000582E
		push	ebx
		push	ebp
		call	sub_1000EF40
		add	esp, 8
		test	eax, eax
		jnz	loc_1000583A
		mov	esi, [esi+8]
		mov	ecx, 4Bh
		push	edi
		mov	edi, [ebx]
		rep movsd
		mov	[esp+10h+arg_0], eax
		lea	esi, [eax+54h]
		lea	eax, [esp+10h+arg_8]
		push	eax
		push	offset aXl	; "{xl{"
		push	dword ptr [ebx]	; Dst
		call	ber_scanf
		add	esp, 0Ch
		pop	edi
		cmp	eax, 0FFFFFFFFh
		jz	short loc_100057FE
		lea	eax, [esp+0Ch+arg_8]
		push	eax
		push	1
		push	dword ptr [ebx]
		call	ber_set_option
		test	eax, eax
		jnz	short loc_100057FE
		lea	eax, [esp+0Ch+arg_0]
		push	eax
		push	offset aAx	; "{ax}"
		push	dword ptr [ebx]	; Dst
		call	ber_scanf
		add	esp, 0Ch
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_100057FC
		push	dword ptr [ebx]
		call	sub_10005730
		add	esp, 4
		test	eax, eax
		jnz	short loc_100057FE

loc_100057FC:				; CODE XREF: ldap_first_attribute+9Cj
		xor	esi, esi

loc_100057FE:				; CODE XREF: ldap_first_attribute+71j
					; ldap_first_attribute+83j ...
		push	0
		push	0
		push	esi
		push	ebp
		call	ldap_set_lderrno
		mov	eax, [esp+0Ch+arg_0]
		test	eax, eax
		jz	short loc_10005815
		test	esi, esi
		jz	short loc_1000583C

loc_10005815:				; CODE XREF: ldap_first_attribute+BFj
		push	0		; int
		push	dword ptr [ebx]	; Memory
		call	ber_free
		mov	eax, [esp+0Ch+arg_0]
		pop	esi
		mov	dword ptr [ebx], 0
		pop	ebx
		pop	ebp
		retn	0Ch
; ---------------------------------------------------------------------------

loc_1000582E:				; CODE XREF: ldap_first_attribute+17j
					; ldap_first_attribute+23j ...
		push	0
		push	0
		push	59h
		push	ebp
		call	ldap_set_lderrno

loc_1000583A:				; CODE XREF: ldap_first_attribute+3Fj
		xor	eax, eax

loc_1000583C:				; CODE XREF: ldap_first_attribute+C3j
		pop	esi
		pop	ebx
		pop	ebp
		retn	0Ch
ldap_first_attribute endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  33. ldap_next_attribute

; =============== S U B	R O U T	I N E =======================================


		public ldap_next_attribute
ldap_next_attribute proc near		; CODE XREF: sub_10001E00+CFp
					; sub_10015D40+4A5p
					; DATA XREF: ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
Dst		= dword	ptr  0Ch

		push	esi
		mov	esi, [esp+4+arg_0]
		test	esi, esi
		jnz	short loc_1000585F
		xor	eax, eax
		pop	esi
		retn	0Ch
; ---------------------------------------------------------------------------

loc_1000585F:				; CODE XREF: ldap_next_attribute+7j
		push	edi
		mov	edi, [esp+8+Dst]
		test	edi, edi
		jz	short loc_100058C0
		mov	eax, [esp+8+arg_4]
		test	eax, eax
		jz	short loc_100058C0
		cmp	dword ptr [eax+4], 64h
		jnz	short loc_100058C0
		push	ebx
		lea	eax, [esp+0Ch+arg_0]
		mov	[esp+0Ch+arg_0], 0
		push	eax
		push	offset aAx	; "{ax}"
		push	edi		; Dst
		mov	ebx, 54h
		call	ber_scanf
		add	esp, 0Ch
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_100058A9
		push	edi
		call	sub_10005730
		add	esp, 4
		test	eax, eax
		jnz	short loc_100058AB

loc_100058A9:				; CODE XREF: ldap_next_attribute+4Aj
		xor	ebx, ebx

loc_100058AB:				; CODE XREF: ldap_next_attribute+57j
		push	0
		push	0
		push	ebx
		push	esi
		call	ldap_set_lderrno
		mov	eax, [esp+0Ch+arg_0]
		pop	ebx
		pop	edi
		pop	esi
		retn	0Ch
; ---------------------------------------------------------------------------

loc_100058C0:				; CODE XREF: ldap_next_attribute+16j
					; ldap_next_attribute+1Ej ...
		push	0
		push	0
		push	59h
		push	esi
		call	ldap_set_lderrno
		pop	edi
		xor	eax, eax
		pop	esi
		retn	0Ch
ldap_next_attribute endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  31. ldap_dn2ufn

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	ldap_dn2ufn(char *Str)
		public ldap_dn2ufn
ldap_dn2ufn	proc near		; DATA XREF: .rdata:off_10020938o

var_4		= dword	ptr -4
Str		= dword	ptr  4

		push	ecx
		push	esi
		mov	esi, [esp+8+Str]
		push	edi
		mov	edi, ds:strchr
		test	esi, esi
		jnz	short loc_100058F8
		mov	esi, offset Src
		jmp	short loc_10005919
; ---------------------------------------------------------------------------

loc_100058F8:				; CODE XREF: ldap_dn2ufn+Fj
		cmp	byte ptr [esi],	0
		jz	short loc_10005919
		push	3Dh		; Val
		push	esi		; Str
		call	edi ; strchr
		add	esp, 8
		test	eax, eax
		jnz	short loc_10005919
		push	2Ch		; Val
		push	esi		; Str
		call	edi ; strchr
		add	esp, 8
		test	eax, eax
		jz	loc_10005AFB

loc_10005919:				; CODE XREF: ldap_dn2ufn+16j
					; ldap_dn2ufn+1Bj ...
		push	3Dh		; Val
		push	esi		; Str
		call	edi ; strchr
		add	esp, 8
		test	eax, eax
		jz	loc_10005AFB
		inc	eax
		push	ebp
		push	eax
		call	sub_1000BAB0
		mov	ebp, eax
		add	esp, 4
		mov	edx, 2
		mov	edi, ebp
		mov	[esp+10h+var_4], edx
		mov	esi, ebp
		cmp	byte ptr [ebp+0], 0
		jz	loc_10005AEF
		push	ebx
		mov	edi, edi

loc_10005950:				; CODE XREF: ldap_dn2ufn+208j
		mov	cl, [edi]
		mov	ebx, 1
		movsx	eax, cl
		add	eax, 0FFFFFFDEh	; switch 59 cases
		cmp	eax, 3Ah
		ja	loc_10005ACC	; jumptable 1000596D default case
		movzx	eax, ds:byte_10005B20[eax]
		jmp	ds:off_10005B0C[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_10005974:				; CODE XREF: ldap_dn2ufn+8Dj
					; DATA XREF: .text:off_10005B0Co
		inc	edi		; jumptable 1000596D case 92
		cmp	byte ptr [edi],	0
		jnz	short loc_10005981
		xor	ebx, ebx
		jmp	loc_10005ADF
; ---------------------------------------------------------------------------

loc_10005981:				; CODE XREF: ldap_dn2ufn+98j
		mov	byte ptr [esi],	5Ch
		inc	esi
		mov	al, [edi]
		test	al, al
		jns	short loc_10005999
		push	edi
		push	esi
		call	ldap_utf8copy
		mov	ebx, eax
		jmp	loc_10005ADD
; ---------------------------------------------------------------------------

loc_10005999:				; CODE XREF: ldap_dn2ufn+A9j
		mov	[esi], al
		jmp	loc_10005ADD
; ---------------------------------------------------------------------------

loc_100059A0:				; CODE XREF: ldap_dn2ufn+8Dj
					; DATA XREF: .text:off_10005B0Co
		dec	edx		; jumptable 1000596D case 34
		neg	edx
		sbb	edx, edx
		add	edx, 2
		mov	[esp+14h+var_4], edx

loc_100059AC:				; CODE XREF: ldap_dn2ufn+D7j
		mov	[esi], cl
		inc	esi
		jmp	loc_10005ADF
; ---------------------------------------------------------------------------

loc_100059B4:				; CODE XREF: ldap_dn2ufn+8Dj
					; DATA XREF: .text:off_10005B0Co
		cmp	edx, 2		; jumptable 1000596D cases 44,59
		jnz	short loc_100059AC
		mov	byte ptr [esi],	2Ch
		inc	esi
		jmp	loc_10005ADF
; ---------------------------------------------------------------------------

loc_100059C2:				; CODE XREF: ldap_dn2ufn+8Dj
					; DATA XREF: .text:off_10005B0Co
		cmp	edx, 1		; jumptable 1000596D case 61
		jnz	short loc_100059CF
		mov	[esi], cl
		inc	esi
		jmp	loc_10005ADF
; ---------------------------------------------------------------------------

loc_100059CF:				; CODE XREF: ldap_dn2ufn+E5j
		push	esi
		mov	[esp+18h+Str], esi
		call	ldap_utf8prev
		mov	esi, eax
		mov	eax, [esp+14h+Str]
		push	esi
		mov	byte ptr [eax],	0
		call	ldap_utf8isspace
		test	eax, eax
		jnz	short loc_10005A10
		lea	esp, [esp+0]

loc_100059F0:				; CODE XREF: ldap_dn2ufn+12Ej
		mov	al, [esi]
		cmp	al, 3Bh
		jz	short loc_10005A10
		cmp	al, 2Ch
		jz	short loc_10005A10
		cmp	esi, ebp
		jbe	short loc_10005A10
		push	esi
		call	ldap_utf8prev
		mov	esi, eax
		push	esi
		call	ldap_utf8isspace
		test	eax, eax
		jz	short loc_100059F0

loc_10005A10:				; CODE XREF: ldap_dn2ufn+10Aj
					; ldap_dn2ufn+114j ...
		test	byte ptr [esi],	80h
		jz	short loc_10005A1F
		push	esi
		call	ldap_utf8next
		mov	esi, eax
		jmp	short loc_10005A20
; ---------------------------------------------------------------------------

loc_10005A1F:				; CODE XREF: ldap_dn2ufn+133j
		inc	esi

loc_10005A20:				; CODE XREF: ldap_dn2ufn+13Dj
		push	offset aC	; "c"
		push	esi		; Str1
		call	ds:_stricmp
		add	esp, 8
		test	eax, eax
		jz	loc_10005ADF
		push	offset aO	; "o"
		push	esi		; Str1
		call	ds:_stricmp
		add	esp, 8
		test	eax, eax
		jz	loc_10005ADF
		push	offset aOu	; "ou"
		push	esi		; Str1
		call	ds:_stricmp
		add	esp, 8
		test	eax, eax
		jz	short loc_10005ADF
		push	offset aSt	; "st"
		push	esi		; Str1
		call	ds:_stricmp
		add	esp, 8
		test	eax, eax
		jz	short loc_10005ADF
		push	offset asc_1001FA24 ; "l"
		push	esi		; Str1
		call	ds:_stricmp
		add	esp, 8
		test	eax, eax
		jz	short loc_10005ADF
		push	offset aDc	; "dc"
		push	esi		; Str1
		call	ds:_stricmp
		add	esp, 8
		test	eax, eax
		jz	short loc_10005ADF
		push	offset aUid	; "uid"
		push	esi		; Str1
		call	ds:_stricmp
		add	esp, 8
		test	eax, eax
		jz	short loc_10005ADF
		push	offset aCn	; "cn"
		push	esi		; Str1
		call	ds:_stricmp
		add	esp, 8
		test	eax, eax
		jz	short loc_10005ADF
		mov	eax, [esp+14h+Str]
		mov	byte ptr [eax],	3Dh
		lea	esi, [eax+1]
		jmp	short loc_10005ADF
; ---------------------------------------------------------------------------

loc_10005ACC:				; CODE XREF: ldap_dn2ufn+80j
					; ldap_dn2ufn+8Dj
					; DATA XREF: ...
		test	cl, cl		; jumptable 1000596D default case
		jns	short loc_10005ADB
		push	edi
		push	esi
		call	ldap_utf8copy
		mov	ebx, eax
		jmp	short loc_10005ADD
; ---------------------------------------------------------------------------

loc_10005ADB:				; CODE XREF: ldap_dn2ufn+1EEj
		mov	[esi], cl

loc_10005ADD:				; CODE XREF: ldap_dn2ufn+B4j
					; ldap_dn2ufn+BBj ...
		add	esi, ebx

loc_10005ADF:				; CODE XREF: ldap_dn2ufn+9Cj
					; ldap_dn2ufn+CFj ...
		mov	edx, [esp+14h+var_4]
		add	edi, ebx
		cmp	byte ptr [edi],	0
		jnz	loc_10005950
		pop	ebx

loc_10005AEF:				; CODE XREF: ldap_dn2ufn+67j
		mov	eax, ebp
		mov	byte ptr [esi],	0
		pop	ebp
		pop	edi
		pop	esi
		pop	ecx
		retn	4
; ---------------------------------------------------------------------------

loc_10005AFB:				; CODE XREF: ldap_dn2ufn+33j
					; ldap_dn2ufn+43j
		push	esi
		call	sub_1000BAB0
		add	esp, 4
		pop	edi
		pop	esi
		pop	ecx
		retn	4
ldap_dn2ufn	endp

; ---------------------------------------------------------------------------
		align 4
off_10005B0C	dd offset loc_100059A0,	offset loc_100059B4, offset loc_100059C2
					; DATA XREF: ldap_dn2ufn+8Dr
		dd offset loc_10005974,	offset loc_10005ACC ; jump table for switch statement
byte_10005B20	db	0,     4,     4,     4 ; DATA XREF: ldap_dn2ufn+86r
		db	4,     4,     4,     4 ; indirect table	for switch statement
		db	4,     4,     1,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     1,     4,     2
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     3
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10005B60(void	*Src, int, int)
sub_10005B60	proc near		; CODE XREF: ldap_explode_dn+Ap
					; ldap_explode_rdn+Ap

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
Src		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 18h
		mov	eax, [esp+18h+Src]
		push	ebx
		push	ebp
		push	esi
		xor	esi, esi
		xor	ebp, ebp
		push	edi
		test	eax, eax
		mov	[esp+28h+var_14], esi
		mov	edi, offset Src
		mov	[esp+28h+var_18], esi
		cmovnz	edi, eax
		mov	[esp+28h+var_8], esi
		push	edi
		mov	[esp+2Ch+var_10], esi
		call	ldap_utf8isspace
		test	eax, eax
		jz	short loc_10005B9E

loc_10005B93:				; CODE XREF: sub_10005B60+3Cj
		inc	edi
		push	edi
		call	ldap_utf8isspace
		test	eax, eax
		jnz	short loc_10005B93

loc_10005B9E:				; CODE XREF: sub_10005B60+31j
		mov	edx, 2
		mov	ebx, edi
		mov	[esp+28h+Src], edx
		lea	esp, [esp+0]

loc_10005BB0:				; CODE XREF: sub_10005B60+256j
		mov	cl, [ebx+ebp]
		add	ebx, ebp
		movsx	eax, cl
		mov	ebp, 1
		mov	[esp+28h+var_4], ebx
		cmp	eax, 5Ch	; switch 93 cases
		ja	loc_10005DD4	; jumptable 10005BD1 default case
		movzx	eax, ds:byte_10005E04[eax]
		jmp	ds:off_10005DEC[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_10005BD8:				; CODE XREF: sub_10005B60+71j
					; DATA XREF: .text:off_10005DECo
		mov	al, [ebx+1]	; jumptable 10005BD1 case 92
		inc	ebx
		test	al, al
		jnz	short loc_10005BE6
		dec	ebx
		jmp	loc_10005DB3
; ---------------------------------------------------------------------------

loc_10005BE6:				; CODE XREF: sub_10005B60+7Ej
		jns	loc_10005DB3
		push	ebx
		call	ldap_utf8len
		mov	ebp, eax
		jmp	loc_10005DAF
; ---------------------------------------------------------------------------

loc_10005BF9:				; CODE XREF: sub_10005B60+71j
					; DATA XREF: .text:off_10005DECo
		dec	edx		; jumptable 10005BD1 case 34
		neg	edx
		sbb	edx, edx
		add	edx, 2
		mov	[esp+28h+Src], edx
		jmp	loc_10005DB3
; ---------------------------------------------------------------------------

loc_10005C0A:				; CODE XREF: sub_10005B60+71j
					; DATA XREF: .text:off_10005DECo
		mov	eax, [esp+28h+arg_8] ; jumptable 10005BD1 case 43
		cmp	eax, 2
		jnz	loc_10005DB3
		jmp	short loc_10005C1D
; ---------------------------------------------------------------------------

loc_10005C19:				; CODE XREF: sub_10005B60+71j
					; DATA XREF: .text:off_10005DECo
		mov	eax, [esp+28h+arg_8] ; jumptable 10005BD1 cases	0,44,59

loc_10005C1D:				; CODE XREF: sub_10005B60+B7j
		cmp	edx, 2
		jnz	loc_10005DB3
		cmp	eax, edx
		jnz	short loc_10005C4C
		cmp	cl, 3Bh
		jz	short loc_10005C3C
		cmp	cl, 2Ch
		jz	short loc_10005C3C
		mov	eax, [esp+28h+var_10]
		test	eax, eax
		jnz	short loc_10005C50

loc_10005C3C:				; CODE XREF: sub_10005B60+CDj
					; sub_10005B60+D2j ...
		push	esi
		call	ldap_charray_free

loc_10005C42:				; CODE XREF: sub_10005B60+13Dj
		pop	edi
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		add	esp, 18h
		retn
; ---------------------------------------------------------------------------

loc_10005C4C:				; CODE XREF: sub_10005B60+C8j
		mov	eax, [esp+28h+var_10]

loc_10005C50:				; CODE XREF: sub_10005B60+DAj
		cmp	cl, 2Ch
		jz	short loc_10005C5A
		cmp	cl, 3Bh
		jnz	short loc_10005C5E

loc_10005C5A:				; CODE XREF: sub_10005B60+F3j
		test	eax, eax
		jz	short loc_10005C3C

loc_10005C5E:				; CODE XREF: sub_10005B60+F8j
		mov	eax, [esp+28h+var_18]
		inc	eax
		mov	[esp+28h+var_10], 0
		mov	[esp+28h+var_18], eax
		test	esi, esi
		jnz	short loc_10005C7F
		push	20h
		call	ldap_x_malloc
		add	esp, 4
		jmp	short loc_10005C95
; ---------------------------------------------------------------------------

loc_10005C7F:				; CODE XREF: sub_10005B60+111j
		cmp	eax, 8
		jl	short loc_10005CA3
		lea	eax, ds:4[eax*4]
		push	eax
		push	esi
		call	ldap_x_realloc
		add	esp, 8

loc_10005C95:				; CODE XREF: sub_10005B60+11Dj
		mov	esi, eax
		mov	[esp+28h+var_14], esi
		test	esi, esi
		jz	short loc_10005C42
		mov	eax, [esp+28h+var_18]

loc_10005CA3:				; CODE XREF: sub_10005B60+122j
		cmp	[esp+28h+arg_4], 0
		mov	dword ptr [esi+eax*4], 0
		mov	[esp+28h+var_C], 0
		jz	short loc_10005CFC
		mov	eax, edi
		cmp	edi, ebx
		jnb	short loc_10005CD3
		nop

loc_10005CC0:				; CODE XREF: sub_10005B60+168j
		cmp	byte ptr [eax],	3Dh
		jz	short loc_10005CCC
		inc	eax
		cmp	eax, ebx
		jb	short loc_10005CC0
		jmp	short loc_10005CD3
; ---------------------------------------------------------------------------

loc_10005CCC:				; CODE XREF: sub_10005B60+163j
		cmp	eax, ebx
		jnb	short loc_10005CD3
		lea	edi, [eax+1]

loc_10005CD3:				; CODE XREF: sub_10005B60+15Dj
					; sub_10005B60+16Aj ...
		cmp	byte ptr [edi],	22h
		jnz	short loc_10005CE1
		mov	ecx, ebp
		inc	edi
		mov	[esp+28h+var_8], ecx
		jmp	short loc_10005CE5
; ---------------------------------------------------------------------------

loc_10005CE1:				; CODE XREF: sub_10005B60+176j
		mov	ecx, [esp+28h+var_8]

loc_10005CE5:				; CODE XREF: sub_10005B60+17Fj
		cmp	byte ptr [ebx-1], 22h
		lea	eax, [ebx-1]
		jnz	short loc_10005CFC
		test	ecx, ecx
		jz	short loc_10005CFC
		mov	[esp+28h+var_C], ebp
		mov	ebx, eax
		mov	[esp+28h+var_4], eax

loc_10005CFC:				; CODE XREF: sub_10005B60+157j
					; sub_10005B60+18Cj ...
		mov	esi, ebx
		sub	esi, edi
		lea	eax, [esi+1]
		push	eax
		push	1
		call	ldap_x_calloc
		mov	ecx, [esp+30h+var_14]
		add	esp, 8
		mov	edx, [esp+28h+var_18]
		mov	[ecx+edx*4-4], eax
		test	eax, eax
		jz	short loc_10005D80
		push	esi		; Size
		push	edi		; Src
		push	eax		; Dst
		call	ds:memmove
		mov	edi, [esp+34h+var_C]
		add	esp, 0Ch
		test	edi, edi
		jnz	short loc_10005D6E
		test	esi, esi
		jle	short loc_10005D6E
		mov	edi, [esp+28h+var_14]
		mov	ebx, [esp+28h+var_18]
		mov	edi, edi

loc_10005D40:				; CODE XREF: sub_10005B60+204j
		mov	eax, [edi+ebx*4-4]
		dec	eax
		add	eax, esi
		push	eax
		call	ldap_utf8isspace
		test	eax, eax
		jz	short loc_10005D66
		cmp	esi, 1
		jz	short loc_10005D61
		mov	eax, [edi+ebx*4-4]
		cmp	byte ptr [eax+esi-2], 5Ch
		jz	short loc_10005D66

loc_10005D61:				; CODE XREF: sub_10005B60+1F4j
		dec	esi
		test	esi, esi
		jg	short loc_10005D40

loc_10005D66:				; CODE XREF: sub_10005B60+1EFj
					; sub_10005B60+1FFj
		mov	ebx, [esp+28h+var_4]
		mov	edi, [esp+28h+var_C]

loc_10005D6E:				; CODE XREF: sub_10005B60+1D0j
					; sub_10005B60+1D4j
		mov	eax, [esp+28h+var_14]
		mov	ecx, [esp+28h+var_18]
		mov	eax, [eax+ecx*4-4]
		mov	byte ptr [esi+eax], 0
		jmp	short loc_10005D84
; ---------------------------------------------------------------------------

loc_10005D80:				; CODE XREF: sub_10005B60+1BCj
		mov	edi, [esp+28h+var_C]

loc_10005D84:				; CODE XREF: sub_10005B60+21Ej
		cmp	edi, 1
		jnz	short loc_10005D8A
		inc	ebx

loc_10005D8A:				; CODE XREF: sub_10005B60+227j
		cmp	byte ptr [ebx],	0
		lea	edi, [ebx+1]
		jnz	short loc_10005D94
		mov	edi, ebx

loc_10005D94:				; CODE XREF: sub_10005B60+230j
		push	edi
		call	ldap_utf8isspace
		test	eax, eax
		jz	short loc_10005DAB
		mov	edi, edi

loc_10005DA0:				; CODE XREF: sub_10005B60+249j
		inc	edi
		push	edi
		call	ldap_utf8isspace
		test	eax, eax
		jnz	short loc_10005DA0

loc_10005DAB:				; CODE XREF: sub_10005B60+23Cj
		mov	esi, [esp+28h+var_14]

loc_10005DAF:				; CODE XREF: sub_10005B60+94j
					; sub_10005B60+280j
		mov	edx, [esp+28h+Src]

loc_10005DB3:				; CODE XREF: sub_10005B60+81j
					; sub_10005B60:loc_10005BE6j ...
		cmp	byte ptr [ebx],	0
		jnz	loc_10005BB0
		pop	edi
		mov	eax, esi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 18h
		retn
; ---------------------------------------------------------------------------

loc_10005DC6:				; CODE XREF: sub_10005B60+71j
					; DATA XREF: .text:off_10005DECo
		mov	eax, [esp+28h+var_10] ;	jumptable 10005BD1 case	61
		cmp	edx, 2
		cmovz	eax, ebp
		mov	[esp+28h+var_10], eax

loc_10005DD4:				; CODE XREF: sub_10005B60+64j
					; sub_10005B60+71j
					; DATA XREF: ...
		test	cl, cl		; jumptable 10005BD1 default case
		jns	short loc_10005DE2
		push	ebx
		call	ldap_utf8len
		mov	ebp, eax
		jmp	short loc_10005DAF
; ---------------------------------------------------------------------------

loc_10005DE2:				; CODE XREF: sub_10005B60+276j
		mov	ebp, 1
		jmp	short loc_10005DB3
sub_10005B60	endp

; ---------------------------------------------------------------------------
		align 4
off_10005DEC	dd offset loc_10005C19,	offset loc_10005BF9, offset loc_10005C0A
					; DATA XREF: sub_10005B60+71r
		dd offset loc_10005DC6,	offset loc_10005BD8, offset loc_10005DD4 ; jump	table for switch statement
byte_10005E04	db	0,     5,     5,     5 ; DATA XREF: sub_10005B60+6Ar
		db	5,     5,     5,     5 ; indirect table	for switch statement
		db	5,     5,     5,     5
		db	5,     5,     5,     5
		db	5,     5,     5,     5
		db	5,     5,     5,     5
		db	5,     5,     5,     5
		db	5,     5,     5,     5
		db	5,     5,     1,     5
		db	5,     5,     5,     5
		db	5,     5,     5,     2
		db	0,     5,     5,     5
		db	5,     5,     5,     5
		db	5,     5,     5,     5
		db	5,     5,     5,     0
		db	5,     3,     5,     5
		db	5,     5,     5,     5
		db	5,     5,     5,     5
		db	5,     5,     5,     5
		db	5,     5,     5,     5
		db	5,     5,     5,     5
		db	5,     5,     5,     5
		db	5,     5,     5,     5
		db	4
		align 10h
; Exported entry  39. ldap_explode_dn

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	ldap_explode_dn(void *Src, int)
		public ldap_explode_dn
ldap_explode_dn	proc near		; CODE XREF: sub_1000A200+Ap
					; sub_1000A200+17p ...

Src		= dword	ptr  4
arg_4		= dword	ptr  8

		push	1		; int
		push	[esp+4+arg_4]	; int
		push	[esp+8+Src]	; Src
		call	sub_10005B60
		add	esp, 0Ch
		retn	8
ldap_explode_dn	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  87. ldap_explode_dns

; =============== S U B	R O U T	I N E =======================================


		public ldap_explode_dns
ldap_explode_dns proc near		; DATA XREF: .rdata:off_10020938o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		test	eax, eax
		push	ebp
		push	edi
		mov	ebp, offset Src
		push	20h
		cmovnz	ebp, eax
		call	ldap_x_malloc
		mov	edi, eax
		add	esp, 4
		test	edi, edi
		jnz	short loc_10005EB5
		pop	edi
		pop	ebp
		retn	4
; ---------------------------------------------------------------------------

loc_10005EB5:				; CODE XREF: ldap_explode_dns+1Ej
		push	ebx
		push	esi
		push	ebp
		mov	ebx, 8
		xor	esi, esi
		call	sub_1000BAB0
		push	offset Delim	; "@."
		push	eax		; Str
		mov	[esp+1Ch+arg_0], eax
		call	ds:strtok
		mov	ebp, eax
		add	esp, 0Ch
		test	ebp, ebp
		jz	short loc_10005F1D
		lea	ecx, [ecx+0]

loc_10005EE0:				; CODE XREF: ldap_explode_dns+8Bj
		cmp	esi, ebx
		jnz	short loc_10005EFD
		add	ebx, ebx
		lea	eax, ds:0[ebx*4]
		push	eax
		push	edi
		call	ldap_x_realloc
		mov	edi, eax
		add	esp, 8
		test	edi, edi
		jz	short loc_10005F39

loc_10005EFD:				; CODE XREF: ldap_explode_dns+52j
		push	ebp
		call	sub_1000BAB0
		push	offset Delim	; "@."
		mov	[edi+esi*4], eax
		inc	esi
		push	0		; Str
		call	ds:strtok
		mov	ebp, eax
		add	esp, 0Ch
		test	ebp, ebp
		jnz	short loc_10005EE0

loc_10005F1D:				; CODE XREF: ldap_explode_dns+4Bj
		push	[esp+10h+arg_0]
		mov	dword ptr [edi+esi*4], 0
		call	ldap_x_free
		add	esp, 4
		mov	eax, edi
		pop	esi
		pop	ebx
		pop	edi
		pop	ebp
		retn	4
; ---------------------------------------------------------------------------

loc_10005F39:				; CODE XREF: ldap_explode_dns+6Bj
		push	[esp+10h+arg_0]
		call	ldap_x_free
		add	esp, 4
		xor	eax, eax
		pop	esi
		pop	ebx
		pop	edi
		pop	ebp
		retn	4
ldap_explode_dns endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 443. ldap_explode_rdn

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	ldap_explode_rdn(void *Src, int)
		public ldap_explode_rdn
ldap_explode_rdn proc near		; DATA XREF: .rdata:off_10020938o

Src		= dword	ptr  4
arg_4		= dword	ptr  8

		push	2		; int
		push	[esp+4+arg_4]	; int
		push	[esp+8+Src]	; Src
		call	sub_10005B60
		add	esp, 0Ch
		retn	8
ldap_explode_rdn endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  30. ldap_get_dn

; =============== S U B	R O U T	I N E =======================================


		public ldap_get_dn
ldap_get_dn	proc near		; CODE XREF: sub_10001E00+3Bp
					; ldap_multisort_entries+BFp ...

var_134		= dword	ptr -134h
Dst		= dword	ptr -130h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 134h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+134h+var_4], eax
		push	ebx
		mov	ebx, [esp+138h+arg_0]
		push	esi
		mov	esi, [esp+13Ch+arg_4]
		test	ebx, ebx
		jz	short loc_10005FE8
		test	esi, esi
		jz	short loc_10005FDC
		cmp	dword ptr [esi+4], 64h
		jnz	short loc_10005FDC
		mov	esi, [esi+8]
		lea	eax, [esp+13Ch+var_134]
		push	edi
		push	eax
		lea	eax, [esp+144h+Dst]
		mov	ecx, 4Bh
		lea	edi, [esp+144h+Dst]
		push	offset aA	; "{a"
		rep movsd
		push	eax		; Dst
		call	ber_scanf
		add	esp, 0Ch
		pop	edi
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_10005FD6
		push	0
		push	0
		push	54h
		jmp	short loc_10005FE2
; ---------------------------------------------------------------------------

loc_10005FD6:				; CODE XREF: ldap_get_dn+5Cj
		mov	eax, [esp+13Ch+var_134]
		jmp	short loc_10005FEA
; ---------------------------------------------------------------------------

loc_10005FDC:				; CODE XREF: ldap_get_dn+2Aj
					; ldap_get_dn+30j
		push	0
		push	0
		push	59h

loc_10005FE2:				; CODE XREF: ldap_get_dn+64j
		push	ebx
		call	ldap_set_lderrno

loc_10005FE8:				; CODE XREF: ldap_get_dn+26j
		xor	eax, eax

loc_10005FEA:				; CODE XREF: ldap_get_dn+6Aj
		mov	ecx, [esp+13Ch+var_4]
		pop	esi
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 134h
		retn	8
ldap_get_dn	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  86. ldap_is_dns_dn

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	ldap_is_dns_dn(char *Str)
		public ldap_is_dns_dn
ldap_is_dns_dn	proc near		; DATA XREF: .rdata:off_10020938o

Str		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+Str]
		test	esi, esi
		jz	short loc_10006047
		cmp	byte ptr [esi],	0
		jz	short loc_10006047
		push	3Dh		; Val
		push	esi		; Str
		call	ds:strchr
		add	esp, 8
		test	eax, eax
		jnz	short loc_10006047
		push	2Ch		; Val
		push	esi		; Str
		call	ds:strchr
		add	esp, 8
		test	eax, eax
		jnz	short loc_10006047
		mov	eax, 1
		pop	esi
		retn	4
; ---------------------------------------------------------------------------

loc_10006047:				; CODE XREF: ldap_is_dns_dn+7j
					; ldap_is_dns_dn+Cj ...
		xor	eax, eax
		pop	esi
		retn	4
ldap_is_dns_dn	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 537. ldap_create_geteffectiveRights_control

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	ldap_create_geteffectiveRights_control(void *Memory, int, int, char, int)
		public ldap_create_geteffectiveRights_control
ldap_create_geteffectiveRights_control proc near ; DATA	XREF: .rdata:off_10020938o

Memory		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= byte ptr  10h
arg_10		= dword	ptr  14h

		push	edi
		mov	edi, [esp+4+Memory]
		test	edi, edi
		jnz	short loc_10006060
		lea	eax, [edi+59h]
		pop	edi
		retn	14h
; ---------------------------------------------------------------------------

loc_10006060:				; CODE XREF: ldap_create_geteffectiveRights_control+7j
		push	esi
		mov	esi, [esp+8+arg_10]
		test	esi, esi
		jnz	short loc_1000607B
		push	esi
		push	esi
		push	59h
		push	edi
		call	ldap_set_lderrno
		lea	eax, [esi+59h]
		pop	esi
		pop	edi
		retn	14h
; ---------------------------------------------------------------------------

loc_1000607B:				; CODE XREF: ldap_create_geteffectiveRights_control+17j
		mov	eax, [esp+8+arg_4]
		test	eax, eax
		push	ebx
		mov	ebx, offset Src
		cmovnz	ebx, eax
		lea	eax, [esp+0Ch+Memory]
		push	eax
		push	edi
		call	sub_1000EF40
		add	esp, 8
		test	eax, eax
		jz	short loc_100060B3
		push	0
		push	0
		push	5Ah
		push	edi
		call	ldap_set_lderrno
		pop	ebx
		pop	esi
		mov	eax, 5Ah
		pop	edi
		retn	14h
; ---------------------------------------------------------------------------

loc_100060B3:				; CODE XREF: ldap_create_geteffectiveRights_control+4Aj
		push	[esp+0Ch+arg_8]
		push	ebx
		push	offset aSV_1	; "{s{v}}"
		push	[esp+18h+Memory]
		call	ber_printf
		add	esp, 10h
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_100060F0
		push	0
		push	0
		push	53h
		push	edi
		call	ldap_set_lderrno
		push	1		; int
		push	[esp+10h+Memory] ; Memory
		call	ber_free
		pop	ebx
		pop	esi
		mov	eax, 53h
		pop	edi
		retn	14h
; ---------------------------------------------------------------------------

loc_100060F0:				; CODE XREF: ldap_create_geteffectiveRights_control+7Cj
		push	esi		; int
		push	dword ptr [esp+10h+arg_C] ; char
		push	1		; int
		push	[esp+18h+Memory] ; Memory
		push	offset a1_3_6_1_4_1_42 ; "1.3.6.1.4.1.42.2.27.9.5.2"
		call	sub_100029E0
		add	esp, 14h
		mov	esi, eax
		push	0
		push	0
		push	esi
		push	edi
		call	ldap_set_lderrno
		pop	ebx
		mov	eax, esi
		pop	esi
		pop	edi
		retn	14h
ldap_create_geteffectiveRights_control endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  36. ldap_count_entries

; =============== S U B	R O U T	I N E =======================================


		public ldap_count_entries
ldap_count_entries proc	near		; CODE XREF: ldap_keysort_entries+3Fp
					; ldap_multisort_entries+2Cp ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		cmp	[esp+arg_0], 0
		jnz	short loc_1000612D
		or	eax, 0FFFFFFFFh
		retn	8
; ---------------------------------------------------------------------------

loc_1000612D:				; CODE XREF: ldap_count_entries+5j
		mov	ecx, [esp+arg_4]
		xor	eax, eax
		test	ecx, ecx
		jz	short locret_10006145

loc_10006137:				; CODE XREF: ldap_count_entries+23j
		cmp	dword ptr [ecx+4], 64h
		jnz	short loc_1000613E
		inc	eax

loc_1000613E:				; CODE XREF: ldap_count_entries+1Bj
		mov	ecx, [ecx+0Ch]
		test	ecx, ecx
		jnz	short loc_10006137

locret_10006145:			; CODE XREF: ldap_count_entries+15j
		retn	8
ldap_count_entries endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  26. ldap_first_entry

; =============== S U B	R O U T	I N E =======================================


		public ldap_first_entry
ldap_first_entry proc near		; CODE XREF: sub_10016490+E7p
					; sub_10016490+188p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	ecx, [esp+arg_0]
		test	ecx, ecx
		jz	short loc_10006173
		mov	eax, [esp+arg_4]
		test	eax, eax
		jz	short loc_10006173
		cmp	dword ptr [eax+4], 64h
		jz	short locret_10006175
		mov	[esp+arg_4], eax
		mov	[esp+arg_0], ecx
		jmp	ldap_next_entry
; ---------------------------------------------------------------------------

loc_10006173:				; CODE XREF: ldap_first_entry+6j
					; ldap_first_entry+Ej
		xor	eax, eax

locret_10006175:			; CODE XREF: ldap_first_entry+14j
		retn	8
ldap_first_entry endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 500. ldap_get_entry_controls

; =============== S U B	R O U T	I N E =======================================


		public ldap_get_entry_controls
ldap_get_entry_controls	proc near	; DATA XREF: .rdata:off_10020938o

Dst		= dword	ptr -130h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 130h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+130h+var_4], eax
		push	ebx
		mov	ebx, [esp+134h+arg_8]
		push	ebp
		mov	ebp, [esp+138h+arg_0]
		push	esi
		mov	esi, [esp+13Ch+arg_4]
		test	ebp, ebp
		jnz	short loc_100061B5
		lea	eax, [ebp+59h]
		jmp	short loc_1000621B
; ---------------------------------------------------------------------------

loc_100061B5:				; CODE XREF: ldap_get_entry_controls+2Ej
		test	esi, esi
		jz	short loc_10006209
		cmp	dword ptr [esi+4], 64h
		jnz	short loc_10006209
		test	ebx, ebx
		jz	short loc_10006209
		push	edi
		mov	dword ptr [ebx], 0
		lea	eax, [esp+140h+Dst]
		mov	esi, [esi+8]
		lea	edi, [esp+140h+Dst]
		mov	ecx, 4Bh
		push	offset aXx	; "{xx"
		rep movsd
		push	eax		; Dst
		call	ber_scanf
		add	esp, 8
		pop	edi
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_100061F7
		mov	esi, 54h
		jmp	short loc_1000620E
; ---------------------------------------------------------------------------

loc_100061F7:				; CODE XREF: ldap_get_entry_controls+6Ej
		lea	eax, [esp+13Ch+Dst]
		push	ebx
		push	eax
		call	sub_10002C10
		add	esp, 8
		mov	esi, eax
		jmp	short loc_1000620E
; ---------------------------------------------------------------------------

loc_10006209:				; CODE XREF: ldap_get_entry_controls+37j
					; ldap_get_entry_controls+3Dj ...
		mov	esi, 59h

loc_1000620E:				; CODE XREF: ldap_get_entry_controls+75j
					; ldap_get_entry_controls+87j
		push	0
		push	0
		push	esi
		push	ebp
		call	ldap_set_lderrno
		mov	eax, esi

loc_1000621B:				; CODE XREF: ldap_get_entry_controls+33j
		mov	ecx, [esp+13Ch+var_4]
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 130h
		retn	0Ch
ldap_get_entry_controls	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  27. ldap_next_entry

; =============== S U B	R O U T	I N E =======================================


		public ldap_next_entry
ldap_next_entry	proc near		; CODE XREF: ldap_first_entry+1Ej
					; sub_10017100+2ACp
					; DATA XREF: ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		cmp	[esp+arg_0], 0
		jz	short loc_10006263
		mov	eax, [esp+arg_4]
		test	eax, eax
		jz	short loc_10006263
		mov	eax, [eax+0Ch]
		test	eax, eax
		jz	short loc_10006263

loc_10006256:				; CODE XREF: ldap_next_entry+21j
		cmp	dword ptr [eax+4], 64h
		jz	short locret_10006265
		mov	eax, [eax+0Ch]
		test	eax, eax
		jnz	short loc_10006256

loc_10006263:				; CODE XREF: ldap_next_entry+5j
					; ldap_next_entry+Dj ...
		xor	eax, eax

locret_10006265:			; CODE XREF: ldap_next_entry+1Aj
		retn	8
ldap_next_entry	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10006270	proc near		; CODE XREF: ldap_getfirstfilter+D7p

var_4		= byte ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ecx
		push	esi
		push	4
		push	1
		call	ldap_x_calloc
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		jnz	short loc_1000628A
		or	eax, 0FFFFFFFFh
		pop	esi
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_1000628A:				; CODE XREF: sub_10006270+12j
		push	ebx
		push	ebp
		mov	ebp, [esp+10h+arg_4]
		lea	eax, [esp+10h+var_4]
		push	edi
		push	eax
		push	ebp
		push	[esp+1Ch+arg_0]
		xor	edi, edi
		mov	[esi], edi
		call	ldap_utf8strtok_r
		mov	ebx, eax
		test	ebx, ebx
		jz	short loc_100062E5
		lea	ebx, [ebx+0]

loc_100062B0:				; CODE XREF: sub_10006270+73j
		lea	ecx, ds:8[edi*4]
		push	ecx
		push	esi
		call	ldap_x_realloc
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		jz	short loc_100062F3
		mov	[esi+edi*4], ebx
		lea	eax, [esp+14h+var_4]
		push	eax
		inc	edi
		push	ebp
		push	0
		mov	dword ptr [esi+edi*4], 0
		call	ldap_utf8strtok_r
		mov	ebx, eax
		test	ebx, ebx
		jnz	short loc_100062B0

loc_100062E5:				; CODE XREF: sub_10006270+38j
		mov	ecx, [esp+14h+arg_8]
		mov	eax, edi
		pop	edi
		pop	ebp
		pop	ebx
		mov	[ecx], esi
		pop	esi
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_100062F3:				; CODE XREF: sub_10006270+55j
		pop	edi
		pop	ebp
		pop	ebx
		or	eax, 0FFFFFFFFh
		pop	esi
		pop	ecx
		retn
sub_10006270	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10006300(void	*Dst, int, void	*Src, size_t Size)
sub_10006300	proc near		; CODE XREF: ldap_create_filter+E8p

Dst		= dword	ptr  4
arg_4		= dword	ptr  8
Src		= dword	ptr  0Ch
Size		= dword	ptr  10h

		mov	eax, [esp+arg_4]
		push	esi
		mov	esi, [esp+4+Size]
		push	edi
		mov	edi, [esp+8+Dst]
		sub	eax, edi
		cmp	esi, eax
		jbe	short loc_1000632C
		test	eax, eax
		jz	short loc_10006327
		push	eax		; Size
		push	[esp+0Ch+Src]	; Src
		push	edi		; Dst
		call	ds:memmove
		add	esp, 0Ch

loc_10006327:				; CODE XREF: sub_10006300+16j
		pop	edi
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1000632C:				; CODE XREF: sub_10006300+12j
		test	esi, esi
		jz	short loc_1000633F
		push	esi		; Size
		push	[esp+0Ch+Src]	; Src
		push	edi		; Dst
		call	ds:memmove
		add	esp, 0Ch

loc_1000633F:				; CODE XREF: sub_10006300+2Ej
		lea	eax, [edi+esi]
		pop	edi
		pop	esi
		retn
sub_10006300	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10006350(void	*Dst, int, void	*Src, int)
sub_10006350	proc near		; CODE XREF: ldap_create_filter+1A7p
					; ldap_create_filter+20Ep ...

Dst		= dword	ptr  4
arg_4		= dword	ptr  8
Src		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	esi
		mov	esi, [esp+4+Dst]
		test	esi, esi
		jz	loc_100064F0
		push	ebx
		mov	ebx, [esp+8+arg_4]
		push	ebp
		mov	ebp, ds:memmove
		push	edi
		mov	edi, [esp+10h+Src]
		mov	edi, edi

loc_10006370:				; CODE XREF: sub_10006350+18Cj
		mov	cl, [edi]
		test	cl, cl
		jz	loc_100064E2
		movsx	edx, cl
		lea	eax, [edx-28h]	; switch 53 cases
		cmp	eax, 34h
		ja	loc_100064D2	; jumptable 10006390 default case
		movzx	eax, ds:byte_10006504[eax]
		jmp	ds:off_100064F4[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_10006397:				; CODE XREF: sub_10006350+40j
					; DATA XREF: .text:off_100064F4o
		cmp	[esp+10h+arg_C], 0 ; jumptable 10006390	case 42
		jz	loc_100064D2	; jumptable 10006390 default case
		mov	eax, ebx
		sub	eax, esi
		cmp	eax, 3
		jnb	short loc_100063C2
		test	eax, eax
		jz	short loc_100063BB
		push	eax		; Size
		push	offset a2a	; "\\2a"
		push	esi		; Dst
		call	ebp ; memmove
		add	esp, 0Ch

loc_100063BB:				; CODE XREF: sub_10006350+5Dj
					; sub_10006350+A6j ...
		xor	esi, esi
		jmp	loc_100064D9
; ---------------------------------------------------------------------------

loc_100063C2:				; CODE XREF: sub_10006350+59j
		push	3		; Size
		push	offset a2a	; "\\2a"
		push	esi		; Dst
		call	ebp ; memmove
		add	esp, 0Ch
		add	esi, 3
		jmp	loc_100064D9
; ---------------------------------------------------------------------------

loc_100063D7:				; CODE XREF: sub_10006350+40j
					; DATA XREF: .text:off_100064F4o
		push	edx		; jumptable 10006390 cases 40,41
		lea	eax, [esp+14h+Dst]
		push	offset a02x	; "\\%02x"
		push	eax		; Dest
		call	ds:sprintf
		mov	eax, ebx
		add	esp, 0Ch
		sub	eax, esi
		cmp	eax, 3
		jnb	short loc_1000640B
		test	eax, eax
		jz	short loc_100063BB
		push	eax		; Size
		lea	eax, [esp+14h+Dst]
		push	eax		; Src
		push	esi		; Dst
		call	ebp ; memmove
		add	esp, 0Ch
		xor	esi, esi
		jmp	loc_100064D9
; ---------------------------------------------------------------------------

loc_1000640B:				; CODE XREF: sub_10006350+A2j
		push	3		; Size
		lea	eax, [esp+14h+Dst]
		push	eax		; Src
		push	esi		; Dst
		call	ebp ; memmove
		add	esp, 0Ch
		add	esi, 3
		jmp	loc_100064D9
; ---------------------------------------------------------------------------

loc_10006420:				; CODE XREF: sub_10006350+40j
					; DATA XREF: .text:off_100064F4o
		cmp	[esp+10h+arg_C], 0 ; jumptable 10006390	case 92
		jz	short loc_1000645C
		mov	eax, ebx
		sub	eax, esi
		cmp	eax, 3
		jnb	short loc_10006447
		test	eax, eax
		jz	short loc_100063BB
		push	eax		; Size
		push	offset a5c	; "\\5c"
		push	esi		; Dst
		call	ebp ; memmove
		add	esp, 0Ch
		xor	esi, esi
		jmp	loc_100064D9
; ---------------------------------------------------------------------------

loc_10006447:				; CODE XREF: sub_10006350+DEj
		push	3		; Size
		push	offset a5c	; "\\5c"
		push	esi		; Dst
		call	ebp ; memmove
		add	esp, 0Ch
		add	esi, 3
		jmp	loc_100064D9
; ---------------------------------------------------------------------------

loc_1000645C:				; CODE XREF: sub_10006350+D5j
		lea	ebp, [edi+1]
		push	ebp
		call	ldap_utf8isxdigit
		test	eax, eax
		jz	short loc_1000647D
		lea	eax, [edi+2]
		push	eax
		call	ldap_utf8isxdigit
		test	eax, eax
		jz	short loc_1000647D
		mov	ebx, 3
		jmp	short loc_10006486
; ---------------------------------------------------------------------------

loc_1000647D:				; CODE XREF: sub_10006350+117j
					; sub_10006350+124j
		xor	ebx, ebx
		cmp	[ebp+0], bl
		setnz	bl
		inc	ebx

loc_10006486:				; CODE XREF: sub_10006350+12Bj
		mov	eax, [esp+10h+arg_4]
		sub	eax, esi
		cmp	ebx, eax
		jbe	short loc_100064B1
		test	eax, eax
		jz	short loc_100064A1
		push	eax		; Size
		mov	eax, ds:memmove
		push	edi		; Src
		push	esi		; Dst
		call	eax ; memmove
		add	esp, 0Ch

loc_100064A1:				; CODE XREF: sub_10006350+142j
		mov	ebp, ds:memmove
		xor	esi, esi
		add	edi, ebx
		mov	ebx, [esp+10h+arg_4]
		jmp	short loc_100064DA
; ---------------------------------------------------------------------------

loc_100064B1:				; CODE XREF: sub_10006350+13Ej
		test	ebx, ebx
		jz	short loc_100064C2
		mov	eax, ds:memmove
		push	ebx		; Size
		push	edi		; Src
		push	esi		; Dst
		call	eax ; memmove
		add	esp, 0Ch

loc_100064C2:				; CODE XREF: sub_10006350+163j
		mov	ebp, ds:memmove
		add	esi, ebx
		add	edi, ebx
		mov	ebx, [esp+10h+arg_4]
		jmp	short loc_100064DA
; ---------------------------------------------------------------------------

loc_100064D2:				; CODE XREF: sub_10006350+33j
					; sub_10006350+40j ...
		cmp	esi, ebx	; jumptable 10006390 default case
		jnb	short loc_100064E9
		mov	[esi], cl
		inc	esi

loc_100064D9:				; CODE XREF: sub_10006350+6Dj
					; sub_10006350+82j ...
		inc	edi

loc_100064DA:				; CODE XREF: sub_10006350+15Fj
					; sub_10006350+180j
		test	esi, esi
		jnz	loc_10006370

loc_100064E2:				; CODE XREF: sub_10006350+24j
		pop	edi
		pop	ebp
		pop	ebx
		mov	eax, esi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_100064E9:				; CODE XREF: sub_10006350+184j
		pop	edi
		pop	ebp
		pop	ebx
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_100064F0:				; CODE XREF: sub_10006350+7j
		mov	eax, esi
		pop	esi
		retn
sub_10006350	endp

; ---------------------------------------------------------------------------
off_100064F4	dd offset loc_100063D7,	offset loc_10006397, offset loc_10006420
					; DATA XREF: sub_10006350+40r
		dd offset loc_100064D2	; jump table for switch	statement
byte_10006504	db	0,     0,     1,     3 ; DATA XREF: sub_10006350+39r
		db	3,     3,     3,     3 ; indirect table	for switch statement
		db	3,     3,     3,     3
		db	3,     3,     3,     3
		db	3,     3,     3,     3
		db	3,     3,     3,     3
		db	3,     3,     3,     3
		db	3,     3,     3,     3
		db	3,     3,     3,     3
		db	3,     3,     3,     3
		db	3,     3,     3,     3
		db	3,     3,     3,     3
		db	3,     3,     3,     3
		db	2
		align 10h
; Exported entry 305. ldap_build_filter

; =============== S U B	R O U T	I N E =======================================


		public ldap_build_filter
ldap_build_filter proc near		; CODE XREF: sub_10017100+154p
					; DATA XREF: .rdata:off_10020938o
		jmp	ldap_create_filter
ldap_build_filter endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 434. ldap_create_filter

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	ldap_create_filter(void	*Dst, int, int,	void *Src, void	*, void	*, void	*, int)
		public ldap_create_filter
ldap_create_filter proc	near		; CODE XREF: ldap_build_filterj
					; ldap_getnextfilter+3Dp
					; DATA XREF: ...

var_4		= dword	ptr -4
Dst		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
Src		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch
arg_1C		= dword	ptr  20h

		push	ecx
		push	ebx
		push	esi
		mov	esi, [esp+0Ch+Dst]
		test	esi, esi
		jz	loc_10006816
		mov	eax, [esp+0Ch+arg_4]
		test	eax, eax
		jz	loc_10006816
		mov	ebx, [esp+0Ch+arg_8]
		test	ebx, ebx
		jz	loc_10006816
		mov	ecx, [esp+0Ch+arg_1C]
		test	ecx, ecx
		jnz	short loc_10006585
		mov	[esp+0Ch+arg_4], ecx
		jmp	short loc_1000659B
; ---------------------------------------------------------------------------

loc_10006585:				; CODE XREF: ldap_create_filter+2Dj
		xor	edx, edx
		mov	[esp+0Ch+arg_4], edx
		cmp	[ecx], edx
		jz	short loc_1000659B
		nop

loc_10006590:				; CODE XREF: ldap_create_filter+45j
		inc	edx
		cmp	dword ptr [ecx+edx*4], 0
		jnz	short loc_10006590
		mov	[esp+0Ch+arg_4], edx

loc_1000659B:				; CODE XREF: ldap_create_filter+33j
					; ldap_create_filter+3Dj
		mov	ecx, [esp+0Ch+Src]
		push	ebp
		push	edi
		lea	edi, [eax-1]
		add	edi, esi
		mov	[esp+14h+Dst], edi
		test	ecx, ecx
		jz	short loc_100065F3
		mov	edi, ecx
		lea	edx, [edi+1]

loc_100065B3:				; CODE XREF: ldap_create_filter+68j
		mov	al, [edi]
		inc	edi
		test	al, al
		jnz	short loc_100065B3
		mov	ebp, [esp+14h+Dst]
		sub	edi, edx
		mov	eax, ebp
		sub	eax, esi
		cmp	edi, eax
		jbe	short loc_100065DF
		test	eax, eax
		jz	short loc_100065D8
		push	eax		; Size
		push	ecx		; Src
		push	esi		; Dst
		call	ds:memmove
		add	esp, 0Ch

loc_100065D8:				; CODE XREF: ldap_create_filter+7Aj
		xor	esi, esi
		jmp	loc_1000679F
; ---------------------------------------------------------------------------

loc_100065DF:				; CODE XREF: ldap_create_filter+76j
		test	edi, edi
		jz	short loc_100065EF
		push	edi		; Size
		push	ecx		; Src
		push	esi		; Dst
		call	ds:memmove
		add	esp, 0Ch

loc_100065EF:				; CODE XREF: ldap_create_filter+91j
		add	esi, edi
		mov	edi, ebp

loc_100065F3:				; CODE XREF: ldap_create_filter+5Cj
		test	esi, esi
		jz	loc_1000679B
		mov	ecx, [esp+14h+arg_14]
		lea	ebp, [ebx+1]

loc_10006602:				; CODE XREF: ldap_create_filter+1D3j
		mov	al, [ebx]
		test	al, al
		jz	loc_1000679B
		cmp	al, 25h
		jnz	short loc_10006647
		mov	al, [ebx+1]
		inc	ebx
		inc	ebp
		cmp	al, 76h
		jz	short loc_1000664F
		cmp	al, 65h
		jz	short loc_1000664F
		cmp	al, 61h
		jnz	short loc_10006647
		test	ecx, ecx
		jz	short loc_10006647
		lea	edx, [ecx+1]

loc_10006628:				; CODE XREF: ldap_create_filter+DDj
		mov	al, [ecx]
		inc	ecx
		test	al, al
		jnz	short loc_10006628
		sub	ecx, edx
		push	ecx		; Size
		push	[esp+18h+arg_14] ; Src
		push	edi		; int
		push	esi		; Dst
		call	sub_10006300
		add	esp, 10h
		mov	esi, eax
		jmp	loc_10006714
; ---------------------------------------------------------------------------

loc_10006647:				; CODE XREF: ldap_create_filter+BEj
					; ldap_create_filter+CFj ...
		mov	[esi], al
		inc	esi
		jmp	loc_10006718
; ---------------------------------------------------------------------------

loc_1000664F:				; CODE XREF: ldap_create_filter+C7j
					; ldap_create_filter+CBj
		xor	ecx, ecx
		cmp	al, 65h
		push	ebp
		setz	cl
		mov	[esp+18h+var_4], ecx
		call	ldap_utf8isdigit
		test	eax, eax
		jz	loc_10006740
		movsx	ecx, byte ptr [ebx+1]
		inc	ebx
		inc	ebp
		sub	ecx, 31h
		mov	[esp+14h+Src], ecx
		cmp	byte ptr [ebp+0], 2Dh
		jnz	loc_10006735
		inc	ebp
		inc	ebx
		push	ebp
		call	ldap_utf8isdigit
		test	eax, eax
		jz	loc_1000672B
		movsx	eax, byte ptr [ebx+1]
		inc	ebx
		mov	ecx, [esp+14h+arg_4]
		sub	eax, 31h
		dec	ecx
		mov	[esp+14h+arg_8], eax
		inc	ebp
		cmp	eax, ecx
		jle	short loc_100066AB
		mov	eax, ecx

loc_100066A7:				; CODE XREF: ldap_create_filter+1E0j
		mov	[esp+14h+arg_8], eax

loc_100066AB:				; CODE XREF: ldap_create_filter+153j
		mov	ecx, [esp+14h+Src]

loc_100066AF:				; CODE XREF: ldap_create_filter+1EBj
		cmp	[esp+14h+arg_4], 0
		jle	short loc_10006714
		mov	edi, ecx
		cmp	ecx, eax
		jg	short loc_10006710
		lea	esp, [esp+0]

loc_100066C0:				; CODE XREF: ldap_create_filter+1BEj
		cmp	edi, ecx
		jle	short loc_100066E7
		mov	eax, [esp+14h+Dst]
		sub	eax, esi
		cmp	eax, 1
		jb	loc_10006785
		push	1		; Size
		push	offset asc_1001FAB0 ; "	"
		push	esi		; Dst
		call	ds:memmove
		add	esp, 0Ch
		inc	esi
		jz	short loc_10006710

loc_100066E7:				; CODE XREF: ldap_create_filter+172j
		mov	eax, [esp+14h+arg_1C]
		push	[esp+14h+var_4]	; int
		push	dword ptr [eax+edi*4] ;	Src
		push	[esp+1Ch+Dst]	; int
		push	esi		; Dst
		call	sub_10006350
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		jz	short loc_10006710
		mov	ecx, [esp+14h+Src]
		inc	edi
		cmp	edi, [esp+14h+arg_8]
		jle	short loc_100066C0

loc_10006710:				; CODE XREF: ldap_create_filter+16Aj
					; ldap_create_filter+195j ...
		mov	edi, [esp+14h+Dst]

loc_10006714:				; CODE XREF: ldap_create_filter+F2j
					; ldap_create_filter+164j ...
		mov	ecx, [esp+14h+arg_14]

loc_10006718:				; CODE XREF: ldap_create_filter+FAj
		xor	eax, eax
		cmp	esi, edi
		cmova	esi, eax
		inc	ebx
		inc	ebp
		test	esi, esi
		jnz	loc_10006602
		jmp	short loc_1000679B
; ---------------------------------------------------------------------------

loc_1000672B:				; CODE XREF: ldap_create_filter+139j
		mov	eax, [esp+14h+arg_4]
		dec	eax
		jmp	loc_100066A7
; ---------------------------------------------------------------------------

loc_10006735:				; CODE XREF: ldap_create_filter+129j
		mov	eax, ecx
		mov	[esp+14h+arg_8], eax
		jmp	loc_100066AF
; ---------------------------------------------------------------------------

loc_10006740:				; CODE XREF: ldap_create_filter+112j
		cmp	byte ptr [ebp+0], 24h
		jnz	short loc_1000676A
		mov	eax, [esp+14h+arg_4]
		inc	ebx
		inc	ebp
		test	eax, eax
		jle	short loc_10006714
		mov	ecx, [esp+14h+arg_1C]
		push	[esp+14h+var_4]	; int
		push	dword ptr [ecx+eax*4-4]	; Src
		push	edi		; int
		push	esi		; Dst
		call	sub_10006350
		add	esp, 10h
		mov	esi, eax
		jmp	short loc_10006714
; ---------------------------------------------------------------------------

loc_1000676A:				; CODE XREF: ldap_create_filter+1F4j
		mov	edx, [esp+14h+arg_18]
		test	edx, edx
		jz	short loc_10006714
		push	[esp+14h+var_4]	; int
		push	edx		; Src
		push	edi		; int
		push	esi		; Dst
		call	sub_10006350
		add	esp, 10h
		mov	esi, eax
		jmp	short loc_10006714
; ---------------------------------------------------------------------------

loc_10006785:				; CODE XREF: ldap_create_filter+17Dj
		test	eax, eax
		jz	short loc_10006799
		push	eax		; Size
		push	offset asc_1001FAB0 ; "	"
		push	esi		; Dst
		call	ds:memmove
		add	esp, 0Ch

loc_10006799:				; CODE XREF: ldap_create_filter+237j
		xor	esi, esi

loc_1000679B:				; CODE XREF: ldap_create_filter+A5j
					; ldap_create_filter+B6j ...
		mov	ebp, [esp+14h+Dst]

loc_1000679F:				; CODE XREF: ldap_create_filter+8Aj
		mov	ecx, [esp+14h+arg_10]
		test	ecx, ecx
		jz	short loc_100067F4
		test	esi, esi
		jz	short loc_100067F8
		mov	edi, ecx
		lea	edx, [edi+1]

loc_100067B0:				; CODE XREF: ldap_create_filter+265j
		mov	al, [edi]
		inc	edi
		test	al, al
		jnz	short loc_100067B0
		mov	eax, ebp
		sub	edi, edx
		sub	eax, esi
		cmp	edi, eax
		jbe	short loc_100067E2
		test	eax, eax
		jz	short loc_100067F8
		push	eax		; Size
		push	ecx		; Src
		push	esi		; Dst
		call	ds:memmove
		add	esp, 0Ch
		mov	byte ptr [ebp+0], 0
		mov	eax, 4
		pop	edi
		pop	ebp
		pop	esi
		pop	ebx
		pop	ecx
		retn	20h
; ---------------------------------------------------------------------------

loc_100067E2:				; CODE XREF: ldap_create_filter+26Fj
		test	edi, edi
		jz	short loc_100067F2
		push	edi		; Size
		push	ecx		; Src
		push	esi		; Dst
		call	ds:memmove
		add	esp, 0Ch

loc_100067F2:				; CODE XREF: ldap_create_filter+294j
		add	esi, edi

loc_100067F4:				; CODE XREF: ldap_create_filter+255j
		test	esi, esi
		jnz	short loc_10006809

loc_100067F8:				; CODE XREF: ldap_create_filter+259j
					; ldap_create_filter+273j
		pop	edi
		mov	byte ptr [ebp+0], 0
		mov	eax, 4
		pop	ebp
		pop	esi
		pop	ebx
		pop	ecx
		retn	20h
; ---------------------------------------------------------------------------

loc_10006809:				; CODE XREF: ldap_create_filter+2A6j
		pop	edi
		pop	ebp
		mov	byte ptr [esi],	0
		xor	eax, eax
		pop	esi
		pop	ebx
		pop	ecx
		retn	20h
; ---------------------------------------------------------------------------

loc_10006816:				; CODE XREF: ldap_create_filter+9j
					; ldap_create_filter+15j ...
		pop	esi
		mov	eax, 59h
		pop	ebx
		pop	ecx
		retn	20h
ldap_create_filter endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  57. ldap_getfirstfilter

; =============== S U B	R O U T	I N E =======================================


		public ldap_getfirstfilter
ldap_getfirstfilter proc near		; CODE XREF: sub_10017BC0+1B2p
					; DATA XREF: .rdata:off_10020938o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		push	ebp
		push	edi
		mov	edi, [esp+0Ch+arg_0]
		test	edi, edi
		jz	short loc_10006887
		mov	ebx, [esp+0Ch+arg_4]
		test	ebx, ebx
		jz	short loc_10006887
		mov	ebp, [esp+0Ch+arg_8]
		test	ebp, ebp
		jz	short loc_10006887
		mov	eax, [edi+420h]
		test	eax, eax
		jz	short loc_10006869
		push	eax
		call	ldap_x_free
		push	dword ptr [edi+424h]
		call	ldap_x_free
		add	esp, 8

loc_10006869:				; CODE XREF: ldap_getfirstfilter+23j
		push	dword ptr [edi+41Ch]
		call	ldap_x_free
		push	ebp
		call	sub_1000BAB0
		add	esp, 8
		mov	[edi+41Ch], eax
		test	eax, eax
		jnz	short loc_1000688F

loc_10006887:				; CODE XREF: ldap_getfirstfilter+9j
					; ldap_getfirstfilter+11j ...
		pop	edi
		pop	ebp
		xor	eax, eax
		pop	ebx
		retn	0Ch
; ---------------------------------------------------------------------------

loc_1000688F:				; CODE XREF: ldap_getfirstfilter+55j
		push	esi
		mov	esi, [edi]
		mov	dword ptr [edi+4], 0
		test	esi, esi
		jz	short loc_100068E1
		lea	ecx, [ecx+0]

loc_100068A0:				; CODE XREF: ldap_getfirstfilter+A7j
		push	ebx
		call	loc_1000E210
		test	eax, eax
		jnz	short loc_100068D2
		push	dword ptr [esi]
		call	sub_1000E680
		cmp	eax, 1
		jnz	short loc_100068D2
		push	dword ptr [esi+4]
		call	loc_1000E210
		test	eax, eax
		jnz	short loc_100068D2
		push	dword ptr [edi+41Ch]
		call	sub_1000E680
		cmp	eax, 1
		jz	short loc_100068DB

loc_100068D2:				; CODE XREF: ldap_getfirstfilter+78j
					; ldap_getfirstfilter+84j ...
		mov	esi, [esi+10h]
		test	esi, esi
		jnz	short loc_100068A0
		jmp	short loc_100068E1
; ---------------------------------------------------------------------------

loc_100068DB:				; CODE XREF: ldap_getfirstfilter+A0j
		mov	eax, [esi+0Ch]
		mov	[edi+4], eax

loc_100068E1:				; CODE XREF: ldap_getfirstfilter+6Bj
					; ldap_getfirstfilter+A9j
		cmp	dword ptr [edi+4], 0
		jz	short loc_1000692B
		push	ebp
		call	sub_1000BAB0
		mov	ecx, eax
		add	esp, 4
		mov	[edi+420h], ecx
		test	ecx, ecx
		jz	short loc_1000692B
		lea	eax, [edi+424h]
		push	eax
		push	dword ptr [esi+8]
		push	ecx
		call	sub_10006270
		add	esp, 0Ch
		test	eax, eax
		jns	short loc_10006934
		push	dword ptr [edi+420h]
		call	ldap_x_free
		add	esp, 4
		mov	dword ptr [edi+420h], 0

loc_1000692B:				; CODE XREF: ldap_getfirstfilter+B5j
					; ldap_getfirstfilter+CAj
		pop	esi
		pop	edi
		pop	ebp
		xor	eax, eax
		pop	ebx
		retn	0Ch
; ---------------------------------------------------------------------------

loc_10006934:				; CODE XREF: ldap_getfirstfilter+E1j
		push	edi
		call	ldap_getnextfilter
		pop	esi
		pop	edi
		pop	ebp
		pop	ebx
		retn	0Ch
ldap_getfirstfilter endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  58. ldap_getnextfilter

; =============== S U B	R O U T	I N E =======================================


		public ldap_getnextfilter
ldap_getnextfilter proc	near		; CODE XREF: ldap_getfirstfilter+105p
					; sub_10017BC0+221p
					; DATA XREF: ...

arg_0		= dword	ptr  4

		push	ebx
		push	edi
		mov	edi, [esp+8+arg_0]
		test	edi, edi
		jz	short loc_100069AF
		mov	ebx, [edi+4]
		test	ebx, ebx
		jz	short loc_100069AF
		mov	eax, [ebx+10h]
		push	esi
		push	dword ptr [edi+424h] ; int
		mov	[edi+4], eax
		lea	esi, [edi+1Ch]
		push	dword ptr [edi+41Ch] ; void *
		push	0		; void *
		push	dword ptr [edi+42Ch] ; void *
		push	dword ptr [edi+428h] ; Src
		push	dword ptr [ebx]	; int
		push	400h		; int
		push	esi		; Dst
		call	ldap_create_filter
		lea	eax, [edi+8]
		mov	[eax], esi
		mov	ecx, [ebx+4]
		mov	[edi+0Ch], ecx
		mov	ecx, [ebx+8]
		mov	[edi+10h], ecx
		mov	ecx, [ebx+0Ch]
		pop	esi
		mov	[edi+14h], ecx
		pop	edi
		pop	ebx
		retn	4
; ---------------------------------------------------------------------------

loc_100069AF:				; CODE XREF: ldap_getnextfilter+8j
					; ldap_getnextfilter+Fj
		pop	edi
		xor	eax, eax
		pop	ebx
		retn	4
ldap_getnextfilter endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  55. ldap_init_getfilter

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	ldap_init_getfilter(char *Filename)
		public ldap_init_getfilter
ldap_init_getfilter proc near		; CODE XREF: ldap_ufn_setfilter+16p
					; DATA XREF: .rdata:off_10020938o

Filename	= dword	ptr  4

		push	esi
		push	offset Mode	; "r"
		push	[esp+8+Filename] ; Filename
		call	ds:fopen
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		jnz	short loc_100069DD
		pop	esi
		retn	4
; ---------------------------------------------------------------------------

loc_100069DD:				; CODE XREF: ldap_init_getfilter+17j
		push	edi
		mov	edi, ds:fseek
		push	2		; Origin
		push	0		; Offset
		push	esi		; File
		call	edi ; fseek
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_10006A03
		push	esi		; File
		call	ds:fclose
		add	esp, 4
		xor	eax, eax
		pop	edi
		pop	esi
		retn	4
; ---------------------------------------------------------------------------

loc_10006A03:				; CODE XREF: ldap_init_getfilter+30j
		push	ebx
		push	esi		; File
		call	ds:ftell
		push	0		; Origin
		push	0		; Offset
		push	esi		; File
		mov	ebx, eax
		call	edi ; fseek
		add	esp, 10h
		test	eax, eax
		jnz	short loc_10006A2A
		push	ebx
		call	ldap_x_malloc
		mov	edi, eax
		add	esp, 4
		test	edi, edi
		jnz	short loc_10006A3C

loc_10006A2A:				; CODE XREF: ldap_init_getfilter+59j
		push	esi		; File
		call	ds:fclose
		add	esp, 4
		xor	eax, eax
		pop	ebx
		pop	edi
		pop	esi
		retn	4
; ---------------------------------------------------------------------------

loc_10006A3C:				; CODE XREF: ldap_init_getfilter+68j
		push	ebp
		push	esi		; File
		push	ebx		; Count
		push	1		; ElementSize
		push	edi		; DstBuf
		call	ds:fread
		push	esi		; File
		mov	ebp, eax
		call	ds:feof
		push	esi		; File
		mov	[esp+28h+Filename], eax
		call	ds:fclose
		add	esp, 18h
		cmp	ebp, ebx
		jz	short loc_10006A7C
		cmp	[esp+10h+Filename], 0
		jnz	short loc_10006A7C
		push	edi
		call	ldap_x_free
		add	esp, 4
		xor	eax, eax
		pop	ebp
		pop	ebx
		pop	edi
		pop	esi
		retn	4
; ---------------------------------------------------------------------------

loc_10006A7C:				; CODE XREF: ldap_init_getfilter+A1j
					; ldap_init_getfilter+A8j
		push	ebp
		push	edi
		call	ldap_init_getfilter_buf
		push	edi
		mov	esi, eax
		call	ldap_x_free
		add	esp, 4
		mov	eax, esi
		pop	ebp
		pop	ebx
		pop	edi
		pop	esi
		retn	4
ldap_init_getfilter endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  72. ldap_init_getfilter_buf

; =============== S U B	R O U T	I N E =======================================


		public ldap_init_getfilter_buf
ldap_init_getfilter_buf	proc near	; CODE XREF: ldap_init_getfilter+BEp
					; DATA XREF: .rdata:off_10020938o

var_214		= dword	ptr -214h
var_210		= dword	ptr -210h
var_20C		= dword	ptr -20Ch
var_208		= dword	ptr -208h
Dest		= byte ptr -204h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 214h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+214h+var_4], eax
		mov	eax, [esp+214h+arg_0]
		mov	[esp+214h+var_208], eax
		push	ebx
		test	eax, eax
		jz	loc_10006D90
		cmp	[esp+218h+arg_4], 0
		jl	loc_10006D90
		push	430h
		push	1
		call	ldap_x_calloc
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		jz	loc_10006D90
		push	ebp
		push	esi
		xor	esi, esi
		xor	ebp, ebp
		push	edi
		mov	[esp+224h+var_20C], esi
		mov	[esp+224h+var_210], esi
		cmp	[esp+224h+arg_4], esi
		jle	loc_10006D12
		jmp	short loc_10006B10
; ---------------------------------------------------------------------------
		align 10h

loc_10006B10:				; CODE XREF: ldap_init_getfilter_buf+6Bj
					; ldap_init_getfilter_buf+25Fj
		lea	eax, [esp+224h+var_214]
		push	eax
		lea	eax, [esp+228h+arg_4]
		push	eax
		lea	eax, [esp+22Ch+var_208]
		push	eax
		call	sub_10004490
		add	esp, 0Ch
		test	eax, eax
		jle	loc_10006D05
		dec	eax
		cmp	eax, 4		; switch 5 cases
		ja	loc_10006D7C	; jumptable 10006B3C default case
		jmp	ds:off_10006DAC[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_10006B43:				; CODE XREF: ldap_init_getfilter_buf+9Cj
					; DATA XREF: .text:off_10006DACo
		test	ebp, ebp	; jumptable 10006B3C case 0
		jz	short loc_10006B50
		push	ebp
		call	ldap_x_free
		add	esp, 4

loc_10006B50:				; CODE XREF: ldap_init_getfilter_buf+A5j
		mov	eax, [esp+224h+var_214]
		push	eax
		mov	ebp, [eax]
		jmp	loc_10006CEF
; ---------------------------------------------------------------------------

loc_10006B5C:				; CODE XREF: ldap_init_getfilter_buf+9Cj
					; DATA XREF: .text:off_10006DACo
		push	14h		; jumptable 10006B3C cases 3,4
		push	1
		call	ldap_x_calloc
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		jz	loc_10006D88
		push	ebp
		call	sub_1000BAB0
		mov	[esi], eax
		add	esp, 4
		mov	ecx, [esp+224h+var_214]
		mov	ecx, [ecx]
		push	ecx
		mov	[esi+4], ecx
		call	loc_1000E210
		mov	edi, eax
		test	edi, edi
		jnz	loc_10006D16
		mov	eax, [esp+224h+var_214]
		mov	eax, [eax+4]
		mov	[esi+8], eax
		mov	eax, [esp+224h+var_20C]
		mov	[esi+0Ch], edi
		mov	[esi+10h], edi
		test	eax, eax
		jnz	short loc_10006BB2
		mov	[ebx], esi
		jmp	short loc_10006BB5
; ---------------------------------------------------------------------------

loc_10006BB2:				; CODE XREF: ldap_init_getfilter_buf+10Cj
		mov	[eax+10h], esi

loc_10006BB5:				; CODE XREF: ldap_init_getfilter_buf+110j
		mov	ecx, [esp+224h+var_214]
		mov	[esp+224h+var_20C], esi
		mov	[esp+224h+var_210], 0
		mov	eax, [ecx+8]
		mov	[ecx], eax
		mov	ecx, [esp+224h+var_214]
		mov	eax, [ecx+0Ch]
		mov	[ecx+4], eax
		mov	ecx, [esp+224h+var_214]
		mov	eax, [ecx+10h]
		mov	[ecx+8], eax

loc_10006BDE:				; CODE XREF: ldap_init_getfilter_buf+9Cj
					; DATA XREF: .text:off_10006DACo
		test	esi, esi	; jumptable 10006B3C cases 1,2
		jz	loc_10006CF7
		push	14h
		push	1
		call	ldap_x_calloc
		mov	edi, eax
		add	esp, 8
		test	edi, edi
		jz	loc_10006D68
		mov	eax, [esp+224h+var_210]
		test	eax, eax
		jnz	short loc_10006C09
		mov	[esi+0Ch], edi
		jmp	short loc_10006C0C
; ---------------------------------------------------------------------------

loc_10006C09:				; CODE XREF: ldap_init_getfilter_buf+162j
		mov	[eax+10h], edi

loc_10006C0C:				; CODE XREF: ldap_init_getfilter_buf+167j
		mov	dword ptr [edi+10h], 0
		mov	eax, [esp+224h+var_214]
		mov	[esp+224h+var_210], edi
		mov	eax, [eax]
		mov	[edi], eax
		mov	eax, [esp+224h+var_214]
		mov	eax, [eax+4]
		mov	[edi+4], eax
		mov	eax, [esp+224h+var_214]
		mov	eax, [eax+8]
		test	eax, eax
		jz	short loc_10006CAE
		push	offset aSubtree	; "subtree"
		push	eax		; Str1
		call	ds:_stricmp
		add	esp, 8
		test	eax, eax
		jnz	short loc_10006C50
		mov	dword ptr [edi+8], 2
		jmp	short loc_10006C92
; ---------------------------------------------------------------------------

loc_10006C50:				; CODE XREF: ldap_init_getfilter_buf+1A5j
		mov	eax, [esp+224h+var_214]
		push	offset aOnelevel ; "onelevel"
		push	dword ptr [eax+8] ; Str1
		call	ds:_stricmp
		add	esp, 8
		test	eax, eax
		jnz	short loc_10006C72
		mov	dword ptr [edi+8], 1
		jmp	short loc_10006C92
; ---------------------------------------------------------------------------

loc_10006C72:				; CODE XREF: ldap_init_getfilter_buf+1C7j
		mov	eax, [esp+224h+var_214]
		push	offset aBase	; "base"
		push	dword ptr [eax+8] ; Str1
		call	ds:_stricmp
		add	esp, 8
		test	eax, eax
		jnz	loc_10006D7C	; jumptable 10006B3C default case
		mov	[edi+8], eax

loc_10006C92:				; CODE XREF: ldap_init_getfilter_buf+1AEj
					; ldap_init_getfilter_buf+1D0j
		mov	eax, [esp+224h+var_214]
		push	dword ptr [eax+8]
		call	ldap_x_free
		mov	eax, [esp+228h+var_214]
		add	esp, 4
		mov	dword ptr [eax+8], 0
		jmp	short loc_10006CB5
; ---------------------------------------------------------------------------

loc_10006CAE:				; CODE XREF: ldap_init_getfilter_buf+192j
		mov	dword ptr [edi+8], 2

loc_10006CB5:				; CODE XREF: ldap_init_getfilter_buf+20Cj
		mov	eax, [esp+224h+var_214]
		push	2Ah		; Val
		push	dword ptr [eax]	; Str
		call	ds:strchr
		add	esp, 8
		test	eax, eax
		jnz	short loc_10006CE6
		mov	eax, [esp+224h+var_214]
		push	7Eh		; Val
		push	dword ptr [eax]	; Str
		call	ds:strchr
		add	esp, 8
		test	eax, eax
		jnz	short loc_10006CE6
		mov	eax, 1
		jmp	short loc_10006CE8
; ---------------------------------------------------------------------------

loc_10006CE6:				; CODE XREF: ldap_init_getfilter_buf+228j
					; ldap_init_getfilter_buf+23Dj
		xor	eax, eax

loc_10006CE8:				; CODE XREF: ldap_init_getfilter_buf+244j
		mov	[edi+0Ch], eax
		push	[esp+224h+var_214]

loc_10006CEF:				; CODE XREF: ldap_init_getfilter_buf+B7j
		call	ldap_x_free
		add	esp, 4

loc_10006CF7:				; CODE XREF: ldap_init_getfilter_buf+140j
		cmp	[esp+224h+arg_4], 0
		jg	loc_10006B10

loc_10006D05:				; CODE XREF: ldap_init_getfilter_buf+8Cj
		test	ebp, ebp
		jz	short loc_10006D12
		push	ebp
		call	ldap_x_free
		add	esp, 4

loc_10006D12:				; CODE XREF: ldap_init_getfilter_buf+65j
					; ldap_init_getfilter_buf+267j
		mov	eax, ebx
		jmp	short loc_10006D4D
; ---------------------------------------------------------------------------

loc_10006D16:				; CODE XREF: ldap_init_getfilter_buf+F0j
		push	ebx
		call	ldap_getfilter_free
		push	edi
		push	dword ptr [esi+4]
		lea	eax, [esp+22Ch+Dest]
		push	offset aBadRegularExpr ; "bad regular expression \"%s\"	- %s\n"
		push	200h		; Count
		push	eax		; Dest
		call	ds:_snprintf
		lea	eax, [esp+238h+Dest]
		push	eax		; Str
		call	ber_err_print
		push	[esp+23Ch+var_214]
		call	sub_10004450
		add	esp, 1Ch

loc_10006D4B:				; CODE XREF: ldap_init_getfilter_buf+2DAj
					; ldap_init_getfilter_buf+2EEj
		xor	eax, eax

loc_10006D4D:				; CODE XREF: ldap_init_getfilter_buf+274j
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		mov	ecx, [esp+214h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 214h
		retn	8
; ---------------------------------------------------------------------------

loc_10006D68:				; CODE XREF: ldap_init_getfilter_buf+156j
		push	ebx
		call	ldap_getfilter_free
		push	[esp+224h+var_214]
		call	sub_10004450
		add	esp, 4
		jmp	short loc_10006D4B
; ---------------------------------------------------------------------------

loc_10006D7C:				; CODE XREF: ldap_init_getfilter_buf+96j
					; ldap_init_getfilter_buf+1E9j
		push	[esp+224h+var_214] ; jumptable 10006B3C	default	case
		call	sub_10004450
		add	esp, 4

loc_10006D88:				; CODE XREF: ldap_init_getfilter_buf+CCj
		push	ebx
		call	ldap_getfilter_free
		jmp	short loc_10006D4B
; ---------------------------------------------------------------------------

loc_10006D90:				; CODE XREF: ldap_init_getfilter_buf+22j
					; ldap_init_getfilter_buf+30j ...
		mov	ecx, [esp+218h+var_4]
		xor	eax, eax
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 214h
		retn	8
ldap_init_getfilter_buf	endp

; ---------------------------------------------------------------------------
		align 4
off_10006DAC	dd offset loc_10006B43	; DATA XREF: ldap_init_getfilter_buf+9Cr
		dd offset loc_10006BDE	; jump table for switch	statement
		dd offset loc_10006BDE
		dd offset loc_10006B5C
		dd offset loc_10006B5C
; Exported entry 433. ldap_set_filter_additions

; =============== S U B	R O U T	I N E =======================================


		public ldap_set_filter_additions
ldap_set_filter_additions proc near	; CODE XREF: ldap_setfilteraffixesj
					; DATA XREF: .rdata:off_10020938o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi
		mov	esi, [esp+4+arg_0]
		test	esi, esi
		jnz	short loc_10006DD2
		mov	eax, 59h
		pop	esi
		retn	0Ch
; ---------------------------------------------------------------------------

loc_10006DD2:				; CODE XREF: ldap_set_filter_additions+7j
		mov	eax, [esi+428h]
		test	eax, eax
		jz	short loc_10006DE5
		push	eax
		call	ldap_x_free
		add	esp, 4

loc_10006DE5:				; CODE XREF: ldap_set_filter_additions+1Aj
		mov	eax, [esp+4+arg_4]
		test	eax, eax
		jz	short loc_10006DF6
		push	eax
		call	sub_1000BAB0
		add	esp, 4

loc_10006DF6:				; CODE XREF: ldap_set_filter_additions+2Bj
		mov	[esi+428h], eax
		mov	eax, [esi+42Ch]
		test	eax, eax
		jz	short loc_10006E0F
		push	eax
		call	ldap_x_free
		add	esp, 4

loc_10006E0F:				; CODE XREF: ldap_set_filter_additions+44j
		mov	eax, [esp+4+arg_8]
		test	eax, eax
		jnz	short loc_10006E21
		mov	[esi+42Ch], eax
		pop	esi
		retn	0Ch
; ---------------------------------------------------------------------------

loc_10006E21:				; CODE XREF: ldap_set_filter_additions+55j
		push	eax
		call	sub_1000BAB0
		add	esp, 4
		mov	[esi+42Ch], eax
		xor	eax, eax
		pop	esi
		retn	0Ch
ldap_set_filter_additions endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  73. ldap_setfilteraffixes

; =============== S U B	R O U T	I N E =======================================


		public ldap_setfilteraffixes
ldap_setfilteraffixes proc near		; DATA XREF: .rdata:off_10020938o
		jmp	ldap_set_filter_additions
ldap_setfilteraffixes endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 419. ldap_get_option

; =============== S U B	R O U T	I N E =======================================


		public ldap_get_option
ldap_get_option	proc near		; DATA XREF: .rdata:off_10020938o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebp
		xor	ebp, ebp
		push	edi
		cmp	dword_100249D0,	ebp
		jnz	short loc_10006E61
		call	sub_1000B840

loc_10006E61:				; CODE XREF: ldap_get_option+Aj
		mov	edi, [esp+8+arg_8]
		test	edi, edi
		jnz	short loc_10006E71
		lea	eax, [edi+59h]
		pop	edi
		pop	ebp
		retn	0Ch
; ---------------------------------------------------------------------------

loc_10006E71:				; CODE XREF: ldap_get_option+17j
		push	ebx
		mov	ebx, [esp+0Ch+arg_4]
		cmp	ebx, 61h
		jnz	short loc_10006E8F
		movdqu	xmm0, xmmword_100249C0
		movdqu	xmmword	ptr [edi], xmm0

loc_10006E87:				; CODE XREF: ldap_get_option+50j
					; ldap_get_option+6Fj
		pop	ebx
		pop	edi
		xor	eax, eax
		pop	ebp
		retn	0Ch
; ---------------------------------------------------------------------------

loc_10006E8F:				; CODE XREF: ldap_get_option+29j
		test	ebx, ebx
		jnz	short loc_10006EBC
		push	edi
		call	sub_100073A0
		mov	ecx, eax
		add	esp, 4
		test	ecx, ecx
		jz	short loc_10006E87
		mov	eax, [esp+0Ch+arg_0]
		test	eax, eax
		jz	short loc_10006EB3
		push	ebx
		push	ebx
		push	ecx
		push	eax
		call	ldap_set_lderrno

loc_10006EB3:				; CODE XREF: ldap_get_option+58j
		pop	ebx
		pop	edi
		or	eax, 0FFFFFFFFh
		pop	ebp
		retn	0Ch
; ---------------------------------------------------------------------------

loc_10006EBC:				; CODE XREF: ldap_get_option+41j
		cmp	ebx, 6Eh
		jz	short loc_10006E87
		push	esi
		mov	esi, [esp+10h+arg_0]
		test	esi, esi
		jnz	short loc_10006ED1
		mov	esi, offset dword_10025280
		jmp	short loc_10006F3F
; ---------------------------------------------------------------------------

loc_10006ED1:				; CODE XREF: ldap_get_option+78j
		cmp	esi, offset dword_10025280
		jz	short loc_10006F3F
		mov	eax, [esi+0C0h]
		test	eax, eax
		jz	short loc_10006F3F
		mov	ecx, [esi+0DCh]
		test	ecx, ecx
		jz	short loc_10006F3F
		mov	edx, [esi+13Ch]
		test	edx, edx
		jz	short loc_10006F37
		call	edx
		cmp	[esi+15Ch], eax
		jnz	short loc_10006F09
		inc	dword ptr [esi+194h]
		jmp	short loc_10006F3F
; ---------------------------------------------------------------------------

loc_10006F09:				; CODE XREF: ldap_get_option+AFj
		mov	eax, [esi+0DCh]
		push	dword ptr [eax+1Ch]
		mov	eax, [esi+0C0h]
		call	eax
		mov	eax, [esi+13Ch]
		add	esp, 4
		call	eax
		mov	[esi+15Ch], eax
		mov	dword ptr [esi+194h], 1
		jmp	short loc_10006F3F
; ---------------------------------------------------------------------------

loc_10006F37:				; CODE XREF: ldap_get_option+A5j
		push	dword ptr [ecx+1Ch]
		call	eax
		add	esp, 4

loc_10006F3F:				; CODE XREF: ldap_get_option+7Fj
					; ldap_get_option+87j ...
		cmp	ebx, 4F00h
		jg	loc_10007228
		jz	loc_1000719F
		lea	eax, [ebx-1]	; switch 102 cases
		cmp	eax, 65h
		ja	loc_10007236	; jumptable 10006F64 default case
		movzx	eax, ds:byte_10007338[eax]
		jmp	ds:off_100072C8[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_10006F6B:				; CODE XREF: ldap_get_option+114j
					; DATA XREF: .text:off_100072C8o
		mov	eax, [esi+50h]	; jumptable 10006F64 case 8
		shr	eax, 1Fh
		jmp	loc_1000725C
; ---------------------------------------------------------------------------

loc_10006F76:				; CODE XREF: ldap_get_option+114j
					; DATA XREF: .text:off_100072C8o
		mov	eax, [esi+50h]	; jumptable 10006F64 case 10
		shr	eax, 1Eh
		and	eax, 1
		jmp	loc_1000725C
; ---------------------------------------------------------------------------

loc_10006F84:				; CODE XREF: ldap_get_option+114j
					; DATA XREF: .text:off_100072C8o
		mov	eax, [esi+50h]	; jumptable 10006F64 case 9
		shr	eax, 1Ch
		and	eax, 1
		jmp	loc_1000725C
; ---------------------------------------------------------------------------

loc_10006F92:				; CODE XREF: ldap_get_option+114j
					; DATA XREF: .text:off_100072C8o
		mov	eax, [esi+50h]	; jumptable 10006F64 case 98
		shr	eax, 1Bh
		and	eax, 1
		jmp	loc_1000725C
; ---------------------------------------------------------------------------

loc_10006FA0:				; CODE XREF: ldap_get_option+114j
					; DATA XREF: .text:off_100072C8o
		mov	eax, [esi+50h]	; jumptable 10006F64 case 102
		shr	eax, 19h
		and	eax, 1
		jmp	loc_1000725C
; ---------------------------------------------------------------------------

loc_10006FAE:				; CODE XREF: ldap_get_option+114j
					; DATA XREF: .text:off_100072C8o
		push	edi		; jumptable 10006F64 case 1
		push	10h

loc_10006FB1:				; CODE XREF: ldap_get_option+401j
		push	dword ptr [esi]
		call	ber_sockbuf_get_option
		test	eax, eax
		jz	loc_1000725E
		push	0
		push	0
		push	52h
		push	esi
		call	ldap_set_lderrno
		or	ebp, 0FFFFFFFFh
		jmp	loc_1000725E
; ---------------------------------------------------------------------------

loc_10006FD4:				; CODE XREF: ldap_get_option+114j
					; DATA XREF: .text:off_100072C8o
		mov	eax, [esi+10h]	; jumptable 10006F64 case 2
		jmp	loc_1000725C
; ---------------------------------------------------------------------------

loc_10006FDC:				; CODE XREF: ldap_get_option+114j
					; DATA XREF: .text:off_100072C8o
		mov	eax, [esi+18h]	; jumptable 10006F64 case 3
		jmp	loc_1000725C
; ---------------------------------------------------------------------------

loc_10006FE4:				; CODE XREF: ldap_get_option+114j
					; DATA XREF: .text:off_100072C8o
		mov	eax, [esi+14h]	; jumptable 10006F64 case 4
		jmp	loc_1000725C
; ---------------------------------------------------------------------------

loc_10006FEC:				; CODE XREF: ldap_get_option+114j
					; DATA XREF: .text:off_100072C8o
		mov	eax, [esi+4Ch]	; jumptable 10006F64 case 16
		jmp	loc_1000725C
; ---------------------------------------------------------------------------

loc_10006FF4:				; CODE XREF: ldap_get_option+114j
					; DATA XREF: .text:off_100072C8o
		mov	eax, [esi+8]	; jumptable 10006F64 case 17
		jmp	loc_1000725C
; ---------------------------------------------------------------------------

loc_10006FFC:				; CODE XREF: ldap_get_option+114j
					; DATA XREF: .text:off_100072C8o
		mov	[edi], ebp	; jumptable 10006F64 cases 18,19
		cmp	ebx, 12h
		jnz	short loc_1000701B
		mov	eax, [esi+114h]
		push	eax
		push	edi
		push	esi
		call	sub_10002AA0
		add	esp, 0Ch
		mov	ebp, eax
		jmp	loc_1000725E
; ---------------------------------------------------------------------------

loc_1000701B:				; CODE XREF: ldap_get_option+1B1j
		mov	eax, [esi+118h]
		push	eax
		push	edi
		push	esi
		call	sub_10002AA0
		add	esp, 0Ch
		mov	ebp, eax
		jmp	loc_1000725E
; ---------------------------------------------------------------------------

loc_10007033:				; CODE XREF: ldap_get_option+114j
					; DATA XREF: .text:off_100072C8o
		mov	eax, [esi+70h]	; jumptable 10006F64 case 6
		jmp	loc_1000725C
; ---------------------------------------------------------------------------

loc_1000703B:				; CODE XREF: ldap_get_option+114j
					; DATA XREF: .text:off_100072C8o
		mov	eax, [esi+74h]	; jumptable 10006F64 case 7
		jmp	loc_1000725C
; ---------------------------------------------------------------------------

loc_10007043:				; CODE XREF: ldap_get_option+114j
					; DATA XREF: .text:off_100072C8o
		mov	eax, [esi+0A0h]	; jumptable 10006F64 case 11
		test	eax, eax
		jnz	short loc_1000705E
		xorps	xmm0, xmm0
		movdqu	xmmword	ptr [edi], xmm0
		movdqu	xmmword	ptr [edi+10h], xmm0
		jmp	loc_1000725E
; ---------------------------------------------------------------------------

loc_1000705E:				; CODE XREF: ldap_get_option+1FBj
		movdqu	xmm0, xmmword ptr [eax]
		movdqu	xmmword	ptr [edi], xmm0
		movdqu	xmm0, xmmword ptr [eax+10h]
		movdqu	xmmword	ptr [edi+10h], xmm0
		jmp	loc_1000725E
; ---------------------------------------------------------------------------

loc_10007075:				; CODE XREF: ldap_get_option+114j
					; DATA XREF: .text:off_100072C8o
		movdqu	xmm0, xmmword ptr [esi+0B8h] ; jumptable 10006F64 case 5
		movdqu	xmmword	ptr [edi], xmm0
		movdqu	xmm0, xmmword ptr [esi+0C8h]
		movdqu	xmmword	ptr [edi+10h], xmm0
		mov	eax, [esi+0D8h]
		mov	[edi+20h], eax
		jmp	loc_1000725E
; ---------------------------------------------------------------------------

loc_1000709C:				; CODE XREF: ldap_get_option+114j
					; DATA XREF: .text:off_100072C8o
		movdqu	xmm0, xmmword ptr [esi+128h] ; jumptable 10006F64 case 101
		movdqu	xmmword	ptr [edi], xmm0
		movq	xmm0, qword ptr	[esi+138h]
		movq	qword ptr [edi+10h], xmm0
		jmp	loc_1000725E
; ---------------------------------------------------------------------------

loc_100070BA:				; CODE XREF: ldap_get_option+114j
					; DATA XREF: .text:off_100072C8o
		movdqu	xmm0, xmmword ptr [esi+0A4h] ; jumptable 10006F64 case 96
		movdqu	xmmword	ptr [edi], xmm0
		mov	eax, [esi+0B4h]
		mov	[edi+10h], eax
		jmp	loc_1000725E
; ---------------------------------------------------------------------------

loc_100070D4:				; CODE XREF: ldap_get_option+114j
					; DATA XREF: .text:off_100072C8o
		movdqu	xmm0, xmmword ptr [esi+0E8h] ; jumptable 10006F64 case 13
		movdqu	xmmword	ptr [edi], xmm0
		movdqu	xmm0, xmmword ptr [esi+0F8h]
		movdqu	xmmword	ptr [edi+10h], xmm0
		movq	xmm0, qword ptr	[esi+108h]
		movq	qword ptr [edi+20h], xmm0
		mov	eax, [esi+110h]
		mov	[edi+28h], eax
		jmp	loc_1000725E
; ---------------------------------------------------------------------------

loc_10007108:				; CODE XREF: ldap_get_option+114j
					; DATA XREF: .text:off_100072C8o
		mov	eax, [esi+0E4h]	; jumptable 10006F64 case 14
		jmp	loc_1000725C
; ---------------------------------------------------------------------------

loc_10007113:				; CODE XREF: ldap_get_option+114j
					; DATA XREF: .text:off_100072C8o
		mov	eax, [esi+0E0h]	; jumptable 10006F64 case 15
		jmp	loc_1000725C
; ---------------------------------------------------------------------------

loc_1000711E:				; CODE XREF: ldap_get_option+114j
					; DATA XREF: .text:off_100072C8o
		push	0		; jumptable 10006F64 case 49
		push	0
		push	esi
		call	ldap_get_lderrno
		jmp	loc_1000725C
; ---------------------------------------------------------------------------

loc_1000712D:				; CODE XREF: ldap_get_option+114j
					; DATA XREF: .text:off_100072C8o
		push	edi		; jumptable 10006F64 case 50
		push	0

loc_10007130:				; CODE XREF: ldap_get_option+2F8j
		push	esi
		call	ldap_get_lderrno
		push	dword ptr [edi]
		call	sub_1000BAB0
		add	esp, 4
		jmp	loc_1000725C
; ---------------------------------------------------------------------------

loc_10007145:				; CODE XREF: ldap_get_option+114j
					; DATA XREF: .text:off_100072C8o
		push	0		; jumptable 10006F64 case 51
		push	edi
		jmp	short loc_10007130
; ---------------------------------------------------------------------------

loc_1000714A:				; CODE XREF: ldap_get_option+114j
					; DATA XREF: .text:off_100072C8o
		mov	eax, [esi+11Ch]	; jumptable 10006F64 case 20
		test	eax, eax
		jz	short loc_10007162
		push	eax
		call	sub_1000BAB0
		add	esp, 4
		jmp	loc_1000725C
; ---------------------------------------------------------------------------

loc_10007162:				; CODE XREF: ldap_get_option+302j
		mov	[edi], ebp
		jmp	loc_1000725E
; ---------------------------------------------------------------------------

loc_10007169:				; CODE XREF: ldap_get_option+114j
					; DATA XREF: .text:off_100072C8o
		push	edi		; jumptable 10006F64 case 21
		call	sub_10007480
		mov	ebp, eax
		add	esp, 4
		test	ebp, ebp
		jz	loc_1000725E
		push	0
		push	0
		push	ebp
		push	esi
		call	ldap_set_lderrno
		or	ebp, 0FFFFFFFFh
		jmp	loc_1000725E
; ---------------------------------------------------------------------------

loc_1000718F:				; CODE XREF: ldap_get_option+114j
					; DATA XREF: .text:off_100072C8o
		push	dword ptr [esi+54h] ; jumptable	10006F64 case 48
		call	sub_1000BAB0
		add	esp, 4
		jmp	loc_1000725C
; ---------------------------------------------------------------------------

loc_1000719F:				; CODE XREF: ldap_get_option+FBj
		mov	eax, [edi]
		cmp	eax, 24h
		jnz	short loc_100071ED
		mov	eax, [esi+80h]
		mov	[edi+8], eax
		mov	eax, [esi+7Ch]
		mov	[edi+4], eax
		mov	eax, [esi+84h]
		mov	[edi+0Ch], eax
		mov	eax, [esi+88h]
		mov	[edi+10h], eax
		mov	eax, [esi+8Ch]
		mov	[edi+14h], eax
		mov	eax, [esi+90h]
		mov	[edi+18h], eax
		mov	eax, [esi+94h]
		mov	[edi+1Ch], eax
		mov	eax, [esi+98h]
		mov	[edi+20h], eax
		jmp	short loc_1000725E
; ---------------------------------------------------------------------------

loc_100071ED:				; CODE XREF: ldap_get_option+354j
		cmp	eax, 28h
		jnz	short loc_10007217
		movdqu	xmm0, xmmword ptr [esi+78h]
		movdqu	xmmword	ptr [edi], xmm0
		movdqu	xmm0, xmmword ptr [esi+88h]
		movdqu	xmmword	ptr [edi+10h], xmm0
		movq	xmm0, qword ptr	[esi+98h]
		movq	qword ptr [edi+20h], xmm0
		jmp	short loc_1000725E
; ---------------------------------------------------------------------------

loc_10007217:				; CODE XREF: ldap_get_option+3A0j
		push	0
		push	0
		push	59h
		push	esi
		call	ldap_set_lderrno
		or	ebp, 0FFFFFFFFh
		jmp	short loc_1000725E
; ---------------------------------------------------------------------------

loc_10007228:				; CODE XREF: ldap_get_option+F5j
		sub	ebx, 4F01h
		jz	short loc_10007256
		dec	ebx
		jz	short loc_1000724B
		dec	ebx
		jz	short loc_10007247

loc_10007236:				; CODE XREF: ldap_get_option+107j
					; ldap_get_option+114j
					; DATA XREF: ...
		push	0		; jumptable 10006F64 default case
		push	0
		push	59h
		push	esi
		call	ldap_set_lderrno
		or	ebp, 0FFFFFFFFh
		jmp	short loc_1000725E
; ---------------------------------------------------------------------------

loc_10007247:				; CODE XREF: ldap_get_option+3E4j
		mov	eax, [esi]
		jmp	short loc_1000725C
; ---------------------------------------------------------------------------

loc_1000724B:				; CODE XREF: ldap_get_option+3E1j
		push	edi
		push	400h
		jmp	loc_10006FB1
; ---------------------------------------------------------------------------

loc_10007256:				; CODE XREF: ldap_get_option+3DEj
		mov	eax, [esi+1B0h]

loc_1000725C:				; CODE XREF: ldap_get_option+121j
					; ldap_get_option+12Fj	...
		mov	[edi], eax

loc_1000725E:				; CODE XREF: ldap_get_option+16Aj
					; ldap_get_option+17Fj	...
		cmp	esi, offset dword_10025280
		jz	short loc_100072BD
		cmp	dword ptr [esi+0C0h], 0
		jz	short loc_100072BD
		mov	eax, [esi+0DCh]
		test	eax, eax
		jz	short loc_100072BD
		mov	ecx, [esi+13Ch]
		test	ecx, ecx
		jz	short loc_100072AF
		call	ecx
		cmp	[esi+15Ch], eax
		jnz	short loc_100072BD
		dec	dword ptr [esi+194h]
		jnz	short loc_100072BD
		mov	dword ptr [esi+15Ch], 0FFFFFFFFh
		mov	dword ptr [esi+194h], 0
		mov	eax, [esi+0DCh]

loc_100072AF:				; CODE XREF: ldap_get_option+431j
		push	dword ptr [eax+1Ch]
		mov	eax, [esi+0C4h]
		call	eax
		add	esp, 4

loc_100072BD:				; CODE XREF: ldap_get_option+414j
					; ldap_get_option+41Dj	...
		pop	esi
		pop	ebx
		pop	edi
		mov	eax, ebp
		pop	ebp
		retn	0Ch
ldap_get_option	endp

; ---------------------------------------------------------------------------
		align 4
off_100072C8	dd offset loc_10006FAE,	offset loc_10006FD4, offset loc_10006FDC
					; DATA XREF: ldap_get_option+114r
		dd offset loc_10006FE4,	offset loc_10007075, offset loc_10007033 ; jump	table for switch statement
		dd offset loc_1000703B,	offset loc_10006F6B, offset loc_10006F84
		dd offset loc_10006F76,	offset loc_10007043, offset loc_100070D4
		dd offset loc_10007108,	offset loc_10007113, offset loc_10006FEC
		dd offset loc_10006FF4,	offset loc_10006FFC, offset loc_1000714A
		dd offset loc_10007169,	offset loc_1000718F, offset loc_1000711E
		dd offset loc_1000712D,	offset loc_10007145, offset loc_100070BA
		dd offset loc_10006F92,	offset loc_1000709C, offset loc_10006FA0
		dd offset loc_10007236
byte_10007338	db	0,     1,     2,     3 ; DATA XREF: ldap_get_option+10Dr
		db	4,     5,     6,     7 ; indirect table	for switch statement
		db	8,     9,   0Ah,   1Bh
		db    0Bh,   0Ch,   0Dh,   0Eh
		db    0Fh,   10h,   10h,   11h
		db    12h,   1Bh,   1Bh,   1Bh
		db    1Bh,   1Bh,   1Bh,   1Bh
		db    1Bh,   1Bh,   1Bh,   1Bh
		db    1Bh,   1Bh,   1Bh,   1Bh
		db    1Bh,   1Bh,   1Bh,   1Bh
		db    1Bh,   1Bh,   1Bh,   1Bh
		db    1Bh,   1Bh,   1Bh,   13h
		db    14h,   15h,   16h,   1Bh
		db    1Bh,   1Bh,   1Bh,   1Bh
		db    1Bh,   1Bh,   1Bh,   1Bh
		db    1Bh,   1Bh,   1Bh,   1Bh
		db    1Bh,   1Bh,   1Bh,   1Bh
		db    1Bh,   1Bh,   1Bh,   1Bh
		db    1Bh,   1Bh,   1Bh,   1Bh
		db    1Bh,   1Bh,   1Bh,   1Bh
		db    1Bh,   1Bh,   1Bh,   1Bh
		db    1Bh,   1Bh,   1Bh,   1Bh
		db    1Bh,   1Bh,   1Bh,   1Bh
		db    1Bh,   1Bh,   1Bh,   17h
		db    1Bh,   18h,   1Bh,   1Bh
		db    19h,   1Ah
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100073A0	proc near		; CODE XREF: ldap_get_option+44p

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		test	esi, esi
		jz	short loc_100073BB
		cmp	dword ptr [esi], 1
		mov	dword ptr [esi+4], 7D5h
		jz	short loc_100073C2
		mov	dword ptr [esi], 1

loc_100073BB:				; CODE XREF: sub_100073A0+7j
		mov	eax, 59h
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_100073C2:				; CODE XREF: sub_100073A0+13j
		push	offset aMozilla_org ; "mozilla.org"
		mov	dword ptr [esi+8], 3
		mov	dword ptr [esi+14h], 25Fh
		call	sub_1000BAB0
		add	esp, 4
		mov	[esi+10h], eax
		test	eax, eax
		jz	short loc_10007409
		push	4
		push	11h
		call	ldap_x_calloc
		add	esp, 8
		mov	[esi+0Ch], eax
		test	eax, eax
		jnz	short loc_10007410
		push	dword ptr [esi+10h]
		call	ldap_x_free
		add	esp, 4
		mov	dword ptr [esi+10h], 0

loc_10007409:				; CODE XREF: sub_100073A0+42j
		mov	eax, 5Ah
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10007410:				; CODE XREF: sub_100073A0+55j
		push	ebx
		push	edi
		xor	ebx, ebx
		xor	edi, edi
		jmp	short loc_10007420
; ---------------------------------------------------------------------------
		align 10h

loc_10007420:				; CODE XREF: sub_100073A0+76j
					; sub_100073A0+A4j
		push	off_10024304[edi]
		call	sub_1000BAB0
		mov	ecx, [esi+0Ch]
		add	esp, 4
		mov	[ebx+ecx], eax
		test	eax, eax
		jz	short loc_1000744C
		add	edi, 0Ch
		add	ebx, 4
		cmp	edi, 0C0h
		jb	short loc_10007420
		pop	edi
		pop	ebx
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1000744C:				; CODE XREF: sub_100073A0+96j
		push	dword ptr [esi+0Ch]
		call	ldap_value_free
		push	dword ptr [esi+10h]
		call	ldap_x_free
		add	esp, 4
		mov	dword ptr [esi+0Ch], 0
		mov	dword ptr [esi+10h], 0
		mov	eax, 5Ah
		pop	edi
		pop	ebx
		pop	esi
		retn
sub_100073A0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10007480	proc near		; CODE XREF: ldap_get_option+31Ap

arg_0		= dword	ptr  4

		push	ebx
		mov	ebx, [esp+4+arg_0]
		push	ebp
		test	ebx, ebx
		jz	short loc_1000749C
		mov	ebp, [ebx+4]
		test	ebp, ebp
		jz	short loc_1000749C
		cmp	dword ptr [ebx], 1
		jz	short loc_100074A4
		mov	dword ptr [ebx], 1

loc_1000749C:				; CODE XREF: sub_10007480+8j
					; sub_10007480+Fj
		pop	ebp
		mov	eax, 59h
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_100074A4:				; CODE XREF: sub_10007480+14j
		push	esi
		push	edi
		xor	edi, edi
		xor	esi, esi
		lea	ebx, [ebx+0]

loc_100074B0:				; CODE XREF: sub_10007480+6Bj
		mov	eax, off_10024304[esi]
		mov	ecx, ebp

loc_100074B8:				; CODE XREF: sub_10007480+52j
		mov	dl, [ecx]
		cmp	dl, [eax]
		jnz	short loc_100074D8
		test	dl, dl
		jz	short loc_100074D4
		mov	dl, [ecx+1]
		cmp	dl, [eax+1]
		jnz	short loc_100074D8
		add	ecx, 2
		add	eax, 2
		test	dl, dl
		jnz	short loc_100074B8

loc_100074D4:				; CODE XREF: sub_10007480+40j
		xor	eax, eax
		jmp	short loc_100074DD
; ---------------------------------------------------------------------------

loc_100074D8:				; CODE XREF: sub_10007480+3Cj
					; sub_10007480+48j
		sbb	eax, eax
		or	eax, 1

loc_100074DD:				; CODE XREF: sub_10007480+56j
		test	eax, eax
		jz	short loc_100074FD
		add	esi, 0Ch
		inc	edi
		cmp	esi, 0C0h
		jb	short loc_100074B0
		cmp	edi, 10h
		pop	edi
		sbb	eax, eax
		pop	esi
		and	eax, 0FFFFFFA7h
		pop	ebp
		add	eax, 59h
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_100074FD:				; CODE XREF: sub_10007480+5Fj
		lea	eax, [edi+edi*2]
		cmp	edi, 10h
		mov	eax, dword_10024308[eax*4]
		mov	[ebx+8], eax
		sbb	eax, eax
		pop	edi
		pop	esi
		and	eax, 0FFFFFFA7h
		pop	ebp
		add	eax, 59h
		pop	ebx
		retn
sub_10007480	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10007520	proc near		; CODE XREF: sub_100076F0+17Cp

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		push	ebx
		xor	ebx, ebx
		cmp	[eax], bl
		jz	short loc_10007568
		push	ebp
		mov	ebp, [esp+8+arg_4]
		push	esi
		push	edi
		mov	esi, eax
		sub	ebp, eax

loc_10007536:				; CODE XREF: sub_10007520+3Fj
		cmp	byte ptr [esi+ebp], 0
		jz	short loc_10007561
		movsx	eax, byte ptr [esi]
		push	eax		; C
		call	ds:toupper
		movsx	ecx, byte ptr [esi+ebp]
		mov	edi, eax
		push	ecx		; C
		call	ds:toupper
		add	esp, 8
		cmp	edi, eax
		jnz	short loc_10007561
		inc	esi
		inc	ebx
		cmp	byte ptr [esi],	0
		jnz	short loc_10007536

loc_10007561:				; CODE XREF: sub_10007520+1Aj
					; sub_10007520+38j
		mov	eax, [esp+10h+arg_0]
		pop	edi
		pop	esi
		pop	ebp

loc_10007568:				; CODE XREF: sub_10007520+9j
		cmp	byte ptr [ebx+eax], 0
		jnz	short loc_10007584
		mov	eax, [esp+4+arg_4]
		mov	al, [ebx+eax]
		test	al, al
		jz	short loc_1000757D
		cmp	al, 3Bh
		jnz	short loc_10007584

loc_1000757D:				; CODE XREF: sub_10007520+57j
		mov	eax, 1
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_10007584:				; CODE XREF: sub_10007520+4Cj
					; sub_10007520+5Bj
		xor	eax, eax
		pop	ebx
		retn
sub_10007520	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10007590(int,	int, int, int, int, char *Str)
sub_10007590	proc near		; CODE XREF: sub_100076F0+19Bp

var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
Str		= dword	ptr  18h

		sub	esp, 14h
		push	ebx
		push	ebp
		push	esi
		push	edi
		lea	eax, [esp+24h+var_10]
		push	eax		; int
		lea	eax, [esp+28h+var_8]
		push	eax		; int
		lea	eax, [esp+2Ch+var_14]
		push	eax		; int
		lea	eax, [esp+30h+var_4]
		push	eax		; int
		push	[esp+34h+Str]	; Str
		call	sub_10007BB0
		mov	ebx, [esp+38h+var_8]
		mov	ebp, eax
		xor	eax, eax
		mov	[esp+38h+var_4], ebp
		add	esp, 14h
		mov	[esp+24h+var_C], eax
		cmp	[esp+24h+arg_C], eax
		jle	loc_10007650

loc_100075D1:				; CODE XREF: sub_10007590+BAj
		mov	ecx, [esp+24h+arg_8]
		xor	esi, esi
		mov	ebp, [ecx+eax*8]
		add	ebp, [esp+24h+arg_0]
		mov	edi, [ecx+eax*8+4]
		cmp	[esp+24h+var_10], esi
		jle	short loc_10007614
		jmp	short loc_100075F0
; ---------------------------------------------------------------------------
		align 10h

loc_100075F0:				; CODE XREF: sub_10007590+58j
					; sub_10007590+82j
		mov	eax, [ebx+esi*8]
		add	eax, [esp+24h+Str]
		cmp	edi, [ebx+esi*8+4]
		jnz	short loc_1000760D
		push	edi		; MaxCount
		push	eax		; Str
		push	ebp		; Str1
		call	ds:_strnicmp
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_1000763D

loc_1000760D:				; CODE XREF: sub_10007590+6Bj
		inc	esi
		cmp	esi, [esp+24h+var_10]
		jl	short loc_100075F0

loc_10007614:				; CODE XREF: sub_10007590+56j
		test	ebx, ebx
		jz	short loc_10007621
		push	ebx
		call	ldap_x_free
		add	esp, 4

loc_10007621:				; CODE XREF: sub_10007590+86j
		mov	eax, [esp+24h+var_14]
		test	eax, eax
		jz	short loc_10007632
		push	eax
		call	ldap_x_free
		add	esp, 4

loc_10007632:				; CODE XREF: sub_10007590+97j
		pop	edi
		pop	esi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		add	esp, 14h
		retn
; ---------------------------------------------------------------------------

loc_1000763D:				; CODE XREF: sub_10007590+7Bj
		mov	eax, [esp+24h+var_C]
		inc	eax
		mov	[esp+24h+var_C], eax
		cmp	eax, [esp+24h+arg_C]
		jl	short loc_100075D1
		mov	ebp, [esp+24h+var_4]

loc_10007650:				; CODE XREF: sub_10007590+3Bj
		test	ebp, ebp
		jns	short loc_10007681
		test	ebx, ebx
		jz	short loc_10007661
		push	ebx
		call	ldap_x_free
		add	esp, 4

loc_10007661:				; CODE XREF: sub_10007590+C6j
		mov	eax, [esp+24h+var_14]
		test	eax, eax
		jz	short loc_10007672
		push	eax
		call	ldap_x_free
		add	esp, 4

loc_10007672:				; CODE XREF: sub_10007590+D7j
		inc	ebp
		neg	ebp
		pop	edi
		sbb	ebp, ebp
		pop	esi
		mov	eax, ebp
		pop	ebp
		pop	ebx
		add	esp, 14h
		retn
; ---------------------------------------------------------------------------

loc_10007681:				; CODE XREF: sub_10007590+C2j
		mov	eax, [esp+24h+arg_10]
		xor	ebx, ebx
		cmp	[eax], bl
		jz	short loc_100076C2
		mov	ebp, [esp+24h+var_14]
		mov	edi, eax
		sub	ebp, eax

loc_10007693:				; CODE XREF: sub_10007590+12Cj
		mov	al, [edi+ebp]
		test	al, al
		jz	short loc_100076BE
		movsx	eax, al
		push	eax		; C
		call	ds:toupper
		mov	esi, eax
		movsx	eax, byte ptr [edi]
		push	eax		; C
		call	ds:toupper
		add	esp, 8
		cmp	eax, esi
		jnz	short loc_100076BE
		inc	edi
		inc	ebx
		cmp	byte ptr [edi],	0
		jnz	short loc_10007693

loc_100076BE:				; CODE XREF: sub_10007590+108j
					; sub_10007590+125j
		mov	eax, [esp+24h+arg_10]

loc_100076C2:				; CODE XREF: sub_10007590+F9j
		mov	ecx, [esp+24h+var_14]
		mov	cl, [ebx+ecx]
		test	cl, cl
		jz	short loc_100076D2
		cmp	cl, 3Bh
		jnz	short loc_100076DD

loc_100076D2:				; CODE XREF: sub_10007590+13Bj
		mov	al, [ebx+eax]
		test	al, al
		jz	short loc_100076E0
		cmp	al, 2Dh
		jz	short loc_100076E0

loc_100076DD:				; CODE XREF: sub_10007590+140j
		or	ebx, 0FFFFFFFFh

loc_100076E0:				; CODE XREF: sub_10007590+147j
					; sub_10007590+14Bj
		pop	edi
		pop	esi
		pop	ebp
		mov	eax, ebx
		pop	ebx
		add	esp, 14h
		retn
sub_10007590	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_100076F0(int,	int, void *Src,	int, int)
sub_100076F0	proc near		; CODE XREF: ldap_get_lang_values+12p
					; ldap_get_lang_values_len+12p

Str		= dword	ptr -15Ch
var_158		= dword	ptr -158h
var_154		= dword	ptr -154h
Size		= dword	ptr -150h
var_14C		= dword	ptr -14Ch
var_148		= dword	ptr -148h
var_144		= dword	ptr -144h
var_140		= dword	ptr -140h
var_13C		= dword	ptr -13Ch
var_138		= dword	ptr -138h
var_134		= dword	ptr -134h
Dst		= dword	ptr -130h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
Src		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		sub	esp, 15Ch
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+15Ch+var_4], eax
		mov	ecx, [esp+15Ch+arg_0]
		mov	eax, [esp+15Ch+arg_10]
		push	ebx
		push	ebp
		mov	ebp, [esp+164h+Src]
		xor	ebx, ebx
		mov	[esp+164h+var_144], ecx
		mov	[esp+164h+var_140], eax
		mov	[esp+164h+Str],	0
		mov	[esp+164h+var_158], 0
		mov	[esp+164h+var_13C], 0
		mov	[esp+164h+var_154], 0
		mov	[esp+164h+var_148], 1
		push	esi
		mov	esi, [esp+168h+arg_4]
		push	edi
		mov	edi, [esp+16Ch+arg_C]
		mov	[esp+16Ch+var_134], edi
		test	ecx, ecx
		jz	loc_10007979
		test	ebp, ebp
		jz	loc_1000796D
		test	esi, esi
		jz	loc_1000796D
		cmp	dword ptr [esi+4], 64h
		jnz	loc_1000796D
		lea	eax, [esp+16Ch+var_138]
		push	eax		; int
		lea	eax, [esp+170h+var_14C]
		push	eax		; int
		lea	eax, [esp+174h+var_154]
		push	eax		; int
		lea	eax, [esp+178h+Size]
		push	eax		; int
		push	ebp		; Str
		call	sub_10007BB0
		add	esp, 14h
		test	eax, eax
		jns	short loc_100077E7
		mov	eax, [esp+16Ch+var_14C]
		test	eax, eax
		jz	short loc_100077B5
		push	eax
		call	ldap_x_free
		add	esp, 4

loc_100077B5:				; CODE XREF: sub_100076F0+BAj
		push	[esp+16Ch+var_140] ; int
		push	ebp		; Str1
		push	esi		; int
		push	[esp+178h+var_144] ; int
		call	sub_100079A0
		add	esp, 10h
		mov	[esp+16Ch+var_158], eax
		test	edi, edi
		jz	loc_1000797B
		push	ebp
		call	sub_1000BAB0
		mov	[edi], eax
		add	esp, 4
		mov	eax, [esp+16Ch+var_158]
		jmp	loc_1000797B
; ---------------------------------------------------------------------------

loc_100077E7:				; CODE XREF: sub_100076F0+B2j
		mov	edi, [esp+16Ch+Size]
		lea	eax, [edi+1]
		push	eax
		call	ldap_x_malloc
		push	edi		; Size
		push	ebp		; Src
		push	eax		; Dst
		mov	[esp+17Ch+Size], eax
		call	memcpy
		mov	eax, [esp+17Ch+Size]
		mov	ecx, 4Bh
		add	esp, 10h
		mov	[edi+eax], bl
		lea	edi, [esp+16Ch+Dst]
		mov	esi, [esi+8]
		rep movsd
		mov	edi, eax

loc_1000781A:				; CODE XREF: sub_100076F0+1F7j
					; sub_100076F0+20Aj
		mov	esi, [esp+16Ch+var_154]
		mov	edi, edi

loc_10007820:				; CODE XREF: sub_100076F0+225j
		mov	eax, [esp+16Ch+Str]
		test	eax, eax
		jz	short loc_10007831
		push	eax
		call	ldap_x_free
		add	esp, 4

loc_10007831:				; CODE XREF: sub_100076F0+136j
		cmp	[esp+16Ch+var_148], 0
		lea	eax, [esp+16Ch+Str]
		push	eax
		lea	eax, [esp+170h+Dst]
		jz	short loc_10007850
		mov	[esp+170h+var_148], 0
		push	offset aXA	; "{x{{a"
		jmp	short loc_10007855
; ---------------------------------------------------------------------------

loc_10007850:				; CODE XREF: sub_100076F0+14Fj
		push	offset aA	; "{a"

loc_10007855:				; CODE XREF: sub_100076F0+15Ej
		push	eax		; Dst
		call	ber_scanf
		add	esp, 0Ch
		cmp	eax, 0FFFFFFFFh
		jz	loc_1000791A
		push	[esp+16Ch+Str]
		push	edi
		call	sub_10007520
		add	esp, 8
		test	eax, eax
		jz	loc_10007903
		push	[esp+16Ch+Str]	; Str
		push	esi		; int
		push	[esp+174h+var_138] ; int
		push	[esp+178h+var_14C] ; int
		push	edi		; int
		push	ebp		; int
		call	sub_10007590
		mov	esi, eax
		add	esp, 18h
		cmp	esi, [esp+16Ch+var_13C]
		jle	short loc_100078FF
		mov	ecx, [esp+16Ch+var_158]
		test	ecx, ecx
		jz	short loc_100078AC
		push	ecx
		call	ldap_x_free
		add	esp, 4

loc_100078AC:				; CODE XREF: sub_100076F0+1B1j
		mov	[esp+16Ch+var_13C], esi
		test	ebx, ebx
		jz	short loc_100078BD
		push	ebx
		call	ldap_x_free
		add	esp, 4

loc_100078BD:				; CODE XREF: sub_100076F0+1C2j
		cmp	[esp+16Ch+var_140], 0
		lea	eax, [esp+16Ch+var_158]
		mov	ebx, [esp+16Ch+Str]
		push	eax
		mov	[esp+170h+Str],	0
		lea	eax, [esp+170h+Dst]
		jz	short loc_100078EC
		push	offset aV_0	; "[V]}"
		push	eax		; Dst
		call	ber_scanf
		add	esp, 0Ch
		jmp	loc_1000781A
; ---------------------------------------------------------------------------

loc_100078EC:				; CODE XREF: sub_100076F0+1E7j
		push	offset aV_1	; "[v]}"
		push	eax		; Dst
		call	ber_scanf
		add	esp, 0Ch
		jmp	loc_1000781A
; ---------------------------------------------------------------------------

loc_100078FF:				; CODE XREF: sub_100076F0+1A9j
		mov	esi, [esp+16Ch+var_154]

loc_10007903:				; CODE XREF: sub_100076F0+186j
		lea	eax, [esp+16Ch+Dst]
		push	offset asc_1001FC18 ; "x}"
		push	eax		; Dst
		call	ber_scanf
		add	esp, 8
		jmp	loc_10007820
; ---------------------------------------------------------------------------

loc_1000791A:				; CODE XREF: sub_100076F0+171j
		push	esi
		call	ldap_x_free
		push	edi
		call	ldap_x_free
		push	[esp+174h+var_14C]
		call	ldap_x_free
		mov	eax, [esp+178h+var_134]
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_1000793E
		mov	[eax], ebx
		jmp	short loc_1000794B
; ---------------------------------------------------------------------------

loc_1000793E:				; CODE XREF: sub_100076F0+248j
		test	ebx, ebx
		jz	short loc_1000794B
		push	ebx
		call	ldap_x_free
		add	esp, 4

loc_1000794B:				; CODE XREF: sub_100076F0+24Cj
					; sub_100076F0+250j
		xor	eax, eax
		mov	ecx, 54h
		cmp	[esp+16Ch+var_158], eax
		push	0
		push	0
		cmovz	eax, ecx
		push	eax
		push	[esp+178h+var_144]
		call	ldap_set_lderrno
		mov	eax, [esp+16Ch+var_158]
		jmp	short loc_1000797B
; ---------------------------------------------------------------------------

loc_1000796D:				; CODE XREF: sub_100076F0+7Bj
					; sub_100076F0+83j ...
		push	0
		push	0
		push	59h
		push	ecx
		call	ldap_set_lderrno

loc_10007979:				; CODE XREF: sub_100076F0+73j
		xor	eax, eax

loc_1000797B:				; CODE XREF: sub_100076F0+DDj
					; sub_100076F0+F2j ...
		mov	ecx, [esp+16Ch+var_4]
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 15Ch
		retn
sub_100076F0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_100079A0(int,	int, char *Str1, int)
sub_100079A0	proc near		; CODE XREF: sub_100076F0+CFp
					; ldap_get_values+Ep ...

Str2		= dword	ptr -138h
var_134		= dword	ptr -134h
Dst		= dword	ptr -130h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
Str1		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 138h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+138h+var_4], eax
		push	ebx
		mov	ebx, [esp+13Ch+Str1]
		push	ebp
		mov	ebp, [esp+140h+arg_0]
		push	esi
		mov	esi, [esp+144h+arg_4]
		test	ebp, ebp
		jz	loc_10007B0D
		test	ebx, ebx
		jz	loc_10007B01
		test	esi, esi
		jz	loc_10007B01
		cmp	dword ptr [esi+4], 64h
		jnz	loc_10007B01
		mov	esi, [esi+8]
		lea	eax, [esp+144h+Str2]
		push	edi
		push	eax
		lea	eax, [esp+14Ch+Dst]
		mov	ecx, 4Bh
		lea	edi, [esp+14Ch+Dst]
		push	offset aXA	; "{x{{a"
		rep movsd
		push	eax		; Dst
		call	ber_scanf
		add	esp, 0Ch
		cmp	eax, 0FFFFFFFFh
		jz	short loc_10007A87
		push	[esp+148h+Str2]	; Str2
		mov	edi, ds:_stricmp
		push	ebx		; Str1
		call	edi ; _stricmp
		push	[esp+150h+Str2]
		mov	esi, eax
		call	ldap_x_free
		add	esp, 0Ch
		test	esi, esi
		jz	short loc_10007AB6
		lea	eax, [esp+148h+Str2]
		push	eax
		lea	eax, [esp+14Ch+Dst]
		push	offset aXA_0	; "x}{a"
		push	eax		; Dst
		call	ber_scanf
		add	esp, 0Ch
		cmp	eax, 0FFFFFFFFh
		jz	short loc_10007A87

loc_10007A54:				; CODE XREF: sub_100079A0+E5j
		push	[esp+148h+Str2]	; Str2
		push	ebx		; Str1
		call	edi ; _stricmp
		add	esp, 8
		push	[esp+148h+Str2]
		test	eax, eax
		jz	short loc_10007AAE
		call	ldap_x_free
		lea	eax, [esp+14Ch+Str2]
		push	eax
		lea	eax, [esp+150h+Dst]
		push	offset aXA_0	; "x}{a"
		push	eax		; Dst
		call	ber_scanf
		add	esp, 10h
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_10007A54

loc_10007A87:				; CODE XREF: sub_100079A0+77j
					; sub_100079A0+B2j
		push	0
		push	0
		push	54h
		push	ebp
		call	ldap_set_lderrno
		xor	eax, eax

loc_10007A95:				; CODE XREF: sub_100079A0+15Fj
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		mov	ecx, [esp+138h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 138h
		retn
; ---------------------------------------------------------------------------

loc_10007AAE:				; CODE XREF: sub_100079A0+C4j
		call	ldap_x_free
		add	esp, 4

loc_10007AB6:				; CODE XREF: sub_100079A0+96j
		cmp	[esp+148h+arg_C], 0
		lea	eax, [esp+148h+var_134]
		push	eax
		lea	eax, [esp+14Ch+Dst]
		jz	short loc_10007AD0
		push	offset aV_2	; "[V]"
		jmp	short loc_10007AD5
; ---------------------------------------------------------------------------

loc_10007AD0:				; CODE XREF: sub_100079A0+127j
		push	offset aV_3	; "[v]"

loc_10007AD5:				; CODE XREF: sub_100079A0+12Ej
		push	eax		; Dst
		call	ber_scanf
		add	esp, 0Ch
		xor	esi, esi
		cmp	eax, 0FFFFFFFFh
		mov	ecx, 54h
		cmovz	esi, ecx
		push	0
		push	0
		push	esi
		push	ebp
		call	ldap_set_lderrno
		xor	eax, eax
		test	esi, esi
		cmovz	eax, [esp+148h+var_134]
		jmp	short loc_10007A95
; ---------------------------------------------------------------------------

loc_10007B01:				; CODE XREF: sub_100079A0+36j
					; sub_100079A0+3Ej ...
		push	0
		push	0
		push	59h
		push	ebp
		call	ldap_set_lderrno

loc_10007B0D:				; CODE XREF: sub_100079A0+2Ej
		mov	ecx, [esp+144h+var_4]
		xor	eax, eax
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 138h
		retn
sub_100079A0	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 495. ldap_get_lang_values

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	ldap_get_lang_values(int, int, void *Src, int)
		public ldap_get_lang_values
ldap_get_lang_values proc near		; DATA XREF: .rdata:off_10020938o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
Src		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	0		; int
		push	[esp+4+arg_C]	; int
		push	[esp+8+Src]	; Src
		push	[esp+0Ch+arg_4]	; int
		push	[esp+10h+arg_0]	; int
		call	sub_100076F0
		add	esp, 14h
		retn	10h
ldap_get_lang_values endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 496. ldap_get_lang_values_len

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	ldap_get_lang_values_len(int, int, void	*Src, int)
		public ldap_get_lang_values_len
ldap_get_lang_values_len proc near	; DATA XREF: .rdata:off_10020938o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
Src		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	1		; int
		push	[esp+4+arg_C]	; int
		push	[esp+8+Src]	; Src
		push	[esp+0Ch+arg_4]	; int
		push	[esp+10h+arg_0]	; int
		call	sub_100076F0
		add	esp, 14h
		retn	10h
ldap_get_lang_values_len endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  34. ldap_get_values

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	ldap_get_values(int, int, char *Str1)
		public ldap_get_values
ldap_get_values	proc near		; CODE XREF: ldap_multisort_entries+F7p
					; sub_10015D40+3F3p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
Str1		= dword	ptr  0Ch

		push	0		; int
		push	[esp+4+Str1]	; Str1
		push	[esp+8+arg_4]	; int
		push	[esp+0Ch+arg_0]	; int
		call	sub_100079A0
		add	esp, 10h
		retn	0Ch
ldap_get_values	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  35. ldap_get_values_len

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	ldap_get_values_len(int, int, char *Str1)
		public ldap_get_values_len
ldap_get_values_len proc near		; CODE XREF: sub_10001E00+B8p
					; DATA XREF: .rdata:off_10020938o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
Str1		= dword	ptr  0Ch

		push	1		; int
		push	[esp+4+Str1]	; Str1
		push	[esp+8+arg_4]	; int
		push	[esp+0Ch+arg_0]	; int
		call	sub_100079A0
		add	esp, 10h
		retn	0Ch
ldap_get_values_len endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10007BB0(char	*Str, int, int,	int, int)
sub_10007BB0	proc near		; CODE XREF: sub_10007590+1Fp
					; sub_100076F0+A8p

var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
Str1		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
Str		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		sub	esp, 14h
		mov	eax, [esp+14h+arg_C]
		mov	edx, [esp+14h+Str]
		push	ebx
		push	ebp
		push	esi
		mov	esi, [esp+20h+arg_4]
		mov	ebp, edx
		push	edi
		xor	edi, edi
		or	ebx, 0FFFFFFFFh
		mov	[eax], edi
		mov	eax, [esp+24h+arg_8]
		lea	ecx, [ebp+1]
		mov	[esp+24h+var_10], edi
		mov	[esp+24h+var_14], ebx
		mov	[eax], edi
		mov	eax, [esp+24h+arg_10]
		mov	[esi], edi
		mov	[eax], edi

loc_10007BE5:				; CODE XREF: sub_10007BB0+3Bj
		mov	al, [ebp+0]
		inc	ebp
		test	al, al
		jnz	short loc_10007BE5
		sub	ebp, ecx
		push	3Bh		; Val
		push	edx		; Str
		mov	[esp+2Ch+var_4], ebp
		call	ds:strchr
		mov	edx, [esp+2Ch+Str]
		mov	ecx, eax
		add	esp, 8
		test	ecx, ecx
		jz	short loc_10007C13
		sub	ecx, edx
		inc	ecx
		lea	eax, [ecx-1]
		mov	[esi], eax
		jmp	short loc_10007C17
; ---------------------------------------------------------------------------

loc_10007C13:				; CODE XREF: sub_10007BB0+57j
		mov	ecx, ebp
		mov	[esi], ebp

loc_10007C17:				; CODE XREF: sub_10007BB0+61j
		lea	eax, [ecx+edx]
		mov	esi, eax
		mov	[esp+24h+Str1],	eax
		test	esi, esi
		jz	loc_10007D91

loc_10007C28:				; CODE XREF: sub_10007BB0+BDj
		cmp	byte ptr [esi],	0
		jz	short loc_10007C7E
		push	3Bh		; Val
		push	esi		; Str
		mov	ebx, esi
		call	ds:strchr
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		jz	short loc_10007C42
		inc	esi

loc_10007C42:				; CODE XREF: sub_10007BB0+8Fj
		push	5		; MaxCount
		push	offset aLang	; "lang-"
		push	ebx		; Str1
		call	ds:_strnicmp
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_10007C66
		cmp	[esp+24h+var_14], 0FFFFFFFFh
		jnz	short loc_10007C71
		mov	ebx, edi
		mov	[esp+24h+var_14], ebx
		jmp	short loc_10007C6B
; ---------------------------------------------------------------------------

loc_10007C66:				; CODE XREF: sub_10007BB0+A5j
		mov	ebx, [esp+24h+var_14]
		inc	edi

loc_10007C6B:				; CODE XREF: sub_10007BB0+B4j
		test	esi, esi
		jnz	short loc_10007C28
		jmp	short loc_10007C82
; ---------------------------------------------------------------------------

loc_10007C71:				; CODE XREF: sub_10007BB0+ACj
		pop	edi
		pop	esi
		pop	ebp
		mov	eax, 0FFFFFFFEh
		pop	ebx
		add	esp, 14h
		retn
; ---------------------------------------------------------------------------

loc_10007C7E:				; CODE XREF: sub_10007BB0+7Bj
		mov	ebx, [esp+24h+var_14]

loc_10007C82:				; CODE XREF: sub_10007BB0+BFj
		test	ebx, ebx
		js	loc_10007D91
		test	edi, edi
		jle	short loc_10007CAB
		lea	esi, ds:0[edi*8]
		push	esi
		call	ldap_x_malloc
		push	esi		; Size
		push	0		; Val
		push	eax		; Dst
		mov	[esp+34h+var_10], eax
		call	memset
		add	esp, 10h

loc_10007CAB:				; CODE XREF: sub_10007BB0+DCj
		mov	ebx, [esp+24h+Str1]
		xor	ecx, ecx
		mov	[esp+24h+arg_4], ecx
		test	ebx, ebx
		jz	loc_10007D76
		lea	ecx, [ecx+0]

loc_10007CC0:				; CODE XREF: sub_10007BB0+1C0j
		cmp	byte ptr [ebx],	0
		jz	loc_10007D76
		push	3Bh		; Val
		push	ebx		; Str
		mov	esi, ebx
		call	ds:strchr
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		jz	short loc_10007CE4
		mov	edi, ebx
		sub	edi, esi
		inc	ebx
		jmp	short loc_10007CEE
; ---------------------------------------------------------------------------

loc_10007CE4:				; CODE XREF: sub_10007BB0+12Bj
		mov	ebx, [esp+24h+Str]
		add	ebx, ebp
		mov	edi, ebx
		sub	edi, esi

loc_10007CEE:				; CODE XREF: sub_10007BB0+132j
		push	5		; MaxCount
		push	offset aLang	; "lang-"
		push	esi		; Str1
		mov	[esp+30h+var_8], ebx
		call	ds:_strnicmp
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_10007D56
		lea	eax, [edi+1]
		push	eax
		call	ldap_x_malloc
		mov	ecx, [esp+28h+arg_8]
		add	esp, 4
		xor	esi, esi
		mov	[ecx], eax
		test	edi, edi
		jle	short loc_10007D46
		mov	ebx, [esp+24h+Str1]
		mov	ebp, ecx

loc_10007D25:				; CODE XREF: sub_10007BB0+18Cj
		movsx	eax, byte ptr [ebx+esi]
		push	eax		; C
		call	ds:toupper
		mov	ecx, [ebp+0]
		add	esp, 4
		mov	[esi+ecx], al
		inc	esi
		cmp	esi, edi
		jl	short loc_10007D25
		mov	ebx, [esp+24h+var_8]
		mov	ebp, [esp+24h+var_4]

loc_10007D46:				; CODE XREF: sub_10007BB0+16Dj
		mov	eax, [esp+24h+arg_8]
		mov	ecx, [esp+24h+arg_4]
		mov	eax, [eax]
		mov	byte ptr [edi+eax], 0
		jmp	short loc_10007D6E
; ---------------------------------------------------------------------------

loc_10007D56:				; CODE XREF: sub_10007BB0+155j
		mov	ecx, [esp+24h+arg_4]
		mov	eax, [esp+24h+var_10]
		sub	esi, [esp+24h+Str]
		mov	[eax+ecx*8], esi
		mov	[eax+ecx*8+4], edi
		inc	ecx
		mov	[esp+24h+arg_4], ecx

loc_10007D6E:				; CODE XREF: sub_10007BB0+1A4j
		test	ebx, ebx
		jnz	loc_10007CC0

loc_10007D76:				; CODE XREF: sub_10007BB0+107j
					; sub_10007BB0+113j
		mov	edx, [esp+24h+arg_C]
		mov	eax, [esp+24h+var_10]
		pop	edi
		pop	esi
		mov	[edx], eax
		mov	eax, [esp+1Ch+arg_10]
		pop	ebp
		pop	ebx
		mov	[eax], ecx
		mov	eax, [esp+14h+var_14]
		add	esp, 14h
		retn
; ---------------------------------------------------------------------------

loc_10007D91:				; CODE XREF: sub_10007BB0+72j
					; sub_10007BB0+D4j
		pop	edi
		pop	esi
		pop	ebp
		mov	eax, ebx
		pop	ebx
		add	esp, 14h
		retn
sub_10007BB0	endp

; ---------------------------------------------------------------------------
		align 10h

loc_10007DA0:				; DATA XREF: ldap_memcache_init+2DFo
		mov	eax, [esp+4]
		mov	ecx, [eax]
		test	ecx, ecx
		jz	short locret_10007DC2
		lea	ebx, [ebx+0]

loc_10007DB0:				; CODE XREF: .text:10007DC0j
		mov	eax, [eax]
		add	eax, 38h
		mov	dword ptr [ecx+38h], 0
		mov	ecx, [eax]
		test	ecx, ecx
		jnz	short loc_10007DB0

locret_10007DC2:			; CODE XREF: .text:10007DA8j
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_10007DD0:				; DATA XREF: ldap_memcache_init+2C1o
		mov	eax, [esp+8]
		mov	ecx, [eax]
		mov	eax, [esp+4]
		test	eax, eax
		jz	short loc_10007DEC
		mov	edi, edi

loc_10007DE0:				; CODE XREF: .text:10007DEAj
		cmp	[eax+4], ecx
		jz	short loc_10007DFC
		mov	eax, [eax+38h]
		test	eax, eax
		jnz	short loc_10007DE0

loc_10007DEC:				; CODE XREF: .text:10007DDCj
		mov	eax, [esp+0Ch]
		mov	dword ptr [eax], 0
		mov	eax, 20h
		retn
; ---------------------------------------------------------------------------

loc_10007DFC:				; CODE XREF: .text:10007DE3j
		mov	ecx, [esp+0Ch]
		mov	[ecx], eax
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_10007E10:				; DATA XREF: ldap_memcache_init+2ADo
		mov	eax, [esp+8]
		xor	edx, edx
		mov	eax, [eax]
		div	dword ptr [esp+4]
		mov	eax, edx
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_10007E20:				; DATA XREF: ldap_memcache_init+2B7o
		mov	eax, [esp+8]
		mov	edx, [esp+4]
		push	esi
		mov	ecx, [eax]
		mov	esi, [edx]
		mov	eax, esi
		test	eax, eax
		jz	short loc_10007E3F

loc_10007E33:				; CODE XREF: .text:10007E3Dj
		cmp	[eax+4], ecx
		jz	short loc_10007E4C
		mov	eax, [eax+38h]
		test	eax, eax
		jnz	short loc_10007E33

loc_10007E3F:				; CODE XREF: .text:10007E31j
		mov	eax, [esp+10h]
		mov	[eax+38h], esi
		mov	[edx], eax
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10007E4C:				; CODE XREF: .text:10007E36j
		mov	eax, 44h
		pop	esi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_10007E60:				; DATA XREF: ldap_memcache_init+2D5o
		mov	eax, [esp+8]
		xor	edx, edx
		push	esi
		mov	esi, [esp+8]
		mov	eax, [eax]
		mov	ecx, [esi]
		test	ecx, ecx
		jz	short loc_10007E81

loc_10007E73:				; CODE XREF: .text:10007E7Fj
		cmp	[ecx+4], eax
		jz	short loc_10007E96
		mov	edx, ecx
		mov	ecx, [ecx+38h]
		test	ecx, ecx
		jnz	short loc_10007E73

loc_10007E81:				; CODE XREF: .text:10007E71j
		mov	eax, [esp+10h]
		test	eax, eax
		jz	short loc_10007E8F
		mov	dword ptr [eax], 0

loc_10007E8F:				; CODE XREF: .text:10007E87j
		mov	eax, 20h
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10007E96:				; CODE XREF: .text:10007E76j
		mov	eax, [esp+10h]
		test	eax, eax
		jz	short loc_10007EA0
		mov	[eax], ecx

loc_10007EA0:				; CODE XREF: .text:10007E9Cj
		mov	eax, [ecx+38h]
		test	edx, edx
		jz	short loc_10007EB5
		mov	[edx+38h], eax
		xor	eax, eax
		mov	dword ptr [ecx+38h], 0
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10007EB5:				; CODE XREF: .text:10007EA5j
		mov	[esi], eax
		xor	eax, eax
		mov	dword ptr [ecx+38h], 0
		pop	esi
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10007ED0	proc near		; CODE XREF: ldap_memcache_init+25Cp

arg_0		= dword	ptr  4

		movd	xmm0, [esp+arg_0]
		cvtdq2pd xmm0, xmm0
		push	ebx
		push	esi
		divsd	xmm0, ds:qword_1001FC50
		divsd	xmm0, ds:qword_1001FC48
		cvttsd2si ebx, xmm0
		test	bl, 1
		jnz	short loc_10007EF6
		inc	ebx

loc_10007EF6:				; CODE XREF: sub_10007ED0+23j
		mov	eax, ebx
		mov	ecx, 3
		cdq
		sub	eax, edx
		mov	esi, eax
		sar	esi, 1
		cmp	esi, ecx
		jle	short loc_10007F25

loc_10007F08:				; CODE XREF: sub_10007ED0+53j
		mov	eax, ebx
		cdq
		idiv	ecx
		test	edx, edx
		jnz	short loc_10007F20
		add	ebx, 2
		lea	ecx, [edx+3]
		mov	eax, ebx
		cdq
		sub	eax, edx
		mov	esi, eax
		sar	esi, 1

loc_10007F20:				; CODE XREF: sub_10007ED0+3Fj
		inc	ecx
		cmp	ecx, esi
		jl	short loc_10007F08

loc_10007F25:				; CODE XREF: sub_10007ED0+36j
		pop	esi
		mov	eax, ebx
		pop	ebx
		retn
sub_10007ED0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10007F30	proc near		; CODE XREF: sub_10009610+1A1p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi
		mov	esi, [esp+4+arg_0]
		push	[esp+4+arg_4]
		push	dword ptr [esi+4]
		mov	eax, [esi+8]
		call	eax
		mov	ecx, eax
		add	esp, 8
		mov	eax, [esp+4+arg_8]
		mov	dword ptr [eax], 0
		test	ecx, ecx
		js	short loc_10007F6D
		cmp	ecx, [esi+4]
		jge	short loc_10007F6D
		push	eax
		mov	eax, [esi]
		push	[esp+8+arg_4]
		push	dword ptr [eax+ecx*4]
		mov	eax, [esi+10h]
		call	eax
		add	esp, 0Ch
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10007F6D:				; CODE XREF: sub_10007F30+22j
					; sub_10007F30+27j
		mov	eax, 1
		pop	esi
		retn
sub_10007F30	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10007F80	proc near		; CODE XREF: sub_10009610+13Cp
					; sub_10009610+7D4p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi
		mov	esi, [esp+4+arg_0]
		push	[esp+4+arg_4]
		push	dword ptr [esi+4]
		mov	eax, [esi+8]
		call	eax
		mov	ecx, eax
		add	esp, 8
		test	ecx, ecx
		js	short loc_10007FB7
		cmp	ecx, [esi+4]
		jge	short loc_10007FB7
		mov	eax, [esi]
		push	[esp+4+arg_8]
		push	[esp+8+arg_4]
		lea	eax, [eax+ecx*4]
		push	eax
		mov	eax, [esi+0Ch]
		call	eax
		add	esp, 0Ch
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10007FB7:				; CODE XREF: sub_10007F80+18j
					; sub_10007F80+1Dj
		mov	eax, 1
		pop	esi
		retn
sub_10007F80	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10007FC0	proc near		; CODE XREF: sub_10009610+200p
					; sub_10009610+25Cp ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi
		mov	esi, [esp+4+arg_0]
		push	[esp+4+arg_4]
		push	dword ptr [esi+4]
		mov	eax, [esi+8]
		call	eax
		mov	ecx, eax
		add	esp, 8
		mov	eax, [esp+4+arg_8]
		test	eax, eax
		jz	short loc_10007FE4
		mov	dword ptr [eax], 0

loc_10007FE4:				; CODE XREF: sub_10007FC0+1Cj
		test	ecx, ecx
		js	short loc_10008002
		cmp	ecx, [esi+4]
		jge	short loc_10008002
		push	eax
		mov	eax, [esi]
		push	[esp+8+arg_4]
		lea	eax, [eax+ecx*4]
		push	eax
		mov	eax, [esi+18h]
		call	eax
		add	esp, 0Ch
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10008002:				; CODE XREF: sub_10007FC0+26j
					; sub_10007FC0+2Bj
		mov	eax, 1
		pop	esi
		retn
sub_10007FC0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10008010	proc near		; CODE XREF: sub_10009610+2A5p
					; sub_10009610+33Ap

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		push	edi
		mov	edi, [esp+8+arg_0]
		xor	esi, esi
		cmp	[edi+4], esi
		jle	short loc_10008038
		push	ebx
		mov	ebx, [esp+0Ch+arg_4]

loc_10008022:				; CODE XREF: sub_10008010+25j
		mov	eax, [edi]
		push	ebx
		lea	eax, [eax+esi*4]
		push	eax
		mov	eax, [edi+1Ch]
		call	eax
		inc	esi
		add	esp, 8
		cmp	esi, [edi+4]
		jl	short loc_10008022
		pop	ebx

loc_10008038:				; CODE XREF: sub_10008010+Bj
		pop	edi
		xor	eax, eax
		pop	esi
		retn
sub_10008010	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10008040	proc near		; CODE XREF: ldap_abandon_ext+F8p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_0]
		push	edi
		test	esi, esi
		jz	loc_100081B8
		mov	edi, [esp+8+arg_4]
		test	edi, edi
		js	loc_100081B8
		mov	eax, [esi+0C0h]
		test	eax, eax
		jz	short loc_100080C0
		mov	ecx, [esi+0DCh]
		test	ecx, ecx
		jz	short loc_100080C0
		mov	edx, [esi+13Ch]
		test	edx, edx
		jz	short loc_100080B8
		call	edx
		cmp	[esi+144h], eax
		jnz	short loc_1000808A
		inc	dword ptr [esi+17Ch]
		jmp	short loc_100080C0
; ---------------------------------------------------------------------------

loc_1000808A:				; CODE XREF: sub_10008040+40j
		mov	eax, [esi+0DCh]
		push	dword ptr [eax+4]
		mov	eax, [esi+0C0h]
		call	eax
		mov	eax, [esi+13Ch]
		add	esp, 4
		call	eax
		mov	[esi+144h], eax
		mov	dword ptr [esi+17Ch], 1
		jmp	short loc_100080C0
; ---------------------------------------------------------------------------

loc_100080B8:				; CODE XREF: sub_10008040+36j
		push	dword ptr [ecx+4]
		call	eax
		add	esp, 4

loc_100080C0:				; CODE XREF: sub_10008040+22j
					; sub_10008040+2Cj ...
		mov	eax, [esi+120h]
		test	eax, eax
		jnz	short loc_10008128
		cmp	[esi+0C0h], eax
		jz	short loc_10008120
		mov	eax, [esi+0DCh]
		test	eax, eax
		jz	short loc_10008120
		mov	ecx, [esi+13Ch]
		test	ecx, ecx
		jz	short loc_10008112
		call	ecx
		cmp	[esi+144h], eax
		jnz	short loc_10008120
		dec	dword ptr [esi+17Ch]
		jnz	short loc_10008120
		mov	dword ptr [esi+144h], 0FFFFFFFFh
		mov	dword ptr [esi+17Ch], 0
		mov	eax, [esi+0DCh]

loc_10008112:				; CODE XREF: sub_10008040+A4j
		push	dword ptr [eax+4]
		mov	eax, [esi+0C4h]
		call	eax
		add	esp, 4

loc_10008120:				; CODE XREF: sub_10008040+90j
					; sub_10008040+9Aj ...
		pop	edi
		mov	eax, 52h
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10008128:				; CODE XREF: sub_10008040+88j
		mov	ecx, [eax+44h]
		test	ecx, ecx
		jz	short loc_10008137
		push	dword ptr [eax+14h]
		call	ecx
		add	esp, 4

loc_10008137:				; CODE XREF: sub_10008040+EDj
		push	edi
		push	esi
		call	sub_1000A5B0
		mov	ecx, [esi+120h]
		add	esp, 8
		mov	edi, eax
		test	ecx, ecx
		jz	short loc_1000815C
		mov	edx, [ecx+48h]
		test	edx, edx
		jz	short loc_1000815C
		push	dword ptr [ecx+14h]
		call	edx
		add	esp, 4

loc_1000815C:				; CODE XREF: sub_10008040+10Bj
					; sub_10008040+112j
		cmp	dword ptr [esi+0C0h], 0
		jz	short loc_100081B3
		mov	eax, [esi+0DCh]
		test	eax, eax
		jz	short loc_100081B3
		mov	ecx, [esi+13Ch]
		test	ecx, ecx
		jz	short loc_100081A5
		call	ecx
		cmp	[esi+144h], eax
		jnz	short loc_100081B3
		dec	dword ptr [esi+17Ch]
		jnz	short loc_100081B3
		mov	dword ptr [esi+144h], 0FFFFFFFFh
		mov	dword ptr [esi+17Ch], 0
		mov	eax, [esi+0DCh]

loc_100081A5:				; CODE XREF: sub_10008040+137j
		push	dword ptr [eax+4]
		mov	eax, [esi+0C4h]
		call	eax
		add	esp, 4

loc_100081B3:				; CODE XREF: sub_10008040+123j
					; sub_10008040+12Dj ...
		mov	eax, edi
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_100081B8:				; CODE XREF: sub_10008040+8j
					; sub_10008040+14j
		pop	edi
		mov	eax, 59h
		pop	esi
		retn
sub_10008040	endp


; =============== S U B	R O U T	I N E =======================================


sub_100081C0	proc near		; CODE XREF: sub_100115C0+90p
					; sub_100115C0+A9p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	esi
		mov	esi, [esp+4+arg_0]
		push	edi
		test	esi, esi
		jz	loc_1000834A
		mov	edi, [esp+8+arg_C]
		test	edi, edi
		jz	loc_1000834A
		mov	eax, [esi+0C0h]
		test	eax, eax
		jz	short loc_10008240
		mov	ecx, [esi+0DCh]
		test	ecx, ecx
		jz	short loc_10008240
		mov	edx, [esi+13Ch]
		test	edx, edx
		jz	short loc_10008238
		call	edx
		cmp	[esi+144h], eax
		jnz	short loc_1000820A
		inc	dword ptr [esi+17Ch]
		jmp	short loc_10008240
; ---------------------------------------------------------------------------

loc_1000820A:				; CODE XREF: sub_100081C0+40j
		mov	eax, [esi+0DCh]
		push	dword ptr [eax+4]
		mov	eax, [esi+0C0h]
		call	eax
		mov	eax, [esi+13Ch]
		add	esp, 4
		call	eax
		mov	[esi+144h], eax
		mov	dword ptr [esi+17Ch], 1
		jmp	short loc_10008240
; ---------------------------------------------------------------------------

loc_10008238:				; CODE XREF: sub_100081C0+36j
		push	dword ptr [ecx+4]
		call	eax
		add	esp, 4

loc_10008240:				; CODE XREF: sub_100081C0+22j
					; sub_100081C0+2Cj ...
		mov	eax, [esi+120h]
		test	eax, eax
		jnz	short loc_100082A8
		cmp	[esi+0C0h], eax
		jz	short loc_100082A0
		mov	eax, [esi+0DCh]
		test	eax, eax
		jz	short loc_100082A0
		mov	ecx, [esi+13Ch]
		test	ecx, ecx
		jz	short loc_10008292
		call	ecx
		cmp	[esi+144h], eax
		jnz	short loc_100082A0
		dec	dword ptr [esi+17Ch]
		jnz	short loc_100082A0
		mov	dword ptr [esi+144h], 0FFFFFFFFh
		mov	dword ptr [esi+17Ch], 0
		mov	eax, [esi+0DCh]

loc_10008292:				; CODE XREF: sub_100081C0+A4j
		push	dword ptr [eax+4]
		mov	eax, [esi+0C4h]
		call	eax
		add	esp, 4

loc_100082A0:				; CODE XREF: sub_100081C0+90j
					; sub_100081C0+9Aj ...
		pop	edi
		mov	eax, 52h
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_100082A8:				; CODE XREF: sub_100081C0+88j
		mov	ecx, [eax+44h]
		test	ecx, ecx
		jz	short loc_100082B7
		push	dword ptr [eax+14h]
		call	ecx
		add	esp, 4

loc_100082B7:				; CODE XREF: sub_100081C0+EDj
		cmp	[esp+8+arg_8], 0
		push	edi
		push	[esp+0Ch+arg_4]
		push	esi
		jnz	short loc_100082CB
		call	sub_1000A090
		jmp	short loc_100082D0
; ---------------------------------------------------------------------------

loc_100082CB:				; CODE XREF: sub_100081C0+102j
		call	sub_1000A1C0

loc_100082D0:				; CODE XREF: sub_100081C0+109j
		mov	edi, eax
		add	esp, 0Ch
		mov	eax, [esi+120h]
		test	eax, eax
		jz	short loc_100082EE
		mov	ecx, [eax+48h]
		test	ecx, ecx
		jz	short loc_100082EE
		push	dword ptr [eax+14h]
		call	ecx
		add	esp, 4

loc_100082EE:				; CODE XREF: sub_100081C0+11Dj
					; sub_100081C0+124j
		cmp	dword ptr [esi+0C0h], 0
		jz	short loc_10008345
		mov	eax, [esi+0DCh]
		test	eax, eax
		jz	short loc_10008345
		mov	ecx, [esi+13Ch]
		test	ecx, ecx
		jz	short loc_10008337
		call	ecx
		cmp	[esi+144h], eax
		jnz	short loc_10008345
		dec	dword ptr [esi+17Ch]
		jnz	short loc_10008345
		mov	dword ptr [esi+144h], 0FFFFFFFFh
		mov	dword ptr [esi+17Ch], 0
		mov	eax, [esi+0DCh]

loc_10008337:				; CODE XREF: sub_100081C0+149j
		push	dword ptr [eax+4]
		mov	eax, [esi+0C4h]
		call	eax
		add	esp, 4

loc_10008345:				; CODE XREF: sub_100081C0+135j
					; sub_100081C0+13Fj ...
		mov	eax, edi
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1000834A:				; CODE XREF: sub_100081C0+8j
					; sub_100081C0+14j
		pop	edi
		mov	eax, 59h
		pop	esi
		retn
sub_100081C0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10008360	proc near		; CODE XREF: sub_100136F0+158p

var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
Dest		= byte ptr -38h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch
arg_1C		= dword	ptr  20h
arg_20		= dword	ptr  24h

		sub	esp, 64h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+64h+var_4], eax
		mov	eax, [esp+64h+arg_18]
		mov	ecx, [esp+64h+arg_C]
		mov	edx, [esp+64h+arg_10]
		push	ebx
		mov	ebx, [esp+68h+arg_4]
		mov	[esp+68h+var_48], eax
		mov	eax, [esp+68h+arg_1C]
		push	edi
		mov	edi, [esp+6Ch+arg_0]
		mov	[esp+6Ch+var_4C], eax
		mov	eax, [esp+6Ch+arg_20]
		mov	[esp+6Ch+var_40], ecx
		mov	[esp+6Ch+var_60], edx
		mov	[esp+6Ch+var_3C], eax
		test	edi, edi
		jz	loc_10008868
		test	eax, eax
		jz	loc_10008868
		mov	dword ptr [eax], 0
		cmp	dword ptr [edi+120h], 0
		jnz	short loc_100083DE
		pop	edi
		mov	eax, 52h
		pop	ebx
		mov	ecx, [esp+64h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 64h
		retn
; ---------------------------------------------------------------------------

loc_100083DE:				; CODE XREF: sub_10008360+66j
		mov	eax, [edi+0C0h]
		test	eax, eax
		jz	short loc_10008444
		mov	ecx, [edi+0DCh]
		test	ecx, ecx
		jz	short loc_10008444
		mov	edx, [edi+13Ch]
		test	edx, edx
		jz	short loc_1000843C
		call	edx
		cmp	[edi+144h], eax
		jnz	short loc_1000840E
		inc	dword ptr [edi+17Ch]
		jmp	short loc_10008444
; ---------------------------------------------------------------------------

loc_1000840E:				; CODE XREF: sub_10008360+A4j
		mov	eax, [edi+0DCh]
		push	dword ptr [eax+4]
		mov	eax, [edi+0C0h]
		call	eax
		mov	eax, [edi+13Ch]
		add	esp, 4
		call	eax
		mov	[edi+144h], eax
		mov	dword ptr [edi+17Ch], 1
		jmp	short loc_10008444
; ---------------------------------------------------------------------------

loc_1000843C:				; CODE XREF: sub_10008360+9Aj
		push	dword ptr [ecx+4]
		call	eax
		add	esp, 4

loc_10008444:				; CODE XREF: sub_10008360+86j
					; sub_10008360+90j ...
		mov	eax, [edi+120h]
		test	eax, eax
		jz	short loc_1000845D
		mov	ecx, [eax+44h]
		test	ecx, ecx
		jz	short loc_1000845D
		push	dword ptr [eax+14h]
		call	ecx
		add	esp, 4

loc_1000845D:				; CODE XREF: sub_10008360+ECj
					; sub_10008360+F3j
		push	esi
		push	ebx
		push	dword ptr [edi+120h]
		call	sub_1000A6A0
		mov	ecx, [edi+120h]
		add	esp, 8
		mov	esi, eax
		test	ecx, ecx
		jz	short loc_10008488
		mov	edx, [ecx+48h]
		test	edx, edx
		jz	short loc_10008488
		push	dword ptr [ecx+14h]
		call	edx
		add	esp, 4

loc_10008488:				; CODE XREF: sub_10008360+117j
					; sub_10008360+11Ej
		cmp	dword ptr [edi+0C0h], 0
		jz	short loc_100084DF
		mov	eax, [edi+0DCh]
		test	eax, eax
		jz	short loc_100084DF
		mov	ecx, [edi+13Ch]
		test	ecx, ecx
		jz	short loc_100084D1
		call	ecx
		cmp	[edi+144h], eax
		jnz	short loc_100084DF
		dec	dword ptr [edi+17Ch]
		jnz	short loc_100084DF
		mov	dword ptr [edi+144h], 0FFFFFFFFh
		mov	dword ptr [edi+17Ch], 0
		mov	eax, [edi+0DCh]

loc_100084D1:				; CODE XREF: sub_10008360+143j
		push	dword ptr [eax+4]
		mov	eax, [edi+0C4h]
		call	eax
		add	esp, 4

loc_100084DF:				; CODE XREF: sub_10008360+12Fj
					; sub_10008360+139j ...
		test	esi, esi
		jz	short loc_100084F7
		mov	eax, esi
		pop	esi
		pop	edi
		pop	ebx
		mov	ecx, [esp+64h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 64h
		retn
; ---------------------------------------------------------------------------

loc_100084F7:				; CODE XREF: sub_10008360+181j
		mov	eax, [edi+54h]
		mov	ecx, offset Src
		mov	esi, [edi+58h]
		test	eax, eax
		push	ebp
		cmovnz	ecx, eax
		test	ebx, ebx
		mov	eax, offset Src
		mov	[esp+74h+var_58], ecx
		cmovnz	eax, ebx
		push	eax
		call	sub_1000BAB0
		mov	ebp, eax
		push	ebp
		mov	[esp+7Ch+var_54], ebp
		call	sub_1000A640
		push	edi
		call	sub_10001CC0
		test	eax, eax
		mov	ecx, offset Src
		cmovnz	ecx, eax
		xor	eax, eax
		cmp	[esp+80h+arg_14], eax
		mov	[esp+80h+var_64], ecx
		setnz	al
		push	eax
		push	[esp+84h+arg_8]
		lea	eax, [esp+88h+Dest]
		push	esi
		push	offset aIII	; "%i\n%i\n%i\n"
		push	eax		; Dest
		call	ds:sprintf
		lea	ecx, [esp+94h+Dest]
		add	esp, 20h
		lea	edx, [ecx+1]
		jmp	short loc_10008570
; ---------------------------------------------------------------------------
		align 10h

loc_10008570:				; CODE XREF: sub_10008360+20Bj
					; sub_10008360+215j
		mov	al, [ecx]
		inc	ecx
		test	al, al
		jnz	short loc_10008570
		sub	ecx, edx
		lea	ebx, [ecx+1]
		test	ebp, ebp
		jz	short loc_10008593
		mov	ecx, ebp
		lea	edx, [ecx+1]

loc_10008585:				; CODE XREF: sub_10008360+22Aj
		mov	al, [ecx]
		inc	ecx
		test	al, al
		jnz	short loc_10008585
		sub	ecx, edx
		lea	ebp, [ecx+1]
		jmp	short loc_10008598
; ---------------------------------------------------------------------------

loc_10008593:				; CODE XREF: sub_10008360+21Ej
		mov	ebp, 1

loc_10008598:				; CODE XREF: sub_10008360+231j
		mov	eax, [esp+74h+var_40]
		test	eax, eax
		jz	short loc_100085B3
		mov	ecx, eax
		lea	edx, [ecx+1]

loc_100085A5:				; CODE XREF: sub_10008360+24Aj
		mov	al, [ecx]
		inc	ecx
		test	al, al
		jnz	short loc_100085A5
		sub	ecx, edx
		lea	edi, [ecx+1]
		jmp	short loc_100085B8
; ---------------------------------------------------------------------------

loc_100085B3:				; CODE XREF: sub_10008360+23Ej
		mov	edi, 1

loc_100085B8:				; CODE XREF: sub_10008360+251j
		mov	eax, [esp+74h+var_58]
		test	eax, eax
		jz	short loc_100085D3
		mov	ecx, eax
		lea	edx, [ecx+1]

loc_100085C5:				; CODE XREF: sub_10008360+26Aj
		mov	al, [ecx]
		inc	ecx
		test	al, al
		jnz	short loc_100085C5
		sub	ecx, edx
		lea	edx, [ecx+1]
		jmp	short loc_100085D8
; ---------------------------------------------------------------------------

loc_100085D3:				; CODE XREF: sub_10008360+25Ej
		mov	edx, 1

loc_100085D8:				; CODE XREF: sub_10008360+271j
		mov	eax, [esp+74h+var_64]
		test	eax, eax
		jz	short loc_100085F1
		mov	ecx, eax
		lea	esi, [ecx+1]

loc_100085E5:				; CODE XREF: sub_10008360+28Aj
		mov	al, [ecx]
		inc	ecx
		test	al, al
		jnz	short loc_100085E5
		sub	ecx, esi
		inc	ecx
		jmp	short loc_100085F6
; ---------------------------------------------------------------------------

loc_100085F1:				; CODE XREF: sub_10008360+27Ej
		mov	ecx, 1

loc_100085F6:				; CODE XREF: sub_10008360+28Fj
		add	ebx, ecx
		add	ebx, edx
		mov	edx, [esp+74h+var_60]
		add	ebx, edi
		add	ebx, ebp
		mov	[esp+74h+var_44], ebx
		test	edx, edx
		jz	loc_100086C6
		xor	eax, eax
		mov	[esp+74h+var_5C], eax
		cmp	[edx], eax
		jz	loc_100086C7
		xor	edi, edi
		mov	[esp+74h+var_50], edx
		mov	ebp, edx

loc_10008624:				; CODE XREF: sub_10008360+35Ej
		cmp	dword ptr [ebp+0], 0
		mov	esi, eax
		mov	ebx, eax
		jz	short loc_1000867E
		mov	eax, ebp
		mov	ebp, [esp+74h+var_60]

loc_10008634:				; CODE XREF: sub_10008360+2FCj
		push	dword ptr [eax]	; Str2
		push	dword ptr [edi+ebp] ; Str1
		call	ds:_stricmp
		add	esp, 8
		test	eax, eax
		jle	short loc_1000864F
		mov	ebx, esi
		lea	edi, ds:0[esi*4]

loc_1000864F:				; CODE XREF: sub_10008360+2E4j
		inc	esi
		lea	eax, ds:0[esi*4]
		add	eax, ebp
		cmp	dword ptr [eax], 0
		jnz	short loc_10008634
		mov	eax, [esp+74h+var_5C]
		mov	ebp, [esp+74h+var_50]
		mov	edx, [esp+74h+var_60]
		cmp	eax, ebx
		jz	short loc_1000867E
		mov	eax, [edx+ebx*4]
		mov	ecx, [ebp+0]
		mov	[ebp+0], eax
		mov	eax, [esp+74h+var_5C]
		mov	[edx+ebx*4], ecx

loc_1000867E:				; CODE XREF: sub_10008360+2CCj
					; sub_10008360+30Cj
		mov	ecx, [ebp+0]
		test	ecx, ecx
		jz	short loc_10008698
		lea	esi, [ecx+1]

loc_10008688:				; CODE XREF: sub_10008360+32Dj
		mov	al, [ecx]
		inc	ecx
		test	al, al
		jnz	short loc_10008688
		mov	eax, [esp+74h+var_5C]
		sub	ecx, esi
		inc	ecx
		jmp	short loc_1000869D
; ---------------------------------------------------------------------------

loc_10008698:				; CODE XREF: sub_10008360+323j
		mov	ecx, 1

loc_1000869D:				; CODE XREF: sub_10008360+336j
		mov	ebx, [esp+74h+var_44]
		inc	eax
		add	ebx, ecx
		mov	[esp+74h+var_5C], eax
		mov	[esp+74h+var_44], ebx
		lea	edi, ds:0[eax*4]
		cmp	dword ptr [edi+edx], 0
		lea	ebp, [edi+edx]
		mov	[esp+74h+var_50], ebp
		jnz	loc_10008624
		jmp	short loc_100086C7
; ---------------------------------------------------------------------------

loc_100086C6:				; CODE XREF: sub_10008360+2A8j
		inc	ebx

loc_100086C7:				; CODE XREF: sub_10008360+2B6j
					; sub_10008360+364j
		push	[esp+74h+var_4C]
		call	sub_1000A550
		push	[esp+78h+var_48]
		mov	esi, eax
		call	sub_1000A550
		inc	eax
		add	ebx, eax
		add	ebx, esi
		push	1
		push	ebx
		call	ldap_x_calloc
		mov	ebp, eax
		add	esp, 10h
		test	ebp, ebp
		jnz	short loc_10008714
		mov	ecx, [esp+74h+var_58]
		push	ecx
		call	ldap_x_free
		add	esp, 4
		lea	eax, [ebp+5Ah]
		pop	ebp
		pop	esi
		pop	edi
		pop	ebx
		mov	ecx, [esp+64h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 64h
		retn
; ---------------------------------------------------------------------------

loc_10008714:				; CODE XREF: sub_10008360+38Fj
		mov	ecx, [esp+74h+var_40]
		lea	eax, [esp+74h+Dest]
		mov	edi, [esp+74h+var_54]
		test	ecx, ecx
		push	eax
		mov	eax, offset Src
		cmovnz	eax, ecx
		mov	ecx, [esp+78h+var_58]
		push	eax
		test	ecx, ecx
		mov	eax, offset Src
		cmovnz	eax, ecx
		push	eax
		push	edi
		push	[esp+84h+var_64]
		push	offset aSSSSS	; "%s\n%s\n%s\n%s\n%s\n"
		push	ebp		; Dest
		call	ds:sprintf
		mov	edx, [esp+90h+var_60]
		add	esp, 1Ch
		test	edx, edx
		jz	short loc_100087C5
		mov	ecx, [edx]
		mov	[esp+74h+var_64], 0
		test	ecx, ecx
		jz	short loc_100087DF

loc_10008765:				; CODE XREF: sub_10008360+461j
		test	ecx, ecx
		mov	eax, offset Src
		cmovnz	eax, ecx
		mov	esi, eax

loc_10008771:				; CODE XREF: sub_10008360+416j
		mov	cl, [eax]
		inc	eax
		test	cl, cl
		jnz	short loc_10008771
		sub	eax, esi
		lea	edi, [ebp-1]
		lea	ecx, [ecx+0]

loc_10008780:				; CODE XREF: sub_10008360+426j
		mov	cl, [edi+1]
		inc	edi
		test	cl, cl
		jnz	short loc_10008780
		mov	ecx, eax
		shr	ecx, 2
		rep movsd
		mov	ecx, eax
		and	ecx, 3
		rep movsb
		lea	edi, [ebp-1]
		lea	esp, [esp+0]

loc_100087A0:				; CODE XREF: sub_10008360+448j
		mov	al, [edi+1]
		lea	edi, [edi+1]
		test	al, al
		jnz	short loc_100087A0
		mov	esi, [esp+74h+var_64]
		mov	ax, word ptr ds:asc_1001F980 ; "\n"
		inc	esi
		mov	[edi], ax
		mov	[esp+74h+var_64], esi
		mov	ecx, [edx+esi*4]
		test	ecx, ecx
		jnz	short loc_10008765
		jmp	short loc_100087DB
; ---------------------------------------------------------------------------

loc_100087C5:				; CODE XREF: sub_10008360+3F5j
		lea	edi, [ebp-1]

loc_100087C8:				; CODE XREF: sub_10008360+470j
		mov	al, [edi+1]
		lea	edi, [edi+1]
		test	al, al
		jnz	short loc_100087C8
		mov	ax, word ptr ds:asc_1001F980 ; "\n"
		mov	[edi], ax

loc_100087DB:				; CODE XREF: sub_10008360+463j
		mov	edi, [esp+74h+var_54]

loc_100087DF:				; CODE XREF: sub_10008360+403j
		cmp	byte ptr [ebp+0], 0
		mov	ecx, ebp
		jz	short loc_10008804

loc_100087E7:				; CODE XREF: sub_10008360+4A2j
		mov	al, [ecx]
		cmp	al, 61h
		jl	short loc_100087F8
		cmp	al, 7Ah
		jg	short loc_100087F8
		mov	edx, 0FFFFFFE0h
		jmp	short loc_100087FA
; ---------------------------------------------------------------------------

loc_100087F8:				; CODE XREF: sub_10008360+48Bj
					; sub_10008360+48Fj
		xor	edx, edx

loc_100087FA:				; CODE XREF: sub_10008360+496j
		add	al, dl
		mov	[ecx], al
		inc	ecx
		cmp	byte ptr [ecx],	0
		jnz	short loc_100087E7

loc_10008804:				; CODE XREF: sub_10008360+485j
		push	[esp+74h+var_4C]
		push	[esp+78h+var_48]
		push	ebp
		call	sub_1000A0D0
		add	esp, 0Ch
		or	edx, 0FFFFFFFFh
		mov	esi, ebp
		test	ebx, ebx
		jle	short loc_1000883C
		mov	edi, edi

loc_10008820:				; CODE XREF: sub_10008360+4DAj
		movzx	eax, byte ptr [esi]
		lea	esi, [esi+1]
		mov	ecx, edx
		dec	ebx
		shr	ecx, 18h
		xor	ecx, eax
		shl	edx, 8
		xor	edx, dword_100243C0[ecx*4]
		test	ebx, ebx
		jg	short loc_10008820

loc_1000883C:				; CODE XREF: sub_10008360+4BCj
		mov	eax, [esp+74h+var_3C]
		not	edx
		push	ebp
		mov	[eax], edx
		call	ldap_x_free
		push	edi
		call	ldap_x_free
		add	esp, 8
		xor	eax, eax
		pop	ebp
		pop	esi
		pop	edi
		pop	ebx
		mov	ecx, [esp+64h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 64h
		retn
; ---------------------------------------------------------------------------

loc_10008868:				; CODE XREF: sub_10008360+4Bj
					; sub_10008360+53j
		mov	ecx, [esp+6Ch+var_4]
		mov	eax, 59h
		pop	edi
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 64h
		retn
sub_10008360	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 1004. ldap_memcache_destroy

; =============== S U B	R O U T	I N E =======================================


		public ldap_memcache_destroy
ldap_memcache_destroy proc near		; CODE XREF: ldap_memcache_init:loc_10008DDDp
					; ldap_memcache_init+316p ...

arg_0		= dword	ptr  4

		push	ebx
		mov	ebx, [esp+4+arg_0]
		push	ebp
		xor	ebp, ebp
		test	ebx, ebx
		jz	loc_10008AA4
		mov	eax, [ebx+44h]
		test	eax, eax
		jz	short loc_1000889F
		push	dword ptr [ebx+14h]
		call	eax
		add	esp, 4

loc_1000889F:				; CODE XREF: ldap_memcache_destroy+15j
		push	esi
		push	edi
		mov	edi, [ebx+18h]
		test	edi, edi
		jz	loc_100089BC
		lea	esp, [esp+0]

loc_100088B0:				; CODE XREF: ldap_memcache_destroy+136j
		mov	eax, [edi]
		mov	ecx, [eax+0C0h]
		test	ecx, ecx
		jz	short loc_10008920
		mov	edx, [eax+0DCh]
		test	edx, edx
		jz	short loc_10008920
		mov	eax, [eax+13Ch]
		test	eax, eax
		jz	short loc_10008918
		mov	esi, [edi]
		call	eax
		cmp	[esi+144h], eax
		jnz	short loc_100088E4
		inc	dword ptr [esi+17Ch]
		jmp	short loc_10008920
; ---------------------------------------------------------------------------

loc_100088E4:				; CODE XREF: ldap_memcache_destroy+5Aj
		mov	eax, [esi+0DCh]
		push	dword ptr [eax+4]
		mov	eax, [esi+0C0h]
		call	eax
		mov	eax, [edi]
		add	esp, 4
		mov	eax, [eax+13Ch]
		call	eax
		mov	ecx, [edi]
		mov	[ecx+144h], eax
		mov	eax, [edi]
		mov	dword ptr [eax+17Ch], 1
		jmp	short loc_10008920
; ---------------------------------------------------------------------------

loc_10008918:				; CODE XREF: ldap_memcache_destroy+4Ej
		push	dword ptr [edx+4]
		call	ecx
		add	esp, 4

loc_10008920:				; CODE XREF: ldap_memcache_destroy+3Aj
					; ldap_memcache_destroy+44j ...
		mov	eax, [edi+4]
		mov	[ebx+18h], eax
		mov	eax, [edi]
		mov	dword ptr [eax+120h], 0
		mov	eax, [edi]
		cmp	dword ptr [eax+0C0h], 0
		jz	short loc_100089A5
		mov	ecx, [eax+0DCh]
		test	ecx, ecx
		jz	short loc_100089A5
		mov	edx, [eax+13Ch]
		test	edx, edx
		jz	short loc_10008997
		mov	esi, eax
		call	edx
		cmp	[esi+144h], eax
		jnz	short loc_100089A5
		dec	dword ptr [esi+17Ch]
		mov	eax, [edi]
		cmp	dword ptr [eax+17Ch], 0
		ja	short loc_100089A5
		mov	dword ptr [eax+144h], 0FFFFFFFFh
		mov	eax, [edi]
		mov	dword ptr [eax+17Ch], 0
		mov	ecx, [edi]
		mov	eax, [ecx+0DCh]
		push	dword ptr [eax+4]
		mov	eax, [ecx+0C4h]
		jmp	short loc_100089A0
; ---------------------------------------------------------------------------

loc_10008997:				; CODE XREF: ldap_memcache_destroy+CFj
		push	dword ptr [ecx+4]
		mov	eax, [eax+0C4h]

loc_100089A0:				; CODE XREF: ldap_memcache_destroy+115j
		call	eax
		add	esp, 4

loc_100089A5:				; CODE XREF: ldap_memcache_destroy+BBj
					; ldap_memcache_destroy+C5j ...
		mov	esi, [edi+4]
		push	edi
		call	ldap_x_free
		add	esp, 4
		inc	ebp
		mov	edi, esi
		test	esi, esi
		jnz	loc_100088B0

loc_100089BC:				; CODE XREF: ldap_memcache_destroy+26j
		mov	eax, [ebx+48h]
		lea	edi, ds:68h[ebp*8]
		test	eax, eax
		jz	short loc_100089D2
		push	dword ptr [ebx+14h]
		call	eax
		add	esp, 4

loc_100089D2:				; CODE XREF: ldap_memcache_destroy+148j
		mov	eax, [ebx+10h]
		test	eax, eax
		jz	short loc_10008A27
		xor	esi, esi
		cmp	[eax], esi
		jz	short loc_10008A16
		xor	ecx, ecx

loc_100089E1:				; CODE XREF: ldap_memcache_destroy+194j
		mov	eax, [ebx+10h]
		mov	edx, [ecx+eax]
		mov	ecx, edx
		lea	ebp, [ecx+1]
		lea	esp, [esp+0]

loc_100089F0:				; CODE XREF: ldap_memcache_destroy+175j
		mov	al, [ecx]
		inc	ecx
		test	al, al
		jnz	short loc_100089F0
		sub	ecx, ebp
		inc	ecx
		push	edx
		add	edi, ecx
		call	ldap_x_free
		mov	eax, [ebx+10h]
		inc	esi
		add	esp, 4
		lea	ecx, ds:0[esi*4]
		cmp	dword ptr [ecx+eax], 0
		jnz	short loc_100089E1

loc_10008A16:				; CODE XREF: ldap_memcache_destroy+15Dj
		push	dword ptr [ebx+10h]
		lea	edi, [edi+esi*4]
		add	edi, 4
		call	ldap_x_free
		add	esp, 4

loc_10008A27:				; CODE XREF: ldap_memcache_destroy+157j
		mov	eax, [ebx+1Ch]
		test	eax, eax
		jz	short loc_10008A57
		mov	eax, [eax+4]
		push	0		; int
		push	0		; int
		push	0		; void *
		shl	eax, 2
		push	5		; int
		push	ebx		; int
		add	edi, eax
		call	sub_10009610
		mov	esi, [ebx+1Ch]
		push	dword ptr [esi]
		call	ldap_x_free
		push	esi
		call	ldap_x_free
		add	esp, 1Ch

loc_10008A57:				; CODE XREF: ldap_memcache_destroy+1ACj
		mov	eax, [ebx+20h]
		test	eax, eax
		jz	short loc_10008A87
		mov	eax, [eax+4]
		push	0		; int
		push	0		; int
		push	0		; void *
		shl	eax, 2
		push	8		; int
		push	ebx		; int
		add	edi, eax
		call	sub_10009610
		mov	esi, [ebx+20h]
		push	dword ptr [esi]
		call	ldap_x_free
		push	esi
		call	ldap_x_free
		add	esp, 1Ch

loc_10008A87:				; CODE XREF: ldap_memcache_destroy+1DCj
		sub	[ebx+8], edi
		mov	eax, [ebx+40h]
		pop	edi
		pop	esi
		test	eax, eax
		jz	short loc_10008A9B
		push	dword ptr [ebx+14h]
		call	eax
		add	esp, 4

loc_10008A9B:				; CODE XREF: ldap_memcache_destroy+211j
		push	ebx
		call	ldap_x_free
		add	esp, 4

loc_10008AA4:				; CODE XREF: ldap_memcache_destroy+Aj
		pop	ebp
		pop	ebx
		retn	4
ldap_memcache_destroy endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 1003. ldap_memcache_flush

; =============== S U B	R O U T	I N E =======================================


		public ldap_memcache_flush
ldap_memcache_flush proc near		; DATA XREF: .rdata:off_10020938o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi
		mov	esi, [esp+4+arg_0]
		test	esi, esi
		jz	short loc_10008AF7
		mov	eax, [esi+44h]
		test	eax, eax
		jz	short loc_10008AC8
		push	dword ptr [esi+14h]
		call	eax
		add	esp, 4

loc_10008AC8:				; CODE XREF: ldap_memcache_flush+Ej
		mov	eax, [esp+4+arg_4]
		push	0		; int
		test	eax, eax
		jnz	short loc_10008AD8
		push	eax
		push	eax
		push	8
		jmp	short loc_10008ADF
; ---------------------------------------------------------------------------

loc_10008AD8:				; CODE XREF: ldap_memcache_flush+20j
		push	[esp+8+arg_8]	; int
		push	eax		; void *
		push	7		; int

loc_10008ADF:				; CODE XREF: ldap_memcache_flush+26j
		push	esi		; int
		call	sub_10009610
		mov	eax, [esi+48h]
		add	esp, 14h
		test	eax, eax
		jz	short loc_10008AF7
		push	dword ptr [esi+14h]
		call	eax
		add	esp, 4

loc_10008AF7:				; CODE XREF: ldap_memcache_flush+7j
					; ldap_memcache_flush+3Dj
		pop	esi
		retn	0Ch
ldap_memcache_flush endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 1002. ldap_memcache_get

; =============== S U B	R O U T	I N E =======================================


		public ldap_memcache_get
ldap_memcache_get proc near		; DATA XREF: .rdata:off_10020938o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_0]
		push	edi
		test	esi, esi
		jz	loc_10008BE6
		mov	edi, [esp+8+arg_4]
		test	edi, edi
		jz	loc_10008BE6
		mov	eax, [esi+0C0h]
		test	eax, eax
		jz	short loc_10008B80
		mov	ecx, [esi+0DCh]
		test	ecx, ecx
		jz	short loc_10008B80
		mov	edx, [esi+13Ch]
		test	edx, edx
		jz	short loc_10008B78
		call	edx
		cmp	[esi+144h], eax
		jnz	short loc_10008B4A
		inc	dword ptr [esi+17Ch]
		jmp	short loc_10008B80
; ---------------------------------------------------------------------------

loc_10008B4A:				; CODE XREF: ldap_memcache_get+40j
		mov	eax, [esi+0DCh]
		push	dword ptr [eax+4]
		mov	eax, [esi+0C0h]
		call	eax
		mov	eax, [esi+13Ch]
		add	esp, 4
		call	eax
		mov	[esi+144h], eax
		mov	dword ptr [esi+17Ch], 1
		jmp	short loc_10008B80
; ---------------------------------------------------------------------------

loc_10008B78:				; CODE XREF: ldap_memcache_get+36j
		push	dword ptr [ecx+4]
		call	eax
		add	esp, 4

loc_10008B80:				; CODE XREF: ldap_memcache_get+22j
					; ldap_memcache_get+2Cj ...
		mov	eax, [esi+120h]
		mov	[edi], eax
		cmp	dword ptr [esi+0C0h], 0
		jz	short loc_10008BDF
		mov	eax, [esi+0DCh]
		test	eax, eax
		jz	short loc_10008BDF
		mov	ecx, [esi+13Ch]
		test	ecx, ecx
		jz	short loc_10008BD1
		call	ecx
		cmp	[esi+144h], eax
		jnz	short loc_10008BDF
		dec	dword ptr [esi+17Ch]
		jnz	short loc_10008BDF
		mov	dword ptr [esi+144h], 0FFFFFFFFh
		mov	dword ptr [esi+17Ch], 0
		mov	eax, [esi+0DCh]

loc_10008BD1:				; CODE XREF: ldap_memcache_get+A3j
		push	dword ptr [eax+4]
		mov	eax, [esi+0C4h]
		call	eax
		add	esp, 4

loc_10008BDF:				; CODE XREF: ldap_memcache_get+8Fj
					; ldap_memcache_get+99j ...
		pop	edi
		xor	eax, eax
		pop	esi
		retn	8
; ---------------------------------------------------------------------------

loc_10008BE6:				; CODE XREF: ldap_memcache_get+8j
					; ldap_memcache_get+14j
		pop	edi
		mov	eax, 59h
		pop	esi
		retn	8
ldap_memcache_get endp

; Exported entry 1000. ldap_memcache_init

; =============== S U B	R O U T	I N E =======================================


		public ldap_memcache_init
ldap_memcache_init proc	near		; DATA XREF: .rdata:off_10020938o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	edi
		mov	edi, [esp+4+arg_10]
		test	edi, edi
		jnz	short loc_10008C00
		lea	eax, [edi+59h]
		pop	edi
		retn	14h
; ---------------------------------------------------------------------------

loc_10008C00:				; CODE XREF: ldap_memcache_init+7j
		push	68h
		push	1
		call	ldap_x_calloc
		mov	ecx, eax
		add	esp, 8
		mov	[edi], ecx
		test	ecx, ecx
		jnz	short loc_10008C1B
		lea	eax, [ecx+5Ah]
		pop	edi
		retn	14h
; ---------------------------------------------------------------------------

loc_10008C1B:				; CODE XREF: ldap_memcache_init+22j
		mov	eax, [esp+4+arg_0]
		mov	[ecx], eax
		mov	eax, [edi]
		mov	ecx, [esp+4+arg_4]
		test	ecx, ecx
		mov	[esp+4+arg_10],	68h
		mov	[eax+4], ecx
		mov	eax, [edi]
		mov	dword ptr [eax+18h], 0
		mov	eax, 20000h
		cmovnz	eax, ecx
		mov	[esp+4+arg_4], eax
		mov	eax, [esp+4+arg_C]
		test	eax, eax
		jz	short loc_10008C6E
		movdqu	xmm0, xmmword ptr [eax]
		mov	ecx, [edi]
		movdqu	xmmword	ptr [ecx+3Ch], xmm0
		movdqu	xmm0, xmmword ptr [eax+10h]
		movdqu	xmmword	ptr [ecx+4Ch], xmm0
		mov	eax, [eax+20h]
		mov	[ecx+5Ch], eax
		jmp	short loc_10008C84
; ---------------------------------------------------------------------------

loc_10008C6E:				; CODE XREF: ldap_memcache_init+5Fj
		mov	eax, [edi]
		xorps	xmm0, xmm0
		movdqu	xmmword	ptr [eax+3Ch], xmm0
		movdqu	xmmword	ptr [eax+4Ch], xmm0
		mov	dword ptr [eax+5Ch], 0

loc_10008C84:				; CODE XREF: ldap_memcache_init+7Cj
		mov	eax, [edi]
		test	eax, eax
		jz	short loc_10008C97
		mov	eax, [eax+3Ch]
		test	eax, eax
		jz	short loc_10008C97
		call	eax
		mov	ecx, eax
		jmp	short loc_10008C99
; ---------------------------------------------------------------------------

loc_10008C97:				; CODE XREF: ldap_memcache_init+98j
					; ldap_memcache_init+9Fj
		xor	ecx, ecx

loc_10008C99:				; CODE XREF: ldap_memcache_init+A5j
		mov	eax, [edi]
		push	ebx
		mov	ebx, [esp+8+arg_8]
		push	ebp
		mov	[eax+14h], ecx
		push	esi
		test	ebx, ebx
		jz	loc_10008D4B
		xor	esi, esi
		cmp	[ebx], esi
		jz	short loc_10008CBA

loc_10008CB3:				; CODE XREF: ldap_memcache_init+C8j
		inc	esi
		cmp	dword ptr [ebx+esi*4], 0
		jnz	short loc_10008CB3

loc_10008CBA:				; CODE XREF: ldap_memcache_init+C1j
		lea	eax, [esi+1]
		push	4
		push	eax
		call	ldap_x_calloc
		mov	ecx, [edi]
		add	esp, 8
		mov	[ecx+10h], eax
		mov	eax, [edi]
		cmp	dword ptr [eax+10h], 0
		jnz	short loc_10008CDB
		push	eax
		jmp	loc_10008DDD
; ---------------------------------------------------------------------------

loc_10008CDB:				; CODE XREF: ldap_memcache_init+E3j
		mov	eax, [ebx]
		lea	esi, ds:6Ch[esi*4]
		xor	ecx, ecx
		mov	[esp+10h+arg_10], esi
		mov	[esp+10h+arg_0], ecx
		test	eax, eax
		jz	short loc_10008D3F
		xor	ebp, ebp
		mov	[esp+10h+arg_10], ebx

loc_10008CF8:				; CODE XREF: ldap_memcache_init+149j
		push	eax
		call	sub_1000BAB0
		mov	ecx, [edi]
		add	esp, 4
		mov	ecx, [ecx+10h]
		mov	[ecx+ebp], eax
		mov	ecx, [esp+10h+arg_10]
		mov	ecx, [ecx]
		lea	edx, [ecx+1]

loc_10008D12:				; CODE XREF: ldap_memcache_init+127j
		mov	al, [ecx]
		inc	ecx
		test	al, al
		jnz	short loc_10008D12
		sub	ecx, edx
		inc	ecx
		add	esi, ecx
		mov	ecx, [esp+10h+arg_0]
		inc	ecx
		mov	[esp+10h+arg_0], ecx
		lea	ebp, ds:0[ecx*4]
		lea	eax, [ebx+ebp]
		mov	[esp+10h+arg_10], eax
		mov	eax, [eax]
		test	eax, eax
		jnz	short loc_10008CF8
		mov	[esp+10h+arg_10], esi

loc_10008D3F:				; CODE XREF: ldap_memcache_init+100j
		mov	eax, [edi]
		mov	eax, [eax+10h]
		mov	dword ptr [eax+ecx*4], 0

loc_10008D4B:				; CODE XREF: ldap_memcache_init+B7j
		movd	xmm0, [esp+10h+arg_4]
		cvtdq2pd xmm0, xmm0
		mov	ebp, [edi]
		divsd	xmm0, ds:qword_1001FC50
		divsd	xmm0, ds:qword_1001FC48
		cvttsd2si ebx, xmm0
		test	bl, 1
		jnz	short loc_10008D71
		inc	ebx

loc_10008D71:				; CODE XREF: ldap_memcache_init+17Ej
		mov	eax, ebx
		mov	ecx, 3
		cdq
		sub	eax, edx
		mov	esi, eax
		sar	esi, 1
		cmp	esi, ecx
		jle	short loc_10008DA0

loc_10008D83:				; CODE XREF: ldap_memcache_init+1AEj
		mov	eax, ebx
		cdq
		idiv	ecx
		test	edx, edx
		jnz	short loc_10008D9B
		add	ebx, 2
		lea	ecx, [edx+3]
		mov	eax, ebx
		cdq
		sub	eax, edx
		mov	esi, eax
		sar	esi, 1

loc_10008D9B:				; CODE XREF: ldap_memcache_init+19Aj
		inc	ecx
		cmp	ecx, esi
		jl	short loc_10008D83

loc_10008DA0:				; CODE XREF: ldap_memcache_init+191j
		push	20h
		push	1
		call	ldap_x_calloc
		add	esp, 8
		mov	[ebp+1Ch], eax
		test	eax, eax
		jz	short loc_10008DDB
		push	4
		push	ebx
		call	ldap_x_calloc
		mov	ecx, [ebp+1Ch]
		add	esp, 8
		mov	[ecx], eax
		mov	eax, [ebp+1Ch]
		cmp	dword ptr [eax], 0
		jnz	short loc_10008DF4
		push	eax
		call	ldap_x_free
		add	esp, 4
		mov	dword ptr [ebp+1Ch], 0

loc_10008DDB:				; CODE XREF: ldap_memcache_init+1C1j
					; ldap_memcache_init+274j ...
		push	dword ptr [edi]

loc_10008DDD:				; CODE XREF: ldap_memcache_init+E6j
		call	ldap_memcache_destroy
		pop	esi
		pop	ebp
		pop	ebx
		mov	dword ptr [edi], 0
		mov	eax, 5Ah
		pop	edi
		retn	14h
; ---------------------------------------------------------------------------

loc_10008DF4:				; CODE XREF: ldap_memcache_init+1D9j
		mov	[eax+4], ebx
		mov	eax, [ebp+1Ch]
		mov	dword ptr [eax+8], offset loc_1000A9B0
		mov	eax, [ebp+1Ch]
		mov	dword ptr [eax+0Ch], offset loc_1000A9D0
		mov	eax, [ebp+1Ch]
		mov	dword ptr [eax+10h], offset loc_1000A960
		mov	eax, [ebp+1Ch]
		mov	dword ptr [eax+14h], offset loc_1000A7A0
		mov	eax, [ebp+1Ch]
		mov	dword ptr [eax+18h], offset sub_1000AA50
		mov	eax, [ebp+1Ch]
		mov	dword ptr [eax+1Ch], offset loc_1000A880
		mov	esi, [edi]
		mov	eax, [esi+1Ch]
		test	eax, eax
		jz	short loc_10008E42
		mov	eax, [eax+4]
		shl	eax, 2

loc_10008E42:				; CODE XREF: ldap_memcache_init+24Aj
		mov	ebx, [esp+10h+arg_10]
		push	[esp+10h+arg_4]
		add	ebx, eax
		call	sub_10007ED0
		push	20h
		push	1
		mov	ebp, eax
		call	ldap_x_calloc
		add	esp, 0Ch
		mov	[esi+20h], eax
		test	eax, eax
		jz	loc_10008DDB
		push	4
		push	ebp
		call	ldap_x_calloc
		mov	ecx, [esi+20h]
		add	esp, 8
		mov	[ecx], eax
		mov	eax, [esi+20h]
		cmp	dword ptr [eax], 0
		jnz	short loc_10008E97
		push	eax
		call	ldap_x_free
		add	esp, 4
		mov	dword ptr [esi+20h], 0
		jmp	loc_10008DDB
; ---------------------------------------------------------------------------

loc_10008E97:				; CODE XREF: ldap_memcache_init+290j
		mov	[eax+4], ebp
		mov	eax, [esi+20h]
		mov	dword ptr [eax+8], offset loc_10007E10
		mov	eax, [esi+20h]
		mov	dword ptr [eax+0Ch], offset loc_10007E20
		mov	eax, [esi+20h]
		mov	dword ptr [eax+10h], offset loc_10007DD0
		mov	eax, [esi+20h]
		mov	dword ptr [eax+14h], 0
		mov	eax, [esi+20h]
		mov	dword ptr [eax+18h], offset loc_10007E60
		mov	eax, [esi+20h]
		mov	dword ptr [eax+1Ch], offset loc_10007DA0
		mov	esi, [edi]
		mov	eax, [esi+20h]
		test	eax, eax
		jz	short loc_10008EE5
		mov	eax, [eax+4]
		shl	eax, 2

loc_10008EE5:				; CODE XREF: ldap_memcache_init+2EDj
		mov	ecx, [esi+4]
		add	ebx, eax
		mov	eax, [esi+8]
		add	eax, ebx
		mov	[esi+8], eax
		test	ecx, ecx
		jz	short loc_10008F3D
		cmp	eax, ecx
		jbe	short loc_10008F3D
		cmp	ebx, [esi+0Ch]
		jbe	short loc_10008F20
		sub	eax, ebx
		mov	[esi+8], eax
		push	dword ptr [edi]
		call	ldap_memcache_destroy
		pop	esi
		pop	ebp
		pop	ebx
		mov	dword ptr [edi], 0
		mov	eax, 4
		pop	edi
		retn	14h
; ---------------------------------------------------------------------------
		align 10h

loc_10008F20:				; CODE XREF: ldap_memcache_init+30Dj
					; ldap_memcache_init+34Bj
		push	0		; int
		push	0		; int
		push	0		; void *
		push	9		; int
		push	esi		; int
		call	sub_10009610
		add	esp, 14h
		test	eax, eax
		jnz	short loc_10008F46
		mov	eax, [esi+8]
		cmp	eax, [esi+4]
		ja	short loc_10008F20

loc_10008F3D:				; CODE XREF: ldap_memcache_init+304j
					; ldap_memcache_init+308j
		pop	esi
		pop	ebp
		pop	ebx
		xor	eax, eax
		pop	edi
		retn	14h
; ---------------------------------------------------------------------------

loc_10008F46:				; CODE XREF: ldap_memcache_init+343j
		sub	[esi+8], ebx
		push	dword ptr [edi]
		call	ldap_memcache_destroy
		pop	esi
		pop	ebp
		pop	ebx
		mov	dword ptr [edi], 0
		mov	eax, 4
		pop	edi
		retn	14h
ldap_memcache_init endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10008F70	proc near		; CODE XREF: sub_100136F0+32Fp

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 8
		push	esi
		mov	esi, [esp+0Ch+arg_0]
		test	esi, esi
		jnz	short loc_10008F84
		lea	eax, [esi+59h]
		pop	esi
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_10008F84:				; CODE XREF: sub_10008F70+Aj
		mov	eax, [esi+0C0h]
		test	eax, eax
		jz	short loc_10008FEA
		mov	ecx, [esi+0DCh]
		test	ecx, ecx
		jz	short loc_10008FEA
		mov	edx, [esi+13Ch]
		test	edx, edx
		jz	short loc_10008FE2
		call	edx
		cmp	[esi+144h], eax
		jnz	short loc_10008FB4
		inc	dword ptr [esi+17Ch]
		jmp	short loc_10008FEA
; ---------------------------------------------------------------------------

loc_10008FB4:				; CODE XREF: sub_10008F70+3Aj
		mov	eax, [esi+0DCh]
		push	dword ptr [eax+4]
		mov	eax, [esi+0C0h]
		call	eax
		mov	eax, [esi+13Ch]
		add	esp, 4
		call	eax
		mov	[esi+144h], eax
		mov	dword ptr [esi+17Ch], 1
		jmp	short loc_10008FEA
; ---------------------------------------------------------------------------

loc_10008FE2:				; CODE XREF: sub_10008F70+30j
		push	dword ptr [ecx+4]
		call	eax
		add	esp, 4

loc_10008FEA:				; CODE XREF: sub_10008F70+1Cj
					; sub_10008F70+26j ...
		mov	eax, [esi+120h]
		test	eax, eax
		jnz	short loc_10009054
		cmp	[esi+0C0h], eax
		jz	short loc_1000904A
		mov	eax, [esi+0DCh]
		test	eax, eax
		jz	short loc_1000904A
		mov	ecx, [esi+13Ch]
		test	ecx, ecx
		jz	short loc_1000903C
		call	ecx
		cmp	[esi+144h], eax
		jnz	short loc_1000904A
		dec	dword ptr [esi+17Ch]
		jnz	short loc_1000904A
		mov	dword ptr [esi+144h], 0FFFFFFFFh
		mov	dword ptr [esi+17Ch], 0
		mov	eax, [esi+0DCh]

loc_1000903C:				; CODE XREF: sub_10008F70+9Ej
		push	dword ptr [eax+4]
		mov	eax, [esi+0C4h]
		call	eax
		add	esp, 4

loc_1000904A:				; CODE XREF: sub_10008F70+8Aj
					; sub_10008F70+94j ...
		mov	eax, 52h
		pop	esi
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_10009054:				; CODE XREF: sub_10008F70+82j
		mov	ecx, [eax+44h]
		test	ecx, ecx
		jz	short loc_10009063
		push	dword ptr [eax+14h]
		call	ecx
		add	esp, 4

loc_10009063:				; CODE XREF: sub_10008F70+E9j
		mov	ecx, [esi+120h]
		mov	eax, [esp+0Ch+arg_8]
		mov	[esp+0Ch+arg_0], eax
		push	edi
		test	ecx, ecx
		jnz	short loc_1000907B
		lea	edi, [ecx+52h]
		jmp	short loc_100090A2
; ---------------------------------------------------------------------------

loc_1000907B:				; CODE XREF: sub_10008F70+104j
		push	[esp+10h+arg_C]	; int
		mov	eax, [esp+14h+arg_4]
		mov	[esp+14h+var_4], eax
		lea	eax, [esp+14h+var_8]
		push	eax		; int
		lea	eax, [esp+18h+arg_0]
		mov	[esp+18h+var_8], esi
		push	eax		; void *
		push	0		; int
		push	ecx		; int
		call	sub_10009610
		add	esp, 14h
		mov	edi, eax

loc_100090A2:				; CODE XREF: sub_10008F70+109j
		mov	ecx, [esi+120h]
		test	ecx, ecx
		jz	short loc_100090BB
		mov	edx, [ecx+48h]
		test	edx, edx
		jz	short loc_100090BB
		push	dword ptr [ecx+14h]
		call	edx
		add	esp, 4

loc_100090BB:				; CODE XREF: sub_10008F70+13Aj
					; sub_10008F70+141j
		cmp	dword ptr [esi+0C0h], 0
		jz	short loc_10009112
		mov	eax, [esi+0DCh]
		test	eax, eax
		jz	short loc_10009112
		mov	ecx, [esi+13Ch]
		test	ecx, ecx
		jz	short loc_10009104
		call	ecx
		cmp	[esi+144h], eax
		jnz	short loc_10009112
		dec	dword ptr [esi+17Ch]
		jnz	short loc_10009112
		mov	dword ptr [esi+144h], 0FFFFFFFFh
		mov	dword ptr [esi+17Ch], 0
		mov	eax, [esi+0DCh]

loc_10009104:				; CODE XREF: sub_10008F70+166j
		push	dword ptr [eax+4]
		mov	eax, [esi+0C4h]
		call	eax
		add	esp, 4

loc_10009112:				; CODE XREF: sub_10008F70+152j
					; sub_10008F70+15Cj ...
		mov	eax, edi
		pop	edi
		pop	esi
		add	esp, 8
		retn
sub_10008F70	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10009120	proc near		; CODE XREF: sub_100136F0+16Fp

var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ecx
		push	esi
		mov	esi, [esp+8+arg_0]
		mov	[esp+8+var_4], 0
		test	esi, esi
		jz	loc_10009285
		cmp	[esp+8+arg_4], 0
		jl	loc_10009285
		cmp	dword ptr [esi+120h], 0
		jnz	short loc_10009152
		mov	eax, 52h
		pop	esi
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_10009152:				; CODE XREF: sub_10009120+28j
		mov	eax, [esi+0C0h]
		test	eax, eax
		jz	short loc_100091B8
		mov	ecx, [esi+0DCh]
		test	ecx, ecx
		jz	short loc_100091B8
		mov	edx, [esi+13Ch]
		test	edx, edx
		jz	short loc_100091B0
		call	edx
		cmp	[esi+144h], eax
		jnz	short loc_10009182
		inc	dword ptr [esi+17Ch]
		jmp	short loc_100091B8
; ---------------------------------------------------------------------------

loc_10009182:				; CODE XREF: sub_10009120+58j
		mov	eax, [esi+0DCh]
		push	dword ptr [eax+4]
		mov	eax, [esi+0C0h]
		call	eax
		mov	eax, [esi+13Ch]
		add	esp, 4
		call	eax
		mov	[esi+144h], eax
		mov	dword ptr [esi+17Ch], 1
		jmp	short loc_100091B8
; ---------------------------------------------------------------------------

loc_100091B0:				; CODE XREF: sub_10009120+4Ej
		push	dword ptr [ecx+4]
		call	eax
		add	esp, 4

loc_100091B8:				; CODE XREF: sub_10009120+3Aj
					; sub_10009120+44j ...
		mov	eax, [esi+120h]
		test	eax, eax
		jz	short loc_100091D1
		mov	ecx, [eax+44h]
		test	ecx, ecx
		jz	short loc_100091D1
		push	dword ptr [eax+14h]
		call	ecx
		add	esp, 4

loc_100091D1:				; CODE XREF: sub_10009120+A0j
					; sub_10009120+A7j
		mov	eax, [esi+120h]
		push	edi
		inc	dword ptr [eax+60h]
		lea	eax, [esp+0Ch+var_4]
		push	eax
		push	[esp+10h+arg_8]
		push	esi
		call	sub_1000A5F0
		mov	edi, eax
		add	esp, 0Ch
		test	edi, edi
		jnz	short loc_1000920F
		push	[esp+0Ch+var_4]
		push	[esp+10h+arg_4]
		push	esi
		call	sub_10009E90
		mov	edi, eax
		add	esp, 0Ch
		mov	eax, [esi+120h]
		inc	dword ptr [eax+64h]

loc_1000920F:				; CODE XREF: sub_10009120+D1j
		mov	eax, [esi+120h]
		test	eax, eax
		jz	short loc_10009228
		mov	ecx, [eax+48h]
		test	ecx, ecx
		jz	short loc_10009228
		push	dword ptr [eax+14h]
		call	ecx
		add	esp, 4

loc_10009228:				; CODE XREF: sub_10009120+F7j
					; sub_10009120+FEj
		cmp	dword ptr [esi+0C0h], 0
		jz	short loc_1000927F
		mov	eax, [esi+0DCh]
		test	eax, eax
		jz	short loc_1000927F
		mov	ecx, [esi+13Ch]
		test	ecx, ecx
		jz	short loc_10009271
		call	ecx
		cmp	[esi+144h], eax
		jnz	short loc_1000927F
		dec	dword ptr [esi+17Ch]
		jnz	short loc_1000927F
		mov	dword ptr [esi+144h], 0FFFFFFFFh
		mov	dword ptr [esi+17Ch], 0
		mov	eax, [esi+0DCh]

loc_10009271:				; CODE XREF: sub_10009120+123j
		push	dword ptr [eax+4]
		mov	eax, [esi+0C4h]
		call	eax
		add	esp, 4

loc_1000927F:				; CODE XREF: sub_10009120+10Fj
					; sub_10009120+119j ...
		mov	eax, edi
		pop	edi
		pop	esi
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_10009285:				; CODE XREF: sub_10009120+10j
					; sub_10009120+1Bj
		mov	eax, 59h
		pop	esi
		pop	ecx
		retn
sub_10009120	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 1001. ldap_memcache_set

; =============== S U B	R O U T	I N E =======================================


		public ldap_memcache_set
ldap_memcache_set proc near		; CODE XREF: sub_10017FA0+4C5p
					; DATA XREF: .rdata:off_10020938o

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 8
		push	ebx
		push	esi
		mov	esi, [esp+10h+arg_0]
		xor	ebx, ebx
		test	esi, esi
		jnz	short loc_100092AA
		pop	esi
		lea	eax, [ebx+59h]
		pop	ebx
		add	esp, 8
		retn	8
; ---------------------------------------------------------------------------

loc_100092AA:				; CODE XREF: ldap_memcache_set+Dj
		mov	eax, [esi+0C0h]
		test	eax, eax
		jz	short loc_10009310
		mov	ecx, [esi+0DCh]
		test	ecx, ecx
		jz	short loc_10009310
		mov	edx, [esi+13Ch]
		test	edx, edx
		jz	short loc_10009308
		call	edx
		cmp	[esi+144h], eax
		jnz	short loc_100092DA
		inc	dword ptr [esi+17Ch]
		jmp	short loc_10009310
; ---------------------------------------------------------------------------

loc_100092DA:				; CODE XREF: ldap_memcache_set+40j
		mov	eax, [esi+0DCh]
		push	dword ptr [eax+4]
		mov	eax, [esi+0C0h]
		call	eax
		mov	eax, [esi+13Ch]
		add	esp, 4
		call	eax
		mov	[esi+144h], eax
		mov	dword ptr [esi+17Ch], 1
		jmp	short loc_10009310
; ---------------------------------------------------------------------------

loc_10009308:				; CODE XREF: ldap_memcache_set+36j
		push	dword ptr [ecx+4]
		call	eax
		add	esp, 4

loc_10009310:				; CODE XREF: ldap_memcache_set+22j
					; ldap_memcache_set+2Cj ...
		push	ebp
		mov	ebp, [esi+120h]
		push	edi
		mov	edi, [esp+18h+arg_4]
		cmp	ebp, edi
		jz	loc_1000954A
		xor	ecx, ecx
		mov	[esp+18h+arg_0], ecx
		test	ebp, ebp
		jz	loc_100093D4
		mov	eax, [ebp+44h]
		test	eax, eax
		jz	short loc_10009341
		push	dword ptr [ebp+14h]
		call	eax
		add	esp, 4

loc_10009341:				; CODE XREF: ldap_memcache_set+A7j
		mov	ebx, [ebp+18h]
		test	ebx, ebx
		jz	short loc_100093C5

loc_10009348:				; CODE XREF: ldap_memcache_set+C5j
		cmp	[ebx], esi
		jz	short loc_10009359
		mov	[esp+18h+arg_0], ebx
		mov	ebx, [ebx+4]
		test	ebx, ebx
		jnz	short loc_10009348
		jmp	short loc_100093C5
; ---------------------------------------------------------------------------

loc_10009359:				; CODE XREF: ldap_memcache_set+BAj
		mov	eax, [ebp+1Ch]
		mov	[esp+18h+var_8], esi
		mov	[esp+18h+var_4], 0FFFFFFFFh
		mov	[esp+18h+arg_4], eax
		cmp	dword ptr [eax+14h], 0
		jz	short loc_100093A5
		lea	ecx, [esp+18h+var_8]
		push	ecx
		push	dword ptr [eax+4]
		mov	eax, [eax+8]
		call	eax
		mov	edx, eax
		add	esp, 8
		test	edx, edx
		js	short loc_100093A5
		mov	ecx, [esp+18h+arg_4]
		cmp	edx, [ecx+4]
		jge	short loc_100093A5
		push	ebp
		lea	eax, [esp+1Ch+var_8]
		push	eax
		mov	eax, [ecx]
		lea	eax, [eax+edx*4]
		push	eax
		mov	eax, [ecx+14h]
		call	eax
		add	esp, 0Ch

loc_100093A5:				; CODE XREF: ldap_memcache_set+E0j
					; ldap_memcache_set+F6j ...
		mov	ecx, [esp+18h+arg_0]
		mov	eax, [ebx+4]
		test	ecx, ecx
		jz	short loc_100093B5
		mov	[ecx+4], eax
		jmp	short loc_100093B8
; ---------------------------------------------------------------------------

loc_100093B5:				; CODE XREF: ldap_memcache_set+11Ej
		mov	[ebp+18h], eax

loc_100093B8:				; CODE XREF: ldap_memcache_set+123j
		push	ebx
		call	ldap_x_free
		add	esp, 4
		add	dword ptr [ebp+8], 0FFFFFFF8h

loc_100093C5:				; CODE XREF: ldap_memcache_set+B6j
					; ldap_memcache_set+C7j
		mov	eax, [ebp+48h]
		test	eax, eax
		jz	short loc_100093D4
		push	dword ptr [ebp+14h]
		call	eax
		add	esp, 4

loc_100093D4:				; CODE XREF: ldap_memcache_set+9Cj
					; ldap_memcache_set+13Aj
		mov	dword ptr [esi+120h], 0
		test	edi, edi
		jnz	short loc_10009440
		cmp	[esi+0C0h], edi
		jz	short loc_10009434
		mov	eax, [esi+0DCh]
		test	eax, eax
		jz	short loc_10009434
		mov	ecx, [esi+13Ch]
		test	ecx, ecx
		jz	short loc_10009426
		call	ecx
		cmp	[esi+144h], eax
		jnz	short loc_10009434
		dec	dword ptr [esi+17Ch]
		jnz	short loc_10009434
		mov	dword ptr [esi+144h], 0FFFFFFFFh
		mov	[esi+17Ch], edi
		mov	eax, [esi+0DCh]

loc_10009426:				; CODE XREF: ldap_memcache_set+16Cj
		push	dword ptr [eax+4]
		mov	eax, [esi+0C4h]
		call	eax
		add	esp, 4

loc_10009434:				; CODE XREF: ldap_memcache_set+158j
					; ldap_memcache_set+162j ...
		pop	edi
		pop	ebp
		pop	esi
		xor	eax, eax
		pop	ebx
		add	esp, 8
		retn	8
; ---------------------------------------------------------------------------

loc_10009440:				; CODE XREF: ldap_memcache_set+150j
		mov	eax, [edi+44h]
		test	eax, eax
		jz	short loc_1000944F
		push	dword ptr [edi+14h]
		call	eax
		add	esp, 4

loc_1000944F:				; CODE XREF: ldap_memcache_set+1B5j
		add	dword ptr [edi+8], 8
		mov	ecx, [edi+4]
		mov	eax, [edi+8]
		test	ecx, ecx
		jz	short loc_1000948D
		cmp	eax, ecx
		jbe	short loc_1000948D
		cmp	dword ptr [edi+0Ch], 8
		jnb	short loc_10009470
		add	eax, 0FFFFFFF8h
		mov	[edi+8], eax
		jmp	short loc_100094B5
; ---------------------------------------------------------------------------
		align 10h

loc_10009470:				; CODE XREF: ldap_memcache_set+1D5j
					; ldap_memcache_set+1FBj
		push	0		; int
		push	0		; int
		push	0		; void *
		push	9		; int
		push	edi		; int
		call	sub_10009610
		add	esp, 14h
		test	eax, eax
		jnz	short loc_100094B1
		mov	eax, [edi+8]
		cmp	eax, [edi+4]
		ja	short loc_10009470

loc_1000948D:				; CODE XREF: ldap_memcache_set+1CBj
					; ldap_memcache_set+1CFj
		push	8
		push	1
		xor	ebx, ebx
		call	ldap_x_calloc
		mov	ecx, eax
		add	esp, 8
		test	ecx, ecx
		jnz	loc_1000952A
		add	dword ptr [edi+8], 0FFFFFFF8h
		lea	ebx, [eax+5Ah]
		jmp	loc_1000953B
; ---------------------------------------------------------------------------

loc_100094B1:				; CODE XREF: ldap_memcache_set+1F3j
		add	dword ptr [edi+8], 0FFFFFFF8h

loc_100094B5:				; CODE XREF: ldap_memcache_set+1DDj
		mov	eax, [edi+48h]
		test	eax, eax
		jz	short loc_100094C4
		push	dword ptr [edi+14h]
		call	eax
		add	esp, 4

loc_100094C4:				; CODE XREF: ldap_memcache_set+22Aj
		cmp	dword ptr [esi+0C0h], 0
		jz	short loc_1000951B
		mov	eax, [esi+0DCh]
		test	eax, eax
		jz	short loc_1000951B
		mov	ecx, [esi+13Ch]
		test	ecx, ecx
		jz	short loc_1000950D
		call	ecx
		cmp	[esi+144h], eax
		jnz	short loc_1000951B
		dec	dword ptr [esi+17Ch]
		jnz	short loc_1000951B
		mov	dword ptr [esi+144h], 0FFFFFFFFh
		mov	dword ptr [esi+17Ch], 0
		mov	eax, [esi+0DCh]

loc_1000950D:				; CODE XREF: ldap_memcache_set+24Fj
		push	dword ptr [eax+4]
		mov	eax, [esi+0C4h]
		call	eax
		add	esp, 4

loc_1000951B:				; CODE XREF: ldap_memcache_set+23Bj
					; ldap_memcache_set+245j ...
		pop	edi
		pop	ebp
		pop	esi
		mov	eax, 4
		pop	ebx
		add	esp, 8
		retn	8
; ---------------------------------------------------------------------------

loc_1000952A:				; CODE XREF: ldap_memcache_set+20Fj
		mov	[ecx], esi
		mov	eax, [edi+18h]
		mov	[ecx+4], eax
		mov	[edi+18h], ecx
		mov	[esi+120h], edi

loc_1000953B:				; CODE XREF: ldap_memcache_set+21Cj
		mov	eax, [edi+48h]
		test	eax, eax
		jz	short loc_1000954A
		push	dword ptr [edi+14h]
		call	eax
		add	esp, 4

loc_1000954A:				; CODE XREF: ldap_memcache_set+8Ej
					; ldap_memcache_set+2B0j
		cmp	dword ptr [esi+0C0h], 0
		jz	short loc_100095BB
		mov	eax, [esi+0DCh]
		test	eax, eax
		jz	short loc_100095BB
		mov	ecx, [esi+13Ch]
		test	ecx, ecx
		jz	short loc_100095AD
		call	ecx
		cmp	[esi+144h], eax
		jnz	short loc_100095BB
		dec	dword ptr [esi+17Ch]
		jnz	short loc_100095BB
		mov	dword ptr [esi+144h], 0FFFFFFFFh
		mov	dword ptr [esi+17Ch], 0
		mov	eax, [esi+0DCh]
		push	dword ptr [eax+4]
		mov	eax, [esi+0C4h]
		call	eax
		add	esp, 4
		mov	eax, ebx
		pop	edi
		pop	ebp
		pop	esi
		pop	ebx
		add	esp, 8
		retn	8
; ---------------------------------------------------------------------------

loc_100095AD:				; CODE XREF: ldap_memcache_set+2D5j
		push	dword ptr [eax+4]
		mov	ecx, [esi+0C4h]
		call	ecx
		add	esp, 4

loc_100095BB:				; CODE XREF: ldap_memcache_set+2C1j
					; ldap_memcache_set+2CBj ...
		pop	edi
		pop	ebp
		pop	esi
		mov	eax, ebx
		pop	ebx
		add	esp, 8
		retn	8
ldap_memcache_set endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 1005. ldap_memcache_update

; =============== S U B	R O U T	I N E =======================================


		public ldap_memcache_update
ldap_memcache_update proc near		; DATA XREF: .rdata:off_10020938o

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		test	esi, esi
		jz	short loc_10009608
		mov	eax, [esi+44h]
		test	eax, eax
		jz	short loc_100095E8
		push	dword ptr [esi+14h]
		call	eax
		add	esp, 4

loc_100095E8:				; CODE XREF: ldap_memcache_update+Ej
		push	0		; int
		push	0		; int
		push	0		; void *
		push	6		; int
		push	esi		; int
		call	sub_10009610
		mov	eax, [esi+48h]
		add	esp, 14h
		test	eax, eax
		jz	short loc_10009608
		push	dword ptr [esi+14h]
		call	eax
		add	esp, 4

loc_10009608:				; CODE XREF: ldap_memcache_update+7j
					; ldap_memcache_update+2Ej
		pop	esi
		retn	4
ldap_memcache_update endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_10009610(int,	int, void *, int, int)
sub_10009610	proc near		; CODE XREF: ldap_memcache_destroy+1BFp
					; ldap_memcache_destroy+1EFp ...

var_168		= dword	ptr -168h
var_164		= dword	ptr -164h
Src		= dword	ptr -160h
var_15C		= dword	ptr -15Ch
var_158		= dword	ptr -158h
var_154		= dword	ptr -154h
var_150		= dword	ptr -150h
var_14C		= dword	ptr -14Ch
var_148		= dword	ptr -148h
var_144		= dword	ptr -144h
var_140		= dword	ptr -140h
var_13C		= dword	ptr -13Ch
Dst		= dword	ptr -138h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		and	esp, 0FFFFFFF8h
		sub	esp, 16Ch
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+16Ch+var_4], eax
		mov	eax, [ebp+arg_4]
		mov	ecx, [ebp+arg_C]
		mov	[esp+16Ch+var_154], ecx
		mov	[esp+16Ch+var_168], 0
		mov	[esp+16Ch+var_158], 0
		push	ebx
		mov	ebx, [ebp+arg_8]
		mov	[esp+170h+Src],	ebx
		push	esi
		mov	esi, [ebp+arg_10]
		push	edi
		mov	edi, [ebp+arg_0]
		mov	[esp+178h+var_164], edi
		test	eax, eax
		jnz	loc_1000978F
		mov	eax, [ebx]
		mov	ebx, [edi+1Ch]
		mov	[esp+178h+var_164], 0
		push	ecx
		mov	[esp+17Ch+var_158], eax
		push	dword ptr [ebx+4]
		mov	eax, [ebx+8]
		call	eax
		mov	ecx, eax
		mov	[esp+180h+var_164], 0
		add	esp, 8
		test	ecx, ecx
		js	short loc_100096C4
		cmp	ecx, [ebx+4]
		jge	short loc_100096C4
		lea	eax, [esp+178h+var_164]
		push	eax
		mov	eax, [ebx]
		push	[esp+17Ch+var_154]
		push	dword ptr [eax+ecx*4]
		mov	eax, [ebx+10h]
		call	eax
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_100096C4
		mov	eax, 44h
		pop	edi
		pop	esi
		pop	ebx
		mov	ecx, [esp+16Ch+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	esp, ebp
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_100096C4:				; CODE XREF: sub_10009610+79j
					; sub_10009610+7Ej ...
		push	3Ch
		push	1
		call	ldap_x_calloc
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		jnz	short loc_100096EE
		lea	eax, [ebx+5Ah]
		pop	edi
		pop	esi
		pop	ebx
		mov	ecx, [esp+16Ch+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	esp, ebp
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_100096EE:				; CODE XREF: sub_10009610+C4j
		mov	ecx, [esp+178h+var_154]
		mov	eax, [esp+178h+var_158]
		mov	[ebx+4], eax
		mov	eax, [ecx]
		mov	[ebx+18h], eax
		mov	eax, [ecx+4]
		mov	[ebx+1Ch], eax
		test	esi, esi
		jz	short loc_10009713
		push	esi
		call	sub_1000BAB0
		add	esp, 4
		jmp	short loc_10009715
; ---------------------------------------------------------------------------

loc_10009713:				; CODE XREF: sub_10009610+F6j
		xor	eax, eax

loc_10009715:				; CODE XREF: sub_10009610+101j
		mov	[ebx], eax
		lea	ecx, [esi+1]
		lea	ebx, [ebx+0]

loc_10009720:				; CODE XREF: sub_10009610+115j
		mov	al, [esi]
		inc	esi
		test	al, al
		jnz	short loc_10009720
		sub	esi, ecx
		push	1
		push	1
		lea	eax, [esi+3Dh]
		push	eax
		push	edi
		call	sub_1000A000
		mov	esi, eax
		add	esp, 10h
		mov	[esp+178h+var_168], esi
		test	esi, esi
		jnz	short loc_10009783
		push	ebx
		push	[esp+17Ch+var_154]
		push	dword ptr [edi+1Ch]
		call	sub_10007F80
		add	esp, 0Ch
		mov	[esp+178h+var_168], eax
		test	eax, eax
		jnz	short loc_10009783
		push	2
		push	ebx
		push	edi
		call	sub_10009FC0
		add	esp, 0Ch

loc_10009768:				; CODE XREF: sub_10009610+17Dj
					; sub_10009610+2EEj ...
		mov	ebx, [esp+178h+var_168]

loc_1000976C:				; CODE XREF: sub_10009610+268j
		mov	eax, ebx
		pop	edi
		pop	esi
		pop	ebx
		mov	ecx, [esp+16Ch+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	esp, ebp
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_10009783:				; CODE XREF: sub_10009610+132j
					; sub_10009610+14Aj ...
		push	ebx
		push	edi
		call	sub_1000A490
		add	esp, 8
		jmp	short loc_10009768
; ---------------------------------------------------------------------------

loc_1000978F:				; CODE XREF: sub_10009610+4Aj
		cmp	eax, 1
		jz	loc_10009C61
		cmp	eax, 2
		jz	loc_10009C61
		cmp	eax, 3
		jnz	loc_10009856
		mov	esi, ecx
		push	esi
		push	ebx
		push	dword ptr [edi+20h]
		call	sub_10007F30
		add	esp, 0Ch
		test	eax, eax
		jnz	loc_10009E2F
		push	eax		; Time
		call	ds:_time64
		push	eax		; Time1
		push	dword ptr [esi]	; int
		mov	[esp+184h+var_13C], edx
		push	edi		; int
		call	sub_1000A440
		add	esp, 10h
		test	eax, eax
		jnz	short loc_1000980A
		push	1
		push	dword ptr [esi]
		push	edi
		call	sub_1000A4F0
		push	1
		push	dword ptr [esi]
		push	edi
		call	sub_10009FC0
		add	esp, 18h

loc_100097F3:				; CODE XREF: sub_10009610+45Fj
					; sub_10009610+796j
		xor	eax, eax
		pop	edi
		pop	esi
		pop	ebx
		mov	ecx, [esp+16Ch+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	esp, ebp
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_1000980A:				; CODE XREF: sub_10009610+1CAj
		push	0
		push	ebx
		push	dword ptr [edi+20h]
		call	sub_10007FC0
		push	0
		push	dword ptr [esi]
		push	edi
		call	sub_1000A4F0
		push	1
		push	dword ptr [esi]
		push	edi
		call	sub_1000A4F0
		push	dword ptr [esi]
		push	edi
		call	sub_1000A490
		mov	ebx, 20h
		mov	dword ptr [esi], 0
		add	esp, 2Ch
		mov	eax, ebx
		pop	edi
		pop	esi
		pop	ebx
		mov	ecx, [esp+16Ch+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	esp, ebp
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_10009856:				; CODE XREF: sub_10009610+194j
		cmp	eax, 4
		jnz	short loc_100098AC
		lea	eax, [esp+178h+var_164]
		mov	[esp+178h+var_164], 0
		push	eax
		push	ebx
		push	dword ptr [edi+1Ch]
		call	sub_10007FC0
		mov	ebx, eax
		add	esp, 0Ch
		test	ebx, ebx
		jnz	loc_1000976C
		mov	esi, [esp+178h+var_164]
		push	2
		push	esi
		push	edi
		call	sub_1000A4F0
		push	esi
		push	edi
		call	sub_1000A490
		add	esp, 14h
		mov	eax, ebx
		pop	edi
		pop	esi
		pop	ebx
		mov	ecx, [esp+16Ch+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	esp, ebp
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_100098AC:				; CODE XREF: sub_10009610+249j
		cmp	eax, 5
		jnz	short loc_100098D4
		push	edi
		push	dword ptr [edi+1Ch]
		call	sub_10008010
		add	esp, 8
		mov	ebx, eax
		pop	edi
		pop	esi
		pop	ebx
		mov	ecx, [esp+16Ch+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	esp, ebp
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_100098D4:				; CODE XREF: sub_10009610+29Fj
		cmp	eax, 6
		jnz	short loc_1000993E
		mov	esi, [edi+30h]
		push	0		; Time
		call	ds:_time64
		add	esp, 4
		mov	ebx, eax
		test	esi, esi
		jz	loc_10009E11

loc_100098F1:				; CODE XREF: sub_10009610+327j
		push	ebx		; Time1
		push	esi		; int
		push	edi		; int
		call	sub_1000A440
		add	esp, 0Ch
		test	eax, eax
		jz	loc_10009768
		push	0
		lea	eax, [esi+4]
		push	eax
		push	dword ptr [edi+20h]
		call	sub_10007FC0
		push	0
		push	esi
		push	edi
		mov	[esp+190h+var_168], eax
		call	sub_1000A4F0
		push	1
		push	esi
		push	edi
		call	sub_1000A4F0
		push	esi
		push	edi
		call	sub_1000A490
		mov	esi, [edi+30h]
		add	esp, 2Ch
		test	esi, esi
		jnz	short loc_100098F1
		jmp	loc_10009768
; ---------------------------------------------------------------------------

loc_1000993E:				; CODE XREF: sub_10009610+2C7j
		cmp	eax, 8
		jnz	short loc_10009999
		mov	esi, [edi+24h]
		push	edi
		push	dword ptr [edi+20h]
		call	sub_10008010
		add	esp, 8
		mov	ebx, eax
		test	esi, esi
		jz	short loc_1000997B

loc_10009958:				; CODE XREF: sub_10009610+369j
		push	1
		push	esi
		push	edi
		call	sub_1000A4F0
		mov	eax, [edi+24h]
		push	esi
		push	edi
		mov	eax, [eax+20h]
		mov	[edi+24h], eax
		call	sub_1000A490
		mov	esi, [edi+24h]
		add	esp, 14h
		test	esi, esi
		jnz	short loc_10009958

loc_1000997B:				; CODE XREF: sub_10009610+346j
		mov	dword ptr [edi+30h], 0
		mov	eax, ebx
		pop	edi
		pop	esi
		pop	ebx
		mov	ecx, [esp+16Ch+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	esp, ebp
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_10009999:				; CODE XREF: sub_10009610+331j
		cmp	eax, 7
		jz	short loc_10009A16
		cmp	eax, 0Ah
		jz	short loc_10009A16
		cmp	eax, 9
		jnz	short loc_100099FA
		mov	esi, [edi+34h]
		test	esi, esi
		jnz	short loc_100099C7
		lea	eax, [esi+20h]
		pop	edi
		pop	esi
		pop	ebx
		mov	ecx, [esp+16Ch+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	esp, ebp
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_100099C7:				; CODE XREF: sub_10009610+39Dj
		push	0
		lea	eax, [esi+4]
		push	eax
		push	dword ptr [edi+20h]
		call	sub_10007FC0
		push	0
		push	esi
		push	edi
		mov	[esp+190h+var_168], eax
		call	sub_1000A4F0
		push	1
		push	esi
		push	edi
		call	sub_1000A4F0
		push	esi
		push	edi
		call	sub_1000A490
		add	esp, 2Ch
		jmp	loc_10009768
; ---------------------------------------------------------------------------

loc_100099FA:				; CODE XREF: sub_10009610+396j
		mov	ebx, 59h
		mov	eax, ebx
		pop	edi
		pop	esi
		pop	ebx
		mov	ecx, [esp+16Ch+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	esp, ebp
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_10009A16:				; CODE XREF: sub_10009610+38Cj
					; sub_10009610+391j
		mov	eax, [edi+10h]
		test	eax, eax
		jz	short loc_10009A79
		xor	ebx, ebx
		cmp	[eax], ebx
		jz	short loc_10009A68
		xor	esi, esi

loc_10009A25:				; CODE XREF: sub_10009610+456j
		mov	eax, [edi+10h]
		push	2		; int
		push	[esp+17Ch+Src]	; Src
		push	dword ptr [esi+eax] ; void *
		call	sub_1000A200
		add	esp, 0Ch
		cmp	eax, 6
		jz	short loc_10009A68
		mov	eax, [edi+10h]
		push	2		; int
		push	dword ptr [esi+eax] ; Src
		push	[esp+180h+Src]	; void *
		call	sub_1000A200
		add	esp, 0Ch
		cmp	eax, 6
		jz	short loc_10009A68
		mov	eax, [edi+10h]
		inc	ebx
		lea	esi, ds:0[ebx*4]
		cmp	dword ptr [esi+eax], 0
		jnz	short loc_10009A25

loc_10009A68:				; CODE XREF: sub_10009610+411j
					; sub_10009610+42Cj ...
		mov	eax, [edi+10h]
		cmp	dword ptr [eax+ebx*4], 0
		jz	loc_100097F3
		mov	ebx, [esp+178h+Src]

loc_10009A79:				; CODE XREF: sub_10009610+40Bj
		xor	eax, eax
		mov	[esp+178h+var_158], eax
		nop

loc_10009A80:				; CODE XREF: sub_10009610+646j
		neg	eax
		sbb	eax, eax
		and	eax, 2
		mov	[esp+178h+var_144], eax
		mov	esi, [edi+eax*4+24h]
		mov	[esp+178h+var_15C], esi
		test	esi, esi
		jz	loc_10009C4A
		lea	eax, ds:20h[eax*4]
		mov	[esp+178h+var_140], eax

loc_10009AA6:				; CODE XREF: sub_10009610+634j
		push	2		; int
		push	ebx		; Src
		push	dword ptr [esi]	; void *
		xor	eax, eax
		mov	[esp+184h+var_148], eax
		call	sub_1000A200
		add	esp, 0Ch
		cmp	eax, 6
		jz	short loc_10009AD4
		push	2		; int
		push	dword ptr [esi]	; Src
		push	ebx		; void *
		call	sub_1000A200
		add	esp, 0Ch
		cmp	eax, 6
		jnz	loc_10009C37

loc_10009AD4:				; CODE XREF: sub_10009610+4ACj
		mov	ebx, [esi+10h]
		xor	eax, eax
		mov	[esp+178h+var_150], eax
		lea	ecx, [ecx+0]

loc_10009AE0:				; CODE XREF: sub_10009610+53Ej
		test	ebx, ebx
		jz	short loc_10009B50
		cmp	dword ptr [ebx+4], 64h
		jnz	short loc_10009B49
		mov	esi, [ebx+8]
		lea	eax, [esp+178h+var_14C]
		push	eax
		lea	eax, [esp+17Ch+Dst]
		mov	[esp+17Ch+var_148], 1
		mov	ecx, 4Bh
		lea	edi, [esp+17Ch+Dst]
		push	offset aA	; "{a"
		rep movsd
		push	eax		; Dst
		call	ber_scanf
		add	esp, 0Ch
		cmp	eax, 0FFFFFFFFh
		jz	short loc_10009B45
		push	[esp+178h+var_154] ; int
		push	[esp+17Ch+Src]	; Src
		push	[esp+180h+var_14C] ; void *
		call	sub_1000A200
		add	esp, 0Ch
		xor	ecx, ecx
		cmp	eax, 6
		setz	cl
		push	[esp+178h+var_14C]
		mov	[esp+17Ch+var_150], ecx
		call	ldap_memfree

loc_10009B45:				; CODE XREF: sub_10009610+50Aj
		mov	eax, [esp+178h+var_150]

loc_10009B49:				; CODE XREF: sub_10009610+4D8j
		mov	ebx, [ebx+0Ch]
		test	eax, eax
		jz	short loc_10009AE0

loc_10009B50:				; CODE XREF: sub_10009610+4D2j
		cmp	[ebp+arg_4], 0Ah
		jnz	short loc_10009B5E
		mov	eax, [esp+178h+var_148]
		test	eax, eax
		jz	short loc_10009B69

loc_10009B5E:				; CODE XREF: sub_10009610+544j
		cmp	[esp+178h+var_150], 0
		jz	loc_10009C2B

loc_10009B69:				; CODE XREF: sub_10009610+54Cj
		cmp	[esp+178h+var_144], 0
		mov	esi, [esp+178h+var_15C]
		mov	edi, [esp+178h+var_164]
		jnz	short loc_10009BD6
		mov	ebx, [edi+20h]
		lea	eax, [esi+4]
		push	eax
		push	dword ptr [ebx+4]
		mov	eax, [ebx+8]
		call	eax
		add	esp, 8
		test	eax, eax
		js	short loc_10009BAD
		cmp	eax, [ebx+4]
		jge	short loc_10009BAD
		push	0
		lea	ecx, [esi+4]
		push	ecx
		mov	ecx, [ebx]
		lea	eax, [ecx+eax*4]
		push	eax
		mov	eax, [ebx+18h]
		call	eax
		add	esp, 0Ch
		mov	[esp+178h+var_168], eax
		jmp	short loc_10009BB5
; ---------------------------------------------------------------------------

loc_10009BAD:				; CODE XREF: sub_10009610+57Cj
					; sub_10009610+581j
		mov	[esp+178h+var_168], 1

loc_10009BB5:				; CODE XREF: sub_10009610+59Bj
		push	0
		push	esi
		push	edi
		call	sub_1000A4F0
		push	1
		push	esi
		push	edi
		call	sub_1000A4F0
		add	esp, 18h
		push	esi
		push	edi
		call	sub_1000A490
		add	esp, 8
		jmp	short loc_10009C33
; ---------------------------------------------------------------------------

loc_10009BD6:				; CODE XREF: sub_10009610+566j
		mov	ebx, [edi+1Ch]
		lea	eax, [esi+18h]
		push	eax
		push	dword ptr [ebx+4]
		mov	eax, [ebx+8]
		call	eax
		add	esp, 8
		test	eax, eax
		js	short loc_10009C0B
		cmp	eax, [ebx+4]
		jge	short loc_10009C0B
		push	0
		lea	ecx, [esi+18h]
		push	ecx
		mov	ecx, [ebx]
		lea	eax, [ecx+eax*4]
		push	eax
		mov	eax, [ebx+18h]
		call	eax
		add	esp, 0Ch
		mov	[esp+178h+var_168], eax
		jmp	short loc_10009C13
; ---------------------------------------------------------------------------

loc_10009C0B:				; CODE XREF: sub_10009610+5DAj
					; sub_10009610+5DFj
		mov	[esp+178h+var_168], 1

loc_10009C13:				; CODE XREF: sub_10009610+5F9j
		push	2
		push	esi
		push	edi
		call	sub_1000A4F0
		add	esp, 0Ch
		push	esi
		push	edi
		call	sub_1000A490
		add	esp, 8
		jmp	short loc_10009C33
; ---------------------------------------------------------------------------

loc_10009C2B:				; CODE XREF: sub_10009610+553j
		mov	edi, [esp+178h+var_164]
		mov	esi, [esp+178h+var_15C]

loc_10009C33:				; CODE XREF: sub_10009610+5C4j
					; sub_10009610+619j
		mov	ebx, [esp+178h+Src]

loc_10009C37:				; CODE XREF: sub_10009610+4BEj
		mov	eax, [esp+178h+var_140]
		mov	esi, [eax+esi]
		mov	[esp+178h+var_15C], esi
		test	esi, esi
		jnz	loc_10009AA6

loc_10009C4A:				; CODE XREF: sub_10009610+485j
		mov	eax, [esp+178h+var_158]
		inc	eax
		mov	[esp+178h+var_158], eax
		cmp	eax, 2
		jl	loc_10009A80
		jmp	loc_10009768
; ---------------------------------------------------------------------------

loc_10009C61:				; CODE XREF: sub_10009610+182j
					; sub_10009610+18Bj
		mov	esi, [edi+1Ch]
		mov	[esp+178h+var_164], 0
		push	ebx
		mov	[esp+17Ch+var_15C], 0
		push	dword ptr [esi+4]
		mov	eax, [esi+8]
		call	eax
		mov	ecx, eax
		mov	[esp+180h+var_164], 0
		add	esp, 8
		test	ecx, ecx
		js	loc_10009E2A
		cmp	ecx, [esi+4]
		jge	loc_10009E2A
		lea	eax, [esp+178h+var_164]
		push	eax
		mov	eax, [esi]
		push	ebx
		push	dword ptr [eax+ecx*4]
		mov	eax, [esi+10h]
		call	eax
		add	esp, 0Ch
		test	eax, eax
		jnz	loc_10009E2F
		mov	ebx, [esp+178h+var_164]
		lea	eax, [esp+178h+var_158]
		push	eax
		lea	eax, [esp+17Ch+var_15C]
		push	eax
		mov	eax, [esp+180h+var_154]
		push	0
		push	dword ptr [eax]
		push	eax
		call	sub_1000A2C0
		add	esp, 14h
		test	eax, eax
		jz	short loc_10009D3B
		mov	esi, [edi+1Ch]
		push	[esp+178h+Src]
		push	dword ptr [esi+4]
		mov	eax, [esi+8]
		call	eax
		add	esp, 8
		test	eax, eax
		js	short loc_10009D0C
		cmp	eax, [esi+4]
		jge	short loc_10009D0C
		mov	ecx, [esi]
		push	0
		push	[esp+17Ch+Src]
		lea	eax, [ecx+eax*4]
		push	eax
		mov	eax, [esi+18h]
		call	eax
		add	esp, 0Ch
		mov	esi, eax
		jmp	short loc_10009D11
; ---------------------------------------------------------------------------

loc_10009D0C:				; CODE XREF: sub_10009610+6DDj
					; sub_10009610+6E2j
		mov	esi, 1

loc_10009D11:				; CODE XREF: sub_10009610+6FAj
		push	2
		push	ebx
		push	edi
		call	sub_1000A4F0
		push	ebx
		push	edi
		call	sub_1000A490
		add	esp, 14h
		mov	eax, esi
		pop	edi
		pop	esi
		pop	ebx
		mov	ecx, [esp+16Ch+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	esp, ebp
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_10009D3B:				; CODE XREF: sub_10009610+6C7j
		mov	esi, [esp+178h+var_158]
		push	1
		push	1
		push	esi
		push	edi
		call	sub_1000A000
		add	esp, 10h
		test	eax, eax
		jz	short loc_10009D94
		push	[esp+178h+var_15C]
		call	ldap_msgfree
		push	0
		push	[esp+17Ch+Src]
		push	dword ptr [edi+1Ch]
		call	sub_10007FC0
		push	2
		push	ebx
		push	edi
		mov	esi, eax
		call	sub_1000A4F0
		push	ebx
		push	edi
		call	sub_1000A490
		add	esp, 20h
		mov	eax, esi
		pop	edi
		pop	esi
		pop	ebx
		mov	ecx, [esp+16Ch+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	esp, ebp
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_10009D94:				; CODE XREF: sub_10009610+73Fj
		push	esi
		push	[esp+17Ch+var_15C]
		push	ebx
		call	sub_10009E50
		add	esp, 0Ch
		cmp	[ebp+arg_4], 1
		jz	loc_100097F3
		push	0
		push	[esp+17Ch+Src]
		push	dword ptr [edi+1Ch]
		call	sub_10007FC0
		push	2
		push	ebx
		push	edi
		call	sub_1000A4F0
		push	0		; Time
		mov	dword ptr [ebx+18h], 0
		mov	dword ptr [ebx+1Ch], 0FFFFFFFFh
		call	ds:_time64
		mov	[ebx+0Ch], eax
		lea	eax, [ebx+4]
		push	ebx
		push	eax
		push	dword ptr [edi+20h]
		call	sub_10007F80
		add	esp, 28h
		mov	[esp+178h+var_168], eax
		test	eax, eax
		jnz	loc_10009783
		push	eax
		push	ebx
		push	edi
		call	sub_10009FC0
		push	1
		push	ebx
		push	edi
		call	sub_10009FC0
		add	esp, 18h
		jmp	loc_10009768
; ---------------------------------------------------------------------------

loc_10009E11:				; CODE XREF: sub_10009610+2DBj
		xor	ebx, ebx
		mov	eax, ebx
		pop	edi
		pop	esi
		pop	ebx
		mov	ecx, [esp+16Ch+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	esp, ebp
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_10009E2A:				; CODE XREF: sub_10009610+67Cj
					; sub_10009610+685j
		mov	eax, 1

loc_10009E2F:				; CODE XREF: sub_10009610+1ABj
					; sub_10009610+6A0j
		mov	ecx, [esp+178h+var_4]
		pop	edi
		pop	esi
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	esp, ebp
		pop	ebp
		retn
sub_10009610	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10009E50	proc near		; CODE XREF: sub_10009610+78Ap

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	ecx, [esp+arg_0]
		mov	eax, [esp+arg_4]
		mov	edx, [ecx+14h]
		test	edx, edx
		jz	short loc_10009E64
		mov	[edx+0Ch], eax
		jmp	short loc_10009E67
; ---------------------------------------------------------------------------

loc_10009E64:				; CODE XREF: sub_10009E50+Dj
		mov	[ecx+10h], eax

loc_10009E67:				; CODE XREF: sub_10009E50+12j
		mov	[ecx+14h], eax
		cmp	dword ptr [eax+0Ch], 0
		jz	short loc_10009E7C

loc_10009E70:				; CODE XREF: sub_10009E50+2Aj
		mov	eax, [eax+0Ch]
		mov	[ecx+14h], eax
		cmp	dword ptr [eax+0Ch], 0
		jnz	short loc_10009E70

loc_10009E7C:				; CODE XREF: sub_10009E50+1Ej
		mov	eax, [esp+arg_8]
		add	[ecx+8], eax
		xor	eax, eax
		retn
sub_10009E50	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10009E90	proc near		; CODE XREF: sub_10009120+DCp

var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ecx
		push	edi
		mov	edi, [esp+8+arg_4]
		lea	eax, [esp+8+var_4]
		push	0
		push	eax
		push	1
		push	edi
		push	[esp+18h+arg_8]
		call	sub_1000A2C0
		add	esp, 14h
		test	eax, eax
		jnz	loc_10009FB9
		push	esi
		mov	esi, [esp+0Ch+arg_0]
		mov	eax, [esi+0C0h]
		test	eax, eax
		jz	short loc_10009F1F
		mov	ecx, [esi+0DCh]
		test	ecx, ecx
		jz	short loc_10009F1F
		mov	edx, [esi+13Ch]
		test	edx, edx
		jz	short loc_10009F17
		call	edx
		cmp	[esi+150h], eax
		jnz	short loc_10009EE9
		inc	dword ptr [esi+188h]
		jmp	short loc_10009F1F
; ---------------------------------------------------------------------------

loc_10009EE9:				; CODE XREF: sub_10009E90+4Fj
		mov	eax, [esi+0DCh]
		push	dword ptr [eax+10h]
		mov	eax, [esi+0C0h]
		call	eax
		mov	eax, [esi+13Ch]
		add	esp, 4
		call	eax
		mov	[esi+150h], eax
		mov	dword ptr [esi+188h], 1
		jmp	short loc_10009F1F
; ---------------------------------------------------------------------------

loc_10009F17:				; CODE XREF: sub_10009E90+45j
		push	dword ptr [ecx+10h]
		call	eax
		add	esp, 4

loc_10009F1F:				; CODE XREF: sub_10009E90+31j
					; sub_10009E90+3Bj ...
		mov	eax, [esi+38h]
		lea	ecx, [esi+38h]
		test	eax, eax
		jz	short loc_10009F59
		lea	esp, [esp+0]

loc_10009F30:				; CODE XREF: sub_10009E90+ABj
		cmp	[eax], edi
		jz	short loc_10009F3F
		lea	ecx, [eax+10h]
		mov	eax, [ecx]
		test	eax, eax
		jnz	short loc_10009F30
		jmp	short loc_10009F59
; ---------------------------------------------------------------------------

loc_10009F3F:				; CODE XREF: sub_10009E90+A2j
		mov	eax, [ecx]
		test	eax, eax
		jz	short loc_10009F59
		lea	ecx, [eax+0Ch]
		mov	eax, [ecx]
		test	eax, eax
		jz	short loc_10009F59
		mov	edi, edi

loc_10009F50:				; CODE XREF: sub_10009E90+C7j
		lea	ecx, [eax+0Ch]
		mov	eax, [ecx]
		test	eax, eax
		jnz	short loc_10009F50

loc_10009F59:				; CODE XREF: sub_10009E90+97j
					; sub_10009E90+ADj ...
		mov	eax, [esp+0Ch+var_4]
		mov	[ecx], eax
		cmp	dword ptr [esi+0C0h], 0
		jz	short loc_10009FB6
		mov	eax, [esi+0DCh]
		test	eax, eax
		jz	short loc_10009FB6
		mov	ecx, [esi+13Ch]
		test	ecx, ecx
		jz	short loc_10009FA8
		call	ecx
		cmp	[esi+150h], eax
		jnz	short loc_10009FB6
		dec	dword ptr [esi+188h]
		jnz	short loc_10009FB6
		mov	dword ptr [esi+150h], 0FFFFFFFFh
		mov	dword ptr [esi+188h], 0
		mov	eax, [esi+0DCh]

loc_10009FA8:				; CODE XREF: sub_10009E90+EAj
		push	dword ptr [eax+10h]
		mov	eax, [esi+0C4h]
		call	eax
		add	esp, 4

loc_10009FB6:				; CODE XREF: sub_10009E90+D6j
					; sub_10009E90+E0j ...
		xor	eax, eax
		pop	esi

loc_10009FB9:				; CODE XREF: sub_10009E90+1Ej
		pop	edi
		pop	ecx
		retn
sub_10009E90	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10009FC0	proc near		; CODE XREF: sub_10009610+150p
					; sub_10009610+1DBp ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	edx, [esp+arg_8]
		mov	ecx, [esp+arg_4]
		push	esi
		mov	esi, [esp+4+arg_0]
		mov	eax, [esi+edx*4+24h]
		test	eax, eax
		jz	short loc_10009FDB
		mov	[eax+edx*4+2Ch], ecx
		jmp	short loc_10009FDF
; ---------------------------------------------------------------------------

loc_10009FDB:				; CODE XREF: sub_10009FC0+13j
		mov	[esi+edx*4+30h], ecx

loc_10009FDF:				; CODE XREF: sub_10009FC0+19j
		mov	dword ptr [ecx+edx*4+2Ch], 0
		mov	eax, [esi+edx*4+24h]
		mov	[ecx+edx*4+20h], eax
		xor	eax, eax
		mov	[esi+edx*4+24h], ecx
		pop	esi
		retn
sub_10009FC0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000A000	proc near		; CODE XREF: sub_10009610+122p
					; sub_10009610+735p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= byte ptr  0Ch
arg_C		= dword	ptr  10h

		cmp	[esp+arg_C], 0
		push	esi
		push	edi
		jz	short loc_1000A06B
		mov	esi, [esp+8+arg_0]
		mov	edi, [esp+8+arg_4]
		add	[esi+8], edi
		mov	ecx, [esi+4]
		mov	eax, [esi+8]
		test	ecx, ecx
		jz	short loc_1000A051
		cmp	eax, ecx
		jbe	short loc_1000A051
		cmp	edi, [esi+0Ch]
		jbe	short loc_1000A034
		sub	eax, edi
		mov	[esi+8], eax
		mov	eax, 4
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1000A034:				; CODE XREF: sub_1000A000+25j
					; sub_1000A000+4Fj
		push	0		; int
		push	0		; int
		push	0		; void *
		push	9		; int
		push	esi		; int
		call	sub_10009610
		add	esp, 14h
		test	eax, eax
		jnz	short loc_1000A060
		mov	eax, [esi+8]
		cmp	eax, [esi+4]
		ja	short loc_1000A034

loc_1000A051:				; CODE XREF: sub_1000A000+1Cj
					; sub_1000A000+20j
		test	[esp+8+arg_8], 1
		jz	short loc_1000A080
		add	[esi+0Ch], edi
		xor	eax, eax
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1000A060:				; CODE XREF: sub_1000A000+47j
		sub	[esi+8], edi
		mov	eax, 4
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1000A06B:				; CODE XREF: sub_1000A000+7j
		mov	eax, [esp+8+arg_0]
		mov	ecx, [esp+8+arg_4]
		sub	[eax+8], ecx
		test	[esp+8+arg_8], 1
		jz	short loc_1000A080
		sub	[eax+0Ch], ecx

loc_1000A080:				; CODE XREF: sub_1000A000+56j
					; sub_1000A000+7Bj
		pop	edi
		xor	eax, eax
		pop	esi
		retn
sub_1000A000	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000A090	proc near		; CODE XREF: sub_100081C0+104p

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	ecx, [esp+arg_0]
		sub	esp, 8
		mov	edx, [ecx+120h]
		test	edx, edx
		jnz	short loc_1000A0AA
		mov	eax, 52h
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_1000A0AA:				; CODE XREF: sub_1000A090+Fj
		mov	eax, [esp+8+arg_4]
		push	0		; int
		push	[esp+0Ch+arg_8]	; int
		mov	[esp+10h+var_4], eax
		lea	eax, [esp+10h+var_8]
		push	eax		; void *
		push	1		; int
		push	edx		; int
		mov	[esp+1Ch+var_8], ecx
		call	sub_10009610
		add	esp, 14h
		add	esp, 8
		retn
sub_1000A090	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000A0D0	proc near		; CODE XREF: sub_10008360+4ADp

var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ecx
		mov	edx, [esp+4+arg_0]
		mov	ecx, edx
		push	ebx
		push	ebp
		push	esi
		push	edi
		lea	esi, [ecx+1]
		mov	edi, edi

loc_1000A0E0:				; CODE XREF: sub_1000A0D0+15j
		mov	al, [ecx]
		inc	ecx
		test	al, al
		jnz	short loc_1000A0E0
		sub	ecx, esi
		lea	esi, [ecx+edx]
		xor	ecx, ecx
		mov	[esp+14h+arg_0], ecx

loc_1000A0F2:				; CODE XREF: sub_1000A0D0+D7j
		mov	ebp, [esp+14h+arg_4]
		test	ecx, ecx
		cmovnz	ebp, [esp+14h+arg_8]
		test	ebp, ebp
		jz	loc_1000A19F
		mov	eax, [ebp+0]
		xor	ebx, ebx
		test	eax, eax
		jz	loc_1000A19F
		mov	edi, ebp

loc_1000A114:				; CODE XREF: sub_1000A0D0+C5j
		mov	eax, [eax]
		mov	ecx, offset Src
		test	eax, eax
		cmovnz	ecx, eax
		push	ecx
		push	offset aS_0	; "%s\n"
		push	esi		; Dest
		call	ds:sprintf
		mov	edx, [edi]
		add	esp, 0Ch
		mov	eax, offset Src
		mov	ecx, [edx]
		test	ecx, ecx
		cmovnz	eax, ecx
		lea	ecx, [eax+1]
		mov	[esp+14h+var_4], ecx

loc_1000A145:				; CODE XREF: sub_1000A0D0+7Aj
		mov	cl, [eax]
		inc	eax
		test	cl, cl
		jnz	short loc_1000A145
		sub	eax, [esp+14h+var_4]
		inc	eax
		add	esi, eax
		mov	eax, [edx+4]
		test	eax, eax
		jz	short loc_1000A16C
		push	eax		; Size
		push	dword ptr [edx+8] ; Src
		push	esi		; Dst
		call	memcpy
		mov	edx, [edi]
		add	esp, 0Ch
		add	esi, [edx+4]

loc_1000A16C:				; CODE XREF: sub_1000A0D0+88j
		xor	eax, eax
		cmp	[edx+0Ch], al
		setnz	al
		push	eax
		push	offset aI	; "\n%i\n"
		push	esi		; Dest
		call	ds:sprintf
		inc	ebx
		add	esp, 0Ch
		add	esi, 3
		lea	edi, ds:0[ebx*4]
		add	edi, ebp
		mov	eax, [edi]
		test	eax, eax
		jnz	loc_1000A114
		mov	ecx, [esp+14h+arg_0]

loc_1000A19F:				; CODE XREF: sub_1000A0D0+2Fj
					; sub_1000A0D0+3Cj
		inc	ecx
		mov	[esp+14h+arg_0], ecx
		cmp	ecx, 2
		jl	loc_1000A0F2
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		pop	ecx
		retn
sub_1000A0D0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000A1C0	proc near		; CODE XREF: sub_100081C0:loc_100082CBp

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	ecx, [esp+arg_0]
		sub	esp, 8
		mov	edx, [ecx+120h]
		test	edx, edx
		jnz	short loc_1000A1DA
		mov	eax, 52h
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_1000A1DA:				; CODE XREF: sub_1000A1C0+Fj
		mov	eax, [esp+8+arg_4]
		push	0		; int
		push	[esp+0Ch+arg_8]	; int
		mov	[esp+10h+var_4], eax
		lea	eax, [esp+10h+var_8]
		push	eax		; void *
		push	2		; int
		push	edx		; int
		mov	[esp+1Ch+var_8], ecx
		call	sub_10009610
		add	esp, 14h
		add	esp, 8
		retn
sub_1000A1C0	endp


; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1000A200(void	*, void	*Src, int)
sub_1000A200	proc near		; CODE XREF: sub_10009610+421p
					; sub_10009610+43Ap ...

arg_0		= dword	ptr  4
Src		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		push	ebp
		push	esi
		push	edi
		push	0		; int
		push	[esp+14h+Src]	; Src
		call	ldap_explode_dn
		push	0		; int
		push	[esp+14h+arg_0]	; Src
		mov	ebp, eax
		call	ldap_explode_dn
		mov	edi, eax
		test	ebp, ebp
		jz	short loc_1000A297
		test	edi, edi
		jz	short loc_1000A297
		push	edi
		call	ldap_count_values
		push	ebp
		lea	ebx, [eax-1]
		call	ldap_count_values
		mov	esi, eax
		dec	esi
		js	short loc_1000A25C
		lea	ebx, [ebx+0]

loc_1000A240:				; CODE XREF: sub_1000A200+5Aj
		test	ebx, ebx
		js	short loc_1000A26F
		push	dword ptr [ebp+esi*4+0]	; Str2
		push	dword ptr [edi+ebx*4] ;	Str1
		call	ds:_stricmp
		add	esp, 8
		test	eax, eax
		jnz	short loc_1000A26F
		dec	ebx
		dec	esi
		jns	short loc_1000A240

loc_1000A25C:				; CODE XREF: sub_1000A200+38j
					; sub_1000A200+71j
		test	ebx, ebx
		jns	short loc_1000A27C
		xor	ebx, ebx
		cmp	[esp+10h+arg_8], 1
		setnz	bl
		add	ebx, 5
		jmp	short loc_1000A29C
; ---------------------------------------------------------------------------

loc_1000A26F:				; CODE XREF: sub_1000A200+42j
					; sub_1000A200+56j
		test	esi, esi
		js	short loc_1000A25C
		test	ebx, ebx
		mov	ebx, 5
		jmp	short loc_1000A29C
; ---------------------------------------------------------------------------

loc_1000A27C:				; CODE XREF: sub_1000A200+5Ej
		mov	eax, [esp+10h+arg_8]
		test	eax, eax
		jnz	short loc_1000A289
		lea	ebx, [eax+5]
		jmp	short loc_1000A29C
; ---------------------------------------------------------------------------

loc_1000A289:				; CODE XREF: sub_1000A200+82j
		cmp	eax, 2
		jz	short loc_1000A297
		neg	ebx
		sbb	ebx, ebx
		add	ebx, 6
		jmp	short loc_1000A29C
; ---------------------------------------------------------------------------

loc_1000A297:				; CODE XREF: sub_1000A200+20j
					; sub_1000A200+24j ...
		mov	ebx, 6

loc_1000A29C:				; CODE XREF: sub_1000A200+6Dj
					; sub_1000A200+7Aj ...
		test	ebp, ebp
		jz	short loc_1000A2A6
		push	ebp
		call	ldap_value_free

loc_1000A2A6:				; CODE XREF: sub_1000A200+9Ej
		test	edi, edi
		jz	short loc_1000A2B0
		push	edi
		call	ldap_value_free

loc_1000A2B0:				; CODE XREF: sub_1000A200+A8j
		pop	edi
		pop	esi
		pop	ebp
		mov	eax, ebx
		pop	ebx
		retn
sub_1000A200	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000A2C0	proc near		; CODE XREF: sub_10009610+6BDp
					; sub_10009E90+14p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	ebx
		push	ebp
		mov	ebp, [esp+8+arg_C]
		push	esi
		mov	esi, [esp+0Ch+arg_10]
		push	edi
		mov	dword ptr [ebp+0], 0
		test	esi, esi
		jz	short loc_1000A2DD
		mov	dword ptr [esi], 0

loc_1000A2DD:				; CODE XREF: sub_1000A2C0+15j
		mov	ebx, [esp+10h+arg_0]
		mov	edi, ebp
		test	ebx, ebx
		jz	loc_1000A3F7
		jmp	short loc_1000A2F0
; ---------------------------------------------------------------------------
		align 10h

loc_1000A2F0:				; CODE XREF: sub_1000A2C0+2Bj
					; sub_1000A2C0+131j
		push	18h
		push	1
		call	ldap_x_calloc
		add	esp, 8
		mov	[edi], eax
		test	eax, eax
		jz	loc_1000A3FE
		movdqu	xmm0, xmmword ptr [ebx]
		movdqu	xmmword	ptr [eax], xmm0
		movq	xmm0, qword ptr	[ebx+10h]
		movq	qword ptr [eax+10h], xmm0
		mov	eax, [edi]
		mov	dword ptr [eax+10h], 0
		mov	eax, [ebx+8]
		push	eax
		mov	[esp+14h+arg_0], eax
		call	ber_dup
		mov	esi, eax
		xor	ebp, ebp
		test	esi, esi
		jz	loc_1000A3BF
		mov	eax, [esi+68h]
		mov	ebp, 52Ch
		cmp	eax, 400h
		ja	short loc_1000A35B
		or	dword ptr [esi+80h], 1
		lea	eax, [esi+12Ch]
		mov	[esi+50h], eax
		jmp	short loc_1000A381
; ---------------------------------------------------------------------------

loc_1000A35B:				; CODE XREF: sub_1000A2C0+87j
		and	dword ptr [esi+80h], 0FFFFFFFEh
		push	eax
		push	1
		call	ldap_x_calloc
		add	esp, 8
		mov	[esi+50h], eax
		test	eax, eax
		jz	short loc_1000A379
		mov	ebp, [esi+68h]
		jmp	short loc_1000A37B
; ---------------------------------------------------------------------------

loc_1000A379:				; CODE XREF: sub_1000A2C0+B2j
		xor	ebp, ebp

loc_1000A37B:				; CODE XREF: sub_1000A2C0+B7j
		add	ebp, 52Ch

loc_1000A381:				; CODE XREF: sub_1000A2C0+99j
		mov	edx, [esi+50h]
		test	edx, edx
		jz	short loc_1000A3B3
		mov	ecx, [esp+10h+arg_0]
		mov	eax, [ecx+54h]
		sub	eax, [ecx+50h]
		mov	ecx, [esi+68h]
		add	eax, edx
		mov	[esi+54h], eax
		push	ecx		; Size
		lea	eax, [edx+ecx]
		mov	[esi+58h], eax
		mov	eax, [esp+14h+arg_0]
		push	dword ptr [eax+50h] ; Src
		push	edx		; Dst
		call	memcpy
		add	esp, 0Ch
		jmp	short loc_1000A3BF
; ---------------------------------------------------------------------------

loc_1000A3B3:				; CODE XREF: sub_1000A2C0+C6j
		push	0		; int
		push	esi		; Memory
		call	ber_free
		xor	esi, esi
		xor	ebp, ebp

loc_1000A3BF:				; CODE XREF: sub_1000A2C0+74j
					; sub_1000A2C0+F1j
		mov	eax, [edi]
		mov	ecx, [esp+10h+arg_4]
		mov	[eax+8], esi
		mov	eax, [edi]
		mov	esi, [esp+10h+arg_10]
		mov	[eax], ecx
		xor	ecx, ecx
		cmp	[esp+10h+arg_8], ecx
		mov	eax, [edi]
		setnz	cl
		mov	[eax+14h], ecx
		test	esi, esi
		jz	short loc_1000A3E7
		lea	eax, [ebp+18h]
		add	[esi], eax

loc_1000A3E7:				; CODE XREF: sub_1000A2C0+120j
		mov	edi, [edi]
		mov	ebx, [ebx+0Ch]
		add	edi, 0Ch
		test	ebx, ebx
		jnz	loc_1000A2F0

loc_1000A3F7:				; CODE XREF: sub_1000A2C0+25j
		xor	eax, eax

loc_1000A3F9:				; CODE XREF: sub_1000A2C0+15Dj
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1000A3FE:				; CODE XREF: sub_1000A2C0+40j
		mov	ebp, [esp+10h+arg_C]
		mov	ecx, [ebp+0]
		test	ecx, ecx
		jz	short loc_1000A42A
		push	ecx
		call	ldap_msgfree
		mov	dword ptr [ebp+0], 0
		mov	eax, 5Ah
		test	esi, esi
		jz	short loc_1000A3F9
		pop	edi
		mov	dword ptr [esi], 0
		pop	esi
		pop	ebp
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1000A42A:				; CODE XREF: sub_1000A2C0+147j
		pop	edi
		pop	esi
		pop	ebp
		mov	eax, 5Ah
		pop	ebx
		retn
sub_1000A2C0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1000A440(int,	int, __time64_t	Time1)
sub_1000A440	proc near		; CODE XREF: sub_10009610+1C0p
					; sub_10009610+2E4p

var_8		= qword	ptr -8
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
Time1		= qword	ptr  0Ch

		sub	esp, 8
		push	esi
		mov	esi, [esp+0Ch+arg_0]
		cmp	dword ptr [esi], 0
		jnz	short loc_1000A454
		xor	eax, eax
		pop	esi
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_1000A454:				; CODE XREF: sub_1000A440+Bj
		mov	eax, [esp+0Ch+arg_4]
		push	0
		push	dword ptr [eax+0Ch] ; Time2
		push	0
		push	dword ptr [esp+18h+Time1] ; Time1
		call	ds:_difftime64
		add	esp, 10h
		fstp	[esp+0Ch+var_8]
		movsd	xmm0, [esp+0Ch+var_8]
		call	sub_1001D581
		cmp	eax, [esi]
		pop	esi
		sbb	eax, eax
		inc	eax
		add	esp, 8
		retn
sub_1000A440	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000A490	proc near		; CODE XREF: sub_10009610+175p
					; sub_10009610+21Cp ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_4]
		test	esi, esi
		jz	short loc_1000A4E9
		mov	edx, [esi]
		push	edi
		mov	edi, 3Ch
		test	edx, edx
		jz	short loc_1000A4C5
		mov	ecx, edx
		lea	edi, [ecx+1]
		lea	ebx, [ebx+0]

loc_1000A4B0:				; CODE XREF: sub_1000A490+25j
		mov	al, [ecx]
		inc	ecx
		test	al, al
		jnz	short loc_1000A4B0
		sub	ecx, edi
		push	edx
		lea	edi, [ecx+3Dh]
		call	ldap_x_free
		add	esp, 4

loc_1000A4C5:				; CODE XREF: sub_1000A490+13j
		mov	eax, [esi+10h]
		test	eax, eax
		jz	short loc_1000A4D5
		add	edi, [esi+8]
		push	eax
		call	ldap_msgfree

loc_1000A4D5:				; CODE XREF: sub_1000A490+3Aj
		push	esi
		call	ldap_x_free
		mov	eax, [esp+0Ch+arg_0]
		add	esp, 4
		sub	[eax+8], edi
		sub	[eax+0Ch], edi
		pop	edi

loc_1000A4E9:				; CODE XREF: sub_1000A490+7j
		xor	eax, eax
		pop	esi
		retn
sub_1000A490	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000A4F0	proc near		; CODE XREF: sub_10009610+1D1p
					; sub_10009610+20Ap ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	ecx, [esp+arg_8]
		mov	edx, [esp+arg_4]
		push	esi
		mov	esi, [edx+ecx*4+2Ch]
		test	esi, esi
		jz	short loc_1000A509
		mov	eax, [edx+ecx*4+20h]
		mov	[esi+ecx*4+20h], eax

loc_1000A509:				; CODE XREF: sub_1000A4F0+Fj
		mov	esi, [edx+ecx*4+20h]
		test	esi, esi
		jz	short loc_1000A519
		mov	eax, [edx+ecx*4+2Ch]
		mov	[esi+ecx*4+2Ch], eax

loc_1000A519:				; CODE XREF: sub_1000A4F0+1Fj
		mov	esi, [esp+4+arg_0]
		cmp	[esi+ecx*4+24h], edx
		jnz	short loc_1000A52B
		mov	eax, [edx+ecx*4+20h]
		mov	[esi+ecx*4+24h], eax

loc_1000A52B:				; CODE XREF: sub_1000A4F0+31j
		cmp	[esi+ecx*4+30h], edx
		jnz	short loc_1000A539
		mov	eax, [edx+ecx*4+2Ch]
		mov	[esi+ecx*4+30h], eax

loc_1000A539:				; CODE XREF: sub_1000A4F0+3Fj
		mov	dword ptr [edx+ecx*4+2Ch], 0
		xor	eax, eax
		mov	dword ptr [edx+ecx*4+20h], 0
		pop	esi
		retn
sub_1000A4F0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000A550	proc near		; CODE XREF: sub_10008360+36Bp
					; sub_10008360+376p

arg_0		= dword	ptr  4

		push	ebx
		mov	ebx, [esp+4+arg_0]
		push	esi
		xor	esi, esi
		test	ebx, ebx
		jz	short loc_1000A59D
		mov	edx, [ebx]
		push	edi
		xor	edi, edi
		test	edx, edx
		jz	short loc_1000A597
		push	ebp

loc_1000A566:				; CODE XREF: sub_1000A550+3Ej
		mov	eax, [edx]
		mov	ecx, offset Src
		test	eax, eax
		cmovnz	ecx, eax
		lea	ebp, [ecx+1]

loc_1000A575:				; CODE XREF: sub_1000A550+2Aj
		mov	al, [ecx]
		inc	ecx
		test	al, al
		jnz	short loc_1000A575
		mov	edx, [edx+4]
		sub	ecx, ebp
		add	edx, 4
		inc	edi
		add	edx, ecx
		add	esi, edx
		mov	edx, [ebx+edi*4]
		test	edx, edx
		jnz	short loc_1000A566
		pop	ebp
		pop	edi
		mov	eax, esi
		pop	esi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1000A597:				; CODE XREF: sub_1000A550+13j
		pop	edi
		mov	eax, esi
		pop	esi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1000A59D:				; CODE XREF: sub_1000A550+Aj
		mov	eax, esi
		pop	esi
		pop	ebx
		retn
sub_1000A550	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000A5B0	proc near		; CODE XREF: sub_10008040+F9p

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	ecx, [esp+arg_0]
		sub	esp, 8
		mov	edx, [ecx+120h]
		test	edx, edx
		jnz	short loc_1000A5CA
		mov	eax, 52h
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_1000A5CA:				; CODE XREF: sub_1000A5B0+Fj
		mov	eax, [esp+8+arg_4]
		push	0		; int
		mov	[esp+0Ch+var_4], eax
		lea	eax, [esp+0Ch+var_8]
		push	0		; int
		push	eax		; void *
		push	4		; int
		push	edx		; int
		mov	[esp+1Ch+var_8], ecx
		call	sub_10009610
		add	esp, 14h
		add	esp, 8
		retn
sub_1000A5B0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000A5F0	proc near		; CODE XREF: sub_10009120+C5p

arg_0		= dword	ptr  4
arg_4		= byte ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, [esp+arg_0]
		push	esi
		mov	esi, [esp+4+arg_8]
		mov	dword ptr [esi], 0
		mov	eax, [eax+120h]
		test	eax, eax
		jnz	short loc_1000A610
		mov	eax, 52h
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1000A610:				; CODE XREF: sub_1000A5F0+17j
		push	0		; int
		lea	ecx, [esp+8+arg_8]
		push	ecx		; int
		lea	ecx, [esp+0Ch+arg_4]
		push	ecx		; void *
		push	3		; int
		push	eax		; int
		call	sub_10009610
		add	esp, 14h
		test	eax, eax
		jnz	short loc_1000A636
		mov	eax, [esp+4+arg_8]
		mov	eax, [eax+10h]
		mov	[esi], eax
		xor	eax, eax

loc_1000A636:				; CODE XREF: sub_1000A5F0+39j
		pop	esi
		retn
sub_1000A5F0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000A640	proc near		; CODE XREF: sub_10008360+1C3p

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		test	eax, eax
		jz	short locret_1000A678
		cmp	byte ptr [eax],	0
		mov	edx, eax
		jz	short locret_1000A678
		nop

loc_1000A650:				; CODE XREF: sub_1000A640+36j
		mov	cl, [eax]
		test	cl, cl
		jz	short loc_1000A66D

loc_1000A656:				; CODE XREF: sub_1000A640+2Bj
		cmp	cl, 20h
		jz	short loc_1000A665
		cmp	cl, 9
		jz	short loc_1000A665
		cmp	cl, 0Ah
		jnz	short loc_1000A679

loc_1000A665:				; CODE XREF: sub_1000A640+19j
					; sub_1000A640+1Ej
		mov	cl, [eax+1]
		inc	eax
		test	cl, cl
		jnz	short loc_1000A656

loc_1000A66D:				; CODE XREF: sub_1000A640+14j
					; sub_1000A640+3Dj ...
		movsx	ecx, byte ptr [eax]

loc_1000A670:				; CODE XREF: sub_1000A640+5Bj
		mov	[edx], cl
		inc	edx
		cmp	byte ptr [eax],	0
		jnz	short loc_1000A650

locret_1000A678:			; CODE XREF: sub_1000A640+6j
					; sub_1000A640+Dj
		retn
; ---------------------------------------------------------------------------

loc_1000A679:				; CODE XREF: sub_1000A640+23j
		mov	cl, [eax]
		test	cl, cl
		jz	short loc_1000A66D
		nop

loc_1000A680:				; CODE XREF: sub_1000A640+4Dj
		cmp	cl, 2Ch
		jz	short loc_1000A691
		inc	eax
		mov	[edx], cl
		inc	edx
		mov	cl, [eax]
		test	cl, cl
		jnz	short loc_1000A680
		jmp	short loc_1000A66D
; ---------------------------------------------------------------------------

loc_1000A691:				; CODE XREF: sub_1000A640+43j
		mov	cl, [eax]
		test	cl, cl
		jz	short loc_1000A66D
		movsx	ecx, cl
		inc	eax
		jmp	short loc_1000A670
sub_1000A640	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000A6A0	proc near		; CODE XREF: sub_10008360+105p

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		sub	esp, 8
		mov	ecx, [eax+10h]
		test	ecx, ecx
		jnz	short loc_1000A6B4
		xor	eax, eax
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_1000A6B4:				; CODE XREF: sub_1000A6A0+Cj
		mov	eax, [esp+8+arg_4]
		test	eax, eax
		push	ebx
		push	ebp
		push	esi
		mov	ebx, offset Src
		cmovnz	ebx, eax
		push	edi
		xor	edi, edi
		mov	[esp+18h+var_4], ebx
		mov	[esp+18h+var_8], edi
		cmp	[ecx], edi
		jz	loc_1000A773
		xor	eax, eax
		lea	ebx, [ebx+0]

loc_1000A6E0:				; CODE XREF: sub_1000A6A0+CDj
		push	0		; int
		push	dword ptr [eax+ecx] ; Src
		call	ldap_explode_dn
		push	0		; int
		push	ebx		; Src
		mov	ebp, eax
		call	ldap_explode_dn
		mov	ebx, eax
		test	ebp, ebp
		jz	short loc_1000A734
		test	ebx, ebx
		jz	short loc_1000A734
		push	ebx
		call	ldap_count_values
		push	ebp
		lea	esi, [eax-1]
		call	ldap_count_values
		mov	edi, eax
		dec	edi
		js	short loc_1000A72E

loc_1000A712:				; CODE XREF: sub_1000A6A0+8Cj
		test	esi, esi
		js	short loc_1000A780
		push	dword ptr [ebp+edi*4+0]	; Str2
		push	dword ptr [ebx+esi*4] ;	Str1
		call	ds:_stricmp
		add	esp, 8
		test	eax, eax
		jnz	short loc_1000A780
		dec	esi
		dec	edi
		jns	short loc_1000A712

loc_1000A72E:				; CODE XREF: sub_1000A6A0+70j
					; sub_1000A6A0+E2j
		mov	edi, [esp+18h+var_8]
		test	esi, esi

loc_1000A734:				; CODE XREF: sub_1000A6A0+58j
					; sub_1000A6A0+5Cj
		mov	esi, 6

loc_1000A739:				; CODE XREF: sub_1000A6A0+EFj
		test	ebp, ebp
		jz	short loc_1000A743
		push	ebp
		call	ldap_value_free

loc_1000A743:				; CODE XREF: sub_1000A6A0+9Bj
		test	ebx, ebx
		jz	short loc_1000A74D
		push	ebx
		call	ldap_value_free

loc_1000A74D:				; CODE XREF: sub_1000A6A0+A5j
		cmp	esi, 6
		jz	short loc_1000A791
		mov	ecx, [esp+18h+arg_0]
		inc	edi
		mov	ebx, [esp+18h+var_4]
		mov	[esp+18h+var_8], edi
		mov	ecx, [ecx+10h]
		lea	eax, ds:0[edi*4]
		cmp	dword ptr [eax+ecx], 0
		jnz	loc_1000A6E0

loc_1000A773:				; CODE XREF: sub_1000A6A0+32j
		pop	edi
		pop	esi
		pop	ebp
		mov	eax, 1
		pop	ebx
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_1000A780:				; CODE XREF: sub_1000A6A0+74j
					; sub_1000A6A0+88j
		test	edi, edi
		js	short loc_1000A72E
		mov	edi, [esp+18h+var_8]
		test	esi, esi
		mov	esi, 5
		jmp	short loc_1000A739
; ---------------------------------------------------------------------------

loc_1000A791:				; CODE XREF: sub_1000A6A0+B0j
		pop	edi
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		add	esp, 8
		retn
sub_1000A6A0	endp

; ---------------------------------------------------------------------------
		align 10h

loc_1000A7A0:				; DATA XREF: ldap_memcache_init+228o
		mov	edx, [esp+4]
		xor	ecx, ecx
		push	edi
		mov	edi, [edx]
		test	edi, edi
		jz	short loc_1000A7C1
		mov	eax, [esp+0Ch]
		mov	eax, [eax]

loc_1000A7B3:				; CODE XREF: .text:1000A7BFj
		cmp	[edi+18h], eax
		jz	short loc_1000A7C8
		mov	ecx, edi
		mov	edi, [edi+38h]
		test	edi, edi
		jnz	short loc_1000A7B3

loc_1000A7C1:				; CODE XREF: .text:1000A7ABj
		mov	eax, 20h
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_1000A7C8:				; CODE XREF: .text:1000A7B6j
		mov	eax, [edi+38h]
		test	ecx, ecx
		jz	short loc_1000A7D4
		mov	[ecx+38h], eax
		jmp	short loc_1000A7D6
; ---------------------------------------------------------------------------

loc_1000A7D4:				; CODE XREF: .text:1000A7CDj
		mov	[edx], eax

loc_1000A7D6:				; CODE XREF: .text:1000A7D2j
		push	ebx
		mov	ebx, [esp+14h]
		push	ebp
		push	esi
		mov	esi, edi
		nop

loc_1000A7E0:				; CODE XREF: .text:1000A869j
		mov	ecx, [esi+34h]
		mov	edi, [edi+20h]
		test	ecx, ecx
		jz	short loc_1000A7F0
		mov	eax, [esi+28h]
		mov	[ecx+28h], eax

loc_1000A7F0:				; CODE XREF: .text:1000A7E8j
		mov	ecx, [esi+28h]
		test	ecx, ecx
		jz	short loc_1000A7FD
		mov	eax, [esi+34h]
		mov	[ecx+34h], eax

loc_1000A7FD:				; CODE XREF: .text:1000A7F5j
		cmp	[ebx+2Ch], esi
		jnz	short loc_1000A808
		mov	eax, [esi+28h]
		mov	[ebx+2Ch], eax

loc_1000A808:				; CODE XREF: .text:1000A800j
		cmp	[ebx+38h], esi
		jnz	short loc_1000A813
		mov	eax, [esi+34h]
		mov	[ebx+38h], eax

loc_1000A813:				; CODE XREF: .text:1000A80Bj
		mov	edx, [esi]
		mov	ebp, 3Ch
		mov	dword ptr [esi+34h], 0
		mov	dword ptr [esi+28h], 0
		test	edx, edx
		jz	short loc_1000A846
		mov	ecx, edx
		lea	ebp, [ecx+1]

loc_1000A831:				; CODE XREF: .text:1000A836j
		mov	al, [ecx]
		inc	ecx
		test	al, al
		jnz	short loc_1000A831
		sub	ecx, ebp
		push	edx
		lea	ebp, [ecx+3Dh]
		call	ldap_x_free
		add	esp, 4

loc_1000A846:				; CODE XREF: .text:1000A82Aj
		mov	eax, [esi+10h]
		test	eax, eax
		jz	short loc_1000A856
		add	ebp, [esi+8]
		push	eax
		call	ldap_msgfree

loc_1000A856:				; CODE XREF: .text:1000A84Bj
		push	esi
		call	ldap_x_free
		sub	[ebx+8], ebp
		add	esp, 4
		sub	[ebx+0Ch], ebp
		mov	esi, edi
		test	edi, edi
		jnz	loc_1000A7E0
		pop	esi
		pop	ebp
		pop	ebx
		xor	eax, eax
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_1000A880:				; DATA XREF: ldap_memcache_init+23Co
		mov	eax, [esp+4]
		push	ebp
		mov	ebp, [eax]
		test	ebp, ebp
		jz	loc_1000A950
		push	ebx
		push	esi
		push	edi
		mov	edi, [esp+18h]

loc_1000A896:				; CODE XREF: .text:1000A947j
		mov	eax, [eax]
		mov	esi, ebp
		add	eax, 38h
		mov	[esp+14h], eax
		test	ebp, ebp
		jz	loc_1000A943
		lea	esp, [esp+0]

loc_1000A8B0:				; CODE XREF: .text:1000A939j
		mov	ecx, [esi+34h]
		mov	ebp, [ebp+20h]
		test	ecx, ecx
		jz	short loc_1000A8C0
		mov	eax, [esi+28h]
		mov	[ecx+28h], eax

loc_1000A8C0:				; CODE XREF: .text:1000A8B8j
		mov	ecx, [esi+28h]
		test	ecx, ecx
		jz	short loc_1000A8CD
		mov	eax, [esi+34h]
		mov	[ecx+34h], eax

loc_1000A8CD:				; CODE XREF: .text:1000A8C5j
		cmp	[edi+2Ch], esi
		jnz	short loc_1000A8D8
		mov	eax, [esi+28h]
		mov	[edi+2Ch], eax

loc_1000A8D8:				; CODE XREF: .text:1000A8D0j
		cmp	[edi+38h], esi
		jnz	short loc_1000A8E3
		mov	eax, [esi+34h]
		mov	[edi+38h], eax

loc_1000A8E3:				; CODE XREF: .text:1000A8DBj
		mov	edx, [esi]
		mov	ebx, 3Ch
		mov	dword ptr [esi+34h], 0
		mov	dword ptr [esi+28h], 0
		test	edx, edx
		jz	short loc_1000A916
		mov	ecx, edx
		lea	ebx, [ecx+1]

loc_1000A901:				; CODE XREF: .text:1000A906j
		mov	al, [ecx]
		inc	ecx
		test	al, al
		jnz	short loc_1000A901
		sub	ecx, ebx
		push	edx
		lea	ebx, [ecx+3Dh]
		call	ldap_x_free
		add	esp, 4

loc_1000A916:				; CODE XREF: .text:1000A8FAj
		mov	eax, [esi+10h]
		test	eax, eax
		jz	short loc_1000A926
		add	ebx, [esi+8]
		push	eax
		call	ldap_msgfree

loc_1000A926:				; CODE XREF: .text:1000A91Bj
		push	esi
		call	ldap_x_free
		sub	[edi+8], ebx
		add	esp, 4
		sub	[edi+0Ch], ebx
		mov	esi, ebp
		test	ebp, ebp
		jnz	loc_1000A8B0
		mov	eax, [esp+14h]

loc_1000A943:				; CODE XREF: .text:1000A8A3j
		mov	ebp, [eax]
		test	ebp, ebp
		jnz	loc_1000A896
		pop	edi
		pop	esi
		pop	ebx

loc_1000A950:				; CODE XREF: .text:1000A889j
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_1000A960:				; DATA XREF: ldap_memcache_init+21Eo
		mov	eax, [esp+4]
		push	esi
		mov	esi, [esp+10h]
		mov	dword ptr [esi], 0
		test	eax, eax
		jz	short loc_1000A98C
		mov	edx, [esp+0Ch]
		mov	ecx, [edx]
		lea	esp, [esp+0]

loc_1000A980:				; CODE XREF: .text:1000A98Aj
		cmp	[eax+18h], ecx
		jz	short loc_1000A993
		mov	eax, [eax+38h]
		test	eax, eax
		jnz	short loc_1000A980

loc_1000A98C:				; CODE XREF: .text:1000A971j
		mov	eax, 20h
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1000A993:				; CODE XREF: .text:1000A983j
		mov	ecx, [edx+4]

loc_1000A996:				; CODE XREF: .text:1000A9A0j
		cmp	[eax+1Ch], ecx
		jz	short loc_1000A9A9
		mov	eax, [eax+20h]
		test	eax, eax
		jnz	short loc_1000A996
		mov	eax, 20h
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1000A9A9:				; CODE XREF: .text:1000A999j
		mov	[esi], eax
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_1000A9B0:				; DATA XREF: ldap_memcache_init+20Ao
		mov	eax, [esp+8]
		xor	edx, edx
		mov	ecx, [eax]
		mov	eax, ecx
		shr	eax, 0Ch
		shl	ecx, 14h
		add	eax, ecx
		div	dword ptr [esp+4]
		mov	eax, edx
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_1000A9D0:				; DATA XREF: ldap_memcache_init+214o
		push	esi
		mov	esi, [esp+8]
		push	edi
		mov	eax, [esi]
		test	eax, eax
		jz	short loc_1000AA3C
		mov	edi, [esp+10h]
		mov	edx, [edi]

loc_1000A9E2:				; CODE XREF: .text:1000A9EEj
		cmp	[eax+18h], edx
		jz	short loc_1000AA07
		mov	ecx, eax
		mov	eax, [eax+38h]
		test	eax, eax
		jnz	short loc_1000A9E2
		test	ecx, ecx
		jz	short loc_1000AA3C
		mov	eax, [esp+14h]
		mov	[ecx+38h], eax
		pop	edi
		pop	esi
		mov	dword ptr [eax+38h], 0
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_1000AA07:				; CODE XREF: .text:1000A9E5j
		mov	edx, [edi+4]
		lea	ebx, [ebx+0]

loc_1000AA10:				; CODE XREF: .text:1000AA1Cj
		cmp	[eax+1Ch], edx
		jz	short loc_1000AA34
		mov	ecx, eax
		mov	eax, [eax+20h]
		test	eax, eax
		jnz	short loc_1000AA10
		mov	eax, [esp+14h]
		mov	[ecx+20h], eax
		pop	edi
		pop	esi
		mov	[eax+2Ch], ecx
		mov	dword ptr [eax+20h], 0
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_1000AA34:				; CODE XREF: .text:1000AA13j
		pop	edi
		mov	eax, 44h
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1000AA3C:				; CODE XREF: .text:1000A9DAj
					; .text:1000A9F2j
		mov	eax, [esp+14h]
		mov	[esi], eax
		pop	edi
		pop	esi
		mov	dword ptr [eax+38h], 0
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000AA50	proc near		; DATA XREF: ldap_memcache_init+232o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		mov	ebx, [esp+4+arg_0]
		xor	edx, edx
		push	esi
		push	edi
		mov	edi, [esp+0Ch+arg_8]
		mov	eax, [ebx]
		test	edi, edi
		jz	short loc_1000AA65
		mov	[edi], edx

loc_1000AA65:				; CODE XREF: sub_1000AA50+11j
		test	eax, eax
		jz	short loc_1000AA7E
		mov	esi, [esp+0Ch+arg_4]
		mov	ecx, [esi]
		nop

loc_1000AA70:				; CODE XREF: sub_1000AA50+2Cj
		cmp	[eax+18h], ecx
		jz	short loc_1000AA87
		mov	edx, eax
		mov	eax, [eax+38h]
		test	eax, eax
		jnz	short loc_1000AA70

loc_1000AA7E:				; CODE XREF: sub_1000AA50+17j
		pop	edi
		pop	esi
		mov	eax, 20h
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1000AA87:				; CODE XREF: sub_1000AA50+23j
		mov	esi, [esi+4]
		mov	ecx, eax
		lea	esp, [esp+0]

loc_1000AA90:				; CODE XREF: sub_1000AA50+4Aj
		cmp	[ecx+1Ch], esi
		jz	short loc_1000AAA3
		mov	ecx, [ecx+20h]
		test	ecx, ecx
		jnz	short loc_1000AA90
		pop	edi
		pop	esi
		lea	eax, [ecx+20h]
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1000AAA3:				; CODE XREF: sub_1000AA50+43j
		test	edi, edi
		jz	short loc_1000AABE
		mov	dword ptr [ecx+20h], 0
		mov	dword ptr [ecx+2Ch], 0
		mov	dword ptr [ecx+38h], 0
		mov	[edi], ecx

loc_1000AABE:				; CODE XREF: sub_1000AA50+55j
		cmp	ecx, eax
		jz	short loc_1000AAE2
		mov	edx, [ecx+2Ch]
		test	edx, edx
		jz	short loc_1000AACF
		mov	eax, [ecx+20h]
		mov	[edx+20h], eax

loc_1000AACF:				; CODE XREF: sub_1000AA50+77j
		mov	edx, [ecx+20h]
		test	edx, edx
		jz	short loc_1000AADC
		mov	eax, [ecx+2Ch]
		mov	[edx+2Ch], eax

loc_1000AADC:				; CODE XREF: sub_1000AA50+84j
		pop	edi
		pop	esi
		xor	eax, eax
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1000AAE2:				; CODE XREF: sub_1000AA50+70j
		mov	ecx, [eax+20h]
		test	edx, edx
		jz	short loc_1000AB0B
		test	ecx, ecx
		jz	short loc_1000AAFF
		mov	[edx+38h], ecx
		mov	ecx, [eax+20h]
		mov	eax, [eax+38h]
		pop	edi
		pop	esi
		mov	[ecx+38h], eax
		xor	eax, eax
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1000AAFF:				; CODE XREF: sub_1000AA50+9Bj
		mov	eax, [eax+38h]
		pop	edi
		pop	esi
		mov	[edx+38h], eax
		xor	eax, eax
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1000AB0B:				; CODE XREF: sub_1000AA50+97j
		test	ecx, ecx
		jz	short loc_1000AB20
		mov	[ebx], ecx
		mov	ecx, [eax+20h]
		mov	eax, [eax+38h]
		pop	edi
		pop	esi
		mov	[ecx+38h], eax
		xor	eax, eax
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1000AB20:				; CODE XREF: sub_1000AA50+BDj
		mov	eax, [eax+38h]
		pop	edi
		mov	[ebx], eax
		xor	eax, eax
		pop	esi
		pop	ebx
		retn
sub_1000AA50	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 524. ldap_count_messages

; =============== S U B	R O U T	I N E =======================================


		public ldap_count_messages
ldap_count_messages proc near		; DATA XREF: .rdata:off_10020938o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		cmp	[esp+arg_0], 0
		jnz	short loc_1000AB3D
		or	eax, 0FFFFFFFFh
		retn	8
; ---------------------------------------------------------------------------

loc_1000AB3D:				; CODE XREF: ldap_count_messages+5j
		mov	ecx, [esp+arg_4]
		xor	eax, eax
		test	ecx, ecx
		jz	short locret_1000AB4F

loc_1000AB47:				; CODE XREF: ldap_count_messages+1Dj
		mov	ecx, [ecx+0Ch]
		inc	eax
		test	ecx, ecx
		jnz	short loc_1000AB47

locret_1000AB4F:			; CODE XREF: ldap_count_messages+15j
		retn	8
ldap_count_messages endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 511. ldap_first_message

; =============== S U B	R O U T	I N E =======================================


		public ldap_first_message
ldap_first_message proc	near		; DATA XREF: .rdata:off_10020938o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_4]
		xor	ecx, ecx
		cmp	[esp+arg_0], ecx
		cmovz	eax, ecx
		retn	8
ldap_first_message endp

; Exported entry 442. ldap_msgid

; =============== S U B	R O U T	I N E =======================================


		public ldap_msgid
ldap_msgid	proc near		; DATA XREF: .rdata:off_10020938o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		test	eax, eax
		jnz	short loc_1000AB7E
		or	eax, 0FFFFFFFFh
		retn	4
; ---------------------------------------------------------------------------

loc_1000AB7E:				; CODE XREF: ldap_msgid+6j
		mov	eax, [eax]
		retn	4
ldap_msgid	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 444. ldap_msgtype

; =============== S U B	R O U T	I N E =======================================


		public ldap_msgtype
ldap_msgtype	proc near		; DATA XREF: .rdata:off_10020938o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		test	eax, eax
		jnz	short loc_1000AB9E
		or	eax, 0FFFFFFFFh
		retn	4
; ---------------------------------------------------------------------------

loc_1000AB9E:				; CODE XREF: ldap_msgtype+6j
		mov	eax, [eax+4]
		retn	4
ldap_msgtype	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 512. ldap_next_message

; =============== S U B	R O U T	I N E =======================================


		public ldap_next_message
ldap_next_message proc near		; DATA XREF: .rdata:off_10020938o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		cmp	[esp+arg_0], 0
		jz	short loc_1000ABC6
		mov	eax, [esp+arg_4]
		test	eax, eax
		jz	short loc_1000ABC6
		mov	eax, [eax+0Ch]
		test	eax, eax
		jnz	short locret_1000ABC8

loc_1000ABC6:				; CODE XREF: ldap_next_message+5j
					; ldap_next_message+Dj
		xor	eax, eax

locret_1000ABC8:			; CODE XREF: ldap_next_message+14j
		retn	8
ldap_next_message endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  23. ldap_modify

; =============== S U B	R O U T	I N E =======================================


		public ldap_modify
ldap_modify	proc near		; DATA XREF: .rdata:off_10020938o

var_4		= dword	ptr -4
Memory		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ecx
		lea	eax, [esp+4+var_4]
		push	eax		; int
		push	0		; int
		push	0		; int
		push	[esp+10h+arg_8]	; int
		push	[esp+14h+arg_4]	; int
		push	[esp+18h+Memory] ; Memory
		call	ldap_modify_ext
		or	ecx, 0FFFFFFFFh
		test	eax, eax
		cmovz	ecx, [esp+4+var_4]
		mov	eax, ecx
		pop	ecx
		retn	0Ch
ldap_modify	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 509. ldap_modify_ext

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	ldap_modify_ext(void *Memory, int, int,	int, int, int)
		public ldap_modify_ext
ldap_modify_ext	proc near		; CODE XREF: ldap_modify+15p
					; ldap_modify_ext_s+1Cp ...

Memory		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_14		= dword	ptr  18h

		push	esi
		mov	esi, [esp+4+Memory]
		test	esi, esi
		jnz	short loc_1000AC10
		lea	eax, [esi+59h]
		pop	esi
		retn	18h
; ---------------------------------------------------------------------------

loc_1000AC10:				; CODE XREF: ldap_modify_ext+7j
		push	ebp
		mov	ebp, [esp+8+arg_14]
		test	ebp, ebp
		jnz	short loc_1000AC2B
		push	ebp
		push	ebp
		push	59h
		push	esi
		call	ldap_set_lderrno
		lea	eax, [ebp+59h]
		pop	ebp
		pop	esi
		retn	18h
; ---------------------------------------------------------------------------

loc_1000AC2B:				; CODE XREF: ldap_modify_ext+17j
		push	ebx
		mov	ebx, [esp+0Ch+arg_8]
		test	ebx, ebx
		jz	loc_1000AF95
		cmp	dword ptr [ebx], 0
		jz	loc_1000AF95
		mov	eax, [esp+0Ch+arg_4]
		test	eax, eax
		mov	ecx, [esi+0C0h]
		push	edi
		mov	edi, offset Src
		cmovnz	edi, eax
		mov	[esp+10h+arg_14], edi
		test	ecx, ecx
		jz	short loc_1000ACBA
		mov	eax, [esi+0DCh]
		test	eax, eax
		jz	short loc_1000ACBA
		mov	edx, [esi+13Ch]
		test	edx, edx
		jz	short loc_1000ACB2
		call	edx
		cmp	[esi+148h], eax
		jnz	short loc_1000AC84
		inc	dword ptr [esi+180h]
		jmp	short loc_1000ACBA
; ---------------------------------------------------------------------------

loc_1000AC84:				; CODE XREF: ldap_modify_ext+7Aj
		mov	eax, [esi+0DCh]
		push	dword ptr [eax+8]
		mov	eax, [esi+0C0h]
		call	eax
		mov	eax, [esi+13Ch]
		add	esp, 4
		call	eax
		mov	[esi+148h], eax
		mov	dword ptr [esi+180h], 1
		jmp	short loc_1000ACBA
; ---------------------------------------------------------------------------

loc_1000ACB2:				; CODE XREF: ldap_modify_ext+70j
		push	dword ptr [eax+8]
		call	ecx
		add	esp, 4

loc_1000ACBA:				; CODE XREF: ldap_modify_ext+5Cj
					; ldap_modify_ext+66j ...
		inc	dword ptr [esi+30h]
		mov	eax, [esi+30h]
		mov	[ebp+0], eax
		cmp	dword ptr [esi+0C0h], 0
		jz	short loc_1000AD1A
		mov	eax, [esi+0DCh]
		test	eax, eax
		jz	short loc_1000AD1A
		mov	ecx, [esi+13Ch]
		test	ecx, ecx
		jz	short loc_1000AD0C
		call	ecx
		cmp	[esi+148h], eax
		jnz	short loc_1000AD1A
		dec	dword ptr [esi+180h]
		jnz	short loc_1000AD1A
		mov	dword ptr [esi+148h], 0FFFFFFFFh
		mov	dword ptr [esi+180h], 0
		mov	eax, [esi+0DCh]

loc_1000AD0C:				; CODE XREF: ldap_modify_ext+DEj
		push	dword ptr [eax+8]
		mov	eax, [esi+0C4h]
		call	eax
		add	esp, 4

loc_1000AD1A:				; CODE XREF: ldap_modify_ext+CAj
					; ldap_modify_ext+D4j ...
		cmp	dword ptr [esi+0E0h], 0
		jz	loc_1000AE83
		cmp	dword ptr [esi+104h], 0
		jz	loc_1000AE83
		mov	eax, [esi+0C0h]
		test	eax, eax
		jz	short loc_1000AD98
		mov	ecx, [esi+0DCh]
		test	ecx, ecx
		jz	short loc_1000AD98
		mov	edx, [esi+13Ch]
		test	edx, edx
		jz	short loc_1000AD91
		call	edx
		cmp	[esi+140h], eax
		jnz	short loc_1000AD64
		inc	dword ptr [esi+178h]
		jmp	short loc_1000AD98
; ---------------------------------------------------------------------------

loc_1000AD64:				; CODE XREF: ldap_modify_ext+15Aj
		mov	eax, [esi+0DCh]
		push	dword ptr [eax]
		mov	eax, [esi+0C0h]
		call	eax
		mov	eax, [esi+13Ch]
		add	esp, 4
		call	eax
		mov	[esi+140h], eax
		mov	dword ptr [esi+178h], 1
		jmp	short loc_1000AD98
; ---------------------------------------------------------------------------

loc_1000AD91:				; CODE XREF: ldap_modify_ext+150j
		push	dword ptr [ecx]
		call	eax
		add	esp, 4

loc_1000AD98:				; CODE XREF: ldap_modify_ext+13Cj
					; ldap_modify_ext+146j	...
		mov	eax, [esi+104h]
		push	ebx
		push	edi
		push	66h
		push	dword ptr [ebp+0]
		push	esi
		call	eax
		add	esp, 14h
		test	eax, eax
		jz	short loc_1000AE2D
		mov	[ebp+0], eax
		mov	ecx, [esi+0C0h]
		test	ecx, ecx
		jz	short loc_1000AE24
		mov	eax, [esi+0DCh]
		test	eax, eax
		jz	short loc_1000AE24
		mov	edx, [esi+13Ch]
		test	edx, edx
		jz	short loc_1000AE1D
		call	edx
		cmp	[esi+140h], eax
		jnz	short loc_1000ADE9
		inc	dword ptr [esi+178h]
		xor	eax, eax
		pop	edi
		pop	ebx
		pop	ebp
		pop	esi
		retn	18h
; ---------------------------------------------------------------------------

loc_1000ADE9:				; CODE XREF: ldap_modify_ext+1D8j
		mov	eax, [esi+0DCh]
		push	dword ptr [eax]
		mov	eax, [esi+0C0h]
		call	eax
		mov	eax, [esi+13Ch]
		add	esp, 4
		call	eax
		pop	edi
		pop	ebx
		mov	[esi+140h], eax
		xor	eax, eax
		pop	ebp
		mov	dword ptr [esi+178h], 1
		pop	esi
		retn	18h
; ---------------------------------------------------------------------------

loc_1000AE1D:				; CODE XREF: ldap_modify_ext+1CEj
		push	dword ptr [eax]
		call	ecx
		add	esp, 4

loc_1000AE24:				; CODE XREF: ldap_modify_ext+1BAj
					; ldap_modify_ext+1C4j	...
		xor	eax, eax

loc_1000AE26:				; CODE XREF: ldap_modify_ext+293j
		pop	edi
		pop	ebx
		pop	ebp
		pop	esi
		retn	18h
; ---------------------------------------------------------------------------

loc_1000AE2D:				; CODE XREF: ldap_modify_ext+1ADj
		cmp	dword ptr [esi+0C0h], 0
		jz	short loc_1000AE83
		mov	eax, [esi+0DCh]
		test	eax, eax
		jz	short loc_1000AE83
		mov	ecx, [esi+13Ch]
		test	ecx, ecx
		jz	short loc_1000AE76
		call	ecx
		cmp	[esi+140h], eax
		jnz	short loc_1000AE83
		dec	dword ptr [esi+178h]
		jnz	short loc_1000AE83
		mov	dword ptr [esi+140h], 0FFFFFFFFh
		mov	dword ptr [esi+178h], 0
		mov	eax, [esi+0DCh]

loc_1000AE76:				; CODE XREF: ldap_modify_ext+248j
		push	dword ptr [eax]
		mov	eax, [esi+0C4h]
		call	eax
		add	esp, 4

loc_1000AE83:				; CODE XREF: ldap_modify_ext+121j
					; ldap_modify_ext+12Ej	...
		lea	eax, [esp+10h+Memory]
		push	eax
		push	esi
		call	sub_1000EF40
		add	esp, 8
		test	eax, eax
		jnz	short loc_1000AE26
		push	edi
		push	66h
		push	dword ptr [ebp+0]
		push	offset aItS	; "{it{s{"
		push	[esp+20h+Memory]
		call	ber_printf
		add	esp, 14h
		cmp	eax, 0FFFFFFFFh
		jz	short loc_1000AF13
		xor	edi, edi
		cmp	[ebx], edi
		jz	short loc_1000AEFD
		mov	eax, ebx
		lea	esp, [esp+0]

loc_1000AEC0:				; CODE XREF: ldap_modify_ext+2FBj
		mov	eax, [eax]
		push	dword ptr [eax+8]
		mov	ecx, [eax]
		push	dword ptr [eax+4]
		test	cl, cl
		jns	short loc_1000AEDC
		and	ecx, 0FFFFFF7Fh
		push	ecx
		push	offset aESV	; "{e{s[V]}}"
		jmp	short loc_1000AEE2
; ---------------------------------------------------------------------------

loc_1000AEDC:				; CODE XREF: ldap_modify_ext+2CCj
		push	ecx
		push	offset aESV_0	; "{e{s[v]}}"

loc_1000AEE2:				; CODE XREF: ldap_modify_ext+2DAj
		push	[esp+20h+Memory]
		call	ber_printf
		add	esp, 14h
		cmp	eax, 0FFFFFFFFh
		jz	short loc_1000AF13
		inc	edi
		cmp	dword ptr [ebx+edi*4], 0
		lea	eax, [ebx+edi*4]
		jnz	short loc_1000AEC0

loc_1000AEFD:				; CODE XREF: ldap_modify_ext+2B5j
		push	offset asc_1001F1C8 ; "}}"
		push	[esp+14h+Memory]
		call	ber_printf
		add	esp, 8
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_1000AF36

loc_1000AF13:				; CODE XREF: ldap_modify_ext+2AFj
					; ldap_modify_ext+2F1j
		push	0
		push	0
		push	53h
		push	esi
		call	ldap_set_lderrno
		push	1		; int
		push	[esp+14h+Memory] ; Memory
		call	ber_free
		pop	edi
		pop	ebx
		pop	ebp
		mov	eax, 53h
		pop	esi
		retn	18h
; ---------------------------------------------------------------------------

loc_1000AF36:				; CODE XREF: ldap_modify_ext+311j
		push	[esp+10h+Memory]
		push	1
		push	[esp+18h+arg_C]
		push	esi
		call	sub_10002DD0
		mov	edi, eax
		add	esp, 10h
		test	edi, edi
		jz	short loc_1000AF63
		push	1		; int
		push	[esp+14h+Memory] ; Memory
		call	ber_free
		mov	eax, edi
		pop	edi
		pop	ebx
		pop	ebp
		pop	esi
		retn	18h
; ---------------------------------------------------------------------------

loc_1000AF63:				; CODE XREF: ldap_modify_ext+34Dj
		push	[esp+10h+Memory]
		push	[esp+14h+arg_14]
		push	66h
		push	dword ptr [ebp+0]
		push	esi
		call	sub_1000FC30
		add	esp, 14h
		mov	[ebp+0], eax
		test	eax, eax
		jns	loc_1000AE24
		push	0
		push	0
		push	esi
		call	ldap_get_lderrno
		pop	edi
		pop	ebx
		pop	ebp
		pop	esi
		retn	18h
; ---------------------------------------------------------------------------

loc_1000AF95:				; CODE XREF: ldap_modify_ext+32j
					; ldap_modify_ext+3Bj
		push	0
		push	0
		push	59h
		push	esi
		call	ldap_set_lderrno
		pop	ebx
		pop	ebp
		mov	eax, 59h
		pop	esi
		retn	18h
ldap_modify_ext	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 510. ldap_modify_ext_s

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	ldap_modify_ext_s(void *Memory,	int, int, int, int)
		public ldap_modify_ext_s
ldap_modify_ext_s proc near		; DATA XREF: .rdata:off_10020938o

var_4		= dword	ptr -4
Memory		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	ecx
		push	esi
		mov	esi, [esp+8+Memory]
		lea	eax, [esp+8+var_4]
		push	eax		; int
		push	[esp+0Ch+arg_10] ; int
		push	[esp+10h+arg_C]	; int
		push	[esp+14h+arg_8]	; int
		push	[esp+18h+arg_4]	; int
		push	esi		; Memory
		call	ldap_modify_ext
		test	eax, eax
		jnz	short loc_1000B008
		lea	eax, [esp+8+arg_10]
		push	eax
		push	0
		push	1
		push	[esp+14h+var_4]
		push	esi
		call	ldap_result
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_1000AFFC
		push	0
		push	0
		push	esi
		call	ldap_get_lderrno
		pop	esi
		pop	ecx
		retn	14h
; ---------------------------------------------------------------------------

loc_1000AFFC:				; CODE XREF: ldap_modify_ext_s+3Bj
		push	1
		push	[esp+0Ch+arg_10]
		push	esi
		call	ldap_result2error

loc_1000B008:				; CODE XREF: ldap_modify_ext_s+23j
		pop	esi
		pop	ecx
		retn	14h
ldap_modify_ext_s endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  48. ldap_modify_s

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	ldap_modify_s(void *Memory, int, int)
		public ldap_modify_s
ldap_modify_s	proc near		; DATA XREF: .rdata:off_10020938o

var_4		= dword	ptr -4
Memory		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ecx
		push	esi
		mov	esi, [esp+8+Memory]
		lea	eax, [esp+8+var_4]
		push	eax		; int
		push	0		; int
		push	0		; int
		push	[esp+14h+arg_8]	; int
		push	[esp+18h+arg_4]	; int
		push	esi		; Memory
		call	ldap_modify_ext
		test	eax, eax
		jnz	short loc_1000B064
		lea	eax, [esp+8+arg_8]
		push	eax
		push	0
		push	1
		push	[esp+14h+var_4]
		push	esi
		call	ldap_result
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_1000B058
		push	0
		push	0
		push	esi
		call	ldap_get_lderrno
		pop	esi
		pop	ecx
		retn	0Ch
; ---------------------------------------------------------------------------

loc_1000B058:				; CODE XREF: ldap_modify_s+37j
		push	1
		push	[esp+0Ch+arg_8]
		push	esi
		call	ldap_result2error

loc_1000B064:				; CODE XREF: ldap_modify_s+1Fj
		pop	esi
		pop	ecx
		retn	0Ch
ldap_modify_s	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000B070	proc near		; DATA XREF: .data:off_100247C0o
		push	esi
		push	4		; Size
		call	ds:malloc
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		jz	short loc_1000B092
		push	0		; lpName
		push	0		; bInitialOwner
		push	0		; lpMutexAttributes
		call	ds:CreateMutexA
		mov	[esi], eax
		mov	eax, esi

loc_1000B092:				; CODE XREF: sub_1000B070+10j
		pop	esi
		retn
sub_1000B070	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1000B0A0(void	*Memory)
sub_1000B0A0	proc near		; DATA XREF: .data:100247C4o

Memory		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+Memory]
		push	dword ptr [esi]	; hObject
		call	ds:CloseHandle
		push	esi		; Memory
		call	ds:free
		add	esp, 4
		pop	esi
		retn
sub_1000B0A0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000B0C0	proc near		; DATA XREF: .data:100247C8o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		push	0FFFFFFFFh	; dwMilliseconds
		push	dword ptr [eax]	; hHandle
		call	ds:WaitForSingleObject
		neg	eax
		sbb	eax, eax
		neg	eax
		retn
sub_1000B0C0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000B0E0	proc near		; DATA XREF: .data:100247CCo

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		push	dword ptr [eax]	; hMutex
		call	ds:ReleaseMutex
		neg	eax
		sbb	eax, eax
		inc	eax
		retn
sub_1000B0E0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000B100	proc near		; DATA XREF: .data:100247D0o
		call	ds:_errno
		mov	eax, [eax]
		retn
sub_1000B100	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000B110	proc near		; DATA XREF: .data:100247D4o

arg_0		= dword	ptr  4

		call	ds:_errno
		mov	ecx, [esp+arg_0]
		mov	[eax], ecx
		retn
sub_1000B110	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000B120	proc near		; DATA XREF: .data:100247DCo

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi
		push	dwTlsIndex	; dwTlsIndex
		mov	esi, ds:TlsGetValue
		call	esi ; TlsGetValue
		test	eax, eax
		jnz	short loc_1000B14D
		push	0Ch		; SizeOfElements
		push	1		; NumOfElements
		call	ds:calloc
		add	esp, 8
		push	eax		; lpTlsValue
		push	dwTlsIndex	; dwTlsIndex
		call	ds:TlsSetValue

loc_1000B14D:				; CODE XREF: sub_1000B120+11j
		push	dwTlsIndex	; dwTlsIndex
		call	esi ; TlsGetValue
		mov	esi, eax
		test	esi, esi
		jz	short loc_1000B189
		mov	eax, [esi+4]
		mov	ecx, [esp+4+arg_0]
		mov	[esi], ecx
		test	eax, eax
		jz	short loc_1000B16E
		push	eax
		call	ldap_memfree

loc_1000B16E:				; CODE XREF: sub_1000B120+46j
		mov	eax, [esp+4+arg_4]
		mov	[esi+4], eax
		mov	eax, [esi+8]
		test	eax, eax
		jz	short loc_1000B182
		push	eax
		call	ldap_memfree

loc_1000B182:				; CODE XREF: sub_1000B120+5Aj
		mov	eax, [esp+4+arg_8]
		mov	[esi+8], eax

loc_1000B189:				; CODE XREF: sub_1000B120+39j
		pop	esi
		retn
sub_1000B120	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000B190	proc near		; DATA XREF: .data:100247D8o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	dwTlsIndex	; dwTlsIndex
		call	ds:TlsGetValue
		mov	edx, eax
		mov	eax, [esp+arg_0]
		test	eax, eax
		jz	short loc_1000B1AB
		mov	ecx, [edx+4]
		mov	[eax], ecx

loc_1000B1AB:				; CODE XREF: sub_1000B190+14j
		mov	ecx, [esp+arg_4]
		test	ecx, ecx
		jz	short loc_1000B1B8
		mov	eax, [edx+8]
		mov	[ecx], eax

loc_1000B1B8:				; CODE XREF: sub_1000B190+21j
		mov	eax, [edx]
		retn
sub_1000B190	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  85. ldap_init

; =============== S U B	R O U T	I N E =======================================


		public ldap_init
ldap_init	proc near		; CODE XREF: ldap_open+9p
					; DATA XREF: .rdata:off_10020938o

var_14		= xmmword ptr -14h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 14h
		cmp	dword_100249D0,	0
		jnz	short loc_1000B1D1
		call	sub_1000B840

loc_1000B1D1:				; CODE XREF: ldap_init+Aj
		push	edi
		mov	edi, [esp+18h+arg_4]
		cmp	edi, 0FFFFh
		ja	loc_1000B3A3
		mov	eax, dword ptr xmmword_100249C0
		push	esi
		push	1B4h		; Size
		test	eax, eax
		jnz	short loc_1000B1F9
		call	ds:malloc
		jmp	short loc_1000B1FB
; ---------------------------------------------------------------------------

loc_1000B1F9:				; CODE XREF: ldap_init+2Fj
		call	eax ; xmmword_100249C0

loc_1000B1FB:				; CODE XREF: ldap_init+37j
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		jz	short loc_1000B283
		push	1B4h		; Size
		push	offset dword_10025280 ;	Src
		push	esi		; Dst
		call	ds:memmove
		add	esp, 0Ch
		cmp	dword_10025320,	0
		jz	short loc_1000B260
		mov	eax, dword ptr xmmword_100249C0
		push	20h		; Size
		test	eax, eax
		jnz	short loc_1000B234
		call	ds:malloc
		jmp	short loc_1000B236
; ---------------------------------------------------------------------------

loc_1000B234:				; CODE XREF: ldap_init+6Aj
		call	eax ; xmmword_100249C0

loc_1000B236:				; CODE XREF: ldap_init+72j
		mov	ecx, eax
		add	esp, 4
		mov	[esi+0A0h], ecx
		test	ecx, ecx
		jz	loc_1000B377
		mov	eax, dword_10025320
		movdqu	xmm0, xmmword ptr [eax]
		movdqu	xmmword	ptr [ecx], xmm0
		movdqu	xmm0, xmmword ptr [eax+10h]
		movdqu	xmmword	ptr [ecx+10h], xmm0

loc_1000B260:				; CODE XREF: ldap_init+5Fj
		mov	eax, [esi+90h]
		test	eax, eax
		jz	short loc_1000B28D
		push	dword ptr [esi+98h]
		push	esi
		call	eax
		add	esp, 8
		test	eax, eax
		jz	short loc_1000B28D
		push	esi
		call	ldap_x_free
		add	esp, 4

loc_1000B283:				; CODE XREF: ldap_init+42j
		pop	esi
		xor	eax, eax
		pop	edi
		add	esp, 14h
		retn	8
; ---------------------------------------------------------------------------

loc_1000B28D:				; CODE XREF: ldap_init+A8j
					; ldap_init+B8j
		call	ber_sockbuf_alloc
		mov	[esi], eax
		test	eax, eax
		jz	loc_1000B364
		mov	eax, [esp+1Ch+arg_0]
		test	eax, eax
		jz	short loc_1000B2B8
		push	eax
		call	sub_1000BAB0
		add	esp, 4
		mov	[esi+54h], eax
		test	eax, eax
		jz	loc_1000B358

loc_1000B2B8:				; CODE XREF: ldap_init+E2j
		mov	eax, dword ptr xmmword_100249C0+4
		push	4		; SizeOfElements
		push	0Eh		; NumOfElements
		test	eax, eax
		jnz	short loc_1000B2CD
		call	ds:calloc
		jmp	short loc_1000B2CF
; ---------------------------------------------------------------------------

loc_1000B2CD:				; CODE XREF: ldap_init+103j
		call	eax

loc_1000B2CF:				; CODE XREF: ldap_init+10Bj
		add	esp, 8
		mov	[esi+0DCh], eax
		test	eax, eax
		jz	short loc_1000B358
		mov	eax, [esi+84h]
		test	eax, eax
		jnz	short loc_1000B2EE
		cmp	[esi+88h], eax
		jz	short loc_1000B338

loc_1000B2EE:				; CODE XREF: ldap_init+124j
		xorps	xmm0, xmm0
		mov	[esp+1Ch+var_4], 0
		movdqu	[esp+1Ch+var_14], xmm0
		mov	dword ptr [esp+1Ch+var_14+4], eax
		mov	eax, [esi+88h]
		mov	dword ptr [esp+1Ch+var_14+8], eax
		mov	eax, [esi+9Ch]
		mov	[esp+1Ch+var_4], eax
		lea	eax, [esp+1Ch+var_14]
		push	eax
		push	100h
		push	dword ptr [esi]
		mov	dword ptr [esp+28h+var_14], 14h
		mov	dword ptr [esp+28h+var_14+0Ch],	0
		call	ber_sockbuf_set_option

loc_1000B338:				; CODE XREF: ldap_init+12Cj
		push	esi
		call	sub_1000B900
		add	esp, 4
		mov	eax, 185h
		test	edi, edi
		cmovz	edi, eax
		mov	eax, esi
		mov	[esi+58h], edi
		pop	esi
		pop	edi
		add	esp, 14h
		retn	8
; ---------------------------------------------------------------------------

loc_1000B358:				; CODE XREF: ldap_init+F2j
					; ldap_init+11Aj
		mov	eax, [esi]
		test	eax, eax
		jz	short loc_1000B364
		push	eax		; Memory
		call	ber_sockbuf_free

loc_1000B364:				; CODE XREF: ldap_init+D6j
					; ldap_init+19Cj
		mov	eax, [esi+0DCh]
		test	eax, eax
		jz	short loc_1000B377
		push	eax
		call	ldap_x_free
		add	esp, 4

loc_1000B377:				; CODE XREF: ldap_init+83j
					; ldap_init+1ACj
		mov	eax, dword ptr xmmword_100249C0+0Ch
		push	esi		; Memory
		test	eax, eax
		jnz	short loc_1000B394
		call	ds:free
		add	esp, 4
		xor	eax, eax
		pop	esi
		pop	edi
		add	esp, 14h
		retn	8
; ---------------------------------------------------------------------------

loc_1000B394:				; CODE XREF: ldap_init+1BFj
		call	eax
		add	esp, 4
		xor	eax, eax
		pop	esi
		pop	edi
		add	esp, 14h
		retn	8
; ---------------------------------------------------------------------------

loc_1000B3A3:				; CODE XREF: ldap_init+1Cj
		call	ds:_errno
		pop	edi
		mov	dword ptr [eax], 16h
		xor	eax, eax
		add	esp, 14h
		retn	8
ldap_init	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  25. ldap_open

; =============== S U B	R O U T	I N E =======================================


		public ldap_open
ldap_open	proc near		; DATA XREF: .rdata:off_10020938o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		push	[esp+4+arg_4]
		push	[esp+8+arg_0]
		call	ldap_init
		mov	esi, eax
		test	esi, esi
		jz	loc_1000B4B1
		mov	eax, [esi+0C0h]
		test	eax, eax
		jz	short loc_1000B43E
		mov	ecx, [esi+0DCh]
		test	ecx, ecx
		jz	short loc_1000B43E
		mov	edx, [esi+13Ch]
		test	edx, edx
		jz	short loc_1000B436
		call	edx
		cmp	[esi+164h], eax
		jnz	short loc_1000B408
		inc	dword ptr [esi+19Ch]
		jmp	short loc_1000B43E
; ---------------------------------------------------------------------------

loc_1000B408:				; CODE XREF: ldap_open+3Ej
		mov	eax, [esi+0DCh]
		push	dword ptr [eax+24h]
		mov	eax, [esi+0C0h]
		call	eax
		mov	eax, [esi+13Ch]
		add	esp, 4
		call	eax
		mov	[esi+164h], eax
		mov	dword ptr [esi+19Ch], 1
		jmp	short loc_1000B43E
; ---------------------------------------------------------------------------

loc_1000B436:				; CODE XREF: ldap_open+34j
		push	dword ptr [ecx+24h]
		call	eax
		add	esp, 4

loc_1000B43E:				; CODE XREF: ldap_open+20j
					; ldap_open+2Aj ...
		push	esi
		call	sub_1000B9C0
		add	esp, 4
		test	eax, eax
		jns	short loc_1000B4B7
		cmp	dword ptr [esi+0C0h], 0
		jz	short loc_1000B4A2
		mov	eax, [esi+0DCh]
		test	eax, eax
		jz	short loc_1000B4A2
		mov	ecx, [esi+13Ch]
		test	ecx, ecx
		jz	short loc_1000B494
		call	ecx
		cmp	[esi+164h], eax
		jnz	short loc_1000B4A2
		dec	dword ptr [esi+19Ch]
		jnz	short loc_1000B4A2
		mov	dword ptr [esi+164h], 0FFFFFFFFh
		mov	dword ptr [esi+19Ch], 0
		mov	eax, [esi+0DCh]

loc_1000B494:				; CODE XREF: ldap_open+A6j
		push	dword ptr [eax+24h]
		mov	eax, [esi+0C4h]
		call	eax
		add	esp, 4

loc_1000B4A2:				; CODE XREF: ldap_open+92j
					; ldap_open+9Cj ...
		push	0
		push	0
		push	0
		push	esi
		call	sub_10017FA0
		add	esp, 10h

loc_1000B4B1:				; CODE XREF: ldap_open+12j
		xor	eax, eax
		pop	esi
		retn	8
; ---------------------------------------------------------------------------

loc_1000B4B7:				; CODE XREF: ldap_open+89j
		cmp	dword ptr [esi+0C0h], 0
		jz	short loc_1000B50E
		mov	eax, [esi+0DCh]
		test	eax, eax
		jz	short loc_1000B50E
		mov	ecx, [esi+13Ch]
		test	ecx, ecx
		jz	short loc_1000B500
		call	ecx
		cmp	[esi+164h], eax
		jnz	short loc_1000B50E
		dec	dword ptr [esi+19Ch]
		jnz	short loc_1000B50E
		mov	dword ptr [esi+164h], 0FFFFFFFFh
		mov	dword ptr [esi+19Ch], 0
		mov	eax, [esi+0DCh]

loc_1000B500:				; CODE XREF: ldap_open+112j
		push	dword ptr [eax+24h]
		mov	eax, [esi+0C4h]
		call	eax
		add	esp, 4

loc_1000B50E:				; CODE XREF: ldap_open+FEj
					; ldap_open+108j ...
		mov	eax, esi
		pop	esi
		retn	8
ldap_open	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 440. ldap_version

; =============== S U B	R O U T	I N E =======================================


		public ldap_version
ldap_version	proc near		; DATA XREF: .rdata:off_10020938o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		test	eax, eax
		jz	short loc_1000B54F
		xorps	xmm0, xmm0
		movdqu	xmmword	ptr [eax], xmm0
		movdqu	xmmword	ptr [eax+10h], xmm0
		mov	dword ptr [eax], 12Ch
		mov	dword ptr [eax+4], 12Ch
		mov	dword ptr [eax+8], 12Ch
		mov	dword ptr [eax+0Ch], 0

loc_1000B54F:				; CODE XREF: ldap_version+6j
		mov	eax, 12Ch
		retn	4
ldap_version	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 533. ldap_x_calloc

; =============== S U B	R O U T	I N E =======================================


		public ldap_x_calloc
ldap_x_calloc	proc near		; CODE XREF: sub_10001E00+94p
					; sub_10001E00+138p ...
		mov	eax, dword ptr xmmword_100249C0+4
		test	eax, eax
		jnz	short loc_1000B56F
		jmp	ds:calloc
; ---------------------------------------------------------------------------

loc_1000B56F:				; CODE XREF: ldap_x_calloc+7j
		jmp	eax
ldap_x_calloc	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 535. ldap_x_free

; =============== S U B	R O U T	I N E =======================================


		public ldap_x_free
ldap_x_free	proc near		; CODE XREF: ldap_charray_dup+7Bp
					; ldap_charray_dup+89p	...
		mov	eax, dword ptr xmmword_100249C0+0Ch
		test	eax, eax
		jnz	short loc_1000B58F
		jmp	ds:free
; ---------------------------------------------------------------------------

loc_1000B58F:				; CODE XREF: ldap_x_free+7j
		jmp	eax
ldap_x_free	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 529. ldap_x_hostlist_first

; =============== S U B	R O U T	I N E =======================================


		public ldap_x_hostlist_first
ldap_x_hostlist_first proc near		; CODE XREF: sub_1000CF50+6Ep
					; DATA XREF: .rdata:off_10020938o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	ebp
		push	esi
		push	edi
		mov	edi, [esp+0Ch+arg_8]
		test	edi, edi
		jz	loc_1000B65B
		mov	ebp, [esp+0Ch+arg_C]
		test	ebp, ebp
		jz	loc_1000B65B
		mov	esi, [esp+0Ch+arg_10]
		test	esi, esi
		jz	loc_1000B65B
		push	ebx
		mov	ebx, [esp+10h+arg_0]
		test	ebx, ebx
		jz	short loc_1000B626
		cmp	byte ptr [ebx],	0
		jz	short loc_1000B626
		mov	eax, dword ptr xmmword_100249C0+4
		push	0Ch		; SizeOfElements
		push	1		; NumOfElements
		test	eax, eax
		jnz	short loc_1000B5EA
		call	ds:calloc
		jmp	short loc_1000B5EC
; ---------------------------------------------------------------------------

loc_1000B5EA:				; CODE XREF: ldap_x_hostlist_first+40j
		call	eax

loc_1000B5EC:				; CODE XREF: ldap_x_hostlist_first+48j
		add	esp, 8
		mov	[esi], eax
		test	eax, eax
		jz	short loc_1000B639
		push	ebx
		call	sub_1000BAB0
		mov	ecx, [esi]
		add	esp, 4
		mov	[ecx], eax
		mov	eax, [esi]
		mov	ecx, [eax]
		test	ecx, ecx
		jz	short loc_1000B639
		mov	[eax+4], ecx
		mov	ecx, [esi]
		mov	eax, [esp+10h+arg_4]
		mov	[ecx+8], eax
		push	dword ptr [esi]
		push	ebp
		push	edi
		call	ldap_x_hostlist_next
		pop	ebx
		pop	edi
		pop	esi
		pop	ebp
		retn	14h
; ---------------------------------------------------------------------------

loc_1000B626:				; CODE XREF: ldap_x_hostlist_first+2Ej
					; ldap_x_hostlist_first+33j
		push	offset a127_0_0_1 ; "127.0.0.1"
		call	sub_1000BAB0
		add	esp, 4
		mov	[edi], eax
		test	eax, eax
		jnz	short loc_1000B645

loc_1000B639:				; CODE XREF: ldap_x_hostlist_first+53j
					; ldap_x_hostlist_first+68j
		pop	ebx
		pop	edi
		pop	esi
		mov	eax, 5Ah
		pop	ebp
		retn	14h
; ---------------------------------------------------------------------------

loc_1000B645:				; CODE XREF: ldap_x_hostlist_first+97j
		mov	eax, [esp+10h+arg_4]
		pop	ebx
		mov	[ebp+0], eax
		xor	eax, eax
		pop	edi
		mov	dword ptr [esi], 0
		pop	esi
		pop	ebp
		retn	14h
; ---------------------------------------------------------------------------

loc_1000B65B:				; CODE XREF: ldap_x_hostlist_first+9j
					; ldap_x_hostlist_first+15j ...
		pop	edi
		pop	esi
		mov	eax, 59h
		pop	ebp
		retn	14h
ldap_x_hostlist_first endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 530. ldap_x_hostlist_next

; =============== S U B	R O U T	I N E =======================================


		public ldap_x_hostlist_next
ldap_x_hostlist_next proc near		; CODE XREF: ldap_x_hostlist_first+7Ap
					; sub_1000CF50+28Ep
					; DATA XREF: ...

var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ecx
		push	ebp
		push	edi
		mov	edi, [esp+0Ch+arg_0]
		mov	[esp+0Ch+var_4], 0
		test	edi, edi
		jz	loc_1000B79E
		mov	ebp, [esp+0Ch+arg_4]
		test	ebp, ebp
		jz	loc_1000B79E
		push	esi
		mov	esi, [esp+10h+arg_8]
		test	esi, esi
		jz	loc_1000B78F
		mov	eax, [esi+4]
		test	eax, eax
		jz	loc_1000B78F
		cmp	byte ptr [eax],	5Bh
		jnz	short loc_1000B6BC
		inc	eax
		mov	[esp+10h+var_4], 1
		mov	[esi+4], eax

loc_1000B6BC:				; CODE XREF: ldap_x_hostlist_next+3Ej
		push	ebx
		push	20h		; Val
		push	dword ptr [esi+4] ; Str
		call	ds:strchr
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		jz	short loc_1000B711
		sub	ebx, [esi+4]
		mov	ecx, dword ptr xmmword_100249C0
		lea	eax, [ebx+1]
		push	eax		; Size
		test	ecx, ecx
		jnz	short loc_1000B6EA
		call	ds:malloc
		jmp	short loc_1000B6EC
; ---------------------------------------------------------------------------

loc_1000B6EA:				; CODE XREF: ldap_x_hostlist_next+70j
		call	ecx ; xmmword_100249C0

loc_1000B6EC:				; CODE XREF: ldap_x_hostlist_next+78j
		add	esp, 4
		mov	[edi], eax
		test	eax, eax
		jz	short loc_1000B722
		push	ebx		; Count
		push	dword ptr [esi+4] ; Source
		push	eax		; Dest
		call	ds:strncpy
		mov	eax, [edi]
		add	esp, 0Ch
		mov	byte ptr [ebx+eax], 0
		lea	eax, [ebx+1]
		add	[esi+4], eax
		jmp	short loc_1000B736
; ---------------------------------------------------------------------------

loc_1000B711:				; CODE XREF: ldap_x_hostlist_next+5Fj
		push	dword ptr [esi+4]
		call	sub_1000BAB0
		add	esp, 4
		mov	[edi], eax
		test	eax, eax
		jnz	short loc_1000B72F

loc_1000B722:				; CODE XREF: ldap_x_hostlist_next+83j
		pop	ebx
		pop	esi
		pop	edi
		mov	eax, 5Ah
		pop	ebp
		pop	ecx
		retn	0Ch
; ---------------------------------------------------------------------------

loc_1000B72F:				; CODE XREF: ldap_x_hostlist_next+B0j
		mov	dword ptr [esi+4], 0

loc_1000B736:				; CODE XREF: ldap_x_hostlist_next+9Fj
		cmp	[esp+14h+var_4], 0
		mov	ebx, ds:strchr
		jz	short loc_1000B756
		push	5Dh		; Val
		push	dword ptr [edi]	; Str
		call	ebx ; strchr
		add	esp, 8
		test	eax, eax
		jz	short loc_1000B756
		mov	byte ptr [eax],	0
		inc	eax
		jmp	short loc_1000B758
; ---------------------------------------------------------------------------

loc_1000B756:				; CODE XREF: ldap_x_hostlist_next+D1j
					; ldap_x_hostlist_next+DEj
		mov	eax, [edi]

loc_1000B758:				; CODE XREF: ldap_x_hostlist_next+E4j
		push	3Ah		; Val
		push	eax		; Str
		call	ebx ; strchr
		add	esp, 8
		test	eax, eax
		jz	short loc_1000B77F
		mov	byte ptr [eax],	0
		inc	eax
		push	eax		; Str
		call	ds:atoi
		add	esp, 4
		mov	[ebp+0], eax
		xor	eax, eax
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		pop	ecx
		retn	0Ch
; ---------------------------------------------------------------------------

loc_1000B77F:				; CODE XREF: ldap_x_hostlist_next+F2j
		mov	eax, [esi+8]
		pop	ebx
		pop	esi
		mov	[ebp+0], eax
		xor	eax, eax
		pop	edi
		pop	ebp
		pop	ecx
		retn	0Ch
; ---------------------------------------------------------------------------

loc_1000B78F:				; CODE XREF: ldap_x_hostlist_next+2Aj
					; ldap_x_hostlist_next+35j
		pop	esi
		mov	dword ptr [edi], 0
		xor	eax, eax
		pop	edi
		pop	ebp
		pop	ecx
		retn	0Ch
; ---------------------------------------------------------------------------

loc_1000B79E:				; CODE XREF: ldap_x_hostlist_next+11j
					; ldap_x_hostlist_next+1Dj
		pop	edi
		mov	eax, 59h
		pop	ebp
		pop	ecx
		retn	0Ch
ldap_x_hostlist_next endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 531. ldap_x_hostlist_statusfree

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	ldap_x_hostlist_statusfree(void	*Memory)
		public ldap_x_hostlist_statusfree
ldap_x_hostlist_statusfree proc	near	; CODE XREF: sub_1000CF50+2C1p
					; sub_1000CF50+33Bp
					; DATA XREF: ...

Memory		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+Memory]
		test	esi, esi
		jz	short loc_1000B7F3
		mov	eax, [esi]
		test	eax, eax
		jz	short loc_1000B7D7
		mov	ecx, dword ptr xmmword_100249C0+0Ch
		push	eax		; Memory
		test	ecx, ecx
		jnz	short loc_1000B7D2
		call	ds:free
		jmp	short loc_1000B7D4
; ---------------------------------------------------------------------------

loc_1000B7D2:				; CODE XREF: ldap_x_hostlist_statusfree+18j
		call	ecx

loc_1000B7D4:				; CODE XREF: ldap_x_hostlist_statusfree+20j
		add	esp, 4

loc_1000B7D7:				; CODE XREF: ldap_x_hostlist_statusfree+Dj
		mov	eax, dword ptr xmmword_100249C0+0Ch
		push	esi		; Memory
		test	eax, eax
		jnz	short loc_1000B7EE
		call	ds:free
		add	esp, 4
		pop	esi
		retn	4
; ---------------------------------------------------------------------------

loc_1000B7EE:				; CODE XREF: ldap_x_hostlist_statusfree+2Fj
		call	eax
		add	esp, 4

loc_1000B7F3:				; CODE XREF: ldap_x_hostlist_statusfree+7j
		pop	esi
		retn	4
ldap_x_hostlist_statusfree endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 532. ldap_x_malloc

; =============== S U B	R O U T	I N E =======================================


		public ldap_x_malloc
ldap_x_malloc	proc near		; CODE XREF: sub_10001000+265p
					; ldap_parse_authzid_control+94p ...
		mov	eax, dword ptr xmmword_100249C0
		test	eax, eax
		jnz	short loc_1000B80F
		jmp	ds:malloc
; ---------------------------------------------------------------------------

loc_1000B80F:				; CODE XREF: ldap_x_malloc+7j
		jmp	eax
ldap_x_malloc	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 534. ldap_x_realloc

; =============== S U B	R O U T	I N E =======================================


		public ldap_x_realloc
ldap_x_realloc	proc near		; CODE XREF: sub_10001000+29Ap
					; sub_10001E00+86p ...
		mov	eax, dword ptr xmmword_100249C0+8
		test	eax, eax
		jnz	short loc_1000B82F
		jmp	ds:realloc
; ---------------------------------------------------------------------------

loc_1000B82F:				; CODE XREF: ldap_x_realloc+7j
		jmp	eax
ldap_x_realloc	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000B840	proc near		; CODE XREF: ldap_set_rebind_proc+11p
					; ldap_get_option+Cp ...
		push	0		; lpName
		push	0		; bInitialOwner
		push	0		; lpMutexAttributes
		call	ds:CreateMutexA
		push	0FFFFFFFFh	; dwMilliseconds
		push	eax		; hHandle
		mov	hMutex,	eax
		call	ds:WaitForSingleObject
		cmp	dword_100249D0,	0
		jnz	loc_1000B8E9
		call	ds:TlsAlloc
		push	1B4h		; Size
		xorps	xmm0, xmm0
		mov	dwTlsIndex, eax
		push	0		; Val
		push	offset dword_10025280 ;	Dst
		movdqu	xmmword_100249C0, xmm0
		call	memset
		add	esp, 0Ch
		mov	dword_100252D0,	80000000h
		mov	dword_10025288,	3
		mov	byte_1002528C, 4
		mov	dword_100252CC,	5
		push	offset off_100247C0
		push	5
		push	offset dword_10025280
		mov	dword_10025430,	0FFFFFFFFh
		call	ldap_set_option
		mov	dword_100249D0,	0
		test	eax, eax
		jnz	short loc_1000B8E9
		mov	dword_100249D0,	1

loc_1000B8E9:				; CODE XREF: sub_1000B840+21j
					; sub_1000B840+9Dj
		push	hMutex		; hMutex
		call	ds:ReleaseMutex
		retn
sub_1000B840	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000B900	proc near		; CODE XREF: ldap_init+179p
					; ldap_set_option+2D5p

arg_0		= dword	ptr  4

		push	edi
		mov	edi, [esp+4+arg_0]
		cmp	edi, offset dword_10025280
		jz	short loc_1000B963
		cmp	dword ptr [edi+0DCh], 0
		jz	short loc_1000B963
		push	ebx
		push	ebp
		mov	ebp, 0FFFFFE88h
		mov	ebx, 0Eh
		push	esi
		lea	esi, [edi+178h]
		sub	ebp, edi
		jmp	short loc_1000B930
; ---------------------------------------------------------------------------
		align 10h

loc_1000B930:				; CODE XREF: sub_1000B900+2Bj
					; sub_1000B900+5Ej
		mov	eax, [edi+0B8h]
		test	eax, eax
		jz	short loc_1000B940
		call	eax
		mov	ecx, eax
		jmp	short loc_1000B942
; ---------------------------------------------------------------------------

loc_1000B940:				; CODE XREF: sub_1000B900+38j
		xor	ecx, ecx

loc_1000B942:				; CODE XREF: sub_1000B900+3Ej
		mov	eax, [edi+0DCh]
		add	eax, ebp
		mov	[eax+esi], ecx
		mov	dword ptr [esi-38h], 0FFFFFFFFh
		mov	dword ptr [esi], 0
		add	esi, 4
		dec	ebx
		jnz	short loc_1000B930
		pop	esi
		pop	ebp
		pop	ebx

loc_1000B963:				; CODE XREF: sub_1000B900+Bj
					; sub_1000B900+14j
		pop	edi
		retn
sub_1000B900	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000B970	proc near		; CODE XREF: ldap_set_option+2A9p
					; sub_10017FA0+4CBp

arg_0		= dword	ptr  4

		push	edi
		mov	edi, [esp+4+arg_0]
		cmp	edi, offset dword_10025280
		jz	short loc_1000B9B6
		cmp	dword ptr [edi+0DCh], 0
		jz	short loc_1000B9B6
		push	esi
		xor	esi, esi
		lea	esp, [esp+0]

loc_1000B990:				; CODE XREF: sub_1000B970+43j
		mov	ecx, [edi+0BCh]
		test	ecx, ecx
		jz	short loc_1000B9AD
		mov	eax, [edi+0DCh]
		mov	eax, [esi+eax]
		test	eax, eax
		jz	short loc_1000B9AD
		push	eax
		call	ecx
		add	esp, 4

loc_1000B9AD:				; CODE XREF: sub_1000B970+28j
					; sub_1000B970+35j
		add	esi, 4
		cmp	esi, 38h
		jl	short loc_1000B990
		pop	esi

loc_1000B9B6:				; CODE XREF: sub_1000B970+Bj
					; sub_1000B970+14j
		pop	edi
		retn
sub_1000B970	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000B9C0	proc near		; CODE XREF: ldap_open+7Fp
					; sub_1000FD40+20Fp

Memory		= dword	ptr -4
arg_0		= dword	ptr  4

		push	ecx
		mov	eax, dword ptr xmmword_100249C0+4
		push	14h		; SizeOfElements
		push	1		; NumOfElements
		test	eax, eax
		jnz	short loc_1000B9D6
		call	ds:calloc
		jmp	short loc_1000B9D8
; ---------------------------------------------------------------------------

loc_1000B9D6:				; CODE XREF: sub_1000B9C0+Cj
		call	eax

loc_1000B9D8:				; CODE XREF: sub_1000B9C0+14j
		add	esp, 8
		mov	ecx, eax
		mov	[esp+4+Memory],	ecx
		push	esi
		mov	esi, [esp+8+arg_0]
		test	ecx, ecx
		jz	loc_1000BA91
		mov	eax, [esi+54h]
		test	eax, eax
		jz	short loc_1000BA0F
		push	eax
		call	sub_1000BAB0
		mov	ecx, [esp+0Ch+Memory]
		add	esp, 4
		mov	[ecx], eax
		test	eax, eax
		jz	loc_1000BA91
		mov	ecx, [esp+8+Memory]

loc_1000BA0F:				; CODE XREF: sub_1000B9C0+32j
		mov	eax, [esi+58h]
		mov	[ecx+8], eax
		test	dword ptr [esi+50h], 40000000h
		jz	short loc_1000BA26
		mov	eax, [esp+8+Memory]
		or	dword ptr [eax+0Ch], 1

loc_1000BA26:				; CODE XREF: sub_1000B9C0+5Cj
		push	0
		push	1
		push	1
		lea	eax, [esp+14h+Memory]
		push	eax
		push	esi
		call	sub_1000F7B0
		add	esp, 14h
		mov	[esi+64h], eax
		test	eax, eax
		jnz	short loc_1000BA89
		cmp	[esi+54h], eax
		mov	esi, ds:free
		jz	short loc_1000BA66
		mov	eax, [esp+8+Memory]
		mov	ecx, dword ptr xmmword_100249C0+0Ch
		mov	eax, [eax]
		push	eax		; Memory
		test	ecx, ecx
		jnz	short loc_1000BA61
		call	esi ; free
		jmp	short loc_1000BA63
; ---------------------------------------------------------------------------

loc_1000BA61:				; CODE XREF: sub_1000B9C0+9Bj
		call	ecx

loc_1000BA63:				; CODE XREF: sub_1000B9C0+9Fj
		add	esp, 4

loc_1000BA66:				; CODE XREF: sub_1000B9C0+8Aj
		mov	eax, dword ptr xmmword_100249C0+0Ch
		push	[esp+8+Memory]	; Memory
		test	eax, eax
		jnz	short loc_1000BA7E
		call	esi ; free
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	esi
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_1000BA7E:				; CODE XREF: sub_1000B9C0+B1j
		call	eax
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	esi
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_1000BA89:				; CODE XREF: sub_1000B9C0+7Fj
		inc	dword ptr [eax+0Ch]
		xor	eax, eax
		pop	esi
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_1000BA91:				; CODE XREF: sub_1000B9C0+27j
					; sub_1000B9C0+45j
		push	0
		push	0
		push	5Ah
		push	esi
		call	ldap_set_lderrno
		or	eax, 0FFFFFFFFh
		pop	esi
		pop	ecx
		retn
sub_1000B9C0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000BAB0	proc near		; CODE XREF: ldap_charray_dup+42p
					; ldap_str2charray+63p	...

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		test	esi, esi
		jz	short loc_1000BB01
		mov	ecx, esi
		lea	edx, [ecx+1]
		mov	edi, edi

loc_1000BAC0:				; CODE XREF: sub_1000BAB0+15j
		mov	al, [ecx]
		inc	ecx
		test	al, al
		jnz	short loc_1000BAC0
		mov	eax, dword ptr xmmword_100249C0
		sub	ecx, edx
		inc	ecx
		push	ecx		; Size
		test	eax, eax
		jnz	short loc_1000BADC
		call	ds:malloc
		jmp	short loc_1000BADE
; ---------------------------------------------------------------------------

loc_1000BADC:				; CODE XREF: sub_1000BAB0+22j
		call	eax ; xmmword_100249C0

loc_1000BADE:				; CODE XREF: sub_1000BAB0+2Aj
		mov	edx, eax
		add	esp, 4
		test	edx, edx
		jz	short loc_1000BB01
		mov	ecx, edx
		sub	ecx, esi
		jmp	short loc_1000BAF0
; ---------------------------------------------------------------------------
		align 10h

loc_1000BAF0:				; CODE XREF: sub_1000BAB0+3Bj
					; sub_1000BAB0+4Bj
		mov	al, [esi]
		lea	esi, [esi+1]
		mov	[ecx+esi-1], al
		test	al, al
		jnz	short loc_1000BAF0
		mov	eax, edx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1000BB01:				; CODE XREF: sub_1000BAB0+7j
					; sub_1000BAB0+35j
		xor	eax, eax
		pop	esi
		retn
sub_1000BAB0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000BB10	proc near		; CODE XREF: sub_1000C630+CDp
					; sub_1000C780+D3p

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 8
		or	edx, 0FFFFFFFFh
		xor	ecx, ecx
		push	ebx
		push	ebp
		push	esi
		mov	esi, [esp+14h+arg_4]
		push	edi
		mov	ebp, [esi+4]
		test	ebp, ebp
		jle	short loc_1000BB80
		mov	edi, [esp+18h+arg_0]
		mov	eax, [esi]
		mov	[esp+18h+var_8], eax
		mov	ebx, [edi]
		xor	edi, edi
		mov	[esp+18h+var_4], ebx
		lea	esp, [esp+0]

loc_1000BB40:				; CODE XREF: sub_1000BB10+63j
		mov	ebx, [edi+eax]
		cmp	[esp+18h+var_4], ebx
		jnz	short loc_1000BB63
		mov	eax, [esp+18h+arg_0]
		mov	esi, [esp+18h+var_8]
		mov	eax, [eax+164h]
		cmp	eax, [edi+esi+4]
		mov	esi, [esp+18h+arg_4]
		jz	short loc_1000BB8E
		mov	eax, [esi]

loc_1000BB63:				; CODE XREF: sub_1000BB10+37j
		cmp	ebx, 0FFFFFFFFh
		jnz	short loc_1000BB6D
		cmp	edx, ebx
		cmovz	edx, ecx

loc_1000BB6D:				; CODE XREF: sub_1000BB10+56j
		inc	ecx
		add	edi, 0Ch
		cmp	ecx, ebp
		jl	short loc_1000BB40
		cmp	edx, 0FFFFFFFFh
		jnz	loc_1000BC23
		test	ebp, ebp

loc_1000BB80:				; CODE XREF: sub_1000BB10+15j
		jnz	short loc_1000BBC6
		push	3Ch
		call	ldap_x_malloc
		add	esp, 4
		jmp	short loc_1000BBDA
; ---------------------------------------------------------------------------

loc_1000BB8E:				; CODE XREF: sub_1000BB10+4Fj
		mov	edx, [esp+18h+arg_8]
		lea	eax, [ecx+ecx*2]
		mov	ecx, [esp+18h+var_8]
		lea	esi, [ecx+eax*4]
		movzx	ecx, word ptr [esi+8]
		mov	eax, ecx
		and	eax, edx
		cmp	ax, dx
		jz	short loc_1000BBBC
		pop	edi
		or	ecx, edx
		mov	eax, 1
		mov	[esi+8], cx
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_1000BBBC:				; CODE XREF: sub_1000BB10+97j
					; sub_1000BB10+CCj
		pop	edi
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_1000BBC6:				; CODE XREF: sub_1000BB10:loc_1000BB80j
		lea	eax, [ebp+5]
		lea	eax, [eax+eax*2]
		shl	eax, 2
		push	eax
		push	dword ptr [esi]
		call	ldap_x_realloc
		add	esp, 8

loc_1000BBDA:				; CODE XREF: sub_1000BB10+7Cj
		test	eax, eax
		jz	short loc_1000BBBC
		mov	edx, [esi+4]
		mov	[esi], eax
		lea	eax, [edx+5]
		lea	edi, [edx+1]
		mov	[esi+4], eax
		cmp	edi, eax
		jge	short loc_1000BC23
		lea	ecx, [edi+edi*2]
		shl	ecx, 2

loc_1000BBF6:				; CODE XREF: sub_1000BB10+111j
		mov	eax, [esi]
		lea	ecx, [ecx+0Ch]
		xor	ebx, ebx
		inc	edi
		mov	dword ptr [ecx+eax-0Ch], 0FFFFFFFFh
		mov	eax, [esi]
		mov	dword ptr [ecx+eax-8], 0
		mov	eax, [esi]
		mov	[ecx+eax-2], bx
		mov	eax, [esi]
		mov	[ecx+eax-4], bx
		cmp	edi, [esi+4]
		jl	short loc_1000BBF6

loc_1000BC23:				; CODE XREF: sub_1000BB10+68j
					; sub_1000BB10+DEj
		mov	ecx, [esi]
		lea	edx, [edx+edx*2]
		mov	ebx, [esp+18h+arg_0]
		pop	edi
		mov	eax, [ebx]
		mov	[ecx+edx*4], eax
		mov	ecx, [esi]
		mov	eax, [ebx+164h]
		mov	[ecx+edx*4+4], eax
		mov	ecx, [esi]
		mov	ax, word ptr [esp+14h+arg_8]
		mov	[ecx+edx*4+8], ax
		xor	ecx, ecx
		mov	eax, [esi]
		pop	esi
		pop	ebp
		pop	ebx
		mov	[eax+edx*4+0Ah], cx
		lea	eax, [ecx+1]
		add	esp, 8
		retn
sub_1000BB10	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000BC60	proc near		; CODE XREF: sub_1000C410+17Bp
					; sub_1000C410+191p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		mov	ebx, [esp+4+arg_4]
		xor	ecx, ecx
		push	ebp
		push	esi
		push	edi
		mov	esi, [ebx+4]
		test	esi, esi
		jle	short loc_1000BC9C
		mov	ebp, [esp+10h+arg_0]
		xor	edx, edx
		mov	edi, [ebx]
		mov	eax, [ebp+0]
		lea	esp, [esp+0]

loc_1000BC80:				; CODE XREF: sub_1000BC60+3Aj
		cmp	eax, [edx+edi]
		jnz	short loc_1000BC94
		mov	eax, [ebp+164h]
		cmp	eax, [edx+edi+4]
		jz	short loc_1000BCA3
		mov	eax, [ebp+0]

loc_1000BC94:				; CODE XREF: sub_1000BC60+23j
		inc	ecx
		add	edx, 0Ch
		cmp	ecx, esi
		jl	short loc_1000BC80

loc_1000BC9C:				; CODE XREF: sub_1000BC60+Fj
					; sub_1000BC60+56j
		pop	edi
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1000BCA3:				; CODE XREF: sub_1000BC60+2Fj
		lea	edx, [ecx+ecx*2]
		mov	ecx, [esp+10h+arg_8]
		movzx	esi, word ptr [edi+edx*4+8]
		mov	eax, esi
		and	eax, ecx
		test	ax, ax
		jz	short loc_1000BC9C
		not	ecx
		and	ecx, esi
		mov	[edi+edx*4+8], cx
		mov	eax, [ebx]
		cmp	word ptr [eax+edx*4+8],	0
		jnz	short loc_1000BCD2
		mov	dword ptr [eax+edx*4], 0FFFFFFFFh

loc_1000BCD2:				; CODE XREF: sub_1000BC60+69j
		pop	edi
		pop	esi
		pop	ebp
		mov	eax, 1
		pop	ebx
		retn
sub_1000BC60	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000BCE0	proc near		; CODE XREF: sub_1000F5E0+58p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		mov	ecx, [eax+80h]
		mov	eax, [esp+arg_4]
		test	ecx, ecx
		jnz	short loc_1000BCFA
		push	dword ptr [eax]
		call	sub_10019E10
		retn
; ---------------------------------------------------------------------------

loc_1000BCFA:				; CODE XREF: sub_1000BCE0+10j
		push	dword ptr [eax+164h]
		push	dword ptr [eax]
		call	ecx
		add	esp, 8
		retn
sub_1000BCE0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000BD10	proc near		; DATA XREF: .text:1000BED5o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	esi
		push	edi
		mov	edi, [esp+8+arg_0]
		push	[esp+8+arg_10]
		push	[esp+0Ch+arg_C]
		mov	eax, [edi+0A0h]
		push	[esp+10h+arg_8]
		mov	eax, [eax+0Ch]
		call	eax
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		js	short loc_1000BD91
		cmp	[esp+8+arg_4], 0
		jz	short loc_1000BD91
		mov	ecx, [edi+0A0h]
		push	esi
		mov	ecx, [ecx+1Ch]
		call	ecx
		add	esp, 4
		test	eax, eax
		jns	short loc_1000BD91
		xor	eax, eax
		cmp	eax, offset aFailedToEnable ; "failed to enable	secure mode"
		jz	short loc_1000BD91
		mov	eax, [edi+0A0h]
		push	esi
		mov	eax, [eax+18h]
		test	eax, eax
		jnz	short loc_1000BD6E
		call	sub_10019E10
		jmp	short loc_1000BD73
; ---------------------------------------------------------------------------

loc_1000BD6E:				; CODE XREF: sub_1000BD10+55j
		call	eax
		add	esp, 4

loc_1000BD73:				; CODE XREF: sub_1000BD10+5Cj
		push	offset aFailedToEnable ; "failed to enable secure mode"
		call	sub_1000BAB0
		add	esp, 4
		push	eax
		push	0
		push	52h
		push	edi
		call	ldap_set_lderrno
		pop	edi
		or	eax, 0FFFFFFFFh
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1000BD91:				; CODE XREF: sub_1000BD10+24j
					; sub_1000BD10+2Bj ...
		pop	edi
		mov	eax, esi
		pop	esi
		retn
sub_1000BD10	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000BDA0	proc near		; CODE XREF: sub_1000F7B0+1C0p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		push	esi
		mov	esi, [esp+4+arg_0]
		push	edi
		mov	edi, [esp+8+arg_4]
		mov	edx, [esi+7Ch]
		test	edx, edx
		jz	short loc_1000BDEF
		xor	ecx, ecx
		mov	eax, 1
		test	dword ptr [esi+50h], 4000000h
		cmovnz	ecx, eax
		cmp	[esp+8+arg_10],	0
		jz	short loc_1000BDCC
		or	ecx, 2

loc_1000BDCC:				; CODE XREF: sub_1000BDA0+27j
		lea	eax, [edi+164h]
		push	eax
		push	dword ptr [esi+98h]
		push	ecx
		push	dword ptr [esi+1B0h]
		push	[esp+18h+arg_C]
		push	[esp+1Ch+arg_8]
		call	edx
		add	esp, 18h
		jmp	short loc_1000BE1A
; ---------------------------------------------------------------------------

loc_1000BDEF:				; CODE XREF: sub_1000BDA0+Fj
		push	offset loc_1000CC90
		push	0
		push	offset sub_1000CCA0
		push	offset loc_1000CED0
		push	offset loc_1000CF00
		push	[esp+1Ch+arg_10]
		push	[esp+20h+arg_C]
		push	[esp+24h+arg_8]
		push	esi
		call	sub_1000CF50
		add	esp, 24h

loc_1000BE1A:				; CODE XREF: sub_1000BDA0+4Dj
		test	eax, eax
		jns	short loc_1000BE30
		push	0
		push	0
		push	5Bh
		push	esi
		call	ldap_set_lderrno
		pop	edi
		or	eax, 0FFFFFFFFh
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1000BE30:				; CODE XREF: sub_1000BDA0+7Cj
		mov	[edi], eax
		mov	eax, [esp+8+arg_14]
		pop	edi
		pop	esi
		mov	dword ptr [eax], 0
		xor	eax, eax
		retn
sub_1000BDA0	endp

; ---------------------------------------------------------------------------
		align 10h

loc_1000BE50:				; DATA XREF: sub_1000C200+8Do
		push	esi
		push	edi
		mov	edi, [esp+10h]
		mov	eax, [edi+4]
		push	dword ptr [edi]
		mov	eax, [eax+0A0h]
		mov	eax, [eax+18h]
		call	eax
		push	edi
		mov	esi, eax
		call	ldap_x_free
		add	esp, 8
		mov	eax, esi
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_1000BE80:				; DATA XREF: sub_1000C200+86o
		test	dword ptr [esp+10h], 2
		push	esi
		push	edi
		mov	edi, [esp+1Ch]
		mov	ecx, [edi+4]
		mov	eax, [ecx+0A0h]
		jz	short loc_1000BECF
		cmp	dword ptr [eax+1Ch], 0
		jnz	short loc_1000BEC8
		mov	eax, [ecx+0CCh]
		test	eax, eax
		jz	short loc_1000BEB6
		push	16h
		call	eax
		add	esp, 4
		or	eax, 0FFFFFFFFh
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1000BEB6:				; CODE XREF: .text:1000BEA7j
		call	ds:_errno
		pop	edi
		pop	esi
		mov	dword ptr [eax], 16h
		or	eax, 0FFFFFFFFh
		retn
; ---------------------------------------------------------------------------

loc_1000BEC8:				; CODE XREF: .text:1000BE9Dj
		mov	esi, 1
		jmp	short loc_1000BED1
; ---------------------------------------------------------------------------

loc_1000BECF:				; CODE XREF: .text:1000BE97j
		xor	esi, esi

loc_1000BED1:				; CODE XREF: .text:1000BECDj
		cmp	dword ptr [eax+0Ch], 0
		mov	edx, offset sub_1000BD10
		push	ebx
		mov	ebx, offset loc_1000CF00
		cmovz	edx, ebx
		mov	ebx, offset loc_1000CED0
		mov	[esp+1Ch], edx
		mov	edx, [eax+10h]
		test	edx, edx
		push	ebp
		mov	ebp, [eax+14h]
		cmovz	edx, ebx
		test	ebp, ebp
		jnz	short loc_1000BF06
		mov	dword ptr [esp+24h], offset sub_1000CCA0
		jmp	short loc_1000BF0E
; ---------------------------------------------------------------------------

loc_1000BF06:				; CODE XREF: .text:1000BEFAj
		mov	dword ptr [esp+24h], 0

loc_1000BF0E:				; CODE XREF: .text:1000BF04j
		mov	ebx, [eax+18h]
		mov	eax, offset loc_1000CC90
		test	ebx, ebx
		cmovz	ebx, eax
		push	ebx
		push	ebp
		push	dword ptr [esp+2Ch]
		push	edx
		push	dword ptr [esp+30h]
		push	esi
		push	dword ptr [esp+30h]
		push	dword ptr [esp+30h]
		push	ecx
		call	sub_1000CF50
		mov	esi, eax
		add	esp, 24h
		test	esi, esi
		js	short loc_1000BF7F
		push	8
		push	1
		call	ldap_x_calloc
		mov	ecx, eax
		add	esp, 8
		test	ecx, ecx
		jnz	short loc_1000BF6C
		push	esi
		call	ebx
		add	esp, 4
		push	0
		push	0
		push	5Ah
		push	dword ptr [edi+4]
		call	ldap_set_lderrno
		pop	ebp
		pop	ebx
		pop	edi
		or	eax, 0FFFFFFFFh
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1000BF6C:				; CODE XREF: .text:1000BF4Ej
		mov	[ecx], esi
		mov	esi, 1
		mov	eax, [edi+4]
		mov	[ecx+4], eax
		mov	eax, [esp+28h]
		mov	[eax], ecx

loc_1000BF7F:				; CODE XREF: .text:1000BF3Cj
		pop	ebp
		pop	ebx
		pop	edi
		mov	eax, esi
		pop	esi
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000BF90	proc near		; DATA XREF: sub_1000C200+7Co

var_820		= dword	ptr -820h
var_81C		= dword	ptr -81Ch
var_818		= dword	ptr -818h
var_814		= dword	ptr -814h
var_810		= dword	ptr -810h
var_80C		= dword	ptr -80Ch
var_808		= dword	ptr -808h
var_408		= dword	ptr -408h
var_404		= dword	ptr -404h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 820h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+820h+var_4], eax
		mov	eax, [esp+820h+arg_C]
		xor	ecx, ecx
		mov	edx, [esp+820h+arg_0]
		push	ebx
		push	ebp
		mov	[esp+828h+var_820], eax
		xor	ebx, ebx
		mov	eax, [eax+4]
		xor	ebp, ebp
		push	esi
		push	edi
		mov	edi, [esp+830h+arg_4]
		xor	esi, esi
		mov	eax, [eax+0A0h]
		mov	[esp+830h+var_814], edx
		mov	[esp+830h+var_818], eax
		mov	[esp+830h+var_80C], esi
		mov	[esp+830h+var_408], ecx
		test	edi, edi
		jle	short loc_1000C05F
		lea	esp, [esp+0]

loc_1000BFF0:				; CODE XREF: sub_1000BF90+CDj
		mov	eax, [edx]
		test	eax, eax
		js	short loc_1000C057
		cmp	eax, 100h
		jge	short loc_1000C070
		movzx	eax, word ptr [edx+8]
		mov	[esp+830h+var_810], eax
		test	al, 1
		mov	eax, [edx]
		jz	short loc_1000C020
		cmp	esi, 100h
		jnb	short loc_1000C020
		mov	[esp+esi*4+830h+var_808], eax
		mov	esi, [esp+830h+var_80C]
		inc	esi
		mov	[esp+830h+var_80C], esi

loc_1000C020:				; CODE XREF: sub_1000BF90+79j
					; sub_1000BF90+81j
		test	byte ptr [esp+830h+var_810], 4
		jz	short loc_1000C045
		cmp	ecx, 100h
		jnb	short loc_1000C045
		mov	[esp+ecx*4+830h+var_404], eax
		mov	ecx, [esp+830h+var_408]
		inc	ecx
		mov	[esp+830h+var_408], ecx

loc_1000C045:				; CODE XREF: sub_1000BF90+95j
					; sub_1000BF90+9Dj
		xor	edi, edi
		cmp	eax, ebx
		mov	[edx+0Ah], di
		mov	edi, [esp+830h+arg_4]
		cmovge	ebx, eax

loc_1000C057:				; CODE XREF: sub_1000BF90+64j
		inc	ebp
		add	edx, 0Ch
		cmp	ebp, edi
		jl	short loc_1000BFF0

loc_1000C05F:				; CODE XREF: sub_1000BF90+57j
		mov	ecx, [esp+830h+arg_8]
		inc	ebx
		cmp	ecx, 0FFFFFFFFh
		jnz	short loc_1000C0A4
		xor	eax, eax
		jmp	short loc_1000C0CF
; ---------------------------------------------------------------------------

loc_1000C070:				; CODE XREF: sub_1000BF90+6Bj
		mov	eax, [esp+830h+var_820]
		mov	eax, [eax+4]
		mov	eax, [eax+0CCh]
		test	eax, eax
		jz	short loc_1000C090
		push	16h
		call	eax
		add	esp, 4
		or	eax, 0FFFFFFFFh
		jmp	loc_1000C146
; ---------------------------------------------------------------------------

loc_1000C090:				; CODE XREF: sub_1000BF90+EFj
		call	ds:_errno
		mov	dword ptr [eax], 16h
		or	eax, 0FFFFFFFFh
		jmp	loc_1000C146
; ---------------------------------------------------------------------------

loc_1000C0A4:				; CODE XREF: sub_1000BF90+DAj
		mov	eax, 10624DD3h
		imul	ecx
		sar	edx, 6
		mov	eax, edx
		shr	eax, 1Fh
		add	eax, edx
		mov	[esp+830h+var_820], eax
		imul	eax, 3E8h
		sub	ecx, eax
		imul	eax, ecx, 3E8h
		mov	[esp+830h+var_81C], eax
		lea	eax, [esp+830h+var_820]

loc_1000C0CF:				; CODE XREF: sub_1000BF90+DEj
		push	eax
		push	0
		lea	eax, [esp+838h+var_408]
		push	eax
		lea	eax, [esp+83Ch+var_80C]
		push	eax
		mov	eax, [esp+840h+var_818]
		push	ebx
		mov	eax, [eax+8]
		call	eax
		mov	ebx, eax
		add	esp, 14h
		test	ebx, ebx
		jle	short loc_1000C144
		test	edi, edi
		jle	short loc_1000C144
		mov	esi, [esp+830h+var_814]
		add	esi, 0Ah
		lea	ecx, [ecx+0]

loc_1000C100:				; CODE XREF: sub_1000BF90+1B2j
		mov	eax, [esi-0Ah]
		test	eax, eax
		js	short loc_1000C13E
		test	byte ptr [esi-2], 1
		jz	short loc_1000C120
		lea	ecx, [esp+830h+var_80C]
		push	ecx
		push	eax
		call	sub_10019DC0
		test	eax, eax
		jz	short loc_1000C120
		or	word ptr [esi],	1

loc_1000C120:				; CODE XREF: sub_1000BF90+17Bj
					; sub_1000BF90+18Aj
		test	byte ptr [esi-2], 4
		jz	short loc_1000C13E
		lea	eax, [esp+830h+var_408]
		push	eax
		push	dword ptr [esi-0Ah]
		call	sub_10019DC0
		test	eax, eax
		jz	short loc_1000C13E
		or	word ptr [esi],	4

loc_1000C13E:				; CODE XREF: sub_1000BF90+175j
					; sub_1000BF90+194j ...
		add	esi, 0Ch
		dec	edi
		jnz	short loc_1000C100

loc_1000C144:				; CODE XREF: sub_1000BF90+160j
					; sub_1000BF90+164j
		mov	eax, ebx

loc_1000C146:				; CODE XREF: sub_1000BF90+FBj
					; sub_1000BF90+10Fj
		mov	ecx, [esp+830h+var_4]
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 820h
		retn
sub_1000BF90	endp

; ---------------------------------------------------------------------------
		align 10h

loc_1000C160:				; DATA XREF: sub_1000C200+68o
		mov	ecx, [esp+10h]
		push	dword ptr [esp+0Ch]
		push	dword ptr [esp+0Ch]
		mov	eax, [ecx+4]
		push	dword ptr [ecx]
		mov	eax, [eax+0A0h]
		mov	eax, [eax]
		call	eax
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_1000C180:				; DATA XREF: sub_1000C200+72o
		mov	ecx, [esp+10h]
		push	dword ptr [esp+0Ch]
		push	dword ptr [esp+0Ch]
		mov	eax, [ecx+4]
		push	dword ptr [ecx]
		mov	eax, [eax+0A0h]
		mov	eax, [eax+4]
		call	eax
		add	esp, 0Ch
		retn

; =============== S U B	R O U T	I N E =======================================


sub_1000C1A0	proc near		; CODE XREF: sub_1000C8E0+A0p
					; sub_1000C9F0+A0p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= word ptr  0Ch

		mov	eax, [esp+arg_4]
		xor	ecx, ecx
		push	ebx
		push	ebp
		push	esi
		mov	esi, [eax+4]
		push	edi
		test	esi, esi
		jle	short loc_1000C1D9
		mov	ebx, [esp+10h+arg_0]
		xor	edx, edx
		mov	edi, [eax]
		mov	ebp, [ebx]
		jmp	short loc_1000C1C0
; ---------------------------------------------------------------------------
		align 10h

loc_1000C1C0:				; CODE XREF: sub_1000C1A0+1Bj
					; sub_1000C1A0+37j
		cmp	ebp, [edx+edi]
		jnz	short loc_1000C1D1
		mov	eax, [ebx+164h]
		cmp	eax, [edx+edi+4]
		jz	short loc_1000C1E0

loc_1000C1D1:				; CODE XREF: sub_1000C1A0+23j
		inc	ecx
		add	edx, 0Ch
		cmp	ecx, esi
		jl	short loc_1000C1C0

loc_1000C1D9:				; CODE XREF: sub_1000C1A0+Fj
		pop	edi
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1000C1E0:				; CODE XREF: sub_1000C1A0+2Fj
		mov	ax, [esp+10h+arg_8]
		lea	ecx, [ecx+ecx*2]
		test	[edi+ecx*4+0Ah], ax
		mov	eax, 0
		pop	edi
		pop	esi
		pop	ebp
		setnz	al
		pop	ebx
		retn
sub_1000C1A0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000C200	proc near		; CODE XREF: ldap_set_option+283p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	edi
		push	8
		push	1
		call	ldap_x_calloc
		mov	edi, eax
		add	esp, 8
		test	edi, edi
		jnz	short loc_1000C218
		lea	eax, [edi+5Ah]
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_1000C218:				; CODE XREF: sub_1000C200+11j
		push	esi
		mov	esi, [esp+8+arg_0]
		mov	dword ptr [edi], 0FFFFFFFFh
		mov	[edi+4], esi
		mov	eax, [esi+0A0h]
		test	eax, eax
		jz	short loc_1000C2A2
		xorps	xmm0, xmm0
		movdqu	xmmword	ptr [eax], xmm0
		movdqu	xmmword	ptr [eax+10h], xmm0

loc_1000C23C:				; CODE XREF: sub_1000C200+B6j
		mov	eax, [esp+8+arg_4]
		mov	ecx, [esi+0A0h]
		movdqu	xmm0, xmmword ptr [eax]
		movdqu	xmmword	ptr [ecx], xmm0
		movdqu	xmm0, xmmword ptr [eax+10h]
		movdqu	xmmword	ptr [ecx+10h], xmm0
		mov	dword ptr [esi+78h], 14h
		push	dword ptr [esi]
		mov	[esi+98h], edi
		push	esi
		mov	dword ptr [esi+84h], offset loc_1000C160
		mov	dword ptr [esi+88h], offset loc_1000C180
		mov	dword ptr [esi+8Ch], offset sub_1000BF90
		mov	dword ptr [esi+7Ch], offset loc_1000BE80
		mov	dword ptr [esi+80h], offset loc_1000BE50
		call	sub_1000C2D0
		add	esp, 8
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_1000C2A2:				; CODE XREF: sub_1000C200+2Ej
		push	20h
		push	1
		call	ldap_x_calloc
		add	esp, 8
		mov	[esi+0A0h], eax
		test	eax, eax
		jnz	short loc_1000C23C
		push	edi
		call	ldap_x_free
		add	esp, 4
		mov	eax, 5Ah
		pop	esi
		pop	edi
		retn
sub_1000C200	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000C2D0	proc near		; CODE XREF: sub_1000C200+97p
					; ldap_set_option+56Ep

var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		sub	esp, 14h
		test	edx, edx
		jz	short loc_1000C32A
		mov	ecx, [esp+14h+arg_0]
		mov	[esp+14h+var_14], 14h
		mov	eax, [ecx+84h]
		mov	[esp+14h+var_10], eax
		mov	eax, [ecx+88h]
		mov	[esp+14h+var_C], eax
		mov	eax, [ecx+9Ch]
		mov	[esp+14h+var_4], eax
		mov	eax, [ecx+98h]
		mov	[esp+14h+var_8], eax
		lea	eax, [esp+14h+var_14]
		push	eax
		push	100h
		push	edx
		call	ber_sockbuf_set_option
		test	eax, eax
		jz	short loc_1000C32A
		mov	eax, 52h
		add	esp, 14h
		retn
; ---------------------------------------------------------------------------

loc_1000C32A:				; CODE XREF: sub_1000C2D0+9j
					; sub_1000C2D0+4Fj
		xor	eax, eax
		add	esp, 14h
		retn
sub_1000C2D0	endp


; =============== S U B	R O U T	I N E =======================================


sub_1000C330	proc near		; CODE XREF: sub_10017FA0+4B1p

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		test	esi, esi
		jz	short loc_1000C38F
		cmp	dword ptr [esi+0A0h], 0
		jz	short loc_1000C363
		mov	eax, [esi+98h]
		test	eax, eax
		jz	short loc_1000C355
		push	eax
		call	ldap_x_free
		add	esp, 4

loc_1000C355:				; CODE XREF: sub_1000C330+1Aj
		push	dword ptr [esi+0A0h]
		call	ldap_x_free
		add	esp, 4

loc_1000C363:				; CODE XREF: sub_1000C330+10j
		mov	esi, [esi+6Ch]
		test	esi, esi
		jz	short loc_1000C38F
		mov	eax, [esi]
		cmp	eax, 1
		jz	short loc_1000C386
		cmp	eax, 2
		jnz	short loc_1000C386
		mov	eax, [esi+0Ch]
		test	eax, eax
		jz	short loc_1000C386
		push	eax
		call	ldap_x_free
		add	esp, 4

loc_1000C386:				; CODE XREF: sub_1000C330+3Fj
					; sub_1000C330+44j ...
		push	esi
		call	ldap_x_free
		add	esp, 4

loc_1000C38F:				; CODE XREF: sub_1000C330+7j
					; sub_1000C330+38j
		pop	esi
		retn
sub_1000C330	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000C3A0	proc near		; CODE XREF: sub_1000C410+74p
					; sub_1000C630+75p ...

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		cmp	dword ptr [esi+6Ch], 0
		jnz	short loc_1000C3FD
		push	101Ch
		push	1
		call	ldap_x_calloc
		add	esp, 8
		test	eax, eax
		jnz	short loc_1000C3CD
		push	eax
		push	eax
		push	5Ah
		push	esi
		call	ldap_set_lderrno
		or	eax, 0FFFFFFFFh
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1000C3CD:				; CODE XREF: sub_1000C3A0+1Cj
		cmp	dword ptr [esi+8Ch], 0
		jnz	short loc_1000C3F4
		mov	dword ptr [eax], 1
		mov	dword ptr [eax+0Ch], 0
		mov	dword ptr [eax+410h], 0
		mov	[esi+6Ch], eax
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1000C3F4:				; CODE XREF: sub_1000C3A0+34j
		mov	dword ptr [eax], 2
		mov	[esi+6Ch], eax

loc_1000C3FD:				; CODE XREF: sub_1000C3A0+9j
		xor	eax, eax
		pop	esi
		retn
sub_1000C3A0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000C410	proc near		; CODE XREF: sub_1000F570+3Cp
					; sub_1000F5E0+2Dp ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		push	esi
		mov	esi, [esp+8+arg_0]
		xor	ebp, ebp
		mov	eax, [esi+0C0h]
		test	eax, eax
		jz	short loc_1000C47E
		mov	ecx, [esi+0DCh]
		test	ecx, ecx
		jz	short loc_1000C47E
		mov	edx, [esi+13Ch]
		test	edx, edx
		jz	short loc_1000C476
		call	edx
		cmp	[esi+168h], eax
		jnz	short loc_1000C448
		inc	dword ptr [esi+1A0h]
		jmp	short loc_1000C47E
; ---------------------------------------------------------------------------

loc_1000C448:				; CODE XREF: sub_1000C410+2Ej
		mov	eax, [esi+0DCh]
		push	dword ptr [eax+28h]
		mov	eax, [esi+0C0h]
		call	eax
		mov	eax, [esi+13Ch]
		add	esp, 4
		call	eax
		mov	[esi+168h], eax
		mov	dword ptr [esi+1A0h], 1
		jmp	short loc_1000C47E
; ---------------------------------------------------------------------------

loc_1000C476:				; CODE XREF: sub_1000C410+24j
		push	dword ptr [ecx+28h]
		call	eax
		add	esp, 4

loc_1000C47E:				; CODE XREF: sub_1000C410+10j
					; sub_1000C410+1Aj ...
		cmp	[esi+6Ch], ebp
		jnz	short loc_1000C498
		push	esi
		call	sub_1000C3A0
		add	esp, 4
		test	eax, eax
		jns	short loc_1000C498
		or	ebp, 0FFFFFFFFh
		jmp	loc_1000C5B2
; ---------------------------------------------------------------------------

loc_1000C498:				; CODE XREF: sub_1000C410+71j
					; sub_1000C410+7Ej
		push	ebx
		push	edi
		mov	edi, [esi+6Ch]
		mov	eax, [edi]
		cmp	eax, 1
		jnz	loc_1000C57C
		mov	eax, [esp+10h+arg_4]
		lea	ebx, [edi+410h]
		push	ebx
		push	dword ptr [eax]
		call	sub_10019DC0
		test	eax, eax
		jz	short loc_1000C51E
		mov	edx, [ebx]
		xor	ecx, ecx
		test	edx, edx
		jz	short loc_1000C51B
		lea	eax, [edi+414h]
		lea	esp, [esp+0]

loc_1000C4D0:				; CODE XREF: sub_1000C410+D4j
		mov	ebx, [esp+10h+arg_4]
		mov	esi, [ebx]
		cmp	[eax], esi
		mov	esi, [esp+10h+arg_0]
		jz	short loc_1000C4E8
		inc	ecx
		add	eax, 4
		cmp	ecx, edx
		jb	short loc_1000C4D0
		jmp	short loc_1000C51B
; ---------------------------------------------------------------------------

loc_1000C4E8:				; CODE XREF: sub_1000C410+CCj
		lea	eax, [edx-1]
		cmp	ecx, eax
		jnb	short loc_1000C515
		lea	edx, [edi+414h]
		lea	edx, [edx+ecx*4]
		jmp	short loc_1000C500
; ---------------------------------------------------------------------------
		align 10h

loc_1000C500:				; CODE XREF: sub_1000C410+E8j
					; sub_1000C410+103j
		mov	eax, [edx+4]
		lea	edx, [edx+4]
		mov	[edx-4], eax
		inc	ecx
		mov	eax, [edi+410h]
		dec	eax
		cmp	ecx, eax
		jb	short loc_1000C500

loc_1000C515:				; CODE XREF: sub_1000C410+DDj
		dec	dword ptr [edi+410h]

loc_1000C51B:				; CODE XREF: sub_1000C410+B4j
					; sub_1000C410+D6j
		dec	dword ptr [edi+8]

loc_1000C51E:				; CODE XREF: sub_1000C410+ACj
		mov	eax, [esp+10h+arg_4]
		lea	ebx, [edi+0Ch]
		push	ebx
		push	dword ptr [eax]
		call	sub_10019DC0
		test	eax, eax
		jz	short loc_1000C5B0
		mov	edx, [ebx]
		xor	ecx, ecx
		test	edx, edx
		jz	short loc_1000C5AD
		lea	eax, [edi+10h]
		lea	esp, [esp+0]

loc_1000C540:				; CODE XREF: sub_1000C410+144j
		mov	ebx, [esp+10h+arg_4]
		mov	esi, [ebx]
		cmp	[eax], esi
		mov	esi, [esp+10h+arg_0]
		jz	short loc_1000C558
		inc	ecx
		add	eax, 4
		cmp	ecx, edx
		jb	short loc_1000C540
		jmp	short loc_1000C5AD
; ---------------------------------------------------------------------------

loc_1000C558:				; CODE XREF: sub_1000C410+13Cj
		lea	eax, [edx-1]
		cmp	ecx, eax
		jnb	short loc_1000C577
		lea	edx, [edi+10h]
		lea	edx, [edx+ecx*4]

loc_1000C565:				; CODE XREF: sub_1000C410+165j
		mov	eax, [edx+4]
		lea	edx, [edx+4]
		mov	[edx-4], eax
		inc	ecx
		mov	eax, [edi+0Ch]
		dec	eax
		cmp	ecx, eax
		jb	short loc_1000C565

loc_1000C577:				; CODE XREF: sub_1000C410+14Dj
		dec	dword ptr [edi+0Ch]
		jmp	short loc_1000C5AD
; ---------------------------------------------------------------------------

loc_1000C57C:				; CODE XREF: sub_1000C410+92j
		cmp	eax, 2
		jnz	short loc_1000C5B0
		push	4
		lea	ebx, [edi+0Ch]
		push	ebx
		push	[esp+18h+arg_4]
		call	sub_1000BC60
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_1000C59A
		dec	dword ptr [edi+8]

loc_1000C59A:				; CODE XREF: sub_1000C410+185j
		push	1
		push	ebx
		push	[esp+18h+arg_4]
		call	sub_1000BC60
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_1000C5B0

loc_1000C5AD:				; CODE XREF: sub_1000C410+127j
					; sub_1000C410+146j ...
		dec	dword ptr [edi+4]

loc_1000C5B0:				; CODE XREF: sub_1000C410+11Fj
					; sub_1000C410+16Fj ...
		pop	edi
		pop	ebx

loc_1000C5B2:				; CODE XREF: sub_1000C410+83j
		cmp	dword ptr [esi+0C0h], 0
		jz	short loc_1000C61C
		mov	eax, [esi+0DCh]
		test	eax, eax
		jz	short loc_1000C61C
		mov	ecx, [esi+13Ch]
		test	ecx, ecx
		jz	short loc_1000C60E
		call	ecx
		cmp	[esi+168h], eax
		jnz	short loc_1000C61C
		dec	dword ptr [esi+1A0h]
		jnz	short loc_1000C61C
		mov	dword ptr [esi+168h], 0FFFFFFFFh
		mov	dword ptr [esi+1A0h], 0
		mov	ecx, [esi+0DCh]
		push	dword ptr [ecx+28h]
		mov	ecx, [esi+0C4h]
		call	ecx
		add	esp, 4
		mov	eax, ebp
		pop	esi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_1000C60E:				; CODE XREF: sub_1000C410+1BDj
		push	dword ptr [eax+28h]
		mov	eax, [esi+0C4h]
		call	eax
		add	esp, 4

loc_1000C61C:				; CODE XREF: sub_1000C410+1A9j
					; sub_1000C410+1B3j ...
		pop	esi
		mov	eax, ebp
		pop	ebp
		retn
sub_1000C410	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000C630	proc near		; CODE XREF: sub_1000FC60+92p
					; sub_1000FD40+6CBp

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebx
		push	esi
		mov	esi, [esp+8+arg_0]
		xor	ebx, ebx
		mov	eax, [esi+0C0h]
		test	eax, eax
		jz	short loc_1000C69E
		mov	ecx, [esi+0DCh]
		test	ecx, ecx
		jz	short loc_1000C69E
		mov	edx, [esi+13Ch]
		test	edx, edx
		jz	short loc_1000C696
		call	edx
		cmp	[esi+168h], eax
		jnz	short loc_1000C668
		inc	dword ptr [esi+1A0h]
		jmp	short loc_1000C69E
; ---------------------------------------------------------------------------

loc_1000C668:				; CODE XREF: sub_1000C630+2Ej
		mov	eax, [esi+0DCh]
		push	dword ptr [eax+28h]
		mov	eax, [esi+0C0h]
		call	eax
		mov	eax, [esi+13Ch]
		add	esp, 4
		call	eax
		mov	[esi+168h], eax
		mov	dword ptr [esi+1A0h], 1
		jmp	short loc_1000C69E
; ---------------------------------------------------------------------------

loc_1000C696:				; CODE XREF: sub_1000C630+24j
		push	dword ptr [ecx+28h]
		call	eax
		add	esp, 4

loc_1000C69E:				; CODE XREF: sub_1000C630+10j
					; sub_1000C630+1Aj ...
		push	ebp
		cmp	[esi+6Ch], ebx
		jnz	short loc_1000C6B6
		push	esi
		call	sub_1000C3A0
		add	esp, 4
		test	eax, eax
		jns	short loc_1000C6B6
		or	ebx, 0FFFFFFFFh
		jmp	short loc_1000C70D
; ---------------------------------------------------------------------------

loc_1000C6B6:				; CODE XREF: sub_1000C630+72j
					; sub_1000C630+7Fj
		push	edi
		mov	edi, [esi+6Ch]
		mov	eax, [edi]
		cmp	eax, 1
		jnz	short loc_1000C6EE
		mov	eax, [esp+10h+arg_4]
		lea	ebp, [edi+0Ch]
		push	ebp
		push	dword ptr [eax]
		call	sub_10019DC0
		test	eax, eax
		jnz	short loc_1000C70C
		mov	ecx, [ebp+0]
		cmp	ecx, 100h
		jnb	short loc_1000C709
		mov	eax, [esp+10h+arg_4]
		mov	eax, [eax]
		mov	[edi+ecx*4+10h], eax
		inc	dword ptr [ebp+0]
		jmp	short loc_1000C709
; ---------------------------------------------------------------------------

loc_1000C6EE:				; CODE XREF: sub_1000C630+8Fj
		cmp	eax, 2
		jnz	short loc_1000C70C
		push	1
		lea	eax, [edi+0Ch]
		push	eax
		push	[esp+18h+arg_4]
		call	sub_1000BB10
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_1000C70C

loc_1000C709:				; CODE XREF: sub_1000C630+ADj
					; sub_1000C630+BCj
		inc	dword ptr [edi+4]

loc_1000C70C:				; CODE XREF: sub_1000C630+A2j
					; sub_1000C630+C1j ...
		pop	edi

loc_1000C70D:				; CODE XREF: sub_1000C630+84j
		cmp	dword ptr [esi+0C0h], 0
		pop	ebp
		jz	short loc_1000C778
		mov	eax, [esi+0DCh]
		test	eax, eax
		jz	short loc_1000C778
		mov	ecx, [esi+13Ch]
		test	ecx, ecx
		jz	short loc_1000C76A
		call	ecx
		cmp	[esi+168h], eax
		jnz	short loc_1000C778
		dec	dword ptr [esi+1A0h]
		jnz	short loc_1000C778
		mov	dword ptr [esi+168h], 0FFFFFFFFh
		mov	dword ptr [esi+1A0h], 0
		mov	ecx, [esi+0DCh]
		push	dword ptr [ecx+28h]
		mov	ecx, [esi+0C4h]
		call	ecx
		add	esp, 4
		mov	eax, ebx
		pop	esi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1000C76A:				; CODE XREF: sub_1000C630+F9j
		push	dword ptr [eax+28h]
		mov	eax, [esi+0C4h]
		call	eax
		add	esp, 4

loc_1000C778:				; CODE XREF: sub_1000C630+E5j
					; sub_1000C630+EFj ...
		pop	esi
		mov	eax, ebx
		pop	ebx
		retn
sub_1000C630	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000C780	proc near		; CODE XREF: sub_10001510+5Dp
					; sub_1000FD40+4AFp ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebx
		push	esi
		mov	esi, [esp+8+arg_0]
		xor	ebx, ebx
		mov	eax, [esi+0C0h]
		test	eax, eax
		jz	short loc_1000C7EE
		mov	ecx, [esi+0DCh]
		test	ecx, ecx
		jz	short loc_1000C7EE
		mov	edx, [esi+13Ch]
		test	edx, edx
		jz	short loc_1000C7E6
		call	edx
		cmp	[esi+168h], eax
		jnz	short loc_1000C7B8
		inc	dword ptr [esi+1A0h]
		jmp	short loc_1000C7EE
; ---------------------------------------------------------------------------

loc_1000C7B8:				; CODE XREF: sub_1000C780+2Ej
		mov	eax, [esi+0DCh]
		push	dword ptr [eax+28h]
		mov	eax, [esi+0C0h]
		call	eax
		mov	eax, [esi+13Ch]
		add	esp, 4
		call	eax
		mov	[esi+168h], eax
		mov	dword ptr [esi+1A0h], 1
		jmp	short loc_1000C7EE
; ---------------------------------------------------------------------------

loc_1000C7E6:				; CODE XREF: sub_1000C780+24j
		push	dword ptr [ecx+28h]
		call	eax
		add	esp, 4

loc_1000C7EE:				; CODE XREF: sub_1000C780+10j
					; sub_1000C780+1Aj ...
		push	ebp
		cmp	[esi+6Ch], ebx
		jnz	short loc_1000C806
		push	esi
		call	sub_1000C3A0
		add	esp, 4
		test	eax, eax
		jns	short loc_1000C806
		or	ebx, 0FFFFFFFFh
		jmp	short loc_1000C863
; ---------------------------------------------------------------------------

loc_1000C806:				; CODE XREF: sub_1000C780+72j
					; sub_1000C780+7Fj
		push	edi
		mov	edi, [esi+6Ch]
		mov	eax, [edi]
		cmp	eax, 1
		jnz	short loc_1000C844
		mov	eax, [esp+10h+arg_4]
		lea	ebp, [edi+410h]
		push	ebp
		push	dword ptr [eax]
		call	sub_10019DC0
		test	eax, eax
		jnz	short loc_1000C862
		mov	ecx, [ebp+0]
		cmp	ecx, 100h
		jnb	short loc_1000C85F
		mov	eax, [esp+10h+arg_4]
		mov	eax, [eax]
		mov	[edi+ecx*4+414h], eax
		inc	dword ptr [ebp+0]
		jmp	short loc_1000C85F
; ---------------------------------------------------------------------------

loc_1000C844:				; CODE XREF: sub_1000C780+8Fj
		cmp	eax, 2
		jnz	short loc_1000C862
		push	4
		lea	eax, [edi+0Ch]
		push	eax
		push	[esp+18h+arg_4]
		call	sub_1000BB10
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_1000C862

loc_1000C85F:				; CODE XREF: sub_1000C780+B0j
					; sub_1000C780+C2j
		inc	dword ptr [edi+8]

loc_1000C862:				; CODE XREF: sub_1000C780+A5j
					; sub_1000C780+C7j ...
		pop	edi

loc_1000C863:				; CODE XREF: sub_1000C780+84j
		cmp	dword ptr [esi+0C0h], 0
		pop	ebp
		jz	short loc_1000C8CE
		mov	eax, [esi+0DCh]
		test	eax, eax
		jz	short loc_1000C8CE
		mov	ecx, [esi+13Ch]
		test	ecx, ecx
		jz	short loc_1000C8C0
		call	ecx
		cmp	[esi+168h], eax
		jnz	short loc_1000C8CE
		dec	dword ptr [esi+1A0h]
		jnz	short loc_1000C8CE
		mov	dword ptr [esi+168h], 0FFFFFFFFh
		mov	dword ptr [esi+1A0h], 0
		mov	ecx, [esi+0DCh]
		push	dword ptr [ecx+28h]
		mov	ecx, [esi+0C4h]
		call	ecx
		add	esp, 4
		mov	eax, ebx
		pop	esi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1000C8C0:				; CODE XREF: sub_1000C780+FFj
		push	dword ptr [eax+28h]
		mov	eax, [esi+0C4h]
		call	eax
		add	esp, 4

loc_1000C8CE:				; CODE XREF: sub_1000C780+EBj
					; sub_1000C780+F5j ...
		pop	esi
		mov	eax, ebx
		pop	ebx
		retn
sub_1000C780	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000C8E0	proc near		; CODE XREF: sub_10011E90+680p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_0]
		push	edi
		xor	edi, edi
		mov	eax, [esi+0C0h]
		test	eax, eax
		jz	short loc_1000C94E
		mov	ecx, [esi+0DCh]
		test	ecx, ecx
		jz	short loc_1000C94E
		mov	edx, [esi+13Ch]
		test	edx, edx
		jz	short loc_1000C946
		call	edx
		cmp	[esi+168h], eax
		jnz	short loc_1000C918
		inc	dword ptr [esi+1A0h]
		jmp	short loc_1000C94E
; ---------------------------------------------------------------------------

loc_1000C918:				; CODE XREF: sub_1000C8E0+2Ej
		mov	eax, [esi+0DCh]
		push	dword ptr [eax+28h]
		mov	eax, [esi+0C0h]
		call	eax
		mov	eax, [esi+13Ch]
		add	esp, 4
		call	eax
		mov	[esi+168h], eax
		mov	dword ptr [esi+1A0h], 1
		jmp	short loc_1000C94E
; ---------------------------------------------------------------------------

loc_1000C946:				; CODE XREF: sub_1000C8E0+24j
		push	dword ptr [ecx+28h]
		call	eax
		add	esp, 4

loc_1000C94E:				; CODE XREF: sub_1000C8E0+10j
					; sub_1000C8E0+1Aj ...
		mov	eax, [esi+6Ch]
		test	eax, eax
		jz	short loc_1000C98E
		mov	ecx, [eax]
		cmp	ecx, 1
		jnz	short loc_1000C971
		add	eax, 814h
		push	eax
		mov	eax, [esp+0Ch+arg_4]
		push	dword ptr [eax]
		call	sub_10019DC0
		mov	edi, eax
		jmp	short loc_1000C98E
; ---------------------------------------------------------------------------

loc_1000C971:				; CODE XREF: sub_1000C8E0+7Aj
		cmp	ecx, 2
		jnz	short loc_1000C98C
		push	0FFFFFFFBh
		add	eax, 0Ch
		push	eax
		push	[esp+10h+arg_4]
		call	sub_1000C1A0
		add	esp, 0Ch
		mov	edi, eax
		jmp	short loc_1000C98E
; ---------------------------------------------------------------------------

loc_1000C98C:				; CODE XREF: sub_1000C8E0+94j
		xor	edi, edi

loc_1000C98E:				; CODE XREF: sub_1000C8E0+73j
					; sub_1000C8E0+8Fj ...
		cmp	dword ptr [esi+0C0h], 0
		jz	short loc_1000C9E5
		mov	eax, [esi+0DCh]
		test	eax, eax
		jz	short loc_1000C9E5
		mov	ecx, [esi+13Ch]
		test	ecx, ecx
		jz	short loc_1000C9D7
		call	ecx
		cmp	[esi+168h], eax
		jnz	short loc_1000C9E5
		dec	dword ptr [esi+1A0h]
		jnz	short loc_1000C9E5
		mov	dword ptr [esi+168h], 0FFFFFFFFh
		mov	dword ptr [esi+1A0h], 0
		mov	eax, [esi+0DCh]

loc_1000C9D7:				; CODE XREF: sub_1000C8E0+C9j
		push	dword ptr [eax+28h]
		mov	eax, [esi+0C4h]
		call	eax
		add	esp, 4

loc_1000C9E5:				; CODE XREF: sub_1000C8E0+B5j
					; sub_1000C8E0+BFj ...
		mov	eax, edi
		pop	edi
		pop	esi
		retn
sub_1000C8E0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000C9F0	proc near		; CODE XREF: sub_1000FD40+3DFp
					; sub_1000FD40+6F7p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_0]
		push	edi
		xor	edi, edi
		mov	eax, [esi+0C0h]
		test	eax, eax
		jz	short loc_1000CA5E
		mov	ecx, [esi+0DCh]
		test	ecx, ecx
		jz	short loc_1000CA5E
		mov	edx, [esi+13Ch]
		test	edx, edx
		jz	short loc_1000CA56
		call	edx
		cmp	[esi+168h], eax
		jnz	short loc_1000CA28
		inc	dword ptr [esi+1A0h]
		jmp	short loc_1000CA5E
; ---------------------------------------------------------------------------

loc_1000CA28:				; CODE XREF: sub_1000C9F0+2Ej
		mov	eax, [esi+0DCh]
		push	dword ptr [eax+28h]
		mov	eax, [esi+0C0h]
		call	eax
		mov	eax, [esi+13Ch]
		add	esp, 4
		call	eax
		mov	[esi+168h], eax
		mov	dword ptr [esi+1A0h], 1
		jmp	short loc_1000CA5E
; ---------------------------------------------------------------------------

loc_1000CA56:				; CODE XREF: sub_1000C9F0+24j
		push	dword ptr [ecx+28h]
		call	eax
		add	esp, 4

loc_1000CA5E:				; CODE XREF: sub_1000C9F0+10j
					; sub_1000C9F0+1Aj ...
		mov	eax, [esi+6Ch]
		test	eax, eax
		jz	short loc_1000CA9E
		mov	ecx, [eax]
		cmp	ecx, 1
		jnz	short loc_1000CA81
		add	eax, 0C18h
		push	eax
		mov	eax, [esp+0Ch+arg_4]
		push	dword ptr [eax]
		call	sub_10019DC0
		mov	edi, eax
		jmp	short loc_1000CA9E
; ---------------------------------------------------------------------------

loc_1000CA81:				; CODE XREF: sub_1000C9F0+7Aj
		cmp	ecx, 2
		jnz	short loc_1000CA9C
		push	0FFFFFFFEh
		add	eax, 0Ch
		push	eax
		push	[esp+10h+arg_4]
		call	sub_1000C1A0
		add	esp, 0Ch
		mov	edi, eax
		jmp	short loc_1000CA9E
; ---------------------------------------------------------------------------

loc_1000CA9C:				; CODE XREF: sub_1000C9F0+94j
		xor	edi, edi

loc_1000CA9E:				; CODE XREF: sub_1000C9F0+73j
					; sub_1000C9F0+8Fj ...
		cmp	dword ptr [esi+0C0h], 0
		jz	short loc_1000CAF5
		mov	eax, [esi+0DCh]
		test	eax, eax
		jz	short loc_1000CAF5
		mov	ecx, [esi+13Ch]
		test	ecx, ecx
		jz	short loc_1000CAE7
		call	ecx
		cmp	[esi+168h], eax
		jnz	short loc_1000CAF5
		dec	dword ptr [esi+1A0h]
		jnz	short loc_1000CAF5
		mov	dword ptr [esi+168h], 0FFFFFFFFh
		mov	dword ptr [esi+1A0h], 0
		mov	eax, [esi+0DCh]

loc_1000CAE7:				; CODE XREF: sub_1000C9F0+C9j
		push	dword ptr [eax+28h]
		mov	eax, [esi+0C4h]
		call	eax
		add	esp, 4

loc_1000CAF5:				; CODE XREF: sub_1000C9F0+B5j
					; sub_1000C9F0+BFj ...
		mov	eax, edi
		pop	edi
		pop	esi
		retn
sub_1000C9F0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000CB00	proc near		; CODE XREF: sub_1000FD40+3CEp
					; sub_10011E90+515p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		mov	ebp, [esp+4+arg_0]
		push	esi
		mov	eax, [ebp+0C0h]
		test	eax, eax
		jz	short loc_1000CB6C
		mov	ecx, [ebp+0DCh]
		test	ecx, ecx
		jz	short loc_1000CB6C
		mov	edx, [ebp+13Ch]
		test	edx, edx
		jz	short loc_1000CB64
		call	edx
		cmp	[ebp+168h], eax
		jnz	short loc_1000CB36
		inc	dword ptr [ebp+1A0h]
		jmp	short loc_1000CB6C
; ---------------------------------------------------------------------------

loc_1000CB36:				; CODE XREF: sub_1000CB00+2Cj
		mov	eax, [ebp+0DCh]
		push	dword ptr [eax+28h]
		mov	eax, [ebp+0C0h]
		call	eax
		mov	eax, [ebp+13Ch]
		add	esp, 4
		call	eax
		mov	[ebp+168h], eax
		mov	dword ptr [ebp+1A0h], 1
		jmp	short loc_1000CB6C
; ---------------------------------------------------------------------------

loc_1000CB64:				; CODE XREF: sub_1000CB00+22j
		push	dword ptr [ecx+28h]
		call	eax
		add	esp, 4

loc_1000CB6C:				; CODE XREF: sub_1000CB00+Ej
					; sub_1000CB00+18j ...
		mov	eax, [ebp+6Ch]
		mov	[esp+8+arg_0], eax
		test	eax, eax
		jz	loc_1000CC2F
		cmp	dword ptr [eax+4], 0
		jg	short loc_1000CB8B
		cmp	dword ptr [eax+8], 0
		jle	loc_1000CC2F

loc_1000CB8B:				; CODE XREF: sub_1000CB00+7Fj
		mov	ecx, [eax]
		cmp	ecx, 1
		jnz	short loc_1000CBE3
		push	ebx
		push	edi
		push	[esp+10h+arg_4]
		lea	ebx, [eax+814h]
		mov	ecx, 101h
		lea	esi, [eax+0Ch]
		mov	edi, ebx
		rep movsd
		lea	edx, [eax+0C18h]
		mov	ecx, 101h
		lea	esi, [eax+410h]
		mov	edi, edx
		mov	eax, dword_100249F4
		test	eax, eax
		push	0
		rep movsd
		push	edx
		mov	ecx, 14h
		cmovz	eax, ecx
		push	ebx
		push	eax
		mov	dword_100249F4,	eax
		call	sub_1001A010
		pop	edi
		mov	esi, eax
		pop	ebx
		jmp	short loc_1000CC31
; ---------------------------------------------------------------------------

loc_1000CBE3:				; CODE XREF: sub_1000CB00+90j
		cmp	ecx, 2
		jnz	short loc_1000CC2F
		mov	esi, [esp+8+arg_4]
		test	esi, esi
		jnz	short loc_1000CBF5
		or	ecx, 0FFFFFFFFh
		jmp	short loc_1000CC13
; ---------------------------------------------------------------------------

loc_1000CBF5:				; CODE XREF: sub_1000CB00+EEj
		mov	eax, 10624DD3h
		imul	dword ptr [esi+4]
		imul	eax, [esi], 3E8h
		sar	edx, 6
		mov	ecx, edx
		shr	ecx, 1Fh
		add	ecx, edx
		add	ecx, eax
		mov	eax, [esp+8+arg_0]

loc_1000CC13:				; CODE XREF: sub_1000CB00+F3j
		push	dword ptr [ebp+98h]
		push	ecx
		push	dword ptr [eax+10h]
		push	dword ptr [eax+0Ch]
		mov	eax, [ebp+8Ch]
		call	eax
		add	esp, 10h
		mov	esi, eax
		jmp	short loc_1000CC31
; ---------------------------------------------------------------------------

loc_1000CC2F:				; CODE XREF: sub_1000CB00+75j
					; sub_1000CB00+85j ...
		xor	esi, esi

loc_1000CC31:				; CODE XREF: sub_1000CB00+E1j
					; sub_1000CB00+12Dj
		cmp	dword ptr [ebp+0C0h], 0
		jz	short loc_1000CC88
		mov	eax, [ebp+0DCh]
		test	eax, eax
		jz	short loc_1000CC88
		mov	ecx, [ebp+13Ch]
		test	ecx, ecx
		jz	short loc_1000CC7A
		call	ecx
		cmp	[ebp+168h], eax
		jnz	short loc_1000CC88
		dec	dword ptr [ebp+1A0h]
		jnz	short loc_1000CC88
		mov	dword ptr [ebp+168h], 0FFFFFFFFh
		mov	dword ptr [ebp+1A0h], 0
		mov	eax, [ebp+0DCh]

loc_1000CC7A:				; CODE XREF: sub_1000CB00+14Cj
		push	dword ptr [eax+28h]
		mov	eax, [ebp+0C4h]
		call	eax
		add	esp, 4

loc_1000CC88:				; CODE XREF: sub_1000CB00+138j
					; sub_1000CB00+142j ...
		mov	eax, esi
		pop	esi
		pop	ebp
		retn
sub_1000CB00	endp

; ---------------------------------------------------------------------------
		align 10h

loc_1000CC90:				; DATA XREF: sub_1000BDA0:loc_1000BDEFo
					; .text:1000BF11o
		push	dword ptr [esp+4]
		call	sub_10019E10
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_1000CCA0	proc near		; DATA XREF: sub_1000BDA0+56o
					; .text:1000BEFCo

var_C3C		= dword	ptr -0C3Ch
var_C38		= dword	ptr -0C38h
var_C34		= dword	ptr -0C34h
var_C30		= dword	ptr -0C30h
var_C2C		= dword	ptr -0C2Ch
var_C28		= dword	ptr -0C28h
var_C24		= dword	ptr -0C24h
var_C20		= dword	ptr -0C20h
var_C1C		= dword	ptr -0C1Ch
var_818		= byte ptr -818h
var_410		= byte ptr -410h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		and	esp, 0FFFFFFF8h
		sub	esp, 0C3Ch
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+0C3Ch+var_4], eax
		mov	eax, [ebp+arg_C]
		push	ebx
		mov	ebx, [ebp+arg_0]
		push	esi
		mov	esi, [ebp+arg_4]
		push	edi
		mov	[esp+0C48h+var_C2C], eax
		lea	eax, [esp+0C48h+var_C28]
		push	eax
		push	8004667Eh
		push	ebx
		mov	[esp+0C54h+var_C28], 1
		mov	[esp+0C54h+var_C30], 0
		call	sub_10019F70
		push	[ebp+arg_8]
		mov	[esp+0C4Ch+var_C3C], 0
		push	esi
		push	ebx
		call	sub_10019E50
		mov	esi, eax
		test	esi, esi
		jns	short loc_1000CD19
		cmp	esi, 0FFFFFFFFh
		jz	short loc_1000CD17
		call	sub_10019C60
		cmp	eax, 2733h
		jnz	loc_1000CDDD

loc_1000CD17:				; CODE XREF: sub_1000CCA0+65j
		test	esi, esi

loc_1000CD19:				; CODE XREF: sub_1000CCA0+60j
		jz	loc_1000CE7C
		mov	[esp+0C48h+var_C1C], ebx
		lea	esi, [esp+0C48h+var_C20]
		mov	[esp+0C48h+var_C20], 1
		lea	edi, [esp+0C48h+var_818]
		mov	ecx, 101h
		rep movsd
		mov	ecx, 101h
		lea	esi, [esp+0C48h+var_C20]
		lea	edi, [esp+0C48h+var_410]
		rep movsd
		mov	esi, [esp+0C48h+var_C2C]
		test	esi, esi
		jns	short loc_1000CD63
		cmp	esi, 0FFFFFFFFh
		jz	short loc_1000CD61
		or	esi, 0FFFFFFFFh
		jmp	short loc_1000CDA0
; ---------------------------------------------------------------------------

loc_1000CD61:				; CODE XREF: sub_1000CCA0+BAj
		test	esi, esi

loc_1000CD63:				; CODE XREF: sub_1000CCA0+B5j
		jz	short loc_1000CD90
		mov	eax, 10624DD3h
		mov	ecx, esi
		imul	esi
		sar	edx, 6
		mov	eax, edx
		shr	eax, 1Fh
		add	eax, edx
		mov	[esp+0C48h+var_C38], eax
		imul	eax, 3E8h
		sub	ecx, eax
		imul	eax, ecx, 3E8h
		mov	[esp+0C48h+var_C34], eax
		jmp	short loc_1000CDA0
; ---------------------------------------------------------------------------

loc_1000CD90:				; CODE XREF: sub_1000CCA0:loc_1000CD63j
		mov	[esp+0C48h+var_C38], 0
		mov	[esp+0C48h+var_C34], 0

loc_1000CDA0:				; CODE XREF: sub_1000CCA0+BFj
					; sub_1000CCA0+EEj
		xor	ecx, ecx
		lea	eax, [esp+0C48h+var_C38]
		cmp	esi, 0FFFFFFFFh
		cmovz	eax, ecx
		push	eax
		lea	eax, [esp+0C4Ch+var_410]
		push	eax
		lea	eax, [esp+0C50h+var_818]
		push	eax
		lea	eax, [esp+0C54h+var_C20]
		push	eax
		lea	eax, [ebx+1]
		push	eax
		call	sub_1001A010
		mov	esi, eax
		test	esi, esi
		jnz	short loc_1000CDF5
		call	ds:_errno
		mov	dword ptr [eax], 274Ch

loc_1000CDDD:				; CODE XREF: sub_1000CCA0+71j
					; sub_1000CCA0+186j ...
		or	eax, 0FFFFFFFFh
		pop	edi
		pop	esi
		pop	ebx
		mov	ecx, [esp+0C3Ch+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	esp, ebp
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_1000CDF5:				; CODE XREF: sub_1000CCA0+12Fj
		lea	eax, [esp+0C48h+var_818]
		push	eax
		push	ebx
		call	sub_10019DC0
		test	eax, eax
		jnz	short loc_1000CE52
		lea	eax, [esp+0C48h+var_C20]
		push	eax
		push	ebx
		call	sub_10019DC0
		test	eax, eax
		jnz	short loc_1000CE52
		lea	eax, [esp+0C48h+var_410]
		push	eax
		push	ebx
		call	sub_10019DC0
		test	eax, eax
		jnz	short loc_1000CDDD
		cmp	esi, 0FFFFFFFFh
		jnz	short loc_1000CE7C
		push	offset ErrMsg	; "select error: SOCKET_ERROR returned"
		call	ds:perror
		add	esp, 4
		or	eax, esi
		pop	edi
		pop	esi
		pop	ebx
		mov	ecx, [esp+0C3Ch+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	esp, ebp
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_1000CE52:				; CODE XREF: sub_1000CCA0+165j
					; sub_1000CCA0+174j
		lea	eax, [esp+0C48h+var_C24]
		mov	[esp+0C48h+var_C24], 4
		push	eax
		lea	eax, [esp+0C4Ch+var_C3C]
		push	eax
		push	1007h
		push	0FFFFh
		push	ebx
		call	sub_10019ED0
		test	eax, eax
		js	loc_1000CDDD

loc_1000CE7C:				; CODE XREF: sub_1000CCA0:loc_1000CD19j
					; sub_1000CCA0+18Bj
		lea	eax, [esp+0C48h+var_C30]
		push	eax
		push	8004667Eh
		push	ebx
		call	sub_10019F70
		cmp	[esp+0C48h+var_C3C], 0
		jz	short loc_1000CEB7
		call	ds:_errno
		mov	ecx, [esp+0C48h+var_C3C]
		mov	[eax], ecx
		or	eax, 0FFFFFFFFh
		pop	edi
		pop	esi
		pop	ebx
		mov	ecx, [esp+0C3Ch+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	esp, ebp
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_1000CEB7:				; CODE XREF: sub_1000CCA0+1F1j
		mov	ecx, [esp+0C48h+var_4]
		xor	eax, eax
		pop	edi
		pop	esi
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	esp, ebp
		pop	ebp
		retn
sub_1000CCA0	endp

; ---------------------------------------------------------------------------
		align 10h

loc_1000CED0:				; DATA XREF: sub_1000BDA0+5Bo
					; .text:1000BEE3o
		cmp	dword ptr [esp+8], 8004667Eh
		jz	short loc_1000CEDE
		or	eax, 0FFFFFFFFh
		retn
; ---------------------------------------------------------------------------

loc_1000CEDE:				; CODE XREF: .text:1000CED8j
		mov	eax, [esp+0Ch]
		mov	eax, [eax]
		mov	[esp+8], eax
		lea	eax, [esp+8]
		push	eax
		push	8004667Eh
		push	dword ptr [esp+0Ch]
		call	sub_10019F70
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_1000CF00:				; DATA XREF: sub_1000BDA0+60o
					; .text:1000BEDBo
		cmp	dword ptr [esp+8], 0
		jz	short loc_1000CF0E
		push	offset aSecureModeNotS ; "secure mode not supported"
		jmp	short loc_1000CF29
; ---------------------------------------------------------------------------

loc_1000CF0E:				; CODE XREF: .text:1000CF05j
		push	dword ptr [esp+14h]
		push	dword ptr [esp+14h]
		push	dword ptr [esp+14h]
		call	sub_1001A0E0
		cmp	eax, 0FFFFFFFFh
		jnz	short locret_1000CF42
		push	offset aUnableToCreate ; "unable to create a socket"

loc_1000CF29:				; CODE XREF: .text:1000CF0Cj
		call	sub_1000BAB0
		add	esp, 4
		push	eax
		push	0
		push	52h
		push	dword ptr [esp+10h]
		call	ldap_set_lderrno
		or	eax, 0FFFFFFFFh

locret_1000CF42:			; CODE XREF: .text:1000CF22j
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000CF50	proc near		; CODE XREF: sub_1000BDA0+72p
					; .text:1000BF30p

var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
Memory		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= byte ptr -28h
Dst		= xmmword ptr -14h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch
arg_1C		= dword	ptr  20h
arg_20		= dword	ptr  24h

		sub	esp, 60h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+60h+var_4], eax
		mov	ecx, [esp+60h+arg_10]
		mov	eax, [esp+60h+arg_4]
		mov	[esp+60h+var_44], ecx
		mov	ecx, [esp+60h+arg_14]
		mov	[esp+60h+var_38], ecx
		mov	ecx, [esp+60h+arg_18]
		push	ebx
		mov	[esp+64h+var_40], ecx
		or	ebx, 0FFFFFFFFh
		mov	ecx, [esp+64h+arg_1C]
		push	ebp
		mov	[esp+68h+var_3C], ecx
		mov	ecx, [esp+68h+arg_20]
		push	esi
		mov	esi, [esp+6Ch+arg_0]
		mov	[esp+6Ch+var_34], ecx
		xor	ecx, ecx
		push	edi
		mov	[esp+70h+var_5C], ecx
		xor	edi, edi
		mov	[esp+70h+var_48], ecx
		lea	ecx, [esp+70h+Memory]
		push	ecx
		lea	ecx, [esp+74h+var_4C]
		push	ecx
		lea	ecx, [esp+78h+var_60]
		push	ecx
		push	[esp+7Ch+arg_8]
		push	eax
		call	ldap_x_hostlist_first

loc_1000CFC3:				; CODE XREF: sub_1000CF50+298j
		test	eax, eax
		mov	eax, [esp+70h+var_60]
		jnz	loc_1000D1F2
		test	eax, eax
		jz	loc_1000D1F2
		push	eax
		mov	[esp+74h+var_5C], 0
		xor	edi, edi
		xor	ebp, ebp
		xor	ebx, ebx
		call	sub_10019F50
		mov	[esp+70h+var_2C], eax
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_1000D06C
		cmp	[esi+0ACh], ebx
		jnz	short loc_1000D012
		push	[esp+70h+var_60]
		call	sub_10019E90
		test	eax, eax
		jz	loc_1000D235
		mov	ebx, [eax+0Ch]
		jmp	short loc_1000D05F
; ---------------------------------------------------------------------------

loc_1000D012:				; CODE XREF: sub_1000CF50+AAj
		push	dword ptr [esi+0A8h]
		call	ldap_x_malloc
		mov	ebx, eax
		add	esp, 4
		mov	[esp+70h+var_5C], ebx
		test	ebx, ebx
		jz	loc_1000D272
		push	dword ptr [esi+0A4h]
		lea	eax, [esp+74h+var_54]
		push	eax
		push	dword ptr [esi+0A8h]
		lea	eax, [esp+7Ch+var_28]
		push	ebx
		push	eax
		push	[esp+84h+var_60]
		mov	eax, [esi+0ACh]
		call	eax
		add	esp, 18h
		test	eax, eax
		jz	loc_1000D235
		mov	ebx, [eax+10h]

loc_1000D05F:				; CODE XREF: sub_1000CF50+C0j
		test	ebx, ebx
		jz	loc_1000D231
		mov	ebp, 1

loc_1000D06C:				; CODE XREF: sub_1000CF50+A2j
		mov	[esp+70h+var_50], 0FFFFFFFFh

loc_1000D074:				; CODE XREF: sub_1000CF50+25Bj
		test	ebp, ebp
		jz	short loc_1000D081
		cmp	dword ptr [ebx], 0
		jz	loc_1000D1C3

loc_1000D081:				; CODE XREF: sub_1000CF50+126j
		push	0
		push	1
		push	2
		push	[esp+7Ch+arg_C]
		push	esi
		call	[esp+84h+var_44]
		mov	edi, eax
		add	esp, 14h
		cmp	edi, 0FFFFFFFFh
		jz	loc_1000D2A6
		test	dword ptr [esi+50h], 4000000h
		jz	short loc_1000D0C8
		lea	eax, [esp+70h+var_30]
		mov	[esp+70h+var_30], 1
		push	eax
		push	8004667Eh
		push	edi
		call	[esp+7Ch+var_38]
		add	esp, 0Ch
		mov	[esp+70h+var_54], eax

loc_1000D0C8:				; CODE XREF: sub_1000CF50+158j
		push	[esp+70h+var_4C]
		xorps	xmm0, xmm0
		mov	eax, 2
		movdqu	[esp+74h+Dst], xmm0
		mov	word ptr [esp+74h+Dst],	ax
		call	sub_10019F30
		mov	word ptr [esp+70h+Dst+2], ax
		test	ebp, ebp
		jz	short loc_1000D0F1
		mov	eax, [ebx]
		jmp	short loc_1000D0F5
; ---------------------------------------------------------------------------

loc_1000D0F1:				; CODE XREF: sub_1000CF50+19Bj
		lea	eax, [esp+70h+var_2C]

loc_1000D0F5:				; CODE XREF: sub_1000CF50+19Fj
		push	4		; Size
		push	eax		; Src
		lea	eax, [esp+78h+Dst+4]
		push	eax		; Dst
		call	ds:memmove
		mov	eax, [esp+7Ch+var_40]
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_1000D123
		push	dword ptr [esi+1B0h]
		lea	ecx, [esp+74h+Dst]
		push	10h
		push	ecx
		push	edi
		call	eax
		add	esp, 10h
		jmp	short loc_1000D132
; ---------------------------------------------------------------------------

loc_1000D123:				; CODE XREF: sub_1000CF50+1BCj
		push	10h
		lea	eax, [esp+74h+Dst]
		push	eax
		push	edi
		call	[esp+7Ch+var_3C]
		add	esp, 0Ch

loc_1000D132:				; CODE XREF: sub_1000CF50+1D1j
		mov	[esp+70h+var_54], eax
		test	eax, eax
		jns	short loc_1000D1B7
		test	dword ptr [esi+50h], 4000000h
		jz	short loc_1000D19C
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_1000D176
		call	sub_10019C60
		cmp	eax, 2733h
		jnz	short loc_1000D176
		mov	eax, [esi+0CCh]
		test	eax, eax
		jz	short loc_1000D16A
		push	2733h
		call	eax
		add	esp, 4
		jmp	short loc_1000D176
; ---------------------------------------------------------------------------

loc_1000D16A:				; CODE XREF: sub_1000CF50+20Cj
		call	ds:_errno
		mov	dword ptr [eax], 2733h

loc_1000D176:				; CODE XREF: sub_1000CF50+1F6j
					; sub_1000CF50+202j ...
		mov	eax, [esi+0C8h]
		test	eax, eax
		jz	short loc_1000D184
		call	eax
		jmp	short loc_1000D18C
; ---------------------------------------------------------------------------

loc_1000D184:				; CODE XREF: sub_1000CF50+22Ej
		call	ds:_errno
		mov	eax, [eax]

loc_1000D18C:				; CODE XREF: sub_1000CF50+232j
		mov	[esp+70h+var_54], eax
		cmp	eax, 2733h
		jz	short loc_1000D1B0
		cmp	eax, 0Bh
		jz	short loc_1000D1B0

loc_1000D19C:				; CODE XREF: sub_1000CF50+1F1j
		push	edi
		call	[esp+74h+var_34]
		add	esp, 4
		test	ebp, ebp
		jz	short loc_1000D1C3
		add	ebx, 4
		jmp	loc_1000D074
; ---------------------------------------------------------------------------

loc_1000D1B0:				; CODE XREF: sub_1000CF50+245j
					; sub_1000CF50+24Aj
		mov	ebx, 0FFFFFFFEh
		jmp	short loc_1000D1C7
; ---------------------------------------------------------------------------

loc_1000D1B7:				; CODE XREF: sub_1000CF50+1E8j
		mov	[esp+70h+var_48], 1
		xor	ebx, ebx
		jmp	short loc_1000D1C7
; ---------------------------------------------------------------------------

loc_1000D1C3:				; CODE XREF: sub_1000CF50+12Bj
					; sub_1000CF50+256j
		mov	ebx, [esp+70h+var_50]

loc_1000D1C7:				; CODE XREF: sub_1000CF50+265j
					; sub_1000CF50+271j
		push	[esp+70h+var_60]
		call	ldap_memfree
		push	[esp+70h+Memory]
		lea	eax, [esp+74h+var_4C]
		push	eax
		lea	eax, [esp+78h+var_60]
		push	eax
		call	ldap_x_hostlist_next
		cmp	[esp+70h+var_48], 0
		jz	loc_1000CFC3
		mov	eax, [esp+70h+var_60]

loc_1000D1F2:				; CODE XREF: sub_1000CF50+79j
					; sub_1000CF50+81j
		mov	ecx, [esp+70h+var_5C]
		test	ecx, ecx
		jz	short loc_1000D207
		push	ecx
		call	ldap_x_free
		mov	eax, [esp+74h+var_60]
		add	esp, 4

loc_1000D207:				; CODE XREF: sub_1000CF50+2A8j
		push	eax
		call	ldap_memfree
		push	[esp+70h+Memory] ; Memory
		call	ldap_x_hostlist_statusfree
		or	eax, 0FFFFFFFFh
		test	ebx, ebx
		cmovz	eax, edi
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		mov	ecx, [esp+60h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 60h
		retn
; ---------------------------------------------------------------------------

loc_1000D231:				; CODE XREF: sub_1000CF50+111j
		mov	ebx, [esp+70h+var_5C]

loc_1000D235:				; CODE XREF: sub_1000CF50+B7j
					; sub_1000CF50+106j
		push	0
		push	0
		push	5Bh
		push	esi
		call	ldap_set_lderrno
		mov	eax, [esi+0CCh]
		test	eax, eax
		jz	short loc_1000D257
		push	2751h
		call	eax
		add	esp, 4
		jmp	short loc_1000D263
; ---------------------------------------------------------------------------

loc_1000D257:				; CODE XREF: sub_1000CF50+2F9j
		call	ds:_errno
		mov	dword ptr [eax], 2751h

loc_1000D263:				; CODE XREF: sub_1000CF50+305j
		test	ebx, ebx
		jz	short loc_1000D27E
		push	ebx
		call	ldap_x_free
		add	esp, 4
		jmp	short loc_1000D27E
; ---------------------------------------------------------------------------

loc_1000D272:				; CODE XREF: sub_1000CF50+D8j
		push	0
		push	0
		push	5Ah
		push	esi
		call	ldap_set_lderrno

loc_1000D27E:				; CODE XREF: sub_1000CF50+315j
					; sub_1000CF50+320j ...
		push	[esp+70h+var_60]
		call	ldap_memfree
		push	[esp+70h+Memory] ; Memory
		call	ldap_x_hostlist_statusfree
		mov	ecx, [esp+70h+var_4]
		or	eax, 0FFFFFFFFh
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 60h
		retn
; ---------------------------------------------------------------------------

loc_1000D2A6:				; CODE XREF: sub_1000CF50+14Bj
		mov	ecx, [esp+70h+var_5C]
		test	ecx, ecx
		jz	short loc_1000D27E
		push	ecx
		call	ldap_x_free
		add	esp, 4
		jmp	short loc_1000D27E
sub_1000CF50	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 536. ldap_create_proxiedauth_control

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	ldap_create_proxiedauth_control(void *Memory, int, int)
		public ldap_create_proxiedauth_control
ldap_create_proxiedauth_control	proc near ; DATA XREF: .rdata:off_10020938o

Memory		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	edi
		mov	edi, [esp+4+Memory]
		test	edi, edi
		jnz	short loc_1000D2D0
		lea	eax, [edi+59h]
		pop	edi
		retn	0Ch
; ---------------------------------------------------------------------------

loc_1000D2D0:				; CODE XREF: ldap_create_proxiedauth_control+7j
		push	esi
		mov	esi, [esp+8+arg_8]
		test	esi, esi
		jz	loc_1000D375
		cmp	[esp+8+arg_4], 0
		jz	loc_1000D375
		lea	eax, [esp+8+Memory]
		push	eax
		push	edi
		call	sub_1000EF40
		add	esp, 8
		test	eax, eax
		jz	short loc_1000D310
		push	0
		push	0
		push	5Ah
		push	edi
		call	ldap_set_lderrno
		pop	esi
		mov	eax, 5Ah
		pop	edi
		retn	0Ch
; ---------------------------------------------------------------------------

loc_1000D310:				; CODE XREF: ldap_create_proxiedauth_control+38j
		push	[esp+8+arg_4]
		push	offset aS_4	; "s"
		push	[esp+10h+Memory]
		call	ber_printf
		add	esp, 0Ch
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_1000D34B
		push	0
		push	0
		push	53h
		push	edi
		call	ldap_set_lderrno
		push	1		; int
		push	[esp+0Ch+Memory] ; Memory
		call	ber_free
		pop	esi
		mov	eax, 53h
		pop	edi
		retn	0Ch
; ---------------------------------------------------------------------------

loc_1000D34B:				; CODE XREF: ldap_create_proxiedauth_control+68j
		push	esi		; int
		push	1		; char
		push	1		; int
		push	[esp+14h+Memory] ; Memory
		push	offset a2_16_840_1_1_1 ; "2.16.840.1.113730.3.4.18"
		call	sub_100029E0
		add	esp, 14h
		mov	esi, eax
		push	0
		push	0
		push	esi
		push	edi
		call	ldap_set_lderrno
		mov	eax, esi
		pop	esi
		pop	edi
		retn	0Ch
; ---------------------------------------------------------------------------

loc_1000D375:				; CODE XREF: ldap_create_proxiedauth_control+17j
					; ldap_create_proxiedauth_control+22j
		push	0
		push	0
		push	59h
		push	edi
		call	ldap_set_lderrno
		pop	esi
		mov	eax, 59h
		pop	edi
		retn	0Ch
ldap_create_proxiedauth_control	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 527. ldap_create_proxyauth_control

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	ldap_create_proxyauth_control(void *Memory, int, char, int)
		public ldap_create_proxyauth_control
ldap_create_proxyauth_control proc near	; DATA XREF: .rdata:off_10020938o

Memory		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= byte ptr  0Ch
arg_C		= dword	ptr  10h

		push	edi
		mov	edi, [esp+4+Memory]
		test	edi, edi
		jnz	short loc_1000D3A0
		lea	eax, [edi+59h]
		pop	edi
		retn	10h
; ---------------------------------------------------------------------------

loc_1000D3A0:				; CODE XREF: ldap_create_proxyauth_control+7j
		push	esi
		mov	esi, [esp+8+arg_C]
		test	esi, esi
		jnz	short loc_1000D3BB
		push	esi
		push	esi
		push	59h
		push	edi
		call	ldap_set_lderrno
		lea	eax, [esi+59h]
		pop	esi
		pop	edi
		retn	10h
; ---------------------------------------------------------------------------

loc_1000D3BB:				; CODE XREF: ldap_create_proxyauth_control+17j
		mov	eax, [esp+8+arg_4]
		test	eax, eax
		push	ebx
		mov	ebx, offset Src
		cmovnz	ebx, eax
		lea	eax, [esp+0Ch+Memory]
		push	eax
		push	edi
		call	sub_1000EF40
		add	esp, 8
		test	eax, eax
		jz	short loc_1000D3F3
		push	0
		push	0
		push	5Ah
		push	edi
		call	ldap_set_lderrno
		pop	ebx
		pop	esi
		mov	eax, 5Ah
		pop	edi
		retn	10h
; ---------------------------------------------------------------------------

loc_1000D3F3:				; CODE XREF: ldap_create_proxyauth_control+4Aj
		push	ebx
		push	offset aS_5	; "{s}"
		push	[esp+14h+Memory]
		call	ber_printf
		add	esp, 0Ch
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_1000D42C
		push	0
		push	0
		push	53h
		push	edi
		call	ldap_set_lderrno
		push	1		; int
		push	[esp+10h+Memory] ; Memory
		call	ber_free
		pop	ebx
		pop	esi
		mov	eax, 53h
		pop	edi
		retn	10h
; ---------------------------------------------------------------------------

loc_1000D42C:				; CODE XREF: ldap_create_proxyauth_control+78j
		push	esi		; int
		push	dword ptr [esp+10h+arg_8] ; char
		push	1		; int
		push	[esp+18h+Memory] ; Memory
		push	offset a2_16_840_1_1_2 ; "2.16.840.1.113730.3.4.12"
		call	sub_100029E0
		add	esp, 14h
		mov	esi, eax
		push	0
		push	0
		push	esi
		push	edi
		call	ldap_set_lderrno
		pop	ebx
		mov	eax, esi
		pop	esi
		pop	edi
		retn	10h
ldap_create_proxyauth_control endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 501. ldap_create_persistentsearch_control

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	ldap_create_persistentsearch_control(void *Memory, int,	int, int, char,	int)
		public ldap_create_persistentsearch_control
ldap_create_persistentsearch_control proc near ; DATA XREF: .rdata:off_10020938o

Memory		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= byte ptr  14h
arg_14		= dword	ptr  18h

		push	edi
		mov	edi, [esp+4+Memory]
		test	edi, edi
		jnz	short loc_1000D470
		lea	eax, [edi+59h]
		pop	edi
		retn	18h
; ---------------------------------------------------------------------------

loc_1000D470:				; CODE XREF: ldap_create_persistentsearch_control+7j
		push	esi
		mov	esi, [esp+8+arg_14]
		test	esi, esi
		jz	loc_1000D524
		test	[esp+8+arg_4], 0FFFFFFF0h
		jnz	loc_1000D524
		lea	eax, [esp+8+Memory]
		push	eax
		push	edi
		call	sub_1000EF40
		add	esp, 8
		test	eax, eax
		jz	short loc_1000D4B4
		push	0
		push	0
		mov	esi, 5Ah
		push	esi
		push	edi
		call	ldap_set_lderrno
		mov	eax, esi
		pop	esi
		pop	edi
		retn	18h
; ---------------------------------------------------------------------------

loc_1000D4B4:				; CODE XREF: ldap_create_persistentsearch_control+3Bj
		push	[esp+8+arg_C]
		push	[esp+0Ch+arg_8]
		push	[esp+10h+arg_4]
		push	offset aIbb	; "{ibb}"
		push	[esp+18h+Memory]
		call	ber_printf
		add	esp, 14h
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_1000D4F8
		push	1		; int
		push	[esp+0Ch+Memory] ; Memory
		call	ber_free
		push	0
		push	0
		mov	esi, 53h
		push	esi
		push	edi
		call	ldap_set_lderrno
		mov	eax, esi
		pop	esi
		pop	edi
		retn	18h
; ---------------------------------------------------------------------------

loc_1000D4F8:				; CODE XREF: ldap_create_persistentsearch_control+74j
		push	esi		; int
		push	dword ptr [esp+0Ch+arg_10] ; char
		push	1		; int
		push	[esp+14h+Memory] ; Memory
		push	offset a2_16_840_1_1_3 ; "2.16.840.1.113730.3.4.3"
		call	sub_100029E0
		add	esp, 14h
		mov	esi, eax
		push	0
		push	0
		push	esi
		push	edi
		call	ldap_set_lderrno
		mov	eax, esi
		pop	esi
		pop	edi
		retn	18h
; ---------------------------------------------------------------------------

loc_1000D524:				; CODE XREF: ldap_create_persistentsearch_control+17j
					; ldap_create_persistentsearch_control+25j
		push	0
		push	0
		mov	esi, 59h
		push	esi
		push	edi
		call	ldap_set_lderrno
		mov	eax, esi
		pop	esi
		pop	edi
		retn	18h
ldap_create_persistentsearch_control endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 502. ldap_parse_entrychange_control

; =============== S U B	R O U T	I N E =======================================


		public ldap_parse_entrychange_control
ldap_parse_entrychange_control proc near ; DATA	XREF: .rdata:off_10020938o

var_8		= dword	ptr -8
var_4		= byte ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		sub	esp, 8
		cmp	[esp+8+arg_0], 0
		jnz	short loc_1000D555
		mov	eax, 59h
		add	esp, 8
		retn	18h
; ---------------------------------------------------------------------------

loc_1000D555:				; CODE XREF: ldap_parse_entrychange_control+8j
		push	esi
		push	edi
		mov	edi, [esp+10h+arg_4]
		xor	esi, esi
		test	edi, edi
		jz	loc_1000D693

loc_1000D565:				; CODE XREF: ldap_parse_entrychange_control+5Dj
		mov	eax, [edi+esi*4]
		test	eax, eax
		jz	short loc_1000D59F
		mov	eax, [eax]
		mov	ecx, offset a2_16_840_1_1_4 ; "2.16.840.1.113730.3.4.7"

loc_1000D573:				; CODE XREF: ldap_parse_entrychange_control+4Dj
		mov	dl, [eax]
		cmp	dl, [ecx]
		jnz	short loc_1000D593
		test	dl, dl
		jz	short loc_1000D58F
		mov	dl, [eax+1]
		cmp	dl, [ecx+1]
		jnz	short loc_1000D593
		add	eax, 2
		add	ecx, 2
		test	dl, dl
		jnz	short loc_1000D573

loc_1000D58F:				; CODE XREF: ldap_parse_entrychange_control+3Bj
		xor	eax, eax
		jmp	short loc_1000D598
; ---------------------------------------------------------------------------

loc_1000D593:				; CODE XREF: ldap_parse_entrychange_control+37j
					; ldap_parse_entrychange_control+43j
		sbb	eax, eax
		or	eax, 1

loc_1000D598:				; CODE XREF: ldap_parse_entrychange_control+51j
		test	eax, eax
		jz	short loc_1000D59F
		inc	esi
		jmp	short loc_1000D565
; ---------------------------------------------------------------------------

loc_1000D59F:				; CODE XREF: ldap_parse_entrychange_control+2Aj
					; ldap_parse_entrychange_control+5Aj
		mov	eax, [edi+esi*4]
		test	eax, eax
		jz	loc_1000D693
		add	eax, 4
		push	eax
		call	ber_init
		mov	esi, eax
		test	esi, esi
		jnz	short loc_1000D5C1
		lea	esi, [eax+5Ah]
		jmp	loc_1000D698
; ---------------------------------------------------------------------------

loc_1000D5C1:				; CODE XREF: ldap_parse_entrychange_control+77j
		lea	eax, [esp+10h+var_8]
		push	eax
		push	offset aE	; "{e"
		push	esi		; Dst
		call	ber_scanf
		add	esp, 0Ch
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_1000D5EB

loc_1000D5D9:				; CODE XREF: ldap_parse_entrychange_control+CAj
		push	1		; int
		push	esi		; Memory
		call	ber_free
		mov	esi, 54h
		jmp	loc_1000D698
; ---------------------------------------------------------------------------

loc_1000D5EB:				; CODE XREF: ldap_parse_entrychange_control+97j
		mov	edi, [esp+10h+var_8]
		cmp	edi, 8
		jnz	short loc_1000D612
		lea	eax, [esp+10h+arg_4]
		push	eax
		push	offset aA_0	; "a"
		push	esi		; Dst
		call	ber_scanf
		add	esp, 0Ch
		cmp	eax, 0FFFFFFFFh
		jz	short loc_1000D5D9
		mov	eax, [esp+10h+arg_4]
		jmp	short loc_1000D618
; ---------------------------------------------------------------------------

loc_1000D612:				; CODE XREF: ldap_parse_entrychange_control+B2j
		xor	eax, eax
		mov	[esp+10h+arg_4], eax

loc_1000D618:				; CODE XREF: ldap_parse_entrychange_control+D0j
		mov	ecx, [esp+10h+arg_8]
		test	ecx, ecx
		jz	short loc_1000D622
		mov	[ecx], edi

loc_1000D622:				; CODE XREF: ldap_parse_entrychange_control+DEj
		mov	ecx, [esp+10h+arg_C]
		test	ecx, ecx
		jz	short loc_1000D62E
		mov	[ecx], eax
		jmp	short loc_1000D63B
; ---------------------------------------------------------------------------

loc_1000D62E:				; CODE XREF: ldap_parse_entrychange_control+E8j
		test	eax, eax
		jz	short loc_1000D63B
		push	eax
		call	ldap_x_free
		add	esp, 4

loc_1000D63B:				; CODE XREF: ldap_parse_entrychange_control+ECj
					; ldap_parse_entrychange_control+F0j
		mov	edi, [esp+10h+arg_14]
		test	edi, edi
		jz	short loc_1000D687
		lea	eax, [esp+10h+var_4]
		push	eax
		push	esi
		call	ber_peek_tag
		cmp	eax, 2
		jnz	short loc_1000D679
		push	edi
		push	esi
		call	ber_get_int
		cmp	eax, 0FFFFFFFFh
		jz	short loc_1000D679
		mov	eax, [esp+10h+arg_10]
		test	eax, eax
		jz	short loc_1000D687
		push	1		; int
		push	esi		; Memory
		mov	dword ptr [eax], 1
		call	ber_free
		xor	esi, esi
		jmp	short loc_1000D698
; ---------------------------------------------------------------------------

loc_1000D679:				; CODE XREF: ldap_parse_entrychange_control+111j
					; ldap_parse_entrychange_control+11Dj
		mov	eax, [esp+10h+arg_10]
		test	eax, eax
		jz	short loc_1000D687
		mov	dword ptr [eax], 0

loc_1000D687:				; CODE XREF: ldap_parse_entrychange_control+101j
					; ldap_parse_entrychange_control+125j ...
		push	1		; int
		push	esi		; Memory
		call	ber_free
		xor	esi, esi
		jmp	short loc_1000D698
; ---------------------------------------------------------------------------

loc_1000D693:				; CODE XREF: ldap_parse_entrychange_control+1Fj
					; ldap_parse_entrychange_control+64j
		mov	esi, 5Dh

loc_1000D698:				; CODE XREF: ldap_parse_entrychange_control+7Cj
					; ldap_parse_entrychange_control+A6j ...
		push	0
		push	0
		push	esi
		push	[esp+1Ch+arg_0]
		call	ldap_set_lderrno
		pop	edi
		mov	eax, esi
		pop	esi
		add	esp, 8
		retn	18h
ldap_parse_entrychange_control endp

; Exported entry 571. ldap_parse_passwd

; =============== S U B	R O U T	I N E =======================================


		public ldap_parse_passwd
ldap_parse_passwd proc near		; CODE XREF: ldap_passwd_s+77p
					; DATA XREF: .rdata:off_10020938o

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 8
		push	esi
		mov	esi, [esp+0Ch+arg_0]
		mov	[esp+0Ch+var_8], 0
		mov	[esp+0Ch+var_4], 0
		push	0
		test	esi, esi
		jnz	short loc_1000D6E1
		push	esi
		push	59h
		push	esi
		call	ldap_set_lderrno
		lea	eax, [esi+59h]
		pop	esi
		add	esp, 8
		retn	0Ch
; ---------------------------------------------------------------------------

loc_1000D6E1:				; CODE XREF: ldap_parse_passwd+1Cj
		mov	eax, [esp+10h+arg_4]
		test	eax, eax
		jnz	short loc_1000D6FF

loc_1000D6E9:				; CODE XREF: ldap_parse_passwd+54j
		push	0
		push	59h
		push	esi
		call	ldap_set_lderrno
		mov	eax, 59h
		pop	esi
		add	esp, 8
		retn	0Ch
; ---------------------------------------------------------------------------

loc_1000D6FF:				; CODE XREF: ldap_parse_passwd+37j
		cmp	[esp+10h+arg_8], 0
		jz	short loc_1000D6E9
		lea	ecx, [esp+10h+var_4]
		push	ecx
		lea	ecx, [esp+14h+var_8]
		push	ecx
		push	eax
		push	esi
		call	ldap_parse_extended_result
		test	eax, eax
		jnz	loc_1000D7A7
		push	eax
		push	eax
		push	esi
		call	ldap_get_lderrno
		test	eax, eax
		jnz	short loc_1000D7A7
		mov	eax, [esp+0Ch+var_4]
		push	edi
		test	eax, eax
		jz	short loc_1000D79B
		push	eax
		call	ber_init
		mov	edi, eax
		test	edi, edi
		jnz	short loc_1000D755
		push	eax
		push	eax
		push	5Ah
		push	esi
		call	ldap_set_lderrno
		lea	eax, [edi+5Ah]
		pop	edi
		pop	esi
		add	esp, 8
		retn	0Ch
; ---------------------------------------------------------------------------

loc_1000D755:				; CODE XREF: ldap_parse_passwd+8Ej
		lea	eax, [esp+10h+arg_0]
		push	eax		; int
		push	edi		; Dst
		call	ber_skip_tag
		cmp	eax, 0FFFFFFFFh
		jz	short loc_1000D7AE
		lea	eax, [esp+10h+arg_0]
		push	eax
		push	edi
		call	ber_peek_tag
		cmp	eax, 0FFFFFFFFh
		jz	short loc_1000D7AE
		cmp	eax, 80h
		jnz	short loc_1000D7AE
		push	[esp+10h+arg_8]
		push	offset aO_1	; "o}"
		push	edi		; Dst
		call	ber_scanf
		add	esp, 0Ch
		cmp	eax, 0FFFFFFFFh
		jz	short loc_1000D7AE
		push	1		; int
		push	edi		; Memory
		call	ber_free

loc_1000D79B:				; CODE XREF: ldap_parse_passwd+82j
		push	[esp+10h+var_8]
		call	ldap_memfree
		xor	eax, eax
		pop	edi

loc_1000D7A7:				; CODE XREF: ldap_parse_passwd+69j
					; ldap_parse_passwd+79j
		pop	esi
		add	esp, 8
		retn	0Ch
; ---------------------------------------------------------------------------

loc_1000D7AE:				; CODE XREF: ldap_parse_passwd+B3j
					; ldap_parse_passwd+C3j ...
		push	0
		push	0
		push	54h
		push	esi
		call	ldap_set_lderrno
		push	1		; int
		push	edi		; Memory
		call	ber_free
		push	[esp+10h+var_8]
		call	ldap_memfree
		pop	edi
		mov	eax, 54h
		pop	esi
		add	esp, 8
		retn	0Ch
ldap_parse_passwd endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 570. ldap_passwd

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	ldap_passwd(void *, int, int, int, int,	int, int)
		public ldap_passwd
ldap_passwd	proc near		; CODE XREF: ldap_passwd_s+3Ep
					; DATA XREF: .rdata:off_10020938o

Memory		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch

		sub	esp, 8
		push	esi
		mov	esi, [esp+0Ch+arg_0]
		mov	[esp+0Ch+Memory], 0
		mov	[esp+0Ch+var_4], 0
		test	esi, esi
		jnz	short loc_1000D810
		push	esi
		push	esi
		push	59h
		push	esi
		call	ldap_set_lderrno
		lea	eax, [esi+59h]
		pop	esi
		add	esp, 8
		retn	1Ch
; ---------------------------------------------------------------------------

loc_1000D810:				; CODE XREF: ldap_passwd+1Aj
		push	8
		call	ldap_x_malloc
		add	esp, 4
		mov	[esp+0Ch+var_4], eax
		test	eax, eax
		jnz	short loc_1000D838
		push	eax
		push	eax
		push	5Ah
		push	esi
		call	ldap_set_lderrno
		mov	eax, 5Ah
		pop	esi
		add	esp, 8
		retn	1Ch
; ---------------------------------------------------------------------------

loc_1000D838:				; CODE XREF: ldap_passwd+40j
		push	ebx
		mov	ebx, [esp+10h+arg_8]
		push	ebp
		mov	ebp, [esp+14h+arg_4]
		push	edi
		mov	edi, [esp+18h+arg_C]
		test	ebp, ebp
		jnz	short loc_1000D85E
		test	ebx, ebx
		jnz	short loc_1000D85E
		test	edi, edi
		jnz	short loc_1000D85E
		xor	eax, eax
		mov	[esp+18h+var_4], eax
		jmp	loc_1000D9A9
; ---------------------------------------------------------------------------

loc_1000D85E:				; CODE XREF: ldap_passwd+69j
					; ldap_passwd+6Dj ...
		lea	eax, [esp+18h+Memory]
		push	eax
		push	esi
		call	sub_1000EF40
		add	esp, 8
		test	eax, eax
		jz	short loc_1000D88B
		push	0
		push	0
		push	5Ah
		push	esi
		call	ldap_set_lderrno
		pop	edi
		pop	ebp
		pop	ebx
		mov	eax, 5Ah
		pop	esi
		add	esp, 8
		retn	1Ch
; ---------------------------------------------------------------------------

loc_1000D88B:				; CODE XREF: ldap_passwd+8Ej
		push	offset asc_1001FD74 ; "{"
		push	[esp+1Ch+Memory]
		call	ber_printf
		add	esp, 8
		cmp	eax, 0FFFFFFFFh
		jz	loc_1000D946
		test	ebp, ebp
		jz	short loc_1000D8D4
		mov	eax, [ebp+4]
		test	eax, eax
		jz	short loc_1000D8D4
		mov	ecx, [ebp+0]
		test	ecx, ecx
		jz	short loc_1000D8D4
		push	ecx
		push	eax
		push	80h
		push	offset aTo	; "to"
		push	[esp+28h+Memory]
		call	ber_printf
		add	esp, 14h
		cmp	eax, 0FFFFFFFFh
		jz	short loc_1000D946

loc_1000D8D4:				; CODE XREF: ldap_passwd+C7j
					; ldap_passwd+CEj ...
		test	ebx, ebx
		jz	short loc_1000D902
		mov	eax, [ebx+4]
		test	eax, eax
		jz	short loc_1000D902
		mov	ecx, [ebx]
		test	ecx, ecx
		jz	short loc_1000D902
		push	ecx
		push	eax
		push	81h
		push	offset aTo	; "to"
		push	[esp+28h+Memory]
		call	ber_printf
		add	esp, 14h
		cmp	eax, 0FFFFFFFFh
		jz	short loc_1000D946

loc_1000D902:				; CODE XREF: ldap_passwd+F6j
					; ldap_passwd+FDj ...
		test	edi, edi
		jz	short loc_1000D930
		mov	eax, [edi+4]
		test	eax, eax
		jz	short loc_1000D930
		mov	ecx, [edi]
		test	ecx, ecx
		jz	short loc_1000D930
		push	ecx
		push	eax
		push	82h
		push	offset aTo	; "to"
		push	[esp+28h+Memory]
		call	ber_printf
		add	esp, 14h
		cmp	eax, 0FFFFFFFFh
		jz	short loc_1000D946

loc_1000D930:				; CODE XREF: ldap_passwd+124j
					; ldap_passwd+12Bj ...
		push	offset asc_1001F9E8 ; "}"
		push	[esp+1Ch+Memory]
		call	ber_printf
		add	esp, 8
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_1000D96C

loc_1000D946:				; CODE XREF: ldap_passwd+BFj
					; ldap_passwd+F2j ...
		push	0
		push	0
		push	53h
		push	esi
		call	ldap_set_lderrno
		push	1		; int
		push	[esp+1Ch+Memory] ; Memory
		call	ber_free
		pop	edi
		pop	ebp
		pop	ebx
		mov	eax, 53h
		pop	esi
		add	esp, 8
		retn	1Ch
; ---------------------------------------------------------------------------

loc_1000D96C:				; CODE XREF: ldap_passwd+164j
		lea	eax, [esp+18h+var_4]
		push	eax
		push	[esp+1Ch+Memory]
		call	ber_flatten
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_1000D9A5
		push	0
		push	0
		push	5Ah
		push	esi
		call	ldap_set_lderrno
		push	1		; int
		push	[esp+1Ch+Memory] ; Memory
		call	ber_free
		pop	edi
		pop	ebp
		pop	ebx
		mov	eax, 5Ah
		pop	esi
		add	esp, 8
		retn	1Ch
; ---------------------------------------------------------------------------

loc_1000D9A5:				; CODE XREF: ldap_passwd+19Dj
		mov	eax, [esp+18h+var_4]

loc_1000D9A9:				; CODE XREF: ldap_passwd+79j
		push	[esp+18h+arg_18] ; int
		push	[esp+1Ch+arg_14] ; int
		push	[esp+20h+arg_10] ; int
		push	eax		; int
		push	offset a1_3_6_1_4_1__0 ; "1.3.6.1.4.1.4203.1.11.1"
		push	esi		; Memory
		call	ldap_extended_operation
		mov	edi, eax
		mov	eax, [esp+18h+var_4]
		test	eax, eax
		jz	short loc_1000D9D1
		push	eax
		call	ber_bvfree

loc_1000D9D1:				; CODE XREF: ldap_passwd+1E9j
		mov	ecx, [esp+18h+Memory]
		test	ecx, ecx
		jz	short loc_1000D9E1
		push	1		; int
		push	ecx		; Memory
		call	ber_free

loc_1000D9E1:				; CODE XREF: ldap_passwd+1F7j
		push	0
		push	0
		push	edi
		push	esi
		call	ldap_set_lderrno
		mov	eax, edi
		pop	edi
		pop	ebp
		pop	ebx
		pop	esi
		add	esp, 8
		retn	1Ch
ldap_passwd	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 573. ldap_passwd_s

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	ldap_passwd_s(void *, int, int,	int, int, int, int)
		public ldap_passwd_s
ldap_passwd_s	proc near		; DATA XREF: .rdata:off_10020938o

var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch

		push	ecx
		push	esi
		mov	esi, [esp+8+arg_0]
		mov	[esp+8+var_4], 0
		test	esi, esi
		jnz	short loc_1000DA24
		push	esi
		push	esi
		push	59h
		push	esi
		call	ldap_set_lderrno
		lea	eax, [esi+59h]
		pop	esi
		pop	ecx
		retn	1Ch
; ---------------------------------------------------------------------------

loc_1000DA24:				; CODE XREF: ldap_passwd_s+10j
		lea	eax, [esp+8+arg_0]
		push	eax		; int
		push	[esp+0Ch+arg_18] ; int
		push	[esp+10h+arg_14] ; int
		push	[esp+14h+arg_C]	; int
		push	[esp+18h+arg_8]	; int
		push	[esp+1Ch+arg_4]	; int
		push	esi		; void *
		call	ldap_passwd
		test	eax, eax
		jnz	short loc_1000DA89
		lea	eax, [esp+8+var_4]
		push	eax
		push	0
		push	1
		push	[esp+14h+arg_0]
		push	esi
		call	ldap_result
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_1000DA6E
		push	0
		push	0
		push	esi
		call	ldap_get_lderrno
		pop	esi
		pop	ecx
		retn	1Ch
; ---------------------------------------------------------------------------

loc_1000DA6E:				; CODE XREF: ldap_passwd_s+5Dj
		push	[esp+8+arg_10]
		push	[esp+0Ch+var_4]
		push	esi
		call	ldap_parse_passwd
		push	[esp+8+var_4]
		mov	esi, eax
		call	ldap_msgfree
		mov	eax, esi

loc_1000DA89:				; CODE XREF: ldap_passwd_s+45j
		pop	esi
		pop	ecx
		retn	1Ch
ldap_passwd_s	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 560. ldap_create_passwordpolicy_control

; =============== S U B	R O U T	I N E =======================================


		public ldap_create_passwordpolicy_control
ldap_create_passwordpolicy_control proc	near ; DATA XREF: .rdata:off_10020938o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	edi
		mov	edi, [esp+4+arg_0]
		test	edi, edi
		jz	short loc_1000DAAB
		mov	eax, [esp+4+arg_4]
		test	eax, eax
		jnz	short loc_1000DAB4
		push	eax
		push	eax
		push	59h
		push	edi
		call	ldap_set_lderrno

loc_1000DAAB:				; CODE XREF: ldap_create_passwordpolicy_control+7j
		mov	eax, 59h
		pop	edi
		retn	8
; ---------------------------------------------------------------------------

loc_1000DAB4:				; CODE XREF: ldap_create_passwordpolicy_control+Fj
		push	esi
		push	eax		; int
		push	0		; char
		push	0		; int
		push	0		; Memory
		push	offset a1_3_6_1_4_1__1 ; "1.3.6.1.4.1.42.2.27.8.5.1"
		call	sub_100029E0
		add	esp, 14h
		mov	esi, eax
		push	0
		push	0
		push	esi
		push	edi
		call	ldap_set_lderrno
		mov	eax, esi
		pop	esi
		pop	edi
		retn	8
ldap_create_passwordpolicy_control endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 561. ldap_create_passwordpolicy_control_ext

; =============== S U B	R O U T	I N E =======================================


		public ldap_create_passwordpolicy_control_ext
ldap_create_passwordpolicy_control_ext proc near ; DATA	XREF: .rdata:off_10020938o

arg_0		= dword	ptr  4
arg_4		= byte ptr  8
arg_8		= dword	ptr  0Ch

		push	edi
		mov	edi, [esp+4+arg_0]
		test	edi, edi
		jz	short loc_1000DAFB
		mov	eax, [esp+4+arg_8]
		test	eax, eax
		jnz	short loc_1000DB04
		push	eax
		push	eax
		push	59h
		push	edi
		call	ldap_set_lderrno

loc_1000DAFB:				; CODE XREF: ldap_create_passwordpolicy_control_ext+7j
		mov	eax, 59h
		pop	edi
		retn	0Ch
; ---------------------------------------------------------------------------

loc_1000DB04:				; CODE XREF: ldap_create_passwordpolicy_control_ext+Fj
		push	esi
		push	eax		; int
		push	dword ptr [esp+0Ch+arg_4] ; char
		push	0		; int
		push	0		; Memory
		push	offset a1_3_6_1_4_1__1 ; "1.3.6.1.4.1.42.2.27.8.5.1"
		call	sub_100029E0
		add	esp, 14h
		mov	esi, eax
		push	0
		push	0
		push	esi
		push	edi
		call	ldap_set_lderrno
		mov	eax, esi
		pop	esi
		pop	edi
		retn	0Ch
ldap_create_passwordpolicy_control_ext endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 562. ldap_parse_passwordpolicy_control

; =============== S U B	R O U T	I N E =======================================


		public ldap_parse_passwordpolicy_control
ldap_parse_passwordpolicy_control proc near
					; CODE XREF: ldap_parse_passwordpolicy_control_ext+8Ap
					; DATA XREF: .rdata:off_10020938o

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		sub	esp, 8
		push	ebx
		push	ebp
		or	ebp, 0FFFFFFFFh
		mov	[esp+10h+var_4], 0FFFFh
		push	edi
		mov	edi, [esp+14h+arg_0]
		or	ebx, ebp
		mov	[esp+14h+var_8], ebp
		test	edi, edi
		jnz	short loc_1000DB5B
		pop	edi
		lea	eax, [ebp+5Ah]
		pop	ebp
		pop	ebx
		add	esp, 8
		retn	14h
; ---------------------------------------------------------------------------

loc_1000DB5B:				; CODE XREF: ldap_parse_passwordpolicy_control+1Dj
		mov	eax, [esp+14h+arg_4]
		test	eax, eax
		jnz	short loc_1000DB7B
		push	eax
		push	eax
		push	5Dh
		push	edi
		call	ldap_set_lderrno
		pop	edi
		pop	ebp
		mov	eax, 5Dh
		pop	ebx
		add	esp, 8
		retn	14h
; ---------------------------------------------------------------------------

loc_1000DB7B:				; CODE XREF: ldap_parse_passwordpolicy_control+31j
		push	esi
		add	eax, 4
		push	eax
		call	ber_init
		mov	esi, eax
		test	esi, esi
		jnz	short loc_1000DBA2
		push	eax
		push	eax
		push	5Ah
		push	edi
		call	ldap_set_lderrno
		lea	eax, [esi+5Ah]
		pop	esi
		pop	edi
		pop	ebp
		pop	ebx
		add	esp, 8
		retn	14h
; ---------------------------------------------------------------------------

loc_1000DBA2:				; CODE XREF: ldap_parse_passwordpolicy_control+59j
		push	offset asc_1001FD74 ; "{"
		push	esi		; Dst
		call	ber_scanf
		add	esp, 8
		cmp	eax, 0FFFFFFFFh
		jz	loc_1000DCA6
		lea	eax, [esp+18h+arg_4]
		push	eax
		push	esi
		call	ber_peek_tag
		mov	[esp+18h+arg_0], eax
		cmp	eax, 0FFFFFFFFh
		jz	loc_1000DC70

loc_1000DBD1:				; CODE XREF: ldap_parse_passwordpolicy_control+13Aj
		cmp	eax, 0FFFFFFFEh
		jz	loc_1000DC70
		cmp	eax, 0A0h
		jnz	short loc_1000DC2B
		lea	eax, [esp+18h+arg_4]
		push	eax		; int
		push	esi		; Dst
		call	ber_skip_tag
		lea	eax, [esp+18h+var_8]
		push	eax
		lea	eax, [esp+1Ch+arg_0]
		push	eax
		push	offset aTi	; "ti"
		push	esi		; Dst
		call	ber_scanf
		add	esp, 10h
		cmp	eax, 0FFFFFFFFh
		jz	loc_1000DCA6
		mov	eax, [esp+18h+arg_0]
		cmp	eax, 80h
		jnz	short loc_1000DC1E
		mov	ebp, [esp+18h+var_8]
		jmp	short loc_1000DC58
; ---------------------------------------------------------------------------

loc_1000DC1E:				; CODE XREF: ldap_parse_passwordpolicy_control+E6j
		cmp	eax, 81h
		jnz	short loc_1000DC53
		mov	ebx, [esp+18h+var_8]
		jmp	short loc_1000DC58
; ---------------------------------------------------------------------------

loc_1000DC2B:				; CODE XREF: ldap_parse_passwordpolicy_control+AFj
		cmp	eax, 81h
		jnz	short loc_1000DC53
		lea	eax, [esp+18h+var_4]
		push	eax
		lea	eax, [esp+1Ch+arg_0]
		push	eax
		push	offset aTi	; "ti"
		push	esi		; Dst
		call	ber_scanf
		add	esp, 10h
		cmp	eax, 0FFFFFFFFh
		jz	short loc_1000DCA6
		mov	eax, [esp+18h+arg_0]

loc_1000DC53:				; CODE XREF: ldap_parse_passwordpolicy_control+F3j
					; ldap_parse_passwordpolicy_control+100j
		cmp	eax, 0FFFFFFFFh
		jz	short loc_1000DCA6

loc_1000DC58:				; CODE XREF: ldap_parse_passwordpolicy_control+ECj
					; ldap_parse_passwordpolicy_control+F9j
		lea	eax, [esp+18h+arg_4]
		push	eax		; int
		push	esi		; Dst
		call	ber_skip_tag
		mov	[esp+18h+arg_0], eax
		cmp	eax, 0FFFFFFFFh
		jnz	loc_1000DBD1

loc_1000DC70:				; CODE XREF: ldap_parse_passwordpolicy_control+9Bj
					; ldap_parse_passwordpolicy_control+A4j
		mov	eax, [esp+18h+arg_8]
		test	eax, eax
		jz	short loc_1000DC7A
		mov	[eax], ebp

loc_1000DC7A:				; CODE XREF: ldap_parse_passwordpolicy_control+146j
		mov	eax, [esp+18h+arg_C]
		test	eax, eax
		jz	short loc_1000DC84
		mov	[eax], ebx

loc_1000DC84:				; CODE XREF: ldap_parse_passwordpolicy_control+150j
		mov	ecx, [esp+18h+arg_10]
		test	ecx, ecx
		jz	short loc_1000DC92
		mov	eax, [esp+18h+var_4]
		mov	[ecx], eax

loc_1000DC92:				; CODE XREF: ldap_parse_passwordpolicy_control+15Aj
		push	1		; int
		push	esi		; Memory
		call	ber_free
		pop	esi
		pop	edi
		pop	ebp
		xor	eax, eax
		pop	ebx
		add	esp, 8
		retn	14h
; ---------------------------------------------------------------------------

loc_1000DCA6:				; CODE XREF: ldap_parse_passwordpolicy_control+83j
					; ldap_parse_passwordpolicy_control+D7j ...
		push	0
		push	0
		push	54h
		push	edi
		call	ldap_set_lderrno
		push	1		; int
		push	esi		; Memory
		call	ber_free
		pop	esi
		pop	edi
		pop	ebp
		mov	eax, 54h
		pop	ebx
		add	esp, 8
		retn	14h
ldap_parse_passwordpolicy_control endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 563. ldap_parse_passwordpolicy_control_ext

; =============== S U B	R O U T	I N E =======================================


		public ldap_parse_passwordpolicy_control_ext
ldap_parse_passwordpolicy_control_ext proc near	; DATA XREF: .rdata:off_10020938o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	ebx
		mov	ebx, [esp+4+arg_0]
		test	ebx, ebx
		jnz	short loc_1000DCE0
		lea	eax, [ebx+59h]
		pop	ebx
		retn	14h
; ---------------------------------------------------------------------------

loc_1000DCE0:				; CODE XREF: ldap_parse_passwordpolicy_control_ext+7j
		push	edi
		mov	edi, [esp+8+arg_4]
		test	edi, edi
		jnz	short loc_1000DCFB
		push	edi
		push	edi
		push	5Dh
		push	ebx
		call	ldap_set_lderrno
		lea	eax, [edi+5Dh]
		pop	edi
		pop	ebx
		retn	14h
; ---------------------------------------------------------------------------

loc_1000DCFB:				; CODE XREF: ldap_parse_passwordpolicy_control_ext+17j
		push	esi
		xor	ecx, ecx
		xor	esi, esi
		cmp	[edi], ecx
		jz	short loc_1000DD65

loc_1000DD04:				; CODE XREF: ldap_parse_passwordpolicy_control_ext+73j
		test	ecx, ecx
		jnz	short loc_1000DD49
		mov	ecx, [edi+esi*4]
		mov	eax, offset a1_3_6_1_4_1__1 ; "1.3.6.1.4.1.42.2.27.8.5.1"
		mov	ecx, [ecx]

loc_1000DD12:				; CODE XREF: ldap_parse_passwordpolicy_control_ext+5Cj
		mov	dl, [ecx]
		cmp	dl, [eax]
		jnz	short loc_1000DD32
		test	dl, dl
		jz	short loc_1000DD2E
		mov	dl, [ecx+1]
		cmp	dl, [eax+1]
		jnz	short loc_1000DD32
		add	ecx, 2
		add	eax, 2
		test	dl, dl
		jnz	short loc_1000DD12

loc_1000DD2E:				; CODE XREF: ldap_parse_passwordpolicy_control_ext+4Aj
		xor	eax, eax
		jmp	short loc_1000DD37
; ---------------------------------------------------------------------------

loc_1000DD32:				; CODE XREF: ldap_parse_passwordpolicy_control_ext+46j
					; ldap_parse_passwordpolicy_control_ext+52j
		sbb	eax, eax
		or	eax, 1

loc_1000DD37:				; CODE XREF: ldap_parse_passwordpolicy_control_ext+60j
		xor	ecx, ecx
		test	eax, eax
		setz	cl
		inc	esi
		cmp	dword ptr [edi+esi*4], 0
		jnz	short loc_1000DD04
		test	ecx, ecx
		jz	short loc_1000DD65

loc_1000DD49:				; CODE XREF: ldap_parse_passwordpolicy_control_ext+36j
		push	[esp+0Ch+arg_10]
		push	[esp+10h+arg_C]
		push	[esp+14h+arg_8]
		push	dword ptr [edi+esi*4-4]
		push	ebx
		call	ldap_parse_passwordpolicy_control
		pop	esi
		pop	edi
		pop	ebx
		retn	14h
; ---------------------------------------------------------------------------

loc_1000DD65:				; CODE XREF: ldap_parse_passwordpolicy_control_ext+32j
					; ldap_parse_passwordpolicy_control_ext+77j
		push	0
		push	0
		push	5Dh
		push	ebx
		call	ldap_set_lderrno
		pop	esi
		pop	edi
		mov	eax, 5Dh
		pop	ebx
		retn	14h
ldap_parse_passwordpolicy_control_ext endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 564. ldap_passwordpolicy_err2txt

; =============== S U B	R O U T	I N E =======================================


		public ldap_passwordpolicy_err2txt
ldap_passwordpolicy_err2txt proc near	; DATA XREF: .rdata:off_10020938o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		cmp	eax, 0FFFFh
		jg	short loc_1000DDE9 ; jumptable 1000DD92	default	case
		jz	short loc_1000DDE1
		cmp	eax, 8		; switch 9 cases
		ja	short loc_1000DDE9 ; jumptable 1000DD92	default	case
		jmp	ds:off_1000DDF4[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_1000DD99:				; CODE XREF: ldap_passwordpolicy_err2txt+12j
					; DATA XREF: .text:off_1000DDF4o
		mov	eax, offset aPasswordExpire ; jumptable	1000DD92 case 0
		retn	4
; ---------------------------------------------------------------------------

loc_1000DDA1:				; CODE XREF: ldap_passwordpolicy_err2txt+12j
					; DATA XREF: .text:off_1000DDF4o
		mov	eax, offset aAccountLocked ; jumptable 1000DD92	case 1
		retn	4
; ---------------------------------------------------------------------------

loc_1000DDA9:				; CODE XREF: ldap_passwordpolicy_err2txt+12j
					; DATA XREF: .text:off_1000DDF4o
		mov	eax, offset aPasswordMustBe ; jumptable	1000DD92 case 2
		retn	4
; ---------------------------------------------------------------------------

loc_1000DDB1:				; CODE XREF: ldap_passwordpolicy_err2txt+12j
					; DATA XREF: .text:off_1000DDF4o
		mov	eax, offset aPolicyPrevents ; jumptable	1000DD92 case 3
		retn	4
; ---------------------------------------------------------------------------

loc_1000DDB9:				; CODE XREF: ldap_passwordpolicy_err2txt+12j
					; DATA XREF: .text:off_1000DDF4o
		mov	eax, offset aPolicyRequires ; jumptable	1000DD92 case 4
		retn	4
; ---------------------------------------------------------------------------

loc_1000DDC1:				; CODE XREF: ldap_passwordpolicy_err2txt+12j
					; DATA XREF: .text:off_1000DDF4o
		mov	eax, offset aPasswordFailsQ ; jumptable	1000DD92 case 5
		retn	4
; ---------------------------------------------------------------------------

loc_1000DDC9:				; CODE XREF: ldap_passwordpolicy_err2txt+12j
					; DATA XREF: .text:off_1000DDF4o
		mov	eax, offset aPasswordIsTooS ; jumptable	1000DD92 case 6
		retn	4
; ---------------------------------------------------------------------------

loc_1000DDD1:				; CODE XREF: ldap_passwordpolicy_err2txt+12j
					; DATA XREF: .text:off_1000DDF4o
		mov	eax, offset aPasswordHasBee ; jumptable	1000DD92 case 7
		retn	4
; ---------------------------------------------------------------------------

loc_1000DDD9:				; CODE XREF: ldap_passwordpolicy_err2txt+12j
					; DATA XREF: .text:off_1000DDF4o
		mov	eax, offset aNewPasswordIsI ; jumptable	1000DD92 case 8
		retn	4
; ---------------------------------------------------------------------------

loc_1000DDE1:				; CODE XREF: ldap_passwordpolicy_err2txt+Bj
		mov	eax, offset aNoError ; "No error"
		retn	4
; ---------------------------------------------------------------------------

loc_1000DDE9:				; CODE XREF: ldap_passwordpolicy_err2txt+9j
					; ldap_passwordpolicy_err2txt+10j
		mov	eax, offset aUnknownErrorCo ; jumptable	1000DD92 default case
		retn	4
ldap_passwordpolicy_err2txt endp

; ---------------------------------------------------------------------------
		align 4
off_1000DDF4	dd offset loc_1000DD99	; DATA XREF: ldap_passwordpolicy_err2txt+12r
		dd offset loc_1000DDA1	; jump table for switch	statement
		dd offset loc_1000DDA9
		dd offset loc_1000DDB1
		dd offset loc_1000DDB9
		dd offset loc_1000DDC1
		dd offset loc_1000DDC9
		dd offset loc_1000DDD1
		dd offset loc_1000DDD9
		align 10h
; Exported entry 523. ldap_count_references

; =============== S U B	R O U T	I N E =======================================


		public ldap_count_references
ldap_count_references proc near		; DATA XREF: .rdata:off_10020938o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		cmp	[esp+arg_0], 0
		jnz	short loc_1000DE2D
		or	eax, 0FFFFFFFFh
		retn	8
; ---------------------------------------------------------------------------

loc_1000DE2D:				; CODE XREF: ldap_count_references+5j
		mov	ecx, [esp+arg_4]
		xor	eax, eax
		test	ecx, ecx
		jz	short locret_1000DE45

loc_1000DE37:				; CODE XREF: ldap_count_references+23j
		cmp	dword ptr [ecx+4], 73h
		jnz	short loc_1000DE3E
		inc	eax

loc_1000DE3E:				; CODE XREF: ldap_count_references+1Bj
		mov	ecx, [ecx+0Ch]
		test	ecx, ecx
		jnz	short loc_1000DE37

locret_1000DE45:			; CODE XREF: ldap_count_references+15j
		retn	8
ldap_count_references endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 521. ldap_first_reference

; =============== S U B	R O U T	I N E =======================================


		public ldap_first_reference
ldap_first_reference proc near		; DATA XREF: .rdata:off_10020938o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	ecx, [esp+arg_0]
		test	ecx, ecx
		jz	short loc_1000DE73
		mov	eax, [esp+arg_4]
		test	eax, eax
		jz	short loc_1000DE73
		cmp	dword ptr [eax+4], 73h
		jz	short locret_1000DE75
		mov	[esp+arg_4], eax
		mov	[esp+arg_0], ecx
		jmp	ldap_next_reference
; ---------------------------------------------------------------------------

loc_1000DE73:				; CODE XREF: ldap_first_reference+6j
					; ldap_first_reference+Ej
		xor	eax, eax

locret_1000DE75:			; CODE XREF: ldap_first_reference+14j
		retn	8
ldap_first_reference endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 522. ldap_next_reference

; =============== S U B	R O U T	I N E =======================================


		public ldap_next_reference
ldap_next_reference proc near		; CODE XREF: ldap_first_reference+1Ej
					; DATA XREF: .rdata:off_10020938o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		cmp	[esp+arg_0], 0
		jz	short loc_1000DEA3
		mov	eax, [esp+arg_4]
		test	eax, eax
		jz	short loc_1000DEA3
		mov	eax, [eax+0Ch]
		test	eax, eax
		jz	short loc_1000DEA3

loc_1000DE96:				; CODE XREF: ldap_next_reference+21j
		cmp	dword ptr [eax+4], 73h
		jz	short locret_1000DEA5
		mov	eax, [eax+0Ch]
		test	eax, eax
		jnz	short loc_1000DE96

loc_1000DEA3:				; CODE XREF: ldap_next_reference+5j
					; ldap_next_reference+Dj ...
		xor	eax, eax

locret_1000DEA5:			; CODE XREF: ldap_next_reference+1Aj
		retn	8
ldap_next_reference endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 505. ldap_parse_reference

; =============== S U B	R O U T	I N E =======================================


		public ldap_parse_reference
ldap_parse_reference proc near		; DATA XREF: .rdata:off_10020938o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	esi
		push	edi
		mov	edi, [esp+8+arg_0]
		test	edi, edi
		jz	short loc_1000DEFF
		mov	esi, [esp+8+arg_4]
		test	esi, esi
		jz	short loc_1000DEFF
		cmp	dword ptr [esi+4], 73h
		jnz	short loc_1000DEFF
		push	ebx
		push	[esp+0Ch+arg_C]
		push	[esp+10h+arg_8]
		push	dword ptr [esi+8]
		push	edi
		call	sub_1000DF10
		add	esp, 10h
		mov	ebx, eax
		push	0
		push	0
		push	ebx
		push	edi
		call	ldap_set_lderrno
		cmp	[esp+0Ch+arg_10], 0
		jz	short loc_1000DEF7
		push	esi
		call	ldap_msgfree

loc_1000DEF7:				; CODE XREF: ldap_parse_reference+3Fj
		mov	eax, ebx
		pop	ebx
		pop	edi
		pop	esi
		retn	14h
; ---------------------------------------------------------------------------

loc_1000DEFF:				; CODE XREF: ldap_parse_reference+8j
					; ldap_parse_reference+10j ...
		pop	edi
		mov	eax, 59h
		pop	esi
		retn	14h
ldap_parse_reference endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000DF10	proc near		; CODE XREF: ldap_parse_reference+25p
					; sub_10010900+56p

var_138		= dword	ptr -138h
var_134		= dword	ptr -134h
Dst		= dword	ptr -130h
var_4		= dword	ptr -4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 138h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+138h+var_4], eax
		mov	eax, [esp+138h+arg_C]
		mov	ecx, 4Bh
		push	ebx
		push	ebp
		mov	ebp, [esp+140h+arg_8]
		xor	ebx, ebx
		push	esi
		mov	esi, [esp+144h+arg_4]
		push	edi
		mov	[esp+148h+var_134], eax
		lea	edi, [esp+148h+Dst]
		lea	eax, [esp+148h+var_138]
		push	eax
		lea	eax, [esp+14Ch+Dst]
		push	offset aV_4	; "{v"
		rep movsd
		push	eax		; Dst
		call	ber_scanf
		add	esp, 0Ch
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_1000DF71
		mov	ebx, 54h
		jmp	short loc_1000DFA7
; ---------------------------------------------------------------------------

loc_1000DF71:				; CODE XREF: sub_1000DF10+58j
		mov	esi, [esp+148h+var_134]
		test	esi, esi
		jz	short loc_1000DFA7
		lea	eax, [esp+148h+Dst]
		push	offset asc_1001F9E8 ; "}"
		push	eax		; Dst
		call	ber_scanf
		add	esp, 8
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_1000DF97
		mov	ebx, 54h
		jmp	short loc_1000DFA7
; ---------------------------------------------------------------------------

loc_1000DF97:				; CODE XREF: sub_1000DF10+7Ej
		lea	eax, [esp+148h+Dst]
		push	esi
		push	eax
		call	sub_10002C10
		add	esp, 8
		mov	ebx, eax

loc_1000DFA7:				; CODE XREF: sub_1000DF10+5Fj
					; sub_1000DF10+67j ...
		test	ebp, ebp
		jnz	short loc_1000DFB6
		push	[esp+148h+var_138]
		call	ldap_value_free
		jmp	short loc_1000DFBD
; ---------------------------------------------------------------------------

loc_1000DFB6:				; CODE XREF: sub_1000DF10+99j
		mov	eax, [esp+148h+var_138]
		mov	[ebp+0], eax

loc_1000DFBD:				; CODE XREF: sub_1000DF10+A4j
		mov	ecx, [esp+148h+var_4]
		mov	eax, ebx
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 138h
		retn
sub_1000DF10	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000DFE0	proc near		; CODE XREF: sub_1000DFE0+1E2p
					; sub_1000E680+4Cp ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebx
		push	ebp
		push	esi
		mov	esi, [esp+0Ch+arg_0]
		push	edi
		mov	edi, [esp+10h+arg_4]
		movzx	eax, byte ptr [edi]
		test	eax, eax
		jz	loc_1000E133
		mov	ebp, dword_10024A24
		lea	ecx, [ecx+0]

loc_1000E000:				; CODE XREF: sub_1000DFE0+14Dj
		dec	eax
		inc	edi
		cmp	eax, 0Ah	; switch 11 cases
		ja	loc_1000E1D7	; jumptable 1000E00B default case
		jmp	ds:off_1000E1E0[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_1000E012:				; CODE XREF: sub_1000DFE0+2Bj
					; DATA XREF: .text:off_1000E1E0o
		mov	cl, [esi]	; jumptable 1000E00B case 0
		inc	esi
		mov	al, [edi]
		inc	edi
		cmp	cl, al
		jnz	loc_1000E1D7	; jumptable 1000E00B default case
		jmp	loc_1000E128
; ---------------------------------------------------------------------------

loc_1000E025:				; CODE XREF: sub_1000DFE0+2Bj
					; DATA XREF: .text:off_1000E1E0o
		mov	al, [esi]	; jumptable 1000E00B case 1
		inc	esi
		test	al, al
		jz	loc_1000E1D7	; jumptable 1000E00B default case
		jmp	loc_1000E128
; ---------------------------------------------------------------------------

loc_1000E035:				; CODE XREF: sub_1000DFE0+2Bj
					; DATA XREF: .text:off_1000E1E0o
		movzx	edx, byte ptr [esi] ; jumptable	1000E00B case 2
		inc	esi
		test	dl, dl
		js	loc_1000E1D7	; jumptable 1000E00B default case
		mov	eax, edx
		and	edx, 7
		sar	eax, 3
		and	eax, 0Fh
		movzx	ecx, byte ptr [eax+edi]
		movzx	eax, byte_100247F8[edx]
		and	ecx, eax
		jz	loc_1000E1D7	; jumptable 1000E00B default case
		add	edi, 10h
		jmp	loc_1000E128
; ---------------------------------------------------------------------------

loc_1000E067:				; CODE XREF: sub_1000DFE0+2Bj
					; DATA XREF: .text:off_1000E1E0o
		cmp	esi, ebp	; jumptable 1000E00B case 3
		jnz	loc_1000E1D7	; jumptable 1000E00B default case
		jmp	loc_1000E128
; ---------------------------------------------------------------------------

loc_1000E074:				; CODE XREF: sub_1000DFE0+2Bj
					; DATA XREF: .text:off_1000E1E0o
		cmp	byte ptr [esi],	0 ; jumptable 1000E00B case 4
		jnz	loc_1000E1D7	; jumptable 1000E00B default case
		jmp	loc_1000E128
; ---------------------------------------------------------------------------

loc_1000E082:				; CODE XREF: sub_1000DFE0+2Bj
					; DATA XREF: .text:off_1000E1E0o
		movzx	eax, byte ptr [edi] ; jumptable	1000E00B case 5
		inc	edi
		mov	dword ptr xmmword_10024E38[eax*4], esi
		jmp	loc_1000E128
; ---------------------------------------------------------------------------

loc_1000E092:				; CODE XREF: sub_1000DFE0+2Bj
					; DATA XREF: .text:off_1000E1E0o
		movzx	eax, byte ptr [edi] ; jumptable	1000E00B case 6
		inc	edi
		mov	dword_10024E60[eax*4], esi
		jmp	loc_1000E128
; ---------------------------------------------------------------------------

loc_1000E0A2:				; CODE XREF: sub_1000DFE0+2Bj
					; DATA XREF: .text:off_1000E1E0o
		cmp	esi, ebp	; jumptable 1000E00B case 7
		jz	short loc_1000E0BA
		movzx	eax, byte ptr [esi-1]
		and	eax, 7Fh
		cmp	byte_10024800[eax], 0
		jnz	loc_1000E1D7	; jumptable 1000E00B default case

loc_1000E0BA:				; CODE XREF: sub_1000DFE0+C4j
		movzx	eax, byte ptr [esi]
		and	eax, 7Fh
		cmp	byte_10024800[eax], 0
		jz	loc_1000E1D7	; jumptable 1000E00B default case
		jmp	short loc_1000E128
; ---------------------------------------------------------------------------

loc_1000E0CF:				; CODE XREF: sub_1000DFE0+2Bj
					; DATA XREF: .text:off_1000E1E0o
		cmp	esi, ebp	; jumptable 1000E00B case 8
		jz	loc_1000E1D7	; jumptable 1000E00B default case
		movzx	eax, byte ptr [esi-1]
		and	eax, 7Fh
		cmp	byte_10024800[eax], 0
		jz	loc_1000E1D7	; jumptable 1000E00B default case
		movzx	eax, byte ptr [esi]
		and	eax, 7Fh
		cmp	byte_10024800[eax], 0
		jnz	loc_1000E1D7	; jumptable 1000E00B default case
		jmp	short loc_1000E128
; ---------------------------------------------------------------------------

loc_1000E100:				; CODE XREF: sub_1000DFE0+2Bj
					; DATA XREF: .text:off_1000E1E0o
		movzx	eax, byte ptr [edi] ; jumptable	1000E00B case 9
		inc	edi
		mov	edx, dword ptr xmmword_10024E38[eax*4]
		mov	ebx, dword_10024E60[eax*4]
		cmp	edx, ebx
		jnb	short loc_1000E128

loc_1000E116:				; CODE XREF: sub_1000DFE0+146j
		mov	cl, [edx]
		inc	edx
		mov	al, [esi]
		inc	esi
		cmp	cl, al
		jnz	loc_1000E1D7	; jumptable 1000E00B default case
		cmp	edx, ebx
		jb	short loc_1000E116

loc_1000E128:				; CODE XREF: sub_1000DFE0+40j
					; sub_1000DFE0+50j ...
		movzx	eax, byte ptr [edi]
		test	eax, eax
		jnz	loc_1000E000

loc_1000E133:				; CODE XREF: sub_1000DFE0+11j
		mov	eax, esi

loc_1000E135:				; CODE XREF: sub_1000DFE0+1ECj
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1000E13A:				; CODE XREF: sub_1000DFE0+2Bj
					; DATA XREF: .text:off_1000E1E0o
		movzx	eax, byte ptr [edi] ; jumptable	1000E00B case 10
		mov	ebx, esi
		dec	eax
		jz	short loc_1000E194
		dec	eax
		jz	short loc_1000E182
		dec	eax
		jnz	loc_1000E1D7	; jumptable 1000E00B default case
		movzx	edx, byte ptr [esi]
		test	edx, edx
		jz	short loc_1000E17B

loc_1000E153:				; CODE XREF: sub_1000DFE0+199j
		test	dl, dl
		js	short loc_1000E17B
		mov	eax, edx
		and	edx, 7
		sar	eax, 3
		and	eax, 0Fh
		movzx	ecx, byte ptr [eax+edi+1]
		movzx	eax, byte_100247F8[edx]
		and	ecx, eax
		jz	short loc_1000E17B
		movzx	edx, byte ptr [esi+1]
		inc	esi
		test	edx, edx
		jnz	short loc_1000E153

loc_1000E17B:				; CODE XREF: sub_1000DFE0+171j
					; sub_1000DFE0+175j ...
		mov	eax, 12h
		jmp	short loc_1000E1B4
; ---------------------------------------------------------------------------

loc_1000E182:				; CODE XREF: sub_1000DFE0+163j
		cmp	byte ptr [esi],	0
		jz	short loc_1000E18D

loc_1000E187:				; CODE XREF: sub_1000DFE0+1ABj
		inc	esi
		cmp	byte ptr [esi],	0
		jnz	short loc_1000E187

loc_1000E18D:				; CODE XREF: sub_1000DFE0+1A5j
		mov	eax, 2
		jmp	short loc_1000E1B4
; ---------------------------------------------------------------------------

loc_1000E194:				; CODE XREF: sub_1000DFE0+160j
		mov	al, [esi]
		movzx	ecx, byte ptr [edi+1]
		test	al, al
		jz	short loc_1000E1AF
		mov	edi, edi

loc_1000E1A0:				; CODE XREF: sub_1000DFE0+1CDj
		movzx	eax, al
		cmp	ecx, eax
		jnz	short loc_1000E1AF
		mov	al, [esi+1]
		inc	esi
		test	al, al
		jnz	short loc_1000E1A0

loc_1000E1AF:				; CODE XREF: sub_1000DFE0+1BCj
					; sub_1000DFE0+1C5j
		mov	eax, 3

loc_1000E1B4:				; CODE XREF: sub_1000DFE0+1A0j
					; sub_1000DFE0+1B2j
		add	edi, eax
		cmp	esi, ebx
		jb	short loc_1000E1D7 ; jumptable 1000E00B	default	case
		lea	ebx, [ebx+0]

loc_1000E1C0:				; CODE XREF: sub_1000DFE0+1F5j
		push	edi
		push	esi
		call	sub_1000DFE0
		add	esp, 8
		test	eax, eax
		jnz	loc_1000E135
		dec	esi
		cmp	esi, ebx
		jnb	short loc_1000E1C0

loc_1000E1D7:				; CODE XREF: sub_1000DFE0+25j
					; sub_1000DFE0+3Aj ...
		pop	edi		; jumptable 1000E00B default case
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		retn
sub_1000DFE0	endp

; ---------------------------------------------------------------------------
		align 10h
off_1000E1E0	dd offset loc_1000E012	; DATA XREF: sub_1000DFE0+2Br
		dd offset loc_1000E025	; jump table for switch	statement
		dd offset loc_1000E035
		dd offset loc_1000E067
		dd offset loc_1000E074
		dd offset loc_1000E082
		dd offset loc_1000E092
		dd offset loc_1000E0A2
		dd offset loc_1000E0CF
		dd offset loc_1000E100
		dd offset loc_1000E13A
		align 10h

loc_1000E210:				; CODE XREF: ldap_getfirstfilter+71p
					; ldap_getfirstfilter+89p ...
		sub	esp, 0Ch
		mov	ecx, [esp+10h]
		mov	eax, offset byte_10024A28
		push	ebx
		push	edi
		xor	edi, edi
		mov	dword ptr [esp+10h], 1
		mov	[esp+0Ch], edi
		mov	ebx, eax
		test	ecx, ecx
		jz	loc_1000E5C2
		cmp	byte ptr [ecx],	0
		jz	loc_1000E5C2
		push	esi
		mov	dword_100249F8,	edi
		mov	esi, ecx
		push	ebp
		lea	esp, [esp+0]

loc_1000E250:				; CODE XREF: .text:1000E4D5j
		mov	dl, [esi]
		mov	ebp, eax
		movzx	ecx, dl
		add	ecx, 0FFFFFFDCh	; switch 59 cases
		cmp	ecx, 3Ah
		ja	loc_1000E4C4	; jumptable 1000E26A default case
		movzx	ecx, ds:byte_1000E60C[ecx]
		jmp	ds:off_1000E5F0[ecx*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_1000E271:				; CODE XREF: .text:1000E26Aj
					; DATA XREF: .text:off_1000E5F0o
		mov	byte ptr [eax],	2 ; jumptable 1000E26A case 46
		inc	eax
		jmp	loc_1000E4CF
; ---------------------------------------------------------------------------

loc_1000E27A:				; CODE XREF: .text:1000E26Aj
					; DATA XREF: .text:off_1000E5F0o
		cmp	esi, [esp+20h]	; jumptable 1000E26A case 94
		jnz	loc_1000E4C4	; jumptable 1000E26A default case
		mov	byte ptr [eax],	4
		inc	eax
		jmp	loc_1000E4CF
; ---------------------------------------------------------------------------

loc_1000E28D:				; CODE XREF: .text:1000E26Aj
					; DATA XREF: .text:off_1000E5F0o
		cmp	byte ptr [esi+1], 0 ; jumptable	1000E26A case 36
		jnz	loc_1000E4C4	; jumptable 1000E26A default case
		mov	byte ptr [eax],	5
		inc	eax
		jmp	loc_1000E4CF
; ---------------------------------------------------------------------------

loc_1000E2A0:				; CODE XREF: .text:1000E26Aj
					; DATA XREF: .text:off_1000E5F0o
		inc	esi		; jumptable 1000E26A case 91
		mov	byte ptr [eax],	3
		inc	eax
		cmp	byte ptr [esi],	5Eh
		jnz	short loc_1000E2B0
		or	cl, 0FFh
		inc	esi
		jmp	short loc_1000E2B2
; ---------------------------------------------------------------------------

loc_1000E2B0:				; CODE XREF: .text:1000E2A8j
		xor	cl, cl

loc_1000E2B2:				; CODE XREF: .text:1000E2AEj
		cmp	byte ptr [esi],	2Dh
		mov	[esp+13h], cl
		mov	cl, byte_100247FD
		jnz	short loc_1000E2C8
		or	byte_10024E2D, cl
		inc	esi

loc_1000E2C8:				; CODE XREF: .text:1000E2BFj
		cmp	byte ptr [esi],	5Dh
		jnz	short loc_1000E2D4
		or	byte_10024E33, cl
		inc	esi

loc_1000E2D4:				; CODE XREF: .text:1000E2CBj
		mov	cl, [esi]
		test	cl, cl
		jz	short loc_1000E347
		lea	ebx, [ebx+0]

loc_1000E2E0:				; CODE XREF: .text:1000E345j
		cmp	cl, 5Dh
		jz	short loc_1000E35D
		cmp	cl, 2Dh
		jnz	short loc_1000E326
		mov	dl, [esi+1]
		test	dl, dl
		jz	short loc_1000E326
		cmp	dl, 5Dh
		jz	short loc_1000E326
		movzx	ebx, byte ptr [esi-1]
		add	esi, 2
		inc	ebx
		movzx	edi, dl
		cmp	ebx, edi
		jg	short loc_1000E341

loc_1000E305:				; CODE XREF: .text:1000E322j
		movzx	ecx, bl
		inc	ebx
		mov	edx, ecx
		and	ecx, 7
		shr	edx, 3
		and	edx, 0Fh
		mov	cl, byte_100247F8[ecx]
		or	byte_10024E28[edx], cl
		cmp	ebx, edi
		jle	short loc_1000E305
		jmp	short loc_1000E341
; ---------------------------------------------------------------------------

loc_1000E326:				; CODE XREF: .text:1000E2E8j
					; .text:1000E2EFj ...
		movzx	ecx, cl
		mov	edx, ecx
		and	ecx, 7
		shr	edx, 3
		and	edx, 0Fh
		mov	cl, byte_100247F8[ecx]
		or	byte_10024E28[edx], cl
		inc	esi

loc_1000E341:				; CODE XREF: .text:1000E303j
					; .text:1000E324j
		mov	cl, [esi]
		test	cl, cl
		jnz	short loc_1000E2E0

loc_1000E347:				; CODE XREF: .text:1000E2D8j
					; .text:1000E360j
		pop	ebp
		pop	esi
		pop	edi
		mov	byte_10024A28, 0
		mov	eax, offset aMissing ; "Missing	]"
		pop	ebx
		add	esp, 0Ch
		retn	4
; ---------------------------------------------------------------------------

loc_1000E35D:				; CODE XREF: .text:1000E2E3j
		cmp	byte ptr [esi],	0
		jz	short loc_1000E347
		mov	bl, [esp+13h]
		xor	edx, edx
		jmp	short loc_1000E370
; ---------------------------------------------------------------------------
		align 10h

loc_1000E370:				; CODE XREF: .text:1000E368j
					; .text:1000E391j
		mov	cl, byte_10024E28[edx]
		xor	cl, bl
		mov	[eax], cl
		mov	ecx, edx
		inc	eax
		inc	edx
		cmp	ecx, 10h
		jnb	loc_1000E5E8
		mov	byte_10024E28[ecx], 0
		cmp	edx, 10h
		jl	short loc_1000E370
		mov	edi, [esp+14h]
		jmp	loc_1000E4CF
; ---------------------------------------------------------------------------

loc_1000E39C:				; CODE XREF: .text:1000E26Aj
					; DATA XREF: .text:off_1000E5F0o
		cmp	esi, [esp+20h]	; jumptable 1000E26A cases 42,43
		jz	loc_1000E50F
		mov	cl, [ebx]
		mov	ebp, ebx
		cmp	cl, 0Bh
		jz	loc_1000E4CF
		cmp	cl, 4
		jz	loc_1000E4F9
		cmp	cl, 5
		jbe	short loc_1000E3CA
		cmp	cl, 0Ah
		jbe	loc_1000E4F9

loc_1000E3CA:				; CODE XREF: .text:1000E3BFj
		cmp	dl, 2Bh
		jnz	short loc_1000E3EC
		mov	edi, eax
		xor	ecx, ecx
		sub	edi, ebx
		xor	edx, edx
		cmp	ebx, eax
		cmova	edi, ecx
		test	edi, edi
		jz	short loc_1000E3EC

loc_1000E3E0:				; CODE XREF: .text:1000E3EAj
		mov	cl, [ebp+0]
		inc	edx
		mov	[eax], cl
		inc	ebp
		inc	eax
		cmp	edx, edi
		jb	short loc_1000E3E0

loc_1000E3EC:				; CODE XREF: .text:1000E3CDj
					; .text:1000E3DEj
		mov	byte ptr [eax],	0
		inc	eax
		mov	byte ptr [eax],	0
		lea	edi, [eax+1]
		cmp	eax, ebp
		jbe	short loc_1000E40E
		lea	ebx, [ebx+0]

loc_1000E400:				; CODE XREF: .text:1000E40Cj
		mov	cl, [eax-1]
		lea	edx, [eax-1]
		mov	[eax], cl
		mov	eax, edx
		cmp	eax, ebp
		ja	short loc_1000E400

loc_1000E40E:				; CODE XREF: .text:1000E3F8j
		mov	byte ptr [eax],	0Bh
		mov	eax, edi
		mov	edi, [esp+14h]
		jmp	loc_1000E4CF
; ---------------------------------------------------------------------------

loc_1000E41C:				; CODE XREF: .text:1000E26Aj
					; DATA XREF: .text:off_1000E5F0o
		movzx	edx, byte ptr [esi+1] ;	jumptable 1000E26A case	92
		inc	esi
		lea	ecx, [edx-28h]	; switch 23 cases
		cmp	ecx, 16h
		ja	loc_1000E4C4	; jumptable 1000E26A default case
		movzx	ecx, ds:byte_1000E660[ecx]
		jmp	ds:off_1000E648[ecx*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_1000E43B:				; CODE XREF: .text:1000E434j
					; DATA XREF: .text:off_1000E648o
		mov	ecx, [esp+18h]	; jumptable 1000E434 case 40
		cmp	ecx, 0Ah
		jge	loc_1000E525
		inc	edi
		mov	byte ptr [eax],	6
		mov	[eax+1], cl
		add	eax, 2
		mov	[esp+14h], edi
		mov	dword_100249FC[edi*4], ecx
		inc	ecx
		mov	[esp+18h], ecx
		jmp	short loc_1000E4CF
; ---------------------------------------------------------------------------

loc_1000E464:				; CODE XREF: .text:1000E434j
					; DATA XREF: .text:off_1000E648o
		cmp	byte ptr [ebx],	6 ; jumptable 1000E434 case 41
		jz	loc_1000E551
		test	edi, edi
		jle	loc_1000E53B
		mov	cl, byte ptr dword_100249FC[edi*4]
		mov	byte ptr [eax],	7
		mov	[eax+1], cl
		add	eax, 2
		dec	edi
		mov	[esp+14h], edi
		jmp	short loc_1000E4CF
; ---------------------------------------------------------------------------

loc_1000E48C:				; CODE XREF: .text:1000E434j
					; DATA XREF: .text:off_1000E648o
		mov	byte ptr [eax],	8 ; jumptable 1000E434 case 60
		inc	eax
		jmp	short loc_1000E4CF
; ---------------------------------------------------------------------------

loc_1000E492:				; CODE XREF: .text:1000E434j
					; DATA XREF: .text:off_1000E648o
		cmp	byte ptr [ebx],	8 ; jumptable 1000E434 case 62
		jz	loc_1000E567
		mov	byte ptr [eax],	9
		inc	eax
		jmp	short loc_1000E4CF
; ---------------------------------------------------------------------------

loc_1000E4A1:				; CODE XREF: .text:1000E434j
					; DATA XREF: .text:off_1000E648o
		lea	ecx, [edx-30h]	; jumptable 1000E434 cases 49-57
		test	edi, edi
		jle	short loc_1000E4B5
		cmp	dword_100249FC[edi*4], ecx
		jz	loc_1000E57D

loc_1000E4B5:				; CODE XREF: .text:1000E4A6j
		cmp	[esp+18h], ecx
		jle	loc_1000E593
		mov	byte ptr [eax],	0Ah
		jmp	short loc_1000E4C9
; ---------------------------------------------------------------------------

loc_1000E4C4:				; CODE XREF: .text:1000E25Dj
					; .text:1000E26Aj ...
		mov	byte ptr [eax],	1 ; jumptable 1000E26A default case
		mov	cl, [esi]

loc_1000E4C9:				; CODE XREF: .text:1000E4C2j
		mov	[eax+1], cl
		add	eax, 2

loc_1000E4CF:				; CODE XREF: .text:1000E275j
					; .text:1000E288j ...
		inc	esi
		mov	ebx, ebp
		cmp	byte ptr [esi],	0
		jnz	loc_1000E250
		test	edi, edi
		jle	loc_1000E5A9
		pop	ebp
		pop	esi
		pop	edi
		mov	byte_10024A28, 0
		mov	eax, offset aUnmatched ; "Unmatched \\("
		pop	ebx
		add	esp, 0Ch
		retn	4
; ---------------------------------------------------------------------------

loc_1000E4F9:				; CODE XREF: .text:1000E3B6j
					; .text:1000E3C4j
		pop	ebp
		pop	esi
		pop	edi
		mov	byte_10024A28, 0
		mov	eax, offset aIllegalClosure ; "Illegal closure"
		pop	ebx
		add	esp, 0Ch
		retn	4
; ---------------------------------------------------------------------------

loc_1000E50F:				; CODE XREF: .text:1000E3A0j
		pop	ebp
		pop	esi
		pop	edi
		mov	byte_10024A28, 0
		mov	eax, offset aEmptyClosure ; "Empty closure"
		pop	ebx
		add	esp, 0Ch
		retn	4
; ---------------------------------------------------------------------------

loc_1000E525:				; CODE XREF: .text:1000E442j
		pop	ebp
		pop	esi
		pop	edi
		mov	byte_10024A28, 0
		mov	eax, offset aTooManyPairs ; "Too many \\(\\) pairs"
		pop	ebx
		add	esp, 0Ch
		retn	4
; ---------------------------------------------------------------------------

loc_1000E53B:				; CODE XREF: .text:1000E46Fj
		pop	ebp
		pop	esi
		pop	edi
		mov	byte_10024A28, 0
		mov	eax, offset aUnmatched_0 ; "Unmatched \\)"
		pop	ebx
		add	esp, 0Ch
		retn	4
; ---------------------------------------------------------------------------

loc_1000E551:				; CODE XREF: .text:1000E467j
		pop	ebp
		pop	esi
		pop	edi
		mov	byte_10024A28, 0
		mov	eax, offset aNullPatternIns ; "Null pattern inside \\(\\)"
		pop	ebx
		add	esp, 0Ch
		retn	4
; ---------------------------------------------------------------------------

loc_1000E567:				; CODE XREF: .text:1000E495j
		pop	ebp
		pop	esi
		pop	edi
		mov	byte_10024A28, 0
		mov	eax, offset aNullPatternI_0 ; "Null pattern inside \\<\\>"
		pop	ebx
		add	esp, 0Ch
		retn	4
; ---------------------------------------------------------------------------

loc_1000E57D:				; CODE XREF: .text:1000E4AFj
		pop	ebp
		pop	esi
		pop	edi
		mov	byte_10024A28, 0
		mov	eax, offset aCyclicalRefere ; "Cyclical	reference"
		pop	ebx
		add	esp, 0Ch
		retn	4
; ---------------------------------------------------------------------------

loc_1000E593:				; CODE XREF: .text:1000E4B9j
		pop	ebp
		pop	esi
		pop	edi
		mov	byte_10024A28, 0
		mov	eax, offset aUndeterminedRe ; "Undetermined reference"
		pop	ebx
		add	esp, 0Ch
		retn	4
; ---------------------------------------------------------------------------

loc_1000E5A9:				; CODE XREF: .text:1000E4DDj
		pop	ebp
		pop	esi
		pop	edi
		mov	byte ptr [eax],	0
		xor	eax, eax
		mov	dword_100249F8,	1
		pop	ebx
		add	esp, 0Ch
		retn	4
; ---------------------------------------------------------------------------

loc_1000E5C2:				; CODE XREF: .text:1000E230j
					; .text:1000E239j
		cmp	dword_100249F8,	edi
		jz	short loc_1000E5D4
		pop	edi
		xor	eax, eax
		pop	ebx
		add	esp, 0Ch
		retn	4
; ---------------------------------------------------------------------------

loc_1000E5D4:				; CODE XREF: .text:1000E5C8j
		pop	edi
		mov	byte_10024A28, 0
		mov	eax, offset aNoPreviousRegu ; "No previous regular expression"
		pop	ebx
		add	esp, 0Ch
		retn	4
; ---------------------------------------------------------------------------

loc_1000E5E8:				; CODE XREF: .text:1000E381j
		call	___report_rangecheckfailure
		lea	ecx, [ecx+0]
; ---------------------------------------------------------------------------
off_1000E5F0	dd offset loc_1000E28D,	offset loc_1000E39C, offset loc_1000E271
					; DATA XREF: .text:1000E26Ar
		dd offset loc_1000E2A0,	offset loc_1000E41C, offset loc_1000E27A ; jump	table for switch statement
		dd offset loc_1000E4C4
byte_1000E60C	db	0,     6,     6,     6 ; DATA XREF: .text:1000E263r
		db	6,     6,     1,     1 ; indirect table	for switch statement
		db	6,     6,     2,     6
		db	6,     6,     6,     6
		db	6,     6,     6,     6
		db	6,     6,     6,     6
		db	6,     6,     6,     6
		db	6,     6,     6,     6
		db	6,     6,     6,     6
		db	6,     6,     6,     6
		db	6,     6,     6,     6
		db	6,     6,     6,     6
		db	6,     6,     6,     6
		db	6,     6,     6,     3
		db	4,     6,     5
		align 4
off_1000E648	dd offset loc_1000E43B	; DATA XREF: .text:1000E434r
		dd offset loc_1000E464	; jump table for switch	statement
		dd offset loc_1000E4A1
		dd offset loc_1000E48C
		dd offset loc_1000E492
		dd offset loc_1000E4C4
byte_1000E660	db	0,     1,     5,     5 ; DATA XREF: .text:1000E42Dr
		db	5,     5,     5,     5 ; indirect table	for switch statement
		db	5,     2,     2,     2
		db	2,     2,     2,     2
		db	2,     2,     5,     5
		db	3,     5,     4
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000E680	proc near		; CODE XREF: ldap_getfirstfilter+7Cp
					; ldap_getfirstfilter+98p

arg_0		= dword	ptr  4

		movzx	eax, byte_10024A28
		xorps	xmm0, xmm0
		mov	dword_10024E58,	0
		mov	dword_10024E5C,	0
		push	esi
		mov	esi, [esp+4+arg_0]
		mov	dword_10024A24,	esi
		movdqu	xmmword_10024E38, xmm0
		movdqu	xmmword_10024E48, xmm0
		sub	eax, 0
		jz	short loc_1000E6D8
		dec	eax
		jz	short loc_1000E6DE
		sub	eax, 3
		jnz	short loc_1000E710
		push	offset byte_10024A28
		push	esi
		call	sub_1000DFE0
		add	esp, 8
		test	eax, eax
		jnz	short loc_1000E72B

loc_1000E6D8:				; CODE XREF: sub_1000E680+3Cj
					; sub_1000E680+62j ...
		xor	eax, eax
		pop	esi
		retn	4
; ---------------------------------------------------------------------------

loc_1000E6DE:				; CODE XREF: sub_1000E680+3Fj
		mov	al, [esi]
		test	al, al
		jz	short loc_1000E6D8
		mov	cl, byte_10024A29
		lea	ebx, [ebx+0]

loc_1000E6F0:				; CODE XREF: sub_1000E680+7Aj
		cmp	al, cl
		jz	short loc_1000E702
		mov	al, [esi+1]
		inc	esi
		test	al, al
		jnz	short loc_1000E6F0
		xor	eax, eax
		pop	esi
		retn	4
; ---------------------------------------------------------------------------

loc_1000E702:				; CODE XREF: sub_1000E680+72j
		cmp	byte ptr [esi],	0
		jz	short loc_1000E6D8
		jmp	short loc_1000E710
; ---------------------------------------------------------------------------
		align 10h

loc_1000E710:				; CODE XREF: sub_1000E680+44j
					; sub_1000E680+87j ...
		push	offset byte_10024A28
		push	esi
		call	sub_1000DFE0
		add	esp, 8
		test	eax, eax
		jnz	short loc_1000E72B
		inc	esi
		cmp	[esi], al
		jnz	short loc_1000E710
		pop	esi
		retn	4
; ---------------------------------------------------------------------------

loc_1000E72B:				; CODE XREF: sub_1000E680+56j
					; sub_1000E680+A0j
		mov	dword ptr xmmword_10024E38, esi
		mov	dword_10024E60,	eax
		mov	eax, 1
		pop	esi
		retn	4
sub_1000E680	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  67. ldap_modrdn2

; =============== S U B	R O U T	I N E =======================================


		public ldap_modrdn2
ldap_modrdn2	proc near		; DATA XREF: .rdata:off_10020938o

var_4		= dword	ptr -4
Memory		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ecx
		lea	eax, [esp+4+var_4]
		push	eax		; int
		push	0		; int
		push	0		; int
		push	[esp+10h+arg_C]	; int
		push	0		; int
		push	[esp+18h+arg_8]	; int
		push	[esp+1Ch+arg_4]	; int
		push	[esp+20h+Memory] ; Memory
		call	ldap_rename
		or	ecx, 0FFFFFFFFh
		test	eax, eax
		cmovz	ecx, [esp+4+var_4]
		mov	eax, ecx
		pop	ecx
		retn	10h
ldap_modrdn2	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  68. ldap_modrdn2_s

; =============== S U B	R O U T	I N E =======================================


		public ldap_modrdn2_s
ldap_modrdn2_s	proc near		; CODE XREF: ldap_modrdn_s+Ep
					; DATA XREF: .rdata:off_10020938o

var_4		= dword	ptr -4
Memory		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ecx
		push	esi
		mov	esi, [esp+8+Memory]
		lea	eax, [esp+8+var_4]
		push	eax		; int
		push	0		; int
		push	0		; int
		push	[esp+14h+arg_C]	; int
		push	0		; int
		push	[esp+1Ch+arg_8]	; int
		push	[esp+20h+arg_4]	; int
		push	esi		; Memory
		call	ldap_rename
		test	eax, eax
		jnz	short loc_1000E7C6
		mov	eax, [esp+8+var_4]
		cmp	eax, 0FFFFFFFFh
		jz	short loc_1000E7C6
		lea	ecx, [esp+8+arg_C]
		push	ecx
		push	0
		push	1
		push	eax
		push	esi
		call	ldap_result
		cmp	eax, 0FFFFFFFFh
		jz	short loc_1000E7C6
		push	1
		push	[esp+0Ch+arg_C]
		push	esi
		call	ldap_result2error
		pop	esi
		pop	ecx
		retn	10h
; ---------------------------------------------------------------------------

loc_1000E7C6:				; CODE XREF: ldap_modrdn2_s+25j
					; ldap_modrdn2_s+2Ej ...
		push	0
		push	0
		push	esi
		call	ldap_get_lderrno
		pop	esi
		pop	ecx
		retn	10h
ldap_modrdn2_s	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  24. ldap_modrdn

; =============== S U B	R O U T	I N E =======================================


		public ldap_modrdn
ldap_modrdn	proc near		; DATA XREF: .rdata:off_10020938o

var_4		= dword	ptr -4
Memory		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ecx
		lea	eax, [esp+4+var_4]
		push	eax		; int
		push	0		; int
		push	0		; int
		push	1		; int
		push	0		; int
		push	[esp+18h+arg_8]	; int
		push	[esp+1Ch+arg_4]	; int
		push	[esp+20h+Memory] ; Memory
		call	ldap_rename
		or	ecx, 0FFFFFFFFh
		test	eax, eax
		cmovz	ecx, [esp+4+var_4]
		mov	eax, ecx
		pop	ecx
		retn	0Ch
ldap_modrdn	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  49. ldap_modrdn_s

; =============== S U B	R O U T	I N E =======================================


		public ldap_modrdn_s
ldap_modrdn_s	proc near		; DATA XREF: .rdata:off_10020938o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	1
		push	[esp+4+arg_8]
		push	[esp+8+arg_4]
		push	[esp+0Ch+arg_0]
		call	ldap_modrdn2_s
		retn	0Ch
ldap_modrdn_s	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 472. ldap_rename

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	ldap_rename(void *Memory, int, int, int, int, int, int,	int)
		public ldap_rename
ldap_rename	proc near		; CODE XREF: ldap_modrdn2+1Bp
					; ldap_modrdn2_s+1Ep ...

Memory		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch
arg_1C		= dword	ptr  20h

		push	esi
		mov	esi, [esp+4+Memory]
		test	esi, esi
		jz	short loc_1000E84C
		cmp	[esp+4+arg_8], 0
		jnz	short loc_1000E855
		push	0
		push	0
		push	59h
		push	esi
		call	ldap_set_lderrno

loc_1000E84C:				; CODE XREF: ldap_rename+7j
		mov	eax, 59h
		pop	esi
		retn	20h
; ---------------------------------------------------------------------------

loc_1000E855:				; CODE XREF: ldap_rename+Ej
		mov	eax, [esi+64h]
		test	eax, eax
		jnz	short loc_1000E861
		mov	eax, [esi+8]
		jmp	short loc_1000E864
; ---------------------------------------------------------------------------

loc_1000E861:				; CODE XREF: ldap_rename+2Aj
		mov	eax, [eax+8]

loc_1000E864:				; CODE XREF: ldap_rename+2Fj
		push	ebx
		mov	ebx, [esp+8+arg_C]
		cmp	eax, 3
		jge	short loc_1000E894
		test	ebx, ebx
		jnz	short loc_1000E87E
		cmp	[esp+8+arg_14],	ebx
		jnz	short loc_1000E87E
		cmp	[esp+8+arg_18],	ebx
		jz	short loc_1000E894

loc_1000E87E:				; CODE XREF: ldap_rename+40j
					; ldap_rename+46j
		push	0
		push	0
		push	5Ch
		push	esi
		call	ldap_set_lderrno
		pop	ebx
		mov	eax, 5Ch
		pop	esi
		retn	20h
; ---------------------------------------------------------------------------

loc_1000E894:				; CODE XREF: ldap_rename+3Cj
					; ldap_rename+4Cj
		push	edi
		mov	edi, [esp+0Ch+arg_1C]
		test	edi, edi
		jnz	short loc_1000E8B0
		push	edi
		push	edi
		push	59h
		push	esi
		call	ldap_set_lderrno
		lea	eax, [edi+59h]
		pop	edi
		pop	ebx
		pop	esi
		retn	20h
; ---------------------------------------------------------------------------

loc_1000E8B0:				; CODE XREF: ldap_rename+6Bj
		mov	eax, [esi+0C0h]
		test	eax, eax
		jz	short loc_1000E916
		mov	ecx, [esi+0DCh]
		test	ecx, ecx
		jz	short loc_1000E916
		mov	edx, [esi+13Ch]
		test	edx, edx
		jz	short loc_1000E90E
		call	edx
		cmp	[esi+148h], eax
		jnz	short loc_1000E8E0
		inc	dword ptr [esi+180h]
		jmp	short loc_1000E916
; ---------------------------------------------------------------------------

loc_1000E8E0:				; CODE XREF: ldap_rename+A6j
		mov	eax, [esi+0DCh]
		push	dword ptr [eax+8]
		mov	eax, [esi+0C0h]
		call	eax
		mov	eax, [esi+13Ch]
		add	esp, 4
		call	eax
		mov	[esi+148h], eax
		mov	dword ptr [esi+180h], 1
		jmp	short loc_1000E916
; ---------------------------------------------------------------------------

loc_1000E90E:				; CODE XREF: ldap_rename+9Cj
		push	dword ptr [ecx+8]
		call	eax
		add	esp, 4

loc_1000E916:				; CODE XREF: ldap_rename+88j
					; ldap_rename+92j ...
		inc	dword ptr [esi+30h]
		mov	eax, [esi+30h]
		mov	[edi], eax
		cmp	dword ptr [esi+0C0h], 0
		jz	short loc_1000E975
		mov	eax, [esi+0DCh]
		test	eax, eax
		jz	short loc_1000E975
		mov	ecx, [esi+13Ch]
		test	ecx, ecx
		jz	short loc_1000E967
		call	ecx
		cmp	[esi+148h], eax
		jnz	short loc_1000E975
		dec	dword ptr [esi+180h]
		jnz	short loc_1000E975
		mov	dword ptr [esi+148h], 0FFFFFFFFh
		mov	dword ptr [esi+180h], 0
		mov	eax, [esi+0DCh]

loc_1000E967:				; CODE XREF: ldap_rename+109j
		push	dword ptr [eax+8]
		mov	eax, [esi+0C4h]
		call	eax
		add	esp, 4

loc_1000E975:				; CODE XREF: ldap_rename+F5j
					; ldap_rename+FFj ...
		cmp	dword ptr [esi+0E0h], 0
		push	ebp
		mov	ebp, [esp+10h+arg_4]
		jz	loc_1000EAD3
		test	ebx, ebx
		jnz	loc_1000EAD3
		cmp	[esi+108h], ebx
		jz	loc_1000EAD3
		mov	eax, [esi+0C0h]
		test	eax, eax
		jz	short loc_1000E9FF
		mov	ecx, [esi+0DCh]
		test	ecx, ecx
		jz	short loc_1000E9FF
		mov	edx, [esi+13Ch]
		test	edx, edx
		jz	short loc_1000E9F8
		call	edx
		cmp	[esi+140h], eax
		jnz	short loc_1000E9CB
		inc	dword ptr [esi+178h]
		jmp	short loc_1000E9FF
; ---------------------------------------------------------------------------

loc_1000E9CB:				; CODE XREF: ldap_rename+191j
		mov	eax, [esi+0DCh]
		push	dword ptr [eax]
		mov	eax, [esi+0C0h]
		call	eax
		mov	eax, [esi+13Ch]
		add	esp, 4
		call	eax
		mov	[esi+140h], eax
		mov	dword ptr [esi+178h], 1
		jmp	short loc_1000E9FF
; ---------------------------------------------------------------------------

loc_1000E9F8:				; CODE XREF: ldap_rename+187j
		push	dword ptr [ecx]
		call	eax
		add	esp, 4

loc_1000E9FF:				; CODE XREF: ldap_rename+173j
					; ldap_rename+17Dj ...
		push	[esp+10h+arg_10]
		mov	eax, [esi+108h]
		push	[esp+14h+arg_8]
		push	ebp
		push	6Ch
		push	dword ptr [edi]
		push	esi
		call	eax
		add	esp, 18h
		test	eax, eax
		jz	short loc_1000EA7D
		mov	[edi], eax
		cmp	dword ptr [esi+0C0h], 0
		jz	short loc_1000EA74
		mov	eax, [esi+0DCh]
		test	eax, eax
		jz	short loc_1000EA74
		mov	ecx, [esi+13Ch]
		test	ecx, ecx
		jz	short loc_1000EA67
		call	ecx
		cmp	[esi+140h], eax
		jnz	short loc_1000EA74
		dec	dword ptr [esi+178h]
		jnz	short loc_1000EA74
		mov	dword ptr [esi+140h], 0FFFFFFFFh
		mov	dword ptr [esi+178h], 0
		mov	eax, [esi+0DCh]

loc_1000EA67:				; CODE XREF: ldap_rename+209j
		push	dword ptr [eax]
		mov	eax, [esi+0C4h]
		call	eax
		add	esp, 4

loc_1000EA74:				; CODE XREF: ldap_rename+1F5j
					; ldap_rename+1FFj ...
		xor	eax, eax

loc_1000EA76:				; CODE XREF: ldap_rename+2B3j
		pop	ebp
		pop	edi
		pop	ebx
		pop	esi
		retn	20h
; ---------------------------------------------------------------------------

loc_1000EA7D:				; CODE XREF: ldap_rename+1EAj
		cmp	dword ptr [esi+0C0h], 0
		jz	short loc_1000EAD3
		mov	eax, [esi+0DCh]
		test	eax, eax
		jz	short loc_1000EAD3
		mov	ecx, [esi+13Ch]
		test	ecx, ecx
		jz	short loc_1000EAC6
		call	ecx
		cmp	[esi+140h], eax
		jnz	short loc_1000EAD3
		dec	dword ptr [esi+178h]
		jnz	short loc_1000EAD3
		mov	dword ptr [esi+140h], 0FFFFFFFFh
		mov	dword ptr [esi+178h], 0
		mov	eax, [esi+0DCh]

loc_1000EAC6:				; CODE XREF: ldap_rename+268j
		push	dword ptr [eax]
		mov	eax, [esi+0C4h]
		call	eax
		add	esp, 4

loc_1000EAD3:				; CODE XREF: ldap_rename+151j
					; ldap_rename+159j ...
		lea	eax, [esp+10h+Memory]
		push	eax
		push	esi
		call	sub_1000EF40
		add	esp, 8
		test	eax, eax
		jnz	short loc_1000EA76
		push	[esp+10h+arg_10]
		push	[esp+14h+arg_8]
		push	ebp
		push	6Ch
		push	dword ptr [edi]
		push	offset aItSsb	; "{it{ssb"
		push	[esp+28h+Memory]
		call	ber_printf
		add	esp, 1Ch
		cmp	eax, 0FFFFFFFFh
		jz	short loc_1000EB3B
		test	ebx, ebx
		jnz	short loc_1000EB1F
		push	offset asc_1001F9E8 ; "}"
		push	[esp+14h+Memory]
		call	ber_printf
		add	esp, 8
		jmp	short loc_1000EB36
; ---------------------------------------------------------------------------

loc_1000EB1F:				; CODE XREF: ldap_rename+2DAj
		push	ebx
		push	80h
		push	offset aTs	; "ts}"
		push	[esp+1Ch+Memory]
		call	ber_printf
		add	esp, 10h

loc_1000EB36:				; CODE XREF: ldap_rename+2EDj
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_1000EB5E

loc_1000EB3B:				; CODE XREF: ldap_rename+2D6j
		push	0
		push	0
		push	53h
		push	esi
		call	ldap_set_lderrno
		push	1		; int
		push	[esp+14h+Memory] ; Memory
		call	ber_free
		pop	ebp
		pop	edi
		pop	ebx
		mov	eax, 53h
		pop	esi
		retn	20h
; ---------------------------------------------------------------------------

loc_1000EB5E:				; CODE XREF: ldap_rename+309j
		push	[esp+10h+Memory]
		push	1
		push	[esp+18h+arg_14]
		push	esi
		call	sub_10002DD0
		mov	ebx, eax
		add	esp, 10h
		test	ebx, ebx
		jz	short loc_1000EB8B
		push	1		; int
		push	[esp+14h+Memory] ; Memory
		call	ber_free
		pop	ebp
		pop	edi
		mov	eax, ebx
		pop	ebx
		pop	esi
		retn	20h
; ---------------------------------------------------------------------------

loc_1000EB8B:				; CODE XREF: ldap_rename+345j
		push	[esp+10h+Memory]
		push	ebp
		push	6Ch
		push	dword ptr [edi]
		push	esi
		call	sub_1000FC30
		add	esp, 14h
		mov	[edi], eax
		test	eax, eax
		jns	loc_1000EA74
		push	0
		push	0
		push	esi
		call	ldap_get_lderrno
		pop	ebp
		pop	edi
		pop	ebx
		pop	esi
		retn	20h
ldap_rename	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 473. ldap_rename_s

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	ldap_rename_s(void *Memory, int, int, int, int,	int, int)
		public ldap_rename_s
ldap_rename_s	proc near		; DATA XREF: .rdata:off_10020938o

var_4		= dword	ptr -4
Memory		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch

		push	ecx
		push	esi
		mov	esi, [esp+8+Memory]
		lea	eax, [esp+8+var_4]
		push	eax		; int
		push	[esp+0Ch+arg_18] ; int
		push	[esp+10h+arg_14] ; int
		push	[esp+14h+arg_10] ; int
		push	[esp+18h+arg_C]	; int
		push	[esp+1Ch+arg_8]	; int
		push	[esp+20h+arg_4]	; int
		push	esi		; Memory
		call	ldap_rename
		test	eax, eax
		jz	short loc_1000EBFC

loc_1000EBED:				; CODE XREF: ldap_rename_s+43j
					; ldap_rename_s+58j
		push	0
		push	0
		push	esi
		call	ldap_get_lderrno
		pop	esi
		pop	ecx
		retn	1Ch
; ---------------------------------------------------------------------------

loc_1000EBFC:				; CODE XREF: ldap_rename_s+2Bj
		mov	eax, [esp+8+var_4]
		cmp	eax, 0FFFFFFFFh
		jz	short loc_1000EBED
		lea	ecx, [esp+8+arg_18]
		push	ecx
		push	0
		push	1
		push	eax
		push	esi
		call	ldap_result
		cmp	eax, 0FFFFFFFFh
		jz	short loc_1000EBED
		push	1
		push	[esp+0Ch+arg_18]
		push	esi
		call	ldap_result2error
		pop	esi
		pop	ecx
		retn	1Ch
ldap_rename_s	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000EC30	proc near		; CODE XREF: sub_1000F130+F0p

Memory		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch

		sub	esp, 8
		push	edi
		mov	edi, [esp+0Ch+arg_14]
		lea	eax, [esp+0Ch+arg_14]
		push	0
		push	eax
		push	[esp+14h+arg_C]
		mov	dword ptr [edi], 0
		mov	[esp+18h+arg_14], 0
		call	sub_10018B20
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_1000EC6A
		mov	dword ptr [edi], 1
		xor	edi, edi
		jmp	loc_1000EE56
; ---------------------------------------------------------------------------

loc_1000EC6A:				; CODE XREF: sub_1000EC30+2Bj
		mov	eax, [esp+0Ch+arg_14]
		push	ebx
		push	esi
		mov	esi, [esp+14h+arg_0]
		mov	ebx, [eax+18h]
		and	ebx, 1
		jz	short loc_1000EC8F
		cmp	dword ptr [esi+7Ch], 0
		jnz	short loc_1000EC8F
		mov	dword ptr [edi], 1
		xor	edi, edi
		jmp	loc_1000EE54
; ---------------------------------------------------------------------------

loc_1000EC8F:				; CODE XREF: sub_1000EC30+4Aj
					; sub_1000EC30+50j
		mov	eax, [esi+0C0h]
		test	eax, eax
		jz	short loc_1000ECF5
		mov	ecx, [esi+0DCh]
		test	ecx, ecx
		jz	short loc_1000ECF5
		mov	edx, [esi+13Ch]
		test	edx, edx
		jz	short loc_1000ECED
		call	edx
		cmp	[esi+148h], eax
		jnz	short loc_1000ECBF
		inc	dword ptr [esi+180h]
		jmp	short loc_1000ECF5
; ---------------------------------------------------------------------------

loc_1000ECBF:				; CODE XREF: sub_1000EC30+85j
		mov	eax, [esi+0DCh]
		push	dword ptr [eax+8]
		mov	eax, [esi+0C0h]
		call	eax
		mov	eax, [esi+13Ch]
		add	esp, 4
		call	eax
		mov	[esi+148h], eax
		mov	dword ptr [esi+180h], 1
		jmp	short loc_1000ECF5
; ---------------------------------------------------------------------------

loc_1000ECED:				; CODE XREF: sub_1000EC30+7Bj
		push	dword ptr [ecx+8]
		call	eax
		add	esp, 4

loc_1000ECF5:				; CODE XREF: sub_1000EC30+67j
					; sub_1000EC30+71j ...
		inc	dword ptr [esi+30h]
		cmp	dword ptr [esi+0C0h], 0
		push	ebp
		mov	ebp, [esi+30h]
		mov	[esp+18h+var_4], ebp
		jz	short loc_1000ED57
		mov	eax, [esi+0DCh]
		test	eax, eax
		jz	short loc_1000ED57
		mov	ecx, [esi+13Ch]
		test	ecx, ecx
		jz	short loc_1000ED49
		call	ecx
		cmp	[esi+148h], eax
		jnz	short loc_1000ED57
		dec	dword ptr [esi+180h]
		jnz	short loc_1000ED57
		mov	dword ptr [esi+148h], 0FFFFFFFFh
		mov	dword ptr [esi+180h], 0
		mov	eax, [esi+0DCh]

loc_1000ED49:				; CODE XREF: sub_1000EC30+EBj
		push	dword ptr [eax+8]
		mov	eax, [esi+0C4h]
		call	eax
		add	esp, 4

loc_1000ED57:				; CODE XREF: sub_1000EC30+D7j
					; sub_1000EC30+E1j ...
		push	[esp+18h+arg_18]
		lea	eax, [esp+1Ch+Memory]
		push	eax
		push	[esp+20h+arg_14]
		push	ebp
		mov	ebp, [esp+28h+arg_8]
		push	dword ptr [ebp+28h]
		push	esi
		call	sub_10010510
		mov	edi, eax
		add	esp, 18h
		test	edi, edi
		jnz	loc_1000EE53
		push	14h
		push	1
		call	ldap_x_calloc
		mov	edi, eax
		add	esp, 8
		test	edi, edi
		jnz	short loc_1000EDA6
		push	1		; int
		push	[esp+1Ch+Memory] ; Memory
		call	ber_free
		mov	edi, 5Ah
		jmp	loc_1000EE53
; ---------------------------------------------------------------------------

loc_1000EDA6:				; CODE XREF: sub_1000EC30+15Fj
		mov	eax, [esp+18h+arg_14]
		mov	eax, [eax]
		test	eax, eax
		jnz	short loc_1000EDDB
		cmp	[esi+54h], eax
		jnz	short loc_1000EDD1
		mov	[edi], eax

loc_1000EDB7:				; CODE XREF: sub_1000EC30+1B8j
		mov	ecx, [esp+18h+arg_14]
		mov	eax, [ecx+4]
		test	eax, eax
		jnz	short loc_1000EE18
		cmp	[ecx], eax
		jnz	short loc_1000EE05
		mov	eax, [ebp+2Ch]
		mov	eax, [eax+18h]
		mov	eax, [eax+8]
		jmp	short loc_1000EE18
; ---------------------------------------------------------------------------

loc_1000EDD1:				; CODE XREF: sub_1000EC30+183j
		mov	eax, [ebp+2Ch]
		mov	eax, [eax+18h]
		push	dword ptr [eax]
		jmp	short loc_1000EDDC
; ---------------------------------------------------------------------------

loc_1000EDDB:				; CODE XREF: sub_1000EC30+17Ej
		push	eax

loc_1000EDDC:				; CODE XREF: sub_1000EC30+1A9j
		call	sub_1000BAB0
		add	esp, 4
		mov	[edi], eax
		test	eax, eax
		jnz	short loc_1000EDB7
		push	edi
		call	ldap_x_free
		add	esp, 4
		push	1		; int
		push	[esp+1Ch+Memory] ; Memory
		call	ber_free
		mov	edi, 5Ah
		jmp	short loc_1000EE53
; ---------------------------------------------------------------------------

loc_1000EE05:				; CODE XREF: sub_1000EC30+194j
		test	eax, eax
		jnz	short loc_1000EE18
		test	ebx, ebx
		mov	eax, 185h
		mov	ecx, 27Ch
		cmovnz	eax, ecx

loc_1000EE18:				; CODE XREF: sub_1000EC30+190j
					; sub_1000EC30+19Fj ...
		mov	[edi+8], eax
		test	ebx, ebx
		jz	short loc_1000EE23
		or	dword ptr [edi+0Ch], 1

loc_1000EE23:				; CODE XREF: sub_1000EC30+1EDj
		push	1		; int
		push	0		; int
		push	0		; int
		push	edi		; int
		push	[esp+28h+arg_4]	; int
		push	[esp+2Ch+var_4]	; int
		push	[esp+30h+Memory] ; Memory
		push	esi		; int
		call	sub_1000FD40
		add	esp, 20h
		test	eax, eax
		jns	short loc_1000EE51
		push	0
		push	0
		push	esi
		call	ldap_get_lderrno
		mov	edi, eax
		jmp	short loc_1000EE53
; ---------------------------------------------------------------------------

loc_1000EE51:				; CODE XREF: sub_1000EC30+211j
		xor	edi, edi

loc_1000EE53:				; CODE XREF: sub_1000EC30+149j
					; sub_1000EC30+171j ...
		pop	ebp

loc_1000EE54:				; CODE XREF: sub_1000EC30+5Aj
		pop	esi
		pop	ebx

loc_1000EE56:				; CODE XREF: sub_1000EC30+35j
		mov	eax, [esp+0Ch+arg_14]
		test	eax, eax
		jz	short loc_1000EE64
		push	eax
		call	ldap_free_urldesc

loc_1000EE64:				; CODE XREF: sub_1000EC30+22Cj
		mov	eax, edi
		pop	edi
		add	esp, 8
		retn
sub_1000EC30	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000EE70	proc near		; CODE XREF: sub_1000FD40+234p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, [esp+arg_0]
		push	ebx
		push	ebp
		push	esi
		push	edi
		mov	edi, [eax+68h]
		test	edi, edi
		jz	short loc_1000EEDF
		mov	ebx, [esp+10h+arg_8]
		mov	eax, [esp+10h+arg_4]
		mov	ebp, ds:_stricmp
		lea	ecx, [ecx+0]

loc_1000EE90:				; CODE XREF: sub_1000EE70+6Dj
		mov	esi, eax
		test	eax, eax
		jz	short loc_1000EED8

loc_1000EE96:				; CODE XREF: sub_1000EE70+62j
		mov	ecx, [esi]
		mov	eax, [edi+18h]
		test	ecx, ecx
		jnz	short loc_1000EEA5
		cmp	[eax], ecx
		jz	short loc_1000EEB6
		jmp	short loc_1000EEC9
; ---------------------------------------------------------------------------

loc_1000EEA5:				; CODE XREF: sub_1000EE70+2Dj
		mov	eax, [eax]
		test	eax, eax
		jz	short loc_1000EEC9
		push	eax		; Str2
		push	ecx		; Str1
		call	ebp ; _stricmp
		add	esp, 8
		test	eax, eax
		jnz	short loc_1000EEC9

loc_1000EEB6:				; CODE XREF: sub_1000EE70+31j
		mov	ecx, [edi+18h]
		mov	eax, [esi+8]
		cmp	eax, [ecx+8]
		jnz	short loc_1000EEC9
		mov	eax, [esi+0Ch]
		cmp	eax, [ecx+0Ch]
		jz	short loc_1000EEE6

loc_1000EEC9:				; CODE XREF: sub_1000EE70+33j
					; sub_1000EE70+39j ...
		test	ebx, ebx
		jz	short loc_1000EED4
		mov	esi, [esi+10h]
		test	esi, esi
		jnz	short loc_1000EE96

loc_1000EED4:				; CODE XREF: sub_1000EE70+5Bj
		mov	eax, [esp+10h+arg_4]

loc_1000EED8:				; CODE XREF: sub_1000EE70+24j
		mov	edi, [edi+2Ch]
		test	edi, edi
		jnz	short loc_1000EE90

loc_1000EEDF:				; CODE XREF: sub_1000EE70+Dj
		pop	edi
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1000EEE6:				; CODE XREF: sub_1000EE70+57j
		mov	eax, edi
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
sub_1000EE70	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000EEF0	proc near		; CODE XREF: sub_1000F5E0+91p
					; sub_1000FD40+273p

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		test	esi, esi
		jz	short loc_1000EF32
		push	edi
		lea	ebx, [ebx+0]

loc_1000EF00:				; CODE XREF: sub_1000EEF0+3Fj
		mov	eax, [esi+4]
		mov	edi, [esi+10h]
		test	eax, eax
		jz	short loc_1000EF13
		push	eax
		call	ldap_x_free
		add	esp, 4

loc_1000EF13:				; CODE XREF: sub_1000EEF0+18j
		mov	eax, [esi]
		test	eax, eax
		jz	short loc_1000EF22
		push	eax
		call	ldap_x_free
		add	esp, 4

loc_1000EF22:				; CODE XREF: sub_1000EEF0+27j
		push	esi
		call	ldap_x_free
		add	esp, 4
		mov	esi, edi
		test	edi, edi
		jnz	short loc_1000EF00
		pop	edi

loc_1000EF32:				; CODE XREF: sub_1000EEF0+7j
		pop	esi
		retn
sub_1000EEF0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000EF40	proc near		; CODE XREF: sub_10001000+A5p
					; ldap_add_ext+26Dp ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_0]
		push	edi
		mov	eax, [esi+0C0h]
		test	eax, eax
		jz	short loc_1000EFAC
		mov	ecx, [esi+0DCh]
		test	ecx, ecx
		jz	short loc_1000EFAC
		mov	edx, [esi+13Ch]
		test	edx, edx
		jz	short loc_1000EFA4
		call	edx
		cmp	[esi+15Ch], eax
		jnz	short loc_1000EF76
		inc	dword ptr [esi+194h]
		jmp	short loc_1000EFAC
; ---------------------------------------------------------------------------

loc_1000EF76:				; CODE XREF: sub_1000EF40+2Cj
		mov	eax, [esi+0DCh]
		push	dword ptr [eax+1Ch]
		mov	eax, [esi+0C0h]
		call	eax
		mov	eax, [esi+13Ch]
		add	esp, 4
		call	eax
		mov	[esi+15Ch], eax
		mov	dword ptr [esi+194h], 1
		jmp	short loc_1000EFAC
; ---------------------------------------------------------------------------

loc_1000EFA4:				; CODE XREF: sub_1000EF40+22j
		push	dword ptr [ecx+1Ch]
		call	eax
		add	esp, 4

loc_1000EFAC:				; CODE XREF: sub_1000EF40+Ej
					; sub_1000EF40+18j ...
		movsx	eax, byte ptr [esi+0Ch]
		push	eax
		call	ber_alloc_t
		mov	ecx, [esp+8+arg_4]
		mov	[ecx], eax
		test	eax, eax
		jnz	short loc_1000EFCE
		push	eax
		push	eax
		lea	edi, [eax+5Ah]
		push	edi
		push	esi
		call	ldap_set_lderrno
		jmp	short loc_1000EFD0
; ---------------------------------------------------------------------------

loc_1000EFCE:				; CODE XREF: sub_1000EF40+7Ej
		xor	edi, edi

loc_1000EFD0:				; CODE XREF: sub_1000EF40+8Cj
		cmp	dword ptr [esi+0C0h], 0
		jz	short loc_1000F03A
		mov	eax, [esi+0DCh]
		test	eax, eax
		jz	short loc_1000F03A
		mov	ecx, [esi+13Ch]
		test	ecx, ecx
		jz	short loc_1000F02C
		call	ecx
		cmp	[esi+15Ch], eax
		jnz	short loc_1000F03A
		dec	dword ptr [esi+194h]
		jnz	short loc_1000F03A
		mov	dword ptr [esi+15Ch], 0FFFFFFFFh
		mov	dword ptr [esi+194h], 0
		mov	ecx, [esi+0DCh]
		push	dword ptr [ecx+1Ch]
		mov	ecx, [esi+0C4h]
		call	ecx
		add	esp, 4
		mov	eax, edi
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1000F02C:				; CODE XREF: sub_1000EF40+ABj
		push	dword ptr [eax+1Ch]
		mov	eax, [esi+0C4h]
		call	eax
		add	esp, 4

loc_1000F03A:				; CODE XREF: sub_1000EF40+97j
					; sub_1000EF40+A1j ...
		mov	eax, edi
		pop	edi
		pop	esi
		retn
sub_1000EF40	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000F040	proc near		; CODE XREF: sub_1000F130+116p
					; sub_10011350+2Bj

arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		push	ebp
		push	esi
		mov	esi, [esp+0Ch+arg_4]
		push	edi
		mov	edi, [esi]
		test	edi, edi
		jnz	short loc_1000F077
		mov	ebx, [esp+10h+arg_8]
		lea	ebp, [edi+1]
		mov	ecx, ebx
		lea	edx, [ecx+1]
		lea	ebx, [ebx+0]

loc_1000F060:				; CODE XREF: sub_1000F040+25j
		mov	al, [ecx]
		inc	ecx
		test	al, al
		jnz	short loc_1000F060
		sub	ecx, edx
		lea	eax, [ecx+0Bh]
		push	eax
		call	ldap_x_malloc
		add	esp, 4
		jmp	short loc_1000F0B0
; ---------------------------------------------------------------------------

loc_1000F077:				; CODE XREF: sub_1000F040+Cj
		mov	ecx, edi
		xor	ebp, ebp
		lea	edx, [ecx+1]
		mov	edi, edi

loc_1000F080:				; CODE XREF: sub_1000F040+45j
		mov	al, [ecx]
		inc	ecx
		test	al, al
		jnz	short loc_1000F080
		mov	ebx, [esp+10h+arg_8]
		sub	ecx, edx
		mov	edx, ebx
		lea	eax, [edx+1]
		mov	[esp+10h+arg_4], eax

loc_1000F096:				; CODE XREF: sub_1000F040+5Bj
		mov	al, [edx]
		inc	edx
		test	al, al
		jnz	short loc_1000F096
		sub	edx, [esp+10h+arg_4]
		lea	eax, [ecx+2]
		add	eax, edx
		push	eax
		push	edi
		call	ldap_x_realloc
		add	esp, 8

loc_1000F0B0:				; CODE XREF: sub_1000F040+35j
		mov	edi, eax
		mov	[esi], eax
		test	edi, edi
		jnz	short loc_1000F0C0
		lea	eax, [edi+5Ah]
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1000F0C0:				; CODE XREF: sub_1000F040+76j
		test	ebp, ebp
		jz	short loc_1000F0E4
		movq	xmm0, qword ptr	ds:aReferral ; "Referral:\n"
		movq	qword ptr [edi], xmm0
		mov	ax, word ptr ds:aReferral+8 ; ":\n"
		mov	[edi+8], ax
		mov	al, byte ptr ds:aReferral+0Ah ;	""
		mov	[edi+0Ah], al
		jmp	short loc_1000F0F8
; ---------------------------------------------------------------------------

loc_1000F0E4:				; CODE XREF: sub_1000F040+82j
		dec	edi

loc_1000F0E5:				; CODE XREF: sub_1000F040+ADj
		mov	al, [edi+1]
		lea	edi, [edi+1]
		test	al, al
		jnz	short loc_1000F0E5
		mov	ax, word ptr ds:asc_1001F980 ; "\n"
		mov	[edi], ax

loc_1000F0F8:				; CODE XREF: sub_1000F040+A2j
		mov	edx, ebx
		lea	ebx, [ebx+0]

loc_1000F100:				; CODE XREF: sub_1000F040+C5j
		mov	al, [ebx]
		inc	ebx
		test	al, al
		jnz	short loc_1000F100
		mov	edi, [esi]
		sub	ebx, edx
		dec	edi
		lea	esp, [esp+0]

loc_1000F110:				; CODE XREF: sub_1000F040+D6j
		mov	al, [edi+1]
		inc	edi
		test	al, al
		jnz	short loc_1000F110
		mov	ecx, ebx
		mov	esi, edx
		shr	ecx, 2
		xor	eax, eax
		rep movsd
		mov	ecx, ebx
		and	ecx, 3
		rep movsb
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
sub_1000F040	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000F130	proc near		; CODE XREF: sub_10010900+F2p

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		mov	eax, [esp+arg_10]
		sub	esp, 8
		mov	dword ptr [eax], 0
		mov	eax, [esp+8+arg_C]
		push	esi
		mov	esi, [esp+0Ch+arg_8]
		mov	dword ptr [eax], 0
		mov	esi, [esi]
		test	esi, esi
		jnz	short loc_1000F159
		xor	eax, eax
		pop	esi
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_1000F159:				; CODE XREF: sub_1000F130+20j
		push	edi
		mov	edi, esi
		lea	ecx, [edi+1]
		nop

loc_1000F160:				; CODE XREF: sub_1000F130+35j
		mov	al, [edi]
		inc	edi
		test	al, al
		jnz	short loc_1000F160
		sub	edi, ecx
		push	ebx
		cmp	edi, 0Ah
		jl	short loc_1000F197
		mov	ebx, ds:_strnicmp

loc_1000F175:				; CODE XREF: sub_1000F130+65j
		mov	al, [esi]
		cmp	al, 52h
		jz	short loc_1000F17F
		cmp	al, 72h
		jnz	short loc_1000F190

loc_1000F17F:				; CODE XREF: sub_1000F130+49j
		push	0Ah		; MaxCount
		push	offset aReferral ; "Referral:\n"
		push	esi		; Str1
		call	ebx ; _strnicmp
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_1000F1A0

loc_1000F190:				; CODE XREF: sub_1000F130+4Dj
		dec	edi
		inc	esi
		cmp	edi, 0Ah
		jge	short loc_1000F175

loc_1000F197:				; CODE XREF: sub_1000F130+3Dj
					; sub_1000F130+79j
		pop	ebx
		pop	edi
		xor	eax, eax
		pop	esi
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_1000F1A0:				; CODE XREF: sub_1000F130+5Ej
		mov	byte ptr [esi],	0
		add	esi, 0Ah
		cmp	edi, 0Ah
		jl	short loc_1000F197
		mov	edx, [esp+14h+arg_4]
		mov	ecx, [esp+14h+arg_0]
		mov	eax, [edx+10h]
		cmp	eax, [ecx+4Ch]
		jl	short loc_1000F1C7
		pop	ebx
		pop	edi
		mov	eax, 61h
		pop	esi
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_1000F1C7:				; CODE XREF: sub_1000F130+89j
		mov	eax, [edx+34h]
		mov	ebx, edx
		test	eax, eax
		jz	short loc_1000F1D9

loc_1000F1D0:				; CODE XREF: sub_1000F130+A7j
		mov	ebx, eax
		mov	eax, [ebx+34h]
		test	eax, eax
		jnz	short loc_1000F1D0

loc_1000F1D9:				; CODE XREF: sub_1000F130+9Ej
		push	ebp
		mov	[esp+18h+var_8], 0
		xor	edi, edi
		mov	ebp, esi

loc_1000F1E6:				; CODE XREF: sub_1000F130+127j
		test	esi, esi
		jz	short loc_1000F259
		push	0Ah		; Val
		push	esi		; Str
		call	ds:strchr
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		jz	short loc_1000F202
		mov	byte ptr [esi],	0
		inc	esi
		jmp	short loc_1000F204
; ---------------------------------------------------------------------------

loc_1000F202:				; CODE XREF: sub_1000F130+CAj
		xor	esi, esi

loc_1000F204:				; CODE XREF: sub_1000F130+D0j
		mov	eax, [esp+18h+arg_C]
		push	0
		inc	dword ptr [eax]
		lea	eax, [esp+1Ch+var_4]
		push	eax
		push	offset aV2Referral ; "v2 referral"
		push	ebp
		push	ebx
		push	[esp+2Ch+arg_4]
		push	[esp+30h+arg_0]
		call	sub_1000EC30
		mov	edi, eax
		add	esp, 1Ch
		test	edi, edi
		jnz	short loc_1000F23C
		cmp	[esp+18h+var_4], eax
		jnz	short loc_1000F23C
		mov	eax, [esp+18h+arg_10]
		inc	dword ptr [eax]
		jmp	short loc_1000F253
; ---------------------------------------------------------------------------

loc_1000F23C:				; CODE XREF: sub_1000F130+FCj
					; sub_1000F130+102j
		push	ebp
		lea	eax, [esp+1Ch+var_8]
		push	eax
		push	[esp+20h+arg_0]
		call	sub_1000F040
		add	esp, 0Ch
		test	eax, eax
		cmovnz	edi, eax

loc_1000F253:				; CODE XREF: sub_1000F130+10Aj
		mov	ebp, esi
		test	edi, edi
		jz	short loc_1000F1E6

loc_1000F259:				; CODE XREF: sub_1000F130+B8j
		mov	ebx, [esp+18h+arg_8]
		push	dword ptr [ebx]
		call	ldap_x_free
		mov	eax, [esp+1Ch+var_8]
		add	esp, 4
		mov	[ebx], eax
		mov	eax, edi
		pop	ebp
		pop	ebx
		pop	edi
		pop	esi
		add	esp, 8
		retn
sub_1000F130	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000F280	proc near		; CODE XREF: sub_10010900+C6p

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
Memory		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		mov	eax, [esp+arg_14]
		sub	esp, 10h
		mov	ecx, [esp+10h+arg_8]
		push	edi
		xor	edi, edi
		mov	[eax], edi
		mov	eax, [esp+14h+arg_10]
		mov	[eax], edi
		test	ecx, ecx
		jz	loc_1000F560
		cmp	[ecx], edi
		jz	loc_1000F560
		mov	edx, [esp+14h+arg_4]
		push	esi
		mov	esi, [esp+18h+arg_0]
		mov	dword ptr [eax], 1
		mov	eax, [edx+10h]
		cmp	eax, [esi+4Ch]
		jl	short loc_1000F2C6
		pop	esi
		lea	eax, [edi+61h]
		pop	edi
		add	esp, 10h
		retn
; ---------------------------------------------------------------------------

loc_1000F2C6:				; CODE XREF: sub_1000F280+3Bj
		mov	eax, [edx+34h]
		mov	[esp+18h+var_8], edx
		test	eax, eax
		jz	short loc_1000F2E2

loc_1000F2D1:				; CODE XREF: sub_1000F280+5Cj
		mov	esi, eax
		mov	[esp+18h+var_8], esi
		mov	eax, [esi+34h]
		test	eax, eax
		jnz	short loc_1000F2D1
		mov	esi, [esp+18h+arg_0]

loc_1000F2E2:				; CODE XREF: sub_1000F280+4Fj
		push	ebp
		xor	ebp, ebp
		mov	[esp+1Ch+var_10], ebp
		cmp	[ecx], edi
		jz	loc_1000F557
		mov	eax, ecx
		push	ebx
		jmp	short loc_1000F300
; ---------------------------------------------------------------------------
		align 10h

loc_1000F300:				; CODE XREF: sub_1000F280+74j
					; sub_1000F280+2BCj
		push	0
		lea	ecx, [esp+24h+arg_10]
		mov	[esp+24h+var_C], 0
		push	ecx
		push	dword ptr [eax]
		mov	[esp+2Ch+arg_10], 0
		call	sub_10018B20
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_1000F331
		mov	ebx, 1
		xor	edi, edi
		jmp	loc_1000F516
; ---------------------------------------------------------------------------

loc_1000F331:				; CODE XREF: sub_1000F280+A3j
		mov	eax, [esp+20h+arg_10]
		mov	ebx, [eax+18h]
		and	ebx, 1
		jz	short loc_1000F34F
		cmp	dword ptr [esi+7Ch], 0
		jnz	short loc_1000F34F
		mov	ebx, 1
		xor	edi, edi
		jmp	loc_1000F516
; ---------------------------------------------------------------------------

loc_1000F34F:				; CODE XREF: sub_1000F280+BBj
					; sub_1000F280+C1j
		mov	eax, [esi+0C0h]
		test	eax, eax
		jz	short loc_1000F3B5
		mov	ecx, [esi+0DCh]
		test	ecx, ecx
		jz	short loc_1000F3B5
		mov	edx, [esi+13Ch]
		test	edx, edx
		jz	short loc_1000F3AD
		call	edx
		cmp	[esi+148h], eax
		jnz	short loc_1000F37F
		inc	dword ptr [esi+180h]
		jmp	short loc_1000F3B5
; ---------------------------------------------------------------------------

loc_1000F37F:				; CODE XREF: sub_1000F280+F5j
		mov	eax, [esi+0DCh]
		push	dword ptr [eax+8]
		mov	eax, [esi+0C0h]
		call	eax
		mov	eax, [esi+13Ch]
		add	esp, 4
		call	eax
		mov	[esi+148h], eax
		mov	dword ptr [esi+180h], 1
		jmp	short loc_1000F3B5
; ---------------------------------------------------------------------------

loc_1000F3AD:				; CODE XREF: sub_1000F280+EBj
		push	dword ptr [ecx+8]
		call	eax
		add	esp, 4

loc_1000F3B5:				; CODE XREF: sub_1000F280+D7j
					; sub_1000F280+E1j ...
		inc	dword ptr [esi+30h]
		cmp	dword ptr [esi+0C0h], 0
		mov	ebp, [esi+30h]
		jz	short loc_1000F412
		mov	eax, [esi+0DCh]
		test	eax, eax
		jz	short loc_1000F412
		mov	ecx, [esi+13Ch]
		test	ecx, ecx
		jz	short loc_1000F404
		call	ecx
		cmp	[esi+148h], eax
		jnz	short loc_1000F412
		dec	dword ptr [esi+180h]
		jnz	short loc_1000F412
		mov	dword ptr [esi+148h], 0FFFFFFFFh
		mov	dword ptr [esi+180h], 0
		mov	eax, [esi+0DCh]

loc_1000F404:				; CODE XREF: sub_1000F280+156j
		push	dword ptr [eax+8]
		mov	eax, [esi+0C4h]
		call	eax
		add	esp, 4

loc_1000F412:				; CODE XREF: sub_1000F280+142j
					; sub_1000F280+14Cj ...
		push	[esp+20h+arg_C]
		lea	eax, [esp+24h+Memory]
		push	eax
		push	[esp+28h+arg_10]
		mov	eax, [esp+2Ch+var_8]
		push	ebp
		push	dword ptr [eax+28h]
		push	esi
		call	sub_10010510
		mov	edi, eax
		add	esp, 18h
		test	edi, edi
		jz	short loc_1000F43F
		mov	ebx, [esp+20h+var_C]
		jmp	loc_1000F512
; ---------------------------------------------------------------------------

loc_1000F43F:				; CODE XREF: sub_1000F280+1B4j
		push	14h
		push	1
		call	ldap_x_calloc
		mov	edi, eax
		add	esp, 8
		test	edi, edi
		jnz	short loc_1000F46A

loc_1000F451:				; CODE XREF: sub_1000F280+23Fj
		push	1		; int
		push	[esp+24h+Memory] ; Memory
		call	ber_free
		mov	ebx, [esp+20h+var_C]
		mov	edi, 5Ah
		jmp	loc_1000F512
; ---------------------------------------------------------------------------

loc_1000F46A:				; CODE XREF: sub_1000F280+1CFj
		mov	eax, [esp+20h+arg_10]
		mov	eax, [eax]
		test	eax, eax
		jnz	short loc_1000F4A7
		cmp	[esi+54h], eax
		jnz	short loc_1000F499
		mov	[edi], eax

loc_1000F47B:				; CODE XREF: sub_1000F280+234j
		mov	ecx, [esp+20h+arg_10]
		mov	eax, [ecx+4]
		test	eax, eax
		jnz	short loc_1000F4D4
		cmp	[ecx], eax
		jnz	short loc_1000F4C1
		mov	eax, [esp+20h+var_8]
		mov	eax, [eax+2Ch]
		mov	eax, [eax+18h]
		mov	eax, [eax+8]
		jmp	short loc_1000F4D4
; ---------------------------------------------------------------------------

loc_1000F499:				; CODE XREF: sub_1000F280+1F7j
		mov	eax, [esp+20h+var_8]
		mov	eax, [eax+2Ch]
		mov	eax, [eax+18h]
		push	dword ptr [eax]
		jmp	short loc_1000F4A8
; ---------------------------------------------------------------------------

loc_1000F4A7:				; CODE XREF: sub_1000F280+1F2j
		push	eax

loc_1000F4A8:				; CODE XREF: sub_1000F280+225j
		call	sub_1000BAB0
		add	esp, 4
		mov	[edi], eax
		test	eax, eax
		jnz	short loc_1000F47B
		push	edi
		call	ldap_x_free
		add	esp, 4
		jmp	short loc_1000F451
; ---------------------------------------------------------------------------

loc_1000F4C1:				; CODE XREF: sub_1000F280+208j
		test	eax, eax
		jnz	short loc_1000F4D4
		test	ebx, ebx
		mov	eax, 185h
		mov	ecx, 27Ch
		cmovnz	eax, ecx

loc_1000F4D4:				; CODE XREF: sub_1000F280+204j
					; sub_1000F280+217j ...
		mov	[edi+8], eax
		test	ebx, ebx
		jz	short loc_1000F4DF
		or	dword ptr [edi+0Ch], 1

loc_1000F4DF:				; CODE XREF: sub_1000F280+259j
		push	1		; int
		push	0		; int
		push	0		; int
		push	edi		; int
		push	[esp+30h+arg_4]	; int
		push	ebp		; int
		push	[esp+38h+Memory] ; Memory
		push	esi		; int
		call	sub_1000FD40
		add	esp, 20h
		test	eax, eax
		jns	short loc_1000F50E
		push	0
		push	0
		push	esi
		call	ldap_get_lderrno
		mov	ebx, [esp+20h+var_C]
		mov	edi, eax
		jmp	short loc_1000F512
; ---------------------------------------------------------------------------

loc_1000F50E:				; CODE XREF: sub_1000F280+27Aj
		xor	edi, edi
		mov	ebx, edi

loc_1000F512:				; CODE XREF: sub_1000F280+1BAj
					; sub_1000F280+1E5j ...
		mov	ebp, [esp+20h+var_10]

loc_1000F516:				; CODE XREF: sub_1000F280+ACj
					; sub_1000F280+CAj
		mov	eax, [esp+20h+arg_10]
		test	eax, eax
		jz	short loc_1000F524
		push	eax
		call	ldap_free_urldesc

loc_1000F524:				; CODE XREF: sub_1000F280+29Cj
		test	edi, edi
		jnz	short loc_1000F52C
		test	ebx, ebx
		jz	short loc_1000F54C

loc_1000F52C:				; CODE XREF: sub_1000F280+2A6j
		mov	eax, [esp+20h+arg_8]
		inc	ebp
		cmp	dword ptr [eax+ebp*4], 0
		mov	[esp+20h+var_10], ebp
		lea	eax, [eax+ebp*4]
		jnz	loc_1000F300
		pop	ebx
		pop	ebp
		pop	esi
		mov	eax, edi
		pop	edi
		add	esp, 10h
		retn
; ---------------------------------------------------------------------------

loc_1000F54C:				; CODE XREF: sub_1000F280+2AAj
		mov	eax, [esp+20h+arg_14]
		pop	ebx
		mov	dword ptr [eax], 1

loc_1000F557:				; CODE XREF: sub_1000F280+6Bj
		pop	ebp
		pop	esi
		mov	eax, edi
		pop	edi
		add	esp, 10h
		retn
; ---------------------------------------------------------------------------

loc_1000F560:				; CODE XREF: sub_1000F280+18j
					; sub_1000F280+20j
		xor	eax, eax
		pop	edi
		add	esp, 10h
		retn
sub_1000F280	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000F570	proc near		; CODE XREF: sub_1000FB90+87p
					; sub_1000FD40+48Fp ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebx
		mov	ebx, [esp+4+arg_0]
		push	esi
		mov	esi, [ebx+34h]
		test	esi, esi
		jz	short loc_1000F5BC
		push	edi
		mov	edi, [esp+0Ch+arg_4]

loc_1000F582:				; CODE XREF: sub_1000F570+49j
		test	edi, edi
		jz	short loc_1000F591
		mov	eax, [esi+2Ch]
		test	eax, eax
		jz	short loc_1000F5B4
		cmp	[eax], edi
		jnz	short loc_1000F5B4

loc_1000F591:				; CODE XREF: sub_1000F570+14j
		mov	eax, [esi+2Ch]
		mov	dword ptr [esi+4], 5
		test	eax, eax
		jz	short loc_1000F5B4
		mov	dword ptr [eax+14h], 4
		mov	eax, [esi+2Ch]
		push	dword ptr [eax]
		push	ebx
		call	sub_1000C410
		add	esp, 8

loc_1000F5B4:				; CODE XREF: sub_1000F570+1Bj
					; sub_1000F570+1Fj ...
		mov	esi, [esi+44h]
		test	esi, esi
		jnz	short loc_1000F582
		pop	edi

loc_1000F5BC:				; CODE XREF: sub_1000F570+Bj
		pop	esi
		pop	ebx
		retn
sub_1000F570	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000F5C0	proc near		; CODE XREF: sub_10010A90+166p
					; sub_10011680+12Ep ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		mov	eax, [eax+34h]
		test	eax, eax
		jz	short locret_1000F5DB
		mov	ecx, [esp+arg_4]
		nop

loc_1000F5D0:				; CODE XREF: sub_1000F5C0+19j
		cmp	ecx, [eax]
		jz	short locret_1000F5DB
		mov	eax, [eax+44h]
		test	eax, eax
		jnz	short loc_1000F5D0

locret_1000F5DB:			; CODE XREF: sub_1000F5C0+9j
					; sub_1000F5C0+12j
		retn
sub_1000F5C0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000F5E0	proc near		; CODE XREF: sub_10001000+1DCp
					; sub_1000F6D0+5Cp ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		cmp	[esp+arg_10], 0
		push	esi
		mov	esi, [esp+4+arg_4]
		jnz	short loc_1000F605
		dec	dword ptr [esi+0Ch]
		cmp	dword ptr [esi+0Ch], 0
		jle	short loc_1000F605
		push	0		; Time
		call	ds:_time64
		add	esp, 4
		mov	[esi+10h], eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1000F605:				; CODE XREF: sub_1000F5E0+Aj
					; sub_1000F5E0+13j
		push	edi
		push	dword ptr [esi]
		mov	edi, [esp+0Ch+arg_0]
		push	edi
		call	sub_1000C410
		add	esp, 8
		cmp	dword ptr [esi+14h], 3
		jnz	short loc_1000F635
		cmp	[esp+8+arg_14],	0
		jz	short loc_1000F635
		push	[esp+8+arg_C]
		push	[esp+0Ch+arg_8]
		push	dword ptr [esi]
		push	edi
		call	sub_100184D0
		add	esp, 10h

loc_1000F635:				; CODE XREF: sub_1000F5E0+39j
					; sub_1000F5E0+40j
		push	dword ptr [esi]
		push	edi
		call	sub_1000BCE0
		mov	eax, [edi+68h]
		add	esp, 8
		xor	ecx, ecx
		test	eax, eax
		jz	short loc_1000F66E
		lea	esp, [esp+0]

loc_1000F650:				; CODE XREF: sub_1000F5E0+7Bj
		cmp	eax, esi
		jz	short loc_1000F65F
		mov	ecx, eax
		mov	eax, [eax+2Ch]
		test	eax, eax
		jnz	short loc_1000F650
		jmp	short loc_1000F66E
; ---------------------------------------------------------------------------

loc_1000F65F:				; CODE XREF: sub_1000F5E0+72j
		mov	eax, [eax+2Ch]
		test	ecx, ecx
		jnz	short loc_1000F66B
		mov	[edi+68h], eax
		jmp	short loc_1000F66E
; ---------------------------------------------------------------------------

loc_1000F66B:				; CODE XREF: sub_1000F5E0+84j
		mov	[ecx+2Ch], eax

loc_1000F66E:				; CODE XREF: sub_1000F5E0+67j
					; sub_1000F5E0+7Dj ...
		push	dword ptr [esi+18h]
		call	sub_1000EEF0
		mov	eax, [esi+28h]
		add	esp, 4
		test	eax, eax
		jz	short loc_1000F689
		push	eax
		call	ldap_x_free
		add	esp, 4

loc_1000F689:				; CODE XREF: sub_1000F5E0+9Ej
		mov	eax, [esi]
		cmp	eax, [edi]
		pop	edi
		jz	short loc_1000F69C
		push	eax		; Memory
		call	ber_sockbuf_free
		mov	dword ptr [esi], 0

loc_1000F69C:				; CODE XREF: sub_1000F5E0+AEj
		mov	eax, [esi+4]
		test	eax, eax
		jz	short loc_1000F6AB
		push	1		; int
		push	eax		; Memory
		call	ber_free

loc_1000F6AB:				; CODE XREF: sub_1000F5E0+C1j
		mov	eax, [esi+1Ch]
		test	eax, eax
		jz	short loc_1000F6BB
		push	eax
		call	ldap_x_free
		add	esp, 4

loc_1000F6BB:				; CODE XREF: sub_1000F5E0+D0j
		push	esi
		call	ldap_x_free
		add	esp, 4
		pop	esi
		retn
sub_1000F5E0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000F6D0	proc near		; CODE XREF: sub_10001000+1EEp
					; sub_1000F6D0+3Dp ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	edi
		mov	edi, [esp+4+arg_4]
		mov	eax, [edi+34h]
		test	eax, eax
		jz	short loc_1000F6E9
		mov	dword ptr [eax+38h], 0
		mov	eax, [edi+34h]
		dec	dword ptr [eax+8]

loc_1000F6E9:				; CODE XREF: sub_1000F6D0+Aj
		cmp	dword ptr [edi+4], 4
		jnz	short loc_1000F6F5
		mov	eax, [edi+2Ch]
		dec	dword ptr [eax+24h]

loc_1000F6F5:				; CODE XREF: sub_1000F6D0+1Dj
		mov	eax, [edi+38h]
		push	ebx
		mov	ebx, [esp+8+arg_0]
		push	ebp
		mov	ebp, [esp+0Ch+arg_8]
		test	eax, eax
		jz	short loc_1000F71C
		push	esi

loc_1000F707:				; CODE XREF: sub_1000F6D0+49j
		mov	esi, [eax+3Ch]
		push	ebp
		push	eax
		push	ebx
		call	sub_1000F6D0
		add	esp, 0Ch
		mov	eax, esi
		test	esi, esi
		jnz	short loc_1000F707
		pop	esi

loc_1000F71C:				; CODE XREF: sub_1000F6D0+34j
		test	ebp, ebp
		jz	short loc_1000F734
		push	1
		push	0
		push	0
		push	0
		push	dword ptr [edi+2Ch]
		push	ebx
		call	sub_1000F5E0
		add	esp, 18h

loc_1000F734:				; CODE XREF: sub_1000F6D0+4Ej
		mov	ecx, [edi+40h]
		mov	eax, [edi+44h]
		test	ecx, ecx
		jnz	short loc_1000F743
		mov	[ebx+34h], eax
		jmp	short loc_1000F746
; ---------------------------------------------------------------------------

loc_1000F743:				; CODE XREF: sub_1000F6D0+6Cj
		mov	[ecx+44h], eax

loc_1000F746:				; CODE XREF: sub_1000F6D0+71j
		mov	ecx, [edi+44h]
		pop	ebp
		pop	ebx
		test	ecx, ecx
		jz	short loc_1000F755
		mov	eax, [edi+40h]
		mov	[ecx+40h], eax

loc_1000F755:				; CODE XREF: sub_1000F6D0+7Dj
		mov	eax, [edi+28h]
		test	eax, eax
		jz	short loc_1000F764
		push	1		; int
		push	eax		; Memory
		call	ber_free

loc_1000F764:				; CODE XREF: sub_1000F6D0+8Aj
		mov	eax, [edi+20h]
		test	eax, eax
		jz	short loc_1000F774
		push	eax
		call	ldap_x_free
		add	esp, 4

loc_1000F774:				; CODE XREF: sub_1000F6D0+99j
		mov	eax, [edi+24h]
		test	eax, eax
		jz	short loc_1000F784
		push	eax
		call	ldap_x_free
		add	esp, 4

loc_1000F784:				; CODE XREF: sub_1000F6D0+A9j
		mov	eax, [edi+30h]
		test	eax, eax
		jz	short loc_1000F794
		push	eax
		call	ldap_x_free
		add	esp, 4

loc_1000F794:				; CODE XREF: sub_1000F6D0+B9j
		mov	eax, [edi+48h]
		test	eax, eax
		jz	short loc_1000F7A1
		push	eax
		call	ldap_controls_free

loc_1000F7A1:				; CODE XREF: sub_1000F6D0+C9j
		push	edi
		call	ldap_x_free
		add	esp, 4
		pop	edi
		retn
sub_1000F6D0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000F7B0	proc near		; CODE XREF: sub_1000B9C0+72p
					; sub_1000FD40+264p

var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		sub	esp, 24h
		push	ebx
		push	ebp
		push	edi
		push	30h
		push	1
		xor	edi, edi
		call	ldap_x_calloc
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		jz	short loc_1000F7E6
		mov	ebp, [esp+30h+arg_8]
		test	ebp, ebp
		jnz	short loc_1000F7FE
		call	ber_sockbuf_alloc
		mov	edi, eax
		test	edi, edi
		jnz	short loc_1000F7FE
		push	ebx
		call	ldap_x_free
		add	esp, 4

loc_1000F7E6:				; CODE XREF: sub_1000F7B0+18j
		push	0
		push	0
		push	5Ah
		push	[esp+3Ch+arg_0]
		call	ldap_set_lderrno
		pop	edi
		pop	ebp
		xor	eax, eax
		pop	ebx
		add	esp, 24h
		retn
; ---------------------------------------------------------------------------

loc_1000F7FE:				; CODE XREF: sub_1000F7B0+20j
					; sub_1000F7B0+2Bj
		push	esi
		mov	esi, [esp+34h+arg_0]
		mov	eax, [esi+0C0h]
		test	eax, eax
		jz	short loc_1000F869
		mov	ecx, [esi+0DCh]
		test	ecx, ecx
		jz	short loc_1000F869
		mov	edx, [esi+13Ch]
		test	edx, edx
		jz	short loc_1000F861
		call	edx
		cmp	[esi+15Ch], eax
		jnz	short loc_1000F833
		inc	dword ptr [esi+194h]
		jmp	short loc_1000F869
; ---------------------------------------------------------------------------

loc_1000F833:				; CODE XREF: sub_1000F7B0+79j
		mov	eax, [esi+0DCh]
		push	dword ptr [eax+1Ch]
		mov	eax, [esi+0C0h]
		call	eax
		mov	eax, [esi+13Ch]
		add	esp, 4
		call	eax
		mov	[esi+15Ch], eax
		mov	dword ptr [esi+194h], 1
		jmp	short loc_1000F869
; ---------------------------------------------------------------------------

loc_1000F861:				; CODE XREF: sub_1000F7B0+6Fj
		push	dword ptr [ecx+1Ch]
		call	eax
		add	esp, 4

loc_1000F869:				; CODE XREF: sub_1000F7B0+5Bj
					; sub_1000F7B0+65j ...
		test	ebp, ebp
		jnz	short loc_1000F8E8
		lea	eax, [esp+34h+var_14]
		mov	[esp+34h+var_14], 14h
		push	eax
		push	100h
		push	dword ptr [esi]
		call	ber_sockbuf_get_option
		test	eax, eax
		jnz	short loc_1000F89A
		lea	eax, [esp+34h+var_14]
		push	eax
		push	100h
		push	edi
		call	ber_sockbuf_set_option

loc_1000F89A:				; CODE XREF: sub_1000F7B0+D8j
		lea	eax, [esp+34h+var_1C]
		push	eax
		push	40h
		push	dword ptr [esi]
		call	ber_sockbuf_get_option
		test	eax, eax
		jnz	short loc_1000F8BD
		mov	eax, [esp+34h+var_1C]
		test	eax, eax
		jz	short loc_1000F8BD
		push	eax
		push	40h
		push	edi
		call	ber_sockbuf_set_option

loc_1000F8BD:				; CODE XREF: sub_1000F7B0+FAj
					; sub_1000F7B0+102j
		lea	eax, [esp+34h+var_1C]
		push	eax
		push	80h
		push	dword ptr [esi]
		call	ber_sockbuf_get_option
		test	eax, eax
		jnz	short loc_1000F8EA
		mov	eax, [esp+34h+var_1C]
		test	eax, eax
		jz	short loc_1000F8EA
		push	eax
		push	80h
		push	edi
		call	ber_sockbuf_set_option
		jmp	short loc_1000F8EA
; ---------------------------------------------------------------------------

loc_1000F8E8:				; CODE XREF: sub_1000F7B0+BBj
		mov	edi, [esi]

loc_1000F8EA:				; CODE XREF: sub_1000F7B0+120j
					; sub_1000F7B0+128j ...
		mov	[ebx], edi
		mov	eax, [esi+8]
		mov	[ebx+8], eax
		cmp	dword ptr [esi+0C0h], 0
		jz	short loc_1000F949
		mov	eax, [esi+0DCh]
		test	eax, eax
		jz	short loc_1000F949
		mov	ecx, [esi+13Ch]
		test	ecx, ecx
		jz	short loc_1000F93B
		call	ecx
		cmp	[esi+15Ch], eax
		jnz	short loc_1000F949
		dec	dword ptr [esi+194h]
		jnz	short loc_1000F949
		mov	dword ptr [esi+15Ch], 0FFFFFFFFh
		mov	dword ptr [esi+194h], 0
		mov	eax, [esi+0DCh]

loc_1000F93B:				; CODE XREF: sub_1000F7B0+15Dj
		push	dword ptr [eax+1Ch]
		mov	eax, [esi+0C4h]
		call	eax
		add	esp, 4

loc_1000F949:				; CODE XREF: sub_1000F7B0+149j
					; sub_1000F7B0+153j ...
		cmp	[esp+34h+arg_C], 0
		jz	short loc_1000F9C5
		mov	eax, [esp+34h+arg_4]
		xor	ebp, ebp
		mov	edi, [eax]
		test	edi, edi
		jz	short loc_1000F989
		lea	eax, [ebx+28h]
		nop

loc_1000F960:				; CODE XREF: sub_1000F7B0+1D7j
		push	eax
		mov	eax, [edi+0Ch]
		and	eax, 1
		push	eax
		push	dword ptr [edi+8]
		push	dword ptr [edi]
		push	dword ptr [ebx]
		push	esi
		call	sub_1000BDA0
		add	esp, 18h
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_1000F9AD
		mov	ebp, edi
		lea	eax, [ebx+28h]
		mov	edi, [edi+10h]
		test	edi, edi
		jnz	short loc_1000F960

loc_1000F989:				; CODE XREF: sub_1000F7B0+1AAj
		cmp	[esp+34h+arg_8], 0
		jnz	short loc_1000F99A
		push	dword ptr [ebx]
		call	ldap_x_free
		add	esp, 4

loc_1000F99A:				; CODE XREF: sub_1000F7B0+1DEj
		push	ebx
		call	ldap_x_free
		add	esp, 4
		xor	eax, eax
		pop	esi
		pop	edi
		pop	ebp
		pop	ebx
		add	esp, 24h
		retn
; ---------------------------------------------------------------------------

loc_1000F9AD:				; CODE XREF: sub_1000F7B0+1CBj
		mov	eax, [edi+10h]
		test	ebp, ebp
		jnz	short loc_1000F9BF
		mov	ecx, [esp+34h+arg_4]
		mov	[ecx], eax
		mov	[ebx+18h], edi
		jmp	short loc_1000F9C5
; ---------------------------------------------------------------------------

loc_1000F9BF:				; CODE XREF: sub_1000F7B0+202j
		mov	[ebp+10h], eax
		mov	[ebx+18h], edi

loc_1000F9C5:				; CODE XREF: sub_1000F7B0+19Ej
					; sub_1000F7B0+20Dj
		mov	eax, [esi+50h]
		shr	eax, 1Ah
		not	eax
		and	eax, 1
		or	eax, 2
		cmp	[esp+34h+arg_10], 0
		mov	[ebx+14h], eax
		mov	eax, [esi+68h]
		mov	[ebx+2Ch], eax
		mov	[esi+68h], ebx
		jz	loc_1000FADB
		mov	eax, [esi+70h]
		xor	edi, edi
		xor	ebp, ebp
		test	eax, eax
		jnz	short loc_1000FA0F
		mov	eax, offset Src
		mov	edx, 80h
		mov	ecx, eax
		mov	[esp+34h+var_20], eax
		mov	[esp+34h+var_1C], ecx
		mov	[esp+34h+var_24], edx
		jmp	short loc_1000FA3D
; ---------------------------------------------------------------------------

loc_1000FA0F:				; CODE XREF: sub_1000F7B0+243j
		push	dword ptr [esi+74h]
		lea	ecx, [esp+38h+var_24]
		push	0
		push	ecx
		lea	ecx, [esp+40h+var_20]
		push	ecx
		lea	ecx, [esp+44h+var_1C]
		push	ecx
		push	esi
		call	eax
		test	eax, eax
		jnz	loc_1000FABC
		mov	ecx, [esp+34h+var_1C]
		lea	ebp, [eax+1]
		mov	eax, [esp+34h+var_20]
		mov	edx, [esp+34h+var_24]

loc_1000FA3D:				; CODE XREF: sub_1000F7B0+25Dj
		mov	edi, [esi+64h]
		push	edx
		push	eax
		push	ecx
		mov	[esi+64h], ebx
		inc	dword ptr [ebx+0Ch]
		push	esi
		mov	[esp+44h+var_18], edi
		call	ldap_bind_s
		mov	ecx, eax
		mov	edi, 0
		test	ecx, ecx
		jz	short loc_1000FA8E
		mov	edi, edi

loc_1000FA60:				; CODE XREF: sub_1000F7B0+2D7j
		mov	eax, [ebx+8]
		cmp	eax, 2
		jle	short loc_1000FA8B
		cmp	ecx, 2
		jnz	short loc_1000FA8B
		push	[esp+34h+var_24]
		dec	eax
		push	[esp+38h+var_20]
		mov	[ebx+8], eax
		push	[esp+3Ch+var_1C]
		push	esi
		call	ldap_bind_s
		mov	ecx, eax
		test	ecx, ecx
		jnz	short loc_1000FA60
		jmp	short loc_1000FA8E
; ---------------------------------------------------------------------------

loc_1000FA8B:				; CODE XREF: sub_1000F7B0+2B6j
					; sub_1000F7B0+2BBj
		or	edi, 0FFFFFFFFh

loc_1000FA8E:				; CODE XREF: sub_1000F7B0+2ACj
					; sub_1000F7B0+2D9j
		dec	dword ptr [ebx+0Ch]
		mov	eax, [esp+34h+var_18]
		mov	[esi+64h], eax
		test	ebp, ebp
		jz	short loc_1000FAB6
		push	dword ptr [esi+74h]
		lea	eax, [esp+38h+var_24]
		push	1
		push	eax
		lea	eax, [esp+40h+var_20]
		push	eax
		lea	eax, [esp+44h+var_1C]
		push	eax
		mov	eax, [esi+70h]
		push	esi
		call	eax

loc_1000FAB6:				; CODE XREF: sub_1000F7B0+2EAj
		test	edi, edi
		jz	short loc_1000FADB
		jmp	short loc_1000FAC7
; ---------------------------------------------------------------------------

loc_1000FABC:				; CODE XREF: sub_1000F7B0+278j
		push	0
		push	0
		push	eax
		push	esi
		call	ldap_set_lderrno

loc_1000FAC7:				; CODE XREF: sub_1000F7B0+30Aj
		push	0
		push	1
		push	0
		push	0
		push	ebx
		push	esi
		call	sub_1000F5E0
		add	esp, 18h
		xor	ebx, ebx

loc_1000FADB:				; CODE XREF: sub_1000F7B0+234j
					; sub_1000F7B0+308j
		pop	esi
		pop	edi
		pop	ebp
		mov	eax, ebx
		pop	ebx
		add	esp, 24h
		retn
sub_1000F7B0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000FAF0	proc near		; CODE XREF: sub_10001510+2Cp
					; sub_1000FD40+2ACp

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	esi
		push	4Ch
		push	1
		call	ldap_x_calloc
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		jz	short loc_1000FB48
		mov	ecx, [esp+4+arg_4]
		mov	eax, [esp+4+arg_C]
		push	edi
		mov	edi, [esp+8+arg_0]
		mov	[esi+28h], ecx
		mov	ecx, [esp+8+arg_8]
		mov	[esi+2Ch], edi
		mov	[esi+0Ch], ecx
		mov	[esi], ecx
		mov	[esi+18h], eax
		mov	dword ptr [esi+4], 1
		mov	dword ptr [esi+1Ch], 0
		test	edi, edi
		jz	short loc_1000FB45
		inc	dword ptr [edi+0Ch]
		push	0		; Time
		call	ds:_time64
		add	esp, 4
		mov	[edi+10h], eax

loc_1000FB45:				; CODE XREF: sub_1000FAF0+42j
		mov	eax, esi
		pop	edi

loc_1000FB48:				; CODE XREF: sub_1000FAF0+11j
		pop	esi
		retn
sub_1000FAF0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000FB50	proc near		; CODE XREF: sub_10001510+52p
					; sub_1000FD40+3A4p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	edx, [esp+arg_0]
		mov	ecx, [edx+34h]
		test	ecx, ecx
		jnz	short loc_1000FB63
		mov	eax, [esp+arg_4]
		mov	[edx+34h], eax
		retn
; ---------------------------------------------------------------------------

loc_1000FB63:				; CODE XREF: sub_1000FB50+9j
		mov	eax, [ecx+44h]
		test	eax, eax
		jz	short loc_1000FB79
		lea	ebx, [ebx+0]

loc_1000FB70:				; CODE XREF: sub_1000FB50+27j
		mov	ecx, eax
		mov	eax, [ecx+44h]
		test	eax, eax
		jnz	short loc_1000FB70

loc_1000FB79:				; CODE XREF: sub_1000FB50+18j
		mov	eax, [esp+arg_4]
		mov	[ecx+44h], eax
		mov	[eax+40h], ecx
		retn
sub_1000FB50	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000FB90	proc near		; CODE XREF: sub_10001510+17p
					; sub_1000FC60+2Ap ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
Memory		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	ebx
		mov	ebx, ds:_errno
		push	ebp
		mov	ebp, [esp+8+arg_4]
		push	esi
		mov	esi, [esp+0Ch+arg_0]
		push	edi
		mov	edi, [esi+50h]
		shr	edi, 1Ah
		and	edi, 1
		jmp	short loc_1000FBB0
; ---------------------------------------------------------------------------
		align 10h

loc_1000FBB0:				; CODE XREF: sub_1000FB90+1Bj
					; sub_1000FB90+6Dj
		mov	eax, [esi+0CCh]
		test	eax, eax
		jz	short loc_1000FBC3
		push	0
		call	eax
		add	esp, 4
		jmp	short loc_1000FBCB
; ---------------------------------------------------------------------------

loc_1000FBC3:				; CODE XREF: sub_1000FB90+28j
		call	ebx ; _errno
		mov	dword ptr [eax], 0

loc_1000FBCB:				; CODE XREF: sub_1000FB90+31j
		push	[esp+10h+arg_C]	; int
		push	[esp+14h+Memory] ; Memory
		push	ebp		; int
		call	ber_flush
		test	eax, eax
		jz	short loc_1000FC27
		mov	eax, [esi+0C8h]
		test	eax, eax
		jz	short loc_1000FBEB
		call	eax
		jmp	short loc_1000FBEF
; ---------------------------------------------------------------------------

loc_1000FBEB:				; CODE XREF: sub_1000FB90+55j
		call	ebx ; _errno
		mov	eax, [eax]

loc_1000FBEF:				; CODE XREF: sub_1000FB90+59j
		cmp	eax, 2733h
		jz	short loc_1000FBFB
		cmp	eax, 0Bh
		jnz	short loc_1000FC09

loc_1000FBFB:				; CODE XREF: sub_1000FB90+64j
		test	edi, edi
		jz	short loc_1000FBB0
		pop	edi
		pop	esi
		pop	ebp
		mov	eax, 0FFFFFFFEh
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1000FC09:				; CODE XREF: sub_1000FB90+69j
		cmp	[esp+10h+arg_10], 0
		jz	short loc_1000FC15
		cmp	eax, 20h
		jz	short loc_1000FC1F

loc_1000FC15:				; CODE XREF: sub_1000FB90+7Ej
		push	ebp
		push	esi
		call	sub_1000F570
		add	esp, 8

loc_1000FC1F:				; CODE XREF: sub_1000FB90+83j
		pop	edi
		pop	esi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1000FC27:				; CODE XREF: sub_1000FB90+4Bj
		pop	edi
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		retn
sub_1000FB90	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000FC30	proc near		; CODE XREF: ldap_add_ext+348p
					; ldap_compare_ext+2F1p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
Memory		= dword	ptr  14h

		push	0		; int
		xor	eax, eax
		cmp	[esp+4+arg_8], 60h
		cmovz	eax, [esp+4+arg_C]
		push	eax		; int
		push	0		; int
		push	0		; int
		push	0		; int
		push	[esp+14h+arg_4]	; int
		push	[esp+18h+Memory] ; Memory
		push	[esp+1Ch+arg_0]	; int
		call	sub_1000FD40
		add	esp, 20h
		retn
sub_1000FC30	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1000FC60	proc near		; CODE XREF: sub_1000FD40+709p
					; sub_10011E90+6C9p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebx
		mov	ebx, [esp+4+arg_0]
		push	ebp
		push	esi
		xor	ebp, ebp
		mov	esi, [ebx+34h]
		push	edi
		mov	edi, [esp+10h+arg_4]
		test	esi, esi
		jz	short loc_1000FCD6

loc_1000FC75:				; CODE XREF: sub_1000FC60+74j
		cmp	dword ptr [esi+4], 4
		jnz	short loc_1000FCB2
		cmp	[esi+2Ch], edi
		jnz	short loc_1000FCB2
		push	0
		push	0
		push	dword ptr [esi+28h]
		push	dword ptr [edi]
		push	ebx
		call	sub_1000FB90
		add	esp, 14h
		test	eax, eax
		jnz	short loc_1000FD01
		mov	ecx, [esi+28h]
		mov	eax, [ecx+54h]
		mov	[ecx+58h], eax
		mov	ecx, [esi+28h]
		mov	eax, [ecx+50h]
		mov	[ecx+54h], eax
		mov	dword ptr [esi+4], 1
		dec	dword ptr [edi+24h]

loc_1000FCB2:				; CODE XREF: sub_1000FC60+19j
					; sub_1000FC60+1Ej
		cmp	dword ptr [esi+4], 1
		jnz	short loc_1000FCCF
		cmp	dword ptr [esi+18h], 0
		jz	short loc_1000FCC1
		inc	ebp
		jmp	short loc_1000FCCF
; ---------------------------------------------------------------------------

loc_1000FCC1:				; CODE XREF: sub_1000FC60+5Cj
		push	0
		push	esi
		push	ebx
		call	sub_1000F6D0
		add	esp, 0Ch
		xor	esi, esi

loc_1000FCCF:				; CODE XREF: sub_1000FC60+56j
					; sub_1000FC60+5Fj
		mov	esi, [esi+44h]
		test	esi, esi
		jnz	short loc_1000FC75

loc_1000FCD6:				; CODE XREF: sub_1000FC60+13j
					; sub_1000FC60+A4j
		test	edi, edi
		jz	short loc_1000FCFA
		cmp	dword ptr [edi+24h], 1
		jge	short loc_1000FCEB
		push	dword ptr [edi]
		push	ebx
		call	sub_1000C410
		add	esp, 8

loc_1000FCEB:				; CODE XREF: sub_1000FC60+7Ej
		test	ebp, ebp
		jz	short loc_1000FCFA
		push	dword ptr [edi]
		push	ebx
		call	sub_1000C630
		add	esp, 8

loc_1000FCFA:				; CODE XREF: sub_1000FC60+78j
					; sub_1000FC60+8Dj
		pop	edi
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1000FD01:				; CODE XREF: sub_1000FC60+34j
		cmp	eax, 0FFFFFFFEh
		jz	short loc_1000FCD6
		push	0
		push	0
		push	51h
		push	ebx
		call	ldap_set_lderrno
		push	0
		push	esi
		push	ebx
		call	sub_1000F6D0
		push	0
		push	0
		push	0
		push	0
		push	edi
		push	ebx
		call	sub_1000F5E0
		add	esp, 24h
		or	eax, 0FFFFFFFFh
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
sub_1000FC60	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1000FD40(int,	void *Memory, int, int,	int, int, int, int)
sub_1000FD40	proc near		; CODE XREF: sub_1000EC30+207p
					; sub_1000F280+270p ...

var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
Memory		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch
arg_1C		= dword	ptr  20h

		sub	esp, 14h
		push	ebx
		push	ebp
		push	esi
		mov	esi, [esp+20h+arg_0]
		push	edi
		mov	[esp+24h+var_8], 0
		mov	[esp+24h+var_4], 0
		mov	eax, [esi+0C0h]
		mov	[esp+24h+var_14], 0
		mov	[esp+24h+var_10], 0
		test	eax, eax
		jz	short loc_1000FDD1
		mov	ecx, [esi+0DCh]
		test	ecx, ecx
		jz	short loc_1000FDD1
		mov	edx, [esi+13Ch]
		test	edx, edx
		jz	short loc_1000FDC9
		call	edx
		cmp	[esi+164h], eax
		jnz	short loc_1000FD9B
		inc	dword ptr [esi+19Ch]
		jmp	short loc_1000FDD1
; ---------------------------------------------------------------------------

loc_1000FD9B:				; CODE XREF: sub_1000FD40+51j
		mov	eax, [esi+0DCh]
		push	dword ptr [eax+24h]
		mov	eax, [esi+0C0h]
		call	eax
		mov	eax, [esi+13Ch]
		add	esp, 4
		call	eax
		mov	[esi+164h], eax
		mov	dword ptr [esi+19Ch], 1
		jmp	short loc_1000FDD1
; ---------------------------------------------------------------------------

loc_1000FDC9:				; CODE XREF: sub_1000FD40+47j
		push	dword ptr [ecx+24h]
		call	eax
		add	esp, 4

loc_1000FDD1:				; CODE XREF: sub_1000FD40+33j
					; sub_1000FD40+3Dj ...
		mov	edi, [esp+24h+arg_14]
		mov	ebx, [esp+24h+arg_C]
		test	edi, edi
		jnz	loc_1000FFC3
		mov	ebp, [esp+24h+arg_10]
		test	ebp, ebp
		jnz	loc_1000FF70
		cmp	[esi+64h], ebp
		jnz	loc_1000FF6B
		mov	eax, [esi+0C0h]
		test	eax, eax
		jz	short loc_1000FE5C
		mov	ecx, [esi+0DCh]
		test	ecx, ecx
		jz	short loc_1000FE5C
		mov	edx, [esi+13Ch]
		test	edx, edx
		jz	short loc_1000FE54
		call	edx
		cmp	[esi+15Ch], eax
		jnz	short loc_1000FE26
		inc	dword ptr [esi+194h]
		jmp	short loc_1000FE5C
; ---------------------------------------------------------------------------

loc_1000FE26:				; CODE XREF: sub_1000FD40+DCj
		mov	eax, [esi+0DCh]
		push	dword ptr [eax+1Ch]
		mov	eax, [esi+0C0h]
		call	eax
		mov	eax, [esi+13Ch]
		add	esp, 4
		call	eax
		mov	[esi+15Ch], eax
		mov	dword ptr [esi+194h], 1
		jmp	short loc_1000FE5C
; ---------------------------------------------------------------------------

loc_1000FE54:				; CODE XREF: sub_1000FD40+D2j
		push	dword ptr [ecx+1Ch]
		call	eax
		add	esp, 4

loc_1000FE5C:				; CODE XREF: sub_1000FD40+BEj
					; sub_1000FD40+C8j ...
		cmp	[esp+24h+arg_18], 0
		jnz	loc_1000FEF7
		test	dword ptr [esi+50h], 8000000h
		jz	loc_1000FEF7
		push	0
		push	0
		push	51h
		push	esi
		call	ldap_set_lderrno
		push	1		; int
		push	[esp+28h+Memory] ; Memory
		call	ber_free
		cmp	dword ptr [esi+0C0h], 0
		jz	loc_10010501
		mov	eax, [esi+0DCh]
		test	eax, eax
		jz	loc_100104AA
		mov	ecx, [esi+13Ch]
		test	ecx, ecx
		jz	short loc_1000FEE4
		call	ecx
		cmp	[esi+15Ch], eax
		jnz	loc_100104AA
		dec	dword ptr [esi+194h]
		jnz	loc_100104AA
		mov	dword ptr [esi+15Ch], 0FFFFFFFFh
		mov	dword ptr [esi+194h], 0
		mov	eax, [esi+0DCh]

loc_1000FEE4:				; CODE XREF: sub_1000FD40+16Ej
		push	dword ptr [eax+1Ch]
		mov	eax, [esi+0C4h]
		call	eax
		add	esp, 4
		jmp	loc_100104AA
; ---------------------------------------------------------------------------

loc_1000FEF7:				; CODE XREF: sub_1000FD40+121j
					; sub_1000FD40+12Ej
		cmp	dword ptr [esi+0C0h], 0
		jz	short loc_1000FF4E
		mov	eax, [esi+0DCh]
		test	eax, eax
		jz	short loc_1000FF4E
		mov	ecx, [esi+13Ch]
		test	ecx, ecx
		jz	short loc_1000FF40
		call	ecx
		cmp	[esi+15Ch], eax
		jnz	short loc_1000FF4E
		dec	dword ptr [esi+194h]
		jnz	short loc_1000FF4E
		mov	dword ptr [esi+15Ch], 0FFFFFFFFh
		mov	dword ptr [esi+194h], 0
		mov	eax, [esi+0DCh]

loc_1000FF40:				; CODE XREF: sub_1000FD40+1D2j
		push	dword ptr [eax+1Ch]
		mov	eax, [esi+0C4h]
		call	eax
		add	esp, 4

loc_1000FF4E:				; CODE XREF: sub_1000FD40+1BEj
					; sub_1000FD40+1C8j ...
		push	esi
		call	sub_1000B9C0
		add	esp, 4
		test	eax, eax
		jns	short loc_1000FF6B
		push	1		; int
		push	[esp+28h+Memory] ; Memory
		call	ber_free
		jmp	loc_100104AA
; ---------------------------------------------------------------------------

loc_1000FF6B:				; CODE XREF: sub_1000FD40+B0j
					; sub_1000FD40+219j
		mov	edi, [esi+64h]
		jmp	short loc_1000FFBB
; ---------------------------------------------------------------------------

loc_1000FF70:				; CODE XREF: sub_1000FD40+A7j
		push	1
		push	ebp
		push	esi
		call	sub_1000EE70
		mov	edi, eax
		add	esp, 0Ch
		test	edi, edi
		jnz	short loc_1000FFB2
		mov	eax, [esp+24h+arg_1C]
		test	eax, eax
		jz	short loc_1000FF99
		test	ebx, ebx
		jz	short loc_1000FF99
		inc	dword ptr [ebx+8]
		mov	[esp+24h+var_10], 1

loc_1000FF99:				; CODE XREF: sub_1000FD40+248j
					; sub_1000FD40+24Cj
		push	eax
		push	1
		push	0
		lea	eax, [esp+30h+arg_10]
		push	eax
		push	esi
		call	sub_1000F7B0
		mov	ebp, [esp+38h+arg_10]
		add	esp, 14h
		mov	edi, eax

loc_1000FFB2:				; CODE XREF: sub_1000FD40+240j
		push	ebp
		call	sub_1000EEF0
		add	esp, 4

loc_1000FFBB:				; CODE XREF: sub_1000FD40+22Ej
		test	edi, edi
		jz	loc_10010485

loc_1000FFC3:				; CODE XREF: sub_1000FD40+9Bj
		mov	eax, [edi+14h]
		cmp	eax, 4
		jz	loc_10010485
		test	dword ptr [esi+50h], 4000000h
		jnz	short loc_1000FFE1
		cmp	eax, 3
		jnz	loc_10010485

loc_1000FFE1:				; CODE XREF: sub_1000FD40+296j
		push	1
		push	[esp+28h+arg_8]
		push	[esp+2Ch+Memory]
		push	edi
		call	sub_1000FAF0
		mov	ebp, eax
		add	esp, 10h
		test	ebp, ebp
		jz	short loc_10010018
		mov	eax, [esp+24h+arg_18]
		test	eax, eax
		jz	short loc_10010046
		push	eax
		call	sub_1000BAB0
		add	esp, 4
		test	eax, eax
		jnz	short loc_10010046
		push	ebp
		call	ldap_x_free
		add	esp, 4

loc_10010018:				; CODE XREF: sub_1000FD40+2B8j
		push	0
		push	0
		push	5Ah
		push	esi
		call	ldap_set_lderrno
		push	0
		push	0
		push	0
		push	0
		push	edi
		push	esi
		call	sub_1000F5E0
		add	esp, 18h
		push	1		; int
		push	[esp+28h+Memory] ; Memory
		call	ber_free
		jmp	loc_100104A0
; ---------------------------------------------------------------------------

loc_10010046:				; CODE XREF: sub_1000FD40+2C0j
					; sub_1000FD40+2CDj
		mov	[ebp+30h], eax
		test	ebx, ebx
		jz	short loc_10010076
		cmp	[esp+24h+var_10], 0
		jnz	short loc_10010057
		inc	dword ptr [ebx+8]

loc_10010057:				; CODE XREF: sub_1000FD40+312j
		mov	eax, [ebx+0Ch]
		mov	[ebp+0Ch], eax
		mov	eax, [ebx+10h]
		inc	eax
		mov	[ebp+34h], ebx
		mov	[ebp+10h], eax
		mov	eax, [ebx+38h]
		test	eax, eax
		jz	short loc_10010071
		mov	[ebp+3Ch], eax

loc_10010071:				; CODE XREF: sub_1000FD40+32Cj
		mov	[ebx+38h], ebp
		jmp	short loc_1001007C
; ---------------------------------------------------------------------------

loc_10010076:				; CODE XREF: sub_1000FD40+30Bj
		mov	eax, [ebp+0]
		mov	[ebp+0Ch], eax

loc_1001007C:				; CODE XREF: sub_1000FD40+334j
		mov	eax, [esi+0C0h]
		test	eax, eax
		jz	short loc_100100E2
		mov	ecx, [esi+0DCh]
		test	ecx, ecx
		jz	short loc_100100E2
		mov	edx, [esi+13Ch]
		test	edx, edx
		jz	short loc_100100DA
		call	edx
		cmp	[esi+14Ch], eax
		jnz	short loc_100100AC
		inc	dword ptr [esi+184h]
		jmp	short loc_100100E2
; ---------------------------------------------------------------------------

loc_100100AC:				; CODE XREF: sub_1000FD40+362j
		mov	eax, [esi+0DCh]
		push	dword ptr [eax+0Ch]
		mov	eax, [esi+0C0h]
		call	eax
		mov	eax, [esi+13Ch]
		add	esp, 4
		call	eax
		mov	[esi+14Ch], eax
		mov	dword ptr [esi+184h], 1
		jmp	short loc_100100E2
; ---------------------------------------------------------------------------

loc_100100DA:				; CODE XREF: sub_1000FD40+358j
		push	dword ptr [ecx+0Ch]
		call	eax
		add	esp, 4

loc_100100E2:				; CODE XREF: sub_1000FD40+344j
					; sub_1000FD40+34Ej ...
		push	ebp
		push	esi
		call	sub_1000FB50
		add	esp, 8
		cmp	dword ptr [edi+14h], 2
		jz	short loc_100100F8
		cmp	dword ptr [edi+24h], 0
		jle	short loc_10010116

loc_100100F8:				; CODE XREF: sub_1000FD40+3B0j
		lea	eax, [esp+24h+var_10]
		mov	[esp+24h+var_C], 0
		push	eax
		push	esi
		mov	[esp+2Ch+var_10], 0
		call	sub_1000CB00
		add	esp, 8

loc_10010116:				; CODE XREF: sub_1000FD40+3B6j
		cmp	dword ptr [edi+14h], 2
		jnz	short loc_1001013C
		push	dword ptr [edi]
		push	esi
		call	sub_1000C9F0
		add	esp, 8
		test	eax, eax
		jz	short loc_10010132
		mov	dword ptr [edi+14h], 3

loc_10010132:				; CODE XREF: sub_1000FD40+3E9j
		cmp	dword ptr [edi+14h], 2
		jz	loc_10010415

loc_1001013C:				; CODE XREF: sub_1000FD40+3DAj
		cmp	dword ptr [edi+24h], 0
		jg	loc_10010415
		push	1
		push	0
		push	[esp+2Ch+Memory]
		push	dword ptr [edi]
		push	esi
		call	sub_1000FB90
		add	esp, 14h
		mov	[esp+24h+arg_0], eax
		test	eax, eax
		jz	loc_100103E4
		mov	ecx, [esi+0C8h]
		test	ecx, ecx
		jz	short loc_10010173
		call	ecx
		jmp	short loc_1001017B
; ---------------------------------------------------------------------------

loc_10010173:				; CODE XREF: sub_1000FD40+42Dj
		call	ds:_errno
		mov	eax, [eax]

loc_1001017B:				; CODE XREF: sub_1000FD40+431j
		cmp	eax, 20h
		jnz	short loc_100101D7
		lea	eax, [esp+24h+var_14]
		push	eax
		push	0
		push	1
		push	1
		push	0
		push	esi
		call	sub_100115C0
		add	esp, 18h
		cmp	eax, 78h
		mov	eax, [esp+24h+var_14]
		jnz	short loc_100101C2
		test	eax, eax
		jz	short loc_100101CC
		push	0
		lea	ecx, [esp+28h+var_4]
		push	ecx
		lea	ecx, [esp+2Ch+var_8]
		push	ecx
		push	eax
		push	esi
		call	ldap_parse_extended_result
		test	eax, eax
		jz	loc_100102BF
		mov	eax, [esp+24h+var_14]

loc_100101C2:				; CODE XREF: sub_1000FD40+45Dj
		test	eax, eax
		jz	short loc_100101CC
		push	eax
		call	ldap_msgfree

loc_100101CC:				; CODE XREF: sub_1000FD40+461j
					; sub_1000FD40+484j
		push	dword ptr [edi]
		push	esi
		call	sub_1000F570
		add	esp, 8

loc_100101D7:				; CODE XREF: sub_1000FD40+43Ej
					; sub_1000FD40+585j ...
		cmp	[esp+24h+arg_0], 0FFFFFFFEh
		jnz	loc_100103B8
		mov	dword ptr [ebp+4], 4
		push	dword ptr [edi]
		inc	dword ptr [edi+24h]
		push	esi
		call	sub_1000C780

loc_100101F4:				; CODE XREF: sub_1000FD40+6D0j
		add	esp, 8

loc_100101F7:				; CODE XREF: sub_1000FD40+6EEj
					; sub_1000FD40+701j ...
		cmp	dword ptr [esi+0C0h], 0
		jz	loc_1001046D
		mov	eax, [esi+0DCh]
		test	eax, eax
		jz	short loc_10010252
		mov	ecx, [esi+13Ch]
		test	ecx, ecx
		jz	short loc_10010244
		call	ecx
		cmp	[esi+14Ch], eax
		jnz	short loc_10010252
		dec	dword ptr [esi+184h]
		jnz	short loc_10010252
		mov	dword ptr [esi+14Ch], 0FFFFFFFFh
		mov	dword ptr [esi+184h], 0
		mov	eax, [esi+0DCh]

loc_10010244:				; CODE XREF: sub_1000FD40+4D6j
		push	dword ptr [eax+0Ch]
		mov	eax, [esi+0C4h]
		call	eax
		add	esp, 4

loc_10010252:				; CODE XREF: sub_1000FD40+4CCj
					; sub_1000FD40+4E0j ...
		cmp	dword ptr [esi+0C0h], 0
		jz	loc_1001046D
		mov	eax, [esi+0DCh]
		test	eax, eax
		jz	loc_1001046D
		mov	ecx, [esi+13Ch]
		test	ecx, ecx
		jz	loc_1001045F
		call	ecx
		cmp	[esi+164h], eax
		jnz	loc_1001046D
		dec	dword ptr [esi+19Ch]
		jnz	loc_1001046D
		mov	dword ptr [esi+164h], 0FFFFFFFFh
		mov	dword ptr [esi+19Ch], 0
		mov	eax, [esi+0DCh]
		push	dword ptr [eax+24h]
		mov	eax, [esi+0C4h]
		call	eax
		jmp	loc_1001046A
; ---------------------------------------------------------------------------

loc_100102BF:				; CODE XREF: sub_1000FD40+478j
		mov	ebx, [esp+24h+var_8]
		test	ebx, ebx
		jz	loc_100101D7
		mov	ecx, offset a1_3_6_1_4_1_14 ; "1.3.6.1.4.1.1466.20036"
		mov	eax, ebx

loc_100102D2:				; CODE XREF: sub_1000FD40+5ACj
		mov	dl, [eax]
		cmp	dl, [ecx]
		jnz	short loc_100102F2
		test	dl, dl
		jz	short loc_100102EE
		mov	dl, [eax+1]
		cmp	dl, [ecx+1]
		jnz	short loc_100102F2
		add	eax, 2
		add	ecx, 2
		test	dl, dl
		jnz	short loc_100102D2

loc_100102EE:				; CODE XREF: sub_1000FD40+59Aj
		xor	eax, eax
		jmp	short loc_100102F7
; ---------------------------------------------------------------------------

loc_100102F2:				; CODE XREF: sub_1000FD40+596j
					; sub_1000FD40+5A2j
		sbb	eax, eax
		or	eax, 1

loc_100102F7:				; CODE XREF: sub_1000FD40+5B0j
		test	eax, eax
		jnz	loc_100101D7
		mov	eax, [esp+24h+var_4]
		test	eax, eax
		jz	short loc_10010311
		push	eax
		call	ber_bvfree
		mov	ebx, [esp+24h+var_8]

loc_10010311:				; CODE XREF: sub_1000FD40+5C5j
		test	ebx, ebx
		jz	short loc_1001031B
		push	ebx
		call	ldap_memfree

loc_1001031B:				; CODE XREF: sub_1000FD40+5D3j
		mov	eax, [esp+24h+var_14]
		test	eax, eax
		jz	short loc_10010329
		push	eax
		call	ldap_msgfree

loc_10010329:				; CODE XREF: sub_1000FD40+5E1j
		push	dword ptr [edi]
		push	esi
		call	sub_1000F570
		push	0
		push	ebp
		push	esi
		call	sub_1000F6D0
		push	0
		push	0
		push	0
		push	0
		push	edi
		push	esi
		call	sub_1000F5E0
		add	esp, 2Ch

loc_1001034C:				; CODE XREF: sub_1000FD40+69Fj
					; sub_1000FD40+71Aj
		cmp	dword ptr [esi+0C0h], 0
		jz	loc_10010501
		mov	eax, [esi+0DCh]
		test	eax, eax
		jz	loc_100104AA
		mov	ecx, [esi+13Ch]
		test	ecx, ecx
		jz	short loc_100103A5
		call	ecx
		cmp	[esi+14Ch], eax
		jnz	loc_100104AA
		dec	dword ptr [esi+184h]
		jnz	loc_100104AA
		mov	dword ptr [esi+14Ch], 0FFFFFFFFh
		mov	dword ptr [esi+184h], 0
		mov	eax, [esi+0DCh]

loc_100103A5:				; CODE XREF: sub_1000FD40+62Fj
		push	dword ptr [eax+0Ch]
		mov	eax, [esi+0C4h]
		call	eax
		add	esp, 4
		jmp	loc_100104AA
; ---------------------------------------------------------------------------

loc_100103B8:				; CODE XREF: sub_1000FD40+49Cj
		push	0
		push	0
		push	51h
		push	esi
		call	ldap_set_lderrno
		push	0
		push	ebp
		push	esi
		call	sub_1000F6D0
		push	0
		push	0
		push	0
		push	0
		push	edi
		push	esi
		call	sub_1000F5E0
		add	esp, 24h
		jmp	loc_1001034C
; ---------------------------------------------------------------------------

loc_100103E4:				; CODE XREF: sub_1000FD40+41Fj
		test	ebx, ebx
		jnz	short loc_100103F8
		mov	ecx, [esp+24h+Memory]
		mov	eax, [ecx+54h]
		mov	[ecx+58h], eax
		mov	eax, [ecx+50h]
		mov	[ecx+54h], eax

loc_100103F8:				; CODE XREF: sub_1000FD40+6A6j
		test	dword ptr [esi+50h], 4000000h
		jz	short loc_10010408
		mov	dword ptr [edi+14h], 3

loc_10010408:				; CODE XREF: sub_1000FD40+6BFj
		push	dword ptr [edi]
		push	esi
		call	sub_1000C630
		jmp	loc_100101F4
; ---------------------------------------------------------------------------

loc_10010415:				; CODE XREF: sub_1000FD40+3F6j
					; sub_1000FD40+400j
		mov	dword ptr [ebp+4], 4
		push	dword ptr [edi]
		inc	dword ptr [edi+24h]
		push	esi
		call	sub_1000C780
		add	esp, 8
		cmp	dword ptr [edi+14h], 2
		jz	loc_100101F7
		push	dword ptr [edi]
		push	esi
		call	sub_1000C9F0
		add	esp, 8
		test	eax, eax
		jz	loc_100101F7
		push	edi
		push	esi
		call	sub_1000FC60
		add	esp, 8
		cmp	eax, 0FFFFFFFFh
		jnz	loc_100101F7
		jmp	loc_1001034C
; ---------------------------------------------------------------------------

loc_1001045F:				; CODE XREF: sub_1000FD40+535j
		push	dword ptr [eax+24h]
		mov	ecx, [esi+0C4h]
		call	ecx

loc_1001046A:				; CODE XREF: sub_1000FD40+57Aj
		add	esp, 4

loc_1001046D:				; CODE XREF: sub_1000FD40+4BEj
					; sub_1000FD40+519j ...
		push	0
		push	0
		push	0
		push	esi
		call	ldap_set_lderrno
		mov	eax, [esp+24h+arg_8]
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 14h
		retn
; ---------------------------------------------------------------------------

loc_10010485:				; CODE XREF: sub_1000FD40+27Dj
					; sub_1000FD40+289j ...
		push	1		; int
		push	[esp+28h+Memory] ; Memory
		call	ber_free
		test	edi, edi
		jz	short loc_100104A0
		push	0
		push	0
		push	51h
		push	esi
		call	ldap_set_lderrno

loc_100104A0:				; CODE XREF: sub_1000FD40+301j
					; sub_1000FD40+752j
		cmp	[esp+24h+var_10], 0
		jz	short loc_100104AA
		dec	dword ptr [ebx+8]

loc_100104AA:				; CODE XREF: sub_1000FD40+160j
					; sub_1000FD40+178j ...
		cmp	dword ptr [esi+0C0h], 0
		jz	short loc_10010501
		mov	eax, [esi+0DCh]
		test	eax, eax
		jz	short loc_10010501
		mov	ecx, [esi+13Ch]
		test	ecx, ecx
		jz	short loc_100104F3
		call	ecx
		cmp	[esi+164h], eax
		jnz	short loc_10010501
		dec	dword ptr [esi+19Ch]
		jnz	short loc_10010501
		mov	dword ptr [esi+164h], 0FFFFFFFFh
		mov	dword ptr [esi+19Ch], 0
		mov	eax, [esi+0DCh]

loc_100104F3:				; CODE XREF: sub_1000FD40+785j
		push	dword ptr [eax+24h]
		mov	eax, [esi+0C4h]
		call	eax
		add	esp, 4

loc_10010501:				; CODE XREF: sub_1000FD40+152j
					; sub_1000FD40+613j ...
		pop	edi
		pop	esi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		add	esp, 14h
		retn
sub_1000FD40	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10010510	proc near		; CODE XREF: sub_1000EC30+13Dp
					; sub_1000F280+1A8p

var_14C		= dword	ptr -14Ch
var_148		= dword	ptr -148h
Memory		= dword	ptr -144h
var_140		= dword	ptr -140h
var_13C		= dword	ptr -13Ch
var_138		= dword	ptr -138h
var_134		= byte ptr -134h
Dst		= dword	ptr -130h
Src		= dword	ptr -0DCh
var_D8		= dword	ptr -0D8h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		sub	esp, 14Ch
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+14Ch+var_4], eax
		mov	eax, [esp+14Ch+arg_10]
		mov	ecx, 4Bh
		push	ebx
		mov	ebx, [esp+150h+arg_C]
		push	ebp
		mov	ebp, [esp+154h+arg_0]
		push	esi
		mov	esi, [esp+158h+arg_4]
		push	edi
		mov	[esp+15Ch+var_13C], eax
		lea	edi, [esp+15Ch+Dst]
		lea	eax, [esp+15Ch+var_140]
		mov	[esp+15Ch+var_148], 0FFFFFFFFh
		push	eax
		lea	eax, [esp+160h+var_134]
		push	eax
		lea	eax, [esp+164h+Dst]
		push	offset aIt	; "{it"
		rep movsd
		push	eax		; Dst
		call	ber_scanf
		add	esp, 10h
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_10010586

loc_1001057C:				; CODE XREF: sub_10010510+F6j
		mov	eax, 54h
		jmp	loc_10010770
; ---------------------------------------------------------------------------

loc_10010586:				; CODE XREF: sub_10010510+6Aj
		mov	eax, [esp+15Ch+var_140]
		cmp	eax, 63h
		jnz	short loc_100105BD
		cmp	dword ptr [ebx+14h], 0
		jz	short loc_1001059F
		mov	eax, 52h
		jmp	loc_10010770
; ---------------------------------------------------------------------------

loc_1001059F:				; CODE XREF: sub_10010510+83j
		lea	eax, [esp+15Ch+var_148]
		push	eax
		lea	eax, [esp+160h+var_14C]
		push	eax
		lea	eax, [esp+164h+Dst]
		push	offset aAe	; "{ae"
		push	eax		; Dst
		call	ber_scanf
		add	esp, 10h
		jmp	short loc_10010603
; ---------------------------------------------------------------------------

loc_100105BD:				; CODE XREF: sub_10010510+7Dj
		cmp	eax, 60h
		jnz	short loc_100105E0
		lea	eax, [esp+15Ch+var_14C]
		push	eax
		lea	eax, [esp+160h+var_138]
		push	eax
		lea	eax, [esp+164h+Dst]
		push	offset aIa_0	; "{ia"
		push	eax		; Dst
		call	ber_scanf
		add	esp, 10h
		jmp	short loc_10010603
; ---------------------------------------------------------------------------

loc_100105E0:				; CODE XREF: sub_10010510+B0j
		cmp	eax, 4Ah
		lea	eax, [esp+15Ch+var_14C]
		push	eax
		lea	eax, [esp+160h+Dst]
		jnz	short loc_100105F5
		push	offset aA_0	; "a"
		jmp	short loc_100105FA
; ---------------------------------------------------------------------------

loc_100105F5:				; CODE XREF: sub_10010510+DCj
		push	offset aA	; "{a"

loc_100105FA:				; CODE XREF: sub_10010510+E3j
		push	eax		; Dst
		call	ber_scanf
		add	esp, 0Ch

loc_10010603:				; CODE XREF: sub_10010510+ABj
					; sub_10010510+CEj
		cmp	eax, 0FFFFFFFFh
		jz	loc_1001057C
		mov	esi, [ebx+8]
		test	esi, esi
		jnz	short loc_10010619
		mov	esi, [esp+15Ch+var_14C]
		jmp	short loc_1001062D
; ---------------------------------------------------------------------------

loc_10010619:				; CODE XREF: sub_10010510+101j
		push	[esp+15Ch+var_14C]
		call	ldap_x_free
		add	esp, 4
		mov	[esp+15Ch+var_14C], 0

loc_1001062D:				; CODE XREF: sub_10010510+107j
		mov	eax, [ebx+10h]
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_1001064B
		cmp	[esp+15Ch+arg_14], 0
		jz	short loc_1001064F
		mov	eax, [esp+15Ch+var_148]
		xor	ecx, ecx
		cmp	eax, 1
		cmovz	eax, ecx

loc_1001064B:				; CODE XREF: sub_10010510+123j
		mov	[esp+15Ch+var_148], eax

loc_1001064F:				; CODE XREF: sub_10010510+12Dj
		lea	eax, [esp+15Ch+Memory]
		push	eax
		push	ebp
		call	sub_1000EF40
		mov	edi, eax
		add	esp, 8
		test	edi, edi
		jz	short loc_1001067B
		mov	ecx, [esp+15Ch+var_14C]
		test	ecx, ecx
		jz	short loc_10010674
		push	ecx
		call	ldap_x_free
		add	esp, 4

loc_10010674:				; CODE XREF: sub_10010510+159j
		mov	eax, edi
		jmp	loc_10010770
; ---------------------------------------------------------------------------

loc_1001067B:				; CODE XREF: sub_10010510+151j
		mov	eax, [esp+15Ch+var_140]
		cmp	eax, 60h
		jnz	short loc_100106A5
		push	esi
		push	[esp+160h+var_138]
		mov	esi, [esp+164h+Memory]
		push	eax
		push	[esp+168h+arg_8]
		push	offset aItIs	; "{it{is"
		push	esi
		call	ber_printf
		add	esp, 18h
		jmp	short loc_100106FB
; ---------------------------------------------------------------------------

loc_100106A5:				; CODE XREF: sub_10010510+172j
		cmp	eax, 4Ah
		jnz	short loc_100106BA
		push	esi
		push	eax
		push	[esp+164h+arg_8]
		push	offset aIts_0	; "{its}"
		jmp	short loc_100106EE
; ---------------------------------------------------------------------------

loc_100106BA:				; CODE XREF: sub_10010510+198j
		cmp	eax, 63h
		jnz	short loc_100106E0
		push	[esp+15Ch+var_148]
		push	esi
		mov	esi, [esp+164h+Memory]
		push	eax
		push	[esp+168h+arg_8]
		push	offset aItSe	; "{it{se"
		push	esi
		call	ber_printf
		add	esp, 18h
		jmp	short loc_100106FB
; ---------------------------------------------------------------------------

loc_100106E0:				; CODE XREF: sub_10010510+1ADj
		push	esi
		push	eax
		push	[esp+164h+arg_8]
		push	offset aItS_0	; "{it{s"

loc_100106EE:				; CODE XREF: sub_10010510+1A8j
		mov	esi, [esp+16Ch+Memory]
		push	esi
		call	ber_printf
		add	esp, 14h

loc_100106FB:				; CODE XREF: sub_10010510+193j
					; sub_10010510+1CEj
		mov	edi, eax
		mov	eax, [esp+15Ch+var_14C]
		test	eax, eax
		jz	short loc_1001070E
		push	eax
		call	ldap_x_free
		add	esp, 4

loc_1001070E:				; CODE XREF: sub_10010510+1F3j
		cmp	edi, 0FFFFFFFFh
		jnz	short loc_10010722

loc_10010713:				; CODE XREF: sub_10010510+243j
					; sub_10010510+256j
		push	1		; int
		push	esi		; Memory
		call	ber_free
		mov	eax, 53h
		jmp	short loc_10010770
; ---------------------------------------------------------------------------

loc_10010722:				; CODE XREF: sub_10010510+201j
		cmp	[esp+15Ch+var_140], 4Ah
		jz	short loc_10010768
		mov	eax, [esp+15Ch+var_D8]
		mov	ecx, [esp+15Ch+Src]
		sub	eax, ecx
		push	0		; int
		push	eax		; Size
		push	ecx		; Src
		push	esi		; int
		call	ber_write
		mov	ecx, [esp+15Ch+var_D8]
		sub	ecx, [esp+15Ch+Src]
		cmp	eax, ecx
		jnz	short loc_10010713
		push	offset asc_1001F1C8 ; "}}"
		push	esi
		call	ber_printf
		add	esp, 8
		cmp	eax, 0FFFFFFFFh
		jz	short loc_10010713

loc_10010768:				; CODE XREF: sub_10010510+217j
		mov	eax, [esp+15Ch+var_13C]
		mov	[eax], esi
		xor	eax, eax

loc_10010770:				; CODE XREF: sub_10010510+71j
					; sub_10010510+8Aj ...
		mov	ecx, [esp+15Ch+var_4]
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 14Ch
		retn
sub_10010510	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 581. ldap_add_result_entry

; =============== S U B	R O U T	I N E =======================================


		public ldap_add_result_entry
ldap_add_result_entry proc near		; DATA XREF: .rdata:off_10020938o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	ecx, [esp+arg_0]
		test	ecx, ecx
		jz	short locret_100107A7
		mov	edx, [esp+arg_4]
		test	edx, edx
		jz	short locret_100107A7
		mov	eax, [ecx]
		mov	[edx+0Ch], eax
		mov	[ecx], edx

locret_100107A7:			; CODE XREF: ldap_add_result_entry+6j
					; ldap_add_result_entry+Ej
		retn	8
ldap_add_result_entry endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 580. ldap_delete_result_entry

; =============== S U B	R O U T	I N E =======================================


		public ldap_delete_result_entry
ldap_delete_result_entry proc near	; DATA XREF: .rdata:off_10020938o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_0]
		xor	eax, eax
		test	esi, esi
		jz	short loc_100107DD
		mov	ecx, [esp+4+arg_4]
		test	ecx, ecx
		jz	short loc_100107DD
		mov	edx, [esi]
		test	edx, edx
		jz	short loc_100107DD
		lea	esp, [esp+0]

loc_100107D0:				; CODE XREF: ldap_delete_result_entry+2Bj
		cmp	edx, ecx
		jz	short loc_100107E3
		mov	eax, edx
		mov	edx, [edx+0Ch]
		test	edx, edx
		jnz	short loc_100107D0

loc_100107DD:				; CODE XREF: ldap_delete_result_entry+9j
					; ldap_delete_result_entry+11j	...
		xor	eax, eax
		pop	esi
		retn	8
; ---------------------------------------------------------------------------

loc_100107E3:				; CODE XREF: ldap_delete_result_entry+22j
		test	edx, edx
		jz	short loc_100107DD
		test	eax, eax
		jnz	short loc_100107FD
		mov	eax, [edx+0Ch]
		mov	[esi], eax
		mov	eax, edx
		mov	dword ptr [edx+0Ch], 0
		pop	esi
		retn	8
; ---------------------------------------------------------------------------

loc_100107FD:				; CODE XREF: ldap_delete_result_entry+39j
		mov	ecx, [edx+0Ch]
		mov	[eax+0Ch], ecx
		mov	eax, edx
		mov	dword ptr [edx+0Ch], 0
		pop	esi
		retn	8
ldap_delete_result_entry endp


; =============== S U B	R O U T	I N E =======================================


sub_10010810	proc near		; CODE XREF: sub_10011680+351p

Dst		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= byte ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 0Ch
		lea	eax, [esp+0Ch+Dst]
		push	eax
		push	[esp+10h+arg_0]
		call	sub_1000EF40
		add	esp, 8
		test	eax, eax
		jnz	loc_100108F8
		mov	eax, [esp+0Ch+arg_4]
		mov	edx, offset Src
		push	ebx
		mov	ebx, [esp+10h+arg_8]
		mov	ecx, edx
		push	esi
		mov	esi, [esp+14h+Dst]
		mov	[eax], esi
		mov	eax, [ebx+20h]
		test	eax, eax
		cmovnz	ecx, eax
		mov	eax, [ebx+24h]
		test	eax, eax
		push	ecx
		cmovnz	edx, eax
		mov	ecx, offset aItEss ; "{it{ess}}"
		cmp	dword ptr [ebx+48h], 0
		mov	eax, offset aItEss_0 ; "{it{ess}"
		push	edx
		push	dword ptr [ebx+1Ch]
		cmovz	eax, ecx
		push	dword ptr [ebx+14h]
		push	dword ptr [ebx]
		push	eax
		push	esi
		call	ber_printf
		add	esp, 1Ch
		cmp	eax, 0FFFFFFFFh
		jz	short loc_1001089A
		mov	eax, [ebx+48h]
		test	eax, eax
		jz	short loc_100108A5
		push	[esp+14h+Dst]
		push	1
		push	eax
		push	[esp+20h+arg_0]
		call	sub_10002DD0
		add	esp, 10h
		test	eax, eax
		jz	short loc_100108A5

loc_1001089A:				; CODE XREF: sub_10010810+6Aj
		pop	esi
		mov	eax, 53h
		pop	ebx
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_100108A5:				; CODE XREF: sub_10010810+71j
					; sub_10010810+88j
		push	1		; int
		push	[esp+18h+Dst]	; Dst
		call	ber_reset
		lea	eax, [esp+14h+var_8]
		push	eax		; int
		push	[esp+18h+Dst]	; Dst
		call	ber_skip_tag
		cmp	eax, 0FFFFFFFFh
		jz	short loc_100108F1
		lea	eax, [esp+14h+var_4]
		push	eax
		push	[esp+18h+Dst]
		call	ber_get_int
		cmp	eax, 0FFFFFFFFh
		jz	short loc_100108F1
		lea	eax, [esp+14h+var_8]
		push	eax
		push	[esp+18h+Dst]
		call	ber_peek_tag
		cmp	eax, 0FFFFFFFFh
		jz	short loc_100108F1
		pop	esi
		xor	eax, eax
		pop	ebx
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_100108F1:				; CODE XREF: sub_10010810+B1j
					; sub_10010810+C4j ...
		pop	esi
		mov	eax, 54h
		pop	ebx

loc_100108F8:				; CODE XREF: sub_10010810+15j
		add	esp, 0Ch
		retn
sub_10010810	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10010900	proc near		; CODE XREF: sub_10011680+1C1p

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		mov	eax, [esp+arg_14]
		sub	esp, 0Ch
		cmp	[esp+0Ch+arg_C], 2
		push	ebp
		mov	ebp, [esp+10h+arg_10]
		mov	dword ptr [ebp+0], 0
		mov	dword ptr [eax], 0
		jl	loc_10010A8B
		push	ebx
		mov	ebx, [esp+14h+arg_0]
		push	esi
		mov	esi, [esp+18h+arg_4]
		cmp	dword ptr [esi+34h], 0
		jnz	short loc_10010941
		test	dword ptr [ebx+50h], 80000000h
		jz	loc_10010A89

loc_10010941:				; CODE XREF: sub_10010900+32j
		mov	eax, [esi+14h]
		push	edi
		push	0
		cmp	eax, 73h
		jnz	short loc_10010979
		lea	eax, [esp+20h+var_C]
		push	eax
		push	[esp+24h+arg_8]
		push	ebx
		call	sub_1000DF10
		mov	ecx, 0Ah
		mov	[esp+2Ch+var_8], 0
		add	esp, 10h
		mov	[esp+1Ch+arg_10], ecx
		mov	[esp+1Ch+var_4], 0
		jmp	short loc_1001099F
; ---------------------------------------------------------------------------

loc_10010979:				; CODE XREF: sub_10010900+4Aj
		lea	ecx, [esp+20h+var_C]
		push	ecx
		lea	ecx, [esp+24h+var_8]
		push	ecx
		lea	ecx, [esp+28h+var_4]
		push	ecx
		lea	ecx, [esp+2Ch+arg_10]
		push	ecx
		push	[esp+30h+arg_8]
		push	eax
		push	ebx
		call	sub_10004BB0
		mov	ecx, [esp+3Ch+arg_10]
		add	esp, 20h

loc_1001099F:				; CODE XREF: sub_10010900+77j
		mov	edi, eax
		test	edi, edi
		jnz	loc_10010A88
		cmp	ecx, 0Ah
		jnz	short loc_100109DB
		mov	edx, [esp+1Ch+var_C]
		test	edx, edx
		jz	short loc_10010A00
		push	[esp+1Ch+arg_14]
		cmp	dword ptr [esi+14h], 73h
		push	ebp
		setz	al
		push	eax
		push	edx
		push	esi
		push	ebx
		call	sub_1000F280
		add	esp, 18h
		mov	edi, eax
		push	[esp+1Ch+var_C]
		call	ldap_value_free
		jmp	short loc_100109FC
; ---------------------------------------------------------------------------

loc_100109DB:				; CODE XREF: sub_10010900+ACj
		cmp	[esp+1Ch+arg_C], 2
		jnz	short loc_10010A00
		test	ecx, ecx
		jz	short loc_10010A00
		push	[esp+1Ch+arg_14]
		lea	eax, [esp+20h+var_8]
		push	ebp
		push	eax
		push	esi
		push	ebx
		call	sub_1000F130
		add	esp, 14h
		mov	edi, eax

loc_100109FC:				; CODE XREF: sub_10010900+D9j
		mov	ecx, [esp+1Ch+arg_10]

loc_10010A00:				; CODE XREF: sub_10010900+B4j
					; sub_10010900+E0j ...
		mov	eax, [esi+20h]
		test	eax, eax
		jz	short loc_10010A14
		push	eax
		call	ldap_x_free
		mov	ecx, [esp+20h+arg_10]
		add	esp, 4

loc_10010A14:				; CODE XREF: sub_10010900+105j
		mov	eax, [esp+1Ch+var_8]
		mov	[esi+20h], eax
		mov	eax, [esi+24h]
		test	eax, eax
		jz	short loc_10010A2F
		push	eax
		call	ldap_x_free
		mov	ecx, [esp+20h+arg_10]
		add	esp, 4

loc_10010A2F:				; CODE XREF: sub_10010900+120j
		mov	eax, [esp+1Ch+var_4]
		mov	[esi+24h], eax
		test	edi, edi
		jnz	short loc_10010A85
		mov	eax, [esp+1Ch+arg_14]
		mov	edx, [ebp+0]
		cmp	[eax], edx
		jnz	short loc_10010A6D
		test	edx, edx
		jle	short loc_10010A62
		cmp	ecx, 9
		jz	short loc_10010A53
		cmp	ecx, 0Ah
		jnz	short loc_10010A62

loc_10010A53:				; CODE XREF: sub_10010900+14Cj
		pop	edi
		mov	dword ptr [esi+1Ch], 0
		pop	esi
		pop	ebx
		pop	ebp
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_10010A62:				; CODE XREF: sub_10010900+147j
					; sub_10010900+151j
		pop	edi
		mov	[esi+1Ch], ecx
		pop	esi
		pop	ebx
		pop	ebp
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_10010A6D:				; CODE XREF: sub_10010900+143j
		xor	eax, eax
		cmp	[esp+1Ch+arg_C], 2
		pop	edi
		setnz	al
		add	eax, 9
		mov	[esi+1Ch], eax
		pop	esi
		pop	ebx
		pop	ebp
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_10010A85:				; CODE XREF: sub_10010900+138j
		mov	[esi+1Ch], edi

loc_10010A88:				; CODE XREF: sub_10010900+A3j
		pop	edi

loc_10010A89:				; CODE XREF: sub_10010900+3Bj
		pop	esi
		pop	ebx

loc_10010A8B:				; CODE XREF: sub_10010900+1Ej
		pop	ebp
		add	esp, 0Ch
		retn
sub_10010900	endp


; =============== S U B	R O U T	I N E =======================================


sub_10010A90	proc near		; CODE XREF: sub_100115C0+30p
					; sub_10011E90+7B7p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		mov	eax, [esp+arg_10]
		push	ebx
		push	ebp
		push	esi
		mov	esi, [esp+0Ch+arg_0]
		xor	ebx, ebx
		mov	dword ptr [eax], 0
		push	edi
		mov	eax, [esi+0C0h]
		test	eax, eax
		jz	short loc_10010B0A
		mov	ecx, [esi+0DCh]
		test	ecx, ecx
		jz	short loc_10010B0A
		mov	edx, [esi+13Ch]
		test	edx, edx
		jz	short loc_10010B02
		call	edx
		cmp	[esi+150h], eax
		jnz	short loc_10010AD4
		inc	dword ptr [esi+188h]
		jmp	short loc_10010B0A
; ---------------------------------------------------------------------------

loc_10010AD4:				; CODE XREF: sub_10010A90+3Aj
		mov	eax, [esi+0DCh]
		push	dword ptr [eax+10h]
		mov	eax, [esi+0C0h]
		call	eax
		mov	eax, [esi+13Ch]
		add	esp, 4
		call	eax
		mov	[esi+150h], eax
		mov	dword ptr [esi+188h], 1
		jmp	short loc_10010B0A
; ---------------------------------------------------------------------------

loc_10010B02:				; CODE XREF: sub_10010A90+30j
		push	dword ptr [ecx+10h]
		call	eax
		add	esp, 4

loc_10010B0A:				; CODE XREF: sub_10010A90+1Cj
					; sub_10010A90+26j ...
		mov	edi, [esi+38h]
		test	edi, edi
		jz	short loc_10010B67

loc_10010B11:				; CODE XREF: sub_10010A90+D5j
		cmp	[esp+10h+arg_C], 0
		mov	ebp, [edi+10h]
		jz	short loc_10010B52
		push	dword ptr [edi]
		push	esi
		call	sub_10010CE0
		add	esp, 8
		test	eax, eax
		jz	short loc_10010B52
		push	dword ptr [edi]
		push	esi
		call	sub_10010E90
		add	esp, 8
		test	ebx, ebx
		jnz	short loc_10010B47
		mov	eax, [edi+10h]
		push	edi
		mov	[esi+38h], eax
		call	ldap_msgfree
		jmp	short loc_10010B61
; ---------------------------------------------------------------------------

loc_10010B47:				; CODE XREF: sub_10010A90+A7j
		push	edi
		mov	[ebx+10h], ebp
		call	ldap_msgfree
		jmp	short loc_10010B61
; ---------------------------------------------------------------------------

loc_10010B52:				; CODE XREF: sub_10010A90+89j
					; sub_10010A90+98j
		mov	eax, [esp+10h+arg_4]
		cmp	eax, 0FFFFFFFFh
		jz	short loc_10010BC5
		cmp	[edi], eax
		jz	short loc_10010BC5
		mov	ebx, edi

loc_10010B61:				; CODE XREF: sub_10010A90+B5j
					; sub_10010A90+C0j
		mov	edi, ebp
		test	ebp, ebp
		jnz	short loc_10010B11

loc_10010B67:				; CODE XREF: sub_10010A90+7Fj
					; sub_10010A90+15Ej ...
		cmp	dword ptr [esi+0C0h], 0
		jz	short loc_10010BBE
		mov	eax, [esi+0DCh]
		test	eax, eax
		jz	short loc_10010BBE
		mov	ecx, [esi+13Ch]
		test	ecx, ecx
		jz	short loc_10010BB0
		call	ecx
		cmp	[esi+150h], eax
		jnz	short loc_10010BBE
		dec	dword ptr [esi+188h]
		jnz	short loc_10010BBE
		mov	dword ptr [esi+150h], 0FFFFFFFFh
		mov	dword ptr [esi+188h], 0
		mov	eax, [esi+0DCh]

loc_10010BB0:				; CODE XREF: sub_10010A90+F2j
		push	dword ptr [eax+10h]
		mov	eax, [esi+0C4h]
		call	eax
		add	esp, 4

loc_10010BBE:				; CODE XREF: sub_10010A90+DEj
					; sub_10010A90+E8j ...
		pop	edi
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_10010BC5:				; CODE XREF: sub_10010A90+C9j
					; sub_10010A90+CDj
		mov	ebp, [esp+10h+arg_8]
		test	ebp, ebp
		jz	short loc_10010BF3
		mov	eax, [edi+4]
		cmp	eax, 65h
		jz	short loc_10010BDF
		cmp	eax, 73h
		jz	short loc_10010BDF
		cmp	eax, 64h
		jnz	short loc_10010BF3

loc_10010BDF:				; CODE XREF: sub_10010A90+143j
					; sub_10010A90+148j
		mov	eax, edi

loc_10010BE1:				; CODE XREF: sub_10010A90+15Cj
		cmp	dword ptr [eax+4], 65h
		jz	short loc_10010BF3
		mov	eax, [eax+0Ch]
		test	eax, eax
		jnz	short loc_10010BE1
		jmp	loc_10010B67
; ---------------------------------------------------------------------------

loc_10010BF3:				; CODE XREF: sub_10010A90+13Bj
					; sub_10010A90+14Dj ...
		push	dword ptr [edi]
		push	esi
		call	sub_1000F5C0
		add	esp, 8
		test	eax, eax
		jz	short loc_10010C0C
		cmp	dword ptr [eax+8], 0
		jg	loc_10010B67

loc_10010C0C:				; CODE XREF: sub_10010A90+170j
		test	ebp, ebp
		jnz	short loc_10010C56
		mov	ecx, [edi+0Ch]
		test	ecx, ecx
		jnz	short loc_10010C32
		mov	eax, [edi+10h]
		test	ebx, ebx
		jnz	short loc_10010C26
		mov	[esi+38h], eax
		mov	[edi+0Ch], ebx
		jmp	short loc_10010C65
; ---------------------------------------------------------------------------

loc_10010C26:				; CODE XREF: sub_10010A90+18Cj
		mov	[ebx+10h], eax
		mov	dword ptr [edi+0Ch], 0
		jmp	short loc_10010C65
; ---------------------------------------------------------------------------

loc_10010C32:				; CODE XREF: sub_10010A90+185j
		test	ebx, ebx
		jnz	short loc_10010C44
		mov	[esi+38h], ecx
		mov	eax, [edi+10h]
		mov	[ecx+10h], eax
		mov	[edi+0Ch], ebx
		jmp	short loc_10010C65
; ---------------------------------------------------------------------------

loc_10010C44:				; CODE XREF: sub_10010A90+1A4j
		mov	[ebx+10h], ecx
		mov	eax, [edi+10h]
		mov	[ecx+10h], eax
		mov	dword ptr [edi+0Ch], 0
		jmp	short loc_10010C65
; ---------------------------------------------------------------------------

loc_10010C56:				; CODE XREF: sub_10010A90+17Ej
		mov	eax, [edi+10h]
		test	ebx, ebx
		jnz	short loc_10010C62
		mov	[esi+38h], eax
		jmp	short loc_10010C65
; ---------------------------------------------------------------------------

loc_10010C62:				; CODE XREF: sub_10010A90+1CBj
		mov	[ebx+10h], eax

loc_10010C65:				; CODE XREF: sub_10010A90+194j
					; sub_10010A90+1A0j ...
		mov	dword ptr [edi+10h], 0
		cmp	dword ptr [esi+0C0h], 0
		jz	short loc_10010CC3
		mov	eax, [esi+0DCh]
		test	eax, eax
		jz	short loc_10010CC3
		mov	ecx, [esi+13Ch]
		test	ecx, ecx
		jz	short loc_10010CB5
		call	ecx
		cmp	[esi+150h], eax
		jnz	short loc_10010CC3
		dec	dword ptr [esi+188h]
		jnz	short loc_10010CC3
		mov	dword ptr [esi+150h], 0FFFFFFFFh
		mov	dword ptr [esi+188h], 0
		mov	eax, [esi+0DCh]

loc_10010CB5:				; CODE XREF: sub_10010A90+1F7j
		push	dword ptr [eax+10h]
		mov	eax, [esi+0C4h]
		call	eax
		add	esp, 4

loc_10010CC3:				; CODE XREF: sub_10010A90+1E3j
					; sub_10010A90+1EDj ...
		mov	eax, [esp+10h+arg_10]
		mov	[eax], edi
		mov	eax, 1
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
sub_10010A90	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10010CE0	proc near		; CODE XREF: sub_10010A90+8Ep
					; sub_10011680+FFp

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_0]
		mov	eax, [esi+0C0h]
		test	eax, eax
		jz	short loc_10010D4B
		mov	ecx, [esi+0DCh]
		test	ecx, ecx
		jz	short loc_10010D4B
		mov	edx, [esi+13Ch]
		test	edx, edx
		jz	short loc_10010D43
		call	edx
		cmp	[esi+154h], eax
		jnz	short loc_10010D15
		inc	dword ptr [esi+18Ch]
		jmp	short loc_10010D4B
; ---------------------------------------------------------------------------

loc_10010D15:				; CODE XREF: sub_10010CE0+2Bj
		mov	eax, [esi+0DCh]
		push	dword ptr [eax+14h]
		mov	eax, [esi+0C0h]
		call	eax
		mov	eax, [esi+13Ch]
		add	esp, 4
		call	eax
		mov	[esi+154h], eax
		mov	dword ptr [esi+18Ch], 1
		jmp	short loc_10010D4B
; ---------------------------------------------------------------------------

loc_10010D43:				; CODE XREF: sub_10010CE0+21j
		push	dword ptr [ecx+14h]
		call	eax
		add	esp, 4

loc_10010D4B:				; CODE XREF: sub_10010CE0+Dj
					; sub_10010CE0+17j ...
		mov	edx, [esi+3Ch]
		test	edx, edx
		jnz	short loc_10010DAC
		cmp	[esi+0C0h], edx
		jz	short loc_10010DA8
		mov	eax, [esi+0DCh]
		test	eax, eax
		jz	short loc_10010DA8
		mov	ecx, [esi+13Ch]
		test	ecx, ecx
		jz	short loc_10010D9A
		call	ecx
		cmp	[esi+154h], eax
		jnz	short loc_10010DA8
		dec	dword ptr [esi+18Ch]
		jnz	short loc_10010DA8
		mov	dword ptr [esi+154h], 0FFFFFFFFh
		mov	dword ptr [esi+18Ch], 0
		mov	eax, [esi+0DCh]

loc_10010D9A:				; CODE XREF: sub_10010CE0+8Cj
		push	dword ptr [eax+14h]
		mov	eax, [esi+0C4h]
		call	eax
		add	esp, 4

loc_10010DA8:				; CODE XREF: sub_10010CE0+78j
					; sub_10010CE0+82j ...
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10010DAC:				; CODE XREF: sub_10010CE0+70j
		mov	eax, [edx]
		xor	ecx, ecx
		push	edi
		cmp	eax, 0FFFFFFFFh
		jz	short loc_10010DCE
		mov	edi, [esp+8+arg_4]
		lea	ebx, [ebx+0]

loc_10010DC0:				; CODE XREF: sub_10010CE0+ECj
		cmp	eax, edi
		jz	short loc_10010E2A
		mov	eax, [edx+ecx*4+4]
		inc	ecx
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_10010DC0

loc_10010DCE:				; CODE XREF: sub_10010CE0+D4j
		cmp	dword ptr [esi+0C0h], 0
		jz	short loc_10010E25
		mov	eax, [esi+0DCh]
		test	eax, eax
		jz	short loc_10010E25
		mov	ecx, [esi+13Ch]
		test	ecx, ecx
		jz	short loc_10010E17
		call	ecx
		cmp	[esi+154h], eax
		jnz	short loc_10010E25
		dec	dword ptr [esi+18Ch]
		jnz	short loc_10010E25
		mov	dword ptr [esi+154h], 0FFFFFFFFh
		mov	dword ptr [esi+18Ch], 0
		mov	eax, [esi+0DCh]

loc_10010E17:				; CODE XREF: sub_10010CE0+109j
		push	dword ptr [eax+14h]
		mov	eax, [esi+0C4h]
		call	eax
		add	esp, 4

loc_10010E25:				; CODE XREF: sub_10010CE0+F5j
					; sub_10010CE0+FFj ...
		pop	edi
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10010E2A:				; CODE XREF: sub_10010CE0+E2j
		cmp	dword ptr [esi+0C0h], 0
		jz	short loc_10010E81
		mov	eax, [esi+0DCh]
		test	eax, eax
		jz	short loc_10010E81
		mov	ecx, [esi+13Ch]
		test	ecx, ecx
		jz	short loc_10010E73
		call	ecx
		cmp	[esi+154h], eax
		jnz	short loc_10010E81
		dec	dword ptr [esi+18Ch]
		jnz	short loc_10010E81
		mov	dword ptr [esi+154h], 0FFFFFFFFh
		mov	dword ptr [esi+18Ch], 0
		mov	eax, [esi+0DCh]

loc_10010E73:				; CODE XREF: sub_10010CE0+165j
		push	dword ptr [eax+14h]
		mov	eax, [esi+0C4h]
		call	eax
		add	esp, 4

loc_10010E81:				; CODE XREF: sub_10010CE0+151j
					; sub_10010CE0+15Bj ...
		pop	edi
		mov	eax, 1
		pop	esi
		retn
sub_10010CE0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10010E90	proc near		; CODE XREF: sub_10010A90+9Dp

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_0]
		mov	eax, [esi+0C0h]
		test	eax, eax
		jz	short loc_10010EFB
		mov	ecx, [esi+0DCh]
		test	ecx, ecx
		jz	short loc_10010EFB
		mov	edx, [esi+13Ch]
		test	edx, edx
		jz	short loc_10010EF3
		call	edx
		cmp	[esi+154h], eax
		jnz	short loc_10010EC5
		inc	dword ptr [esi+18Ch]
		jmp	short loc_10010EFB
; ---------------------------------------------------------------------------

loc_10010EC5:				; CODE XREF: sub_10010E90+2Bj
		mov	eax, [esi+0DCh]
		push	dword ptr [eax+14h]
		mov	eax, [esi+0C0h]
		call	eax
		mov	eax, [esi+13Ch]
		add	esp, 4
		call	eax
		mov	[esi+154h], eax
		mov	dword ptr [esi+18Ch], 1
		jmp	short loc_10010EFB
; ---------------------------------------------------------------------------

loc_10010EF3:				; CODE XREF: sub_10010E90+21j
		push	dword ptr [ecx+14h]
		call	eax
		add	esp, 4

loc_10010EFB:				; CODE XREF: sub_10010E90+Dj
					; sub_10010E90+17j ...
		mov	ecx, [esi+3Ch]
		test	ecx, ecx
		jnz	short loc_10010F5D
		cmp	[esi+0C0h], ecx
		jz	short loc_10010F58
		mov	eax, [esi+0DCh]
		test	eax, eax
		jz	short loc_10010F58
		mov	ecx, [esi+13Ch]
		test	ecx, ecx
		jz	short loc_10010F4A
		call	ecx
		cmp	[esi+154h], eax
		jnz	short loc_10010F58
		dec	dword ptr [esi+18Ch]
		jnz	short loc_10010F58
		mov	dword ptr [esi+154h], 0FFFFFFFFh
		mov	dword ptr [esi+18Ch], 0
		mov	eax, [esi+0DCh]

loc_10010F4A:				; CODE XREF: sub_10010E90+8Cj
		push	dword ptr [eax+14h]
		mov	eax, [esi+0C4h]
		call	eax
		add	esp, 4

loc_10010F58:				; CODE XREF: sub_10010E90+78j
					; sub_10010E90+82j ...
		or	eax, 0FFFFFFFFh
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10010F5D:				; CODE XREF: sub_10010E90+70j
		mov	eax, [ecx]
		xor	edx, edx
		push	edi
		cmp	eax, 0FFFFFFFFh
		jz	short loc_10010F7E
		mov	edi, [esp+8+arg_4]
		jmp	short loc_10010F70
; ---------------------------------------------------------------------------
		align 10h

loc_10010F70:				; CODE XREF: sub_10010E90+DBj
					; sub_10010E90+ECj
		cmp	eax, edi
		jz	short loc_10010F7E
		mov	eax, [ecx+edx*4+4]
		inc	edx
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_10010F70

loc_10010F7E:				; CODE XREF: sub_10010E90+D5j
					; sub_10010E90+E2j
		lea	edi, ds:0[edx*4]
		cmp	dword ptr [edi+ecx], 0FFFFFFFFh
		jnz	short loc_10010FF0
		cmp	dword ptr [esi+0C0h], 0
		jz	short loc_10010FE2
		mov	eax, [esi+0DCh]
		test	eax, eax
		jz	short loc_10010FE2
		mov	ecx, [esi+13Ch]
		test	ecx, ecx
		jz	short loc_10010FD4
		call	ecx
		cmp	[esi+154h], eax
		jnz	short loc_10010FE2
		dec	dword ptr [esi+18Ch]
		jnz	short loc_10010FE2
		mov	dword ptr [esi+154h], 0FFFFFFFFh
		mov	dword ptr [esi+18Ch], 0
		mov	eax, [esi+0DCh]

loc_10010FD4:				; CODE XREF: sub_10010E90+116j
		push	dword ptr [eax+14h]
		mov	eax, [esi+0C4h]
		call	eax
		add	esp, 4

loc_10010FE2:				; CODE XREF: sub_10010E90+102j
					; sub_10010E90+10Cj ...
		pop	edi
		or	eax, 0FFFFFFFFh
		pop	esi
		retn
; ---------------------------------------------------------------------------
		jmp	short loc_10010FF0
; ---------------------------------------------------------------------------
		align 10h

loc_10010FF0:				; CODE XREF: sub_10010E90+F9j
					; sub_10010E90+158j ...
		mov	ecx, [esi+3Ch]
		lea	edx, [edx+1]
		mov	eax, [ecx+edi+4]
		mov	[ecx+edi], eax
		lea	edi, ds:0[edx*4]
		mov	eax, [esi+3Ch]
		cmp	dword ptr [edi+eax], 0FFFFFFFFh
		jnz	short loc_10010FF0
		cmp	dword ptr [esi+0C0h], 0
		jz	short loc_10011064
		mov	eax, [esi+0DCh]
		test	eax, eax
		jz	short loc_10011064
		mov	ecx, [esi+13Ch]
		test	ecx, ecx
		jz	short loc_10011056
		call	ecx
		cmp	[esi+154h], eax
		jnz	short loc_10011064
		dec	dword ptr [esi+18Ch]
		jnz	short loc_10011064
		mov	dword ptr [esi+154h], 0FFFFFFFFh
		mov	dword ptr [esi+18Ch], 0
		mov	eax, [esi+0DCh]

loc_10011056:				; CODE XREF: sub_10010E90+198j
		push	dword ptr [eax+14h]
		mov	eax, [esi+0C4h]
		call	eax
		add	esp, 4

loc_10011064:				; CODE XREF: sub_10010E90+184j
					; sub_10010E90+18Ej ...
		pop	edi
		xor	eax, eax
		pop	esi
		retn
sub_10010E90	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10011070	proc near		; CODE XREF: sub_10001000+7Dp

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_0]
		test	esi, esi
		jnz	short loc_1001107E
		or	eax, 0FFFFFFFFh
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1001107E:				; CODE XREF: sub_10011070+7j
		mov	eax, [esi+0C0h]
		push	ebx
		xor	ebx, ebx
		test	eax, eax
		jz	short loc_100110E7
		mov	ecx, [esi+0DCh]
		test	ecx, ecx
		jz	short loc_100110E7
		mov	edx, [esi+13Ch]
		test	edx, edx
		jz	short loc_100110DF
		call	edx
		cmp	[esi+150h], eax
		jnz	short loc_100110B1
		inc	dword ptr [esi+188h]
		jmp	short loc_100110E7
; ---------------------------------------------------------------------------

loc_100110B1:				; CODE XREF: sub_10011070+37j
		mov	eax, [esi+0DCh]
		push	dword ptr [eax+10h]
		mov	eax, [esi+0C0h]
		call	eax
		mov	eax, [esi+13Ch]
		add	esp, 4
		call	eax
		mov	[esi+150h], eax
		mov	dword ptr [esi+188h], 1
		jmp	short loc_100110E7
; ---------------------------------------------------------------------------

loc_100110DF:				; CODE XREF: sub_10011070+2Dj
		push	dword ptr [ecx+10h]
		call	eax
		add	esp, 4

loc_100110E7:				; CODE XREF: sub_10011070+19j
					; sub_10011070+23j ...
		push	edi
		mov	edi, [esi+38h]
		test	edi, edi
		jz	short loc_10011100
		mov	eax, [esp+0Ch+arg_4]

loc_100110F3:				; CODE XREF: sub_10011070+8Ej
		cmp	[edi], eax
		jz	short loc_1001115E
		mov	ebx, edi
		mov	edi, [edi+10h]
		test	edi, edi
		jnz	short loc_100110F3

loc_10011100:				; CODE XREF: sub_10011070+7Dj
		cmp	dword ptr [esi+0C0h], 0
		jz	short loc_10011157
		mov	eax, [esi+0DCh]
		test	eax, eax
		jz	short loc_10011157
		mov	ecx, [esi+13Ch]
		test	ecx, ecx
		jz	short loc_10011149
		call	ecx
		cmp	[esi+150h], eax
		jnz	short loc_10011157
		dec	dword ptr [esi+188h]
		jnz	short loc_10011157
		mov	dword ptr [esi+150h], 0FFFFFFFFh
		mov	dword ptr [esi+188h], 0
		mov	eax, [esi+0DCh]

loc_10011149:				; CODE XREF: sub_10011070+ABj
		push	dword ptr [eax+10h]
		mov	eax, [esi+0C4h]
		call	eax
		add	esp, 4

loc_10011157:				; CODE XREF: sub_10011070+97j
					; sub_10011070+A1j ...
		pop	edi
		pop	ebx
		or	eax, 0FFFFFFFFh
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1001115E:				; CODE XREF: sub_10011070+85j
		mov	eax, [edi+10h]
		test	ebx, ebx
		jnz	short loc_1001116A
		mov	[esi+38h], eax
		jmp	short loc_1001116D
; ---------------------------------------------------------------------------

loc_1001116A:				; CODE XREF: sub_10011070+F3j
		mov	[ebx+10h], eax

loc_1001116D:				; CODE XREF: sub_10011070+F8j
		cmp	dword ptr [esi+0C0h], 0
		jz	short loc_100111C4
		mov	eax, [esi+0DCh]
		test	eax, eax
		jz	short loc_100111C4
		mov	ecx, [esi+13Ch]
		test	ecx, ecx
		jz	short loc_100111B6
		call	ecx
		cmp	[esi+150h], eax
		jnz	short loc_100111C4
		dec	dword ptr [esi+188h]
		jnz	short loc_100111C4
		mov	dword ptr [esi+150h], 0FFFFFFFFh
		mov	dword ptr [esi+188h], 0
		mov	eax, [esi+0DCh]

loc_100111B6:				; CODE XREF: sub_10011070+118j
		push	dword ptr [eax+10h]
		mov	eax, [esi+0C4h]
		call	eax
		add	esp, 4

loc_100111C4:				; CODE XREF: sub_10011070+104j
					; sub_10011070+10Ej ...
		mov	esi, [edi+0Ch]
		mov	ebx, [edi+4]
		push	1		; int
		push	dword ptr [edi+8] ; Memory
		call	ber_free
		push	edi
		call	ldap_x_free
		add	esp, 4
		mov	edi, esi
		test	esi, esi
		jnz	short loc_100111C4
		cmp	ebx, 64h
		jz	loc_10011157
		cmp	ebx, 73h
		jz	loc_10011157
		pop	edi
		pop	ebx
		xor	eax, eax
		pop	esi
		retn
sub_10011070	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  41. ldap_msgfree

; =============== S U B	R O U T	I N E =======================================


		public ldap_msgfree
ldap_msgfree	proc near		; CODE XREF: ldap_parse_result+F9p
					; ldap_extended_operation_s+6Bp ...

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		test	esi, esi
		jz	short loc_10011237
		push	ebx
		push	edi
		jmp	short loc_10011210
; ---------------------------------------------------------------------------
		align 10h

loc_10011210:				; CODE XREF: ldap_msgfree+Bj
					; ldap_msgfree+2Dj
		mov	edi, [esi+0Ch]
		mov	ebx, [esi+4]
		push	1		; int
		push	dword ptr [esi+8] ; Memory
		call	ber_free
		push	esi
		call	ldap_x_free
		add	esp, 4
		mov	esi, edi
		test	edi, edi
		jnz	short loc_10011210
		pop	edi
		mov	eax, ebx
		pop	ebx
		pop	esi
		retn	4
; ---------------------------------------------------------------------------

loc_10011237:				; CODE XREF: ldap_msgfree+7j
		xor	eax, eax
		pop	esi
		retn	4
ldap_msgfree	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  40. ldap_result

; =============== S U B	R O U T	I N E =======================================


		public ldap_result
ldap_result	proc near		; CODE XREF: ldap_add_ext_s+33p
					; ldap_add_s+2Fp ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	esi
		mov	esi, [esp+4+arg_0]
		test	esi, esi
		jnz	short loc_10011250
		or	eax, 0FFFFFFFFh
		pop	esi
		retn	14h
; ---------------------------------------------------------------------------

loc_10011250:				; CODE XREF: ldap_result+7j
		mov	eax, [esi+0C0h]
		test	eax, eax
		jz	short loc_100112B6
		mov	ecx, [esi+0DCh]
		test	ecx, ecx
		jz	short loc_100112B6
		mov	edx, [esi+13Ch]
		test	edx, edx
		jz	short loc_100112AE
		call	edx
		cmp	[esi+16Ch], eax
		jnz	short loc_10011280
		inc	dword ptr [esi+1A4h]
		jmp	short loc_100112B6
; ---------------------------------------------------------------------------

loc_10011280:				; CODE XREF: ldap_result+36j
		mov	eax, [esi+0DCh]
		push	dword ptr [eax+2Ch]
		mov	eax, [esi+0C0h]
		call	eax
		mov	eax, [esi+13Ch]
		add	esp, 4
		call	eax
		mov	[esi+16Ch], eax
		mov	dword ptr [esi+1A4h], 1
		jmp	short loc_100112B6
; ---------------------------------------------------------------------------

loc_100112AE:				; CODE XREF: ldap_result+2Cj
		push	dword ptr [ecx+2Ch]
		call	eax
		add	esp, 4

loc_100112B6:				; CODE XREF: ldap_result+18j
					; ldap_result+22j ...
		push	edi
		push	[esp+8+arg_10]
		push	[esp+0Ch+arg_C]
		push	1
		push	[esp+14h+arg_8]
		push	[esp+18h+arg_4]
		push	esi
		call	sub_100115C0
		add	esp, 18h
		mov	edi, eax
		cmp	dword ptr [esi+0C0h], 0
		jz	short loc_10011340
		mov	ecx, [esi+0DCh]
		test	ecx, ecx
		jz	short loc_10011340
		mov	edx, [esi+13Ch]
		test	edx, edx
		jz	short loc_10011332
		call	edx
		cmp	[esi+16Ch], eax
		jnz	short loc_10011340
		dec	dword ptr [esi+1A4h]
		jnz	short loc_10011340
		mov	dword ptr [esi+16Ch], 0FFFFFFFFh
		mov	dword ptr [esi+1A4h], 0
		mov	eax, [esi+0DCh]
		push	dword ptr [eax+2Ch]
		mov	eax, [esi+0C4h]
		call	eax
		add	esp, 4
		mov	eax, edi
		pop	edi
		pop	esi
		retn	14h
; ---------------------------------------------------------------------------

loc_10011332:				; CODE XREF: ldap_result+AFj
		push	dword ptr [ecx+2Ch]
		mov	eax, [esi+0C4h]
		call	eax
		add	esp, 4

loc_10011340:				; CODE XREF: ldap_result+9Bj
					; ldap_result+A5j ...
		mov	eax, edi
		pop	edi
		pop	esi
		retn	14h
ldap_result	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10011350	proc near		; CODE XREF: sub_10011680+2B3p

arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi
		mov	esi, [esp+4+arg_8]
		mov	eax, [esi+1Ch]
		cmp	eax, 9
		jnz	short loc_10011380
		mov	eax, [esp+4+arg_4]
		mov	dword ptr [eax+1Ch], 9
		mov	ecx, [esi+20h]
		test	ecx, ecx
		jz	short loc_100113D6
		pop	esi
		mov	[esp+arg_8], ecx
		add	eax, 20h
		mov	[esp+arg_4], eax
		jmp	sub_1000F040
; ---------------------------------------------------------------------------

loc_10011380:				; CODE XREF: sub_10011350+Bj
		test	eax, eax
		jz	short loc_100113D6
		push	edi
		mov	edi, [esp+8+arg_4]
		cmp	dword ptr [edi+1Ch], 0
		jnz	short loc_100113D5
		mov	[edi+1Ch], eax
		mov	eax, [edi+20h]
		test	eax, eax
		jz	short loc_100113A2
		push	eax
		call	ldap_x_free
		add	esp, 4

loc_100113A2:				; CODE XREF: sub_10011350+47j
		mov	eax, [esi+20h]
		mov	[edi+20h], eax
		mov	eax, [esi+1Ch]
		and	al, 0F0h
		mov	dword ptr [esi+20h], 0
		cmp	al, 20h
		jnz	short loc_100113D5
		mov	eax, [edi+24h]
		test	eax, eax
		jz	short loc_100113C8
		push	eax
		call	ldap_x_free
		add	esp, 4

loc_100113C8:				; CODE XREF: sub_10011350+6Dj
		mov	eax, [esi+24h]
		mov	[edi+24h], eax
		mov	dword ptr [esi+24h], 0

loc_100113D5:				; CODE XREF: sub_10011350+3Dj
					; sub_10011350+66j
		pop	edi

loc_100113D6:				; CODE XREF: sub_10011350+1Dj
					; sub_10011350+32j
		pop	esi
		retn
sub_10011350	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100113E0	proc near		; CODE XREF: sub_10011680+7ECp

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		push	ebp
		push	esi
		push	edi
		mov	edi, [esp+10h+arg_0]
		mov	eax, [edi+0C0h]
		test	eax, eax
		jz	short loc_1001144E
		mov	ecx, [edi+0DCh]
		test	ecx, ecx
		jz	short loc_1001144E
		mov	edx, [edi+13Ch]
		test	edx, edx
		jz	short loc_10011446
		call	edx
		cmp	[edi+170h], eax
		jnz	short loc_10011418
		inc	dword ptr [edi+1A8h]
		jmp	short loc_1001144E
; ---------------------------------------------------------------------------

loc_10011418:				; CODE XREF: sub_100113E0+2Ej
		mov	eax, [edi+0DCh]
		push	dword ptr [eax+30h]
		mov	eax, [edi+0C0h]
		call	eax
		mov	eax, [edi+13Ch]
		add	esp, 4
		call	eax
		mov	[edi+170h], eax
		mov	dword ptr [edi+1A8h], 1
		jmp	short loc_1001144E
; ---------------------------------------------------------------------------

loc_10011446:				; CODE XREF: sub_100113E0+24j
		push	dword ptr [ecx+30h]
		call	eax
		add	esp, 4

loc_1001144E:				; CODE XREF: sub_100113E0+10j
					; sub_100113E0+1Aj ...
		mov	ebx, [esp+10h+arg_4]
		mov	ebp, [esp+10h+arg_8]
		mov	esi, [edi+124h]
		cmp	ebx, 0FFFFFFFFh
		jnz	short loc_10011485
		test	esi, esi
		jz	loc_10011558
		lea	esp, [esp+0]

loc_10011470:				; CODE XREF: sub_100113E0+9Ej
		cmp	dword ptr [esi], 0
		jnz	loc_1001153D
		mov	esi, [esi+10h]
		test	esi, esi
		jnz	short loc_10011470
		jmp	loc_10011558
; ---------------------------------------------------------------------------

loc_10011485:				; CODE XREF: sub_100113E0+7Fj
		test	esi, esi
		jz	short loc_100114A0
		lea	esp, [esp+0]

loc_10011490:				; CODE XREF: sub_100113E0+BEj
		cmp	[esi+4], ebx
		jz	loc_10011541
		mov	esi, [esi+10h]
		test	esi, esi
		jnz	short loc_10011490

loc_100114A0:				; CODE XREF: sub_100113E0+A7j
		push	14h
		push	1
		call	ldap_x_calloc
		add	esp, 8
		test	eax, eax
		jnz	short loc_1001151A
		cmp	[edi+0C0h], eax
		jz	short loc_10011506
		mov	eax, [edi+0DCh]
		test	eax, eax
		jz	short loc_10011506
		mov	ecx, [edi+13Ch]
		test	ecx, ecx
		jz	short loc_100114F8
		call	ecx
		cmp	[edi+170h], eax
		jnz	short loc_10011506
		dec	dword ptr [edi+1A8h]
		jnz	short loc_10011506
		mov	dword ptr [edi+170h], 0FFFFFFFFh
		mov	dword ptr [edi+1A8h], 0
		mov	eax, [edi+0DCh]

loc_100114F8:				; CODE XREF: sub_100113E0+EAj
		push	dword ptr [eax+30h]
		mov	eax, [edi+0C4h]
		call	eax
		add	esp, 4

loc_10011506:				; CODE XREF: sub_100113E0+D6j
					; sub_100113E0+E0j ...
		push	0
		push	0
		push	5Ah
		push	edi
		call	ldap_set_lderrno
		pop	edi
		pop	esi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1001151A:				; CODE XREF: sub_100113E0+CEj
		mov	[eax+4], ebx
		mov	[eax+8], ebp
		mov	ecx, [edi+124h]
		mov	[eax+10h], ecx
		test	ecx, ecx
		jz	short loc_10011530
		mov	[ecx+0Ch], eax

loc_10011530:				; CODE XREF: sub_100113E0+14Bj
		mov	[edi+124h], eax
		mov	dword ptr [eax+0Ch], 0

loc_1001153D:				; CODE XREF: sub_100113E0+93j
		test	esi, esi
		jz	short loc_10011558

loc_10011541:				; CODE XREF: sub_100113E0+B3j
		mov	[esi+4], ebx
		mov	[esi+8], ebp
		mov	eax, [edi+138h]
		test	eax, eax
		jz	short loc_10011558
		push	dword ptr [esi]
		call	eax
		add	esp, 4

loc_10011558:				; CODE XREF: sub_100113E0+83j
					; sub_100113E0+A0j ...
		cmp	dword ptr [edi+0C0h], 0
		jz	short loc_100115AF
		mov	eax, [edi+0DCh]
		test	eax, eax
		jz	short loc_100115AF
		mov	ecx, [edi+13Ch]
		test	ecx, ecx
		jz	short loc_100115A1
		call	ecx
		cmp	[edi+170h], eax
		jnz	short loc_100115AF
		dec	dword ptr [edi+1A8h]
		jnz	short loc_100115AF
		mov	dword ptr [edi+170h], 0FFFFFFFFh
		mov	dword ptr [edi+1A8h], 0
		mov	eax, [edi+0DCh]

loc_100115A1:				; CODE XREF: sub_100113E0+193j
		push	dword ptr [eax+30h]
		mov	eax, [edi+0C4h]
		call	eax
		add	esp, 4

loc_100115AF:				; CODE XREF: sub_100113E0+17Fj
					; sub_100113E0+189j ...
		pop	edi
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		retn
sub_100113E0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100115C0	proc near		; CODE XREF: sub_1000FD40+44Ep
					; ldap_result+8Ap

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		push	esi
		mov	esi, [esp+4+arg_14]
		test	esi, esi
		jnz	short loc_100115DB
		push	esi
		push	esi
		push	59h
		push	[esp+10h+arg_0]
		call	ldap_set_lderrno
		or	eax, 0FFFFFFFFh
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_100115DB:				; CODE XREF: sub_100115C0+7j
		push	ebx
		mov	ebx, [esp+8+arg_0]
		push	ebp
		mov	ebp, [esp+0Ch+arg_8]
		push	edi
		mov	edi, [esp+10h+arg_4]
		push	esi
		push	1
		push	ebp
		push	edi
		push	ebx
		call	sub_10010A90
		add	esp, 14h
		test	eax, eax
		jz	short loc_1001160F
		push	0
		push	0
		push	0
		push	ebx
		call	ldap_set_lderrno
		mov	eax, [esi]
		mov	edi, [eax+4]
		jmp	short loc_10011625
; ---------------------------------------------------------------------------

loc_1001160F:				; CODE XREF: sub_100115C0+3Aj
		push	esi
		push	[esp+14h+arg_10]
		push	[esp+18h+arg_C]
		push	ebp
		push	edi
		push	ebx
		call	sub_10011E90
		add	esp, 18h
		mov	edi, eax

loc_10011625:				; CODE XREF: sub_100115C0+4Dj
		cmp	dword ptr [ebx+120h], 0
		jz	short loc_10011671
		cmp	edi, 65h
		jz	short loc_10011638
		cmp	edi, 64h
		jnz	short loc_10011671

loc_10011638:				; CODE XREF: sub_100115C0+71j
		mov	eax, [esi]
		cmp	dword ptr [eax+14h], 0
		jnz	short loc_10011671
		test	ebp, ebp
		jnz	short loc_1001165F
		cmp	edi, 65h
		jz	short loc_1001165F
		push	eax
		xor	ecx, ecx
		push	ecx
		push	dword ptr [eax]
		push	ebx
		call	sub_100081C0
		add	esp, 10h
		mov	eax, edi
		pop	edi
		pop	ebp
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1001165F:				; CODE XREF: sub_100115C0+82j
					; sub_100115C0+87j
		push	eax
		mov	ecx, 1
		push	ecx
		push	dword ptr [eax]
		push	ebx
		call	sub_100081C0
		add	esp, 10h

loc_10011671:				; CODE XREF: sub_100115C0+6Cj
					; sub_100115C0+76j ...
		mov	eax, edi
		pop	edi
		pop	ebp
		pop	ebx
		pop	esi
		retn
sub_100115C0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10011680	proc near		; CODE XREF: sub_10011E90+447p
					; sub_10011E90+6A0p

var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		sub	esp, 34h
		mov	eax, [esp+34h+arg_10]
		push	esi
		mov	esi, [esp+38h+arg_0]
		push	edi
		mov	eax, [eax]
		cmp	dword ptr [eax+4], 0
		lea	edi, [eax+4]
		mov	[esp+3Ch+var_24], 0
		mov	[esp+3Ch+var_18], 0
		mov	[esp+3Ch+var_10], eax
		mov	[esp+3Ch+var_1C], 1
		jnz	short loc_100116CB
		push	edi
		push	esi
		call	sub_1000EF40
		add	esp, 8
		test	eax, eax
		jz	short loc_100116CB
		pop	edi
		or	eax, 0FFFFFFFFh
		pop	esi
		add	esp, 34h
		retn
; ---------------------------------------------------------------------------

loc_100116CB:				; CODE XREF: sub_10011680+32j
					; sub_10011680+40j
		mov	eax, [esi+0CCh]
		push	ebp
		mov	ebp, ds:_errno
		test	eax, eax
		jz	short loc_100116E5
		push	0
		call	eax
		add	esp, 4
		jmp	short loc_100116ED
; ---------------------------------------------------------------------------

loc_100116E5:				; CODE XREF: sub_10011680+5Aj
		call	ebp ; _errno
		mov	dword ptr [eax], 0

loc_100116ED:				; CODE XREF: sub_10011680+63j
		push	ebx
		push	dword ptr [edi]	; Dst
		lea	eax, [esp+48h+var_14]
		push	eax		; int
		push	[esp+4Ch+arg_C]	; int
		call	ber_get_next
		mov	ebx, eax
		cmp	ebx, 30h
		jz	short loc_1001175E
		mov	ecx, [esi+0C8h]
		test	ecx, ecx
		jz	short loc_10011713
		call	ecx
		jmp	short loc_10011717
; ---------------------------------------------------------------------------

loc_10011713:				; CODE XREF: sub_10011680+8Dj
		call	ebp ; _errno
		mov	eax, [eax]

loc_10011717:				; CODE XREF: sub_10011680+91j
		cmp	eax, 2733h
		jz	loc_10011E74
		cmp	eax, 0Bh
		jz	loc_10011E74
		xor	eax, eax
		cmp	ebx, 0FFFFFFFFh
		push	0
		setnz	al
		push	0
		add	eax, 51h
		push	eax
		push	esi
		call	ldap_set_lderrno
		cmp	ebx, 0FFFFFFFFh
		jnz	short loc_10011753
		push	[esp+44h+arg_C]
		push	esi
		call	sub_1000F570
		add	esp, 8

loc_10011753:				; CODE XREF: sub_10011680+C4j
		pop	ebx
		pop	ebp
		pop	edi
		or	eax, 0FFFFFFFFh
		pop	esi
		add	esp, 34h
		retn
; ---------------------------------------------------------------------------

loc_1001175E:				; CODE XREF: sub_10011680+83j
		mov	ebp, [edi]
		lea	eax, [esp+44h+var_34]
		push	eax
		push	ebp
		mov	[esp+4Ch+var_2C], ebp
		mov	dword ptr [edi], 0
		call	ber_get_int
		cmp	eax, 0FFFFFFFFh
		jz	short loc_100117D2
		push	[esp+44h+var_34]
		push	esi
		call	sub_10010CE0
		add	esp, 8
		test	eax, eax
		jz	short loc_100117A0

loc_1001178B:				; CODE XREF: sub_10011680+13Aj
		push	1		; int
		push	ebp		; Memory
		call	ber_free
		pop	ebx
		pop	ebp
		pop	edi
		mov	eax, 0FFFFFFFEh
		pop	esi
		add	esp, 34h
		retn
; ---------------------------------------------------------------------------

loc_100117A0:				; CODE XREF: sub_10011680+109j
		mov	eax, [esp+44h+var_34]
		test	eax, eax
		jnz	short loc_100117AC
		xor	edi, edi
		jmp	short loc_100117BC
; ---------------------------------------------------------------------------

loc_100117AC:				; CODE XREF: sub_10011680+126j
		push	eax
		push	esi
		call	sub_1000F5C0
		mov	edi, eax
		add	esp, 8
		test	edi, edi
		jz	short loc_1001178B

loc_100117BC:				; CODE XREF: sub_10011680+12Aj
		lea	eax, [esp+44h+var_14]
		push	eax
		push	ebp
		call	ber_peek_tag
		mov	ecx, eax
		mov	[esp+44h+var_30], ecx
		cmp	ecx, 0FFFFFFFFh
		jnz	short loc_100117F1

loc_100117D2:				; CODE XREF: sub_10011680+F8j
		push	1		; int
		push	ebp		; Memory

loc_100117D5:				; CODE XREF: sub_10011680+294j
		call	ber_free
		push	0
		push	0
		push	54h
		push	esi
		call	ldap_set_lderrno
		pop	ebx
		pop	ebp
		pop	edi
		or	eax, 0FFFFFFFFh
		pop	esi
		add	esp, 34h
		retn
; ---------------------------------------------------------------------------

loc_100117F1:				; CODE XREF: sub_10011680+150j
		test	edi, edi
		jz	short loc_100117FF
		mov	eax, [edi+0Ch]
		mov	[esp+44h+var_34], eax
		mov	[edi+14h], ecx

loc_100117FF:				; CODE XREF: sub_10011680+173j
		cmp	[esp+44h+var_34], 0
		mov	ebx, 0FFFFFFFEh
		jz	loc_10011A09
		cmp	ecx, 73h
		jz	short loc_1001181D
		cmp	ecx, 64h
		jz	loc_10011A09

loc_1001181D:				; CODE XREF: sub_10011680+192j
		lea	eax, [esp+44h+var_C]
		mov	[esp+44h+var_20], 0
		push	eax
		lea	eax, [esp+48h+var_8]
		mov	[esp+48h+var_28], 0
		push	eax
		mov	eax, [esp+4Ch+var_10]
		push	dword ptr [eax+8]
		push	ebp
		push	edi
		push	esi
		call	sub_10010900
		add	esp, 18h
		cmp	[esp+44h+var_C], 0
		jg	loc_10011A47
		cmp	dword ptr [edi+8], 0
		jg	loc_10011A47
		cmp	[esp+44h+var_30], 73h
		jz	loc_10011A09
		xor	eax, eax
		lea	ebx, [edi+34h]
		cmp	[ebx], eax
		setnz	al
		test	eax, eax
		jnz	loc_10011901
		cmp	[esp+44h+var_8], eax
		setz	al
		cmp	dword ptr [edi+14h], 61h
		mov	[esp+44h+var_20], eax
		jnz	loc_10011925
		mov	eax, [edi+2Ch]
		test	eax, eax
		jz	loc_10011925
		mov	eax, [eax+1Ch]
		test	eax, eax
		jz	short loc_100118AB
		push	eax
		call	ldap_x_free
		add	esp, 4

loc_100118AB:				; CODE XREF: sub_10011680+220j
		push	0
		push	0
		push	0
		push	0
		lea	eax, [esp+54h+var_4]
		push	eax
		push	ebp
		push	dword ptr [edi+14h]
		push	esi
		call	sub_10004BB0
		add	esp, 20h
		test	eax, eax
		jnz	short loc_100118EB
		cmp	[esp+44h+var_4], eax
		jnz	short loc_100118EB
		mov	eax, [edi+2Ch]
		mov	dword ptr [eax+20h], 1
		mov	ecx, [edi+2Ch]
		mov	eax, [edi+30h]
		mov	[ecx+1Ch], eax
		mov	dword ptr [edi+30h], 0
		jmp	short loc_10011925
; ---------------------------------------------------------------------------

loc_100118EB:				; CODE XREF: sub_10011680+247j
					; sub_10011680+24Dj
		mov	eax, [edi+2Ch]
		mov	dword ptr [eax+20h], 0
		mov	eax, [edi+2Ch]
		mov	dword ptr [eax+1Ch], 0
		jmp	short loc_10011925
; ---------------------------------------------------------------------------

loc_10011901:				; CODE XREF: sub_10011680+1F5j
		lea	eax, [esp+44h+var_28]
		push	eax
		push	ebp
		call	sub_10002BB0
		add	esp, 8
		push	1		; int
		push	ebp		; Memory
		test	eax, eax
		jnz	loc_100117D5
		call	ber_free
		xor	ebp, ebp
		mov	[esp+44h+var_2C], ebp

loc_10011925:				; CODE XREF: sub_10011680+20Aj
					; sub_10011680+215j ...
		mov	eax, [ebx]
		test	eax, eax
		jz	short loc_1001195D
		jmp	short loc_10011930
; ---------------------------------------------------------------------------
		align 10h

loc_10011930:				; CODE XREF: sub_10011680+2ABj
					; sub_10011680+2DBj
		push	edi
		push	eax
		push	esi
		call	sub_10011350
		mov	edi, [ebx]
		add	esp, 0Ch
		dec	dword ptr [edi+8]
		cmp	dword ptr [edi+8], 0
		jg	short loc_1001195D
		mov	eax, [edi+14h]
		cmp	eax, 64h
		jz	short loc_1001195D
		cmp	eax, 73h
		jz	short loc_1001195D
		mov	eax, [edi+34h]
		lea	ebx, [edi+34h]
		test	eax, eax
		jnz	short loc_10011930

loc_1001195D:				; CODE XREF: sub_10011680+2A9j
					; sub_10011680+2C4j ...
		mov	eax, [esp+44h+var_28]
		test	eax, eax
		jz	short loc_10011979
		mov	ecx, [edi+48h]
		test	ecx, ecx
		jz	short loc_10011976
		push	ecx
		call	ldap_controls_free
		mov	eax, [esp+44h+var_28]

loc_10011976:				; CODE XREF: sub_10011680+2EAj
		mov	[edi+48h], eax

loc_10011979:				; CODE XREF: sub_10011680+2E3j
		cmp	dword ptr [edi+34h], 0
		jnz	loc_10011A38
		cmp	dword ptr [edi+8], 0
		jg	loc_10011A38
		mov	eax, [edi+14h]
		cmp	eax, 64h
		jz	loc_10011A38
		cmp	eax, 73h
		jz	loc_10011A38
		cmp	[esp+44h+var_20], 0
		mov	eax, [edi]
		mov	[esp+44h+var_34], eax
		mov	eax, [edi+14h]
		mov	[esp+44h+var_30], eax
		jnz	short loc_100119EE
		test	ebp, ebp
		jz	short loc_100119CA
		push	1		; int
		push	ebp		; Memory
		call	ber_free
		mov	[esp+44h+var_2C], 0

loc_100119CA:				; CODE XREF: sub_10011680+338j
		push	edi
		lea	eax, [esp+48h+var_2C]
		push	eax
		push	esi
		call	sub_10010810
		mov	ebp, [esp+50h+var_2C]
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_100119E6
		or	ebx, 0FFFFFFFFh
		jmp	short loc_100119F3
; ---------------------------------------------------------------------------

loc_100119E6:				; CODE XREF: sub_10011680+35Fj
		mov	[esp+44h+var_18], 1

loc_100119EE:				; CODE XREF: sub_10011680+334j
		mov	ebx, 0FFFFFFFEh

loc_100119F3:				; CODE XREF: sub_10011680+364j
		push	1
		push	edi
		push	esi
		call	sub_1000F6D0
		mov	eax, [esp+50h+arg_10]
		add	esp, 0Ch
		mov	dword ptr [eax], 0

loc_10011A09:				; CODE XREF: sub_10011680+189j
					; sub_10011680+197j ...
		test	ebp, ebp
		jz	loc_10011D80
		push	18h
		push	1
		call	ldap_x_calloc
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		jnz	short loc_10011A60
		push	eax
		push	eax
		push	5Ah
		push	esi
		call	ldap_set_lderrno
		pop	ebx
		pop	ebp
		pop	edi
		or	eax, 0FFFFFFFFh
		pop	esi
		add	esp, 34h
		retn
; ---------------------------------------------------------------------------

loc_10011A38:				; CODE XREF: sub_10011680+2FDj
					; sub_10011680+307j ...
		mov	[esp+44h+var_1C], 0
		mov	ebx, 0FFFFFFFEh
		jmp	short loc_10011A09
; ---------------------------------------------------------------------------

loc_10011A47:				; CODE XREF: sub_10011680+1CEj
					; sub_10011680+1D8j
		push	1		; int
		push	ebp		; Memory
		call	ber_free
		mov	eax, ebx
		mov	dword ptr [edi+4], 2
		pop	ebx
		pop	ebp
		pop	edi
		pop	esi
		add	esp, 34h
		retn
; ---------------------------------------------------------------------------

loc_10011A60:				; CODE XREF: sub_10011680+3A1j
		mov	eax, [esp+44h+var_34]
		mov	edi, [esp+44h+var_30]
		mov	[ebx+8], ebp
		mov	ebp, [esp+44h+var_1C]
		mov	[ebx], eax
		mov	[ebx+4], edi
		test	ebp, ebp
		jz	short loc_10011AAA
		cmp	dword ptr [esi+0E0h], 0
		jz	short loc_10011A8B
		push	ebx
		push	esi
		call	sub_10001E00
		add	esp, 8

loc_10011A8B:				; CODE XREF: sub_10011680+3FFj
		mov	eax, [esp+44h+arg_4]
		cmp	eax, 0FFFFFFFFh
		jz	short loc_10011A9A
		cmp	[esp+44h+var_34], eax
		jnz	short loc_10011AAA

loc_10011A9A:				; CODE XREF: sub_10011680+412j
		mov	eax, [ebx+4]
		cmp	eax, 65h
		jnz	short loc_10011AE8
		mov	[esp+44h+var_24], 1

loc_10011AAA:				; CODE XREF: sub_10011680+3F6j
					; sub_10011680+418j ...
		mov	eax, [esi+0C0h]
		xor	edx, edx
		mov	[esp+44h+arg_10], edx
		test	eax, eax
		jz	loc_10011B4D
		mov	ecx, [esi+0DCh]
		test	ecx, ecx
		jz	loc_10011B4D
		mov	edx, [esi+13Ch]
		test	edx, edx
		jz	short loc_10011B43
		call	edx
		cmp	[esi+150h], eax
		jnz	short loc_10011B15
		inc	dword ptr [esi+188h]
		jmp	short loc_10011B4B
; ---------------------------------------------------------------------------

loc_10011AE8:				; CODE XREF: sub_10011680+420j
		cmp	[esp+44h+arg_8], 0
		jz	short loc_10011AF9
		cmp	eax, 73h
		jz	short loc_10011AAA
		cmp	eax, 64h
		jz	short loc_10011AAA

loc_10011AF9:				; CODE XREF: sub_10011680+46Dj
		mov	eax, [esp+44h+arg_14]
		push	0
		push	0
		push	0
		push	esi
		mov	[eax], ebx
		call	ldap_set_lderrno
		pop	ebx
		pop	ebp
		mov	eax, edi
		pop	edi
		pop	esi
		add	esp, 34h
		retn
; ---------------------------------------------------------------------------

loc_10011B15:				; CODE XREF: sub_10011680+45Ej
		mov	eax, [esi+0DCh]
		push	dword ptr [eax+10h]
		mov	eax, [esi+0C0h]
		call	eax
		mov	eax, [esi+13Ch]
		add	esp, 4
		call	eax
		mov	[esi+150h], eax
		mov	dword ptr [esi+188h], 1
		jmp	short loc_10011B4B
; ---------------------------------------------------------------------------

loc_10011B43:				; CODE XREF: sub_10011680+454j
		push	dword ptr [ecx+10h]
		call	eax
		add	esp, 4

loc_10011B4B:				; CODE XREF: sub_10011680+466j
					; sub_10011680+4C1j
		xor	edx, edx

loc_10011B4D:				; CODE XREF: sub_10011680+438j
					; sub_10011680+446j
		mov	ecx, [esi+38h]
		mov	edi, ecx
		test	edi, edi
		jz	short loc_10011B6D
		mov	eax, [ebx]

loc_10011B58:				; CODE XREF: sub_10011680+4EBj
		cmp	[edi], eax
		jz	loc_10011BED
		mov	edx, edi
		mov	[esp+44h+arg_10], edi
		mov	edi, [edi+10h]
		test	edi, edi
		jnz	short loc_10011B58

loc_10011B6D:				; CODE XREF: sub_10011680+4D4j
		cmp	[esp+44h+var_24], 0
		jz	loc_10011DFE
		cmp	dword ptr [esi+0C0h], 0
		jz	short loc_10011BCF
		mov	eax, [esi+0DCh]
		test	eax, eax
		jz	short loc_10011BCF
		mov	ecx, [esi+13Ch]
		test	ecx, ecx
		jz	short loc_10011BC1
		call	ecx
		cmp	[esi+150h], eax
		jnz	short loc_10011BCF
		dec	dword ptr [esi+188h]
		jnz	short loc_10011BCF
		mov	dword ptr [esi+150h], 0FFFFFFFFh
		mov	dword ptr [esi+188h], 0
		mov	eax, [esi+0DCh]

loc_10011BC1:				; CODE XREF: sub_10011680+513j
		push	dword ptr [eax+10h]
		mov	eax, [esi+0C4h]
		call	eax
		add	esp, 4

loc_10011BCF:				; CODE XREF: sub_10011680+4FFj
					; sub_10011680+509j ...
		mov	eax, [esp+44h+arg_14]
		push	0
		push	0
		push	0
		push	esi
		mov	[eax], ebx
		call	ldap_set_lderrno
		mov	eax, [esp+44h+var_30]
		pop	ebx
		pop	ebp
		pop	edi
		pop	esi
		add	esp, 34h
		retn
; ---------------------------------------------------------------------------

loc_10011BED:				; CODE XREF: sub_10011680+4DAj
		mov	eax, [edi+0Ch]
		xor	ecx, ecx
		mov	[esp+44h+var_1C], ecx
		mov	ebp, edi
		test	eax, eax
		jz	short loc_10011C22
		lea	esp, [esp+0]

loc_10011C00:				; CODE XREF: sub_10011680+59Aj
		mov	ecx, [eax+4]
		cmp	ecx, 64h
		jz	short loc_10011C0D
		cmp	ecx, 73h
		jnz	short loc_10011C1E

loc_10011C0D:				; CODE XREF: sub_10011680+586j
		mov	ecx, ebp
		mov	[esp+44h+var_1C], ebp
		mov	ebp, eax
		mov	eax, [ebp+0Ch]
		test	eax, eax
		jnz	short loc_10011C00
		jmp	short loc_10011C22
; ---------------------------------------------------------------------------

loc_10011C1E:				; CODE XREF: sub_10011680+58Bj
		mov	ecx, [esp+44h+var_1C]

loc_10011C22:				; CODE XREF: sub_10011680+57Aj
					; sub_10011680+59Cj
		cmp	[esp+44h+var_18], 0
		jz	short loc_10011C96
		cmp	dword ptr [ebp+4], 65h
		mov	eax, [ebp+0Ch]
		jnz	short loc_10011C73
		mov	[ebx+0Ch], eax
		mov	eax, [ebp+10h]
		mov	[ebx+10h], eax
		test	ecx, ecx
		jnz	short loc_10011C63
		test	edx, edx
		jnz	short loc_10011C53
		cmp	edi, ebp
		mov	[esi+38h], ebx
		push	ebp
		cmovz	edi, ebx
		call	ldap_msgfree
		jmp	short loc_10011CC5
; ---------------------------------------------------------------------------

loc_10011C53:				; CODE XREF: sub_10011680+5C1j
		cmp	edi, ebp
		mov	[edx+10h], ebx
		push	ebp
		cmovz	edi, ebx
		call	ldap_msgfree
		jmp	short loc_10011CC5
; ---------------------------------------------------------------------------

loc_10011C63:				; CODE XREF: sub_10011680+5BDj
		cmp	edi, ebp
		mov	[ecx+0Ch], ebx
		push	ebp
		cmovz	edi, ebx
		call	ldap_msgfree
		jmp	short loc_10011CC5
; ---------------------------------------------------------------------------

loc_10011C73:				; CODE XREF: sub_10011680+5B0j
		test	eax, eax
		jz	short loc_10011C96
		cmp	dword ptr [eax+4], 65h
		jnz	short loc_10011C96
		mov	eax, [eax+0Ch]
		mov	[ebx+0Ch], eax
		mov	eax, [ebp+0Ch]
		mov	eax, [eax+10h]
		mov	[ebx+10h], eax
		push	dword ptr [ebp+0Ch]
		call	ldap_msgfree
		jmp	short loc_10011CC2
; ---------------------------------------------------------------------------

loc_10011C96:				; CODE XREF: sub_10011680+5A7j
					; sub_10011680+5F5j ...
		cmp	dword ptr [ebp+4], 65h
		jnz	short loc_10011CBC
		mov	[ebx+0Ch], ebp
		test	ecx, ecx
		jnz	short loc_10011CB1
		test	edx, edx
		jnz	short loc_10011CAC
		mov	[esi+38h], ebx
		jmp	short loc_10011CB4
; ---------------------------------------------------------------------------

loc_10011CAC:				; CODE XREF: sub_10011680+625j
		mov	[edx+10h], ebx
		jmp	short loc_10011CB4
; ---------------------------------------------------------------------------

loc_10011CB1:				; CODE XREF: sub_10011680+621j
		mov	[ecx+0Ch], ebx

loc_10011CB4:				; CODE XREF: sub_10011680+62Aj
					; sub_10011680+62Fj
		cmp	edi, ebp
		jnz	short loc_10011CC5
		mov	edi, ebx
		jmp	short loc_10011CC5
; ---------------------------------------------------------------------------

loc_10011CBC:				; CODE XREF: sub_10011680+61Aj
		mov	eax, [ebp+0Ch]
		mov	[ebx+0Ch], eax

loc_10011CC2:				; CODE XREF: sub_10011680+614j
		mov	[ebp+0Ch], ebx

loc_10011CC5:				; CODE XREF: sub_10011680+5D1j
					; sub_10011680+5E1j ...
		cmp	[esp+44h+var_24], 0
		jz	loc_10011D8A
		cmp	[esp+44h+arg_8], 0
		jnz	short loc_10011D00
		mov	eax, [edi+0Ch]
		test	eax, eax
		jz	short loc_10011D00
		mov	ecx, [esp+44h+arg_10]
		test	ecx, ecx
		jnz	short loc_10011CF1
		mov	[esi+38h], eax
		mov	ebx, [edi+4]
		mov	[edi+0Ch], ecx
		jmp	short loc_10011D17
; ---------------------------------------------------------------------------

loc_10011CF1:				; CODE XREF: sub_10011680+664j
		mov	[ecx+10h], eax
		mov	ebx, [edi+4]
		mov	dword ptr [edi+0Ch], 0
		jmp	short loc_10011D17
; ---------------------------------------------------------------------------

loc_10011D00:				; CODE XREF: sub_10011680+655j
					; sub_10011680+65Cj
		mov	ecx, [esp+44h+arg_10]
		mov	eax, [edi+10h]
		mov	ebx, [esp+44h+var_30]
		test	ecx, ecx
		jnz	short loc_10011D14
		mov	[esi+38h], eax
		jmp	short loc_10011D17
; ---------------------------------------------------------------------------

loc_10011D14:				; CODE XREF: sub_10011680+68Dj
		mov	[ecx+10h], eax

loc_10011D17:				; CODE XREF: sub_10011680+66Fj
					; sub_10011680+67Ej ...
		mov	eax, [esp+44h+arg_14]
		mov	[eax], edi
		cmp	dword ptr [esi+0C0h], 0
		jz	short loc_10011D74
		mov	eax, [esi+0DCh]
		test	eax, eax
		jz	short loc_10011D74
		mov	ecx, [esi+13Ch]
		test	ecx, ecx
		jz	short loc_10011D66
		call	ecx
		cmp	[esi+150h], eax
		jnz	short loc_10011D74
		dec	dword ptr [esi+188h]
		jnz	short loc_10011D74
		mov	dword ptr [esi+150h], 0FFFFFFFFh
		mov	dword ptr [esi+188h], 0
		mov	eax, [esi+0DCh]

loc_10011D66:				; CODE XREF: sub_10011680+6B8j
		push	dword ptr [eax+10h]
		mov	eax, [esi+0C4h]
		call	eax
		add	esp, 4

loc_10011D74:				; CODE XREF: sub_10011680+6A4j
					; sub_10011680+6AEj ...
		push	0
		push	0
		push	0
		push	esi
		call	ldap_set_lderrno

loc_10011D80:				; CODE XREF: sub_10011680+38Bj
		mov	eax, ebx
		pop	ebx
		pop	ebp
		pop	edi
		pop	esi
		add	esp, 34h
		retn
; ---------------------------------------------------------------------------

loc_10011D8A:				; CODE XREF: sub_10011680+64Aj
		cmp	dword ptr [esi+0C0h], 0
		jz	loc_10011E74
		mov	eax, [esi+0DCh]
		test	eax, eax
		jz	loc_10011E74
		mov	ecx, [esi+13Ch]
		test	ecx, ecx
		jz	short loc_10011DE3
		call	ecx
		cmp	[esi+150h], eax
		jnz	loc_10011E74
		dec	dword ptr [esi+188h]
		jnz	loc_10011E74
		mov	dword ptr [esi+150h], 0FFFFFFFFh
		mov	dword ptr [esi+188h], 0
		mov	eax, [esi+0DCh]

loc_10011DE3:				; CODE XREF: sub_10011680+72Dj
		push	dword ptr [eax+10h]
		mov	eax, [esi+0C4h]
		call	eax
		add	esp, 4
		mov	eax, 0FFFFFFFEh
		pop	ebx
		pop	ebp
		pop	edi
		pop	esi
		add	esp, 34h
		retn
; ---------------------------------------------------------------------------

loc_10011DFE:				; CODE XREF: sub_10011680+4F2j
		mov	[ebx+10h], ecx
		cmp	dword ptr [esi+0C0h], 0
		mov	[esi+38h], ebx
		jz	short loc_10011E5B
		mov	eax, [esi+0DCh]
		test	eax, eax
		jz	short loc_10011E5B
		mov	ecx, [esi+13Ch]
		test	ecx, ecx
		jz	short loc_10011E4D
		call	ecx
		cmp	[esi+150h], eax
		jnz	short loc_10011E5B
		dec	dword ptr [esi+188h]
		jnz	short loc_10011E5B
		mov	dword ptr [esi+150h], 0FFFFFFFFh
		mov	dword ptr [esi+188h], 0
		mov	eax, [esi+0DCh]

loc_10011E4D:				; CODE XREF: sub_10011680+79Fj
		push	dword ptr [eax+10h]
		mov	eax, [esi+0C4h]
		call	eax
		add	esp, 4

loc_10011E5B:				; CODE XREF: sub_10011680+78Bj
					; sub_10011680+795j ...
		test	ebp, ebp
		jz	short loc_10011E74
		cmp	dword ptr [esi+128h], 0
		jz	short loc_10011E74
		push	ebx
		push	dword ptr [ebx]
		push	esi
		call	sub_100113E0
		add	esp, 0Ch

loc_10011E74:				; CODE XREF: sub_10011680+9Cj
					; sub_10011680+A5j ...
		pop	ebx
		pop	ebp
		pop	edi
		mov	eax, 0FFFFFFFEh
		pop	esi
		add	esp, 34h
		retn
sub_10011680	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10011E90	proc near		; CODE XREF: sub_100115C0+5Bp

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		sub	esp, 10h
		push	ebx
		mov	ebx, [esp+14h+arg_10]
		xor	eax, eax
		push	ebp
		mov	ebp, [esp+18h+arg_4]
		push	esi
		mov	esi, [esp+1Ch+arg_0]
		push	edi
		mov	[esp+20h+var_C], eax
		cmp	[esi+0E0h], eax
		jz	loc_10011FC0
		cmp	[esi+10Ch], eax
		jz	loc_10011FC0
		mov	eax, [esi+0C0h]
		test	eax, eax
		jz	short loc_10011F25
		mov	ecx, [esi+0DCh]
		test	ecx, ecx
		jz	short loc_10011F25
		mov	edx, [esi+13Ch]
		test	edx, edx
		jz	short loc_10011F1E
		call	edx
		cmp	[esi+140h], eax
		jnz	short loc_10011EF1
		inc	dword ptr [esi+178h]
		jmp	short loc_10011F25
; ---------------------------------------------------------------------------

loc_10011EF1:				; CODE XREF: sub_10011E90+57j
		mov	eax, [esi+0DCh]
		push	dword ptr [eax]
		mov	eax, [esi+0C0h]
		call	eax
		mov	eax, [esi+13Ch]
		add	esp, 4
		call	eax
		mov	[esi+140h], eax
		mov	dword ptr [esi+178h], 1
		jmp	short loc_10011F25
; ---------------------------------------------------------------------------

loc_10011F1E:				; CODE XREF: sub_10011E90+4Dj
		push	dword ptr [ecx]
		call	eax
		add	esp, 4

loc_10011F25:				; CODE XREF: sub_10011E90+39j
					; sub_10011E90+43j ...
		push	[esp+20h+arg_14]
		mov	eax, [esi+10Ch]
		push	ebx
		push	[esp+28h+arg_8]
		push	ebp
		push	esi
		call	eax
		add	esp, 14h
		mov	edi, eax
		cmp	dword ptr [esi+0C0h], 0
		jz	short loc_10011F93
		mov	eax, [esi+0DCh]
		test	eax, eax
		jz	short loc_10011F93
		mov	ecx, [esi+13Ch]
		test	ecx, ecx
		jz	short loc_10011F86
		call	ecx
		cmp	[esi+140h], eax
		jnz	short loc_10011F93
		dec	dword ptr [esi+178h]
		jnz	short loc_10011F93
		mov	dword ptr [esi+140h], 0FFFFFFFFh
		mov	dword ptr [esi+178h], 0
		mov	eax, [esi+0DCh]

loc_10011F86:				; CODE XREF: sub_10011E90+C8j
		push	dword ptr [eax]
		mov	eax, [esi+0C4h]
		call	eax
		add	esp, 4

loc_10011F93:				; CODE XREF: sub_10011E90+B4j
					; sub_10011E90+BEj ...
		test	edi, edi
		jz	short loc_10011FA1
		mov	eax, edi
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 10h
		retn
; ---------------------------------------------------------------------------

loc_10011FA1:				; CODE XREF: sub_10011E90+105j
		cmp	dword ptr [esi+0E4h], 2
		jnz	short loc_10011FC0
		push	0
		push	0
		push	55h
		push	esi
		call	ldap_set_lderrno

loc_10011FB6:				; CODE XREF: sub_10011E90+831j
		pop	edi
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		add	esp, 10h
		retn
; ---------------------------------------------------------------------------

loc_10011FC0:				; CODE XREF: sub_10011E90+1Fj
					; sub_10011E90+2Bj ...
		cmp	ebp, 0FFFFFFFFh
		jz	loc_100121A0
		test	ebp, ebp
		jz	loc_100121A0
		mov	eax, [esi+0C0h]
		test	eax, eax
		jz	short loc_10012037
		mov	ecx, [esi+0DCh]
		test	ecx, ecx
		jz	short loc_10012037
		mov	edx, [esi+13Ch]
		test	edx, edx
		jz	short loc_1001202F
		call	edx
		cmp	[esi+14Ch], eax
		jnz	short loc_10012001
		inc	dword ptr [esi+184h]
		jmp	short loc_10012037
; ---------------------------------------------------------------------------

loc_10012001:				; CODE XREF: sub_10011E90+167j
		mov	eax, [esi+0DCh]
		push	dword ptr [eax+0Ch]
		mov	eax, [esi+0C0h]
		call	eax
		mov	eax, [esi+13Ch]
		add	esp, 4
		call	eax
		mov	[esi+14Ch], eax
		mov	dword ptr [esi+184h], 1
		jmp	short loc_10012037
; ---------------------------------------------------------------------------

loc_1001202F:				; CODE XREF: sub_10011E90+15Dj
		push	dword ptr [ecx+0Ch]
		call	eax
		add	esp, 4

loc_10012037:				; CODE XREF: sub_10011E90+149j
					; sub_10011E90+153j ...
		push	ebp
		push	esi
		call	sub_1000F5C0
		add	esp, 8
		test	eax, eax
		jnz	short loc_100120BE
		cmp	[esi+0C0h], eax
		jz	short loc_1001209B
		mov	eax, [esi+0DCh]
		test	eax, eax
		jz	short loc_1001209B
		mov	ecx, [esi+13Ch]
		test	ecx, ecx
		jz	short loc_1001208D
		call	ecx
		cmp	[esi+14Ch], eax
		jnz	short loc_1001209B
		dec	dword ptr [esi+184h]
		jnz	short loc_1001209B
		mov	dword ptr [esi+14Ch], 0FFFFFFFFh
		mov	dword ptr [esi+184h], 0
		mov	eax, [esi+0DCh]

loc_1001208D:				; CODE XREF: sub_10011E90+1CFj
		push	dword ptr [eax+0Ch]
		mov	eax, [esi+0C4h]
		call	eax
		add	esp, 4

loc_1001209B:				; CODE XREF: sub_10011E90+1BBj
					; sub_10011E90+1C5j ...
		push	offset aUnknownMessage ; "unknown message id"
		call	sub_1000BAB0
		add	esp, 4
		push	eax
		push	0
		push	59h
		push	esi
		call	ldap_set_lderrno
		pop	edi
		pop	esi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		add	esp, 10h
		retn
; ---------------------------------------------------------------------------

loc_100120BE:				; CODE XREF: sub_10011E90+1B3j
		mov	ecx, [eax+2Ch]
		test	ecx, ecx
		jz	loc_10012149
		cmp	dword ptr [ecx+14h], 4
		jnz	short loc_10012149
		push	1
		push	eax
		push	esi
		call	sub_1000F6D0
		add	esp, 0Ch
		cmp	dword ptr [esi+0C0h], 0
		jz	short loc_10012132
		mov	eax, [esi+0DCh]
		test	eax, eax
		jz	short loc_10012132
		mov	ecx, [esi+13Ch]
		test	ecx, ecx
		jz	short loc_10012124
		call	ecx
		cmp	[esi+14Ch], eax
		jnz	short loc_10012132
		dec	dword ptr [esi+184h]
		jnz	short loc_10012132
		mov	dword ptr [esi+14Ch], 0FFFFFFFFh
		mov	dword ptr [esi+184h], 0
		mov	eax, [esi+0DCh]

loc_10012124:				; CODE XREF: sub_10011E90+266j
		push	dword ptr [eax+0Ch]
		mov	eax, [esi+0C4h]
		call	eax
		add	esp, 4

loc_10012132:				; CODE XREF: sub_10011E90+252j
					; sub_10011E90+25Cj ...
		push	0
		push	0
		push	51h
		push	esi
		call	ldap_set_lderrno
		pop	edi
		pop	esi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		add	esp, 10h
		retn
; ---------------------------------------------------------------------------

loc_10012149:				; CODE XREF: sub_10011E90+233j
					; sub_10011E90+23Dj
		cmp	dword ptr [esi+0C0h], 0
		jz	short loc_100121A0
		mov	eax, [esi+0DCh]
		test	eax, eax
		jz	short loc_100121A0
		mov	ecx, [esi+13Ch]
		test	ecx, ecx
		jz	short loc_10012192
		call	ecx
		cmp	[esi+14Ch], eax
		jnz	short loc_100121A0
		dec	dword ptr [esi+184h]
		jnz	short loc_100121A0
		mov	dword ptr [esi+14Ch], 0FFFFFFFFh
		mov	dword ptr [esi+184h], 0
		mov	eax, [esi+0DCh]

loc_10012192:				; CODE XREF: sub_10011E90+2D4j
		push	dword ptr [eax+0Ch]
		mov	eax, [esi+0C4h]
		call	eax
		add	esp, 4

loc_100121A0:				; CODE XREF: sub_10011E90+133j
					; sub_10011E90+13Bj ...
		test	ebx, ebx
		jnz	short loc_100121AA
		mov	[esp+20h+var_10], ebx
		jmp	short loc_100121CE
; ---------------------------------------------------------------------------

loc_100121AA:				; CODE XREF: sub_10011E90+312j
		mov	eax, [ebx]
		mov	[esp+20h+var_8], eax
		mov	eax, [ebx+4]
		mov	[esp+20h+var_4], eax
		lea	eax, [esp+20h+var_8]
		push	0		; Time
		mov	[esp+24h+var_10], eax
		call	ds:_time64
		add	esp, 4
		mov	[esp+20h+var_C], eax

loc_100121CE:				; CODE XREF: sub_10011E90+318j
		mov	ebx, 0FFFFFFFEh

loc_100121D3:				; CODE XREF: sub_10011E90+553j
					; sub_10011E90+7E2j ...
		mov	eax, [esi+0C0h]
		xor	edi, edi
		test	eax, eax
		jz	loc_100122A5
		mov	ecx, [esi+0DCh]
		test	ecx, ecx
		jz	short loc_1001223F
		mov	edx, [esi+13Ch]
		test	edx, edx
		jz	short loc_10012237
		call	edx
		cmp	[esi+164h], eax
		jnz	short loc_10012209
		inc	dword ptr [esi+19Ch]
		jmp	short loc_1001223F
; ---------------------------------------------------------------------------

loc_10012209:				; CODE XREF: sub_10011E90+36Fj
		mov	eax, [esi+0DCh]
		push	dword ptr [eax+24h]
		mov	eax, [esi+0C0h]
		call	eax
		mov	eax, [esi+13Ch]
		add	esp, 4
		call	eax
		mov	[esi+164h], eax
		mov	dword ptr [esi+19Ch], 1
		jmp	short loc_1001223F
; ---------------------------------------------------------------------------

loc_10012237:				; CODE XREF: sub_10011E90+365j
		push	dword ptr [ecx+24h]
		call	eax
		add	esp, 4

loc_1001223F:				; CODE XREF: sub_10011E90+35Bj
					; sub_10011E90+377j ...
		mov	eax, [esi+0C0h]
		test	eax, eax
		jz	short loc_100122A5
		mov	ecx, [esi+0DCh]
		test	ecx, ecx
		jz	short loc_100122A5
		mov	edx, [esi+13Ch]
		test	edx, edx
		jz	short loc_1001229D
		call	edx
		cmp	[esi+14Ch], eax
		jnz	short loc_1001226F
		inc	dword ptr [esi+184h]
		jmp	short loc_100122A5
; ---------------------------------------------------------------------------

loc_1001226F:				; CODE XREF: sub_10011E90+3D5j
		mov	eax, [esi+0DCh]
		push	dword ptr [eax+0Ch]
		mov	eax, [esi+0C0h]
		call	eax
		mov	eax, [esi+13Ch]
		add	esp, 4
		call	eax
		mov	[esi+14Ch], eax
		mov	dword ptr [esi+184h], 1
		jmp	short loc_100122A5
; ---------------------------------------------------------------------------

loc_1001229D:				; CODE XREF: sub_10011E90+3CBj
		push	dword ptr [ecx+0Ch]
		call	eax
		add	esp, 4

loc_100122A5:				; CODE XREF: sub_10011E90+34Dj
					; sub_10011E90+3B7j ...
		mov	edx, [esi+68h]
		mov	[esp+20h+arg_0], edx
		test	edx, edx
		jz	short loc_100122E6

loc_100122B0:				; CODE XREF: sub_10011E90+433j
		mov	ecx, [edx]
		mov	eax, [ecx+58h]
		cmp	eax, [ecx+5Ch]
		jb	short loc_100122C7
		mov	edx, [edx+2Ch]
		mov	[esp+20h+arg_0], edx
		test	edx, edx
		jnz	short loc_100122B0
		jmp	short loc_100122E6
; ---------------------------------------------------------------------------

loc_100122C7:				; CODE XREF: sub_10011E90+428j
		push	[esp+20h+arg_14]
		lea	eax, [esp+24h+arg_0]
		push	eax
		push	ecx
		push	[esp+2Ch+arg_8]
		push	ebp
		push	esi
		call	sub_10011680
		add	esp, 18h
		mov	ebx, eax
		mov	edi, 1

loc_100122E6:				; CODE XREF: sub_10011E90+41Ej
					; sub_10011E90+435j
		cmp	dword ptr [esi+0C0h], 0
		jz	loc_10012398
		mov	eax, [esi+0DCh]
		test	eax, eax
		jz	short loc_10012341
		mov	ecx, [esi+13Ch]
		test	ecx, ecx
		jz	short loc_10012333
		call	ecx
		cmp	[esi+14Ch], eax
		jnz	short loc_10012341
		dec	dword ptr [esi+184h]
		jnz	short loc_10012341
		mov	dword ptr [esi+14Ch], 0FFFFFFFFh
		mov	dword ptr [esi+184h], 0
		mov	eax, [esi+0DCh]

loc_10012333:				; CODE XREF: sub_10011E90+475j
		push	dword ptr [eax+0Ch]
		mov	eax, [esi+0C4h]
		call	eax
		add	esp, 4

loc_10012341:				; CODE XREF: sub_10011E90+46Bj
					; sub_10011E90+47Fj ...
		cmp	dword ptr [esi+0C0h], 0
		jz	short loc_10012398
		mov	eax, [esi+0DCh]
		test	eax, eax
		jz	short loc_10012398
		mov	ecx, [esi+13Ch]
		test	ecx, ecx
		jz	short loc_1001238A
		call	ecx
		cmp	[esi+164h], eax
		jnz	short loc_10012398
		dec	dword ptr [esi+19Ch]
		jnz	short loc_10012398
		mov	dword ptr [esi+164h], 0FFFFFFFFh
		mov	dword ptr [esi+19Ch], 0
		mov	eax, [esi+0DCh]

loc_1001238A:				; CODE XREF: sub_10011E90+4CCj
		push	dword ptr [eax+24h]
		mov	eax, [esi+0C4h]
		call	eax
		add	esp, 4

loc_10012398:				; CODE XREF: sub_10011E90+45Dj
					; sub_10011E90+4B8j ...
		test	edi, edi
		jnz	loc_10012631
		push	[esp+20h+var_10]
		push	esi
		call	sub_1000CB00
		mov	edi, eax
		add	esp, 8
		cmp	edi, 0FFFFFFFFh
		jnz	short loc_100123F3
		test	dword ptr [esi+50h], 10000000h
		jz	loc_100126A4
		mov	eax, [esi+0C8h]
		test	eax, eax
		jz	short loc_100123CF
		call	eax
		jmp	short loc_100123D7
; ---------------------------------------------------------------------------

loc_100123CF:				; CODE XREF: sub_10011E90+539j
		call	ds:_errno
		mov	eax, [eax]

loc_100123D7:				; CODE XREF: sub_10011E90+53Dj
		cmp	eax, 4
		jnz	loc_100126A4
		cmp	ebx, 0FFFFFFFEh
		jz	loc_100121D3
		pop	edi
		pop	esi
		pop	ebp
		mov	eax, ebx
		pop	ebx
		add	esp, 10h
		retn
; ---------------------------------------------------------------------------

loc_100123F3:				; CODE XREF: sub_10011E90+522j
		test	edi, edi
		jz	loc_100126A4
		mov	eax, [esi+0C0h]
		test	eax, eax
		jz	loc_100124CB
		mov	ecx, [esi+0DCh]
		test	ecx, ecx
		jz	short loc_10012465
		mov	edx, [esi+13Ch]
		test	edx, edx
		jz	short loc_1001245D
		call	edx
		cmp	[esi+164h], eax
		jnz	short loc_1001242F
		inc	dword ptr [esi+19Ch]
		jmp	short loc_10012465
; ---------------------------------------------------------------------------

loc_1001242F:				; CODE XREF: sub_10011E90+595j
		mov	eax, [esi+0DCh]
		push	dword ptr [eax+24h]
		mov	eax, [esi+0C0h]
		call	eax
		mov	eax, [esi+13Ch]
		add	esp, 4
		call	eax
		mov	[esi+164h], eax
		mov	dword ptr [esi+19Ch], 1
		jmp	short loc_10012465
; ---------------------------------------------------------------------------

loc_1001245D:				; CODE XREF: sub_10011E90+58Bj
		push	dword ptr [ecx+24h]
		call	eax
		add	esp, 4

loc_10012465:				; CODE XREF: sub_10011E90+581j
					; sub_10011E90+59Dj ...
		mov	eax, [esi+0C0h]
		test	eax, eax
		jz	short loc_100124CB
		mov	ecx, [esi+0DCh]
		test	ecx, ecx
		jz	short loc_100124CB
		mov	edx, [esi+13Ch]
		test	edx, edx
		jz	short loc_100124C3
		call	edx
		cmp	[esi+14Ch], eax
		jnz	short loc_10012495
		inc	dword ptr [esi+184h]
		jmp	short loc_100124CB
; ---------------------------------------------------------------------------

loc_10012495:				; CODE XREF: sub_10011E90+5FBj
		mov	eax, [esi+0DCh]
		push	dword ptr [eax+0Ch]
		mov	eax, [esi+0C0h]
		call	eax
		mov	eax, [esi+13Ch]
		add	esp, 4
		call	eax
		mov	[esi+14Ch], eax
		mov	dword ptr [esi+184h], 1
		jmp	short loc_100124CB
; ---------------------------------------------------------------------------

loc_100124C3:				; CODE XREF: sub_10011E90+5F1j
		push	dword ptr [ecx+0Ch]
		call	eax
		add	esp, 4

loc_100124CB:				; CODE XREF: sub_10011E90+573j
					; sub_10011E90+5DDj ...
		mov	edi, [esi+68h]
		mov	[esp+20h+arg_0], edi
		cmp	ebx, 0FFFFFFFEh
		jnz	loc_1001257F
		jmp	short loc_100124E0
; ---------------------------------------------------------------------------
		align 10h

loc_100124E0:				; CODE XREF: sub_10011E90+64Bj
					; sub_10011E90+6E5j
		test	edi, edi
		jz	loc_1001257B
		cmp	dword ptr [edi+14h], 2
		mov	ebp, [edi+2Ch]
		jnz	short loc_10012507
		push	dword ptr [edi]
		push	esi
		call	sub_1000C9F0
		add	esp, 8
		test	eax, eax
		jz	short loc_10012507
		mov	dword ptr [edi+14h], 3

loc_10012507:				; CODE XREF: sub_10011E90+65Fj
					; sub_10011E90+66Ej
		cmp	dword ptr [edi+14h], 3
		jnz	short loc_1001256C
		push	dword ptr [edi]
		push	esi
		call	sub_1000C8E0
		add	esp, 8
		test	eax, eax
		jz	short loc_1001253E
		push	[esp+20h+arg_14]
		lea	eax, [esp+24h+arg_0]
		push	eax
		push	dword ptr [edi]
		push	[esp+2Ch+arg_8]
		push	[esp+30h+arg_4]
		push	esi
		call	sub_10011680
		mov	edi, [esp+38h+arg_0]
		add	esp, 18h
		mov	ebx, eax

loc_1001253E:				; CODE XREF: sub_10011E90+68Aj
		test	edi, edi
		jz	short loc_1001256C
		cmp	dword ptr [edi+24h], 0
		jle	short loc_1001256C
		push	dword ptr [edi]
		push	esi
		call	sub_1000C9F0
		add	esp, 8
		test	eax, eax
		jz	short loc_1001256C
		push	edi
		push	esi
		call	sub_1000FC60
		add	esp, 8
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_1001256C
		cmp	ebx, 0FFFFFFFEh
		cmovz	ebx, eax

loc_1001256C:				; CODE XREF: sub_10011E90+67Bj
					; sub_10011E90+6B0j ...
		mov	edi, ebp
		mov	[esp+20h+arg_0], edi
		cmp	ebx, 0FFFFFFFEh
		jz	loc_100124E0

loc_1001257B:				; CODE XREF: sub_10011E90+652j
		mov	ebp, [esp+20h+arg_4]

loc_1001257F:				; CODE XREF: sub_10011E90+645j
		cmp	dword ptr [esi+0C0h], 0
		jz	loc_10012631
		mov	eax, [esi+0DCh]
		test	eax, eax
		jz	short loc_100125DA
		mov	ecx, [esi+13Ch]
		test	ecx, ecx
		jz	short loc_100125CC
		call	ecx
		cmp	[esi+14Ch], eax
		jnz	short loc_100125DA
		dec	dword ptr [esi+184h]
		jnz	short loc_100125DA
		mov	dword ptr [esi+14Ch], 0FFFFFFFFh
		mov	dword ptr [esi+184h], 0
		mov	eax, [esi+0DCh]

loc_100125CC:				; CODE XREF: sub_10011E90+70Ej
		push	dword ptr [eax+0Ch]
		mov	eax, [esi+0C4h]
		call	eax
		add	esp, 4

loc_100125DA:				; CODE XREF: sub_10011E90+704j
					; sub_10011E90+718j ...
		cmp	dword ptr [esi+0C0h], 0
		jz	short loc_10012631
		mov	eax, [esi+0DCh]
		test	eax, eax
		jz	short loc_10012631
		mov	ecx, [esi+13Ch]
		test	ecx, ecx
		jz	short loc_10012623
		call	ecx
		cmp	[esi+164h], eax
		jnz	short loc_10012631
		dec	dword ptr [esi+19Ch]
		jnz	short loc_10012631
		mov	dword ptr [esi+164h], 0FFFFFFFFh
		mov	dword ptr [esi+19Ch], 0
		mov	eax, [esi+0DCh]

loc_10012623:				; CODE XREF: sub_10011E90+765j
		push	dword ptr [eax+24h]
		mov	eax, [esi+0C4h]
		call	eax
		add	esp, 4

loc_10012631:				; CODE XREF: sub_10011E90+50Aj
					; sub_10011E90+6F6j ...
		cmp	ebx, 0FFFFFFFEh
		jnz	loc_100127A6
		mov	edi, [esp+20h+arg_14]
		push	edi
		push	0
		push	[esp+28h+arg_8]
		push	ebp
		push	esi
		call	sub_10010A90
		add	esp, 14h
		test	eax, eax
		jz	short loc_1001266D
		push	0
		push	0
		push	0
		push	esi
		call	ldap_set_lderrno
		mov	eax, [edi]
		mov	ebx, [eax+4]
		cmp	ebx, 0FFFFFFFEh
		jnz	loc_100127A6

loc_1001266D:				; CODE XREF: sub_10011E90+7C1j
		cmp	[esp+20h+var_10], 0
		jz	loc_100121D3
		push	0		; Time
		call	ds:_time64
		mov	edx, [esp+24h+var_C]
		add	esp, 4
		mov	ecx, [esp+20h+var_8]
		sub	edx, eax
		add	ecx, edx
		mov	[esp+20h+var_8], ecx
		test	ecx, ecx
		jle	loc_1001279A
		mov	[esp+20h+var_C], eax
		jmp	loc_100121D3
; ---------------------------------------------------------------------------

loc_100126A4:				; CODE XREF: sub_10011E90+52Bj
					; sub_10011E90+54Aj ...
		xor	eax, eax
		cmp	edi, 0FFFFFFFFh
		push	0
		setnz	al
		push	0
		lea	eax, ds:51h[eax*4]
		push	eax
		push	esi
		call	ldap_set_lderrno
		cmp	edi, 0FFFFFFFFh
		jnz	loc_10011FB6
		mov	eax, [esi+0C0h]
		test	eax, eax
		jz	short loc_1001272D
		mov	ecx, [esi+0DCh]
		test	ecx, ecx
		jz	short loc_1001272D
		mov	edx, [esi+13Ch]
		test	edx, edx
		jz	short loc_10012725
		call	edx
		cmp	[esi+14Ch], eax
		jnz	short loc_100126F7
		inc	dword ptr [esi+184h]
		jmp	short loc_1001272D
; ---------------------------------------------------------------------------

loc_100126F7:				; CODE XREF: sub_10011E90+85Dj
		mov	eax, [esi+0DCh]
		push	dword ptr [eax+0Ch]
		mov	eax, [esi+0C0h]
		call	eax
		mov	eax, [esi+13Ch]
		add	esp, 4
		call	eax
		mov	[esi+14Ch], eax
		mov	dword ptr [esi+184h], 1
		jmp	short loc_1001272D
; ---------------------------------------------------------------------------

loc_10012725:				; CODE XREF: sub_10011E90+853j
		push	dword ptr [ecx+0Ch]
		call	eax
		add	esp, 4

loc_1001272D:				; CODE XREF: sub_10011E90+83Fj
					; sub_10011E90+849j ...
		push	0
		push	esi
		call	sub_1000F570
		add	esp, 8
		cmp	dword ptr [esi+0C0h], 0
		jz	short loc_1001278F
		mov	eax, [esi+0DCh]
		test	eax, eax
		jz	short loc_1001278F
		mov	ecx, [esi+13Ch]
		test	ecx, ecx
		jz	short loc_10012781
		call	ecx
		cmp	[esi+14Ch], eax
		jnz	short loc_1001278F
		dec	dword ptr [esi+184h]
		jnz	short loc_1001278F
		mov	dword ptr [esi+14Ch], 0FFFFFFFFh
		mov	dword ptr [esi+184h], 0
		mov	eax, [esi+0DCh]

loc_10012781:				; CODE XREF: sub_10011E90+8C3j
		push	dword ptr [eax+0Ch]
		mov	eax, [esi+0C4h]
		call	eax
		add	esp, 4

loc_1001278F:				; CODE XREF: sub_10011E90+8AFj
					; sub_10011E90+8B9j ...
		pop	edi
		pop	esi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		add	esp, 10h
		retn
; ---------------------------------------------------------------------------

loc_1001279A:				; CODE XREF: sub_10011E90+805j
		xor	ebx, ebx
		push	ebx
		push	ebx
		push	55h
		push	esi
		call	ldap_set_lderrno

loc_100127A6:				; CODE XREF: sub_10011E90+7A4j
					; sub_10011E90+7D7j
		pop	edi
		pop	esi
		pop	ebp
		mov	eax, ebx
		pop	ebx
		add	esp, 10h
		retn
sub_10011E90	endp

; Exported entry 489. ldap_parse_sasl_bind_result

; =============== S U B	R O U T	I N E =======================================


		public ldap_parse_sasl_bind_result
ldap_parse_sasl_bind_result proc near	; CODE XREF: sub_10012D30+C3p
					; DATA XREF: .rdata:off_10020938o

var_144		= dword	ptr -144h
var_140		= dword	ptr -140h
var_13C		= dword	ptr -13Ch
var_138		= dword	ptr -138h
var_134		= byte ptr -134h
Dst		= dword	ptr -130h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 144h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+144h+var_4], eax
		mov	eax, [esp+144h+arg_8]
		push	ebx
		mov	ebx, [esp+148h+arg_0]
		mov	[esp+148h+var_138], eax
		push	ebp
		mov	ebp, [esp+14Ch+arg_4]
		test	ebx, ebx
		jz	loc_100128C4
		test	ebp, ebp
		jz	loc_100128C4
		cmp	dword ptr [ebp+4], 61h
		jnz	loc_100128C4
		mov	ecx, [ebx+64h]
		test	ecx, ecx
		jnz	short loc_10012805
		mov	ecx, [ebx+8]
		jmp	short loc_10012808
; ---------------------------------------------------------------------------

loc_10012805:				; CODE XREF: ldap_parse_sasl_bind_result+4Ej
		mov	ecx, [ecx+8]

loc_10012808:				; CODE XREF: ldap_parse_sasl_bind_result+53j
		cmp	ecx, 3
		jge	short loc_10012823
		push	0
		push	0
		push	5Ch
		push	ebx
		call	ldap_set_lderrno
		mov	eax, 5Ch
		jmp	loc_100128C9
; ---------------------------------------------------------------------------

loc_10012823:				; CODE XREF: ldap_parse_sasl_bind_result+5Bj
		test	eax, eax
		jz	short loc_1001282D
		mov	dword ptr [eax], 0

loc_1001282D:				; CODE XREF: ldap_parse_sasl_bind_result+75j
		push	esi
		mov	esi, [ebp+8]
		lea	eax, [esp+150h+var_144]
		push	edi
		push	eax
		lea	eax, [esp+158h+var_140]
		mov	ecx, 4Bh
		push	eax
		lea	eax, [esp+15Ch+var_13C]
		push	eax
		lea	eax, [esp+160h+Dst]
		lea	edi, [esp+160h+Dst]
		push	offset aIaa_0	; "{iaa}"
		rep movsd
		push	eax		; Dst
		call	ber_scanf
		mov	edi, eax
		add	esp, 14h
		cmp	edi, 0FFFFFFFFh
		jz	short loc_1001288B
		lea	eax, [esp+154h+var_134]
		push	eax
		lea	eax, [esp+158h+Dst]
		push	eax
		call	ber_peek_tag
		cmp	eax, 87h
		jnz	short loc_1001288B
		push	[esp+154h+var_138]
		lea	eax, [esp+158h+Dst]
		push	eax
		call	ber_get_stringal
		mov	edi, eax

loc_1001288B:				; CODE XREF: ldap_parse_sasl_bind_result+B3j
					; ldap_parse_sasl_bind_result+C9j
		cmp	[esp+154h+arg_C], 0
		jz	short loc_1001289B
		push	ebp
		call	ldap_msgfree

loc_1001289B:				; CODE XREF: ldap_parse_sasl_bind_result+E3j
		push	[esp+154h+var_144]
		mov	esi, [esp+158h+var_13C]
		cmp	edi, 0FFFFFFFFh
		push	[esp+158h+var_140]
		mov	ebp, 54h
		cmovz	esi, ebp
		push	esi
		push	ebx
		call	ldap_set_lderrno
		xor	eax, eax
		cmp	esi, ebp
		pop	edi
		cmovz	eax, ebp
		pop	esi
		jmp	short loc_100128C9
; ---------------------------------------------------------------------------

loc_100128C4:				; CODE XREF: ldap_parse_sasl_bind_result+31j
					; ldap_parse_sasl_bind_result+39j ...
		mov	eax, 59h

loc_100128C9:				; CODE XREF: ldap_parse_sasl_bind_result+6Ej
					; ldap_parse_sasl_bind_result+112j
		mov	ecx, [esp+14Ch+var_4]
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 144h
		retn	10h
ldap_parse_sasl_bind_result endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 487. ldap_sasl_bind

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	ldap_sasl_bind(void *Memory, int, int, int, int, int, int)
		public ldap_sasl_bind
ldap_sasl_bind	proc near		; CODE XREF: sub_10012D30+58p
					; DATA XREF: .rdata:off_10020938o

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
Memory		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_18		= dword	ptr  1Ch

		sub	esp, 0Ch
		push	esi
		mov	esi, [esp+10h+Memory]
		test	esi, esi
		jz	short loc_1001290F
		cmp	[esp+10h+arg_18], 0
		jnz	short loc_1001291B
		push	0
		push	0
		push	59h
		push	esi
		call	ldap_set_lderrno

loc_1001290F:				; CODE XREF: ldap_sasl_bind+Aj
		mov	eax, 59h
		pop	esi
		add	esp, 0Ch
		retn	1Ch
; ---------------------------------------------------------------------------

loc_1001291B:				; CODE XREF: ldap_sasl_bind+11j
		test	dword ptr [esi+50h], 8000000h
		jz	short loc_1001292D
		push	esi
		call	sub_10012EE0
		add	esp, 4

loc_1001292D:				; CODE XREF: ldap_sasl_bind+32j
		mov	eax, [esi+64h]
		xor	ecx, ecx
		cmp	[esp+10h+arg_8], ecx
		push	ebp
		setz	cl
		mov	[esp+14h+var_8], ecx
		test	eax, eax
		jnz	short loc_10012947
		mov	ebp, [esi+8]
		jmp	short loc_1001294A
; ---------------------------------------------------------------------------

loc_10012947:				; CODE XREF: ldap_sasl_bind+50j
		mov	ebp, [eax+8]

loc_1001294A:				; CODE XREF: ldap_sasl_bind+55j
		test	ecx, ecx
		jnz	short loc_1001296A
		cmp	ebp, 3
		jge	short loc_1001296A
		push	ecx
		push	ecx
		push	5Ch
		push	esi
		call	ldap_set_lderrno
		pop	ebp
		mov	eax, 5Ch
		pop	esi
		add	esp, 0Ch
		retn	1Ch
; ---------------------------------------------------------------------------

loc_1001296A:				; CODE XREF: ldap_sasl_bind+5Cj
					; ldap_sasl_bind+61j
		mov	eax, [esi+0C0h]
		test	eax, eax
		jz	short loc_100129D0
		mov	ecx, [esi+0DCh]
		test	ecx, ecx
		jz	short loc_100129D0
		mov	edx, [esi+13Ch]
		test	edx, edx
		jz	short loc_100129C8
		call	edx
		cmp	[esi+148h], eax
		jnz	short loc_1001299A
		inc	dword ptr [esi+180h]
		jmp	short loc_100129D0
; ---------------------------------------------------------------------------

loc_1001299A:				; CODE XREF: ldap_sasl_bind+A0j
		mov	eax, [esi+0DCh]
		push	dword ptr [eax+8]
		mov	eax, [esi+0C0h]
		call	eax
		mov	eax, [esi+13Ch]
		add	esp, 4
		call	eax
		mov	[esi+148h], eax
		mov	dword ptr [esi+180h], 1
		jmp	short loc_100129D0
; ---------------------------------------------------------------------------

loc_100129C8:				; CODE XREF: ldap_sasl_bind+96j
		push	dword ptr [ecx+8]
		call	eax
		add	esp, 4

loc_100129D0:				; CODE XREF: ldap_sasl_bind+82j
					; ldap_sasl_bind+8Cj ...
		inc	dword ptr [esi+30h]
		cmp	dword ptr [esi+0C0h], 0
		mov	eax, [esi+30h]
		mov	[esp+14h+var_C], eax
		jz	short loc_10012A31
		mov	eax, [esi+0DCh]
		test	eax, eax
		jz	short loc_10012A31
		mov	ecx, [esi+13Ch]
		test	ecx, ecx
		jz	short loc_10012A23
		call	ecx
		cmp	[esi+148h], eax
		jnz	short loc_10012A31
		dec	dword ptr [esi+180h]
		jnz	short loc_10012A31
		mov	dword ptr [esi+148h], 0FFFFFFFFh
		mov	dword ptr [esi+180h], 0
		mov	eax, [esi+0DCh]

loc_10012A23:				; CODE XREF: ldap_sasl_bind+105j
		push	dword ptr [eax+8]
		mov	eax, [esi+0C4h]
		call	eax
		add	esp, 4

loc_10012A31:				; CODE XREF: ldap_sasl_bind+F1j
					; ldap_sasl_bind+FBj ...
		mov	eax, [esp+14h+arg_4]
		test	eax, eax
		push	ebx
		mov	ebx, offset Src
		cmovnz	ebx, eax
		cmp	dword ptr [esi+0E0h], 0
		push	edi
		mov	edi, [esp+1Ch+arg_C]
		jz	loc_10012B9E
		cmp	dword ptr [esi+0ECh], 0
		jz	loc_10012B9E
		mov	eax, [esi+0C0h]
		test	eax, eax
		jz	short loc_10012AC3
		mov	ecx, [esi+0DCh]
		test	ecx, ecx
		jz	short loc_10012AC3
		mov	edx, [esi+13Ch]
		test	edx, edx
		jz	short loc_10012ABC
		call	edx
		cmp	[esi+140h], eax
		jnz	short loc_10012A8F
		inc	dword ptr [esi+178h]
		jmp	short loc_10012AC3
; ---------------------------------------------------------------------------

loc_10012A8F:				; CODE XREF: ldap_sasl_bind+195j
		mov	eax, [esi+0DCh]
		push	dword ptr [eax]
		mov	eax, [esi+0C0h]
		call	eax
		mov	eax, [esi+13Ch]
		add	esp, 4
		call	eax
		mov	[esi+140h], eax
		mov	dword ptr [esi+178h], 1
		jmp	short loc_10012AC3
; ---------------------------------------------------------------------------

loc_10012ABC:				; CODE XREF: ldap_sasl_bind+18Bj
		push	dword ptr [ecx]
		call	eax
		add	esp, 4

loc_10012AC3:				; CODE XREF: ldap_sasl_bind+177j
					; ldap_sasl_bind+181j ...
		mov	eax, [esi+0ECh]
		push	0A3h
		push	edi
		push	ebx
		push	60h
		push	[esp+2Ch+var_C]
		push	esi
		call	eax
		add	esp, 18h
		test	eax, eax
		jz	short loc_10012B48
		mov	ecx, [esp+1Ch+arg_18]
		mov	[ecx], eax
		cmp	dword ptr [esi+0C0h], 0
		jz	short loc_10012B3C
		mov	eax, [esi+0DCh]
		test	eax, eax
		jz	short loc_10012B3C
		mov	ecx, [esi+13Ch]
		test	ecx, ecx
		jz	short loc_10012B2F
		call	ecx
		cmp	[esi+140h], eax
		jnz	short loc_10012B3C
		dec	dword ptr [esi+178h]
		jnz	short loc_10012B3C
		mov	dword ptr [esi+140h], 0FFFFFFFFh
		mov	dword ptr [esi+178h], 0
		mov	eax, [esi+0DCh]

loc_10012B2F:				; CODE XREF: ldap_sasl_bind+211j
		push	dword ptr [eax]
		mov	eax, [esi+0C4h]
		call	eax
		add	esp, 4

loc_10012B3C:				; CODE XREF: ldap_sasl_bind+1FDj
					; ldap_sasl_bind+207j ...
		xor	eax, eax

loc_10012B3E:				; CODE XREF: ldap_sasl_bind+2BEj
		pop	edi
		pop	ebx
		pop	ebp
		pop	esi
		add	esp, 0Ch
		retn	1Ch
; ---------------------------------------------------------------------------

loc_10012B48:				; CODE XREF: ldap_sasl_bind+1EEj
		cmp	dword ptr [esi+0C0h], 0
		jz	short loc_10012B9E
		mov	eax, [esi+0DCh]
		test	eax, eax
		jz	short loc_10012B9E
		mov	ecx, [esi+13Ch]
		test	ecx, ecx
		jz	short loc_10012B91
		call	ecx
		cmp	[esi+140h], eax
		jnz	short loc_10012B9E
		dec	dword ptr [esi+178h]
		jnz	short loc_10012B9E
		mov	dword ptr [esi+140h], 0FFFFFFFFh
		mov	dword ptr [esi+178h], 0
		mov	eax, [esi+0DCh]

loc_10012B91:				; CODE XREF: ldap_sasl_bind+273j
		push	dword ptr [eax]
		mov	eax, [esi+0C4h]
		call	eax
		add	esp, 4

loc_10012B9E:				; CODE XREF: ldap_sasl_bind+15Cj
					; ldap_sasl_bind+169j ...
		lea	eax, [esp+1Ch+Memory]
		push	eax
		push	esi
		call	sub_1000EF40
		add	esp, 8
		test	eax, eax
		jnz	short loc_10012B3E
		cmp	[esp+1Ch+var_8], eax
		jz	short loc_10012BF0
		test	edi, edi
		jnz	short loc_10012BCA
		mov	[esp+1Ch+var_8], edi
		lea	edi, [esp+1Ch+var_8]
		mov	[esp+1Ch+var_4], offset	Src

loc_10012BCA:				; CODE XREF: ldap_sasl_bind+2C8j
		push	dword ptr [edi]
		push	dword ptr [edi+4]
		push	80h
		push	ebx
		push	ebp
		mov	ebp, [esp+30h+var_C]
		push	60h
		push	ebp
		push	offset aItIsto	; "{it{isto}"
		push	[esp+3Ch+Memory]
		call	ber_printf
		add	esp, 24h
		jmp	short loc_10012C4D
; ---------------------------------------------------------------------------

loc_10012BF0:				; CODE XREF: ldap_sasl_bind+2C4j
		test	edi, edi
		jz	short loc_10012C29
		mov	eax, [edi+4]
		test	eax, eax
		jz	short loc_10012C29
		mov	ecx, [edi]
		test	ecx, ecx
		jz	short loc_10012C29
		push	ecx
		push	eax
		mov	eax, [esp+24h+arg_8]
		push	eax
		push	0A3h
		push	ebx
		push	ebp
		mov	ebp, [esp+34h+var_C]
		push	60h
		push	ebp
		push	offset aItIstSo	; "{it{ist{so}}"
		push	[esp+40h+Memory]
		call	ber_printf
		add	esp, 28h
		jmp	short loc_10012C4D
; ---------------------------------------------------------------------------

loc_10012C29:				; CODE XREF: ldap_sasl_bind+302j
					; ldap_sasl_bind+309j ...
		mov	eax, [esp+1Ch+arg_8]
		push	eax
		push	0A3h
		push	ebx
		push	ebp
		mov	ebp, [esp+2Ch+var_C]
		push	60h
		push	ebp
		push	offset aItIstS	; "{it{ist{s}}"
		push	[esp+38h+Memory]
		call	ber_printf
		add	esp, 20h

loc_10012C4D:				; CODE XREF: ldap_sasl_bind+2FEj
					; ldap_sasl_bind+337j
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_10012C78
		push	0
		push	0
		push	53h
		push	esi
		call	ldap_set_lderrno
		push	1		; int
		push	[esp+20h+Memory] ; Memory
		call	ber_free
		pop	edi
		pop	ebx
		pop	ebp
		mov	eax, 53h
		pop	esi
		add	esp, 0Ch
		retn	1Ch
; ---------------------------------------------------------------------------

loc_10012C78:				; CODE XREF: ldap_sasl_bind+360j
		push	[esp+1Ch+Memory]
		push	1
		push	[esp+24h+arg_10]
		push	esi
		call	sub_10002DD0
		mov	edi, eax
		add	esp, 10h
		test	edi, edi
		jz	short loc_10012CA8
		push	1		; int
		push	[esp+20h+Memory] ; Memory
		call	ber_free
		mov	eax, edi
		pop	edi
		pop	ebx
		pop	ebp
		pop	esi
		add	esp, 0Ch
		retn	1Ch
; ---------------------------------------------------------------------------

loc_10012CA8:				; CODE XREF: ldap_sasl_bind+39Fj
		push	[esp+1Ch+Memory]
		push	ebx
		push	60h
		push	ebp
		push	esi
		call	sub_1000FC30
		mov	ecx, [esp+30h+arg_18]
		add	esp, 14h
		mov	[ecx], eax
		test	eax, eax
		jns	loc_10012B3C
		push	0
		push	0
		push	esi
		call	ldap_get_lderrno
		pop	edi
		pop	ebx
		pop	ebp
		pop	esi
		add	esp, 0Ch
		retn	1Ch
ldap_sasl_bind	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 488. ldap_sasl_bind_s

; =============== S U B	R O U T	I N E =======================================


		public ldap_sasl_bind_s
ldap_sasl_bind_s proc near		; DATA XREF: .rdata:off_10020938o

Memory		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch

		push	0		; int
		push	[esp+4+arg_18]	; int
		push	[esp+8+arg_14]	; int
		push	[esp+0Ch+arg_10] ; int
		push	[esp+10h+arg_C]	; int
		push	[esp+14h+arg_8]	; int
		push	[esp+18h+arg_4]	; int
		push	[esp+1Ch+Memory] ; Memory
		call	sub_10012D30
		add	esp, 20h
		retn	1Ch
ldap_sasl_bind_s endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 491. ldap_sasl_interactive_bind_ext_s

; =============== S U B	R O U T	I N E =======================================


		public ldap_sasl_interactive_bind_ext_s
ldap_sasl_interactive_bind_ext_s proc near ; DATA XREF:	.rdata:off_10020938o
		xor	eax, eax
		retn	24h
ldap_sasl_interactive_bind_ext_s endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 490. ldap_sasl_interactive_bind_s

; =============== S U B	R O U T	I N E =======================================


		public ldap_sasl_interactive_bind_s
ldap_sasl_interactive_bind_s proc near	; DATA XREF: .rdata:off_10020938o
		xor	eax, eax
		retn	20h
ldap_sasl_interactive_bind_s endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10012D30(void	*Memory, int, int, int,	int, int, int, int)
sub_10012D30	proc near		; CODE XREF: ldap_sasl_bind_s+1Ep

var_8		= dword	ptr -8
var_4		= dword	ptr -4
Memory		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch
arg_1C		= dword	ptr  20h

		sub	esp, 8
		push	esi
		mov	esi, [esp+0Ch+Memory]
		test	esi, esi
		jnz	short loc_10012D44
		lea	eax, [esi+59h]
		pop	esi
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_10012D44:				; CODE XREF: sub_10012D30+Aj
		mov	eax, [esi+64h]
		test	eax, eax
		jnz	short loc_10012D50
		mov	eax, [esi+8]
		jmp	short loc_10012D53
; ---------------------------------------------------------------------------

loc_10012D50:				; CODE XREF: sub_10012D30+19j
		mov	eax, [eax+8]

loc_10012D53:				; CODE XREF: sub_10012D30+1Ej
		cmp	eax, 3
		jge	short loc_10012D6E
		push	0
		push	0
		push	5Ch
		push	esi
		call	ldap_set_lderrno
		mov	eax, 5Ch
		pop	esi
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_10012D6E:				; CODE XREF: sub_10012D30+26j
		lea	eax, [esp+0Ch+var_4]
		push	eax		; int
		push	[esp+10h+arg_14] ; int
		push	[esp+14h+arg_10] ; int
		push	[esp+18h+arg_C]	; int
		push	[esp+1Ch+arg_8]	; int
		push	[esp+20h+arg_4]	; int
		push	esi		; Memory
		call	ldap_sasl_bind
		mov	[esp+0Ch+Memory], eax
		test	eax, eax
		jnz	loc_10012E23
		lea	eax, [esp+0Ch+var_8]
		push	eax
		push	0
		push	1
		push	[esp+18h+var_4]
		push	esi
		call	ldap_result
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_10012DC0
		push	0
		push	0
		push	esi
		call	ldap_get_lderrno
		pop	esi
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_10012DC0:				; CODE XREF: sub_10012D30+7Fj
		mov	eax, [esp+0Ch+arg_1C]
		test	eax, eax
		jz	short loc_10012DE8
		push	0
		push	eax
		push	0
		push	0
		push	0
		lea	eax, [esp+20h+Memory]
		push	eax
		push	[esp+24h+var_8]
		push	esi
		call	ldap_parse_result
		mov	[esp+0Ch+Memory], eax
		test	eax, eax
		jnz	short loc_10012E23

loc_10012DE8:				; CODE XREF: sub_10012D30+96j
		push	0
		push	[esp+10h+arg_18]
		push	[esp+14h+var_8]
		push	esi
		call	ldap_parse_sasl_bind_result
		mov	[esp+0Ch+Memory], eax
		test	eax, eax
		jz	short loc_10012E17
		cmp	eax, 0Eh
		jz	short loc_10012E17
		push	[esp+0Ch+var_8]
		call	ldap_msgfree
		mov	eax, [esp+0Ch+Memory]
		pop	esi
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_10012E17:				; CODE XREF: sub_10012D30+CEj
					; sub_10012D30+D3j
		push	1
		push	[esp+10h+var_8]
		push	esi
		call	ldap_result2error

loc_10012E23:				; CODE XREF: sub_10012D30+63j
					; sub_10012D30+B6j
		pop	esi
		add	esp, 8
		retn
sub_10012D30	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  59. ldap_simple_bind

; =============== S U B	R O U T	I N E =======================================


		public ldap_simple_bind
ldap_simple_bind proc near		; CODE XREF: ldap_bind+2Dp
					; DATA XREF: .rdata:off_10020938o

Memory		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi
		mov	esi, [esp+4+Memory]
		test	esi, esi
		jnz	short loc_10012E40
		lea	eax, [esi+59h]
		pop	esi
		retn	0Ch
; ---------------------------------------------------------------------------

loc_10012E40:				; CODE XREF: ldap_simple_bind+7j
		test	dword ptr [esi+50h], 8000000h
		jz	short loc_10012E52
		push	esi
		call	sub_10012EE0
		add	esp, 4

loc_10012E52:				; CODE XREF: ldap_simple_bind+17j
		push	1
		push	[esp+8+arg_8]	; int
		push	[esp+0Ch+arg_4]	; int
		push	esi		; Memory
		call	sub_10012FF0
		add	esp, 10h
		pop	esi
		retn	0Ch
ldap_simple_bind endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  60. ldap_simple_bind_s

; =============== S U B	R O U T	I N E =======================================


		public ldap_simple_bind_s
ldap_simple_bind_s proc	near		; CODE XREF: ldap_bind_s+2Dp
					; DATA XREF: .rdata:off_10020938o

Memory		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi
		mov	esi, [esp+4+Memory]
		test	esi, esi
		jnz	short loc_10012E80
		lea	eax, [esi+59h]
		pop	esi
		retn	0Ch
; ---------------------------------------------------------------------------

loc_10012E80:				; CODE XREF: ldap_simple_bind_s+7j
		test	dword ptr [esi+50h], 8000000h
		jz	short loc_10012E92
		push	esi
		call	sub_10012EE0
		add	esp, 4

loc_10012E92:				; CODE XREF: ldap_simple_bind_s+17j
		push	1
		push	[esp+8+arg_8]	; int
		push	[esp+0Ch+arg_4]	; int
		push	esi		; Memory
		call	sub_10012FF0
		add	esp, 10h
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_10012EB8

loc_10012EAA:				; CODE XREF: ldap_simple_bind_s+5Bj
		push	0
		push	0
		push	esi
		call	ldap_get_lderrno
		pop	esi
		retn	0Ch
; ---------------------------------------------------------------------------

loc_10012EB8:				; CODE XREF: ldap_simple_bind_s+38j
		lea	ecx, [esp+4+Memory]
		push	ecx
		push	0
		push	1
		push	eax
		push	esi
		call	ldap_result
		cmp	eax, 0FFFFFFFFh
		jz	short loc_10012EAA
		push	1
		push	[esp+8+Memory]
		push	esi
		call	ldap_result2error
		pop	esi
		retn	0Ch
ldap_simple_bind_s endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10012EE0	proc near		; CODE XREF: ldap_sasl_bind+35p
					; ldap_simple_bind+1Ap	...

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		mov	eax, [esi+0C0h]
		test	eax, eax
		jz	short loc_10012F4B
		mov	ecx, [esi+0DCh]
		test	ecx, ecx
		jz	short loc_10012F4B
		mov	edx, [esi+13Ch]
		test	edx, edx
		jz	short loc_10012F43
		call	edx
		cmp	[esi+164h], eax
		jnz	short loc_10012F15
		inc	dword ptr [esi+19Ch]
		jmp	short loc_10012F4B
; ---------------------------------------------------------------------------

loc_10012F15:				; CODE XREF: sub_10012EE0+2Bj
		mov	eax, [esi+0DCh]
		push	dword ptr [eax+24h]
		mov	eax, [esi+0C0h]
		call	eax
		mov	eax, [esi+13Ch]
		add	esp, 4
		call	eax
		mov	[esi+164h], eax
		mov	dword ptr [esi+19Ch], 1
		jmp	short loc_10012F4B
; ---------------------------------------------------------------------------

loc_10012F43:				; CODE XREF: sub_10012EE0+21j
		push	dword ptr [ecx+24h]
		call	eax
		add	esp, 4

loc_10012F4B:				; CODE XREF: sub_10012EE0+Dj
					; sub_10012EE0+17j ...
		mov	eax, [esi+64h]
		test	eax, eax
		jz	short loc_10012F97
		cmp	dword ptr [eax+14h], 4
		jnz	short loc_10012F73
		push	0
		push	1
		push	0
		push	0
		push	eax
		push	esi
		call	sub_1000F5E0
		add	esp, 18h
		mov	dword ptr [esi+64h], 0
		jmp	short loc_10012F97
; ---------------------------------------------------------------------------

loc_10012F73:				; CODE XREF: sub_10012EE0+76j
		mov	eax, [eax+1Ch]
		test	eax, eax
		jz	short loc_10012F97
		push	eax
		call	ldap_x_free
		mov	eax, [esi+64h]
		add	esp, 4
		mov	dword ptr [eax+1Ch], 0
		mov	eax, [esi+64h]
		mov	dword ptr [eax+20h], 0

loc_10012F97:				; CODE XREF: sub_10012EE0+70j
					; sub_10012EE0+91j ...
		cmp	dword ptr [esi+0C0h], 0
		jz	short loc_10012FEE
		mov	eax, [esi+0DCh]
		test	eax, eax
		jz	short loc_10012FEE
		mov	ecx, [esi+13Ch]
		test	ecx, ecx
		jz	short loc_10012FE0
		call	ecx
		cmp	[esi+164h], eax
		jnz	short loc_10012FEE
		dec	dword ptr [esi+19Ch]
		jnz	short loc_10012FEE
		mov	dword ptr [esi+164h], 0FFFFFFFFh
		mov	dword ptr [esi+19Ch], 0
		mov	eax, [esi+0DCh]

loc_10012FE0:				; CODE XREF: sub_10012EE0+D2j
		push	dword ptr [eax+24h]
		mov	eax, [esi+0C4h]
		call	eax
		add	esp, 4

loc_10012FEE:				; CODE XREF: sub_10012EE0+BEj
					; sub_10012EE0+C8j ...
		pop	esi
		retn
sub_10012EE0	endp


; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10012FF0(void	*Memory, int, int)
sub_10012FF0	proc near		; CODE XREF: ldap_simple_bind+2Dp
					; ldap_simple_bind_s+2Dp

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
Memory		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 0Ch
		push	ebx
		push	ebp
		push	esi
		mov	esi, [esp+18h+Memory]
		push	edi
		mov	eax, [esi+0C0h]
		test	eax, eax
		jz	short loc_10013061
		mov	ecx, [esi+0DCh]
		test	ecx, ecx
		jz	short loc_10013061
		mov	edx, [esi+13Ch]
		test	edx, edx
		jz	short loc_10013059
		call	edx
		cmp	[esi+148h], eax
		jnz	short loc_1001302B
		inc	dword ptr [esi+180h]
		jmp	short loc_10013061
; ---------------------------------------------------------------------------

loc_1001302B:				; CODE XREF: sub_10012FF0+31j
		mov	eax, [esi+0DCh]
		push	dword ptr [eax+8]
		mov	eax, [esi+0C0h]
		call	eax
		mov	eax, [esi+13Ch]
		add	esp, 4
		call	eax
		mov	[esi+148h], eax
		mov	dword ptr [esi+180h], 1
		jmp	short loc_10013061
; ---------------------------------------------------------------------------

loc_10013059:				; CODE XREF: sub_10012FF0+27j
		push	dword ptr [ecx+8]
		call	eax
		add	esp, 4

loc_10013061:				; CODE XREF: sub_10012FF0+13j
					; sub_10012FF0+1Dj ...
		inc	dword ptr [esi+30h]
		cmp	dword ptr [esi+0C0h], 0
		mov	ebx, [esi+30h]
		mov	[esp+1Ch+var_C], ebx
		jz	short loc_100130C2
		mov	eax, [esi+0DCh]
		test	eax, eax
		jz	short loc_100130C2
		mov	ecx, [esi+13Ch]
		test	ecx, ecx
		jz	short loc_100130B4
		call	ecx
		cmp	[esi+148h], eax
		jnz	short loc_100130C2
		dec	dword ptr [esi+180h]
		jnz	short loc_100130C2
		mov	dword ptr [esi+148h], 0FFFFFFFFh
		mov	dword ptr [esi+180h], 0
		mov	eax, [esi+0DCh]

loc_100130B4:				; CODE XREF: sub_10012FF0+96j
		push	dword ptr [eax+8]
		mov	eax, [esi+0C4h]
		call	eax
		add	esp, 4

loc_100130C2:				; CODE XREF: sub_10012FF0+82j
					; sub_10012FF0+8Cj ...
		mov	eax, [esp+1Ch+arg_4]
		mov	edi, offset Src
		test	eax, eax
		mov	ebp, edi
		cmovnz	ebp, eax
		mov	eax, [esp+1Ch+arg_8]
		test	eax, eax
		cmovnz	edi, eax
		cmp	dword ptr [esi+0E0h], 0
		jz	loc_100131F9
		cmp	dword ptr [esi+0ECh], 0
		jz	loc_100131F9
		mov	ecx, edi
		mov	[esp+1Ch+var_4], edi
		lea	edx, [ecx+1]
		mov	edi, edi

loc_10013100:				; CODE XREF: sub_10012FF0+115j
		mov	al, [ecx]
		inc	ecx
		test	al, al
		jnz	short loc_10013100
		sub	ecx, edx
		mov	[esp+1Ch+var_8], ecx
		mov	ecx, [esi+0C0h]
		test	ecx, ecx
		jz	short loc_10013171
		mov	eax, [esi+0DCh]
		test	eax, eax
		jz	short loc_10013171
		mov	edx, [esi+13Ch]
		test	edx, edx
		jz	short loc_1001316A
		call	edx
		cmp	[esi+140h], eax
		jnz	short loc_1001313D
		inc	dword ptr [esi+178h]
		jmp	short loc_10013171
; ---------------------------------------------------------------------------

loc_1001313D:				; CODE XREF: sub_10012FF0+143j
		mov	eax, [esi+0DCh]
		push	dword ptr [eax]
		mov	eax, [esi+0C0h]
		call	eax
		mov	eax, [esi+13Ch]
		add	esp, 4
		call	eax
		mov	[esi+140h], eax
		mov	dword ptr [esi+178h], 1
		jmp	short loc_10013171
; ---------------------------------------------------------------------------

loc_1001316A:				; CODE XREF: sub_10012FF0+139j
		push	dword ptr [eax]
		call	ecx
		add	esp, 4

loc_10013171:				; CODE XREF: sub_10012FF0+125j
					; sub_10012FF0+12Fj ...
		push	80h
		lea	eax, [esp+20h+var_8]
		push	eax
		mov	eax, [esi+0ECh]
		push	ebp
		push	60h
		push	ebx
		push	esi
		call	eax
		add	esp, 18h
		mov	ebx, eax
		cmp	dword ptr [esi+0C0h], 0
		jz	short loc_100131E7
		mov	ecx, [esi+0DCh]
		test	ecx, ecx
		jz	short loc_100131E7
		mov	eax, [esi+13Ch]
		test	eax, eax
		jz	short loc_100131DA
		call	eax
		cmp	[esi+140h], eax
		jnz	short loc_100131E7
		dec	dword ptr [esi+178h]
		jnz	short loc_100131E7
		mov	dword ptr [esi+140h], 0FFFFFFFFh
		mov	dword ptr [esi+178h], 0
		mov	eax, [esi+0DCh]
		push	dword ptr [eax]
		jmp	short loc_100131DC
; ---------------------------------------------------------------------------

loc_100131DA:				; CODE XREF: sub_10012FF0+1B8j
		push	dword ptr [ecx]

loc_100131DC:				; CODE XREF: sub_10012FF0+1E8j
		mov	eax, [esi+0C4h]
		call	eax
		add	esp, 4

loc_100131E7:				; CODE XREF: sub_10012FF0+1A4j
					; sub_10012FF0+1AEj ...
		test	ebx, ebx
		jz	short loc_100131F5
		pop	edi
		pop	esi
		pop	ebp
		mov	eax, ebx
		pop	ebx
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_100131F5:				; CODE XREF: sub_10012FF0+1F9j
		mov	ebx, [esp+1Ch+var_C]

loc_100131F9:				; CODE XREF: sub_10012FF0+F2j
					; sub_10012FF0+FFj
		lea	eax, [esp+1Ch+Memory]
		push	eax
		push	esi
		call	sub_1000EF40
		add	esp, 8
		test	eax, eax
		jnz	short loc_10013252
		mov	eax, [esi+64h]
		test	eax, eax
		jnz	short loc_10013217
		mov	eax, [esi+8]
		jmp	short loc_1001321A
; ---------------------------------------------------------------------------

loc_10013217:				; CODE XREF: sub_10012FF0+220j
		mov	eax, [eax+8]

loc_1001321A:				; CODE XREF: sub_10012FF0+225j
		push	edi
		push	80h
		push	ebp
		push	eax
		push	60h
		push	ebx
		push	offset aItIsts	; "{it{ists}"
		push	[esp+38h+Memory]
		call	ber_printf
		add	esp, 20h
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_1001325D
		push	0
		push	0
		push	53h
		push	esi
		call	ldap_set_lderrno

loc_10013247:				; CODE XREF: sub_10012FF0+280j
		push	1		; int
		push	[esp+20h+Memory] ; Memory
		call	ber_free

loc_10013252:				; CODE XREF: sub_10012FF0+219j
		pop	edi
		pop	esi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_1001325D:				; CODE XREF: sub_10012FF0+249j
		push	[esp+1Ch+Memory]
		push	1
		push	0
		push	esi
		call	sub_10002DD0
		add	esp, 10h
		test	eax, eax
		jnz	short loc_10013247
		push	[esp+1Ch+Memory]
		push	ebp
		push	60h
		push	ebx
		push	esi
		call	sub_1000FC30
		add	esp, 14h
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 0Ch
		retn
sub_10012FF0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10013290	proc near		; CODE XREF: sub_10013B50+28p

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		xor	edx, edx
		mov	eax, 1
		mov	cl, [esi]
		test	cl, cl
		jz	short loc_100132D5

loc_100132A2:				; CODE XREF: sub_10013290+43j
		test	eax, eax
		jz	short loc_100132D5
		test	edx, edx
		jnz	short loc_100132B8
		cmp	cl, 28h
		jnz	short loc_100132B2
		inc	eax
		jmp	short loc_100132B8
; ---------------------------------------------------------------------------

loc_100132B2:				; CODE XREF: sub_10013290+1Dj
		cmp	cl, 29h
		jnz	short loc_100132B8
		dec	eax

loc_100132B8:				; CODE XREF: sub_10013290+18j
					; sub_10013290+20j ...
		cmp	cl, 5Ch
		jnz	short loc_100132C8
		test	edx, edx
		jnz	short loc_100132C8
		mov	edx, 1
		jmp	short loc_100132CA
; ---------------------------------------------------------------------------

loc_100132C8:				; CODE XREF: sub_10013290+2Bj
					; sub_10013290+2Fj
		xor	edx, edx

loc_100132CA:				; CODE XREF: sub_10013290+36j
		test	eax, eax
		jz	short loc_100132CF
		inc	esi

loc_100132CF:				; CODE XREF: sub_10013290+3Cj
		mov	cl, [esi]
		test	cl, cl
		jnz	short loc_100132A2

loc_100132D5:				; CODE XREF: sub_10013290+10j
					; sub_10013290+14j
		xor	eax, eax
		cmp	[esi], al
		cmovnz	eax, esi
		pop	esi
		retn
sub_10013290	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100132E0	proc near		; CODE XREF: sub_10013DF0+1D2p
					; sub_100140E0+38p

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		push	esi
		mov	cl, [eax]
		test	cl, cl
		jz	loc_10013379
		nop

loc_100132F0:				; CODE XREF: sub_100132E0+93j
		cmp	cl, 2Ah
		jz	loc_1001337B
		cmp	cl, 5Ch
		jnz	short loc_1001336D
		mov	dl, [eax+1]
		inc	eax
		lea	ecx, [edx-30h]
		cmp	cl, 9
		ja	short loc_10013312
		movsx	ecx, dl
		add	ecx, 0FFFFFFD0h
		jmp	short loc_10013330
; ---------------------------------------------------------------------------

loc_10013312:				; CODE XREF: sub_100132E0+28j
		lea	ecx, [edx-41h]
		cmp	cl, 5
		ja	short loc_10013322
		movsx	ecx, dl
		add	ecx, 0FFFFFFC9h
		jmp	short loc_10013330
; ---------------------------------------------------------------------------

loc_10013322:				; CODE XREF: sub_100132E0+38j
		lea	ecx, [edx-61h]
		cmp	cl, 5
		ja	short loc_1001336D
		movsx	ecx, dl
		add	ecx, 0FFFFFFA9h

loc_10013330:				; CODE XREF: sub_100132E0+30j
					; sub_100132E0+40j
		test	ecx, ecx
		js	short loc_1001336D
		mov	dl, [eax+1]
		lea	esi, [eax+1]
		lea	ecx, [edx-30h]
		cmp	cl, 9
		ja	short loc_1001334A
		movsx	ecx, dl
		add	ecx, 0FFFFFFD0h
		jmp	short loc_10013368
; ---------------------------------------------------------------------------

loc_1001334A:				; CODE XREF: sub_100132E0+60j
		lea	ecx, [edx-41h]
		cmp	cl, 5
		ja	short loc_1001335A
		movsx	ecx, dl
		add	ecx, 0FFFFFFC9h
		jmp	short loc_10013368
; ---------------------------------------------------------------------------

loc_1001335A:				; CODE XREF: sub_100132E0+70j
		lea	ecx, [edx-61h]
		cmp	cl, 5
		ja	short loc_1001336D
		movsx	ecx, dl
		add	ecx, 0FFFFFFA9h

loc_10013368:				; CODE XREF: sub_100132E0+68j
					; sub_100132E0+78j
		test	ecx, ecx
		cmovns	eax, esi

loc_1001336D:				; CODE XREF: sub_100132E0+1Cj
					; sub_100132E0+48j ...
		mov	cl, [eax+1]
		inc	eax
		test	cl, cl
		jnz	loc_100132F0

loc_10013379:				; CODE XREF: sub_100132E0+9j
		xor	eax, eax

loc_1001337B:				; CODE XREF: sub_100132E0+13j
		pop	esi
		retn
sub_100132E0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10013380	proc near		; CODE XREF: sub_10013DF0+56p

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		push	edi
		mov	al, [esi]
		test	al, al
		jz	short loc_100133C7
		mov	edi, ds:isalnum

loc_10013392:				; CODE XREF: sub_10013380+45j
		movsx	eax, al
		cmp	eax, 80h
		jnb	short loc_100133CF ; jumptable 100133B8	default	case
		push	eax		; C
		call	edi ; isalnum
		add	esp, 4
		test	eax, eax
		jnz	short loc_100133BF ; jumptable 100133B8	cases 45,46,58,59,95
		movsx	eax, byte ptr [esi]
		add	eax, 0FFFFFFD3h	; switch 51 cases
		cmp	eax, 32h
		ja	short loc_100133CF ; jumptable 100133B8	default	case
		movzx	eax, ds:byte_100133DC[eax]
		jmp	ds:off_100133D4[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_100133BF:				; CODE XREF: sub_10013380+24j
					; sub_10013380+38j
					; DATA XREF: ...
		mov	al, [esi+1]	; jumptable 100133B8 cases 45,46,58,59,95
		inc	esi
		test	al, al
		jnz	short loc_10013392

loc_100133C7:				; CODE XREF: sub_10013380+Aj
		pop	edi
		mov	eax, 1
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_100133CF:				; CODE XREF: sub_10013380+1Aj
					; sub_10013380+2Fj ...
		pop	edi		; jumptable 100133B8 default case
		xor	eax, eax
		pop	esi
		retn
sub_10013380	endp

; ---------------------------------------------------------------------------
off_100133D4	dd offset loc_100133BF,	offset loc_100133CF ; DATA XREF: sub_10013380+38r
					; jump table for switch	statement
byte_100133DC	db	0,     0,     1,     1 ; DATA XREF: sub_10013380+31r
		db	1,     1,     1,     1 ; indirect table	for switch statement
		db	1,     1,     1,     1
		db	1,     0,     0,     1
		db	1,     1,     1,     1
		db	1,     1,     1,     1
		db	1,     1,     1,     1
		db	1,     1,     1,     1
		db	1,     1,     1,     1
		db	1,     1,     1,     1
		db	1,     1,     1,     1
		db	1,     1,     1,     1
		db	1,     1,     0
		align 10h
; Exported entry  43. ldap_search

; =============== S U B	R O U T	I N E =======================================


		public ldap_search
ldap_search	proc near		; CODE XREF: sub_100177B0+44p
					; DATA XREF: .rdata:off_10020938o

var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		push	ecx
		lea	eax, [esp+4+var_4]
		push	eax
		push	0FFFFFFFFh
		push	0FFFFFFFFh
		push	0
		push	0
		push	[esp+18h+arg_14]
		push	[esp+1Ch+arg_10]
		push	[esp+20h+arg_C]
		push	[esp+24h+arg_8]
		push	[esp+28h+arg_4]
		push	[esp+2Ch+arg_0]
		call	sub_100136F0
		or	ecx, 0FFFFFFFFh
		test	eax, eax
		cmovz	ecx, [esp+30h+var_4]
		mov	eax, ecx
		add	esp, 30h
		retn	18h
ldap_search	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 517. ldap_search_ext

; =============== S U B	R O U T	I N E =======================================


		public ldap_search_ext
ldap_search_ext	proc near		; DATA XREF: .rdata:off_10020938o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch
arg_1C		= dword	ptr  20h
arg_20		= dword	ptr  24h
arg_24		= dword	ptr  28h
arg_28		= dword	ptr  2Ch

		mov	ecx, [esp+arg_20]
		test	ecx, ecx
		jz	short loc_1001348D
		mov	eax, [ecx]
		test	eax, eax
		jnz	short loc_10013481
		cmp	[ecx+4], eax
		jnz	short loc_1001347F
		mov	eax, [esp+arg_0]
		test	eax, eax
		jz	short loc_10013477
		push	0
		push	0
		push	59h
		push	eax
		call	ldap_set_lderrno

loc_10013477:				; CODE XREF: ldap_search_ext+19j
		mov	eax, 59h
		retn	2Ch
; ---------------------------------------------------------------------------

loc_1001347F:				; CODE XREF: ldap_search_ext+11j
		test	eax, eax

loc_10013481:				; CODE XREF: ldap_search_ext+Cj
		jg	short loc_10013490
		xor	eax, eax
		cmp	[ecx+4], eax
		setnle	al
		jmp	short loc_10013490
; ---------------------------------------------------------------------------

loc_1001348D:				; CODE XREF: ldap_search_ext+6j
		or	eax, 0FFFFFFFFh

loc_10013490:				; CODE XREF: ldap_search_ext:loc_10013481j
					; ldap_search_ext+3Bj
		push	[esp+arg_28]
		push	[esp+4+arg_24]
		push	eax
		push	[esp+0Ch+arg_1C]
		push	[esp+10h+arg_18]
		push	[esp+14h+arg_14]
		push	[esp+18h+arg_10]
		push	[esp+1Ch+arg_C]
		push	[esp+20h+arg_8]
		push	[esp+24h+arg_4]
		push	[esp+28h+arg_0]
		call	sub_100136F0
		add	esp, 2Ch
		retn	2Ch
ldap_search_ext	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 518. ldap_search_ext_s

; =============== S U B	R O U T	I N E =======================================


		public ldap_search_ext_s
ldap_search_ext_s proc near		; DATA XREF: .rdata:off_10020938o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch
arg_1C		= dword	ptr  20h
arg_20		= dword	ptr  24h
arg_24		= dword	ptr  28h
arg_28		= dword	ptr  2Ch

		mov	ecx, [esp+arg_20]
		test	ecx, ecx
		jnz	short loc_100134DD
		or	eax, 0FFFFFFFFh
		jmp	short loc_100134EB
; ---------------------------------------------------------------------------

loc_100134DD:				; CODE XREF: ldap_search_ext_s+6j
		mov	eax, [ecx]
		test	eax, eax
		jg	short loc_100134EB
		xor	eax, eax
		cmp	[ecx+4], eax
		setnle	al

loc_100134EB:				; CODE XREF: ldap_search_ext_s+Bj
					; ldap_search_ext_s+11j
		push	[esp+arg_28]
		push	[esp+4+arg_24]
		push	eax
		push	ecx
		push	[esp+10h+arg_1C]
		push	[esp+14h+arg_18]
		push	[esp+18h+arg_14]
		push	[esp+1Ch+arg_10]
		push	[esp+20h+arg_C]
		push	[esp+24h+arg_8]
		push	[esp+28h+arg_4]
		push	[esp+2Ch+arg_0]
		call	sub_10013A60
		add	esp, 30h
		retn	2Ch
ldap_search_ext_s endp

; Exported entry  50. ldap_search_s

; =============== S U B	R O U T	I N E =======================================


		public ldap_search_s
ldap_search_s	proc near		; DATA XREF: .rdata:off_10020938o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch

		push	[esp+arg_18]
		push	0FFFFFFFFh
		push	0FFFFFFFFh
		push	0
		push	0
		push	0
		push	[esp+18h+arg_14]
		push	[esp+1Ch+arg_10]
		push	[esp+20h+arg_C]
		push	[esp+24h+arg_8]
		push	[esp+28h+arg_4]
		push	[esp+2Ch+arg_0]
		call	sub_10013A60
		add	esp, 30h
		retn	1Ch
ldap_search_s	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  51. ldap_search_st

; =============== S U B	R O U T	I N E =======================================


		public ldap_search_st
ldap_search_st	proc near		; CODE XREF: sub_10016490+D9p
					; sub_10016490+159p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch
arg_1C		= dword	ptr  20h

		push	[esp+arg_1C]
		push	0FFFFFFFFh
		push	0FFFFFFFFh
		push	[esp+0Ch+arg_18]
		push	0
		push	0
		push	[esp+18h+arg_14]
		push	[esp+1Ch+arg_10]
		push	[esp+20h+arg_C]
		push	[esp+24h+arg_8]
		push	[esp+28h+arg_4]
		push	[esp+2Ch+arg_0]
		call	sub_10013A60
		add	esp, 30h
		retn	20h
ldap_search_st	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100135A0	proc near		; CODE XREF: sub_100136F0+2FDp
					; ldap_url_search+11Bp

Memory		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch
arg_20		= dword	ptr  24h
arg_24		= dword	ptr  28h
arg_28		= dword	ptr  2Ch
arg_2C		= dword	ptr  30h

		push	ecx
		push	ebx
		mov	ebx, [esp+8+arg_0]
		lea	eax, [esp+8+Memory]
		push	eax
		push	ebx
		call	sub_1000EF40
		add	esp, 8
		test	eax, eax
		jnz	loc_100136E5
		mov	eax, [esp+8+arg_4]
		mov	edx, offset Src
		mov	ecx, [esp+8+arg_24]
		test	eax, eax
		cmovnz	edx, eax
		cmp	ecx, 0FFFFFFFFh
		jnz	short loc_100135D6
		mov	ecx, [ebx+18h]

loc_100135D6:				; CODE XREF: sub_100135A0+31j
		mov	eax, [esp+8+arg_20]
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_100135E2
		mov	eax, [ebx+14h]

loc_100135E2:				; CODE XREF: sub_100135A0+3Dj
		push	[esp+8+arg_14]
		push	eax
		push	ecx
		push	dword ptr [ebx+10h]
		push	[esp+18h+arg_8]
		push	edx
		push	63h
		push	[esp+24h+arg_28]
		push	offset aItSeeiib ; "{it{seeiib"
		push	[esp+2Ch+Memory]
		call	ber_printf
		add	esp, 28h
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_1001362B
		push	0
		push	0
		push	53h
		push	ebx
		call	ldap_set_lderrno
		push	1		; int
		push	[esp+0Ch+Memory] ; Memory
		call	ber_free
		mov	eax, 53h
		pop	ebx
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_1001362B:				; CODE XREF: sub_100135A0+6Aj
		push	esi
		push	edi
		push	[esp+10h+arg_C]
		call	sub_1000BAB0
		mov	edi, eax
		push	edi		; Str
		push	[esp+18h+Memory] ; int
		call	sub_10013BC0
		push	edi
		mov	esi, eax
		call	ldap_x_free
		add	esp, 10h
		cmp	esi, 0FFFFFFFFh
		jnz	short loc_10013671
		push	0
		push	0
		push	57h
		push	ebx
		call	ldap_set_lderrno
		push	1		; int
		push	[esp+14h+Memory] ; Memory
		call	ber_free
		pop	edi
		lea	eax, [esi+58h]
		pop	esi
		pop	ebx
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_10013671:				; CODE XREF: sub_100135A0+B0j
		push	[esp+10h+arg_10]
		push	offset aV_5	; "{v}}"
		push	[esp+18h+Memory]
		call	ber_printf
		add	esp, 0Ch
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_100136AC
		push	0
		push	0
		push	53h
		push	ebx
		call	ldap_set_lderrno
		push	1		; int
		push	[esp+14h+Memory] ; Memory
		call	ber_free
		pop	edi
		pop	esi
		mov	eax, 53h
		pop	ebx
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_100136AC:				; CODE XREF: sub_100135A0+E9j
		push	[esp+10h+Memory]
		push	1
		push	[esp+18h+arg_18]
		push	ebx
		call	sub_10002DD0
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		jz	short loc_100136D7
		push	1		; int
		push	[esp+14h+Memory] ; Memory
		call	ber_free
		pop	edi
		mov	eax, esi
		pop	esi
		pop	ebx
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_100136D7:				; CODE XREF: sub_100135A0+123j
		mov	ecx, [esp+10h+arg_2C]
		mov	eax, [esp+10h+Memory]
		pop	edi
		pop	esi
		mov	[ecx], eax
		xor	eax, eax

loc_100136E5:				; CODE XREF: sub_100135A0+16j
		pop	ebx
		pop	ecx
		retn
sub_100135A0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100136F0	proc near		; CODE XREF: ldap_search+25p
					; ldap_search_ext+69p ...

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch
arg_1C		= dword	ptr  20h
arg_20		= dword	ptr  24h
arg_24		= dword	ptr  28h
arg_28		= dword	ptr  2Ch

		sub	esp, 0Ch
		push	esi
		mov	esi, [esp+10h+arg_0]
		test	esi, esi
		jnz	short loc_10013704
		lea	eax, [esi+59h]
		pop	esi
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_10013704:				; CODE XREF: sub_100136F0+Aj
		mov	eax, [esp+10h+arg_4]
		mov	ecx, offset aObjectclass ; "(objectclass=*)"
		push	ebx
		mov	ebx, [esp+14h+arg_28]
		test	eax, eax
		push	ebp
		mov	ebp, offset Src
		cmovnz	ebp, eax
		mov	eax, [esp+18h+arg_C]
		test	eax, eax
		push	edi
		cmovnz	ecx, eax
		mov	[esp+1Ch+arg_0], ecx
		test	ebx, ebx
		jz	loc_10013A43
		mov	edi, [esp+1Ch+arg_8]
		test	edi, edi
		jz	short loc_10013749
		cmp	edi, 1
		jz	short loc_10013749
		cmp	edi, 2
		jnz	loc_10013A43

loc_10013749:				; CODE XREF: sub_100136F0+49j
					; sub_100136F0+4Ej
		cmp	[esp+1Ch+arg_24], 0FFFFFFFFh
		jl	loc_10013A43
		mov	eax, [esi+0C0h]
		test	eax, eax
		jz	short loc_100137BA
		mov	ecx, [esi+0DCh]
		test	ecx, ecx
		jz	short loc_100137BA
		mov	edx, [esi+13Ch]
		test	edx, edx
		jz	short loc_100137B2
		call	edx
		cmp	[esi+148h], eax
		jnz	short loc_10013784
		inc	dword ptr [esi+180h]
		jmp	short loc_100137BA
; ---------------------------------------------------------------------------

loc_10013784:				; CODE XREF: sub_100136F0+8Aj
		mov	eax, [esi+0DCh]
		push	dword ptr [eax+8]
		mov	eax, [esi+0C0h]
		call	eax
		mov	eax, [esi+13Ch]
		add	esp, 4
		call	eax
		mov	[esi+148h], eax
		mov	dword ptr [esi+180h], 1
		jmp	short loc_100137BA
; ---------------------------------------------------------------------------

loc_100137B2:				; CODE XREF: sub_100136F0+80j
		push	dword ptr [ecx+8]
		call	eax
		add	esp, 4

loc_100137BA:				; CODE XREF: sub_100136F0+6Cj
					; sub_100136F0+76j ...
		inc	dword ptr [esi+30h]
		mov	eax, [esi+30h]
		mov	[ebx], eax
		cmp	dword ptr [esi+0C0h], 0
		jz	short loc_10013819
		mov	eax, [esi+0DCh]
		test	eax, eax
		jz	short loc_10013819
		mov	ecx, [esi+13Ch]
		test	ecx, ecx
		jz	short loc_1001380B
		call	ecx
		cmp	[esi+148h], eax
		jnz	short loc_10013819
		dec	dword ptr [esi+180h]
		jnz	short loc_10013819
		mov	dword ptr [esi+148h], 0FFFFFFFFh
		mov	dword ptr [esi+180h], 0
		mov	eax, [esi+0DCh]

loc_1001380B:				; CODE XREF: sub_100136F0+EDj
		push	dword ptr [eax+8]
		mov	eax, [esi+0C4h]
		call	eax
		add	esp, 4

loc_10013819:				; CODE XREF: sub_100136F0+D9j
					; sub_100136F0+E3j ...
		cmp	dword ptr [esi+120h], 0
		jnz	short loc_1001382C
		mov	[esp+1Ch+var_C], 5Ch
		jmp	short loc_1001386F
; ---------------------------------------------------------------------------

loc_1001382C:				; CODE XREF: sub_100136F0+130j
		lea	eax, [esp+1Ch+var_8]
		push	eax
		push	[esp+20h+arg_1C]
		push	[esp+24h+arg_18]
		push	[esp+28h+arg_14]
		push	[esp+2Ch+arg_10]
		push	[esp+30h+arg_0]
		push	edi
		push	ebp
		push	esi
		call	sub_10008360
		add	esp, 24h
		mov	[esp+1Ch+var_C], eax
		test	eax, eax
		jnz	short loc_1001386F
		push	[esp+1Ch+var_8]
		push	dword ptr [ebx]
		push	esi
		call	sub_10009120
		add	esp, 0Ch
		test	eax, eax
		jz	loc_10013967

loc_1001386F:				; CODE XREF: sub_100136F0+13Aj
					; sub_100136F0+166j
		cmp	dword ptr [esi+0E0h], 0
		jz	loc_100139C7
		cmp	dword ptr [esi+0F4h], 0
		jz	loc_100139C7
		mov	eax, [esi+0C0h]
		test	eax, eax
		jz	short loc_100138ED
		mov	ecx, [esi+0DCh]
		test	ecx, ecx
		jz	short loc_100138ED
		mov	edx, [esi+13Ch]
		test	edx, edx
		jz	short loc_100138E6
		call	edx
		cmp	[esi+140h], eax
		jnz	short loc_100138B9
		inc	dword ptr [esi+178h]
		jmp	short loc_100138ED
; ---------------------------------------------------------------------------

loc_100138B9:				; CODE XREF: sub_100136F0+1BFj
		mov	eax, [esi+0DCh]
		push	dword ptr [eax]
		mov	eax, [esi+0C0h]
		call	eax
		mov	eax, [esi+13Ch]
		add	esp, 4
		call	eax
		mov	[esi+140h], eax
		mov	dword ptr [esi+178h], 1
		jmp	short loc_100138ED
; ---------------------------------------------------------------------------

loc_100138E6:				; CODE XREF: sub_100136F0+1B5j
		push	dword ptr [ecx]
		call	eax
		add	esp, 4

loc_100138ED:				; CODE XREF: sub_100136F0+1A1j
					; sub_100136F0+1ABj ...
		push	[esp+1Ch+arg_14]
		mov	eax, [esi+0F4h]
		push	[esp+20h+arg_10]
		push	[esp+24h+arg_0]
		push	edi
		push	ebp
		push	63h
		push	dword ptr [ebx]
		push	esi
		call	eax
		add	esp, 20h
		test	eax, eax
		jz	short loc_10013971
		mov	[ebx], eax
		cmp	dword ptr [esi+0C0h], 0
		jz	short loc_10013967
		mov	eax, [esi+0DCh]
		test	eax, eax
		jz	short loc_10013967
		mov	ecx, [esi+13Ch]
		test	ecx, ecx
		jz	short loc_1001395A
		call	ecx
		cmp	[esi+140h], eax
		jnz	short loc_10013967
		dec	dword ptr [esi+178h]
		jnz	short loc_10013967
		mov	dword ptr [esi+140h], 0FFFFFFFFh
		mov	dword ptr [esi+178h], 0
		mov	eax, [esi+0DCh]

loc_1001395A:				; CODE XREF: sub_100136F0+23Cj
		push	dword ptr [eax]
		mov	eax, [esi+0C4h]
		call	eax
		add	esp, 4

loc_10013967:				; CODE XREF: sub_100136F0+179j
					; sub_100136F0+228j ...
		pop	edi
		pop	ebp
		pop	ebx
		xor	eax, eax
		pop	esi
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_10013971:				; CODE XREF: sub_100136F0+21Dj
		cmp	dword ptr [esi+0C0h], 0
		jz	short loc_100139C7
		mov	eax, [esi+0DCh]
		test	eax, eax
		jz	short loc_100139C7
		mov	ecx, [esi+13Ch]
		test	ecx, ecx
		jz	short loc_100139BA
		call	ecx
		cmp	[esi+140h], eax
		jnz	short loc_100139C7
		dec	dword ptr [esi+178h]
		jnz	short loc_100139C7
		mov	dword ptr [esi+140h], 0FFFFFFFFh
		mov	dword ptr [esi+178h], 0
		mov	eax, [esi+0DCh]

loc_100139BA:				; CODE XREF: sub_100136F0+29Cj
		push	dword ptr [eax]
		mov	eax, [esi+0C4h]
		call	eax
		add	esp, 4

loc_100139C7:				; CODE XREF: sub_100136F0+186j
					; sub_100136F0+193j ...
		lea	eax, [esp+1Ch+var_4]
		push	eax
		push	dword ptr [ebx]
		push	[esp+24h+arg_24]
		push	[esp+28h+arg_20]
		push	[esp+2Ch+arg_1C]
		push	[esp+30h+arg_18]
		push	[esp+34h+arg_14]
		push	[esp+38h+arg_10]
		push	[esp+3Ch+arg_0]
		push	edi
		push	ebp
		push	esi
		call	sub_100135A0
		add	esp, 30h
		test	eax, eax
		jnz	short loc_10013A54
		push	[esp+1Ch+var_4]
		push	ebp
		push	63h
		push	dword ptr [ebx]
		push	esi
		call	sub_1000FC30
		add	esp, 14h
		mov	edi, eax
		cmp	[esp+1Ch+var_C], 0
		jnz	short loc_10013A27
		test	edi, edi
		js	short loc_10013A27
		push	ebp
		push	[esp+20h+var_8]
		push	edi
		push	esi
		call	sub_10008F70
		add	esp, 10h

loc_10013A27:				; CODE XREF: sub_100136F0+322j
					; sub_100136F0+326j
		mov	[ebx], edi
		test	edi, edi
		jns	loc_10013967
		push	0
		push	0
		push	esi
		call	ldap_get_lderrno
		pop	edi
		pop	ebp
		pop	ebx
		pop	esi
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_10013A43:				; CODE XREF: sub_100136F0+3Dj
					; sub_100136F0+53j ...
		push	0
		push	0
		push	59h
		push	esi
		call	ldap_set_lderrno
		mov	eax, 59h

loc_10013A54:				; CODE XREF: sub_100136F0+307j
		pop	edi
		pop	ebp
		pop	ebx
		pop	esi
		add	esp, 0Ch
		retn
sub_100136F0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10013A60	proc near		; CODE XREF: ldap_search_ext_s+45p
					; ldap_search_s+26p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch
arg_1C		= dword	ptr  20h
arg_20		= dword	ptr  24h
arg_24		= dword	ptr  28h
arg_28		= dword	ptr  2Ch
arg_2C		= dword	ptr  30h

		push	edi
		mov	edi, [esp+4+arg_20]
		test	edi, edi
		jz	short loc_10013A9D
		cmp	dword ptr [edi], 0
		jnz	short loc_10013A9D
		cmp	dword ptr [edi+4], 0
		jnz	short loc_10013A9D
		mov	eax, [esp+4+arg_0]
		test	eax, eax
		jz	short loc_10013A88
		push	0
		push	0
		push	59h
		push	eax
		call	ldap_set_lderrno

loc_10013A88:				; CODE XREF: sub_10013A60+1Aj
		mov	eax, [esp+4+arg_2C]
		test	eax, eax
		jz	short loc_10013A96
		mov	dword ptr [eax], 0

loc_10013A96:				; CODE XREF: sub_10013A60+2Ej
		mov	eax, 59h
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_10013A9D:				; CODE XREF: sub_10013A60+7j
					; sub_10013A60+Cj ...
		push	esi
		mov	esi, [esp+8+arg_0]
		lea	eax, [esp+8+arg_20]
		push	eax
		push	[esp+0Ch+arg_28]
		push	[esp+10h+arg_24]
		push	[esp+14h+arg_1C]
		push	[esp+18h+arg_18]
		push	[esp+1Ch+arg_14]
		push	[esp+20h+arg_10]
		push	[esp+24h+arg_C]
		push	[esp+28h+arg_8]
		push	[esp+2Ch+arg_4]
		push	esi
		call	sub_100136F0
		add	esp, 2Ch
		test	eax, eax
		jz	short loc_10013AE9
		mov	ecx, [esp+8+arg_2C]
		test	ecx, ecx
		jz	short loc_10013B4B
		pop	esi
		mov	dword ptr [ecx], 0
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_10013AE9:				; CODE XREF: sub_10013A60+76j
		push	ebx
		mov	ebx, [esp+0Ch+arg_2C]
		push	ebx
		push	edi
		mov	edi, [esp+14h+arg_20]
		push	1
		push	edi
		push	esi
		call	ldap_result
		push	0
		push	0
		push	esi
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_10013B10
		call	ldap_get_lderrno
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_10013B10:				; CODE XREF: sub_10013A60+A5j
		call	ldap_get_lderrno
		cmp	eax, 55h
		jnz	short loc_10013B40
		push	edi
		push	esi
		call	ldap_abandon
		push	0
		push	0
		push	55h
		push	esi
		call	ldap_set_lderrno
		test	ebx, ebx
		jz	short loc_10013B37
		mov	dword ptr [ebx], 0

loc_10013B37:				; CODE XREF: sub_10013A60+CFj
		pop	ebx
		pop	esi
		mov	eax, 55h
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_10013B40:				; CODE XREF: sub_10013A60+B8j
		push	0
		push	dword ptr [ebx]
		push	esi
		call	ldap_result2error
		pop	ebx

loc_10013B4B:				; CODE XREF: sub_10013A60+7Ej
		pop	esi
		pop	edi
		retn
sub_10013A60	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10013B50	proc near		; CODE XREF: sub_10013BC0+FBp
					; sub_10013BC0+11Ap ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		push	[esp+4+arg_8]
		mov	ebx, [esp+8+arg_0]
		push	offset aT	; "t{"
		push	ebx
		call	ber_printf
		add	esp, 0Ch
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_10013B70
		xor	eax, eax
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_10013B70:				; CODE XREF: sub_10013B50+1Aj
		push	esi
		push	edi
		mov	edi, [esp+0Ch+arg_4]
		inc	edi
		push	edi
		call	sub_10013290
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		jz	short loc_10013BAE
		push	edi		; Str
		push	ebx		; int
		mov	byte ptr [esi],	0
		call	sub_10013D20
		add	esp, 8
		cmp	eax, 0FFFFFFFFh
		jz	short loc_10013BAE
		push	offset asc_1001F9E8 ; "}"
		push	ebx
		mov	byte ptr [esi],	29h
		call	ber_printf
		add	esp, 8
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_10013BB4

loc_10013BAE:				; CODE XREF: sub_10013B50+34j
					; sub_10013B50+46j
		pop	edi
		pop	esi
		xor	eax, eax
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_10013BB4:				; CODE XREF: sub_10013B50+5Cj
		pop	edi
		lea	eax, [esi+1]
		pop	esi
		pop	ebx
		retn
sub_10013B50	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10013BC0(int,	char *Str)
sub_10013BC0	proc near		; CODE XREF: sub_100135A0+9Dp
					; sub_10013D20+9Dp

arg_0		= dword	ptr  4
Str		= dword	ptr  8

		push	ebx
		push	ebp
		push	esi
		mov	esi, [esp+0Ch+Str]
		xor	ebx, ebx
		push	edi
		mov	al, [esi]
		test	al, al
		jz	loc_10013D0E
		mov	ebp, [esp+10h+arg_0]
		jmp	short loc_10013BE0
; ---------------------------------------------------------------------------
		align 10h

loc_10013BE0:				; CODE XREF: sub_10013BC0+18j
					; sub_10013BC0+148j
		movsx	eax, al
		sub	eax, 20h
		jz	loc_10013D03
		sub	eax, 8
		jz	short loc_10013C37
		dec	eax
		jz	short loc_10013C19
		push	0		; Val
		push	esi		; Str
		call	ds:strchr
		push	esi
		push	ebp
		mov	edi, eax
		call	sub_10013DF0
		add	esp, 10h
		cmp	eax, 0FFFFFFFFh
		jz	loc_10013CC9
		mov	esi, edi
		jmp	loc_10013D04
; ---------------------------------------------------------------------------

loc_10013C19:				; CODE XREF: sub_10013BC0+32j
		push	offset asc_100200F0 ; "]"
		push	ebp
		call	ber_printf
		add	esp, 8
		cmp	eax, 0FFFFFFFFh
		jz	loc_10013CC9
		inc	esi
		dec	ebx
		jmp	loc_10013D04
; ---------------------------------------------------------------------------

loc_10013C37:				; CODE XREF: sub_10013BC0+2Fj
		mov	dl, [esi+1]
		inc	esi
		mov	al, dl
		cmp	al, 21h
		jz	loc_10013CEA
		cmp	al, 26h
		jz	loc_10013CD1
		cmp	al, 7Ch
		jz	short loc_10013CB2
		xor	ecx, ecx
		mov	eax, 1
		mov	edi, esi
		test	dl, dl
		jz	short loc_10013CC9
		mov	edi, edi

loc_10013C60:				; CODE XREF: sub_10013BC0+D2j
		test	eax, eax
		jz	short loc_10013C98
		test	ecx, ecx
		jnz	short loc_10013C78
		mov	dl, [edi]
		cmp	dl, 28h
		jnz	short loc_10013C72
		inc	eax
		jmp	short loc_10013C78
; ---------------------------------------------------------------------------

loc_10013C72:				; CODE XREF: sub_10013BC0+ADj
		cmp	dl, 29h
		jnz	short loc_10013C78
		dec	eax

loc_10013C78:				; CODE XREF: sub_10013BC0+A6j
					; sub_10013BC0+B0j ...
		cmp	byte ptr [edi],	5Ch
		jnz	short loc_10013C88
		test	ecx, ecx
		jnz	short loc_10013C88
		mov	ecx, 1
		jmp	short loc_10013C8A
; ---------------------------------------------------------------------------

loc_10013C88:				; CODE XREF: sub_10013BC0+BBj
					; sub_10013BC0+BFj
		xor	ecx, ecx

loc_10013C8A:				; CODE XREF: sub_10013BC0+C6j
		test	eax, eax
		jz	short loc_10013C8F
		inc	edi

loc_10013C8F:				; CODE XREF: sub_10013BC0+CCj
		cmp	byte ptr [edi],	0
		jnz	short loc_10013C60
		test	eax, eax
		jnz	short loc_10013CC9

loc_10013C98:				; CODE XREF: sub_10013BC0+A2j
		push	esi
		push	ebp
		mov	byte ptr [edi],	0
		call	sub_10013DF0
		add	esp, 8
		cmp	eax, 0FFFFFFFFh
		jz	short loc_10013CC9
		mov	byte ptr [edi],	29h
		lea	esi, [edi+1]
		jmp	short loc_10013D04
; ---------------------------------------------------------------------------

loc_10013CB2:				; CODE XREF: sub_10013BC0+8Fj
		push	0
		push	0A1h
		push	esi
		push	ebp
		call	sub_10013B50
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		jnz	short loc_10013D04

loc_10013CC9:				; CODE XREF: sub_10013BC0+4Cj
					; sub_10013BC0+6Aj ...
		pop	edi
		pop	esi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_10013CD1:				; CODE XREF: sub_10013BC0+87j
		push	0
		push	0A0h
		push	esi
		push	ebp
		call	sub_10013B50
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		jz	short loc_10013CC9
		jmp	short loc_10013D04
; ---------------------------------------------------------------------------

loc_10013CEA:				; CODE XREF: sub_10013BC0+7Fj
		push	1
		push	0A2h
		push	esi
		push	ebp
		call	sub_10013B50
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		jz	short loc_10013CC9
		jmp	short loc_10013D04
; ---------------------------------------------------------------------------

loc_10013D03:				; CODE XREF: sub_10013BC0+26j
		inc	esi

loc_10013D04:				; CODE XREF: sub_10013BC0+54j
					; sub_10013BC0+72j ...
		mov	al, [esi]
		test	al, al
		jnz	loc_10013BE0

loc_10013D0E:				; CODE XREF: sub_10013BC0+Ej
		pop	edi
		neg	ebx
		pop	esi
		sbb	ebx, ebx
		pop	ebp
		mov	eax, ebx
		pop	ebx
		retn
sub_10013BC0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10013D20(int,	char *Str)
sub_10013D20	proc near		; CODE XREF: sub_10013B50+3Bp

arg_0		= dword	ptr  4
Str		= dword	ptr  8

		push	ebx
		push	ebp
		push	esi
		mov	esi, [esp+0Ch+Str]
		push	edi
		cmp	byte ptr [esi],	0
		jz	short loc_10013D55
		mov	ebp, ds:isspace

loc_10013D33:				; CODE XREF: sub_10013D20+B2j
		mov	al, [esi]
		test	al, al
		jz	short loc_10013D55
		lea	esp, [esp+0]

loc_10013D40:				; CODE XREF: sub_10013D20+33j
		movsx	eax, al
		push	eax		; C
		call	ebp ; isspace
		add	esp, 4
		test	eax, eax
		jz	short loc_10013D5C
		mov	al, [esi+1]
		inc	esi
		test	al, al
		jnz	short loc_10013D40

loc_10013D55:				; CODE XREF: sub_10013D20+Bj
					; sub_10013D20+17j ...
		pop	edi
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_10013D5C:				; CODE XREF: sub_10013D20+2Bj
		cmp	byte ptr [esi],	0
		jz	short loc_10013D55
		mov	cl, [esi+1]
		lea	ebx, [esi+1]
		xor	edx, edx
		mov	eax, 1
		test	cl, cl
		jz	short loc_10013DA5

loc_10013D72:				; CODE XREF: sub_10013D20+83j
		test	eax, eax
		jz	short loc_10013DA5
		test	edx, edx
		jnz	short loc_10013D88
		cmp	cl, 28h
		jnz	short loc_10013D82
		inc	eax
		jmp	short loc_10013D88
; ---------------------------------------------------------------------------

loc_10013D82:				; CODE XREF: sub_10013D20+5Dj
		cmp	cl, 29h
		jnz	short loc_10013D88
		dec	eax

loc_10013D88:				; CODE XREF: sub_10013D20+58j
					; sub_10013D20+60j ...
		cmp	cl, 5Ch
		jnz	short loc_10013D98
		test	edx, edx
		jnz	short loc_10013D98
		mov	edx, 1
		jmp	short loc_10013D9A
; ---------------------------------------------------------------------------

loc_10013D98:				; CODE XREF: sub_10013D20+6Bj
					; sub_10013D20+6Fj
		xor	edx, edx

loc_10013D9A:				; CODE XREF: sub_10013D20+76j
		test	eax, eax
		jz	short loc_10013D9F
		inc	ebx

loc_10013D9F:				; CODE XREF: sub_10013D20+7Cj
		mov	cl, [ebx]
		test	cl, cl
		jnz	short loc_10013D72

loc_10013DA5:				; CODE XREF: sub_10013D20+50j
					; sub_10013D20+54j
		xor	edi, edi
		cmp	byte ptr [ebx],	0
		cmovnz	edi, ebx
		test	edi, edi
		jz	short loc_10013DDF
		mov	bl, [edi+1]
		push	esi		; Str
		push	[esp+14h+arg_0]	; int
		mov	byte ptr [edi+1], 0
		call	sub_10013BC0
		add	esp, 8
		cmp	eax, 0FFFFFFFFh
		jz	short loc_10013DDF
		mov	[edi+1], bl
		lea	esi, [edi+1]
		test	bl, bl
		jnz	loc_10013D33
		pop	edi
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_10013DDF:				; CODE XREF: sub_10013D20+8Fj
					; sub_10013D20+A8j
		pop	edi
		pop	esi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		retn
sub_10013D20	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10013DF0	proc near		; CODE XREF: sub_10013BC0+41p
					; sub_10013BC0+DDp

var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ecx
		push	esi
		push	edi
		push	[esp+0Ch+arg_4]
		or	esi, 0FFFFFFFFh
		call	sub_1000BAB0
		mov	edi, eax
		add	esp, 4
		test	edi, edi
		jnz	short loc_10013E0E
		pop	edi
		or	eax, esi
		pop	esi
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_10013E0E:				; CODE XREF: sub_10013DF0+16j
		push	3Dh		; Val
		push	edi		; Str
		call	ds:strchr
		add	esp, 8
		test	eax, eax
		jz	loc_1001406E
		push	ebx
		mov	byte ptr [eax],	0
		mov	bl, [eax-1]
		push	ebp
		lea	ebp, [eax+1]
		cmp	bl, 3Ch
		jz	short loc_10013E41
		cmp	bl, 3Eh
		jz	short loc_10013E41
		cmp	bl, 7Eh
		jz	short loc_10013E41
		cmp	bl, 3Ah
		jnz	short loc_10013E45

loc_10013E41:				; CODE XREF: sub_10013DF0+40j
					; sub_10013DF0+45j ...
		mov	byte ptr [eax-1], 0

loc_10013E45:				; CODE XREF: sub_10013DF0+4Fj
		push	edi
		call	sub_10013380
		add	esp, 4
		test	eax, eax
		jz	loc_1001406C
		movsx	eax, bl
		add	eax, 0FFFFFFC6h	; switch 69 cases
		cmp	eax, 44h
		ja	loc_10013FC1	; jumptable 10013E6C default case
		movzx	eax, ds:byte_10014094[eax]
		jmp	ds:off_10014080[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_10013E73:				; CODE XREF: sub_10013DF0+7Cj
					; DATA XREF: .text:off_10014080o
		mov	ebx, 0A6h	; jumptable 10013E6C case 60
		jmp	loc_10013FD3
; ---------------------------------------------------------------------------

loc_10013E7D:				; CODE XREF: sub_10013DF0+7Cj
					; DATA XREF: .text:off_10014080o
		mov	ebx, 0A5h	; jumptable 10013E6C case 62
		jmp	loc_10013FD3
; ---------------------------------------------------------------------------

loc_10013E87:				; CODE XREF: sub_10013DF0+7Cj
					; DATA XREF: .text:off_10014080o
		mov	ebx, 0A8h	; jumptable 10013E6C case 126
		jmp	loc_10013FD3
; ---------------------------------------------------------------------------

loc_10013E91:				; CODE XREF: sub_10013DF0+7Cj
					; DATA XREF: .text:off_10014080o
		push	3Ah		; jumptable 10013E6C case 58
		push	edi		; Str
		call	ds:strrchr
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		jz	loc_1001406C
		push	offset aDn	; ":dn"
		push	ebx		; Str1
		call	ds:_stricmp
		add	esp, 8
		test	eax, eax
		jnz	short loc_10013EC2
		mov	[esp+14h+var_4], eax
		mov	[ebx], al
		jmp	short loc_10013EFF
; ---------------------------------------------------------------------------

loc_10013EC2:				; CODE XREF: sub_10013DF0+C8j
		lea	eax, [ebx+1]
		mov	[esp+14h+arg_4], 0
		push	3Ah		; Ch
		push	edi		; Str
		mov	[esp+1Ch+var_4], eax
		mov	byte ptr [ebx],	0
		call	ds:strrchr
		mov	ebx, eax
		add	esp, 8
		test	ebx, ebx
		jz	short loc_10013F07
		push	offset aDn	; ":dn"
		push	ebx		; Str1
		call	ds:_stricmp
		add	esp, 8
		test	eax, eax
		jnz	loc_1001406C
		mov	[ebx], al

loc_10013EFF:				; CODE XREF: sub_10013DF0+D0j
		mov	[esp+14h+arg_4], 1

loc_10013F07:				; CODE XREF: sub_10013DF0+F4j
		mov	ebx, [esp+14h+arg_0]
		push	0A9h
		push	offset aT	; "t{"
		push	ebx
		call	ber_printf
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, 0FFFFFFFFh
		jz	loc_1001406C
		mov	eax, [esp+14h+var_4]
		test	eax, eax
		jz	short loc_10013F50
		push	eax
		push	81h
		push	offset aTs_0	; "ts"
		push	ebx
		call	ber_printf
		mov	esi, eax
		add	esp, 10h
		cmp	esi, 0FFFFFFFFh
		jz	loc_1001406C

loc_10013F50:				; CODE XREF: sub_10013DF0+13Fj
		cmp	byte ptr [edi],	0
		jz	short loc_10013F74
		push	edi
		push	82h
		push	offset aTs_0	; "ts"
		push	ebx
		call	ber_printf
		mov	esi, eax
		add	esp, 10h
		cmp	esi, 0FFFFFFFFh
		jz	loc_1001406C

loc_10013F74:				; CODE XREF: sub_10013DF0+163j
		push	ebp
		call	sub_100141A0
		add	esp, 4
		test	eax, eax
		js	loc_1001406C
		push	[esp+14h+arg_4]
		push	84h
		push	eax
		push	ebp
		push	83h
		push	offset aTotb	; "totb}"
		push	ebx
		call	ber_printf
		mov	esi, eax
		add	esp, 1Ch
		cmp	esi, 0FFFFFFFFh
		jz	loc_1001406C
		pop	ebp
		pop	ebx
		push	edi
		xor	esi, esi
		call	ldap_x_free
		add	esp, 4
		mov	eax, esi
		pop	edi
		pop	esi
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_10013FC1:				; CODE XREF: sub_10013DF0+6Fj
					; sub_10013DF0+7Cj
					; DATA XREF: ...
		push	ebp		; jumptable 10013E6C default case
		call	sub_100132E0
		add	esp, 4
		test	eax, eax
		jnz	short loc_10013FFB
		mov	ebx, 0A3h

loc_10013FD3:				; CODE XREF: sub_10013DF0+88j
					; sub_10013DF0+92j ...
		push	ebp
		call	sub_100141A0
		add	esp, 4
		test	eax, eax
		js	loc_1001406C
		push	eax
		push	ebp
		push	edi
		push	ebx
		push	offset aTSo	; "t{so}"
		push	[esp+28h+arg_0]
		call	ber_printf
		add	esp, 18h
		jmp	short loc_10014042
; ---------------------------------------------------------------------------

loc_10013FFB:				; CODE XREF: sub_10013DF0+1DCj
		mov	ecx, offset asc_10020104 ; "*"
		mov	eax, ebp

loc_10014002:				; CODE XREF: sub_10013DF0+22Cj
		mov	dl, [eax]
		cmp	dl, [ecx]
		jnz	short loc_10014022
		test	dl, dl
		jz	short loc_1001401E
		mov	dl, [eax+1]
		cmp	dl, [ecx+1]
		jnz	short loc_10014022
		add	eax, 2
		add	ecx, 2
		test	dl, dl
		jnz	short loc_10014002

loc_1001401E:				; CODE XREF: sub_10013DF0+21Aj
		xor	eax, eax
		jmp	short loc_10014027
; ---------------------------------------------------------------------------

loc_10014022:				; CODE XREF: sub_10013DF0+216j
					; sub_10013DF0+222j
		sbb	eax, eax
		or	eax, 1

loc_10014027:				; CODE XREF: sub_10013DF0+230j
		test	eax, eax
		jnz	short loc_1001405C
		push	edi
		push	87h
		push	offset aTs_0	; "ts"
		push	[esp+20h+arg_0]
		call	ber_printf
		add	esp, 10h

loc_10014042:				; CODE XREF: sub_10013DF0+209j
		mov	esi, eax
		cmp	esi, 0FFFFFFFFh
		jz	short loc_1001406C
		pop	ebp
		pop	ebx
		push	edi
		xor	esi, esi
		call	ldap_x_free
		add	esp, 4
		mov	eax, esi
		pop	edi
		pop	esi
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_1001405C:				; CODE XREF: sub_10013DF0+239j
		push	ebp
		push	edi
		push	[esp+1Ch+arg_0]
		call	sub_100140E0
		add	esp, 0Ch
		mov	esi, eax

loc_1001406C:				; CODE XREF: sub_10013DF0+60j
					; sub_10013DF0+B1j ...
		pop	ebp
		pop	ebx

loc_1001406E:				; CODE XREF: sub_10013DF0+2Cj
		push	edi
		call	ldap_x_free
		add	esp, 4
		mov	eax, esi
		pop	edi
		pop	esi
		pop	ecx
		retn
sub_10013DF0	endp

; ---------------------------------------------------------------------------
		align 10h
off_10014080	dd offset loc_10013E91,	offset loc_10013E73, offset loc_10013E7D
					; DATA XREF: sub_10013DF0+7Cr
		dd offset loc_10013E87,	offset loc_10013FC1 ; jump table for switch statement
byte_10014094	db	0,     4,     1,     4 ; DATA XREF: sub_10013DF0+75r
		db	2,     4,     4,     4 ; indirect table	for switch statement
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	3
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100140E0	proc near		; CODE XREF: sub_10013DF0+272p

var_1		= byte ptr -1
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ecx
		push	ebp
		push	[esp+8+arg_4]
		mov	ebp, [esp+0Ch+arg_0]
		push	0A4h
		push	offset aTS	; "t{s{"
		push	ebp
		mov	[esp+18h+var_1], 0
		call	ber_printf
		add	esp, 10h
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_1001410C
		or	eax, eax
		pop	ebp
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_1001410C:				; CODE XREF: sub_100140E0+25j
		push	ebx
		mov	ebx, [esp+0Ch+arg_8]
		push	esi
		push	edi
		test	ebx, ebx
		jz	short loc_10014177

loc_10014117:				; CODE XREF: sub_100140E0+95j
		push	ebx
		call	sub_100132E0
		mov	edi, eax
		add	esp, 4
		test	edi, edi
		jz	short loc_1001412A
		mov	byte ptr [edi],	0
		inc	edi

loc_1001412A:				; CODE XREF: sub_100140E0+44j
		cmp	[esp+14h+var_1], 0
		jnz	short loc_10014138
		mov	esi, 80h
		jmp	short loc_10014144
; ---------------------------------------------------------------------------

loc_10014138:				; CODE XREF: sub_100140E0+4Fj
		mov	esi, edi
		neg	esi
		sbb	esi, esi
		add	esi, 82h

loc_10014144:				; CODE XREF: sub_100140E0+56j
		cmp	byte ptr [ebx],	0
		jz	short loc_1001416C
		push	ebx
		call	sub_100141A0
		add	esp, 4
		test	eax, eax
		js	short loc_10014193
		push	eax
		push	ebx
		push	esi
		push	offset aTo	; "to"
		push	ebp
		call	ber_printf
		add	esp, 14h
		cmp	eax, 0FFFFFFFFh
		jz	short loc_10014193

loc_1001416C:				; CODE XREF: sub_100140E0+67j
		mov	[esp+14h+var_1], 1
		mov	ebx, edi
		test	edi, edi
		jnz	short loc_10014117

loc_10014177:				; CODE XREF: sub_100140E0+35j
		push	offset asc_1001F1C8 ; "}}"
		push	ebp
		call	ber_printf
		add	esp, 8
		inc	eax
		neg	eax
		sbb	eax, eax
		pop	edi
		pop	esi
		neg	eax
		pop	ebx
		dec	eax
		pop	ebp
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_10014193:				; CODE XREF: sub_100140E0+74j
					; sub_100140E0+8Aj
		pop	edi
		pop	esi
		pop	ebx
		or	eax, 0FFFFFFFFh
		pop	ebp
		pop	ecx
		retn
sub_100140E0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100141A0	proc near		; CODE XREF: sub_10013DF0+185p
					; sub_10013DF0+1E4p ...

arg_0		= dword	ptr  4

		push	ebx
		push	ebp
		mov	ebp, [esp+8+arg_0]
		xor	ebx, ebx
		push	esi
		xor	esi, esi
		mov	ecx, ebp
		push	edi
		mov	edi, ebp
		cmp	[ebp+0], bl
		jz	short loc_10014226

loc_100141B5:				; CODE XREF: sub_100141A0+84j
		test	esi, esi
		jz	short loc_1001420C
		mov	dl, [edi]
		lea	eax, [edx-30h]
		cmp	al, 9
		ja	short loc_100141CA
		movsx	eax, dl
		sub	eax, 30h
		jmp	short loc_100141E6
; ---------------------------------------------------------------------------

loc_100141CA:				; CODE XREF: sub_100141A0+20j
		lea	eax, [edx-41h]
		cmp	al, 5
		ja	short loc_100141D9
		movsx	eax, dl
		sub	eax, 37h
		jmp	short loc_100141E6
; ---------------------------------------------------------------------------

loc_100141D9:				; CODE XREF: sub_100141A0+2Fj
		lea	eax, [edx-61h]
		cmp	al, 5
		ja	short loc_100141EC
		movsx	eax, dl
		sub	eax, 57h

loc_100141E6:				; CODE XREF: sub_100141A0+28j
					; sub_100141A0+37j
		test	eax, eax
		jns	short loc_100141F8
		jmp	short loc_100141EF
; ---------------------------------------------------------------------------

loc_100141EC:				; CODE XREF: sub_100141A0+3Ej
		or	eax, 0FFFFFFFFh

loc_100141EF:				; CODE XREF: sub_100141A0+4Aj
		test	ebx, ebx
		jz	short loc_1001422F
		mov	[ecx], dl
		inc	ecx
		xor	esi, esi

loc_100141F8:				; CODE XREF: sub_100141A0+48j
		test	ebx, ebx
		jz	short loc_10014205
		shl	al, 4
		xor	ebx, ebx
		mov	[ecx], al
		jmp	short loc_10014220
; ---------------------------------------------------------------------------

loc_10014205:				; CODE XREF: sub_100141A0+5Aj
		or	[ecx], al
		inc	ecx
		xor	esi, esi
		jmp	short loc_10014220
; ---------------------------------------------------------------------------

loc_1001420C:				; CODE XREF: sub_100141A0+17j
		mov	al, [edi]
		cmp	al, 5Ch
		jz	short loc_10014219
		mov	[ecx], al
		inc	ecx
		xor	esi, esi
		jmp	short loc_10014220
; ---------------------------------------------------------------------------

loc_10014219:				; CODE XREF: sub_100141A0+70j
		mov	esi, 1
		mov	ebx, esi

loc_10014220:				; CODE XREF: sub_100141A0+63j
					; sub_100141A0+6Aj ...
		inc	edi
		cmp	byte ptr [edi],	0
		jnz	short loc_100141B5

loc_10014226:				; CODE XREF: sub_100141A0+13j
		pop	edi
		pop	esi
		sub	ecx, ebp
		pop	ebp
		mov	eax, ecx
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_1001422F:				; CODE XREF: sub_100141A0+51j
		pop	edi
		pop	esi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		retn
sub_100141A0	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 418. ldap_set_option

; =============== S U B	R O U T	I N E =======================================


		public ldap_set_option
ldap_set_option	proc near		; CODE XREF: sub_1000B840+8Cp
					; DATA XREF: .rdata:off_10020938o

var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 14h
		push	ebx
		push	esi
		mov	esi, [esp+1Ch+arg_0]
		test	esi, esi
		jnz	short loc_1001425F
		cmp	dword_100249D0,	esi
		jnz	short loc_1001425A
		call	sub_1000B840

loc_1001425A:				; CODE XREF: ldap_set_option+13j
		mov	esi, offset dword_10025280

loc_1001425F:				; CODE XREF: ldap_set_option+Bj
		mov	ebx, [esp+1Ch+arg_4]
		cmp	ebx, 61h
		jnz	short loc_100142C1
		mov	eax, [esp+1Ch+arg_8]
		movdqu	xmm1, xmmword ptr [eax]
		lea	eax, [esp+1Ch+var_10]
		push	eax
		movdqa	xmm0, xmm1
		movd	[esp+20h+var_10], xmm1
		psrldq	xmm0, 4
		movd	[esp+20h+var_C], xmm0
		movdqa	xmm0, xmm1
		movdqu	xmmword_100249C0, xmm1
		push	20h
		psrldq	xmm0, 8
		psrldq	xmm1, 0Ch
		push	0
		movd	[esp+28h+var_8], xmm0
		movd	[esp+28h+var_4], xmm1
		call	ber_set_option
		neg	eax
		pop	esi
		sbb	eax, eax
		pop	ebx
		add	esp, 14h
		retn	0Ch
; ---------------------------------------------------------------------------

loc_100142C1:				; CODE XREF: ldap_set_option+26j
		cmp	ebx, 6Eh
		jnz	short loc_100142D0
		pop	esi
		xor	eax, eax
		pop	ebx
		add	esp, 14h
		retn	0Ch
; ---------------------------------------------------------------------------

loc_100142D0:				; CODE XREF: ldap_set_option+84j
		test	esi, esi
		jnz	short loc_100142DF
		pop	esi
		or	eax, 0FFFFFFFFh
		pop	ebx
		add	esp, 14h
		retn	0Ch
; ---------------------------------------------------------------------------

loc_100142DF:				; CODE XREF: ldap_set_option+92j
		push	edi
		xor	edi, edi
		cmp	esi, offset dword_10025280
		jz	short loc_1001435A
		cmp	ebx, 65h
		jz	short loc_1001435A
		cmp	ebx, 5
		jz	short loc_1001435A
		mov	eax, [esi+0C0h]
		test	eax, eax
		jz	short loc_1001435A
		mov	ecx, [esi+0DCh]
		test	ecx, ecx
		jz	short loc_1001435A
		mov	edx, [esi+13Ch]
		test	edx, edx
		jz	short loc_10014352
		call	edx
		cmp	[esi+15Ch], eax
		jnz	short loc_10014324
		inc	dword ptr [esi+194h]
		jmp	short loc_1001435A
; ---------------------------------------------------------------------------

loc_10014324:				; CODE XREF: ldap_set_option+DAj
		mov	eax, [esi+0DCh]
		push	dword ptr [eax+1Ch]
		mov	eax, [esi+0C0h]
		call	eax
		mov	eax, [esi+13Ch]
		add	esp, 4
		call	eax
		mov	[esi+15Ch], eax
		mov	dword ptr [esi+194h], 1
		jmp	short loc_1001435A
; ---------------------------------------------------------------------------

loc_10014352:				; CODE XREF: ldap_set_option+D0j
		push	dword ptr [ecx+1Ch]
		call	eax
		add	esp, 4

loc_1001435A:				; CODE XREF: ldap_set_option+A8j
					; ldap_set_option+ADj ...
		cmp	ebx, 4F00h
		jg	loc_100147B8
		jz	loc_10014708
		add	ebx, 0FFFFFFFEh	; switch 101 cases
		cmp	ebx, 64h
		ja	loc_100147C3	; jumptable 1001437F default case
		movzx	eax, ds:byte_100148DC[ebx]
		jmp	ds:off_10014870[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_10014386:				; CODE XREF: ldap_set_option+13Fj
					; DATA XREF: .text:off_10014870o
		cmp	[esp+20h+arg_8], edi ; jumptable 1001437F case 8
		jz	short loc_10014398
		or	dword ptr [esi+50h], 80000000h
		jmp	loc_10014805
; ---------------------------------------------------------------------------

loc_10014398:				; CODE XREF: ldap_set_option+14Aj
		and	dword ptr [esi+50h], 7FFFFFFFh
		jmp	loc_10014805
; ---------------------------------------------------------------------------

loc_100143A4:				; CODE XREF: ldap_set_option+13Fj
					; DATA XREF: .text:off_10014870o
		cmp	[esp+20h+arg_8], edi ; jumptable 1001437F case 10
		jz	short loc_100143B6
		or	dword ptr [esi+50h], 40000000h
		jmp	loc_10014805
; ---------------------------------------------------------------------------

loc_100143B6:				; CODE XREF: ldap_set_option+168j
		and	dword ptr [esi+50h], 0BFFFFFFFh
		jmp	loc_10014805
; ---------------------------------------------------------------------------

loc_100143C2:				; CODE XREF: ldap_set_option+13Fj
					; DATA XREF: .text:off_10014870o
		cmp	[esp+20h+arg_8], edi ; jumptable 1001437F case 9
		jz	short loc_100143D4
		or	dword ptr [esi+50h], 10000000h
		jmp	loc_10014805
; ---------------------------------------------------------------------------

loc_100143D4:				; CODE XREF: ldap_set_option+186j
		and	dword ptr [esi+50h], 0EFFFFFFFh
		jmp	loc_10014805
; ---------------------------------------------------------------------------

loc_100143E0:				; CODE XREF: ldap_set_option+13Fj
					; DATA XREF: .text:off_10014870o
		cmp	[esp+20h+arg_8], edi ; jumptable 1001437F case 98
		jz	short loc_100143F2
		or	dword ptr [esi+50h], 8000000h
		jmp	loc_10014805
; ---------------------------------------------------------------------------

loc_100143F2:				; CODE XREF: ldap_set_option+1A4j
		and	dword ptr [esi+50h], 0F7FFFFFFh
		jmp	loc_10014805
; ---------------------------------------------------------------------------

loc_100143FE:				; CODE XREF: ldap_set_option+13Fj
					; DATA XREF: .text:off_10014870o
		cmp	[esp+20h+arg_8], edi ; jumptable 1001437F case 102
		jz	short loc_10014410
		or	dword ptr [esi+50h], 2000000h
		jmp	loc_10014805
; ---------------------------------------------------------------------------

loc_10014410:				; CODE XREF: ldap_set_option+1C2j
		and	dword ptr [esi+50h], 0FDFFFFFFh
		jmp	loc_10014805
; ---------------------------------------------------------------------------

loc_1001441C:				; CODE XREF: ldap_set_option+13Fj
					; DATA XREF: .text:off_10014870o
		mov	eax, [esp+20h+arg_8] ; jumptable 1001437F case 2
		mov	eax, [eax]
		mov	[esi+10h], eax
		jmp	loc_10014805
; ---------------------------------------------------------------------------

loc_1001442A:				; CODE XREF: ldap_set_option+13Fj
					; DATA XREF: .text:off_10014870o
		mov	eax, [esp+20h+arg_8] ; jumptable 1001437F case 3
		mov	eax, [eax]
		mov	[esi+18h], eax
		jmp	loc_10014805
; ---------------------------------------------------------------------------

loc_10014438:				; CODE XREF: ldap_set_option+13Fj
					; DATA XREF: .text:off_10014870o
		mov	eax, [esp+20h+arg_8] ; jumptable 1001437F case 4
		mov	eax, [eax]
		mov	[esi+14h], eax
		jmp	loc_10014805
; ---------------------------------------------------------------------------

loc_10014446:				; CODE XREF: ldap_set_option+13Fj
					; DATA XREF: .text:off_10014870o
		mov	eax, [esp+20h+arg_8] ; jumptable 1001437F case 16
		mov	eax, [eax]
		mov	[esi+4Ch], eax
		jmp	loc_10014805
; ---------------------------------------------------------------------------

loc_10014454:				; CODE XREF: ldap_set_option+13Fj
					; DATA XREF: .text:off_10014870o
		mov	eax, [esp+20h+arg_8] ; jumptable 1001437F case 17
		mov	ecx, [esi+64h]
		mov	eax, [eax]
		mov	[esi+8], eax
		test	ecx, ecx
		jz	loc_10014805
		mov	[ecx+8], eax
		jmp	loc_10014805
; ---------------------------------------------------------------------------

loc_10014470:				; CODE XREF: ldap_set_option+13Fj
					; DATA XREF: .text:off_10014870o
		push	[esp+20h+arg_8]	; jumptable 1001437F case 18
		lea	eax, [esi+114h]
		push	eax
		push	esi
		call	sub_10002AA0
		add	esp, 0Ch
		mov	edi, eax
		jmp	loc_10014805
; ---------------------------------------------------------------------------

loc_1001448B:				; CODE XREF: ldap_set_option+13Fj
					; DATA XREF: .text:off_10014870o
		push	[esp+20h+arg_8]	; jumptable 1001437F case 19
		lea	eax, [esi+118h]
		push	eax
		push	esi
		call	sub_10002AA0
		add	esp, 0Ch
		mov	edi, eax
		jmp	loc_10014805
; ---------------------------------------------------------------------------

loc_100144A6:				; CODE XREF: ldap_set_option+13Fj
					; DATA XREF: .text:off_10014870o
		mov	eax, [esp+20h+arg_8] ; jumptable 1001437F case 6
		mov	[esi+70h], eax
		jmp	loc_10014805
; ---------------------------------------------------------------------------

loc_100144B2:				; CODE XREF: ldap_set_option+13Fj
					; DATA XREF: .text:off_10014870o
		mov	eax, [esp+20h+arg_8] ; jumptable 1001437F case 7
		mov	[esi+74h], eax
		jmp	loc_10014805
; ---------------------------------------------------------------------------

loc_100144BE:				; CODE XREF: ldap_set_option+13Fj
					; DATA XREF: .text:off_10014870o
		push	[esp+20h+arg_8]	; jumptable 1001437F case 11
		push	esi
		call	sub_1000C200

loc_100144C8:				; CODE XREF: ldap_set_option+573j
		mov	edi, eax
		add	esp, 8
		test	edi, edi
		jz	loc_10014805
		push	0
		push	0
		push	edi
		push	esi
		call	ldap_set_lderrno
		or	edi, 0FFFFFFFFh
		jmp	loc_10014805
; ---------------------------------------------------------------------------

loc_100144E8:				; CODE XREF: ldap_set_option+13Fj
					; DATA XREF: .text:off_10014870o
		push	esi		; jumptable 1001437F case 5
		call	sub_1000B970
		mov	eax, [esp+24h+arg_8]
		push	esi
		movdqu	xmm0, xmmword ptr [eax]
		movdqu	xmmword	ptr [esi+0B8h],	xmm0
		movdqu	xmm0, xmmword ptr [eax+10h]
		movdqu	xmmword	ptr [esi+0C8h],	xmm0
		mov	eax, [eax+20h]
		mov	[esi+0D8h], eax
		call	sub_1000B900
		add	esp, 8
		xor	eax, eax
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 14h
		retn	0Ch
; ---------------------------------------------------------------------------

loc_10014528:				; CODE XREF: ldap_set_option+13Fj
					; DATA XREF: .text:off_10014870o
		mov	eax, [esp+20h+arg_8] ; jumptable 1001437F case 101
		movdqu	xmm0, xmmword ptr [eax]
		movdqu	xmmword	ptr [esi+128h],	xmm0
		movq	xmm0, qword ptr	[eax+10h]
		mov	eax, 0Eh
		movq	qword ptr [esi+138h], xmm0
		mov	[esi+128h], edi
		mov	[esi+12Ch], edi
		mov	[esi+130h], edi
		mov	[esi+134h], edi
		mov	[esi+138h], edi
		add	esi, 178h
		mov	edi, edi

loc_10014570:				; CODE XREF: ldap_set_option+33Ej
		mov	dword ptr [esi-38h], 0FFFFFFFFh
		lea	esi, [esi+4]
		mov	[esi-4], edi
		dec	eax
		jnz	short loc_10014570
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 14h
		retn	0Ch
; ---------------------------------------------------------------------------

loc_10014589:				; CODE XREF: ldap_set_option+13Fj
					; DATA XREF: .text:off_10014870o
		mov	eax, [esp+20h+arg_8] ; jumptable 1001437F case 96
		movdqu	xmm0, xmmword ptr [eax]
		movdqu	xmmword	ptr [esi+0A4h],	xmm0
		mov	eax, [eax+10h]
		mov	[esi+0B4h], eax
		jmp	loc_10014805
; ---------------------------------------------------------------------------

loc_100145A7:				; CODE XREF: ldap_set_option+13Fj
					; DATA XREF: .text:off_10014870o
		mov	eax, [esp+20h+arg_8] ; jumptable 1001437F case 13
		movdqu	xmm0, xmmword ptr [eax]
		movdqu	xmmword	ptr [esi+0E8h],	xmm0
		movdqu	xmm0, xmmword ptr [eax+10h]
		movdqu	xmmword	ptr [esi+0F8h],	xmm0
		movq	xmm0, qword ptr	[eax+20h]
		movq	qword ptr [esi+108h], xmm0
		mov	eax, [eax+28h]
		mov	[esi+110h], eax
		jmp	loc_10014805
; ---------------------------------------------------------------------------

loc_100145DF:				; CODE XREF: ldap_set_option+13Fj
					; DATA XREF: .text:off_10014870o
		mov	eax, [esp+20h+arg_8] ; jumptable 1001437F case 14
		mov	eax, [eax]
		mov	[esi+0E4h], eax
		jmp	loc_10014805
; ---------------------------------------------------------------------------

loc_100145F0:				; CODE XREF: ldap_set_option+13Fj
					; DATA XREF: .text:off_10014870o
		mov	eax, [esp+20h+arg_8] ; jumptable 1001437F case 15
		mov	eax, [eax]
		mov	[esi+0E0h], eax
		jmp	loc_10014805
; ---------------------------------------------------------------------------

loc_10014601:				; CODE XREF: ldap_set_option+13Fj
					; DATA XREF: .text:off_10014870o
		lea	eax, [esp+20h+var_14] ;	jumptable 1001437F case	49
		push	eax
		lea	eax, [esp+24h+arg_0]
		push	eax
		push	esi
		call	ldap_get_lderrno
		push	[esp+20h+arg_0]
		call	sub_1000BAB0
		push	[esp+24h+var_14]
		mov	[esp+28h+arg_0], eax
		call	sub_1000BAB0
		add	esp, 8
		mov	[esp+20h+var_14], eax
		push	eax
		mov	eax, [esp+24h+arg_8]
		push	[esp+24h+arg_0]
		push	dword ptr [eax]
		push	esi
		call	ldap_set_lderrno
		jmp	loc_10014805
; ---------------------------------------------------------------------------

loc_10014644:				; CODE XREF: ldap_set_option+13Fj
					; DATA XREF: .text:off_10014870o
		push	0		; jumptable 1001437F case 50
		lea	eax, [esp+24h+arg_0]
		push	eax
		push	esi
		call	ldap_get_lderrno
		push	[esp+20h+arg_0]
		mov	edi, eax
		call	sub_1000BAB0
		push	[esp+24h+arg_8]
		mov	[esp+28h+arg_0], eax
		call	sub_1000BAB0
		add	esp, 8
		push	eax
		push	[esp+24h+arg_0]
		push	edi
		push	esi
		call	ldap_set_lderrno
		xor	edi, edi
		jmp	loc_10014805
; ---------------------------------------------------------------------------

loc_1001467F:				; CODE XREF: ldap_set_option+13Fj
					; DATA XREF: .text:off_10014870o
		lea	eax, [esp+20h+var_14] ;	jumptable 1001437F case	51
		push	eax
		push	0
		push	esi
		call	ldap_get_lderrno
		push	[esp+20h+var_14]
		mov	edi, eax
		call	sub_1000BAB0
		add	esp, 4
		mov	[esp+20h+var_14], eax
		push	eax
		push	[esp+24h+arg_8]
		call	sub_1000BAB0
		add	esp, 4
		push	eax
		push	edi
		push	esi
		call	ldap_set_lderrno
		xor	edi, edi
		jmp	loc_10014805
; ---------------------------------------------------------------------------

loc_100146BA:				; CODE XREF: ldap_set_option+13Fj
					; DATA XREF: .text:off_10014870o
		mov	eax, [esi+11Ch]	; jumptable 1001437F case 20
		test	eax, eax
		jz	short loc_100146CD
		push	eax
		call	ldap_x_free
		add	esp, 4

loc_100146CD:				; CODE XREF: ldap_set_option+482j
		push	[esp+20h+arg_8]
		call	sub_1000BAB0
		add	esp, 4
		mov	[esi+11Ch], eax
		jmp	loc_10014805
; ---------------------------------------------------------------------------

loc_100146E4:				; CODE XREF: ldap_set_option+13Fj
					; DATA XREF: .text:off_10014870o
		mov	eax, [esi+54h]	; jumptable 1001437F case 48
		test	eax, eax
		jz	short loc_100146F4
		push	eax
		call	ldap_x_free
		add	esp, 4

loc_100146F4:				; CODE XREF: ldap_set_option+4A9j
		push	[esp+20h+arg_8]
		call	sub_1000BAB0
		add	esp, 4
		mov	[esi+54h], eax
		jmp	loc_10014805
; ---------------------------------------------------------------------------

loc_10014708:				; CODE XREF: ldap_set_option+126j
		mov	edx, [esp+20h+arg_8]
		cmp	dword ptr [edx], 24h
		jnz	short loc_10014788
		mov	dword ptr [esi+78h], 28h
		lea	ecx, [esi+78h]
		mov	eax, [edx+8]
		mov	[esi+80h], eax
		mov	eax, [edx+4]
		mov	[esi+7Ch], eax
		mov	eax, [edx+0Ch]
		mov	[esi+84h], eax
		mov	eax, [edx+10h]
		mov	[esi+88h], eax
		mov	eax, [edx+14h]
		mov	[esi+8Ch], eax
		mov	eax, [edx+18h]
		push	ecx
		mov	[esi+90h], eax
		mov	eax, [edx+1Ch]
		push	100h
		push	dword ptr [esi]
		mov	[esi+94h], eax
		mov	eax, [edx+20h]
		mov	[esi+98h], eax
		mov	[esi+9Ch], edi
		call	ber_sockbuf_set_option
		test	eax, eax
		jz	short loc_100147AB
		push	0
		push	0
		push	52h
		push	esi
		call	ldap_set_lderrno
		or	edi, 0FFFFFFFFh
		jmp	short loc_10014805
; ---------------------------------------------------------------------------

loc_10014788:				; CODE XREF: ldap_set_option+4CFj
		movdqu	xmm0, xmmword ptr [edx]
		movdqu	xmmword	ptr [esi+78h], xmm0
		movdqu	xmm0, xmmword ptr [edx+10h]
		movdqu	xmmword	ptr [esi+88h], xmm0
		movq	xmm0, qword ptr	[edx+20h]
		movq	qword ptr [esi+98h], xmm0

loc_100147AB:				; CODE XREF: ldap_set_option+535j
		push	dword ptr [esi]
		push	esi
		call	sub_1000C2D0
		jmp	loc_100144C8
; ---------------------------------------------------------------------------

loc_100147B8:				; CODE XREF: ldap_set_option+120j
		sub	ebx, 4F01h
		jz	short loc_100147F9
		dec	ebx
		jz	short loc_100147D4

loc_100147C3:				; CODE XREF: ldap_set_option+132j
					; ldap_set_option+13Fj
					; DATA XREF: ...
		push	0		; jumptable 1001437F default case
		push	0
		push	59h
		push	esi
		call	ldap_set_lderrno
		or	edi, 0FFFFFFFFh
		jmp	short loc_10014805
; ---------------------------------------------------------------------------

loc_100147D4:				; CODE XREF: ldap_set_option+581j
		push	[esp+20h+arg_8]
		push	400h
		push	dword ptr [esi]
		call	ber_sockbuf_set_option
		test	eax, eax
		jz	short loc_10014805
		push	0
		push	0
		push	52h
		push	esi
		call	ldap_set_lderrno
		or	edi, 0FFFFFFFFh
		jmp	short loc_10014805
; ---------------------------------------------------------------------------

loc_100147F9:				; CODE XREF: ldap_set_option+57Ej
		mov	eax, [esp+20h+arg_8]
		mov	eax, [eax]
		mov	[esi+1B0h], eax

loc_10014805:				; CODE XREF: ldap_set_option+153j
					; ldap_set_option+15Fj	...
		cmp	esi, offset dword_10025280
		jz	short loc_10014864
		cmp	dword ptr [esi+0C0h], 0
		jz	short loc_10014864
		mov	eax, [esi+0DCh]
		test	eax, eax
		jz	short loc_10014864
		mov	ecx, [esi+13Ch]
		test	ecx, ecx
		jz	short loc_10014856
		call	ecx
		cmp	[esi+15Ch], eax
		jnz	short loc_10014864
		dec	dword ptr [esi+194h]
		jnz	short loc_10014864
		mov	dword ptr [esi+15Ch], 0FFFFFFFFh
		mov	dword ptr [esi+194h], 0
		mov	eax, [esi+0DCh]

loc_10014856:				; CODE XREF: ldap_set_option+5E8j
		push	dword ptr [eax+1Ch]
		mov	eax, [esi+0C4h]
		call	eax
		add	esp, 4

loc_10014864:				; CODE XREF: ldap_set_option+5CBj
					; ldap_set_option+5D4j	...
		mov	eax, edi
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 14h
		retn	0Ch
ldap_set_option	endp

; ---------------------------------------------------------------------------
		align 10h
off_10014870	dd offset loc_1001441C,	offset loc_1001442A, offset loc_10014438
					; DATA XREF: ldap_set_option+13Fr
		dd offset loc_100144E8,	offset loc_100144A6, offset loc_100144B2 ; jump	table for switch statement
		dd offset loc_10014386,	offset loc_100143C2, offset loc_100143A4
		dd offset loc_100144BE,	offset loc_100145A7, offset loc_100145DF
		dd offset loc_100145F0,	offset loc_10014446, offset loc_10014454
		dd offset loc_10014470,	offset loc_1001448B, offset loc_100146BA
		dd offset loc_100146E4,	offset loc_10014601, offset loc_10014644
		dd offset loc_1001467F,	offset loc_10014589, offset loc_100143E0
		dd offset loc_10014528,	offset loc_100143FE, offset loc_100147C3
byte_100148DC	db	0,     1,     2,     3 ; DATA XREF: ldap_set_option+138r
		db	4,     5,     6,     7 ; indirect table	for switch statement
		db	8,     9,   1Ah,   0Ah
		db    0Bh,   0Ch,   0Dh,   0Eh
		db    0Fh,   10h,   11h,   1Ah
		db    1Ah,   1Ah,   1Ah,   1Ah
		db    1Ah,   1Ah,   1Ah,   1Ah
		db    1Ah,   1Ah,   1Ah,   1Ah
		db    1Ah,   1Ah,   1Ah,   1Ah
		db    1Ah,   1Ah,   1Ah,   1Ah
		db    1Ah,   1Ah,   1Ah,   1Ah
		db    1Ah,   1Ah,   12h,   13h
		db    14h,   15h,   1Ah,   1Ah
		db    1Ah,   1Ah,   1Ah,   1Ah
		db    1Ah,   1Ah,   1Ah,   1Ah
		db    1Ah,   1Ah,   1Ah,   1Ah
		db    1Ah,   1Ah,   1Ah,   1Ah
		db    1Ah,   1Ah,   1Ah,   1Ah
		db    1Ah,   1Ah,   1Ah,   1Ah
		db    1Ah,   1Ah,   1Ah,   1Ah
		db    1Ah,   1Ah,   1Ah,   1Ah
		db    1Ah,   1Ah,   1Ah,   1Ah
		db    1Ah,   1Ah,   1Ah,   1Ah
		db    1Ah,   1Ah,   16h,   1Ah
		db    17h,   1Ah,   1Ah,   18h
		db    19h
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10014950(const void *, const void *)
sub_10014950	proc near		; DATA XREF: ldap_multisort_entries+15Co

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	edi
		mov	edi, [esp+4+arg_0]
		mov	edx, [edi]
		test	edx, edx
		jnz	short loc_10014967
		mov	eax, [esp+4+arg_4]
		pop	edi
		mov	eax, [eax]
		neg	eax
		sbb	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_10014967:				; CODE XREF: sub_10014950+9j
		push	ebx
		mov	ebx, [esp+8+arg_4]
		cmp	dword ptr [ebx], 0
		jnz	short loc_10014979
		pop	ebx
		mov	eax, 1
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_10014979:				; CODE XREF: sub_10014950+1Fj
		push	esi
		xor	esi, esi
		cmp	[edx], esi
		jz	short loc_100149AB
		xor	ecx, ecx

loc_10014982:				; CODE XREF: sub_10014950+59j
		mov	eax, [ebx]
		mov	eax, [ecx+eax]
		test	eax, eax
		jz	short loc_100149AB
		push	eax
		push	dword ptr [edx+ecx]
		call	dword_10024E88
		add	esp, 8
		test	eax, eax
		jnz	short loc_100149CF
		mov	edx, [edi]
		inc	esi
		cmp	[edx+esi*4], eax
		lea	ecx, ds:0[esi*4]
		jnz	short loc_10014982

loc_100149AB:				; CODE XREF: sub_10014950+2Ej
					; sub_10014950+39j
		mov	eax, [edi]
		mov	ecx, [eax+esi*4]
		test	ecx, ecx
		jnz	short loc_100149C1
		mov	eax, [ebx]
		cmp	[eax+esi*4], ecx
		jnz	short loc_100149C1
		pop	esi
		pop	ebx
		xor	eax, eax
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_100149C1:				; CODE XREF: sub_10014950+62j
					; sub_10014950+69j
		xor	eax, eax
		test	ecx, ecx
		setnz	al
		lea	eax, ds:0FFFFFFFFh[eax*2]

loc_100149CF:				; CODE XREF: sub_10014950+4Aj
		pop	esi
		pop	ebx
		pop	edi
		retn
sub_10014950	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 1006. ldap_keysort_entries

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public ldap_keysort_entries
ldap_keysort_entries proc near		; DATA XREF: .rdata:off_10020938o

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= xmmword ptr -10h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch

		push	ebp
		mov	ebp, esp
		and	esp, 0FFFFFFF0h
		sub	esp, 24h
		mov	eax, [ebp+arg_0]
		mov	[esp+24h+var_18], 0
		mov	[esp+24h+var_14], 0
		push	ebx
		push	esi
		push	edi
		test	eax, eax
		jz	loc_10014C1E
		mov	esi, [ebp+arg_4]
		test	esi, esi
		jz	loc_10014C1E
		cmp	[ebp+arg_10], 0
		jz	loc_10014C1E
		push	dword ptr [esi]
		push	eax
		call	ldap_count_entries
		mov	edi, eax
		movd	xmm0, edi
		pshufd	xmm0, xmm0, 0
		movdqa	[esp+30h+var_10], xmm0
		cmp	edi, 2
		jb	loc_10014BCD
		shl	eax, 4
		push	eax
		call	ldap_x_malloc
		mov	ebx, eax
		add	esp, 4
		movd	xmm0, ebx
		pshufd	xmm2, xmm0, 0
		test	ebx, ebx
		jz	loc_10014C04
		xor	ecx, ecx
		cmp	edi, 8
		jb	loc_10014B06
		cmp	dword_100251E0,	2
		jl	loc_10014B06
		movdqa	xmm3, ds:xmmword_10020120
		mov	eax, edi
		movdqa	xmm5, ds:xmmword_10020130
		and	eax, 7
		movdqa	xmm1, [esp+30h+var_10]
		mov	edx, edi
		sub	edx, eax
		mov	eax, 2
		mov	[esp+30h+var_1C], edx
		mov	edx, ebx
		mov	esi, [esp+30h+var_1C]
		movd	xmm4, eax
		jmp	short loc_10014AB0
; ---------------------------------------------------------------------------
		align 10h

loc_10014AB0:				; CODE XREF: ldap_keysort_entries+C7j
					; ldap_keysort_entries+121j
		movd	xmm0, ecx
		lea	eax, [ecx+4]
		pshufd	xmm0, xmm0, 0
		lea	edx, [edx+20h]
		paddd	xmm0, xmm3
		add	ecx, 8
		pmulld	xmm0, xmm5
		paddd	xmm0, xmm1
		pslld	xmm0, xmm4
		paddd	xmm0, xmm2
		movdqu	xmmword	ptr [edx-20h], xmm0
		movd	xmm0, eax
		pshufd	xmm0, xmm0, 0
		paddd	xmm0, xmm3
		pmulld	xmm0, xmm5
		paddd	xmm0, xmm1
		pslld	xmm0, xmm4
		paddd	xmm0, xmm2
		movdqu	xmmword	ptr [edx-10h], xmm0
		cmp	ecx, esi
		jb	short loc_10014AB0
		mov	esi, [ebp+arg_4]

loc_10014B06:				; CODE XREF: ldap_keysort_entries+82j
					; ldap_keysort_entries+8Fj
		cmp	ecx, edi
		jnb	short loc_10014B1D
		lea	eax, [edi+ecx*2]
		add	eax, ecx
		lea	eax, [ebx+eax*4]

loc_10014B12:				; CODE XREF: ldap_keysort_entries+13Bj
		mov	[ebx+ecx*4], eax
		inc	ecx
		add	eax, 0Ch
		cmp	ecx, edi
		jb	short loc_10014B12

loc_10014B1D:				; CODE XREF: ldap_keysort_entries+128j
		mov	ecx, [esi]
		xor	esi, esi
		mov	edx, [ebp+arg_8]
		mov	eax, [ebp+arg_10]
		mov	[esp+30h+var_18], edx
		mov	[esp+30h+var_14], eax
		mov	[esp+30h+var_1C], ecx
		test	edi, edi
		jz	short loc_10014B73

loc_10014B37:				; CODE XREF: ldap_keysort_entries+191j
		mov	eax, [ebx+esi*4]
		lea	edx, [esp+30h+var_18]
		push	ecx
		push	[ebp+arg_0]
		mov	[eax+8], ecx
		mov	eax, [ebx+esi*4]
		mov	[eax], edx
		mov	edx, [ebp+arg_8]
		push	edx
		call	[ebp+arg_C]
		mov	ecx, [ebx+esi*4]
		add	esp, 0Ch
		mov	[ecx+4], eax
		mov	eax, [ebx+esi*4]
		cmp	dword ptr [eax+4], 0
		jz	short loc_10014BD8
		mov	ecx, [esp+30h+var_1C]
		inc	esi
		mov	ecx, [ecx+0Ch]
		mov	[esp+30h+var_1C], ecx
		cmp	esi, edi
		jb	short loc_10014B37

loc_10014B73:				; CODE XREF: ldap_keysort_entries+155j
		push	offset PtFuncCompare ; PtFuncCompare
		push	4		; SizeOfElements
		push	edi		; NumOfElements
		push	ebx		; Base
		call	ds:qsort
		add	esp, 10h
		xor	esi, esi
		test	edi, edi
		jz	short loc_10014BBB
		mov	edx, [ebp+arg_14]
		mov	edi, edi

loc_10014B90:				; CODE XREF: ldap_keysort_entries+1D9j
		mov	eax, [ebx+esi*4]
		mov	ecx, [ebp+arg_4]
		mov	eax, [eax+8]
		mov	[ecx], eax
		add	eax, 0Ch
		mov	[ebp+arg_4], eax
		test	edx, edx
		jz	short loc_10014BB6
		mov	eax, [ebx+esi*4]
		push	dword ptr [eax+4]
		push	[ebp+arg_8]
		call	edx
		mov	edx, [ebp+arg_14]
		add	esp, 8

loc_10014BB6:				; CODE XREF: ldap_keysort_entries+1C3j
		inc	esi
		cmp	esi, edi
		jb	short loc_10014B90

loc_10014BBB:				; CODE XREF: ldap_keysort_entries+1A9j
		mov	ecx, [ebp+arg_4]
		mov	eax, [esp+30h+var_1C]
		push	ebx
		mov	[ecx], eax
		call	ldap_x_free
		add	esp, 4

loc_10014BCD:				; CODE XREF: ldap_keysort_entries+58j
		xor	eax, eax
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn	18h
; ---------------------------------------------------------------------------

loc_10014BD8:				; CODE XREF: ldap_keysort_entries+181j
		mov	ecx, [ebp+arg_14]
		test	ecx, ecx
		jz	short loc_10014BFB
		test	esi, esi
		jz	short loc_10014BFB
		mov	edi, [ebp+arg_8]

loc_10014BE6:				; CODE XREF: ldap_keysort_entries+219j
		mov	eax, [ebx+esi*4-4]
		dec	esi
		push	dword ptr [eax+4]
		push	edi
		call	ecx
		mov	ecx, [ebp+arg_14]
		add	esp, 8
		test	esi, esi
		jnz	short loc_10014BE6

loc_10014BFB:				; CODE XREF: ldap_keysort_entries+1FDj
					; ldap_keysort_entries+201j
		push	ebx
		call	ldap_x_free
		add	esp, 4

loc_10014C04:				; CODE XREF: ldap_keysort_entries+77j
		push	0
		push	0
		push	5Ah
		push	[ebp+arg_0]
		call	ldap_set_lderrno
		or	eax, 0FFFFFFFFh
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn	18h
; ---------------------------------------------------------------------------

loc_10014C1E:				; CODE XREF: ldap_keysort_entries+21j
					; ldap_keysort_entries+2Cj ...
		pop	edi
		pop	esi
		mov	eax, 59h
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn	18h
ldap_keysort_entries endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 441. ldap_multisort_entries

; =============== S U B	R O U T	I N E =======================================


		public ldap_multisort_entries
ldap_multisort_entries proc near	; CODE XREF: ldap_sort_entries+2Ap
					; DATA XREF: .rdata:off_10020938o

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 10h
		push	esi
		push	edi
		mov	edi, [esp+18h+arg_0]
		test	edi, edi
		jz	loc_10014E29
		mov	esi, [esp+18h+arg_4]
		test	esi, esi
		jz	loc_10014E29
		cmp	[esp+18h+arg_C], 0
		jz	loc_10014E29
		push	ebp
		push	dword ptr [esi]
		push	edi
		call	ldap_count_entries
		mov	ebp, eax
		mov	[esp+1Ch+var_C], ebp
		test	ebp, ebp
		jns	short loc_10014C79
		pop	ebp
		pop	edi
		mov	eax, 59h
		pop	esi
		add	esp, 10h
		retn	10h
; ---------------------------------------------------------------------------

loc_10014C79:				; CODE XREF: ldap_multisort_entries+39j
		cmp	ebp, 2
		jge	short loc_10014C89
		pop	ebp
		pop	edi
		xor	eax, eax
		pop	esi
		add	esp, 10h
		retn	10h
; ---------------------------------------------------------------------------

loc_10014C89:				; CODE XREF: ldap_multisort_entries+4Cj
		lea	eax, ds:0[ebp*8]
		push	ebx
		push	eax
		call	ldap_x_malloc
		mov	ebx, eax
		add	esp, 4
		mov	[esp+20h+var_4], ebx
		test	ebx, ebx
		jnz	short loc_10014CBB
		push	eax
		push	eax
		push	5Ah
		push	edi
		call	ldap_set_lderrno
		pop	ebx
		pop	ebp
		pop	edi
		or	eax, 0FFFFFFFFh
		pop	esi
		add	esp, 10h
		retn	10h
; ---------------------------------------------------------------------------

loc_10014CBB:				; CODE XREF: ldap_multisort_entries+72j
		mov	esi, [esi]
		xor	eax, eax
		mov	[esp+20h+var_8], esi
		mov	[esp+20h+var_10], eax
		test	ebp, ebp
		jle	loc_10014D88
		mov	ebp, [esp+20h+arg_8]
		mov	ecx, [esp+20h+var_C]
		jmp	short loc_10014CE0
; ---------------------------------------------------------------------------
		align 10h

loc_10014CE0:				; CODE XREF: ldap_multisort_entries+A7j
					; ldap_multisort_entries+14Aj
		mov	[ebx+4], esi
		mov	dword ptr [ebx], 0
		test	ebp, ebp
		jnz	short loc_10014D17
		push	esi
		push	edi
		call	ldap_get_dn
		mov	esi, eax
		push	1		; int
		push	esi		; Src
		call	ldap_explode_dn
		push	esi
		mov	[ebx], eax
		call	ldap_x_free
		mov	esi, [esp+24h+var_8]
		add	esp, 4
		mov	eax, [esp+20h+var_10]
		mov	ecx, [esp+20h+var_C]
		jmp	short loc_10014D69
; ---------------------------------------------------------------------------

loc_10014D17:				; CODE XREF: ldap_multisort_entries+BBj
		xor	edi, edi
		cmp	[ebp+0], edi
		jz	short loc_10014D65
		mov	eax, ebp

loc_10014D20:				; CODE XREF: ldap_multisort_entries+12Bj
		push	dword ptr [eax]	; Str1
		push	esi		; int
		push	[esp+28h+arg_0]	; int
		call	ldap_get_values
		mov	esi, eax
		push	esi
		push	ebx
		call	ldap_charray_merge
		test	eax, eax
		jnz	loc_10014DE9
		test	esi, esi
		jz	short loc_10014D4A
		push	esi
		call	ldap_x_free
		add	esp, 4

loc_10014D4A:				; CODE XREF: ldap_multisort_entries+10Fj
		mov	esi, [esp+20h+var_8]
		inc	edi
		lea	eax, ds:0[edi*4]
		add	eax, ebp
		cmp	dword ptr [eax], 0
		jnz	short loc_10014D20
		mov	eax, [esp+20h+var_10]
		mov	ecx, [esp+20h+var_C]

loc_10014D65:				; CODE XREF: ldap_multisort_entries+ECj
		mov	edi, [esp+20h+arg_0]

loc_10014D69:				; CODE XREF: ldap_multisort_entries+E5j
		mov	esi, [esi+0Ch]
		inc	eax
		add	ebx, 8
		mov	[esp+20h+var_8], esi
		mov	[esp+20h+var_10], eax
		cmp	eax, ecx
		jl	loc_10014CE0
		mov	ebx, [esp+20h+var_4]
		mov	ebp, [esp+20h+var_C]

loc_10014D88:				; CODE XREF: ldap_multisort_entries+99j
		mov	eax, [esp+20h+arg_C]
		push	offset sub_10014950 ; PtFuncCompare
		push	8		; SizeOfElements
		push	ebp		; NumOfElements
		push	ebx		; Base
		mov	dword_10024E88,	eax
		call	ds:qsort
		add	esp, 10h
		xor	edi, edi
		test	ebp, ebp
		jle	short loc_10014DCE
		mov	esi, [esp+20h+arg_4]
		lea	ecx, [ecx+0]

loc_10014DB0:				; CODE XREF: ldap_multisort_entries+194j
		mov	eax, [ebx+edi*8+4]
		mov	[esi], eax
		push	dword ptr [ebx+edi*8]
		lea	esi, [eax+0Ch]
		call	ldap_value_free
		inc	edi
		cmp	edi, ebp
		jl	short loc_10014DB0
		mov	[esp+20h+arg_4], esi
		mov	esi, [esp+20h+var_8]

loc_10014DCE:				; CODE XREF: ldap_multisort_entries+177j
		mov	eax, [esp+20h+arg_4]
		push	ebx
		mov	[eax], esi
		call	ldap_x_free
		add	esp, 4
		xor	eax, eax
		pop	ebx
		pop	ebp
		pop	edi
		pop	esi
		add	esp, 10h
		retn	10h
; ---------------------------------------------------------------------------

loc_10014DE9:				; CODE XREF: ldap_multisort_entries+107j
		mov	edi, [esp+20h+var_10]
		xor	esi, esi
		mov	ebx, [esp+20h+var_4]
		test	edi, edi
		js	short loc_10014E04

loc_10014DF7:				; CODE XREF: ldap_multisort_entries+1D2j
		push	dword ptr [ebx+esi*8]
		call	ldap_value_free
		inc	esi
		cmp	esi, edi
		jle	short loc_10014DF7

loc_10014E04:				; CODE XREF: ldap_multisort_entries+1C5j
		push	ebx
		call	ldap_x_free
		add	esp, 4
		push	0
		push	0
		push	5Ah
		push	[esp+2Ch+arg_0]
		call	ldap_set_lderrno
		pop	ebx
		pop	ebp
		pop	edi
		or	eax, 0FFFFFFFFh
		pop	esi
		add	esp, 10h
		retn	10h
; ---------------------------------------------------------------------------

loc_10014E29:				; CODE XREF: ldap_multisort_entries+Bj
					; ldap_multisort_entries+17j ...
		pop	edi
		mov	eax, 59h
		pop	esi
		add	esp, 10h
		retn	10h
ldap_multisort_entries endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  74. ldap_sort_entries

; =============== S U B	R O U T	I N E =======================================


		public ldap_sort_entries
ldap_sort_entries proc near		; DATA XREF: .rdata:off_10020938o

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 8
		mov	ecx, [esp+8+arg_8]
		lea	eax, [esp+8+var_8]
		push	[esp+8+arg_C]
		xor	edx, edx
		mov	[esp+0Ch+var_8], ecx
		test	ecx, ecx
		mov	[esp+0Ch+var_4], 0
		cmovz	eax, edx
		push	eax
		push	[esp+10h+arg_4]
		push	[esp+14h+arg_0]
		call	ldap_multisort_entries
		add	esp, 8
		retn	10h
ldap_sort_entries endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  76. ldap_sort_strcasecmp

; =============== S U B	R O U T	I N E =======================================


; int __cdecl ldap_sort_strcasecmp(const void *, const void *)
		public ldap_sort_strcasecmp
ldap_sort_strcasecmp proc near		; DATA XREF: sub_10015D40+5A7o
					; sub_10017100:loc_100173B8o ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		test	eax, eax
		jz	short loc_10014E9E
		mov	ecx, [esp+arg_4]
		test	ecx, ecx
		jz	short loc_10014E9E
		push	dword ptr [ecx]	; Str2
		push	dword ptr [eax]	; Str1
		call	ds:_stricmp
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_10014E9E:				; CODE XREF: ldap_sort_strcasecmp+6j
					; ldap_sort_strcasecmp+Ej
		xor	eax, eax
		retn
ldap_sort_strcasecmp endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  75. ldap_sort_values

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	ldap_sort_values(int, void *Base, int (__cdecl *PtFuncCompare)(const void *, const void	*))
		public ldap_sort_values
ldap_sort_values proc near		; CODE XREF: sub_10015D40+5AEp
					; sub_10017100+2C6p
					; DATA XREF: ...

arg_0		= dword	ptr  4
Base		= dword	ptr  8
PtFuncCompare	= dword	ptr  0Ch

		mov	eax, [esp+arg_0]
		test	eax, eax
		jz	short loc_10014ED2
		mov	edx, [esp+PtFuncCompare]
		test	edx, edx
		jz	short loc_10014ED2
		mov	ecx, [esp+Base]
		test	ecx, ecx
		jnz	short loc_10014EDA
		push	ecx
		push	ecx
		push	59h
		push	eax
		call	ldap_set_lderrno

loc_10014ED2:				; CODE XREF: ldap_sort_values+6j
					; ldap_sort_values+Ej
		mov	eax, 59h
		retn	0Ch
; ---------------------------------------------------------------------------

loc_10014EDA:				; CODE XREF: ldap_sort_values+16j
		xor	eax, eax
		cmp	[ecx], eax
		jz	short loc_10014EE7

loc_10014EE0:				; CODE XREF: ldap_sort_values+35j
		inc	eax
		cmp	dword ptr [ecx+eax*4], 0
		jnz	short loc_10014EE0

loc_10014EE7:				; CODE XREF: ldap_sort_values+2Ej
		push	edx		; PtFuncCompare
		push	4		; SizeOfElements
		push	eax		; NumOfElements
		push	ecx		; Base
		call	ds:qsort
		add	esp, 10h
		xor	eax, eax
		retn	0Ch
ldap_sort_values endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl PtFuncCompare(const void *, const	void *)
PtFuncCompare	proc near		; DATA XREF: ldap_keysort_entries:loc_10014B73o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		mov	ecx, [eax]
		mov	eax, [esp+arg_4]
		mov	edx, [ecx]
		mov	eax, [eax]
		push	dword ptr [eax+4]
		mov	eax, [edx+4]
		push	dword ptr [ecx+4]
		push	dword ptr [edx]
		call	eax
		add	esp, 0Ch
		retn
PtFuncCompare	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10014F20	proc near		; CODE XREF: ldap_create_sort_keylist+2Cp

arg_0		= dword	ptr  4

		push	ebx
		push	esi
		mov	esi, [esp+8+arg_0]
		xor	ebx, ebx
		push	edi
		lea	edi, [ebx+1]
		cmp	[esi], bl
		jz	short loc_10014F5E
		push	ebp
		mov	ebp, ds:isspace

loc_10014F37:				; CODE XREF: sub_10014F20+3Bj
		movsx	eax, byte ptr [esi]
		push	eax		; C
		call	ebp ; isspace
		add	esp, 4
		test	edi, edi
		jz	short loc_10014F4D
		test	eax, eax
		jnz	short loc_10014F57
		xor	edi, edi
		inc	ebx
		jmp	short loc_10014F57
; ---------------------------------------------------------------------------

loc_10014F4D:				; CODE XREF: sub_10014F20+22j
		test	eax, eax
		mov	eax, 1
		cmovnz	edi, eax

loc_10014F57:				; CODE XREF: sub_10014F20+26j
					; sub_10014F20+2Bj
		inc	esi
		cmp	byte ptr [esi],	0
		jnz	short loc_10014F37
		pop	ebp

loc_10014F5E:				; CODE XREF: sub_10014F20+Ej
		pop	edi
		pop	esi
		mov	eax, ebx
		pop	ebx
		retn
sub_10014F20	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 492. ldap_create_sort_control

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	ldap_create_sort_control(void *Memory, int, char, int)
		public ldap_create_sort_control
ldap_create_sort_control proc near	; DATA XREF: .rdata:off_10020938o

Memory		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= byte ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebp
		mov	ebp, [esp+4+Memory]
		test	ebp, ebp
		jnz	short loc_10014F80
		lea	eax, [ebp+59h]
		pop	ebp
		retn	10h
; ---------------------------------------------------------------------------

loc_10014F80:				; CODE XREF: ldap_create_sort_control+7j
		push	ebx
		mov	ebx, [esp+8+arg_4]
		push	esi
		test	ebx, ebx
		jz	loc_100150E8
		mov	esi, [esp+0Ch+arg_C]
		test	esi, esi
		jz	loc_100150E8
		lea	eax, [esp+0Ch+Memory]
		push	eax
		push	ebp
		call	sub_1000EF40
		add	esp, 8
		test	eax, eax
		jz	short loc_10014FC3
		push	0
		push	0
		push	5Ah
		push	ebp
		call	ldap_set_lderrno
		pop	esi
		pop	ebx
		mov	eax, 5Ah
		pop	ebp
		retn	10h
; ---------------------------------------------------------------------------

loc_10014FC3:				; CODE XREF: ldap_create_sort_control+3Aj
		push	edi
		push	offset asc_1001FD74 ; "{"
		push	[esp+14h+Memory]
		call	ber_printf
		add	esp, 8
		cmp	eax, 0FFFFFFFFh
		jz	loc_100150C5
		xor	edi, edi
		cmp	[ebx], edi
		jz	loc_10015081
		mov	esi, ebx
		lea	ebx, [ebx+0]

loc_10014FF0:				; CODE XREF: ldap_create_sort_control+107j
		mov	eax, [esi]
		push	dword ptr [eax]
		push	offset aS	; "{s"
		push	[esp+18h+Memory]
		call	ber_printf
		add	esp, 0Ch
		cmp	eax, 0FFFFFFFFh
		jz	loc_100150C5
		mov	eax, [esi]
		mov	eax, [eax+4]
		test	eax, eax
		jz	short loc_10015037
		push	eax
		push	80h
		push	offset aTs_0	; "ts"
		push	[esp+1Ch+Memory]
		call	ber_printf
		add	esp, 10h
		cmp	eax, 0FFFFFFFFh
		jz	loc_100150C5

loc_10015037:				; CODE XREF: ldap_create_sort_control+A5j
		mov	eax, [esi]
		mov	eax, [eax+8]
		test	eax, eax
		jz	short loc_10015059
		push	eax
		push	81h
		push	offset dword_10020140
		push	[esp+1Ch+Memory]
		call	ber_printf
		add	esp, 10h
		jmp	short loc_1001506A
; ---------------------------------------------------------------------------

loc_10015059:				; CODE XREF: ldap_create_sort_control+CEj
		push	offset asc_1001F9E8 ; "}"
		push	[esp+14h+Memory]
		call	ber_printf
		add	esp, 8

loc_1001506A:				; CODE XREF: ldap_create_sort_control+E7j
		cmp	eax, 0FFFFFFFFh
		jz	short loc_100150C5
		inc	edi
		cmp	dword ptr [ebx+edi*4], 0
		lea	esi, [ebx+edi*4]
		jnz	loc_10014FF0
		mov	esi, [esp+10h+arg_C]

loc_10015081:				; CODE XREF: ldap_create_sort_control+72j
		push	offset asc_1001F9E8 ; "}"
		push	[esp+14h+Memory]
		call	ber_printf
		add	esp, 8
		cmp	eax, 0FFFFFFFFh
		jz	short loc_100150C5
		push	esi		; int
		push	dword ptr [esp+14h+arg_8] ; char
		push	1		; int
		push	[esp+1Ch+Memory] ; Memory
		push	offset a1_2_840_113556 ; "1.2.840.113556.1.4.473"
		call	sub_100029E0
		add	esp, 14h
		mov	esi, eax
		push	0
		push	0
		push	esi
		push	ebp
		call	ldap_set_lderrno
		pop	edi
		mov	eax, esi
		pop	esi
		pop	ebx
		pop	ebp
		retn	10h
; ---------------------------------------------------------------------------

loc_100150C5:				; CODE XREF: ldap_create_sort_control+68j
					; ldap_create_sort_control+98j	...
		push	0
		push	0
		push	53h
		push	ebp
		call	ldap_set_lderrno
		push	1		; int
		push	[esp+14h+Memory] ; Memory
		call	ber_free
		pop	edi
		pop	esi
		pop	ebx
		mov	eax, 53h
		pop	ebp
		retn	10h
; ---------------------------------------------------------------------------

loc_100150E8:				; CODE XREF: ldap_create_sort_control+18j
					; ldap_create_sort_control+24j
		push	0
		push	0
		push	59h
		push	ebp
		call	ldap_set_lderrno
		pop	esi
		pop	ebx
		mov	eax, 59h
		pop	ebp
		retn	10h
ldap_create_sort_control endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 498. ldap_create_sort_keylist

; =============== S U B	R O U T	I N E =======================================


		public ldap_create_sort_keylist
ldap_create_sort_keylist proc near	; DATA XREF: .rdata:off_10020938o

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 8
		push	esi
		mov	esi, [esp+0Ch+arg_4]
		test	esi, esi
		jnz	short loc_10015116
		lea	eax, [esi+59h]
		pop	esi
		add	esp, 8
		retn	8
; ---------------------------------------------------------------------------

loc_10015116:				; CODE XREF: ldap_create_sort_keylist+Aj
		push	edi
		mov	edi, [esp+10h+arg_0]
		test	edi, edi
		jnz	short loc_1001512A
		lea	eax, [edi+59h]
		pop	edi
		pop	esi
		add	esp, 8
		retn	8
; ---------------------------------------------------------------------------

loc_1001512A:				; CODE XREF: ldap_create_sort_keylist+1Dj
		push	ebx
		push	esi
		call	sub_10014F20
		mov	ebx, eax
		add	esp, 4
		test	ebx, ebx
		jnz	short loc_10015148
		mov	[edi], eax
		lea	eax, [ebx+59h]
		pop	ebx
		pop	edi
		pop	esi
		add	esp, 8
		retn	8
; ---------------------------------------------------------------------------

loc_10015148:				; CODE XREF: ldap_create_sort_keylist+38j
		lea	eax, ds:0[ebx*4]
		mov	[esp+14h+arg_4], eax
		add	eax, 4
		push	ebp
		push	eax
		call	ldap_x_malloc
		mov	ebp, eax
		add	esp, 4
		test	ebp, ebp
		jnz	short loc_10015173
		lea	eax, [ebp+5Ah]
		pop	ebp
		pop	ebx
		pop	edi
		pop	esi
		add	esp, 8
		retn	8
; ---------------------------------------------------------------------------

loc_10015173:				; CODE XREF: ldap_create_sort_keylist+64j
		mov	[esp+18h+var_8], esi
		xor	esi, esi
		test	ebx, ebx
		jle	short loc_100151A2
		mov	edi, ebp
		nop

loc_10015180:				; CODE XREF: ldap_create_sort_keylist+9Cj
		lea	eax, [esp+18h+var_8]
		push	edi
		push	eax
		call	sub_100153D0
		add	esp, 8
		mov	[esp+18h+var_4], eax
		test	eax, eax
		jnz	short loc_100151BB
		inc	esi
		add	edi, 4
		cmp	esi, ebx
		jl	short loc_10015180
		mov	edi, [esp+18h+arg_0]

loc_100151A2:				; CODE XREF: ldap_create_sort_keylist+7Bj
		mov	eax, [esp+18h+arg_4]
		mov	dword ptr [eax+ebp], 0
		xor	eax, eax
		mov	[edi], ebp
		pop	ebp
		pop	ebx
		pop	edi
		pop	esi
		add	esp, 8
		retn	8
; ---------------------------------------------------------------------------

loc_100151BB:				; CODE XREF: ldap_create_sort_keylist+94j
		mov	eax, [esp+18h+arg_4]
		push	ebp
		mov	dword ptr [eax+ebp], 0
		call	ldap_free_sort_keylist
		mov	eax, [esp+18h+arg_0]
		pop	ebp
		pop	ebx
		pop	edi
		mov	dword ptr [eax], 0
		mov	eax, [esp+0Ch+var_4]
		pop	esi
		add	esp, 8
		retn	8
ldap_create_sort_keylist endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 497. ldap_free_sort_keylist

; =============== S U B	R O U T	I N E =======================================


		public ldap_free_sort_keylist
ldap_free_sort_keylist proc near	; CODE XREF: ldap_create_sort_keylist+C7p
					; DATA XREF: .rdata:off_10020938o

arg_0		= dword	ptr  4

		push	ebx
		mov	ebx, [esp+4+arg_0]
		test	ebx, ebx
		jz	short loc_10015240
		push	esi
		mov	esi, [ebx]
		test	esi, esi
		jz	short loc_10015236
		push	edi
		mov	edi, ebx

loc_10015203:				; CODE XREF: ldap_free_sort_keylist+43j
		mov	eax, [esi]
		test	eax, eax
		jz	short loc_10015212
		push	eax
		call	ldap_x_free
		add	esp, 4

loc_10015212:				; CODE XREF: ldap_free_sort_keylist+17j
		mov	eax, [esi+4]
		test	eax, eax
		jz	short loc_10015222
		push	eax
		call	ldap_x_free
		add	esp, 4

loc_10015222:				; CODE XREF: ldap_free_sort_keylist+27j
		push	esi
		call	ldap_x_free
		mov	esi, [edi+4]
		add	edi, 4
		add	esp, 4
		test	esi, esi
		jnz	short loc_10015203
		pop	edi

loc_10015236:				; CODE XREF: ldap_free_sort_keylist+Ej
		push	ebx
		call	ldap_x_free
		add	esp, 4
		pop	esi

loc_10015240:				; CODE XREF: ldap_free_sort_keylist+7j
		pop	ebx
		retn	4
ldap_free_sort_keylist endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 493. ldap_parse_sort_control

; =============== S U B	R O U T	I N E =======================================


		public ldap_parse_sort_control
ldap_parse_sort_control	proc near	; DATA XREF: .rdata:off_10020938o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebp
		push	edi
		mov	edi, [esp+8+arg_0]
		test	edi, edi
		jz	loc_100153C4
		cmp	[esp+8+arg_8], 0
		jz	loc_100153C4
		mov	ebp, [esp+8+arg_C]
		test	ebp, ebp
		jz	loc_100153C4
		push	ebx
		mov	ebx, [esp+0Ch+arg_4]
		test	ebx, ebx
		jnz	short loc_10015291
		push	ebx
		push	ebx
		push	5Dh
		push	edi
		call	ldap_set_lderrno
		lea	eax, [ebx+5Dh]
		pop	ebx
		pop	edi
		pop	ebp
		retn	10h
; ---------------------------------------------------------------------------

loc_10015291:				; CODE XREF: ldap_parse_sort_control+2Cj
		push	esi
		xor	ecx, ecx
		xor	esi, esi
		cmp	[ebx], ecx
		jz	loc_100153AC
		mov	edi, edi

loc_100152A0:				; CODE XREF: ldap_parse_sort_control+91j
		test	ecx, ecx
		jnz	short loc_100152EB
		mov	eax, [ebx+esi*4]
		mov	ecx, offset a1_2_840_1135_0 ; "1.2.840.113556.1.4.474"
		mov	eax, [eax]
		mov	edi, edi

loc_100152B0:				; CODE XREF: ldap_parse_sort_control+7Aj
		mov	dl, [eax]
		cmp	dl, [ecx]
		jnz	short loc_100152D0
		test	dl, dl
		jz	short loc_100152CC
		mov	dl, [eax+1]
		cmp	dl, [ecx+1]
		jnz	short loc_100152D0
		add	eax, 2
		add	ecx, 2
		test	dl, dl
		jnz	short loc_100152B0

loc_100152CC:				; CODE XREF: ldap_parse_sort_control+68j
		xor	eax, eax
		jmp	short loc_100152D5
; ---------------------------------------------------------------------------

loc_100152D0:				; CODE XREF: ldap_parse_sort_control+64j
					; ldap_parse_sort_control+70j
		sbb	eax, eax
		or	eax, 1

loc_100152D5:				; CODE XREF: ldap_parse_sort_control+7Ej
		xor	ecx, ecx
		test	eax, eax
		setz	cl
		inc	esi
		cmp	dword ptr [ebx+esi*4], 0
		jnz	short loc_100152A0
		test	ecx, ecx
		jz	loc_100153AC

loc_100152EB:				; CODE XREF: ldap_parse_sort_control+52j
		mov	eax, [ebx+esi*4-4]
		add	eax, 4
		push	eax
		call	ber_init
		mov	esi, eax
		test	esi, esi
		jnz	short loc_10015312
		push	eax
		push	eax
		push	5Ah
		push	edi
		call	ldap_set_lderrno
		lea	eax, [esi+5Ah]
		pop	esi
		pop	ebx
		pop	edi
		pop	ebp
		retn	10h
; ---------------------------------------------------------------------------

loc_10015312:				; CODE XREF: ldap_parse_sort_control+ACj
		push	[esp+10h+arg_8]
		push	offset aI_0	; "{i"
		push	esi		; Dst
		call	ber_scanf
		add	esp, 0Ch
		cmp	eax, 0FFFFFFFFh
		jz	short loc_1001537B
		lea	eax, [esp+10h+arg_C]
		push	eax
		push	esi
		call	ber_peek_tag
		cmp	eax, 80h
		jnz	short loc_10015361
		lea	eax, [esp+10h+arg_0]
		push	eax
		lea	eax, [esp+14h+arg_4]
		push	eax
		push	offset aTa	; "ta"
		push	esi		; Dst
		call	ber_scanf
		add	esp, 10h
		cmp	eax, 0FFFFFFFFh
		jz	short loc_1001537B
		mov	eax, [esp+10h+arg_0]
		mov	[ebp+0], eax
		jmp	short loc_10015368
; ---------------------------------------------------------------------------

loc_10015361:				; CODE XREF: ldap_parse_sort_control+E9j
		mov	dword ptr [ebp+0], 0

loc_10015368:				; CODE XREF: ldap_parse_sort_control+10Fj
		push	offset asc_1001F9E8 ; "}"
		push	esi		; Dst
		call	ber_scanf
		add	esp, 8
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_1001539B

loc_1001537B:				; CODE XREF: ldap_parse_sort_control+D7j
					; ldap_parse_sort_control+106j
		push	0
		push	0
		push	54h
		push	edi
		call	ldap_set_lderrno
		push	1		; int
		push	esi		; Memory
		call	ber_free
		pop	esi
		pop	ebx
		pop	edi
		mov	eax, 54h
		pop	ebp
		retn	10h
; ---------------------------------------------------------------------------

loc_1001539B:				; CODE XREF: ldap_parse_sort_control+129j
		push	1		; int
		push	esi		; Memory
		call	ber_free
		pop	esi
		pop	ebx
		pop	edi
		xor	eax, eax
		pop	ebp
		retn	10h
; ---------------------------------------------------------------------------

loc_100153AC:				; CODE XREF: ldap_parse_sort_control+48j
					; ldap_parse_sort_control+95j
		push	0
		push	0
		push	5Dh
		push	edi
		call	ldap_set_lderrno
		pop	esi
		pop	ebx
		pop	edi
		mov	eax, 5Dh
		pop	ebp
		retn	10h
; ---------------------------------------------------------------------------

loc_100153C4:				; CODE XREF: ldap_parse_sort_control+8j
					; ldap_parse_sort_control+13j ...
		pop	edi
		mov	eax, 59h
		pop	ebp
		retn	10h
ldap_parse_sort_control	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100153D0	proc near		; CODE XREF: ldap_create_sort_keylist+86p

var_11		= byte ptr -11h
var_10		= dword	ptr -10h
Src		= dword	ptr -0Ch
Size		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 14h
		mov	eax, [esp+14h+arg_0]
		xor	ecx, ecx
		push	ebx
		push	ebp
		push	esi
		mov	esi, [eax]
		xor	edx, edx
		xor	ebp, ebp
		mov	[esp+20h+var_10], ecx
		xor	ebx, ebx
		mov	[esp+20h+Src], edx
		push	edi
		mov	al, [esi]
		mov	[esp+24h+Size],	ecx
		mov	[esp+24h+var_4], ecx
		mov	[esp+24h+var_11], al
		test	al, al
		jz	loc_100154FB
		lea	edi, [esi-1]

loc_10015406:				; CODE XREF: sub_100153D0+125j
		inc	esi
		inc	edi
		cmp	ebx, 4
		jz	loc_100154FC
		cmp	ebx, 3		; switch 4 cases
		ja	loc_100154ED	; jumptable 1001541A default case
		jmp	ds:off_100155C0[ebx*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_10015421:				; CODE XREF: sub_100153D0+4Aj
					; DATA XREF: .text:off_100155C0o
		movsx	eax, al		; jumptable 1001541A case 0
		push	eax		; C
		call	ds:isspace
		mov	ecx, [esp+28h+var_10]
		add	esp, 4
		test	eax, eax
		jnz	loc_100154E9
		mov	al, [esp+24h+var_11]
		cmp	al, 2Dh
		jnz	short loc_1001544F
		mov	[esp+24h+var_4], 1
		jmp	loc_100154E9
; ---------------------------------------------------------------------------

loc_1001544F:				; CODE XREF: sub_100153D0+70j
		mov	edx, edi
		mov	ebx, 1
		mov	[esp+24h+Src], edx
		jmp	loc_100154ED	; jumptable 1001541A default case
; ---------------------------------------------------------------------------

loc_1001545F:				; CODE XREF: sub_100153D0+4Aj
					; DATA XREF: .text:off_100155C0o
		movsx	eax, al		; jumptable 1001541A case 1
		push	eax		; C
		call	ds:isspace
		add	esp, 4
		test	eax, eax
		mov	al, [esp+24h+var_11]
		jnz	short loc_10015478
		cmp	al, 3Ah
		jnz	short loc_100154E5

loc_10015478:				; CODE XREF: sub_100153D0+A2j
		mov	edx, [esp+24h+Src]
		mov	ecx, esi
		sub	ecx, edx
		xor	ebx, ebx
		dec	ecx
		cmp	al, 3Ah
		mov	[esp+24h+Size],	ecx
		mov	ecx, [esp+24h+var_10]
		setnz	bl
		lea	ebx, ds:2[ebx*2]
		jmp	short loc_100154ED ; jumptable 1001541A	default	case
; ---------------------------------------------------------------------------

loc_10015499:				; CODE XREF: sub_100153D0+4Aj
					; DATA XREF: .text:off_100155C0o
		movsx	eax, al		; jumptable 1001541A case 2
		push	eax		; C
		call	ds:isspace
		mov	edx, [esp+28h+Src]
		add	esp, 4
		test	eax, eax
		jnz	short loc_100154B9
		mov	ecx, edi
		lea	ebx, [eax+3]
		mov	[esp+24h+var_10], ecx
		jmp	short loc_100154ED ; jumptable 1001541A	default	case
; ---------------------------------------------------------------------------

loc_100154B9:				; CODE XREF: sub_100153D0+DCj
		mov	ecx, [esp+24h+var_10]
		mov	ebx, 4
		jmp	short loc_100154ED ; jumptable 1001541A	default	case
; ---------------------------------------------------------------------------

loc_100154C4:				; CODE XREF: sub_100153D0+4Aj
					; DATA XREF: .text:off_100155C0o
		movsx	eax, al		; jumptable 1001541A case 3
		push	eax		; C
		call	ds:isspace
		mov	ecx, [esp+28h+var_10]
		add	esp, 4
		test	eax, eax
		jz	short loc_100154E9
		mov	ebp, esi
		mov	ebx, 4
		sub	ebp, ecx
		dec	ebp
		jmp	short loc_100154E9
; ---------------------------------------------------------------------------

loc_100154E5:				; CODE XREF: sub_100153D0+A6j
		mov	ecx, [esp+24h+var_10]

loc_100154E9:				; CODE XREF: sub_100153D0+64j
					; sub_100153D0+7Aj ...
		mov	edx, [esp+24h+Src]

loc_100154ED:				; CODE XREF: sub_100153D0+44j
					; sub_100153D0+8Aj ...
		mov	al, [esi]	; jumptable 1001541A default case
		mov	[esp+24h+var_11], al
		test	al, al
		jnz	loc_10015406

loc_100154FB:				; CODE XREF: sub_100153D0+2Dj
		inc	esi

loc_100154FC:				; CODE XREF: sub_100153D0+3Bj
		cmp	ebx, 3
		jnz	short loc_10015519
		mov	ebp, esi
		sub	ebp, ecx
		dec	ebp

loc_10015506:				; CODE XREF: sub_100153D0+14Cj
		mov	ebx, [esp+24h+Size]

loc_1001550A:				; CODE XREF: sub_100153D0+153j
		test	edx, edx
		jnz	short loc_10015525
		pop	edi
		pop	esi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		add	esp, 14h
		retn
; ---------------------------------------------------------------------------

loc_10015519:				; CODE XREF: sub_100153D0+12Fj
		cmp	ebx, 1
		jnz	short loc_10015506
		mov	ebx, esi
		sub	ebx, edx
		dec	ebx
		jmp	short loc_1001550A
; ---------------------------------------------------------------------------

loc_10015525:				; CODE XREF: sub_100153D0+13Cj
		push	0Ch
		call	ldap_x_malloc
		mov	edi, eax
		add	esp, 4
		test	edi, edi
		jnz	short loc_10015540
		lea	eax, [edi+5Ah]
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 14h
		retn
; ---------------------------------------------------------------------------

loc_10015540:				; CODE XREF: sub_100153D0+163j
		lea	eax, [ebx+1]
		push	eax
		call	ldap_x_malloc
		add	esp, 4
		mov	[edi], eax
		cmp	[esp+24h+var_10], 0
		jz	short loc_10015566
		lea	eax, [ebp+1]
		push	eax
		call	ldap_x_malloc
		add	esp, 4
		mov	[edi+4], eax
		jmp	short loc_1001556D
; ---------------------------------------------------------------------------

loc_10015566:				; CODE XREF: sub_100153D0+183j
		mov	dword ptr [edi+4], 0

loc_1001556D:				; CODE XREF: sub_100153D0+194j
		push	ebx		; Size
		push	[esp+28h+Src]	; Src
		push	dword ptr [edi]	; Dst
		call	memcpy
		mov	eax, [edi]
		add	esp, 0Ch
		mov	byte ptr [ebx+eax], 0
		mov	eax, [esp+24h+var_10]
		test	eax, eax
		jz	short loc_1001559E
		push	ebp		; Size
		push	eax		; Src
		push	dword ptr [edi+4] ; Dst
		call	memcpy
		mov	eax, [edi+4]
		add	esp, 0Ch
		mov	byte ptr [eax+ebp], 0

loc_1001559E:				; CODE XREF: sub_100153D0+1B8j
		mov	eax, [esp+24h+var_4]
		mov	ecx, [esp+24h+arg_0]
		mov	[edi+8], eax
		lea	eax, [esi-1]
		mov	[ecx], eax
		mov	eax, [esp+24h+arg_4]
		mov	[eax], edi
		xor	eax, eax
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 14h
		retn
sub_100153D0	endp

; ---------------------------------------------------------------------------
		align 10h
off_100155C0	dd offset loc_10015421	; DATA XREF: sub_100153D0+4Ar
		dd offset loc_1001545F	; jump table for switch	statement
		dd offset loc_10015499
		dd offset loc_100154C4
; Exported entry 303. ldap_first_searchobj
; Exported entry 403. ldap_first_disptmpl

; =============== S U B	R O U T	I N E =======================================


		public ldap_first_searchobj
ldap_first_searchobj proc near		; DATA XREF: .rdata:off_10020938o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0] ; ldap_first_searchobj
		retn	4
ldap_first_searchobj endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 302. ldap_free_searchprefs

; =============== S U B	R O U T	I N E =======================================


		public ldap_free_searchprefs
ldap_free_searchprefs proc near		; CODE XREF: ldap_init_searchprefs_buf+C6p
					; sub_10015920+B9p ...

arg_0		= dword	ptr  4

		push	ebx
		mov	ebx, [esp+4+arg_0]
		test	ebx, ebx
		jz	loc_100156FF
		push	ebp
		push	esi
		push	edi

loc_100155F0:				; CODE XREF: ldap_free_searchprefs+116j
		mov	eax, [ebx]
		mov	ebp, [ebx+28h]
		test	eax, eax
		jz	short loc_10015602
		push	eax
		call	ldap_x_free
		add	esp, 4

loc_10015602:				; CODE XREF: ldap_free_searchprefs+17j
		mov	eax, [ebx+8]
		test	eax, eax
		jz	short loc_10015612
		push	eax
		call	ldap_x_free
		add	esp, 4

loc_10015612:				; CODE XREF: ldap_free_searchprefs+27j
		mov	eax, [ebx+10h]
		test	eax, eax
		jz	short loc_10015622
		push	eax
		call	ldap_x_free
		add	esp, 4

loc_10015622:				; CODE XREF: ldap_free_searchprefs+37j
		mov	eax, [ebx+14h]
		test	eax, eax
		jz	short loc_10015632
		push	eax
		call	ldap_x_free
		add	esp, 4

loc_10015632:				; CODE XREF: ldap_free_searchprefs+47j
		mov	eax, [ebx+18h]
		test	eax, eax
		jz	short loc_10015642
		push	eax
		call	ldap_x_free
		add	esp, 4

loc_10015642:				; CODE XREF: ldap_free_searchprefs+57j
		mov	eax, [ebx+1Ch]
		test	eax, eax
		jz	short loc_10015652
		push	eax
		call	ldap_x_free
		add	esp, 4

loc_10015652:				; CODE XREF: ldap_free_searchprefs+67j
		mov	esi, [ebx+20h]
		test	esi, esi
		jz	short loc_100156B1
		lea	esp, [esp+0]

loc_10015660:				; CODE XREF: ldap_free_searchprefs+CFj
		mov	eax, [esi]
		mov	edi, [esi+14h]
		test	eax, eax
		jz	short loc_10015672
		push	eax
		call	ldap_x_free
		add	esp, 4

loc_10015672:				; CODE XREF: ldap_free_searchprefs+87j
		mov	eax, [esi+4]
		test	eax, eax
		jz	short loc_10015682
		push	eax
		call	ldap_x_free
		add	esp, 4

loc_10015682:				; CODE XREF: ldap_free_searchprefs+97j
		mov	eax, [esi+0Ch]
		test	eax, eax
		jz	short loc_10015692
		push	eax
		call	ldap_x_free
		add	esp, 4

loc_10015692:				; CODE XREF: ldap_free_searchprefs+A7j
		mov	eax, [esi+10h]
		test	eax, eax
		jz	short loc_100156A2
		push	eax
		call	ldap_x_free
		add	esp, 4

loc_100156A2:				; CODE XREF: ldap_free_searchprefs+B7j
		push	esi
		call	ldap_x_free
		add	esp, 4
		mov	esi, edi
		test	edi, edi
		jnz	short loc_10015660

loc_100156B1:				; CODE XREF: ldap_free_searchprefs+77j
		mov	esi, [ebx+24h]
		test	esi, esi
		jz	short loc_100156E9

loc_100156B8:				; CODE XREF: ldap_free_searchprefs+107j
		mov	eax, [esi]
		mov	edi, [esi+8]
		test	eax, eax
		jz	short loc_100156CA
		push	eax
		call	ldap_x_free
		add	esp, 4

loc_100156CA:				; CODE XREF: ldap_free_searchprefs+DFj
		mov	eax, [esi+4]
		test	eax, eax
		jz	short loc_100156DA
		push	eax
		call	ldap_x_free
		add	esp, 4

loc_100156DA:				; CODE XREF: ldap_free_searchprefs+EFj
		push	esi
		call	ldap_x_free
		add	esp, 4
		mov	esi, edi
		test	edi, edi
		jnz	short loc_100156B8

loc_100156E9:				; CODE XREF: ldap_free_searchprefs+D6j
		push	ebx
		call	ldap_x_free
		add	esp, 4
		mov	ebx, ebp
		test	ebp, ebp
		jnz	loc_100155F0
		pop	edi
		pop	esi
		pop	ebp

loc_100156FF:				; CODE XREF: ldap_free_searchprefs+7j
		pop	ebx
		retn	4
ldap_free_searchprefs endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 300. ldap_init_searchprefs

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	ldap_init_searchprefs(char *Filename, int)
		public ldap_init_searchprefs
ldap_init_searchprefs proc near		; DATA XREF: .rdata:off_10020938o

Filename	= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		push	offset Mode	; "r"
		push	[esp+8+Filename] ; Filename
		call	ds:fopen
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		jnz	short loc_10015730
		lea	eax, [esi+4]
		pop	esi
		retn	8
; ---------------------------------------------------------------------------

loc_10015730:				; CODE XREF: ldap_init_searchprefs+17j
		push	edi
		mov	edi, ds:fseek
		push	2		; Origin
		push	0		; Offset
		push	esi		; File
		call	edi ; fseek
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_10015759
		push	esi		; File
		call	ds:fclose
		add	esp, 4
		mov	eax, 4
		pop	edi
		pop	esi
		retn	8
; ---------------------------------------------------------------------------

loc_10015759:				; CODE XREF: ldap_init_searchprefs+33j
		push	ebx
		push	esi		; File
		call	ds:ftell
		push	0		; Origin
		push	0		; Offset
		push	esi		; File
		mov	ebx, eax
		call	edi ; fseek
		add	esp, 10h
		test	eax, eax
		jz	short loc_10015786
		push	esi		; File
		call	ds:fclose
		add	esp, 4
		mov	eax, 4
		pop	ebx
		pop	edi
		pop	esi
		retn	8
; ---------------------------------------------------------------------------

loc_10015786:				; CODE XREF: ldap_init_searchprefs+5Fj
		push	ebx
		call	ldap_x_malloc
		mov	edi, eax
		add	esp, 4
		test	edi, edi
		jnz	short loc_100157A8
		push	esi		; File
		call	ds:fclose
		add	esp, 4
		lea	eax, [edi+2]
		pop	ebx
		pop	edi
		pop	esi
		retn	8
; ---------------------------------------------------------------------------

loc_100157A8:				; CODE XREF: ldap_init_searchprefs+83j
		push	ebp
		push	esi		; File
		push	ebx		; Count
		push	1		; ElementSize
		push	edi		; DstBuf
		call	ds:fread
		push	esi		; File
		mov	ebp, eax
		call	ds:feof
		push	esi		; File
		mov	[esp+28h+Filename], eax
		call	ds:fclose
		add	esp, 18h
		cmp	ebp, ebx
		jz	short loc_100157EB
		cmp	[esp+10h+Filename], 0
		jnz	short loc_100157EB
		push	edi
		call	ldap_x_free
		add	esp, 4
		mov	eax, 4
		pop	ebp
		pop	ebx
		pop	edi
		pop	esi
		retn	8
; ---------------------------------------------------------------------------

loc_100157EB:				; CODE XREF: ldap_init_searchprefs+BDj
					; ldap_init_searchprefs+C4j
		push	[esp+10h+arg_4]
		push	ebp
		push	edi
		call	ldap_init_searchprefs_buf
		push	edi
		mov	esi, eax
		call	ldap_x_free
		add	esp, 4
		mov	eax, esi
		pop	ebp
		pop	ebx
		pop	edi
		pop	esi
		retn	8
ldap_init_searchprefs endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 301. ldap_init_searchprefs_buf

; =============== S U B	R O U T	I N E =======================================


		public ldap_init_searchprefs_buf
ldap_init_searchprefs_buf proc near	; CODE XREF: ldap_init_searchprefs+E1p
					; DATA XREF: .rdata:off_10020938o

var_4		= dword	ptr -4
arg_0		= byte ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ecx
		push	ebx
		push	esi
		push	edi
		mov	edi, [esp+10h+arg_8]
		lea	eax, [esp+10h+arg_8]
		push	eax
		lea	eax, [esp+14h+arg_4]
		xor	ebx, ebx
		push	eax
		lea	eax, [esp+18h+arg_0]
		mov	[edi], ebx
		push	eax
		xor	esi, esi
		call	sub_10004490
		add	esp, 0Ch
		cmp	eax, 2
		jnz	loc_100158E5
		mov	eax, [esp+10h+arg_8]
		push	offset Str2	; "version"
		push	dword ptr [eax]	; Str1
		call	ds:_stricmp
		add	esp, 8
		test	eax, eax
		jnz	loc_100158E5
		mov	eax, [esp+10h+arg_8]
		push	ebp
		push	dword ptr [eax+4] ; Str
		call	ds:atoi
		push	[esp+18h+arg_8]
		mov	ebp, eax
		call	sub_10004450
		add	esp, 8
		cmp	ebp, 1
		jz	short loc_1001588A
		test	ebp, ebp
		jz	short loc_1001588A
		pop	ebp
		pop	edi
		pop	esi
		lea	eax, [ebx+1]
		pop	ebx
		pop	ecx
		retn	0Ch
; ---------------------------------------------------------------------------

loc_1001588A:				; CODE XREF: ldap_init_searchprefs_buf+69j
					; ldap_init_searchprefs_buf+6Dj
		cmp	[esp+14h+arg_4], ebx
		jle	short loc_100158DB

loc_10015890:				; CODE XREF: ldap_init_searchprefs_buf+B8j
		push	ebp
		lea	eax, [esp+18h+var_4]
		push	eax
		lea	eax, [esp+1Ch+arg_4]
		push	eax
		lea	eax, [esp+20h+arg_0]
		push	eax
		call	sub_10015920
		mov	ebx, eax
		add	esp, 10h
		test	ebx, ebx
		jnz	short loc_100158D4
		mov	ecx, [esp+14h+var_4]
		test	ecx, ecx
		jz	short loc_100158DB
		test	esi, esi
		jnz	short loc_100158BE
		mov	[edi], ecx
		jmp	short loc_100158C1
; ---------------------------------------------------------------------------

loc_100158BE:				; CODE XREF: ldap_init_searchprefs_buf+A8j
		mov	[esi+28h], ecx

loc_100158C1:				; CODE XREF: ldap_init_searchprefs_buf+ACj
		cmp	[esp+14h+arg_4], 0
		mov	esi, ecx
		jg	short loc_10015890
		pop	ebp
		pop	edi
		pop	esi
		mov	eax, ebx
		pop	ebx
		pop	ecx
		retn	0Ch
; ---------------------------------------------------------------------------

loc_100158D4:				; CODE XREF: ldap_init_searchprefs_buf+9Cj
		push	dword ptr [edi]
		call	ldap_free_searchprefs

loc_100158DB:				; CODE XREF: ldap_init_searchprefs_buf+7Ej
					; ldap_init_searchprefs_buf+A4j
		pop	ebp
		pop	edi
		pop	esi
		mov	eax, ebx
		pop	ebx
		pop	ecx
		retn	0Ch
; ---------------------------------------------------------------------------

loc_100158E5:				; CODE XREF: ldap_init_searchprefs_buf+28j
					; ldap_init_searchprefs_buf+44j
		push	[esp+10h+arg_8]
		call	sub_10004450
		add	esp, 4
		mov	eax, 3
		pop	edi
		pop	esi
		pop	ebx
		pop	ecx
		retn	0Ch
ldap_init_searchprefs_buf endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 304. ldap_next_searchobj

; =============== S U B	R O U T	I N E =======================================


		public ldap_next_searchobj
ldap_next_searchobj proc near		; DATA XREF: .rdata:off_10020938o

arg_4		= dword	ptr  8

		mov	eax, [esp+arg_4]
		test	eax, eax
		jnz	short loc_1001590B
		retn	8
; ---------------------------------------------------------------------------

loc_1001590B:				; CODE XREF: ldap_next_searchobj+6j
		mov	eax, [eax+28h]
		retn	8
ldap_next_searchobj endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10015920	proc near		; CODE XREF: ldap_init_searchprefs_buf+90p

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	eax, [esp+arg_8]
		sub	esp, 8
		push	ebp
		mov	ebp, [esp+0Ch+arg_4]
		push	esi
		push	edi
		mov	edi, [esp+14h+arg_0]
		mov	dword ptr [eax], 0
		lea	eax, [esp+14h+var_8]
		push	eax
		push	ebp
		push	edi
		call	sub_10004490
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, 1
		jz	short loc_1001596A
		push	[esp+14h+var_8]
		call	sub_10004450
		add	esp, 4
		neg	esi
		sbb	esi, esi
		and	esi, 3
		pop	edi
		mov	eax, esi
		pop	esi
		pop	ebp
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_1001596A:				; CODE XREF: sub_10015920+2Cj
		push	2Ch
		push	1
		call	ldap_x_calloc
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		jnz	short loc_10015992
		push	[esp+14h+var_8]
		call	sub_10004450
		add	esp, 4
		lea	eax, [esi+2]
		pop	edi
		pop	esi
		pop	ebp
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_10015992:				; CODE XREF: sub_10015920+5Aj
		mov	eax, [esp+14h+var_8]
		push	ebx
		mov	eax, [eax]
		mov	[esi], eax
		push	[esp+18h+var_8]
		call	ldap_x_free
		mov	ebx, ds:_stricmp
		add	esp, 4
		cmp	[esp+18h+arg_C], 0
		jle	loc_10015A74
		lea	eax, [esp+18h+var_8]
		push	eax
		push	ebp
		push	edi
		call	sub_10004490
		add	esp, 0Ch
		cmp	eax, 1
		jge	short loc_100159EB

loc_100159CC:				; CODE XREF: sub_10015920+166j
					; sub_10015920+190j ...
		push	[esp+18h+var_8]
		call	sub_10004450
		add	esp, 4

loc_100159D8:				; CODE XREF: sub_10015920+28Aj
		push	esi
		call	ldap_free_searchprefs
		pop	ebx
		pop	edi
		pop	esi
		mov	eax, 3
		pop	ebp
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_100159EB:				; CODE XREF: sub_10015920+AAj
		mov	ecx, [esp+18h+var_8]
		xor	eax, eax
		mov	[esp+18h+var_4], eax
		cmp	[ecx], eax
		jz	short loc_10015A6B
		xor	ebp, ebp
		jmp	short loc_10015A00
; ---------------------------------------------------------------------------
		align 10h

loc_10015A00:				; CODE XREF: sub_10015920+DBj
					; sub_10015920+13Bj
		xor	ebx, ebx
		cmp	off_10024880, ebx
		jz	short loc_10015A4B
		mov	eax, offset off_10024880
		xor	edi, edi

loc_10015A11:				; CODE XREF: sub_10015920+125j
		push	dword ptr [eax]	; Str2
		push	dword ptr [ecx+ebp] ; Str1
		call	ds:_stricmp
		add	esp, 8
		test	eax, eax
		jnz	short loc_10015A2C
		mov	eax, dword_10024888[edi]
		or	[esi+4], eax

loc_10015A2C:				; CODE XREF: sub_10015920+101j
		mov	ecx, [esp+18h+var_8]
		inc	ebx
		lea	edi, ds:0[ebx*4]
		cmp	off_10024880[edi], 0
		lea	eax, off_10024880[edi]
		jnz	short loc_10015A11
		mov	eax, [esp+18h+var_4]

loc_10015A4B:				; CODE XREF: sub_10015920+E8j
		inc	eax
		cmp	dword ptr [ecx+eax*4], 0
		mov	[esp+18h+var_4], eax
		lea	ebp, ds:0[eax*4]
		jnz	short loc_10015A00
		mov	ebx, ds:_stricmp
		mov	ebp, [esp+18h+arg_4]
		mov	edi, [esp+18h+arg_0]

loc_10015A6B:				; CODE XREF: sub_10015920+D7j
		push	ecx
		call	sub_10004450
		add	esp, 4

loc_10015A74:				; CODE XREF: sub_10015920+92j
		lea	eax, [esp+18h+var_8]
		push	eax
		push	ebp
		push	edi
		call	sub_10004490
		add	esp, 0Ch
		cmp	eax, 1
		jnz	loc_100159CC
		mov	eax, [esp+18h+var_8]
		mov	eax, [eax]
		mov	[esi+8], eax
		push	[esp+18h+var_8]
		call	ldap_x_free
		lea	eax, [esp+1Ch+var_8]
		push	eax
		push	ebp
		push	edi
		call	sub_10004490
		add	esp, 10h
		cmp	eax, 1
		jnz	loc_100159CC
		mov	eax, [esp+18h+var_8]
		mov	eax, [eax]
		mov	[esi+10h], eax
		push	[esp+18h+var_8]
		call	ldap_x_free
		lea	eax, [esp+1Ch+var_8]
		push	eax
		push	ebp
		push	edi
		call	sub_10004490
		add	esp, 10h
		cmp	eax, 1
		jnz	loc_100159CC
		mov	eax, [esp+18h+var_8]
		mov	eax, [eax]
		mov	[esi+14h], eax
		push	[esp+18h+var_8]
		call	ldap_x_free
		lea	eax, [esp+1Ch+var_8]
		push	eax
		push	ebp
		push	edi
		call	sub_10004490
		add	esp, 10h
		cmp	eax, 1
		jnz	loc_100159CC
		mov	eax, [esp+18h+var_8]
		mov	eax, [eax]
		mov	[esi+18h], eax
		push	[esp+18h+var_8]
		call	ldap_x_free
		lea	eax, [esp+1Ch+var_8]
		push	eax
		push	ebp
		push	edi
		call	sub_10004490
		add	esp, 10h
		cmp	eax, 1
		jnz	loc_100159CC
		mov	eax, [esp+18h+var_8]
		mov	eax, [eax]
		mov	[esi+1Ch], eax
		push	[esp+18h+var_8]
		call	ldap_x_free
		lea	eax, [esp+1Ch+var_8]
		push	eax
		push	ebp
		push	edi
		call	sub_10004490
		add	esp, 10h
		cmp	eax, 1
		jnz	loc_100159CC
		mov	eax, [esp+18h+var_8]
		push	offset aSubtree	; "subtree"
		push	dword ptr [eax]	; Str1
		call	ebx ; _stricmp
		add	esp, 8
		mov	ecx, 2
		test	eax, eax
		jnz	short loc_10015B7D
		mov	[esi+0Ch], cx
		jmp	short loc_10015BB4
; ---------------------------------------------------------------------------

loc_10015B7D:				; CODE XREF: sub_10015920+255j
		mov	eax, [esp+18h+var_8]
		push	offset aOnelevel ; "onelevel"
		push	dword ptr [eax]	; Str1
		call	ebx ; _stricmp
		add	esp, 8
		test	eax, eax
		jnz	short loc_10015B98
		mov	eax, 1
		jmp	short loc_10015BB0
; ---------------------------------------------------------------------------

loc_10015B98:				; CODE XREF: sub_10015920+26Fj
		mov	eax, [esp+18h+var_8]
		push	offset aBase	; "base"
		push	dword ptr [eax]	; Str1
		call	ebx ; _stricmp
		add	esp, 8
		test	eax, eax
		jnz	loc_100159D8

loc_10015BB0:				; CODE XREF: sub_10015920+276j
		mov	[esi+0Ch], ax

loc_10015BB4:				; CODE XREF: sub_10015920+25Bj
		push	[esp+18h+var_8]
		call	sub_10004450
		mov	ebx, [esp+1Ch+arg_0]
		lea	eax, [esp+1Ch+var_8]
		push	eax
		push	ebp
		push	ebx
		lea	edi, [esi+20h]
		call	sub_10004490
		add	esp, 10h
		test	eax, eax
		jle	loc_10015C99
		jmp	short loc_10015BE0
; ---------------------------------------------------------------------------
		align 10h

loc_10015BE0:				; CODE XREF: sub_10015920+2BBj
					; sub_10015920+373j
		cmp	eax, 5
		jl	loc_100159CC
		push	18h
		push	1
		call	ldap_x_calloc
		add	esp, 8
		mov	[edi], eax
		test	eax, eax
		jz	loc_10015D1B
		mov	ecx, [esp+18h+var_8]
		mov	ecx, [ecx]
		mov	[eax], ecx
		mov	eax, [esp+18h+var_8]
		mov	ecx, [edi]
		mov	eax, [eax+4]
		mov	[ecx+4], eax
		mov	eax, [esp+18h+var_8]
		mov	ecx, [edi]
		mov	eax, [eax+0Ch]
		mov	[ecx+0Ch], eax
		mov	eax, [esp+18h+var_8]
		mov	ecx, [edi]
		mov	eax, [eax+10h]
		mov	[ecx+10h], eax
		mov	eax, [edi]
		mov	dword ptr [eax+8], 0
		mov	ebx, [esp+18h+var_8]
		mov	edx, [ebx+8]
		lea	ecx, [edx+1]
		mov	edi, edi

loc_10015C40:				; CODE XREF: sub_10015920+325j
		mov	al, [edx]
		inc	edx
		test	al, al
		jnz	short loc_10015C40
		sub	edx, ecx
		dec	edx
		js	short loc_10015C68
		mov	eax, 1

loc_10015C51:				; CODE XREF: sub_10015920+346j
		mov	ecx, [ebx+8]
		cmp	byte ptr [edx+ecx], 31h
		jnz	short loc_10015C63
		mov	ecx, [edi]
		or	[ecx+8], eax
		mov	ebx, [esp+18h+var_8]

loc_10015C63:				; CODE XREF: sub_10015920+338j
		rol	eax, 1
		dec	edx
		jns	short loc_10015C51

loc_10015C68:				; CODE XREF: sub_10015920+32Aj
		push	dword ptr [ebx+8]
		call	ldap_x_free
		push	[esp+1Ch+var_8]
		call	ldap_x_free
		mov	edi, [edi]
		lea	eax, [esp+20h+var_8]
		mov	ebx, [esp+20h+arg_0]
		add	edi, 14h
		push	eax
		push	ebp
		push	ebx
		call	sub_10004490
		add	esp, 14h
		test	eax, eax
		jg	loc_10015BE0

loc_10015C99:				; CODE XREF: sub_10015920+2B5j
		lea	eax, [esp+18h+var_8]
		mov	dword ptr [edi], 0
		push	eax
		push	ebp
		push	ebx
		lea	edi, [esi+24h]
		call	sub_10004490
		add	esp, 0Ch
		test	eax, eax
		jle	short loc_10015D05

loc_10015CB5:				; CODE XREF: sub_10015920+3E3j
		cmp	eax, 2
		jl	loc_100159CC
		push	0Ch
		push	1
		call	ldap_x_calloc
		add	esp, 8
		mov	[edi], eax
		test	eax, eax
		jz	short loc_10015D1B
		mov	ecx, [esp+18h+var_8]
		mov	ecx, [ecx]
		mov	[eax], ecx
		mov	eax, [esp+18h+var_8]
		mov	ecx, [edi]
		mov	eax, [eax+4]
		mov	[ecx+4], eax
		push	[esp+18h+var_8]
		call	ldap_x_free
		mov	edi, [edi]
		lea	eax, [esp+1Ch+var_8]
		push	eax
		push	ebp
		push	ebx
		add	edi, 8
		call	sub_10004490
		add	esp, 10h
		test	eax, eax
		jg	short loc_10015CB5

loc_10015D05:				; CODE XREF: sub_10015920+393j
		mov	eax, [esp+18h+arg_8]
		pop	ebx
		mov	dword ptr [edi], 0
		pop	edi
		mov	[eax], esi
		xor	eax, eax
		pop	esi
		pop	ebp
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_10015D1B:				; CODE XREF: sub_10015920+2D9j
					; sub_10015920+3AEj
		push	[esp+18h+var_8]
		call	sub_10004450
		add	esp, 4
		push	esi
		call	ldap_free_searchprefs
		pop	ebx
		pop	edi
		pop	esi
		mov	eax, 2
		pop	ebp
		add	esp, 8
		retn
sub_10015920	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10015D40(int,	char *Dest, int, int, int, int,	int, int, int, int, int, int, int)
sub_10015D40	proc near		; CODE XREF: sub_10016490+1BFp
					; ldap_entry2html+3Fp ...

var_1C		= dword	ptr -1Ch
Src		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
Dest		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch
arg_1C		= dword	ptr  20h
arg_20		= dword	ptr  24h
arg_24		= dword	ptr  28h
arg_28		= dword	ptr  2Ch
arg_2C		= dword	ptr  30h
arg_30		= dword	ptr  34h

		sub	esp, 1Ch
		push	ebx
		mov	ebx, [esp+20h+arg_0]
		test	ebx, ebx
		jnz	short loc_10015D54
		lea	eax, [ebx+59h]
		pop	ebx
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------

loc_10015D54:				; CODE XREF: sub_10015D40+Aj
		push	esi
		mov	esi, [esp+24h+arg_1C]
		test	esi, esi
		jz	loc_10016477
		mov	eax, [esp+24h+arg_C]
		test	eax, eax
		jz	loc_10016477
		cmp	dword ptr [eax+4], 64h
		jnz	loc_10016477
		push	edi
		push	eax
		push	ebx
		call	ldap_get_dn
		mov	edi, eax
		mov	[esp+28h+Src], edi
		test	edi, edi
		jnz	short loc_10015D98
		push	eax
		push	eax
		push	ebx
		call	ldap_get_lderrno
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------

loc_10015D98:				; CODE XREF: sub_10015D40+47j
		push	ebp
		mov	ebp, [esp+2Ch+Dest]
		test	ebp, ebp
		jnz	short loc_10015DE0
		push	2000h
		call	ldap_x_malloc
		mov	ebp, eax
		add	esp, 4
		mov	[esp+2Ch+Dest],	ebp
		test	ebp, ebp
		jnz	short loc_10015DD6
		push	eax
		push	eax
		push	5Ah
		push	ebx
		call	ldap_set_lderrno
		push	edi
		call	ldap_x_free
		add	esp, 4
		lea	eax, [ebp+5Ah]
		pop	ebp
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------

loc_10015DD6:				; CODE XREF: sub_10015D40+76j
		mov	[esp+2Ch+var_8], 1
		jmp	short loc_10015DE8
; ---------------------------------------------------------------------------

loc_10015DE0:				; CODE XREF: sub_10015D40+5Fj
		mov	[esp+2Ch+var_8], 0

loc_10015DE8:				; CODE XREF: sub_10015D40+9Ej
		xor	eax, eax
		cmp	[esp+2Ch+arg_30], eax
		setnz	al
		mov	[esp+2Ch+var_4], eax
		test	eax, eax
		mov	eax, [esp+2Ch+arg_2C]
		jz	loc_1001606F
		test	al, 2
		jnz	loc_10015EF1
		mov	esi, [esp+2Ch+arg_10]
		mov	eax, offset aEntry ; "Entry"
		test	esi, esi
		jz	short loc_10015E18
		mov	eax, [esi]

loc_10015E18:				; CODE XREF: sub_10015D40+D4j
		mov	edi, [esp+2Ch+arg_24]
		push	eax
		push	edi
		push	edi
		push	edi
		push	offset aHtmlSHeadSTitl ; "<HTML>%s<HEAD>%s<TITLE>%s%s -	"
		push	ebp		; Dest
		call	ds:sprintf
		mov	ecx, ebp
		add	esp, 18h
		lea	edx, [ecx+1]

loc_10015E34:				; CODE XREF: sub_10015D40+F9j
		mov	al, [ecx]
		inc	ecx
		test	al, al
		jnz	short loc_10015E34
		sub	ecx, edx
		push	ecx
		push	ebp
		push	[esp+34h+arg_20]
		call	[esp+38h+arg_1C]
		push	0		; int
		push	offset Src	; int
		push	[esp+40h+arg_20] ; int
		push	[esp+44h+arg_1C] ; int
		push	[esp+48h+arg_28] ; int
		push	0		; int
		push	[esp+50h+Src]	; Src
		push	ebp		; Dest
		call	sub_10016EC0
		add	esp, 2Ch
		mov	eax, offset aEntry ; "Entry"
		test	esi, esi
		jz	short loc_10015E74
		mov	eax, [esi]

loc_10015E74:				; CODE XREF: sub_10015D40+130j
		push	eax
		push	edi
		push	edi
		push	edi
		push	edi
		push	offset aSTitleSHeadSBo ; "%s</TITLE>%s</HEAD>%s<BODY>%s<H3>%s -	"
		push	ebp		; Dest
		call	ds:sprintf
		mov	ecx, ebp
		add	esp, 1Ch
		lea	edx, [ecx+1]
		lea	ecx, [ecx+0]

loc_10015E90:				; CODE XREF: sub_10015D40+155j
		mov	al, [ecx]
		inc	ecx
		test	al, al
		jnz	short loc_10015E90
		mov	esi, [esp+2Ch+arg_1C]
		sub	ecx, edx
		push	ecx
		push	ebp
		push	[esp+34h+arg_20]
		call	esi
		push	0		; int
		push	offset Src	; int
		push	[esp+40h+arg_20] ; int
		push	esi		; int
		push	[esp+48h+arg_28] ; int
		push	0		; int
		push	[esp+50h+Src]	; Src
		push	ebp		; Dest
		call	sub_10016EC0
		push	edi
		push	offset aH3S	; "</H3>%s"
		push	ebp		; Dest
		call	ds:sprintf
		mov	ecx, ebp
		add	esp, 38h
		lea	edx, [ecx+1]

loc_10015ED6:				; CODE XREF: sub_10015D40+19Bj
		mov	al, [ecx]
		inc	ecx
		test	al, al
		jnz	short loc_10015ED6
		mov	edi, [esp+2Ch+arg_20]
		sub	ecx, edx
		push	ecx
		push	ebp
		push	edi
		call	esi
		mov	eax, [esp+38h+arg_2C]
		add	esp, 0Ch
		jmp	short loc_10015EF5
; ---------------------------------------------------------------------------

loc_10015EF1:				; CODE XREF: sub_10015D40+C3j
		mov	edi, [esp+2Ch+arg_20]

loc_10015EF5:				; CODE XREF: sub_10015D40+1AFj
		test	al, 4
		jz	loc_10016066
		push	0		; int
		push	[esp+30h+Src]	; Src
		call	ldap_explode_dn
		mov	ebx, eax
		test	ebx, ebx
		jz	loc_10016062
		push	[esp+2Ch+arg_30]
		push	offset aAHrefS	; "<A HREF=\"%s"
		push	ebp		; Dest
		call	ds:sprintf
		lea	ebp, [ebx+4]
		add	esp, 0Ch
		cmp	dword ptr [ebp+0], 0
		mov	esi, 1
		jz	short loc_10015F6B
		mov	edi, ebp
		mov	ebp, [esp+2Ch+Dest]
		lea	esp, [esp+0]

loc_10015F40:				; CODE XREF: sub_10015D40+226j
		cmp	esi, 1
		jle	short loc_10015F53
		push	offset asc_100201F8 ; ", "
		push	ebp
		call	sub_10017450
		add	esp, 8

loc_10015F53:				; CODE XREF: sub_10015D40+203j
		push	dword ptr [edi]
		push	ebp
		call	sub_10017450
		inc	esi
		add	esp, 8
		cmp	dword ptr [ebx+esi*4], 0
		lea	edi, [ebx+esi*4]
		jnz	short loc_10015F40
		lea	ebp, [ebx+4]

loc_10015F6B:				; CODE XREF: sub_10015D40+1F1j
		mov	eax, [ebp+0]
		mov	edi, ds:strchr
		test	eax, eax
		jz	short loc_10015F89
		push	3Dh		; Val
		push	eax		; Str
		call	edi ; strchr
		add	esp, 8
		test	eax, eax
		jnz	short loc_10015F8E
		mov	edx, [ebp+0]
		jmp	short loc_10015F91
; ---------------------------------------------------------------------------

loc_10015F89:				; CODE XREF: sub_10015D40+236j
		mov	eax, offset aTheWorld ;	"=The World"

loc_10015F8E:				; CODE XREF: sub_10015D40+242j
		lea	edx, [eax+1]

loc_10015F91:				; CODE XREF: sub_10015D40+247j
		mov	ecx, [esp+2Ch+Dest]
		lea	esi, [ecx+1]

loc_10015F98:				; CODE XREF: sub_10015D40+25Dj
		mov	al, [ecx]
		inc	ecx
		test	al, al
		jnz	short loc_10015F98
		push	[esp+2Ch+arg_24]
		sub	ecx, esi
		mov	eax, offset a??one ; "??one"
		cmp	dword ptr [ebp+0], 0
		mov	ebp, [esp+30h+Dest]
		push	edx
		mov	edx, offset Src
		cmovnz	eax, edx
		push	eax
		lea	eax, [ecx+ebp]
		push	offset aSMoveUpToEmSEm ; "%s\">Move Up To <EM>%s</EM></A>%s<BR>"
		push	eax		; Dest
		call	ds:sprintf
		mov	ecx, ebp
		add	esp, 14h
		lea	edx, [ecx+1]

loc_10015FD3:				; CODE XREF: sub_10015D40+298j
		mov	al, [ecx]
		inc	ecx
		test	al, al
		jnz	short loc_10015FD3
		sub	ecx, edx
		push	ecx
		push	ebp
		push	[esp+34h+arg_20]
		call	[esp+38h+arg_1C]
		push	3Dh		; Val
		push	dword ptr [ebx]	; Str
		call	edi ; strchr
		push	[esp+40h+arg_30]
		mov	edi, ds:sprintf
		mov	esi, eax
		push	offset aAHrefS	; "<A HREF=\"%s"
		push	ebp		; Dest
		call	edi ; sprintf
		push	[esp+4Ch+Src]
		push	ebp
		call	sub_10017450
		add	esp, 28h
		test	esi, esi
		jz	short loc_10016014
		inc	esi
		jmp	short loc_10016016
; ---------------------------------------------------------------------------

loc_10016014:				; CODE XREF: sub_10015D40+2CFj
		mov	esi, [ebx]

loc_10016016:				; CODE XREF: sub_10015D40+2D2j
		mov	ecx, ebp
		lea	edx, [ecx+1]
		jmp	short loc_10016020
; ---------------------------------------------------------------------------
		align 10h

loc_10016020:				; CODE XREF: sub_10015D40+2DBj
					; sub_10015D40+2E5j
		mov	al, [ecx]
		inc	ecx
		test	al, al
		jnz	short loc_10016020
		mov	eax, [esp+2Ch+arg_24]
		sub	ecx, edx
		push	eax
		push	eax
		push	esi
		lea	eax, [ecx+ebp]
		push	offset a??one?Objectcl ; "??one?(!(objectClass=dsa))\">Browse Bel"...
		push	eax		; Dest
		call	edi ; sprintf
		mov	ecx, ebp
		add	esp, 14h
		lea	edx, [ecx+1]

loc_10016043:				; CODE XREF: sub_10015D40+308j
		mov	al, [ecx]
		inc	ecx
		test	al, al
		jnz	short loc_10016043
		mov	edi, [esp+2Ch+arg_20]
		sub	ecx, edx
		mov	esi, [esp+2Ch+arg_1C]
		push	ecx
		push	ebp
		push	edi
		call	esi
		add	esp, 0Ch
		push	ebx
		call	ldap_value_free

loc_10016062:				; CODE XREF: sub_10015D40+1CCj
		mov	ebx, [esp+2Ch+arg_0]

loc_10016066:				; CODE XREF: sub_10015D40+1B7j
		push	4
		push	offset aHr	; "<HR>"
		jmp	short loc_100160BC
; ---------------------------------------------------------------------------

loc_1001606F:				; CODE XREF: sub_10015D40+BBj
		mov	edi, [esp+2Ch+arg_20]
		push	1
		push	offset asc_10020280 ; "\""
		push	edi
		call	esi
		push	0		; int
		push	offset Src	; int
		push	edi		; int
		push	esi		; int
		push	[esp+48h+arg_28] ; int
		push	0		; int
		push	[esp+50h+Src]	; Src
		push	ebp		; Dest
		call	sub_10016EC0
		push	[esp+58h+arg_24]
		push	offset aS_1	; "\"%s"
		push	ebp		; Dest
		call	ds:sprintf
		mov	ecx, ebp
		add	esp, 38h
		lea	edx, [ecx+1]

loc_100160B1:				; CODE XREF: sub_10015D40+376j
		mov	al, [ecx]
		inc	ecx
		test	al, al
		jnz	short loc_100160B1
		sub	ecx, edx
		push	ecx
		push	ebp

loc_100160BC:				; CODE XREF: sub_10015D40+32Dj
		push	edi
		call	esi
		mov	edi, [esp+38h+arg_10]
		add	esp, 0Ch
		test	edi, edi
		jz	short loc_100160E3
		test	byte ptr [esp+2Ch+arg_2C], 1
		jz	short loc_100160E3
		push	edi
		call	sub_10016E60
		add	esp, 4
		add	eax, 3
		mov	[esp+2Ch+var_14], eax
		jmp	short loc_100160EB
; ---------------------------------------------------------------------------

loc_100160E3:				; CODE XREF: sub_10015D40+388j
					; sub_10015D40+38Fj
		mov	[esp+2Ch+var_14], 0Fh

loc_100160EB:				; CODE XREF: sub_10015D40+3A1j
		xor	esi, esi
		mov	[esp+2Ch+var_1C], esi
		test	edi, edi
		jnz	loc_10016272
		mov	ebp, [esp+2Ch+arg_C]
		lea	eax, [esp+2Ch+var_10]
		push	eax
		push	ebp
		push	ebx
		mov	[esp+38h+var_10], esi
		call	ldap_first_attribute
		mov	ebx, [esp+2Ch+arg_14]

loc_10016111:				; CODE XREF: sub_10015D40+4AEj
		mov	edi, eax
		test	esi, esi
		jz	short loc_10016125
		cmp	esi, 3
		jz	short loc_10016125
		cmp	esi, 4
		jnz	loc_100161FA

loc_10016125:				; CODE XREF: sub_10015D40+3D5j
					; sub_10015D40+3DAj
		test	edi, edi
		jz	loc_100161FA
		push	edi		; Str1
		push	ebp		; int
		push	[esp+34h+arg_0]	; int
		call	ldap_get_values
		mov	ebp, eax
		test	ebp, ebp
		jnz	loc_100161F3
		xor	esi, esi
		mov	[esp+2Ch+var_1C], esi
		test	ebx, ebx
		jz	short loc_1001617D
		cmp	[ebx], esi
		jz	short loc_1001616C
		mov	eax, ebx

loc_10016152:				; CODE XREF: sub_10015D40+42Aj
		push	dword ptr [eax]	; Str2
		push	edi		; Str1
		call	ds:_stricmp
		add	esp, 8
		test	eax, eax
		jz	short loc_1001616C
		inc	esi
		cmp	dword ptr [ebx+esi*4], 0
		lea	eax, [ebx+esi*4]
		jnz	short loc_10016152

loc_1001616C:				; CODE XREF: sub_10015D40+40Ej
					; sub_10015D40+420j
		cmp	dword ptr [ebx+esi*4], 0
		jz	short loc_10016179
		mov	eax, [esp+2Ch+arg_18]
		mov	ebp, [eax+esi*4]

loc_10016179:				; CODE XREF: sub_10015D40+430j
		mov	esi, [esp+2Ch+var_1C]

loc_1001617D:				; CODE XREF: sub_10015D40+40Aj
					; sub_10015D40+4B8j
		movsx	eax, byte ptr [edi]
		push	eax		; C
		call	ds:islower
		add	esp, 4
		test	eax, eax
		jz	short loc_1001619D
		movsx	eax, byte ptr [edi]
		push	eax		; C
		call	ds:toupper
		add	esp, 4
		mov	[edi], al

loc_1001619D:				; CODE XREF: sub_10015D40+44Cj
		push	[esp+2Ch+arg_30]
		push	[esp+30h+arg_28]
		push	[esp+34h+arg_24]
		push	[esp+38h+arg_20]
		push	[esp+3Ch+arg_1C]
		push	1000001h
		push	[esp+44h+var_14]
		push	edi
		mov	edi, [esp+4Ch+arg_0]
		push	ebp
		push	[esp+50h+Dest]
		push	edi
		call	sub_10016690
		add	esp, 2Ch
		mov	[esp+2Ch+var_1C], eax
		test	esi, esi
		jz	short loc_100161DB
		push	ebp
		call	ldap_value_free

loc_100161DB:				; CODE XREF: sub_10015D40+493j
		push	[esp+2Ch+var_10]
		mov	ebp, [esp+30h+arg_C]
		push	ebp
		push	edi
		call	ldap_next_attribute
		mov	esi, [esp+2Ch+var_1C]
		jmp	loc_10016111
; ---------------------------------------------------------------------------

loc_100161F3:				; CODE XREF: sub_10015D40+3FCj
		mov	esi, 1
		jmp	short loc_1001617D
; ---------------------------------------------------------------------------

loc_100161FA:				; CODE XREF: sub_10015D40+3DFj
					; sub_10015D40+3E7j
		cmp	[esp+2Ch+var_10], 0
		jnz	short loc_1001620A
		push	0		; int
		push	0		; Memory
		call	ber_free

loc_1001620A:				; CODE XREF: sub_10015D40+4BFj
					; sub_10015D40+54Ej ...
		cmp	[esp+2Ch+var_4], 0
		mov	ebx, [esp+2Ch+Dest]
		jz	short loc_1001624C
		test	byte ptr [esp+2Ch+arg_2C], 2
		jnz	short loc_1001624C
		mov	eax, [esp+2Ch+arg_24]
		push	eax
		push	eax
		push	offset aBodySHtmlS ; "</BODY>%s</HTML>%s"
		push	ebx		; Dest
		call	ds:sprintf
		mov	ecx, ebx
		add	esp, 10h
		lea	edx, [ecx+1]

loc_10016236:				; CODE XREF: sub_10015D40+4FBj
		mov	al, [ecx]
		inc	ecx
		test	al, al
		jnz	short loc_10016236
		sub	ecx, edx
		push	ecx
		push	ebx
		push	[esp+34h+arg_20]
		call	[esp+38h+arg_1C]
		add	esp, 0Ch

loc_1001624C:				; CODE XREF: sub_10015D40+4D3j
					; sub_10015D40+4DAj
		push	[esp+2Ch+Src]
		call	ldap_x_free
		add	esp, 4
		cmp	[esp+2Ch+var_8], 0
		jz	short loc_10016268
		push	ebx
		call	ldap_x_free
		add	esp, 4

loc_10016268:				; CODE XREF: sub_10015D40+51Dj
		pop	ebp
		pop	edi
		mov	eax, esi
		pop	esi
		pop	ebx
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------

loc_10016272:				; CODE XREF: sub_10015D40+3B3j
		push	edi
		call	ldap_first_tmplrow
		mov	ebp, [esp+2Ch+arg_14]

loc_1001627C:				; CODE XREF: sub_10015D40+732j
		mov	ecx, eax
		mov	[esp+2Ch+var_10], ecx
		test	esi, esi
		jz	short loc_10016294
		cmp	esi, 3
		jz	short loc_10016294
		cmp	esi, 4
		jnz	loc_1001620A

loc_10016294:				; CODE XREF: sub_10015D40+544j
					; sub_10015D40+549j
		test	ecx, ecx
		jz	loc_1001620A
		push	ecx
		push	edi
		call	ldap_first_tmplcol
		mov	edi, eax
		test	edi, edi
		jz	loc_10016464
		lea	ecx, [ecx+0]

loc_100162B0:				; CODE XREF: sub_10015D40+71Ej
		mov	eax, [edi+8]
		xor	ebx, ebx
		test	eax, eax
		jz	short loc_100162F5
		mov	esi, [esp+2Ch+arg_0]
		push	eax		; Str1
		push	[esp+30h+arg_C]	; int
		push	esi		; int
		call	ldap_get_values
		mov	ebx, eax
		test	ebx, ebx
		jz	short loc_100162F5
		test	byte ptr [edi+4], 2
		mov	[esp+2Ch+var_C], 1
		jz	short loc_1001634F
		cmp	dword ptr [ebx], 0
		jz	short loc_1001634F
		cmp	dword ptr [ebx+4], 0
		jz	short loc_1001634F
		push	offset ldap_sort_strcasecmp ; PtFuncCompare
		push	ebx		; Base
		push	esi		; int
		call	ldap_sort_values
		jmp	short loc_1001634F
; ---------------------------------------------------------------------------

loc_100162F5:				; CODE XREF: sub_10015D40+577j
					; sub_10015D40+58Cj
		test	byte ptr [edi+4], 8
		mov	[esp+2Ch+var_C], 0
		jnz	short loc_1001634F
		test	ebp, ebp
		jz	short loc_1001634F
		cmp	dword ptr [edi+8], 0
		jz	short loc_1001634F
		xor	esi, esi
		cmp	[ebp+0], esi
		jz	short loc_10016341
		mov	eax, ebp
		jmp	short loc_10016320
; ---------------------------------------------------------------------------
		align 10h

loc_10016320:				; CODE XREF: sub_10015D40+5D6j
					; sub_10015D40+5FFj
		push	dword ptr [eax]	; Str2
		push	dword ptr [edi+8] ; Str1
		call	ds:_stricmp
		add	esp, 8
		test	eax, eax
		jz	short loc_10016341
		inc	esi
		lea	eax, ds:0[esi*4]
		add	eax, ebp
		cmp	dword ptr [eax], 0
		jnz	short loc_10016320

loc_10016341:				; CODE XREF: sub_10015D40+5D2j
					; sub_10015D40+5F0j
		cmp	dword ptr [ebp+esi*4+0], 0
		jz	short loc_1001634F
		mov	eax, [esp+2Ch+arg_18]
		mov	ebx, [eax+esi*4]

loc_1001634F:				; CODE XREF: sub_10015D40+59Aj
					; sub_10015D40+59Fj ...
		test	ebx, ebx
		jz	short loc_10016389
		mov	ecx, [ebx]
		test	ecx, ecx
		jz	short loc_10016389
		mov	eax, [edi]
		mov	esi, 1
		and	eax, 0FF000000h
		cmp	eax, 4000000h
		jnz	short loc_1001638B
		test	byte ptr [edi+4], 20h
		jz	short loc_1001638B
		movsx	eax, byte ptr [ecx]
		push	eax		; C
		call	ds:toupper
		xor	ecx, ecx
		add	esp, 4
		cmp	eax, 54h
		cmovnz	esi, ecx
		jmp	short loc_1001638B
; ---------------------------------------------------------------------------

loc_10016389:				; CODE XREF: sub_10015D40+611j
					; sub_10015D40+617j
		xor	esi, esi

loc_1001638B:				; CODE XREF: sub_10015D40+62Aj
					; sub_10015D40+630j ...
		mov	eax, [edi]
		cmp	eax, 1000000Dh
		jnz	short loc_10016402
		test	byte ptr [esp+2Ch+arg_2C], 2
		jz	loc_1001643B
		cmp	dword ptr [edi+8], 0
		jz	short loc_100163C5
		test	esi, esi
		jz	loc_1001643B
		mov	eax, [ebx]
		movsx	eax, byte ptr [eax]
		push	eax		; C
		call	ds:toupper
		add	esp, 4
		cmp	eax, 54h
		jnz	loc_1001643B

loc_100163C5:				; CODE XREF: sub_10015D40+663j
		push	[esp+2Ch+arg_30] ; int
		push	[esp+30h+arg_24] ; int
		push	[esp+34h+arg_20] ; int
		push	[esp+38h+arg_1C] ; int
		push	[esp+3Ch+arg_28] ; int
		push	[esp+40h+var_14] ; int
		push	edi		; int
		push	[esp+48h+Src]	; int
		push	[esp+4Ch+arg_C]	; int
		push	[esp+50h+arg_8]	; int
		push	[esp+54h+Dest]	; Dest
		push	[esp+58h+arg_0]	; int
		call	sub_10017100
		mov	esi, eax
		add	esp, 30h
		mov	[esp+2Ch+var_1C], esi
		jmp	short loc_1001643F
; ---------------------------------------------------------------------------

loc_10016402:				; CODE XREF: sub_10015D40+652j
		test	esi, esi
		jz	short loc_1001643B
		push	[esp+2Ch+arg_30]
		push	[esp+30h+arg_28]
		push	[esp+34h+arg_24]
		push	[esp+38h+arg_20]
		push	[esp+3Ch+arg_1C]
		push	eax
		push	[esp+44h+var_14]
		push	dword ptr [edi+0Ch]
		push	ebx
		push	[esp+50h+Dest]
		push	[esp+54h+arg_0]
		call	sub_10016690
		mov	esi, eax
		add	esp, 2Ch
		mov	[esp+2Ch+var_1C], esi
		jmp	short loc_1001643F
; ---------------------------------------------------------------------------

loc_1001643B:				; CODE XREF: sub_10015D40+659j
					; sub_10015D40+667j ...
		mov	esi, [esp+2Ch+var_1C]

loc_1001643F:				; CODE XREF: sub_10015D40+6C0j
					; sub_10015D40+6F9j
		cmp	[esp+2Ch+var_C], 0
		jz	short loc_1001644C
		push	ebx
		call	ldap_value_free

loc_1001644C:				; CODE XREF: sub_10015D40+704j
		push	edi
		push	[esp+30h+var_10]
		push	[esp+34h+arg_10]
		call	ldap_next_tmplcol
		mov	edi, eax
		test	edi, edi
		jnz	loc_100162B0

loc_10016464:				; CODE XREF: sub_10015D40+567j
		push	[esp+2Ch+var_10]
		mov	edi, [esp+30h+arg_10]
		push	edi
		call	ldap_next_tmplrow
		jmp	loc_1001627C
; ---------------------------------------------------------------------------

loc_10016477:				; CODE XREF: sub_10015D40+1Bj
					; sub_10015D40+27j ...
		push	0
		push	0
		push	59h
		push	ebx
		call	ldap_set_lderrno
		pop	esi
		mov	eax, 59h
		pop	ebx
		add	esp, 1Ch
		retn
sub_10015D40	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10016490	proc near		; CODE XREF: ldap_entry2html_search+34p
					; ldap_entry2text_search+32p

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch
arg_1C		= dword	ptr  20h
arg_20		= dword	ptr  24h
arg_24		= dword	ptr  28h
arg_28		= dword	ptr  2Ch
arg_2C		= dword	ptr  30h
arg_30		= dword	ptr  34h

		sub	esp, 18h
		push	esi
		mov	esi, [esp+1Ch+arg_0]
		test	esi, esi
		jnz	short loc_100164A4
		lea	eax, [esi+59h]
		pop	esi
		add	esp, 18h
		retn
; ---------------------------------------------------------------------------

loc_100164A4:				; CODE XREF: sub_10016490+Aj
		push	ebx
		mov	ebx, [esp+20h+arg_C]
		push	edi
		mov	edi, [esp+24h+arg_4]
		test	edi, edi
		jnz	short loc_100164CA
		test	ebx, ebx
		jnz	short loc_100164CA
		push	ebx
		push	ebx
		push	59h
		push	esi
		call	ldap_set_lderrno
		pop	edi
		lea	eax, [ebx+59h]
		pop	ebx
		pop	esi
		add	esp, 18h
		retn
; ---------------------------------------------------------------------------

loc_100164CA:				; CODE XREF: sub_10016490+20j
					; sub_10016490+24j
		push	ebp
		push	2000h
		mov	[esp+2Ch+var_8], 78h
		mov	[esp+2Ch+var_4], 0
		call	ldap_x_malloc
		mov	ebp, eax
		add	esp, 4
		test	ebp, ebp
		jnz	short loc_10016503
		push	eax
		push	eax
		push	5Ah
		push	esi
		call	ldap_set_lderrno
		lea	eax, [ebp+5Ah]
		pop	ebp
		pop	edi
		pop	ebx
		pop	esi
		add	esp, 18h
		retn
; ---------------------------------------------------------------------------

loc_10016503:				; CODE XREF: sub_10016490+5Cj
		xor	eax, eax
		mov	[esp+28h+var_14], 0
		mov	[esp+28h+var_18], eax
		test	edi, edi
		jnz	short loc_1001652E
		push	ebx
		push	esi
		call	ldap_get_dn
		mov	edi, eax
		test	edi, edi
		jz	loc_10016672
		mov	[esp+28h+var_14], 1

loc_1001652E:				; CODE XREF: sub_10016490+83j
		cmp	[esp+28h+arg_10], 0
		jz	loc_100165D1
		mov	[esp+28h+arg_0], 0
		test	ebx, ebx
		jnz	short loc_10016582
		lea	eax, [esp+28h+arg_0]
		mov	[esp+28h+var_10], offset aObjectclass_0	; "objectClass"
		push	eax
		lea	eax, [esp+2Ch+var_8]
		mov	[esp+2Ch+var_C], ebx
		push	eax
		push	ebx
		lea	eax, [esp+34h+var_10]
		push	eax
		push	offset aObjectclass_1 ;	"objectClass=*"
		push	ebx
		push	edi
		push	esi
		call	ldap_search_st
		test	eax, eax
		jnz	short loc_100165A8
		push	[esp+28h+arg_0]
		push	esi
		call	ldap_first_entry
		mov	ebx, eax
		test	ebx, ebx
		jz	short loc_100165A8

loc_10016582:				; CODE XREF: sub_10016490+B3j
		push	offset aObjectclass_0 ;	"objectClass"
		push	ebx		; int
		push	esi		; int
		call	ldap_get_values
		push	[esp+28h+arg_10]
		mov	ebx, eax
		push	ebx
		call	ldap_oc2template
		mov	[esp+28h+var_18], eax
		test	ebx, ebx
		jz	short loc_100165A8
		push	ebx
		call	ldap_value_free

loc_100165A8:				; CODE XREF: sub_10016490+E0j
					; sub_10016490+F0j ...
		mov	eax, [esp+28h+arg_0]
		test	eax, eax
		jz	short loc_100165B6
		push	eax
		call	ldap_msgfree

loc_100165B6:				; CODE XREF: sub_10016490+11Ej
		mov	eax, [esp+28h+var_18]
		test	eax, eax
		jz	short loc_100165D1
		push	10000h
		push	1
		push	0
		push	eax
		call	ldap_tmplattrs
		mov	ebx, eax
		jmp	short loc_100165D3
; ---------------------------------------------------------------------------

loc_100165D1:				; CODE XREF: sub_10016490+A3j
					; sub_10016490+12Cj
		xor	ebx, ebx

loc_100165D3:				; CODE XREF: sub_10016490+13Fj
		lea	eax, [esp+28h+arg_0]
		push	eax
		lea	eax, [esp+2Ch+var_8]
		push	eax
		push	0
		push	ebx
		push	offset aObjectclass_1 ;	"objectClass=*"
		push	0
		push	edi
		push	esi
		call	ldap_search_st
		cmp	[esp+28h+var_14], 0
		mov	[esp+28h+var_10], eax
		jz	short loc_10016602
		push	edi
		call	ldap_x_free
		add	esp, 4

loc_10016602:				; CODE XREF: sub_10016490+167j
		test	ebx, ebx
		jz	short loc_1001660C
		push	ebx
		call	ldap_value_free

loc_1001660C:				; CODE XREF: sub_10016490+174j
		cmp	[esp+28h+var_10], 0
		jnz	short loc_10016672
		push	[esp+28h+arg_0]
		push	esi
		call	ldap_first_entry
		mov	ecx, eax
		test	ecx, ecx
		jz	short loc_10016672
		push	[esp+28h+arg_30] ; int
		mov	eax, [esp+2Ch+var_18]
		push	[esp+2Ch+arg_2C] ; int
		push	[esp+30h+arg_28] ; int
		push	[esp+34h+arg_24] ; int
		push	[esp+38h+arg_20] ; int
		push	[esp+3Ch+arg_1C] ; int
		push	[esp+40h+arg_18] ; int
		push	[esp+44h+arg_14] ; int
		push	eax		; int
		push	ecx		; int
		push	[esp+50h+arg_8]	; int
		push	ebp		; Dest
		push	esi		; int
		call	sub_10015D40
		push	ebp
		mov	esi, eax
		call	ldap_x_free
		add	esp, 38h
		push	[esp+28h+arg_0]
		call	ldap_msgfree
		pop	ebp
		pop	edi
		pop	ebx
		mov	eax, esi
		pop	esi
		add	esp, 18h
		retn
; ---------------------------------------------------------------------------

loc_10016672:				; CODE XREF: sub_10016490+90j
					; sub_10016490+181j ...
		push	ebp
		call	ldap_x_free
		add	esp, 4
		push	0
		push	0
		push	esi
		call	ldap_get_lderrno
		pop	ebp
		pop	edi
		pop	ebx
		pop	esi
		add	esp, 18h
		retn
sub_10016490	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10016690	proc near		; CODE XREF: sub_10015D40+485p
					; sub_10015D40+6EBp ...

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch
arg_1C		= dword	ptr  20h
arg_20		= dword	ptr  24h
arg_24		= dword	ptr  28h
arg_28		= dword	ptr  2Ch

		sub	esp, 8
		push	esi
		mov	esi, [esp+0Ch+arg_0]
		test	esi, esi
		jz	loc_10016AFE
		cmp	[esp+0Ch+arg_18], 0
		jz	loc_10016AFE
		xor	eax, eax
		cmp	[esp+0Ch+arg_8], eax
		jz	short loc_1001671B
		cmp	[esp+0Ch+arg_28], eax
		setnz	al
		mov	[esp+0Ch+arg_0], eax
		mov	eax, [esp+0Ch+arg_14]
		and	eax, 0FF000000h
		cmp	eax, 1000000h
		jz	short loc_100166DC
		cmp	eax, 4000000h
		jz	short loc_100166DC
		xor	eax, eax
		pop	esi
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_100166DC:				; CODE XREF: sub_10016690+3Cj
					; sub_10016690+43j
		push	ebx
		mov	ebx, [esp+10h+arg_10]
		test	ebx, ebx
		jz	short loc_100166E7
		jns	short loc_100166F0

loc_100166E7:				; CODE XREF: sub_10016690+53j
		mov	ebx, 0Fh
		mov	[esp+10h+arg_10], ebx

loc_100166F0:				; CODE XREF: sub_10016690+55j
		push	ebp
		mov	ebp, [esp+14h+arg_4]
		test	ebp, ebp
		jnz	short loc_1001672A
		push	2000h
		call	ldap_x_malloc
		mov	ebp, eax
		add	esp, 4
		test	ebp, ebp
		jnz	short loc_10016720
		push	eax
		push	eax
		push	5Ah
		push	esi
		call	ldap_set_lderrno
		lea	eax, [ebp+5Ah]
		pop	ebp
		pop	ebx

loc_1001671B:				; CODE XREF: sub_10016690+21j
		pop	esi
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_10016720:				; CODE XREF: sub_10016690+7Aj
		mov	[esp+14h+var_4], 1
		jmp	short loc_10016732
; ---------------------------------------------------------------------------

loc_1001672A:				; CODE XREF: sub_10016690+67j
		mov	[esp+14h+var_4], 0

loc_10016732:				; CODE XREF: sub_10016690+98j
		push	edi
		push	[esp+18h+arg_0]	; int
		mov	edi, [esp+1Ch+arg_20]
		push	edi		; int
		push	[esp+20h+arg_1C] ; int
		push	[esp+24h+arg_18] ; int
		push	ebx		; int
		push	[esp+2Ch+arg_C]	; int
		push	ebp		; Dest
		call	sub_10017040
		mov	eax, [esp+34h+arg_8]
		add	esp, 1Ch
		mov	[esp+18h+var_8], 0
		cmp	dword ptr [eax], 0
		jz	loc_10016AE4

loc_10016767:				; CODE XREF: sub_10016690+44Ej
		mov	esi, [eax]
		mov	ecx, esi
		mov	al, [ecx]
		test	al, al
		jz	short loc_10016783

loc_10016771:				; CODE XREF: sub_10016690+F1j
		movsx	eax, al
		cmp	eax, 80h
		jnb	short loc_10016783
		mov	al, [ecx+1]
		inc	ecx
		test	al, al
		jnz	short loc_10016771

loc_10016783:				; CODE XREF: sub_10016690+DFj
					; sub_10016690+E9j
		xor	edx, edx
		mov	ebx, offset aUnableToDispla ; "(unable to display non-ASCII text value"...
		cmp	[ecx], dl
		mov	ecx, [esp+18h+arg_14]
		setnz	dl
		test	edx, edx
		cmovz	ebx, esi
		cmp	ecx, 100000Bh
		ja	loc_100168C4
		cmp	ecx, 100000Ah
		jnb	loc_100168AB
		mov	eax, ecx
		sub	eax, 1000001h
		jz	loc_10016928
		dec	eax
		jz	short loc_100167EB
		dec	eax
		jnz	loc_100168DD
		push	[esp+18h+arg_28] ; int
		push	edi		; int
		push	[esp+20h+arg_1C] ; int
		push	[esp+24h+arg_18] ; int
		push	[esp+28h+arg_24] ; int
		push	[esp+2Ch+arg_10] ; int
		push	ebx		; Src
		push	ebp		; Dest
		call	sub_10016EC0
		add	esp, 20h
		jmp	loc_10016ACA
; ---------------------------------------------------------------------------

loc_100167EB:				; CODE XREF: sub_10016690+12Ej
		cmp	[esp+18h+var_8], 0
		jle	short loc_10016815
		cmp	[esp+18h+arg_0], 0
		jnz	short loc_10016815
		push	0		; int
		push	edi		; int
		push	[esp+20h+arg_1C] ; int
		push	[esp+24h+arg_18] ; int
		push	[esp+28h+arg_10] ; int
		push	[esp+2Ch+arg_C]	; int
		push	ebp		; Dest
		call	sub_10017040
		add	esp, 1Ch

loc_10016815:				; CODE XREF: sub_10016690+160j
					; sub_10016690+167j
		push	24h		; Val
		push	ebx		; Str
		call	ds:strchr
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		jz	loc_10016928
		jmp	short loc_10016830
; ---------------------------------------------------------------------------
		align 10h

loc_10016830:				; CODE XREF: sub_10016690+19Bj
					; sub_10016690+217j
		mov	byte ptr [esi],	0
		inc	esi
		push	esi
		call	ldap_utf8isspace
		test	eax, eax
		jz	short loc_1001684B
		mov	edi, edi

loc_10016840:				; CODE XREF: sub_10016690+1B9j
		inc	esi
		push	esi
		call	ldap_utf8isspace
		test	eax, eax
		jnz	short loc_10016840

loc_1001684B:				; CODE XREF: sub_10016690+1ACj
		cmp	[esp+18h+arg_0], 0
		push	edi
		push	ebx
		jz	short loc_10016865
		push	offset aDdSBrS	; "<DD>%s<BR>%s"
		push	ebp		; Dest
		call	ds:sprintf
		add	esp, 10h
		jmp	short loc_1001687D
; ---------------------------------------------------------------------------

loc_10016865:				; CODE XREF: sub_10016690+1C2j
		push	offset asc_1001FAB0 ; "	"
		push	[esp+24h+arg_10]
		push	offset aSSS_0	; "%-*s%s%s"
		push	ebp		; Dest
		call	ds:sprintf
		add	esp, 18h

loc_1001687D:				; CODE XREF: sub_10016690+1D3j
		mov	ecx, ebp
		lea	edx, [ecx+1]

loc_10016882:				; CODE XREF: sub_10016690+1F7j
		mov	al, [ecx]
		inc	ecx
		test	al, al
		jnz	short loc_10016882
		sub	ecx, edx
		push	ecx
		push	ebp
		push	[esp+20h+arg_1C]
		call	[esp+24h+arg_18]
		push	24h		; Val
		push	esi		; Str
		mov	ebx, esi
		call	ds:strchr
		mov	esi, eax
		add	esp, 14h
		test	esi, esi
		jnz	short loc_10016830
		jmp	short loc_10016928
; ---------------------------------------------------------------------------

loc_100168AB:				; CODE XREF: sub_10016690+11Aj
		xor	eax, eax
		cmp	ecx, 100000Bh
		setz	al
		push	eax
		push	ebx
		call	sub_100174D0
		add	esp, 8
		mov	ebx, eax
		jmp	short loc_10016928
; ---------------------------------------------------------------------------

loc_100168C4:				; CODE XREF: sub_10016690+10Ej
		mov	eax, ecx
		sub	eax, 100000Ch
		jz	loc_100169F8
		sub	eax, 5
		jz	short loc_10016949
		sub	eax, 2FFFFF3h
		jz	short loc_1001690B

loc_100168DD:				; CODE XREF: sub_10016690+131j
		push	edi
		push	ecx
		push	offset aCanTDisplayIte ; " Can't display item type %ld%s"
		push	ebp		; Dest
		call	ds:sprintf
		mov	ecx, ebp
		add	esp, 10h
		lea	edx, [ecx+1]

loc_100168F3:				; CODE XREF: sub_10016690+268j
		mov	al, [ecx]
		inc	ecx
		test	al, al
		jnz	short loc_100168F3
		sub	ecx, edx
		push	ecx
		push	ebp
		push	[esp+20h+arg_1C]
		call	[esp+24h+arg_18]
		jmp	loc_10016AC7
; ---------------------------------------------------------------------------

loc_1001690B:				; CODE XREF: sub_10016690+24Bj
		movsx	eax, byte ptr [ebx]
		push	eax		; C
		call	ds:toupper
		add	esp, 4
		mov	ebx, offset aTrue ; "TRUE"
		cmp	eax, 54h
		mov	eax, offset aFalse ; "FALSE"
		cmovnz	ebx, eax

loc_10016928:				; CODE XREF: sub_10016690+127j
					; sub_10016690+195j ...
		cmp	[esp+18h+arg_0], 0
		jz	loc_100169BA
		push	edi
		push	ebx
		push	offset aDdSBrS	; "<DD>%s<BR>%s"
		push	ebp		; Dest
		call	ds:sprintf
		add	esp, 10h
		jmp	loc_100169D4
; ---------------------------------------------------------------------------

loc_10016949:				; CODE XREF: sub_10016690+244j
		cmp	[esp+18h+arg_0], 0
		jz	short loc_100169BA
		movdqu	xmm0, ds:xmmword_100202E4
		push	ebx
		push	ebp
		movdqu	xmmword	ptr [ebp+0], xmm0
		mov	eax, ds:dword_100202F4
		mov	[ebp+10h], eax
		mov	al, ds:byte_100202F8
		mov	[ebp+14h], al
		call	sub_10017450
		mov	ecx, ebp
		add	esp, 8
		lea	edx, [ecx+1]
		lea	esp, [esp+0]

loc_10016980:				; CODE XREF: sub_10016690+2F5j
		mov	al, [ecx]
		inc	ecx
		test	al, al
		jnz	short loc_10016980
		sub	ecx, edx
		push	edi
		push	ebx
		push	offset aSABrS	; "\">%s</A><BR>%s"
		lea	eax, [ecx+ebp]
		push	eax		; Dest
		call	ds:sprintf
		mov	ecx, ebp
		add	esp, 10h
		lea	edx, [ecx+1]

loc_100169A2:				; CODE XREF: sub_10016690+317j
		mov	al, [ecx]
		inc	ecx
		test	al, al
		jnz	short loc_100169A2
		sub	ecx, edx
		push	ecx
		push	ebp
		push	[esp+20h+arg_1C]
		call	[esp+24h+arg_18]
		jmp	loc_10016AC7
; ---------------------------------------------------------------------------

loc_100169BA:				; CODE XREF: sub_10016690+29Dj
					; sub_10016690+2BEj
		push	edi
		push	ebx
		push	offset asc_1001FAB0 ; "	"
		push	[esp+24h+arg_10]
		push	offset aSSS_0	; "%-*s%s%s"
		push	ebp		; Dest
		call	ds:sprintf
		add	esp, 18h

loc_100169D4:				; CODE XREF: sub_10016690+2B4j
		mov	ecx, ebp
		lea	edx, [ecx+1]
		lea	esp, [esp+0]

loc_100169E0:				; CODE XREF: sub_10016690+355j
		mov	al, [ecx]
		inc	ecx
		test	al, al
		jnz	short loc_100169E0
		sub	ecx, edx
		push	ecx
		push	ebp
		push	[esp+20h+arg_1C]
		call	[esp+24h+arg_18]
		jmp	loc_10016AC7
; ---------------------------------------------------------------------------

loc_100169F8:				; CODE XREF: sub_10016690+23Bj
		test	edx, edx
		jnz	short loc_10016A5D
		mov	edi, ds:strchr
		push	24h		; Val
		push	ebx		; Str
		call	edi ; strchr
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		jz	short loc_10016A2F
		mov	byte ptr [esi],	0
		inc	esi
		push	esi
		call	ldap_utf8isspace
		test	eax, eax
		jz	short loc_10016A2B
		mov	edi, edi

loc_10016A20:				; CODE XREF: sub_10016690+399j
		inc	esi
		push	esi
		call	ldap_utf8isspace
		test	eax, eax
		jnz	short loc_10016A20

loc_10016A2B:				; CODE XREF: sub_10016690+38Cj
		mov	edi, ebx
		jmp	short loc_10016A64
; ---------------------------------------------------------------------------

loc_10016A2F:				; CODE XREF: sub_10016690+37Ej
		push	20h		; Val
		push	ebx		; Str
		call	edi ; strchr
		mov	edi, eax
		add	esp, 8
		test	edi, edi
		jz	short loc_10016A5D
		mov	byte ptr [edi],	0
		inc	edi
		push	edi
		call	ldap_utf8isspace
		test	eax, eax
		jz	short loc_10016A62
		jmp	short loc_10016A50
; ---------------------------------------------------------------------------
		align 10h

loc_10016A50:				; CODE XREF: sub_10016690+3BBj
					; sub_10016690+3C9j
		inc	edi
		push	edi
		call	ldap_utf8isspace
		test	eax, eax
		jnz	short loc_10016A50
		jmp	short loc_10016A62
; ---------------------------------------------------------------------------

loc_10016A5D:				; CODE XREF: sub_10016690+36Aj
					; sub_10016690+3ABj
		mov	edi, offset aUrl ; "URL"

loc_10016A62:				; CODE XREF: sub_10016690+3B9j
					; sub_10016690+3CBj
		mov	esi, ebx

loc_10016A64:				; CODE XREF: sub_10016690+39Dj
		cmp	[esp+18h+arg_0], 0
		mov	ecx, [esp+18h+arg_20]
		push	ecx
		jz	short loc_10016A83
		push	edi
		push	esi
		push	offset aDdAHrefSSABrS ;	"<DD><A	HREF=\"%s\">%s</A><BR>%s"
		push	ebp		; Dest
		call	ds:sprintf
		add	esp, 14h
		jmp	short loc_10016AA8
; ---------------------------------------------------------------------------

loc_10016A83:				; CODE XREF: sub_10016690+3DEj
		mov	edx, [esp+1Ch+arg_10]
		push	esi
		push	offset asc_1001FAB0 ; "	"
		lea	eax, [edx+2]
		push	eax
		push	ecx
		push	edi
		push	offset asc_1001FAB0 ; "	"
		push	edx
		push	offset aSSSSSS	; "%-*s%s%s%-*s%s%s"
		push	ebp		; Dest
		call	ds:sprintf
		add	esp, 28h

loc_10016AA8:				; CODE XREF: sub_10016690+3F1j
		mov	ecx, ebp
		lea	edx, [ecx+1]
		lea	ecx, [ecx+0]

loc_10016AB0:				; CODE XREF: sub_10016690+425j
		mov	al, [ecx]
		inc	ecx
		test	al, al
		jnz	short loc_10016AB0
		sub	ecx, edx
		push	ecx
		push	ebp
		push	[esp+20h+arg_1C]
		call	[esp+24h+arg_18]
		mov	edi, [esp+24h+arg_20]

loc_10016AC7:				; CODE XREF: sub_10016690+276j
					; sub_10016690+325j ...
		add	esp, 0Ch

loc_10016ACA:				; CODE XREF: sub_10016690+156j
		mov	edx, [esp+18h+var_8]
		mov	eax, [esp+18h+arg_8]
		inc	edx
		cmp	dword ptr [eax+edx*4], 0
		mov	[esp+18h+var_8], edx
		lea	eax, [eax+edx*4]
		jnz	loc_10016767

loc_10016AE4:				; CODE XREF: sub_10016690+D1j
		cmp	[esp+18h+var_4], 0
		pop	edi
		jz	short loc_10016AF5
		push	ebp
		call	ldap_x_free
		add	esp, 4

loc_10016AF5:				; CODE XREF: sub_10016690+45Aj
		pop	ebp
		pop	ebx
		xor	eax, eax
		pop	esi
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_10016AFE:				; CODE XREF: sub_10016690+Aj
					; sub_10016690+15j
		mov	eax, 59h
		pop	esi
		add	esp, 8
		retn
sub_10016690	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10016B10	proc near		; CODE XREF: sub_100174D0+156p

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		sub	esp, 10h
		push	ebx
		push	ebp
		mov	ebp, [esp+18h+arg_0]
		mov	eax, [ebp+0]
		mov	[esp+18h+var_4], eax
		cmp	eax, 3Bh
		ja	loc_10016CAF
		mov	eax, [ebp+4]
		mov	[esp+18h+var_8], eax
		cmp	eax, 3Bh
		ja	loc_10016CAF
		mov	ecx, [ebp+8]
		mov	[esp+18h+var_10], ecx
		cmp	ecx, 18h
		ja	loc_10016CAF
		mov	edx, [ebp+0Ch]
		mov	[esp+18h+arg_0], edx
		lea	eax, [edx-1]
		cmp	eax, 1Eh
		ja	loc_10016CAF
		mov	eax, [ebp+10h]
		inc	eax
		mov	[esp+18h+var_C], eax
		lea	ebx, [eax-1]
		cmp	ebx, 0Bh
		ja	loc_10016CAF
		cmp	ecx, 18h
		jnz	short loc_10016B82
		inc	edx
		mov	[esp+18h+var_10], 0
		mov	[esp+18h+arg_0], edx

loc_10016B82:				; CODE XREF: sub_10016B10+63j
		mov	ebp, [ebp+14h]
		cmp	ebp, 76Ch
		jge	short loc_10016B93
		add	ebp, 76Ch

loc_10016B93:				; CODE XREF: sub_10016B10+7Bj
		push	esi
		push	edi
		mov	esi, 7B2h
		xor	edi, edi
		cmp	ebp, esi
		jle	short loc_10016C04

loc_10016BA0:				; CODE XREF: sub_10016B10+F2j
		mov	eax, esi
		and	eax, 80000003h
		jns	short loc_10016BAE
		dec	eax
		or	eax, 0FFFFFFFCh
		inc	eax

loc_10016BAE:				; CODE XREF: sub_10016B10+97j
		jz	short loc_10016BB7
		mov	ecx, 16Dh
		jmp	short loc_10016BFD
; ---------------------------------------------------------------------------

loc_10016BB7:				; CODE XREF: sub_10016B10:loc_10016BAEj
		mov	eax, 51EB851Fh
		mov	ecx, esi
		imul	esi
		sar	edx, 5
		mov	eax, edx
		shr	eax, 1Fh
		add	eax, edx
		imul	eax, 64h
		sub	ecx, eax
		jz	short loc_10016BD8
		mov	ecx, 16Eh
		jmp	short loc_10016BFD
; ---------------------------------------------------------------------------

loc_10016BD8:				; CODE XREF: sub_10016B10+BFj
		mov	eax, 51EB851Fh
		mov	ecx, esi
		imul	esi
		sar	edx, 7
		mov	eax, edx
		shr	eax, 1Fh
		add	eax, edx
		imul	eax, 190h
		sub	ecx, eax
		neg	ecx
		sbb	ecx, ecx
		add	ecx, 16Eh

loc_10016BFD:				; CODE XREF: sub_10016B10+A5j
					; sub_10016B10+C6j
		inc	esi
		add	edi, ecx
		cmp	esi, ebp
		jl	short loc_10016BA0

loc_10016C04:				; CODE XREF: sub_10016B10+8Ej
		mov	eax, ebp
		and	eax, 80000003h
		jns	short loc_10016C12
		dec	eax
		or	eax, 0FFFFFFFCh
		inc	eax

loc_10016C12:				; CODE XREF: sub_10016B10+FBj
		jnz	short loc_10016C61
		mov	eax, 51EB851Fh
		imul	ebp
		sar	edx, 5
		mov	ecx, edx
		shr	ecx, 1Fh
		add	ecx, edx
		mov	edx, ebp
		imul	ecx, 64h
		sub	edx, ecx
		jnz	short loc_10016C59
		mov	eax, 51EB851Fh
		imul	ebp
		sar	edx, 7
		mov	eax, edx
		shr	eax, 1Fh
		add	eax, edx
		imul	eax, 190h
		sub	ebp, eax
		neg	ebp
		sbb	ebp, ebp
		add	ebp, 16Eh
		cmp	ebp, 16Eh
		jnz	short loc_10016C61

loc_10016C59:				; CODE XREF: sub_10016B10+11Cj
		cmp	[esp+20h+var_C], 3
		jl	short loc_10016C61
		inc	edi

loc_10016C61:				; CODE XREF: sub_10016B10:loc_10016C12j
					; sub_10016B10+147j ...
		test	ebx, ebx
		jz	short loc_10016C78
		lea	eax, dword_10024888[ebx*4]
		lea	esp, [esp+0]

loc_10016C70:				; CODE XREF: sub_10016B10+166j
		add	edi, [eax]
		lea	eax, [eax-4]
		dec	ebx
		jnz	short loc_10016C70

loc_10016C78:				; CODE XREF: sub_10016B10+153j
		mov	eax, [esp+20h+arg_0]
		mov	ecx, [esp+20h+var_10]
		add	eax, edi
		pop	edi
		pop	esi
		pop	ebp
		lea	eax, [eax+eax*2]
		lea	ecx, [ecx+eax*8]
		add	ecx, 0FFFFFFE8h
		mov	eax, ecx
		shl	eax, 4
		sub	eax, ecx
		mov	ecx, [esp+14h+var_8]
		pop	ebx
		lea	ecx, [ecx+eax*4]
		mov	eax, ecx
		shl	eax, 4
		sub	eax, ecx
		mov	ecx, [esp+10h+var_4]
		lea	eax, [ecx+eax*4]
		add	esp, 10h
		retn
; ---------------------------------------------------------------------------

loc_10016CAF:				; CODE XREF: sub_10016B10+13j
					; sub_10016B10+23j ...
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		add	esp, 10h
		retn
sub_10016B10	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 414. ldap_entry2html

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	ldap_entry2html(int, char *Dest, int, int, int,	int, int, int, int, int, int, int, int)
		public ldap_entry2html
ldap_entry2html	proc near		; DATA XREF: .rdata:off_10020938o

arg_0		= dword	ptr  4
Dest		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch
arg_1C		= dword	ptr  20h
arg_20		= dword	ptr  24h
arg_24		= dword	ptr  28h
arg_28		= dword	ptr  2Ch
arg_2C		= dword	ptr  30h
arg_30		= dword	ptr  34h

		mov	eax, [esp+arg_30]
		mov	ecx, offset aLdap ; "ldap:///"
		test	eax, eax
		cmovnz	ecx, eax
		push	ecx		; int
		push	[esp+4+arg_28]	; int
		push	[esp+8+arg_24]	; int
		push	[esp+0Ch+arg_20] ; int
		push	[esp+10h+arg_1C] ; int
		push	[esp+14h+arg_18] ; int
		push	[esp+18h+arg_14] ; int
		push	[esp+1Ch+arg_10] ; int
		push	[esp+20h+arg_C]	; int
		push	[esp+24h+arg_8]	; int
		push	[esp+28h+arg_2C] ; int
		push	[esp+2Ch+Dest]	; Dest
		push	[esp+30h+arg_0]	; int
		call	sub_10015D40
		add	esp, 34h
		retn	34h
ldap_entry2html	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 415. ldap_entry2html_search

; =============== S U B	R O U T	I N E =======================================


		public ldap_entry2html_search
ldap_entry2html_search proc near	; DATA XREF: .rdata:off_10020938o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch
arg_1C		= dword	ptr  20h
arg_20		= dword	ptr  24h
arg_24		= dword	ptr  28h
arg_28		= dword	ptr  2Ch
arg_2C		= dword	ptr  30h
arg_30		= dword	ptr  34h

		push	[esp+arg_30]
		push	[esp+4+arg_2C]
		push	[esp+8+arg_28]
		push	[esp+0Ch+arg_24]
		push	[esp+10h+arg_20]
		push	[esp+14h+arg_1C]
		push	[esp+18h+arg_18]
		push	[esp+1Ch+arg_14]
		push	[esp+20h+arg_10]
		push	[esp+24h+arg_C]
		push	[esp+28h+arg_8]
		push	[esp+2Ch+arg_4]
		push	[esp+30h+arg_0]
		call	sub_10016490
		add	esp, 34h
		retn	34h
ldap_entry2html_search endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 412. ldap_entry2text

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	ldap_entry2text(int, char *Dest, int, int, int,	int, int, int, int, int, int)
		public ldap_entry2text
ldap_entry2text	proc near		; DATA XREF: .rdata:off_10020938o

arg_0		= dword	ptr  4
Dest		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch
arg_1C		= dword	ptr  20h
arg_20		= dword	ptr  24h
arg_24		= dword	ptr  28h
arg_28		= dword	ptr  2Ch

		push	0		; int
		push	[esp+4+arg_28]	; int
		push	[esp+8+arg_24]	; int
		push	[esp+0Ch+arg_20] ; int
		push	[esp+10h+arg_1C] ; int
		push	[esp+14h+arg_18] ; int
		push	[esp+18h+arg_14] ; int
		push	[esp+1Ch+arg_10] ; int
		push	[esp+20h+arg_C]	; int
		push	[esp+24h+arg_8]	; int
		push	0		; int
		push	[esp+2Ch+Dest]	; Dest
		push	[esp+30h+arg_0]	; int
		call	sub_10015D40
		add	esp, 34h
		retn	2Ch
ldap_entry2text	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 411. ldap_entry2text_search

; =============== S U B	R O U T	I N E =======================================


		public ldap_entry2text_search
ldap_entry2text_search proc near	; DATA XREF: .rdata:off_10020938o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch
arg_1C		= dword	ptr  20h
arg_20		= dword	ptr  24h
arg_24		= dword	ptr  28h
arg_28		= dword	ptr  2Ch
arg_2C		= dword	ptr  30h

		push	0
		push	[esp+4+arg_2C]
		push	[esp+8+arg_28]
		push	[esp+0Ch+arg_24]
		push	[esp+10h+arg_20]
		push	[esp+14h+arg_1C]
		push	[esp+18h+arg_18]
		push	[esp+1Ch+arg_14]
		push	[esp+20h+arg_10]
		push	[esp+24h+arg_C]
		push	[esp+28h+arg_8]
		push	[esp+2Ch+arg_4]
		push	[esp+30h+arg_0]
		call	sub_10016490
		add	esp, 34h
		retn	30h
ldap_entry2text_search endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 416. ldap_vals2html

; =============== S U B	R O U T	I N E =======================================


		public ldap_vals2html
ldap_vals2html	proc near		; DATA XREF: .rdata:off_10020938o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch
arg_1C		= dword	ptr  20h
arg_20		= dword	ptr  24h
arg_24		= dword	ptr  28h
arg_28		= dword	ptr  2Ch

		mov	eax, [esp+arg_28]
		mov	ecx, offset aLdap ; "ldap:///"
		test	eax, eax
		cmovnz	ecx, eax
		push	ecx
		push	[esp+4+arg_24]
		push	[esp+8+arg_20]
		push	[esp+0Ch+arg_1C]
		push	[esp+10h+arg_18]
		push	[esp+14h+arg_14]
		push	[esp+18h+arg_10]
		push	[esp+1Ch+arg_C]
		push	[esp+20h+arg_8]
		push	[esp+24h+arg_4]
		push	[esp+28h+arg_0]
		call	sub_10016690
		add	esp, 2Ch
		retn	2Ch
ldap_vals2html	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 413. ldap_vals2text

; =============== S U B	R O U T	I N E =======================================


		public ldap_vals2text
ldap_vals2text	proc near		; DATA XREF: .rdata:off_10020938o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch
arg_1C		= dword	ptr  20h
arg_20		= dword	ptr  24h
arg_24		= dword	ptr  28h

		push	0
		push	[esp+4+arg_24]
		push	[esp+8+arg_20]
		push	[esp+0Ch+arg_1C]
		push	[esp+10h+arg_18]
		push	[esp+14h+arg_14]
		push	[esp+18h+arg_10]
		push	[esp+1Ch+arg_C]
		push	[esp+20h+arg_8]
		push	[esp+24h+arg_4]
		push	[esp+28h+arg_0]
		call	sub_10016690
		add	esp, 2Ch
		retn	28h
ldap_vals2text	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10016E60	proc near		; CODE XREF: sub_10015D40+392p

arg_0		= dword	ptr  4

		push	ebp
		mov	ebp, [esp+4+arg_0]
		push	esi
		push	edi
		push	ebp
		xor	esi, esi
		call	ldap_first_tmplrow
		mov	edi, eax
		test	edi, edi
		jz	short loc_10016EBA
		push	ebx

loc_10016E76:				; CODE XREF: sub_10016E60+57j
		push	edi
		push	ebp
		call	ldap_first_tmplcol
		mov	edx, eax
		test	edx, edx
		jz	short loc_10016EAC

loc_10016E83:				; CODE XREF: sub_10016E60+4Aj
		mov	eax, [edx+0Ch]
		lea	ebx, [eax+1]
		lea	esp, [esp+0]

loc_10016E90:				; CODE XREF: sub_10016E60+35j
		mov	cl, [eax]
		inc	eax
		test	cl, cl
		jnz	short loc_10016E90
		sub	eax, ebx
		push	edx
		cmp	eax, esi
		push	edi
		push	ebp
		cmovg	esi, eax
		call	ldap_next_tmplcol
		mov	edx, eax
		test	edx, edx
		jnz	short loc_10016E83

loc_10016EAC:				; CODE XREF: sub_10016E60+21j
		push	edi
		push	ebp
		call	ldap_next_tmplrow
		mov	edi, eax
		test	edi, edi
		jnz	short loc_10016E76
		pop	ebx

loc_10016EBA:				; CODE XREF: sub_10016E60+13j
		pop	edi
		mov	eax, esi
		pop	esi
		pop	ebp
		retn
sub_10016E60	endp


; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10016EC0(char	*Dest, void *Src, int, int, int, int, int, int)
sub_10016EC0	proc near		; CODE XREF: sub_10015D40+121p
					; sub_10015D40+17Cp ...

var_4		= dword	ptr -4
Dest		= dword	ptr  4
Src		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch
arg_1C		= dword	ptr  20h

		push	ecx
		push	esi
		mov	esi, [esp+8+Src]
		push	edi
		push	1		; int
		push	esi		; Src
		call	ldap_explode_dn
		mov	edi, eax
		mov	[esp+0Ch+var_4], edi
		test	edi, edi
		jnz	short loc_10016EE0
		pop	edi
		or	eax, 0FFFFFFFFh
		pop	esi
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_10016EE0:				; CODE XREF: sub_10016EC0+17j
		mov	eax, [esp+0Ch+arg_1C]
		push	ebp
		mov	ebp, [esp+10h+Dest]
		test	eax, eax
		jz	short loc_10016F24
		push	eax
		push	offset aDdAHrefS ; "<DD><A HREF=\"%s"
		push	ebp		; Dest
		call	ds:sprintf
		push	esi
		push	ebp
		call	sub_10017450
		add	esp, 14h
		lea	ecx, [ebp-1]

loc_10016F07:				; CODE XREF: sub_10016EC0+4Fj
		mov	al, [ecx+1]
		lea	ecx, [ecx+1]
		test	al, al
		jnz	short loc_10016F07
		mov	ax, ds:word_100203B8
		mov	[ecx], ax
		mov	al, ds:byte_100203BA
		mov	[ecx+2], al
		jmp	short loc_10016F47
; ---------------------------------------------------------------------------

loc_10016F24:				; CODE XREF: sub_10016EC0+2Bj
		mov	eax, [esp+10h+arg_8]
		test	eax, eax
		jle	short loc_10016F43
		push	offset asc_1001FAB0 ; "	"
		push	eax
		push	offset aS_2	; "%-*s"
		push	ebp		; Dest
		call	ds:sprintf
		add	esp, 10h
		jmp	short loc_10016F47
; ---------------------------------------------------------------------------

loc_10016F43:				; CODE XREF: sub_10016EC0+6Aj
		mov	byte ptr [ebp+0], 0

loc_10016F47:				; CODE XREF: sub_10016EC0+62j
					; sub_10016EC0+81j
		push	ebx
		xor	ebx, ebx
		cmp	[edi], ebx
		jz	short loc_10016FB5
		mov	eax, [esp+14h+arg_C]

loc_10016F52:				; CODE XREF: sub_10016EC0+F3j
		test	eax, eax
		jz	short loc_10016F5A
		cmp	ebx, eax
		jge	short loc_10016FB5

loc_10016F5A:				; CODE XREF: sub_10016EC0+94j
		test	ebx, ebx
		jle	short loc_10016F7E
		lea	eax, [ebp-1]

loc_10016F61:				; CODE XREF: sub_10016EC0+A9j
		mov	cl, [eax+1]
		lea	eax, [eax+1]
		test	cl, cl
		jnz	short loc_10016F61
		mov	cx, word ptr ds:asc_100201F8 ; ", "
		mov	[eax], cx
		mov	cl, byte ptr ds:asc_100201F8+2 ; ""
		mov	[eax+2], cl

loc_10016F7E:				; CODE XREF: sub_10016EC0+9Cj
		mov	edx, [edi+ebx*4]
		mov	esi, edx

loc_10016F83:				; CODE XREF: sub_10016EC0+C8j
		mov	al, [edx]
		inc	edx
		test	al, al
		jnz	short loc_10016F83
		sub	edx, esi
		lea	edi, [ebp-1]
		nop

loc_10016F90:				; CODE XREF: sub_10016EC0+D6j
		mov	al, [edi+1]
		inc	edi
		test	al, al
		jnz	short loc_10016F90
		mov	ecx, edx
		mov	eax, [esp+14h+arg_C]
		shr	ecx, 2
		inc	ebx
		rep movsd
		mov	ecx, edx
		and	ecx, 3
		rep movsb
		mov	edi, [esp+14h+var_4]
		cmp	dword ptr [edi+ebx*4], 0
		jnz	short loc_10016F52

loc_10016FB5:				; CODE XREF: sub_10016EC0+8Cj
					; sub_10016EC0+98j
		cmp	[esp+14h+arg_1C], 0
		pop	ebx
		jz	short loc_10016FE1
		lea	ecx, [ebp-1]

loc_10016FC0:				; CODE XREF: sub_10016EC0+108j
		mov	al, [ecx+1]
		lea	ecx, [ecx+1]
		test	al, al
		jnz	short loc_10016FC0
		mov	eax, ds:dword_100203C4
		mov	[ecx], eax
		mov	eax, ds:dword_100203C8
		mov	[ecx+4], eax
		mov	al, ds:byte_100203CC
		mov	[ecx+8], al

loc_10016FE1:				; CODE XREF: sub_10016EC0+FBj
		push	edi
		call	ldap_value_free
		mov	edx, [esp+10h+arg_18]
		mov	esi, edx
		lea	ecx, [ecx+0]

loc_10016FF0:				; CODE XREF: sub_10016EC0+135j
		mov	al, [edx]
		inc	edx
		test	al, al
		jnz	short loc_10016FF0
		sub	edx, esi
		lea	edi, [ebp-1]
		lea	esp, [esp+0]

loc_10017000:				; CODE XREF: sub_10016EC0+146j
		mov	al, [edi+1]
		inc	edi
		test	al, al
		jnz	short loc_10017000
		mov	ecx, edx
		shr	ecx, 2
		rep movsd
		mov	ecx, edx
		and	ecx, 3
		rep movsb
		mov	ecx, ebp
		lea	edx, [ecx+1]
		jmp	short loc_10017020
; ---------------------------------------------------------------------------
		align 10h

loc_10017020:				; CODE XREF: sub_10016EC0+15Bj
					; sub_10016EC0+165j
		mov	al, [ecx]
		inc	ecx
		test	al, al
		jnz	short loc_10017020
		sub	ecx, edx
		push	ecx
		push	ebp
		push	[esp+18h+arg_14]
		call	[esp+1Ch+arg_10]
		add	esp, 0Ch
		pop	ebp
		pop	edi
		pop	esi
		pop	ecx
		retn
sub_10016EC0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10017040(char	*Dest, int, int, int, int, int,	int)
sub_10017040	proc near		; CODE XREF: sub_10016690+BAp
					; sub_10016690+17Dp

Dest		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch

		cmp	[esp+arg_18], 0
		push	ebx
		push	[esp+4+arg_4]
		mov	ebx, [esp+8+Dest]
		jz	short loc_10017061
		push	offset aDtBSB	; "<DT><B>%s</B>"
		push	ebx		; Dest
		call	ds:sprintf
		add	esp, 0Ch
		jmp	short loc_100170DB
; ---------------------------------------------------------------------------

loc_10017061:				; CODE XREF: sub_10017040+Ej
		push	offset aS_3	; " %s:"
		push	ebx		; Dest
		call	ds:sprintf
		mov	ecx, ebx
		add	esp, 0Ch
		lea	edx, [ecx+1]

loc_10017075:				; CODE XREF: sub_10017040+3Aj
		mov	al, [ecx]
		inc	ecx
		test	al, al
		jnz	short loc_10017075
		push	ebp
		push	esi
		sub	ecx, edx
		push	edi
		push	ebx
		lea	esi, [ecx+ebx]
		call	ldap_utf8characters
		mov	ebp, [esp+10h+arg_8]
		cmp	eax, ebp
		jnb	short loc_100170AD
		sub	ebp, eax
		mov	edi, esi
		mov	ecx, ebp
		mov	eax, 20202020h
		mov	edx, ecx
		shr	ecx, 2
		rep stosd
		mov	ecx, edx
		and	ecx, 3
		add	esi, ebp
		rep stosb

loc_100170AD:				; CODE XREF: sub_10017040+50j
		mov	edx, [esp+10h+arg_14]
		mov	byte ptr [esi],	0
		mov	esi, edx

loc_100170B6:				; CODE XREF: sub_10017040+7Bj
		mov	al, [edx]
		inc	edx
		test	al, al
		jnz	short loc_100170B6
		sub	edx, esi
		lea	edi, [ebx-1]

loc_100170C2:				; CODE XREF: sub_10017040+88j
		mov	al, [edi+1]
		inc	edi
		test	al, al
		jnz	short loc_100170C2
		mov	ecx, edx
		shr	ecx, 2
		rep movsd
		mov	ecx, edx
		and	ecx, 3
		rep movsb
		pop	edi
		pop	esi
		pop	ebp

loc_100170DB:				; CODE XREF: sub_10017040+1Fj
		mov	ecx, ebx
		lea	edx, [ecx+1]

loc_100170E0:				; CODE XREF: sub_10017040+A5j
		mov	al, [ecx]
		inc	ecx
		test	al, al
		jnz	short loc_100170E0
		sub	ecx, edx
		push	ecx
		push	ebx
		push	[esp+0Ch+arg_10]
		call	[esp+10h+arg_C]
		add	esp, 0Ch
		pop	ebx
		retn
sub_10017040	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_10017100(int,	char *Dest, int, int, int, int,	int, int, int, int, int, int)
sub_10017100	proc near		; CODE XREF: sub_10015D40+6B2p

var_148		= dword	ptr -148h
var_144		= dword	ptr -144h
var_140		= dword	ptr -140h
var_13C		= dword	ptr -13Ch
var_138		= dword	ptr -138h
var_134		= dword	ptr -134h
var_130		= dword	ptr -130h
var_12C		= dword	ptr -12Ch
var_128		= dword	ptr -128h
var_124		= dword	ptr -124h
var_120		= dword	ptr -120h
var_11C		= dword	ptr -11Ch
var_118		= dword	ptr -118h
var_114		= dword	ptr -114h
var_110		= dword	ptr -110h
var_10C		= dword	ptr -10Ch
var_108		= dword	ptr -108h
var_104		= byte ptr -104h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
Dest		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_1C		= dword	ptr  20h
arg_20		= dword	ptr  24h
arg_24		= dword	ptr  28h
arg_28		= dword	ptr  2Ch
arg_2C		= dword	ptr  30h

		sub	esp, 148h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+148h+var_4], eax
		mov	eax, [esp+148h+arg_8]
		mov	ecx, [esp+148h+arg_2C]
		mov	edx, [esp+148h+arg_14]
		mov	[esp+148h+var_148], eax
		mov	eax, [esp+148h+arg_C]
		mov	[esp+148h+var_118], eax
		mov	eax, [esp+148h+arg_10]
		mov	[esp+148h+var_124], eax
		mov	eax, [esp+148h+arg_20]
		mov	[esp+148h+var_138], eax
		mov	eax, [esp+148h+arg_24]
		push	ebx
		mov	ebx, [esp+14Ch+Dest]
		mov	[esp+14Ch+var_13C], eax
		mov	eax, [esp+14Ch+arg_28]
		push	ebp
		mov	ebp, [esp+150h+arg_0]
		mov	[esp+150h+var_134], eax
		xor	eax, eax
		push	esi
		xor	esi, esi
		mov	[esp+154h+var_140], edx
		mov	edx, [edx+10h]
		test	ecx, ecx
		mov	[esp+154h+var_12C], ecx
		setnz	al
		mov	[esp+154h+var_130], ebx
		xor	ecx, ecx
		mov	[esp+154h+var_120], eax
		test	edx, edx
		jz	loc_1001742B
		mov	eax, edx
		lea	esp, [esp+0]

loc_100171A0:				; CODE XREF: sub_10017100+A8j
		cmp	[eax], esi
		jz	short loc_100171AA
		inc	ecx
		add	eax, 4
		jmp	short loc_100171A0
; ---------------------------------------------------------------------------

loc_100171AA:				; CODE XREF: sub_10017100+A2j
		cmp	ecx, 3
		jl	loc_1001742B
		mov	eax, [edx+4]
		push	edi
		mov	edi, [edx]
		mov	[esp+158h+var_11C], eax
		mov	eax, [edx+8]
		mov	[esp+158h+var_10C], eax
		mov	[esp+158h+var_108], esi
		mov	[esp+158h+var_128], esi
		test	edi, edi
		jz	short loc_1001723B
		push	offset aDnb	; "-dnb"
		push	edi		; Str1
		call	ds:_stricmp
		add	esp, 8
		test	eax, eax
		jnz	short loc_10017201
		mov	eax, 59h

loc_100171E8:				; CODE XREF: sub_10017100+214j
					; sub_10017100+326j
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		mov	ecx, [esp+148h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 148h
		retn
; ---------------------------------------------------------------------------

loc_10017201:				; CODE XREF: sub_10017100+E1j
		push	offset aDnt	; "-dnt"
		push	edi		; Str1
		call	ds:_stricmp
		add	esp, 8
		test	eax, eax
		jnz	short loc_1001721A
		mov	eax, [esp+158h+var_124]
		jmp	short loc_1001723D
; ---------------------------------------------------------------------------

loc_1001721A:				; CODE XREF: sub_10017100+112j
		push	edi		; Str1
		push	[esp+15Ch+var_118] ; int
		push	ebp		; int
		call	ldap_get_values
		mov	ebx, eax
		mov	[esp+158h+var_128], ebx
		test	ebx, ebx
		jz	short loc_10017237
		mov	eax, [ebx]
		mov	ebx, [esp+158h+var_130]
		jmp	short loc_1001723D
; ---------------------------------------------------------------------------

loc_10017237:				; CODE XREF: sub_10017100+12Dj
		mov	ebx, [esp+158h+var_130]

loc_1001723B:				; CODE XREF: sub_10017100+CEj
		xor	eax, eax

loc_1001723D:				; CODE XREF: sub_10017100+118j
					; sub_10017100+135j
		push	0
		push	eax
		push	0
		push	0
		push	0
		push	[esp+16Ch+var_11C]
		lea	eax, [esp+170h+var_104]
		push	100h
		push	eax
		call	ldap_build_filter
		cmp	[esp+158h+var_120], esi
		jz	loc_10017319
		push	[esp+158h+var_12C]
		mov	esi, ds:sprintf
		push	offset aDtAHrefS ; "<DT><A HREF=\"%s"
		push	ebx		; Dest
		call	esi ; sprintf
		mov	eax, [esp+164h+var_148]
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_1001728A
		push	eax
		push	ebx
		call	sub_10017450
		add	esp, 8

loc_1001728A:				; CODE XREF: sub_10017100+17Ej
		lea	ecx, [ebx-1]
		lea	ecx, [ecx+0]

loc_10017290:				; CODE XREF: sub_10017100+198j
		mov	al, [ecx+1]
		lea	ecx, [ecx+1]
		test	al, al
		jnz	short loc_10017290
		mov	eax, ds:dword_1002041C
		mov	[ecx], eax
		mov	ax, ds:word_10020420
		mov	[ecx+4], ax
		mov	al, ds:byte_10020422
		mov	[ecx+6], al
		lea	eax, [esp+158h+var_104]
		push	eax
		push	ebx
		call	sub_10017450
		mov	ecx, ebx
		add	esp, 8
		lea	edx, [ecx+1]

loc_100172C6:				; CODE XREF: sub_10017100+1CBj
		mov	al, [ecx]
		inc	ecx
		test	al, al
		jnz	short loc_100172C6
		mov	eax, [esp+158h+var_140]
		sub	ecx, edx
		push	[esp+158h+var_134]
		push	dword ptr [eax+0Ch]
		lea	eax, [ecx+ebx]
		push	offset aBSBADdBrS ; "\"><B>%s</B></A><DD><BR>%s"
		push	eax		; Dest
		call	esi ; sprintf
		mov	ecx, ebx
		add	esp, 10h
		lea	edx, [ecx+1]
		lea	ecx, [ecx+0]

loc_100172F0:				; CODE XREF: sub_10017100+1F5j
		mov	al, [ecx]
		inc	ecx
		test	al, al
		jnz	short loc_100172F0
		sub	ecx, edx
		push	ecx
		push	ebx
		push	[esp+160h+var_13C]
		call	[esp+164h+var_138]
		xor	ecx, ecx
		add	esp, 0Ch
		test	eax, eax
		mov	edx, 52h
		cmovs	ecx, edx
		mov	eax, ecx
		jmp	loc_100171E8
; ---------------------------------------------------------------------------

loc_10017319:				; CODE XREF: sub_10017100+15Dj
		lea	eax, [esp+158h+var_144]
		mov	[esp+158h+var_114], 78h
		push	eax
		lea	eax, [esp+15Ch+var_114]
		mov	[esp+15Ch+var_110], esi
		push	eax
		push	0
		lea	eax, [esp+164h+var_10C]
		push	eax
		lea	eax, [esp+168h+var_104]
		push	eax
		push	2
		push	[esp+170h+var_148]
		push	ebp
		call	ldap_search_st
		mov	ebx, eax
		mov	[esp+158h+var_148], ebx
		test	ebx, ebx
		jz	short loc_1001735F
		cmp	ebx, 3
		jz	short loc_1001735F
		cmp	ebx, 4
		jnz	loc_10017411

loc_1001735F:				; CODE XREF: sub_10017100+24Fj
					; sub_10017100+254j
		push	[esp+158h+var_144]
		push	ebp
		call	ldap_count_entries
		test	eax, eax
		jle	loc_10017408
		lea	eax, ds:4[eax*4]
		push	eax
		call	ldap_x_malloc
		mov	ebx, eax
		add	esp, 4
		test	ebx, ebx
		jnz	short loc_1001738C
		lea	esi, [eax+5Ah]
		jmp	short loc_10017404
; ---------------------------------------------------------------------------

loc_1001738C:				; CODE XREF: sub_10017100+285j
		push	[esp+158h+var_144]
		xor	edi, edi
		push	ebp
		call	ldap_first_entry
		mov	esi, eax
		test	esi, esi
		jz	short loc_100173B8
		mov	edi, edi

loc_100173A0:				; CODE XREF: sub_10017100+2B6j
		push	esi
		push	ebp
		call	ldap_get_dn
		push	esi
		push	ebp
		mov	[ebx+edi*4], eax
		call	ldap_next_entry
		mov	esi, eax
		inc	edi
		test	esi, esi
		jnz	short loc_100173A0

loc_100173B8:				; CODE XREF: sub_10017100+29Cj
		push	offset ldap_sort_strcasecmp ; PtFuncCompare
		push	ebx		; Base
		push	ebp		; int
		mov	dword ptr [ebx+edi*4], 0
		call	ldap_sort_values
		push	[esp+158h+var_12C]
		mov	eax, [esp+15Ch+var_140]
		push	[esp+15Ch+arg_1C]
		push	[esp+160h+var_134]
		push	[esp+164h+var_13C]
		push	[esp+168h+var_138]
		push	1000003h
		push	0
		push	dword ptr [eax+0Ch]
		push	ebx
		push	0
		push	ebp
		call	sub_10016690
		add	esp, 2Ch
		mov	esi, eax
		push	ebx
		call	ldap_value_free

loc_10017404:				; CODE XREF: sub_10017100+28Aj
		mov	ebx, [esp+158h+var_148]

loc_10017408:				; CODE XREF: sub_10017100+26Bj
		push	[esp+158h+var_144]
		call	ldap_msgfree

loc_10017411:				; CODE XREF: sub_10017100+259j
		mov	eax, [esp+158h+var_128]
		test	eax, eax
		jz	short loc_1001741F
		push	eax
		call	ldap_value_free

loc_1001741F:				; CODE XREF: sub_10017100+317j
		test	esi, esi
		cmovz	esi, ebx
		mov	eax, esi
		jmp	loc_100171E8
; ---------------------------------------------------------------------------

loc_1001742B:				; CODE XREF: sub_10017100+94j
					; sub_10017100+ADj
		mov	ecx, [esp+154h+var_4]
		mov	eax, 59h
		pop	esi
		pop	ebp
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 148h
		retn
sub_10017100	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10017450	proc near		; CODE XREF: sub_10015D40+20Bp
					; sub_10015D40+216p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	edx, [esp+arg_0]
		mov	ecx, edx
		push	esi
		lea	esi, [ecx+1]
		lea	ebx, [ebx+0]

loc_10017460:				; CODE XREF: sub_10017450+15j
		mov	al, [ecx]
		inc	ecx
		test	al, al
		jnz	short loc_10017460
		sub	ecx, esi
		pop	esi
		lea	eax, [ecx+edx]
		mov	edx, [esp+arg_4]
		cmp	byte ptr [edx],	0
		jz	short loc_100174CC

loc_10017476:				; CODE XREF: sub_10017450+7Aj
		mov	cl, [edx]
		cmp	cl, 2Dh
		jl	short loc_10017482
		cmp	cl, 39h
		jle	short loc_100174C3

loc_10017482:				; CODE XREF: sub_10017450+2Bj
		cmp	cl, 40h
		jl	short loc_1001748C
		cmp	cl, 5Ah
		jle	short loc_100174C3

loc_1001748C:				; CODE XREF: sub_10017450+35j
		cmp	cl, 5Fh
		jz	short loc_100174C3
		cmp	cl, 61h
		jl	short loc_1001749B
		cmp	cl, 7Ah
		jle	short loc_100174C3

loc_1001749B:				; CODE XREF: sub_10017450+44j
		mov	byte ptr [eax],	25h
		movzx	ecx, byte ptr [edx]
		shr	ecx, 4
		movzx	ecx, ds:byte_100203D0[ecx]
		mov	[eax+1], cl
		movsx	ecx, byte ptr [edx]
		and	ecx, 0Fh
		movzx	ecx, ds:byte_100203D0[ecx]
		mov	[eax+2], cl
		add	eax, 3
		jmp	short loc_100174C6
; ---------------------------------------------------------------------------

loc_100174C3:				; CODE XREF: sub_10017450+30j
					; sub_10017450+3Aj ...
		mov	[eax], cl
		inc	eax

loc_100174C6:				; CODE XREF: sub_10017450+71j
		inc	edx
		cmp	byte ptr [edx],	0
		jnz	short loc_10017476

loc_100174CC:				; CODE XREF: sub_10017450+24j
		mov	byte ptr [eax],	0
		retn
sub_10017450	endp


; =============== S U B	R O U T	I N E =======================================


sub_100174D0	proc near		; CODE XREF: sub_10016690+228p

Time		= qword	ptr -2Ch
var_24		= xmmword ptr -24h
var_14		= xmmword ptr -14h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 2Ch
		push	ebx
		mov	ebx, [esp+30h+arg_0]
		xorps	xmm0, xmm0
		push	esi
		mov	esi, ebx
		mov	[esp+34h+var_4], 0
		movdqu	[esp+34h+var_24], xmm0
		movdqu	[esp+34h+var_14], xmm0
		lea	ecx, [esi+1]

loc_100174F5:				; CODE XREF: sub_100174D0+2Aj
		mov	al, [esi]
		inc	esi
		test	al, al
		jnz	short loc_100174F5
		sub	esi, ecx
		cmp	esi, 0Dh
		jge	short loc_1001750E
		pop	esi
		mov	eax, offset aBadlyFormatted ; "badly formatted time"
		pop	ebx
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------

loc_1001750E:				; CODE XREF: sub_100174D0+31j
		push	ebp
		push	edi
		mov	edi, ebx
		cmp	esi, 0Fh
		jle	short loc_1001751E
		mov	esi, 0Fh
		jmp	short loc_1001752E
; ---------------------------------------------------------------------------

loc_1001751E:				; CODE XREF: sub_100174D0+45j
		cmp	esi, 0Eh
		mov	eax, 0Dh
		cmovz	esi, eax
		cmp	esi, 1
		jle	short loc_1001754E

loc_1001752E:				; CODE XREF: sub_100174D0+4Cj
		mov	ebp, 1
		sub	ebp, ebx

loc_10017535:				; CODE XREF: sub_100174D0+7Cj
		movsx	eax, byte ptr [edi]
		push	eax		; C
		call	ds:isdigit
		add	esp, 4
		test	eax, eax
		jz	short loc_10017589
		inc	edi
		lea	eax, [edi+ebp]
		cmp	eax, esi
		jl	short loc_10017535

loc_1001754E:				; CODE XREF: sub_100174D0+5Cj
		movsx	eax, byte ptr [ebx]
		lea	ecx, [eax+eax*4]
		movsx	eax, byte ptr [ebx+1]
		add	ebx, 2
		lea	eax, [eax+ecx*2]
		add	eax, 0FFFFFDF0h
		mov	dword ptr [esp+3Ch+var_14+4], eax
		cmp	esi, 0Fh
		jnz	short loc_10017596
		lea	ecx, [eax+eax*4]
		movsx	eax, byte ptr [ebx]
		lea	eax, [eax+ecx*2]
		lea	ecx, [eax+eax*4]
		movsx	eax, byte ptr [ebx+1]
		lea	eax, [eax+ecx*2]
		add	eax, 0FFFFF684h
		add	ebx, 2
		jmp	short loc_1001759E
; ---------------------------------------------------------------------------

loc_10017589:				; CODE XREF: sub_100174D0+74j
		pop	edi
		pop	ebp
		pop	esi
		mov	eax, offset aBadlyFormatted ; "badly formatted time"
		pop	ebx
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------

loc_10017596:				; CODE XREF: sub_100174D0+9Aj
		cmp	eax, 46h
		jge	short loc_100175A2
		add	eax, 64h

loc_1001759E:				; CODE XREF: sub_100174D0+B7j
		mov	dword ptr [esp+3Ch+var_14+4], eax

loc_100175A2:				; CODE XREF: sub_100174D0+C9j
		movsx	eax, byte ptr [ebx]
		lea	ecx, [eax+eax*4]
		movsx	eax, byte ptr [ebx+1]
		lea	eax, [eax+ecx*2]
		add	eax, 0FFFFFDEFh
		mov	dword ptr [esp+3Ch+var_14], eax
		movsx	eax, byte ptr [ebx+2]
		lea	ecx, [eax+eax*4]
		movsx	eax, byte ptr [ebx+3]
		lea	eax, [eax+ecx*2]
		add	eax, 0FFFFFDF0h
		mov	dword ptr [esp+3Ch+var_24+0Ch],	eax
		movsx	eax, byte ptr [ebx+4]
		lea	ecx, [eax+eax*4]
		movsx	eax, byte ptr [ebx+5]
		lea	eax, [eax+ecx*2]
		add	eax, 0FFFFFDF0h
		mov	dword ptr [esp+3Ch+var_24+8], eax
		movsx	eax, byte ptr [ebx+6]
		lea	ecx, [eax+eax*4]
		movsx	eax, byte ptr [ebx+7]
		lea	eax, [eax+ecx*2]
		add	eax, 0FFFFFDF0h
		mov	dword ptr [esp+3Ch+var_24+4], eax
		movsx	eax, byte ptr [ebx+8]
		lea	ecx, [eax+eax*4]
		movsx	eax, byte ptr [ebx+9]
		lea	eax, [eax+ecx*2]
		xor	ecx, ecx
		add	eax, 0FFFFFDF0h
		mov	dword ptr [esp+3Ch+var_24], eax
		mov	al, [ebx+0Ah]
		movzx	ebx, al
		cmp	al, 5Ah
		lea	eax, [esp+3Ch+var_24]
		push	eax
		cmovz	ebx, ecx
		call	sub_10016B10
		cdq
		mov	dword ptr [esp+40h+Time], eax
		lea	eax, [esp+40h+Time]
		push	eax		; Time
		mov	dword ptr [esp+44h+Time+4], edx
		call	ds:_ctime64
		mov	esi, eax
		add	esp, 8
		mov	edx, esi
		lea	eax, [edx+1]
		lea	esp, [esp+0]

loc_10017650:				; CODE XREF: sub_100174D0+185j
		mov	cl, [edx]
		inc	edx
		test	cl, cl
		jnz	short loc_10017650
		sub	edx, eax
		cmp	[esp+3Ch+arg_4], 0
		mov	[edx+esi-1], bl
		jz	short loc_1001767D
		lea	ecx, [esi+14h]
		mov	edx, esi
		sub	edx, ecx
		jmp	short loc_10017670
; ---------------------------------------------------------------------------
		align 10h

loc_10017670:				; CODE XREF: sub_100174D0+19Bj
					; sub_100174D0+1ABj
		mov	al, [ecx]
		lea	ecx, [ecx+1]
		mov	[edx+ecx+0Ah], al
		test	al, al
		jnz	short loc_10017670

loc_1001767D:				; CODE XREF: sub_100174D0+192j
		pop	edi
		pop	ebp
		mov	eax, esi
		pop	esi
		pop	ebx
		add	esp, 2Ch
		retn
sub_100174D0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10017690	proc near		; CODE XREF: sub_100177B0+D3p

var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ecx
		push	edi
		mov	edi, [esp+8+arg_4]
		test	edi, edi
		jnz	short loc_100176A1
		mov	eax, [esp+8+arg_8]
		pop	edi
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_100176A1:				; CODE XREF: sub_10017690+8j
		push	ebp
		mov	ebp, [esp+0Ch+arg_8]
		test	ebp, ebp
		jnz	short loc_100176B0
		pop	ebp
		mov	eax, edi
		pop	edi
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_100176B0:				; CODE XREF: sub_10017690+18j
		mov	eax, [edi+0Ch]
		push	ebx
		xor	ebx, ebx
		push	esi
		mov	esi, edi
		test	eax, eax
		jz	short loc_100176CB
		lea	ecx, [ecx+0]

loc_100176C0:				; CODE XREF: sub_10017690+39j
		mov	ebx, esi
		mov	esi, eax
		mov	eax, [esi+0Ch]
		test	eax, eax
		jnz	short loc_100176C0

loc_100176CB:				; CODE XREF: sub_10017690+2Bj
		mov	ecx, [ebp+0Ch]
		xor	eax, eax
		mov	[esp+14h+var_4], eax
		mov	eax, ebp
		mov	[esp+14h+arg_4], ebp
		test	ecx, ecx
		jz	short loc_100176F1
		mov	edi, edi

loc_100176E0:				; CODE XREF: sub_10017690+5Bj
		mov	[esp+14h+var_4], eax
		mov	eax, ecx
		mov	ecx, [eax+0Ch]
		test	ecx, ecx
		jnz	short loc_100176E0
		mov	[esp+14h+arg_4], eax

loc_100176F1:				; CODE XREF: sub_10017690+4Cj
		push	0
		push	esi
		push	[esp+1Ch+arg_0]
		call	ldap_result2error
		test	eax, eax
		jz	short loc_1001772E
		push	[esp+14h+arg_4]
		call	ldap_msgfree
		mov	eax, [esp+14h+var_4]
		test	eax, eax
		jz	short loc_1001771B
		mov	dword ptr [eax+0Ch], 0
		jmp	short loc_1001771D
; ---------------------------------------------------------------------------

loc_1001771B:				; CODE XREF: sub_10017690+80j
		xor	ebp, ebp

loc_1001771D:				; CODE XREF: sub_10017690+89j
		test	ebx, ebx
		jz	short loc_1001772A
		mov	dword ptr [ebx+0Ch], 0
		jmp	short loc_1001775A
; ---------------------------------------------------------------------------

loc_1001772A:				; CODE XREF: sub_10017690+8Fj
		xor	edi, edi
		jmp	short loc_1001775E
; ---------------------------------------------------------------------------

loc_1001772E:				; CODE XREF: sub_10017690+6Fj
		push	esi
		call	ldap_msgfree
		test	ebx, ebx
		jz	short loc_10017741
		mov	dword ptr [ebx+0Ch], 0
		jmp	short loc_10017743
; ---------------------------------------------------------------------------

loc_10017741:				; CODE XREF: sub_10017690+A6j
		xor	edi, edi

loc_10017743:				; CODE XREF: sub_10017690+AFj
		mov	eax, [esp+14h+var_4]
		mov	esi, [esp+14h+arg_4]
		test	eax, eax
		jz	short loc_10017758
		mov	dword ptr [eax+0Ch], 0
		jmp	short loc_1001775A
; ---------------------------------------------------------------------------

loc_10017758:				; CODE XREF: sub_10017690+BDj
		xor	ebp, ebp

loc_1001775A:				; CODE XREF: sub_10017690+98j
					; sub_10017690+C6j
		test	edi, edi
		jnz	short loc_10017766

loc_1001775E:				; CODE XREF: sub_10017690+9Cj
		test	ebp, ebp
		jz	short loc_1001776E
		test	eax, eax
		jz	short loc_1001776E

loc_10017766:				; CODE XREF: sub_10017690+CCj
		test	ebp, ebp
		jnz	short loc_10017776
		test	ebx, ebx
		jnz	short loc_10017776

loc_1001776E:				; CODE XREF: sub_10017690+D0j
					; sub_10017690+D4j
		mov	eax, esi
		pop	esi
		pop	ebx
		pop	ebp
		pop	edi
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_10017776:				; CODE XREF: sub_10017690+D8j
					; sub_10017690+DCj
		test	edi, edi
		jnz	short loc_10017785
		mov	[eax+0Ch], esi
		mov	eax, ebp
		pop	esi
		pop	ebx
		pop	ebp
		pop	edi
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_10017785:				; CODE XREF: sub_10017690+E8j
		test	ebp, ebp
		jnz	short loc_10017794
		mov	[ebx+0Ch], esi
		mov	eax, edi
		pop	esi
		pop	ebx
		pop	ebp
		pop	edi
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_10017794:				; CODE XREF: sub_10017690+F7j
		mov	[eax+0Ch], esi
		mov	eax, edi
		pop	esi
		mov	[ebx+0Ch], ebp
		pop	ebx
		pop	ebp
		pop	edi
		pop	ecx
		retn
sub_10017690	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100177B0	proc near		; CODE XREF: sub_10017BC0+1F2p

var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch
arg_1C		= dword	ptr  20h
arg_20		= dword	ptr  24h

		sub	esp, 14h
		mov	edx, [esp+14h+arg_C]
		mov	ecx, edx
		push	ebx
		push	ebp
		mov	ebp, [esp+1Ch+arg_4]
		push	esi
		mov	esi, [esp+20h+arg_0]
		push	edi
		mov	edi, [esp+24h+arg_20]
		mov	[esp+24h+var_14], 0
		mov	[esp+24h+var_C], edx

loc_100177D5:				; CODE XREF: sub_100177B0+F7j
		test	edx, edx
		jz	short loc_100177DD
		mov	eax, [ecx]
		jmp	short loc_100177E2
; ---------------------------------------------------------------------------

loc_100177DD:				; CODE XREF: sub_100177B0+27j
		mov	eax, offset Src

loc_100177E2:				; CODE XREF: sub_100177B0+2Bj
		push	[esp+24h+arg_1C]
		push	[esp+28h+arg_18]
		push	[esp+2Ch+arg_10]
		push	[esp+30h+arg_14]
		push	eax
		push	esi
		call	ldap_search
		mov	ebx, eax
		cmp	ebx, 0FFFFFFFFh
		jz	loc_100178E9
		mov	[esp+24h+var_8], 0
		mov	[esp+24h+var_4], 186A0h

loc_10017814:				; CODE XREF: sub_100177B0+AAj
		lea	eax, [esp+24h+var_10]
		push	eax
		lea	eax, [esp+28h+var_8]
		push	eax
		push	1
		push	ebx
		push	esi
		call	ldap_result
		mov	[edi], eax
		test	eax, eax
		jnz	short loc_10017857
		test	ebp, ebp
		jz	short loc_10017857
		push	[esp+24h+arg_8]
		call	ebp
		add	esp, 4
		test	eax, eax
		jz	short loc_10017857
		push	ebx
		push	esi
		call	ldap_abandon
		push	0
		push	0
		push	58h
		push	esi
		mov	dword ptr [edi], 58h
		call	ldap_set_lderrno

loc_10017857:				; CODE XREF: sub_100177B0+7Bj
					; sub_100177B0+7Fj ...
		cmp	dword ptr [edi], 0
		jz	short loc_10017814
		mov	eax, [edi]
		cmp	eax, 58h
		jz	short loc_100178D6
		test	eax, eax
		js	short loc_100178D6
		push	0
		push	[esp+28h+var_10]
		push	esi
		call	ldap_result2error
		mov	[edi], eax
		cmp	eax, 0FFFFFFFFh
		jz	short loc_100178D6
		push	[esp+24h+var_10]
		push	[esp+28h+var_14]
		push	esi
		call	sub_10017690
		mov	ecx, [esp+30h+var_C]
		add	esp, 0Ch
		mov	edx, [esp+24h+arg_C]
		add	ecx, 4
		mov	[esp+24h+var_C], ecx
		mov	ebx, eax
		mov	[esp+24h+var_14], ebx
		test	edx, edx
		jz	short loc_100178AD
		cmp	dword ptr [ecx], 0
		jnz	loc_100177D5

loc_100178AD:				; CODE XREF: sub_100177B0+F2j
		test	ebx, ebx
		jz	short loc_100178FE
		push	ebx
		push	esi
		call	ldap_count_entries
		test	eax, eax
		jle	short loc_100178C6
		pop	edi
		pop	esi
		pop	ebp
		mov	eax, ebx
		pop	ebx
		add	esp, 14h
		retn
; ---------------------------------------------------------------------------

loc_100178C6:				; CODE XREF: sub_100177B0+10Aj
		push	ebx
		call	ldap_msgfree
		pop	edi
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		add	esp, 14h
		retn
; ---------------------------------------------------------------------------

loc_100178D6:				; CODE XREF: sub_100177B0+B1j
					; sub_100177B0+B5j ...
		push	[esp+24h+var_14]
		call	ldap_msgfree
		pop	edi
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		add	esp, 14h
		retn
; ---------------------------------------------------------------------------

loc_100178E9:				; CODE XREF: sub_100177B0+4Ej
		push	[esp+24h+var_14]
		call	ldap_msgfree
		push	0
		push	0
		push	esi
		call	ldap_get_lderrno
		mov	[edi], eax

loc_100178FE:				; CODE XREF: sub_100177B0+FFj
		pop	edi
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		add	esp, 14h
		retn
sub_100177B0	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  53. ldap_ufn_search_c

; =============== S U B	R O U T	I N E =======================================


		public ldap_ufn_search_c
ldap_ufn_search_c proc near		; DATA XREF: .rdata:off_10020938o

arg_0		= dword	ptr  4
Src		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch

		push	offset aUfnLast	; "ufn last"
		push	offset aUfnIntermediat ; "ufn intermediate"
		push	offset aUfnFirst ; "ufn	first"
		push	[esp+0Ch+arg_18] ; int
		push	[esp+10h+arg_14] ; int
		push	[esp+14h+arg_10] ; int
		push	[esp+18h+arg_C]	; int
		push	[esp+1Ch+arg_8]	; int
		push	[esp+20h+Src]	; Src
		push	[esp+24h+arg_0]	; int
		call	ldap_ufn_search_ct
		retn	1Ch
ldap_ufn_search_c endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  64. ldap_ufn_search_ct

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	ldap_ufn_search_ct(int,	void *Src, int,	int, int, int, int, int, int, int)
		public ldap_ufn_search_ct
ldap_ufn_search_ct proc	near		; CODE XREF: ldap_ufn_search_c+2Bp
					; ldap_ufn_search_s+47p
					; DATA XREF: ...

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
Src		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch
arg_1C		= dword	ptr  20h
arg_20		= dword	ptr  24h
arg_24		= dword	ptr  28h

		sub	esp, 10h
		push	esi
		push	edi
		mov	edi, [esp+18h+arg_0]
		xor	esi, esi
		cmp	[edi+1Ch], esi
		jnz	short loc_10017975
		push	esi
		push	esi
		push	59h
		push	edi
		call	ldap_set_lderrno
		pop	edi
		lea	eax, [esi+59h]
		pop	esi
		add	esp, 10h
		retn	28h
; ---------------------------------------------------------------------------

loc_10017975:				; CODE XREF: ldap_ufn_search_ct+Ej
		push	ebp
		push	0		; int
		push	[esp+20h+Src]	; Src
		call	ldap_explode_dn
		mov	ebp, eax
		mov	[esp+1Ch+var_10], ebp
		test	ebp, ebp
		jnz	short loc_100179A1
		push	eax
		push	eax
		push	52h
		push	edi
		call	ldap_set_lderrno
		lea	eax, [ebp+52h]
		pop	ebp
		pop	edi
		pop	esi
		add	esp, 10h
		retn	28h
; ---------------------------------------------------------------------------

loc_100179A1:				; CODE XREF: ldap_ufn_search_ct+39j
		xor	eax, eax
		push	ebx
		mov	[esp+20h+var_C], eax
		cmp	[ebp+0], eax
		jz	short loc_100179C0
		lea	ecx, [ecx+0]

loc_100179B0:				; CODE XREF: ldap_ufn_search_ct+65j
		inc	eax
		cmp	[ebp+eax*4+0], esi
		jnz	short loc_100179B0
		mov	[esp+20h+var_C], eax
		cmp	eax, 2
		jg	short loc_100179C5

loc_100179C0:				; CODE XREF: ldap_ufn_search_ct+5Bj
		cmp	[edi+20h], esi
		jnz	short loc_10017A20

loc_100179C5:				; CODE XREF: ldap_ufn_search_ct+6Ej
		push	[esp+20h+arg_24]
		mov	ebx, [esp+24h+arg_10]
		push	[esp+24h+arg_20]
		push	[esp+28h+arg_1C]
		push	[esp+2Ch+arg_18]
		push	[esp+30h+arg_14]
		push	ebx
		push	[esp+38h+arg_C]
		push	[esp+3Ch+arg_8]
		push	0
		push	eax
		push	ebp
		push	edi
		call	sub_10017BC0
		add	esp, 30h
		mov	esi, eax
		push	dword ptr [ebx]
		push	edi
		call	ldap_count_entries
		test	eax, eax
		jle	short loc_10017A13

loc_10017A01:				; CODE XREF: ldap_ufn_search_ct+D5j
		push	ebp
		call	ldap_value_free
		pop	ebx
		pop	ebp
		pop	edi
		mov	eax, esi
		pop	esi
		add	esp, 10h
		retn	28h
; ---------------------------------------------------------------------------

loc_10017A13:				; CODE XREF: ldap_ufn_search_ct+AFj
		push	dword ptr [ebx]
		call	ldap_msgfree
		mov	dword ptr [ebx], 0

loc_10017A20:				; CODE XREF: ldap_ufn_search_ct+73j
		mov	eax, [edi+20h]
		test	eax, eax
		jz	short loc_10017A01
		push	0		; int
		push	eax		; Src
		call	ldap_explode_dn
		mov	ebx, eax
		mov	[esp+20h+var_4], ebx
		test	ebx, ebx
		jnz	short loc_10017A56
		push	ebp
		call	ldap_value_free
		push	ebx
		push	ebx
		push	52h
		push	edi
		call	ldap_set_lderrno
		lea	eax, [ebx+52h]
		pop	ebx
		pop	ebp
		pop	edi
		pop	esi
		add	esp, 10h
		retn	28h
; ---------------------------------------------------------------------------

loc_10017A56:				; CODE XREF: ldap_ufn_search_ct+E7j
		xor	ebp, ebp
		cmp	[ebx], ebp
		jz	short loc_10017A67
		lea	esp, [esp+0]

loc_10017A60:				; CODE XREF: ldap_ufn_search_ct+115j
		inc	ebp
		cmp	dword ptr [ebx+ebp*4], 0
		jnz	short loc_10017A60

loc_10017A67:				; CODE XREF: ldap_ufn_search_ct+10Aj
		mov	ecx, [edi+20h]
		lea	edx, [ecx+1]
		lea	ecx, [ecx+0]

loc_10017A70:				; CODE XREF: ldap_ufn_search_ct+125j
		mov	al, [ecx]
		inc	ecx
		test	al, al
		jnz	short loc_10017A70
		sub	ecx, edx
		lea	eax, [ecx+1]
		push	eax
		call	ldap_x_malloc
		mov	edi, eax
		add	esp, 4
		mov	[esp+20h+Src], edi
		test	edi, edi
		jnz	short loc_10017AB8
		push	[esp+20h+var_10]
		call	ldap_value_free
		push	ebx
		call	ldap_value_free
		push	edi
		push	edi
		push	5Ah
		push	[esp+2Ch+arg_0]
		call	ldap_set_lderrno
		pop	ebx
		pop	ebp
		lea	eax, [edi+5Ah]
		pop	edi
		pop	esi
		add	esp, 10h
		retn	28h
; ---------------------------------------------------------------------------

loc_10017AB8:				; CODE XREF: ldap_ufn_search_ct+13Dj
		xor	eax, eax
		mov	[esp+20h+var_8], eax
		test	ebp, ebp
		jle	loc_10017B99

loc_10017AC6:				; CODE XREF: ldap_ufn_search_ct+23Fj
		mov	byte ptr [edi],	0
		mov	ebx, eax
		cmp	eax, ebp
		jge	short loc_10017B2B
		nop

loc_10017AD0:				; CODE XREF: ldap_ufn_search_ct+1D9j
		mov	eax, [esp+20h+var_4]
		mov	edx, [eax+ebx*4]
		mov	esi, edx
		lea	esp, [esp+0]

loc_10017AE0:				; CODE XREF: ldap_ufn_search_ct+195j
		mov	al, [edx]
		inc	edx
		test	al, al
		jnz	short loc_10017AE0
		sub	edx, esi
		dec	edi
		lea	ebx, [ebx+0]

loc_10017AF0:				; CODE XREF: ldap_ufn_search_ct+1A6j
		mov	al, [edi+1]
		inc	edi
		test	al, al
		jnz	short loc_10017AF0
		mov	ecx, edx
		inc	ebx
		shr	ecx, 2
		rep movsd
		mov	ecx, edx
		and	ecx, 3
		rep movsb
		cmp	ebx, ebp
		jge	short loc_10017B25
		mov	edi, [esp+20h+Src]
		dec	edi

loc_10017B10:				; CODE XREF: ldap_ufn_search_ct+1C8j
		mov	al, [edi+1]
		lea	edi, [edi+1]
		test	al, al
		jnz	short loc_10017B10
		mov	ax, ds:word_10020440
		cmp	ebx, ebp
		mov	[edi], ax

loc_10017B25:				; CODE XREF: ldap_ufn_search_ct+1B9j
		mov	edi, [esp+20h+Src]
		jl	short loc_10017AD0

loc_10017B2B:				; CODE XREF: ldap_ufn_search_ct+17Dj
		push	[esp+20h+arg_24]
		mov	ebx, [esp+24h+arg_0]
		push	[esp+24h+arg_20]
		push	[esp+28h+arg_1C]
		push	[esp+2Ch+arg_18]
		push	[esp+30h+arg_14]
		push	[esp+34h+arg_10]
		push	[esp+38h+arg_C]
		push	[esp+3Ch+arg_8]
		push	edi
		push	[esp+44h+var_C]
		push	[esp+48h+var_10]
		push	ebx
		call	sub_10017BC0
		add	esp, 30h
		mov	esi, eax
		mov	eax, [esp+20h+arg_10]
		push	dword ptr [eax]
		push	ebx
		call	ldap_count_entries
		test	eax, eax
		jg	short loc_10017B95
		mov	ebx, [esp+20h+arg_10]
		push	dword ptr [ebx]
		call	ldap_msgfree
		mov	eax, [esp+20h+var_8]
		inc	eax
		mov	dword ptr [ebx], 0
		mov	[esp+20h+var_8], eax
		cmp	eax, ebp
		jl	loc_10017AC6

loc_10017B95:				; CODE XREF: ldap_ufn_search_ct+221j
		mov	ebx, [esp+20h+var_4]

loc_10017B99:				; CODE XREF: ldap_ufn_search_ct+170j
		push	[esp+20h+var_10]
		call	ldap_value_free
		push	ebx
		call	ldap_value_free
		push	edi
		call	ldap_x_free
		add	esp, 4
		mov	eax, esi
		pop	ebx
		pop	ebp
		pop	edi
		pop	esi
		add	esp, 10h
		retn	28h
ldap_ufn_search_ct endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10017BC0	proc near		; CODE XREF: ldap_ufn_search_ct+9Bp
					; ldap_ufn_search_ct+209p

var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch
arg_1C		= dword	ptr  20h
arg_20		= dword	ptr  24h
arg_24		= dword	ptr  28h
arg_28		= dword	ptr  2Ch
arg_2C		= dword	ptr  30h

		sub	esp, 20h
		xor	eax, eax
		mov	[esp+20h+var_18], 0
		push	ebx
		mov	ebx, [esp+24h+arg_8]
		xor	ecx, ecx
		push	ebp
		mov	[esp+28h+var_20], eax
		dec	ebx
		mov	[esp+28h+var_1C], eax
		mov	eax, [esp+28h+arg_18]
		lea	ebp, [ecx+1]
		mov	[esp+28h+var_10], ecx
		mov	[esp+28h+arg_8], ebx
		push	esi
		mov	dword ptr [eax], 0
		push	edi
		cmp	ebx, 0FFFFFFFFh
		jz	loc_10017E4E
		mov	esi, [esp+30h+arg_0]

loc_10017C02:				; CODE XREF: sub_10017BC0+284j
		mov	eax, [esp+30h+arg_4]
		lea	edi, [eax+ebx*4]
		mov	eax, [edi]
		mov	[esp+30h+var_8], edi
		cmp	byte ptr [eax],	22h
		jnz	short loc_10017C42
		push	22h		; Ch
		push	eax		; Str
		call	ds:strrchr
		add	esp, 8
		test	eax, eax
		jz	short loc_10017C27
		mov	byte ptr [eax],	0

loc_10017C27:				; CODE XREF: sub_10017BC0+62j
		mov	ecx, [edi]
		lea	edx, [ecx+1]
		lea	esp, [esp+0]

loc_10017C30:				; CODE XREF: sub_10017BC0+7Cj
		mov	al, [edx]
		lea	edx, [edx+1]
		mov	[ecx], al
		lea	ecx, [ecx+1]
		test	al, al
		jnz	short loc_10017C30
		mov	ecx, [esp+30h+var_10]

loc_10017C42:				; CODE XREF: sub_10017BC0+52j
		test	ebx, ebx
		mov	eax, 3
		cmovz	ebp, eax
		mov	eax, ebp
		mov	[esp+30h+var_14], ebp
		dec	eax
		jz	short loc_10017C6F
		dec	eax
		jz	short loc_10017C69
		dec	eax
		jnz	short loc_10017C7F
		mov	eax, [esp+30h+arg_2C]
		mov	[esp+30h+var_1C], 2
		jmp	short loc_10017C7B
; ---------------------------------------------------------------------------

loc_10017C69:				; CODE XREF: sub_10017BC0+96j
		mov	eax, [esp+30h+arg_28]
		jmp	short loc_10017C73
; ---------------------------------------------------------------------------

loc_10017C6F:				; CODE XREF: sub_10017BC0+93j
		mov	eax, [esp+30h+arg_24]

loc_10017C73:				; CODE XREF: sub_10017BC0+ADj
		mov	[esp+30h+var_1C], 1

loc_10017C7B:				; CODE XREF: sub_10017BC0+A7j
		mov	[esp+30h+var_18], eax

loc_10017C7F:				; CODE XREF: sub_10017BC0+99j
		test	ecx, ecx
		jnz	short loc_10017CC6
		cmp	[esp+30h+arg_C], ecx
		jz	short loc_10017CBB
		push	8
		call	ldap_x_malloc
		mov	ebx, eax
		add	esp, 4
		mov	[esp+30h+var_20], ebx
		test	ebx, ebx
		jz	loc_10017E5C
		push	[esp+30h+arg_C]
		call	sub_1000BAB0
		add	esp, 4
		mov	[ebx], eax
		mov	dword ptr [ebx+4], 0
		jmp	loc_10017D59
; ---------------------------------------------------------------------------

loc_10017CBB:				; CODE XREF: sub_10017BC0+C7j
		xor	ebx, ebx
		mov	[esp+30h+var_20], ebx
		jmp	loc_10017D59
; ---------------------------------------------------------------------------

loc_10017CC6:				; CODE XREF: sub_10017BC0+C1j
		xor	ebx, ebx
		mov	esi, ecx
		xor	edi, edi
		lea	esp, [esp+0]

loc_10017CD0:				; CODE XREF: sub_10017BC0+182j
		cmp	dword ptr [esi+4], 65h
		jz	short loc_10017D44
		push	esi
		push	[esp+34h+arg_0]
		call	ldap_get_dn
		mov	ebp, eax
		test	ebp, ebp
		jz	short loc_10017D3D
		mov	ecx, [esp+30h+var_20]
		test	ecx, ecx
		jnz	short loc_10017D0D
		push	20h
		call	ldap_x_malloc
		mov	ecx, eax
		add	esp, 4
		mov	[esp+30h+var_20], ecx
		test	ecx, ecx
		jz	loc_10017E75
		mov	edi, 8
		jmp	short loc_10017D32
; ---------------------------------------------------------------------------

loc_10017D0D:				; CODE XREF: sub_10017BC0+12Cj
		cmp	ebx, edi
		jl	short loc_10017D32
		lea	eax, ds:0[edi*8]
		push	eax
		push	ecx
		call	ldap_x_realloc
		mov	ecx, eax
		add	esp, 8
		mov	[esp+30h+var_20], ecx
		test	ecx, ecx
		jz	loc_10017E75
		add	edi, edi

loc_10017D32:				; CODE XREF: sub_10017BC0+14Bj
					; sub_10017BC0+14Fj
		mov	[ecx+ebx*4], ebp
		inc	ebx
		mov	dword ptr [ecx+ebx*4], 0

loc_10017D3D:				; CODE XREF: sub_10017BC0+124j
		mov	esi, [esi+0Ch]
		test	esi, esi
		jnz	short loc_10017CD0

loc_10017D44:				; CODE XREF: sub_10017BC0+114j
		push	[esp+30h+var_10]
		call	ldap_msgfree
		mov	ebx, [esp+30h+var_20]
		mov	ebp, [esp+30h+var_14]
		mov	edi, [esp+30h+var_8]

loc_10017D59:				; CODE XREF: sub_10017BC0+F6j
					; sub_10017BC0+101j
		mov	esi, [esp+30h+var_C]
		xor	eax, eax
		nop

loc_10017D60:				; CODE XREF: sub_10017BC0+250j
		push	dword ptr [edi]
		inc	eax
		push	[esp+34h+var_18]
		mov	[esp+38h+var_4], eax
		mov	eax, [esp+38h+arg_0]
		push	dword ptr [eax+1Ch]
		call	ldap_getfirstfilter
		test	eax, eax
		jz	short loc_10017DEE
		cmp	ebp, 3
		mov	edi, 1
		mov	ebp, offset off_100248BC
		cmovz	edi, [esp+30h+arg_14]
		cmp	[esp+30h+var_14], 3
		cmovz	ebp, [esp+30h+arg_10]

loc_10017D97:				; CODE XREF: sub_10017BC0+228j
		mov	esi, [esp+30h+arg_0]
		lea	ecx, [esp+30h+var_C]
		push	ecx
		push	edi
		push	ebp
		push	[esp+3Ch+var_1C]
		push	dword ptr [eax]
		push	ebx
		push	[esp+48h+arg_20]
		push	[esp+4Ch+arg_1C]
		push	esi
		call	sub_100177B0
		mov	ecx, eax
		add	esp, 24h
		mov	[esp+30h+var_10], ecx
		test	ecx, ecx
		jnz	short loc_10017E15
		mov	esi, [esp+30h+var_C]
		cmp	esi, 0FFFFFFFFh
		jz	loc_10017E91
		cmp	esi, 58h
		jz	loc_10017E91
		mov	eax, [esp+30h+arg_0]
		push	dword ptr [eax+1Ch]
		call	ldap_getnextfilter
		test	eax, eax
		jnz	short loc_10017D97
		mov	edi, [esp+30h+var_8]

loc_10017DEE:				; CODE XREF: sub_10017BC0+1B9j
		mov	eax, [esp+30h+var_4]
		cmp	eax, 2
		jge	loc_10017E91
		mov	ebp, [esp+30h+var_14]
		cmp	ebp, 3
		jz	loc_10017E91
		mov	[esp+30h+var_1C], 2
		jmp	loc_10017D60
; ---------------------------------------------------------------------------

loc_10017E15:				; CODE XREF: sub_10017BC0+202j
		mov	ebp, [esp+30h+var_14]
		mov	eax, 2
		cmp	ebp, 1
		cmovz	ebp, eax
		test	ebx, ebx
		jz	short loc_10017E38
		push	ebx
		call	ldap_value_free
		mov	ecx, [esp+30h+var_10]
		xor	eax, eax
		mov	[esp+30h+var_20], eax

loc_10017E38:				; CODE XREF: sub_10017BC0+266j
		mov	ebx, [esp+30h+arg_8]
		dec	ebx
		mov	[esp+30h+arg_8], ebx
		cmp	ebx, 0FFFFFFFFh
		jnz	loc_10017C02
		mov	eax, [esp+30h+arg_18]

loc_10017E4E:				; CODE XREF: sub_10017BC0+38j
		pop	edi
		pop	esi
		pop	ebp
		mov	[eax], ecx
		mov	eax, [esp+24h+var_C]
		pop	ebx
		add	esp, 20h
		retn
; ---------------------------------------------------------------------------

loc_10017E5C:				; CODE XREF: sub_10017BC0+DBj
		push	0
		push	0
		push	5Ah
		push	esi
		call	ldap_set_lderrno
		pop	edi
		pop	esi
		pop	ebp
		mov	eax, 5Ah
		pop	ebx
		add	esp, 20h
		retn
; ---------------------------------------------------------------------------

loc_10017E75:				; CODE XREF: sub_10017BC0+140j
					; sub_10017BC0+16Aj
		push	0
		push	0
		push	5Ah
		push	[esp+3Ch+arg_0]
		call	ldap_set_lderrno
		pop	edi
		pop	esi
		pop	ebp
		mov	eax, 5Ah
		pop	ebx
		add	esp, 20h
		retn
; ---------------------------------------------------------------------------

loc_10017E91:				; CODE XREF: sub_10017BC0+20Bj
					; sub_10017BC0+214j ...
		test	ebx, ebx
		jz	short loc_10017E9B
		push	ebx
		call	ldap_value_free

loc_10017E9B:				; CODE XREF: sub_10017BC0+2D3j
		pop	edi
		mov	eax, esi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 20h
		retn
sub_10017BC0	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  54. ldap_ufn_search_s

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	ldap_ufn_search_s(int, void *Src, int, int, int)
		public ldap_ufn_search_s
ldap_ufn_search_s proc near		; DATA XREF: .rdata:off_10020938o

var_8		= dword	ptr -8
arg_0		= dword	ptr  4
Src		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		sub	esp, 8
		mov	edx, [esp+8+arg_0]
		lea	eax, [esp+8+var_8]
		push	esi
		push	offset aUfnLast	; "ufn last"
		push	offset aUfnIntermediat ; "ufn intermediate"
		mov	ecx, [edx+14h]
		xor	esi, esi
		push	offset aUfnFirst ; "ufn	first"
		test	ecx, ecx
		mov	[esp+18h+var_8], ecx
		cmovz	eax, esi
		mov	esi, offset ldap_ufn_timeout
		push	eax		; int
		xor	eax, eax
		test	ecx, ecx
		cmovnz	eax, esi
		push	eax		; int
		push	[esp+20h+arg_10] ; int
		push	[esp+24h+arg_C]	; int
		push	[esp+28h+arg_8]	; int
		push	[esp+2Ch+Src]	; Src
		push	edx		; int
		call	ldap_ufn_search_ct
		pop	esi
		add	esp, 8
		retn	14h
ldap_ufn_search_s endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  69. ldap_ufn_setfilter

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	ldap_ufn_setfilter(int,	char *Filename)
		public ldap_ufn_setfilter
ldap_ufn_setfilter proc	near		; DATA XREF: .rdata:off_10020938o

arg_0		= dword	ptr  4
Filename	= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_0]
		mov	eax, [esi+1Ch]
		test	eax, eax
		jz	short loc_10017F22
		push	eax
		call	ldap_getfilter_free

loc_10017F22:				; CODE XREF: ldap_ufn_setfilter+Aj
		push	[esp+4+Filename] ; Filename
		call	ldap_init_getfilter
		mov	[esi+1Ch], eax
		pop	esi
		retn	8
ldap_ufn_setfilter endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  70. ldap_ufn_setprefix

; =============== S U B	R O U T	I N E =======================================


		public ldap_ufn_setprefix
ldap_ufn_setprefix proc	near		; DATA XREF: .rdata:off_10020938o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_0]
		mov	eax, [esi+20h]
		test	eax, eax
		jz	short loc_10017F55
		push	eax
		call	ldap_x_free
		add	esp, 4

loc_10017F55:				; CODE XREF: ldap_ufn_setprefix+Aj
		push	[esp+4+arg_4]
		call	sub_1000BAB0
		add	esp, 4
		mov	[esi+20h], eax
		pop	esi
		retn	8
ldap_ufn_setprefix endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  71. ldap_ufn_timeout

; =============== S U B	R O U T	I N E =======================================


		public ldap_ufn_timeout
ldap_ufn_timeout proc near		; DATA XREF: ldap_ufn_search_s+28o
					; .rdata:off_10020938o

arg_0		= dword	ptr  4

		mov	ecx, [esp+arg_0]
		mov	eax, [ecx]
		test	eax, eax
		jz	short loc_10017F89
		imul	eax, 0F4240h
		mov	dword ptr [ecx], 0
		mov	[ecx+4], eax

loc_10017F89:				; CODE XREF: ldap_ufn_timeout+8j
		add	dword ptr [ecx+4], 0FFFE7960h
		xor	eax, eax
		cmp	[ecx+4], eax
		setle	al
		retn
ldap_ufn_timeout endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10017FA0	proc near		; CODE XREF: ldap_open+E9p
					; ldap_unbind+Ap ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	esi
		mov	esi, [esp+4+arg_0]
		test	esi, esi
		jnz	short loc_10017FAE
		lea	eax, [esi+59h]
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10017FAE:				; CODE XREF: sub_10017FA0+7j
		mov	eax, [esi]
		push	edi
		mov	eax, [eax+130h]
		test	eax, eax
		jnz	loc_10018190
		mov	eax, [esi+0C0h]
		test	eax, eax
		jz	short loc_10018025
		mov	ecx, [esi+0DCh]
		test	ecx, ecx
		jz	short loc_10018025
		mov	edx, [esi+13Ch]
		test	edx, edx
		jz	short loc_1001801D
		call	edx
		cmp	[esi+14Ch], eax
		jnz	short loc_10017FEF
		inc	dword ptr [esi+184h]
		jmp	short loc_10018025
; ---------------------------------------------------------------------------

loc_10017FEF:				; CODE XREF: sub_10017FA0+45j
		mov	eax, [esi+0DCh]
		push	dword ptr [eax+0Ch]
		mov	eax, [esi+0C0h]
		call	eax
		mov	eax, [esi+13Ch]
		add	esp, 4
		call	eax
		mov	[esi+14Ch], eax
		mov	dword ptr [esi+184h], 1
		jmp	short loc_10018025
; ---------------------------------------------------------------------------

loc_1001801D:				; CODE XREF: sub_10017FA0+3Bj
		push	dword ptr [ecx+0Ch]
		call	eax
		add	esp, 4

loc_10018025:				; CODE XREF: sub_10017FA0+27j
					; sub_10017FA0+31j ...
		mov	eax, [esi+34h]
		test	eax, eax
		jz	short loc_10018045
		lea	esp, [esp+0]

loc_10018030:				; CODE XREF: sub_10017FA0+A3j
		mov	edi, [eax+44h]
		push	0
		push	eax
		push	esi
		call	sub_1000F6D0
		add	esp, 0Ch
		mov	eax, edi
		test	edi, edi
		jnz	short loc_10018030

loc_10018045:				; CODE XREF: sub_10017FA0+8Aj
		cmp	dword ptr [esi+0C0h], 0
		jz	short loc_1001809C
		mov	eax, [esi+0DCh]
		test	eax, eax
		jz	short loc_1001809C
		mov	ecx, [esi+13Ch]
		test	ecx, ecx
		jz	short loc_1001808E
		call	ecx
		cmp	[esi+14Ch], eax
		jnz	short loc_1001809C
		dec	dword ptr [esi+184h]
		jnz	short loc_1001809C
		mov	dword ptr [esi+14Ch], 0FFFFFFFFh
		mov	dword ptr [esi+184h], 0
		mov	eax, [esi+0DCh]

loc_1001808E:				; CODE XREF: sub_10017FA0+C0j
		push	dword ptr [eax+0Ch]
		mov	eax, [esi+0C4h]
		call	eax
		add	esp, 4

loc_1001809C:				; CODE XREF: sub_10017FA0+ACj
					; sub_10017FA0+B6j ...
		mov	eax, [esi+0C0h]
		test	eax, eax
		jz	short loc_10018102
		mov	ecx, [esi+0DCh]
		test	ecx, ecx
		jz	short loc_10018102
		mov	edx, [esi+13Ch]
		test	edx, edx
		jz	short loc_100180FA
		call	edx
		cmp	[esi+164h], eax
		jnz	short loc_100180CC
		inc	dword ptr [esi+19Ch]
		jmp	short loc_10018102
; ---------------------------------------------------------------------------

loc_100180CC:				; CODE XREF: sub_10017FA0+122j
		mov	eax, [esi+0DCh]
		push	dword ptr [eax+24h]
		mov	eax, [esi+0C0h]
		call	eax
		mov	eax, [esi+13Ch]
		add	esp, 4
		call	eax
		mov	[esi+164h], eax
		mov	dword ptr [esi+19Ch], 1
		jmp	short loc_10018102
; ---------------------------------------------------------------------------

loc_100180FA:				; CODE XREF: sub_10017FA0+118j
		push	dword ptr [ecx+24h]
		call	eax
		add	esp, 4

loc_10018102:				; CODE XREF: sub_10017FA0+104j
					; sub_10017FA0+10Ej ...
		cmp	dword ptr [esi+68h], 0
		jz	short loc_1001812F
		mov	edi, [esp+8+arg_C]
		push	ebx
		mov	ebx, [esp+0Ch+arg_8]
		push	ebp
		mov	ebp, [esp+10h+arg_4]

loc_10018116:				; CODE XREF: sub_10017FA0+18Bj
		push	edi
		push	1
		push	ebx
		push	ebp
		push	dword ptr [esi+68h]
		push	esi
		call	sub_1000F5E0
		add	esp, 18h
		cmp	dword ptr [esi+68h], 0
		jnz	short loc_10018116
		pop	ebp
		pop	ebx

loc_1001812F:				; CODE XREF: sub_10017FA0+166j
		cmp	dword ptr [esi+0C0h], 0
		jz	loc_100181DB
		mov	eax, [esi+0DCh]
		test	eax, eax
		jz	loc_100181DB
		mov	ecx, [esi+13Ch]
		test	ecx, ecx
		jz	short loc_10018180
		call	ecx
		cmp	[esi+164h], eax
		jnz	short loc_100181DB
		dec	dword ptr [esi+19Ch]
		jnz	short loc_100181DB
		mov	dword ptr [esi+164h], 0FFFFFFFFh
		mov	dword ptr [esi+19Ch], 0
		mov	eax, [esi+0DCh]

loc_10018180:				; CODE XREF: sub_10017FA0+1B2j
		push	dword ptr [eax+24h]
		mov	eax, [esi+0C4h]
		call	eax
		add	esp, 4
		jmp	short loc_100181DB
; ---------------------------------------------------------------------------

loc_10018190:				; CODE XREF: sub_10017FA0+19j
		xor	edi, edi
		test	eax, eax
		jle	short loc_100181BE
		jmp	short loc_100181A0
; ---------------------------------------------------------------------------
		align 10h

loc_100181A0:				; CODE XREF: sub_10017FA0+1F6j
					; sub_10017FA0+21Cj
		mov	eax, [esi]
		mov	eax, [eax+13Ch]
		push	dword ptr [eax+edi*4]
		call	ldap_x_free
		mov	eax, [esi]
		inc	edi
		add	esp, 4
		cmp	edi, [eax+130h]
		jl	short loc_100181A0

loc_100181BE:				; CODE XREF: sub_10017FA0+1F4j
		mov	eax, [esi]
		push	dword ptr [eax+13Ch]
		call	ldap_x_free
		mov	eax, [esi]
		push	dword ptr [eax+138h]
		call	ldap_x_free
		add	esp, 8

loc_100181DB:				; CODE XREF: sub_10017FA0+196j
					; sub_10017FA0+1A4j ...
		mov	eax, [esi+0C0h]
		test	eax, eax
		jz	short loc_10018241
		mov	ecx, [esi+0DCh]
		test	ecx, ecx
		jz	short loc_10018241
		mov	edx, [esi+13Ch]
		test	edx, edx
		jz	short loc_10018239
		call	edx
		cmp	[esi+150h], eax
		jnz	short loc_1001820B
		inc	dword ptr [esi+188h]
		jmp	short loc_10018241
; ---------------------------------------------------------------------------

loc_1001820B:				; CODE XREF: sub_10017FA0+261j
		mov	eax, [esi+0DCh]
		push	dword ptr [eax+10h]
		mov	eax, [esi+0C0h]
		call	eax
		mov	eax, [esi+13Ch]
		add	esp, 4
		call	eax
		mov	[esi+150h], eax
		mov	dword ptr [esi+188h], 1
		jmp	short loc_10018241
; ---------------------------------------------------------------------------

loc_10018239:				; CODE XREF: sub_10017FA0+257j
		push	dword ptr [ecx+10h]
		call	eax
		add	esp, 4

loc_10018241:				; CODE XREF: sub_10017FA0+243j
					; sub_10017FA0+24Dj ...
		mov	eax, [esi+38h]
		test	eax, eax
		jz	short loc_1001825F
		jmp	short loc_10018250
; ---------------------------------------------------------------------------
		align 10h

loc_10018250:				; CODE XREF: sub_10017FA0+2A8j
					; sub_10017FA0+2BDj
		mov	edi, [eax+10h]
		push	eax
		call	ldap_msgfree
		mov	eax, edi
		test	edi, edi
		jnz	short loc_10018250

loc_1001825F:				; CODE XREF: sub_10017FA0+2A6j
		cmp	dword ptr [esi+0C0h], 0
		pop	edi
		jz	short loc_100182B7
		mov	eax, [esi+0DCh]
		test	eax, eax
		jz	short loc_100182B7
		mov	ecx, [esi+13Ch]
		test	ecx, ecx
		jz	short loc_100182A9
		call	ecx
		cmp	[esi+150h], eax
		jnz	short loc_100182B7
		dec	dword ptr [esi+188h]
		jnz	short loc_100182B7
		mov	dword ptr [esi+150h], 0FFFFFFFFh
		mov	dword ptr [esi+188h], 0
		mov	eax, [esi+0DCh]

loc_100182A9:				; CODE XREF: sub_10017FA0+2DBj
		push	dword ptr [eax+10h]
		mov	eax, [esi+0C4h]
		call	eax
		add	esp, 4

loc_100182B7:				; CODE XREF: sub_10017FA0+2C7j
					; sub_10017FA0+2D1j ...
		cmp	dword ptr [esi+0F0h], 0
		jz	loc_1001838E
		mov	eax, [esi+0C0h]
		test	eax, eax
		jz	short loc_10018328
		mov	ecx, [esi+0DCh]
		test	ecx, ecx
		jz	short loc_10018328
		mov	edx, [esi+13Ch]
		test	edx, edx
		jz	short loc_10018321
		call	edx
		cmp	[esi+140h], eax
		jnz	short loc_100182F4
		inc	dword ptr [esi+178h]
		jmp	short loc_10018328
; ---------------------------------------------------------------------------

loc_100182F4:				; CODE XREF: sub_10017FA0+34Aj
		mov	eax, [esi+0DCh]
		push	dword ptr [eax]
		mov	eax, [esi+0C0h]
		call	eax
		mov	eax, [esi+13Ch]
		add	esp, 4
		call	eax
		mov	[esi+140h], eax
		mov	dword ptr [esi+178h], 1
		jmp	short loc_10018328
; ---------------------------------------------------------------------------

loc_10018321:				; CODE XREF: sub_10017FA0+340j
		push	dword ptr [ecx]
		call	eax
		add	esp, 4

loc_10018328:				; CODE XREF: sub_10017FA0+32Cj
					; sub_10017FA0+336j ...
		mov	eax, [esi+0F0h]
		push	0
		push	0
		push	esi
		call	eax
		add	esp, 0Ch
		cmp	dword ptr [esi+0C0h], 0
		jz	short loc_1001838E
		mov	eax, [esi+0DCh]
		test	eax, eax
		jz	short loc_1001838E
		mov	ecx, [esi+13Ch]
		test	ecx, ecx
		jz	short loc_10018381
		call	ecx
		cmp	[esi+140h], eax
		jnz	short loc_1001838E
		dec	dword ptr [esi+178h]
		jnz	short loc_1001838E
		mov	dword ptr [esi+140h], 0FFFFFFFFh
		mov	dword ptr [esi+178h], 0
		mov	eax, [esi+0DCh]

loc_10018381:				; CODE XREF: sub_10017FA0+3B3j
		push	dword ptr [eax]
		mov	eax, [esi+0C4h]
		call	eax
		add	esp, 4

loc_1001838E:				; CODE XREF: sub_10017FA0+31Ej
					; sub_10017FA0+39Fj ...
		mov	eax, [esi+94h]
		test	eax, eax
		jz	short loc_100183A4
		push	dword ptr [esi+98h]
		push	esi
		call	eax
		add	esp, 8

loc_100183A4:				; CODE XREF: sub_10017FA0+3F6j
		mov	eax, [esi+28h]
		test	eax, eax
		jz	short loc_100183B4
		push	eax
		call	ldap_x_free
		add	esp, 4

loc_100183B4:				; CODE XREF: sub_10017FA0+409j
		mov	eax, [esi+2Ch]
		test	eax, eax
		jz	short loc_100183C4
		push	eax
		call	ldap_x_free
		add	esp, 4

loc_100183C4:				; CODE XREF: sub_10017FA0+419j
		mov	eax, [esi+4]
		test	eax, eax
		jz	short loc_100183D4
		push	eax
		call	ldap_x_free
		add	esp, 4

loc_100183D4:				; CODE XREF: sub_10017FA0+429j
		mov	eax, [esi+20h]
		test	eax, eax
		jz	short loc_100183E4
		push	eax
		call	ldap_x_free
		add	esp, 4

loc_100183E4:				; CODE XREF: sub_10017FA0+439j
		mov	eax, [esi+1Ch]
		test	eax, eax
		jz	short loc_100183F1
		push	eax
		call	ldap_getfilter_free

loc_100183F1:				; CODE XREF: sub_10017FA0+449j
		mov	eax, [esi+3Ch]
		test	eax, eax
		jz	short loc_10018401
		push	eax
		call	ldap_x_free
		add	esp, 4

loc_10018401:				; CODE XREF: sub_10017FA0+456j
		mov	eax, [esi]
		test	eax, eax
		jz	short loc_1001840D
		push	eax		; Memory
		call	ber_sockbuf_free

loc_1001840D:				; CODE XREF: sub_10017FA0+465j
		mov	eax, [esi+54h]
		test	eax, eax
		jz	short loc_1001841D
		push	eax
		call	ldap_x_free
		add	esp, 4

loc_1001841D:				; CODE XREF: sub_10017FA0+472j
		mov	eax, [esi+114h]
		test	eax, eax
		jz	short loc_1001842D
		push	eax
		call	ldap_controls_free

loc_1001842D:				; CODE XREF: sub_10017FA0+485j
		mov	eax, [esi+118h]
		test	eax, eax
		jz	short loc_1001843D
		push	eax
		call	ldap_controls_free

loc_1001843D:				; CODE XREF: sub_10017FA0+495j
		mov	eax, [esi+11Ch]
		test	eax, eax
		jz	short loc_10018450
		push	eax
		call	ldap_x_free
		add	esp, 4

loc_10018450:				; CODE XREF: sub_10017FA0+4A5j
		push	esi
		call	sub_1000C330
		add	esp, 4
		cmp	dword ptr [esi+120h], 0
		jz	short loc_1001846A
		push	0
		push	esi
		call	ldap_memcache_set

loc_1001846A:				; CODE XREF: sub_10017FA0+4C0j
		push	esi
		call	sub_1000B970
		push	dword ptr [esi+0DCh]
		call	ldap_x_free
		push	esi
		call	ldap_x_free
		add	esp, 0Ch
		xor	eax, eax
		pop	esi
		retn
sub_10017FA0	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  13. ldap_unbind
; Exported entry  46. ldap_unbind_s

; =============== S U B	R O U T	I N E =======================================


		public ldap_unbind
ldap_unbind	proc near		; DATA XREF: .rdata:off_10020938o

arg_0		= dword	ptr  4

		push	1		; ldap_unbind
		push	0
		push	0
		push	[esp+0Ch+arg_0]
		call	sub_10017FA0
		add	esp, 10h
		retn	4
ldap_unbind	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 528. ldap_unbind_ext

; =============== S U B	R O U T	I N E =======================================


		public ldap_unbind_ext
ldap_unbind_ext	proc near		; DATA XREF: .rdata:off_10020938o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	1
		push	[esp+4+arg_8]
		push	[esp+8+arg_4]
		push	[esp+0Ch+arg_0]
		call	sub_10017FA0
		add	esp, 10h
		retn	0Ch
ldap_unbind_ext	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100184D0	proc near		; CODE XREF: sub_1000F5E0+4Dp

Memory		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ecx
		push	esi
		mov	esi, [esp+8+arg_0]
		lea	eax, [esp+8+Memory]
		push	eax
		push	esi
		call	sub_1000EF40
		add	esp, 8
		test	eax, eax
		jnz	loc_10018656
		mov	eax, [esi+0C0h]
		test	eax, eax
		jz	short loc_10018552
		mov	ecx, [esi+0DCh]
		test	ecx, ecx
		jz	short loc_10018552
		mov	edx, [esi+13Ch]
		test	edx, edx
		jz	short loc_1001854A
		call	edx
		cmp	[esi+148h], eax
		jnz	short loc_1001851C
		inc	dword ptr [esi+180h]
		jmp	short loc_10018552
; ---------------------------------------------------------------------------

loc_1001851C:				; CODE XREF: sub_100184D0+42j
		mov	eax, [esi+0DCh]
		push	dword ptr [eax+8]
		mov	eax, [esi+0C0h]
		call	eax
		mov	eax, [esi+13Ch]
		add	esp, 4
		call	eax
		mov	[esi+148h], eax
		mov	dword ptr [esi+180h], 1
		jmp	short loc_10018552
; ---------------------------------------------------------------------------

loc_1001854A:				; CODE XREF: sub_100184D0+38j
		push	dword ptr [ecx+8]
		call	eax
		add	esp, 4

loc_10018552:				; CODE XREF: sub_100184D0+24j
					; sub_100184D0+2Ej ...
		inc	dword ptr [esi+30h]
		cmp	dword ptr [esi+0C0h], 0
		push	edi
		mov	edi, [esi+30h]
		jz	short loc_100185B0
		mov	eax, [esi+0DCh]
		test	eax, eax
		jz	short loc_100185B0
		mov	ecx, [esi+13Ch]
		test	ecx, ecx
		jz	short loc_100185A2
		call	ecx
		cmp	[esi+148h], eax
		jnz	short loc_100185B0
		dec	dword ptr [esi+180h]
		jnz	short loc_100185B0
		mov	dword ptr [esi+148h], 0FFFFFFFFh
		mov	dword ptr [esi+180h], 0
		mov	eax, [esi+0DCh]

loc_100185A2:				; CODE XREF: sub_100184D0+A4j
		push	dword ptr [eax+8]
		mov	eax, [esi+0C4h]
		call	eax
		add	esp, 4

loc_100185B0:				; CODE XREF: sub_100184D0+90j
					; sub_100184D0+9Aj ...
		push	42h
		push	edi
		push	offset aItn	; "{itn"
		push	[esp+18h+Memory]
		call	ber_printf
		add	esp, 10h
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_100185E9
		push	1		; int
		push	[esp+10h+Memory] ; Memory
		call	ber_free
		push	0
		push	0
		push	53h
		push	esi
		call	ldap_set_lderrno
		pop	edi
		mov	eax, 53h
		pop	esi
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_100185E9:				; CODE XREF: sub_100184D0+F7j
		push	[esp+0Ch+Memory]
		push	1
		push	[esp+14h+arg_8]
		push	esi
		call	sub_10002DD0
		mov	edi, eax
		add	esp, 10h
		test	edi, edi
		jz	short loc_10018613
		push	1		; int
		push	[esp+10h+Memory] ; Memory
		call	ber_free
		mov	eax, edi
		pop	edi
		pop	esi
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_10018613:				; CODE XREF: sub_100184D0+130j
		push	0
		push	1
		push	[esp+14h+Memory]
		push	[esp+18h+arg_4]
		push	esi
		call	sub_1000FB90
		mov	edi, eax
		add	esp, 14h
		test	edi, edi
		jz	short loc_10018653
		push	1		; int
		push	[esp+10h+Memory] ; Memory
		call	ber_free
		cmp	edi, 0FFFFFFFEh
		jz	short loc_10018653
		push	0
		push	0
		push	51h
		push	esi
		call	ldap_set_lderrno
		pop	edi
		mov	eax, 51h
		pop	esi
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_10018653:				; CODE XREF: sub_100184D0+15Cj
					; sub_100184D0+16Cj
		xor	eax, eax
		pop	edi

loc_10018656:				; CODE XREF: sub_100184D0+16j
		pop	esi
		pop	ecx
		retn
sub_100184D0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10018660	proc near		; CODE XREF: sub_10018B20+FCp
					; sub_10018B20+1C3p ...

arg_0		= dword	ptr  4

		mov	ecx, [esp+arg_0]
		mov	edx, ecx
		mov	al, [ecx]
		test	al, al
		jz	short loc_100186E0
		push	ebx
		lea	ecx, [ecx+0]

loc_10018670:				; CODE XREF: sub_10018660+7Dj
		cmp	al, 25h
		jnz	short loc_100186D4
		mov	bl, [ecx+1]
		test	bl, bl
		jz	short loc_100186A1
		lea	eax, [ebx-30h]
		cmp	al, 9
		ja	short loc_1001868A
		movsx	eax, bl
		sub	eax, 30h
		jmp	short loc_1001869C
; ---------------------------------------------------------------------------

loc_1001868A:				; CODE XREF: sub_10018660+20j
		lea	eax, [ebx-41h]
		cmp	al, 5
		movsx	eax, bl
		ja	short loc_10018699
		sub	eax, 37h
		jmp	short loc_1001869C
; ---------------------------------------------------------------------------

loc_10018699:				; CODE XREF: sub_10018660+32j
		sub	eax, 57h

loc_1001869C:				; CODE XREF: sub_10018660+28j
					; sub_10018660+37j
		shl	al, 4
		mov	[edx], al

loc_100186A1:				; CODE XREF: sub_10018660+19j
		mov	bl, [ecx+2]
		add	ecx, 2
		test	bl, bl
		jz	short loc_100186D7
		lea	eax, [ebx-30h]
		cmp	al, 9
		ja	short loc_100186BC
		movsx	eax, bl
		sub	eax, 30h
		add	[edx], al
		jmp	short loc_100186D6
; ---------------------------------------------------------------------------

loc_100186BC:				; CODE XREF: sub_10018660+50j
		lea	eax, [ebx-41h]
		cmp	al, 5
		movsx	eax, bl
		ja	short loc_100186CD
		sub	eax, 37h
		add	[edx], al
		jmp	short loc_100186D6
; ---------------------------------------------------------------------------

loc_100186CD:				; CODE XREF: sub_10018660+64j
		sub	eax, 57h
		add	[edx], al
		jmp	short loc_100186D6
; ---------------------------------------------------------------------------

loc_100186D4:				; CODE XREF: sub_10018660+12j
		mov	[edx], al

loc_100186D6:				; CODE XREF: sub_10018660+5Aj
					; sub_10018660+6Bj ...
		inc	edx

loc_100186D7:				; CODE XREF: sub_10018660+49j
		mov	al, [ecx+1]
		inc	ecx
		test	al, al
		jnz	short loc_10018670
		pop	ebx

loc_100186E0:				; CODE XREF: sub_10018660+Aj
		mov	byte ptr [edx],	0
		retn
sub_10018660	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  90. ldap_free_urldesc

; =============== S U B	R O U T	I N E =======================================


		public ldap_free_urldesc
ldap_free_urldesc proc near		; CODE XREF: sub_1000EC30+22Fp
					; sub_1000F280+29Fp ...

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		test	esi, esi
		jz	short loc_10018722
		mov	eax, [esi+1Ch]
		test	eax, eax
		jz	short loc_10018709
		push	eax
		call	ldap_x_free
		add	esp, 4

loc_10018709:				; CODE XREF: ldap_free_urldesc+Ej
		mov	eax, [esi+0Ch]
		test	eax, eax
		jz	short loc_10018719
		push	eax
		call	ldap_x_free
		add	esp, 4

loc_10018719:				; CODE XREF: ldap_free_urldesc+1Ej
		push	esi
		call	ldap_x_free
		add	esp, 4

loc_10018722:				; CODE XREF: ldap_free_urldesc+7j
		pop	esi
		retn	4
ldap_free_urldesc endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  89. ldap_is_ldap_url

; =============== S U B	R O U T	I N E =======================================


		public ldap_is_ldap_url
ldap_is_ldap_url proc near		; DATA XREF: .rdata:off_10020938o

var_8		= byte ptr -8
var_4		= byte ptr -4
arg_0		= dword	ptr  4

		sub	esp, 8
		cmp	[esp+8+arg_0], 0
		jz	short loc_1001875F
		lea	eax, [esp+8+var_8]
		push	eax
		lea	eax, [esp+0Ch+var_4]
		push	eax
		lea	eax, [esp+10h+arg_0]
		push	eax
		call	sub_10018E60
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_1001875F
		mov	eax, 1
		add	esp, 8
		retn	4
; ---------------------------------------------------------------------------

loc_1001875F:				; CODE XREF: ldap_is_ldap_url+8j
					; ldap_is_ldap_url+22j
		xor	eax, eax
		add	esp, 8
		retn	4
ldap_is_ldap_url endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  91. ldap_url_parse

; =============== S U B	R O U T	I N E =======================================


		public ldap_url_parse
ldap_url_parse	proc near		; CODE XREF: ldap_url_search+13p
					; DATA XREF: .rdata:off_10020938o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_4]
		push	1
		push	esi
		push	[esp+0Ch+arg_0]
		call	sub_10018B20
		mov	ecx, eax
		add	esp, 0Ch
		test	ecx, ecx
		jnz	short loc_100187BB
		mov	eax, [esi]
		cmp	dword ptr [eax+10h], 0FFFFFFFFh
		jnz	short loc_10018795
		mov	[eax+10h], ecx

loc_10018795:				; CODE XREF: ldap_url_parse+20j
		mov	eax, [esi]
		cmp	dword ptr [eax+14h], 0
		jnz	short loc_100187A4
		mov	dword ptr [eax+14h], offset aObjectclass ; "(objectclass=*)"

loc_100187A4:				; CODE XREF: ldap_url_parse+2Bj
		mov	edx, [esi]
		mov	eax, [edx+8]
		cmp	byte ptr [eax],	0
		mov	eax, ecx
		jnz	short loc_100187C8
		mov	dword ptr [edx+8], 0
		pop	esi
		retn	8
; ---------------------------------------------------------------------------

loc_100187BB:				; CODE XREF: ldap_url_parse+18j
		mov	eax, 5
		cmp	ecx, 6
		cmovz	ecx, eax
		mov	eax, ecx

loc_100187C8:				; CODE XREF: ldap_url_parse+3Ej
		pop	esi
		retn	8
ldap_url_parse	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 539. ldap_url_parse_no_defaults

; =============== S U B	R O U T	I N E =======================================


		public ldap_url_parse_no_defaults
ldap_url_parse_no_defaults proc	near	; DATA XREF: .rdata:off_10020938o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	[esp+arg_8]
		push	[esp+4+arg_4]
		push	[esp+8+arg_0]
		call	sub_10018B20
		add	esp, 0Ch
		retn	0Ch
ldap_url_parse_no_defaults endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  92. ldap_url_search

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	ldap_url_search(void *Memory, int, int)
		public ldap_url_search
ldap_url_search	proc near		; CODE XREF: ldap_url_search_s+Ep
					; ldap_url_search_st+4Ep
					; DATA XREF: ...

var_4		= dword	ptr -4
Memory		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ecx
		push	esi
		mov	esi, [esp+8+Memory]
		test	esi, esi
		jz	short loc_10018818
		lea	eax, [esp+8+var_4]
		push	eax
		push	[esp+0Ch+arg_4]
		call	ldap_url_parse
		test	eax, eax
		jz	short loc_10018820
		push	0
		push	0
		push	59h
		push	esi
		call	ldap_set_lderrno

loc_10018818:				; CODE XREF: ldap_url_search+8j
		or	eax, 0FFFFFFFFh
		pop	esi
		pop	ecx
		retn	0Ch
; ---------------------------------------------------------------------------

loc_10018820:				; CODE XREF: ldap_url_search+1Aj
		mov	eax, [esi+0C0h]
		test	eax, eax
		jz	short loc_10018886
		mov	ecx, [esi+0DCh]
		test	ecx, ecx
		jz	short loc_10018886
		mov	edx, [esi+13Ch]
		test	edx, edx
		jz	short loc_1001887E
		call	edx
		cmp	[esi+148h], eax
		jnz	short loc_10018850
		inc	dword ptr [esi+180h]
		jmp	short loc_10018886
; ---------------------------------------------------------------------------

loc_10018850:				; CODE XREF: ldap_url_search+56j
		mov	eax, [esi+0DCh]
		push	dword ptr [eax+8]
		mov	eax, [esi+0C0h]
		call	eax
		mov	eax, [esi+13Ch]
		add	esp, 4
		call	eax
		mov	[esi+148h], eax
		mov	dword ptr [esi+180h], 1
		jmp	short loc_10018886
; ---------------------------------------------------------------------------

loc_1001887E:				; CODE XREF: ldap_url_search+4Cj
		push	dword ptr [ecx+8]
		call	eax
		add	esp, 4

loc_10018886:				; CODE XREF: ldap_url_search+38j
					; ldap_url_search+42j ...
		inc	dword ptr [esi+30h]
		cmp	dword ptr [esi+0C0h], 0
		push	ebx
		mov	ebx, [esi+30h]
		mov	[esp+0Ch+arg_4], ebx
		jz	short loc_100188E8
		mov	eax, [esi+0DCh]
		test	eax, eax
		jz	short loc_100188E8
		mov	ecx, [esi+13Ch]
		test	ecx, ecx
		jz	short loc_100188DA
		call	ecx
		cmp	[esi+148h], eax
		jnz	short loc_100188E8
		dec	dword ptr [esi+180h]
		jnz	short loc_100188E8
		mov	dword ptr [esi+148h], 0FFFFFFFFh
		mov	dword ptr [esi+180h], 0
		mov	eax, [esi+0DCh]

loc_100188DA:				; CODE XREF: ldap_url_search+BCj
		push	dword ptr [eax+8]
		mov	eax, [esi+0C4h]
		call	eax
		add	esp, 4

loc_100188E8:				; CODE XREF: ldap_url_search+A8j
					; ldap_url_search+B2j ...
		lea	eax, [esp+0Ch+Memory]
		push	eax
		push	ebx
		mov	ebx, [esp+14h+var_4]
		push	0FFFFFFFFh
		push	0FFFFFFFFh
		push	0
		push	0
		push	[esp+24h+arg_8]
		push	dword ptr [ebx+0Ch]
		push	dword ptr [ebx+14h]
		push	dword ptr [ebx+10h]
		push	dword ptr [ebx+8]
		push	esi
		call	sub_100135A0
		add	esp, 30h
		test	eax, eax
		jz	short loc_10018920
		pop	ebx
		or	eax, 0FFFFFFFFh
		pop	esi
		pop	ecx
		retn	0Ch
; ---------------------------------------------------------------------------

loc_10018920:				; CODE XREF: ldap_url_search+125j
		push	ebp
		mov	ebp, [ebx]
		push	edi
		test	ebp, ebp
		jnz	short loc_1001892B
		mov	ebp, [esi+54h]

loc_1001892B:				; CODE XREF: ldap_url_search+136j
		push	14h
		push	1
		call	ldap_x_calloc
		mov	edi, eax
		add	esp, 8
		test	edi, edi
		jz	short loc_10018959
		test	ebp, ebp
		jz	short loc_10018991
		push	ebp
		call	sub_1000BAB0
		add	esp, 4
		mov	[edi], eax
		test	eax, eax
		jnz	short loc_10018991
		push	edi
		call	ldap_x_free
		add	esp, 4

loc_10018959:				; CODE XREF: ldap_url_search+14Bj
		push	0
		push	0
		push	5Ah
		push	esi
		call	ldap_set_lderrno
		or	ebp, 0FFFFFFFFh

loc_10018968:				; CODE XREF: ldap_url_search+1ADj
					; ldap_url_search+1BCj	...
		test	byte ptr [ebx+18h], 1
		jz	short loc_10018972
		or	dword ptr [edi+0Ch], 1

loc_10018972:				; CODE XREF: ldap_url_search+17Cj
		push	1		; int
		test	ebp, ebp
		jz	short loc_100189C6
		push	[esp+18h+Memory] ; Memory
		call	ber_free
		push	ebx
		call	ldap_free_urldesc
		pop	edi
		mov	eax, ebp
		pop	ebp
		pop	ebx
		pop	esi
		pop	ecx
		retn	0Ch
; ---------------------------------------------------------------------------

loc_10018991:				; CODE XREF: ldap_url_search+14Fj
					; ldap_url_search+15Ej
		mov	eax, [ebx+4]
		test	eax, eax
		jz	short loc_1001899F
		mov	[edi+8], eax
		xor	ebp, ebp
		jmp	short loc_10018968
; ---------------------------------------------------------------------------

loc_1001899F:				; CODE XREF: ldap_url_search+1A6j
		cmp	dword ptr [ebx], 0
		jnz	short loc_100189AE
		mov	eax, [esi+58h]
		xor	ebp, ebp
		mov	[edi+8], eax
		jmp	short loc_10018968
; ---------------------------------------------------------------------------

loc_100189AE:				; CODE XREF: ldap_url_search+1B2j
		test	byte ptr [ebx+18h], 1
		mov	eax, 27Ch
		mov	ecx, 185h
		cmovz	eax, ecx
		xor	ebp, ebp
		mov	[edi+8], eax
		jmp	short loc_10018968
; ---------------------------------------------------------------------------

loc_100189C6:				; CODE XREF: ldap_url_search+186j
		push	0		; int
		push	0		; int
		push	edi		; int
		push	0		; int
		push	[esp+28h+arg_4]	; int
		push	[esp+2Ch+Memory] ; Memory
		push	esi		; int
		call	sub_1000FD40
		add	esp, 20h
		mov	ebp, eax
		push	ebx
		call	ldap_free_urldesc
		pop	edi
		mov	eax, ebp
		pop	ebp
		pop	ebx
		pop	esi
		pop	ecx
		retn	0Ch
ldap_url_search	endp

; Exported entry  93. ldap_url_search_s

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	ldap_url_search_s(void *Memory,	int, int, int)
		public ldap_url_search_s
ldap_url_search_s proc near		; DATA XREF: .rdata:off_10020938o

Memory		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	esi
		push	[esp+4+arg_8]	; int
		mov	esi, [esp+8+Memory]
		push	[esp+8+arg_4]	; int
		push	esi		; Memory
		call	ldap_url_search
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_10018A16
		push	0
		push	0
		push	esi
		call	ldap_get_lderrno
		pop	esi
		retn	10h
; ---------------------------------------------------------------------------

loc_10018A16:				; CODE XREF: ldap_url_search_s+16j
		push	edi
		mov	edi, [esp+8+arg_C]
		push	edi
		push	0
		push	1
		push	eax
		push	esi
		call	ldap_result
		push	0
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_10018A3B
		push	0
		push	esi
		call	ldap_get_lderrno
		pop	edi
		pop	esi
		retn	10h
; ---------------------------------------------------------------------------

loc_10018A3B:				; CODE XREF: ldap_url_search_s+3Cj
		push	dword ptr [edi]
		push	esi
		call	ldap_result2error
		pop	edi
		pop	esi
		retn	10h
ldap_url_search_s endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  94. ldap_url_search_st

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	ldap_url_search_st(void	*Memory, int, int, int,	int)
		public ldap_url_search_st
ldap_url_search_st proc	near		; DATA XREF: .rdata:off_10020938o

Memory		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	edi
		mov	edi, [esp+4+arg_C]
		test	edi, edi
		jz	short loc_10018A8F
		cmp	dword ptr [edi], 0
		jnz	short loc_10018A8F
		cmp	dword ptr [edi+4], 0
		jnz	short loc_10018A8F
		mov	eax, [esp+4+Memory]
		test	eax, eax
		jz	short loc_10018A78
		push	0
		push	0
		push	59h
		push	eax
		call	ldap_set_lderrno

loc_10018A78:				; CODE XREF: ldap_url_search_st+1Aj
		mov	eax, [esp+4+arg_10]
		test	eax, eax
		jz	short loc_10018A86
		mov	dword ptr [eax], 0

loc_10018A86:				; CODE XREF: ldap_url_search_st+2Ej
		mov	eax, 59h
		pop	edi
		retn	14h
; ---------------------------------------------------------------------------

loc_10018A8F:				; CODE XREF: ldap_url_search_st+7j
					; ldap_url_search_st+Cj ...
		push	ebx
		push	esi
		push	[esp+0Ch+arg_8]	; int
		mov	esi, [esp+10h+Memory]
		push	[esp+10h+arg_4]	; int
		push	esi		; Memory
		call	ldap_url_search
		mov	ebx, eax
		cmp	ebx, 0FFFFFFFFh
		jnz	short loc_10018ABA
		push	0
		push	0
		push	esi
		call	ldap_get_lderrno
		pop	esi
		pop	ebx
		pop	edi
		retn	14h
; ---------------------------------------------------------------------------

loc_10018ABA:				; CODE XREF: ldap_url_search_st+58j
		push	ebp
		mov	ebp, [esp+10h+arg_10]
		push	ebp
		push	edi
		push	1
		push	ebx
		push	esi
		call	ldap_result
		push	0
		push	0
		push	esi
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_10018AE0
		call	ldap_get_lderrno
		pop	ebp
		pop	esi
		pop	ebx
		pop	edi
		retn	14h
; ---------------------------------------------------------------------------

loc_10018AE0:				; CODE XREF: ldap_url_search_st+82j
		call	ldap_get_lderrno
		cmp	eax, 55h
		jnz	short loc_10018B09
		push	ebx
		push	esi
		call	ldap_abandon
		push	0
		push	0
		push	55h
		push	esi
		call	ldap_set_lderrno
		pop	ebp
		pop	esi
		pop	ebx
		mov	eax, 55h
		pop	edi
		retn	14h
; ---------------------------------------------------------------------------

loc_10018B09:				; CODE XREF: ldap_url_search_st+98j
		push	0
		push	dword ptr [ebp+0]
		push	esi
		call	ldap_result2error
		pop	ebp
		pop	esi
		pop	ebx
		pop	edi
		retn	14h
ldap_url_search_st endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10018B20	proc near		; CODE XREF: sub_1000EC30+21p
					; sub_1000F280+99p ...

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 0Ch
		push	ebx
		xor	ebx, ebx
		mov	[esp+10h+var_C], ebx
		cmp	[esp+10h+arg_0], ebx
		jz	loc_10018E51
		mov	eax, [esp+10h+arg_4]
		test	eax, eax
		jz	loc_10018E51
		mov	[eax], ebx
		lea	eax, [esp+10h+var_8]
		push	eax
		lea	eax, [esp+14h+var_4]
		push	eax
		lea	eax, [esp+18h+arg_0]
		push	eax
		call	sub_10018E60
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_10018B65
		lea	eax, [ebx+1]
		pop	ebx
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_10018B65:				; CODE XREF: sub_10018B20+3Bj
		push	esi
		push	20h
		push	1
		call	ldap_x_calloc
		mov	esi, eax
		add	esp, 8
		test	esi, esi
		jnz	short loc_10018B81
		lea	eax, [esi+4]
		pop	esi
		pop	ebx
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_10018B81:				; CODE XREF: sub_10018B20+56j
		cmp	[esp+14h+var_8], ebx
		jz	short loc_10018B8B
		or	dword ptr [esi+18h], 1

loc_10018B8B:				; CODE XREF: sub_10018B20+65j
		push	edi
		push	[esp+18h+arg_0]
		call	sub_1000BAB0
		mov	edi, eax
		add	esp, 4
		test	edi, edi
		jnz	short loc_10018BAE
		push	esi
		call	ldap_free_urldesc
		lea	eax, [edi+4]
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_10018BAE:				; CODE XREF: sub_10018B20+7Cj
		cmp	[esp+18h+var_4], ebx
		jz	short loc_10018BD4
		mov	ecx, edi
		lea	edx, [ecx+1]
		lea	esp, [esp+0]

loc_10018BC0:				; CODE XREF: sub_10018B20+A5j
		mov	al, [ecx]
		inc	ecx
		test	al, al
		jnz	short loc_10018BC0
		sub	ecx, edx
		cmp	byte ptr [ecx+edi-1], 3Eh
		jnz	short loc_10018BD4
		mov	[ecx+edi-1], bl

loc_10018BD4:				; CODE XREF: sub_10018B20+92j
					; sub_10018B20+AEj
		push	ebp
		mov	ebp, ds:strchr
		push	2Fh		; Val
		push	edi		; Str
		mov	dword ptr [esi+10h], 0FFFFFFFFh
		mov	[esi+14h], ebx
		mov	[esi+1Ch], edi
		call	ebp ; strchr
		add	esp, 8
		mov	[esi+8], eax
		test	eax, eax
		jnz	short loc_10018C10
		cmp	[esp+1Ch+arg_8], ebx
		jz	short loc_10018C15
		push	esi
		call	ldap_free_urldesc
		pop	ebp
		pop	edi
		pop	esi
		mov	eax, 2
		pop	ebx
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_10018C10:				; CODE XREF: sub_10018B20+D5j
		mov	[eax], bl
		inc	dword ptr [esi+8]

loc_10018C15:				; CODE XREF: sub_10018B20+DBj
		cmp	[edi], bl
		jz	short loc_10018C6D
		push	edi
		mov	[esi], edi
		call	sub_10018660
		push	20h		; Ch
		push	dword ptr [esi]	; Str
		call	ds:strrchr
		mov	edi, eax
		add	esp, 0Ch
		test	edi, edi
		jnz	short loc_10018C38
		mov	edi, [esi]
		jmp	short loc_10018C39
; ---------------------------------------------------------------------------

loc_10018C38:				; CODE XREF: sub_10018B20+112j
		inc	edi

loc_10018C39:				; CODE XREF: sub_10018B20+116j
		cmp	byte ptr [edi],	5Bh
		jnz	short loc_10018C4B
		push	5Dh		; Val
		push	edi		; Str
		call	ebp ; strchr
		add	esp, 8
		test	eax, eax
		cmovnz	edi, eax

loc_10018C4B:				; CODE XREF: sub_10018B20+11Cj
		push	3Ah		; Val
		push	edi		; Str
		call	ebp ; strchr
		add	esp, 8
		test	eax, eax
		jz	short loc_10018C6F
		mov	[eax], bl
		inc	eax
		push	eax		; Str
		call	ds:atoi
		mov	[esi+4], eax
		add	esp, 4
		mov	eax, [esi]
		cmp	[eax], bl
		jnz	short loc_10018C6F

loc_10018C6D:				; CODE XREF: sub_10018B20+F7j
		mov	[esi], ebx

loc_10018C6F:				; CODE XREF: sub_10018B20+135j
					; sub_10018B20+14Bj
		mov	eax, [esi+8]
		xor	edi, edi
		test	eax, eax
		jz	loc_10018D05
		push	3Fh		; Val
		push	eax		; Str
		call	ebp ; strchr
		mov	edi, eax
		add	esp, 8
		test	edi, edi
		jz	short loc_10018D05
		mov	[edi], bl
		inc	edi
		push	3Fh		; Val
		push	edi		; Str
		call	ebp ; strchr
		add	esp, 8
		test	eax, eax
		jz	short loc_10018D05
		lea	ebp, [eax+1]
		mov	[eax], bl
		push	3Fh		; Val
		push	ebp		; Str
		call	ds:strchr
		add	esp, 8
		test	eax, eax
		jz	short loc_10018CEB
		mov	[eax], bl
		inc	eax
		cmp	[eax], bl
		jz	short loc_10018CEB
		push	3Fh		; Val
		push	eax		; Str
		mov	[esi+14h], eax
		call	ds:strchr
		add	esp, 8
		test	eax, eax
		jz	short loc_10018CD1
		mov	[eax], bl
		lea	ebx, [eax+1]
		mov	[esp+1Ch+var_C], ebx

loc_10018CD1:				; CODE XREF: sub_10018B20+1A6j
		mov	eax, [esi+14h]
		cmp	byte ptr [eax],	0
		jnz	short loc_10018CE2
		mov	dword ptr [esi+14h], 0
		jmp	short loc_10018CEB
; ---------------------------------------------------------------------------

loc_10018CE2:				; CODE XREF: sub_10018B20+1B7j
		push	eax
		call	sub_10018660
		add	esp, 4

loc_10018CEB:				; CODE XREF: sub_10018B20+18Cj
					; sub_10018B20+193j ...
		push	offset aOne	; "one"
		push	ebp		; Str1
		call	ds:_stricmp
		add	esp, 8
		test	eax, eax
		jnz	short loc_10018D75
		mov	dword ptr [esi+10h], 1

loc_10018D05:				; CODE XREF: sub_10018B20+156j
					; sub_10018B20+168j ...
		mov	eax, [esi+8]
		test	eax, eax
		jz	short loc_10018D15
		push	eax
		call	sub_10018660
		add	esp, 4

loc_10018D15:				; CODE XREF: sub_10018B20+1EAj
		test	edi, edi
		jz	loc_10018E05
		cmp	byte ptr [edi],	0
		jz	loc_10018E05
		push	edi
		call	sub_10018660
		mov	al, [edi]
		add	esp, 4
		mov	ebp, 1
		mov	ecx, edi
		test	al, al
		jz	short loc_10018D4D
		lea	esp, [esp+0]

loc_10018D40:				; CODE XREF: sub_10018B20+22Bj
		cmp	al, 2Ch
		jnz	short loc_10018D45
		inc	ebp

loc_10018D45:				; CODE XREF: sub_10018B20+222j
		mov	al, [ecx+1]
		inc	ecx
		test	al, al
		jnz	short loc_10018D40

loc_10018D4D:				; CODE XREF: sub_10018B20+21Aj
		lea	eax, [ebp+1]
		push	4
		push	eax
		call	ldap_x_calloc
		add	esp, 8
		mov	[esi+0Ch], eax
		test	eax, eax
		jnz	short loc_10018DCC
		push	esi
		call	ldap_free_urldesc
		pop	ebp
		pop	edi
		pop	esi
		mov	eax, 4
		pop	ebx
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_10018D75:				; CODE XREF: sub_10018B20+1DCj
		push	offset aBase	; "base"
		push	ebp		; Str1
		call	ds:_stricmp
		add	esp, 8
		test	eax, eax
		jnz	short loc_10018D90
		mov	[esi+10h], eax
		jmp	loc_10018D05
; ---------------------------------------------------------------------------

loc_10018D90:				; CODE XREF: sub_10018B20+266j
		push	offset aSub	; "sub"
		push	ebp		; Str1
		call	ds:_stricmp
		add	esp, 8
		test	eax, eax
		jnz	short loc_10018DAF
		mov	dword ptr [esi+10h], 2
		jmp	loc_10018D05
; ---------------------------------------------------------------------------

loc_10018DAF:				; CODE XREF: sub_10018B20+281j
		cmp	byte ptr [ebp+0], 0
		jz	loc_10018D05
		push	esi
		call	ldap_free_urldesc
		pop	ebp
		pop	edi
		pop	esi
		mov	eax, 3
		pop	ebx
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_10018DCC:				; CODE XREF: sub_10018B20+240j
		test	ebp, ebp
		jle	short loc_10018E05
		xor	ebx, ebx

loc_10018DD2:				; CODE XREF: sub_10018B20+2DFj
		mov	eax, [esi+0Ch]
		push	2Ch		; Val
		push	edi		; Str
		mov	[eax+ebx*4], edi
		call	ds:strchr
		mov	edi, eax
		add	esp, 8
		test	edi, edi
		jz	short loc_10018DEE
		mov	byte ptr [edi],	0
		inc	edi

loc_10018DEE:				; CODE XREF: sub_10018B20+2C8j
		mov	ecx, [esi+0Ch]
		push	dword ptr [ecx+ebx*4]
		call	sub_10018660
		inc	ebx
		add	esp, 4
		cmp	ebx, ebp
		jl	short loc_10018DD2
		mov	ebx, [esp+1Ch+var_C]

loc_10018E05:				; CODE XREF: sub_10018B20+1F7j
					; sub_10018B20+200j ...
		test	ebx, ebx
		jz	short loc_10018E2E
		cmp	byte ptr [ebx],	0
		jz	short loc_10018E2E
		mov	eax, 1
		mov	ecx, eax

loc_10018E15:				; CODE XREF: sub_10018B20+30Cj
		test	eax, eax
		jz	short loc_10018E22
		cmp	byte ptr [ebx],	21h
		jz	short loc_10018E3E
		xor	eax, eax
		jmp	short loc_10018E28
; ---------------------------------------------------------------------------

loc_10018E22:				; CODE XREF: sub_10018B20+2F7j
		cmp	byte ptr [ebx],	2Ch
		cmovz	eax, ecx

loc_10018E28:				; CODE XREF: sub_10018B20+300j
		inc	ebx
		cmp	byte ptr [ebx],	0
		jnz	short loc_10018E15

loc_10018E2E:				; CODE XREF: sub_10018B20+2E7j
					; sub_10018B20+2ECj
		mov	eax, [esp+1Ch+arg_4]
		pop	ebp
		pop	edi
		mov	[eax], esi
		xor	eax, eax
		pop	esi
		pop	ebx
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_10018E3E:				; CODE XREF: sub_10018B20+2FCj
		push	esi
		call	ldap_free_urldesc
		pop	ebp
		pop	edi
		pop	esi
		mov	eax, 6
		pop	ebx
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------

loc_10018E51:				; CODE XREF: sub_10018B20+Ej
					; sub_10018B20+1Aj
		mov	eax, 5
		pop	ebx
		add	esp, 0Ch
		retn
sub_10018B20	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10018E60	proc near		; CODE XREF: ldap_is_ldap_url+18p
					; sub_10018B20+31p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi
		mov	esi, [esp+4+arg_0]
		mov	eax, [esi]
		test	eax, eax
		jnz	short loc_10018E6D
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10018E6D:				; CODE XREF: sub_10018E60+9j
		cmp	byte ptr [eax],	3Ch
		mov	eax, [esp+4+arg_4]
		jnz	short loc_10018E80
		mov	dword ptr [eax], 1
		inc	dword ptr [esi]
		jmp	short loc_10018E86
; ---------------------------------------------------------------------------

loc_10018E80:				; CODE XREF: sub_10018E60+14j
		mov	dword ptr [eax], 0

loc_10018E86:				; CODE XREF: sub_10018E60+1Ej
		mov	edx, [esi]
		mov	ecx, edx
		push	edi
		lea	edi, [ecx+1]
		mov	edi, edi

loc_10018E90:				; CODE XREF: sub_10018E60+35j
		mov	al, [ecx]
		inc	ecx
		test	al, al
		jnz	short loc_10018E90
		sub	ecx, edi
		mov	edi, ds:_strnicmp
		cmp	ecx, 4
		jb	short loc_10018EB8
		push	4		; MaxCount
		push	offset aUrl_0	; "URL:"
		push	edx		; Str1
		call	edi ; _strnicmp
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_10018EB8
		add	dword ptr [esi], 4

loc_10018EB8:				; CODE XREF: sub_10018E60+42j
					; sub_10018E60+53j
		mov	edx, [esi]
		mov	ecx, edx
		push	ebx
		lea	ebx, [ecx+1]

loc_10018EC0:				; CODE XREF: sub_10018E60+65j
		mov	al, [ecx]
		inc	ecx
		test	al, al
		jnz	short loc_10018EC0
		sub	ecx, ebx
		cmp	ecx, 7
		jb	short loc_10018EF5
		push	7		; MaxCount
		push	offset aLdap_0	; "ldap://"
		push	edx		; Str1
		call	edi ; _strnicmp
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_10018EF5
		mov	eax, [esp+0Ch+arg_8]
		add	dword ptr [esi], 7
		pop	ebx
		pop	edi
		mov	dword ptr [eax], 0
		mov	eax, 1
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10018EF5:				; CODE XREF: sub_10018E60+6Cj
					; sub_10018E60+7Dj
		mov	edx, [esi]
		mov	ecx, edx
		lea	ebx, [ecx+1]
		lea	esp, [esp+0]

loc_10018F00:				; CODE XREF: sub_10018E60+A5j
		mov	al, [ecx]
		inc	ecx
		test	al, al
		jnz	short loc_10018F00
		sub	ecx, ebx
		cmp	ecx, 8
		jb	short loc_10018F35
		push	8		; MaxCount
		push	offset aLdaps	; "ldaps://"
		push	edx		; Str1
		call	edi ; _strnicmp
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_10018F35
		mov	eax, [esp+0Ch+arg_8]
		add	dword ptr [esi], 8
		pop	ebx
		pop	edi
		mov	dword ptr [eax], 1
		mov	eax, 1
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_10018F35:				; CODE XREF: sub_10018E60+ACj
					; sub_10018E60+BDj
		pop	ebx
		pop	edi
		xor	eax, eax
		pop	esi
		retn
sub_10018E60	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 550. ldap_create_userstatus_control

; =============== S U B	R O U T	I N E =======================================


		public ldap_create_userstatus_control
ldap_create_userstatus_control proc near ; DATA	XREF: .rdata:off_10020938o

arg_0		= dword	ptr  4
arg_4		= byte ptr  8
arg_8		= dword	ptr  0Ch

		push	edi
		mov	edi, [esp+4+arg_0]
		test	edi, edi
		jz	short loc_10018F5B
		mov	eax, [esp+4+arg_8]
		test	eax, eax
		jnz	short loc_10018F64
		push	eax
		push	eax
		push	59h
		push	edi
		call	ldap_set_lderrno

loc_10018F5B:				; CODE XREF: ldap_create_userstatus_control+7j
		mov	eax, 59h
		pop	edi
		retn	0Ch
; ---------------------------------------------------------------------------

loc_10018F64:				; CODE XREF: ldap_create_userstatus_control+Fj
		push	esi
		push	eax		; int
		push	dword ptr [esp+0Ch+arg_4] ; char
		push	0		; int
		push	0		; Memory
		push	offset a1_3_6_1_4_1__2 ; "1.3.6.1.4.1.42.2.27.9.5.8"
		call	sub_100029E0
		add	esp, 14h
		mov	esi, eax
		push	0
		push	0
		push	esi
		push	edi
		call	ldap_set_lderrno
		mov	eax, esi
		pop	esi
		pop	edi
		retn	0Ch
ldap_create_userstatus_control endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 551. ldap_parse_userstatus_control

; =============== S U B	R O U T	I N E =======================================


		public ldap_parse_userstatus_control
ldap_parse_userstatus_control proc near	; DATA XREF: .rdata:off_10020938o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebp
		push	edi
		mov	edi, [esp+8+arg_0]
		test	edi, edi
		jz	loc_100191AC
		mov	ebp, [esp+8+arg_8]
		test	ebp, ebp
		jz	loc_100191AC
		push	ebx
		mov	ebx, [esp+0Ch+arg_4]
		test	ebx, ebx
		jnz	short loc_10018FC6
		push	ebx
		push	ebx
		push	5Dh
		push	edi
		call	ldap_set_lderrno
		lea	eax, [ebx+5Dh]
		pop	ebx
		pop	edi
		pop	ebp
		retn	0Ch
; ---------------------------------------------------------------------------

loc_10018FC6:				; CODE XREF: ldap_parse_userstatus_control+21j
		push	esi
		xor	ecx, ecx
		xor	esi, esi
		cmp	[ebx], ecx
		jz	loc_10019194

loc_10018FD3:				; CODE XREF: ldap_parse_userstatus_control+82j
		test	ecx, ecx
		jnz	short loc_1001901C
		mov	eax, [ebx+esi*4]
		mov	ecx, offset a1_3_6_1_4_1__2 ; "1.3.6.1.4.1.42.2.27.9.5.8"
		mov	eax, [eax]

loc_10018FE1:				; CODE XREF: ldap_parse_userstatus_control+6Bj
		mov	dl, [eax]
		cmp	dl, [ecx]
		jnz	short loc_10019001
		test	dl, dl
		jz	short loc_10018FFD
		mov	dl, [eax+1]
		cmp	dl, [ecx+1]
		jnz	short loc_10019001
		add	eax, 2
		add	ecx, 2
		test	dl, dl
		jnz	short loc_10018FE1

loc_10018FFD:				; CODE XREF: ldap_parse_userstatus_control+59j
		xor	eax, eax
		jmp	short loc_10019006
; ---------------------------------------------------------------------------

loc_10019001:				; CODE XREF: ldap_parse_userstatus_control+55j
					; ldap_parse_userstatus_control+61j
		sbb	eax, eax
		or	eax, 1

loc_10019006:				; CODE XREF: ldap_parse_userstatus_control+6Fj
		xor	ecx, ecx
		test	eax, eax
		setz	cl
		inc	esi
		cmp	dword ptr [ebx+esi*4], 0
		jnz	short loc_10018FD3
		test	ecx, ecx
		jz	loc_10019194

loc_1001901C:				; CODE XREF: ldap_parse_userstatus_control+45j
		mov	eax, [ebx+esi*4-4]
		add	eax, 4
		push	eax
		call	ber_init
		mov	esi, eax
		test	esi, esi
		jnz	short loc_10019043
		push	eax
		push	eax
		push	5Ah
		push	edi
		call	ldap_set_lderrno
		lea	eax, [esi+5Ah]
		pop	esi
		pop	ebx
		pop	edi
		pop	ebp
		retn	0Ch
; ---------------------------------------------------------------------------

loc_10019043:				; CODE XREF: ldap_parse_userstatus_control+9Dj
		lea	eax, [esp+10h+arg_0]
		xorps	xmm0, xmm0
		push	eax
		movdqu	xmmword	ptr [ebp+0], xmm0
		push	offset aT_0	; "t"
		movq	qword ptr [ebp+10h], xmm0
		push	esi		; Dst
		mov	dword ptr [ebp+18h], 0
		call	ber_scanf
		add	esp, 0Ch
		cmp	eax, 0FFFFFFFFh
		jz	short loc_100190A1 ; jumptable 1001910C	default	case
		mov	eax, [esp+10h+arg_0]
		shr	eax, 5
		and	eax, 1
		mov	[esp+10h+arg_0], eax
		jnz	short loc_100190C1
		lea	eax, [ebp+4]
		mov	dword ptr [ebp+0], 1
		push	eax
		push	offset aI_1	; "i"
		push	esi		; Dst
		call	ber_scanf
		add	esp, 0Ch
		cmp	eax, 0FFFFFFFFh
		jnz	loc_10019183

loc_100190A1:				; CODE XREF: ldap_parse_userstatus_control+DDj
					; ldap_parse_userstatus_control+156j ...
		push	0		; jumptable 1001910C default case
		push	0
		push	54h
		push	edi
		call	ldap_set_lderrno
		push	1		; int
		push	esi		; Memory
		call	ber_free
		pop	esi
		pop	ebx
		pop	edi
		mov	eax, 54h
		pop	ebp
		retn	0Ch
; ---------------------------------------------------------------------------

loc_100190C1:				; CODE XREF: ldap_parse_userstatus_control+EDj
		lea	eax, [esp+10h+arg_0]
		mov	dword ptr [ebp+0], 0
		push	eax
		push	offset aT_1	; "{t"
		push	esi		; Dst
		mov	[esp+1Ch+arg_0], 0
		call	ber_scanf
		add	esp, 0Ch
		cmp	eax, 0FFFFFFFFh
		jz	short loc_100190A1 ; jumptable 1001910C	default	case
		mov	eax, [esp+10h+arg_0]
		cmp	eax, 0FFFFFFFFh
		jz	loc_10019183

loc_100190F5:				; CODE XREF: ldap_parse_userstatus_control+1EDj
		cmp	eax, 0FFFFFFFEh
		jz	loc_10019183
		and	eax, 0FFFFFF7Fh
		mov	[esp+10h+arg_0], eax
		cmp	eax, 4		; switch 5 cases
		ja	short loc_100190A1 ; jumptable 1001910C	default	case
		jmp	ds:off_100191B8[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_10019113:				; CODE XREF: ldap_parse_userstatus_control+17Cj
					; DATA XREF: .text:off_100191B8o
		lea	ebx, [ebp+8]	; jumptable 1001910C case 0

loc_10019116:				; CODE XREF: ldap_parse_userstatus_control+1ACj
					; ldap_parse_userstatus_control+1B1j
		push	ebx
		push	offset aB	; "b"
		push	esi		; Dst
		call	ber_scanf
		add	esp, 0Ch
		cmp	eax, 0FFFFFFFFh
		jz	loc_100190A1	; jumptable 1001910C default case
		xor	eax, eax
		cmp	[ebx], eax
		setnz	al
		mov	[ebx], eax
		jmp	short loc_10019163
; ---------------------------------------------------------------------------

loc_10019139:				; CODE XREF: ldap_parse_userstatus_control+17Cj
					; DATA XREF: .text:off_100191B8o
		lea	ebx, [ebp+0Ch]	; jumptable 1001910C case 1
		jmp	short loc_10019116
; ---------------------------------------------------------------------------

loc_1001913E:				; CODE XREF: ldap_parse_userstatus_control+17Cj
					; DATA XREF: .text:off_100191B8o
		lea	ebx, [ebp+10h]	; jumptable 1001910C case 2
		jmp	short loc_10019116
; ---------------------------------------------------------------------------

loc_10019143:				; CODE XREF: ldap_parse_userstatus_control+17Cj
					; DATA XREF: .text:off_100191B8o
		lea	eax, [ebp+14h]	; jumptable 1001910C case 3
		jmp	short loc_1001914B
; ---------------------------------------------------------------------------

loc_10019148:				; CODE XREF: ldap_parse_userstatus_control+17Cj
					; DATA XREF: .text:off_100191B8o
		lea	eax, [ebp+18h]	; jumptable 1001910C case 4

loc_1001914B:				; CODE XREF: ldap_parse_userstatus_control+1B6j
		push	eax
		push	offset aI_1	; "i"
		push	esi		; Dst
		call	ber_scanf
		add	esp, 0Ch
		cmp	eax, 0FFFFFFFFh
		jz	loc_100190A1	; jumptable 1001910C default case

loc_10019163:				; CODE XREF: ldap_parse_userstatus_control+1A7j
		lea	eax, [esp+10h+arg_0]
		push	eax
		push	offset aT_0	; "t"
		push	esi		; Dst
		call	ber_scanf
		mov	eax, [esp+1Ch+arg_0]
		add	esp, 0Ch
		cmp	eax, 0FFFFFFFFh
		jnz	loc_100190F5

loc_10019183:				; CODE XREF: ldap_parse_userstatus_control+10Bj
					; ldap_parse_userstatus_control+15Fj ...
		push	1		; int
		push	esi		; Memory
		call	ber_free
		pop	esi
		pop	ebx
		pop	edi
		xor	eax, eax
		pop	ebp
		retn	0Ch
; ---------------------------------------------------------------------------

loc_10019194:				; CODE XREF: ldap_parse_userstatus_control+3Dj
					; ldap_parse_userstatus_control+86j
		push	0
		push	0
		push	5Dh
		push	edi
		call	ldap_set_lderrno
		pop	esi
		pop	ebx
		pop	edi
		mov	eax, 5Dh
		pop	ebp
		retn	0Ch
; ---------------------------------------------------------------------------

loc_100191AC:				; CODE XREF: ldap_parse_userstatus_control+8j
					; ldap_parse_userstatus_control+14j
		pop	edi
		mov	eax, 59h
		pop	ebp
		retn	0Ch
ldap_parse_userstatus_control endp

; ---------------------------------------------------------------------------
		align 4
off_100191B8	dd offset loc_10019113	; DATA XREF: ldap_parse_userstatus_control+17Cr
		dd offset loc_10019139	; jump table for switch	statement
		dd offset loc_1001913E
		dd offset loc_10019143
		dd offset loc_10019148
		align 10h
; Exported entry 478. ldap_utf8characters

; =============== S U B	R O U T	I N E =======================================


		public ldap_utf8characters
ldap_utf8characters proc near		; CODE XREF: sub_10017040+45p
					; DATA XREF: .rdata:off_10020938o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		xor	edx, edx
		cmp	[eax], dl
		jz	short loc_10019242
		lea	ebx, [ebx+0]

loc_100191E0:				; CODE XREF: ldap_utf8characters+70j
		mov	cl, [eax]
		inc	edx
		test	cl, cl
		jns	short loc_1001923C ; jumptable 100191F9	case 1
		movzx	ecx, cl
		shr	ecx, 2
		movsx	ecx, byte_100248C8[ecx]
		cmp	ecx, 6		; switch 7 cases
		ja	short loc_1001923D ; jumptable 100191F9	default	case
		jmp	ds:off_10019248[ecx*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_10019200:				; CODE XREF: ldap_utf8characters+29j
					; DATA XREF: .text:off_10019248o
		mov	cl, [eax+1]	; jumptable 100191F9 cases 0,6
		inc	eax
		and	cl, 0C0h
		cmp	cl, 80h
		jnz	short loc_1001923D ; jumptable 100191F9	default	case

loc_1001920C:				; CODE XREF: ldap_utf8characters+29j
					; DATA XREF: .text:off_10019248o
		mov	cl, [eax+1]	; jumptable 100191F9 case 5
		inc	eax
		and	cl, 0C0h
		cmp	cl, 80h
		jnz	short loc_1001923D ; jumptable 100191F9	default	case

loc_10019218:				; CODE XREF: ldap_utf8characters+29j
					; DATA XREF: .text:off_10019248o
		mov	cl, [eax+1]	; jumptable 100191F9 case 4
		inc	eax
		and	cl, 0C0h
		cmp	cl, 80h
		jnz	short loc_1001923D ; jumptable 100191F9	default	case

loc_10019224:				; CODE XREF: ldap_utf8characters+29j
					; DATA XREF: .text:off_10019248o
		mov	cl, [eax+1]	; jumptable 100191F9 case 3
		inc	eax
		and	cl, 0C0h
		cmp	cl, 80h
		jnz	short loc_1001923D ; jumptable 100191F9	default	case

loc_10019230:				; CODE XREF: ldap_utf8characters+29j
					; DATA XREF: .text:off_10019248o
		mov	cl, [eax+1]	; jumptable 100191F9 case 2
		inc	eax
		and	cl, 0C0h
		cmp	cl, 80h
		jnz	short loc_1001923D ; jumptable 100191F9	default	case

loc_1001923C:				; CODE XREF: ldap_utf8characters+15j
					; ldap_utf8characters+29j
					; DATA XREF: ...
		inc	eax		; jumptable 100191F9 case 1

loc_1001923D:				; CODE XREF: ldap_utf8characters+27j
					; ldap_utf8characters+3Aj ...
		cmp	byte ptr [eax],	0 ; jumptable 100191F9 default case
		jnz	short loc_100191E0

loc_10019242:				; CODE XREF: ldap_utf8characters+8j
		mov	eax, edx
		retn	4
ldap_utf8characters endp

; ---------------------------------------------------------------------------
		align 4
off_10019248	dd offset loc_10019200	; DATA XREF: ldap_utf8characters+29r
		dd offset loc_1001923C	; jump table for switch	statement
		dd offset loc_10019230
		dd offset loc_10019224
		dd offset loc_10019218
		dd offset loc_1001920C
		dd offset loc_10019200
		align 10h
; Exported entry 477. ldap_utf8copy

; =============== S U B	R O U T	I N E =======================================


		public ldap_utf8copy
ldap_utf8copy	proc near		; CODE XREF: ldap_dn2ufn+ADp
					; ldap_dn2ufn+1F2p
					; DATA XREF: ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	edi
		mov	edi, [esp+4+arg_4]
		mov	edx, edi
		mov	cl, [edi]
		movzx	eax, cl
		shr	eax, 2
		movsx	eax, byte_100248C8[eax]
		cmp	eax, 6		; switch 7 cases
		ja	loc_10019319	; jumptable 10019290 default case
		push	esi
		jmp	ds:off_10019324[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_10019297:				; CODE XREF: ldap_utf8copy+20j
					; DATA XREF: .text:off_10019324o
		mov	esi, [esp+8+arg_0] ; jumptable 10019290	cases 0,6
		lea	edx, [edi+1]
		mov	[esi], cl
		inc	esi
		mov	al, [edx]
		and	al, 0C0h
		cmp	al, 80h
		jnz	short loc_10019318
		jmp	short loc_100192AF
; ---------------------------------------------------------------------------

loc_100192AB:				; CODE XREF: ldap_utf8copy+20j
					; DATA XREF: .text:off_10019324o
		mov	esi, [esp+8+arg_0] ; jumptable 10019290	case 5

loc_100192AF:				; CODE XREF: ldap_utf8copy+39j
		movzx	eax, byte ptr [edx]
		inc	edx
		mov	[esi], al
		inc	esi
		movzx	eax, byte ptr [edx]
		and	al, 0C0h
		cmp	al, 80h
		jnz	short loc_10019318
		jmp	short loc_100192C5
; ---------------------------------------------------------------------------

loc_100192C1:				; CODE XREF: ldap_utf8copy+20j
					; DATA XREF: .text:off_10019324o
		mov	esi, [esp+8+arg_0] ; jumptable 10019290	case 4

loc_100192C5:				; CODE XREF: ldap_utf8copy+4Fj
		movzx	eax, byte ptr [edx]
		inc	edx
		mov	[esi], al
		inc	esi
		movzx	eax, byte ptr [edx]
		and	al, 0C0h
		cmp	al, 80h
		jnz	short loc_10019318
		jmp	short loc_100192DB
; ---------------------------------------------------------------------------

loc_100192D7:				; CODE XREF: ldap_utf8copy+20j
					; DATA XREF: .text:off_10019324o
		mov	esi, [esp+8+arg_0] ; jumptable 10019290	case 3

loc_100192DB:				; CODE XREF: ldap_utf8copy+65j
		movzx	eax, byte ptr [edx]
		inc	edx
		mov	[esi], al
		inc	esi
		movzx	eax, byte ptr [edx]
		and	al, 0C0h
		cmp	al, 80h
		jnz	short loc_10019318
		jmp	short loc_100192F1
; ---------------------------------------------------------------------------

loc_100192ED:				; CODE XREF: ldap_utf8copy+20j
					; DATA XREF: .text:off_10019324o
		mov	esi, [esp+8+arg_0] ; jumptable 10019290	case 2

loc_100192F1:				; CODE XREF: ldap_utf8copy+7Bj
		movzx	eax, byte ptr [edx]
		inc	edx
		mov	[esi], al
		inc	esi
		movzx	eax, byte ptr [edx]
		and	al, 0C0h
		cmp	al, 80h
		jnz	short loc_10019318
		mov	cl, [edx]
		inc	edx
		mov	[esi], cl
		sub	edx, edi
		pop	esi
		mov	eax, edx
		pop	edi
		retn	8
; ---------------------------------------------------------------------------

loc_1001930F:				; CODE XREF: ldap_utf8copy+20j
					; DATA XREF: .text:off_10019324o
		mov	esi, [esp+8+arg_0] ; jumptable 10019290	case 1
		mov	cl, [edx]
		inc	edx
		mov	[esi], cl

loc_10019318:				; CODE XREF: ldap_utf8copy+37j
					; ldap_utf8copy+4Dj ...
		pop	esi

loc_10019319:				; CODE XREF: ldap_utf8copy+19j
		sub	edx, edi	; jumptable 10019290 default case
		mov	eax, edx
		pop	edi
		retn	8
ldap_utf8copy	endp

; ---------------------------------------------------------------------------
		align 4
off_10019324	dd offset loc_10019297	; DATA XREF: ldap_utf8copy+20r
		dd offset loc_1001930F	; jump table for switch	statement
		dd offset loc_100192ED
		dd offset loc_100192D7
		dd offset loc_100192C1
		dd offset loc_100192AB
		dd offset loc_10019297
; Exported entry 499. ldap_utf8getcc

; =============== S U B	R O U T	I N E =======================================


		public ldap_utf8getcc
ldap_utf8getcc	proc near		; CODE XREF: ldap_utf8strtok_r+30p
					; ldap_utf8strtok_r+5Bp ...

arg_0		= dword	ptr  4

		push	esi
		push	edi
		mov	edi, [esp+8+arg_0]
		xor	edx, edx
		mov	esi, [edi]
		movzx	ecx, byte ptr [esi]
		mov	eax, ecx
		shr	eax, 2
		movsx	eax, byte_100248C8[eax]
		cmp	eax, 6		; switch 7 cases
		ja	loc_10019411	; jumptable 10019362 default case
		jmp	ds:off_1001941C[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_10019369:				; CODE XREF: ldap_utf8getcc+22j
					; DATA XREF: .text:off_1001941Co
		mov	edx, ecx	; jumptable 10019362 case 0
		and	edx, 3Fh
		jmp	short loc_1001939D
; ---------------------------------------------------------------------------

loc_10019370:				; CODE XREF: ldap_utf8getcc+22j
					; DATA XREF: .text:off_1001941Co
		inc	esi		; jumptable 10019362 case 1
		mov	edx, ecx
		mov	[edi], esi
		mov	eax, edx
		pop	edi
		pop	esi
		retn	4
; ---------------------------------------------------------------------------

loc_1001937C:				; CODE XREF: ldap_utf8getcc+22j
					; DATA XREF: .text:off_1001941Co
		mov	edx, ecx	; jumptable 10019362 case 2
		and	edx, 1Fh
		jmp	short loc_100193F9
; ---------------------------------------------------------------------------

loc_10019383:				; CODE XREF: ldap_utf8getcc+22j
					; DATA XREF: .text:off_1001941Co
		mov	edx, ecx	; jumptable 10019362 case 3
		and	edx, 0Fh
		jmp	short loc_100193E2
; ---------------------------------------------------------------------------

loc_1001938A:				; CODE XREF: ldap_utf8getcc+22j
					; DATA XREF: .text:off_1001941Co
		mov	edx, ecx	; jumptable 10019362 case 4
		and	edx, 7
		jmp	short loc_100193CB
; ---------------------------------------------------------------------------

loc_10019391:				; CODE XREF: ldap_utf8getcc+22j
					; DATA XREF: .text:off_1001941Co
		mov	edx, ecx	; jumptable 10019362 case 5
		and	edx, 3
		jmp	short loc_100193B4
; ---------------------------------------------------------------------------

loc_10019398:				; CODE XREF: ldap_utf8getcc+22j
					; DATA XREF: .text:off_1001941Co
		mov	edx, ecx	; jumptable 10019362 case 6
		and	edx, 1

loc_1001939D:				; CODE XREF: ldap_utf8getcc+2Ej
		mov	cl, [esi+1]
		inc	esi
		mov	al, cl
		and	al, 0C0h
		cmp	al, 80h
		jnz	short loc_10019411 ; jumptable 10019362	default	case
		movzx	eax, cl
		and	eax, 3Fh
		shl	edx, 6
		or	edx, eax

loc_100193B4:				; CODE XREF: ldap_utf8getcc+56j
		mov	cl, [esi+1]
		inc	esi
		mov	al, cl
		and	al, 0C0h
		cmp	al, 80h
		jnz	short loc_10019411 ; jumptable 10019362	default	case
		movzx	eax, cl
		and	eax, 3Fh
		shl	edx, 6
		or	edx, eax

loc_100193CB:				; CODE XREF: ldap_utf8getcc+4Fj
		mov	cl, [esi+1]
		inc	esi
		mov	al, cl
		and	al, 0C0h
		cmp	al, 80h
		jnz	short loc_10019411 ; jumptable 10019362	default	case
		movzx	eax, cl
		and	eax, 3Fh
		shl	edx, 6
		or	edx, eax

loc_100193E2:				; CODE XREF: ldap_utf8getcc+48j
		mov	cl, [esi+1]
		inc	esi
		mov	al, cl
		and	al, 0C0h
		cmp	al, 80h
		jnz	short loc_10019411 ; jumptable 10019362	default	case
		movzx	eax, cl
		and	eax, 3Fh
		shl	edx, 6
		or	edx, eax

loc_100193F9:				; CODE XREF: ldap_utf8getcc+41j
		mov	cl, [esi+1]
		inc	esi
		mov	al, cl
		and	al, 0C0h
		cmp	al, 80h
		jnz	short loc_10019411 ; jumptable 10019362	default	case
		movzx	ecx, cl
		and	ecx, 3Fh
		shl	edx, 6
		or	edx, ecx
		inc	esi

loc_10019411:				; CODE XREF: ldap_utf8getcc+1Cj
					; ldap_utf8getcc+67j ...
		mov	[edi], esi	; jumptable 10019362 default case
		mov	eax, edx
		pop	edi
		pop	esi
		retn	4
ldap_utf8getcc	endp

; ---------------------------------------------------------------------------
		align 4
off_1001941C	dd offset loc_10019369	; DATA XREF: ldap_utf8getcc+22r
		dd offset loc_10019370	; jump table for switch	statement
		dd offset loc_1001937C
		dd offset loc_10019383
		dd offset loc_1001938A
		dd offset loc_10019391
		dd offset loc_10019398
		align 10h
; Exported entry 480. ldap_utf8isalnum

; =============== S U B	R O U T	I N E =======================================


		public ldap_utf8isalnum
ldap_utf8isalnum proc near		; DATA XREF: .rdata:off_10020938o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	cl, [eax]
		test	cl, cl
		jns	short loc_1001944F
		xor	eax, eax
		retn	4
; ---------------------------------------------------------------------------

loc_1001944F:				; CODE XREF: ldap_utf8isalnum+8j
		lea	eax, [ecx-41h]
		cmp	al, 19h
		ja	short loc_1001945E

loc_10019456:				; CODE XREF: ldap_utf8isalnum+23j
		mov	eax, 1
		retn	4
; ---------------------------------------------------------------------------

loc_1001945E:				; CODE XREF: ldap_utf8isalnum+14j
		lea	eax, [ecx-61h]
		cmp	al, 19h
		jbe	short loc_10019456
		sub	cl, 30h
		mov	al, 9
		cmp	al, cl
		sbb	eax, eax
		inc	eax
		retn	4
ldap_utf8isalnum endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 481. ldap_utf8isalpha

; =============== S U B	R O U T	I N E =======================================


		public ldap_utf8isalpha
ldap_utf8isalpha proc near		; DATA XREF: .rdata:off_10020938o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	cl, [eax]
		test	cl, cl
		jns	short loc_1001948F
		xor	eax, eax
		retn	4
; ---------------------------------------------------------------------------

loc_1001948F:				; CODE XREF: ldap_utf8isalpha+8j
		lea	eax, [ecx-41h]
		cmp	al, 19h
		ja	short loc_1001949E
		mov	eax, 1
		retn	4
; ---------------------------------------------------------------------------

loc_1001949E:				; CODE XREF: ldap_utf8isalpha+14j
		sub	cl, 61h
		mov	al, 19h
		cmp	al, cl
		sbb	eax, eax
		inc	eax
		retn	4
ldap_utf8isalpha endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 482. ldap_utf8isdigit

; =============== S U B	R O U T	I N E =======================================


		public ldap_utf8isdigit
ldap_utf8isdigit proc near		; CODE XREF: ldap_create_filter+10Bp
					; ldap_create_filter+132p
					; DATA XREF: ...

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	al, [eax]
		test	al, al
		jns	short loc_100194BF
		xor	eax, eax
		retn	4
; ---------------------------------------------------------------------------

loc_100194BF:				; CODE XREF: ldap_utf8isdigit+8j
		sub	al, 30h
		mov	cl, 9
		cmp	cl, al
		sbb	eax, eax
		inc	eax
		retn	4
ldap_utf8isdigit endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 484. ldap_utf8isspace

; =============== S U B	R O U T	I N E =======================================


		public ldap_utf8isspace
ldap_utf8isspace proc near		; CODE XREF: sub_100043B0+14p
					; sub_100043B0+22p ...

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		push	esi
		call	ldap_utf8next
		sub	eax, esi
		jz	loc_10019564
		cmp	eax, 1
		jnz	short loc_100194FF
		mov	al, [esi]
		cmp	al, 9
		jb	short loc_10019564
		cmp	al, 0Dh
		jbe	short loc_100194F6
		cmp	al, 20h
		jnz	short loc_10019564

loc_100194F6:				; CODE XREF: ldap_utf8isspace+20j
					; ldap_utf8isspace+92j
		mov	eax, 1
		pop	esi
		retn	4
; ---------------------------------------------------------------------------

loc_100194FF:				; CODE XREF: ldap_utf8isspace+16j
		cmp	eax, 2
		jnz	short loc_10019516
		cmp	byte ptr [esi],	0C2h
		jnz	short loc_10019564
		xor	eax, eax
		cmp	byte ptr [esi+1], 80h
		pop	esi
		setz	al
		retn	4
; ---------------------------------------------------------------------------

loc_10019516:				; CODE XREF: ldap_utf8isspace+32j
		cmp	eax, 3
		jnz	short loc_10019564
		mov	al, [esi]
		cmp	al, 0E2h
		jnz	short loc_1001953B
		cmp	byte ptr [esi+1], 80h
		jnz	short loc_10019564
		mov	al, [esi+2]
		cmp	al, 80h
		jb	short loc_10019564
		cmp	al, 8Ah
		ja	short loc_10019564
		mov	eax, 1
		pop	esi
		retn	4
; ---------------------------------------------------------------------------

loc_1001953B:				; CODE XREF: ldap_utf8isspace+4Fj
		cmp	al, 0E3h
		jnz	short loc_10019554
		cmp	byte ptr [esi+1], 80h
		jnz	short loc_10019564
		cmp	byte ptr [esi+2], 80h
		jnz	short loc_10019564
		mov	eax, 1
		pop	esi
		retn	4
; ---------------------------------------------------------------------------

loc_10019554:				; CODE XREF: ldap_utf8isspace+6Dj
		cmp	al, 0EFh
		jnz	short loc_10019564
		cmp	byte ptr [esi+1], 0BBh
		jnz	short loc_10019564
		cmp	byte ptr [esi+2], 0BFh
		jz	short loc_100194F6

loc_10019564:				; CODE XREF: ldap_utf8isspace+Dj
					; ldap_utf8isspace+1Cj	...
		xor	eax, eax
		pop	esi
		retn	4
ldap_utf8isspace endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 483. ldap_utf8isxdigit

; =============== S U B	R O U T	I N E =======================================


		public ldap_utf8isxdigit
ldap_utf8isxdigit proc near		; CODE XREF: sub_10006350+110p
					; sub_10006350+11Dp
					; DATA XREF: ...

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	cl, [eax]
		test	cl, cl
		jns	short loc_1001957F
		xor	eax, eax
		retn	4
; ---------------------------------------------------------------------------

loc_1001957F:				; CODE XREF: ldap_utf8isxdigit+8j
		lea	eax, [ecx-30h]
		cmp	al, 9
		ja	short loc_1001958E

loc_10019586:				; CODE XREF: ldap_utf8isxdigit+23j
		mov	eax, 1
		retn	4
; ---------------------------------------------------------------------------

loc_1001958E:				; CODE XREF: ldap_utf8isxdigit+14j
		lea	eax, [ecx-41h]
		cmp	al, 5
		jbe	short loc_10019586
		sub	cl, 61h
		mov	al, 5
		cmp	al, cl
		sbb	eax, eax
		inc	eax
		retn	4
ldap_utf8isxdigit endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 474. ldap_utf8len

; =============== S U B	R O U T	I N E =======================================


		public ldap_utf8len
ldap_utf8len	proc near		; CODE XREF: sub_10005B60+8Dp
					; sub_10005B60+279p
					; DATA XREF: ...

arg_0		= dword	ptr  4

		push	[esp+arg_0]
		call	ldap_utf8next
		sub	eax, [esp+arg_0]
		retn	4
ldap_utf8len	endp

; Exported entry 475. ldap_utf8next

; =============== S U B	R O U T	I N E =======================================


		public ldap_utf8next
ldap_utf8next	proc near		; CODE XREF: ldap_dn2ufn+136p
					; ldap_utf8isspace+6p ...

arg_0		= dword	ptr  4

		mov	edx, [esp+arg_0]
		movzx	eax, byte ptr [edx]
		shr	eax, 2
		movsx	eax, byte_100248C8[eax]
		cmp	eax, 6		; switch 7 cases
		ja	short loc_10019612 ; jumptable 100195D6	default	case
		jmp	ds:off_10019618[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_100195DD:				; CODE XREF: ldap_utf8next+16j
					; DATA XREF: .text:off_10019618o
		mov	al, [edx+1]	; jumptable 100195D6 cases 0,6
		inc	edx
		and	al, 0C0h
		cmp	al, 80h
		jnz	short loc_10019612 ; jumptable 100195D6	default	case

loc_100195E7:				; CODE XREF: ldap_utf8next+16j
					; DATA XREF: .text:off_10019618o
		mov	al, [edx+1]	; jumptable 100195D6 case 5
		inc	edx
		and	al, 0C0h
		cmp	al, 80h
		jnz	short loc_10019612 ; jumptable 100195D6	default	case

loc_100195F1:				; CODE XREF: ldap_utf8next+16j
					; DATA XREF: .text:off_10019618o
		mov	al, [edx+1]	; jumptable 100195D6 case 4
		inc	edx
		and	al, 0C0h
		cmp	al, 80h
		jnz	short loc_10019612 ; jumptable 100195D6	default	case

loc_100195FB:				; CODE XREF: ldap_utf8next+16j
					; DATA XREF: .text:off_10019618o
		mov	al, [edx+1]	; jumptable 100195D6 case 3
		inc	edx
		and	al, 0C0h
		cmp	al, 80h
		jnz	short loc_10019612 ; jumptable 100195D6	default	case

loc_10019605:				; CODE XREF: ldap_utf8next+16j
					; DATA XREF: .text:off_10019618o
		mov	cl, [edx+1]	; jumptable 100195D6 case 2
		inc	edx
		and	cl, 0C0h
		cmp	cl, 80h
		jnz	short loc_10019612 ; jumptable 100195D6	default	case

loc_10019611:				; CODE XREF: ldap_utf8next+16j
					; DATA XREF: .text:off_10019618o
		inc	edx		; jumptable 100195D6 case 1

loc_10019612:				; CODE XREF: ldap_utf8next+14j
					; ldap_utf8next+25j ...
		mov	eax, edx	; jumptable 100195D6 default case
		retn	4
ldap_utf8next	endp

; ---------------------------------------------------------------------------
		align 4
off_10019618	dd offset loc_100195DD	; DATA XREF: ldap_utf8next+16r
		dd offset loc_10019611	; jump table for switch	statement
		dd offset loc_10019605
		dd offset loc_100195FB
		dd offset loc_100195F1
		dd offset loc_100195E7
		dd offset loc_100195DD
		align 10h
; Exported entry 476. ldap_utf8prev

; =============== S U B	R O U T	I N E =======================================


		public ldap_utf8prev
ldap_utf8prev	proc near		; CODE XREF: ldap_dn2ufn+F4p
					; ldap_dn2ufn+11Fp
					; DATA XREF: ...

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		lea	edx, [eax-6]

loc_10019647:				; CODE XREF: ldap_utf8prev+15j
		mov	cl, [eax-1]
		dec	eax
		and	cl, 0C0h
		cmp	cl, 80h
		jnz	short locret_10019657
		cmp	eax, edx
		jnz	short loc_10019647

locret_10019657:			; CODE XREF: ldap_utf8prev+11j
		retn	4
ldap_utf8prev	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 479. ldap_utf8strtok_r

; =============== S U B	R O U T	I N E =======================================


		public ldap_utf8strtok_r
ldap_utf8strtok_r proc near		; CODE XREF: sub_10006270+2Fp
					; sub_10006270+6Ap
					; DATA XREF: ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		mov	ebx, [esp+4+arg_8]
		push	esi
		mov	esi, [esp+8+arg_0]
		test	esi, esi
		jnz	short loc_1001967F
		mov	esi, [ebx]
		mov	[esp+8+arg_0], esi
		test	esi, esi
		jnz	short loc_1001967F
		pop	esi
		xor	eax, eax
		pop	ebx
		retn	0Ch
; ---------------------------------------------------------------------------

loc_1001967F:				; CODE XREF: ldap_utf8strtok_r+Cj
					; ldap_utf8strtok_r+16j
		push	ebp
		mov	ebp, [esp+0Ch+arg_4]
		push	edi

loc_10019685:				; CODE XREF: ldap_utf8strtok_r+76j
		mov	al, [esi]
		test	al, al
		jns	short loc_1001969D
		lea	eax, [esp+10h+arg_0]
		push	eax
		call	ldap_utf8getcc
		mov	esi, [esp+10h+arg_0]
		mov	edi, eax
		jmp	short loc_100196A5
; ---------------------------------------------------------------------------

loc_1001969D:				; CODE XREF: ldap_utf8strtok_r+29j
		inc	esi
		movsx	edi, al
		mov	[esp+10h+arg_0], esi

loc_100196A5:				; CODE XREF: ldap_utf8strtok_r+3Bj
		mov	ecx, ebp
		mov	[esp+10h+arg_4], ecx
		jmp	short loc_100196B0
; ---------------------------------------------------------------------------
		align 10h

loc_100196B0:				; CODE XREF: ldap_utf8strtok_r+4Bj
					; ldap_utf8strtok_r+74j
		mov	al, [ecx]
		test	al, al
		jns	short loc_100196C6
		lea	eax, [esp+10h+arg_4]
		push	eax
		call	ldap_utf8getcc
		mov	ecx, [esp+10h+arg_4]
		jmp	short loc_100196CE
; ---------------------------------------------------------------------------

loc_100196C6:				; CODE XREF: ldap_utf8strtok_r+54j
		inc	ecx
		movsx	eax, al
		mov	[esp+10h+arg_4], ecx

loc_100196CE:				; CODE XREF: ldap_utf8strtok_r+64j
		test	eax, eax
		jz	short loc_100196D8
		cmp	edi, eax
		jnz	short loc_100196B0
		jmp	short loc_10019685
; ---------------------------------------------------------------------------

loc_100196D8:				; CODE XREF: ldap_utf8strtok_r+70j
		test	edi, edi
		jnz	short loc_100196E7
		mov	[ebx], edi
		xor	eax, eax
		pop	edi
		pop	ebp
		pop	esi
		pop	ebx
		retn	0Ch
; ---------------------------------------------------------------------------

loc_100196E7:				; CODE XREF: ldap_utf8strtok_r+7Aj
		mov	ebx, esi
		lea	ecx, [esi-6]
		lea	esp, [esp+0]

loc_100196F0:				; CODE XREF: ldap_utf8strtok_r+9Cj
		mov	al, [ebx-1]
		dec	ebx
		and	al, 0C0h
		cmp	al, 80h
		jnz	short loc_10019700
		cmp	ebx, ecx
		jnz	short loc_100196F0
		mov	edi, edi

loc_10019700:				; CODE XREF: ldap_utf8strtok_r+98j
					; ldap_utf8strtok_r+EEj
		mov	al, [esi]
		test	al, al
		jns	short loc_10019718
		lea	eax, [esp+10h+arg_0]
		push	eax
		call	ldap_utf8getcc
		mov	esi, [esp+10h+arg_0]
		mov	edi, eax
		jmp	short loc_10019720
; ---------------------------------------------------------------------------

loc_10019718:				; CODE XREF: ldap_utf8strtok_r+A4j
		inc	esi
		movsx	edi, al
		mov	[esp+10h+arg_0], esi

loc_10019720:				; CODE XREF: ldap_utf8strtok_r+B6j
		mov	eax, ebp
		mov	[esp+10h+arg_4], eax

loc_10019726:				; CODE XREF: ldap_utf8strtok_r+ECj
		mov	cl, [eax]
		test	cl, cl
		jns	short loc_1001973E
		lea	eax, [esp+10h+arg_4]
		push	eax
		call	ldap_utf8getcc
		mov	ecx, eax
		mov	eax, [esp+10h+arg_4]
		jmp	short loc_10019746
; ---------------------------------------------------------------------------

loc_1001973E:				; CODE XREF: ldap_utf8strtok_r+CAj
		inc	eax
		movsx	ecx, cl
		mov	[esp+10h+arg_4], eax

loc_10019746:				; CODE XREF: ldap_utf8strtok_r+DCj
		cmp	ecx, edi
		jz	short loc_10019750
		test	ecx, ecx
		jnz	short loc_10019726
		jmp	short loc_10019700
; ---------------------------------------------------------------------------

loc_10019750:				; CODE XREF: ldap_utf8strtok_r+E8j
		mov	eax, [esp+10h+arg_8]
		test	edi, edi
		jnz	short loc_10019763
		mov	[eax], edi
		mov	eax, ebx
		pop	edi
		pop	ebp
		pop	esi
		pop	ebx
		retn	0Ch
; ---------------------------------------------------------------------------

loc_10019763:				; CODE XREF: ldap_utf8strtok_r+F6j
		mov	[eax], esi
		lea	ecx, [esi-6]

loc_10019768:				; CODE XREF: ldap_utf8strtok_r+114j
		mov	al, [esi-1]
		dec	esi
		and	al, 0C0h
		cmp	al, 80h
		jnz	short loc_10019776
		cmp	esi, ecx
		jnz	short loc_10019768

loc_10019776:				; CODE XREF: ldap_utf8strtok_r+110j
		pop	edi
		pop	ebp
		mov	byte ptr [esi],	0
		mov	eax, ebx
		pop	esi
		pop	ebx
		retn	0Ch
ldap_utf8strtok_r endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 525. ldap_create_virtuallist_control

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	ldap_create_virtuallist_control(void *Memory, int, int)
		public ldap_create_virtuallist_control
ldap_create_virtuallist_control	proc near ; DATA XREF: .rdata:off_10020938o

Memory		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	edi
		mov	edi, [esp+4+Memory]
		test	edi, edi
		jnz	short loc_100197A0
		lea	eax, [edi+59h]
		pop	edi
		retn	0Ch
; ---------------------------------------------------------------------------

loc_100197A0:				; CODE XREF: ldap_create_virtuallist_control+7j
		cmp	[esp+4+arg_8], 0
		push	esi
		jz	loc_100198C4
		mov	esi, [esp+8+arg_4]
		test	esi, esi
		jz	loc_100198C4
		lea	eax, [esp+8+Memory]
		push	eax
		push	edi
		call	sub_1000EF40
		add	esp, 8
		test	eax, eax
		jz	short loc_100197E0
		push	0
		push	0
		push	5Ah
		push	edi
		call	ldap_set_lderrno
		pop	esi
		mov	eax, 5Ah
		pop	edi
		retn	0Ch
; ---------------------------------------------------------------------------

loc_100197E0:				; CODE XREF: ldap_create_virtuallist_control+38j
		push	dword ptr [esi+4]
		push	dword ptr [esi]
		push	offset aIi	; "{ii"
		push	[esp+14h+Memory]
		call	ber_printf
		add	esp, 10h
		cmp	eax, 0FFFFFFFFh
		jz	short loc_10019876
		mov	edx, [esi+8]
		test	edx, edx
		jnz	short loc_10019844
		push	dword ptr [esi+10h]
		push	dword ptr [esi+0Ch]
		push	0A0h
		push	offset aTIi	; "t{ii}}"
		push	[esp+18h+Memory]
		call	ber_printf
		add	esp, 14h
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_10019897
		push	0
		push	0
		push	53h
		push	edi
		call	ldap_set_lderrno
		push	1		; int
		push	[esp+0Ch+Memory] ; Memory
		call	ber_free
		pop	esi
		mov	eax, 53h
		pop	edi
		retn	0Ch
; ---------------------------------------------------------------------------

loc_10019844:				; CODE XREF: ldap_create_virtuallist_control+70j
		mov	ecx, edx
		lea	esi, [ecx+1]
		lea	esp, [esp+0]

loc_10019850:				; CODE XREF: ldap_create_virtuallist_control+C5j
		mov	al, [ecx]
		inc	ecx
		test	al, al
		jnz	short loc_10019850
		sub	ecx, esi
		push	ecx
		push	edx
		push	81h
		push	offset aTo_0	; "to}"
		push	[esp+18h+Memory]
		call	ber_printf
		add	esp, 14h
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_10019897

loc_10019876:				; CODE XREF: ldap_create_virtuallist_control+69j
		push	0
		push	0
		push	53h
		push	edi
		call	ldap_set_lderrno
		push	1		; int
		push	[esp+0Ch+Memory] ; Memory
		call	ber_free
		pop	esi
		mov	eax, 53h
		pop	edi
		retn	0Ch
; ---------------------------------------------------------------------------

loc_10019897:				; CODE XREF: ldap_create_virtuallist_control+91j
					; ldap_create_virtuallist_control+E4j
		push	[esp+8+arg_8]	; int
		push	1		; char
		push	1		; int
		push	[esp+14h+Memory] ; Memory
		push	offset a2_16_840_1_1_5 ; "2.16.840.1.113730.3.4.9"
		call	sub_100029E0
		add	esp, 14h
		mov	esi, eax
		push	0
		push	0
		push	esi
		push	edi
		call	ldap_set_lderrno
		mov	eax, esi
		pop	esi
		pop	edi
		retn	0Ch
; ---------------------------------------------------------------------------

loc_100198C4:				; CODE XREF: ldap_create_virtuallist_control+16j
					; ldap_create_virtuallist_control+22j
		push	0
		push	0
		push	59h
		push	edi
		call	ldap_set_lderrno
		pop	esi
		mov	eax, 59h
		pop	edi
		retn	0Ch
ldap_create_virtuallist_control	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 526. ldap_parse_virtuallist_control

; =============== S U B	R O U T	I N E =======================================


		public ldap_parse_virtuallist_control
ldap_parse_virtuallist_control proc near ; DATA	XREF: .rdata:off_10020938o

var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	ecx
		push	edi
		mov	edi, [esp+8+arg_0]
		test	edi, edi
		jnz	short loc_100198F2
		lea	eax, [edi+59h]
		pop	edi
		pop	ecx
		retn	14h
; ---------------------------------------------------------------------------

loc_100198F2:				; CODE XREF: ldap_parse_virtuallist_control+8j
		mov	eax, [edi+64h]
		test	eax, eax
		jnz	short loc_100198FE
		mov	eax, [edi+8]
		jmp	short loc_10019901
; ---------------------------------------------------------------------------

loc_100198FE:				; CODE XREF: ldap_parse_virtuallist_control+17j
		mov	eax, [eax+8]

loc_10019901:				; CODE XREF: ldap_parse_virtuallist_control+1Cj
		cmp	eax, 3
		jge	short loc_1001991C
		push	0
		push	0
		push	5Ch
		push	edi
		call	ldap_set_lderrno
		mov	eax, 5Ch
		pop	edi
		pop	ecx
		retn	14h
; ---------------------------------------------------------------------------

loc_1001991C:				; CODE XREF: ldap_parse_virtuallist_control+24j
		push	ebx
		mov	ebx, [esp+0Ch+arg_4]
		test	ebx, ebx
		jnz	short loc_10019938
		push	ebx
		push	ebx
		push	5Dh
		push	edi
		call	ldap_set_lderrno
		lea	eax, [ebx+5Dh]
		pop	ebx
		pop	edi
		pop	ecx
		retn	14h
; ---------------------------------------------------------------------------

loc_10019938:				; CODE XREF: ldap_parse_virtuallist_control+43j
		push	esi
		xor	ecx, ecx
		xor	esi, esi
		cmp	[ebx], ecx
		jz	loc_10019A32

loc_10019945:				; CODE XREF: ldap_parse_virtuallist_control+A4j
		test	ecx, ecx
		jnz	short loc_1001998E
		mov	eax, [ebx+esi*4]
		mov	ecx, offset a2_16_840_1_1_6 ; "2.16.840.1.113730.3.4.10"
		mov	eax, [eax]

loc_10019953:				; CODE XREF: ldap_parse_virtuallist_control+8Dj
		mov	dl, [eax]
		cmp	dl, [ecx]
		jnz	short loc_10019973
		test	dl, dl
		jz	short loc_1001996F
		mov	dl, [eax+1]
		cmp	dl, [ecx+1]
		jnz	short loc_10019973
		add	eax, 2
		add	ecx, 2
		test	dl, dl
		jnz	short loc_10019953

loc_1001996F:				; CODE XREF: ldap_parse_virtuallist_control+7Bj
		xor	eax, eax
		jmp	short loc_10019978
; ---------------------------------------------------------------------------

loc_10019973:				; CODE XREF: ldap_parse_virtuallist_control+77j
					; ldap_parse_virtuallist_control+83j
		sbb	eax, eax
		or	eax, 1

loc_10019978:				; CODE XREF: ldap_parse_virtuallist_control+91j
		xor	ecx, ecx
		test	eax, eax
		setz	cl
		inc	esi
		cmp	dword ptr [ebx+esi*4], 0
		jnz	short loc_10019945
		test	ecx, ecx
		jz	loc_10019A32

loc_1001998E:				; CODE XREF: ldap_parse_virtuallist_control+67j
		mov	eax, [ebx+esi*4-4]
		add	eax, 4
		push	eax
		call	ber_init
		mov	esi, eax
		test	esi, esi
		jnz	short loc_100199B5
		push	eax
		push	eax
		push	5Ah
		push	edi
		call	ldap_set_lderrno
		lea	eax, [esi+5Ah]
		pop	esi
		pop	ebx
		pop	edi
		pop	ecx
		retn	14h
; ---------------------------------------------------------------------------

loc_100199B5:				; CODE XREF: ldap_parse_virtuallist_control+BFj
		lea	eax, [esp+10h+var_4]
		push	eax
		lea	eax, [esp+14h+arg_4]
		push	eax
		lea	eax, [esp+18h+arg_0]
		push	eax
		push	offset aIie	; "{iie}"
		push	esi		; Dst
		call	ber_scanf
		add	esp, 14h
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_100199F7
		push	0
		push	0
		push	54h
		push	edi
		call	ldap_set_lderrno
		push	1		; int
		push	esi		; Memory
		call	ber_free
		pop	esi
		pop	ebx
		mov	eax, 54h
		pop	edi
		pop	ecx
		retn	14h
; ---------------------------------------------------------------------------

loc_100199F7:				; CODE XREF: ldap_parse_virtuallist_control+F5j
		mov	ecx, [esp+10h+arg_8]
		test	ecx, ecx
		jz	short loc_10019A05
		mov	eax, [esp+10h+arg_0]
		mov	[ecx], eax

loc_10019A05:				; CODE XREF: ldap_parse_virtuallist_control+11Dj
		mov	ecx, [esp+10h+arg_C]
		test	ecx, ecx
		jz	short loc_10019A13
		mov	eax, [esp+10h+arg_4]
		mov	[ecx], eax

loc_10019A13:				; CODE XREF: ldap_parse_virtuallist_control+12Bj
		mov	ecx, [esp+10h+arg_10]
		test	ecx, ecx
		jz	short loc_10019A21
		mov	eax, [esp+10h+var_4]
		mov	[ecx], eax

loc_10019A21:				; CODE XREF: ldap_parse_virtuallist_control+139j
		push	1		; int
		push	esi		; Memory
		call	ber_free
		pop	esi
		pop	ebx
		xor	eax, eax
		pop	edi
		pop	ecx
		retn	14h
; ---------------------------------------------------------------------------

loc_10019A32:				; CODE XREF: ldap_parse_virtuallist_control+5Fj
					; ldap_parse_virtuallist_control+A8j
		push	0
		push	0
		push	5Dh
		push	edi
		call	ldap_set_lderrno
		pop	esi
		pop	ebx
		mov	eax, 5Dh
		pop	edi
		pop	ecx
		retn	14h
ldap_parse_virtuallist_control endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 591. ldap_parse_whoami

; =============== S U B	R O U T	I N E =======================================


		public ldap_parse_whoami
ldap_parse_whoami proc near		; CODE XREF: ldap_whoami_s+72p
					; DATA XREF: .rdata:off_10020938o

var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ecx
		mov	ecx, [esp+4+arg_0]
		mov	[esp+4+var_4], 0
		push	0
		test	ecx, ecx
		jnz	short loc_10019A74
		push	ecx
		push	59h
		push	ecx
		call	ldap_set_lderrno
		mov	eax, 59h
		pop	ecx
		retn	0Ch
; ---------------------------------------------------------------------------

loc_10019A74:				; CODE XREF: ldap_parse_whoami+10j
		mov	edx, [esp+8+arg_4]
		test	edx, edx
		jnz	short loc_10019A8E
		push	edx
		push	59h
		push	ecx
		call	ldap_set_lderrno
		mov	eax, 59h
		pop	ecx
		retn	0Ch
; ---------------------------------------------------------------------------

loc_10019A8E:				; CODE XREF: ldap_parse_whoami+2Aj
		mov	eax, [esp+8+arg_8]
		push	eax
		mov	dword ptr [eax], 0
		lea	eax, [esp+0Ch+var_4]
		push	eax
		push	edx
		push	ecx
		call	ldap_parse_extended_result
		test	eax, eax
		jnz	short loc_10019AB3
		push	[esp+4+var_4]
		call	ldap_memfree
		xor	eax, eax

loc_10019AB3:				; CODE XREF: ldap_parse_whoami+57j
		pop	ecx
		retn	0Ch
ldap_parse_whoami endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 590. ldap_whoami

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	ldap_whoami(void *Memory, int, int, int)
		public ldap_whoami
ldap_whoami	proc near		; DATA XREF: .rdata:off_10020938o

Memory		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	eax, [esp+Memory]
		test	eax, eax
		jnz	short loc_10019ADA
		push	eax
		push	eax
		push	59h
		push	eax
		call	ldap_set_lderrno
		mov	eax, 59h
		retn	10h
; ---------------------------------------------------------------------------

loc_10019ADA:				; CODE XREF: ldap_whoami+6j
		push	[esp+arg_C]	; int
		push	[esp+4+arg_8]	; int
		push	[esp+8+arg_4]	; int
		push	0		; int
		push	offset a1_3_6_1_4_1__3 ; "1.3.6.1.4.1.4203.1.11.3"
		push	eax		; Memory
		call	ldap_extended_operation
		retn	10h
ldap_whoami	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 592. ldap_whoami_s

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	ldap_whoami_s(void *Memory, int, int, int)
		public ldap_whoami_s
ldap_whoami_s	proc near		; DATA XREF: .rdata:off_10020938o

var_4		= dword	ptr -4
Memory		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ecx
		push	esi
		mov	esi, [esp+8+Memory]
		mov	[esp+8+var_4], 0
		test	esi, esi
		jnz	short loc_10019B24
		push	esi
		push	esi
		push	59h
		push	esi
		call	ldap_set_lderrno
		lea	eax, [esi+59h]
		pop	esi
		pop	ecx
		retn	10h
; ---------------------------------------------------------------------------

loc_10019B24:				; CODE XREF: ldap_whoami_s+10j
		lea	eax, [esp+8+Memory]
		push	eax		; int
		push	[esp+0Ch+arg_C]	; int
		push	[esp+10h+arg_8]	; int
		push	0		; int
		push	offset a1_3_6_1_4_1__3 ; "1.3.6.1.4.1.4203.1.11.3"
		push	esi		; Memory
		call	ldap_extended_operation
		test	eax, eax
		jnz	short loc_10019B84
		lea	eax, [esp+8+var_4]
		push	eax
		push	0
		push	1
		push	[esp+14h+Memory]
		push	esi
		call	ldap_result
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_10019B69
		push	0
		push	0
		push	esi
		call	ldap_get_lderrno
		pop	esi
		pop	ecx
		retn	10h
; ---------------------------------------------------------------------------

loc_10019B69:				; CODE XREF: ldap_whoami_s+58j
		push	[esp+8+arg_4]
		push	[esp+0Ch+var_4]
		push	esi
		call	ldap_parse_whoami
		push	[esp+8+var_4]
		mov	esi, eax
		call	ldap_msgfree
		mov	eax, esi

loc_10019B84:				; CODE XREF: ldap_whoami_s+40j
		pop	esi
		pop	ecx
		retn	10h
ldap_whoami_s	endp

; ---------------------------------------------------------------------------
		align 10h
; [00000008 BYTES: COLLAPSED FUNCTION DllMain(x,x,x)]
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10019BA0	proc near		; CODE XREF: sub_10019C60+2p
					; sub_10019C80+5Fp ...

var_194		= byte ptr -194h
var_4		= dword	ptr -4

		sub	esp, 194h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+194h+var_4], eax
		mov	ecx, dword_10024E8C
		test	ecx, ecx
		jnz	short loc_10019C36
		mov	eax, 1
		mov	ecx, offset dword_10024E90
		xchg	eax, [ecx]
		test	eax, eax
		jnz	short loc_10019BE5
		push	offset CriticalSection ; lpCriticalSection
		call	ds:InitializeCriticalSection
		mov	dword_10024E94,	1
		jmp	short loc_10019C03
; ---------------------------------------------------------------------------

loc_10019BE5:				; CODE XREF: sub_10019BA0+2Cj
		cmp	dword_10024E94,	0
		jnz	short loc_10019C03
		push	esi
		mov	esi, ds:Sleep

loc_10019BF5:				; CODE XREF: sub_10019BA0+60j
		push	0		; dwMilliseconds
		call	esi ; Sleep
		cmp	dword_10024E94,	0
		jz	short loc_10019BF5
		pop	esi

loc_10019C03:				; CODE XREF: sub_10019BA0+43j
					; sub_10019BA0+4Cj
		push	offset CriticalSection ; lpCriticalSection
		call	ds:EnterCriticalSection
		cmp	dword_10024E8C,	0
		jnz	short loc_10019C25
		lea	eax, [esp+194h+var_194]
		push	eax
		push	101h
		call	sub_10019C80

loc_10019C25:				; CODE XREF: sub_10019BA0+75j
		push	offset CriticalSection ; lpCriticalSection
		call	ds:LeaveCriticalSection
		mov	ecx, dword_10024E8C

loc_10019C36:				; CODE XREF: sub_10019BA0+1Cj
		xor	eax, eax
		test	ecx, ecx
		mov	ecx, [esp+194h+var_4]
		setnz	al
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 194h
		retn
sub_10019BA0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10019C60	proc near		; CODE XREF: sub_1000CCA0+67p
					; sub_1000CF50+1F8p
		push	3
		call	sub_10019BA0
		add	esp, 4
		test	eax, eax
		jz	short loc_10019C74
		jmp	dword_1002520C
; ---------------------------------------------------------------------------

loc_10019C74:				; CODE XREF: sub_10019C60+Cj
		jmp	ds:GetLastError
sub_10019C60	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10019C80	proc near		; CODE XREF: sub_10019BA0+80p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebx
		push	ebp
		push	esi
		push	edi
		push	80h		; Size
		push	0		; Val
		push	offset dword_10025200 ;	Dst
		call	memset
		add	esp, 0Ch
		push	offset LibFileName ; "wsock32.dll"
		call	ds:LoadLibraryA
		mov	ebx, [esp+10h+arg_4]
		mov	edi, eax
		test	edi, edi
		jz	short loc_10019D1B
		mov	ebp, ds:GetProcAddress
		xor	esi, esi

loc_10019CB5:				; CODE XREF: sub_10019C80+55j
		push	off_10024908[esi] ; lpProcName
		push	edi		; hModule
		call	ebp ; GetProcAddress
		mov	dword_10025200[esi], eax
		test	eax, eax
		jz	loc_10019DA9
		add	esi, 4
		cmp	esi, 80h
		jl	short loc_10019CB5
		push	5
		mov	dword_10024E8C,	edi
		call	sub_10019BA0
		add	esp, 4
		test	eax, eax
		jz	short loc_10019D00
		push	ebx
		push	[esp+14h+arg_0]
		call	dword_10025214
		mov	ecx, eax
		test	ecx, ecx
		jz	loc_10019DA0

loc_10019D00:				; CODE XREF: sub_10019C80+69j
		push	80h		; Size
		push	0		; Val
		push	offset dword_10025200 ;	Dst
		call	memset
		add	esp, 0Ch
		push	edi		; hLibModule
		call	ds:FreeLibrary

loc_10019D1B:				; CODE XREF: sub_10019C80+2Bj
		mov	eax, [esp+10h+arg_0]
		xor	ecx, ecx
		mov	[ebx], ax
		mov	[ebx+2], ax
		movdqu	xmm0, ds:xmmword_100206AC
		movdqu	xmmword	ptr [ebx+4], xmm0
		movdqu	xmm0, ds:xmmword_100206BC
		movdqu	xmmword	ptr [ebx+14h], xmm0
		mov	eax, ds:dword_100206CC
		mov	[ebx+24h], eax
		movdqu	xmm0, ds:xmmword_100206D0
		movdqu	xmmword	ptr [ebx+105h],	xmm0
		movdqu	xmm0, ds:xmmword_100206E0
		movdqu	xmmword	ptr [ebx+115h],	xmm0
		movq	xmm0, ds:qword_100206F0
		movq	qword ptr [ebx+125h], xmm0
		mov	eax, ds:dword_100206F8
		mov	[ebx+12Dh], eax
		mov	al, ds:byte_100206FC
		mov	[ebx+131h], al
		mov	dword ptr [ebx+186h], offset sub_10001000
		mov	[ebx+18Ch], ecx

loc_10019DA0:				; CODE XREF: sub_10019C80+7Aj
		pop	edi
		pop	esi
		pop	ebp
		mov	eax, ecx
		pop	ebx
		retn	8
; ---------------------------------------------------------------------------

loc_10019DA9:				; CODE XREF: sub_10019C80+46j
		pop	edi
		pop	esi
		pop	ebp
		mov	eax, 276Ch
		pop	ebx
		retn	8
sub_10019C80	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10019DC0	proc near		; CODE XREF: sub_1000BF90+183p
					; sub_1000BF90+1A1p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	6
		call	sub_10019BA0
		add	esp, 4
		test	eax, eax
		jz	short loc_10019DD4
		jmp	dword_10025218
; ---------------------------------------------------------------------------

loc_10019DD4:				; CODE XREF: sub_10019DC0+Cj
		mov	ecx, [esp+arg_4]
		mov	eax, [ecx]
		test	eax, eax
		jz	short loc_10019DF4
		mov	edx, [esp+arg_0]
		lea	ecx, [ecx+eax*4]
		add	ecx, 4

loc_10019DE8:				; CODE XREF: sub_10019DC0+32j
		lea	ecx, [ecx-4]
		dec	eax
		cmp	[ecx], edx
		jz	short loc_10019DF9
		test	eax, eax
		jnz	short loc_10019DE8

loc_10019DF4:				; CODE XREF: sub_10019DC0+1Cj
		xor	eax, eax
		retn	8
; ---------------------------------------------------------------------------

loc_10019DF9:				; CODE XREF: sub_10019DC0+2Ej
		mov	eax, 1
		retn	8
sub_10019DC0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10019E10	proc near		; CODE XREF: sub_1000BCE0+14p
					; sub_1000BD10+57p ...
		push	9
		call	sub_10019BA0
		add	esp, 4
		test	eax, eax
		jz	short loc_10019E24
		jmp	dword_10025224
; ---------------------------------------------------------------------------

loc_10019E24:				; CODE XREF: sub_10019E10+Cj
		push	4
		call	sub_10019BA0
		add	esp, 4
		push	2742h		; dwErrCode
		test	eax, eax
		jz	short loc_10019E43
		call	dword_10025210
		or	eax, 0FFFFFFFFh
		retn	4
; ---------------------------------------------------------------------------

loc_10019E43:				; CODE XREF: sub_10019E10+25j
		call	ds:SetLastError
		or	eax, 0FFFFFFFFh
		retn	4
sub_10019E10	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10019E50	proc near		; CODE XREF: sub_1000CCA0+57p
		push	0Ah
		call	sub_10019BA0
		add	esp, 4
		test	eax, eax
		jz	short loc_10019E64
		jmp	dword_10025228
; ---------------------------------------------------------------------------

loc_10019E64:				; CODE XREF: sub_10019E50+Cj
		push	4
		call	sub_10019BA0
		add	esp, 4
		push	2742h		; dwErrCode
		test	eax, eax
		jz	short loc_10019E83
		call	dword_10025210
		or	eax, 0FFFFFFFFh
		retn	0Ch
; ---------------------------------------------------------------------------

loc_10019E83:				; CODE XREF: sub_10019E50+25j
		call	ds:SetLastError
		or	eax, 0FFFFFFFFh
		retn	0Ch
sub_10019E50	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10019E90	proc near		; CODE XREF: sub_1000CF50+B0p
		push	0Bh
		call	sub_10019BA0
		add	esp, 4
		test	eax, eax
		jz	short loc_10019EA4
		jmp	dword_1002522C
; ---------------------------------------------------------------------------

loc_10019EA4:				; CODE XREF: sub_10019E90+Cj
		push	4
		call	sub_10019BA0
		add	esp, 4
		push	2742h		; dwErrCode
		test	eax, eax
		jz	short loc_10019EC2
		call	dword_10025210
		xor	eax, eax
		retn	4
; ---------------------------------------------------------------------------

loc_10019EC2:				; CODE XREF: sub_10019E90+25j
		call	ds:SetLastError
		xor	eax, eax
		retn	4
sub_10019E90	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10019ED0	proc near		; CODE XREF: sub_1000CCA0+1CFp
		push	10h
		call	sub_10019BA0
		add	esp, 4
		test	eax, eax
		jz	short loc_10019EE4
		jmp	dword_10025240
; ---------------------------------------------------------------------------

loc_10019EE4:				; CODE XREF: sub_10019ED0+Cj
		push	4
		call	sub_10019BA0
		add	esp, 4
		push	2742h		; dwErrCode
		test	eax, eax
		jz	short loc_10019F03
		call	dword_10025210
		or	eax, 0FFFFFFFFh
		retn	14h
; ---------------------------------------------------------------------------

loc_10019F03:				; CODE XREF: sub_10019ED0+25j
		call	ds:SetLastError
		or	eax, 0FFFFFFFFh
		retn	14h
sub_10019ED0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10019F10	proc near		; CODE XREF: ber_put_bitstring+35p
					; ber_put_boolean+39p ...

arg_0		= dword	ptr  4

		push	12h
		call	sub_10019BA0
		add	esp, 4
		test	eax, eax
		jz	short loc_10019F24
		jmp	dword_10025248
; ---------------------------------------------------------------------------

loc_10019F24:				; CODE XREF: sub_10019F10+Cj
		mov	eax, [esp+arg_0]
		retn	4
sub_10019F10	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10019F30	proc near		; CODE XREF: sub_1000CF50+18Fp

arg_0		= word ptr  4

		push	13h
		call	sub_10019BA0
		add	esp, 4
		test	eax, eax
		jz	short loc_10019F44
		jmp	dword_1002524C
; ---------------------------------------------------------------------------

loc_10019F44:				; CODE XREF: sub_10019F30+Cj
		mov	ax, [esp+arg_0]
		retn	4
sub_10019F30	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10019F50	proc near		; CODE XREF: sub_1000CF50+96p
		push	14h
		call	sub_10019BA0
		add	esp, 4
		test	eax, eax
		jz	short loc_10019F64
		jmp	dword_10025250
; ---------------------------------------------------------------------------

loc_10019F64:				; CODE XREF: sub_10019F50+Cj
		or	eax, 0FFFFFFFFh
		retn	4
sub_10019F50	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10019F70	proc near		; CODE XREF: sub_1000CCA0+45p
					; sub_1000CCA0+1E7p ...
		push	15h
		call	sub_10019BA0
		add	esp, 4
		test	eax, eax
		jz	short loc_10019F84
		jmp	dword_10025254
; ---------------------------------------------------------------------------

loc_10019F84:				; CODE XREF: sub_10019F70+Cj
		push	4
		call	sub_10019BA0
		add	esp, 4
		push	2742h		; dwErrCode
		test	eax, eax
		jz	short loc_10019FA3
		call	dword_10025210
		or	eax, 0FFFFFFFFh
		retn	0Ch
; ---------------------------------------------------------------------------

loc_10019FA3:				; CODE XREF: sub_10019F70+25j
		call	ds:SetLastError
		or	eax, 0FFFFFFFFh
		retn	0Ch
sub_10019F70	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10019FB0	proc near		; CODE XREF: ber_get_next_buffer_ext+1AAp
					; sub_1001C1C0+32p ...

arg_0		= dword	ptr  4

		push	17h
		call	sub_10019BA0
		add	esp, 4
		test	eax, eax
		jz	short loc_10019FC4
		jmp	dword_1002525C
; ---------------------------------------------------------------------------

loc_10019FC4:				; CODE XREF: sub_10019FB0+Cj
		mov	eax, [esp+arg_0]
		retn	4
sub_10019FB0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_10019FD0	proc near		; CODE XREF: sub_1001AD20+10Cp
		push	19h
		call	sub_10019BA0
		add	esp, 4
		test	eax, eax
		jz	short loc_10019FE4
		jmp	dword_10025264
; ---------------------------------------------------------------------------

loc_10019FE4:				; CODE XREF: sub_10019FD0+Cj
		push	4
		call	sub_10019BA0
		add	esp, 4
		push	2742h		; dwErrCode
		test	eax, eax
		jz	short loc_1001A003
		call	dword_10025210
		or	eax, 0FFFFFFFFh
		retn	10h
; ---------------------------------------------------------------------------

loc_1001A003:				; CODE XREF: sub_10019FD0+25j
		call	ds:SetLastError
		or	eax, 0FFFFFFFFh
		retn	10h
sub_10019FD0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1001A010	proc near		; CODE XREF: sub_1000CB00+D8p
					; sub_1000CCA0+126p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	ebx
		mov	ebx, [esp+4+arg_4]
		push	esi
		mov	esi, [esp+8+arg_C]
		push	edi
		mov	edi, [esp+0Ch+arg_8]
		test	ebx, ebx
		jz	short loc_1001A028
		cmp	dword ptr [ebx], 0
		jnz	short loc_1001A03A

loc_1001A028:				; CODE XREF: sub_1001A010+11j
		test	edi, edi
		jz	short loc_1001A031
		cmp	dword ptr [edi], 0
		jnz	short loc_1001A03A

loc_1001A031:				; CODE XREF: sub_1001A010+1Aj
		test	esi, esi
		jz	short loc_1001A090
		cmp	dword ptr [esi], 0
		jz	short loc_1001A090

loc_1001A03A:				; CODE XREF: sub_1001A010+16j
					; sub_1001A010+1Fj
		push	1Ah
		call	sub_10019BA0
		add	esp, 4
		test	eax, eax
		jz	short loc_1001A05F
		push	[esp+0Ch+arg_10]
		push	esi
		push	edi
		push	ebx
		push	[esp+1Ch+arg_0]
		call	dword_10025268
		pop	edi
		pop	esi
		pop	ebx
		retn	14h
; ---------------------------------------------------------------------------

loc_1001A05F:				; CODE XREF: sub_1001A010+36j
		push	4
		call	sub_10019BA0
		add	esp, 4
		push	2742h		; dwErrCode
		test	eax, eax
		jz	short loc_1001A081
		call	dword_10025210
		pop	edi
		pop	esi
		or	eax, 0FFFFFFFFh
		pop	ebx
		retn	14h
; ---------------------------------------------------------------------------

loc_1001A081:				; CODE XREF: sub_1001A010+60j
		call	ds:SetLastError
		pop	edi
		pop	esi
		or	eax, 0FFFFFFFFh
		pop	ebx
		retn	14h
; ---------------------------------------------------------------------------

loc_1001A090:				; CODE XREF: sub_1001A010+23j
					; sub_1001A010+28j
		pop	edi
		pop	esi
		xor	eax, eax
		pop	ebx
		retn	14h
sub_1001A010	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1001A0A0	proc near		; CODE XREF: ber_flush+14Ep
		push	1Bh
		call	sub_10019BA0
		add	esp, 4
		test	eax, eax
		jz	short loc_1001A0B4
		jmp	dword_1002526C
; ---------------------------------------------------------------------------

loc_1001A0B4:				; CODE XREF: sub_1001A0A0+Cj
		push	4
		call	sub_10019BA0
		add	esp, 4
		push	2742h		; dwErrCode
		test	eax, eax
		jz	short loc_1001A0D3
		call	dword_10025210
		or	eax, 0FFFFFFFFh
		retn	10h
; ---------------------------------------------------------------------------

loc_1001A0D3:				; CODE XREF: sub_1001A0A0+25j
		call	ds:SetLastError
		or	eax, 0FFFFFFFFh
		retn	10h
sub_1001A0A0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1001A0E0	proc near		; CODE XREF: .text:1000CF1Ap
		push	1Eh
		call	sub_10019BA0
		add	esp, 4
		test	eax, eax
		jz	short loc_1001A0F4
		jmp	dword_10025278
; ---------------------------------------------------------------------------

loc_1001A0F4:				; CODE XREF: sub_1001A0E0+Cj
		push	4
		call	sub_10019BA0
		add	esp, 4
		push	2742h		; dwErrCode
		test	eax, eax
		jz	short loc_1001A113
		call	dword_10025210
		or	eax, 0FFFFFFFFh
		retn	0Ch
; ---------------------------------------------------------------------------

loc_1001A113:				; CODE XREF: sub_1001A0E0+25j
		call	ds:SetLastError
		or	eax, 0FFFFFFFFh
		retn	0Ch
sub_1001A0E0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1001A120	proc near		; CODE XREF: sub_1001A960+35p

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		cmp	eax, 7Fh
		ja	short loc_1001A12F
		mov	eax, 1
		retn
; ---------------------------------------------------------------------------

loc_1001A12F:				; CODE XREF: sub_1001A120+7j
		cmp	eax, 0FFh
		ja	short loc_1001A13C
		mov	eax, 2
		retn
; ---------------------------------------------------------------------------

loc_1001A13C:				; CODE XREF: sub_1001A120+14j
		cmp	eax, 0FFFFh
		ja	short loc_1001A149
		mov	eax, 3
		retn
; ---------------------------------------------------------------------------

loc_1001A149:				; CODE XREF: sub_1001A120+21j
		mov	ecx, 0FFFFFFh
		cmp	ecx, eax
		sbb	eax, eax
		neg	eax
		add	eax, 4
		retn
sub_1001A120	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1001A160	proc near		; CODE XREF: sub_1001A960+104p

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		mov	edx, 3
		mov	ecx, 18h
		nop

loc_1001A170:				; CODE XREF: sub_1001A160+21j
		mov	eax, 0FFh
		shl	eax, cl
		test	esi, eax
		jnz	short loc_1001A183
		sub	ecx, 8
		dec	edx
		test	ecx, ecx
		jg	short loc_1001A170

loc_1001A183:				; CODE XREF: sub_1001A160+19j
		lea	eax, [edx+1]
		pop	esi
		retn
sub_1001A160	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 124. ber_printf

; =============== S U B	R O U T	I N E =======================================


		public ber_printf
ber_printf	proc near		; CODE XREF: sub_10001000+187p
					; ldap_add_ext+288p ...

Dest		= byte ptr -54h
var_4		= dword	ptr -4
Size		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 54h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+54h+var_4], eax
		push	ebx
		mov	ebx, [esp+58h+arg_4]
		xor	ecx, ecx
		push	edi
		mov	edi, [esp+5Ch+Size]
		mov	al, [ebx]
		test	al, al
		jz	loc_1001A415
		push	ebp
		push	esi
		lea	ebp, [esp+64h+arg_4]
		lea	esi, [ecx+30h]
		lea	ecx, [ecx+0]

loc_1001A1C0:				; CODE XREF: ber_printf+26Aj
		cmp	ecx, 0FFFFFFFFh
		jz	loc_1001A400
		movsx	edx, al
		lea	eax, [edx-42h]	; switch 60 cases
		cmp	eax, 3Bh
		ja	loc_1001A3BA	; jumptable 1001A1DF default case
		movzx	eax, ds:byte_1001A464[eax]
		jmp	ds:off_1001A428[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_1001A1E6:				; CODE XREF: ber_printf+4Fj
					; DATA XREF: .text:off_1001A428o
		push	dword ptr [edi+64h] ; jumptable	1001A1DF case 98
		add	ebp, 4
		push	dword ptr [ebp+0] ; int
		push	edi		; int
		call	ber_put_boolean
		mov	ecx, eax
		jmp	loc_1001A328
; ---------------------------------------------------------------------------

loc_1001A1FC:				; CODE XREF: ber_printf+4Fj
					; DATA XREF: .text:off_1001A428o
		mov	ecx, 2		; jumptable 1001A1DF case 105

loc_1001A201:				; CODE XREF: ber_printf+96j
		mov	eax, [edi+64h]
		add	ebp, 4
		cmp	eax, 0FFFFFFFFh
		cmovz	eax, ecx
		push	eax
		push	dword ptr [ebp+0]
		push	edi
		call	sub_1001A680
		add	esp, 0Ch
		mov	ecx, eax
		jmp	loc_1001A328
; ---------------------------------------------------------------------------

loc_1001A221:				; CODE XREF: ber_printf+4Fj
					; DATA XREF: .text:off_1001A428o
		mov	ecx, 0Ah	; jumptable 1001A1DF case 101
		jmp	short loc_1001A201
; ---------------------------------------------------------------------------

loc_1001A228:				; CODE XREF: ber_printf+4Fj
					; DATA XREF: .text:off_1001A428o
		push	dword ptr [edi+64h] ; jumptable	1001A1DF case 110
		push	edi		; int
		call	ber_put_null
		mov	ecx, eax
		jmp	loc_1001A328
; ---------------------------------------------------------------------------

loc_1001A238:				; CODE XREF: ber_printf+4Fj
					; DATA XREF: .text:off_1001A428o
		mov	eax, [ebp+4]	; jumptable 1001A1DF case 111
		add	ebp, 8
		push	dword ptr [edi+64h] ; int
		push	dword ptr [ebp+0] ; Size
		push	eax		; Src
		push	edi		; int
		call	ber_put_ostring
		mov	ecx, eax
		jmp	loc_1001A328
; ---------------------------------------------------------------------------

loc_1001A252:				; CODE XREF: ber_printf+4Fj
					; DATA XREF: .text:off_1001A428o
		mov	eax, [ebp+4]	; jumptable 1001A1DF case 79
		add	ebp, 4
		test	eax, eax
		jz	loc_1001A328
		mov	ecx, [eax]
		push	dword ptr [edi+64h] ; int
		test	ecx, ecx
		jnz	short loc_1001A27C
		push	ecx		; Size
		push	offset Src	; Src
		push	edi		; int
		call	ber_put_ostring
		mov	ecx, eax
		jmp	loc_1001A328
; ---------------------------------------------------------------------------

loc_1001A27C:				; CODE XREF: ber_printf+D7j
		push	ecx		; Size
		push	dword ptr [eax+4] ; Src
		push	edi		; int
		call	ber_put_ostring
		mov	ecx, eax
		jmp	loc_1001A328
; ---------------------------------------------------------------------------

loc_1001A28D:				; CODE XREF: ber_printf+4Fj
					; DATA XREF: .text:off_1001A428o
		mov	edx, [ebp+4]	; jumptable 1001A1DF case 115
		add	ebp, 4
		mov	ecx, edx
		lea	esi, [ecx+1]

loc_1001A298:				; CODE XREF: ber_printf+10Dj
		mov	al, [ecx]
		inc	ecx
		test	al, al
		jnz	short loc_1001A298
		push	dword ptr [edi+64h] ; int
		sub	ecx, esi
		push	ecx		; Size
		push	edx		; Src
		push	edi		; int
		call	ber_put_ostring
		mov	ecx, eax
		jmp	short loc_1001A323
; ---------------------------------------------------------------------------

loc_1001A2B0:				; CODE XREF: ber_printf+4Fj
					; DATA XREF: .text:off_1001A428o
		mov	eax, [ebp+4]	; jumptable 1001A1DF case 66
		add	ebp, 8
		push	dword ptr [edi+64h] ; Src
		push	dword ptr [ebp+0] ; int
		push	eax		; void *
		push	edi		; int
		call	ber_put_bitstring
		mov	ecx, eax
		jmp	short loc_1001A328
; ---------------------------------------------------------------------------

loc_1001A2C7:				; CODE XREF: ber_printf+4Fj
					; DATA XREF: .text:off_1001A428o
		mov	eax, [ebp+4]	; jumptable 1001A1DF case 116
		add	ebp, 4
		mov	[edi+64h], eax
		mov	dword ptr [edi+6Ch], 1
		jmp	short loc_1001A328
; ---------------------------------------------------------------------------

loc_1001A2D9:				; CODE XREF: ber_printf+4Fj
					; DATA XREF: .text:off_1001A428o
		mov	eax, [ebp+4]	; jumptable 1001A1DF case 118
		add	ebp, 4
		test	eax, eax
		jz	short loc_1001A328
		xor	esi, esi
		cmp	[eax], esi
		jz	short loc_1001A323
		lea	esp, [esp+0]

loc_1001A2F0:				; CODE XREF: ber_printf+18Dj
		mov	edx, [eax]
		mov	eax, edx
		lea	ebx, [eax+1]

loc_1001A2F7:				; CODE XREF: ber_printf+16Cj
		mov	cl, [eax]
		inc	eax
		test	cl, cl
		jnz	short loc_1001A2F7
		push	dword ptr [edi+64h] ; int
		sub	eax, ebx
		push	eax		; Size
		push	edx		; Src
		push	edi		; int
		call	ber_put_ostring
		mov	ecx, eax
		cmp	ecx, 0FFFFFFFFh
		jz	short loc_1001A31F
		mov	eax, [ebp+0]
		inc	esi
		cmp	dword ptr [eax+esi*4], 0
		lea	eax, [eax+esi*4]
		jnz	short loc_1001A2F0

loc_1001A31F:				; CODE XREF: ber_printf+180j
					; ber_printf+1C0j ...
		mov	ebx, [esp+64h+arg_4]

loc_1001A323:				; CODE XREF: ber_printf+11Ej
					; ber_printf+157j
		mov	esi, 30h

loc_1001A328:				; CODE XREF: ber_printf+67j
					; ber_printf+8Cj ...
		cmp	dword ptr [edi+6Ch], 0
		jnz	loc_1001A3E9
		mov	dword ptr [edi+64h], 0FFFFFFFFh
		jmp	loc_1001A3F0
; ---------------------------------------------------------------------------

loc_1001A33E:				; CODE XREF: ber_printf+4Fj
					; DATA XREF: .text:off_1001A428o
		mov	ebx, [ebp+4]	; jumptable 1001A1DF case 86
		add	ebp, 4
		test	ebx, ebx
		jz	loc_1001A3E0
		xor	esi, esi
		cmp	[ebx], esi
		jz	short loc_1001A31F
		mov	eax, ebx

loc_1001A354:				; CODE XREF: ber_printf+1E3j
		mov	eax, [eax]
		push	dword ptr [edi+64h] ; int
		push	dword ptr [eax]	; Size
		push	dword ptr [eax+4] ; Src
		push	edi		; int
		call	ber_put_ostring
		mov	ecx, eax
		cmp	ecx, 0FFFFFFFFh
		jz	short loc_1001A31F
		inc	esi
		cmp	dword ptr [ebx+esi*4], 0
		lea	eax, [ebx+esi*4]
		jnz	short loc_1001A354
		jmp	short loc_1001A31F
; ---------------------------------------------------------------------------

loc_1001A377:				; CODE XREF: ber_printf+4Fj
					; DATA XREF: .text:off_1001A428o
		mov	eax, [edi+64h]	; jumptable 1001A1DF case 123
		cmp	eax, 0FFFFFFFFh
		cmovz	eax, esi
		push	eax
		push	edi
		call	sub_1001AC50
		add	esp, 8
		mov	ecx, eax
		jmp	short loc_1001A328
; ---------------------------------------------------------------------------

loc_1001A38E:				; CODE XREF: ber_printf+4Fj
					; DATA XREF: .text:off_1001A428o
		push	edi		; jumptable 1001A1DF cases 93,125
		call	sub_1001A960
		add	esp, 4
		mov	ecx, eax
		jmp	short loc_1001A328
; ---------------------------------------------------------------------------

loc_1001A39B:				; CODE XREF: ber_printf+4Fj
					; DATA XREF: .text:off_1001A428o
		mov	eax, [edi+64h]	; jumptable 1001A1DF case 91
		mov	ecx, 31h
		cmp	eax, 0FFFFFFFFh
		cmovz	eax, ecx
		push	eax
		push	edi
		call	sub_1001AC50
		add	esp, 8
		mov	ecx, eax
		jmp	loc_1001A328
; ---------------------------------------------------------------------------

loc_1001A3BA:				; CODE XREF: ber_printf+42j
					; ber_printf+4Fj
					; DATA XREF: ...
		push	edx		; jumptable 1001A1DF default case
		lea	eax, [esp+68h+Dest]
		push	offset aUnknownFmtC ; "unknown fmt %c\n"
		push	eax		; Dest
		call	ds:sprintf
		lea	eax, [esp+70h+Dest]
		push	eax		; Str
		call	ber_err_print
		add	esp, 10h
		or	ecx, 0FFFFFFFFh
		jmp	loc_1001A328
; ---------------------------------------------------------------------------

loc_1001A3E0:				; CODE XREF: ber_printf+1B6j
		mov	ebx, [esp+64h+arg_4]
		jmp	loc_1001A328
; ---------------------------------------------------------------------------

loc_1001A3E9:				; CODE XREF: ber_printf+19Cj
		mov	dword ptr [edi+6Ch], 0

loc_1001A3F0:				; CODE XREF: ber_printf+1A9j
		mov	al, [ebx+1]
		inc	ebx
		mov	[esp+64h+arg_4], ebx
		test	al, al
		jnz	loc_1001A1C0

loc_1001A400:				; CODE XREF: ber_printf+33j
		pop	esi
		pop	ebp
		pop	edi
		mov	eax, ecx
		pop	ebx
		mov	ecx, [esp+54h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 54h
		retn
; ---------------------------------------------------------------------------

loc_1001A415:				; CODE XREF: ber_printf+1Ej
		mov	eax, ecx
		mov	ecx, [esp+5Ch+var_4]
		pop	edi
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 54h
		retn
ber_printf	endp

; ---------------------------------------------------------------------------
off_1001A428	dd offset loc_1001A2B0,	offset loc_1001A252, offset loc_1001A33E
					; DATA XREF: ber_printf+4Fr
		dd offset loc_1001A39B,	offset loc_1001A38E, offset loc_1001A1E6 ; jump	table for switch statement
		dd offset loc_1001A221,	offset loc_1001A1FC, offset loc_1001A228
		dd offset loc_1001A238,	offset loc_1001A28D, offset loc_1001A2C7
		dd offset loc_1001A2D9,	offset loc_1001A377, offset loc_1001A3BA
byte_1001A464	db	0,   0Eh,   0Eh,   0Eh ; DATA XREF: ber_printf+48r
		db    0Eh,   0Eh,   0Eh,   0Eh ; indirect table	for switch statement
		db    0Eh,   0Eh,   0Eh,   0Eh
		db    0Eh,     1,   0Eh,   0Eh
		db    0Eh,   0Eh,   0Eh,   0Eh
		db	2,   0Eh,   0Eh,   0Eh
		db    0Eh,     3,   0Eh,     4
		db    0Eh,   0Eh,   0Eh,   0Eh
		db	5,   0Eh,   0Eh,     6
		db    0Eh,   0Eh,   0Eh,     7
		db    0Eh,   0Eh,   0Eh,   0Eh
		db	8,     9,   0Eh,   0Eh
		db    0Eh,   0Ah,   0Bh,   0Eh
		db    0Ch,   0Eh,   0Eh,   0Eh
		db    0Eh,   0Dh,   0Eh,     4
; Exported entry 117. ber_put_bitstring

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	ber_put_bitstring(int, void *, int, int	Src)
		public ber_put_bitstring
ber_put_bitstring proc near		; CODE XREF: ber_printf+12Ep
					; DATA XREF: .rdata:off_10020938o

var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
Src		= dword	ptr  10h

		push	ecx
		mov	edx, [esp+4+Src]
		mov	eax, 3
		push	esi
		cmp	edx, 0FFFFFFFFh
		mov	esi, eax
		push	edi
		cmovz	edx, eax
		mov	ecx, 18h
		lea	esp, [esp+0]

loc_1001A4C0:				; CODE XREF: ber_put_bitstring+31j
		mov	eax, 0FFh
		shl	eax, cl
		test	edx, eax
		jnz	short loc_1001A4D3
		sub	ecx, 8
		dec	esi
		test	ecx, ecx
		jg	short loc_1001A4C0

loc_1001A4D3:				; CODE XREF: ber_put_bitstring+29j
		push	edx
		inc	esi
		call	sub_10019F10
		mov	[esp+0Ch+var_4], eax
		lea	eax, [esp+0Ch]
		push	0		; int
		push	esi		; Size
		sub	eax, esi
		mov	esi, [esp+14h+arg_0]
		push	eax		; Src
		push	esi		; int
		call	ber_write
		mov	edi, eax
		cmp	edi, 0FFFFFFFFh
		jnz	short loc_1001A501
		pop	edi
		or	eax, eax
		pop	esi
		pop	ecx
		retn	10h
; ---------------------------------------------------------------------------

loc_1001A501:				; CODE XREF: ber_put_bitstring+57j
		mov	ecx, [esp+0Ch+arg_8]
		push	ebx
		push	ebp
		push	0
		lea	ebx, [ecx+7]
		shr	ebx, 3
		mov	al, bl
		shl	al, 3
		sub	al, cl
		mov	byte ptr [esp+18h+Src],	al
		lea	eax, [ebx+1]
		push	eax
		push	esi
		call	sub_1001A780
		mov	ebp, eax
		add	esp, 0Ch
		cmp	ebp, 0FFFFFFFFh
		jz	short loc_1001A553
		push	0		; int
		push	1		; Size
		lea	eax, [esp+1Ch+Src]
		push	eax		; Src
		push	esi		; int
		call	ber_write
		cmp	eax, 1
		jnz	short loc_1001A553
		push	0		; int
		push	ebx		; Size
		push	[esp+1Ch+arg_4]	; Src
		push	esi		; int
		call	ber_write
		cmp	eax, ebx
		jz	short loc_1001A55E

loc_1001A553:				; CODE XREF: ber_put_bitstring+8Cj
					; ber_put_bitstring+A0j
		pop	ebp
		pop	ebx
		pop	edi
		or	eax, 0FFFFFFFFh
		pop	esi
		pop	ecx
		retn	10h
; ---------------------------------------------------------------------------

loc_1001A55E:				; CODE XREF: ber_put_bitstring+B1j
		lea	eax, [ebx+1]
		add	eax, ebp
		pop	ebp
		pop	ebx
		add	eax, edi
		pop	edi
		pop	esi
		pop	ecx
		retn	10h
ber_put_bitstring endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 119. ber_put_boolean

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	ber_put_boolean(int, int, int Src)
		public ber_put_boolean
ber_put_boolean	proc near		; CODE XREF: ber_printf+60p
					; DATA XREF: .rdata:off_10020938o

var_2		= byte ptr -2
var_1		= byte ptr -1
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
Src		= dword	ptr  0Ch
arg_C		= byte ptr  10h

		push	ecx
		mov	edx, [esp+4+Src]
		mov	eax, 1
		push	esi
		cmp	edx, 0FFFFFFFFh
		mov	[esp+8+var_2], 0FFh
		push	edi
		mov	[esp+0Ch+var_1], 0
		lea	esi, [eax+2]
		cmovz	edx, eax
		mov	ecx, 18h

loc_1001A594:				; CODE XREF: ber_put_boolean+35j
		mov	eax, 0FFh
		shl	eax, cl
		test	edx, eax
		jnz	short loc_1001A5A7
		sub	ecx, 8
		dec	esi
		test	ecx, ecx
		jg	short loc_1001A594

loc_1001A5A7:				; CODE XREF: ber_put_boolean+2Dj
		push	edx
		inc	esi
		call	sub_10019F10
		mov	[esp+0Ch+Src], eax
		lea	eax, [esp+0Ch+arg_C]
		push	0		; int
		push	esi		; Size
		sub	eax, esi
		mov	esi, [esp+14h+arg_0]
		push	eax		; Src
		push	esi		; int
		call	ber_write
		mov	edi, eax
		cmp	edi, 0FFFFFFFFh
		jnz	short loc_1001A5D6

loc_1001A5CD:				; CODE XREF: ber_put_boolean+83j
					; ber_put_boolean+A2j
		pop	edi
		or	eax, 0FFFFFFFFh
		pop	esi
		pop	ecx
		retn	0Ch
; ---------------------------------------------------------------------------

loc_1001A5D6:				; CODE XREF: ber_put_boolean+5Bj
		push	1
		call	sub_10019F10
		push	0		; int
		mov	[esp+10h+Src], eax
		lea	eax, [esp+10h+Src+3]
		push	1		; Size
		push	eax		; Src
		push	esi		; int
		call	ber_write
		cmp	eax, 1
		jnz	short loc_1001A5CD
		cmp	[esp+0Ch+arg_4], 0
		lea	ecx, [esp+0Ch+var_1]
		push	0		; int
		push	eax		; Size
		lea	eax, [esp+14h+var_2]
		cmovz	eax, ecx
		push	eax		; Src
		push	esi		; int
		call	ber_write
		cmp	eax, 1
		jnz	short loc_1001A5CD
		lea	eax, [edi+2]
		pop	edi
		pop	esi
		pop	ecx
		retn	0Ch
ber_put_boolean	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 133. ber_put_enum

; =============== S U B	R O U T	I N E =======================================


		public ber_put_enum
ber_put_enum	proc near		; DATA XREF: .rdata:off_10020938o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, [esp+arg_8]
		mov	ecx, 0Ah
		cmp	eax, 0FFFFFFFFh
		cmovz	eax, ecx
		push	eax
		push	[esp+4+arg_4]
		push	[esp+8+arg_0]
		call	sub_1001A680
		add	esp, 0Ch
		retn	0Ch
ber_put_enum	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 114. ber_put_int

; =============== S U B	R O U T	I N E =======================================


		public ber_put_int
ber_put_int	proc near		; DATA XREF: .rdata:off_10020938o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, [esp+arg_8]
		mov	ecx, 2
		cmp	eax, 0FFFFFFFFh
		cmovz	eax, ecx
		push	eax
		push	[esp+4+arg_4]
		push	[esp+8+arg_0]
		call	sub_1001A680
		add	esp, 0Ch
		retn	0Ch
ber_put_int	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1001A680	proc near		; CODE XREF: ber_printf+82p
					; ber_put_enum+18p ...

var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ecx
		push	ebx
		push	ebp
		push	esi
		push	edi
		mov	edi, [esp+14h+arg_4]
		xor	ebx, ebx
		test	edi, edi
		mov	esi, 3
		mov	ecx, 18h
		sets	bl
		lea	ebx, [ebx+0]

loc_1001A6A0:				; CODE XREF: sub_1001A680+3Dj
		mov	edx, 0FFh
		shl	edx, cl
		test	ebx, ebx
		jz	short loc_1001A6B3
		mov	eax, edx
		and	eax, edi
		cmp	eax, edx
		jmp	short loc_1001A6B5
; ---------------------------------------------------------------------------

loc_1001A6B3:				; CODE XREF: sub_1001A680+29j
		test	edi, edx

loc_1001A6B5:				; CODE XREF: sub_1001A680+31j
		jnz	short loc_1001A6BF
		sub	ecx, 8
		dec	esi
		test	ecx, ecx
		jg	short loc_1001A6A0

loc_1001A6BF:				; CODE XREF: sub_1001A680:loc_1001A6B5j
		lea	ecx, ds:0[esi*8]
		mov	eax, 80h
		shl	eax, cl
		and	eax, edi
		jz	short loc_1001A6D7
		test	ebx, ebx
		jz	short loc_1001A6DB
		jmp	short loc_1001A6DC
; ---------------------------------------------------------------------------

loc_1001A6D7:				; CODE XREF: sub_1001A680+4Fj
		test	ebx, ebx
		jz	short loc_1001A6DC

loc_1001A6DB:				; CODE XREF: sub_1001A680+53j
		inc	esi

loc_1001A6DC:				; CODE XREF: sub_1001A680+55j
					; sub_1001A680+59j
		mov	edx, [esp+14h+arg_8]
		lea	ebx, [esi+1]
		mov	esi, 3
		mov	ecx, 18h
		lea	ecx, [ecx+0]

loc_1001A6F0:				; CODE XREF: sub_1001A680+81j
		mov	eax, 0FFh
		shl	eax, cl
		test	edx, eax
		jnz	short loc_1001A703
		sub	ecx, 8
		dec	esi
		test	ecx, ecx
		jg	short loc_1001A6F0

loc_1001A703:				; CODE XREF: sub_1001A680+79j
		push	edx
		inc	esi
		call	sub_10019F10
		mov	ebp, [esp+14h+arg_0]
		mov	[esp+14h+arg_4], eax
		lea	eax, [esp+14h+arg_8]
		push	0		; int
		push	esi		; Size
		sub	eax, esi
		push	eax		; Src
		push	ebp		; int
		call	ber_write
		mov	[esp+14h+arg_4], eax
		cmp	eax, 0FFFFFFFFh
		jz	short loc_1001A76A
		push	0
		push	ebx
		push	ebp
		call	sub_1001A780
		mov	esi, eax
		add	esp, 0Ch
		cmp	esi, 0FFFFFFFFh
		jz	short loc_1001A76A
		push	edi
		call	sub_10019F10
		mov	[esp+14h+var_4], eax
		lea	eax, [esp+14h]
		push	0		; int
		push	ebx		; Size
		sub	eax, ebx
		push	eax		; Src
		push	ebp		; int
		call	ber_write
		cmp	eax, ebx
		jnz	short loc_1001A76A
		mov	eax, [esp+14h+arg_4]
		pop	edi
		add	eax, esi
		pop	esi
		pop	ebp
		add	eax, ebx
		pop	ebx
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_1001A76A:				; CODE XREF: sub_1001A680+A9j
					; sub_1001A680+BCj ...
		pop	edi
		pop	esi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		pop	ecx
		retn
sub_1001A680	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1001A780	proc near		; CODE XREF: ber_put_bitstring+7Fp
					; sub_1001A680+AFp ...

Src		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ecx
		push	esi
		mov	esi, [esp+8+arg_4]
		cmp	esi, 7Fh
		ja	short loc_1001A7AC
		push	esi
		call	sub_10019F10
		push	[esp+8+arg_8]	; int
		mov	[esp+0Ch+Src], eax
		lea	eax, [esp+0Ch+Src+3]
		push	1		; Size
		push	eax		; Src
		push	[esp+14h+arg_0]	; int
		call	ber_write
		pop	esi
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_1001A7AC:				; CODE XREF: sub_1001A780+9j
		push	ebx
		mov	ebx, 3
		mov	ecx, 18h

loc_1001A7B7:				; CODE XREF: sub_1001A780+48j
		mov	eax, 0FFh
		shl	eax, cl
		test	esi, eax
		jnz	short loc_1001A7CA
		sub	ecx, 8
		dec	ebx
		test	ecx, ecx
		jg	short loc_1001A7B7

loc_1001A7CA:				; CODE XREF: sub_1001A780+40j
		inc	ebx
		cmp	bl, 4
		jg	short loc_1001A814
		push	[esp+0Ch+arg_8]	; int
		mov	al, bl
		or	al, 80h
		mov	byte ptr [esp+10h+arg_4], al
		lea	eax, [esp+10h+arg_4]
		push	1		; Size
		push	eax		; Src
		push	[esp+18h+arg_0]	; int
		call	ber_write
		cmp	eax, 1
		jnz	short loc_1001A814
		push	esi
		call	sub_10019F10
		push	[esp+0Ch+arg_8]	; int
		mov	[esp+10h+Src], eax
		lea	eax, [esp+10h]
		push	ebx		; Size
		sub	eax, ebx
		push	eax		; Src
		push	[esp+18h+arg_0]	; int
		call	ber_write
		cmp	eax, ebx
		jz	short loc_1001A81B

loc_1001A814:				; CODE XREF: sub_1001A780+4Ej
					; sub_1001A780+6Fj
		pop	ebx
		or	eax, 0FFFFFFFFh
		pop	esi
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_1001A81B:				; CODE XREF: sub_1001A780+92j
		lea	eax, [ebx+1]
		pop	ebx
		pop	esi
		pop	ecx
		retn
sub_1001A780	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 118. ber_put_null

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	ber_put_null(int, int Src)
		public ber_put_null
ber_put_null	proc near		; CODE XREF: ber_printf+9Cp
					; DATA XREF: .rdata:off_10020938o

arg_0		= dword	ptr  4
Src		= dword	ptr  8
arg_8		= byte ptr  0Ch

		mov	edx, [esp+Src]
		mov	eax, 5
		cmp	edx, 0FFFFFFFFh
		mov	ecx, 18h
		push	esi
		cmovz	edx, eax
		lea	esi, [eax-2]
		jmp	short loc_1001A850
; ---------------------------------------------------------------------------
		align 10h

loc_1001A850:				; CODE XREF: ber_put_null+18j
					; ber_put_null+31j
		mov	eax, 0FFh
		shl	eax, cl
		test	edx, eax
		jnz	short loc_1001A863
		sub	ecx, 8
		dec	esi
		test	ecx, ecx
		jg	short loc_1001A850

loc_1001A863:				; CODE XREF: ber_put_null+29j
		push	edx
		inc	esi
		call	sub_10019F10
		mov	[esp+4+Src], eax
		lea	eax, [esp+4+arg_8]
		push	0		; int
		push	esi		; Size
		sub	eax, esi
		push	eax		; Src
		push	[esp+10h+arg_0]	; int
		call	ber_write
		mov	esi, eax
		cmp	esi, 0FFFFFFFFh
		jnz	short loc_1001A88F

loc_1001A888:				; CODE XREF: ber_put_null+7Fj
		or	eax, 0FFFFFFFFh
		pop	esi
		retn	8
; ---------------------------------------------------------------------------

loc_1001A88F:				; CODE XREF: ber_put_null+56j
		push	0
		call	sub_10019F10
		push	0		; int
		mov	[esp+8+Src], eax
		lea	eax, [esp+8+Src+3]
		push	1		; Size
		push	eax		; Src
		push	[esp+10h+arg_0]	; int
		call	ber_write
		cmp	eax, 1
		jnz	short loc_1001A888
		lea	eax, [esi+1]
		pop	esi
		retn	8
ber_put_null	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 115. ber_put_ostring

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	ber_put_ostring(int, void *Src,	size_t Size, int)
		public ber_put_ostring
ber_put_ostring	proc near		; CODE XREF: ber_printf+B6p
					; ber_printf+E0p ...

arg_0		= dword	ptr  4
Src		= dword	ptr  8
Size		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= byte ptr  14h

		mov	edx, [esp+arg_C]
		mov	eax, 4
		push	ebx
		push	ebp
		cmp	edx, 0FFFFFFFFh
		mov	ecx, 18h
		push	esi
		cmovz	edx, eax
		lea	esi, [eax-1]
		lea	ebx, [ebx+0]

loc_1001A8E0:				; CODE XREF: ber_put_ostring+31j
		mov	eax, 0FFh
		shl	eax, cl
		test	edx, eax
		jnz	short loc_1001A8F3
		sub	ecx, 8
		dec	esi
		test	ecx, ecx
		jg	short loc_1001A8E0

loc_1001A8F3:				; CODE XREF: ber_put_ostring+29j
		push	edx
		inc	esi
		call	sub_10019F10
		mov	ebx, [esp+0Ch+arg_0]
		mov	[esp+0Ch+arg_C], eax
		lea	eax, [esp+0Ch+arg_10]
		push	0		; int
		push	esi		; Size
		sub	eax, esi
		push	eax		; Src
		push	ebx		; int
		call	ber_write
		mov	ebp, eax
		cmp	ebp, 0FFFFFFFFh
		jnz	short loc_1001A921
		pop	esi
		pop	ebp
		or	eax, eax
		pop	ebx
		retn	10h
; ---------------------------------------------------------------------------

loc_1001A921:				; CODE XREF: ber_put_ostring+57j
		mov	esi, [esp+0Ch+Size]
		push	edi
		push	0
		push	esi
		push	ebx
		call	sub_1001A780
		mov	edi, eax
		add	esp, 0Ch
		cmp	edi, 0FFFFFFFFh
		jz	short loc_1001A956
		push	0		; int
		push	esi		; Size
		push	[esp+18h+Src]	; Src
		push	ebx		; int
		call	ber_write
		cmp	eax, esi
		jnz	short loc_1001A956
		lea	eax, [edi+ebp]
		pop	edi
		add	eax, esi
		pop	esi
		pop	ebp
		pop	ebx
		retn	10h
; ---------------------------------------------------------------------------

loc_1001A956:				; CODE XREF: ber_put_ostring+77j
					; ber_put_ostring+88j
		pop	edi
		pop	esi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		retn	10h
ber_put_ostring	endp


; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1001A960(size_t Size)
sub_1001A960	proc near		; CODE XREF: ber_printf+1FFp
					; ber_put_set+4p

var_11		= byte ptr -11h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
Src		= dword	ptr -8
var_3		= byte ptr -3
Size		= dword	ptr  4

		sub	esp, 14h
		push	ebx
		push	edi
		mov	edi, [esp+1Ch+Size]
		mov	[esp+1Ch+var_11], 84h
		mov	ebx, [edi+5Ch]
		test	ebx, ebx
		jnz	short loc_1001A97E
		pop	edi
		or	eax, 0FFFFFFFFh
		pop	ebx
		add	esp, 14h
		retn
; ---------------------------------------------------------------------------

loc_1001A97E:				; CODE XREF: sub_1001A960+13j
		mov	ebx, [ebx]
		push	ebx
		mov	[esp+20h+Size],	ebx
		call	sub_10019F10
		test	byte ptr [edi+70h], 4
		mov	[esp+1Ch+Src], eax
		jz	short loc_1001A9A1
		push	ebx
		call	sub_1001A120
		add	esp, 4
		mov	ebx, eax
		jmp	short loc_1001A9A6
; ---------------------------------------------------------------------------

loc_1001A9A1:				; CODE XREF: sub_1001A960+32j
		mov	ebx, 5

loc_1001A9A6:				; CODE XREF: sub_1001A960+3Fj
		push	ebp
		push	esi
		mov	esi, [edi+5Ch]
		mov	eax, [esi+10h]
		mov	[esp+24h+var_C], eax
		test	eax, eax
		jnz	loc_1001AA60
		push	1
		push	dword ptr [esi+4]
		push	edi
		call	sub_1001ABE0
		mov	ebp, eax
		add	esp, 0Ch
		cmp	ebp, 0FFFFFFFFh
		jz	short loc_1001AA49
		test	byte ptr [edi+70h], 4
		push	1		; int
		jz	short loc_1001AA24
		mov	esi, [esp+28h+Size]
		push	esi
		push	edi
		call	sub_1001A780
		add	esp, 0Ch
		cmp	eax, 0FFFFFFFFh
		jz	short loc_1001AA49
		cmp	ebx, 5
		jz	short loc_1001AA58
		mov	eax, [edi+5Ch]
		mov	ecx, [eax+8]
		add	ecx, ebp
		cmp	esi, 1
		jnz	short loc_1001AA0A
		mov	al, [ecx+5]
		mov	[ecx+ebx], al
		add	[edi+54h], esi
		jmp	loc_1001AB68
; ---------------------------------------------------------------------------

loc_1001AA0A:				; CODE XREF: sub_1001A960+9Aj
		lea	eax, [ecx+5]
		push	esi		; Size
		push	eax		; Src
		lea	eax, [ecx+ebx]
		push	eax		; Dst
		call	ds:memmove
		add	esp, 0Ch
		add	[edi+54h], esi
		jmp	loc_1001AB68
; ---------------------------------------------------------------------------

loc_1001AA24:				; CODE XREF: sub_1001A960+75j
		push	1		; Size
		lea	eax, [esp+2Ch+var_11]
		push	eax		; Src
		push	edi		; int
		call	ber_write
		cmp	eax, 1
		jnz	short loc_1001AA49
		push	eax		; int
		push	4		; Size
		lea	eax, [esp+2Ch+Src]
		push	eax		; Src
		push	edi		; int
		call	ber_write
		cmp	eax, 4
		jz	short loc_1001AA54

loc_1001AA49:				; CODE XREF: sub_1001A960+6Dj
					; sub_1001A960+88j ...
		pop	esi
		pop	ebp
		pop	edi
		or	eax, 0FFFFFFFFh
		pop	ebx
		add	esp, 14h
		retn
; ---------------------------------------------------------------------------

loc_1001AA54:				; CODE XREF: sub_1001A960+E7j
		mov	esi, [esp+24h+Size]

loc_1001AA58:				; CODE XREF: sub_1001A960+8Dj
		add	[edi+54h], esi
		jmp	loc_1001AB68
; ---------------------------------------------------------------------------

loc_1001AA60:				; CODE XREF: sub_1001A960+54j
		mov	esi, [esi+4]
		push	esi
		call	sub_1001A160
		add	esp, 4
		mov	ebp, eax
		push	esi
		call	sub_10019F10
		mov	esi, ds:memmove
		mov	[esp+24h+var_10], eax
		cmp	ebp, 1
		jnz	short loc_1001AA91
		mov	eax, [edi+5Ch]
		mov	ecx, [eax+8]
		mov	al, byte ptr [esp+24h+var_10+3]
		mov	[ecx], al
		jmp	short loc_1001AAA4
; ---------------------------------------------------------------------------

loc_1001AA91:				; CODE XREF: sub_1001A960+121j
		lea	eax, [esp+24h+var_C]
		sub	eax, ebp
		push	ebp		; Size
		push	eax		; Src
		mov	eax, [edi+5Ch]
		push	dword ptr [eax+8] ; Dst
		call	esi ; memmove
		add	esp, 0Ch

loc_1001AAA4:				; CODE XREF: sub_1001A960+12Fj
		test	byte ptr [edi+70h], 4
		jz	short loc_1001AAC2
		cmp	ebx, 1
		jnz	short loc_1001AAB9
		mov	cl, byte ptr [esp+24h+Size]
		mov	[esp+24h+var_11], cl
		jmp	short loc_1001AAC6
; ---------------------------------------------------------------------------

loc_1001AAB9:				; CODE XREF: sub_1001A960+14Dj
		lea	ecx, [ebx+7Fh]
		mov	[esp+24h+var_11], cl
		jmp	short loc_1001AAC6
; ---------------------------------------------------------------------------

loc_1001AAC2:				; CODE XREF: sub_1001A960+148j
		mov	cl, [esp+24h+var_11]

loc_1001AAC6:				; CODE XREF: sub_1001A960+157j
					; sub_1001A960+160j
		mov	eax, [edi+5Ch]
		mov	eax, [eax+8]
		mov	[eax+1], cl
		test	byte ptr [edi+70h], 4
		jz	short loc_1001AB37
		cmp	ebx, 1
		jle	short loc_1001AB0F
		lea	eax, [ebx-1]
		cmp	eax, 1
		jnz	short loc_1001AAF5
		mov	eax, [edi+5Ch]
		lea	edx, [esp+24h+var_3]
		sub	edx, ebx
		mov	ecx, [eax+8]
		mov	al, [edx]
		mov	[ecx+2], al
		jmp	short loc_1001AB0F
; ---------------------------------------------------------------------------

loc_1001AAF5:				; CODE XREF: sub_1001A960+180j
		lea	eax, [ebx-1]
		push	eax		; Size
		lea	eax, [esp+28h+var_3]
		sub	eax, ebx
		push	eax		; Src
		mov	eax, [edi+5Ch]
		mov	eax, [eax+8]
		add	eax, 2
		push	eax		; Dst
		call	esi ; memmove
		add	esp, 0Ch

loc_1001AB0F:				; CODE XREF: sub_1001A960+178j
					; sub_1001A960+193j
		cmp	ebx, 5
		jz	short loc_1001AB4D
		mov	eax, [edi+5Ch]
		mov	edx, [esp+24h+Size]
		mov	ecx, [eax+8]
		add	ecx, ebp
		cmp	edx, 1
		jnz	short loc_1001AB2D
		mov	al, [ecx+5]
		mov	[ecx+ebx], al
		jmp	short loc_1001AB4D
; ---------------------------------------------------------------------------

loc_1001AB2D:				; CODE XREF: sub_1001A960+1C3j
		lea	eax, [ecx+5]
		push	edx
		push	eax
		lea	eax, [ecx+ebx]
		jmp	short loc_1001AB47
; ---------------------------------------------------------------------------

loc_1001AB37:				; CODE XREF: sub_1001A960+173j
		lea	eax, [esp+24h+Src]
		push	4		; Size
		push	eax		; Src
		mov	eax, [edi+5Ch]
		mov	eax, [eax+8]
		inc	eax
		add	eax, ebp

loc_1001AB47:				; CODE XREF: sub_1001A960+1D5j
		push	eax		; Dst
		call	esi ; memmove
		add	esp, 0Ch

loc_1001AB4D:				; CODE XREF: sub_1001A960+1B2j
					; sub_1001A960+1CBj
		mov	edx, [esp+24h+var_C]
		lea	eax, [ebx+ebp]
		add	eax, [esp+24h+Size]
		mov	esi, [esp+24h+Size]
		add	[edx], eax
		lea	eax, [ebx+ebp]
		add	eax, [esp+24h+Size]
		add	[edx+0Ch], eax

loc_1001AB68:				; CODE XREF: sub_1001A960+A5j
					; sub_1001A960+BFj ...
		cmp	dword ptr [edi+88h], 8
		jle	short loc_1001AB7C
		push	dword ptr [edi+5Ch]
		call	sub_1001C480
		add	esp, 4

loc_1001AB7C:				; CODE XREF: sub_1001A960+20Fj
		dec	dword ptr [edi+88h]
		mov	eax, [esp+24h+var_C]
		mov	[edi+5Ch], eax
		lea	eax, [ebx+ebp]
		add	eax, esi
		pop	esi
		pop	ebp
		pop	edi
		pop	ebx
		add	esp, 14h
		retn
sub_1001A960	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 122. ber_put_seq
; Exported entry 123. ber_put_set

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	ber_put_set(size_t Size)
		public ber_put_set
ber_put_set	proc near		; CODE XREF: sub_10002DD0+153p
					; sub_10002DD0+174p ...

Size		= dword	ptr  4

		push	[esp+Size]	; ber_put_seq
		call	sub_1001A960
		add	esp, 4
		retn	4
ber_put_set	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 116. ber_put_string

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	ber_put_string(int, void *Src, int)
		public ber_put_string
ber_put_string	proc near		; DATA XREF: .rdata:off_10020938o

arg_0		= dword	ptr  4
Src		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	edx, [esp+Src]
		mov	eax, edx
		push	esi
		lea	esi, [eax+1]
		lea	ebx, [ebx+0]

loc_1001ABC0:				; CODE XREF: ber_put_string+15j
		mov	cl, [eax]
		inc	eax
		test	cl, cl
		jnz	short loc_1001ABC0
		push	[esp+4+arg_8]	; int
		sub	eax, esi
		push	eax		; Size
		push	edx		; Src
		push	[esp+10h+arg_0]	; int
		call	ber_put_ostring
		pop	esi
		retn	0Ch
ber_put_string	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1001ABE0	proc near		; CODE XREF: sub_1001A960+60p

var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ecx
		mov	edx, [esp+4+arg_4]
		mov	ecx, 18h
		push	esi
		mov	esi, 3

loc_1001ABF0:				; CODE XREF: sub_1001ABE0+21j
		mov	eax, 0FFh
		shl	eax, cl
		test	edx, eax
		jnz	short loc_1001AC03
		sub	ecx, 8
		dec	esi
		test	ecx, ecx
		jg	short loc_1001ABF0

loc_1001AC03:				; CODE XREF: sub_1001ABE0+19j
		push	edx
		inc	esi
		call	sub_10019F10
		push	[esp+8+arg_8]	; int
		mov	[esp+0Ch+var_4], eax
		lea	eax, [esp+0Ch]
		push	esi		; Size
		sub	eax, esi
		push	eax		; Src
		push	[esp+14h+arg_0]	; int
		call	ber_write
		pop	esi
		pop	ecx
		retn
sub_1001ABE0	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 120. ber_start_seq

; =============== S U B	R O U T	I N E =======================================


		public ber_start_seq
ber_start_seq	proc near		; DATA XREF: .rdata:off_10020938o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_4]
		mov	ecx, 30h
		cmp	eax, 0FFFFFFFFh
		cmovz	eax, ecx
		push	eax
		push	[esp+4+arg_0]
		call	sub_1001AC50
		add	esp, 8
		retn	8
ber_start_seq	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1001AC50	proc near		; CODE XREF: ber_printf+1F2p
					; ber_printf+21Bp ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_0]
		push	edi
		mov	eax, [esi+88h]
		cmp	eax, 8
		jge	short loc_1001AC7C
		lea	eax, [eax+eax*4]
		lea	eax, [eax+23h]
		lea	edi, [esi+eax*4]

loc_1001AC6A:				; CODE XREF: sub_1001AC50+3Aj
		inc	dword ptr [esi+88h]
		mov	eax, [esi+5Ch]
		test	eax, eax
		jnz	short loc_1001AC92
		mov	eax, [esi+54h]
		jmp	short loc_1001AC95
; ---------------------------------------------------------------------------

loc_1001AC7C:				; CODE XREF: sub_1001AC50+Fj
		push	14h
		call	sub_1001C4E0
		mov	edi, eax
		add	esp, 4
		test	edi, edi
		jnz	short loc_1001AC6A
		pop	edi
		or	eax, 0FFFFFFFFh
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1001AC92:				; CODE XREF: sub_1001AC50+25j
		mov	eax, [eax+0Ch]

loc_1001AC95:				; CODE XREF: sub_1001AC50+2Aj
		push	ebx
		mov	ebx, [esp+0Ch+arg_4]
		mov	edx, 3
		mov	[edi+8], eax
		mov	ecx, 18h

loc_1001ACA7:				; CODE XREF: sub_1001AC50+68j
		mov	eax, 0FFh
		shl	eax, cl
		test	ebx, eax
		jnz	short loc_1001ACBA
		sub	ecx, 8
		dec	edx
		test	ecx, ecx
		jg	short loc_1001ACA7

loc_1001ACBA:				; CODE XREF: sub_1001AC50+60j
		mov	eax, [edi+8]
		add	eax, 6
		mov	[edi+4], ebx
		add	eax, edx
		mov	[edi+0Ch], eax
		mov	eax, [esi+5Ch]
		mov	[edi+10h], eax
		mov	dword ptr [edi], 0
		mov	ecx, [esi+58h]
		mov	[esi+5Ch], edi
		mov	eax, [edi+0Ch]
		pop	ebx
		cmp	eax, ecx
		jbe	short loc_1001ACEE
		sub	eax, ecx
		push	eax
		push	esi
		call	sub_1001C2F0
		add	esp, 8

loc_1001ACEE:				; CODE XREF: sub_1001AC50+90j
		pop	edi
		xor	eax, eax
		pop	esi
		retn
sub_1001AC50	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 121. ber_start_set

; =============== S U B	R O U T	I N E =======================================


		public ber_start_set
ber_start_set	proc near		; DATA XREF: .rdata:off_10020938o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_4]
		mov	ecx, 31h
		cmp	eax, 0FFFFFFFFh
		cmovz	eax, ecx
		push	eax
		push	[esp+4+arg_0]
		call	sub_1001AC50
		add	esp, 8
		retn	8
ber_start_set	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1001AD20(int,	void *Dst, int)
sub_1001AD20	proc near		; CODE XREF: ber_get_next+35p
					; ber_get_next+165p ...

var_4		= dword	ptr -4
arg_0		= dword	ptr  4
Dst		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ecx
		push	ebx
		push	ebp
		push	esi
		push	edi
		mov	edi, [esp+14h+arg_8]
		xor	ebx, ebx
		mov	[esp+14h+var_4], ebx
		test	edi, edi
		jle	loc_1001AE6E
		mov	esi, [esp+14h+arg_0]
		mov	ebp, [esp+14h+Dst]
		nop

loc_1001AD40:				; CODE XREF: sub_1001AD20+139j
		mov	eax, [esi+5Ch]
		mov	ecx, [esi+58h]
		sub	eax, ecx
		test	eax, eax
		jle	short loc_1001AD91
		cmp	edi, eax
		mov	ebx, edi
		cmovg	ebx, eax
		cmp	ebx, 1
		jnz	short loc_1001AD71
		mov	al, [ecx]
		add	[esp+14h+var_4], ebx
		mov	[ebp+0], al
		add	ebp, ebx
		add	[esi+58h], ebx
		sub	edi, ebx
		mov	ebx, [esp+14h+var_4]
		jmp	loc_1001AE57
; ---------------------------------------------------------------------------

loc_1001AD71:				; CODE XREF: sub_1001AD20+36j
		push	ebx		; Size
		push	ecx		; Src
		push	ebp		; Dst
		call	ds:memmove
		add	[esi+58h], ebx
		add	ebp, ebx
		add	[esp+20h+var_4], ebx
		add	esp, 0Ch
		sub	edi, ebx
		mov	ebx, [esp+14h+var_4]
		jmp	loc_1001AE57
; ---------------------------------------------------------------------------

loc_1001AD91:				; CODE XREF: sub_1001AD20+2Aj
		cmp	dword ptr [esi+54h], 0
		jnz	short loc_1001ADCA
		mov	eax, dword_10024EB0
		push	2000h		; Size
		test	eax, eax
		jnz	short loc_1001ADAD
		call	ds:malloc
		jmp	short loc_1001ADAF
; ---------------------------------------------------------------------------

loc_1001ADAD:				; CODE XREF: sub_1001AD20+83j
		call	eax ; dword_10024EB0

loc_1001ADAF:				; CODE XREF: sub_1001AD20+8Bj
		add	esp, 4
		mov	[esi+54h], eax
		test	eax, eax
		jz	loc_1001AE67
		and	dword ptr [esi+84h], 0FFFFFFFEh
		mov	[esi+58h], eax
		mov	[esi+5Ch], eax

loc_1001ADCA:				; CODE XREF: sub_1001AD20+75j
		cmp	dword ptr [esi+130h], 0
		jg	loc_1001AE67
		mov	ecx, [esi+15Ch]
		test	ecx, ecx
		jz	short loc_1001AE0C
		test	byte ptr [esi+140h], 8
		jz	short loc_1001ADF4
		mov	eax, edi
		cmp	edi, 2000h
		jl	short loc_1001ADF9

loc_1001ADF4:				; CODE XREF: sub_1001AD20+C8j
		mov	eax, 2000h

loc_1001ADF9:				; CODE XREF: sub_1001AD20+D2j
		push	dword ptr [esi+164h]
		push	eax
		push	dword ptr [esi+54h]
		push	dword ptr [esi]
		call	ecx
		add	esp, 10h
		jmp	short loc_1001AE31
; ---------------------------------------------------------------------------

loc_1001AE0C:				; CODE XREF: sub_1001AD20+BFj
		test	byte ptr [esi+140h], 8
		jz	short loc_1001AE1F
		mov	eax, edi
		cmp	edi, 2000h
		jl	short loc_1001AE24

loc_1001AE1F:				; CODE XREF: sub_1001AD20+F3j
		mov	eax, 2000h

loc_1001AE24:				; CODE XREF: sub_1001AD20+FDj
		push	0
		push	eax
		push	dword ptr [esi+54h]
		push	dword ptr [esi]
		call	sub_10019FD0

loc_1001AE31:				; CODE XREF: sub_1001AD20+EAj
		mov	edx, eax
		test	edx, edx
		jle	short loc_1001AE67
		mov	ecx, [esi+54h]
		lea	eax, [ecx+1]
		mov	[esi+58h], eax
		lea	eax, [ecx+edx]
		mov	[esi+5Ch], eax
		movzx	eax, byte ptr [ecx]
		test	eax, eax
		js	short loc_1001AE6A
		inc	ebx
		mov	[ebp+0], al
		inc	ebp
		mov	[esp+14h+var_4], ebx
		dec	edi

loc_1001AE57:				; CODE XREF: sub_1001AD20+4Cj
					; sub_1001AD20+6Cj
		test	edi, edi
		jg	loc_1001AD40
		pop	edi
		pop	esi
		pop	ebp
		mov	eax, ebx
		pop	ebx
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_1001AE67:				; CODE XREF: sub_1001AD20+97j
					; sub_1001AD20+B1j ...
		or	eax, 0FFFFFFFFh

loc_1001AE6A:				; CODE XREF: sub_1001AD20+12Bj
		test	ebx, ebx
		jle	short loc_1001AE70

loc_1001AE6E:				; CODE XREF: sub_1001AD20+11j
		mov	eax, ebx

loc_1001AE70:				; CODE XREF: sub_1001AD20+14Cj
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		pop	ecx
		retn
sub_1001AD20	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 129. ber_alloc

; =============== S U B	R O U T	I N E =======================================


		public ber_alloc
ber_alloc	proc near		; CODE XREF: ber_dupp
					; DATA XREF: .rdata:off_10020938o
		mov	eax, dword_10024988
		mov	ecx, dword_10024EB4
		add	eax, 12Ch
		push	eax		; SizeOfElements
		push	1		; NumOfElements
		test	ecx, ecx
		jnz	short loc_1001AE9F
		call	ds:calloc
		jmp	short loc_1001AEA1
; ---------------------------------------------------------------------------

loc_1001AE9F:				; CODE XREF: ber_alloc+15j
		call	ecx ; dword_10024EB4

loc_1001AEA1:				; CODE XREF: ber_alloc+1Dj
		add	esp, 8
		test	eax, eax
		jnz	short loc_1001AEA9
		retn
; ---------------------------------------------------------------------------

loc_1001AEA9:				; CODE XREF: ber_alloc+26j
		lea	edx, [eax+12Ch]
		mov	dword ptr [eax+64h], 0FFFFFFFFh
		mov	byte ptr [eax+70h], 0
		mov	[eax+50h], edx
		mov	[eax+54h], edx
		mov	ecx, dword_10024988
		add	ecx, edx
		mov	dword ptr [eax+80h], 1
		mov	[eax+58h], ecx
		retn
ber_alloc	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 135. ber_alloc_t

; =============== S U B	R O U T	I N E =======================================


		public ber_alloc_t
ber_alloc_t	proc near		; CODE XREF: sub_1000EF40+71p
					; DATA XREF: .rdata:off_10020938o

arg_0		= dword	ptr  4

		mov	eax, dword_10024988
		mov	ecx, dword_10024EB4
		add	eax, 12Ch
		push	eax		; SizeOfElements
		push	1		; NumOfElements
		test	ecx, ecx
		jnz	short loc_1001AEFF
		call	ds:calloc
		jmp	short loc_1001AF01
; ---------------------------------------------------------------------------

loc_1001AEFF:				; CODE XREF: ber_alloc_t+15j
		call	ecx ; dword_10024EB4

loc_1001AF01:				; CODE XREF: ber_alloc_t+1Dj
		mov	edx, eax
		add	esp, 8
		test	edx, edx
		jnz	short loc_1001AF0D
		retn	4
; ---------------------------------------------------------------------------

loc_1001AF0D:				; CODE XREF: ber_alloc_t+28j
		mov	eax, [esp+arg_0]
		test	al, 1
		jz	short loc_1001AF1B
		and	eax, 0FFFFFFFEh
		or	eax, 4

loc_1001AF1B:				; CODE XREF: ber_alloc_t+33j
		lea	ecx, [edx+12Ch]
		mov	[edx+70h], al
		mov	dword ptr [edx+64h], 0FFFFFFFFh
		mov	[edx+50h], ecx
		mov	[edx+54h], ecx
		mov	eax, dword_10024988
		add	eax, ecx
		mov	dword ptr [edx+80h], 1
		mov	[edx+58h], eax
		mov	eax, edx
		retn	4
ber_alloc_t	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 130. ber_dup

; =============== S U B	R O U T	I N E =======================================


		public ber_dup
ber_dup		proc near		; CODE XREF: sub_1000A2C0+69p
					; DATA XREF: .rdata:off_10020938o

arg_0		= dword	ptr  4

		call	ber_alloc
		test	eax, eax
		jnz	short loc_1001AF5C
		retn	4
; ---------------------------------------------------------------------------

loc_1001AF5C:				; CODE XREF: ber_dup+7j
		push	esi
		mov	esi, [esp+4+arg_0]
		mov	ecx, 4Bh
		push	edi
		mov	edi, eax
		rep movsd
		pop	edi
		pop	esi
		retn	4
ber_dup		endp

; Exported entry 145. ber_flatten

; =============== S U B	R O U T	I N E =======================================


		public ber_flatten
ber_flatten	proc near		; CODE XREF: sub_100029E0+16p
					; ldap_passwd+195p
					; DATA XREF: ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		push	edi
		mov	edi, dword_10024EB0
		push	8		; Size
		test	edi, edi
		jnz	short loc_1001AF86
		call	ds:malloc
		jmp	short loc_1001AF8E
; ---------------------------------------------------------------------------

loc_1001AF86:				; CODE XREF: ber_flatten+Cj
		call	edi ; dword_10024EB0
		mov	edi, dword_10024EB0

loc_1001AF8E:				; CODE XREF: ber_flatten+14j
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		jnz	short loc_1001AF9F
		pop	edi
		or	eax, 0FFFFFFFFh
		pop	esi
		retn	8
; ---------------------------------------------------------------------------

loc_1001AF9F:				; CODE XREF: ber_flatten+25j
		push	ebx
		push	ebp
		mov	ebp, [esp+10h+arg_0]
		test	ebp, ebp
		jnz	short loc_1001AFBD
		mov	eax, [esp+10h+arg_4]
		mov	[esi+4], ebp
		mov	[esi], ebp
		pop	ebp
		pop	ebx
		mov	[eax], esi
		xor	eax, eax
		pop	edi
		pop	esi
		retn	8
; ---------------------------------------------------------------------------

loc_1001AFBD:				; CODE XREF: ber_flatten+37j
		mov	ebx, [ebp+54h]
		sub	ebx, [ebp+50h]
		lea	eax, [ebx+1]
		push	eax		; Size
		test	edi, edi
		jnz	short loc_1001AFD3
		call	ds:malloc
		jmp	short loc_1001AFD5
; ---------------------------------------------------------------------------

loc_1001AFD3:				; CODE XREF: ber_flatten+59j
		call	edi ; dword_10024EB0

loc_1001AFD5:				; CODE XREF: ber_flatten+61j
		mov	ecx, eax
		add	esp, 4
		mov	[esi+4], ecx
		test	ecx, ecx
		jnz	short loc_1001AFF1
		push	esi
		call	ber_bvfree
		pop	ebp
		pop	ebx
		pop	edi
		or	eax, 0FFFFFFFFh
		pop	esi
		retn	8
; ---------------------------------------------------------------------------

loc_1001AFF1:				; CODE XREF: ber_flatten+6Fj
		cmp	ebx, 1
		jnz	short loc_1001AFFF
		mov	eax, [ebp+50h]
		mov	al, [eax]
		mov	[ecx], al
		jmp	short loc_1001B00D
; ---------------------------------------------------------------------------

loc_1001AFFF:				; CODE XREF: ber_flatten+84j
		push	ebx		; Size
		push	dword ptr [ebp+50h] ; Src
		push	ecx		; Dst
		call	ds:memmove
		add	esp, 0Ch

loc_1001B00D:				; CODE XREF: ber_flatten+8Dj
		mov	eax, [esi+4]
		pop	ebp
		mov	byte ptr [ebx+eax], 0
		mov	eax, [esp+0Ch+arg_4]
		mov	[esi], ebx
		pop	ebx
		pop	edi
		mov	[eax], esi
		xor	eax, eax
		pop	esi
		retn	8
ber_flatten	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 128. ber_flush

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	ber_flush(int, void *Memory, int)
		public ber_flush
ber_flush	proc near		; CODE XREF: sub_1000FB90+44p
					; DATA XREF: .rdata:off_10020938o

arg_0		= dword	ptr  4
Memory		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi
		mov	esi, [esp+4+Memory]
		mov	eax, [esi+74h]
		test	eax, eax
		jnz	loc_1001B0DB
		mov	eax, [esi+50h]
		mov	[esi+74h], eax

loc_1001B046:				; CODE XREF: ber_flush+AEj
		push	ebx
		mov	ebx, [esp+8+arg_0]
		push	edi
		mov	eax, [ebx+168h]
		test	eax, eax
		jz	loc_1001B11E
		xor	edi, edi
		cmp	[esi], edi
		jz	short loc_1001B063
		mov	edi, [esi+4]

loc_1001B063:				; CODE XREF: ber_flush+2Ej
		cmp	dword ptr [esi+8], 0
		jz	short loc_1001B06C
		add	edi, [esi+0Ch]

loc_1001B06C:				; CODE XREF: ber_flush+37j
		cmp	dword ptr [esi+10h], 0
		jz	short loc_1001B075
		add	edi, [esi+14h]

loc_1001B075:				; CODE XREF: ber_flush+40j
		cmp	dword ptr [esi+18h], 0
		jz	short loc_1001B07E
		add	edi, [esi+1Ch]

loc_1001B07E:				; CODE XREF: ber_flush+49j
		cmp	dword ptr [esi+20h], 0
		jz	short loc_1001B087
		add	edi, [esi+24h]

loc_1001B087:				; CODE XREF: ber_flush+52j
		cmp	dword ptr [esi+28h], 0
		jz	short loc_1001B090
		add	edi, [esi+2Ch]

loc_1001B090:				; CODE XREF: ber_flush+5Bj
		cmp	dword ptr [esi+30h], 0
		jz	short loc_1001B099
		add	edi, [esi+34h]

loc_1001B099:				; CODE XREF: ber_flush+64j
		push	dword ptr [ebx+164h]
		push	7
		push	esi
		push	dword ptr [ebx]
		call	eax
		add	esp, 10h
		mov	ebx, eax
		cmp	[esp+0Ch+arg_8], 0
		jz	short loc_1001B108
		test	byte ptr [esi+80h], 1
		jnz	short loc_1001B0F0
		mov	ecx, dword_10024EBC
		mov	eax, [esi+50h]
		push	eax		; Memory
		test	ecx, ecx
		jnz	short loc_1001B0EB
		call	ds:free
		add	esp, 4
		push	esi		; Memory
		call	ds:free
		jmp	short loc_1001B105
; ---------------------------------------------------------------------------

loc_1001B0DB:				; CODE XREF: ber_flush+Aj
		cmp	eax, [esi+58h]
		jb	loc_1001B046
		or	eax, 0FFFFFFFFh
		pop	esi
		retn	0Ch
; ---------------------------------------------------------------------------

loc_1001B0EB:				; CODE XREF: ber_flush+97j
		call	ecx ; dword_10024EBC
		add	esp, 4

loc_1001B0F0:				; CODE XREF: ber_flush+89j
		mov	eax, dword_10024EBC
		test	eax, eax
		jnz	short loc_1001B102
		push	esi		; Memory
		call	ds:free
		jmp	short loc_1001B105
; ---------------------------------------------------------------------------

loc_1001B102:				; CODE XREF: ber_flush+C7j
		push	esi
		call	eax ; dword_10024EBC

loc_1001B105:				; CODE XREF: ber_flush+A9j
					; ber_flush+D0j
		add	esp, 4

loc_1001B108:				; CODE XREF: ber_flush+80j
		test	ebx, ebx
		js	short loc_1001B116
		sub	edi, ebx
		mov	eax, edi
		pop	edi
		pop	ebx
		pop	esi
		retn	0Ch
; ---------------------------------------------------------------------------

loc_1001B116:				; CODE XREF: ber_flush+DAj
		pop	edi
		mov	eax, ebx
		pop	ebx
		pop	esi
		retn	0Ch
; ---------------------------------------------------------------------------

loc_1001B11E:				; CODE XREF: ber_flush+24j
		mov	edi, [esi+54h]
		sub	edi, [esi+74h]
		test	byte ptr [ebx+140h], 3
		jz	short loc_1001B150
		push	edi		; unsigned int
		push	dword ptr [esi+50h] ; void *
		push	dword ptr [ebx+144h] ; int
		call	ds:_write
		add	esp, 0Ch
		test	byte ptr [ebx+140h], 2
		jnz	short loc_1001B1AA
		lea	esp, [esp+0]

loc_1001B150:				; CODE XREF: ber_flush+FBj
					; ber_flush+15Ej
		cmp	dword ptr [ebx+130h], 0
		jg	short loc_1001B1A7
		mov	eax, [ebx+160h]
		test	eax, eax
		jz	short loc_1001B176
		push	dword ptr [ebx+164h]
		push	edi
		push	dword ptr [esi+74h]
		push	dword ptr [ebx]
		call	eax
		add	esp, 10h
		jmp	short loc_1001B183
; ---------------------------------------------------------------------------

loc_1001B176:				; CODE XREF: ber_flush+131j
		push	0
		push	edi
		push	dword ptr [esi+74h]
		push	dword ptr [ebx]
		call	sub_1001A0A0

loc_1001B183:				; CODE XREF: ber_flush+144j
		test	eax, eax
		jle	short loc_1001B1A7
		add	[esi+74h], eax
		sub	edi, eax
		test	edi, edi
		jg	short loc_1001B150
		cmp	[esp+0Ch+arg_8], 0
		jz	short loc_1001B19F
		push	1		; int
		push	esi		; Memory
		call	ber_free

loc_1001B19F:				; CODE XREF: ber_flush+165j
		pop	edi
		pop	ebx
		xor	eax, eax
		pop	esi
		retn	0Ch
; ---------------------------------------------------------------------------

loc_1001B1A7:				; CODE XREF: ber_flush+127j
					; ber_flush+155j
		or	eax, 0FFFFFFFFh

loc_1001B1AA:				; CODE XREF: ber_flush+117j
		pop	edi
		pop	ebx
		pop	esi
		retn	0Ch
ber_flush	endp

; Exported entry 127. ber_free

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	ber_free(void *Memory, int)
		public ber_free
ber_free	proc near		; CODE XREF: sub_10001000+1CBp
					; sub_10001510+3Bp ...

Memory		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+Memory]
		test	esi, esi
		jz	short loc_1001B210
		cmp	[esp+4+arg_4], 0
		jz	short loc_1001B1F3
		test	byte ptr [esi+80h], 1
		jnz	short loc_1001B1F3
		mov	ecx, dword_10024EBC
		mov	eax, [esi+50h]
		push	eax		; Memory
		test	ecx, ecx
		jnz	short loc_1001B1EE
		call	ds:free
		add	esp, 4
		push	esi		; Memory
		call	ds:free
		add	esp, 4
		pop	esi
		retn	8
; ---------------------------------------------------------------------------

loc_1001B1EE:				; CODE XREF: ber_free+25j
		call	ecx ; dword_10024EBC
		add	esp, 4

loc_1001B1F3:				; CODE XREF: ber_free+Ej ber_free+17j
		mov	eax, dword_10024EBC
		test	eax, eax
		jnz	short loc_1001B20A
		push	esi		; Memory
		call	ds:free
		add	esp, 4
		pop	esi
		retn	8
; ---------------------------------------------------------------------------

loc_1001B20A:				; CODE XREF: ber_free+4Aj
		push	esi
		call	eax ; dword_10024EBC
		add	esp, 4

loc_1001B210:				; CODE XREF: ber_free+7j
		pop	esi
		retn	8
ber_free	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 154. ber_get_buf_databegin

; =============== S U B	R O U T	I N E =======================================


		public ber_get_buf_databegin
ber_get_buf_databegin proc near		; DATA XREF: .rdata:off_10020938o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		test	eax, eax
		jz	short loc_1001B22E
		mov	eax, [eax+50h]
		retn	4
; ---------------------------------------------------------------------------

loc_1001B22E:				; CODE XREF: ber_get_buf_databegin+6j
		xor	eax, eax
		retn	4
ber_get_buf_databegin endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 153. ber_get_buf_datalen

; =============== S U B	R O U T	I N E =======================================


		public ber_get_buf_datalen
ber_get_buf_datalen proc near		; DATA XREF: .rdata:off_10020938o

arg_0		= dword	ptr  4

		mov	ecx, [esp+arg_0]
		test	ecx, ecx
		jz	short loc_1001B265
		mov	edx, [ecx+50h]
		test	edx, edx
		jz	short loc_1001B265
		mov	eax, [ecx+54h]
		test	eax, eax
		jz	short loc_1001B265
		mov	ecx, [ecx+5Ch]
		test	ecx, ecx
		jz	short loc_1001B260
		mov	eax, [ecx+0Ch]

loc_1001B260:				; CODE XREF: ber_get_buf_datalen+1Bj
		sub	eax, edx
		retn	4
; ---------------------------------------------------------------------------

loc_1001B265:				; CODE XREF: ber_get_buf_datalen+6j
					; ber_get_buf_datalen+Dj ...
		xor	eax, eax
		retn	4
ber_get_buf_datalen endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 131. ber_get_next

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	ber_get_next(int, int, int Dst)
		public ber_get_next
ber_get_next	proc near		; CODE XREF: sub_10011680+79p
					; DATA XREF: .rdata:off_10020938o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
Dst		= dword	ptr  0Ch

		push	ebx
		push	ebp
		push	esi
		mov	esi, [esp+0Ch+Dst]
		push	edi
		mov	eax, [esi+74h]
		mov	ebp, eax
		test	eax, eax
		jnz	short loc_1001B284
		mov	ebp, [esi+50h]

loc_1001B284:				; CODE XREF: ber_get_next+Fj
		mov	ebx, [esp+10h+arg_0]
		jnz	loc_1001B3C3
		mov	eax, [esi+60h]
		mov	[esp+10h+arg_0], eax
		test	eax, eax
		jnz	loc_1001B323
		push	1		; int
		lea	eax, [esp+14h+Dst]
		push	eax		; Dst
		push	ebx		; int
		call	sub_1001AD20
		add	esp, 0Ch
		cmp	eax, 1
		jz	short loc_1001B2B7
		or	eax, 0FFFFFFFFh
		jmp	short loc_1001B2D5
; ---------------------------------------------------------------------------

loc_1001B2B7:				; CODE XREF: ber_get_next+40j
		mov	cl, byte ptr [esp+10h+Dst]
		mov	al, cl
		and	al, 1Fh
		cmp	al, 1Fh
		jnz	short loc_1001B2C8
		or	eax, 0FFFFFFFFh
		jmp	short loc_1001B2D5
; ---------------------------------------------------------------------------

loc_1001B2C8:				; CODE XREF: ber_get_next+51j
		mov	[esi+38h], cl
		mov	dword ptr [esi+4], 1
		movzx	eax, cl

loc_1001B2D5:				; CODE XREF: ber_get_next+45j
					; ber_get_next+56j
		mov	[esi+64h], eax
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_1001B2F1
		mov	eax, [esp+10h+arg_4]
		pop	edi
		pop	esi
		pop	ebp
		mov	dword ptr [eax], 0
		or	eax, 0FFFFFFFFh
		pop	ebx
		retn	0Ch
; ---------------------------------------------------------------------------

loc_1001B2F1:				; CODE XREF: ber_get_next+6Bj
		mov	[esi+38h], al
		mov	dword ptr [esi+60h], 1
		test	dword ptr [ebx+140h], 200h
		jz	short loc_1001B323
		cmp	eax, [ebx+14Ch]
		jz	short loc_1001B323
		mov	eax, [esp+10h+arg_4]
		pop	edi
		pop	esi
		pop	ebp
		mov	dword ptr [eax], 1
		or	eax, 0FFFFFFFFh
		pop	ebx
		retn	0Ch
; ---------------------------------------------------------------------------

loc_1001B323:				; CODE XREF: ber_get_next+27j
					; ber_get_next+95j ...
		push	esi		; Dst
		push	ebx		; int
		call	sub_1001C580
		mov	edi, eax
		add	esp, 8
		cmp	edi, 0FFFFFFFFh
		jnz	short loc_1001B34A
		mov	ecx, [esi+60h]
		mov	eax, [esp+10h+arg_4]
		sub	ecx, [esp+10h+arg_0]
		mov	[eax], ecx
		or	eax, edi
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn	0Ch
; ---------------------------------------------------------------------------

loc_1001B34A:				; CODE XREF: ber_get_next+C2j
		test	byte ptr [ebx+140h], 4
		jz	short loc_1001B35F
		cmp	edi, [ebx+148h]
		ja	loc_1001B411

loc_1001B35F:				; CODE XREF: ber_get_next+E1j
		mov	eax, [esi+58h]
		mov	ecx, [esi+50h]
		sub	eax, ecx
		cmp	eax, edi
		jnb	short loc_1001B3AA
		test	ecx, ecx
		jz	short loc_1001B381
		test	byte ptr [esi+80h], 1
		jnz	short loc_1001B381
		push	ecx
		call	sub_1001C480
		add	esp, 4

loc_1001B381:				; CODE XREF: ber_get_next+FDj
					; ber_get_next+106j
		mov	eax, dword_10024EB4
		push	edi		; SizeOfElements
		push	1		; NumOfElements
		test	eax, eax
		jnz	short loc_1001B395
		call	ds:calloc
		jmp	short loc_1001B397
; ---------------------------------------------------------------------------

loc_1001B395:				; CODE XREF: ber_get_next+11Bj
		call	eax ; dword_10024EB4

loc_1001B397:				; CODE XREF: ber_get_next+123j
		mov	ebp, eax
		add	esp, 8
		mov	[esi+50h], ebp
		test	ebp, ebp
		jz	short loc_1001B411
		and	dword ptr [esi+80h], 0FFFFFFFEh

loc_1001B3AA:				; CODE XREF: ber_get_next+F9j
		mov	ecx, [esi+50h]
		mov	[esi+68h], edi
		mov	[esi+54h], ecx
		mov	[esi+74h], ecx
		lea	eax, [ecx+edi]
		mov	dword ptr [esi+60h], 0
		mov	[esi+58h], eax

loc_1001B3C3:				; CODE XREF: ber_get_next+18j
		mov	edi, [esi+58h]
		sub	edi, [esi+74h]
		lea	esp, [esp+0]

loc_1001B3D0:				; CODE XREF: ber_get_next+179j
		push	edi		; int
		push	dword ptr [esi+74h] ; Dst
		push	ebx		; int
		call	sub_1001AD20
		add	esp, 0Ch
		test	eax, eax
		jle	short loc_1001B406
		add	[esi+74h], eax
		mov	edx, [esi+74h]
		sub	edi, eax
		jnz	short loc_1001B3D0
		mov	ecx, [esp+10h+arg_4]
		sub	edx, ebp
		mov	[ecx], edx
		mov	ecx, [esi+68h]
		mov	[esi+74h], edi
		pop	edi
		mov	[esi+1Ch], ecx
		mov	eax, [esi+64h]
		pop	esi
		pop	ebp
		pop	ebx
		retn	0Ch
; ---------------------------------------------------------------------------

loc_1001B406:				; CODE XREF: ber_get_next+16Fj
		mov	ecx, [esi+74h]
		mov	eax, [esp+10h+arg_4]
		sub	ecx, ebp
		mov	[eax], ecx

loc_1001B411:				; CODE XREF: ber_get_next+E9j
					; ber_get_next+131j
		pop	edi
		pop	esi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		retn	0Ch
ber_get_next	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 148. ber_get_next_buffer

; =============== S U B	R O U T	I N E =======================================


		public ber_get_next_buffer
ber_get_next_buffer proc near		; DATA XREF: .rdata:off_10020938o

arg_0		= dword	ptr  4
Src		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	0		; int
		push	[esp+4+arg_10]	; int
		push	[esp+8+arg_C]	; int
		push	[esp+0Ch+arg_8]	; int
		push	[esp+10h+Src]	; Src
		push	[esp+14h+arg_0]	; int
		call	ber_get_next_buffer_ext
		retn	14h
ber_get_next_buffer endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 151. ber_get_next_buffer_ext

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	ber_get_next_buffer_ext(int, void *Src,	int, int, int, int)
		public ber_get_next_buffer_ext
ber_get_next_buffer_ext	proc near	; CODE XREF: ber_get_next_buffer+16p
					; DATA XREF: .rdata:off_10020938o

var_10		= dword	ptr -10h
Dst		= dword	ptr -0Ch
var_8		= qword	ptr -8
arg_0		= dword	ptr  4
Src		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		sub	esp, 10h
		mov	eax, [esp+10h+arg_0]
		xorps	xmm0, xmm0
		mov	edx, [esp+10h+Src]
		push	ebx
		push	ebp
		push	esi
		push	edi
		mov	edi, [esp+20h+arg_C]
		movq	[esp+20h+var_8], xmm0
		mov	[esp+20h+Dst], eax
		mov	dword ptr [esp+20h+var_8+4], edx
		cmp	dword ptr [edi+74h], 0
		jnz	loc_1001B668
		cmp	dword ptr [edi+64h], 0FFFFFFFFh
		jnz	short loc_1001B489
		lea	eax, [esp+20h+Dst]
		push	eax		; Dst
		call	sub_1001C220
		add	esp, 4
		cmp	eax, 0FFFFFFFFh
		jz	short loc_1001B4F7
		mov	[edi+64h], eax

loc_1001B489:				; CODE XREF: ber_get_next_buffer_ext+32j
		mov	ebp, [esp+20h+arg_14]
		test	dword ptr [ebp+140h], 200h
		jz	short loc_1001B4C7
		mov	eax, [edi+64h]
		cmp	eax, [ebp+14Ch]
		jz	short loc_1001B4C7
		call	ds:_errno
		pop	edi
		pop	esi
		pop	ebp
		mov	dword ptr [eax], 16h
		mov	eax, [esp+14h+arg_10]
		pop	ebx
		mov	dword ptr [eax], 0
		or	eax, 0FFFFFFFFh
		add	esp, 10h
		retn	18h
; ---------------------------------------------------------------------------

loc_1001B4C7:				; CODE XREF: ber_get_next_buffer_ext+57j
					; ber_get_next_buffer_ext+62j
		mov	eax, [edi+60h]
		test	eax, eax
		jz	short loc_1001B520
		movsx	esi, byte ptr [edi+3Dh]
		and	esi, 7Fh
		sub	esi, eax
		add	eax, 3Dh
		inc	esi
		add	eax, edi
		push	esi		; Size
		push	eax		; Dst
		lea	eax, [esp+28h+Dst]
		push	eax		; int
		call	sub_1001C520
		add	esp, 0Ch
		cmp	eax, esi
		jz	short loc_1001B50E
		test	eax, eax
		jle	short loc_1001B4F7
		add	[edi+60h], eax

loc_1001B4F7:				; CODE XREF: ber_get_next_buffer_ext+44j
					; ber_get_next_buffer_ext+B2j ...
		mov	ebx, dword ptr [esp+20h+var_8]

loc_1001B4FB:				; CODE XREF: ber_get_next_buffer_ext+24Dj
		mov	eax, [esp+20h+arg_10]
		pop	edi
		pop	esi
		pop	ebp
		mov	[eax], ebx
		or	eax, 0FFFFFFFFh
		pop	ebx
		add	esp, 10h
		retn	18h
; ---------------------------------------------------------------------------

loc_1001B50E:				; CODE XREF: ber_get_next_buffer_ext+AEj
		push	edi
		call	sub_1001C1C0
		mov	ebx, [esp+24h+arg_8]
		add	esp, 4
		jmp	loc_1001B5F4
; ---------------------------------------------------------------------------

loc_1001B520:				; CODE XREF: ber_get_next_buffer_ext+8Cj
		mov	ebx, [esp+20h+arg_8]
		lea	eax, [esp+20h+arg_C]
		push	1		; Size
		push	eax		; Dst
		lea	eax, [esp+28h+Dst]
		mov	[esp+28h+var_10], 0
		push	eax		; int
		mov	dword ptr [ebx], 0
		call	sub_1001C520
		add	esp, 0Ch
		cmp	eax, 1
		jnz	short loc_1001B4F7
		mov	al, byte ptr [esp+20h+arg_C]
		test	al, al
		jns	loc_1001B5F1
		movzx	esi, al
		and	esi, 7Fh
		cmp	esi, 4
		jbe	short loc_1001B587

loc_1001B562:				; CODE XREF: ber_get_next_buffer_ext+1D1j
		call	ds:_errno
		pop	edi
		pop	esi
		pop	ebp
		mov	dword ptr [eax], 2738h
		mov	eax, [esp+14h+arg_10]
		pop	ebx
		mov	dword ptr [eax], 0
		mov	eax, 0FFFFFFFDh
		add	esp, 10h
		retn	18h
; ---------------------------------------------------------------------------

loc_1001B587:				; CODE XREF: ber_get_next_buffer_ext+120j
		mov	eax, 4
		lea	ecx, [esp+20h+var_10]
		sub	eax, esi
		add	eax, ecx
		push	esi		; Size
		push	eax		; Dst
		mov	[esp+28h+Src], eax
		lea	eax, [esp+28h+Dst]
		push	eax		; int
		call	sub_1001C520
		mov	ecx, eax
		add	esp, 0Ch
		cmp	ecx, esi
		jz	short loc_1001B5E6
		lea	eax, [ecx+1]
		mov	[edi+60h], eax
		mov	al, byte ptr [esp+20h+arg_C]
		mov	[edi+3Dh], al
		add	edi, 3Eh
		mov	eax, [esp+20h+Src]
		mov	dword ptr [edi], 0
		cmp	ecx, 1
		jnz	short loc_1001B5D5
		mov	al, [eax]
		mov	[edi], al
		jmp	loc_1001B4F7
; ---------------------------------------------------------------------------

loc_1001B5D5:				; CODE XREF: ber_get_next_buffer_ext+18Aj
		push	ecx		; Size
		push	eax		; Src
		push	edi		; Dst
		call	ds:memmove
		add	esp, 0Ch
		jmp	loc_1001B4F7
; ---------------------------------------------------------------------------

loc_1001B5E6:				; CODE XREF: ber_get_next_buffer_ext+16Bj
		push	[esp+20h+var_10]
		call	sub_10019FB0
		jmp	short loc_1001B5F4
; ---------------------------------------------------------------------------

loc_1001B5F1:				; CODE XREF: ber_get_next_buffer_ext+111j
		movzx	eax, al

loc_1001B5F4:				; CODE XREF: ber_get_next_buffer_ext+DBj
					; ber_get_next_buffer_ext+1AFj
		mov	[ebx], eax
		mov	[edi+68h], eax
		mov	dword ptr [edi+60h], 0
		test	byte ptr [ebp+140h], 4
		jz	short loc_1001B617
		mov	eax, [ebx]
		cmp	eax, [ebp+148h]
		ja	loc_1001B562

loc_1001B617:				; CODE XREF: ber_get_next_buffer_ext+1C7j
		mov	eax, [edi+50h]
		mov	ecx, [ebx]
		add	eax, ecx
		cmp	eax, [edi+58h]
		jbe	short loc_1001B648
		push	ecx
		push	edi
		call	sub_1001C2F0
		add	esp, 8
		test	eax, eax
		jz	short loc_1001B648
		mov	eax, [esp+20h+arg_10]
		pop	edi
		pop	esi
		pop	ebp
		mov	dword ptr [eax], 0
		or	eax, 0FFFFFFFFh
		pop	ebx
		add	esp, 10h
		retn	18h
; ---------------------------------------------------------------------------

loc_1001B648:				; CODE XREF: ber_get_next_buffer_ext+1E1j
					; ber_get_next_buffer_ext+1EFj
		mov	ecx, [edi+50h]
		mov	edx, dword ptr [esp+20h+var_8+4]
		mov	[edi+54h], ecx
		mov	eax, [ebx]
		add	eax, ecx
		mov	[edi+74h], ecx
		mov	[edi+58h], eax
		mov	eax, [esp+20h+Dst]
		mov	[esp+20h+Src], edx
		mov	[esp+20h+arg_0], eax

loc_1001B668:				; CODE XREF: ber_get_next_buffer_ext+28j
		mov	ebp, [edi+58h]
		sub	ebp, [edi+74h]
		mov	ebx, dword ptr [esp+20h+var_8]

loc_1001B672:				; CODE XREF: ber_get_next_buffer_ext+270j
		mov	ecx, [edi+74h]
		mov	esi, edx
		sub	esi, ebx
		cmp	ebp, esi
		cmovle	esi, ebp
		cmp	esi, 1
		jnz	short loc_1001B68B
		mov	al, [ebx+eax]
		inc	ebx
		mov	[ecx], al
		jmp	short loc_1001B6A7
; ---------------------------------------------------------------------------

loc_1001B68B:				; CODE XREF: ber_get_next_buffer_ext+241j
		test	esi, esi
		jle	loc_1001B4FB
		push	esi		; Size
		add	eax, ebx
		push	eax		; Src
		push	ecx		; Dst
		call	ds:memmove
		mov	edx, [esp+2Ch+Src]
		add	esp, 0Ch
		add	ebx, esi

loc_1001B6A7:				; CODE XREF: ber_get_next_buffer_ext+249j
		add	[edi+74h], esi
		mov	eax, [esp+20h+arg_0]
		sub	ebp, esi
		jnz	short loc_1001B672
		mov	edx, [esp+20h+arg_8]
		mov	ecx, [edi+68h]
		mov	[edx], ecx
		mov	ecx, [esp+20h+arg_10]
		mov	[ecx], ebx
		mov	eax, [edi+64h]
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		add	esp, 10h
		retn	18h
ber_get_next_buffer_ext	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 139. ber_get_option

; =============== S U B	R O U T	I N E =======================================


		public ber_get_option
ber_get_option	proc near		; CODE XREF: sub_10002C10+1Bp
					; sub_10005730+Bp
					; DATA XREF: ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi
		mov	esi, [esp+4+arg_4]
		cmp	esi, 20h
		jnz	short loc_1001B6F0
		mov	eax, [esp+4+arg_8]
		movdqu	xmm0, xmmword ptr dword_10024EB0
		movdqu	xmmword	ptr [eax], xmm0

loc_1001B6EA:				; CODE XREF: ber_get_option+23j
		xor	eax, eax
		pop	esi
		retn	0Ch
; ---------------------------------------------------------------------------

loc_1001B6F0:				; CODE XREF: ber_get_option+8j
		cmp	esi, 40h
		jz	short loc_1001B6EA
		cmp	esi, 80h
		jnz	short loc_1001B70E
		mov	ecx, [esp+4+arg_8]
		mov	eax, dword_10024988
		pop	esi
		mov	[ecx], eax
		xor	eax, eax
		retn	0Ch
; ---------------------------------------------------------------------------

loc_1001B70E:				; CODE XREF: ber_get_option+2Bj
		mov	edx, [esp+4+arg_0]
		test	edx, edx
		jz	short loc_1001B774 ; jumptable 1001B725	default	case
		lea	eax, [esi-1]	; switch 16 cases
		cmp	eax, 0Fh
		ja	short loc_1001B774 ; jumptable 1001B725	default	case
		movzx	eax, ds:byte_1001B790[eax]
		jmp	ds:off_1001B77C[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_1001B72C:				; CODE XREF: ber_get_option+55j
					; DATA XREF: .text:off_1001B77Co
		mov	eax, [esp+4+arg_8] ; jumptable 1001B725	cases 4,8
		movsx	ecx, byte ptr [edx+70h]
		and	ecx, esi
		pop	esi
		mov	[eax], ecx
		xor	eax, eax
		retn	0Ch
; ---------------------------------------------------------------------------

loc_1001B73E:				; CODE XREF: ber_get_option+55j
					; DATA XREF: .text:off_1001B77Co
		mov	eax, [esp+4+arg_8] ; jumptable 1001B725	case 1
		mov	ecx, [edx+58h]
		sub	ecx, [edx+54h]
		pop	esi
		mov	[eax], ecx
		xor	eax, eax
		retn	0Ch
; ---------------------------------------------------------------------------

loc_1001B750:				; CODE XREF: ber_get_option+55j
					; DATA XREF: .text:off_1001B77Co
		mov	eax, [esp+4+arg_8] ; jumptable 1001B725	case 2
		mov	ecx, [edx+58h]
		sub	ecx, [edx+50h]
		pop	esi
		mov	[eax], ecx
		xor	eax, eax
		retn	0Ch
; ---------------------------------------------------------------------------

loc_1001B762:				; CODE XREF: ber_get_option+55j
					; DATA XREF: .text:off_1001B77Co
		mov	eax, [esp+4+arg_8] ; jumptable 1001B725	case 16
		mov	ecx, [edx+54h]
		sub	ecx, [edx+50h]
		pop	esi
		mov	[eax], ecx
		xor	eax, eax
		retn	0Ch
; ---------------------------------------------------------------------------

loc_1001B774:				; CODE XREF: ber_get_option+44j
					; ber_get_option+4Cj ...
		or	eax, 0FFFFFFFFh	; jumptable 1001B725 default case
		pop	esi
		retn	0Ch
ber_get_option	endp

; ---------------------------------------------------------------------------
		align 4
off_1001B77C	dd offset loc_1001B73E	; DATA XREF: ber_get_option+55r
		dd offset loc_1001B750	; jump table for switch	statement
		dd offset loc_1001B72C
		dd offset loc_1001B762
		dd offset loc_1001B774
byte_1001B790	db	0,     1,     4,     2 ; DATA XREF: ber_get_option+4Er
		db	4,     4,     4,     2 ; indirect table	for switch statement
		db	4,     4,     4,     4
		db	4,     4,     4,     3
; Exported entry 144. ber_init

; =============== S U B	R O U T	I N E =======================================


		public ber_init
ber_init	proc near		; CODE XREF: ldap_parse_entrychange_control+6Ep
					; ldap_parse_passwd+85p ...

arg_0		= dword	ptr  4

		mov	eax, dword_10024988
		mov	ecx, dword_10024EB4
		add	eax, 12Ch
		push	esi
		push	edi
		push	eax		; SizeOfElements
		push	1		; NumOfElements
		test	ecx, ecx
		jnz	short loc_1001B7C1
		call	ds:calloc
		jmp	short loc_1001B7C3
; ---------------------------------------------------------------------------

loc_1001B7C1:				; CODE XREF: ber_init+17j
		call	ecx ; dword_10024EB4

loc_1001B7C3:				; CODE XREF: ber_init+1Fj
		mov	edi, eax
		add	esp, 8
		test	edi, edi
		jnz	short loc_1001B7FA

loc_1001B7CC:				; CODE XREF: ber_init+98j
		mov	eax, [edi+54h]
		mov	ecx, [edi+50h]
		push	38h		; Size
		push	0		; Val
		push	edi		; Dst
		mov	[edi+58h], eax
		mov	[edi+54h], ecx
		mov	dword ptr [edi+74h], 0
		mov	dword ptr [edi+60h], 0
		call	memset
		add	esp, 0Ch
		mov	eax, edi
		pop	edi
		pop	esi
		retn	4
; ---------------------------------------------------------------------------

loc_1001B7FA:				; CODE XREF: ber_init+2Aj
		mov	esi, [esp+8+arg_0]
		lea	ecx, [edi+12Ch]
		mov	dword ptr [edi+64h], 0FFFFFFFFh
		mov	byte ptr [edi+70h], 0
		mov	[edi+50h], ecx
		mov	[edi+54h], ecx
		mov	eax, dword_10024988
		push	0		; int
		add	eax, ecx
		mov	dword ptr [edi+80h], 1
		mov	[edi+58h], eax
		push	dword ptr [esi]	; Size
		push	dword ptr [esi+4] ; Src
		push	edi		; int
		call	ber_write
		cmp	eax, [esi]
		jz	short loc_1001B7CC
		test	byte ptr [edi+80h], 1
		mov	esi, ds:free
		jnz	short loc_1001B86E
		mov	ecx, dword_10024EBC
		mov	eax, [edi+50h]
		push	eax		; Memory
		test	ecx, ecx
		jnz	short loc_1001B869
		call	esi ; free
		add	esp, 4
		push	edi		; Memory
		call	esi ; free
		add	esp, 4
		xor	eax, eax
		pop	edi
		pop	esi
		retn	4
; ---------------------------------------------------------------------------

loc_1001B869:				; CODE XREF: ber_init+B5j
		call	ecx ; dword_10024EBC
		add	esp, 4

loc_1001B86E:				; CODE XREF: ber_init+A7j
		mov	eax, dword_10024EBC
		test	eax, eax
		jnz	short loc_1001B884
		push	edi		; Memory
		call	esi ; free
		add	esp, 4
		xor	eax, eax
		pop	edi
		pop	esi
		retn	4
; ---------------------------------------------------------------------------

loc_1001B884:				; CODE XREF: ber_init+D5j
		push	edi
		call	eax ; dword_10024EBC
		add	esp, 4
		xor	eax, eax
		pop	edi
		pop	esi
		retn	4
ber_init	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 137. ber_init_w_nullchar

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	ber_init_w_nullchar(void *Dst, int)
		public ber_init_w_nullchar
ber_init_w_nullchar proc near		; DATA XREF: .rdata:off_10020938o

Dst		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+Dst]
		push	12Ch		; Size
		push	0		; Val
		push	esi		; Dst
		call	memset
		mov	eax, [esp+10h+arg_4]
		add	esp, 0Ch
		mov	dword ptr [esi+64h], 0FFFFFFFFh
		test	al, 1
		jz	short loc_1001B8CA
		and	eax, 0FFFFFFFEh
		or	eax, 4

loc_1001B8CA:				; CODE XREF: ber_init_w_nullchar+22j
		mov	[esi+70h], al
		pop	esi
		retn	8
ber_init_w_nullchar endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 125. ber_read

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	ber_read(int, void *Dst, int)
		public ber_read
ber_read	proc near		; CODE XREF: ber_get_bitstringa+4Dp
					; ber_get_bitstringa+76p ...

arg_0		= dword	ptr  4
Dst		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi
		mov	esi, [esp+4+arg_8]
		push	edi
		mov	edi, [esp+8+arg_0]
		mov	ecx, [edi+58h]
		mov	eax, [edi+54h]
		sub	ecx, eax
		cmp	ecx, esi
		cmovb	esi, ecx
		cmp	esi, 1
		jnz	short loc_1001B90E
		mov	ecx, [esp+8+Dst]
		mov	dl, [eax]
		mov	eax, esi
		mov	[ecx], dl
		add	[edi+54h], esi
		pop	edi
		pop	esi
		retn	0Ch
; ---------------------------------------------------------------------------

loc_1001B90E:				; CODE XREF: ber_read+1Aj
		push	esi		; Size
		push	eax		; Src
		push	[esp+10h+Dst]	; Dst
		call	ds:memmove
		add	[edi+54h], esi
		add	esp, 0Ch
		mov	eax, esi
		pop	edi
		pop	esi
		retn	0Ch
ber_read	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 138. ber_reset

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	ber_reset(void *Dst, int)
		public ber_reset
ber_reset	proc near		; CODE XREF: sub_10010810+9Bp
					; DATA XREF: .rdata:off_10020938o

Dst		= dword	ptr  4
arg_4		= dword	ptr  8

		cmp	[esp+arg_4], 0
		mov	ecx, [esp+Dst]
		jz	short loc_1001B946
		mov	eax, [ecx+54h]
		mov	[ecx+58h], eax
		mov	eax, [ecx+50h]
		jmp	short loc_1001B949
; ---------------------------------------------------------------------------

loc_1001B946:				; CODE XREF: ber_reset+9j
		mov	eax, [ecx+58h]

loc_1001B949:				; CODE XREF: ber_reset+14j
		push	38h		; Size
		push	0		; Val
		push	ecx		; Dst
		mov	[ecx+54h], eax
		mov	dword ptr [ecx+74h], 0
		mov	dword ptr [ecx+60h], 0
		call	memset
		add	esp, 0Ch
		retn	8
ber_reset	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 140. ber_set_option

; =============== S U B	R O U T	I N E =======================================


		public ber_set_option
ber_set_option	proc near		; CODE XREF: ldap_first_attribute+7Cp
					; ldap_set_option+70p
					; DATA XREF: ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	ecx, [esp+arg_4]
		cmp	ecx, 20h
		jnz	short loc_1001B98E
		mov	eax, [esp+arg_8]
		movdqu	xmm0, xmmword ptr [eax]
		movdqu	xmmword	ptr dword_10024EB0, xmm0

loc_1001B989:				; CODE XREF: ber_set_option+21j
		xor	eax, eax
		retn	0Ch
; ---------------------------------------------------------------------------

loc_1001B98E:				; CODE XREF: ber_set_option+7j
		cmp	ecx, 40h
		jz	short loc_1001B989
		cmp	ecx, 80h
		jnz	short loc_1001B9BA
		mov	eax, [esp+arg_8]
		mov	ecx, dword_10024988
		mov	eax, [eax]
		cmp	eax, 400h
		cmova	ecx, eax
		xor	eax, eax
		mov	dword_10024988,	ecx
		retn	0Ch
; ---------------------------------------------------------------------------

loc_1001B9BA:				; CODE XREF: ber_set_option+29j
		mov	edx, [esp+arg_0]
		test	edx, edx
		jz	short loc_1001BA24 ; jumptable 1001B9D1	default	case
		lea	eax, [ecx-1]	; switch 16 cases
		cmp	eax, 0Fh
		ja	short loc_1001BA24 ; jumptable 1001B9D1	default	case
		movzx	eax, ds:byte_1001BA40[eax]
		jmp	ds:off_1001BA2C[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_1001B9D8:				; CODE XREF: ber_set_option+61j
					; DATA XREF: .text:off_1001BA2Co
		cmp	[esp+arg_8], 0	; jumptable 1001B9D1 cases 4,8
		jz	short loc_1001B9E7
		or	[edx+70h], cl
		xor	eax, eax
		retn	0Ch
; ---------------------------------------------------------------------------

loc_1001B9E7:				; CODE XREF: ber_set_option+6Dj
		not	cl
		and	[edx+70h], cl
		xor	eax, eax
		retn	0Ch
; ---------------------------------------------------------------------------

loc_1001B9F1:				; CODE XREF: ber_set_option+61j
					; DATA XREF: .text:off_1001BA2Co
		mov	eax, [esp+arg_8] ; jumptable 1001B9D1 case 1
		mov	ecx, [edx+54h]
		add	ecx, [eax]
		xor	eax, eax
		mov	[edx+58h], ecx
		retn	0Ch
; ---------------------------------------------------------------------------

loc_1001BA02:				; CODE XREF: ber_set_option+61j
					; DATA XREF: .text:off_1001BA2Co
		mov	eax, [esp+arg_8] ; jumptable 1001B9D1 case 2
		mov	ecx, [edx+50h]
		add	ecx, [eax]
		xor	eax, eax
		mov	[edx+58h], ecx
		retn	0Ch
; ---------------------------------------------------------------------------

loc_1001BA13:				; CODE XREF: ber_set_option+61j
					; DATA XREF: .text:off_1001BA2Co
		mov	eax, [esp+arg_8] ; jumptable 1001B9D1 case 16
		mov	ecx, [edx+50h]
		add	ecx, [eax]
		xor	eax, eax
		mov	[edx+54h], ecx
		retn	0Ch
; ---------------------------------------------------------------------------

loc_1001BA24:				; CODE XREF: ber_set_option+50j
					; ber_set_option+58j ...
		or	eax, 0FFFFFFFFh	; jumptable 1001B9D1 default case
		retn	0Ch
ber_set_option	endp

; ---------------------------------------------------------------------------
		align 4
off_1001BA2C	dd offset loc_1001B9F1	; DATA XREF: ber_set_option+61r
		dd offset loc_1001BA02	; jump table for switch	statement
		dd offset loc_1001B9D8
		dd offset loc_1001BA13
		dd offset loc_1001BA24
byte_1001BA40	db	0,     1,     4,     2 ; DATA XREF: ber_set_option+5Ar
		db	4,     4,     4,     2 ; indirect table	for switch statement
		db	4,     4,     4,     4
		db	4,     4,     4,     3
; Exported entry 141. ber_sockbuf_alloc

; =============== S U B	R O U T	I N E =======================================


		public ber_sockbuf_alloc
ber_sockbuf_alloc proc near		; CODE XREF: ldap_init:loc_1000B28Dp
					; sub_1000F7B0+22p
					; DATA XREF: ...
		mov	eax, dword_10024EB4
		push	16Ch		; SizeOfElements
		push	1		; NumOfElements
		test	eax, eax
		jnz	short loc_1001BA6A
		call	ds:calloc
		add	esp, 8
		retn
; ---------------------------------------------------------------------------

loc_1001BA6A:				; CODE XREF: ber_sockbuf_alloc+Ej
		call	eax ; dword_10024EB4
		add	esp, 8
		retn
ber_sockbuf_alloc endp

; Exported entry 150. ber_sockbuf_free

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	ber_sockbuf_free(void *Memory)
		public ber_sockbuf_free
ber_sockbuf_free proc near		; CODE XREF: ldap_init+19Fp
					; sub_1000F5E0+B1p ...

Memory		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+Memory]
		test	esi, esi
		jz	short loc_1001BACD
		mov	eax, [esi+54h]
		test	eax, eax
		jz	short loc_1001BAB0
		test	byte ptr [esi+84h], 1
		jnz	short loc_1001BAB0
		mov	ecx, dword_10024EBC
		push	eax		; Memory
		test	ecx, ecx
		jnz	short loc_1001BAAB
		call	ds:free
		add	esp, 4
		push	esi		; Memory
		call	ds:free
		add	esp, 4
		pop	esi
		retn	4
; ---------------------------------------------------------------------------

loc_1001BAAB:				; CODE XREF: ber_sockbuf_free+22j
		call	ecx ; dword_10024EBC
		add	esp, 4

loc_1001BAB0:				; CODE XREF: ber_sockbuf_free+Ej
					; ber_sockbuf_free+17j
		mov	eax, dword_10024EBC
		test	eax, eax
		jnz	short loc_1001BAC7
		push	esi		; Memory
		call	ds:free
		add	esp, 4
		pop	esi
		retn	4
; ---------------------------------------------------------------------------

loc_1001BAC7:				; CODE XREF: ber_sockbuf_free+47j
		push	esi
		call	eax ; dword_10024EBC
		add	esp, 4

loc_1001BACD:				; CODE XREF: ber_sockbuf_free+7j
		pop	esi
		retn	4
ber_sockbuf_free endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 156. ber_sockbuf_free_data

; =============== S U B	R O U T	I N E =======================================


		public ber_sockbuf_free_data
ber_sockbuf_free_data proc near		; DATA XREF: .rdata:off_10020938o

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		test	esi, esi
		jz	short loc_1001BB24
		mov	eax, [esi+54h]
		test	eax, eax
		jz	short loc_1001BB24
		test	byte ptr [esi+84h], 1
		jnz	short loc_1001BB24
		mov	ecx, dword_10024EBC
		push	eax		; Memory
		test	ecx, ecx
		jnz	short loc_1001BB18
		call	ds:free
		add	esp, 4
		mov	dword ptr [esi+54h], 0
		pop	esi
		retn	4
; ---------------------------------------------------------------------------

loc_1001BB18:				; CODE XREF: ber_sockbuf_free_data+22j
		call	ecx ; dword_10024EBC
		add	esp, 4
		mov	dword ptr [esi+54h], 0

loc_1001BB24:				; CODE XREF: ber_sockbuf_free_data+7j
					; ber_sockbuf_free_data+Ej ...
		pop	esi
		retn	4
ber_sockbuf_free_data endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 142. ber_sockbuf_get_option

; =============== S U B	R O U T	I N E =======================================


		public ber_sockbuf_get_option
ber_sockbuf_get_option proc near	; CODE XREF: ldap_get_option+163p
					; sub_1000F7B0+D1p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	edx, [esp+arg_0]
		test	edx, edx
		jz	loc_1001BC4D
		mov	ecx, [esp+arg_8]
		test	ecx, ecx
		jz	loc_1001BC4D
		push	esi
		mov	esi, [esp+4+arg_4]
		cmp	esi, 40h
		jg	short loc_1001BBB2
		jz	short loc_1001BBA4
		lea	eax, [esi-1]	; switch 32 cases
		cmp	eax, 1Fh
		ja	loc_1001BC38	; jumptable 1001BB67 default case
		movzx	eax, ds:byte_1001BC68[eax]
		jmp	ds:off_1001BC54[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_1001BB6E:				; CODE XREF: ber_sockbuf_get_option+37j
					; DATA XREF: .text:off_1001BC54o
		mov	eax, [edx+148h]	; jumptable 1001BB67 case 4
		mov	[ecx], eax
		xor	eax, eax
		pop	esi
		retn	0Ch
; ---------------------------------------------------------------------------

loc_1001BB7C:				; CODE XREF: ber_sockbuf_get_option+37j
					; DATA XREF: .text:off_1001BC54o
		mov	eax, [edx+140h]	; jumptable 1001BB67 cases 1,2,8
		and	eax, esi
		mov	[ecx], eax
		xor	eax, eax
		pop	esi
		retn	0Ch
; ---------------------------------------------------------------------------

loc_1001BB8C:				; CODE XREF: ber_sockbuf_get_option+37j
					; DATA XREF: .text:off_1001BC54o
		mov	eax, [edx]	; jumptable 1001BB67 case 16
		mov	[ecx], eax
		xor	eax, eax
		pop	esi
		retn	0Ch
; ---------------------------------------------------------------------------

loc_1001BB96:				; CODE XREF: ber_sockbuf_get_option+37j
					; DATA XREF: .text:off_1001BC54o
		mov	eax, [edx+144h]	; jumptable 1001BB67 case 32
		mov	[ecx], eax
		xor	eax, eax
		pop	esi
		retn	0Ch
; ---------------------------------------------------------------------------

loc_1001BBA4:				; CODE XREF: ber_sockbuf_get_option+22j
		mov	eax, [edx+150h]
		mov	[ecx], eax
		xor	eax, eax
		pop	esi
		retn	0Ch
; ---------------------------------------------------------------------------

loc_1001BBB2:				; CODE XREF: ber_sockbuf_get_option+20j
		cmp	esi, 200h
		jg	short loc_1001BC30
		jz	short loc_1001BC22
		cmp	esi, 80h
		jz	short loc_1001BC14
		cmp	esi, 100h
		jnz	short loc_1001BC38 ; jumptable 1001BB67	default	case
		mov	eax, [ecx]
		cmp	eax, 14h
		jnz	short loc_1001BBEE
		movdqu	xmm0, xmmword ptr [edx+158h]
		pop	esi
		movdqu	xmmword	ptr [ecx], xmm0
		mov	eax, [edx+168h]
		mov	[ecx+10h], eax
		xor	eax, eax
		retn	0Ch
; ---------------------------------------------------------------------------

loc_1001BBEE:				; CODE XREF: ber_sockbuf_get_option+A1j
		cmp	eax, 10h
		jnz	short loc_1001BC38 ; jumptable 1001BB67	default	case
		mov	eax, [edx+15Ch]
		mov	[ecx+4], eax
		mov	eax, [edx+160h]
		mov	[ecx+8], eax
		mov	eax, [edx+164h]
		mov	[ecx+0Ch], eax
		xor	eax, eax
		pop	esi
		retn	0Ch
; ---------------------------------------------------------------------------

loc_1001BC14:				; CODE XREF: ber_sockbuf_get_option+92j
		mov	eax, [edx+154h]
		mov	[ecx], eax
		xor	eax, eax
		pop	esi
		retn	0Ch
; ---------------------------------------------------------------------------

loc_1001BC22:				; CODE XREF: ber_sockbuf_get_option+8Aj
		mov	eax, [edx+14Ch]
		mov	[ecx], eax
		xor	eax, eax
		pop	esi
		retn	0Ch
; ---------------------------------------------------------------------------

loc_1001BC30:				; CODE XREF: ber_sockbuf_get_option+88j
		cmp	esi, 400h
		jz	short loc_1001BC3F

loc_1001BC38:				; CODE XREF: ber_sockbuf_get_option+2Aj
					; ber_sockbuf_get_option+37j ...
		or	eax, 0FFFFFFFFh	; jumptable 1001BB67 default case
		pop	esi
		retn	0Ch
; ---------------------------------------------------------------------------

loc_1001BC3F:				; CODE XREF: ber_sockbuf_get_option+106j
		mov	eax, [edx+164h]
		mov	[ecx], eax
		xor	eax, eax
		pop	esi
		retn	0Ch
; ---------------------------------------------------------------------------

loc_1001BC4D:				; CODE XREF: ber_sockbuf_get_option+6j
					; ber_sockbuf_get_option+12j
		or	eax, 0FFFFFFFFh
		retn	0Ch
ber_sockbuf_get_option endp

; ---------------------------------------------------------------------------
		align 4
off_1001BC54	dd offset loc_1001BB7C	; DATA XREF: ber_sockbuf_get_option+37r
		dd offset loc_1001BB6E	; jump table for switch	statement
		dd offset loc_1001BB8C
		dd offset loc_1001BB96
		dd offset loc_1001BC38
byte_1001BC68	db	0,     0,     4,     1 ; DATA XREF: ber_sockbuf_get_option+30r
		db	4,     4,     4,     0 ; indirect table	for switch statement
		db	4,     4,     4,     4
		db	4,     4,     4,     2
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     3
		align 10h
; Exported entry 143. ber_sockbuf_set_option

; =============== S U B	R O U T	I N E =======================================


		public ber_sockbuf_set_option
ber_sockbuf_set_option proc near	; CODE XREF: ldap_init+173p
					; sub_1000C2D0+48p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	ecx, [esp+arg_0]
		test	ecx, ecx
		jnz	short loc_1001BC9E
		or	eax, 0FFFFFFFFh
		retn	0Ch
; ---------------------------------------------------------------------------

loc_1001BC9E:				; CODE XREF: ber_sockbuf_set_option+6j
		mov	edx, [esp+arg_4]
		push	esi
		mov	esi, [esp+4+arg_8]
		test	esi, esi
		jnz	short loc_1001BCE4 ; jumptable 1001BCC9	cases 1,2,4,8
		cmp	edx, 40h
		jg	short loc_1001BCD0
		jz	loc_1001BD61
		lea	eax, [edx-1]	; switch 8 cases
		cmp	eax, 7
		ja	loc_1001BE71	; jumptable 1001BCC9 default case
		movzx	eax, ds:byte_1001BE8C[eax]
		jmp	ds:off_1001BE84[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_1001BCD0:				; CODE XREF: ber_sockbuf_set_option+1Ej
		cmp	edx, 80h
		jz	short loc_1001BCE4 ; jumptable 1001BCC9	cases 1,2,4,8
		cmp	edx, 100h
		jnz	loc_1001BE71	; jumptable 1001BCC9 default case

loc_1001BCE4:				; CODE XREF: ber_sockbuf_set_option+19j
					; ber_sockbuf_set_option+39j ...
		cmp	edx, 40h	; jumptable 1001BCC9 cases 1,2,4,8
		jg	loc_1001BD9B
		jz	short loc_1001BD61
		lea	eax, [edx-1]	; switch 32 cases
		cmp	eax, 1Fh
		ja	loc_1001BE71	; jumptable 1001BCC9 default case
		movzx	eax, ds:byte_1001BEA8[eax]
		jmp	ds:off_1001BE94[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_1001BD09:				; CODE XREF: ber_sockbuf_set_option+72j
					; DATA XREF: .text:off_1001BE94o
		test	esi, esi	; jumptable 1001BD02 case 4
		jz	short loc_1001BD21
		mov	eax, [esi]
		or	[ecx+140h], edx
		mov	[ecx+148h], eax
		xor	eax, eax
		pop	esi
		retn	0Ch
; ---------------------------------------------------------------------------

loc_1001BD21:				; CODE XREF: ber_sockbuf_set_option+7Bj
		mov	dword ptr [ecx+148h], 0

loc_1001BD2B:				; CODE XREF: ber_sockbuf_set_option+ABj
		not	edx
		and	[ecx+140h], edx
		xor	eax, eax
		pop	esi
		retn	0Ch
; ---------------------------------------------------------------------------

loc_1001BD39:				; CODE XREF: ber_sockbuf_set_option+72j
					; DATA XREF: .text:off_1001BE94o
		test	esi, esi	; jumptable 1001BD02 cases 1,2,8
		jz	short loc_1001BD2B
		or	[ecx+140h], edx
		xor	eax, eax
		pop	esi
		retn	0Ch
; ---------------------------------------------------------------------------

loc_1001BD49:				; CODE XREF: ber_sockbuf_set_option+72j
					; DATA XREF: .text:off_1001BE94o
		mov	eax, [esi]	; jumptable 1001BD02 case 16
		mov	[ecx], eax
		xor	eax, eax
		pop	esi
		retn	0Ch
; ---------------------------------------------------------------------------

loc_1001BD53:				; CODE XREF: ber_sockbuf_set_option+72j
					; DATA XREF: .text:off_1001BE94o
		mov	eax, [esi]	; jumptable 1001BD02 case 32
		mov	[ecx+144h], eax
		xor	eax, eax
		pop	esi
		retn	0Ch
; ---------------------------------------------------------------------------

loc_1001BD61:				; CODE XREF: ber_sockbuf_set_option+20j
					; ber_sockbuf_set_option+5Dj
		mov	[ecx+150h], esi
		xor	eax, eax
		mov	dword ptr [ecx+158h], 14h
		mov	dword ptr [ecx+15Ch], offset loc_1001C440
		mov	dword ptr [ecx+160h], offset loc_1001C460
		mov	dword ptr [ecx+168h], 0
		mov	[ecx+164h], ecx
		pop	esi
		retn	0Ch
; ---------------------------------------------------------------------------

loc_1001BD9B:				; CODE XREF: ber_sockbuf_set_option+57j
		cmp	edx, 200h
		jg	loc_1001BE69
		jz	loc_1001BE51
		cmp	edx, 80h
		jz	loc_1001BE3C
		cmp	edx, 100h
		jnz	loc_1001BE71	; jumptable 1001BCC9 default case
		test	esi, esi
		jnz	short loc_1001BDE0
		xorps	xmm0, xmm0
		xor	eax, eax
		movdqu	xmmword	ptr [ecx+158h],	xmm0
		mov	[ecx+168h], esi
		pop	esi
		retn	0Ch
; ---------------------------------------------------------------------------

loc_1001BDE0:				; CODE XREF: ber_sockbuf_set_option+137j
		mov	eax, [esi]
		cmp	eax, 14h
		jnz	short loc_1001BE02
		movdqu	xmm0, xmmword ptr [esi]
		movdqu	xmmword	ptr [ecx+158h],	xmm0
		mov	eax, [esi+10h]
		mov	[ecx+168h], eax
		xor	eax, eax
		pop	esi
		retn	0Ch
; ---------------------------------------------------------------------------

loc_1001BE02:				; CODE XREF: ber_sockbuf_set_option+155j
		cmp	eax, 10h
		jnz	short loc_1001BE71 ; jumptable 1001BCC9	default	case
		mov	dword ptr [ecx+158h], 14h
		mov	eax, [esi+4]
		mov	[ecx+15Ch], eax
		mov	eax, [esi+8]
		mov	[ecx+160h], eax
		mov	dword ptr [ecx+168h], 0
		mov	eax, [esi+0Ch]
		mov	[ecx+164h], eax
		xor	eax, eax
		pop	esi
		retn	0Ch
; ---------------------------------------------------------------------------

loc_1001BE3C:				; CODE XREF: ber_sockbuf_set_option+123j
		push	ecx
		mov	[ecx+154h], esi
		call	sub_1001C4A0
		add	esp, 4
		xor	eax, eax
		pop	esi
		retn	0Ch
; ---------------------------------------------------------------------------

loc_1001BE51:				; CODE XREF: ber_sockbuf_set_option+117j
		mov	eax, [esi]
		or	dword ptr [ecx+140h], 200h
		mov	[ecx+14Ch], eax
		xor	eax, eax
		pop	esi
		retn	0Ch
; ---------------------------------------------------------------------------

loc_1001BE69:				; CODE XREF: ber_sockbuf_set_option+111j
		cmp	edx, 400h
		jz	short loc_1001BE78

loc_1001BE71:				; CODE XREF: ber_sockbuf_set_option+2Cj
					; ber_sockbuf_set_option+39j ...
		or	eax, 0FFFFFFFFh	; jumptable 1001BCC9 default case
		pop	esi
		retn	0Ch
; ---------------------------------------------------------------------------

loc_1001BE78:				; CODE XREF: ber_sockbuf_set_option+1DFj
		mov	[ecx+164h], esi
		xor	eax, eax
		pop	esi
		retn	0Ch
ber_sockbuf_set_option endp

; ---------------------------------------------------------------------------
off_1001BE84	dd offset loc_1001BCE4	; DATA XREF: ber_sockbuf_set_option+39r
		dd offset loc_1001BE71	; jump table for switch	statement
byte_1001BE8C	db	0,     0,     1,     0 ; DATA XREF: ber_sockbuf_set_option+32r
		db	1,     1,     1,     0 ; indirect table	for switch statement
off_1001BE94	dd offset loc_1001BD39	; DATA XREF: ber_sockbuf_set_option+72r
		dd offset loc_1001BD09	; jump table for switch	statement
		dd offset loc_1001BD49
		dd offset loc_1001BD53
		dd offset loc_1001BE71
byte_1001BEA8	db	0,     0,     4,     1 ; DATA XREF: ber_sockbuf_set_option+6Br
		db	4,     4,     4,     0 ; indirect table	for switch statement
		db	4,     4,     4,     4
		db	4,     4,     4,     2
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     3
		align 10h
; Exported entry 146. ber_special_alloc

; =============== S U B	R O U T	I N E =======================================


		public ber_special_alloc
ber_special_alloc proc near		; DATA XREF: .rdata:off_10020938o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebx
		push	esi
		mov	esi, [esp+8+arg_0]
		mov	ecx, esi
		and	ecx, 3
		jz	short loc_1001BEE6
		mov	eax, 4
		sub	eax, ecx
		add	esi, eax

loc_1001BEE6:				; CODE XREF: ber_special_alloc+Bj
		mov	eax, dword_10024988
		mov	ecx, dword_10024EB0
		add	eax, 12Ch
		add	eax, esi
		push	eax		; Size
		test	ecx, ecx
		jnz	short loc_1001BF05
		call	ds:malloc
		jmp	short loc_1001BF07
; ---------------------------------------------------------------------------

loc_1001BF05:				; CODE XREF: ber_special_alloc+2Bj
		call	ecx ; dword_10024EB0

loc_1001BF07:				; CODE XREF: ber_special_alloc+33j
		mov	ebx, eax
		add	esp, 4
		test	ebx, ebx
		jnz	short loc_1001BF15
		pop	esi
		pop	ebx
		retn	8
; ---------------------------------------------------------------------------

loc_1001BF15:				; CODE XREF: ber_special_alloc+3Ej
		push	edi
		mov	edi, [esp+0Ch+arg_4]
		add	esi, ebx
		push	12Ch		; Size
		push	0		; Val
		push	esi		; Dst
		mov	[edi], esi
		call	memset
		mov	eax, [edi]
		lea	ecx, [esi+12Ch]
		add	esp, 0Ch
		mov	dword ptr [eax+64h], 0FFFFFFFFh
		mov	eax, [edi]
		mov	[eax+50h], ecx
		mov	ecx, [edi]
		mov	eax, [ecx+50h]
		mov	[ecx+54h], eax
		mov	ecx, [edi]
		mov	eax, [ecx+50h]
		add	eax, dword_10024988
		mov	[ecx+58h], eax
		mov	eax, [edi]
		pop	edi
		pop	esi
		mov	dword ptr [eax+80h], 1
		mov	eax, ebx
		pop	ebx
		retn	8
ber_special_alloc endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 147. ber_special_free

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	ber_special_free(void *Memory, int)
		public ber_special_free
ber_special_free proc near		; DATA XREF: .rdata:off_10020938o

Memory		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_4]
		test	byte ptr [eax+80h], 1
		jnz	short loc_1001BFA9
		mov	ecx, dword_10024EBC
		mov	eax, [eax+50h]
		push	eax		; Memory
		test	ecx, ecx
		jnz	short loc_1001BFA4
		call	ds:free
		add	esp, 4
		push	[esp+Memory]	; Memory
		call	ds:free
		add	esp, 4
		retn	8
; ---------------------------------------------------------------------------

loc_1001BFA4:				; CODE XREF: ber_special_free+19j
		call	ecx ; dword_10024EBC
		add	esp, 4

loc_1001BFA9:				; CODE XREF: ber_special_free+Bj
		mov	eax, dword_10024EBC
		test	eax, eax
		jnz	short loc_1001BFC2
		push	[esp+Memory]	; Memory
		call	ds:free
		add	esp, 4
		retn	8
; ---------------------------------------------------------------------------

loc_1001BFC2:				; CODE XREF: ber_special_free+40j
		push	[esp+Memory]
		call	eax ; dword_10024EBC
		pop	ecx
		retn	8
ber_special_free endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 155. ber_stack_init

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	ber_stack_init(void *Dst, int, int, size_t Size)
		public ber_stack_init
ber_stack_init	proc near		; DATA XREF: .rdata:off_10020938o

Dst		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
Size		= dword	ptr  10h

		push	esi
		mov	esi, [esp+4+Dst]
		test	esi, esi
		jnz	short loc_1001BFDF
		xor	eax, eax
		pop	esi
		retn	10h
; ---------------------------------------------------------------------------

loc_1001BFDF:				; CODE XREF: ber_stack_init+7j
		push	12Ch		; Size
		push	0		; Val
		push	esi		; Dst
		call	memset
		mov	eax, [esp+10h+arg_4]
		add	esp, 0Ch
		test	al, 1
		jz	short loc_1001BFFD
		and	eax, 0FFFFFFFEh
		or	eax, 4

loc_1001BFFD:				; CODE XREF: ber_stack_init+25j
		mov	[esi+70h], al
		mov	eax, [esi+50h]
		mov	dword ptr [esi+64h], 0FFFFFFFFh
		test	eax, eax
		jz	short loc_1001C02F
		test	byte ptr [esi+80h], 1
		jnz	short loc_1001C02F
		mov	ecx, dword_10024EBC
		push	eax		; Memory
		test	ecx, ecx
		jnz	short loc_1001C02A
		call	ds:free
		jmp	short loc_1001C02C
; ---------------------------------------------------------------------------

loc_1001C02A:				; CODE XREF: ber_stack_init+50j
		call	ecx ; dword_10024EBC

loc_1001C02C:				; CODE XREF: ber_stack_init+58j
		add	esp, 4

loc_1001C02F:				; CODE XREF: ber_stack_init+3Cj
					; ber_stack_init+45j
		mov	eax, [esp+4+arg_8]
		push	edi
		mov	edi, [esp+8+Size]
		test	eax, eax
		jz	short loc_1001C048
		mov	dword ptr [esi+80h], 1
		jmp	short loc_1001C05F
; ---------------------------------------------------------------------------

loc_1001C048:				; CODE XREF: ber_stack_init+6Aj
		mov	eax, dword_10024EB0
		push	edi		; Size
		test	eax, eax
		jnz	short loc_1001C05A
		call	ds:malloc
		jmp	short loc_1001C05C
; ---------------------------------------------------------------------------

loc_1001C05A:				; CODE XREF: ber_stack_init+80j
		call	eax ; dword_10024EB0

loc_1001C05C:				; CODE XREF: ber_stack_init+88j
		add	esp, 4

loc_1001C05F:				; CODE XREF: ber_stack_init+76j
		mov	ecx, eax
		mov	[esi+50h], eax
		mov	[esi+54h], eax
		lea	eax, [ecx+edi]
		mov	[esi+58h], eax
		xor	eax, eax
		test	ecx, ecx
		pop	edi
		setnz	al
		pop	esi
		retn	10h
ber_stack_init	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 126. ber_write

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	ber_write(int, void *Src, size_t Size, int)
		public ber_write
ber_write	proc near		; CODE XREF: sub_10010510+22Ep
					; ber_put_bitstring+4Dp ...

arg_0		= dword	ptr  4
Src		= dword	ptr  8
Size		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		cmp	[esp+arg_C], 0
		push	esi
		mov	esi, [esp+4+arg_0]
		push	edi
		jnz	short loc_1001C0F8
		mov	eax, [esi+5Ch]
		test	eax, eax
		jz	short loc_1001C0F8
		mov	eax, [eax+0Ch]
		mov	edi, [esp+8+Size]
		add	eax, edi
		cmp	eax, [esi+58h]
		jbe	short loc_1001C0B0
		push	edi
		push	esi
		call	sub_1001C2F0
		add	esp, 8
		test	eax, eax
		jnz	short loc_1001C114

loc_1001C0B0:				; CODE XREF: ber_write+20j
		mov	eax, [esi+5Ch]
		cmp	edi, 1
		jnz	short loc_1001C0D5
		mov	ecx, [eax+0Ch]
		mov	eax, [esp+8+Src]
		mov	al, [eax]
		mov	[ecx], al
		mov	eax, edi
		mov	ecx, [esi+5Ch]
		add	[ecx+0Ch], edi
		mov	ecx, [esi+5Ch]
		add	[ecx], edi
		pop	edi
		pop	esi
		retn	10h
; ---------------------------------------------------------------------------

loc_1001C0D5:				; CODE XREF: ber_write+36j
		push	edi		; Size
		push	[esp+0Ch+Src]	; Src
		push	dword ptr [eax+0Ch] ; Dst
		call	ds:memmove
		mov	ecx, [esi+5Ch]
		add	esp, 0Ch
		mov	eax, edi
		add	[ecx+0Ch], edi
		mov	ecx, [esi+5Ch]
		add	[ecx], edi
		pop	edi
		pop	esi
		retn	10h
; ---------------------------------------------------------------------------

loc_1001C0F8:				; CODE XREF: ber_write+Bj
					; ber_write+12j
		mov	eax, [esi+54h]
		mov	edi, [esp+8+Size]
		add	eax, edi
		cmp	eax, [esi+58h]
		jbe	short loc_1001C11C
		push	edi
		push	esi
		call	sub_1001C2F0
		add	esp, 8
		test	eax, eax
		jz	short loc_1001C11C

loc_1001C114:				; CODE XREF: ber_write+2Ej
		pop	edi
		or	eax, 0FFFFFFFFh
		pop	esi
		retn	10h
; ---------------------------------------------------------------------------

loc_1001C11C:				; CODE XREF: ber_write+84j
					; ber_write+92j
		cmp	edi, 1
		jnz	short loc_1001C136
		mov	eax, [esp+8+Src]
		mov	ecx, [esi+54h]
		mov	al, [eax]
		mov	[ecx], al
		mov	eax, edi
		add	[esi+54h], edi
		pop	edi
		pop	esi
		retn	10h
; ---------------------------------------------------------------------------

loc_1001C136:				; CODE XREF: ber_write+9Fj
		push	edi		; Size
		push	[esp+0Ch+Src]	; Src
		push	dword ptr [esi+54h] ; Dst
		call	ds:memmove
		add	[esi+54h], edi
		add	esp, 0Ch
		mov	eax, edi
		pop	edi
		pop	esi
		retn	10h
ber_write	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 134. der_alloc

; =============== S U B	R O U T	I N E =======================================


		public der_alloc
der_alloc	proc near		; DATA XREF: .rdata:off_10020938o
		mov	eax, dword_10024988
		mov	ecx, dword_10024EB4
		add	eax, 12Ch
		push	eax		; SizeOfElements
		push	1		; NumOfElements
		test	ecx, ecx
		jnz	short loc_1001C17F
		call	ds:calloc
		jmp	short loc_1001C181
; ---------------------------------------------------------------------------

loc_1001C17F:				; CODE XREF: der_alloc+15j
		call	ecx ; dword_10024EB4

loc_1001C181:				; CODE XREF: der_alloc+1Dj
		add	esp, 8
		test	eax, eax
		jnz	short loc_1001C189
		retn
; ---------------------------------------------------------------------------

loc_1001C189:				; CODE XREF: der_alloc+26j
		lea	edx, [eax+12Ch]
		mov	dword ptr [eax+64h], 0FFFFFFFFh
		mov	byte ptr [eax+70h], 4
		mov	[eax+50h], edx
		mov	[eax+54h], edx
		mov	ecx, dword_10024988
		add	ecx, edx
		mov	dword ptr [eax+80h], 1
		mov	[eax+58h], ecx
		retn
der_alloc	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1001C1C0	proc near		; CODE XREF: ber_get_next_buffer_ext+CFp
					; sub_1001C580+8Bp ...

var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		push	ecx
		mov	eax, [esp+4+arg_0]
		mov	[esp+4+var_4], 0
		mov	cl, [eax+3Dh]
		test	cl, cl
		jns	short loc_1001C218
		movsx	ecx, cl
		and	ecx, 7Fh
		cmp	ecx, 5
		jb	short loc_1001C1E3
		or	eax, 0FFFFFFFFh
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_1001C1E3:				; CODE XREF: sub_1001C1C0+1Cj
		cmp	ecx, 1
		jnz	short loc_1001C1F9
		mov	al, [eax+3Eh]
		mov	byte ptr [esp+4+var_4+3], al
		push	[esp+4+var_4]
		call	sub_10019FB0
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_1001C1F9:				; CODE XREF: sub_1001C1C0+26j
		add	eax, 3Eh
		push	ecx		; Size
		push	eax		; Src
		lea	eax, [esp+0Ch]
		sub	eax, ecx
		push	eax		; Dst
		call	ds:memmove
		add	esp, 0Ch
		push	[esp+4+var_4]
		call	sub_10019FB0
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_1001C218:				; CODE XREF: sub_1001C1C0+11j
		movsx	eax, cl
		pop	ecx
		retn
sub_1001C1C0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1001C220(int Dst)
sub_1001C220	proc near		; CODE XREF: ber_get_next_buffer_ext+39p

var_4		= dword	ptr -4
Dst		= dword	ptr  4

		push	ecx
		push	ebx
		push	esi
		push	edi
		mov	edi, [esp+10h+Dst]
		mov	ebx, [edi+8]
		mov	esi, ebx
		mov	ecx, [edi+4]
		sub	esi, ecx
		cmp	esi, 1
		jge	short loc_1001C25A
		test	esi, esi
		jle	short loc_1001C252
		mov	eax, [edi]
		add	eax, ecx
		push	esi		; Size
		push	eax		; Src
		lea	eax, [esp+18h+Dst]
		push	eax		; Dst
		call	ds:memmove
		add	esp, 0Ch
		add	[edi+4], esi

loc_1001C252:				; CODE XREF: sub_1001C220+19j
		pop	edi
		pop	esi
		or	eax, 0FFFFFFFFh
		pop	ebx
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_1001C25A:				; CODE XREF: sub_1001C220+15j
		push	ebp
		mov	ebp, [edi]
		mov	dl, [ecx+ebp]
		inc	ecx
		mov	al, dl
		mov	byte ptr [esp+14h+Dst],	dl
		and	al, 1Fh
		mov	[edi+4], ecx
		cmp	al, 1Fh
		jz	short loc_1001C279
		pop	ebp
		pop	edi
		pop	esi
		movzx	eax, dl
		pop	ebx
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_1001C279:				; CODE XREF: sub_1001C220+4Ej
		mov	byte ptr [esp+14h+var_4], dl
		mov	edx, 1

loc_1001C282:				; CODE XREF: sub_1001C220+84j
		mov	esi, ebx
		sub	esi, ecx
		cmp	esi, 1
		jge	short loc_1001C28D
		jnz	short loc_1001C2BE

loc_1001C28D:				; CODE XREF: sub_1001C220+69j
		mov	al, [ecx+ebp]
		inc	ecx
		mov	byte ptr [esp+14h+Dst],	al
		mov	[edi+4], ecx
		mov	byte ptr [esp+edx+14h+var_4], al
		test	al, al
		jns	short loc_1001C2A6
		inc	edx
		cmp	edx, 4
		jb	short loc_1001C282

loc_1001C2A6:				; CODE XREF: sub_1001C220+7Ej
		cmp	edx, 4
		jz	short loc_1001C2DA
		mov	eax, [esp+14h+var_4]
		mov	ecx, 3
		pop	ebp
		pop	edi
		sub	ecx, edx
		pop	esi
		shr	eax, cl
		pop	ebx
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_1001C2BE:				; CODE XREF: sub_1001C220+6Bj
		test	esi, esi
		jle	short loc_1001C2DA
		mov	eax, [edi+4]
		add	eax, ebp
		push	esi		; Size
		push	eax		; Src
		lea	eax, [esp+1Ch+Dst]
		push	eax		; Dst
		call	ds:memmove
		add	esp, 0Ch
		add	[edi+4], esi

loc_1001C2DA:				; CODE XREF: sub_1001C220+89j
					; sub_1001C220+A0j
		pop	ebp
		pop	edi
		pop	esi
		or	eax, 0FFFFFFFFh
		pop	ebx
		pop	ecx
		retn
sub_1001C220	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1001C2F0	proc near		; CODE XREF: sub_1001AC50+96p
					; ber_get_next_buffer_ext+1E5p	...

var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ecx
		push	ebx
		push	ebp
		push	esi
		mov	esi, [esp+10h+arg_0]
		xor	edx, edx
		push	edi
		xor	ecx, ecx
		mov	[esp+14h+var_4], ecx
		mov	ebp, [esi+58h]
		mov	edi, [esi+50h]
		sub	ebp, edi
		inc	dword ptr [esi+84h]
		mov	eax, ebp
		div	dword_10024988
		mov	edx, [esp+14h+arg_4]
		mov	ebx, [esi+84h]
		mov	[esp+14h+arg_0], eax
		mov	eax, dword_10024988
		cmp	edx, eax
		jnb	short loc_1001C333
		lea	edx, [ecx+1]
		jmp	short loc_1001C345
; ---------------------------------------------------------------------------

loc_1001C333:				; CODE XREF: sub_1001C2F0+3Cj
		dec	eax
		add	eax, edx
		xor	edx, edx
		div	dword_10024988
		mov	edx, eax
		mov	eax, dword_10024988

loc_1001C345:				; CODE XREF: sub_1001C2F0+41j
		imul	ebx, edx
		add	ebx, [esp+14h+arg_0]
		imul	ebx, eax
		push	ebx		; Size
		test	edi, edi
		jnz	short loc_1001C383
		mov	eax, dword_10024EB0
		test	eax, eax
		jnz	short loc_1001C365
		call	ds:malloc
		jmp	short loc_1001C367
; ---------------------------------------------------------------------------

loc_1001C365:				; CODE XREF: sub_1001C2F0+6Bj
		call	eax ; dword_10024EB0

loc_1001C367:				; CODE XREF: sub_1001C2F0+73j
		add	esp, 4
		mov	[esi+50h], eax
		test	eax, eax
		jnz	short loc_1001C37A

loc_1001C371:				; CODE XREF: sub_1001C2F0+C3j
		pop	edi
		pop	esi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_1001C37A:				; CODE XREF: sub_1001C2F0+7Fj
		and	dword ptr [esi+80h], 0FFFFFFFEh
		jmp	short loc_1001C3D3
; ---------------------------------------------------------------------------

loc_1001C383:				; CODE XREF: sub_1001C2F0+62j
		test	byte ptr [esi+80h], 1
		mov	eax, 1
		cmovz	ecx, eax
		mov	eax, dword_10024EB0
		mov	[esp+18h+var_4], ecx
		test	eax, eax
		jnz	short loc_1001C3A7
		call	ds:malloc
		jmp	short loc_1001C3A9
; ---------------------------------------------------------------------------

loc_1001C3A7:				; CODE XREF: sub_1001C2F0+ADj
		call	eax ; dword_10024EB0

loc_1001C3A9:				; CODE XREF: sub_1001C2F0+B5j
		mov	ecx, eax
		add	esp, 4
		mov	[esi+50h], ecx
		test	ecx, ecx
		jz	short loc_1001C371
		and	dword ptr [esi+80h], 0FFFFFFFEh
		cmp	ebp, 1
		jnz	short loc_1001C3C7
		mov	al, [edi]
		mov	[ecx], al
		jmp	short loc_1001C3D3
; ---------------------------------------------------------------------------

loc_1001C3C7:				; CODE XREF: sub_1001C2F0+CFj
		push	ebp		; Size
		push	edi		; Src
		push	ecx		; Dst
		call	ds:memmove
		add	esp, 0Ch

loc_1001C3D3:				; CODE XREF: sub_1001C2F0+91j
					; sub_1001C2F0+D5j
		mov	ecx, [esi+50h]
		lea	eax, [ecx+ebx]
		mov	[esi+58h], eax
		cmp	ecx, edi
		jz	short loc_1001C432
		sub	ecx, edi
		add	[esi+54h], ecx
		mov	ecx, [esi+5Ch]
		test	ecx, ecx
		jz	short loc_1001C407
		lea	esp, [esp+0]

loc_1001C3F0:				; CODE XREF: sub_1001C2F0+115j
		mov	eax, [esi+50h]
		sub	eax, edi
		add	[ecx+8], eax
		mov	eax, [esi+50h]
		sub	eax, edi
		add	[ecx+0Ch], eax
		mov	ecx, [ecx+10h]
		test	ecx, ecx
		jnz	short loc_1001C3F0

loc_1001C407:				; CODE XREF: sub_1001C2F0+FAj
		cmp	[esp+14h+var_4], 0
		jz	short loc_1001C432
		test	edi, edi
		jz	short loc_1001C432
		mov	eax, dword_10024EBC
		push	edi		; Memory
		test	eax, eax
		jnz	short loc_1001C42D
		call	ds:free
		add	esp, 4
		xor	eax, eax
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_1001C42D:				; CODE XREF: sub_1001C2F0+12Aj
		call	eax ; dword_10024EBC
		add	esp, 4

loc_1001C432:				; CODE XREF: sub_1001C2F0+EEj
					; sub_1001C2F0+11Cj ...
		pop	edi
		pop	esi
		pop	ebp
		xor	eax, eax
		pop	ebx
		pop	ecx
		retn
sub_1001C2F0	endp

; ---------------------------------------------------------------------------
		align 10h

loc_1001C440:				; DATA XREF: ber_sockbuf_set_option+E3o
					; sub_1001C4A0+Eo
		push	dword ptr [esp+0Ch]
		mov	eax, [esp+14h]
		push	dword ptr [esp+0Ch]
		push	dword ptr [eax]
		mov	eax, [eax+150h]
		call	eax
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_1001C460:				; DATA XREF: ber_sockbuf_set_option+EDo
					; sub_1001C4A0+18o
		push	dword ptr [esp+0Ch]
		mov	eax, [esp+14h]
		push	dword ptr [esp+0Ch]
		push	dword ptr [eax]
		mov	eax, [eax+154h]
		call	eax
		add	esp, 0Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1001C480	proc near		; CODE XREF: sub_1001A960+214p
					; ber_get_next+109p ...
		mov	eax, dword_10024EBC
		test	eax, eax
		jnz	short loc_1001C48F
		jmp	ds:free
; ---------------------------------------------------------------------------

loc_1001C48F:				; CODE XREF: sub_1001C480+7j
		jmp	eax
sub_1001C480	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1001C4A0	proc near		; CODE XREF: ber_sockbuf_set_option+1B3p

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	dword ptr [eax+158h], 14h
		mov	dword ptr [eax+15Ch], offset loc_1001C440
		mov	dword ptr [eax+160h], offset loc_1001C460
		mov	dword ptr [eax+168h], 0
		mov	[eax+164h], eax
		retn
sub_1001C4A0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1001C4E0	proc near		; CODE XREF: sub_1001AC50+2Ep
					; ber_bvdup+3p	...
		mov	eax, dword_10024EB0
		test	eax, eax
		jnz	short loc_1001C4EF
		jmp	ds:malloc
; ---------------------------------------------------------------------------

loc_1001C4EF:				; CODE XREF: sub_1001C4E0+7j
		jmp	eax
sub_1001C4E0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_1001C500	proc near		; CODE XREF: ber_scanf+1C0p
					; ber_scanf+2B6p
		mov	eax, dword_10024EB8
		test	eax, eax
		jnz	short loc_1001C50F
		jmp	ds:realloc
; ---------------------------------------------------------------------------

loc_1001C50F:				; CODE XREF: sub_1001C500+7j
		jmp	eax
sub_1001C500	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1001C520(int,	void *Dst, size_t Size)
sub_1001C520	proc near		; CODE XREF: ber_get_next_buffer_ext+A4p
					; ber_get_next_buffer_ext+FEp ...

arg_0		= dword	ptr  4
Dst		= dword	ptr  8
Size		= dword	ptr  0Ch

		push	esi
		push	edi
		mov	edi, [esp+8+arg_0]
		mov	esi, [edi+8]
		mov	edx, [edi+4]
		sub	esi, edx
		cmp	[esp+8+Size], esi
		cmovle	esi, [esp+8+Size]
		cmp	esi, 1
		jnz	short loc_1001C54F
		mov	ecx, [edi]
		mov	eax, esi
		mov	dl, [edx+ecx]
		mov	ecx, [esp+8+Dst]
		mov	[ecx], dl
		inc	dword ptr [edi+4]
		pop	edi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1001C54F:				; CODE XREF: sub_1001C520+1Aj
		test	esi, esi
		jg	short loc_1001C558
		pop	edi
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1001C558:				; CODE XREF: sub_1001C520+31j
		mov	eax, [edi]
		push	esi		; Size
		add	eax, edx
		push	eax		; Src
		push	[esp+10h+Dst]	; Dst
		call	ds:memmove
		add	[edi+4], esi
		add	esp, 0Ch
		mov	eax, esi
		pop	edi
		pop	esi
		retn
sub_1001C520	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1001C580(int,	int Dst)
sub_1001C580	proc near		; CODE XREF: ber_get_next+B5p

arg_0		= dword	ptr  4
Dst		= dword	ptr  8

		push	ebp
		mov	ebp, [esp+4+arg_0]
		push	esi
		push	edi
		mov	edi, [esp+0Ch+Dst]
		xor	esi, esi
		mov	eax, [edi+60h]
		cmp	eax, 1
		jnz	short loc_1001C5C1
		push	1		; int
		lea	eax, [esp+10h+Dst]
		push	eax		; Dst
		push	ebp		; int
		call	sub_1001AD20
		add	esp, 0Ch
		cmp	eax, 1
		jz	short loc_1001C5B1
		pop	edi
		pop	esi
		or	eax, 0FFFFFFFFh
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_1001C5B1:				; CODE XREF: sub_1001C580+28j
		mov	al, byte ptr [esp+0Ch+Dst]
		mov	dword ptr [edi+60h], 2
		mov	[edi+3Dh], al
		jmp	short loc_1001C5CB
; ---------------------------------------------------------------------------

loc_1001C5C1:				; CODE XREF: sub_1001C580+13j
		lea	esi, [eax-2]
		mov	al, [edi+3Dh]
		mov	byte ptr [esp+0Ch+Dst],	al

loc_1001C5CB:				; CODE XREF: sub_1001C580+3Fj
		push	ebx
		test	al, al
		jns	short loc_1001C626
		movzx	ebx, al
		and	ebx, 7Fh
		cmp	ebx, 5
		jnb	short loc_1001C61E
		cmp	esi, ebx
		jge	short loc_1001C5FE
		nop

loc_1001C5E0:				; CODE XREF: sub_1001C580+7Cj
		mov	eax, ebx
		sub	eax, esi
		push	eax		; int
		lea	eax, [edi+3Eh]
		add	eax, esi
		push	eax		; Dst
		push	ebp		; int
		call	sub_1001AD20
		add	esp, 0Ch
		test	eax, eax
		jle	short loc_1001C618
		add	esi, eax
		cmp	esi, ebx
		jl	short loc_1001C5E0

loc_1001C5FE:				; CODE XREF: sub_1001C580+5Dj
		lea	eax, [esi+2]
		mov	[edi+60h], eax
		lea	eax, [ebx+1]
		push	edi
		mov	[edi+0Ch], eax
		call	sub_1001C1C0
		add	esp, 4
		pop	ebx
		pop	edi
		pop	esi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_1001C618:				; CODE XREF: sub_1001C580+76j
		lea	eax, [esi+2]
		mov	[edi+60h], eax

loc_1001C61E:				; CODE XREF: sub_1001C580+59j
		pop	ebx
		pop	edi
		pop	esi
		or	eax, 0FFFFFFFFh
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_1001C626:				; CODE XREF: sub_1001C580+4Ej
		push	edi
		mov	dword ptr [edi+0Ch], 1
		call	sub_1001C1C0
		add	esp, 4
		pop	ebx
		pop	edi
		pop	esi
		pop	ebp
		retn
sub_1001C580	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 136. ber_bvdup

; =============== S U B	R O U T	I N E =======================================


		public ber_bvdup
ber_bvdup	proc near		; DATA XREF: .rdata:off_10020938o

arg_0		= dword	ptr  4

		push	esi
		push	8
		call	sub_1001C4E0
		mov	esi, eax
		add	esp, 4
		test	esi, esi
		jnz	short loc_1001C655
		pop	esi
		retn	4
; ---------------------------------------------------------------------------

loc_1001C655:				; CODE XREF: ber_bvdup+Fj
		push	edi
		mov	edi, [esp+8+arg_0]
		cmp	dword ptr [edi+4], 0
		jnz	short loc_1001C674
		pop	edi
		mov	dword ptr [esi+4], 0
		mov	eax, esi
		mov	dword ptr [esi], 0
		pop	esi
		retn	4
; ---------------------------------------------------------------------------

loc_1001C674:				; CODE XREF: ber_bvdup+1Ej
		mov	eax, [edi]
		inc	eax
		push	eax
		call	sub_1001C4E0
		mov	ecx, eax
		add	esp, 4
		mov	[esi+4], ecx
		test	ecx, ecx
		jnz	short loc_1001C699
		push	esi
		call	sub_1001C480
		add	esp, 4
		xor	eax, eax
		pop	edi
		pop	esi
		retn	4
; ---------------------------------------------------------------------------

loc_1001C699:				; CODE XREF: ber_bvdup+47j
		mov	eax, [edi]
		cmp	eax, 1
		jnz	short loc_1001C6BB
		mov	eax, [edi+4]
		mov	al, [eax]
		mov	[ecx], al
		mov	eax, [edi]
		mov	ecx, [esi+4]
		mov	byte ptr [ecx+eax], 0
		mov	eax, [edi]
		mov	[esi], eax
		mov	eax, esi
		pop	edi
		pop	esi
		retn	4
; ---------------------------------------------------------------------------

loc_1001C6BB:				; CODE XREF: ber_bvdup+5Ej
		push	eax		; Size
		push	dword ptr [edi+4] ; Src
		push	ecx		; Dst
		call	ds:memmove
		mov	eax, [edi]
		add	esp, 0Ch
		mov	ecx, [esi+4]
		mov	byte ptr [ecx+eax], 0
		mov	eax, [edi]
		mov	[esi], eax
		mov	eax, esi
		pop	edi
		pop	esi
		retn	4
ber_bvdup	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 113. ber_bvecfree

; =============== S U B	R O U T	I N E =======================================


		public ber_bvecfree
ber_bvecfree	proc near		; CODE XREF: ldap_mods_free+22p
					; ber_scanf+31Dp ...

arg_0		= dword	ptr  4

		push	ebx
		mov	ebx, [esp+4+arg_0]
		test	ebx, ebx
		jz	short loc_1001C727
		push	edi
		xor	edi, edi
		cmp	[ebx], edi
		jz	short loc_1001C71D
		mov	eax, ebx
		push	esi

loc_1001C6F3:				; CODE XREF: ber_bvecfree+3Aj
		mov	esi, [eax]
		test	esi, esi
		jz	short loc_1001C712
		mov	eax, [esi+4]
		test	eax, eax
		jz	short loc_1001C709
		push	eax
		call	sub_1001C480
		add	esp, 4

loc_1001C709:				; CODE XREF: ber_bvecfree+1Ej
		push	esi
		call	sub_1001C480
		add	esp, 4

loc_1001C712:				; CODE XREF: ber_bvecfree+17j
		inc	edi
		cmp	dword ptr [ebx+edi*4], 0
		lea	eax, [ebx+edi*4]
		jnz	short loc_1001C6F3
		pop	esi

loc_1001C71D:				; CODE XREF: ber_bvecfree+Ej
		push	ebx
		call	sub_1001C480
		add	esp, 4
		pop	edi

loc_1001C727:				; CODE XREF: ber_bvecfree+7j
		pop	ebx
		retn	4
ber_bvecfree	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 112. ber_bvfree

; =============== S U B	R O U T	I N E =======================================


		public ber_bvfree
ber_bvfree	proc near		; CODE XREF: sub_100029E0+76p
					; ldap_parse_extended_result+174p ...

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		test	esi, esi
		jz	short loc_1001C752
		mov	eax, [esi+4]
		test	eax, eax
		jz	short loc_1001C749
		push	eax
		call	sub_1001C480
		add	esp, 4

loc_1001C749:				; CODE XREF: ber_bvfree+Ej
		push	esi
		call	sub_1001C480
		add	esp, 4

loc_1001C752:				; CODE XREF: ber_bvfree+7j
		pop	esi
		retn	4
ber_bvfree	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 109. ber_first_element

; =============== S U B	R O U T	I N E =======================================


		public ber_first_element
ber_first_element proc near		; CODE XREF: sub_10002C10+75p
					; ber_scanf+16Fp ...

var_130		= dword	ptr -130h
var_DC		= dword	ptr -0DCh
var_D8		= dword	ptr -0D8h
var_4		= dword	ptr -4
Dst		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 130h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+130h+var_4], eax
		push	ebx
		mov	ebx, [esp+134h+arg_8]
		push	esi
		mov	esi, [esp+138h+Dst]
		push	edi
		mov	edi, [esp+13Ch+arg_4]
		push	edi		; int
		push	esi		; Dst
		call	ber_skip_tag
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_1001C79C
		or	eax, eax
		jmp	short loc_1001C7C7
; ---------------------------------------------------------------------------

loc_1001C79C:				; CODE XREF: ber_first_element+36j
		mov	eax, [esi+54h]
		add	eax, [edi]
		mov	[ebx], eax
		mov	ecx, [esi+54h]
		cmp	eax, ecx
		jnz	short loc_1001C7B1
		mov	eax, 0FFFFFFFEh
		jmp	short loc_1001C7C7
; ---------------------------------------------------------------------------

loc_1001C7B1:				; CODE XREF: ber_first_element+48j
		mov	eax, [esi+58h]
		mov	[esp+13Ch+var_D8], eax
		lea	eax, [esp+13Ch+var_130]
		push	edi		; int
		push	eax		; Dst
		mov	[esp+144h+var_DC], ecx
		call	ber_skip_tag

loc_1001C7C7:				; CODE XREF: ber_first_element+3Aj
					; ber_first_element+4Fj
		mov	ecx, [esp+13Ch+var_4]
		pop	edi
		pop	esi
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 130h
		retn	0Ch
ber_first_element endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 106. ber_get_bitstringa

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	ber_get_bitstringa(int Dst, int, int)
		public ber_get_bitstringa
ber_get_bitstringa proc	near		; CODE XREF: ber_scanf+10Ap
					; DATA XREF: .rdata:off_10020938o

var_4		= dword	ptr -4
Dst		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ecx
		push	ebx
		mov	ebx, [esp+8+Dst]
		lea	eax, [esp+8+var_4]
		push	ebp
		push	eax		; int
		push	ebx		; Dst
		call	ber_skip_tag
		mov	ebp, eax
		cmp	ebp, 0FFFFFFFFh
		jnz	short loc_1001C811
		pop	ebp
		or	eax, eax
		pop	ebx
		pop	ecx
		retn	0Ch
; ---------------------------------------------------------------------------

loc_1001C811:				; CODE XREF: ber_get_bitstringa+17j
		mov	eax, [ebx+58h]
		sub	eax, [ebx+54h]
		push	esi
		mov	esi, [esp+10h+var_4]
		dec	esi
		push	edi
		cmp	esi, eax
		ja	short loc_1001C857
		push	esi
		call	sub_1001C4E0
		mov	edi, [esp+18h+arg_4]
		add	esp, 4
		mov	[edi], eax
		test	eax, eax
		jz	short loc_1001C857
		push	1		; int
		lea	eax, [esp+18h+Dst]
		push	eax		; Dst
		push	ebx		; int
		call	ber_read
		cmp	eax, 1
		jz	short loc_1001C862

loc_1001C847:				; CODE XREF: ber_get_bitstringa+7Dj
		push	dword ptr [edi]
		call	sub_1001C480
		add	esp, 4
		mov	dword ptr [edi], 0

loc_1001C857:				; CODE XREF: ber_get_bitstringa+30j
					; ber_get_bitstringa+43j
		pop	edi
		pop	esi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	ebx
		pop	ecx
		retn	0Ch
; ---------------------------------------------------------------------------

loc_1001C862:				; CODE XREF: ber_get_bitstringa+55j
		push	esi		; int
		push	dword ptr [edi]	; Dst
		push	ebx		; int
		call	ber_read
		cmp	eax, esi
		jnz	short loc_1001C847
		movzx	eax, byte ptr [esp+14h+Dst]
		lea	ecx, ds:0[esi*8]
		sub	ecx, eax
		mov	eax, [esp+14h+arg_8]
		pop	edi
		pop	esi
		mov	[eax], ecx
		mov	eax, ebp
		pop	ebp
		pop	ebx
		pop	ecx
		retn	0Ch
ber_get_bitstringa endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 102. ber_get_int
; Exported entry 108. ber_get_boolean

; =============== S U B	R O U T	I N E =======================================


		public ber_get_int
ber_get_int	proc near		; CODE XREF: ldap_parse_entrychange_control+115p
					; sub_10010810+BCp ...

Dst		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ecx		; ber_get_int
		push	edi
		lea	eax, [esp+8+Dst]
		push	eax		; int
		push	[esp+0Ch+arg_0]	; Dst
		call	ber_skip_tag
		mov	edi, eax
		cmp	edi, 0FFFFFFFFh
		jnz	short loc_1001C8AE
		or	eax, eax
		pop	edi
		pop	ecx
		retn	8
; ---------------------------------------------------------------------------

loc_1001C8AE:				; CODE XREF: ber_get_int+15j
		push	[esp+8+Dst]	; Dst
		push	[esp+0Ch+arg_4]	; int
		push	[esp+10h+arg_0]	; int
		call	sub_1001CB80
		add	esp, 0Ch
		or	ecx, 0FFFFFFFFh
		cmp	eax, [esp+8+Dst]
		cmovnz	edi, ecx
		mov	eax, edi
		pop	edi
		pop	ecx
		retn	8
ber_get_int	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 107. ber_get_null

; =============== S U B	R O U T	I N E =======================================


		public ber_get_null
ber_get_null	proc near		; CODE XREF: ber_scanf+AAp
					; DATA XREF: .rdata:off_10020938o

var_4		= dword	ptr -4
Dst		= dword	ptr  4

		push	ecx
		lea	eax, [esp+4+var_4]
		push	eax		; int
		push	[esp+8+Dst]	; Dst
		call	ber_skip_tag
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_1001C8F9
		or	eax, eax
		pop	ecx
		retn	4
; ---------------------------------------------------------------------------

loc_1001C8F9:				; CODE XREF: ber_get_null+11j
		or	ecx, 0FFFFFFFFh
		cmp	[esp+4+var_4], 0
		cmovnz	eax, ecx
		pop	ecx
		retn	4
ber_get_null	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 104. ber_get_stringa

; =============== S U B	R O U T	I N E =======================================


		public ber_get_stringa
ber_get_stringa	proc near		; CODE XREF: ber_scanf+64p
					; ber_scanf+E1p ...

var_4		= dword	ptr -4
Dst		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ecx
		push	ebp
		push	edi
		mov	edi, [esp+0Ch+Dst]
		lea	eax, [esp+0Ch+var_4]
		push	eax		; int
		push	edi		; Dst
		call	ber_skip_tag
		mov	ebp, eax
		cmp	ebp, 0FFFFFFFFh
		jnz	short loc_1001C931
		pop	edi
		or	eax, eax
		pop	ebp
		pop	ecx
		retn	8
; ---------------------------------------------------------------------------

loc_1001C931:				; CODE XREF: ber_get_stringa+17j
		push	ebx
		push	esi
		mov	esi, [esp+14h+var_4]
		lea	ecx, [esi+1]
		cmp	ecx, esi
		jb	short loc_1001C977
		mov	eax, [edi+58h]
		sub	eax, [edi+54h]
		cmp	esi, eax
		ja	short loc_1001C977
		push	ecx
		call	sub_1001C4E0
		mov	ebx, [esp+18h+arg_4]
		add	esp, 4
		mov	[ebx], eax
		test	eax, eax
		jz	short loc_1001C977
		push	esi		; int
		push	eax		; Dst
		push	edi		; int
		call	ber_read
		cmp	eax, esi
		jz	short loc_1001C982
		push	dword ptr [ebx]
		call	sub_1001C480
		add	esp, 4
		mov	dword ptr [ebx], 0

loc_1001C977:				; CODE XREF: ber_get_stringa+2Cj
					; ber_get_stringa+36j ...
		pop	esi
		pop	ebx
		pop	edi
		or	eax, 0FFFFFFFFh
		pop	ebp
		pop	ecx
		retn	8
; ---------------------------------------------------------------------------

loc_1001C982:				; CODE XREF: ber_get_stringa+55j
		mov	eax, [ebx]
		mov	byte ptr [esi+eax], 0
		mov	eax, ebp
		pop	esi
		pop	ebx
		pop	edi
		pop	ebp
		pop	ecx
		retn	8
ber_get_stringa	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 105. ber_get_stringal

; =============== S U B	R O U T	I N E =======================================


		public ber_get_stringal
ber_get_stringal proc near		; CODE XREF: ldap_parse_sasl_bind_result+D4p
					; ber_scanf+F4p ...

Dst		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		push	8
		call	sub_1001C4E0
		mov	esi, [esp+8+arg_4]
		add	esp, 4
		mov	[esi], eax
		test	eax, eax
		jnz	short loc_1001C9BC
		or	eax, 0FFFFFFFFh
		pop	esi
		retn	8
; ---------------------------------------------------------------------------

loc_1001C9BC:				; CODE XREF: ber_get_stringal+13j
		mov	dword ptr [eax+4], 0
		mov	eax, [esi]
		push	ebx
		mov	ebx, [esp+8+Dst]
		push	ebp
		mov	dword ptr [eax], 0
		lea	eax, [esp+0Ch+arg_4]
		push	eax		; int
		push	ebx		; Dst
		call	ber_skip_tag
		mov	ebp, eax
		cmp	ebp, 0FFFFFFFFh
		jnz	short loc_1001C9FB
		push	dword ptr [esi]
		call	sub_1001C480
		add	esp, 4
		mov	dword ptr [esi], 0
		or	eax, ebp
		pop	ebp
		pop	ebx
		pop	esi
		retn	8
; ---------------------------------------------------------------------------

loc_1001C9FB:				; CODE XREF: ber_get_stringal+41j
		push	edi
		mov	edi, [esp+10h+arg_4]
		lea	ecx, [edi+1]
		cmp	ecx, edi
		jb	short loc_1001CA74
		mov	eax, [ebx+58h]
		sub	eax, [ebx+54h]
		cmp	edi, eax
		ja	short loc_1001CA74
		push	ecx
		call	sub_1001C4E0
		mov	ecx, [esi]
		add	esp, 4
		mov	[ecx+4], eax
		test	eax, eax
		jz	short loc_1001CA74
		mov	eax, [esi]
		push	edi		; int
		push	dword ptr [eax+4] ; Dst
		push	ebx		; int
		call	ber_read
		cmp	eax, edi
		mov	eax, [esi]
		jz	short loc_1001CA60
		push	dword ptr [eax+4]
		call	sub_1001C480
		mov	eax, [esi]
		mov	dword ptr [eax+4], 0
		push	dword ptr [esi]
		call	sub_1001C480
		add	esp, 8
		mov	dword ptr [esi], 0
		or	eax, 0FFFFFFFFh
		pop	edi
		pop	ebp
		pop	ebx
		pop	esi
		retn	8
; ---------------------------------------------------------------------------

loc_1001CA60:				; CODE XREF: ber_get_stringal+93j
		mov	eax, [eax+4]
		mov	byte ptr [edi+eax], 0
		mov	eax, [esi]
		mov	[eax], edi
		mov	eax, ebp
		pop	edi
		pop	ebp
		pop	ebx
		pop	esi
		retn	8
; ---------------------------------------------------------------------------

loc_1001CA74:				; CODE XREF: ber_get_stringal+65j
					; ber_get_stringal+6Fj	...
		push	dword ptr [esi]
		call	sub_1001C480
		add	esp, 4
		mov	dword ptr [esi], 0
		or	eax, 0FFFFFFFFh
		pop	edi
		pop	ebp
		pop	ebx
		pop	esi
		retn	8
ber_get_stringal endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 103. ber_get_stringb

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	ber_get_stringb(int, void *Dst,	int)
		public ber_get_stringb
ber_get_stringb	proc near		; CODE XREF: ber_scanf+C0p
					; DATA XREF: .rdata:off_10020938o

var_4		= dword	ptr -4
arg_0		= dword	ptr  4
Dst		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ecx
		push	edi
		lea	eax, [esp+8+var_4]
		push	eax		; int
		push	[esp+0Ch+arg_0]	; Dst
		call	ber_skip_tag
		mov	edi, eax
		cmp	edi, 0FFFFFFFFh
		jnz	short loc_1001CAAE
		or	eax, eax
		pop	edi
		pop	ecx
		retn	0Ch
; ---------------------------------------------------------------------------

loc_1001CAAE:				; CODE XREF: ber_get_stringb+15j
		push	ebp
		mov	ebp, [esp+0Ch+arg_8]
		push	esi
		mov	esi, [esp+10h+var_4]
		mov	eax, [ebp+0]
		dec	eax
		cmp	esi, eax
		ja	short loc_1001CAD2
		push	esi		; int
		push	[esp+14h+Dst]	; Dst
		push	[esp+18h+arg_0]	; int
		call	ber_read
		cmp	eax, esi
		jz	short loc_1001CADC

loc_1001CAD2:				; CODE XREF: ber_get_stringb+2Ej
		pop	esi
		pop	ebp
		or	eax, 0FFFFFFFFh
		pop	edi
		pop	ecx
		retn	0Ch
; ---------------------------------------------------------------------------

loc_1001CADC:				; CODE XREF: ber_get_stringb+40j
		mov	eax, [esp+10h+Dst]
		mov	byte ptr [esi+eax], 0
		mov	eax, edi
		mov	[ebp+0], esi
		pop	esi
		pop	ebp
		pop	edi
		pop	ecx
		retn	0Ch
ber_get_stringb	endp

; Exported entry 132. ber_get_tag

; =============== S U B	R O U T	I N E =======================================


		public ber_get_tag
ber_get_tag	proc near		; CODE XREF: ber_skip_tag+8p
					; DATA XREF: .rdata:off_10020938o

Dst		= byte ptr -1
arg_0		= dword	ptr  4

		push	ecx
		push	edi
		mov	edi, [esp+8+arg_0]
		lea	eax, [esp+8+Dst]
		push	1		; int
		push	eax		; Dst
		push	edi		; int
		call	ber_read
		cmp	eax, 1
		jz	short loc_1001CB10
		or	eax, 0FFFFFFFFh
		pop	edi
		pop	ecx
		retn	4
; ---------------------------------------------------------------------------

loc_1001CB10:				; CODE XREF: ber_get_tag+16j
		mov	cl, [esp+8+Dst]
		mov	al, cl
		and	al, 1Fh
		cmp	al, 1Fh
		jz	short loc_1001CB24
		movzx	eax, cl
		pop	edi
		pop	ecx
		retn	4
; ---------------------------------------------------------------------------

loc_1001CB24:				; CODE XREF: ber_get_tag+2Aj
		push	esi
		mov	byte ptr [esp+0Ch+arg_0], cl
		mov	esi, 1
		mov	edi, edi

loc_1001CB30:				; CODE XREF: ber_get_tag+62j
		push	1		; int
		lea	eax, [esp+10h+Dst]
		push	eax		; Dst
		push	edi		; int
		call	ber_read
		cmp	eax, 1
		jnz	short loc_1001CB6C
		mov	al, [esp+0Ch+Dst]
		mov	byte ptr [esp+esi+0Ch+arg_0], al
		test	al, al
		jns	short loc_1001CB54
		inc	esi
		cmp	esi, 4
		jb	short loc_1001CB30

loc_1001CB54:				; CODE XREF: ber_get_tag+5Cj
		cmp	esi, 4
		jz	short loc_1001CB6C
		mov	eax, [esp+0Ch+arg_0]
		mov	ecx, 3
		sub	ecx, esi
		pop	esi
		shr	eax, cl
		pop	edi
		pop	ecx
		retn	4
; ---------------------------------------------------------------------------

loc_1001CB6C:				; CODE XREF: ber_get_tag+50j
					; ber_get_tag+67j
		pop	esi
		or	eax, 0FFFFFFFFh
		pop	edi
		pop	ecx
		retn	4
ber_get_tag	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1001CB80(int,	int, int Dst)
sub_1001CB80	proc near		; CODE XREF: ber_get_int+2Ap

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
Dst		= dword	ptr  0Ch

		push	esi
		mov	esi, [esp+4+Dst]
		cmp	esi, 4
		jbe	short loc_1001CB8F

loc_1001CB8A:				; CODE XREF: sub_1001CB80+20j
		or	eax, 0FFFFFFFFh
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_1001CB8F:				; CODE XREF: sub_1001CB80+8j
		push	esi		; int
		lea	eax, [esp+8+Dst]
		push	eax		; Dst
		push	[esp+0Ch+arg_0]	; int
		call	ber_read
		cmp	eax, esi
		jnz	short loc_1001CB8A
		test	esi, esi
		jz	short loc_1001CBB5
		mov	al, byte ptr [esp+4+Dst]
		and	al, 80h
		movzx	eax, al
		neg	eax
		sbb	eax, eax
		jmp	short loc_1001CBB7
; ---------------------------------------------------------------------------

loc_1001CBB5:				; CODE XREF: sub_1001CB80+24j
		xor	eax, eax

loc_1001CBB7:				; CODE XREF: sub_1001CB80+33j
		xor	edx, edx
		test	esi, esi
		jle	short loc_1001CBCF
		lea	ecx, [ecx+0]

loc_1001CBC0:				; CODE XREF: sub_1001CB80+4Dj
		movzx	ecx, byte ptr [esp+edx+4+Dst]
		inc	edx
		shl	eax, 8
		or	eax, ecx
		cmp	edx, esi
		jl	short loc_1001CBC0

loc_1001CBCF:				; CODE XREF: sub_1001CB80+3Bj
		mov	ecx, [esp+4+arg_4]
		mov	[ecx], eax
		mov	eax, esi
		pop	esi
		retn
sub_1001CB80	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 110. ber_next_element

; =============== S U B	R O U T	I N E =======================================


		public ber_next_element
ber_next_element proc near		; CODE XREF: sub_10002C10+189p
					; ber_scanf+204p ...

var_130		= byte ptr -130h
var_DC		= dword	ptr -0DCh
var_D8		= dword	ptr -0D8h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 130h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+130h+var_4], eax
		mov	eax, [esp+130h+arg_0]
		mov	edx, [esp+130h+arg_4]
		mov	ecx, [eax+54h]
		cmp	ecx, [esp+130h+arg_8]
		jnz	short loc_1001CC2A
		mov	eax, 0FFFFFFFEh
		mov	ecx, [esp+130h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 130h
		retn	0Ch
; ---------------------------------------------------------------------------

loc_1001CC2A:				; CODE XREF: ber_next_element+2Cj
		mov	eax, [eax+58h]
		mov	[esp+130h+var_D8], eax
		lea	eax, [esp+130h+var_130]
		push	edx		; int
		push	eax		; Dst
		mov	[esp+138h+var_DC], ecx
		call	ber_skip_tag
		mov	ecx, [esp+130h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 130h
		retn	0Ch
ber_next_element endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 101. ber_peek_tag

; =============== S U B	R O U T	I N E =======================================


		public ber_peek_tag
ber_peek_tag	proc near		; CODE XREF: sub_10002BB0+16p
					; sub_10002BB0+3Fp ...

Dst		= dword	ptr -130h
var_DC		= dword	ptr -0DCh
var_D8		= dword	ptr -0D8h
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 130h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+130h+var_4], eax
		mov	ecx, [esp+130h+arg_0]
		mov	edx, [esp+130h+arg_4]
		push	edx		; int
		mov	eax, [ecx+58h]
		mov	[esp+134h+var_D8], eax
		mov	eax, [ecx+54h]
		mov	[esp+134h+var_DC], eax
		lea	eax, [esp+134h+Dst]
		push	eax		; Dst
		call	ber_skip_tag
		mov	ecx, [esp+130h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 130h
		retn	8
ber_peek_tag	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 111. ber_scanf

; =============== S U B	R O U T	I N E =======================================


; int __cdecl ber_scanf(int Dst, int)
		public ber_scanf
ber_scanf	proc near		; CODE XREF: sub_10002C10+ECp
					; sub_10002C10+114p ...

var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
Dest		= byte ptr -54h
var_4		= dword	ptr -4
Dst		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 70h
		mov	eax, ___security_cookie
		xor	eax, esp
		mov	[esp+70h+var_4], eax
		mov	eax, [esp+70h+arg_4]
		push	ebx
		mov	ebx, [esp+74h+Dst]
		push	edi
		xor	edi, edi
		mov	[esp+78h+var_6C], ebx
		cmp	byte ptr [eax],	0
		mov	[esp+78h+var_64], eax
		jz	loc_1001D174
		push	ebp
		push	esi
		lea	esi, [esp+80h+arg_4]
		or	ebp, 0FFFFFFFFh

loc_1001CCF7:				; CODE XREF: ber_scanf+397j
		cmp	edi, 0FFFFFFFFh
		jz	loc_1001D066
		movsx	ecx, byte ptr [eax]
		lea	eax, [ecx-42h]	; switch 60 cases
		cmp	eax, 3Bh
		ja	loc_1001D01D	; jumptable 1001CD16 default case
		movzx	eax, ds:byte_1001D1CC[eax]
		jmp	ds:off_1001D188[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_1001CD1D:				; CODE XREF: ber_scanf+56j
					; DATA XREF: .text:off_1001D188o
		push	dword ptr [esi+4] ; jumptable 1001CD16 case 97
		add	esi, 4
		push	ebx
		call	ber_get_stringa
		mov	edi, eax
		jmp	loc_1001D04B	; jumptable 1001CD16 cases 93,125
; ---------------------------------------------------------------------------

loc_1001CD30:				; CODE XREF: ber_scanf+56j
					; DATA XREF: .text:off_1001D188o
		push	dword ptr [esi+4] ; jumptable 1001CD16 case 98
		add	esi, 4
		push	ebx
		call	ber_get_int
		mov	edi, eax
		jmp	loc_1001D04B	; jumptable 1001CD16 cases 93,125
; ---------------------------------------------------------------------------

loc_1001CD43:				; CODE XREF: ber_scanf+56j
					; DATA XREF: .text:off_1001D188o
		push	dword ptr [esi+4] ; jumptable 1001CD16 cases 101,105
		add	esi, 4
		push	ebx
		call	ber_get_int
		mov	edi, eax
		jmp	loc_1001D04B	; jumptable 1001CD16 cases 93,125
; ---------------------------------------------------------------------------

loc_1001CD56:				; CODE XREF: ber_scanf+56j
					; DATA XREF: .text:off_1001D188o
		push	dword ptr [esi+4] ; jumptable 1001CD16 case 108
		add	esi, 4
		push	ebx
		call	ber_peek_tag
		mov	edi, eax
		jmp	loc_1001D04B	; jumptable 1001CD16 cases 93,125
; ---------------------------------------------------------------------------

loc_1001CD69:				; CODE XREF: ber_scanf+56j
					; DATA XREF: .text:off_1001D188o
		push	ebx		; jumptable 1001CD16 case 110
		call	ber_get_null
		mov	edi, eax
		jmp	loc_1001D04B	; jumptable 1001CD16 cases 93,125
; ---------------------------------------------------------------------------

loc_1001CD76:				; CODE XREF: ber_scanf+56j
					; DATA XREF: .text:off_1001D188o
		mov	eax, [esi+4]	; jumptable 1001CD16 case 115
		add	esi, 8
		push	dword ptr [esi]	; int
		push	eax		; Dst
		push	ebx		; int
		call	ber_get_stringb
		mov	edi, eax
		jmp	loc_1001D04B	; jumptable 1001CD16 cases 93,125
; ---------------------------------------------------------------------------

loc_1001CD8C:				; CODE XREF: ber_scanf+56j
					; DATA XREF: .text:off_1001D188o
		add	esi, 4		; jumptable 1001CD16 case 111
		mov	[esp+80h+var_70], esi
		mov	esi, [esi]
		push	esi
		push	ebx
		call	ber_peek_tag
		lea	eax, [esi+4]
		push	eax
		push	ebx
		call	ber_get_stringa
		mov	edi, eax
		jmp	loc_1001D047
; ---------------------------------------------------------------------------

loc_1001CDAD:				; CODE XREF: ber_scanf+56j
					; DATA XREF: .text:off_1001D188o
		push	dword ptr [esi+4] ; jumptable 1001CD16 case 79
		add	esi, 4
		push	ebx
		call	ber_get_stringal
		mov	edi, eax
		jmp	loc_1001D04B	; jumptable 1001CD16 cases 93,125
; ---------------------------------------------------------------------------

loc_1001CDC0:				; CODE XREF: ber_scanf+56j
					; DATA XREF: .text:off_1001D188o
		mov	eax, [esi+4]	; jumptable 1001CD16 case 66
		add	esi, 8
		push	dword ptr [esi]	; int
		push	eax		; int
		push	ebx		; Dst
		call	ber_get_bitstringa
		mov	edi, eax
		jmp	loc_1001D04B	; jumptable 1001CD16 cases 93,125
; ---------------------------------------------------------------------------

loc_1001CDD6:				; CODE XREF: ber_scanf+56j
					; DATA XREF: .text:off_1001D188o
		lea	eax, [esp+80h+var_68] ;	jumptable 1001CD16 case	116
		add	esi, 4
		push	eax
		push	ebx
		call	ber_peek_tag
		mov	edi, eax
		mov	eax, [esi]
		mov	[eax], edi
		jmp	loc_1001D04B	; jumptable 1001CD16 cases 93,125
; ---------------------------------------------------------------------------

loc_1001CDEF:				; CODE XREF: ber_scanf+56j
					; DATA XREF: .text:off_1001D188o
		lea	eax, [esp+80h+var_68] ;	jumptable 1001CD16 case	84
		add	esi, 4
		push	eax		; int
		push	ebx		; Dst
		call	ber_skip_tag
		mov	edi, eax
		mov	eax, [esi]
		mov	[eax], edi
		jmp	loc_1001D04B	; jumptable 1001CD16 cases 93,125
; ---------------------------------------------------------------------------

loc_1001CE08:				; CODE XREF: ber_scanf+56j
					; DATA XREF: .text:off_1001D188o
		add	esi, 4		; jumptable 1001CD16 case 118
		mov	[esp+80h+var_60], 0
		lea	eax, [esp+80h+var_58]
		mov	[esp+80h+var_70], esi
		push	eax
		lea	eax, [esp+84h+var_68]
		xor	ebx, ebx
		mov	esi, [esi]
		push	eax
		push	[esp+88h+var_6C]
		mov	dword ptr [esi], 0
		call	ber_first_element
		cmp	eax, 0FFFFFFFFh
		jz	loc_1001CEEA
		mov	ecx, 2
		mov	[esp+80h+var_5C], ecx

loc_1001CE46:				; CODE XREF: ber_scanf+212j
		cmp	eax, 0FFFFFFFEh
		jz	loc_1001CEE7
		cmp	edi, 0FFFFFFFFh
		jz	loc_1001CEF5
		mov	ebp, [esi]
		test	ebp, ebp
		jnz	short loc_1001CE73
		push	40h
		call	sub_1001C4E0
		add	esp, 4
		mov	[esi], eax
		test	eax, eax
		jz	short loc_1001CED7
		lea	ebx, [ebp+10h]
		jmp	short loc_1001CE91
; ---------------------------------------------------------------------------

loc_1001CE73:				; CODE XREF: ber_scanf+19Cj
		cmp	ecx, ebx
		jbe	short loc_1001CE8C
		lea	eax, ds:0[ebx*8]
		push	eax
		push	ebp
		call	sub_1001C500
		add	esp, 8
		mov	[esi], eax
		add	ebx, ebx

loc_1001CE8C:				; CODE XREF: ber_scanf+1B5j
		cmp	dword ptr [esi], 0
		jz	short loc_1001CEDC

loc_1001CE91:				; CODE XREF: ber_scanf+1B1j
		mov	ecx, [esp+80h+var_60]
		mov	eax, [esi]
		mov	ebp, [esp+80h+var_6C]
		shl	ecx, 2
		mov	dword ptr [ecx+eax], 0
		mov	eax, [esi]
		add	eax, ecx
		push	eax
		push	ebp
		call	ber_get_stringa
		push	[esp+80h+var_58]
		inc	[esp+84h+var_60]
		mov	edi, eax
		inc	[esp+84h+var_5C]
		lea	eax, [esp+84h+var_68]
		push	eax
		push	ebp
		call	ber_next_element
		cmp	eax, 0FFFFFFFFh
		jz	short loc_1001CEE7
		mov	ecx, [esp+80h+var_5C]
		jmp	loc_1001CE46
; ---------------------------------------------------------------------------

loc_1001CED7:				; CODE XREF: ber_scanf+1ACj
		or	edi, 0FFFFFFFFh
		jmp	short loc_1001CEF5
; ---------------------------------------------------------------------------

loc_1001CEDC:				; CODE XREF: ber_scanf+1CFj
		push	ebp
		or	edi, 0FFFFFFFFh
		call	ber_svecfree
		jmp	short loc_1001CEF5
; ---------------------------------------------------------------------------

loc_1001CEE7:				; CODE XREF: ber_scanf+189j
					; ber_scanf+20Cj
		or	ebp, 0FFFFFFFFh

loc_1001CEEA:				; CODE XREF: ber_scanf+177j
		cmp	edi, 0FFFFFFFFh
		jz	short loc_1001CEF5
		cmp	eax, 0FFFFFFFEh
		cmovnz	edi, ebp

loc_1001CEF5:				; CODE XREF: ber_scanf+192j
					; ber_scanf+21Aj ...
		mov	eax, [esi]
		test	eax, eax
		jz	loc_1001D040
		mov	ecx, [esp+80h+var_60]
		or	ebp, 0FFFFFFFFh
		mov	ebx, [esp+80h+var_6C]
		mov	esi, [esp+80h+var_70]
		test	ecx, ecx
		jle	loc_1001D04B	; jumptable 1001CD16 cases 93,125
		mov	dword ptr [eax+ecx*4], 0
		jmp	loc_1001D04B	; jumptable 1001CD16 cases 93,125
; ---------------------------------------------------------------------------

loc_1001CF22:				; CODE XREF: ber_scanf+56j
					; DATA XREF: .text:off_1001D188o
		add	esi, 4		; jumptable 1001CD16 case 86
		lea	eax, [esp+80h+var_58]
		push	eax
		mov	[esp+84h+var_70], esi
		lea	eax, [esp+84h+var_68]
		push	eax
		mov	esi, [esi]
		xor	ebp, ebp
		push	ebx
		mov	dword ptr [esi], 0
		call	ber_first_element
		cmp	eax, 0FFFFFFFFh
		jz	short loc_1001CFAB

loc_1001CF48:				; CODE XREF: ber_scanf+2E9j
		cmp	eax, 0FFFFFFFEh
		jz	short loc_1001CFAB
		cmp	edi, 0FFFFFFFFh
		jz	short loc_1001CFBB
		mov	ebx, [esi]
		test	ebx, ebx
		jnz	short loc_1001CF6D
		push	8
		call	sub_1001C4E0
		add	esp, 4
		mov	[esi], eax
		test	eax, eax
		jnz	short loc_1001CF84
		or	edi, 0FFFFFFFFh
		jmp	short loc_1001CFBB
; ---------------------------------------------------------------------------

loc_1001CF6D:				; CODE XREF: ber_scanf+296j
		lea	eax, ds:8[ebp*4]
		push	eax
		push	ebx
		call	sub_1001C500
		add	esp, 8
		mov	[esi], eax
		test	eax, eax
		jz	short loc_1001CFD9

loc_1001CF84:				; CODE XREF: ber_scanf+2A6j
		mov	eax, [esi]
		mov	ebx, [esp+80h+var_6C]
		lea	eax, [eax+ebp*4]
		push	eax
		push	ebx
		call	ber_get_stringal
		push	[esp+80h+var_58]
		mov	edi, eax
		inc	ebp
		lea	eax, [esp+84h+var_68]
		push	eax
		push	ebx
		call	ber_next_element
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_1001CF48

loc_1001CFAB:				; CODE XREF: ber_scanf+286j
					; ber_scanf+28Bj
		cmp	edi, 0FFFFFFFFh
		jz	short loc_1001CFBB
		cmp	eax, 0FFFFFFFEh
		mov	eax, 0FFFFFFFFh
		cmovnz	edi, eax

loc_1001CFBB:				; CODE XREF: ber_scanf+290j
					; ber_scanf+2ABj ...
		mov	eax, [esi]
		test	eax, eax
		jz	short loc_1001D040
		mov	ebx, [esp+80h+var_6C]
		mov	esi, [esp+80h+var_70]
		test	ebp, ebp
		jle	short loc_1001CFD4
		mov	dword ptr [eax+ebp*4], 0

loc_1001CFD4:				; CODE XREF: ber_scanf+30Bj
		or	ebp, 0FFFFFFFFh
		jmp	short loc_1001D04B ; jumptable 1001CD16	cases 93,125
; ---------------------------------------------------------------------------

loc_1001CFD9:				; CODE XREF: ber_scanf+2C2j
		push	ebx
		or	edi, 0FFFFFFFFh
		call	ber_bvecfree
		jmp	short loc_1001CFBB
; ---------------------------------------------------------------------------

loc_1001CFE4:				; CODE XREF: ber_scanf+56j
					; DATA XREF: .text:off_1001D188o
		lea	eax, [esp+80h+var_68] ;	jumptable 1001CD16 case	120
		push	eax		; int
		push	ebx		; Dst
		call	ber_skip_tag
		mov	edi, eax
		cmp	edi, 0FFFFFFFFh
		jz	short loc_1001D04B ; jumptable 1001CD16	cases 93,125
		mov	eax, [esp+80h+var_68]
		add	[ebx+54h], eax
		jmp	short loc_1001D04B ; jumptable 1001CD16	cases 93,125
; ---------------------------------------------------------------------------

loc_1001CFFF:				; CODE XREF: ber_scanf+56j
					; DATA XREF: .text:off_1001D188o
		mov	eax, [esp+80h+var_64] ;	jumptable 1001CD16 cases 91,123
		mov	al, [eax+1]
		cmp	al, 76h
		jz	short loc_1001D04B ; jumptable 1001CD16	cases 93,125
		cmp	al, 56h
		jz	short loc_1001D04B ; jumptable 1001CD16	cases 93,125
		lea	eax, [esp+80h+var_68]
		push	eax		; int
		push	ebx		; Dst
		call	ber_skip_tag
		mov	edi, eax
		jmp	short loc_1001D04B ; jumptable 1001CD16	cases 93,125
; ---------------------------------------------------------------------------

loc_1001D01D:				; CODE XREF: ber_scanf+49j
					; ber_scanf+56j
					; DATA XREF: ...
		push	ecx		; jumptable 1001CD16 default case
		lea	eax, [esp+84h+Dest]
		push	offset aUnknownFmtC ; "unknown fmt %c\n"
		push	eax		; Dest
		call	ds:sprintf
		lea	eax, [esp+8Ch+Dest]
		push	eax		; Str
		call	ber_err_print
		add	esp, 10h
		or	edi, 0FFFFFFFFh
		jmp	short loc_1001D04B ; jumptable 1001CD16	cases 93,125
; ---------------------------------------------------------------------------

loc_1001D040:				; CODE XREF: ber_scanf+239j
					; ber_scanf+2FFj
		mov	ebx, [esp+80h+var_6C]
		or	ebp, 0FFFFFFFFh

loc_1001D047:				; CODE XREF: ber_scanf+E8j
		mov	esi, [esp+80h+var_70]

loc_1001D04B:				; CODE XREF: ber_scanf+56j
					; ber_scanf+6Bj ...
		mov	eax, [esp+80h+var_64] ;	jumptable 1001CD16 cases 93,125
		inc	eax
		mov	[esp+80h+var_64], eax
		cmp	byte ptr [eax],	0
		jnz	loc_1001CCF7
		cmp	edi, 0FFFFFFFFh
		jnz	loc_1001D15F

loc_1001D066:				; CODE XREF: ber_scanf+3Aj
		mov	ebp, [esp+80h+arg_4]
		dec	eax
		mov	[esp+80h+var_64], eax
		cmp	ebp, eax
		jnb	loc_1001D15F
		lea	ebx, [esp+80h+arg_4]

loc_1001D081:				; CODE XREF: ber_scanf+499j
		mov	al, [ebp+0]
		test	al, al
		jz	loc_1001D15F
		movsx	eax, al
		add	eax, 0FFFFFFBEh	; switch 53 cases
		cmp	eax, 34h
		ja	loc_1001D14D	; jumptable 1001D0A2 default case
		movzx	eax, ds:byte_1001D22C[eax]
		jmp	ds:off_1001D208[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_1001D0A9:				; CODE XREF: ber_scanf+3E2j
					; DATA XREF: .text:off_1001D208o
		mov	esi, [ebx+4]	; jumptable 1001D0A2 case 97
		add	ebx, 4
		push	dword ptr [esi]
		call	sub_1001C480
		add	esp, 4
		jmp	loc_1001D147
; ---------------------------------------------------------------------------

loc_1001D0BE:				; CODE XREF: ber_scanf+3E2j
					; DATA XREF: .text:off_1001D208o
		add	ebx, 4		; jumptable 1001D0A2 cases 84,98,101,105,108,116
		jmp	loc_1001D14D	; jumptable 1001D0A2 default case
; ---------------------------------------------------------------------------

loc_1001D0C6:				; CODE XREF: ber_scanf+3E2j
					; DATA XREF: .text:off_1001D208o
		add	ebx, 8		; jumptable 1001D0A2 case 115
		jmp	loc_1001D14D	; jumptable 1001D0A2 default case
; ---------------------------------------------------------------------------

loc_1001D0CE:				; CODE XREF: ber_scanf+3E2j
					; DATA XREF: .text:off_1001D208o
		mov	esi, [ebx+4]	; jumptable 1001D0A2 case 111
		add	ebx, 4
		mov	eax, [esi+4]
		test	eax, eax
		jz	short loc_1001D0E4
		push	eax
		call	sub_1001C480
		add	esp, 4

loc_1001D0E4:				; CODE XREF: ber_scanf+419j
		xorps	xmm0, xmm0
		movq	qword ptr [esi], xmm0
		jmp	short loc_1001D14D ; jumptable 1001D0A2	default	case
; ---------------------------------------------------------------------------

loc_1001D0ED:				; CODE XREF: ber_scanf+3E2j
					; DATA XREF: .text:off_1001D208o
		mov	eax, [ebx+4]	; jumptable 1001D0A2 case 79
		add	ebx, 4
		mov	esi, [eax]
		test	esi, esi
		jz	short loc_1001D14D ; jumptable 1001D0A2	default	case
		mov	eax, [esi+4]
		test	eax, eax
		jz	short loc_1001D109
		push	eax
		call	sub_1001C480
		add	esp, 4

loc_1001D109:				; CODE XREF: ber_scanf+43Ej
		push	esi
		call	sub_1001C480
		add	esp, 4
		jmp	short loc_1001D14D ; jumptable 1001D0A2	default	case
; ---------------------------------------------------------------------------

loc_1001D114:				; CODE XREF: ber_scanf+3E2j
					; DATA XREF: .text:off_1001D208o
		mov	esi, [ebx+4]	; jumptable 1001D0A2 case 66
		add	ebx, 8
		mov	eax, [esi]
		test	eax, eax
		jz	short loc_1001D147
		push	eax
		call	sub_1001C480
		add	esp, 4
		jmp	short loc_1001D147
; ---------------------------------------------------------------------------

loc_1001D12B:				; CODE XREF: ber_scanf+3E2j
					; DATA XREF: .text:off_1001D208o
		mov	esi, [ebx+4]	; jumptable 1001D0A2 case 118
		add	ebx, 4
		push	dword ptr [esi]
		call	ber_svecfree
		jmp	short loc_1001D147
; ---------------------------------------------------------------------------

loc_1001D13A:				; CODE XREF: ber_scanf+3E2j
					; DATA XREF: .text:off_1001D208o
		mov	esi, [ebx+4]	; jumptable 1001D0A2 case 86
		add	ebx, 4
		push	dword ptr [esi]
		call	ber_bvecfree

loc_1001D147:				; CODE XREF: ber_scanf+3F9j
					; ber_scanf+45Ej ...
		mov	dword ptr [esi], 0

loc_1001D14D:				; CODE XREF: ber_scanf+3D5j
					; ber_scanf+3E2j ...
		inc	ebp		; jumptable 1001D0A2 default case
		mov	[esp+80h+arg_4], ebp
		cmp	ebp, [esp+80h+var_64]
		jb	loc_1001D081

loc_1001D15F:				; CODE XREF: ber_scanf+3A0j
					; ber_scanf+3B4j ...
		pop	esi
		pop	ebp
		mov	eax, edi
		pop	edi
		pop	ebx
		mov	ecx, [esp+70h+var_4]
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 70h
		retn
; ---------------------------------------------------------------------------

loc_1001D174:				; CODE XREF: ber_scanf+25j
		mov	ecx, [esp+78h+var_4]
		mov	eax, edi
		pop	edi
		pop	ebx
		xor	ecx, esp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 70h
		retn
ber_scanf	endp

; ---------------------------------------------------------------------------
		align 4
off_1001D188	dd offset loc_1001CDC0,	offset loc_1001CDAD, offset loc_1001CDEF
					; DATA XREF: ber_scanf+56r
		dd offset loc_1001CF22,	offset loc_1001CFFF, offset loc_1001D04B ; jump	table for switch statement
		dd offset loc_1001CD1D,	offset loc_1001CD30, offset loc_1001CD43
		dd offset loc_1001CD56,	offset loc_1001CD69, offset loc_1001CD8C
		dd offset loc_1001CD76,	offset loc_1001CDD6, offset loc_1001CE08
		dd offset loc_1001CFE4,	offset loc_1001D01D
byte_1001D1CC	db	0,   10h,   10h,   10h ; DATA XREF: ber_scanf+4Fr
		db    10h,   10h,   10h,   10h ; indirect table	for switch statement
		db    10h,   10h,   10h,   10h
		db    10h,     1,   10h,   10h
		db    10h,   10h,     2,   10h
		db	3,   10h,   10h,   10h
		db    10h,     4,   10h,     5
		db    10h,   10h,   10h,     6
		db	7,   10h,   10h,     8
		db    10h,   10h,   10h,     8
		db    10h,   10h,     9,   10h
		db    0Ah,   0Bh,   10h,   10h
		db    10h,   0Ch,   0Dh,   10h
		db    0Eh,   10h,   0Fh,   10h
		db    10h,     4,   10h,     5
off_1001D208	dd offset loc_1001D114,	offset loc_1001D0ED, offset loc_1001D0BE
					; DATA XREF: ber_scanf+3E2r
		dd offset loc_1001D13A,	offset loc_1001D0A9, offset loc_1001D0CE ; jump	table for switch statement
		dd offset loc_1001D0C6,	offset loc_1001D12B, offset loc_1001D14D
byte_1001D22C	db	0,     8,     8,     8 ; DATA XREF: ber_scanf+3DBr
		db	8,     8,     8,     8 ; indirect table	for switch statement
		db	8,     8,     8,     8
		db	8,     1,     8,     8
		db	8,     8,     2,     8
		db	3,     8,     8,     8
		db	8,     8,     8,     8
		db	8,     8,     8,     4
		db	2,     8,     8,     2
		db	8,     8,     8,     2
		db	8,     8,     2,     8
		db	8,     5,     8,     8
		db	8,     6,     2,     8
		db	7
		align 10h
; Exported entry 100. ber_skip_tag

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	ber_skip_tag(int Dst, int)
		public ber_skip_tag
ber_skip_tag	proc near		; CODE XREF: sub_10002BB0+2Dp
					; ldap_parse_passwd+ABp ...

var_4		= dword	ptr -4
Dst		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ecx
		push	ebp
		push	edi
		mov	edi, [esp+0Ch+Dst]
		push	edi
		call	ber_get_tag
		mov	ebp, eax
		cmp	ebp, 0FFFFFFFFh
		jnz	short loc_1001D28C
		pop	edi
		or	eax, eax
		pop	ebp
		pop	ecx
		retn	8
; ---------------------------------------------------------------------------

loc_1001D28C:				; CODE XREF: ber_skip_tag+12j
		push	ebx
		mov	ebx, [esp+10h+arg_4]
		lea	eax, [esp+10h+Dst]
		push	1		; int
		push	eax		; Dst
		push	edi		; int
		mov	[esp+1Ch+var_4], 0
		mov	dword ptr [ebx], 0
		call	ber_read
		cmp	eax, 1
		jz	short loc_1001D2BB
		pop	ebx
		pop	edi
		or	eax, 0FFFFFFFFh
		pop	ebp
		pop	ecx
		retn	8
; ---------------------------------------------------------------------------

loc_1001D2BB:				; CODE XREF: ber_skip_tag+3Fj
		mov	al, byte ptr [esp+10h+Dst]
		push	esi
		test	al, al
		jns	short loc_1001D301
		movzx	esi, al
		and	esi, 7Fh
		cmp	esi, 4
		ja	short loc_1001D2E1
		push	esi		; int
		lea	eax, [esp+18h]
		sub	eax, esi
		push	eax		; Dst
		push	edi		; int
		call	ber_read
		cmp	eax, esi
		jz	short loc_1001D2EC

loc_1001D2E1:				; CODE XREF: ber_skip_tag+5Dj
		pop	esi
		pop	ebx
		pop	edi
		or	eax, 0FFFFFFFFh
		pop	ebp
		pop	ecx
		retn	8
; ---------------------------------------------------------------------------

loc_1001D2EC:				; CODE XREF: ber_skip_tag+6Fj
		push	[esp+14h+var_4]
		call	sub_10019FB0
		pop	esi
		mov	[ebx], eax
		mov	eax, ebp
		pop	ebx
		pop	edi
		pop	ebp
		pop	ecx
		retn	8
; ---------------------------------------------------------------------------

loc_1001D301:				; CODE XREF: ber_skip_tag+52j
		movzx	eax, al
		pop	esi
		mov	[ebx], eax
		mov	eax, ebp
		pop	ebx
		pop	edi
		pop	ebp
		pop	ecx
		retn	8
ber_skip_tag	endp

; Exported entry 152. ber_svecfree

; =============== S U B	R O U T	I N E =======================================


		public ber_svecfree
ber_svecfree	proc near		; CODE XREF: ber_scanf+220p
					; ber_scanf+473p
					; DATA XREF: ...

arg_0		= dword	ptr  4

		push	edi
		mov	edi, [esp+4+arg_0]
		test	edi, edi
		jz	short loc_1001D340
		mov	eax, [edi]
		push	esi
		xor	esi, esi
		test	eax, eax
		jz	short loc_1001D336

loc_1001D322:				; CODE XREF: ber_svecfree+24j
		push	eax
		call	sub_1001C480
		mov	eax, [edi+esi*4+4]
		lea	esi, [esi+1]
		add	esp, 4
		test	eax, eax
		jnz	short loc_1001D322

loc_1001D336:				; CODE XREF: ber_svecfree+10j
		push	edi
		call	sub_1001C480
		add	esp, 4
		pop	esi

loc_1001D340:				; CODE XREF: ber_svecfree+7j
		pop	edi
		retn	4
ber_svecfree	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 149. ber_err_print

; =============== S U B	R O U T	I N E =======================================


; int __cdecl ber_err_print(char *Str)
		public ber_err_print
ber_err_print	proc near		; CODE XREF: ldap_perror+80p
					; ldap_perror+167p ...

Str		= dword	ptr  4

		call	ds:__iob_func
		add	eax, 40h
		push	eax		; File
		push	[esp+4+Str]	; Str
		call	ds:fputs
		add	esp, 8
		call	ds:__iob_func
		add	eax, 40h
		mov	[esp+Str], eax
		jmp	ds:fflush
ber_err_print	endp

; [0000000F BYTES: COLLAPSED FUNCTION __security_check_cookie(x)]
		align 2
; [00000006 BYTES: COLLAPSED FUNCTION memcpy]
; [00000006 BYTES: COLLAPSED FUNCTION memset]
		align 10h
		mov	ecx, 1
		movsd	xmm5, ds:qword_10020748
		jmp	short loc_1001D3CB
; ---------------------------------------------------------------------------
		mov	ecx, 2
		movsd	xmm5, ds:qword_10020750
		jmp	short loc_1001D3CB
; ---------------------------------------------------------------------------
		mov	ecx, 3
		movsd	xmm5, ds:qword_10020748

loc_1001D3CB:				; CODE XREF: .text:1001D3ADj
					; .text:1001D3BCj
		movd	eax, xmm0
		and	eax, 7FFFFFFFh
		cmp	eax, 7F800000h
		jnb	loc_1001D52B
		cvtss2sd xmm0, xmm0
; START	OF FUNCTION CHUNK FOR sub_1001D581

loc_1001D3E3:				; CODE XREF: sub_1001D581+4Bj
		cmp	ecx, 2
		jnz	short loc_1001D400
		movsd	xmm2, qword ptr	ds:byte_10020768
		comisd	xmm0, xmm2
		jbe	short loc_1001D400
		mov	edx, 10h
		call	sub_1001D53D

loc_1001D400:				; CODE XREF: sub_1001D581-19Bj
					; sub_1001D581-18Dj
		comisd	xmm0, xmm5
		jnb	loc_1001D52B
		movsd	xmm6, ds:qword_10020740
		comisd	xmm0, xmm6
		jb	loc_1001D52B
		movdqa	xmm1, xmm0
		psllq	xmm1, 1
		psrlq	xmm1, 1
		cmp	ecx, 1
		jz	short loc_1001D469
		movsd	xmm2, ds:qword_10020760
		comisd	xmm1, xmm2
		ja	short loc_1001D469
		xorpd	xmm2, xmm2
		comisd	xmm1, xmm2
		jz	short loc_1001D469
		push	eax
		fstcw	[esp+4+var_4]
		mov	ax, [esp+4+var_4]
		test	ax, 10h
		pop	eax
		jnz	short loc_1001D469
		mov	edx, 2
		call	sub_1001D53D
		xor	eax, eax
		mov	edx, 80000000h
		retn
; ---------------------------------------------------------------------------

loc_1001D469:				; CODE XREF: sub_1001D581-154j
					; sub_1001D581-146j ...
		xorpd	xmm6, xmm6
		comisd	xmm1, xmm6
		jz	loc_1001D51D
		movsd	xmm3, ds:qword_10020720
		movsd	xmm4, ds:qword_10020728
		movd	xmm5, ds:dword_10020780
		movdqa	xmm6, xmm0
		cmpeqsd	xmm6, xmm1
		movdqa	xmm2, xmm1
		pand	xmm2, xmm3
		por	xmm2, xmm4
		psrlq	xmm1, 34h
		movdqa	xmm4, xmm1
		psubq	xmm4, xmm5
		movdqa	xmm3, xmm2
		psllq	xmm3, xmm4
		movdqa	xmm4, xmm5
		psubq	xmm4, xmm1
		movdqa	xmm7, xmm2
		psrlq	xmm7, xmm4
		pcmpgtd	xmm1, xmm5
		punpckldq xmm1,	xmm1
		pand	xmm3, xmm1
		pandn	xmm1, xmm7
		por	xmm1, xmm3
		pxor	xmm5, xmm5
		psubq	xmm5, xmm1
		pand	xmm1, xmm6
		pandn	xmm6, xmm5
		por	xmm6, xmm1
		movd	eax, xmm4
		cmp	eax, 0
		jle	short loc_1001D51D
		psllq	xmm7, xmm4
		pxor	xmm2, xmm7
		movd	eax, xmm2
		psrldq	xmm2, 4
		movd	edx, xmm2
		or	eax, edx
		jz	short loc_1001D51D
		mov	edx, 10h
		call	sub_1001D53D

loc_1001D51D:				; CODE XREF: sub_1001D581-110j
					; sub_1001D581-89j ...
		movd	eax, xmm6
		psrldq	xmm6, 4
		movd	edx, xmm6
		retn
; ---------------------------------------------------------------------------

loc_1001D52B:				; CODE XREF: .text:1001D3D9j
					; sub_1001D581-17Dj ...
		mov	edx, 8
		call	sub_1001D53D
		xor	eax, eax
		mov	edx, 80000000h
		retn
; END OF FUNCTION CHUNK	FOR sub_1001D581

; =============== S U B	R O U T	I N E =======================================


sub_1001D53D	proc near		; CODE XREF: sub_1001D581-186p
					; sub_1001D581-125p ...

var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= qword	ptr -18h
var_10		= qword	ptr -10h
var_8		= dword	ptr -8

		sub	esp, 20h
		fstcw	word ptr [esp+20h+var_20]
		movzx	eax, word ptr [esp+20h+var_20]
		cmp	edx, 8
		jz	short loc_1001D555
		test	ds:byte_1002076F[edx], al
		jnz	short loc_1001D57D

loc_1001D555:				; CODE XREF: sub_1001D53D+Ej
		fldcw	ds:word_10020790
		mov	[esp+20h+var_20], edx
		mov	[esp+20h+var_1C], 0
		movsd	[esp+20h+var_18], xmm0
		movsd	[esp+20h+var_10], xmm0
		mov	[esp+20h+var_8], eax
		call	_except1
		fstp	st

loc_1001D57D:				; CODE XREF: sub_1001D53D+16j
		add	esp, 20h
		retn
sub_1001D53D	endp


; =============== S U B	R O U T	I N E =======================================


sub_1001D581	proc near		; CODE XREF: sub_1000A440+36p

var_4		= word ptr -4

; FUNCTION CHUNK AT 1001D3E3 SIZE 0000015A BYTES

		mov	ecx, 1
		movsd	xmm5, ds:qword_10020748
		jmp	short loc_1001D5AC
; ---------------------------------------------------------------------------
		mov	ecx, 4
		movsd	xmm5, ds:qword_10020750
		jmp	short loc_1001D5AC
; ---------------------------------------------------------------------------
		mov	ecx, 5
		movsd	xmm5, ds:qword_10020748

loc_1001D5AC:				; CODE XREF: sub_1001D581+Dj
					; sub_1001D581+1Cj
		movdqa	xmm1, xmm0
		psrldq	xmm1, 4
		movd	eax, xmm1
		and	eax, 7FFFFFFFh
		cmp	eax, 7FF00000h
		jnb	loc_1001D52B
		cmp	ecx, 1
		jz	loc_1001D3E3
		movdqa	xmm1, xmm0
		psllq	xmm1, 1
		psrlq	xmm1, 1
		movsd	xmm2, ds:qword_10020758
		comisd	xmm1, xmm2
		jbe	short loc_1001D61D
		cmp	ecx, 4
		jz	short loc_1001D609
		mov	edx, 1
		call	sub_1001D53D
		mov	edx, 10h
		call	sub_1001D53D
		jmp	short loc_1001D61D
; ---------------------------------------------------------------------------

loc_1001D609:				; CODE XREF: sub_1001D581+70j
		mov	edx, 10h
		call	sub_1001D53D
		mov	edx, 1
		call	sub_1001D53D

loc_1001D61D:				; CODE XREF: sub_1001D581+6Bj
					; sub_1001D581+86j
		movsd	xmm2, ds:qword_10020760
		comisd	xmm1, xmm2
		jnb	short loc_1001D652
		xorpd	xmm2, xmm2
		comisd	xmm1, xmm2
		jz	loc_1001D469
		mov	edx, 2
		call	sub_1001D53D
		mov	edx, 10h
		call	sub_1001D53D
		jmp	loc_1001D469
; ---------------------------------------------------------------------------

loc_1001D652:				; CODE XREF: sub_1001D581+A8j
		movdqa	xmm3, xmm0
		cmp	ecx, 4
		jnz	short loc_1001D66D
		movsd	xmm2, ds:qword_10020748
		comisd	xmm3, xmm2
		jb	short loc_1001D66D
		subpd	xmm3, xmm2

loc_1001D66D:				; CODE XREF: sub_1001D581+D8j
					; sub_1001D581+E6j
		movdqa	xmm4, xmm3
		psllq	xmm4, 23h
		psrlq	xmm4, 23h
		movd	eax, xmm4
		or	eax, eax
		jz	short loc_1001D68D
		mov	edx, 10h
		call	sub_1001D53D

loc_1001D68D:				; CODE XREF: sub_1001D581+100j
		comisd	xmm0, xmm5
		jnb	loc_1001D52B
		movsd	xmm2, ds:qword_10020740
		comisd	xmm0, xmm2
		jb	loc_1001D52B
		jmp	loc_1001D469
sub_1001D581	endp


; =============== S U B	R O U T	I N E =======================================


sub_1001D6AE	proc near		; CODE XREF: .text:1001D74Fj
					; .text:1001D764p
		test	edx, edx
		jnz	short loc_1001D6C7
		cvtsi2sd xmm0, ecx
		shr	ecx, 1Fh
		movsd	xmm1, ds:qword_10020710[ecx*8]
		addsd	xmm0, xmm1
		retn
; ---------------------------------------------------------------------------

loc_1001D6C7:				; CODE XREF: sub_1001D6AE+2j
		movd	xmm4, ds:dword_10020788
		movd	xmm5, ds:dword_1002078C
		movd	xmm6, ds:dword_10020784
		movd	xmm0, ecx
		movd	xmm1, edx
		punpckldq xmm0,	xmm1
		mov	eax, 20h
		bsr	ecx, edx
		sub	eax, ecx
		movd	xmm2, eax
		psllq	xmm0, xmm2
		movdqa	xmm3, xmm0
		psllq	xmm3, 33h
		psrlq	xmm3, 33h
		movdqa	xmm1, xmm3
		psrlq	xmm0, 0Dh
		psllq	xmm0, 1
		pcmpgtd	xmm3, xmm4
		punpckldq xmm3,	xmm3
		psubq	xmm0, xmm3
		pcmpgtd	xmm1, xmm5
		punpckldq xmm1,	xmm1
		psubq	xmm0, xmm1
		psubq	xmm6, xmm2
		psllq	xmm6, 34h
		paddq	xmm0, xmm6
		retn
sub_1001D6AE	endp

; ---------------------------------------------------------------------------
		mov	eax, ecx
		sar	eax, 1Fh
		cmp	eax, edx
		jnz	short loc_1001D74D
		cvtsi2sd xmm0, ecx
		retn
; ---------------------------------------------------------------------------

loc_1001D74D:				; CODE XREF: .text:1001D746j
		test	edx, edx
		jge	sub_1001D6AE
		movsd	xmm7, ds:qword_10020730
		neg	ecx
		adc	edx, 0
		neg	edx
		call	sub_1001D6AE
		orps	xmm0, xmm7
		retn
; ---------------------------------------------------------------------------
		align 10h
; [0000003D BYTES: COLLAPSED FUNCTION ___raise_securityfailure]
; [000000FB BYTES: COLLAPSED FUNCTION ___report_gsfailure]
; [0000000C BYTES: COLLAPSED FUNCTION ___report_rangecheckfailure]
; [000000D0 BYTES: COLLAPSED FUNCTION ___report_securityfailure]

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_1001D984	proc near		; DATA XREF: .rdata:1001F158o

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		and	dword_100251E0,	0
		sub	esp, 1Ch
		push	ebx
		xor	ebx, ebx
		inc	ebx
		or	dword_100249A0,	ebx
		push	0Ah		; ProcessorFeature
		call	IsProcessorFeaturePresent
		test	eax, eax
		jz	loc_1001DAF6
		xor	ecx, ecx
		mov	dword_100251E0,	ebx
		xor	eax, eax
		cpuid
		push	esi
		mov	esi, dword_100249A0
		push	edi
		lea	edi, [ebp+var_1C]
		or	esi, 2
		mov	[edi], eax
		mov	[edi+4], ebx
		mov	[edi+8], ecx
		mov	[edi+0Ch], edx
		mov	eax, [ebp+var_1C]
		mov	ecx, [ebp+var_10]
		mov	[ebp+var_C], eax
		xor	ecx, 49656E69h
		mov	eax, [ebp+var_14]
		xor	eax, 6C65746Eh
		mov	dword_100249A0,	esi
		or	ecx, eax
		mov	eax, [ebp+var_18]
		xor	eax, 756E6547h
		or	ecx, eax
		neg	ecx
		push	1
		sbb	cl, cl
		pop	eax
		inc	cl
		push	0
		pop	ecx
		cpuid
		mov	[edi], eax
		mov	[edi+4], ebx
		mov	[edi+8], ecx
		mov	[edi+0Ch], edx
		mov	ecx, [ebp+var_14]
		mov	[ebp+var_8], ecx
		jz	short loc_1001DA5C
		mov	eax, [ebp+var_1C]
		and	eax, 0FFF3FF0h
		cmp	eax, 106C0h
		jz	short loc_1001DA4B
		cmp	eax, 20660h
		jz	short loc_1001DA4B
		cmp	eax, 20670h
		jz	short loc_1001DA4B
		cmp	eax, 30650h
		jz	short loc_1001DA4B
		cmp	eax, 30660h
		jz	short loc_1001DA4B
		cmp	eax, 30670h
		jnz	short loc_1001DA5C

loc_1001DA4B:				; CODE XREF: sub_1001D984+A2j
					; sub_1001D984+A9j ...
		mov	edi, dword_100251E4
		or	edi, 1
		mov	dword_100251E4,	edi
		jmp	short loc_1001DA62
; ---------------------------------------------------------------------------

loc_1001DA5C:				; CODE XREF: sub_1001D984+93j
					; sub_1001D984+C5j
		mov	edi, dword_100251E4

loc_1001DA62:				; CODE XREF: sub_1001D984+D6j
		cmp	[ebp+var_C], 7
		jl	short loc_1001DA9D
		push	7
		xor	ecx, ecx
		lea	esi, [ebp+var_1C]
		pop	eax
		cpuid
		mov	[esi], eax
		mov	eax, esi
		mov	esi, dword_100249A0
		mov	[eax+4], ebx
		mov	[eax+8], ecx
		mov	ecx, [ebp+var_8]
		mov	[eax+0Ch], edx
		mov	eax, [ebp+var_18]
		test	eax, 200h
		jz	short loc_1001DA9F
		or	edi, 2
		mov	dword_100251E4,	edi
		jmp	short loc_1001DA9F
; ---------------------------------------------------------------------------

loc_1001DA9D:				; CODE XREF: sub_1001D984+E2j
		xor	eax, eax

loc_1001DA9F:				; CODE XREF: sub_1001D984+10Cj
					; sub_1001D984+117j
		test	ecx, 100000h
		jz	short loc_1001DAF4
		or	esi, 4
		mov	dword_100251E0,	2
		mov	dword_100249A0,	esi
		test	ecx, 8000000h
		jz	short loc_1001DAF4
		test	ecx, 10000000h
		jz	short loc_1001DAF4
		or	esi, 8
		mov	dword_100251E0,	3
		mov	dword_100249A0,	esi
		test	al, 20h
		jz	short loc_1001DAF4
		or	esi, 20h
		mov	dword_100251E0,	5
		mov	dword_100249A0,	esi

loc_1001DAF4:				; CODE XREF: sub_1001D984+121j
					; sub_1001D984+13Cj ...
		pop	edi
		pop	esi

loc_1001DAF6:				; CODE XREF: sub_1001D984+20j
		xor	eax, eax
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
sub_1001D984	endp

; [0000004C BYTES: COLLAPSED FUNCTION _pre_c_init]

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_1001DB49	proc near		; CODE XREF: ___DllMainCRTStartup+64p
					; ___DllMainCRTStartup+A3p ...

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ecx
		cmp	[ebp+arg_4], 0
		push	ebx
		push	esi
		push	edi
		jnz	loc_1001DC84
		mov	eax, dword_100251E8
		test	eax, eax
		jle	loc_1001DC7D
		dec	eax
		mov	ebx, offset dword_10025434
		mov	dword_100251E8,	eax
		xor	edi, edi
		mov	eax, large fs:18h
		mov	[ebp+var_4], edi
		mov	edx, [eax+4]
		jmp	short loc_1001DB87
; ---------------------------------------------------------------------------

loc_1001DB83:				; CODE XREF: sub_1001DB49+48j
		cmp	eax, edx
		jz	short loc_1001DB95

loc_1001DB87:				; CODE XREF: sub_1001DB49+38j
		xor	eax, eax
		mov	ecx, edx
		lock cmpxchg [ebx], ecx
		test	eax, eax
		jnz	short loc_1001DB83
		jmp	short loc_1001DB9C
; ---------------------------------------------------------------------------

loc_1001DB95:				; CODE XREF: sub_1001DB49+3Cj
		mov	[ebp+var_4], 1

loc_1001DB9C:				; CODE XREF: sub_1001DB49+4Aj
		cmp	dword_10025438,	2
		jz	short loc_1001DBB2
		push	1Fh
		call	_amsg_exit
		pop	ecx
		jmp	loc_1001DD34
; ---------------------------------------------------------------------------

loc_1001DBB2:				; CODE XREF: sub_1001DB49+5Aj
		push	Ptr		; Ptr
		call	ds:DecodePointer
		mov	esi, eax
		mov	[ebp+arg_8], esi
		test	esi, esi
		jz	loc_1001DC65
		push	dword_1002543C	; Ptr
		call	ds:DecodePointer
		mov	ebx, eax
		mov	[ebp+arg_4], esi
		mov	[ebp+arg_0], ebx

loc_1001DBDF:				; CODE XREF: sub_1001DB49+9Fj
					; sub_1001DB49+AAj ...
		sub	ebx, 4
		cmp	ebx, esi
		jb	short loc_1001DC42
		cmp	[ebx], edi
		jz	short loc_1001DBDF
		push	edi		; Ptr
		call	ds:EncodePointer
		cmp	[ebx], eax
		jz	short loc_1001DBDF
		push	dword ptr [ebx]	; Ptr
		call	ds:DecodePointer
		push	edi		; Ptr
		mov	esi, eax
		call	ds:EncodePointer
		mov	[ebx], eax
		call	esi
		push	Ptr		; Ptr
		mov	esi, ds:DecodePointer
		call	esi ; DecodePointer
		push	dword_1002543C	; Ptr
		mov	[ebp+var_8], eax
		call	esi ; DecodePointer
		mov	ecx, [ebp+var_8]
		cmp	[ebp+arg_4], ecx
		jnz	short loc_1001DC33
		mov	esi, [ebp+arg_8]
		cmp	[ebp+arg_0], eax
		jz	short loc_1001DBDF

loc_1001DC33:				; CODE XREF: sub_1001DB49+E0j
		mov	esi, ecx
		mov	[ebp+arg_4], ecx
		mov	[ebp+arg_8], esi
		mov	ebx, eax
		mov	[ebp+arg_0], eax
		jmp	short loc_1001DBDF
; ---------------------------------------------------------------------------

loc_1001DC42:				; CODE XREF: sub_1001DB49+9Bj
		cmp	esi, 0FFFFFFFFh
		jz	short loc_1001DC4F
		push	esi		; Memory
		call	ds:free
		pop	ecx

loc_1001DC4F:				; CODE XREF: sub_1001DB49+FCj
		push	edi		; Ptr
		call	ds:EncodePointer
		mov	dword_1002543C,	eax
		mov	ebx, offset dword_10025434
		mov	Ptr, eax

loc_1001DC65:				; CODE XREF: sub_1001DB49+7Cj
		mov	dword_10025438,	edi
		cmp	[ebp+var_4], edi
		jnz	loc_1001DD34
		xor	eax, eax
		xchg	eax, [ebx]
		jmp	loc_1001DD34
; ---------------------------------------------------------------------------

loc_1001DC7D:				; CODE XREF: sub_1001DB49+19j
					; sub_1001DB49+19Fj
		xor	eax, eax
		jmp	loc_1001DD37
; ---------------------------------------------------------------------------

loc_1001DC84:				; CODE XREF: sub_1001DB49+Cj
		cmp	[ebp+arg_4], 1
		jnz	loc_1001DD34
		mov	eax, large fs:18h
		xor	edi, edi
		mov	esi, edi
		mov	ebx, offset dword_10025434
		mov	edx, [eax+4]
		jmp	short loc_1001DCA6
; ---------------------------------------------------------------------------

loc_1001DCA2:				; CODE XREF: sub_1001DB49+167j
		cmp	eax, edx
		jz	short loc_1001DCB4

loc_1001DCA6:				; CODE XREF: sub_1001DB49+157j
		xor	eax, eax
		mov	ecx, edx
		lock cmpxchg [ebx], ecx
		test	eax, eax
		jnz	short loc_1001DCA2
		jmp	short loc_1001DCB7
; ---------------------------------------------------------------------------

loc_1001DCB4:				; CODE XREF: sub_1001DB49+15Bj
		xor	esi, esi
		inc	esi

loc_1001DCB7:				; CODE XREF: sub_1001DB49+169j
		cmp	dword_10025438,	edi
		push	2
		pop	edi
		jz	short loc_1001DCCB
		push	1Fh
		call	_amsg_exit
		jmp	short loc_1001DD00
; ---------------------------------------------------------------------------

loc_1001DCCB:				; CODE XREF: sub_1001DB49+177j
		push	offset dword_1001F160
		push	offset dword_1001F150
		mov	dword_10025438,	1
		call	_initterm_e
		pop	ecx
		pop	ecx
		test	eax, eax
		jnz	short loc_1001DC7D
		push	offset dword_1001F14C
		push	offset dword_1001F148
		call	_initterm
		pop	ecx
		mov	dword_10025438,	edi

loc_1001DD00:				; CODE XREF: sub_1001DB49+180j
		pop	ecx
		test	esi, esi
		jnz	short loc_1001DD09
		xor	eax, eax
		xchg	eax, [ebx]

loc_1001DD09:				; CODE XREF: sub_1001DB49+1BAj
		cmp	dword_10025444,	0
		jz	short loc_1001DD2E
		push	offset dword_10025444
		call	__IsNonwritableInCurrentImage
		pop	ecx
		test	eax, eax
		jz	short loc_1001DD2E
		push	[ebp+arg_8]
		push	edi
		push	[ebp+arg_0]
		call	dword_10025444

loc_1001DD2E:				; CODE XREF: sub_1001DB49+1C7j
					; sub_1001DB49+1D6j
		inc	dword_100251E8

loc_1001DD34:				; CODE XREF: sub_1001DB49+64j
					; sub_1001DB49+125j ...
		xor	eax, eax
		inc	eax

loc_1001DD37:				; CODE XREF: sub_1001DB49+136j
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn	0Ch
sub_1001DB49	endp

; [00000023 BYTES: COLLAPSED FUNCTION DllEntryPoint]
; [00000133 BYTES: COLLAPSED FUNCTION ___DllMainCRTStartup]
; [00000006 BYTES: COLLAPSED FUNCTION _except1]
; [00000006 BYTES: COLLAPSED FUNCTION _crt_debugger_hook]
; [00000006 BYTES: COLLAPSED FUNCTION __crtUnhandledException]
; [00000006 BYTES: COLLAPSED FUNCTION __crtTerminateProcess]
; [00000006 BYTES: COLLAPSED FUNCTION __CppXcptFilter]
; [00000006 BYTES: COLLAPSED FUNCTION _amsg_exit]
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_1001DEC0	proc near		; CODE XREF: __IsNonwritableInCurrentImage+59p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_0]
		xor	edx, edx
		push	ebx
		push	esi
		push	edi
		mov	ecx, [eax+3Ch]
		add	ecx, eax
		movzx	eax, word ptr [ecx+14h]
		movzx	ebx, word ptr [ecx+6]
		add	eax, 18h
		add	eax, ecx
		test	ebx, ebx
		jz	short loc_1001DEFC
		mov	edi, [ebp+arg_4]

loc_1001DEE4:				; CODE XREF: sub_1001DEC0+3Aj
		mov	esi, [eax+0Ch]
		cmp	edi, esi
		jb	short loc_1001DEF4
		mov	ecx, [eax+8]
		add	ecx, esi
		cmp	edi, ecx
		jb	short loc_1001DEFE

loc_1001DEF4:				; CODE XREF: sub_1001DEC0+29j
		inc	edx
		add	eax, 28h
		cmp	edx, ebx
		jb	short loc_1001DEE4

loc_1001DEFC:				; CODE XREF: sub_1001DEC0+1Fj
		xor	eax, eax

loc_1001DEFE:				; CODE XREF: sub_1001DEC0+32j
		pop	edi
		pop	esi
		pop	ebx
		pop	ebp
		retn
sub_1001DEC0	endp

; ---------------------------------------------------------------------------
		align 10h
; [000000BA BYTES: COLLAPSED FUNCTION __IsNonwritableInCurrentImage]
		align 10h
; [00000031 BYTES: COLLAPSED FUNCTION __ValidateImageBase]
; [0000003C BYTES: COLLAPSED FUNCTION ___atonexitinit]

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_1001E03D(_onexit_t Func)
sub_1001E03D	proc near		; CODE XREF: sub_1001E0E6+6p

var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
Ptr		= dword	ptr -1Ch
ms_exc		= CPPEH_RECORD ptr -18h
Func		= dword	ptr  8

		push	14h
		push	offset stru_100208F0
		call	__SEH_prolog4
		and	[ebp+var_24], 0
		push	Ptr		; Ptr
		mov	esi, ds:DecodePointer
		call	esi ; DecodePointer
		mov	[ebp+Ptr], eax
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_1001E06F
		push	[ebp+Func]	; Func
		call	ds:_onexit
		pop	ecx
		jmp	short loc_1001E0D4
; ---------------------------------------------------------------------------

loc_1001E06F:				; CODE XREF: sub_1001E03D+24j
		push	8
		call	_lock
		pop	ecx
		and	[ebp+ms_exc.registration.TryLevel], 0
		push	Ptr		; Ptr
		call	esi ; DecodePointer
		mov	[ebp+Ptr], eax
		push	dword_1002543C	; Ptr
		call	esi ; DecodePointer
		mov	[ebp+var_20], eax
		lea	eax, [ebp+var_20]
		push	eax
		lea	eax, [ebp+Ptr]
		push	eax
		push	[ebp+Func]	; Ptr
		mov	esi, ds:EncodePointer
		call	esi ; EncodePointer
		push	eax
		call	__dllonexit
		add	esp, 0Ch
		mov	edi, eax
		mov	[ebp+var_24], edi
		push	[ebp+Ptr]	; Ptr
		call	esi ; EncodePointer
		mov	Ptr, eax
		push	[ebp+var_20]	; Ptr
		call	esi ; EncodePointer
		mov	dword_1002543C,	eax
		mov	[ebp+ms_exc.registration.TryLevel], 0FFFFFFFEh
		call	loc_1001E0DD
; ---------------------------------------------------------------------------

loc_1001E0D2:				; CODE XREF: sub_1001E03D+A8j
		mov	eax, edi

loc_1001E0D4:				; CODE XREF: sub_1001E03D+30j
		call	__SEH_epilog4
		retn
; ---------------------------------------------------------------------------

loc_1001E0DA:				; DATA XREF: .rdata:stru_100208F0o
		mov	edi, [ebp+var_24] ; Finally handler 0 for function 1001E03D

loc_1001E0DD:				; CODE XREF: sub_1001E03D+90j
		push	8
		call	_unlock
		pop	ecx
		retn
sub_1001E03D	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_1001E0E6(_onexit_t Func)
sub_1001E0E6	proc near		; CODE XREF: _pre_c_init+36p
					; _pre_c_init+42p

Func		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	[ebp+Func]	; Func
		call	sub_1001E03D
		neg	eax
		pop	ecx
		sbb	eax, eax
		neg	eax
		dec	eax
		pop	ebp
		retn
sub_1001E0E6	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_1001E0FB	proc near		; CODE XREF: DllEntryPoint+9p

PerformanceCount= LARGE_INTEGER	ptr -14h
SystemTimeAsFileTime= _FILETIME	ptr -0Ch
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		sub	esp, 14h
		and	[ebp+SystemTimeAsFileTime.dwLowDateTime], 0
		and	[ebp+SystemTimeAsFileTime.dwHighDateTime], 0
		mov	eax, ___security_cookie
		push	esi
		push	edi
		mov	edi, 0BB40E64Eh
		mov	esi, 0FFFF0000h
		cmp	eax, edi
		jz	short loc_1001E12B
		test	esi, eax
		jz	short loc_1001E12B
		not	eax
		mov	dword_10024990,	eax
		jmp	short loc_1001E191
; ---------------------------------------------------------------------------

loc_1001E12B:				; CODE XREF: sub_1001E0FB+21j
					; sub_1001E0FB+25j
		lea	eax, [ebp+SystemTimeAsFileTime]
		push	eax		; lpSystemTimeAsFileTime
		call	ds:GetSystemTimeAsFileTime
		mov	eax, [ebp+SystemTimeAsFileTime.dwHighDateTime]
		xor	eax, [ebp+SystemTimeAsFileTime.dwLowDateTime]
		mov	[ebp+var_4], eax
		call	ds:GetCurrentThreadId
		xor	[ebp+var_4], eax
		call	ds:GetCurrentProcessId
		xor	[ebp+var_4], eax
		lea	eax, [ebp+PerformanceCount]
		push	eax		; lpPerformanceCount
		call	ds:QueryPerformanceCounter
		mov	ecx, dword ptr [ebp+PerformanceCount+4]
		lea	eax, [ebp+var_4]
		xor	ecx, dword ptr [ebp+PerformanceCount]
		xor	ecx, [ebp+var_4]
		xor	ecx, eax
		cmp	ecx, edi
		jnz	short loc_1001E173
		mov	ecx, 0BB40E64Fh
		jmp	short loc_1001E183
; ---------------------------------------------------------------------------

loc_1001E173:				; CODE XREF: sub_1001E0FB+6Fj
		test	esi, ecx
		jnz	short loc_1001E183
		mov	eax, ecx
		or	eax, 4711h
		shl	eax, 10h
		or	ecx, eax

loc_1001E183:				; CODE XREF: sub_1001E0FB+76j
					; sub_1001E0FB+7Aj
		mov	___security_cookie, ecx
		not	ecx
		mov	dword_10024990,	ecx

loc_1001E191:				; CODE XREF: sub_1001E0FB+2Ej
		pop	edi
		pop	esi
		mov	esp, ebp
		pop	ebp
		retn
sub_1001E0FB	endp


; =============== S U B	R O U T	I N E =======================================


sub_1001E197	proc near		; CODE XREF: _pre_c_init+2Cp
		push	esi
		push	edi
		mov	esi, offset dword_10020898
		mov	edi, offset dword_10020898
		jmp	short loc_1001E1B0
; ---------------------------------------------------------------------------

loc_1001E1A5:				; CODE XREF: sub_1001E197+1Bj
		mov	eax, [esi]
		test	eax, eax
		jz	short loc_1001E1AD
		call	eax

loc_1001E1AD:				; CODE XREF: sub_1001E197+12j
		add	esi, 4

loc_1001E1B0:				; CODE XREF: sub_1001E197+Cj
		cmp	esi, edi
		jb	short loc_1001E1A5
		pop	edi
		pop	esi
		retn
sub_1001E197	endp


; =============== S U B	R O U T	I N E =======================================


; int __cdecl Func()
Func		proc near		; DATA XREF: _pre_c_init+31o
		push	esi
		push	edi
		mov	esi, offset dword_100208A0
		mov	edi, offset dword_100208A0
		jmp	short loc_1001E1D0
; ---------------------------------------------------------------------------

loc_1001E1C5:				; CODE XREF: Func+1Bj
		mov	eax, [esi]
		test	eax, eax
		jz	short loc_1001E1CD
		call	eax

loc_1001E1CD:				; CODE XREF: Func+12j
		add	esi, 4

loc_1001E1D0:				; CODE XREF: Func+Cj
		cmp	esi, edi
		jb	short loc_1001E1C5
		pop	edi
		pop	esi
		retn
Func		endp

; ---------------------------------------------------------------------------
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _initterm]
; [00000006 BYTES: COLLAPSED FUNCTION _initterm_e]

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1001E1E4()
sub_1001E1E4	proc near		; DATA XREF: _pre_c_init+3Bo
		push	offset dword_100251EC
		call	__clean_type_info_names_internal
		pop	ecx
		retn
sub_1001E1E4	endp

; [00000045 BYTES: COLLAPSED FUNCTION __SEH_prolog4]
; [00000014 BYTES: COLLAPSED FUNCTION __SEH_epilog4]
; [00000023 BYTES: COLLAPSED FUNCTION __except_handler4]
; [00000006 BYTES: COLLAPSED FUNCTION _lock]
; [00000006 BYTES: COLLAPSED FUNCTION _unlock]
; [00000006 BYTES: COLLAPSED FUNCTION __dllonexit]
; [00000006 BYTES: COLLAPSED FUNCTION __clean_type_info_names_internal]
; [00000006 BYTES: COLLAPSED FUNCTION _except_handler4_common]
; [00000006 BYTES: COLLAPSED FUNCTION IsProcessorFeaturePresent]
		align 200h
		dd 300h	dup(?)
_text		ends

; Section 2. (virtual address 0001F000)
; Virtual size			: 000047A0 (  18336.)
; Section size in file		: 00004800 (  18432.)
; Offset to raw	data for section: 0001D800
; Flags	40300040: Data Readable
; Alignment	: 4 bytes
;
; Imports from KERNEL32.dll
;
; ===========================================================================

; Segment type:	Externs
; _idata
; BOOL __stdcall CloseHandle(HANDLE hObject)
		extrn CloseHandle:dword	; CODE XREF: sub_1000B0A0+7p
					; DATA XREF: sub_1000B0A0+7r ...
; BOOL __stdcall ReleaseMutex(HANDLE hMutex)
		extrn ReleaseMutex:dword ; CODE	XREF: sub_1000B0E0+6p
					; sub_1000B840+AFp
					; DATA XREF: ...
; DWORD	__stdcall WaitForSingleObject(HANDLE hHandle, DWORD dwMilliseconds)
		extrn WaitForSingleObject:dword	; CODE XREF: sub_1000B0C0+8p
					; sub_1000B840+14p
					; DATA XREF: ...
; HANDLE __stdcall CreateMutexA(LPSECURITY_ATTRIBUTES lpMutexAttributes, BOOL bInitialOwner, LPCSTR lpName)
		extrn CreateMutexA:dword ; CODE	XREF: sub_1000B070+18p
					; sub_1000B840+6p
					; DATA XREF: ...
; DWORD	__stdcall TlsAlloc()
		extrn TlsAlloc:dword	; CODE XREF: sub_1000B840+27p
					; DATA XREF: sub_1000B840+27r
; LPVOID __stdcall TlsGetValue(DWORD dwTlsIndex)
		extrn TlsGetValue:dword	; CODE XREF: sub_1000B120+Dp
					; sub_1000B120+33p ...
; BOOL __stdcall TlsSetValue(DWORD dwTlsIndex, LPVOID lpTlsValue)
		extrn TlsSetValue:dword	; CODE XREF: sub_1000B120+27p
					; DATA XREF: sub_1000B120+27r
; DWORD	__stdcall GetLastError()
		extrn GetLastError:dword ; DATA	XREF: sub_10019C60:loc_10019C74r
; void __stdcall SetLastError(DWORD dwErrCode)
		extrn SetLastError:dword ; CODE	XREF: sub_10019E10:loc_10019E43p
					; sub_10019E50:loc_10019E83p ...
; void __stdcall InitializeCriticalSection(LPCRITICAL_SECTION lpCriticalSection)
		extrn InitializeCriticalSection:dword ;	CODE XREF: sub_10019BA0+33p
					; DATA XREF: sub_10019BA0+33r
; void __stdcall EnterCriticalSection(LPCRITICAL_SECTION lpCriticalSection)
		extrn EnterCriticalSection:dword ; CODE	XREF: sub_10019BA0+68p
					; DATA XREF: sub_10019BA0+68r
; void __stdcall LeaveCriticalSection(LPCRITICAL_SECTION lpCriticalSection)
		extrn LeaveCriticalSection:dword ; CODE	XREF: sub_10019BA0+8Ap
					; DATA XREF: sub_10019BA0+8Ar
; void __stdcall Sleep(DWORD dwMilliseconds)
		extrn Sleep:dword	; CODE XREF: sub_10019BA0+57p
					; DATA XREF: sub_10019BA0+4Fr
; BOOL __stdcall FreeLibrary(HMODULE hLibModule)
		extrn FreeLibrary:dword	; CODE XREF: sub_10019C80+95p
					; DATA XREF: sub_10019C80+95r
; FARPROC __stdcall GetProcAddress(HMODULE hModule, LPCSTR lpProcName)
		extrn GetProcAddress:dword ; CODE XREF:	sub_10019C80+3Cp
					; DATA XREF: sub_10019C80+2Dr
; HMODULE __stdcall LoadLibraryA(LPCSTR	lpLibFileName)
		extrn LoadLibraryA:dword ; CODE	XREF: sub_10019C80+1Dp
					; DATA XREF: sub_10019C80+1Dr
; DWORD	__stdcall GetCurrentThreadId()
		extrn GetCurrentThreadId:dword ; CODE XREF: sub_1001E0FB+43p
					; DATA XREF: sub_1001E0FB+43r
; DWORD	__stdcall GetCurrentProcessId()
		extrn GetCurrentProcessId:dword	; CODE XREF: sub_1001E0FB+4Cp
					; DATA XREF: sub_1001E0FB+4Cr
; BOOL __stdcall QueryPerformanceCounter(LARGE_INTEGER *lpPerformanceCount)
		extrn QueryPerformanceCounter:dword ; CODE XREF: sub_1001E0FB+59p
					; DATA XREF: sub_1001E0FB+59r
; PVOID	__stdcall DecodePointer(PVOID Ptr)
		extrn DecodePointer:dword ; CODE XREF: sub_1001DB49+6Fp
					; sub_1001DB49+88p ...
; PVOID	__stdcall EncodePointer(PVOID Ptr)
		extrn EncodePointer:dword ; CODE XREF: _pre_c_init+10p
					; sub_1001DB49+A2p ...
; BOOL __stdcall IsProcessorFeaturePresent(DWORD ProcessorFeature)
		extrn __imp_IsProcessorFeaturePresent:dword
					; DATA XREF: IsProcessorFeaturePresentr
; BOOL __stdcall IsDebuggerPresent()
		extrn IsDebuggerPresent:dword ;	CODE XREF: ___raise_securityfailure+3p
					; DATA XREF: ___raise_securityfailure+3r
; void __stdcall GetSystemTimeAsFileTime(LPFILETIME lpSystemTimeAsFileTime)
		extrn GetSystemTimeAsFileTime:dword ; CODE XREF: sub_1001E0FB+34p
					; DATA XREF: sub_1001E0FB+34r

;
; Imports from MSVCR120.dll
;
; size_t __cdecl fread(void *DstBuf, size_t ElementSize, size_t	Count, FILE *File)
		extrn fread:dword	; CODE XREF: ldap_init_templates+ACp
					; ldap_init_getfilter+82p ...
; int __cdecl fseek(FILE *File,	__int32	Offset,	int Origin)
		extrn fseek:dword	; CODE XREF: ldap_init_templates+39p
					; ldap_init_templates+66p ...
; __int32 __cdecl ftell(FILE *File)
		extrn ftell:dword	; CODE XREF: ldap_init_templates+59p
					; ldap_init_getfilter+45p ...
; char *__cdecl	strrchr(const char *Str, int Ch)
		extrn strrchr:dword	; CODE XREF: sub_10003C30+3E0p
					; sub_10003C30+442p ...
; int __cdecl atoi(const char *Str)
		extrn atoi:dword	; CODE XREF: ldap_init_templates_buf+53p
					; ldap_x_hostlist_next+F9p ...
; int snprintf(char *Dest, size_t Count, const char *Format, ...)
		extrn _snprintf:dword	; CODE XREF: ldap_perror+75p
					; ldap_perror+15Cp ...
; char *__cdecl	strerror(int)
		extrn strerror:dword	; CODE XREF: ldap_perror+53p
					; ldap_perror+235p
					; DATA XREF: ...
; int *__cdecl errno()
		extrn _errno:dword	; CODE XREF: ldap_perror+4Bp
					; ldap_perror:loc_100049ACp ...
; char *__cdecl	fgets(char *Buf, int MaxCount, FILE *File)
		extrn fgets:dword	; CODE XREF: ldap_friendly_name+80p
					; ldap_friendly_name+A3p ...
; void __cdecl rewind(FILE *File)
		extrn rewind:dword	; CODE XREF: ldap_friendly_name+ADp
					; DATA XREF: ldap_friendly_name+ADr
; int __cdecl strnicmp(const char *Str1, const char *Str, size_t MaxCount)
		extrn _strnicmp:dword	; CODE XREF: sub_10007590+70p
					; sub_10007BB0+9Ap ...
; int __cdecl toupper(int C)
		extrn toupper:dword	; CODE XREF: sub_10007520+20p
					; sub_10007520+2Dp ...
; void *__cdecl	memcpy(void *Dst, const	void *Src, size_t Size)
		extrn __imp_memcpy:dword ; DATA	XREF: memcpyr
; void *__cdecl	memset(void *Dst, int Val, size_t Size)
		extrn __imp_memset:dword ; DATA	XREF: memsetr
; double __cdecl difftime64(__time64_t Time1, __time64_t Time2)
		extrn _difftime64:dword	; CODE XREF: sub_1000A440+23p
					; DATA XREF: sub_1000A440+23r
; FILE *__cdecl	fopen(const char *Filename, const char *Mode)
		extrn fopen:dword	; CODE XREF: ldap_init_templates+16p
					; ldap_friendly_name+56p ...
; void *__cdecl	calloc(size_t NumOfElements, size_t SizeOfElements)
		extrn calloc:dword	; CODE XREF: sub_1000B120+17p
					; ldap_init+105p ...
; void __cdecl free(void *Memory)
		extrn free:dword	; CODE XREF: sub_1000B0A0+Ep
					; ldap_init+1C1p ...
; void *__cdecl	malloc(size_t Size)
		extrn malloc:dword	; CODE XREF: sub_1000B070+3p
					; ldap_init+31p ...
; void *__cdecl	realloc(void *Memory, size_t NewSize)
		extrn realloc:dword	; DATA XREF: ldap_x_realloc+9r
					; sub_1001C500+9r
; void __cdecl perror(const char *ErrMsg)
		extrn perror:dword	; CODE XREF: sub_1000CCA0+192p
					; DATA XREF: sub_1000CCA0+192r
; int __cdecl isspace(int C)
		extrn isspace:dword	; CODE XREF: sub_10013D20+24p
					; sub_10014F20+1Bp ...
; int __cdecl isalnum(int C)
		extrn isalnum:dword	; CODE XREF: sub_10013380+1Dp
					; DATA XREF: sub_10013380+Cr
; void __cdecl qsort(void *Base, size_t	NumOfElements, size_t SizeOfElements, int (__cdecl *PtFuncCompare)(const void *, const void *))
		extrn qsort:dword	; CODE XREF: ldap_keysort_entries+19Cp
					; ldap_multisort_entries+16Ap ...
; char *__cdecl	ctime64(const __time64_t *Time)
		extrn _ctime64:dword	; CODE XREF: sub_100174D0+169p
					; DATA XREF: sub_100174D0+169r
; int __cdecl islower(int C)
		extrn islower:dword	; CODE XREF: sub_10015D40+441p
					; DATA XREF: sub_10015D40+441r
; int __cdecl isdigit(int C)
		extrn isdigit:dword	; CODE XREF: sub_100174D0+69p
					; DATA XREF: sub_100174D0+69r
; FILE *__cdecl	_iob_func()
		extrn __iob_func:dword	; CODE XREF: ber_err_printp
					; ber_err_print+17p
					; DATA XREF: ...
; int __cdecl fflush(FILE *File)
		extrn fflush:dword	; DATA XREF: ber_err_print+24r
; int __cdecl fputs(const char *Str, FILE *File)
		extrn fputs:dword	; CODE XREF: ber_err_print+Ep
					; DATA XREF: ber_err_print+Er
		extrn __imp__except1:dword ; DATA XREF:	_except1r
		extrn __imp__crt_debugger_hook:dword ; DATA XREF: _crt_debugger_hookr
		extrn __imp___crtUnhandledException:dword
					; DATA XREF: __crtUnhandledExceptionr
		extrn __imp___crtTerminateProcess:dword	; DATA XREF: __crtTerminateProcessr
		extrn __imp___CppXcptFilter:dword ; DATA XREF: __CppXcptFilterr
		extrn __imp__amsg_exit:dword ; DATA XREF: _amsg_exitr
		extrn _malloc_crt:dword	; CODE XREF: _pre_c_init+6p
					; DATA XREF: _pre_c_init+6r
		extrn __imp__initterm:dword ; DATA XREF: _inittermr
		extrn __imp__initterm_e:dword ;	DATA XREF: _initterm_er
		extrn __imp__lock:dword	; DATA XREF: _lockr
		extrn __imp__unlock:dword ; DATA XREF: _unlockr
		extrn _calloc_crt:dword	; CODE XREF: ___atonexitinit+11p
					; DATA XREF: ___atonexitinit+11r
		extrn __imp___dllonexit:dword ;	DATA XREF: __dllonexitr
; _onexit_t __cdecl onexit(_onexit_t Func)
		extrn _onexit:dword	; CODE XREF: sub_1001E03D+29p
					; DATA XREF: sub_1001E03D+29r
		extrn __imp___clean_type_info_names_internal:dword
					; DATA XREF: __clean_type_info_names_internalr
		extrn __imp__except_handler4_common:dword
					; DATA XREF: _except_handler4_commonr
; int __cdecl feof(FILE	*File)
		extrn feof:dword	; CODE XREF: ldap_init_templates+B7p
					; ldap_init_getfilter+8Bp ...
; int __cdecl fclose(FILE *File)
		extrn fclose:dword	; CODE XREF: ldap_init_templates+43p
					; ldap_init_templates+70p ...
; void *__cdecl	memmove(void *Dst, const void *Src, size_t Size)
		extrn memmove:dword	; CODE XREF: sub_100027D0+32p
					; sub_10002820+6Dp ...
; char *__cdecl	strtok(char *Str, const	char *Delim)
		extrn strtok:dword	; CODE XREF: ldap_str2charray+53p
					; ldap_str2charray+7Bp	...
; char *__cdecl	strchr(const char *Str,	int Val)
		extrn strchr:dword	; CODE XREF: ldap_str2charray+25p
					; ldap_friendly_name+11Ap ...
; __time64_t __cdecl time64(__time64_t *Time)
		extrn _time64:dword	; CODE XREF: sub_10001E00+152p
					; sub_10009610+1B2p ...
; int sprintf(char *Dest, const	char *Format, ...)
		extrn sprintf:dword	; CODE XREF: sub_10001E00+164p
					; sub_10006350+92p ...
; char *__cdecl	strncpy(char *Dest, const char *Source,	size_t Count)
		extrn strncpy:dword	; CODE XREF: ldap_x_hostlist_next+8Ap
					; DATA XREF: ldap_x_hostlist_next+8Ar
; int __cdecl stricmp(const char *Str1,	const char *Str2)
		extrn _stricmp:dword	; CODE XREF: ldap_charray_inlist+27p
					; ldap_charray_position+23p ...
; int __cdecl write(int, const void *, unsigned	int)
		extrn _write:dword	; CODE XREF: ber_flush+107p
					; DATA XREF: ber_flush+107r


; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1001F148h
dword_1001F148	dd 0			; DATA XREF: sub_1001DB49+1A6o
dword_1001F14C	dd 0			; DATA XREF: sub_1001DB49+1A1o
dword_1001F150	dd 0			; DATA XREF: sub_1001DB49+187o
		dd offset _pre_c_init
		dd offset sub_1001D984
		dd offset ___atonexitinit
dword_1001F160	dd 4 dup(0)		; DATA XREF: sub_1001DB49:loc_1001DCCBo
; Debug	Directory entries
		dd 0			; Characteristics
		dd 56F29A72h		; TimeDateStamp: Wed Mar 23 13:30:26 2016
		dw 0			; MajorVersion
		dw 0			; MinorVersion
		dd 2			; Type:	IMAGE_DEBUG_TYPE_CODEVIEW
		dd 93h			; SizeOfData
		dd rva asc_100207E8	; AddressOfRawData
		dd 1EFE8h		; PointerToRawData
		dd 0			; Characteristics
		dd 56F29A72h		; TimeDateStamp: Wed Mar 23 13:30:26 2016
		dw 0			; MajorVersion
		dw 0			; MinorVersion
		dd 0Ch			; Type
		dd 14h			; SizeOfData
		dd rva dword_1002087C	; AddressOfRawData
		dd 1F07Ch		; PointerToRawData
aIti		db '{iti',0             ; DATA XREF: sub_10001000+17Eo
; char Src[3]
Src		db 3 dup(0)		; DATA XREF: ldap_add_ext+4Eo
					; sub_10001CC0+83o ...
aItS		db '{it{s{',0           ; DATA XREF: ldap_add_ext+27Fo
					; ldap_modify_ext+29Bo
		align 4
aSV		db '{s[V]}',0           ; DATA XREF: ldap_add_ext+2ADo
		align 10h
aSV_0		db '{s[v]}',0           ; DATA XREF: ldap_add_ext:loc_10001874o
		align 4
asc_1001F1C8	db '}}',0               ; DATA XREF: ldap_add_ext:loc_10001894o
					; ldap_modify_ext:loc_1000AEFDo ...
		align 4
a2_16_840_1_113	db '2.16.840.1.113730.3.4.16',0 ; DATA XREF: ldap_create_authzid_control+2Eo
		align 4
a2_16_840_1_1_0	db '2.16.840.1.113730.3.4.15',0 ; DATA XREF: ldap_parse_authzid_control+3Fo
		align 4
aCachedtime	db 'cachedtime',0       ; DATA XREF: sub_10001E00+14Bo
		align 10h
; char Format[]
Format		db '%ld',0              ; DATA XREF: sub_10001E00+15Eo
aItSSo		db '{it{s{so}}',0       ; DATA XREF: ldap_compare_ext+281o
		align 10h
aT		db 't{',0               ; DATA XREF: sub_10002DD0+C9o
					; sub_10013B50+9o ...
		align 4
aS		db '{s',0               ; DATA XREF: sub_10002DD0+F7o
					; ldap_create_sort_control+84o
		align 4
aB		db 'b',0                ; DATA XREF: sub_10002C10+10Eo
					; sub_10002DD0+119o ...
		align 4
; char aO[]
aO		db 'o',0                ; DATA XREF: sub_10002C10+142o
					; sub_10002DD0+13Bo ...
		align 10h
aA		db '{a',0               ; DATA XREF: sub_10002C10+D9o
					; ldap_get_dn+48o ...
		align 4
aIts		db '{its',0             ; DATA XREF: ldap_delete_ext+263o
		align 4
aAddable	db 'addable',0          ; DATA XREF: .data:off_10024000o
aModrdn		db 'modrdn',0           ; DATA XREF: .data:10024004o
		align 4
aAltview	db 'altview',0          ; DATA XREF: .data:10024008o
aCis		db 'cis',0              ; DATA XREF: .data:off_10024038o
aMls		db 'mls',0              ; DATA XREF: .data:1002403Co
aDn_0		db 'dn',0               ; DATA XREF: .data:10024040o
		align 10h
aBool		db 'bool',0             ; DATA XREF: .data:10024044o
		align 4
aJpeg		db 'jpeg',0             ; DATA XREF: .data:10024048o
		align 10h
aJpegbtn	db 'jpegbtn',0          ; DATA XREF: .data:1002404Co
aFax		db 'fax',0              ; DATA XREF: .data:10024050o
aFaxbtn		db 'faxbtn',0           ; DATA XREF: .data:10024054o
		align 4
aAudiobtn	db 'audiobtn',0         ; DATA XREF: .data:10024058o
		align 10h
aTime		db 'time',0             ; DATA XREF: .data:1002405Co
		align 4
aDate		db 'date',0             ; DATA XREF: .data:10024060o
		align 10h
aUrl_1		db 'url',0              ; DATA XREF: .data:10024064o
aSearchact	db 'searchact',0        ; DATA XREF: .data:10024068o
		align 10h
aLinkact	db 'linkact',0          ; DATA XREF: .data:1002406Co
aAdddnact	db 'adddnact',0         ; DATA XREF: .data:10024070o
		align 4
aAddact		db 'addact',0           ; DATA XREF: .data:10024074o
		align 4
aVerifyact	db 'verifyact',0        ; DATA XREF: .data:10024078o
		align 4
aMail		db 'mail',0             ; DATA XREF: .data:1002407Co
		align 10h
aRo		db 'ro',0               ; DATA XREF: .data:off_1002401Co
		align 4
aSort		db 'sort',0             ; DATA XREF: .data:10024020o
		align 4
a1val		db '1val',0             ; DATA XREF: .data:10024024o
		align 4
aHide		db 'hide',0             ; DATA XREF: .data:10024028o
		align 4
aRequired	db 'required',0         ; DATA XREF: .data:1002402Co
		align 4
aHideiffalse	db 'hideiffalse',0      ; DATA XREF: .data:10024030o
aBadTemplateVer	db 'Bad template version',0 ; DATA XREF: .data:off_100240ECo
		align 4
aOutOfMemory	db 'Out of memory',0    ; DATA XREF: .data:100240F4o
					; .data:100242BCo
		align 4
aBadTemplateSyn	db 'Bad template syntax',0 ; DATA XREF: .data:100240FCo
aFileErrorReadi	db 'File error reading template',0 ; DATA XREF: .data:10024104o
; char Mode[2]
Mode		db 'r',0                ; DATA XREF: ldap_init_templates+6o
					; ldap_friendly_name+50o ...
		align 10h
; char Str2[]
Str2		db 'version',0          ; DATA XREF: ldap_init_templates_buf+33o
					; ldap_init_searchprefs_buf+32o
; char Str1[]
Str1		db 'constant',0         ; DATA XREF: sub_10003C30+2A7o
		align 4
; char aAddersdn[]
aAddersdn	db 'addersdn',0         ; DATA XREF: sub_10003C30+2C0o
		align 10h
; char aItem[]
aItem		db 'item',0             ; DATA XREF: sub_10003C30+3A4o
		align 4
; char aSamerow[]
aSamerow	db 'samerow',0          ; DATA XREF: sub_10003C30+5D9o
aUnknownError	db 'Unknown error',0    ; DATA XREF: ldap_tmplerr2string:loc_10003C12o
					; ldap_err2string:loc_100045D2o ...
		align 10h
; char aEnd[]
aEnd		db 'END',0              ; DATA XREF: sub_10004490+AAo
aSuccess	db 'Success',0          ; DATA XREF: .data:off_10024114o
aOperationsErro	db 'Operations error',0 ; DATA XREF: .data:1002411Co
		align 10h
aProtocolError	db 'Protocol error',0   ; DATA XREF: .data:10024124o
		align 10h
aTimelimitExcee	db 'Timelimit exceeded',0 ; DATA XREF: .data:1002412Co
		align 4
aSizelimitExcee	db 'Sizelimit exceeded',0 ; DATA XREF: .data:10024134o
		align 4
aCompareFalse	db 'Compare false',0    ; DATA XREF: .data:1002413Co
		align 4
aCompareTrue	db 'Compare true',0     ; DATA XREF: .data:10024144o
		align 4
aAuthentication	db 'Authentication method not supported',0 ; DATA XREF: .data:1002414Co
aStrongAuthenti	db 'Strong authentication required',0 ; DATA XREF: .data:10024154o
		align 4
aPartialResults	db 'Partial results and referral received',0 ; DATA XREF: .data:1002415Co
		align 4
aReferralReceiv	db 'Referral received',0 ; DATA XREF: .data:10024164o
		align 4
aAdministrative	db 'Administrative limit exceeded',0 ; DATA XREF: .data:1002416Co
		align 4
aUnavailableCri	db 'Unavailable critical extension',0 ; DATA XREF: .data:10024174o
		align 4
aConfidentialit	db 'Confidentiality required',0 ; DATA XREF: .data:1002417Co
		align 4
aSaslBindInProg	db 'SASL bind in progress',0 ; DATA XREF: .data:10024184o
		align 4
aNoSuchAttribut	db 'No such attribute',0 ; DATA XREF: .data:1002418Co
		align 10h
aUndefinedAttri	db 'Undefined attribute type',0 ; DATA XREF: .data:10024194o
		align 4
aInappropriateM	db 'Inappropriate matching',0 ; DATA XREF: .data:1002419Co
		align 4
aConstraintViol	db 'Constraint violation',0 ; DATA XREF: .data:100241A4o
		align 4
aTypeOrValueExi	db 'Type or value exists',0 ; DATA XREF: .data:100241ACo
		align 4
aInvalidSyntax	db 'Invalid syntax',0   ; DATA XREF: .data:100241B4o
		align 4
aNoSuchObject	db 'No such object',0   ; DATA XREF: .data:100241BCo
		align 4
aAliasProblem	db 'Alias problem',0    ; DATA XREF: .data:100241C4o
		align 4
aInvalidDnSynta	db 'Invalid DN syntax',0 ; DATA XREF: .data:100241CCo
		align 4
aObjectIsALeaf	db 'Object is a leaf',0 ; DATA XREF: .data:100241D4o
		align 4
aAliasDereferen	db 'Alias dereferencing problem',0 ; DATA XREF: .data:100241DCo
aInappropriateA	db 'Inappropriate authentication',0 ; DATA XREF: .data:100241E4o
		align 4
aInvalidCredent	db 'Invalid credentials',0 ; DATA XREF: .data:100241ECo
aInsufficientAc	db 'Insufficient access',0 ; DATA XREF: .data:100241F4o
aDsaIsBusy	db 'DSA is busy',0      ; DATA XREF: .data:100241FCo
aDsaIsUnavailab	db 'DSA is unavailable',0 ; DATA XREF: .data:10024204o
		align 10h
aDsaIsUnwilling	db 'DSA is unwilling to perform',0 ; DATA XREF: .data:1002420Co
aLoopDetected	db 'Loop detected',0    ; DATA XREF: .data:10024214o
		align 4
aSortControlIsM	db 'Sort Control is missing',0 ; DATA XREF: .data:1002421Co
aSearchResultsE	db 'Search results exceed the range specified by the offsets',0
					; DATA XREF: .data:10024224o
		align 10h
aNamingViolatio	db 'Naming violation',0 ; DATA XREF: .data:1002422Co
		align 4
aObjectClassVio	db 'Object class violation',0 ; DATA XREF: .data:10024234o
		align 4
aOperationNotAl	db 'Operation not allowed on nonleaf',0 ; DATA XREF: .data:1002423Co
		align 10h
aOperationNot_0	db 'Operation not allowed on RDN',0 ; DATA XREF: .data:10024244o
		align 10h
aAlreadyExists	db 'Already exists',0   ; DATA XREF: .data:1002424Co
		align 10h
aCannotModifyOb	db 'Cannot modify object class',0 ; DATA XREF: .data:10024254o
		align 4
aResultsTooLarg	db 'Results too large',0 ; DATA XREF: .data:1002425Co
		align 10h
aAffectsMultipl	db 'Affects multiple servers',0 ; DATA XREF: .data:10024264o
		align 4
aCanTContactLda	db 'Can',27h,'t contact LDAP server',0 ; DATA XREF: .data:10024274o
		align 4
aLocalError	db 'Local error',0      ; DATA XREF: .data:1002427Co
aEncodingError	db 'Encoding error',0   ; DATA XREF: .data:10024284o
		align 4
aDecodingError	db 'Decoding error',0   ; DATA XREF: .data:1002428Co
		align 4
aTimedOut	db 'Timed out',0        ; DATA XREF: .data:10024294o
		align 10h
aUnknownAuthent	db 'Unknown authentication method',0 ; DATA XREF: .data:1002429Co
		align 10h
aBadSearchFilte	db 'Bad search filter',0 ; DATA XREF: .data:100242A4o
		align 4
aUserCancelledO	db 'User cancelled operation',0 ; DATA XREF: .data:100242ACo
		align 10h
aBadParameterTo	db 'Bad parameter to an ldap routine',0 ; DATA XREF: .data:100242B4o
		align 4
aCanTConnectToT	db 'Can',27h,'t connect to the LDAP server',0 ; DATA XREF: .data:100242C4o
		align 4
aNotSupportedBy	db 'Not supported by this version of the LDAP protocol',0
					; DATA XREF: .data:100242CCo
		align 4
aRequestedLdapC	db 'Requested LDAP control not found',0 ; DATA XREF: .data:100242D4o
		align 10h
aNoResultsRetur	db 'No results returned',0 ; DATA XREF: .data:100242DCo
aMoreResultsToR	db 'More results to return',0 ; DATA XREF: .data:100242E4o
		align 4
aClientDetected	db 'Client detected loop',0 ; DATA XREF: .data:100242ECo
		align 4
aReferralHopLim	db 'Referral hop limit exceeded',0 ; DATA XREF: .data:100242F4o
aUnknownError_0	db 'unknown error',0    ; DATA XREF: ldap_perror+5Bo
					; ldap_perror+23Do
		align 10h
asc_1001F970	db ': ',0               ; DATA XREF: ldap_perror:loc_100047C2o
		align 4
; char aSSS[]
aSSS		db '%s%s%s',0           ; DATA XREF: ldap_perror+6Ao
					; ldap_perror+1EEo
		align 4
; char Str[]
Str		db ' - ',0              ; DATA XREF: ldap_perror+211o
; char asc_1001F980[]
asc_1001F980	db 0Ah,0		; DATA XREF: ldap_perror:loc_100049CEo
					; sub_10008360+44Er ...
		align 4
; char aSSmatchedS[]
aSSmatchedS	db '%s%smatched: %s',0Ah,0 ; DATA XREF: ldap_perror+271o
		align 4
; char aSSadditionalIn[]
aSSadditionalIn	db '%s%sadditional info: %s',0Ah,0 ; DATA XREF: ldap_perror+2A7o
		align 4
; char aSSnotAnLdapErr[]
aSSnotAnLdapErr	db '%s%sNot an LDAP errno %d',0Ah,0 ; DATA XREF: ldap_perror+14Do
		align 10h
aIa		db '{ia}',0             ; DATA XREF: sub_10004BB0+A8o
		align 4
aIaa		db '{iaa',0             ; DATA XREF: sub_10004BB0+CBo
					; ldap_parse_extended_result+B3o
		align 10h
asc_1001F9E0	db 'x',0                ; DATA XREF: sub_10004BB0+102o
					; sub_10004BB0+177o ...
		align 4
aV		db 'v',0                ; DATA XREF: sub_10004BB0+115o
		align 4
asc_1001F9E8	db '}',0                ; DATA XREF: sub_10004BB0+1C7o
					; ldap_passwd:loc_1000D930o ...
		align 4
aItTsto		db '{it{tsto}',0        ; DATA XREF: ldap_extended_operation+14Fo
		align 4
aItTs		db '{it{ts}',0          ; DATA XREF: ldap_extended_operation+16Bo
aA_0		db 'a',0                ; DATA XREF: ldap_parse_extended_result+F1o
					; ldap_parse_entrychange_control+B9o ...
		align 4
aO_0		db 'O',0                ; DATA XREF: ldap_parse_extended_result+14Co
		align 4
aXl		db '{xl{',0             ; DATA XREF: ldap_first_attribute+5Eo
		align 10h
aAx		db '{ax}',0             ; DATA XREF: ldap_first_attribute+8Ao
					; ldap_next_attribute+34o
		align 4
; char aC[]
aC		db 'c',0                ; DATA XREF: ldap_dn2ufn:loc_10005A20o
		align 4
; char aOu[]
aOu		db 'ou',0               ; DATA XREF: ldap_dn2ufn+16Eo
		align 10h
; char aSt[]
aSt		db 'st',0               ; DATA XREF: ldap_dn2ufn+181o
		align 4
; char asc_1001FA24[]
asc_1001FA24	db 'l',0                ; DATA XREF: ldap_dn2ufn+194o
		align 4
; char aDc[]
aDc		db 'dc',0               ; DATA XREF: ldap_dn2ufn+1A7o
		align 4
; char aUid[]
aUid		db 'uid',0              ; DATA XREF: ldap_dn2ufn+1BAo
; char aCn[]
aCn		db 'cn',0               ; DATA XREF: ldap_dn2ufn+1CDo
		align 4
; char Delim[]
Delim		db '@.',0               ; DATA XREF: ldap_explode_dns+34o
					; ldap_explode_dns+73o
		align 4
aSV_1		db '{s{v}}',0           ; DATA XREF: ldap_create_geteffectiveRights_control+68o
		align 10h
a1_3_6_1_4_1_42	db '1.3.6.1.4.1.42.2.27.9.5.2',0
					; DATA XREF: ldap_create_geteffectiveRights_control+ABo
		align 4
aXx		db '{xx',0              ; DATA XREF: ldap_get_entry_controls+5Ao
; char aBadRegularExpr[]
aBadRegularExpr	db 'bad regular expression "%s" - %s',0Ah,0
					; DATA XREF: ldap_init_getfilter_buf+284o
		align 4
; char aSubtree[]
aSubtree	db 'subtree',0          ; DATA XREF: ldap_init_getfilter_buf+194o
					; sub_10015920+242o
; char aOnelevel[]
aOnelevel	db 'onelevel',0         ; DATA XREF: ldap_init_getfilter_buf+1B4o
					; sub_10015920+261o
		align 4
; char aBase[]
aBase		db 'base',0             ; DATA XREF: ldap_init_getfilter_buf+1D6o
					; sub_10015920+27Co ...
		align 10h
a2a		db '\2a',0              ; DATA XREF: sub_10006350+60o
					; sub_10006350+74o
; char a02x[]
a02x		db '\%02x',0            ; DATA XREF: sub_10006350+8Co
		align 4
a5c		db '\5c',0              ; DATA XREF: sub_10006350+E5o
					; sub_10006350+F9o
asc_1001FAB0	db ' ',0                ; DATA XREF: ldap_create_filter+185o
					; ldap_create_filter+23Ao ...
		align 4
aServer_side_so	db 'SERVER_SIDE_SORT',0 ; DATA XREF: .data:off_10024304o
		align 4
aVirtual_list_v	db 'VIRTUAL_LIST_VIEW',0 ; DATA XREF: .data:10024310o
		align 4
aPersistent_sea	db 'PERSISTENT_SEARCH',0 ; DATA XREF: .data:1002431Co
		align 10h
aProxy_authoriz	db 'PROXY_AUTHORIZATION',0 ; DATA XREF: .data:10024328o
aX_lderrno	db 'X_LDERRNO',0        ; DATA XREF: .data:10024334o
		align 10h
aX_memcache	db 'X_MEMCACHE',0       ; DATA XREF: .data:10024340o
		align 4
aX_io_functions	db 'X_IO_FUNCTIONS',0   ; DATA XREF: .data:1002434Co
		align 4
aX_extio_functi	db 'X_EXTIO_FUNCTIONS',0 ; DATA XREF: .data:10024358o
		align 10h
aX_dns_function	db 'X_DNS_FUNCTIONS',0  ; DATA XREF: .data:10024364o
aX_memalloc_fun	db 'X_MEMALLOC_FUNCTIONS',0 ; DATA XREF: .data:10024370o
		align 4
aX_thread_funct	db 'X_THREAD_FUNCTIONS',0 ; DATA XREF: .data:1002437Co
		align 4
aX_exthread_fun	db 'X_EXTHREAD_FUNCTIONS',0 ; DATA XREF: .data:10024388o
		align 4
aX_getlangvalue	db 'X_GETLANGVALUES',0  ; DATA XREF: .data:10024394o
aX_client_side_	db 'X_CLIENT_SIDE_SORT',0 ; DATA XREF: .data:100243A0o
		align 4
aX_url_function	db 'X_URL_FUNCTIONS',0  ; DATA XREF: .data:100243ACo
aX_filter_funct	db 'X_FILTER_FUNCTIONS',0 ; DATA XREF: .data:100243B8o
		align 4
aMozilla_org	db 'mozilla.org',0      ; DATA XREF: sub_100073A0:loc_100073C2o
aXA		db '{x{{a',0            ; DATA XREF: sub_100076F0+159o
					; sub_100079A0+64o
		align 10h
aXA_0		db 'x}{a',0             ; DATA XREF: sub_100079A0+A1o
					; sub_100079A0+D4o
		align 4
aV_2		db '[V]',0              ; DATA XREF: sub_100079A0+129o
aV_3		db '[v]',0              ; DATA XREF: sub_100079A0:loc_10007AD0o
; char aLang[]
aLang		db 'lang-',0            ; DATA XREF: sub_10007BB0+94o
					; sub_10007BB0+140o
		align 4
aV_0		db '[V]}',0             ; DATA XREF: sub_100076F0+1E9o
		align 10h
aV_1		db '[v]}',0             ; DATA XREF: sub_100076F0:loc_100078ECo
		align 4
asc_1001FC18	db 'x}',0               ; DATA XREF: sub_100076F0+217o
		align 4
; char aIII[]
aIII		db '%i',0Ah             ; DATA XREF: sub_10008360+1F5o
		db '%i',0Ah
		db '%i',0Ah,0
		align 4
; char aSSSSS[]
aSSSSS		db '%s',0Ah             ; DATA XREF: sub_10008360+3E0o
		db '%s',0Ah
		db '%s',0Ah
		db '%s',0Ah
		db '%s',0Ah,0
; char aS_0[]
aS_0		db '%s',0Ah,0           ; DATA XREF: sub_1000A0D0+51o
; char aI[]
aI		db 0Ah			; DATA XREF: sub_1000A0D0+A5o
		db '%i',0Ah,0
		align 8
qword_1001FC48	dq 3FF8000000000000h	; DATA XREF: sub_10007ED0+14r
					; ldap_memcache_init+16Fr
qword_1001FC50	dq 4094B00000000000h	; DATA XREF: sub_10007ED0+Cr
					; ldap_memcache_init+167r
aESV		db '{e{s[V]}}',0        ; DATA XREF: ldap_modify_ext+2D5o
		align 4
aESV_0		db '{e{s[v]}}',0        ; DATA XREF: ldap_modify_ext+2DDo
		align 10h
a127_0_0_1	db '127.0.0.1',0        ; DATA XREF: ldap_x_hostlist_first:loc_1000B626o
		align 4
aSecureModeNotS	db 'secure mode not supported',0 ; DATA XREF: .text:1000CF07o
		align 4
aUnableToCreate	db 'unable to create a socket',0 ; DATA XREF: .text:1000CF24o
		align 4
; char ErrMsg[]
ErrMsg		db 'select error: SOCKET_ERROR returned',0 ; DATA XREF: sub_1000CCA0+18Do
aFailedToEnable	db 'failed to enable secure mode',0 ; DATA XREF: sub_1000BD10+42o
					; sub_1000BD10:loc_1000BD73o
		align 4
aS_5		db '{s}',0              ; DATA XREF: ldap_create_proxyauth_control+64o
a2_16_840_1_1_2	db '2.16.840.1.113730.3.4.12',0
					; DATA XREF: ldap_create_proxyauth_control+A7o
		align 4
aS_4		db 's',0                ; DATA XREF: ldap_create_proxiedauth_control+54o
		align 4
a2_16_840_1_1_1	db '2.16.840.1.113730.3.4.18',0
					; DATA XREF: ldap_create_proxiedauth_control+94o
		align 4
aIbb		db '{ibb}',0            ; DATA XREF: ldap_create_persistentsearch_control+60o
		align 10h
a2_16_840_1_1_3	db '2.16.840.1.113730.3.4.3',0
					; DATA XREF: ldap_create_persistentsearch_control+A3o
a2_16_840_1_1_4	db '2.16.840.1.113730.3.4.7',0
					; DATA XREF: ldap_parse_entrychange_control+2Eo
aE		db '{e',0               ; DATA XREF: ldap_parse_entrychange_control+86o
		align 4
asc_1001FD74	db '{',0                ; DATA XREF: ldap_passwd:loc_1000D88Bo
					; ldap_parse_passwordpolicy_control:loc_1000DBA2o ...
		align 4
aTo		db 'to',0               ; DATA XREF: ldap_passwd+DEo
					; ldap_passwd+10Co ...
		align 4
a1_3_6_1_4_1__0	db '1.3.6.1.4.1.4203.1.11.1',0 ; DATA XREF: ldap_passwd+1D6o
aO_1		db 'o}',0               ; DATA XREF: ldap_parse_passwd+D0o
		align 4
a1_3_6_1_4_1__1	db '1.3.6.1.4.1.42.2.27.8.5.1',0
					; DATA XREF: ldap_create_passwordpolicy_control+2Co
					; ldap_create_passwordpolicy_control_ext+2Eo ...
		align 4
aTi		db 'ti',0               ; DATA XREF: ldap_parse_passwordpolicy_control+C6o
					; ldap_parse_passwordpolicy_control+10Co
		align 4
aPasswordExpire	db 'Password expired',0 ; DATA XREF: ldap_passwordpolicy_err2txt:loc_1000DD99o
		align 4
aAccountLocked	db 'Account locked',0   ; DATA XREF: ldap_passwordpolicy_err2txt:loc_1000DDA1o
		align 4
aPasswordMustBe	db 'Password must be changed',0
					; DATA XREF: ldap_passwordpolicy_err2txt:loc_1000DDA9o
		align 4
aPolicyPrevents	db 'Policy prevents password modification',0
					; DATA XREF: ldap_passwordpolicy_err2txt:loc_1000DDB1o
		align 10h
aPolicyRequires	db 'Policy requires old password in order to change password',0
					; DATA XREF: ldap_passwordpolicy_err2txt:loc_1000DDB9o
		align 4
aPasswordFailsQ	db 'Password fails quality checks',0
					; DATA XREF: ldap_passwordpolicy_err2txt:loc_1000DDC1o
		align 4
aPasswordIsTooS	db 'Password is too short for policy',0
					; DATA XREF: ldap_passwordpolicy_err2txt:loc_1000DDC9o
		align 10h
aPasswordHasBee	db 'Password has been changed too recently',0
					; DATA XREF: ldap_passwordpolicy_err2txt:loc_1000DDD1o
		align 4
aNewPasswordIsI	db 'New password is in list of old passwords',0
					; DATA XREF: ldap_passwordpolicy_err2txt:loc_1000DDD9o
		align 4
aNoError	db 'No error',0         ; DATA XREF: ldap_passwordpolicy_err2txt:loc_1000DDE1o
		align 10h
aUnknownErrorCo	db 'Unknown error code',0
					; DATA XREF: ldap_passwordpolicy_err2txt:loc_1000DDE9o
		align 4
aV_4		db '{v',0               ; DATA XREF: sub_1000DF10+45o
		align 4
aNoPreviousRegu	db 'No previous regular expression',0 ; DATA XREF: .text:1000E5DCo
		align 4
aMissing	db 'Missing ]',0        ; DATA XREF: .text:1000E351o
		align 4
aEmptyClosure	db 'Empty closure',0    ; DATA XREF: .text:1000E519o
		align 4
aIllegalClosure	db 'Illegal closure',0  ; DATA XREF: .text:1000E503o
aTooManyPairs	db 'Too many \(\) pairs',0 ; DATA XREF: .text:1000E52Fo
aNullPatternIns	db 'Null pattern inside \(\)',0 ; DATA XREF: .text:1000E55Bo
		align 4
aUnmatched_0	db 'Unmatched \)',0     ; DATA XREF: .text:1000E545o
		align 4
aNullPatternI_0	db 'Null pattern inside \<\>',0 ; DATA XREF: .text:1000E571o
		align 10h
aCyclicalRefere	db 'Cyclical reference',0 ; DATA XREF: .text:1000E587o
		align 4
aUndeterminedRe	db 'Undetermined reference',0 ; DATA XREF: .text:1000E59Do
		align 4
aUnmatched	db 'Unmatched \(',0     ; DATA XREF: .text:1000E4EDo
		align 4
aItSsb		db '{it{ssb',0          ; DATA XREF: ldap_rename+2C2o
aTs		db 'ts}',0              ; DATA XREF: ldap_rename+2F5o
a1_3_6_1_4_1_14	db '1.3.6.1.4.1.1466.20036',0 ; DATA XREF: sub_1000FD40+58Bo
		align 10h
; char aReferral[]
aReferral	db 'Referral:',0Ah,0    ; DATA XREF: sub_1000F040+84r
					; sub_1000F130+51o ...
		align 4
aV2Referral	db 'v2 referral',0      ; DATA XREF: sub_1000F130+E1o
aIt		db '{it',0              ; DATA XREF: sub_10010510+57o
aIa_0		db '{ia',0              ; DATA XREF: sub_10010510+C0o
aAe		db '{ae',0              ; DATA XREF: sub_10010510+9Do
aItIs		db '{it{is',0           ; DATA XREF: sub_10010510+185o
		align 4
aIts_0		db '{its}',0            ; DATA XREF: sub_10010510+1A3o
		align 4
aItSe		db '{it{se',0           ; DATA XREF: sub_10010510+1C0o
		align 4
aItS_0		db '{it{s',0            ; DATA XREF: sub_10010510+1D9o
		align 4
aUnknownMessage	db 'unknown message id',0 ; DATA XREF: sub_10011E90:loc_1001209Bo
		align 4
aItEss_0	db '{it{ess}',0         ; DATA XREF: sub_10010810+4Co
		align 4
aItEss		db '{it{ess}}',0        ; DATA XREF: sub_10010810+43o
		align 10h
aItIsto		db '{it{isto}',0        ; DATA XREF: ldap_sasl_bind+2EDo
		align 4
aItIstS		db '{it{ist{s}}',0      ; DATA XREF: ldap_sasl_bind+34Co
aItIstSo	db '{it{ist{so}}',0     ; DATA XREF: ldap_sasl_bind+326o
		align 4
aIaa_0		db '{iaa}',0            ; DATA XREF: ldap_parse_sasl_bind_result+9Eo
		align 10h
aItIsts		db '{it{ists}',0        ; DATA XREF: sub_10012FF0+235o
		align 4
aObjectclass	db '(objectclass=*)',0  ; DATA XREF: sub_100136F0+18o
					; ldap_url_parse+2Do
aItSeeiib	db '{it{seeiib',0       ; DATA XREF: sub_100135A0+56o
		align 4
aV_5		db '{v}}',0             ; DATA XREF: sub_100135A0+D5o
		align 10h
asc_100200F0	db ']',0                ; DATA XREF: sub_10013BC0:loc_10013C19o
		align 4
; char aDn[]
aDn		db ':dn',0              ; DATA XREF: sub_10013DF0+B7o
					; sub_10013DF0+F6o
aTs_0		db 'ts',0               ; DATA XREF: sub_10013DF0+147o
					; sub_10013DF0+16Bo ...
		align 4
aTotb		db 'totb}',0            ; DATA XREF: sub_10013DF0+1A5o
		align 4
asc_10020104	db '*',0                ; DATA XREF: sub_10013DF0:loc_10013FFBo
		align 4
aTSo		db 't{so}',0            ; DATA XREF: sub_10013DF0+1F8o
		align 10h
aTS		db 't{s{',0             ; DATA XREF: sub_100140E0+Fo
		align 10h
xmmword_10020120 xmmword 3000000020000000100000000h ; DATA XREF: ldap_keysort_entries+95r
xmmword_10020130 xmmword 3000000030000000300000003h ; DATA XREF: ldap_keysort_entries+9Fr
dword_10020140	dd 7D6274h		; DATA XREF: ldap_create_sort_control+D6o
a1_2_840_113556	db '1.2.840.113556.1.4.473',0 ; DATA XREF: ldap_create_sort_control+132o
		align 4
a1_2_840_1135_0	db '1.2.840.113556.1.4.474',0 ; DATA XREF: ldap_parse_sort_control+57o
		align 4
aI_0		db '{i',0               ; DATA XREF: ldap_parse_sort_control+C6o
		align 4
aTa		db 'ta',0               ; DATA XREF: ldap_parse_sort_control+F5o
		align 4
aInternal	db 'internal',0         ; DATA XREF: .data:off_10024880o
		align 4
aLdap		db 'ldap:///',0         ; DATA XREF: ldap_entry2html+4o
					; ldap_vals2html+4o
		align 4
aEntry		db 'Entry',0            ; DATA XREF: sub_10015D40+CDo
					; sub_10015D40+129o
		align 4
; char aHtmlSHeadSTitl[]
aHtmlSHeadSTitl	db '<HTML>%s<HEAD>%s<TITLE>%s%s - ',0 ; DATA XREF: sub_10015D40+E0o
		align 4
; char aSTitleSHeadSBo[]
aSTitleSHeadSBo	db '%s</TITLE>%s</HEAD>%s<BODY>%s<H3>%s - ',0 ; DATA XREF: sub_10015D40+139o
		align 4
; char aH3S[]
aH3S		db '</H3>%s',0          ; DATA XREF: sub_10015D40+182o
; char aAHrefS[]
aAHrefS		db '<A HREF="%s',0      ; DATA XREF: sub_10015D40+1D6o
					; sub_10015D40+2B8o
asc_100201F8	db ', ',0               ; DATA XREF: sub_10015D40+205o
					; sub_10016EC0+ABr ...
		align 4
aTheWorld	db '=The World',0       ; DATA XREF: sub_10015D40:loc_10015F89o
		align 4
a??one		db '??one',0            ; DATA XREF: sub_10015D40+265o
		align 10h
; char aSMoveUpToEmSEm[]
aSMoveUpToEmSEm	db '%s">Move Up To <EM>%s</EM></A>%s<BR>',0 ; DATA XREF: sub_10015D40+27Fo
		align 4
; char a__one_Objectcl[]
a??one?Objectcl	db '??one?(!(objectClass=dsa))">Browse Below <EM>%s</EM></A>%s%s',0
					; DATA XREF: sub_10015D40+2F3o
		align 4
aHr		db '<HR>',0             ; DATA XREF: sub_10015D40+328o
		align 10h
asc_10020280	db '"',0                ; DATA XREF: sub_10015D40+335o
		align 4
; char aS_1[]
aS_1		db '"%s',0              ; DATA XREF: sub_10015D40+35Do
; char aBodySHtmlS[]
aBodySHtmlS	db '</BODY>%s</HTML>%s',0 ; DATA XREF: sub_10015D40+4E2o
		align 4
; char aObjectclass_0[]
aObjectclass_0	db 'objectClass',0      ; DATA XREF: sub_10016490+B9o
					; sub_10016490:loc_10016582o ...
aObjectclass_1	db 'objectClass=*',0    ; DATA XREF: sub_10016490+D1o
					; sub_10016490+150o
		align 4
aUnableToDispla	db '(unable to display non-ASCII text value)',0
					; DATA XREF: sub_10016690+F5o
		align 4
xmmword_100202E4 xmmword 69616D223D4645524820413C3E44443Ch ; DATA XREF:	sub_10016690+2C0r
dword_100202F4	dd 3A6F746Ch		; DATA XREF: sub_10016690+2CFr
byte_100202F8	db 0			; DATA XREF: sub_10016690+2D7r
		align 4
; char aSABrS[]
aSABrS		db '">%s</A><BR>%s',0   ; DATA XREF: sub_10016690+2FBo
		align 4
; char aDdSBrS[]
aDdSBrS		db '<DD>%s<BR>%s',0     ; DATA XREF: sub_10016690+1C4o
					; sub_10016690+2A5o
		align 4
; char aSSS_0[]
aSSS_0		db '%-*s%s%s',0         ; DATA XREF: sub_10016690+1DEo
					; sub_10016690+335o
		align 4
aTrue		db 'TRUE',0             ; DATA XREF: sub_10016690+288o
		align 10h
aFalse		db 'FALSE',0            ; DATA XREF: sub_10016690+290o
		align 4
aUrl		db 'URL',0              ; DATA XREF: sub_10016690:loc_10016A5Do
; char aDdAHrefSSABrS[]
aDdAHrefSSABrS	db '<DD><A HREF="%s">%s</A><BR>%s',0 ; DATA XREF: sub_10016690+3E2o
		align 4
; char aSSSSSS[]
aSSSSSS		db '%-*s%s%s%-*s%s%s',0 ; DATA XREF: sub_10016690+409o
		align 10h
; char aCanTDisplayIte[]
aCanTDisplayIte	db ' Can',27h,'t display item type %ld%s',0 ; DATA XREF: sub_10016690+24Fo
		align 10h
; char aDtBSB[]
aDtBSB		db '<DT><B>%s</B>',0    ; DATA XREF: sub_10017040+10o
		align 10h
; char aS_3[]
aS_3		db ' %s:',0             ; DATA XREF: sub_10017040:loc_10017061o
		align 4
; char aDdAHrefS[]
aDdAHrefS	db '<DD><A HREF="%s',0  ; DATA XREF: sub_10016EC0+2Eo
word_100203B8	dw 3E22h		; DATA XREF: sub_10016EC0+51r
byte_100203BA	db 0			; DATA XREF: sub_10016EC0+5Ar
		align 4
; char aS_2[]
aS_2		db '%-*s',0             ; DATA XREF: sub_10016EC0+72o
		align 4
dword_100203C4	dd 3E412F3Ch		; DATA XREF: sub_10016EC0+10Ar
dword_100203C8	dd 3E52423Ch		; DATA XREF: sub_10016EC0+111r
byte_100203CC	db 0			; DATA XREF: sub_10016EC0+119r
		align 10h
byte_100203D0	db 30h			; DATA XREF: sub_10017450+54r
					; sub_10017450+64r
a123456789abcde	db '123456789ABCDEF',0
		align 4
aBadlyFormatted	db 'badly formatted time',0 ; DATA XREF: sub_100174D0+34o
					; sub_100174D0+BCo
		align 4
; char aDnb[]
aDnb		db '-dnb',0             ; DATA XREF: sub_10017100+D0o
		align 4
; char aDnt[]
aDnt		db '-dnt',0             ; DATA XREF: sub_10017100:loc_10017201o
		align 4
; char aDtAHrefS[]
aDtAHrefS	db '<DT><A HREF="%s',0  ; DATA XREF: sub_10017100+16Do
dword_1002041C	dd 75733F3Fh		; DATA XREF: sub_10017100+19Ar
word_10020420	dw 3F62h		; DATA XREF: sub_10017100+1A1r
byte_10020422	db 0			; DATA XREF: sub_10017100+1ABr
		align 4
; char aBSBADdBrS[]
aBSBADdBrS	db '"><B>%s</B></A><DD><BR>%s',0 ; DATA XREF: sub_10017100+1DDo
		align 10h
word_10020440	dw 2Ch			; DATA XREF: ldap_ufn_search_ct+1CAr
		align 4
aUfnLast	db 'ufn last',0         ; DATA XREF: ldap_ufn_search_co
					; ldap_ufn_search_s+Bo
		align 10h
aUfnIntermediat	db 'ufn intermediate',0 ; DATA XREF: ldap_ufn_search_c+5o
					; ldap_ufn_search_s+10o
		align 4
aUfnFirst	db 'ufn first',0        ; DATA XREF: ldap_ufn_search_c+Ao
					; ldap_ufn_search_s+1Ao
		align 10h
aItn		db '{itn',0             ; DATA XREF: sub_100184D0+E3o
		align 4
; char aUrl_0[]
aUrl_0		db 'URL:',0             ; DATA XREF: sub_10018E60+46o
		align 10h
; char aLdap_0[]
aLdap_0		db 'ldap://',0          ; DATA XREF: sub_10018E60+70o
; char aLdaps[]
aLdaps		db 'ldaps://',0         ; DATA XREF: sub_10018E60+B0o
		align 4
; char aOne[]
aOne		db 'one',0              ; DATA XREF: sub_10018B20:loc_10018CEBo
; char aSub[]
aSub		db 'sub',0              ; DATA XREF: sub_10018B20:loc_10018D90o
a1_3_6_1_4_1__2	db '1.3.6.1.4.1.42.2.27.9.5.8',0
					; DATA XREF: ldap_create_userstatus_control+2Eo
					; ldap_parse_userstatus_control+4Ao
		align 4
aT_0		db 't',0                ; DATA XREF: ldap_parse_userstatus_control+C0o
					; ldap_parse_userstatus_control+1D8o
		align 4
aI_1		db 'i',0                ; DATA XREF: ldap_parse_userstatus_control+FAo
					; ldap_parse_userstatus_control+1BCo
		align 10h
aT_1		db '{t',0               ; DATA XREF: ldap_parse_userstatus_control+13Do
		align 4
aIi		db '{ii',0              ; DATA XREF: ldap_create_virtuallist_control+55o
aTIi		db 't{ii}}',0           ; DATA XREF: ldap_create_virtuallist_control+7Do
		align 10h
aTo_0		db 'to}',0              ; DATA XREF: ldap_create_virtuallist_control+D0o
a2_16_840_1_1_5	db '2.16.840.1.113730.3.4.9',0
					; DATA XREF: ldap_create_virtuallist_control+113o
a2_16_840_1_1_6	db '2.16.840.1.113730.3.4.10',0
					; DATA XREF: ldap_parse_virtuallist_control+6Co
		align 4
aIie		db '{iie}',0            ; DATA XREF: ldap_parse_virtuallist_control+E4o
		align 10h
a1_3_6_1_4_1__3	db '1.3.6.1.4.1.4203.1.11.3',0 ; DATA XREF: ldap_whoami+28o
					; ldap_whoami_s+33o
aWsaasyncgethos	db 'WSAAsyncGetHostByName',0 ; DATA XREF: .data:off_10024908o
		align 10h
aWsaasyncselect	db 'WSAAsyncSelect',0   ; DATA XREF: .data:1002490Co
		align 10h
aWsacleanup	db 'WSACleanup',0       ; DATA XREF: .data:10024910o
		align 4
aWsagetlasterro	db 'WSAGetLastError',0  ; DATA XREF: .data:10024914o
aWsasetlasterro	db 'WSASetLastError',0  ; DATA XREF: .data:10024918o
aWsastartup	db 'WSAStartup',0       ; DATA XREF: .data:1002491Co
		align 4
a__wsafdisset	db '__WSAFDIsSet',0     ; DATA XREF: .data:10024920o
		align 4
aAccept		db 'accept',0           ; DATA XREF: .data:10024924o
		align 10h
aBind		db 'bind',0             ; DATA XREF: .data:10024928o
		align 4
aClosesocket	db 'closesocket',0      ; DATA XREF: .data:1002492Co
aConnect	db 'connect',0          ; DATA XREF: .data:10024930o
aGethostbyname	db 'gethostbyname',0    ; DATA XREF: .data:10024934o
		align 4
aGethostbyaddr	db 'gethostbyaddr',0    ; DATA XREF: .data:10024938o
		align 4
aGethostname	db 'gethostname',0      ; DATA XREF: .data:1002493Co
aGetpeername	db 'getpeername',0      ; DATA XREF: .data:10024940o
aGetsockname	db 'getsockname',0      ; DATA XREF: .data:10024944o
aGetsockopt	db 'getsockopt',0       ; DATA XREF: .data:10024948o
		align 4
aGetprotobyname	db 'getprotobyname',0   ; DATA XREF: .data:1002494Co
		align 4
aHtonl		db 'htonl',0            ; DATA XREF: .data:10024950o
		align 4
aHtons		db 'htons',0            ; DATA XREF: .data:10024954o
		align 4
aInet_addr	db 'inet_addr',0        ; DATA XREF: .data:10024958o
		align 4
aIoctlsocket	db 'ioctlsocket',0      ; DATA XREF: .data:1002495Co
aListen		db 'listen',0           ; DATA XREF: .data:10024960o
		align 4
aNtohl		db 'ntohl',0            ; DATA XREF: .data:10024964o
		align 4
aNtohs		db 'ntohs',0            ; DATA XREF: .data:10024968o
		align 4
aRecv		db 'recv',0             ; DATA XREF: .data:1002496Co
		align 4
aSelect		db 'select',0           ; DATA XREF: .data:10024970o
		align 4
aSend		db 'send',0             ; DATA XREF: .data:10024974o
		align 4
aSetsockopt	db 'setsockopt',0       ; DATA XREF: .data:10024978o
		align 10h
aShutdown	db 'shutdown',0         ; DATA XREF: .data:1002497Co
		align 4
aSocket		db 'socket',0           ; DATA XREF: .data:10024980o
		align 4
aInet_ntoa	db 'inet_ntoa',0        ; DATA XREF: .data:10024984o
		align 10h
; CHAR LibFileName[]
LibFileName	db 'wsock32.dll',0      ; DATA XREF: sub_10019C80+18o
xmmword_100206AC xmmword 7265746E69204C4C44206B636F7A6F4Dh ; DATA XREF:	sub_10019C80+A8r
xmmword_100206BC xmmword 697461746E656D656C706D69206C616Eh ; DATA XREF:	sub_10019C80+B5r
dword_100206CC	dd 2E6E6Fh		; DATA XREF: sub_10019C80+C2r
xmmword_100206D0 xmmword 2C676E696E6E7572206B636F736E6957h ; DATA XREF:	sub_10019C80+CAr
xmmword_100206E0 xmmword 74656E206F6E20676E69776F6C6C6120h ; DATA XREF:	sub_10019C80+DAr
qword_100206F0	dq 636361206B726F77h	; DATA XREF: sub_10019C80+EAr
dword_100206F8	dd 2E737365h		; DATA XREF: sub_10019C80+FAr
byte_100206FC	db 0			; DATA XREF: sub_10019C80+105r
		align 10h
; char aUnknownFmtC[]
aUnknownFmtC	db 'unknown fmt %c',0Ah,0 ; DATA XREF: ber_printf+22Fo
					; ber_scanf+362o
qword_10020710	dq 0			; DATA XREF: sub_1001D6AE+Br
		dd 0
		dd 41F00000h
qword_10020720	dq 0FFFFFFFFFFFFFh	; DATA XREF: sub_1001D581-10Ar
qword_10020728	dq 10000000000000h	; DATA XREF: sub_1001D581-102r
qword_10020730	dq 8000000000000000h	; DATA XREF: .text:1001D755r
		dd 0
		dd 100000h
qword_10020740	dq 0C3E0000000000000h	; DATA XREF: sub_1001D581-177r
					; sub_1001D581+116r
qword_10020748	dq 43E0000000000000h	; DATA XREF: .text:1001D3A5r
					; .text:1001D3C3r ...
qword_10020750	dq 43F0000000000000h	; DATA XREF: .text:1001D3B4r
					; sub_1001D581+14r
qword_10020758	dq 47EFFFFFF0000000h	; DATA XREF: sub_1001D581+5Fr
qword_10020760	dq 380FFFFFF0000000h	; DATA XREF: sub_1001D581-152r
					; sub_1001D581:loc_1001D61Dr
byte_10020768	db 6 dup(0), 60h	; DATA XREF: sub_1001D581-199r
byte_1002076F	db 45h			; DATA XREF: sub_1001D53D+10r
		dd 1008h, 1000000h, 0
		dd 20F00000h
dword_10020780	dd 433h			; DATA XREF: sub_1001D581-FAr
dword_10020784	dd 43Fh			; DATA XREF: sub_1001D6AE+29r
dword_10020788	dd 800h			; DATA XREF: sub_1001D6AE:loc_1001D6C7r
dword_1002078C	dd 17FFh		; DATA XREF: sub_1001D6AE+21r
word_10020790	dw 133Fh		; DATA XREF: sub_1001D53D:loc_1001D555r
		align 4
off_10020794	dd offset dword_10024EC0 ; DATA	XREF: ___report_gsfailure+EDo
					; ___report_securityfailure+C2o
		dd offset dword_10024F10
dword_1002079C	dd 0			; DATA XREF: ___DllMainCRTStartup:loc_1001DDA1r
					; ___DllMainCRTStartup+A8r ...
__load_config_used dd 48h		; Size
		dd 0			; Time stamp
		dw 2 dup(0)		; Version: 0.0
		dd 0			; GlobalFlagsClear
		dd 0			; GlobalFlagsSet
		dd 0			; CriticalSectionDefaultTimeout
		dd 0			; DeCommitFreeBlockThreshold
		dd 0			; DeCommitTotalFreeThreshold
		dd 0			; LockPrefixTable
		dd 0			; MaximumAllocationSize
		dd 0			; VirtualMemoryThreshold
		dd 0			; ProcessAffinityMask
		dd 0			; ProcessHeapFlags
		dw 0			; CSDVersion
		dw 0			; Reserved1
		dd 0			; EditList
		dd offset ___security_cookie ; SecurityCookie
		dd offset ___safe_se_handler_table ; SEHandlerTable
		dd 1			; SEHandlerCount
; Debug	information (IMAGE_DEBUG_TYPE_CODEVIEW)
asc_100207E8	db 'RSDS'               ; DATA XREF: .rdata:1001F184o
					; CV signature
		dd 2B9A0F1Fh		; Data1	; GUID
		dw 0B333h		; Data2
		dw 408Ch		; Data3
		db 0B7h, 1Fh, 8Fh, 0EAh, 16h, 0Eh, 1Eh,	0E3h; Data4
		dd 1			; Age
		db 'c:\builds\moz2_slave\tb-rel-c-esr38-w32_bld-0000000\build\objdir-' ; PdbFileName
		db 'tb\ldap\sdks\c-sdk\ldap\libraries\libldap\nsldap32v60.pdb',0
		align 4
; Debug	information (type 12)
dword_1002087C	dd 0			; DATA XREF: .rdata:1001F1A0o
		dd 2 dup(4Eh), 2 dup(0)
___safe_se_handler_table dd rva	__except_handler4 ; DATA XREF: .rdata:100207E0o
		align 8
dword_10020898	dd 2 dup(0)		; DATA XREF: sub_1001E197+2o
					; sub_1001E197+7o
dword_100208A0	dd 2 dup(0)		; DATA XREF: Func+2o Func+7o
stru_100208A8	dd 0FFFFFFFEh		; GSCookieOffset
					; DATA XREF: ___DllMainCRTStartup+2o
		dd 0			; GSCookieXOROffset ; SEH scope	table for function 1001DD63
		dd 0FFFFFFD0h		; EHCookieOffset
		dd 0			; EHCookieXOROffset
		dd 0FFFFFFFEh		; ScopeRecord.EnclosingLevel
		dd 0			; ScopeRecord.FilterFunc
		dd offset $LN18		; ScopeRecord.HandlerFunc
		dd 0			; ScopeRecord.EnclosingLevel
		dd offset $LN22		; ScopeRecord.FilterFunc
		dd offset $LN23		; ScopeRecord.HandlerFunc
stru_100208D0	dd 0FFFFFFFEh		; GSCookieOffset
					; DATA XREF: __IsNonwritableInCurrentImage+5o
		dd 0			; GSCookieXOROffset ; SEH scope	table for function 1001DF10
		dd 0FFFFFFD8h		; EHCookieOffset
		dd 0			; EHCookieXOROffset
		dd 0FFFFFFFEh		; ScopeRecord.EnclosingLevel
		dd offset loc_1001DF99	; ScopeRecord.FilterFunc
		dd offset loc_1001DFAC	; ScopeRecord.HandlerFunc
		align 10h
stru_100208F0	dd 0FFFFFFFEh		; GSCookieOffset ; DATA	XREF: sub_1001E03D+2o
		dd 0			; GSCookieXOROffset ; SEH scope	table for function 1001E03D
		dd 0FFFFFFCCh		; EHCookieOffset
		dd 0			; EHCookieXOROffset
		dd 0FFFFFFFEh		; ScopeRecord.EnclosingLevel
		dd 0			; ScopeRecord.FilterFunc
		dd offset loc_1001E0DA	; ScopeRecord.HandlerFunc
		align 10h
;
; Export directory for NSLDAP32V60.dll
;
		dd 0			; Characteristics
		dd 56F29A72h		; TimeDateStamp: Wed Mar 23 13:30:26 2016
		dw 0			; MajorVersion
		dw 0			; MinorVersion
		dd rva aNsldap32v60_dl	; Name
		dd 0Ah			; Base
		dd 3E5h			; NumberOfFunctions
		dd 108h			; NumberOfNames
		dd rva off_10020938	; AddressOfFunctions
		dd rva off_100218CC	; AddressOfNames
		dd rva word_10021CEC	; AddressOfNameOrdinals
;
; Export Address Table for NSLDAP32V60.dll
;
off_10020938	dd rva ldap_abandon, rva ldap_add, 0, rva ldap_unbind
					; DATA XREF: .rdata:1002092Co
		dd 5 dup(0), rva ldap_compare, rva ldap_delete,	rva ldap_result2error
		dd rva ldap_err2string,	rva ldap_modify, rva ldap_modrdn
		dd rva ldap_open, rva ldap_first_entry,	rva ldap_next_entry
		dd 2 dup(0), rva ldap_get_dn, rva ldap_dn2ufn, rva ldap_first_attribute
		dd rva ldap_next_attribute, rva	ldap_get_values, rva ldap_get_values_len
		dd rva ldap_count_entries, rva ldap_count_values, rva ldap_value_free
		dd rva ldap_explode_dn,	rva ldap_result, rva ldap_msgfree
		dd 0, rva ldap_search, rva ldap_add_s, rva ldap_bind_s
		dd rva ldap_unbind, rva	ldap_delete_s, rva ldap_modify_s
		dd rva ldap_modrdn_s, rva ldap_search_s, rva ldap_search_st
		dd rva ldap_compare_s, rva ldap_ufn_search_c, rva ldap_ufn_search_s
		dd rva ldap_init_getfilter, rva	ldap_getfilter_free, rva ldap_getfirstfilter
		dd rva ldap_getnextfilter, rva ldap_simple_bind, rva ldap_simple_bind_s
		dd rva ldap_bind, rva ldap_friendly_name, rva ldap_free_friendlymap
		dd rva ldap_ufn_search_ct, 2 dup(0), rva ldap_modrdn2
		dd rva ldap_modrdn2_s, rva ldap_ufn_setfilter, rva ldap_ufn_setprefix
		dd rva ldap_ufn_timeout, rva ldap_init_getfilter_buf, rva ldap_setfilteraffixes
		dd rva ldap_sort_entries, rva ldap_sort_values,	rva ldap_sort_strcasecmp
		dd rva ldap_count_values, rva ldap_name2template, rva ldap_value_free_len
		dd 5 dup(0), rva ldap_init, rva	ldap_is_dns_dn,	rva ldap_explode_dns
		dd rva ldap_mods_free, rva ldap_is_ldap_url, rva ldap_free_urldesc
		dd rva ldap_url_parse, rva ldap_url_search, rva	ldap_url_search_s
		dd rva ldap_url_search_st, rva ldap_set_rebind_proc, 4 dup(0)
		dd rva ber_skip_tag, rva ber_peek_tag, rva ber_get_int
		dd rva ber_get_stringb,	rva ber_get_stringa, rva ber_get_stringal
		dd rva ber_get_bitstringa, rva ber_get_null, rva ber_get_int
		dd rva ber_first_element, rva ber_next_element,	rva ber_scanf
		dd rva ber_bvfree, rva ber_bvecfree, rva ber_put_int, rva ber_put_ostring
		dd rva ber_put_string, rva ber_put_bitstring, rva ber_put_null
		dd rva ber_put_boolean,	rva ber_start_seq, rva ber_start_set
		dd 2 dup(rva ber_put_set), rva ber_printf, rva ber_read
		dd rva ber_write, rva ber_free,	rva ber_flush, rva ber_alloc
		dd rva ber_dup,	rva ber_get_next, rva ber_get_tag, rva ber_put_enum
		dd rva der_alloc, rva ber_alloc_t, rva ber_bvdup, rva ber_init_w_nullchar
		dd rva ber_reset, rva ber_get_option, rva ber_set_option
		dd rva ber_sockbuf_alloc, rva ber_sockbuf_get_option, rva ber_sockbuf_set_option
		dd rva ber_init, rva ber_flatten, rva ber_special_alloc
		dd rva ber_special_free, rva ber_get_next_buffer, rva ber_err_print
		dd rva ber_sockbuf_free, rva ber_get_next_buffer_ext, rva ber_svecfree
		dd rva ber_get_buf_datalen, rva	ber_get_buf_databegin
		dd rva ber_stack_init, rva ber_sockbuf_free_data, 2Bh dup(0)
		dd rva ldap_memfree, rva ldap_ber_free,	62h dup(0), rva	ldap_init_searchprefs
		dd rva ldap_init_searchprefs_buf, rva ldap_free_searchprefs
		dd rva ldap_first_searchobj, rva ldap_next_searchobj, rva ldap_build_filter
		dd 5Eh dup(0), rva ldap_init_templates,	rva ldap_init_templates_buf
		dd rva ldap_free_templates, rva	ldap_first_searchobj, rva ldap_next_disptmpl
		dd rva ldap_oc2template, rva ldap_tmplattrs, rva ldap_first_tmplrow
		dd rva ldap_next_tmplrow, rva ldap_first_tmplcol, rva ldap_next_tmplcol
		dd rva ldap_entry2text_search, rva ldap_entry2text, rva	ldap_vals2text
		dd rva ldap_entry2html,	rva ldap_entry2html_search, rva	ldap_vals2html
		dd rva ldap_tmplerr2string, rva	ldap_set_option, rva ldap_get_option
		dd rva ldap_charray_merge, 9 dup(0), rva ldap_get_lderrno
		dd rva ldap_set_lderrno, rva ldap_perror, rva ldap_set_filter_additions
		dd rva ldap_create_filter, 5 dup(0), rva ldap_version
		dd rva ldap_multisort_entries, rva ldap_msgid, rva ldap_explode_rdn
		dd rva ldap_msgtype, rva ldap_cache_flush, rva ldap_str2charray
		dd rva ldap_charray_add, rva ldap_charray_dup, rva ldap_charray_free
		dd 14h dup(0), rva ldap_charray_inlist,	rva ldap_charray_position
		dd rva ldap_rename, rva	ldap_rename_s, rva ldap_utf8len
		dd rva ldap_utf8next, rva ldap_utf8prev, rva ldap_utf8copy
		dd rva ldap_utf8characters, rva	ldap_utf8strtok_r, rva ldap_utf8isalnum
		dd rva ldap_utf8isalpha, rva ldap_utf8isdigit, rva ldap_utf8isxdigit
		dd rva ldap_utf8isspace, rva ldap_control_free,	rva ldap_controls_free
		dd rva ldap_sasl_bind, rva ldap_sasl_bind_s, rva ldap_parse_sasl_bind_result
		dd rva ldap_sasl_interactive_bind_s, rva ldap_sasl_interactive_bind_ext_s
		dd rva ldap_create_sort_control, rva ldap_parse_sort_control
		dd 0, rva ldap_get_lang_values,	rva ldap_get_lang_values_len
		dd rva ldap_free_sort_keylist, rva ldap_create_sort_keylist
		dd rva ldap_utf8getcc, rva ldap_get_entry_controls, rva	ldap_create_persistentsearch_control
		dd rva ldap_parse_entrychange_control, rva ldap_parse_result
		dd rva ldap_parse_extended_result, rva ldap_parse_reference
		dd rva ldap_abandon_ext, rva ldap_add_ext, rva ldap_add_ext_s
		dd rva ldap_modify_ext,	rva ldap_modify_ext_s, rva ldap_first_message
		dd rva ldap_next_message, rva ldap_compare_ext,	rva ldap_compare_ext_s
		dd rva ldap_delete_ext,	rva ldap_delete_ext_s, rva ldap_search_ext
		dd rva ldap_search_ext_s, rva ldap_extended_operation
		dd rva ldap_extended_operation_s, rva ldap_first_reference
		dd rva ldap_next_reference, rva	ldap_count_references
		dd rva ldap_count_messages, rva	ldap_create_virtuallist_control
		dd rva ldap_parse_virtuallist_control, rva ldap_create_proxyauth_control
		dd rva ldap_unbind_ext,	rva ldap_x_hostlist_first, rva ldap_x_hostlist_next
		dd rva ldap_x_hostlist_statusfree, rva ldap_x_malloc, rva ldap_x_calloc
		dd rva ldap_x_realloc, rva ldap_x_free,	rva ldap_create_proxiedauth_control
		dd rva ldap_create_geteffectiveRights_control, rva ldap_find_control
		dd rva ldap_url_parse_no_defaults, 0Ah dup(0), rva ldap_create_userstatus_control
		dd rva ldap_parse_userstatus_control, 8	dup(0),	rva ldap_create_passwordpolicy_control
		dd rva ldap_create_passwordpolicy_control_ext, rva ldap_parse_passwordpolicy_control
		dd rva ldap_parse_passwordpolicy_control_ext, rva ldap_passwordpolicy_err2txt
		dd 5 dup(0), rva ldap_passwd, rva ldap_parse_passwd, 0
		dd rva ldap_passwd_s, 6	dup(0),	rva ldap_delete_result_entry
		dd rva ldap_add_result_entry, 8	dup(0),	rva ldap_whoami
		dd rva ldap_parse_whoami, rva ldap_whoami_s, 7 dup(0)
		dd rva ldap_create_authzid_control, rva	ldap_parse_authzid_control
		dd 18Eh	dup(0),	rva ldap_memcache_init,	rva ldap_memcache_set
		dd rva ldap_memcache_get, rva ldap_memcache_flush, rva ldap_memcache_destroy
		dd rva ldap_memcache_update, rva ldap_keysort_entries
;
; Export Names Table for NSLDAP32V60.dll
;
off_100218CC	dd rva aBer_alloc, rva aBer_alloc_t, rva aBer_bvdup, rva aBer_bvecfree
					; DATA XREF: .rdata:10020930o
		dd rva aBer_bvfree, rva	aBer_dup, rva aBer_err_print, rva aBer_first_elem ; "ber_alloc"
		dd rva aBer_flatten, rva aBer_flush, rva aBer_free, rva	aBer_get_bitstr
		dd rva aBer_get_boolea,	rva aBer_get_buf_da, rva aBer_get_buf__0
		dd rva aBer_get_int, rva aBer_get_next,	rva aBer_get_next_b
		dd rva aBer_get_next_0,	rva aBer_get_null, rva aBer_get_option
		dd rva aBer_get_string,	rva aBer_get_stri_0, rva aBer_get_stri_1
		dd rva aBer_get_tag, rva aBer_init, rva	aBer_init_w_nul
		dd rva aBer_next_eleme,	rva aBer_peek_tag, rva aBer_printf
		dd rva aBer_put_bitstr,	rva aBer_put_boolea, rva aBer_put_enum
		dd rva aBer_put_int, rva aBer_put_null,	rva aBer_put_ostrin
		dd rva aBer_put_seq, rva aBer_put_set, rva aBer_put_string
		dd rva aBer_read, rva aBer_reset, rva aBer_scanf, rva aBer_set_option
		dd rva aBer_skip_tag, rva aBer_sockbuf_al, rva aBer_sockbuf_fr
		dd rva aBer_sockbuf__0,	rva aBer_sockbuf_ge, rva aBer_sockbuf_se
		dd rva aBer_special_al,	rva aBer_special_fr, rva aBer_stack_init
		dd rva aBer_start_seq, rva aBer_start_set, rva aBer_svecfree
		dd rva aBer_write, rva aDer_alloc, rva aLdap_abandon, rva aLdap_abandon_e
		dd rva aLdap_add, rva aLdap_add_ext, rva aLdap_add_ext_s
		dd rva aLdap_add_resul,	rva aLdap_add_s, rva aLdap_ber_free
		dd rva aLdap_bind, rva aLdap_bind_s, rva aLdap_build_fil
		dd rva aLdap_cache_flu,	rva aLdap_charray_a, rva aLdap_charray_d
		dd rva aLdap_charray_f,	rva aLdap_charray_i, rva aLdap_charray_m
		dd rva aLdap_charray_p,	rva aLdap_compare, rva aLdap_compare_e
		dd rva aLdap_compare_0,	rva aLdap_compare_s, rva aLdap_control_f
		dd rva aLdap_controls_,	rva aLdap_count_ent, rva aLdap_count_mes
		dd rva aLdap_count_ref,	rva aLdap_count_val, rva aLdap_count_v_0
		dd rva aLdap_create_au,	rva aLdap_create_fi, rva aLdap_create_ge
		dd rva aLdap_create_pa,	rva aLdap_create__0, rva aLdap_create_pe
		dd rva aLdap_create_pr,	rva aLdap_create__1, rva aLdap_create_so
		dd rva aLdap_create__2,	rva aLdap_create_us, rva aLdap_create_vi
		dd rva aLdap_delete, rva aLdap_delete_ex, rva aLdap_delete__0
		dd rva aLdap_delete_re,	rva aLdap_delete_s, rva	aLdap_dn2ufn
		dd rva aLdap_entry2htm,	rva aLdap_entry2h_0, rva aLdap_entry2tex
		dd rva aLdap_entry2t_0,	rva aLdap_err2strin, rva aLdap_explode_d
		dd rva aLdap_explode_0,	rva aLdap_explode_r, rva aLdap_extended_
		dd rva aLdap_extende_0,	rva aLdap_find_cont, rva aLdap_first_att
		dd rva aLdap_first_dis,	rva aLdap_first_ent, rva aLdap_first_mes
		dd rva aLdap_first_ref,	rva aLdap_first_sea, rva aLdap_first_tmp
		dd rva aLdap_first_t_0,	rva aLdap_free_frie, rva aLdap_free_sear
		dd rva aLdap_free_sort,	rva aLdap_free_temp, rva aLdap_free_urld
		dd rva aLdap_friendly_,	rva aLdap_get_dn, rva aLdap_get_entry
		dd rva aLdap_get_lang_,	rva aLdap_get_lan_0, rva aLdap_get_lderr
		dd rva aLdap_get_optio,	rva aLdap_get_value, rva aLdap_get_val_0
		dd rva aLdap_getfilter,	rva aLdap_getfirstf, rva aLdap_getnextfi
		dd rva aLdap_init, rva aLdap_init_getf,	rva aLdap_init_ge_0
		dd rva aLdap_init_sear,	rva aLdap_init_se_0, rva aLdap_init_temp
		dd rva aLdap_init_te_0,	rva aLdap_is_dns_dn, rva aLdap_is_ldap_u
		dd rva aLdap_keysort_e,	rva aLdap_memcache_, rva aLdap_memcach_0
		dd rva aLdap_memcach_1,	rva aLdap_memcach_2, rva aLdap_memcach_3
		dd rva aLdap_memcach_4,	rva aLdap_memfree, rva aLdap_modify
		dd rva aLdap_modify_ex,	rva aLdap_modify__0, rva aLdap_modify_s
		dd rva aLdap_modrdn, rva aLdap_modrdn2,	rva aLdap_modrdn2_s
		dd rva aLdap_modrdn_s, rva aLdap_mods_free, rva	aLdap_msgfree
		dd rva aLdap_msgid, rva	aLdap_msgtype, rva aLdap_multisort
		dd rva aLdap_name2temp,	rva aLdap_next_attr, rva aLdap_next_disp
		dd rva aLdap_next_entr,	rva aLdap_next_mess, rva aLdap_next_refe
		dd rva aLdap_next_sear,	rva aLdap_next_tmpl, rva aLdap_next_tm_0
		dd rva aLdap_oc2templa,	rva aLdap_open,	rva aLdap_parse_aut
		dd rva aLdap_parse_ent,	rva aLdap_parse_ext, rva aLdap_parse_pas
		dd rva aLdap_parse_p_0,	rva aLdap_parse_p_1, rva aLdap_parse_ref
		dd rva aLdap_parse_res,	rva aLdap_parse_sas, rva aLdap_parse_sor
		dd rva aLdap_parse_use,	rva aLdap_parse_vir, rva aLdap_parse_who
		dd rva aLdap_passwd, rva aLdap_passwd_s, rva aLdap_passwordp
		dd rva aLdap_perror, rva aLdap_rename, rva aLdap_rename_s
		dd rva aLdap_result, rva aLdap_result2er, rva aLdap_sasl_bind
		dd rva aLdap_sasl_bi_0,	rva aLdap_sasl_inte, rva aLdap_sasl_in_0
		dd rva aLdap_search, rva aLdap_search_ex, rva aLdap_search__0
		dd rva aLdap_search_s, rva aLdap_search_st, rva	aLdap_set_filte
		dd rva aLdap_set_lderr,	rva aLdap_set_optio, rva aLdap_set_rebin
		dd rva aLdap_setfilter,	rva aLdap_simple_bi, rva aLdap_simple__0
		dd rva aLdap_sort_entr,	rva aLdap_sort_strc, rva aLdap_sort_valu
		dd rva aLdap_str2charr,	rva aLdap_tmplattrs, rva aLdap_tmplerr2s
		dd rva aLdap_ufn_searc,	rva aLdap_ufn_sea_0, rva aLdap_ufn_sea_1
		dd rva aLdap_ufn_setfi,	rva aLdap_ufn_setpr, rva aLdap_ufn_timeo
		dd rva aLdap_unbind, rva aLdap_unbind_ex, rva aLdap_unbind_s
		dd rva aLdap_url_parse,	rva aLdap_url_par_0, rva aLdap_url_searc
		dd rva aLdap_url_sea_0,	rva aLdap_url_sea_1, rva aLdap_utf8chara
		dd rva aLdap_utf8copy, rva aLdap_utf8getcc, rva	aLdap_utf8isaln
		dd rva aLdap_utf8isalp,	rva aLdap_utf8isdig, rva aLdap_utf8isspa
		dd rva aLdap_utf8isxdi,	rva aLdap_utf8len, rva aLdap_utf8next
		dd rva aLdap_utf8prev, rva aLdap_utf8strto, rva	aLdap_vals2html
		dd rva aLdap_vals2text,	rva aLdap_value_fre, rva aLdap_value_f_0
		dd rva aLdap_version, rva aLdap_whoami,	rva aLdap_whoami_s
		dd rva aLdap_x_calloc, rva aLdap_x_free, rva aLdap_x_hostlis
		dd rva aLdap_x_hostl_0,	rva aLdap_x_hostl_1, rva aLdap_x_malloc
		dd rva aLdap_x_realloc
;
; Export Ordinals Table	for NSLDAP32V60.dll
;
word_10021CEC	dw 77h,	7Dh, 7Eh, 67h, 66h, 78h, 8Bh, 63h, 87h,	76h, 75h
					; DATA XREF: .rdata:10020934o
		dw 60h,	62h, 90h, 8Fh, 5Ch, 79h, 8Ah, 8Dh, 61h,	81h, 5Eh
		dw 5Fh,	5Dh, 7Ah, 86h, 7Fh, 64h, 5Bh, 72h, 6Bh,	6Dh, 7Bh
		dw 68h,	6Ch, 69h, 70h, 71h, 6Ah, 73h, 80h, 65h,	82h, 5Ah
		dw 83h,	8Ch, 92h, 84h, 85h, 88h, 89h, 91h, 6Eh,	6Fh, 8Eh
		dw 74h,	7Ch, 0,	1F0h, 1, 1F1h, 1F2h, 23Bh, 22h,	0BFh, 33h
		dw 23h,	127h, 1B3h, 1B5h, 1B6h,	1B7h, 1CCh, 19Ah, 1CDh
		dw 9, 1F7h, 1F8h, 2Ah, 1DBh, 1DCh, 1Ah,	202h, 201h, 1Bh
		dw 43h,	24Eh, 1A8h, 20Fh, 226h,	227h, 1EBh, 20Eh, 205h
		dw 1E2h, 1E8h, 21Ch, 203h, 0Ah,	1F9h, 1FAh, 23Ah, 25h
		dw 15h,	194h, 195h, 192h, 191h,	0Ch, 1Dh, 4Dh, 1B1h, 1FDh
		dw 1FEh, 210h, 16h, 189h, 10h, 1F5h, 1FFh, 125h, 18Fh
		dw 18Dh, 35h, 124h, 1E7h, 188h,	50h, 34h, 14h, 1EAh, 1E5h
		dw 1E6h, 1A4h, 199h, 18h, 19h, 2Eh, 2Fh, 30h, 4Bh, 2Dh
		dw 3Eh,	122h, 123h, 186h, 187h,	4Ch, 4Fh, 3E4h,	3E2h, 3E1h
		dw 3E0h, 3DEh, 3DFh, 3E3h, 0BEh, 0Dh, 1F3h, 1F4h, 26h
		dw 0Eh,	39h, 3Ah, 27h, 4Eh, 1Fh, 1B0h, 1B2h, 1AFh, 44h
		dw 17h,	18Ah, 11h, 1F6h, 200h, 126h, 190h, 18Eh, 18Bh
		dw 0Fh,	24Fh, 1ECh, 1EEh, 231h,	228h, 229h, 1EFh, 1EDh
		dw 1DFh, 1E3h, 21Dh, 204h, 245h, 230h, 233h, 22Ah, 1A6h
		dw 1CEh, 1CFh, 1Eh, 0Bh, 1DDh, 1DEh, 1E1h, 1E0h, 21h, 1FBh
		dw 1FCh, 28h, 29h, 1A7h, 1A5h, 198h, 55h, 3Fh, 31h, 32h
		dw 40h,	42h, 41h, 1B4h,	18Ch, 197h, 2Bh, 36h, 2Ch, 3Bh
		dw 3Ch,	3Dh, 3,	206h, 24h, 51h,	211h, 52h, 53h,	54h, 1D4h
		dw 1D3h, 1E9h, 1D6h, 1D7h, 1D8h, 1DAh, 1D9h, 1D0h, 1D1h
		dw 1D2h, 1D5h, 196h, 193h, 1Ch,	45h, 1AEh, 244h, 246h
		dw 20Bh, 20Dh, 207h, 208h, 209h, 20Ah, 20Ch
aNsldap32v60_dl	db 'NSLDAP32V60.dll',0  ; DATA XREF: .rdata:1002091Co
aBer_alloc	db 'ber_alloc',0        ; DATA XREF: .rdata:off_100218CCo
aBer_alloc_t	db 'ber_alloc_t',0      ; DATA XREF: .rdata:off_100218CCo
aBer_bvdup	db 'ber_bvdup',0        ; DATA XREF: .rdata:off_100218CCo
aBer_bvecfree	db 'ber_bvecfree',0     ; DATA XREF: .rdata:off_100218CCo
aBer_bvfree	db 'ber_bvfree',0       ; DATA XREF: .rdata:off_100218CCo
aBer_dup	db 'ber_dup',0          ; DATA XREF: .rdata:off_100218CCo
aBer_err_print	db 'ber_err_print',0    ; DATA XREF: .rdata:off_100218CCo
aBer_first_elem	db 'ber_first_element',0 ; DATA XREF: .rdata:off_100218CCo
aBer_flatten	db 'ber_flatten',0      ; DATA XREF: .rdata:off_100218CCo
aBer_flush	db 'ber_flush',0        ; DATA XREF: .rdata:off_100218CCo
aBer_free	db 'ber_free',0         ; DATA XREF: .rdata:off_100218CCo
aBer_get_bitstr	db 'ber_get_bitstringa',0 ; DATA XREF: .rdata:off_100218CCo
aBer_get_boolea	db 'ber_get_boolean',0  ; DATA XREF: .rdata:off_100218CCo
aBer_get_buf_da	db 'ber_get_buf_databegin',0 ; DATA XREF: .rdata:off_100218CCo
aBer_get_buf__0	db 'ber_get_buf_datalen',0 ; DATA XREF: .rdata:off_100218CCo
aBer_get_int	db 'ber_get_int',0      ; DATA XREF: .rdata:off_100218CCo
aBer_get_next	db 'ber_get_next',0     ; DATA XREF: .rdata:off_100218CCo
aBer_get_next_b	db 'ber_get_next_buffer',0 ; DATA XREF: .rdata:off_100218CCo
aBer_get_next_0	db 'ber_get_next_buffer_ext',0 ; DATA XREF: .rdata:off_100218CCo
aBer_get_null	db 'ber_get_null',0     ; DATA XREF: .rdata:off_100218CCo
aBer_get_option	db 'ber_get_option',0   ; DATA XREF: .rdata:off_100218CCo
aBer_get_string	db 'ber_get_stringa',0  ; DATA XREF: .rdata:off_100218CCo
aBer_get_stri_0	db 'ber_get_stringal',0 ; DATA XREF: .rdata:off_100218CCo
aBer_get_stri_1	db 'ber_get_stringb',0  ; DATA XREF: .rdata:off_100218CCo
aBer_get_tag	db 'ber_get_tag',0      ; DATA XREF: .rdata:off_100218CCo
aBer_init	db 'ber_init',0         ; DATA XREF: .rdata:off_100218CCo
aBer_init_w_nul	db 'ber_init_w_nullchar',0 ; DATA XREF: .rdata:off_100218CCo
aBer_next_eleme	db 'ber_next_element',0 ; DATA XREF: .rdata:off_100218CCo
aBer_peek_tag	db 'ber_peek_tag',0     ; DATA XREF: .rdata:off_100218CCo
aBer_printf	db 'ber_printf',0       ; DATA XREF: .rdata:off_100218CCo
aBer_put_bitstr	db 'ber_put_bitstring',0 ; DATA XREF: .rdata:off_100218CCo
aBer_put_boolea	db 'ber_put_boolean',0  ; DATA XREF: .rdata:off_100218CCo
aBer_put_enum	db 'ber_put_enum',0     ; DATA XREF: .rdata:off_100218CCo
aBer_put_int	db 'ber_put_int',0      ; DATA XREF: .rdata:off_100218CCo
aBer_put_null	db 'ber_put_null',0     ; DATA XREF: .rdata:off_100218CCo
aBer_put_ostrin	db 'ber_put_ostring',0  ; DATA XREF: .rdata:off_100218CCo
aBer_put_seq	db 'ber_put_seq',0      ; DATA XREF: .rdata:off_100218CCo
aBer_put_set	db 'ber_put_set',0      ; DATA XREF: .rdata:off_100218CCo
aBer_put_string	db 'ber_put_string',0   ; DATA XREF: .rdata:off_100218CCo
aBer_read	db 'ber_read',0         ; DATA XREF: .rdata:off_100218CCo
aBer_reset	db 'ber_reset',0        ; DATA XREF: .rdata:off_100218CCo
aBer_scanf	db 'ber_scanf',0        ; DATA XREF: .rdata:off_100218CCo
aBer_set_option	db 'ber_set_option',0   ; DATA XREF: .rdata:off_100218CCo
aBer_skip_tag	db 'ber_skip_tag',0     ; DATA XREF: .rdata:off_100218CCo
aBer_sockbuf_al	db 'ber_sockbuf_alloc',0 ; DATA XREF: .rdata:off_100218CCo
aBer_sockbuf_fr	db 'ber_sockbuf_free',0 ; DATA XREF: .rdata:off_100218CCo
aBer_sockbuf__0	db 'ber_sockbuf_free_data',0 ; DATA XREF: .rdata:off_100218CCo
aBer_sockbuf_ge	db 'ber_sockbuf_get_option',0 ; DATA XREF: .rdata:off_100218CCo
aBer_sockbuf_se	db 'ber_sockbuf_set_option',0 ; DATA XREF: .rdata:off_100218CCo
aBer_special_al	db 'ber_special_alloc',0 ; DATA XREF: .rdata:off_100218CCo
aBer_special_fr	db 'ber_special_free',0 ; DATA XREF: .rdata:off_100218CCo
aBer_stack_init	db 'ber_stack_init',0   ; DATA XREF: .rdata:off_100218CCo
aBer_start_seq	db 'ber_start_seq',0    ; DATA XREF: .rdata:off_100218CCo
aBer_start_set	db 'ber_start_set',0    ; DATA XREF: .rdata:off_100218CCo
aBer_svecfree	db 'ber_svecfree',0     ; DATA XREF: .rdata:off_100218CCo
aBer_write	db 'ber_write',0        ; DATA XREF: .rdata:off_100218CCo
aDer_alloc	db 'der_alloc',0        ; DATA XREF: .rdata:off_100218CCo
aLdap_abandon	db 'ldap_abandon',0     ; DATA XREF: .rdata:off_100218CCo
aLdap_abandon_e	db 'ldap_abandon_ext',0 ; DATA XREF: .rdata:off_100218CCo
aLdap_add	db 'ldap_add',0         ; DATA XREF: .rdata:off_100218CCo
aLdap_add_ext	db 'ldap_add_ext',0     ; DATA XREF: .rdata:off_100218CCo
aLdap_add_ext_s	db 'ldap_add_ext_s',0   ; DATA XREF: .rdata:off_100218CCo
aLdap_add_resul	db 'ldap_add_result_entry',0 ; DATA XREF: .rdata:off_100218CCo
aLdap_add_s	db 'ldap_add_s',0       ; DATA XREF: .rdata:off_100218CCo
aLdap_ber_free	db 'ldap_ber_free',0    ; DATA XREF: .rdata:off_100218CCo
aLdap_bind	db 'ldap_bind',0        ; DATA XREF: .rdata:off_100218CCo
aLdap_bind_s	db 'ldap_bind_s',0      ; DATA XREF: .rdata:off_100218CCo
aLdap_build_fil	db 'ldap_build_filter',0 ; DATA XREF: .rdata:off_100218CCo
aLdap_cache_flu	db 'ldap_cache_flush',0 ; DATA XREF: .rdata:off_100218CCo
aLdap_charray_a	db 'ldap_charray_add',0 ; DATA XREF: .rdata:off_100218CCo
aLdap_charray_d	db 'ldap_charray_dup',0 ; DATA XREF: .rdata:off_100218CCo
aLdap_charray_f	db 'ldap_charray_free',0 ; DATA XREF: .rdata:off_100218CCo
aLdap_charray_i	db 'ldap_charray_inlist',0 ; DATA XREF: .rdata:off_100218CCo
aLdap_charray_m	db 'ldap_charray_merge',0 ; DATA XREF: .rdata:off_100218CCo
aLdap_charray_p	db 'ldap_charray_position',0 ; DATA XREF: .rdata:off_100218CCo
aLdap_compare	db 'ldap_compare',0     ; DATA XREF: .rdata:off_100218CCo
aLdap_compare_e	db 'ldap_compare_ext',0 ; DATA XREF: .rdata:off_100218CCo
aLdap_compare_0	db 'ldap_compare_ext_s',0 ; DATA XREF: .rdata:off_100218CCo
aLdap_compare_s	db 'ldap_compare_s',0   ; DATA XREF: .rdata:off_100218CCo
aLdap_control_f	db 'ldap_control_free',0 ; DATA XREF: .rdata:off_100218CCo
aLdap_controls_	db 'ldap_controls_free',0 ; DATA XREF: .rdata:off_100218CCo
aLdap_count_ent	db 'ldap_count_entries',0 ; DATA XREF: .rdata:off_100218CCo
aLdap_count_mes	db 'ldap_count_messages',0 ; DATA XREF: .rdata:off_100218CCo
aLdap_count_ref	db 'ldap_count_references',0 ; DATA XREF: .rdata:off_100218CCo
aLdap_count_val	db 'ldap_count_values',0 ; DATA XREF: .rdata:off_100218CCo
aLdap_count_v_0	db 'ldap_count_values_len',0 ; DATA XREF: .rdata:off_100218CCo
aLdap_create_au	db 'ldap_create_authzid_control',0 ; DATA XREF: .rdata:off_100218CCo
aLdap_create_fi	db 'ldap_create_filter',0 ; DATA XREF: .rdata:off_100218CCo
aLdap_create_ge	db 'ldap_create_geteffectiveRights_control',0
					; DATA XREF: .rdata:off_100218CCo
aLdap_create_pa	db 'ldap_create_passwordpolicy_control',0 ; DATA XREF: .rdata:off_100218CCo
aLdap_create__0	db 'ldap_create_passwordpolicy_control_ext',0
					; DATA XREF: .rdata:off_100218CCo
aLdap_create_pe	db 'ldap_create_persistentsearch_control',0
					; DATA XREF: .rdata:off_100218CCo
aLdap_create_pr	db 'ldap_create_proxiedauth_control',0 ; DATA XREF: .rdata:off_100218CCo
aLdap_create__1	db 'ldap_create_proxyauth_control',0 ; DATA XREF: .rdata:off_100218CCo
aLdap_create_so	db 'ldap_create_sort_control',0 ; DATA XREF: .rdata:off_100218CCo
aLdap_create__2	db 'ldap_create_sort_keylist',0 ; DATA XREF: .rdata:off_100218CCo
aLdap_create_us	db 'ldap_create_userstatus_control',0 ; DATA XREF: .rdata:off_100218CCo
aLdap_create_vi	db 'ldap_create_virtuallist_control',0 ; DATA XREF: .rdata:off_100218CCo
aLdap_delete	db 'ldap_delete',0      ; DATA XREF: .rdata:off_100218CCo
aLdap_delete_ex	db 'ldap_delete_ext',0  ; DATA XREF: .rdata:off_100218CCo
aLdap_delete__0	db 'ldap_delete_ext_s',0 ; DATA XREF: .rdata:off_100218CCo
aLdap_delete_re	db 'ldap_delete_result_entry',0 ; DATA XREF: .rdata:off_100218CCo
aLdap_delete_s	db 'ldap_delete_s',0    ; DATA XREF: .rdata:off_100218CCo
aLdap_dn2ufn	db 'ldap_dn2ufn',0      ; DATA XREF: .rdata:off_100218CCo
aLdap_entry2htm	db 'ldap_entry2html',0  ; DATA XREF: .rdata:off_100218CCo
aLdap_entry2h_0	db 'ldap_entry2html_search',0 ; DATA XREF: .rdata:off_100218CCo
aLdap_entry2tex	db 'ldap_entry2text',0  ; DATA XREF: .rdata:off_100218CCo
aLdap_entry2t_0	db 'ldap_entry2text_search',0 ; DATA XREF: .rdata:off_100218CCo
aLdap_err2strin	db 'ldap_err2string',0  ; DATA XREF: .rdata:off_100218CCo
aLdap_explode_d	db 'ldap_explode_dn',0  ; DATA XREF: .rdata:off_100218CCo
aLdap_explode_0	db 'ldap_explode_dns',0 ; DATA XREF: .rdata:off_100218CCo
aLdap_explode_r	db 'ldap_explode_rdn',0 ; DATA XREF: .rdata:off_100218CCo
aLdap_extended_	db 'ldap_extended_operation',0 ; DATA XREF: .rdata:off_100218CCo
aLdap_extende_0	db 'ldap_extended_operation_s',0 ; DATA XREF: .rdata:off_100218CCo
aLdap_find_cont	db 'ldap_find_control',0 ; DATA XREF: .rdata:off_100218CCo
aLdap_first_att	db 'ldap_first_attribute',0 ; DATA XREF: .rdata:off_100218CCo
aLdap_first_dis	db 'ldap_first_disptmpl',0 ; DATA XREF: .rdata:off_100218CCo
aLdap_first_ent	db 'ldap_first_entry',0 ; DATA XREF: .rdata:off_100218CCo
aLdap_first_mes	db 'ldap_first_message',0 ; DATA XREF: .rdata:off_100218CCo
aLdap_first_ref	db 'ldap_first_reference',0 ; DATA XREF: .rdata:off_100218CCo
aLdap_first_sea	db 'ldap_first_searchobj',0 ; DATA XREF: .rdata:off_100218CCo
aLdap_first_tmp	db 'ldap_first_tmplcol',0 ; DATA XREF: .rdata:off_100218CCo
aLdap_first_t_0	db 'ldap_first_tmplrow',0 ; DATA XREF: .rdata:off_100218CCo
aLdap_free_frie	db 'ldap_free_friendlymap',0 ; DATA XREF: .rdata:off_100218CCo
aLdap_free_sear	db 'ldap_free_searchprefs',0 ; DATA XREF: .rdata:off_100218CCo
aLdap_free_sort	db 'ldap_free_sort_keylist',0 ; DATA XREF: .rdata:off_100218CCo
aLdap_free_temp	db 'ldap_free_templates',0 ; DATA XREF: .rdata:off_100218CCo
aLdap_free_urld	db 'ldap_free_urldesc',0 ; DATA XREF: .rdata:off_100218CCo
aLdap_friendly_	db 'ldap_friendly_name',0 ; DATA XREF: .rdata:off_100218CCo
aLdap_get_dn	db 'ldap_get_dn',0      ; DATA XREF: .rdata:off_100218CCo
aLdap_get_entry	db 'ldap_get_entry_controls',0 ; DATA XREF: .rdata:off_100218CCo
aLdap_get_lang_	db 'ldap_get_lang_values',0 ; DATA XREF: .rdata:off_100218CCo
aLdap_get_lan_0	db 'ldap_get_lang_values_len',0 ; DATA XREF: .rdata:off_100218CCo
aLdap_get_lderr	db 'ldap_get_lderrno',0 ; DATA XREF: .rdata:off_100218CCo
aLdap_get_optio	db 'ldap_get_option',0  ; DATA XREF: .rdata:off_100218CCo
aLdap_get_value	db 'ldap_get_values',0  ; DATA XREF: .rdata:off_100218CCo
aLdap_get_val_0	db 'ldap_get_values_len',0 ; DATA XREF: .rdata:off_100218CCo
aLdap_getfilter	db 'ldap_getfilter_free',0 ; DATA XREF: .rdata:off_100218CCo
aLdap_getfirstf	db 'ldap_getfirstfilter',0 ; DATA XREF: .rdata:off_100218CCo
aLdap_getnextfi	db 'ldap_getnextfilter',0 ; DATA XREF: .rdata:off_100218CCo
aLdap_init	db 'ldap_init',0        ; DATA XREF: .rdata:off_100218CCo
aLdap_init_getf	db 'ldap_init_getfilter',0 ; DATA XREF: .rdata:off_100218CCo
aLdap_init_ge_0	db 'ldap_init_getfilter_buf',0 ; DATA XREF: .rdata:off_100218CCo
aLdap_init_sear	db 'ldap_init_searchprefs',0 ; DATA XREF: .rdata:off_100218CCo
aLdap_init_se_0	db 'ldap_init_searchprefs_buf',0 ; DATA XREF: .rdata:off_100218CCo
aLdap_init_temp	db 'ldap_init_templates',0 ; DATA XREF: .rdata:off_100218CCo
aLdap_init_te_0	db 'ldap_init_templates_buf',0 ; DATA XREF: .rdata:off_100218CCo
aLdap_is_dns_dn	db 'ldap_is_dns_dn',0   ; DATA XREF: .rdata:off_100218CCo
aLdap_is_ldap_u	db 'ldap_is_ldap_url',0 ; DATA XREF: .rdata:off_100218CCo
aLdap_keysort_e	db 'ldap_keysort_entries',0 ; DATA XREF: .rdata:off_100218CCo
aLdap_memcache_	db 'ldap_memcache_destroy',0 ; DATA XREF: .rdata:off_100218CCo
aLdap_memcach_0	db 'ldap_memcache_flush',0 ; DATA XREF: .rdata:off_100218CCo
aLdap_memcach_1	db 'ldap_memcache_get',0 ; DATA XREF: .rdata:off_100218CCo
aLdap_memcach_2	db 'ldap_memcache_init',0 ; DATA XREF: .rdata:off_100218CCo
aLdap_memcach_3	db 'ldap_memcache_set',0 ; DATA XREF: .rdata:off_100218CCo
aLdap_memcach_4	db 'ldap_memcache_update',0 ; DATA XREF: .rdata:off_100218CCo
aLdap_memfree	db 'ldap_memfree',0     ; DATA XREF: .rdata:off_100218CCo
aLdap_modify	db 'ldap_modify',0      ; DATA XREF: .rdata:off_100218CCo
aLdap_modify_ex	db 'ldap_modify_ext',0  ; DATA XREF: .rdata:off_100218CCo
aLdap_modify__0	db 'ldap_modify_ext_s',0 ; DATA XREF: .rdata:off_100218CCo
aLdap_modify_s	db 'ldap_modify_s',0    ; DATA XREF: .rdata:off_100218CCo
aLdap_modrdn2	db 'ldap_modrdn2',0     ; DATA XREF: .rdata:off_100218CCo
aLdap_modrdn2_s	db 'ldap_modrdn2_s',0   ; DATA XREF: .rdata:off_100218CCo
aLdap_modrdn	db 'ldap_modrdn',0      ; DATA XREF: .rdata:off_100218CCo
aLdap_modrdn_s	db 'ldap_modrdn_s',0    ; DATA XREF: .rdata:off_100218CCo
aLdap_mods_free	db 'ldap_mods_free',0   ; DATA XREF: .rdata:off_100218CCo
aLdap_msgfree	db 'ldap_msgfree',0     ; DATA XREF: .rdata:off_100218CCo
aLdap_msgid	db 'ldap_msgid',0       ; DATA XREF: .rdata:off_100218CCo
aLdap_msgtype	db 'ldap_msgtype',0     ; DATA XREF: .rdata:off_100218CCo
aLdap_multisort	db 'ldap_multisort_entries',0 ; DATA XREF: .rdata:off_100218CCo
aLdap_name2temp	db 'ldap_name2template',0 ; DATA XREF: .rdata:off_100218CCo
aLdap_next_attr	db 'ldap_next_attribute',0 ; DATA XREF: .rdata:off_100218CCo
aLdap_next_disp	db 'ldap_next_disptmpl',0 ; DATA XREF: .rdata:off_100218CCo
aLdap_next_entr	db 'ldap_next_entry',0  ; DATA XREF: .rdata:off_100218CCo
aLdap_next_mess	db 'ldap_next_message',0 ; DATA XREF: .rdata:off_100218CCo
aLdap_next_refe	db 'ldap_next_reference',0 ; DATA XREF: .rdata:off_100218CCo
aLdap_next_sear	db 'ldap_next_searchobj',0 ; DATA XREF: .rdata:off_100218CCo
aLdap_next_tmpl	db 'ldap_next_tmplcol',0 ; DATA XREF: .rdata:off_100218CCo
aLdap_next_tm_0	db 'ldap_next_tmplrow',0 ; DATA XREF: .rdata:off_100218CCo
aLdap_oc2templa	db 'ldap_oc2template',0 ; DATA XREF: .rdata:off_100218CCo
aLdap_open	db 'ldap_open',0        ; DATA XREF: .rdata:off_100218CCo
aLdap_parse_aut	db 'ldap_parse_authzid_control',0 ; DATA XREF: .rdata:off_100218CCo
aLdap_parse_ent	db 'ldap_parse_entrychange_control',0 ; DATA XREF: .rdata:off_100218CCo
aLdap_parse_ext	db 'ldap_parse_extended_result',0 ; DATA XREF: .rdata:off_100218CCo
aLdap_parse_pas	db 'ldap_parse_passwd',0 ; DATA XREF: .rdata:off_100218CCo
aLdap_parse_p_0	db 'ldap_parse_passwordpolicy_control',0 ; DATA XREF: .rdata:off_100218CCo
aLdap_parse_p_1	db 'ldap_parse_passwordpolicy_control_ext',0
					; DATA XREF: .rdata:off_100218CCo
aLdap_parse_ref	db 'ldap_parse_reference',0 ; DATA XREF: .rdata:off_100218CCo
aLdap_parse_res	db 'ldap_parse_result',0 ; DATA XREF: .rdata:off_100218CCo
aLdap_parse_sas	db 'ldap_parse_sasl_bind_result',0 ; DATA XREF: .rdata:off_100218CCo
aLdap_parse_sor	db 'ldap_parse_sort_control',0 ; DATA XREF: .rdata:off_100218CCo
aLdap_parse_use	db 'ldap_parse_userstatus_control',0 ; DATA XREF: .rdata:off_100218CCo
aLdap_parse_vir	db 'ldap_parse_virtuallist_control',0 ; DATA XREF: .rdata:off_100218CCo
aLdap_parse_who	db 'ldap_parse_whoami',0 ; DATA XREF: .rdata:off_100218CCo
aLdap_passwd	db 'ldap_passwd',0      ; DATA XREF: .rdata:off_100218CCo
aLdap_passwd_s	db 'ldap_passwd_s',0    ; DATA XREF: .rdata:off_100218CCo
aLdap_passwordp	db 'ldap_passwordpolicy_err2txt',0 ; DATA XREF: .rdata:off_100218CCo
aLdap_perror	db 'ldap_perror',0      ; DATA XREF: .rdata:off_100218CCo
aLdap_rename	db 'ldap_rename',0      ; DATA XREF: .rdata:off_100218CCo
aLdap_rename_s	db 'ldap_rename_s',0    ; DATA XREF: .rdata:off_100218CCo
aLdap_result2er	db 'ldap_result2error',0 ; DATA XREF: .rdata:off_100218CCo
aLdap_result	db 'ldap_result',0      ; DATA XREF: .rdata:off_100218CCo
aLdap_sasl_bind	db 'ldap_sasl_bind',0   ; DATA XREF: .rdata:off_100218CCo
aLdap_sasl_bi_0	db 'ldap_sasl_bind_s',0 ; DATA XREF: .rdata:off_100218CCo
aLdap_sasl_inte	db 'ldap_sasl_interactive_bind_ext_s',0 ; DATA XREF: .rdata:off_100218CCo
aLdap_sasl_in_0	db 'ldap_sasl_interactive_bind_s',0 ; DATA XREF: .rdata:off_100218CCo
aLdap_search	db 'ldap_search',0      ; DATA XREF: .rdata:off_100218CCo
aLdap_search_ex	db 'ldap_search_ext',0  ; DATA XREF: .rdata:off_100218CCo
aLdap_search__0	db 'ldap_search_ext_s',0 ; DATA XREF: .rdata:off_100218CCo
aLdap_search_s	db 'ldap_search_s',0    ; DATA XREF: .rdata:off_100218CCo
aLdap_search_st	db 'ldap_search_st',0   ; DATA XREF: .rdata:off_100218CCo
aLdap_set_filte	db 'ldap_set_filter_additions',0 ; DATA XREF: .rdata:off_100218CCo
aLdap_set_lderr	db 'ldap_set_lderrno',0 ; DATA XREF: .rdata:off_100218CCo
aLdap_set_optio	db 'ldap_set_option',0  ; DATA XREF: .rdata:off_100218CCo
aLdap_set_rebin	db 'ldap_set_rebind_proc',0 ; DATA XREF: .rdata:off_100218CCo
aLdap_setfilter	db 'ldap_setfilteraffixes',0 ; DATA XREF: .rdata:off_100218CCo
aLdap_simple_bi	db 'ldap_simple_bind',0 ; DATA XREF: .rdata:off_100218CCo
aLdap_simple__0	db 'ldap_simple_bind_s',0 ; DATA XREF: .rdata:off_100218CCo
aLdap_sort_entr	db 'ldap_sort_entries',0 ; DATA XREF: .rdata:off_100218CCo
aLdap_sort_strc	db 'ldap_sort_strcasecmp',0 ; DATA XREF: .rdata:off_100218CCo
aLdap_sort_valu	db 'ldap_sort_values',0 ; DATA XREF: .rdata:off_100218CCo
aLdap_str2charr	db 'ldap_str2charray',0 ; DATA XREF: .rdata:off_100218CCo
aLdap_tmplattrs	db 'ldap_tmplattrs',0   ; DATA XREF: .rdata:off_100218CCo
aLdap_tmplerr2s	db 'ldap_tmplerr2string',0 ; DATA XREF: .rdata:off_100218CCo
aLdap_ufn_searc	db 'ldap_ufn_search_c',0 ; DATA XREF: .rdata:off_100218CCo
aLdap_ufn_sea_0	db 'ldap_ufn_search_ct',0 ; DATA XREF: .rdata:off_100218CCo
aLdap_ufn_sea_1	db 'ldap_ufn_search_s',0 ; DATA XREF: .rdata:off_100218CCo
aLdap_ufn_setfi	db 'ldap_ufn_setfilter',0 ; DATA XREF: .rdata:off_100218CCo
aLdap_ufn_setpr	db 'ldap_ufn_setprefix',0 ; DATA XREF: .rdata:off_100218CCo
aLdap_ufn_timeo	db 'ldap_ufn_timeout',0 ; DATA XREF: .rdata:off_100218CCo
aLdap_unbind	db 'ldap_unbind',0      ; DATA XREF: .rdata:off_100218CCo
aLdap_unbind_ex	db 'ldap_unbind_ext',0  ; DATA XREF: .rdata:off_100218CCo
aLdap_unbind_s	db 'ldap_unbind_s',0    ; DATA XREF: .rdata:off_100218CCo
aLdap_url_parse	db 'ldap_url_parse',0   ; DATA XREF: .rdata:off_100218CCo
aLdap_url_par_0	db 'ldap_url_parse_no_defaults',0 ; DATA XREF: .rdata:off_100218CCo
aLdap_url_searc	db 'ldap_url_search',0  ; DATA XREF: .rdata:off_100218CCo
aLdap_url_sea_0	db 'ldap_url_search_s',0 ; DATA XREF: .rdata:off_100218CCo
aLdap_url_sea_1	db 'ldap_url_search_st',0 ; DATA XREF: .rdata:off_100218CCo
aLdap_utf8chara	db 'ldap_utf8characters',0 ; DATA XREF: .rdata:off_100218CCo
aLdap_utf8copy	db 'ldap_utf8copy',0    ; DATA XREF: .rdata:off_100218CCo
aLdap_utf8getcc	db 'ldap_utf8getcc',0   ; DATA XREF: .rdata:off_100218CCo
aLdap_utf8isaln	db 'ldap_utf8isalnum',0 ; DATA XREF: .rdata:off_100218CCo
aLdap_utf8isalp	db 'ldap_utf8isalpha',0 ; DATA XREF: .rdata:off_100218CCo
aLdap_utf8isdig	db 'ldap_utf8isdigit',0 ; DATA XREF: .rdata:off_100218CCo
aLdap_utf8isspa	db 'ldap_utf8isspace',0 ; DATA XREF: .rdata:off_100218CCo
aLdap_utf8isxdi	db 'ldap_utf8isxdigit',0 ; DATA XREF: .rdata:off_100218CCo
aLdap_utf8len	db 'ldap_utf8len',0     ; DATA XREF: .rdata:off_100218CCo
aLdap_utf8next	db 'ldap_utf8next',0    ; DATA XREF: .rdata:off_100218CCo
aLdap_utf8prev	db 'ldap_utf8prev',0    ; DATA XREF: .rdata:off_100218CCo
aLdap_utf8strto	db 'ldap_utf8strtok_r',0 ; DATA XREF: .rdata:off_100218CCo
aLdap_vals2html	db 'ldap_vals2html',0   ; DATA XREF: .rdata:off_100218CCo
aLdap_vals2text	db 'ldap_vals2text',0   ; DATA XREF: .rdata:off_100218CCo
aLdap_value_fre	db 'ldap_value_free',0  ; DATA XREF: .rdata:off_100218CCo
aLdap_value_f_0	db 'ldap_value_free_len',0 ; DATA XREF: .rdata:off_100218CCo
aLdap_version	db 'ldap_version',0     ; DATA XREF: .rdata:off_100218CCo
aLdap_whoami	db 'ldap_whoami',0      ; DATA XREF: .rdata:off_100218CCo
aLdap_whoami_s	db 'ldap_whoami_s',0    ; DATA XREF: .rdata:off_100218CCo
aLdap_x_calloc	db 'ldap_x_calloc',0    ; DATA XREF: .rdata:off_100218CCo
aLdap_x_free	db 'ldap_x_free',0      ; DATA XREF: .rdata:off_100218CCo
aLdap_x_hostlis	db 'ldap_x_hostlist_first',0 ; DATA XREF: .rdata:off_100218CCo
aLdap_x_hostl_0	db 'ldap_x_hostlist_next',0 ; DATA XREF: .rdata:off_100218CCo
aLdap_x_hostl_1	db 'ldap_x_hostlist_statusfree',0 ; DATA XREF: .rdata:off_100218CCo
aLdap_x_malloc	db 'ldap_x_malloc',0    ; DATA XREF: .rdata:off_100218CCo
aLdap_x_realloc	db 'ldap_x_realloc',0   ; DATA XREF: .rdata:off_100218CCo
		align 10h
__IMPORT_DESCRIPTOR_KERNEL32 dd	rva off_100231DC ; Import Name Table
		dd 0			; Time stamp
		dd 0			; Forwarder Chain
		dd rva aKernel32_dll	; DLL Name
		dd rva CloseHandle	; Import Address Table
__IMPORT_DESCRIPTOR_MSVCR120 dd	rva off_10023240 ; Import Name Table
		dd 0			; Time stamp
		dd 0			; Forwarder Chain
		dd rva aMsvcr120_dll	; DLL Name
		dd rva fread		; Import Address Table
		dd 5 dup(0)
;
; Import names for KERNEL32.dll
;
off_100231DC	dd rva word_10023324	; DATA XREF: .rdata:__IMPORT_DESCRIPTOR_KERNEL32o
		dd rva word_10023332
		dd rva word_10023342
		dd rva word_10023358
		dd rva word_10023368
		dd rva word_10023374
		dd rva word_10023382
		dd rva word_10023390
		dd rva word_100233A0
		dd rva word_100233B0
		dd rva word_100233CC
		dd rva word_100233E4
		dd rva word_100233FC
		dd rva word_10023404
		dd rva word_10023412
		dd rva word_10023424
		dd rva word_1002375A
		dd rva word_10023744
		dd rva word_1002372A
		dd rva word_1002371A
		dd rva word_1002370A
		dd rva word_100236EE
		dd rva word_100236DA
		dd rva word_10023770
		dd 0
;
; Import names for MSVCR120.dll
;
off_10023240	dd rva word_1002348E	; DATA XREF: .rdata:__IMPORT_DESCRIPTOR_MSVCR120o
		dd rva word_10023496
		dd rva word_1002349E
		dd rva word_100234A6
		dd rva word_100234B0
		dd rva word_100234B8
		dd rva word_100234C4
		dd rva word_100234D0
		dd rva word_100234DA
		dd rva word_100234E2
		dd rva word_100234EC
		dd rva word_100234F8
		dd rva word_10023502
		dd rva word_1002350C
		dd rva word_10023516
		dd rva word_10023486
		dd rva word_1002352E
		dd rva word_10023538
		dd rva word_10023540
		dd rva word_1002354A
		dd rva word_10023554
		dd rva word_1002355E
		dd rva word_10023568
		dd rva word_10023572
		dd rva word_1002357A
		dd rva word_10023586
		dd rva word_10023590
		dd rva word_1002359A
		dd rva word_100235A8
		dd rva word_100235B2
		dd rva word_100235C8
		dd rva word_100235D4
		dd rva word_100235EA
		dd rva word_10023604
		dd rva word_1002361C
		dd rva word_1002362E
		dd rva word_1002363C
		dd rva word_1002364A
		dd rva word_10023656
		dd rva word_10023664
		dd rva word_1002366C
		dd rva word_10023676
		dd rva word_10023684
		dd rva word_10023692
		dd rva word_1002369C
		dd rva word_100236C0
		dd rva word_1002347E
		dd rva word_10023474
		dd rva word_1002346A
		dd rva word_10023460
		dd rva word_10023456
		dd rva word_1002344C
		dd rva word_10023442
		dd rva word_10023524
		dd rva word_1002378A
		dd rva word_10023796
		dd 0
word_10023324	dw 7Fh			; DATA XREF: .rdata:off_100231DCo
		db 'CloseHandle',0
word_10023332	dw 48Bh			; DATA XREF: .rdata:100231E0o
		db 'ReleaseMutex',0
		align 2
word_10023342	dw 5A9h			; DATA XREF: .rdata:100231E4o
		db 'WaitForSingleObject',0
word_10023358	dw 0CEh			; DATA XREF: .rdata:100231E8o
		db 'CreateMutexA',0
		align 4
word_10023368	dw 571h			; DATA XREF: .rdata:100231ECo
		db 'TlsAlloc',0
		align 4
word_10023374	dw 573h			; DATA XREF: .rdata:100231F0o
		db 'TlsGetValue',0
word_10023382	dw 574h			; DATA XREF: .rdata:100231F4o
		db 'TlsSetValue',0
word_10023390	dw 250h			; DATA XREF: .rdata:100231F8o
		db 'GetLastError',0
		align 10h
word_100233A0	dw 50Ah			; DATA XREF: .rdata:100231FCo
		db 'SetLastError',0
		align 10h
word_100233B0	dw 347h			; DATA XREF: .rdata:10023200o
		db 'InitializeCriticalSection',0
word_100233CC	dw 125h			; DATA XREF: .rdata:10023204o
		db 'EnterCriticalSection',0
		align 4
word_100233E4	dw 3A2h			; DATA XREF: .rdata:10023208o
		db 'LeaveCriticalSection',0
		align 4
word_100233FC	dw 550h			; DATA XREF: .rdata:1002320Co
		db 'Sleep',0
word_10023404	dw 19Eh			; DATA XREF: .rdata:10023210o
		db 'FreeLibrary',0
word_10023412	dw 29Dh			; DATA XREF: .rdata:10023214o
		db 'GetProcAddress',0
		align 4
word_10023424	dw 3A5h			; DATA XREF: .rdata:10023218o
		db 'LoadLibraryA',0
		align 4
aKernel32_dll	db 'KERNEL32.dll',0     ; DATA XREF: .rdata:100231ACo
		align 2
word_10023442	dw 727h			; DATA XREF: .rdata:10023310o
		db 'sprintf',0
word_1002344C	dw 4E8h			; DATA XREF: .rdata:1002330Co
		db '_time64',0
word_10023456	dw 72Fh			; DATA XREF: .rdata:10023308o
		db 'strchr',0
		align 10h
word_10023460	dw 746h			; DATA XREF: .rdata:10023304o
		db 'strtok',0
		align 2
word_1002346A	dw 6E8h			; DATA XREF: .rdata:10023300o
		db 'memmove',0
word_10023474	dw 657h			; DATA XREF: .rdata:100232FCo
		db 'fclose',0
		align 2
word_1002347E	dw 660h			; DATA XREF: .rdata:100232F8o
		db 'feof',0
		align 2
word_10023486	dw 679h			; DATA XREF: .rdata:1002327Co
		db 'fopen',0
word_1002348E	dw 681h			; DATA XREF: .rdata:off_10023240o
		db 'fread',0
word_10023496	dw 689h			; DATA XREF: .rdata:10023244o
		db 'fseek',0
word_1002349E	dw 68Bh			; DATA XREF: .rdata:10023248o
		db 'ftell',0
word_100234A6	dw 740h			; DATA XREF: .rdata:1002324Co
		db 'strrchr',0
word_100234B0	dw 5EFh			; DATA XREF: .rdata:10023250o
		db 'atoi',0
		align 4
word_100234B8	dw 481h			; DATA XREF: .rdata:10023254o
		db '_snprintf',0
word_100234C4	dw 735h			; DATA XREF: .rdata:10023258o
		db 'strerror',0
		align 10h
word_100234D0	dw 276h			; DATA XREF: .rdata:1002325Co
		db '_errno',0
		align 2
word_100234DA	dw 66Bh			; DATA XREF: .rdata:10023260o
		db 'fgets',0
word_100234E2	dw 712h			; DATA XREF: .rdata:10023264o
		db 'rewind',0
		align 4
word_100234EC	dw 4BCh			; DATA XREF: .rdata:10023268o
		db '_strnicmp',0
word_100234F8	dw 75Dh			; DATA XREF: .rdata:1002326Co
		db 'toupper',0
word_10023502	dw 6E6h			; DATA XREF: .rdata:10023270o
		db 'memcpy',0
		align 4
word_1002350C	dw 6EAh			; DATA XREF: .rdata:10023274o
		db 'memset',0
		align 2
word_10023516	dw 267h			; DATA XREF: .rdata:10023278o
		db '_difftime64',0
word_10023524	dw 73Ch			; DATA XREF: .rdata:10023314o
		db 'strncpy',0
word_1002352E	dw 5FEh			; DATA XREF: .rdata:10023280o
		db 'calloc',0
		align 4
word_10023538	dw 683h			; DATA XREF: .rdata:10023284o
		db 'free',0
		align 10h
word_10023540	dw 6DBh			; DATA XREF: .rdata:10023288o
		db 'malloc',0
		align 2
word_1002354A	dw 709h			; DATA XREF: .rdata:1002328Co
		db 'realloc',0
word_10023554	dw 6FBh			; DATA XREF: .rdata:10023290o
		db 'perror',0
		align 2
word_1002355E	dw 6A9h			; DATA XREF: .rdata:10023294o
		db 'isspace',0
word_10023568	dw 69Fh			; DATA XREF: .rdata:10023298o
		db 'isalnum',0
word_10023572	dw 704h			; DATA XREF: .rdata:1002329Co
		db 'qsort',0
word_1002357A	dw 257h			; DATA XREF: .rdata:100232A0o
		db '_ctime64',0
		align 2
word_10023586	dw 6A6h			; DATA XREF: .rdata:100232A4o
		db 'islower',0
word_10023590	dw 6A3h			; DATA XREF: .rdata:100232A8o
		db 'isdigit',0
word_1002359A	dw 1B8h			; DATA XREF: .rdata:100232ACo
		db '__iob_func',0
		align 4
word_100235A8	dw 668h			; DATA XREF: .rdata:100232B0o
		db 'fflush',0
		align 2
word_100235B2	dw 67Eh			; DATA XREF: .rdata:100232B4o
		db 'fputs',0
aMsvcr120_dll	db 'MSVCR120.dll',0     ; DATA XREF: .rdata:100231C0o
		align 4
word_100235C8	dw 277h			; DATA XREF: .rdata:100232B8o
		db '_except1',0
		align 4
word_100235D4	dw 250h			; DATA XREF: .rdata:100232BCo
		db '_crt_debugger_hook',0
		align 2
word_100235EA	dw 1ACh			; DATA XREF: .rdata:100232C0o
		db '__crtUnhandledException',0
word_10023604	dw 1ABh			; DATA XREF: .rdata:100232C4o
		db '__crtTerminateProcess',0
word_1002361C	dw 16Fh			; DATA XREF: .rdata:100232C8o
		db '__CppXcptFilter',0
word_1002362E	dw 217h			; DATA XREF: .rdata:100232CCo
		db '_amsg_exit',0
		align 4
word_1002363C	dw 3A5h			; DATA XREF: .rdata:100232D0o
		db '_malloc_crt',0
word_1002364A	dw 30Ch			; DATA XREF: .rdata:100232D4o
		db '_initterm',0
word_10023656	dw 30Dh			; DATA XREF: .rdata:100232D8o
		db '_initterm_e',0
word_10023664	dw 394h			; DATA XREF: .rdata:100232DCo
		db '_lock',0
word_1002366C	dw 504h			; DATA XREF: .rdata:100232E0o
		db '_unlock',0
word_10023676	dw 22Eh			; DATA XREF: .rdata:100232E4o
		db '_calloc_crt',0
word_10023684	dw 1AEh			; DATA XREF: .rdata:100232E8o
		db '__dllonexit',0
word_10023692	dw 43Ah			; DATA XREF: .rdata:100232ECo
		db '_onexit',0
word_1002369C	dw 18Ch			; DATA XREF: .rdata:100232F0o
		db '__clean_type_info_names_internal',0
		align 10h
word_100236C0	dw 27Ah			; DATA XREF: .rdata:100232F4o
		db '_except_handler4_common',0
word_100236DA	dw 367h			; DATA XREF: .rdata:10023234o
		db 'IsDebuggerPresent',0
word_100236EE	dw 36Dh			; DATA XREF: .rdata:10023230o
		db 'IsProcessorFeaturePresent',0
word_1002370A	dw 121h			; DATA XREF: .rdata:1002322Co
		db 'EncodePointer',0
word_1002371A	dw 0FEh			; DATA XREF: .rdata:10023228o
		db 'DecodePointer',0
word_1002372A	dw 42Dh			; DATA XREF: .rdata:10023224o
		db 'QueryPerformanceCounter',0
word_10023744	dw 20Ah			; DATA XREF: .rdata:10023220o
		db 'GetCurrentProcessId',0
word_1002375A	dw 20Eh			; DATA XREF: .rdata:1002321Co
		db 'GetCurrentThreadId',0
		align 10h
word_10023770	dw 2D6h			; DATA XREF: .rdata:10023238o
		db 'GetSystemTimeAsFileTime',0
word_1002378A	dw 4B2h			; DATA XREF: .rdata:10023318o
		db '_stricmp',0
		align 2
word_10023796	dw 5ADh			; DATA XREF: .rdata:1002331Co
		db '_write',0
		align 1000h
_rdata		ends

; Section 3. (virtual address 00024000)
; Virtual size			: 00001448 (   5192.)
; Section size in file		: 00000A00 (   2560.)
; Offset to raw	data for section: 00022000
; Flags	C0300040: Data Readable	Writable
; Alignment	: 4 bytes
; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
		;org 10024000h
off_10024000	dd offset aAddable	; DATA XREF: sub_10003C30+118r
					; sub_10003C30+120o ...
					; "addable"
		dd offset aModrdn	; "modrdn"
		dd offset aAltview	; "altview"
		align 10h
dword_10024010	dd 1			; DATA XREF: sub_10003C30+135r
		dd 2, 4
off_1002401C	dd offset aRo		; DATA XREF: sub_10003C30+3F6r
					; sub_10003C30+3FEo ...
					; "ro"
		dd offset aSort		; "sort"
		dd offset a1val		; "1val"
		dd offset aHide		; "hide"
		dd offset aRequired	; "required"
		dd offset aHideiffalse	; "hideiffalse"
		align 8
off_10024038	dd offset aCis		; DATA XREF: sub_10003C30+453r
					; sub_10003C30+45Bo ...
					; "cis"
		dd offset aMls		; "mls"
		dd offset aDn_0		; "dn"
		dd offset aBool		; "bool"
		dd offset aJpeg		; "jpeg"
		dd offset aJpegbtn	; "jpegbtn"
		dd offset aFax		; "fax"
		dd offset aFaxbtn	; "faxbtn"
		dd offset aAudiobtn	; "audiobtn"
		dd offset aTime		; "time"
		dd offset aDate		; "date"
		dd offset aUrl_1	; "url"
		dd offset aSearchact	; "searchact"
		dd offset aLinkact	; "linkact"
		dd offset aAdddnact	; "adddnact"
		dd offset aAddact	; "addact"
		dd offset aVerifyact	; "verifyact"
		dd offset aMail		; "mail"
		dd 2 dup(0)
dword_10024088	dd 1000001h		; DATA XREF: sub_10003C30+4A9r
		dd 1000002h, 1000003h, 4000004h, 2000005h, 8010006h, 2000007h
		dd 8010008h, 8010009h, 100000Ah, 100000Bh, 100000Ch, 1000000Dh
		dd 1000000Eh, 2	dup(1000000Fh),	10000010h, 1000011h
dword_100240D0	dd 1			; DATA XREF: sub_10003C30+42Fr
		dd 2, 4, 8, 10h, 20h
dword_100240E8	dd 1			; DATA XREF: ldap_tmplerr2stringr
off_100240EC	dd offset aBadTemplateVer ; DATA XREF: ldap_tmplerr2string:loc_10003C1Ar
					; "Bad template	version"
dword_100240F0	dd 2			; DATA XREF: ldap_tmplerr2string+15r
		dd offset aOutOfMemory	; "Out of memory"
		dd 3
		dd offset aBadTemplateSyn ; "Bad template syntax"
		dd 4
		dd offset aFileErrorReadi ; "File error	reading	template"
		dd 0FFFFFFFFh, 0
dword_10024110	dd 0			; DATA XREF: ldap_err2stringr
					; ldap_perror:loc_100048A8r
off_10024114	dd offset aSuccess	; DATA XREF: ldap_err2string:loc_100045DAr
					; ldap_perror:loc_10004961r
					; "Success"
dword_10024118	dd 1			; DATA XREF: ldap_err2string+15r
					; ldap_perror+13Dr
		dd offset aOperationsErro ; "Operations	error"
		dd 2
		dd offset aProtocolError ; "Protocol error"
		dd 3
		dd offset aTimelimitExcee ; "Timelimit exceeded"
		dd 4
		dd offset aSizelimitExcee ; "Sizelimit exceeded"
		dd 5
		dd offset aCompareFalse	; "Compare false"
		dd 6
		dd offset aCompareTrue	; "Compare true"
		dd 7
		dd offset aAuthentication ; "Authentication method not supported"
		dd 8
		dd offset aStrongAuthenti ; "Strong authentication required"
		dd 9
		dd offset aPartialResults ; "Partial results and referral received"
		dd 0Ah
		dd offset aReferralReceiv ; "Referral received"
		dd 0Bh
		dd offset aAdministrative ; "Administrative limit exceeded"
		dd 0Ch
		dd offset aUnavailableCri ; "Unavailable critical extension"
		dd 0Dh
		dd offset aConfidentialit ; "Confidentiality required"
		dd 0Eh
		dd offset aSaslBindInProg ; "SASL bind in progress"
		dd 10h
		dd offset aNoSuchAttribut ; "No	such attribute"
		dd 11h
		dd offset aUndefinedAttri ; "Undefined attribute type"
		dd 12h
		dd offset aInappropriateM ; "Inappropriate matching"
		dd 13h
		dd offset aConstraintViol ; "Constraint	violation"
		dd 14h
		dd offset aTypeOrValueExi ; "Type or value exists"
		dd 15h
		dd offset aInvalidSyntax ; "Invalid syntax"
		dd 20h
		dd offset aNoSuchObject	; "No such object"
		dd 21h
		dd offset aAliasProblem	; "Alias problem"
		dd 22h
		dd offset aInvalidDnSynta ; "Invalid DN	syntax"
		dd 23h
		dd offset aObjectIsALeaf ; "Object is a	leaf"
		dd 24h
		dd offset aAliasDereferen ; "Alias dereferencing problem"
		dd 30h
		dd offset aInappropriateA ; "Inappropriate authentication"
		dd 31h
		dd offset aInvalidCredent ; "Invalid credentials"
		dd 32h
		dd offset aInsufficientAc ; "Insufficient access"
		dd 33h
		dd offset aDsaIsBusy	; "DSA is busy"
		dd 34h
		dd offset aDsaIsUnavailab ; "DSA is unavailable"
		dd 35h
		dd offset aDsaIsUnwilling ; "DSA is unwilling to perform"
		dd 36h
		dd offset aLoopDetected	; "Loop	detected"
		dd 3Ch
		dd offset aSortControlIsM ; "Sort Control is missing"
		dd 3Dh
		dd offset aSearchResultsE ; "Search results exceed the range specifi"...
		dd 40h
		dd offset aNamingViolatio ; "Naming violation"
		dd 41h
		dd offset aObjectClassVio ; "Object class violation"
		dd 42h
		dd offset aOperationNotAl ; "Operation not allowed on nonleaf"
		dd 43h
		dd offset aOperationNot_0 ; "Operation not allowed on RDN"
		dd 44h
		dd offset aAlreadyExists ; "Already exists"
		dd 45h
		dd offset aCannotModifyOb ; "Cannot modify object class"
		dd 46h
		dd offset aResultsTooLarg ; "Results too large"
		dd 47h
		dd offset aAffectsMultipl ; "Affects multiple servers"
		dd 50h
		dd offset aUnknownError	; "Unknown error"
		dd 51h
		dd offset aCanTContactLda ; "Can't contact LDAP server"
		dd 52h
		dd offset aLocalError	; "Local error"
		dd 53h
		dd offset aEncodingError ; "Encoding error"
		dd 54h
		dd offset aDecodingError ; "Decoding error"
		dd 55h
		dd offset aTimedOut	; "Timed out"
		dd 56h
		dd offset aUnknownAuthent ; "Unknown authentication method"
		dd 57h
		dd offset aBadSearchFilte ; "Bad search	filter"
		dd 58h
		dd offset aUserCancelledO ; "User cancelled operation"
		dd 59h
		dd offset aBadParameterTo ; "Bad parameter to an ldap routine"
		dd 5Ah
		dd offset aOutOfMemory	; "Out of memory"
		dd 5Bh
		dd offset aCanTConnectToT ; "Can't connect to the LDAP server"
		dd 5Ch
		dd offset aNotSupportedBy ; "Not supported by this version of the LD"...
		dd 5Dh
		dd offset aRequestedLdapC ; "Requested LDAP control not	found"
		dd 5Eh
		dd offset aNoResultsRetur ; "No	results	returned"
		dd 5Fh
		dd offset aMoreResultsToR ; "More results to return"
		dd 60h
		dd offset aClientDetected ; "Client detected loop"
		dd 61h
		dd offset aReferralHopLim ; "Referral hop limit	exceeded"
		dd 0FFFFFFFFh, 2 dup(0)
off_10024304	dd offset aServer_side_so ; DATA XREF: sub_100073A0:loc_10007420r
					; sub_10007480:loc_100074B0r
					; "SERVER_SIDE_SORT"
dword_10024308	dd 1			; DATA XREF: sub_10007480+83r
		align 10h
		dd offset aVirtual_list_v ; "VIRTUAL_LIST_VIEW"
		dd 1, 0
		dd offset aPersistent_sea ; "PERSISTENT_SEARCH"
		dd 1, 0
		dd offset aProxy_authoriz ; "PROXY_AUTHORIZATION"
		dd 1, 0
		dd offset aX_lderrno	; "X_LDERRNO"
		dd 1, 0
		dd offset aX_memcache	; "X_MEMCACHE"
		dd 1, 0
		dd offset aX_io_functions ; "X_IO_FUNCTIONS"
		dd 1, 0
		dd offset aX_extio_functi ; "X_EXTIO_FUNCTIONS"
		dd 1, 0
		dd offset aX_dns_function ; "X_DNS_FUNCTIONS"
		dd 1, 0
		dd offset aX_memalloc_fun ; "X_MEMALLOC_FUNCTIONS"
		dd 1, 0
		dd offset aX_thread_funct ; "X_THREAD_FUNCTIONS"
		dd 1, 0
		dd offset aX_exthread_fun ; "X_EXTHREAD_FUNCTIONS"
		dd 1, 0
		dd offset aX_getlangvalue ; "X_GETLANGVALUES"
		dd 1, 0
		dd offset aX_client_side_ ; "X_CLIENT_SIDE_SORT"
		dd 1, 0
		dd offset aX_url_function ; "X_URL_FUNCTIONS"
		dd 1, 0
		dd offset aX_filter_funct ; "X_FILTER_FUNCTIONS"
		dd 1
dword_100243C0	dd 0			; DATA XREF: sub_10008360+4D1r
		dd 4C11DB7h, 9823B6Eh, 0D4326D9h, 130476DCh, 17C56B6Bh
		dd 1A864DB2h, 1E475005h, 2608EDB8h, 22C9F00Fh, 2F8AD6D6h
		dd 2B4BCB61h, 350C9B64h, 31CD86D3h, 3C8EA00Ah, 384FBDBDh
		dd 4C11DB70h, 48D0C6C7h, 4593E01Eh, 4152FDA9h, 5F15ADACh
		dd 5BD4B01Bh, 569796C2h, 52568B75h, 6A1936C8h, 6ED82B7Fh
		dd 639B0DA6h, 675A1011h, 791D4014h, 7DDC5DA3h, 709F7B7Ah
		dd 745E66CDh, 9823B6E0h, 9CE2AB57h, 91A18D8Eh, 95609039h
		dd 8B27C03Ch, 8FE6DD8Bh, 82A5FB52h, 8664E6E5h, 0BE2B5B58h
		dd 0BAEA46EFh, 0B7A96036h, 0B3687D81h, 0AD2F2D84h, 0A9EE3033h
		dd 0A4AD16EAh, 0A06C0B5Dh, 0D4326D90h, 0D0F37027h, 0DDB056FEh
		dd 0D9714B49h, 0C7361B4Ch, 0C3F706FBh, 0CEB42022h, 0CA753D95h
		dd 0F23A8028h, 0F6FB9D9Fh, 0FBB8BB46h, 0FF79A6F1h, 0E13EF6F4h
		dd 0E5FFEB43h, 0E8BCCD9Ah, 0EC7DD02Dh, 34867077h, 30476DC0h
		dd 3D044B19h, 39C556AEh, 278206ABh, 23431B1Ch, 2E003DC5h
		dd 2AC12072h, 128E9DCFh, 164F8078h, 1B0CA6A1h, 1FCDBB16h
		dd 18AEB13h, 54BF6A4h, 808D07Dh, 0CC9CDCAh, 7897AB07h
		dd 7C56B6B0h, 71159069h, 75D48DDEh, 6B93DDDBh, 6F52C06Ch
		dd 6211E6B5h, 66D0FB02h, 5E9F46BFh, 5A5E5B08h, 571D7DD1h
		dd 53DC6066h, 4D9B3063h, 495A2DD4h, 44190B0Dh, 40D816BAh
		dd 0ACA5C697h, 0A864DB20h, 0A527FDF9h, 0A1E6E04Eh, 0BFA1B04Bh
		dd 0BB60ADFCh, 0B6238B25h, 0B2E29692h, 8AAD2B2Fh, 8E6C3698h
		dd 832F1041h, 87EE0DF6h, 99A95DF3h, 9D684044h, 902B669Dh
		dd 94EA7B2Ah, 0E0B41DE7h, 0E4750050h, 0E9362689h, 0EDF73B3Eh
		dd 0F3B06B3Bh, 0F771768Ch, 0FA325055h, 0FEF34DE2h, 0C6BCF05Fh
		dd 0C27DEDE8h, 0CF3ECB31h, 0CBFFD686h, 0D5B88683h, 0D1799B34h
		dd 0DC3ABDEDh, 0D8FBA05Ah, 690CE0EEh, 6DCDFD59h, 608EDB80h
		dd 644FC637h, 7A089632h, 7EC98B85h, 738AAD5Ch, 774BB0EBh
		dd 4F040D56h, 4BC510E1h, 46863638h, 42472B8Fh, 5C007B8Ah
		dd 58C1663Dh, 558240E4h, 51435D53h, 251D3B9Eh, 21DC2629h
		dd 2C9F00F0h, 285E1D47h, 36194D42h, 32D850F5h, 3F9B762Ch
		dd 3B5A6B9Bh, 315D626h,	7D4CB91h, 0A97ED48h, 0E56F0FFh
		dd 1011A0FAh, 14D0BD4Dh, 19939B94h, 1D528623h, 0F12F560Eh
		dd 0F5EE4BB9h, 0F8AD6D60h, 0FC6C70D7h, 0E22B20D2h, 0E6EA3D65h
		dd 0EBA91BBCh, 0EF68060Bh, 0D727BBB6h, 0D3E6A601h, 0DEA580D8h
		dd 0DA649D6Fh, 0C423CD6Ah, 0C0E2D0DDh, 0CDA1F604h, 0C960EBB3h
		dd 0BD3E8D7Eh, 0B9FF90C9h, 0B4BCB610h, 0B07DABA7h, 0AE3AFBA2h
		dd 0AAFBE615h, 0A7B8C0CCh, 0A379DD7Bh, 9B3660C6h, 9FF77D71h
		dd 92B45BA8h, 9675461Fh, 8832161Ah, 8CF30BADh, 81B02D74h
		dd 857130C3h, 5D8A9099h, 594B8D2Eh, 5408ABF7h, 50C9B640h
		dd 4E8EE645h, 4A4FFBF2h, 470CDD2Bh, 43CDC09Ch, 7B827D21h
		dd 7F436096h, 7200464Fh, 76C15BF8h, 68860BFDh, 6C47164Ah
		dd 61043093h, 65C52D24h, 119B4BE9h, 155A565Eh, 18197087h
		dd 1CD86D30h, 29F3D35h,	65E2082h, 0B1D065Bh, 0FDC1BECh
		dd 3793A651h, 3352BBE6h, 3E119D3Fh, 3AD08088h, 2497D08Dh
		dd 2056CD3Ah, 2D15EBE3h, 29D4F654h, 0C5A92679h,	0C1683BCEh
		dd 0CC2B1D17h, 0C8EA00A0h, 0D6AD50A5h, 0D26C4D12h, 0DF2F6BCBh
		dd 0DBEE767Ch, 0E3A1CBC1h, 0E760D676h, 0EA23F0AFh, 0EEE2ED18h
		dd 0F0A5BD1Dh, 0F464A0AAh, 0F9278673h, 0FDE69BC4h, 89B8FD09h
		dd 8D79E0BEh, 803AC667h, 84FBDBD0h, 9ABC8BD5h, 9E7D9662h
		dd 933EB0BBh, 97FFAD0Ch, 0AFB010B1h, 0AB710D06h, 0A6322BDFh
		dd 0A2F33668h, 0BCB4666Dh, 0B8757BDAh, 0B5365D03h, 0B1F740B4h
off_100247C0	dd offset sub_1000B070	; DATA XREF: sub_1000B840+76o
		dd offset sub_1000B0A0
		dd offset sub_1000B0C0
		dd offset sub_1000B0E0
		dd offset sub_1000B100
		dd offset sub_1000B110
		dd offset sub_1000B190
		dd offset sub_1000B120
		dd 3 dup(0)
		dd 3FF0000h, 87FFFFFEh,	7FFFFFEh
byte_100247F8	db 1			; DATA XREF: sub_1000DFE0+70r
					; sub_1000DFE0+187r ...
		db 2, 4, 8
		db 10h
byte_100247FD	db 20h			; DATA XREF: .text:1000E2B9r
		dw 8040h
byte_10024800	db 0			; DATA XREF: sub_1000DFE0+CDr
					; sub_1000DFE0+E0r ...
		align 4
		dd 0Bh dup(0)
		dd 2 dup(1010101h), 101h, 0
		dd 1010100h, 5 dup(1010101h), 10101h, 1000000h,	1010100h
		dd 5 dup(1010101h), 10101h, 0
off_10024880	dd offset aInternal	; DATA XREF: sub_10015920+E2r
					; sub_10015920+EAo ...
					; "internal"
		align 8
dword_10024888	dd 1			; DATA XREF: sub_10015920+103r
					; sub_10016B10+155o
		dd 1Fh,	1Ch, 1Fh, 1Eh, 1Fh, 1Eh, 2 dup(1Fh), 1Eh, 1Fh
		dd 1Eh,	1Fh
off_100248BC	dd offset aObjectclass_0 ; DATA	XREF: sub_10017BC0+1C3o
					; "objectClass"
		dd 2 dup(0)
byte_100248C8	db 1			; DATA XREF: ldap_utf8characters+1Dr
					; ldap_utf8copy+Fr ...
		db 3 dup(1)
		dd 7 dup(1010101h), 4 dup(0)
		dd 2 dup(2020202h), 3030303h, 6050404h
off_10024908	dd offset aWsaasyncgethos ; DATA XREF: sub_10019C80:loc_10019CB5r
					; "WSAAsyncGetHostByName"
		dd offset aWsaasyncselect ; "WSAAsyncSelect"
		dd offset aWsacleanup	; "WSACleanup"
		dd offset aWsagetlasterro ; "WSAGetLastError"
		dd offset aWsasetlasterro ; "WSASetLastError"
		dd offset aWsastartup	; "WSAStartup"
		dd offset a__wsafdisset	; "__WSAFDIsSet"
		dd offset aAccept	; "accept"
		dd offset aBind		; "bind"
		dd offset aClosesocket	; "closesocket"
		dd offset aConnect	; "connect"
		dd offset aGethostbyname ; "gethostbyname"
		dd offset aGethostbyaddr ; "gethostbyaddr"
		dd offset aGethostname	; "gethostname"
		dd offset aGetpeername	; "getpeername"
		dd offset aGetsockname	; "getsockname"
		dd offset aGetsockopt	; "getsockopt"
		dd offset aGetprotobyname ; "getprotobyname"
		dd offset aHtonl	; "htonl"
		dd offset aHtons	; "htons"
		dd offset aInet_addr	; "inet_addr"
		dd offset aIoctlsocket	; "ioctlsocket"
		dd offset aListen	; "listen"
		dd offset aNtohl	; "ntohl"
		dd offset aNtohs	; "ntohs"
		dd offset aRecv		; "recv"
		dd offset aSelect	; "select"
		dd offset aSend		; "send"
		dd offset aSetsockopt	; "setsockopt"
		dd offset aShutdown	; "shutdown"
		dd offset aSocket	; "socket"
		dd offset aInet_ntoa	; "inet_ntoa"
dword_10024988	dd 400h			; DATA XREF: ber_allocr ber_alloc+40r	...
___security_cookie dd 0BB40E64Eh	; DATA XREF: sub_10001E00+3r
					; ldap_perror+6r ...
dword_10024990	dd 44BF19B1h		; DATA XREF: ___report_gsfailure+E3r
					; sub_1001E0FB+29w ...
		align 10h
dword_100249A0	dd 1			; DATA XREF: sub_1001D984+11w
					; sub_1001D984+33r ...
		align 10h
dword_100249B0	dd 0FFFFFFFFh		; DATA XREF: ___DllMainCRTStartup+1Cw
					; ___DllMainCRTStartup:$LN20w
		align 10h
xmmword_100249C0 xmmword 0		; DATA XREF: ldap_get_option+2Br
					; ldap_init+22r ...
dword_100249D0	dd 0			; DATA XREF: ldap_set_rebind_proc+9r
					; ldap_get_option+4r ...
		dd 6 dup(0)
; DWORD	dwTlsIndex
dwTlsIndex	dd 0			; DATA XREF: sub_1000B120+1r
					; sub_1000B120+21r ...
; HANDLE hMutex
hMutex		dd 0			; DATA XREF: sub_1000B840+Fw
					; sub_1000B840:loc_1000B8E9r
dword_100249F4	dd 0			; DATA XREF: sub_1000CB00+BDr
					; sub_1000CB00+D3w
dword_100249F8	dd 0			; DATA XREF: .text:1000E240w
					; .text:1000E5B1w ...
dword_100249FC	dd 0			; DATA XREF: .text:1000E456w
					; .text:1000E475r ...
		dd 9 dup(?)
dword_10024A24	dd ?			; DATA XREF: sub_1000DFE0+17r
					; sub_1000E680+23w
byte_10024A28	db ?			; DATA XREF: .text:1000E217o
					; .text:1000E34Aw ...
byte_10024A29	db ?			; DATA XREF: sub_1000E680+64r
		align 4
		dd 0FFh	dup(?)
byte_10024E28	db ?			; DATA XREF: .text:1000E31Aw
					; .text:1000E33Aw ...
		align 4
		db ?
byte_10024E2D	db ?			; DATA XREF: .text:1000E2C1w
		align 10h
		db 3 dup(?)
byte_10024E33	db ?			; DATA XREF: .text:1000E2CDw
		align 8
xmmword_10024E38 xmmword ?		; DATA XREF: sub_1000DFE0+A6w
					; sub_1000DFE0+124r ...
xmmword_10024E48 xmmword ?		; DATA XREF: sub_1000E680+31w
dword_10024E58	dd ?			; DATA XREF: sub_1000E680+Aw
dword_10024E5C	dd ?			; DATA XREF: sub_1000E680+14w
dword_10024E60	dd ?			; DATA XREF: sub_1000DFE0+B6w
					; sub_1000DFE0+12Br ...
		dd 9 dup(?)
dword_10024E88	dd ?			; DATA XREF: sub_10014950+3Fr
					; ldap_multisort_entries+165w
dword_10024E8C	dd ?			; DATA XREF: sub_10019BA0+14r
					; sub_10019BA0+6Er ...
dword_10024E90	dd ?			; DATA XREF: sub_10019BA0+23o
dword_10024E94	dd ?			; DATA XREF: sub_10019BA0+39w
					; sub_10019BA0:loc_10019BE5r ...
; struct _RTL_CRITICAL_SECTION CriticalSection
CriticalSection	_RTL_CRITICAL_SECTION <?> ; DATA XREF: sub_10019BA0+2Eo
					; sub_10019BA0:loc_10019C03o ...
dword_10024EB0	dd ?			; DATA XREF: sub_1001AD20+77r
					; ber_flatten+2r ...
dword_10024EB4	dd ?			; DATA XREF: ber_alloc+5r
					; ber_alloc_t+5r ...
dword_10024EB8	dd ?			; DATA XREF: sub_1001C500r
dword_10024EBC	dd ?			; DATA XREF: ber_flush+8Br
					; ber_flush:loc_1001B0F0r ...
dword_10024EC0	dd ?			; DATA XREF: ___report_gsfailure+9Fw
					; ___report_securityfailure+95w ...
dword_10024EC4	dd ?			; DATA XREF: ___report_gsfailure+A9w
					; ___report_securityfailure+9Fw
		dd ?
dword_10024ECC	dd ?			; DATA XREF: ___report_gsfailure+9Aw
					; ___report_securityfailure+90w
dword_10024ED0	dd ?			; DATA XREF: ___report_gsfailure+B3w
					; ___report_securityfailure+A9w
dword_10024ED4	dd ?			; DATA XREF: ___report_gsfailure+C3w
					; ___report_securityfailure+BCw
		dd 0Eh dup(?)
dword_10024F10	dd ?			; DATA XREF: ___report_gsfailure+8Bw
					; .rdata:10020798o
		dd 22h dup(?)
word_10024F9C	dw ?			; DATA XREF: ___report_gsfailure+5Fw
					; ___report_securityfailure+5Fw
		align 10h
word_10024FA0	dw ?			; DATA XREF: ___report_gsfailure+58w
					; ___report_securityfailure+58w
		align 4
word_10024FA4	dw ?			; DATA XREF: ___report_gsfailure+51w
					; ___report_securityfailure+51w
		align 4
word_10024FA8	dw ?			; DATA XREF: ___report_gsfailure+4Aw
					; ___report_securityfailure+4Aw
		align 4
dword_10024FAC	dd ?			; DATA XREF: ___report_gsfailure+36w
					; ___report_securityfailure+36w
dword_10024FB0	dd ?			; DATA XREF: ___report_gsfailure+30w
					; ___report_securityfailure+30w
dword_10024FB4	dd ?			; DATA XREF: ___report_gsfailure+2Aw
					; ___report_securityfailure+2Aw
dword_10024FB8	dd ?			; DATA XREF: ___report_gsfailure+24w
					; ___report_securityfailure+24w
dword_10024FBC	dd ?			; DATA XREF: ___report_gsfailure+1Ew
					; ___report_securityfailure+1Ew
dword_10024FC0	dd ?			; DATA XREF: ___report_gsfailure:loc_1001D7C6w
					; ___report_securityfailure:loc_1001D8CDw
dword_10024FC4	dd ?			; DATA XREF: ___report_gsfailure+70w
					; ___report_securityfailure+70w
dword_10024FC8	dd ?			; DATA XREF: ___report_gsfailure+78w
					; ___report_gsfailure+95r ...
word_10024FCC	dw ?			; DATA XREF: ___report_gsfailure+43w
					; ___report_securityfailure+43w
		align 10h
dword_10024FD0	dd ?			; DATA XREF: ___report_gsfailure+67w
					; ___report_securityfailure+67w
dword_10024FD4	dd ?			; DATA XREF: ___report_gsfailure+80w
					; ___report_securityfailure+80w
word_10024FD8	dw ?			; DATA XREF: ___report_gsfailure+3Cw
					; ___report_securityfailure+3Cw
		align 4
		dd 80h dup(?)
dword_100251DC	dd ?			; DATA XREF: ___raise_securityfailure+Bw
					; ___raise_securityfailure+1Dr
dword_100251E0	dd ?			; DATA XREF: ldap_keysort_entries+88r
					; sub_1001D984+3w ...
dword_100251E4	dd ?			; DATA XREF: sub_1001D984:loc_1001DA4Br
					; sub_1001D984+D0w ...
dword_100251E8	dd ?			; DATA XREF: sub_1001DB49+12r
					; sub_1001DB49+25w ...
dword_100251EC	dd 5 dup(?)		; DATA XREF: sub_1001E1E4o
dword_10025200	dd ?			; DATA XREF: sub_10019C80+Bo
					; sub_10019C80+3Ew ...
		dd 2 dup(?)
dword_1002520C	dd ?			; DATA XREF: sub_10019C60+Er
dword_10025210	dd ?			; DATA XREF: sub_10019E10+27r
					; sub_10019E50+27r ...
dword_10025214	dd ?			; DATA XREF: sub_10019C80+70r
dword_10025218	dd ?			; DATA XREF: sub_10019DC0+Er
		dd 2 dup(?)
dword_10025224	dd ?			; DATA XREF: sub_10019E10+Er
dword_10025228	dd ?			; DATA XREF: sub_10019E50+Er
dword_1002522C	dd ?			; DATA XREF: sub_10019E90+Er
		align 20h
dword_10025240	dd ?			; DATA XREF: sub_10019ED0+Er
		align 8
dword_10025248	dd ?			; DATA XREF: sub_10019F10+Er
dword_1002524C	dd ?			; DATA XREF: sub_10019F30+Er
dword_10025250	dd ?			; DATA XREF: sub_10019F50+Er
dword_10025254	dd ?			; DATA XREF: sub_10019F70+Er
		dd ?
dword_1002525C	dd ?			; DATA XREF: sub_10019FB0+Er
		dd ?
dword_10025264	dd ?			; DATA XREF: sub_10019FD0+Er
dword_10025268	dd ?			; DATA XREF: sub_1001A010+43r
dword_1002526C	dd ?			; DATA XREF: sub_1001A0A0+Er
		dd 2 dup(?)
dword_10025278	dd ?			; DATA XREF: sub_1001A0E0+Er
		align 10h
dword_10025280	dd 2 dup(?)		; DATA XREF: ldap_set_rebind_proc:loc_10001BE6o
					; ldap_get_option+7Ao ...
dword_10025288	dd ?			; DATA XREF: sub_1000B840+5Bw
byte_1002528C	db ?			; DATA XREF: sub_1000B840+65w
		align 10h
		dd 0Fh dup(?)
dword_100252CC	dd ?			; DATA XREF: sub_1000B840+6Cw
dword_100252D0	dd ?			; DATA XREF: sub_1000B840+51w
		dd 13h dup(?)
dword_10025320	dd ?			; DATA XREF: ldap_init+58r
					; ldap_init+89r
		dd 43h dup(?)
dword_10025430	dd ?			; DATA XREF: sub_1000B840+82w
dword_10025434	dd ?			; DATA XREF: sub_1001DB49+20o
					; sub_1001DB49+112o ...
dword_10025438	dd ?			; DATA XREF: sub_1001DB49:loc_1001DB9Cr
					; sub_1001DB49:loc_1001DC65w ...
; PVOID	dword_1002543C
dword_1002543C	dd ?			; DATA XREF: _pre_c_init+1Bw
					; sub_1001DB49+82r ...
; PVOID	Ptr
Ptr		dd ?			; DATA XREF: _pre_c_init+16w
					; sub_1001DB49:loc_1001DBB2r ...
dword_10025444	dd ?			; DATA XREF: sub_1001DB49:loc_1001DD09r
					; sub_1001DB49+1C9o ...
		align 1000h
_data		ends


		end DllEntryPoint
